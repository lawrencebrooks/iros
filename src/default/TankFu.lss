
TankFu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  0000f17e  0000f27e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000f17e  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000fa0  00800106  00800106  0000f286  2**5
                  ALLOC
  3 .stab         0000057c  00000000  00000000  0000f284  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000256  00000000  00000000  0000f800  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000fa56  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000006b8  00000000  00000000  0000fa68  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000a13d  00000000  00000000  00010120  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001614  00000000  00000000  0001a25d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000022ec  00000000  00000000  0001b871  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000015c4  00000000  00000000  0001db60  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001e77  00000000  00000000  0001f124  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000092b7  00000000  00000000  00020f9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000007b8  00000000  00000000  0002a258  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 55 43 	jmp	0x86aa	; 0x86aa <__ctors_end>
       4:	0c 94 be 43 	jmp	0x877c	; 0x877c <__bad_interrupt>
       8:	0c 94 be 43 	jmp	0x877c	; 0x877c <__bad_interrupt>
       c:	0c 94 be 43 	jmp	0x877c	; 0x877c <__bad_interrupt>
      10:	0c 94 be 43 	jmp	0x877c	; 0x877c <__bad_interrupt>
      14:	0c 94 be 43 	jmp	0x877c	; 0x877c <__bad_interrupt>
      18:	0c 94 be 43 	jmp	0x877c	; 0x877c <__bad_interrupt>
      1c:	0c 94 be 43 	jmp	0x877c	; 0x877c <__bad_interrupt>
      20:	0c 94 5f 48 	jmp	0x90be	; 0x90be <__vector_8>
      24:	0c 94 be 43 	jmp	0x877c	; 0x877c <__bad_interrupt>
      28:	0c 94 be 43 	jmp	0x877c	; 0x877c <__bad_interrupt>
      2c:	0c 94 be 43 	jmp	0x877c	; 0x877c <__bad_interrupt>
      30:	0c 94 be 43 	jmp	0x877c	; 0x877c <__bad_interrupt>
      34:	0c 94 27 46 	jmp	0x8c4e	; 0x8c4e <__vector_13>
      38:	0c 94 67 46 	jmp	0x8cce	; 0x8cce <__vector_14>
      3c:	0c 94 be 43 	jmp	0x877c	; 0x877c <__bad_interrupt>
      40:	0c 94 be 43 	jmp	0x877c	; 0x877c <__bad_interrupt>
      44:	0c 94 be 43 	jmp	0x877c	; 0x877c <__bad_interrupt>
      48:	0c 94 be 43 	jmp	0x877c	; 0x877c <__bad_interrupt>
      4c:	0c 94 be 43 	jmp	0x877c	; 0x877c <__bad_interrupt>
      50:	0c 94 be 43 	jmp	0x877c	; 0x877c <__bad_interrupt>
      54:	0c 94 be 43 	jmp	0x877c	; 0x877c <__bad_interrupt>
      58:	0c 94 be 43 	jmp	0x877c	; 0x877c <__bad_interrupt>
      5c:	0c 94 be 43 	jmp	0x877c	; 0x877c <__bad_interrupt>
      60:	0c 94 be 43 	jmp	0x877c	; 0x877c <__bad_interrupt>
      64:	0c 94 be 43 	jmp	0x877c	; 0x877c <__bad_interrupt>
      68:	0c 94 be 43 	jmp	0x877c	; 0x877c <__bad_interrupt>
      6c:	0c 94 be 43 	jmp	0x877c	; 0x877c <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	81 00       	.word	0x0081	; ????
      72:	45 00       	.word	0x0045	; ????
      74:	27 ff       	sbrs	r18, 7
      76:	24 ff       	sbrs	r18, 4
      78:	2a 90       	ld	r2, -Y
      7a:	2b 1c       	adc	r2, r11
      7c:	21 0c       	add	r2, r1
      7e:	22 fb       	bst	r18, 2
      80:	85 00       	.word	0x0085	; ????
      82:	84 00       	.word	0x0084	; ????
      84:	89 03       	fmulsu	r16, r17
      86:	88 8d       	ldd	r24, Y+24	; 0x18
      88:	81 09       	sbc	r24, r1
      8a:	6f 02       	muls	r22, r31
      8c:	44 42       	sbci	r20, 0x24	; 36
      8e:	47 00       	.word	0x0047	; ????
      90:	45 01       	movw	r8, r10
      92:	b0 83       	st	Z, r27
      94:	b3 00       	.word	0x00b3	; ????
      96:	b1 01       	movw	r22, r2
      98:	25 11       	cpse	r18, r5
      9a:	8a 4f       	sbci	r24, 0xFA	; 250
      9c:	8b 03       	fmulsu	r16, r19

0000009e <eeprom_format_table>:
      9e:	5a 55 01 20 01 01 00 38 08 00 00 00 00 00 00 00     ZU. ...8........
	...

000000be <patchCommands>:
      be:	da 49 dd 49 39 4a 3d 4a 44 4a e5 49 ea 49 ef 49     .I.I9J=JDJ.I.I.I
      ce:	4c 4a f2 49 f5 49 f8 49 33 4a 36 4a 5c 4a           LJ.I.I.I3J6J\J

000000dc <fader>:
      dc:	00 40 88 91 d2 e4 ad b5 b6 be bf ff                 .@..........

000000e8 <map_uzeboxlogo2>:
      e8:	05 03 00 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f     ................
	...

000000f9 <map_uzeboxlogo>:
      f9:	05 04 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d     ................
     109:	00 0e 0f 10 11 12                                   ......

0000010f <logo_tileset>:
	...
     16b:	00 00 00 49 00 00 00 00 00 49 52 52 00 00 00 49     ...I.....IRR...I
     17b:	52 53 1c 25 00 49 52 52 24 25 25 1b 52 52 5c 2d     RS.%.IRR$%%.RR\-
     18b:	2d 1c 12 12 00 00 00 00 00 00 00 00 00 00 00 00     -...............
     19b:	40 49 49 49 00 40 49 49 52 5b 5b 5b 4a 52 52 5b     @III.@IIR[[[JRR[
     1ab:	1c 1c 13 12 5b 1c 24 1c 12 09 09 09 24 1b 12 09     ....[.$.....$...
     1bb:	09 09 09 0a 0a 0a 0a 0a 0a 0a 0a 13 0a 0a 12 0a     ................
     1cb:	0a 12 13 0a 00 00 00 00 00 00 00 00 92 52 52 52     .............RRR
     1db:	52 52 52 49 13 12 13 09 00 1c 1b 13 0a 12 12 40     RRRI...........@
     1eb:	1b 65 64 1c 09 0a 00 09 24 1b 1c 65 12 00 00 25     .ed.....$..e...%
     1fb:	1c 1c 1c 1c 01 00 25 24 1c 1c 1c 1c 00 24 25 24     ......%$.....$%$
     20b:	24 24 1c 1c 00 00 00 00 00 00 00 00 49 40 00 00     $$..........I@..
     21b:	00 00 00 00 52 49 49 00 00 00 00 00 1c 5b 4a 48     ....RII......[JH
     22b:	00 00 00 00 1c 25 52 49 00 00 00 00 65 24 64 49     .....%RI....e$dI
     23b:	00 00 00 00 65 25 64 49 00 00 00 00 6d 2e 5c 49     ....e%dI....m.\I
	...
     253:	00 00 40 52 00 00 00 00 00 49 52 5c 00 00 00 00     ..@R.....IR\....
     263:	53 52 24 25 00 00 00 53 52 25 25 25 00 00 4a 52     SR$%...SR%%%..JR
     273:	25 25 1b 00 00 00 5b 25 13 00 00 1b 00 5b 53 00     %%....[%.....[S.
     283:	0a 1c 37 37 09 5b 1c 65 7f 37 2e 2e 52 2e 2e 1c     ..77.[.e.7..R...
     293:	13 13 12 00 2e 25 1b 13 12 00 00 12 1c 1c 12 00     .....%..........
     2a3:	00 12 25 1c 12 00 00 12 2e 37 1c 13 00 13 2e 37     ..%......7.....7
     2b3:	36 1c 13 1b 37 37 2e 2e 25 13 1c 1c 2e 2e 2e 2e     6...77..%.......
     2c3:	1b 1c 1c 1c 6e 6e 6e 1c 1c 1c 1c 1c 09 13 13 12     ....nnn.........
     2d3:	12 13 13 00 13 13 13 13 13 1c 00 09 13 13 13 13     ................
     2e3:	1c 01 00 37 13 13 13 1c 13 00 2e 2e 1b 1b 1c 1c     ...7............
     2f3:	00 1c 77 2e 1b 1b 25 00 13 7f 25 1c 1c 1c 01 0a     ..w...%...%.....
     303:	37 24 1c 1c 1c 13 0a 2e 25 25 09 00 13 2e 24 25     7$......%%....$%
     313:	25 25 25 25 2e 25 25 25 25 25 25 25 25 25 2d 2e     %%%%.%%%%%%%%%-.
     323:	25 1b 1c 1c 2e 2e 25 1c 13 25 1b 13 25 1c 1c 1c     %.....%..%..%...
     333:	1c 01 09 52 1c 1c 13 00 01 1c 5b 5c 0a 00 01 65     ...R......[\...e
     343:	77 5c 1b 00 01 6e 7f 6e 52 1b 00 00 6d 1c 52 49     w\...n.nR...m.RI
     353:	00 00 00 00 1c 13 53 00 00 00 00 00 1c 52 4a 00     ......S......RJ.
     363:	00 00 00 00 5b 5b 00 00 00 00 00 00 5c 00 00 00     ....[[......\...
	...
     38f:	13 5b 7f 77 6e 6e 6e 6e 13 65 77 76 6e 6e 6e 6e     .[.wnnnn.ewvnnnn
     39f:	1b 65 77 76 76 76 6e 77 1b 5b bf 76 b6 76 76 76     .ewvvvnw.[.v.vvv
     3af:	09 13 6d bf b7 b6 b7 65 00 1b 12 5c 76 bf 76 6d     ..m....e...\v.vm
     3bf:	00 00 12 1b 12 5b 5b 5c 00 00 00 00 09 0a 12 13     .....[[\........
     3cf:	6e 77 24 1c 1c 1c 1c 1c 77 25 1c 1c 1c 1c 24 25     nw$.....w%....$%
     3df:	6e 1c 1c 1c 24 25 25 1b 1c 1c 24 25 25 13 00 00     n...$%%...$%%...
     3ef:	64 6d 6d 1b 00 09 6e bf 6d 5b 09 12 6e bf 6d 5b     dmm...n.m[..n.m[
     3ff:	5b 12 5b 64 5b 12 13 12 13 1b 12 12 09 01 00 00     [.[d[...........
     40f:	1c 24 2e 1c 09 00 09 6e 25 24 01 00 09 76 7f 7f     .$.....n%$...v..
     41f:	00 00 12 77 7f 7f 64 12 64 bf bf 77 5b 12 1b 09     ...w..d.d..w[...
     42f:	bf 6d 5b 12 1b 09 00 00 12 13 1b 09 00 00 00 00     .m[.............
     43f:	09 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     44f:	7f 7f 53 13 13 00 00 00 64 12 1b 01 00 00 00 00     ..S.....d.......
     45f:	1b 12 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     497:	26 00 00 00 26 00 26 26 2f 00 00 00 2f 00 00 00     &...&.&&/.../...
     4a7:	37 00 00 00 37 00 00 00 ff 00 00 00 ff 00 00 00     7...7...........
     4b7:	bf 00 00 00 bf 00 00 bf 37 00 00 37 00 00 37 00     ........7..7..7.
     4c7:	00 26 26 00 00 00 26 26 00 00 00 00 00 00 00 00     .&&...&&........
     4d7:	26 26 26 00 26 26 26 26 00 00 2f 00 2f 00 00 00     &&&.&&&&.././...
     4e7:	00 37 00 00 37 00 00 00 ff 00 00 00 ff ff ff ff     .7..7...........
     4f7:	00 00 00 00 bf 00 00 00 00 00 00 00 37 00 00 00     ............7...
     507:	26 26 26 00 26 26 26 26 00 00 00 00 00 00 00 00     &&&.&&&&........
     517:	26 00 26 26 26 26 00 00 00 00 2f 00 00 00 2f 00     &.&&&&..../.../.
     527:	00 00 37 00 00 00 37 00 00 00 ff ff ff ff 00 00     ..7...7.........
     537:	00 00 bf 00 00 00 bf 00 00 00 37 00 00 00 37 00     ..........7...7.
     547:	26 00 26 26 26 26 00 00 00 00 00 00 00 00 00 00     &.&&&&..........
     557:	00 00 26 26 26 00 26 00 00 2f 00 00 2f 00 2f 00     ..&&&.&../.././.
     567:	37 00 00 00 37 00 00 37 ff 00 00 00 ff 00 00 00     7...7..7........
     577:	bf 00 00 00 bf 00 00 bf 37 00 00 37 00 00 37 00     ........7..7..7.
     587:	26 26 26 00 00 00 26 00 00 00 00 00 00 00 00 00     &&&...&.........
     597:	00 00 26 00 00 00 00 00 00 00 2f 00 00 00 00 00     ..&......./.....
     5a7:	00 37 00 00 00 00 00 00 ff 00 00 00 00 00 00 00     .7..............
     5b7:	00 bf 00 00 00 00 00 00 00 00 37 00 00 00 00 00     ..........7.....
     5c7:	00 00 26 00 00 00 00 00 00 00 00 00 00 00 00 00     ..&.............
	...
     5eb:	00 00 00 e4 00 00 00 00 09 9b ed f6 00 00 00 9b     ................
     5fb:	a4 ad bf bf 00 52 9b a4 76 7f 7f b7 5b 9b 6d 77     .....R..v...[.mw
     60b:	7f 76 6e b7 00 00 00 00 00 00 00 00 00 00 00 00     .vn.............
     61b:	5b b6 f6 f6 00 5b f6 ff ff ff ff bf f6 ff ff ff     [....[..........
     62b:	ff bf bf ae ff bf ff ff ff b7 ad 65 bf bf ff ff     ...........e....
     63b:	b7 b6 ad 65 b7 bf ff ff bf b7 ae 6e b7 bf ff ff     ...e.......n....
     64b:	bf b7 b7 65 00 00 00 00 00 00 00 00 f6 f6 ed ed     ...e............
     65b:	ad a4 a4 9b b6 6d 6d 5c 52 6e 65 64 65 65 65 52     .....mm\RnedeeeR
     66b:	65 76 6d 25 5c 5c 52 53 6e 24 65 6e 65 52 52 6e     evm%\\RSn$eneRRn
     67b:	25 25 24 25 5b 52 77 2d 25 25 25 24 52 6e 6e 2d     %%$%[Rw-%%%$Rnn-
     68b:	25 25 25 25 00 00 00 00 00 00 00 00 9b 49 00 00     %%%%.........I..
     69b:	00 00 00 00 a4 9b 92 00 00 00 00 00 25 64 93 49     ............%d.I
     6ab:	00 00 00 00 65 2e 9b 52 00 00 00 00 6d 25 65 52     ....e..R....m%eR
     6bb:	00 00 00 00 6d 2d 65 52 00 00 00 00 6e 2e 64 52     ....m-eR....n.dR
	...
     6d3:	00 00 49 5b 00 00 00 00 00 4a 5b 65 00 00 00 00     ..I[.....J[e....
     6e3:	5b 9b 6d 2d 00 00 00 5b 5b 2d 2e 25 00 00 52 5b     [.m-...[[-.%..R[
     6f3:	2e 2e 1c 09 00 01 5b 2d 1c 01 09 1c 00 5c 5b 01     ......[-.....\[.
     703:	4a 65 77 7f 4a 5b 1c 6e 7f 77 77 76 9b 77 77 6d     Jew.J[.n.wwv.wwm
     713:	65 6e 6e a4 77 6e 65 65 65 5b a4 b7 25 25 5c 52     enn.wneee[..%%\R
     723:	52 6d bf bf 13 09 49 64 7f bf bf bf 09 5c 7f 7f     Rm....Id.....\..
     733:	bf bf b7 bf 7f 7f 77 7f 7f b7 bf bf 77 77 7f 7f     ......w.....ww..
     743:	6e b7 bf bf 77 7f 7f 6e 77 bf bf bf b6 ff ff ff     n...w..nw.......
     753:	bf bf b7 5b bf ff ff ff bf bf a4 64 bf ff ff ff     ...[.......d....
     763:	bf ad a4 7f bf ff ff ff bf a4 bf 7f ff ff ff bf     ................
     773:	ad bf bf bf ff ff ff b6 bf bf bf 77 ff ff f7 bf     ...........w....
     783:	bf bf 77 77 ff ff ff bf bf bf 64 52 6d 7f 6e 2e     ..ww......dRm.n.
     793:	2d 2d 25 6e 7f 76 6e 6e 6e 2e 25 65 77 77 77 76     --%n.vnnn.%ewwwv
     7a3:	2e 1c 25 24 7f 77 6e 25 1c 25 1c 1b 77 65 25 25     ..%$.wn%.%..we%%
     7b3:	1c 09 0a 5b 6e 6e 1c 09 49 25 64 64 5b 49 4a 6e     ...[nn..I%dd[IJn
     7c3:	7f 64 5c 00 53 77 bf 77 5b 5c 00 00 6e 25 5b 4a     .d\.Sw.w[\..n%[J
     7d3:	00 00 00 00 1c 1b 5b 00 00 00 00 00 24 5b 53 00     ......[.....$[S.
     7e3:	00 00 00 00 5b 5c 00 00 00 00 00 00 64 00 00 00     ....[\......d...
	...
     80f:	5b 5c 7f bf 77 76 77 77 5c 6d 7f b7 77 77 77 77     [\..wvww\m..wwww
     81f:	5c 6d 7f bf 77 77 77 bf 5c 64 bf bf bf bf bf 7f     \m..www.\d......
     82f:	0a 5c 6e bf bf bf bf 76 00 65 64 6d bf bf bf bf     .\n....v.edm....
     83f:	00 00 5b 6d 64 6d ad b6 00 00 00 00 12 5b 64 6d     ..[mdm.......[dm
     84f:	77 7f 6e 6e 77 bf bf bf 7f 76 6d 76 77 bf bf bf     w.nnw....vmvw...
     85f:	77 6d 6e 76 7f bf bf bf 6d 6e 76 7f bf b7 ad f6     wmnv....mnv.....
     86f:	76 bf bf 76 a4 ad ff ff bf b6 64 ad ff ff ff ff     v..v......d.....
     87f:	b6 ad bf ff ff ff ff f6 ad b6 ad 64 5b 52 00 00     ...........d[R..
     88f:	ff ff bf bf ad 5b 64 bf ff ff b6 ad ad bf ff bf     .....[d.........
     89f:	ff f6 ff ff ff ff bf 64 ff ff ff ff bf b6 76 5b     .......d......v[
     8af:	ff ff ff bf bf 5b 00 00 ff ff ff 5c 00 00 00 00     .....[.....\....
     8bf:	a4 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     8cf:	bf bf 64 5c 5c 00 00 00 6e 5c 65 49 00 00 00 00     ..d\\...n\eI....
     8df:	6d 5b 00 00 00 00 00 00 00 00 00 00 00 00 00 00     m[..............
	...

0000090f <logoInitPatches>:
     90f:	00 00 00 18 09 00 00 00 00                          .........

00000918 <initPatch>:
     918:	00 02 08 00 08 55 04 08 5a 00 00 f8 00 09 90 00     .....U..Z.......
     928:	0a 1e 32 05 00 00 ff                                ..2....

0000092f <default_scores>:
     92f:	00 01 14 0d 00 01 02 14 0e 00 02 03 14 0f 00 03     ................
     93f:	04 14 10 00 04 05 14 11 00 05 06 14 12 00           ..............

0000094d <default_handles>:
     94d:	55 5a 45 4c 4a 42 41 41 41 42 42 42 43 43 43 44     UZELJBAAABBBCCCD
     95d:	44 44 45 45 45 46 46 46 47 47 47 43 50 55           DDEEEFFFGGGCPU

0000096b <strLevels>:
     96b:	20 20 20 42 4f 4f 54 20 43 41 4d 50 20 20 20 00        BOOT CAMP   .
     97b:	20 54 48 45 20 42 52 49 43 4b 59 41 52 44 20 00      THE BRICKYARD .
     98b:	20 20 20 56 45 4c 4f 43 49 54 59 20 20 20 20 00        VELOCITY    .
     99b:	20 20 20 54 48 45 20 4d 41 5a 45 20 20 20 20 00        THE MAZE    .
     9ab:	20 20 20 52 49 43 48 4f 43 48 45 54 20 20 20 00        RICHOCHET   .
     9bb:	20 54 48 45 20 48 4f 4e 45 59 20 50 4f 54 20 00      THE HONEY POT .
     9cb:	20 20 46 4f 43 41 4c 20 50 4f 49 4e 54 20 20 00       FOCAL POINT  .
     9db:	49 54 27 53 20 4e 4f 54 20 46 41 49 52 21 20 00     IT'S NOT FAIR! .
     9eb:	20 20 4d 55 43 48 20 42 45 54 54 45 52 20 20 00       MUCH BETTER  .
     9fb:	20 20 20 54 48 45 20 43 41 4e 41 4c 20 20 20 00        THE CANAL   .
     a0b:	20 20 54 48 45 20 48 41 52 42 4f 55 52 20 20 00       THE HARBOUR  .

00000a1b <strPaused>:
     a1b:	50 41 55 53 45 44 00                                PAUSED.

00000a22 <strExit>:
     a22:	42 41 49 4c 20 2d 20 58 00                          BAIL - X.

00000a2b <strTotal>:
     a2b:	54 4f 54 41 4c 3a 00                                TOTAL:.

00000a32 <strScore>:
     a32:	53 43 4f 52 45 3a 00                                SCORE:.

00000a39 <strBanterClear>:
     a39:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 00                      .

00000a48 <banter_map>:
     a48:	53 55 43 48 20 46 41 49 4c 20 20 20 20 20 00 4c     SUCH FAIL     .L
     a58:	4f 4c 20 20 20 20 20 20 20 20 20 20 20 00 42 52     OL           .BR
     a68:	4f 4b 45 4e 20 42 55 54 54 4f 4e 3f 00 54 52 59     OKEN BUTTON?.TRY
     a78:	20 41 54 20 4c 45 41 53 54 20 20 00 54 4f 4f 20      AT LEAST  .TOO 
     a88:	45 41 53 59 20 20 20 20 20 20 00 59 41 57 4e 20     EASY      .YAWN 
     a98:	20 20 20 20 20 20 20 20 20 00 4e 4f 4f 42 20 20              .NOOB  
     aa8:	20 20 20 20 20 20 20 20 00 54 48 41 54 27 53 20             .THAT'S 
     ab8:	49 54 3f 20 20 20 20 00 4e 45 45 44 20 48 45 4c     IT?    .NEED HEL
     ac8:	50 3f 20 20 20 20 00 50 46 46 54 20 20 20 20 20     P?    .PFFT     
     ad8:	20 20 20 20 20 00                                        .

00000ade <strFinalScore>:
     ade:	46 49 4e 41 4c 20 53 43 4f 52 45 00                 FINAL SCORE.

00000aea <strBy>:
     aea:	42 59 00                                            BY.

00000aed <strOwns>:
     aed:	4f 57 4e 53 00                                      OWNS.

00000af2 <strChangeHandle>:
     af2:	45 44 49 54 20 2d 20 55 50 2f 44 4f 57 4e 00        EDIT - UP/DOWN.

00000b01 <strReset>:
     b01:	52 45 53 45 54 20 44 45 46 41 55 4c 54 53 20 2d     RESET DEFAULTS -
     b11:	20 53 4c 20 28 35 53 29 00                           SL (5S).

00000b1a <strCancelHandle>:
     b1a:	43 41 4e 43 45 4c 20 2d 20 58 00                    CANCEL - X.

00000b25 <strConfirmHandle>:
     b25:	43 4f 4e 46 49 52 4d 20 2d 20 41 2f 53 54 41 52     CONFIRM - A/STAR
     b35:	54 00                                               T.

00000b37 <strSelectHandle>:
     b37:	53 45 4c 45 43 54 20 2d 20 41 2f 53 54 41 52 54     SELECT - A/START
	...

00000b48 <strPlayer2>:
     b48:	50 32 00                                            P2.

00000b4b <strPlayer1>:
     b4b:	50 31 00                                            P1.

00000b4e <strVertSep>:
     b4e:	3b 00                                               ;.

00000b50 <strUnderline>:
     b50:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 00                 ___________.

00000b5c <strHandlesTitle>:
     b5c:	45 44 49 54 20 48 41 4e 44 4c 45 00                 EDIT HANDLE.

00000b68 <strHighscores>:
     b68:	54 41 4e 4b 20 52 41 4e 4b 00                       TANK RANK.

00000b72 <str2Player>:
     b72:	50 4c 41 59 45 52 20 56 53 20 50 4c 41 59 45 52     PLAYER VS PLAYER
	...

00000b83 <str1Player>:
     b83:	50 4c 41 59 45 52 20 56 53 20 43 50 55 00           PLAYER VS CPU.

00000b91 <strCopyright>:
     b91:	32 30 31 35 20 4c 41 57 52 45 4e 43 45 20 42 52     2015 LAWRENCE BR
     ba1:	4f 4f 4b 53 00                                      OOKS.

00000ba6 <my_patches>:
     ba6:	02 88 1b 00 00 4f 07 50 07 02 a3 14 00 00 e3 06     .....O.P........
     bb6:	e4 06 02 5c 12 00 00 45 02 46 02 02 ab 10 00 00     ...\...E.F......
     bc6:	af 01 b0 01 02 8b 0e 00 00 1e 02 1f 02 02 19 0d     ................
     bd6:	00 00 70 01 71 01 02 5c 12 00 00 45 02 46 02 02     ..p.q..\...E.F..
     be6:	a3 14 00 00 e3 06 e4 06 00 00 00 f7 0b 00 00 00     ................
	...

00000bf7 <ad_alarm>:
     bf7:	00 02 02 00 04 32 01 03 01 01 03 01 01 03 01 01     .....2..........
     c07:	03 01 01 03 01 01 03 01 01 03 01 01 03 01 01 03     ................
     c17:	01 01 03 01 01 03 01 01 03 01 01 03 01 01 03 01     ................
     c27:	01 03 01 01 03 01 01 04 01 01 04 01 01 04 01 01     ................
     c37:	04 01 01 04 01 01 04 01 01 04 01 01 04 01 01 04     ................
     c47:	01 01 04 01 01 04 01 01 04 01 01 04 01 01 04 01     ................
     c57:	01 04 01 01 03 01 01 03 01 01 03 01 01 03 01 01     ................
     c67:	03 01 01 03 01 01 03 01 01 03 01 01 03 01 01 03     ................
     c77:	01 01 03 01 01 03 01 01 03 01 01 03 01 01 03 01     ................
     c87:	01 03 01 01 04 01 01 04 01 01 04 01 01 04 01 01     ................
     c97:	04 01 01 04 01 01 04 01 01 04 01 01 04 01 01 04     ................
     ca7:	01 01 04 01 01 04 01 01 04 01 01 04 01 01 04 01     ................
     cb7:	01 03 01 01 03 01 01 03 01 01 03 01 01 03 01 01     ................
     cc7:	03 01 01 03 01 01 03 01 01 03 01 01 03 01 01 03     ................
     cd7:	01 01 03 01 01 03 01 01 03 01 01 03 01 01 03 01     ................
     ce7:	01 04 01 01 04 01 01 04 01 01 04 01 01 04 01 01     ................
     cf7:	04 01 01 04 01 01 04 01 01 04 01 01 04 01 01 04     ................
     d07:	01 01 04 01 01 04 01 01 04 01 01 04 01 01 05 00     ................
     d17:	00 ff                                               ..

00000d19 <ad_navigate>:
     d19:	00 fc fe fe f3 ed f0 03 17 24 18 0f 09 01 f7 f2     .........$......
     d29:	f4 f9 00 fb f4 f0 f5 fc 02 01 fb f8 fb 02 09 0a     ................
     d39:	07 00 ff ff 01 00 00 02 03 03 00 ff 00 03 02 ff     ................
     d49:	fe ff ff fe fc fb fc 01 03 03 01 00 ff fe fe ff     ................
     d59:	00 01 00 00 00 00 01 02 02 02 00 fe fd fc fc fb     ................
     d69:	fa fd 00 00 fe fd fe 00 03 05 05 04 00 fe fc fd     ................
     d79:	fe 02 08 09 03 fa f7 f8 fd ff 00 01 01 fd fc fe     ................
     d89:	00 02 03 01 fd fb fc ff 01 05 04 02 01 01 00 00     ................
     d99:	ff ff 01 01 00 fe fe ff ff ff 01 01 ff fe fd fc     ................
     da9:	fc fe 00 01 02 02 00 ff ff fe fe ff 00 00 00 01     ................
     db9:	ff fd fc fe 00 01 02 01 ff fe fe fd 00 02 05 04     ................
     dc9:	02 00 fe fe fc fe ff 02 03 02 fe fb fa fb fd fe     ................
     dd9:	00 01 01 ff ff ff ff fd fd 00 01 0a 0a 07 00 f8     ................
     de9:	f3 ef f6 fe 0b 10 11 0b 00 f6 ee ef f4 ff 08 0d     ................
     df9:	0e 0a 03 f9 f4 f0 f4 fc 04 0c 0d 0d 06 fe f4 ef     ................
     e09:	f1 f7 02 0a 0e 0d 06 fd f4 f0 f2 fa 03 0b 0d 0a     ................
     e19:	04 fd f8 f5 f6 fb 03 09 0a 08 02 fc f7 f5 f6 fa     ................
     e29:	00 05 07 07 05 02 fe fb f8 f9 fd 03 08 0a 07 00     ................
     e39:	f9 f4 f5 f9 01 09 0c 0a 03 fc f7 f5 f8 fb 00 05     ................
     e49:	09 08 04 00 fc fa f8 fa fd 05 0a 0b 06 ff f9 f6     ................
     e59:	f5 f7 fd 04 0a 0a 05 ff f9 f7 f7 fa fe 04 08 08     ................
     e69:	05 00 fc fa fa fc ff 02 05 06 04 00 fb f8 f8 fb     ................
     e79:	ff 03 06 07 04 ff fb f8 fa fd 01 03 04 03 01 00     ................
	...

00000e8b <ad_metal>:
     e8b:	00 00 ff 00 ff 00 fe 03 fc ed ed ed ed 11 0f 11     ................
     e9b:	11 11 11 11 10 10 0a 11 11 0d 01 08 fa 0b fb fc     ................
     eab:	f6 01 f9 00 f2 f5 fa 02 01 ff ff fb fe f9 03 f7     ................
     ebb:	ff ff 07 fb f6 fb fa 04 ff 01 f7 07 f8 01 f2 fd     ................
     ecb:	f8 0a fd fa f7 f4 05 ff 03 f4 06 fa 0a f5 03 fa     ................
     edb:	0c 03 08 fd 01 04 02 06 fd 02 fe 07 f9 fe f7 01     ................
     eeb:	03 04 ff f9 f4 03 02 fa fa 00 02 05 fd 02 02 08     ................
     efb:	08 06 03 01 01 fd 01 f7 01 fc 03 f9 fe f3 ff fd     ................
     f0b:	02 fe ff 00 ff 06 fa 04 fc 07 fc 02 f4 02 ff 08     ................
     f1b:	05 04 03 04 05 fa 03 f3 ff f8 00 f7 fe fa 03 00     ................
     f2b:	fe ff fe 07 01 05 fc 00 fe 0b ff 01 fd 02 04 ff     ................
     f3b:	fe fc fe fb 01 f8 fe fd 06 01 02 f9 02 03 04 00     ................
     f4b:	fd fe ff fe fc fe fc 03 04 02 ff 00 00 04 01 00     ................
     f5b:	fe 00 ff 02 ff fd fe fe ff fa fd fa ff fc 00 fe     ................
     f6b:	02 ff 03 01 01 03 03 04 03 02 fd 00 fe 00 fd ff     ................
     f7b:	fd ff fd fc fb fd 00 ff 00 fd 00 00 03 01 02 00     ................
     f8b:	00 00 fe fd fd 00 01 03 00 00 00 01 01 00 00 ff     ................
     f9b:	01 ff ff fc 00 ff 00 fe fd fd fe ff fd 00 fe 03     ................
     fab:	00 02 ff 01 02 02 01 fe ff fe 01 fe 00 fc 00 fe     ................
     fbb:	00 fe ff ff ff 02 fe 00 fd 02 ff 02 ff 01 01 02     ................
     fcb:	00 fe 00 fe 02 fe 00 fd 00 fd 00 fd ff ff 00 00     ................
     fdb:	fe ff fd 01 ff 01 fe 00 ff 00 ff fe 00 00 02 00     ................
     feb:	01 fe 01 00 01 ff fe ff fe fe fd fe fd 01 ff 01     ................
     ffb:	ff 01 01 02 00 00 01 fe 00 fd ff fe 01 00 00 ff     ................
    100b:	ff 00 ff 00 fe 00 fe 00 fe fe fe 00 00 00 00 fe     ................
    101b:	01 ff 01 ff 00 ff 01 ff ff ff 00 01 00 00 ff 00     ................
    102b:	fe 00 fe ff fe ff ff ff ff ff 01 ff 00 ff 00 ff     ................
    103b:	00 ff ff ff 00 00 00 00 ff 01 00 01 ff 00 ff ff     ................
    104b:	ff fe fd fe fe fe ff ff 00 00 01 01 01 01 01 01     ................
    105b:	00 00 ff 00 ff ff fe ff ff ff 00 ff 00 00 00 ff     ................
    106b:	ff fe fe fe fe fe fe ff ff 00 00 01 00 01 01 01     ................
    107b:	00 00 00 00 00 ff ff ff ff fe ff fe ff ff ff ff     ................
    108b:	ff ff ff ff ff ff 00 00 00 00 ff 00 00 00 00 00     ................
    109b:	00 01 01 00 00 ff 00 00 ff ff fe ff ff ff 00 00     ................

000010ab <ad_item>:
    10ab:	ff ff ff ff 00 00 00 00 ff fe ff 00 01 01 00 ff     ................
    10bb:	fe fe ff 01 01 00 ff fe fe ff 00 01 01 ff fe fe     ................
    10cb:	ff 00 02 01 00 fe fd fe 00 02 02 00 fe fd fd 00     ................
    10db:	02 02 01 fe fc fd 00 02 03 01 fe fc fd 00 03 03     ................
    10eb:	01 fe fb fc 00 03 04 01 fd fb fc 00 03 04 01 fd     ................
    10fb:	fb fc 01 04 04 00 fc fa fd 01 05 04 00 fb fa fd     ................
    110b:	02 06 04 ff fa f9 fe 04 07 04 fe f9 f9 ff 05 07     ................
    111b:	03 fc f8 fa 00 06 07 01 fa f8 fc 03 07 05 fe f8     ................
    112b:	f8 fe 06 08 03 fb f7 fa 02 08 07 00 f8 f7 fd 05     ................
    113b:	09 05 fc f6 f8 01 08 08 01 f8 f6 fc 06 0a 05 fb     ................
    114b:	f5 f8 02 09 08 00 f7 f6 fd 07 0a 04 fa f5 f9 03     ................
    115b:	0a 08 fe f5 f6 ff 09 0b 03 f8 f3 fa 06 0c 07 fb     ................
    116b:	f3 f6 02 0b 0a 00 f5 f3 fd 09 0d 04 f7 f2 f9 06     ................
    117b:	0d 08 fb f2 f5 02 0c 0b 00 f4 f3 fe 0a 0c 03 f7     ................
    118b:	f2 fa 07 0c 06 fa f3 f8 04 0c 08 fd f4 f6 01 0a     ................
    119b:	09 ff f7 f6 fe 07 08 02 f9 f7 fd 05 08 03 fb f8     ................
    11ab:	fc 03 06 03 fd fa fd 01 03 02 fe fc fe 01 02 00     ................
    11bb:	fe fe 00 02 01 fe fc fe 02 04 02 fd fa fc 03 06     ................
    11cb:	03 fc f8 fb 03 08 05 fd f7 fa 02 07 06 fe f8 f9     ................
    11db:	00 06 05 ff fa fa ff 04 05 01 fc fb fe 03 04 01     ................
    11eb:	fd fc fe 01 02 01 ff fe fe 00 01 01 00 fe fd ff     ................
    11fb:	01 01 00 ff fe ff 00 00 00 00 ff ff ff ff 00 01     ................
    120b:	00 ff fe fe 00 01 01 ff fe fe 00 02 01 ff fd ff     ................
    121b:	01 02 00 fe fd ff 01 02 00 fe fd ff 01 02 00 fe     ................
    122b:	fe 00 01 01 ff fe ff 00 01 00 fe fe ff 01 01 ff     ................
    123b:	fe fe ff 01 01 00 fe fe ff 00 01 01 ff fd fe ff     ................
    124b:	01 02 00 fe fd ff 01 01 00 ff fe ff 00 00 00 00     ................
	...

0000125c <ad_cannonball>:
    125c:	ff ff fe fe fe fe fe ff ff ff ff 00 00 00 00 00     ................
    126c:	00 ff ff ff 00 00 00 00 00 00 00 01 01 01 01 01     ................
    127c:	01 00 00 00 ff ff ff ff ff 00 00 ff ff ff ff ff     ................
    128c:	ff ff ff ff ff ff 00 00 01 02 03 03 03 03 03 01     ................
    129c:	00 fe fd fc fa fa f9 f9 f9 fa fa fb fd fe ff 01     ................
    12ac:	02 03 03 03 03 02 01 00 ff fe fe fe fe fe fe ff     ................
    12bc:	ff 00 00 01 02 03 04 04 04 04 03 02 02 01 00 00     ................
    12cc:	ff ff ff ff ff fe fe fe fe fe fe fe ff ff 00 01     ................
    12dc:	02 03 03 04 03 03 02 01 00 fe fd fb f9 f8 f7 f6     ................
    12ec:	f6 f7 f8 fa fc fe 00 02 04 05 06 07 07 07 06 05     ................
    12fc:	03 01 ff fc fa f9 f8 f8 f9 fb fc fe 00 02 03 04     ................
    130c:	05 05 06 05 05 04 02 01 ff fe fe fd fd fd fe ff     ................
    131c:	ff 00 00 00 00 00 ff ff ff fe fe fe fd fd fd fe     ................
    132c:	ff 00 02 04 06 07 07 07 06 05 03 00 fd fb f8 f7     ................
    133c:	f5 f4 f4 f4 f5 f7 f9 fb fe 01 04 07 09 0a 0b 0a     ................
    134c:	08 06 04 01 ff fc fa f9 f8 f7 f7 f8 f9 fb fd ff     ................
    135c:	02 04 06 07 07 07 06 04 02 01 00 ff fe fd fd fd     ................
    136c:	fd fe fe ff 00 00 01 01 01 01 00 00 ff fe fe fe     ................
    137c:	fe fe ff 00 01 02 03 04 05 06 07 07 06 05 03 00     ................
    138c:	fd fa f8 f5 f4 f3 f2 f3 f4 f6 f8 fa fd 00 03 06     ................
    139c:	08 0a 0b 0b 0a 09 07 04 02 ff fc fa f9 f8 f7 f7     ................
    13ac:	f8 f9 fb fd 00 02 03 05 06 06 06 05 04 03 02 01     ................
    13bc:	00 ff fe fd fd fd fd fe ff 00 00 01 01 01 01 00     ................
    13cc:	00 ff ff fe fe ff ff ff 00 00 00 00 00 01 01 02     ................
    13dc:	02 03 03 03 02 01 00 fe fc fb fa f9 f9 f9 f9 fa     ................
    13ec:	fb fc fd fe ff 01 02 03 04 04 05 04 04 03 02 01     ................
    13fc:	00 fe fd fd fc fc fc fd fd fe ff 00 01 01 02 02     ................
    140c:	03 03 03 02 02 02 01 00 00 ff fe fe fd fe fe fe     ................
    141c:	ff 00 00 01 01 01 01 01 01 01 01 01 00 00 00 00     ................
    142c:	ff ff fe fe fe ff ff ff ff ff ff fe fe fe fe fe     ................
    143c:	ff 00 01 01 02 01 01 00 ff fe fe fd fd fd fd fd     ................
    144c:	fd fd fd fd fe fe ff 00 01 02 03 03 03 03 02 01     ................
    145c:	00 ff ff ff ff ff ff fe fe fe fe fe fe ff ff 00     ................
    146c:	01 02 02 02 02 01 01 00 00 00 00 00 00 00 00 00     ................
    147c:	00 ff ff ff ff ff ff 00 00 00 00 ff ff ff ff fe     ................
    148c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    149c:	ff ff ff ff ff 00 00                                .......

000014a3 <ad_brick_explode>:
    14a3:	00 ff 00 ff 00 00 00 00 00 00 00 ff 00 ff ff ff     ................
    14b3:	ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
    14c3:	ff ff 00 00 00 00 00 00 ff ff 00 00 00 ff ff ff     ................
    14d3:	ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
    14e3:	ff 00 ff 00 05 04 03 06 02 fc fe fb fa fb f7 f6     ................
    14f3:	f8 f8 fb ff 00 05 07 06 06 08 09 08 03 ff fe fd     ................
    1503:	fe fc f8 fb fb fc 01 00 fd fd ff 01 03 04 02 ff     ................
    1513:	00 00 ff 01 02 fe fe 03 03 ff ff ff fe fe 00 00     ................
    1523:	fe ff fe fc 01 04 ff fc fd 01 00 fd ff fd ff 03     ................
    1533:	ff fe 01 ff fe 02 03 ff fd 00 ff ff 01 ff fe fc     ................
    1543:	fc fc fb 01 05 06 09 0b 08 04 01 ff fd fa f8 f8     ................
    1553:	f7 f8 f8 fa fe 01 ff ff 03 04 04 05 06 06 04 03     ................
    1563:	01 00 ff fe fd fd ff fe fc fd fd fc fc fd ff 02     ................
    1573:	08 06 04 03 fe fd fb fa fb f8 f8 fa f8 fc 01 03     ................
    1583:	05 06 08 08 07 05 03 04 04 01 fa f9 fc fb fa fc     ................
    1593:	fa fd fe fc 00 01 01 05 06 01 05 03 00 02 00 00     ................
    15a3:	02 fd fd fe f7 fa ff fe ff ff fd 02 01 ff ff 01     ................
    15b3:	03 00 00 04 01 00 02 fe fd fd fc fa fc 05 03 fe     ................
    15c3:	01 00 fd 00 01 ff ff ff 01 01 01 ff fb fa fd fc     ................
    15d3:	fb fc ff 00 06 0c 0a 0b 0c 07 04 01 fd f9 f3 f2     ................
    15e3:	f6 f6 f6 f9 fb fc ff ff 00 05 07 07 07 08 07 04     ................
    15f3:	02 03 01 ff ff fc fa fc fb fa fc fe fe fd fe fd     ................
    1603:	fd ff 01 01 03 05 03 01 02 03 01 00 02 01 ff ff     ................
    1613:	ff ff ff 00 01 0a 12 09 fe f5 f0 ed ee f1 f1 f0     ................
    1623:	f2 f7 fe 08 11 12 0f 0f 0e 0c 0b 08 05 02 fc fa     ................
    1633:	f2 ef f2 f4 01 00 f5 fb 04 ff 00 05 06 02 01 02     ................
    1643:	fe fd 02 00 04 0f 0a 02 ff ff 03 01 f9 f5 fa fc     ................
    1653:	f7 f6 fe 02 01 ff 03 01 fe ff 00 00 fe fc fd 01     ................
    1663:	02 ff 00 07 06 03 ff fd fe fe fa fa fe fd fa fc     ................
    1673:	00 00 fe fe ff 00 01 fe f8 fe 0f 11 0d 10 0e 09     ................
    1683:	05 ff fb f8 f3 f0 f2 f3 f4 f5 f9 fd fc fe 02 03     ................
    1693:	03 05 06 09 0b 08 04 03 04 03 fe fb fe ff fb fa     ................
    16a3:	fc fc fb fb fc fa f8 fa fd 01 05 05 04 04 04 02     ................
    16b3:	02 05 06 03 03 03 01 fe fe ff 01 00 fe fb fb fb     ................
    16c3:	fb f9 fb fe fd fd fb 02 13 18 0d 00 f8 f5 f2 f2     ................
    16d3:	f9 f9 ef ee f9 01 07 0a 0b 0c 09 03 ff 01 07 08     ................
    16e3:	01 fb 00 ff f4 f9 01 01 f9 f3 02 0b ff fd 05 0c     ................
    16f3:	10 ff fb 02 fb f7 fb ff 02 03 fd fb 01 02 02 fe     ................
    1703:	fd 04 fd fa 00 00 ff ff 01 02 fe fa f8 fe ff 00     ................
    1713:	fc fc 03 00 fd fe 05 05 fe fe 05 05 ff fa fd 05     ................
    1723:	03 01 01 00 01 f8 f7 fc fe 00 00 ff ff ff 01 01     ................
    1733:	00 03 03 fb f8 f4 f0 04 17 17 0f 09 0d 0b 06 02     ................
    1743:	fa f3 ee eb ee f2 f2 f5 f8 fa ff fe 00 04 06 0b     ................
    1753:	0c 0a 09 08 07 05 03 02 fe fb fc fe fc fb fd fc     ................
    1763:	fb fa f9 fb fd fe fe 01 07 06 01 02 05 06 03 03     ................
    1773:	03 00 fd fc fb ff ff ff 01 fe fd fe fe ff 00 fe     ................
    1783:	fe fc fa fc fd fd 07 19 18 0a ff f9 f5 f2 f1 f1     ................
    1793:	f1 ef f1 f8 fe 05 0b 08 06 0c 0d 05 03 0c 08 00     ................
    17a3:	ff fc f8 f6 fa 02 00 00 02 04 01 fe 02 07 02 fb     ................
    17b3:	fa fe 00 f9 fb 02 00 fe 03 fe f7 02 03 02 07 04     ................
    17c3:	ff fe fe 02 fc 00 08 fd f8 f9 fb f6 f9 ff fe fc     ................
    17d3:	00 05 f8 ff 0a 00 07 04 02 fe ff 03 03 01 06 fe     ................
    17e3:	fb 06 02 fc ff fb f6 f6 fc ff fc 00 01 ff 02 07     ................
    17f3:	01 fc 04 05 fc 00 05 fd fe ff fe fd f9 f8 ee fc     ................
    1803:	14 14 11 0f 0a 07 04 00 f8 f3 f5 f2 ef f0 f3 f4     ................
    1813:	f7 fc fe 01 04 08 09 0a 09 0b 0a 07 05 04 01 fe     ................
    1823:	fb fa ff ff fb fc fd fd fa fb fc fe fd fe fe 00     ................
    1833:	05 03 01 00 00 00 00 01 ff ff 03 00 fe 01 02 02     ................
    1843:	ff 00 01 fd fe ff fe fa fb ff 00 fe fb fe 01 00     ................
    1853:	ff 0b 20 17 0b ff ef eb f1 f0 f3 f2 f0 ed f0 fb     .. .............
    1863:	00 06 0f 0f 0f 0f 0d 10 0c 0b 08 00 f6 f2 ec f1     ................
    1873:	fe fd fc fc fc 06 02 fe 06 02 07 04 f9 01 02 fc     ................
    1883:	fe 00 08 0a fa fc fa fb 07 fb fb fe fd 01 fc fd     ................
    1893:	02 03 05 04 00 ff fd f8 03 00 f5 f9 fc f7 fa 01     ................
    18a3:	07 0e 03 03 06 00 03 ff fd fe fc fd 00 fb fe fc     ................
    18b3:	f6 fd 02 05 04 ff 02 02 00 03 03 03 fc fa fe 01     ................
    18c3:	fc 00 06 03 ff fb fc fd 00 00 fe 00 02 fd fe fe     ................
    18d3:	fb fe f3 f6 0c 10 10 0e 08 0a 06 01 fe f8 f5 f3     ................
    18e3:	f2 f2 f1 f2 f7 fb 00 04 01 02 05 08 07 0b 11 0f     ................
    18f3:	05 ff 03 00 fa fa ff 03 ff fb fa f7 f6 f8 f7 fa     ................
    1903:	ff 01 fd fa 01 06 05 02 05 07 05 00 01 05 06 03     ................
    1913:	01 00 fe fd fe 00 fe fa f9 f8 fa fc ff 02 02 fe     ................
    1923:	fc fd 00 02 02 04 04 02 00 04 03 07 17 17 0b 00     ................
    1933:	f5 ec e9 ea ea ec f0 f3 f6 f7 fb 06 10 11 13 14     ................
    1943:	13 11 0b 08 06 03 fc f9 f6 ef f1 fa fd fb fc fe     ................
    1953:	fa fa 02 04 03 08 08 03 01 01 01 04 05 fd fa fc     ................
    1963:	f9 fb ff 01 02 fd 01 02 fb 00 07 01 04 04 f9 fb     ................
    1973:	f9 f5 fb fa 04 fd fe 02 fe 05 06 0c 0d 06 06 00     ................
    1983:	fe fb f8 f8 f8 f9 fa f7 f4 f6 f8 fe 00 07 09 08     ................
    1993:	09 07 04 07 04 04 04 ff 01 00 fc fb fb fd fe fc     ................
    19a3:	f9 fb f8 f9 fc fe 02 02 00 fe ff 02 02 01 03 03     ................
    19b3:	fc f6 fc 0b 0f 0d 0d 09 0a 09 02 fe f6 ee ee ef     ................
    19c3:	f2 f6 f9 fc f9 fb fc ff 06 08 0c 10 0e 0b 08 02     ................
    19d3:	01 02 03 00 fe fb f6 f7 f7 f8 fc fc fc f7 f8 f8     ................
    19e3:	fb ff 03 09 0b 06 04 06 06 02 00 00 fe fe fe ff     ................
    19f3:	01 00 ff fe fd fe fd fd fe fe ff 00 ff fd ff fe     ................
    1a03:	fb fd 00 02 02 03 06 05 04 03 01 ff 01 01 ff ff     ................
    1a13:	01 fc f9 f9 f7 f7 fa ff 0d 18 0e 02 fc f1 ef f5     ................
    1a23:	f4 f5 f9 fc fd ff 05 06 06 0c 0b 08 09 09 08 07     ................
    1a33:	02 fe fb f4 f0 f1 f5 fc fe fc 02 01 fe 01 05 05     ................
    1a43:	03 05 05 01 01 02 01 00 05 05 fd fa f9 f4 f7 00     ................
    1a53:	00 ff fe 00 fe fc 04 06 01 05 05 00 01 ff fd ff     ................
    1a63:	fc f9 fb fb fd fd fd 04 03 04 05 fe fe ff 01 01     ................
    1a73:	fb ff 04 00 fd fe fa fc fd ff 03 02 06 03 ff 04     ................
    1a83:	01 fe ff ff fd fd ff ff fd fe 01 fc fe 00 00 03     ................
    1a93:	01 00 03 03 01 fe fd 00 fe fb fd fd ff fb f7 ff     ................
    1aa3:	05 06 09 0a 0d 0e 0a 03 fe f5 f0 f1 f6 f9 f9 fb     ................
    1ab3:	fb fb fc fd ff 04 05 06 08 07 06 04 05 05 03 03     ................
    1ac3:	ff fd fa fd fb f9 fd fe fe fb f9 fa fa fa fe 04     ................
    1ad3:	07 05 01 01 02 ff 01 02 01 00 00 01 02 02 01 00     ................
    1ae3:	00 02 01 fe ff 00 01 fc fa fc fa fa fc fc fe 01     ................
    1af3:	03 06 07 06 05 04 00 fd fe 00 00 01 02 ff fc fb     ................
    1b03:	fb f9 fa fd fd fe 00 02 02 00 01 00 00 03 03 02     ................
    1b13:	02 01 00 ff ff 01 ff fe ff 05 0c 01 fa f9 f5 f3     ................
    1b23:	f6 f8 fa ff ff ff 02 02 02 03 04 04 06 07 08 08     ................
    1b33:	06 05 03 fd fc fc f6 f6 fa fa f8 fb fd fc fe 01     ................
    1b43:	02 03 03 03 05 06 05 08 06 02 04 fe f9 fb fa fc     ................
    1b53:	fd fd fe ff fb fa fd fc fc ff 01 01 03 02 01 05     ................
    1b63:	02 fe 04 03 ff 04 03 00 02 01 fe fc fd fc fa fd     ................
    1b73:	fd fc fe fb fc fb fa fe ff 00 05 05 05 06 05 06     ................
    1b83:	04 04 02 01 00                                      .....

00001b88 <ad_banter>:
    1b88:	ff ff ff ff ff fe ff fe ff fe fe fe fe fe fe fe     ................
    1b98:	fe fe ff ff 00 00 01 02 03 02 03 02 03 02 03 01     ................
    1ba8:	02 00 00 ff ff fe fe fd fd fd fc fd fb fc fc fb     ................
    1bb8:	fb f9 fb fa fb fa fd fd ff 00 02 03 06 06 08 08     ................
    1bc8:	09 08 07 08 05 04 04 01 ff ff fc fb fa f8 f9 f7     ................
    1bd8:	f7 f8 f7 f5 f7 f6 f7 f8 f8 fa fb fd ff 00 03 05     ................
    1be8:	06 09 0a 0c 0d 0e 0d 0e 0d 0c 09 08 04 01 fe fa     ................
    1bf8:	f7 f4 f1 f0 f1 ef f0 f2 f1 f3 f6 f6 f8 fa fc fe     ................
    1c08:	ff 02 03 05 08 08 0c 14 10 12 16 14 0f 0d 07 04     ................
    1c18:	fc f5 f6 f1 eb ef f2 ee f4 f8 f8 fa fd ff 00 fe     ................
    1c28:	fd 00 fb f9 f8 f8 f6 f7 f9 fe fe 06 11 13 15 1c     ................
    1c38:	1b 19 15 0e 0a 02 f5 f3 f2 e6 e8 eb eb ee f3 f7     ................
    1c48:	fb 01 02 07 08 05 05 03 fc f9 f7 f4 f3 f1 f6 f9     ................
    1c58:	fc 09 0e 11 1b 1c 1a 1b 12 0d 09 fb f3 f5 e9 e5     ................
    1c68:	ea e9 eb f2 f5 f9 03 03 08 0d 09 08 05 00 fa f5     ................
    1c78:	f2 ef ef f0 f3 f8 05 0e 0f 1b 21 1b 1f 19 0e 0c     ..........!.....
    1c88:	ff f4 f3 ea e0 e6 e5 e6 ed f4 f8 00 07 09 11 11     ................
    1c98:	0c 0c 06 fe f8 f3 ec ed ea ec f1 f7 07 0c 12 1e     ................
    1ca8:	20 1d 1f 16 10 0b fd f5 f4 e7 e4 e7 e6 e7 f0 f5      ...............
    1cb8:	fa 03 07 0d 11 0f 0b 0b 03 fa f7 ef eb eb e8 eb     ................
    1cc8:	f1 f8 09 0d 14 1f 22 1e 1f 18 10 0c fa f7 f2 e5     ......".........
    1cd8:	e4 e8 e5 e8 f2 f3 fc 03 07 0c 10 0c 0c 08 00 f9     ................
    1ce8:	f6 ed e9 ea e6 eb f0 f5 08 0f 13 1e 28 20 22 1e     ............( ".
    1cf8:	15 0f 01 f9 f6 e8 e3 e7 e4 e4 ee f1 f6 fd 04 0b     ................
    1d08:	0e 0d 0d 0b 03 fe f9 f3 ec ea e8 ea ec f0 fc 0c     ................
    1d18:	0f 17 24 27 20 24 1f 15 0d 00 fb f1 e6 e4 e5 e0     ..$' $..........
    1d28:	e7 eb ee f5 fe 04 08 0b 0c 0c 06 04 ff fa f3 f0     ................
    1d38:	ec ea ea ed f3 f6 07 0f 14 1f 27 23 27 21 1a 13     ..........'#'!..
    1d48:	06 fc f6 e7 e5 e3 de e2 e7 e8 f1 f7 ff 04 08 0c     ................
    1d58:	0e 08 08 04 fe f7 f4 f0 ed e9 ec ef f4 f7 06 11     ................
    1d68:	16 1d 28 28 24 24 1c 15 06 fd f8 ea e2 e4 e1 df     ..(($$..........
    1d78:	e6 ea ef f5 fb 03 06 09 0b 0a 06 05 fe f9 f5 f2     ................
    1d88:	ed ed ee f0 f4 f8 ff 05 0f 16 1c 20 25 23 1e 19     ........... %#..
    1d98:	13 0a 00 fb f3 ed ea e9 e8 ea ec f0 f2 f8 fb fe     ................
    1da8:	ff 02 01 fe fe fc f9 f6 f6 f6 f4 f8 f9 fb ff 02     ................
    1db8:	06 08 0b 0d 0f 13 14 12 14 15 10 0d 0c 07 00 01     ................
    1dc8:	fb f7 f4 f3 ef ef ee ee ea ee ef ef f2 f5 f7 f8     ................
    1dd8:	fd 00 01 01 06 04 04 05 06 05 03 04 04 01 02 04     ................
    1de8:	03 04 08 07 09 0b 0b 0c 0a 0c 09 06 06 02 fe fa     ................
    1df8:	f9 f5 f2 ef f1 ee ee f0 f1 f2 f7 f9 fb ff 01 03     ................
    1e08:	04 05 04 05 04 05 02 03 02 02 02 01 02 01 ff 01     ................
    1e18:	00 00 02 02 03 02 04 04 03 03 02 03 01 fe fe fc     ................
    1e28:	fb f9 f9 f7 f8 f8 f7 f9 fa fb fc fe 00 00 03 02     ................
    1e38:	03 05 03 04 02 02 ff ff fe fc fc fb fc fb fd fd     ................
    1e48:	ff 00 01 02 03 03 04 04 04 03 03 00 ff fe fc fb     ................
    1e58:	f9 fa f9 fa fa fd fd 00 01 03 04 05 04 06 05 05     ................
    1e68:	03 03 00 ff fc fc fc f9 fa fa fb fb fc fd fd ff     ................
    1e78:	ff 00 00 01 00 00 00 00 ff fe fd fe fd fe fd fe     ................
    1e88:	fe 00 00 01 01 02 01 03 01 01 00 00 fe fe 00 fe     ................
    1e98:	ff 00 00 ff 01 00 01 00 01 00 ff fd fd fb fb fa     ................
    1ea8:	fb fb fc fc fe 00 ff 02 02 03 03 02 02 00 00 fe     ................
    1eb8:	fe fd fc fc ff ff fe fe ff fe 00 00 00 ff 00 ff     ................
    1ec8:	00 ff 00 00 00 00 00 00 00 ff ff ff ff fe ff fe     ................
    1ed8:	ff fe ff fe ff fe ff 00 00 00 00 00 ff 00 ff 00     ................
    1ee8:	ff 00 00 00 ff 00 ff 00 ff 00 fe 00 fe ff fe ff     ................
    1ef8:	fe ff fe ff fe ff fe ff ff fe ff ff fe ff fe ff     ................
    1f08:	fe ff ff fe ff 00 ff 00 ff 00 ff 00 ff 00 00 00     ................
    1f18:	ff 00 ff 00 00 ff 00 ff 00 ff ff ff ff ff fe ff     ................
    1f28:	fe ff fe ff fe fe fd fe fe fd fe fe fd fe fd fe     ................
    1f38:	fe fd ff fe 00 00 00 00 01 01 02 02 03 02 02 03     ................
    1f48:	02 03 03 03 02 03 02 02 01 01 ff ff fd fd fc fa     ................
    1f58:	fa f8 f9 f8 f9 f9 f8 fa fb fa fc fd fd ff fe ff     ................
    1f68:	00 00 01 ff 01 00 01 00 02 02 04 05 07 08 09 09     ................
    1f78:	0c 0b 0a 09 09 06 01 00 fe fa f6 f4 f3 f0 f1 f1     ................
    1f88:	f2 f2 f6 f8 fa fc fe ff ff 01 01 00 ff ff fe fb     ................
    1f98:	fd fc fb fa fd fe 02 02 0a 10 10 15 1b 17 15 14     ................
    1fa8:	11 0a 02 fe f8 f0 ec eb e8 e8 e9 ee ef f2 fa fd     ................
    1fb8:	00 05 09 09 08 09 06 ff fd fb f7 f3 f3 f3 f1 f1     ................
    1fc8:	f5 f5 fa fe 04 09 13 1a 1c 21 26 21 1d 1b 11 08     .........!&!....
    1fd8:	00 f6 ed e5 e1 de dd de e4 e9 ef f4 ff 03 09 10     ................
    1fe8:	11 12 12 0e 0a 02 fe f8 f2 ed ed ea eb ec f0 f2     ................
    1ff8:	f8 fd 02 0b 19 1e 20 2b 2e 25 23 20 14 08 fd f5     ...... +.%# ....
    2008:	e6 dd da d5 d5 d7 de e4 ec f4 02 06 0e 16 1a 19     ................
    2018:	1a 15 0f 06 ff f9 ef eb e8 e6 e5 e6 e8 ee f3 f8     ................
    2028:	01 0b 1f 1f 26 33 32 29 2c 23 16 08 ff f2 e0 d8     ....&32),#......
    2038:	d3 cd cc d3 d7 df e6 f5 01 08 13 1e 1e 22 20 1c     ............." .
    2048:	13 0a 02 f8 ed e9 e3 e0 df e0 e2 e9 ee f6 ff 15     ................
    2058:	20 20 32 3c 32 31 32 24 15 08 fe eb db d6 cf c8       2<212$........
    2068:	ca cf d4 dc e6 f8 00 0c 1a 21 22 27 22 1d 14 0b     .........!"'"...
    2078:	02 f5 ef e8 e1 de dd dd e2 e7 ef f5 0c 1b 1b 2b     ...............+
    2088:	3c 34 32 36 2c 1b 10 06 f5 e2 da d3 c7 c8 cb cc     <426,...........
    2098:	d4 dd ee f6 04 15 1c 20 29 26 21 1a 13 09 fd f6     ....... )&!.....
    20a8:	ef e5 e1 e0 dc de e4 ea f2 0b 13 17 2a 38 2e 35     ............*8.5
    20b8:	35 2a 1d 14 08 f8 e7 e1 d5 cb cc cb cb d0 dc e9     5*..............
    20c8:	ee 00 12 13 1f 26 23 21 1b 18 0c 02 fe f5 e9 e7     .....&#!........
    20d8:	e4 df e0 e4 e9 f8 07 0d 18 2c 2b 2c 33 2e 24 1c     .........,+,3.$.
    20e8:	14 05 f7 ed e3 d5 d2 cf cc cd d3 de e3 f0 03 0a     ................
    20f8:	11 1d 20 1d 1e 1b 16 0c 05 01 f4 ef eb e7 e2 e6     .. .............
    2108:	e6 ef 00 04 0c 21 24 22 2e 2a 22 1d 17 0c ff f6     .....!$".*".....
    2118:	ef e3 da d9 d4 d1 d2 dd e0 e6 f8 02 05 12 18 17     ................
    2128:	19 18 17 0f 0b 07 00 f8 f6 f1 ec ea ee ea f7 06     ................
    2138:	03 0d 22 1b 1d 26 21 17 16 10 06 fb f6 ef e3 e1     .."..&!.........
    2148:	de db d6 db e4 e4 ed fc ff 06 10 13 13 13 16 13     ................
    2158:	0b 0a 07 ff fc fa f6 f0 f0 f3 ee fa 07 03 0d 1c     ................
    2168:	1b 18 20 1c 14 0f 0e 03 fb f5 ef e6 e0 e0 dc d9     .. .............
    2178:	de e5 e5 ef fb ff 03 0f 11 10 11 16 10 0b 0a 09     ................
    2188:	fe fd fd f6 f3 f6 f5 f2 f7 02 05 05 11 19 16 17     ................
    2198:	1d 17 0e 10 0b ff fa f5 ed e5 e3 e1 dd dd e4 e6     ................
    21a8:	ea f5 fb 00 09 0e 10 11 15 13 0e 0e 0a 04 ff ff     ................
    21b8:	f9 f6 f5 f6 f4 f5 fa fd ff 03 0b 0e 0e 16 17 15     ................
    21c8:	15 15 0d 06 02 f9 f3 ee e7 e4 e1 e2 e1 e5 e9 f0     ................
    21d8:	f4 fc 03 09 0d 12 12 12 11 10 0b 06 04 fe fa f7     ................
    21e8:	f4 f3 f2 f3 f6 f6 fb ff 04 07 0c 0f 10 12 11 10     ................
    21f8:	0d 09 04 00 fc f6 f1 ef ed ec ee ef f3 f7 fa 00     ................
    2208:	04 06 09 0b 0c 0a 0b 08 07 03 01 fc fa f6 f5 f3     ................
    2218:	f4 f4 f4 f7 f9 fd 00 02 06 0a 0a 0c 0c 0c 0a 07     ................
    2228:	06 01 fc fb f6 f4 f4 f2 f4 f5 f8 fa fe 01 05 06     ................
    2238:	0a 0b 0c 0b 0a 09 05 03 01 fc f9 f7 f4 f2 f1 f3     ................
    2248:	f3 f3 f7 fa fb ff 01 04 06 07 09 08 08 06 05 01     ................
    2258:	ff fc fb f8 f8 f7 f8 f9 fb fc ff 02 04 06 07 08     ................
    2268:	0a 09 09 07 05 03 02 fd fc fa f8 f6 f8 f5 f6 f9     ................
    2278:	f8 fb fd fe 02 03 04 05 06 04 05 04 01 00 fd fc     ................
    2288:	fb f9 f9 f8 fa fa fc fd 00 02 03 05 06 06 06 07     ................
    2298:	05 05 03 00 ff fd fc f9 fa f8 f8 f9 f9 fb fc fc     ................
    22a8:	ff ff 02 02 04 04 04 04 03 03 01 00 fe fd fc fa     ................
    22b8:	fb fa fa fb fc fc fe ff 00 01 02 04 04 05 05 03     ................
    22c8:	01 02 ff ff fd fd fa fb fa fa fa fc fd d0 00 00     ................
	...

000022d9 <level_data>:
    22d9:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    22e9:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 00     ................
	...
    2311:	00 00 00 02 02 00 00 00 06 05 00 00 00 00 00 00     ................
	...
    2329:	00 00 42 42 42 42 42 42 00 02 02 00 00 06 02 02     ..BBBBBB........
    2339:	05 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2349:	42 4d 4d 4d 4d 42 00 02 02 00 06 02 02 02 02 05     BMMMMB..........
	...
    2365:	00 00 42 4d 4d 4d 4d 42 00 02 02 00 04 02 02 02     ..BMMMMB........
    2375:	02 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2385:	42 4d 4d 4d 4d 42 00 02 02 00 00 04 02 02 03 00     BMMMMB..........
	...
    23a1:	00 00 42 4d 4d 4d 4d 42 00 02 02 00 00 00 04 03     ..BMMMMB........
	...
    23c1:	42 42 42 42 42 42 00 02 02 00 00 00 00 00 00 00     BBBBBB..........
    23d1:	00 00 00 00 00 00 02 02 00 00 00 00 00 00 00 00     ................
    23e1:	00 00 00 00 00 02 02 00 00 00 00 00 00 00 00 00     ................
    23f1:	00 00 00 00 02 02 00 00 00 00 00 00 00 00 00 00     ................
    2401:	00 00 00 02 02 00 00 00 00 00 00 00 01 01 01 01     ................
    2411:	01 00 02 02 00 01 01 01 01 01 00 00 00 00 00 00     ................
    2421:	00 02 02 00 00 00 00 00 00 00 01 01 01 01 01 00     ................
    2431:	02 02 00 01 01 01 01 01 00 00 00 00 00 00 00 02     ................
    2441:	02 00 00 58 00 00 00 00 01 01 01 01 01 00 02 02     ...X............
    2451:	00 01 01 01 01 01 00 00 00 63 00 00 00 02 02 00     .........c......
    2461:	00 00 00 00 00 00 01 01 01 01 01 00 02 02 00 01     ................
    2471:	01 01 01 01 00 00 00 00 00 00 00 02 02 00 00 00     ................
    2481:	00 00 00 00 01 01 01 01 01 00 02 02 00 01 01 01     ................
    2491:	01 01 00 00 00 00 00 00 00 02 02 00 00 00 00 00     ................
	...
    24a9:	02 02 00 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    24b9:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 02 02     ................
	...
    24d5:	00 02 02 00 42 42 42 42 42 42 00 00 00 00 00 00     ....BBBBBB......
	...
    24ed:	00 00 06 05 00 00 00 02 02 00 42 4d 4d 4d 4d 42     ..........BMMMMB
	...
    2509:	00 00 00 06 02 02 05 00 00 02 02 00 42 4d 4d 4d     ............BMMM
    2519:	4d 42 00 00 00 00 00 00 00 00 00 00 00 00 00 00     MB..............
    2529:	06 02 02 02 02 05 00 02 02 00 42 4d 2c 4d 4d 42     ..........BM,MMB
	...
    2545:	00 00 04 02 02 02 02 03 00 02 02 00 42 4d 4d 4d     ............BMMM
    2555:	4d 42 00 00 00 00 00 00 00 00 00 00 00 00 00 00     MB..............
    2565:	00 04 02 02 03 00 00 02 02 00 42 42 42 42 42 42     ..........BBBBBB
	...
    2585:	04 03 00 00 00 02 02 00 00 00 00 00 00 00 00 00     ................
	...
    25a5:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    25b5:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    25c5:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    25d5:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    25e5:	02 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2601:	00 02 02 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
    261d:	00 00 00 02 02 01 01 01 01 01 01 01 01 00 00 01     ................
    262d:	01 01 01 01 01 01 01 00 00 01 01 01 01 01 01 01     ................
    263d:	01 02 02 01 01 01 01 01 01 01 01 00 00 01 01 01     ................
    264d:	01 01 01 01 01 00 00 01 01 01 01 01 01 01 01 02     ................
    265d:	02 01 01 01 01 01 01 01 01 00 00 01 01 42 42 42     .............BBB
    266d:	42 01 01 00 00 01 01 01 01 01 01 01 01 02 02 01     B...............
    267d:	00 00 00 00 01 01 01 00 00 01 01 42 4d 4d 42 01     ...........BMMB.
    268d:	01 00 00 01 01 01 00 00 00 00 01 02 02 01 00 00     ................
    269d:	00 00 01 01 01 00 00 01 01 42 2c 4d 42 01 01 00     .........B,MB...
    26ad:	00 01 01 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
    26bd:	01 01 01 00 00 01 01 42 4d 4d 42 01 01 00 00 01     .......BMMB.....
    26cd:	01 01 00 00 00 00 01 02 02 01 00 00 00 00 01 01     ................
    26dd:	01 00 00 01 01 42 42 42 42 01 01 00 00 01 01 01     .....BBBB.......
    26ed:	00 00 00 00 01 02 02 01 00 00 00 00 00 00 01 00     ................
    26fd:	00 01 01 01 01 01 01 01 01 00 00 01 00 00 00 00     ................
    270d:	00 00 01 02 02 01 00 58 00 00 09 00 01 00 00 01     .......X........
    271d:	01 01 01 01 01 01 01 00 00 01 00 09 00 00 00 00     ................
    272d:	01 02 02 01 00 00 00 00 00 00 01 00 00 00 00 00     ................
    273d:	00 00 00 00 00 00 00 01 00 00 00 63 00 00 01 02     ...........c....
    274d:	02 01 00 00 00 00 01 01 01 00 00 01 01 01 01 01     ................
    275d:	01 01 01 00 00 01 01 01 00 00 00 00 01 02 02 01     ................
    276d:	00 00 00 00 01 01 01 00 00 01 01 01 01 01 01 01     ................
    277d:	01 00 00 01 01 01 00 00 00 00 01 02 02 01 00 00     ................
    278d:	00 00 01 01 01 00 00 01 01 42 42 42 42 01 01 00     .........BBBB...
    279d:	00 01 01 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
    27ad:	01 01 01 00 00 01 01 42 4d 4d 42 01 01 00 00 01     .......BMMB.....
    27bd:	01 01 00 00 00 00 01 02 02 01 01 01 01 01 01 01     ................
    27cd:	01 00 00 01 01 42 4d 4d 42 01 01 00 00 01 01 01     .....BMMB.......
    27dd:	01 01 01 01 01 02 02 01 01 01 01 01 01 01 01 00     ................
    27ed:	00 01 01 42 4d 4d 42 01 01 00 00 01 01 01 01 01     ...BMMB.........
    27fd:	01 01 01 02 02 01 01 01 01 01 01 01 01 00 00 01     ................
    280d:	01 42 42 42 42 01 01 00 00 01 01 01 01 01 01 01     .BBBB...........
    281d:	01 02 02 01 01 01 01 01 01 01 01 00 00 01 01 01     ................
    282d:	01 01 01 01 01 00 00 01 01 01 01 01 01 01 01 02     ................
    283d:	02 01 01 01 01 01 01 01 01 00 00 01 01 01 01 01     ................
    284d:	01 01 01 00 00 01 01 01 01 01 01 01 01 02 02 01     ................
    285d:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2875:	01 01 01 02 02 01 01 01 00 00 00 00 00 00 00 00     ................
	...
    2891:	00 00 01 01 01 02 02 02 02 02 02 02 02 02 02 02     ................
    28a1:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    28b1:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    28c1:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    28d1:	02 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    28ed:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    290d:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2929:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2949:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2965:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2985:	00 02 02 01 01 01 01 01 01 00 00 00 00 00 00 00     ................
	...
    299d:	00 01 00 00 00 00 01 02 02 01 00 00 00 00 01 00     ................
	...
    29b9:	00 00 00 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
    29c9:	01 00 00 00 00 02 00 00 00 00 00 00 02 00 00 00     ................
    29d9:	00 01 00 07 00 00 01 02 02 01 00 58 00 00 01 00     ...........X....
    29e9:	00 00 00 02 00 00 00 00 00 00 02 00 00 00 00 01     ................
    29f9:	00 00 00 00 01 02 02 01 00 00 00 00 01 00 00 00     ................
    2a09:	00 02 00 00 00 00 00 00 02 00 00 00 00 01 00 00     ................
    2a19:	00 00 01 02 02 01 00 00 00 00 01 00 00 00 00 02     ................
    2a29:	02 02 02 02 02 02 02 00 00 00 00 01 00 00 00 00     ................
    2a39:	01 02 02 01 00 00 00 00 01 00 00 00 00 02 00 00     ................
    2a49:	00 00 00 00 02 00 00 00 00 01 00 00 00 00 01 02     ................
    2a59:	02 01 00 00 00 00 01 00 00 00 00 02 00 00 00 00     ................
    2a69:	00 00 02 00 00 00 00 01 00 00 00 00 01 02 02 01     ................
    2a79:	00 00 00 00 01 00 00 00 00 02 00 00 00 00 00 00     ................
    2a89:	02 00 00 00 00 01 00 63 00 00 01 02 02 01 00 00     .......c........
    2a99:	07 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2aa9:	00 00 00 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
    2ab9:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2ac9:	00 01 00 00 00 00 01 02 02 01 00 00 00 00 01 00     ................
	...
    2ae5:	00 00 00 01 01 01 01 01 01 02 02 00 00 00 00 00     ................
	...
    2b09:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2b29:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2b45:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2b65:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2b81:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2b91:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2ba1:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2bb1:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2bc1:	02 00 00 00 42 4d 4d 4d 42 00 00 00 00 00 00 00     ....BMMMB.......
    2bd1:	00 00 00 00 00 42 4d 4d 4d 42 00 00 00 02 02 00     .....BMMMB......
    2be1:	08 00 42 4d 4d 4d 42 00 00 00 00 00 00 00 00 00     ..BMMMB.........
    2bf1:	00 00 00 42 4d 4d 4d 42 00 08 00 02 02 00 00 00     ...BMMMB........
    2c01:	42 4d 4d 4d 42 00 01 01 01 00 00 00 00 01 01 01     BMMMB...........
    2c11:	00 42 4d 4d 4d 42 00 00 00 02 02 02 02 02 02 42     .BMMMB.........B
    2c21:	42 42 02 00 01 01 01 00 02 02 00 01 01 01 00 02     BB..............
    2c31:	42 42 42 02 02 02 02 02 02 00 00 00 00 00 00 00     BBB.............
    2c41:	02 00 01 01 01 00 02 02 00 01 01 01 00 02 00 00     ................
    2c51:	00 00 00 00 00 02 02 00 01 01 01 01 01 00 02 00     ................
    2c61:	00 00 00 00 02 02 00 00 00 00 00 02 00 01 01 01     ................
    2c71:	01 01 00 02 02 00 01 01 01 01 01 00 02 00 00 00     ................
    2c81:	02 02 02 02 02 02 00 00 00 02 00 01 01 01 01 01     ................
    2c91:	00 02 02 00 01 01 01 01 01 00 02 00 00 00 00 00     ................
    2ca1:	00 00 00 00 00 00 00 02 00 01 01 01 01 01 00 02     ................
    2cb1:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2ccd:	00 02 02 02 02 02 02 00 00 00 00 00 00 00 00 00     ................
	...
    2ce5:	00 00 00 02 02 02 02 02 00 00 00 00 02 00 00 00     ................
    2cf5:	00 00 58 00 02 00 00 00 00 02 00 00 00 00 00 00     ..X.............
    2d05:	00 02 00 00 00 00 00 00 00 00 02 00 00 00 02 00     ................
    2d15:	00 00 02 00 00 00 00 02 63 00 00 02 00 00 00 02     ........c.......
	...
    2d2d:	02 00 00 00 02 00 00 00 02 02 02 02 02 02 00 00     ................
    2d3d:	00 02 00 00 00 02 00 00 00 00 02 02 02 02 02 00     ................
    2d4d:	00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    2d5d:	00 00 00 02 02 02 02 02 02 4d 4d 4d 42 00 00 00     .........MMMB...
    2d6d:	02 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00     ................
    2d7d:	00 42 4d 4d 4d 02 02 4d 4d 4d 42 00 00 00 02 00     .BMMM..MMMB.....
	...
    2d95:	00 00 00 02 00 00 00 42 4d 4d 4d 02 02 4d 2c 4d     .......BMMM..M,M
    2da5:	42 00 00 00 02 00 00 00 02 02 02 02 02 02 00 00     B...............
    2db5:	00 02 00 00 00 42 4d 4d 4d 02 02 4d 4d 4d 02 00     .....BMMM..MMM..
	...
    2dcd:	02 02 00 00 00 00 00 00 00 00 00 02 4d 4d 4d 02     ............MMM.
    2ddd:	02 4d 4d 4d 02 00 00 01 01 01 00 00 00 00 02 02     .MMM............
    2ded:	00 00 00 00 01 01 01 00 00 02 4d 4d 4d 02 02 42     ..........MMM..B
    2dfd:	42 42 02 00 00 01 01 01 00 00 00 00 02 02 00 00     BB..............
    2e0d:	00 00 01 01 01 00 00 02 42 42 42 02 02 00 00 00     ........BBB.....
    2e1d:	02 00 00 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
    2e2d:	01 01 01 00 00 02 00 00 00 02 02 00 08 00 02 00     ................
	...
    2e45:	09 00 00 00 00 00 00 00 00 00 00 02 00 08 00 02     ................
    2e55:	02 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2e6d:	00 02 00 00 00 02 02 02 02 02 02 02 02 02 02 02     ................
    2e7d:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2e8d:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2e9d:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2ead:	02 02 02 02 02 03 00 00 00 00 00 00 00 00 00 00     ................
	...
    2ec9:	04 02 02 02 02 02 03 00 00 00 00 00 00 00 00 00     ................
	...
    2ee5:	00 00 00 04 02 02 02 03 00 00 00 00 00 00 00 00     ................
	...
    2f05:	00 00 04 02 02 00 00 00 00 00 00 06 05 00 00 00     ................
    2f15:	00 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2f25:	00 02 02 00 00 00 00 00 06 02 02 05 00 00 00 00     ................
	...
    2f41:	00 00 00 02 02 00 00 00 00 06 02 4d 4d 02 05 00     ...........MM...
	...
    2f61:	00 02 02 00 00 00 00 04 02 4d 4d 02 03 00 00 00     .........MM.....
	...
    2f7d:	00 00 00 02 02 00 00 00 00 00 04 02 02 03 00 00     ................
	...
    2f9d:	00 02 02 00 00 00 00 00 00 04 03 00 00 00 00 00     ................
    2fad:	06 05 00 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    2fbd:	02 00 00 00 00 00 00 00 00 00 00 00 00 06 02 02     ................
    2fcd:	05 00 00 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    2fe5:	00 00 06 02 01 01 02 05 00 00 00 00 00 00 00 00     ................
    2ff5:	00 00 00 02 02 00 00 58 00 00 00 00 00 00 00 00     .......X........
    3005:	04 02 01 01 02 03 00 00 00 00 00 00 00 63 00 00     .............c..
    3015:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 04     ................
    3025:	02 02 03 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    3035:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 04 03     ................
	...
    3051:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3061:	00 00 00 00 00 00 00 06 05 00 00 00 00 00 00 02     ................
    3071:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3081:	00 00 00 00 06 02 02 05 00 00 00 00 00 02 02 00     ................
	...
    30a1:	00 06 02 4d 4d 02 05 00 00 00 00 02 02 00 00 00     ...MM...........
	...
    30bd:	00 00 00 04 02 4d 4d 02 03 00 00 00 00 02 02 00     .....MM.........
	...
    30dd:	00 00 04 02 02 03 00 00 00 00 00 02 02 00 00 00     ................
	...
    30f5:	00 00 07 00 00 00 00 00 00 04 03 00 00 00 00 00     ................
    3105:	00 02 02 05 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3121:	00 00 06 02 02 02 05 00 00 00 00 00 00 00 00 00     ................
	...
    313d:	00 00 00 06 02 02 02 02 02 05 00 00 00 00 00 00     ................
	...
    315d:	06 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    316d:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    317d:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    318d:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    319d:	02 00 00 00 00 00 00 00 00 00 00 04 02 02 02 02     ................
    31ad:	02 02 03 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    31c5:	00 00 04 02 02 02 02 03 00 00 00 00 00 00 00 00     ................
    31d5:	00 00 00 02 02 00 00 01 01 01 01 00 00 00 00 00     ................
    31e5:	00 04 02 02 03 00 00 00 00 00 00 01 01 01 01 00     ................
    31f5:	00 02 02 00 00 01 01 01 01 00 00 00 00 00 00 00     ................
    3205:	04 03 00 00 00 00 00 00 00 01 01 01 01 00 00 02     ................
    3215:	02 00 00 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
    3225:	00 00 00 00 00 00 00 01 01 01 01 00 00 02 02 00     ................
    3235:	00 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00     ................
    3245:	00 00 00 00 00 01 01 01 01 00 00 02 02 00 00 00     ................
	...
    326d:	00 02 02 00 00 00 00 00 00 00 00 00 00 02 00 00     ................
    327d:	00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 02     ................
    328d:	02 00 00 00 00 00 00 00 00 00 00 02 42 42 42 42     ............BBBB
    329d:	42 42 02 00 00 00 00 00 00 00 00 00 00 02 02 00     BB..............
	...
    32b5:	00 02 4d 4d 4d 4d 4d 4d 02 00 00 00 00 00 00 00     ..MMMMMM........
    32c5:	00 00 00 02 02 00 58 00 00 00 00 00 00 00 00 02     ......X.........
    32d5:	4d 4d 4d 4d 4d 4d 02 00 00 00 00 00 00 00 63 00     MMMMMM........c.
    32e5:	00 02 02 00 00 00 00 00 00 00 00 00 00 02 4d 4d     ..............MM
    32f5:	2c 4d 4d 4d 02 00 00 00 00 00 00 00 00 00 00 02     ,MMM............
    3305:	02 00 00 00 00 00 00 00 00 00 00 02 4d 4d 4d 4d     ............MMMM
    3315:	4d 4d 02 00 00 00 00 00 00 00 00 00 00 02 02 00     MM..............
	...
    332d:	00 02 42 42 42 42 42 42 02 00 00 00 00 00 00 00     ..BBBBBB........
    333d:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 02     ................
    334d:	00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00     ................
    335d:	00 02 02 00 00 00 00 00 00 00 00 00 00 02 00 07     ................
    336d:	00 00 09 00 02 00 00 00 00 00 00 00 00 00 00 02     ................
    337d:	02 00 00 00 00 00 00 00 00 00 00 02 05 00 00 00     ................
    338d:	00 06 02 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
    339d:	00 00 00 01 01 01 01 01 00 02 02 05 00 00 06 02     ................
    33ad:	02 00 01 01 01 01 01 00 00 00 00 02 02 00 00 00     ................
    33bd:	00 01 01 01 01 01 00 02 02 02 02 02 02 02 02 00     ................
    33cd:	01 01 01 01 01 00 00 00 00 02 02 00 00 00 00 01     ................
    33dd:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    33ed:	00 01 01 00 00 00 00 02 02 00 00 00 00 01 01 00     ................
    33fd:	08 00 00 00 00 00 00 00 00 00 00 00 00 08 00 01     ................
    340d:	01 00 00 00 00 02 02 00 00 00 00 01 01 00 00 00     ................
	...
    3429:	00 01 01 00 00 00 00 02 02 00 00 00 00 00 00 00     ................
	...
    344d:	00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    345d:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    346d:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    347d:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    348d:	03 00 00 00 00 00 00 00 00 04 02 02 02 02 02 02     ................
    349d:	03 00 00 00 00 00 00 00 00 04 02 02 02 03 00 00     ................
	...
    34b5:	04 02 02 02 02 03 00 00 00 00 00 00 00 00 00 00     ................
    34c5:	04 02 02 00 00 00 01 01 01 01 01 00 00 00 00 04     ................
    34d5:	02 02 03 00 00 00 00 01 01 01 01 01 00 00 00 02     ................
    34e5:	02 00 00 00 01 00 00 00 01 00 00 00 00 00 04 03     ................
    34f5:	00 00 00 00 00 01 00 00 00 01 00 00 00 02 02 00     ................
    3505:	00 00 01 00 09 00 01 00 00 00 00 00 00 00 00 00     ................
    3515:	00 00 00 01 00 07 00 01 00 00 00 02 02 00 00 00     ................
    3525:	01 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00     ................
    3535:	00 01 00 00 00 01 00 00 00 02 02 00 00 00 01 01     ................
    3545:	01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
    3555:	01 01 01 01 00 00 00 02 02 00 00 00 00 00 00 00     ................
	...
    3579:	00 02 02 05 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3595:	00 00 06 02 02 02 05 00 00 00 00 00 00 00 00 00     ................
    35a5:	01 01 01 01 01 01 01 00 00 00 00 00 00 00 00 06     ................
    35b5:	02 02 02 02 02 05 00 58 00 00 00 00 00 00 01 00     .......X........
    35c5:	00 00 00 00 01 00 00 00 00 63 00 00 06 02 02 02     .........c......
    35d5:	02 02 02 03 00 00 00 00 00 00 00 00 01 00 00 08     ................
    35e5:	00 00 01 00 00 00 00 00 00 00 04 02 02 02 02 02     ................
    35f5:	03 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00     ................
    3605:	01 00 00 00 00 00 00 00 00 04 02 02 02 03 00 00     ................
	...
    361d:	01 01 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
    362d:	04 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3649:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3669:	00 02 02 00 00 00 01 01 01 01 01 00 00 00 00 00     ................
    3679:	00 00 00 00 00 00 00 01 01 01 01 01 00 00 00 02     ................
    3689:	02 00 00 00 01 00 00 00 01 00 00 00 00 00 00 00     ................
    3699:	00 00 00 00 00 01 00 00 00 01 00 00 00 02 02 00     ................
    36a9:	00 00 01 00 07 00 01 00 00 00 00 00 00 00 00 00     ................
    36b9:	00 00 00 01 00 09 00 01 00 00 00 02 02 00 00 00     ................
    36c9:	01 00 00 00 01 00 00 00 00 00 06 05 00 00 00 00     ................
    36d9:	00 01 00 00 00 01 00 00 00 02 02 00 00 00 01 01     ................
    36e9:	01 01 01 00 00 00 00 06 02 02 05 00 00 00 00 01     ................
    36f9:	01 01 01 01 00 00 00 02 02 05 00 00 00 00 00 00     ................
    3709:	00 00 00 00 06 02 02 02 02 05 00 00 00 00 00 00     ................
    3719:	00 00 00 00 06 02 02 02 05 00 00 00 00 00 00 00     ................
    3729:	00 06 02 02 02 02 02 02 05 00 00 00 00 00 00 00     ................
    3739:	00 06 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3749:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3759:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3769:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3779:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3795:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    37b1:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    37d1:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    37ed:	00 00 00 02 02 00 00 00 00 00 00 00 02 02 02 02     ................
    37fd:	02 02 02 02 02 02 02 02 02 02 00 00 00 00 00 00     ................
    380d:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3829:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3841:	01 01 01 01 01 01 01 01 01 02 02 00 00 07 00 00     ................
    3851:	09 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01     ................
    3861:	01 01 01 01 01 01 01 02 02 00 00 00 00 00 00 00     ................
    3871:	00 00 00 00 00 42 42 42 42 00 00 00 01 01 01 01     .....BBBB.......
    3881:	01 01 01 01 01 02 02 00 00 00 00 00 00 00 00 00     ................
    3891:	00 00 00 42 4d 4d 42 00 00 00 01 01 01 00 00 00     ...BMMB.........
    38a1:	00 01 01 02 02 00 00 00 58 00 00 00 00 00 00 00     ........X.......
    38b1:	00 42 4d 4d 42 00 00 00 01 01 01 00 63 00 00 01     .BMMB.......c...
    38c1:	01 02 02 00 00 00 00 00 00 00 00 00 00 00 00 42     ...............B
    38d1:	4d 4d 42 00 00 00 01 01 01 00 00 00 00 01 01 02     MMB.............
    38e1:	02 00 00 00 00 00 00 00 00 00 00 00 00 42 2c 4d     .............B,M
    38f1:	42 00 00 00 01 01 01 00 00 00 00 01 01 02 02 00     B...............
	...
    3909:	00 00 00 42 4d 4d 42 00 00 00 01 01 01 01 01 01     ...BMMB.........
    3919:	01 01 01 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
    3929:	00 42 42 42 42 00 00 00 01 01 01 01 01 01 01 01     .BBBB...........
    3939:	01 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3949:	00 00 00 00 00 00 01 01 01 01 01 01 01 01 01 02     ................
    3959:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3975:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3991:	00 00 00 02 02 00 00 00 00 00 00 00 02 02 02 02     ................
    39a1:	02 02 02 02 02 02 02 02 02 02 00 00 00 00 00 00     ................
    39b1:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    39cd:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    39ed:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3a09:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3a29:	00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3a39:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3a49:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3a59:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 00     ................
	...
    3a81:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3aa1:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3abd:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3add:	00 02 02 00 00 00 00 00 00 00 02 02 02 02 02 02     ................
    3aed:	02 02 02 02 02 02 02 02 00 00 00 00 00 00 00 02     ................
    3afd:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3b19:	00 02 02 01 01 01 01 01 01 01 01 01 00 00 00 00     ................
	...
    3b35:	00 00 00 02 02 01 01 01 01 01 01 01 01 01 00 00     ................
	...
    3b4d:	00 00 00 07 00 00 09 00 00 02 02 01 01 01 01 01     ................
    3b5d:	01 01 01 01 00 00 00 42 42 42 42 00 00 00 00 00     .......BBBB.....
    3b6d:	00 00 00 00 00 00 00 02 02 01 01 00 00 00 00 01     ................
    3b7d:	01 01 00 00 00 42 4d 4d 42 00 00 00 00 00 00 00     .....BMMB.......
    3b8d:	00 00 00 00 00 02 02 01 01 00 58 00 00 01 01 01     ..........X.....
    3b9d:	00 00 00 42 4d 4d 42 00 00 00 00 00 00 00 63 00     ...BMMB.......c.
    3bad:	00 00 00 02 02 01 01 00 00 00 00 01 01 01 00 00     ................
    3bbd:	00 42 4d 2c 42 00 00 00 00 00 00 00 00 00 00 00     .BM,B...........
    3bcd:	00 02 02 01 01 00 00 00 00 01 01 01 00 00 00 42     ...............B
    3bdd:	4d 4d 42 00 00 00 00 00 00 00 00 00 00 00 00 02     MMB.............
    3bed:	02 01 01 01 01 01 01 01 01 01 00 00 00 42 4d 4d     .............BMM
    3bfd:	42 00 00 00 00 00 00 00 00 00 00 00 00 02 02 01     B...............
    3c0d:	01 01 01 01 01 01 01 01 00 00 00 42 42 42 42 00     ...........BBBB.
	...
    3c25:	00 00 00 02 02 01 01 01 01 01 01 01 01 01 00 00     ................
	...
    3c45:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3c61:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3c81:	00 02 02 00 00 00 00 00 00 00 02 02 02 02 02 02     ................
    3c91:	02 02 02 02 02 02 02 02 00 00 00 00 00 00 00 02     ................
    3ca1:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3cbd:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3cd9:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3cf9:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3d15:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3d25:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3d35:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3d45:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3d55:	02 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00     ................
    3d65:	00 00 01 01 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    3d7d:	01 01 00 00 00 00 00 00 01 01 00 00 00 00 00 00     ................
    3d8d:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 01 01     ................
    3d9d:	00 00 00 00 00 00 01 01 00 00 00 00 00 00 00 00     ................
    3dad:	00 02 02 00 58 00 00 00 00 00 00 00 01 01 00 00     ....X...........
    3dbd:	00 00 00 00 01 01 00 00 00 00 00 00 00 00 00 02     ................
    3dcd:	02 00 00 00 00 00 00 00 00 00 01 01 00 07 00 00     ................
    3ddd:	09 00 01 01 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    3df5:	01 01 00 00 00 00 00 00 01 01 00 00 00 00 00 00     ................
    3e05:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 01 01     ................
    3e15:	01 01 01 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
    3e25:	00 02 02 00 00 00 00 00 00 00 00 00 01 01 01 01     ................
    3e35:	01 01 01 01 01 01 00 00 00 00 00 00 00 00 00 02     ................
    3e45:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3e61:	00 02 02 37 37 37 37 37 37 37 37 37 37 37 37 37     ...7777777777777
    3e71:	37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 02     777777777777777.
    3e81:	02 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     .MMMMMMMMMMMMMMM
    3e91:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d     MMMMMMMMMMMMM..M
    3ea1:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 2c 4d 4d 4d 4d     MMMMMMMMMMM,MMMM
    3eb1:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d     MMMMMMMMMMM..MMM
    3ec1:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    3ed1:	4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 37 37 37 37 37     MMMMMMMMM..77777
    3ee1:	37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37     7777777777777777
    3ef1:	37 37 37 37 37 37 37 02 02 00 00 00 00 00 00 00     7777777.........
	...
    3f15:	00 02 02 00 00 00 00 00 00 00 00 00 01 01 01 01     ................
    3f25:	01 01 01 01 01 01 00 00 00 00 00 00 00 00 00 02     ................
    3f35:	02 00 00 00 00 00 00 00 00 00 01 01 01 01 01 01     ................
    3f45:	01 01 01 01 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    3f5d:	01 01 00 00 00 00 00 00 01 01 00 00 00 00 00 00     ................
    3f6d:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 01 01     ................
    3f7d:	00 09 00 00 07 00 01 01 00 00 00 00 00 00 00 00     ................
    3f8d:	00 02 02 00 00 00 00 00 00 00 00 00 01 01 00 00     ................
    3f9d:	00 00 00 00 01 01 00 00 00 00 00 00 63 00 00 02     ............c...
    3fad:	02 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00     ................
    3fbd:	00 00 01 01 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    3fd5:	01 01 00 00 00 00 00 00 01 01 00 00 00 00 00 00     ................
    3fe5:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 01 01     ................
    3ff5:	00 00 00 00 00 00 01 01 00 00 00 00 00 00 00 00     ................
    4005:	00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4015:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4025:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4035:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 4d     ...............M
    4045:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    4055:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d     MMMMMMMMMMM..MMM
    4065:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    4075:	4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d 4d 4d     MMMMMMMMM..MMMMM
    4085:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    4095:	4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d 4d 4d 4d 4d     MMMMMMM..MMMMMMM
    40a5:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    40b5:	4d 4d 4d 4d 4d 02 02 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMM..MMMMMMMMM
    40c5:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    40d5:	4d 4d 4d 02 02 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMM..MMMMMMMMMMM
    40e5:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    40f5:	4d 02 02 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     M..MMMMMMMMMMMMM
    4105:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02     MMMMMMMMMMMMMMM.
    4115:	02 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     .MMMMMMMMMMMMMMM
    4125:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d     MMMMMMMMMMMMM..M
    4135:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    4145:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d     MMMMMMMMMMM..MMM
    4155:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    4165:	4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d 4d 4d     MMMMMMMMM..MMMMM
    4175:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    4185:	4d 4d 4d 4d 4d 4d 4d 02 02 37 37 37 37 37 37 37     MMMMMMM..7777777
    4195:	37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37     7777777777777777
    41a5:	37 37 37 37 37 02 02 00 00 00 00 00 00 00 00 00     77777...........
	...
    41c5:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    41e5:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4201:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4221:	00 02 02 00 00 00 58 00 00 00 00 00 00 00 00 00     ......X.........
	...
    4239:	00 00 00 63 00 00 00 02 02 00 00 00 00 00 00 00     ...c............
	...
    425d:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4279:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4299:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    42b5:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
    42c5:	00 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00     ................
    42d5:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    42f1:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4301:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4311:	02 02                                               ..

00004313 <sprites_data>:
    4313:	fe fe fe fe fe fe 2b 2b fe fe fe fe fe fe fe 2b     ......++.......+
    4323:	fe fe fe fe fe fe fe 2b 2b 2b 2b fe fe fe fe 2b     .......++++....+
    4333:	12 12 12 fe fe 20 20 2b 2b 2b 2b 20 20 20 20 2b     .....  ++++    +
    4343:	12 12 12 20 20 20 20 2b 2b 2b 2b 20 20 20 29 29     ...    ++++   ))
    4353:	2b 2b fe fe fe fe fe fe 2b fe fe fe fe fe fe fe     ++......+.......
    4363:	2b fe fe fe fe fe fe fe 2b fe fe fe fe 2b 2b 2b     +.......+....+++
    4373:	2b 20 20 fe fe 12 12 12 2b 20 20 20 20 2b 2b 2b     +  .....+    +++
    4383:	2b 20 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +    ...))   +++
    4393:	2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12     +.+.+.+.+.+.+.+.
    43a3:	2b 12 2b 12 2b 12 2b 12 fe fe 20 20 20 20 20 20     +.+.+.+...      
    43b3:	fe fe 20 20 20 20 20 20 fe fe fe 20 20 20 20 20     ..      ...     
    43c3:	fe fe fe fe 20 20 29 29 fe fe fe fe 20 20 29 2b     ....  ))....  )+
    43d3:	2b 12 2b 12 2b fe fe fe 2b 12 2b 12 2b fe fe fe     +.+.+...+.+.+...
    43e3:	2b 12 2b 12 2b fe fe fe 20 20 20 fe fe fe fe fe     +.+.+...   .....
    43f3:	20 20 20 fe fe fe fe fe 20 20 20 20 fe fe fe fe        .....    ....
    4403:	29 20 20 20 fe fe fe 2b 29 2b 2b 2b 2b 2b 2b 2b     )   ...+)+++++++
    4413:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4423:	fe fe ff ff fe fe 3f 3f fe fe ff ff fe fe 3f 3f     ......??......??
    4433:	fe fe fe fe ff ff 3f 3f fe fe fe fe ff ff 3f 3f     ......??......??
    4443:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    4453:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4463:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    4473:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    4483:	3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f fe fe     ??????..??????..
    4493:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    44a3:	3f 3f ff ff 1f 1f 3f 3f 3f 3f ff ff 1f 1f 3f 3f     ??....????....??
    44b3:	fe fe 1f 1f ff ff 3f 3f fe fe 1f 1f ff ff 3f 3f     ......??......??
    44c3:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    44d3:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    44e3:	fe fe 1f 1f ff ff 3f 3f fe fe 1f 1f ff ff 3f 3f     ......??......??
    44f3:	fe fe ff ff 3f 3f fe fe fe fe ff ff 3f 3f fe fe     ....??......??..
    4503:	3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f fe fe     ??????..??????..
    4513:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4523:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    4533:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    4543:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4553:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4563:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    4573:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    4583:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4593:	12 12 12 20 20 20 29 2b 2b 2b 2b 20 20 20 29 29     ...   )++++   ))
    45a3:	12 12 12 20 20 20 20 20 2b 2b 2b 20 20 20 20 20     ...     +++     
    45b3:	12 12 12 20 20 20 fe fe 2b 2b 2b 20 20 fe fe fe     ...   ..+++  ...
    45c3:	12 12 12 fe fe fe fe fe 2b 2b 2b fe fe fe fe fe     ........+++.....
    45d3:	2b 29 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +)   ...))   +++
    45e3:	20 20 20 20 20 12 12 12 20 20 20 20 20 2b 2b 2b          ...     +++
    45f3:	fe fe 20 20 20 12 12 12 fe fe fe 20 20 2b 2b 2b     ..   ......  +++
    4603:	fe fe fe fe fe 12 12 12 fe fe fe fe fe 2b 2b 2b     .............+++
    4613:	fe fe fe fe 20 20 29 2b fe fe fe fe 20 20 29 29     ....  )+....  ))
    4623:	fe fe fe 20 20 20 20 20 fe fe 20 20 20 20 20 20     ...     ..      
    4633:	fe fe 20 20 20 20 20 20 2b 12 2b 12 2b 12 2b 12     ..      +.+.+.+.
    4643:	2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12     +.+.+.+.+.+.+.+.
    4653:	29 2b 2b 2b 2b 2b 2b 2b 29 20 20 20 fe fe fe 2b     )+++++++)   ...+
    4663:	20 20 20 20 fe fe fe fe 20 20 20 fe fe fe fe fe         ....   .....
    4673:	20 20 20 fe fe fe fe fe 2b 12 2b 12 2b fe fe fe        .....+.+.+...
    4683:	2b 12 2b 12 2b fe fe fe 2b 12 2b 12 2b fe fe fe     +.+.+...+.+.+...
    4693:	fe fe 3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f     ..??????..??????
    46a3:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    46b3:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    46c3:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    46d3:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    46e3:	3f 3f ff ff fe fe fe fe 3f 3f ff ff fe fe fe fe     ??......??......
    46f3:	3f 3f fe fe ff ff fe fe 3f 3f fe fe ff ff fe fe     ??......??......
    4703:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4713:	fe fe 3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f     ..??????..??????
    4723:	fe fe 1f 1f ff ff fe fe fe fe 1f 1f ff ff fe fe     ................
    4733:	3f 3f ff ff 1f 1f fe fe 3f 3f ff ff 1f 1f fe fe     ??......??......
    4743:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    4753:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    4763:	3f 3f ff ff 1f 1f fe fe 3f 3f ff ff 1f 1f fe fe     ??......??......
    4773:	3f 3f 1f 1f ff ff 3f 3f 3f 3f 1f 1f ff ff 3f 3f     ??....????....??
    4783:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    4793:	fe fe fe fe fe fe f5 f5 fe fe fe fe fe fe fe f5     ................
    47a3:	fe fe fe fe fe fe fe f5 f5 f5 f5 fe fe fe fe f5     ................
    47b3:	90 90 90 fe fe e1 e1 f5 f5 f5 f5 e1 e1 e1 e1 f5     ................
    47c3:	90 90 90 e1 e1 e1 e1 f5 f5 f5 f5 e1 e1 e1 f0 f0     ................
    47d3:	f5 f5 fe fe fe fe fe fe f5 fe fe fe fe fe fe fe     ................
    47e3:	f5 fe fe fe fe fe fe fe f5 fe fe fe fe f5 f5 f5     ................
    47f3:	f5 e1 e1 fe fe 90 90 90 f5 e1 e1 e1 e1 f5 f5 f5     ................
    4803:	f5 e1 e1 e1 e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5     ................
    4813:	f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90     ................
    4823:	f5 90 f5 90 f5 90 f5 90 fe fe e1 e1 e1 e1 e1 e1     ................
    4833:	fe fe e1 e1 e1 e1 e1 e1 fe fe fe e1 e1 e1 e1 e1     ................
    4843:	fe fe fe fe e1 e1 f0 f0 fe fe fe fe e1 e1 f0 f5     ................
    4853:	f5 90 f5 90 f5 fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    4863:	f5 90 f5 90 f5 fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    4873:	e1 e1 e1 fe fe fe fe fe e1 e1 e1 e1 fe fe fe fe     ................
    4883:	f0 e1 e1 e1 fe fe fe f5 f0 f5 f5 f5 f5 f5 f5 f5     ................
    4893:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    48a3:	fe fe fe ad ad fe fe fe fe fe ad ad ad ad fe fe     ................
    48b3:	fe fe ad ad ad ad fe fe fe fe fe ad ad fe fe fe     ................
    48c3:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    48d3:	fe fe fe ad ad fe fe fe fe fe fe ad ad fe fe fe     ................
    48e3:	fe fe ad ad ad ad fe fe fe fe ad ad ad ad fe fe     ................
    48f3:	fe ad ad ad ad ad ad fe fe fe 3f 3f 3f 3f fe fe     ..........????..
    4903:	fe fe fe 3f 3f fe fe fe fe fe fe fe fe fe fe fe     ...??...........
    4913:	fe fe fe ad ad fe fe fe fe fe fe ad ad fe fe fe     ................
    4923:	fe fe ad ad ad ad fe fe fe fe ad ad ad ad fe fe     ................
    4933:	fe ad ad ad ad ad ad fe fe fe fe 3f 3f fe fe fe     ...........??...
    4943:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4953:	fe fe fe fe fe fe fe fe fe fe fe ad fe fe fe fe     ................
    4963:	fe fe 3f ad ad ad fe fe fe 3f 3f ad ad ad ad ad     ..?......??.....
    4973:	fe 3f 3f ad ad ad ad ad fe fe 3f ad ad ad fe fe     .??.......?.....
    4983:	fe fe fe ad fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4993:	fe fe fe fe fe fe fe fe fe fe fe ad fe fe fe fe     ................
    49a3:	fe fe fe ad ad ad fe fe fe fe 3f ad ad ad ad ad     ..........?.....
    49b3:	fe fe 3f ad ad ad ad ad fe fe fe ad ad ad fe fe     ..?.............
    49c3:	fe fe fe ad fe fe fe fe fe fe fe fe fe fe fe fe     ................
    49d3:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    49e3:	fe fe fe 9f 9f fe fe fe fe fe 9f 9f 9f 9f fe fe     ................
    49f3:	fe fe 9f 9f 9f 9f fe fe fe fe fe 9f 9f fe fe fe     ................
    4a03:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4a13:	90 90 90 e1 e1 e1 f0 f5 f5 f5 f5 e1 e1 e1 f0 f0     ................
    4a23:	90 90 90 e1 e1 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1 e1     ................
    4a33:	90 90 90 e1 e1 e1 fe fe f5 f5 f5 e1 e1 fe fe fe     ................
    4a43:	90 90 90 fe fe fe fe fe f5 f5 f5 fe fe fe fe fe     ................
    4a53:	f5 f0 e1 e1 e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5     ................
    4a63:	e1 e1 e1 e1 e1 90 90 90 e1 e1 e1 e1 e1 f5 f5 f5     ................
    4a73:	fe fe e1 e1 e1 90 90 90 fe fe fe e1 e1 f5 f5 f5     ................
    4a83:	fe fe fe fe fe 90 90 90 fe fe fe fe fe f5 f5 f5     ................
    4a93:	fe fe fe fe e1 e1 f0 f5 fe fe fe fe e1 e1 f0 f0     ................
    4aa3:	fe fe fe e1 e1 e1 e1 e1 fe fe e1 e1 e1 e1 e1 e1     ................
    4ab3:	fe fe e1 e1 e1 e1 e1 e1 f5 90 f5 90 f5 90 f5 90     ................
    4ac3:	f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90     ................
    4ad3:	f0 f5 f5 f5 f5 f5 f5 f5 f0 e1 e1 e1 fe fe fe f5     ................
    4ae3:	e1 e1 e1 e1 fe fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    4af3:	e1 e1 e1 fe fe fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    4b03:	f5 90 f5 90 f5 fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    4b13:	fe fe fe fe fe fe fe fe fe fe fe fe ff fe fe fe     ................
    4b23:	fe fe fe fe 7f ff fe fe fe fe fe fe 7f 7f ff fe     ................
    4b33:	fe fe fe fe 7f 7f 7f ff fe fe fe fe 7f 7f 7f fe     ................
    4b43:	fe fe fe fe 7f 7f fe fe fe fe fe fe 7f fe fe fe     ................
    4b53:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4b63:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4b73:	7f 7f 7f 7f 7f 7f ff fe fe 7f 7f 7f 7f ff fe fe     ................
    4b83:	fe fe 7f 7f ff fe fe fe fe fe fe fe fe fe fe fe     ................
    4b93:	fe fe fe ff fe fe fe fe fe fe ff 7f 7f fe fe fe     ................
    4ba3:	fe ff 7f 7f 7f 7f fe fe ff 7f 7f 7f 7f 7f 7f fe     ................
    4bb3:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4bc3:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4bd3:	4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a     JJJJJJJJJJJJJJJJ
    4be3:	4a 4a 4a a6 a6 4a 4a 4a 4a 4a 4a a6 a6 4a 4a 4a     JJJ..JJJJJJ..JJJ
    4bf3:	fe 4a 4a a6 a6 4a 4a fe fe fe 4a a6 a6 4a fe fe     .JJ..JJ...J..J..
    4c03:	fe fe fe a6 a6 fe fe fe fe fe fe a6 a6 fe fe fe     ................
    4c13:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4c23:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4c33:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4c43:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................

00004c53 <map_sub_turret>:
    4c53:	01 01 23                                            ..#

00004c56 <map_sub_shot>:
    4c56:	01 01 1b                                            ...

00004c59 <map_up_arrow>:
    4c59:	01 01 22                                            .."

00004c5c <map_down_arrow>:
    4c5c:	01 01 21                                            ..!

00004c5f <map_right_arrow>:
    4c5f:	01 01 20                                            .. 

00004c62 <map_rocket_right_1>:
    4c62:	01 01 1a                                            ...

00004c65 <map_rocket_right_0>:
    4c65:	01 01 19                                            ...

00004c68 <map_rocket_up_1>:
    4c68:	01 01 18                                            ...

00004c6b <map_rocket_up_0>:
    4c6b:	01 01 17                                            ...

00004c6e <map_ball>:
    4c6e:	01 01 16                                            ...

00004c71 <map_explosion_2>:
    4c71:	02 02 08 09 09 08                                   ......

00004c77 <map_explosion_1>:
    4c77:	02 02 06 07 10 11                                   ......

00004c7d <map_explosion_0>:
    4c7d:	02 02 04 05 0e 0f                                   ......

00004c83 <map_tank2_right_0>:
    4c83:	02 02 14 15 1e 1f                                   ......

00004c89 <map_tank2_up_0>:
    4c89:	02 02 12 13 1c 1d                                   ......

00004c8f <map_tank1_right_0>:
    4c8f:	02 02 02 03 0c 0d                                   ......

00004c95 <map_tank1_up_0>:
    4c95:	02 02 00 01 0a 0b                                   ......

00004c9b <map_tank_blank>:
    4c9b:	02 02 24 24 24 24                                   ..$$$$

00004ca1 <map_none>:
    4ca1:	01 01 24                                            ..$

00004ca4 <tiles_data>:
	...
    4ce4:	66 66 66 26 66 66 66 66 77 77 77 26 77 77 77 77     fff&ffffwww&wwww
    4cf4:	77 77 77 26 77 77 77 77 77 77 77 26 77 77 77 77     www&wwwwwww&wwww
    4d04:	26 26 26 26 26 26 26 26 77 77 77 77 77 77 77 26     &&&&&&&&wwwwwww&
    4d14:	77 77 77 77 77 77 77 26 77 77 77 77 77 77 77 26     wwwwwww&wwwwwww&
    4d24:	00 d2 d2 d2 d2 d2 d2 00 d2 ff ff ff ff ff ff d2     ................
    4d34:	d2 d2 ff ff ff ff f6 d2 d2 d2 d2 ff ff f6 d2 d2     ................
    4d44:	d2 d2 d2 ff f6 d2 d2 d2 d2 d2 ff f6 d2 d2 d2 d2     ................
    4d54:	d2 d2 d2 d2 d2 d2 d2 d2 00 d2 d2 d2 d2 d2 d2 00     ................
    4d64:	00 d2 d2 d2 d2 d2 d2 00 d2 ff d2 d2 d2 d2 ff d2     ................
    4d74:	d2 d2 ff d2 d2 ff d2 d2 d2 d2 d2 3f 3f d2 d2 d2     ...........??...
    4d84:	d2 d2 d2 3f 3f d2 d2 d2 d2 d2 ff d2 d2 ff d2 d2     ...??...........
    4d94:	d2 ff d2 d2 d2 d2 ff d2 00 d2 d2 d2 d2 d2 d2 00     ................
    4da4:	00 d2 d2 d2 d2 d2 d2 00 d2 d2 d2 d2 d2 d2 ff d2     ................
    4db4:	d2 d2 d2 d2 ff ff d2 d2 d2 d2 d2 ff ff ff d2 d2     ................
    4dc4:	d2 ff f6 ff ff d2 d2 d2 d2 d2 ff f6 d2 d2 d2 d2     ................
    4dd4:	d2 3f d2 ff d2 d2 d2 d2 00 d2 d2 d2 d2 d2 d2 00     .?..............
    4de4:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 04     ................
    4df4:	05 05 05 05 05 05 04 04 05 05 05 07 07 04 04 04     ................
    4e04:	05 05 05 07 07 04 04 04 05 05 05 04 04 04 04 04     ................
    4e14:	05 05 04 04 04 04 04 04 05 04 04 04 04 04 04 04     ................
	...
    4e2c:	00 ff 00 3f 00 00 ff 00 00 00 ff 3f 00 ff 00 00     ...?.......?....
    4e3c:	00 00 3f 3f 3f 3f 3f 00 00 3f 3f 3f 3f 3f 00 00     ..?????..?????..
    4e4c:	00 00 ff 00 3f ff 00 00 00 ff 00 00 3f 00 ff 00     ....?.......?...
	...
    4e64:	3f 3f 00 00 00 00 3f 3f 3f ff 1f 3f 00 1f ff 3f     ??....???..?...?
    4e74:	00 1f ff 3f 00 ff 3f 00 00 00 3f 3f 3f 3f 3f 00     ...?..?...?????.
    4e84:	00 3f 3f 3f 3f 3f 00 00 00 1f ff 00 3f ff 1f 00     .?????......?...
    4e94:	3f ff 1f 00 3f 1f ff 3f 3f 3f 00 00 00 00 3f 3f     ?...?..???....??
	...
    4eac:	00 ff 00 00 00 00 ff 00 00 00 ff 00 00 ff 00 00     ................
	...
    4ecc:	00 00 ff 00 00 ff 00 00 00 ff 00 00 00 00 ff 00     ................
	...
    4ee4:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 00     ................
    4ef4:	05 05 05 05 05 05 00 00 05 05 05 07 07 00 00 00     ................
    4f04:	05 05 05 07 00 00 00 00 05 05 05 00 00 00 00 00     ................
    4f14:	05 05 00 00 00 00 00 00 05 00 00 00 00 00 00 00     ................
    4f24:	00 00 00 00 00 00 00 04 00 00 00 00 00 00 04 04     ................
    4f34:	00 00 00 00 00 04 04 04 00 00 00 00 07 04 04 04     ................
    4f44:	00 00 00 07 07 04 04 04 00 00 04 04 04 04 04 04     ................
    4f54:	00 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    4f64:	05 05 05 05 05 05 05 05 00 05 05 05 05 05 05 05     ................
    4f74:	00 00 05 05 05 05 05 05 00 00 00 07 07 05 05 05     ................
    4f84:	00 00 00 00 07 05 05 05 00 00 00 00 00 05 05 05     ................
    4f94:	00 00 00 00 00 00 05 05 00 00 00 00 00 00 00 05     ................
    4fa4:	04 00 00 00 00 00 00 00 04 04 00 00 00 00 00 00     ................
    4fb4:	04 04 04 00 00 00 00 00 04 04 04 07 00 00 00 00     ................
    4fc4:	04 04 04 07 07 00 00 00 04 04 04 04 04 04 00 00     ................
    4fd4:	04 04 04 04 04 04 04 00 04 04 04 04 04 04 04 04     ................
    4fe4:	f0 f3 f0 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5     ................
    4ff4:	f4 f5 f5 f4 f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0     ................
    5004:	f3 f0 f2 f3 f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0     ................
    5014:	f5 f4 f4 f5 f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0     ................
    5024:	18 64 18 18 64 18 18 64 18 62 64 18 18 64 62 18     .d..d..d.bd..db.
    5034:	18 64 18 62 64 18 64 18 64 18 62 18 18 62 18 62     .d.bd.d.d.b..b.b
    5044:	18 64 18 64 62 18 64 18 64 18 64 18 18 62 18 18     .d.db.d.d.d..b..
    5054:	18 64 18 62 64 18 64 18 18 18 18 64 18 18 18 64     .d.bd.d....d...d
    5064:	65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65     eeeeeeeeeeeeeeee
    5074:	16 65 65 65 65 65 65 16 16 16 65 65 65 65 16 16     .eeeeee...eeee..
    5084:	16 16 16 16 16 16 16 16 16 14 14 14 14 14 14 16     ................
    5094:	14 65 65 65 65 65 65 14 65 65 65 65 65 65 65 65     .eeeeee.eeeeeeee
    50a4:	f0 f3 f0 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5     ................
    50b4:	f4 f5 f5 f4 f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0     ................
    50c4:	f3 f0 f2 f3 f0 f0 f3 f0 f0 f5 ff ff ff ff f5 f0     ................
    50d4:	f5 ff ff ff ff ff ff f5 f0 f0 ff ff ff ff f3 f0     ................
    50e4:	f0 f3 f0 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5     ................
    50f4:	f4 f5 f5 4a 4a 4a f5 f4 f0 f0 4a 4a bf bf 4a f0     ...JJJ....JJ..J.
    5104:	f3 f0 4a 4a bf bf 4a f0 f0 f5 ff 4a 4a 4a f5 f0     ..JJ..J....JJJ..
    5114:	f5 ff ff ff ff ff ff f5 f0 f0 ff ff ff ff f3 f0     ................
    5124:	f0 f3 f0 4a 4a 4a f3 f0 f5 f0 4a 4a bf bf 4a f5     ...JJJ....JJ..J.
    5134:	f4 f5 4a 4a bf bf 4a f4 f0 f0 f3 4a 4a 4a f0 f0     ..JJ..J....JJJ..
    5144:	f3 f0 f2 4a 4a f0 f3 f0 f0 f5 ff 4a 4a ff f5 f0     ...JJ......JJ...
    5154:	f5 ff ff ff ff ff ff f5 f0 f0 ff ff ff ff f3 f0     ................
    5164:	7f 7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28     .........(((((((
    5174:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    5184:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    5194:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    51a4:	7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28 28     ........((((((((
    51b4:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    51c4:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    51d4:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
	...
    5204:	7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28 28     ........((((((((
    5214:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    5224:	00 00 00 00 00 00 7f 7f 00 00 00 00 00 00 7f 28     ...............(
    5234:	00 00 00 00 00 00 7f 28 00 00 00 00 00 00 7f 28     .......(.......(
    5244:	00 00 00 00 00 00 7f 28 00 00 00 00 00 00 7f 28     .......(.......(
    5254:	00 00 00 00 00 00 7f 28 00 00 00 00 00 00 7f 28     .......(.......(
    5264:	7f 7f 7f 7f 7f 7f 00 00 28 28 28 28 28 28 00 00     ........((((((..
    5274:	28 28 28 28 28 28 00 00 28 28 28 28 28 28 00 00     ((((((..((((((..
    5284:	28 28 28 28 28 28 00 00 28 28 28 28 28 28 00 00     ((((((..((((((..
    5294:	28 28 28 28 28 28 00 00 28 28 28 28 28 28 00 00     ((((((..((((((..
    52a4:	00 00 00 00 00 00 2b 2b 00 00 00 00 00 00 00 2b     ......++.......+
    52b4:	00 00 00 00 00 00 00 2b 2b 2b 2b 00 00 00 00 2b     .......++++....+
    52c4:	12 12 12 00 00 20 20 2b 2b 2b 2b 20 20 20 20 2b     .....  ++++    +
    52d4:	12 12 12 20 20 20 20 2b 2b 2b 2b 20 20 20 29 29     ...    ++++   ))
    52e4:	2b 2b 00 00 00 00 00 00 2b 00 00 00 00 00 00 00     ++......+.......
    52f4:	2b 00 00 00 00 00 00 00 2b 00 00 00 00 2b 2b 2b     +.......+....+++
    5304:	2b 20 20 00 00 12 12 12 2b 20 20 20 20 2b 2b 2b     +  .....+    +++
    5314:	2b 20 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +    ...))   +++
    5324:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    5334:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    5344:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    5354:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    5364:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    5374:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
	...
    53a4:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    53b4:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    53c4:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    53d4:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    53e4:	7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28 28 28     .......(((((((((
    53f4:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    5404:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    5414:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    5424:	28 28 28 28 28 28 00 00 00 00 00 00 00 00 00 00     ((((((..........
	...
    5464:	00 00 f5 90 f5 90 f5 90 00 00 f5 90 f5 90 f5 90     ................
    5474:	00 00 f5 90 f5 90 f5 90 00 00 00 00 e1 e1 e1 e1     ................
    5484:	00 00 00 00 e1 e1 e1 e1 00 00 00 00 00 e1 e1 e1     ................
    5494:	00 00 00 00 00 00 e1 e1 00 00 00 00 00 00 e1 e1     ................
    54a4:	f5 90 f5 90 f5 90 f5 00 f5 90 f5 90 f5 90 f5 00     ................
    54b4:	f5 90 f5 90 f5 90 f5 00 e1 e1 e1 e1 e1 00 00 00     ................
    54c4:	e1 e1 e1 e1 e1 00 00 00 e1 e1 e1 e1 e1 e1 00 00     ................
    54d4:	f0 f0 f0 e1 e1 e1 00 00 f0 f5 f0 f5 f5 f5 f5 f5     ................
	...
    5514:	00 f5 00 00 00 00 00 00 f5 f5 00 00 00 00 00 00     ................
	...
    554c:	7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28 28     ........((((((((
    555c:	28 28 28 28 28 28 28 28 12 12 12 20 20 20 29 2b     ((((((((...   )+
    556c:	2b 2b 2b 20 20 20 29 29 12 12 12 20 20 20 20 20     +++   ))...     
    557c:	2b 2b 2b 20 20 20 20 20 12 12 12 20 20 20 00 00     +++     ...   ..
    558c:	2b 2b 2b 20 20 00 00 00 12 12 12 00 00 00 00 00     +++  ...........
    559c:	2b 2b 2b 00 00 00 00 00 2b 29 20 20 20 12 12 12     +++.....+)   ...
    55ac:	29 29 20 20 20 2b 2b 2b 20 20 20 20 20 12 12 12     ))   +++     ...
    55bc:	20 20 20 20 20 2b 2b 2b 00 00 20 20 20 12 12 12          +++..   ...
    55cc:	00 00 00 20 20 2b 2b 2b 00 00 00 00 00 12 12 12     ...  +++........
    55dc:	00 00 00 00 00 2b 2b 2b 7f 28 28 28 28 28 28 28     .....+++.(((((((
    55ec:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    55fc:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    560c:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    561c:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    562c:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    563c:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    564c:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    565c:	28 28 28 28 28 28 28 28 00 00 00 00 00 00 e1 e1     ((((((((........
    566c:	00 00 00 00 00 00 e1 e1 00 00 00 00 00 e1 e1 e1     ................
    567c:	00 00 00 00 e1 e1 e1 e1 00 00 00 00 e1 e1 e1 e1     ................
    568c:	00 00 f5 90 f5 90 f5 90 00 00 f5 90 f5 90 f5 90     ................
    569c:	00 00 f5 90 f5 90 f5 90 f0 f5 f0 f5 f5 f5 f5 f5     ................
    56ac:	f0 f0 f0 e1 e1 e1 00 00 e1 e1 e1 e1 e1 e1 00 00     ................
    56bc:	e1 e1 e1 e1 e1 00 00 00 e1 e1 e1 e1 e1 00 00 00     ................
    56cc:	f5 90 f5 90 f5 90 f5 00 f5 90 f5 90 f5 90 f5 00     ................
    56dc:	f5 90 f5 90 f5 90 f5 00 f5 f5 00 00 00 00 00 00     ................
    56ec:	00 f5 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5724:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    5734:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    5744:	28 28 28 28 28 28 28 28 00 00 00 00 00 00 00 00     ((((((((........
	...
    5768:	00 00 f5 f5 00 00 00 00 00 00 00 f5 00 00 00 00     ................
    5778:	00 00 00 f5 f5 f5 f5 00 00 00 00 f5 90 90 90 00     ................
    5788:	00 e1 e1 f5 f5 f5 f5 e1 e1 e1 e1 f5 90 90 90 e1     ................
    5798:	e1 e1 e1 f5 f5 f5 f5 e1 e1 e1 f0 f0 f5 f5 00 00     ................
    57a8:	00 00 00 00 f5 00 00 00 00 00 00 00 f5 00 00 00     ................
    57b8:	00 00 00 00 f5 00 00 00 00 f5 f5 f5 f5 e1 e1 00     ................
    57c8:	00 90 90 90 f5 e1 e1 e1 e1 f5 f5 f5 f5 e1 e1 e1     ................
    57d8:	e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5 00 00 00 00     ................
    57e8:	00 00 7f 28 00 00 00 00 00 00 7f 28 00 00 00 00     ...(.......(....
    57f8:	00 00 7f 28 00 00 00 00 00 00 7f 28 00 00 00 00     ...(.......(....
    5808:	00 00 7f 28 00 00 00 00 00 00 7f 28 00 00 00 00     ...(.......(....
    5818:	00 00 7f 28 00 00 00 00 00 00 7f 28 28 28 28 28     ...(.......(((((
    5828:	28 28 00 00 28 28 28 28 28 28 00 00 28 28 28 28     ((..((((((..((((
    5838:	28 28 00 00 28 28 28 28 28 28 00 00 28 28 28 28     ((..((((((..((((
    5848:	28 28 00 00 28 28 28 28 28 28 00 00 28 28 28 28     ((..((((((..((((
    5858:	28 28 00 00 28 28 28 28 28 28 00 00 00 00 00 00     ((..((((((......
    5868:	00 00 00 00 7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28     ............((((
    5878:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    5888:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    5898:	28 28 28 28 28 28 28 28 28 28 28 28 7f 28 28 28     ((((((((((((.(((
    58a8:	28 28 28 28 7f 28 28 28 28 28 28 28 28 28 28 28     ((((.(((((((((((
    58b8:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    58c8:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    58d8:	28 28 28 28 28 28 28 28 28 28 28 28 90 90 90 e1     ((((((((((((....
    58e8:	e1 e1 f0 f5 f5 f5 f5 e1 e1 e1 f0 f0 90 90 90 e1     ................
    58f8:	e1 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1 e1 90 90 90 e1     ................
    5908:	e1 e1 00 00 f5 f5 f5 e1 e1 00 00 00 90 90 90 00     ................
    5918:	00 00 00 00 f5 f5 f5 00 00 00 00 00 f5 f0 e1 e1     ................
    5928:	e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1     ................
    5938:	e1 90 90 90 e1 e1 e1 e1 e1 f5 f5 f5 00 00 e1 e1     ................
    5948:	e1 90 90 90 00 00 00 e1 e1 f5 f5 f5 00 00 00 00     ................
    5958:	00 90 90 90 00 00 00 00 00 f5 f5 f5 f0 f3 f0 f0     ................
    5968:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    5978:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    5988:	f3 f0 f2 f3 f0 f5 f5 f0 f0 f5 f5 f0 f5 f4 f4 f5     ................
    5998:	f5 f4 f4 f5 f0 f0 f3 f0 f0 f0 f3 f0 f0 f3 f0 f0     ................
    59a8:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    59b8:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    59c8:	f0 f0 f3 f0 f0 f5 f5 e8 e8 e8 e8 e8 f5 f4 f4 e8     ................
    59d8:	e8 e8 f4 f5 f0 f0 f3 e8 e8 e8 f3 f0 f0 f3 f0 f0     ................
    59e8:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    59f8:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    5a08:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 e8 f4 f4 f5     ................
    5a18:	f5 f4 f4 f5 f0 e8 f3 f0 f3 f0 f3 f0 f0 f3 f0 f0     ................
    5a28:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    5a38:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 a3 a3 a3 a3     ................
    5a48:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5a58:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 f0 f3 f0 f0     ................
    5a68:	f3 f0 f3 f0 f5 f0 f0 f5 f0 f3 f0 f0 f4 f5 f5 f4     ................
    5a78:	f5 f0 f0 f5 f0 f0 f3 f0 f0 f3 f0 f0 a3 a3 a3 a3     ................
    5a88:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5a98:	a3 a3 a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 f0 f3 f0 f0     ................
    5aa8:	f3 f0 f3 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 a3     ................
    5ab8:	a3 a3 a3 a3 f0 f0 f3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5ac8:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5ad8:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a4 f0 f3 f0 f0     ................
    5ae8:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 a3 a3 a3 a3     ................
    5af8:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5b08:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5b18:	a3 a3 a3 a4 a4 a4 a4 a4 a4 9a a4 a4 f0 f3 f0 f0     ................
    5b28:	f3 f0 f3 a3 f5 f0 f0 f5 f5 f0 f0 a3 a3 a3 a3 a3     ................
    5b38:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5b48:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a4 a4 a4 a4     ................
    5b58:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a3 a3 a3 a3     ................
    5b68:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5b78:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5b88:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a4 a4 a4 a4     ................
    5b98:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a3 f3 f0 f0     ................
    5ba8:	f3 f0 f3 f0 a3 f0 f0 f5 f5 f0 f0 f5 a3 a3 a3 a3     ................
    5bb8:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5bc8:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a4 a4 a4 a4     ................
    5bd8:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 f0 f3 f0 f0     ................
    5be8:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 a3 a3 a3 a3     ................
    5bf8:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5c08:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a4 a4 a3 a3     ................
    5c18:	a3 a3 a3 a3 a4 a4 a4 9a a4 a4 a4 a4 f0 f3 f0 f0     ................
    5c28:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 a3 a3 a3 a3     ................
    5c38:	a3 f5 f5 f4 a3 a3 a3 a3 a3 f3 f0 f0 a3 a3 a3 a3     ................
    5c48:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5c58:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a4 f0 f3 f0 f0     ................
    5c68:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    5c78:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 a3 a3 a3 a3     ................
    5c88:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5c98:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a3 a3 f0 f3 f0 f0     ................
    5ca8:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    5cb8:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 e8     ................
    5cc8:	e8 e8 e8 e8 f0 f5 f5 e8 e8 e8 e8 f0 f5 f4 f4 e8     ................
    5cd8:	e8 e8 e8 f5 f0 f0 f3 e8 e8 e8 e8 f0 f0 f3 f0 f0     ................
    5ce8:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    5cf8:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 e8 f0 f2 f3     ................
    5d08:	f0 f0 f3 f0 f0 e8 f5 f0 f3 f5 f5 f0 f5 f4 e8 f5     ................
    5d18:	f5 f4 f4 f5 f0 f0 f3 e8 f3 f0 f3 f0 f0 f3 f0 f0     ................
    5d28:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    5d38:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 ff f3 f0 f2 f3     ................
    5d48:	ff ff ff a3 f0 ff ff ff ff ff ff a3 ff f4 f4 a3     ................
    5d58:	a3 a3 a3 a3 f0 f0 a3 a3 a3 a3 a3 a3 f0 f3 f0 f0     ................
    5d68:	f3 ff ff f0 f5 f0 f0 f5 ff ff ff f5 f4 f5 ff ff     ................
    5d78:	ff ff f5 f4 ff ff ff ff ff f3 f0 f0 a3 a3 a3 a3     ................
    5d88:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a     ................
    5d98:	a3 a3 a3 a3 a3 a3 9a 9a 9a a3 a3 a3 f0 f3 f0 e8     ................
    5da8:	e8 e8 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5db8:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5dc8:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5dd8:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 f0 f3 e8 f0     ................
    5de8:	f3 f0 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5df8:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5e08:	a3 a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a3 a4 a4 a4     ................
    5e18:	a4 a4 a4 9a a3 a4 a4 a4 a4 a4 a4 9a f0 f3 f0 f0     ................
    5e28:	f3 f0 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5e38:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5e48:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a a4     ................
    5e58:	a4 a4 a4 a4 9a 9a 9a a4 a4 a4 a4 a4 f0 f3 f0 f0     ................
    5e68:	f3 f0 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5e78:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5e88:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    5e98:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a3 a3 a3 a3     ................
    5ea8:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5eb8:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5ec8:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    5ed8:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a3 a3 9a a4     ................
    5ee8:	a4 9a 9a a4 a3 a3 a4 a4 a4 a4 a4 a4 a3 a3 9a a4     ................
    5ef8:	a4 9a 9a a4 a3 a3 a4 a4 a4 a4 a4 a4 a3 a3 9a 9a     ................
    5f08:	9a 9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5f18:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    5f28:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    5f38:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    5f48:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5f58:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    5f68:	a4 9a 9a a4 a4 a4 a4 a4 a4 9a a4 a4 a4 9a 9a a4     ................
    5f78:	a4 9a 9a a4 a4 a4 a4 a4 a4 9a a4 a4 9a 9a 9a 9a     ................
    5f88:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5f98:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    5fa8:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    5fb8:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a3 9a 9a 9a 9a     ................
    5fc8:	9a 9a 9a a3 a4 a4 a4 a4 a4 a4 a3 a3 a4 a4 a4 a4     ................
    5fd8:	a4 a3 a3 a3 a4 a4 a4 a4 a4 a3 a3 a3 a4 9a 9a a4     ................
    5fe8:	a3 a3 a3 a3 a4 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5ff8:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    6008:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    6018:	4a a3 a3 a3 a3 a3 a3 4a 4a 4a a3 a3 a3 a3 a3 a4     J......JJJ......
    6028:	a4 9a 9a a4 a3 a3 a3 a3 a4 a4 a4 a4 a3 a3 a3 a0     ................
    6038:	a0 a0 a0 a0 a3 a3 a0 a0 a0 a0 a0 a0 a3 a0 a0 a0     ................
    6048:	a0 a0 a0 a0 a3 a0 a0 a0 a0 a0 a0 a0 a3 a0 a0 a0     ................
    6058:	4a 4a 4a a0 a3 a0 a0 4a 4a 4a 4a 4a a4 9a 9a a4     JJJ....JJJJJ....
    6068:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a0 a0 a0 a4     ................
    6078:	a4 9a 9a a4 a0 a0 a0 a4 a4 a4 a4 a4 a0 a0 a0 a0     ................
    6088:	a0 a0 a0 9a a0 a0 a0 a0 a0 a0 a0 a4 a0 a0 a0 a0     ................
    6098:	a0 a0 a0 9a a0 a0 a0 a0 a0 a0 a0 ad a4 9a 9a a4     ................
    60a8:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    60b8:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    60c8:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    60d8:	a4 a4 a4 a4 ad ad ad ad ad ad ad ad a4 9a 9a 9a     ................
    60e8:	a4 9a 9a a4 a4 a4 a4 9a a4 a4 a4 a4 a4 9a 9a 9a     ................
    60f8:	a4 9a 9a a4 a4 a4 a4 9a a4 a4 a4 a4 9a 9a 9a 9a     ................
    6108:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    6118:	a4 a4 a4 a4 ad ad ad ad ad ad ad ad a4 9a 9a a4     ................
    6128:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    6138:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    6148:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    6158:	a4 a4 9a 9a ad ad ad ad ad ad ad ad a4 9a 9a a4     ................
    6168:	a4 9a a3 a3 a4 a4 a4 a4 a4 a4 9a a3 a4 9a 9a a4     ................
    6178:	a4 9a 9a a3 a4 a4 a4 a4 a4 a4 9a a3 9a 9a 9a 9a     ................
    6188:	9a 9a 9a a3 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    6198:	9a 9a 9a a4 ad ad ad ad ad ad ad ad a3 a3 a3 a3     ................
    61a8:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    61b8:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    61c8:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    61d8:	a4 a4 a4 a4 ad ad ad ad ad ad ad ad f0 f3 f0 f0     ................
    61e8:	f3 f0 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    61f8:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    6208:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    6218:	a4 a4 a4 a4 ad ad ad ad ad ad ad ad f0 f3 f0 e8     ................
    6228:	e8 e8 e8 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    6238:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    6248:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a3 a4 a4 a4 a4     ................
    6258:	a4 a4 a4 a3 ad ad ad ad ad ad ad ad f0 f3 f0 f0     ................
    6268:	e8 f0 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    6278:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    6288:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    6298:	a3 a3 a3 a3 ad ad ad ad ad ad ad ad f0 ff ff f0     ................
    62a8:	f3 f0 f3 f0 f5 ff ff ff f5 f0 f0 f5 f4 f5 ff ff     ................
    62b8:	ff ff f5 f4 f0 f0 f3 f0 f0 ff ff ff a3 a3 a3 a3     ................
    62c8:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    62d8:	a3 a3 a3 a3 ad ad ad ad ad ad ad ad f0 f3 f0 f0     ................
    62e8:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    62f8:	f4 f5 f5 f4 ff f0 f3 f0 f0 f3 f0 f0 a3 ff ff ff     ................
    6308:	f0 f0 f3 f0 a3 ff ff ff ff ff ff f0 a3 a3 a3 a3     ................
    6318:	a3 f4 f4 ff ad ad ad ad ad 9a 9a f0 f0 f3 a3 a3     ................
    6328:	a3 a3 a3 a3 ff f0 f0 a3 a3 a3 a3 a3 f4 ff ff ff     ................
    6338:	ff ff ff a3 f0 ff ff ff ff ff ff 9a f3 f0 f2 f3     ................
    6348:	f0 f0 f3 ff f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6358:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a3 a3 9a 9a     ................
    6368:	9a a3 a3 a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 a3     ................
    6378:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a ff 9a 9a 9a     ................
    6388:	9a 9a 9a 9a f0 f5 ff ff ff ff f5 9a f5 f4 f4 f5     ................
    6398:	f5 ff ff 9a f0 f0 f3 f0 f3 ff ff 9a a3 a3 a3 a3     ................
    63a8:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    63b8:	a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3     ................
    63c8:	a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    63d8:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a4 a4 a4     ................
    63e8:	a4 a4 a4 9a a3 a4 a4 a4 a4 a4 a4 9a a3 a4 a4 a4     ................
    63f8:	a4 a4 a4 a4 a3 a3 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    6408:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    6418:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a4     ................
    6428:	a4 a4 a4 a4 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    6438:	a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    6448:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    6458:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    6468:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    6478:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    6488:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    6498:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    64a8:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    64b8:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    64c8:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3     ................
    64d8:	a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 a4 a4 a4 a4     ................
    64e8:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a a4 a4 a4     ................
    64f8:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a4 a4     ................
    6508:	a4 a4 a4 a4 a3 a3 9a a4 a4 9a 9a a4 a3 a3 a4 a4     ................
    6518:	a4 a4 a4 a4 a3 a3 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    6528:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    6538:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    6548:	a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    6558:	a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    6568:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    6578:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    6588:	a4 9a a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    6598:	a4 9a a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    65a8:	a4 a3 a3 a3 a4 a4 a4 a4 a4 a3 a3 a3 a4 a4 a4 a4     ................
    65b8:	a4 a4 9a a3 9a 9a 9a 9a 9a 9a 9a a3 a4 a4 a4 a4     ................
    65c8:	a4 a4 9a 9a a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4     ................
    65d8:	a4 a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a3 a3 a3 4a     ...............J
    65e8:	4a 4a a3 a3 a3 a3 a3 a3 4a a3 a3 a3 a3 a3 a3 a3     JJ......J.......
    65f8:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    6608:	a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    6618:	a3 a3 a3 a3 a4 9a 9a 9a 9a 9a 9a 9a a3 a0 a0 4a     ...............J
    6628:	4a 4a 4a 4a a3 a0 a0 a0 4a 4a 4a a0 a3 a0 a0 a0     JJJJ....JJJ.....
    6638:	a0 a0 a0 a0 a3 a0 a0 a0 a0 a0 a0 a0 a3 a3 9a a0     ................
    6648:	a0 a0 a0 a0 a3 a3 a3 9a 9a 9a 9a 9a a3 a3 a3 9a     ................
    6658:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a4 a0 a0 a0 a0     ................
    6668:	a0 a0 a0 9a a0 a0 a0 a0 a0 a0 9a a4 a0 a0 a0 a0     ................
    6678:	a0 a0 9a 9a a0 a0 9a 9a 9a 9a 9a 9a a0 a0 9a 9a     ................
    6688:	9a 9a 9a 9a 9a 9a 9a 9a a4 9a 9a a4 9a 9a 9a a4     ................
    6698:	a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    66a8:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    66b8:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 9a     ................
    66c8:	a4 a4 a4 a4 a4 9a 9a 9a a4 9a 9a a4 a4 a4 a4 9a     ................
    66d8:	a4 a4 a4 a4 a4 9a 9a 9a a4 9a 9a a4 a4 a4 a4 a4     ................
    66e8:	a4 a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    66f8:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    6708:	a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    6718:	a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4 9a 9a 9a 9a     ................
    6728:	9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    6738:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    6748:	a4 a4 a3 a3 a4 9a 9a a4 a4 9a a3 a3 a4 a4 a4 a4     ................
    6758:	a4 a4 9a a3 a4 9a 9a a4 a4 9a 9a a3 a4 a4 a4 a4     ................
    6768:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    6778:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    6788:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    6798:	a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a a4 a4 a4 a4     ................
    67a8:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    67b8:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    67c8:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    67d8:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    67e8:	a4 a4 a4 9a a4 a4 a4 a4 a4 a4 a4 9a a4 a4 a4 a4     ................
    67f8:	a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    6808:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    6818:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    6828:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    6838:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3 a3     ................
    6848:	a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a 9a     ................
    6858:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    6868:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    6878:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    6888:	9a 9a 9a 9a 9a f5 ff ff ff ff f5 f0 9a ff ff ff     ................
    6898:	ff f4 f4 f5 9a ff ff f0 f3 f0 f3 f0 a3 a3 a3 a3     ................
    68a8:	a3 9a 9a f0 9a 9a 9a 9a 9a 9a 9a ff 9a 9a 9a 9a     ................
    68b8:	9a ff ff f4 9a 9a ff ff ff f3 f0 f0 9a 9a f2 f3     ................
    68c8:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    68d8:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 e8     ................
    68e8:	e8 e8 f3 f0 f5 f0 f0 e8 e8 e8 f0 f5 f4 f5 f5 e8     ................
    68f8:	e8 e8 e8 e8 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    6908:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6918:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 e8 f0 f0     ................
    6928:	f3 f0 f3 f0 e8 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    6938:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    6948:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6958:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 f0     ................
    6968:	f3 f0 f3 9a f5 f0 f0 f5 f5 f0 f0 9a f4 f5 f5 f4     ................
    6978:	f4 f5 f5 9a f0 f0 f3 f0 f0 f3 f0 9a f3 f0 f2 f3     ................
    6988:	f3 f0 f2 9a f0 f5 f5 f0 f0 f5 f5 f0 f5 f4 f4 f5     ................
    6998:	f5 f4 f4 f5 f0 f0 f3 f0 f0 f0 f3 f0 9a a3 a3 a3     ................
    69a8:	a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3     ................
    69b8:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    69c8:	9a 9a 9a 9a f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    69d8:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a3 a3 a4 a4     ................
    69e8:	a4 a4 a4 a4 a3 a3 a3 a3 9a 9a 9a 9a a3 a3 a3 a3     ................
    69f8:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    6a08:	9a 9a 9a 9a f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6a18:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    6a28:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    6a38:	a3 a3 a3 a3 9a 9a 9a 9a a3 a3 a3 a3 9a 9a 9a 9a     ................
    6a48:	a3 a3 a3 a3 f0 f5 9a 9a 9a 9a 9a 9a f5 f4 9a 9a     ................
    6a58:	9a 9a 9a 9a f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    6a68:	a4 9a a4 a4 9a 9a 9a 9a 9a 9a 9a a4 a3 a3 a3 a3     ................
    6a78:	a3 a3 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    6a88:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    6a98:	9a 9a 9a 9a f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    6aa8:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    6ab8:	9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    6ac8:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    6ad8:	9a 9a 9a 9a f0 f0 f3 f0 f3 f0 9a 9a a4 a4 a4 a4     ................
    6ae8:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    6af8:	9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    6b08:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    6b18:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    6b28:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    6b38:	9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    6b48:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    6b58:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    6b68:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    6b78:	9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    6b88:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    6b98:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    6ba8:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    6bb8:	9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    6bc8:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    6bd8:	9a 9a 9a 9a 9a 9a f3 f0 f3 f0 f3 f0 a4 a4 a4 9a     ................
    6be8:	a4 a4 a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a 9a a3     ................
    6bf8:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    6c08:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    6c18:	9a 9a 9a 9a f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    6c28:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    6c38:	a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a a3 a3 a3 a3     ................
    6c48:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a f5 f0 9a 9a 9a 9a     ................
    6c58:	9a 9a f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    6c68:	a4 a4 9a a3 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3 a3     ................
    6c78:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    6c88:	9a 9a 9a 9a f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6c98:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a3 a3 a3 a3     ................
    6ca8:	a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3 a3     ................
    6cb8:	a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    6cc8:	9a 9a 9a 9a f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6cd8:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 9a f3 f0 f0     ................
    6ce8:	f3 f0 f3 f0 9a f0 f0 f5 f5 f0 f0 f5 9a f5 f5 f4     ................
    6cf8:	f4 f5 f5 f4 9a f0 f3 f0 f0 f3 f0 f0 9a f0 f2 f3     ................
    6d08:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6d18:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 e8     ................
    6d28:	e8 e8 e8 f0 f5 f0 f0 e8 e8 e8 e8 f5 f4 f5 f5 e8     ................
    6d38:	e8 e8 e8 f4 f0 f0 f3 e8 e8 e8 e8 e8 f3 f0 f2 f3     ................
    6d48:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6d58:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 e8     ................
    6d68:	f3 f0 f3 f0 f5 f0 e8 f5 f5 f0 f0 f5 f4 e8 f5 f4     ................
    6d78:	f4 f5 f5 f4 e8 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    6d88:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6d98:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 f0     ................
    6da8:	f3 f0 9a 9a f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    6db8:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    6dc8:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6dd8:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 9a 9a 9a 9a     ................
    6de8:	9a 9a 9a 9a f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    6df8:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    6e08:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6e18:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 9a 9a f0 f0     ................
    6e28:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    6e38:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    6e48:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6e58:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 f0     ................
    6e68:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    6e78:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 e8 e8 e8 e8     ................
    6e88:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6e98:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    6ea8:	f3 f0 f3 f0 f5 f0 f0 f5 f0 f3 f0 f0 f4 f5 f5 f4     ................
    6eb8:	f5 f0 f0 f5 f0 f0 f3 f0 f0 f3 f0 f0 e8 e8 e8 e8     ................
    6ec8:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6ed8:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    6ee8:	f3 f0 f3 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 e8     ................
    6ef8:	e8 e8 e8 e8 f0 f0 f3 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6f08:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6f18:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    6f28:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 e8 e8 e8 e8     ................
    6f38:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6f48:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6f58:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    6f68:	f3 f0 f3 e8 f5 f0 f0 f5 f5 f0 f0 e8 e8 e8 e8 e8     ................
    6f78:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6f88:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6f98:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6fa8:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6fb8:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6fc8:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6fd8:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f3 f0 f0     ................
    6fe8:	f3 f0 f3 f0 e8 f0 f0 f5 f5 f0 f0 f5 e8 e8 e8 e8     ................
    6ff8:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    7008:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    7018:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    7028:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 e8 e8 e8 e8     ................
    7038:	e8 f5 f5 f4 e8 e8 e8 e8 e8 f3 f0 f0 e8 e8 e8 e8     ................
    7048:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    7058:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    7068:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    7078:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    7088:	f0 f0 f3 e8 f0 f5 f5 f0 f3 f5 f5 e8 f5 f4 f4 e8     ................
    7098:	e8 e8 e8 e8 f0 f0 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    70a8:	f3 f0 f3 f0 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    70b8:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    70c8:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    70d8:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    70e8:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    70f8:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 e8 f0 f2 f3     ................
    7108:	f0 f0 f3 f0 e8 f5 f5 f0 f3 f5 f5 f0 e8 e8 e8 e8     ................
    7118:	e8 f4 f4 f5 e8 e8 e8 e8 e8 e8 f3 f0 f0 f3 e8 e8     ................
    7128:	e8 e8 e8 e8 f5 f0 f0 e8 e8 e8 e8 e8 f4 f5 f5 f4     ................
    7138:	f4 f5 f5 e8 f0 f0 f3 f0 f0 f3 f0 e8 f3 f0 f2 f3     ................
    7148:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    7158:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    7168:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    7178:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f3 f0 f2 f3     ................
    7188:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    7198:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    71a8:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    71b8:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    71c8:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    71d8:	e8 e8 e8 e8 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    71e8:	e8 e8 f3 f0 e8 e8 e8 e8 e8 f0 f0 f5 e8 f5 f5 f4     ................
    71f8:	f4 f5 f5 f4 e8 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    7208:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    7218:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    7228:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    7238:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f3 f0 f2 e8     ................
    7248:	e8 e8 e8 e8 f0 f5 f5 e8 e8 e8 e8 e8 f5 f4 f4 f5     ................
    7258:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    7268:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    7278:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    7288:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f5 f4 f4 f5     ................
    7298:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    72a8:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    72b8:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    72c8:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f5 f4 f4 f5     ................
    72d8:	f5 f4 f4 e8 f0 f0 f3 f0 f3 f0 f3 e8 e8 e8 e8 e8     ................
    72e8:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    72f8:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    7308:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f4 f4 f5     ................
    7318:	f5 f4 f4 f5 e8 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    7328:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    7338:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    7348:	e8 f0 f3 f0 e8 e8 e8 e8 e8 f5 f5 f0 f5 f4 f4 f5     ................
    7358:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 00 00 00 00     ................
	...
    73ac:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    73bc:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    73d4:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    73ec:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    73fc:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    742c:	00 ff ff 00 00 ff ff 00 ff ff ff ff ff ff ff ff     ................
    743c:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    744c:	ff ff ff ff ff ff ff ff 00 ff ff 00 00 ff ff 00     ................
	...
    7464:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff ff 00     ................
    7474:	00 ff ff 00 00 00 00 00 00 00 ff ff ff ff 00 00     ................
    7484:	00 00 00 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    7494:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    74ac:	00 ff ff 00 00 ff ff 00 00 ff ff 00 ff ff 00 00     ................
    74bc:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    74cc:	00 ff ff 00 00 ff ff 00 00 ff 00 00 00 ff ff 00     ................
	...
    74e4:	00 00 00 ff ff ff 00 00 00 00 ff ff 00 ff ff 00     ................
    74f4:	00 00 00 ff ff ff 00 00 00 00 ff ff ff 00 00 00     ................
    7504:	00 ff ff 00 ff ff ff ff 00 ff ff 00 00 ff ff 00     ................
    7514:	00 00 ff ff ff 00 ff ff 00 00 00 00 00 00 00 00     ................
	...
    752c:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    753c:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    7570:	ff ff ff 00 00 00 00 ff ff ff 00 00 00 00 00 ff     ................
    7580:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
    7590:	ff ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 00     ................
	...
    75ac:	00 ff ff ff 00 00 00 00 00 00 ff ff ff 00 00 00     ................
    75bc:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    75cc:	00 00 ff ff ff 00 00 00 00 ff ff ff 00 00 00 00     ................
	...
    75ec:	00 df df 00 00 df df 00 00 00 df df df df 00 00     ................
    75fc:	df df df df df df df df 00 00 df df df df 00 00     ................
    760c:	00 df df 00 00 df df 00 00 00 00 00 00 00 00 00     ................
	...
    762c:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    763c:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    764c:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    768c:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    769c:	00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    76bc:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    770c:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    7730:	00 ff ff 00 00 00 00 00 ff ff 00 00 00 00 00 ff     ................
    7740:	ff 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff 00     ................
    7750:	00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    776c:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    777c:	00 6f 6f 00 6f 6f 6f 00 00 6f 6f 6f 00 6f 6f 00     .oo.ooo..ooo.oo.
    778c:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    77ac:	00 00 00 6f 6f 00 00 00 00 00 6f 6f 6f 00 00 00     ...oo.....ooo...
    77bc:	00 00 00 6f 6f 00 00 00 00 00 00 6f 6f 00 00 00     ...oo......oo...
    77cc:	00 00 00 6f 6f 00 00 00 00 6f 6f 6f 6f 6f 6f 00     ...oo....oooooo.
	...
    77ec:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    77fc:	00 00 00 00 6f 6f 00 00 00 00 00 6f 6f 00 00 00     ....oo.....oo...
    780c:	00 00 6f 6f 00 00 00 00 00 6f 6f 6f 6f 6f 6f 00     ..oo.....oooooo.
	...
    782c:	00 6f 6f 6f 6f 6f 6f 00 00 00 00 00 6f 6f 00 00     .oooooo.....oo..
    783c:	00 00 00 6f 6f 00 00 00 00 00 00 00 6f 6f 00 00     ...oo.......oo..
    784c:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    7870:	6f 6f 00 00 00 00 00 6f 6f 6f 00 00 00 00 6f 6f     oo.....ooo....oo
    7880:	6f 6f 00 00 00 6f 6f 00 6f 6f 00 00 00 6f 6f 6f     oo...oo.oo...ooo
    7890:	6f 6f 6f 00 00 00 00 00 6f 6f 00 00 00 00 00 00     ooo.....oo......
	...
    78ac:	00 6f 6f 6f 6f 6f 6f 00 00 6f 6f 00 00 00 00 00     .oooooo..oo.....
    78bc:	00 6f 6f 6f 6f 6f 00 00 00 00 00 00 00 6f 6f 00     .ooooo.......oo.
    78cc:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    78ec:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 00 00 00     ..oooo...oo.....
    78fc:	00 6f 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     .ooooo...oo..oo.
    790c:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    792c:	00 6f 6f 6f 6f 6f 6f 00 00 00 00 00 00 6f 6f 00     .oooooo......oo.
    793c:	00 00 00 00 6f 6f 00 00 00 00 00 6f 6f 00 00 00     ....oo.....oo...
    794c:	00 00 6f 6f 00 00 00 00 00 00 6f 6f 00 00 00 00     ..oo......oo....
	...
    796c:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    797c:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    798c:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    79ac:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    79bc:	00 00 6f 6f 6f 6f 6f 00 00 00 00 00 00 6f 6f 00     ..ooooo......oo.
    79cc:	00 00 00 00 6f 6f 00 00 00 00 6f 6f 6f 00 00 00     ....oo....ooo...
	...
    79f4:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    7a0c:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    7a24:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    7a34:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    7a44:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    7a54:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    7a64:	00 00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00     ................
    7a74:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    7a84:	00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00     ................
    7a94:	00 00 00 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    7ab4:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    7acc:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    7ae4:	00 ff ff 00 00 00 00 00 00 00 ff ff 00 00 00 00     ................
    7af4:	00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00     ................
    7b04:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    7b14:	00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    7b2c:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    7b3c:	00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    7b54:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    7b6c:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    7b7c:	00 ff ff 00 ff ff ff 00 00 ff ff 00 ff ff ff 00     ................
    7b8c:	00 ff ff 00 00 00 00 00 00 00 ff ff ff ff ff 00     ................
	...
    7bac:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    7bbc:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    7bcc:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    7bec:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    7bfc:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    7c0c:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
	...
    7c2c:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    7c3c:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    7c4c:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    7c6c:	00 ff ff ff ff 00 00 00 00 ff ff 00 ff ff 00 00     ................
    7c7c:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    7c8c:	00 ff ff 00 ff ff 00 00 00 ff ff ff ff 00 00 00     ................
	...
    7cac:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    7cbc:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    7ccc:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    7cec:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    7cfc:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    7d0c:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    7d2c:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    7d3c:	00 ff ff 00 00 00 00 00 00 ff ff 00 ff ff ff 00     ................
    7d4c:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
	...
    7d6c:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    7d7c:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    7d8c:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    7dac:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    7dbc:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    7dcc:	00 00 00 ff ff 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    7df0:	ff ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    7e00:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 ff ff 00     ................
    7e10:	00 ff ff 00 00 00 ff ff ff ff 00 00 00 00 00 00     ................
	...
    7e2c:	00 ff ff 00 00 ff ff 00 00 ff ff 00 ff ff 00 00     ................
    7e3c:	00 ff ff ff ff 00 00 00 00 ff ff ff ff 00 00 00     ................
    7e4c:	00 ff ff 00 ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
	...
    7e6c:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    7e7c:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    7e8c:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    7eac:	00 ff ff 00 00 00 ff ff 00 ff ff ff 00 ff ff ff     ................
    7ebc:	00 ff ff ff ff ff ff ff 00 ff ff 00 ff 00 ff ff     ................
    7ecc:	00 ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff     ................
	...
    7eec:	00 ff ff 00 00 ff ff 00 00 ff ff ff 00 ff ff 00     ................
    7efc:	00 ff ff ff ff ff ff 00 00 ff ff ff ff ff ff 00     ................
    7f0c:	00 ff ff 00 ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    7f2c:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    7f3c:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    7f4c:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    7f6c:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    7f7c:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    7f8c:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    7fac:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    7fbc:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    7fcc:	00 ff ff 00 ff ff 00 00 00 00 ff ff 00 ff ff 00     ................
	...
    7fec:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    7ffc:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    800c:	00 ff ff 00 ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
	...
    802c:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    803c:	00 00 ff ff ff ff 00 00 00 00 00 00 00 ff ff 00     ................
    804c:	00 00 00 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    806c:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    807c:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    808c:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    80ac:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    80bc:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    80cc:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff ff 00     ................
	...
    80ec:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    80fc:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    810c:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    812c:	00 ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff     ................
    813c:	00 ff ff 00 ff 00 ff ff 00 ff ff ff ff ff ff ff     ................
    814c:	00 ff ff ff 00 ff ff ff 00 ff ff 00 00 00 ff ff     ................
	...
    816c:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    817c:	00 00 ff ff ff ff 00 00 00 00 ff ff ff ff 00 00     ................
    818c:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    81ac:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    81bc:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
    81cc:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    81ec:	00 ff ff ff ff ff ff 00 00 00 00 00 ff ff 00 00     ................
    81fc:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    820c:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    822c:	00 00 00 ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    823c:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    824c:	00 00 00 ff ff 00 00 00 00 00 00 ff ff ff ff 00     ................
	...
    826c:	00 ff 00 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    827c:	00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00 00     ................
    828c:	00 00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00     ................
	...
    82ac:	00 ff ff ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    82bc:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    82cc:	00 00 00 ff ff 00 00 00 00 ff ff ff ff 00 00 00     ................
	...
    82f0:	ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 ff ff     ................
    8300:	00 ff ff 00 00 ff ff 00 00 00 ff ff 00 00 00 00     ................
	...
    8354:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................

00008364 <map_sub_emerging>:
    8364:	1c 0b 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    8374:	0d 0d 0d 0d 0d 0d 33 0d 0d 0d 0d 0d 0d 0d 0d 0d     ......3.........
    8384:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    8394:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    83a4:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    83b4:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 87 88 89     ................
    83c4:	8a 8b 8c 8c 8c 8c 8d 8a 8e 87 87 0d 0d 0d 0d 0d     ................
    83d4:	0d 0d 0d 8f 87 90 90 90 90 8c 8c 8c 8c 8c 8c 8c     ................
    83e4:	8c 8c 8c 8c 8c 8c 8c 90 90 90 90 87 91 0d 0d 92     ................
    83f4:	93 94 94 94 94 8c 8c 8c 8c 8c 8c 8c 8c 8c 8c 8c     ................
    8404:	8c 8c 8c 94 94 94 94 93 95 0d 0d 0d 0d 0d 0d 0d     ................
    8414:	33 93 93 96 97 98 8c 8c 8c 8c 99 97 9a 93 93 0d     3...............
    8424:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    8434:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 33 0d 0d 0d 0d 0d     ..........3.....
    8444:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    8454:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    8464:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    8474:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    8484:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    8494:	0d 0d 0d 0d 0d 0d                                   ......

0000849a <map_sub>:
    849a:	1c 0b 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    84aa:	0d 0d 0d 0d 0d 0d 33 0d 0d 0d 0d 0d 0d 0d 0d 0d     ......3.........
    84ba:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    84ca:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    84da:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    84ea:	0d 0d 0d 0d 0d 0d 0d 0d 0d 34 35 0d 0d 36 37 38     .........45..678
    84fa:	39 3a 3b 3b 3b 3b 3c 3d 3e 3f 36 0d 0d 40 41 0d     9:;;;;<=>?6..@A.
    850a:	0d 0d 0d 42 43 44 45 46 47 48 49 4a 4b 4a 4c 4d     ...BCDEFGHIJKJLM
    851a:	4e 4f 50 51 52 53 54 55 55 56 57 58 59 0d 0d 5a     NOPQRSTUUVWXY..Z
    852a:	5b 5c 5d 5e 5f 60 61 62 63 62 64 65 66 67 62 68     [\]^_`abcbdefgbh
    853a:	69 6a 6b 6c 6c 6d 6e 6f 70 0d 0d 0d 0d 71 72 0d     ijkllmnop....qr.
    854a:	73 74 75 76 77 78 79 7a 7b 79 7c 7d 7e 7f 80 81     stuvwxyz{y|}~...
    855a:	0d 82 83 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    856a:	0d 84 85 85 85 85 86 0d 0d 0d 33 0d 0d 0d 0d 0d     ..........3.....
    857a:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    858a:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    859a:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    85aa:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    85ba:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    85ca:	0d 0d 0d 0d 0d 0d                                   ......

000085d0 <map_scope_2>:
    85d0:	01 01 12                                            ...

000085d3 <map_scope_1>:
    85d3:	01 01 11                                            ...

000085d6 <map_scope_0>:
    85d6:	01 01 10                                            ...

000085d9 <map_blue_tank>:
    85d9:	02 02 2b 2c 31 32                                   ..+,12

000085df <map_green_tank>:
    85df:	02 02 18 19 23 24                                   ....#$

000085e5 <map_fence>:
    85e5:	01 01 0f                                            ...

000085e8 <map_turf>:
    85e8:	01 01 0e                                            ...

000085eb <map_water>:
    85eb:	01 01 0d                                            ...

000085ee <map_metal_bl>:
    85ee:	01 01 0c                                            ...

000085f1 <map_metal_tr>:
    85f1:	01 01 0b                                            ...

000085f4 <map_metal_br>:
    85f4:	01 01 0a                                            ...

000085f7 <map_metal_tl>:
    85f7:	01 01 09                                            ...

000085fa <map_tile_exp_2>:
    85fa:	01 01 08                                            ...

000085fd <map_tile_exp_1>:
    85fd:	01 01 07                                            ...

00008600 <map_tile_exp_0>:
    8600:	01 01 06                                            ...

00008603 <map_rocket_itm>:
    8603:	01 01 04                                            ...

00008606 <map_explode_itm>:
    8606:	01 01 03                                            ...

00008609 <map_speed_itm>:
    8609:	01 01 02                                            ...

0000860c <map_metal>:
    860c:	01 01 05                                            ...

0000860f <map_brick>:
    860f:	01 01 01                                            ...

00008612 <map_splash>:
    8612:	15 04 13 14 14 13 14 14 13 15 15 13 16 17 00 00     ................
    8622:	00 13 14 14 13 00 13 00 1a 00 1a 00 1a 1a 1b 1c     ................
    8632:	1a 1d 1e 1f 20 21 1a 22 00 1a 00 1a 00 1a 00 1a     .... !."........
    8642:	14 25 1a 00 1a 1a 26 00 27 28 29 1a 2a 00 1a 00     .%....&.'().*...
    8652:	1a 00 1a 00 1a 00 1a 1a 00 1a 1a 2d 2e 00 00 00     ...........-....
    8662:	1a 00 00 1a 2f 30                                   ..../0

00008668 <map_pause>:
    8668:	0f 04 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    8678:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
    8688:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01     ................
    8698:	01 01 01 01 01 01 01 01 01 01 01 01 01 01           ..............

000086a6 <map_tile_none>:
    86a6:	01 01 00 00                                         ....

000086aa <__ctors_end>:
    86aa:	11 24       	eor	r1, r1
    86ac:	1f be       	out	0x3f, r1	; 63
    86ae:	cf ef       	ldi	r28, 0xFF	; 255
    86b0:	d0 e1       	ldi	r29, 0x10	; 16
    86b2:	de bf       	out	0x3e, r29	; 62
    86b4:	cd bf       	out	0x3d, r28	; 61

000086b6 <__do_copy_data>:
    86b6:	11 e0       	ldi	r17, 0x01	; 1
    86b8:	a0 e0       	ldi	r26, 0x00	; 0
    86ba:	b1 e0       	ldi	r27, 0x01	; 1
    86bc:	ee e7       	ldi	r30, 0x7E	; 126
    86be:	f1 ef       	ldi	r31, 0xF1	; 241
    86c0:	02 c0       	rjmp	.+4      	; 0x86c6 <__do_copy_data+0x10>
    86c2:	05 90       	lpm	r0, Z+
    86c4:	0d 92       	st	X+, r0
    86c6:	a6 30       	cpi	r26, 0x06	; 6
    86c8:	b1 07       	cpc	r27, r17
    86ca:	d9 f7       	brne	.-10     	; 0x86c2 <__do_copy_data+0xc>

000086cc <__do_clear_bss>:
    86cc:	10 e1       	ldi	r17, 0x10	; 16
    86ce:	a6 e0       	ldi	r26, 0x06	; 6
    86d0:	b1 e0       	ldi	r27, 0x01	; 1
    86d2:	01 c0       	rjmp	.+2      	; 0x86d6 <.do_clear_bss_start>

000086d4 <.do_clear_bss_loop>:
    86d4:	1d 92       	st	X+, r1

000086d6 <.do_clear_bss_start>:
    86d6:	a6 3a       	cpi	r26, 0xA6	; 166
    86d8:	b1 07       	cpc	r27, r17
    86da:	e1 f7       	brne	.-8      	; 0x86d4 <.do_clear_bss_loop>

000086dc <wdt_init>:

void wdt_init(void)
{

#if TRUE_RANDOM_GEN == 1	
	wdt_randomize();
    86dc:	0e 94 32 48 	call	0x9064	; 0x9064 <wdt_randomize>
#endif

    MCUSR = 0;
    86e0:	14 be       	out	0x34, r1	; 52
    wdt_disable();
    86e2:	88 e1       	ldi	r24, 0x18	; 24
    86e4:	0f b6       	in	r0, 0x3f	; 63
    86e6:	f8 94       	cli
    86e8:	80 93 60 00 	sts	0x0060, r24
    86ec:	10 92 60 00 	sts	0x0060, r1
    86f0:	0f be       	out	0x3f, r0	; 63

000086f2 <Initialize>:


void Initialize(void){
	int i;

	if(!isEepromFormatted()) FormatEeprom();
    86f2:	0e 94 f4 48 	call	0x91e8	; 0x91e8 <isEepromFormatted>
    86f6:	81 11       	cpse	r24, r1
    86f8:	02 c0       	rjmp	.+4      	; 0x86fe <Initialize+0xc>
    86fa:	0e 94 d2 48 	call	0x91a4	; 0x91a4 <FormatEeprom>

	cli();
    86fe:	f8 94       	cli
		mix_bank=0;
	#endif
	
	#if MIXER_CHAN4_TYPE == 0
		//initialize LFSR		
		tr4_barrel_lo=1;
    8700:	81 e0       	ldi	r24, 0x01	; 1
    8702:	80 93 16 0b 	sts	0x0B16, r24
		tr4_barrel_hi=1;		
    8706:	80 93 17 0b 	sts	0x0B17, r24
		tr4_params=0b00000001; //15 bits no divider (1)
    870a:	80 93 15 0b 	sts	0x0B15, r24
		snesMouseEnabled=false;
	#endif

	//silence all sound channels
	for(i=0;i<CHANNELS;i++){
		mixer.channels.all[i].volume=0;
    870e:	10 92 02 0b 	sts	0x0B02, r1
    8712:	10 92 08 0b 	sts	0x0B08, r1
    8716:	10 92 0e 0b 	sts	0x0B0E, r1
    871a:	10 92 14 0b 	sts	0x0B14, r1
    871e:	10 92 1a 0b 	sts	0x0B1A, r1
	}
	
	//set sync parameters. starts at odd field, in pre-eq pulses, line 1, vsync flag cleared
	sync_phase=0;
    8722:	10 92 e6 0a 	sts	0x0AE6, r1
	sync_flags=0;
    8726:	10 92 e8 0a 	sts	0x0AE8, r1
	sync_pulse=SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES;
    872a:	92 e1       	ldi	r25, 0x12	; 18
    872c:	90 93 e7 0a 	sts	0x0AE7, r25

	//set rendering parameters
	render_lines_count=FRAME_LINES;
    8730:	90 ee       	ldi	r25, 0xE0	; 224
    8732:	90 93 ee 0a 	sts	0x0AEE, r25
	first_render_line=FIRST_RENDER_LINE;
    8736:	94 e1       	ldi	r25, 0x14	; 20
    8738:	90 93 ed 0a 	sts	0x0AED, r25

	joypad1_status_hi=0;
    873c:	10 92 f2 0a 	sts	0x0AF2, r1
    8740:	10 92 f1 0a 	sts	0x0AF1, r1
	joypad2_status_hi=0;
    8744:	10 92 f6 0a 	sts	0x0AF6, r1
    8748:	10 92 f5 0a 	sts	0x0AF5, r1
	sound_enabled=1;
    874c:	80 93 01 0b 	sts	0x0B01, r24

	InitializeVideoMode();
    8750:	0e 94 01 56 	call	0xac02	; 0xac02 <InitializeVideoMode>
    8754:	80 e7       	ldi	r24, 0x70	; 112
    8756:	90 e0       	ldi	r25, 0x00	; 0
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
		val=pgm_read_word(&io_table[j]);
    8758:	fc 01       	movw	r30, r24
    875a:	25 91       	lpm	r18, Z+
    875c:	34 91       	lpm	r19, Z
		ptr=(u8*)(val&0xff);
    875e:	f9 01       	movw	r30, r18
    8760:	ff 27       	eor	r31, r31
		*ptr=val>>8;	
    8762:	30 83       	st	Z, r19
    8764:	02 96       	adiw	r24, 0x02	; 2
	InitializeVideoMode();
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
    8766:	20 e0       	ldi	r18, 0x00	; 0
    8768:	8e 39       	cpi	r24, 0x9E	; 158
    876a:	92 07       	cpc	r25, r18
    876c:	a9 f7       	brne	.-22     	; 0x8758 <Initialize+0x66>
		val=pgm_read_word(&io_table[j]);
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;	
	}

	sei();
    876e:	78 94       	sei
	
	DisplayLogo();
    8770:	0e 94 c0 56 	call	0xad80	; 0xad80 <DisplayLogo>
    8774:	0e 94 d5 75 	call	0xebaa	; 0xebaa <main>
    8778:	0c 94 bd 78 	jmp	0xf17a	; 0xf17a <_exit>

0000877c <__bad_interrupt>:
    877c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00008780 <sub_video_mode3>:
	; Mode 3 with NO scrolling
	;***************************************************	
	sub_video_mode3:

		;wait cycles to align with next hsync
		WAIT r16,465 //30-3+340+98
    8780:	0b e9       	ldi	r16, 0x9B	; 155
    8782:	0a 95       	dec	r16
    8784:	f1 f7       	brne	.-4      	; 0x8782 <sub_video_mode3+0x2>

		;Refresh ramtiles indexes in VRAM
		;This has to be done because the main
		;program may have altered the VRAM
		;after vsync and the rendering interrupt.
		lds r16,userRamTilesCount
    8786:	00 91 25 0b 	lds	r16, 0x0B25

		ldi ZL,lo8(ram_tiles_restore);
    878a:	e0 e9       	ldi	r30, 0x90	; 144
		ldi ZH,hi8(ram_tiles_restore);
    878c:	fa e0       	ldi	r31, 0x0A	; 10
		ldi r18,3
    878e:	23 e0       	ldi	r18, 0x03	; 3
		mul r16,r18
    8790:	02 9f       	mul	r16, r18
		add ZL,r0
    8792:	e0 0d       	add	r30, r0
		adc ZH,r1
    8794:	f1 1d       	adc	r31, r1

		ldi YL,lo8(vram)
    8796:	c0 e2       	ldi	r28, 0x20	; 32
		ldi YH,hi8(vram)
    8798:	d1 e0       	ldi	r29, 0x01	; 1

		lds r18,free_tile_index
    879a:	20 91 c7 0b 	lds	r18, 0x0BC7
		ldi r19,MAX_RAMTILES		;maximum possible ramtiles
    879e:	3c e3       	ldi	r19, 0x3C	; 60
		sub r19,r18					;sub free tile
    87a0:	32 1b       	sub	r19, r18
		add r19,r16					;add user tiles
    87a2:	30 0f       	add	r19, r16

		cp r18,r16
    87a4:	20 17       	cp	r18, r16
		breq no_ramtiles
    87a6:	51 f0       	breq	.+20     	; 0x87bc <no_ramtiles>
		nop
    87a8:	00 00       	nop
	...

000087ac <upd_loop>:
		nop
upd_loop:
		ld XL,Z+	;load vram offset of ramtile
    87ac:	a1 91       	ld	r26, Z+
		ld XH,Z+
    87ae:	b1 91       	ld	r27, Z+

		ld r17,X	;get latest VRAM tile that may have been modified my
    87b0:	1c 91       	ld	r17, X
		st Z+,r17	;the main program and store it in the restore buffer
    87b2:	11 93       	st	Z+, r17
		st X,r16	;write the ramtile index back to vram
    87b4:	0c 93       	st	X, r16

		inc r16
    87b6:	03 95       	inc	r16
		cp r16,r18
    87b8:	02 17       	cp	r16, r18
		brlo upd_loop ;loop is 14 cycles
    87ba:	c0 f3       	brcs	.-16     	; 0x87ac <upd_loop>

000087bc <no_ramtiles>:

no_ramtiles:
		;wait for remaining maximum possible ramtiles
1:
		ldi r17,3
    87bc:	13 e0       	ldi	r17, 0x03	; 3
		dec r17
    87be:	1a 95       	dec	r17
		brne .-4
    87c0:	f1 f7       	brne	.-4      	; 0x87be <no_ramtiles+0x2>
		rjmp .
    87c2:	00 c0       	rjmp	.+0      	; 0x87c4 <no_ramtiles+0x8>
		dec r19
    87c4:	3a 95       	dec	r19
		brne 1b
    87c6:	d1 f7       	brne	.-12     	; 0x87bc <no_ramtiles>


		lds r2,overlay_tile_table
    87c8:	20 90 e4 0a 	lds	r2, 0x0AE4
		lds r3,overlay_tile_table+1
    87cc:	30 90 e5 0a 	lds	r3, 0x0AE5
		lds r16,tile_table_lo 
    87d0:	00 91 e0 0a 	lds	r16, 0x0AE0
		lds r17,tile_table_hi
    87d4:	10 91 e1 0a 	lds	r17, 0x0AE1
		movw r12,r16
    87d8:	68 01       	movw	r12, r16
		movw r6,r16
    87da:	38 01       	movw	r6, r16

		ldi r24,SCREEN_TILES_V
    87dc:	8c e1       	ldi	r24, 0x1C	; 28
		ldi YL,lo8(vram)
    87de:	c0 e2       	ldi	r28, 0x20	; 32
		ldi YH,hi8(vram)
    87e0:	d1 e0       	ldi	r29, 0x01	; 1
		movw r8,YL	
    87e2:	4e 01       	movw	r8, r28
		clr r0
    87e4:	00 24       	eor	r0, r0

		;load values for overlay if it's activated (overlay_height>0)
		lds r19,overlay_height	
    87e6:	30 91 e3 0a 	lds	r19, 0x0AE3
		cpi r19,0
    87ea:	30 30       	cpi	r19, 0x00	; 0
		
		breq .+2
    87ec:	09 f0       	breq	.+2      	; 0x87f0 <no_ramtiles+0x34>
		ldi YL,lo8(overlay_vram)
    87ee:	c8 e6       	ldi	r28, 0x68	; 104
		
		breq .+2
    87f0:	09 f0       	breq	.+2      	; 0x87f4 <no_ramtiles+0x38>
		ldi YH,hi8(overlay_vram)
    87f2:	d4 e0       	ldi	r29, 0x04	; 4
		
		breq .+2
    87f4:	09 f0       	breq	.+2      	; 0x87f8 <no_ramtiles+0x3c>
		mov r24,r19
    87f6:	83 2f       	mov	r24, r19

		breq .+2
    87f8:	09 f0       	breq	.+2      	; 0x87fc <no_ramtiles+0x40>
		movw r12,r2
    87fa:	61 01       	movw	r12, r2


		ldi r16,SCREEN_TILES_V*TILE_HEIGHT; total scanlines to draw (28*8)
    87fc:	00 ee       	ldi	r16, 0xE0	; 224
		mov r10,r16
    87fe:	a0 2e       	mov	r10, r16
		clr r22
    8800:	66 27       	eor	r22, r22
		ldi r23,TILE_WIDTH ;tile width in pixels
    8802:	78 e0       	ldi	r23, 0x08	; 8

00008804 <next_tile_line>:
	;r12:r13= Main tile table or overlay tile table if overlay_height>0
	;r24	= vertical tiles to draw before reloading vram adress (for overlay)
	;Y      = vram or overlay_ram if overlay_height>0
	;
	next_tile_line:	
		rcall hsync_pulse
    8804:	0b d3       	rcall	.+1558   	; 0x8e1c <hsync_pulse>

		WAIT r19,250 - AUDIO_OUT_HSYNC_CYCLES + CENTER_ADJUSTMENT + FILL_DELAY
    8806:	3c e0       	ldi	r19, 0x0C	; 12
    8808:	3a 95       	dec	r19
    880a:	f1 f7       	brne	.-4      	; 0x8808 <next_tile_line+0x4>
    880c:	00 00       	nop
    880e:	00 00       	nop

		;***draw line***
		call render_tile_line
    8810:	0e 94 39 44 	call	0x8872	; 0x8872 <render_tile_line>

		WAIT r19,47 + FILL_DELAY - CENTER_ADJUSTMENT	
    8814:	3f e0       	ldi	r19, 0x0F	; 15
    8816:	3a 95       	dec	r19
    8818:	f1 f7       	brne	.-4      	; 0x8816 <next_tile_line+0x12>
    881a:	00 00       	nop
    881c:	00 00       	nop

		dec r10
    881e:	aa 94       	dec	r10
		breq frame_end
    8820:	a9 f0       	breq	.+42     	; 0x884c <frame_end>
	
		inc r22
    8822:	63 95       	inc	r22
		lpm ;3 nop
    8824:	c8 95       	lpm

		cpi r22,TILE_HEIGHT ;last char line? 1
    8826:	68 30       	cpi	r22, 0x08	; 8
		breq next_tile_row 
    8828:	31 f0       	breq	.+12     	; 0x8836 <next_tile_row>
	
		;wait to align with next_tile_row instructions (+1 cycle for the breq)
		WAIT r19,11
    882a:	33 e0       	ldi	r19, 0x03	; 3
    882c:	3a 95       	dec	r19
    882e:	f1 f7       	brne	.-4      	; 0x882c <next_tile_line+0x28>
    8830:	00 00       	nop
    8832:	00 00       	nop
		
		rjmp next_tile_line	
    8834:	e7 cf       	rjmp	.-50     	; 0x8804 <next_tile_line>

00008836 <next_tile_row>:

	next_tile_row:
		clr r22		;current char line			;1	
    8836:	66 27       	eor	r22, r22

		clr r0
    8838:	00 24       	eor	r0, r0
		ldi r19,VRAM_TILES_H
    883a:	3e e1       	ldi	r19, 0x1E	; 30
		add YL,r19
    883c:	c3 0f       	add	r28, r19
		adc YH,r0
    883e:	d0 1d       	adc	r29, r0

		dec r24		;overlay done?
    8840:	8a 95       	dec	r24
		brne .+2
    8842:	09 f4       	brne	.+2      	; 0x8846 <next_tile_row+0x10>
		movw YL,r8	;main vram
    8844:	e4 01       	movw	r28, r8
		brne .+2
    8846:	09 f4       	brne	.+2      	; 0x884a <next_tile_row+0x14>
		movw r12,r6	;main tile table
    8848:	63 01       	movw	r12, r6

	
		rjmp next_tile_line
    884a:	dc cf       	rjmp	.-72     	; 0x8804 <next_tile_line>

0000884c <frame_end>:

	frame_end:

		WAIT r19,18
    884c:	36 e0       	ldi	r19, 0x06	; 6
    884e:	3a 95       	dec	r19
    8850:	f1 f7       	brne	.-4      	; 0x884e <frame_end+0x2>

		rcall hsync_pulse ;145
    8852:	e4 d2       	rcall	.+1480   	; 0x8e1c <hsync_pulse>
	
		clr r1
    8854:	11 24       	eor	r1, r1
		call RestoreBackground
    8856:	0e 94 80 54 	call	0xa900	; 0xa900 <RestoreBackground>

		;set vsync flag & flip field
		lds ZL,sync_flags
    885a:	e0 91 e8 0a 	lds	r30, 0x0AE8
		ldi r20,SYNC_FLAG_FIELD
    885e:	42 e0       	ldi	r20, 0x02	; 2
		ori ZL,SYNC_FLAG_VSYNC
    8860:	e1 60       	ori	r30, 0x01	; 1
		eor ZL,r20
    8862:	e4 27       	eor	r30, r20
		sts sync_flags,ZL
    8864:	e0 93 e8 0a 	sts	0x0AE8, r30

		;clear any pending timer int
		ldi ZL,(1<<OCF1A)
    8868:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIFR1),ZL
    886a:	e0 93 36 00 	sts	0x0036, r30



		clr r1
    886e:	11 24       	eor	r1, r1


		ret
    8870:	08 95       	ret

00008872 <render_tile_line>:
	;*************************************************
	render_tile_line:

		;load first tile and determine if its a ROM or RAM tile

		movw XL,YL
    8872:	de 01       	movw	r26, r28

		mul r22,r23
    8874:	67 9f       	mul	r22, r23

		movw r16,r12 ;current tile table (main or overlay)
    8876:	86 01       	movw	r16, r12
		subi r16,lo8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    8878:	00 50       	subi	r16, 0x00	; 0
		sbci r17,hi8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    887a:	16 40       	sbci	r17, 0x06	; 6

		add r16,r0
    887c:	00 0d       	add	r16, r0
		adc r17,r1
    887e:	11 1d       	adc	r17, r1
		movw r2,r16			;rom tiles
    8880:	18 01       	movw	r2, r16

		ldi r16,lo8(ram_tiles)
    8882:	00 e9       	ldi	r16, 0x90	; 144
		ldi r17,hi8(ram_tiles)
    8884:	14 e0       	ldi	r17, 0x04	; 4
		add r16,r0
    8886:	00 0d       	add	r16, r0
		adc r17,r1
    8888:	11 1d       	adc	r17, r1
		movw r4,r16			;ram tiles
    888a:	28 01       	movw	r4, r16

		ldi r19,TILE_HEIGHT*TILE_WIDTH
    888c:	30 e4       	ldi	r19, 0x40	; 64
		ldi r17,SCREEN_TILES_H
    888e:	1e e1       	ldi	r17, 0x1E	; 30

	    ld r18,X+     	;load next tile # from VRAM
    8890:	2d 91       	ld	r18, X+

		mul r18,r19 	;tile*width*height
    8892:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles
    8894:	a1 01       	movw	r20, r2
		
		cpi r18,RAM_TILES_COUNT
    8896:	28 31       	cpi	r18, 0x18	; 24
		brcc .+2
    8898:	08 f4       	brcc	.+2      	; 0x889c <render_tile_line+0x2a>
		movw r20,r4		;ram tiles
    889a:	a2 01       	movw	r20, r4

	    add r0,r20    ;add title table address +row offset
    889c:	04 0e       	add	r0, r20
	    adc r1,r21
    889e:	15 1e       	adc	r1, r21

		movw ZL,r0
    88a0:	f0 01       	movw	r30, r0
		
		cpi r18,RAM_TILES_COUNT
    88a2:	28 31       	cpi	r18, 0x18	; 24
		brcs ramloop
    88a4:	f0 f0       	brcs	.+60     	; 0x88e2 <ramloop>

000088a6 <romloop>:
	

	romloop:
	    lpm r16,Z+
    88a6:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    88a8:	08 b9       	out	0x08, r16	; 8
	    ld r18,X+     ;load next tile # from VRAM
    88aa:	2d 91       	ld	r18, X+


	    lpm r16,Z+
    88ac:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 2
    88ae:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    88b0:	23 9f       	mul	r18, r19


	    lpm r16,Z+
    88b2:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 3
    88b4:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT		;is tile in RAM or ROM? (RAM tiles have indexes<RAM_TILES_COUNT)
    88b6:	28 31       	cpi	r18, 0x18	; 24
		nop
    88b8:	00 00       	nop

	    lpm r16,Z+
    88ba:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    88bc:	08 b9       	out	0x08, r16	; 8
		brsh .+2		;skip in next tile is in ROM	
    88be:	08 f4       	brcc	.+2      	; 0x88c2 <romloop+0x1c>
		movw r20,r4 	;load RAM title table address +row offset	
    88c0:	a2 01       	movw	r20, r4
   
	    lpm r16,Z+
    88c2:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 5
    88c4:	08 b9       	out	0x08, r16	; 8
		add r0,r20		;add title table address +row offset lsb
    88c6:	04 0e       	add	r0, r20
	    adc r1,r21		;add title table address +row offset msb
    88c8:	15 1e       	adc	r1, r21

	    lpm r16,Z+
    88ca:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 6
    88cc:	08 b9       	out	0x08, r16	; 8
		
		cpi r18,RAM_TILES_COUNT	
    88ce:	28 31       	cpi	r18, 0x18	; 24
		dec r17			;decrement tiles to draw on line
    88d0:	1a 95       	dec	r17
   
	    lpm r16,Z+
    88d2:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 7   
    88d4:	08 b9       	out	0x08, r16	; 8
	    lpm r16,Z+
    88d6:	05 91       	lpm	r16, Z+

		breq end	
    88d8:	31 f1       	breq	.+76     	; 0x8926 <end>
	    movw ZL,r0   	;copy next tile adress
    88da:	f0 01       	movw	r30, r0

	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    88dc:	08 b9       	out	0x08, r16	; 8
	    brcc romloop
    88de:	18 f7       	brcc	.-58     	; 0x88a6 <romloop>
	
		rjmp .
    88e0:	00 c0       	rjmp	.+0      	; 0x88e2 <ramloop>

000088e2 <ramloop>:

	ramloop:

	    ld r16,Z+
    88e2:	01 91       	ld	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    88e4:	08 b9       	out	0x08, r16	; 8
	    ld r18,X+     ;load next tile # from VRAM
    88e6:	2d 91       	ld	r18, X+

	    ld r16,Z+ 
    88e8:	01 91       	ld	r16, Z+
		nop   
    88ea:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16 		;pixel 2
    88ec:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    88ee:	23 9f       	mul	r18, r19


	    ld r16,Z+
    88f0:	01 91       	ld	r16, Z+
		nop
    88f2:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16         ;pixel 3
    88f4:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    88f6:	28 31       	cpi	r18, 0x18	; 24
   		rjmp .
    88f8:	00 c0       	rjmp	.+0      	; 0x88fa <ramloop+0x18>

	    ld r16,Z+
    88fa:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    88fc:	08 b9       	out	0x08, r16	; 8
		brcs .+2 
    88fe:	08 f0       	brcs	.+2      	; 0x8902 <ramloop+0x20>
		movw r20,r2 	;ROM title table address +row offset	
    8900:	a1 01       	movw	r20, r2
   
   
	    ld r16,Z+
    8902:	01 91       	ld	r16, Z+
	    add r0,r20    ;add title table address +row offset
    8904:	04 0e       	add	r0, r20
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 5
    8906:	08 b9       	out	0x08, r16	; 8
	    adc r1,r21
    8908:	15 1e       	adc	r1, r21
		rjmp .
    890a:	00 c0       	rjmp	.+0      	; 0x890c <ramloop+0x2a>
    
		ld r16,Z+		
    890c:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 6
    890e:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    8910:	28 31       	cpi	r18, 0x18	; 24
		rjmp .  
    8912:	00 c0       	rjmp	.+0      	; 0x8914 <ramloop+0x32>

	    ld r16,Z+	
    8914:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16      ;pixel 7   
    8916:	08 b9       	out	0x08, r16	; 8
	    ld r16,Z+
    8918:	01 91       	ld	r16, Z+

	    dec r17
    891a:	1a 95       	dec	r17
	    breq end
    891c:	21 f0       	breq	.+8      	; 0x8926 <end>
	
		movw ZL,r0
    891e:	f0 01       	movw	r30, r0
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    8920:	08 b9       	out	0x08, r16	; 8
	
	    brcc romloop
    8922:	08 f6       	brcc	.-126    	; 0x88a6 <romloop>
		rjmp ramloop
    8924:	de cf       	rjmp	.-68     	; 0x88e2 <ramloop>

00008926 <end>:
	
	end:
		out _SFR_IO_ADDR(DATA_PORT),r16  	;pixel 8
    8926:	08 b9       	out	0x08, r16	; 8
		clr r16	
    8928:	00 27       	eor	r16, r16
		lpm	
    892a:	c8 95       	lpm
		nop
    892c:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16        
    892e:	08 b9       	out	0x08, r16	; 8

		ret
    8930:	08 95       	ret

00008932 <CopyFlashTile>:
; C-callable
; r24=Source ROM tile index
; r22=Dest RAM tile index
;************************************
CopyFlashTile:
	ldi r18,TILE_HEIGHT*TILE_WIDTH
    8932:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	lds ZL,tile_table_lo
    8934:	e0 91 e0 0a 	lds	r30, 0x0AE0
	lds ZH,tile_table_hi
    8938:	f0 91 e1 0a 	lds	r31, 0x0AE1
	mul r24,r18
    893c:	82 9f       	mul	r24, r18
	add ZL,r0
    893e:	e0 0d       	add	r30, r0
	adc ZH,r1
    8940:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    8942:	a0 e9       	ldi	r26, 0x90	; 144
	ldi XH,hi8(ram_tiles)
    8944:	b4 e0       	ldi	r27, 0x04	; 4
	mul r22,r18
    8946:	62 9f       	mul	r22, r18
	add XL,r0
    8948:	a0 0d       	add	r26, r0
	adc XH,r1
    894a:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	lpm r1,Z+
	st X+,r1
.endr
    894c:	15 90       	lpm	r1, Z+
    894e:	1d 92       	st	X+, r1
    8950:	15 90       	lpm	r1, Z+
    8952:	1d 92       	st	X+, r1
    8954:	15 90       	lpm	r1, Z+
    8956:	1d 92       	st	X+, r1
    8958:	15 90       	lpm	r1, Z+
    895a:	1d 92       	st	X+, r1
    895c:	15 90       	lpm	r1, Z+
    895e:	1d 92       	st	X+, r1
    8960:	15 90       	lpm	r1, Z+
    8962:	1d 92       	st	X+, r1
    8964:	15 90       	lpm	r1, Z+
    8966:	1d 92       	st	X+, r1
    8968:	15 90       	lpm	r1, Z+
    896a:	1d 92       	st	X+, r1
    896c:	15 90       	lpm	r1, Z+
    896e:	1d 92       	st	X+, r1
    8970:	15 90       	lpm	r1, Z+
    8972:	1d 92       	st	X+, r1
    8974:	15 90       	lpm	r1, Z+
    8976:	1d 92       	st	X+, r1
    8978:	15 90       	lpm	r1, Z+
    897a:	1d 92       	st	X+, r1
    897c:	15 90       	lpm	r1, Z+
    897e:	1d 92       	st	X+, r1
    8980:	15 90       	lpm	r1, Z+
    8982:	1d 92       	st	X+, r1
    8984:	15 90       	lpm	r1, Z+
    8986:	1d 92       	st	X+, r1
    8988:	15 90       	lpm	r1, Z+
    898a:	1d 92       	st	X+, r1
    898c:	15 90       	lpm	r1, Z+
    898e:	1d 92       	st	X+, r1
    8990:	15 90       	lpm	r1, Z+
    8992:	1d 92       	st	X+, r1
    8994:	15 90       	lpm	r1, Z+
    8996:	1d 92       	st	X+, r1
    8998:	15 90       	lpm	r1, Z+
    899a:	1d 92       	st	X+, r1
    899c:	15 90       	lpm	r1, Z+
    899e:	1d 92       	st	X+, r1
    89a0:	15 90       	lpm	r1, Z+
    89a2:	1d 92       	st	X+, r1
    89a4:	15 90       	lpm	r1, Z+
    89a6:	1d 92       	st	X+, r1
    89a8:	15 90       	lpm	r1, Z+
    89aa:	1d 92       	st	X+, r1
    89ac:	15 90       	lpm	r1, Z+
    89ae:	1d 92       	st	X+, r1
    89b0:	15 90       	lpm	r1, Z+
    89b2:	1d 92       	st	X+, r1
    89b4:	15 90       	lpm	r1, Z+
    89b6:	1d 92       	st	X+, r1
    89b8:	15 90       	lpm	r1, Z+
    89ba:	1d 92       	st	X+, r1
    89bc:	15 90       	lpm	r1, Z+
    89be:	1d 92       	st	X+, r1
    89c0:	15 90       	lpm	r1, Z+
    89c2:	1d 92       	st	X+, r1
    89c4:	15 90       	lpm	r1, Z+
    89c6:	1d 92       	st	X+, r1
    89c8:	15 90       	lpm	r1, Z+
    89ca:	1d 92       	st	X+, r1
    89cc:	15 90       	lpm	r1, Z+
    89ce:	1d 92       	st	X+, r1
    89d0:	15 90       	lpm	r1, Z+
    89d2:	1d 92       	st	X+, r1
    89d4:	15 90       	lpm	r1, Z+
    89d6:	1d 92       	st	X+, r1
    89d8:	15 90       	lpm	r1, Z+
    89da:	1d 92       	st	X+, r1
    89dc:	15 90       	lpm	r1, Z+
    89de:	1d 92       	st	X+, r1
    89e0:	15 90       	lpm	r1, Z+
    89e2:	1d 92       	st	X+, r1
    89e4:	15 90       	lpm	r1, Z+
    89e6:	1d 92       	st	X+, r1
    89e8:	15 90       	lpm	r1, Z+
    89ea:	1d 92       	st	X+, r1
    89ec:	15 90       	lpm	r1, Z+
    89ee:	1d 92       	st	X+, r1
    89f0:	15 90       	lpm	r1, Z+
    89f2:	1d 92       	st	X+, r1
    89f4:	15 90       	lpm	r1, Z+
    89f6:	1d 92       	st	X+, r1
    89f8:	15 90       	lpm	r1, Z+
    89fa:	1d 92       	st	X+, r1
    89fc:	15 90       	lpm	r1, Z+
    89fe:	1d 92       	st	X+, r1
    8a00:	15 90       	lpm	r1, Z+
    8a02:	1d 92       	st	X+, r1
    8a04:	15 90       	lpm	r1, Z+
    8a06:	1d 92       	st	X+, r1
    8a08:	15 90       	lpm	r1, Z+
    8a0a:	1d 92       	st	X+, r1
    8a0c:	15 90       	lpm	r1, Z+
    8a0e:	1d 92       	st	X+, r1
    8a10:	15 90       	lpm	r1, Z+
    8a12:	1d 92       	st	X+, r1
    8a14:	15 90       	lpm	r1, Z+
    8a16:	1d 92       	st	X+, r1
    8a18:	15 90       	lpm	r1, Z+
    8a1a:	1d 92       	st	X+, r1
    8a1c:	15 90       	lpm	r1, Z+
    8a1e:	1d 92       	st	X+, r1
    8a20:	15 90       	lpm	r1, Z+
    8a22:	1d 92       	st	X+, r1
    8a24:	15 90       	lpm	r1, Z+
    8a26:	1d 92       	st	X+, r1
    8a28:	15 90       	lpm	r1, Z+
    8a2a:	1d 92       	st	X+, r1
    8a2c:	15 90       	lpm	r1, Z+
    8a2e:	1d 92       	st	X+, r1
    8a30:	15 90       	lpm	r1, Z+
    8a32:	1d 92       	st	X+, r1
    8a34:	15 90       	lpm	r1, Z+
    8a36:	1d 92       	st	X+, r1
    8a38:	15 90       	lpm	r1, Z+
    8a3a:	1d 92       	st	X+, r1
    8a3c:	15 90       	lpm	r1, Z+
    8a3e:	1d 92       	st	X+, r1
    8a40:	15 90       	lpm	r1, Z+
    8a42:	1d 92       	st	X+, r1
    8a44:	15 90       	lpm	r1, Z+
    8a46:	1d 92       	st	X+, r1
    8a48:	15 90       	lpm	r1, Z+
    8a4a:	1d 92       	st	X+, r1
	clr r1
    8a4c:	11 24       	eor	r1, r1
	ret
    8a4e:	08 95       	ret

00008a50 <CopyRamTile>:
; r24=Source RAM tile index
; r22=Dest RAM tile index
;************************************
CopyRamTile:

	ldi r18,TILE_HEIGHT*TILE_WIDTH
    8a50:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	ldi ZL,lo8(ram_tiles)
    8a52:	e0 e9       	ldi	r30, 0x90	; 144
	ldi ZH,hi8(ram_tiles)
    8a54:	f4 e0       	ldi	r31, 0x04	; 4
	mul r24,r18
    8a56:	82 9f       	mul	r24, r18
	add ZL,r0
    8a58:	e0 0d       	add	r30, r0
	adc ZH,r1
    8a5a:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    8a5c:	a0 e9       	ldi	r26, 0x90	; 144
	ldi XH,hi8(ram_tiles)
    8a5e:	b4 e0       	ldi	r27, 0x04	; 4
	mul r22,r18
    8a60:	62 9f       	mul	r22, r18
	add XL,r0
    8a62:	a0 0d       	add	r26, r0
	adc XH,r1
    8a64:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	ld r1,Z+
	st X+,r1
.endr
    8a66:	11 90       	ld	r1, Z+
    8a68:	1d 92       	st	X+, r1
    8a6a:	11 90       	ld	r1, Z+
    8a6c:	1d 92       	st	X+, r1
    8a6e:	11 90       	ld	r1, Z+
    8a70:	1d 92       	st	X+, r1
    8a72:	11 90       	ld	r1, Z+
    8a74:	1d 92       	st	X+, r1
    8a76:	11 90       	ld	r1, Z+
    8a78:	1d 92       	st	X+, r1
    8a7a:	11 90       	ld	r1, Z+
    8a7c:	1d 92       	st	X+, r1
    8a7e:	11 90       	ld	r1, Z+
    8a80:	1d 92       	st	X+, r1
    8a82:	11 90       	ld	r1, Z+
    8a84:	1d 92       	st	X+, r1
    8a86:	11 90       	ld	r1, Z+
    8a88:	1d 92       	st	X+, r1
    8a8a:	11 90       	ld	r1, Z+
    8a8c:	1d 92       	st	X+, r1
    8a8e:	11 90       	ld	r1, Z+
    8a90:	1d 92       	st	X+, r1
    8a92:	11 90       	ld	r1, Z+
    8a94:	1d 92       	st	X+, r1
    8a96:	11 90       	ld	r1, Z+
    8a98:	1d 92       	st	X+, r1
    8a9a:	11 90       	ld	r1, Z+
    8a9c:	1d 92       	st	X+, r1
    8a9e:	11 90       	ld	r1, Z+
    8aa0:	1d 92       	st	X+, r1
    8aa2:	11 90       	ld	r1, Z+
    8aa4:	1d 92       	st	X+, r1
    8aa6:	11 90       	ld	r1, Z+
    8aa8:	1d 92       	st	X+, r1
    8aaa:	11 90       	ld	r1, Z+
    8aac:	1d 92       	st	X+, r1
    8aae:	11 90       	ld	r1, Z+
    8ab0:	1d 92       	st	X+, r1
    8ab2:	11 90       	ld	r1, Z+
    8ab4:	1d 92       	st	X+, r1
    8ab6:	11 90       	ld	r1, Z+
    8ab8:	1d 92       	st	X+, r1
    8aba:	11 90       	ld	r1, Z+
    8abc:	1d 92       	st	X+, r1
    8abe:	11 90       	ld	r1, Z+
    8ac0:	1d 92       	st	X+, r1
    8ac2:	11 90       	ld	r1, Z+
    8ac4:	1d 92       	st	X+, r1
    8ac6:	11 90       	ld	r1, Z+
    8ac8:	1d 92       	st	X+, r1
    8aca:	11 90       	ld	r1, Z+
    8acc:	1d 92       	st	X+, r1
    8ace:	11 90       	ld	r1, Z+
    8ad0:	1d 92       	st	X+, r1
    8ad2:	11 90       	ld	r1, Z+
    8ad4:	1d 92       	st	X+, r1
    8ad6:	11 90       	ld	r1, Z+
    8ad8:	1d 92       	st	X+, r1
    8ada:	11 90       	ld	r1, Z+
    8adc:	1d 92       	st	X+, r1
    8ade:	11 90       	ld	r1, Z+
    8ae0:	1d 92       	st	X+, r1
    8ae2:	11 90       	ld	r1, Z+
    8ae4:	1d 92       	st	X+, r1
    8ae6:	11 90       	ld	r1, Z+
    8ae8:	1d 92       	st	X+, r1
    8aea:	11 90       	ld	r1, Z+
    8aec:	1d 92       	st	X+, r1
    8aee:	11 90       	ld	r1, Z+
    8af0:	1d 92       	st	X+, r1
    8af2:	11 90       	ld	r1, Z+
    8af4:	1d 92       	st	X+, r1
    8af6:	11 90       	ld	r1, Z+
    8af8:	1d 92       	st	X+, r1
    8afa:	11 90       	ld	r1, Z+
    8afc:	1d 92       	st	X+, r1
    8afe:	11 90       	ld	r1, Z+
    8b00:	1d 92       	st	X+, r1
    8b02:	11 90       	ld	r1, Z+
    8b04:	1d 92       	st	X+, r1
    8b06:	11 90       	ld	r1, Z+
    8b08:	1d 92       	st	X+, r1
    8b0a:	11 90       	ld	r1, Z+
    8b0c:	1d 92       	st	X+, r1
    8b0e:	11 90       	ld	r1, Z+
    8b10:	1d 92       	st	X+, r1
    8b12:	11 90       	ld	r1, Z+
    8b14:	1d 92       	st	X+, r1
    8b16:	11 90       	ld	r1, Z+
    8b18:	1d 92       	st	X+, r1
    8b1a:	11 90       	ld	r1, Z+
    8b1c:	1d 92       	st	X+, r1
    8b1e:	11 90       	ld	r1, Z+
    8b20:	1d 92       	st	X+, r1
    8b22:	11 90       	ld	r1, Z+
    8b24:	1d 92       	st	X+, r1
    8b26:	11 90       	ld	r1, Z+
    8b28:	1d 92       	st	X+, r1
    8b2a:	11 90       	ld	r1, Z+
    8b2c:	1d 92       	st	X+, r1
    8b2e:	11 90       	ld	r1, Z+
    8b30:	1d 92       	st	X+, r1
    8b32:	11 90       	ld	r1, Z+
    8b34:	1d 92       	st	X+, r1
    8b36:	11 90       	ld	r1, Z+
    8b38:	1d 92       	st	X+, r1
    8b3a:	11 90       	ld	r1, Z+
    8b3c:	1d 92       	st	X+, r1
    8b3e:	11 90       	ld	r1, Z+
    8b40:	1d 92       	st	X+, r1
    8b42:	11 90       	ld	r1, Z+
    8b44:	1d 92       	st	X+, r1
    8b46:	11 90       	ld	r1, Z+
    8b48:	1d 92       	st	X+, r1
    8b4a:	11 90       	ld	r1, Z+
    8b4c:	1d 92       	st	X+, r1
    8b4e:	11 90       	ld	r1, Z+
    8b50:	1d 92       	st	X+, r1
    8b52:	11 90       	ld	r1, Z+
    8b54:	1d 92       	st	X+, r1
    8b56:	11 90       	ld	r1, Z+
    8b58:	1d 92       	st	X+, r1
    8b5a:	11 90       	ld	r1, Z+
    8b5c:	1d 92       	st	X+, r1
    8b5e:	11 90       	ld	r1, Z+
    8b60:	1d 92       	st	X+, r1
    8b62:	11 90       	ld	r1, Z+
    8b64:	1d 92       	st	X+, r1
	clr r1
    8b66:	11 24       	eor	r1, r1
	ret
    8b68:	08 95       	ret

00008b6a <BlitSprite>:
; r22=RAM tile index (bt)
; r21:r20=Y:X
; r19:r18=DY:DX
;************************************
BlitSprite:
	push r16
    8b6a:	0f 93       	push	r16
	push r17
    8b6c:	1f 93       	push	r17
	push YL
    8b6e:	cf 93       	push	r28
	push YH
    8b70:	df 93       	push	r29

	;src=sprites_tiletable_lo+(sprites[i].tileIndex*TILE_HEIGHT*TILE_WIDTH)
	ldi r25,SPRITE_STRUCT_SIZE
    8b72:	94 e0       	ldi	r25, 0x04	; 4
	mul r24,r25
    8b74:	89 9f       	mul	r24, r25

	ldi ZL,lo8(sprites)	
    8b76:	e8 e6       	ldi	r30, 0x68	; 104
	ldi ZH,hi8(sprites)	
    8b78:	f4 e0       	ldi	r31, 0x04	; 4
	add ZL,r0
    8b7a:	e0 0d       	add	r30, r0
	adc ZH,r1
    8b7c:	f1 1d       	adc	r31, r1

	ldd r16,Z+sprFlags
    8b7e:	03 81       	ldd	r16, Z+3	; 0x03

	;8x16 multiply
	ldd r24,Z+sprTileIndex
    8b80:	82 81       	ldd	r24, Z+2	; 0x02
	ldi r30,TILE_WIDTH*TILE_HEIGHT
    8b82:	e0 e4       	ldi	r30, 0x40	; 64
	mul r24,r30
    8b84:	8e 9f       	mul	r24, r30
	movw r26,r0
    8b86:	d0 01       	movw	r26, r0
	
	;get tile bank addr
	ldi r25,4*2
    8b88:	98 e0       	ldi	r25, 0x08	; 8
	mul r16,r25
    8b8a:	09 9f       	mul	r16, r25
	ldi YL,lo8(sprites_tile_banks)	
    8b8c:	c8 ed       	ldi	r28, 0xD8	; 216
	ldi YH,hi8(sprites_tile_banks)	
    8b8e:	da e0       	ldi	r29, 0x0A	; 10
	clr r0
    8b90:	00 24       	eor	r0, r0
	add YL,r1
    8b92:	c1 0d       	add	r28, r1
	adc YH,r0		
    8b94:	d0 1d       	adc	r29, r0
	ldd ZL,Y+0
    8b96:	e8 81       	ld	r30, Y
	ldd ZH,Y+1
    8b98:	f9 81       	ldd	r31, Y+1	; 0x01
	add ZL,r26	;tile data src
    8b9a:	ea 0f       	add	r30, r26
	adc ZH,r27
    8b9c:	fb 1f       	adc	r31, r27
	
	;dest=ram_tiles+(bt*TILE_HEIGHT*TILE_WIDTH)
	ldi XL,lo8(ram_tiles)	
    8b9e:	a0 e9       	ldi	r26, 0x90	; 144
	ldi XH,hi8(ram_tiles)
    8ba0:	b4 e0       	ldi	r27, 0x04	; 4
	ldi r25,TILE_WIDTH*TILE_HEIGHT
    8ba2:	90 e4       	ldi	r25, 0x40	; 64
	mul r22,r25
    8ba4:	69 9f       	mul	r22, r25
	add XL,r0
    8ba6:	a0 0d       	add	r26, r0
	adc XH,r1
    8ba8:	b1 1d       	adc	r27, r1
			srcXdiff=destXdiff;
			src+=destXdiff;
		}
	}
	*/
	clr r1
    8baa:	11 24       	eor	r1, r1
	clr YH		;hi8(srcXdiff)
    8bac:	dd 27       	eor	r29, r29

	cpi r20,0	
    8bae:	40 30       	cpi	r20, 0x00	; 0
	brne x_2nd_tile
    8bb0:	51 f4       	brne	.+20     	; 0x8bc6 <x_2nd_tile>
	
	add XL,r18	;dest+=dx
    8bb2:	a2 0f       	add	r26, r18
	adc XH,r1
    8bb4:	b1 1d       	adc	r27, r1
	mov r24,r18	;destXdiff=dx
    8bb6:	82 2f       	mov	r24, r18
	mov YL,r18	;srcXdiff=dx
    8bb8:	c2 2f       	mov	r28, r18

	sbrs r16,SPRITE_FLIP_X_BIT
    8bba:	00 ff       	sbrs	r16, 0
	rjmp x_check_end
    8bbc:	11 c0       	rjmp	.+34     	; 0x8be0 <x_check_end>

	adiw ZL,(TILE_WIDTH-1)	;src+=7
    8bbe:	37 96       	adiw	r30, 0x07	; 7
	ldi YL,TILE_WIDTH*2		;srcXdiff=((TILE_WIDTH*2)-dx);
    8bc0:	c0 e1       	ldi	r28, 0x10	; 16
	sub YL,r18	
    8bc2:	c2 1b       	sub	r28, r18
	rjmp x_check_end
    8bc4:	0d c0       	rjmp	.+26     	; 0x8be0 <x_check_end>

00008bc6 <x_2nd_tile>:

x_2nd_tile:
	ldi r24,TILE_WIDTH
    8bc6:	88 e0       	ldi	r24, 0x08	; 8
	sub r24,r18		;8-DX = xdiff for dest
    8bc8:	82 1b       	sub	r24, r18

	sbrc r16,SPRITE_FLIP_X_BIT
    8bca:	00 fd       	sbrc	r16, 0
	rjmp x2_flip_x
    8bcc:	04 c0       	rjmp	.+8      	; 0x8bd6 <x2_flip_x>

	mov YL,r24		;srcXdiff=destXdiff;
    8bce:	c8 2f       	mov	r28, r24
	add ZL,r24		;src+=destXdiff;
    8bd0:	e8 0f       	add	r30, r24
	adc ZH,r1	
    8bd2:	f1 1d       	adc	r31, r1
	rjmp x_check_end
    8bd4:	05 c0       	rjmp	.+10     	; 0x8be0 <x_check_end>

00008bd6 <x2_flip_x>:

x2_flip_x:
	ldi YL,TILE_WIDTH
    8bd6:	c8 e0       	ldi	r28, 0x08	; 8
	add YL,r18		;srcXdiff=TILE_WIDTH+dx;	
    8bd8:	c2 0f       	add	r28, r18
	add ZL,r18		;src+=dx;
    8bda:	e2 0f       	add	r30, r18
	adc ZH,r1
    8bdc:	f1 1d       	adc	r31, r1
	sbiw ZL,1		;src--;
    8bde:	31 97       	sbiw	r30, 0x01	; 1

00008be0 <x_check_end>:
		}else{
			src+=(ydiff*TILE_WIDTH);
		}
	}
	*/
	cpi r21,0
    8be0:	50 30       	cpi	r21, 0x00	; 0
	brne y_2nd_tile
    8be2:	51 f4       	brne	.+20     	; 0x8bf8 <y_2nd_tile>

	ldi r25,TILE_WIDTH	;dest+=(dy*TILE_WIDTH)
    8be4:	98 e0       	ldi	r25, 0x08	; 8
	mul r25,r19			
    8be6:	93 9f       	mul	r25, r19
	add XL,r0
    8be8:	a0 0d       	add	r26, r0
	adc XH,r1
    8bea:	b1 1d       	adc	r27, r1

	mov r25,r19			;ydiff=dy
    8bec:	93 2f       	mov	r25, r19

	//sbrc r16,SPRITE_FLIP_Y_BIT
	//adiw ZL,(TILE_WIDTH*(TILE_HEIGHT-1))

	sbrc r16,SPRITE_FLIP_Y_BIT
    8bee:	01 fd       	sbrc	r16, 1
	subi ZL,lo8(-(TILE_WIDTH*(TILE_HEIGHT-1)));src+=(TILE_WIDTH*(TILE_HEIGHT-1));
    8bf0:	e8 5c       	subi	r30, 0xC8	; 200
	sbrc r16,SPRITE_FLIP_Y_BIT
    8bf2:	01 fd       	sbrc	r16, 1
	sbci ZH,hi8(-(TILE_WIDTH*(TILE_HEIGHT-1)))
    8bf4:	ff 4f       	sbci	r31, 0xFF	; 255


	rjmp y_check_end
    8bf6:	0a c0       	rjmp	.+20     	; 0x8c0c <y_check_end>

00008bf8 <y_2nd_tile>:

y_2nd_tile:
	ldi r25,TILE_HEIGHT	;ydiff=(TILE_HEIGHT-dy)
    8bf8:	98 e0       	ldi	r25, 0x08	; 8
	sub r25,r19	
    8bfa:	93 1b       	sub	r25, r19
	
	mov r22,r19			;temp=dy-1
    8bfc:	63 2f       	mov	r22, r19
	dec r22
    8bfe:	6a 95       	dec	r22
	sbrs r16,SPRITE_FLIP_Y_BIT
    8c00:	01 ff       	sbrs	r16, 1
	mov r22,r25			;temp=ydiff
    8c02:	69 2f       	mov	r22, r25

	ldi r21,TILE_WIDTH	;src+=(temp*TILE_WIDTH);
    8c04:	58 e0       	ldi	r21, 0x08	; 8
	mul r21,r22
    8c06:	56 9f       	mul	r21, r22
	add ZL,r0
    8c08:	e0 0d       	add	r30, r0
	adc ZH,r1	
    8c0a:	f1 1d       	adc	r31, r1

00008c0c <y_check_end>:
y_check_end:	
	
	//if(flags&SPRITE_FLIP_X){
	//	step=-1;
	//}
	ser r22		;step=-1
    8c0c:	6f ef       	ldi	r22, 0xFF	; 255
	ser r23
    8c0e:	7f ef       	ldi	r23, 0xFF	; 255
	sbrs r16,SPRITE_FLIP_X_BIT
    8c10:	00 ff       	sbrs	r16, 0
	ldi r22,1	;step=1
    8c12:	61 e0       	ldi	r22, 0x01	; 1
	sbrs r16,SPRITE_FLIP_X_BIT
    8c14:	00 ff       	sbrs	r16, 0
	clr r23
    8c16:	77 27       	eor	r23, r23

	//if(flags&SPRITE_FLIP_Y){
	//	srcXdiff-=(TILE_WIDTH*2);
	//}
	sbrc r16,SPRITE_FLIP_Y_BIT
    8c18:	01 fd       	sbrc	r16, 1
	sbiw YL,(TILE_WIDTH*2)
    8c1a:	60 97       	sbiw	r28, 0x10	; 16
	;r24	= destXdiff
	;r25	= ydiff
	;X		= dest
	;Y		= srcXdiff
	;Z		= src
	clr r1
    8c1c:	11 24       	eor	r1, r1
	ldi r19,TRANSLUCENT_COLOR
    8c1e:	3e ef       	ldi	r19, 0xFE	; 254

	ldi r21,TILE_HEIGHT
    8c20:	58 e0       	ldi	r21, 0x08	; 8
	sub r21,r25 	;yspan=(TILE_HEIGHT-ydiff)
    8c22:	59 1b       	sub	r21, r25

00008c24 <y_loop>:

y_loop:
	ldi r20,TILE_WIDTH
    8c24:	48 e0       	ldi	r20, 0x08	; 8
	sub r20,r24 	;xspan=(TILE_WIDTH-destXdiff)
    8c26:	48 1b       	sub	r20, r24

00008c28 <x_loop>:

x_loop:
	lpm r18,Z		;px=pgm_read_byte(src);
    8c28:	24 91       	lpm	r18, Z
	cpse r18,r19	;if(px!=TRANSLUCENT_COLOR)
    8c2a:	23 13       	cpse	r18, r19
	st X,r18		;*dest=px;
    8c2c:	2c 93       	st	X, r18
	adiw XL,1
    8c2e:	11 96       	adiw	r26, 0x01	; 1
	add ZL,r22		;src+=step;
    8c30:	e6 0f       	add	r30, r22
	adc ZH,r23
    8c32:	f7 1f       	adc	r31, r23
	dec r20
    8c34:	4a 95       	dec	r20
	brne x_loop
    8c36:	c1 f7       	brne	.-16     	; 0x8c28 <x_loop>

	add ZL,YL		;src+=srcXdiff
    8c38:	ec 0f       	add	r30, r28
	adc ZH,YH
    8c3a:	fd 1f       	adc	r31, r29
	add XL,r24		;dest+=destXdiff
    8c3c:	a8 0f       	add	r26, r24
	adc XH,r1
    8c3e:	b1 1d       	adc	r27, r1
	dec r21
    8c40:	5a 95       	dec	r21
	brne y_loop
    8c42:	81 f7       	brne	.-32     	; 0x8c24 <y_loop>


	pop YH
    8c44:	df 91       	pop	r29
	pop YL
    8c46:	cf 91       	pop	r28
	pop r17
    8c48:	1f 91       	pop	r17
	pop r16
    8c4a:	0f 91       	pop	r16
	ret
    8c4c:	08 95       	ret

00008c4e <__vector_13>:

;***************************************************************************
; Main Video sync interrupt
;***************************************************************************
TIMER1_COMPA_vect:
	push r0
    8c4e:	0f 92       	push	r0
	push r1
    8c50:	1f 92       	push	r1
	push ZL;2
    8c52:	ef 93       	push	r30
	push ZH;2
    8c54:	ff 93       	push	r31
	
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    8c56:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    8c58:	ef 93       	push	r30

	;Read timer offset since rollover to remove cycles 
	;and conpensate for interrupt latency.
	;This is nessesary to eliminate frame jitter.
	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    8c5a:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,0x12 ;MIN_INT_LATENCY
    8c5e:	e2 51       	subi	r30, 0x12	; 18

	ldi ZH,1
    8c60:	f1 e0       	ldi	r31, 0x01	; 1

00008c62 <latency_loop>:
latency_loop:
	cp ZL,ZH
    8c62:	ef 17       	cp	r30, r31
	brlo .		;advance PC to next instruction	
    8c64:	00 f0       	brcs	.+0      	; 0x8c66 <latency_loop+0x4>
	inc ZH
    8c66:	f3 95       	inc	r31
	cpi ZH,10
    8c68:	fa 30       	cpi	r31, 0x0A	; 10
	brlo latency_loop
    8c6a:	d8 f3       	brcs	.-10     	; 0x8c62 <latency_loop>
	jmp .
    8c6c:	0c 94 38 46 	jmp	0x8c70	; 0x8c70 <latency_loop+0xe>
	
	;decrement sync pulse counter
	lds ZL,sync_pulse
    8c70:	e0 91 e7 0a 	lds	r30, 0x0AE7
	dec ZL
    8c74:	ea 95       	dec	r30
	sts sync_pulse,ZL
    8c76:	e0 93 e7 0a 	sts	0x0AE7, r30

	;process sync phases
	lds ZH,sync_phase
    8c7a:	f0 91 e6 0a 	lds	r31, 0x0AE6
	sbrc ZH,0
    8c7e:	f0 fd       	sbrc	r31, 0
	rjmp sync_hsync
    8c80:	57 c0       	rjmp	.+174    	; 0x8d30 <sync_hsync>
; Note: TCNT1 should be equal to 
; 0x68 on the cbi
; 0xAC on the sbi
; pulse duration: 68 clocks
;***************************************************		
	cpi ZL,SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    8c82:	ec 30       	cpi	r30, 0x0C	; 12
	brlo sync_eq
    8c84:	98 f0       	brcs	.+38     	; 0x8cac <sync_eq>

	;Set HDRIVE to double rate during VSYNC
	ldi ZH,hi8(HDRIVE_CL_TWICE)
    8c86:	f3 e0       	ldi	r31, 0x03	; 3
	sts _SFR_MEM_ADDR(OCR1AH),ZH	
    8c88:	f0 93 89 00 	sts	0x0089, r31
	ldi ZH,lo8(HDRIVE_CL_TWICE)
    8c8c:	fd e8       	ldi	r31, 0x8D	; 141
	sts _SFR_MEM_ADDR(OCR1AL),ZH
    8c8e:	f0 93 88 00 	sts	0x0088, r31

	bst ZL,0
    8c92:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0x68
    8c94:	28 98       	cbi	0x05, 0	; 5
	brtc sync_pre_eq_no_sound_update
    8c96:	26 f4       	brtc	.+8      	; 0x8ca0 <sync_pre_eq_no_sound_update>
	ldi ZL,1	;indicate update_sound to generate the SBI for pre-eq
    8c98:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    8c9a:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <update_sound>
	rjmp sync_end
    8c9e:	b7 c0       	rjmp	.+366    	; 0x8e0e <sync_end>

00008ca0 <sync_pre_eq_no_sound_update>:

sync_pre_eq_no_sound_update:
	WAIT ZL,64
    8ca0:	e5 e1       	ldi	r30, 0x15	; 21
    8ca2:	ea 95       	dec	r30
    8ca4:	f1 f7       	brne	.-4      	; 0x8ca2 <sync_pre_eq_no_sound_update+0x2>
    8ca6:	00 00       	nop
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    8ca8:	28 9a       	sbi	0x05, 0	; 5
		
	rjmp sync_end
    8caa:	b1 c0       	rjmp	.+354    	; 0x8e0e <sync_end>

00008cac <sync_eq>:
; 0x68  on the cbi
; 0x36E on the sbi
; low pulse duration: 774 clocks
;***************************************************	
sync_eq:
	cpi ZL,SYNC_POST_EQ_PULSES
    8cac:	e6 30       	cpi	r30, 0x06	; 6
	brlo sync_post_eq
    8cae:	38 f1       	brcs	.+78     	; 0x8cfe <sync_post_eq>

	rjmp .
    8cb0:	00 c0       	rjmp	.+0      	; 0x8cb2 <sync_eq+0x6>
	rjmp .
    8cb2:	00 c0       	rjmp	.+0      	; 0x8cb4 <sync_eq+0x8>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    8cb4:	28 98       	cbi	0x05, 0	; 5

	bst ZL,0
    8cb6:	e0 fb       	bst	r30, 0
	ldi ZL,4
    8cb8:	e4 e0       	ldi	r30, 0x04	; 4
	brtc sync_eq_skip
    8cba:	16 f4       	brtc	.+4      	; 0x8cc0 <sync_eq_skip>
	
	call update_sound
    8cbc:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <update_sound>

00008cc0 <sync_eq_skip>:
	;enable interupt to bring back sync 
	;level instead of wasting cycles
	;in a big wait loop

 	;clear interrupt flag
	ldi ZL,(1<<OCF1B)
    8cc0:	e4 e0       	ldi	r30, 0x04	; 4
	sts _SFR_MEM_ADDR(TIFR1),ZL 
    8cc2:	e0 93 36 00 	sts	0x0036, r30
	
	;generate interrupt on match
	;for timer1 compare unit b
	ldi ZL,(1<<OCIE1A)+(1<<OCIE1B)
    8cc6:	e6 e0       	ldi	r30, 0x06	; 6
	sts _SFR_MEM_ADDR(TIMSK1),ZL
    8cc8:	e0 93 6f 00 	sts	0x006F, r30

	rjmp sync_end
    8ccc:	a0 c0       	rjmp	.+320    	; 0x8e0e <sync_end>

00008cce <__vector_14>:
; during VSYNC EQ pulses to recover ~5000 cycles per field
; with interrupt latency conpensation
; 37 cycles
;**********************************************************	
TIMER1_COMPB_vect:
	push ZL
    8cce:	ef 93       	push	r30
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    8cd0:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    8cd2:	ef 93       	push	r30

	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    8cd4:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,62+31 ;0x5D ;MIN_INT_LATENCY
    8cd8:	ed 55       	subi	r30, 0x5D	; 93

	cpi ZL,1
    8cda:	e1 30       	cpi	r30, 0x01	; 1
	brlo .		;advance PC to next instruction
    8cdc:	00 f0       	brcs	.+0      	; 0x8cde <__vector_14+0x10>

	cpi ZL,2
    8cde:	e2 30       	cpi	r30, 0x02	; 2
	brlo .		;advance PC to next instruction
    8ce0:	00 f0       	brcs	.+0      	; 0x8ce2 <__vector_14+0x14>

	cpi ZL,3
    8ce2:	e3 30       	cpi	r30, 0x03	; 3
	brlo .		;advance PC to next instruction
    8ce4:	00 f0       	brcs	.+0      	; 0x8ce6 <__vector_14+0x18>

	cpi ZL,4
    8ce6:	e4 30       	cpi	r30, 0x04	; 4
	brlo .		;advance PC to next instruction
    8ce8:	00 f0       	brcs	.+0      	; 0x8cea <__vector_14+0x1c>

	cpi ZL,5
    8cea:	e5 30       	cpi	r30, 0x05	; 5
	brlo .		;advance PC to next instruction
    8cec:	00 f0       	brcs	.+0      	; 0x8cee <__vector_14+0x20>

 	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;68
    8cee:	28 9a       	sbi	0x05, 0	; 5
	ldi ZL,(1<<OCIE1A) ; disable OCIE1B 
    8cf0:	e2 e0       	ldi	r30, 0x02	; 2
	sts _SFR_MEM_ADDR(TIMSK1),ZL ;stop generate interrupt on match
    8cf2:	e0 93 6f 00 	sts	0x006F, r30
	
	;restore flags
	pop ZL
    8cf6:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL	
    8cf8:	ef bf       	out	0x3f, r30	; 63
	pop ZL
    8cfa:	ef 91       	pop	r30
	reti
    8cfc:	18 95       	reti

00008cfe <sync_post_eq>:
; 0x68 on the cbi
; 0xAC on the sbi
; pulse cycles: 68 clocks
;***************************************************	
sync_post_eq:	
	rjmp .
    8cfe:	00 c0       	rjmp	.+0      	; 0x8d00 <sync_post_eq+0x2>

	bst ZL,0
    8d00:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    8d02:	28 98       	cbi	0x05, 0	; 5
	brtc sync_post_eq_no_sound_update
    8d04:	26 f4       	brtc	.+8      	; 0x8d0e <sync_post_eq_no_sound_update>
	ldi ZL,1	
    8d06:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    8d08:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <update_sound>
	rjmp sync_pre_eq_cont
    8d0c:	05 c0       	rjmp	.+10     	; 0x8d18 <sync_pre_eq_cont>

00008d0e <sync_post_eq_no_sound_update>:

sync_post_eq_no_sound_update:
	WAIT ZL,64
    8d0e:	e5 e1       	ldi	r30, 0x15	; 21
    8d10:	ea 95       	dec	r30
    8d12:	f1 f7       	brne	.-4      	; 0x8d10 <sync_post_eq_no_sound_update+0x2>
    8d14:	00 00       	nop

	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN 
    8d16:	28 9a       	sbi	0x05, 0	; 5

00008d18 <sync_pre_eq_cont>:

sync_pre_eq_cont:	
	;check if it's the last vsync pulse
	lds ZL,sync_pulse
    8d18:	e0 91 e7 0a 	lds	r30, 0x0AE7
	cpi ZL,0
    8d1c:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2 ;skip rjmp
    8d1e:	09 f0       	breq	.+2      	; 0x8d22 <sync_pre_eq_cont+0xa>
	rjmp sync_end
    8d20:	76 c0       	rjmp	.+236    	; 0x8e0e <sync_end>
	
	;update sync flags
	ldi ZL,SYNC_HSYNC_PULSES
    8d22:	ed ef       	ldi	r30, 0xFD	; 253
	sts sync_pulse,ZL
    8d24:	e0 93 e7 0a 	sts	0x0AE7, r30
	ldi ZL,1
    8d28:	e1 e0       	ldi	r30, 0x01	; 1
	sts sync_phase,ZL
    8d2a:	e0 93 e6 0a 	sts	0x0AE6, r30
	
	rjmp sync_end
    8d2e:	6f c0       	rjmp	.+222    	; 0x8e0e <sync_end>

00008d30 <sync_hsync>:
; 0xF0 on the sbi
; pulse duration: 136 clocks
;***************************************************	

	; Set HDRIVE to normal rate
	ldi ZL,hi8(HDRIVE_CL)
    8d30:	e7 e0       	ldi	r30, 0x07	; 7
	sts _SFR_MEM_ADDR(OCR1AH),ZL	
    8d32:	e0 93 89 00 	sts	0x0089, r30
	ldi ZL,lo8(HDRIVE_CL)
    8d36:	eb e1       	ldi	r30, 0x1B	; 27
	sts _SFR_MEM_ADDR(OCR1AL),ZL
    8d38:	e0 93 88 00 	sts	0x0088, r30
	rjmp .
    8d3c:	00 c0       	rjmp	.+0      	; 0x8d3e <sync_hsync+0xe>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    8d3e:	28 98       	cbi	0x05, 0	; 5
	
	ldi ZL,2	;indicate update_sound to generate the SBI for pre-eq
    8d40:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    8d42:	00 c0       	rjmp	.+0      	; 0x8d44 <sync_hsync+0x14>
	call update_sound
    8d44:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <update_sound>

	;check if we have reached the first line to render
	ldi ZH,SYNC_HSYNC_PULSES
    8d48:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    8d4a:	00 90 ed 0a 	lds	r0, 0x0AED
	sub ZH,r0				
    8d4e:	f0 19       	sub	r31, r0
	lds ZL,sync_pulse
    8d50:	e0 91 e7 0a 	lds	r30, 0x0AE7
	cp ZL,ZH
    8d54:	ef 17       	cp	r30, r31
	brsh no_render
    8d56:	d0 f4       	brcc	.+52     	; 0x8d8c <no_render>

	ldi ZH,SYNC_HSYNC_PULSES
    8d58:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    8d5a:	00 90 ed 0a 	lds	r0, 0x0AED
	sub ZH,r0				
    8d5e:	f0 19       	sub	r31, r0
	lds r0,render_lines_count
    8d60:	00 90 ee 0a 	lds	r0, 0x0AEE
	sub ZH,r0			
    8d64:	f0 19       	sub	r31, r0
	cp ZL,ZH
    8d66:	ef 17       	cp	r30, r31
	brlo no_render
    8d68:	88 f0       	brcs	.+34     	; 0x8d8c <no_render>

	;push r1-r29
	ldi ZL,29
    8d6a:	ed e1       	ldi	r30, 0x1D	; 29
	clr ZH
    8d6c:	ff 27       	eor	r31, r31

00008d6e <push_loop>:
push_loop:
	ld r0,Z	;load value from register file
    8d6e:	00 80       	ld	r0, Z
	push r0
    8d70:	0f 92       	push	r0
	dec ZL
    8d72:	ea 95       	dec	r30
	brne push_loop	
    8d74:	e1 f7       	brne	.-8      	; 0x8d6e <push_loop>

	;timing compensation
	;to insure we always call the video mode 
	;routine at the same cycle	
	WAIT r16,230-(AUDIO_OUT_HSYNC_CYCLES)
    8d76:	06 e0       	ldi	r16, 0x06	; 6
    8d78:	0a 95       	dec	r16
    8d7a:	f1 f7       	brne	.-4      	; 0x8d78 <push_loop+0xa>

	call VMODE_FUNC		;TCNT1=0x234
    8d7c:	0e 94 c0 43 	call	0x8780	; 0x8780 <sub_video_mode3>

	;pop r1-r29
	ldi ZL,1
    8d80:	e1 e0       	ldi	r30, 0x01	; 1
	clr ZH
    8d82:	ff 27       	eor	r31, r31

00008d84 <pop_loop>:
pop_loop:
	pop r0
    8d84:	0f 90       	pop	r0
	st Z+,r0 ;store value to register file
    8d86:	01 92       	st	Z+, r0
	cpi ZL,30
    8d88:	ee 31       	cpi	r30, 0x1E	; 30
	brlo pop_loop	
    8d8a:	e0 f3       	brcs	.-8      	; 0x8d84 <pop_loop>

00008d8c <no_render>:

no_render:

	;check if it's the last hsync pulse and we are 
	;ready for VSYNC
	lds ZL,sync_pulse
    8d8c:	e0 91 e7 0a 	lds	r30, 0x0AE7
	cpi ZL,0
    8d90:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2
    8d92:	09 f0       	breq	.+2      	; 0x8d96 <no_render+0xa>
	rjmp sync_end
    8d94:	3c c0       	rjmp	.+120    	; 0x8e0e <sync_end>
;***************************************************
; Process VSYNC stuff
;***************************************************
	
	;push C-call registers
	push r18
    8d96:	2f 93       	push	r18
	push r19
    8d98:	3f 93       	push	r19
	push r20
    8d9a:	4f 93       	push	r20
	push r21
    8d9c:	5f 93       	push	r21
	push r22
    8d9e:	6f 93       	push	r22
	push r23
    8da0:	7f 93       	push	r23
	push r24
    8da2:	8f 93       	push	r24
	push r25
    8da4:	9f 93       	push	r25
	push r26
    8da6:	af 93       	push	r26
	push r27
    8da8:	bf 93       	push	r27

	sei ;must enable ints for re-entrant sync pulses
    8daa:	78 94       	sei
	clr r1
    8dac:	11 24       	eor	r1, r1

	;set vsync flags
	clr ZL
    8dae:	ee 27       	eor	r30, r30
	sts sync_phase,ZL
    8db0:	e0 93 e6 0a 	sts	0x0AE6, r30
	ldi ZL,SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    8db4:	e2 e1       	ldi	r30, 0x12	; 18
	sts sync_pulse,ZL
    8db6:	e0 93 e7 0a 	sts	0x0AE7, r30



	;increment the vsync counter
	lds r24,vsync_counter
    8dba:	80 91 f7 0a 	lds	r24, 0x0AF7
	lds r25,vsync_counter+1
    8dbe:	90 91 f8 0a 	lds	r25, 0x0AF8
	adiw r24,1
    8dc2:	01 96       	adiw	r24, 0x01	; 1
	sts vsync_counter,r24
    8dc4:	80 93 f7 0a 	sts	0x0AF7, r24
	sts vsync_counter+1,r25
    8dc8:	90 93 f8 0a 	sts	0x0AF8, r25


	;process user pre callback
	lds ZL,pre_vsync_user_callback+0
    8dcc:	e0 91 e9 0a 	lds	r30, 0x0AE9
	lds ZH,pre_vsync_user_callback+1
    8dd0:	f0 91 ea 0a 	lds	r31, 0x0AEA
	cp  ZL,r1
    8dd4:	e1 15       	cp	r30, r1
	cpc ZH,r1
    8dd6:	f1 05       	cpc	r31, r1
	breq .+2 
    8dd8:	09 f0       	breq	.+2      	; 0x8ddc <no_render+0x50>
	icall
    8dda:	09 95       	icall

	;refresh buttons states
	#if CONTROLLERS_VSYNC_READ == 1
		call ReadControllers
    8ddc:	0e 94 c2 48 	call	0x9184	; 0x9184 <ReadControllers>
	#endif 
	
	;invoke stuff the video mode may have to do
	call VideoModeVsync	
    8de0:	0e 94 42 57 	call	0xae84	; 0xae84 <VideoModeVsync>

	;process music (music, envelopes, etc)
	call process_music
    8de4:	0e 94 19 47 	call	0x8e32	; 0x8e32 <process_music>
	clr r1
    8de8:	11 24       	eor	r1, r1

	;process user post callback
	lds ZL,post_vsync_user_callback+0
    8dea:	e0 91 eb 0a 	lds	r30, 0x0AEB
	lds ZH,post_vsync_user_callback+1
    8dee:	f0 91 ec 0a 	lds	r31, 0x0AEC
	cp  ZL,r1
    8df2:	e1 15       	cp	r30, r1
	cpc ZH,r1
    8df4:	f1 05       	cpc	r31, r1
	breq .+2 
    8df6:	09 f0       	breq	.+2      	; 0x8dfa <no_render+0x6e>
	icall
    8df8:	09 95       	icall
	#if SNES_MOUSE == 1
		call ReadMouseExtendedData
		call ProcessMouseMovement
	#endif

	pop r27
    8dfa:	bf 91       	pop	r27
	pop r26
    8dfc:	af 91       	pop	r26
	pop r25
    8dfe:	9f 91       	pop	r25
	pop r24
    8e00:	8f 91       	pop	r24
	pop r23
    8e02:	7f 91       	pop	r23
	pop r22
    8e04:	6f 91       	pop	r22
	pop r21
    8e06:	5f 91       	pop	r21
	pop r20
    8e08:	4f 91       	pop	r20
	pop r19
    8e0a:	3f 91       	pop	r19
	pop r18
    8e0c:	2f 91       	pop	r18

00008e0e <sync_end>:
	
sync_end:	
	;restore flags
	pop ZL
    8e0e:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL
    8e10:	ef bf       	out	0x3f, r30	; 63
	
	pop ZH
    8e12:	ff 91       	pop	r31
	pop ZL
    8e14:	ef 91       	pop	r30
	pop r1
    8e16:	1f 90       	pop	r1
	pop r0
    8e18:	0f 90       	pop	r0
	reti
    8e1a:	18 95       	reti

00008e1c <hsync_pulse>:
; 0xf0 on the sbi 
;	
; Destroys: ZL (r30)
;*************************************************
hsync_pulse:
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    8e1c:	28 98       	cbi	0x05, 0	; 5
	ldi ZL,2
    8e1e:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    8e20:	00 c0       	rjmp	.+0      	; 0x8e22 <hsync_pulse+0x6>
	call update_sound
    8e22:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <update_sound>

	lds ZL,sync_pulse
    8e26:	e0 91 e7 0a 	lds	r30, 0x0AE7
	dec ZL
    8e2a:	ea 95       	dec	r30
	sts sync_pulse,ZL
    8e2c:	e0 93 e7 0a 	sts	0x0AE7, r30

	ret
    8e30:	08 95       	ret

00008e32 <process_music>:
; NOTE: registers r18-r27 are already saved by the caller
;***********************
process_music:
	
#if ENABLE_MIXER==1
	lds ZL,sound_enabled
    8e32:	e0 91 01 0b 	lds	r30, 0x0B01
	sbrc ZL,0
    8e36:	e0 fd       	sbrc	r30, 0
 	call ProcessMusic
    8e38:	0e 94 e4 4b 	call	0x97c8	; 0x97c8 <ProcessMusic>
#endif

	ret
    8e3c:	08 95       	ret

00008e3e <update_sound>:

; Destroys: Z,r0,r1
; cycles: 212+
;****************************
update_sound:
	push r16
    8e3e:	0f 93       	push	r16
	push r17
    8e40:	1f 93       	push	r17
	push r18
    8e42:	2f 93       	push	r18
	push r28
    8e44:	cf 93       	push	r28
	push r29
    8e46:	df 93       	push	r29

	mov r18,ZL
    8e48:	2e 2f       	mov	r18, r30

	;channel 1 
	lds r16,tr1_step_lo
    8e4a:	00 91 03 0b 	lds	r16, 0x0B03
	lds r17,tr1_pos_frac
    8e4e:	10 91 05 0b 	lds	r17, 0x0B05
	add	r17,r16	;add step to fractional part of sample pos
    8e52:	10 0f       	add	r17, r16
	lds r16,tr1_step_hi	
    8e54:	00 91 04 0b 	lds	r16, 0x0B04
	lds ZL,tr1_pos_lo
    8e58:	e0 91 06 0b 	lds	r30, 0x0B06
	lds ZH,tr1_pos_hi 
    8e5c:	f0 91 07 0b 	lds	r31, 0x0B07
	adc ZL,r16	;add step to low byte of sample pos
    8e60:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    8e62:	04 91       	lpm	r16, Z
	sts tr1_pos_lo,ZL
    8e64:	e0 93 06 0b 	sts	0x0B06, r30
	sts tr1_pos_frac,r17
    8e68:	10 93 05 0b 	sts	0x0B05, r17
	lds r17,tr1_vol
    8e6c:	10 91 02 0b 	lds	r17, 0x0B02
	mulsu r16,r17;(sample*mixing vol)
    8e70:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend	
    8e72:	00 08       	sbc	r0, r0
	mov r28,r1	;set (sample*vol>>8) to mix buffer lsb
    8e74:	c1 2d       	mov	r28, r1
	mov r29,r0	;set mix buffer msb	
    8e76:	d0 2d       	mov	r29, r0
	nop
    8e78:	00 00       	nop

;38
	
	;channel 2
	lds r16,tr2_step_lo
    8e7a:	00 91 09 0b 	lds	r16, 0x0B09
	lds r17,tr2_pos_frac
    8e7e:	10 91 0b 0b 	lds	r17, 0x0B0B
	add	r17,r16	;add step to fractional part of sample pos
    8e82:	10 0f       	add	r17, r16
	lds r16,tr2_step_hi	
    8e84:	00 91 0a 0b 	lds	r16, 0x0B0A
	lds ZL,tr2_pos_lo
    8e88:	e0 91 0c 0b 	lds	r30, 0x0B0C
	lds ZH,tr2_pos_hi 
    8e8c:	f0 91 0d 0b 	lds	r31, 0x0B0D
	adc ZL,r16	;add step to low byte of sample pos
    8e90:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    8e92:	04 91       	lpm	r16, Z
	sts tr2_pos_lo,ZL
    8e94:	e0 93 0c 0b 	sts	0x0B0C, r30
	sts tr2_pos_frac,r17
    8e98:	10 93 0b 0b 	sts	0x0B0B, r17
	lds r17,tr2_vol
    8e9c:	10 91 08 0b 	lds	r17, 0x0B08

	;*** Video sync update ***
	sbrc r18,0								;pre-eq/post-eq sync
    8ea0:	20 fd       	sbrc	r18, 0
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    8ea2:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,0								
    8ea4:	20 ff       	sbrs	r18, 0
	rjmp .
    8ea6:	00 c0       	rjmp	.+0      	; 0x8ea8 <update_sound+0x6a>
	;*************************

	mulsu r16,r17;(sample*mixing vol)
    8ea8:	01 03       	mulsu	r16, r17
	clr r0
    8eaa:	00 24       	eor	r0, r0
	sbc r0,r0	;sign extend
    8eac:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    8eae:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb		
    8eb0:	d0 1d       	adc	r29, r0
;70
	
	;channel 3
	lds r16,tr3_step_lo
    8eb2:	00 91 0f 0b 	lds	r16, 0x0B0F
	lds r17,tr3_pos_frac
    8eb6:	10 91 11 0b 	lds	r17, 0x0B11
	add	r17,r16				;add step to fractional part of sample pos
    8eba:	10 0f       	add	r17, r16
	lds r16,tr3_step_hi	
    8ebc:	00 91 10 0b 	lds	r16, 0x0B10
	lds ZL,tr3_pos_lo
    8ec0:	e0 91 12 0b 	lds	r30, 0x0B12
	lds ZH,tr3_pos_hi 
    8ec4:	f0 91 13 0b 	lds	r31, 0x0B13
	adc ZL,r16				;add step to low byte of sample pos
    8ec8:	e0 1f       	adc	r30, r16
	lpm	r16,Z				;load sample
    8eca:	04 91       	lpm	r16, Z
	sts tr3_pos_lo,ZL
    8ecc:	e0 93 12 0b 	sts	0x0B12, r30
	sts tr3_pos_frac,r17
    8ed0:	10 93 11 0b 	sts	0x0B11, r17
	lds r17,tr3_vol
    8ed4:	10 91 0e 0b 	lds	r17, 0x0B0E
	mulsu r16,r17			;(sample*mixing vol)
    8ed8:	01 03       	mulsu	r16, r17
	sbc r0,r0				;sign extend
    8eda:	00 08       	sbc	r0, r0
	add r28,r1				;add (sample*vol>>8) to mix buffer lsb
    8edc:	c1 0d       	add	r28, r1
	adc r29,r0				;ajust mix buffer msb
    8ede:	d0 1d       	adc	r29, r0
;97	

	;channel 4 - 7/15 bit LFSR 
	lds r16,tr4_barrel_lo
    8ee0:	00 91 16 0b 	lds	r16, 0x0B16
	lds r17,tr4_barrel_hi
    8ee4:	10 91 17 0b 	lds	r17, 0x0B17
	lds ZL,tr4_divider
    8ee8:	e0 91 18 0b 	lds	r30, 0x0B18
	dec ZL	
    8eec:	ea 95       	dec	r30
	brpl ch4_no_shift	
    8eee:	92 f4       	brpl	.+36     	; 0x8f14 <ch4_no_shift>

	lds ZH,tr4_params
    8ef0:	f0 91 15 0b 	lds	r31, 0x0B15
	mov ZL,ZH
    8ef4:	ef 2f       	mov	r30, r31
	lsr ZL 			;keep bits7:1
    8ef6:	e6 95       	lsr	r30

	mov r0,r16  ;copy barrel shifter
    8ef8:	00 2e       	mov	r0, r16
	lsr r0
    8efa:	06 94       	lsr	r0
	eor r0,r16  ;xor bit0 and bit1
    8efc:	00 26       	eor	r0, r16
	bst r0,0
    8efe:	00 fa       	bst	r0, 0
	lsr r17
    8f00:	16 95       	lsr	r17
	ror r16
    8f02:	07 95       	ror	r16
	bld r17,6	;15 bits mode
    8f04:	16 f9       	bld	r17, 6
	sbrs ZH,0
    8f06:	f0 ff       	sbrs	r31, 0
	bld r16,6	;7 bits mode
    8f08:	06 f9       	bld	r16, 6

	sts tr4_barrel_lo,r16
    8f0a:	00 93 16 0b 	sts	0x0B16, r16
	sts tr4_barrel_hi,r17
    8f0e:	10 93 17 0b 	sts	0x0B17, r17

	rjmp ch4_end
    8f12:	03 c0       	rjmp	.+6      	; 0x8f1a <ch4_end>

00008f14 <ch4_no_shift>:
ch4_no_shift:
	;wait loop 21 cycles
	ldi r17,6
    8f14:	16 e0       	ldi	r17, 0x06	; 6
	dec r17
    8f16:	1a 95       	dec	r17
	brne .-4
    8f18:	f1 f7       	brne	.-4      	; 0x8f16 <ch4_no_shift+0x2>

00008f1a <ch4_end>:
	;rjmp .
ch4_end:

	sts tr4_divider,ZL
    8f1a:	e0 93 18 0b 	sts	0x0B18, r30
	ldi r17,0x80 ;-128
    8f1e:	10 e8       	ldi	r17, 0x80	; 128
	
	;*** Video sync update ***
	sbrc r18,1								;hsync
    8f20:	21 fd       	sbrc	r18, 1
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xF0
    8f22:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,1								
    8f24:	21 ff       	sbrs	r18, 1
	rjmp .
    8f26:	00 c0       	rjmp	.+0      	; 0x8f28 <ch4_end+0xe>
	;*************************
	
	sbrc r16,0
    8f28:	00 fd       	sbrc	r16, 0
	ldi r17,0x7f ;+127
    8f2a:	1f e7       	ldi	r17, 0x7F	; 127
	
	lds r16,tr4_vol
    8f2c:	00 91 14 0b 	lds	r16, 0x0B14

	mulsu r17,r16;(sample*mixing vol)
    8f30:	10 03       	mulsu	r17, r16
	sbc r0,r0	;sign extend
    8f32:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    8f34:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb
    8f36:	d0 1d       	adc	r29, r0
;142
#if SOUND_CHANNEL_5_ENABLE==1
	;channel 5 PCM -- 45 cycles

	;add fractional part
	lds r16,tr5_pos_frac
    8f38:	00 91 1d 0b 	lds	r16, 0x0B1D
	lds r17,tr5_step_lo 
    8f3c:	10 91 1b 0b 	lds	r17, 0x0B1B
	add r16,r17
    8f40:	01 0f       	add	r16, r17
	sts tr5_pos_frac,r16
    8f42:	00 93 1d 0b 	sts	0x0B1D, r16

	;add lo
	lds ZL,tr5_pos_lo
    8f46:	e0 91 1e 0b 	lds	r30, 0x0B1E
	lds r17,tr5_step_hi 
    8f4a:	10 91 1c 0b 	lds	r17, 0x0B1C
	adc ZL,r17
    8f4e:	e1 1f       	adc	r30, r17

	;add hi
	lds ZH,tr5_pos_hi
    8f50:	f0 91 1f 0b 	lds	r31, 0x0B1F
	ldi r16,0
    8f54:	00 e0       	ldi	r16, 0x00	; 0
	adc ZH,r16
    8f56:	f0 1f       	adc	r31, r16

	movw r16,ZL
    8f58:	8f 01       	movw	r16, r30
	lds r0,tr5_loop_len_lo
    8f5a:	00 90 20 0b 	lds	r0, 0x0B20
	lds r1,tr5_loop_len_hi	
    8f5e:	10 90 21 0b 	lds	r1, 0x0B21
	sub r16,r0
    8f62:	00 19       	sub	r16, r0
	sbc r17,r1
    8f64:	11 09       	sbc	r17, r1
	lds r0,tr5_loop_end_lo
    8f66:	00 90 22 0b 	lds	r0, 0x0B22
	lds r1,tr5_loop_end_hi
    8f6a:	10 90 23 0b 	lds	r1, 0x0B23

	cp ZL,r0
    8f6e:	e0 15       	cp	r30, r0
	cpc ZH,r1
    8f70:	f1 05       	cpc	r31, r1
	brlo .+2
    8f72:	08 f0       	brcs	.+2      	; 0x8f76 <ch4_end+0x5c>
	movw ZL,r16
    8f74:	f8 01       	movw	r30, r16

	sts tr5_pos_lo,ZL
    8f76:	e0 93 1e 0b 	sts	0x0B1E, r30
	sts tr5_pos_hi,ZH
    8f7a:	f0 93 1f 0b 	sts	0x0B1F, r31

	lpm	r16,Z	;load sample
    8f7e:	04 91       	lpm	r16, Z
	lds r17,tr5_vol
    8f80:	10 91 1a 0b 	lds	r17, 0x0B1A

	mulsu r16,r17;(sample*mixing vol)
    8f84:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend
    8f86:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    8f88:	c1 0d       	add	r28, r1
	adc r29,r0	;adjust mix buffer msb	
    8f8a:	d0 1d       	adc	r29, r0
#endif
	
	;final processing

	;clip
	clr r0
    8f8c:	00 24       	eor	r0, r0
	cpi r28,128	;> 127?
    8f8e:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0	
    8f90:	d0 05       	cpc	r29, r0
	brlt .+2
    8f92:	0c f0       	brlt	.+2      	; 0x8f96 <ch4_end+0x7c>
	ldi r28,127
    8f94:	cf e7       	ldi	r28, 0x7F	; 127
	
	dec r0
    8f96:	0a 94       	dec	r0
	cpi r28,-128; <-128?
    8f98:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0xff
    8f9a:	d0 05       	cpc	r29, r0
	brge .+2
    8f9c:	0c f4       	brge	.+2      	; 0x8fa0 <ch4_end+0x86>
	ldi r28,-128
    8f9e:	c0 e8       	ldi	r28, 0x80	; 128

	subi r28,128	;convert to unsigned		
    8fa0:	c0 58       	subi	r28, 0x80	; 128
	sts _SFR_MEM_ADDR(OCR2A),r28 ;output sound byte
    8fa2:	c0 93 b3 00 	sts	0x00B3, r28

00008fa6 <update_sound_end>:
#endif


update_sound_end:

	pop r29
    8fa6:	df 91       	pop	r29
	pop r28
    8fa8:	cf 91       	pop	r28
	pop r18
    8faa:	2f 91       	pop	r18
	pop r17
    8fac:	1f 91       	pop	r17
	pop r16
    8fae:	0f 91       	pop	r16
	
	ret
    8fb0:	08 95       	ret

00008fb2 <SetSpritesTileTable>:
; C-callable
; r25:r24=pointer to sprites pixel data.
;*****************************
.section .text.SetSpritesTileTable
SetSpritesTileTable:
	sts sprites_tile_banks,r24
    8fb2:	80 93 d8 0a 	sts	0x0AD8, r24
	sts sprites_tile_banks+1,r25
    8fb6:	90 93 d9 0a 	sts	0x0AD9, r25
	ret
    8fba:	08 95       	ret

00008fbc <ClearVram>:
; C-callable
;************************************
.section .text.ClearVram
ClearVram:
	//init vram		
	ldi r30,lo8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    8fbc:	e8 e4       	ldi	r30, 0x48	; 72
	ldi r31,hi8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    8fbe:	f3 e0       	ldi	r31, 0x03	; 3

	ldi XL,lo8(vram)
    8fc0:	a0 e2       	ldi	r26, 0x20	; 32
	ldi XH,hi8(vram)
    8fc2:	b1 e0       	ldi	r27, 0x01	; 1

	ldi r22,RAM_TILES_COUNT
    8fc4:	68 e1       	ldi	r22, 0x18	; 24

00008fc6 <fill_vram_loop>:

fill_vram_loop:
	st X+,r22
    8fc6:	6d 93       	st	X+, r22
	sbiw r30,1
    8fc8:	31 97       	sbiw	r30, 0x01	; 1
	brne fill_vram_loop
    8fca:	e9 f7       	brne	.-6      	; 0x8fc6 <fill_vram_loop>

	clr r1
    8fcc:	11 24       	eor	r1, r1

	ret
    8fce:	08 95       	ret

00008fd0 <SetFont>:
; r22=Y pos (8 bit)
; r20=Font tile No (8 bit)
;************************************
.section .text.SetFont
SetFont:
	lds r21,font_tile_index
    8fd0:	50 91 e2 0a 	lds	r21, 0x0AE2
	add r20,21
    8fd4:	45 0f       	add	r20, r21
	rjmp SetTile	
    8fd6:	00 c0       	rjmp	.+0      	; 0x8fd8 <SetTile>

00008fd8 <SetTile>:

	ret

#else

	clr r25
    8fd8:	99 27       	eor	r25, r25
	clr r23	
    8fda:	77 27       	eor	r23, r23

	ldi r18,VRAM_TILES_H
    8fdc:	2e e1       	ldi	r18, 0x1E	; 30

	mul r22,r18		;calculate Y line addr in vram
    8fde:	62 9f       	mul	r22, r18
	add r0,r24		;add X offset
    8fe0:	08 0e       	add	r0, r24
	adc r1,r25
    8fe2:	19 1e       	adc	r1, r25
	ldi XL,lo8(vram)
    8fe4:	a0 e2       	ldi	r26, 0x20	; 32
	ldi XH,hi8(vram)
    8fe6:	b1 e0       	ldi	r27, 0x01	; 1
	add XL,r0
    8fe8:	a0 0d       	add	r26, r0
	adc XH,r1
    8fea:	b1 1d       	adc	r27, r1
	
	subi r20,~(RAM_TILES_COUNT-1)	
    8fec:	48 5e       	subi	r20, 0xE8	; 232
	st X,r20
    8fee:	4c 93       	st	X, r20

	clr r1
    8ff0:	11 24       	eor	r1, r1

	ret
    8ff2:	08 95       	ret

00008ff4 <SetFontTilesIndex>:
; C-callable
; r24=First font tile index in tile table (8 bit)
;************************************
.section .text.SetFontTilesIndex
	SetFontTilesIndex:
	sts font_tile_index,r24
    8ff4:	80 93 e2 0a 	sts	0x0AE2, r24
	ret
    8ff8:	08 95       	ret

00008ffa <SetTileTable>:
; C-callable
; r25:r24=pointer to tiles data
;************************************
.section .text.SetTileTable
SetTileTable:
	sts tile_table_lo,r24
    8ffa:	80 93 e0 0a 	sts	0x0AE0, r24
	sts tile_table_hi,r25	
    8ffe:	90 93 e1 0a 	sts	0x0AE1, r25
	ret
    9002:	08 95       	ret

00009004 <GetVsyncFlag>:
;
; C-callable
;************************************
.section .text.GetVsyncFlag
GetVsyncFlag:
	lds r24,sync_flags
    9004:	80 91 e8 0a 	lds	r24, 0x0AE8
	andi r24,SYNC_FLAG_VSYNC
    9008:	81 70       	andi	r24, 0x01	; 1
	ret
    900a:	08 95       	ret

0000900c <ClearVsyncFlag>:
; 
; C-callable
;*****************************
.section .text.ClearVsyncFlag
ClearVsyncFlag:
	lds r18,sync_flags
    900c:	20 91 e8 0a 	lds	r18, 0x0AE8
	andi r18,~SYNC_FLAG_VSYNC
    9010:	2e 7f       	andi	r18, 0xFE	; 254
	sts sync_flags,r18
    9012:	20 93 e8 0a 	sts	0x0AE8, r18
	ret
    9016:	08 95       	ret

00009018 <ReadJoypad>:
; r24=joypad No (0 or 1)
; returns: (int) r25:r24
;*****************************
.section .text.ReadJoypad
ReadJoypad:	
	tst r24
    9018:	88 23       	and	r24, r24
	brne rj_p2
    901a:	29 f4       	brne	.+10     	; 0x9026 <rj_p2>
		
	lds r24,joypad1_status_lo
    901c:	80 91 ef 0a 	lds	r24, 0x0AEF
	lds r25,joypad1_status_lo+1
    9020:	90 91 f0 0a 	lds	r25, 0x0AF0
	ret
    9024:	08 95       	ret

00009026 <rj_p2>:
rj_p2:
	lds r24,joypad2_status_lo
    9026:	80 91 f3 0a 	lds	r24, 0x0AF3
	lds r25,joypad2_status_lo+1	
    902a:	90 91 f4 0a 	lds	r25, 0x0AF4

	ret
    902e:	08 95       	ret

00009030 <WaitUs>:
; r25:r24 - us to wait
; returns: void
;****************************
.section .text.WaitUs
WaitUs:	
	ldi r23,8
    9030:	78 e0       	ldi	r23, 0x08	; 8
	dec 23
    9032:	7a 95       	dec	r23
	brne .-4 ;~1 us
    9034:	f1 f7       	brne	.-4      	; 0x9032 <WaitUs+0x2>
	nop
    9036:	00 00       	nop
	sbiw r24,1
    9038:	01 97       	sbiw	r24, 0x01	; 1
	brne WaitUs
    903a:	d1 f7       	brne	.-12     	; 0x9030 <WaitUs>

	ret
    903c:	08 95       	ret

0000903e <WriteEeprom>:
;****************************

.section .text.WriteEeprom
WriteEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    903e:	f9 99       	sbic	0x1f, 1	; 31
   rjmp WriteEeprom
    9040:	fe cf       	rjmp	.-4      	; 0x903e <WriteEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    9042:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    9044:	81 bd       	out	0x21, r24	; 33
   ; Write data (r22) to Data Register
   out _SFR_IO_ADDR(EEDR),r22
    9046:	60 bd       	out	0x20, r22	; 32
   cli
    9048:	f8 94       	cli
   ; Write logical one to EEMPE
   sbi _SFR_IO_ADDR(EECR),EEMPE
    904a:	fa 9a       	sbi	0x1f, 2	; 31
   ; Start eeprom write by setting EEPE
   sbi _SFR_IO_ADDR(EECR),EEPE
    904c:	f9 9a       	sbi	0x1f, 1	; 31
   sei
    904e:	78 94       	sei
   ret
    9050:	08 95       	ret

00009052 <ReadEeprom>:
; r24 - value read
;****************************
.section .text.ReadEeprom
ReadEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    9052:	f9 99       	sbic	0x1f, 1	; 31
   rjmp ReadEeprom
    9054:	fe cf       	rjmp	.-4      	; 0x9052 <ReadEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    9056:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    9058:	81 bd       	out	0x21, r24	; 33
   ; Start eeprom read by writing EERE
   cli
    905a:	f8 94       	cli
   sbi _SFR_IO_ADDR(EECR),EERE
    905c:	f8 9a       	sbi	0x1f, 0	; 31
   ; Read data from Data Register
   in r24,_SFR_IO_ADDR(EEDR)
    905e:	80 b5       	in	r24, 0x20	; 32
   sei
    9060:	78 94       	sei
   ret
    9062:	08 95       	ret

00009064 <wdt_randomize>:
	.global wdt_randomize
	.section .text.wdt_randomize
	wdt_randomize:

		;set timer 1 full speed count to 0xffff
		ldi r24,0
    9064:	80 e0       	ldi	r24, 0x00	; 0
		sts sync_pulse,r24
    9066:	80 93 e7 0a 	sts	0x0AE7, r24


		sts _SFR_MEM_ADDR(TIMSK1),r24
    906a:	80 93 6f 00 	sts	0x006F, r24
		sts _SFR_MEM_ADDR(OCR1AL),r24
    906e:	80 93 88 00 	sts	0x0088, r24
		sts _SFR_MEM_ADDR(OCR1AH),r24
    9072:	80 93 89 00 	sts	0x0089, r24
		sts _SFR_MEM_ADDR(OCR1BL),r24
    9076:	80 93 8a 00 	sts	0x008A, r24
		sts _SFR_MEM_ADDR(OCR1BH),r24
    907a:	80 93 8b 00 	sts	0x008B, r24
		sts _SFR_MEM_ADDR(TCNT1H),r24
    907e:	80 93 85 00 	sts	0x0085, r24
		sts _SFR_MEM_ADDR(TCNT1L),r24
    9082:	80 93 84 00 	sts	0x0084, r24
		
		sts _SFR_MEM_ADDR(TCCR1A),r24	
    9086:	80 93 80 00 	sts	0x0080, r24
		ldi 24,(1<<CS10)
    908a:	81 e0       	ldi	r24, 0x01	; 1
		sts _SFR_MEM_ADDR(TCCR1B),r24
    908c:	80 93 81 00 	sts	0x0081, r24

		cli
    9090:	f8 94       	cli

		;enable watchdog at fastest speed and generate interrupts
		ldi r24,0
    9092:	80 e0       	ldi	r24, 0x00	; 0
		sts _SFR_MEM_ADDR(MCUSR),r24	
    9094:	80 93 54 00 	sts	0x0054, r24
		ldi r25,(1<<WDIE)+(1<<WDE)+(0<<WDP3)+(0<<WDP2)+(0<<WDP1)+(0<<WDP0)
    9098:	98 e4       	ldi	r25, 0x48	; 72
		lds r24,_SFR_MEM_ADDR(WDTCSR)
    909a:	80 91 60 00 	lds	r24, 0x0060
		ori r24,(1<<WDCE)+(1<<WDE)
    909e:	88 61       	ori	r24, 0x18	; 24
		sts _SFR_MEM_ADDR(WDTCSR),r24
    90a0:	80 93 60 00 	sts	0x0060, r24
		sts _SFR_MEM_ADDR(WDTCSR),r25
    90a4:	90 93 60 00 	sts	0x0060, r25
	
		sei
    90a8:	78 94       	sei

000090aa <wait>:

		;generate 8 random cycles
	wait:
		lds r24,sync_pulse ;using the yet unalocated "sync_pulse" as a temp variable
    90aa:	80 91 e7 0a 	lds	r24, 0x0AE7
		cpi r24,8
    90ae:	88 30       	cpi	r24, 0x08	; 8
		brlo wait
    90b0:	e0 f3       	brcs	.-8      	; 0x90aa <wait>

		ret
    90b2:	08 95       	ret

000090b4 <GetTrueRandomSeed>:
	;********************************

	.global GetTrueRandomSeed
	.section .text.GetTrueRandomSeed
	GetTrueRandomSeed:
		lds r24,random_value
    90b4:	80 91 f9 0a 	lds	r24, 0x0AF9
		lds r25,random_value+1
    90b8:	90 91 fa 0a 	lds	r25, 0x0AFA
		ret
    90bc:	08 95       	ret

000090be <__vector_8>:
	;*************************************
	; Watchdog timer interrupt
	;*************************************
	WDT_vect:
		;save flags & status register
		push r16
    90be:	0f 93       	push	r16
		push r17
    90c0:	1f 93       	push	r17

		in r16,_SFR_IO_ADDR(SREG)
    90c2:	0f b7       	in	r16, 0x3f	; 63
		push r16
    90c4:	0f 93       	push	r16

		lds r16,sync_pulse
    90c6:	00 91 e7 0a 	lds	r16, 0x0AE7
		inc r16
    90ca:	03 95       	inc	r16
		sts sync_pulse,r16
    90cc:	00 93 e7 0a 	sts	0x0AE7, r16

		;XOR succesive timer1 LSB into a int
		sbrc r16,0
    90d0:	00 fd       	sbrc	r16, 0
		rjmp 1f
    90d2:	08 c0       	rjmp	.+16     	; 0x90e4 <__vector_8+0x26>
		lds r17,random_value
    90d4:	10 91 f9 0a 	lds	r17, 0x0AF9
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    90d8:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    90dc:	10 27       	eor	r17, r16
		sts random_value,r17
    90de:	10 93 f9 0a 	sts	0x0AF9, r17
		rjmp 2f
    90e2:	07 c0       	rjmp	.+14     	; 0x90f2 <__vector_8+0x34>
	1:
		lds r17,random_value+1
    90e4:	10 91 fa 0a 	lds	r17, 0x0AFA
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    90e8:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    90ec:	10 27       	eor	r17, r16
		sts random_value+1,r17
    90ee:	10 93 fa 0a 	sts	0x0AFA, r17
	2:

		ldi r16,(1<<WDIE)+(1<<WDE)
    90f2:	08 e4       	ldi	r16, 0x48	; 72
		sts _SFR_MEM_ADDR(WDTCSR),r16
    90f4:	00 93 60 00 	sts	0x0060, r16

		;restore flags
		pop r16
    90f8:	0f 91       	pop	r16
		out _SFR_IO_ADDR(SREG),r16
    90fa:	0f bf       	out	0x3f, r16	; 63
	
		pop r17
    90fc:	1f 91       	pop	r17
		pop r16
    90fe:	0f 91       	pop	r16
		reti
    9100:	18 95       	reti

00009102 <SoftReset>:

/**
 * Performs a software reset
 */
void SoftReset(void){        
	wdt_enable(WDTO_15MS);  
    9102:	98 e0       	ldi	r25, 0x08	; 8
    9104:	88 e1       	ldi	r24, 0x18	; 24
    9106:	0f b6       	in	r0, 0x3f	; 63
    9108:	f8 94       	cli
    910a:	a8 95       	wdr
    910c:	80 93 60 00 	sts	0x0060, r24
    9110:	0f be       	out	0x3f, r0	; 63
    9112:	90 93 60 00 	sts	0x0060, r25
	while(1);
    9116:	ff cf       	rjmp	.-2      	; 0x9116 <SoftReset+0x14>

00009118 <ReadButtons>:
void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
	unsigned char i;

	//latch controllers
	JOYPAD_OUT_PORT|=_BV(JOYPAD_LATCH_PIN);
    9118:	12 9a       	sbi	0x02, 2	; 2
		}else{
			Wait200ns();
			Wait200ns();
		}	
	#else
		Wait200ns();
    911a:	c8 95       	lpm
    911c:	c8 95       	lpm
		Wait200ns();
    911e:	c8 95       	lpm
    9120:	c8 95       	lpm
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));
    9122:	12 98       	cbi	0x02, 2	; 2
    9124:	40 e1       	ldi	r20, 0x10	; 16
	DisplayLogo();
	
}

void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
    9126:	80 e0       	ldi	r24, 0x00	; 0
    9128:	90 e0       	ldi	r25, 0x00	; 0
    912a:	20 e0       	ldi	r18, 0x00	; 0
    912c:	30 e0       	ldi	r19, 0x00	; 0


	//read button states
	for(i=0;i<16;i++){

		p1ButtonsLo>>=1;
    912e:	36 95       	lsr	r19
    9130:	27 95       	ror	r18
		p2ButtonsLo>>=1;
    9132:	96 95       	lsr	r25
    9134:	87 95       	ror	r24
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    9136:	c8 95       	lpm
    9138:	c8 95       	lpm
			Wait200ns();
    913a:	c8 95       	lpm
    913c:	c8 95       	lpm
		#endif
			
		//pulse clock pin		
		JOYPAD_OUT_PORT&=~(_BV(JOYPAD_CLOCK_PIN));
    913e:	13 98       	cbi	0x02, 3	; 2
		
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) p1ButtonsLo|=(1<<15);
    9140:	00 9b       	sbis	0x00, 0	; 0
    9142:	30 68       	ori	r19, 0x80	; 128
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) p2ButtonsLo|=(1<<15);
    9144:	01 9b       	sbis	0x00, 1	; 0
    9146:	90 68       	ori	r25, 0x80	; 128
		
		JOYPAD_OUT_PORT|=_BV(JOYPAD_CLOCK_PIN);
    9148:	13 9a       	sbi	0x02, 3	; 2
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    914a:	c8 95       	lpm
    914c:	c8 95       	lpm
			Wait200ns();
    914e:	c8 95       	lpm
    9150:	c8 95       	lpm
    9152:	41 50       	subi	r20, 0x01	; 1
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));


	//read button states
	for(i=0;i<16;i++){
    9154:	61 f7       	brne	.-40     	; 0x912e <ReadButtons+0x16>
		#endif

	}

	#if JOYSTICK==TYPE_SNES
		joypad1_status_lo=p1ButtonsLo;
    9156:	30 93 f0 0a 	sts	0x0AF0, r19
    915a:	20 93 ef 0a 	sts	0x0AEF, r18
		joypad2_status_lo=p2ButtonsLo;
    915e:	90 93 f4 0a 	sts	0x0AF4, r25
    9162:	80 93 f3 0a 	sts	0x0AF3, r24
	#else
		joypad1_status_lo=p1ButtonsLo&0xff;
		joypad2_status_lo=p2ButtonsLo&0xff;	
	#endif

	if(joypad1_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B) || joypad2_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B)){
    9166:	80 91 ef 0a 	lds	r24, 0x0AEF
    916a:	90 91 f0 0a 	lds	r25, 0x0AF0
    916e:	0f 97       	sbiw	r24, 0x0f	; 15
    9170:	31 f0       	breq	.+12     	; 0x917e <ReadButtons+0x66>
    9172:	80 91 f3 0a 	lds	r24, 0x0AF3
    9176:	90 91 f4 0a 	lds	r25, 0x0AF4
    917a:	0f 97       	sbiw	r24, 0x0f	; 15
    917c:	11 f4       	brne	.+4      	; 0x9182 <ReadButtons+0x6a>
		SoftReset();
    917e:	0e 94 81 48 	call	0x9102	; 0x9102 <SoftReset>
    9182:	08 95       	ret

00009184 <ReadControllers>:
 * program when CONTROLLERS_VSYNC_READ==0.
*/
void ReadControllers(){

	//Detect if devices are connected.
	joypadsConnectionStatus=0;
    9184:	10 92 41 0b 	sts	0x0B41, r1
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) joypadsConnectionStatus|=1;
    9188:	00 99       	sbic	0x00, 0	; 0
    918a:	03 c0       	rjmp	.+6      	; 0x9192 <ReadControllers+0xe>
    918c:	81 e0       	ldi	r24, 0x01	; 1
    918e:	80 93 41 0b 	sts	0x0B41, r24
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) joypadsConnectionStatus|=2;
    9192:	01 99       	sbic	0x00, 1	; 0
    9194:	05 c0       	rjmp	.+10     	; 0x91a0 <ReadControllers+0x1c>
    9196:	80 91 41 0b 	lds	r24, 0x0B41
    919a:	82 60       	ori	r24, 0x02	; 2
    919c:	80 93 41 0b 	sts	0x0B41, r24
			
	//read the standard buttons
	ReadButtons();
    91a0:	0c 94 8c 48 	jmp	0x9118	; 0x9118 <ReadButtons>

000091a4 <FormatEeprom>:
	return resp;
}

	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {
    91a4:	cf 93       	push	r28
    91a6:	df 93       	push	r29
    91a8:	c0 e0       	ldi	r28, 0x00	; 0
    91aa:	d0 e0       	ldi	r29, 0x00	; 0
    91ac:	fe 01       	movw	r30, r28
    91ae:	e2 56       	subi	r30, 0x62	; 98
    91b0:	ff 4f       	sbci	r31, 0xFF	; 255

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
    91b2:	64 91       	lpm	r22, Z
    91b4:	ce 01       	movw	r24, r28
    91b6:	0e 94 1f 48 	call	0x903e	; 0x903e <WriteEeprom>
    91ba:	21 96       	adiw	r28, 0x01	; 1
	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
    91bc:	c0 32       	cpi	r28, 0x20	; 32
    91be:	d1 05       	cpc	r29, r1
    91c0:	a9 f7       	brne	.-22     	; 0x91ac <FormatEeprom+0x8>
    91c2:	c0 e2       	ldi	r28, 0x20	; 32
    91c4:	d0 e0       	ldi	r29, 0x00	; 0
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
    91c6:	6f ef       	ldi	r22, 0xFF	; 255
    91c8:	ce 01       	movw	r24, r28
    91ca:	0e 94 1f 48 	call	0x903e	; 0x903e <WriteEeprom>
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
    91ce:	6f ef       	ldi	r22, 0xFF	; 255
    91d0:	ce 01       	movw	r24, r28
    91d2:	01 96       	adiw	r24, 0x01	; 1
    91d4:	0e 94 1f 48 	call	0x903e	; 0x903e <WriteEeprom>
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
    91d8:	a0 96       	adiw	r28, 0x20	; 32
    91da:	c1 15       	cp	r28, r1
    91dc:	88 e0       	ldi	r24, 0x08	; 8
    91de:	d8 07       	cpc	r29, r24
    91e0:	91 f7       	brne	.-28     	; 0x91c6 <FormatEeprom+0x22>
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
   }
   
}
    91e2:	df 91       	pop	r29
    91e4:	cf 91       	pop	r28
    91e6:	08 95       	ret

000091e8 <isEepromFormatted>:
	  }
   }
}
	
//returns true if the EEPROM has been setup to work with the kernel.
bool isEepromFormatted(){
    91e8:	cf 93       	push	r28
	unsigned id;
	id=ReadEeprom(0)+(ReadEeprom(1)<<8);
    91ea:	80 e0       	ldi	r24, 0x00	; 0
    91ec:	90 e0       	ldi	r25, 0x00	; 0
    91ee:	0e 94 29 48 	call	0x9052	; 0x9052 <ReadEeprom>
    91f2:	c8 2f       	mov	r28, r24
    91f4:	81 e0       	ldi	r24, 0x01	; 1
    91f6:	90 e0       	ldi	r25, 0x00	; 0
    91f8:	0e 94 29 48 	call	0x9052	; 0x9052 <ReadEeprom>
    91fc:	28 2f       	mov	r18, r24
    91fe:	30 e0       	ldi	r19, 0x00	; 0
    9200:	32 2f       	mov	r19, r18
    9202:	22 27       	eor	r18, r18
    9204:	2c 0f       	add	r18, r28
    9206:	31 1d       	adc	r19, r1
	return (id==EEPROM_SIGNATURE);
    9208:	81 e0       	ldi	r24, 0x01	; 1
    920a:	2a 35       	cpi	r18, 0x5A	; 90
    920c:	35 45       	sbci	r19, 0x55	; 85
    920e:	09 f0       	breq	.+2      	; 0x9212 <isEepromFormatted+0x2a>
    9210:	80 e0       	ldi	r24, 0x00	; 0
}
    9212:	cf 91       	pop	r28
    9214:	08 95       	ret

00009216 <EepromBlockExists>:
 * @return
 *  0x00 = Success, Block exists.
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK.
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND.
 */
char EepromBlockExists(unsigned int blockId, u16* eepromAddr, u8* nextFreeBlockId){
    9216:	8f 92       	push	r8
    9218:	9f 92       	push	r9
    921a:	af 92       	push	r10
    921c:	bf 92       	push	r11
    921e:	cf 92       	push	r12
    9220:	df 92       	push	r13
    9222:	ef 92       	push	r14
    9224:	ff 92       	push	r15
    9226:	0f 93       	push	r16
    9228:	1f 93       	push	r17
    922a:	cf 93       	push	r28
    922c:	df 93       	push	r29
	u8 nextFreeBlock=0;
	u8 result=EEPROM_ERROR_BLOCK_NOT_FOUND;
	u16 id;
	*eepromAddr=0;
    922e:	fb 01       	movw	r30, r22
    9230:	11 82       	std	Z+1, r1	; 0x01
    9232:	10 82       	st	Z, r1

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    9234:	8f 3f       	cpi	r24, 0xFF	; 255
    9236:	ff ef       	ldi	r31, 0xFF	; 255
    9238:	9f 07       	cpc	r25, r31
    923a:	89 f1       	breq	.+98     	; 0x929e <EepromBlockExists+0x88>
    923c:	6a 01       	movw	r12, r20
    923e:	8b 01       	movw	r16, r22
    9240:	7c 01       	movw	r14, r24
    9242:	a1 2c       	mov	r10, r1
    9244:	b1 2c       	mov	r11, r1
    9246:	c0 e0       	ldi	r28, 0x00	; 0
    9248:	d3 e0       	ldi	r29, 0x03	; 3
    924a:	91 2c       	mov	r9, r1
		
	//scan all blocks and get the memory adress of that block and the next free block
	for(u8 i=0;i<EEPROM_MAX_BLOCKS;i++){
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
    924c:	c5 01       	movw	r24, r10
    924e:	0e 94 29 48 	call	0x9052	; 0x9052 <ReadEeprom>
    9252:	88 2e       	mov	r8, r24
    9254:	c5 01       	movw	r24, r10
    9256:	01 96       	adiw	r24, 0x01	; 1
    9258:	0e 94 29 48 	call	0x9052	; 0x9052 <ReadEeprom>
    925c:	28 2f       	mov	r18, r24
    925e:	30 e0       	ldi	r19, 0x00	; 0
    9260:	32 2f       	mov	r19, r18
    9262:	22 27       	eor	r18, r18
    9264:	28 0d       	add	r18, r8
    9266:	31 1d       	adc	r19, r1
		
		if(id==blockId){
    9268:	2e 15       	cp	r18, r14
    926a:	3f 05       	cpc	r19, r15
    926c:	29 f4       	brne	.+10     	; 0x9278 <EepromBlockExists+0x62>
			*eepromAddr=(i*EEPROM_BLOCK_SIZE);
    926e:	f8 01       	movw	r30, r16
    9270:	b1 82       	std	Z+1, r11	; 0x01
    9272:	a0 82       	st	Z, r10
			result=EEPROM_OK;
    9274:	d0 e0       	ldi	r29, 0x00	; 0
    9276:	0b c0       	rjmp	.+22     	; 0x928e <EepromBlockExists+0x78>
		}
		
		if(id==0xffff && nextFreeBlock==0){
    9278:	2f 3f       	cpi	r18, 0xFF	; 255
    927a:	3f 4f       	sbci	r19, 0xFF	; 255
    927c:	41 f4       	brne	.+16     	; 0x928e <EepromBlockExists+0x78>
    927e:	91 10       	cpse	r9, r1
    9280:	06 c0       	rjmp	.+12     	; 0x928e <EepromBlockExists+0x78>
			nextFreeBlock=i;
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
    9282:	c1 14       	cp	r12, r1
    9284:	d1 04       	cpc	r13, r1
    9286:	11 f0       	breq	.+4      	; 0x928c <EepromBlockExists+0x76>
    9288:	f6 01       	movw	r30, r12
    928a:	c0 83       	st	Z, r28
    928c:	9c 2e       	mov	r9, r28
	*eepromAddr=0;

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
		
	//scan all blocks and get the memory adress of that block and the next free block
	for(u8 i=0;i<EEPROM_MAX_BLOCKS;i++){
    928e:	cf 5f       	subi	r28, 0xFF	; 255
    9290:	f0 e2       	ldi	r31, 0x20	; 32
    9292:	af 0e       	add	r10, r31
    9294:	b1 1c       	adc	r11, r1
    9296:	c0 34       	cpi	r28, 0x40	; 64
    9298:	c9 f6       	brne	.-78     	; 0x924c <EepromBlockExists+0x36>
			nextFreeBlock=i;
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
		}
	}

	return result;
    929a:	8d 2f       	mov	r24, r29
    929c:	01 c0       	rjmp	.+2      	; 0x92a0 <EepromBlockExists+0x8a>
	u8 nextFreeBlock=0;
	u8 result=EEPROM_ERROR_BLOCK_NOT_FOUND;
	u16 id;
	*eepromAddr=0;

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    929e:	81 e0       	ldi	r24, 0x01	; 1
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
		}
	}

	return result;
}
    92a0:	df 91       	pop	r29
    92a2:	cf 91       	pop	r28
    92a4:	1f 91       	pop	r17
    92a6:	0f 91       	pop	r16
    92a8:	ff 90       	pop	r15
    92aa:	ef 90       	pop	r14
    92ac:	df 90       	pop	r13
    92ae:	cf 90       	pop	r12
    92b0:	bf 90       	pop	r11
    92b2:	af 90       	pop	r10
    92b4:	9f 90       	pop	r9
    92b6:	8f 90       	pop	r8
    92b8:	08 95       	ret

000092ba <EepromWriteBlock>:
 * Returns:
 *  0x00 = Success
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x02 = EEPROM_ERROR_FULL
 */
char EepromWriteBlock(struct EepromBlockStruct *block){
    92ba:	ef 92       	push	r14
    92bc:	ff 92       	push	r15
    92be:	0f 93       	push	r16
    92c0:	1f 93       	push	r17
    92c2:	cf 93       	push	r28
    92c4:	df 93       	push	r29
    92c6:	00 d0       	rcall	.+0      	; 0x92c8 <EepromWriteBlock+0xe>
    92c8:	1f 92       	push	r1
    92ca:	cd b7       	in	r28, 0x3d	; 61
    92cc:	de b7       	in	r29, 0x3e	; 62
    92ce:	8c 01       	movw	r16, r24
	u16 eepromAddr=0;
    92d0:	1a 82       	std	Y+2, r1	; 0x02
    92d2:	19 82       	std	Y+1, r1	; 0x01
	u8 *srcPtr=(unsigned char *)block,res,nextFreeBlock=0;
    92d4:	1b 82       	std	Y+3, r1	; 0x03

	res=EepromBlockExists(block->id,&eepromAddr,&nextFreeBlock);
    92d6:	ae 01       	movw	r20, r28
    92d8:	4d 5f       	subi	r20, 0xFD	; 253
    92da:	5f 4f       	sbci	r21, 0xFF	; 255
    92dc:	be 01       	movw	r22, r28
    92de:	6f 5f       	subi	r22, 0xFF	; 255
    92e0:	7f 4f       	sbci	r23, 0xFF	; 255
    92e2:	fc 01       	movw	r30, r24
    92e4:	80 81       	ld	r24, Z
    92e6:	91 81       	ldd	r25, Z+1	; 0x01
    92e8:	0e 94 0b 49 	call	0x9216	; 0x9216 <EepromBlockExists>
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;
    92ec:	88 23       	and	r24, r24
    92ee:	11 f0       	breq	.+4      	; 0x92f4 <EepromWriteBlock+0x3a>
    92f0:	83 30       	cpi	r24, 0x03	; 3
    92f2:	19 f5       	brne	.+70     	; 0x933a <EepromWriteBlock+0x80>

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    92f4:	89 81       	ldd	r24, Y+1	; 0x01
    92f6:	9a 81       	ldd	r25, Y+2	; 0x02
    92f8:	89 2b       	or	r24, r25
    92fa:	49 f4       	brne	.+18     	; 0x930e <EepromWriteBlock+0x54>
    92fc:	8b 81       	ldd	r24, Y+3	; 0x03
    92fe:	88 23       	and	r24, r24
    9300:	d9 f0       	breq	.+54     	; 0x9338 <EepromWriteBlock+0x7e>
	if(eepromAddr==0 && nextFreeBlock!=0) eepromAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;
    9302:	f0 e2       	ldi	r31, 0x20	; 32
    9304:	8f 9f       	mul	r24, r31
    9306:	c0 01       	movw	r24, r0
    9308:	11 24       	eor	r1, r1
    930a:	9a 83       	std	Y+2, r25	; 0x02
    930c:	89 83       	std	Y+1, r24	; 0x01
    930e:	78 01       	movw	r14, r16
    9310:	20 e2       	ldi	r18, 0x20	; 32
    9312:	e2 0e       	add	r14, r18
    9314:	f1 1c       	adc	r15, r1

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
		WriteEeprom(eepromAddr++,*srcPtr);
    9316:	f8 01       	movw	r30, r16
    9318:	61 91       	ld	r22, Z+
    931a:	8f 01       	movw	r16, r30
    931c:	89 81       	ldd	r24, Y+1	; 0x01
    931e:	9a 81       	ldd	r25, Y+2	; 0x02
    9320:	9c 01       	movw	r18, r24
    9322:	2f 5f       	subi	r18, 0xFF	; 255
    9324:	3f 4f       	sbci	r19, 0xFF	; 255
    9326:	3a 83       	std	Y+2, r19	; 0x02
    9328:	29 83       	std	Y+1, r18	; 0x01
    932a:	0e 94 1f 48 	call	0x903e	; 0x903e <WriteEeprom>
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(eepromAddr==0 && nextFreeBlock!=0) eepromAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
    932e:	0e 15       	cp	r16, r14
    9330:	1f 05       	cpc	r17, r15
    9332:	89 f7       	brne	.-30     	; 0x9316 <EepromWriteBlock+0x5c>
		WriteEeprom(eepromAddr++,*srcPtr);
		srcPtr++;	
	}
	
	return 0;
    9334:	80 e0       	ldi	r24, 0x00	; 0
    9336:	01 c0       	rjmp	.+2      	; 0x933a <EepromWriteBlock+0x80>
	u8 *srcPtr=(unsigned char *)block,res,nextFreeBlock=0;

	res=EepromBlockExists(block->id,&eepromAddr,&nextFreeBlock);
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    9338:	82 e0       	ldi	r24, 0x02	; 2
		WriteEeprom(eepromAddr++,*srcPtr);
		srcPtr++;	
	}
	
	return 0;
}
    933a:	0f 90       	pop	r0
    933c:	0f 90       	pop	r0
    933e:	0f 90       	pop	r0
    9340:	df 91       	pop	r29
    9342:	cf 91       	pop	r28
    9344:	1f 91       	pop	r17
    9346:	0f 91       	pop	r16
    9348:	ff 90       	pop	r15
    934a:	ef 90       	pop	r14
    934c:	08 95       	ret

0000934e <EepromReadBlock>:
 * Returns: 
 *  0x00 = Success
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 */
char EepromReadBlock(unsigned int blockId,struct EepromBlockStruct *block){	
    934e:	cf 92       	push	r12
    9350:	df 92       	push	r13
    9352:	ff 92       	push	r15
    9354:	0f 93       	push	r16
    9356:	1f 93       	push	r17
    9358:	cf 93       	push	r28
    935a:	df 93       	push	r29
    935c:	00 d0       	rcall	.+0      	; 0x935e <EepromReadBlock+0x10>
    935e:	cd b7       	in	r28, 0x3d	; 61
    9360:	de b7       	in	r29, 0x3e	; 62
    9362:	8b 01       	movw	r16, r22
	u16 eepromAddr;
	u8 *blockPtr=(unsigned char *)block;

	u8 res=EepromBlockExists(blockId,&eepromAddr,NULL);
    9364:	40 e0       	ldi	r20, 0x00	; 0
    9366:	50 e0       	ldi	r21, 0x00	; 0
    9368:	be 01       	movw	r22, r28
    936a:	6f 5f       	subi	r22, 0xFF	; 255
    936c:	7f 4f       	sbci	r23, 0xFF	; 255
    936e:	0e 94 0b 49 	call	0x9216	; 0x9216 <EepromBlockExists>
    9372:	f8 2e       	mov	r15, r24
	if(res!=0) return res;
    9374:	81 11       	cpse	r24, r1
    9376:	13 c0       	rjmp	.+38     	; 0x939e <EepromReadBlock+0x50>
    9378:	68 01       	movw	r12, r16
    937a:	80 e2       	ldi	r24, 0x20	; 32
    937c:	c8 0e       	add	r12, r24
    937e:	d1 1c       	adc	r13, r1

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
		*blockPtr=ReadEeprom(eepromAddr++);
    9380:	89 81       	ldd	r24, Y+1	; 0x01
    9382:	9a 81       	ldd	r25, Y+2	; 0x02
    9384:	9c 01       	movw	r18, r24
    9386:	2f 5f       	subi	r18, 0xFF	; 255
    9388:	3f 4f       	sbci	r19, 0xFF	; 255
    938a:	3a 83       	std	Y+2, r19	; 0x02
    938c:	29 83       	std	Y+1, r18	; 0x01
    938e:	0e 94 29 48 	call	0x9052	; 0x9052 <ReadEeprom>
    9392:	f8 01       	movw	r30, r16
    9394:	81 93       	st	Z+, r24
    9396:	8f 01       	movw	r16, r30
	u8 *blockPtr=(unsigned char *)block;

	u8 res=EepromBlockExists(blockId,&eepromAddr,NULL);
	if(res!=0) return res;

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
    9398:	ec 15       	cp	r30, r12
    939a:	fd 05       	cpc	r31, r13
    939c:	89 f7       	brne	.-30     	; 0x9380 <EepromReadBlock+0x32>
		*blockPtr=ReadEeprom(eepromAddr++);
		blockPtr++;	
	}
	
	return EEPROM_OK;
}
    939e:	8f 2d       	mov	r24, r15
    93a0:	0f 90       	pop	r0
    93a2:	0f 90       	pop	r0
    93a4:	df 91       	pop	r29
    93a6:	cf 91       	pop	r28
    93a8:	1f 91       	pop	r17
    93aa:	0f 91       	pop	r16
    93ac:	ff 90       	pop	r15
    93ae:	df 90       	pop	r13
    93b0:	cf 90       	pop	r12
    93b2:	08 95       	ret

000093b4 <PatchCommand00>:
/*
 * Command 00: Set envelope speed per frame +127/-128, 0=no enveloppe
 * Param:
 */
void PatchCommand00(Track* track, char param){
	track->envelopeStep=param;
    93b4:	fc 01       	movw	r30, r24
    93b6:	67 87       	std	Z+15, r22	; 0x0f
    93b8:	08 95       	ret

000093ba <PatchCommand01>:
 * Param:
 */
void PatchCommand01(Track* track, char param){
	(void)track; //to remove unused warning
	#if MIXER_CHAN4_TYPE == 0
		mixer.channels.type.noise.barrel=0x0101;
    93ba:	e2 e0       	ldi	r30, 0x02	; 2
    93bc:	fb e0       	ldi	r31, 0x0B	; 11
    93be:	81 e0       	ldi	r24, 0x01	; 1
    93c0:	91 e0       	ldi	r25, 0x01	; 1
    93c2:	95 8b       	std	Z+21, r25	; 0x15
    93c4:	84 8b       	std	Z+20, r24	; 0x14
		mixer.channels.type.noise.params=param;
    93c6:	63 8b       	std	Z+19, r22	; 0x13
    93c8:	08 95       	ret

000093ca <PatchCommand05>:
}
/*
 * Command 05: End of note/fx
 * Param:
 */
void PatchCommand05(Track* track, char param){
    93ca:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags&=~(TRACK_FLAGS_PLAYING+TRACK_FLAGS_PRIORITY);	//patchPlaying=false,priority=0	
    93cc:	90 81       	ld	r25, Z
    93ce:	9f 75       	andi	r25, 0x5F	; 95
    93d0:	90 83       	st	Z, r25
    93d2:	08 95       	ret

000093d4 <PatchCommand06>:

/*
 * Command 06: Note hold
 * Param:
 */
void PatchCommand06(Track* track, char param){
    93d4:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags|=TRACK_FLAGS_HOLD_ENV; //patchEnvelopeHold=true;
    93d6:	90 81       	ld	r25, Z
    93d8:	90 64       	ori	r25, 0x40	; 64
    93da:	90 83       	st	Z, r25
    93dc:	08 95       	ret

000093de <PatchCommand07>:
 * Command 07: Set envelope volume
 * Param:
 */

void PatchCommand07(Track* track, char param){
	track->envelopeVol=param;
    93de:	fc 01       	movw	r30, r24
    93e0:	66 87       	std	Z+14, r22	; 0x0e
    93e2:	08 95       	ret

000093e4 <PatchCommand09>:
 * Command 09: Set tremolo level
 * Param:
*/

void PatchCommand09(Track* track, char param){
	track->tremoloLevel=param;
    93e4:	fc 01       	movw	r30, r24
    93e6:	62 87       	std	Z+10, r22	; 0x0a
    93e8:	08 95       	ret

000093ea <PatchCommand10>:
/*
 * Command 10: Set tremolo rate
 * Param:
*/
void PatchCommand10(Track* track, char param){
	track->tremoloRate=param;
    93ea:	fc 01       	movw	r30, r24
    93ec:	63 87       	std	Z+11, r22	; 0x0b
    93ee:	08 95       	ret

000093f0 <PatchCommand11>:
/*
 * Command 11: Pitch slide (linear) 
 * Param: (+/-) half steps to slide to
*/

void PatchCommand11(Track* track, char param){
    93f0:	cf 93       	push	r28
    93f2:	df 93       	push	r29
    93f4:	ec 01       	movw	r28, r24
    93f6:	46 2f       	mov	r20, r22
	//slide to note from current note
	s16 currentStep,targetStep,delta;	
	
	currentStep=pgm_read_word(&(steptable[track->note]));
    93f8:	29 81       	ldd	r18, Y+1	; 0x01
    93fa:	30 e0       	ldi	r19, 0x00	; 0
    93fc:	f9 01       	movw	r30, r18
    93fe:	ee 0f       	add	r30, r30
    9400:	ff 1f       	adc	r31, r31
    9402:	e8 5f       	subi	r30, 0xF8	; 248
    9404:	f2 46       	sbci	r31, 0x62	; 98
    9406:	65 91       	lpm	r22, Z+
    9408:	74 91       	lpm	r23, Z
	targetStep=pgm_read_word(&(steptable[track->note+param]));	
    940a:	f9 01       	movw	r30, r18
    940c:	e4 0f       	add	r30, r20
    940e:	f1 1d       	adc	r31, r1
    9410:	47 fd       	sbrc	r20, 7
    9412:	fa 95       	dec	r31
    9414:	ee 0f       	add	r30, r30
    9416:	ff 1f       	adc	r31, r31
    9418:	e8 5f       	subi	r30, 0xF8	; 248
    941a:	f2 46       	sbci	r31, 0x62	; 98
    941c:	85 91       	lpm	r24, Z+
    941e:	94 91       	lpm	r25, Z
	delta=((targetStep-currentStep)/track->slideSpeed);
    9420:	86 1b       	sub	r24, r22
    9422:	97 0b       	sbc	r25, r23
    9424:	68 85       	ldd	r22, Y+8	; 0x08
    9426:	70 e0       	ldi	r23, 0x00	; 0
    9428:	0e 94 85 76 	call	0xed0a	; 0xed0a <__divmodhi4>
	if(delta==0)delta++;
    942c:	61 15       	cp	r22, r1
    942e:	71 05       	cpc	r23, r1
    9430:	11 f4       	brne	.+4      	; 0x9436 <PatchCommand11+0x46>
    9432:	61 e0       	ldi	r22, 0x01	; 1
    9434:	70 e0       	ldi	r23, 0x00	; 0

	mixer.channels.all[track->channel].step+=delta;
    9436:	ea 81       	ldd	r30, Y+2	; 0x02
    9438:	86 e0       	ldi	r24, 0x06	; 6
    943a:	e8 9f       	mul	r30, r24
    943c:	f0 01       	movw	r30, r0
    943e:	11 24       	eor	r1, r1
    9440:	ee 5f       	subi	r30, 0xFE	; 254
    9442:	f4 4f       	sbci	r31, 0xF4	; 244
    9444:	81 81       	ldd	r24, Z+1	; 0x01
    9446:	92 81       	ldd	r25, Z+2	; 0x02
    9448:	86 0f       	add	r24, r22
    944a:	97 1f       	adc	r25, r23
    944c:	92 83       	std	Z+2, r25	; 0x02
    944e:	81 83       	std	Z+1, r24	; 0x01
	
	track->slideStep=delta;
    9450:	7e 83       	std	Y+6, r23	; 0x06
    9452:	6d 83       	std	Y+5, r22	; 0x05
	track->flags|=TRACK_FLAGS_SLIDING;
    9454:	88 81       	ld	r24, Y
    9456:	88 60       	ori	r24, 0x08	; 8
    9458:	88 83       	st	Y, r24
	track->slideNote=track->note+param;
    945a:	89 81       	ldd	r24, Y+1	; 0x01
    945c:	48 0f       	add	r20, r24
    945e:	4f 83       	std	Y+7, r20	; 0x07
}
    9460:	df 91       	pop	r29
    9462:	cf 91       	pop	r28
    9464:	08 95       	ret

00009466 <PatchCommand12>:
/*
 * Command 12: Pitch slide speed 
 * Param: slide speed (fixed 4:4)
 */
void PatchCommand12(Track* track, char param){
	track->slideSpeed=param;
    9466:	fc 01       	movw	r30, r24
    9468:	60 87       	std	Z+8, r22	; 0x08
    946a:	08 95       	ret

0000946c <PatchCommand13>:
 *  Command 13: Loop start
 * Description: Defines the start of a loop. Works in conjunction with command 14 (PC_LOOP_END).
 *		 Param: loop count
 */
void PatchCommand13(Track* track, char param){
	track->loopCount=(u8)param;
    946c:	fc 01       	movw	r30, r24
    946e:	64 83       	std	Z+4, r22	; 0x04
    9470:	08 95       	ret

00009472 <PatchCommand02>:
/*
 * Command 02: Set wave
 * Param:
 */
void PatchCommand02(Track* track, char param){
	SetMixerWave(track->channel,param);
    9472:	fc 01       	movw	r30, r24
    9474:	82 81       	ldd	r24, Z+2	; 0x02
    9476:	0c 94 1d 4e 	jmp	0x9c3a	; 0x9c3a <SetMixerWave>

0000947a <PatchCommand03>:
}
/*
 * Command 03: Note up * param
 * Param:
 */
void PatchCommand03(Track* track, char param){
    947a:	fc 01       	movw	r30, r24
	track->note+=param;
    947c:	91 81       	ldd	r25, Z+1	; 0x01
    947e:	69 0f       	add	r22, r25
    9480:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(track->channel,track->note);
    9482:	82 81       	ldd	r24, Z+2	; 0x02
    9484:	0c 94 06 4e 	jmp	0x9c0c	; 0x9c0c <SetMixerNote>

00009488 <PatchCommand04>:
}
/*
 * Command 04: Note down * param
 * Param:
 */
void PatchCommand04(Track* track, char param){
    9488:	fc 01       	movw	r30, r24
	track->note-=param;
    948a:	91 81       	ldd	r25, Z+1	; 0x01
    948c:	96 1b       	sub	r25, r22
    948e:	69 2f       	mov	r22, r25
    9490:	91 83       	std	Z+1, r25	; 0x01
	SetMixerNote(track->channel,track->note);
    9492:	82 81       	ldd	r24, Z+2	; 0x02
    9494:	0c 94 06 4e 	jmp	0x9c0c	; 0x9c0c <SetMixerNote>

00009498 <PatchCommand08>:
/*
 * Command 08: Set Note/Pitch
 * Param:
 */

void PatchCommand08(Track* track, char param){
    9498:	1f 93       	push	r17
    949a:	cf 93       	push	r28
    949c:	df 93       	push	r29
    949e:	ec 01       	movw	r28, r24
    94a0:	16 2f       	mov	r17, r22
	SetMixerNote(track->channel,param);
    94a2:	8a 81       	ldd	r24, Y+2	; 0x02
    94a4:	0e 94 06 4e 	call	0x9c0c	; 0x9c0c <SetMixerNote>
	track->note=param;
    94a8:	19 83       	std	Y+1, r17	; 0x01
	track->flags &= ~(TRACK_FLAGS_SLIDING);	
    94aa:	88 81       	ld	r24, Y
    94ac:	87 7f       	andi	r24, 0xF7	; 247
    94ae:	88 83       	st	Y, r24
}
    94b0:	df 91       	pop	r29
    94b2:	cf 91       	pop	r28
    94b4:	1f 91       	pop	r17
    94b6:	08 95       	ret

000094b8 <PatchCommand14>:
 *					1,PC_NOTE_DOWN,3,
 *					0,PC_LOOP_END,2,
 *					0,PATCH_END  
 *				};
 */
void PatchCommand14(Track* track, char param){
    94b8:	dc 01       	movw	r26, r24
	if(track->loopCount>0){
    94ba:	14 96       	adiw	r26, 0x04	; 4
    94bc:	8c 91       	ld	r24, X
    94be:	14 97       	sbiw	r26, 0x04	; 4
    94c0:	88 23       	and	r24, r24
    94c2:	19 f1       	breq	.+70     	; 0x950a <PatchCommand14+0x52>
    94c4:	55 96       	adiw	r26, 0x15	; 21
    94c6:	2d 91       	ld	r18, X+
    94c8:	3c 91       	ld	r19, X
    94ca:	56 97       	sbiw	r26, 0x16	; 22
		//track->patchCommandStreamPos=track->loopStart;
		if(param!=0){
    94cc:	66 23       	and	r22, r22
    94ce:	79 f0       	breq	.+30     	; 0x94ee <PatchCommand14+0x36>
			track->patchCommandStreamPos-=((param+1)*3);
    94d0:	77 27       	eor	r23, r23
    94d2:	67 fd       	sbrc	r22, 7
    94d4:	70 95       	com	r23
    94d6:	6f 5f       	subi	r22, 0xFF	; 255
    94d8:	7f 4f       	sbci	r23, 0xFF	; 255
    94da:	ab 01       	movw	r20, r22
    94dc:	44 0f       	add	r20, r20
    94de:	55 1f       	adc	r21, r21
    94e0:	64 0f       	add	r22, r20
    94e2:	75 1f       	adc	r23, r21
    94e4:	26 1b       	sub	r18, r22
    94e6:	37 0b       	sbc	r19, r23
    94e8:	09 c0       	rjmp	.+18     	; 0x94fc <PatchCommand14+0x44>
			while(1){
				track->patchCommandStreamPos-=3;
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    94ea:	ef 3f       	cpi	r30, 0xFF	; 255
    94ec:	39 f0       	breq	.+14     	; 0x94fc <PatchCommand14+0x44>
		if(param!=0){
			track->patchCommandStreamPos-=((param+1)*3);
		}else{
			u8 command;
			while(1){
				track->patchCommandStreamPos-=3;
    94ee:	23 50       	subi	r18, 0x03	; 3
    94f0:	31 09       	sbc	r19, r1
    94f2:	f9 01       	movw	r30, r18
    94f4:	32 97       	sbiw	r30, 0x02	; 2
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
    94f6:	e4 91       	lpm	r30, Z
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    94f8:	ed 30       	cpi	r30, 0x0D	; 13
    94fa:	b9 f7       	brne	.-18     	; 0x94ea <PatchCommand14+0x32>
    94fc:	56 96       	adiw	r26, 0x16	; 22
    94fe:	3c 93       	st	X, r19
    9500:	2e 93       	st	-X, r18
    9502:	55 97       	sbiw	r26, 0x15	; 21
			}
		}
		track->loopCount--;
    9504:	81 50       	subi	r24, 0x01	; 1
    9506:	14 96       	adiw	r26, 0x04	; 4
    9508:	8c 93       	st	X, r24
    950a:	08 95       	ret

0000950c <InitMusicPlayer>:

const Patch *patchPointers;

void InitMusicPlayer(const Patch *patchPointersParam){

	patchPointers=patchPointersParam;
    950c:	90 93 ba 0b 	sts	0x0BBA, r25
    9510:	80 93 b9 0b 	sts	0x0BB9, r24

	masterVolume=DEFAULT_MASTER_VOL;
    9514:	8f e6       	ldi	r24, 0x6F	; 111
    9516:	80 93 bc 0b 	sts	0x0BBC, r24
#if MIDI_IN == ENABLED
	InitUartRxBuffer();
	lastMidiInStatus=0;
#endif

	playSong=false;
    951a:	10 92 00 0b 	sts	0x0B00, r1
    951e:	e4 e5       	ldi	r30, 0x54	; 84
    9520:	fb e0       	ldi	r31, 0x0B	; 11

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    9522:	80 e0       	ldi	r24, 0x00	; 0
		tracks[t].channel=t;
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    9524:	90 e1       	ldi	r25, 0x10	; 16
		tracks[t].noteVol=0;
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    9526:	3f ef       	ldi	r19, 0xFF	; 255
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
    9528:	28 e1       	ldi	r18, 0x18	; 24
    952a:	df 01       	movw	r26, r30
    952c:	1e 97       	sbiw	r26, 0x0e	; 14

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].channel=t;
    952e:	8c 93       	st	X, r24
    9530:	12 97       	sbiw	r26, 0x02	; 2
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    9532:	9c 93       	st	X, r25
    9534:	1d 96       	adiw	r26, 0x0d	; 13
		tracks[t].noteVol=0;
    9536:	1c 92       	st	X, r1
    9538:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    953a:	3c 93       	st	X, r19
		tracks[t].patchNo=DEFAULT_PATCH;
    953c:	10 82       	st	Z, r1
    953e:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].tremoloRate=24; //~6hz
    9540:	2c 93       	st	X, r18
    9542:	13 97       	sbiw	r26, 0x03	; 3
		tracks[t].slideSpeed=0x10;
    9544:	9c 93       	st	X, r25
#endif

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    9546:	8f 5f       	subi	r24, 0xFF	; 255
    9548:	77 96       	adiw	r30, 0x17	; 23
    954a:	85 30       	cpi	r24, 0x05	; 5
    954c:	71 f7       	brne	.-36     	; 0x952a <InitMusicPlayer+0x1e>
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
		tracks[t].slideSpeed=0x10;
	}

}
    954e:	08 95       	ret

00009550 <ReadVarLen>:
}



unsigned int ReadVarLen(const char **songPos)
{
    9550:	dc 01       	movw	r26, r24
    unsigned int value;
    unsigned char c;


    if ( (value = pgm_read_byte((*songPos)++)) & 0x80 )
    9552:	ed 91       	ld	r30, X+
    9554:	fc 91       	ld	r31, X
    9556:	11 97       	sbiw	r26, 0x01	; 1
    9558:	9f 01       	movw	r18, r30
    955a:	2f 5f       	subi	r18, 0xFF	; 255
    955c:	3f 4f       	sbci	r19, 0xFF	; 255
    955e:	11 96       	adiw	r26, 0x01	; 1
    9560:	3c 93       	st	X, r19
    9562:	2e 93       	st	-X, r18
    9564:	e4 91       	lpm	r30, Z
    9566:	e7 fd       	sbrc	r30, 7
    9568:	03 c0       	rjmp	.+6      	; 0x9570 <ReadVarLen+0x20>
    956a:	8e 2f       	mov	r24, r30
    956c:	90 e0       	ldi	r25, 0x00	; 0
    956e:	08 95       	ret
    {
       value &= 0x7F;
    9570:	ef 77       	andi	r30, 0x7F	; 127
    9572:	8e 2f       	mov	r24, r30
    9574:	90 e0       	ldi	r25, 0x00	; 0
       do
       {
         value = (value << 7) + ((c = pgm_read_byte((*songPos)++)) & 0x7F);
    9576:	96 95       	lsr	r25
    9578:	98 2f       	mov	r25, r24
    957a:	88 27       	eor	r24, r24
    957c:	97 95       	ror	r25
    957e:	87 95       	ror	r24
    9580:	2f 5f       	subi	r18, 0xFF	; 255
    9582:	3f 4f       	sbci	r19, 0xFF	; 255
    9584:	f9 01       	movw	r30, r18
    9586:	31 97       	sbiw	r30, 0x01	; 1
    9588:	e4 91       	lpm	r30, Z
    958a:	4e 2f       	mov	r20, r30
    958c:	4f 77       	andi	r20, 0x7F	; 127
    958e:	84 0f       	add	r24, r20
    9590:	91 1d       	adc	r25, r1
       } while (c & 0x80);
    9592:	e7 fd       	sbrc	r30, 7
    9594:	f0 cf       	rjmp	.-32     	; 0x9576 <ReadVarLen+0x26>
    9596:	2d 93       	st	X+, r18
    9598:	3c 93       	st	X, r19
    }


    return value;
}
    959a:	08 95       	ret

0000959c <TriggerCommon>:




void TriggerCommon(Track* track,u8 patch,u8 volume,u8 note){
    959c:	ef 92       	push	r14
    959e:	ff 92       	push	r15
    95a0:	0f 93       	push	r16
    95a2:	1f 93       	push	r17
    95a4:	cf 93       	push	r28
    95a6:	df 93       	push	r29
    95a8:	1f 92       	push	r1
    95aa:	cd b7       	in	r28, 0x3d	; 61
    95ac:	de b7       	in	r29, 0x3e	; 62
    95ae:	7c 01       	movw	r14, r24
    95b0:	16 2f       	mov	r17, r22
		
	bool isFx = (track->flags&TRACK_FLAGS_PRIORITY);
    95b2:	fc 01       	movw	r30, r24
    95b4:	80 81       	ld	r24, Z
    95b6:	08 2f       	mov	r16, r24
    95b8:	00 1f       	adc	r16, r16
    95ba:	00 27       	eor	r16, r16
    95bc:	00 1f       	adc	r16, r16

	track->envelopeStep=0; 
    95be:	17 86       	std	Z+15, r1	; 0x0f
	track->envelopeVol=0xff; 
    95c0:	9f ef       	ldi	r25, 0xFF	; 255
    95c2:	96 87       	std	Z+14, r25	; 0x0e
	track->noteVol=volume;
    95c4:	45 87       	std	Z+13, r20	; 0x0d
	track->patchPlayingTime=0;
    95c6:	14 8a       	std	Z+20, r1	; 0x14
	track->flags&=(~(TRACK_FLAGS_HOLD_ENV|TRACK_FLAGS_SLIDING));
    95c8:	87 7b       	andi	r24, 0xB7	; 183
    95ca:	80 83       	st	Z, r24
	track->tremoloLevel=0;
    95cc:	12 86       	std	Z+10, r1	; 0x0a
	track->tremoloPos=0;
    95ce:	11 86       	std	Z+9, r1	; 0x09
	track->note=note;
    95d0:	21 83       	std	Z+1, r18	; 0x01
	track->loopCount=0;
    95d2:	14 82       	std	Z+4, r1	; 0x04

#if MUSIC_ENGINE == MIDI
	track->expressionVol=DEFAULT_EXPRESSION_VOL;
    95d4:	93 83       	std	Z+3, r25	; 0x03
#endif

	#if SOUND_MIXER == MIXER_TYPE_INLINE

		if(track->channel==3){
    95d6:	82 81       	ldd	r24, Z+2	; 0x02
    95d8:	83 30       	cpi	r24, 0x03	; 3
    95da:	69 f4       	brne	.+26     	; 0x95f6 <TriggerCommon+0x5a>
			//noise channel		
			if(!isFx) patch=note;			
    95dc:	01 11       	cpse	r16, r1
    95de:	01 c0       	rjmp	.+2      	; 0x95e2 <TriggerCommon+0x46>
    95e0:	12 2f       	mov	r17, r18
			mixer.channels.type.noise.barrel=0x0101;				
    95e2:	81 e0       	ldi	r24, 0x01	; 1
    95e4:	91 e0       	ldi	r25, 0x01	; 1
    95e6:	90 93 17 0b 	sts	0x0B17, r25
    95ea:	80 93 16 0b 	sts	0x0B16, r24
			mixer.channels.type.noise.params=1; //default (15bits,no divider)
    95ee:	81 e0       	ldi	r24, 0x01	; 1
    95f0:	80 93 15 0b 	sts	0x0B15, r24
    95f4:	39 c0       	rjmp	.+114    	; 0x9668 <TriggerCommon+0xcc>

		#if SOUND_CHANNEL_5_ENABLE==1		

		}else if(track->channel==4){
    95f6:	84 30       	cpi	r24, 0x04	; 4
    95f8:	69 f5       	brne	.+90     	; 0x9654 <TriggerCommon+0xb8>
				//PCM channel					
				mixer.channels.type.pcm.positionFrac=0;
    95fa:	10 92 1d 0b 	sts	0x0B1D, r1
				const char *pos=(const char*)pgm_read_word(&(patchPointers[patch].pcmData));
    95fe:	80 91 b9 0b 	lds	r24, 0x0BB9
    9602:	90 91 ba 0b 	lds	r25, 0x0BBA
    9606:	f9 e0       	ldi	r31, 0x09	; 9
    9608:	6f 9f       	mul	r22, r31
    960a:	80 0d       	add	r24, r0
    960c:	91 1d       	adc	r25, r1
    960e:	11 24       	eor	r1, r1
    9610:	fc 01       	movw	r30, r24
    9612:	31 96       	adiw	r30, 0x01	; 1
    9614:	a5 91       	lpm	r26, Z+
    9616:	b4 91       	lpm	r27, Z
				mixer.channels.type.pcm.position=pos;				
    9618:	b0 93 1f 0b 	sts	0x0B1F, r27
    961c:	a0 93 1e 0b 	sts	0x0B1E, r26
				mixer.pcmLoopLenght=pgm_read_word(&(patchPointers[patch].loopEnd))-pgm_read_word(&(patchPointers[patch].loopStart));
    9620:	ac 01       	movw	r20, r24
    9622:	49 5f       	subi	r20, 0xF9	; 249
    9624:	5f 4f       	sbci	r21, 0xFF	; 255
    9626:	fa 01       	movw	r30, r20
    9628:	65 91       	lpm	r22, Z+
    962a:	74 91       	lpm	r23, Z
    962c:	05 96       	adiw	r24, 0x05	; 5
    962e:	fc 01       	movw	r30, r24
    9630:	85 91       	lpm	r24, Z+
    9632:	94 91       	lpm	r25, Z
    9634:	68 1b       	sub	r22, r24
    9636:	79 0b       	sbc	r23, r25
    9638:	70 93 21 0b 	sts	0x0B21, r23
    963c:	60 93 20 0b 	sts	0x0B20, r22
				mixer.pcmLoopEnd=pos+pgm_read_word(&(patchPointers[patch].loopEnd));
    9640:	fa 01       	movw	r30, r20
    9642:	85 91       	lpm	r24, Z+
    9644:	94 91       	lpm	r25, Z
    9646:	a8 0f       	add	r26, r24
    9648:	b9 1f       	adc	r27, r25
    964a:	b0 93 23 0b 	sts	0x0B23, r27
    964e:	a0 93 22 0b 	sts	0x0B22, r26
    9652:	05 c0       	rjmp	.+10     	; 0x965e <TriggerCommon+0xc2>
				SetMixerNote(track->channel,note);
		#endif	

		}else{					
			//wave channels					
			SetMixerWave(track->channel,0);//default wave
    9654:	60 e0       	ldi	r22, 0x00	; 0
    9656:	29 83       	std	Y+1, r18	; 0x01
    9658:	0e 94 1d 4e 	call	0x9c3a	; 0x9c3a <SetMixerWave>
			SetMixerNote(track->channel,note);
    965c:	29 81       	ldd	r18, Y+1	; 0x01
    965e:	62 2f       	mov	r22, r18
    9660:	f7 01       	movw	r30, r14
    9662:	82 81       	ldd	r24, Z+2	; 0x02
    9664:	0e 94 06 4e 	call	0x9c0c	; 0x9c0c <SetMixerNote>
		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
		track->fxPatchNo=patch;
    9668:	f7 01       	movw	r30, r14

		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
    966a:	00 23       	and	r16, r16
    966c:	11 f0       	breq	.+4      	; 0x9672 <TriggerCommon+0xd6>
		track->fxPatchNo=patch;
    966e:	11 8b       	std	Z+17, r17	; 0x11
    9670:	01 c0       	rjmp	.+2      	; 0x9674 <TriggerCommon+0xd8>
	}else{
		track->patchNo=patch;	
    9672:	10 8b       	std	Z+16, r17	; 0x10
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
    9674:	e0 91 b9 0b 	lds	r30, 0x0BB9
    9678:	f0 91 ba 0b 	lds	r31, 0x0BBA
    967c:	39 e0       	ldi	r19, 0x09	; 9
    967e:	13 9f       	mul	r17, r19
    9680:	e0 0d       	add	r30, r0
    9682:	f1 1d       	adc	r31, r1
    9684:	11 24       	eor	r1, r1
    9686:	33 96       	adiw	r30, 0x03	; 3
    9688:	85 91       	lpm	r24, Z+
    968a:	94 91       	lpm	r25, Z
	if(pos==NULL){
		track->patchCommandStreamPos=NULL;
    968c:	f7 01       	movw	r30, r14
	}else{
		track->patchNo=patch;	
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
	if(pos==NULL){
    968e:	00 97       	sbiw	r24, 0x00	; 0
    9690:	19 f4       	brne	.+6      	; 0x9698 <TriggerCommon+0xfc>
		track->patchCommandStreamPos=NULL;
    9692:	16 8a       	std	Z+22, r1	; 0x16
    9694:	15 8a       	std	Z+21, r1	; 0x15
    9696:	08 c0       	rjmp	.+16     	; 0x96a8 <TriggerCommon+0x10c>
	}else{
		track->patchCurrDeltaTime=0;
    9698:	13 8a       	std	Z+19, r1	; 0x13
		track->patchNextDeltaTime=pgm_read_byte(pos++);
    969a:	fc 01       	movw	r30, r24
    969c:	24 91       	lpm	r18, Z
    969e:	f7 01       	movw	r30, r14
    96a0:	22 8b       	std	Z+18, r18	; 0x12
    96a2:	01 96       	adiw	r24, 0x01	; 1
		track->patchCommandStreamPos=pos;
    96a4:	96 8b       	std	Z+22, r25	; 0x16
    96a6:	85 8b       	std	Z+21, r24	; 0x15
	}

}
    96a8:	0f 90       	pop	r0
    96aa:	df 91       	pop	r29
    96ac:	cf 91       	pop	r28
    96ae:	1f 91       	pop	r17
    96b0:	0f 91       	pop	r16
    96b2:	ff 90       	pop	r15
    96b4:	ef 90       	pop	r14
    96b6:	08 95       	ret

000096b8 <TriggerFx>:

/* Trigger a sound effect.
 * Method allocates the channel based on priority.
 * Retrig: if this fx if already playing on a track, reuse same track.
 */
void TriggerFx(unsigned char patch,unsigned char volume,bool retrig){
    96b8:	cf 93       	push	r28
    96ba:	df 93       	push	r29
	unsigned char channel;
	
	unsigned char type=(unsigned char)pgm_read_byte(&(patchPointers[patch].type));
    96bc:	e0 91 b9 0b 	lds	r30, 0x0BB9
    96c0:	f0 91 ba 0b 	lds	r31, 0x0BBA
    96c4:	99 e0       	ldi	r25, 0x09	; 9
    96c6:	89 9f       	mul	r24, r25
    96c8:	e0 0d       	add	r30, r0
    96ca:	f1 1d       	adc	r31, r1
    96cc:	11 24       	eor	r1, r1
    96ce:	e4 91       	lpm	r30, Z

	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
    96d0:	e1 30       	cpi	r30, 0x01	; 1
    96d2:	e9 f0       	breq	.+58     	; 0x970e <TriggerFx+0x56>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
    96d4:	e2 30       	cpi	r30, 0x02	; 2
    96d6:	e9 f0       	breq	.+58     	; 0x9712 <TriggerFx+0x5a>
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
    96d8:	20 91 5b 0b 	lds	r18, 0x0B5B
    96dc:	27 ff       	sbrs	r18, 7
    96de:	1d c0       	rjmp	.+58     	; 0x971a <TriggerFx+0x62>
    96e0:	20 91 6c 0b 	lds	r18, 0x0B6C
    96e4:	28 13       	cpse	r18, r24
    96e6:	02 c0       	rjmp	.+4      	; 0x96ec <TriggerFx+0x34>
    96e8:	41 11       	cpse	r20, r1
    96ea:	17 c0       	rjmp	.+46     	; 0x971a <TriggerFx+0x62>
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
    96ec:	20 91 72 0b 	lds	r18, 0x0B72
    96f0:	27 ff       	sbrs	r18, 7
    96f2:	11 c0       	rjmp	.+34     	; 0x9716 <TriggerFx+0x5e>
    96f4:	20 91 83 0b 	lds	r18, 0x0B83
    96f8:	28 13       	cpse	r18, r24
    96fa:	02 c0       	rjmp	.+4      	; 0x9700 <TriggerFx+0x48>
    96fc:	41 11       	cpse	r20, r1
    96fe:	0b c0       	rjmp	.+22     	; 0x9716 <TriggerFx+0x5e>
		channel=2;
	}else{
		//both channels have fx playing, use the oldest one
		if(tracks[1].patchPlayingTime>tracks[2].patchPlayingTime){
    9700:	20 91 6f 0b 	lds	r18, 0x0B6F
    9704:	90 91 86 0b 	lds	r25, 0x0B86
    9708:	92 17       	cp	r25, r18
    970a:	28 f4       	brcc	.+10     	; 0x9716 <TriggerFx+0x5e>
    970c:	06 c0       	rjmp	.+12     	; 0x971a <TriggerFx+0x62>
	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
		//noise or PCM channel fx		
		channel=3;
    970e:	c3 e0       	ldi	r28, 0x03	; 3
    9710:	05 c0       	rjmp	.+10     	; 0x971c <TriggerFx+0x64>
	}else if(type==2){
		channel=4;
    9712:	c4 e0       	ldi	r28, 0x04	; 4
    9714:	03 c0       	rjmp	.+6      	; 0x971c <TriggerFx+0x64>
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
		channel=2;
    9716:	c2 e0       	ldi	r28, 0x02	; 2
    9718:	01 c0       	rjmp	.+2      	; 0x971c <TriggerFx+0x64>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
    971a:	c1 e0       	ldi	r28, 0x01	; 1
			channel=2;
		}
	}				

	Track* track=&tracks[channel];
	track->flags=TRACK_FLAGS_PRIORITY; //priority=1;
    971c:	97 e1       	ldi	r25, 0x17	; 23
    971e:	c9 9f       	mul	r28, r25
    9720:	e0 01       	movw	r28, r0
    9722:	11 24       	eor	r1, r1
    9724:	cc 5b       	subi	r28, 0xBC	; 188
    9726:	d4 4f       	sbci	r29, 0xF4	; 244
    9728:	90 e8       	ldi	r25, 0x80	; 128
    972a:	98 83       	st	Y, r25
	track->patchCommandStreamPos = NULL;
    972c:	1e 8a       	std	Y+22, r1	; 0x16
    972e:	1d 8a       	std	Y+21, r1	; 0x15
	TriggerCommon(track,patch,volume,80);
    9730:	20 e5       	ldi	r18, 0x50	; 80
    9732:	46 2f       	mov	r20, r22
    9734:	68 2f       	mov	r22, r24
    9736:	ce 01       	movw	r24, r28
    9738:	0e 94 ce 4a 	call	0x959c	; 0x959c <TriggerCommon>
	track->flags|=TRACK_FLAGS_PLAYING;
    973c:	88 81       	ld	r24, Y
    973e:	80 62       	ori	r24, 0x20	; 32
    9740:	88 83       	st	Y, r24
}
    9742:	df 91       	pop	r29
    9744:	cf 91       	pop	r28
    9746:	08 95       	ret

00009748 <TriggerNote>:


void TriggerNote(unsigned char channel,unsigned char patch,unsigned char note,unsigned char volume){
    9748:	cf 93       	push	r28
    974a:	df 93       	push	r29
	Track* track=&tracks[channel];

	//allow only other music notes 
	if((track->flags&TRACK_FLAGS_PLAYING)==0 || (track->flags&TRACK_FLAGS_PRIORITY)==0){
    974c:	a8 2f       	mov	r26, r24
    974e:	b0 e0       	ldi	r27, 0x00	; 0
    9750:	97 e1       	ldi	r25, 0x17	; 23
    9752:	89 9f       	mul	r24, r25
    9754:	f0 01       	movw	r30, r0
    9756:	11 24       	eor	r1, r1
    9758:	ec 5b       	subi	r30, 0xBC	; 188
    975a:	f4 4f       	sbci	r31, 0xF4	; 244
    975c:	80 81       	ld	r24, Z
    975e:	85 ff       	sbrs	r24, 5
    9760:	02 c0       	rjmp	.+4      	; 0x9766 <TriggerNote+0x1e>
    9762:	87 fd       	sbrc	r24, 7
    9764:	2e c0       	rjmp	.+92     	; 0x97c2 <TriggerNote+0x7a>
			
		if(volume==0){ //note-off received
    9766:	21 11       	cpse	r18, r1
    9768:	18 c0       	rjmp	.+48     	; 0x979a <TriggerNote+0x52>

			
			//cut note if there's no envelope & no note hold
			if(track->envelopeStep==0 && !(track->flags&TRACK_FLAGS_HOLD_ENV)){
    976a:	97 e1       	ldi	r25, 0x17	; 23
    976c:	9a 9f       	mul	r25, r26
    976e:	f0 01       	movw	r30, r0
    9770:	9b 9f       	mul	r25, r27
    9772:	f0 0d       	add	r31, r0
    9774:	11 24       	eor	r1, r1
    9776:	ec 5b       	subi	r30, 0xBC	; 188
    9778:	f4 4f       	sbci	r31, 0xF4	; 244
    977a:	97 85       	ldd	r25, Z+15	; 0x0f
    977c:	91 11       	cpse	r25, r1
    977e:	02 c0       	rjmp	.+4      	; 0x9784 <TriggerNote+0x3c>
    9780:	86 ff       	sbrs	r24, 6
				track->noteVol=0;
    9782:	15 86       	std	Z+13, r1	; 0x0d
			}

			track->flags&=(~TRACK_FLAGS_HOLD_ENV);//patchEnvelopeHold=false;
    9784:	97 e1       	ldi	r25, 0x17	; 23
    9786:	9a 9f       	mul	r25, r26
    9788:	f0 01       	movw	r30, r0
    978a:	9b 9f       	mul	r25, r27
    978c:	f0 0d       	add	r31, r0
    978e:	11 24       	eor	r1, r1
    9790:	ec 5b       	subi	r30, 0xBC	; 188
    9792:	f4 4f       	sbci	r31, 0xF4	; 244
    9794:	8f 7b       	andi	r24, 0xBF	; 191
    9796:	80 83       	st	Z, r24
    9798:	14 c0       	rjmp	.+40     	; 0x97c2 <TriggerNote+0x7a>
    979a:	82 2f       	mov	r24, r18
    979c:	24 2f       	mov	r18, r20
		}else{
		
			track->flags=0;//&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    979e:	97 e1       	ldi	r25, 0x17	; 23
    97a0:	9a 9f       	mul	r25, r26
    97a2:	e0 01       	movw	r28, r0
    97a4:	9b 9f       	mul	r25, r27
    97a6:	d0 0d       	add	r29, r0
    97a8:	11 24       	eor	r1, r1
    97aa:	cc 5b       	subi	r28, 0xBC	; 188
    97ac:	d4 4f       	sbci	r29, 0xF4	; 244
    97ae:	18 82       	st	Y, r1
			track->patchCommandStreamPos = NULL;
    97b0:	1e 8a       	std	Y+22, r1	; 0x16
    97b2:	1d 8a       	std	Y+21, r1	; 0x15
			TriggerCommon(track,patch,volume,note);
    97b4:	48 2f       	mov	r20, r24
    97b6:	ce 01       	movw	r24, r28
    97b8:	0e 94 ce 4a 	call	0x959c	; 0x959c <TriggerCommon>
			track->flags|=TRACK_FLAGS_PLAYING;
    97bc:	88 81       	ld	r24, Y
    97be:	80 62       	ori	r24, 0x20	; 32
    97c0:	88 83       	st	Y, r24
		}

	}
}
    97c2:	df 91       	pop	r29
    97c4:	cf 91       	pop	r28
    97c6:	08 95       	ret

000097c8 <ProcessMusic>:
	}

#endif


void ProcessMusic(void){
    97c8:	6f 92       	push	r6
    97ca:	7f 92       	push	r7
    97cc:	8f 92       	push	r8
    97ce:	9f 92       	push	r9
    97d0:	af 92       	push	r10
    97d2:	bf 92       	push	r11
    97d4:	cf 92       	push	r12
    97d6:	df 92       	push	r13
    97d8:	ef 92       	push	r14
    97da:	ff 92       	push	r15
    97dc:	0f 93       	push	r16
    97de:	1f 93       	push	r17
    97e0:	cf 93       	push	r28
    97e2:	df 93       	push	r29
    97e4:	c4 e4       	ldi	r28, 0x44	; 68
    97e6:	db e0       	ldi	r29, 0x0B	; 11
    97e8:	02 e0       	ldi	r16, 0x02	; 2
    97ea:	1b e0       	ldi	r17, 0x0B	; 11
    97ec:	d8 01       	movw	r26, r16
    97ee:	9e 01       	movw	r18, r28
    97f0:	40 e0       	ldi	r20, 0x00	; 0
    97f2:	50 e0       	ldi	r21, 0x00	; 0
    97f4:	ca 01       	movw	r24, r20
    97f6:	8c 5b       	subi	r24, 0xBC	; 188
    97f8:	94 4f       	sbci	r25, 0xF4	; 244
    97fa:	6c 01       	movw	r12, r24
	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//update envelope
		if(track->envelopeStep!=0){
    97fc:	fc 01       	movw	r30, r24
    97fe:	87 85       	ldd	r24, Z+15	; 0x0f
    9800:	88 23       	and	r24, r24
    9802:	91 f0       	breq	.+36     	; 0x9828 <ProcessMusic+0x60>
			vol=track->envelopeVol+track->envelopeStep;		
    9804:	66 85       	ldd	r22, Z+14	; 0x0e
    9806:	99 27       	eor	r25, r25
    9808:	87 fd       	sbrc	r24, 7
    980a:	90 95       	com	r25
    980c:	86 0f       	add	r24, r22
    980e:	91 1d       	adc	r25, r1
    9810:	8f 3f       	cpi	r24, 0xFF	; 255
    9812:	91 05       	cpc	r25, r1
    9814:	19 f0       	breq	.+6      	; 0x981c <ProcessMusic+0x54>
    9816:	14 f0       	brlt	.+4      	; 0x981c <ProcessMusic+0x54>
    9818:	8f ef       	ldi	r24, 0xFF	; 255
    981a:	90 e0       	ldi	r25, 0x00	; 0
    981c:	97 ff       	sbrs	r25, 7
    981e:	02 c0       	rjmp	.+4      	; 0x9824 <ProcessMusic+0x5c>
    9820:	80 e0       	ldi	r24, 0x00	; 0
    9822:	90 e0       	ldi	r25, 0x00	; 0
			if(vol<0){
				vol=0;			
			}else if(vol>0xff){
				vol=0xff;						
			}
			track->envelopeVol=vol;
    9824:	f6 01       	movw	r30, r12
    9826:	86 87       	std	Z+14, r24	; 0x0e
		}

		//if volumes reaches zero and no more patch command, explicitly end playing on track
		//if(vol==0 && track->patchCommandStreamPos==NULL) track->flags&=~(TRACK_FLAGS_PLAYING);

		if(track->flags & TRACK_FLAGS_SLIDING){
    9828:	f9 01       	movw	r30, r18
    982a:	f0 80       	ld	r15, Z
    982c:	f3 fe       	sbrs	r15, 3
    982e:	2a c0       	rjmp	.+84     	; 0x9884 <ProcessMusic+0xbc>

			mixer.channels.all[trackNo].step+=track->slideStep;
    9830:	65 81       	ldd	r22, Z+5	; 0x05
    9832:	76 81       	ldd	r23, Z+6	; 0x06
    9834:	11 96       	adiw	r26, 0x01	; 1
    9836:	8d 91       	ld	r24, X+
    9838:	9c 91       	ld	r25, X
    983a:	12 97       	sbiw	r26, 0x02	; 2
    983c:	86 0f       	add	r24, r22
    983e:	97 1f       	adc	r25, r23
    9840:	12 96       	adiw	r26, 0x02	; 2
    9842:	9c 93       	st	X, r25
    9844:	8e 93       	st	-X, r24
    9846:	11 97       	sbiw	r26, 0x01	; 1
			u16 tStep=pgm_read_word(&(steptable[track->slideNote]));
    9848:	f6 01       	movw	r30, r12
    984a:	e7 80       	ldd	r14, Z+7	; 0x07
    984c:	ee 2d       	mov	r30, r14
    984e:	f0 e0       	ldi	r31, 0x00	; 0
    9850:	ee 0f       	add	r30, r30
    9852:	ff 1f       	adc	r31, r31
    9854:	e8 5f       	subi	r30, 0xF8	; 248
    9856:	f2 46       	sbci	r31, 0x62	; 98
    9858:	c5 90       	lpm	r12, Z+
    985a:	d4 90       	lpm	r13, Z

			if((track->slideStep>0 && mixer.channels.all[trackNo].step>=tStep) || 
    985c:	16 16       	cp	r1, r22
    985e:	17 06       	cpc	r1, r23
    9860:	24 f4       	brge	.+8      	; 0x986a <ProcessMusic+0xa2>
    9862:	8c 15       	cp	r24, r12
    9864:	9d 05       	cpc	r25, r13
    9866:	30 f4       	brcc	.+12     	; 0x9874 <ProcessMusic+0xac>
    9868:	0d c0       	rjmp	.+26     	; 0x9884 <ProcessMusic+0xbc>
    986a:	67 2b       	or	r22, r23
    986c:	59 f0       	breq	.+22     	; 0x9884 <ProcessMusic+0xbc>
				(track->slideStep<0 && mixer.channels.all[trackNo].step<=tStep))
    986e:	c8 16       	cp	r12, r24
    9870:	d9 06       	cpc	r13, r25
    9872:	40 f0       	brcs	.+16     	; 0x9884 <ProcessMusic+0xbc>
			{					
				mixer.channels.all[trackNo].step = tStep;					
    9874:	12 96       	adiw	r26, 0x02	; 2
    9876:	dc 92       	st	X, r13
    9878:	ce 92       	st	-X, r12
    987a:	11 97       	sbiw	r26, 0x01	; 1
				track->flags &= ~(TRACK_FLAGS_SLIDING);	
    987c:	8f 2d       	mov	r24, r15
    987e:	87 7f       	andi	r24, 0xF7	; 247
    9880:	f9 01       	movw	r30, r18
    9882:	80 83       	st	Z, r24
    9884:	49 5e       	subi	r20, 0xE9	; 233
    9886:	5f 4f       	sbci	r21, 0xFF	; 255
    9888:	29 5e       	subi	r18, 0xE9	; 233
    988a:	3f 4f       	sbci	r19, 0xFF	; 255
    988c:	16 96       	adiw	r26, 0x06	; 6
	u8 channel;
	Track* track;


	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    988e:	43 37       	cpi	r20, 0x73	; 115
    9890:	51 05       	cpc	r21, r1
    9892:	09 f0       	breq	.+2      	; 0x9896 <ProcessMusic+0xce>
    9894:	af cf       	rjmp	.-162    	; 0x97f4 <ProcessMusic+0x2c>
	}



	//Process song MIDI notes
	if(playSong){
    9896:	80 91 00 0b 	lds	r24, 0x0B00
    989a:	88 23       	and	r24, r24
    989c:	09 f4       	brne	.+2      	; 0x98a0 <ProcessMusic+0xd8>
    989e:	cc c0       	rjmp	.+408    	; 0x9a38 <ProcessMusic+0x270>
							}else if(c1==CONTROLER_EXPRESSION){
								tracks[channel].expressionVol=c2<<1;
							}else if(c1==CONTROLER_TREMOLO){
								tracks[channel].tremoloLevel=c2<<1;
							}else if(c1==CONTROLER_TREMOLO_RATE){
								tracks[channel].tremoloRate=c2<<1;
    98a0:	57 e1       	ldi	r21, 0x17	; 23
    98a2:	f5 2e       	mov	r15, r21
	if(playSong){
	
		#if MUSIC_ENGINE == MIDI
			
			//process all simultaneous events
			while(currDeltaTime==nextDeltaTime){
    98a4:	80 91 b7 0b 	lds	r24, 0x0BB7
    98a8:	90 91 b8 0b 	lds	r25, 0x0BB8
    98ac:	20 91 bd 0b 	lds	r18, 0x0BBD
    98b0:	30 91 be 0b 	lds	r19, 0x0BBE
    98b4:	82 17       	cp	r24, r18
    98b6:	93 07       	cpc	r25, r19
    98b8:	09 f0       	breq	.+2      	; 0x98bc <ProcessMusic+0xf4>
    98ba:	b9 c0       	rjmp	.+370    	; 0x9a2e <ProcessMusic+0x266>

				c1=pgm_read_byte(songPos++);
    98bc:	20 91 c0 0b 	lds	r18, 0x0BC0
    98c0:	30 91 c1 0b 	lds	r19, 0x0BC1
    98c4:	b9 01       	movw	r22, r18
    98c6:	6f 5f       	subi	r22, 0xFF	; 255
    98c8:	7f 4f       	sbci	r23, 0xFF	; 255
    98ca:	70 93 c1 0b 	sts	0x0BC1, r23
    98ce:	60 93 c0 0b 	sts	0x0BC0, r22
    98d2:	f9 01       	movw	r30, r18
    98d4:	44 91       	lpm	r20, Z
			
				if(c1==0xff){
    98d6:	4f 3f       	cpi	r20, 0xFF	; 255
    98d8:	79 f5       	brne	.+94     	; 0x9938 <ProcessMusic+0x170>
					//META data type event
					c1=pgm_read_byte(songPos++);
    98da:	a9 01       	movw	r20, r18
    98dc:	4e 5f       	subi	r20, 0xFE	; 254
    98de:	5f 4f       	sbci	r21, 0xFF	; 255
    98e0:	50 93 c1 0b 	sts	0x0BC1, r21
    98e4:	40 93 c0 0b 	sts	0x0BC0, r20
    98e8:	fb 01       	movw	r30, r22
    98ea:	64 91       	lpm	r22, Z

				
					if(c1==0x2f){ //end of song
    98ec:	6f 32       	cpi	r22, 0x2F	; 47
    98ee:	19 f4       	brne	.+6      	; 0x98f6 <ProcessMusic+0x12e>
						playSong=false;
    98f0:	10 92 00 0b 	sts	0x0B00, r1
						break;	
    98f4:	9c c0       	rjmp	.+312    	; 0x9a2e <ProcessMusic+0x266>
					}else if(c1==0x6){ //marker
    98f6:	66 30       	cpi	r22, 0x06	; 6
    98f8:	09 f0       	breq	.+2      	; 0x98fc <ProcessMusic+0x134>
    98fa:	8c c0       	rjmp	.+280    	; 0x9a14 <ProcessMusic+0x24c>
						c1=pgm_read_byte(songPos++); //read len
    98fc:	fa 01       	movw	r30, r20
    98fe:	44 91       	lpm	r20, Z
						c2=pgm_read_byte(songPos++); //read data
    9900:	c9 01       	movw	r24, r18
    9902:	04 96       	adiw	r24, 0x04	; 4
    9904:	90 93 c1 0b 	sts	0x0BC1, r25
    9908:	80 93 c0 0b 	sts	0x0BC0, r24
				
					if(c1==0x2f){ //end of song
						playSong=false;
						break;	
					}else if(c1==0x6){ //marker
						c1=pgm_read_byte(songPos++); //read len
    990c:	f9 01       	movw	r30, r18
    990e:	33 96       	adiw	r30, 0x03	; 3
						c2=pgm_read_byte(songPos++); //read data
    9910:	e4 91       	lpm	r30, Z
						if(c2=='S'){ //loop start
    9912:	e3 35       	cpi	r30, 0x53	; 83
    9914:	29 f4       	brne	.+10     	; 0x9920 <ProcessMusic+0x158>
							loopStart=songPos;
    9916:	90 93 c3 0b 	sts	0x0BC3, r25
    991a:	80 93 c2 0b 	sts	0x0BC2, r24
    991e:	7a c0       	rjmp	.+244    	; 0x9a14 <ProcessMusic+0x24c>
						}else if(c2=='E'){//loop end
    9920:	e5 34       	cpi	r30, 0x45	; 69
    9922:	09 f0       	breq	.+2      	; 0x9926 <ProcessMusic+0x15e>
    9924:	77 c0       	rjmp	.+238    	; 0x9a14 <ProcessMusic+0x24c>
							songPos=loopStart;
    9926:	80 91 c2 0b 	lds	r24, 0x0BC2
    992a:	90 91 c3 0b 	lds	r25, 0x0BC3
    992e:	90 93 c1 0b 	sts	0x0BC1, r25
    9932:	80 93 c0 0b 	sts	0x0BC0, r24
    9936:	6e c0       	rjmp	.+220    	; 0x9a14 <ProcessMusic+0x24c>
					}
				

				}else{

					if(c1&0x80) lastStatus=c1;					
    9938:	47 fd       	sbrc	r20, 7
    993a:	40 93 bb 0b 	sts	0x0BBB, r20
					channel=lastStatus&0x0f;
    993e:	90 91 bb 0b 	lds	r25, 0x0BBB
    9942:	89 2f       	mov	r24, r25
    9944:	8f 70       	andi	r24, 0x0F	; 15
				
					//get next data byte
					//Note: maybe we should not advance the cursor
					//in case we receive an unsupported command				
					if(c1&0x80) c1=pgm_read_byte(songPos++); 
    9946:	47 ff       	sbrs	r20, 7
    9948:	08 c0       	rjmp	.+16     	; 0x995a <ProcessMusic+0x192>
    994a:	2e 5f       	subi	r18, 0xFE	; 254
    994c:	3f 4f       	sbci	r19, 0xFF	; 255
    994e:	30 93 c1 0b 	sts	0x0BC1, r19
    9952:	20 93 c0 0b 	sts	0x0BC0, r18
    9956:	fb 01       	movw	r30, r22
    9958:	44 91       	lpm	r20, Z

					switch(lastStatus&0xf0){
    995a:	90 7f       	andi	r25, 0xF0	; 240
    995c:	90 3b       	cpi	r25, 0xB0	; 176
    995e:	e1 f0       	breq	.+56     	; 0x9998 <ProcessMusic+0x1d0>
    9960:	90 3c       	cpi	r25, 0xC0	; 192
    9962:	09 f4       	brne	.+2      	; 0x9966 <ProcessMusic+0x19e>
    9964:	51 c0       	rjmp	.+162    	; 0x9a08 <ProcessMusic+0x240>
    9966:	90 39       	cpi	r25, 0x90	; 144
    9968:	09 f0       	breq	.+2      	; 0x996c <ProcessMusic+0x1a4>
    996a:	54 c0       	rjmp	.+168    	; 0x9a14 <ProcessMusic+0x24c>

						//note-on
						case 0x90:
							//c1 = note						
							c2=pgm_read_byte(songPos++)<<1; //get volume
    996c:	e0 91 c0 0b 	lds	r30, 0x0BC0
    9970:	f0 91 c1 0b 	lds	r31, 0x0BC1
    9974:	9f 01       	movw	r18, r30
    9976:	2f 5f       	subi	r18, 0xFF	; 255
    9978:	3f 4f       	sbci	r19, 0xFF	; 255
    997a:	30 93 c1 0b 	sts	0x0BC1, r19
    997e:	20 93 c0 0b 	sts	0x0BC0, r18
    9982:	24 91       	lpm	r18, Z
    9984:	22 0f       	add	r18, r18
						
							if(tracks[channel].flags|TRACK_FLAGS_ALLOCATED){ //allocated==true
								TriggerNote(channel,tracks[channel].patchNo,c1,c2);
    9986:	f8 9e       	mul	r15, r24
    9988:	f0 01       	movw	r30, r0
    998a:	11 24       	eor	r1, r1
    998c:	ec 5b       	subi	r30, 0xBC	; 188
    998e:	f4 4f       	sbci	r31, 0xF4	; 244
    9990:	60 89       	ldd	r22, Z+16	; 0x10
    9992:	0e 94 a4 4b 	call	0x9748	; 0x9748 <TriggerNote>
    9996:	3e c0       	rjmp	.+124    	; 0x9a14 <ProcessMusic+0x24c>
							break;

						//controllers
						case 0xb0:
							///c1 = controller #
							c2=pgm_read_byte(songPos++); //get controller value
    9998:	e0 91 c0 0b 	lds	r30, 0x0BC0
    999c:	f0 91 c1 0b 	lds	r31, 0x0BC1
    99a0:	9f 01       	movw	r18, r30
    99a2:	2f 5f       	subi	r18, 0xFF	; 255
    99a4:	3f 4f       	sbci	r19, 0xFF	; 255
    99a6:	30 93 c1 0b 	sts	0x0BC1, r19
    99aa:	20 93 c0 0b 	sts	0x0BC0, r18
    99ae:	e4 91       	lpm	r30, Z
						
							if(c1==CONTROLER_VOL){
    99b0:	47 30       	cpi	r20, 0x07	; 7
    99b2:	49 f4       	brne	.+18     	; 0x99c6 <ProcessMusic+0x1fe>
								tracks[channel].trackVol=c2<<1;
    99b4:	f8 9e       	mul	r15, r24
    99b6:	d0 01       	movw	r26, r0
    99b8:	11 24       	eor	r1, r1
    99ba:	ac 5b       	subi	r26, 0xBC	; 188
    99bc:	b4 4f       	sbci	r27, 0xF4	; 244
    99be:	ee 0f       	add	r30, r30
    99c0:	1c 96       	adiw	r26, 0x0c	; 12
    99c2:	ec 93       	st	X, r30
    99c4:	27 c0       	rjmp	.+78     	; 0x9a14 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_EXPRESSION){
    99c6:	4b 30       	cpi	r20, 0x0B	; 11
    99c8:	49 f4       	brne	.+18     	; 0x99dc <ProcessMusic+0x214>
								tracks[channel].expressionVol=c2<<1;
    99ca:	f8 9e       	mul	r15, r24
    99cc:	d0 01       	movw	r26, r0
    99ce:	11 24       	eor	r1, r1
    99d0:	ac 5b       	subi	r26, 0xBC	; 188
    99d2:	b4 4f       	sbci	r27, 0xF4	; 244
    99d4:	ee 0f       	add	r30, r30
    99d6:	13 96       	adiw	r26, 0x03	; 3
    99d8:	ec 93       	st	X, r30
    99da:	1c c0       	rjmp	.+56     	; 0x9a14 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO){
    99dc:	4c 35       	cpi	r20, 0x5C	; 92
    99de:	49 f4       	brne	.+18     	; 0x99f2 <ProcessMusic+0x22a>
								tracks[channel].tremoloLevel=c2<<1;
    99e0:	f8 9e       	mul	r15, r24
    99e2:	d0 01       	movw	r26, r0
    99e4:	11 24       	eor	r1, r1
    99e6:	ac 5b       	subi	r26, 0xBC	; 188
    99e8:	b4 4f       	sbci	r27, 0xF4	; 244
    99ea:	ee 0f       	add	r30, r30
    99ec:	1a 96       	adiw	r26, 0x0a	; 10
    99ee:	ec 93       	st	X, r30
    99f0:	11 c0       	rjmp	.+34     	; 0x9a14 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO_RATE){
    99f2:	44 36       	cpi	r20, 0x64	; 100
    99f4:	79 f4       	brne	.+30     	; 0x9a14 <ProcessMusic+0x24c>
								tracks[channel].tremoloRate=c2<<1;
    99f6:	f8 9e       	mul	r15, r24
    99f8:	d0 01       	movw	r26, r0
    99fa:	11 24       	eor	r1, r1
    99fc:	ac 5b       	subi	r26, 0xBC	; 188
    99fe:	b4 4f       	sbci	r27, 0xF4	; 244
    9a00:	ee 0f       	add	r30, r30
    9a02:	1b 96       	adiw	r26, 0x0b	; 11
    9a04:	ec 93       	st	X, r30
    9a06:	06 c0       	rjmp	.+12     	; 0x9a14 <ProcessMusic+0x24c>
							break;

						//program change
						case 0xc0:
							// c1 = patch #						
							tracks[channel].patchNo=c1;
    9a08:	f8 9e       	mul	r15, r24
    9a0a:	f0 01       	movw	r30, r0
    9a0c:	11 24       	eor	r1, r1
    9a0e:	ec 5b       	subi	r30, 0xBC	; 188
    9a10:	f4 4f       	sbci	r31, 0xF4	; 244
    9a12:	40 8b       	std	Z+16, r20	; 0x10


				}//end if(c1==0xff)

				//read next delta time
				nextDeltaTime=ReadVarLen(&songPos);			
    9a14:	80 ec       	ldi	r24, 0xC0	; 192
    9a16:	9b e0       	ldi	r25, 0x0B	; 11
    9a18:	0e 94 a8 4a 	call	0x9550	; 0x9550 <ReadVarLen>
    9a1c:	90 93 be 0b 	sts	0x0BBE, r25
    9a20:	80 93 bd 0b 	sts	0x0BBD, r24
				currDeltaTime=0;
    9a24:	10 92 b8 0b 	sts	0x0BB8, r1
    9a28:	10 92 b7 0b 	sts	0x0BB7, r1
    9a2c:	3b cf       	rjmp	.-394    	; 0x98a4 <ProcessMusic+0xdc>
					}
				#endif

			}//end while
		
			currDeltaTime++;
    9a2e:	01 96       	adiw	r24, 0x01	; 1
    9a30:	90 93 b8 0b 	sts	0x0BB8, r25
    9a34:	80 93 b7 0b 	sts	0x0BB7, r24
    9a38:	9d e4       	ldi	r25, 0x4D	; 77
    9a3a:	a9 2e       	mov	r10, r25
    9a3c:	9b e0       	ldi	r25, 0x0B	; 11
    9a3e:	b9 2e       	mov	r11, r25
    9a40:	27 e5       	ldi	r18, 0x57	; 87
    9a42:	c2 2e       	mov	r12, r18
    9a44:	2b e0       	ldi	r18, 0x0B	; 11
    9a46:	d2 2e       	mov	r13, r18
    9a48:	38 e5       	ldi	r19, 0x58	; 88
    9a4a:	e3 2e       	mov	r14, r19
    9a4c:	3b e0       	ldi	r19, 0x0B	; 11
    9a4e:	f3 2e       	mov	r15, r19
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    9a50:	66 24       	eor	r6, r6
    9a52:	6a 94       	dec	r6
    9a54:	71 2c       	mov	r7, r1
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//process patch command stream
		if((track->flags & TRACK_FLAGS_PLAYING) && (track->patchCommandStreamPos!=NULL) && ((track->flags & TRACK_FLAGS_HOLD_ENV)==0)){
    9a56:	88 81       	ld	r24, Y
    9a58:	85 ff       	sbrs	r24, 5
    9a5a:	42 c0       	rjmp	.+132    	; 0x9ae0 <ProcessMusic+0x318>
    9a5c:	2d 89       	ldd	r18, Y+21	; 0x15
    9a5e:	3e 89       	ldd	r19, Y+22	; 0x16
    9a60:	23 2b       	or	r18, r19
    9a62:	09 f4       	brne	.+2      	; 0x9a66 <ProcessMusic+0x29e>
    9a64:	3d c0       	rjmp	.+122    	; 0x9ae0 <ProcessMusic+0x318>
    9a66:	86 fd       	sbrc	r24, 6
    9a68:	3b c0       	rjmp	.+118    	; 0x9ae0 <ProcessMusic+0x318>
    9a6a:	47 01       	movw	r8, r14
    9a6c:	f2 e0       	ldi	r31, 0x02	; 2
    9a6e:	8f 1a       	sub	r8, r31
    9a70:	91 08       	sbc	r9, r1

			//process all simultaneous events
			while(track->patchCurrDeltaTime==track->patchNextDeltaTime){
    9a72:	d6 01       	movw	r26, r12
    9a74:	9c 91       	ld	r25, X
    9a76:	f4 01       	movw	r30, r8
    9a78:	80 81       	ld	r24, Z
    9a7a:	98 13       	cpse	r25, r24
    9a7c:	2e c0       	rjmp	.+92     	; 0x9ada <ProcessMusic+0x312>

				c1=pgm_read_byte(track->patchCommandStreamPos++);
    9a7e:	ed 89       	ldd	r30, Y+21	; 0x15
    9a80:	fe 89       	ldd	r31, Y+22	; 0x16
    9a82:	bf 01       	movw	r22, r30
    9a84:	6f 5f       	subi	r22, 0xFF	; 255
    9a86:	7f 4f       	sbci	r23, 0xFF	; 255
    9a88:	7e 8b       	std	Y+22, r23	; 0x16
    9a8a:	6d 8b       	std	Y+21, r22	; 0x15
    9a8c:	84 91       	lpm	r24, Z
				if(c1==PATCH_END){
    9a8e:	8f 3f       	cpi	r24, 0xFF	; 255
    9a90:	31 f4       	brne	.+12     	; 0x9a9e <ProcessMusic+0x2d6>
					//end of stream!
					track->flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    9a92:	88 81       	ld	r24, Y
    9a94:	8f 77       	andi	r24, 0x7F	; 127
    9a96:	88 83       	st	Y, r24
					track->patchCommandStreamPos=NULL;
    9a98:	1e 8a       	std	Y+22, r1	; 0x16
    9a9a:	1d 8a       	std	Y+21, r1	; 0x15
					break;
    9a9c:	1e c0       	rjmp	.+60     	; 0x9ada <ProcessMusic+0x312>

				}else{
					c2=pgm_read_byte(track->patchCommandStreamPos++);
    9a9e:	9f 01       	movw	r18, r30
    9aa0:	2e 5f       	subi	r18, 0xFE	; 254
    9aa2:	3f 4f       	sbci	r19, 0xFF	; 255
    9aa4:	3e 8b       	std	Y+22, r19	; 0x16
    9aa6:	2d 8b       	std	Y+21, r18	; 0x15
    9aa8:	fb 01       	movw	r30, r22
    9aaa:	64 91       	lpm	r22, Z
					//invoke patch command function
					((PatchCommand)pgm_read_word(&patchCommands[c1]))(track,c2);
    9aac:	e8 2f       	mov	r30, r24
    9aae:	f0 e0       	ldi	r31, 0x00	; 0
    9ab0:	ee 0f       	add	r30, r30
    9ab2:	ff 1f       	adc	r31, r31
    9ab4:	e2 54       	subi	r30, 0x42	; 66
    9ab6:	ff 4f       	sbci	r31, 0xFF	; 255
    9ab8:	25 91       	lpm	r18, Z+
    9aba:	34 91       	lpm	r19, Z
    9abc:	ce 01       	movw	r24, r28
    9abe:	f9 01       	movw	r30, r18
    9ac0:	09 95       	icall
				}

				//read next delta time
				track->patchNextDeltaTime=pgm_read_byte(track->patchCommandStreamPos++);
    9ac2:	ed 89       	ldd	r30, Y+21	; 0x15
    9ac4:	fe 89       	ldd	r31, Y+22	; 0x16
    9ac6:	cf 01       	movw	r24, r30
    9ac8:	01 96       	adiw	r24, 0x01	; 1
    9aca:	9e 8b       	std	Y+22, r25	; 0x16
    9acc:	8d 8b       	std	Y+21, r24	; 0x15
    9ace:	e4 91       	lpm	r30, Z
    9ad0:	d4 01       	movw	r26, r8
    9ad2:	ec 93       	st	X, r30
				track->patchCurrDeltaTime=0;
    9ad4:	f6 01       	movw	r30, r12
    9ad6:	10 82       	st	Z, r1
    9ad8:	cc cf       	rjmp	.-104    	; 0x9a72 <ProcessMusic+0x2aa>
			}

			track->patchCurrDeltaTime++;
    9ada:	9f 5f       	subi	r25, 0xFF	; 255
    9adc:	d6 01       	movw	r26, r12
    9ade:	9c 93       	st	X, r25
		}

		if(track->flags & TRACK_FLAGS_PLAYING){
    9ae0:	98 81       	ld	r25, Y
    9ae2:	95 ff       	sbrs	r25, 5
    9ae4:	6c c0       	rjmp	.+216    	; 0x9bbe <ProcessMusic+0x3f6>

			if(track->patchPlayingTime<0xff){
    9ae6:	f7 01       	movw	r30, r14
    9ae8:	80 81       	ld	r24, Z
    9aea:	8f 3f       	cpi	r24, 0xFF	; 255
    9aec:	11 f0       	breq	.+4      	; 0x9af2 <ProcessMusic+0x32a>
				track->patchPlayingTime++;
    9aee:	8f 5f       	subi	r24, 0xFF	; 255
    9af0:	80 83       	st	Z, r24
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
    9af2:	97 fd       	sbrc	r25, 7
    9af4:	04 c0       	rjmp	.+8      	; 0x9afe <ProcessMusic+0x336>
    9af6:	f7 01       	movw	r30, r14
    9af8:	38 97       	sbiw	r30, 0x08	; 8
				//if an FX, use full track volume.
				trackVol=0xff;
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
    9afa:	90 81       	ld	r25, Z
    9afc:	01 c0       	rjmp	.+2      	; 0x9b00 <ProcessMusic+0x338>
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
				//if an FX, use full track volume.
				trackVol=0xff;
    9afe:	9f ef       	ldi	r25, 0xFF	; 255
    9b00:	f7 01       	movw	r30, r14
    9b02:	37 97       	sbiw	r30, 0x07	; 7
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
			}
			if(track->noteVol!=0 && track->envelopeVol!=0 && trackVol!=0 && masterVolume!=0){
    9b04:	80 81       	ld	r24, Z
    9b06:	88 23       	and	r24, r24
    9b08:	09 f4       	brne	.+2      	; 0x9b0c <ProcessMusic+0x344>
    9b0a:	4e c0       	rjmp	.+156    	; 0x9ba8 <ProcessMusic+0x3e0>
    9b0c:	31 96       	adiw	r30, 0x01	; 1
    9b0e:	50 81       	ld	r21, Z
    9b10:	55 23       	and	r21, r21
    9b12:	09 f4       	brne	.+2      	; 0x9b16 <ProcessMusic+0x34e>
    9b14:	49 c0       	rjmp	.+146    	; 0x9ba8 <ProcessMusic+0x3e0>
    9b16:	99 23       	and	r25, r25
    9b18:	09 f4       	brne	.+2      	; 0x9b1c <ProcessMusic+0x354>
    9b1a:	46 c0       	rjmp	.+140    	; 0x9ba8 <ProcessMusic+0x3e0>
    9b1c:	40 91 bc 0b 	lds	r20, 0x0BBC
    9b20:	44 23       	and	r20, r20
    9b22:	09 f4       	brne	.+2      	; 0x9b26 <ProcessMusic+0x35e>
    9b24:	41 c0       	rjmp	.+130    	; 0x9ba8 <ProcessMusic+0x3e0>

				uVol=(track->noteVol*trackVol)+0x100;
    9b26:	89 9f       	mul	r24, r25
    9b28:	c0 01       	movw	r24, r0
    9b2a:	11 24       	eor	r1, r1
    9b2c:	93 95       	inc	r25
				uVol>>=8;
    9b2e:	89 2f       	mov	r24, r25
    9b30:	99 27       	eor	r25, r25
				
				uVol=(uVol*track->envelopeVol)+0x100;
    9b32:	58 9f       	mul	r21, r24
    9b34:	90 01       	movw	r18, r0
    9b36:	59 9f       	mul	r21, r25
    9b38:	30 0d       	add	r19, r0
    9b3a:	11 24       	eor	r1, r1
    9b3c:	c9 01       	movw	r24, r18
    9b3e:	93 95       	inc	r25
				uVol>>=8;
    9b40:	89 2f       	mov	r24, r25
    9b42:	99 27       	eor	r25, r25
    9b44:	3b 97       	sbiw	r30, 0x0b	; 11
				
				#if MUSIC_ENGINE == MIDI
					uVol=(uVol*track->expressionVol)+0x100;
    9b46:	50 81       	ld	r21, Z
    9b48:	58 9f       	mul	r21, r24
    9b4a:	90 01       	movw	r18, r0
    9b4c:	59 9f       	mul	r21, r25
    9b4e:	30 0d       	add	r19, r0
    9b50:	11 24       	eor	r1, r1
    9b52:	33 95       	inc	r19
					uVol>>=8;
    9b54:	23 2f       	mov	r18, r19
    9b56:	33 27       	eor	r19, r19
				#endif
				
				uVol=(uVol*masterVolume)+0x100;
    9b58:	42 9f       	mul	r20, r18
    9b5a:	c0 01       	movw	r24, r0
    9b5c:	43 9f       	mul	r20, r19
    9b5e:	90 0d       	add	r25, r0
    9b60:	11 24       	eor	r1, r1
    9b62:	93 95       	inc	r25
				uVol>>=8;
    9b64:	89 2f       	mov	r24, r25
    9b66:	99 27       	eor	r25, r25
    9b68:	37 96       	adiw	r30, 0x07	; 7

				if(track->tremoloLevel>0){					
    9b6a:	20 81       	ld	r18, Z
    9b6c:	22 23       	and	r18, r18
    9b6e:	f1 f0       	breq	.+60     	; 0x9bac <ProcessMusic+0x3e4>
					tmp=pgm_read_byte(&(waves[track->tremoloPos]));
    9b70:	d5 01       	movw	r26, r10
    9b72:	ec 91       	ld	r30, X
    9b74:	f0 e0       	ldi	r31, 0x00	; 0
    9b76:	e0 50       	subi	r30, 0x00	; 0
    9b78:	f1 46       	sbci	r31, 0x61	; 97
    9b7a:	e4 91       	lpm	r30, Z
					tmp-=128; //convert to unsigned
    9b7c:	e0 58       	subi	r30, 0x80	; 128

					tVol=(track->tremoloLevel*tmp)+0x100;
    9b7e:	2e 9f       	mul	r18, r30
    9b80:	f0 01       	movw	r30, r0
    9b82:	11 24       	eor	r1, r1
    9b84:	f3 95       	inc	r31
					tVol>>=8;
    9b86:	ef 2f       	mov	r30, r31
    9b88:	ff 27       	eor	r31, r31
					
					uVol=(uVol*(0xff-tVol))+0x100;
    9b8a:	a3 01       	movw	r20, r6
    9b8c:	4e 1b       	sub	r20, r30
    9b8e:	5f 0b       	sbc	r21, r31
    9b90:	48 9f       	mul	r20, r24
    9b92:	90 01       	movw	r18, r0
    9b94:	49 9f       	mul	r20, r25
    9b96:	30 0d       	add	r19, r0
    9b98:	58 9f       	mul	r21, r24
    9b9a:	30 0d       	add	r19, r0
    9b9c:	11 24       	eor	r1, r1
    9b9e:	c9 01       	movw	r24, r18
    9ba0:	93 95       	inc	r25
					uVol>>=8;
    9ba2:	89 2f       	mov	r24, r25
    9ba4:	99 27       	eor	r25, r25
    9ba6:	02 c0       	rjmp	.+4      	; 0x9bac <ProcessMusic+0x3e4>
				}

			
			}else{
				uVol=0;
    9ba8:	80 e0       	ldi	r24, 0x00	; 0
    9baa:	90 e0       	ldi	r25, 0x00	; 0
			}	

			track->tremoloPos+=track->tremoloRate;	
    9bac:	f5 01       	movw	r30, r10
    9bae:	30 81       	ld	r19, Z
    9bb0:	f7 01       	movw	r30, r14
    9bb2:	39 97       	sbiw	r30, 0x09	; 9
    9bb4:	20 81       	ld	r18, Z
    9bb6:	23 0f       	add	r18, r19
    9bb8:	d5 01       	movw	r26, r10
    9bba:	2c 93       	st	X, r18
    9bbc:	02 c0       	rjmp	.+4      	; 0x9bc2 <ProcessMusic+0x3fa>

		}else{
			uVol=0;
    9bbe:	80 e0       	ldi	r24, 0x00	; 0
    9bc0:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
    9bc2:	f8 01       	movw	r30, r16
    9bc4:	80 83       	st	Z, r24
    9bc6:	67 96       	adiw	r28, 0x17	; 23
    9bc8:	0a 5f       	subi	r16, 0xFA	; 250
    9bca:	1f 4f       	sbci	r17, 0xFF	; 255
    9bcc:	f7 e1       	ldi	r31, 0x17	; 23
    9bce:	af 0e       	add	r10, r31
    9bd0:	b1 1c       	adc	r11, r1
    9bd2:	87 e1       	ldi	r24, 0x17	; 23
    9bd4:	c8 0e       	add	r12, r24
    9bd6:	d1 1c       	adc	r13, r1
    9bd8:	97 e1       	ldi	r25, 0x17	; 23
    9bda:	e9 0e       	add	r14, r25
    9bdc:	f1 1c       	adc	r15, r1


	//
	// Process patches command streams & final volume
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    9bde:	ab e0       	ldi	r26, 0x0B	; 11
    9be0:	c7 3b       	cpi	r28, 0xB7	; 183
    9be2:	da 07       	cpc	r29, r26
    9be4:	09 f0       	breq	.+2      	; 0x9be8 <ProcessMusic+0x420>
    9be6:	37 cf       	rjmp	.-402    	; 0x9a56 <ProcessMusic+0x28e>
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
	}
	
}
    9be8:	df 91       	pop	r29
    9bea:	cf 91       	pop	r28
    9bec:	1f 91       	pop	r17
    9bee:	0f 91       	pop	r16
    9bf0:	ff 90       	pop	r15
    9bf2:	ef 90       	pop	r14
    9bf4:	df 90       	pop	r13
    9bf6:	cf 90       	pop	r12
    9bf8:	bf 90       	pop	r11
    9bfa:	af 90       	pop	r10
    9bfc:	9f 90       	pop	r9
    9bfe:	8f 90       	pop	r8
    9c00:	7f 90       	pop	r7
    9c02:	6f 90       	pop	r6
    9c04:	08 95       	ret

00009c06 <SetMasterVolume>:
}



void SetMasterVolume(unsigned char vol){
	masterVolume=vol;
    9c06:	80 93 bc 0b 	sts	0x0BBC, r24
    9c0a:	08 95       	ret

00009c0c <SetMixerNote>:
; r22: -MIDI note, 69=A5(440) for waves channels (0,1,2)
;      -Noise params for channel 3
;***********************
.section .text.SetMixerNote
SetMixerNote:
	clr r25
    9c0c:	99 27       	eor	r25, r25
	clr r23
    9c0e:	77 27       	eor	r23, r23
	#if SOUND_MIXER == MIXER_TYPE_VSYNC
		cpi r24,3
		brlo set_note_waves
		ret		
	#else
		cpi r24,3
    9c10:	83 30       	cpi	r24, 0x03	; 3
		brne set_note_waves		
    9c12:	09 f4       	brne	.+2      	; 0x9c16 <set_note_waves>
		ret
    9c14:	08 95       	ret

00009c16 <set_note_waves>:
	#endif
#endif

set_note_waves:
	;get step for note
	ldi ZL,lo8(steptable)
    9c16:	e8 e0       	ldi	r30, 0x08	; 8
	ldi ZH,hi8(steptable)
    9c18:	fd e9       	ldi	r31, 0x9D	; 157
	lsl r22
    9c1a:	66 0f       	add	r22, r22
	rol r23
    9c1c:	77 1f       	adc	r23, r23
	add ZL,r22
    9c1e:	e6 0f       	add	r30, r22
	adc ZH,r23	
    9c20:	f7 1f       	adc	r31, r23

	lpm r26,Z+
    9c22:	a5 91       	lpm	r26, Z+
	lpm r27,Z
    9c24:	b4 91       	lpm	r27, Z

	ldi ZL,lo8(mixerStruct)
    9c26:	e2 e0       	ldi	r30, 0x02	; 2
	ldi ZH,hi8(mixerStruct)
    9c28:	fb e0       	ldi	r31, 0x0B	; 11
	ldi r18,CHANNEL_STRUCT_SIZE
    9c2a:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24
    9c2c:	28 9f       	mul	r18, r24
	add ZL,r0
    9c2e:	e0 0d       	add	r30, r0
	adc ZH,r1
    9c30:	f1 1d       	adc	r31, r1
	
	std Z+step_lo,r26
    9c32:	a1 83       	std	Z+1, r26	; 0x01
	std Z+step_hi,r27
    9c34:	b2 83       	std	Z+2, r27	; 0x02
	
	clr r1
    9c36:	11 24       	eor	r1, r1
	

	ret
    9c38:	08 95       	ret

00009c3a <SetMixerWave>:
;         Noise channel: 0xfe=7 bit lfsr, 0xff=15 bit lfsr
;                 
;***********************
.section .text.SetMixerWave
SetMixerWave:
	clr r25
    9c3a:	99 27       	eor	r25, r25
	clr r23
    9c3c:	77 27       	eor	r23, r23

	ldi ZL,lo8(mixerStruct)
    9c3e:	e2 e0       	ldi	r30, 0x02	; 2
	ldi ZH,hi8(mixerStruct)
    9c40:	fb e0       	ldi	r31, 0x0B	; 11
	ldi r18,CHANNEL_STRUCT_SIZE
    9c42:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24	
    9c44:	28 9f       	mul	r18, r24
	add ZL,r0
    9c46:	e0 0d       	add	r30, r0
	adc ZH,r1
    9c48:	f1 1d       	adc	r31, r1

#if MIXER_CHAN4_TYPE == 0
	cpi r22,0xfe	;7bit lfsr
    9c4a:	6e 3f       	cpi	r22, 0xFE	; 254
	brne smw1
    9c4c:	31 f4       	brne	.+12     	; 0x9c5a <smw1>
	lds r22,tr4_params
    9c4e:	60 91 15 0b 	lds	r22, 0x0B15
	andi r22,0xfe;
    9c52:	6e 7f       	andi	r22, 0xFE	; 254
	sts tr4_params,r22
    9c54:	60 93 15 0b 	sts	0x0B15, r22
	rjmp esmw	
    9c58:	0b c0       	rjmp	.+22     	; 0x9c70 <esmw>

00009c5a <smw1>:
smw1:
	cpi r22,0xff	;15bit lfsr
    9c5a:	6f 3f       	cpi	r22, 0xFF	; 255
	brne smw2
    9c5c:	31 f4       	brne	.+12     	; 0x9c6a <smw2>
	lds r22,tr4_params
    9c5e:	60 91 15 0b 	lds	r22, 0x0B15
	ori r22,0xfe;
    9c62:	6e 6f       	ori	r22, 0xFE	; 254
	sts tr4_params,r22	
    9c64:	60 93 15 0b 	sts	0x0B15, r22
	rjmp esmw
    9c68:	03 c0       	rjmp	.+6      	; 0x9c70 <esmw>

00009c6a <smw2>:
smw2:
#endif

	ldi r23,hi8(waves)
    9c6a:	7f e9       	ldi	r23, 0x9F	; 159
	add r23,r22
    9c6c:	76 0f       	add	r23, r22
	std Z+samplepos_hi,r23 ;store path No
    9c6e:	75 83       	std	Z+5, r23	; 0x05

00009c70 <esmw>:

esmw:
	clr r1	
    9c70:	11 24       	eor	r1, r1
	ret
    9c72:	08 95       	ret
	...

00009d00 <DisableSoundEngine>:
; no CPU cycles are consumed.
; C-callable
;*****************************
.section .text.DisableSoundEngine
DisableSoundEngine:	
	ldi r24,0
    9d00:	80 e0       	ldi	r24, 0x00	; 0
	sts sound_enabled,r24
    9d02:	80 93 01 0b 	sts	0x0B01, r24
	ret
    9d06:	08 95       	ret

00009d08 <steptable>:
    9d08:	22 00       	.word	0x0022	; ????
    9d0a:	24 00       	.word	0x0024	; ????
    9d0c:	26 00       	.word	0x0026	; ????
    9d0e:	28 00       	.word	0x0028	; ????
    9d10:	2b 00       	.word	0x002b	; ????
    9d12:	2d 00       	.word	0x002d	; ????
    9d14:	30 00       	.word	0x0030	; ????
    9d16:	33 00       	.word	0x0033	; ????
    9d18:	36 00       	.word	0x0036	; ????
    9d1a:	39 00       	.word	0x0039	; ????
    9d1c:	3d 00       	.word	0x003d	; ????
    9d1e:	40 00       	.word	0x0040	; ????
    9d20:	44 00       	.word	0x0044	; ????
    9d22:	48 00       	.word	0x0048	; ????
    9d24:	4c 00       	.word	0x004c	; ????
    9d26:	51 00       	.word	0x0051	; ????
    9d28:	56 00       	.word	0x0056	; ????
    9d2a:	5b 00       	.word	0x005b	; ????
    9d2c:	60 00       	.word	0x0060	; ????
    9d2e:	66 00       	.word	0x0066	; ????
    9d30:	6c 00       	.word	0x006c	; ????
    9d32:	73 00       	.word	0x0073	; ????
    9d34:	79 00       	.word	0x0079	; ????
    9d36:	81 00       	.word	0x0081	; ????
    9d38:	88 00       	.word	0x0088	; ????
    9d3a:	90 00       	.word	0x0090	; ????
    9d3c:	99 00       	.word	0x0099	; ????
    9d3e:	a2 00       	.word	0x00a2	; ????
    9d40:	ac 00       	.word	0x00ac	; ????
    9d42:	b6 00       	.word	0x00b6	; ????
    9d44:	c1 00       	.word	0x00c1	; ????
    9d46:	cc 00       	.word	0x00cc	; ????
    9d48:	d8 00       	.word	0x00d8	; ????
    9d4a:	e5 00       	.word	0x00e5	; ????
    9d4c:	f3 00       	.word	0x00f3	; ????
    9d4e:	01 01       	movw	r0, r2
    9d50:	10 01       	movw	r2, r0
    9d52:	21 01       	movw	r4, r2
    9d54:	32 01       	movw	r6, r4
    9d56:	44 01       	movw	r8, r8
    9d58:	57 01       	movw	r10, r14
    9d5a:	6c 01       	movw	r12, r24
    9d5c:	81 01       	movw	r16, r2
    9d5e:	98 01       	movw	r18, r16
    9d60:	b0 01       	movw	r22, r0
    9d62:	ca 01       	movw	r24, r20
    9d64:	e5 01       	movw	r28, r10
    9d66:	02 02       	muls	r16, r18
    9d68:	21 02       	muls	r18, r17
    9d6a:	41 02       	muls	r20, r17
    9d6c:	64 02       	muls	r22, r20
    9d6e:	88 02       	muls	r24, r24
    9d70:	ae 02       	muls	r26, r30
    9d72:	d7 02       	muls	r29, r23
    9d74:	03 03       	mulsu	r16, r19
    9d76:	30 03       	mulsu	r19, r16
    9d78:	61 03       	mulsu	r22, r17
    9d7a:	94 03       	fmuls	r17, r20
    9d7c:	cb 03       	fmulsu	r20, r19
    9d7e:	05 04       	cpc	r0, r5
    9d80:	42 04       	cpc	r4, r2
    9d82:	83 04       	cpc	r8, r3
    9d84:	c7 04       	cpc	r12, r7
    9d86:	10 05       	cpc	r17, r0
    9d88:	5d 05       	cpc	r21, r13
    9d8a:	af 05       	cpc	r26, r15
    9d8c:	05 06       	cpc	r0, r21
    9d8e:	61 06       	cpc	r6, r17
    9d90:	c2 06       	cpc	r12, r18
    9d92:	29 07       	cpc	r18, r25
    9d94:	96 07       	cpc	r25, r22
    9d96:	09 08       	sbc	r0, r9
    9d98:	83 08       	sbc	r8, r3
    9d9a:	05 09       	sbc	r16, r5
    9d9c:	8e 09       	sbc	r24, r14
    9d9e:	20 0a       	sbc	r2, r16
    9da0:	ba 0a       	sbc	r11, r26
    9da2:	5d 0b       	sbc	r21, r29
    9da4:	0a 0c       	add	r0, r10
    9da6:	c1 0c       	add	r12, r1
    9da8:	84 0d       	add	r24, r4
    9daa:	51 0e       	add	r5, r17
    9dac:	2b 0f       	add	r18, r27
    9dae:	12 10       	cpse	r1, r2
    9db0:	07 11       	cpse	r16, r7
    9db2:	0a 12       	cpse	r0, r26
    9db4:	1d 13       	cpse	r17, r29
    9db6:	40 14       	cp	r4, r0
    9db8:	74 15       	cp	r23, r4
    9dba:	ba 16       	cp	r11, r26
    9dbc:	14 18       	sub	r1, r4
    9dbe:	83 19       	sub	r24, r3
    9dc0:	07 1b       	sub	r16, r23
    9dc2:	a3 1c       	adc	r10, r3
    9dc4:	57 1e       	adc	r5, r23
    9dc6:	24 20       	and	r2, r4
    9dc8:	0e 22       	and	r0, r30
    9dca:	14 24       	eor	r1, r4
    9dcc:	39 26       	eor	r3, r25
    9dce:	7f 28       	or	r7, r15
    9dd0:	e8 2a       	or	r14, r24
    9dd2:	75 2d       	mov	r23, r5
    9dd4:	29 30       	cpi	r18, 0x09	; 9
    9dd6:	06 33       	cpi	r16, 0x36	; 54
    9dd8:	0f 36       	cpi	r16, 0x6F	; 111
    9dda:	45 39       	cpi	r20, 0x95	; 149
    9ddc:	ad 3c       	cpi	r26, 0xCD	; 205
    9dde:	49 40       	sbci	r20, 0x09	; 9
    9de0:	1b 44       	sbci	r17, 0x4B	; 75
    9de2:	28 48       	sbci	r18, 0x88	; 136
    9de4:	73 4c       	sbci	r23, 0xC3	; 195
    9de6:	fe 50       	subi	r31, 0x0E	; 14
    9de8:	cf 55       	subi	r28, 0x5F	; 95
    9dea:	ea 5a       	subi	r30, 0xAA	; 170
    9dec:	51 60       	ori	r21, 0x01	; 1
    9dee:	0c 66       	ori	r16, 0x6C	; 108
    9df0:	1d 6c       	ori	r17, 0xCD	; 205
    9df2:	8b 72       	andi	r24, 0x2B	; 43
    9df4:	5a 79       	andi	r21, 0x9A	; 154
    9df6:	92 80       	ldd	r9, Z+2	; 0x02
    9df8:	37 88       	ldd	r3, Z+23	; 0x17
    9dfa:	50 90 e5 98 	lds	r5, 0x98E5
    9dfe:	fd a1       	ldd	r31, Y+37	; 0x25
    9e00:	9f ab       	std	Y+55, r25	; 0x37
    9e02:	d3 b5       	in	r29, 0x23	; 35
    9e04:	a3 c0       	rjmp	.+326    	; 0x9f4c <waves+0x4c>
	...

00009f00 <waves>:
    9f00:	00 03       	mulsu	r16, r16
    9f02:	06 09       	sbc	r16, r6
    9f04:	0c 10       	cpse	r0, r12
    9f06:	13 16       	cp	r1, r19
    9f08:	19 1c       	adc	r1, r9
    9f0a:	1f 22       	and	r1, r31
    9f0c:	25 28       	or	r2, r5
    9f0e:	2b 2e       	mov	r2, r27
    9f10:	31 33       	cpi	r19, 0x31	; 49
    9f12:	36 39       	cpi	r19, 0x96	; 150
    9f14:	3c 3f       	cpi	r19, 0xFC	; 252
    9f16:	41 44       	sbci	r20, 0x41	; 65
    9f18:	47 49       	sbci	r20, 0x97	; 151
    9f1a:	4c 4e       	sbci	r20, 0xEC	; 236
    9f1c:	51 53       	subi	r21, 0x31	; 49
    9f1e:	55 58       	subi	r21, 0x85	; 133
    9f20:	5a 5c       	subi	r21, 0xCA	; 202
    9f22:	5e 60       	ori	r21, 0x0E	; 14
    9f24:	62 64       	ori	r22, 0x42	; 66
    9f26:	66 68       	ori	r22, 0x86	; 134
    9f28:	6a 6b       	ori	r22, 0xBA	; 186
    9f2a:	6d 6f       	ori	r22, 0xFD	; 253
    9f2c:	70 71       	andi	r23, 0x10	; 16
    9f2e:	73 74       	andi	r23, 0x43	; 67
    9f30:	75 76       	andi	r23, 0x65	; 101
    9f32:	78 79       	andi	r23, 0x98	; 152
    9f34:	7a 7a       	andi	r23, 0xAA	; 170
    9f36:	7b 7c       	andi	r23, 0xCB	; 203
    9f38:	7d 7d       	andi	r23, 0xDD	; 221
    9f3a:	7e 7e       	andi	r23, 0xEE	; 238
    9f3c:	7e 7f       	andi	r23, 0xFE	; 254
    9f3e:	7f 7f       	andi	r23, 0xFF	; 255
    9f40:	7f 7f       	andi	r23, 0xFF	; 255
    9f42:	7f 7f       	andi	r23, 0xFF	; 255
    9f44:	7e 7e       	andi	r23, 0xEE	; 238
    9f46:	7e 7d       	andi	r23, 0xDE	; 222
    9f48:	7d 7c       	andi	r23, 0xCD	; 205
    9f4a:	7b 7a       	andi	r23, 0xAB	; 171
    9f4c:	7a 79       	andi	r23, 0x9A	; 154
    9f4e:	78 76       	andi	r23, 0x68	; 104
    9f50:	75 74       	andi	r23, 0x45	; 69
    9f52:	73 71       	andi	r23, 0x13	; 19
    9f54:	70 6f       	ori	r23, 0xF0	; 240
    9f56:	6d 6b       	ori	r22, 0xBD	; 189
    9f58:	6a 68       	ori	r22, 0x8A	; 138
    9f5a:	66 64       	ori	r22, 0x46	; 70
    9f5c:	62 60       	ori	r22, 0x02	; 2
    9f5e:	5e 5c       	subi	r21, 0xCE	; 206
    9f60:	5a 58       	subi	r21, 0x8A	; 138
    9f62:	55 53       	subi	r21, 0x35	; 53
    9f64:	51 4e       	sbci	r21, 0xE1	; 225
    9f66:	4c 49       	sbci	r20, 0x9C	; 156
    9f68:	47 44       	sbci	r20, 0x47	; 71
    9f6a:	41 3f       	cpi	r20, 0xF1	; 241
    9f6c:	3c 39       	cpi	r19, 0x9C	; 156
    9f6e:	36 33       	cpi	r19, 0x36	; 54
    9f70:	31 2e       	mov	r3, r17
    9f72:	2b 28       	or	r2, r11
    9f74:	25 22       	and	r2, r21
    9f76:	1f 1c       	adc	r1, r15
    9f78:	19 16       	cp	r1, r25
    9f7a:	13 10       	cpse	r1, r3
    9f7c:	0c 09       	sbc	r16, r12
    9f7e:	06 03       	mulsu	r16, r22
    9f80:	00 fd       	sbrc	r16, 0
    9f82:	fa f7       	brpl	.-2      	; 0x9f82 <waves+0x82>
    9f84:	f4 f0       	brlt	.+60     	; 0x9fc2 <waves+0xc2>
    9f86:	ed ea       	ldi	r30, 0xAD	; 173
    9f88:	e7 e4       	ldi	r30, 0x47	; 71
    9f8a:	e1 de       	rcall	.-574    	; 0x9d4e <steptable+0x46>
    9f8c:	db d8       	rcall	.-3658   	; 0x9144 <ReadButtons+0x2c>
    9f8e:	d5 d2       	rcall	.+1450   	; 0xa53a <waves+0x63a>
    9f90:	cf cd       	rjmp	.-1122   	; 0x9b30 <ProcessMusic+0x368>
    9f92:	ca c7       	rjmp	.+3988   	; 0xaf28 <LBGetNextFrameReverse+0x52>
    9f94:	c4 c1       	rjmp	.+904    	; 0xa31e <waves+0x41e>
    9f96:	bf bc       	out	0x2f, r11	; 47
    9f98:	b9 b7       	in	r27, 0x39	; 57
    9f9a:	b4 b2       	in	r11, 0x14	; 20
    9f9c:	af ad       	ldd	r26, Y+63	; 0x3f
    9f9e:	ab a8       	ldd	r10, Y+51	; 0x33
    9fa0:	a6 a4       	ldd	r10, Z+46	; 0x2e
    9fa2:	a2 a0       	ldd	r10, Z+34	; 0x22
    9fa4:	9e 9c       	mul	r9, r14
    9fa6:	9a 98       	cbi	0x13, 2	; 19
    9fa8:	96 95       	lsr	r25
    9faa:	93 91       	.word	0x9193	; ????
    9fac:	90 8f       	std	Z+24, r25	; 0x18
    9fae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    9fb0:	8b 8a       	std	Y+19, r8	; 0x13
    9fb2:	88 87       	std	Y+8, r24	; 0x08
    9fb4:	86 86       	std	Z+14, r8	; 0x0e
    9fb6:	85 84       	ldd	r8, Z+13	; 0x0d
    9fb8:	83 83       	std	Z+3, r24	; 0x03
    9fba:	82 82       	std	Z+2, r8	; 0x02
    9fbc:	82 81       	ldd	r24, Z+2	; 0x02
    9fbe:	81 81       	ldd	r24, Z+1	; 0x01
    9fc0:	81 81       	ldd	r24, Z+1	; 0x01
    9fc2:	81 81       	ldd	r24, Z+1	; 0x01
    9fc4:	82 82       	std	Z+2, r8	; 0x02
    9fc6:	82 83       	std	Z+2, r24	; 0x02
    9fc8:	83 84       	ldd	r8, Z+11	; 0x0b
    9fca:	85 86       	std	Z+13, r8	; 0x0d
    9fcc:	86 87       	std	Z+14, r24	; 0x0e
    9fce:	88 8a       	std	Y+16, r8	; 0x10
    9fd0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    9fd2:	8d 8f       	std	Y+29, r24	; 0x1d
    9fd4:	90 91 93 95 	lds	r25, 0x9593
    9fd8:	96 98       	cbi	0x12, 6	; 18
    9fda:	9a 9c       	mul	r9, r10
    9fdc:	9e a0       	ldd	r9, Y+38	; 0x26
    9fde:	a2 a4       	ldd	r10, Z+42	; 0x2a
    9fe0:	a6 a8       	ldd	r10, Z+54	; 0x36
    9fe2:	ab ad       	ldd	r26, Y+59	; 0x3b
    9fe4:	af b2       	in	r10, 0x1f	; 31
    9fe6:	b4 b7       	in	r27, 0x34	; 52
    9fe8:	b9 bc       	out	0x29, r11	; 41
    9fea:	bf c1       	rjmp	.+894    	; 0xa36a <waves+0x46a>
    9fec:	c4 c7       	rjmp	.+3976   	; 0xaf76 <LBGetJoyPadState+0x48>
    9fee:	ca cd       	rjmp	.-1132   	; 0x9b84 <ProcessMusic+0x3bc>
    9ff0:	cf d2       	rcall	.+1438   	; 0xa590 <waves+0x690>
    9ff2:	d5 d8       	rcall	.-3670   	; 0x919e <ReadControllers+0x1a>
    9ff4:	db de       	rcall	.-586    	; 0x9dac <steptable+0xa4>
    9ff6:	e1 e4       	ldi	r30, 0x41	; 65
    9ff8:	e7 ea       	ldi	r30, 0xA7	; 167
    9ffa:	ed f0       	brhs	.+58     	; 0xa036 <waves+0x136>
    9ffc:	f4 f7       	brge	.-4      	; 0x9ffa <waves+0xfa>
    9ffe:	fa fd       	.word	0xfdfa	; ????
    a000:	80 81       	ld	r24, Z
    a002:	82 83       	std	Z+2, r24	; 0x02
    a004:	84 85       	ldd	r24, Z+12	; 0x0c
    a006:	86 87       	std	Z+14, r24	; 0x0e
    a008:	88 89       	ldd	r24, Y+16	; 0x10
    a00a:	8a 8b       	std	Y+18, r24	; 0x12
    a00c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    a00e:	8e 8f       	std	Y+30, r24	; 0x1e
    a010:	90 91 92 93 	lds	r25, 0x9392
    a014:	94 95       	.word	0x9594	; ????
    a016:	96 97       	sbiw	r26, 0x26	; 38
    a018:	98 99       	sbic	0x13, 0	; 19
    a01a:	9a 9b       	sbis	0x13, 2	; 19
    a01c:	9c 9d       	mul	r25, r12
    a01e:	9e 9f       	mul	r25, r30
    a020:	a0 a1       	ldd	r26, Z+32	; 0x20
    a022:	a2 a3       	std	Z+34, r26	; 0x22
    a024:	a4 a5       	ldd	r26, Z+44	; 0x2c
    a026:	a6 a7       	std	Z+46, r26	; 0x2e
    a028:	a8 a9       	ldd	r26, Y+48	; 0x30
    a02a:	aa ab       	std	Y+50, r26	; 0x32
    a02c:	ac ad       	ldd	r26, Y+60	; 0x3c
    a02e:	ae af       	std	Y+62, r26	; 0x3e
    a030:	b0 b1       	in	r27, 0x00	; 0
    a032:	b2 b3       	in	r27, 0x12	; 18
    a034:	b4 b5       	in	r27, 0x24	; 36
    a036:	b6 b7       	in	r27, 0x36	; 54
    a038:	b8 b9       	out	0x08, r27	; 8
    a03a:	ba bb       	out	0x1a, r27	; 26
    a03c:	bc bd       	out	0x2c, r27	; 44
    a03e:	be bf       	out	0x3e, r27	; 62
    a040:	c0 c1       	rjmp	.+896    	; 0xa3c2 <waves+0x4c2>
    a042:	c2 c3       	rjmp	.+1924   	; 0xa7c8 <waves+0x8c8>
    a044:	c4 c5       	rjmp	.+2952   	; 0xabce <MoveSprite+0x16>
    a046:	c6 c7       	rjmp	.+3980   	; 0xafd4 <LBCopyChars+0x10>
    a048:	c8 c9       	rjmp	.-3184   	; 0x93da <PatchCommand06+0x6>
    a04a:	ca cb       	rjmp	.-2156   	; 0x97e0 <ProcessMusic+0x18>
    a04c:	cc cd       	rjmp	.-1128   	; 0x9be6 <ProcessMusic+0x41e>
    a04e:	ce cf       	rjmp	.-100    	; 0x9fec <waves+0xec>
    a050:	d0 d1       	rcall	.+928    	; 0xa3f2 <waves+0x4f2>
    a052:	d2 d3       	rcall	.+1956   	; 0xa7f8 <waves+0x8f8>
    a054:	d4 d5       	rcall	.+2984   	; 0xabfe <MoveSprite+0x46>
    a056:	d6 d7       	rcall	.+4012   	; 0xb004 <LBPrintStr+0x28>
    a058:	d8 d9       	rcall	.-3152   	; 0x940a <PatchCommand11+0x1a>
    a05a:	da db       	rcall	.-2124   	; 0x9810 <ProcessMusic+0x48>
    a05c:	dc dd       	rcall	.-1096   	; 0x9c16 <set_note_waves>
    a05e:	de df       	rcall	.-68     	; 0xa01c <waves+0x11c>
    a060:	e0 e1       	ldi	r30, 0x10	; 16
    a062:	e2 e3       	ldi	r30, 0x32	; 50
    a064:	e4 e5       	ldi	r30, 0x54	; 84
    a066:	e6 e7       	ldi	r30, 0x76	; 118
    a068:	e8 e9       	ldi	r30, 0x98	; 152
    a06a:	ea eb       	ldi	r30, 0xBA	; 186
    a06c:	ec ed       	ldi	r30, 0xDC	; 220
    a06e:	ee ef       	ldi	r30, 0xFE	; 254
    a070:	f0 f1       	brcs	.+124    	; 0xa0ee <waves+0x1ee>
    a072:	f2 f3       	brmi	.-4      	; 0xa070 <waves+0x170>
    a074:	f4 f5       	brge	.+124    	; 0xa0f2 <waves+0x1f2>
    a076:	f6 f7       	brtc	.-4      	; 0xa074 <waves+0x174>
    a078:	f8 f9       	.word	0xf9f8	; ????
    a07a:	fa fb       	.word	0xfbfa	; ????
    a07c:	fc fd       	.word	0xfdfc	; ????
    a07e:	fe ff       	.word	0xfffe	; ????
    a080:	00 01       	movw	r0, r0
    a082:	02 03       	mulsu	r16, r18
    a084:	04 05       	cpc	r16, r4
    a086:	06 07       	cpc	r16, r22
    a088:	08 09       	sbc	r16, r8
    a08a:	0a 0b       	sbc	r16, r26
    a08c:	0c 0d       	add	r16, r12
    a08e:	0e 0f       	add	r16, r30
    a090:	10 11       	cpse	r17, r0
    a092:	12 13       	cpse	r17, r18
    a094:	14 15       	cp	r17, r4
    a096:	16 17       	cp	r17, r22
    a098:	18 19       	sub	r17, r8
    a09a:	1a 1b       	sub	r17, r26
    a09c:	1c 1d       	adc	r17, r12
    a09e:	1e 1f       	adc	r17, r30
    a0a0:	20 21       	and	r18, r0
    a0a2:	22 23       	and	r18, r18
    a0a4:	24 25       	eor	r18, r4
    a0a6:	26 27       	eor	r18, r22
    a0a8:	28 29       	or	r18, r8
    a0aa:	2a 2b       	or	r18, r26
    a0ac:	2c 2d       	mov	r18, r12
    a0ae:	2e 2f       	mov	r18, r30
    a0b0:	30 31       	cpi	r19, 0x10	; 16
    a0b2:	32 33       	cpi	r19, 0x32	; 50
    a0b4:	34 35       	cpi	r19, 0x54	; 84
    a0b6:	36 37       	cpi	r19, 0x76	; 118
    a0b8:	38 39       	cpi	r19, 0x98	; 152
    a0ba:	3a 3b       	cpi	r19, 0xBA	; 186
    a0bc:	3c 3d       	cpi	r19, 0xDC	; 220
    a0be:	3e 3f       	cpi	r19, 0xFE	; 254
    a0c0:	40 41       	sbci	r20, 0x10	; 16
    a0c2:	42 43       	sbci	r20, 0x32	; 50
    a0c4:	44 45       	sbci	r20, 0x54	; 84
    a0c6:	46 47       	sbci	r20, 0x76	; 118
    a0c8:	48 49       	sbci	r20, 0x98	; 152
    a0ca:	4a 4b       	sbci	r20, 0xBA	; 186
    a0cc:	4c 4d       	sbci	r20, 0xDC	; 220
    a0ce:	4e 4f       	sbci	r20, 0xFE	; 254
    a0d0:	50 51       	subi	r21, 0x10	; 16
    a0d2:	52 53       	subi	r21, 0x32	; 50
    a0d4:	54 55       	subi	r21, 0x54	; 84
    a0d6:	56 57       	subi	r21, 0x76	; 118
    a0d8:	58 59       	subi	r21, 0x98	; 152
    a0da:	5a 5b       	subi	r21, 0xBA	; 186
    a0dc:	5c 5d       	subi	r21, 0xDC	; 220
    a0de:	5e 5f       	subi	r21, 0xFE	; 254
    a0e0:	60 61       	ori	r22, 0x10	; 16
    a0e2:	62 63       	ori	r22, 0x32	; 50
    a0e4:	64 65       	ori	r22, 0x54	; 84
    a0e6:	66 67       	ori	r22, 0x76	; 118
    a0e8:	68 69       	ori	r22, 0x98	; 152
    a0ea:	6a 6b       	ori	r22, 0xBA	; 186
    a0ec:	6c 6d       	ori	r22, 0xDC	; 220
    a0ee:	6e 6f       	ori	r22, 0xFE	; 254
    a0f0:	70 71       	andi	r23, 0x10	; 16
    a0f2:	72 73       	andi	r23, 0x32	; 50
    a0f4:	74 75       	andi	r23, 0x54	; 84
    a0f6:	76 77       	andi	r23, 0x76	; 118
    a0f8:	78 79       	andi	r23, 0x98	; 152
    a0fa:	7a 7b       	andi	r23, 0xBA	; 186
    a0fc:	7c 7d       	andi	r23, 0xDC	; 220
    a0fe:	7e 7f       	andi	r23, 0xFE	; 254
    a100:	00 02       	muls	r16, r16
    a102:	04 06       	cpc	r0, r20
    a104:	08 0a       	sbc	r0, r24
    a106:	0c 0e       	add	r0, r28
    a108:	10 12       	cpse	r1, r16
    a10a:	14 16       	cp	r1, r20
    a10c:	18 1a       	sub	r1, r24
    a10e:	1c 1e       	adc	r1, r28
    a110:	20 22       	and	r2, r16
    a112:	24 26       	eor	r2, r20
    a114:	28 2a       	or	r2, r24
    a116:	2c 2e       	mov	r2, r28
    a118:	30 32       	cpi	r19, 0x20	; 32
    a11a:	34 36       	cpi	r19, 0x64	; 100
    a11c:	38 3a       	cpi	r19, 0xA8	; 168
    a11e:	3c 3e       	cpi	r19, 0xEC	; 236
    a120:	40 42       	sbci	r20, 0x20	; 32
    a122:	44 46       	sbci	r20, 0x64	; 100
    a124:	48 4a       	sbci	r20, 0xA8	; 168
    a126:	4c 4e       	sbci	r20, 0xEC	; 236
    a128:	50 52       	subi	r21, 0x20	; 32
    a12a:	54 56       	subi	r21, 0x64	; 100
    a12c:	58 5a       	subi	r21, 0xA8	; 168
    a12e:	5c 5e       	subi	r21, 0xEC	; 236
    a130:	60 62       	ori	r22, 0x20	; 32
    a132:	64 66       	ori	r22, 0x64	; 100
    a134:	68 6a       	ori	r22, 0xA8	; 168
    a136:	6c 6e       	ori	r22, 0xEC	; 236
    a138:	70 72       	andi	r23, 0x20	; 32
    a13a:	74 76       	andi	r23, 0x64	; 100
    a13c:	78 7a       	andi	r23, 0xA8	; 168
    a13e:	7c 7e       	andi	r23, 0xEC	; 236
    a140:	7f 7d       	andi	r23, 0xDF	; 223
    a142:	7b 79       	andi	r23, 0x9B	; 155
    a144:	77 75       	andi	r23, 0x57	; 87
    a146:	73 71       	andi	r23, 0x13	; 19
    a148:	6f 6d       	ori	r22, 0xDF	; 223
    a14a:	6b 69       	ori	r22, 0x9B	; 155
    a14c:	67 65       	ori	r22, 0x57	; 87
    a14e:	63 61       	ori	r22, 0x13	; 19
    a150:	5f 5d       	subi	r21, 0xDF	; 223
    a152:	5b 59       	subi	r21, 0x9B	; 155
    a154:	57 55       	subi	r21, 0x57	; 87
    a156:	53 51       	subi	r21, 0x13	; 19
    a158:	4f 4d       	sbci	r20, 0xDF	; 223
    a15a:	4b 49       	sbci	r20, 0x9B	; 155
    a15c:	47 45       	sbci	r20, 0x57	; 87
    a15e:	43 41       	sbci	r20, 0x13	; 19
    a160:	3f 3d       	cpi	r19, 0xDF	; 223
    a162:	3b 39       	cpi	r19, 0x9B	; 155
    a164:	37 35       	cpi	r19, 0x57	; 87
    a166:	33 31       	cpi	r19, 0x13	; 19
    a168:	2f 2d       	mov	r18, r15
    a16a:	2b 29       	or	r18, r11
    a16c:	27 25       	eor	r18, r7
    a16e:	23 21       	and	r18, r3
    a170:	1f 1d       	adc	r17, r15
    a172:	1b 19       	sub	r17, r11
    a174:	17 15       	cp	r17, r7
    a176:	13 11       	cpse	r17, r3
    a178:	0f 0d       	add	r16, r15
    a17a:	0b 09       	sbc	r16, r11
    a17c:	07 05       	cpc	r16, r7
    a17e:	03 01       	movw	r0, r6
    a180:	ff fd       	.word	0xfdff	; ????
    a182:	fb f9       	.word	0xf9fb	; ????
    a184:	f7 f5       	brid	.+124    	; 0xa202 <waves+0x302>
    a186:	f3 f1       	brvs	.+124    	; 0xa204 <waves+0x304>
    a188:	ef ed       	ldi	r30, 0xDF	; 223
    a18a:	eb e9       	ldi	r30, 0x9B	; 155
    a18c:	e7 e5       	ldi	r30, 0x57	; 87
    a18e:	e3 e1       	ldi	r30, 0x13	; 19
    a190:	df dd       	rcall	.-1090   	; 0x9d50 <steptable+0x48>
    a192:	db d9       	rcall	.-3146   	; 0x954a <InitMusicPlayer+0x3e>
    a194:	d7 d5       	rcall	.+2990   	; 0xad44 <Print+0x2e>
    a196:	d3 d1       	rcall	.+934    	; 0xa53e <waves+0x63e>
    a198:	cf cd       	rjmp	.-1122   	; 0x9d38 <steptable+0x30>
    a19a:	cb c9       	rjmp	.-3178   	; 0x9532 <InitMusicPlayer+0x26>
    a19c:	c7 c5       	rjmp	.+2958   	; 0xad2c <Print+0x16>
    a19e:	c3 c1       	rjmp	.+902    	; 0xa526 <waves+0x626>
    a1a0:	bf bd       	out	0x2f, r27	; 47
    a1a2:	bb b9       	out	0x0b, r27	; 11
    a1a4:	b7 b5       	in	r27, 0x27	; 39
    a1a6:	b3 b1       	in	r27, 0x03	; 3
    a1a8:	af ad       	ldd	r26, Y+63	; 0x3f
    a1aa:	ab a9       	ldd	r26, Y+51	; 0x33
    a1ac:	a7 a5       	ldd	r26, Z+47	; 0x2f
    a1ae:	a3 a1       	ldd	r26, Z+35	; 0x23
    a1b0:	9f 9d       	mul	r25, r15
    a1b2:	9b 99       	sbic	0x13, 3	; 19
    a1b4:	97 95       	ror	r25
    a1b6:	93 91       	.word	0x9193	; ????
    a1b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    a1ba:	8b 89       	ldd	r24, Y+19	; 0x13
    a1bc:	87 85       	ldd	r24, Z+15	; 0x0f
    a1be:	83 81       	ldd	r24, Z+3	; 0x03
    a1c0:	80 82       	st	Z, r8
    a1c2:	84 86       	std	Z+12, r8	; 0x0c
    a1c4:	88 8a       	std	Y+16, r8	; 0x10
    a1c6:	8c 8e       	std	Y+28, r8	; 0x1c
    a1c8:	90 92 94 96 	sts	0x9694, r9
    a1cc:	98 9a       	sbi	0x13, 0	; 19
    a1ce:	9c 9e       	mul	r9, r28
    a1d0:	a0 a2       	std	Z+32, r10	; 0x20
    a1d2:	a4 a6       	std	Z+44, r10	; 0x2c
    a1d4:	a8 aa       	std	Y+48, r10	; 0x30
    a1d6:	ac ae       	std	Y+60, r10	; 0x3c
    a1d8:	b0 b2       	in	r11, 0x10	; 16
    a1da:	b4 b6       	in	r11, 0x34	; 52
    a1dc:	b8 ba       	out	0x18, r11	; 24
    a1de:	bc be       	out	0x3c, r11	; 60
    a1e0:	c0 c2       	rjmp	.+1408   	; 0xa762 <waves+0x862>
    a1e2:	c4 c6       	rjmp	.+3464   	; 0xaf6c <LBGetJoyPadState+0x3e>
    a1e4:	c8 ca       	rjmp	.-2672   	; 0x9776 <TriggerNote+0x2e>
    a1e6:	cc ce       	rjmp	.-616    	; 0x9f80 <waves+0x80>
    a1e8:	d0 d2       	rcall	.+1440   	; 0xa78a <waves+0x88a>
    a1ea:	d4 d6       	rcall	.+3496   	; 0xaf94 <LBGetJoyPadState+0x66>
    a1ec:	d8 da       	rcall	.-2640   	; 0x979e <TriggerNote+0x56>
    a1ee:	dc de       	rcall	.-584    	; 0x9fa8 <waves+0xa8>
    a1f0:	e0 e2       	ldi	r30, 0x20	; 32
    a1f2:	e4 e6       	ldi	r30, 0x64	; 100
    a1f4:	e8 ea       	ldi	r30, 0xA8	; 168
    a1f6:	ec ee       	ldi	r30, 0xEC	; 236
    a1f8:	f0 f2       	brcs	.-68     	; 0xa1b6 <waves+0x2b6>
    a1fa:	f4 f6       	brge	.-68     	; 0xa1b8 <waves+0x2b8>
    a1fc:	f8 fa       	.word	0xfaf8	; ????
    a1fe:	fc fe       	.word	0xfefc	; ????
    a200:	7f 7f       	andi	r23, 0xFF	; 255
    a202:	7f 7f       	andi	r23, 0xFF	; 255
    a204:	7f 7f       	andi	r23, 0xFF	; 255
    a206:	7f 7f       	andi	r23, 0xFF	; 255
    a208:	7f 7f       	andi	r23, 0xFF	; 255
    a20a:	7f 7f       	andi	r23, 0xFF	; 255
    a20c:	7f 7f       	andi	r23, 0xFF	; 255
    a20e:	7f 7f       	andi	r23, 0xFF	; 255
    a210:	7f 7f       	andi	r23, 0xFF	; 255
    a212:	7f 7f       	andi	r23, 0xFF	; 255
    a214:	7f 7f       	andi	r23, 0xFF	; 255
    a216:	7f 7f       	andi	r23, 0xFF	; 255
    a218:	7f 7f       	andi	r23, 0xFF	; 255
    a21a:	7f 7f       	andi	r23, 0xFF	; 255
    a21c:	7f 7f       	andi	r23, 0xFF	; 255
    a21e:	7f 7f       	andi	r23, 0xFF	; 255
    a220:	7f 7f       	andi	r23, 0xFF	; 255
    a222:	7f 7f       	andi	r23, 0xFF	; 255
    a224:	7f 7f       	andi	r23, 0xFF	; 255
    a226:	7f 7f       	andi	r23, 0xFF	; 255
    a228:	7f 7f       	andi	r23, 0xFF	; 255
    a22a:	7f 7f       	andi	r23, 0xFF	; 255
    a22c:	7f 7f       	andi	r23, 0xFF	; 255
    a22e:	7f 7f       	andi	r23, 0xFF	; 255
    a230:	7f 7f       	andi	r23, 0xFF	; 255
    a232:	7f 7f       	andi	r23, 0xFF	; 255
    a234:	7f 7f       	andi	r23, 0xFF	; 255
    a236:	7f 7f       	andi	r23, 0xFF	; 255
    a238:	7f 7f       	andi	r23, 0xFF	; 255
    a23a:	7f 7f       	andi	r23, 0xFF	; 255
    a23c:	7f 7f       	andi	r23, 0xFF	; 255
    a23e:	7f 7f       	andi	r23, 0xFF	; 255
    a240:	80 80       	ld	r8, Z
    a242:	80 80       	ld	r8, Z
    a244:	80 80       	ld	r8, Z
    a246:	80 80       	ld	r8, Z
    a248:	80 80       	ld	r8, Z
    a24a:	80 80       	ld	r8, Z
    a24c:	80 80       	ld	r8, Z
    a24e:	80 80       	ld	r8, Z
    a250:	80 80       	ld	r8, Z
    a252:	80 80       	ld	r8, Z
    a254:	80 80       	ld	r8, Z
    a256:	80 80       	ld	r8, Z
    a258:	80 80       	ld	r8, Z
    a25a:	80 80       	ld	r8, Z
    a25c:	80 80       	ld	r8, Z
    a25e:	80 80       	ld	r8, Z
    a260:	80 80       	ld	r8, Z
    a262:	80 80       	ld	r8, Z
    a264:	80 80       	ld	r8, Z
    a266:	80 80       	ld	r8, Z
    a268:	80 80       	ld	r8, Z
    a26a:	80 80       	ld	r8, Z
    a26c:	80 80       	ld	r8, Z
    a26e:	80 80       	ld	r8, Z
    a270:	80 80       	ld	r8, Z
    a272:	80 80       	ld	r8, Z
    a274:	80 80       	ld	r8, Z
    a276:	80 80       	ld	r8, Z
    a278:	80 80       	ld	r8, Z
    a27a:	80 80       	ld	r8, Z
    a27c:	80 80       	ld	r8, Z
    a27e:	80 80       	ld	r8, Z
    a280:	80 80       	ld	r8, Z
    a282:	80 80       	ld	r8, Z
    a284:	80 80       	ld	r8, Z
    a286:	80 80       	ld	r8, Z
    a288:	80 80       	ld	r8, Z
    a28a:	80 80       	ld	r8, Z
    a28c:	80 80       	ld	r8, Z
    a28e:	80 80       	ld	r8, Z
    a290:	80 80       	ld	r8, Z
    a292:	80 80       	ld	r8, Z
    a294:	80 80       	ld	r8, Z
    a296:	80 80       	ld	r8, Z
    a298:	80 80       	ld	r8, Z
    a29a:	80 80       	ld	r8, Z
    a29c:	80 80       	ld	r8, Z
    a29e:	80 80       	ld	r8, Z
    a2a0:	80 80       	ld	r8, Z
    a2a2:	80 80       	ld	r8, Z
    a2a4:	80 80       	ld	r8, Z
    a2a6:	80 80       	ld	r8, Z
    a2a8:	80 80       	ld	r8, Z
    a2aa:	80 80       	ld	r8, Z
    a2ac:	80 80       	ld	r8, Z
    a2ae:	80 80       	ld	r8, Z
    a2b0:	80 80       	ld	r8, Z
    a2b2:	80 80       	ld	r8, Z
    a2b4:	80 80       	ld	r8, Z
    a2b6:	80 80       	ld	r8, Z
    a2b8:	80 80       	ld	r8, Z
    a2ba:	80 80       	ld	r8, Z
    a2bc:	80 80       	ld	r8, Z
    a2be:	80 80       	ld	r8, Z
    a2c0:	80 80       	ld	r8, Z
    a2c2:	80 80       	ld	r8, Z
    a2c4:	80 80       	ld	r8, Z
    a2c6:	80 80       	ld	r8, Z
    a2c8:	80 80       	ld	r8, Z
    a2ca:	80 80       	ld	r8, Z
    a2cc:	80 80       	ld	r8, Z
    a2ce:	80 80       	ld	r8, Z
    a2d0:	80 80       	ld	r8, Z
    a2d2:	80 80       	ld	r8, Z
    a2d4:	80 80       	ld	r8, Z
    a2d6:	80 80       	ld	r8, Z
    a2d8:	80 80       	ld	r8, Z
    a2da:	80 80       	ld	r8, Z
    a2dc:	80 80       	ld	r8, Z
    a2de:	80 80       	ld	r8, Z
    a2e0:	80 80       	ld	r8, Z
    a2e2:	80 80       	ld	r8, Z
    a2e4:	80 80       	ld	r8, Z
    a2e6:	80 80       	ld	r8, Z
    a2e8:	80 80       	ld	r8, Z
    a2ea:	80 80       	ld	r8, Z
    a2ec:	80 80       	ld	r8, Z
    a2ee:	80 80       	ld	r8, Z
    a2f0:	80 80       	ld	r8, Z
    a2f2:	80 80       	ld	r8, Z
    a2f4:	80 80       	ld	r8, Z
    a2f6:	80 80       	ld	r8, Z
    a2f8:	80 80       	ld	r8, Z
    a2fa:	80 80       	ld	r8, Z
    a2fc:	80 80       	ld	r8, Z
    a2fe:	80 80       	ld	r8, Z
    a300:	7f 7f       	andi	r23, 0xFF	; 255
    a302:	7f 7f       	andi	r23, 0xFF	; 255
    a304:	7f 7f       	andi	r23, 0xFF	; 255
    a306:	7f 7f       	andi	r23, 0xFF	; 255
    a308:	7f 7f       	andi	r23, 0xFF	; 255
    a30a:	7f 7f       	andi	r23, 0xFF	; 255
    a30c:	7f 7f       	andi	r23, 0xFF	; 255
    a30e:	7f 7f       	andi	r23, 0xFF	; 255
    a310:	7f 7f       	andi	r23, 0xFF	; 255
    a312:	7f 7f       	andi	r23, 0xFF	; 255
    a314:	7f 7f       	andi	r23, 0xFF	; 255
    a316:	7f 7f       	andi	r23, 0xFF	; 255
    a318:	7f 7f       	andi	r23, 0xFF	; 255
    a31a:	7f 7f       	andi	r23, 0xFF	; 255
    a31c:	7f 7f       	andi	r23, 0xFF	; 255
    a31e:	7f 7f       	andi	r23, 0xFF	; 255
    a320:	7f 7f       	andi	r23, 0xFF	; 255
    a322:	7f 7f       	andi	r23, 0xFF	; 255
    a324:	7f 7f       	andi	r23, 0xFF	; 255
    a326:	7f 7f       	andi	r23, 0xFF	; 255
    a328:	7f 7f       	andi	r23, 0xFF	; 255
    a32a:	7f 7f       	andi	r23, 0xFF	; 255
    a32c:	7f 7f       	andi	r23, 0xFF	; 255
    a32e:	7f 7f       	andi	r23, 0xFF	; 255
    a330:	7f 7f       	andi	r23, 0xFF	; 255
    a332:	7f 7f       	andi	r23, 0xFF	; 255
    a334:	7f 7f       	andi	r23, 0xFF	; 255
    a336:	7f 7f       	andi	r23, 0xFF	; 255
    a338:	7f 7f       	andi	r23, 0xFF	; 255
    a33a:	7f 7f       	andi	r23, 0xFF	; 255
    a33c:	7f 7f       	andi	r23, 0xFF	; 255
    a33e:	7f 7f       	andi	r23, 0xFF	; 255
    a340:	7f 7f       	andi	r23, 0xFF	; 255
    a342:	7f 7f       	andi	r23, 0xFF	; 255
    a344:	7f 7f       	andi	r23, 0xFF	; 255
    a346:	7f 7f       	andi	r23, 0xFF	; 255
    a348:	7f 7f       	andi	r23, 0xFF	; 255
    a34a:	7f 7f       	andi	r23, 0xFF	; 255
    a34c:	7f 7f       	andi	r23, 0xFF	; 255
    a34e:	7f 7f       	andi	r23, 0xFF	; 255
    a350:	7f 7f       	andi	r23, 0xFF	; 255
    a352:	7f 7f       	andi	r23, 0xFF	; 255
    a354:	7f 7f       	andi	r23, 0xFF	; 255
    a356:	7f 7f       	andi	r23, 0xFF	; 255
    a358:	7f 7f       	andi	r23, 0xFF	; 255
    a35a:	7f 7f       	andi	r23, 0xFF	; 255
    a35c:	7f 7f       	andi	r23, 0xFF	; 255
    a35e:	7f 7f       	andi	r23, 0xFF	; 255
    a360:	7f 7f       	andi	r23, 0xFF	; 255
    a362:	7f 7f       	andi	r23, 0xFF	; 255
    a364:	7f 7f       	andi	r23, 0xFF	; 255
    a366:	7f 7f       	andi	r23, 0xFF	; 255
    a368:	7f 7f       	andi	r23, 0xFF	; 255
    a36a:	7f 7f       	andi	r23, 0xFF	; 255
    a36c:	7f 7f       	andi	r23, 0xFF	; 255
    a36e:	7f 7f       	andi	r23, 0xFF	; 255
    a370:	7f 7f       	andi	r23, 0xFF	; 255
    a372:	7f 7f       	andi	r23, 0xFF	; 255
    a374:	7f 7f       	andi	r23, 0xFF	; 255
    a376:	7f 7f       	andi	r23, 0xFF	; 255
    a378:	7f 7f       	andi	r23, 0xFF	; 255
    a37a:	7f 7f       	andi	r23, 0xFF	; 255
    a37c:	7f 7f       	andi	r23, 0xFF	; 255
    a37e:	7f 7f       	andi	r23, 0xFF	; 255
    a380:	80 80       	ld	r8, Z
    a382:	80 80       	ld	r8, Z
    a384:	80 80       	ld	r8, Z
    a386:	80 80       	ld	r8, Z
    a388:	80 80       	ld	r8, Z
    a38a:	80 80       	ld	r8, Z
    a38c:	80 80       	ld	r8, Z
    a38e:	80 80       	ld	r8, Z
    a390:	80 80       	ld	r8, Z
    a392:	80 80       	ld	r8, Z
    a394:	80 80       	ld	r8, Z
    a396:	80 80       	ld	r8, Z
    a398:	80 80       	ld	r8, Z
    a39a:	80 80       	ld	r8, Z
    a39c:	80 80       	ld	r8, Z
    a39e:	80 80       	ld	r8, Z
    a3a0:	80 80       	ld	r8, Z
    a3a2:	80 80       	ld	r8, Z
    a3a4:	80 80       	ld	r8, Z
    a3a6:	80 80       	ld	r8, Z
    a3a8:	80 80       	ld	r8, Z
    a3aa:	80 80       	ld	r8, Z
    a3ac:	80 80       	ld	r8, Z
    a3ae:	80 80       	ld	r8, Z
    a3b0:	80 80       	ld	r8, Z
    a3b2:	80 80       	ld	r8, Z
    a3b4:	80 80       	ld	r8, Z
    a3b6:	80 80       	ld	r8, Z
    a3b8:	80 80       	ld	r8, Z
    a3ba:	80 80       	ld	r8, Z
    a3bc:	80 80       	ld	r8, Z
    a3be:	80 80       	ld	r8, Z
    a3c0:	80 80       	ld	r8, Z
    a3c2:	80 80       	ld	r8, Z
    a3c4:	80 80       	ld	r8, Z
    a3c6:	80 80       	ld	r8, Z
    a3c8:	80 80       	ld	r8, Z
    a3ca:	80 80       	ld	r8, Z
    a3cc:	80 80       	ld	r8, Z
    a3ce:	80 80       	ld	r8, Z
    a3d0:	80 80       	ld	r8, Z
    a3d2:	80 80       	ld	r8, Z
    a3d4:	80 80       	ld	r8, Z
    a3d6:	80 80       	ld	r8, Z
    a3d8:	80 80       	ld	r8, Z
    a3da:	80 80       	ld	r8, Z
    a3dc:	80 80       	ld	r8, Z
    a3de:	80 80       	ld	r8, Z
    a3e0:	80 80       	ld	r8, Z
    a3e2:	80 80       	ld	r8, Z
    a3e4:	80 80       	ld	r8, Z
    a3e6:	80 80       	ld	r8, Z
    a3e8:	80 80       	ld	r8, Z
    a3ea:	80 80       	ld	r8, Z
    a3ec:	80 80       	ld	r8, Z
    a3ee:	80 80       	ld	r8, Z
    a3f0:	80 80       	ld	r8, Z
    a3f2:	80 80       	ld	r8, Z
    a3f4:	80 80       	ld	r8, Z
    a3f6:	80 80       	ld	r8, Z
    a3f8:	80 80       	ld	r8, Z
    a3fa:	80 80       	ld	r8, Z
    a3fc:	80 80       	ld	r8, Z
    a3fe:	80 80       	ld	r8, Z
    a400:	7f 7f       	andi	r23, 0xFF	; 255
    a402:	7f 7f       	andi	r23, 0xFF	; 255
    a404:	7f 7f       	andi	r23, 0xFF	; 255
    a406:	7f 7f       	andi	r23, 0xFF	; 255
    a408:	7f 7f       	andi	r23, 0xFF	; 255
    a40a:	7f 7f       	andi	r23, 0xFF	; 255
    a40c:	7f 7f       	andi	r23, 0xFF	; 255
    a40e:	7f 7f       	andi	r23, 0xFF	; 255
    a410:	7f 7f       	andi	r23, 0xFF	; 255
    a412:	7f 7f       	andi	r23, 0xFF	; 255
    a414:	7f 7f       	andi	r23, 0xFF	; 255
    a416:	7f 7f       	andi	r23, 0xFF	; 255
    a418:	7f 7f       	andi	r23, 0xFF	; 255
    a41a:	7f 7f       	andi	r23, 0xFF	; 255
    a41c:	7f 7f       	andi	r23, 0xFF	; 255
    a41e:	7f 7f       	andi	r23, 0xFF	; 255
    a420:	7f 7f       	andi	r23, 0xFF	; 255
    a422:	7f 7f       	andi	r23, 0xFF	; 255
    a424:	7f 7f       	andi	r23, 0xFF	; 255
    a426:	7f 7f       	andi	r23, 0xFF	; 255
    a428:	7f 7f       	andi	r23, 0xFF	; 255
    a42a:	7f 7f       	andi	r23, 0xFF	; 255
    a42c:	7f 7f       	andi	r23, 0xFF	; 255
    a42e:	7f 7f       	andi	r23, 0xFF	; 255
    a430:	7f 7f       	andi	r23, 0xFF	; 255
    a432:	7f 7f       	andi	r23, 0xFF	; 255
    a434:	7f 7f       	andi	r23, 0xFF	; 255
    a436:	7f 7f       	andi	r23, 0xFF	; 255
    a438:	7f 7f       	andi	r23, 0xFF	; 255
    a43a:	7f 7f       	andi	r23, 0xFF	; 255
    a43c:	7f 7f       	andi	r23, 0xFF	; 255
    a43e:	7f 7f       	andi	r23, 0xFF	; 255
    a440:	7f 7f       	andi	r23, 0xFF	; 255
    a442:	7f 7f       	andi	r23, 0xFF	; 255
    a444:	7f 7f       	andi	r23, 0xFF	; 255
    a446:	7f 7f       	andi	r23, 0xFF	; 255
    a448:	7f 7f       	andi	r23, 0xFF	; 255
    a44a:	7f 7f       	andi	r23, 0xFF	; 255
    a44c:	7f 7f       	andi	r23, 0xFF	; 255
    a44e:	7f 7f       	andi	r23, 0xFF	; 255
    a450:	7f 7f       	andi	r23, 0xFF	; 255
    a452:	7f 7f       	andi	r23, 0xFF	; 255
    a454:	7f 7f       	andi	r23, 0xFF	; 255
    a456:	7f 7f       	andi	r23, 0xFF	; 255
    a458:	7f 7f       	andi	r23, 0xFF	; 255
    a45a:	7f 7f       	andi	r23, 0xFF	; 255
    a45c:	7f 7f       	andi	r23, 0xFF	; 255
    a45e:	7f 7f       	andi	r23, 0xFF	; 255
    a460:	7f 7f       	andi	r23, 0xFF	; 255
    a462:	7f 7f       	andi	r23, 0xFF	; 255
    a464:	7f 7f       	andi	r23, 0xFF	; 255
    a466:	7f 7f       	andi	r23, 0xFF	; 255
    a468:	7f 7f       	andi	r23, 0xFF	; 255
    a46a:	7f 7f       	andi	r23, 0xFF	; 255
    a46c:	7f 7f       	andi	r23, 0xFF	; 255
    a46e:	7f 7f       	andi	r23, 0xFF	; 255
    a470:	7f 7f       	andi	r23, 0xFF	; 255
    a472:	7f 7f       	andi	r23, 0xFF	; 255
    a474:	7f 7f       	andi	r23, 0xFF	; 255
    a476:	7f 7f       	andi	r23, 0xFF	; 255
    a478:	7f 7f       	andi	r23, 0xFF	; 255
    a47a:	7f 7f       	andi	r23, 0xFF	; 255
    a47c:	7f 7f       	andi	r23, 0xFF	; 255
    a47e:	7f 7f       	andi	r23, 0xFF	; 255
    a480:	7f 7f       	andi	r23, 0xFF	; 255
    a482:	7f 7f       	andi	r23, 0xFF	; 255
    a484:	7f 7f       	andi	r23, 0xFF	; 255
    a486:	7f 7f       	andi	r23, 0xFF	; 255
    a488:	7f 7f       	andi	r23, 0xFF	; 255
    a48a:	7f 7f       	andi	r23, 0xFF	; 255
    a48c:	7f 7f       	andi	r23, 0xFF	; 255
    a48e:	7f 7f       	andi	r23, 0xFF	; 255
    a490:	7f 7f       	andi	r23, 0xFF	; 255
    a492:	7f 7f       	andi	r23, 0xFF	; 255
    a494:	7f 7f       	andi	r23, 0xFF	; 255
    a496:	7f 7f       	andi	r23, 0xFF	; 255
    a498:	7f 7f       	andi	r23, 0xFF	; 255
    a49a:	7f 7f       	andi	r23, 0xFF	; 255
    a49c:	7f 7f       	andi	r23, 0xFF	; 255
    a49e:	7f 7f       	andi	r23, 0xFF	; 255
    a4a0:	7f 7f       	andi	r23, 0xFF	; 255
    a4a2:	7f 7f       	andi	r23, 0xFF	; 255
    a4a4:	7f 7f       	andi	r23, 0xFF	; 255
    a4a6:	7f 7f       	andi	r23, 0xFF	; 255
    a4a8:	7f 7f       	andi	r23, 0xFF	; 255
    a4aa:	7f 7f       	andi	r23, 0xFF	; 255
    a4ac:	7f 7f       	andi	r23, 0xFF	; 255
    a4ae:	7f 7f       	andi	r23, 0xFF	; 255
    a4b0:	7f 7f       	andi	r23, 0xFF	; 255
    a4b2:	7f 7f       	andi	r23, 0xFF	; 255
    a4b4:	7f 7f       	andi	r23, 0xFF	; 255
    a4b6:	7f 7f       	andi	r23, 0xFF	; 255
    a4b8:	7f 7f       	andi	r23, 0xFF	; 255
    a4ba:	7f 7f       	andi	r23, 0xFF	; 255
    a4bc:	7f 7f       	andi	r23, 0xFF	; 255
    a4be:	7f 7f       	andi	r23, 0xFF	; 255
    a4c0:	80 80       	ld	r8, Z
    a4c2:	80 80       	ld	r8, Z
    a4c4:	80 80       	ld	r8, Z
    a4c6:	80 80       	ld	r8, Z
    a4c8:	80 80       	ld	r8, Z
    a4ca:	80 80       	ld	r8, Z
    a4cc:	80 80       	ld	r8, Z
    a4ce:	80 80       	ld	r8, Z
    a4d0:	80 80       	ld	r8, Z
    a4d2:	80 80       	ld	r8, Z
    a4d4:	80 80       	ld	r8, Z
    a4d6:	80 80       	ld	r8, Z
    a4d8:	80 80       	ld	r8, Z
    a4da:	80 80       	ld	r8, Z
    a4dc:	80 80       	ld	r8, Z
    a4de:	80 80       	ld	r8, Z
    a4e0:	80 80       	ld	r8, Z
    a4e2:	80 80       	ld	r8, Z
    a4e4:	80 80       	ld	r8, Z
    a4e6:	80 80       	ld	r8, Z
    a4e8:	80 80       	ld	r8, Z
    a4ea:	80 80       	ld	r8, Z
    a4ec:	80 80       	ld	r8, Z
    a4ee:	80 80       	ld	r8, Z
    a4f0:	80 80       	ld	r8, Z
    a4f2:	80 80       	ld	r8, Z
    a4f4:	80 80       	ld	r8, Z
    a4f6:	80 80       	ld	r8, Z
    a4f8:	80 80       	ld	r8, Z
    a4fa:	80 80       	ld	r8, Z
    a4fc:	80 80       	ld	r8, Z
    a4fe:	80 80       	ld	r8, Z
    a500:	03 09       	sbc	r16, r3
    a502:	13 1e       	adc	r1, r19
    a504:	28 31       	cpi	r18, 0x18	; 24
    a506:	3a 40       	sbci	r19, 0x0A	; 10
    a508:	46 4c       	sbci	r20, 0xC6	; 198
    a50a:	50 54       	subi	r21, 0x40	; 64
    a50c:	58 5b       	subi	r21, 0xB8	; 184
    a50e:	5e 61       	ori	r21, 0x1E	; 30
    a510:	63 65       	ori	r22, 0x53	; 83
    a512:	67 69       	ori	r22, 0x97	; 151
    a514:	6b 6c       	ori	r22, 0xCB	; 203
    a516:	6e 6f       	ori	r22, 0xFE	; 254
    a518:	70 71       	andi	r23, 0x10	; 16
    a51a:	72 73       	andi	r23, 0x32	; 50
    a51c:	74 75       	andi	r23, 0x54	; 84
    a51e:	76 77       	andi	r23, 0x76	; 118
    a520:	77 78       	andi	r23, 0x87	; 135
    a522:	79 79       	andi	r23, 0x99	; 153
    a524:	7a 7a       	andi	r23, 0xAA	; 170
    a526:	7b 7b       	andi	r23, 0xBB	; 187
    a528:	7c 7c       	andi	r23, 0xCC	; 204
    a52a:	7c 7d       	andi	r23, 0xDC	; 220
    a52c:	7d 7d       	andi	r23, 0xDD	; 221
    a52e:	7e 7e       	andi	r23, 0xEE	; 238
    a530:	7e 7e       	andi	r23, 0xEE	; 238
    a532:	7f 7f       	andi	r23, 0xFF	; 255
    a534:	7f 7f       	andi	r23, 0xFF	; 255
    a536:	7f 7f       	andi	r23, 0xFF	; 255
    a538:	7f 7f       	andi	r23, 0xFF	; 255
    a53a:	7f 7f       	andi	r23, 0xFF	; 255
    a53c:	7f 7f       	andi	r23, 0xFF	; 255
    a53e:	7f 7f       	andi	r23, 0xFF	; 255
    a540:	7f 7f       	andi	r23, 0xFF	; 255
    a542:	7f 7f       	andi	r23, 0xFF	; 255
    a544:	7f 7f       	andi	r23, 0xFF	; 255
    a546:	7f 7f       	andi	r23, 0xFF	; 255
    a548:	7f 7f       	andi	r23, 0xFF	; 255
    a54a:	7f 7f       	andi	r23, 0xFF	; 255
    a54c:	7f 7e       	andi	r23, 0xEF	; 239
    a54e:	7e 7e       	andi	r23, 0xEE	; 238
    a550:	7e 7d       	andi	r23, 0xDE	; 222
    a552:	7d 7d       	andi	r23, 0xDD	; 221
    a554:	7c 7c       	andi	r23, 0xCC	; 204
    a556:	7c 7b       	andi	r23, 0xBC	; 188
    a558:	7b 7a       	andi	r23, 0xAB	; 171
    a55a:	7a 79       	andi	r23, 0x9A	; 154
    a55c:	79 78       	andi	r23, 0x89	; 137
    a55e:	77 77       	andi	r23, 0x77	; 119
    a560:	76 75       	andi	r23, 0x56	; 86
    a562:	74 73       	andi	r23, 0x34	; 52
    a564:	72 71       	andi	r23, 0x12	; 18
    a566:	70 6f       	ori	r23, 0xF0	; 240
    a568:	6e 6c       	ori	r22, 0xCE	; 206
    a56a:	6b 69       	ori	r22, 0x9B	; 155
    a56c:	67 65       	ori	r22, 0x57	; 87
    a56e:	63 61       	ori	r22, 0x13	; 19
    a570:	5e 5b       	subi	r21, 0xBE	; 190
    a572:	58 54       	subi	r21, 0x48	; 72
    a574:	50 4c       	sbci	r21, 0xC0	; 192
    a576:	46 40       	sbci	r20, 0x06	; 6
    a578:	3a 31       	cpi	r19, 0x1A	; 26
    a57a:	28 1e       	adc	r2, r24
    a57c:	13 09       	sbc	r17, r3
    a57e:	03 00       	.word	0x0003	; ????
    a580:	c6 cc       	rjmp	.-1652   	; 0x9f0e <waves+0xe>
    a582:	d5 db       	rcall	.-2134   	; 0x9d2e <steptable+0x26>
    a584:	df e3       	ldi	r29, 0x3F	; 63
    a586:	e5 e7       	ldi	r30, 0x75	; 117
    a588:	e9 ea       	ldi	r30, 0xA9	; 169
    a58a:	eb ec       	ldi	r30, 0xCB	; 203
    a58c:	ed ee       	ldi	r30, 0xED	; 237
    a58e:	ef ef       	ldi	r30, 0xFF	; 255
    a590:	f0 f0       	brcs	.+60     	; 0xa5ce <waves+0x6ce>
    a592:	f0 f1       	brcs	.+124    	; 0xa610 <waves+0x710>
    a594:	f1 f1       	breq	.+124    	; 0xa612 <waves+0x712>
    a596:	f1 f2       	breq	.-68     	; 0xa554 <waves+0x654>
    a598:	f2 f2       	brmi	.-68     	; 0xa556 <waves+0x656>
    a59a:	f2 f2       	brmi	.-68     	; 0xa558 <waves+0x658>
    a59c:	f2 f2       	brmi	.-68     	; 0xa55a <waves+0x65a>
    a59e:	f2 f3       	brmi	.-4      	; 0xa59c <waves+0x69c>
    a5a0:	f3 f3       	brvs	.-4      	; 0xa59e <waves+0x69e>
    a5a2:	f3 f3       	brvs	.-4      	; 0xa5a0 <waves+0x6a0>
    a5a4:	f3 f3       	brvs	.-4      	; 0xa5a2 <waves+0x6a2>
    a5a6:	f3 f3       	brvs	.-4      	; 0xa5a4 <waves+0x6a4>
    a5a8:	f3 f3       	brvs	.-4      	; 0xa5a6 <waves+0x6a6>
    a5aa:	f3 f3       	brvs	.-4      	; 0xa5a8 <waves+0x6a8>
    a5ac:	f3 f3       	brvs	.-4      	; 0xa5aa <waves+0x6aa>
    a5ae:	f3 f3       	brvs	.-4      	; 0xa5ac <waves+0x6ac>
    a5b0:	f3 f3       	brvs	.-4      	; 0xa5ae <waves+0x6ae>
    a5b2:	f3 f3       	brvs	.-4      	; 0xa5b0 <waves+0x6b0>
    a5b4:	f3 f3       	brvs	.-4      	; 0xa5b2 <waves+0x6b2>
    a5b6:	f3 f3       	brvs	.-4      	; 0xa5b4 <waves+0x6b4>
    a5b8:	f3 f3       	brvs	.-4      	; 0xa5b6 <waves+0x6b6>
    a5ba:	f3 f3       	brvs	.-4      	; 0xa5b8 <waves+0x6b8>
    a5bc:	f3 f3       	brvs	.-4      	; 0xa5ba <waves+0x6ba>
    a5be:	f3 f3       	brvs	.-4      	; 0xa5bc <waves+0x6bc>
    a5c0:	f3 f3       	brvs	.-4      	; 0xa5be <waves+0x6be>
    a5c2:	f3 f3       	brvs	.-4      	; 0xa5c0 <waves+0x6c0>
    a5c4:	f3 f3       	brvs	.-4      	; 0xa5c2 <waves+0x6c2>
    a5c6:	f3 f3       	brvs	.-4      	; 0xa5c4 <waves+0x6c4>
    a5c8:	f3 f3       	brvs	.-4      	; 0xa5c6 <waves+0x6c6>
    a5ca:	f3 f3       	brvs	.-4      	; 0xa5c8 <waves+0x6c8>
    a5cc:	f3 f3       	brvs	.-4      	; 0xa5ca <waves+0x6ca>
    a5ce:	f3 f3       	brvs	.-4      	; 0xa5cc <waves+0x6cc>
    a5d0:	f3 f3       	brvs	.-4      	; 0xa5ce <waves+0x6ce>
    a5d2:	f3 f3       	brvs	.-4      	; 0xa5d0 <waves+0x6d0>
    a5d4:	f3 f3       	brvs	.-4      	; 0xa5d2 <waves+0x6d2>
    a5d6:	f3 f3       	brvs	.-4      	; 0xa5d4 <waves+0x6d4>
    a5d8:	f3 f3       	brvs	.-4      	; 0xa5d6 <waves+0x6d6>
    a5da:	f3 f3       	brvs	.-4      	; 0xa5d8 <waves+0x6d8>
    a5dc:	f3 f3       	brvs	.-4      	; 0xa5da <waves+0x6da>
    a5de:	f3 f3       	brvs	.-4      	; 0xa5dc <waves+0x6dc>
    a5e0:	f2 f2       	brmi	.-68     	; 0xa59e <waves+0x69e>
    a5e2:	f2 f2       	brmi	.-68     	; 0xa5a0 <waves+0x6a0>
    a5e4:	f2 f2       	brmi	.-68     	; 0xa5a2 <waves+0x6a2>
    a5e6:	f2 f2       	brmi	.-68     	; 0xa5a4 <waves+0x6a4>
    a5e8:	f1 f1       	breq	.+124    	; 0xa666 <waves+0x766>
    a5ea:	f1 f1       	breq	.+124    	; 0xa668 <waves+0x768>
    a5ec:	f0 f0       	brcs	.+60     	; 0xa62a <waves+0x72a>
    a5ee:	f0 ef       	ldi	r31, 0xF0	; 240
    a5f0:	ef ee       	ldi	r30, 0xEF	; 239
    a5f2:	ed ec       	ldi	r30, 0xCD	; 205
    a5f4:	eb ea       	ldi	r30, 0xAB	; 171
    a5f6:	e9 e7       	ldi	r30, 0x79	; 121
    a5f8:	e5 e3       	ldi	r30, 0x35	; 53
    a5fa:	df db       	rcall	.-2114   	; 0x9dba <steptable+0xb2>
    a5fc:	d5 cc       	rjmp	.-1622   	; 0x9fa8 <waves+0xa8>
    a5fe:	c6 00       	.word	0x00c6	; ????
    a600:	00 28       	or	r0, r0
    a602:	3d 42       	sbci	r19, 0x2D	; 45
    a604:	30 2d       	mov	r19, r0
    a606:	2c 2b       	or	r18, r28
    a608:	2c 2d       	mov	r18, r12
    a60a:	2e 2f       	mov	r18, r30
    a60c:	30 32       	cpi	r19, 0x20	; 32
    a60e:	33 35       	cpi	r19, 0x53	; 83
    a610:	37 39       	cpi	r19, 0x97	; 151
    a612:	3b 3d       	cpi	r19, 0xDB	; 219
    a614:	3f 41       	sbci	r19, 0x1F	; 31
    a616:	43 45       	sbci	r20, 0x53	; 83
    a618:	48 4a       	sbci	r20, 0xA8	; 168
    a61a:	4c 4e       	sbci	r20, 0xEC	; 236
    a61c:	50 53       	subi	r21, 0x30	; 48
    a61e:	55 57       	subi	r21, 0x75	; 117
    a620:	59 5b       	subi	r21, 0xB9	; 185
    a622:	5d 5f       	subi	r21, 0xFD	; 253
    a624:	61 63       	ori	r22, 0x31	; 49
    a626:	65 67       	ori	r22, 0x75	; 117
    a628:	69 6b       	ori	r22, 0xB9	; 185
    a62a:	6c 6e       	ori	r22, 0xEC	; 236
    a62c:	70 71       	andi	r23, 0x10	; 16
    a62e:	73 74       	andi	r23, 0x43	; 67
    a630:	75 77       	andi	r23, 0x75	; 117
    a632:	78 79       	andi	r23, 0x98	; 152
    a634:	7a 7b       	andi	r23, 0xBA	; 186
    a636:	7c 7d       	andi	r23, 0xDC	; 220
    a638:	7d 7e       	andi	r23, 0xED	; 237
    a63a:	7e 7f       	andi	r23, 0xFE	; 254
    a63c:	7f 7f       	andi	r23, 0xFF	; 255
    a63e:	7f 7f       	andi	r23, 0xFF	; 255
    a640:	7f 7f       	andi	r23, 0xFF	; 255
    a642:	7f 7f       	andi	r23, 0xFF	; 255
    a644:	7f 7f       	andi	r23, 0xFF	; 255
    a646:	7e 7e       	andi	r23, 0xEE	; 238
    a648:	7d 7d       	andi	r23, 0xDD	; 221
    a64a:	7c 7b       	andi	r23, 0xBC	; 188
    a64c:	7a 79       	andi	r23, 0x9A	; 154
    a64e:	78 77       	andi	r23, 0x78	; 120
    a650:	75 74       	andi	r23, 0x45	; 69
    a652:	73 71       	andi	r23, 0x13	; 19
    a654:	70 6e       	ori	r23, 0xE0	; 224
    a656:	6c 6b       	ori	r22, 0xBC	; 188
    a658:	69 67       	ori	r22, 0x79	; 121
    a65a:	65 63       	ori	r22, 0x35	; 53
    a65c:	61 5f       	subi	r22, 0xF1	; 241
    a65e:	5d 5b       	subi	r21, 0xBD	; 189
    a660:	59 57       	subi	r21, 0x79	; 121
    a662:	55 53       	subi	r21, 0x35	; 53
    a664:	50 4e       	sbci	r21, 0xE0	; 224
    a666:	4c 4a       	sbci	r20, 0xAC	; 172
    a668:	48 45       	sbci	r20, 0x58	; 88
    a66a:	43 41       	sbci	r20, 0x13	; 19
    a66c:	3f 3d       	cpi	r19, 0xDF	; 223
    a66e:	3b 39       	cpi	r19, 0x9B	; 155
    a670:	37 35       	cpi	r19, 0x57	; 87
    a672:	33 32       	cpi	r19, 0x23	; 35
    a674:	30 2f       	mov	r19, r16
    a676:	2e 2d       	mov	r18, r14
    a678:	2c 2b       	or	r18, r28
    a67a:	2c 2d       	mov	r18, r12
    a67c:	30 42       	sbci	r19, 0x20	; 32
    a67e:	3d 28       	or	r3, r13
    a680:	00 e9       	ldi	r16, 0x90	; 144
    a682:	e5 fe       	sbrs	r14, 5
    a684:	d4 d7       	rcall	.+4008   	; 0xb62e <load_eeprom+0x22>
    a686:	d7 d7       	rcall	.+4014   	; 0xb636 <fade_through+0x6>
    a688:	d6 d4       	rcall	.+2476   	; 0xb036 <LBPrintStr+0x5a>
    a68a:	d2 d0       	rcall	.+420    	; 0xa830 <waves+0x930>
    a68c:	ce cc       	rjmp	.-1636   	; 0xa02a <waves+0x12a>
    a68e:	ca c8       	rjmp	.-3692   	; 0x9824 <ProcessMusic+0x5c>
    a690:	c6 c3       	rjmp	.+1932   	; 0xae1e <FadeIn+0x14>
    a692:	c1 bf       	out	0x31, r28	; 49
    a694:	bd ba       	out	0x1d, r11	; 29
    a696:	b8 b6       	in	r11, 0x38	; 56
    a698:	b4 b1       	in	r27, 0x04	; 4
    a69a:	af ad       	ldd	r26, Y+63	; 0x3f
    a69c:	ab a9       	ldd	r26, Y+51	; 0x33
    a69e:	a7 a5       	ldd	r26, Z+47	; 0x2f
    a6a0:	a3 a1       	ldd	r26, Z+35	; 0x23
    a6a2:	9f 9e       	mul	r9, r31
    a6a4:	9c 9a       	sbi	0x13, 4	; 19
    a6a6:	99 97       	sbiw	r26, 0x29	; 41
    a6a8:	95 94       	asr	r9
    a6aa:	93 91       	.word	0x9193	; ????
    a6ac:	90 8f       	std	Z+24, r25	; 0x18
    a6ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    a6b0:	8b 8a       	std	Y+19, r8	; 0x13
    a6b2:	89 88       	ldd	r8, Y+17	; 0x11
    a6b4:	88 87       	std	Y+8, r24	; 0x08
    a6b6:	86 85       	ldd	r24, Z+14	; 0x0e
    a6b8:	85 84       	ldd	r8, Z+13	; 0x0d
    a6ba:	84 84       	ldd	r8, Z+12	; 0x0c
    a6bc:	83 83       	std	Z+3, r24	; 0x03
    a6be:	83 83       	std	Z+3, r24	; 0x03
    a6c0:	83 83       	std	Z+3, r24	; 0x03
    a6c2:	83 83       	std	Z+3, r24	; 0x03
    a6c4:	83 84       	ldd	r8, Z+11	; 0x0b
    a6c6:	84 84       	ldd	r8, Z+12	; 0x0c
    a6c8:	85 85       	ldd	r24, Z+13	; 0x0d
    a6ca:	86 87       	std	Z+14, r24	; 0x0e
    a6cc:	88 88       	ldd	r8, Y+16	; 0x10
    a6ce:	89 8a       	std	Y+17, r8	; 0x11
    a6d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    a6d2:	8d 8f       	std	Y+29, r24	; 0x1d
    a6d4:	90 91 93 94 	lds	r25, 0x9493
    a6d8:	95 97       	sbiw	r26, 0x25	; 37
    a6da:	99 9a       	sbi	0x13, 1	; 19
    a6dc:	9c 9e       	mul	r9, r28
    a6de:	9f a1       	ldd	r25, Y+39	; 0x27
    a6e0:	a3 a5       	ldd	r26, Z+43	; 0x2b
    a6e2:	a7 a9       	ldd	r26, Z+55	; 0x37
    a6e4:	ab ad       	ldd	r26, Y+59	; 0x3b
    a6e6:	af b1       	in	r26, 0x0f	; 15
    a6e8:	b4 b6       	in	r11, 0x34	; 52
    a6ea:	b8 ba       	out	0x18, r11	; 24
    a6ec:	bd bf       	out	0x3d, r27	; 61
    a6ee:	c1 c3       	rjmp	.+1922   	; 0xae72 <ProcessFading+0x38>
    a6f0:	c6 c8       	rjmp	.-3700   	; 0x987e <ProcessMusic+0xb6>
    a6f2:	ca cc       	rjmp	.-1644   	; 0xa088 <waves+0x188>
    a6f4:	ce d0       	rcall	.+412    	; 0xa892 <waves+0x992>
    a6f6:	d2 d4       	rcall	.+2468   	; 0xb09c <LBLineIntersect+0xa>
    a6f8:	d6 d7       	rcall	.+4012   	; 0xb6a6 <save_score+0x48>
    a6fa:	d7 d7       	rcall	.+4014   	; 0xb6aa <save_score+0x4c>
    a6fc:	d4 fe       	sbrs	r13, 4
    a6fe:	e5 e9       	ldi	r30, 0x95	; 149
    a700:	f9 f8       	.word	0xf8f9	; ????
    a702:	f9 f5       	brne	.+126    	; 0xa782 <waves+0x882>
    a704:	eb e1       	ldi	r30, 0x1B	; 27
    a706:	dd de       	rcall	.-582    	; 0xa4c2 <waves+0x5c2>
    a708:	e0 e2       	ldi	r30, 0x20	; 32
    a70a:	e4 e5       	ldi	r30, 0x54	; 84
    a70c:	e6 e5       	ldi	r30, 0x56	; 86
    a70e:	e4 e2       	ldi	r30, 0x24	; 36
    a710:	de d9       	rcall	.-3140   	; 0x9ace <ProcessMusic+0x306>
    a712:	d2 ca       	rjmp	.-2652   	; 0x9cb8 <esmw+0x48>
    a714:	c1 b7       	in	r28, 0x31	; 49
    a716:	ac a2       	std	Y+36, r10	; 0x24
    a718:	99 91       	ld	r25, Y+
    a71a:	8a 86       	std	Y+10, r8	; 0x0a
    a71c:	83 81       	ldd	r24, Z+3	; 0x03
    a71e:	80 80       	ld	r8, Z
    a720:	81 82       	std	Z+1, r8	; 0x01
    a722:	83 85       	ldd	r24, Z+11	; 0x0b
    a724:	86 88       	ldd	r8, Z+22	; 0x16
    a726:	8a 8c       	ldd	r8, Y+26	; 0x1a
    a728:	8d 8f       	std	Y+29, r24	; 0x1d
    a72a:	90 92 93 95 	sts	0x9593, r9
    a72e:	96 97       	sbiw	r26, 0x26	; 38
    a730:	98 99       	sbic	0x13, 0	; 19
    a732:	9a 9b       	sbis	0x13, 2	; 19
    a734:	9b 9c       	mul	r9, r11
    a736:	9d 9d       	mul	r25, r13
    a738:	9d 9e       	mul	r9, r29
    a73a:	9e 9e       	mul	r9, r30
    a73c:	9f 9f       	mul	r25, r31
    a73e:	9f 9f       	mul	r25, r31
    a740:	9f 9f       	mul	r25, r31
    a742:	9f 9e       	mul	r9, r31
    a744:	9e 9e       	mul	r9, r30
    a746:	9d 9d       	mul	r25, r13
    a748:	9d 9c       	mul	r9, r13
    a74a:	9b 9b       	sbis	0x13, 3	; 19
    a74c:	9a 99       	sbic	0x13, 2	; 19
    a74e:	98 97       	sbiw	r26, 0x28	; 40
    a750:	96 95       	lsr	r25
    a752:	93 92       	.word	0x9293	; ????
    a754:	90 8f       	std	Z+24, r25	; 0x18
    a756:	8d 8c       	ldd	r8, Y+29	; 0x1d
    a758:	8a 88       	ldd	r8, Y+18	; 0x12
    a75a:	86 85       	ldd	r24, Z+14	; 0x0e
    a75c:	83 82       	std	Z+3, r8	; 0x03
    a75e:	81 80       	ldd	r8, Z+1	; 0x01
    a760:	80 81       	ld	r24, Z
    a762:	83 86       	std	Z+11, r8	; 0x0b
    a764:	8a 91       	ld	r24, -Y
    a766:	99 a2       	std	Y+33, r9	; 0x21
    a768:	ac b7       	in	r26, 0x3c	; 60
    a76a:	c1 ca       	rjmp	.-2686   	; 0x9cee <esmw+0x7e>
    a76c:	d2 d9       	rcall	.-3164   	; 0x9b12 <ProcessMusic+0x34a>
    a76e:	de e2       	ldi	r29, 0x2E	; 46
    a770:	e4 e5       	ldi	r30, 0x54	; 84
    a772:	e6 e5       	ldi	r30, 0x56	; 86
    a774:	e4 e2       	ldi	r30, 0x24	; 36
    a776:	e0 de       	rcall	.-576    	; 0xa538 <waves+0x638>
    a778:	dd e1       	ldi	r29, 0x1D	; 29
    a77a:	eb f5       	brvc	.+122    	; 0xa7f6 <waves+0x8f6>
    a77c:	f9 f8       	.word	0xf8f9	; ????
    a77e:	f9 00       	.word	0x00f9	; ????
    a780:	07 08       	sbc	r0, r7
    a782:	07 0b       	sbc	r16, r23
    a784:	15 1f       	adc	r17, r21
    a786:	23 22       	and	r2, r19
    a788:	20 1e       	adc	r2, r16
    a78a:	1c 1b       	sub	r17, r28
    a78c:	1a 1b       	sub	r17, r26
    a78e:	1c 1e       	adc	r1, r28
    a790:	22 27       	eor	r18, r18
    a792:	2e 36       	cpi	r18, 0x6E	; 110
    a794:	3f 49       	sbci	r19, 0x9F	; 159
    a796:	54 5e       	subi	r21, 0xE4	; 228
    a798:	67 6f       	ori	r22, 0xF7	; 247
    a79a:	76 7a       	andi	r23, 0xA6	; 166
    a79c:	7e 7f       	andi	r23, 0xFE	; 254
    a79e:	7f 7f       	andi	r23, 0xFF	; 255
    a7a0:	7f 7e       	andi	r23, 0xEF	; 239
    a7a2:	7d 7b       	andi	r23, 0xBD	; 189
    a7a4:	7a 78       	andi	r23, 0x8A	; 138
    a7a6:	76 74       	andi	r23, 0x46	; 70
    a7a8:	73 71       	andi	r23, 0x13	; 19
    a7aa:	70 6e       	ori	r23, 0xE0	; 224
    a7ac:	6d 6b       	ori	r22, 0xBD	; 189
    a7ae:	6a 69       	ori	r22, 0x9A	; 154
    a7b0:	68 67       	ori	r22, 0x78	; 120
    a7b2:	66 65       	ori	r22, 0x56	; 86
    a7b4:	65 64       	ori	r22, 0x45	; 69
    a7b6:	64 63       	ori	r22, 0x34	; 52
    a7b8:	63 62       	ori	r22, 0x23	; 35
    a7ba:	62 62       	ori	r22, 0x22	; 34
    a7bc:	61 61       	ori	r22, 0x11	; 17
    a7be:	61 61       	ori	r22, 0x11	; 17
    a7c0:	61 61       	ori	r22, 0x11	; 17
    a7c2:	61 62       	ori	r22, 0x21	; 33
    a7c4:	62 62       	ori	r22, 0x22	; 34
    a7c6:	63 63       	ori	r22, 0x33	; 51
    a7c8:	63 64       	ori	r22, 0x43	; 67
    a7ca:	65 65       	ori	r22, 0x55	; 85
    a7cc:	66 67       	ori	r22, 0x76	; 118
    a7ce:	68 69       	ori	r22, 0x98	; 152
    a7d0:	6a 6b       	ori	r22, 0xBA	; 186
    a7d2:	6d 6e       	ori	r22, 0xED	; 237
    a7d4:	70 71       	andi	r23, 0x10	; 16
    a7d6:	73 74       	andi	r23, 0x43	; 67
    a7d8:	76 78       	andi	r23, 0x86	; 134
    a7da:	7a 7b       	andi	r23, 0xBA	; 186
    a7dc:	7d 7e       	andi	r23, 0xED	; 237
    a7de:	7f 7f       	andi	r23, 0xFF	; 255
    a7e0:	7f 7f       	andi	r23, 0xFF	; 255
    a7e2:	7e 7a       	andi	r23, 0xAE	; 174
    a7e4:	76 6f       	ori	r23, 0xF6	; 246
    a7e6:	67 5e       	subi	r22, 0xE7	; 231
    a7e8:	54 49       	sbci	r21, 0x94	; 148
    a7ea:	3f 36       	cpi	r19, 0x6F	; 111
    a7ec:	2e 27       	eor	r18, r30
    a7ee:	22 1e       	adc	r2, r18
    a7f0:	1c 1b       	sub	r17, r28
    a7f2:	1a 1b       	sub	r17, r26
    a7f4:	1c 1e       	adc	r1, r28
    a7f6:	20 22       	and	r2, r16
    a7f8:	23 1f       	adc	r18, r19
    a7fa:	15 0b       	sbc	r17, r21
    a7fc:	07 08       	sbc	r0, r7
    a7fe:	07 00       	.word	0x0007	; ????
    a800:	1f 31       	cpi	r17, 0x1F	; 31
    a802:	3d 44       	sbci	r19, 0x4D	; 77
    a804:	4e 53       	subi	r20, 0x3E	; 62
    a806:	54 56       	subi	r21, 0x64	; 100
    a808:	5a 5f       	subi	r21, 0xFA	; 250
    a80a:	64 69       	ori	r22, 0x94	; 148
    a80c:	6e 74       	andi	r22, 0x4E	; 78
    a80e:	76 79       	andi	r23, 0x96	; 150
    a810:	7c 7f       	andi	r23, 0xFC	; 252
    a812:	7f 7f       	andi	r23, 0xFF	; 255
    a814:	7f 7f       	andi	r23, 0xFF	; 255
    a816:	7f 7f       	andi	r23, 0xFF	; 255
    a818:	7f 7f       	andi	r23, 0xFF	; 255
    a81a:	7f 7f       	andi	r23, 0xFF	; 255
    a81c:	7f 7f       	andi	r23, 0xFF	; 255
    a81e:	7f 7f       	andi	r23, 0xFF	; 255
    a820:	7f 7f       	andi	r23, 0xFF	; 255
    a822:	7f 7f       	andi	r23, 0xFF	; 255
    a824:	7f 7f       	andi	r23, 0xFF	; 255
    a826:	7f 7f       	andi	r23, 0xFF	; 255
    a828:	7f 7f       	andi	r23, 0xFF	; 255
    a82a:	7f 7f       	andi	r23, 0xFF	; 255
    a82c:	7f 7f       	andi	r23, 0xFF	; 255
    a82e:	7f 7f       	andi	r23, 0xFF	; 255
    a830:	7f 7f       	andi	r23, 0xFF	; 255
    a832:	7f 7f       	andi	r23, 0xFF	; 255
    a834:	7f 7f       	andi	r23, 0xFF	; 255
    a836:	7f 7f       	andi	r23, 0xFF	; 255
    a838:	7f 7f       	andi	r23, 0xFF	; 255
    a83a:	7f 7f       	andi	r23, 0xFF	; 255
    a83c:	7f 7f       	andi	r23, 0xFF	; 255
    a83e:	7f 7f       	andi	r23, 0xFF	; 255
    a840:	7f 7f       	andi	r23, 0xFF	; 255
    a842:	7f 7f       	andi	r23, 0xFF	; 255
    a844:	7f 7f       	andi	r23, 0xFF	; 255
    a846:	7f 7f       	andi	r23, 0xFF	; 255
    a848:	7f 7f       	andi	r23, 0xFF	; 255
    a84a:	7f 7f       	andi	r23, 0xFF	; 255
    a84c:	7f 7f       	andi	r23, 0xFF	; 255
    a84e:	7f 7f       	andi	r23, 0xFF	; 255
    a850:	7f 7f       	andi	r23, 0xFF	; 255
    a852:	7f 7f       	andi	r23, 0xFF	; 255
    a854:	7f 7f       	andi	r23, 0xFF	; 255
    a856:	7f 7f       	andi	r23, 0xFF	; 255
    a858:	7f 7f       	andi	r23, 0xFF	; 255
    a85a:	7f 7f       	andi	r23, 0xFF	; 255
    a85c:	7f 7f       	andi	r23, 0xFF	; 255
    a85e:	7f 7f       	andi	r23, 0xFF	; 255
    a860:	7f 7f       	andi	r23, 0xFF	; 255
    a862:	7f 7f       	andi	r23, 0xFF	; 255
    a864:	7f 7f       	andi	r23, 0xFF	; 255
    a866:	7f 7f       	andi	r23, 0xFF	; 255
    a868:	7f 7f       	andi	r23, 0xFF	; 255
    a86a:	7f 7f       	andi	r23, 0xFF	; 255
    a86c:	7f 7f       	andi	r23, 0xFF	; 255
    a86e:	7f 7f       	andi	r23, 0xFF	; 255
    a870:	7f 7f       	andi	r23, 0xFF	; 255
    a872:	7f 7f       	andi	r23, 0xFF	; 255
    a874:	7f 7f       	andi	r23, 0xFF	; 255
    a876:	7f 7f       	andi	r23, 0xFF	; 255
    a878:	7f 7f       	andi	r23, 0xFF	; 255
    a87a:	7f 7c       	andi	r23, 0xCF	; 207
    a87c:	78 71       	andi	r23, 0x18	; 24
    a87e:	68 4c       	sbci	r22, 0xC8	; 200
    a880:	2c 1c       	adc	r2, r12
    a882:	12 0c       	add	r1, r2
    a884:	0a 0b       	sbc	r16, r26
    a886:	0a 05       	cpc	r16, r10
    a888:	fd f3       	brhs	.-2      	; 0xa888 <waves+0x988>
    a88a:	e9 df       	rcall	.-46     	; 0xa85e <waves+0x95e>
    a88c:	d4 ca       	rjmp	.-2648   	; 0x9e36 <steptable+0x12e>
    a88e:	c0 b7       	in	r28, 0x30	; 48
    a890:	ae a6       	std	Y+46, r10	; 0x2e
    a892:	9e 97       	sbiw	r26, 0x2e	; 46
    a894:	91 8b       	std	Z+17, r25	; 0x11
    a896:	86 85       	ldd	r24, Z+14	; 0x0e
    a898:	82 80       	ldd	r8, Z+2	; 0x02
    a89a:	80 80       	ld	r8, Z
    a89c:	80 80       	ld	r8, Z
    a89e:	80 80       	ld	r8, Z
    a8a0:	80 80       	ld	r8, Z
    a8a2:	80 80       	ld	r8, Z
    a8a4:	80 80       	ld	r8, Z
    a8a6:	80 80       	ld	r8, Z
    a8a8:	80 80       	ld	r8, Z
    a8aa:	80 80       	ld	r8, Z
    a8ac:	80 80       	ld	r8, Z
    a8ae:	80 80       	ld	r8, Z
    a8b0:	80 80       	ld	r8, Z
    a8b2:	80 80       	ld	r8, Z
    a8b4:	80 80       	ld	r8, Z
    a8b6:	80 80       	ld	r8, Z
    a8b8:	80 80       	ld	r8, Z
    a8ba:	80 80       	ld	r8, Z
    a8bc:	80 80       	ld	r8, Z
    a8be:	80 80       	ld	r8, Z
    a8c0:	80 80       	ld	r8, Z
    a8c2:	80 80       	ld	r8, Z
    a8c4:	80 80       	ld	r8, Z
    a8c6:	80 80       	ld	r8, Z
    a8c8:	80 80       	ld	r8, Z
    a8ca:	80 80       	ld	r8, Z
    a8cc:	80 80       	ld	r8, Z
    a8ce:	80 80       	ld	r8, Z
    a8d0:	80 80       	ld	r8, Z
    a8d2:	80 80       	ld	r8, Z
    a8d4:	80 80       	ld	r8, Z
    a8d6:	80 80       	ld	r8, Z
    a8d8:	80 80       	ld	r8, Z
    a8da:	80 80       	ld	r8, Z
    a8dc:	80 80       	ld	r8, Z
    a8de:	80 80       	ld	r8, Z
    a8e0:	80 80       	ld	r8, Z
    a8e2:	80 80       	ld	r8, Z
    a8e4:	80 80       	ld	r8, Z
    a8e6:	80 80       	ld	r8, Z
    a8e8:	80 80       	ld	r8, Z
    a8ea:	80 80       	ld	r8, Z
    a8ec:	80 80       	ld	r8, Z
    a8ee:	80 80       	ld	r8, Z
    a8f0:	80 80       	ld	r8, Z
    a8f2:	80 80       	ld	r8, Z
    a8f4:	80 87       	std	Z+8, r24	; 0x08
    a8f6:	91 9d       	mul	r25, r1
    a8f8:	ac c4       	rjmp	.+2392   	; 0xb252 <LBRandom+0x14>
    a8fa:	cb d4       	rcall	.+2454   	; 0xb292 <LBRandom+0x54>
    a8fc:	dd f2       	brhs	.-74     	; 0xa8b4 <waves+0x9b4>
    a8fe:	fa fa       	.word	0xfafa	; ????

0000a900 <RestoreBackground>:
	unsigned char free_tile_index, userRamTilesCount=0,userRamTilesCount_tmp=0;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=userRamTilesCount;i<free_tile_index;i++){
    a900:	80 91 25 0b 	lds	r24, 0x0B25
    a904:	90 91 c7 0b 	lds	r25, 0x0BC7
    a908:	89 17       	cp	r24, r25
    a90a:	78 f4       	brcc	.+30     	; 0xa92a <RestoreBackground+0x2a>
			//vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
			*ram_tiles_restore[i].addr=ram_tiles_restore[i].tileIndex;
    a90c:	e8 2f       	mov	r30, r24
    a90e:	f0 e0       	ldi	r31, 0x00	; 0
    a910:	9f 01       	movw	r18, r30
    a912:	22 0f       	add	r18, r18
    a914:	33 1f       	adc	r19, r19
    a916:	e2 0f       	add	r30, r18
    a918:	f3 1f       	adc	r31, r19
    a91a:	e0 57       	subi	r30, 0x70	; 112
    a91c:	f5 4f       	sbci	r31, 0xF5	; 245
    a91e:	a0 81       	ld	r26, Z
    a920:	b1 81       	ldd	r27, Z+1	; 0x01
    a922:	92 81       	ldd	r25, Z+2	; 0x02
    a924:	9c 93       	st	X, r25
	unsigned char free_tile_index, userRamTilesCount=0,userRamTilesCount_tmp=0;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=userRamTilesCount;i<free_tile_index;i++){
    a926:	8f 5f       	subi	r24, 0xFF	; 255
    a928:	ed cf       	rjmp	.-38     	; 0xa904 <RestoreBackground+0x4>
			//vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
			*ram_tiles_restore[i].addr=ram_tiles_restore[i].tileIndex;
		}	
	}
    a92a:	08 95       	ret

0000a92c <SetSpriteVisibility>:
	u8* GetUserRamTile(u8 index){
		return ram_tiles+(index*TILE_HEIGHT*TILE_WIDTH);
	}

	void SetSpriteVisibility(bool visible){
		spritesOn=visible;
    a92c:	80 93 00 01 	sts	0x0100, r24
    a930:	08 95       	ret

0000a932 <ProcessSprites>:
		}

	}
	*/

	void ProcessSprites(){
    a932:	2f 92       	push	r2
    a934:	3f 92       	push	r3
    a936:	4f 92       	push	r4
    a938:	5f 92       	push	r5
    a93a:	6f 92       	push	r6
    a93c:	7f 92       	push	r7
    a93e:	8f 92       	push	r8
    a940:	9f 92       	push	r9
    a942:	af 92       	push	r10
    a944:	bf 92       	push	r11
    a946:	cf 92       	push	r12
    a948:	df 92       	push	r13
    a94a:	ef 92       	push	r14
    a94c:	ff 92       	push	r15
    a94e:	0f 93       	push	r16
    a950:	1f 93       	push	r17
    a952:	cf 93       	push	r28
    a954:	df 93       	push	r29
    a956:	00 d0       	rcall	.+0      	; 0xa958 <ProcessSprites+0x26>
    a958:	00 d0       	rcall	.+0      	; 0xa95a <ProcessSprites+0x28>
    a95a:	cd b7       	in	r28, 0x3d	; 61
    a95c:	de b7       	in	r29, 0x3e	; 62
	
		unsigned char i,bx,by,dx,dy,bt,x,y,tx=1,ty=1,wx,wy;
		unsigned int ramPtr,ssx,ssy;

		if(!spritesOn) return;
    a95e:	80 91 00 01 	lds	r24, 0x0100
    a962:	88 23       	and	r24, r24
    a964:	09 f4       	brne	.+2      	; 0xa968 <ProcessSprites+0x36>
    a966:	bf c0       	rjmp	.+382    	; 0xaae6 <ProcessSprites+0x1b4>

		userRamTilesCount=userRamTilesCount_tmp;
    a968:	80 91 24 0b 	lds	r24, 0x0B24
    a96c:	80 93 25 0b 	sts	0x0B25, r24
		free_tile_index=userRamTilesCount;
    a970:	80 93 c7 0b 	sts	0x0BC7, r24
    a974:	a8 e6       	ldi	r26, 0x68	; 104
    a976:	aa 2e       	mov	r10, r26
    a978:	a4 e0       	ldi	r26, 0x04	; 4
    a97a:	ba 2e       	mov	r11, r26
	
		for(i=0;i<MAX_SPRITES;i++){
    a97c:	61 2c       	mov	r6, r1
			bx=sprites[i].x;
    a97e:	f5 01       	movw	r30, r10
    a980:	80 81       	ld	r24, Z

			if(bx!=(SCREEN_TILES_H*TILE_WIDTH)){
    a982:	80 3f       	cpi	r24, 0xF0	; 240
    a984:	09 f4       	brne	.+2      	; 0xa988 <ProcessSprites+0x56>
    a986:	90 c0       	rjmp	.+288    	; 0xaaa8 <ProcessSprites+0x176>
				#if SCROLLING == 1
					ssx=sprites[i].x+Screen.scrollX;
					ssy=sprites[i].y+Screen.scrollY;
   				#else
					ssx=sprites[i].x;
					ssy=sprites[i].y;
    a988:	41 81       	ldd	r20, Z+1	; 0x01
    a98a:	24 2f       	mov	r18, r20
    a98c:	30 e0       	ldi	r19, 0x00	; 0

				tx=1;
				ty=1;

				//get the BG tiles that are overlapped by the sprite
				bx=ssx>>3;
    a98e:	58 2e       	mov	r5, r24
    a990:	56 94       	lsr	r5
    a992:	56 94       	lsr	r5
    a994:	56 94       	lsr	r5
				dx=ssx&0x7;
    a996:	87 70       	andi	r24, 0x07	; 7
				if(dx>0) tx++;
    a998:	11 f0       	breq	.+4      	; 0xa99e <ProcessSprites+0x6c>
    a99a:	92 e0       	ldi	r25, 0x02	; 2
    a99c:	01 c0       	rjmp	.+2      	; 0xa9a0 <ProcessSprites+0x6e>
   				#else
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
    a99e:	91 e0       	ldi	r25, 0x01	; 1
    a9a0:	99 83       	std	Y+1, r25	; 0x01
				dx=ssx&0x7;
				if(dx>0) tx++;

				//by=ssy>>3;
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
    a9a2:	f3 e0       	ldi	r31, 0x03	; 3
    a9a4:	36 95       	lsr	r19
    a9a6:	27 95       	ror	r18
    a9a8:	fa 95       	dec	r31
    a9aa:	e1 f7       	brne	.-8      	; 0xa9a4 <ProcessSprites+0x72>
    a9ac:	72 2e       	mov	r7, r18
				dy=ssy%TILE_HEIGHT;
    a9ae:	47 70       	andi	r20, 0x07	; 7
				if(dy>0) ty++;			
    a9b0:	19 f0       	breq	.+6      	; 0xa9b8 <ProcessSprites+0x86>
    a9b2:	e2 e0       	ldi	r30, 0x02	; 2
    a9b4:	3e 2e       	mov	r3, r30
    a9b6:	02 c0       	rjmp	.+4      	; 0xa9bc <ProcessSprites+0x8a>
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
				ty=1;
    a9b8:	33 24       	eor	r3, r3
    a9ba:	33 94       	inc	r3
								bt=free_tile_index;
								free_tile_index++;
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    a9bc:	50 e0       	ldi	r21, 0x00	; 0
    a9be:	54 2f       	mov	r21, r20
    a9c0:	44 27       	eor	r20, r20
    a9c2:	fa 01       	movw	r30, r20
    a9c4:	e8 0f       	add	r30, r24
    a9c6:	f1 1d       	adc	r31, r1
    a9c8:	fc 83       	std	Y+4, r31	; 0x04
    a9ca:	eb 83       	std	Y+3, r30	; 0x03
    a9cc:	e1 2c       	mov	r14, r1
    a9ce:	f1 2c       	mov	r15, r1
    a9d0:	74 ee       	ldi	r23, 0xE4	; 228
    a9d2:	27 2e       	mov	r2, r23
    a9d4:	27 0c       	add	r2, r7
    a9d6:	07 2d       	mov	r16, r7
    a9d8:	0e 0d       	add	r16, r14
    a9da:	0c 31       	cpi	r16, 0x1C	; 28
    a9dc:	10 f0       	brcs	.+4      	; 0xa9e2 <ProcessSprites+0xb0>
    a9de:	02 2d       	mov	r16, r2
    a9e0:	0e 0d       	add	r16, r14
							    }
                            #endif
							if(wx>=VRAM_TILES_H)wx-=VRAM_TILES_H; //should always be 32

							#if SCROLLING == 0
								ramPtr=(wy*VRAM_TILES_H)+wx;
    a9e2:	fe e1       	ldi	r31, 0x1E	; 30
    a9e4:	0f 9f       	mul	r16, r31
    a9e6:	80 01       	movw	r16, r0
    a9e8:	11 24       	eor	r1, r1
								bt=free_tile_index;
								free_tile_index++;
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    a9ea:	9e 2c       	mov	r9, r14
    a9ec:	88 24       	eor	r8, r8
    a9ee:	45 2c       	mov	r4, r5
								    wy-=(Screen.scrollHeight*2);
							    }else if(wy>=Screen.scrollHeight){
							    	wy-=Screen.scrollHeight;
							    }
                            #endif
							if(wx>=VRAM_TILES_H)wx-=VRAM_TILES_H; //should always be 32
    a9f0:	fd e1       	ldi	r31, 0x1D	; 29
    a9f2:	f4 15       	cp	r31, r4
    a9f4:	18 f4       	brcc	.+6      	; 0xa9fc <ProcessSprites+0xca>
    a9f6:	82 ee       	ldi	r24, 0xE2	; 226
    a9f8:	84 0d       	add	r24, r4
    a9fa:	01 c0       	rjmp	.+2      	; 0xa9fe <ProcessSprites+0xcc>
    a9fc:	84 2d       	mov	r24, r4

							#if SCROLLING == 0
								ramPtr=(wy*VRAM_TILES_H)+wx;
    a9fe:	98 01       	movw	r18, r16
    aa00:	28 0f       	add	r18, r24
    aa02:	31 1d       	adc	r19, r1

								ramPtr=((wy>>3)*256)+(wx*8)+(wy&7);	

							#endif

							bt=vram[ramPtr];						
    aa04:	f9 01       	movw	r30, r18
    aa06:	e0 5e       	subi	r30, 0xE0	; 224
    aa08:	fe 4f       	sbci	r31, 0xFE	; 254
    aa0a:	6f 01       	movw	r12, r30
    aa0c:	90 81       	ld	r25, Z

							if( ((bt>=RAM_TILES_COUNT) | (bt<userRamTilesCount)) && (free_tile_index < RAM_TILES_COUNT) ){ //if no ram free ignore tile
    aa0e:	81 e0       	ldi	r24, 0x01	; 1
    aa10:	98 31       	cpi	r25, 0x18	; 24
    aa12:	08 f4       	brcc	.+2      	; 0xaa16 <ProcessSprites+0xe4>
    aa14:	80 e0       	ldi	r24, 0x00	; 0
    aa16:	21 e0       	ldi	r18, 0x01	; 1
    aa18:	30 91 25 0b 	lds	r19, 0x0B25
    aa1c:	93 17       	cp	r25, r19
    aa1e:	18 f0       	brcs	.+6      	; 0xaa26 <ProcessSprites+0xf4>
    aa20:	20 e0       	ldi	r18, 0x00	; 0
    aa22:	88 23       	and	r24, r24
    aa24:	51 f1       	breq	.+84     	; 0xaa7a <ProcessSprites+0x148>
    aa26:	60 91 c7 0b 	lds	r22, 0x0BC7
    aa2a:	68 31       	cpi	r22, 0x18	; 24
    aa2c:	20 f5       	brcc	.+72     	; 0xaa76 <ProcessSprites+0x144>
								if( bt>=RAM_TILES_COUNT ){
    aa2e:	88 23       	and	r24, r24
    aa30:	31 f0       	breq	.+12     	; 0xaa3e <ProcessSprites+0x10c>
									//tile is mapped to flash. Copy it to next free RAM tile.
									CopyFlashTile(bt-RAM_TILES_COUNT,free_tile_index);
    aa32:	88 ee       	ldi	r24, 0xE8	; 232
    aa34:	89 0f       	add	r24, r25
    aa36:	9a 83       	std	Y+2, r25	; 0x02
    aa38:	0e 94 99 44 	call	0x8932	; 0x8932 <CopyFlashTile>
    aa3c:	06 c0       	rjmp	.+12     	; 0xaa4a <ProcessSprites+0x118>
								}else if(bt<userRamTilesCount){
    aa3e:	22 23       	and	r18, r18
    aa40:	29 f0       	breq	.+10     	; 0xaa4c <ProcessSprites+0x11a>
									//tile is a user ram tile. Copy it to next free RAM tile.
									CopyRamTile(bt,free_tile_index);
    aa42:	89 2f       	mov	r24, r25
    aa44:	9a 83       	std	Y+2, r25	; 0x02
    aa46:	0e 94 28 45 	call	0x8a50	; 0x8a50 <CopyRamTile>
    aa4a:	9a 81       	ldd	r25, Y+2	; 0x02
								}
								ram_tiles_restore[free_tile_index].addr=(&vram[ramPtr]);
    aa4c:	80 91 c7 0b 	lds	r24, 0x0BC7
    aa50:	e8 2f       	mov	r30, r24
    aa52:	f0 e0       	ldi	r31, 0x00	; 0
    aa54:	9f 01       	movw	r18, r30
    aa56:	22 0f       	add	r18, r18
    aa58:	33 1f       	adc	r19, r19
    aa5a:	e2 0f       	add	r30, r18
    aa5c:	f3 1f       	adc	r31, r19
    aa5e:	e0 57       	subi	r30, 0x70	; 112
    aa60:	f5 4f       	sbci	r31, 0xF5	; 245
    aa62:	d1 82       	std	Z+1, r13	; 0x01
    aa64:	c0 82       	st	Z, r12
								ram_tiles_restore[free_tile_index].tileIndex=bt;
    aa66:	92 83       	std	Z+2, r25	; 0x02
								vram[ramPtr]=free_tile_index;
    aa68:	f6 01       	movw	r30, r12
    aa6a:	80 83       	st	Z, r24
								bt=free_tile_index;
								free_tile_index++;
    aa6c:	91 e0       	ldi	r25, 0x01	; 1
    aa6e:	98 0f       	add	r25, r24
    aa70:	90 93 c7 0b 	sts	0x0BC7, r25
									CopyRamTile(bt,free_tile_index);
								}
								ram_tiles_restore[free_tile_index].addr=(&vram[ramPtr]);
								ram_tiles_restore[free_tile_index].tileIndex=bt;
								vram[ramPtr]=free_tile_index;
								bt=free_tile_index;
    aa74:	98 2f       	mov	r25, r24
								free_tile_index++;
							}
				
							if(bt<RAM_TILES_COUNT){				
    aa76:	98 31       	cpi	r25, 0x18	; 24
    aa78:	38 f4       	brcc	.+14     	; 0xaa88 <ProcessSprites+0x156>
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    aa7a:	2b 81       	ldd	r18, Y+3	; 0x03
    aa7c:	3c 81       	ldd	r19, Y+4	; 0x04
    aa7e:	a4 01       	movw	r20, r8
    aa80:	69 2f       	mov	r22, r25
    aa82:	86 2d       	mov	r24, r6
    aa84:	0e 94 b5 45 	call	0x8b6a	; 0x8b6a <BlitSprite>
    aa88:	ff ef       	ldi	r31, 0xFF	; 255
    aa8a:	8f 1a       	sub	r8, r31
    aa8c:	9f 0a       	sbc	r9, r31
    aa8e:	43 94       	inc	r4
    aa90:	84 2d       	mov	r24, r4
    aa92:	85 19       	sub	r24, r5
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){

					for(x=0;x<tx;x++){
    aa94:	99 81       	ldd	r25, Y+1	; 0x01
    aa96:	89 17       	cp	r24, r25
    aa98:	08 f4       	brcc	.+2      	; 0xaa9c <ProcessSprites+0x16a>
    aa9a:	aa cf       	rjmp	.-172    	; 0xa9f0 <ProcessSprites+0xbe>
    aa9c:	ef ef       	ldi	r30, 0xFF	; 255
    aa9e:	ee 1a       	sub	r14, r30
    aaa0:	fe 0a       	sbc	r15, r30
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){
    aaa2:	e3 14       	cp	r14, r3
    aaa4:	08 f4       	brcc	.+2      	; 0xaaa8 <ProcessSprites+0x176>
    aaa6:	97 cf       	rjmp	.-210    	; 0xa9d6 <ProcessSprites+0xa4>
		if(!spritesOn) return;

		userRamTilesCount=userRamTilesCount_tmp;
		free_tile_index=userRamTilesCount;
	
		for(i=0;i<MAX_SPRITES;i++){
    aaa8:	63 94       	inc	r6
    aaaa:	24 e0       	ldi	r18, 0x04	; 4
    aaac:	a2 0e       	add	r10, r18
    aaae:	b1 1c       	adc	r11, r1
    aab0:	3a e0       	ldi	r19, 0x0A	; 10
    aab2:	63 12       	cpse	r6, r19
    aab4:	64 cf       	rjmp	.-312    	; 0xa97e <ProcessSprites+0x4c>


		//restore BG tiles
		RestoreBackground();

	}
    aab6:	0f 90       	pop	r0
    aab8:	0f 90       	pop	r0
    aaba:	0f 90       	pop	r0
    aabc:	0f 90       	pop	r0
    aabe:	df 91       	pop	r29
    aac0:	cf 91       	pop	r28
    aac2:	1f 91       	pop	r17
    aac4:	0f 91       	pop	r16
    aac6:	ff 90       	pop	r15
    aac8:	ef 90       	pop	r14
    aaca:	df 90       	pop	r13
    aacc:	cf 90       	pop	r12
    aace:	bf 90       	pop	r11
    aad0:	af 90       	pop	r10
    aad2:	9f 90       	pop	r9
    aad4:	8f 90       	pop	r8
    aad6:	7f 90       	pop	r7
    aad8:	6f 90       	pop	r6
    aada:	5f 90       	pop	r5
    aadc:	4f 90       	pop	r4
    aade:	3f 90       	pop	r3
    aae0:	2f 90       	pop	r2
			}//	if(bx<(SCREEN_TILES_H*TILE_WIDTH))		
		}


		//restore BG tiles
		RestoreBackground();
    aae2:	0c 94 80 54 	jmp	0xa900	; 0xa900 <RestoreBackground>

	}
    aae6:	0f 90       	pop	r0
    aae8:	0f 90       	pop	r0
    aaea:	0f 90       	pop	r0
    aaec:	0f 90       	pop	r0
    aaee:	df 91       	pop	r29
    aaf0:	cf 91       	pop	r28
    aaf2:	1f 91       	pop	r17
    aaf4:	0f 91       	pop	r16
    aaf6:	ff 90       	pop	r15
    aaf8:	ef 90       	pop	r14
    aafa:	df 90       	pop	r13
    aafc:	cf 90       	pop	r12
    aafe:	bf 90       	pop	r11
    ab00:	af 90       	pop	r10
    ab02:	9f 90       	pop	r9
    ab04:	8f 90       	pop	r8
    ab06:	7f 90       	pop	r7
    ab08:	6f 90       	pop	r6
    ab0a:	5f 90       	pop	r5
    ab0c:	4f 90       	pop	r4
    ab0e:	3f 90       	pop	r3
    ab10:	2f 90       	pop	r2
    ab12:	08 95       	ret

0000ab14 <MapSprite2>:
		}

	}


	void MapSprite2(unsigned char startSprite,const char *map,u8 spriteFlags){      
    ab14:	df 92       	push	r13
    ab16:	ef 92       	push	r14
    ab18:	ff 92       	push	r15
    ab1a:	0f 93       	push	r16
    ab1c:	1f 93       	push	r17
    ab1e:	cf 93       	push	r28
    ab20:	df 93       	push	r29
    ab22:	db 01       	movw	r26, r22
    
		unsigned char mapWidth=pgm_read_byte(&(map[0]));
    ab24:	fb 01       	movw	r30, r22
    ab26:	14 91       	lpm	r17, Z
		unsigned char mapHeight=pgm_read_byte(&(map[1]));
    ab28:	31 96       	adiw	r30, 0x01	; 1
    ab2a:	64 91       	lpm	r22, Z
    ab2c:	5f ef       	ldi	r21, 0xFF	; 255
    ab2e:	51 0f       	add	r21, r17
		s8 x,y,dx,dy,t; 

		if(spriteFlags & SPRITE_FLIP_X){
    ab30:	24 2f       	mov	r18, r20
    ab32:	21 70       	andi	r18, 0x01	; 1
    ab34:	40 ff       	sbrs	r20, 0
    ab36:	04 c0       	rjmp	.+8      	; 0xab40 <MapSprite2+0x2c>
			x=(mapWidth-1);
    ab38:	95 2f       	mov	r25, r21
			dx=-1;
    ab3a:	ff 24       	eor	r15, r15
    ab3c:	fa 94       	dec	r15
    ab3e:	03 c0       	rjmp	.+6      	; 0xab46 <MapSprite2+0x32>
		}else{
			x=0;
			dx=1;
    ab40:	ff 24       	eor	r15, r15
    ab42:	f3 94       	inc	r15

		if(spriteFlags & SPRITE_FLIP_X){
			x=(mapWidth-1);
			dx=-1;
		}else{
			x=0;
    ab44:	90 e0       	ldi	r25, 0x00	; 0
			dx=1;
		}

		if(spriteFlags & SPRITE_FLIP_Y){
    ab46:	41 ff       	sbrs	r20, 1
    ab48:	05 c0       	rjmp	.+10     	; 0xab54 <MapSprite2+0x40>
			y=(mapHeight-1);
    ab4a:	7f ef       	ldi	r23, 0xFF	; 255
    ab4c:	76 0f       	add	r23, r22
			dy=-1;
    ab4e:	ee 24       	eor	r14, r14
    ab50:	ea 94       	dec	r14
    ab52:	03 c0       	rjmp	.+6      	; 0xab5a <MapSprite2+0x46>
		}else{
			y=0;
			dy=1;
    ab54:	ee 24       	eor	r14, r14
    ab56:	e3 94       	inc	r14

		if(spriteFlags & SPRITE_FLIP_Y){
			y=(mapHeight-1);
			dy=-1;
		}else{
			y=0;
    ab58:	70 e0       	ldi	r23, 0x00	; 0
    ab5a:	21 11       	cpse	r18, r1
    ab5c:	01 c0       	rjmp	.+2      	; 0xab60 <MapSprite2+0x4c>
    ab5e:	50 e0       	ldi	r21, 0x00	; 0
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
    ab60:	00 e0       	ldi	r16, 0x00	; 0
    ab62:	06 17       	cp	r16, r22
    ab64:	09 f1       	breq	.+66     	; 0xaba8 <MapSprite2+0x94>
			for(u8 cx=0;cx<mapWidth;cx++){
				t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    ab66:	71 03       	mulsu	r23, r17
    ab68:	e0 01       	movw	r28, r0
    ab6a:	11 24       	eor	r1, r1
    ab6c:	d8 2e       	mov	r13, r24
    ab6e:	d1 0e       	add	r13, r17
			y=0;
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
			for(u8 cx=0;cx<mapWidth;cx++){
    ab70:	8d 15       	cp	r24, r13
    ab72:	b1 f0       	breq	.+44     	; 0xaba0 <MapSprite2+0x8c>
				t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    ab74:	9e 01       	movw	r18, r28
    ab76:	29 0f       	add	r18, r25
    ab78:	31 1d       	adc	r19, r1
    ab7a:	97 fd       	sbrc	r25, 7
    ab7c:	3a 95       	dec	r19
    ab7e:	2e 5f       	subi	r18, 0xFE	; 254
    ab80:	3f 4f       	sbci	r19, 0xFF	; 255
    ab82:	fd 01       	movw	r30, r26
    ab84:	e2 0f       	add	r30, r18
    ab86:	f3 1f       	adc	r31, r19
    ab88:	24 91       	lpm	r18, Z
				sprites[startSprite].tileIndex=t;
    ab8a:	34 e0       	ldi	r19, 0x04	; 4
    ab8c:	83 9f       	mul	r24, r19
    ab8e:	f0 01       	movw	r30, r0
    ab90:	11 24       	eor	r1, r1
    ab92:	e8 59       	subi	r30, 0x98	; 152
    ab94:	fb 4f       	sbci	r31, 0xFB	; 251
    ab96:	22 83       	std	Z+2, r18	; 0x02
				sprites[startSprite++].flags=spriteFlags;
    ab98:	8f 5f       	subi	r24, 0xFF	; 255
    ab9a:	43 83       	std	Z+3, r20	; 0x03
    ab9c:	9f 0d       	add	r25, r15
    ab9e:	e8 cf       	rjmp	.-48     	; 0xab70 <MapSprite2+0x5c>
    aba0:	7e 0d       	add	r23, r14
		}else{
			y=0;
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
    aba2:	0f 5f       	subi	r16, 0xFF	; 255
				sprites[startSprite].tileIndex=t;
				sprites[startSprite++].flags=spriteFlags;
				x+=dx;
			}
			y+=dy;
			x=(spriteFlags & SPRITE_FLIP_X)?(mapWidth-1):0;
    aba4:	95 2f       	mov	r25, r21
    aba6:	dd cf       	rjmp	.-70     	; 0xab62 <MapSprite2+0x4e>
	    }
	}
    aba8:	df 91       	pop	r29
    abaa:	cf 91       	pop	r28
    abac:	1f 91       	pop	r17
    abae:	0f 91       	pop	r16
    abb0:	ff 90       	pop	r15
    abb2:	ef 90       	pop	r14
    abb4:	df 90       	pop	r13
    abb6:	08 95       	ret

0000abb8 <MoveSprite>:


	void MoveSprite(unsigned char startSprite,unsigned char x,unsigned char y,unsigned char width,unsigned char height){
    abb8:	0f 93       	push	r16
    abba:	cf 93       	push	r28
    abbc:	50 e0       	ldi	r21, 0x00	; 0

		for(unsigned char dy=0;dy<height;dy++){
    abbe:	30 e0       	ldi	r19, 0x00	; 0
    abc0:	30 17       	cp	r19, r16
    abc2:	e1 f0       	breq	.+56     	; 0xabfc <MoveSprite+0x44>
    abc4:	b4 2f       	mov	r27, r20
    abc6:	a0 e2       	ldi	r26, 0x20	; 32
    abc8:	a4 0f       	add	r26, r20
    abca:	78 2f       	mov	r23, r24
    abcc:	72 0f       	add	r23, r18
    abce:	96 2f       	mov	r25, r22
			for(unsigned char dx=0;dx<width;dx++){
    abd0:	87 17       	cp	r24, r23
    abd2:	81 f0       	breq	.+32     	; 0xabf4 <MoveSprite+0x3c>
			
				sprites[startSprite].x=x+(TILE_WIDTH*dx);
    abd4:	c4 e0       	ldi	r28, 0x04	; 4
    abd6:	8c 9f       	mul	r24, r28
    abd8:	f0 01       	movw	r30, r0
    abda:	11 24       	eor	r1, r1
    abdc:	e8 59       	subi	r30, 0x98	; 152
    abde:	fb 4f       	sbci	r31, 0xFB	; 251
    abe0:	90 83       	st	Z, r25
						sprites[startSprite].y=tmp;
					}else{
						sprites[startSprite].y=y+(TILE_HEIGHT*dy);
					}
				#else
					if((VRAM_TILES_V<32) && (y+(TILE_HEIGHT*dy))>(VRAM_TILES_V*TILE_HEIGHT)){
    abe2:	41 3e       	cpi	r20, 0xE1	; 225
    abe4:	51 05       	cpc	r21, r1
    abe6:	14 f0       	brlt	.+4      	; 0xabec <MoveSprite+0x34>
						unsigned char tmp=(y+(TILE_HEIGHT*dy))-(VRAM_TILES_V*TILE_HEIGHT);
						sprites[startSprite].y=tmp;
    abe8:	a1 83       	std	Z+1, r26	; 0x01
    abea:	01 c0       	rjmp	.+2      	; 0xabee <MoveSprite+0x36>
					}else{
						sprites[startSprite].y=y+(TILE_HEIGHT*dy);
    abec:	b1 83       	std	Z+1, r27	; 0x01
					}
				#endif

				startSprite++;
    abee:	8f 5f       	subi	r24, 0xFF	; 255
    abf0:	98 5f       	subi	r25, 0xF8	; 248
    abf2:	ee cf       	rjmp	.-36     	; 0xabd0 <MoveSprite+0x18>
	}


	void MoveSprite(unsigned char startSprite,unsigned char x,unsigned char y,unsigned char width,unsigned char height){

		for(unsigned char dy=0;dy<height;dy++){
    abf4:	3f 5f       	subi	r19, 0xFF	; 255
    abf6:	48 5f       	subi	r20, 0xF8	; 248
    abf8:	5f 4f       	sbci	r21, 0xFF	; 255
    abfa:	e2 cf       	rjmp	.-60     	; 0xabc0 <MoveSprite+0x8>

				startSprite++;
			}
		}	

	}
    abfc:	cf 91       	pop	r28
    abfe:	0f 91       	pop	r16
    ac00:	08 95       	ret

0000ac02 <InitializeVideoMode>:
		#endif	
	}


	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){
    ac02:	e8 e6       	ldi	r30, 0x68	; 104
    ac04:	f4 e0       	ldi	r31, 0x04	; 4

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
			sprites[i].x=(SCREEN_TILES_H*TILE_WIDTH);		
    ac06:	80 ef       	ldi	r24, 0xF0	; 240
    ac08:	80 83       	st	Z, r24
    ac0a:	34 96       	adiw	r30, 0x04	; 4

	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
    ac0c:	94 e0       	ldi	r25, 0x04	; 4
    ac0e:	e0 39       	cpi	r30, 0x90	; 144
    ac10:	f9 07       	cpc	r31, r25
    ac12:	d1 f7       	brne	.-12     	; 0xac08 <InitializeVideoMode+0x6>
			screenSections[i].wrapLine=0;
			screenSections[i].flags=SCT_PRIORITY_SPR;
		}
		*/

	}
    ac14:	08 95       	ret

0000ac16 <DrawMap>:



//Draws a map of tile at the specified position
#if VRAM_ADDR_SIZE == 1
	void DrawMap(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
    ac16:	4f 92       	push	r4
    ac18:	5f 92       	push	r5
    ac1a:	6f 92       	push	r6
    ac1c:	7f 92       	push	r7
    ac1e:	8f 92       	push	r8
    ac20:	9f 92       	push	r9
    ac22:	af 92       	push	r10
    ac24:	bf 92       	push	r11
    ac26:	cf 92       	push	r12
    ac28:	df 92       	push	r13
    ac2a:	ef 92       	push	r14
    ac2c:	ff 92       	push	r15
    ac2e:	0f 93       	push	r16
    ac30:	1f 93       	push	r17
    ac32:	cf 93       	push	r28
    ac34:	df 93       	push	r29
    ac36:	68 2e       	mov	r6, r24
    ac38:	56 2e       	mov	r5, r22
    ac3a:	7a 01       	movw	r14, r20
		//unsigned char i;
		u8 mapWidth=pgm_read_byte(&(map[0]));
    ac3c:	fa 01       	movw	r30, r20
    ac3e:	74 90       	lpm	r7, Z
		u8 mapHeight=pgm_read_byte(&(map[1]));
    ac40:	31 96       	adiw	r30, 0x01	; 1
    ac42:	84 90       	lpm	r8, Z
    ac44:	c7 2c       	mov	r12, r7
    ac46:	d1 2c       	mov	r13, r1
		
		for(u8 dy=0;dy<mapHeight;dy++){
    ac48:	00 e0       	ldi	r16, 0x00	; 0
    ac4a:	10 e0       	ldi	r17, 0x00	; 0
    ac4c:	91 2c       	mov	r9, r1
    ac4e:	98 14       	cp	r9, r8
    ac50:	f1 f0       	breq	.+60     	; 0xac8e <DrawMap+0x78>
    ac52:	c0 e0       	ldi	r28, 0x00	; 0
    ac54:	d0 e0       	ldi	r29, 0x00	; 0
    ac56:	58 01       	movw	r10, r16
    ac58:	f2 e0       	ldi	r31, 0x02	; 2
    ac5a:	af 0e       	add	r10, r31
    ac5c:	b1 1c       	adc	r11, r1
    ac5e:	49 2c       	mov	r4, r9
    ac60:	45 0c       	add	r4, r5
			for(u8 dx=0;dx<mapWidth;dx++){			
    ac62:	c7 15       	cp	r28, r7
    ac64:	80 f4       	brcc	.+32     	; 0xac86 <DrawMap+0x70>
    ac66:	95 01       	movw	r18, r10
    ac68:	2c 0f       	add	r18, r28
    ac6a:	3d 1f       	adc	r19, r29
    ac6c:	f7 01       	movw	r30, r14
    ac6e:	e2 0f       	add	r30, r18
    ac70:	f3 1f       	adc	r31, r19
				SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
    ac72:	24 91       	lpm	r18, Z
    ac74:	42 2f       	mov	r20, r18
    ac76:	50 e0       	ldi	r21, 0x00	; 0
    ac78:	64 2d       	mov	r22, r4
    ac7a:	8c 2f       	mov	r24, r28
    ac7c:	86 0d       	add	r24, r6
    ac7e:	0e 94 ec 47 	call	0x8fd8	; 0x8fd8 <SetTile>
    ac82:	21 96       	adiw	r28, 0x01	; 1
    ac84:	ee cf       	rjmp	.-36     	; 0xac62 <DrawMap+0x4c>
	void DrawMap(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
		//unsigned char i;
		u8 mapWidth=pgm_read_byte(&(map[0]));
		u8 mapHeight=pgm_read_byte(&(map[1]));
		
		for(u8 dy=0;dy<mapHeight;dy++){
    ac86:	93 94       	inc	r9
    ac88:	0c 0d       	add	r16, r12
    ac8a:	1d 1d       	adc	r17, r13
    ac8c:	e0 cf       	rjmp	.-64     	; 0xac4e <DrawMap+0x38>
			for(u8 dx=0;dx<mapWidth;dx++){			
				SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
			}
		}

	}
    ac8e:	df 91       	pop	r29
    ac90:	cf 91       	pop	r28
    ac92:	1f 91       	pop	r17
    ac94:	0f 91       	pop	r16
    ac96:	ff 90       	pop	r15
    ac98:	ef 90       	pop	r14
    ac9a:	df 90       	pop	r13
    ac9c:	cf 90       	pop	r12
    ac9e:	bf 90       	pop	r11
    aca0:	af 90       	pop	r10
    aca2:	9f 90       	pop	r9
    aca4:	8f 90       	pop	r8
    aca6:	7f 90       	pop	r7
    aca8:	6f 90       	pop	r6
    acaa:	5f 90       	pop	r5
    acac:	4f 90       	pop	r4
    acae:	08 95       	ret

0000acb0 <PrintByte>:
	}
		
}

//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
    acb0:	df 92       	push	r13
    acb2:	ef 92       	push	r14
    acb4:	ff 92       	push	r15
    acb6:	0f 93       	push	r16
    acb8:	1f 93       	push	r17
    acba:	cf 93       	push	r28
    acbc:	df 93       	push	r29
    acbe:	f6 2e       	mov	r15, r22
    acc0:	04 2f       	mov	r16, r20
    acc2:	d2 2e       	mov	r13, r18
    acc4:	ec 01       	movw	r28, r24
	unsigned char c,i;

	for(i=0;i<3;i++){
    acc6:	10 e0       	ldi	r17, 0x00	; 0
		c=val%10;
    acc8:	8a e0       	ldi	r24, 0x0A	; 10
    acca:	e8 2e       	mov	r14, r24
		if(val>0 || i==0){
    accc:	01 11       	cpse	r16, r1
    acce:	02 c0       	rjmp	.+4      	; 0xacd4 <PrintByte+0x24>
    acd0:	11 11       	cpse	r17, r1
    acd2:	07 c0       	rjmp	.+14     	; 0xace2 <PrintByte+0x32>
//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
	unsigned char c,i;

	for(i=0;i<3;i++){
		c=val%10;
    acd4:	80 2f       	mov	r24, r16
    acd6:	6e 2d       	mov	r22, r14
    acd8:	0e 94 65 76 	call	0xecca	; 0xecca <__udivmodqi4>
		if(val>0 || i==0){
			SetFont(x--,y,c+CHAR_ZERO);
    acdc:	40 e1       	ldi	r20, 0x10	; 16
    acde:	49 0f       	add	r20, r25
    ace0:	05 c0       	rjmp	.+10     	; 0xacec <PrintByte+0x3c>
		}else{
			if(zeropad){
    ace2:	dd 20       	and	r13, r13
    ace4:	11 f0       	breq	.+4      	; 0xacea <PrintByte+0x3a>
				SetFont(x--,y,CHAR_ZERO);
    ace6:	40 e1       	ldi	r20, 0x10	; 16
    ace8:	01 c0       	rjmp	.+2      	; 0xacec <PrintByte+0x3c>
			}else{
				SetFont(x--,y,0);
    acea:	40 e0       	ldi	r20, 0x00	; 0
    acec:	6f 2d       	mov	r22, r15
    acee:	8c 2f       	mov	r24, r28
    acf0:	0e 94 e8 47 	call	0x8fd0	; 0x8fd0 <SetFont>
			}
		}
		val=val/10;
    acf4:	80 2f       	mov	r24, r16
    acf6:	6e 2d       	mov	r22, r14
    acf8:	0e 94 65 76 	call	0xecca	; 0xecca <__udivmodqi4>
    acfc:	08 2f       	mov	r16, r24

//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
	unsigned char c,i;

	for(i=0;i<3;i++){
    acfe:	1f 5f       	subi	r17, 0xFF	; 255
    ad00:	21 97       	sbiw	r28, 0x01	; 1
    ad02:	13 30       	cpi	r17, 0x03	; 3
    ad04:	19 f7       	brne	.-58     	; 0xaccc <PrintByte+0x1c>
			}
		}
		val=val/10;
	}
		
}
    ad06:	df 91       	pop	r29
    ad08:	cf 91       	pop	r28
    ad0a:	1f 91       	pop	r17
    ad0c:	0f 91       	pop	r16
    ad0e:	ff 90       	pop	r15
    ad10:	ef 90       	pop	r14
    ad12:	df 90       	pop	r13
    ad14:	08 95       	ret

0000ad16 <Print>:
	PrintHexByte(x+4,y, value>>8);
	PrintHexByte(x+6,y,value&0xff);
}

//Print a string from flash
void Print(int x,int y,const char *string){
    ad16:	0f 93       	push	r16
    ad18:	1f 93       	push	r17
    ad1a:	cf 93       	push	r28
    ad1c:	df 93       	push	r29
    ad1e:	06 2f       	mov	r16, r22
    ad20:	c4 2f       	mov	r28, r20
    ad22:	d5 2f       	mov	r29, r21
    ad24:	18 2f       	mov	r17, r24
    ad26:	14 1b       	sub	r17, r20

	int i=0;
	char c;

	while(1){
		c=pgm_read_byte(&(string[i++]));		
    ad28:	fe 01       	movw	r30, r28
    ad2a:	44 91       	lpm	r20, Z
		if(c!=0){
    ad2c:	44 23       	and	r20, r20
    ad2e:	49 f0       	breq	.+18     	; 0xad42 <Print+0x2c>
			c=((c&127)-32);			
    ad30:	4f 77       	andi	r20, 0x7F	; 127
    ad32:	40 52       	subi	r20, 0x20	; 32
			SetFont(x++,y,c);
    ad34:	60 2f       	mov	r22, r16
    ad36:	8c 2f       	mov	r24, r28
    ad38:	81 0f       	add	r24, r17
    ad3a:	0e 94 e8 47 	call	0x8fd0	; 0x8fd0 <SetFont>
    ad3e:	21 96       	adiw	r28, 0x01	; 1
		}else{
			break;
		}
	}
    ad40:	f3 cf       	rjmp	.-26     	; 0xad28 <Print+0x12>
	
}
    ad42:	df 91       	pop	r29
    ad44:	cf 91       	pop	r28
    ad46:	1f 91       	pop	r17
    ad48:	0f 91       	pop	r16
    ad4a:	08 95       	ret

0000ad4c <PrintChar>:
}

//Print a single character
void PrintChar(int x,int y,char c){

	SetFont(x,y,(c-32));
    ad4c:	40 52       	subi	r20, 0x20	; 32
    ad4e:	0c 94 e8 47 	jmp	0x8fd0	; 0x8fd0 <SetFont>

0000ad52 <WaitVsync>:
		}
	}
}

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
    ad52:	0f 93       	push	r16
    ad54:	1f 93       	push	r17
    ad56:	cf 93       	push	r28
    ad58:	df 93       	push	r29
    ad5a:	8c 01       	movw	r16, r24
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    ad5c:	c0 e0       	ldi	r28, 0x00	; 0
    ad5e:	d0 e0       	ldi	r29, 0x00	; 0
    ad60:	c0 17       	cp	r28, r16
    ad62:	d1 07       	cpc	r29, r17
    ad64:	44 f4       	brge	.+16     	; 0xad76 <WaitVsync+0x24>
		while(!GetVsyncFlag());
    ad66:	0e 94 02 48 	call	0x9004	; 0x9004 <GetVsyncFlag>
    ad6a:	88 23       	and	r24, r24
    ad6c:	e1 f3       	breq	.-8      	; 0xad66 <WaitVsync+0x14>
		ClearVsyncFlag();		
    ad6e:	0e 94 06 48 	call	0x900c	; 0x900c <ClearVsyncFlag>

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    ad72:	21 96       	adiw	r28, 0x01	; 1
    ad74:	f5 cf       	rjmp	.-22     	; 0xad60 <WaitVsync+0xe>
		while(!GetVsyncFlag());
		ClearVsyncFlag();		
	}
}
    ad76:	df 91       	pop	r29
    ad78:	cf 91       	pop	r28
    ad7a:	1f 91       	pop	r17
    ad7c:	0f 91       	pop	r16
    ad7e:	08 95       	ret

0000ad80 <DisplayLogo>:
	void DisplayLogo(){
	
		#if INTRO_LOGO !=0
			#define LOGO_X_POS 12
			
			InitMusicPlayer(logoInitPatches);
    ad80:	8f e0       	ldi	r24, 0x0F	; 15
    ad82:	99 e0       	ldi	r25, 0x09	; 9
    ad84:	0e 94 86 4a 	call	0x950c	; 0x950c <InitMusicPlayer>
			SetTileTable(logo_tileset);
    ad88:	8f e0       	ldi	r24, 0x0F	; 15
    ad8a:	91 e0       	ldi	r25, 0x01	; 1
    ad8c:	0e 94 fd 47 	call	0x8ffa	; 0x8ffa <SetTileTable>
			
			//draw logo
			ClearVram();
    ad90:	0e 94 de 47 	call	0x8fbc	; 0x8fbc <ClearVram>
			WaitVsync(15);		
    ad94:	8f e0       	ldi	r24, 0x0F	; 15
    ad96:	90 e0       	ldi	r25, 0x00	; 0
    ad98:	0e 94 a9 56 	call	0xad52	; 0xad52 <WaitVsync>


			#if INTRO_LOGO == 1 
				TriggerFx(0,0xff,true);
    ad9c:	41 e0       	ldi	r20, 0x01	; 1
    ad9e:	6f ef       	ldi	r22, 0xFF	; 255
    ada0:	80 e0       	ldi	r24, 0x00	; 0
    ada2:	0e 94 5c 4b 	call	0x96b8	; 0x96b8 <TriggerFx>
			#endif

			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo);
    ada6:	49 ef       	ldi	r20, 0xF9	; 249
    ada8:	50 e0       	ldi	r21, 0x00	; 0
    adaa:	6c e0       	ldi	r22, 0x0C	; 12
    adac:	8c e0       	ldi	r24, 0x0C	; 12
    adae:	0e 94 0b 56 	call	0xac16	; 0xac16 <DrawMap>
			WaitVsync(3);
    adb2:	83 e0       	ldi	r24, 0x03	; 3
    adb4:	90 e0       	ldi	r25, 0x00	; 0
    adb6:	0e 94 a9 56 	call	0xad52	; 0xad52 <WaitVsync>
			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo2);
    adba:	48 ee       	ldi	r20, 0xE8	; 232
    adbc:	50 e0       	ldi	r21, 0x00	; 0
    adbe:	6c e0       	ldi	r22, 0x0C	; 12
    adc0:	8c e0       	ldi	r24, 0x0C	; 12
    adc2:	0e 94 0b 56 	call	0xac16	; 0xac16 <DrawMap>
			WaitVsync(2);
    adc6:	82 e0       	ldi	r24, 0x02	; 2
    adc8:	90 e0       	ldi	r25, 0x00	; 0
    adca:	0e 94 a9 56 	call	0xad52	; 0xad52 <WaitVsync>
			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo);
    adce:	49 ef       	ldi	r20, 0xF9	; 249
    add0:	50 e0       	ldi	r21, 0x00	; 0
    add2:	6c e0       	ldi	r22, 0x0C	; 12
    add4:	8c e0       	ldi	r24, 0x0C	; 12
    add6:	0e 94 0b 56 	call	0xac16	; 0xac16 <DrawMap>
			#if INTRO_LOGO == 2
				SetMasterVolume(0xc0);
				TriggerNote(3,0,16,0xff);
			#endif 
		
			WaitVsync(65);
    adda:	81 e4       	ldi	r24, 0x41	; 65
    addc:	90 e0       	ldi	r25, 0x00	; 0
    adde:	0e 94 a9 56 	call	0xad52	; 0xad52 <WaitVsync>
			ClearVram();
    ade2:	0e 94 de 47 	call	0x8fbc	; 0x8fbc <ClearVram>
			WaitVsync(20);
    ade6:	84 e1       	ldi	r24, 0x14	; 20
    ade8:	90 e0       	ldi	r25, 0x00	; 0
    adea:	0c 94 a9 56 	jmp	0xad52	; 0xad52 <WaitVsync>

0000adee <doFade>:
char fadeDir;
bool volatile fadeActive;


void doFade(unsigned char speed,bool blocking){
	fadeSpeed=speed;
    adee:	80 93 c5 0b 	sts	0x0BC5, r24
	currFadeFrame=0;
    adf2:	10 92 c9 0b 	sts	0x0BC9, r1
	fadeActive=true;
    adf6:	81 e0       	ldi	r24, 0x01	; 1
    adf8:	80 93 c8 0b 	sts	0x0BC8, r24
		
	if(blocking){
    adfc:	66 23       	and	r22, r22
    adfe:	21 f0       	breq	.+8      	; 0xae08 <doFade+0x1a>
		while(fadeActive==true);
    ae00:	80 91 c8 0b 	lds	r24, 0x0BC8
    ae04:	81 11       	cpse	r24, r1
    ae06:	fc cf       	rjmp	.-8      	; 0xae00 <doFade+0x12>
    ae08:	08 95       	ret

0000ae0a <FadeIn>:
	
	
}

void FadeIn(unsigned char speed,bool blocking){
	if(speed==0){
    ae0a:	81 11       	cpse	r24, r1
    ae0c:	03 c0       	rjmp	.+6      	; 0xae14 <FadeIn+0xa>
		DDRC=0xff;
    ae0e:	8f ef       	ldi	r24, 0xFF	; 255
    ae10:	87 b9       	out	0x07, r24	; 7
		return;
    ae12:	08 95       	ret
	}
	fadeStep=1;
    ae14:	91 e0       	ldi	r25, 0x01	; 1
    ae16:	90 93 ca 0b 	sts	0x0BCA, r25
	fadeDir=1;
    ae1a:	90 93 c6 0b 	sts	0x0BC6, r25
	doFade(speed,blocking);
    ae1e:	0c 94 f7 56 	jmp	0xadee	; 0xadee <doFade>

0000ae22 <FadeOut>:
}

void FadeOut(unsigned char speed,bool blocking){
	if(speed==0){
    ae22:	81 11       	cpse	r24, r1
    ae24:	02 c0       	rjmp	.+4      	; 0xae2a <FadeOut+0x8>
		DDRC=0;
    ae26:	17 b8       	out	0x07, r1	; 7
		return;
    ae28:	08 95       	ret
	}
	
	fadeStep=FADER_STEPS;
    ae2a:	9c e0       	ldi	r25, 0x0C	; 12
    ae2c:	90 93 ca 0b 	sts	0x0BCA, r25
	fadeDir=-1;
    ae30:	9f ef       	ldi	r25, 0xFF	; 255
    ae32:	90 93 c6 0b 	sts	0x0BC6, r25
	doFade(speed,blocking);
    ae36:	0c 94 f7 56 	jmp	0xadee	; 0xadee <doFade>

0000ae3a <ProcessFading>:
}


//called by the kernel at each field end
void ProcessFading(){
	if(fadeActive==true){
    ae3a:	80 91 c8 0b 	lds	r24, 0x0BC8
    ae3e:	88 23       	and	r24, r24
    ae40:	01 f1       	breq	.+64     	; 0xae82 <ProcessFading+0x48>
		if(currFadeFrame==0){
    ae42:	80 91 c9 0b 	lds	r24, 0x0BC9
    ae46:	81 11       	cpse	r24, r1
    ae48:	19 c0       	rjmp	.+50     	; 0xae7c <ProcessFading+0x42>
			currFadeFrame=fadeSpeed;
    ae4a:	80 91 c5 0b 	lds	r24, 0x0BC5
    ae4e:	80 93 c9 0b 	sts	0x0BC9, r24
			DDRC = pgm_read_byte(&(fader[fadeStep-1]));
    ae52:	e0 91 ca 0b 	lds	r30, 0x0BCA
    ae56:	f0 e0       	ldi	r31, 0x00	; 0
    ae58:	e5 52       	subi	r30, 0x25	; 37
    ae5a:	ff 4f       	sbci	r31, 0xFF	; 255
    ae5c:	e4 91       	lpm	r30, Z
    ae5e:	e7 b9       	out	0x07, r30	; 7
			fadeStep+=fadeDir;
    ae60:	90 91 c6 0b 	lds	r25, 0x0BC6
    ae64:	80 91 ca 0b 	lds	r24, 0x0BCA
    ae68:	89 0f       	add	r24, r25
    ae6a:	80 93 ca 0b 	sts	0x0BCA, r24
			if(fadeStep==0 || fadeStep==(FADER_STEPS+1)){
    ae6e:	88 23       	and	r24, r24
    ae70:	11 f0       	breq	.+4      	; 0xae76 <ProcessFading+0x3c>
    ae72:	8d 30       	cpi	r24, 0x0D	; 13
    ae74:	31 f4       	brne	.+12     	; 0xae82 <ProcessFading+0x48>
				fadeActive=false;
    ae76:	10 92 c8 0b 	sts	0x0BC8, r1
    ae7a:	08 95       	ret
			}
		}else{
			currFadeFrame--;
    ae7c:	81 50       	subi	r24, 0x01	; 1
    ae7e:	80 93 c9 0b 	sts	0x0BC9, r24
    ae82:	08 95       	ret

0000ae84 <VideoModeVsync>:
	}

	//Callback invoked during hsync
	void VideoModeVsync(){
		
		ProcessFading();
    ae84:	0e 94 1d 57 	call	0xae3a	; 0xae3a <ProcessFading>
		ProcessSprites();
    ae88:	0c 94 99 54 	jmp	0xa932	; 0xa932 <ProcessSprites>

0000ae8c <LBGetNextFrame>:
	Animation anim;
	int tile_index;
} TileAnimation;

char* LBGetNextFrame(Animation* anim)
{
    ae8c:	fc 01       	movw	r30, r24
	anim->looped = 0;
    ae8e:	14 82       	std	Z+4, r1	; 0x04
	anim->frame_count += 1;
    ae90:	93 81       	ldd	r25, Z+3	; 0x03
    ae92:	9f 5f       	subi	r25, 0xFF	; 255
    ae94:	93 83       	std	Z+3, r25	; 0x03
	if (anim->frame_count < anim->frames_per_anim)
    ae96:	22 81       	ldd	r18, Z+2	; 0x02
    ae98:	80 81       	ld	r24, Z
    ae9a:	92 17       	cp	r25, r18
    ae9c:	38 f4       	brcc	.+14     	; 0xaeac <LBGetNextFrame+0x20>
	{
		return anim->anims[anim->current_anim];
    ae9e:	e8 0f       	add	r30, r24
    aea0:	f1 1d       	adc	r31, r1
    aea2:	e8 0f       	add	r30, r24
    aea4:	f1 1d       	adc	r31, r1
    aea6:	86 81       	ldd	r24, Z+6	; 0x06
    aea8:	97 81       	ldd	r25, Z+7	; 0x07
    aeaa:	08 95       	ret
	}
	anim->frame_count = 0;
    aeac:	13 82       	std	Z+3, r1	; 0x03
	anim->current_anim = (anim->current_anim + 1) % anim->anim_count;
    aeae:	90 e0       	ldi	r25, 0x00	; 0
    aeb0:	01 96       	adiw	r24, 0x01	; 1
    aeb2:	61 81       	ldd	r22, Z+1	; 0x01
    aeb4:	70 e0       	ldi	r23, 0x00	; 0
    aeb6:	0e 94 85 76 	call	0xed0a	; 0xed0a <__divmodhi4>
    aeba:	80 83       	st	Z, r24
	if (anim->current_anim == 0) anim->looped = 1;
    aebc:	81 11       	cpse	r24, r1
    aebe:	02 c0       	rjmp	.+4      	; 0xaec4 <LBGetNextFrame+0x38>
    aec0:	21 e0       	ldi	r18, 0x01	; 1
    aec2:	24 83       	std	Z+4, r18	; 0x04
	return anim->anims[anim->current_anim];
    aec4:	99 27       	eor	r25, r25
    aec6:	03 96       	adiw	r24, 0x03	; 3
    aec8:	88 0f       	add	r24, r24
    aeca:	99 1f       	adc	r25, r25
    aecc:	e8 0f       	add	r30, r24
    aece:	f9 1f       	adc	r31, r25
    aed0:	80 81       	ld	r24, Z
    aed2:	91 81       	ldd	r25, Z+1	; 0x01
}
    aed4:	08 95       	ret

0000aed6 <LBGetNextFrameReverse>:

char* LBGetNextFrameReverse(Animation* anim)
{
    aed6:	fc 01       	movw	r30, r24
	anim->looped = 0;
    aed8:	14 82       	std	Z+4, r1	; 0x04
	anim->frame_count += 1;
    aeda:	93 81       	ldd	r25, Z+3	; 0x03
    aedc:	9f 5f       	subi	r25, 0xFF	; 255
    aede:	93 83       	std	Z+3, r25	; 0x03
	if (anim->frame_count < anim->frames_per_anim)
    aee0:	22 81       	ldd	r18, Z+2	; 0x02
    aee2:	80 81       	ld	r24, Z
    aee4:	92 17       	cp	r25, r18
    aee6:	e0 f0       	brcs	.+56     	; 0xaf20 <LBGetNextFrameReverse+0x4a>
	{
		return anim->anims[anim->current_anim];
	}
	anim->frame_count = 0;
    aee8:	13 82       	std	Z+3, r1	; 0x03
	if (anim->reversing)
    aeea:	95 81       	ldd	r25, Z+5	; 0x05
    aeec:	99 23       	and	r25, r25
    aeee:	49 f0       	breq	.+18     	; 0xaf02 <LBGetNextFrameReverse+0x2c>
	{
		anim->current_anim = anim->current_anim - 1;
    aef0:	81 50       	subi	r24, 0x01	; 1
    aef2:	10 f0       	brcs	.+4      	; 0xaef8 <LBGetNextFrameReverse+0x22>
    aef4:	80 83       	st	Z, r24
    aef6:	13 c0       	rjmp	.+38     	; 0xaf1e <LBGetNextFrameReverse+0x48>
		if (anim->current_anim == 0xff)
		{
			anim->current_anim = 0;
    aef8:	10 82       	st	Z, r1
			anim->looped = 1;
    aefa:	81 e0       	ldi	r24, 0x01	; 1
    aefc:	84 83       	std	Z+4, r24	; 0x04
			anim->reversing = 0;
    aefe:	15 82       	std	Z+5, r1	; 0x05
    af00:	0e c0       	rjmp	.+28     	; 0xaf1e <LBGetNextFrameReverse+0x48>
		}
	}
	else
	{
		anim->current_anim = (anim->current_anim + 1) % anim->anim_count;
    af02:	21 81       	ldd	r18, Z+1	; 0x01
    af04:	90 e0       	ldi	r25, 0x00	; 0
    af06:	01 96       	adiw	r24, 0x01	; 1
    af08:	62 2f       	mov	r22, r18
    af0a:	70 e0       	ldi	r23, 0x00	; 0
    af0c:	0e 94 85 76 	call	0xed0a	; 0xed0a <__divmodhi4>
    af10:	80 83       	st	Z, r24
		if (anim->current_anim == 0) 
    af12:	81 11       	cpse	r24, r1
    af14:	04 c0       	rjmp	.+8      	; 0xaf1e <LBGetNextFrameReverse+0x48>
		{
			anim->reversing = 1;
    af16:	81 e0       	ldi	r24, 0x01	; 1
    af18:	85 83       	std	Z+5, r24	; 0x05
			anim->current_anim = anim->anim_count - 1;
    af1a:	21 50       	subi	r18, 0x01	; 1
    af1c:	20 83       	st	Z, r18
		}
	}
	return anim->anims[anim->current_anim];
    af1e:	80 81       	ld	r24, Z
    af20:	e8 0f       	add	r30, r24
    af22:	f1 1d       	adc	r31, r1
    af24:	e8 0f       	add	r30, r24
    af26:	f1 1d       	adc	r31, r1
    af28:	86 81       	ldd	r24, Z+6	; 0x06
    af2a:	97 81       	ldd	r25, Z+7	; 0x07
}
    af2c:	08 95       	ret

0000af2e <LBGetJoyPadState>:

void LBGetJoyPadState(JoyPadState* p, unsigned char index)
/*
 * Get the current joy pad button state for index controller
 */
{
    af2e:	0f 93       	push	r16
    af30:	1f 93       	push	r17
    af32:	cf 93       	push	r28
    af34:	df 93       	push	r29
    af36:	1f 92       	push	r1
    af38:	cd b7       	in	r28, 0x3d	; 61
    af3a:	de b7       	in	r29, 0x3e	; 62
    af3c:	8c 01       	movw	r16, r24
	static unsigned int p_prev[2] = {0,0};

	p->held = ReadJoypad(index);
    af3e:	86 2f       	mov	r24, r22
    af40:	69 83       	std	Y+1, r22	; 0x01
    af42:	0e 94 0c 48 	call	0x9018	; 0x9018 <ReadJoypad>
    af46:	d8 01       	movw	r26, r16
    af48:	15 96       	adiw	r26, 0x05	; 5
    af4a:	9c 93       	st	X, r25
    af4c:	8e 93       	st	-X, r24
    af4e:	14 97       	sbiw	r26, 0x04	; 4
    af50:	69 81       	ldd	r22, Y+1	; 0x01
    af52:	e6 2f       	mov	r30, r22
    af54:	f0 e0       	ldi	r31, 0x00	; 0

	// Count held cycles
	if (p->held == 0 || p->held != p_prev[index])
    af56:	00 97       	sbiw	r24, 0x00	; 0
    af58:	51 f0       	breq	.+20     	; 0xaf6e <LBGetJoyPadState+0x40>
    af5a:	df 01       	movw	r26, r30
    af5c:	aa 0f       	add	r26, r26
    af5e:	bb 1f       	adc	r27, r27
    af60:	a3 5c       	subi	r26, 0xC3	; 195
    af62:	b4 4f       	sbci	r27, 0xF4	; 244
    af64:	2d 91       	ld	r18, X+
    af66:	3c 91       	ld	r19, X
    af68:	82 17       	cp	r24, r18
    af6a:	93 07       	cpc	r25, r19
    af6c:	21 f0       	breq	.+8      	; 0xaf76 <LBGetJoyPadState+0x48>
	    p->held_cycles = 0;
    af6e:	d8 01       	movw	r26, r16
    af70:	16 96       	adiw	r26, 0x06	; 6
    af72:	1c 92       	st	X, r1
    af74:	07 c0       	rjmp	.+14     	; 0xaf84 <LBGetJoyPadState+0x56>
	else
	    p->held_cycles += 1;
    af76:	d8 01       	movw	r26, r16
    af78:	16 96       	adiw	r26, 0x06	; 6
    af7a:	2c 91       	ld	r18, X
    af7c:	16 97       	sbiw	r26, 0x06	; 6
    af7e:	2f 5f       	subi	r18, 0xFF	; 255
    af80:	16 96       	adiw	r26, 0x06	; 6
    af82:	2c 93       	st	X, r18

	p->pressed = p->held & (p->held ^ p_prev[index]);
    af84:	ee 0f       	add	r30, r30
    af86:	ff 1f       	adc	r31, r31
    af88:	e3 5c       	subi	r30, 0xC3	; 195
    af8a:	f4 4f       	sbci	r31, 0xF4	; 244
    af8c:	20 81       	ld	r18, Z
    af8e:	31 81       	ldd	r19, Z+1	; 0x01
    af90:	a9 01       	movw	r20, r18
    af92:	40 95       	com	r20
    af94:	50 95       	com	r21
    af96:	48 23       	and	r20, r24
    af98:	59 23       	and	r21, r25
    af9a:	d8 01       	movw	r26, r16
    af9c:	11 96       	adiw	r26, 0x01	; 1
    af9e:	5c 93       	st	X, r21
    afa0:	4e 93       	st	-X, r20
	p->released = p_prev[index] & (p->held ^ p_prev[index]);
    afa2:	ac 01       	movw	r20, r24
    afa4:	40 95       	com	r20
    afa6:	50 95       	com	r21
    afa8:	24 23       	and	r18, r20
    afaa:	35 23       	and	r19, r21
    afac:	13 96       	adiw	r26, 0x03	; 3
    afae:	3c 93       	st	X, r19
    afb0:	2e 93       	st	-X, r18
    afb2:	12 97       	sbiw	r26, 0x02	; 2
	p_prev[index] = p->held;
    afb4:	91 83       	std	Z+1, r25	; 0x01
    afb6:	80 83       	st	Z, r24
}
    afb8:	0f 90       	pop	r0
    afba:	df 91       	pop	r29
    afbc:	cf 91       	pop	r28
    afbe:	1f 91       	pop	r17
    afc0:	0f 91       	pop	r16
    afc2:	08 95       	ret

0000afc4 <LBCopyChars>:

void LBCopyChars(u8* dst, u8 *src, u8 count)
/*
 * Custom string copy
 */
{
    afc4:	36 2f       	mov	r19, r22
	for (u8 i = 0; i < count; i++)
    afc6:	fb 01       	movw	r30, r22
    afc8:	2e 2f       	mov	r18, r30
    afca:	23 1b       	sub	r18, r19
    afcc:	24 17       	cp	r18, r20
    afce:	28 f4       	brcc	.+10     	; 0xafda <LBCopyChars+0x16>
	{
		dst[i] = src[i];
    afd0:	21 91       	ld	r18, Z+
    afd2:	dc 01       	movw	r26, r24
    afd4:	2d 93       	st	X+, r18
    afd6:	cd 01       	movw	r24, r26
    afd8:	f7 cf       	rjmp	.-18     	; 0xafc8 <LBCopyChars+0x4>
	}
}
    afda:	08 95       	ret

0000afdc <LBPrintStr>:

void LBPrintStr(u8 x, u8 y, u8* txt, u8 count)
{
    afdc:	af 92       	push	r10
    afde:	bf 92       	push	r11
    afe0:	cf 92       	push	r12
    afe2:	df 92       	push	r13
    afe4:	ef 92       	push	r14
    afe6:	ff 92       	push	r15
    afe8:	0f 93       	push	r16
    afea:	1f 93       	push	r17
    afec:	cf 93       	push	r28
    afee:	df 93       	push	r29
    aff0:	1f 92       	push	r1
    aff2:	cd b7       	in	r28, 0x3d	; 61
    aff4:	de b7       	in	r29, 0x3e	; 62
    aff6:	7a 01       	movw	r14, r20
	for (u8 i = 0; i < count; i++)
    aff8:	8a 01       	movw	r16, r20
	{
		PrintChar(x+i, y, txt[i]);
    affa:	c6 2e       	mov	r12, r22
    affc:	d1 2c       	mov	r13, r1
    affe:	90 e0       	ldi	r25, 0x00	; 0
    b000:	5c 01       	movw	r10, r24
    b002:	a4 1a       	sub	r10, r20
    b004:	b5 0a       	sbc	r11, r21
    b006:	80 2f       	mov	r24, r16
    b008:	8e 19       	sub	r24, r14
	}
}

void LBPrintStr(u8 x, u8 y, u8* txt, u8 count)
{
	for (u8 i = 0; i < count; i++)
    b00a:	82 17       	cp	r24, r18
    b00c:	60 f4       	brcc	.+24     	; 0xb026 <LBPrintStr+0x4a>
    b00e:	c5 01       	movw	r24, r10
    b010:	80 0f       	add	r24, r16
    b012:	91 1f       	adc	r25, r17
	{
		PrintChar(x+i, y, txt[i]);
    b014:	f8 01       	movw	r30, r16
    b016:	41 91       	ld	r20, Z+
    b018:	8f 01       	movw	r16, r30
    b01a:	b6 01       	movw	r22, r12
    b01c:	29 83       	std	Y+1, r18	; 0x01
    b01e:	0e 94 a6 56 	call	0xad4c	; 0xad4c <PrintChar>
    b022:	29 81       	ldd	r18, Y+1	; 0x01
    b024:	f0 cf       	rjmp	.-32     	; 0xb006 <LBPrintStr+0x2a>
	}
}
    b026:	0f 90       	pop	r0
    b028:	df 91       	pop	r29
    b02a:	cf 91       	pop	r28
    b02c:	1f 91       	pop	r17
    b02e:	0f 91       	pop	r16
    b030:	ff 90       	pop	r15
    b032:	ef 90       	pop	r14
    b034:	df 90       	pop	r13
    b036:	cf 90       	pop	r12
    b038:	bf 90       	pop	r11
    b03a:	af 90       	pop	r10
    b03c:	08 95       	ret

0000b03e <LBCollides>:

u8 LBCollides(u8 x1, u8 y1, u8 width1, u8 height1,
						 u8 x2, u8 y2, u8 width2, u8 height2)
{
    b03e:	af 92       	push	r10
    b040:	cf 92       	push	r12
    b042:	ef 92       	push	r14
    b044:	ff 92       	push	r15
    b046:	0f 93       	push	r16
    b048:	1f 93       	push	r17
	if (y1 + height1 <= y2) return 0;
    b04a:	70 e0       	ldi	r23, 0x00	; 0
    b04c:	f1 2c       	mov	r15, r1
    b04e:	fb 01       	movw	r30, r22
    b050:	e2 0f       	add	r30, r18
    b052:	f1 1d       	adc	r31, r1
    b054:	ee 16       	cp	r14, r30
    b056:	ff 06       	cpc	r15, r31
    b058:	a4 f4       	brge	.+40     	; 0xb082 <LBCollides+0x44>
	if (y1 >= y2 + height2) return 0;
    b05a:	ea 0c       	add	r14, r10
    b05c:	f1 1c       	adc	r15, r1
    b05e:	6e 15       	cp	r22, r14
    b060:	7f 05       	cpc	r23, r15
    b062:	7c f4       	brge	.+30     	; 0xb082 <LBCollides+0x44>
	if (x1 + width1 <= x2) return 0;
    b064:	28 2f       	mov	r18, r24
    b066:	30 e0       	ldi	r19, 0x00	; 0
    b068:	10 e0       	ldi	r17, 0x00	; 0
    b06a:	c9 01       	movw	r24, r18
    b06c:	84 0f       	add	r24, r20
    b06e:	91 1d       	adc	r25, r1
    b070:	08 17       	cp	r16, r24
    b072:	19 07       	cpc	r17, r25
    b074:	34 f4       	brge	.+12     	; 0xb082 <LBCollides+0x44>
	if (x1 >= x2 + width2) return 0;
    b076:	0c 0d       	add	r16, r12
    b078:	11 1d       	adc	r17, r1
    b07a:	81 e0       	ldi	r24, 0x01	; 1
    b07c:	20 17       	cp	r18, r16
    b07e:	31 07       	cpc	r19, r17
    b080:	0c f0       	brlt	.+2      	; 0xb084 <LBCollides+0x46>
}

u8 LBCollides(u8 x1, u8 y1, u8 width1, u8 height1,
						 u8 x2, u8 y2, u8 width2, u8 height2)
{
	if (y1 + height1 <= y2) return 0;
    b082:	80 e0       	ldi	r24, 0x00	; 0
	if (y1 >= y2 + height2) return 0;
	if (x1 + width1 <= x2) return 0;
	if (x1 >= x2 + width2) return 0;
	return 1;
}
    b084:	1f 91       	pop	r17
    b086:	0f 91       	pop	r16
    b088:	ff 90       	pop	r15
    b08a:	ef 90       	pop	r14
    b08c:	cf 90       	pop	r12
    b08e:	af 90       	pop	r10
    b090:	08 95       	ret

0000b092 <LBLineIntersect>:

u8 LBLineIntersect(u8 line1x1, u8 line1y1, u8 line1x2, u8 line1y2,
							  u8 line2x1, u8 line2y1, u8 line2x2, u8 line2y2)
{
    b092:	2f 92       	push	r2
    b094:	3f 92       	push	r3
    b096:	4f 92       	push	r4
    b098:	5f 92       	push	r5
    b09a:	6f 92       	push	r6
    b09c:	7f 92       	push	r7
    b09e:	8f 92       	push	r8
    b0a0:	9f 92       	push	r9
    b0a2:	af 92       	push	r10
    b0a4:	bf 92       	push	r11
    b0a6:	cf 92       	push	r12
    b0a8:	df 92       	push	r13
    b0aa:	ef 92       	push	r14
    b0ac:	ff 92       	push	r15
    b0ae:	0f 93       	push	r16
    b0b0:	1f 93       	push	r17
    b0b2:	cf 93       	push	r28
    b0b4:	df 93       	push	r29
    b0b6:	00 d0       	rcall	.+0      	; 0xb0b8 <LBLineIntersect+0x26>
    b0b8:	00 d0       	rcall	.+0      	; 0xb0ba <LBLineIntersect+0x28>
    b0ba:	cd b7       	in	r28, 0x3d	; 61
    b0bc:	de b7       	in	r29, 0x3e	; 62
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
    b0be:	f1 2c       	mov	r15, r1
    b0c0:	8a 2c       	mov	r8, r10
    b0c2:	91 2c       	mov	r9, r1
    b0c4:	8e 18       	sub	r8, r14
    b0c6:	9f 08       	sbc	r9, r15
    b0c8:	a8 2e       	mov	r10, r24
    b0ca:	b1 2c       	mov	r11, r1
    b0cc:	24 2e       	mov	r2, r20
    b0ce:	31 2c       	mov	r3, r1
    b0d0:	2a 18       	sub	r2, r10
    b0d2:	3b 08       	sbc	r3, r11
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
    b0d4:	10 e0       	ldi	r17, 0x00	; 0
    b0d6:	d1 2c       	mov	r13, r1
    b0d8:	c0 1a       	sub	r12, r16
    b0da:	d1 0a       	sbc	r13, r17
    b0dc:	46 2f       	mov	r20, r22
    b0de:	50 e0       	ldi	r21, 0x00	; 0
    b0e0:	5c 83       	std	Y+4, r21	; 0x04
    b0e2:	4b 83       	std	Y+3, r20	; 0x03
    b0e4:	82 2f       	mov	r24, r18
    b0e6:	90 e0       	ldi	r25, 0x00	; 0
    b0e8:	9a 83       	std	Y+2, r25	; 0x02
    b0ea:	89 83       	std	Y+1, r24	; 0x01
							  u8 line2x1, u8 line2y1, u8 line2x2, u8 line2y2)
{
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
    b0ec:	82 9c       	mul	r8, r2
    b0ee:	90 01       	movw	r18, r0
    b0f0:	83 9c       	mul	r8, r3
    b0f2:	30 0d       	add	r19, r0
    b0f4:	92 9c       	mul	r9, r2
    b0f6:	30 0d       	add	r19, r0
    b0f8:	11 24       	eor	r1, r1
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
    b0fa:	ca 01       	movw	r24, r20
    b0fc:	e9 81       	ldd	r30, Y+1	; 0x01
    b0fe:	fa 81       	ldd	r31, Y+2	; 0x02
    b100:	8e 1b       	sub	r24, r30
    b102:	9f 0b       	sbc	r25, r31
    b104:	c8 9e       	mul	r12, r24
    b106:	b0 01       	movw	r22, r0
    b108:	c9 9e       	mul	r12, r25
    b10a:	70 0d       	add	r23, r0
    b10c:	d8 9e       	mul	r13, r24
    b10e:	70 0d       	add	r23, r0
    b110:	11 24       	eor	r1, r1
							  u8 line2x1, u8 line2y1, u8 line2x2, u8 line2y2)
{
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
    b112:	62 0f       	add	r22, r18
    b114:	73 1f       	adc	r23, r19
    b116:	88 27       	eor	r24, r24
    b118:	77 fd       	sbrc	r23, 7
    b11a:	80 95       	com	r24
    b11c:	98 2f       	mov	r25, r24
    b11e:	0e 94 9d 77 	call	0xef3a	; 0xef3a <__floatsisf>
    b122:	2b 01       	movw	r4, r22
    b124:	3c 01       	movw	r6, r24
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;
    b126:	20 e0       	ldi	r18, 0x00	; 0
    b128:	30 e0       	ldi	r19, 0x00	; 0
    b12a:	a9 01       	movw	r20, r18
    b12c:	0e 94 fe 76 	call	0xedfc	; 0xedfc <__cmpsf2>
    b130:	88 23       	and	r24, r24
    b132:	09 f4       	brne	.+2      	; 0xb136 <LBLineIntersect+0xa4>
    b134:	6c c0       	rjmp	.+216    	; 0xb20e <LBLineIntersect+0x17c>

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    b136:	4b 81       	ldd	r20, Y+3	; 0x03
    b138:	5c 81       	ldd	r21, Y+4	; 0x04
    b13a:	4e 19       	sub	r20, r14
    b13c:	5f 09       	sbc	r21, r15
    b13e:	7a 01       	movw	r14, r20
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
    b140:	0a 19       	sub	r16, r10
    b142:	1b 09       	sbc	r17, r11

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    b144:	c4 9e       	mul	r12, r20
    b146:	c0 01       	movw	r24, r0
    b148:	c5 9e       	mul	r12, r21
    b14a:	90 0d       	add	r25, r0
    b14c:	d4 9e       	mul	r13, r20
    b14e:	90 0d       	add	r25, r0
    b150:	11 24       	eor	r1, r1
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
    b152:	80 9e       	mul	r8, r16
    b154:	b0 01       	movw	r22, r0
    b156:	81 9e       	mul	r8, r17
    b158:	70 0d       	add	r23, r0
    b15a:	90 9e       	mul	r9, r16
    b15c:	70 0d       	add	r23, r0
    b15e:	11 24       	eor	r1, r1

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    b160:	68 0f       	add	r22, r24
    b162:	79 1f       	adc	r23, r25
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
    b164:	88 27       	eor	r24, r24
    b166:	77 fd       	sbrc	r23, 7
    b168:	80 95       	com	r24
    b16a:	98 2f       	mov	r25, r24
    b16c:	0e 94 9d 77 	call	0xef3a	; 0xef3a <__floatsisf>

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    b170:	a3 01       	movw	r20, r6
    b172:	92 01       	movw	r18, r4
    b174:	0e 94 02 77 	call	0xee04	; 0xee04 <__divsf3>
    b178:	4b 01       	movw	r8, r22
    b17a:	5c 01       	movw	r10, r24
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
	if ((ua < 0) || (ua > 1) || (ub < 0) || (ub > 1)) return 0;
    b17c:	20 e0       	ldi	r18, 0x00	; 0
    b17e:	30 e0       	ldi	r19, 0x00	; 0
    b180:	a9 01       	movw	r20, r18
    b182:	0e 94 fe 76 	call	0xedfc	; 0xedfc <__cmpsf2>
    b186:	87 fd       	sbrc	r24, 7
    b188:	42 c0       	rjmp	.+132    	; 0xb20e <LBLineIntersect+0x17c>
    b18a:	20 e0       	ldi	r18, 0x00	; 0
    b18c:	30 e0       	ldi	r19, 0x00	; 0
    b18e:	40 e8       	ldi	r20, 0x80	; 128
    b190:	5f e3       	ldi	r21, 0x3F	; 63
    b192:	c5 01       	movw	r24, r10
    b194:	b4 01       	movw	r22, r8
    b196:	0e 94 4d 78 	call	0xf09a	; 0xf09a <__gesf2>
    b19a:	18 16       	cp	r1, r24
    b19c:	c4 f1       	brlt	.+112    	; 0xb20e <LBLineIntersect+0x17c>
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
    b19e:	2e 9c       	mul	r2, r14
    b1a0:	b0 01       	movw	r22, r0
    b1a2:	2f 9c       	mul	r2, r15
    b1a4:	70 0d       	add	r23, r0
    b1a6:	3e 9c       	mul	r3, r14
    b1a8:	70 0d       	add	r23, r0
    b1aa:	11 24       	eor	r1, r1
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
    b1ac:	29 81       	ldd	r18, Y+1	; 0x01
    b1ae:	3a 81       	ldd	r19, Y+2	; 0x02
    b1b0:	8b 81       	ldd	r24, Y+3	; 0x03
    b1b2:	9c 81       	ldd	r25, Y+4	; 0x04
    b1b4:	28 1b       	sub	r18, r24
    b1b6:	39 0b       	sbc	r19, r25
    b1b8:	20 9f       	mul	r18, r16
    b1ba:	c0 01       	movw	r24, r0
    b1bc:	21 9f       	mul	r18, r17
    b1be:	90 0d       	add	r25, r0
    b1c0:	30 9f       	mul	r19, r16
    b1c2:	90 0d       	add	r25, r0
    b1c4:	11 24       	eor	r1, r1
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
    b1c6:	68 0f       	add	r22, r24
    b1c8:	79 1f       	adc	r23, r25
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
    b1ca:	88 27       	eor	r24, r24
    b1cc:	77 fd       	sbrc	r23, 7
    b1ce:	80 95       	com	r24
    b1d0:	98 2f       	mov	r25, r24
    b1d2:	0e 94 9d 77 	call	0xef3a	; 0xef3a <__floatsisf>
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
    b1d6:	a3 01       	movw	r20, r6
    b1d8:	92 01       	movw	r18, r4
    b1da:	0e 94 02 77 	call	0xee04	; 0xee04 <__divsf3>
    b1de:	6b 01       	movw	r12, r22
    b1e0:	7c 01       	movw	r14, r24
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
	if ((ua < 0) || (ua > 1) || (ub < 0) || (ub > 1)) return 0;
    b1e2:	20 e0       	ldi	r18, 0x00	; 0
    b1e4:	30 e0       	ldi	r19, 0x00	; 0
    b1e6:	a9 01       	movw	r20, r18
    b1e8:	0e 94 fe 76 	call	0xedfc	; 0xedfc <__cmpsf2>
    b1ec:	87 fd       	sbrc	r24, 7
    b1ee:	0f c0       	rjmp	.+30     	; 0xb20e <LBLineIntersect+0x17c>
    b1f0:	11 e0       	ldi	r17, 0x01	; 1
    b1f2:	20 e0       	ldi	r18, 0x00	; 0
    b1f4:	30 e0       	ldi	r19, 0x00	; 0
    b1f6:	40 e8       	ldi	r20, 0x80	; 128
    b1f8:	5f e3       	ldi	r21, 0x3F	; 63
    b1fa:	c7 01       	movw	r24, r14
    b1fc:	b6 01       	movw	r22, r12
    b1fe:	0e 94 4d 78 	call	0xf09a	; 0xf09a <__gesf2>
    b202:	18 16       	cp	r1, r24
    b204:	0c f0       	brlt	.+2      	; 0xb208 <LBLineIntersect+0x176>
    b206:	10 e0       	ldi	r17, 0x00	; 0
    b208:	81 e0       	ldi	r24, 0x01	; 1
    b20a:	81 27       	eor	r24, r17
    b20c:	01 c0       	rjmp	.+2      	; 0xb210 <LBLineIntersect+0x17e>
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;
    b20e:	80 e0       	ldi	r24, 0x00	; 0
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
	if ((ua < 0) || (ua > 1) || (ub < 0) || (ub > 1)) return 0;

	return 1;
}
    b210:	0f 90       	pop	r0
    b212:	0f 90       	pop	r0
    b214:	0f 90       	pop	r0
    b216:	0f 90       	pop	r0
    b218:	df 91       	pop	r29
    b21a:	cf 91       	pop	r28
    b21c:	1f 91       	pop	r17
    b21e:	0f 91       	pop	r16
    b220:	ff 90       	pop	r15
    b222:	ef 90       	pop	r14
    b224:	df 90       	pop	r13
    b226:	cf 90       	pop	r12
    b228:	bf 90       	pop	r11
    b22a:	af 90       	pop	r10
    b22c:	9f 90       	pop	r9
    b22e:	8f 90       	pop	r8
    b230:	7f 90       	pop	r7
    b232:	6f 90       	pop	r6
    b234:	5f 90       	pop	r5
    b236:	4f 90       	pop	r4
    b238:	3f 90       	pop	r3
    b23a:	2f 90       	pop	r2
    b23c:	08 95       	ret

0000b23e <LBRandom>:

int LBRandom(unsigned int from, unsigned int to)
/*
 * Return a random number between 'from' and 'to'.
 */
{
    b23e:	0f 93       	push	r16
    b240:	1f 93       	push	r17
    b242:	cf 93       	push	r28
    b244:	df 93       	push	r29
    b246:	8c 01       	movw	r16, r24
    b248:	eb 01       	movw	r28, r22
	static unsigned int random_seed = 0;
	if (random_seed == 0) random_seed = GetTrueRandomSeed();
    b24a:	80 91 3b 0b 	lds	r24, 0x0B3B
    b24e:	90 91 3c 0b 	lds	r25, 0x0B3C
    b252:	89 2b       	or	r24, r25
    b254:	31 f4       	brne	.+12     	; 0xb262 <LBRandom+0x24>
    b256:	0e 94 5a 48 	call	0x90b4	; 0x90b4 <GetTrueRandomSeed>
    b25a:	90 93 3c 0b 	sts	0x0B3C, r25
    b25e:	80 93 3b 0b 	sts	0x0B3B, r24
	
	static u8 shift_count = 0;
	unsigned int shifted = random_seed >> shift_count;
    b262:	90 91 3a 0b 	lds	r25, 0x0B3A
    b266:	20 91 3b 0b 	lds	r18, 0x0B3B
    b26a:	30 91 3c 0b 	lds	r19, 0x0B3C
    b26e:	09 2e       	mov	r0, r25
    b270:	02 c0       	rjmp	.+4      	; 0xb276 <LBRandom+0x38>
    b272:	36 95       	lsr	r19
    b274:	27 95       	ror	r18
    b276:	0a 94       	dec	r0
    b278:	e2 f7       	brpl	.-8      	; 0xb272 <LBRandom+0x34>
	unsigned int delta = to - from;
    b27a:	be 01       	movw	r22, r28
    b27c:	60 1b       	sub	r22, r16
    b27e:	71 0b       	sbc	r23, r17

	shift_count++;
    b280:	9f 5f       	subi	r25, 0xFF	; 255
	if (shift_count >= 16) shift_count = 0;
    b282:	90 31       	cpi	r25, 0x10	; 16
    b284:	18 f4       	brcc	.+6      	; 0xb28c <LBRandom+0x4e>
	
	static u8 shift_count = 0;
	unsigned int shifted = random_seed >> shift_count;
	unsigned int delta = to - from;

	shift_count++;
    b286:	90 93 3a 0b 	sts	0x0B3A, r25
    b28a:	02 c0       	rjmp	.+4      	; 0xb290 <LBRandom+0x52>
	if (shift_count >= 16) shift_count = 0;
    b28c:	10 92 3a 0b 	sts	0x0B3A, r1

	return from + ((delta + shifted) % delta);
    b290:	cb 01       	movw	r24, r22
    b292:	82 0f       	add	r24, r18
    b294:	93 1f       	adc	r25, r19
    b296:	0e 94 71 76 	call	0xece2	; 0xece2 <__udivmodhi4>
}
    b29a:	80 0f       	add	r24, r16
    b29c:	91 1f       	adc	r25, r17
    b29e:	df 91       	pop	r29
    b2a0:	cf 91       	pop	r28
    b2a2:	1f 91       	pop	r17
    b2a4:	0f 91       	pop	r16
    b2a6:	08 95       	ret

0000b2a8 <LBWaitSeconds>:

void LBWaitSeconds(u8 seconds)
{
    b2a8:	cf 93       	push	r28
    b2aa:	df 93       	push	r29
    b2ac:	d8 2f       	mov	r29, r24
	for(u8 i = 0; i < seconds; i++)
    b2ae:	c0 e0       	ldi	r28, 0x00	; 0
    b2b0:	cd 17       	cp	r28, r29
    b2b2:	31 f0       	breq	.+12     	; 0xb2c0 <LBWaitSeconds+0x18>
	{
		WaitUs(65535);
    b2b4:	8f ef       	ldi	r24, 0xFF	; 255
    b2b6:	9f ef       	ldi	r25, 0xFF	; 255
    b2b8:	0e 94 18 48 	call	0x9030	; 0x9030 <WaitUs>
	return from + ((delta + shifted) % delta);
}

void LBWaitSeconds(u8 seconds)
{
	for(u8 i = 0; i < seconds; i++)
    b2bc:	cf 5f       	subi	r28, 0xFF	; 255
    b2be:	f8 cf       	rjmp	.-16     	; 0xb2b0 <LBWaitSeconds+0x8>
	{
		WaitUs(65535);
	}
}
    b2c0:	df 91       	pop	r29
    b2c2:	cf 91       	pop	r28
    b2c4:	08 95       	ret

0000b2c6 <init_scores>:
};

/* Initializers */
void init_scores(struct EepromBlockStruct* e)
{
    e->id = EEPROM_TANK_RANK_ID;
    b2c6:	2b e8       	ldi	r18, 0x8B	; 139
    b2c8:	30 e0       	ldi	r19, 0x00	; 0
    b2ca:	fc 01       	movw	r30, r24
    b2cc:	21 93       	st	Z+, r18
    b2ce:	31 93       	st	Z+, r19
    b2d0:	cf 01       	movw	r24, r30
    memcpy_P(e->data, default_scores, 30);
    b2d2:	4e e1       	ldi	r20, 0x1E	; 30
    b2d4:	50 e0       	ldi	r21, 0x00	; 0
    b2d6:	6f e2       	ldi	r22, 0x2F	; 47
    b2d8:	79 e0       	ldi	r23, 0x09	; 9
    b2da:	0c 94 b4 78 	jmp	0xf168	; 0xf168 <memcpy_P>

0000b2de <init_handles>:
}

void init_handles(struct EepromBlockStruct* e)
{
    e->id = EEPROM_HANDLES_ID;
    b2de:	2a e8       	ldi	r18, 0x8A	; 138
    b2e0:	30 e0       	ldi	r19, 0x00	; 0
    b2e2:	fc 01       	movw	r30, r24
    b2e4:	21 93       	st	Z+, r18
    b2e6:	31 93       	st	Z+, r19
    b2e8:	cf 01       	movw	r24, r30
    memcpy_P(e->data, default_handles, 30);
    b2ea:	4e e1       	ldi	r20, 0x1E	; 30
    b2ec:	50 e0       	ldi	r21, 0x00	; 0
    b2ee:	6d e4       	ldi	r22, 0x4D	; 77
    b2f0:	79 e0       	ldi	r23, 0x09	; 9
    b2f2:	0c 94 b4 78 	jmp	0xf168	; 0xf168 <memcpy_P>

0000b2f6 <init_tile_animations>:
}

void init_tile_animations(TileAnimations* ta)
{
    b2f6:	fc 01       	movw	r30, r24
	ta->next_available = 0;
    b2f8:	10 82       	st	Z, r1
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		ta->anims[i].tile_index = 0;
    b2fa:	16 86       	std	Z+14, r1	; 0x0e
    b2fc:	15 86       	std	Z+13, r1	; 0x0d
		ta->anims[i].anim.current_anim = 0;
    b2fe:	11 82       	std	Z+1, r1	; 0x01
		ta->anims[i].anim.anim_count = 3;
    b300:	73 e0       	ldi	r23, 0x03	; 3
    b302:	72 83       	std	Z+2, r23	; 0x02
		ta->anims[i].anim.frames_per_anim = FRAMES_PER_ANIM;
    b304:	65 e0       	ldi	r22, 0x05	; 5
    b306:	63 83       	std	Z+3, r22	; 0x03
		ta->anims[i].anim.frame_count = 0;
    b308:	14 82       	std	Z+4, r1	; 0x04
		ta->anims[i].anim.looped = 0;
    b30a:	15 82       	std	Z+5, r1	; 0x05
		ta->anims[i].anim.reversing = 0;
    b30c:	16 82       	std	Z+6, r1	; 0x06
		ta->anims[i].anim.anims[0] = (char*)map_tile_exp_0;
    b30e:	40 e0       	ldi	r20, 0x00	; 0
    b310:	56 e8       	ldi	r21, 0x86	; 134
    b312:	50 87       	std	Z+8, r21	; 0x08
    b314:	47 83       	std	Z+7, r20	; 0x07
		ta->anims[i].anim.anims[1] = (char*)map_tile_exp_1;
    b316:	2d ef       	ldi	r18, 0xFD	; 253
    b318:	35 e8       	ldi	r19, 0x85	; 133
    b31a:	32 87       	std	Z+10, r19	; 0x0a
    b31c:	21 87       	std	Z+9, r18	; 0x09
		ta->anims[i].anim.anims[2] = (char*)map_tile_exp_2;
    b31e:	8a ef       	ldi	r24, 0xFA	; 250
    b320:	95 e8       	ldi	r25, 0x85	; 133
    b322:	94 87       	std	Z+12, r25	; 0x0c
    b324:	83 87       	std	Z+11, r24	; 0x0b
void init_tile_animations(TileAnimations* ta)
{
	ta->next_available = 0;
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		ta->anims[i].tile_index = 0;
    b326:	14 8e       	std	Z+28, r1	; 0x1c
    b328:	13 8e       	std	Z+27, r1	; 0x1b
		ta->anims[i].anim.current_anim = 0;
    b32a:	17 86       	std	Z+15, r1	; 0x0f
		ta->anims[i].anim.anim_count = 3;
    b32c:	70 8b       	std	Z+16, r23	; 0x10
		ta->anims[i].anim.frames_per_anim = FRAMES_PER_ANIM;
    b32e:	61 8b       	std	Z+17, r22	; 0x11
		ta->anims[i].anim.frame_count = 0;
    b330:	12 8a       	std	Z+18, r1	; 0x12
		ta->anims[i].anim.looped = 0;
    b332:	13 8a       	std	Z+19, r1	; 0x13
		ta->anims[i].anim.reversing = 0;
    b334:	14 8a       	std	Z+20, r1	; 0x14
		ta->anims[i].anim.anims[0] = (char*)map_tile_exp_0;
    b336:	56 8b       	std	Z+22, r21	; 0x16
    b338:	45 8b       	std	Z+21, r20	; 0x15
		ta->anims[i].anim.anims[1] = (char*)map_tile_exp_1;
    b33a:	30 8f       	std	Z+24, r19	; 0x18
    b33c:	27 8b       	std	Z+23, r18	; 0x17
		ta->anims[i].anim.anims[2] = (char*)map_tile_exp_2;
    b33e:	92 8f       	std	Z+26, r25	; 0x1a
    b340:	81 8f       	std	Z+25, r24	; 0x19
    b342:	08 95       	ret

0000b344 <init_scope_animation>:
	}
}

void init_scope_animation(TileAnimation* ta)
{
    b344:	fc 01       	movw	r30, r24
	ta->tile_index = 0;
    b346:	15 86       	std	Z+13, r1	; 0x0d
    b348:	14 86       	std	Z+12, r1	; 0x0c
	ta->anim.current_anim = 0;
    b34a:	10 82       	st	Z, r1
	ta->anim.anim_count = 3;
    b34c:	83 e0       	ldi	r24, 0x03	; 3
    b34e:	81 83       	std	Z+1, r24	; 0x01
	ta->anim.frames_per_anim = FRAMES_PER_SCOPE;
    b350:	8e e1       	ldi	r24, 0x1E	; 30
    b352:	82 83       	std	Z+2, r24	; 0x02
	ta->anim.frame_count = 0;
    b354:	13 82       	std	Z+3, r1	; 0x03
	ta->anim.looped = 0;
    b356:	14 82       	std	Z+4, r1	; 0x04
	ta->anim.reversing = 0;
    b358:	15 82       	std	Z+5, r1	; 0x05
	ta->anim.anims[0] = (char*)map_scope_0;
    b35a:	86 ed       	ldi	r24, 0xD6	; 214
    b35c:	95 e8       	ldi	r25, 0x85	; 133
    b35e:	97 83       	std	Z+7, r25	; 0x07
    b360:	86 83       	std	Z+6, r24	; 0x06
	ta->anim.anims[1] = (char*)map_scope_1;
    b362:	83 ed       	ldi	r24, 0xD3	; 211
    b364:	95 e8       	ldi	r25, 0x85	; 133
    b366:	91 87       	std	Z+9, r25	; 0x09
    b368:	80 87       	std	Z+8, r24	; 0x08
	ta->anim.anims[2] = (char*)map_scope_2;
    b36a:	80 ed       	ldi	r24, 0xD0	; 208
    b36c:	95 e8       	ldi	r25, 0x85	; 133
    b36e:	93 87       	std	Z+11, r25	; 0x0b
    b370:	82 87       	std	Z+10, r24	; 0x0a
    b372:	08 95       	ret

0000b374 <init_sub_animation>:
}

void init_sub_animation(TileAnimation* ta)
{
    b374:	fc 01       	movw	r30, r24
	ta->tile_index = 0;
    b376:	15 86       	std	Z+13, r1	; 0x0d
    b378:	14 86       	std	Z+12, r1	; 0x0c
	ta->anim.current_anim = 0;
    b37a:	10 82       	st	Z, r1
	ta->anim.anim_count = 2;
    b37c:	82 e0       	ldi	r24, 0x02	; 2
    b37e:	81 83       	std	Z+1, r24	; 0x01
	ta->anim.frames_per_anim = FRAMES_PER_SUB;
    b380:	8c e3       	ldi	r24, 0x3C	; 60
    b382:	82 83       	std	Z+2, r24	; 0x02
	ta->anim.frame_count = 0;
    b384:	13 82       	std	Z+3, r1	; 0x03
	ta->anim.looped = 0;
    b386:	14 82       	std	Z+4, r1	; 0x04
	ta->anim.reversing = 0;
    b388:	15 82       	std	Z+5, r1	; 0x05
	ta->anim.anims[0] = (char*)map_sub_emerging;
    b38a:	84 e6       	ldi	r24, 0x64	; 100
    b38c:	93 e8       	ldi	r25, 0x83	; 131
    b38e:	97 83       	std	Z+7, r25	; 0x07
    b390:	86 83       	std	Z+6, r24	; 0x06
	ta->anim.anims[1] = (char*)map_sub;
    b392:	8a e9       	ldi	r24, 0x9A	; 154
    b394:	94 e8       	ldi	r25, 0x84	; 132
    b396:	91 87       	std	Z+9, r25	; 0x09
    b398:	80 87       	std	Z+8, r24	; 0x08
    b39a:	08 95       	ret

0000b39c <init_shot_state>:
}

void init_shot_state(Shot* s, u8 shot_type)
{
    b39c:	fc 01       	movw	r30, r24
	s->shared.speed = SHOT_SPEED;
    b39e:	88 e7       	ldi	r24, 0x78	; 120
    b3a0:	81 83       	std	Z+1, r24	; 0x01
	s->shared.direction = D_UP;
    b3a2:	10 82       	st	Z, r1
	s->shared.recoiled = 0;
    b3a4:	12 82       	std	Z+2, r1	; 0x02
	s->active = 0;
    b3a6:	16 86       	std	Z+14, r1	; 0x0e
	s->distance = 0;
    b3a8:	17 86       	std	Z+15, r1	; 0x0f
	s->shot_type = shot_type;
    b3aa:	63 87       	std	Z+11, r22	; 0x0b
	s->rebounds = SHOT_REBOUNDS;
    b3ac:	84 e0       	ldi	r24, 0x04	; 4
    b3ae:	85 87       	std	Z+13, r24	; 0x0d
	s->hit_count = (shot_type == BASIC_SHOT) ? BASIC_SHOT_HIT_COUNT : ROCKET_SHOT_HIT_COUNT;
    b3b0:	66 23       	and	r22, r22
    b3b2:	11 f0       	breq	.+4      	; 0xb3b8 <init_shot_state+0x1c>
    b3b4:	85 e0       	ldi	r24, 0x05	; 5
    b3b6:	01 c0       	rjmp	.+2      	; 0xb3ba <init_shot_state+0x1e>
    b3b8:	81 e0       	ldi	r24, 0x01	; 1
    b3ba:	84 87       	std	Z+12, r24	; 0x0c
	s->shared.x = OFF_SCREEN;
    b3bc:	80 e0       	ldi	r24, 0x00	; 0
    b3be:	90 e0       	ldi	r25, 0x00	; 0
    b3c0:	a0 e7       	ldi	r26, 0x70	; 112
    b3c2:	b3 e4       	ldi	r27, 0x43	; 67
    b3c4:	83 83       	std	Z+3, r24	; 0x03
    b3c6:	94 83       	std	Z+4, r25	; 0x04
    b3c8:	a5 83       	std	Z+5, r26	; 0x05
    b3ca:	b6 83       	std	Z+6, r27	; 0x06
	s->shared.y = 0;
    b3cc:	17 82       	std	Z+7, r1	; 0x07
    b3ce:	10 86       	std	Z+8, r1	; 0x08
    b3d0:	11 86       	std	Z+9, r1	; 0x09
    b3d2:	12 86       	std	Z+10, r1	; 0x0a
    b3d4:	08 95       	ret

0000b3d6 <set_shot_animations>:
}

void set_shot_animations(Shot* s, u8 shot_type)
{
    b3d6:	fc 01       	movw	r30, r24
	s->up_anim.current_anim = 0;
    b3d8:	10 8a       	std	Z+16, r1	; 0x10
	s->up_anim.anim_count = 2;
    b3da:	82 e0       	ldi	r24, 0x02	; 2
    b3dc:	81 8b       	std	Z+17, r24	; 0x11
	s->up_anim.frames_per_anim = FRAMES_PER_ANIM;
    b3de:	85 e0       	ldi	r24, 0x05	; 5
    b3e0:	82 8b       	std	Z+18, r24	; 0x12
	s->up_anim.frame_count = 0;
    b3e2:	13 8a       	std	Z+19, r1	; 0x13
	s->up_anim.looped = 0;
    b3e4:	14 8a       	std	Z+20, r1	; 0x14
	s->up_anim.reversing = 0;
    b3e6:	15 8a       	std	Z+21, r1	; 0x15
	if (shot_type == BASIC_SHOT)
    b3e8:	61 11       	cpse	r22, r1
    b3ea:	03 c0       	rjmp	.+6      	; 0xb3f2 <set_shot_animations+0x1c>
	{
		s->up_anim.anims[0] = (char*) map_ball;
    b3ec:	8e e6       	ldi	r24, 0x6E	; 110
    b3ee:	9c e4       	ldi	r25, 0x4C	; 76
    b3f0:	13 c0       	rjmp	.+38     	; 0xb418 <set_shot_animations+0x42>
		s->up_anim.anims[1] = (char*) map_ball;
		s->right_anim.anims[0] = (char*) map_ball;
		s->right_anim.anims[1] = (char*) map_ball;
	}
	else if (shot_type == ROCKET_SHOT)
    b3f2:	61 30       	cpi	r22, 0x01	; 1
    b3f4:	79 f4       	brne	.+30     	; 0xb414 <set_shot_animations+0x3e>
	{
		s->up_anim.anims[0] = (char*) map_rocket_up_0;
    b3f6:	8b e6       	ldi	r24, 0x6B	; 107
    b3f8:	9c e4       	ldi	r25, 0x4C	; 76
    b3fa:	97 8b       	std	Z+23, r25	; 0x17
    b3fc:	86 8b       	std	Z+22, r24	; 0x16
		s->up_anim.anims[1] = (char*) map_rocket_up_1;
    b3fe:	88 e6       	ldi	r24, 0x68	; 104
    b400:	9c e4       	ldi	r25, 0x4C	; 76
    b402:	91 8f       	std	Z+25, r25	; 0x19
    b404:	80 8f       	std	Z+24, r24	; 0x18
		s->right_anim.anims[0] = (char*) map_rocket_right_0;
    b406:	85 e6       	ldi	r24, 0x65	; 101
    b408:	9c e4       	ldi	r25, 0x4C	; 76
    b40a:	93 a3       	std	Z+35, r25	; 0x23
    b40c:	82 a3       	std	Z+34, r24	; 0x22
		s->right_anim.anims[1] = (char*) map_rocket_right_1;
    b40e:	82 e6       	ldi	r24, 0x62	; 98
    b410:	9c e4       	ldi	r25, 0x4C	; 76
    b412:	08 c0       	rjmp	.+16     	; 0xb424 <set_shot_animations+0x4e>
	}
	else
	{
		s->up_anim.anims[0] = (char*) map_sub_shot;
    b414:	86 e5       	ldi	r24, 0x56	; 86
    b416:	9c e4       	ldi	r25, 0x4C	; 76
    b418:	97 8b       	std	Z+23, r25	; 0x17
    b41a:	86 8b       	std	Z+22, r24	; 0x16
		s->up_anim.anims[1] = (char*) map_sub_shot;
    b41c:	91 8f       	std	Z+25, r25	; 0x19
    b41e:	80 8f       	std	Z+24, r24	; 0x18
		s->right_anim.anims[0] = (char*) map_sub_shot;
    b420:	93 a3       	std	Z+35, r25	; 0x23
    b422:	82 a3       	std	Z+34, r24	; 0x22
		s->right_anim.anims[1] = (char*) map_sub_shot;
    b424:	95 a3       	std	Z+37, r25	; 0x25
    b426:	84 a3       	std	Z+36, r24	; 0x24
	}
	s->up_anim.current_anim = 0;
    b428:	10 8a       	std	Z+16, r1	; 0x10
	s->right_anim.anim_count = 2;
    b42a:	82 e0       	ldi	r24, 0x02	; 2
    b42c:	85 8f       	std	Z+29, r24	; 0x1d
	s->right_anim.frames_per_anim = FRAMES_PER_ANIM;
    b42e:	85 e0       	ldi	r24, 0x05	; 5
    b430:	86 8f       	std	Z+30, r24	; 0x1e
	s->right_anim.frame_count = 0;
    b432:	17 8e       	std	Z+31, r1	; 0x1f
	s->right_anim.looped = 0;
    b434:	10 a2       	std	Z+32, r1	; 0x20
	s->right_anim.reversing = 0;
    b436:	11 a2       	std	Z+33, r1	; 0x21
    b438:	08 95       	ret

0000b43a <init_turret>:
}

void init_turret(Turret* t, float x, float y)
{
    b43a:	0f 93       	push	r16
    b43c:	1f 93       	push	r17
    b43e:	fc 01       	movw	r30, r24
	t->lives = BOSS_TURRET_LIVES;
    b440:	85 e0       	ldi	r24, 0x05	; 5
    b442:	83 87       	std	Z+11, r24	; 0x0b
	t->shared.direction = D_LEFT;
    b444:	83 e0       	ldi	r24, 0x03	; 3
    b446:	80 83       	st	Z, r24
	t->shared.recoiled = 0;
    b448:	12 82       	std	Z+2, r1	; 0x02
	t->shared.speed = BOSS_TURRET_SPEED;
    b44a:	8a e5       	ldi	r24, 0x5A	; 90
    b44c:	81 83       	std	Z+1, r24	; 0x01
	t->shared.x = x;
    b44e:	43 83       	std	Z+3, r20	; 0x03
    b450:	54 83       	std	Z+4, r21	; 0x04
    b452:	65 83       	std	Z+5, r22	; 0x05
    b454:	76 83       	std	Z+6, r23	; 0x06
	t->shared.y = y;
    b456:	07 83       	std	Z+7, r16	; 0x07
    b458:	10 87       	std	Z+8, r17	; 0x08
    b45a:	21 87       	std	Z+9, r18	; 0x09
    b45c:	32 87       	std	Z+10, r19	; 0x0a
	
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		t->shot[i].shared.speed = BOSS_TURRET_SHOT_SPEED;
    b45e:	8a ef       	ldi	r24, 0xFA	; 250
    b460:	85 87       	std	Z+13, r24	; 0x0d
		t->shot[i].shared.direction = D_DOWN;
    b462:	82 e0       	ldi	r24, 0x02	; 2
    b464:	84 87       	std	Z+12, r24	; 0x0c
		t->shot[i].shared.recoiled = 0;
    b466:	16 86       	std	Z+14, r1	; 0x0e
		t->shot[i].shared.x = OFF_SCREEN;
    b468:	40 e0       	ldi	r20, 0x00	; 0
    b46a:	50 e0       	ldi	r21, 0x00	; 0
    b46c:	60 e7       	ldi	r22, 0x70	; 112
    b46e:	73 e4       	ldi	r23, 0x43	; 67
    b470:	47 87       	std	Z+15, r20	; 0x0f
    b472:	50 8b       	std	Z+16, r21	; 0x10
    b474:	61 8b       	std	Z+17, r22	; 0x11
    b476:	72 8b       	std	Z+18, r23	; 0x12
		t->shot[i].shared.y = 0;
    b478:	13 8a       	std	Z+19, r1	; 0x13
    b47a:	14 8a       	std	Z+20, r1	; 0x14
    b47c:	15 8a       	std	Z+21, r1	; 0x15
    b47e:	16 8a       	std	Z+22, r1	; 0x16
		t->shot[i].active = 0;
    b480:	12 8e       	std	Z+26, r1	; 0x1a
		t->shot[i].distance = 100;
    b482:	94 e6       	ldi	r25, 0x64	; 100
    b484:	93 8f       	std	Z+27, r25	; 0x1b
		t->shot[i].shot_type = BOSS_TURRET_SHOT;
    b486:	87 8b       	std	Z+23, r24	; 0x17
		t->shot[i].rebounds = SHOT_REBOUNDS;
    b488:	84 e0       	ldi	r24, 0x04	; 4
    b48a:	81 8f       	std	Z+25, r24	; 0x19
		t->shot[i].hit_count = BOSS_TURRET_SHOT_HIT_COUNT;
    b48c:	81 e0       	ldi	r24, 0x01	; 1
    b48e:	80 8f       	std	Z+24, r24	; 0x18
		set_shot_animations(&t->shot[i], BOSS_TURRET_SHOT);
    b490:	62 e0       	ldi	r22, 0x02	; 2
    b492:	cf 01       	movw	r24, r30
    b494:	0c 96       	adiw	r24, 0x0c	; 12
	}
}
    b496:	1f 91       	pop	r17
    b498:	0f 91       	pop	r16
		t->shot[i].active = 0;
		t->shot[i].distance = 100;
		t->shot[i].shot_type = BOSS_TURRET_SHOT;
		t->shot[i].rebounds = SHOT_REBOUNDS;
		t->shot[i].hit_count = BOSS_TURRET_SHOT_HIT_COUNT;
		set_shot_animations(&t->shot[i], BOSS_TURRET_SHOT);
    b49a:	0c 94 eb 59 	jmp	0xb3d6	; 0xb3d6 <set_shot_animations>

0000b49e <init_player>:
	}
}

void init_player(Player* p, const char* map_tank_up_0, const char* map_tank_right_0)
{
    b49e:	0f 93       	push	r16
    b4a0:	1f 93       	push	r17
    b4a2:	cf 93       	push	r28
    b4a4:	df 93       	push	r29
    b4a6:	ec 01       	movw	r28, r24
	p->banter_frame = FRAMES_PER_BANTER;
    b4a8:	8a e5       	ldi	r24, 0x5A	; 90
    b4aa:	8d 8b       	std	Y+21, r24	; 0x15
	p->grace_frame = FRAMES_PER_GRACE;
    b4ac:	88 e7       	ldi	r24, 0x78	; 120
    b4ae:	8f 8b       	std	Y+23, r24	; 0x17
	p->banter_index = 0;
    b4b0:	1e 8a       	std	Y+22, r1	; 0x16
	p->score = 0;
    b4b2:	1f 86       	std	Y+15, r1	; 0x0f
	p->level_score = 0;
    b4b4:	18 8a       	std	Y+16, r1	; 0x10
	p->shared.direction = D_UP;
    b4b6:	18 82       	st	Y, r1
	p->shared.speed = 0;
    b4b8:	19 82       	std	Y+1, r1	; 0x01
	p->shared.recoiled = 0;
    b4ba:	1a 82       	std	Y+2, r1	; 0x02
	p->max_speed = MAX_SPEED;
    b4bc:	82 e3       	ldi	r24, 0x32	; 50
    b4be:	88 8f       	std	Y+24, r24	; 0x18
	p->has_over_speed = false;
    b4c0:	1a 8e       	std	Y+26, r1	; 0x1a
	p->has_rocket = false;
    b4c2:	19 8e       	std	Y+25, r1	; 0x19
	p->flags = 0;
    b4c4:	1c 8a       	std	Y+20, r1	; 0x14

	/* Tracks animation (Up) */
	p->up_anim.current_anim = 0;
    b4c6:	fe 01       	movw	r30, r28
    b4c8:	ec 5a       	subi	r30, 0xAC	; 172
    b4ca:	ff 4f       	sbci	r31, 0xFF	; 255
    b4cc:	10 82       	st	Z, r1
	p->up_anim.anim_count = 1;
    b4ce:	31 96       	adiw	r30, 0x01	; 1
    b4d0:	91 e0       	ldi	r25, 0x01	; 1
    b4d2:	90 83       	st	Z, r25
	p->up_anim.frames_per_anim = FRAMES_PER_ANIM;
    b4d4:	31 96       	adiw	r30, 0x01	; 1
    b4d6:	85 e0       	ldi	r24, 0x05	; 5
    b4d8:	80 83       	st	Z, r24
	p->up_anim.frame_count = 0;
    b4da:	31 96       	adiw	r30, 0x01	; 1
    b4dc:	10 82       	st	Z, r1
	p->up_anim.looped = 0;
    b4de:	31 96       	adiw	r30, 0x01	; 1
    b4e0:	10 82       	st	Z, r1
	p->up_anim.reversing = 0;
    b4e2:	31 96       	adiw	r30, 0x01	; 1
    b4e4:	10 82       	st	Z, r1
	p->up_anim.anims[0] = (char*)map_tank_up_0;
    b4e6:	31 96       	adiw	r30, 0x01	; 1
    b4e8:	71 83       	std	Z+1, r23	; 0x01
    b4ea:	60 83       	st	Z, r22

	/* Tracks animation (Down) */
	p->right_anim.current_anim = 0;
    b4ec:	36 96       	adiw	r30, 0x06	; 6
    b4ee:	10 82       	st	Z, r1
	p->right_anim.anim_count = 1;
    b4f0:	31 96       	adiw	r30, 0x01	; 1
    b4f2:	90 83       	st	Z, r25
	p->right_anim.frames_per_anim = FRAMES_PER_ANIM;
    b4f4:	31 96       	adiw	r30, 0x01	; 1
    b4f6:	80 83       	st	Z, r24
	p->right_anim.frame_count = 0;
    b4f8:	31 96       	adiw	r30, 0x01	; 1
    b4fa:	10 82       	st	Z, r1
	p->right_anim.looped = 0;
    b4fc:	31 96       	adiw	r30, 0x01	; 1
    b4fe:	10 82       	st	Z, r1
	p->right_anim.reversing = 0;
    b500:	31 96       	adiw	r30, 0x01	; 1
    b502:	10 82       	st	Z, r1
	p->right_anim.anims[0] = (char*)map_tank_right_0;
    b504:	31 96       	adiw	r30, 0x01	; 1
    b506:	51 83       	std	Z+1, r21	; 0x01
    b508:	40 83       	st	Z, r20

	/* Explosion Animation */
	p->exp_anim.current_anim = 0;
    b50a:	36 96       	adiw	r30, 0x06	; 6
    b50c:	10 82       	st	Z, r1
	p->exp_anim.anim_count = 3;
    b50e:	31 96       	adiw	r30, 0x01	; 1
    b510:	93 e0       	ldi	r25, 0x03	; 3
    b512:	90 83       	st	Z, r25
	p->exp_anim.frames_per_anim = FRAMES_PER_ANIM;
    b514:	31 96       	adiw	r30, 0x01	; 1
    b516:	80 83       	st	Z, r24
	p->exp_anim.frame_count = 0;
    b518:	31 96       	adiw	r30, 0x01	; 1
    b51a:	10 82       	st	Z, r1
	p->exp_anim.looped = 0;
    b51c:	31 96       	adiw	r30, 0x01	; 1
    b51e:	10 82       	st	Z, r1
	p->exp_anim.reversing = 0;
    b520:	31 96       	adiw	r30, 0x01	; 1
    b522:	10 82       	st	Z, r1
	p->exp_anim.anims[0] = (char*)map_explosion_0;
    b524:	31 96       	adiw	r30, 0x01	; 1
    b526:	8d e7       	ldi	r24, 0x7D	; 125
    b528:	9c e4       	ldi	r25, 0x4C	; 76
    b52a:	91 83       	std	Z+1, r25	; 0x01
    b52c:	80 83       	st	Z, r24
	p->exp_anim.anims[1] = (char*)map_explosion_1;
    b52e:	32 96       	adiw	r30, 0x02	; 2
    b530:	87 e7       	ldi	r24, 0x77	; 119
    b532:	9c e4       	ldi	r25, 0x4C	; 76
    b534:	91 83       	std	Z+1, r25	; 0x01
    b536:	80 83       	st	Z, r24
	p->exp_anim.anims[2] = (char*)map_explosion_2;
    b538:	32 96       	adiw	r30, 0x02	; 2
    b53a:	81 e7       	ldi	r24, 0x71	; 113
    b53c:	9c e4       	ldi	r25, 0x4C	; 76
    b53e:	91 83       	std	Z+1, r25	; 0x01
    b540:	80 83       	st	Z, r24

	/* Shot */
	p->active_shots = 0;
    b542:	19 8a       	std	Y+17, r1	; 0x11
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		init_shot_state(&p->shot[i], BASIC_SHOT);
    b544:	8e 01       	movw	r16, r28
    b546:	04 5d       	subi	r16, 0xD4	; 212
    b548:	1f 4f       	sbci	r17, 0xFF	; 255
    b54a:	60 e0       	ldi	r22, 0x00	; 0
    b54c:	c8 01       	movw	r24, r16
    b54e:	0e 94 ce 59 	call	0xb39c	; 0xb39c <init_shot_state>
		set_shot_animations(&p->shot[i], BASIC_SHOT);
    b552:	60 e0       	ldi	r22, 0x00	; 0
    b554:	c8 01       	movw	r24, r16
    b556:	0e 94 eb 59 	call	0xb3d6	; 0xb3d6 <set_shot_animations>
	}
	
	/* pathfinding variables */
	p->feeling_my_way = 0;
    b55a:	1b 8e       	std	Y+27, r1	; 0x1b
	p->goal_direction = 0;
    b55c:	1d 8e       	std	Y+29, r1	; 0x1d
    b55e:	1c 8e       	std	Y+28, r1	; 0x1c
	p->goal = 0;
    b560:	1a a2       	std	Y+34, r1	; 0x22
	p->goal_reached = 0;
    b562:	1b a2       	std	Y+35, r1	; 0x23
	p->old_x = 0;
    b564:	1c a2       	std	Y+36, r1	; 0x24
    b566:	1d a2       	std	Y+37, r1	; 0x25
    b568:	1e a2       	std	Y+38, r1	; 0x26
    b56a:	1f a2       	std	Y+39, r1	; 0x27
	p->old_y = 0;
    b56c:	18 a6       	std	Y+40, r1	; 0x28
    b56e:	19 a6       	std	Y+41, r1	; 0x29
    b570:	1a a6       	std	Y+42, r1	; 0x2a
    b572:	1b a6       	std	Y+43, r1	; 0x2b
	p->deadlock_count_x = 0;
    b574:	1f 8e       	std	Y+31, r1	; 0x1f
    b576:	1e 8e       	std	Y+30, r1	; 0x1e
	p->deadlock_count_y = 0;
    b578:	19 a2       	std	Y+33, r1	; 0x21
    b57a:	18 a2       	std	Y+32, r1	; 0x20
}
    b57c:	df 91       	pop	r29
    b57e:	cf 91       	pop	r28
    b580:	1f 91       	pop	r17
    b582:	0f 91       	pop	r16
    b584:	08 95       	ret

0000b586 <player_init_shot_state>:

void player_init_shot_state(Player* player)
{
	player->active_shots = 0;
    b586:	fc 01       	movw	r30, r24
    b588:	11 8a       	std	Z+17, r1	; 0x11
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		init_shot_state(&player->shot[i], BASIC_SHOT);
    b58a:	60 e0       	ldi	r22, 0x00	; 0
    b58c:	8c 96       	adiw	r24, 0x2c	; 44
    b58e:	0c 94 ce 59 	jmp	0xb39c	; 0xb39c <init_shot_state>

0000b592 <init_game_state>:
	}
}

void init_game_state()
{
	game.current_level = 0;
    b592:	e2 e1       	ldi	r30, 0x12	; 18
    b594:	fc e0       	ldi	r31, 0x0C	; 12
    b596:	11 82       	std	Z+1, r1	; 0x01
	game.selection = PVCPU;
    b598:	14 86       	std	Z+12, r1	; 0x0c
	game.paused = 0;
    b59a:	12 82       	std	Z+2, r1	; 0x02
	game.scope_counter = 0;
    b59c:	13 86       	std	Z+11, r1	; 0x0b
    b59e:	12 86       	std	Z+10, r1	; 0x0a
	game.boss_fight_status = 0;
    b5a0:	13 82       	std	Z+3, r1	; 0x03
	game.boss_fight_player = 0;
    b5a2:	17 82       	std	Z+7, r1	; 0x07
    b5a4:	16 82       	std	Z+6, r1	; 0x06
	game.boss_fight_joypad = 0;
    b5a6:	11 86       	std	Z+9, r1	; 0x09
    b5a8:	10 86       	std	Z+8, r1	; 0x08
	game.boss_fight_player_lives = BOSS_FIGHT_PLAYER_LIVES;
    b5aa:	82 e0       	ldi	r24, 0x02	; 2
    b5ac:	85 83       	std	Z+5, r24	; 0x05
	game.boss_fight_player_hud = 0;
    b5ae:	14 82       	std	Z+4, r1	; 0x04
	init_player(&player1, map_tank1_up_0, map_tank1_right_0);
    b5b0:	4f e8       	ldi	r20, 0x8F	; 143
    b5b2:	5c e4       	ldi	r21, 0x4C	; 76
    b5b4:	65 e9       	ldi	r22, 0x95	; 149
    b5b6:	7c e4       	ldi	r23, 0x4C	; 76
    b5b8:	8c e3       	ldi	r24, 0x3C	; 60
    b5ba:	9c e0       	ldi	r25, 0x0C	; 12
    b5bc:	0e 94 4f 5a 	call	0xb49e	; 0xb49e <init_player>
	init_player(&player2, map_tank2_up_0, map_tank2_right_0);
    b5c0:	43 e8       	ldi	r20, 0x83	; 131
    b5c2:	5c e4       	ldi	r21, 0x4C	; 76
    b5c4:	69 e8       	ldi	r22, 0x89	; 137
    b5c6:	7c e4       	ldi	r23, 0x4C	; 76
    b5c8:	8a ea       	ldi	r24, 0xAA	; 170
    b5ca:	9f e0       	ldi	r25, 0x0F	; 15
    b5cc:	0c 94 4f 5a 	jmp	0xb49e	; 0xb49e <init_player>

0000b5d0 <player_spawn>:
}

/* Utilities */
void player_spawn(Player* player)
{
    b5d0:	cf 93       	push	r28
    b5d2:	df 93       	push	r29
    b5d4:	ec 01       	movw	r28, r24
	player->grace_frame = 0;
    b5d6:	1f 8a       	std	Y+23, r1	; 0x17
	player->shared.x = player->spawn_x;
    b5d8:	6a 89       	ldd	r22, Y+18	; 0x12
    b5da:	70 e0       	ldi	r23, 0x00	; 0
    b5dc:	80 e0       	ldi	r24, 0x00	; 0
    b5de:	90 e0       	ldi	r25, 0x00	; 0
    b5e0:	0e 94 9b 77 	call	0xef36	; 0xef36 <__floatunsisf>
    b5e4:	6b 83       	std	Y+3, r22	; 0x03
    b5e6:	7c 83       	std	Y+4, r23	; 0x04
    b5e8:	8d 83       	std	Y+5, r24	; 0x05
    b5ea:	9e 83       	std	Y+6, r25	; 0x06
	player->shared.y = player->spawn_y;
    b5ec:	6b 89       	ldd	r22, Y+19	; 0x13
    b5ee:	70 e0       	ldi	r23, 0x00	; 0
    b5f0:	80 e0       	ldi	r24, 0x00	; 0
    b5f2:	90 e0       	ldi	r25, 0x00	; 0
    b5f4:	0e 94 9b 77 	call	0xef36	; 0xef36 <__floatunsisf>
    b5f8:	6f 83       	std	Y+7, r22	; 0x07
    b5fa:	78 87       	std	Y+8, r23	; 0x08
    b5fc:	89 87       	std	Y+9, r24	; 0x09
    b5fe:	9a 87       	std	Y+10, r25	; 0x0a
	player->shared.direction = D_UP;
    b600:	18 82       	st	Y, r1
	player->shared.speed = 0;
    b602:	19 82       	std	Y+1, r1	; 0x01
	player->shared.recoiled = 0;
    b604:	1a 82       	std	Y+2, r1	; 0x02
	
}
    b606:	df 91       	pop	r29
    b608:	cf 91       	pop	r28
    b60a:	08 95       	ret

0000b60c <load_eeprom>:
 *  0x01 = EEPROM_ERROR_INVALID_BLOCK
 *  0x02 = EEPROM_ERROR_FULL
 *  0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 *  0x04 = EEPROM_ERROR_NOT_FORMATTED
 */
{
    b60c:	cf 93       	push	r28
    b60e:	df 93       	push	r29
    b610:	ec 01       	movw	r28, r24
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
    b612:	bc 01       	movw	r22, r24
    b614:	88 81       	ld	r24, Y
    b616:	99 81       	ldd	r25, Y+1	; 0x01
    b618:	0e 94 a7 49 	call	0x934e	; 0x934e <EepromReadBlock>
	if (status == 0x03)
    b61c:	83 30       	cpi	r24, 0x03	; 3
    b61e:	29 f4       	brne	.+10     	; 0xb62a <load_eeprom+0x1e>
	{
		status = EepromWriteBlock(block);
    b620:	ce 01       	movw	r24, r28
	}
}
    b622:	df 91       	pop	r29
    b624:	cf 91       	pop	r28
{
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
	if (status == 0x03)
	{
		status = EepromWriteBlock(block);
    b626:	0c 94 5d 49 	jmp	0x92ba	; 0x92ba <EepromWriteBlock>
	}
}
    b62a:	df 91       	pop	r29
    b62c:	cf 91       	pop	r28
    b62e:	08 95       	ret

0000b630 <fade_through>:

void fade_through()
{
	FadeOut(FRAMES_PER_FADE, true);
    b630:	61 e0       	ldi	r22, 0x01	; 1
    b632:	83 e0       	ldi	r24, 0x03	; 3
    b634:	0e 94 11 57 	call	0xae22	; 0xae22 <FadeOut>
	ClearVram();
    b638:	0e 94 de 47 	call	0x8fbc	; 0x8fbc <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    b63c:	60 e0       	ldi	r22, 0x00	; 0
    b63e:	83 e0       	ldi	r24, 0x03	; 3
    b640:	0c 94 05 57 	jmp	0xae0a	; 0xae0a <FadeIn>

0000b644 <clear_sprites>:
	FadeIn(FRAMES_PER_FADE, false);
	load_level(index);
}

void clear_sprites()
{
    b644:	cf 93       	push	r28
	for(char i = 0; i < MAX_SPRITES; i++)
    b646:	c0 e0       	ldi	r28, 0x00	; 0
	{
		MapSprite2(i, map_none, 0);
    b648:	40 e0       	ldi	r20, 0x00	; 0
    b64a:	61 ea       	ldi	r22, 0xA1	; 161
    b64c:	7c e4       	ldi	r23, 0x4C	; 76
    b64e:	8c 2f       	mov	r24, r28
    b650:	0e 94 8a 55 	call	0xab14	; 0xab14 <MapSprite2>
    b654:	cf 5f       	subi	r28, 0xFF	; 255
	load_level(index);
}

void clear_sprites()
{
	for(char i = 0; i < MAX_SPRITES; i++)
    b656:	ca 30       	cpi	r28, 0x0A	; 10
    b658:	b9 f7       	brne	.-18     	; 0xb648 <clear_sprites+0x4>
	{
		MapSprite2(i, map_none, 0);
	}
}
    b65a:	cf 91       	pop	r28
    b65c:	08 95       	ret

0000b65e <save_score>:
{
	EepromWriteBlock(block);
}

void save_score()
{
    b65e:	cf 92       	push	r12
    b660:	df 92       	push	r13
    b662:	ff 92       	push	r15
    b664:	0f 93       	push	r16
    b666:	1f 93       	push	r17
    b668:	cf 93       	push	r28
    b66a:	df 93       	push	r29
    b66c:	cd b7       	in	r28, 0x3d	; 61
    b66e:	de b7       	in	r29, 0x3e	; 62
    b670:	2a 97       	sbiw	r28, 0x0a	; 10
    b672:	0f b6       	in	r0, 0x3f	; 63
    b674:	f8 94       	cli
    b676:	de bf       	out	0x3e, r29	; 62
    b678:	0f be       	out	0x3f, r0	; 63
    b67a:	cd bf       	out	0x3d, r28	; 61
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
	Player* p_lose = &player2;

	if (player1.score < player2.score)
    b67c:	90 91 4b 0c 	lds	r25, 0x0C4B
    b680:	80 91 b9 0f 	lds	r24, 0x0FB9
    b684:	98 17       	cp	r25, r24
    b686:	28 f4       	brcc	.+10     	; 0xb692 <save_score+0x34>
	{
		p_win = &player2;
		p_lose = &player1;
    b688:	ec e3       	ldi	r30, 0x3C	; 60
    b68a:	fc e0       	ldi	r31, 0x0C	; 12
	Player* p_win = &player1;
	Player* p_lose = &player2;

	if (player1.score < player2.score)
	{
		p_win = &player2;
    b68c:	aa ea       	ldi	r26, 0xAA	; 170
    b68e:	bf e0       	ldi	r27, 0x0F	; 15
    b690:	04 c0       	rjmp	.+8      	; 0xb69a <save_score+0x3c>
	u8 tmp_score[5];
	u8 save_score[5];
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
	Player* p_lose = &player2;
    b692:	ea ea       	ldi	r30, 0xAA	; 170
    b694:	ff e0       	ldi	r31, 0x0F	; 15
	u8 cur_delta = 0;
	u8 tmp_score[5];
	u8 save_score[5];
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
    b696:	ac e3       	ldi	r26, 0x3C	; 60
    b698:	bc e0       	ldi	r27, 0x0C	; 12
	if (player1.score < player2.score)
	{
		p_win = &player2;
		p_lose = &player1;
	}
	save_score[0] = p_win->handle_id;
    b69a:	1b 96       	adiw	r26, 0x0b	; 11
    b69c:	8c 91       	ld	r24, X
    b69e:	1b 97       	sbiw	r26, 0x0b	; 11
    b6a0:	89 83       	std	Y+1, r24	; 0x01
	save_score[1] = p_lose->handle_id;
    b6a2:	83 85       	ldd	r24, Z+11	; 0x0b
    b6a4:	8a 83       	std	Y+2, r24	; 0x02
	save_score[2] = p_win->score;
    b6a6:	1f 96       	adiw	r26, 0x0f	; 15
    b6a8:	8c 91       	ld	r24, X
    b6aa:	8b 83       	std	Y+3, r24	; 0x03
	save_score[3] = p_lose->score;
    b6ac:	97 85       	ldd	r25, Z+15	; 0x0f
    b6ae:	9c 83       	std	Y+4, r25	; 0x04
	save_score[4] = (game.boss_fight_status == BOSS_FIGHT_WON) ? 1 : 0;
    b6b0:	21 e0       	ldi	r18, 0x01	; 1
    b6b2:	30 91 15 0c 	lds	r19, 0x0C15
    b6b6:	38 30       	cpi	r19, 0x08	; 8
    b6b8:	09 f0       	breq	.+2      	; 0xb6bc <save_score+0x5e>
    b6ba:	20 e0       	ldi	r18, 0x00	; 0
    b6bc:	2d 83       	std	Y+5, r18	; 0x05
	save_delta = p_win->score - p_lose->score;
    b6be:	f8 2e       	mov	r15, r24
    b6c0:	f9 1a       	sub	r15, r25
    b6c2:	00 e0       	ldi	r16, 0x00	; 0
    b6c4:	10 e0       	ldi	r17, 0x00	; 0
{
	u8 cur_delta = 0;
	u8 tmp_score[5];
	u8 save_score[5];
	u8 save_delta = 0;
	u8 saved = 0;
    b6c6:	80 e0       	ldi	r24, 0x00	; 0
	save_score[4] = (game.boss_fight_status == BOSS_FIGHT_WON) ? 1 : 0;
	save_delta = p_win->score - p_lose->score;

	for (u8 i = 0; i < 28; i += 5)
	{
		if (saved)
    b6c8:	81 11       	cpse	r24, r1
    b6ca:	08 c0       	rjmp	.+16     	; 0xb6dc <save_score+0x7e>
    b6cc:	f8 01       	movw	r30, r16
    b6ce:	e5 53       	subi	r30, 0x35	; 53
    b6d0:	f4 4f       	sbci	r31, 0xF4	; 244
			LBCopyChars(&scores.data[i], save_score, 5);
			LBCopyChars(save_score, tmp_score, 5);
		}
		else
		{
			cur_delta = scores.data[i+2] - scores.data[i+3];
    b6d2:	94 81       	ldd	r25, Z+4	; 0x04
    b6d4:	25 81       	ldd	r18, Z+5	; 0x05
    b6d6:	92 1b       	sub	r25, r18
			if (save_delta > cur_delta)
    b6d8:	9f 15       	cp	r25, r15
    b6da:	d0 f4       	brcc	.+52     	; 0xb710 <save_score+0xb2>
			{
				LBCopyChars(tmp_score, &scores.data[i], 5);
    b6dc:	45 e0       	ldi	r20, 0x05	; 5
    b6de:	c8 01       	movw	r24, r16
    b6e0:	83 53       	subi	r24, 0x33	; 51
    b6e2:	94 4f       	sbci	r25, 0xF4	; 244
    b6e4:	6c 01       	movw	r12, r24
    b6e6:	bc 01       	movw	r22, r24
    b6e8:	ce 01       	movw	r24, r28
    b6ea:	06 96       	adiw	r24, 0x06	; 6
    b6ec:	0e 94 e2 57 	call	0xafc4	; 0xafc4 <LBCopyChars>
				LBCopyChars(&scores.data[i], save_score, 5);
    b6f0:	45 e0       	ldi	r20, 0x05	; 5
    b6f2:	be 01       	movw	r22, r28
    b6f4:	6f 5f       	subi	r22, 0xFF	; 255
    b6f6:	7f 4f       	sbci	r23, 0xFF	; 255
    b6f8:	c6 01       	movw	r24, r12
    b6fa:	0e 94 e2 57 	call	0xafc4	; 0xafc4 <LBCopyChars>
				LBCopyChars(save_score, tmp_score, 5);
    b6fe:	45 e0       	ldi	r20, 0x05	; 5
    b700:	be 01       	movw	r22, r28
    b702:	6a 5f       	subi	r22, 0xFA	; 250
    b704:	7f 4f       	sbci	r23, 0xFF	; 255
    b706:	ce 01       	movw	r24, r28
    b708:	01 96       	adiw	r24, 0x01	; 1
    b70a:	0e 94 e2 57 	call	0xafc4	; 0xafc4 <LBCopyChars>
				saved = 1;
    b70e:	81 e0       	ldi	r24, 0x01	; 1
    b710:	0b 5f       	subi	r16, 0xFB	; 251
    b712:	1f 4f       	sbci	r17, 0xFF	; 255
	save_score[2] = p_win->score;
	save_score[3] = p_lose->score;
	save_score[4] = (game.boss_fight_status == BOSS_FIGHT_WON) ? 1 : 0;
	save_delta = p_win->score - p_lose->score;

	for (u8 i = 0; i < 28; i += 5)
    b714:	0e 31       	cpi	r16, 0x1E	; 30
    b716:	11 05       	cpc	r17, r1
    b718:	b9 f6       	brne	.-82     	; 0xb6c8 <save_score+0x6a>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    b71a:	8b ec       	ldi	r24, 0xCB	; 203
    b71c:	9b e0       	ldi	r25, 0x0B	; 11
    b71e:	0e 94 5d 49 	call	0x92ba	; 0x92ba <EepromWriteBlock>
				saved = 1;
			}
		}
	}
	save_eeprom(&scores);
}
    b722:	2a 96       	adiw	r28, 0x0a	; 10
    b724:	0f b6       	in	r0, 0x3f	; 63
    b726:	f8 94       	cli
    b728:	de bf       	out	0x3e, r29	; 62
    b72a:	0f be       	out	0x3f, r0	; 63
    b72c:	cd bf       	out	0x3d, r28	; 61
    b72e:	df 91       	pop	r29
    b730:	cf 91       	pop	r28
    b732:	1f 91       	pop	r17
    b734:	0f 91       	pop	r16
    b736:	ff 90       	pop	r15
    b738:	df 90       	pop	r13
    b73a:	cf 90       	pop	r12
    b73c:	08 95       	ret

0000b73e <position_shot>:
	init_game_state();
	load_tank_rank();
}

void position_shot(Player* player, Shot* shot)
{
    b73e:	0f 93       	push	r16
    b740:	1f 93       	push	r17
    b742:	cf 93       	push	r28
    b744:	df 93       	push	r29
    b746:	8c 01       	movw	r16, r24
    b748:	eb 01       	movw	r28, r22
	switch (shot->shared.direction)
    b74a:	88 81       	ld	r24, Y
    b74c:	81 30       	cpi	r24, 0x01	; 1
    b74e:	69 f1       	breq	.+90     	; 0xb7aa <position_shot+0x6c>
    b750:	98 f0       	brcs	.+38     	; 0xb778 <position_shot+0x3a>
    b752:	82 30       	cpi	r24, 0x02	; 2
    b754:	f1 f1       	breq	.+124    	; 0xb7d2 <position_shot+0x94>
    b756:	83 30       	cpi	r24, 0x03	; 3
    b758:	09 f0       	breq	.+2      	; 0xb75c <position_shot+0x1e>
    b75a:	59 c0       	rjmp	.+178    	; 0xb80e <position_shot+0xd0>
		case D_DOWN:
			shot->shared.x = player->shared.x + 4;
			shot->shared.y = player->shared.y + 8;
			break;
		case D_LEFT:
			shot->shared.x = player->shared.x;
    b75c:	f8 01       	movw	r30, r16
    b75e:	83 81       	ldd	r24, Z+3	; 0x03
    b760:	94 81       	ldd	r25, Z+4	; 0x04
    b762:	a5 81       	ldd	r26, Z+5	; 0x05
    b764:	b6 81       	ldd	r27, Z+6	; 0x06
    b766:	8b 83       	std	Y+3, r24	; 0x03
    b768:	9c 83       	std	Y+4, r25	; 0x04
    b76a:	ad 83       	std	Y+5, r26	; 0x05
    b76c:	be 83       	std	Y+6, r27	; 0x06
			shot->shared.y = player->shared.y + 4;
    b76e:	20 e0       	ldi	r18, 0x00	; 0
    b770:	30 e0       	ldi	r19, 0x00	; 0
    b772:	40 e8       	ldi	r20, 0x80	; 128
    b774:	50 e4       	ldi	r21, 0x40	; 64
    b776:	41 c0       	rjmp	.+130    	; 0xb7fa <position_shot+0xbc>
void position_shot(Player* player, Shot* shot)
{
	switch (shot->shared.direction)
	{
		case D_UP:
			shot->shared.x = player->shared.x + 4;
    b778:	20 e0       	ldi	r18, 0x00	; 0
    b77a:	30 e0       	ldi	r19, 0x00	; 0
    b77c:	40 e8       	ldi	r20, 0x80	; 128
    b77e:	50 e4       	ldi	r21, 0x40	; 64
    b780:	f8 01       	movw	r30, r16
    b782:	63 81       	ldd	r22, Z+3	; 0x03
    b784:	74 81       	ldd	r23, Z+4	; 0x04
    b786:	85 81       	ldd	r24, Z+5	; 0x05
    b788:	96 81       	ldd	r25, Z+6	; 0x06
    b78a:	0e 94 9a 76 	call	0xed34	; 0xed34 <__addsf3>
    b78e:	6b 83       	std	Y+3, r22	; 0x03
    b790:	7c 83       	std	Y+4, r23	; 0x04
    b792:	8d 83       	std	Y+5, r24	; 0x05
    b794:	9e 83       	std	Y+6, r25	; 0x06
			shot->shared.y = player->shared.y;
    b796:	f8 01       	movw	r30, r16
    b798:	87 81       	ldd	r24, Z+7	; 0x07
    b79a:	90 85       	ldd	r25, Z+8	; 0x08
    b79c:	a1 85       	ldd	r26, Z+9	; 0x09
    b79e:	b2 85       	ldd	r27, Z+10	; 0x0a
    b7a0:	8f 83       	std	Y+7, r24	; 0x07
    b7a2:	98 87       	std	Y+8, r25	; 0x08
    b7a4:	a9 87       	std	Y+9, r26	; 0x09
    b7a6:	ba 87       	std	Y+10, r27	; 0x0a
			break;
    b7a8:	32 c0       	rjmp	.+100    	; 0xb80e <position_shot+0xd0>
		case D_RIGHT:
			shot->shared.x = player->shared.x + 8;
    b7aa:	20 e0       	ldi	r18, 0x00	; 0
    b7ac:	30 e0       	ldi	r19, 0x00	; 0
    b7ae:	40 e0       	ldi	r20, 0x00	; 0
    b7b0:	51 e4       	ldi	r21, 0x41	; 65
    b7b2:	f8 01       	movw	r30, r16
    b7b4:	63 81       	ldd	r22, Z+3	; 0x03
    b7b6:	74 81       	ldd	r23, Z+4	; 0x04
    b7b8:	85 81       	ldd	r24, Z+5	; 0x05
    b7ba:	96 81       	ldd	r25, Z+6	; 0x06
    b7bc:	0e 94 9a 76 	call	0xed34	; 0xed34 <__addsf3>
    b7c0:	6b 83       	std	Y+3, r22	; 0x03
    b7c2:	7c 83       	std	Y+4, r23	; 0x04
    b7c4:	8d 83       	std	Y+5, r24	; 0x05
    b7c6:	9e 83       	std	Y+6, r25	; 0x06
			shot->shared.y = player->shared.y + 4;
    b7c8:	20 e0       	ldi	r18, 0x00	; 0
    b7ca:	30 e0       	ldi	r19, 0x00	; 0
    b7cc:	40 e8       	ldi	r20, 0x80	; 128
    b7ce:	50 e4       	ldi	r21, 0x40	; 64
    b7d0:	13 c0       	rjmp	.+38     	; 0xb7f8 <position_shot+0xba>
			break;
		case D_DOWN:
			shot->shared.x = player->shared.x + 4;
    b7d2:	20 e0       	ldi	r18, 0x00	; 0
    b7d4:	30 e0       	ldi	r19, 0x00	; 0
    b7d6:	40 e8       	ldi	r20, 0x80	; 128
    b7d8:	50 e4       	ldi	r21, 0x40	; 64
    b7da:	f8 01       	movw	r30, r16
    b7dc:	63 81       	ldd	r22, Z+3	; 0x03
    b7de:	74 81       	ldd	r23, Z+4	; 0x04
    b7e0:	85 81       	ldd	r24, Z+5	; 0x05
    b7e2:	96 81       	ldd	r25, Z+6	; 0x06
    b7e4:	0e 94 9a 76 	call	0xed34	; 0xed34 <__addsf3>
    b7e8:	6b 83       	std	Y+3, r22	; 0x03
    b7ea:	7c 83       	std	Y+4, r23	; 0x04
    b7ec:	8d 83       	std	Y+5, r24	; 0x05
    b7ee:	9e 83       	std	Y+6, r25	; 0x06
			shot->shared.y = player->shared.y + 8;
    b7f0:	20 e0       	ldi	r18, 0x00	; 0
    b7f2:	30 e0       	ldi	r19, 0x00	; 0
    b7f4:	40 e0       	ldi	r20, 0x00	; 0
    b7f6:	51 e4       	ldi	r21, 0x41	; 65
    b7f8:	f8 01       	movw	r30, r16
			break;
		case D_LEFT:
			shot->shared.x = player->shared.x;
			shot->shared.y = player->shared.y + 4;
    b7fa:	67 81       	ldd	r22, Z+7	; 0x07
    b7fc:	70 85       	ldd	r23, Z+8	; 0x08
    b7fe:	81 85       	ldd	r24, Z+9	; 0x09
    b800:	92 85       	ldd	r25, Z+10	; 0x0a
    b802:	0e 94 9a 76 	call	0xed34	; 0xed34 <__addsf3>
    b806:	6f 83       	std	Y+7, r22	; 0x07
    b808:	78 87       	std	Y+8, r23	; 0x08
    b80a:	89 87       	std	Y+9, r24	; 0x09
    b80c:	9a 87       	std	Y+10, r25	; 0x0a
			break;
	}
}
    b80e:	df 91       	pop	r29
    b810:	cf 91       	pop	r28
    b812:	1f 91       	pop	r17
    b814:	0f 91       	pop	r16
    b816:	08 95       	ret

0000b818 <print_level_score>:

void print_level_score(Player* winner, Player* loser)
{
    b818:	0f 93       	push	r16
    b81a:	1f 93       	push	r17
    b81c:	cf 93       	push	r28
    b81e:	df 93       	push	r29
    b820:	8c 01       	movw	r16, r24
    b822:	eb 01       	movw	r28, r22
	LBPrintStr(4, 14, &winner->handle[0], 3);
    b824:	ac 01       	movw	r20, r24
    b826:	44 5f       	subi	r20, 0xF4	; 244
    b828:	5f 4f       	sbci	r21, 0xFF	; 255
    b82a:	23 e0       	ldi	r18, 0x03	; 3
    b82c:	6e e0       	ldi	r22, 0x0E	; 14
    b82e:	84 e0       	ldi	r24, 0x04	; 4
    b830:	0e 94 ee 57 	call	0xafdc	; 0xafdc <LBPrintStr>
	Print(8, 14, (char*) strOwns);
    b834:	4d ee       	ldi	r20, 0xED	; 237
    b836:	5a e0       	ldi	r21, 0x0A	; 10
    b838:	6e e0       	ldi	r22, 0x0E	; 14
    b83a:	70 e0       	ldi	r23, 0x00	; 0
    b83c:	88 e0       	ldi	r24, 0x08	; 8
    b83e:	90 e0       	ldi	r25, 0x00	; 0
    b840:	0e 94 8b 56 	call	0xad16	; 0xad16 <Print>
	LBPrintStr(13, 14, &loser->handle[0], 3);
    b844:	ae 01       	movw	r20, r28
    b846:	44 5f       	subi	r20, 0xF4	; 244
    b848:	5f 4f       	sbci	r21, 0xFF	; 255
    b84a:	23 e0       	ldi	r18, 0x03	; 3
    b84c:	6e e0       	ldi	r22, 0x0E	; 14
    b84e:	8d e0       	ldi	r24, 0x0D	; 13
    b850:	0e 94 ee 57 	call	0xafdc	; 0xafdc <LBPrintStr>
	Print(17, 14, (char*) strBy);
    b854:	4a ee       	ldi	r20, 0xEA	; 234
    b856:	5a e0       	ldi	r21, 0x0A	; 10
    b858:	6e e0       	ldi	r22, 0x0E	; 14
    b85a:	70 e0       	ldi	r23, 0x00	; 0
    b85c:	81 e1       	ldi	r24, 0x11	; 17
    b85e:	90 e0       	ldi	r25, 0x00	; 0
    b860:	0e 94 8b 56 	call	0xad16	; 0xad16 <Print>
	PrintByte(22, 14, winner->level_score ,true);
    b864:	21 e0       	ldi	r18, 0x01	; 1
    b866:	f8 01       	movw	r30, r16
    b868:	40 89       	ldd	r20, Z+16	; 0x10
    b86a:	6e e0       	ldi	r22, 0x0E	; 14
    b86c:	70 e0       	ldi	r23, 0x00	; 0
    b86e:	86 e1       	ldi	r24, 0x16	; 22
    b870:	90 e0       	ldi	r25, 0x00	; 0
    b872:	0e 94 58 56 	call	0xacb0	; 0xacb0 <PrintByte>
	PrintChar(23, 14, '-');
    b876:	4d e2       	ldi	r20, 0x2D	; 45
    b878:	6e e0       	ldi	r22, 0x0E	; 14
    b87a:	70 e0       	ldi	r23, 0x00	; 0
    b87c:	87 e1       	ldi	r24, 0x17	; 23
    b87e:	90 e0       	ldi	r25, 0x00	; 0
    b880:	0e 94 a6 56 	call	0xad4c	; 0xad4c <PrintChar>
	PrintByte(26, 14, loser->level_score ,true);
    b884:	21 e0       	ldi	r18, 0x01	; 1
    b886:	48 89       	ldd	r20, Y+16	; 0x10
    b888:	6e e0       	ldi	r22, 0x0E	; 14
    b88a:	70 e0       	ldi	r23, 0x00	; 0
    b88c:	8a e1       	ldi	r24, 0x1A	; 26
    b88e:	90 e0       	ldi	r25, 0x00	; 0
}
    b890:	df 91       	pop	r29
    b892:	cf 91       	pop	r28
    b894:	1f 91       	pop	r17
    b896:	0f 91       	pop	r16
	Print(8, 14, (char*) strOwns);
	LBPrintStr(13, 14, &loser->handle[0], 3);
	Print(17, 14, (char*) strBy);
	PrintByte(22, 14, winner->level_score ,true);
	PrintChar(23, 14, '-');
	PrintByte(26, 14, loser->level_score ,true);
    b898:	0c 94 58 56 	jmp	0xacb0	; 0xacb0 <PrintByte>

0000b89c <print_final_score>:
}

void print_final_score(Player* winner, Player* loser)
{
    b89c:	0f 93       	push	r16
    b89e:	1f 93       	push	r17
    b8a0:	cf 93       	push	r28
    b8a2:	df 93       	push	r29
    b8a4:	8c 01       	movw	r16, r24
    b8a6:	eb 01       	movw	r28, r22
    Print(9, 12, (char*) strFinalScore);
    b8a8:	4e ed       	ldi	r20, 0xDE	; 222
    b8aa:	5a e0       	ldi	r21, 0x0A	; 10
    b8ac:	6c e0       	ldi	r22, 0x0C	; 12
    b8ae:	70 e0       	ldi	r23, 0x00	; 0
    b8b0:	89 e0       	ldi	r24, 0x09	; 9
    b8b2:	90 e0       	ldi	r25, 0x00	; 0
    b8b4:	0e 94 8b 56 	call	0xad16	; 0xad16 <Print>
    LBPrintStr(4, 14, &winner->handle[0], 3);
    b8b8:	a8 01       	movw	r20, r16
    b8ba:	44 5f       	subi	r20, 0xF4	; 244
    b8bc:	5f 4f       	sbci	r21, 0xFF	; 255
    b8be:	23 e0       	ldi	r18, 0x03	; 3
    b8c0:	6e e0       	ldi	r22, 0x0E	; 14
    b8c2:	84 e0       	ldi	r24, 0x04	; 4
    b8c4:	0e 94 ee 57 	call	0xafdc	; 0xafdc <LBPrintStr>
    Print(8, 14, (char*) strOwns);
    b8c8:	4d ee       	ldi	r20, 0xED	; 237
    b8ca:	5a e0       	ldi	r21, 0x0A	; 10
    b8cc:	6e e0       	ldi	r22, 0x0E	; 14
    b8ce:	70 e0       	ldi	r23, 0x00	; 0
    b8d0:	88 e0       	ldi	r24, 0x08	; 8
    b8d2:	90 e0       	ldi	r25, 0x00	; 0
    b8d4:	0e 94 8b 56 	call	0xad16	; 0xad16 <Print>
    LBPrintStr(13, 14, &loser->handle[0], 3);
    b8d8:	ae 01       	movw	r20, r28
    b8da:	44 5f       	subi	r20, 0xF4	; 244
    b8dc:	5f 4f       	sbci	r21, 0xFF	; 255
    b8de:	23 e0       	ldi	r18, 0x03	; 3
    b8e0:	6e e0       	ldi	r22, 0x0E	; 14
    b8e2:	8d e0       	ldi	r24, 0x0D	; 13
    b8e4:	0e 94 ee 57 	call	0xafdc	; 0xafdc <LBPrintStr>
    Print(17, 14, (char*) strBy);
    b8e8:	4a ee       	ldi	r20, 0xEA	; 234
    b8ea:	5a e0       	ldi	r21, 0x0A	; 10
    b8ec:	6e e0       	ldi	r22, 0x0E	; 14
    b8ee:	70 e0       	ldi	r23, 0x00	; 0
    b8f0:	81 e1       	ldi	r24, 0x11	; 17
    b8f2:	90 e0       	ldi	r25, 0x00	; 0
    b8f4:	0e 94 8b 56 	call	0xad16	; 0xad16 <Print>
    PrintByte(22, 14, winner->score ,true);
    b8f8:	21 e0       	ldi	r18, 0x01	; 1
    b8fa:	f8 01       	movw	r30, r16
    b8fc:	47 85       	ldd	r20, Z+15	; 0x0f
    b8fe:	6e e0       	ldi	r22, 0x0E	; 14
    b900:	70 e0       	ldi	r23, 0x00	; 0
    b902:	86 e1       	ldi	r24, 0x16	; 22
    b904:	90 e0       	ldi	r25, 0x00	; 0
    b906:	0e 94 58 56 	call	0xacb0	; 0xacb0 <PrintByte>
    PrintChar(23, 14, '-');
    b90a:	4d e2       	ldi	r20, 0x2D	; 45
    b90c:	6e e0       	ldi	r22, 0x0E	; 14
    b90e:	70 e0       	ldi	r23, 0x00	; 0
    b910:	87 e1       	ldi	r24, 0x17	; 23
    b912:	90 e0       	ldi	r25, 0x00	; 0
    b914:	0e 94 a6 56 	call	0xad4c	; 0xad4c <PrintChar>
    PrintByte(26, 14, loser->score ,true);
    b918:	21 e0       	ldi	r18, 0x01	; 1
    b91a:	4f 85       	ldd	r20, Y+15	; 0x0f
    b91c:	6e e0       	ldi	r22, 0x0E	; 14
    b91e:	70 e0       	ldi	r23, 0x00	; 0
    b920:	8a e1       	ldi	r24, 0x1A	; 26
    b922:	90 e0       	ldi	r25, 0x00	; 0
    b924:	0e 94 58 56 	call	0xacb0	; 0xacb0 <PrintByte>
	if (game.boss_fight_status == BOSS_FIGHT_WON)
    b928:	80 91 15 0c 	lds	r24, 0x0C15
    b92c:	88 30       	cpi	r24, 0x08	; 8
    b92e:	59 f4       	brne	.+22     	; 0xb946 <print_final_score+0xaa>
	{
		PrintChar(28, 14, '*');
    b930:	4a e2       	ldi	r20, 0x2A	; 42
    b932:	6e e0       	ldi	r22, 0x0E	; 14
    b934:	70 e0       	ldi	r23, 0x00	; 0
    b936:	8c e1       	ldi	r24, 0x1C	; 28
    b938:	90 e0       	ldi	r25, 0x00	; 0
	}
}
    b93a:	df 91       	pop	r29
    b93c:	cf 91       	pop	r28
    b93e:	1f 91       	pop	r17
    b940:	0f 91       	pop	r16
    PrintByte(22, 14, winner->score ,true);
    PrintChar(23, 14, '-');
    PrintByte(26, 14, loser->score ,true);
	if (game.boss_fight_status == BOSS_FIGHT_WON)
	{
		PrintChar(28, 14, '*');
    b942:	0c 94 a6 56 	jmp	0xad4c	; 0xad4c <PrintChar>
	}
}
    b946:	df 91       	pop	r29
    b948:	cf 91       	pop	r28
    b94a:	1f 91       	pop	r17
    b94c:	0f 91       	pop	r16
    b94e:	08 95       	ret

0000b950 <shoot_pressed>:

char shoot_pressed(JoyPadState* p)
{
    b950:	fc 01       	movw	r30, r24
    b952:	20 81       	ld	r18, Z
    b954:	31 81       	ldd	r19, Z+1	; 0x01
    b956:	21 70       	andi	r18, 0x01	; 1
    b958:	31 70       	andi	r19, 0x01	; 1
	return (p->pressed & BTN_A) || (p->pressed & BTN_B);
    b95a:	81 e0       	ldi	r24, 0x01	; 1
    b95c:	23 2b       	or	r18, r19
    b95e:	09 f4       	brne	.+2      	; 0xb962 <shoot_pressed+0x12>
    b960:	80 e0       	ldi	r24, 0x00	; 0
}
    b962:	08 95       	ret

0000b964 <get_delta>:

float get_delta(Player* p, SpriteShared* s)
{
	if (p->goal == 0)
    b964:	fc 01       	movw	r30, r24
    b966:	82 a1       	ldd	r24, Z+34	; 0x22
    b968:	fb 01       	movw	r30, r22
    b96a:	61 81       	ldd	r22, Z+1	; 0x01
		return FRAME_TIME * s->speed;
    b96c:	70 e0       	ldi	r23, 0x00	; 0
	return (p->pressed & BTN_A) || (p->pressed & BTN_B);
}

float get_delta(Player* p, SpriteShared* s)
{
	if (p->goal == 0)
    b96e:	81 11       	cpse	r24, r1
    b970:	09 c0       	rjmp	.+18     	; 0xb984 <get_delta+0x20>
		return FRAME_TIME * s->speed;
    b972:	80 e0       	ldi	r24, 0x00	; 0
    b974:	90 e0       	ldi	r25, 0x00	; 0
    b976:	0e 94 9d 77 	call	0xef3a	; 0xef3a <__floatsisf>
    b97a:	25 e6       	ldi	r18, 0x65	; 101
    b97c:	38 e8       	ldi	r19, 0x88	; 136
    b97e:	48 e8       	ldi	r20, 0x88	; 136
    b980:	5c e3       	ldi	r21, 0x3C	; 60
    b982:	0e c0       	rjmp	.+28     	; 0xb9a0 <get_delta+0x3c>
	return FRAME_TIME * s->speed * AI_SPEED_FACTOR;
    b984:	80 e0       	ldi	r24, 0x00	; 0
    b986:	90 e0       	ldi	r25, 0x00	; 0
    b988:	0e 94 9d 77 	call	0xef3a	; 0xef3a <__floatsisf>
    b98c:	25 e6       	ldi	r18, 0x65	; 101
    b98e:	38 e8       	ldi	r19, 0x88	; 136
    b990:	48 e8       	ldi	r20, 0x88	; 136
    b992:	5c e3       	ldi	r21, 0x3C	; 60
    b994:	0e 94 51 78 	call	0xf0a2	; 0xf0a2 <__mulsf3>
    b998:	23 e3       	ldi	r18, 0x33	; 51
    b99a:	33 e3       	ldi	r19, 0x33	; 51
    b99c:	43 eb       	ldi	r20, 0xB3	; 179
    b99e:	5f e3       	ldi	r21, 0x3F	; 63
    b9a0:	0e 94 51 78 	call	0xf0a2	; 0xf0a2 <__mulsf3>
}
    b9a4:	08 95       	ret

0000b9a6 <render_hud>:
		}
	}
}

void render_hud(Player* player, u8 x)
{	
    b9a6:	cf 93       	push	r28
    b9a8:	df 93       	push	r29
    b9aa:	c6 2f       	mov	r28, r22
	LBPrintStr(x+10, 0, player->handle, 3);
    b9ac:	ac 01       	movw	r20, r24
    b9ae:	44 5f       	subi	r20, 0xF4	; 244
    b9b0:	5f 4f       	sbci	r21, 0xFF	; 255
    b9b2:	23 e0       	ldi	r18, 0x03	; 3
    b9b4:	60 e0       	ldi	r22, 0x00	; 0
    b9b6:	8a e0       	ldi	r24, 0x0A	; 10
    b9b8:	8c 0f       	add	r24, r28
    b9ba:	0e 94 ee 57 	call	0xafdc	; 0xafdc <LBPrintStr>
	Print(x, 0, (char*) strScore);
    b9be:	d0 e0       	ldi	r29, 0x00	; 0
    b9c0:	42 e3       	ldi	r20, 0x32	; 50
    b9c2:	5a e0       	ldi	r21, 0x0A	; 10
    b9c4:	60 e0       	ldi	r22, 0x00	; 0
    b9c6:	70 e0       	ldi	r23, 0x00	; 0
    b9c8:	ce 01       	movw	r24, r28
    b9ca:	0e 94 8b 56 	call	0xad16	; 0xad16 <Print>
	Print(x, 1, (char*) strTotal);
    b9ce:	4b e2       	ldi	r20, 0x2B	; 43
    b9d0:	5a e0       	ldi	r21, 0x0A	; 10
    b9d2:	61 e0       	ldi	r22, 0x01	; 1
    b9d4:	70 e0       	ldi	r23, 0x00	; 0
    b9d6:	ce 01       	movw	r24, r28
	
}
    b9d8:	df 91       	pop	r29
    b9da:	cf 91       	pop	r28

void render_hud(Player* player, u8 x)
{	
	LBPrintStr(x+10, 0, player->handle, 3);
	Print(x, 0, (char*) strScore);
	Print(x, 1, (char*) strTotal);
    b9dc:	0c 94 8b 56 	jmp	0xad16	; 0xad16 <Print>

0000b9e0 <render_score>:
	
}

void render_score(Player* player, u8 x)
{
    b9e0:	0f 93       	push	r16
    b9e2:	1f 93       	push	r17
    b9e4:	cf 93       	push	r28
    b9e6:	df 93       	push	r29
    b9e8:	8c 01       	movw	r16, r24
	PrintByte(x+8, 0, player->level_score, false);
    b9ea:	c6 2f       	mov	r28, r22
    b9ec:	d0 e0       	ldi	r29, 0x00	; 0
    b9ee:	28 96       	adiw	r28, 0x08	; 8
    b9f0:	20 e0       	ldi	r18, 0x00	; 0
    b9f2:	fc 01       	movw	r30, r24
    b9f4:	40 89       	ldd	r20, Z+16	; 0x10
    b9f6:	60 e0       	ldi	r22, 0x00	; 0
    b9f8:	70 e0       	ldi	r23, 0x00	; 0
    b9fa:	ce 01       	movw	r24, r28
    b9fc:	0e 94 58 56 	call	0xacb0	; 0xacb0 <PrintByte>
	PrintByte(x+8, 1, player->score, false);
    ba00:	20 e0       	ldi	r18, 0x00	; 0
    ba02:	f8 01       	movw	r30, r16
    ba04:	47 85       	ldd	r20, Z+15	; 0x0f
    ba06:	61 e0       	ldi	r22, 0x01	; 1
    ba08:	70 e0       	ldi	r23, 0x00	; 0
    ba0a:	ce 01       	movw	r24, r28
}
    ba0c:	df 91       	pop	r29
    ba0e:	cf 91       	pop	r28
    ba10:	1f 91       	pop	r17
    ba12:	0f 91       	pop	r16
}

void render_score(Player* player, u8 x)
{
	PrintByte(x+8, 0, player->level_score, false);
	PrintByte(x+8, 1, player->score, false);
    ba14:	0c 94 58 56 	jmp	0xacb0	; 0xacb0 <PrintByte>

0000ba18 <render_banter>:
}

u8 render_banter(Player* player, u8 banter_x, u8 clear_banter)
{
    ba18:	cf 93       	push	r28
    ba1a:	df 93       	push	r29
    ba1c:	ec 01       	movw	r28, r24
    ba1e:	86 2f       	mov	r24, r22
	// Banter
	if (player->banter_frame != FRAMES_PER_BANTER)
    ba20:	9d 89       	ldd	r25, Y+21	; 0x15
    ba22:	9a 35       	cpi	r25, 0x5A	; 90
    ba24:	99 f0       	breq	.+38     	; 0xba4c <render_banter+0x34>
	{
		if (player->banter_frame == 0)
    ba26:	91 11       	cpse	r25, r1
    ba28:	0c c0       	rjmp	.+24     	; 0xba42 <render_banter+0x2a>
		{
			Print(banter_x, 2, (char*) banter_map+player->banter_index*15);
    ba2a:	4e 89       	ldd	r20, Y+22	; 0x16
    ba2c:	9f e0       	ldi	r25, 0x0F	; 15
    ba2e:	49 9f       	mul	r20, r25
    ba30:	a0 01       	movw	r20, r0
    ba32:	11 24       	eor	r1, r1
    ba34:	48 5b       	subi	r20, 0xB8	; 184
    ba36:	55 4f       	sbci	r21, 0xF5	; 245
    ba38:	62 e0       	ldi	r22, 0x02	; 2
    ba3a:	70 e0       	ldi	r23, 0x00	; 0
    ba3c:	90 e0       	ldi	r25, 0x00	; 0
    ba3e:	0e 94 8b 56 	call	0xad16	; 0xad16 <Print>
		}
		clear_banter = 1;
		player->banter_frame++;
    ba42:	8d 89       	ldd	r24, Y+21	; 0x15
    ba44:	8f 5f       	subi	r24, 0xFF	; 255
    ba46:	8d 8b       	std	Y+21, r24	; 0x15
	{
		if (player->banter_frame == 0)
		{
			Print(banter_x, 2, (char*) banter_map+player->banter_index*15);
		}
		clear_banter = 1;
    ba48:	41 e0       	ldi	r20, 0x01	; 1
    ba4a:	0a c0       	rjmp	.+20     	; 0xba60 <render_banter+0x48>
		player->banter_frame++;
	}
	else if (clear_banter)
    ba4c:	44 23       	and	r20, r20
    ba4e:	41 f0       	breq	.+16     	; 0xba60 <render_banter+0x48>
	{
		Print(banter_x, 2, (char*) strBanterClear);
    ba50:	49 e3       	ldi	r20, 0x39	; 57
    ba52:	5a e0       	ldi	r21, 0x0A	; 10
    ba54:	62 e0       	ldi	r22, 0x02	; 2
    ba56:	70 e0       	ldi	r23, 0x00	; 0
    ba58:	90 e0       	ldi	r25, 0x00	; 0
    ba5a:	0e 94 8b 56 	call	0xad16	; 0xad16 <Print>
    ba5e:	40 e0       	ldi	r20, 0x00	; 0
		clear_banter = 0;
	}
	return clear_banter;
}
    ba60:	84 2f       	mov	r24, r20
    ba62:	df 91       	pop	r29
    ba64:	cf 91       	pop	r28
    ba66:	08 95       	ret

0000ba68 <render_player>:

void render_player(Player* player, u8 sprite_index)
{
    ba68:	ef 92       	push	r14
    ba6a:	ff 92       	push	r15
    ba6c:	0f 93       	push	r16
    ba6e:	1f 93       	push	r17
    ba70:	cf 93       	push	r28
    ba72:	df 93       	push	r29
    ba74:	1f 92       	push	r1
    ba76:	cd b7       	in	r28, 0x3d	; 61
    ba78:	de b7       	in	r29, 0x3e	; 62
    ba7a:	7c 01       	movw	r14, r24
    ba7c:	16 2f       	mov	r17, r22
	MoveSprite(sprite_index, player->shared.x, player->shared.y, 2, 2);
    ba7e:	fc 01       	movw	r30, r24
    ba80:	67 81       	ldd	r22, Z+7	; 0x07
    ba82:	70 85       	ldd	r23, Z+8	; 0x08
    ba84:	81 85       	ldd	r24, Z+9	; 0x09
    ba86:	92 85       	ldd	r25, Z+10	; 0x0a
    ba88:	0e 94 6f 77 	call	0xeede	; 0xeede <__fixunssfsi>
    ba8c:	46 2f       	mov	r20, r22
    ba8e:	f7 01       	movw	r30, r14
    ba90:	63 81       	ldd	r22, Z+3	; 0x03
    ba92:	74 81       	ldd	r23, Z+4	; 0x04
    ba94:	85 81       	ldd	r24, Z+5	; 0x05
    ba96:	96 81       	ldd	r25, Z+6	; 0x06
    ba98:	49 83       	std	Y+1, r20	; 0x01
    ba9a:	0e 94 6f 77 	call	0xeede	; 0xeede <__fixunssfsi>
    ba9e:	02 e0       	ldi	r16, 0x02	; 2
    baa0:	22 e0       	ldi	r18, 0x02	; 2
    baa2:	49 81       	ldd	r20, Y+1	; 0x01
    baa4:	81 2f       	mov	r24, r17
    baa6:	0e 94 dc 55 	call	0xabb8	; 0xabb8 <MoveSprite>
}
    baaa:	0f 90       	pop	r0
    baac:	df 91       	pop	r29
    baae:	cf 91       	pop	r28
    bab0:	1f 91       	pop	r17
    bab2:	0f 91       	pop	r16
    bab4:	ff 90       	pop	r15
    bab6:	ef 90       	pop	r14
    bab8:	08 95       	ret

0000baba <render_shot>:

void render_shot(Player* player, u8 sprite_index)
{
    baba:	ef 92       	push	r14
    babc:	ff 92       	push	r15
    babe:	0f 93       	push	r16
    bac0:	1f 93       	push	r17
    bac2:	cf 93       	push	r28
    bac4:	df 93       	push	r29
    bac6:	1f 92       	push	r1
    bac8:	cd b7       	in	r28, 0x3d	; 61
    baca:	de b7       	in	r29, 0x3e	; 62
    bacc:	fc 01       	movw	r30, r24
	if (player->active_shots > 0)
    bace:	81 89       	ldd	r24, Z+17	; 0x11
    bad0:	88 23       	and	r24, r24
    bad2:	b9 f0       	breq	.+46     	; 0xbb02 <render_shot+0x48>
    bad4:	16 2f       	mov	r17, r22
    bad6:	7f 01       	movw	r14, r30
	{
		for (u8 i = 0; i < MAX_SHOTS; i++)
		{
			MoveSprite(sprite_index, player->shot[i].shared.x, player->shot[i].shared.y, 1, 1);
    bad8:	63 a9       	ldd	r22, Z+51	; 0x33
    bada:	74 a9       	ldd	r23, Z+52	; 0x34
    badc:	85 a9       	ldd	r24, Z+53	; 0x35
    bade:	96 a9       	ldd	r25, Z+54	; 0x36
    bae0:	0e 94 6f 77 	call	0xeede	; 0xeede <__fixunssfsi>
    bae4:	46 2f       	mov	r20, r22
    bae6:	f7 01       	movw	r30, r14
    bae8:	67 a5       	ldd	r22, Z+47	; 0x2f
    baea:	70 a9       	ldd	r23, Z+48	; 0x30
    baec:	81 a9       	ldd	r24, Z+49	; 0x31
    baee:	92 a9       	ldd	r25, Z+50	; 0x32
    baf0:	49 83       	std	Y+1, r20	; 0x01
    baf2:	0e 94 6f 77 	call	0xeede	; 0xeede <__fixunssfsi>
    baf6:	01 e0       	ldi	r16, 0x01	; 1
    baf8:	21 e0       	ldi	r18, 0x01	; 1
    bafa:	49 81       	ldd	r20, Y+1	; 0x01
    bafc:	81 2f       	mov	r24, r17
    bafe:	0e 94 dc 55 	call	0xabb8	; 0xabb8 <MoveSprite>
			sprite_index++;
		}
	}
}
    bb02:	0f 90       	pop	r0
    bb04:	df 91       	pop	r29
    bb06:	cf 91       	pop	r28
    bb08:	1f 91       	pop	r17
    bb0a:	0f 91       	pop	r16
    bb0c:	ff 90       	pop	r15
    bb0e:	ef 90       	pop	r14
    bb10:	08 95       	ret

0000bb12 <render_tile_explosions>:

void render_tile_explosions(TileAnimations* ta)
{	
    bb12:	ef 92       	push	r14
    bb14:	ff 92       	push	r15
    bb16:	0f 93       	push	r16
    bb18:	1f 93       	push	r17
    bb1a:	cf 93       	push	r28
    bb1c:	df 93       	push	r29
    bb1e:	ec 01       	movw	r28, r24
    bb20:	25 96       	adiw	r28, 0x05	; 5
    bb22:	8c 01       	movw	r16, r24
    bb24:	0f 5d       	subi	r16, 0xDF	; 223
    bb26:	1f 4f       	sbci	r17, 0xFF	; 255
				ta->anims[i].tile_index = 0;
			}
			else
			{
				DrawMap2(ta->anims[i].tile_index % 30,
						3 + ta->anims[i].tile_index / 30, 
    bb28:	8e e1       	ldi	r24, 0x1E	; 30
    bb2a:	e8 2e       	mov	r14, r24
    bb2c:	f1 2c       	mov	r15, r1
{	
	char* map;
	
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		if (ta->anims[i].tile_index != 0)
    bb2e:	88 85       	ldd	r24, Y+8	; 0x08
    bb30:	99 85       	ldd	r25, Y+9	; 0x09
    bb32:	89 2b       	or	r24, r25
    bb34:	c1 f0       	breq	.+48     	; 0xbb66 <render_tile_explosions+0x54>
		{
			map = LBGetNextFrame(&ta->anims[i].anim);
    bb36:	ce 01       	movw	r24, r28
    bb38:	04 97       	sbiw	r24, 0x04	; 4
    bb3a:	0e 94 46 57 	call	0xae8c	; 0xae8c <LBGetNextFrame>
    bb3e:	9c 01       	movw	r18, r24
			if (ta->anims[i].anim.looped)
    bb40:	48 81       	ld	r20, Y
    bb42:	88 85       	ldd	r24, Y+8	; 0x08
    bb44:	99 85       	ldd	r25, Y+9	; 0x09
			{
				SetTile(ta->anims[i].tile_index % 30, 3 + ta->anims[i].tile_index / 30, 0);
    bb46:	b7 01       	movw	r22, r14
    bb48:	0e 94 85 76 	call	0xed0a	; 0xed0a <__divmodhi4>
    bb4c:	6d 5f       	subi	r22, 0xFD	; 253
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		if (ta->anims[i].tile_index != 0)
		{
			map = LBGetNextFrame(&ta->anims[i].anim);
			if (ta->anims[i].anim.looped)
    bb4e:	44 23       	and	r20, r20
    bb50:	39 f0       	breq	.+14     	; 0xbb60 <render_tile_explosions+0x4e>
			{
				SetTile(ta->anims[i].tile_index % 30, 3 + ta->anims[i].tile_index / 30, 0);
    bb52:	40 e0       	ldi	r20, 0x00	; 0
    bb54:	50 e0       	ldi	r21, 0x00	; 0
    bb56:	0e 94 ec 47 	call	0x8fd8	; 0x8fd8 <SetTile>
				ta->anims[i].tile_index = 0;
    bb5a:	19 86       	std	Y+9, r1	; 0x09
    bb5c:	18 86       	std	Y+8, r1	; 0x08
    bb5e:	03 c0       	rjmp	.+6      	; 0xbb66 <render_tile_explosions+0x54>
			}
			else
			{
				DrawMap2(ta->anims[i].tile_index % 30,
    bb60:	a9 01       	movw	r20, r18
    bb62:	0e 94 0b 56 	call	0xac16	; 0xac16 <DrawMap>
    bb66:	2e 96       	adiw	r28, 0x0e	; 14

void render_tile_explosions(TileAnimations* ta)
{	
	char* map;
	
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
    bb68:	c0 17       	cp	r28, r16
    bb6a:	d1 07       	cpc	r29, r17
    bb6c:	01 f7       	brne	.-64     	; 0xbb2e <render_tile_explosions+0x1c>
						(const char*) map
				);
			}
		}
	}
}
    bb6e:	df 91       	pop	r29
    bb70:	cf 91       	pop	r28
    bb72:	1f 91       	pop	r17
    bb74:	0f 91       	pop	r16
    bb76:	ff 90       	pop	r15
    bb78:	ef 90       	pop	r14
    bb7a:	08 95       	ret

0000bb7c <render_scope>:

u8 render_scope(TileAnimation* ta)
{
    bb7c:	cf 93       	push	r28
    bb7e:	df 93       	push	r29
    bb80:	ec 01       	movw	r28, r24
	char *map;
	
	map = LBGetNextFrameReverse(&ta->anim);
    bb82:	0e 94 6b 57 	call	0xaed6	; 0xaed6 <LBGetNextFrameReverse>
    bb86:	9c 01       	movw	r18, r24
	if (ta->anim.looped)
    bb88:	4c 81       	ldd	r20, Y+4	; 0x04
    bb8a:	8c 85       	ldd	r24, Y+12	; 0x0c
    bb8c:	9d 85       	ldd	r25, Y+13	; 0x0d
	{
		DrawMap2(ta->tile_index % 30, 3 + ta->tile_index / 30, map_water);
    bb8e:	6e e1       	ldi	r22, 0x1E	; 30
    bb90:	70 e0       	ldi	r23, 0x00	; 0
    bb92:	0e 94 85 76 	call	0xed0a	; 0xed0a <__divmodhi4>
    bb96:	6d 5f       	subi	r22, 0xFD	; 253
u8 render_scope(TileAnimation* ta)
{
	char *map;
	
	map = LBGetNextFrameReverse(&ta->anim);
	if (ta->anim.looped)
    bb98:	44 23       	and	r20, r20
    bb9a:	19 f0       	breq	.+6      	; 0xbba2 <render_scope+0x26>
	{
		DrawMap2(ta->tile_index % 30, 3 + ta->tile_index / 30, map_water);
    bb9c:	4b ee       	ldi	r20, 0xEB	; 235
    bb9e:	55 e8       	ldi	r21, 0x85	; 133
    bba0:	01 c0       	rjmp	.+2      	; 0xbba4 <render_scope+0x28>
	}
	else
	{
		DrawMap2(ta->tile_index % 30, 3 + ta->tile_index / 30, (const char*) map);
    bba2:	a9 01       	movw	r20, r18
    bba4:	0e 94 0b 56 	call	0xac16	; 0xac16 <DrawMap>
	}
	return ta->anim.looped;
}
    bba8:	8c 81       	ldd	r24, Y+4	; 0x04
    bbaa:	df 91       	pop	r29
    bbac:	cf 91       	pop	r28
    bbae:	08 95       	ret

0000bbb0 <tank_map>:

char tank_map(Player* player, char sprite_index)
{
    bbb0:	1f 93       	push	r17
    bbb2:	cf 93       	push	r28
    bbb4:	df 93       	push	r29
    bbb6:	ec 01       	movw	r28, r24
    bbb8:	16 2f       	mov	r17, r22
	char* t_map = 0;
	u8 t_flags = 0;
	static u8 toggle_counter = FRAMES_PER_BLANK;
	static u8 toggle_blank = 0;

	if (player->flags & EXPLODING_FLAG)
    bbba:	8c 89       	ldd	r24, Y+20	; 0x14
    bbbc:	80 ff       	sbrs	r24, 0
    bbbe:	17 c0       	rjmp	.+46     	; 0xbbee <tank_map+0x3e>
	{
		t_map = LBGetNextFrame(&player->exp_anim);
    bbc0:	ce 01       	movw	r24, r28
    bbc2:	84 59       	subi	r24, 0x94	; 148
    bbc4:	9f 4f       	sbci	r25, 0xFF	; 255
    bbc6:	0e 94 46 57 	call	0xae8c	; 0xae8c <LBGetNextFrame>
		t_flags = 0;
		if (player->exp_anim.looped)
    bbca:	fe 01       	movw	r30, r28
    bbcc:	e0 59       	subi	r30, 0x90	; 144
    bbce:	ff 4f       	sbci	r31, 0xFF	; 255
    bbd0:	20 81       	ld	r18, Z
    bbd2:	22 23       	and	r18, r18
    bbd4:	09 f4       	brne	.+2      	; 0xbbd8 <tank_map+0x28>
    bbd6:	4a c0       	rjmp	.+148    	; 0xbc6c <tank_map+0xbc>
		{
			player->flags = player->flags ^ EXPLODING_FLAG;
    bbd8:	8c 89       	ldd	r24, Y+20	; 0x14
    bbda:	91 e0       	ldi	r25, 0x01	; 1
    bbdc:	98 27       	eor	r25, r24
    bbde:	9c 8b       	std	Y+20, r25	; 0x14
			t_map = (char*) map_tank_blank;
			player_spawn(player);
    bbe0:	ce 01       	movw	r24, r28
    bbe2:	0e 94 e8 5a 	call	0xb5d0	; 0xb5d0 <player_spawn>
	static u8 toggle_blank = 0;

	if (player->flags & EXPLODING_FLAG)
	{
		t_map = LBGetNextFrame(&player->exp_anim);
		t_flags = 0;
    bbe6:	40 e0       	ldi	r20, 0x00	; 0
		if (player->exp_anim.looped)
		{
			player->flags = player->flags ^ EXPLODING_FLAG;
			t_map = (char*) map_tank_blank;
    bbe8:	8b e9       	ldi	r24, 0x9B	; 155
    bbea:	9c e4       	ldi	r25, 0x4C	; 76
    bbec:	40 c0       	rjmp	.+128    	; 0xbc6e <tank_map+0xbe>
			player_spawn(player);
		}
	}
	else
	{
		if (player->grace_frame != FRAMES_PER_GRACE)
    bbee:	9f 89       	ldd	r25, Y+23	; 0x17
    bbf0:	98 37       	cpi	r25, 0x78	; 120
    bbf2:	11 f0       	breq	.+4      	; 0xbbf8 <tank_map+0x48>
		{
			player->grace_frame++;
    bbf4:	9f 5f       	subi	r25, 0xFF	; 255
    bbf6:	9f 8b       	std	Y+23, r25	; 0x17
		}
		switch (player->shared.direction)
    bbf8:	98 81       	ld	r25, Y
    bbfa:	91 30       	cpi	r25, 0x01	; 1
    bbfc:	61 f0       	breq	.+24     	; 0xbc16 <tank_map+0x66>
    bbfe:	b0 f0       	brcs	.+44     	; 0xbc2c <tank_map+0x7c>
    bc00:	92 30       	cpi	r25, 0x02	; 2
    bc02:	69 f0       	breq	.+26     	; 0xbc1e <tank_map+0x6e>
    bc04:	93 30       	cpi	r25, 0x03	; 3
    bc06:	91 f4       	brne	.+36     	; 0xbc2c <tank_map+0x7c>
		{
			case D_UP: t_map = LBGetNextFrame(&player->up_anim); t_flags = 0; break;
			case D_RIGHT: t_map = LBGetNextFrame(&player->right_anim); t_flags = 0; break;
			case D_DOWN: t_map = LBGetNextFrame(&player->up_anim); t_flags = SPRITE_FLIP_Y; break;
			case D_LEFT: t_map = LBGetNextFrame(&player->right_anim); t_flags = SPRITE_FLIP_X; break;
    bc08:	ce 01       	movw	r24, r28
    bc0a:	80 5a       	subi	r24, 0xA0	; 160
    bc0c:	9f 4f       	sbci	r25, 0xFF	; 255
    bc0e:	0e 94 46 57 	call	0xae8c	; 0xae8c <LBGetNextFrame>
    bc12:	41 e0       	ldi	r20, 0x01	; 1
    bc14:	11 c0       	rjmp	.+34     	; 0xbc38 <tank_map+0x88>
			player->grace_frame++;
		}
		switch (player->shared.direction)
		{
			case D_UP: t_map = LBGetNextFrame(&player->up_anim); t_flags = 0; break;
			case D_RIGHT: t_map = LBGetNextFrame(&player->right_anim); t_flags = 0; break;
    bc16:	ce 01       	movw	r24, r28
    bc18:	80 5a       	subi	r24, 0xA0	; 160
    bc1a:	9f 4f       	sbci	r25, 0xFF	; 255
    bc1c:	0a c0       	rjmp	.+20     	; 0xbc32 <tank_map+0x82>
			case D_DOWN: t_map = LBGetNextFrame(&player->up_anim); t_flags = SPRITE_FLIP_Y; break;
    bc1e:	ce 01       	movw	r24, r28
    bc20:	8c 5a       	subi	r24, 0xAC	; 172
    bc22:	9f 4f       	sbci	r25, 0xFF	; 255
    bc24:	0e 94 46 57 	call	0xae8c	; 0xae8c <LBGetNextFrame>
    bc28:	42 e0       	ldi	r20, 0x02	; 2
    bc2a:	06 c0       	rjmp	.+12     	; 0xbc38 <tank_map+0x88>
			case D_LEFT: t_map = LBGetNextFrame(&player->right_anim); t_flags = SPRITE_FLIP_X; break;
			default: t_map = LBGetNextFrame(&player->up_anim); t_flags = 0; break;
    bc2c:	ce 01       	movw	r24, r28
    bc2e:	8c 5a       	subi	r24, 0xAC	; 172
    bc30:	9f 4f       	sbci	r25, 0xFF	; 255
    bc32:	0e 94 46 57 	call	0xae8c	; 0xae8c <LBGetNextFrame>
    bc36:	40 e0       	ldi	r20, 0x00	; 0
		}
		if ((player->grace_frame != FRAMES_PER_GRACE) && (toggle_blank))
    bc38:	2f 89       	ldd	r18, Y+23	; 0x17
    bc3a:	28 37       	cpi	r18, 0x78	; 120
    bc3c:	31 f0       	breq	.+12     	; 0xbc4a <tank_map+0x9a>
    bc3e:	20 91 39 0b 	lds	r18, 0x0B39
    bc42:	22 23       	and	r18, r18
    bc44:	11 f0       	breq	.+4      	; 0xbc4a <tank_map+0x9a>
		{
			t_map = (char*) map_tank_blank;
    bc46:	8b e9       	ldi	r24, 0x9B	; 155
    bc48:	9c e4       	ldi	r25, 0x4C	; 76
		}
		toggle_counter--;
    bc4a:	20 91 03 01 	lds	r18, 0x0103
    bc4e:	21 50       	subi	r18, 0x01	; 1
		if (toggle_counter == 0)
    bc50:	19 f0       	breq	.+6      	; 0xbc58 <tank_map+0xa8>
		}
		if ((player->grace_frame != FRAMES_PER_GRACE) && (toggle_blank))
		{
			t_map = (char*) map_tank_blank;
		}
		toggle_counter--;
    bc52:	20 93 03 01 	sts	0x0103, r18
    bc56:	0b c0       	rjmp	.+22     	; 0xbc6e <tank_map+0xbe>
		if (toggle_counter == 0)
		{
			toggle_counter = FRAMES_PER_BLANK;
    bc58:	24 e1       	ldi	r18, 0x14	; 20
    bc5a:	20 93 03 01 	sts	0x0103, r18
			toggle_blank = toggle_blank ^ 1;
    bc5e:	30 91 39 0b 	lds	r19, 0x0B39
    bc62:	21 e0       	ldi	r18, 0x01	; 1
    bc64:	23 27       	eor	r18, r19
    bc66:	20 93 39 0b 	sts	0x0B39, r18
    bc6a:	01 c0       	rjmp	.+2      	; 0xbc6e <tank_map+0xbe>
	static u8 toggle_blank = 0;

	if (player->flags & EXPLODING_FLAG)
	{
		t_map = LBGetNextFrame(&player->exp_anim);
		t_flags = 0;
    bc6c:	40 e0       	ldi	r20, 0x00	; 0
		{
			toggle_counter = FRAMES_PER_BLANK;
			toggle_blank = toggle_blank ^ 1;
		}
	}
	MapSprite2(sprite_index, (const char*) t_map, t_flags);
    bc6e:	bc 01       	movw	r22, r24
    bc70:	81 2f       	mov	r24, r17
    bc72:	0e 94 8a 55 	call	0xab14	; 0xab14 <MapSprite2>
	sprite_index += 4;
	return sprite_index;
}
    bc76:	84 e0       	ldi	r24, 0x04	; 4
    bc78:	81 0f       	add	r24, r17
    bc7a:	df 91       	pop	r29
    bc7c:	cf 91       	pop	r28
    bc7e:	1f 91       	pop	r17
    bc80:	08 95       	ret

0000bc82 <shot_map>:

char shot_map(Player* player, char sprite_index)
{
    bc82:	cf 93       	push	r28
    bc84:	c6 2f       	mov	r28, r22
	Shot* shot;

	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		shot = &player->shot[i];
		if (shot->active)
    bc86:	fc 01       	movw	r30, r24
    bc88:	22 ad       	ldd	r18, Z+58	; 0x3a
    bc8a:	22 23       	and	r18, r18
    bc8c:	d9 f0       	breq	.+54     	; 0xbcc4 <shot_map+0x42>
		{
			switch (shot->shared.direction)
    bc8e:	24 a5       	ldd	r18, Z+44	; 0x2c
    bc90:	21 30       	cpi	r18, 0x01	; 1
    bc92:	59 f0       	breq	.+22     	; 0xbcaa <shot_map+0x28>
    bc94:	a8 f0       	brcs	.+42     	; 0xbcc0 <shot_map+0x3e>
    bc96:	22 30       	cpi	r18, 0x02	; 2
    bc98:	71 f0       	breq	.+28     	; 0xbcb6 <shot_map+0x34>
    bc9a:	23 30       	cpi	r18, 0x03	; 3
    bc9c:	89 f4       	brne	.+34     	; 0xbcc0 <shot_map+0x3e>
			{
				case D_UP: s_map = LBGetNextFrame(&player->shot[i].up_anim); s_flags = 0; break;
				case D_RIGHT: s_map = LBGetNextFrame(&player->shot[i].right_anim); s_flags = 0; break;
				case D_DOWN: s_map = LBGetNextFrame(&player->shot[i].up_anim); s_flags = SPRITE_FLIP_Y; break;
				case D_LEFT: s_map = LBGetNextFrame(&player->shot[i].right_anim); s_flags = SPRITE_FLIP_X; break;
    bc9e:	88 5b       	subi	r24, 0xB8	; 184
    bca0:	9f 4f       	sbci	r25, 0xFF	; 255
    bca2:	0e 94 46 57 	call	0xae8c	; 0xae8c <LBGetNextFrame>
    bca6:	41 e0       	ldi	r20, 0x01	; 1
    bca8:	10 c0       	rjmp	.+32     	; 0xbcca <shot_map+0x48>
		if (shot->active)
		{
			switch (shot->shared.direction)
			{
				case D_UP: s_map = LBGetNextFrame(&player->shot[i].up_anim); s_flags = 0; break;
				case D_RIGHT: s_map = LBGetNextFrame(&player->shot[i].right_anim); s_flags = 0; break;
    bcaa:	88 5b       	subi	r24, 0xB8	; 184
    bcac:	9f 4f       	sbci	r25, 0xFF	; 255
    bcae:	0e 94 46 57 	call	0xae8c	; 0xae8c <LBGetNextFrame>
    bcb2:	40 e0       	ldi	r20, 0x00	; 0
    bcb4:	0a c0       	rjmp	.+20     	; 0xbcca <shot_map+0x48>
				case D_DOWN: s_map = LBGetNextFrame(&player->shot[i].up_anim); s_flags = SPRITE_FLIP_Y; break;
    bcb6:	cc 96       	adiw	r24, 0x3c	; 60
    bcb8:	0e 94 46 57 	call	0xae8c	; 0xae8c <LBGetNextFrame>
    bcbc:	42 e0       	ldi	r20, 0x02	; 2
    bcbe:	05 c0       	rjmp	.+10     	; 0xbcca <shot_map+0x48>
				case D_LEFT: s_map = LBGetNextFrame(&player->shot[i].right_anim); s_flags = SPRITE_FLIP_X; break;
				default: s_map = LBGetNextFrame(&player->shot[i].up_anim); s_flags = 0; break;
    bcc0:	cc 96       	adiw	r24, 0x3c	; 60
    bcc2:	f5 cf       	rjmp	.-22     	; 0xbcae <shot_map+0x2c>
    bcc4:	40 e0       	ldi	r20, 0x00	; 0
			}
		}
		else
		{
			s_map = (char*) map_tank_blank;
    bcc6:	8b e9       	ldi	r24, 0x9B	; 155
    bcc8:	9c e4       	ldi	r25, 0x4C	; 76
		}
		MapSprite2(sprite_index, (const char*) s_map, s_flags);
    bcca:	bc 01       	movw	r22, r24
    bccc:	8c 2f       	mov	r24, r28
    bcce:	0e 94 8a 55 	call	0xab14	; 0xab14 <MapSprite2>
		sprite_index++;
	}
	return sprite_index;
}
    bcd2:	81 e0       	ldi	r24, 0x01	; 1
    bcd4:	8c 0f       	add	r24, r28
    bcd6:	cf 91       	pop	r28
    bcd8:	08 95       	ret

0000bcda <recoil_sprite>:

/* Collision Detection */
void recoil_sprite(SpriteShared* sprite)
{
    bcda:	cf 93       	push	r28
    bcdc:	df 93       	push	r29
    bcde:	ec 01       	movw	r28, r24
	u8 tile;
	
	if (sprite->direction == D_UP)
    bce0:	88 81       	ld	r24, Y
    bce2:	81 11       	cpse	r24, r1
    bce4:	0b c0       	rjmp	.+22     	; 0xbcfc <recoil_sprite+0x22>
	{
		tile = ((u8) sprite->y / 8) + 1;
    bce6:	6f 81       	ldd	r22, Y+7	; 0x07
    bce8:	78 85       	ldd	r23, Y+8	; 0x08
    bcea:	89 85       	ldd	r24, Y+9	; 0x09
    bcec:	9a 85       	ldd	r25, Y+10	; 0x0a
    bcee:	0e 94 6f 77 	call	0xeede	; 0xeede <__fixunssfsi>
    bcf2:	66 95       	lsr	r22
    bcf4:	66 95       	lsr	r22
    bcf6:	66 95       	lsr	r22
    bcf8:	6f 5f       	subi	r22, 0xFF	; 255
    bcfa:	1d c0       	rjmp	.+58     	; 0xbd36 <recoil_sprite+0x5c>
		sprite->y = tile * 8;
	}
	else if (sprite->direction == D_RIGHT)
    bcfc:	81 30       	cpi	r24, 0x01	; 1
    bcfe:	69 f4       	brne	.+26     	; 0xbd1a <recoil_sprite+0x40>
	{
		tile = sprite->x / 8;
    bd00:	20 e0       	ldi	r18, 0x00	; 0
    bd02:	30 e0       	ldi	r19, 0x00	; 0
    bd04:	40 e0       	ldi	r20, 0x00	; 0
    bd06:	5e e3       	ldi	r21, 0x3E	; 62
    bd08:	6b 81       	ldd	r22, Y+3	; 0x03
    bd0a:	7c 81       	ldd	r23, Y+4	; 0x04
    bd0c:	8d 81       	ldd	r24, Y+5	; 0x05
    bd0e:	9e 81       	ldd	r25, Y+6	; 0x06
    bd10:	0e 94 51 78 	call	0xf0a2	; 0xf0a2 <__mulsf3>
    bd14:	0e 94 6f 77 	call	0xeede	; 0xeede <__fixunssfsi>
    bd18:	27 c0       	rjmp	.+78     	; 0xbd68 <recoil_sprite+0x8e>
		sprite->x = tile * 8;
	}
	else if (sprite->direction == D_DOWN)
    bd1a:	82 30       	cpi	r24, 0x02	; 2
    bd1c:	d9 f4       	brne	.+54     	; 0xbd54 <recoil_sprite+0x7a>
	{
		tile = sprite->y / 8;
    bd1e:	20 e0       	ldi	r18, 0x00	; 0
    bd20:	30 e0       	ldi	r19, 0x00	; 0
    bd22:	40 e0       	ldi	r20, 0x00	; 0
    bd24:	5e e3       	ldi	r21, 0x3E	; 62
    bd26:	6f 81       	ldd	r22, Y+7	; 0x07
    bd28:	78 85       	ldd	r23, Y+8	; 0x08
    bd2a:	89 85       	ldd	r24, Y+9	; 0x09
    bd2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    bd2e:	0e 94 51 78 	call	0xf0a2	; 0xf0a2 <__mulsf3>
    bd32:	0e 94 6f 77 	call	0xeede	; 0xeede <__fixunssfsi>
		sprite->y = tile * 8;
    bd36:	88 e0       	ldi	r24, 0x08	; 8
    bd38:	68 9f       	mul	r22, r24
    bd3a:	b0 01       	movw	r22, r0
    bd3c:	11 24       	eor	r1, r1
    bd3e:	88 27       	eor	r24, r24
    bd40:	77 fd       	sbrc	r23, 7
    bd42:	80 95       	com	r24
    bd44:	98 2f       	mov	r25, r24
    bd46:	0e 94 9d 77 	call	0xef3a	; 0xef3a <__floatsisf>
    bd4a:	6f 83       	std	Y+7, r22	; 0x07
    bd4c:	78 87       	std	Y+8, r23	; 0x08
    bd4e:	89 87       	std	Y+9, r24	; 0x09
    bd50:	9a 87       	std	Y+10, r25	; 0x0a
    bd52:	18 c0       	rjmp	.+48     	; 0xbd84 <recoil_sprite+0xaa>
	}
	else
	{
		tile = ((u8) sprite->x / 8) + 1;
    bd54:	6b 81       	ldd	r22, Y+3	; 0x03
    bd56:	7c 81       	ldd	r23, Y+4	; 0x04
    bd58:	8d 81       	ldd	r24, Y+5	; 0x05
    bd5a:	9e 81       	ldd	r25, Y+6	; 0x06
    bd5c:	0e 94 6f 77 	call	0xeede	; 0xeede <__fixunssfsi>
    bd60:	66 95       	lsr	r22
    bd62:	66 95       	lsr	r22
    bd64:	66 95       	lsr	r22
    bd66:	6f 5f       	subi	r22, 0xFF	; 255
		sprite->x = tile * 8;
    bd68:	88 e0       	ldi	r24, 0x08	; 8
    bd6a:	68 9f       	mul	r22, r24
    bd6c:	b0 01       	movw	r22, r0
    bd6e:	11 24       	eor	r1, r1
    bd70:	88 27       	eor	r24, r24
    bd72:	77 fd       	sbrc	r23, 7
    bd74:	80 95       	com	r24
    bd76:	98 2f       	mov	r25, r24
    bd78:	0e 94 9d 77 	call	0xef3a	; 0xef3a <__floatsisf>
    bd7c:	6b 83       	std	Y+3, r22	; 0x03
    bd7e:	7c 83       	std	Y+4, r23	; 0x04
    bd80:	8d 83       	std	Y+5, r24	; 0x05
    bd82:	9e 83       	std	Y+6, r25	; 0x06
	}
	sprite->recoiled = 1;
    bd84:	81 e0       	ldi	r24, 0x01	; 1
    bd86:	8a 83       	std	Y+2, r24	; 0x02
}
    bd88:	df 91       	pop	r29
    bd8a:	cf 91       	pop	r28
    bd8c:	08 95       	ret

0000bd8e <recoil_sprite_fine>:

void recoil_sprite_fine(Player* p, SpriteShared* sprite)
{	
    bd8e:	cf 93       	push	r28
    bd90:	df 93       	push	r29
    bd92:	eb 01       	movw	r28, r22
	float speed = get_delta(p, sprite);
    bd94:	0e 94 b2 5c 	call	0xb964	; 0xb964 <get_delta>
    bd98:	9b 01       	movw	r18, r22
    bd9a:	ac 01       	movw	r20, r24
	
	if (sprite->direction == D_UP)
    bd9c:	88 81       	ld	r24, Y
    bd9e:	81 11       	cpse	r24, r1
    bda0:	07 c0       	rjmp	.+14     	; 0xbdb0 <recoil_sprite_fine+0x22>
	{
		sprite->y += speed;
    bda2:	6f 81       	ldd	r22, Y+7	; 0x07
    bda4:	78 85       	ldd	r23, Y+8	; 0x08
    bda6:	89 85       	ldd	r24, Y+9	; 0x09
    bda8:	9a 85       	ldd	r25, Y+10	; 0x0a
    bdaa:	0e 94 9a 76 	call	0xed34	; 0xed34 <__addsf3>
    bdae:	11 c0       	rjmp	.+34     	; 0xbdd2 <recoil_sprite_fine+0x44>
	}
	else if (sprite->direction == D_RIGHT)
    bdb0:	81 30       	cpi	r24, 0x01	; 1
    bdb2:	39 f4       	brne	.+14     	; 0xbdc2 <recoil_sprite_fine+0x34>
	{
		sprite->x -= speed;
    bdb4:	6b 81       	ldd	r22, Y+3	; 0x03
    bdb6:	7c 81       	ldd	r23, Y+4	; 0x04
    bdb8:	8d 81       	ldd	r24, Y+5	; 0x05
    bdba:	9e 81       	ldd	r25, Y+6	; 0x06
    bdbc:	0e 94 99 76 	call	0xed32	; 0xed32 <__subsf3>
    bdc0:	13 c0       	rjmp	.+38     	; 0xbde8 <recoil_sprite_fine+0x5a>
	}
	else if (sprite->direction == D_DOWN)
    bdc2:	82 30       	cpi	r24, 0x02	; 2
    bdc4:	59 f4       	brne	.+22     	; 0xbddc <recoil_sprite_fine+0x4e>
	{
		sprite->y -= speed;
    bdc6:	6f 81       	ldd	r22, Y+7	; 0x07
    bdc8:	78 85       	ldd	r23, Y+8	; 0x08
    bdca:	89 85       	ldd	r24, Y+9	; 0x09
    bdcc:	9a 85       	ldd	r25, Y+10	; 0x0a
    bdce:	0e 94 99 76 	call	0xed32	; 0xed32 <__subsf3>
    bdd2:	6f 83       	std	Y+7, r22	; 0x07
    bdd4:	78 87       	std	Y+8, r23	; 0x08
    bdd6:	89 87       	std	Y+9, r24	; 0x09
    bdd8:	9a 87       	std	Y+10, r25	; 0x0a
    bdda:	0a c0       	rjmp	.+20     	; 0xbdf0 <recoil_sprite_fine+0x62>
	}
	else
	{
		sprite->x += speed;
    bddc:	6b 81       	ldd	r22, Y+3	; 0x03
    bdde:	7c 81       	ldd	r23, Y+4	; 0x04
    bde0:	8d 81       	ldd	r24, Y+5	; 0x05
    bde2:	9e 81       	ldd	r25, Y+6	; 0x06
    bde4:	0e 94 9a 76 	call	0xed34	; 0xed34 <__addsf3>
    bde8:	6b 83       	std	Y+3, r22	; 0x03
    bdea:	7c 83       	std	Y+4, r23	; 0x04
    bdec:	8d 83       	std	Y+5, r24	; 0x05
    bdee:	9e 83       	std	Y+6, r25	; 0x06
	}
	sprite->recoiled = 1;
    bdf0:	81 e0       	ldi	r24, 0x01	; 1
    bdf2:	8a 83       	std	Y+2, r24	; 0x02
}
    bdf4:	df 91       	pop	r29
    bdf6:	cf 91       	pop	r28
    bdf8:	08 95       	ret

0000bdfa <solid_square_tile>:

u8 solid_square_tile(int tile_index)
{
	u8 tile = level.level_map[tile_index];
    bdfa:	85 54       	subi	r24, 0x45	; 69
    bdfc:	93 4f       	sbci	r25, 0xF3	; 243
    bdfe:	fc 01       	movw	r30, r24
    be00:	81 81       	ldd	r24, Z+1	; 0x01
	
	if (tile == L_BRICK) return tile;
    be02:	81 30       	cpi	r24, 0x01	; 1
    be04:	31 f0       	breq	.+12     	; 0xbe12 <solid_square_tile+0x18>
	if (tile == L_METAL) return tile;
    be06:	82 30       	cpi	r24, 0x02	; 2
    be08:	31 f0       	breq	.+12     	; 0xbe16 <solid_square_tile+0x1c>
	if (tile == L_FENCE) return tile;
    be0a:	87 33       	cpi	r24, 0x37	; 55
    be0c:	31 f0       	breq	.+12     	; 0xbe1a <solid_square_tile+0x20>

	return 0;
    be0e:	80 e0       	ldi	r24, 0x00	; 0
    be10:	08 95       	ret
    be12:	81 e0       	ldi	r24, 0x01	; 1
    be14:	08 95       	ret
    be16:	82 e0       	ldi	r24, 0x02	; 2
    be18:	08 95       	ret
    be1a:	87 e3       	ldi	r24, 0x37	; 55
}
    be1c:	08 95       	ret

0000be1e <solid_directional_tile>:

u8 solid_directional_tile(int tile_index)
{
	u8 tile = level.level_map[tile_index];
    be1e:	85 54       	subi	r24, 0x45	; 69
    be20:	93 4f       	sbci	r25, 0xF3	; 243
    be22:	fc 01       	movw	r30, r24
    be24:	81 81       	ldd	r24, Z+1	; 0x01

	if (tile == L_TL) return tile;
    be26:	83 30       	cpi	r24, 0x03	; 3
    be28:	41 f0       	breq	.+16     	; 0xbe3a <solid_directional_tile+0x1c>
	if (tile == L_BR) return tile;
    be2a:	86 30       	cpi	r24, 0x06	; 6
    be2c:	41 f0       	breq	.+16     	; 0xbe3e <solid_directional_tile+0x20>
	if (tile == L_TR) return tile;
    be2e:	84 30       	cpi	r24, 0x04	; 4
    be30:	41 f0       	breq	.+16     	; 0xbe42 <solid_directional_tile+0x24>
	if (tile == L_BL) return tile;
    be32:	85 30       	cpi	r24, 0x05	; 5
    be34:	41 f0       	breq	.+16     	; 0xbe46 <solid_directional_tile+0x28>
	
	return 0;
    be36:	80 e0       	ldi	r24, 0x00	; 0
    be38:	08 95       	ret
    be3a:	83 e0       	ldi	r24, 0x03	; 3
    be3c:	08 95       	ret
    be3e:	86 e0       	ldi	r24, 0x06	; 6
    be40:	08 95       	ret
    be42:	84 e0       	ldi	r24, 0x04	; 4
    be44:	08 95       	ret
    be46:	85 e0       	ldi	r24, 0x05	; 5
}
    be48:	08 95       	ret

0000be4a <solid_tile>:

u8 solid_tile(int tile_index)
{
    be4a:	9c 01       	movw	r18, r24
	u8 tile = level.level_map[tile_index];
    be4c:	fc 01       	movw	r30, r24
    be4e:	e5 54       	subi	r30, 0x45	; 69
    be50:	f3 4f       	sbci	r31, 0xF3	; 243
    be52:	91 81       	ldd	r25, Z+1	; 0x01
	
	if (tile == L_BRICK) return tile;
    be54:	91 30       	cpi	r25, 0x01	; 1
    be56:	39 f0       	breq	.+14     	; 0xbe66 <solid_tile+0x1c>
	if (tile == L_METAL) return tile;
    be58:	92 30       	cpi	r25, 0x02	; 2
    be5a:	39 f0       	breq	.+14     	; 0xbe6a <solid_tile+0x20>
	if (tile == L_FENCE) return tile;
    be5c:	97 33       	cpi	r25, 0x37	; 55
    be5e:	39 f0       	breq	.+14     	; 0xbe6e <solid_tile+0x24>
	return solid_directional_tile(tile_index);
    be60:	c9 01       	movw	r24, r18
    be62:	0c 94 0f 5f 	jmp	0xbe1e	; 0xbe1e <solid_directional_tile>
    be66:	81 e0       	ldi	r24, 0x01	; 1
    be68:	08 95       	ret
    be6a:	82 e0       	ldi	r24, 0x02	; 2
    be6c:	08 95       	ret
    be6e:	87 e3       	ldi	r24, 0x37	; 55
}
    be70:	08 95       	ret

0000be72 <collides_directional_tile>:

u8 collides_directional_tile(int tile_index, u8 x, u8 y, u8 width, u8 height)
{
    be72:	7f 92       	push	r7
    be74:	8f 92       	push	r8
    be76:	9f 92       	push	r9
    be78:	af 92       	push	r10
    be7a:	bf 92       	push	r11
    be7c:	cf 92       	push	r12
    be7e:	df 92       	push	r13
    be80:	ef 92       	push	r14
    be82:	ff 92       	push	r15
    be84:	0f 93       	push	r16
    be86:	1f 93       	push	r17
    be88:	cf 93       	push	r28
    be8a:	df 93       	push	r29
    be8c:	b6 2e       	mov	r11, r22
    be8e:	94 2e       	mov	r9, r20
    be90:	d2 2f       	mov	r29, r18
	u8 tile = level.level_map[tile_index];
    be92:	fc 01       	movw	r30, r24
    be94:	e5 54       	subi	r30, 0x45	; 69
    be96:	f3 4f       	sbci	r31, 0xF3	; 243
    be98:	d1 80       	ldd	r13, Z+1	; 0x01
	u8 tile_x = (tile_index % 30) * 8;
    be9a:	6e e1       	ldi	r22, 0x1E	; 30
    be9c:	70 e0       	ldi	r23, 0x00	; 0
    be9e:	0e 94 85 76 	call	0xed0a	; 0xed0a <__divmodhi4>
    bea2:	f8 2e       	mov	r15, r24
    bea4:	ff 0c       	add	r15, r15
    bea6:	ff 0c       	add	r15, r15
    bea8:	ff 0c       	add	r15, r15
	u8 tile_y = (tile_index / 30 + 3) * 8;
    beaa:	6d 5f       	subi	r22, 0xFD	; 253
    beac:	7f 4f       	sbci	r23, 0xFF	; 255
    beae:	16 2f       	mov	r17, r22
    beb0:	11 0f       	add	r17, r17
    beb2:	11 0f       	add	r17, r17
    beb4:	11 0f       	add	r17, r17

	if ((tile == L_TL) || (tile == L_BR))
    beb6:	83 e0       	ldi	r24, 0x03	; 3
    beb8:	d8 16       	cp	r13, r24
    beba:	19 f0       	breq	.+6      	; 0xbec2 <collides_directional_tile+0x50>
    bebc:	86 e0       	ldi	r24, 0x06	; 6
    bebe:	d8 12       	cpse	r13, r24
    bec0:	31 c0       	rjmp	.+98     	; 0xbf24 <collides_directional_tile+0xb2>
    bec2:	cf ef       	ldi	r28, 0xFF	; 255
    bec4:	c0 0f       	add	r28, r16
	{
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x, y, x, y+height-1)) return tile;
    bec6:	c9 0d       	add	r28, r9
    bec8:	27 e0       	ldi	r18, 0x07	; 7
    beca:	72 2e       	mov	r7, r18
    becc:	7f 0c       	add	r7, r15
    bece:	37 e0       	ldi	r19, 0x07	; 7
    bed0:	83 2e       	mov	r8, r19
    bed2:	81 0e       	add	r8, r17
    bed4:	ac 2e       	mov	r10, r28
    bed6:	cb 2c       	mov	r12, r11
    bed8:	e9 2c       	mov	r14, r9
    beda:	0b 2d       	mov	r16, r11
    bedc:	21 2f       	mov	r18, r17
    bede:	47 2d       	mov	r20, r7
    bee0:	68 2d       	mov	r22, r8
    bee2:	8f 2d       	mov	r24, r15
    bee4:	0e 94 49 58 	call	0xb092	; 0xb092 <LBLineIntersect>
    bee8:	81 11       	cpse	r24, r1
    beea:	58 c0       	rjmp	.+176    	; 0xbf9c <collides_directional_tile+0x12a>
    beec:	d1 50       	subi	r29, 0x01	; 1
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x, y, x+width-1, y)) return tile;
    beee:	db 0d       	add	r29, r11
    bef0:	a9 2c       	mov	r10, r9
    bef2:	cd 2e       	mov	r12, r29
    bef4:	21 2f       	mov	r18, r17
    bef6:	47 2d       	mov	r20, r7
    bef8:	68 2d       	mov	r22, r8
    befa:	8f 2d       	mov	r24, r15
    befc:	0e 94 49 58 	call	0xb092	; 0xb092 <LBLineIntersect>
    bf00:	81 11       	cpse	r24, r1
    bf02:	4c c0       	rjmp	.+152    	; 0xbf9c <collides_directional_tile+0x12a>
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x+width-1, y, x+width-1, y+height-1)) return tile;
    bf04:	ac 2e       	mov	r10, r28
    bf06:	0d 2f       	mov	r16, r29
    bf08:	21 2f       	mov	r18, r17
    bf0a:	47 2d       	mov	r20, r7
    bf0c:	68 2d       	mov	r22, r8
    bf0e:	8f 2d       	mov	r24, r15
    bf10:	0e 94 49 58 	call	0xb092	; 0xb092 <LBLineIntersect>
    bf14:	81 11       	cpse	r24, r1
    bf16:	42 c0       	rjmp	.+132    	; 0xbf9c <collides_directional_tile+0x12a>
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x, y+height-1, x+width-1, y+height-1)) return tile;
    bf18:	ec 2e       	mov	r14, r28
    bf1a:	0b 2d       	mov	r16, r11
    bf1c:	21 2f       	mov	r18, r17
    bf1e:	47 2d       	mov	r20, r7
    bf20:	68 2d       	mov	r22, r8
    bf22:	34 c0       	rjmp	.+104    	; 0xbf8c <collides_directional_tile+0x11a>
	}
	else if ((tile == L_TR) || (tile == L_BL))
    bf24:	8c ef       	ldi	r24, 0xFC	; 252
    bf26:	8d 0d       	add	r24, r13
    bf28:	82 30       	cpi	r24, 0x02	; 2
    bf2a:	b0 f5       	brcc	.+108    	; 0xbf98 <collides_directional_tile+0x126>
    bf2c:	cf ef       	ldi	r28, 0xFF	; 255
    bf2e:	c0 0f       	add	r28, r16
	{
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x, y, x, y+height-1)) return tile;
    bf30:	c4 0f       	add	r28, r20
    bf32:	87 e0       	ldi	r24, 0x07	; 7
    bf34:	78 2e       	mov	r7, r24
    bf36:	71 0e       	add	r7, r17
    bf38:	97 e0       	ldi	r25, 0x07	; 7
    bf3a:	89 2e       	mov	r8, r25
    bf3c:	8f 0c       	add	r8, r15
    bf3e:	ac 2e       	mov	r10, r28
    bf40:	cb 2c       	mov	r12, r11
    bf42:	e4 2e       	mov	r14, r20
    bf44:	0b 2d       	mov	r16, r11
    bf46:	27 2d       	mov	r18, r7
    bf48:	48 2d       	mov	r20, r8
    bf4a:	61 2f       	mov	r22, r17
    bf4c:	8f 2d       	mov	r24, r15
    bf4e:	0e 94 49 58 	call	0xb092	; 0xb092 <LBLineIntersect>
    bf52:	81 11       	cpse	r24, r1
    bf54:	23 c0       	rjmp	.+70     	; 0xbf9c <collides_directional_tile+0x12a>
    bf56:	d1 50       	subi	r29, 0x01	; 1
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x, y, x+width-1, y)) return tile;
    bf58:	db 0d       	add	r29, r11
    bf5a:	a9 2c       	mov	r10, r9
    bf5c:	cd 2e       	mov	r12, r29
    bf5e:	27 2d       	mov	r18, r7
    bf60:	48 2d       	mov	r20, r8
    bf62:	61 2f       	mov	r22, r17
    bf64:	8f 2d       	mov	r24, r15
    bf66:	0e 94 49 58 	call	0xb092	; 0xb092 <LBLineIntersect>
    bf6a:	81 11       	cpse	r24, r1
    bf6c:	17 c0       	rjmp	.+46     	; 0xbf9c <collides_directional_tile+0x12a>
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x+width-1, y, x+width-1, y+height-1)) return tile;
    bf6e:	ac 2e       	mov	r10, r28
    bf70:	0d 2f       	mov	r16, r29
    bf72:	27 2d       	mov	r18, r7
    bf74:	48 2d       	mov	r20, r8
    bf76:	61 2f       	mov	r22, r17
    bf78:	8f 2d       	mov	r24, r15
    bf7a:	0e 94 49 58 	call	0xb092	; 0xb092 <LBLineIntersect>
    bf7e:	81 11       	cpse	r24, r1
    bf80:	0d c0       	rjmp	.+26     	; 0xbf9c <collides_directional_tile+0x12a>
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x, y+height-1, x+width-1, y+height-1)) return tile;
    bf82:	ec 2e       	mov	r14, r28
    bf84:	0b 2d       	mov	r16, r11
    bf86:	27 2d       	mov	r18, r7
    bf88:	48 2d       	mov	r20, r8
    bf8a:	61 2f       	mov	r22, r17
    bf8c:	8f 2d       	mov	r24, r15
    bf8e:	0e 94 49 58 	call	0xb092	; 0xb092 <LBLineIntersect>
    bf92:	81 11       	cpse	r24, r1
    bf94:	03 c0       	rjmp	.+6      	; 0xbf9c <collides_directional_tile+0x12a>
    bf96:	03 c0       	rjmp	.+6      	; 0xbf9e <collides_directional_tile+0x12c>
	}
	
	return 0;
    bf98:	80 e0       	ldi	r24, 0x00	; 0
    bf9a:	01 c0       	rjmp	.+2      	; 0xbf9e <collides_directional_tile+0x12c>
    bf9c:	8d 2d       	mov	r24, r13
}
    bf9e:	df 91       	pop	r29
    bfa0:	cf 91       	pop	r28
    bfa2:	1f 91       	pop	r17
    bfa4:	0f 91       	pop	r16
    bfa6:	ff 90       	pop	r15
    bfa8:	ef 90       	pop	r14
    bfaa:	df 90       	pop	r13
    bfac:	cf 90       	pop	r12
    bfae:	bf 90       	pop	r11
    bfb0:	af 90       	pop	r10
    bfb2:	9f 90       	pop	r9
    bfb4:	8f 90       	pop	r8
    bfb6:	7f 90       	pop	r7
    bfb8:	08 95       	ret

0000bfba <player_shot>:

u8 player_shot(Player* p, Shot* shot)
{
    bfba:	8f 92       	push	r8
    bfbc:	9f 92       	push	r9
    bfbe:	af 92       	push	r10
    bfc0:	cf 92       	push	r12
    bfc2:	ef 92       	push	r14
    bfc4:	0f 93       	push	r16
    bfc6:	1f 93       	push	r17
    bfc8:	cf 93       	push	r28
    bfca:	df 93       	push	r29
    bfcc:	4c 01       	movw	r8, r24
    bfce:	eb 01       	movw	r28, r22
	return LBCollides(p->shared.x+1,p->shared.y+1,14,14,shot->shared.x+2,shot->shared.y+2,4,4) &&
    bfd0:	20 e0       	ldi	r18, 0x00	; 0
    bfd2:	30 e0       	ldi	r19, 0x00	; 0
    bfd4:	40 e0       	ldi	r20, 0x00	; 0
    bfd6:	50 e4       	ldi	r21, 0x40	; 64
    bfd8:	6f 81       	ldd	r22, Y+7	; 0x07
    bfda:	78 85       	ldd	r23, Y+8	; 0x08
    bfdc:	89 85       	ldd	r24, Y+9	; 0x09
    bfde:	9a 85       	ldd	r25, Y+10	; 0x0a
    bfe0:	0e 94 9a 76 	call	0xed34	; 0xed34 <__addsf3>
    bfe4:	0e 94 6f 77 	call	0xeede	; 0xeede <__fixunssfsi>
    bfe8:	e6 2e       	mov	r14, r22
    bfea:	20 e0       	ldi	r18, 0x00	; 0
    bfec:	30 e0       	ldi	r19, 0x00	; 0
    bfee:	40 e0       	ldi	r20, 0x00	; 0
    bff0:	50 e4       	ldi	r21, 0x40	; 64
    bff2:	6b 81       	ldd	r22, Y+3	; 0x03
    bff4:	7c 81       	ldd	r23, Y+4	; 0x04
    bff6:	8d 81       	ldd	r24, Y+5	; 0x05
    bff8:	9e 81       	ldd	r25, Y+6	; 0x06
    bffa:	0e 94 9a 76 	call	0xed34	; 0xed34 <__addsf3>
    bffe:	0e 94 6f 77 	call	0xeede	; 0xeede <__fixunssfsi>
    c002:	06 2f       	mov	r16, r22
    c004:	20 e0       	ldi	r18, 0x00	; 0
    c006:	30 e0       	ldi	r19, 0x00	; 0
    c008:	40 e8       	ldi	r20, 0x80	; 128
    c00a:	5f e3       	ldi	r21, 0x3F	; 63
    c00c:	f4 01       	movw	r30, r8
    c00e:	67 81       	ldd	r22, Z+7	; 0x07
    c010:	70 85       	ldd	r23, Z+8	; 0x08
    c012:	81 85       	ldd	r24, Z+9	; 0x09
    c014:	92 85       	ldd	r25, Z+10	; 0x0a
    c016:	0e 94 9a 76 	call	0xed34	; 0xed34 <__addsf3>
    c01a:	0e 94 6f 77 	call	0xeede	; 0xeede <__fixunssfsi>
    c01e:	16 2f       	mov	r17, r22
    c020:	20 e0       	ldi	r18, 0x00	; 0
    c022:	30 e0       	ldi	r19, 0x00	; 0
    c024:	40 e8       	ldi	r20, 0x80	; 128
    c026:	5f e3       	ldi	r21, 0x3F	; 63
    c028:	f4 01       	movw	r30, r8
    c02a:	63 81       	ldd	r22, Z+3	; 0x03
    c02c:	74 81       	ldd	r23, Z+4	; 0x04
    c02e:	85 81       	ldd	r24, Z+5	; 0x05
    c030:	96 81       	ldd	r25, Z+6	; 0x06
    c032:	0e 94 9a 76 	call	0xed34	; 0xed34 <__addsf3>
    c036:	0e 94 6f 77 	call	0xeede	; 0xeede <__fixunssfsi>
    c03a:	86 2f       	mov	r24, r22
    c03c:	94 e0       	ldi	r25, 0x04	; 4
    c03e:	a9 2e       	mov	r10, r25
    c040:	24 e0       	ldi	r18, 0x04	; 4
    c042:	c2 2e       	mov	r12, r18
    c044:	2e e0       	ldi	r18, 0x0E	; 14
    c046:	4e e0       	ldi	r20, 0x0E	; 14
    c048:	61 2f       	mov	r22, r17
    c04a:	0e 94 1f 58 	call	0xb03e	; 0xb03e <LBCollides>
		   p->grace_frame == FRAMES_PER_GRACE &&
    c04e:	88 23       	and	r24, r24
    c050:	41 f0       	breq	.+16     	; 0xc062 <player_shot+0xa8>
	return 0;
}

u8 player_shot(Player* p, Shot* shot)
{
	return LBCollides(p->shared.x+1,p->shared.y+1,14,14,shot->shared.x+2,shot->shared.y+2,4,4) &&
    c052:	f4 01       	movw	r30, r8
    c054:	87 89       	ldd	r24, Z+23	; 0x17
    c056:	88 37       	cpi	r24, 0x78	; 120
    c058:	21 f4       	brne	.+8      	; 0xc062 <player_shot+0xa8>
		   p->grace_frame == FRAMES_PER_GRACE &&
    c05a:	81 e0       	ldi	r24, 0x01	; 1
    c05c:	9f 85       	ldd	r25, Y+15	; 0x0f
    c05e:	99 30       	cpi	r25, 0x09	; 9
    c060:	08 f4       	brcc	.+2      	; 0xc064 <player_shot+0xaa>
    c062:	80 e0       	ldi	r24, 0x00	; 0
		   shot->distance > DISTANCE_TO_ARM;
}
    c064:	df 91       	pop	r29
    c066:	cf 91       	pop	r28
    c068:	1f 91       	pop	r17
    c06a:	0f 91       	pop	r16
    c06c:	ef 90       	pop	r14
    c06e:	cf 90       	pop	r12
    c070:	af 90       	pop	r10
    c072:	9f 90       	pop	r9
    c074:	8f 90       	pop	r8
    c076:	08 95       	ret

0000c078 <turret_shot>:

u8 turret_shot(Turret* t, Shot* shot)
{
    c078:	af 92       	push	r10
    c07a:	cf 92       	push	r12
    c07c:	ef 92       	push	r14
    c07e:	0f 93       	push	r16
    c080:	1f 93       	push	r17
    c082:	cf 93       	push	r28
    c084:	df 93       	push	r29
    c086:	ec 01       	movw	r28, r24
    c088:	8b 01       	movw	r16, r22
	return LBCollides(t->shared.x,t->shared.y,8,8,shot->shared.x+2,shot->shared.y+2,4,4) && t->lives > 0;
    c08a:	20 e0       	ldi	r18, 0x00	; 0
    c08c:	30 e0       	ldi	r19, 0x00	; 0
    c08e:	40 e0       	ldi	r20, 0x00	; 0
    c090:	50 e4       	ldi	r21, 0x40	; 64
    c092:	fb 01       	movw	r30, r22
    c094:	67 81       	ldd	r22, Z+7	; 0x07
    c096:	70 85       	ldd	r23, Z+8	; 0x08
    c098:	81 85       	ldd	r24, Z+9	; 0x09
    c09a:	92 85       	ldd	r25, Z+10	; 0x0a
    c09c:	0e 94 9a 76 	call	0xed34	; 0xed34 <__addsf3>
    c0a0:	0e 94 6f 77 	call	0xeede	; 0xeede <__fixunssfsi>
    c0a4:	e6 2e       	mov	r14, r22
    c0a6:	20 e0       	ldi	r18, 0x00	; 0
    c0a8:	30 e0       	ldi	r19, 0x00	; 0
    c0aa:	40 e0       	ldi	r20, 0x00	; 0
    c0ac:	50 e4       	ldi	r21, 0x40	; 64
    c0ae:	f8 01       	movw	r30, r16
    c0b0:	63 81       	ldd	r22, Z+3	; 0x03
    c0b2:	74 81       	ldd	r23, Z+4	; 0x04
    c0b4:	85 81       	ldd	r24, Z+5	; 0x05
    c0b6:	96 81       	ldd	r25, Z+6	; 0x06
    c0b8:	0e 94 9a 76 	call	0xed34	; 0xed34 <__addsf3>
    c0bc:	0e 94 6f 77 	call	0xeede	; 0xeede <__fixunssfsi>
    c0c0:	06 2f       	mov	r16, r22
    c0c2:	6f 81       	ldd	r22, Y+7	; 0x07
    c0c4:	78 85       	ldd	r23, Y+8	; 0x08
    c0c6:	89 85       	ldd	r24, Y+9	; 0x09
    c0c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    c0ca:	0e 94 6f 77 	call	0xeede	; 0xeede <__fixunssfsi>
    c0ce:	16 2f       	mov	r17, r22
    c0d0:	6b 81       	ldd	r22, Y+3	; 0x03
    c0d2:	7c 81       	ldd	r23, Y+4	; 0x04
    c0d4:	8d 81       	ldd	r24, Y+5	; 0x05
    c0d6:	9e 81       	ldd	r25, Y+6	; 0x06
    c0d8:	0e 94 6f 77 	call	0xeede	; 0xeede <__fixunssfsi>
    c0dc:	86 2f       	mov	r24, r22
    c0de:	94 e0       	ldi	r25, 0x04	; 4
    c0e0:	a9 2e       	mov	r10, r25
    c0e2:	24 e0       	ldi	r18, 0x04	; 4
    c0e4:	c2 2e       	mov	r12, r18
    c0e6:	28 e0       	ldi	r18, 0x08	; 8
    c0e8:	48 e0       	ldi	r20, 0x08	; 8
    c0ea:	61 2f       	mov	r22, r17
    c0ec:	0e 94 1f 58 	call	0xb03e	; 0xb03e <LBCollides>
    c0f0:	88 23       	and	r24, r24
    c0f2:	39 f0       	breq	.+14     	; 0xc102 <turret_shot+0x8a>
    c0f4:	91 e0       	ldi	r25, 0x01	; 1
    c0f6:	8b 85       	ldd	r24, Y+11	; 0x0b
    c0f8:	81 11       	cpse	r24, r1
    c0fa:	01 c0       	rjmp	.+2      	; 0xc0fe <turret_shot+0x86>
    c0fc:	90 e0       	ldi	r25, 0x00	; 0
    c0fe:	89 2f       	mov	r24, r25
    c100:	01 c0       	rjmp	.+2      	; 0xc104 <turret_shot+0x8c>
    c102:	80 e0       	ldi	r24, 0x00	; 0
}
    c104:	df 91       	pop	r29
    c106:	cf 91       	pop	r28
    c108:	1f 91       	pop	r17
    c10a:	0f 91       	pop	r16
    c10c:	ef 90       	pop	r14
    c10e:	cf 90       	pop	r12
    c110:	af 90       	pop	r10
    c112:	08 95       	ret

0000c114 <collision_detect_boundries>:

u8 collision_detect_boundries(SpriteShared* sprite)
{
    c114:	cf 92       	push	r12
    c116:	df 92       	push	r13
    c118:	ef 92       	push	r14
    c11a:	ff 92       	push	r15
    c11c:	cf 93       	push	r28
    c11e:	df 93       	push	r29
    c120:	ec 01       	movw	r28, r24
	if (sprite->x < 0  || sprite->x + 8 > 240 ||
    c122:	cb 80       	ldd	r12, Y+3	; 0x03
    c124:	dc 80       	ldd	r13, Y+4	; 0x04
    c126:	ed 80       	ldd	r14, Y+5	; 0x05
    c128:	fe 80       	ldd	r15, Y+6	; 0x06
    c12a:	20 e0       	ldi	r18, 0x00	; 0
    c12c:	30 e0       	ldi	r19, 0x00	; 0
    c12e:	a9 01       	movw	r20, r18
    c130:	c7 01       	movw	r24, r14
    c132:	b6 01       	movw	r22, r12
    c134:	0e 94 fe 76 	call	0xedfc	; 0xedfc <__cmpsf2>
    c138:	87 fd       	sbrc	r24, 7
    c13a:	31 c0       	rjmp	.+98     	; 0xc19e <collision_detect_boundries+0x8a>
    c13c:	20 e0       	ldi	r18, 0x00	; 0
    c13e:	30 e0       	ldi	r19, 0x00	; 0
    c140:	40 e0       	ldi	r20, 0x00	; 0
    c142:	51 e4       	ldi	r21, 0x41	; 65
    c144:	c7 01       	movw	r24, r14
    c146:	b6 01       	movw	r22, r12
    c148:	0e 94 9a 76 	call	0xed34	; 0xed34 <__addsf3>
    c14c:	20 e0       	ldi	r18, 0x00	; 0
    c14e:	30 e0       	ldi	r19, 0x00	; 0
    c150:	40 e7       	ldi	r20, 0x70	; 112
    c152:	53 e4       	ldi	r21, 0x43	; 67
    c154:	0e 94 4d 78 	call	0xf09a	; 0xf09a <__gesf2>
    c158:	18 16       	cp	r1, r24
    c15a:	0c f1       	brlt	.+66     	; 0xc19e <collision_detect_boundries+0x8a>
	    sprite->y < 24 || sprite->y + 8 > 224)
    c15c:	cf 80       	ldd	r12, Y+7	; 0x07
    c15e:	d8 84       	ldd	r13, Y+8	; 0x08
    c160:	e9 84       	ldd	r14, Y+9	; 0x09
    c162:	fa 84       	ldd	r15, Y+10	; 0x0a
	return LBCollides(t->shared.x,t->shared.y,8,8,shot->shared.x+2,shot->shared.y+2,4,4) && t->lives > 0;
}

u8 collision_detect_boundries(SpriteShared* sprite)
{
	if (sprite->x < 0  || sprite->x + 8 > 240 ||
    c164:	20 e0       	ldi	r18, 0x00	; 0
    c166:	30 e0       	ldi	r19, 0x00	; 0
    c168:	40 ec       	ldi	r20, 0xC0	; 192
    c16a:	51 e4       	ldi	r21, 0x41	; 65
    c16c:	c7 01       	movw	r24, r14
    c16e:	b6 01       	movw	r22, r12
    c170:	0e 94 fe 76 	call	0xedfc	; 0xedfc <__cmpsf2>
    c174:	87 fd       	sbrc	r24, 7
    c176:	13 c0       	rjmp	.+38     	; 0xc19e <collision_detect_boundries+0x8a>
	    sprite->y < 24 || sprite->y + 8 > 224)
    c178:	20 e0       	ldi	r18, 0x00	; 0
    c17a:	30 e0       	ldi	r19, 0x00	; 0
    c17c:	40 e0       	ldi	r20, 0x00	; 0
    c17e:	51 e4       	ldi	r21, 0x41	; 65
    c180:	c7 01       	movw	r24, r14
    c182:	b6 01       	movw	r22, r12
    c184:	0e 94 9a 76 	call	0xed34	; 0xed34 <__addsf3>
    c188:	c1 e0       	ldi	r28, 0x01	; 1
    c18a:	20 e0       	ldi	r18, 0x00	; 0
    c18c:	30 e0       	ldi	r19, 0x00	; 0
    c18e:	40 e6       	ldi	r20, 0x60	; 96
    c190:	53 e4       	ldi	r21, 0x43	; 67
    c192:	0e 94 4d 78 	call	0xf09a	; 0xf09a <__gesf2>
    c196:	18 16       	cp	r1, r24
    c198:	1c f0       	brlt	.+6      	; 0xc1a0 <collision_detect_boundries+0x8c>
    c19a:	c0 e0       	ldi	r28, 0x00	; 0
    c19c:	01 c0       	rjmp	.+2      	; 0xc1a0 <collision_detect_boundries+0x8c>
	{
		return 1;
    c19e:	c1 e0       	ldi	r28, 0x01	; 1
	}
	return 0;
}
    c1a0:	8c 2f       	mov	r24, r28
    c1a2:	df 91       	pop	r29
    c1a4:	cf 91       	pop	r28
    c1a6:	ff 90       	pop	r15
    c1a8:	ef 90       	pop	r14
    c1aa:	df 90       	pop	r13
    c1ac:	cf 90       	pop	r12
    c1ae:	08 95       	ret

0000c1b0 <drop_item>:

void drop_item(int tile_index, const char* map, u8 item_type)
{
    c1b0:	1f 93       	push	r17
    c1b2:	cf 93       	push	r28
    c1b4:	df 93       	push	r29
    c1b6:	9c 01       	movw	r18, r24
    c1b8:	fb 01       	movw	r30, r22
    c1ba:	14 2f       	mov	r17, r20
	u8 x = tile_index % 30;
    c1bc:	6e e1       	ldi	r22, 0x1E	; 30
    c1be:	70 e0       	ldi	r23, 0x00	; 0
    c1c0:	0e 94 85 76 	call	0xed0a	; 0xed0a <__divmodhi4>
    c1c4:	96 2f       	mov	r25, r22
	u8 y = 3 + tile_index / 30;
    c1c6:	63 e0       	ldi	r22, 0x03	; 3
    c1c8:	69 0f       	add	r22, r25
	
	if (level.level_map[tile_index] == L_EMPTY)
    c1ca:	e9 01       	movw	r28, r18
    c1cc:	c5 54       	subi	r28, 0x45	; 69
    c1ce:	d3 4f       	sbci	r29, 0xF3	; 243
    c1d0:	49 81       	ldd	r20, Y+1	; 0x01
    c1d2:	44 23       	and	r20, r20
    c1d4:	71 f0       	breq	.+28     	; 0xc1f2 <drop_item+0x42>
	{
		DrawMap2(x, y, map);
		level.level_map[tile_index] = item_type;
	}
	else if (level.level_map[tile_index+1] == L_EMPTY)
    c1d6:	e9 01       	movw	r28, r18
    c1d8:	c4 54       	subi	r28, 0x44	; 68
    c1da:	d3 4f       	sbci	r29, 0xF3	; 243
    c1dc:	49 81       	ldd	r20, Y+1	; 0x01
    c1de:	44 23       	and	r20, r20
    c1e0:	91 f0       	breq	.+36     	; 0xc206 <drop_item+0x56>
	{
		DrawMap2(x+1, y, map);
		level.level_map[tile_index+1] = item_type;
	}
	else if (level.level_map[tile_index+30] == L_EMPTY)
    c1e2:	e9 01       	movw	r28, r18
    c1e4:	c7 52       	subi	r28, 0x27	; 39
    c1e6:	d3 4f       	sbci	r29, 0xF3	; 243
    c1e8:	49 81       	ldd	r20, Y+1	; 0x01
    c1ea:	41 11       	cpse	r20, r1
    c1ec:	04 c0       	rjmp	.+8      	; 0xc1f6 <drop_item+0x46>
	{
		DrawMap2(x, y+1, map);
    c1ee:	64 e0       	ldi	r22, 0x04	; 4
    c1f0:	69 0f       	add	r22, r25
    c1f2:	af 01       	movw	r20, r30
    c1f4:	0a c0       	rjmp	.+20     	; 0xc20a <drop_item+0x5a>
		level.level_map[tile_index+30] = item_type;
	}
	else if (level.level_map[tile_index+31] == L_EMPTY)
    c1f6:	e9 01       	movw	r28, r18
    c1f8:	c6 52       	subi	r28, 0x26	; 38
    c1fa:	d3 4f       	sbci	r29, 0xF3	; 243
    c1fc:	29 81       	ldd	r18, Y+1	; 0x01
    c1fe:	21 11       	cpse	r18, r1
    c200:	07 c0       	rjmp	.+14     	; 0xc210 <drop_item+0x60>
	{
		DrawMap2(x+1, y+1, map);
    c202:	64 e0       	ldi	r22, 0x04	; 4
    c204:	69 0f       	add	r22, r25
    c206:	af 01       	movw	r20, r30
    c208:	8f 5f       	subi	r24, 0xFF	; 255
    c20a:	0e 94 0b 56 	call	0xac16	; 0xac16 <DrawMap>
		level.level_map[tile_index+31] = item_type;
    c20e:	19 83       	std	Y+1, r17	; 0x01
	}
}
    c210:	df 91       	pop	r29
    c212:	cf 91       	pop	r28
    c214:	1f 91       	pop	r17
    c216:	08 95       	ret

0000c218 <kill_player>:

void kill_player(Player* player, u8 hud_x)
{
    c218:	ff 92       	push	r15
    c21a:	0f 93       	push	r16
    c21c:	1f 93       	push	r17
    c21e:	cf 93       	push	r28
    c220:	df 93       	push	r29
    c222:	ec 01       	movw	r28, r24
    c224:	f6 2e       	mov	r15, r22
	u8 x = player->shared.x / 8;
	u8 y = player->shared.y / 8 - 3;
    c226:	20 e0       	ldi	r18, 0x00	; 0
    c228:	30 e0       	ldi	r19, 0x00	; 0
    c22a:	40 e0       	ldi	r20, 0x00	; 0
    c22c:	5e e3       	ldi	r21, 0x3E	; 62
    c22e:	6f 81       	ldd	r22, Y+7	; 0x07
    c230:	78 85       	ldd	r23, Y+8	; 0x08
    c232:	89 85       	ldd	r24, Y+9	; 0x09
    c234:	9a 85       	ldd	r25, Y+10	; 0x0a
    c236:	0e 94 51 78 	call	0xf0a2	; 0xf0a2 <__mulsf3>
    c23a:	20 e0       	ldi	r18, 0x00	; 0
    c23c:	30 e0       	ldi	r19, 0x00	; 0
    c23e:	40 e4       	ldi	r20, 0x40	; 64
    c240:	50 e4       	ldi	r21, 0x40	; 64
    c242:	0e 94 99 76 	call	0xed32	; 0xed32 <__subsf3>
    c246:	0e 94 6f 77 	call	0xeede	; 0xeede <__fixunssfsi>
	int tile_index = (y * 30) + x;
    c24a:	8e e1       	ldi	r24, 0x1E	; 30
    c24c:	68 9f       	mul	r22, r24
    c24e:	80 01       	movw	r16, r0
    c250:	11 24       	eor	r1, r1
	}
}

void kill_player(Player* player, u8 hud_x)
{
	u8 x = player->shared.x / 8;
    c252:	20 e0       	ldi	r18, 0x00	; 0
    c254:	30 e0       	ldi	r19, 0x00	; 0
    c256:	40 e0       	ldi	r20, 0x00	; 0
    c258:	5e e3       	ldi	r21, 0x3E	; 62
    c25a:	6b 81       	ldd	r22, Y+3	; 0x03
    c25c:	7c 81       	ldd	r23, Y+4	; 0x04
    c25e:	8d 81       	ldd	r24, Y+5	; 0x05
    c260:	9e 81       	ldd	r25, Y+6	; 0x06
    c262:	0e 94 51 78 	call	0xf0a2	; 0xf0a2 <__mulsf3>
    c266:	0e 94 6f 77 	call	0xeede	; 0xeede <__fixunssfsi>
	u8 y = player->shared.y / 8 - 3;
	int tile_index = (y * 30) + x;
    c26a:	06 0f       	add	r16, r22
    c26c:	11 1d       	adc	r17, r1

	if (player->has_over_speed)
    c26e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    c270:	88 23       	and	r24, r24
    c272:	79 f0       	breq	.+30     	; 0xc292 <kill_player+0x7a>
	{
		SetTile(hud_x+10, 1, 0);
    c274:	40 e0       	ldi	r20, 0x00	; 0
    c276:	50 e0       	ldi	r21, 0x00	; 0
    c278:	61 e0       	ldi	r22, 0x01	; 1
    c27a:	8a e0       	ldi	r24, 0x0A	; 10
    c27c:	8f 0d       	add	r24, r15
    c27e:	0e 94 ec 47 	call	0x8fd8	; 0x8fd8 <SetTile>
		drop_item(tile_index, map_speed_itm, L_SPEED);
    c282:	47 e0       	ldi	r20, 0x07	; 7
    c284:	69 e0       	ldi	r22, 0x09	; 9
    c286:	76 e8       	ldi	r23, 0x86	; 134
    c288:	c8 01       	movw	r24, r16
    c28a:	0e 94 d8 60 	call	0xc1b0	; 0xc1b0 <drop_item>
		player->max_speed = MAX_SPEED;
    c28e:	82 e3       	ldi	r24, 0x32	; 50
    c290:	88 8f       	std	Y+24, r24	; 0x18
	}
	if (player->has_rocket)
    c292:	89 8d       	ldd	r24, Y+25	; 0x19
    c294:	88 23       	and	r24, r24
    c296:	69 f0       	breq	.+26     	; 0xc2b2 <kill_player+0x9a>
	{
		SetTile(hud_x+11, 1, 0);
    c298:	40 e0       	ldi	r20, 0x00	; 0
    c29a:	50 e0       	ldi	r21, 0x00	; 0
    c29c:	61 e0       	ldi	r22, 0x01	; 1
    c29e:	8b e0       	ldi	r24, 0x0B	; 11
    c2a0:	8f 0d       	add	r24, r15
    c2a2:	0e 94 ec 47 	call	0x8fd8	; 0x8fd8 <SetTile>
		drop_item(tile_index, map_rocket_itm, L_ROCKET);
    c2a6:	49 e0       	ldi	r20, 0x09	; 9
    c2a8:	63 e0       	ldi	r22, 0x03	; 3
    c2aa:	76 e8       	ldi	r23, 0x86	; 134
    c2ac:	c8 01       	movw	r24, r16
    c2ae:	0e 94 d8 60 	call	0xc1b0	; 0xc1b0 <drop_item>
	}
	player->has_over_speed = false;
    c2b2:	1a 8e       	std	Y+26, r1	; 0x1a
	player->has_rocket = false;
    c2b4:	19 8e       	std	Y+25, r1	; 0x19
	player->flags = player->flags | EXPLODING_FLAG;
    c2b6:	8c 89       	ldd	r24, Y+20	; 0x14
    c2b8:	81 60       	ori	r24, 0x01	; 1
    c2ba:	8c 8b       	std	Y+20, r24	; 0x14
}
    c2bc:	df 91       	pop	r29
    c2be:	cf 91       	pop	r28
    c2c0:	1f 91       	pop	r17
    c2c2:	0f 91       	pop	r16
    c2c4:	ff 90       	pop	r15
    c2c6:	08 95       	ret

0000c2c8 <get_interesting_tile_indexes_shot>:

void get_interesting_tile_indexes_shot(int* tiles, u8 x, u8 y, u8 direction)
{
    c2c8:	fc 01       	movw	r30, r24
	int tile_root = (y * 30) + x;
    c2ca:	70 e0       	ldi	r23, 0x00	; 0
    c2cc:	8e e1       	ldi	r24, 0x1E	; 30
    c2ce:	48 9f       	mul	r20, r24
    c2d0:	60 0d       	add	r22, r0
    c2d2:	71 1d       	adc	r23, r1
    c2d4:	11 24       	eor	r1, r1
	if (direction == D_UP)
    c2d6:	21 11       	cpse	r18, r1
    c2d8:	05 c0       	rjmp	.+10     	; 0xc2e4 <get_interesting_tile_indexes_shot+0x1c>
	{
		tiles[0] = tile_root;
    c2da:	71 83       	std	Z+1, r23	; 0x01
    c2dc:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+1;
    c2de:	6f 5f       	subi	r22, 0xFF	; 255
    c2e0:	7f 4f       	sbci	r23, 0xFF	; 255
    c2e2:	0c c0       	rjmp	.+24     	; 0xc2fc <get_interesting_tile_indexes_shot+0x34>
	}
	else if (direction == D_RIGHT)
	{
		tiles[0] = tile_root + 1;
    c2e4:	cb 01       	movw	r24, r22
	if (direction == D_UP)
	{
		tiles[0] = tile_root;
		tiles[1] = tiles[0]+1;
	}
	else if (direction == D_RIGHT)
    c2e6:	21 30       	cpi	r18, 0x01	; 1
    c2e8:	11 f4       	brne	.+4      	; 0xc2ee <get_interesting_tile_indexes_shot+0x26>
	{
		tiles[0] = tile_root + 1;
    c2ea:	01 96       	adiw	r24, 0x01	; 1
    c2ec:	03 c0       	rjmp	.+6      	; 0xc2f4 <get_interesting_tile_indexes_shot+0x2c>
    c2ee:	4e 96       	adiw	r24, 0x1e	; 30
		tiles[1] = tiles[0]+30;
	}
	else if (direction == D_DOWN)
    c2f0:	22 30       	cpi	r18, 0x02	; 2
    c2f2:	39 f4       	brne	.+14     	; 0xc302 <get_interesting_tile_indexes_shot+0x3a>
	{
		tiles[0] = tile_root + 30;
    c2f4:	91 83       	std	Z+1, r25	; 0x01
    c2f6:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+1;
    c2f8:	61 5e       	subi	r22, 0xE1	; 225
    c2fa:	7f 4f       	sbci	r23, 0xFF	; 255
    c2fc:	73 83       	std	Z+3, r23	; 0x03
    c2fe:	62 83       	std	Z+2, r22	; 0x02
    c300:	08 95       	ret
	}
	else
	{
		tiles[0] = tile_root;
    c302:	71 83       	std	Z+1, r23	; 0x01
    c304:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+30;
    c306:	93 83       	std	Z+3, r25	; 0x03
    c308:	82 83       	std	Z+2, r24	; 0x02
    c30a:	08 95       	ret

0000c30c <explode_tile>:
	}
}

void explode_tile(TileAnimations* ta, int tile_index)
{
    c30c:	ef 92       	push	r14
    c30e:	ff 92       	push	r15
    c310:	0f 93       	push	r16
    c312:	1f 93       	push	r17
    c314:	cf 93       	push	r28
    c316:	df 93       	push	r29
    c318:	ec 01       	movw	r28, r24
    c31a:	8b 01       	movw	r16, r22
	SetTile(tile_index % 30, 3 + tile_index / 30, 0);
    c31c:	8e e1       	ldi	r24, 0x1E	; 30
    c31e:	e8 2e       	mov	r14, r24
    c320:	f1 2c       	mov	r15, r1
    c322:	cb 01       	movw	r24, r22
    c324:	b7 01       	movw	r22, r14
    c326:	0e 94 85 76 	call	0xed0a	; 0xed0a <__divmodhi4>
    c32a:	6d 5f       	subi	r22, 0xFD	; 253
    c32c:	40 e0       	ldi	r20, 0x00	; 0
    c32e:	50 e0       	ldi	r21, 0x00	; 0
    c330:	0e 94 ec 47 	call	0x8fd8	; 0x8fd8 <SetTile>
	if (ta->anims[ta->next_available].tile_index != 0)
    c334:	88 81       	ld	r24, Y
    c336:	fe 01       	movw	r30, r28
    c338:	9e e0       	ldi	r25, 0x0E	; 14
    c33a:	89 9f       	mul	r24, r25
    c33c:	e0 0d       	add	r30, r0
    c33e:	f1 1d       	adc	r31, r1
    c340:	11 24       	eor	r1, r1
    c342:	85 85       	ldd	r24, Z+13	; 0x0d
    c344:	96 85       	ldd	r25, Z+14	; 0x0e
    c346:	00 97       	sbiw	r24, 0x00	; 0
    c348:	41 f0       	breq	.+16     	; 0xc35a <explode_tile+0x4e>
	{
		SetTile(ta->anims[ta->next_available].tile_index % 30, 3 + ta->anims[ta->next_available].tile_index / 30, 0);
    c34a:	b7 01       	movw	r22, r14
    c34c:	0e 94 85 76 	call	0xed0a	; 0xed0a <__divmodhi4>
    c350:	6d 5f       	subi	r22, 0xFD	; 253
    c352:	40 e0       	ldi	r20, 0x00	; 0
    c354:	50 e0       	ldi	r21, 0x00	; 0
    c356:	0e 94 ec 47 	call	0x8fd8	; 0x8fd8 <SetTile>
	}
	ta->anims[ta->next_available].tile_index = tile_index;
    c35a:	88 81       	ld	r24, Y
    c35c:	fe 01       	movw	r30, r28
    c35e:	9e e0       	ldi	r25, 0x0E	; 14
    c360:	89 9f       	mul	r24, r25
    c362:	e0 0d       	add	r30, r0
    c364:	f1 1d       	adc	r31, r1
    c366:	11 24       	eor	r1, r1
    c368:	16 87       	std	Z+14, r17	; 0x0e
    c36a:	05 87       	std	Z+13, r16	; 0x0d
	ta->anims[ta->next_available].anim.current_anim = 0;
    c36c:	11 82       	std	Z+1, r1	; 0x01
	ta->next_available++;
    c36e:	8f 5f       	subi	r24, 0xFF	; 255
	if (ta->next_available == TILE_ANIMATIONS_LENGTH)
    c370:	82 30       	cpi	r24, 0x02	; 2
    c372:	11 f0       	breq	.+4      	; 0xc378 <explode_tile+0x6c>
	{
		SetTile(ta->anims[ta->next_available].tile_index % 30, 3 + ta->anims[ta->next_available].tile_index / 30, 0);
	}
	ta->anims[ta->next_available].tile_index = tile_index;
	ta->anims[ta->next_available].anim.current_anim = 0;
	ta->next_available++;
    c374:	88 83       	st	Y, r24
    c376:	01 c0       	rjmp	.+2      	; 0xc37a <explode_tile+0x6e>
	if (ta->next_available == TILE_ANIMATIONS_LENGTH)
	{
		ta->next_available = 0;
    c378:	18 82       	st	Y, r1
	}
}
    c37a:	df 91       	pop	r29
    c37c:	cf 91       	pop	r28
    c37e:	1f 91       	pop	r17
    c380:	0f 91       	pop	r16
    c382:	ff 90       	pop	r15
    c384:	ef 90       	pop	r14
    c386:	08 95       	ret

0000c388 <richochet>:

void richochet(u8 tile_type, SpriteShared* sprite)
{	
    c388:	fb 01       	movw	r30, r22
	switch (tile_type)
    c38a:	84 30       	cpi	r24, 0x04	; 4
    c38c:	71 f0       	breq	.+28     	; 0xc3aa <richochet+0x22>
    c38e:	18 f4       	brcc	.+6      	; 0xc396 <richochet+0xe>
    c390:	83 30       	cpi	r24, 0x03	; 3
    c392:	31 f0       	breq	.+12     	; 0xc3a0 <richochet+0x18>
    c394:	08 95       	ret
    c396:	85 30       	cpi	r24, 0x05	; 5
    c398:	99 f0       	breq	.+38     	; 0xc3c0 <richochet+0x38>
    c39a:	86 30       	cpi	r24, 0x06	; 6
    c39c:	59 f0       	breq	.+22     	; 0xc3b4 <richochet+0x2c>
    c39e:	08 95       	ret
	{
		case L_TL:
			if (sprite->direction == D_UP || sprite->direction == D_DOWN)
    c3a0:	80 81       	ld	r24, Z
    c3a2:	8d 7f       	andi	r24, 0xFD	; 253
    c3a4:	29 f4       	brne	.+10     	; 0xc3b0 <richochet+0x28>
				sprite->direction = D_RIGHT;
    c3a6:	81 e0       	ldi	r24, 0x01	; 1
    c3a8:	09 c0       	rjmp	.+18     	; 0xc3bc <richochet+0x34>
			else
				sprite->direction = D_DOWN;
			break;
		case L_TR:
			if (sprite->direction == D_UP || sprite->direction == D_DOWN)
    c3aa:	80 81       	ld	r24, Z
    c3ac:	8d 7f       	andi	r24, 0xFD	; 253
    c3ae:	29 f0       	breq	.+10     	; 0xc3ba <richochet+0x32>
	{
		case L_TL:
			if (sprite->direction == D_UP || sprite->direction == D_DOWN)
				sprite->direction = D_RIGHT;
			else
				sprite->direction = D_DOWN;
    c3b0:	82 e0       	ldi	r24, 0x02	; 2
    c3b2:	04 c0       	rjmp	.+8      	; 0xc3bc <richochet+0x34>
				sprite->direction = D_RIGHT;
			else
				sprite->direction = D_UP;
			break;
		case L_BR:
			if (sprite->direction == D_DOWN || sprite->direction == D_UP)
    c3b4:	80 81       	ld	r24, Z
    c3b6:	8d 7f       	andi	r24, 0xFD	; 253
    c3b8:	31 f4       	brne	.+12     	; 0xc3c6 <richochet+0x3e>
			else
				sprite->direction = D_DOWN;
			break;
		case L_TR:
			if (sprite->direction == D_UP || sprite->direction == D_DOWN)
				sprite->direction = D_LEFT;
    c3ba:	83 e0       	ldi	r24, 0x03	; 3
    c3bc:	80 83       	st	Z, r24
    c3be:	08 95       	ret
			else
				sprite->direction = D_DOWN;
			break;
		case L_BL:
			if (sprite->direction == D_DOWN || sprite->direction == D_UP)
    c3c0:	80 81       	ld	r24, Z
    c3c2:	8d 7f       	andi	r24, 0xFD	; 253
    c3c4:	81 f3       	breq	.-32     	; 0xc3a6 <richochet+0x1e>
				sprite->direction = D_RIGHT;
			else
				sprite->direction = D_UP;
    c3c6:	10 82       	st	Z, r1
    c3c8:	08 95       	ret

0000c3ca <collision_detect_shot>:
			break;
	}
}

void collision_detect_shot(Player* player, Shot* shot)
{	 
    c3ca:	2f 92       	push	r2
    c3cc:	3f 92       	push	r3
    c3ce:	4f 92       	push	r4
    c3d0:	5f 92       	push	r5
    c3d2:	6f 92       	push	r6
    c3d4:	7f 92       	push	r7
    c3d6:	8f 92       	push	r8
    c3d8:	9f 92       	push	r9
    c3da:	af 92       	push	r10
    c3dc:	bf 92       	push	r11
    c3de:	cf 92       	push	r12
    c3e0:	df 92       	push	r13
    c3e2:	ef 92       	push	r14
    c3e4:	ff 92       	push	r15
    c3e6:	0f 93       	push	r16
    c3e8:	1f 93       	push	r17
    c3ea:	cf 93       	push	r28
    c3ec:	df 93       	push	r29
    c3ee:	00 d0       	rcall	.+0      	; 0xc3f0 <collision_detect_shot+0x26>
    c3f0:	00 d0       	rcall	.+0      	; 0xc3f2 <collision_detect_shot+0x28>
    c3f2:	1f 92       	push	r1
    c3f4:	cd b7       	in	r28, 0x3d	; 61
    c3f6:	de b7       	in	r29, 0x3e	; 62
    c3f8:	3c 01       	movw	r6, r24
    c3fa:	4b 01       	movw	r8, r22
	int tiles[2] = {0, 0};
    c3fc:	1a 82       	std	Y+2, r1	; 0x02
    c3fe:	19 82       	std	Y+1, r1	; 0x01
    c400:	1c 82       	std	Y+4, r1	; 0x04
    c402:	1b 82       	std	Y+3, r1	; 0x03
	u8 x = shot->shared.x / 8;
	u8 y = shot->shared.y / 8 - 3;
    c404:	20 e0       	ldi	r18, 0x00	; 0
    c406:	30 e0       	ldi	r19, 0x00	; 0
    c408:	40 e0       	ldi	r20, 0x00	; 0
    c40a:	5e e3       	ldi	r21, 0x3E	; 62
    c40c:	db 01       	movw	r26, r22
    c40e:	17 96       	adiw	r26, 0x07	; 7
    c410:	6d 91       	ld	r22, X+
    c412:	7d 91       	ld	r23, X+
    c414:	8d 91       	ld	r24, X+
    c416:	9c 91       	ld	r25, X
    c418:	1a 97       	sbiw	r26, 0x0a	; 10
    c41a:	0e 94 51 78 	call	0xf0a2	; 0xf0a2 <__mulsf3>
    c41e:	20 e0       	ldi	r18, 0x00	; 0
    c420:	30 e0       	ldi	r19, 0x00	; 0
    c422:	40 e4       	ldi	r20, 0x40	; 64
    c424:	50 e4       	ldi	r21, 0x40	; 64
    c426:	0e 94 99 76 	call	0xed32	; 0xed32 <__subsf3>
    c42a:	0e 94 6f 77 	call	0xeede	; 0xeede <__fixunssfsi>
    c42e:	16 2f       	mov	r17, r22
}

void collision_detect_shot(Player* player, Shot* shot)
{	 
	int tiles[2] = {0, 0};
	u8 x = shot->shared.x / 8;
    c430:	20 e0       	ldi	r18, 0x00	; 0
    c432:	30 e0       	ldi	r19, 0x00	; 0
    c434:	40 e0       	ldi	r20, 0x00	; 0
    c436:	5e e3       	ldi	r21, 0x3E	; 62
    c438:	f4 01       	movw	r30, r8
    c43a:	63 81       	ldd	r22, Z+3	; 0x03
    c43c:	74 81       	ldd	r23, Z+4	; 0x04
    c43e:	85 81       	ldd	r24, Z+5	; 0x05
    c440:	96 81       	ldd	r25, Z+6	; 0x06
    c442:	0e 94 51 78 	call	0xf0a2	; 0xf0a2 <__mulsf3>
    c446:	0e 94 6f 77 	call	0xeede	; 0xeede <__fixunssfsi>
	Player* p = 0;
    u8 hit = 0;
	u8 brick_index = 0;
	u8 angle_tile = 0;
	
	get_interesting_tile_indexes_shot(tiles, x, y, shot->shared.direction);
    c44a:	d4 01       	movw	r26, r8
    c44c:	2c 91       	ld	r18, X
    c44e:	41 2f       	mov	r20, r17
    c450:	ce 01       	movw	r24, r28
    c452:	01 96       	adiw	r24, 0x01	; 1
    c454:	0e 94 64 61 	call	0xc2c8	; 0xc2c8 <get_interesting_tile_indexes_shot>
	
	/* Level boundries first */
	if (collision_detect_boundries(&shot->shared))
    c458:	c4 01       	movw	r24, r8
    c45a:	0e 94 8a 60 	call	0xc114	; 0xc114 <collision_detect_boundries>
    c45e:	88 23       	and	r24, r24
    c460:	69 f0       	breq	.+26     	; 0xc47c <collision_detect_shot+0xb2>
	{
		init_shot_state(shot, shot->shot_type);
    c462:	f4 01       	movw	r30, r8
    c464:	63 85       	ldd	r22, Z+11	; 0x0b
    c466:	c4 01       	movw	r24, r8
    c468:	0e 94 ce 59 	call	0xb39c	; 0xb39c <init_shot_state>
		player->active_shots--;
    c46c:	d3 01       	movw	r26, r6
    c46e:	51 96       	adiw	r26, 0x11	; 17
    c470:	8c 91       	ld	r24, X
    c472:	51 97       	sbiw	r26, 0x11	; 17
    c474:	81 50       	subi	r24, 0x01	; 1
    c476:	51 96       	adiw	r26, 0x11	; 17
    c478:	8c 93       	st	X, r24
		return;
    c47a:	ab c1       	rjmp	.+854    	; 0xc7d2 <collision_detect_shot+0x408>
	}
	
	/* Player interaction */
	if (player_shot(&player1, shot) && !(player1.flags & EXPLODING_FLAG))
    c47c:	b4 01       	movw	r22, r8
    c47e:	8c e3       	ldi	r24, 0x3C	; 60
    c480:	9c e0       	ldi	r25, 0x0C	; 12
    c482:	0e 94 dd 5f 	call	0xbfba	; 0xbfba <player_shot>
    c486:	88 23       	and	r24, r24
    c488:	b9 f0       	breq	.+46     	; 0xc4b8 <collision_detect_shot+0xee>
    c48a:	80 91 50 0c 	lds	r24, 0x0C50
    c48e:	80 fd       	sbrc	r24, 0
    c490:	13 c0       	rjmp	.+38     	; 0xc4b8 <collision_detect_shot+0xee>
	{
		p = &player1;
		hud_x = 0;
		player2.level_score++;
    c492:	80 91 ba 0f 	lds	r24, 0x0FBA
    c496:	8f 5f       	subi	r24, 0xFF	; 255
    c498:	80 93 ba 0f 	sts	0x0FBA, r24
		player2.score++;
    c49c:	80 91 b9 0f 	lds	r24, 0x0FB9
    c4a0:	8f 5f       	subi	r24, 0xFF	; 255
    c4a2:	80 93 b9 0f 	sts	0x0FB9, r24
		render_score(&player2, 15);
    c4a6:	6f e0       	ldi	r22, 0x0F	; 15
    c4a8:	8a ea       	ldi	r24, 0xAA	; 170
    c4aa:	9f e0       	ldi	r25, 0x0F	; 15
    c4ac:	0e 94 f0 5c 	call	0xb9e0	; 0xb9e0 <render_score>
	}
	
	/* Player interaction */
	if (player_shot(&player1, shot) && !(player1.flags & EXPLODING_FLAG))
	{
		p = &player1;
    c4b0:	0c e3       	ldi	r16, 0x3C	; 60
    c4b2:	1c e0       	ldi	r17, 0x0C	; 12
		hud_x = 0;
    c4b4:	f1 2c       	mov	r15, r1
		player2.level_score++;
		player2.score++;
		render_score(&player2, 15);
    c4b6:	54 c0       	rjmp	.+168    	; 0xc560 <collision_detect_shot+0x196>
	}
	else if (player_shot(&player2, shot) && !(player2.flags & EXPLODING_FLAG) && !(game.boss_fight_status))
    c4b8:	b4 01       	movw	r22, r8
    c4ba:	8a ea       	ldi	r24, 0xAA	; 170
    c4bc:	9f e0       	ldi	r25, 0x0F	; 15
    c4be:	0e 94 dd 5f 	call	0xbfba	; 0xbfba <player_shot>
    c4c2:	90 91 15 0c 	lds	r25, 0x0C15
    c4c6:	88 23       	and	r24, r24
    c4c8:	d1 f0       	breq	.+52     	; 0xc4fe <collision_detect_shot+0x134>
    c4ca:	80 91 be 0f 	lds	r24, 0x0FBE
    c4ce:	80 fd       	sbrc	r24, 0
    c4d0:	16 c0       	rjmp	.+44     	; 0xc4fe <collision_detect_shot+0x134>
    c4d2:	91 11       	cpse	r25, r1
    c4d4:	14 c0       	rjmp	.+40     	; 0xc4fe <collision_detect_shot+0x134>
	{
		p = &player2;
		hud_x = 15;
		player1.level_score++;
    c4d6:	80 91 4c 0c 	lds	r24, 0x0C4C
    c4da:	8f 5f       	subi	r24, 0xFF	; 255
    c4dc:	80 93 4c 0c 	sts	0x0C4C, r24
		player1.score++;
    c4e0:	80 91 4b 0c 	lds	r24, 0x0C4B
    c4e4:	8f 5f       	subi	r24, 0xFF	; 255
    c4e6:	80 93 4b 0c 	sts	0x0C4B, r24
		render_score(&player1, 0);
    c4ea:	60 e0       	ldi	r22, 0x00	; 0
    c4ec:	8c e3       	ldi	r24, 0x3C	; 60
    c4ee:	9c e0       	ldi	r25, 0x0C	; 12
    c4f0:	0e 94 f0 5c 	call	0xb9e0	; 0xb9e0 <render_score>
		player2.score++;
		render_score(&player2, 15);
	}
	else if (player_shot(&player2, shot) && !(player2.flags & EXPLODING_FLAG) && !(game.boss_fight_status))
	{
		p = &player2;
    c4f4:	0a ea       	ldi	r16, 0xAA	; 170
    c4f6:	1f e0       	ldi	r17, 0x0F	; 15
		hud_x = 15;
    c4f8:	6f e0       	ldi	r22, 0x0F	; 15
    c4fa:	f6 2e       	mov	r15, r22
		player1.level_score++;
		player1.score++;
		render_score(&player1, 0);
    c4fc:	31 c0       	rjmp	.+98     	; 0xc560 <collision_detect_shot+0x196>
	}
	else if (game.boss_fight_status == BOSS_FIGHT)
    c4fe:	94 30       	cpi	r25, 0x04	; 4
    c500:	91 f5       	brne	.+100    	; 0xc566 <collision_detect_shot+0x19c>
	{
		if (turret_shot(&turret1, shot))
    c502:	b4 01       	movw	r22, r8
    c504:	82 e7       	ldi	r24, 0x72	; 114
    c506:	90 e1       	ldi	r25, 0x10	; 16
    c508:	0e 94 3c 60 	call	0xc078	; 0xc078 <turret_shot>
    c50c:	88 23       	and	r24, r24
    c50e:	41 f0       	breq	.+16     	; 0xc520 <collision_detect_shot+0x156>
		{
			turret1.lives--;
    c510:	80 91 7d 10 	lds	r24, 0x107D
    c514:	81 50       	subi	r24, 0x01	; 1
    c516:	80 93 7d 10 	sts	0x107D, r24
			init_shot_state(shot, shot->shot_type);
    c51a:	f4 01       	movw	r30, r8
    c51c:	63 85       	ldd	r22, Z+11	; 0x0b
    c51e:	0f c0       	rjmp	.+30     	; 0xc53e <collision_detect_shot+0x174>
			game.boss_fight_player->active_shots--;
			SFX_TANK_EXPLODE;
		}
		else if (turret_shot(&turret2, shot))
    c520:	b4 01       	movw	r22, r8
    c522:	8e e3       	ldi	r24, 0x3E	; 62
    c524:	90 e1       	ldi	r25, 0x10	; 16
    c526:	0e 94 3c 60 	call	0xc078	; 0xc078 <turret_shot>
    c52a:	88 23       	and	r24, r24
    c52c:	e1 f0       	breq	.+56     	; 0xc566 <collision_detect_shot+0x19c>
		{
			turret2.lives--;
    c52e:	80 91 49 10 	lds	r24, 0x1049
    c532:	81 50       	subi	r24, 0x01	; 1
    c534:	80 93 49 10 	sts	0x1049, r24
			init_shot_state(shot, shot->shot_type);
    c538:	d4 01       	movw	r26, r8
    c53a:	1b 96       	adiw	r26, 0x0b	; 11
    c53c:	6c 91       	ld	r22, X
    c53e:	c4 01       	movw	r24, r8
    c540:	0e 94 ce 59 	call	0xb39c	; 0xb39c <init_shot_state>
			game.boss_fight_player->active_shots--;
    c544:	e0 91 18 0c 	lds	r30, 0x0C18
    c548:	f0 91 19 0c 	lds	r31, 0x0C19
    c54c:	81 89       	ldd	r24, Z+17	; 0x11
    c54e:	81 50       	subi	r24, 0x01	; 1
    c550:	81 8b       	std	Z+17, r24	; 0x11
			SFX_TANK_EXPLODE;
    c552:	2f ef       	ldi	r18, 0xFF	; 255
    c554:	40 e1       	ldi	r20, 0x10	; 16
    c556:	67 e0       	ldi	r22, 0x07	; 7
    c558:	84 e0       	ldi	r24, 0x04	; 4
    c55a:	0e 94 a4 4b 	call	0x9748	; 0x9748 <TriggerNote>
    c55e:	03 c0       	rjmp	.+6      	; 0xc566 <collision_detect_shot+0x19c>
		}
	}
	if (p)
    c560:	01 15       	cp	r16, r1
    c562:	11 05       	cpc	r17, r1
    c564:	59 f4       	brne	.+22     	; 0xc57c <collision_detect_shot+0x1b2>
    c566:	fe 01       	movw	r30, r28
    c568:	31 96       	adiw	r30, 0x01	; 1
    c56a:	2f 01       	movw	r4, r30
    c56c:	1d 82       	std	Y+5, r1	; 0x05
    c56e:	f1 2c       	mov	r15, r1
    c570:	d1 2c       	mov	r13, r1
    c572:	10 e0       	ldi	r17, 0x00	; 0
		else if (tile == L_BRICK && LBCollides(shot->shared.x+2,shot->shared.y+2,4,4,(tiles[i]%30)*8,(tiles[i]/30)*8+24,8,8))
		{
			hit = hit | HIT_BRICK;
			brick_index = i;
		}
		else if (tile == L_METAL && LBCollides(shot->shared.x+2,shot->shared.y+2,4,4,(tiles[i]%30)*8,(tiles[i]/30)*8+24,8,8))
    c574:	5e e1       	ldi	r21, 0x1E	; 30
    c576:	25 2e       	mov	r2, r21
    c578:	31 2c       	mov	r3, r1
    c57a:	44 c0       	rjmp	.+136    	; 0xc604 <collision_detect_shot+0x23a>
			SFX_TANK_EXPLODE;
		}
	}
	if (p)
	{
		init_shot_state(shot, shot->shot_type);
    c57c:	d4 01       	movw	r26, r8
    c57e:	1b 96       	adiw	r26, 0x0b	; 11
    c580:	6c 91       	ld	r22, X
    c582:	c4 01       	movw	r24, r8
    c584:	0e 94 ce 59 	call	0xb39c	; 0xb39c <init_shot_state>
		player->active_shots--;
    c588:	f3 01       	movw	r30, r6
    c58a:	81 89       	ldd	r24, Z+17	; 0x11
    c58c:	81 50       	subi	r24, 0x01	; 1
    c58e:	81 8b       	std	Z+17, r24	; 0x11
		kill_player(p, hud_x);
    c590:	6f 2d       	mov	r22, r15
    c592:	c8 01       	movw	r24, r16
    c594:	0e 94 0c 61 	call	0xc218	; 0xc218 <kill_player>
		SFX_TANK_EXPLODE;
    c598:	2f ef       	ldi	r18, 0xFF	; 255
    c59a:	40 e1       	ldi	r20, 0x10	; 16
    c59c:	67 e0       	ldi	r22, 0x07	; 7
    c59e:	11 c1       	rjmp	.+546    	; 0xc7c2 <collision_detect_shot+0x3f8>
	for (u8 i = 0; i < 2; i++)
	{
		tile = level.level_map[tiles[i]];
		if (tile == L_EMPTY) continue;
		
		if (solid_directional_tile(tiles[i]) && collides_directional_tile(tiles[i], shot->shared.x+2, shot->shared.y+2,4,4))
    c5a0:	c5 01       	movw	r24, r10
    c5a2:	0e 94 0f 5f 	call	0xbe1e	; 0xbe1e <solid_directional_tile>
    c5a6:	88 23       	and	r24, r24
    c5a8:	c1 f1       	breq	.+112    	; 0xc61a <collision_detect_shot+0x250>
    c5aa:	20 e0       	ldi	r18, 0x00	; 0
    c5ac:	30 e0       	ldi	r19, 0x00	; 0
    c5ae:	40 e0       	ldi	r20, 0x00	; 0
    c5b0:	50 e4       	ldi	r21, 0x40	; 64
    c5b2:	f4 01       	movw	r30, r8
    c5b4:	67 81       	ldd	r22, Z+7	; 0x07
    c5b6:	70 85       	ldd	r23, Z+8	; 0x08
    c5b8:	81 85       	ldd	r24, Z+9	; 0x09
    c5ba:	92 85       	ldd	r25, Z+10	; 0x0a
    c5bc:	0e 94 9a 76 	call	0xed34	; 0xed34 <__addsf3>
    c5c0:	0e 94 6f 77 	call	0xeede	; 0xeede <__fixunssfsi>
    c5c4:	c6 2e       	mov	r12, r22
    c5c6:	20 e0       	ldi	r18, 0x00	; 0
    c5c8:	30 e0       	ldi	r19, 0x00	; 0
    c5ca:	40 e0       	ldi	r20, 0x00	; 0
    c5cc:	50 e4       	ldi	r21, 0x40	; 64
    c5ce:	d4 01       	movw	r26, r8
    c5d0:	13 96       	adiw	r26, 0x03	; 3
    c5d2:	6d 91       	ld	r22, X+
    c5d4:	7d 91       	ld	r23, X+
    c5d6:	8d 91       	ld	r24, X+
    c5d8:	9c 91       	ld	r25, X
    c5da:	16 97       	sbiw	r26, 0x06	; 6
    c5dc:	0e 94 9a 76 	call	0xed34	; 0xed34 <__addsf3>
    c5e0:	0e 94 6f 77 	call	0xeede	; 0xeede <__fixunssfsi>
    c5e4:	04 e0       	ldi	r16, 0x04	; 4
    c5e6:	24 e0       	ldi	r18, 0x04	; 4
    c5e8:	4c 2d       	mov	r20, r12
    c5ea:	c5 01       	movw	r24, r10
    c5ec:	0e 94 39 5f 	call	0xbe72	; 0xbe72 <collides_directional_tile>
    c5f0:	88 23       	and	r24, r24
    c5f2:	99 f0       	breq	.+38     	; 0xc61a <collision_detect_shot+0x250>
		{
			hit = hit | HIT_ANGLE;
    c5f4:	14 60       	ori	r17, 0x04	; 4
			angle_tile = tile;
    c5f6:	fe 2c       	mov	r15, r14
		SFX_TANK_EXPLODE;
		return;
	}
	
	/* Tile interaction */
	for (u8 i = 0; i < 2; i++)
    c5f8:	bd 81       	ldd	r27, Y+5	; 0x05
    c5fa:	b1 30       	cpi	r27, 0x01	; 1
    c5fc:	09 f4       	brne	.+2      	; 0xc600 <collision_detect_shot+0x236>
    c5fe:	88 c0       	rjmp	.+272    	; 0xc710 <collision_detect_shot+0x346>
    c600:	f1 e0       	ldi	r31, 0x01	; 1
    c602:	fd 83       	std	Y+5, r31	; 0x05
	{
		tile = level.level_map[tiles[i]];
    c604:	d2 01       	movw	r26, r4
    c606:	ad 90       	ld	r10, X+
    c608:	bd 90       	ld	r11, X+
    c60a:	2d 01       	movw	r4, r26
    c60c:	f5 01       	movw	r30, r10
    c60e:	e5 54       	subi	r30, 0x45	; 69
    c610:	f3 4f       	sbci	r31, 0xF3	; 243
    c612:	e1 80       	ldd	r14, Z+1	; 0x01
		if (tile == L_EMPTY) continue;
    c614:	ee 20       	and	r14, r14
    c616:	81 f3       	breq	.-32     	; 0xc5f8 <collision_detect_shot+0x22e>
    c618:	c3 cf       	rjmp	.-122    	; 0xc5a0 <collision_detect_shot+0x1d6>
		if (solid_directional_tile(tiles[i]) && collides_directional_tile(tiles[i], shot->shared.x+2, shot->shared.y+2,4,4))
		{
			hit = hit | HIT_ANGLE;
			angle_tile = tile;
		}
		else if (tile == L_BRICK && LBCollides(shot->shared.x+2,shot->shared.y+2,4,4,(tiles[i]%30)*8,(tiles[i]/30)*8+24,8,8))
    c61a:	b1 e0       	ldi	r27, 0x01	; 1
    c61c:	eb 12       	cpse	r14, r27
    c61e:	3b c0       	rjmp	.+118    	; 0xc696 <collision_detect_shot+0x2cc>
    c620:	c5 01       	movw	r24, r10
    c622:	b1 01       	movw	r22, r2
    c624:	0e 94 85 76 	call	0xed0a	; 0xed0a <__divmodhi4>
    c628:	6d 5f       	subi	r22, 0xFD	; 253
    c62a:	7f 4f       	sbci	r23, 0xFF	; 255
    c62c:	e6 2e       	mov	r14, r22
    c62e:	ee 0c       	add	r14, r14
    c630:	ee 0c       	add	r14, r14
    c632:	ee 0c       	add	r14, r14
    c634:	08 2f       	mov	r16, r24
    c636:	00 0f       	add	r16, r16
    c638:	00 0f       	add	r16, r16
    c63a:	00 0f       	add	r16, r16
    c63c:	20 e0       	ldi	r18, 0x00	; 0
    c63e:	30 e0       	ldi	r19, 0x00	; 0
    c640:	40 e0       	ldi	r20, 0x00	; 0
    c642:	50 e4       	ldi	r21, 0x40	; 64
    c644:	f4 01       	movw	r30, r8
    c646:	67 81       	ldd	r22, Z+7	; 0x07
    c648:	70 85       	ldd	r23, Z+8	; 0x08
    c64a:	81 85       	ldd	r24, Z+9	; 0x09
    c64c:	92 85       	ldd	r25, Z+10	; 0x0a
    c64e:	0e 94 9a 76 	call	0xed34	; 0xed34 <__addsf3>
    c652:	0e 94 6f 77 	call	0xeede	; 0xeede <__fixunssfsi>
    c656:	b6 2e       	mov	r11, r22
    c658:	20 e0       	ldi	r18, 0x00	; 0
    c65a:	30 e0       	ldi	r19, 0x00	; 0
    c65c:	40 e0       	ldi	r20, 0x00	; 0
    c65e:	50 e4       	ldi	r21, 0x40	; 64
    c660:	d4 01       	movw	r26, r8
    c662:	13 96       	adiw	r26, 0x03	; 3
    c664:	6d 91       	ld	r22, X+
    c666:	7d 91       	ld	r23, X+
    c668:	8d 91       	ld	r24, X+
    c66a:	9c 91       	ld	r25, X
    c66c:	16 97       	sbiw	r26, 0x06	; 6
    c66e:	0e 94 9a 76 	call	0xed34	; 0xed34 <__addsf3>
    c672:	0e 94 6f 77 	call	0xeede	; 0xeede <__fixunssfsi>
    c676:	86 2f       	mov	r24, r22
    c678:	38 e0       	ldi	r19, 0x08	; 8
    c67a:	a3 2e       	mov	r10, r19
    c67c:	48 e0       	ldi	r20, 0x08	; 8
    c67e:	c4 2e       	mov	r12, r20
    c680:	24 e0       	ldi	r18, 0x04	; 4
    c682:	44 e0       	ldi	r20, 0x04	; 4
    c684:	6b 2d       	mov	r22, r11
    c686:	0e 94 1f 58 	call	0xb03e	; 0xb03e <LBCollides>
    c68a:	88 23       	and	r24, r24
    c68c:	09 f4       	brne	.+2      	; 0xc690 <collision_detect_shot+0x2c6>
    c68e:	b4 cf       	rjmp	.-152    	; 0xc5f8 <collision_detect_shot+0x22e>
		{
			hit = hit | HIT_BRICK;
    c690:	12 60       	ori	r17, 0x02	; 2
			brick_index = i;
    c692:	dd 80       	ldd	r13, Y+5	; 0x05
    c694:	b1 cf       	rjmp	.-158    	; 0xc5f8 <collision_detect_shot+0x22e>
		}
		else if (tile == L_METAL && LBCollides(shot->shared.x+2,shot->shared.y+2,4,4,(tiles[i]%30)*8,(tiles[i]/30)*8+24,8,8))
    c696:	b2 e0       	ldi	r27, 0x02	; 2
    c698:	eb 12       	cpse	r14, r27
    c69a:	ae cf       	rjmp	.-164    	; 0xc5f8 <collision_detect_shot+0x22e>
    c69c:	c5 01       	movw	r24, r10
    c69e:	b1 01       	movw	r22, r2
    c6a0:	0e 94 85 76 	call	0xed0a	; 0xed0a <__divmodhi4>
    c6a4:	6d 5f       	subi	r22, 0xFD	; 253
    c6a6:	7f 4f       	sbci	r23, 0xFF	; 255
    c6a8:	e6 2e       	mov	r14, r22
    c6aa:	ee 0c       	add	r14, r14
    c6ac:	ee 0c       	add	r14, r14
    c6ae:	ee 0c       	add	r14, r14
    c6b0:	08 2f       	mov	r16, r24
    c6b2:	00 0f       	add	r16, r16
    c6b4:	00 0f       	add	r16, r16
    c6b6:	00 0f       	add	r16, r16
    c6b8:	20 e0       	ldi	r18, 0x00	; 0
    c6ba:	30 e0       	ldi	r19, 0x00	; 0
    c6bc:	40 e0       	ldi	r20, 0x00	; 0
    c6be:	50 e4       	ldi	r21, 0x40	; 64
    c6c0:	f4 01       	movw	r30, r8
    c6c2:	67 81       	ldd	r22, Z+7	; 0x07
    c6c4:	70 85       	ldd	r23, Z+8	; 0x08
    c6c6:	81 85       	ldd	r24, Z+9	; 0x09
    c6c8:	92 85       	ldd	r25, Z+10	; 0x0a
    c6ca:	0e 94 9a 76 	call	0xed34	; 0xed34 <__addsf3>
    c6ce:	0e 94 6f 77 	call	0xeede	; 0xeede <__fixunssfsi>
    c6d2:	b6 2e       	mov	r11, r22
    c6d4:	20 e0       	ldi	r18, 0x00	; 0
    c6d6:	30 e0       	ldi	r19, 0x00	; 0
    c6d8:	40 e0       	ldi	r20, 0x00	; 0
    c6da:	50 e4       	ldi	r21, 0x40	; 64
    c6dc:	d4 01       	movw	r26, r8
    c6de:	13 96       	adiw	r26, 0x03	; 3
    c6e0:	6d 91       	ld	r22, X+
    c6e2:	7d 91       	ld	r23, X+
    c6e4:	8d 91       	ld	r24, X+
    c6e6:	9c 91       	ld	r25, X
    c6e8:	16 97       	sbiw	r26, 0x06	; 6
    c6ea:	0e 94 9a 76 	call	0xed34	; 0xed34 <__addsf3>
    c6ee:	0e 94 6f 77 	call	0xeede	; 0xeede <__fixunssfsi>
    c6f2:	86 2f       	mov	r24, r22
    c6f4:	98 e0       	ldi	r25, 0x08	; 8
    c6f6:	a9 2e       	mov	r10, r25
    c6f8:	28 e0       	ldi	r18, 0x08	; 8
    c6fa:	c2 2e       	mov	r12, r18
    c6fc:	24 e0       	ldi	r18, 0x04	; 4
    c6fe:	44 e0       	ldi	r20, 0x04	; 4
    c700:	6b 2d       	mov	r22, r11
    c702:	0e 94 1f 58 	call	0xb03e	; 0xb03e <LBCollides>
    c706:	88 23       	and	r24, r24
    c708:	09 f4       	brne	.+2      	; 0xc70c <collision_detect_shot+0x342>
    c70a:	76 cf       	rjmp	.-276    	; 0xc5f8 <collision_detect_shot+0x22e>
        {
		    hit = hit | HIT_METAL;
    c70c:	11 60       	ori	r17, 0x01	; 1
    c70e:	74 cf       	rjmp	.-280    	; 0xc5f8 <collision_detect_shot+0x22e>
        }
	}
	
	if (hit & HIT_ANGLE)
    c710:	12 ff       	sbrs	r17, 2
    c712:	25 c0       	rjmp	.+74     	; 0xc75e <collision_detect_shot+0x394>
	{
		recoil_sprite_fine(player, &shot->shared);
    c714:	b4 01       	movw	r22, r8
    c716:	c3 01       	movw	r24, r6
    c718:	0e 94 c7 5e 	call	0xbd8e	; 0xbd8e <recoil_sprite_fine>
		richochet(angle_tile, &shot->shared);
    c71c:	b4 01       	movw	r22, r8
    c71e:	8f 2d       	mov	r24, r15
    c720:	0e 94 c4 61 	call	0xc388	; 0xc388 <richochet>
		shot->rebounds--;
    c724:	f4 01       	movw	r30, r8
    c726:	85 85       	ldd	r24, Z+13	; 0x0d
    c728:	81 50       	subi	r24, 0x01	; 1
    c72a:	85 87       	std	Z+13, r24	; 0x0d
		if (shot->rebounds <= 0)
    c72c:	81 11       	cpse	r24, r1
    c72e:	0b c0       	rjmp	.+22     	; 0xc746 <collision_detect_shot+0x37c>
		{
			init_shot_state(shot, shot->shot_type);
    c730:	63 85       	ldd	r22, Z+11	; 0x0b
    c732:	c4 01       	movw	r24, r8
    c734:	0e 94 ce 59 	call	0xb39c	; 0xb39c <init_shot_state>
			player->active_shots--;
    c738:	d3 01       	movw	r26, r6
    c73a:	51 96       	adiw	r26, 0x11	; 17
    c73c:	8c 91       	ld	r24, X
    c73e:	51 97       	sbiw	r26, 0x11	; 17
    c740:	81 50       	subi	r24, 0x01	; 1
    c742:	51 96       	adiw	r26, 0x11	; 17
    c744:	8c 93       	st	X, r24
		}
		SFX_METAL;
    c746:	80 91 50 0c 	lds	r24, 0x0C50
    c74a:	80 fd       	sbrc	r24, 0
    c74c:	42 c0       	rjmp	.+132    	; 0xc7d2 <collision_detect_shot+0x408>
    c74e:	80 91 be 0f 	lds	r24, 0x0FBE
    c752:	80 fd       	sbrc	r24, 0
    c754:	3e c0       	rjmp	.+124    	; 0xc7d2 <collision_detect_shot+0x408>
    c756:	2f ef       	ldi	r18, 0xFF	; 255
    c758:	47 e1       	ldi	r20, 0x17	; 23
    c75a:	64 e0       	ldi	r22, 0x04	; 4
    c75c:	32 c0       	rjmp	.+100    	; 0xc7c2 <collision_detect_shot+0x3f8>
	}
	else if (hit & HIT_BRICK)
    c75e:	11 ff       	sbrs	r17, 1
    c760:	34 c0       	rjmp	.+104    	; 0xc7ca <collision_detect_shot+0x400>
	{
		explode_tile(&tile_animations, tiles[brick_index]);
    c762:	fe 01       	movw	r30, r28
    c764:	31 96       	adiw	r30, 0x01	; 1
    c766:	7f 01       	movw	r14, r30
    c768:	ed 0c       	add	r14, r13
    c76a:	f1 1c       	adc	r15, r1
    c76c:	ed 0c       	add	r14, r13
    c76e:	f1 1c       	adc	r15, r1
    c770:	d7 01       	movw	r26, r14
    c772:	6d 91       	ld	r22, X+
    c774:	7c 91       	ld	r23, X
    c776:	8f e1       	ldi	r24, 0x1F	; 31
    c778:	9c e0       	ldi	r25, 0x0C	; 12
    c77a:	0e 94 86 61 	call	0xc30c	; 0xc30c <explode_tile>
		level.level_map[tiles[brick_index]] = L_EMPTY;
    c77e:	d7 01       	movw	r26, r14
    c780:	ed 91       	ld	r30, X+
    c782:	fc 91       	ld	r31, X
    c784:	e5 54       	subi	r30, 0x45	; 69
    c786:	f3 4f       	sbci	r31, 0xF3	; 243
    c788:	11 82       	std	Z+1, r1	; 0x01
		shot->hit_count--;
    c78a:	f4 01       	movw	r30, r8
    c78c:	84 85       	ldd	r24, Z+12	; 0x0c
    c78e:	81 50       	subi	r24, 0x01	; 1
    c790:	84 87       	std	Z+12, r24	; 0x0c
		if (shot->hit_count <= 0)
    c792:	81 11       	cpse	r24, r1
    c794:	0b c0       	rjmp	.+22     	; 0xc7ac <collision_detect_shot+0x3e2>
		{
			init_shot_state(shot, shot->shot_type);
    c796:	63 85       	ldd	r22, Z+11	; 0x0b
    c798:	c4 01       	movw	r24, r8
    c79a:	0e 94 ce 59 	call	0xb39c	; 0xb39c <init_shot_state>
			player->active_shots--;
    c79e:	d3 01       	movw	r26, r6
    c7a0:	51 96       	adiw	r26, 0x11	; 17
    c7a2:	8c 91       	ld	r24, X
    c7a4:	51 97       	sbiw	r26, 0x11	; 17
    c7a6:	81 50       	subi	r24, 0x01	; 1
    c7a8:	51 96       	adiw	r26, 0x11	; 17
    c7aa:	8c 93       	st	X, r24
		}
		SFX_BRICK_EXPLODE;
    c7ac:	80 91 50 0c 	lds	r24, 0x0C50
    c7b0:	80 fd       	sbrc	r24, 0
    c7b2:	0f c0       	rjmp	.+30     	; 0xc7d2 <collision_detect_shot+0x408>
    c7b4:	80 91 be 0f 	lds	r24, 0x0FBE
    c7b8:	80 fd       	sbrc	r24, 0
    c7ba:	0b c0       	rjmp	.+22     	; 0xc7d2 <collision_detect_shot+0x408>
    c7bc:	2f ed       	ldi	r18, 0xDF	; 223
    c7be:	47 e1       	ldi	r20, 0x17	; 23
    c7c0:	61 e0       	ldi	r22, 0x01	; 1
    c7c2:	84 e0       	ldi	r24, 0x04	; 4
    c7c4:	0e 94 a4 4b 	call	0x9748	; 0x9748 <TriggerNote>
    c7c8:	04 c0       	rjmp	.+8      	; 0xc7d2 <collision_detect_shot+0x408>
	}
	else if (hit & HIT_METAL)
    c7ca:	10 ff       	sbrs	r17, 0
    c7cc:	02 c0       	rjmp	.+4      	; 0xc7d2 <collision_detect_shot+0x408>
	{
        init_shot_state(shot, shot->shot_type);
    c7ce:	f4 01       	movw	r30, r8
    c7d0:	af cf       	rjmp	.-162    	; 0xc730 <collision_detect_shot+0x366>
        player->active_shots--;
        SFX_METAL;
	}
}
    c7d2:	0f 90       	pop	r0
    c7d4:	0f 90       	pop	r0
    c7d6:	0f 90       	pop	r0
    c7d8:	0f 90       	pop	r0
    c7da:	0f 90       	pop	r0
    c7dc:	df 91       	pop	r29
    c7de:	cf 91       	pop	r28
    c7e0:	1f 91       	pop	r17
    c7e2:	0f 91       	pop	r16
    c7e4:	ff 90       	pop	r15
    c7e6:	ef 90       	pop	r14
    c7e8:	df 90       	pop	r13
    c7ea:	cf 90       	pop	r12
    c7ec:	bf 90       	pop	r11
    c7ee:	af 90       	pop	r10
    c7f0:	9f 90       	pop	r9
    c7f2:	8f 90       	pop	r8
    c7f4:	7f 90       	pop	r7
    c7f6:	6f 90       	pop	r6
    c7f8:	5f 90       	pop	r5
    c7fa:	4f 90       	pop	r4
    c7fc:	3f 90       	pop	r3
    c7fe:	2f 90       	pop	r2
    c800:	08 95       	ret

0000c802 <get_interesting_tile_indexes>:

void get_interesting_tile_indexes(int* tiles, u8 x, u8 y, u8 direction)
{
    c802:	fc 01       	movw	r30, r24
	u16 tile_root = (y * 30) + x;
    c804:	70 e0       	ldi	r23, 0x00	; 0
    c806:	8e e1       	ldi	r24, 0x1E	; 30
    c808:	48 9f       	mul	r20, r24
    c80a:	60 0d       	add	r22, r0
    c80c:	71 1d       	adc	r23, r1
    c80e:	11 24       	eor	r1, r1
	if (direction == D_UP)
    c810:	21 11       	cpse	r18, r1
    c812:	09 c0       	rjmp	.+18     	; 0xc826 <get_interesting_tile_indexes+0x24>
	{
		tiles[0] = tile_root;
    c814:	71 83       	std	Z+1, r23	; 0x01
    c816:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+1;
    c818:	cb 01       	movw	r24, r22
    c81a:	01 96       	adiw	r24, 0x01	; 1
    c81c:	93 83       	std	Z+3, r25	; 0x03
    c81e:	82 83       	std	Z+2, r24	; 0x02
		tiles[2] = tiles[0]+2;
    c820:	6e 5f       	subi	r22, 0xFE	; 254
    c822:	7f 4f       	sbci	r23, 0xFF	; 255
    c824:	12 c0       	rjmp	.+36     	; 0xc84a <get_interesting_tile_indexes+0x48>
	}
	else if (direction == D_RIGHT)
	{
		tiles[0] = tile_root + 2;
    c826:	cb 01       	movw	r24, r22
	{
		tiles[0] = tile_root;
		tiles[1] = tiles[0]+1;
		tiles[2] = tiles[0]+2;
	}
	else if (direction == D_RIGHT)
    c828:	21 30       	cpi	r18, 0x01	; 1
    c82a:	29 f4       	brne	.+10     	; 0xc836 <get_interesting_tile_indexes+0x34>
	{
		tiles[0] = tile_root + 2;
    c82c:	02 96       	adiw	r24, 0x02	; 2
    c82e:	91 83       	std	Z+1, r25	; 0x01
    c830:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+30;
    c832:	4e 96       	adiw	r24, 0x1e	; 30
    c834:	06 c0       	rjmp	.+12     	; 0xc842 <get_interesting_tile_indexes+0x40>
    c836:	cc 96       	adiw	r24, 0x3c	; 60
		tiles[2] = tiles[0]+60;
	}
	else if (direction == D_DOWN)
    c838:	22 30       	cpi	r18, 0x02	; 2
    c83a:	51 f4       	brne	.+20     	; 0xc850 <get_interesting_tile_indexes+0x4e>
	{
		tiles[0] = tile_root + 60;
    c83c:	91 83       	std	Z+1, r25	; 0x01
    c83e:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+1;
    c840:	01 96       	adiw	r24, 0x01	; 1
    c842:	93 83       	std	Z+3, r25	; 0x03
    c844:	82 83       	std	Z+2, r24	; 0x02
		tiles[2] = tiles[0]+2;
    c846:	62 5c       	subi	r22, 0xC2	; 194
    c848:	7f 4f       	sbci	r23, 0xFF	; 255
    c84a:	75 83       	std	Z+5, r23	; 0x05
    c84c:	64 83       	std	Z+4, r22	; 0x04
    c84e:	08 95       	ret
	}
	else
	{
		tiles[0] = tile_root;
    c850:	71 83       	std	Z+1, r23	; 0x01
    c852:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+30;
    c854:	62 5e       	subi	r22, 0xE2	; 226
    c856:	7f 4f       	sbci	r23, 0xFF	; 255
    c858:	73 83       	std	Z+3, r23	; 0x03
    c85a:	62 83       	std	Z+2, r22	; 0x02
		tiles[2] = tiles[0]+60;
    c85c:	95 83       	std	Z+5, r25	; 0x05
    c85e:	84 83       	std	Z+4, r24	; 0x04
    c860:	08 95       	ret

0000c862 <explode_player>:
	}
}

void explode_player(Player* player, Player* other_player, u8 hud_x, u8 other_player_hud_x)
{
    c862:	1f 93       	push	r17
    c864:	cf 93       	push	r28
    c866:	df 93       	push	r29
    c868:	fc 01       	movw	r30, r24
    c86a:	db 01       	movw	r26, r22
	if (!(other_player->flags & EXPLODING_FLAG))
    c86c:	54 96       	adiw	r26, 0x14	; 20
    c86e:	8c 91       	ld	r24, X
    c870:	54 97       	sbiw	r26, 0x14	; 20
    c872:	80 fd       	sbrc	r24, 0
    c874:	13 c0       	rjmp	.+38     	; 0xc89c <explode_player+0x3a>
    c876:	12 2f       	mov	r17, r18
    c878:	64 2f       	mov	r22, r20
    c87a:	ed 01       	movw	r28, r26
	{
		player->level_score++;
    c87c:	80 89       	ldd	r24, Z+16	; 0x10
    c87e:	8f 5f       	subi	r24, 0xFF	; 255
    c880:	80 8b       	std	Z+16, r24	; 0x10
		player->score++;
    c882:	87 85       	ldd	r24, Z+15	; 0x0f
    c884:	8f 5f       	subi	r24, 0xFF	; 255
    c886:	87 87       	std	Z+15, r24	; 0x0f
		render_score(player, hud_x);
    c888:	cf 01       	movw	r24, r30
    c88a:	0e 94 f0 5c 	call	0xb9e0	; 0xb9e0 <render_score>
		kill_player(other_player, other_player_hud_x);
    c88e:	61 2f       	mov	r22, r17
    c890:	ce 01       	movw	r24, r28
	}
}
    c892:	df 91       	pop	r29
    c894:	cf 91       	pop	r28
    c896:	1f 91       	pop	r17
	if (!(other_player->flags & EXPLODING_FLAG))
	{
		player->level_score++;
		player->score++;
		render_score(player, hud_x);
		kill_player(other_player, other_player_hud_x);
    c898:	0c 94 0c 61 	jmp	0xc218	; 0xc218 <kill_player>
	}
}
    c89c:	df 91       	pop	r29
    c89e:	cf 91       	pop	r28
    c8a0:	1f 91       	pop	r17
    c8a2:	08 95       	ret

0000c8a4 <slide>:

void slide(Player* player, u8 collision_tile, int tile)
{
    c8a4:	cf 92       	push	r12
    c8a6:	df 92       	push	r13
    c8a8:	ef 92       	push	r14
    c8aa:	ff 92       	push	r15
    c8ac:	cf 93       	push	r28
    c8ae:	df 93       	push	r29
    c8b0:	ec 01       	movw	r28, r24
    c8b2:	26 2f       	mov	r18, r22
	u8 tile_x = (tile % 30 * 8);
	u8 tile_y = (tile / 30 + 3) * 8;
	if (player->shared.direction == D_UP || player->shared.direction == D_DOWN)
    c8b4:	98 81       	ld	r25, Y
    c8b6:	9d 7f       	andi	r25, 0xFD	; 253
    c8b8:	09 f0       	breq	.+2      	; 0xc8bc <slide+0x18>
    c8ba:	54 c0       	rjmp	.+168    	; 0xc964 <slide+0xc0>
	}
}

void slide(Player* player, u8 collision_tile, int tile)
{
	u8 tile_x = (tile % 30 * 8);
    c8bc:	ca 01       	movw	r24, r20
    c8be:	6e e1       	ldi	r22, 0x1E	; 30
    c8c0:	70 e0       	ldi	r23, 0x00	; 0
    c8c2:	0e 94 85 76 	call	0xed0a	; 0xed0a <__divmodhi4>
    c8c6:	88 0f       	add	r24, r24
    c8c8:	88 0f       	add	r24, r24
    c8ca:	88 0f       	add	r24, r24
	u8 tile_y = (tile / 30 + 3) * 8;
	if (player->shared.direction == D_UP || player->shared.direction == D_DOWN)
	{
		if (collision_tile == 0 && ((player->shared.x - tile_x) > 4))
    c8cc:	21 11       	cpse	r18, r1
    c8ce:	22 c0       	rjmp	.+68     	; 0xc914 <slide+0x70>
    c8d0:	cb 80       	ldd	r12, Y+3	; 0x03
    c8d2:	dc 80       	ldd	r13, Y+4	; 0x04
    c8d4:	ed 80       	ldd	r14, Y+5	; 0x05
    c8d6:	fe 80       	ldd	r15, Y+6	; 0x06
    c8d8:	68 2f       	mov	r22, r24
    c8da:	70 e0       	ldi	r23, 0x00	; 0
    c8dc:	80 e0       	ldi	r24, 0x00	; 0
    c8de:	90 e0       	ldi	r25, 0x00	; 0
    c8e0:	0e 94 9d 77 	call	0xef3a	; 0xef3a <__floatsisf>
    c8e4:	9b 01       	movw	r18, r22
    c8e6:	ac 01       	movw	r20, r24
    c8e8:	c7 01       	movw	r24, r14
    c8ea:	b6 01       	movw	r22, r12
    c8ec:	0e 94 99 76 	call	0xed32	; 0xed32 <__subsf3>
    c8f0:	20 e0       	ldi	r18, 0x00	; 0
    c8f2:	30 e0       	ldi	r19, 0x00	; 0
    c8f4:	40 e8       	ldi	r20, 0x80	; 128
    c8f6:	50 e4       	ldi	r21, 0x40	; 64
    c8f8:	0e 94 4d 78 	call	0xf09a	; 0xf09a <__gesf2>
    c8fc:	18 16       	cp	r1, r24
    c8fe:	0c f0       	brlt	.+2      	; 0xc902 <slide+0x5e>
    c900:	85 c0       	rjmp	.+266    	; 0xca0c <slide+0x168>
			player->shared.x++; 
    c902:	20 e0       	ldi	r18, 0x00	; 0
    c904:	30 e0       	ldi	r19, 0x00	; 0
    c906:	40 e8       	ldi	r20, 0x80	; 128
    c908:	5f e3       	ldi	r21, 0x3F	; 63
    c90a:	c7 01       	movw	r24, r14
    c90c:	b6 01       	movw	r22, r12
    c90e:	0e 94 9a 76 	call	0xed34	; 0xed34 <__addsf3>
    c912:	23 c0       	rjmp	.+70     	; 0xc95a <slide+0xb6>
		else if (collision_tile == 2 && ((player->shared.x - tile_x) < -12))
    c914:	22 30       	cpi	r18, 0x02	; 2
    c916:	09 f0       	breq	.+2      	; 0xc91a <slide+0x76>
    c918:	79 c0       	rjmp	.+242    	; 0xca0c <slide+0x168>
    c91a:	cb 80       	ldd	r12, Y+3	; 0x03
    c91c:	dc 80       	ldd	r13, Y+4	; 0x04
    c91e:	ed 80       	ldd	r14, Y+5	; 0x05
    c920:	fe 80       	ldd	r15, Y+6	; 0x06
    c922:	68 2f       	mov	r22, r24
    c924:	70 e0       	ldi	r23, 0x00	; 0
    c926:	80 e0       	ldi	r24, 0x00	; 0
    c928:	90 e0       	ldi	r25, 0x00	; 0
    c92a:	0e 94 9d 77 	call	0xef3a	; 0xef3a <__floatsisf>
    c92e:	9b 01       	movw	r18, r22
    c930:	ac 01       	movw	r20, r24
    c932:	c7 01       	movw	r24, r14
    c934:	b6 01       	movw	r22, r12
    c936:	0e 94 99 76 	call	0xed32	; 0xed32 <__subsf3>
    c93a:	20 e0       	ldi	r18, 0x00	; 0
    c93c:	30 e0       	ldi	r19, 0x00	; 0
    c93e:	40 e4       	ldi	r20, 0x40	; 64
    c940:	51 ec       	ldi	r21, 0xC1	; 193
    c942:	0e 94 fe 76 	call	0xedfc	; 0xedfc <__cmpsf2>
    c946:	87 ff       	sbrs	r24, 7
    c948:	61 c0       	rjmp	.+194    	; 0xca0c <slide+0x168>
			player->shared.x--;
    c94a:	20 e0       	ldi	r18, 0x00	; 0
    c94c:	30 e0       	ldi	r19, 0x00	; 0
    c94e:	40 e8       	ldi	r20, 0x80	; 128
    c950:	5f e3       	ldi	r21, 0x3F	; 63
    c952:	c7 01       	movw	r24, r14
    c954:	b6 01       	movw	r22, r12
    c956:	0e 94 99 76 	call	0xed32	; 0xed32 <__subsf3>
    c95a:	6b 83       	std	Y+3, r22	; 0x03
    c95c:	7c 83       	std	Y+4, r23	; 0x04
    c95e:	8d 83       	std	Y+5, r24	; 0x05
    c960:	9e 83       	std	Y+6, r25	; 0x06
    c962:	54 c0       	rjmp	.+168    	; 0xca0c <slide+0x168>
}

void slide(Player* player, u8 collision_tile, int tile)
{
	u8 tile_x = (tile % 30 * 8);
	u8 tile_y = (tile / 30 + 3) * 8;
    c964:	ca 01       	movw	r24, r20
    c966:	6e e1       	ldi	r22, 0x1E	; 30
    c968:	70 e0       	ldi	r23, 0x00	; 0
    c96a:	0e 94 85 76 	call	0xed0a	; 0xed0a <__divmodhi4>
    c96e:	ab 01       	movw	r20, r22
    c970:	4d 5f       	subi	r20, 0xFD	; 253
    c972:	5f 4f       	sbci	r21, 0xFF	; 255
    c974:	44 0f       	add	r20, r20
    c976:	44 0f       	add	r20, r20
    c978:	44 0f       	add	r20, r20
		else if (collision_tile == 2 && ((player->shared.x - tile_x) < -12))
			player->shared.x--;
	}
	else
	{
		if (collision_tile == 0 && ((player->shared.y - tile_y) > 4))
    c97a:	21 11       	cpse	r18, r1
    c97c:	21 c0       	rjmp	.+66     	; 0xc9c0 <slide+0x11c>
    c97e:	cf 80       	ldd	r12, Y+7	; 0x07
    c980:	d8 84       	ldd	r13, Y+8	; 0x08
    c982:	e9 84       	ldd	r14, Y+9	; 0x09
    c984:	fa 84       	ldd	r15, Y+10	; 0x0a
    c986:	64 2f       	mov	r22, r20
    c988:	70 e0       	ldi	r23, 0x00	; 0
    c98a:	80 e0       	ldi	r24, 0x00	; 0
    c98c:	90 e0       	ldi	r25, 0x00	; 0
    c98e:	0e 94 9d 77 	call	0xef3a	; 0xef3a <__floatsisf>
    c992:	9b 01       	movw	r18, r22
    c994:	ac 01       	movw	r20, r24
    c996:	c7 01       	movw	r24, r14
    c998:	b6 01       	movw	r22, r12
    c99a:	0e 94 99 76 	call	0xed32	; 0xed32 <__subsf3>
    c99e:	20 e0       	ldi	r18, 0x00	; 0
    c9a0:	30 e0       	ldi	r19, 0x00	; 0
    c9a2:	40 e8       	ldi	r20, 0x80	; 128
    c9a4:	50 e4       	ldi	r21, 0x40	; 64
    c9a6:	0e 94 4d 78 	call	0xf09a	; 0xf09a <__gesf2>
    c9aa:	18 16       	cp	r1, r24
    c9ac:	7c f5       	brge	.+94     	; 0xca0c <slide+0x168>
			player->shared.y++;
    c9ae:	20 e0       	ldi	r18, 0x00	; 0
    c9b0:	30 e0       	ldi	r19, 0x00	; 0
    c9b2:	40 e8       	ldi	r20, 0x80	; 128
    c9b4:	5f e3       	ldi	r21, 0x3F	; 63
    c9b6:	c7 01       	movw	r24, r14
    c9b8:	b6 01       	movw	r22, r12
    c9ba:	0e 94 9a 76 	call	0xed34	; 0xed34 <__addsf3>
    c9be:	22 c0       	rjmp	.+68     	; 0xca04 <slide+0x160>
		else if (collision_tile == 2 && ((player->shared.y - tile_y) < -12))
    c9c0:	22 30       	cpi	r18, 0x02	; 2
    c9c2:	21 f5       	brne	.+72     	; 0xca0c <slide+0x168>
    c9c4:	cf 80       	ldd	r12, Y+7	; 0x07
    c9c6:	d8 84       	ldd	r13, Y+8	; 0x08
    c9c8:	e9 84       	ldd	r14, Y+9	; 0x09
    c9ca:	fa 84       	ldd	r15, Y+10	; 0x0a
    c9cc:	64 2f       	mov	r22, r20
    c9ce:	70 e0       	ldi	r23, 0x00	; 0
    c9d0:	80 e0       	ldi	r24, 0x00	; 0
    c9d2:	90 e0       	ldi	r25, 0x00	; 0
    c9d4:	0e 94 9d 77 	call	0xef3a	; 0xef3a <__floatsisf>
    c9d8:	9b 01       	movw	r18, r22
    c9da:	ac 01       	movw	r20, r24
    c9dc:	c7 01       	movw	r24, r14
    c9de:	b6 01       	movw	r22, r12
    c9e0:	0e 94 99 76 	call	0xed32	; 0xed32 <__subsf3>
    c9e4:	20 e0       	ldi	r18, 0x00	; 0
    c9e6:	30 e0       	ldi	r19, 0x00	; 0
    c9e8:	40 e4       	ldi	r20, 0x40	; 64
    c9ea:	51 ec       	ldi	r21, 0xC1	; 193
    c9ec:	0e 94 fe 76 	call	0xedfc	; 0xedfc <__cmpsf2>
    c9f0:	87 ff       	sbrs	r24, 7
    c9f2:	0c c0       	rjmp	.+24     	; 0xca0c <slide+0x168>
			player->shared.y--;
    c9f4:	20 e0       	ldi	r18, 0x00	; 0
    c9f6:	30 e0       	ldi	r19, 0x00	; 0
    c9f8:	40 e8       	ldi	r20, 0x80	; 128
    c9fa:	5f e3       	ldi	r21, 0x3F	; 63
    c9fc:	c7 01       	movw	r24, r14
    c9fe:	b6 01       	movw	r22, r12
    ca00:	0e 94 99 76 	call	0xed32	; 0xed32 <__subsf3>
    ca04:	6f 83       	std	Y+7, r22	; 0x07
    ca06:	78 87       	std	Y+8, r23	; 0x08
    ca08:	89 87       	std	Y+9, r24	; 0x09
    ca0a:	9a 87       	std	Y+10, r25	; 0x0a
	}
}
    ca0c:	df 91       	pop	r29
    ca0e:	cf 91       	pop	r28
    ca10:	ff 90       	pop	r15
    ca12:	ef 90       	pop	r14
    ca14:	df 90       	pop	r13
    ca16:	cf 90       	pop	r12
    ca18:	08 95       	ret

0000ca1a <collision_detect_player>:

char collision_detect_player(Player* player, u8 hud_x)
{
    ca1a:	2f 92       	push	r2
    ca1c:	3f 92       	push	r3
    ca1e:	4f 92       	push	r4
    ca20:	5f 92       	push	r5
    ca22:	6f 92       	push	r6
    ca24:	7f 92       	push	r7
    ca26:	8f 92       	push	r8
    ca28:	9f 92       	push	r9
    ca2a:	af 92       	push	r10
    ca2c:	bf 92       	push	r11
    ca2e:	cf 92       	push	r12
    ca30:	df 92       	push	r13
    ca32:	ef 92       	push	r14
    ca34:	ff 92       	push	r15
    ca36:	0f 93       	push	r16
    ca38:	1f 93       	push	r17
    ca3a:	cf 93       	push	r28
    ca3c:	df 93       	push	r29
    ca3e:	cd b7       	in	r28, 0x3d	; 61
    ca40:	de b7       	in	r29, 0x3e	; 62
    ca42:	2b 97       	sbiw	r28, 0x0b	; 11
    ca44:	0f b6       	in	r0, 0x3f	; 63
    ca46:	f8 94       	cli
    ca48:	de bf       	out	0x3e, r29	; 62
    ca4a:	0f be       	out	0x3f, r0	; 63
    ca4c:	cd bf       	out	0x3d, r28	; 61
    ca4e:	4c 01       	movw	r8, r24
    ca50:	16 2f       	mov	r17, r22
	int tiles[3] = {0,0,0};
    ca52:	1a 82       	std	Y+2, r1	; 0x02
    ca54:	19 82       	std	Y+1, r1	; 0x01
    ca56:	1c 82       	std	Y+4, r1	; 0x04
    ca58:	1b 82       	std	Y+3, r1	; 0x03
    ca5a:	1e 82       	std	Y+6, r1	; 0x06
    ca5c:	1d 82       	std	Y+5, r1	; 0x05
	u8 x = player->shared.x / 8;
	u8 y = player->shared.y / 8 - 3;
    ca5e:	20 e0       	ldi	r18, 0x00	; 0
    ca60:	30 e0       	ldi	r19, 0x00	; 0
    ca62:	40 e0       	ldi	r20, 0x00	; 0
    ca64:	5e e3       	ldi	r21, 0x3E	; 62
    ca66:	dc 01       	movw	r26, r24
    ca68:	17 96       	adiw	r26, 0x07	; 7
    ca6a:	6d 91       	ld	r22, X+
    ca6c:	7d 91       	ld	r23, X+
    ca6e:	8d 91       	ld	r24, X+
    ca70:	9c 91       	ld	r25, X
    ca72:	1a 97       	sbiw	r26, 0x0a	; 10
    ca74:	0e 94 51 78 	call	0xf0a2	; 0xf0a2 <__mulsf3>
    ca78:	20 e0       	ldi	r18, 0x00	; 0
    ca7a:	30 e0       	ldi	r19, 0x00	; 0
    ca7c:	40 e4       	ldi	r20, 0x40	; 64
    ca7e:	50 e4       	ldi	r21, 0x40	; 64
    ca80:	0e 94 99 76 	call	0xed32	; 0xed32 <__subsf3>
    ca84:	0e 94 6f 77 	call	0xeede	; 0xeede <__fixunssfsi>
    ca88:	06 2f       	mov	r16, r22
}

char collision_detect_player(Player* player, u8 hud_x)
{
	int tiles[3] = {0,0,0};
	u8 x = player->shared.x / 8;
    ca8a:	20 e0       	ldi	r18, 0x00	; 0
    ca8c:	30 e0       	ldi	r19, 0x00	; 0
    ca8e:	40 e0       	ldi	r20, 0x00	; 0
    ca90:	5e e3       	ldi	r21, 0x3E	; 62
    ca92:	f4 01       	movw	r30, r8
    ca94:	63 81       	ldd	r22, Z+3	; 0x03
    ca96:	74 81       	ldd	r23, Z+4	; 0x04
    ca98:	85 81       	ldd	r24, Z+5	; 0x05
    ca9a:	96 81       	ldd	r25, Z+6	; 0x06
    ca9c:	0e 94 51 78 	call	0xf0a2	; 0xf0a2 <__mulsf3>
    caa0:	0e 94 6f 77 	call	0xeede	; 0xeede <__fixunssfsi>
	u8 collision_tile = 0;
	char collision_count = 0;
	u8 tile_x;
	u8 tile_y;
	
	get_interesting_tile_indexes(tiles, x, y, player->shared.direction);
    caa4:	d4 01       	movw	r26, r8
    caa6:	2c 91       	ld	r18, X
    caa8:	40 2f       	mov	r20, r16
    caaa:	ce 01       	movw	r24, r28
    caac:	01 96       	adiw	r24, 0x01	; 1
    caae:	0e 94 01 64 	call	0xc802	; 0xc802 <get_interesting_tile_indexes>
	
	/* Level boundries first */
	if (collision_detect_boundries(&player->shared))
    cab2:	c4 01       	movw	r24, r8
    cab4:	0e 94 8a 60 	call	0xc114	; 0xc114 <collision_detect_boundries>
    cab8:	88 23       	and	r24, r24
    caba:	39 f0       	breq	.+14     	; 0xcaca <collision_detect_player+0xb0>
	{
		recoil_sprite(&player->shared);
    cabc:	c4 01       	movw	r24, r8
    cabe:	0e 94 6d 5e 	call	0xbcda	; 0xbcda <recoil_sprite>
		player->shared.speed = 0;
    cac2:	f4 01       	movw	r30, r8
    cac4:	11 82       	std	Z+1, r1	; 0x01
		return explode;
    cac6:	d1 2c       	mov	r13, r1
    cac8:	2c c1       	rjmp	.+600    	; 0xcd22 <collision_detect_player+0x308>
    caca:	ce 01       	movw	r24, r28
    cacc:	01 96       	adiw	r24, 0x01	; 1
    cace:	98 87       	std	Y+8, r25	; 0x08
    cad0:	8f 83       	std	Y+7, r24	; 0x07
	u8 tile_y;
	
	get_interesting_tile_indexes(tiles, x, y, player->shared.direction);
	
	/* Level boundries first */
	if (collision_detect_boundries(&player->shared))
    cad2:	41 2c       	mov	r4, r1
    cad4:	51 2c       	mov	r5, r1
    cad6:	b1 2c       	mov	r11, r1
    cad8:	d1 2c       	mov	r13, r1
    cada:	31 2c       	mov	r3, r1
		}
		else if (level.level_map[tiles[i]] == L_ROCKET && !(player->flags & EXPLODING_FLAG))
		{
			level.level_map[tiles[i]] = L_EMPTY;
			player->has_rocket = true;
			DrawMap2(hud_x+11, 1, map_rocket_itm);
    cadc:	9b e0       	ldi	r25, 0x0B	; 11
    cade:	91 0f       	add	r25, r17
    cae0:	99 87       	std	Y+9, r25	; 0x09
		else if (level.level_map[tiles[i]] == L_SPEED && !(player->flags & EXPLODING_FLAG))
		{
			level.level_map[tiles[i]] = L_EMPTY;
			player->max_speed = OVER_SPEED;
			player->has_over_speed = true;
			DrawMap2(hud_x+10, 1, map_speed_itm);
    cae2:	16 5f       	subi	r17, 0xF6	; 246
    cae4:	1a 87       	std	Y+10, r17	; 0x0a
	}

	/* Tile interaction */
	for (u8 i = 0; i < 3; i++)
	{
		tile_x = tiles[i] % 30;
    cae6:	af 81       	ldd	r26, Y+7	; 0x07
    cae8:	b8 85       	ldd	r27, Y+8	; 0x08
    caea:	6d 90       	ld	r6, X+
    caec:	7d 90       	ld	r7, X+
    caee:	b8 87       	std	Y+8, r27	; 0x08
    caf0:	af 83       	std	Y+7, r26	; 0x07
    caf2:	c3 01       	movw	r24, r6
    caf4:	6e e1       	ldi	r22, 0x1E	; 30
    caf6:	70 e0       	ldi	r23, 0x00	; 0
    caf8:	0e 94 85 76 	call	0xed0a	; 0xed0a <__divmodhi4>
    cafc:	f8 2e       	mov	r15, r24
		tile_y = 3 + tiles[i] / 30;
    cafe:	13 e0       	ldi	r17, 0x03	; 3
    cb00:	16 0f       	add	r17, r22
		
		if (solid_directional_tile(tiles[i]) && collides_directional_tile(tiles[i], player->shared.x, player->shared.y, 16, 16))
    cb02:	c3 01       	movw	r24, r6
    cb04:	0e 94 0f 5f 	call	0xbe1e	; 0xbe1e <solid_directional_tile>
    cb08:	88 23       	and	r24, r24
    cb0a:	51 f1       	breq	.+84     	; 0xcb60 <collision_detect_player+0x146>
    cb0c:	f4 01       	movw	r30, r8
    cb0e:	67 81       	ldd	r22, Z+7	; 0x07
    cb10:	70 85       	ldd	r23, Z+8	; 0x08
    cb12:	81 85       	ldd	r24, Z+9	; 0x09
    cb14:	92 85       	ldd	r25, Z+10	; 0x0a
    cb16:	0e 94 6f 77 	call	0xeede	; 0xeede <__fixunssfsi>
    cb1a:	46 2f       	mov	r20, r22
    cb1c:	d4 01       	movw	r26, r8
    cb1e:	13 96       	adiw	r26, 0x03	; 3
    cb20:	6d 91       	ld	r22, X+
    cb22:	7d 91       	ld	r23, X+
    cb24:	8d 91       	ld	r24, X+
    cb26:	9c 91       	ld	r25, X
    cb28:	16 97       	sbiw	r26, 0x06	; 6
    cb2a:	4b 87       	std	Y+11, r20	; 0x0b
    cb2c:	0e 94 6f 77 	call	0xeede	; 0xeede <__fixunssfsi>
    cb30:	00 e1       	ldi	r16, 0x10	; 16
    cb32:	20 e1       	ldi	r18, 0x10	; 16
    cb34:	4b 85       	ldd	r20, Y+11	; 0x0b
    cb36:	c3 01       	movw	r24, r6
    cb38:	0e 94 39 5f 	call	0xbe72	; 0xbe72 <collides_directional_tile>
    cb3c:	88 23       	and	r24, r24
    cb3e:	81 f0       	breq	.+32     	; 0xcb60 <collision_detect_player+0x146>
		{
			(player->handle_id == 9) ? recoil_sprite(&player->shared) : recoil_sprite_fine(player, &player->shared);
    cb40:	f4 01       	movw	r30, r8
    cb42:	83 85       	ldd	r24, Z+11	; 0x0b
    cb44:	89 30       	cpi	r24, 0x09	; 9
    cb46:	21 f4       	brne	.+8      	; 0xcb50 <collision_detect_player+0x136>
    cb48:	c4 01       	movw	r24, r8
    cb4a:	0e 94 6d 5e 	call	0xbcda	; 0xbcda <recoil_sprite>
    cb4e:	04 c0       	rjmp	.+8      	; 0xcb58 <collision_detect_player+0x13e>
    cb50:	b4 01       	movw	r22, r8
    cb52:	c4 01       	movw	r24, r8
    cb54:	0e 94 c7 5e 	call	0xbd8e	; 0xbd8e <recoil_sprite_fine>
			player->shared.speed = 0;
    cb58:	d4 01       	movw	r26, r8
    cb5a:	11 96       	adiw	r26, 0x01	; 1
    cb5c:	1c 92       	st	X, r1
    cb5e:	bc c0       	rjmp	.+376    	; 0xccd8 <collision_detect_player+0x2be>
		}
		else if (solid_square_tile(tiles[i]) && LBCollides(player->shared.x,player->shared.y,16,16,tile_x*8,tile_y*8,8,8))
    cb60:	c3 01       	movw	r24, r6
    cb62:	0e 94 fd 5e 	call	0xbdfa	; 0xbdfa <solid_square_tile>
    cb66:	88 23       	and	r24, r24
    cb68:	51 f1       	breq	.+84     	; 0xcbbe <collision_detect_player+0x1a4>
    cb6a:	f4 01       	movw	r30, r8
    cb6c:	67 81       	ldd	r22, Z+7	; 0x07
    cb6e:	70 85       	ldd	r23, Z+8	; 0x08
    cb70:	81 85       	ldd	r24, Z+9	; 0x09
    cb72:	92 85       	ldd	r25, Z+10	; 0x0a
    cb74:	0e 94 6f 77 	call	0xeede	; 0xeede <__fixunssfsi>
    cb78:	26 2e       	mov	r2, r22
    cb7a:	d4 01       	movw	r26, r8
    cb7c:	13 96       	adiw	r26, 0x03	; 3
    cb7e:	6d 91       	ld	r22, X+
    cb80:	7d 91       	ld	r23, X+
    cb82:	8d 91       	ld	r24, X+
    cb84:	9c 91       	ld	r25, X
    cb86:	16 97       	sbiw	r26, 0x06	; 6
    cb88:	0e 94 6f 77 	call	0xeede	; 0xeede <__fixunssfsi>
    cb8c:	86 2f       	mov	r24, r22
    cb8e:	38 e0       	ldi	r19, 0x08	; 8
    cb90:	a3 2e       	mov	r10, r19
    cb92:	48 e0       	ldi	r20, 0x08	; 8
    cb94:	c4 2e       	mov	r12, r20
    cb96:	e1 2e       	mov	r14, r17
    cb98:	ee 0c       	add	r14, r14
    cb9a:	ee 0c       	add	r14, r14
    cb9c:	ee 0c       	add	r14, r14
    cb9e:	0f 2d       	mov	r16, r15
    cba0:	00 0f       	add	r16, r16
    cba2:	00 0f       	add	r16, r16
    cba4:	00 0f       	add	r16, r16
    cba6:	20 e1       	ldi	r18, 0x10	; 16
    cba8:	40 e1       	ldi	r20, 0x10	; 16
    cbaa:	62 2d       	mov	r22, r2
    cbac:	0e 94 1f 58 	call	0xb03e	; 0xb03e <LBCollides>
    cbb0:	88 23       	and	r24, r24
    cbb2:	29 f0       	breq	.+10     	; 0xcbbe <collision_detect_player+0x1a4>
		{
			collision_count++;
    cbb4:	53 94       	inc	r5
			collision_tile = i;
			player->shared.speed = 0;
    cbb6:	f4 01       	movw	r30, r8
    cbb8:	11 82       	std	Z+1, r1	; 0x01
    cbba:	b4 2c       	mov	r11, r4
    cbbc:	8d c0       	rjmp	.+282    	; 0xccd8 <collision_detect_player+0x2be>
		}
		else if (level.level_map[tiles[i]] == L_WATER && LBCollides(player->shared.x,player->shared.y,16,16,tile_x*8,tile_y*8,8,8))
    cbbe:	f3 01       	movw	r30, r6
    cbc0:	e5 54       	subi	r30, 0x45	; 69
    cbc2:	f3 4f       	sbci	r31, 0xF3	; 243
    cbc4:	81 81       	ldd	r24, Z+1	; 0x01
    cbc6:	8d 34       	cpi	r24, 0x4D	; 77
    cbc8:	59 f5       	brne	.+86     	; 0xcc20 <collision_detect_player+0x206>
    cbca:	e1 2e       	mov	r14, r17
    cbcc:	ee 0c       	add	r14, r14
    cbce:	ee 0c       	add	r14, r14
    cbd0:	ee 0c       	add	r14, r14
    cbd2:	0f 2d       	mov	r16, r15
    cbd4:	00 0f       	add	r16, r16
    cbd6:	00 0f       	add	r16, r16
    cbd8:	00 0f       	add	r16, r16
    cbda:	d4 01       	movw	r26, r8
    cbdc:	17 96       	adiw	r26, 0x07	; 7
    cbde:	6d 91       	ld	r22, X+
    cbe0:	7d 91       	ld	r23, X+
    cbe2:	8d 91       	ld	r24, X+
    cbe4:	9c 91       	ld	r25, X
    cbe6:	1a 97       	sbiw	r26, 0x0a	; 10
    cbe8:	0e 94 6f 77 	call	0xeede	; 0xeede <__fixunssfsi>
    cbec:	76 2e       	mov	r7, r22
    cbee:	f4 01       	movw	r30, r8
    cbf0:	63 81       	ldd	r22, Z+3	; 0x03
    cbf2:	74 81       	ldd	r23, Z+4	; 0x04
    cbf4:	85 81       	ldd	r24, Z+5	; 0x05
    cbf6:	96 81       	ldd	r25, Z+6	; 0x06
    cbf8:	0e 94 6f 77 	call	0xeede	; 0xeede <__fixunssfsi>
    cbfc:	86 2f       	mov	r24, r22
    cbfe:	98 e0       	ldi	r25, 0x08	; 8
    cc00:	a9 2e       	mov	r10, r25
    cc02:	28 e0       	ldi	r18, 0x08	; 8
    cc04:	c2 2e       	mov	r12, r18
    cc06:	20 e1       	ldi	r18, 0x10	; 16
    cc08:	40 e1       	ldi	r20, 0x10	; 16
    cc0a:	67 2d       	mov	r22, r7
    cc0c:	0e 94 1f 58 	call	0xb03e	; 0xb03e <LBCollides>
    cc10:	88 23       	and	r24, r24
    cc12:	09 f4       	brne	.+2      	; 0xcc16 <collision_detect_player+0x1fc>
    cc14:	61 c0       	rjmp	.+194    	; 0xccd8 <collision_detect_player+0x2be>
		{
			player->max_speed = WATER_SPEED;
    cc16:	e9 e1       	ldi	r30, 0x19	; 25
    cc18:	d4 01       	movw	r26, r8
    cc1a:	58 96       	adiw	r26, 0x18	; 24
    cc1c:	ec 93       	st	X, r30
    cc1e:	67 c0       	rjmp	.+206    	; 0xccee <collision_detect_player+0x2d4>
			hit_water = 1;
		}
		else if (level.level_map[tiles[i]] == L_SCOPE && LBCollides(player->shared.x,player->shared.y,16,16,tile_x*8,tile_y*8,8,8))
    cc20:	8c 32       	cpi	r24, 0x2C	; 44
    cc22:	99 f2       	breq	.-90     	; 0xcbca <collision_detect_player+0x1b0>
		{
			player->max_speed = WATER_SPEED;
			hit_water = 1;
		}
		else if (level.level_map[tiles[i]] == L_SPEED && !(player->flags & EXPLODING_FLAG))
    cc24:	87 30       	cpi	r24, 0x07	; 7
    cc26:	99 f4       	brne	.+38     	; 0xcc4e <collision_detect_player+0x234>
    cc28:	d4 01       	movw	r26, r8
    cc2a:	54 96       	adiw	r26, 0x14	; 20
    cc2c:	8c 91       	ld	r24, X
    cc2e:	54 97       	sbiw	r26, 0x14	; 20
    cc30:	80 fd       	sbrc	r24, 0
    cc32:	52 c0       	rjmp	.+164    	; 0xccd8 <collision_detect_player+0x2be>
		{
			level.level_map[tiles[i]] = L_EMPTY;
    cc34:	11 82       	std	Z+1, r1	; 0x01
			player->max_speed = OVER_SPEED;
    cc36:	e1 e4       	ldi	r30, 0x41	; 65
    cc38:	58 96       	adiw	r26, 0x18	; 24
    cc3a:	ec 93       	st	X, r30
    cc3c:	58 97       	sbiw	r26, 0x18	; 24
			player->has_over_speed = true;
    cc3e:	f1 e0       	ldi	r31, 0x01	; 1
    cc40:	5a 96       	adiw	r26, 0x1a	; 26
    cc42:	fc 93       	st	X, r31
			DrawMap2(hud_x+10, 1, map_speed_itm);
    cc44:	49 e0       	ldi	r20, 0x09	; 9
    cc46:	56 e8       	ldi	r21, 0x86	; 134
    cc48:	61 e0       	ldi	r22, 0x01	; 1
    cc4a:	8a 85       	ldd	r24, Y+10	; 0x0a
    cc4c:	10 c0       	rjmp	.+32     	; 0xcc6e <collision_detect_player+0x254>
			SetTile(tile_x, tile_y, 0);
			SFX_ITEM;
		}
		else if (level.level_map[tiles[i]] == L_ROCKET && !(player->flags & EXPLODING_FLAG))
    cc4e:	89 30       	cpi	r24, 0x09	; 9
    cc50:	29 f5       	brne	.+74     	; 0xcc9c <collision_detect_player+0x282>
    cc52:	d4 01       	movw	r26, r8
    cc54:	54 96       	adiw	r26, 0x14	; 20
    cc56:	8c 91       	ld	r24, X
    cc58:	54 97       	sbiw	r26, 0x14	; 20
    cc5a:	80 fd       	sbrc	r24, 0
    cc5c:	3d c0       	rjmp	.+122    	; 0xccd8 <collision_detect_player+0x2be>
		{
			level.level_map[tiles[i]] = L_EMPTY;
    cc5e:	11 82       	std	Z+1, r1	; 0x01
			player->has_rocket = true;
    cc60:	e1 e0       	ldi	r30, 0x01	; 1
    cc62:	59 96       	adiw	r26, 0x19	; 25
    cc64:	ec 93       	st	X, r30
			DrawMap2(hud_x+11, 1, map_rocket_itm);
    cc66:	43 e0       	ldi	r20, 0x03	; 3
    cc68:	56 e8       	ldi	r21, 0x86	; 134
    cc6a:	61 e0       	ldi	r22, 0x01	; 1
    cc6c:	89 85       	ldd	r24, Y+9	; 0x09
    cc6e:	0e 94 0b 56 	call	0xac16	; 0xac16 <DrawMap>
			SetTile(tile_x, tile_y, 0);
    cc72:	40 e0       	ldi	r20, 0x00	; 0
    cc74:	50 e0       	ldi	r21, 0x00	; 0
    cc76:	61 2f       	mov	r22, r17
    cc78:	8f 2d       	mov	r24, r15
    cc7a:	0e 94 ec 47 	call	0x8fd8	; 0x8fd8 <SetTile>
			SFX_ITEM;
    cc7e:	80 91 50 0c 	lds	r24, 0x0C50
    cc82:	80 fd       	sbrc	r24, 0
    cc84:	29 c0       	rjmp	.+82     	; 0xccd8 <collision_detect_player+0x2be>
    cc86:	80 91 be 0f 	lds	r24, 0x0FBE
    cc8a:	80 fd       	sbrc	r24, 0
    cc8c:	25 c0       	rjmp	.+74     	; 0xccd8 <collision_detect_player+0x2be>
    cc8e:	2f ef       	ldi	r18, 0xFF	; 255
    cc90:	47 e1       	ldi	r20, 0x17	; 23
    cc92:	63 e0       	ldi	r22, 0x03	; 3
    cc94:	84 e0       	ldi	r24, 0x04	; 4
    cc96:	0e 94 a4 4b 	call	0x9748	; 0x9748 <TriggerNote>
    cc9a:	1e c0       	rjmp	.+60     	; 0xccd8 <collision_detect_player+0x2be>
		}
		else if (level.level_map[tiles[i]] == L_EXPLODE && !(player->flags & EXPLODING_FLAG))
    cc9c:	88 30       	cpi	r24, 0x08	; 8
    cc9e:	e1 f4       	brne	.+56     	; 0xccd8 <collision_detect_player+0x2be>
    cca0:	d4 01       	movw	r26, r8
    cca2:	54 96       	adiw	r26, 0x14	; 20
    cca4:	8c 91       	ld	r24, X
    cca6:	80 fd       	sbrc	r24, 0
    cca8:	17 c0       	rjmp	.+46     	; 0xccd8 <collision_detect_player+0x2be>
		{
			level.level_map[tiles[i]] = L_EMPTY;
    ccaa:	11 82       	std	Z+1, r1	; 0x01
			SetTile(tile_x, tile_y, 0);
    ccac:	40 e0       	ldi	r20, 0x00	; 0
    ccae:	50 e0       	ldi	r21, 0x00	; 0
    ccb0:	61 2f       	mov	r22, r17
    ccb2:	8f 2d       	mov	r24, r15
    ccb4:	0e 94 ec 47 	call	0x8fd8	; 0x8fd8 <SetTile>
			SFX_ITEM;
    ccb8:	80 91 50 0c 	lds	r24, 0x0C50
    ccbc:	80 fd       	sbrc	r24, 0
    ccbe:	0a c0       	rjmp	.+20     	; 0xccd4 <collision_detect_player+0x2ba>
    ccc0:	80 91 be 0f 	lds	r24, 0x0FBE
    ccc4:	80 fd       	sbrc	r24, 0
    ccc6:	06 c0       	rjmp	.+12     	; 0xccd4 <collision_detect_player+0x2ba>
    ccc8:	2f ef       	ldi	r18, 0xFF	; 255
    ccca:	47 e1       	ldi	r20, 0x17	; 23
    cccc:	63 e0       	ldi	r22, 0x03	; 3
    ccce:	84 e0       	ldi	r24, 0x04	; 4
    ccd0:	0e 94 a4 4b 	call	0x9748	; 0x9748 <TriggerNote>
			explode = 1;
    ccd4:	dd 24       	eor	r13, r13
    ccd6:	d3 94       	inc	r13
		}
		
		if (!hit_water)
    ccd8:	31 10       	cpse	r3, r1
    ccda:	09 c0       	rjmp	.+18     	; 0xccee <collision_detect_player+0x2d4>
		{
			player->max_speed = MAX_SPEED;
    ccdc:	82 e3       	ldi	r24, 0x32	; 50
    ccde:	f4 01       	movw	r30, r8
    cce0:	80 8f       	std	Z+24, r24	; 0x18
			if (player->has_over_speed) player->max_speed = OVER_SPEED;
    cce2:	82 8d       	ldd	r24, Z+26	; 0x1a
    cce4:	88 23       	and	r24, r24
    cce6:	29 f0       	breq	.+10     	; 0xccf2 <collision_detect_player+0x2d8>
    cce8:	91 e4       	ldi	r25, 0x41	; 65
    ccea:	90 8f       	std	Z+24, r25	; 0x18
    ccec:	02 c0       	rjmp	.+4      	; 0xccf2 <collision_detect_player+0x2d8>
    ccee:	33 24       	eor	r3, r3
    ccf0:	33 94       	inc	r3
		player->shared.speed = 0;
		return explode;
	}

	/* Tile interaction */
	for (u8 i = 0; i < 3; i++)
    ccf2:	43 94       	inc	r4
    ccf4:	a3 e0       	ldi	r26, 0x03	; 3
    ccf6:	4a 12       	cpse	r4, r26
    ccf8:	f6 ce       	rjmp	.-532    	; 0xcae6 <collision_detect_player+0xcc>
			if (player->has_over_speed) player->max_speed = OVER_SPEED;
		}
	}
	
	// Slide
	if (collision_count) recoil_sprite(&player->shared);
    ccfa:	55 20       	and	r5, r5
    ccfc:	91 f0       	breq	.+36     	; 0xcd22 <collision_detect_player+0x308>
    ccfe:	c4 01       	movw	r24, r8
    cd00:	0e 94 6d 5e 	call	0xbcda	; 0xbcda <recoil_sprite>
	if (collision_count == 1)
    cd04:	b1 e0       	ldi	r27, 0x01	; 1
    cd06:	5b 12       	cpse	r5, r27
    cd08:	0c c0       	rjmp	.+24     	; 0xcd22 <collision_detect_player+0x308>
	{
		slide(player, collision_tile, tiles[collision_tile]);
    cd0a:	fe 01       	movw	r30, r28
    cd0c:	31 96       	adiw	r30, 0x01	; 1
    cd0e:	eb 0d       	add	r30, r11
    cd10:	f1 1d       	adc	r31, r1
    cd12:	eb 0d       	add	r30, r11
    cd14:	f1 1d       	adc	r31, r1
    cd16:	40 81       	ld	r20, Z
    cd18:	51 81       	ldd	r21, Z+1	; 0x01
    cd1a:	6b 2d       	mov	r22, r11
    cd1c:	c4 01       	movw	r24, r8
    cd1e:	0e 94 52 64 	call	0xc8a4	; 0xc8a4 <slide>
	}
	return explode;
}
    cd22:	8d 2d       	mov	r24, r13
    cd24:	2b 96       	adiw	r28, 0x0b	; 11
    cd26:	0f b6       	in	r0, 0x3f	; 63
    cd28:	f8 94       	cli
    cd2a:	de bf       	out	0x3e, r29	; 62
    cd2c:	0f be       	out	0x3f, r0	; 63
    cd2e:	cd bf       	out	0x3d, r28	; 61
    cd30:	df 91       	pop	r29
    cd32:	cf 91       	pop	r28
    cd34:	1f 91       	pop	r17
    cd36:	0f 91       	pop	r16
    cd38:	ff 90       	pop	r15
    cd3a:	ef 90       	pop	r14
    cd3c:	df 90       	pop	r13
    cd3e:	cf 90       	pop	r12
    cd40:	bf 90       	pop	r11
    cd42:	af 90       	pop	r10
    cd44:	9f 90       	pop	r9
    cd46:	8f 90       	pop	r8
    cd48:	7f 90       	pop	r7
    cd4a:	6f 90       	pop	r6
    cd4c:	5f 90       	pop	r5
    cd4e:	4f 90       	pop	r4
    cd50:	3f 90       	pop	r3
    cd52:	2f 90       	pop	r2
    cd54:	08 95       	ret

0000cd56 <load_level_tiles>:

void load_level_tiles(u8 blank)
{
    cd56:	ef 92       	push	r14
    cd58:	ff 92       	push	r15
    cd5a:	1f 93       	push	r17
    cd5c:	cf 93       	push	r28
    cd5e:	df 93       	push	r29
    cd60:	18 2f       	mov	r17, r24
	u8 x;
	u8 y;
	
	for (int i = 0; i < 30*25; i++)
    cd62:	c0 e0       	ldi	r28, 0x00	; 0
    cd64:	d0 e0       	ldi	r29, 0x00	; 0
	{
		x = i % 30;
    cd66:	8e e1       	ldi	r24, 0x1E	; 30
    cd68:	e8 2e       	mov	r14, r24
    cd6a:	f1 2c       	mov	r15, r1
    cd6c:	ce 01       	movw	r24, r28
    cd6e:	b7 01       	movw	r22, r14
    cd70:	0e 94 85 76 	call	0xed0a	; 0xed0a <__divmodhi4>
		y = 3 + i / 30;
    cd74:	6d 5f       	subi	r22, 0xFD	; 253
		if (blank)
    cd76:	11 23       	and	r17, r17
    cd78:	19 f0       	breq	.+6      	; 0xcd80 <load_level_tiles+0x2a>
		{
			DrawMap2(x, y, map_tile_none);
    cd7a:	46 ea       	ldi	r20, 0xA6	; 166
    cd7c:	56 e8       	ldi	r21, 0x86	; 134
    cd7e:	2d c0       	rjmp	.+90     	; 0xcdda <load_level_tiles+0x84>
    cd80:	fe 01       	movw	r30, r28
    cd82:	e5 54       	subi	r30, 0x45	; 69
    cd84:	f3 4f       	sbci	r31, 0xF3	; 243
		}
		else
		{
			switch (level.level_map[i])
    cd86:	91 81       	ldd	r25, Z+1	; 0x01
    cd88:	97 30       	cpi	r25, 0x07	; 7
    cd8a:	99 f1       	breq	.+102    	; 0xcdf2 <load_level_tiles+0x9c>
    cd8c:	88 f4       	brcc	.+34     	; 0xcdb0 <load_level_tiles+0x5a>
    cd8e:	93 30       	cpi	r25, 0x03	; 3
    cd90:	39 f1       	breq	.+78     	; 0xcde0 <load_level_tiles+0x8a>
    cd92:	40 f4       	brcc	.+16     	; 0xcda4 <load_level_tiles+0x4e>
    cd94:	91 30       	cpi	r25, 0x01	; 1
    cd96:	f9 f0       	breq	.+62     	; 0xcdd6 <load_level_tiles+0x80>
    cd98:	92 30       	cpi	r25, 0x02	; 2
    cd9a:	09 f0       	breq	.+2      	; 0xcd9e <load_level_tiles+0x48>
    cd9c:	3f c0       	rjmp	.+126    	; 0xce1c <load_level_tiles+0xc6>
			{
				case L_BRICK: DrawMap2(x, y, map_brick); break;
				case L_METAL: DrawMap2(x, y, map_metal); break;
    cd9e:	4c e0       	ldi	r20, 0x0C	; 12
    cda0:	56 e8       	ldi	r21, 0x86	; 134
    cda2:	1b c0       	rjmp	.+54     	; 0xcdda <load_level_tiles+0x84>
		{
			DrawMap2(x, y, map_tile_none);
		}
		else
		{
			switch (level.level_map[i])
    cda4:	95 30       	cpi	r25, 0x05	; 5
    cda6:	f9 f0       	breq	.+62     	; 0xcde6 <load_level_tiles+0x90>
    cda8:	08 f5       	brcc	.+66     	; 0xcdec <load_level_tiles+0x96>
			{
				case L_BRICK: DrawMap2(x, y, map_brick); break;
				case L_METAL: DrawMap2(x, y, map_metal); break;
				case L_TL: DrawMap2(x, y, map_metal_tl); break;
				case L_TR: DrawMap2(x, y, map_metal_tr); break;
    cdaa:	41 ef       	ldi	r20, 0xF1	; 241
    cdac:	55 e8       	ldi	r21, 0x85	; 133
    cdae:	15 c0       	rjmp	.+42     	; 0xcdda <load_level_tiles+0x84>
		{
			DrawMap2(x, y, map_tile_none);
		}
		else
		{
			switch (level.level_map[i])
    cdb0:	9c 32       	cpi	r25, 0x2C	; 44
    cdb2:	59 f1       	breq	.+86     	; 0xce0a <load_level_tiles+0xb4>
    cdb4:	38 f4       	brcc	.+14     	; 0xcdc4 <load_level_tiles+0x6e>
    cdb6:	98 30       	cpi	r25, 0x08	; 8
    cdb8:	f9 f0       	breq	.+62     	; 0xcdf8 <load_level_tiles+0xa2>
    cdba:	99 30       	cpi	r25, 0x09	; 9
    cdbc:	79 f5       	brne	.+94     	; 0xce1c <load_level_tiles+0xc6>
				case L_TR: DrawMap2(x, y, map_metal_tr); break;
				case L_BL: DrawMap2(x, y, map_metal_bl); break;
				case L_BR: DrawMap2(x, y, map_metal_br); break;
				case L_SPEED: DrawMap2(x, y, map_speed_itm); break;
				case L_EXPLODE: DrawMap2(x, y, map_explode_itm); break;
				case L_ROCKET: DrawMap2(x, y, map_rocket_itm); break;
    cdbe:	43 e0       	ldi	r20, 0x03	; 3
    cdc0:	56 e8       	ldi	r21, 0x86	; 134
    cdc2:	0b c0       	rjmp	.+22     	; 0xcdda <load_level_tiles+0x84>
		{
			DrawMap2(x, y, map_tile_none);
		}
		else
		{
			switch (level.level_map[i])
    cdc4:	92 34       	cpi	r25, 0x42	; 66
    cdc6:	d9 f0       	breq	.+54     	; 0xcdfe <load_level_tiles+0xa8>
    cdc8:	9d 34       	cpi	r25, 0x4D	; 77
    cdca:	e1 f0       	breq	.+56     	; 0xce04 <load_level_tiles+0xae>
    cdcc:	97 33       	cpi	r25, 0x37	; 55
    cdce:	31 f5       	brne	.+76     	; 0xce1c <load_level_tiles+0xc6>
				case L_EXPLODE: DrawMap2(x, y, map_explode_itm); break;
				case L_ROCKET: DrawMap2(x, y, map_rocket_itm); break;
				case L_TURF: DrawMap2(x, y, map_turf); break;
				case L_WATER: DrawMap2(x, y, map_water); break;
				case L_SCOPE: DrawMap2(x, y, map_water); scope_animation.tile_index = i; break;
				case L_FENCE: DrawMap2(x, y, map_fence); break;
    cdd0:	45 ee       	ldi	r20, 0xE5	; 229
    cdd2:	55 e8       	ldi	r21, 0x85	; 133
    cdd4:	02 c0       	rjmp	.+4      	; 0xcdda <load_level_tiles+0x84>
		}
		else
		{
			switch (level.level_map[i])
			{
				case L_BRICK: DrawMap2(x, y, map_brick); break;
    cdd6:	4f e0       	ldi	r20, 0x0F	; 15
    cdd8:	56 e8       	ldi	r21, 0x86	; 134
    cdda:	0e 94 0b 56 	call	0xac16	; 0xac16 <DrawMap>
    cdde:	22 c0       	rjmp	.+68     	; 0xce24 <load_level_tiles+0xce>
				case L_METAL: DrawMap2(x, y, map_metal); break;
				case L_TL: DrawMap2(x, y, map_metal_tl); break;
    cde0:	47 ef       	ldi	r20, 0xF7	; 247
    cde2:	55 e8       	ldi	r21, 0x85	; 133
    cde4:	fa cf       	rjmp	.-12     	; 0xcdda <load_level_tiles+0x84>
				case L_TR: DrawMap2(x, y, map_metal_tr); break;
				case L_BL: DrawMap2(x, y, map_metal_bl); break;
    cde6:	4e ee       	ldi	r20, 0xEE	; 238
    cde8:	55 e8       	ldi	r21, 0x85	; 133
    cdea:	f7 cf       	rjmp	.-18     	; 0xcdda <load_level_tiles+0x84>
				case L_BR: DrawMap2(x, y, map_metal_br); break;
    cdec:	44 ef       	ldi	r20, 0xF4	; 244
    cdee:	55 e8       	ldi	r21, 0x85	; 133
    cdf0:	f4 cf       	rjmp	.-24     	; 0xcdda <load_level_tiles+0x84>
				case L_SPEED: DrawMap2(x, y, map_speed_itm); break;
    cdf2:	49 e0       	ldi	r20, 0x09	; 9
    cdf4:	56 e8       	ldi	r21, 0x86	; 134
    cdf6:	f1 cf       	rjmp	.-30     	; 0xcdda <load_level_tiles+0x84>
				case L_EXPLODE: DrawMap2(x, y, map_explode_itm); break;
    cdf8:	46 e0       	ldi	r20, 0x06	; 6
    cdfa:	56 e8       	ldi	r21, 0x86	; 134
    cdfc:	ee cf       	rjmp	.-36     	; 0xcdda <load_level_tiles+0x84>
				case L_ROCKET: DrawMap2(x, y, map_rocket_itm); break;
				case L_TURF: DrawMap2(x, y, map_turf); break;
    cdfe:	48 ee       	ldi	r20, 0xE8	; 232
    ce00:	55 e8       	ldi	r21, 0x85	; 133
    ce02:	eb cf       	rjmp	.-42     	; 0xcdda <load_level_tiles+0x84>
				case L_WATER: DrawMap2(x, y, map_water); break;
    ce04:	4b ee       	ldi	r20, 0xEB	; 235
    ce06:	55 e8       	ldi	r21, 0x85	; 133
    ce08:	e8 cf       	rjmp	.-48     	; 0xcdda <load_level_tiles+0x84>
				case L_SCOPE: DrawMap2(x, y, map_water); scope_animation.tile_index = i; break;
    ce0a:	4b ee       	ldi	r20, 0xEB	; 235
    ce0c:	55 e8       	ldi	r21, 0x85	; 133
    ce0e:	0e 94 0b 56 	call	0xac16	; 0xac16 <DrawMap>
    ce12:	d0 93 3d 10 	sts	0x103D, r29
    ce16:	c0 93 3c 10 	sts	0x103C, r28
    ce1a:	04 c0       	rjmp	.+8      	; 0xce24 <load_level_tiles+0xce>
				case L_FENCE: DrawMap2(x, y, map_fence); break;
				default : SetTile(x, y, 0); break;
    ce1c:	40 e0       	ldi	r20, 0x00	; 0
    ce1e:	50 e0       	ldi	r21, 0x00	; 0
    ce20:	0e 94 ec 47 	call	0x8fd8	; 0x8fd8 <SetTile>
void load_level_tiles(u8 blank)
{
	u8 x;
	u8 y;
	
	for (int i = 0; i < 30*25; i++)
    ce24:	21 96       	adiw	r28, 0x01	; 1
    ce26:	ce 3e       	cpi	r28, 0xEE	; 238
    ce28:	82 e0       	ldi	r24, 0x02	; 2
    ce2a:	d8 07       	cpc	r29, r24
    ce2c:	09 f0       	breq	.+2      	; 0xce30 <load_level_tiles+0xda>
    ce2e:	9e cf       	rjmp	.-196    	; 0xcd6c <load_level_tiles+0x16>
				case L_FENCE: DrawMap2(x, y, map_fence); break;
				default : SetTile(x, y, 0); break;
			}
		}
	}
}
    ce30:	df 91       	pop	r29
    ce32:	cf 91       	pop	r28
    ce34:	1f 91       	pop	r17
    ce36:	ff 90       	pop	r15
    ce38:	ef 90       	pop	r14
    ce3a:	08 95       	ret

0000ce3c <prep_player>:

void prep_player(Player* p, u8 x, u8 y)
{
    ce3c:	cf 93       	push	r28
    ce3e:	df 93       	push	r29
    ce40:	ec 01       	movw	r28, r24
	p->spawn_x = x;
    ce42:	6a 8b       	std	Y+18, r22	; 0x12
	p->spawn_y = y;
    ce44:	4b 8b       	std	Y+19, r20	; 0x13
	p->level_score = 0;
    ce46:	18 8a       	std	Y+16, r1	; 0x10
	p->has_over_speed = false;
    ce48:	1a 8e       	std	Y+26, r1	; 0x1a
	p->has_rocket = false;
    ce4a:	19 8e       	std	Y+25, r1	; 0x19
	p->max_speed = MAX_SPEED;
    ce4c:	82 e3       	ldi	r24, 0x32	; 50
    ce4e:	88 8f       	std	Y+24, r24	; 0x18
	player_init_shot_state(p);
    ce50:	ce 01       	movw	r24, r28
    ce52:	0e 94 c3 5a 	call	0xb586	; 0xb586 <player_init_shot_state>
	player_spawn(p);
    ce56:	ce 01       	movw	r24, r28
}
    ce58:	df 91       	pop	r29
    ce5a:	cf 91       	pop	r28
	p->level_score = 0;
	p->has_over_speed = false;
	p->has_rocket = false;
	p->max_speed = MAX_SPEED;
	player_init_shot_state(p);
	player_spawn(p);
    ce5c:	0c 94 e8 5a 	jmp	0xb5d0	; 0xb5d0 <player_spawn>

0000ce60 <load_level>:
}

void load_level(int level_number)
{
    ce60:	8f 92       	push	r8
    ce62:	9f 92       	push	r9
    ce64:	af 92       	push	r10
    ce66:	bf 92       	push	r11
    ce68:	cf 92       	push	r12
    ce6a:	df 92       	push	r13
    ce6c:	ef 92       	push	r14
    ce6e:	ff 92       	push	r15
    ce70:	0f 93       	push	r16
    ce72:	1f 93       	push	r17
    ce74:	cf 93       	push	r28
    ce76:	df 93       	push	r29
    ce78:	ec 01       	movw	r28, r24
    int level_start = level_number*30*25;
    ce7a:	8e ee       	ldi	r24, 0xEE	; 238
    ce7c:	92 e0       	ldi	r25, 0x02	; 2
    ce7e:	c8 9f       	mul	r28, r24
    ce80:	70 01       	movw	r14, r0
    ce82:	c9 9f       	mul	r28, r25
    ce84:	f0 0c       	add	r15, r0
    ce86:	d8 9f       	mul	r29, r24
    ce88:	f0 0c       	add	r15, r0
    ce8a:	11 24       	eor	r1, r1
	u8 x;
	u8 y;

	game.scope_counter = 0;
    ce8c:	10 92 1d 0c 	sts	0x0C1D, r1
    ce90:	10 92 1c 0c 	sts	0x0C1C, r1
	init_tile_animations(&tile_animations);
    ce94:	8f e1       	ldi	r24, 0x1F	; 31
    ce96:	9c e0       	ldi	r25, 0x0C	; 12
    ce98:	0e 94 7b 59 	call	0xb2f6	; 0xb2f6 <init_tile_animations>
	init_scope_animation(&scope_animation);
    ce9c:	80 e3       	ldi	r24, 0x30	; 48
    ce9e:	90 e1       	ldi	r25, 0x10	; 16
    cea0:	0e 94 a2 59 	call	0xb344	; 0xb344 <init_scope_animation>
	init_sub_animation(&sub_animation);
    cea4:	82 e2       	ldi	r24, 0x22	; 34
    cea6:	90 e1       	ldi	r25, 0x10	; 16
    cea8:	0e 94 ba 59 	call	0xb374	; 0xb374 <init_sub_animation>
	game.current_screen = LEVEL;
    ceac:	83 e0       	ldi	r24, 0x03	; 3
    ceae:	80 93 12 0c 	sts	0x0C12, r24
	clear_sprites();
    ceb2:	0e 94 22 5b 	call	0xb644	; 0xb644 <clear_sprites>
	game.current_level = level_number;
    ceb6:	c0 93 13 0c 	sts	0x0C13, r28
    ceba:	8c eb       	ldi	r24, 0xBC	; 188
    cebc:	a8 2e       	mov	r10, r24
    cebe:	8c e0       	ldi	r24, 0x0C	; 12
    cec0:	b8 2e       	mov	r11, r24
	for (int i = 0; i < 30*25; i++)
    cec2:	00 e0       	ldi	r16, 0x00	; 0
    cec4:	10 e0       	ldi	r17, 0x00	; 0
	{
		x = (i % 30) * 8;
    cec6:	9e e1       	ldi	r25, 0x1E	; 30
    cec8:	c9 2e       	mov	r12, r25
    ceca:	d1 2c       	mov	r13, r1
    cecc:	c8 01       	movw	r24, r16
    cece:	b6 01       	movw	r22, r12
    ced0:	0e 94 85 76 	call	0xed0a	; 0xed0a <__divmodhi4>
    ced4:	d8 2f       	mov	r29, r24
    ced6:	dd 0f       	add	r29, r29
    ced8:	dd 0f       	add	r29, r29
    ceda:	dd 0f       	add	r29, r29
		y = (i / 30 + 3) * 8;
    cedc:	ab 01       	movw	r20, r22
    cede:	4d 5f       	subi	r20, 0xFD	; 253
    cee0:	5f 4f       	sbci	r21, 0xFF	; 255
    cee2:	c4 2f       	mov	r28, r20
    cee4:	cc 0f       	add	r28, r28
    cee6:	cc 0f       	add	r28, r28
    cee8:	cc 0f       	add	r28, r28
    ceea:	f8 01       	movw	r30, r16
    ceec:	ee 0d       	add	r30, r14
    ceee:	ff 1d       	adc	r31, r15
    cef0:	e7 52       	subi	r30, 0x27	; 39
    cef2:	fd 4d       	sbci	r31, 0xDD	; 221
		level.level_map[i] = pgm_read_byte(&level_data[level_start+i]);
    cef4:	e4 91       	lpm	r30, Z
    cef6:	45 01       	movw	r8, r10
    cef8:	d5 01       	movw	r26, r10
    cefa:	ec 93       	st	X, r30
		if (level.level_map[i] == L_P1_SPAWN)
    cefc:	e8 35       	cpi	r30, 0x58	; 88
    cefe:	31 f4       	brne	.+12     	; 0xcf0c <load_level+0xac>
		{
			prep_player(&player1, x, y);
    cf00:	4c 2f       	mov	r20, r28
    cf02:	6d 2f       	mov	r22, r29
    cf04:	8c e3       	ldi	r24, 0x3C	; 60
    cf06:	9c e0       	ldi	r25, 0x0C	; 12
    cf08:	0e 94 1e 67 	call	0xce3c	; 0xce3c <prep_player>
    cf0c:	bf ef       	ldi	r27, 0xFF	; 255
    cf0e:	ab 1a       	sub	r10, r27
    cf10:	bb 0a       	sbc	r11, r27
		}
		if (level.level_map[i] == L_P2_SPAWN)
    cf12:	f4 01       	movw	r30, r8
    cf14:	80 81       	ld	r24, Z
    cf16:	83 36       	cpi	r24, 0x63	; 99
    cf18:	31 f4       	brne	.+12     	; 0xcf26 <load_level+0xc6>
		{
			prep_player(&player2, x, y);
    cf1a:	4c 2f       	mov	r20, r28
    cf1c:	6d 2f       	mov	r22, r29
    cf1e:	8a ea       	ldi	r24, 0xAA	; 170
    cf20:	9f e0       	ldi	r25, 0x0F	; 15
    cf22:	0e 94 1e 67 	call	0xce3c	; 0xce3c <prep_player>
	init_scope_animation(&scope_animation);
	init_sub_animation(&sub_animation);
	game.current_screen = LEVEL;
	clear_sprites();
	game.current_level = level_number;
	for (int i = 0; i < 30*25; i++)
    cf26:	0f 5f       	subi	r16, 0xFF	; 255
    cf28:	1f 4f       	sbci	r17, 0xFF	; 255
    cf2a:	0e 3e       	cpi	r16, 0xEE	; 238
    cf2c:	f2 e0       	ldi	r31, 0x02	; 2
    cf2e:	1f 07       	cpc	r17, r31
    cf30:	69 f6       	brne	.-102    	; 0xcecc <load_level+0x6c>
		if (level.level_map[i] == L_P2_SPAWN)
		{
			prep_player(&player2, x, y);
		}
	}
	render_hud(&player1, 0);
    cf32:	60 e0       	ldi	r22, 0x00	; 0
    cf34:	8c e3       	ldi	r24, 0x3C	; 60
    cf36:	9c e0       	ldi	r25, 0x0C	; 12
    cf38:	0e 94 d3 5c 	call	0xb9a6	; 0xb9a6 <render_hud>
	render_hud(&player2, 15);
    cf3c:	6f e0       	ldi	r22, 0x0F	; 15
    cf3e:	8a ea       	ldi	r24, 0xAA	; 170
    cf40:	9f e0       	ldi	r25, 0x0F	; 15
    cf42:	0e 94 d3 5c 	call	0xb9a6	; 0xb9a6 <render_hud>
	render_score(&player1, 0);
    cf46:	60 e0       	ldi	r22, 0x00	; 0
    cf48:	8c e3       	ldi	r24, 0x3C	; 60
    cf4a:	9c e0       	ldi	r25, 0x0C	; 12
    cf4c:	0e 94 f0 5c 	call	0xb9e0	; 0xb9e0 <render_score>
	render_score(&player2, 15);
    cf50:	6f e0       	ldi	r22, 0x0F	; 15
    cf52:	8a ea       	ldi	r24, 0xAA	; 170
    cf54:	9f e0       	ldi	r25, 0x0F	; 15
    cf56:	0e 94 f0 5c 	call	0xb9e0	; 0xb9e0 <render_score>
	Print(14, 0, (char*) strVertSep);
    cf5a:	4e e4       	ldi	r20, 0x4E	; 78
    cf5c:	5b e0       	ldi	r21, 0x0B	; 11
    cf5e:	60 e0       	ldi	r22, 0x00	; 0
    cf60:	70 e0       	ldi	r23, 0x00	; 0
    cf62:	8e e0       	ldi	r24, 0x0E	; 14
    cf64:	90 e0       	ldi	r25, 0x00	; 0
    cf66:	0e 94 8b 56 	call	0xad16	; 0xad16 <Print>
	Print(14, 1, (char*) strVertSep);
    cf6a:	4e e4       	ldi	r20, 0x4E	; 78
    cf6c:	5b e0       	ldi	r21, 0x0B	; 11
    cf6e:	61 e0       	ldi	r22, 0x01	; 1
    cf70:	70 e0       	ldi	r23, 0x00	; 0
    cf72:	8e e0       	ldi	r24, 0x0E	; 14
    cf74:	90 e0       	ldi	r25, 0x00	; 0
    cf76:	0e 94 8b 56 	call	0xad16	; 0xad16 <Print>
	Print(14, 2, (char*) strVertSep);
    cf7a:	4e e4       	ldi	r20, 0x4E	; 78
    cf7c:	5b e0       	ldi	r21, 0x0B	; 11
    cf7e:	62 e0       	ldi	r22, 0x02	; 2
    cf80:	70 e0       	ldi	r23, 0x00	; 0
    cf82:	8e e0       	ldi	r24, 0x0E	; 14
    cf84:	90 e0       	ldi	r25, 0x00	; 0
    cf86:	0e 94 8b 56 	call	0xad16	; 0xad16 <Print>
	load_level_tiles(false);
    cf8a:	80 e0       	ldi	r24, 0x00	; 0
}
    cf8c:	df 91       	pop	r29
    cf8e:	cf 91       	pop	r28
    cf90:	1f 91       	pop	r17
    cf92:	0f 91       	pop	r16
    cf94:	ff 90       	pop	r15
    cf96:	ef 90       	pop	r14
    cf98:	df 90       	pop	r13
    cf9a:	cf 90       	pop	r12
    cf9c:	bf 90       	pop	r11
    cf9e:	af 90       	pop	r10
    cfa0:	9f 90       	pop	r9
    cfa2:	8f 90       	pop	r8
	render_score(&player1, 0);
	render_score(&player2, 15);
	Print(14, 0, (char*) strVertSep);
	Print(14, 1, (char*) strVertSep);
	Print(14, 2, (char*) strVertSep);
	load_level_tiles(false);
    cfa4:	0c 94 ab 66 	jmp	0xcd56	; 0xcd56 <load_level_tiles>

0000cfa8 <level_transition>:
	ClearVram();
	FadeIn(FRAMES_PER_FADE, false);
}

void level_transition(u8 index)
{
    cfa8:	cf 93       	push	r28
    cfaa:	df 93       	push	r29
    cfac:	c8 2f       	mov	r28, r24
	FadeOut(FRAMES_PER_FADE, true);
    cfae:	61 e0       	ldi	r22, 0x01	; 1
    cfb0:	83 e0       	ldi	r24, 0x03	; 3
    cfb2:	0e 94 11 57 	call	0xae22	; 0xae22 <FadeOut>
	ClearVram();
    cfb6:	0e 94 de 47 	call	0x8fbc	; 0x8fbc <ClearVram>
	clear_sprites();
    cfba:	0e 94 22 5b 	call	0xb644	; 0xb644 <clear_sprites>
	Print(8, 12, (char*) strLevels+index*16);
    cfbe:	d0 e0       	ldi	r29, 0x00	; 0
    cfc0:	ae 01       	movw	r20, r28
    cfc2:	84 e0       	ldi	r24, 0x04	; 4
    cfc4:	44 0f       	add	r20, r20
    cfc6:	55 1f       	adc	r21, r21
    cfc8:	8a 95       	dec	r24
    cfca:	e1 f7       	brne	.-8      	; 0xcfc4 <level_transition+0x1c>
    cfcc:	45 59       	subi	r20, 0x95	; 149
    cfce:	56 4f       	sbci	r21, 0xF6	; 246
    cfd0:	6c e0       	ldi	r22, 0x0C	; 12
    cfd2:	70 e0       	ldi	r23, 0x00	; 0
    cfd4:	88 e0       	ldi	r24, 0x08	; 8
    cfd6:	90 e0       	ldi	r25, 0x00	; 0
    cfd8:	0e 94 8b 56 	call	0xad16	; 0xad16 <Print>
	FadeIn(1, true);
    cfdc:	61 e0       	ldi	r22, 0x01	; 1
    cfde:	81 e0       	ldi	r24, 0x01	; 1
    cfe0:	0e 94 05 57 	call	0xae0a	; 0xae0a <FadeIn>
	LBWaitSeconds(TEXT_LINGER);
    cfe4:	84 e0       	ldi	r24, 0x04	; 4
    cfe6:	0e 94 54 59 	call	0xb2a8	; 0xb2a8 <LBWaitSeconds>
	FadeOut(1, true);
    cfea:	61 e0       	ldi	r22, 0x01	; 1
    cfec:	81 e0       	ldi	r24, 0x01	; 1
    cfee:	0e 94 11 57 	call	0xae22	; 0xae22 <FadeOut>
	ClearVram();
    cff2:	0e 94 de 47 	call	0x8fbc	; 0x8fbc <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    cff6:	60 e0       	ldi	r22, 0x00	; 0
    cff8:	83 e0       	ldi	r24, 0x03	; 3
    cffa:	0e 94 05 57 	call	0xae0a	; 0xae0a <FadeIn>
	load_level(index);
    cffe:	ce 01       	movw	r24, r28
}
    d000:	df 91       	pop	r29
    d002:	cf 91       	pop	r28
	FadeIn(1, true);
	LBWaitSeconds(TEXT_LINGER);
	FadeOut(1, true);
	ClearVram();
	FadeIn(FRAMES_PER_FADE, false);
	load_level(index);
    d004:	0c 94 30 67 	jmp	0xce60	; 0xce60 <load_level>

0000d008 <render_boss_fight_scope_load>:
	load_level_tiles(false);
}

void render_boss_fight_scope_load()
{
	if (render_scope(&scope_animation))
    d008:	80 e3       	ldi	r24, 0x30	; 48
    d00a:	90 e1       	ldi	r25, 0x10	; 16
    d00c:	0e 94 be 5d 	call	0xbb7c	; 0xbb7c <render_scope>
    d010:	88 23       	and	r24, r24
    d012:	41 f0       	breq	.+16     	; 0xd024 <render_boss_fight_scope_load+0x1c>
	{
		game.boss_fight_status = BOSS_FIGHT_SUB_LOADING;
    d014:	82 e0       	ldi	r24, 0x02	; 2
    d016:	80 93 15 0c 	sts	0x0C15, r24
		SFX_ALARM;
    d01a:	41 e0       	ldi	r20, 0x01	; 1
    d01c:	6f ef       	ldi	r22, 0xFF	; 255
    d01e:	88 e0       	ldi	r24, 0x08	; 8
    d020:	0c 94 5c 4b 	jmp	0x96b8	; 0x96b8 <TriggerFx>
    d024:	08 95       	ret

0000d026 <render_boss_fight_sub_load>:
	}
}

void render_boss_fight_sub_load()
{
    d026:	0f 93       	push	r16
    d028:	1f 93       	push	r17
	char *map;
	map = LBGetNextFrameReverse(&(sub_animation.anim));
    d02a:	82 e2       	ldi	r24, 0x22	; 34
    d02c:	90 e1       	ldi	r25, 0x10	; 16
    d02e:	0e 94 6b 57 	call	0xaed6	; 0xaed6 <LBGetNextFrameReverse>
	DrawMap2(1, 4, (const char*) map);
    d032:	ac 01       	movw	r20, r24
    d034:	64 e0       	ldi	r22, 0x04	; 4
    d036:	81 e0       	ldi	r24, 0x01	; 1
    d038:	0e 94 0b 56 	call	0xac16	; 0xac16 <DrawMap>
	if (sub_animation.anim.reversing)
    d03c:	80 91 27 10 	lds	r24, 0x1027
    d040:	88 23       	and	r24, r24
    d042:	d9 f0       	breq	.+54     	; 0xd07a <render_boss_fight_sub_load+0x54>
	{
		game.boss_fight_status = BOSS_FIGHT;
    d044:	84 e0       	ldi	r24, 0x04	; 4
    d046:	80 93 15 0c 	sts	0x0C15, r24
		init_turret(&turret1, BOSS_TURRET_1_RIGHT_LIMIT, 72);
    d04a:	00 e0       	ldi	r16, 0x00	; 0
    d04c:	10 e0       	ldi	r17, 0x00	; 0
    d04e:	20 e9       	ldi	r18, 0x90	; 144
    d050:	32 e4       	ldi	r19, 0x42	; 66
    d052:	40 e0       	ldi	r20, 0x00	; 0
    d054:	50 e0       	ldi	r21, 0x00	; 0
    d056:	60 ec       	ldi	r22, 0xC0	; 192
    d058:	72 e4       	ldi	r23, 0x42	; 66
    d05a:	82 e7       	ldi	r24, 0x72	; 114
    d05c:	90 e1       	ldi	r25, 0x10	; 16
    d05e:	0e 94 1d 5a 	call	0xb43a	; 0xb43a <init_turret>
		init_turret(&turret2, BOSS_TURRET_2_RIGHT_LIMIT, 72);
    d062:	00 e0       	ldi	r16, 0x00	; 0
    d064:	10 e0       	ldi	r17, 0x00	; 0
    d066:	20 e9       	ldi	r18, 0x90	; 144
    d068:	32 e4       	ldi	r19, 0x42	; 66
    d06a:	40 e0       	ldi	r20, 0x00	; 0
    d06c:	50 e0       	ldi	r21, 0x00	; 0
    d06e:	60 e4       	ldi	r22, 0x40	; 64
    d070:	73 e4       	ldi	r23, 0x43	; 67
    d072:	8e e3       	ldi	r24, 0x3E	; 62
    d074:	90 e1       	ldi	r25, 0x10	; 16
    d076:	0e 94 1d 5a 	call	0xb43a	; 0xb43a <init_turret>
	}
}
    d07a:	1f 91       	pop	r17
    d07c:	0f 91       	pop	r16
    d07e:	08 95       	ret

0000d080 <render_boss_fight_sub_sinking>:

void render_boss_fight_sub_sinking()
{
	char *map;
	map = LBGetNextFrameReverse(&(sub_animation.anim));
    d080:	82 e2       	ldi	r24, 0x22	; 34
    d082:	90 e1       	ldi	r25, 0x10	; 16
    d084:	0e 94 6b 57 	call	0xaed6	; 0xaed6 <LBGetNextFrameReverse>
	if (sub_animation.anim.current_anim == 0) DrawMap2(1, 4, (const char*) map);
    d088:	20 91 22 10 	lds	r18, 0x1022
    d08c:	21 11       	cpse	r18, r1
    d08e:	05 c0       	rjmp	.+10     	; 0xd09a <render_boss_fight_sub_sinking+0x1a>
    d090:	ac 01       	movw	r20, r24
    d092:	64 e0       	ldi	r22, 0x04	; 4
    d094:	81 e0       	ldi	r24, 0x01	; 1
    d096:	0e 94 0b 56 	call	0xac16	; 0xac16 <DrawMap>
	if (sub_animation.anim.looped)
    d09a:	80 91 26 10 	lds	r24, 0x1026
    d09e:	88 23       	and	r24, r24
    d0a0:	19 f0       	breq	.+6      	; 0xd0a8 <render_boss_fight_sub_sinking+0x28>
	{
		game.boss_fight_status = BOSS_FIGHT_WON;
    d0a2:	88 e0       	ldi	r24, 0x08	; 8
    d0a4:	80 93 15 0c 	sts	0x0C15, r24
    d0a8:	08 95       	ret

0000d0aa <render_boss_turret>:
	}
}

void render_boss_turret(Turret* t, char sprite_index)
{
    d0aa:	ef 92       	push	r14
    d0ac:	ff 92       	push	r15
    d0ae:	0f 93       	push	r16
    d0b0:	1f 93       	push	r17
    d0b2:	cf 93       	push	r28
    d0b4:	df 93       	push	r29
    d0b6:	1f 92       	push	r1
    d0b8:	cd b7       	in	r28, 0x3d	; 61
    d0ba:	de b7       	in	r29, 0x3e	; 62
    d0bc:	7c 01       	movw	r14, r24
    d0be:	16 2f       	mov	r17, r22
	MoveSprite(sprite_index, t->shared.x, t->shared.y, 1, 1);
    d0c0:	fc 01       	movw	r30, r24
    d0c2:	67 81       	ldd	r22, Z+7	; 0x07
    d0c4:	70 85       	ldd	r23, Z+8	; 0x08
    d0c6:	81 85       	ldd	r24, Z+9	; 0x09
    d0c8:	92 85       	ldd	r25, Z+10	; 0x0a
    d0ca:	0e 94 6f 77 	call	0xeede	; 0xeede <__fixunssfsi>
    d0ce:	46 2f       	mov	r20, r22
    d0d0:	f7 01       	movw	r30, r14
    d0d2:	63 81       	ldd	r22, Z+3	; 0x03
    d0d4:	74 81       	ldd	r23, Z+4	; 0x04
    d0d6:	85 81       	ldd	r24, Z+5	; 0x05
    d0d8:	96 81       	ldd	r25, Z+6	; 0x06
    d0da:	49 83       	std	Y+1, r20	; 0x01
    d0dc:	0e 94 6f 77 	call	0xeede	; 0xeede <__fixunssfsi>
    d0e0:	01 e0       	ldi	r16, 0x01	; 1
    d0e2:	21 e0       	ldi	r18, 0x01	; 1
    d0e4:	49 81       	ldd	r20, Y+1	; 0x01
    d0e6:	81 2f       	mov	r24, r17
    d0e8:	0e 94 dc 55 	call	0xabb8	; 0xabb8 <MoveSprite>
}
    d0ec:	0f 90       	pop	r0
    d0ee:	df 91       	pop	r29
    d0f0:	cf 91       	pop	r28
    d0f2:	1f 91       	pop	r17
    d0f4:	0f 91       	pop	r16
    d0f6:	ff 90       	pop	r15
    d0f8:	ef 90       	pop	r14
    d0fa:	08 95       	ret

0000d0fc <render_boss_turret_shot>:

void render_boss_turret_shot(Turret* t, char sprite_index)
{
    d0fc:	ef 92       	push	r14
    d0fe:	ff 92       	push	r15
    d100:	0f 93       	push	r16
    d102:	1f 93       	push	r17
    d104:	cf 93       	push	r28
    d106:	df 93       	push	r29
    d108:	1f 92       	push	r1
    d10a:	cd b7       	in	r28, 0x3d	; 61
    d10c:	de b7       	in	r29, 0x3e	; 62
    d10e:	7c 01       	movw	r14, r24
    d110:	16 2f       	mov	r17, r22
	MoveSprite(sprite_index, t->shot[0].shared.x, t->shot[0].shared.y, 1, 1);
    d112:	fc 01       	movw	r30, r24
    d114:	63 89       	ldd	r22, Z+19	; 0x13
    d116:	74 89       	ldd	r23, Z+20	; 0x14
    d118:	85 89       	ldd	r24, Z+21	; 0x15
    d11a:	96 89       	ldd	r25, Z+22	; 0x16
    d11c:	0e 94 6f 77 	call	0xeede	; 0xeede <__fixunssfsi>
    d120:	46 2f       	mov	r20, r22
    d122:	f7 01       	movw	r30, r14
    d124:	67 85       	ldd	r22, Z+15	; 0x0f
    d126:	70 89       	ldd	r23, Z+16	; 0x10
    d128:	81 89       	ldd	r24, Z+17	; 0x11
    d12a:	92 89       	ldd	r25, Z+18	; 0x12
    d12c:	49 83       	std	Y+1, r20	; 0x01
    d12e:	0e 94 6f 77 	call	0xeede	; 0xeede <__fixunssfsi>
    d132:	01 e0       	ldi	r16, 0x01	; 1
    d134:	21 e0       	ldi	r18, 0x01	; 1
    d136:	49 81       	ldd	r20, Y+1	; 0x01
    d138:	81 2f       	mov	r24, r17
    d13a:	0e 94 dc 55 	call	0xabb8	; 0xabb8 <MoveSprite>
}
    d13e:	0f 90       	pop	r0
    d140:	df 91       	pop	r29
    d142:	cf 91       	pop	r28
    d144:	1f 91       	pop	r17
    d146:	0f 91       	pop	r16
    d148:	ff 90       	pop	r15
    d14a:	ef 90       	pop	r14
    d14c:	08 95       	ret

0000d14e <update_turret>:

void update_turret(Turret *t, u8 left_limit, u8 right_limit)
{
    d14e:	cf 92       	push	r12
    d150:	df 92       	push	r13
    d152:	ef 92       	push	r14
    d154:	ff 92       	push	r15
    d156:	cf 93       	push	r28
    d158:	df 93       	push	r29
    d15a:	ec 01       	movw	r28, r24
    d15c:	36 2f       	mov	r19, r22
	u8 x = t->shared.x / 8;
    d15e:	cb 80       	ldd	r12, Y+3	; 0x03
    d160:	dc 80       	ldd	r13, Y+4	; 0x04
    d162:	ed 80       	ldd	r14, Y+5	; 0x05
    d164:	fe 80       	ldd	r15, Y+6	; 0x06
	u8 y = t->shared.y / 8 - 3;
    d166:	6f 81       	ldd	r22, Y+7	; 0x07
    d168:	78 85       	ldd	r23, Y+8	; 0x08
    d16a:	89 85       	ldd	r24, Y+9	; 0x09
    d16c:	9a 85       	ldd	r25, Y+10	; 0x0a
	int tile_index = (y * 30) + x;
	
	if (t->lives <= 0)
    d16e:	2b 85       	ldd	r18, Y+11	; 0x0b
    d170:	21 11       	cpse	r18, r1
    d172:	27 c0       	rjmp	.+78     	; 0xd1c2 <update_turret+0x74>
}

void update_turret(Turret *t, u8 left_limit, u8 right_limit)
{
	u8 x = t->shared.x / 8;
	u8 y = t->shared.y / 8 - 3;
    d174:	20 e0       	ldi	r18, 0x00	; 0
    d176:	30 e0       	ldi	r19, 0x00	; 0
    d178:	40 e0       	ldi	r20, 0x00	; 0
    d17a:	5e e3       	ldi	r21, 0x3E	; 62
    d17c:	0e 94 51 78 	call	0xf0a2	; 0xf0a2 <__mulsf3>
    d180:	20 e0       	ldi	r18, 0x00	; 0
    d182:	30 e0       	ldi	r19, 0x00	; 0
    d184:	40 e4       	ldi	r20, 0x40	; 64
    d186:	50 e4       	ldi	r21, 0x40	; 64
    d188:	0e 94 99 76 	call	0xed32	; 0xed32 <__subsf3>
    d18c:	0e 94 6f 77 	call	0xeede	; 0xeede <__fixunssfsi>
	int tile_index = (y * 30) + x;
    d190:	8e e1       	ldi	r24, 0x1E	; 30
    d192:	68 9f       	mul	r22, r24
    d194:	e0 01       	movw	r28, r0
    d196:	11 24       	eor	r1, r1
	MoveSprite(sprite_index, t->shot[0].shared.x, t->shot[0].shared.y, 1, 1);
}

void update_turret(Turret *t, u8 left_limit, u8 right_limit)
{
	u8 x = t->shared.x / 8;
    d198:	20 e0       	ldi	r18, 0x00	; 0
    d19a:	30 e0       	ldi	r19, 0x00	; 0
    d19c:	40 e0       	ldi	r20, 0x00	; 0
    d19e:	5e e3       	ldi	r21, 0x3E	; 62
    d1a0:	c7 01       	movw	r24, r14
    d1a2:	b6 01       	movw	r22, r12
    d1a4:	0e 94 51 78 	call	0xf0a2	; 0xf0a2 <__mulsf3>
    d1a8:	0e 94 6f 77 	call	0xeede	; 0xeede <__fixunssfsi>
	u8 y = t->shared.y / 8 - 3;
	int tile_index = (y * 30) + x;
    d1ac:	c6 0f       	add	r28, r22
    d1ae:	d1 1d       	adc	r29, r1
	
	if (t->lives <= 0)
	{
		explode_tile(&tile_animations, tile_index);
    d1b0:	be 01       	movw	r22, r28
    d1b2:	8f e1       	ldi	r24, 0x1F	; 31
    d1b4:	9c e0       	ldi	r25, 0x0C	; 12
    d1b6:	0e 94 86 61 	call	0xc30c	; 0xc30c <explode_tile>
		level.level_map[tile_index] = L_EMPTY;
    d1ba:	c5 54       	subi	r28, 0x45	; 69
    d1bc:	d3 4f       	sbci	r29, 0xF3	; 243
    d1be:	19 82       	std	Y+1, r1	; 0x01
    d1c0:	56 c0       	rjmp	.+172    	; 0xd26e <update_turret+0x120>
	}
	else if (t->shared.direction == D_LEFT)
    d1c2:	98 81       	ld	r25, Y
    d1c4:	93 30       	cpi	r25, 0x03	; 3
    d1c6:	19 f5       	brne	.+70     	; 0xd20e <update_turret+0xc0>
	{
		if (t->shared.x < left_limit)
    d1c8:	63 2f       	mov	r22, r19
    d1ca:	70 e0       	ldi	r23, 0x00	; 0
    d1cc:	80 e0       	ldi	r24, 0x00	; 0
    d1ce:	90 e0       	ldi	r25, 0x00	; 0
    d1d0:	0e 94 9d 77 	call	0xef3a	; 0xef3a <__floatsisf>
    d1d4:	9b 01       	movw	r18, r22
    d1d6:	ac 01       	movw	r20, r24
    d1d8:	c7 01       	movw	r24, r14
    d1da:	b6 01       	movw	r22, r12
    d1dc:	0e 94 fe 76 	call	0xedfc	; 0xedfc <__cmpsf2>
    d1e0:	87 ff       	sbrs	r24, 7
    d1e2:	02 c0       	rjmp	.+4      	; 0xd1e8 <update_turret+0x9a>
		{
			t->shared.direction = D_RIGHT;
    d1e4:	81 e0       	ldi	r24, 0x01	; 1
    d1e6:	24 c0       	rjmp	.+72     	; 0xd230 <update_turret+0xe2>
			t->shared.speed = LBRandom(BOSS_TURRET_SPEED, BOSS_TURRET_SPEED+50);
		}
		else
		{
			t->shared.x -= FRAME_TIME*t->shared.speed;
    d1e8:	69 81       	ldd	r22, Y+1	; 0x01
    d1ea:	70 e0       	ldi	r23, 0x00	; 0
    d1ec:	80 e0       	ldi	r24, 0x00	; 0
    d1ee:	90 e0       	ldi	r25, 0x00	; 0
    d1f0:	0e 94 9d 77 	call	0xef3a	; 0xef3a <__floatsisf>
    d1f4:	25 e6       	ldi	r18, 0x65	; 101
    d1f6:	38 e8       	ldi	r19, 0x88	; 136
    d1f8:	48 e8       	ldi	r20, 0x88	; 136
    d1fa:	5c e3       	ldi	r21, 0x3C	; 60
    d1fc:	0e 94 51 78 	call	0xf0a2	; 0xf0a2 <__mulsf3>
    d200:	9b 01       	movw	r18, r22
    d202:	ac 01       	movw	r20, r24
    d204:	c7 01       	movw	r24, r14
    d206:	b6 01       	movw	r22, r12
    d208:	0e 94 99 76 	call	0xed32	; 0xed32 <__subsf3>
    d20c:	2c c0       	rjmp	.+88     	; 0xd266 <update_turret+0x118>
		}
	}
	else if (t->shared.direction == D_RIGHT)
    d20e:	91 30       	cpi	r25, 0x01	; 1
    d210:	71 f5       	brne	.+92     	; 0xd26e <update_turret+0x120>
	{
		if (t->shared.x > right_limit)
    d212:	64 2f       	mov	r22, r20
    d214:	70 e0       	ldi	r23, 0x00	; 0
    d216:	80 e0       	ldi	r24, 0x00	; 0
    d218:	90 e0       	ldi	r25, 0x00	; 0
    d21a:	0e 94 9d 77 	call	0xef3a	; 0xef3a <__floatsisf>
    d21e:	9b 01       	movw	r18, r22
    d220:	ac 01       	movw	r20, r24
    d222:	c7 01       	movw	r24, r14
    d224:	b6 01       	movw	r22, r12
    d226:	0e 94 4d 78 	call	0xf09a	; 0xf09a <__gesf2>
    d22a:	18 16       	cp	r1, r24
    d22c:	54 f4       	brge	.+20     	; 0xd242 <update_turret+0xf4>
		{
			t->shared.direction = D_LEFT;
    d22e:	83 e0       	ldi	r24, 0x03	; 3
    d230:	88 83       	st	Y, r24
			t->shared.speed = LBRandom(BOSS_TURRET_SPEED, BOSS_TURRET_SPEED+50);
    d232:	6c e8       	ldi	r22, 0x8C	; 140
    d234:	70 e0       	ldi	r23, 0x00	; 0
    d236:	8a e5       	ldi	r24, 0x5A	; 90
    d238:	90 e0       	ldi	r25, 0x00	; 0
    d23a:	0e 94 1f 59 	call	0xb23e	; 0xb23e <LBRandom>
    d23e:	89 83       	std	Y+1, r24	; 0x01
    d240:	16 c0       	rjmp	.+44     	; 0xd26e <update_turret+0x120>
		}
		else
		{
			t->shared.x += FRAME_TIME*t->shared.speed;
    d242:	69 81       	ldd	r22, Y+1	; 0x01
    d244:	70 e0       	ldi	r23, 0x00	; 0
    d246:	80 e0       	ldi	r24, 0x00	; 0
    d248:	90 e0       	ldi	r25, 0x00	; 0
    d24a:	0e 94 9d 77 	call	0xef3a	; 0xef3a <__floatsisf>
    d24e:	25 e6       	ldi	r18, 0x65	; 101
    d250:	38 e8       	ldi	r19, 0x88	; 136
    d252:	48 e8       	ldi	r20, 0x88	; 136
    d254:	5c e3       	ldi	r21, 0x3C	; 60
    d256:	0e 94 51 78 	call	0xf0a2	; 0xf0a2 <__mulsf3>
    d25a:	9b 01       	movw	r18, r22
    d25c:	ac 01       	movw	r20, r24
    d25e:	c7 01       	movw	r24, r14
    d260:	b6 01       	movw	r22, r12
    d262:	0e 94 9a 76 	call	0xed34	; 0xed34 <__addsf3>
    d266:	6b 83       	std	Y+3, r22	; 0x03
    d268:	7c 83       	std	Y+4, r23	; 0x04
    d26a:	8d 83       	std	Y+5, r24	; 0x05
    d26c:	9e 83       	std	Y+6, r25	; 0x06
		}
	}
}
    d26e:	df 91       	pop	r29
    d270:	cf 91       	pop	r28
    d272:	ff 90       	pop	r15
    d274:	ef 90       	pop	r14
    d276:	df 90       	pop	r13
    d278:	cf 90       	pop	r12
    d27a:	08 95       	ret

0000d27c <update_turret_shot>:

void update_turret_shot(Turret* t, Shot* s)
{	
    d27c:	0f 93       	push	r16
    d27e:	1f 93       	push	r17
    d280:	cf 93       	push	r28
    d282:	df 93       	push	r29
    d284:	8c 01       	movw	r16, r24
    d286:	eb 01       	movw	r28, r22
	if (t->lives <= 0)
    d288:	fc 01       	movw	r30, r24
    d28a:	83 85       	ldd	r24, Z+11	; 0x0b
    d28c:	81 11       	cpse	r24, r1
    d28e:	02 c0       	rjmp	.+4      	; 0xd294 <update_turret_shot+0x18>
	{
		s->active = 0;
    d290:	1e 86       	std	Y+14, r1	; 0x0e
		return;
    d292:	76 c0       	rjmp	.+236    	; 0xd380 <update_turret_shot+0x104>
	}
	if (!s->active)
    d294:	8e 85       	ldd	r24, Y+14	; 0x0e
    d296:	81 11       	cpse	r24, r1
    d298:	2e c0       	rjmp	.+92     	; 0xd2f6 <update_turret_shot+0x7a>
	{
		s->active = 1;
    d29a:	81 e0       	ldi	r24, 0x01	; 1
    d29c:	8e 87       	std	Y+14, r24	; 0x0e
		s->shared.x = t->shared.x+3;
    d29e:	20 e0       	ldi	r18, 0x00	; 0
    d2a0:	30 e0       	ldi	r19, 0x00	; 0
    d2a2:	40 e4       	ldi	r20, 0x40	; 64
    d2a4:	50 e4       	ldi	r21, 0x40	; 64
    d2a6:	f8 01       	movw	r30, r16
    d2a8:	63 81       	ldd	r22, Z+3	; 0x03
    d2aa:	74 81       	ldd	r23, Z+4	; 0x04
    d2ac:	85 81       	ldd	r24, Z+5	; 0x05
    d2ae:	96 81       	ldd	r25, Z+6	; 0x06
    d2b0:	0e 94 9a 76 	call	0xed34	; 0xed34 <__addsf3>
    d2b4:	6b 83       	std	Y+3, r22	; 0x03
    d2b6:	7c 83       	std	Y+4, r23	; 0x04
    d2b8:	8d 83       	std	Y+5, r24	; 0x05
    d2ba:	9e 83       	std	Y+6, r25	; 0x06
		s->shared.y = t->shared.y+3;
    d2bc:	20 e0       	ldi	r18, 0x00	; 0
    d2be:	30 e0       	ldi	r19, 0x00	; 0
    d2c0:	40 e4       	ldi	r20, 0x40	; 64
    d2c2:	50 e4       	ldi	r21, 0x40	; 64
    d2c4:	f8 01       	movw	r30, r16
    d2c6:	67 81       	ldd	r22, Z+7	; 0x07
    d2c8:	70 85       	ldd	r23, Z+8	; 0x08
    d2ca:	81 85       	ldd	r24, Z+9	; 0x09
    d2cc:	92 85       	ldd	r25, Z+10	; 0x0a
    d2ce:	0e 94 9a 76 	call	0xed34	; 0xed34 <__addsf3>
    d2d2:	6f 83       	std	Y+7, r22	; 0x07
    d2d4:	78 87       	std	Y+8, r23	; 0x08
    d2d6:	89 87       	std	Y+9, r24	; 0x09
    d2d8:	9a 87       	std	Y+10, r25	; 0x0a
		SFX_CANNONBALL;
    d2da:	80 91 50 0c 	lds	r24, 0x0C50
    d2de:	80 fd       	sbrc	r24, 0
    d2e0:	0a c0       	rjmp	.+20     	; 0xd2f6 <update_turret_shot+0x7a>
    d2e2:	80 91 be 0f 	lds	r24, 0x0FBE
    d2e6:	80 fd       	sbrc	r24, 0
    d2e8:	06 c0       	rjmp	.+12     	; 0xd2f6 <update_turret_shot+0x7a>
    d2ea:	2f ef       	ldi	r18, 0xFF	; 255
    d2ec:	47 e1       	ldi	r20, 0x17	; 23
    d2ee:	62 e0       	ldi	r22, 0x02	; 2
    d2f0:	84 e0       	ldi	r24, 0x04	; 4
    d2f2:	0e 94 a4 4b 	call	0x9748	; 0x9748 <TriggerNote>
	}
	s->shared.y += FRAME_TIME*BOSS_TURRET_SHOT_SPEED;
    d2f6:	23 e3       	ldi	r18, 0x33	; 51
    d2f8:	35 e5       	ldi	r19, 0x55	; 85
    d2fa:	45 e8       	ldi	r20, 0x85	; 133
    d2fc:	50 e4       	ldi	r21, 0x40	; 64
    d2fe:	6f 81       	ldd	r22, Y+7	; 0x07
    d300:	78 85       	ldd	r23, Y+8	; 0x08
    d302:	89 85       	ldd	r24, Y+9	; 0x09
    d304:	9a 85       	ldd	r25, Y+10	; 0x0a
    d306:	0e 94 9a 76 	call	0xed34	; 0xed34 <__addsf3>
    d30a:	6f 83       	std	Y+7, r22	; 0x07
    d30c:	78 87       	std	Y+8, r23	; 0x08
    d30e:	89 87       	std	Y+9, r24	; 0x09
    d310:	9a 87       	std	Y+10, r25	; 0x0a
	
	/* Level boundries first */
	if (s->shared.y + 8 > 216)
    d312:	20 e0       	ldi	r18, 0x00	; 0
    d314:	30 e0       	ldi	r19, 0x00	; 0
    d316:	40 e0       	ldi	r20, 0x00	; 0
    d318:	51 e4       	ldi	r21, 0x41	; 65
    d31a:	0e 94 9a 76 	call	0xed34	; 0xed34 <__addsf3>
    d31e:	20 e0       	ldi	r18, 0x00	; 0
    d320:	30 e0       	ldi	r19, 0x00	; 0
    d322:	48 e5       	ldi	r20, 0x58	; 88
    d324:	53 e4       	ldi	r21, 0x43	; 67
    d326:	0e 94 4d 78 	call	0xf09a	; 0xf09a <__gesf2>
    d32a:	18 16       	cp	r1, r24
    d32c:	0c f4       	brge	.+2      	; 0xd330 <update_turret_shot+0xb4>
    d32e:	b0 cf       	rjmp	.-160    	; 0xd290 <update_turret_shot+0x14>
		s->active = 0;
		return;
	}
	
	/* Player interaction */
	if (player_shot(game.boss_fight_player, s) && !(game.boss_fight_player->flags & EXPLODING_FLAG))
    d330:	00 91 18 0c 	lds	r16, 0x0C18
    d334:	10 91 19 0c 	lds	r17, 0x0C19
    d338:	be 01       	movw	r22, r28
    d33a:	c8 01       	movw	r24, r16
    d33c:	0e 94 dd 5f 	call	0xbfba	; 0xbfba <player_shot>
    d340:	88 23       	and	r24, r24
    d342:	f1 f0       	breq	.+60     	; 0xd380 <update_turret_shot+0x104>
    d344:	f8 01       	movw	r30, r16
    d346:	84 89       	ldd	r24, Z+20	; 0x14
    d348:	80 fd       	sbrc	r24, 0
    d34a:	1a c0       	rjmp	.+52     	; 0xd380 <update_turret_shot+0x104>
	{
		game.boss_fight_player_lives--;
    d34c:	90 91 17 0c 	lds	r25, 0x0C17
    d350:	91 50       	subi	r25, 0x01	; 1
    d352:	90 93 17 0c 	sts	0x0C17, r25
		if (game.boss_fight_player_lives <= 0)
    d356:	91 11       	cpse	r25, r1
    d358:	03 c0       	rjmp	.+6      	; 0xd360 <update_turret_shot+0xe4>
		{
			game.boss_fight_status = BOSS_FIGHT_LOST;
    d35a:	80 e1       	ldi	r24, 0x10	; 16
    d35c:	80 93 15 0c 	sts	0x0C15, r24
		}
		s->active = 0;
    d360:	1e 86       	std	Y+14, r1	; 0x0e
		kill_player(game.boss_fight_player, game.boss_fight_player_hud);
    d362:	60 91 16 0c 	lds	r22, 0x0C16
    d366:	c8 01       	movw	r24, r16
    d368:	0e 94 0c 61 	call	0xc218	; 0xc218 <kill_player>
		SFX_TANK_EXPLODE;
    d36c:	2f ef       	ldi	r18, 0xFF	; 255
    d36e:	40 e1       	ldi	r20, 0x10	; 16
    d370:	67 e0       	ldi	r22, 0x07	; 7
    d372:	84 e0       	ldi	r24, 0x04	; 4
	}
}
    d374:	df 91       	pop	r29
    d376:	cf 91       	pop	r28
    d378:	1f 91       	pop	r17
    d37a:	0f 91       	pop	r16
		{
			game.boss_fight_status = BOSS_FIGHT_LOST;
		}
		s->active = 0;
		kill_player(game.boss_fight_player, game.boss_fight_player_hud);
		SFX_TANK_EXPLODE;
    d37c:	0c 94 a4 4b 	jmp	0x9748	; 0x9748 <TriggerNote>
	}
}
    d380:	df 91       	pop	r29
    d382:	cf 91       	pop	r28
    d384:	1f 91       	pop	r17
    d386:	0f 91       	pop	r16
    d388:	08 95       	ret

0000d38a <load_splash>:
	}
}

void load_splash()
{
	game.current_screen = SPLASH;
    d38a:	10 92 12 0c 	sts	0x0C12, r1
	clear_sprites();
    d38e:	0e 94 22 5b 	call	0xb644	; 0xb644 <clear_sprites>
	Print(7, 13, (char*) str1Player);
    d392:	43 e8       	ldi	r20, 0x83	; 131
    d394:	5b e0       	ldi	r21, 0x0B	; 11
    d396:	6d e0       	ldi	r22, 0x0D	; 13
    d398:	70 e0       	ldi	r23, 0x00	; 0
    d39a:	87 e0       	ldi	r24, 0x07	; 7
    d39c:	90 e0       	ldi	r25, 0x00	; 0
    d39e:	0e 94 8b 56 	call	0xad16	; 0xad16 <Print>
	Print(7, 14, (char*) str2Player);
    d3a2:	42 e7       	ldi	r20, 0x72	; 114
    d3a4:	5b e0       	ldi	r21, 0x0B	; 11
    d3a6:	6e e0       	ldi	r22, 0x0E	; 14
    d3a8:	70 e0       	ldi	r23, 0x00	; 0
    d3aa:	87 e0       	ldi	r24, 0x07	; 7
    d3ac:	90 e0       	ldi	r25, 0x00	; 0
    d3ae:	0e 94 8b 56 	call	0xad16	; 0xad16 <Print>
	Print(7, 15, (char*) strHighscores);
    d3b2:	48 e6       	ldi	r20, 0x68	; 104
    d3b4:	5b e0       	ldi	r21, 0x0B	; 11
    d3b6:	6f e0       	ldi	r22, 0x0F	; 15
    d3b8:	70 e0       	ldi	r23, 0x00	; 0
    d3ba:	87 e0       	ldi	r24, 0x07	; 7
    d3bc:	90 e0       	ldi	r25, 0x00	; 0
    d3be:	0e 94 8b 56 	call	0xad16	; 0xad16 <Print>
	Print(5, 26, (char*) strCopyright);
    d3c2:	41 e9       	ldi	r20, 0x91	; 145
    d3c4:	5b e0       	ldi	r21, 0x0B	; 11
    d3c6:	6a e1       	ldi	r22, 0x1A	; 26
    d3c8:	70 e0       	ldi	r23, 0x00	; 0
    d3ca:	85 e0       	ldi	r24, 0x05	; 5
    d3cc:	90 e0       	ldi	r25, 0x00	; 0
    d3ce:	0e 94 8b 56 	call	0xad16	; 0xad16 <Print>
	DrawMap2(4, 5, (const char*) map_splash);
    d3d2:	42 e1       	ldi	r20, 0x12	; 18
    d3d4:	56 e8       	ldi	r21, 0x86	; 134
    d3d6:	65 e0       	ldi	r22, 0x05	; 5
    d3d8:	84 e0       	ldi	r24, 0x04	; 4
    d3da:	0e 94 0b 56 	call	0xac16	; 0xac16 <DrawMap>
	MapSprite2(0, map_right_arrow, 0);
    d3de:	40 e0       	ldi	r20, 0x00	; 0
    d3e0:	6f e5       	ldi	r22, 0x5F	; 95
    d3e2:	7c e4       	ldi	r23, 0x4C	; 76
    d3e4:	80 e0       	ldi	r24, 0x00	; 0
    d3e6:	0c 94 8a 55 	jmp	0xab14	; 0xab14 <MapSprite2>

0000d3ea <select_pressed>:
}

char select_pressed(JoyPadState* p)
{
    d3ea:	fc 01       	movw	r30, r24
    d3ec:	20 81       	ld	r18, Z
    d3ee:	31 81       	ldd	r19, Z+1	; 0x01
    d3f0:	28 70       	andi	r18, 0x08	; 8
    d3f2:	31 70       	andi	r19, 0x01	; 1
	return (p->pressed & BTN_A) || (p->pressed & BTN_START);
    d3f4:	81 e0       	ldi	r24, 0x01	; 1
    d3f6:	23 2b       	or	r18, r19
    d3f8:	09 f4       	brne	.+2      	; 0xd3fc <select_pressed+0x12>
    d3fa:	80 e0       	ldi	r24, 0x00	; 0
}
    d3fc:	08 95       	ret

0000d3fe <load_tank_rank>:
	}
	demo_counter++;
}

void load_tank_rank()
{
    d3fe:	ff 92       	push	r15
    d400:	0f 93       	push	r16
    d402:	1f 93       	push	r17
    d404:	cf 93       	push	r28
    d406:	df 93       	push	r29
	u8 y = 7;
	u8 rank = 1;
	
	game.current_screen = TANK_RANK;
    d408:	81 e0       	ldi	r24, 0x01	; 1
    d40a:	80 93 12 0c 	sts	0x0C12, r24
	clear_sprites();
    d40e:	0e 94 22 5b 	call	0xb644	; 0xb644 <clear_sprites>
	DrawMap2(7, 1, map_green_tank);
    d412:	4f ed       	ldi	r20, 0xDF	; 223
    d414:	55 e8       	ldi	r21, 0x85	; 133
    d416:	61 e0       	ldi	r22, 0x01	; 1
    d418:	87 e0       	ldi	r24, 0x07	; 7
    d41a:	0e 94 0b 56 	call	0xac16	; 0xac16 <DrawMap>
	DrawMap2(20, 1, map_blue_tank);
    d41e:	49 ed       	ldi	r20, 0xD9	; 217
    d420:	55 e8       	ldi	r21, 0x85	; 133
    d422:	61 e0       	ldi	r22, 0x01	; 1
    d424:	84 e1       	ldi	r24, 0x14	; 20
    d426:	0e 94 0b 56 	call	0xac16	; 0xac16 <DrawMap>
	Print(10, 2, (char*) strHighscores);
    d42a:	48 e6       	ldi	r20, 0x68	; 104
    d42c:	5b e0       	ldi	r21, 0x0B	; 11
    d42e:	62 e0       	ldi	r22, 0x02	; 2
    d430:	70 e0       	ldi	r23, 0x00	; 0
    d432:	8a e0       	ldi	r24, 0x0A	; 10
    d434:	90 e0       	ldi	r25, 0x00	; 0
    d436:	0e 94 8b 56 	call	0xad16	; 0xad16 <Print>
    d43a:	01 ed       	ldi	r16, 0xD1	; 209
    d43c:	1b e0       	ldi	r17, 0x0B	; 11
    d43e:	c7 e0       	ldi	r28, 0x07	; 7
    d440:	d0 e0       	ldi	r29, 0x00	; 0
}

void load_tank_rank()
{
	u8 y = 7;
	u8 rank = 1;
    d442:	ff 24       	eor	r15, r15
    d444:	f3 94       	inc	r15
	DrawMap2(7, 1, map_green_tank);
	DrawMap2(20, 1, map_blue_tank);
	Print(10, 2, (char*) strHighscores);
	for (u8 i = 0; i < 25; i += 5)
	{
		PrintByte(2, y, rank, false);
    d446:	20 e0       	ldi	r18, 0x00	; 0
    d448:	4f 2d       	mov	r20, r15
    d44a:	be 01       	movw	r22, r28
    d44c:	82 e0       	ldi	r24, 0x02	; 2
    d44e:	90 e0       	ldi	r25, 0x00	; 0
    d450:	0e 94 58 56 	call	0xacb0	; 0xacb0 <PrintByte>
		PrintChar(3, y, '.');
    d454:	4e e2       	ldi	r20, 0x2E	; 46
    d456:	be 01       	movw	r22, r28
    d458:	83 e0       	ldi	r24, 0x03	; 3
    d45a:	90 e0       	ldi	r25, 0x00	; 0
    d45c:	0e 94 a6 56 	call	0xad4c	; 0xad4c <PrintChar>
    d460:	f8 01       	movw	r30, r16
    d462:	34 97       	sbiw	r30, 0x04	; 4
		LBPrintStr(5, y, &handles.data[scores.data[i]*3], 3);
    d464:	80 81       	ld	r24, Z
    d466:	93 e0       	ldi	r25, 0x03	; 3
    d468:	89 9f       	mul	r24, r25
    d46a:	a0 01       	movw	r20, r0
    d46c:	11 24       	eor	r1, r1
    d46e:	4c 50       	subi	r20, 0x0C	; 12
    d470:	54 4f       	sbci	r21, 0xF4	; 244
    d472:	23 e0       	ldi	r18, 0x03	; 3
    d474:	6c 2f       	mov	r22, r28
    d476:	85 e0       	ldi	r24, 0x05	; 5
    d478:	0e 94 ee 57 	call	0xafdc	; 0xafdc <LBPrintStr>
		Print(9, y, (char*) strOwns);
    d47c:	4d ee       	ldi	r20, 0xED	; 237
    d47e:	5a e0       	ldi	r21, 0x0A	; 10
    d480:	be 01       	movw	r22, r28
    d482:	89 e0       	ldi	r24, 0x09	; 9
    d484:	90 e0       	ldi	r25, 0x00	; 0
    d486:	0e 94 8b 56 	call	0xad16	; 0xad16 <Print>
    d48a:	f8 01       	movw	r30, r16
    d48c:	33 97       	sbiw	r30, 0x03	; 3
		LBPrintStr(14, y, &handles.data[scores.data[i+1]*3], 3);
    d48e:	80 81       	ld	r24, Z
    d490:	e3 e0       	ldi	r30, 0x03	; 3
    d492:	8e 9f       	mul	r24, r30
    d494:	a0 01       	movw	r20, r0
    d496:	11 24       	eor	r1, r1
    d498:	4c 50       	subi	r20, 0x0C	; 12
    d49a:	54 4f       	sbci	r21, 0xF4	; 244
    d49c:	23 e0       	ldi	r18, 0x03	; 3
    d49e:	6c 2f       	mov	r22, r28
    d4a0:	8e e0       	ldi	r24, 0x0E	; 14
    d4a2:	0e 94 ee 57 	call	0xafdc	; 0xafdc <LBPrintStr>
		Print(18, y, (char*) strBy);
    d4a6:	4a ee       	ldi	r20, 0xEA	; 234
    d4a8:	5a e0       	ldi	r21, 0x0A	; 10
    d4aa:	be 01       	movw	r22, r28
    d4ac:	82 e1       	ldi	r24, 0x12	; 18
    d4ae:	90 e0       	ldi	r25, 0x00	; 0
    d4b0:	0e 94 8b 56 	call	0xad16	; 0xad16 <Print>
		PrintByte(23, y, scores.data[i+2] ,true);
    d4b4:	21 e0       	ldi	r18, 0x01	; 1
    d4b6:	f8 01       	movw	r30, r16
    d4b8:	32 97       	sbiw	r30, 0x02	; 2
    d4ba:	40 81       	ld	r20, Z
    d4bc:	be 01       	movw	r22, r28
    d4be:	87 e1       	ldi	r24, 0x17	; 23
    d4c0:	90 e0       	ldi	r25, 0x00	; 0
    d4c2:	0e 94 58 56 	call	0xacb0	; 0xacb0 <PrintByte>
		PrintChar(24, y, '-');
    d4c6:	4d e2       	ldi	r20, 0x2D	; 45
    d4c8:	be 01       	movw	r22, r28
    d4ca:	88 e1       	ldi	r24, 0x18	; 24
    d4cc:	90 e0       	ldi	r25, 0x00	; 0
    d4ce:	0e 94 a6 56 	call	0xad4c	; 0xad4c <PrintChar>
		PrintByte(27, y, scores.data[i+3] ,true);
    d4d2:	21 e0       	ldi	r18, 0x01	; 1
    d4d4:	f8 01       	movw	r30, r16
    d4d6:	31 97       	sbiw	r30, 0x01	; 1
    d4d8:	40 81       	ld	r20, Z
    d4da:	be 01       	movw	r22, r28
    d4dc:	8b e1       	ldi	r24, 0x1B	; 27
    d4de:	90 e0       	ldi	r25, 0x00	; 0
    d4e0:	0e 94 58 56 	call	0xacb0	; 0xacb0 <PrintByte>
		if (scores.data[i+4])
    d4e4:	f8 01       	movw	r30, r16
    d4e6:	80 81       	ld	r24, Z
    d4e8:	88 23       	and	r24, r24
    d4ea:	11 f0       	breq	.+4      	; 0xd4f0 <load_tank_rank+0xf2>
			PrintChar(29, y, '*');
    d4ec:	4a e2       	ldi	r20, 0x2A	; 42
    d4ee:	01 c0       	rjmp	.+2      	; 0xd4f2 <load_tank_rank+0xf4>
		else
			PrintChar(29, y, ' ');
    d4f0:	40 e2       	ldi	r20, 0x20	; 32
    d4f2:	be 01       	movw	r22, r28
    d4f4:	8d e1       	ldi	r24, 0x1D	; 29
    d4f6:	90 e0       	ldi	r25, 0x00	; 0
    d4f8:	0e 94 a6 56 	call	0xad4c	; 0xad4c <PrintChar>
		y += 3;
		rank += 1;
    d4fc:	f3 94       	inc	r15
    d4fe:	23 96       	adiw	r28, 0x03	; 3
    d500:	0b 5f       	subi	r16, 0xFB	; 251
    d502:	1f 4f       	sbci	r17, 0xFF	; 255
	game.current_screen = TANK_RANK;
	clear_sprites();
	DrawMap2(7, 1, map_green_tank);
	DrawMap2(20, 1, map_blue_tank);
	Print(10, 2, (char*) strHighscores);
	for (u8 i = 0; i < 25; i += 5)
    d504:	f6 e0       	ldi	r31, 0x06	; 6
    d506:	ff 12       	cpse	r15, r31
    d508:	9e cf       	rjmp	.-196    	; 0xd446 <load_tank_rank+0x48>
		else
			PrintChar(29, y, ' ');
		y += 3;
		rank += 1;
	}
	Print(3, 22, (char*) strReset);
    d50a:	41 e0       	ldi	r20, 0x01	; 1
    d50c:	5b e0       	ldi	r21, 0x0B	; 11
    d50e:	66 e1       	ldi	r22, 0x16	; 22
    d510:	70 e0       	ldi	r23, 0x00	; 0
    d512:	83 e0       	ldi	r24, 0x03	; 3
    d514:	90 e0       	ldi	r25, 0x00	; 0
    d516:	0e 94 8b 56 	call	0xad16	; 0xad16 <Print>
	Print(10, 24, (char*) strCancelHandle);
    d51a:	4a e1       	ldi	r20, 0x1A	; 26
    d51c:	5b e0       	ldi	r21, 0x0B	; 11
    d51e:	68 e1       	ldi	r22, 0x18	; 24
    d520:	70 e0       	ldi	r23, 0x00	; 0
    d522:	8a e0       	ldi	r24, 0x0A	; 10
    d524:	90 e0       	ldi	r25, 0x00	; 0
}
    d526:	df 91       	pop	r29
    d528:	cf 91       	pop	r28
    d52a:	1f 91       	pop	r17
    d52c:	0f 91       	pop	r16
    d52e:	ff 90       	pop	r15
			PrintChar(29, y, ' ');
		y += 3;
		rank += 1;
	}
	Print(3, 22, (char*) strReset);
	Print(10, 24, (char*) strCancelHandle);
    d530:	0c 94 8b 56 	jmp	0xad16	; 0xad16 <Print>

0000d534 <exit_game>:
	save_eeprom(&scores);
}

void exit_game()
{
    save_score();
    d534:	0e 94 2f 5b 	call	0xb65e	; 0xb65e <save_score>
	fade_through();
    d538:	0e 94 18 5b 	call	0xb630	; 0xb630 <fade_through>
	SetSpriteVisibility(true);
    d53c:	81 e0       	ldi	r24, 0x01	; 1
    d53e:	0e 94 96 54 	call	0xa92c	; 0xa92c <SetSpriteVisibility>
	init_game_state();
    d542:	0e 94 c9 5a 	call	0xb592	; 0xb592 <init_game_state>
	load_tank_rank();
    d546:	0c 94 ff 69 	jmp	0xd3fe	; 0xd3fe <load_tank_rank>

0000d54a <update_player>:
		return FRAME_TIME * s->speed;
	return FRAME_TIME * s->speed * AI_SPEED_FACTOR;
}

void update_player(JoyPadState* p, Player* player)
{
    d54a:	cf 92       	push	r12
    d54c:	df 92       	push	r13
    d54e:	ef 92       	push	r14
    d550:	ff 92       	push	r15
    d552:	0f 93       	push	r16
    d554:	1f 93       	push	r17
    d556:	cf 93       	push	r28
    d558:	df 93       	push	r29
    d55a:	00 d0       	rcall	.+0      	; 0xd55c <update_player+0x12>
    d55c:	00 d0       	rcall	.+0      	; 0xd55e <update_player+0x14>
    d55e:	cd b7       	in	r28, 0x3d	; 61
    d560:	de b7       	in	r29, 0x3e	; 62
    d562:	8c 01       	movw	r16, r24
    d564:	6b 01       	movw	r12, r22
	Shot* shot;
	
	player->shared.recoiled = 0;
    d566:	fb 01       	movw	r30, r22
    d568:	12 82       	std	Z+2, r1	; 0x02
	if ((p->pressed & BTN_START) && (game.boss_fight_status == 0))
    d56a:	fc 01       	movw	r30, r24
    d56c:	80 81       	ld	r24, Z
    d56e:	83 ff       	sbrs	r24, 3
    d570:	13 c0       	rjmp	.+38     	; 0xd598 <update_player+0x4e>
    d572:	80 91 15 0c 	lds	r24, 0x0C15
    d576:	81 11       	cpse	r24, r1
    d578:	0f c0       	rjmp	.+30     	; 0xd598 <update_player+0x4e>
	{
		SFX_NAVIGATE;
    d57a:	2f ef       	ldi	r18, 0xFF	; 255
    d57c:	47 e1       	ldi	r20, 0x17	; 23
    d57e:	65 e0       	ldi	r22, 0x05	; 5
    d580:	84 e0       	ldi	r24, 0x04	; 4
    d582:	0e 94 a4 4b 	call	0x9748	; 0x9748 <TriggerNote>
		game.paused = game.paused ^ 1;
    d586:	90 91 14 0c 	lds	r25, 0x0C14
    d58a:	81 e0       	ldi	r24, 0x01	; 1
    d58c:	89 27       	eor	r24, r25
    d58e:	80 93 14 0c 	sts	0x0C14, r24
		load_level_tiles(false);
    d592:	80 e0       	ldi	r24, 0x00	; 0
    d594:	0e 94 ab 66 	call	0xcd56	; 0xcd56 <load_level_tiles>
	}
	if (!(game.paused || (player->flags & EXPLODING_FLAG)))
    d598:	80 91 14 0c 	lds	r24, 0x0C14
    d59c:	81 11       	cpse	r24, r1
    d59e:	d1 c0       	rjmp	.+418    	; 0xd742 <update_player+0x1f8>
    d5a0:	f6 01       	movw	r30, r12
    d5a2:	84 89       	ldd	r24, Z+20	; 0x14
    d5a4:	80 fd       	sbrc	r24, 0
    d5a6:	cd c0       	rjmp	.+410    	; 0xd742 <update_player+0x1f8>
	{
		if ((p->pressed & BTN_SR) && (player->banter_frame == FRAMES_PER_BANTER))
    d5a8:	f8 01       	movw	r30, r16
    d5aa:	80 81       	ld	r24, Z
    d5ac:	91 81       	ldd	r25, Z+1	; 0x01
    d5ae:	93 ff       	sbrs	r25, 3
    d5b0:	1b c0       	rjmp	.+54     	; 0xd5e8 <update_player+0x9e>
    d5b2:	f6 01       	movw	r30, r12
    d5b4:	85 89       	ldd	r24, Z+21	; 0x15
    d5b6:	8a 35       	cpi	r24, 0x5A	; 90
    d5b8:	b9 f4       	brne	.+46     	; 0xd5e8 <update_player+0x9e>
		{
			player->banter_frame = 0;
    d5ba:	15 8a       	std	Z+21, r1	; 0x15
			player->banter_index = (u8) LBRandom(0, 9);
    d5bc:	69 e0       	ldi	r22, 0x09	; 9
    d5be:	70 e0       	ldi	r23, 0x00	; 0
    d5c0:	80 e0       	ldi	r24, 0x00	; 0
    d5c2:	90 e0       	ldi	r25, 0x00	; 0
    d5c4:	0e 94 1f 59 	call	0xb23e	; 0xb23e <LBRandom>
    d5c8:	f6 01       	movw	r30, r12
    d5ca:	86 8b       	std	Z+22, r24	; 0x16
			SFX_BANTER;
    d5cc:	80 91 50 0c 	lds	r24, 0x0C50
    d5d0:	80 fd       	sbrc	r24, 0
    d5d2:	0a c0       	rjmp	.+20     	; 0xd5e8 <update_player+0x9e>
    d5d4:	80 91 be 0f 	lds	r24, 0x0FBE
    d5d8:	80 fd       	sbrc	r24, 0
    d5da:	06 c0       	rjmp	.+12     	; 0xd5e8 <update_player+0x9e>
    d5dc:	2f e5       	ldi	r18, 0x5F	; 95
    d5de:	4e e1       	ldi	r20, 0x1E	; 30
    d5e0:	60 e0       	ldi	r22, 0x00	; 0
    d5e2:	84 e0       	ldi	r24, 0x04	; 4
    d5e4:	0e 94 a4 4b 	call	0x9748	; 0x9748 <TriggerNote>
		}
		player->shared.speed = player->max_speed;
    d5e8:	f6 01       	movw	r30, r12
    d5ea:	80 8d       	ldd	r24, Z+24	; 0x18
    d5ec:	81 83       	std	Z+1, r24	; 0x01
		if ((p->held & BTN_UP))
    d5ee:	f8 01       	movw	r30, r16
    d5f0:	84 81       	ldd	r24, Z+4	; 0x04
    d5f2:	84 ff       	sbrs	r24, 4
    d5f4:	10 c0       	rjmp	.+32     	; 0xd616 <update_player+0xcc>
		{
			player->shared.direction = D_UP;
    d5f6:	f6 01       	movw	r30, r12
    d5f8:	10 82       	st	Z, r1
			player->shared.y -= get_delta(player, &player->shared);
    d5fa:	b6 01       	movw	r22, r12
    d5fc:	c6 01       	movw	r24, r12
    d5fe:	0e 94 b2 5c 	call	0xb964	; 0xb964 <get_delta>
    d602:	9b 01       	movw	r18, r22
    d604:	ac 01       	movw	r20, r24
    d606:	f6 01       	movw	r30, r12
    d608:	67 81       	ldd	r22, Z+7	; 0x07
    d60a:	70 85       	ldd	r23, Z+8	; 0x08
    d60c:	81 85       	ldd	r24, Z+9	; 0x09
    d60e:	92 85       	ldd	r25, Z+10	; 0x0a
    d610:	0e 94 99 76 	call	0xed32	; 0xed32 <__subsf3>
    d614:	25 c0       	rjmp	.+74     	; 0xd660 <update_player+0x116>
		}
		else if ((p->held & BTN_RIGHT))
    d616:	87 ff       	sbrs	r24, 7
    d618:	11 c0       	rjmp	.+34     	; 0xd63c <update_player+0xf2>
		{
			player->shared.direction = D_RIGHT;
    d61a:	81 e0       	ldi	r24, 0x01	; 1
    d61c:	f6 01       	movw	r30, r12
    d61e:	80 83       	st	Z, r24
			player->shared.x += get_delta(player, &player->shared);
    d620:	b6 01       	movw	r22, r12
    d622:	c6 01       	movw	r24, r12
    d624:	0e 94 b2 5c 	call	0xb964	; 0xb964 <get_delta>
    d628:	9b 01       	movw	r18, r22
    d62a:	ac 01       	movw	r20, r24
    d62c:	f6 01       	movw	r30, r12
    d62e:	63 81       	ldd	r22, Z+3	; 0x03
    d630:	74 81       	ldd	r23, Z+4	; 0x04
    d632:	85 81       	ldd	r24, Z+5	; 0x05
    d634:	96 81       	ldd	r25, Z+6	; 0x06
    d636:	0e 94 9a 76 	call	0xed34	; 0xed34 <__addsf3>
    d63a:	2a c0       	rjmp	.+84     	; 0xd690 <update_player+0x146>
		}
		else if ((p->held & BTN_DOWN))
    d63c:	85 ff       	sbrs	r24, 5
    d63e:	16 c0       	rjmp	.+44     	; 0xd66c <update_player+0x122>
		{
			player->shared.direction = D_DOWN;
    d640:	82 e0       	ldi	r24, 0x02	; 2
    d642:	f6 01       	movw	r30, r12
    d644:	80 83       	st	Z, r24
			player->shared.y += get_delta(player, &player->shared);
    d646:	b6 01       	movw	r22, r12
    d648:	c6 01       	movw	r24, r12
    d64a:	0e 94 b2 5c 	call	0xb964	; 0xb964 <get_delta>
    d64e:	9b 01       	movw	r18, r22
    d650:	ac 01       	movw	r20, r24
    d652:	f6 01       	movw	r30, r12
    d654:	67 81       	ldd	r22, Z+7	; 0x07
    d656:	70 85       	ldd	r23, Z+8	; 0x08
    d658:	81 85       	ldd	r24, Z+9	; 0x09
    d65a:	92 85       	ldd	r25, Z+10	; 0x0a
    d65c:	0e 94 9a 76 	call	0xed34	; 0xed34 <__addsf3>
    d660:	f6 01       	movw	r30, r12
    d662:	67 83       	std	Z+7, r22	; 0x07
    d664:	70 87       	std	Z+8, r23	; 0x08
    d666:	81 87       	std	Z+9, r24	; 0x09
    d668:	92 87       	std	Z+10, r25	; 0x0a
    d66a:	1a c0       	rjmp	.+52     	; 0xd6a0 <update_player+0x156>
		}
		else if ((p->held & BTN_LEFT))
    d66c:	86 ff       	sbrs	r24, 6
    d66e:	16 c0       	rjmp	.+44     	; 0xd69c <update_player+0x152>
		{
			player->shared.direction = D_LEFT;
    d670:	83 e0       	ldi	r24, 0x03	; 3
    d672:	f6 01       	movw	r30, r12
    d674:	80 83       	st	Z, r24
			player->shared.x -= get_delta(player, &player->shared);
    d676:	b6 01       	movw	r22, r12
    d678:	c6 01       	movw	r24, r12
    d67a:	0e 94 b2 5c 	call	0xb964	; 0xb964 <get_delta>
    d67e:	9b 01       	movw	r18, r22
    d680:	ac 01       	movw	r20, r24
    d682:	f6 01       	movw	r30, r12
    d684:	63 81       	ldd	r22, Z+3	; 0x03
    d686:	74 81       	ldd	r23, Z+4	; 0x04
    d688:	85 81       	ldd	r24, Z+5	; 0x05
    d68a:	96 81       	ldd	r25, Z+6	; 0x06
    d68c:	0e 94 99 76 	call	0xed32	; 0xed32 <__subsf3>
    d690:	f6 01       	movw	r30, r12
    d692:	63 83       	std	Z+3, r22	; 0x03
    d694:	74 83       	std	Z+4, r23	; 0x04
    d696:	85 83       	std	Z+5, r24	; 0x05
    d698:	96 83       	std	Z+6, r25	; 0x06
    d69a:	02 c0       	rjmp	.+4      	; 0xd6a0 <update_player+0x156>
		}
		else
		{
			player->shared.speed = 0;
    d69c:	f6 01       	movw	r30, r12
    d69e:	11 82       	std	Z+1, r1	; 0x01
		}
		if (shoot_pressed(p) && (player->active_shots < MAX_SHOTS))
    d6a0:	c8 01       	movw	r24, r16
    d6a2:	0e 94 a8 5c 	call	0xb950	; 0xb950 <shoot_pressed>
    d6a6:	88 23       	and	r24, r24
    d6a8:	09 f4       	brne	.+2      	; 0xd6ac <update_player+0x162>
    d6aa:	4b c0       	rjmp	.+150    	; 0xd742 <update_player+0x1f8>
    d6ac:	f6 01       	movw	r30, r12
    d6ae:	81 89       	ldd	r24, Z+17	; 0x11
    d6b0:	81 11       	cpse	r24, r1
    d6b2:	47 c0       	rjmp	.+142    	; 0xd742 <update_player+0x1f8>
		{
			for (u8 i = 0; i < MAX_SHOTS; i++)
			{
				shot = &player->shot[i];
				if (!shot->active)
    d6b4:	82 ad       	ldd	r24, Z+58	; 0x3a
    d6b6:	81 11       	cpse	r24, r1
    d6b8:	44 c0       	rjmp	.+136    	; 0xd742 <update_player+0x1f8>
		}
		if (shoot_pressed(p) && (player->active_shots < MAX_SHOTS))
		{
			for (u8 i = 0; i < MAX_SHOTS; i++)
			{
				shot = &player->shot[i];
    d6ba:	76 01       	movw	r14, r12
    d6bc:	fc e2       	ldi	r31, 0x2C	; 44
    d6be:	ef 0e       	add	r14, r31
    d6c0:	f1 1c       	adc	r15, r1
				if (!shot->active)
				{
					if (player->has_rocket)
    d6c2:	f6 01       	movw	r30, r12
    d6c4:	81 8d       	ldd	r24, Z+25	; 0x19
    d6c6:	88 23       	and	r24, r24
    d6c8:	a1 f0       	breq	.+40     	; 0xd6f2 <update_player+0x1a8>
					{
						init_shot_state(shot, ROCKET_SHOT);
    d6ca:	61 e0       	ldi	r22, 0x01	; 1
    d6cc:	c7 01       	movw	r24, r14
    d6ce:	0e 94 ce 59 	call	0xb39c	; 0xb39c <init_shot_state>
						set_shot_animations(shot, ROCKET_SHOT);
    d6d2:	61 e0       	ldi	r22, 0x01	; 1
    d6d4:	c7 01       	movw	r24, r14
    d6d6:	0e 94 eb 59 	call	0xb3d6	; 0xb3d6 <set_shot_animations>
						SFX_ROCKET;
    d6da:	80 91 50 0c 	lds	r24, 0x0C50
    d6de:	80 fd       	sbrc	r24, 0
    d6e0:	1e c0       	rjmp	.+60     	; 0xd71e <update_player+0x1d4>
    d6e2:	80 91 be 0f 	lds	r24, 0x0FBE
    d6e6:	80 fd       	sbrc	r24, 0
    d6e8:	1a c0       	rjmp	.+52     	; 0xd71e <update_player+0x1d4>
    d6ea:	2f ef       	ldi	r18, 0xFF	; 255
    d6ec:	47 e1       	ldi	r20, 0x17	; 23
    d6ee:	66 e0       	ldi	r22, 0x06	; 6
    d6f0:	13 c0       	rjmp	.+38     	; 0xd718 <update_player+0x1ce>
					}
					else
					{
						init_shot_state(shot, BASIC_SHOT);
    d6f2:	60 e0       	ldi	r22, 0x00	; 0
    d6f4:	c7 01       	movw	r24, r14
    d6f6:	0e 94 ce 59 	call	0xb39c	; 0xb39c <init_shot_state>
						set_shot_animations(shot, BASIC_SHOT);
    d6fa:	60 e0       	ldi	r22, 0x00	; 0
    d6fc:	c7 01       	movw	r24, r14
    d6fe:	0e 94 eb 59 	call	0xb3d6	; 0xb3d6 <set_shot_animations>
						SFX_CANNONBALL;
    d702:	80 91 50 0c 	lds	r24, 0x0C50
    d706:	80 fd       	sbrc	r24, 0
    d708:	0a c0       	rjmp	.+20     	; 0xd71e <update_player+0x1d4>
    d70a:	80 91 be 0f 	lds	r24, 0x0FBE
    d70e:	80 fd       	sbrc	r24, 0
    d710:	06 c0       	rjmp	.+12     	; 0xd71e <update_player+0x1d4>
    d712:	2f ef       	ldi	r18, 0xFF	; 255
    d714:	47 e1       	ldi	r20, 0x17	; 23
    d716:	62 e0       	ldi	r22, 0x02	; 2
    d718:	84 e0       	ldi	r24, 0x04	; 4
    d71a:	0e 94 a4 4b 	call	0x9748	; 0x9748 <TriggerNote>
					}
					player->active_shots++;
    d71e:	f6 01       	movw	r30, r12
    d720:	81 89       	ldd	r24, Z+17	; 0x11
    d722:	8f 5f       	subi	r24, 0xFF	; 255
    d724:	81 8b       	std	Z+17, r24	; 0x11
					shot->shared.direction = player->shared.direction;
    d726:	80 81       	ld	r24, Z
    d728:	84 a7       	std	Z+44, r24	; 0x2c
					position_shot(player, shot);
    d72a:	b7 01       	movw	r22, r14
    d72c:	c6 01       	movw	r24, r12
    d72e:	0e 94 9f 5b 	call	0xb73e	; 0xb73e <position_shot>
					shot->active = 1;
    d732:	81 e0       	ldi	r24, 0x01	; 1
    d734:	f6 01       	movw	r30, r12
    d736:	82 af       	std	Z+58, r24	; 0x3a
					if (player->has_over_speed)
    d738:	82 8d       	ldd	r24, Z+26	; 0x1a
    d73a:	88 23       	and	r24, r24
    d73c:	11 f0       	breq	.+4      	; 0xd742 <update_player+0x1f8>
					{
						shot->shared.speed = SHOT_OVER_SPEED;
    d73e:	8a ea       	ldi	r24, 0xAA	; 170
    d740:	85 a7       	std	Z+45, r24	; 0x2d
				}
			}
		}
	}
	
	if (!game.paused)
    d742:	80 91 14 0c 	lds	r24, 0x0C14
    d746:	81 11       	cpse	r24, r1
    d748:	86 c0       	rjmp	.+268    	; 0xd856 <update_player+0x30c>
	{
		/* Update Shot */
		for (u8 i = 0; i < MAX_SHOTS; i++)
		{
			shot = &player->shot[i];
    d74a:	86 01       	movw	r16, r12
    d74c:	04 5d       	subi	r16, 0xD4	; 212
    d74e:	1f 4f       	sbci	r17, 0xFF	; 255
			if (shot->active)
    d750:	f6 01       	movw	r30, r12
    d752:	82 ad       	ldd	r24, Z+58	; 0x3a
    d754:	88 23       	and	r24, r24
    d756:	09 f4       	brne	.+2      	; 0xd75a <update_player+0x210>
    d758:	97 c0       	rjmp	.+302    	; 0xd888 <update_player+0x33e>
			{
				switch (shot->shared.direction)
    d75a:	84 a5       	ldd	r24, Z+44	; 0x2c
    d75c:	81 30       	cpi	r24, 0x01	; 1
    d75e:	11 f1       	breq	.+68     	; 0xd7a4 <update_player+0x25a>
    d760:	98 f0       	brcs	.+38     	; 0xd788 <update_player+0x23e>
    d762:	82 30       	cpi	r24, 0x02	; 2
    d764:	69 f1       	breq	.+90     	; 0xd7c0 <update_player+0x276>
    d766:	83 30       	cpi	r24, 0x03	; 3
    d768:	09 f0       	breq	.+2      	; 0xd76c <update_player+0x222>
    d76a:	42 c0       	rjmp	.+132    	; 0xd7f0 <update_player+0x2a6>
				{
					case D_UP: shot->shared.y -= get_delta(player, &shot->shared); break;
					case D_RIGHT: shot->shared.x += get_delta(player, &shot->shared); break;
					case D_DOWN: shot->shared.y += get_delta(player, &shot->shared); break;
					case D_LEFT: shot->shared.x -= get_delta(player, &shot->shared); break;
    d76c:	b8 01       	movw	r22, r16
    d76e:	c6 01       	movw	r24, r12
    d770:	0e 94 b2 5c 	call	0xb964	; 0xb964 <get_delta>
    d774:	9b 01       	movw	r18, r22
    d776:	ac 01       	movw	r20, r24
    d778:	f6 01       	movw	r30, r12
    d77a:	67 a5       	ldd	r22, Z+47	; 0x2f
    d77c:	70 a9       	ldd	r23, Z+48	; 0x30
    d77e:	81 a9       	ldd	r24, Z+49	; 0x31
    d780:	92 a9       	ldd	r25, Z+50	; 0x32
    d782:	0e 94 99 76 	call	0xed32	; 0xed32 <__subsf3>
    d786:	2f c0       	rjmp	.+94     	; 0xd7e6 <update_player+0x29c>
			shot = &player->shot[i];
			if (shot->active)
			{
				switch (shot->shared.direction)
				{
					case D_UP: shot->shared.y -= get_delta(player, &shot->shared); break;
    d788:	b8 01       	movw	r22, r16
    d78a:	c6 01       	movw	r24, r12
    d78c:	0e 94 b2 5c 	call	0xb964	; 0xb964 <get_delta>
    d790:	9b 01       	movw	r18, r22
    d792:	ac 01       	movw	r20, r24
    d794:	f6 01       	movw	r30, r12
    d796:	63 a9       	ldd	r22, Z+51	; 0x33
    d798:	74 a9       	ldd	r23, Z+52	; 0x34
    d79a:	85 a9       	ldd	r24, Z+53	; 0x35
    d79c:	96 a9       	ldd	r25, Z+54	; 0x36
    d79e:	0e 94 99 76 	call	0xed32	; 0xed32 <__subsf3>
    d7a2:	1b c0       	rjmp	.+54     	; 0xd7da <update_player+0x290>
					case D_RIGHT: shot->shared.x += get_delta(player, &shot->shared); break;
    d7a4:	b8 01       	movw	r22, r16
    d7a6:	c6 01       	movw	r24, r12
    d7a8:	0e 94 b2 5c 	call	0xb964	; 0xb964 <get_delta>
    d7ac:	9b 01       	movw	r18, r22
    d7ae:	ac 01       	movw	r20, r24
    d7b0:	f6 01       	movw	r30, r12
    d7b2:	67 a5       	ldd	r22, Z+47	; 0x2f
    d7b4:	70 a9       	ldd	r23, Z+48	; 0x30
    d7b6:	81 a9       	ldd	r24, Z+49	; 0x31
    d7b8:	92 a9       	ldd	r25, Z+50	; 0x32
    d7ba:	0e 94 9a 76 	call	0xed34	; 0xed34 <__addsf3>
    d7be:	13 c0       	rjmp	.+38     	; 0xd7e6 <update_player+0x29c>
					case D_DOWN: shot->shared.y += get_delta(player, &shot->shared); break;
    d7c0:	b8 01       	movw	r22, r16
    d7c2:	c6 01       	movw	r24, r12
    d7c4:	0e 94 b2 5c 	call	0xb964	; 0xb964 <get_delta>
    d7c8:	9b 01       	movw	r18, r22
    d7ca:	ac 01       	movw	r20, r24
    d7cc:	f6 01       	movw	r30, r12
    d7ce:	63 a9       	ldd	r22, Z+51	; 0x33
    d7d0:	74 a9       	ldd	r23, Z+52	; 0x34
    d7d2:	85 a9       	ldd	r24, Z+53	; 0x35
    d7d4:	96 a9       	ldd	r25, Z+54	; 0x36
    d7d6:	0e 94 9a 76 	call	0xed34	; 0xed34 <__addsf3>
    d7da:	f6 01       	movw	r30, r12
    d7dc:	63 ab       	std	Z+51, r22	; 0x33
    d7de:	74 ab       	std	Z+52, r23	; 0x34
    d7e0:	85 ab       	std	Z+53, r24	; 0x35
    d7e2:	96 ab       	std	Z+54, r25	; 0x36
    d7e4:	05 c0       	rjmp	.+10     	; 0xd7f0 <update_player+0x2a6>
					case D_LEFT: shot->shared.x -= get_delta(player, &shot->shared); break;
    d7e6:	f6 01       	movw	r30, r12
    d7e8:	67 a7       	std	Z+47, r22	; 0x2f
    d7ea:	70 ab       	std	Z+48, r23	; 0x30
    d7ec:	81 ab       	std	Z+49, r24	; 0x31
    d7ee:	92 ab       	std	Z+50, r25	; 0x32
					default: break;
				}
				shot->distance += (shot->distance <= DISTANCE_TO_ARM) ? get_delta(player, &shot->shared) : 0;
    d7f0:	f6 01       	movw	r30, r12
    d7f2:	f3 ac       	ldd	r15, Z+59	; 0x3b
    d7f4:	f8 e0       	ldi	r31, 0x08	; 8
    d7f6:	ff 15       	cp	r31, r15
    d7f8:	38 f0       	brcs	.+14     	; 0xd808 <update_player+0x2be>
    d7fa:	b8 01       	movw	r22, r16
    d7fc:	c6 01       	movw	r24, r12
    d7fe:	0e 94 b2 5c 	call	0xb964	; 0xb964 <get_delta>
    d802:	9b 01       	movw	r18, r22
    d804:	ac 01       	movw	r20, r24
    d806:	03 c0       	rjmp	.+6      	; 0xd80e <update_player+0x2c4>
    d808:	20 e0       	ldi	r18, 0x00	; 0
    d80a:	30 e0       	ldi	r19, 0x00	; 0
    d80c:	a9 01       	movw	r20, r18
    d80e:	6f 2d       	mov	r22, r15
    d810:	70 e0       	ldi	r23, 0x00	; 0
    d812:	80 e0       	ldi	r24, 0x00	; 0
    d814:	90 e0       	ldi	r25, 0x00	; 0
    d816:	29 83       	std	Y+1, r18	; 0x01
    d818:	3a 83       	std	Y+2, r19	; 0x02
    d81a:	4b 83       	std	Y+3, r20	; 0x03
    d81c:	5c 83       	std	Y+4, r21	; 0x04
    d81e:	0e 94 9d 77 	call	0xef3a	; 0xef3a <__floatsisf>
    d822:	29 81       	ldd	r18, Y+1	; 0x01
    d824:	3a 81       	ldd	r19, Y+2	; 0x02
    d826:	4b 81       	ldd	r20, Y+3	; 0x03
    d828:	5c 81       	ldd	r21, Y+4	; 0x04
    d82a:	0e 94 9a 76 	call	0xed34	; 0xed34 <__addsf3>
    d82e:	0e 94 6f 77 	call	0xeede	; 0xeede <__fixunssfsi>
    d832:	f6 01       	movw	r30, r12
    d834:	63 af       	std	Z+59, r22	; 0x3b
				collision_detect_shot(player, shot);
    d836:	b8 01       	movw	r22, r16
    d838:	c6 01       	movw	r24, r12
		{
			SFX_NAVIGATE;
			exit_game();
		}
	}
}
    d83a:	0f 90       	pop	r0
    d83c:	0f 90       	pop	r0
    d83e:	0f 90       	pop	r0
    d840:	0f 90       	pop	r0
    d842:	df 91       	pop	r29
    d844:	cf 91       	pop	r28
    d846:	1f 91       	pop	r17
    d848:	0f 91       	pop	r16
    d84a:	ff 90       	pop	r15
    d84c:	ef 90       	pop	r14
    d84e:	df 90       	pop	r13
    d850:	cf 90       	pop	r12
					case D_DOWN: shot->shared.y += get_delta(player, &shot->shared); break;
					case D_LEFT: shot->shared.x -= get_delta(player, &shot->shared); break;
					default: break;
				}
				shot->distance += (shot->distance <= DISTANCE_TO_ARM) ? get_delta(player, &shot->shared) : 0;
				collision_detect_shot(player, shot);
    d852:	0c 94 e5 61 	jmp	0xc3ca	; 0xc3ca <collision_detect_shot>
			}
		}
	}
	else
	{
		if (p->pressed & BTN_X)
    d856:	f8 01       	movw	r30, r16
    d858:	80 81       	ld	r24, Z
    d85a:	91 81       	ldd	r25, Z+1	; 0x01
    d85c:	91 ff       	sbrs	r25, 1
    d85e:	14 c0       	rjmp	.+40     	; 0xd888 <update_player+0x33e>
		{
			SFX_NAVIGATE;
    d860:	2f ef       	ldi	r18, 0xFF	; 255
    d862:	47 e1       	ldi	r20, 0x17	; 23
    d864:	65 e0       	ldi	r22, 0x05	; 5
    d866:	84 e0       	ldi	r24, 0x04	; 4
    d868:	0e 94 a4 4b 	call	0x9748	; 0x9748 <TriggerNote>
			exit_game();
		}
	}
}
    d86c:	0f 90       	pop	r0
    d86e:	0f 90       	pop	r0
    d870:	0f 90       	pop	r0
    d872:	0f 90       	pop	r0
    d874:	df 91       	pop	r29
    d876:	cf 91       	pop	r28
    d878:	1f 91       	pop	r17
    d87a:	0f 91       	pop	r16
    d87c:	ff 90       	pop	r15
    d87e:	ef 90       	pop	r14
    d880:	df 90       	pop	r13
    d882:	cf 90       	pop	r12
	else
	{
		if (p->pressed & BTN_X)
		{
			SFX_NAVIGATE;
			exit_game();
    d884:	0c 94 9a 6a 	jmp	0xd534	; 0xd534 <exit_game>
		}
	}
}
    d888:	0f 90       	pop	r0
    d88a:	0f 90       	pop	r0
    d88c:	0f 90       	pop	r0
    d88e:	0f 90       	pop	r0
    d890:	df 91       	pop	r29
    d892:	cf 91       	pop	r28
    d894:	1f 91       	pop	r17
    d896:	0f 91       	pop	r16
    d898:	ff 90       	pop	r15
    d89a:	ef 90       	pop	r14
    d89c:	df 90       	pop	r13
    d89e:	cf 90       	pop	r12
    d8a0:	08 95       	ret

0000d8a2 <resolve_scoring>:

void resolve_scoring()
{
    d8a2:	cf 93       	push	r28
	u8 next_level;
	
	if (game.current_level < LEVEL_COUNT - 1)
    d8a4:	c0 91 13 0c 	lds	r28, 0x0C13
    d8a8:	80 91 4c 0c 	lds	r24, 0x0C4C
    d8ac:	ca 30       	cpi	r28, 0x0A	; 10
    d8ae:	90 f5       	brcc	.+100    	; 0xd914 <resolve_scoring+0x72>
	{
		if (player1.level_score >= MAX_LEVEL_SCORE && !(player2.flags & EXPLODING_FLAG))
    d8b0:	8a 30       	cpi	r24, 0x0A	; 10
    d8b2:	78 f0       	brcs	.+30     	; 0xd8d2 <resolve_scoring+0x30>
    d8b4:	80 91 be 0f 	lds	r24, 0x0FBE
    d8b8:	80 fd       	sbrc	r24, 0
    d8ba:	0b c0       	rjmp	.+22     	; 0xd8d2 <resolve_scoring+0x30>
		{
			next_level = game.current_level + 1;
			load_level_tiles(true);
    d8bc:	81 e0       	ldi	r24, 0x01	; 1
    d8be:	0e 94 ab 66 	call	0xcd56	; 0xcd56 <load_level_tiles>
			SetSpriteVisibility(false);
    d8c2:	80 e0       	ldi	r24, 0x00	; 0
    d8c4:	0e 94 96 54 	call	0xa92c	; 0xa92c <SetSpriteVisibility>
			print_level_score(&player1, &player2);
    d8c8:	6a ea       	ldi	r22, 0xAA	; 170
    d8ca:	7f e0       	ldi	r23, 0x0F	; 15
    d8cc:	8c e3       	ldi	r24, 0x3C	; 60
    d8ce:	9c e0       	ldi	r25, 0x0C	; 12
    d8d0:	13 c0       	rjmp	.+38     	; 0xd8f8 <resolve_scoring+0x56>
			LBWaitSeconds(TEXT_LINGER);
			player1.level_score = 0;
			player2.level_score = 0;
			level_transition(next_level);
		}
		else if (player2.level_score >= MAX_LEVEL_SCORE && !(player1.flags & EXPLODING_FLAG))
    d8d2:	80 91 ba 0f 	lds	r24, 0x0FBA
    d8d6:	8a 30       	cpi	r24, 0x0A	; 10
    d8d8:	08 f4       	brcc	.+2      	; 0xd8dc <resolve_scoring+0x3a>
    d8da:	a9 c0       	rjmp	.+338    	; 0xda2e <resolve_scoring+0x18c>
    d8dc:	80 91 50 0c 	lds	r24, 0x0C50
    d8e0:	80 fd       	sbrc	r24, 0
    d8e2:	a5 c0       	rjmp	.+330    	; 0xda2e <resolve_scoring+0x18c>
		{
			next_level = game.current_level + 1;
			load_level_tiles(true);
    d8e4:	81 e0       	ldi	r24, 0x01	; 1
    d8e6:	0e 94 ab 66 	call	0xcd56	; 0xcd56 <load_level_tiles>
			SetSpriteVisibility(false);
    d8ea:	80 e0       	ldi	r24, 0x00	; 0
    d8ec:	0e 94 96 54 	call	0xa92c	; 0xa92c <SetSpriteVisibility>
			print_level_score(&player2, &player1);
    d8f0:	6c e3       	ldi	r22, 0x3C	; 60
    d8f2:	7c e0       	ldi	r23, 0x0C	; 12
    d8f4:	8a ea       	ldi	r24, 0xAA	; 170
    d8f6:	9f e0       	ldi	r25, 0x0F	; 15
    d8f8:	0e 94 0c 5c 	call	0xb818	; 0xb818 <print_level_score>
			LBWaitSeconds(TEXT_LINGER);
    d8fc:	84 e0       	ldi	r24, 0x04	; 4
    d8fe:	0e 94 54 59 	call	0xb2a8	; 0xb2a8 <LBWaitSeconds>
			player1.level_score = 0;
    d902:	10 92 4c 0c 	sts	0x0C4C, r1
			player2.level_score = 0;
    d906:	10 92 ba 0f 	sts	0x0FBA, r1
			level_transition(next_level);
    d90a:	81 e0       	ldi	r24, 0x01	; 1
    d90c:	8c 0f       	add	r24, r28
				print_final_score(&player2, &player1);
			LBWaitSeconds(TEXT_LINGER);
			exit_game();
		}
	}
}
    d90e:	cf 91       	pop	r28
			SetSpriteVisibility(false);
			print_level_score(&player2, &player1);
			LBWaitSeconds(TEXT_LINGER);
			player1.level_score = 0;
			player2.level_score = 0;
			level_transition(next_level);
    d910:	0c 94 d4 67 	jmp	0xcfa8	; 0xcfa8 <level_transition>
		}
	}
	else
	{
		if ((player1.level_score >= MAX_LEVEL_SCORE) || (player2.level_score >= MAX_LEVEL_SCORE))
    d914:	8a 30       	cpi	r24, 0x0A	; 10
    d916:	28 f4       	brcc	.+10     	; 0xd922 <resolve_scoring+0x80>
    d918:	80 91 ba 0f 	lds	r24, 0x0FBA
    d91c:	8a 30       	cpi	r24, 0x0A	; 10
    d91e:	08 f4       	brcc	.+2      	; 0xd922 <resolve_scoring+0x80>
    d920:	86 c0       	rjmp	.+268    	; 0xda2e <resolve_scoring+0x18c>
		{
			// Tie Breaker
			if (player1.score == player2.score) return;
    d922:	90 91 4b 0c 	lds	r25, 0x0C4B
    d926:	80 91 b9 0f 	lds	r24, 0x0FB9
    d92a:	98 17       	cp	r25, r24
    d92c:	09 f4       	brne	.+2      	; 0xd930 <resolve_scoring+0x8e>
    d92e:	7f c0       	rjmp	.+254    	; 0xda2e <resolve_scoring+0x18c>
			
			if (game.boss_fight_status == 0)
    d930:	20 91 15 0c 	lds	r18, 0x0C15
    d934:	21 11       	cpse	r18, r1
    d936:	46 c0       	rjmp	.+140    	; 0xd9c4 <resolve_scoring+0x122>
			{
				// Initiate boss fight
				game.boss_fight_status = BOSS_FIGHT_SCOPE_LOADING;
    d938:	c1 e0       	ldi	r28, 0x01	; 1
    d93a:	c0 93 15 0c 	sts	0x0C15, r28
				if (player1.score > player2.score)
    d93e:	89 17       	cp	r24, r25
    d940:	e8 f4       	brcc	.+58     	; 0xd97c <resolve_scoring+0xda>
				{
					game.boss_fight_player = &player1;
    d942:	8c e3       	ldi	r24, 0x3C	; 60
    d944:	9c e0       	ldi	r25, 0x0C	; 12
    d946:	90 93 19 0c 	sts	0x0C19, r25
    d94a:	80 93 18 0c 	sts	0x0C18, r24
					game.boss_fight_joypad = &p1;
    d94e:	84 eb       	ldi	r24, 0xB4	; 180
    d950:	9c e0       	ldi	r25, 0x0C	; 12
    d952:	90 93 1b 0c 	sts	0x0C1B, r25
    d956:	80 93 1a 0c 	sts	0x0C1A, r24
					game.boss_fight_player_hud = 0;
    d95a:	10 92 16 0c 	sts	0x0C16, r1
					kill_player(&player2, 15);
    d95e:	6f e0       	ldi	r22, 0x0F	; 15
    d960:	8a ea       	ldi	r24, 0xAA	; 170
    d962:	9f e0       	ldi	r25, 0x0F	; 15
    d964:	0e 94 0c 61 	call	0xc218	; 0xc218 <kill_player>
					player_spawn(&player2);
    d968:	8a ea       	ldi	r24, 0xAA	; 170
    d96a:	9f e0       	ldi	r25, 0x0F	; 15
    d96c:	0e 94 e8 5a 	call	0xb5d0	; 0xb5d0 <player_spawn>
					player2.flags = player2.flags ^ EXPLODING_FLAG;
    d970:	80 91 be 0f 	lds	r24, 0x0FBE
    d974:	c8 27       	eor	r28, r24
    d976:	c0 93 be 0f 	sts	0x0FBE, r28
    d97a:	1d c0       	rjmp	.+58     	; 0xd9b6 <resolve_scoring+0x114>
				}
				else
				{
					game.boss_fight_player = &player2;
    d97c:	8a ea       	ldi	r24, 0xAA	; 170
    d97e:	9f e0       	ldi	r25, 0x0F	; 15
    d980:	90 93 19 0c 	sts	0x0C19, r25
    d984:	80 93 18 0c 	sts	0x0C18, r24
					game.boss_fight_joypad = &p2;
    d988:	8b ee       	ldi	r24, 0xEB	; 235
    d98a:	9b e0       	ldi	r25, 0x0B	; 11
    d98c:	90 93 1b 0c 	sts	0x0C1B, r25
    d990:	80 93 1a 0c 	sts	0x0C1A, r24
					game.boss_fight_player_hud = 15;
    d994:	8f e0       	ldi	r24, 0x0F	; 15
    d996:	80 93 16 0c 	sts	0x0C16, r24
					kill_player(&player1, 0);
    d99a:	60 e0       	ldi	r22, 0x00	; 0
    d99c:	8c e3       	ldi	r24, 0x3C	; 60
    d99e:	9c e0       	ldi	r25, 0x0C	; 12
    d9a0:	0e 94 0c 61 	call	0xc218	; 0xc218 <kill_player>
					player_spawn(&player1);
    d9a4:	8c e3       	ldi	r24, 0x3C	; 60
    d9a6:	9c e0       	ldi	r25, 0x0C	; 12
    d9a8:	0e 94 e8 5a 	call	0xb5d0	; 0xb5d0 <player_spawn>
					player1.flags = player1.flags ^ EXPLODING_FLAG;
    d9ac:	80 91 50 0c 	lds	r24, 0x0C50
    d9b0:	c8 27       	eor	r28, r24
    d9b2:	c0 93 50 0c 	sts	0x0C50, r28
				}
				scope_animation.tile_index = 15 + 5*30;
    d9b6:	85 ea       	ldi	r24, 0xA5	; 165
    d9b8:	90 e0       	ldi	r25, 0x00	; 0
    d9ba:	90 93 3d 10 	sts	0x103D, r25
    d9be:	80 93 3c 10 	sts	0x103C, r24
				return;
    d9c2:	35 c0       	rjmp	.+106    	; 0xda2e <resolve_scoring+0x18c>
			}
			
			// Print level score
			load_level_tiles(true);
    d9c4:	81 e0       	ldi	r24, 0x01	; 1
    d9c6:	0e 94 ab 66 	call	0xcd56	; 0xcd56 <load_level_tiles>
			SetSpriteVisibility(false);
    d9ca:	80 e0       	ldi	r24, 0x00	; 0
    d9cc:	0e 94 96 54 	call	0xa92c	; 0xa92c <SetSpriteVisibility>
			if (player1.level_score > player2.level_score)
    d9d0:	90 91 4c 0c 	lds	r25, 0x0C4C
    d9d4:	80 91 ba 0f 	lds	r24, 0x0FBA
    d9d8:	89 17       	cp	r24, r25
    d9da:	28 f4       	brcc	.+10     	; 0xd9e6 <resolve_scoring+0x144>
				print_level_score(&player1, &player2);
    d9dc:	6a ea       	ldi	r22, 0xAA	; 170
    d9de:	7f e0       	ldi	r23, 0x0F	; 15
    d9e0:	8c e3       	ldi	r24, 0x3C	; 60
    d9e2:	9c e0       	ldi	r25, 0x0C	; 12
    d9e4:	04 c0       	rjmp	.+8      	; 0xd9ee <resolve_scoring+0x14c>
			else
				print_level_score(&player2, &player1);
    d9e6:	6c e3       	ldi	r22, 0x3C	; 60
    d9e8:	7c e0       	ldi	r23, 0x0C	; 12
    d9ea:	8a ea       	ldi	r24, 0xAA	; 170
    d9ec:	9f e0       	ldi	r25, 0x0F	; 15
    d9ee:	0e 94 0c 5c 	call	0xb818	; 0xb818 <print_level_score>
			LBWaitSeconds(TEXT_LINGER);
    d9f2:	84 e0       	ldi	r24, 0x04	; 4
    d9f4:	0e 94 54 59 	call	0xb2a8	; 0xb2a8 <LBWaitSeconds>
			player1.level_score = 0;
    d9f8:	10 92 4c 0c 	sts	0x0C4C, r1
			player2.level_score = 0;
    d9fc:	10 92 ba 0f 	sts	0x0FBA, r1
			
			// Print game score and exit
			if (player1.score > player2.score)
    da00:	90 91 4b 0c 	lds	r25, 0x0C4B
    da04:	80 91 b9 0f 	lds	r24, 0x0FB9
    da08:	89 17       	cp	r24, r25
    da0a:	28 f4       	brcc	.+10     	; 0xda16 <resolve_scoring+0x174>
				print_final_score(&player1, &player2);
    da0c:	6a ea       	ldi	r22, 0xAA	; 170
    da0e:	7f e0       	ldi	r23, 0x0F	; 15
    da10:	8c e3       	ldi	r24, 0x3C	; 60
    da12:	9c e0       	ldi	r25, 0x0C	; 12
    da14:	04 c0       	rjmp	.+8      	; 0xda1e <resolve_scoring+0x17c>
			else
				print_final_score(&player2, &player1);
    da16:	6c e3       	ldi	r22, 0x3C	; 60
    da18:	7c e0       	ldi	r23, 0x0C	; 12
    da1a:	8a ea       	ldi	r24, 0xAA	; 170
    da1c:	9f e0       	ldi	r25, 0x0F	; 15
    da1e:	0e 94 4e 5c 	call	0xb89c	; 0xb89c <print_final_score>
			LBWaitSeconds(TEXT_LINGER);
    da22:	84 e0       	ldi	r24, 0x04	; 4
    da24:	0e 94 54 59 	call	0xb2a8	; 0xb2a8 <LBWaitSeconds>
			exit_game();
		}
	}
}
    da28:	cf 91       	pop	r28
			if (player1.score > player2.score)
				print_final_score(&player1, &player2);
			else
				print_final_score(&player2, &player1);
			LBWaitSeconds(TEXT_LINGER);
			exit_game();
    da2a:	0c 94 9a 6a 	jmp	0xd534	; 0xd534 <exit_game>
		}
	}
}
    da2e:	cf 91       	pop	r28
    da30:	08 95       	ret

0000da32 <update_level>:
	if (t->lives <= 0) return (char*) map_none;
	return (char*) map_sub_shot;
}

void update_level(JoyPadState* p1, JoyPadState* p2)
{
    da32:	df 92       	push	r13
    da34:	ef 92       	push	r14
    da36:	ff 92       	push	r15
    da38:	0f 93       	push	r16
    da3a:	1f 93       	push	r17
    da3c:	cf 93       	push	r28
    da3e:	df 93       	push	r29
    da40:	8c 01       	movw	r16, r24
    da42:	eb 01       	movw	r28, r22
	u16 held = 0;
	static u8 clear_banter_1 = 1;
	static u8 clear_banter_2 = 1;
	static u16 demo_counter = 0;

	if (game.paused)
    da44:	80 91 14 0c 	lds	r24, 0x0C14
    da48:	88 23       	and	r24, r24
    da4a:	21 f1       	breq	.+72     	; 0xda94 <update_level+0x62>
	{
		// Render
		SetSpriteVisibility(false);
    da4c:	80 e0       	ldi	r24, 0x00	; 0
    da4e:	0e 94 96 54 	call	0xa92c	; 0xa92c <SetSpriteVisibility>
		DrawMap2(8, 12, (const char*) map_pause);
    da52:	48 e6       	ldi	r20, 0x68	; 104
    da54:	56 e8       	ldi	r21, 0x86	; 134
    da56:	6c e0       	ldi	r22, 0x0C	; 12
    da58:	88 e0       	ldi	r24, 0x08	; 8
    da5a:	0e 94 0b 56 	call	0xac16	; 0xac16 <DrawMap>
		Print(12, 13, (char*) strPaused);
    da5e:	4b e1       	ldi	r20, 0x1B	; 27
    da60:	5a e0       	ldi	r21, 0x0A	; 10
    da62:	6d e0       	ldi	r22, 0x0D	; 13
    da64:	70 e0       	ldi	r23, 0x00	; 0
    da66:	8c e0       	ldi	r24, 0x0C	; 12
    da68:	90 e0       	ldi	r25, 0x00	; 0
    da6a:	0e 94 8b 56 	call	0xad16	; 0xad16 <Print>
		Print(11, 14, (char*) strExit);
    da6e:	42 e2       	ldi	r20, 0x22	; 34
    da70:	5a e0       	ldi	r21, 0x0A	; 10
    da72:	6e e0       	ldi	r22, 0x0E	; 14
    da74:	70 e0       	ldi	r23, 0x00	; 0
    da76:	8b e0       	ldi	r24, 0x0B	; 11
    da78:	90 e0       	ldi	r25, 0x00	; 0
    da7a:	0e 94 8b 56 	call	0xad16	; 0xad16 <Print>
		
		// Update
		update_player(p1, &player1);
    da7e:	6c e3       	ldi	r22, 0x3C	; 60
    da80:	7c e0       	ldi	r23, 0x0C	; 12
    da82:	c8 01       	movw	r24, r16
    da84:	0e 94 a5 6a 	call	0xd54a	; 0xd54a <update_player>
		update_player(p2, &player2);
    da88:	6a ea       	ldi	r22, 0xAA	; 170
    da8a:	7f e0       	ldi	r23, 0x0F	; 15
    da8c:	ce 01       	movw	r24, r28
    da8e:	0e 94 a5 6a 	call	0xd54a	; 0xd54a <update_player>
    da92:	e7 c1       	rjmp	.+974    	; 0xde62 <update_level+0x430>
	}
	else if (game.boss_fight_status == BOSS_FIGHT_SCOPE_LOADING)
    da94:	90 91 15 0c 	lds	r25, 0x0C15
    da98:	91 30       	cpi	r25, 0x01	; 1
    da9a:	31 f4       	brne	.+12     	; 0xdaa8 <update_level+0x76>
	{
		// Render
		SetSpriteVisibility(true);
    da9c:	81 e0       	ldi	r24, 0x01	; 1
    da9e:	0e 94 96 54 	call	0xa92c	; 0xa92c <SetSpriteVisibility>
		render_boss_fight_scope_load();
    daa2:	0e 94 04 68 	call	0xd008	; 0xd008 <render_boss_fight_scope_load>
    daa6:	08 c0       	rjmp	.+16     	; 0xdab8 <update_level+0x86>
		
		// Update
		update_player(game.boss_fight_joypad, game.boss_fight_player);
		collision_detect_player(game.boss_fight_player, game.boss_fight_player_hud);
	}
	else if (game.boss_fight_status == BOSS_FIGHT_SUB_LOADING)
    daa8:	92 30       	cpi	r25, 0x02	; 2
    daaa:	09 f0       	breq	.+2      	; 0xdaae <update_level+0x7c>
    daac:	51 c0       	rjmp	.+162    	; 0xdb50 <update_level+0x11e>
	{
		// Render
		SetSpriteVisibility(true);
    daae:	81 e0       	ldi	r24, 0x01	; 1
    dab0:	0e 94 96 54 	call	0xa92c	; 0xa92c <SetSpriteVisibility>
		render_boss_fight_sub_load();
    dab4:	0e 94 13 68 	call	0xd026	; 0xd026 <render_boss_fight_sub_load>
		p2_index = tank_map(game.boss_fight_player, p1_index);
    dab8:	60 e0       	ldi	r22, 0x00	; 0
    daba:	80 91 18 0c 	lds	r24, 0x0C18
    dabe:	90 91 19 0c 	lds	r25, 0x0C19
    dac2:	0e 94 d8 5d 	call	0xbbb0	; 0xbbb0 <tank_map>
    dac6:	c8 2f       	mov	r28, r24
		MapSprite2(p2_index, map_tank_blank, 0);
    dac8:	40 e0       	ldi	r20, 0x00	; 0
    daca:	6b e9       	ldi	r22, 0x9B	; 155
    dacc:	7c e4       	ldi	r23, 0x4C	; 76
    dace:	0e 94 8a 55 	call	0xab14	; 0xab14 <MapSprite2>
		p1_shot_index = p2_index + 4;
    dad2:	cc 5f       	subi	r28, 0xFC	; 252
		p2_shot_index = shot_map(game.boss_fight_player, p1_shot_index);
    dad4:	6c 2f       	mov	r22, r28
    dad6:	80 91 18 0c 	lds	r24, 0x0C18
    dada:	90 91 19 0c 	lds	r25, 0x0C19
    dade:	0e 94 41 5e 	call	0xbc82	; 0xbc82 <shot_map>
    dae2:	d8 2f       	mov	r29, r24
		MapSprite2(p2_shot_index, map_none, 0);
    dae4:	40 e0       	ldi	r20, 0x00	; 0
    dae6:	61 ea       	ldi	r22, 0xA1	; 161
    dae8:	7c e4       	ldi	r23, 0x4C	; 76
    daea:	0e 94 8a 55 	call	0xab14	; 0xab14 <MapSprite2>
		shot_map(game.boss_fight_player, p1_shot_index);
    daee:	6c 2f       	mov	r22, r28
    daf0:	80 91 18 0c 	lds	r24, 0x0C18
    daf4:	90 91 19 0c 	lds	r25, 0x0C19
    daf8:	0e 94 41 5e 	call	0xbc82	; 0xbc82 <shot_map>
		render_player(game.boss_fight_player, p1_index);
    dafc:	60 e0       	ldi	r22, 0x00	; 0
    dafe:	80 91 18 0c 	lds	r24, 0x0C18
    db02:	90 91 19 0c 	lds	r25, 0x0C19
    db06:	0e 94 34 5d 	call	0xba68	; 0xba68 <render_player>
		render_shot(game.boss_fight_player, p1_shot_index);
    db0a:	6c 2f       	mov	r22, r28
    db0c:	80 91 18 0c 	lds	r24, 0x0C18
    db10:	90 91 19 0c 	lds	r25, 0x0C19
    db14:	0e 94 5d 5d 	call	0xbaba	; 0xbaba <render_shot>
		render_shot(&player2, p2_shot_index);
    db18:	6d 2f       	mov	r22, r29
    db1a:	8a ea       	ldi	r24, 0xAA	; 170
    db1c:	9f e0       	ldi	r25, 0x0F	; 15
    db1e:	0e 94 5d 5d 	call	0xbaba	; 0xbaba <render_shot>
		render_tile_explosions(&tile_animations);
    db22:	8f e1       	ldi	r24, 0x1F	; 31
    db24:	9c e0       	ldi	r25, 0x0C	; 12
    db26:	0e 94 89 5d 	call	0xbb12	; 0xbb12 <render_tile_explosions>
		
		// Update
		update_player(game.boss_fight_joypad, game.boss_fight_player);
    db2a:	60 91 18 0c 	lds	r22, 0x0C18
    db2e:	70 91 19 0c 	lds	r23, 0x0C19
    db32:	80 91 1a 0c 	lds	r24, 0x0C1A
    db36:	90 91 1b 0c 	lds	r25, 0x0C1B
    db3a:	0e 94 a5 6a 	call	0xd54a	; 0xd54a <update_player>
		collision_detect_player(game.boss_fight_player, game.boss_fight_player_hud);
    db3e:	60 91 16 0c 	lds	r22, 0x0C16
    db42:	80 91 18 0c 	lds	r24, 0x0C18
    db46:	90 91 19 0c 	lds	r25, 0x0C19
    db4a:	0e 94 0d 65 	call	0xca1a	; 0xca1a <collision_detect_player>
    db4e:	89 c1       	rjmp	.+786    	; 0xde62 <update_level+0x430>
	}
	else if (game.boss_fight_status == BOSS_FIGHT)
    db50:	94 30       	cpi	r25, 0x04	; 4
    db52:	09 f0       	breq	.+2      	; 0xdb56 <update_level+0x124>
    db54:	97 c0       	rjmp	.+302    	; 0xdc84 <update_level+0x252>
	{
		if ((turret1.lives <= 0) && (turret2.lives <= 0))
    db56:	80 91 7d 10 	lds	r24, 0x107D
    db5a:	81 11       	cpse	r24, r1
    db5c:	07 c0       	rjmp	.+14     	; 0xdb6c <update_level+0x13a>
    db5e:	80 91 49 10 	lds	r24, 0x1049
    db62:	81 11       	cpse	r24, r1
    db64:	03 c0       	rjmp	.+6      	; 0xdb6c <update_level+0x13a>
		{
			game.boss_fight_status = BOSS_FIGHT_SUB_SINKING;
    db66:	80 e2       	ldi	r24, 0x20	; 32
    db68:	80 93 15 0c 	sts	0x0C15, r24
		}
		
		// Render
		SetSpriteVisibility(true);
    db6c:	81 e0       	ldi	r24, 0x01	; 1
    db6e:	0e 94 96 54 	call	0xa92c	; 0xa92c <SetSpriteVisibility>
		p1_shot_index = tank_map(game.boss_fight_player, p1_index);
    db72:	60 e0       	ldi	r22, 0x00	; 0
    db74:	80 91 18 0c 	lds	r24, 0x0C18
    db78:	90 91 19 0c 	lds	r25, 0x0C19
    db7c:	0e 94 d8 5d 	call	0xbbb0	; 0xbbb0 <tank_map>
    db80:	f8 2e       	mov	r15, r24
		t1_index = shot_map(game.boss_fight_player, p1_shot_index);
    db82:	68 2f       	mov	r22, r24
    db84:	80 91 18 0c 	lds	r24, 0x0C18
    db88:	90 91 19 0c 	lds	r25, 0x0C19
    db8c:	0e 94 41 5e 	call	0xbc82	; 0xbc82 <shot_map>
    db90:	c8 2f       	mov	r28, r24
		t1_shot_index = t1_index+1;
    db92:	01 e0       	ldi	r16, 0x01	; 1
    db94:	08 0f       	add	r16, r24
		t2_index = t1_index+2;
    db96:	12 e0       	ldi	r17, 0x02	; 2
    db98:	18 0f       	add	r17, r24
		t2_shot_index = t1_index+3;
    db9a:	d3 e0       	ldi	r29, 0x03	; 3
    db9c:	d8 0f       	add	r29, r24
	}
}

char* turret_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    db9e:	80 91 7d 10 	lds	r24, 0x107D
    dba2:	88 23       	and	r24, r24
    dba4:	19 f0       	breq	.+6      	; 0xdbac <update_level+0x17a>
	return (char*) map_sub_turret;
    dba6:	63 e5       	ldi	r22, 0x53	; 83
    dba8:	7c e4       	ldi	r23, 0x4C	; 76
    dbaa:	02 c0       	rjmp	.+4      	; 0xdbb0 <update_level+0x17e>
	}
}

char* turret_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    dbac:	61 ea       	ldi	r22, 0xA1	; 161
    dbae:	7c e4       	ldi	r23, 0x4C	; 76
		p1_shot_index = tank_map(game.boss_fight_player, p1_index);
		t1_index = shot_map(game.boss_fight_player, p1_shot_index);
		t1_shot_index = t1_index+1;
		t2_index = t1_index+2;
		t2_shot_index = t1_index+3;
		MapSprite2(t1_index, turret_map(&turret1), 0);
    dbb0:	40 e0       	ldi	r20, 0x00	; 0
    dbb2:	8c 2f       	mov	r24, r28
    dbb4:	0e 94 8a 55 	call	0xab14	; 0xab14 <MapSprite2>
	return (char*) map_sub_turret;
}

char* turret_shot_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    dbb8:	80 91 7d 10 	lds	r24, 0x107D
    dbbc:	88 23       	and	r24, r24
    dbbe:	19 f0       	breq	.+6      	; 0xdbc6 <update_level+0x194>
	return (char*) map_sub_shot;
    dbc0:	66 e5       	ldi	r22, 0x56	; 86
    dbc2:	7c e4       	ldi	r23, 0x4C	; 76
    dbc4:	02 c0       	rjmp	.+4      	; 0xdbca <update_level+0x198>
	return (char*) map_sub_turret;
}

char* turret_shot_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    dbc6:	61 ea       	ldi	r22, 0xA1	; 161
    dbc8:	7c e4       	ldi	r23, 0x4C	; 76
		t1_index = shot_map(game.boss_fight_player, p1_shot_index);
		t1_shot_index = t1_index+1;
		t2_index = t1_index+2;
		t2_shot_index = t1_index+3;
		MapSprite2(t1_index, turret_map(&turret1), 0);
		MapSprite2(t1_shot_index, turret_shot_map(&turret1), 0);
    dbca:	40 e0       	ldi	r20, 0x00	; 0
    dbcc:	80 2f       	mov	r24, r16
    dbce:	0e 94 8a 55 	call	0xab14	; 0xab14 <MapSprite2>
	}
}

char* turret_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    dbd2:	80 91 49 10 	lds	r24, 0x1049
    dbd6:	88 23       	and	r24, r24
    dbd8:	19 f0       	breq	.+6      	; 0xdbe0 <update_level+0x1ae>
	return (char*) map_sub_turret;
    dbda:	63 e5       	ldi	r22, 0x53	; 83
    dbdc:	7c e4       	ldi	r23, 0x4C	; 76
    dbde:	02 c0       	rjmp	.+4      	; 0xdbe4 <update_level+0x1b2>
	}
}

char* turret_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    dbe0:	61 ea       	ldi	r22, 0xA1	; 161
    dbe2:	7c e4       	ldi	r23, 0x4C	; 76
		t1_shot_index = t1_index+1;
		t2_index = t1_index+2;
		t2_shot_index = t1_index+3;
		MapSprite2(t1_index, turret_map(&turret1), 0);
		MapSprite2(t1_shot_index, turret_shot_map(&turret1), 0);
		MapSprite2(t2_index, turret_map(&turret2), 0);
    dbe4:	40 e0       	ldi	r20, 0x00	; 0
    dbe6:	81 2f       	mov	r24, r17
    dbe8:	0e 94 8a 55 	call	0xab14	; 0xab14 <MapSprite2>
	return (char*) map_sub_turret;
}

char* turret_shot_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    dbec:	80 91 49 10 	lds	r24, 0x1049
    dbf0:	88 23       	and	r24, r24
    dbf2:	19 f0       	breq	.+6      	; 0xdbfa <update_level+0x1c8>
	return (char*) map_sub_shot;
    dbf4:	66 e5       	ldi	r22, 0x56	; 86
    dbf6:	7c e4       	ldi	r23, 0x4C	; 76
    dbf8:	02 c0       	rjmp	.+4      	; 0xdbfe <update_level+0x1cc>
	return (char*) map_sub_turret;
}

char* turret_shot_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    dbfa:	61 ea       	ldi	r22, 0xA1	; 161
    dbfc:	7c e4       	ldi	r23, 0x4C	; 76
		t2_index = t1_index+2;
		t2_shot_index = t1_index+3;
		MapSprite2(t1_index, turret_map(&turret1), 0);
		MapSprite2(t1_shot_index, turret_shot_map(&turret1), 0);
		MapSprite2(t2_index, turret_map(&turret2), 0);
		MapSprite2(t2_shot_index, turret_shot_map(&turret2), 0);
    dbfe:	40 e0       	ldi	r20, 0x00	; 0
    dc00:	8d 2f       	mov	r24, r29
    dc02:	0e 94 8a 55 	call	0xab14	; 0xab14 <MapSprite2>
		
		render_player(game.boss_fight_player, p1_index);
    dc06:	60 e0       	ldi	r22, 0x00	; 0
    dc08:	80 91 18 0c 	lds	r24, 0x0C18
    dc0c:	90 91 19 0c 	lds	r25, 0x0C19
    dc10:	0e 94 34 5d 	call	0xba68	; 0xba68 <render_player>
		render_shot(game.boss_fight_player, p1_shot_index);
    dc14:	6f 2d       	mov	r22, r15
    dc16:	80 91 18 0c 	lds	r24, 0x0C18
    dc1a:	90 91 19 0c 	lds	r25, 0x0C19
    dc1e:	0e 94 5d 5d 	call	0xbaba	; 0xbaba <render_shot>
		render_tile_explosions(&tile_animations);
    dc22:	8f e1       	ldi	r24, 0x1F	; 31
    dc24:	9c e0       	ldi	r25, 0x0C	; 12
    dc26:	0e 94 89 5d 	call	0xbb12	; 0xbb12 <render_tile_explosions>
		render_boss_turret(&turret1, t1_index);
    dc2a:	6c 2f       	mov	r22, r28
    dc2c:	82 e7       	ldi	r24, 0x72	; 114
    dc2e:	90 e1       	ldi	r25, 0x10	; 16
    dc30:	0e 94 55 68 	call	0xd0aa	; 0xd0aa <render_boss_turret>
		render_boss_turret_shot(&turret1, t1_shot_index);
    dc34:	60 2f       	mov	r22, r16
    dc36:	82 e7       	ldi	r24, 0x72	; 114
    dc38:	90 e1       	ldi	r25, 0x10	; 16
    dc3a:	0e 94 7e 68 	call	0xd0fc	; 0xd0fc <render_boss_turret_shot>
		render_boss_turret(&turret2, t2_index);
    dc3e:	61 2f       	mov	r22, r17
    dc40:	8e e3       	ldi	r24, 0x3E	; 62
    dc42:	90 e1       	ldi	r25, 0x10	; 16
    dc44:	0e 94 55 68 	call	0xd0aa	; 0xd0aa <render_boss_turret>
		render_boss_turret_shot(&turret2, t2_shot_index);
    dc48:	6d 2f       	mov	r22, r29
    dc4a:	8e e3       	ldi	r24, 0x3E	; 62
    dc4c:	90 e1       	ldi	r25, 0x10	; 16
    dc4e:	0e 94 7e 68 	call	0xd0fc	; 0xd0fc <render_boss_turret_shot>
		
		// Update
		update_turret(&turret1, BOSS_TURRET_1_LEFT_LIMIT, BOSS_TURRET_1_RIGHT_LIMIT);
    dc52:	40 e6       	ldi	r20, 0x60	; 96
    dc54:	68 e2       	ldi	r22, 0x28	; 40
    dc56:	82 e7       	ldi	r24, 0x72	; 114
    dc58:	90 e1       	ldi	r25, 0x10	; 16
    dc5a:	0e 94 a7 68 	call	0xd14e	; 0xd14e <update_turret>
		update_turret(&turret2, BOSS_TURRET_2_LEFT_LIMIT, BOSS_TURRET_2_RIGHT_LIMIT);
    dc5e:	40 ec       	ldi	r20, 0xC0	; 192
    dc60:	68 e8       	ldi	r22, 0x88	; 136
    dc62:	8e e3       	ldi	r24, 0x3E	; 62
    dc64:	90 e1       	ldi	r25, 0x10	; 16
    dc66:	0e 94 a7 68 	call	0xd14e	; 0xd14e <update_turret>
		update_turret_shot(&turret1, &turret1.shot[0]);
    dc6a:	6e e7       	ldi	r22, 0x7E	; 126
    dc6c:	70 e1       	ldi	r23, 0x10	; 16
    dc6e:	82 e7       	ldi	r24, 0x72	; 114
    dc70:	90 e1       	ldi	r25, 0x10	; 16
    dc72:	0e 94 3e 69 	call	0xd27c	; 0xd27c <update_turret_shot>
		update_turret_shot(&turret2, &turret2.shot[0]);
    dc76:	6a e4       	ldi	r22, 0x4A	; 74
    dc78:	70 e1       	ldi	r23, 0x10	; 16
    dc7a:	8e e3       	ldi	r24, 0x3E	; 62
    dc7c:	90 e1       	ldi	r25, 0x10	; 16
    dc7e:	0e 94 3e 69 	call	0xd27c	; 0xd27c <update_turret_shot>
    dc82:	53 cf       	rjmp	.-346    	; 0xdb2a <update_level+0xf8>
		update_player(game.boss_fight_joypad, game.boss_fight_player);
		collision_detect_player(game.boss_fight_player, game.boss_fight_player_hud);
	}
	else if (game.boss_fight_status == BOSS_FIGHT_SUB_SINKING)
    dc84:	90 32       	cpi	r25, 0x20	; 32
    dc86:	09 f0       	breq	.+2      	; 0xdc8a <update_level+0x258>
    dc88:	58 c0       	rjmp	.+176    	; 0xdd3a <update_level+0x308>
	{
		// Render
		SetSpriteVisibility(true);
    dc8a:	81 e0       	ldi	r24, 0x01	; 1
    dc8c:	0e 94 96 54 	call	0xa92c	; 0xa92c <SetSpriteVisibility>
		render_boss_fight_sub_sinking();
    dc90:	0e 94 40 68 	call	0xd080	; 0xd080 <render_boss_fight_sub_sinking>
		p2_index = tank_map(game.boss_fight_player, p1_index);
    dc94:	60 e0       	ldi	r22, 0x00	; 0
    dc96:	80 91 18 0c 	lds	r24, 0x0C18
    dc9a:	90 91 19 0c 	lds	r25, 0x0C19
    dc9e:	0e 94 d8 5d 	call	0xbbb0	; 0xbbb0 <tank_map>
    dca2:	c8 2f       	mov	r28, r24
		MapSprite2(p2_index, map_tank_blank, 0);
    dca4:	40 e0       	ldi	r20, 0x00	; 0
    dca6:	6b e9       	ldi	r22, 0x9B	; 155
    dca8:	7c e4       	ldi	r23, 0x4C	; 76
    dcaa:	0e 94 8a 55 	call	0xab14	; 0xab14 <MapSprite2>
		p1_shot_index = p2_index + 4;
    dcae:	cc 5f       	subi	r28, 0xFC	; 252
		p2_shot_index = shot_map(game.boss_fight_player, p1_shot_index);
    dcb0:	6c 2f       	mov	r22, r28
    dcb2:	80 91 18 0c 	lds	r24, 0x0C18
    dcb6:	90 91 19 0c 	lds	r25, 0x0C19
    dcba:	0e 94 41 5e 	call	0xbc82	; 0xbc82 <shot_map>
    dcbe:	d8 2f       	mov	r29, r24
		MapSprite2(p2_shot_index, map_none, 0);
    dcc0:	40 e0       	ldi	r20, 0x00	; 0
    dcc2:	61 ea       	ldi	r22, 0xA1	; 161
    dcc4:	7c e4       	ldi	r23, 0x4C	; 76
    dcc6:	0e 94 8a 55 	call	0xab14	; 0xab14 <MapSprite2>
		shot_map(game.boss_fight_player, p1_shot_index);
    dcca:	6c 2f       	mov	r22, r28
    dccc:	80 91 18 0c 	lds	r24, 0x0C18
    dcd0:	90 91 19 0c 	lds	r25, 0x0C19
    dcd4:	0e 94 41 5e 	call	0xbc82	; 0xbc82 <shot_map>
		render_player(game.boss_fight_player, p1_index);
    dcd8:	60 e0       	ldi	r22, 0x00	; 0
    dcda:	80 91 18 0c 	lds	r24, 0x0C18
    dcde:	90 91 19 0c 	lds	r25, 0x0C19
    dce2:	0e 94 34 5d 	call	0xba68	; 0xba68 <render_player>
		render_shot(game.boss_fight_player, p1_shot_index);
    dce6:	6c 2f       	mov	r22, r28
    dce8:	80 91 18 0c 	lds	r24, 0x0C18
    dcec:	90 91 19 0c 	lds	r25, 0x0C19
    dcf0:	0e 94 5d 5d 	call	0xbaba	; 0xbaba <render_shot>
		render_shot(&player2, p2_shot_index);
    dcf4:	6d 2f       	mov	r22, r29
    dcf6:	8a ea       	ldi	r24, 0xAA	; 170
    dcf8:	9f e0       	ldi	r25, 0x0F	; 15
    dcfa:	0e 94 5d 5d 	call	0xbaba	; 0xbaba <render_shot>
		render_tile_explosions(&tile_animations);
    dcfe:	8f e1       	ldi	r24, 0x1F	; 31
    dd00:	9c e0       	ldi	r25, 0x0C	; 12
    dd02:	0e 94 89 5d 	call	0xbb12	; 0xbb12 <render_tile_explosions>
		
		// Update
		update_player(game.boss_fight_joypad, game.boss_fight_player);
    dd06:	60 91 18 0c 	lds	r22, 0x0C18
    dd0a:	70 91 19 0c 	lds	r23, 0x0C19
    dd0e:	80 91 1a 0c 	lds	r24, 0x0C1A
    dd12:	90 91 1b 0c 	lds	r25, 0x0C1B
    dd16:	0e 94 a5 6a 	call	0xd54a	; 0xd54a <update_player>
		collision_detect_player(game.boss_fight_player, game.boss_fight_player_hud);
    dd1a:	60 91 16 0c 	lds	r22, 0x0C16
    dd1e:	80 91 18 0c 	lds	r24, 0x0C18
    dd22:	90 91 19 0c 	lds	r25, 0x0C19
    dd26:	0e 94 0d 65 	call	0xca1a	; 0xca1a <collision_detect_player>
		if (game.boss_fight_status != BOSS_FIGHT_SUB_SINKING)
    dd2a:	80 91 15 0c 	lds	r24, 0x0C15
    dd2e:	80 32       	cpi	r24, 0x20	; 32
    dd30:	09 f4       	brne	.+2      	; 0xdd34 <update_level+0x302>
    dd32:	97 c0       	rjmp	.+302    	; 0xde62 <update_level+0x430>
		{
			resolve_scoring();
    dd34:	0e 94 51 6c 	call	0xd8a2	; 0xd8a2 <resolve_scoring>
    dd38:	94 c0       	rjmp	.+296    	; 0xde62 <update_level+0x430>
		}
	}
	else if (game.boss_fight_status == BOSS_FIGHT_LOST)
    dd3a:	90 31       	cpi	r25, 0x10	; 16
    dd3c:	d9 f3       	breq	.-10     	; 0xdd34 <update_level+0x302>
	{
		resolve_scoring();
	}
	else if (game.boss_fight_status == 0)
    dd3e:	91 11       	cpse	r25, r1
    dd40:	90 c0       	rjmp	.+288    	; 0xde62 <update_level+0x430>
	{
		SetSpriteVisibility(true);
    dd42:	81 e0       	ldi	r24, 0x01	; 1
    dd44:	0e 94 96 54 	call	0xa92c	; 0xa92c <SetSpriteVisibility>
		p2_index = tank_map(&player1, p1_index);
    dd48:	60 e0       	ldi	r22, 0x00	; 0
    dd4a:	8c e3       	ldi	r24, 0x3C	; 60
    dd4c:	9c e0       	ldi	r25, 0x0C	; 12
    dd4e:	0e 94 d8 5d 	call	0xbbb0	; 0xbbb0 <tank_map>
    dd52:	d8 2e       	mov	r13, r24
		p1_shot_index = tank_map(&player2, p2_index);
    dd54:	68 2f       	mov	r22, r24
    dd56:	8a ea       	ldi	r24, 0xAA	; 170
    dd58:	9f e0       	ldi	r25, 0x0F	; 15
    dd5a:	0e 94 d8 5d 	call	0xbbb0	; 0xbbb0 <tank_map>
    dd5e:	e8 2e       	mov	r14, r24
		p2_shot_index = shot_map(&player1, p1_shot_index);
    dd60:	68 2f       	mov	r22, r24
    dd62:	8c e3       	ldi	r24, 0x3C	; 60
    dd64:	9c e0       	ldi	r25, 0x0C	; 12
    dd66:	0e 94 41 5e 	call	0xbc82	; 0xbc82 <shot_map>
    dd6a:	f8 2e       	mov	r15, r24
		shot_map(&player2, p2_shot_index);
    dd6c:	68 2f       	mov	r22, r24
    dd6e:	8a ea       	ldi	r24, 0xAA	; 170
    dd70:	9f e0       	ldi	r25, 0x0F	; 15
    dd72:	0e 94 41 5e 	call	0xbc82	; 0xbc82 <shot_map>
		clear_banter_1 = render_banter(&player1, 15, clear_banter_1);
    dd76:	40 91 02 01 	lds	r20, 0x0102
    dd7a:	6f e0       	ldi	r22, 0x0F	; 15
    dd7c:	8c e3       	ldi	r24, 0x3C	; 60
    dd7e:	9c e0       	ldi	r25, 0x0C	; 12
    dd80:	0e 94 0c 5d 	call	0xba18	; 0xba18 <render_banter>
    dd84:	80 93 02 01 	sts	0x0102, r24
		clear_banter_2 = render_banter(&player2, 0, clear_banter_2);
    dd88:	40 91 01 01 	lds	r20, 0x0101
    dd8c:	60 e0       	ldi	r22, 0x00	; 0
    dd8e:	8a ea       	ldi	r24, 0xAA	; 170
    dd90:	9f e0       	ldi	r25, 0x0F	; 15
    dd92:	0e 94 0c 5d 	call	0xba18	; 0xba18 <render_banter>
    dd96:	80 93 01 01 	sts	0x0101, r24
		render_player(&player1, p1_index);
    dd9a:	60 e0       	ldi	r22, 0x00	; 0
    dd9c:	8c e3       	ldi	r24, 0x3C	; 60
    dd9e:	9c e0       	ldi	r25, 0x0C	; 12
    dda0:	0e 94 34 5d 	call	0xba68	; 0xba68 <render_player>
		render_player(&player2, p2_index);
    dda4:	6d 2d       	mov	r22, r13
    dda6:	8a ea       	ldi	r24, 0xAA	; 170
    dda8:	9f e0       	ldi	r25, 0x0F	; 15
    ddaa:	0e 94 34 5d 	call	0xba68	; 0xba68 <render_player>
		render_shot(&player1, p1_shot_index);
    ddae:	6e 2d       	mov	r22, r14
    ddb0:	8c e3       	ldi	r24, 0x3C	; 60
    ddb2:	9c e0       	ldi	r25, 0x0C	; 12
    ddb4:	0e 94 5d 5d 	call	0xbaba	; 0xbaba <render_shot>
		render_shot(&player2, p2_shot_index);
    ddb8:	6f 2d       	mov	r22, r15
    ddba:	8a ea       	ldi	r24, 0xAA	; 170
    ddbc:	9f e0       	ldi	r25, 0x0F	; 15
    ddbe:	0e 94 5d 5d 	call	0xbaba	; 0xbaba <render_shot>
		render_tile_explosions(&tile_animations);
    ddc2:	8f e1       	ldi	r24, 0x1F	; 31
    ddc4:	9c e0       	ldi	r25, 0x0C	; 12
    ddc6:	0e 94 89 5d 	call	0xbb12	; 0xbb12 <render_tile_explosions>
		if (game.scope_counter > SCOPE_REVEAL && scope_animation.tile_index > 0)
    ddca:	80 91 1c 0c 	lds	r24, 0x0C1C
    ddce:	90 91 1d 0c 	lds	r25, 0x0C1D
    ddd2:	89 3e       	cpi	r24, 0xE9	; 233
    ddd4:	93 40       	sbci	r25, 0x03	; 3
    ddd6:	88 f0       	brcs	.+34     	; 0xddfa <update_level+0x3c8>
    ddd8:	80 91 3c 10 	lds	r24, 0x103C
    dddc:	90 91 3d 10 	lds	r25, 0x103D
    dde0:	18 16       	cp	r1, r24
    dde2:	19 06       	cpc	r1, r25
    dde4:	54 f4       	brge	.+20     	; 0xddfa <update_level+0x3c8>
		{
			if (render_scope(&scope_animation)) game.scope_counter = 0;
    dde6:	80 e3       	ldi	r24, 0x30	; 48
    dde8:	90 e1       	ldi	r25, 0x10	; 16
    ddea:	0e 94 be 5d 	call	0xbb7c	; 0xbb7c <render_scope>
    ddee:	88 23       	and	r24, r24
    ddf0:	21 f0       	breq	.+8      	; 0xddfa <update_level+0x3c8>
    ddf2:	10 92 1d 0c 	sts	0x0C1D, r1
    ddf6:	10 92 1c 0c 	sts	0x0C1C, r1
		}
		game.scope_counter++;
    ddfa:	20 91 1c 0c 	lds	r18, 0x0C1C
    ddfe:	30 91 1d 0c 	lds	r19, 0x0C1D
    de02:	2f 5f       	subi	r18, 0xFF	; 255
    de04:	3f 4f       	sbci	r19, 0xFF	; 255
    de06:	30 93 1d 0c 	sts	0x0C1D, r19
    de0a:	20 93 1c 0c 	sts	0x0C1C, r18
		
		// Update
		update_player(p1, &player1);
    de0e:	6c e3       	ldi	r22, 0x3C	; 60
    de10:	7c e0       	ldi	r23, 0x0C	; 12
    de12:	c8 01       	movw	r24, r16
    de14:	0e 94 a5 6a 	call	0xd54a	; 0xd54a <update_player>
		update_player(p2, &player2);
    de18:	6a ea       	ldi	r22, 0xAA	; 170
    de1a:	7f e0       	ldi	r23, 0x0F	; 15
    de1c:	ce 01       	movw	r24, r28
    de1e:	0e 94 a5 6a 	call	0xd54a	; 0xd54a <update_player>
		resolve_scoring();
    de22:	0e 94 51 6c 	call	0xd8a2	; 0xd8a2 <resolve_scoring>
		if (collision_detect_player(&player1, 0)) explode_player(&player1, &player2, 0, 15);
    de26:	60 e0       	ldi	r22, 0x00	; 0
    de28:	8c e3       	ldi	r24, 0x3C	; 60
    de2a:	9c e0       	ldi	r25, 0x0C	; 12
    de2c:	0e 94 0d 65 	call	0xca1a	; 0xca1a <collision_detect_player>
    de30:	88 23       	and	r24, r24
    de32:	41 f0       	breq	.+16     	; 0xde44 <update_level+0x412>
    de34:	2f e0       	ldi	r18, 0x0F	; 15
    de36:	40 e0       	ldi	r20, 0x00	; 0
    de38:	6a ea       	ldi	r22, 0xAA	; 170
    de3a:	7f e0       	ldi	r23, 0x0F	; 15
    de3c:	8c e3       	ldi	r24, 0x3C	; 60
    de3e:	9c e0       	ldi	r25, 0x0C	; 12
    de40:	0e 94 31 64 	call	0xc862	; 0xc862 <explode_player>
		if (collision_detect_player(&player2, 15)) explode_player(&player2, &player1, 15, 0);
    de44:	6f e0       	ldi	r22, 0x0F	; 15
    de46:	8a ea       	ldi	r24, 0xAA	; 170
    de48:	9f e0       	ldi	r25, 0x0F	; 15
    de4a:	0e 94 0d 65 	call	0xca1a	; 0xca1a <collision_detect_player>
    de4e:	88 23       	and	r24, r24
    de50:	41 f0       	breq	.+16     	; 0xde62 <update_level+0x430>
    de52:	20 e0       	ldi	r18, 0x00	; 0
    de54:	4f e0       	ldi	r20, 0x0F	; 15
    de56:	6c e3       	ldi	r22, 0x3C	; 60
    de58:	7c e0       	ldi	r23, 0x0C	; 12
    de5a:	8a ea       	ldi	r24, 0xAA	; 170
    de5c:	9f e0       	ldi	r25, 0x0F	; 15
    de5e:	0e 94 31 64 	call	0xc862	; 0xc862 <explode_player>
	}
	
	if (game.selection == CPUVCPU) 
    de62:	80 91 1e 0c 	lds	r24, 0x0C1E
    de66:	83 30       	cpi	r24, 0x03	; 3
    de68:	31 f5       	brne	.+76     	; 0xdeb6 <update_level+0x484>
	{
		demo_counter++;
    de6a:	80 91 37 0b 	lds	r24, 0x0B37
    de6e:	90 91 38 0b 	lds	r25, 0x0B38
    de72:	01 96       	adiw	r24, 0x01	; 1
    de74:	90 93 38 0b 	sts	0x0B38, r25
    de78:	80 93 37 0b 	sts	0x0B37, r24
		held = ReadJoypad(0);
    de7c:	80 e0       	ldi	r24, 0x00	; 0
    de7e:	0e 94 0c 48 	call	0x9018	; 0x9018 <ReadJoypad>
		if (held || (demo_counter >= DEMO_LENGTH))
    de82:	89 2b       	or	r24, r25
    de84:	39 f4       	brne	.+14     	; 0xde94 <update_level+0x462>
    de86:	80 91 37 0b 	lds	r24, 0x0B37
    de8a:	90 91 38 0b 	lds	r25, 0x0B38
    de8e:	88 30       	cpi	r24, 0x08	; 8
    de90:	97 40       	sbci	r25, 0x07	; 7
    de92:	88 f0       	brcs	.+34     	; 0xdeb6 <update_level+0x484>
		{
			demo_counter = 0;
    de94:	10 92 38 0b 	sts	0x0B38, r1
    de98:	10 92 37 0b 	sts	0x0B37, r1
			fade_through();
    de9c:	0e 94 18 5b 	call	0xb630	; 0xb630 <fade_through>
			init_game_state();
    dea0:	0e 94 c9 5a 	call	0xb592	; 0xb592 <init_game_state>
			load_splash();
		}
	}
}
    dea4:	df 91       	pop	r29
    dea6:	cf 91       	pop	r28
    dea8:	1f 91       	pop	r17
    deaa:	0f 91       	pop	r16
    deac:	ff 90       	pop	r15
    deae:	ef 90       	pop	r14
    deb0:	df 90       	pop	r13
		if (held || (demo_counter >= DEMO_LENGTH))
		{
			demo_counter = 0;
			fade_through();
			init_game_state();
			load_splash();
    deb2:	0c 94 c5 69 	jmp	0xd38a	; 0xd38a <load_splash>
		}
	}
}
    deb6:	df 91       	pop	r29
    deb8:	cf 91       	pop	r28
    deba:	1f 91       	pop	r17
    debc:	0f 91       	pop	r16
    debe:	ff 90       	pop	r15
    dec0:	ef 90       	pop	r14
    dec2:	df 90       	pop	r13
    dec4:	08 95       	ret

0000dec6 <update_tank_rank>:
	Print(3, 22, (char*) strReset);
	Print(10, 24, (char*) strCancelHandle);
}

void update_tank_rank(JoyPadState* p1)
{
    dec6:	cf 93       	push	r28
    dec8:	df 93       	push	r29
    deca:	ec 01       	movw	r28, r24
	static u16 tank_rank_counter = 0;
	
	// Update
	if (p1->pressed & BTN_X)
    decc:	88 81       	ld	r24, Y
    dece:	99 81       	ldd	r25, Y+1	; 0x01
    ded0:	91 ff       	sbrs	r25, 1
    ded2:	0e c0       	rjmp	.+28     	; 0xdef0 <update_tank_rank+0x2a>
	{
		tank_rank_counter = 0;
    ded4:	10 92 33 0b 	sts	0x0B33, r1
    ded8:	10 92 32 0b 	sts	0x0B32, r1
		SFX_NAVIGATE;
    dedc:	2f ef       	ldi	r18, 0xFF	; 255
    dede:	47 e1       	ldi	r20, 0x17	; 23
    dee0:	65 e0       	ldi	r22, 0x05	; 5
    dee2:	84 e0       	ldi	r24, 0x04	; 4
    dee4:	0e 94 a4 4b 	call	0x9748	; 0x9748 <TriggerNote>
		fade_through();
    dee8:	0e 94 18 5b 	call	0xb630	; 0xb630 <fade_through>
		load_splash();
    deec:	0e 94 c5 69 	call	0xd38a	; 0xd38a <load_splash>
	}
	if ((p1->held & BTN_SL) && (p1->held_cycles == 255))
    def0:	8c 81       	ldd	r24, Y+4	; 0x04
    def2:	9d 81       	ldd	r25, Y+5	; 0x05
    def4:	92 ff       	sbrs	r25, 2
    def6:	1f c0       	rjmp	.+62     	; 0xdf36 <update_tank_rank+0x70>
    def8:	8e 81       	ldd	r24, Y+6	; 0x06
    defa:	8f 3f       	cpi	r24, 0xFF	; 255
    defc:	e1 f4       	brne	.+56     	; 0xdf36 <update_tank_rank+0x70>
	{
		tank_rank_counter = 0;
    defe:	10 92 33 0b 	sts	0x0B33, r1
    df02:	10 92 32 0b 	sts	0x0B32, r1
	    SFX_NAVIGATE;
    df06:	2f ef       	ldi	r18, 0xFF	; 255
    df08:	47 e1       	ldi	r20, 0x17	; 23
    df0a:	65 e0       	ldi	r22, 0x05	; 5
    df0c:	84 e0       	ldi	r24, 0x04	; 4
    df0e:	0e 94 a4 4b 	call	0x9748	; 0x9748 <TriggerNote>
	    init_scores(&scores);
    df12:	8b ec       	ldi	r24, 0xCB	; 203
    df14:	9b e0       	ldi	r25, 0x0B	; 11
    df16:	0e 94 63 59 	call	0xb2c6	; 0xb2c6 <init_scores>
	    init_handles(&handles);
    df1a:	82 ef       	ldi	r24, 0xF2	; 242
    df1c:	9b e0       	ldi	r25, 0x0B	; 11
    df1e:	0e 94 6f 59 	call	0xb2de	; 0xb2de <init_handles>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    df22:	8b ec       	ldi	r24, 0xCB	; 203
    df24:	9b e0       	ldi	r25, 0x0B	; 11
    df26:	0e 94 5d 49 	call	0x92ba	; 0x92ba <EepromWriteBlock>
    df2a:	82 ef       	ldi	r24, 0xF2	; 242
    df2c:	9b e0       	ldi	r25, 0x0B	; 11
    df2e:	0e 94 5d 49 	call	0x92ba	; 0x92ba <EepromWriteBlock>
	    SFX_NAVIGATE;
	    init_scores(&scores);
	    init_handles(&handles);
	    save_eeprom(&scores);
	    save_eeprom(&handles);
	    load_tank_rank();
    df32:	0e 94 ff 69 	call	0xd3fe	; 0xd3fe <load_tank_rank>
	}
	
	if (tank_rank_counter > TANK_RANK_LENGTH)
    df36:	80 91 32 0b 	lds	r24, 0x0B32
    df3a:	90 91 33 0b 	lds	r25, 0x0B33
    df3e:	85 38       	cpi	r24, 0x85	; 133
    df40:	93 40       	sbci	r25, 0x03	; 3
    df42:	70 f0       	brcs	.+28     	; 0xdf60 <update_tank_rank+0x9a>
	{
		tank_rank_counter = 0;
    df44:	10 92 33 0b 	sts	0x0B33, r1
    df48:	10 92 32 0b 	sts	0x0B32, r1
		SFX_NAVIGATE;
    df4c:	2f ef       	ldi	r18, 0xFF	; 255
    df4e:	47 e1       	ldi	r20, 0x17	; 23
    df50:	65 e0       	ldi	r22, 0x05	; 5
    df52:	84 e0       	ldi	r24, 0x04	; 4
    df54:	0e 94 a4 4b 	call	0x9748	; 0x9748 <TriggerNote>
		fade_through();
    df58:	0e 94 18 5b 	call	0xb630	; 0xb630 <fade_through>
		load_splash();
    df5c:	0e 94 c5 69 	call	0xd38a	; 0xd38a <load_splash>
	}
	tank_rank_counter++;
    df60:	80 91 32 0b 	lds	r24, 0x0B32
    df64:	90 91 33 0b 	lds	r25, 0x0B33
    df68:	01 96       	adiw	r24, 0x01	; 1
    df6a:	90 93 33 0b 	sts	0x0B33, r25
    df6e:	80 93 32 0b 	sts	0x0B32, r24
}
    df72:	df 91       	pop	r29
    df74:	cf 91       	pop	r28
    df76:	08 95       	ret

0000df78 <_handle_select_helper>:


void _handle_select_helper(HandleSelectState* ps, JoyPadState* p, Player* player)
{
    df78:	af 92       	push	r10
    df7a:	bf 92       	push	r11
    df7c:	cf 92       	push	r12
    df7e:	df 92       	push	r13
    df80:	ef 92       	push	r14
    df82:	ff 92       	push	r15
    df84:	0f 93       	push	r16
    df86:	1f 93       	push	r17
    df88:	cf 93       	push	r28
    df8a:	df 93       	push	r29
    df8c:	ec 01       	movw	r28, r24
	if ((p->pressed & BTN_UP) && (ps->select_state == SELECTING))
    df8e:	fb 01       	movw	r30, r22
    df90:	00 81       	ld	r16, Z
    df92:	11 81       	ldd	r17, Z+1	; 0x01
    df94:	68 01       	movw	r12, r16
    df96:	f0 e1       	ldi	r31, 0x10	; 16
    df98:	cf 22       	and	r12, r31
    df9a:	dd 24       	eor	r13, r13
    df9c:	04 ff       	sbrs	r16, 4
    df9e:	09 c0       	rjmp	.+18     	; 0xdfb2 <_handle_select_helper+0x3a>
    dfa0:	8d 81       	ldd	r24, Y+5	; 0x05
    dfa2:	81 11       	cpse	r24, r1
    dfa4:	06 c0       	rjmp	.+12     	; 0xdfb2 <_handle_select_helper+0x3a>
	{
		ps->handle_id--;
    dfa6:	88 81       	ld	r24, Y
    dfa8:	81 50       	subi	r24, 0x01	; 1
		if (ps->handle_id < 0) ps->handle_id = 0;
    dfaa:	87 ff       	sbrs	r24, 7
    dfac:	10 c0       	rjmp	.+32     	; 0xdfce <_handle_select_helper+0x56>
    dfae:	18 82       	st	Y, r1
    dfb0:	26 c0       	rjmp	.+76     	; 0xdffe <_handle_select_helper+0x86>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == SELECTING))
    dfb2:	58 01       	movw	r10, r16
    dfb4:	20 e2       	ldi	r18, 0x20	; 32
    dfb6:	a2 22       	and	r10, r18
    dfb8:	bb 24       	eor	r11, r11
    dfba:	05 ff       	sbrs	r16, 5
    dfbc:	0a c0       	rjmp	.+20     	; 0xdfd2 <_handle_select_helper+0x5a>
    dfbe:	8d 81       	ldd	r24, Y+5	; 0x05
    dfc0:	81 11       	cpse	r24, r1
    dfc2:	07 c0       	rjmp	.+14     	; 0xdfd2 <_handle_select_helper+0x5a>
	{
		ps->handle_id++;
    dfc4:	88 81       	ld	r24, Y
    dfc6:	8f 5f       	subi	r24, 0xFF	; 255
		if (ps->handle_id > 8) ps->handle_id = 8;
    dfc8:	89 30       	cpi	r24, 0x09	; 9
    dfca:	0c f0       	brlt	.+2      	; 0xdfce <_handle_select_helper+0x56>
    dfcc:	88 e0       	ldi	r24, 0x08	; 8
    dfce:	88 83       	st	Y, r24
    dfd0:	16 c0       	rjmp	.+44     	; 0xdffe <_handle_select_helper+0x86>
    dfd2:	7a 01       	movw	r14, r20
    dfd4:	cb 01       	movw	r24, r22
		SFX_NAVIGATE;
	}
	else if (select_pressed(p) && (ps->select_state == SELECTING))
    dfd6:	0e 94 f5 69 	call	0xd3ea	; 0xd3ea <select_pressed>
    dfda:	88 23       	and	r24, r24
    dfdc:	01 f1       	breq	.+64     	; 0xe01e <_handle_select_helper+0xa6>
    dfde:	9d 81       	ldd	r25, Y+5	; 0x05
    dfe0:	91 11       	cpse	r25, r1
    dfe2:	1d c0       	rjmp	.+58     	; 0xe01e <_handle_select_helper+0xa6>
	{
		ps->select_state = EDITING;
    dfe4:	81 e0       	ldi	r24, 0x01	; 1
    dfe6:	8d 83       	std	Y+5, r24	; 0x05
		LBCopyChars(ps->handle, &handles.data[ps->handle_id*3], 3);
    dfe8:	69 91       	ld	r22, Y+
    dfea:	83 e0       	ldi	r24, 0x03	; 3
    dfec:	68 02       	muls	r22, r24
    dfee:	b0 01       	movw	r22, r0
    dff0:	11 24       	eor	r1, r1
    dff2:	6c 50       	subi	r22, 0x0C	; 12
    dff4:	74 4f       	sbci	r23, 0xF4	; 244
    dff6:	43 e0       	ldi	r20, 0x03	; 3
    dff8:	ce 01       	movw	r24, r28
    dffa:	0e 94 e2 57 	call	0xafc4	; 0xafc4 <LBCopyChars>
		SFX_NAVIGATE;
    dffe:	2f ef       	ldi	r18, 0xFF	; 255
    e000:	47 e1       	ldi	r20, 0x17	; 23
    e002:	65 e0       	ldi	r22, 0x05	; 5
    e004:	84 e0       	ldi	r24, 0x04	; 4
	{
		SFX_NAVIGATE;
		fade_through();
		load_splash();
	}
}
    e006:	df 91       	pop	r29
    e008:	cf 91       	pop	r28
    e00a:	1f 91       	pop	r17
    e00c:	0f 91       	pop	r16
    e00e:	ff 90       	pop	r15
    e010:	ef 90       	pop	r14
    e012:	df 90       	pop	r13
    e014:	cf 90       	pop	r12
    e016:	bf 90       	pop	r11
    e018:	af 90       	pop	r10
	}
	else if (select_pressed(p) && (ps->select_state == SELECTING))
	{
		ps->select_state = EDITING;
		LBCopyChars(ps->handle, &handles.data[ps->handle_id*3], 3);
		SFX_NAVIGATE;
    e01a:	0c 94 a4 4b 	jmp	0x9748	; 0x9748 <TriggerNote>
	}
	else if ((p->pressed & BTN_RIGHT) && (ps->select_state == EDITING))
    e01e:	07 ff       	sbrs	r16, 7
    e020:	09 c0       	rjmp	.+18     	; 0xe034 <_handle_select_helper+0xbc>
    e022:	9d 81       	ldd	r25, Y+5	; 0x05
    e024:	91 30       	cpi	r25, 0x01	; 1
    e026:	31 f4       	brne	.+12     	; 0xe034 <_handle_select_helper+0xbc>
	{
		ps->char_index++;
    e028:	8c 81       	ldd	r24, Y+4	; 0x04
    e02a:	8f 5f       	subi	r24, 0xFF	; 255
		if (ps->char_index > 2) ps->char_index = 2;
    e02c:	83 30       	cpi	r24, 0x03	; 3
    e02e:	5c f0       	brlt	.+22     	; 0xe046 <_handle_select_helper+0xce>
    e030:	82 e0       	ldi	r24, 0x02	; 2
    e032:	09 c0       	rjmp	.+18     	; 0xe046 <_handle_select_helper+0xce>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_LEFT) && (ps->select_state == EDITING))
    e034:	06 ff       	sbrs	r16, 6
    e036:	0b c0       	rjmp	.+22     	; 0xe04e <_handle_select_helper+0xd6>
    e038:	9d 81       	ldd	r25, Y+5	; 0x05
    e03a:	91 30       	cpi	r25, 0x01	; 1
    e03c:	41 f5       	brne	.+80     	; 0xe08e <_handle_select_helper+0x116>
	{
		ps->char_index--;
    e03e:	8c 81       	ldd	r24, Y+4	; 0x04
    e040:	81 50       	subi	r24, 0x01	; 1
		if (ps->char_index < 0) ps->char_index = 0;
    e042:	87 fd       	sbrc	r24, 7
    e044:	02 c0       	rjmp	.+4      	; 0xe04a <_handle_select_helper+0xd2>
		if (ps->char_index > 2) ps->char_index = 2;
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_LEFT) && (ps->select_state == EDITING))
	{
		ps->char_index--;
    e046:	8c 83       	std	Y+4, r24	; 0x04
    e048:	da cf       	rjmp	.-76     	; 0xdffe <_handle_select_helper+0x86>
		if (ps->char_index < 0) ps->char_index = 0;
    e04a:	1c 82       	std	Y+4, r1	; 0x04
    e04c:	d8 cf       	rjmp	.-80     	; 0xdffe <_handle_select_helper+0x86>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_UP) && (ps->select_state == EDITING))
    e04e:	cd 28       	or	r12, r13
    e050:	69 f0       	breq	.+26     	; 0xe06c <_handle_select_helper+0xf4>
    e052:	8d 81       	ldd	r24, Y+5	; 0x05
    e054:	81 30       	cpi	r24, 0x01	; 1
    e056:	09 f0       	breq	.+2      	; 0xe05a <_handle_select_helper+0xe2>
    e058:	44 c0       	rjmp	.+136    	; 0xe0e2 <_handle_select_helper+0x16a>
	{
		ps->handle[(u8) ps->char_index]--;
    e05a:	8c 81       	ldd	r24, Y+4	; 0x04
    e05c:	c8 0f       	add	r28, r24
    e05e:	d1 1d       	adc	r29, r1
    e060:	99 81       	ldd	r25, Y+1	; 0x01
    e062:	91 50       	subi	r25, 0x01	; 1
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'A';
    e064:	91 34       	cpi	r25, 0x41	; 65
    e066:	70 f4       	brcc	.+28     	; 0xe084 <_handle_select_helper+0x10c>
    e068:	81 e4       	ldi	r24, 0x41	; 65
    e06a:	0f c0       	rjmp	.+30     	; 0xe08a <_handle_select_helper+0x112>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING))
    e06c:	ab 28       	or	r10, r11
    e06e:	89 f0       	breq	.+34     	; 0xe092 <_handle_select_helper+0x11a>
    e070:	8d 81       	ldd	r24, Y+5	; 0x05
    e072:	81 30       	cpi	r24, 0x01	; 1
    e074:	b1 f5       	brne	.+108    	; 0xe0e2 <_handle_select_helper+0x16a>
	{
		ps->handle[(u8) ps->char_index]++;
    e076:	8c 81       	ldd	r24, Y+4	; 0x04
    e078:	c8 0f       	add	r28, r24
    e07a:	d1 1d       	adc	r29, r1
    e07c:	99 81       	ldd	r25, Y+1	; 0x01
    e07e:	9f 5f       	subi	r25, 0xFF	; 255
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'Z';
    e080:	9b 35       	cpi	r25, 0x5B	; 91
    e082:	10 f4       	brcc	.+4      	; 0xe088 <_handle_select_helper+0x110>
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'A';
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING))
	{
		ps->handle[(u8) ps->char_index]++;
    e084:	99 83       	std	Y+1, r25	; 0x01
    e086:	bb cf       	rjmp	.-138    	; 0xdffe <_handle_select_helper+0x86>
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'Z';
    e088:	8a e5       	ldi	r24, 0x5A	; 90
    e08a:	89 83       	std	Y+1, r24	; 0x01
    e08c:	b8 cf       	rjmp	.-144    	; 0xdffe <_handle_select_helper+0x86>
	{
		ps->handle[(u8) ps->char_index]--;
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'A';
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING))
    e08e:	ab 28       	or	r10, r11
    e090:	41 f5       	brne	.+80     	; 0xe0e2 <_handle_select_helper+0x16a>
	{
		ps->handle[(u8) ps->char_index]++;
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'Z';
		SFX_NAVIGATE;
	}
	else if (select_pressed(p) && (ps->select_state == EDITING))
    e092:	88 23       	and	r24, r24
    e094:	31 f1       	breq	.+76     	; 0xe0e2 <_handle_select_helper+0x16a>
    e096:	8d 81       	ldd	r24, Y+5	; 0x05
    e098:	81 30       	cpi	r24, 0x01	; 1
    e09a:	19 f5       	brne	.+70     	; 0xe0e2 <_handle_select_helper+0x16a>
	{
		player->handle_id = ps->handle_id;
    e09c:	fe 01       	movw	r30, r28
    e09e:	81 91       	ld	r24, Z+
    e0a0:	8f 01       	movw	r16, r30
    e0a2:	f7 01       	movw	r30, r14
    e0a4:	83 87       	std	Z+11, r24	; 0x0b
		LBCopyChars(player->handle, ps->handle, 3);
    e0a6:	43 e0       	ldi	r20, 0x03	; 3
    e0a8:	b8 01       	movw	r22, r16
    e0aa:	c7 01       	movw	r24, r14
    e0ac:	0c 96       	adiw	r24, 0x0c	; 12
    e0ae:	0e 94 e2 57 	call	0xafc4	; 0xafc4 <LBCopyChars>
		LBCopyChars(&handles.data[ps->handle_id*3], ps->handle, 3);
    e0b2:	88 81       	ld	r24, Y
    e0b4:	f3 e0       	ldi	r31, 0x03	; 3
    e0b6:	8f 02       	muls	r24, r31
    e0b8:	c0 01       	movw	r24, r0
    e0ba:	11 24       	eor	r1, r1
    e0bc:	43 e0       	ldi	r20, 0x03	; 3
    e0be:	b8 01       	movw	r22, r16
    e0c0:	8c 50       	subi	r24, 0x0C	; 12
    e0c2:	94 4f       	sbci	r25, 0xF4	; 244
    e0c4:	0e 94 e2 57 	call	0xafc4	; 0xafc4 <LBCopyChars>
		SFX_NAVIGATE;
    e0c8:	2f ef       	ldi	r18, 0xFF	; 255
    e0ca:	47 e1       	ldi	r20, 0x17	; 23
    e0cc:	65 e0       	ldi	r22, 0x05	; 5
    e0ce:	84 e0       	ldi	r24, 0x04	; 4
    e0d0:	0e 94 a4 4b 	call	0x9748	; 0x9748 <TriggerNote>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    e0d4:	82 ef       	ldi	r24, 0xF2	; 242
    e0d6:	9b e0       	ldi	r25, 0x0B	; 11
    e0d8:	0e 94 5d 49 	call	0x92ba	; 0x92ba <EepromWriteBlock>
		player->handle_id = ps->handle_id;
		LBCopyChars(player->handle, ps->handle, 3);
		LBCopyChars(&handles.data[ps->handle_id*3], ps->handle, 3);
		SFX_NAVIGATE;
		save_eeprom(&handles);
		ps->select_state = CONFIRMED;
    e0dc:	82 e0       	ldi	r24, 0x02	; 2
    e0de:	8d 83       	std	Y+5, r24	; 0x05
    e0e0:	20 c0       	rjmp	.+64     	; 0xe122 <_handle_select_helper+0x1aa>
	}
	else if ((p->pressed & BTN_X) && (ps->select_state == EDITING))
    e0e2:	11 ff       	sbrs	r17, 1
    e0e4:	1e c0       	rjmp	.+60     	; 0xe122 <_handle_select_helper+0x1aa>
    e0e6:	8d 81       	ldd	r24, Y+5	; 0x05
    e0e8:	81 30       	cpi	r24, 0x01	; 1
    e0ea:	11 f4       	brne	.+4      	; 0xe0f0 <_handle_select_helper+0x178>
	{
		ps->select_state = SELECTING;
    e0ec:	1d 82       	std	Y+5, r1	; 0x05
    e0ee:	87 cf       	rjmp	.-242    	; 0xdffe <_handle_select_helper+0x86>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_X) && (ps->select_state == CONFIRMED))
    e0f0:	82 30       	cpi	r24, 0x02	; 2
    e0f2:	19 f4       	brne	.+6      	; 0xe0fa <_handle_select_helper+0x182>
	{
		ps->select_state = EDITING;
    e0f4:	81 e0       	ldi	r24, 0x01	; 1
    e0f6:	8d 83       	std	Y+5, r24	; 0x05
    e0f8:	82 cf       	rjmp	.-252    	; 0xdffe <_handle_select_helper+0x86>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_X))
	{
		SFX_NAVIGATE;
    e0fa:	2f ef       	ldi	r18, 0xFF	; 255
    e0fc:	47 e1       	ldi	r20, 0x17	; 23
    e0fe:	65 e0       	ldi	r22, 0x05	; 5
    e100:	84 e0       	ldi	r24, 0x04	; 4
    e102:	0e 94 a4 4b 	call	0x9748	; 0x9748 <TriggerNote>
		fade_through();
    e106:	0e 94 18 5b 	call	0xb630	; 0xb630 <fade_through>
		load_splash();
	}
}
    e10a:	df 91       	pop	r29
    e10c:	cf 91       	pop	r28
    e10e:	1f 91       	pop	r17
    e110:	0f 91       	pop	r16
    e112:	ff 90       	pop	r15
    e114:	ef 90       	pop	r14
    e116:	df 90       	pop	r13
    e118:	cf 90       	pop	r12
    e11a:	bf 90       	pop	r11
    e11c:	af 90       	pop	r10
	}
	else if ((p->pressed & BTN_X))
	{
		SFX_NAVIGATE;
		fade_through();
		load_splash();
    e11e:	0c 94 c5 69 	jmp	0xd38a	; 0xd38a <load_splash>
	}
}
    e122:	df 91       	pop	r29
    e124:	cf 91       	pop	r28
    e126:	1f 91       	pop	r17
    e128:	0f 91       	pop	r16
    e12a:	ff 90       	pop	r15
    e12c:	ef 90       	pop	r14
    e12e:	df 90       	pop	r13
    e130:	cf 90       	pop	r12
    e132:	bf 90       	pop	r11
    e134:	af 90       	pop	r10
    e136:	08 95       	ret

0000e138 <_handle_select_render_helper>:

void _handle_select_render_helper(HandleSelectState* ps, JoyPadState* p, u8 x_offset, u8 idx)
{
    e138:	af 92       	push	r10
    e13a:	bf 92       	push	r11
    e13c:	cf 92       	push	r12
    e13e:	df 92       	push	r13
    e140:	ef 92       	push	r14
    e142:	ff 92       	push	r15
    e144:	0f 93       	push	r16
    e146:	1f 93       	push	r17
    e148:	cf 93       	push	r28
    e14a:	df 93       	push	r29
    e14c:	00 d0       	rcall	.+0      	; 0xe14e <_handle_select_render_helper+0x16>
    e14e:	1f 92       	push	r1
    e150:	cd b7       	in	r28, 0x3d	; 61
    e152:	de b7       	in	r29, 0x3e	; 62
    e154:	7c 01       	movw	r14, r24
    e156:	b4 2e       	mov	r11, r20
    e158:	12 2f       	mov	r17, r18
	u8 tmp[3] = {' ', ' ', ' '};
    e15a:	80 e2       	ldi	r24, 0x20	; 32
    e15c:	89 83       	std	Y+1, r24	; 0x01
    e15e:	8a 83       	std	Y+2, r24	; 0x02
    e160:	8b 83       	std	Y+3, r24	; 0x03
	if (ps->select_state == SELECTING)
    e162:	f7 01       	movw	r30, r14
    e164:	85 81       	ldd	r24, Z+5	; 0x05
    e166:	81 11       	cpse	r24, r1
    e168:	1d c0       	rjmp	.+58     	; 0xe1a4 <_handle_select_render_helper+0x6c>
	{
		MapSprite2(idx, map_right_arrow, 0);
    e16a:	40 e0       	ldi	r20, 0x00	; 0
    e16c:	6f e5       	ldi	r22, 0x5F	; 95
    e16e:	7c e4       	ldi	r23, 0x4C	; 76
    e170:	82 2f       	mov	r24, r18
    e172:	0e 94 8a 55 	call	0xab14	; 0xab14 <MapSprite2>
		MapSprite2(idx+1, map_none, 0);
    e176:	40 e0       	ldi	r20, 0x00	; 0
    e178:	61 ea       	ldi	r22, 0xA1	; 161
    e17a:	7c e4       	ldi	r23, 0x4C	; 76
    e17c:	81 e0       	ldi	r24, 0x01	; 1
    e17e:	81 0f       	add	r24, r17
    e180:	0e 94 8a 55 	call	0xab14	; 0xab14 <MapSprite2>
		MoveSprite(idx, x_offset*8, (8 + ps->handle_id)*8, 1, 1);
    e184:	f7 01       	movw	r30, r14
    e186:	40 81       	ld	r20, Z
    e188:	44 0f       	add	r20, r20
    e18a:	44 0f       	add	r20, r20
    e18c:	44 0f       	add	r20, r20
    e18e:	40 5c       	subi	r20, 0xC0	; 192
    e190:	01 e0       	ldi	r16, 0x01	; 1
    e192:	21 e0       	ldi	r18, 0x01	; 1
    e194:	6b 2d       	mov	r22, r11
    e196:	66 0f       	add	r22, r22
    e198:	66 0f       	add	r22, r22
    e19a:	66 0f       	add	r22, r22
    e19c:	81 2f       	mov	r24, r17
    e19e:	0e 94 dc 55 	call	0xabb8	; 0xabb8 <MoveSprite>
    e1a2:	6f c0       	rjmp	.+222    	; 0xe282 <_handle_select_render_helper+0x14a>
	}
	else if (ps->select_state == EDITING)
    e1a4:	81 30       	cpi	r24, 0x01	; 1
    e1a6:	09 f0       	breq	.+2      	; 0xe1aa <_handle_select_render_helper+0x72>
    e1a8:	44 c0       	rjmp	.+136    	; 0xe232 <_handle_select_render_helper+0xfa>
	{
		MapSprite2(idx, map_down_arrow, 0);
    e1aa:	40 e0       	ldi	r20, 0x00	; 0
    e1ac:	6c e5       	ldi	r22, 0x5C	; 92
    e1ae:	7c e4       	ldi	r23, 0x4C	; 76
    e1b0:	82 2f       	mov	r24, r18
    e1b2:	0e 94 8a 55 	call	0xab14	; 0xab14 <MapSprite2>
		MapSprite2(idx+1, map_up_arrow, 0);
    e1b6:	aa 24       	eor	r10, r10
    e1b8:	a3 94       	inc	r10
    e1ba:	a1 0e       	add	r10, r17
    e1bc:	40 e0       	ldi	r20, 0x00	; 0
    e1be:	69 e5       	ldi	r22, 0x59	; 89
    e1c0:	7c e4       	ldi	r23, 0x4C	; 76
    e1c2:	8a 2d       	mov	r24, r10
    e1c4:	0e 94 8a 55 	call	0xab14	; 0xab14 <MapSprite2>
		MoveSprite(idx, (x_offset+5+ps->char_index)*8, (8 + ps->handle_id - 1)*8, 1, 1);
    e1c8:	cb 2c       	mov	r12, r11
    e1ca:	d1 2c       	mov	r13, r1
    e1cc:	f5 e0       	ldi	r31, 0x05	; 5
    e1ce:	cf 0e       	add	r12, r31
    e1d0:	d1 1c       	adc	r13, r1
    e1d2:	f7 01       	movw	r30, r14
    e1d4:	40 81       	ld	r20, Z
    e1d6:	44 0f       	add	r20, r20
    e1d8:	44 0f       	add	r20, r20
    e1da:	44 0f       	add	r20, r20
    e1dc:	48 5c       	subi	r20, 0xC8	; 200
    e1de:	84 81       	ldd	r24, Z+4	; 0x04
    e1e0:	b6 01       	movw	r22, r12
    e1e2:	68 0f       	add	r22, r24
    e1e4:	71 1d       	adc	r23, r1
    e1e6:	87 fd       	sbrc	r24, 7
    e1e8:	7a 95       	dec	r23
    e1ea:	66 0f       	add	r22, r22
    e1ec:	66 0f       	add	r22, r22
    e1ee:	66 0f       	add	r22, r22
    e1f0:	01 e0       	ldi	r16, 0x01	; 1
    e1f2:	21 e0       	ldi	r18, 0x01	; 1
    e1f4:	81 2f       	mov	r24, r17
    e1f6:	0e 94 dc 55 	call	0xabb8	; 0xabb8 <MoveSprite>
		MoveSprite(idx+1, (x_offset+5+ps->char_index)*8, (8 + ps->handle_id + 1)*8, 1, 1);
    e1fa:	f7 01       	movw	r30, r14
    e1fc:	40 81       	ld	r20, Z
    e1fe:	44 0f       	add	r20, r20
    e200:	44 0f       	add	r20, r20
    e202:	44 0f       	add	r20, r20
    e204:	48 5b       	subi	r20, 0xB8	; 184
    e206:	84 81       	ldd	r24, Z+4	; 0x04
    e208:	c8 0e       	add	r12, r24
    e20a:	d1 1c       	adc	r13, r1
    e20c:	87 fd       	sbrc	r24, 7
    e20e:	da 94       	dec	r13
    e210:	6c 2d       	mov	r22, r12
    e212:	66 0f       	add	r22, r22
    e214:	66 0f       	add	r22, r22
    e216:	66 0f       	add	r22, r22
    e218:	21 e0       	ldi	r18, 0x01	; 1
    e21a:	8a 2d       	mov	r24, r10
    e21c:	0e 94 dc 55 	call	0xabb8	; 0xabb8 <MoveSprite>
		LBCopyChars(tmp, ps->handle, 3);
    e220:	43 e0       	ldi	r20, 0x03	; 3
    e222:	b7 01       	movw	r22, r14
    e224:	6f 5f       	subi	r22, 0xFF	; 255
    e226:	7f 4f       	sbci	r23, 0xFF	; 255
    e228:	ce 01       	movw	r24, r28
    e22a:	01 96       	adiw	r24, 0x01	; 1
    e22c:	0e 94 e2 57 	call	0xafc4	; 0xafc4 <LBCopyChars>
    e230:	28 c0       	rjmp	.+80     	; 0xe282 <_handle_select_render_helper+0x14a>
	}
	else if (ps->select_state == CONFIRMED)
    e232:	82 30       	cpi	r24, 0x02	; 2
    e234:	31 f5       	brne	.+76     	; 0xe282 <_handle_select_render_helper+0x14a>
	{
		PrintChar(x_offset+6, 5, '(');
    e236:	c4 2e       	mov	r12, r20
    e238:	d1 2c       	mov	r13, r1
    e23a:	48 e2       	ldi	r20, 0x28	; 40
    e23c:	65 e0       	ldi	r22, 0x05	; 5
    e23e:	70 e0       	ldi	r23, 0x00	; 0
    e240:	c6 01       	movw	r24, r12
    e242:	06 96       	adiw	r24, 0x06	; 6
    e244:	0e 94 a6 56 	call	0xad4c	; 0xad4c <PrintChar>
		LBPrintStr(x_offset+7, 5, ps->handle, 3);
    e248:	23 e0       	ldi	r18, 0x03	; 3
    e24a:	a7 01       	movw	r20, r14
    e24c:	4f 5f       	subi	r20, 0xFF	; 255
    e24e:	5f 4f       	sbci	r21, 0xFF	; 255
    e250:	65 e0       	ldi	r22, 0x05	; 5
    e252:	87 e0       	ldi	r24, 0x07	; 7
    e254:	8b 0d       	add	r24, r11
    e256:	0e 94 ee 57 	call	0xafdc	; 0xafdc <LBPrintStr>
		PrintChar(x_offset+10, 5, ')');
    e25a:	49 e2       	ldi	r20, 0x29	; 41
    e25c:	65 e0       	ldi	r22, 0x05	; 5
    e25e:	70 e0       	ldi	r23, 0x00	; 0
    e260:	c6 01       	movw	r24, r12
    e262:	0a 96       	adiw	r24, 0x0a	; 10
    e264:	0e 94 a6 56 	call	0xad4c	; 0xad4c <PrintChar>
		MapSprite2(idx, map_none, 0);
    e268:	40 e0       	ldi	r20, 0x00	; 0
    e26a:	61 ea       	ldi	r22, 0xA1	; 161
    e26c:	7c e4       	ldi	r23, 0x4C	; 76
    e26e:	81 2f       	mov	r24, r17
    e270:	0e 94 8a 55 	call	0xab14	; 0xab14 <MapSprite2>
		MapSprite2(idx+1, map_none, 0);
    e274:	40 e0       	ldi	r20, 0x00	; 0
    e276:	61 ea       	ldi	r22, 0xA1	; 161
    e278:	7c e4       	ldi	r23, 0x4C	; 76
    e27a:	81 e0       	ldi	r24, 0x01	; 1
    e27c:	81 0f       	add	r24, r17
    e27e:	0e 94 8a 55 	call	0xab14	; 0xab14 <MapSprite2>
	}
	LBPrintStr(x_offset+5, (8 + ps->handle_id), tmp, 3);
    e282:	f7 01       	movw	r30, r14
    e284:	60 81       	ld	r22, Z
    e286:	68 5f       	subi	r22, 0xF8	; 248
    e288:	23 e0       	ldi	r18, 0x03	; 3
    e28a:	ae 01       	movw	r20, r28
    e28c:	4f 5f       	subi	r20, 0xFF	; 255
    e28e:	5f 4f       	sbci	r21, 0xFF	; 255
    e290:	85 e0       	ldi	r24, 0x05	; 5
    e292:	8b 0d       	add	r24, r11
    e294:	0e 94 ee 57 	call	0xafdc	; 0xafdc <LBPrintStr>
}
    e298:	0f 90       	pop	r0
    e29a:	0f 90       	pop	r0
    e29c:	0f 90       	pop	r0
    e29e:	df 91       	pop	r29
    e2a0:	cf 91       	pop	r28
    e2a2:	1f 91       	pop	r17
    e2a4:	0f 91       	pop	r16
    e2a6:	ff 90       	pop	r15
    e2a8:	ef 90       	pop	r14
    e2aa:	df 90       	pop	r13
    e2ac:	cf 90       	pop	r12
    e2ae:	bf 90       	pop	r11
    e2b0:	af 90       	pop	r10
    e2b2:	08 95       	ret

0000e2b4 <load_handle_select>:

void load_handle_select()
{
    e2b4:	8f 92       	push	r8
    e2b6:	9f 92       	push	r9
    e2b8:	af 92       	push	r10
    e2ba:	bf 92       	push	r11
    e2bc:	cf 92       	push	r12
    e2be:	df 92       	push	r13
    e2c0:	ef 92       	push	r14
    e2c2:	ff 92       	push	r15
    e2c4:	0f 93       	push	r16
    e2c6:	1f 93       	push	r17
    e2c8:	cf 93       	push	r28
    e2ca:	df 93       	push	r29
	game.current_screen = HANDLE_SELECT;
    e2cc:	82 e0       	ldi	r24, 0x02	; 2
    e2ce:	80 93 12 0c 	sts	0x0C12, r24
	clear_sprites();
    e2d2:	0e 94 22 5b 	call	0xb644	; 0xb644 <clear_sprites>
	DrawMap2(3, 4, map_green_tank);
    e2d6:	4f ed       	ldi	r20, 0xDF	; 223
    e2d8:	55 e8       	ldi	r21, 0x85	; 133
    e2da:	64 e0       	ldi	r22, 0x04	; 4
    e2dc:	83 e0       	ldi	r24, 0x03	; 3
    e2de:	0e 94 0b 56 	call	0xac16	; 0xac16 <DrawMap>
	DrawMap2(20, 4, map_blue_tank);
    e2e2:	49 ed       	ldi	r20, 0xD9	; 217
    e2e4:	55 e8       	ldi	r21, 0x85	; 133
    e2e6:	64 e0       	ldi	r22, 0x04	; 4
    e2e8:	84 e1       	ldi	r24, 0x14	; 20
    e2ea:	0e 94 0b 56 	call	0xac16	; 0xac16 <DrawMap>
	Print(9, 1, (char*) strHandlesTitle);
    e2ee:	4c e5       	ldi	r20, 0x5C	; 92
    e2f0:	5b e0       	ldi	r21, 0x0B	; 11
    e2f2:	61 e0       	ldi	r22, 0x01	; 1
    e2f4:	70 e0       	ldi	r23, 0x00	; 0
    e2f6:	89 e0       	ldi	r24, 0x09	; 9
    e2f8:	90 e0       	ldi	r25, 0x00	; 0
    e2fa:	0e 94 8b 56 	call	0xad16	; 0xad16 <Print>
	Print(6, 5, (char*) strPlayer1);
    e2fe:	4b e4       	ldi	r20, 0x4B	; 75
    e300:	5b e0       	ldi	r21, 0x0B	; 11
    e302:	65 e0       	ldi	r22, 0x05	; 5
    e304:	70 e0       	ldi	r23, 0x00	; 0
    e306:	86 e0       	ldi	r24, 0x06	; 6
    e308:	90 e0       	ldi	r25, 0x00	; 0
    e30a:	0e 94 8b 56 	call	0xad16	; 0xad16 <Print>
	Print(23, 5, (char*) strPlayer2);
    e30e:	48 e4       	ldi	r20, 0x48	; 72
    e310:	5b e0       	ldi	r21, 0x0B	; 11
    e312:	65 e0       	ldi	r22, 0x05	; 5
    e314:	70 e0       	ldi	r23, 0x00	; 0
    e316:	87 e1       	ldi	r24, 0x17	; 23
    e318:	90 e0       	ldi	r25, 0x00	; 0
    e31a:	0e 94 8b 56 	call	0xad16	; 0xad16 <Print>
    e31e:	84 ef       	ldi	r24, 0xF4	; 244
    e320:	e8 2e       	mov	r14, r24
    e322:	8b e0       	ldi	r24, 0x0B	; 11
    e324:	f8 2e       	mov	r15, r24
	for (int i = 0; i < 27; i += 1)
    e326:	c0 e0       	ldi	r28, 0x00	; 0
    e328:	d0 e0       	ldi	r29, 0x00	; 0
	{
		PrintChar((i % 3) + 3, 8 + (i / 3), handles.data[i]);
    e32a:	93 e0       	ldi	r25, 0x03	; 3
    e32c:	a9 2e       	mov	r10, r25
    e32e:	b1 2c       	mov	r11, r1
    e330:	67 01       	movw	r12, r14
    e332:	ce 01       	movw	r24, r28
    e334:	b5 01       	movw	r22, r10
    e336:	0e 94 85 76 	call	0xed0a	; 0xed0a <__divmodhi4>
    e33a:	4c 01       	movw	r8, r24
    e33c:	8b 01       	movw	r16, r22
    e33e:	08 5f       	subi	r16, 0xF8	; 248
    e340:	1f 4f       	sbci	r17, 0xFF	; 255
    e342:	f7 01       	movw	r30, r14
    e344:	41 91       	ld	r20, Z+
    e346:	7f 01       	movw	r14, r30
    e348:	b8 01       	movw	r22, r16
    e34a:	03 96       	adiw	r24, 0x03	; 3
    e34c:	0e 94 a6 56 	call	0xad4c	; 0xad4c <PrintChar>
		PrintChar(20 + (i % 3), 8 + (i / 3), handles.data[i]);
    e350:	f6 01       	movw	r30, r12
    e352:	40 81       	ld	r20, Z
    e354:	b8 01       	movw	r22, r16
    e356:	c4 01       	movw	r24, r8
    e358:	44 96       	adiw	r24, 0x14	; 20
    e35a:	0e 94 a6 56 	call	0xad4c	; 0xad4c <PrintChar>
	DrawMap2(3, 4, map_green_tank);
	DrawMap2(20, 4, map_blue_tank);
	Print(9, 1, (char*) strHandlesTitle);
	Print(6, 5, (char*) strPlayer1);
	Print(23, 5, (char*) strPlayer2);
	for (int i = 0; i < 27; i += 1)
    e35e:	21 96       	adiw	r28, 0x01	; 1
    e360:	cb 31       	cpi	r28, 0x1B	; 27
    e362:	d1 05       	cpc	r29, r1
    e364:	29 f7       	brne	.-54     	; 0xe330 <load_handle_select+0x7c>
	{
		PrintChar((i % 3) + 3, 8 + (i / 3), handles.data[i]);
		PrintChar(20 + (i % 3), 8 + (i / 3), handles.data[i]);
	}
	Print(5, 21, (char*) strSelectHandle);
    e366:	47 e3       	ldi	r20, 0x37	; 55
    e368:	5b e0       	ldi	r21, 0x0B	; 11
    e36a:	65 e1       	ldi	r22, 0x15	; 21
    e36c:	70 e0       	ldi	r23, 0x00	; 0
    e36e:	85 e0       	ldi	r24, 0x05	; 5
    e370:	90 e0       	ldi	r25, 0x00	; 0
    e372:	0e 94 8b 56 	call	0xad16	; 0xad16 <Print>
	Print(5, 22, (char*) strConfirmHandle);
    e376:	45 e2       	ldi	r20, 0x25	; 37
    e378:	5b e0       	ldi	r21, 0x0B	; 11
    e37a:	66 e1       	ldi	r22, 0x16	; 22
    e37c:	70 e0       	ldi	r23, 0x00	; 0
    e37e:	85 e0       	ldi	r24, 0x05	; 5
    e380:	90 e0       	ldi	r25, 0x00	; 0
    e382:	0e 94 8b 56 	call	0xad16	; 0xad16 <Print>
	Print(5, 23, (char*) strCancelHandle);
    e386:	4a e1       	ldi	r20, 0x1A	; 26
    e388:	5b e0       	ldi	r21, 0x0B	; 11
    e38a:	67 e1       	ldi	r22, 0x17	; 23
    e38c:	70 e0       	ldi	r23, 0x00	; 0
    e38e:	85 e0       	ldi	r24, 0x05	; 5
    e390:	90 e0       	ldi	r25, 0x00	; 0
    e392:	0e 94 8b 56 	call	0xad16	; 0xad16 <Print>
	Print(5, 24, (char*) strChangeHandle);
    e396:	42 ef       	ldi	r20, 0xF2	; 242
    e398:	5a e0       	ldi	r21, 0x0A	; 10
    e39a:	68 e1       	ldi	r22, 0x18	; 24
    e39c:	70 e0       	ldi	r23, 0x00	; 0
    e39e:	85 e0       	ldi	r24, 0x05	; 5
    e3a0:	90 e0       	ldi	r25, 0x00	; 0
}
    e3a2:	df 91       	pop	r29
    e3a4:	cf 91       	pop	r28
    e3a6:	1f 91       	pop	r17
    e3a8:	0f 91       	pop	r16
    e3aa:	ff 90       	pop	r15
    e3ac:	ef 90       	pop	r14
    e3ae:	df 90       	pop	r13
    e3b0:	cf 90       	pop	r12
    e3b2:	bf 90       	pop	r11
    e3b4:	af 90       	pop	r10
    e3b6:	9f 90       	pop	r9
    e3b8:	8f 90       	pop	r8
		PrintChar(20 + (i % 3), 8 + (i / 3), handles.data[i]);
	}
	Print(5, 21, (char*) strSelectHandle);
	Print(5, 22, (char*) strConfirmHandle);
	Print(5, 23, (char*) strCancelHandle);
	Print(5, 24, (char*) strChangeHandle);
    e3ba:	0c 94 8b 56 	jmp	0xad16	; 0xad16 <Print>

0000e3be <update_splash>:

void update_splash(JoyPadState* p1, JoyPadState* p2)
/*
 * Splash or title screen
 */
{
    e3be:	0f 93       	push	r16
    e3c0:	cf 93       	push	r28
    e3c2:	df 93       	push	r29
    e3c4:	ec 01       	movw	r28, r24
	static u16 demo_counter = 0;
	static u8 demo_choice = 0;
	
	// Render
	switch (game.selection)
    e3c6:	90 91 1e 0c 	lds	r25, 0x0C1E
    e3ca:	91 30       	cpi	r25, 0x01	; 1
    e3cc:	41 f0       	breq	.+16     	; 0xe3de <update_splash+0x20>
    e3ce:	92 30       	cpi	r25, 0x02	; 2
    e3d0:	51 f0       	breq	.+20     	; 0xe3e6 <update_splash+0x28>
    e3d2:	91 11       	cpse	r25, r1
    e3d4:	0f c0       	rjmp	.+30     	; 0xe3f4 <update_splash+0x36>
	{
		case PVCPU:
			MoveSprite(0, 6*8, 13*8, 1, 1);
    e3d6:	01 e0       	ldi	r16, 0x01	; 1
    e3d8:	21 e0       	ldi	r18, 0x01	; 1
    e3da:	48 e6       	ldi	r20, 0x68	; 104
    e3dc:	07 c0       	rjmp	.+14     	; 0xe3ec <update_splash+0x2e>
			break;
		case PVP:
			MoveSprite(0, 6*8, 14*8, 1, 1);
    e3de:	01 e0       	ldi	r16, 0x01	; 1
    e3e0:	21 e0       	ldi	r18, 0x01	; 1
    e3e2:	40 e7       	ldi	r20, 0x70	; 112
    e3e4:	03 c0       	rjmp	.+6      	; 0xe3ec <update_splash+0x2e>
			break;
		case TR:
			MoveSprite(0, 6*8, 15*8, 1, 1);
    e3e6:	01 e0       	ldi	r16, 0x01	; 1
    e3e8:	21 e0       	ldi	r18, 0x01	; 1
    e3ea:	48 e7       	ldi	r20, 0x78	; 120
    e3ec:	60 e3       	ldi	r22, 0x30	; 48
    e3ee:	80 e0       	ldi	r24, 0x00	; 0
    e3f0:	0e 94 dc 55 	call	0xabb8	; 0xabb8 <MoveSprite>
			break;
	}
	Print(6, 21, (char*) strSelectHandle);
    e3f4:	47 e3       	ldi	r20, 0x37	; 55
    e3f6:	5b e0       	ldi	r21, 0x0B	; 11
    e3f8:	65 e1       	ldi	r22, 0x15	; 21
    e3fa:	70 e0       	ldi	r23, 0x00	; 0
    e3fc:	86 e0       	ldi	r24, 0x06	; 6
    e3fe:	90 e0       	ldi	r25, 0x00	; 0
    e400:	0e 94 8b 56 	call	0xad16	; 0xad16 <Print>

	// Update
	if (p1->pressed) demo_counter = 0;
    e404:	28 81       	ld	r18, Y
    e406:	39 81       	ldd	r19, Y+1	; 0x01
    e408:	21 15       	cp	r18, r1
    e40a:	31 05       	cpc	r19, r1
    e40c:	21 f0       	breq	.+8      	; 0xe416 <update_splash+0x58>
    e40e:	10 92 36 0b 	sts	0x0B36, r1
    e412:	10 92 35 0b 	sts	0x0B35, r1
	
	if (p1->pressed & BTN_UP)
    e416:	24 ff       	sbrs	r18, 4
    e418:	0e c0       	rjmp	.+28     	; 0xe436 <update_splash+0x78>
	{
		game.selection--;
    e41a:	80 91 1e 0c 	lds	r24, 0x0C1E
    e41e:	81 50       	subi	r24, 0x01	; 1
		if (game.selection < PVCPU) game.selection = PVCPU;
    e420:	87 ff       	sbrs	r24, 7
    e422:	11 c0       	rjmp	.+34     	; 0xe446 <update_splash+0x88>
    e424:	10 92 1e 0c 	sts	0x0C1E, r1
		SFX_NAVIGATE;
    e428:	2f ef       	ldi	r18, 0xFF	; 255
    e42a:	47 e1       	ldi	r20, 0x17	; 23
    e42c:	65 e0       	ldi	r22, 0x05	; 5
    e42e:	84 e0       	ldi	r24, 0x04	; 4
    e430:	0e 94 a4 4b 	call	0x9748	; 0x9748 <TriggerNote>
    e434:	91 c0       	rjmp	.+290    	; 0xe558 <update_splash+0x19a>
	}
	else if (p1->pressed & BTN_DOWN)
    e436:	25 ff       	sbrs	r18, 5
    e438:	09 c0       	rjmp	.+18     	; 0xe44c <update_splash+0x8e>
	{
		game.selection++;
    e43a:	80 91 1e 0c 	lds	r24, 0x0C1E
    e43e:	8f 5f       	subi	r24, 0xFF	; 255
		if (game.selection > TR) game.selection = TR;
    e440:	83 30       	cpi	r24, 0x03	; 3
    e442:	0c f0       	brlt	.+2      	; 0xe446 <update_splash+0x88>
    e444:	82 e0       	ldi	r24, 0x02	; 2
    e446:	80 93 1e 0c 	sts	0x0C1E, r24
    e44a:	ee cf       	rjmp	.-36     	; 0xe428 <update_splash+0x6a>
		SFX_NAVIGATE;
	}
	else if (select_pressed(p1) && ((game.selection == PVCPU) || (game.selection == PVP)))
    e44c:	ce 01       	movw	r24, r28
    e44e:	0e 94 f5 69 	call	0xd3ea	; 0xd3ea <select_pressed>
    e452:	88 23       	and	r24, r24
    e454:	a1 f1       	breq	.+104    	; 0xe4be <update_splash+0x100>
    e456:	80 91 1e 0c 	lds	r24, 0x0C1E
    e45a:	82 30       	cpi	r24, 0x02	; 2
    e45c:	c8 f4       	brcc	.+50     	; 0xe490 <update_splash+0xd2>
	{
		demo_counter = 0;
    e45e:	10 92 36 0b 	sts	0x0B36, r1
    e462:	10 92 35 0b 	sts	0x0B35, r1
		p1s.select_state = SELECTING;
    e466:	10 92 31 0b 	sts	0x0B31, r1
		p2s.select_state = SELECTING;
    e46a:	10 92 2b 0b 	sts	0x0B2B, r1
		SFX_NAVIGATE;
    e46e:	2f ef       	ldi	r18, 0xFF	; 255
    e470:	47 e1       	ldi	r20, 0x17	; 23
    e472:	65 e0       	ldi	r22, 0x05	; 5
    e474:	84 e0       	ldi	r24, 0x04	; 4
    e476:	0e 94 a4 4b 	call	0x9748	; 0x9748 <TriggerNote>
		fade_through();
    e47a:	0e 94 18 5b 	call	0xb630	; 0xb630 <fade_through>
		load_eeprom(&handles);
    e47e:	82 ef       	ldi	r24, 0xF2	; 242
    e480:	9b e0       	ldi	r25, 0x0B	; 11
    e482:	0e 94 06 5b 	call	0xb60c	; 0xb60c <load_eeprom>
		demo_choice++;
		return;
		
	}
	demo_counter++;
}
    e486:	df 91       	pop	r29
    e488:	cf 91       	pop	r28
    e48a:	0f 91       	pop	r16
		p1s.select_state = SELECTING;
		p2s.select_state = SELECTING;
		SFX_NAVIGATE;
		fade_through();
		load_eeprom(&handles);
		load_handle_select();
    e48c:	0c 94 5a 71 	jmp	0xe2b4	; 0xe2b4 <load_handle_select>
		return;
	}
	else if (select_pressed(p1) && (game.selection == TR))
    e490:	82 30       	cpi	r24, 0x02	; 2
    e492:	a9 f4       	brne	.+42     	; 0xe4be <update_splash+0x100>
	{
		demo_counter = 0;
    e494:	10 92 36 0b 	sts	0x0B36, r1
    e498:	10 92 35 0b 	sts	0x0B35, r1
		SFX_NAVIGATE;
    e49c:	2f ef       	ldi	r18, 0xFF	; 255
    e49e:	47 e1       	ldi	r20, 0x17	; 23
    e4a0:	65 e0       	ldi	r22, 0x05	; 5
    e4a2:	84 e0       	ldi	r24, 0x04	; 4
    e4a4:	0e 94 a4 4b 	call	0x9748	; 0x9748 <TriggerNote>
		fade_through();
    e4a8:	0e 94 18 5b 	call	0xb630	; 0xb630 <fade_through>
		load_eeprom(&scores);
    e4ac:	8b ec       	ldi	r24, 0xCB	; 203
    e4ae:	9b e0       	ldi	r25, 0x0B	; 11
    e4b0:	0e 94 06 5b 	call	0xb60c	; 0xb60c <load_eeprom>
		demo_choice++;
		return;
		
	}
	demo_counter++;
}
    e4b4:	df 91       	pop	r29
    e4b6:	cf 91       	pop	r28
    e4b8:	0f 91       	pop	r16
	{
		demo_counter = 0;
		SFX_NAVIGATE;
		fade_through();
		load_eeprom(&scores);
		load_tank_rank();
    e4ba:	0c 94 ff 69 	jmp	0xd3fe	; 0xd3fe <load_tank_rank>
		return;
	}
	else if (demo_counter >= DEMO_WAIT)
    e4be:	80 91 35 0b 	lds	r24, 0x0B35
    e4c2:	90 91 36 0b 	lds	r25, 0x0B36
    e4c6:	88 35       	cpi	r24, 0x58	; 88
    e4c8:	92 40       	sbci	r25, 0x02	; 2
    e4ca:	08 f4       	brcc	.+2      	; 0xe4ce <update_splash+0x110>
    e4cc:	45 c0       	rjmp	.+138    	; 0xe558 <update_splash+0x19a>
	{
		demo_counter = 0;
    e4ce:	10 92 36 0b 	sts	0x0B36, r1
    e4d2:	10 92 35 0b 	sts	0x0B35, r1
		if (demo_choice % 2 == 0)
    e4d6:	80 91 34 0b 	lds	r24, 0x0B34
    e4da:	80 fd       	sbrc	r24, 0
    e4dc:	29 c0       	rjmp	.+82     	; 0xe530 <update_splash+0x172>
		{
			game.selection = CPUVCPU;
    e4de:	83 e0       	ldi	r24, 0x03	; 3
    e4e0:	80 93 1e 0c 	sts	0x0C1E, r24
			player1.handle_id = 9;
    e4e4:	c9 e0       	ldi	r28, 0x09	; 9
    e4e6:	c0 93 47 0c 	sts	0x0C47, r28
			LBCopyChars(player1.handle, &handles.data[9*3], 3);
    e4ea:	43 e0       	ldi	r20, 0x03	; 3
    e4ec:	6f e0       	ldi	r22, 0x0F	; 15
    e4ee:	7c e0       	ldi	r23, 0x0C	; 12
    e4f0:	88 e4       	ldi	r24, 0x48	; 72
    e4f2:	9c e0       	ldi	r25, 0x0C	; 12
    e4f4:	0e 94 e2 57 	call	0xafc4	; 0xafc4 <LBCopyChars>
			player2.handle_id = 9;
    e4f8:	c0 93 b5 0f 	sts	0x0FB5, r28
			LBCopyChars(player2.handle, &handles.data[9*3], 3);
    e4fc:	43 e0       	ldi	r20, 0x03	; 3
    e4fe:	6f e0       	ldi	r22, 0x0F	; 15
    e500:	7c e0       	ldi	r23, 0x0C	; 12
    e502:	86 eb       	ldi	r24, 0xB6	; 182
    e504:	9f e0       	ldi	r25, 0x0F	; 15
    e506:	0e 94 e2 57 	call	0xafc4	; 0xafc4 <LBCopyChars>
			SFX_NAVIGATE;
    e50a:	2f ef       	ldi	r18, 0xFF	; 255
    e50c:	47 e1       	ldi	r20, 0x17	; 23
    e50e:	65 e0       	ldi	r22, 0x05	; 5
    e510:	84 e0       	ldi	r24, 0x04	; 4
    e512:	0e 94 a4 4b 	call	0x9748	; 0x9748 <TriggerNote>
			clear_sprites();
    e516:	0e 94 22 5b 	call	0xb644	; 0xb644 <clear_sprites>
			fade_through();
    e51a:	0e 94 18 5b 	call	0xb630	; 0xb630 <fade_through>
			level_transition(LBRandom(0, 10));
    e51e:	6a e0       	ldi	r22, 0x0A	; 10
    e520:	70 e0       	ldi	r23, 0x00	; 0
    e522:	80 e0       	ldi	r24, 0x00	; 0
    e524:	90 e0       	ldi	r25, 0x00	; 0
    e526:	0e 94 1f 59 	call	0xb23e	; 0xb23e <LBRandom>
    e52a:	0e 94 d4 67 	call	0xcfa8	; 0xcfa8 <level_transition>
    e52e:	0e c0       	rjmp	.+28     	; 0xe54c <update_splash+0x18e>
		}
		else
		{
			SFX_NAVIGATE;
    e530:	2f ef       	ldi	r18, 0xFF	; 255
    e532:	47 e1       	ldi	r20, 0x17	; 23
    e534:	65 e0       	ldi	r22, 0x05	; 5
    e536:	84 e0       	ldi	r24, 0x04	; 4
    e538:	0e 94 a4 4b 	call	0x9748	; 0x9748 <TriggerNote>
			fade_through();
    e53c:	0e 94 18 5b 	call	0xb630	; 0xb630 <fade_through>
			load_eeprom(&scores);
    e540:	8b ec       	ldi	r24, 0xCB	; 203
    e542:	9b e0       	ldi	r25, 0x0B	; 11
    e544:	0e 94 06 5b 	call	0xb60c	; 0xb60c <load_eeprom>
			load_tank_rank();
    e548:	0e 94 ff 69 	call	0xd3fe	; 0xd3fe <load_tank_rank>
		}
		demo_choice++;
    e54c:	80 91 34 0b 	lds	r24, 0x0B34
    e550:	8f 5f       	subi	r24, 0xFF	; 255
    e552:	80 93 34 0b 	sts	0x0B34, r24
		return;
    e556:	09 c0       	rjmp	.+18     	; 0xe56a <update_splash+0x1ac>
		
	}
	demo_counter++;
    e558:	80 91 35 0b 	lds	r24, 0x0B35
    e55c:	90 91 36 0b 	lds	r25, 0x0B36
    e560:	01 96       	adiw	r24, 0x01	; 1
    e562:	90 93 36 0b 	sts	0x0B36, r25
    e566:	80 93 35 0b 	sts	0x0B35, r24
}
    e56a:	df 91       	pop	r29
    e56c:	cf 91       	pop	r28
    e56e:	0f 91       	pop	r16
    e570:	08 95       	ret

0000e572 <update_handle_select>:
	Print(5, 23, (char*) strCancelHandle);
	Print(5, 24, (char*) strChangeHandle);
}

void update_handle_select(JoyPadState* p1, JoyPadState* p2)
{
    e572:	0f 93       	push	r16
    e574:	1f 93       	push	r17
    e576:	cf 93       	push	r28
    e578:	df 93       	push	r29
    e57a:	8c 01       	movw	r16, r24
    e57c:	eb 01       	movw	r28, r22
	u8 start_game = 0;

	// Render
	_handle_select_render_helper(&p1s, p1, 2, 6);
    e57e:	26 e0       	ldi	r18, 0x06	; 6
    e580:	42 e0       	ldi	r20, 0x02	; 2
    e582:	bc 01       	movw	r22, r24
    e584:	8c e2       	ldi	r24, 0x2C	; 44
    e586:	9b e0       	ldi	r25, 0x0B	; 11
    e588:	0e 94 9c 70 	call	0xe138	; 0xe138 <_handle_select_render_helper>
	if (game.selection == PVP)
    e58c:	80 91 1e 0c 	lds	r24, 0x0C1E
    e590:	81 30       	cpi	r24, 0x01	; 1
    e592:	39 f4       	brne	.+14     	; 0xe5a2 <update_handle_select+0x30>
	{
		_handle_select_render_helper(&p2s, p2, 19, 8);
    e594:	28 e0       	ldi	r18, 0x08	; 8
    e596:	43 e1       	ldi	r20, 0x13	; 19
    e598:	be 01       	movw	r22, r28
    e59a:	86 e2       	ldi	r24, 0x26	; 38
    e59c:	9b e0       	ldi	r25, 0x0B	; 11
    e59e:	0e 94 9c 70 	call	0xe138	; 0xe138 <_handle_select_render_helper>
	}

	// Update
	_handle_select_helper(&p1s, p1, &player1);
    e5a2:	4c e3       	ldi	r20, 0x3C	; 60
    e5a4:	5c e0       	ldi	r21, 0x0C	; 12
    e5a6:	b8 01       	movw	r22, r16
    e5a8:	8c e2       	ldi	r24, 0x2C	; 44
    e5aa:	9b e0       	ldi	r25, 0x0B	; 11
    e5ac:	0e 94 bc 6f 	call	0xdf78	; 0xdf78 <_handle_select_helper>
	if (p1s.select_state == CONFIRMED) start_game = 1;
    e5b0:	10 91 31 0b 	lds	r17, 0x0B31
	if (game.selection == PVP)
    e5b4:	80 91 1e 0c 	lds	r24, 0x0C1E
    e5b8:	81 30       	cpi	r24, 0x01	; 1
    e5ba:	19 f0       	breq	.+6      	; 0xe5c2 <update_handle_select+0x50>
	{
		_handle_select_helper(&p2s, p2, &player2);
		if (p2s.select_state != CONFIRMED) start_game = 0;
	}
	if (start_game)
    e5bc:	12 30       	cpi	r17, 0x02	; 2
    e5be:	69 f0       	breq	.+26     	; 0xe5da <update_handle_select+0x68>
    e5c0:	21 c0       	rjmp	.+66     	; 0xe604 <update_handle_select+0x92>
	// Update
	_handle_select_helper(&p1s, p1, &player1);
	if (p1s.select_state == CONFIRMED) start_game = 1;
	if (game.selection == PVP)
	{
		_handle_select_helper(&p2s, p2, &player2);
    e5c2:	4a ea       	ldi	r20, 0xAA	; 170
    e5c4:	5f e0       	ldi	r21, 0x0F	; 15
    e5c6:	be 01       	movw	r22, r28
    e5c8:	86 e2       	ldi	r24, 0x26	; 38
    e5ca:	9b e0       	ldi	r25, 0x0B	; 11
    e5cc:	0e 94 bc 6f 	call	0xdf78	; 0xdf78 <_handle_select_helper>
		if (p2s.select_state != CONFIRMED) start_game = 0;
    e5d0:	80 91 2b 0b 	lds	r24, 0x0B2B
    e5d4:	82 30       	cpi	r24, 0x02	; 2
    e5d6:	b1 f4       	brne	.+44     	; 0xe604 <update_handle_select+0x92>
    e5d8:	f1 cf       	rjmp	.-30     	; 0xe5bc <update_handle_select+0x4a>
	}
	if (start_game)
	{
		if (game.selection == PVCPU)
    e5da:	80 91 1e 0c 	lds	r24, 0x0C1E
    e5de:	81 11       	cpse	r24, r1
    e5e0:	0a c0       	rjmp	.+20     	; 0xe5f6 <update_handle_select+0x84>
		{
			player2.handle_id = 9;
    e5e2:	89 e0       	ldi	r24, 0x09	; 9
    e5e4:	80 93 b5 0f 	sts	0x0FB5, r24
			LBCopyChars(player2.handle, &handles.data[9*3], 3);
    e5e8:	43 e0       	ldi	r20, 0x03	; 3
    e5ea:	6f e0       	ldi	r22, 0x0F	; 15
    e5ec:	7c e0       	ldi	r23, 0x0C	; 12
    e5ee:	86 eb       	ldi	r24, 0xB6	; 182
    e5f0:	9f e0       	ldi	r25, 0x0F	; 15
    e5f2:	0e 94 e2 57 	call	0xafc4	; 0xafc4 <LBCopyChars>
		}
		level_transition(0);
    e5f6:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    e5f8:	df 91       	pop	r29
    e5fa:	cf 91       	pop	r28
    e5fc:	1f 91       	pop	r17
    e5fe:	0f 91       	pop	r16
		if (game.selection == PVCPU)
		{
			player2.handle_id = 9;
			LBCopyChars(player2.handle, &handles.data[9*3], 3);
		}
		level_transition(0);
    e600:	0c 94 d4 67 	jmp	0xcfa8	; 0xcfa8 <level_transition>
	}
}
    e604:	df 91       	pop	r29
    e606:	cf 91       	pop	r28
    e608:	1f 91       	pop	r17
    e60a:	0f 91       	pop	r16
    e60c:	08 95       	ret

0000e60e <button_map>:

u16 button_map(u16 number)
{
	if (number == 0) return BTN_UP;
    e60e:	00 97       	sbiw	r24, 0x00	; 0
    e610:	41 f0       	breq	.+16     	; 0xe622 <button_map+0x14>
	if (number == 1) return BTN_DOWN;
    e612:	81 30       	cpi	r24, 0x01	; 1
    e614:	91 05       	cpc	r25, r1
    e616:	41 f0       	breq	.+16     	; 0xe628 <button_map+0x1a>
	if (number == 2) return BTN_LEFT;
    e618:	82 30       	cpi	r24, 0x02	; 2
    e61a:	91 05       	cpc	r25, r1
    e61c:	41 f0       	breq	.+16     	; 0xe62e <button_map+0x20>
	if (number == 3) return BTN_RIGHT;
    e61e:	03 97       	sbiw	r24, 0x03	; 3
    e620:	49 f0       	breq	.+18     	; 0xe634 <button_map+0x26>
	}
}

u16 button_map(u16 number)
{
	if (number == 0) return BTN_UP;
    e622:	80 e1       	ldi	r24, 0x10	; 16
    e624:	90 e0       	ldi	r25, 0x00	; 0
    e626:	08 95       	ret
	if (number == 1) return BTN_DOWN;
    e628:	80 e2       	ldi	r24, 0x20	; 32
    e62a:	90 e0       	ldi	r25, 0x00	; 0
    e62c:	08 95       	ret
	if (number == 2) return BTN_LEFT;
    e62e:	80 e4       	ldi	r24, 0x40	; 64
    e630:	90 e0       	ldi	r25, 0x00	; 0
    e632:	08 95       	ret
	if (number == 3) return BTN_RIGHT;
    e634:	80 e8       	ldi	r24, 0x80	; 128
    e636:	90 e0       	ldi	r25, 0x00	; 0
	return BTN_UP;
}
    e638:	08 95       	ret

0000e63a <crash_and_turn>:

char crash_and_turn(char current_x, char current_y, u8 recoiled, Player* player, JoyPadState* p)
/* 
 * Move in the direction of the goal. Move along the wall using left hand rule when hitting one
 */
{	
    e63a:	8f 92       	push	r8
    e63c:	9f 92       	push	r9
    e63e:	af 92       	push	r10
    e640:	bf 92       	push	r11
    e642:	cf 92       	push	r12
    e644:	df 92       	push	r13
    e646:	ef 92       	push	r14
    e648:	ff 92       	push	r15
    e64a:	0f 93       	push	r16
    e64c:	1f 93       	push	r17
    e64e:	cf 93       	push	r28
    e650:	df 93       	push	r29
    e652:	f8 2e       	mov	r15, r24
    e654:	e6 2e       	mov	r14, r22
    e656:	d4 2e       	mov	r13, r20
    e658:	e9 01       	movw	r28, r18
	if (player->feeling_my_way)
    e65a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    e65c:	88 23       	and	r24, r24
    e65e:	09 f4       	brne	.+2      	; 0xe662 <crash_and_turn+0x28>
    e660:	a8 c0       	rjmp	.+336    	; 0xe7b2 <crash_and_turn+0x178>
	{
		if ((p->held & BTN_UP) && !(solid_tile(current_y * 30 + current_x - 1) || solid_tile((current_y+1) * 30 + current_x - 1) || solid_tile((current_y+2) * 30 + current_x - 1)))
    e662:	f8 01       	movw	r30, r16
    e664:	c4 80       	ldd	r12, Z+4	; 0x04
    e666:	c4 fe       	sbrs	r12, 4
    e668:	23 c0       	rjmp	.+70     	; 0xe6b0 <crash_and_turn+0x76>
    e66a:	fe e1       	ldi	r31, 0x1E	; 30
    e66c:	6f 02       	muls	r22, r31
    e66e:	40 01       	movw	r8, r0
    e670:	11 24       	eor	r1, r1
    e672:	af 2c       	mov	r10, r15
    e674:	bb 24       	eor	r11, r11
    e676:	a7 fc       	sbrc	r10, 7
    e678:	b0 94       	com	r11
    e67a:	c4 01       	movw	r24, r8
    e67c:	8a 0d       	add	r24, r10
    e67e:	9b 1d       	adc	r25, r11
    e680:	01 97       	sbiw	r24, 0x01	; 1
    e682:	0e 94 25 5f 	call	0xbe4a	; 0xbe4a <solid_tile>
    e686:	81 11       	cpse	r24, r1
    e688:	13 c0       	rjmp	.+38     	; 0xe6b0 <crash_and_turn+0x76>
    e68a:	c4 01       	movw	r24, r8
    e68c:	8a 0d       	add	r24, r10
    e68e:	9b 1d       	adc	r25, r11
    e690:	4d 96       	adiw	r24, 0x1d	; 29
    e692:	0e 94 25 5f 	call	0xbe4a	; 0xbe4a <solid_tile>
    e696:	81 11       	cpse	r24, r1
    e698:	0b c0       	rjmp	.+22     	; 0xe6b0 <crash_and_turn+0x76>
    e69a:	c4 01       	movw	r24, r8
    e69c:	8a 0d       	add	r24, r10
    e69e:	9b 1d       	adc	r25, r11
    e6a0:	cb 96       	adiw	r24, 0x3b	; 59
    e6a2:	0e 94 25 5f 	call	0xbe4a	; 0xbe4a <solid_tile>
    e6a6:	81 11       	cpse	r24, r1
    e6a8:	03 c0       	rjmp	.+6      	; 0xe6b0 <crash_and_turn+0x76>
		{
			p->held = BTN_LEFT;
    e6aa:	80 e4       	ldi	r24, 0x40	; 64
    e6ac:	90 e0       	ldi	r25, 0x00	; 0
    e6ae:	6f c0       	rjmp	.+222    	; 0xe78e <crash_and_turn+0x154>
			recoil_sprite(&player->shared);
			recoiled = 0;
		}
		else if ((p->held & BTN_LEFT) && !(solid_tile((current_y+2) * 30 + current_x) || solid_tile((current_y+2) * 30 + current_x+1) || solid_tile((current_y+2) * 30 + current_x+2)))
    e6b0:	c6 fe       	sbrs	r12, 6
    e6b2:	23 c0       	rjmp	.+70     	; 0xe6fa <crash_and_turn+0xc0>
    e6b4:	8e 2d       	mov	r24, r14
    e6b6:	99 27       	eor	r25, r25
    e6b8:	87 fd       	sbrc	r24, 7
    e6ba:	90 95       	com	r25
    e6bc:	02 96       	adiw	r24, 0x02	; 2
    e6be:	2e e1       	ldi	r18, 0x1E	; 30
    e6c0:	28 9f       	mul	r18, r24
    e6c2:	50 01       	movw	r10, r0
    e6c4:	29 9f       	mul	r18, r25
    e6c6:	b0 0c       	add	r11, r0
    e6c8:	11 24       	eor	r1, r1
    e6ca:	af 0c       	add	r10, r15
    e6cc:	b1 1c       	adc	r11, r1
    e6ce:	f7 fc       	sbrc	r15, 7
    e6d0:	ba 94       	dec	r11
    e6d2:	c5 01       	movw	r24, r10
    e6d4:	0e 94 25 5f 	call	0xbe4a	; 0xbe4a <solid_tile>
    e6d8:	81 11       	cpse	r24, r1
    e6da:	0f c0       	rjmp	.+30     	; 0xe6fa <crash_and_turn+0xc0>
    e6dc:	c5 01       	movw	r24, r10
    e6de:	01 96       	adiw	r24, 0x01	; 1
    e6e0:	0e 94 25 5f 	call	0xbe4a	; 0xbe4a <solid_tile>
    e6e4:	81 11       	cpse	r24, r1
    e6e6:	09 c0       	rjmp	.+18     	; 0xe6fa <crash_and_turn+0xc0>
    e6e8:	c5 01       	movw	r24, r10
    e6ea:	02 96       	adiw	r24, 0x02	; 2
    e6ec:	0e 94 25 5f 	call	0xbe4a	; 0xbe4a <solid_tile>
    e6f0:	81 11       	cpse	r24, r1
    e6f2:	03 c0       	rjmp	.+6      	; 0xe6fa <crash_and_turn+0xc0>
		{
			p->held = BTN_DOWN;
    e6f4:	80 e2       	ldi	r24, 0x20	; 32
    e6f6:	90 e0       	ldi	r25, 0x00	; 0
    e6f8:	4a c0       	rjmp	.+148    	; 0xe78e <crash_and_turn+0x154>
			recoil_sprite(&player->shared);
			recoiled = 0;
		}
		else if ((p->held & BTN_DOWN) && !(solid_tile((current_y) * 30 + current_x+2) || solid_tile((current_y+1) * 30 + current_x+2) || solid_tile((current_y+2) * 30 + current_x+2)))
    e6fa:	c5 fe       	sbrs	r12, 5
    e6fc:	24 c0       	rjmp	.+72     	; 0xe746 <crash_and_turn+0x10c>
    e6fe:	fe 2d       	mov	r31, r14
    e700:	8e e1       	ldi	r24, 0x1E	; 30
    e702:	f8 02       	muls	r31, r24
    e704:	40 01       	movw	r8, r0
    e706:	11 24       	eor	r1, r1
    e708:	af 2c       	mov	r10, r15
    e70a:	bb 24       	eor	r11, r11
    e70c:	a7 fc       	sbrc	r10, 7
    e70e:	b0 94       	com	r11
    e710:	c4 01       	movw	r24, r8
    e712:	8a 0d       	add	r24, r10
    e714:	9b 1d       	adc	r25, r11
    e716:	02 96       	adiw	r24, 0x02	; 2
    e718:	0e 94 25 5f 	call	0xbe4a	; 0xbe4a <solid_tile>
    e71c:	81 11       	cpse	r24, r1
    e71e:	13 c0       	rjmp	.+38     	; 0xe746 <crash_and_turn+0x10c>
    e720:	c4 01       	movw	r24, r8
    e722:	8a 0d       	add	r24, r10
    e724:	9b 1d       	adc	r25, r11
    e726:	80 96       	adiw	r24, 0x20	; 32
    e728:	0e 94 25 5f 	call	0xbe4a	; 0xbe4a <solid_tile>
    e72c:	81 11       	cpse	r24, r1
    e72e:	0b c0       	rjmp	.+22     	; 0xe746 <crash_and_turn+0x10c>
    e730:	c4 01       	movw	r24, r8
    e732:	8a 0d       	add	r24, r10
    e734:	9b 1d       	adc	r25, r11
    e736:	ce 96       	adiw	r24, 0x3e	; 62
    e738:	0e 94 25 5f 	call	0xbe4a	; 0xbe4a <solid_tile>
    e73c:	81 11       	cpse	r24, r1
    e73e:	03 c0       	rjmp	.+6      	; 0xe746 <crash_and_turn+0x10c>
		{
			p->held = BTN_RIGHT;
    e740:	80 e8       	ldi	r24, 0x80	; 128
    e742:	90 e0       	ldi	r25, 0x00	; 0
    e744:	24 c0       	rjmp	.+72     	; 0xe78e <crash_and_turn+0x154>
			recoil_sprite(&player->shared);
			recoiled = 0;
		}
		else if ((p->held & BTN_RIGHT) && !(solid_tile((current_y-1) * 30 + current_x) || solid_tile((current_y-1) * 30 + current_x+1) || solid_tile((current_y-1) * 30 + current_x+2)))
    e746:	c7 fe       	sbrs	r12, 7
    e748:	29 c0       	rjmp	.+82     	; 0xe79c <crash_and_turn+0x162>
    e74a:	8e 2d       	mov	r24, r14
    e74c:	99 27       	eor	r25, r25
    e74e:	87 fd       	sbrc	r24, 7
    e750:	90 95       	com	r25
    e752:	01 97       	sbiw	r24, 0x01	; 1
    e754:	2e e1       	ldi	r18, 0x1E	; 30
    e756:	28 9f       	mul	r18, r24
    e758:	50 01       	movw	r10, r0
    e75a:	29 9f       	mul	r18, r25
    e75c:	b0 0c       	add	r11, r0
    e75e:	11 24       	eor	r1, r1
    e760:	af 0c       	add	r10, r15
    e762:	b1 1c       	adc	r11, r1
    e764:	f7 fc       	sbrc	r15, 7
    e766:	ba 94       	dec	r11
    e768:	c5 01       	movw	r24, r10
    e76a:	0e 94 25 5f 	call	0xbe4a	; 0xbe4a <solid_tile>
    e76e:	81 11       	cpse	r24, r1
    e770:	15 c0       	rjmp	.+42     	; 0xe79c <crash_and_turn+0x162>
    e772:	c5 01       	movw	r24, r10
    e774:	01 96       	adiw	r24, 0x01	; 1
    e776:	0e 94 25 5f 	call	0xbe4a	; 0xbe4a <solid_tile>
    e77a:	81 11       	cpse	r24, r1
    e77c:	0f c0       	rjmp	.+30     	; 0xe79c <crash_and_turn+0x162>
    e77e:	c5 01       	movw	r24, r10
    e780:	02 96       	adiw	r24, 0x02	; 2
    e782:	0e 94 25 5f 	call	0xbe4a	; 0xbe4a <solid_tile>
    e786:	81 11       	cpse	r24, r1
    e788:	09 c0       	rjmp	.+18     	; 0xe79c <crash_and_turn+0x162>
		{
			p->held = BTN_UP;
    e78a:	80 e1       	ldi	r24, 0x10	; 16
    e78c:	90 e0       	ldi	r25, 0x00	; 0
    e78e:	f8 01       	movw	r30, r16
    e790:	95 83       	std	Z+5, r25	; 0x05
    e792:	84 83       	std	Z+4, r24	; 0x04
			recoil_sprite(&player->shared);
    e794:	ce 01       	movw	r24, r28
    e796:	0e 94 6d 5e 	call	0xbcda	; 0xbcda <recoil_sprite>
			recoiled = 0;
    e79a:	d1 2c       	mov	r13, r1
		}
		if (player->goal_direction & p->held)
    e79c:	f8 01       	movw	r30, r16
    e79e:	24 81       	ldd	r18, Z+4	; 0x04
    e7a0:	35 81       	ldd	r19, Z+5	; 0x05
    e7a2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    e7a4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    e7a6:	82 23       	and	r24, r18
    e7a8:	93 23       	and	r25, r19
    e7aa:	89 2b       	or	r24, r25
    e7ac:	11 f0       	breq	.+4      	; 0xe7b2 <crash_and_turn+0x178>
		{
			player->feeling_my_way = 0;
    e7ae:	1b 8e       	std	Y+27, r1	; 0x1b
    e7b0:	1c c0       	rjmp	.+56     	; 0xe7ea <crash_and_turn+0x1b0>
			recoiled = 0;
		}
	}
	if (recoiled)
    e7b2:	dd 20       	and	r13, r13
    e7b4:	d1 f0       	breq	.+52     	; 0xe7ea <crash_and_turn+0x1b0>
	{
		if (p->held & BTN_LEFT)
    e7b6:	f8 01       	movw	r30, r16
    e7b8:	84 81       	ldd	r24, Z+4	; 0x04
    e7ba:	86 ff       	sbrs	r24, 6
    e7bc:	03 c0       	rjmp	.+6      	; 0xe7c4 <crash_and_turn+0x18a>
		{
			p->held = BTN_UP;
    e7be:	80 e1       	ldi	r24, 0x10	; 16
    e7c0:	90 e0       	ldi	r25, 0x00	; 0
    e7c2:	0f c0       	rjmp	.+30     	; 0xe7e2 <crash_and_turn+0x1a8>
			player->feeling_my_way = 1;
		}
		else if (p->held & BTN_UP)
    e7c4:	84 ff       	sbrs	r24, 4
    e7c6:	03 c0       	rjmp	.+6      	; 0xe7ce <crash_and_turn+0x194>
		{
			p->held = BTN_RIGHT;
    e7c8:	80 e8       	ldi	r24, 0x80	; 128
    e7ca:	90 e0       	ldi	r25, 0x00	; 0
    e7cc:	09 c0       	rjmp	.+18     	; 0xe7e0 <crash_and_turn+0x1a6>
			player->feeling_my_way = 1;
		}
		else if (p->held & BTN_RIGHT)
    e7ce:	87 ff       	sbrs	r24, 7
    e7d0:	03 c0       	rjmp	.+6      	; 0xe7d8 <crash_and_turn+0x19e>
		{
			p->held = BTN_DOWN;
    e7d2:	80 e2       	ldi	r24, 0x20	; 32
    e7d4:	90 e0       	ldi	r25, 0x00	; 0
    e7d6:	04 c0       	rjmp	.+8      	; 0xe7e0 <crash_and_turn+0x1a6>
			player->feeling_my_way = 1;
		}
		else if (p->held & BTN_DOWN)
    e7d8:	85 ff       	sbrs	r24, 5
    e7da:	07 c0       	rjmp	.+14     	; 0xe7ea <crash_and_turn+0x1b0>
		{
			p->held = BTN_LEFT;
    e7dc:	80 e4       	ldi	r24, 0x40	; 64
    e7de:	90 e0       	ldi	r25, 0x00	; 0
    e7e0:	f8 01       	movw	r30, r16
    e7e2:	95 83       	std	Z+5, r25	; 0x05
    e7e4:	84 83       	std	Z+4, r24	; 0x04
			player->feeling_my_way = 1;
    e7e6:	81 e0       	ldi	r24, 0x01	; 1
    e7e8:	8b 8f       	std	Y+27, r24	; 0x1b
		}
	}

	if ((player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) && current_y == player->goal) return 1;
    e7ea:	8c 8d       	ldd	r24, Y+28	; 0x1c
    e7ec:	9d 8d       	ldd	r25, Y+29	; 0x1d
    e7ee:	80 31       	cpi	r24, 0x10	; 16
    e7f0:	91 05       	cpc	r25, r1
    e7f2:	19 f0       	breq	.+6      	; 0xe7fa <crash_and_turn+0x1c0>
    e7f4:	80 32       	cpi	r24, 0x20	; 32
    e7f6:	91 05       	cpc	r25, r1
    e7f8:	19 f4       	brne	.+6      	; 0xe800 <crash_and_turn+0x1c6>
    e7fa:	2a a1       	ldd	r18, Y+34	; 0x22
    e7fc:	e2 16       	cp	r14, r18
    e7fe:	59 f0       	breq	.+22     	; 0xe816 <crash_and_turn+0x1dc>
	if ((player->goal_direction == BTN_LEFT || player->goal_direction == BTN_RIGHT) && current_x == player->goal) return 1;
    e800:	80 34       	cpi	r24, 0x40	; 64
    e802:	91 05       	cpc	r25, r1
    e804:	19 f0       	breq	.+6      	; 0xe80c <crash_and_turn+0x1d2>
    e806:	80 38       	cpi	r24, 0x80	; 128
    e808:	91 05       	cpc	r25, r1
    e80a:	39 f4       	brne	.+14     	; 0xe81a <crash_and_turn+0x1e0>
    e80c:	81 e0       	ldi	r24, 0x01	; 1
    e80e:	9a a1       	ldd	r25, Y+34	; 0x22
    e810:	f9 12       	cpse	r15, r25
    e812:	03 c0       	rjmp	.+6      	; 0xe81a <crash_and_turn+0x1e0>
    e814:	03 c0       	rjmp	.+6      	; 0xe81c <crash_and_turn+0x1e2>
			p->held = BTN_LEFT;
			player->feeling_my_way = 1;
		}
	}

	if ((player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) && current_y == player->goal) return 1;
    e816:	81 e0       	ldi	r24, 0x01	; 1
    e818:	01 c0       	rjmp	.+2      	; 0xe81c <crash_and_turn+0x1e2>
	if ((player->goal_direction == BTN_LEFT || player->goal_direction == BTN_RIGHT) && current_x == player->goal) return 1;
	
	return 0;
    e81a:	80 e0       	ldi	r24, 0x00	; 0
}
    e81c:	df 91       	pop	r29
    e81e:	cf 91       	pop	r28
    e820:	1f 91       	pop	r17
    e822:	0f 91       	pop	r16
    e824:	ff 90       	pop	r15
    e826:	ef 90       	pop	r14
    e828:	df 90       	pop	r13
    e82a:	cf 90       	pop	r12
    e82c:	bf 90       	pop	r11
    e82e:	af 90       	pop	r10
    e830:	9f 90       	pop	r9
    e832:	8f 90       	pop	r8
    e834:	08 95       	ret

0000e836 <get_cpu_goal_direction>:

u16 get_cpu_goal_direction(char distance_x, char distance_y)
{
	char abs_distance_x = (distance_x < 0) ? -distance_x : distance_x;
    e836:	48 2f       	mov	r20, r24
    e838:	55 27       	eor	r21, r21
    e83a:	47 fd       	sbrc	r20, 7
    e83c:	50 95       	com	r21
    e83e:	57 ff       	sbrs	r21, 7
    e840:	03 c0       	rjmp	.+6      	; 0xe848 <get_cpu_goal_direction+0x12>
    e842:	51 95       	neg	r21
    e844:	41 95       	neg	r20
    e846:	51 09       	sbc	r21, r1
	char abs_distance_y = (distance_y < 0) ? -distance_y : distance_y;
    e848:	26 2f       	mov	r18, r22
    e84a:	33 27       	eor	r19, r19
    e84c:	27 fd       	sbrc	r18, 7
    e84e:	30 95       	com	r19
    e850:	37 ff       	sbrs	r19, 7
    e852:	03 c0       	rjmp	.+6      	; 0xe85a <get_cpu_goal_direction+0x24>
    e854:	31 95       	neg	r19
    e856:	21 95       	neg	r18
    e858:	31 09       	sbc	r19, r1
	u16 direction = BTN_UP;
	
	if (abs_distance_x > abs_distance_y)
    e85a:	24 17       	cp	r18, r20
    e85c:	2c f4       	brge	.+10     	; 0xe868 <get_cpu_goal_direction+0x32>
	{
		direction = BTN_LEFT;
		if (distance_x > 0) direction = BTN_RIGHT;
    e85e:	18 16       	cp	r1, r24
    e860:	44 f4       	brge	.+16     	; 0xe872 <get_cpu_goal_direction+0x3c>
    e862:	80 e8       	ldi	r24, 0x80	; 128
    e864:	90 e0       	ldi	r25, 0x00	; 0
    e866:	08 95       	ret
	}
	else
	{
		direction = BTN_UP;
		if (distance_y > 0) direction = BTN_DOWN;
    e868:	16 16       	cp	r1, r22
    e86a:	34 f4       	brge	.+12     	; 0xe878 <get_cpu_goal_direction+0x42>
    e86c:	80 e2       	ldi	r24, 0x20	; 32
    e86e:	90 e0       	ldi	r25, 0x00	; 0
    e870:	08 95       	ret
	char abs_distance_y = (distance_y < 0) ? -distance_y : distance_y;
	u16 direction = BTN_UP;
	
	if (abs_distance_x > abs_distance_y)
	{
		direction = BTN_LEFT;
    e872:	80 e4       	ldi	r24, 0x40	; 64
    e874:	90 e0       	ldi	r25, 0x00	; 0
    e876:	08 95       	ret
		if (distance_x > 0) direction = BTN_RIGHT;
	}
	else
	{
		direction = BTN_UP;
    e878:	80 e1       	ldi	r24, 0x10	; 16
    e87a:	90 e0       	ldi	r25, 0x00	; 0
		if (distance_y > 0) direction = BTN_DOWN;
	}
	
	return direction;
}
    e87c:	08 95       	ret

0000e87e <get_cpu_joypad_state>:

void get_cpu_joypad_state(Player* player, Player* other_player, JoyPadState* p)
{
    e87e:	2f 92       	push	r2
    e880:	3f 92       	push	r3
    e882:	4f 92       	push	r4
    e884:	5f 92       	push	r5
    e886:	6f 92       	push	r6
    e888:	7f 92       	push	r7
    e88a:	8f 92       	push	r8
    e88c:	9f 92       	push	r9
    e88e:	af 92       	push	r10
    e890:	bf 92       	push	r11
    e892:	cf 92       	push	r12
    e894:	df 92       	push	r13
    e896:	ef 92       	push	r14
    e898:	ff 92       	push	r15
    e89a:	0f 93       	push	r16
    e89c:	1f 93       	push	r17
    e89e:	cf 93       	push	r28
    e8a0:	df 93       	push	r29
    e8a2:	00 d0       	rcall	.+0      	; 0xe8a4 <get_cpu_joypad_state+0x26>
    e8a4:	00 d0       	rcall	.+0      	; 0xe8a6 <get_cpu_joypad_state+0x28>
    e8a6:	cd b7       	in	r28, 0x3d	; 61
    e8a8:	de b7       	in	r29, 0x3e	; 62
    e8aa:	9c 01       	movw	r18, r24
	char distance_x;
	char distance_y;
	char player_x;
	char player_y;
	
	goal_x = other_player->shared.x / 8;
    e8ac:	db 01       	movw	r26, r22
    e8ae:	13 96       	adiw	r26, 0x03	; 3
    e8b0:	4d 90       	ld	r4, X+
    e8b2:	5d 90       	ld	r5, X+
    e8b4:	6d 90       	ld	r6, X+
    e8b6:	7c 90       	ld	r7, X
    e8b8:	16 97       	sbiw	r26, 0x06	; 6
	goal_y = other_player->shared.y / 8 - 3;
    e8ba:	17 96       	adiw	r26, 0x07	; 7
    e8bc:	8d 90       	ld	r8, X+
    e8be:	9d 90       	ld	r9, X+
    e8c0:	ad 90       	ld	r10, X+
    e8c2:	bc 90       	ld	r11, X
    e8c4:	1a 97       	sbiw	r26, 0x0a	; 10
	player_x = player->shared.x / 8;
    e8c6:	fc 01       	movw	r30, r24
    e8c8:	c3 80       	ldd	r12, Z+3	; 0x03
    e8ca:	d4 80       	ldd	r13, Z+4	; 0x04
    e8cc:	e5 80       	ldd	r14, Z+5	; 0x05
    e8ce:	f6 80       	ldd	r15, Z+6	; 0x06
	player_y =  player->shared.y / 8 - 3;
    e8d0:	87 81       	ldd	r24, Z+7	; 0x07
    e8d2:	90 85       	ldd	r25, Z+8	; 0x08
    e8d4:	a1 85       	ldd	r26, Z+9	; 0x09
    e8d6:	b2 85       	ldd	r27, Z+10	; 0x0a
    e8d8:	89 83       	std	Y+1, r24	; 0x01
    e8da:	9a 83       	std	Y+2, r25	; 0x02
    e8dc:	ab 83       	std	Y+3, r26	; 0x03
    e8de:	bc 83       	std	Y+4, r27	; 0x04
	distance_x = goal_x - player_x;
	distance_y = goal_y - player_y;
	
	if (player->grace_frame == 0)
    e8e0:	87 89       	ldd	r24, Z+23	; 0x17
    e8e2:	81 11       	cpse	r24, r1
    e8e4:	06 c0       	rjmp	.+12     	; 0xe8f2 <get_cpu_joypad_state+0x74>
	{
		p->held = 0;
    e8e6:	da 01       	movw	r26, r20
    e8e8:	15 96       	adiw	r26, 0x05	; 5
    e8ea:	1c 92       	st	X, r1
    e8ec:	1e 92       	st	-X, r1
    e8ee:	14 97       	sbiw	r26, 0x04	; 4
		return;
    e8f0:	45 c1       	rjmp	.+650    	; 0xeb7c <get_cpu_joypad_state+0x2fe>
    e8f2:	8a 01       	movw	r16, r20
    e8f4:	19 01       	movw	r2, r18
	}
	
	// Shot
	if (shoot_pressed(p))
    e8f6:	ca 01       	movw	r24, r20
    e8f8:	0e 94 a8 5c 	call	0xb950	; 0xb950 <shoot_pressed>
    e8fc:	88 23       	and	r24, r24
    e8fe:	19 f0       	breq	.+6      	; 0xe906 <get_cpu_joypad_state+0x88>
	{
		p->pressed = 0;
    e900:	f8 01       	movw	r30, r16
    e902:	11 82       	std	Z+1, r1	; 0x01
    e904:	10 82       	st	Z, r1
	}
	if (global_frame_counter % DEFAULT_FRAMES_PER_SHOT == 0 && player->grace_frame > 50)
    e906:	20 91 04 01 	lds	r18, 0x0104
    e90a:	30 91 05 01 	lds	r19, 0x0105
    e90e:	c9 01       	movw	r24, r18
    e910:	6a e0       	ldi	r22, 0x0A	; 10
    e912:	70 e0       	ldi	r23, 0x00	; 0
    e914:	0e 94 71 76 	call	0xece2	; 0xece2 <__udivmodhi4>
    e918:	89 2b       	or	r24, r25
    e91a:	51 f4       	brne	.+20     	; 0xe930 <get_cpu_joypad_state+0xb2>
    e91c:	d1 01       	movw	r26, r2
    e91e:	57 96       	adiw	r26, 0x17	; 23
    e920:	8c 91       	ld	r24, X
    e922:	83 33       	cpi	r24, 0x33	; 51
    e924:	28 f0       	brcs	.+10     	; 0xe930 <get_cpu_joypad_state+0xb2>
	{
		p->pressed = BTN_B;
    e926:	81 e0       	ldi	r24, 0x01	; 1
    e928:	90 e0       	ldi	r25, 0x00	; 0
    e92a:	f8 01       	movw	r30, r16
    e92c:	91 83       	std	Z+1, r25	; 0x01
    e92e:	80 83       	st	Z, r24
	}
		
	// Determine goal
	if ((global_frame_counter % DEFAULT_FRAMES_PER_GOAL == 0) || player->grace_frame == 10 || player->goal_reached)
    e930:	c9 01       	movw	r24, r18
    e932:	64 eb       	ldi	r22, 0xB4	; 180
    e934:	70 e0       	ldi	r23, 0x00	; 0
    e936:	0e 94 71 76 	call	0xece2	; 0xece2 <__udivmodhi4>
    e93a:	89 2b       	or	r24, r25
    e93c:	59 f0       	breq	.+22     	; 0xe954 <get_cpu_joypad_state+0xd6>
    e93e:	d1 01       	movw	r26, r2
    e940:	57 96       	adiw	r26, 0x17	; 23
    e942:	8c 91       	ld	r24, X
    e944:	57 97       	sbiw	r26, 0x17	; 23
    e946:	8a 30       	cpi	r24, 0x0A	; 10
    e948:	29 f0       	breq	.+10     	; 0xe954 <get_cpu_joypad_state+0xd6>
    e94a:	93 96       	adiw	r26, 0x23	; 35
    e94c:	8c 91       	ld	r24, X
    e94e:	88 23       	and	r24, r24
    e950:	09 f4       	brne	.+2      	; 0xe954 <get_cpu_joypad_state+0xd6>
    e952:	78 c0       	rjmp	.+240    	; 0xea44 <get_cpu_joypad_state+0x1c6>
	char distance_x;
	char distance_y;
	char player_x;
	char player_y;
	
	goal_x = other_player->shared.x / 8;
    e954:	20 e0       	ldi	r18, 0x00	; 0
    e956:	30 e0       	ldi	r19, 0x00	; 0
    e958:	40 e0       	ldi	r20, 0x00	; 0
    e95a:	5e e3       	ldi	r21, 0x3E	; 62
    e95c:	c3 01       	movw	r24, r6
    e95e:	b2 01       	movw	r22, r4
    e960:	0e 94 51 78 	call	0xf0a2	; 0xf0a2 <__mulsf3>
    e964:	0e 94 6a 77 	call	0xeed4	; 0xeed4 <__fixsfsi>
    e968:	76 2e       	mov	r7, r22
	goal_y = other_player->shared.y / 8 - 3;
    e96a:	20 e0       	ldi	r18, 0x00	; 0
    e96c:	30 e0       	ldi	r19, 0x00	; 0
    e96e:	40 e0       	ldi	r20, 0x00	; 0
    e970:	5e e3       	ldi	r21, 0x3E	; 62
    e972:	c5 01       	movw	r24, r10
    e974:	b4 01       	movw	r22, r8
    e976:	0e 94 51 78 	call	0xf0a2	; 0xf0a2 <__mulsf3>
    e97a:	20 e0       	ldi	r18, 0x00	; 0
    e97c:	30 e0       	ldi	r19, 0x00	; 0
    e97e:	40 e4       	ldi	r20, 0x40	; 64
    e980:	50 e4       	ldi	r21, 0x40	; 64
    e982:	0e 94 99 76 	call	0xed32	; 0xed32 <__subsf3>
    e986:	0e 94 6a 77 	call	0xeed4	; 0xeed4 <__fixsfsi>
    e98a:	b6 2e       	mov	r11, r22
	player_x = player->shared.x / 8;
    e98c:	20 e0       	ldi	r18, 0x00	; 0
    e98e:	30 e0       	ldi	r19, 0x00	; 0
    e990:	40 e0       	ldi	r20, 0x00	; 0
    e992:	5e e3       	ldi	r21, 0x3E	; 62
    e994:	c7 01       	movw	r24, r14
    e996:	b6 01       	movw	r22, r12
    e998:	0e 94 51 78 	call	0xf0a2	; 0xf0a2 <__mulsf3>
    e99c:	0e 94 6a 77 	call	0xeed4	; 0xeed4 <__fixsfsi>
	player_y =  player->shared.y / 8 - 3;
	distance_x = goal_x - player_x;
    e9a0:	f7 2c       	mov	r15, r7
    e9a2:	f6 1a       	sub	r15, r22
	char player_y;
	
	goal_x = other_player->shared.x / 8;
	goal_y = other_player->shared.y / 8 - 3;
	player_x = player->shared.x / 8;
	player_y =  player->shared.y / 8 - 3;
    e9a4:	20 e0       	ldi	r18, 0x00	; 0
    e9a6:	30 e0       	ldi	r19, 0x00	; 0
    e9a8:	40 e0       	ldi	r20, 0x00	; 0
    e9aa:	5e e3       	ldi	r21, 0x3E	; 62
    e9ac:	69 81       	ldd	r22, Y+1	; 0x01
    e9ae:	7a 81       	ldd	r23, Y+2	; 0x02
    e9b0:	8b 81       	ldd	r24, Y+3	; 0x03
    e9b2:	9c 81       	ldd	r25, Y+4	; 0x04
    e9b4:	0e 94 51 78 	call	0xf0a2	; 0xf0a2 <__mulsf3>
    e9b8:	20 e0       	ldi	r18, 0x00	; 0
    e9ba:	30 e0       	ldi	r19, 0x00	; 0
    e9bc:	40 e4       	ldi	r20, 0x40	; 64
    e9be:	50 e4       	ldi	r21, 0x40	; 64
    e9c0:	0e 94 99 76 	call	0xed32	; 0xed32 <__subsf3>
    e9c4:	0e 94 6a 77 	call	0xeed4	; 0xeed4 <__fixsfsi>
	distance_x = goal_x - player_x;
	distance_y = goal_y - player_y;
    e9c8:	bb 2d       	mov	r27, r11
    e9ca:	b6 1b       	sub	r27, r22
    e9cc:	6b 2f       	mov	r22, r27
	}
		
	// Determine goal
	if ((global_frame_counter % DEFAULT_FRAMES_PER_GOAL == 0) || player->grace_frame == 10 || player->goal_reached)
	{
		player->goal_reached = 0;
    e9ce:	f1 01       	movw	r30, r2
    e9d0:	13 a2       	std	Z+35, r1	; 0x23
		player->feeling_my_way = 0;
    e9d2:	13 8e       	std	Z+27, r1	; 0x1b
		
		if (distance_x >= -2 && distance_x <= 2 && distance_y >= -2 && distance_y <= 2)
    e9d4:	82 e0       	ldi	r24, 0x02	; 2
    e9d6:	8f 0d       	add	r24, r15
    e9d8:	85 30       	cpi	r24, 0x05	; 5
    e9da:	d0 f4       	brcc	.+52     	; 0xea10 <get_cpu_joypad_state+0x192>
    e9dc:	be 3f       	cpi	r27, 0xFE	; 254
    e9de:	c4 f0       	brlt	.+48     	; 0xea10 <get_cpu_joypad_state+0x192>
    e9e0:	b3 30       	cpi	r27, 0x03	; 3
    e9e2:	b4 f4       	brge	.+44     	; 0xea10 <get_cpu_joypad_state+0x192>
		{
			// Dont get too close
			player->goal_direction = button_map(LBRandom(0, 4));
    e9e4:	64 e0       	ldi	r22, 0x04	; 4
    e9e6:	70 e0       	ldi	r23, 0x00	; 0
    e9e8:	80 e0       	ldi	r24, 0x00	; 0
    e9ea:	90 e0       	ldi	r25, 0x00	; 0
    e9ec:	0e 94 1f 59 	call	0xb23e	; 0xb23e <LBRandom>
    e9f0:	0e 94 07 73 	call	0xe60e	; 0xe60e <button_map>
    e9f4:	d1 01       	movw	r26, r2
    e9f6:	5d 96       	adiw	r26, 0x1d	; 29
    e9f8:	9c 93       	st	X, r25
    e9fa:	8e 93       	st	-X, r24
    e9fc:	5c 97       	sbiw	r26, 0x1c	; 28
			player->goal = LBRandom(5, 18);
    e9fe:	62 e1       	ldi	r22, 0x12	; 18
    ea00:	70 e0       	ldi	r23, 0x00	; 0
    ea02:	85 e0       	ldi	r24, 0x05	; 5
    ea04:	90 e0       	ldi	r25, 0x00	; 0
    ea06:	0e 94 1f 59 	call	0xb23e	; 0xb23e <LBRandom>
    ea0a:	f1 01       	movw	r30, r2
    ea0c:	82 a3       	std	Z+34, r24	; 0x22
    ea0e:	12 c0       	rjmp	.+36     	; 0xea34 <get_cpu_joypad_state+0x1b6>
		}
		else
		{
			player->goal_direction = get_cpu_goal_direction(distance_x, distance_y);
    ea10:	8f 2d       	mov	r24, r15
    ea12:	0e 94 1b 74 	call	0xe836	; 0xe836 <get_cpu_goal_direction>
    ea16:	d1 01       	movw	r26, r2
    ea18:	5d 96       	adiw	r26, 0x1d	; 29
    ea1a:	9c 93       	st	X, r25
    ea1c:	8e 93       	st	-X, r24
    ea1e:	5c 97       	sbiw	r26, 0x1c	; 28
			player->goal = goal_x;
			if (player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) player->goal = goal_y;
    ea20:	80 31       	cpi	r24, 0x10	; 16
    ea22:	91 05       	cpc	r25, r1
    ea24:	29 f0       	breq	.+10     	; 0xea30 <get_cpu_joypad_state+0x1b2>
    ea26:	80 97       	sbiw	r24, 0x20	; 32
    ea28:	19 f0       	breq	.+6      	; 0xea30 <get_cpu_joypad_state+0x1b2>
			player->goal = LBRandom(5, 18);
		}
		else
		{
			player->goal_direction = get_cpu_goal_direction(distance_x, distance_y);
			player->goal = goal_x;
    ea2a:	92 96       	adiw	r26, 0x22	; 34
    ea2c:	7c 92       	st	X, r7
    ea2e:	02 c0       	rjmp	.+4      	; 0xea34 <get_cpu_joypad_state+0x1b6>
			if (player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) player->goal = goal_y;
    ea30:	f1 01       	movw	r30, r2
    ea32:	b2 a2       	std	Z+34, r11	; 0x22
		}
		p->held = player->goal_direction;
    ea34:	d1 01       	movw	r26, r2
    ea36:	5c 96       	adiw	r26, 0x1c	; 28
    ea38:	8d 91       	ld	r24, X+
    ea3a:	9c 91       	ld	r25, X
    ea3c:	5d 97       	sbiw	r26, 0x1d	; 29
    ea3e:	f8 01       	movw	r30, r16
    ea40:	95 83       	std	Z+5, r25	; 0x05
    ea42:	84 83       	std	Z+4, r24	; 0x04
	}
	
	// Monitor movement
	if (player->shared.x != player->old_x)
    ea44:	d1 01       	movw	r26, r2
    ea46:	13 96       	adiw	r26, 0x03	; 3
    ea48:	cd 90       	ld	r12, X+
    ea4a:	dd 90       	ld	r13, X+
    ea4c:	ed 90       	ld	r14, X+
    ea4e:	fc 90       	ld	r15, X
    ea50:	16 97       	sbiw	r26, 0x06	; 6
    ea52:	94 96       	adiw	r26, 0x24	; 36
    ea54:	2d 91       	ld	r18, X+
    ea56:	3d 91       	ld	r19, X+
    ea58:	4d 91       	ld	r20, X+
    ea5a:	5c 91       	ld	r21, X
    ea5c:	97 97       	sbiw	r26, 0x27	; 39
    ea5e:	c7 01       	movw	r24, r14
    ea60:	b6 01       	movw	r22, r12
    ea62:	0e 94 fe 76 	call	0xedfc	; 0xedfc <__cmpsf2>
    ea66:	88 23       	and	r24, r24
    ea68:	21 f0       	breq	.+8      	; 0xea72 <get_cpu_joypad_state+0x1f4>
		player->deadlock_count_x = 0;
    ea6a:	f1 01       	movw	r30, r2
    ea6c:	17 8e       	std	Z+31, r1	; 0x1f
    ea6e:	16 8e       	std	Z+30, r1	; 0x1e
    ea70:	0a c0       	rjmp	.+20     	; 0xea86 <get_cpu_joypad_state+0x208>
	else 
		player->deadlock_count_x++;
    ea72:	d1 01       	movw	r26, r2
    ea74:	5e 96       	adiw	r26, 0x1e	; 30
    ea76:	8d 91       	ld	r24, X+
    ea78:	9c 91       	ld	r25, X
    ea7a:	5f 97       	sbiw	r26, 0x1f	; 31
    ea7c:	01 96       	adiw	r24, 0x01	; 1
    ea7e:	5f 96       	adiw	r26, 0x1f	; 31
    ea80:	9c 93       	st	X, r25
    ea82:	8e 93       	st	-X, r24
    ea84:	5e 97       	sbiw	r26, 0x1e	; 30
	if (player->shared.y != player->old_y)
    ea86:	f1 01       	movw	r30, r2
    ea88:	87 80       	ldd	r8, Z+7	; 0x07
    ea8a:	90 84       	ldd	r9, Z+8	; 0x08
    ea8c:	a1 84       	ldd	r10, Z+9	; 0x09
    ea8e:	b2 84       	ldd	r11, Z+10	; 0x0a
    ea90:	20 a5       	ldd	r18, Z+40	; 0x28
    ea92:	31 a5       	ldd	r19, Z+41	; 0x29
    ea94:	42 a5       	ldd	r20, Z+42	; 0x2a
    ea96:	53 a5       	ldd	r21, Z+43	; 0x2b
    ea98:	c5 01       	movw	r24, r10
    ea9a:	b4 01       	movw	r22, r8
    ea9c:	0e 94 fe 76 	call	0xedfc	; 0xedfc <__cmpsf2>
    eaa0:	88 23       	and	r24, r24
    eaa2:	31 f0       	breq	.+12     	; 0xeab0 <get_cpu_joypad_state+0x232>
		player->deadlock_count_y = 0;
    eaa4:	d1 01       	movw	r26, r2
    eaa6:	91 96       	adiw	r26, 0x21	; 33
    eaa8:	1c 92       	st	X, r1
    eaaa:	1e 92       	st	-X, r1
    eaac:	90 97       	sbiw	r26, 0x20	; 32
    eaae:	06 c0       	rjmp	.+12     	; 0xeabc <get_cpu_joypad_state+0x23e>
	else
		player->deadlock_count_y++;
    eab0:	f1 01       	movw	r30, r2
    eab2:	80 a1       	ldd	r24, Z+32	; 0x20
    eab4:	91 a1       	ldd	r25, Z+33	; 0x21
    eab6:	01 96       	adiw	r24, 0x01	; 1
    eab8:	91 a3       	std	Z+33, r25	; 0x21
    eaba:	80 a3       	std	Z+32, r24	; 0x20
	player->old_x = player->shared.x;
    eabc:	d1 01       	movw	r26, r2
    eabe:	94 96       	adiw	r26, 0x24	; 36
    eac0:	cd 92       	st	X+, r12
    eac2:	dd 92       	st	X+, r13
    eac4:	ed 92       	st	X+, r14
    eac6:	fc 92       	st	X, r15
    eac8:	97 97       	sbiw	r26, 0x27	; 39
	player->old_y = player->shared.y;
    eaca:	f1 01       	movw	r30, r2
    eacc:	80 a6       	std	Z+40, r8	; 0x28
    eace:	91 a6       	std	Z+41, r9	; 0x29
    ead0:	a2 a6       	std	Z+42, r10	; 0x2a
    ead2:	b3 a6       	std	Z+43, r11	; 0x2b
	
	// Break tactical deadlock
	if (player->deadlock_count_x >= FRAMES_PER_DEADLOCK)
    ead4:	86 8d       	ldd	r24, Z+30	; 0x1e
    ead6:	97 8d       	ldd	r25, Z+31	; 0x1f
    ead8:	80 34       	cpi	r24, 0x40	; 64
    eada:	91 40       	sbci	r25, 0x01	; 1
    eadc:	88 f0       	brcs	.+34     	; 0xeb00 <get_cpu_joypad_state+0x282>
	{
		p->held = button_map(LBRandom(2, 4));
    eade:	64 e0       	ldi	r22, 0x04	; 4
    eae0:	70 e0       	ldi	r23, 0x00	; 0
    eae2:	82 e0       	ldi	r24, 0x02	; 2
    eae4:	90 e0       	ldi	r25, 0x00	; 0
    eae6:	0e 94 1f 59 	call	0xb23e	; 0xb23e <LBRandom>
    eaea:	0e 94 07 73 	call	0xe60e	; 0xe60e <button_map>
    eaee:	d8 01       	movw	r26, r16
    eaf0:	15 96       	adiw	r26, 0x05	; 5
    eaf2:	9c 93       	st	X, r25
    eaf4:	8e 93       	st	-X, r24
    eaf6:	14 97       	sbiw	r26, 0x04	; 4
		player->deadlock_count_x = 0;
    eaf8:	f1 01       	movw	r30, r2
    eafa:	17 8e       	std	Z+31, r1	; 0x1f
    eafc:	16 8e       	std	Z+30, r1	; 0x1e
    eafe:	3e c0       	rjmp	.+124    	; 0xeb7c <get_cpu_joypad_state+0x2fe>
	}
	else if (player->deadlock_count_y >= FRAMES_PER_DEADLOCK)
    eb00:	d1 01       	movw	r26, r2
    eb02:	90 96       	adiw	r26, 0x20	; 32
    eb04:	8d 91       	ld	r24, X+
    eb06:	9c 91       	ld	r25, X
    eb08:	91 97       	sbiw	r26, 0x21	; 33
    eb0a:	80 34       	cpi	r24, 0x40	; 64
    eb0c:	91 40       	sbci	r25, 0x01	; 1
    eb0e:	88 f0       	brcs	.+34     	; 0xeb32 <get_cpu_joypad_state+0x2b4>
	{
		p->held = button_map(LBRandom(0, 2));
    eb10:	62 e0       	ldi	r22, 0x02	; 2
    eb12:	70 e0       	ldi	r23, 0x00	; 0
    eb14:	80 e0       	ldi	r24, 0x00	; 0
    eb16:	90 e0       	ldi	r25, 0x00	; 0
    eb18:	0e 94 1f 59 	call	0xb23e	; 0xb23e <LBRandom>
    eb1c:	0e 94 07 73 	call	0xe60e	; 0xe60e <button_map>
    eb20:	f8 01       	movw	r30, r16
    eb22:	95 83       	std	Z+5, r25	; 0x05
    eb24:	84 83       	std	Z+4, r24	; 0x04
		player->deadlock_count_y = 0;
    eb26:	d1 01       	movw	r26, r2
    eb28:	91 96       	adiw	r26, 0x21	; 33
    eb2a:	1c 92       	st	X, r1
    eb2c:	1e 92       	st	-X, r1
    eb2e:	90 97       	sbiw	r26, 0x20	; 32
    eb30:	25 c0       	rjmp	.+74     	; 0xeb7c <get_cpu_joypad_state+0x2fe>
	}
	else player->goal_reached = crash_and_turn(player->shared.x / 8, player->shared.y / 8 - 3, player->shared.recoiled, player, p);
    eb32:	20 e0       	ldi	r18, 0x00	; 0
    eb34:	30 e0       	ldi	r19, 0x00	; 0
    eb36:	40 e0       	ldi	r20, 0x00	; 0
    eb38:	5e e3       	ldi	r21, 0x3E	; 62
    eb3a:	c5 01       	movw	r24, r10
    eb3c:	b4 01       	movw	r22, r8
    eb3e:	0e 94 51 78 	call	0xf0a2	; 0xf0a2 <__mulsf3>
    eb42:	20 e0       	ldi	r18, 0x00	; 0
    eb44:	30 e0       	ldi	r19, 0x00	; 0
    eb46:	40 e4       	ldi	r20, 0x40	; 64
    eb48:	50 e4       	ldi	r21, 0x40	; 64
    eb4a:	0e 94 99 76 	call	0xed32	; 0xed32 <__subsf3>
    eb4e:	0e 94 6a 77 	call	0xeed4	; 0xeed4 <__fixsfsi>
    eb52:	b6 2e       	mov	r11, r22
    eb54:	20 e0       	ldi	r18, 0x00	; 0
    eb56:	30 e0       	ldi	r19, 0x00	; 0
    eb58:	40 e0       	ldi	r20, 0x00	; 0
    eb5a:	5e e3       	ldi	r21, 0x3E	; 62
    eb5c:	c7 01       	movw	r24, r14
    eb5e:	b6 01       	movw	r22, r12
    eb60:	0e 94 51 78 	call	0xf0a2	; 0xf0a2 <__mulsf3>
    eb64:	0e 94 6a 77 	call	0xeed4	; 0xeed4 <__fixsfsi>
    eb68:	86 2f       	mov	r24, r22
    eb6a:	91 01       	movw	r18, r2
    eb6c:	f1 01       	movw	r30, r2
    eb6e:	42 81       	ldd	r20, Z+2	; 0x02
    eb70:	6b 2d       	mov	r22, r11
    eb72:	0e 94 1d 73 	call	0xe63a	; 0xe63a <crash_and_turn>
    eb76:	d1 01       	movw	r26, r2
    eb78:	93 96       	adiw	r26, 0x23	; 35
    eb7a:	8c 93       	st	X, r24
}
    eb7c:	0f 90       	pop	r0
    eb7e:	0f 90       	pop	r0
    eb80:	0f 90       	pop	r0
    eb82:	0f 90       	pop	r0
    eb84:	df 91       	pop	r29
    eb86:	cf 91       	pop	r28
    eb88:	1f 91       	pop	r17
    eb8a:	0f 91       	pop	r16
    eb8c:	ff 90       	pop	r15
    eb8e:	ef 90       	pop	r14
    eb90:	df 90       	pop	r13
    eb92:	cf 90       	pop	r12
    eb94:	bf 90       	pop	r11
    eb96:	af 90       	pop	r10
    eb98:	9f 90       	pop	r9
    eb9a:	8f 90       	pop	r8
    eb9c:	7f 90       	pop	r7
    eb9e:	6f 90       	pop	r6
    eba0:	5f 90       	pop	r5
    eba2:	4f 90       	pop	r4
    eba4:	3f 90       	pop	r3
    eba6:	2f 90       	pop	r2
    eba8:	08 95       	ret

0000ebaa <main>:

int main()
{
	// Initialize
	InitMusicPlayer(my_patches);
    ebaa:	86 ea       	ldi	r24, 0xA6	; 166
    ebac:	9b e0       	ldi	r25, 0x0B	; 11
    ebae:	0e 94 86 4a 	call	0x950c	; 0x950c <InitMusicPlayer>
	SetMasterVolume(0xff);
    ebb2:	8f ef       	ldi	r24, 0xFF	; 255
    ebb4:	0e 94 03 4e 	call	0x9c06	; 0x9c06 <SetMasterVolume>
	SetTileTable(tiles_data);
    ebb8:	84 ea       	ldi	r24, 0xA4	; 164
    ebba:	9c e4       	ldi	r25, 0x4C	; 76
    ebbc:	0e 94 fd 47 	call	0x8ffa	; 0x8ffa <SetTileTable>
	SetSpritesTileTable(sprites_data);
    ebc0:	83 e1       	ldi	r24, 0x13	; 19
    ebc2:	93 e4       	ldi	r25, 0x43	; 67
    ebc4:	0e 94 d9 47 	call	0x8fb2	; 0x8fb2 <SetSpritesTileTable>
	SetFontTilesIndex(TILES_DATA_SIZE);
    ebc8:	8b e9       	ldi	r24, 0x9B	; 155
    ebca:	0e 94 fa 47 	call	0x8ff4	; 0x8ff4 <SetFontTilesIndex>
	FadeIn(FRAMES_PER_FADE, false);
    ebce:	60 e0       	ldi	r22, 0x00	; 0
    ebd0:	83 e0       	ldi	r24, 0x03	; 3
    ebd2:	0e 94 05 57 	call	0xae0a	; 0xae0a <FadeIn>
	ClearVram();
    ebd6:	0e 94 de 47 	call	0x8fbc	; 0x8fbc <ClearVram>
	init_scores(&scores);
    ebda:	8b ec       	ldi	r24, 0xCB	; 203
    ebdc:	9b e0       	ldi	r25, 0x0B	; 11
    ebde:	0e 94 63 59 	call	0xb2c6	; 0xb2c6 <init_scores>
	init_handles(&handles);
    ebe2:	82 ef       	ldi	r24, 0xF2	; 242
    ebe4:	9b e0       	ldi	r25, 0x0B	; 11
    ebe6:	0e 94 6f 59 	call	0xb2de	; 0xb2de <init_handles>
	init_game_state();
    ebea:	0e 94 c9 5a 	call	0xb592	; 0xb592 <init_game_state>
	load_splash();
    ebee:	0e 94 c5 69 	call	0xd38a	; 0xd38a <load_splash>
	
	while (1)
	{
		WaitVsync(1);
    ebf2:	81 e0       	ldi	r24, 0x01	; 1
    ebf4:	90 e0       	ldi	r25, 0x00	; 0
    ebf6:	0e 94 a9 56 	call	0xad52	; 0xad52 <WaitVsync>
		switch (game.current_screen)
    ebfa:	80 91 12 0c 	lds	r24, 0x0C12
    ebfe:	81 30       	cpi	r24, 0x01	; 1
    ec00:	91 f0       	breq	.+36     	; 0xec26 <main+0x7c>
    ec02:	28 f0       	brcs	.+10     	; 0xec0e <main+0x64>
    ec04:	82 30       	cpi	r24, 0x02	; 2
    ec06:	c9 f0       	breq	.+50     	; 0xec3a <main+0x90>
    ec08:	83 30       	cpi	r24, 0x03	; 3
    ec0a:	41 f1       	breq	.+80     	; 0xec5c <main+0xb2>
    ec0c:	54 c0       	rjmp	.+168    	; 0xecb6 <main+0x10c>
		{
			case SPLASH:
				LBGetJoyPadState(&p1, 0);
    ec0e:	60 e0       	ldi	r22, 0x00	; 0
    ec10:	84 eb       	ldi	r24, 0xB4	; 180
    ec12:	9c e0       	ldi	r25, 0x0C	; 12
    ec14:	0e 94 97 57 	call	0xaf2e	; 0xaf2e <LBGetJoyPadState>
				update_splash(&p1, &p2);
    ec18:	6b ee       	ldi	r22, 0xEB	; 235
    ec1a:	7b e0       	ldi	r23, 0x0B	; 11
    ec1c:	84 eb       	ldi	r24, 0xB4	; 180
    ec1e:	9c e0       	ldi	r25, 0x0C	; 12
    ec20:	0e 94 df 71 	call	0xe3be	; 0xe3be <update_splash>
				break;
    ec24:	48 c0       	rjmp	.+144    	; 0xecb6 <main+0x10c>
			case TANK_RANK:
				LBGetJoyPadState(&p1, 0);
    ec26:	60 e0       	ldi	r22, 0x00	; 0
    ec28:	84 eb       	ldi	r24, 0xB4	; 180
    ec2a:	9c e0       	ldi	r25, 0x0C	; 12
    ec2c:	0e 94 97 57 	call	0xaf2e	; 0xaf2e <LBGetJoyPadState>
				update_tank_rank(&p1);
    ec30:	84 eb       	ldi	r24, 0xB4	; 180
    ec32:	9c e0       	ldi	r25, 0x0C	; 12
    ec34:	0e 94 63 6f 	call	0xdec6	; 0xdec6 <update_tank_rank>
				break;
    ec38:	3e c0       	rjmp	.+124    	; 0xecb6 <main+0x10c>
			case HANDLE_SELECT:
				LBGetJoyPadState(&p1, 0);
    ec3a:	60 e0       	ldi	r22, 0x00	; 0
    ec3c:	84 eb       	ldi	r24, 0xB4	; 180
    ec3e:	9c e0       	ldi	r25, 0x0C	; 12
    ec40:	0e 94 97 57 	call	0xaf2e	; 0xaf2e <LBGetJoyPadState>
				LBGetJoyPadState(&p2, 1);
    ec44:	61 e0       	ldi	r22, 0x01	; 1
    ec46:	8b ee       	ldi	r24, 0xEB	; 235
    ec48:	9b e0       	ldi	r25, 0x0B	; 11
    ec4a:	0e 94 97 57 	call	0xaf2e	; 0xaf2e <LBGetJoyPadState>
				update_handle_select(&p1, &p2);
    ec4e:	6b ee       	ldi	r22, 0xEB	; 235
    ec50:	7b e0       	ldi	r23, 0x0B	; 11
    ec52:	84 eb       	ldi	r24, 0xB4	; 180
    ec54:	9c e0       	ldi	r25, 0x0C	; 12
    ec56:	0e 94 b9 72 	call	0xe572	; 0xe572 <update_handle_select>
				break;
    ec5a:	2d c0       	rjmp	.+90     	; 0xecb6 <main+0x10c>
			case LEVEL:
				if (game.selection == PVCPU)
    ec5c:	80 91 1e 0c 	lds	r24, 0x0C1E
    ec60:	81 11       	cpse	r24, r1
    ec62:	06 c0       	rjmp	.+12     	; 0xec70 <main+0xc6>
				{
					LBGetJoyPadState(&p1, 0);
    ec64:	60 e0       	ldi	r22, 0x00	; 0
    ec66:	84 eb       	ldi	r24, 0xB4	; 180
    ec68:	9c e0       	ldi	r25, 0x0C	; 12
    ec6a:	0e 94 97 57 	call	0xaf2e	; 0xaf2e <LBGetJoyPadState>
    ec6e:	0a c0       	rjmp	.+20     	; 0xec84 <main+0xda>
					get_cpu_joypad_state(&player2, &player1, &p2);
				}
				else if (game.selection == CPUVCPU)
    ec70:	83 30       	cpi	r24, 0x03	; 3
    ec72:	89 f4       	brne	.+34     	; 0xec96 <main+0xec>
				{
					get_cpu_joypad_state(&player1, &player2, &p1);
    ec74:	44 eb       	ldi	r20, 0xB4	; 180
    ec76:	5c e0       	ldi	r21, 0x0C	; 12
    ec78:	6a ea       	ldi	r22, 0xAA	; 170
    ec7a:	7f e0       	ldi	r23, 0x0F	; 15
    ec7c:	8c e3       	ldi	r24, 0x3C	; 60
    ec7e:	9c e0       	ldi	r25, 0x0C	; 12
    ec80:	0e 94 3f 74 	call	0xe87e	; 0xe87e <get_cpu_joypad_state>
					get_cpu_joypad_state(&player2, &player1, &p2);
    ec84:	4b ee       	ldi	r20, 0xEB	; 235
    ec86:	5b e0       	ldi	r21, 0x0B	; 11
    ec88:	6c e3       	ldi	r22, 0x3C	; 60
    ec8a:	7c e0       	ldi	r23, 0x0C	; 12
    ec8c:	8a ea       	ldi	r24, 0xAA	; 170
    ec8e:	9f e0       	ldi	r25, 0x0F	; 15
    ec90:	0e 94 3f 74 	call	0xe87e	; 0xe87e <get_cpu_joypad_state>
    ec94:	0a c0       	rjmp	.+20     	; 0xecaa <main+0x100>
				}
				else
				{
					LBGetJoyPadState(&p1, 0);
    ec96:	60 e0       	ldi	r22, 0x00	; 0
    ec98:	84 eb       	ldi	r24, 0xB4	; 180
    ec9a:	9c e0       	ldi	r25, 0x0C	; 12
    ec9c:	0e 94 97 57 	call	0xaf2e	; 0xaf2e <LBGetJoyPadState>
					LBGetJoyPadState(&p2, 1);
    eca0:	61 e0       	ldi	r22, 0x01	; 1
    eca2:	8b ee       	ldi	r24, 0xEB	; 235
    eca4:	9b e0       	ldi	r25, 0x0B	; 11
    eca6:	0e 94 97 57 	call	0xaf2e	; 0xaf2e <LBGetJoyPadState>
				}
				update_level(&p1, &p2);
    ecaa:	6b ee       	ldi	r22, 0xEB	; 235
    ecac:	7b e0       	ldi	r23, 0x0B	; 11
    ecae:	84 eb       	ldi	r24, 0xB4	; 180
    ecb0:	9c e0       	ldi	r25, 0x0C	; 12
    ecb2:	0e 94 19 6d 	call	0xda32	; 0xda32 <update_level>
				break;
			default:
				break;
		}
		global_frame_counter++;
    ecb6:	80 91 04 01 	lds	r24, 0x0104
    ecba:	90 91 05 01 	lds	r25, 0x0105
    ecbe:	01 96       	adiw	r24, 0x01	; 1
    ecc0:	90 93 05 01 	sts	0x0105, r25
    ecc4:	80 93 04 01 	sts	0x0104, r24
	}
    ecc8:	94 cf       	rjmp	.-216    	; 0xebf2 <main+0x48>

0000ecca <__udivmodqi4>:
    ecca:	99 1b       	sub	r25, r25
    eccc:	79 e0       	ldi	r23, 0x09	; 9
    ecce:	04 c0       	rjmp	.+8      	; 0xecd8 <__udivmodqi4_ep>

0000ecd0 <__udivmodqi4_loop>:
    ecd0:	99 1f       	adc	r25, r25
    ecd2:	96 17       	cp	r25, r22
    ecd4:	08 f0       	brcs	.+2      	; 0xecd8 <__udivmodqi4_ep>
    ecd6:	96 1b       	sub	r25, r22

0000ecd8 <__udivmodqi4_ep>:
    ecd8:	88 1f       	adc	r24, r24
    ecda:	7a 95       	dec	r23
    ecdc:	c9 f7       	brne	.-14     	; 0xecd0 <__udivmodqi4_loop>
    ecde:	80 95       	com	r24
    ece0:	08 95       	ret

0000ece2 <__udivmodhi4>:
    ece2:	aa 1b       	sub	r26, r26
    ece4:	bb 1b       	sub	r27, r27
    ece6:	51 e1       	ldi	r21, 0x11	; 17
    ece8:	07 c0       	rjmp	.+14     	; 0xecf8 <__udivmodhi4_ep>

0000ecea <__udivmodhi4_loop>:
    ecea:	aa 1f       	adc	r26, r26
    ecec:	bb 1f       	adc	r27, r27
    ecee:	a6 17       	cp	r26, r22
    ecf0:	b7 07       	cpc	r27, r23
    ecf2:	10 f0       	brcs	.+4      	; 0xecf8 <__udivmodhi4_ep>
    ecf4:	a6 1b       	sub	r26, r22
    ecf6:	b7 0b       	sbc	r27, r23

0000ecf8 <__udivmodhi4_ep>:
    ecf8:	88 1f       	adc	r24, r24
    ecfa:	99 1f       	adc	r25, r25
    ecfc:	5a 95       	dec	r21
    ecfe:	a9 f7       	brne	.-22     	; 0xecea <__udivmodhi4_loop>
    ed00:	80 95       	com	r24
    ed02:	90 95       	com	r25
    ed04:	bc 01       	movw	r22, r24
    ed06:	cd 01       	movw	r24, r26
    ed08:	08 95       	ret

0000ed0a <__divmodhi4>:
    ed0a:	97 fb       	bst	r25, 7
    ed0c:	07 2e       	mov	r0, r23
    ed0e:	16 f4       	brtc	.+4      	; 0xed14 <__divmodhi4+0xa>
    ed10:	00 94       	com	r0
    ed12:	07 d0       	rcall	.+14     	; 0xed22 <__divmodhi4_neg1>
    ed14:	77 fd       	sbrc	r23, 7
    ed16:	09 d0       	rcall	.+18     	; 0xed2a <__divmodhi4_neg2>
    ed18:	0e 94 71 76 	call	0xece2	; 0xece2 <__udivmodhi4>
    ed1c:	07 fc       	sbrc	r0, 7
    ed1e:	05 d0       	rcall	.+10     	; 0xed2a <__divmodhi4_neg2>
    ed20:	3e f4       	brtc	.+14     	; 0xed30 <__divmodhi4_exit>

0000ed22 <__divmodhi4_neg1>:
    ed22:	90 95       	com	r25
    ed24:	81 95       	neg	r24
    ed26:	9f 4f       	sbci	r25, 0xFF	; 255
    ed28:	08 95       	ret

0000ed2a <__divmodhi4_neg2>:
    ed2a:	70 95       	com	r23
    ed2c:	61 95       	neg	r22
    ed2e:	7f 4f       	sbci	r23, 0xFF	; 255

0000ed30 <__divmodhi4_exit>:
    ed30:	08 95       	ret

0000ed32 <__subsf3>:
    ed32:	50 58       	subi	r21, 0x80	; 128

0000ed34 <__addsf3>:
    ed34:	bb 27       	eor	r27, r27
    ed36:	aa 27       	eor	r26, r26
    ed38:	0e d0       	rcall	.+28     	; 0xed56 <__addsf3x>
    ed3a:	75 c1       	rjmp	.+746    	; 0xf026 <__fp_round>
    ed3c:	66 d1       	rcall	.+716    	; 0xf00a <__fp_pscA>
    ed3e:	30 f0       	brcs	.+12     	; 0xed4c <__addsf3+0x18>
    ed40:	6b d1       	rcall	.+726    	; 0xf018 <__fp_pscB>
    ed42:	20 f0       	brcs	.+8      	; 0xed4c <__addsf3+0x18>
    ed44:	31 f4       	brne	.+12     	; 0xed52 <__addsf3+0x1e>
    ed46:	9f 3f       	cpi	r25, 0xFF	; 255
    ed48:	11 f4       	brne	.+4      	; 0xed4e <__addsf3+0x1a>
    ed4a:	1e f4       	brtc	.+6      	; 0xed52 <__addsf3+0x1e>
    ed4c:	5b c1       	rjmp	.+694    	; 0xf004 <__fp_nan>
    ed4e:	0e f4       	brtc	.+2      	; 0xed52 <__addsf3+0x1e>
    ed50:	e0 95       	com	r30
    ed52:	e7 fb       	bst	r30, 7
    ed54:	51 c1       	rjmp	.+674    	; 0xeff8 <__fp_inf>

0000ed56 <__addsf3x>:
    ed56:	e9 2f       	mov	r30, r25
    ed58:	77 d1       	rcall	.+750    	; 0xf048 <__fp_split3>
    ed5a:	80 f3       	brcs	.-32     	; 0xed3c <__addsf3+0x8>
    ed5c:	ba 17       	cp	r27, r26
    ed5e:	62 07       	cpc	r22, r18
    ed60:	73 07       	cpc	r23, r19
    ed62:	84 07       	cpc	r24, r20
    ed64:	95 07       	cpc	r25, r21
    ed66:	18 f0       	brcs	.+6      	; 0xed6e <__addsf3x+0x18>
    ed68:	71 f4       	brne	.+28     	; 0xed86 <__addsf3x+0x30>
    ed6a:	9e f5       	brtc	.+102    	; 0xedd2 <__addsf3x+0x7c>
    ed6c:	8f c1       	rjmp	.+798    	; 0xf08c <__fp_zero>
    ed6e:	0e f4       	brtc	.+2      	; 0xed72 <__addsf3x+0x1c>
    ed70:	e0 95       	com	r30
    ed72:	0b 2e       	mov	r0, r27
    ed74:	ba 2f       	mov	r27, r26
    ed76:	a0 2d       	mov	r26, r0
    ed78:	0b 01       	movw	r0, r22
    ed7a:	b9 01       	movw	r22, r18
    ed7c:	90 01       	movw	r18, r0
    ed7e:	0c 01       	movw	r0, r24
    ed80:	ca 01       	movw	r24, r20
    ed82:	a0 01       	movw	r20, r0
    ed84:	11 24       	eor	r1, r1
    ed86:	ff 27       	eor	r31, r31
    ed88:	59 1b       	sub	r21, r25
    ed8a:	99 f0       	breq	.+38     	; 0xedb2 <__addsf3x+0x5c>
    ed8c:	59 3f       	cpi	r21, 0xF9	; 249
    ed8e:	50 f4       	brcc	.+20     	; 0xeda4 <__addsf3x+0x4e>
    ed90:	50 3e       	cpi	r21, 0xE0	; 224
    ed92:	68 f1       	brcs	.+90     	; 0xedee <__addsf3x+0x98>
    ed94:	1a 16       	cp	r1, r26
    ed96:	f0 40       	sbci	r31, 0x00	; 0
    ed98:	a2 2f       	mov	r26, r18
    ed9a:	23 2f       	mov	r18, r19
    ed9c:	34 2f       	mov	r19, r20
    ed9e:	44 27       	eor	r20, r20
    eda0:	58 5f       	subi	r21, 0xF8	; 248
    eda2:	f3 cf       	rjmp	.-26     	; 0xed8a <__addsf3x+0x34>
    eda4:	46 95       	lsr	r20
    eda6:	37 95       	ror	r19
    eda8:	27 95       	ror	r18
    edaa:	a7 95       	ror	r26
    edac:	f0 40       	sbci	r31, 0x00	; 0
    edae:	53 95       	inc	r21
    edb0:	c9 f7       	brne	.-14     	; 0xeda4 <__addsf3x+0x4e>
    edb2:	7e f4       	brtc	.+30     	; 0xedd2 <__addsf3x+0x7c>
    edb4:	1f 16       	cp	r1, r31
    edb6:	ba 0b       	sbc	r27, r26
    edb8:	62 0b       	sbc	r22, r18
    edba:	73 0b       	sbc	r23, r19
    edbc:	84 0b       	sbc	r24, r20
    edbe:	ba f0       	brmi	.+46     	; 0xedee <__addsf3x+0x98>
    edc0:	91 50       	subi	r25, 0x01	; 1
    edc2:	a1 f0       	breq	.+40     	; 0xedec <__addsf3x+0x96>
    edc4:	ff 0f       	add	r31, r31
    edc6:	bb 1f       	adc	r27, r27
    edc8:	66 1f       	adc	r22, r22
    edca:	77 1f       	adc	r23, r23
    edcc:	88 1f       	adc	r24, r24
    edce:	c2 f7       	brpl	.-16     	; 0xedc0 <__addsf3x+0x6a>
    edd0:	0e c0       	rjmp	.+28     	; 0xedee <__addsf3x+0x98>
    edd2:	ba 0f       	add	r27, r26
    edd4:	62 1f       	adc	r22, r18
    edd6:	73 1f       	adc	r23, r19
    edd8:	84 1f       	adc	r24, r20
    edda:	48 f4       	brcc	.+18     	; 0xedee <__addsf3x+0x98>
    eddc:	87 95       	ror	r24
    edde:	77 95       	ror	r23
    ede0:	67 95       	ror	r22
    ede2:	b7 95       	ror	r27
    ede4:	f7 95       	ror	r31
    ede6:	9e 3f       	cpi	r25, 0xFE	; 254
    ede8:	08 f0       	brcs	.+2      	; 0xedec <__addsf3x+0x96>
    edea:	b3 cf       	rjmp	.-154    	; 0xed52 <__addsf3+0x1e>
    edec:	93 95       	inc	r25
    edee:	88 0f       	add	r24, r24
    edf0:	08 f0       	brcs	.+2      	; 0xedf4 <__addsf3x+0x9e>
    edf2:	99 27       	eor	r25, r25
    edf4:	ee 0f       	add	r30, r30
    edf6:	97 95       	ror	r25
    edf8:	87 95       	ror	r24
    edfa:	08 95       	ret

0000edfc <__cmpsf2>:
    edfc:	d9 d0       	rcall	.+434    	; 0xefb0 <__fp_cmp>
    edfe:	08 f4       	brcc	.+2      	; 0xee02 <__cmpsf2+0x6>
    ee00:	81 e0       	ldi	r24, 0x01	; 1
    ee02:	08 95       	ret

0000ee04 <__divsf3>:
    ee04:	0c d0       	rcall	.+24     	; 0xee1e <__divsf3x>
    ee06:	0f c1       	rjmp	.+542    	; 0xf026 <__fp_round>
    ee08:	07 d1       	rcall	.+526    	; 0xf018 <__fp_pscB>
    ee0a:	40 f0       	brcs	.+16     	; 0xee1c <__divsf3+0x18>
    ee0c:	fe d0       	rcall	.+508    	; 0xf00a <__fp_pscA>
    ee0e:	30 f0       	brcs	.+12     	; 0xee1c <__divsf3+0x18>
    ee10:	21 f4       	brne	.+8      	; 0xee1a <__divsf3+0x16>
    ee12:	5f 3f       	cpi	r21, 0xFF	; 255
    ee14:	19 f0       	breq	.+6      	; 0xee1c <__divsf3+0x18>
    ee16:	f0 c0       	rjmp	.+480    	; 0xeff8 <__fp_inf>
    ee18:	51 11       	cpse	r21, r1
    ee1a:	39 c1       	rjmp	.+626    	; 0xf08e <__fp_szero>
    ee1c:	f3 c0       	rjmp	.+486    	; 0xf004 <__fp_nan>

0000ee1e <__divsf3x>:
    ee1e:	14 d1       	rcall	.+552    	; 0xf048 <__fp_split3>
    ee20:	98 f3       	brcs	.-26     	; 0xee08 <__divsf3+0x4>

0000ee22 <__divsf3_pse>:
    ee22:	99 23       	and	r25, r25
    ee24:	c9 f3       	breq	.-14     	; 0xee18 <__divsf3+0x14>
    ee26:	55 23       	and	r21, r21
    ee28:	b1 f3       	breq	.-20     	; 0xee16 <__divsf3+0x12>
    ee2a:	95 1b       	sub	r25, r21
    ee2c:	55 0b       	sbc	r21, r21
    ee2e:	bb 27       	eor	r27, r27
    ee30:	aa 27       	eor	r26, r26
    ee32:	62 17       	cp	r22, r18
    ee34:	73 07       	cpc	r23, r19
    ee36:	84 07       	cpc	r24, r20
    ee38:	38 f0       	brcs	.+14     	; 0xee48 <__divsf3_pse+0x26>
    ee3a:	9f 5f       	subi	r25, 0xFF	; 255
    ee3c:	5f 4f       	sbci	r21, 0xFF	; 255
    ee3e:	22 0f       	add	r18, r18
    ee40:	33 1f       	adc	r19, r19
    ee42:	44 1f       	adc	r20, r20
    ee44:	aa 1f       	adc	r26, r26
    ee46:	a9 f3       	breq	.-22     	; 0xee32 <__divsf3_pse+0x10>
    ee48:	33 d0       	rcall	.+102    	; 0xeeb0 <__divsf3_pse+0x8e>
    ee4a:	0e 2e       	mov	r0, r30
    ee4c:	3a f0       	brmi	.+14     	; 0xee5c <__divsf3_pse+0x3a>
    ee4e:	e0 e8       	ldi	r30, 0x80	; 128
    ee50:	30 d0       	rcall	.+96     	; 0xeeb2 <__divsf3_pse+0x90>
    ee52:	91 50       	subi	r25, 0x01	; 1
    ee54:	50 40       	sbci	r21, 0x00	; 0
    ee56:	e6 95       	lsr	r30
    ee58:	00 1c       	adc	r0, r0
    ee5a:	ca f7       	brpl	.-14     	; 0xee4e <__divsf3_pse+0x2c>
    ee5c:	29 d0       	rcall	.+82     	; 0xeeb0 <__divsf3_pse+0x8e>
    ee5e:	fe 2f       	mov	r31, r30
    ee60:	27 d0       	rcall	.+78     	; 0xeeb0 <__divsf3_pse+0x8e>
    ee62:	66 0f       	add	r22, r22
    ee64:	77 1f       	adc	r23, r23
    ee66:	88 1f       	adc	r24, r24
    ee68:	bb 1f       	adc	r27, r27
    ee6a:	26 17       	cp	r18, r22
    ee6c:	37 07       	cpc	r19, r23
    ee6e:	48 07       	cpc	r20, r24
    ee70:	ab 07       	cpc	r26, r27
    ee72:	b0 e8       	ldi	r27, 0x80	; 128
    ee74:	09 f0       	breq	.+2      	; 0xee78 <__divsf3_pse+0x56>
    ee76:	bb 0b       	sbc	r27, r27
    ee78:	80 2d       	mov	r24, r0
    ee7a:	bf 01       	movw	r22, r30
    ee7c:	ff 27       	eor	r31, r31
    ee7e:	93 58       	subi	r25, 0x83	; 131
    ee80:	5f 4f       	sbci	r21, 0xFF	; 255
    ee82:	2a f0       	brmi	.+10     	; 0xee8e <__divsf3_pse+0x6c>
    ee84:	9e 3f       	cpi	r25, 0xFE	; 254
    ee86:	51 05       	cpc	r21, r1
    ee88:	68 f0       	brcs	.+26     	; 0xeea4 <__divsf3_pse+0x82>
    ee8a:	b6 c0       	rjmp	.+364    	; 0xeff8 <__fp_inf>
    ee8c:	00 c1       	rjmp	.+512    	; 0xf08e <__fp_szero>
    ee8e:	5f 3f       	cpi	r21, 0xFF	; 255
    ee90:	ec f3       	brlt	.-6      	; 0xee8c <__divsf3_pse+0x6a>
    ee92:	98 3e       	cpi	r25, 0xE8	; 232
    ee94:	dc f3       	brlt	.-10     	; 0xee8c <__divsf3_pse+0x6a>
    ee96:	86 95       	lsr	r24
    ee98:	77 95       	ror	r23
    ee9a:	67 95       	ror	r22
    ee9c:	b7 95       	ror	r27
    ee9e:	f7 95       	ror	r31
    eea0:	9f 5f       	subi	r25, 0xFF	; 255
    eea2:	c9 f7       	brne	.-14     	; 0xee96 <__divsf3_pse+0x74>
    eea4:	88 0f       	add	r24, r24
    eea6:	91 1d       	adc	r25, r1
    eea8:	96 95       	lsr	r25
    eeaa:	87 95       	ror	r24
    eeac:	97 f9       	bld	r25, 7
    eeae:	08 95       	ret
    eeb0:	e1 e0       	ldi	r30, 0x01	; 1
    eeb2:	66 0f       	add	r22, r22
    eeb4:	77 1f       	adc	r23, r23
    eeb6:	88 1f       	adc	r24, r24
    eeb8:	bb 1f       	adc	r27, r27
    eeba:	62 17       	cp	r22, r18
    eebc:	73 07       	cpc	r23, r19
    eebe:	84 07       	cpc	r24, r20
    eec0:	ba 07       	cpc	r27, r26
    eec2:	20 f0       	brcs	.+8      	; 0xeecc <__divsf3_pse+0xaa>
    eec4:	62 1b       	sub	r22, r18
    eec6:	73 0b       	sbc	r23, r19
    eec8:	84 0b       	sbc	r24, r20
    eeca:	ba 0b       	sbc	r27, r26
    eecc:	ee 1f       	adc	r30, r30
    eece:	88 f7       	brcc	.-30     	; 0xeeb2 <__divsf3_pse+0x90>
    eed0:	e0 95       	com	r30
    eed2:	08 95       	ret

0000eed4 <__fixsfsi>:
    eed4:	04 d0       	rcall	.+8      	; 0xeede <__fixunssfsi>
    eed6:	68 94       	set
    eed8:	b1 11       	cpse	r27, r1
    eeda:	d9 c0       	rjmp	.+434    	; 0xf08e <__fp_szero>
    eedc:	08 95       	ret

0000eede <__fixunssfsi>:
    eede:	bc d0       	rcall	.+376    	; 0xf058 <__fp_splitA>
    eee0:	88 f0       	brcs	.+34     	; 0xef04 <__fixunssfsi+0x26>
    eee2:	9f 57       	subi	r25, 0x7F	; 127
    eee4:	90 f0       	brcs	.+36     	; 0xef0a <__fixunssfsi+0x2c>
    eee6:	b9 2f       	mov	r27, r25
    eee8:	99 27       	eor	r25, r25
    eeea:	b7 51       	subi	r27, 0x17	; 23
    eeec:	a0 f0       	brcs	.+40     	; 0xef16 <__fixunssfsi+0x38>
    eeee:	d1 f0       	breq	.+52     	; 0xef24 <__fixunssfsi+0x46>
    eef0:	66 0f       	add	r22, r22
    eef2:	77 1f       	adc	r23, r23
    eef4:	88 1f       	adc	r24, r24
    eef6:	99 1f       	adc	r25, r25
    eef8:	1a f0       	brmi	.+6      	; 0xef00 <__fixunssfsi+0x22>
    eefa:	ba 95       	dec	r27
    eefc:	c9 f7       	brne	.-14     	; 0xeef0 <__fixunssfsi+0x12>
    eefe:	12 c0       	rjmp	.+36     	; 0xef24 <__fixunssfsi+0x46>
    ef00:	b1 30       	cpi	r27, 0x01	; 1
    ef02:	81 f0       	breq	.+32     	; 0xef24 <__fixunssfsi+0x46>
    ef04:	c3 d0       	rcall	.+390    	; 0xf08c <__fp_zero>
    ef06:	b1 e0       	ldi	r27, 0x01	; 1
    ef08:	08 95       	ret
    ef0a:	c0 c0       	rjmp	.+384    	; 0xf08c <__fp_zero>
    ef0c:	67 2f       	mov	r22, r23
    ef0e:	78 2f       	mov	r23, r24
    ef10:	88 27       	eor	r24, r24
    ef12:	b8 5f       	subi	r27, 0xF8	; 248
    ef14:	39 f0       	breq	.+14     	; 0xef24 <__fixunssfsi+0x46>
    ef16:	b9 3f       	cpi	r27, 0xF9	; 249
    ef18:	cc f3       	brlt	.-14     	; 0xef0c <__fixunssfsi+0x2e>
    ef1a:	86 95       	lsr	r24
    ef1c:	77 95       	ror	r23
    ef1e:	67 95       	ror	r22
    ef20:	b3 95       	inc	r27
    ef22:	d9 f7       	brne	.-10     	; 0xef1a <__fixunssfsi+0x3c>
    ef24:	3e f4       	brtc	.+14     	; 0xef34 <__fixunssfsi+0x56>
    ef26:	90 95       	com	r25
    ef28:	80 95       	com	r24
    ef2a:	70 95       	com	r23
    ef2c:	61 95       	neg	r22
    ef2e:	7f 4f       	sbci	r23, 0xFF	; 255
    ef30:	8f 4f       	sbci	r24, 0xFF	; 255
    ef32:	9f 4f       	sbci	r25, 0xFF	; 255
    ef34:	08 95       	ret

0000ef36 <__floatunsisf>:
    ef36:	e8 94       	clt
    ef38:	09 c0       	rjmp	.+18     	; 0xef4c <__floatsisf+0x12>

0000ef3a <__floatsisf>:
    ef3a:	97 fb       	bst	r25, 7
    ef3c:	3e f4       	brtc	.+14     	; 0xef4c <__floatsisf+0x12>
    ef3e:	90 95       	com	r25
    ef40:	80 95       	com	r24
    ef42:	70 95       	com	r23
    ef44:	61 95       	neg	r22
    ef46:	7f 4f       	sbci	r23, 0xFF	; 255
    ef48:	8f 4f       	sbci	r24, 0xFF	; 255
    ef4a:	9f 4f       	sbci	r25, 0xFF	; 255
    ef4c:	99 23       	and	r25, r25
    ef4e:	a9 f0       	breq	.+42     	; 0xef7a <__floatsisf+0x40>
    ef50:	f9 2f       	mov	r31, r25
    ef52:	96 e9       	ldi	r25, 0x96	; 150
    ef54:	bb 27       	eor	r27, r27
    ef56:	93 95       	inc	r25
    ef58:	f6 95       	lsr	r31
    ef5a:	87 95       	ror	r24
    ef5c:	77 95       	ror	r23
    ef5e:	67 95       	ror	r22
    ef60:	b7 95       	ror	r27
    ef62:	f1 11       	cpse	r31, r1
    ef64:	f8 cf       	rjmp	.-16     	; 0xef56 <__floatsisf+0x1c>
    ef66:	fa f4       	brpl	.+62     	; 0xefa6 <__floatsisf+0x6c>
    ef68:	bb 0f       	add	r27, r27
    ef6a:	11 f4       	brne	.+4      	; 0xef70 <__floatsisf+0x36>
    ef6c:	60 ff       	sbrs	r22, 0
    ef6e:	1b c0       	rjmp	.+54     	; 0xefa6 <__floatsisf+0x6c>
    ef70:	6f 5f       	subi	r22, 0xFF	; 255
    ef72:	7f 4f       	sbci	r23, 0xFF	; 255
    ef74:	8f 4f       	sbci	r24, 0xFF	; 255
    ef76:	9f 4f       	sbci	r25, 0xFF	; 255
    ef78:	16 c0       	rjmp	.+44     	; 0xefa6 <__floatsisf+0x6c>
    ef7a:	88 23       	and	r24, r24
    ef7c:	11 f0       	breq	.+4      	; 0xef82 <__floatsisf+0x48>
    ef7e:	96 e9       	ldi	r25, 0x96	; 150
    ef80:	11 c0       	rjmp	.+34     	; 0xefa4 <__floatsisf+0x6a>
    ef82:	77 23       	and	r23, r23
    ef84:	21 f0       	breq	.+8      	; 0xef8e <__floatsisf+0x54>
    ef86:	9e e8       	ldi	r25, 0x8E	; 142
    ef88:	87 2f       	mov	r24, r23
    ef8a:	76 2f       	mov	r23, r22
    ef8c:	05 c0       	rjmp	.+10     	; 0xef98 <__floatsisf+0x5e>
    ef8e:	66 23       	and	r22, r22
    ef90:	71 f0       	breq	.+28     	; 0xefae <__floatsisf+0x74>
    ef92:	96 e8       	ldi	r25, 0x86	; 134
    ef94:	86 2f       	mov	r24, r22
    ef96:	70 e0       	ldi	r23, 0x00	; 0
    ef98:	60 e0       	ldi	r22, 0x00	; 0
    ef9a:	2a f0       	brmi	.+10     	; 0xefa6 <__floatsisf+0x6c>
    ef9c:	9a 95       	dec	r25
    ef9e:	66 0f       	add	r22, r22
    efa0:	77 1f       	adc	r23, r23
    efa2:	88 1f       	adc	r24, r24
    efa4:	da f7       	brpl	.-10     	; 0xef9c <__floatsisf+0x62>
    efa6:	88 0f       	add	r24, r24
    efa8:	96 95       	lsr	r25
    efaa:	87 95       	ror	r24
    efac:	97 f9       	bld	r25, 7
    efae:	08 95       	ret

0000efb0 <__fp_cmp>:
    efb0:	99 0f       	add	r25, r25
    efb2:	00 08       	sbc	r0, r0
    efb4:	55 0f       	add	r21, r21
    efb6:	aa 0b       	sbc	r26, r26
    efb8:	e0 e8       	ldi	r30, 0x80	; 128
    efba:	fe ef       	ldi	r31, 0xFE	; 254
    efbc:	16 16       	cp	r1, r22
    efbe:	17 06       	cpc	r1, r23
    efc0:	e8 07       	cpc	r30, r24
    efc2:	f9 07       	cpc	r31, r25
    efc4:	c0 f0       	brcs	.+48     	; 0xeff6 <__fp_cmp+0x46>
    efc6:	12 16       	cp	r1, r18
    efc8:	13 06       	cpc	r1, r19
    efca:	e4 07       	cpc	r30, r20
    efcc:	f5 07       	cpc	r31, r21
    efce:	98 f0       	brcs	.+38     	; 0xeff6 <__fp_cmp+0x46>
    efd0:	62 1b       	sub	r22, r18
    efd2:	73 0b       	sbc	r23, r19
    efd4:	84 0b       	sbc	r24, r20
    efd6:	95 0b       	sbc	r25, r21
    efd8:	39 f4       	brne	.+14     	; 0xefe8 <__fp_cmp+0x38>
    efda:	0a 26       	eor	r0, r26
    efdc:	61 f0       	breq	.+24     	; 0xeff6 <__fp_cmp+0x46>
    efde:	23 2b       	or	r18, r19
    efe0:	24 2b       	or	r18, r20
    efe2:	25 2b       	or	r18, r21
    efe4:	21 f4       	brne	.+8      	; 0xefee <__fp_cmp+0x3e>
    efe6:	08 95       	ret
    efe8:	0a 26       	eor	r0, r26
    efea:	09 f4       	brne	.+2      	; 0xefee <__fp_cmp+0x3e>
    efec:	a1 40       	sbci	r26, 0x01	; 1
    efee:	a6 95       	lsr	r26
    eff0:	8f ef       	ldi	r24, 0xFF	; 255
    eff2:	81 1d       	adc	r24, r1
    eff4:	81 1d       	adc	r24, r1
    eff6:	08 95       	ret

0000eff8 <__fp_inf>:
    eff8:	97 f9       	bld	r25, 7
    effa:	9f 67       	ori	r25, 0x7F	; 127
    effc:	80 e8       	ldi	r24, 0x80	; 128
    effe:	70 e0       	ldi	r23, 0x00	; 0
    f000:	60 e0       	ldi	r22, 0x00	; 0
    f002:	08 95       	ret

0000f004 <__fp_nan>:
    f004:	9f ef       	ldi	r25, 0xFF	; 255
    f006:	80 ec       	ldi	r24, 0xC0	; 192
    f008:	08 95       	ret

0000f00a <__fp_pscA>:
    f00a:	00 24       	eor	r0, r0
    f00c:	0a 94       	dec	r0
    f00e:	16 16       	cp	r1, r22
    f010:	17 06       	cpc	r1, r23
    f012:	18 06       	cpc	r1, r24
    f014:	09 06       	cpc	r0, r25
    f016:	08 95       	ret

0000f018 <__fp_pscB>:
    f018:	00 24       	eor	r0, r0
    f01a:	0a 94       	dec	r0
    f01c:	12 16       	cp	r1, r18
    f01e:	13 06       	cpc	r1, r19
    f020:	14 06       	cpc	r1, r20
    f022:	05 06       	cpc	r0, r21
    f024:	08 95       	ret

0000f026 <__fp_round>:
    f026:	09 2e       	mov	r0, r25
    f028:	03 94       	inc	r0
    f02a:	00 0c       	add	r0, r0
    f02c:	11 f4       	brne	.+4      	; 0xf032 <__fp_round+0xc>
    f02e:	88 23       	and	r24, r24
    f030:	52 f0       	brmi	.+20     	; 0xf046 <__fp_round+0x20>
    f032:	bb 0f       	add	r27, r27
    f034:	40 f4       	brcc	.+16     	; 0xf046 <__fp_round+0x20>
    f036:	bf 2b       	or	r27, r31
    f038:	11 f4       	brne	.+4      	; 0xf03e <__fp_round+0x18>
    f03a:	60 ff       	sbrs	r22, 0
    f03c:	04 c0       	rjmp	.+8      	; 0xf046 <__fp_round+0x20>
    f03e:	6f 5f       	subi	r22, 0xFF	; 255
    f040:	7f 4f       	sbci	r23, 0xFF	; 255
    f042:	8f 4f       	sbci	r24, 0xFF	; 255
    f044:	9f 4f       	sbci	r25, 0xFF	; 255
    f046:	08 95       	ret

0000f048 <__fp_split3>:
    f048:	57 fd       	sbrc	r21, 7
    f04a:	90 58       	subi	r25, 0x80	; 128
    f04c:	44 0f       	add	r20, r20
    f04e:	55 1f       	adc	r21, r21
    f050:	59 f0       	breq	.+22     	; 0xf068 <__fp_splitA+0x10>
    f052:	5f 3f       	cpi	r21, 0xFF	; 255
    f054:	71 f0       	breq	.+28     	; 0xf072 <__fp_splitA+0x1a>
    f056:	47 95       	ror	r20

0000f058 <__fp_splitA>:
    f058:	88 0f       	add	r24, r24
    f05a:	97 fb       	bst	r25, 7
    f05c:	99 1f       	adc	r25, r25
    f05e:	61 f0       	breq	.+24     	; 0xf078 <__fp_splitA+0x20>
    f060:	9f 3f       	cpi	r25, 0xFF	; 255
    f062:	79 f0       	breq	.+30     	; 0xf082 <__fp_splitA+0x2a>
    f064:	87 95       	ror	r24
    f066:	08 95       	ret
    f068:	12 16       	cp	r1, r18
    f06a:	13 06       	cpc	r1, r19
    f06c:	14 06       	cpc	r1, r20
    f06e:	55 1f       	adc	r21, r21
    f070:	f2 cf       	rjmp	.-28     	; 0xf056 <__fp_split3+0xe>
    f072:	46 95       	lsr	r20
    f074:	f1 df       	rcall	.-30     	; 0xf058 <__fp_splitA>
    f076:	08 c0       	rjmp	.+16     	; 0xf088 <__fp_splitA+0x30>
    f078:	16 16       	cp	r1, r22
    f07a:	17 06       	cpc	r1, r23
    f07c:	18 06       	cpc	r1, r24
    f07e:	99 1f       	adc	r25, r25
    f080:	f1 cf       	rjmp	.-30     	; 0xf064 <__fp_splitA+0xc>
    f082:	86 95       	lsr	r24
    f084:	71 05       	cpc	r23, r1
    f086:	61 05       	cpc	r22, r1
    f088:	08 94       	sec
    f08a:	08 95       	ret

0000f08c <__fp_zero>:
    f08c:	e8 94       	clt

0000f08e <__fp_szero>:
    f08e:	bb 27       	eor	r27, r27
    f090:	66 27       	eor	r22, r22
    f092:	77 27       	eor	r23, r23
    f094:	cb 01       	movw	r24, r22
    f096:	97 f9       	bld	r25, 7
    f098:	08 95       	ret

0000f09a <__gesf2>:
    f09a:	8a df       	rcall	.-236    	; 0xefb0 <__fp_cmp>
    f09c:	08 f4       	brcc	.+2      	; 0xf0a0 <__gesf2+0x6>
    f09e:	8f ef       	ldi	r24, 0xFF	; 255
    f0a0:	08 95       	ret

0000f0a2 <__mulsf3>:
    f0a2:	0b d0       	rcall	.+22     	; 0xf0ba <__mulsf3x>
    f0a4:	c0 cf       	rjmp	.-128    	; 0xf026 <__fp_round>
    f0a6:	b1 df       	rcall	.-158    	; 0xf00a <__fp_pscA>
    f0a8:	28 f0       	brcs	.+10     	; 0xf0b4 <__mulsf3+0x12>
    f0aa:	b6 df       	rcall	.-148    	; 0xf018 <__fp_pscB>
    f0ac:	18 f0       	brcs	.+6      	; 0xf0b4 <__mulsf3+0x12>
    f0ae:	95 23       	and	r25, r21
    f0b0:	09 f0       	breq	.+2      	; 0xf0b4 <__mulsf3+0x12>
    f0b2:	a2 cf       	rjmp	.-188    	; 0xeff8 <__fp_inf>
    f0b4:	a7 cf       	rjmp	.-178    	; 0xf004 <__fp_nan>
    f0b6:	11 24       	eor	r1, r1
    f0b8:	ea cf       	rjmp	.-44     	; 0xf08e <__fp_szero>

0000f0ba <__mulsf3x>:
    f0ba:	c6 df       	rcall	.-116    	; 0xf048 <__fp_split3>
    f0bc:	a0 f3       	brcs	.-24     	; 0xf0a6 <__mulsf3+0x4>

0000f0be <__mulsf3_pse>:
    f0be:	95 9f       	mul	r25, r21
    f0c0:	d1 f3       	breq	.-12     	; 0xf0b6 <__mulsf3+0x14>
    f0c2:	95 0f       	add	r25, r21
    f0c4:	50 e0       	ldi	r21, 0x00	; 0
    f0c6:	55 1f       	adc	r21, r21
    f0c8:	62 9f       	mul	r22, r18
    f0ca:	f0 01       	movw	r30, r0
    f0cc:	72 9f       	mul	r23, r18
    f0ce:	bb 27       	eor	r27, r27
    f0d0:	f0 0d       	add	r31, r0
    f0d2:	b1 1d       	adc	r27, r1
    f0d4:	63 9f       	mul	r22, r19
    f0d6:	aa 27       	eor	r26, r26
    f0d8:	f0 0d       	add	r31, r0
    f0da:	b1 1d       	adc	r27, r1
    f0dc:	aa 1f       	adc	r26, r26
    f0de:	64 9f       	mul	r22, r20
    f0e0:	66 27       	eor	r22, r22
    f0e2:	b0 0d       	add	r27, r0
    f0e4:	a1 1d       	adc	r26, r1
    f0e6:	66 1f       	adc	r22, r22
    f0e8:	82 9f       	mul	r24, r18
    f0ea:	22 27       	eor	r18, r18
    f0ec:	b0 0d       	add	r27, r0
    f0ee:	a1 1d       	adc	r26, r1
    f0f0:	62 1f       	adc	r22, r18
    f0f2:	73 9f       	mul	r23, r19
    f0f4:	b0 0d       	add	r27, r0
    f0f6:	a1 1d       	adc	r26, r1
    f0f8:	62 1f       	adc	r22, r18
    f0fa:	83 9f       	mul	r24, r19
    f0fc:	a0 0d       	add	r26, r0
    f0fe:	61 1d       	adc	r22, r1
    f100:	22 1f       	adc	r18, r18
    f102:	74 9f       	mul	r23, r20
    f104:	33 27       	eor	r19, r19
    f106:	a0 0d       	add	r26, r0
    f108:	61 1d       	adc	r22, r1
    f10a:	23 1f       	adc	r18, r19
    f10c:	84 9f       	mul	r24, r20
    f10e:	60 0d       	add	r22, r0
    f110:	21 1d       	adc	r18, r1
    f112:	82 2f       	mov	r24, r18
    f114:	76 2f       	mov	r23, r22
    f116:	6a 2f       	mov	r22, r26
    f118:	11 24       	eor	r1, r1
    f11a:	9f 57       	subi	r25, 0x7F	; 127
    f11c:	50 40       	sbci	r21, 0x00	; 0
    f11e:	8a f0       	brmi	.+34     	; 0xf142 <__mulsf3_pse+0x84>
    f120:	e1 f0       	breq	.+56     	; 0xf15a <__mulsf3_pse+0x9c>
    f122:	88 23       	and	r24, r24
    f124:	4a f0       	brmi	.+18     	; 0xf138 <__mulsf3_pse+0x7a>
    f126:	ee 0f       	add	r30, r30
    f128:	ff 1f       	adc	r31, r31
    f12a:	bb 1f       	adc	r27, r27
    f12c:	66 1f       	adc	r22, r22
    f12e:	77 1f       	adc	r23, r23
    f130:	88 1f       	adc	r24, r24
    f132:	91 50       	subi	r25, 0x01	; 1
    f134:	50 40       	sbci	r21, 0x00	; 0
    f136:	a9 f7       	brne	.-22     	; 0xf122 <__mulsf3_pse+0x64>
    f138:	9e 3f       	cpi	r25, 0xFE	; 254
    f13a:	51 05       	cpc	r21, r1
    f13c:	70 f0       	brcs	.+28     	; 0xf15a <__mulsf3_pse+0x9c>
    f13e:	5c cf       	rjmp	.-328    	; 0xeff8 <__fp_inf>
    f140:	a6 cf       	rjmp	.-180    	; 0xf08e <__fp_szero>
    f142:	5f 3f       	cpi	r21, 0xFF	; 255
    f144:	ec f3       	brlt	.-6      	; 0xf140 <__mulsf3_pse+0x82>
    f146:	98 3e       	cpi	r25, 0xE8	; 232
    f148:	dc f3       	brlt	.-10     	; 0xf140 <__mulsf3_pse+0x82>
    f14a:	86 95       	lsr	r24
    f14c:	77 95       	ror	r23
    f14e:	67 95       	ror	r22
    f150:	b7 95       	ror	r27
    f152:	f7 95       	ror	r31
    f154:	e7 95       	ror	r30
    f156:	9f 5f       	subi	r25, 0xFF	; 255
    f158:	c1 f7       	brne	.-16     	; 0xf14a <__mulsf3_pse+0x8c>
    f15a:	fe 2b       	or	r31, r30
    f15c:	88 0f       	add	r24, r24
    f15e:	91 1d       	adc	r25, r1
    f160:	96 95       	lsr	r25
    f162:	87 95       	ror	r24
    f164:	97 f9       	bld	r25, 7
    f166:	08 95       	ret

0000f168 <memcpy_P>:
    f168:	fb 01       	movw	r30, r22
    f16a:	dc 01       	movw	r26, r24
    f16c:	02 c0       	rjmp	.+4      	; 0xf172 <memcpy_P+0xa>
    f16e:	05 90       	lpm	r0, Z+
    f170:	0d 92       	st	X+, r0
    f172:	41 50       	subi	r20, 0x01	; 1
    f174:	50 40       	sbci	r21, 0x00	; 0
    f176:	d8 f7       	brcc	.-10     	; 0xf16e <memcpy_P+0x6>
    f178:	08 95       	ret

0000f17a <_exit>:
    f17a:	f8 94       	cli

0000f17c <__stop_program>:
    f17c:	ff cf       	rjmp	.-2      	; 0xf17c <__stop_program>
