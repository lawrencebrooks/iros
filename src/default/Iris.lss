
Iris.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800500  0000cf04  0000d004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .noinit       00000400  00800100  00800100  0000d020  2**5
                  CONTENTS, READONLY
  2 .text         0000cf04  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .bss          00000aff  00800510  00800510  0000d014  2**1
                  ALLOC
  4 .stab         00000708  00000000  00000000  0000d420  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000002f1  00000000  00000000  0000db28  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  0000de19  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000688  00000000  00000000  0000de30  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00008dd3  00000000  00000000  0000e4b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001680  00000000  00000000  0001728b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000022af  00000000  00000000  0001890b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001618  00000000  00000000  0001abbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00001b2e  00000000  00000000  0001c1d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00007780  00000000  00000000  0001dd02  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000820  00000000  00000000  00025488  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 99 32 	jmp	0x6532	; 0x6532 <__ctors_end>
       4:	0c 94 02 33 	jmp	0x6604	; 0x6604 <__bad_interrupt>
       8:	0c 94 02 33 	jmp	0x6604	; 0x6604 <__bad_interrupt>
       c:	0c 94 02 33 	jmp	0x6604	; 0x6604 <__bad_interrupt>
      10:	0c 94 02 33 	jmp	0x6604	; 0x6604 <__bad_interrupt>
      14:	0c 94 02 33 	jmp	0x6604	; 0x6604 <__bad_interrupt>
      18:	0c 94 02 33 	jmp	0x6604	; 0x6604 <__bad_interrupt>
      1c:	0c 94 02 33 	jmp	0x6604	; 0x6604 <__bad_interrupt>
      20:	0c 94 7a 38 	jmp	0x70f4	; 0x70f4 <__vector_8>
      24:	0c 94 02 33 	jmp	0x6604	; 0x6604 <__bad_interrupt>
      28:	0c 94 02 33 	jmp	0x6604	; 0x6604 <__bad_interrupt>
      2c:	0c 94 02 33 	jmp	0x6604	; 0x6604 <__bad_interrupt>
      30:	0c 94 02 33 	jmp	0x6604	; 0x6604 <__bad_interrupt>
      34:	0c 94 46 36 	jmp	0x6c8c	; 0x6c8c <__vector_13>
      38:	0c 94 86 36 	jmp	0x6d0c	; 0x6d0c <__vector_14>
      3c:	0c 94 02 33 	jmp	0x6604	; 0x6604 <__bad_interrupt>
      40:	0c 94 02 33 	jmp	0x6604	; 0x6604 <__bad_interrupt>
      44:	0c 94 02 33 	jmp	0x6604	; 0x6604 <__bad_interrupt>
      48:	0c 94 02 33 	jmp	0x6604	; 0x6604 <__bad_interrupt>
      4c:	0c 94 02 33 	jmp	0x6604	; 0x6604 <__bad_interrupt>
      50:	0c 94 02 33 	jmp	0x6604	; 0x6604 <__bad_interrupt>
      54:	0c 94 02 33 	jmp	0x6604	; 0x6604 <__bad_interrupt>
      58:	0c 94 02 33 	jmp	0x6604	; 0x6604 <__bad_interrupt>
      5c:	0c 94 02 33 	jmp	0x6604	; 0x6604 <__bad_interrupt>
      60:	0c 94 02 33 	jmp	0x6604	; 0x6604 <__bad_interrupt>
      64:	0c 94 02 33 	jmp	0x6604	; 0x6604 <__bad_interrupt>
      68:	0c 94 02 33 	jmp	0x6604	; 0x6604 <__bad_interrupt>
      6c:	0c 94 02 33 	jmp	0x6604	; 0x6604 <__bad_interrupt>
      70:	69 5a       	subi	r22, 0xA9	; 169
      72:	78 5a       	subi	r23, 0xA8	; 168
      74:	6c 5a       	subi	r22, 0xAC	; 172
      76:	78 5a       	subi	r23, 0xA8	; 168
      78:	6f 5a       	subi	r22, 0xAF	; 175
      7a:	78 5a       	subi	r23, 0xA8	; 168
      7c:	72 5a       	subi	r23, 0xA2	; 162
      7e:	78 5a       	subi	r23, 0xA8	; 168
      80:	75 5a       	subi	r23, 0xA5	; 165
      82:	78 5a       	subi	r23, 0xA8	; 168

00000084 <__trampolines_end>:
      84:	81 00       	.word	0x0081	; ????
      86:	45 00       	.word	0x0045	; ????
      88:	27 ff       	sbrs	r18, 7
      8a:	24 ff       	sbrs	r18, 4
      8c:	2a 90       	ld	r2, -Y
      8e:	2b 1c       	adc	r2, r11
      90:	21 0c       	add	r2, r1
      92:	22 fb       	bst	r18, 2
      94:	85 00       	.word	0x0085	; ????
      96:	84 00       	.word	0x0084	; ????
      98:	89 03       	fmulsu	r16, r17
      9a:	88 8d       	ldd	r24, Y+24	; 0x18
      9c:	81 09       	sbc	r24, r1
      9e:	6f 02       	muls	r22, r31
      a0:	44 42       	sbci	r20, 0x24	; 36
      a2:	47 00       	.word	0x0047	; ????
      a4:	45 01       	movw	r8, r10
      a6:	b0 83       	st	Z, r27
      a8:	b3 00       	.word	0x00b3	; ????
      aa:	b1 01       	movw	r22, r2
      ac:	25 11       	cpse	r18, r5
      ae:	8a 4f       	sbci	r24, 0xFA	; 250
      b0:	8b 03       	fmulsu	r16, r19

000000b2 <eeprom_format_table>:
      b2:	5a 55 01 20 01 01 00 38 08 00 00 00 00 00 00 00     ZU. ...8........
	...

000000d2 <patchCommands>:
      d2:	23 3a 26 3a 82 3a 86 3a 8d 3a 2e 3a 33 3a 38 3a     #:&:.:.:.:.:3:8:
      e2:	95 3a 3b 3a 3e 3a 41 3a 7c 3a 7f 3a a5 3a           .:;:>:A:|:.:.:

000000f0 <fader>:
      f0:	00 40 88 91 d2 e4 ad b5 b6 be bf ff                 .@..........

000000fc <map_uzeboxlogo2>:
      fc:	05 03 00 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f     ................
	...

0000010d <map_uzeboxlogo>:
     10d:	05 04 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d     ................
     11d:	00 0e 0f 10 11 12                                   ......

00000123 <logo_tileset>:
	...
     17f:	00 00 00 49 00 00 00 00 00 49 52 52 00 00 00 49     ...I.....IRR...I
     18f:	52 53 1c 25 00 49 52 52 24 25 25 1b 52 52 5c 2d     RS.%.IRR$%%.RR\-
     19f:	2d 1c 12 12 00 00 00 00 00 00 00 00 00 00 00 00     -...............
     1af:	40 49 49 49 00 40 49 49 52 5b 5b 5b 4a 52 52 5b     @III.@IIR[[[JRR[
     1bf:	1c 1c 13 12 5b 1c 24 1c 12 09 09 09 24 1b 12 09     ....[.$.....$...
     1cf:	09 09 09 0a 0a 0a 0a 0a 0a 0a 0a 13 0a 0a 12 0a     ................
     1df:	0a 12 13 0a 00 00 00 00 00 00 00 00 92 52 52 52     .............RRR
     1ef:	52 52 52 49 13 12 13 09 00 1c 1b 13 0a 12 12 40     RRRI...........@
     1ff:	1b 65 64 1c 09 0a 00 09 24 1b 1c 65 12 00 00 25     .ed.....$..e...%
     20f:	1c 1c 1c 1c 01 00 25 24 1c 1c 1c 1c 00 24 25 24     ......%$.....$%$
     21f:	24 24 1c 1c 00 00 00 00 00 00 00 00 49 40 00 00     $$..........I@..
     22f:	00 00 00 00 52 49 49 00 00 00 00 00 1c 5b 4a 48     ....RII......[JH
     23f:	00 00 00 00 1c 25 52 49 00 00 00 00 65 24 64 49     .....%RI....e$dI
     24f:	00 00 00 00 65 25 64 49 00 00 00 00 6d 2e 5c 49     ....e%dI....m.\I
	...
     267:	00 00 40 52 00 00 00 00 00 49 52 5c 00 00 00 00     ..@R.....IR\....
     277:	53 52 24 25 00 00 00 53 52 25 25 25 00 00 4a 52     SR$%...SR%%%..JR
     287:	25 25 1b 00 00 00 5b 25 13 00 00 1b 00 5b 53 00     %%....[%.....[S.
     297:	0a 1c 37 37 09 5b 1c 65 7f 37 2e 2e 52 2e 2e 1c     ..77.[.e.7..R...
     2a7:	13 13 12 00 2e 25 1b 13 12 00 00 12 1c 1c 12 00     .....%..........
     2b7:	00 12 25 1c 12 00 00 12 2e 37 1c 13 00 13 2e 37     ..%......7.....7
     2c7:	36 1c 13 1b 37 37 2e 2e 25 13 1c 1c 2e 2e 2e 2e     6...77..%.......
     2d7:	1b 1c 1c 1c 6e 6e 6e 1c 1c 1c 1c 1c 09 13 13 12     ....nnn.........
     2e7:	12 13 13 00 13 13 13 13 13 1c 00 09 13 13 13 13     ................
     2f7:	1c 01 00 37 13 13 13 1c 13 00 2e 2e 1b 1b 1c 1c     ...7............
     307:	00 1c 77 2e 1b 1b 25 00 13 7f 25 1c 1c 1c 01 0a     ..w...%...%.....
     317:	37 24 1c 1c 1c 13 0a 2e 25 25 09 00 13 2e 24 25     7$......%%....$%
     327:	25 25 25 25 2e 25 25 25 25 25 25 25 25 25 2d 2e     %%%%.%%%%%%%%%-.
     337:	25 1b 1c 1c 2e 2e 25 1c 13 25 1b 13 25 1c 1c 1c     %.....%..%..%...
     347:	1c 01 09 52 1c 1c 13 00 01 1c 5b 5c 0a 00 01 65     ...R......[\...e
     357:	77 5c 1b 00 01 6e 7f 6e 52 1b 00 00 6d 1c 52 49     w\...n.nR...m.RI
     367:	00 00 00 00 1c 13 53 00 00 00 00 00 1c 52 4a 00     ......S......RJ.
     377:	00 00 00 00 5b 5b 00 00 00 00 00 00 5c 00 00 00     ....[[......\...
	...
     3a3:	13 5b 7f 77 6e 6e 6e 6e 13 65 77 76 6e 6e 6e 6e     .[.wnnnn.ewvnnnn
     3b3:	1b 65 77 76 76 76 6e 77 1b 5b bf 76 b6 76 76 76     .ewvvvnw.[.v.vvv
     3c3:	09 13 6d bf b7 b6 b7 65 00 1b 12 5c 76 bf 76 6d     ..m....e...\v.vm
     3d3:	00 00 12 1b 12 5b 5b 5c 00 00 00 00 09 0a 12 13     .....[[\........
     3e3:	6e 77 24 1c 1c 1c 1c 1c 77 25 1c 1c 1c 1c 24 25     nw$.....w%....$%
     3f3:	6e 1c 1c 1c 24 25 25 1b 1c 1c 24 25 25 13 00 00     n...$%%...$%%...
     403:	64 6d 6d 1b 00 09 6e bf 6d 5b 09 12 6e bf 6d 5b     dmm...n.m[..n.m[
     413:	5b 12 5b 64 5b 12 13 12 13 1b 12 12 09 01 00 00     [.[d[...........
     423:	1c 24 2e 1c 09 00 09 6e 25 24 01 00 09 76 7f 7f     .$.....n%$...v..
     433:	00 00 12 77 7f 7f 64 12 64 bf bf 77 5b 12 1b 09     ...w..d.d..w[...
     443:	bf 6d 5b 12 1b 09 00 00 12 13 1b 09 00 00 00 00     .m[.............
     453:	09 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     463:	7f 7f 53 13 13 00 00 00 64 12 1b 01 00 00 00 00     ..S.....d.......
     473:	1b 12 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     4ab:	26 00 00 00 26 00 26 26 2f 00 00 00 2f 00 00 00     &...&.&&/.../...
     4bb:	37 00 00 00 37 00 00 00 ff 00 00 00 ff 00 00 00     7...7...........
     4cb:	bf 00 00 00 bf 00 00 bf 37 00 00 37 00 00 37 00     ........7..7..7.
     4db:	00 26 26 00 00 00 26 26 00 00 00 00 00 00 00 00     .&&...&&........
     4eb:	26 26 26 00 26 26 26 26 00 00 2f 00 2f 00 00 00     &&&.&&&&.././...
     4fb:	00 37 00 00 37 00 00 00 ff 00 00 00 ff ff ff ff     .7..7...........
     50b:	00 00 00 00 bf 00 00 00 00 00 00 00 37 00 00 00     ............7...
     51b:	26 26 26 00 26 26 26 26 00 00 00 00 00 00 00 00     &&&.&&&&........
     52b:	26 00 26 26 26 26 00 00 00 00 2f 00 00 00 2f 00     &.&&&&..../.../.
     53b:	00 00 37 00 00 00 37 00 00 00 ff ff ff ff 00 00     ..7...7.........
     54b:	00 00 bf 00 00 00 bf 00 00 00 37 00 00 00 37 00     ..........7...7.
     55b:	26 00 26 26 26 26 00 00 00 00 00 00 00 00 00 00     &.&&&&..........
     56b:	00 00 26 26 26 00 26 00 00 2f 00 00 2f 00 2f 00     ..&&&.&../.././.
     57b:	37 00 00 00 37 00 00 37 ff 00 00 00 ff 00 00 00     7...7..7........
     58b:	bf 00 00 00 bf 00 00 bf 37 00 00 37 00 00 37 00     ........7..7..7.
     59b:	26 26 26 00 00 00 26 00 00 00 00 00 00 00 00 00     &&&...&.........
     5ab:	00 00 26 00 00 00 00 00 00 00 2f 00 00 00 00 00     ..&......./.....
     5bb:	00 37 00 00 00 00 00 00 ff 00 00 00 00 00 00 00     .7..............
     5cb:	00 bf 00 00 00 00 00 00 00 00 37 00 00 00 00 00     ..........7.....
     5db:	00 00 26 00 00 00 00 00 00 00 00 00 00 00 00 00     ..&.............
	...
     5ff:	00 00 00 e4 00 00 00 00 09 9b ed f6 00 00 00 9b     ................
     60f:	a4 ad bf bf 00 52 9b a4 76 7f 7f b7 5b 9b 6d 77     .....R..v...[.mw
     61f:	7f 76 6e b7 00 00 00 00 00 00 00 00 00 00 00 00     .vn.............
     62f:	5b b6 f6 f6 00 5b f6 ff ff ff ff bf f6 ff ff ff     [....[..........
     63f:	ff bf bf ae ff bf ff ff ff b7 ad 65 bf bf ff ff     ...........e....
     64f:	b7 b6 ad 65 b7 bf ff ff bf b7 ae 6e b7 bf ff ff     ...e.......n....
     65f:	bf b7 b7 65 00 00 00 00 00 00 00 00 f6 f6 ed ed     ...e............
     66f:	ad a4 a4 9b b6 6d 6d 5c 52 6e 65 64 65 65 65 52     .....mm\RnedeeeR
     67f:	65 76 6d 25 5c 5c 52 53 6e 24 65 6e 65 52 52 6e     evm%\\RSn$eneRRn
     68f:	25 25 24 25 5b 52 77 2d 25 25 25 24 52 6e 6e 2d     %%$%[Rw-%%%$Rnn-
     69f:	25 25 25 25 00 00 00 00 00 00 00 00 9b 49 00 00     %%%%.........I..
     6af:	00 00 00 00 a4 9b 92 00 00 00 00 00 25 64 93 49     ............%d.I
     6bf:	00 00 00 00 65 2e 9b 52 00 00 00 00 6d 25 65 52     ....e..R....m%eR
     6cf:	00 00 00 00 6d 2d 65 52 00 00 00 00 6e 2e 64 52     ....m-eR....n.dR
	...
     6e7:	00 00 49 5b 00 00 00 00 00 4a 5b 65 00 00 00 00     ..I[.....J[e....
     6f7:	5b 9b 6d 2d 00 00 00 5b 5b 2d 2e 25 00 00 52 5b     [.m-...[[-.%..R[
     707:	2e 2e 1c 09 00 01 5b 2d 1c 01 09 1c 00 5c 5b 01     ......[-.....\[.
     717:	4a 65 77 7f 4a 5b 1c 6e 7f 77 77 76 9b 77 77 6d     Jew.J[.n.wwv.wwm
     727:	65 6e 6e a4 77 6e 65 65 65 5b a4 b7 25 25 5c 52     enn.wneee[..%%\R
     737:	52 6d bf bf 13 09 49 64 7f bf bf bf 09 5c 7f 7f     Rm....Id.....\..
     747:	bf bf b7 bf 7f 7f 77 7f 7f b7 bf bf 77 77 7f 7f     ......w.....ww..
     757:	6e b7 bf bf 77 7f 7f 6e 77 bf bf bf b6 ff ff ff     n...w..nw.......
     767:	bf bf b7 5b bf ff ff ff bf bf a4 64 bf ff ff ff     ...[.......d....
     777:	bf ad a4 7f bf ff ff ff bf a4 bf 7f ff ff ff bf     ................
     787:	ad bf bf bf ff ff ff b6 bf bf bf 77 ff ff f7 bf     ...........w....
     797:	bf bf 77 77 ff ff ff bf bf bf 64 52 6d 7f 6e 2e     ..ww......dRm.n.
     7a7:	2d 2d 25 6e 7f 76 6e 6e 6e 2e 25 65 77 77 77 76     --%n.vnnn.%ewwwv
     7b7:	2e 1c 25 24 7f 77 6e 25 1c 25 1c 1b 77 65 25 25     ..%$.wn%.%..we%%
     7c7:	1c 09 0a 5b 6e 6e 1c 09 49 25 64 64 5b 49 4a 6e     ...[nn..I%dd[IJn
     7d7:	7f 64 5c 00 53 77 bf 77 5b 5c 00 00 6e 25 5b 4a     .d\.Sw.w[\..n%[J
     7e7:	00 00 00 00 1c 1b 5b 00 00 00 00 00 24 5b 53 00     ......[.....$[S.
     7f7:	00 00 00 00 5b 5c 00 00 00 00 00 00 64 00 00 00     ....[\......d...
	...
     823:	5b 5c 7f bf 77 76 77 77 5c 6d 7f b7 77 77 77 77     [\..wvww\m..wwww
     833:	5c 6d 7f bf 77 77 77 bf 5c 64 bf bf bf bf bf 7f     \m..www.\d......
     843:	0a 5c 6e bf bf bf bf 76 00 65 64 6d bf bf bf bf     .\n....v.edm....
     853:	00 00 5b 6d 64 6d ad b6 00 00 00 00 12 5b 64 6d     ..[mdm.......[dm
     863:	77 7f 6e 6e 77 bf bf bf 7f 76 6d 76 77 bf bf bf     w.nnw....vmvw...
     873:	77 6d 6e 76 7f bf bf bf 6d 6e 76 7f bf b7 ad f6     wmnv....mnv.....
     883:	76 bf bf 76 a4 ad ff ff bf b6 64 ad ff ff ff ff     v..v......d.....
     893:	b6 ad bf ff ff ff ff f6 ad b6 ad 64 5b 52 00 00     ...........d[R..
     8a3:	ff ff bf bf ad 5b 64 bf ff ff b6 ad ad bf ff bf     .....[d.........
     8b3:	ff f6 ff ff ff ff bf 64 ff ff ff ff bf b6 76 5b     .......d......v[
     8c3:	ff ff ff bf bf 5b 00 00 ff ff ff 5c 00 00 00 00     .....[.....\....
     8d3:	a4 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     8e3:	bf bf 64 5c 5c 00 00 00 6e 5c 65 49 00 00 00 00     ..d\\...n\eI....
     8f3:	6d 5b 00 00 00 00 00 00 00 00 00 00 00 00 00 00     m[..............
	...

00000923 <logoInitPatches>:
     923:	00 00 00 2c 09 00 00 00 00                          ...,.....

0000092c <initPatch>:
     92c:	00 02 08 00 08 55 04 08 5a 00 00 f8 00 09 90 00     .....U..Z.......
     93c:	0a 1e 32 05 00 00 ff                                ..2....

00000943 <strTwist>:
     943:	49 52 49 53 20 57 41 53 20 41 20 46 4f 4f 4c 00     IRIS WAS A FOOL.
     953:	00 41 4e 44 20 53 4f 20 41 52 45 20 59 4f 55 00     .AND SO ARE YOU.
     963:	57 49 54 48 20 54 48 45 20 45 4d 45 52 41 4c 44     WITH THE EMERALD
     973:	53 20 52 45 54 55 52 4e 45 44 00 54 48 45 52 45     S RETURNED.THERE
     983:	20 49 53 20 4e 4f 20 53 54 4f 50 50 49 4e 47 20      IS NO STOPPING 
     993:	4f 55 52 00 44 4f 4d 49 4e 49 4f 4e 20 4f 56 45     OUR.DOMINION OVE
     9a3:	52 20 54 48 45 20 47 41 4c 41 58 59 00 00 4e 4f     R THE GALAXY..NO
     9b3:	57 20 59 4f 55 20 57 49 4c 4c 20 44 49 45 00 23     W YOU WILL DIE.#
	...

000009c4 <strReveal4>:
     9c4:	59 4f 55 20 44 4f 4e 54 20 4b 4e 4f 57 00 57 48     YOU DONT KNOW.WH
     9d4:	41 54 20 59 4f 55 20 41 52 45 20 44 4f 49 4e 47     AT YOU ARE DOING
     9e4:	00 23 00                                            .#.

000009e7 <strReveal3>:
     9e7:	59 4f 55 20 41 52 45 20 4d 41 4b 49 4e 47 20 41     YOU ARE MAKING A
     9f7:	20 4d 49 53 54 41 4b 45 00 23 00                     MISTAKE.#.

00000a02 <strReveal2>:
     a02:	59 4f 55 20 43 41 4e 54 20 48 41 56 45 20 54 48     YOU CANT HAVE TH
     a12:	45 4d 20 41 4c 4c 00 23 00                          EM ALL.#.

00000a1b <strReveal1>:
     a1b:	59 4f 55 20 41 52 45 20 50 45 52 53 49 53 54 45     YOU ARE PERSISTE
     a2b:	4e 54 00 23 00                                      NT.#.

00000a30 <strReveal0>:
     a30:	49 20 4b 4e 45 57 20 54 48 45 59 20 57 4f 55 4c     I KNEW THEY WOUL
     a40:	44 20 53 45 4e 44 20 59 4f 55 00 23 00              D SEND YOU.#.

00000a4d <strIntro>:
     a4d:	49 52 49 53 20 48 41 53 20 42 45 54 52 41 59 45     IRIS HAS BETRAYE
     a5d:	44 20 55 53 00 00 48 45 20 48 41 53 20 53 54 4f     D US..HE HAS STO
     a6d:	4c 45 4e 20 54 48 45 20 35 20 45 4d 45 52 41 4c     LEN THE 5 EMERAL
     a7d:	44 53 00 4f 46 20 50 4f 57 45 52 20 41 4e 44 20     DS.OF POWER AND 
     a8d:	57 49 4c 4c 20 53 55 52 45 4c 59 00 42 52 49 4e     WILL SURELY.BRIN
     a9d:	47 20 52 55 49 4e 20 54 4f 20 55 53 20 41 4c 4c     G RUIN TO US ALL
     aad:	00 00 44 45 53 54 52 4f 59 20 48 49 4d 20 41 4e     ..DESTROY HIM AN
     abd:	44 20 52 45 54 55 52 4e 20 54 48 45 00 45 4d 45     D RETURN THE.EME
     acd:	52 41 4c 44 53 20 54 4f 20 42 52 49 4e 47 20 50     RALDS TO BRING P
     add:	45 41 43 45 20 54 4f 00 54 48 45 20 47 41 4c 41     EACE TO.THE GALA
     aed:	58 59 00 23 00                                      XY.#.

00000af2 <default_scores>:
     af2:	55 5a 45 00 00 4c 4a 42 00 00 41 41 41 00 00 42     UZE..LJB..AAA..B
     b02:	42 42 00 00 43 43 43 00 00 44 44 44 00 00           BB..CCC..DDD..

00000b10 <strTally>:
     b10:	54 41 4c 4c 59 00                                   TALLY.

00000b16 <strGameOver>:
     b16:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

00000b20 <strLevelBonus>:
     b20:	42 4f 4e 55 53 00                                   BONUS.

00000b26 <strLevelClear>:
     b26:	4c 45 56 45 4c 20 43 4c 45 41 52 00                 LEVEL CLEAR.

00000b32 <strPaused>:
     b32:	50 41 55 53 45 00                                   PAUSE.

00000b38 <strExitGame>:
     b38:	58 20 45 58 49 54 20 47 41 4d 45 00                 X EXIT GAME.

00000b44 <strMainMenu>:
     b44:	58 20 4d 41 49 4e 20 4d 45 4e 55 00                 X MAIN MENU.

00000b50 <strTime>:
     b50:	54 49 4d 45 20 00                                   TIME .

00000b56 <strLives>:
     b56:	4c 49 56 45 53 20 00                                LIVES .

00000b5d <strShield>:
     b5d:	53 48 49 45 4c 44 20 00                             SHIELD .

00000b65 <strScore>:
     b65:	53 43 4f 52 45 20 00                                SCORE .

00000b6c <strSelectHandle>:
	...

00000b6d <strHighScores>:
     b6d:	48 49 47 48 20 53 43 4f 52 45 53 00                 HIGH SCORES.

00000b79 <str1Player>:
     b79:	53 54 41 52 54 00                                   START.

00000b7f <strMusic>:
     b7f:	4d 55 53 49 43 20 42 59 20 54 41 4e 4e 45 52 20     MUSIC BY TANNER 
     b8f:	48 45 4c 4c 41 4e 44 00                             HELLAND.

00000b97 <strCopyright>:
     b97:	32 30 31 36 20 4c 41 57 52 45 4e 43 45 20 42 52     2016 LAWRENCE BR
     ba7:	4f 4f 4b 53 00                                      OOKS.

00000bac <spacesong>:
     bac:	00 c0 00 00 c1 01 00 b0 07 7f 00 07 7f 00 90 43     ...............C
     bbc:	64 00 46 64 00 4b 64 00 4f 64 00 b1 07 74 00 91     d.Fd.Kd.Od...t..
     bcc:	33 64 00 ff 06 01 53 1d 91 33 64 0a 33 64 14 90     3d....S..3d.3d..
     bdc:	4b 64 00 46 64 00 43 64 00 91 33 64 27 33 64 14     Kd.Fd.Cd..3d'3d.
     bec:	90 46 64 00 43 64 00 4b 64 00 4f 64 00 91 33 64     .Fd.Cd.Kd.Od..3d
     bfc:	14 33 64 0a 90 41 64 00 4d 64 0a 41 64 00 46 64     .3d..Ad.Md.Ad.Fd
     c0c:	00 4a 64 00 4d 64 00 91 2e 64 1e 2e 64 09 2e 64     .Jd.Md...d..d..d
     c1c:	14 90 41 64 00 46 64 00 4a 64 00 91 2e 64 28 2e     ..Ad.Fd.Jd...d(.
     c2c:	64 14 90 41 64 00 46 64 00 4a 64 00 4d 64 00 91     d..Ad.Fd.Jd.Md..
     c3c:	2e 64 13 2e 64 0a 90 3f 64 00 4b 64 0a 3f 64 00     .d..d..?d.Kd.?d.
     c4c:	44 64 00 48 64 00 4b 64 00 91 2c 64 1e 2c 64 0a     Dd.Hd.Kd..,d.,d.
     c5c:	2c 64 14 90 41 64 00 46 64 00 4a 64 00 91 2c 64     ,d..Ad.Fd.Jd..,d
     c6c:	13 2e 64 14 90 46 64 00 91 2c 64 14 90 3f 64 00     ..d..Fd..,d..?d.
     c7c:	43 64 00 48 64 00 91 2e 64 14 30 64 14 90 43 64     Cd.Hd...d.0d..Cd
     c8c:	00 48 64 00 4b 64 00 4f 64 00 91 30 64 1d 30 64     .Hd.Kd.Od..0d.0d
     c9c:	0a 30 64 14 90 4b 64 00 48 64 00 43 64 00 91 30     .0d..Kd.Hd.Cd..0
     cac:	64 28 30 64 13 90 43 64 00 48 64 00 4b 64 00 4f     d(0d..Cd.Hd.Kd.O
     cbc:	64 00 91 30 64 14 30 64 0a 90 41 64 00 4d 64 0a     d..0d.0d..Ad.Md.
     ccc:	43 64 00 46 64 00 4b 64 00 4f 64 00 91 33 64 1e     Cd.Fd.Kd.Od..3d.
     cdc:	33 64 09 33 64 14 90 4b 64 00 46 64 00 43 64 00     3d.3d..Kd.Fd.Cd.
     cec:	91 33 64 28 33 64 14 90 46 64 00 43 64 00 4b 64     .3d(3d..Fd.Cd.Kd
     cfc:	00 4f 64 00 91 33 64 13 33 64 0a 90 41 64 00 4d     .Od..3d.3d..Ad.M
     d0c:	64 0a 41 64 00 46 64 00 4a 64 00 4d 64 00 91 2e     d.Ad.Fd.Jd.Md...
     d1c:	64 1e 2e 64 0a 2e 64 14 90 41 64 00 46 64 00 4a     d..d..d..Ad.Fd.J
     d2c:	64 00 91 2e 64 27 2e 64 14 90 41 64 00 46 64 00     d...d'.d..Ad.Fd.
     d3c:	4a 64 00 4d 64 00 91 2e 64 14 2e 64 0a 90 3f 64     Jd.Md...d..d..?d
     d4c:	00 4b 64 0a 3f 64 00 44 64 00 48 64 00 4b 64 00     .Kd.?d.Dd.Hd.Kd.
     d5c:	91 2c 64 1d 2c 64 0a 2c 64 14 90 41 64 00 46 64     .,d.,d.,d..Ad.Fd
     d6c:	00 4a 64 00 91 2c 64 14 2e 64 14 90 46 64 00 91     .Jd..,d..d..Fd..
     d7c:	2c 64 13 90 3f 64 00 43 64 00 48 64 00 91 30 64     ,d..?d.Cd.Hd..0d
     d8c:	14 30 64 14 90 48 64 00 91 2c 6e 14 2c 4b 06 90     .0d..Hd..,n.,K..
     d9c:	4a 64 0e 91 2c 4b 0d 90 4b 64 06 91 2c 6e 14 90     Jd..,K..Kd..,n..
     dac:	4d 64 00 91 2c 4b 14 2c 4b 07 90 4b 64 0d 91 2c     Md..,K.,K..Kd..,
     dbc:	6e 0d 90 4a 64 07 91 2c 4b 13 90 48 64 00 91 30     n..Jd..,K..Hd..0
     dcc:	6e 14 30 4b 07 90 4a 64 0d 91 30 4b 0d 90 46 64     n.0K..Jd..0K..Fd
     ddc:	07 91 30 6e 13 90 43 64 00 91 30 4b 14 30 4b 07     ..0n..Cd..0K.0K.
     dec:	90 46 64 0d 91 30 6e 0d 90 48 64 07 91 30 4b 14     .Fd..0n..Hd..0K.
     dfc:	90 48 64 00 91 2c 6e 13 2c 4b 07 90 4a 64 0d 91     .Hd..,n.,K..Jd..
     e0c:	2c 4b 0d 90 4b 64 07 91 2c 6e 14 90 4d 64 00 91     ,K..Kd..,n..Md..
     e1c:	2c 4b 14 2c 4b 06 90 4b 64 0d 91 2c 6e 0e 90 4d     ,K.,K..Kd..,n..M
     e2c:	64 06 91 2c 4b 14 90 4f 64 00 91 30 6e 14 30 4b     d..,K..Od..0n.0K
     e3c:	07 90 50 64 0d 91 30 4b 0e 90 4d 64 05 91 30 6e     ..Pd..0K..Md..0n
     e4c:	14 90 4f 64 00 91 30 4b 14 30 4b 07 90 4d 64 0d     ..Od..0K.0K..Md.
     e5c:	91 30 6e 0d 90 4b 64 07 91 30 4b 13 90 4d 64 00     .0n..Kd..0K..Md.
     e6c:	91 2b 6e 14 2b 4b 07 90 4f 64 0d 91 2b 4b 0d 90     .+n.+K..Od..+K..
     e7c:	4d 64 07 91 2b 6e 14 90 4b 64 00 91 2b 4b 13 2b     Md..+n..Kd..+K.+
     e8c:	4b 07 90 46 64 0d 91 2b 6e 0d 90 4b 64 07 91 2b     K..Fd..+n..Kd..+
     e9c:	4b 14 90 4d 64 00 91 2c 6e 13 2c 4b 07 90 50 64     K..Md..,n.,K..Pd
     eac:	0d 91 2c 4b 0d 90 4f 64 07 91 2c 6e 14 90 4d 64     ..,K..Od..,n..Md
     ebc:	00 91 2c 4b 14 2c 4b 06 90 48 64 0d 91 2c 6e 0e     ..,K.,K..Hd..,n.
     ecc:	90 4d 64 06 91 2c 4b 14 90 52 64 00 91 27 6e 0d     .Md..,K..Rd..'n.
     edc:	90 50 64 07 91 27 4b 06 90 4f 64 0e 50 64 00 91     .Pd..'K..Od.Pd..
     eec:	27 4b 0d 90 4f 64 06 91 27 6e 07 90 4d 64 0d 4b     'K..Od..'n..Md.K
     efc:	64 00 91 27 4b 14 27 4b 07 90 46 64 0d 91 27 6e     d..'K.'K..Fd..'n
     f0c:	0d 90 4b 64 07 91 27 4b 13 90 47 64 00 91 26 6e     ..Kd..'K..Gd..&n
     f1c:	14 26 4b 07 90 4a 64 0d 91 26 4b 0d 90 4f 64 07     .&K..Jd..&K..Od.
     f2c:	91 26 6e 14 90 53 64 00 91 26 4b 13 26 4b 07 90     .&n..Sd..&K.&K..
     f3c:	56 64 0d 91 26 6e 0d 90 5b 64 07 91 26 4b 14 90     Vd..&n..[d..&K..
     f4c:	3d 64 00 91 31 64 06 90 41 64 07 44 64 07 49 64     =d..1d..Ad.Dd.Id
     f5c:	06 4d 64 07 50 64 06 55 64 07 59 64 07 5c 64 06     .Md.Pd.Ud.Yd.\d.
     f6c:	59 64 07 55 64 06 50 64 07 4d 64 07 49 64 06 44     Yd.Ud.Pd.Md.Id.D
     f7c:	64 07 41 64 06 3d 64 07 38 64 07 3d 64 06 41 64     d.Ad.=d.8d.=d.Ad
     f8c:	07 44 64 06 49 64 07 44 64 07 41 64 06 43 64 00     .Dd.Id.Dd.Ad.Cd.
     f9c:	91 37 64 07 90 47 64 06 4a 64 07 4f 64 06 53 64     .7d..Gd.Jd.Od.Sd
     fac:	07 56 64 07 5b 64 06 5f 64 07 62 64 06 5f 64 07     .Vd.[d._d.bd._d.
     fbc:	5b 64 07 56 64 06 53 64 07 4f 64 06 4a 64 07 47     [d.Vd.Sd.Od.Jd.G
     fcc:	64 07 43 64 06 3e 64 07 43 64 06 47 64 07 4a 64     d.Cd.>d.Cd.Gd.Jd
     fdc:	07 4f 64 06 4a 64 07 47 64 06 46 64 00 91 3a 64     .Od.Jd.Gd.Fd..:d
     fec:	07 90 4a 64 07 4d 64 06 52 64 07 56 64 06 59 64     ..Jd.Md.Rd.Vd.Yd
     ffc:	07 5e 64 07 62 64 06 65 64 07 62 64 06 5e 64 07     .^d.bd.ed.bd.^d.
    100c:	59 64 07 56 64 06 52 64 07 4d 64 06 4a 64 07 46     Yd.Vd.Rd.Md.Jd.F
    101c:	64 07 41 64 06 46 64 07 4a 64 06 4d 64 07 52 64     d.Ad.Fd.Jd.Md.Rd
    102c:	07 4d 64 06 4a 64 07 54 7f 00 43 64 00 48 64 00     .Md.Jd.T..Cd.Hd.
    103c:	4b 64 00 4f 64 00 91 30 64 1d 30 64 0a 30 64 14     Kd.Od..0d.0d.0d.
    104c:	90 4b 64 00 48 64 00 43 64 00 91 30 64 28 30 64     .Kd.Hd.Cd..0d(0d
    105c:	14 90 43 64 00 48 64 00 4b 64 00 4f 64 00 91 30     ..Cd.Hd.Kd.Od..0
    106c:	64 13 30 64 0a 90 41 64 00 4d 64 0a 43 64 00 46     d.0d..Ad.Md.Cd.F
    107c:	64 00 4b 64 00 4f 64 00 91 33 64 1e 33 64 0a 33     d.Kd.Od..3d.3d.3
    108c:	64 14 90 4b 64 00 46 64 00 43 64 00 91 33 64 27     d..Kd.Fd.Cd..3d'
    109c:	33 64 14 90 46 64 00 43 64 00 4b 64 00 4f 64 00     3d..Fd.Cd.Kd.Od.
    10ac:	91 33 64 14 33 64 0a 90 41 64 00 4d 64 0a 41 64     .3d.3d..Ad.Md.Ad
    10bc:	00 46 64 00 4a 64 00 4d 64 00 91 2e 64 1d 2e 64     .Fd.Jd.Md...d..d
    10cc:	0a 2e 64 14 90 41 64 00 46 64 00 4a 64 00 91 2e     ..d..Ad.Fd.Jd...
    10dc:	64 27 2e 64 14 90 41 64 00 46 64 00 4a 64 00 4d     d'.d..Ad.Fd.Jd.M
    10ec:	64 00 91 2e 64 14 2e 64 0a 90 3f 64 00 4b 64 0a     d...d..d..?d.Kd.
    10fc:	3f 64 00 44 64 00 48 64 00 4b 64 00 91 2c 64 1e     ?d.Dd.Hd.Kd..,d.
    110c:	2c 64 09 2c 64 14 90 41 64 00 46 64 00 4a 64 00     ,d.,d..Ad.Fd.Jd.
    111c:	91 2c 64 14 2e 64 14 90 46 64 00 91 2c 64 14 90     .,d..d..Fd..,d..
    112c:	3f 64 00 43 64 00 48 64 00 91 2e 64 13 30 64 14     ?d.Cd.Hd...d.0d.
    113c:	90 43 64 00 48 64 00 4b 64 00 4f 64 00 91 30 64     .Cd.Hd.Kd.Od..0d
    114c:	1e 30 64 0a 30 64 14 90 4b 64 00 48 64 00 43 64     .0d.0d..Kd.Hd.Cd
    115c:	00 91 30 64 27 30 64 14 90 43 64 00 48 64 00 4b     ..0d'0d..Cd.Hd.K
    116c:	64 00 4f 64 00 91 30 64 14 30 64 0a 90 41 64 00     d.Od..0d.0d..Ad.
    117c:	4d 64 0a 43 64 00 46 64 00 4b 64 00 4f 64 00 91     Md.Cd.Fd.Kd.Od..
    118c:	33 64 1d 33 64 0a 33 64 14 90 4b 64 00 46 64 00     3d.3d.3d..Kd.Fd.
    119c:	43 64 00 91 33 64 28 33 64 13 90 46 64 00 43 64     Cd..3d(3d..Fd.Cd
    11ac:	00 4b 64 00 4f 64 00 91 33 64 14 33 64 0a 90 41     .Kd.Od..3d.3d..A
    11bc:	64 00 4d 64 0a 41 64 00 46 64 00 4a 64 00 4d 64     d.Md.Ad.Fd.Jd.Md
    11cc:	00 91 2e 64 1e 2e 64 09 2e 64 14 90 41 64 00 46     ...d..d..d..Ad.F
    11dc:	64 00 4a 64 00 91 2e 64 28 2e 64 14 90 41 64 00     d.Jd...d(.d..Ad.
    11ec:	46 64 00 4a 64 00 4d 64 00 91 2e 64 13 2e 64 0a     Fd.Jd.Md...d..d.
    11fc:	90 3f 64 00 4b 64 0a 3f 64 00 44 64 00 48 64 00     .?d.Kd.?d.Dd.Hd.
    120c:	4b 64 00 91 2c 64 1e 2c 64 0a 2c 64 14 90 41 64     Kd..,d.,d.,d..Ad
    121c:	00 46 64 00 4a 64 00 91 2c 64 13 2e 64 14 90 46     .Fd.Jd..,d..d..F
    122c:	64 00 91 2c 64 0f ff 06 01 45 05 90 3f 64 00 43     d..,d....E..?d.C
    123c:	64 00 48 64 00 91 30 64 14 30 64 81 0a ff 2f 00     d.Hd..0d.0d.../.

0000124c <planetsong>:
    124c:	00 c0 00 00 c1 01 00 b0 07 7f 00 b1 07 74 00 ff     .............t..
    125c:	06 01 53 1b 90 48 78 00 91 30 6e 07 90 43 55 00     ..S..Hx..0n..CU.
    126c:	91 30 50 07 90 48 55 00 91 30 50 07 90 4a 78 00     .0P..HU..0P..Jx.
    127c:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 48 55 00     .0n..KU..0P..HU.
    128c:	91 30 50 07 90 4a 78 00 91 30 6e 07 90 4b 55 00     .0P..Jx..0n..KU.
    129c:	91 30 50 07 90 4d 55 00 91 30 50 07 90 4a 78 00     .0P..MU..0P..Jx.
    12ac:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 4d 55 00     .0n..KU..0P..MU.
    12bc:	91 30 50 07 90 4f 78 00 91 30 6e 07 90 4b 55 00     .0P..Ox..0n..KU.
    12cc:	91 30 50 07 90 4d 78 00 91 2e 6e 07 90 4f 55 07     .0P..Mx...n..OU.
    12dc:	50 78 00 91 30 6e 06 90 4d 55 00 91 30 50 07 90     Px..0n..MU..0P..
    12ec:	4f 55 00 91 30 50 07 90 4b 78 00 91 30 6e 07 90     OU..0P..Kx..0n..
    12fc:	4d 55 00 91 30 50 07 90 4a 55 00 91 30 50 07 30     MU..0P..JU..0P.0
    130c:	6e 03 90 4b 78 04 48 55 00 91 30 50 07 90 4a 55     n..Kx.HU..0P..JU
    131c:	00 91 30 50 07 90 46 78 00 91 30 6e 07 90 4d 55     ..0P..Fx..0n..MU
    132c:	00 91 30 50 07 90 46 78 00 91 30 50 07 90 4f 55     ..0P..Fx..0P..OU
    133c:	00 91 30 6e 07 90 46 78 00 91 30 50 07 90 4d 55     ..0n..Fx..0P..MU
    134c:	00 91 2e 6e 07 90 46 78 07 48 55 00 91 30 6e 07     ...n..Fx.HU..0n.
    135c:	90 43 55 00 91 30 50 07 90 48 55 00 91 30 50 07     .CU..0P..HU..0P.
    136c:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    137c:	90 48 55 00 91 30 50 06 90 4a 55 00 91 30 6e 07     .HU..0P..JU..0n.
    138c:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 30 50 07     .KU..0P..MU..0P.
    139c:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    13ac:	90 4d 55 00 91 30 50 07 90 4f 55 00 91 30 6e 07     .MU..0P..OU..0n.
    13bc:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 2e 6e 07     .KU..0P..MU...n.
    13cc:	90 4f 55 07 50 55 00 91 30 6e 07 90 4d 55 00 91     .OU.PU..0n..MU..
    13dc:	30 50 07 90 4f 55 00 91 30 50 07 90 4b 55 00 91     0P..OU..0P..KU..
    13ec:	30 6e 07 90 4d 55 00 91 30 50 07 90 4a 55 00 91     0n..MU..0P..JU..
    13fc:	30 50 07 30 6e 02 90 4b 55 05 48 55 00 91 30 50     0P.0n..KU.HU..0P
    140c:	07 90 4a 55 00 91 30 50 07 90 46 55 00 91 30 6e     ..JU..0P..FU..0n
    141c:	06 90 4d 55 00 91 30 50 07 90 46 55 00 91 30 50     ..MU..0P..FU..0P
    142c:	07 90 4f 55 00 91 30 6e 07 90 46 55 00 91 30 50     ..OU..0n..FU..0P
    143c:	07 90 4d 55 00 91 2e 6e 07 90 46 55 07 48 78 00     ..MU...n..FU.Hx.
    144c:	91 2c 6e 07 90 43 55 00 91 2c 50 07 90 48 55 00     .,n..CU..,P..HU.
    145c:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
    146c:	91 2c 50 07 90 48 55 00 91 2c 50 07 90 4a 78 00     .,P..HU..,P..Jx.
    147c:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 55 00     .,n..KU..,P..MU.
    148c:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
    149c:	91 2c 50 07 90 4d 55 00 91 2c 50 07 90 4f 78 00     .,P..MU..,P..Ox.
    14ac:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 78 00     .,n..KU..,P..Mx.
    14bc:	91 2b 6e 06 90 4f 55 07 50 78 00 91 2c 6e 07 90     .+n..OU.Px..,n..
    14cc:	4d 55 00 91 2c 50 07 90 4f 55 00 91 2c 50 07 90     MU..,P..OU..,P..
    14dc:	4b 78 00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90     Kx..,n..MU..,P..
    14ec:	4a 55 00 91 2c 50 07 2c 6e 02 90 4b 78 05 48 55     JU..,P.,n..Kx.HU
    14fc:	00 91 2c 50 07 90 4a 55 00 91 2c 50 07 90 46 78     ..,P..JU..,P..Fx
    150c:	00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90 46 78     ..,n..MU..,P..Fx
    151c:	00 91 2c 50 07 90 4f 55 00 91 2c 6e 07 90 46 78     ..,P..OU..,n..Fx
    152c:	00 91 2c 50 07 90 4d 55 00 91 2b 6e 07 90 46 78     ..,P..MU..+n..Fx
    153c:	07 48 55 00 91 29 6e 07 90 43 55 00 91 29 50 07     .HU..)n..CU..)P.
    154c:	90 48 55 00 91 29 50 06 90 4a 55 00 91 29 6e 07     .HU..)P..JU..)n.
    155c:	90 4b 55 00 91 29 50 07 90 48 55 00 91 29 50 07     .KU..)P..HU..)P.
    156c:	90 4a 55 00 91 2b 6e 07 90 4b 55 00 91 2b 50 07     .JU..+n..KU..+P.
    157c:	90 4d 55 00 91 2b 50 07 90 4a 55 00 91 2b 6e 07     .MU..+P..JU..+n.
    158c:	90 4b 55 00 91 2b 50 07 90 4d 55 00 91 2b 50 07     .KU..+P..MU..+P.
    159c:	90 4f 55 00 91 2c 6e 07 90 4b 55 00 91 2c 50 07     .OU..,n..KU..,P.
    15ac:	90 4d 55 00 91 2c 6e 07 90 4f 55 07 50 55 00 91     .MU..,n..OU.PU..
    15bc:	2e 6e 07 90 4d 55 00 91 2e 50 07 90 4f 55 00 91     .n..MU...P..OU..
    15cc:	2e 50 07 90 4b 55 00 91 2e 6e 07 90 4d 55 00 91     .P..KU...n..MU..
    15dc:	2e 50 07 90 4a 55 00 91 2e 50 07 2e 6e 02 90 4b     .P..JU...P..n..K
    15ec:	55 05 48 55 00 91 2e 50 06 90 4a 55 00 91 2e 50     U.HU...P..JU...P
    15fc:	07 90 46 55 00 91 2e 6e 07 90 4d 55 00 91 2e 50     ..FU...n..MU...P
    160c:	07 90 46 55 00 91 2e 50 07 90 4f 55 00 91 2e 6e     ..FU...P..OU...n
    161c:	07 90 46 55 00 91 2e 50 07 90 4d 55 00 91 2e 6e     ..FU...P..MU...n
    162c:	07 90 46 55 07 48 55 00 91 30 6e 07 90 43 55 00     ..FU.HU..0n..CU.
    163c:	91 30 50 07 90 48 55 00 91 30 50 07 90 4a 55 00     .0P..HU..0P..JU.
    164c:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 48 55 00     .0n..KU..0P..HU.
    165c:	91 30 50 07 90 4a 55 00 91 30 6e 07 90 4b 55 00     .0P..JU..0n..KU.
    166c:	91 30 50 07 90 4d 55 00 91 30 50 07 90 4a 55 00     .0P..MU..0P..JU.
    167c:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 4d 55 00     .0n..KU..0P..MU.
    168c:	91 30 50 07 90 4f 55 00 91 30 6e 06 90 4b 55 00     .0P..OU..0n..KU.
    169c:	91 30 50 07 90 4d 55 00 91 2e 6e 07 90 4f 55 07     .0P..MU...n..OU.
    16ac:	50 55 00 91 30 6e 07 90 4d 55 00 91 30 50 07 90     PU..0n..MU..0P..
    16bc:	4f 55 00 91 30 50 07 90 4b 55 00 91 30 6e 07 90     OU..0P..KU..0n..
    16cc:	4d 55 00 91 30 50 07 90 4a 55 00 91 30 50 07 30     MU..0P..JU..0P.0
    16dc:	6e 02 90 4b 55 05 48 55 00 91 30 50 07 90 4a 55     n..KU.HU..0P..JU
    16ec:	00 91 30 50 07 90 46 55 00 91 30 6e 07 90 4d 55     ..0P..FU..0n..MU
    16fc:	00 91 30 50 07 90 46 55 00 91 30 50 07 90 4f 55     ..0P..FU..0P..OU
    170c:	00 91 30 6e 07 90 46 55 00 91 30 50 07 90 4d 55     ..0n..FU..0P..MU
    171c:	00 91 2e 6e 07 90 46 55 07 48 55 00 91 30 6e 06     ...n..FU.HU..0n.
    172c:	90 43 55 00 91 30 50 07 90 48 55 00 91 30 50 07     .CU..0P..HU..0P.
    173c:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    174c:	90 48 55 00 91 30 50 07 90 4a 55 00 91 30 6e 07     .HU..0P..JU..0n.
    175c:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 30 50 07     .KU..0P..MU..0P.
    176c:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    177c:	90 4d 55 00 91 30 50 07 90 4f 55 00 91 30 6e 07     .MU..0P..OU..0n.
    178c:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 2e 6e 07     .KU..0P..MU...n.
    179c:	90 4f 55 07 50 55 00 91 30 6e 07 90 4d 55 00 91     .OU.PU..0n..MU..
    17ac:	30 50 07 90 4f 55 00 91 30 50 07 90 4b 55 00 91     0P..OU..0P..KU..
    17bc:	30 6e 07 90 4d 55 00 91 30 50 07 90 4a 55 00 91     0n..MU..0P..JU..
    17cc:	30 50 06 30 6e 03 90 4b 55 04 48 55 00 91 30 50     0P.0n..KU.HU..0P
    17dc:	07 90 4a 55 00 91 30 50 07 90 46 55 00 91 30 6e     ..JU..0P..FU..0n
    17ec:	07 90 4d 55 00 91 30 50 07 90 46 55 00 91 30 50     ..MU..0P..FU..0P
    17fc:	07 90 4f 55 00 91 30 6e 07 90 46 55 00 91 30 50     ..OU..0n..FU..0P
    180c:	07 90 4d 55 00 91 2e 6e 07 90 46 55 07 48 78 00     ..MU...n..FU.Hx.
    181c:	91 2c 6e 07 90 43 55 00 91 2c 50 07 90 48 55 00     .,n..CU..,P..HU.
    182c:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
    183c:	91 2c 50 07 90 48 55 00 91 2c 50 07 90 4a 78 00     .,P..HU..,P..Jx.
    184c:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 55 00     .,n..KU..,P..MU.
    185c:	91 2c 50 07 90 4a 78 00 91 2c 6e 06 90 4b 55 00     .,P..Jx..,n..KU.
    186c:	91 2c 50 07 90 4d 55 00 91 2c 50 07 90 4f 78 00     .,P..MU..,P..Ox.
    187c:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 78 00     .,n..KU..,P..Mx.
    188c:	91 2b 6e 07 90 4f 55 07 50 78 00 91 2c 6e 07 90     .+n..OU.Px..,n..
    189c:	4d 55 00 91 2c 50 07 90 4f 55 00 91 2c 50 07 90     MU..,P..OU..,P..
    18ac:	4b 78 00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90     Kx..,n..MU..,P..
    18bc:	4a 55 00 91 2c 50 07 2c 6e 02 90 4b 78 05 48 55     JU..,P.,n..Kx.HU
    18cc:	00 91 2c 50 07 90 4a 55 00 91 2c 50 07 90 46 78     ..,P..JU..,P..Fx
    18dc:	00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90 46 78     ..,n..MU..,P..Fx
    18ec:	00 91 2c 50 07 90 4f 55 00 91 2c 6e 07 90 46 78     ..,P..OU..,n..Fx
    18fc:	00 91 2c 50 07 90 4d 55 00 91 2b 6e 06 90 46 78     ..,P..MU..+n..Fx
    190c:	07 48 55 00 91 29 6e 07 90 43 55 00 91 29 50 07     .HU..)n..CU..)P.
    191c:	90 48 55 00 91 29 50 07 90 4a 55 00 91 29 6e 07     .HU..)P..JU..)n.
    192c:	90 4b 55 00 91 29 50 07 90 48 55 00 91 29 50 07     .KU..)P..HU..)P.
    193c:	90 4a 55 00 91 2b 6e 07 90 4b 55 00 91 2b 50 07     .JU..+n..KU..+P.
    194c:	90 4d 55 00 91 2b 50 07 90 4a 55 00 91 2b 6e 07     .MU..+P..JU..+n.
    195c:	90 4b 55 00 91 2b 50 07 90 4d 55 00 91 2b 50 07     .KU..+P..MU..+P.
    196c:	90 4f 55 00 91 2c 6e 07 90 4b 55 00 91 2c 50 07     .OU..,n..KU..,P.
    197c:	90 4d 55 00 91 2c 6e 07 90 4f 55 07 50 55 00 91     .MU..,n..OU.PU..
    198c:	2e 6e 07 90 4d 55 00 91 2e 50 07 90 4f 55 00 91     .n..MU...P..OU..
    199c:	2e 50 07 90 4b 55 00 91 2e 6e 06 90 4d 55 00 91     .P..KU...n..MU..
    19ac:	2e 50 07 90 4a 55 00 91 2e 50 07 2e 6e 03 90 4b     .P..JU...P..n..K
    19bc:	55 04 48 55 00 91 2e 50 07 90 4a 55 00 91 2e 50     U.HU...P..JU...P
    19cc:	07 90 46 55 00 91 2e 6e 07 90 4d 55 00 91 2e 50     ..FU...n..MU...P
    19dc:	07 90 46 55 00 91 2e 50 07 90 4f 55 00 91 30 6e     ..FU...P..OU..0n
    19ec:	07 90 46 55 00 91 30 50 07 90 4d 55 00 91 2e 6e     ..FU..0P..MU...n
    19fc:	07 90 46 55 07 54 64 00 48 64 00 91 30 6e 07 30     ..FU.Td.Hd..0n.0
    1a0c:	50 07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e     P.0P.0n.0P.0P.0n
    1a1c:	07 30 50 06 30 50 07 30 6e 07 30 50 07 30 50 07     .0P.0P.0n.0P.0P.
    1a2c:	30 6e 07 30 50 07 2e 6e 0e 30 6e 07 30 50 07 30     0n.0P..n.0n.0P.0
    1a3c:	50 07 30 6e 07 30 50 07 30 50 07 30 6e 07 30 50     P.0n.0P.0P.0n.0P
    1a4c:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 06     .0P.0n.0P.0P.0n.
    1a5c:	30 50 07 2e 6e 0e 90 33 64 00 37 64 00 3c 64 00     0P..n..3d.7d.<d.
    1a6c:	91 30 6e 07 30 50 07 30 50 07 90 32 64 00 37 64     .0n.0P.0P..2d.7d
    1a7c:	00 3a 64 00 91 30 6e 07 30 50 07 30 50 07 90 33     .:d..0n.0P.0P..3
    1a8c:	64 00 37 64 00 3c 64 00 91 30 6e 07 30 50 07 30     d.7d.<d..0n.0P.0
    1a9c:	50 07 90 37 64 00 3a 64 00 3e 64 00 91 30 6e 07     P..7d.:d.>d..0n.
    1aac:	30 50 07 30 50 07 90 37 64 00 3c 64 00 3f 64 00     0P.0P..7d.<d.?d.
    1abc:	91 30 6e 07 30 50 07 90 37 64 00 3a 64 00 3e 64     .0n.0P..7d.:d.>d
    1acc:	00 91 30 6e 07 30 6e 07 90 3a 64 00 43 64 00 3f     ..0n.0n..:d.Cd.?
    1adc:	64 00 91 33 6e 06 33 50 07 33 50 07 33 6e 07 33     d..3n.3P.3P.3n.3
    1aec:	50 07 33 50 07 90 37 64 00 3a 64 00 3f 64 00 91     P.3P..7d.:d.?d..
    1afc:	33 6e 07 33 50 07 33 50 07 33 6e 07 33 50 07 33     3n.3P.3P.3n.3P.3
    1b0c:	50 07 90 3a 64 00 3f 64 00 43 64 00 91 33 6e 07     P..:d.?d.Cd..3n.
    1b1c:	33 50 07 33 6e 07 33 6e 07 90 41 64 00 3e 64 00     3P.3n.3n..Ad.>d.
    1b2c:	3a 64 00 91 2e 6e 07 2e 50 07 2e 50 07 2e 6e 07     :d...n..P..P..n.
    1b3c:	2e 50 07 2e 50 06 90 35 64 00 3a 64 00 3e 64 00     .P..P..5d.:d.>d.
    1b4c:	91 2e 6e 07 2e 50 07 2e 50 07 2e 6e 07 2e 50 07     ..n..P..P..n..P.
    1b5c:	2e 50 07 90 3a 64 00 3e 64 00 41 64 00 91 2e 6e     .P..:d.>d.Ad...n
    1b6c:	07 2e 50 07 2e 6e 07 2e 6e 07 90 37 64 00 3c 64     ..P..n..n..7d.<d
    1b7c:	00 3f 64 00 91 30 6e 07 30 50 07 30 50 07 30 6e     .?d..0n.0P.0P.0n
    1b8c:	07 30 50 07 30 50 07 30 6e 07 30 50 07 30 50 07     .0P.0P.0n.0P.0P.
    1b9c:	30 6e 06 30 50 07 30 50 07 30 6e 07 30 50 07 2e     0n.0P.0P.0n.0P..
    1bac:	6e 0e 30 6e 07 30 50 07 30 50 07 30 6e 07 30 50     n.0n.0P.0P.0n.0P
    1bbc:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 07     .0P.0n.0P.0P.0n.
    1bcc:	30 50 07 30 50 07 30 6e 07 30 50 07 2e 6e 0d 90     0P.0P.0n.0P..n..
    1bdc:	33 64 00 37 64 00 3c 64 00 91 30 6e 07 30 50 07     3d.7d.<d..0n.0P.
    1bec:	30 50 07 90 32 64 00 37 64 00 3a 64 00 91 30 6e     0P..2d.7d.:d..0n
    1bfc:	07 30 50 07 30 50 07 90 33 64 00 37 64 00 3c 64     .0P.0P..3d.7d.<d
    1c0c:	00 91 30 6e 07 30 50 07 30 50 07 90 37 64 00 3a     ..0n.0P.0P..7d.:
    1c1c:	64 00 3e 64 00 91 30 6e 07 30 50 07 30 50 07 90     d.>d..0n.0P.0P..
    1c2c:	37 64 00 3c 64 00 3f 64 00 91 30 6e 07 30 50 07     7d.<d.?d..0n.0P.
    1c3c:	90 37 64 00 3a 64 00 3e 64 00 91 2e 6e 0e 90 3a     .7d.:d.>d...n..:
    1c4c:	64 00 43 64 00 3f 64 00 91 33 6e 07 33 50 07 33     d.Cd.?d..3n.3P.3
    1c5c:	50 07 33 6e 06 33 50 07 33 50 07 90 37 64 00 3a     P.3n.3P.3P..7d.:
    1c6c:	64 00 3f 64 00 91 33 6e 07 33 50 07 33 50 07 33     d.?d..3n.3P.3P.3
    1c7c:	6e 07 33 50 07 33 50 07 90 3a 64 00 3f 64 00 43     n.3P.3P..:d.?d.C
    1c8c:	64 00 91 33 6e 07 33 50 07 32 6e 0e 90 41 64 00     d..3n.3P.2n..Ad.
    1c9c:	3e 64 00 3a 64 00 91 2e 6e 07 2e 50 07 2e 50 07     >d.:d...n..P..P.
    1cac:	2e 6e 07 2e 50 07 2e 50 07 90 35 64 00 3a 64 00     .n..P..P..5d.:d.
    1cbc:	3e 64 00 91 2e 6e 07 2e 50 06 2e 50 07 2e 6e 07     >d...n..P..P..n.
    1ccc:	2e 50 07 2e 50 07 90 3a 64 00 3e 64 00 41 64 00     .P..P..:d.>d.Ad.
    1cdc:	91 2e 6e 05 ff 06 01 45 02 91 2e 50 07 2c 6e 0e     ..n....E...P.,n.
    1cec:	90 37 64 00 3c 64 00 3f 64 00 91 30 6e 07 30 50     .7d.<d.?d..0n.0P
    1cfc:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 07     .0P.0n.0P.0P.0n.
    1d0c:	30 50 07 30 50 07 30 6e 07 30 50 07 30 50 07 ff     0P.0P.0n.0P.0P..
    1d1c:	2f 00                                               /.

00001d1e <my_patches>:
    1d1e:	00 00 00 95 1e 00 00 00 00 00 00 00 95 1e 00 00     ................
    1d2e:	00 00 00 00 00 84 1e 00 00 00 00 00 00 00 2e 1e     ................
    1d3e:	00 00 00 00 00 00 00 84 1e 00 00 00 00 00 00 00     ................
    1d4e:	5d 1d 00 00 00 00 00 00 00 5d 1d 00 00 00 00        ]........].....

00001d5d <explode>:
    1d5d:	00 07 7f 00 02 03 00 00 ff 00 08 41 01 04 04 01     ...........A....
    1d6d:	04 04 01 04 04 01 04 04 01 04 04 01 04 04 01 04     ................
    1d7d:	04 01 04 04 01 04 04 03 07 64 00 08 3c 01 04 04     .........d..<...
    1d8d:	01 04 04 01 04 04 01 04 04 01 04 04 01 04 04 01     ................
    1d9d:	04 04 01 04 04 01 04 04 03 07 50 00 08 37 01 04     ..........P..7..
    1dad:	04 01 04 04 01 04 04 01 04 04 01 04 04 01 04 04     ................
    1dbd:	01 04 04 01 04 04 01 04 04 03 07 32 00 08 32 01     ...........2..2.
    1dcd:	04 04 01 04 04 01 04 04 01 04 04 01 04 04 01 04     ................
    1ddd:	04 01 04 04 01 04 04 01 04 04 03 07 28 00 08 2d     ............(..-
    1ded:	01 04 04 01 04 04 01 04 04 01 04 04 01 04 04 01     ................
    1dfd:	04 04 01 04 04 01 04 04 01 04 04 03 07 14 00 08     ................
    1e0d:	28 01 04 04 01 04 04 01 04 04 01 04 04 01 04 04     (...............
    1e1d:	01 04 04 01 04 04 01 04 04 01 04 04 01 05 00 00     ................
    1e2d:	ff                                                  .

00001e2e <pshoot>:
    1e2e:	00 02 03 00 07 7f 00 08 50 01 04 06 01 04 06 01     ........P.......
    1e3e:	04 06 01 07 00 03 07 7f 00 08 50 01 04 06 01 04     ..........P.....
    1e4e:	06 01 04 06 01 07 00 03 08 50 00 07 20 01 04 06     .........P.. ...
    1e5e:	01 04 06 01 04 06 01 04 06 01 07 00 03 08 50 00     ..............P.
    1e6e:	07 0f 01 04 06 01 04 06 01 04 06 01 04 06 01 07     ................
    1e7e:	00 01 05 00 00 ff                                   ......

00001e84 <navigate>:
    1e84:	00 02 04 00 07 70 00 00 d8 00 08 3c 01 05 00 00     .....p.....<....
    1e94:	ff                                                  .

00001e95 <instrument>:
    1e95:	00 02 04 00 00 dd 00 ff                             ........

00001e9d <sprites_data>:
    1e9d:	fe fe fe fe fe fe fe 87 fe fe fe fe fe fe 87 87     ................
    1ead:	fe fe fe fe fe fe 87 87 fe fe fe fe 85 85 85 87     ................
    1ebd:	fe fe fe 85 87 87 87 85 fe fe 85 87 87 87 87 85     ................
    1ecd:	fe 85 87 87 87 85 85 87 85 87 87 85 85 87 87 87     ................
    1edd:	87 87 87 fe fe fe fe fe d2 d2 eb d2 fe fe fe fe     ................
    1eed:	87 d2 fd eb fe fe fe fe 87 87 eb d2 fe fe fe fe     ................
    1efd:	85 87 87 d2 fe fe fe fe 87 85 85 87 85 fe fe fe     ................
    1f0d:	87 ef 87 87 87 85 fe fe ef ff ef 87 87 85 fe fe     ................
    1f1d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 87     ................
    1f2d:	fe fe fe fe fe fe 87 87 fe fe fe fe fe fe 87 87     ................
    1f3d:	fe fe fe fe 85 85 85 87 fe fe fe 85 87 87 87 85     ................
    1f4d:	fe fe 85 87 87 87 87 85 fe 85 87 87 87 85 85 87     ................
    1f5d:	fe fe fe fe fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    1f6d:	d2 d2 eb d2 fe fe fe fe 87 d2 fd eb fe fe fe fe     ................
    1f7d:	87 87 eb d2 fe fe fe fe 85 87 87 d2 fe fe fe fe     ................
    1f8d:	87 85 85 87 85 fe fe fe 87 ef 87 87 87 85 fe fe     ................
    1f9d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1fad:	fe fe fe fe fe fe fe fe fe ba ba ba ba ba ba fe     ................
    1fbd:	ba bd bd bd bd bd bd ba fe ba ba ba ba ba ba fe     ................
    1fcd:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1fdd:	fe fe 46 46 46 46 46 46 fe a5 a5 a5 47 47 46 fe     ..FFFFFF....GGF.
    1fed:	fe 46 46 47 47 46 3f 3f 46 46 47 47 46 fe fe fe     .FFGGF??FFGGF...
    1ffd:	46 46 47 47 46 fe fe fe fe 46 46 47 47 3f 3f fe     FFGGF....FFGG??.
    200d:	fe a5 a5 a5 47 fe fe fe fe fe 46 46 46 46 fe fe     ....G.....FFFF..
    201d:	fe fe fe 07 fe fe fe fe fe fe 07 07 07 fe fe fe     ................
    202d:	fe 07 07 27 07 07 fe fe 07 07 27 77 27 07 07 fe     ...'......'w'...
    203d:	fe 07 07 27 07 07 fe fe fe fe 07 07 07 fe fe fe     ...'............
    204d:	fe fe fe 07 fe fe fe fe fe fe fe fe fe fe fe fe     ................
    205d:	fe fe fe d2 fe fe fe fe fe fe d2 d2 d2 fe fe fe     ................
    206d:	fe d2 d2 e4 d2 d2 fe fe d2 d2 e4 f5 e4 d2 d2 fe     ................
    207d:	fe d2 d2 e4 d2 d2 fe fe fe fe d2 d2 d2 fe fe fe     ................
    208d:	fe fe fe d2 fe fe fe fe fe fe fe fe fe fe fe fe     ................
    209d:	fe fe fe 38 fe fe fe fe fe fe 38 38 38 fe fe fe     ...8......888...
    20ad:	fe 38 38 bc 38 38 fe fe 38 38 bc be bc 38 38 fe     .88.88..88...88.
    20bd:	fe 38 38 bc 38 38 fe fe fe fe 38 38 38 fe fe fe     .88.88....888...
    20cd:	fe fe fe 38 fe fe fe fe fe fe fe fe fe fe fe fe     ...8............
    20dd:	fe fe fe a2 fe fe fe fe fe fe a2 a2 a2 fe fe fe     ................
    20ed:	fe a2 a2 aa a2 a2 fe fe a2 a2 aa ad aa a2 a2 fe     ................
    20fd:	fe a2 a2 aa a2 a2 fe fe fe fe a2 a2 a2 fe fe fe     ................
    210d:	fe fe fe a2 fe fe fe fe fe fe fe fe fe fe fe fe     ................
    211d:	fe fe fe 6e fe fe fe fe fe fe 6e 6e 6e fe fe fe     ...n......nnn...
    212d:	fe 6e 6e 6f 6e 6e fe fe 6e 6e 6f 77 6f 6e 6e fe     .nnonn..nnowonn.
    213d:	fe 6e 6e 6f 6e 6e fe fe fe fe 6e 6e 6e fe fe fe     .nnonn....nnn...
    214d:	fe fe fe 6e fe fe fe fe fe fe fe fe fe fe fe fe     ...n............
    215d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    216d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    217d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    218d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    219d:	85 87 87 85 fe 85 87 87 fe 85 87 85 fe 85 87 87     ................
    21ad:	fe 85 87 87 ad ad ad ad fe fe 85 87 ad ad ad ad     ................
    21bd:	fe fe 85 87 ad ad ad ad fe fe fe 85 a4 ad 87 87     ................
    21cd:	fe fe fe fe a4 a4 85 87 fe fe fe fe a4 a4 85 87     ................
    21dd:	87 ef 87 85 87 85 fe fe 87 87 87 85 87 87 85 fe     ................
    21ed:	ad ad ad ad ad 87 85 fe ad ad ad ad ad ad a4 ad     ................
    21fd:	ad ad ad ad ad a4 a4 a4 87 87 87 85 fe fe fe fe     ................
    220d:	87 87 87 85 fe fe fe fe 87 87 87 85 fe fe fe fe     ................
    221d:	87 ef 87 85 87 85 fe fe 87 87 87 85 87 87 85 fe     ................
    222d:	ad ad ad ad ad 87 85 fe ad ad ad ad ad ad a4 ad     ................
    223d:	ad ad ad ad ad a4 a4 a4 87 87 87 85 fe fe fe fe     ................
    224d:	87 87 87 85 fe fe fe fe 87 87 85 fe fe fe fe fe     ................
    225d:	85 87 87 85 85 87 87 87 85 87 87 85 fe 85 87 87     ................
    226d:	fe 85 87 85 fe 85 87 87 fe 85 87 87 ad ad ad ad     ................
    227d:	fe fe 85 87 ad ad ad ad fe fe 85 87 ad ad ad ad     ................
    228d:	fe fe fe 85 a4 ad 87 87 fe fe fe fe a4 a4 85 87     ................
    229d:	ef ff ef 87 87 85 fe fe 87 ef 87 85 87 85 fe fe     ................
    22ad:	87 87 87 85 87 87 85 fe ad ad ad ad ad 87 85 fe     ................
    22bd:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    22cd:	87 87 87 87 fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    22dd:	87 ef 87 85 87 85 fe fe 87 87 87 85 87 87 85 fe     ................
    22ed:	ad ad ad ad ad 87 85 fe ad ad ad ad ad ad a4 ad     ................
    22fd:	ad ad ad ad ad a4 a4 a4 87 87 87 87 fe fe fe fe     ................
    230d:	87 87 87 87 fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    231d:	ef ff ef 87 87 85 fe fe 87 ef 87 85 87 85 fe fe     ................
    232d:	87 87 87 85 87 87 85 fe ad ad ad ad ad 87 85 fe     ................
    233d:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    234d:	87 87 87 87 fe fe fe fe 87 87 87 87 87 fe fe fe     ................
    235d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    236d:	fe fe fe 27 07 fe fe fe fe fe 27 77 27 07 fe fe     ...'......'w'...
    237d:	fe fe 07 27 07 07 fe fe fe fe fe 07 07 fe fe fe     ...'............
    238d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    239d:	fe fe fe fe fe fe 85 87 fe fe fe fe fe fe 85 87     ................
    23ad:	fe fe fe fe fe 85 87 87 fe fe fe fe fe 85 87 87     ................
    23bd:	fe fe fe fe 85 87 87 fe fe fe fe fe 85 87 87 fe     ................
    23cd:	fe fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4     ................
    23dd:	87 fe 85 85 fe fe fe fe 87 fe 85 85 85 fe fe fe     ................
    23ed:	fe fe 85 85 85 fe fe fe fe fe 85 85 85 fe fe fe     ................
    23fd:	fe fe 85 85 85 fe fe fe fe fe 85 85 85 fe fe fe     ................
    240d:	fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe     ................
    241d:	fe fe fe fe fe fe fe 85 fe fe fe fe fe fe fe 85     ................
    242d:	fe fe fe fe fe 85 85 87 fe fe fe fe 85 87 87 87     ................
    243d:	fe fe fe a4 87 87 87 87 fe fe fe a4 87 87 87 fe     ................
    244d:	fe fe fe a4 a4 fe fe fe fe fe fe a4 a4 a4 fe fe     ................
    245d:	87 87 87 fe fe fe fe fe 87 87 87 87 fe fe fe fe     ................
    246d:	87 87 87 87 fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    247d:	87 85 85 fe fe fe fe fe 85 85 85 fe fe fe fe fe     ................
    248d:	a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe fe fe     ................
    249d:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 85 85     ................
    24ad:	fe fe fe fe 85 85 85 85 a4 a4 85 85 85 85 85 fe     ................
    24bd:	a4 a4 85 85 85 85 85 fe a4 a4 85 85 85 85 fe fe     ................
    24cd:	a4 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    24dd:	87 87 87 fe fe fe fe fe fe 85 87 87 fe fe fe fe     ................
    24ed:	fe 85 87 87 87 fe fe fe fe fe 85 87 87 fe fe fe     ................
    24fd:	fe fe 85 87 87 87 fe fe fe fe fe 85 87 87 fe fe     ................
    250d:	fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe     ................
    251d:	fe fe fe fe fe fe fe 85 fe fe fe fe fe fe fe 85     ................
    252d:	fe fe fe fe fe 85 85 85 fe fe fe fe 85 85 85 85     ................
    253d:	fe fe fe a4 85 85 85 85 fe fe fe a4 85 85 85 fe     ................
    254d:	fe fe fe a4 a4 fe fe fe fe fe fe a4 a4 a4 fe fe     ................
    255d:	87 87 87 fe fe fe fe fe 85 87 87 85 fe fe fe fe     ................
    256d:	85 87 87 85 fe fe fe fe 85 87 87 fe fe fe fe fe     ................
    257d:	85 87 87 fe fe fe fe fe 85 87 87 fe fe fe fe fe     ................
    258d:	a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe fe fe     ................
    259d:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 85 85     ................
    25ad:	fe fe fe fe 85 85 85 85 a4 a4 85 85 85 85 a4 a4     ................
    25bd:	a4 a4 85 85 85 85 a4 a4 a4 a4 85 85 85 85 a4 a4     ................
    25cd:	a4 fe fe fe fe fe a4 fe fe fe fe fe fe fe fe fe     ................
    25dd:	87 87 85 87 87 fe fe fe fe fe 85 87 87 87 fe fe     ................
    25ed:	fe fe 85 87 87 87 fe fe 85 85 85 87 87 fe fe fe     ................
    25fd:	87 87 87 87 87 fe fe fe 87 87 87 87 fe fe fe fe     ................
    260d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    261d:	fe fe fe fe fe fe fe fe fe fe 12 12 12 12 fe fe     ................
    262d:	ad 12 0f 1f 1f 0f 12 ad ad 12 12 12 12 12 12 ad     ................
    263d:	ad ad 12 12 12 12 ad ad ad 12 ad 12 12 ad 12 ad     ................
    264d:	ad fe 12 12 12 12 fe ad ad fe fe fe fe fe fe ad     ................
    265d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 7f     ................
    266d:	fe fe fe fe fe 7f 7f 7f fe fe fe fe 7f 7f 7f 7f     ................
    267d:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe fe fe     ................
    268d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    269d:	a4 fe fe fe fe fe fe fe a4 ad fe fe ff ff a4 ad     ................
    26ad:	a4 ad f6 ff ff a4 ad f6 a4 ad f6 ff a4 ad f6 ff     ................
    26bd:	a4 ad fe fe a4 ad f6 ff a4 fe fe a4 a4 ad f6 fe     ................
    26cd:	fe fe fe a4 a4 ad f6 f6 fe fe fe fe fe fe fe fe     ................
    26dd:	fe fe fe fe fe fe fe fe f6 ff ff ff d2 fe fe fe     ................
    26ed:	ff ff ff ff d2 eb fe fe ff fe ff ff eb fd d2 fe     ................
    26fd:	fe fe fe ff d2 eb d2 d2 fe fe fe fe fe fe fe fe     ................
    270d:	f6 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    271d:	fe fe bf 7f 7f bf fe fe fe 7f 7f 7f 7f 7f 7f fe     ................
    272d:	bf 7f 7f 7f 7f 7f 7f bf 7f 7f 7f 7f 7f 7f 7f 7f     ................
    273d:	7f 7f 7f 7f 7f 7f 7f 7f bf 7f 7f 7f 7f 7f 7f bf     ................
    274d:	fe 7f 7f 7f 7f 7f 7f fe fe fe bf 7f 7f bf fe fe     ................
    275d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    276d:	fe fe fe 7f 7f fe fe fe fe fe 7f 7f 7f 7f fe fe     ................
    277d:	fe fe 7f 7f 7f 7f fe fe fe fe fe 7f 7f fe fe fe     ................
    278d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    279d:	fe fe bf 7f 7f bf fe fe fe 7f 7f 7f 7f 7f 7f fe     ................
    27ad:	bf 7f fe fe 7f 7f 7f bf 7f fe fe fe fe 7f 7f 7f     ................
    27bd:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe 7f bf     ................
    27cd:	fe fe fe fe fe fe 7f fe fe fe fe fe fe bf fe fe     ................
    27dd:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    27ed:	fe fe fe fe fe fe fe fe fe fe fe e3 fe fe fe fe     ................
    27fd:	fe fe fe ff fe fe fe fe fe fe fe fe fe fe fe fe     ................
    280d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    281d:	fe fe fe fe fe fe fe fe fe fe fe fe ff fe fe fe     ................
    282d:	fe fe fe fe 7f ff fe fe fe fe fe fe 7f 7f ff fe     ................
    283d:	fe fe fe fe 7f 7f 7f ff fe fe fe fe 7f 7f 7f fe     ................
    284d:	fe fe fe fe 7f 7f fe fe fe fe fe fe 7f fe fe fe     ................
    285d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    286d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    287d:	7f 7f 7f 7f 7f 7f ff fe fe 7f 7f 7f 7f ff fe fe     ................
    288d:	fe fe 7f 7f ff fe fe fe fe fe fe fe fe fe fe fe     ................
    289d:	fe fe fe ff fe fe fe fe fe fe ff 7f 7f fe fe fe     ................
    28ad:	fe ff 7f 7f 7f 7f fe fe ff 7f 7f 7f 7f 7f 7f fe     ................
    28bd:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    28cd:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    28dd:	fe fe 12 12 12 12 fe fe fe 12 0f 1f 1f 0f 12 fe     ................
    28ed:	ad 12 12 12 12 12 12 ad ad 12 ad 12 12 ad 12 ad     ................
    28fd:	ad ad 12 12 12 12 ad ad ad fe 12 12 12 12 fe ad     ................
    290d:	ad fe fe fe fe fe fe ad ad fe fe fe fe fe fe ad     ................
    291d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 7f     ................
    292d:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe fe 7f     ................
    293d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    294d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    295d:	a4 fe fe fe fe fe fe fe a4 a4 fe fe fe fe fe fe     ................
    296d:	a4 a4 ad fe fe fe fe fe a4 a4 ad ad fe fe fe fe     ................
    297d:	a4 a4 ad ad f6 fe fe fe a4 a4 ad ad f6 f6 ff ff     ................
    298d:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    299d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    29ad:	fe fe ff ff ff ff a4 a4 fe ff ff ff ff a4 a4 a4     ................
    29bd:	ff ff ff ff ff a4 a4 a4 ff ff ff ff a4 a4 a4 ad     ................
    29cd:	ff ff ff ff a4 a4 ad ad ff ff ff a4 a4 ad ad f6     ................
    29dd:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    29ed:	a4 ad ad f6 f6 ff ff ff a4 ad ad f6 f6 ff ff ff     ................
    29fd:	ad ad f6 f6 ff ff ff ff ad f6 f6 ff ff ff ff ff     ................
    2a0d:	f6 f6 ff ff ff ff ff ff f6 ff ff 7f 7f ff ff ff     ................
    2a1d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2a2d:	d2 fe fe fe fe fe fe fe d2 d2 fe fe fe fe fe fe     ................
    2a3d:	d2 d2 d2 fe fe fe fe fe d2 d3 eb d3 fe fe fe fe     ................
    2a4d:	d2 eb fd eb d2 fe fe fe d2 d3 eb d3 d2 d2 fe fe     ................
    2a5d:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    2a6d:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 7f 7f fe     ................
    2a7d:	a4 a4 ad ad 7f 7f 7f fe a4 a4 ad fe fe 7f fe fe     ................
    2a8d:	a4 a4 fe fe fe fe fe fe a4 fe fe fe fe fe fe fe     ................
    2a9d:	ff ff fe a4 ad ad f6 f6 ff fe a4 a4 ad ad f6 f6     ................
    2aad:	fe fe a4 a4 ad ad f6 f6 fe a4 a4 a4 ad ad f6 f6     ................
    2abd:	fe a4 a4 a4 a4 ad ad f6 a4 a4 a4 a4 a4 a4 ad ad     ................
    2acd:	a4 a4 a4 a4 a4 a4 a4 ad a4 a4 a4 a4 a4 a4 a4 a4     ................
    2add:	ff ff 7f 7f 7f 7f ff ff ff fe 7f 7f 7f 7f fe ff     ................
    2aed:	fe fe 7f 7f 7f fe fe fe fe fe fe 7f fe fe fe fe     ................
    2afd:	f6 fe fe fe fe fe fe fe f6 f6 fe fe fe fe fe fe     ................
    2b0d:	ad f6 f6 fe fe fe fe fe ad ad f6 f6 fe fe fe fe     ................
    2b1d:	d2 d2 d2 d2 d2 d2 d2 fe ff ff ff ff ff ff ff ff     ................
    2b2d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2b3d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2b4d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2b5d:	ef ff ef 87 87 85 fe fe 87 ef 87 85 87 85 fe fe     ................
    2b6d:	87 87 87 85 87 87 85 fe ad ad ad ad ad 87 85 fe     ................
    2b7d:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    2b8d:	87 87 87 85 fe fe fe fe 87 87 85 fe fe fe fe fe     ................
    2b9d:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 87 87     ................
    2bad:	fe fe fe fe 85 87 87 87 a4 a4 85 85 85 87 87 fe     ................
    2bbd:	a4 a4 87 87 87 87 87 fe a4 a4 87 87 87 87 fe fe     ................
    2bcd:	a4 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2bdd:	87 87 85 fe fe fe fe fe fe 85 85 85 fe fe fe fe     ................
    2bed:	fe 85 85 85 85 fe fe fe fe fe 85 85 85 fe fe fe     ................
    2bfd:	fe fe 85 85 85 85 fe fe fe fe fe 85 85 85 fe fe     ................
    2c0d:	fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe     ................
    2c1d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2c2d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2c3d:	fe fe fe fe fe fe fe fe fe fe fe fe fe 85 85 85     ................
    2c4d:	fe a4 87 87 87 87 87 87 a4 a4 87 87 87 87 87 87     ................
    2c5d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 87     ................
    2c6d:	fe fe fe fe 85 85 85 87 fe fe fe 85 87 87 87 85     ................
    2c7d:	fe fe 85 85 87 87 87 87 85 85 85 85 85 87 87 ad     ................
    2c8d:	87 87 87 87 ad 85 87 87 87 87 87 87 ad ad a4 a4     ................
    2c9d:	87 87 87 87 fe fe fe fe 87 d2 d2 eb d2 fe fe fe     ................
    2cad:	87 87 d2 fd eb fe fe fe 87 87 87 eb d2 fe fe fe     ................
    2cbd:	85 85 87 87 d2 fe fe fe ad ad ad ad ad 87 ef fe     ................
    2ccd:	ad ad ad ad ad ad a4 ad a4 ad ad ad ad a4 a4 a4     ................
    2cdd:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    2ced:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 7f 7f 7f     ................
    2cfd:	a4 a4 ad ad 7f 7f 7f fe a4 a4 ad fe 7f 7f 7f fe     ................
    2d0d:	a4 a4 fe fe fe 7f fe fe a4 fe fe fe fe fe fe fe     ................
    2d1d:	ff ff 7f 7f 7f 7f ff ff ff 7f 7f 7f 7f 7f 7f ff     ................
    2d2d:	fe fe 7f 7f 7f 7f fe fe fe fe 7f 7f 7f fe fe fe     ................
    2d3d:	f6 fe fe 7f fe fe fe fe f6 f6 fe fe fe fe fe fe     ................
    2d4d:	ad f6 f6 fe fe fe fe fe ad ad f6 f6 fe fe fe fe     ................

00002d5d <map_enemy_spider_1>:
    2d5d:	01 01 29                                            ..)

00002d60 <map_enemy_spider_0>:
    2d60:	01 01 1e                                            ...

00002d63 <map_enemy_shark>:
    2d63:	01 01 05                                            ...

00002d66 <map_enemy_shot>:
    2d66:	01 01 13                                            ...

00002d69 <map_hero_shot>:
    2d69:	01 01 04                                            ...

00002d6c <map_hero_ship_large_1>:
    2d6c:	04 02 2b 2c 2d 2e 39 30 3a 32                       ..+,-.90:2

00002d76 <map_hero_ship_large_0>:
    2d76:	04 02 2b 2c 2d 2e 2f 30 31 32                       ..+,-./012

00002d80 <map_hero_ship_1>:
    2d80:	03 01 2a 20 21                                      ..* !

00002d85 <map_hero_ship_0>:
    2d85:	03 01 1f 20 21                                      ... !

00002d8a <map_hero_prone>:
    2d8a:	03 01 36 37 38                                      ..678

00002d8f <map_hero_jump>:
    2d8f:	02 03 02 03 0f 12 1c 1d                             ........

00002d97 <map_hero_step_3>:
    2d97:	02 03 02 03 0f 33 34 35                             .....345

00002d9f <map_hero_step_2>:
    2d9f:	02 03 00 01 0c 11 1a 1b                             ........

00002da7 <map_hero_step_1>:
    2da7:	02 03 02 03 0f 10 18 19                             ........

00002daf <map_hero_step_0>:
    2daf:	02 03 00 01 0c 0e 16 17                             ........

00002db7 <map_hero_idle>:
    2db7:	02 03 00 01 0c 0d 14 15                             ........

00002dbf <map_emerald_4>:
    2dbf:	01 01 0a                                            ...

00002dc2 <map_emerald_3>:
    2dc2:	01 01 09                                            ...

00002dc5 <map_emerald_2>:
    2dc5:	01 01 08                                            ...

00002dc8 <map_emerald_0>:
    2dc8:	01 01 07                                            ...

00002dcb <map_emerald_1>:
    2dcb:	01 01 06                                            ...

00002dce <map_explosion_2>:
    2dce:	01 01 24                                            ..$

00002dd1 <map_explosion_1>:
    2dd1:	01 01 23                                            ..#

00002dd4 <map_explosion_0>:
    2dd4:	01 01 22                                            .."

00002dd7 <map_particle>:
    2dd7:	01 01 25                                            ..%

00002dda <map_up_arrow>:
    2dda:	01 01 28                                            ..(

00002ddd <map_down_arrow>:
    2ddd:	01 01 27                                            ..'

00002de0 <map_right_arrow>:
    2de0:	01 01 26                                            ..&

00002de3 <map_none>:
    2de3:	01 01 0b                                            ...

00002de6 <map_level_space>:
    2de6:	01 20 01 1a 0f 00 01 0f 0f 00 01 10 07 00 01 0f     . ..............
    2df6:	0f 00 01 10 18 00 01 0f 0b 00 01 0f 06 00 01 0f     ................
    2e06:	05 00 01 10 0b 00 01 0f 08 00 12 00 01 0f 0d 00     ................
    2e16:	01 10 0c 00 01 0f 0c 00 01 0f 0c 00 01 0f 0d 00     ................
    2e26:	01 10 0e 00 01 10 0d 00 01 0f 0c 00 01 0f 0d 00     ................
    2e36:	01 0f 0b 00 01 0f 1b 00 01 0f 0e 00 01 0f 03 00     ................
    2e46:	01 0f 08 00 01 10 1c 00 01 10 0e 00 01 0f 02 00     ................
    2e56:	0d 00 01 0f 04 00 01 0f 06 00 01 0f 09 00 01 10     ................
    2e66:	12 00 01 0f 0f 00 01 0f 08 00 01 10 11 00 01 0f     ................
    2e76:	13 00 01 10 05 00 01 0f 04 00 0b 00 01 10 14 00     ................
    2e86:	01 0f 0e 00 01 0f 02 00 01 0f 05 00 01 0f 0e 00     ................
    2e96:	01 0f 15 00 01 10 0c 00 01 0f 0d 00 01 10 07 00     ................
    2ea6:	04 00 01 10 0a 00 01 0f 0b 00 01 0f 18 00 01 0f     ................
    2eb6:	01 10 11 00 01 0f 19 00 01 10 16 00 01 0f 07 00     ................
    2ec6:	0b 00 01 10 13 00 01 0f 02 00 01 0f 09 00 01 0f     ................
    2ed6:	15 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................

00002ee6 <map_level_4>:
    2ee6:	01 ff 01 1a 7e 06 00 00 00 00 00 00 00 00 00 00     ....~...........
	...
    2f06:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2f26:	06 06 01 08 65 06 01 08 13 06 00 00 00 00 00 00     ....e...........
	...
    2f46:	0e 06 01 08 43 06 01 08 2d 06 00 00 00 00 00 00     ....C...-.......
	...
    2f66:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2f86:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2fa6:	1c 06 01 08 21 06 01 08 41 06 00 00 00 00 00 00     ....!...A.......
	...
    2fc6:	04 06 01 08 43 06 01 08 24 06 01 08 12 06 00 00     ....C...$.......
	...
    2fe6:	2e 06 01 08 33 06 01 08 1d 06 00 00 00 00 00 00     ....3...........
	...
    3006:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3026:	4c 06 01 08 33 06 00 00 00 00 00 00 00 00 00 00     L...3...........
	...
    3046:	32 06 01 08 1d 06 01 08 2f 06 00 00 00 00 00 00     2......./.......
	...
    3066:	08 06 01 08 77 06 00 00 00 00 00 00 00 00 00 00     ....w...........
	...
    3086:	17 06 01 08 68 06 00 00 00 00 00 00 00 00 00 00     ....h...........
	...
    30a6:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    30c6:	7a 06 06 05 00 00 00 00 00 00 00 00 00 00 00 00     z...............
	...
    30e6:	80 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3106:	79 05 07 07 00 00 00 00 00 00 00 00 00 00 00 00     y...............
	...
    3126:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3146:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3166:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3186:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    31a6:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    31c6:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    31e6:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3206:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3226:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3246:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3266:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3286:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    32a6:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    32c6:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    32e6:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3306:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3326:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3346:	7b 07 01 0b 04 07 00 00 00 00 00 00 00 00 00 00     {...............
	...
    3366:	18 07 01 0b 2c 07 01 0b 3a 07 00 00 00 00 00 00     ....,...:.......
	...
    3386:	13 07 01 0b 2c 07 01 0b 39 07 01 12 01 13 01 14     ....,...9.......
    3396:	03 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    33a6:	17 07 01 12 01 13 01 14 2a 07 01 12 01 13 01 14     ........*.......
    33b6:	39 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     9...............
    33c6:	12 07 01 12 01 13 01 14 2a 07 01 12 01 13 01 14     ........*.......
    33d6:	35 07 01 14 01 13 01 18 06 07 00 00 00 00 00 00     5...............
    33e6:	14 07 01 14 01 13 01 18 2a 07 01 14 01 13 01 18     ........*.......
    33f6:	3c 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     <...............
    3406:	0f 07 01 14 01 13 01 18 2a 07 01 14 01 13 01 18     ........*.......
    3416:	39 07 01 18 01 14 01 13 05 07 00 00 00 00 00 00     9...............
    3426:	15 07 01 18 01 14 01 13 2a 07 01 18 01 14 01 13     ........*.......
    3436:	3b 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ;...............
    3446:	10 07 01 18 01 14 01 13 2a 07 01 18 01 14 01 13     ........*.......
    3456:	35 07 01 13 01 14 01 18 08 07 00 00 00 00 00 00     5...............
    3466:	12 07 01 13 01 14 01 18 2a 07 01 13 01 14 01 18     ........*.......
    3476:	3e 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     >...............
    3486:	0d 07 01 13 01 14 01 18 2a 07 01 13 01 14 01 18     ........*.......
    3496:	39 07 01 21 09 07 00 00 00 00 00 00 00 00 00 00     9..!............
    34a6:	13 07 01 21 2c 07 01 21 3f 07 00 00 00 00 00 00     ...!,..!?.......
	...
    34c6:	0e 07 01 21 2c 07 01 21 2e 07 16 02 00 00 00 00     ...!,..!........
	...
    34e6:	80 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3506:	69 02 17 04 00 00 00 00 00 00 00 00 00 00 00 00     i...............
	...
    3526:	80 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3546:	68 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     h...............
	...

00003566 <map_level_3>:
    3566:	01 ff 01 1a 7e 06 00 00 00 00 00 00 00 00 00 00     ....~...........
	...
    3586:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    35a6:	06 06 01 08 65 06 01 08 13 06 00 00 00 00 00 00     ....e...........
	...
    35c6:	0e 06 01 08 43 06 01 08 2d 06 00 00 00 00 00 00     ....C...-.......
	...
    35e6:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3606:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3626:	1c 06 01 08 21 06 01 08 41 06 00 00 00 00 00 00     ....!...A.......
	...
    3646:	04 06 01 08 43 06 01 08 24 06 01 08 12 06 00 00     ....C...$.......
	...
    3666:	2e 06 01 08 33 06 01 08 1d 06 00 00 00 00 00 00     ....3...........
	...
    3686:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    36a6:	4c 06 01 08 33 06 00 00 00 00 00 00 00 00 00 00     L...3...........
	...
    36c6:	32 06 01 08 1d 06 01 08 2f 06 00 00 00 00 00 00     2......./.......
	...
    36e6:	08 06 01 08 77 06 00 00 00 00 00 00 00 00 00 00     ....w...........
	...
    3706:	17 06 01 08 68 06 00 00 00 00 00 00 00 00 00 00     ....h...........
	...
    3726:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3746:	7a 06 06 05 00 00 00 00 00 00 00 00 00 00 00 00     z...............
	...
    3766:	80 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3786:	79 05 07 07 00 00 00 00 00 00 00 00 00 00 00 00     y...............
	...
    37a6:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    37c6:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    37e6:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3806:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3826:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3846:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3866:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3886:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    38a6:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    38c6:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    38e6:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3906:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3926:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3946:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3966:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3986:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    39a6:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    39c6:	7b 07 01 0b 04 07 00 00 00 00 00 00 00 00 00 00     {...............
	...
    39e6:	18 07 01 0b 2c 07 01 0b 3a 07 00 00 00 00 00 00     ....,...:.......
	...
    3a06:	13 07 01 0b 2c 07 01 0b 39 07 01 12 01 13 01 14     ....,...9.......
    3a16:	03 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3a26:	17 07 01 12 01 13 01 14 2a 07 01 12 01 13 01 14     ........*.......
    3a36:	39 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     9...............
    3a46:	12 07 01 12 01 13 01 14 2a 07 01 12 01 13 01 14     ........*.......
    3a56:	35 07 01 14 01 13 01 18 06 07 00 00 00 00 00 00     5...............
    3a66:	14 07 01 14 01 13 01 18 2a 07 01 14 01 13 01 18     ........*.......
    3a76:	3c 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     <...............
    3a86:	0f 07 01 14 01 13 01 18 2a 07 01 14 01 13 01 18     ........*.......
    3a96:	39 07 01 18 01 14 01 13 05 07 00 00 00 00 00 00     9...............
    3aa6:	15 07 01 18 01 14 01 13 2a 07 01 18 01 14 01 13     ........*.......
    3ab6:	3b 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ;...............
    3ac6:	10 07 01 18 01 14 01 13 2a 07 01 18 01 14 01 13     ........*.......
    3ad6:	35 07 01 13 01 14 01 18 08 07 00 00 00 00 00 00     5...............
    3ae6:	12 07 01 13 01 14 01 18 2a 07 01 13 01 14 01 18     ........*.......
    3af6:	3e 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     >...............
    3b06:	0d 07 01 13 01 14 01 18 2a 07 01 13 01 14 01 18     ........*.......
    3b16:	39 07 01 21 09 07 00 00 00 00 00 00 00 00 00 00     9..!............
    3b26:	13 07 01 21 2c 07 01 21 3f 07 00 00 00 00 00 00     ...!,..!?.......
	...
    3b46:	0e 07 01 21 2c 07 01 21 2e 07 16 02 00 00 00 00     ...!,..!........
	...
    3b66:	80 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3b86:	69 02 17 04 00 00 00 00 00 00 00 00 00 00 00 00     i...............
	...
    3ba6:	80 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3bc6:	68 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     h...............
	...

00003be6 <map_level_2>:
    3be6:	01 ff 01 1a 7e 06 00 00 00 00 00 00 00 00 00 00     ....~...........
	...
    3c06:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3c26:	06 06 01 08 65 06 01 08 13 06 00 00 00 00 00 00     ....e...........
	...
    3c46:	0e 06 01 08 43 06 01 08 2d 06 00 00 00 00 00 00     ....C...-.......
	...
    3c66:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3c86:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3ca6:	1c 06 01 08 21 06 01 08 41 06 00 00 00 00 00 00     ....!...A.......
	...
    3cc6:	04 06 01 08 43 06 01 08 24 06 01 08 12 06 00 00     ....C...$.......
	...
    3ce6:	2e 06 01 08 33 06 01 08 1d 06 00 00 00 00 00 00     ....3...........
	...
    3d06:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3d26:	4c 06 01 08 33 06 00 00 00 00 00 00 00 00 00 00     L...3...........
	...
    3d46:	32 06 01 08 1d 06 01 08 2f 06 00 00 00 00 00 00     2......./.......
	...
    3d66:	08 06 01 08 77 06 00 00 00 00 00 00 00 00 00 00     ....w...........
	...
    3d86:	17 06 01 08 68 06 00 00 00 00 00 00 00 00 00 00     ....h...........
	...
    3da6:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3dc6:	7a 06 06 05 00 00 00 00 00 00 00 00 00 00 00 00     z...............
	...
    3de6:	80 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3e06:	79 05 07 07 00 00 00 00 00 00 00 00 00 00 00 00     y...............
	...
    3e26:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3e46:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3e66:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3e86:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3ea6:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3ec6:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3ee6:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3f06:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3f26:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3f46:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3f66:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3f86:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3fa6:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3fc6:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3fe6:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4006:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4026:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4046:	7b 07 01 0b 04 07 00 00 00 00 00 00 00 00 00 00     {...............
	...
    4066:	18 07 01 0b 2c 07 01 0b 3a 07 00 00 00 00 00 00     ....,...:.......
	...
    4086:	13 07 01 0b 2c 07 01 0b 39 07 01 12 01 13 01 14     ....,...9.......
    4096:	03 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    40a6:	17 07 01 12 01 13 01 14 2a 07 01 12 01 13 01 14     ........*.......
    40b6:	39 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     9...............
    40c6:	12 07 01 12 01 13 01 14 2a 07 01 12 01 13 01 14     ........*.......
    40d6:	35 07 01 14 01 13 01 18 06 07 00 00 00 00 00 00     5...............
    40e6:	14 07 01 14 01 13 01 18 2a 07 01 14 01 13 01 18     ........*.......
    40f6:	3c 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     <...............
    4106:	0f 07 01 14 01 13 01 18 2a 07 01 14 01 13 01 18     ........*.......
    4116:	39 07 01 18 01 14 01 13 05 07 00 00 00 00 00 00     9...............
    4126:	15 07 01 18 01 14 01 13 2a 07 01 18 01 14 01 13     ........*.......
    4136:	3b 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ;...............
    4146:	10 07 01 18 01 14 01 13 2a 07 01 18 01 14 01 13     ........*.......
    4156:	35 07 01 13 01 14 01 18 08 07 00 00 00 00 00 00     5...............
    4166:	12 07 01 13 01 14 01 18 2a 07 01 13 01 14 01 18     ........*.......
    4176:	3e 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     >...............
    4186:	0d 07 01 13 01 14 01 18 2a 07 01 13 01 14 01 18     ........*.......
    4196:	39 07 01 21 09 07 00 00 00 00 00 00 00 00 00 00     9..!............
    41a6:	13 07 01 21 2c 07 01 21 3f 07 00 00 00 00 00 00     ...!,..!?.......
	...
    41c6:	0e 07 01 21 2c 07 01 21 2e 07 16 02 00 00 00 00     ...!,..!........
	...
    41e6:	80 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4206:	69 02 17 04 00 00 00 00 00 00 00 00 00 00 00 00     i...............
	...
    4226:	80 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4246:	68 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     h...............
	...

00004266 <map_level_1>:
    4266:	01 ff 01 1a 7e 06 00 00 00 00 00 00 00 00 00 00     ....~...........
	...
    4286:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    42a6:	06 06 01 08 65 06 01 08 13 06 00 00 00 00 00 00     ....e...........
	...
    42c6:	0e 06 01 08 43 06 01 08 2d 06 00 00 00 00 00 00     ....C...-.......
	...
    42e6:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4306:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4326:	1c 06 01 08 21 06 01 08 41 06 00 00 00 00 00 00     ....!...A.......
	...
    4346:	04 06 01 08 43 06 01 08 24 06 01 08 12 06 00 00     ....C...$.......
	...
    4366:	2e 06 01 08 33 06 01 08 1d 06 00 00 00 00 00 00     ....3...........
	...
    4386:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    43a6:	4c 06 01 08 33 06 00 00 00 00 00 00 00 00 00 00     L...3...........
	...
    43c6:	32 06 01 08 1d 06 01 08 2f 06 00 00 00 00 00 00     2......./.......
	...
    43e6:	08 06 01 08 77 06 00 00 00 00 00 00 00 00 00 00     ....w...........
	...
    4406:	17 06 01 08 68 06 00 00 00 00 00 00 00 00 00 00     ....h...........
	...
    4426:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4446:	7a 06 06 05 00 00 00 00 00 00 00 00 00 00 00 00     z...............
	...
    4466:	80 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4486:	79 05 07 07 00 00 00 00 00 00 00 00 00 00 00 00     y...............
	...
    44a6:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    44c6:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    44e6:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4506:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4526:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4546:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4566:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4586:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    45a6:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    45c6:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    45e6:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4606:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4626:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4646:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4666:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4686:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    46a6:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    46c6:	7b 07 01 0b 04 07 00 00 00 00 00 00 00 00 00 00     {...............
	...
    46e6:	18 07 01 0b 2c 07 01 0b 3a 07 00 00 00 00 00 00     ....,...:.......
	...
    4706:	13 07 01 0b 2c 07 01 0b 39 07 01 12 01 13 01 14     ....,...9.......
    4716:	03 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4726:	17 07 01 12 01 13 01 14 2a 07 01 12 01 13 01 14     ........*.......
    4736:	39 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     9...............
    4746:	12 07 01 12 01 13 01 14 2a 07 01 12 01 13 01 14     ........*.......
    4756:	35 07 01 14 01 13 01 18 06 07 00 00 00 00 00 00     5...............
    4766:	14 07 01 14 01 13 01 18 2a 07 01 14 01 13 01 18     ........*.......
    4776:	3c 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     <...............
    4786:	0f 07 01 14 01 13 01 18 2a 07 01 14 01 13 01 18     ........*.......
    4796:	39 07 01 18 01 14 01 13 05 07 00 00 00 00 00 00     9...............
    47a6:	15 07 01 18 01 14 01 13 2a 07 01 18 01 14 01 13     ........*.......
    47b6:	3b 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ;...............
    47c6:	10 07 01 18 01 14 01 13 2a 07 01 18 01 14 01 13     ........*.......
    47d6:	35 07 01 13 01 14 01 18 08 07 00 00 00 00 00 00     5...............
    47e6:	12 07 01 13 01 14 01 18 2a 07 01 13 01 14 01 18     ........*.......
    47f6:	3e 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     >...............
    4806:	0d 07 01 13 01 14 01 18 2a 07 01 13 01 14 01 18     ........*.......
    4816:	39 07 01 21 09 07 00 00 00 00 00 00 00 00 00 00     9..!............
    4826:	13 07 01 21 2c 07 01 21 3f 07 00 00 00 00 00 00     ...!,..!?.......
	...
    4846:	0e 07 01 21 2c 07 01 21 2e 07 16 02 00 00 00 00     ...!,..!........
	...
    4866:	80 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4886:	69 02 17 04 00 00 00 00 00 00 00 00 00 00 00 00     i...............
	...
    48a6:	80 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    48c6:	68 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     h...............
	...

000048e6 <map_level_0>:
    48e6:	01 ff 01 1a 7e 06 00 00 00 00 00 00 00 00 00 00     ....~...........
	...
    4906:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4926:	06 06 01 08 65 06 01 08 13 06 00 00 00 00 00 00     ....e...........
	...
    4946:	0e 06 01 08 43 06 01 08 2d 06 00 00 00 00 00 00     ....C...-.......
	...
    4966:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4986:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    49a6:	1c 06 01 08 21 06 01 08 41 06 00 00 00 00 00 00     ....!...A.......
	...
    49c6:	04 06 01 08 43 06 01 08 24 06 01 08 12 06 00 00     ....C...$.......
	...
    49e6:	2e 06 01 08 33 06 01 08 1d 06 00 00 00 00 00 00     ....3...........
	...
    4a06:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4a26:	4c 06 01 08 33 06 00 00 00 00 00 00 00 00 00 00     L...3...........
	...
    4a46:	32 06 01 08 1d 06 01 08 2f 06 00 00 00 00 00 00     2......./.......
	...
    4a66:	08 06 01 08 77 06 00 00 00 00 00 00 00 00 00 00     ....w...........
	...
    4a86:	17 06 01 08 68 06 00 00 00 00 00 00 00 00 00 00     ....h...........
	...
    4aa6:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4ac6:	7a 06 06 05 00 00 00 00 00 00 00 00 00 00 00 00     z...............
	...
    4ae6:	80 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4b06:	79 05 07 07 00 00 00 00 00 00 00 00 00 00 00 00     y...............
	...
    4b26:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4b46:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4b66:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4b86:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4ba6:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4bc6:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4be6:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4c06:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4c26:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4c46:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4c66:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4c86:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4ca6:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4cc6:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4ce6:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4d06:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4d26:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4d46:	7b 07 01 4c 04 07 00 00 00 00 00 00 00 00 00 00     {..L............
	...
    4d66:	18 07 01 4c 2c 07 01 4c 3a 07 00 00 00 00 00 00     ...L,..L:.......
	...
    4d86:	13 07 01 4c 2c 07 01 4c 39 07 01 4d 01 4e 01 4f     ...L,..L9..M.N.O
    4d96:	03 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4da6:	17 07 01 4d 01 4e 01 4f 2a 07 01 4d 01 4e 01 4f     ...M.N.O*..M.N.O
    4db6:	39 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     9...............
    4dc6:	12 07 01 4d 01 4e 01 4f 2a 07 01 4d 01 4e 01 4f     ...M.N.O*..M.N.O
    4dd6:	35 07 01 4f 01 4e 01 50 06 07 00 00 00 00 00 00     5..O.N.P........
    4de6:	14 07 01 4f 01 4e 01 50 2a 07 01 4f 01 4e 01 50     ...O.N.P*..O.N.P
    4df6:	3c 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     <...............
    4e06:	0f 07 01 4f 01 4e 01 50 2a 07 01 4f 01 4e 01 50     ...O.N.P*..O.N.P
    4e16:	39 07 01 50 01 4f 01 4e 05 07 00 00 00 00 00 00     9..P.O.N........
    4e26:	15 07 01 50 01 4f 01 4e 2a 07 01 50 01 4f 01 4e     ...P.O.N*..P.O.N
    4e36:	3b 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ;...............
    4e46:	10 07 01 50 01 4f 01 4e 2a 07 01 50 01 4f 01 4e     ...P.O.N*..P.O.N
    4e56:	35 07 01 4e 01 4f 01 50 08 07 00 00 00 00 00 00     5..N.O.P........
    4e66:	12 07 01 4e 01 4f 01 50 2a 07 01 4e 01 4f 01 50     ...N.O.P*..N.O.P
    4e76:	3e 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     >...............
    4e86:	0d 07 01 4e 01 4f 01 50 2a 07 01 4e 01 4f 01 50     ...N.O.P*..N.O.P
    4e96:	39 07 01 51 09 07 00 00 00 00 00 00 00 00 00 00     9..Q............
    4ea6:	13 07 01 51 2c 07 01 51 3f 07 00 00 00 00 00 00     ...Q,..Q?.......
	...
    4ec6:	0e 07 01 51 2c 07 01 51 2e 07 16 02 00 00 00 00     ...Q,..Q........
	...
    4ee6:	80 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4f06:	69 02 17 04 00 00 00 00 00 00 00 00 00 00 00 00     i...............
	...
    4f26:	80 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4f46:	68 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     h...............
	...

00004f66 <tiles_data>:
	...
    4fa6:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4fb6:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    4fc6:	ff f8 fb f8 fb f8 f8 fd ff fb f8 f8 fb f8 f8 f8     ................
    4fd6:	ff f8 f8 fb f8 f8 f8 f8 ff f8 f8 f8 f8 f8 f8 f8     ................
    4fe6:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4ff6:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    5006:	fd f8 fb f8 fb f8 f8 fd f8 fb f8 f8 fb f8 f8 f8     ................
    5016:	f8 f8 f8 fb f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    5026:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5036:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    5046:	fd f8 fb f8 fb f8 f8 ff f8 fb f8 f8 fb f8 f8 ff     ................
    5056:	f8 f8 f8 fb f8 f8 f8 ff f8 f8 f8 f8 f8 f8 f8 ff     ................
    5066:	fa f8 f8 f8 f8 f8 f8 f8 f8 f8 fb f8 f8 f8 fb f8     ................
    5076:	f8 f8 fb f8 fb fb f8 f8 f8 f8 f8 fb f8 f8 f8 f8     ................
    5086:	f8 f8 fb f8 fb f8 f8 f8 f8 fb f8 f8 fb f8 f8 f8     ................
    5096:	f8 f8 f8 fb f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    50a6:	ac ac ac ac ac ac ac ac ac ac ac ac ac ac ac ac     ................
    50b6:	ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad     ................
    50c6:	ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae     ................
    50d6:	af af af af af af af af af af af af af af af af     ................
    50e6:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    50f6:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    5106:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    5116:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    5126:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    5136:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    5146:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    5156:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    5166:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    5176:	ab ab ab ab ab ab ab ab ab ad ad ad ad ad ad ab     ................
    5186:	ae ae ae ae ae ae ae ae ab ae ae ae ae ae ae ab     ................
    5196:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    51a6:	ff ff ff ff ff ff ff a3 ff ff ff ff ff ff ff a3     ................
    51b6:	a3 ff ff ff ff ff a3 a0 a3 ff ff ff ff ff a3 a0     ................
    51c6:	a0 a3 ff ff ff a3 a0 a0 a0 a3 ff ff ff a3 a0 a0     ................
    51d6:	a0 a0 a3 ff a3 a0 a0 a0 a0 a0 a3 ff a3 a0 a0 a0     ................
    51e6:	a0 a0 a0 a3 ff a3 a0 a0 a0 a0 a0 a3 ff a3 a0 a0     ................
    51f6:	a0 a0 a3 ff ff ff a3 a0 a0 a0 a3 ff ff ff a3 a0     ................
    5206:	a0 a3 ff ff ff ff ff a3 a0 a3 ff ff ff ff ff a3     ................
    5216:	a3 ff ff ff ff ff ff ff a3 ff ff ff ff ff ff ff     ................
    5226:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    5236:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    5246:	bf bf bf bf 00 00 00 00 bf bf bf bf 00 00 00 00     ................
    5256:	bf bf bf bf 00 00 00 00 bf bf bf bf 00 00 00 00     ................
    5266:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    5276:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
	...
    52a6:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    52b6:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    52c6:	00 00 00 00 bf bf bf bf 00 00 00 00 bf bf bf bf     ................
    52d6:	00 00 00 00 bf bf bf bf 00 00 00 00 bf bf bf bf     ................
	...
    52fe:	00 00 00 e3 00 00 00 00 00 00 e3 ff e3 00 00 00     ................
    530e:	00 00 00 e3 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    533e:	00 00 00 d2 00 00 00 00 00 00 d2 e3 d2 00 00 00     ................
    534e:	00 00 00 d2 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5386:	02 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00     ................
    5396:	02 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00     ................
    53a6:	bf bf bf bf 00 00 00 00 bf bf bf bf 00 00 00 00     ................
    53b6:	bf bf bf bf 00 00 00 00 bf bf bf bf 00 00 00 00     ................
    53c6:	bf bf bf bf 00 00 00 00 bf bf bf bf 00 00 00 00     ................
    53d6:	bf bf bf bf 00 00 00 00 bf bf bf bf 00 00 00 00     ................
    53e6:	00 00 00 00 bf bf bf bf 00 00 00 00 bf bf bf bf     ................
    53f6:	00 00 00 00 bf bf bf bf 00 00 00 00 bf bf bf bf     ................
    5406:	00 00 00 00 bf bf bf bf 00 00 00 00 bf bf bf bf     ................
    5416:	00 00 00 00 bf bf bf bf 00 00 00 00 bf bf bf bf     ................
    5426:	02 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00     ................
    5436:	02 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00     ................
    5446:	02 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00     ................
    5456:	02 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00     ................
    5466:	02 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00     ................
    5476:	02 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00     ................
    5486:	02 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00     ................
    5496:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    54a6:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    54b6:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    54c6:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    54d6:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
	...
    54f2:	00 00 96 96 00 00 00 00 00 96 96 96 00 00 00 00     ................
    5502:	96 96 96 96 00 00 00 96 96 96 96 96 00 00 96 96     ................
    5512:	96 96 96 96 00 00 96 96 96 96 96 96 00 96 96 96     ................
    5522:	96 96 96 96 00 96 96 96 96 96 96 00 96 96 96 96     ................
    5532:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    5542:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    5552:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    5562:	96 96 96 96 00 00 00 00 00 00 00 00 96 96 00 00     ................
    5572:	00 00 00 00 96 96 96 00 00 00 00 00 96 96 96 96     ................
    5582:	00 00 00 00 96 96 96 96 96 00 00 00 96 96 96 96     ................
    5592:	96 96 00 00 96 96 96 96 96 96 00 00 96 96 96 96     ................
    55a2:	96 96 96 00 00 96 96 96 95 96 96 96 00 96 96 96     ................
    55b2:	95 96 96 96 96 96 96 96 96 95 96 96 96 96 96 96     ................
    55c2:	96 95 96 96 96 96 96 96 96 96 95 96 96 96 96 96     ................
    55d2:	96 bf 95 96 95 84 96 96 96 bf 96 95 8c 83 83 8c     ................
    55e2:	96 bf 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    55f2:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    5602:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    5612:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    5622:	96 96 96 96 96 96 96 95 96 96 96 00 96 96 96 95     ................
    5632:	96 96 96 00 96 96 95 96 96 96 96 96 96 96 95 96     ................
    5642:	96 96 96 96 96 95 96 96 96 96 96 96 96 95 96 96     ................
    5652:	96 96 95 96 95 96 96 96 96 95 95 95 96 96 96 96     ................
    5662:	94 8c 8c 95 82 82 82 82 82 bf 96 96 00 d8 d8 d8     ................
    5672:	bf ff bf 82 00 d8 d8 bf ff ff ff bf 00 d8 bf ff     ................
    5682:	ff ff ff ff bf bf ff ff ff ff ff ff 00 00 bf ff     ................
    5692:	ff ff ff ff 00 00 94 bf ff ff ff bf 00 00 00 8c     ................
    56a2:	bf ff bf d8 96 96 96 96 96 96 96 96 83 83 8c 8c     ................
    56b2:	8c 8c 8c 83 d8 d8 d8 d8 d8 d8 d8 d8 bf d8 d8 d8     ................
    56c2:	d8 d8 d8 d8 ff bf bf d8 d8 d8 d8 d8 bf d8 d8 d8     ................
    56d2:	d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8     ................
    56e2:	d8 d8 82 82 96 96 8c 83 83 8c 8c 8c 83 82 83 83     ................
    56f2:	83 83 8c 00 82 82 82 83 83 83 83 00 82 82 82 83     ................
    5702:	83 83 83 00 d8 82 82 83 83 83 83 00 82 82 82 83     ................
    5712:	83 83 00 00 82 82 83 83 83 95 00 00 82 82 83 83     ................
    5722:	95 00 00 00 40 40 40 40 40 40 40 40 40 40 40 40     ....@@@@@@@@@@@@
    5732:	40 40 40 40 41 41 41 41 41 41 41 41 41 41 41 41     @@@@AAAAAAAAAAAA
    5742:	41 41 41 41 42 42 42 42 42 42 42 42 42 42 42 42     AAAABBBBBBBBBBBB
    5752:	42 42 42 42 43 43 43 43 43 43 43 43 43 43 43 43     BBBBCCCCCCCCCCCC
    5762:	43 43 43 43 00 00 00 96 95 ff d8 d8 00 00 00 00     CCCC............
    5772:	96 ff 83 82 00 00 00 00 00 ff 96 96 00 00 00 00     ................
    5782:	00 bf 96 96 00 00 00 00 00 bf 96 96 00 00 00 00     ................
    5792:	00 bf 96 96 00 00 00 00 00 bf 00 00 00 00 00 00     ................
    57a2:	00 77 00 00 d8 d8 d8 82 82 82 82 82 82 82 82 82     .w..............
    57b2:	82 83 83 83 8c 8c 83 83 83 83 8c 95 96 96 96 96     ................
    57c2:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    57d2:	96 96 96 96 96 96 96 96 96 96 96 96 00 96 96 96     ................
    57e2:	96 96 96 00 83 83 8c 95 96 00 00 00 83 8c 96 96     ................
    57f2:	00 00 00 00 96 96 96 00 00 00 00 00 96 96 96 00     ................
    5802:	00 00 00 00 96 96 00 00 00 00 00 00 96 96 00 00     ................
	...
    5826:	44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44     DDDDDDDDDDDDDDDD
    5836:	45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45     EEEEEEEEEEEEEEEE
    5846:	46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46     FFFFFFFFFFFFFFFF
    5856:	47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47     GGGGGGGGGGGGGGGG
    5866:	00 00 00 00 00 77 00 00 00 00 00 00 00 77 00 00     .....w.......w..
    5876:	00 00 00 00 00 77 00 00 00 00 00 00 00 77 00 00     .....w.......w..
    5886:	00 00 00 00 00 77 00 00 00 00 00 00 00 77 00 00     .....w.......w..
	...
    58ae:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    58be:	00 3f 3f 2f 3f 3f 3f 2f 00 3f 3f 3f 2f 3f 3f 2f     .??/???/.???/??/
    58ce:	00 3f 3f 2f 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??/.??/..????/.
	...
    58ee:	00 00 00 3f 3f 2f 00 00 00 00 3f 3f 3f 2f 00 00     ...??/....???/..
    58fe:	00 00 00 3f 3f 2f 00 00 00 00 00 3f 3f 2f 00 00     ...??/.....??/..
    590e:	00 00 00 3f 3f 2f 00 00 00 3f 3f 3f 3f 3f 3f 2f     ...??/...??????/
	...
    592e:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 00 00 3f 3f 2f     ..????/..??..??/
    593e:	00 00 00 00 3f 3f 2f 00 00 00 00 3f 3f 2f 00 00     ....??/....??/..
    594e:	00 00 3f 3f 2f 00 00 00 00 3f 3f 3f 3f 3f 3f 2f     ..??/....??????/
	...
    596e:	00 3f 3f 3f 3f 3f 3f 2f 00 00 00 00 3f 3f 2f 00     .??????/....??/.
    597e:	00 00 00 3f 3f 2f 00 00 00 00 00 00 3f 3f 2f 00     ...??/......??/.
    598e:	00 3f 3f 00 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??..??/..????/.
	...
    59b2:	3f 3f 2f 00 00 00 00 3f 3f 3f 2f 00 00 00 3f 3f     ??/....???/...??
    59c2:	3f 3f 2f 00 00 3f 3f 00 3f 3f 2f 00 00 3f 3f 3f     ??/..??.??/..???
    59d2:	3f 3f 3f 2f 00 00 00 00 3f 3f 2f 00 00 00 00 00     ???/....??/.....
	...
    59ee:	00 3f 3f 3f 3f 3f 3f 2f 00 3f 3f 2f 00 00 00 00     .??????/.??/....
    59fe:	00 3f 3f 3f 3f 3f 2f 00 00 00 00 00 00 3f 3f 2f     .?????/......??/
    5a0e:	00 3f 3f 00 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??..??/..????/.
	...
    5a2e:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 00 00 00     ..????/..??/....
    5a3e:	00 3f 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     .?????/..??/.??/
    5a4e:	00 3f 3f 2f 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??/.??/..????/.
	...
    5a6e:	00 3f 3f 3f 3f 3f 3f 2f 00 00 00 00 00 3f 3f 2f     .??????/.....??/
    5a7e:	00 00 00 00 3f 3f 2f 00 00 00 00 3f 3f 2f 00 00     ....??/....??/..
    5a8e:	00 00 3f 3f 2f 00 00 00 00 00 3f 3f 2f 00 00 00     ..??/.....??/...
	...
    5aae:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    5abe:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    5ace:	00 3f 3f 2f 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??/.??/..????/.
	...
    5aee:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    5afe:	00 00 3f 3f 3f 3f 3f 2f 00 00 00 00 00 3f 3f 2f     ..?????/.....??/
    5b0e:	00 00 00 00 3f 3f 2f 00 00 00 3f 3f 3f 2f 00 00     ....??/...???/..
	...
    5b2e:	00 00 00 ff ff e3 00 00 00 00 ff ff ff ff e3 00     ................
    5b3e:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    5b4e:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    5b6e:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    5b7e:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    5b8e:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff e3 00     ................
	...
    5bae:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    5bbe:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    5bce:	00 ff ff e3 00 ff ff e3 00 00 ff ff ff ff e3 00     ................
	...
    5bee:	00 ff ff ff ff e3 00 00 00 ff ff e3 ff ff e3 00     ................
    5bfe:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    5c0e:	00 ff ff e3 ff ff e3 00 00 ff ff ff ff e3 00 00     ................
	...
    5c2e:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 00 00 00     ................
    5c3e:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 00 00 00     ................
    5c4e:	00 ff ff e3 00 00 00 00 00 ff ff ff ff ff ff e3     ................
	...
    5c6e:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 00 00 00     ................
    5c7e:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 00 00 00     ................
    5c8e:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
	...
    5cae:	00 00 ff ff ff ff ff e3 00 ff ff e3 00 00 00 00     ................
    5cbe:	00 ff ff e3 00 00 00 00 00 ff ff e3 ff ff ff e3     ................
    5cce:	00 ff ff e3 00 ff ff e3 00 00 ff ff ff ff ff e3     ................
	...
    5cee:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    5cfe:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 ff ff e3     ................
    5d0e:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    5d2e:	00 ff ff ff ff ff ff e3 00 00 00 ff ff e3 00 00     ................
    5d3e:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
    5d4e:	00 00 00 ff ff e3 00 00 00 ff ff ff ff ff ff e3     ................
	...
    5d72:	ff ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    5d82:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 ff ff 00     ................
    5d92:	00 ff ff e3 00 00 ff ff ff ff e3 00 00 00 00 00     ................
	...
    5dae:	00 ff ff e3 00 ff ff e3 00 ff ff e3 ff ff e3 00     ................
    5dbe:	00 ff ff ff ff e3 00 00 00 ff ff ff ff e3 00 00     ................
    5dce:	00 ff ff e3 ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
	...
    5dee:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    5dfe:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    5e0e:	00 ff ff e3 00 00 00 00 00 ff ff ff ff ff ff e3     ................
	...
    5e2e:	ff ff e3 00 00 ff ff e3 ff ff ff e3 ff ff ff e3     ................
    5e3e:	ff ff ff ff ff ff ff e3 ff ff e3 ff e3 ff ff e3     ................
    5e4e:	ff ff e3 00 00 ff ff e3 ff ff e3 00 00 ff ff e3     ................
	...
    5e6e:	00 ff ff e3 00 ff ff e3 00 ff ff ff e3 ff ff e3     ................
    5e7e:	00 ff ff ff ff ff ff e3 00 ff ff ff ff ff ff e3     ................
    5e8e:	00 ff ff e3 ff ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    5eae:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    5ebe:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    5ece:	00 ff ff e3 00 ff ff e3 00 00 ff ff ff ff e3 00     ................
	...
    5eee:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    5efe:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff e3 00     ................
    5f0e:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
	...
    5f2e:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    5f3e:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    5f4e:	00 ff ff e3 ff ff e3 00 00 00 ff ff e3 ff ff e3     ................
	...
    5f6e:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    5f7e:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff e3 00     ................
    5f8e:	00 ff ff e3 ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
	...
    5fae:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 00 00 00     ................
    5fbe:	00 00 ff ff ff ff e3 00 00 00 00 00 00 ff ff e3     ................
    5fce:	00 00 00 00 00 ff ff e3 00 00 ff ff ff ff e3 00     ................
	...
    5fee:	00 ff ff ff ff ff ff e3 00 00 00 ff ff e3 00 00     ................
    5ffe:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
    600e:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
	...
    602e:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    603e:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    604e:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff ff e3     ................
	...
    606e:	00 ff ff 00 00 ff ff e3 00 ff ff 00 00 ff ff e3     ................
    607e:	00 ff ff 00 00 ff ff e3 00 ff ff 00 00 ff ff e3     ................
    608e:	00 00 ff ff ff ff e3 00 00 00 00 ff ff e3 00 00     ................
	...
    60ae:	ff ff e3 00 00 ff ff e3 ff ff e3 00 00 ff ff e3     ................
    60be:	ff ff e3 ff e3 ff ff e3 ff ff ff ff ff ff ff e3     ................
    60ce:	ff ff ff e3 ff ff ff e3 ff ff e3 00 00 ff ff e3     ................
	...
    60ee:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    60fe:	00 00 ff ff ff ff e3 00 00 00 ff ff ff ff e3 00     ................
    610e:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    612e:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    613e:	00 00 ff ff ff ff e3 00 00 00 00 ff ff e3 00 00     ................
    614e:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
	...
    616e:	00 ff ff ff ff ff ff e3 00 00 00 00 ff ff e3 00     ................
    617e:	00 00 00 ff ff e3 00 00 00 00 ff ff e3 00 00 00     ................
    618e:	00 ff ff e3 00 00 00 00 00 ff ff ff ff ff ff e3     ................
	...
    61a6:	bf bf bf bf 00 00 00 00 bf bf bf bf 00 00 00 00     ................
    61b6:	bf bf bf bf 00 00 00 00 bf bf bf bf 00 00 00 00     ................
    61c6:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    61d6:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
	...
    6206:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    6216:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    6226:	00 00 00 00 bf bf bf bf 00 00 00 00 bf bf bf bf     ................
    6236:	00 00 00 00 bf bf bf bf 00 00 00 00 bf bf bf bf     ................
    6246:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    6256:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    6266:	a0 a0 a0 a0 a0 a0 a0 ff a0 a0 a0 a0 a0 a0 ff ff     ................
    6276:	a0 a0 a0 a0 a0 ff ff 02 a0 a0 a0 a0 ff ff 02 02     ................
    6286:	a0 a0 a0 ff ff 02 02 02 a0 a0 ff ff 02 02 02 02     ................
    6296:	a0 ff ff 02 02 02 02 02 ff ff 02 02 02 02 02 02     ................
    62a6:	ff 02 02 02 02 02 02 02 ff 02 02 02 02 02 02 02     ................
    62b6:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    62c6:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    62d6:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    62e6:	ff ff ff ff ff ff ff ff 02 02 02 02 02 02 02 02     ................
    62f6:	02 02 02 02 02 02 02 02 a0 a0 a0 a0 a0 a0 a0 a0     ................
    6306:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    6316:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    6326:	ff ff ff ff ff ff ff ff 02 02 ff ff ff ff 02 02     ................
    6336:	02 02 02 ff ff 02 02 02 a0 a0 a0 ff a0 a0 a0 a0     ................
    6346:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    6356:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    6366:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    6376:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    6386:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    6396:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    63a6:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    63b6:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    63c6:	02 02 02 ff ff 02 02 02 02 02 ff ff ff ff 02 02     ................
    63d6:	02 ff ff ff ff ff ff 02 ff ff ff ff ff ff ff ff     ................

000063e6 <map_font>:
    63e6:	25 01 00 25 26 27 28 29 2a 2b 2c 2d 2e 2f 30 31     %..%&'()*+,-./01
    63f6:	32 33 34 35 36 37 38 39 3a 3b 3c 3d 3e 3f 40 41     23456789:;<=>?@A
    6406:	42 43 44 45 46 47 48                                BCDEFGH

0000640d <map_atmosphere>:
    640d:	1c 02 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    641d:	1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 23 23     ..............##
    642d:	23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23     ################
    643d:	23 23 23 23 23 23 23 23 23 23                       ##########

00006447 <map_star_dark>:
    6447:	01 01 0f                                            ...

0000644a <map_star>:
    644a:	01 01 0e                                            ...

0000644d <map_ice_bottom>:
    644d:	01 01 04                                            ...

00006450 <map_ice_right>:
    6450:	01 01 03                                            ...

00006453 <map_ice_middle>:
    6453:	01 01 02                                            ...

00006456 <map_ice_left>:
    6456:	01 01 01                                            ...

00006459 <map_canvas>:
    6459:	0f 09 0b 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ................
    6469:	0d 11 00 00 00 00 00 00 00 00 00 00 00 00 00 12     ................
    6479:	11 00 00 00 00 00 00 00 00 00 00 00 00 00 12 11     ................
	...
    6495:	00 12 11 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    64a5:	12 11 00 00 00 00 00 00 00 00 00 00 00 00 00 12     ................
    64b5:	11 00 00 00 00 00 00 00 00 00 00 00 00 00 12 11     ................
	...
    64d1:	00 12 49 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a     ..IJJJJJJJJJJJJJ
    64e1:	4b                                                  K

000064e2 <map_splash>:
    64e2:	0f 05 15 15 15 00 15 15 15 00 16 17 18 0e 15 15     ................
    64f2:	15 00 15 00 00 15 0f 00 00 19 1a 1b 00 15 00 0e     ................
    6502:	0f 15 00 0e 15 00 00 00 1c 1d 1e 00 15 15 15 00     ................
    6512:	15 00 00 15 00 0e 00 20 21 22 00 00 00 15 15 15     ....... !"......
    6522:	15 00 15 00 00 00 24 00 0f 00 15 15 15              ......$......

0000652f <map_tile_none>:
    652f:	01 01 00                                            ...

00006532 <__ctors_end>:
    6532:	11 24       	eor	r1, r1
    6534:	1f be       	out	0x3f, r1	; 63
    6536:	cf ef       	ldi	r28, 0xFF	; 255
    6538:	d0 e1       	ldi	r29, 0x10	; 16
    653a:	de bf       	out	0x3e, r29	; 62
    653c:	cd bf       	out	0x3d, r28	; 61

0000653e <__do_copy_data>:
    653e:	15 e0       	ldi	r17, 0x05	; 5
    6540:	a0 e0       	ldi	r26, 0x00	; 0
    6542:	b5 e0       	ldi	r27, 0x05	; 5
    6544:	e4 e0       	ldi	r30, 0x04	; 4
    6546:	ff ec       	ldi	r31, 0xCF	; 207
    6548:	02 c0       	rjmp	.+4      	; 0x654e <__do_copy_data+0x10>
    654a:	05 90       	lpm	r0, Z+
    654c:	0d 92       	st	X+, r0
    654e:	a0 31       	cpi	r26, 0x10	; 16
    6550:	b1 07       	cpc	r27, r17
    6552:	d9 f7       	brne	.-10     	; 0x654a <__do_copy_data+0xc>

00006554 <__do_clear_bss>:
    6554:	10 e1       	ldi	r17, 0x10	; 16
    6556:	a0 e1       	ldi	r26, 0x10	; 16
    6558:	b5 e0       	ldi	r27, 0x05	; 5
    655a:	01 c0       	rjmp	.+2      	; 0x655e <.do_clear_bss_start>

0000655c <.do_clear_bss_loop>:
    655c:	1d 92       	st	X+, r1

0000655e <.do_clear_bss_start>:
    655e:	af 30       	cpi	r26, 0x0F	; 15
    6560:	b1 07       	cpc	r27, r17
    6562:	e1 f7       	brne	.-8      	; 0x655c <.do_clear_bss_loop>

00006564 <wdt_init>:

void wdt_init(void)
{

#if TRUE_RANDOM_GEN == 1	
	wdt_randomize();
    6564:	0e 94 4d 38 	call	0x709a	; 0x709a <wdt_randomize>
#endif

    MCUSR = 0;
    6568:	14 be       	out	0x34, r1	; 52
    wdt_disable();
    656a:	88 e1       	ldi	r24, 0x18	; 24
    656c:	0f b6       	in	r0, 0x3f	; 63
    656e:	f8 94       	cli
    6570:	80 93 60 00 	sts	0x0060, r24
    6574:	10 92 60 00 	sts	0x0060, r1
    6578:	0f be       	out	0x3f, r0	; 63

0000657a <Initialize>:


void Initialize(void){
	int i;

	if(!isEepromFormatted()) FormatEeprom();
    657a:	0e 94 0f 39 	call	0x721e	; 0x721e <isEepromFormatted>
    657e:	81 11       	cpse	r24, r1
    6580:	02 c0       	rjmp	.+4      	; 0x6586 <Initialize+0xc>
    6582:	0e 94 ed 38 	call	0x71da	; 0x71da <FormatEeprom>

	cli();
    6586:	f8 94       	cli
		mix_bank=0;
	#endif
	
	#if MIXER_CHAN4_TYPE == 0
		//initialize LFSR		
		tr4_barrel_lo=1;
    6588:	81 e0       	ldi	r24, 0x01	; 1
    658a:	80 93 e4 0c 	sts	0x0CE4, r24
		tr4_barrel_hi=1;		
    658e:	80 93 e5 0c 	sts	0x0CE5, r24
		tr4_params=0b00000001; //15 bits no divider (1)
    6592:	80 93 e3 0c 	sts	0x0CE3, r24
		snesMouseEnabled=false;
	#endif

	//silence all sound channels
	for(i=0;i<CHANNELS;i++){
		mixer.channels.all[i].volume=0;
    6596:	10 92 d0 0c 	sts	0x0CD0, r1
    659a:	10 92 d6 0c 	sts	0x0CD6, r1
    659e:	10 92 dc 0c 	sts	0x0CDC, r1
    65a2:	10 92 e2 0c 	sts	0x0CE2, r1
    65a6:	10 92 e8 0c 	sts	0x0CE8, r1
	}
	
	//set sync parameters. starts at odd field, in pre-eq pulses, line 1, vsync flag cleared
	sync_phase=0;
    65aa:	10 92 b6 0c 	sts	0x0CB6, r1
	sync_flags=0;
    65ae:	10 92 b8 0c 	sts	0x0CB8, r1
	sync_pulse=SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES;
    65b2:	92 e1       	ldi	r25, 0x12	; 18
    65b4:	90 93 b7 0c 	sts	0x0CB7, r25

	//set rendering parameters
	render_lines_count=FRAME_LINES;
    65b8:	90 ee       	ldi	r25, 0xE0	; 224
    65ba:	90 93 be 0c 	sts	0x0CBE, r25
	first_render_line=FIRST_RENDER_LINE;
    65be:	94 e1       	ldi	r25, 0x14	; 20
    65c0:	90 93 bd 0c 	sts	0x0CBD, r25

	joypad1_status_hi=0;
    65c4:	10 92 c2 0c 	sts	0x0CC2, r1
    65c8:	10 92 c1 0c 	sts	0x0CC1, r1
	joypad2_status_hi=0;
    65cc:	10 92 c6 0c 	sts	0x0CC6, r1
    65d0:	10 92 c5 0c 	sts	0x0CC5, r1
	sound_enabled=1;
    65d4:	80 93 cf 0c 	sts	0x0CCF, r24

	InitializeVideoMode();
    65d8:	0e 94 4d 46 	call	0x8c9a	; 0x8c9a <InitializeVideoMode>
    65dc:	84 e8       	ldi	r24, 0x84	; 132
    65de:	90 e0       	ldi	r25, 0x00	; 0
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
		val=pgm_read_word(&io_table[j]);
    65e0:	fc 01       	movw	r30, r24
    65e2:	25 91       	lpm	r18, Z+
    65e4:	34 91       	lpm	r19, Z
		ptr=(u8*)(val&0xff);
    65e6:	f9 01       	movw	r30, r18
    65e8:	ff 27       	eor	r31, r31
		*ptr=val>>8;	
    65ea:	30 83       	st	Z, r19
    65ec:	02 96       	adiw	r24, 0x02	; 2
	InitializeVideoMode();
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
    65ee:	20 e0       	ldi	r18, 0x00	; 0
    65f0:	82 3b       	cpi	r24, 0xB2	; 178
    65f2:	92 07       	cpc	r25, r18
    65f4:	a9 f7       	brne	.-22     	; 0x65e0 <Initialize+0x66>
		val=pgm_read_word(&io_table[j]);
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;	
	}

	sei();
    65f6:	78 94       	sei
	
	DisplayLogo();
    65f8:	0e 94 dc 46 	call	0x8db8	; 0x8db8 <DisplayLogo>
    65fc:	0e 94 32 65 	call	0xca64	; 0xca64 <main>
    6600:	0c 94 80 67 	jmp	0xcf00	; 0xcf00 <_exit>

00006604 <__bad_interrupt>:
    6604:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00006608 <sub_video_mode3>:
	;***************************************************

	sub_video_mode3:
		;de-activate sync timer interrupts
		;we will need to use the I flag to branch in a critical loop
		ldi ZL,(0<<OCIE1A)
    6608:	e0 e0       	ldi	r30, 0x00	; 0
		sts _SFR_MEM_ADDR(TIMSK1),ZL
    660a:	e0 93 6f 00 	sts	0x006F, r30

		;wait cycles to align with next hsync
		WAIT r26,183+241
    660e:	ad e8       	ldi	r26, 0x8D	; 141
    6610:	aa 95       	dec	r26
    6612:	f1 f7       	brne	.-4      	; 0x6610 <sub_video_mode3+0x8>
    6614:	00 00       	nop

		;Refresh ramtiles indexes in VRAM
		;This has to be done because the main
		;program may have altered the VRAM
		;after vsync and the rendering interrupt.
		lds r16,userRamTilesCount
    6616:	00 91 f3 0c 	lds	r16, 0x0CF3

		ldi ZL,lo8(ram_tiles_restore);
    661a:	e0 e5       	ldi	r30, 0x50	; 80
		ldi ZH,hi8(ram_tiles_restore);
    661c:	fc e0       	ldi	r31, 0x0C	; 12
		ldi r18,3
    661e:	23 e0       	ldi	r18, 0x03	; 3
		mul r16,r18
    6620:	02 9f       	mul	r16, r18
		add ZL,r0
    6622:	e0 0d       	add	r30, r0
		adc ZH,r1
    6624:	f1 1d       	adc	r31, r1

		ldi YL,lo8(vram)
    6626:	c0 e0       	ldi	r28, 0x00	; 0
		ldi YH,hi8(vram)
    6628:	d1 e0       	ldi	r29, 0x01	; 1

		lds r18,free_tile_index
    662a:	20 91 7e 0d 	lds	r18, 0x0D7E
		ldi r19,MAX_RAMTILES		;maximum possible ramtiles
    662e:	3c e3       	ldi	r19, 0x3C	; 60
		sub r19,r18					;sub free tile
    6630:	32 1b       	sub	r19, r18
		add r19,r16					;add user tiles
    6632:	30 0f       	add	r19, r16

		cp r18,r16
    6634:	20 17       	cp	r18, r16
		breq no_ramtiles
    6636:	51 f0       	breq	.+20     	; 0x664c <no_ramtiles>
		nop
    6638:	00 00       	nop
	...

0000663c <upd_loop>:
		nop
upd_loop:
		ld XL,Z+	;load vram offset of ramtile
    663c:	a1 91       	ld	r26, Z+
		ld XH,Z+
    663e:	b1 91       	ld	r27, Z+

		ld r17,X	;get latest VRAM tile that may have been modified my
    6640:	1c 91       	ld	r17, X
		st Z+,r17	;the main program and store it in the restore buffer
    6642:	11 93       	st	Z+, r17
		st X,r16	;write the ramtile index back to vram
    6644:	0c 93       	st	X, r16

		inc r16
    6646:	03 95       	inc	r16
		cp r16,r18
    6648:	02 17       	cp	r16, r18
		brlo upd_loop ;loop is 14 cycles
    664a:	c0 f3       	brcs	.-16     	; 0x663c <upd_loop>

0000664c <no_ramtiles>:

no_ramtiles:
		;wait for remaining maximum possible ramtiles
1:
		ldi r17,3
    664c:	13 e0       	ldi	r17, 0x03	; 3
		dec r17
    664e:	1a 95       	dec	r17
		brne .-4
    6650:	f1 f7       	brne	.-4      	; 0x664e <no_ramtiles+0x2>
		rjmp .
    6652:	00 c0       	rjmp	.+0      	; 0x6654 <no_ramtiles+0x8>
		dec r19
    6654:	3a 95       	dec	r19
		brne 1b
    6656:	d1 f7       	brne	.-12     	; 0x664c <no_ramtiles>

		;**********************
		; setup scroll stuff
		;**********************
	
		ldi YL,lo8(vram)
    6658:	c0 e0       	ldi	r28, 0x00	; 0
		ldi YH,hi8(vram)
    665a:	d1 e0       	ldi	r29, 0x01	; 1

		//add X scroll (coarse)
		lds r18,screen_scrollX ;ScreenScrollX
    665c:	20 91 b2 0c 	lds	r18, 0x0CB2
		mov r25,r18
    6660:	92 2f       	mov	r25, r18
		andi r18,0xf8	;(x>>3) * 8 interleave
    6662:	28 7f       	andi	r18, 0xF8	; 248
		add YL,r18
    6664:	c2 0f       	add	r28, r18

		;save Y wrap adress 
		movw r12,YL
    6666:	6e 01       	movw	r12, r28
	

		//add Y scroll (coarse)
		lds r16,screen_scrollY ;ScreenScrollY
    6668:	00 91 b3 0c 	lds	r16, 0x0CB3
		mov r22,r16
    666c:	60 2f       	mov	r22, r16
		lsr r16
    666e:	06 95       	lsr	r16
		lsr r16
    6670:	06 95       	lsr	r16
		lsr r16 ;/8
    6672:	06 95       	lsr	r16

        lds r17,screen_scrollHeight
    6674:	10 91 b4 0c 	lds	r17, 0x0CB4
        sub r17,r16
    6678:	10 1b       	sub	r17, r16
        mov r15,r17 ;Y tiles to draw before wrapping
    667a:	f1 2e       	mov	r15, r17

        mov r17,r16
    667c:	10 2f       	mov	r17, r16
        lsr r16
    667e:	06 95       	lsr	r16
        lsr r16
    6680:	06 95       	lsr	r16
        lsr r16 ;/8
    6682:	06 95       	lsr	r16
		add YH,r16      ; (bits 6-7)
    6684:	d0 0f       	add	r29, r16
		andi r17,0x7
    6686:	17 70       	andi	r17, 0x07	; 7
        add YL,r17      ;interleave (bits 3-5)
    6688:	c1 0f       	add	r28, r17
        andi r22,0x7    ;fine Y scrolling (bits 0-2)
    668a:	67 70       	andi	r22, 0x07	; 7
		;lds r20,tile_table_lo
		;lds r21,tile_table_hi
		;out _SFR_IO_ADDR(GPIOR1),r20 ;store for later
		;out _SFR_IO_ADDR(GPIOR2),r21

		lds r20,overlay_tile_table
    668c:	40 91 b0 0c 	lds	r20, 0x0CB0
		lds r21,overlay_tile_table+1
    6690:	50 91 b1 0c 	lds	r21, 0x0CB1
		lds r6,tile_table_lo
    6694:	60 90 ac 0c 	lds	r6, 0x0CAC
		lds r7,tile_table_hi
    6698:	70 90 ad 0c 	lds	r7, 0x0CAD
		out _SFR_IO_ADDR(GPIOR1),r6 ;store for later
    669c:	6a bc       	out	0x2a, r6	; 42
		out _SFR_IO_ADDR(GPIOR2),r7
    669e:	7b bc       	out	0x2b, r7	; 43


		;save main section value	
		movw r10,YL
    66a0:	5e 01       	movw	r10, r28
		mov r23,r22
    66a2:	76 2f       	mov	r23, r22
		mov r24,r15
    66a4:	8f 2d       	mov	r24, r15
		mov r9,r25
    66a6:	99 2e       	mov	r9, r25

		;load values for overlay if it's activated (overlay_height>0)
		
		;compute beginning of overlay in vram 
		lds r16,screen_scrollHeight
    66a8:	00 91 b4 0c 	lds	r16, 0x0CB4
		mov r18,r16
    66ac:	20 2f       	mov	r18, r16
		lsr r16
    66ae:	06 95       	lsr	r16
		lsr r16
    66b0:	06 95       	lsr	r16
		lsr r16			;hi8
    66b2:	06 95       	lsr	r16
		inc r16			;add 0x100 ram offset
    66b4:	03 95       	inc	r16
		andi r18,7		;lo8
    66b6:	27 70       	andi	r18, 0x07	; 7
		
		lds r19,overlay_height	
    66b8:	30 91 af 0c 	lds	r19, 0x0CAF
		cpi r19,0
    66bc:	30 30       	cpi	r19, 0x00	; 0
		in r0, _SFR_IO_ADDR(SREG)
    66be:	0f b6       	in	r0, 0x3f	; 63

		sbrs r0,SREG_Z
    66c0:	01 fe       	sbrs	r0, 1
		clr r22
    66c2:	66 27       	eor	r22, r22
		sbrs r0,SREG_Z
    66c4:	01 fe       	sbrs	r0, 1
		mov YL,r18		;lo8(overlay_vram)
    66c6:	c2 2f       	mov	r28, r18
		sbrs r0,SREG_Z
    66c8:	01 fe       	sbrs	r0, 1
		mov YH,r16		;hi8(overlay_vram)
    66ca:	d0 2f       	mov	r29, r16
		sbrs r0,SREG_Z
    66cc:	01 fe       	sbrs	r0, 1
		ser r24
    66ce:	8f ef       	ldi	r24, 0xFF	; 255
		sbrs r0,SREG_Z
    66d0:	01 fe       	sbrs	r0, 1
		clr r9
    66d2:	99 24       	eor	r9, r9

		sbrs r0,SREG_Z
    66d4:	01 fe       	sbrs	r0, 1
		out _SFR_IO_ADDR(GPIOR1),r20
    66d6:	4a bd       	out	0x2a, r20	; 42
		sbrs r0,SREG_Z
    66d8:	01 fe       	sbrs	r0, 1
		out _SFR_IO_ADDR(GPIOR2),r21
    66da:	5b bd       	out	0x2b, r21	; 43


		//ldi r16,SCREEN_TILES_V*TILE_HEIGHT; total scanlines to draw
		//mov r8,r16
		lds r8,render_lines_count ;total scanlines to draw
    66dc:	80 90 be 0c 	lds	r8, 0x0CBE

000066e0 <next_tile_line>:
	;r23 = Main section tile row
	;r24 = Current Y tiles to draw before wrapping
	;r25 = Main section scrollX

	next_tile_line:
		rcall hsync_pulse
    66e0:	bc d3       	rcall	.+1912   	; 0x6e5a <hsync_pulse>

		WAIT r18,HSYNC_USABLE_CYCLES - AUDIO_OUT_HSYNC_CYCLES
    66e2:	24 e0       	ldi	r18, 0x04	; 4
    66e4:	2a 95       	dec	r18
    66e6:	f1 f7       	brne	.-4      	; 0x66e4 <next_tile_line+0x4>
    66e8:	00 00       	nop
				
		call render_tile_line
    66ea:	0e 94 b6 33 	call	0x676c	; 0x676c <render_tile_line>

		WAIT r18,58
    66ee:	23 e1       	ldi	r18, 0x13	; 19
    66f0:	2a 95       	dec	r18
    66f2:	f1 f7       	brne	.-4      	; 0x66f0 <next_tile_line+0x10>
    66f4:	00 00       	nop

		inc r22
    66f6:	63 95       	inc	r22
		dec r8
    66f8:	8a 94       	dec	r8
		breq text_frame_end
    66fa:	09 f1       	breq	.+66     	; 0x673e <text_frame_end>

		cpi r22,TILE_HEIGHT ;last char line? 1
    66fc:	68 30       	cpi	r22, 0x08	; 8
		breq next_tile_row
    66fe:	29 f0       	breq	.+10     	; 0x670a <next_tile_row>

		;wait to align with next_tile_row instructions (+1 cycle for the breq)
		WAIT r16,25
    6700:	08 e0       	ldi	r16, 0x08	; 8
    6702:	0a 95       	dec	r16
    6704:	f1 f7       	brne	.-4      	; 0x6702 <next_tile_line+0x22>
    6706:	00 00       	nop
		rjmp next_tile_line
    6708:	eb cf       	rjmp	.-42     	; 0x66e0 <next_tile_line>

0000670a <next_tile_row>:

	next_tile_row:

		clr r22		;clear current char line
    670a:	66 27       	eor	r22, r22

		;increment vram pointer next row
		mov r16,YL
    670c:	0c 2f       	mov	r16, r28
		andi r16,0x7
    670e:	07 70       	andi	r16, 0x07	; 7
		cpi r16,7
    6710:	07 30       	cpi	r16, 0x07	; 7
		breq 1f
    6712:	11 f0       	breq	.+4      	; 0x6718 <next_tile_row+0xe>
		inc YL
    6714:	c3 95       	inc	r28
		rjmp 2f
    6716:	02 c0       	rjmp	.+4      	; 0x671c <next_tile_row+0x12>
	1:
		andi YL,0xf8
    6718:	c8 7f       	andi	r28, 0xF8	; 248
		inc YH
    671a:	d3 95       	inc	r29
	2:

		dec r24		;wrap section?
    671c:	8a 95       	dec	r24
		brne .+2
    671e:	09 f4       	brne	.+2      	; 0x6722 <next_tile_row+0x18>
		movw YL,r12
    6720:	e6 01       	movw	r28, r12

		dec r19
    6722:	3a 95       	dec	r19
		brne .+2
    6724:	09 f4       	brne	.+2      	; 0x6728 <next_tile_row+0x1e>
		mov r22,r23	;section tile row
    6726:	67 2f       	mov	r22, r23
		brne .+2
    6728:	09 f4       	brne	.+2      	; 0x672c <next_tile_row+0x22>
		movw YL,r10 ;vram adress
    672a:	e5 01       	movw	r28, r10
		brne .+2
    672c:	09 f4       	brne	.+2      	; 0x6730 <next_tile_row+0x26>
		mov r24,r15 ;Y wrapping
    672e:	8f 2d       	mov	r24, r15
		brne .+2
    6730:	09 f4       	brne	.+2      	; 0x6734 <next_tile_row+0x2a>
		mov r9,r25  ;scrollX
    6732:	99 2e       	mov	r9, r25

		brne .+2
    6734:	09 f4       	brne	.+2      	; 0x6738 <next_tile_row+0x2e>
		out _SFR_IO_ADDR(GPIOR1),r6  ;tileset
    6736:	6a bc       	out	0x2a, r6	; 42
		brne .+2
    6738:	09 f4       	brne	.+2      	; 0x673c <next_tile_row+0x32>
		out _SFR_IO_ADDR(GPIOR2),r7  ;tilset
    673a:	7b bc       	out	0x2b, r7	; 43

		rjmp next_tile_line
    673c:	d1 cf       	rjmp	.-94     	; 0x66e0 <next_tile_line>

0000673e <text_frame_end>:

	text_frame_end:

		WAIT r18,28
    673e:	29 e0       	ldi	r18, 0x09	; 9
    6740:	2a 95       	dec	r18
    6742:	f1 f7       	brne	.-4      	; 0x6740 <text_frame_end+0x2>
    6744:	00 00       	nop

		rcall hsync_pulse ;145
    6746:	89 d3       	rcall	.+1810   	; 0x6e5a <hsync_pulse>
	
		clr r1
    6748:	11 24       	eor	r1, r1
		call RestoreBackground
    674a:	0e 94 00 45 	call	0x8a00	; 0x8a00 <RestoreBackground>

		;set vsync flag & flip field
		lds ZL,sync_flags
    674e:	e0 91 b8 0c 	lds	r30, 0x0CB8
		ldi r20,SYNC_FLAG_FIELD
    6752:	42 e0       	ldi	r20, 0x02	; 2
		ori ZL,SYNC_FLAG_VSYNC
    6754:	e1 60       	ori	r30, 0x01	; 1
		eor ZL,r20
    6756:	e4 27       	eor	r30, r20
		sts sync_flags,ZL
    6758:	e0 93 b8 0c 	sts	0x0CB8, r30
	
		cli 
    675c:	f8 94       	cli

		;re-activate sync timer interrupts
		ldi ZL,(1<<OCIE1A)
    675e:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIMSK1),ZL
    6760:	e0 93 6f 00 	sts	0x006F, r30
			
		;clear any pending timer int
		ldi ZL,(1<<OCF1A)
    6764:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIFR1),ZL
    6766:	e0 93 36 00 	sts	0x0036, r30

		ret
    676a:	08 95       	ret

0000676c <render_tile_line>:
	; Can destroy: r0,r1,r2,r3,r4,r5,r6,r7,r13,r16,r17,r18,r19,r20,r21,Z
	; 
	; cycles  = 1495
	;*************************************************
	render_tile_line:
		push YL
    676c:	cf 93       	push	r28
		push YH
    676e:	df 93       	push	r29
		push r23
    6770:	7f 93       	push	r23
		push r22
    6772:	6f 93       	push	r22
		push r19
    6774:	3f 93       	push	r19
		push r13
    6776:	df 92       	push	r13
		push r12
    6778:	cf 92       	push	r12
		push r9
    677a:	9f 92       	push	r9
		push r7
    677c:	7f 92       	push	r7
		push r6
    677e:	6f 92       	push	r6
		;--------------------------
		; Rendering 
		;---------------------------

		;get tile row offset
		ldi r23,TILE_WIDTH ;tile width in pixels
    6780:	78 e0       	ldi	r23, 0x08	; 8
		mul r22,r23
    6782:	67 9f       	mul	r22, r23

		;compute base adresses for ROM and RAM tiles
		in r16,_SFR_IO_ADDR(GPIOR1) ;tile_table_lo
    6784:	0a b5       	in	r16, 0x2a	; 42
		in r17,_SFR_IO_ADDR(GPIOR2) ;tile_table_hi
    6786:	1b b5       	in	r17, 0x2b	; 43
		subi r16,lo8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    6788:	00 50       	subi	r16, 0x00	; 0
		sbci r17,hi8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    678a:	17 40       	sbci	r17, 0x07	; 7

		add r16,r0
    678c:	00 0d       	add	r16, r0
		adc r17,r1
    678e:	11 1d       	adc	r17, r1
		movw r2,r16			;rom tiles adress
    6790:	18 01       	movw	r2, r16

		ldi r16,lo8(ram_tiles)
    6792:	00 e5       	ldi	r16, 0x50	; 80
		ldi r17,hi8(ram_tiles)
    6794:	15 e0       	ldi	r17, 0x05	; 5
		add r16,r0
    6796:	00 0d       	add	r16, r0
		adc r17,r1
    6798:	11 1d       	adc	r17, r1
		movw r4,r16			;ram tiles adress
    679a:	28 01       	movw	r4, r16

		ldi r19,TILE_HEIGHT*TILE_WIDTH
    679c:	30 e4       	ldi	r19, 0x40	; 64
		ldi r17,SCREEN_TILES_H-1	;main loop counter
    679e:	1b e1       	ldi	r17, 0x1B	; 27


		;handle fine scroll offset
		;lds r22,screenSections+scrollX
		mov r22,r9
    67a0:	69 2d       	mov	r22, r9
		andi r22,0x7		
    67a2:	67 70       	andi	r22, 0x07	; 7
		mov r14,r22	;pixels to draw on last tile	
    67a4:	e6 2e       	mov	r14, r22
		cli			;no trailing pixel to draw (hack, see end: )
    67a6:	f8 94       	cli
		breq .+2
    67a8:	09 f0       	breq	.+2      	; 0x67ac <render_tile_line+0x40>
		sei			;some trailing pixel to draw (hack, see end: )
    67aa:	78 94       	sei

		;get first pixel of last tile in ROM (for ROM tiles fine scroll)
		;and adress of next pixel
		movw ZL,YL
    67ac:	fe 01       	movw	r30, r28
		subi ZL,-(SCREEN_TILES_H*8)
    67ae:	e0 52       	subi	r30, 0x20	; 32
		ld r18,Z
    67b0:	20 81       	ld	r18, Z
		mul r18,r19 	;tile*width*height
    67b2:	23 9f       	mul	r18, r19
	    add r0,r2    ;add ROM title table address +row offset
    67b4:	02 0c       	add	r0, r2
	    adc r1,r3
    67b6:	13 1c       	adc	r1, r3
		movw ZL,r0
    67b8:	f0 01       	movw	r30, r0
		lpm r9,Z+	;hold first pixel until end 
    67ba:	95 90       	lpm	r9, Z+
		movw r12,ZL ;hold second pixel adress until end
    67bc:	6f 01       	movw	r12, r30


		;compute first tile adress
	    ld r18,Y     	;load next tile # from VRAM
    67be:	28 81       	ld	r18, Y
		subi YL,-8
    67c0:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT
    67c2:	2c 31       	cpi	r18, 0x1C	; 28
		in r16,_SFR_IO_ADDR(SREG)	;save the carry flag for later	
    67c4:	0f b7       	in	r16, 0x3f	; 63
		mul r18,r19 	;tile*width*height
    67c6:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles	
    67c8:	a1 01       	movw	r20, r2
		sbrc r16,SREG_C
    67ca:	00 fd       	sbrc	r16, 0
		movw r20,r4		;ram tiles
    67cc:	a2 01       	movw	r20, r4
	    add r0,r20    ;add title table address +row offset
    67ce:	04 0e       	add	r0, r20
	    adc r1,r21
    67d0:	15 1e       	adc	r1, r21
		movw XL,r0
    67d2:	d0 01       	movw	r26, r0


		;compute second tile adress
	    ld r18,Y     	;load next tile # from VRAM
    67d4:	28 81       	ld	r18, Y
		subi YL,-8
    67d6:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT
    67d8:	2c 31       	cpi	r18, 0x1C	; 28
		in r7,_SFR_IO_ADDR(SREG)	;save the carry flag for later
    67da:	7f b6       	in	r7, 0x3f	; 63
		bst r7,SREG_C
    67dc:	70 fa       	bst	r7, 0
		mul r18,r19 	;tile*width*height
    67de:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles
    67e0:	a1 01       	movw	r20, r2
		brtc .+2
    67e2:	0e f4       	brtc	.+2      	; 0x67e6 <render_tile_line+0x7a>
		movw r20,r4		;ram tiles
    67e4:	a2 01       	movw	r20, r4
	    add r0,r20      ;add title table address +row offset
    67e6:	04 0e       	add	r0, r20
	    adc r1,r21
    67e8:	15 1e       	adc	r1, r21
		movw ZL,r0
    67ea:	f0 01       	movw	r30, r0
		movw r6,ZL		;push Z
    67ec:	3f 01       	movw	r6, r30

000067ee <do_fine_scroll>:


	do_fine_scroll:
		;output 1st tile with fine scroll offset 
		clr r0
    67ee:	00 24       	eor	r0, r0
		add XL,r22	;add fine offset
    67f0:	a6 0f       	add	r26, r22
		adc XH,r0
    67f2:	b0 1d       	adc	r27, r0

		;compute jump offset
		ldi r23,3
    67f4:	73 e0       	ldi	r23, 0x03	; 3
		mul r22,r23 ;3 instructions
    67f6:	67 9f       	mul	r22, r23
	
		sbrs r16,SREG_C
    67f8:	00 ff       	sbrs	r16, 0
		rjmp rom_fine_scroll
    67fa:	22 c0       	rjmp	.+68     	; 0x6840 <rom_fine_scroll>

000067fc <ram_fine_scroll>:

	/***FINE SCROLL RAM LOOP***/
	ram_fine_scroll:
		rjmp .
    67fc:	00 c0       	rjmp	.+0      	; 0x67fe <ram_fine_scroll+0x2>
		ldi r22,lo8(pm(ram_fine_scroll_loop))
    67fe:	66 e0       	ldi	r22, 0x06	; 6
		ldi r23,hi8(pm(ram_fine_scroll_loop))
    6800:	74 e3       	ldi	r23, 0x34	; 52
		add r22,r0
    6802:	60 0d       	add	r22, r0
		adc r23,r1
    6804:	71 1d       	adc	r23, r1
		push r22
    6806:	6f 93       	push	r22
		push r23	
    6808:	7f 93       	push	r23
		ret ;jump into ram_fine_scroll_loop
    680a:	08 95       	ret

0000680c <ram_fine_scroll_loop>:
	ram_fine_scroll_loop:
		.rept 8
			ld r16,X+
			lpm
			out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		.endr
    680c:	0d 91       	ld	r16, X+
    680e:	c8 95       	lpm
    6810:	08 b9       	out	0x08, r16	; 8
    6812:	0d 91       	ld	r16, X+
    6814:	c8 95       	lpm
    6816:	08 b9       	out	0x08, r16	; 8
    6818:	0d 91       	ld	r16, X+
    681a:	c8 95       	lpm
    681c:	08 b9       	out	0x08, r16	; 8
    681e:	0d 91       	ld	r16, X+
    6820:	c8 95       	lpm
    6822:	08 b9       	out	0x08, r16	; 8
    6824:	0d 91       	ld	r16, X+
    6826:	c8 95       	lpm
    6828:	08 b9       	out	0x08, r16	; 8
    682a:	0d 91       	ld	r16, X+
    682c:	c8 95       	lpm
    682e:	08 b9       	out	0x08, r16	; 8
    6830:	0d 91       	ld	r16, X+
    6832:	c8 95       	lpm
    6834:	08 b9       	out	0x08, r16	; 8
    6836:	0d 91       	ld	r16, X+
    6838:	c8 95       	lpm
    683a:	08 b9       	out	0x08, r16	; 8

		;branch to tile #2
		brtc romloop
    683c:	1e f5       	brtc	.+70     	; 0x6884 <romloop>
		rjmp ramloop
    683e:	40 c0       	rjmp	.+128    	; 0x68c0 <ramloop>

00006840 <rom_fine_scroll>:

	/***FINE SCROLL ROM LOOP***/
	rom_fine_scroll:
		movw ZL,XL
    6840:	fd 01       	movw	r30, r26
		ldi r22,lo8(pm(rom_fine_scroll_loop))	
    6842:	68 e2       	ldi	r22, 0x28	; 40
		ldi r23,hi8(pm(rom_fine_scroll_loop))
    6844:	74 e3       	ldi	r23, 0x34	; 52
		add r22,r0
    6846:	60 0d       	add	r22, r0
		adc r23,r1
    6848:	71 1d       	adc	r23, r1
		push r22
    684a:	6f 93       	push	r22
		push r23	
    684c:	7f 93       	push	r23
		ret
    684e:	08 95       	ret

00006850 <rom_fine_scroll_loop>:
	rom_fine_scroll_loop:
		.rept 8
			lpm r16,Z+
			rjmp .
			out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		.endr 
    6850:	05 91       	lpm	r16, Z+
    6852:	00 c0       	rjmp	.+0      	; 0x6854 <rom_fine_scroll_loop+0x4>
    6854:	08 b9       	out	0x08, r16	; 8
    6856:	05 91       	lpm	r16, Z+
    6858:	00 c0       	rjmp	.+0      	; 0x685a <rom_fine_scroll_loop+0xa>
    685a:	08 b9       	out	0x08, r16	; 8
    685c:	05 91       	lpm	r16, Z+
    685e:	00 c0       	rjmp	.+0      	; 0x6860 <rom_fine_scroll_loop+0x10>
    6860:	08 b9       	out	0x08, r16	; 8
    6862:	05 91       	lpm	r16, Z+
    6864:	00 c0       	rjmp	.+0      	; 0x6866 <rom_fine_scroll_loop+0x16>
    6866:	08 b9       	out	0x08, r16	; 8
    6868:	05 91       	lpm	r16, Z+
    686a:	00 c0       	rjmp	.+0      	; 0x686c <rom_fine_scroll_loop+0x1c>
    686c:	08 b9       	out	0x08, r16	; 8
    686e:	05 91       	lpm	r16, Z+
    6870:	00 c0       	rjmp	.+0      	; 0x6872 <rom_fine_scroll_loop+0x22>
    6872:	08 b9       	out	0x08, r16	; 8
    6874:	05 91       	lpm	r16, Z+
    6876:	00 c0       	rjmp	.+0      	; 0x6878 <rom_fine_scroll_loop+0x28>
    6878:	08 b9       	out	0x08, r16	; 8
    687a:	05 91       	lpm	r16, Z+
    687c:	00 c0       	rjmp	.+0      	; 0x687e <rom_fine_scroll_loop+0x2e>
    687e:	08 b9       	out	0x08, r16	; 8
	
		movw ZL,r6		;restore Z for tile #2
    6880:	f3 01       	movw	r30, r6

		;branch to tile #2
		brts ramloop
    6882:	f6 f0       	brts	.+60     	; 0x68c0 <ramloop>

00006884 <romloop>:

	
	romloop:
	    lpm r16,Z+
    6884:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    6886:	08 b9       	out	0x08, r16	; 8
	    ld r18,Y     ;load next tile # from VRAM
    6888:	28 81       	ld	r18, Y

	    lpm r16,Z+
    688a:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 2
    688c:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    688e:	23 9f       	mul	r18, r19

	    lpm r16,Z+
    6890:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 3
    6892:	08 b9       	out	0x08, r16	; 8
		subi YL,-8
    6894:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT		;is tile in RAM or ROM? (RAM tiles have indexes<RAM_TILES_COUNT)
    6896:	2c 31       	cpi	r18, 0x1C	; 28
		
	    lpm r16,Z+
    6898:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    689a:	08 b9       	out	0x08, r16	; 8
		brsh .+2		;skip if next tile is in ROM	
    689c:	08 f4       	brcc	.+2      	; 0x68a0 <romloop+0x1c>
		movw r20,r4 	;load RAM title table address +row offset	
    689e:	a2 01       	movw	r20, r4
   
	    lpm r16,Z+
    68a0:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 5
    68a2:	08 b9       	out	0x08, r16	; 8
		add r0,r20		;add tile table address +row offset lsb
    68a4:	04 0e       	add	r0, r20
	    adc r1,r21		;add title table address +row offset msb
    68a6:	15 1e       	adc	r1, r21

	    lpm r16,Z+
    68a8:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 6
    68aa:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT	
    68ac:	2c 31       	cpi	r18, 0x1C	; 28
		dec r17			;decrement tiles to draw on line (does not affect carry)
    68ae:	1a 95       	dec	r17
   
	    lpm r16,Z+
    68b0:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 7   
    68b2:	08 b9       	out	0x08, r16	; 8
	    lpm r16,Z+
    68b4:	05 91       	lpm	r16, Z+

		breq end	
    68b6:	39 f1       	breq	.+78     	; 0x6906 <end>
	    movw ZL,r0   	;copy next tile adress
    68b8:	f0 01       	movw	r30, r0

	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    68ba:	08 b9       	out	0x08, r16	; 8
	    brcc romloop
    68bc:	18 f7       	brcc	.-58     	; 0x6884 <romloop>
	
		rjmp .
    68be:	00 c0       	rjmp	.+0      	; 0x68c0 <ramloop>

000068c0 <ramloop>:

	ramloop:

	    ld r16,Z+
    68c0:	01 91       	ld	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    68c2:	08 b9       	out	0x08, r16	; 8
	    ld r18,Y     ;load next tile # from VRAM
    68c4:	28 81       	ld	r18, Y

	    ld r16,Z+ 
    68c6:	01 91       	ld	r16, Z+
		subi YL,-8   		
    68c8:	c8 5f       	subi	r28, 0xF8	; 248
		out _SFR_IO_ADDR(DATA_PORT),r16 		;pixel 2
    68ca:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    68cc:	23 9f       	mul	r18, r19

	    ld r16,Z+
    68ce:	01 91       	ld	r16, Z+
		nop
    68d0:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16         ;pixel 3
    68d2:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    68d4:	2c 31       	cpi	r18, 0x1C	; 28
		rjmp .
    68d6:	00 c0       	rjmp	.+0      	; 0x68d8 <ramloop+0x18>
   
	    ld r16,Z+
    68d8:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    68da:	08 b9       	out	0x08, r16	; 8
		brcs .+2 
    68dc:	08 f0       	brcs	.+2      	; 0x68e0 <ramloop+0x20>
		movw r20,r2 	;ROM title table address +row offset	
    68de:	a1 01       	movw	r20, r2
   
   
	    ld r16,Z+
    68e0:	01 91       	ld	r16, Z+
	    add r0,r20    ;add title table address +row offset
    68e2:	04 0e       	add	r0, r20
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 5
    68e4:	08 b9       	out	0x08, r16	; 8
	    adc r1,r21
    68e6:	15 1e       	adc	r1, r21
		rjmp .
    68e8:	00 c0       	rjmp	.+0      	; 0x68ea <ramloop+0x2a>
    
		ld r16,Z+		
    68ea:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 6
    68ec:	08 b9       	out	0x08, r16	; 8
		ld r7,Z+
    68ee:	71 90       	ld	r7, Z+
	    ld r16,Z+	
    68f0:	01 91       	ld	r16, Z+
	
		movw ZL,r0
    68f2:	f0 01       	movw	r30, r0
		out _SFR_IO_ADDR(DATA_PORT),r7      ;pixel 7   
    68f4:	78 b8       	out	0x08, r7	; 8
		nop
    68f6:	00 00       	nop
		cpi r18,RAM_TILES_COUNT	
    68f8:	2c 31       	cpi	r18, 0x1C	; 28
	    dec r17
    68fa:	1a 95       	dec	r17
	    breq end
    68fc:	21 f0       	breq	.+8      	; 0x6906 <end>
	
		nop
    68fe:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    6900:	08 b9       	out	0x08, r16	; 8
	
	    brcc romloop
    6902:	00 f6       	brcc	.-128    	; 0x6884 <romloop>
		rjmp ramloop
    6904:	dd cf       	rjmp	.-70     	; 0x68c0 <ramloop>

00006906 <end>:
	
	end:
		out _SFR_IO_ADDR(DATA_PORT),r16  	;pixel 8
    6906:	08 b9       	out	0x08, r16	; 8
		brid end_fine_scroll				;hack: interrupt flag=0 => no fine offset pixel to draw
    6908:	27 f5       	brid	.+72     	; 0x6952 <end_fine_scroll>
		brcc end_rom_fine_scroll_loop
    690a:	30 f4       	brcc	.+12     	; 0x6918 <end_rom_fine_scroll_loop>

	/***END RAM LOOP***/
		movw ZL,r0
    690c:	f0 01       	movw	r30, r0

0000690e <end_ram_fine_scroll_loop>:
	end_ram_fine_scroll_loop:
		ld r16,Z+
    690e:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
    6910:	08 b9       	out	0x08, r16	; 8
		dec r14
    6912:	ea 94       	dec	r14
		brne end_ram_fine_scroll_loop
    6914:	e1 f7       	brne	.-8      	; 0x690e <end_ram_fine_scroll_loop>
		rjmp end_fine_scroll_ram
    6916:	1f c0       	rjmp	.+62     	; 0x6956 <end_fine_scroll_ram>

00006918 <end_rom_fine_scroll_loop>:

	/***END ROM LOOP***/
	end_rom_fine_scroll_loop:
		movw ZL,r12
    6918:	f6 01       	movw	r30, r12
		nop
    691a:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r9        ;output saved 1st pixel
    691c:	98 b8       	out	0x08, r9	; 8
		dec r14
    691e:	ea 94       	dec	r14
		breq end_fine_scroll_rom
    6920:	c9 f0       	breq	.+50     	; 0x6954 <end_fine_scroll_rom>
	.rept 6
		lpm r16,Z+		
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		dec r14
		breq end_fine_scroll_rom
	.endr
    6922:	05 91       	lpm	r16, Z+
    6924:	08 b9       	out	0x08, r16	; 8
    6926:	ea 94       	dec	r14
    6928:	a9 f0       	breq	.+42     	; 0x6954 <end_fine_scroll_rom>
    692a:	05 91       	lpm	r16, Z+
    692c:	08 b9       	out	0x08, r16	; 8
    692e:	ea 94       	dec	r14
    6930:	89 f0       	breq	.+34     	; 0x6954 <end_fine_scroll_rom>
    6932:	05 91       	lpm	r16, Z+
    6934:	08 b9       	out	0x08, r16	; 8
    6936:	ea 94       	dec	r14
    6938:	69 f0       	breq	.+26     	; 0x6954 <end_fine_scroll_rom>
    693a:	05 91       	lpm	r16, Z+
    693c:	08 b9       	out	0x08, r16	; 8
    693e:	ea 94       	dec	r14
    6940:	49 f0       	breq	.+18     	; 0x6954 <end_fine_scroll_rom>
    6942:	05 91       	lpm	r16, Z+
    6944:	08 b9       	out	0x08, r16	; 8
    6946:	ea 94       	dec	r14
    6948:	29 f0       	breq	.+10     	; 0x6954 <end_fine_scroll_rom>
    694a:	05 91       	lpm	r16, Z+
    694c:	08 b9       	out	0x08, r16	; 8
    694e:	ea 94       	dec	r14
    6950:	09 f0       	breq	.+2      	; 0x6954 <end_fine_scroll_rom>

00006952 <end_fine_scroll>:
	...

00006954 <end_fine_scroll_rom>:
	...

00006956 <end_fine_scroll_ram>:
	end_fine_scroll:	
		nop
	end_fine_scroll_rom:
		nop
	end_fine_scroll_ram:
		clr r16	
    6956:	00 27       	eor	r16, r16
		out _SFR_IO_ADDR(DATA_PORT),r16   
    6958:	08 b9       	out	0x08, r16	; 8

		pop r6
    695a:	6f 90       	pop	r6
		pop r7
    695c:	7f 90       	pop	r7
		pop r9
    695e:	9f 90       	pop	r9
		pop r12
    6960:	cf 90       	pop	r12
		pop r13
    6962:	df 90       	pop	r13
		pop r19
    6964:	3f 91       	pop	r19
		pop r22
    6966:	6f 91       	pop	r22
		pop r23
    6968:	7f 91       	pop	r23
		pop YH
    696a:	df 91       	pop	r29
		pop YL
    696c:	cf 91       	pop	r28

		ret
    696e:	08 95       	ret

00006970 <CopyFlashTile>:
; C-callable
; r24=Source ROM tile index
; r22=Dest RAM tile index
;************************************
CopyFlashTile:
	ldi r18,TILE_HEIGHT*TILE_WIDTH
    6970:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	lds ZL,tile_table_lo
    6972:	e0 91 ac 0c 	lds	r30, 0x0CAC
	lds ZH,tile_table_hi
    6976:	f0 91 ad 0c 	lds	r31, 0x0CAD
	mul r24,r18
    697a:	82 9f       	mul	r24, r18
	add ZL,r0
    697c:	e0 0d       	add	r30, r0
	adc ZH,r1
    697e:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    6980:	a0 e5       	ldi	r26, 0x50	; 80
	ldi XH,hi8(ram_tiles)
    6982:	b5 e0       	ldi	r27, 0x05	; 5
	mul r22,r18
    6984:	62 9f       	mul	r22, r18
	add XL,r0
    6986:	a0 0d       	add	r26, r0
	adc XH,r1
    6988:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	lpm r1,Z+
	st X+,r1
.endr
    698a:	15 90       	lpm	r1, Z+
    698c:	1d 92       	st	X+, r1
    698e:	15 90       	lpm	r1, Z+
    6990:	1d 92       	st	X+, r1
    6992:	15 90       	lpm	r1, Z+
    6994:	1d 92       	st	X+, r1
    6996:	15 90       	lpm	r1, Z+
    6998:	1d 92       	st	X+, r1
    699a:	15 90       	lpm	r1, Z+
    699c:	1d 92       	st	X+, r1
    699e:	15 90       	lpm	r1, Z+
    69a0:	1d 92       	st	X+, r1
    69a2:	15 90       	lpm	r1, Z+
    69a4:	1d 92       	st	X+, r1
    69a6:	15 90       	lpm	r1, Z+
    69a8:	1d 92       	st	X+, r1
    69aa:	15 90       	lpm	r1, Z+
    69ac:	1d 92       	st	X+, r1
    69ae:	15 90       	lpm	r1, Z+
    69b0:	1d 92       	st	X+, r1
    69b2:	15 90       	lpm	r1, Z+
    69b4:	1d 92       	st	X+, r1
    69b6:	15 90       	lpm	r1, Z+
    69b8:	1d 92       	st	X+, r1
    69ba:	15 90       	lpm	r1, Z+
    69bc:	1d 92       	st	X+, r1
    69be:	15 90       	lpm	r1, Z+
    69c0:	1d 92       	st	X+, r1
    69c2:	15 90       	lpm	r1, Z+
    69c4:	1d 92       	st	X+, r1
    69c6:	15 90       	lpm	r1, Z+
    69c8:	1d 92       	st	X+, r1
    69ca:	15 90       	lpm	r1, Z+
    69cc:	1d 92       	st	X+, r1
    69ce:	15 90       	lpm	r1, Z+
    69d0:	1d 92       	st	X+, r1
    69d2:	15 90       	lpm	r1, Z+
    69d4:	1d 92       	st	X+, r1
    69d6:	15 90       	lpm	r1, Z+
    69d8:	1d 92       	st	X+, r1
    69da:	15 90       	lpm	r1, Z+
    69dc:	1d 92       	st	X+, r1
    69de:	15 90       	lpm	r1, Z+
    69e0:	1d 92       	st	X+, r1
    69e2:	15 90       	lpm	r1, Z+
    69e4:	1d 92       	st	X+, r1
    69e6:	15 90       	lpm	r1, Z+
    69e8:	1d 92       	st	X+, r1
    69ea:	15 90       	lpm	r1, Z+
    69ec:	1d 92       	st	X+, r1
    69ee:	15 90       	lpm	r1, Z+
    69f0:	1d 92       	st	X+, r1
    69f2:	15 90       	lpm	r1, Z+
    69f4:	1d 92       	st	X+, r1
    69f6:	15 90       	lpm	r1, Z+
    69f8:	1d 92       	st	X+, r1
    69fa:	15 90       	lpm	r1, Z+
    69fc:	1d 92       	st	X+, r1
    69fe:	15 90       	lpm	r1, Z+
    6a00:	1d 92       	st	X+, r1
    6a02:	15 90       	lpm	r1, Z+
    6a04:	1d 92       	st	X+, r1
    6a06:	15 90       	lpm	r1, Z+
    6a08:	1d 92       	st	X+, r1
    6a0a:	15 90       	lpm	r1, Z+
    6a0c:	1d 92       	st	X+, r1
    6a0e:	15 90       	lpm	r1, Z+
    6a10:	1d 92       	st	X+, r1
    6a12:	15 90       	lpm	r1, Z+
    6a14:	1d 92       	st	X+, r1
    6a16:	15 90       	lpm	r1, Z+
    6a18:	1d 92       	st	X+, r1
    6a1a:	15 90       	lpm	r1, Z+
    6a1c:	1d 92       	st	X+, r1
    6a1e:	15 90       	lpm	r1, Z+
    6a20:	1d 92       	st	X+, r1
    6a22:	15 90       	lpm	r1, Z+
    6a24:	1d 92       	st	X+, r1
    6a26:	15 90       	lpm	r1, Z+
    6a28:	1d 92       	st	X+, r1
    6a2a:	15 90       	lpm	r1, Z+
    6a2c:	1d 92       	st	X+, r1
    6a2e:	15 90       	lpm	r1, Z+
    6a30:	1d 92       	st	X+, r1
    6a32:	15 90       	lpm	r1, Z+
    6a34:	1d 92       	st	X+, r1
    6a36:	15 90       	lpm	r1, Z+
    6a38:	1d 92       	st	X+, r1
    6a3a:	15 90       	lpm	r1, Z+
    6a3c:	1d 92       	st	X+, r1
    6a3e:	15 90       	lpm	r1, Z+
    6a40:	1d 92       	st	X+, r1
    6a42:	15 90       	lpm	r1, Z+
    6a44:	1d 92       	st	X+, r1
    6a46:	15 90       	lpm	r1, Z+
    6a48:	1d 92       	st	X+, r1
    6a4a:	15 90       	lpm	r1, Z+
    6a4c:	1d 92       	st	X+, r1
    6a4e:	15 90       	lpm	r1, Z+
    6a50:	1d 92       	st	X+, r1
    6a52:	15 90       	lpm	r1, Z+
    6a54:	1d 92       	st	X+, r1
    6a56:	15 90       	lpm	r1, Z+
    6a58:	1d 92       	st	X+, r1
    6a5a:	15 90       	lpm	r1, Z+
    6a5c:	1d 92       	st	X+, r1
    6a5e:	15 90       	lpm	r1, Z+
    6a60:	1d 92       	st	X+, r1
    6a62:	15 90       	lpm	r1, Z+
    6a64:	1d 92       	st	X+, r1
    6a66:	15 90       	lpm	r1, Z+
    6a68:	1d 92       	st	X+, r1
    6a6a:	15 90       	lpm	r1, Z+
    6a6c:	1d 92       	st	X+, r1
    6a6e:	15 90       	lpm	r1, Z+
    6a70:	1d 92       	st	X+, r1
    6a72:	15 90       	lpm	r1, Z+
    6a74:	1d 92       	st	X+, r1
    6a76:	15 90       	lpm	r1, Z+
    6a78:	1d 92       	st	X+, r1
    6a7a:	15 90       	lpm	r1, Z+
    6a7c:	1d 92       	st	X+, r1
    6a7e:	15 90       	lpm	r1, Z+
    6a80:	1d 92       	st	X+, r1
    6a82:	15 90       	lpm	r1, Z+
    6a84:	1d 92       	st	X+, r1
    6a86:	15 90       	lpm	r1, Z+
    6a88:	1d 92       	st	X+, r1
	clr r1
    6a8a:	11 24       	eor	r1, r1
	ret
    6a8c:	08 95       	ret

00006a8e <CopyRamTile>:
; r24=Source RAM tile index
; r22=Dest RAM tile index
;************************************
CopyRamTile:

	ldi r18,TILE_HEIGHT*TILE_WIDTH
    6a8e:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	ldi ZL,lo8(ram_tiles)
    6a90:	e0 e5       	ldi	r30, 0x50	; 80
	ldi ZH,hi8(ram_tiles)
    6a92:	f5 e0       	ldi	r31, 0x05	; 5
	mul r24,r18
    6a94:	82 9f       	mul	r24, r18
	add ZL,r0
    6a96:	e0 0d       	add	r30, r0
	adc ZH,r1
    6a98:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    6a9a:	a0 e5       	ldi	r26, 0x50	; 80
	ldi XH,hi8(ram_tiles)
    6a9c:	b5 e0       	ldi	r27, 0x05	; 5
	mul r22,r18
    6a9e:	62 9f       	mul	r22, r18
	add XL,r0
    6aa0:	a0 0d       	add	r26, r0
	adc XH,r1
    6aa2:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	ld r1,Z+
	st X+,r1
.endr
    6aa4:	11 90       	ld	r1, Z+
    6aa6:	1d 92       	st	X+, r1
    6aa8:	11 90       	ld	r1, Z+
    6aaa:	1d 92       	st	X+, r1
    6aac:	11 90       	ld	r1, Z+
    6aae:	1d 92       	st	X+, r1
    6ab0:	11 90       	ld	r1, Z+
    6ab2:	1d 92       	st	X+, r1
    6ab4:	11 90       	ld	r1, Z+
    6ab6:	1d 92       	st	X+, r1
    6ab8:	11 90       	ld	r1, Z+
    6aba:	1d 92       	st	X+, r1
    6abc:	11 90       	ld	r1, Z+
    6abe:	1d 92       	st	X+, r1
    6ac0:	11 90       	ld	r1, Z+
    6ac2:	1d 92       	st	X+, r1
    6ac4:	11 90       	ld	r1, Z+
    6ac6:	1d 92       	st	X+, r1
    6ac8:	11 90       	ld	r1, Z+
    6aca:	1d 92       	st	X+, r1
    6acc:	11 90       	ld	r1, Z+
    6ace:	1d 92       	st	X+, r1
    6ad0:	11 90       	ld	r1, Z+
    6ad2:	1d 92       	st	X+, r1
    6ad4:	11 90       	ld	r1, Z+
    6ad6:	1d 92       	st	X+, r1
    6ad8:	11 90       	ld	r1, Z+
    6ada:	1d 92       	st	X+, r1
    6adc:	11 90       	ld	r1, Z+
    6ade:	1d 92       	st	X+, r1
    6ae0:	11 90       	ld	r1, Z+
    6ae2:	1d 92       	st	X+, r1
    6ae4:	11 90       	ld	r1, Z+
    6ae6:	1d 92       	st	X+, r1
    6ae8:	11 90       	ld	r1, Z+
    6aea:	1d 92       	st	X+, r1
    6aec:	11 90       	ld	r1, Z+
    6aee:	1d 92       	st	X+, r1
    6af0:	11 90       	ld	r1, Z+
    6af2:	1d 92       	st	X+, r1
    6af4:	11 90       	ld	r1, Z+
    6af6:	1d 92       	st	X+, r1
    6af8:	11 90       	ld	r1, Z+
    6afa:	1d 92       	st	X+, r1
    6afc:	11 90       	ld	r1, Z+
    6afe:	1d 92       	st	X+, r1
    6b00:	11 90       	ld	r1, Z+
    6b02:	1d 92       	st	X+, r1
    6b04:	11 90       	ld	r1, Z+
    6b06:	1d 92       	st	X+, r1
    6b08:	11 90       	ld	r1, Z+
    6b0a:	1d 92       	st	X+, r1
    6b0c:	11 90       	ld	r1, Z+
    6b0e:	1d 92       	st	X+, r1
    6b10:	11 90       	ld	r1, Z+
    6b12:	1d 92       	st	X+, r1
    6b14:	11 90       	ld	r1, Z+
    6b16:	1d 92       	st	X+, r1
    6b18:	11 90       	ld	r1, Z+
    6b1a:	1d 92       	st	X+, r1
    6b1c:	11 90       	ld	r1, Z+
    6b1e:	1d 92       	st	X+, r1
    6b20:	11 90       	ld	r1, Z+
    6b22:	1d 92       	st	X+, r1
    6b24:	11 90       	ld	r1, Z+
    6b26:	1d 92       	st	X+, r1
    6b28:	11 90       	ld	r1, Z+
    6b2a:	1d 92       	st	X+, r1
    6b2c:	11 90       	ld	r1, Z+
    6b2e:	1d 92       	st	X+, r1
    6b30:	11 90       	ld	r1, Z+
    6b32:	1d 92       	st	X+, r1
    6b34:	11 90       	ld	r1, Z+
    6b36:	1d 92       	st	X+, r1
    6b38:	11 90       	ld	r1, Z+
    6b3a:	1d 92       	st	X+, r1
    6b3c:	11 90       	ld	r1, Z+
    6b3e:	1d 92       	st	X+, r1
    6b40:	11 90       	ld	r1, Z+
    6b42:	1d 92       	st	X+, r1
    6b44:	11 90       	ld	r1, Z+
    6b46:	1d 92       	st	X+, r1
    6b48:	11 90       	ld	r1, Z+
    6b4a:	1d 92       	st	X+, r1
    6b4c:	11 90       	ld	r1, Z+
    6b4e:	1d 92       	st	X+, r1
    6b50:	11 90       	ld	r1, Z+
    6b52:	1d 92       	st	X+, r1
    6b54:	11 90       	ld	r1, Z+
    6b56:	1d 92       	st	X+, r1
    6b58:	11 90       	ld	r1, Z+
    6b5a:	1d 92       	st	X+, r1
    6b5c:	11 90       	ld	r1, Z+
    6b5e:	1d 92       	st	X+, r1
    6b60:	11 90       	ld	r1, Z+
    6b62:	1d 92       	st	X+, r1
    6b64:	11 90       	ld	r1, Z+
    6b66:	1d 92       	st	X+, r1
    6b68:	11 90       	ld	r1, Z+
    6b6a:	1d 92       	st	X+, r1
    6b6c:	11 90       	ld	r1, Z+
    6b6e:	1d 92       	st	X+, r1
    6b70:	11 90       	ld	r1, Z+
    6b72:	1d 92       	st	X+, r1
    6b74:	11 90       	ld	r1, Z+
    6b76:	1d 92       	st	X+, r1
    6b78:	11 90       	ld	r1, Z+
    6b7a:	1d 92       	st	X+, r1
    6b7c:	11 90       	ld	r1, Z+
    6b7e:	1d 92       	st	X+, r1
    6b80:	11 90       	ld	r1, Z+
    6b82:	1d 92       	st	X+, r1
    6b84:	11 90       	ld	r1, Z+
    6b86:	1d 92       	st	X+, r1
    6b88:	11 90       	ld	r1, Z+
    6b8a:	1d 92       	st	X+, r1
    6b8c:	11 90       	ld	r1, Z+
    6b8e:	1d 92       	st	X+, r1
    6b90:	11 90       	ld	r1, Z+
    6b92:	1d 92       	st	X+, r1
    6b94:	11 90       	ld	r1, Z+
    6b96:	1d 92       	st	X+, r1
    6b98:	11 90       	ld	r1, Z+
    6b9a:	1d 92       	st	X+, r1
    6b9c:	11 90       	ld	r1, Z+
    6b9e:	1d 92       	st	X+, r1
    6ba0:	11 90       	ld	r1, Z+
    6ba2:	1d 92       	st	X+, r1
	clr r1
    6ba4:	11 24       	eor	r1, r1
	ret
    6ba6:	08 95       	ret

00006ba8 <BlitSprite>:
; r22=RAM tile index (bt)
; r21:r20=Y:X
; r19:r18=DY:DX
;************************************
BlitSprite:
	push r16
    6ba8:	0f 93       	push	r16
	push r17
    6baa:	1f 93       	push	r17
	push YL
    6bac:	cf 93       	push	r28
	push YH
    6bae:	df 93       	push	r29

	;src=sprites_tiletable_lo+(sprites[i].tileIndex*TILE_HEIGHT*TILE_WIDTH)
	ldi r25,SPRITE_STRUCT_SIZE
    6bb0:	94 e0       	ldi	r25, 0x04	; 4
	mul r24,r25
    6bb2:	89 9f       	mul	r24, r25

	ldi ZL,lo8(sprites)	
    6bb4:	e0 e1       	ldi	r30, 0x10	; 16
	ldi ZH,hi8(sprites)	
    6bb6:	f5 e0       	ldi	r31, 0x05	; 5
	add ZL,r0
    6bb8:	e0 0d       	add	r30, r0
	adc ZH,r1
    6bba:	f1 1d       	adc	r31, r1

	ldd r16,Z+sprFlags
    6bbc:	03 81       	ldd	r16, Z+3	; 0x03

	;8x16 multiply
	ldd r24,Z+sprTileIndex
    6bbe:	82 81       	ldd	r24, Z+2	; 0x02
	ldi r30,TILE_WIDTH*TILE_HEIGHT
    6bc0:	e0 e4       	ldi	r30, 0x40	; 64
	mul r24,r30
    6bc2:	8e 9f       	mul	r24, r30
	movw r26,r0
    6bc4:	d0 01       	movw	r26, r0
	
	;get tile bank addr
	ldi r25,4*2
    6bc6:	98 e0       	ldi	r25, 0x08	; 8
	mul r16,r25
    6bc8:	09 9f       	mul	r16, r25
	ldi YL,lo8(sprites_tile_banks)	
    6bca:	c4 ea       	ldi	r28, 0xA4	; 164
	ldi YH,hi8(sprites_tile_banks)	
    6bcc:	dc e0       	ldi	r29, 0x0C	; 12
	clr r0
    6bce:	00 24       	eor	r0, r0
	add YL,r1
    6bd0:	c1 0d       	add	r28, r1
	adc YH,r0		
    6bd2:	d0 1d       	adc	r29, r0
	ldd ZL,Y+0
    6bd4:	e8 81       	ld	r30, Y
	ldd ZH,Y+1
    6bd6:	f9 81       	ldd	r31, Y+1	; 0x01
	add ZL,r26	;tile data src
    6bd8:	ea 0f       	add	r30, r26
	adc ZH,r27
    6bda:	fb 1f       	adc	r31, r27
	
	;dest=ram_tiles+(bt*TILE_HEIGHT*TILE_WIDTH)
	ldi XL,lo8(ram_tiles)	
    6bdc:	a0 e5       	ldi	r26, 0x50	; 80
	ldi XH,hi8(ram_tiles)
    6bde:	b5 e0       	ldi	r27, 0x05	; 5
	ldi r25,TILE_WIDTH*TILE_HEIGHT
    6be0:	90 e4       	ldi	r25, 0x40	; 64
	mul r22,r25
    6be2:	69 9f       	mul	r22, r25
	add XL,r0
    6be4:	a0 0d       	add	r26, r0
	adc XH,r1
    6be6:	b1 1d       	adc	r27, r1
			srcXdiff=destXdiff;
			src+=destXdiff;
		}
	}
	*/
	clr r1
    6be8:	11 24       	eor	r1, r1
	clr YH		;hi8(srcXdiff)
    6bea:	dd 27       	eor	r29, r29

	cpi r20,0	
    6bec:	40 30       	cpi	r20, 0x00	; 0
	brne x_2nd_tile
    6bee:	51 f4       	brne	.+20     	; 0x6c04 <x_2nd_tile>
	
	add XL,r18	;dest+=dx
    6bf0:	a2 0f       	add	r26, r18
	adc XH,r1
    6bf2:	b1 1d       	adc	r27, r1
	mov r24,r18	;destXdiff=dx
    6bf4:	82 2f       	mov	r24, r18
	mov YL,r18	;srcXdiff=dx
    6bf6:	c2 2f       	mov	r28, r18

	sbrs r16,SPRITE_FLIP_X_BIT
    6bf8:	00 ff       	sbrs	r16, 0
	rjmp x_check_end
    6bfa:	11 c0       	rjmp	.+34     	; 0x6c1e <x_check_end>

	adiw ZL,(TILE_WIDTH-1)	;src+=7
    6bfc:	37 96       	adiw	r30, 0x07	; 7
	ldi YL,TILE_WIDTH*2		;srcXdiff=((TILE_WIDTH*2)-dx);
    6bfe:	c0 e1       	ldi	r28, 0x10	; 16
	sub YL,r18	
    6c00:	c2 1b       	sub	r28, r18
	rjmp x_check_end
    6c02:	0d c0       	rjmp	.+26     	; 0x6c1e <x_check_end>

00006c04 <x_2nd_tile>:

x_2nd_tile:
	ldi r24,TILE_WIDTH
    6c04:	88 e0       	ldi	r24, 0x08	; 8
	sub r24,r18		;8-DX = xdiff for dest
    6c06:	82 1b       	sub	r24, r18

	sbrc r16,SPRITE_FLIP_X_BIT
    6c08:	00 fd       	sbrc	r16, 0
	rjmp x2_flip_x
    6c0a:	04 c0       	rjmp	.+8      	; 0x6c14 <x2_flip_x>

	mov YL,r24		;srcXdiff=destXdiff;
    6c0c:	c8 2f       	mov	r28, r24
	add ZL,r24		;src+=destXdiff;
    6c0e:	e8 0f       	add	r30, r24
	adc ZH,r1	
    6c10:	f1 1d       	adc	r31, r1
	rjmp x_check_end
    6c12:	05 c0       	rjmp	.+10     	; 0x6c1e <x_check_end>

00006c14 <x2_flip_x>:

x2_flip_x:
	ldi YL,TILE_WIDTH
    6c14:	c8 e0       	ldi	r28, 0x08	; 8
	add YL,r18		;srcXdiff=TILE_WIDTH+dx;	
    6c16:	c2 0f       	add	r28, r18
	add ZL,r18		;src+=dx;
    6c18:	e2 0f       	add	r30, r18
	adc ZH,r1
    6c1a:	f1 1d       	adc	r31, r1
	sbiw ZL,1		;src--;
    6c1c:	31 97       	sbiw	r30, 0x01	; 1

00006c1e <x_check_end>:
		}else{
			src+=(ydiff*TILE_WIDTH);
		}
	}
	*/
	cpi r21,0
    6c1e:	50 30       	cpi	r21, 0x00	; 0
	brne y_2nd_tile
    6c20:	51 f4       	brne	.+20     	; 0x6c36 <y_2nd_tile>

	ldi r25,TILE_WIDTH	;dest+=(dy*TILE_WIDTH)
    6c22:	98 e0       	ldi	r25, 0x08	; 8
	mul r25,r19			
    6c24:	93 9f       	mul	r25, r19
	add XL,r0
    6c26:	a0 0d       	add	r26, r0
	adc XH,r1
    6c28:	b1 1d       	adc	r27, r1

	mov r25,r19			;ydiff=dy
    6c2a:	93 2f       	mov	r25, r19

	//sbrc r16,SPRITE_FLIP_Y_BIT
	//adiw ZL,(TILE_WIDTH*(TILE_HEIGHT-1))

	sbrc r16,SPRITE_FLIP_Y_BIT
    6c2c:	01 fd       	sbrc	r16, 1
	subi ZL,lo8(-(TILE_WIDTH*(TILE_HEIGHT-1)));src+=(TILE_WIDTH*(TILE_HEIGHT-1));
    6c2e:	e8 5c       	subi	r30, 0xC8	; 200
	sbrc r16,SPRITE_FLIP_Y_BIT
    6c30:	01 fd       	sbrc	r16, 1
	sbci ZH,hi8(-(TILE_WIDTH*(TILE_HEIGHT-1)))
    6c32:	ff 4f       	sbci	r31, 0xFF	; 255


	rjmp y_check_end
    6c34:	0a c0       	rjmp	.+20     	; 0x6c4a <y_check_end>

00006c36 <y_2nd_tile>:

y_2nd_tile:
	ldi r25,TILE_HEIGHT	;ydiff=(TILE_HEIGHT-dy)
    6c36:	98 e0       	ldi	r25, 0x08	; 8
	sub r25,r19	
    6c38:	93 1b       	sub	r25, r19
	
	mov r22,r19			;temp=dy-1
    6c3a:	63 2f       	mov	r22, r19
	dec r22
    6c3c:	6a 95       	dec	r22
	sbrs r16,SPRITE_FLIP_Y_BIT
    6c3e:	01 ff       	sbrs	r16, 1
	mov r22,r25			;temp=ydiff
    6c40:	69 2f       	mov	r22, r25

	ldi r21,TILE_WIDTH	;src+=(temp*TILE_WIDTH);
    6c42:	58 e0       	ldi	r21, 0x08	; 8
	mul r21,r22
    6c44:	56 9f       	mul	r21, r22
	add ZL,r0
    6c46:	e0 0d       	add	r30, r0
	adc ZH,r1	
    6c48:	f1 1d       	adc	r31, r1

00006c4a <y_check_end>:
y_check_end:	
	
	//if(flags&SPRITE_FLIP_X){
	//	step=-1;
	//}
	ser r22		;step=-1
    6c4a:	6f ef       	ldi	r22, 0xFF	; 255
	ser r23
    6c4c:	7f ef       	ldi	r23, 0xFF	; 255
	sbrs r16,SPRITE_FLIP_X_BIT
    6c4e:	00 ff       	sbrs	r16, 0
	ldi r22,1	;step=1
    6c50:	61 e0       	ldi	r22, 0x01	; 1
	sbrs r16,SPRITE_FLIP_X_BIT
    6c52:	00 ff       	sbrs	r16, 0
	clr r23
    6c54:	77 27       	eor	r23, r23

	//if(flags&SPRITE_FLIP_Y){
	//	srcXdiff-=(TILE_WIDTH*2);
	//}
	sbrc r16,SPRITE_FLIP_Y_BIT
    6c56:	01 fd       	sbrc	r16, 1
	sbiw YL,(TILE_WIDTH*2)
    6c58:	60 97       	sbiw	r28, 0x10	; 16
	;r24	= destXdiff
	;r25	= ydiff
	;X		= dest
	;Y		= srcXdiff
	;Z		= src
	clr r1
    6c5a:	11 24       	eor	r1, r1
	ldi r19,TRANSLUCENT_COLOR
    6c5c:	3e ef       	ldi	r19, 0xFE	; 254

	ldi r21,TILE_HEIGHT
    6c5e:	58 e0       	ldi	r21, 0x08	; 8
	sub r21,r25 	;yspan=(TILE_HEIGHT-ydiff)
    6c60:	59 1b       	sub	r21, r25

00006c62 <y_loop>:

y_loop:
	ldi r20,TILE_WIDTH
    6c62:	48 e0       	ldi	r20, 0x08	; 8
	sub r20,r24 	;xspan=(TILE_WIDTH-destXdiff)
    6c64:	48 1b       	sub	r20, r24

00006c66 <x_loop>:

x_loop:
	lpm r18,Z		;px=pgm_read_byte(src);
    6c66:	24 91       	lpm	r18, Z
	cpse r18,r19	;if(px!=TRANSLUCENT_COLOR)
    6c68:	23 13       	cpse	r18, r19
	st X,r18		;*dest=px;
    6c6a:	2c 93       	st	X, r18
	adiw XL,1
    6c6c:	11 96       	adiw	r26, 0x01	; 1
	add ZL,r22		;src+=step;
    6c6e:	e6 0f       	add	r30, r22
	adc ZH,r23
    6c70:	f7 1f       	adc	r31, r23
	dec r20
    6c72:	4a 95       	dec	r20
	brne x_loop
    6c74:	c1 f7       	brne	.-16     	; 0x6c66 <x_loop>

	add ZL,YL		;src+=srcXdiff
    6c76:	ec 0f       	add	r30, r28
	adc ZH,YH
    6c78:	fd 1f       	adc	r31, r29
	add XL,r24		;dest+=destXdiff
    6c7a:	a8 0f       	add	r26, r24
	adc XH,r1
    6c7c:	b1 1d       	adc	r27, r1
	dec r21
    6c7e:	5a 95       	dec	r21
	brne y_loop
    6c80:	81 f7       	brne	.-32     	; 0x6c62 <y_loop>


	pop YH
    6c82:	df 91       	pop	r29
	pop YL
    6c84:	cf 91       	pop	r28
	pop r17
    6c86:	1f 91       	pop	r17
	pop r16
    6c88:	0f 91       	pop	r16
	ret
    6c8a:	08 95       	ret

00006c8c <__vector_13>:

;***************************************************************************
; Main Video sync interrupt
;***************************************************************************
TIMER1_COMPA_vect:
	push r0
    6c8c:	0f 92       	push	r0
	push r1
    6c8e:	1f 92       	push	r1
	push ZL;2
    6c90:	ef 93       	push	r30
	push ZH;2
    6c92:	ff 93       	push	r31
	
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    6c94:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    6c96:	ef 93       	push	r30

	;Read timer offset since rollover to remove cycles 
	;and conpensate for interrupt latency.
	;This is nessesary to eliminate frame jitter.
	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    6c98:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,0x12 ;MIN_INT_LATENCY
    6c9c:	e2 51       	subi	r30, 0x12	; 18

	ldi ZH,1
    6c9e:	f1 e0       	ldi	r31, 0x01	; 1

00006ca0 <latency_loop>:
latency_loop:
	cp ZL,ZH
    6ca0:	ef 17       	cp	r30, r31
	brlo .		;advance PC to next instruction	
    6ca2:	00 f0       	brcs	.+0      	; 0x6ca4 <latency_loop+0x4>
	inc ZH
    6ca4:	f3 95       	inc	r31
	cpi ZH,10
    6ca6:	fa 30       	cpi	r31, 0x0A	; 10
	brlo latency_loop
    6ca8:	d8 f3       	brcs	.-10     	; 0x6ca0 <latency_loop>
	jmp .
    6caa:	0c 94 57 36 	jmp	0x6cae	; 0x6cae <latency_loop+0xe>
	
	;decrement sync pulse counter
	lds ZL,sync_pulse
    6cae:	e0 91 b7 0c 	lds	r30, 0x0CB7
	dec ZL
    6cb2:	ea 95       	dec	r30
	sts sync_pulse,ZL
    6cb4:	e0 93 b7 0c 	sts	0x0CB7, r30

	;process sync phases
	lds ZH,sync_phase
    6cb8:	f0 91 b6 0c 	lds	r31, 0x0CB6
	sbrc ZH,0
    6cbc:	f0 fd       	sbrc	r31, 0
	rjmp sync_hsync
    6cbe:	57 c0       	rjmp	.+174    	; 0x6d6e <sync_hsync>
; Note: TCNT1 should be equal to 
; 0x68 on the cbi
; 0xAC on the sbi
; pulse duration: 68 clocks
;***************************************************		
	cpi ZL,SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    6cc0:	ec 30       	cpi	r30, 0x0C	; 12
	brlo sync_eq
    6cc2:	98 f0       	brcs	.+38     	; 0x6cea <sync_eq>

	;Set HDRIVE to double rate during VSYNC
	ldi ZH,hi8(HDRIVE_CL_TWICE)
    6cc4:	f3 e0       	ldi	r31, 0x03	; 3
	sts _SFR_MEM_ADDR(OCR1AH),ZH	
    6cc6:	f0 93 89 00 	sts	0x0089, r31
	ldi ZH,lo8(HDRIVE_CL_TWICE)
    6cca:	fd e8       	ldi	r31, 0x8D	; 141
	sts _SFR_MEM_ADDR(OCR1AL),ZH
    6ccc:	f0 93 88 00 	sts	0x0088, r31

	bst ZL,0
    6cd0:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0x68
    6cd2:	28 98       	cbi	0x05, 0	; 5
	brtc sync_pre_eq_no_sound_update
    6cd4:	26 f4       	brtc	.+8      	; 0x6cde <sync_pre_eq_no_sound_update>
	ldi ZL,1	;indicate update_sound to generate the SBI for pre-eq
    6cd6:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    6cd8:	0e 94 3e 37 	call	0x6e7c	; 0x6e7c <update_sound>
	rjmp sync_end
    6cdc:	b7 c0       	rjmp	.+366    	; 0x6e4c <sync_end>

00006cde <sync_pre_eq_no_sound_update>:

sync_pre_eq_no_sound_update:
	WAIT ZL,64
    6cde:	e5 e1       	ldi	r30, 0x15	; 21
    6ce0:	ea 95       	dec	r30
    6ce2:	f1 f7       	brne	.-4      	; 0x6ce0 <sync_pre_eq_no_sound_update+0x2>
    6ce4:	00 00       	nop
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    6ce6:	28 9a       	sbi	0x05, 0	; 5
		
	rjmp sync_end
    6ce8:	b1 c0       	rjmp	.+354    	; 0x6e4c <sync_end>

00006cea <sync_eq>:
; 0x68  on the cbi
; 0x36E on the sbi
; low pulse duration: 774 clocks
;***************************************************	
sync_eq:
	cpi ZL,SYNC_POST_EQ_PULSES
    6cea:	e6 30       	cpi	r30, 0x06	; 6
	brlo sync_post_eq
    6cec:	38 f1       	brcs	.+78     	; 0x6d3c <sync_post_eq>

	rjmp .
    6cee:	00 c0       	rjmp	.+0      	; 0x6cf0 <sync_eq+0x6>
	rjmp .
    6cf0:	00 c0       	rjmp	.+0      	; 0x6cf2 <sync_eq+0x8>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    6cf2:	28 98       	cbi	0x05, 0	; 5

	bst ZL,0
    6cf4:	e0 fb       	bst	r30, 0
	ldi ZL,4
    6cf6:	e4 e0       	ldi	r30, 0x04	; 4
	brtc sync_eq_skip
    6cf8:	16 f4       	brtc	.+4      	; 0x6cfe <sync_eq_skip>
	
	call update_sound
    6cfa:	0e 94 3e 37 	call	0x6e7c	; 0x6e7c <update_sound>

00006cfe <sync_eq_skip>:
	;enable interupt to bring back sync 
	;level instead of wasting cycles
	;in a big wait loop

 	;clear interrupt flag
	ldi ZL,(1<<OCF1B)
    6cfe:	e4 e0       	ldi	r30, 0x04	; 4
	sts _SFR_MEM_ADDR(TIFR1),ZL 
    6d00:	e0 93 36 00 	sts	0x0036, r30
	
	;generate interrupt on match
	;for timer1 compare unit b
	ldi ZL,(1<<OCIE1A)+(1<<OCIE1B)
    6d04:	e6 e0       	ldi	r30, 0x06	; 6
	sts _SFR_MEM_ADDR(TIMSK1),ZL
    6d06:	e0 93 6f 00 	sts	0x006F, r30

	rjmp sync_end
    6d0a:	a0 c0       	rjmp	.+320    	; 0x6e4c <sync_end>

00006d0c <__vector_14>:
; during VSYNC EQ pulses to recover ~5000 cycles per field
; with interrupt latency conpensation
; 37 cycles
;**********************************************************	
TIMER1_COMPB_vect:
	push ZL
    6d0c:	ef 93       	push	r30
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    6d0e:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    6d10:	ef 93       	push	r30

	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    6d12:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,62+31 ;0x5D ;MIN_INT_LATENCY
    6d16:	ed 55       	subi	r30, 0x5D	; 93

	cpi ZL,1
    6d18:	e1 30       	cpi	r30, 0x01	; 1
	brlo .		;advance PC to next instruction
    6d1a:	00 f0       	brcs	.+0      	; 0x6d1c <__vector_14+0x10>

	cpi ZL,2
    6d1c:	e2 30       	cpi	r30, 0x02	; 2
	brlo .		;advance PC to next instruction
    6d1e:	00 f0       	brcs	.+0      	; 0x6d20 <__vector_14+0x14>

	cpi ZL,3
    6d20:	e3 30       	cpi	r30, 0x03	; 3
	brlo .		;advance PC to next instruction
    6d22:	00 f0       	brcs	.+0      	; 0x6d24 <__vector_14+0x18>

	cpi ZL,4
    6d24:	e4 30       	cpi	r30, 0x04	; 4
	brlo .		;advance PC to next instruction
    6d26:	00 f0       	brcs	.+0      	; 0x6d28 <__vector_14+0x1c>

	cpi ZL,5
    6d28:	e5 30       	cpi	r30, 0x05	; 5
	brlo .		;advance PC to next instruction
    6d2a:	00 f0       	brcs	.+0      	; 0x6d2c <__vector_14+0x20>

 	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;68
    6d2c:	28 9a       	sbi	0x05, 0	; 5
	ldi ZL,(1<<OCIE1A) ; disable OCIE1B 
    6d2e:	e2 e0       	ldi	r30, 0x02	; 2
	sts _SFR_MEM_ADDR(TIMSK1),ZL ;stop generate interrupt on match
    6d30:	e0 93 6f 00 	sts	0x006F, r30
	
	;restore flags
	pop ZL
    6d34:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL	
    6d36:	ef bf       	out	0x3f, r30	; 63
	pop ZL
    6d38:	ef 91       	pop	r30
	reti
    6d3a:	18 95       	reti

00006d3c <sync_post_eq>:
; 0x68 on the cbi
; 0xAC on the sbi
; pulse cycles: 68 clocks
;***************************************************	
sync_post_eq:	
	rjmp .
    6d3c:	00 c0       	rjmp	.+0      	; 0x6d3e <sync_post_eq+0x2>

	bst ZL,0
    6d3e:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    6d40:	28 98       	cbi	0x05, 0	; 5
	brtc sync_post_eq_no_sound_update
    6d42:	26 f4       	brtc	.+8      	; 0x6d4c <sync_post_eq_no_sound_update>
	ldi ZL,1	
    6d44:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    6d46:	0e 94 3e 37 	call	0x6e7c	; 0x6e7c <update_sound>
	rjmp sync_pre_eq_cont
    6d4a:	05 c0       	rjmp	.+10     	; 0x6d56 <sync_pre_eq_cont>

00006d4c <sync_post_eq_no_sound_update>:

sync_post_eq_no_sound_update:
	WAIT ZL,64
    6d4c:	e5 e1       	ldi	r30, 0x15	; 21
    6d4e:	ea 95       	dec	r30
    6d50:	f1 f7       	brne	.-4      	; 0x6d4e <sync_post_eq_no_sound_update+0x2>
    6d52:	00 00       	nop

	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN 
    6d54:	28 9a       	sbi	0x05, 0	; 5

00006d56 <sync_pre_eq_cont>:

sync_pre_eq_cont:	
	;check if it's the last vsync pulse
	lds ZL,sync_pulse
    6d56:	e0 91 b7 0c 	lds	r30, 0x0CB7
	cpi ZL,0
    6d5a:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2 ;skip rjmp
    6d5c:	09 f0       	breq	.+2      	; 0x6d60 <sync_pre_eq_cont+0xa>
	rjmp sync_end
    6d5e:	76 c0       	rjmp	.+236    	; 0x6e4c <sync_end>
	
	;update sync flags
	ldi ZL,SYNC_HSYNC_PULSES
    6d60:	ed ef       	ldi	r30, 0xFD	; 253
	sts sync_pulse,ZL
    6d62:	e0 93 b7 0c 	sts	0x0CB7, r30
	ldi ZL,1
    6d66:	e1 e0       	ldi	r30, 0x01	; 1
	sts sync_phase,ZL
    6d68:	e0 93 b6 0c 	sts	0x0CB6, r30
	
	rjmp sync_end
    6d6c:	6f c0       	rjmp	.+222    	; 0x6e4c <sync_end>

00006d6e <sync_hsync>:
; 0xF0 on the sbi
; pulse duration: 136 clocks
;***************************************************	

	; Set HDRIVE to normal rate
	ldi ZL,hi8(HDRIVE_CL)
    6d6e:	e7 e0       	ldi	r30, 0x07	; 7
	sts _SFR_MEM_ADDR(OCR1AH),ZL	
    6d70:	e0 93 89 00 	sts	0x0089, r30
	ldi ZL,lo8(HDRIVE_CL)
    6d74:	eb e1       	ldi	r30, 0x1B	; 27
	sts _SFR_MEM_ADDR(OCR1AL),ZL
    6d76:	e0 93 88 00 	sts	0x0088, r30
	rjmp .
    6d7a:	00 c0       	rjmp	.+0      	; 0x6d7c <sync_hsync+0xe>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    6d7c:	28 98       	cbi	0x05, 0	; 5
	
	ldi ZL,2	;indicate update_sound to generate the SBI for pre-eq
    6d7e:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    6d80:	00 c0       	rjmp	.+0      	; 0x6d82 <sync_hsync+0x14>
	call update_sound
    6d82:	0e 94 3e 37 	call	0x6e7c	; 0x6e7c <update_sound>

	;check if we have reached the first line to render
	ldi ZH,SYNC_HSYNC_PULSES
    6d86:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    6d88:	00 90 bd 0c 	lds	r0, 0x0CBD
	sub ZH,r0				
    6d8c:	f0 19       	sub	r31, r0
	lds ZL,sync_pulse
    6d8e:	e0 91 b7 0c 	lds	r30, 0x0CB7
	cp ZL,ZH
    6d92:	ef 17       	cp	r30, r31
	brsh no_render
    6d94:	d0 f4       	brcc	.+52     	; 0x6dca <no_render>

	ldi ZH,SYNC_HSYNC_PULSES
    6d96:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    6d98:	00 90 bd 0c 	lds	r0, 0x0CBD
	sub ZH,r0				
    6d9c:	f0 19       	sub	r31, r0
	lds r0,render_lines_count
    6d9e:	00 90 be 0c 	lds	r0, 0x0CBE
	sub ZH,r0			
    6da2:	f0 19       	sub	r31, r0
	cp ZL,ZH
    6da4:	ef 17       	cp	r30, r31
	brlo no_render
    6da6:	88 f0       	brcs	.+34     	; 0x6dca <no_render>

	;push r1-r29
	ldi ZL,29
    6da8:	ed e1       	ldi	r30, 0x1D	; 29
	clr ZH
    6daa:	ff 27       	eor	r31, r31

00006dac <push_loop>:
push_loop:
	ld r0,Z	;load value from register file
    6dac:	00 80       	ld	r0, Z
	push r0
    6dae:	0f 92       	push	r0
	dec ZL
    6db0:	ea 95       	dec	r30
	brne push_loop	
    6db2:	e1 f7       	brne	.-8      	; 0x6dac <push_loop>

	;timing compensation
	;to insure we always call the video mode 
	;routine at the same cycle	
	WAIT r16,230-(AUDIO_OUT_HSYNC_CYCLES)
    6db4:	06 e0       	ldi	r16, 0x06	; 6
    6db6:	0a 95       	dec	r16
    6db8:	f1 f7       	brne	.-4      	; 0x6db6 <push_loop+0xa>

	call VMODE_FUNC		;TCNT1=0x234
    6dba:	0e 94 04 33 	call	0x6608	; 0x6608 <sub_video_mode3>

	;pop r1-r29
	ldi ZL,1
    6dbe:	e1 e0       	ldi	r30, 0x01	; 1
	clr ZH
    6dc0:	ff 27       	eor	r31, r31

00006dc2 <pop_loop>:
pop_loop:
	pop r0
    6dc2:	0f 90       	pop	r0
	st Z+,r0 ;store value to register file
    6dc4:	01 92       	st	Z+, r0
	cpi ZL,30
    6dc6:	ee 31       	cpi	r30, 0x1E	; 30
	brlo pop_loop	
    6dc8:	e0 f3       	brcs	.-8      	; 0x6dc2 <pop_loop>

00006dca <no_render>:

no_render:

	;check if it's the last hsync pulse and we are 
	;ready for VSYNC
	lds ZL,sync_pulse
    6dca:	e0 91 b7 0c 	lds	r30, 0x0CB7
	cpi ZL,0
    6dce:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2
    6dd0:	09 f0       	breq	.+2      	; 0x6dd4 <no_render+0xa>
	rjmp sync_end
    6dd2:	3c c0       	rjmp	.+120    	; 0x6e4c <sync_end>
;***************************************************
; Process VSYNC stuff
;***************************************************
	
	;push C-call registers
	push r18
    6dd4:	2f 93       	push	r18
	push r19
    6dd6:	3f 93       	push	r19
	push r20
    6dd8:	4f 93       	push	r20
	push r21
    6dda:	5f 93       	push	r21
	push r22
    6ddc:	6f 93       	push	r22
	push r23
    6dde:	7f 93       	push	r23
	push r24
    6de0:	8f 93       	push	r24
	push r25
    6de2:	9f 93       	push	r25
	push r26
    6de4:	af 93       	push	r26
	push r27
    6de6:	bf 93       	push	r27

	sei ;must enable ints for re-entrant sync pulses
    6de8:	78 94       	sei
	clr r1
    6dea:	11 24       	eor	r1, r1

	;set vsync flags
	clr ZL
    6dec:	ee 27       	eor	r30, r30
	sts sync_phase,ZL
    6dee:	e0 93 b6 0c 	sts	0x0CB6, r30
	ldi ZL,SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    6df2:	e2 e1       	ldi	r30, 0x12	; 18
	sts sync_pulse,ZL
    6df4:	e0 93 b7 0c 	sts	0x0CB7, r30



	;increment the vsync counter
	lds r24,vsync_counter
    6df8:	80 91 c7 0c 	lds	r24, 0x0CC7
	lds r25,vsync_counter+1
    6dfc:	90 91 c8 0c 	lds	r25, 0x0CC8
	adiw r24,1
    6e00:	01 96       	adiw	r24, 0x01	; 1
	sts vsync_counter,r24
    6e02:	80 93 c7 0c 	sts	0x0CC7, r24
	sts vsync_counter+1,r25
    6e06:	90 93 c8 0c 	sts	0x0CC8, r25


	;process user pre callback
	lds ZL,pre_vsync_user_callback+0
    6e0a:	e0 91 b9 0c 	lds	r30, 0x0CB9
	lds ZH,pre_vsync_user_callback+1
    6e0e:	f0 91 ba 0c 	lds	r31, 0x0CBA
	cp  ZL,r1
    6e12:	e1 15       	cp	r30, r1
	cpc ZH,r1
    6e14:	f1 05       	cpc	r31, r1
	breq .+2 
    6e16:	09 f0       	breq	.+2      	; 0x6e1a <no_render+0x50>
	icall
    6e18:	09 95       	icall

	;refresh buttons states
	#if CONTROLLERS_VSYNC_READ == 1
		call ReadControllers
    6e1a:	0e 94 dd 38 	call	0x71ba	; 0x71ba <ReadControllers>
	#endif 
	
	;invoke stuff the video mode may have to do
	call VideoModeVsync	
    6e1e:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <VideoModeVsync>

	;process music (music, envelopes, etc)
	call process_music
    6e22:	0e 94 38 37 	call	0x6e70	; 0x6e70 <process_music>
	clr r1
    6e26:	11 24       	eor	r1, r1

	;process user post callback
	lds ZL,post_vsync_user_callback+0
    6e28:	e0 91 bb 0c 	lds	r30, 0x0CBB
	lds ZH,post_vsync_user_callback+1
    6e2c:	f0 91 bc 0c 	lds	r31, 0x0CBC
	cp  ZL,r1
    6e30:	e1 15       	cp	r30, r1
	cpc ZH,r1
    6e32:	f1 05       	cpc	r31, r1
	breq .+2 
    6e34:	09 f0       	breq	.+2      	; 0x6e38 <no_render+0x6e>
	icall
    6e36:	09 95       	icall
	#if SNES_MOUSE == 1
		call ReadMouseExtendedData
		call ProcessMouseMovement
	#endif

	pop r27
    6e38:	bf 91       	pop	r27
	pop r26
    6e3a:	af 91       	pop	r26
	pop r25
    6e3c:	9f 91       	pop	r25
	pop r24
    6e3e:	8f 91       	pop	r24
	pop r23
    6e40:	7f 91       	pop	r23
	pop r22
    6e42:	6f 91       	pop	r22
	pop r21
    6e44:	5f 91       	pop	r21
	pop r20
    6e46:	4f 91       	pop	r20
	pop r19
    6e48:	3f 91       	pop	r19
	pop r18
    6e4a:	2f 91       	pop	r18

00006e4c <sync_end>:
	
sync_end:	
	;restore flags
	pop ZL
    6e4c:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL
    6e4e:	ef bf       	out	0x3f, r30	; 63
	
	pop ZH
    6e50:	ff 91       	pop	r31
	pop ZL
    6e52:	ef 91       	pop	r30
	pop r1
    6e54:	1f 90       	pop	r1
	pop r0
    6e56:	0f 90       	pop	r0
	reti
    6e58:	18 95       	reti

00006e5a <hsync_pulse>:
; 0xf0 on the sbi 
;	
; Destroys: ZL (r30)
;*************************************************
hsync_pulse:
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    6e5a:	28 98       	cbi	0x05, 0	; 5
	ldi ZL,2
    6e5c:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    6e5e:	00 c0       	rjmp	.+0      	; 0x6e60 <hsync_pulse+0x6>
	call update_sound
    6e60:	0e 94 3e 37 	call	0x6e7c	; 0x6e7c <update_sound>

	lds ZL,sync_pulse
    6e64:	e0 91 b7 0c 	lds	r30, 0x0CB7
	dec ZL
    6e68:	ea 95       	dec	r30
	sts sync_pulse,ZL
    6e6a:	e0 93 b7 0c 	sts	0x0CB7, r30

	ret
    6e6e:	08 95       	ret

00006e70 <process_music>:
; NOTE: registers r18-r27 are already saved by the caller
;***********************
process_music:
	
#if ENABLE_MIXER==1
	lds ZL,sound_enabled
    6e70:	e0 91 cf 0c 	lds	r30, 0x0CCF
	sbrc ZL,0
    6e74:	e0 fd       	sbrc	r30, 0
 	call ProcessMusic
    6e76:	0e 94 64 3c 	call	0x78c8	; 0x78c8 <ProcessMusic>
#endif

	ret
    6e7a:	08 95       	ret

00006e7c <update_sound>:

; Destroys: Z,r0,r1
; cycles: 212+
;****************************
update_sound:
	push r16
    6e7c:	0f 93       	push	r16
	push r17
    6e7e:	1f 93       	push	r17
	push r18
    6e80:	2f 93       	push	r18
	push r28
    6e82:	cf 93       	push	r28
	push r29
    6e84:	df 93       	push	r29

	mov r18,ZL
    6e86:	2e 2f       	mov	r18, r30

	;channel 1 
	lds r16,tr1_step_lo
    6e88:	00 91 d1 0c 	lds	r16, 0x0CD1
	lds r17,tr1_pos_frac
    6e8c:	10 91 d3 0c 	lds	r17, 0x0CD3
	add	r17,r16	;add step to fractional part of sample pos
    6e90:	10 0f       	add	r17, r16
	lds r16,tr1_step_hi	
    6e92:	00 91 d2 0c 	lds	r16, 0x0CD2
	lds ZL,tr1_pos_lo
    6e96:	e0 91 d4 0c 	lds	r30, 0x0CD4
	lds ZH,tr1_pos_hi 
    6e9a:	f0 91 d5 0c 	lds	r31, 0x0CD5
	adc ZL,r16	;add step to low byte of sample pos
    6e9e:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    6ea0:	04 91       	lpm	r16, Z
	sts tr1_pos_lo,ZL
    6ea2:	e0 93 d4 0c 	sts	0x0CD4, r30
	sts tr1_pos_frac,r17
    6ea6:	10 93 d3 0c 	sts	0x0CD3, r17
	lds r17,tr1_vol
    6eaa:	10 91 d0 0c 	lds	r17, 0x0CD0
	mulsu r16,r17;(sample*mixing vol)
    6eae:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend	
    6eb0:	00 08       	sbc	r0, r0
	mov r28,r1	;set (sample*vol>>8) to mix buffer lsb
    6eb2:	c1 2d       	mov	r28, r1
	mov r29,r0	;set mix buffer msb	
    6eb4:	d0 2d       	mov	r29, r0
	nop
    6eb6:	00 00       	nop

;38
	
	;channel 2
	lds r16,tr2_step_lo
    6eb8:	00 91 d7 0c 	lds	r16, 0x0CD7
	lds r17,tr2_pos_frac
    6ebc:	10 91 d9 0c 	lds	r17, 0x0CD9
	add	r17,r16	;add step to fractional part of sample pos
    6ec0:	10 0f       	add	r17, r16
	lds r16,tr2_step_hi	
    6ec2:	00 91 d8 0c 	lds	r16, 0x0CD8
	lds ZL,tr2_pos_lo
    6ec6:	e0 91 da 0c 	lds	r30, 0x0CDA
	lds ZH,tr2_pos_hi 
    6eca:	f0 91 db 0c 	lds	r31, 0x0CDB
	adc ZL,r16	;add step to low byte of sample pos
    6ece:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    6ed0:	04 91       	lpm	r16, Z
	sts tr2_pos_lo,ZL
    6ed2:	e0 93 da 0c 	sts	0x0CDA, r30
	sts tr2_pos_frac,r17
    6ed6:	10 93 d9 0c 	sts	0x0CD9, r17
	lds r17,tr2_vol
    6eda:	10 91 d6 0c 	lds	r17, 0x0CD6

	;*** Video sync update ***
	sbrc r18,0								;pre-eq/post-eq sync
    6ede:	20 fd       	sbrc	r18, 0
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    6ee0:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,0								
    6ee2:	20 ff       	sbrs	r18, 0
	rjmp .
    6ee4:	00 c0       	rjmp	.+0      	; 0x6ee6 <update_sound+0x6a>
	;*************************

	mulsu r16,r17;(sample*mixing vol)
    6ee6:	01 03       	mulsu	r16, r17
	clr r0
    6ee8:	00 24       	eor	r0, r0
	sbc r0,r0	;sign extend
    6eea:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    6eec:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb		
    6eee:	d0 1d       	adc	r29, r0
;70
	
	;channel 3
	lds r16,tr3_step_lo
    6ef0:	00 91 dd 0c 	lds	r16, 0x0CDD
	lds r17,tr3_pos_frac
    6ef4:	10 91 df 0c 	lds	r17, 0x0CDF
	add	r17,r16				;add step to fractional part of sample pos
    6ef8:	10 0f       	add	r17, r16
	lds r16,tr3_step_hi	
    6efa:	00 91 de 0c 	lds	r16, 0x0CDE
	lds ZL,tr3_pos_lo
    6efe:	e0 91 e0 0c 	lds	r30, 0x0CE0
	lds ZH,tr3_pos_hi 
    6f02:	f0 91 e1 0c 	lds	r31, 0x0CE1
	adc ZL,r16				;add step to low byte of sample pos
    6f06:	e0 1f       	adc	r30, r16
	lpm	r16,Z				;load sample
    6f08:	04 91       	lpm	r16, Z
	sts tr3_pos_lo,ZL
    6f0a:	e0 93 e0 0c 	sts	0x0CE0, r30
	sts tr3_pos_frac,r17
    6f0e:	10 93 df 0c 	sts	0x0CDF, r17
	lds r17,tr3_vol
    6f12:	10 91 dc 0c 	lds	r17, 0x0CDC
	mulsu r16,r17			;(sample*mixing vol)
    6f16:	01 03       	mulsu	r16, r17
	sbc r0,r0				;sign extend
    6f18:	00 08       	sbc	r0, r0
	add r28,r1				;add (sample*vol>>8) to mix buffer lsb
    6f1a:	c1 0d       	add	r28, r1
	adc r29,r0				;ajust mix buffer msb
    6f1c:	d0 1d       	adc	r29, r0
;97	

	;channel 4 - 7/15 bit LFSR 
	lds r16,tr4_barrel_lo
    6f1e:	00 91 e4 0c 	lds	r16, 0x0CE4
	lds r17,tr4_barrel_hi
    6f22:	10 91 e5 0c 	lds	r17, 0x0CE5
	lds ZL,tr4_divider
    6f26:	e0 91 e6 0c 	lds	r30, 0x0CE6
	dec ZL	
    6f2a:	ea 95       	dec	r30
	brpl ch4_no_shift	
    6f2c:	92 f4       	brpl	.+36     	; 0x6f52 <ch4_no_shift>

	lds ZH,tr4_params
    6f2e:	f0 91 e3 0c 	lds	r31, 0x0CE3
	mov ZL,ZH
    6f32:	ef 2f       	mov	r30, r31
	lsr ZL 			;keep bits7:1
    6f34:	e6 95       	lsr	r30

	mov r0,r16  ;copy barrel shifter
    6f36:	00 2e       	mov	r0, r16
	lsr r0
    6f38:	06 94       	lsr	r0
	eor r0,r16  ;xor bit0 and bit1
    6f3a:	00 26       	eor	r0, r16
	bst r0,0
    6f3c:	00 fa       	bst	r0, 0
	lsr r17
    6f3e:	16 95       	lsr	r17
	ror r16
    6f40:	07 95       	ror	r16
	bld r17,6	;15 bits mode
    6f42:	16 f9       	bld	r17, 6
	sbrs ZH,0
    6f44:	f0 ff       	sbrs	r31, 0
	bld r16,6	;7 bits mode
    6f46:	06 f9       	bld	r16, 6

	sts tr4_barrel_lo,r16
    6f48:	00 93 e4 0c 	sts	0x0CE4, r16
	sts tr4_barrel_hi,r17
    6f4c:	10 93 e5 0c 	sts	0x0CE5, r17

	rjmp ch4_end
    6f50:	03 c0       	rjmp	.+6      	; 0x6f58 <ch4_end>

00006f52 <ch4_no_shift>:
ch4_no_shift:
	;wait loop 21 cycles
	ldi r17,6
    6f52:	16 e0       	ldi	r17, 0x06	; 6
	dec r17
    6f54:	1a 95       	dec	r17
	brne .-4
    6f56:	f1 f7       	brne	.-4      	; 0x6f54 <ch4_no_shift+0x2>

00006f58 <ch4_end>:
	;rjmp .
ch4_end:

	sts tr4_divider,ZL
    6f58:	e0 93 e6 0c 	sts	0x0CE6, r30
	ldi r17,0x80 ;-128
    6f5c:	10 e8       	ldi	r17, 0x80	; 128
	
	;*** Video sync update ***
	sbrc r18,1								;hsync
    6f5e:	21 fd       	sbrc	r18, 1
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xF0
    6f60:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,1								
    6f62:	21 ff       	sbrs	r18, 1
	rjmp .
    6f64:	00 c0       	rjmp	.+0      	; 0x6f66 <ch4_end+0xe>
	;*************************
	
	sbrc r16,0
    6f66:	00 fd       	sbrc	r16, 0
	ldi r17,0x7f ;+127
    6f68:	1f e7       	ldi	r17, 0x7F	; 127
	
	lds r16,tr4_vol
    6f6a:	00 91 e2 0c 	lds	r16, 0x0CE2

	mulsu r17,r16;(sample*mixing vol)
    6f6e:	10 03       	mulsu	r17, r16
	sbc r0,r0	;sign extend
    6f70:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    6f72:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb
    6f74:	d0 1d       	adc	r29, r0
;142
#if SOUND_CHANNEL_5_ENABLE==1
	;channel 5 PCM -- 45 cycles

	;add fractional part
	lds r16,tr5_pos_frac
    6f76:	00 91 eb 0c 	lds	r16, 0x0CEB
	lds r17,tr5_step_lo 
    6f7a:	10 91 e9 0c 	lds	r17, 0x0CE9
	add r16,r17
    6f7e:	01 0f       	add	r16, r17
	sts tr5_pos_frac,r16
    6f80:	00 93 eb 0c 	sts	0x0CEB, r16

	;add lo
	lds ZL,tr5_pos_lo
    6f84:	e0 91 ec 0c 	lds	r30, 0x0CEC
	lds r17,tr5_step_hi 
    6f88:	10 91 ea 0c 	lds	r17, 0x0CEA
	adc ZL,r17
    6f8c:	e1 1f       	adc	r30, r17

	;add hi
	lds ZH,tr5_pos_hi
    6f8e:	f0 91 ed 0c 	lds	r31, 0x0CED
	ldi r16,0
    6f92:	00 e0       	ldi	r16, 0x00	; 0
	adc ZH,r16
    6f94:	f0 1f       	adc	r31, r16

	movw r16,ZL
    6f96:	8f 01       	movw	r16, r30
	lds r0,tr5_loop_len_lo
    6f98:	00 90 ee 0c 	lds	r0, 0x0CEE
	lds r1,tr5_loop_len_hi	
    6f9c:	10 90 ef 0c 	lds	r1, 0x0CEF
	sub r16,r0
    6fa0:	00 19       	sub	r16, r0
	sbc r17,r1
    6fa2:	11 09       	sbc	r17, r1
	lds r0,tr5_loop_end_lo
    6fa4:	00 90 f0 0c 	lds	r0, 0x0CF0
	lds r1,tr5_loop_end_hi
    6fa8:	10 90 f1 0c 	lds	r1, 0x0CF1

	cp ZL,r0
    6fac:	e0 15       	cp	r30, r0
	cpc ZH,r1
    6fae:	f1 05       	cpc	r31, r1
	brlo .+2
    6fb0:	08 f0       	brcs	.+2      	; 0x6fb4 <ch4_end+0x5c>
	movw ZL,r16
    6fb2:	f8 01       	movw	r30, r16

	sts tr5_pos_lo,ZL
    6fb4:	e0 93 ec 0c 	sts	0x0CEC, r30
	sts tr5_pos_hi,ZH
    6fb8:	f0 93 ed 0c 	sts	0x0CED, r31

	lpm	r16,Z	;load sample
    6fbc:	04 91       	lpm	r16, Z
	lds r17,tr5_vol
    6fbe:	10 91 e8 0c 	lds	r17, 0x0CE8

	mulsu r16,r17;(sample*mixing vol)
    6fc2:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend
    6fc4:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    6fc6:	c1 0d       	add	r28, r1
	adc r29,r0	;adjust mix buffer msb	
    6fc8:	d0 1d       	adc	r29, r0
#endif
	
	;final processing

	;clip
	clr r0
    6fca:	00 24       	eor	r0, r0
	cpi r28,128	;> 127?
    6fcc:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0	
    6fce:	d0 05       	cpc	r29, r0
	brlt .+2
    6fd0:	0c f0       	brlt	.+2      	; 0x6fd4 <ch4_end+0x7c>
	ldi r28,127
    6fd2:	cf e7       	ldi	r28, 0x7F	; 127
	
	dec r0
    6fd4:	0a 94       	dec	r0
	cpi r28,-128; <-128?
    6fd6:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0xff
    6fd8:	d0 05       	cpc	r29, r0
	brge .+2
    6fda:	0c f4       	brge	.+2      	; 0x6fde <ch4_end+0x86>
	ldi r28,-128
    6fdc:	c0 e8       	ldi	r28, 0x80	; 128

	subi r28,128	;convert to unsigned		
    6fde:	c0 58       	subi	r28, 0x80	; 128
	sts _SFR_MEM_ADDR(OCR2A),r28 ;output sound byte
    6fe0:	c0 93 b3 00 	sts	0x00B3, r28

00006fe4 <update_sound_end>:
#endif


update_sound_end:

	pop r29
    6fe4:	df 91       	pop	r29
	pop r28
    6fe6:	cf 91       	pop	r28
	pop r18
    6fe8:	2f 91       	pop	r18
	pop r17
    6fea:	1f 91       	pop	r17
	pop r16
    6fec:	0f 91       	pop	r16
	
	ret
    6fee:	08 95       	ret

00006ff0 <SetSpritesTileTable>:
; C-callable
; r25:r24=pointer to sprites pixel data.
;*****************************
.section .text.SetSpritesTileTable
SetSpritesTileTable:
	sts sprites_tile_banks,r24
    6ff0:	80 93 a4 0c 	sts	0x0CA4, r24
	sts sprites_tile_banks+1,r25
    6ff4:	90 93 a5 0c 	sts	0x0CA5, r25
	ret
    6ff8:	08 95       	ret

00006ffa <ClearVram>:
; C-callable
;************************************
.section .text.ClearVram
ClearVram:
	//init vram		
	ldi r30,lo8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    6ffa:	e0 e0       	ldi	r30, 0x00	; 0
	ldi r31,hi8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    6ffc:	f4 e0       	ldi	r31, 0x04	; 4

	ldi XL,lo8(vram)
    6ffe:	a0 e0       	ldi	r26, 0x00	; 0
	ldi XH,hi8(vram)
    7000:	b1 e0       	ldi	r27, 0x01	; 1

	ldi r22,RAM_TILES_COUNT
    7002:	6c e1       	ldi	r22, 0x1C	; 28

00007004 <fill_vram_loop>:

fill_vram_loop:
	st X+,r22
    7004:	6d 93       	st	X+, r22
	sbiw r30,1
    7006:	31 97       	sbiw	r30, 0x01	; 1
	brne fill_vram_loop
    7008:	e9 f7       	brne	.-6      	; 0x7004 <fill_vram_loop>

	clr r1
    700a:	11 24       	eor	r1, r1

	ret
    700c:	08 95       	ret

0000700e <SetTile>:
.section .text.SetTile
SetTile:
#if SCROLLING == 1
	;index formula is vram[((y>>3)*256)+8x+(y&7)]
	
	andi r24,0x1f
    700e:	8f 71       	andi	r24, 0x1F	; 31
	mov r23,r22
    7010:	76 2f       	mov	r23, r22
	lsr r22
    7012:	66 95       	lsr	r22
	lsr r22
    7014:	66 95       	lsr	r22
	lsr r22			;y>>3
    7016:	66 95       	lsr	r22
	ldi r18,8		
    7018:	28 e0       	ldi	r18, 0x08	; 8
	mul r24,r18		;x*8
    701a:	82 9f       	mul	r24, r18
	movw XL,r0
    701c:	d0 01       	movw	r26, r0
	subi XL,lo8(-(vram))
    701e:	a0 50       	subi	r26, 0x00	; 0
	sbci XH,hi8(-(vram))
    7020:	bf 4f       	sbci	r27, 0xFF	; 255
	add XH,r22		;vram+((y>>3)*256)
    7022:	b6 0f       	add	r27, r22
	andi r23,7		;y&7	
    7024:	77 70       	andi	r23, 0x07	; 7
	add XL,r23
    7026:	a7 0f       	add	r26, r23
						
	subi r20,~(RAM_TILES_COUNT-1)	
    7028:	44 5e       	subi	r20, 0xE4	; 228
	st X,r20
    702a:	4c 93       	st	X, r20

	clr r1
    702c:	11 24       	eor	r1, r1

	ret
    702e:	08 95       	ret

00007030 <SetTileTable>:
; C-callable
; r25:r24=pointer to tiles data
;************************************
.section .text.SetTileTable
SetTileTable:
	sts tile_table_lo,r24
    7030:	80 93 ac 0c 	sts	0x0CAC, r24
	sts tile_table_hi,r25	
    7034:	90 93 ad 0c 	sts	0x0CAD, r25
	ret
    7038:	08 95       	ret

0000703a <GetVsyncFlag>:
;
; C-callable
;************************************
.section .text.GetVsyncFlag
GetVsyncFlag:
	lds r24,sync_flags
    703a:	80 91 b8 0c 	lds	r24, 0x0CB8
	andi r24,SYNC_FLAG_VSYNC
    703e:	81 70       	andi	r24, 0x01	; 1
	ret
    7040:	08 95       	ret

00007042 <ClearVsyncFlag>:
; 
; C-callable
;*****************************
.section .text.ClearVsyncFlag
ClearVsyncFlag:
	lds r18,sync_flags
    7042:	20 91 b8 0c 	lds	r18, 0x0CB8
	andi r18,~SYNC_FLAG_VSYNC
    7046:	2e 7f       	andi	r18, 0xFE	; 254
	sts sync_flags,r18
    7048:	20 93 b8 0c 	sts	0x0CB8, r18
	ret
    704c:	08 95       	ret

0000704e <ReadJoypad>:
; r24=joypad No (0 or 1)
; returns: (int) r25:r24
;*****************************
.section .text.ReadJoypad
ReadJoypad:	
	tst r24
    704e:	88 23       	and	r24, r24
	brne rj_p2
    7050:	29 f4       	brne	.+10     	; 0x705c <rj_p2>
		
	lds r24,joypad1_status_lo
    7052:	80 91 bf 0c 	lds	r24, 0x0CBF
	lds r25,joypad1_status_lo+1
    7056:	90 91 c0 0c 	lds	r25, 0x0CC0
	ret
    705a:	08 95       	ret

0000705c <rj_p2>:
rj_p2:
	lds r24,joypad2_status_lo
    705c:	80 91 c3 0c 	lds	r24, 0x0CC3
	lds r25,joypad2_status_lo+1	
    7060:	90 91 c4 0c 	lds	r25, 0x0CC4

	ret
    7064:	08 95       	ret

00007066 <WaitUs>:
; r25:r24 - us to wait
; returns: void
;****************************
.section .text.WaitUs
WaitUs:	
	ldi r23,8
    7066:	78 e0       	ldi	r23, 0x08	; 8
	dec 23
    7068:	7a 95       	dec	r23
	brne .-4 ;~1 us
    706a:	f1 f7       	brne	.-4      	; 0x7068 <WaitUs+0x2>
	nop
    706c:	00 00       	nop
	sbiw r24,1
    706e:	01 97       	sbiw	r24, 0x01	; 1
	brne WaitUs
    7070:	d1 f7       	brne	.-12     	; 0x7066 <WaitUs>

	ret
    7072:	08 95       	ret

00007074 <WriteEeprom>:
;****************************

.section .text.WriteEeprom
WriteEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    7074:	f9 99       	sbic	0x1f, 1	; 31
   rjmp WriteEeprom
    7076:	fe cf       	rjmp	.-4      	; 0x7074 <WriteEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    7078:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    707a:	81 bd       	out	0x21, r24	; 33
   ; Write data (r22) to Data Register
   out _SFR_IO_ADDR(EEDR),r22
    707c:	60 bd       	out	0x20, r22	; 32
   cli
    707e:	f8 94       	cli
   ; Write logical one to EEMPE
   sbi _SFR_IO_ADDR(EECR),EEMPE
    7080:	fa 9a       	sbi	0x1f, 2	; 31
   ; Start eeprom write by setting EEPE
   sbi _SFR_IO_ADDR(EECR),EEPE
    7082:	f9 9a       	sbi	0x1f, 1	; 31
   sei
    7084:	78 94       	sei
   ret
    7086:	08 95       	ret

00007088 <ReadEeprom>:
; r24 - value read
;****************************
.section .text.ReadEeprom
ReadEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    7088:	f9 99       	sbic	0x1f, 1	; 31
   rjmp ReadEeprom
    708a:	fe cf       	rjmp	.-4      	; 0x7088 <ReadEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    708c:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    708e:	81 bd       	out	0x21, r24	; 33
   ; Start eeprom read by writing EERE
   cli
    7090:	f8 94       	cli
   sbi _SFR_IO_ADDR(EECR),EERE
    7092:	f8 9a       	sbi	0x1f, 0	; 31
   ; Read data from Data Register
   in r24,_SFR_IO_ADDR(EEDR)
    7094:	80 b5       	in	r24, 0x20	; 32
   sei
    7096:	78 94       	sei
   ret
    7098:	08 95       	ret

0000709a <wdt_randomize>:
	.global wdt_randomize
	.section .text.wdt_randomize
	wdt_randomize:

		;set timer 1 full speed count to 0xffff
		ldi r24,0
    709a:	80 e0       	ldi	r24, 0x00	; 0
		sts sync_pulse,r24
    709c:	80 93 b7 0c 	sts	0x0CB7, r24


		sts _SFR_MEM_ADDR(TIMSK1),r24
    70a0:	80 93 6f 00 	sts	0x006F, r24
		sts _SFR_MEM_ADDR(OCR1AL),r24
    70a4:	80 93 88 00 	sts	0x0088, r24
		sts _SFR_MEM_ADDR(OCR1AH),r24
    70a8:	80 93 89 00 	sts	0x0089, r24
		sts _SFR_MEM_ADDR(OCR1BL),r24
    70ac:	80 93 8a 00 	sts	0x008A, r24
		sts _SFR_MEM_ADDR(OCR1BH),r24
    70b0:	80 93 8b 00 	sts	0x008B, r24
		sts _SFR_MEM_ADDR(TCNT1H),r24
    70b4:	80 93 85 00 	sts	0x0085, r24
		sts _SFR_MEM_ADDR(TCNT1L),r24
    70b8:	80 93 84 00 	sts	0x0084, r24
		
		sts _SFR_MEM_ADDR(TCCR1A),r24	
    70bc:	80 93 80 00 	sts	0x0080, r24
		ldi 24,(1<<CS10)
    70c0:	81 e0       	ldi	r24, 0x01	; 1
		sts _SFR_MEM_ADDR(TCCR1B),r24
    70c2:	80 93 81 00 	sts	0x0081, r24

		cli
    70c6:	f8 94       	cli

		;enable watchdog at fastest speed and generate interrupts
		ldi r24,0
    70c8:	80 e0       	ldi	r24, 0x00	; 0
		sts _SFR_MEM_ADDR(MCUSR),r24	
    70ca:	80 93 54 00 	sts	0x0054, r24
		ldi r25,(1<<WDIE)+(1<<WDE)+(0<<WDP3)+(0<<WDP2)+(0<<WDP1)+(0<<WDP0)
    70ce:	98 e4       	ldi	r25, 0x48	; 72
		lds r24,_SFR_MEM_ADDR(WDTCSR)
    70d0:	80 91 60 00 	lds	r24, 0x0060
		ori r24,(1<<WDCE)+(1<<WDE)
    70d4:	88 61       	ori	r24, 0x18	; 24
		sts _SFR_MEM_ADDR(WDTCSR),r24
    70d6:	80 93 60 00 	sts	0x0060, r24
		sts _SFR_MEM_ADDR(WDTCSR),r25
    70da:	90 93 60 00 	sts	0x0060, r25
	
		sei
    70de:	78 94       	sei

000070e0 <wait>:

		;generate 8 random cycles
	wait:
		lds r24,sync_pulse ;using the yet unalocated "sync_pulse" as a temp variable
    70e0:	80 91 b7 0c 	lds	r24, 0x0CB7
		cpi r24,8
    70e4:	88 30       	cpi	r24, 0x08	; 8
		brlo wait
    70e6:	e0 f3       	brcs	.-8      	; 0x70e0 <wait>

		ret
    70e8:	08 95       	ret

000070ea <GetTrueRandomSeed>:
	;********************************

	.global GetTrueRandomSeed
	.section .text.GetTrueRandomSeed
	GetTrueRandomSeed:
		lds r24,random_value
    70ea:	80 91 c9 0c 	lds	r24, 0x0CC9
		lds r25,random_value+1
    70ee:	90 91 ca 0c 	lds	r25, 0x0CCA
		ret
    70f2:	08 95       	ret

000070f4 <__vector_8>:
	;*************************************
	; Watchdog timer interrupt
	;*************************************
	WDT_vect:
		;save flags & status register
		push r16
    70f4:	0f 93       	push	r16
		push r17
    70f6:	1f 93       	push	r17

		in r16,_SFR_IO_ADDR(SREG)
    70f8:	0f b7       	in	r16, 0x3f	; 63
		push r16
    70fa:	0f 93       	push	r16

		lds r16,sync_pulse
    70fc:	00 91 b7 0c 	lds	r16, 0x0CB7
		inc r16
    7100:	03 95       	inc	r16
		sts sync_pulse,r16
    7102:	00 93 b7 0c 	sts	0x0CB7, r16

		;XOR succesive timer1 LSB into a int
		sbrc r16,0
    7106:	00 fd       	sbrc	r16, 0
		rjmp 1f
    7108:	08 c0       	rjmp	.+16     	; 0x711a <__vector_8+0x26>
		lds r17,random_value
    710a:	10 91 c9 0c 	lds	r17, 0x0CC9
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    710e:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    7112:	10 27       	eor	r17, r16
		sts random_value,r17
    7114:	10 93 c9 0c 	sts	0x0CC9, r17
		rjmp 2f
    7118:	07 c0       	rjmp	.+14     	; 0x7128 <__vector_8+0x34>
	1:
		lds r17,random_value+1
    711a:	10 91 ca 0c 	lds	r17, 0x0CCA
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    711e:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    7122:	10 27       	eor	r17, r16
		sts random_value+1,r17
    7124:	10 93 ca 0c 	sts	0x0CCA, r17
	2:

		ldi r16,(1<<WDIE)+(1<<WDE)
    7128:	08 e4       	ldi	r16, 0x48	; 72
		sts _SFR_MEM_ADDR(WDTCSR),r16
    712a:	00 93 60 00 	sts	0x0060, r16

		;restore flags
		pop r16
    712e:	0f 91       	pop	r16
		out _SFR_IO_ADDR(SREG),r16
    7130:	0f bf       	out	0x3f, r16	; 63
	
		pop r17
    7132:	1f 91       	pop	r17
		pop r16
    7134:	0f 91       	pop	r16
		reti
    7136:	18 95       	reti

00007138 <SoftReset>:

/**
 * Performs a software reset
 */
void SoftReset(void){        
	wdt_enable(WDTO_15MS);  
    7138:	98 e0       	ldi	r25, 0x08	; 8
    713a:	88 e1       	ldi	r24, 0x18	; 24
    713c:	0f b6       	in	r0, 0x3f	; 63
    713e:	f8 94       	cli
    7140:	a8 95       	wdr
    7142:	80 93 60 00 	sts	0x0060, r24
    7146:	0f be       	out	0x3f, r0	; 63
    7148:	90 93 60 00 	sts	0x0060, r25
	while(1);
    714c:	ff cf       	rjmp	.-2      	; 0x714c <SoftReset+0x14>

0000714e <ReadButtons>:
void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
	unsigned char i;

	//latch controllers
	JOYPAD_OUT_PORT|=_BV(JOYPAD_LATCH_PIN);
    714e:	12 9a       	sbi	0x02, 2	; 2
		}else{
			Wait200ns();
			Wait200ns();
		}	
	#else
		Wait200ns();
    7150:	c8 95       	lpm
    7152:	c8 95       	lpm
		Wait200ns();
    7154:	c8 95       	lpm
    7156:	c8 95       	lpm
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));
    7158:	12 98       	cbi	0x02, 2	; 2
    715a:	40 e1       	ldi	r20, 0x10	; 16
	DisplayLogo();
	
}

void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
    715c:	80 e0       	ldi	r24, 0x00	; 0
    715e:	90 e0       	ldi	r25, 0x00	; 0
    7160:	20 e0       	ldi	r18, 0x00	; 0
    7162:	30 e0       	ldi	r19, 0x00	; 0


	//read button states
	for(i=0;i<16;i++){

		p1ButtonsLo>>=1;
    7164:	36 95       	lsr	r19
    7166:	27 95       	ror	r18
		p2ButtonsLo>>=1;
    7168:	96 95       	lsr	r25
    716a:	87 95       	ror	r24
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    716c:	c8 95       	lpm
    716e:	c8 95       	lpm
			Wait200ns();
    7170:	c8 95       	lpm
    7172:	c8 95       	lpm
		#endif
			
		//pulse clock pin		
		JOYPAD_OUT_PORT&=~(_BV(JOYPAD_CLOCK_PIN));
    7174:	13 98       	cbi	0x02, 3	; 2
		
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) p1ButtonsLo|=(1<<15);
    7176:	00 9b       	sbis	0x00, 0	; 0
    7178:	30 68       	ori	r19, 0x80	; 128
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) p2ButtonsLo|=(1<<15);
    717a:	01 9b       	sbis	0x00, 1	; 0
    717c:	90 68       	ori	r25, 0x80	; 128
		
		JOYPAD_OUT_PORT|=_BV(JOYPAD_CLOCK_PIN);
    717e:	13 9a       	sbi	0x02, 3	; 2
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    7180:	c8 95       	lpm
    7182:	c8 95       	lpm
			Wait200ns();
    7184:	c8 95       	lpm
    7186:	c8 95       	lpm
    7188:	41 50       	subi	r20, 0x01	; 1
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));


	//read button states
	for(i=0;i<16;i++){
    718a:	61 f7       	brne	.-40     	; 0x7164 <ReadButtons+0x16>
		#endif

	}

	#if JOYSTICK==TYPE_SNES
		joypad1_status_lo=p1ButtonsLo;
    718c:	30 93 c0 0c 	sts	0x0CC0, r19
    7190:	20 93 bf 0c 	sts	0x0CBF, r18
		joypad2_status_lo=p2ButtonsLo;
    7194:	90 93 c4 0c 	sts	0x0CC4, r25
    7198:	80 93 c3 0c 	sts	0x0CC3, r24
	#else
		joypad1_status_lo=p1ButtonsLo&0xff;
		joypad2_status_lo=p2ButtonsLo&0xff;	
	#endif

	if(joypad1_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B) || joypad2_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B)){
    719c:	80 91 bf 0c 	lds	r24, 0x0CBF
    71a0:	90 91 c0 0c 	lds	r25, 0x0CC0
    71a4:	0f 97       	sbiw	r24, 0x0f	; 15
    71a6:	31 f0       	breq	.+12     	; 0x71b4 <ReadButtons+0x66>
    71a8:	80 91 c3 0c 	lds	r24, 0x0CC3
    71ac:	90 91 c4 0c 	lds	r25, 0x0CC4
    71b0:	0f 97       	sbiw	r24, 0x0f	; 15
    71b2:	11 f4       	brne	.+4      	; 0x71b8 <ReadButtons+0x6a>
		SoftReset();
    71b4:	0e 94 9c 38 	call	0x7138	; 0x7138 <SoftReset>
    71b8:	08 95       	ret

000071ba <ReadControllers>:
 * program when CONTROLLERS_VSYNC_READ==0.
*/
void ReadControllers(){

	//Detect if devices are connected.
	joypadsConnectionStatus=0;
    71ba:	10 92 f8 0c 	sts	0x0CF8, r1
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) joypadsConnectionStatus|=1;
    71be:	00 99       	sbic	0x00, 0	; 0
    71c0:	03 c0       	rjmp	.+6      	; 0x71c8 <ReadControllers+0xe>
    71c2:	81 e0       	ldi	r24, 0x01	; 1
    71c4:	80 93 f8 0c 	sts	0x0CF8, r24
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) joypadsConnectionStatus|=2;
    71c8:	01 99       	sbic	0x00, 1	; 0
    71ca:	05 c0       	rjmp	.+10     	; 0x71d6 <ReadControllers+0x1c>
    71cc:	80 91 f8 0c 	lds	r24, 0x0CF8
    71d0:	82 60       	ori	r24, 0x02	; 2
    71d2:	80 93 f8 0c 	sts	0x0CF8, r24
			
	//read the standard buttons
	ReadButtons();
    71d6:	0c 94 a7 38 	jmp	0x714e	; 0x714e <ReadButtons>

000071da <FormatEeprom>:
	return resp;
}

	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {
    71da:	cf 93       	push	r28
    71dc:	df 93       	push	r29
    71de:	c0 e0       	ldi	r28, 0x00	; 0
    71e0:	d0 e0       	ldi	r29, 0x00	; 0
    71e2:	fe 01       	movw	r30, r28
    71e4:	ee 54       	subi	r30, 0x4E	; 78
    71e6:	ff 4f       	sbci	r31, 0xFF	; 255

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
    71e8:	64 91       	lpm	r22, Z
    71ea:	ce 01       	movw	r24, r28
    71ec:	0e 94 3a 38 	call	0x7074	; 0x7074 <WriteEeprom>
    71f0:	21 96       	adiw	r28, 0x01	; 1
	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
    71f2:	c0 32       	cpi	r28, 0x20	; 32
    71f4:	d1 05       	cpc	r29, r1
    71f6:	a9 f7       	brne	.-22     	; 0x71e2 <FormatEeprom+0x8>
    71f8:	c0 e2       	ldi	r28, 0x20	; 32
    71fa:	d0 e0       	ldi	r29, 0x00	; 0
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
    71fc:	6f ef       	ldi	r22, 0xFF	; 255
    71fe:	ce 01       	movw	r24, r28
    7200:	0e 94 3a 38 	call	0x7074	; 0x7074 <WriteEeprom>
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
    7204:	6f ef       	ldi	r22, 0xFF	; 255
    7206:	ce 01       	movw	r24, r28
    7208:	01 96       	adiw	r24, 0x01	; 1
    720a:	0e 94 3a 38 	call	0x7074	; 0x7074 <WriteEeprom>
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
    720e:	a0 96       	adiw	r28, 0x20	; 32
    7210:	c1 15       	cp	r28, r1
    7212:	88 e0       	ldi	r24, 0x08	; 8
    7214:	d8 07       	cpc	r29, r24
    7216:	91 f7       	brne	.-28     	; 0x71fc <FormatEeprom+0x22>
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
   }
   
}
    7218:	df 91       	pop	r29
    721a:	cf 91       	pop	r28
    721c:	08 95       	ret

0000721e <isEepromFormatted>:
	  }
   }
}
	
//returns true if the EEPROM has been setup to work with the kernel.
bool isEepromFormatted(){
    721e:	cf 93       	push	r28
	unsigned id;
	id=ReadEeprom(0)+(ReadEeprom(1)<<8);
    7220:	80 e0       	ldi	r24, 0x00	; 0
    7222:	90 e0       	ldi	r25, 0x00	; 0
    7224:	0e 94 44 38 	call	0x7088	; 0x7088 <ReadEeprom>
    7228:	c8 2f       	mov	r28, r24
    722a:	81 e0       	ldi	r24, 0x01	; 1
    722c:	90 e0       	ldi	r25, 0x00	; 0
    722e:	0e 94 44 38 	call	0x7088	; 0x7088 <ReadEeprom>
    7232:	28 2f       	mov	r18, r24
    7234:	30 e0       	ldi	r19, 0x00	; 0
    7236:	32 2f       	mov	r19, r18
    7238:	22 27       	eor	r18, r18
    723a:	2c 0f       	add	r18, r28
    723c:	31 1d       	adc	r19, r1
	return (id==EEPROM_SIGNATURE);
    723e:	81 e0       	ldi	r24, 0x01	; 1
    7240:	2a 35       	cpi	r18, 0x5A	; 90
    7242:	35 45       	sbci	r19, 0x55	; 85
    7244:	09 f0       	breq	.+2      	; 0x7248 <isEepromFormatted+0x2a>
    7246:	80 e0       	ldi	r24, 0x00	; 0
}
    7248:	cf 91       	pop	r28
    724a:	08 95       	ret

0000724c <EepromBlockExists>:
 * @return
 *  0x00 = Success, Block exists.
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK.
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND.
 */
char EepromBlockExists(unsigned int blockId, u16* eepromAddr, u8* nextFreeBlockId){
    724c:	8f 92       	push	r8
    724e:	9f 92       	push	r9
    7250:	af 92       	push	r10
    7252:	bf 92       	push	r11
    7254:	cf 92       	push	r12
    7256:	df 92       	push	r13
    7258:	ef 92       	push	r14
    725a:	ff 92       	push	r15
    725c:	0f 93       	push	r16
    725e:	1f 93       	push	r17
    7260:	cf 93       	push	r28
    7262:	df 93       	push	r29
	u8 nextFreeBlock=0;
	u8 result=EEPROM_ERROR_BLOCK_NOT_FOUND;
	u16 id;
	*eepromAddr=0;
    7264:	fb 01       	movw	r30, r22
    7266:	11 82       	std	Z+1, r1	; 0x01
    7268:	10 82       	st	Z, r1

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    726a:	8f 3f       	cpi	r24, 0xFF	; 255
    726c:	ff ef       	ldi	r31, 0xFF	; 255
    726e:	9f 07       	cpc	r25, r31
    7270:	89 f1       	breq	.+98     	; 0x72d4 <EepromBlockExists+0x88>
    7272:	6a 01       	movw	r12, r20
    7274:	8b 01       	movw	r16, r22
    7276:	7c 01       	movw	r14, r24
    7278:	a1 2c       	mov	r10, r1
    727a:	b1 2c       	mov	r11, r1
    727c:	c0 e0       	ldi	r28, 0x00	; 0
    727e:	d3 e0       	ldi	r29, 0x03	; 3
    7280:	91 2c       	mov	r9, r1
		
	//scan all blocks and get the memory adress of that block and the next free block
	for(u8 i=0;i<EEPROM_MAX_BLOCKS;i++){
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
    7282:	c5 01       	movw	r24, r10
    7284:	0e 94 44 38 	call	0x7088	; 0x7088 <ReadEeprom>
    7288:	88 2e       	mov	r8, r24
    728a:	c5 01       	movw	r24, r10
    728c:	01 96       	adiw	r24, 0x01	; 1
    728e:	0e 94 44 38 	call	0x7088	; 0x7088 <ReadEeprom>
    7292:	28 2f       	mov	r18, r24
    7294:	30 e0       	ldi	r19, 0x00	; 0
    7296:	32 2f       	mov	r19, r18
    7298:	22 27       	eor	r18, r18
    729a:	28 0d       	add	r18, r8
    729c:	31 1d       	adc	r19, r1
		
		if(id==blockId){
    729e:	2e 15       	cp	r18, r14
    72a0:	3f 05       	cpc	r19, r15
    72a2:	29 f4       	brne	.+10     	; 0x72ae <EepromBlockExists+0x62>
			*eepromAddr=(i*EEPROM_BLOCK_SIZE);
    72a4:	f8 01       	movw	r30, r16
    72a6:	b1 82       	std	Z+1, r11	; 0x01
    72a8:	a0 82       	st	Z, r10
			result=EEPROM_OK;
    72aa:	d0 e0       	ldi	r29, 0x00	; 0
    72ac:	0b c0       	rjmp	.+22     	; 0x72c4 <EepromBlockExists+0x78>
		}
		
		if(id==0xffff && nextFreeBlock==0){
    72ae:	2f 3f       	cpi	r18, 0xFF	; 255
    72b0:	3f 4f       	sbci	r19, 0xFF	; 255
    72b2:	41 f4       	brne	.+16     	; 0x72c4 <EepromBlockExists+0x78>
    72b4:	91 10       	cpse	r9, r1
    72b6:	06 c0       	rjmp	.+12     	; 0x72c4 <EepromBlockExists+0x78>
			nextFreeBlock=i;
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
    72b8:	c1 14       	cp	r12, r1
    72ba:	d1 04       	cpc	r13, r1
    72bc:	11 f0       	breq	.+4      	; 0x72c2 <EepromBlockExists+0x76>
    72be:	f6 01       	movw	r30, r12
    72c0:	c0 83       	st	Z, r28
    72c2:	9c 2e       	mov	r9, r28
	*eepromAddr=0;

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
		
	//scan all blocks and get the memory adress of that block and the next free block
	for(u8 i=0;i<EEPROM_MAX_BLOCKS;i++){
    72c4:	cf 5f       	subi	r28, 0xFF	; 255
    72c6:	f0 e2       	ldi	r31, 0x20	; 32
    72c8:	af 0e       	add	r10, r31
    72ca:	b1 1c       	adc	r11, r1
    72cc:	c0 34       	cpi	r28, 0x40	; 64
    72ce:	c9 f6       	brne	.-78     	; 0x7282 <EepromBlockExists+0x36>
			nextFreeBlock=i;
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
		}
	}

	return result;
    72d0:	8d 2f       	mov	r24, r29
    72d2:	01 c0       	rjmp	.+2      	; 0x72d6 <EepromBlockExists+0x8a>
	u8 nextFreeBlock=0;
	u8 result=EEPROM_ERROR_BLOCK_NOT_FOUND;
	u16 id;
	*eepromAddr=0;

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    72d4:	81 e0       	ldi	r24, 0x01	; 1
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
		}
	}

	return result;
}
    72d6:	df 91       	pop	r29
    72d8:	cf 91       	pop	r28
    72da:	1f 91       	pop	r17
    72dc:	0f 91       	pop	r16
    72de:	ff 90       	pop	r15
    72e0:	ef 90       	pop	r14
    72e2:	df 90       	pop	r13
    72e4:	cf 90       	pop	r12
    72e6:	bf 90       	pop	r11
    72e8:	af 90       	pop	r10
    72ea:	9f 90       	pop	r9
    72ec:	8f 90       	pop	r8
    72ee:	08 95       	ret

000072f0 <EepromWriteBlock>:
 * Returns:
 *  0x00 = Success
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x02 = EEPROM_ERROR_FULL
 */
char EepromWriteBlock(struct EepromBlockStruct *block){
    72f0:	ef 92       	push	r14
    72f2:	ff 92       	push	r15
    72f4:	0f 93       	push	r16
    72f6:	1f 93       	push	r17
    72f8:	cf 93       	push	r28
    72fa:	df 93       	push	r29
    72fc:	00 d0       	rcall	.+0      	; 0x72fe <EepromWriteBlock+0xe>
    72fe:	1f 92       	push	r1
    7300:	cd b7       	in	r28, 0x3d	; 61
    7302:	de b7       	in	r29, 0x3e	; 62
    7304:	8c 01       	movw	r16, r24
	u16 eepromAddr=0;
    7306:	1a 82       	std	Y+2, r1	; 0x02
    7308:	19 82       	std	Y+1, r1	; 0x01
	u8 *srcPtr=(unsigned char *)block,res,nextFreeBlock=0;
    730a:	1b 82       	std	Y+3, r1	; 0x03

	res=EepromBlockExists(block->id,&eepromAddr,&nextFreeBlock);
    730c:	ae 01       	movw	r20, r28
    730e:	4d 5f       	subi	r20, 0xFD	; 253
    7310:	5f 4f       	sbci	r21, 0xFF	; 255
    7312:	be 01       	movw	r22, r28
    7314:	6f 5f       	subi	r22, 0xFF	; 255
    7316:	7f 4f       	sbci	r23, 0xFF	; 255
    7318:	fc 01       	movw	r30, r24
    731a:	80 81       	ld	r24, Z
    731c:	91 81       	ldd	r25, Z+1	; 0x01
    731e:	0e 94 26 39 	call	0x724c	; 0x724c <EepromBlockExists>
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;
    7322:	88 23       	and	r24, r24
    7324:	11 f0       	breq	.+4      	; 0x732a <EepromWriteBlock+0x3a>
    7326:	83 30       	cpi	r24, 0x03	; 3
    7328:	19 f5       	brne	.+70     	; 0x7370 <EepromWriteBlock+0x80>

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    732a:	89 81       	ldd	r24, Y+1	; 0x01
    732c:	9a 81       	ldd	r25, Y+2	; 0x02
    732e:	89 2b       	or	r24, r25
    7330:	49 f4       	brne	.+18     	; 0x7344 <EepromWriteBlock+0x54>
    7332:	8b 81       	ldd	r24, Y+3	; 0x03
    7334:	88 23       	and	r24, r24
    7336:	d9 f0       	breq	.+54     	; 0x736e <EepromWriteBlock+0x7e>
	if(eepromAddr==0 && nextFreeBlock!=0) eepromAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;
    7338:	f0 e2       	ldi	r31, 0x20	; 32
    733a:	8f 9f       	mul	r24, r31
    733c:	c0 01       	movw	r24, r0
    733e:	11 24       	eor	r1, r1
    7340:	9a 83       	std	Y+2, r25	; 0x02
    7342:	89 83       	std	Y+1, r24	; 0x01
    7344:	78 01       	movw	r14, r16
    7346:	20 e2       	ldi	r18, 0x20	; 32
    7348:	e2 0e       	add	r14, r18
    734a:	f1 1c       	adc	r15, r1

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
		WriteEeprom(eepromAddr++,*srcPtr);
    734c:	f8 01       	movw	r30, r16
    734e:	61 91       	ld	r22, Z+
    7350:	8f 01       	movw	r16, r30
    7352:	89 81       	ldd	r24, Y+1	; 0x01
    7354:	9a 81       	ldd	r25, Y+2	; 0x02
    7356:	9c 01       	movw	r18, r24
    7358:	2f 5f       	subi	r18, 0xFF	; 255
    735a:	3f 4f       	sbci	r19, 0xFF	; 255
    735c:	3a 83       	std	Y+2, r19	; 0x02
    735e:	29 83       	std	Y+1, r18	; 0x01
    7360:	0e 94 3a 38 	call	0x7074	; 0x7074 <WriteEeprom>
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(eepromAddr==0 && nextFreeBlock!=0) eepromAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
    7364:	0e 15       	cp	r16, r14
    7366:	1f 05       	cpc	r17, r15
    7368:	89 f7       	brne	.-30     	; 0x734c <EepromWriteBlock+0x5c>
		WriteEeprom(eepromAddr++,*srcPtr);
		srcPtr++;	
	}
	
	return 0;
    736a:	80 e0       	ldi	r24, 0x00	; 0
    736c:	01 c0       	rjmp	.+2      	; 0x7370 <EepromWriteBlock+0x80>
	u8 *srcPtr=(unsigned char *)block,res,nextFreeBlock=0;

	res=EepromBlockExists(block->id,&eepromAddr,&nextFreeBlock);
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    736e:	82 e0       	ldi	r24, 0x02	; 2
		WriteEeprom(eepromAddr++,*srcPtr);
		srcPtr++;	
	}
	
	return 0;
}
    7370:	0f 90       	pop	r0
    7372:	0f 90       	pop	r0
    7374:	0f 90       	pop	r0
    7376:	df 91       	pop	r29
    7378:	cf 91       	pop	r28
    737a:	1f 91       	pop	r17
    737c:	0f 91       	pop	r16
    737e:	ff 90       	pop	r15
    7380:	ef 90       	pop	r14
    7382:	08 95       	ret

00007384 <EepromReadBlock>:
 * Returns: 
 *  0x00 = Success
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 */
char EepromReadBlock(unsigned int blockId,struct EepromBlockStruct *block){	
    7384:	cf 92       	push	r12
    7386:	df 92       	push	r13
    7388:	ff 92       	push	r15
    738a:	0f 93       	push	r16
    738c:	1f 93       	push	r17
    738e:	cf 93       	push	r28
    7390:	df 93       	push	r29
    7392:	00 d0       	rcall	.+0      	; 0x7394 <EepromReadBlock+0x10>
    7394:	cd b7       	in	r28, 0x3d	; 61
    7396:	de b7       	in	r29, 0x3e	; 62
    7398:	8b 01       	movw	r16, r22
	u16 eepromAddr;
	u8 *blockPtr=(unsigned char *)block;

	u8 res=EepromBlockExists(blockId,&eepromAddr,NULL);
    739a:	40 e0       	ldi	r20, 0x00	; 0
    739c:	50 e0       	ldi	r21, 0x00	; 0
    739e:	be 01       	movw	r22, r28
    73a0:	6f 5f       	subi	r22, 0xFF	; 255
    73a2:	7f 4f       	sbci	r23, 0xFF	; 255
    73a4:	0e 94 26 39 	call	0x724c	; 0x724c <EepromBlockExists>
    73a8:	f8 2e       	mov	r15, r24
	if(res!=0) return res;
    73aa:	81 11       	cpse	r24, r1
    73ac:	13 c0       	rjmp	.+38     	; 0x73d4 <EepromReadBlock+0x50>
    73ae:	68 01       	movw	r12, r16
    73b0:	80 e2       	ldi	r24, 0x20	; 32
    73b2:	c8 0e       	add	r12, r24
    73b4:	d1 1c       	adc	r13, r1

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
		*blockPtr=ReadEeprom(eepromAddr++);
    73b6:	89 81       	ldd	r24, Y+1	; 0x01
    73b8:	9a 81       	ldd	r25, Y+2	; 0x02
    73ba:	9c 01       	movw	r18, r24
    73bc:	2f 5f       	subi	r18, 0xFF	; 255
    73be:	3f 4f       	sbci	r19, 0xFF	; 255
    73c0:	3a 83       	std	Y+2, r19	; 0x02
    73c2:	29 83       	std	Y+1, r18	; 0x01
    73c4:	0e 94 44 38 	call	0x7088	; 0x7088 <ReadEeprom>
    73c8:	f8 01       	movw	r30, r16
    73ca:	81 93       	st	Z+, r24
    73cc:	8f 01       	movw	r16, r30
	u8 *blockPtr=(unsigned char *)block;

	u8 res=EepromBlockExists(blockId,&eepromAddr,NULL);
	if(res!=0) return res;

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
    73ce:	ec 15       	cp	r30, r12
    73d0:	fd 05       	cpc	r31, r13
    73d2:	89 f7       	brne	.-30     	; 0x73b6 <EepromReadBlock+0x32>
		*blockPtr=ReadEeprom(eepromAddr++);
		blockPtr++;	
	}
	
	return EEPROM_OK;
}
    73d4:	8f 2d       	mov	r24, r15
    73d6:	0f 90       	pop	r0
    73d8:	0f 90       	pop	r0
    73da:	df 91       	pop	r29
    73dc:	cf 91       	pop	r28
    73de:	1f 91       	pop	r17
    73e0:	0f 91       	pop	r16
    73e2:	ff 90       	pop	r15
    73e4:	df 90       	pop	r13
    73e6:	cf 90       	pop	r12
    73e8:	08 95       	ret

000073ea <GetPrngNumber>:
 * Input: Zero=return the next random value. Non-zero=Sets the seed value.
 */
u16 GetPrngNumber(u16 seed){
	static u16 prng_state;
  	
	if(seed!=0) prng_state=seed;
    73ea:	00 97       	sbiw	r24, 0x00	; 0
    73ec:	21 f0       	breq	.+8      	; 0x73f6 <GetPrngNumber+0xc>
    73ee:	90 93 cd 0c 	sts	0x0CCD, r25
    73f2:	80 93 cc 0c 	sts	0x0CCC, r24
	
	u16 bit  = ((prng_state >> 0) ^ (prng_state >> 2) ^ (prng_state >> 3) ^ (prng_state >> 5) ) & 1;
    73f6:	20 91 cc 0c 	lds	r18, 0x0CCC
    73fa:	30 91 cd 0c 	lds	r19, 0x0CCD
    73fe:	a9 01       	movw	r20, r18
    7400:	56 95       	lsr	r21
    7402:	47 95       	ror	r20
    7404:	56 95       	lsr	r21
    7406:	47 95       	ror	r20
    7408:	c9 01       	movw	r24, r18
    740a:	63 e0       	ldi	r22, 0x03	; 3
    740c:	96 95       	lsr	r25
    740e:	87 95       	ror	r24
    7410:	6a 95       	dec	r22
    7412:	e1 f7       	brne	.-8      	; 0x740c <GetPrngNumber+0x22>
    7414:	84 27       	eor	r24, r20
    7416:	95 27       	eor	r25, r21
    7418:	82 27       	eor	r24, r18
    741a:	93 27       	eor	r25, r19
    741c:	a9 01       	movw	r20, r18
    741e:	75 e0       	ldi	r23, 0x05	; 5
    7420:	56 95       	lsr	r21
    7422:	47 95       	ror	r20
    7424:	7a 95       	dec	r23
    7426:	e1 f7       	brne	.-8      	; 0x7420 <GetPrngNumber+0x36>
    7428:	84 27       	eor	r24, r20
    742a:	95 27       	eor	r25, r21
	prng_state =  (prng_state >> 1) | (bit << 15);
    742c:	99 27       	eor	r25, r25
    742e:	86 95       	lsr	r24
    7430:	97 95       	ror	r25
    7432:	88 27       	eor	r24, r24
    7434:	36 95       	lsr	r19
    7436:	27 95       	ror	r18
    7438:	82 2b       	or	r24, r18
    743a:	93 2b       	or	r25, r19
    743c:	90 93 cd 0c 	sts	0x0CCD, r25
    7440:	80 93 cc 0c 	sts	0x0CCC, r24
	return prng_state;   
}
    7444:	08 95       	ret

00007446 <PatchCommand00>:
/*
 * Command 00: Set envelope speed per frame +127/-128, 0=no enveloppe
 * Param:
 */
void PatchCommand00(Track* track, char param){
	track->envelopeStep=param;
    7446:	fc 01       	movw	r30, r24
    7448:	67 87       	std	Z+15, r22	; 0x0f
    744a:	08 95       	ret

0000744c <PatchCommand01>:
 * Param:
 */
void PatchCommand01(Track* track, char param){
	(void)track; //to remove unused warning
	#if MIXER_CHAN4_TYPE == 0
		mixer.channels.type.noise.barrel=0x0101;
    744c:	e0 ed       	ldi	r30, 0xD0	; 208
    744e:	fc e0       	ldi	r31, 0x0C	; 12
    7450:	81 e0       	ldi	r24, 0x01	; 1
    7452:	91 e0       	ldi	r25, 0x01	; 1
    7454:	95 8b       	std	Z+21, r25	; 0x15
    7456:	84 8b       	std	Z+20, r24	; 0x14
		mixer.channels.type.noise.params=param;
    7458:	63 8b       	std	Z+19, r22	; 0x13
    745a:	08 95       	ret

0000745c <PatchCommand05>:
}
/*
 * Command 05: End of note/fx
 * Param:
 */
void PatchCommand05(Track* track, char param){
    745c:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags&=~(TRACK_FLAGS_PLAYING+TRACK_FLAGS_PRIORITY);	//patchPlaying=false,priority=0	
    745e:	90 81       	ld	r25, Z
    7460:	9f 75       	andi	r25, 0x5F	; 95
    7462:	90 83       	st	Z, r25
    7464:	08 95       	ret

00007466 <PatchCommand06>:

/*
 * Command 06: Note hold
 * Param:
 */
void PatchCommand06(Track* track, char param){
    7466:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags|=TRACK_FLAGS_HOLD_ENV; //patchEnvelopeHold=true;
    7468:	90 81       	ld	r25, Z
    746a:	90 64       	ori	r25, 0x40	; 64
    746c:	90 83       	st	Z, r25
    746e:	08 95       	ret

00007470 <PatchCommand07>:
 * Command 07: Set envelope volume
 * Param:
 */

void PatchCommand07(Track* track, char param){
	track->envelopeVol=param;
    7470:	fc 01       	movw	r30, r24
    7472:	66 87       	std	Z+14, r22	; 0x0e
    7474:	08 95       	ret

00007476 <PatchCommand09>:
 * Command 09: Set tremolo level
 * Param:
*/

void PatchCommand09(Track* track, char param){
	track->tremoloLevel=param;
    7476:	fc 01       	movw	r30, r24
    7478:	62 87       	std	Z+10, r22	; 0x0a
    747a:	08 95       	ret

0000747c <PatchCommand10>:
/*
 * Command 10: Set tremolo rate
 * Param:
*/
void PatchCommand10(Track* track, char param){
	track->tremoloRate=param;
    747c:	fc 01       	movw	r30, r24
    747e:	63 87       	std	Z+11, r22	; 0x0b
    7480:	08 95       	ret

00007482 <PatchCommand11>:
/*
 * Command 11: Pitch slide (linear) 
 * Param: (+/-) half steps to slide to
*/

void PatchCommand11(Track* track, char param){
    7482:	cf 93       	push	r28
    7484:	df 93       	push	r29
    7486:	ec 01       	movw	r28, r24
    7488:	46 2f       	mov	r20, r22
	//slide to note from current note
	s16 currentStep,targetStep,delta;	
	
	currentStep=pgm_read_word(&(steptable[track->note]));
    748a:	29 81       	ldd	r18, Y+1	; 0x01
    748c:	30 e0       	ldi	r19, 0x00	; 0
    748e:	f9 01       	movw	r30, r18
    7490:	ee 0f       	add	r30, r30
    7492:	ff 1f       	adc	r31, r31
    7494:	e8 5f       	subi	r30, 0xF8	; 248
    7496:	f1 48       	sbci	r31, 0x81	; 129
    7498:	65 91       	lpm	r22, Z+
    749a:	74 91       	lpm	r23, Z
	targetStep=pgm_read_word(&(steptable[track->note+param]));	
    749c:	f9 01       	movw	r30, r18
    749e:	e4 0f       	add	r30, r20
    74a0:	f1 1d       	adc	r31, r1
    74a2:	47 fd       	sbrc	r20, 7
    74a4:	fa 95       	dec	r31
    74a6:	ee 0f       	add	r30, r30
    74a8:	ff 1f       	adc	r31, r31
    74aa:	e8 5f       	subi	r30, 0xF8	; 248
    74ac:	f1 48       	sbci	r31, 0x81	; 129
    74ae:	85 91       	lpm	r24, Z+
    74b0:	94 91       	lpm	r25, Z
	delta=((targetStep-currentStep)/track->slideSpeed);
    74b2:	86 1b       	sub	r24, r22
    74b4:	97 0b       	sbc	r25, r23
    74b6:	68 85       	ldd	r22, Y+8	; 0x08
    74b8:	70 e0       	ldi	r23, 0x00	; 0
    74ba:	0e 94 ad 65 	call	0xcb5a	; 0xcb5a <__divmodhi4>
	if(delta==0)delta++;
    74be:	61 15       	cp	r22, r1
    74c0:	71 05       	cpc	r23, r1
    74c2:	11 f4       	brne	.+4      	; 0x74c8 <PatchCommand11+0x46>
    74c4:	61 e0       	ldi	r22, 0x01	; 1
    74c6:	70 e0       	ldi	r23, 0x00	; 0

	mixer.channels.all[track->channel].step+=delta;
    74c8:	ea 81       	ldd	r30, Y+2	; 0x02
    74ca:	86 e0       	ldi	r24, 0x06	; 6
    74cc:	e8 9f       	mul	r30, r24
    74ce:	f0 01       	movw	r30, r0
    74d0:	11 24       	eor	r1, r1
    74d2:	e0 53       	subi	r30, 0x30	; 48
    74d4:	f3 4f       	sbci	r31, 0xF3	; 243
    74d6:	81 81       	ldd	r24, Z+1	; 0x01
    74d8:	92 81       	ldd	r25, Z+2	; 0x02
    74da:	86 0f       	add	r24, r22
    74dc:	97 1f       	adc	r25, r23
    74de:	92 83       	std	Z+2, r25	; 0x02
    74e0:	81 83       	std	Z+1, r24	; 0x01
	
	track->slideStep=delta;
    74e2:	7e 83       	std	Y+6, r23	; 0x06
    74e4:	6d 83       	std	Y+5, r22	; 0x05
	track->flags|=TRACK_FLAGS_SLIDING;
    74e6:	88 81       	ld	r24, Y
    74e8:	88 60       	ori	r24, 0x08	; 8
    74ea:	88 83       	st	Y, r24
	track->slideNote=track->note+param;
    74ec:	89 81       	ldd	r24, Y+1	; 0x01
    74ee:	48 0f       	add	r20, r24
    74f0:	4f 83       	std	Y+7, r20	; 0x07
}
    74f2:	df 91       	pop	r29
    74f4:	cf 91       	pop	r28
    74f6:	08 95       	ret

000074f8 <PatchCommand12>:
/*
 * Command 12: Pitch slide speed 
 * Param: slide speed (fixed 4:4)
 */
void PatchCommand12(Track* track, char param){
	track->slideSpeed=param;
    74f8:	fc 01       	movw	r30, r24
    74fa:	60 87       	std	Z+8, r22	; 0x08
    74fc:	08 95       	ret

000074fe <PatchCommand13>:
 *  Command 13: Loop start
 * Description: Defines the start of a loop. Works in conjunction with command 14 (PC_LOOP_END).
 *		 Param: loop count
 */
void PatchCommand13(Track* track, char param){
	track->loopCount=(u8)param;
    74fe:	fc 01       	movw	r30, r24
    7500:	64 83       	std	Z+4, r22	; 0x04
    7502:	08 95       	ret

00007504 <PatchCommand02>:
/*
 * Command 02: Set wave
 * Param:
 */
void PatchCommand02(Track* track, char param){
	SetMixerWave(track->channel,param);
    7504:	fc 01       	movw	r30, r24
    7506:	82 81       	ldd	r24, Z+2	; 0x02
    7508:	0c 94 9d 3e 	jmp	0x7d3a	; 0x7d3a <SetMixerWave>

0000750c <PatchCommand03>:
}
/*
 * Command 03: Note up * param
 * Param:
 */
void PatchCommand03(Track* track, char param){
    750c:	fc 01       	movw	r30, r24
	track->note+=param;
    750e:	91 81       	ldd	r25, Z+1	; 0x01
    7510:	69 0f       	add	r22, r25
    7512:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(track->channel,track->note);
    7514:	82 81       	ldd	r24, Z+2	; 0x02
    7516:	0c 94 86 3e 	jmp	0x7d0c	; 0x7d0c <SetMixerNote>

0000751a <PatchCommand04>:
}
/*
 * Command 04: Note down * param
 * Param:
 */
void PatchCommand04(Track* track, char param){
    751a:	fc 01       	movw	r30, r24
	track->note-=param;
    751c:	91 81       	ldd	r25, Z+1	; 0x01
    751e:	96 1b       	sub	r25, r22
    7520:	69 2f       	mov	r22, r25
    7522:	91 83       	std	Z+1, r25	; 0x01
	SetMixerNote(track->channel,track->note);
    7524:	82 81       	ldd	r24, Z+2	; 0x02
    7526:	0c 94 86 3e 	jmp	0x7d0c	; 0x7d0c <SetMixerNote>

0000752a <PatchCommand08>:
/*
 * Command 08: Set Note/Pitch
 * Param:
 */

void PatchCommand08(Track* track, char param){
    752a:	1f 93       	push	r17
    752c:	cf 93       	push	r28
    752e:	df 93       	push	r29
    7530:	ec 01       	movw	r28, r24
    7532:	16 2f       	mov	r17, r22
	SetMixerNote(track->channel,param);
    7534:	8a 81       	ldd	r24, Y+2	; 0x02
    7536:	0e 94 86 3e 	call	0x7d0c	; 0x7d0c <SetMixerNote>
	track->note=param;
    753a:	19 83       	std	Y+1, r17	; 0x01
	track->flags &= ~(TRACK_FLAGS_SLIDING);	
    753c:	88 81       	ld	r24, Y
    753e:	87 7f       	andi	r24, 0xF7	; 247
    7540:	88 83       	st	Y, r24
}
    7542:	df 91       	pop	r29
    7544:	cf 91       	pop	r28
    7546:	1f 91       	pop	r17
    7548:	08 95       	ret

0000754a <PatchCommand14>:
 *					1,PC_NOTE_DOWN,3,
 *					0,PC_LOOP_END,2,
 *					0,PATCH_END  
 *				};
 */
void PatchCommand14(Track* track, char param){
    754a:	dc 01       	movw	r26, r24
	if(track->loopCount>0){
    754c:	14 96       	adiw	r26, 0x04	; 4
    754e:	8c 91       	ld	r24, X
    7550:	14 97       	sbiw	r26, 0x04	; 4
    7552:	88 23       	and	r24, r24
    7554:	19 f1       	breq	.+70     	; 0x759c <PatchCommand14+0x52>
    7556:	55 96       	adiw	r26, 0x15	; 21
    7558:	2d 91       	ld	r18, X+
    755a:	3c 91       	ld	r19, X
    755c:	56 97       	sbiw	r26, 0x16	; 22
		//track->patchCommandStreamPos=track->loopStart;
		if(param!=0){
    755e:	66 23       	and	r22, r22
    7560:	79 f0       	breq	.+30     	; 0x7580 <PatchCommand14+0x36>
			track->patchCommandStreamPos-=((param+1)*3);
    7562:	77 27       	eor	r23, r23
    7564:	67 fd       	sbrc	r22, 7
    7566:	70 95       	com	r23
    7568:	6f 5f       	subi	r22, 0xFF	; 255
    756a:	7f 4f       	sbci	r23, 0xFF	; 255
    756c:	ab 01       	movw	r20, r22
    756e:	44 0f       	add	r20, r20
    7570:	55 1f       	adc	r21, r21
    7572:	64 0f       	add	r22, r20
    7574:	75 1f       	adc	r23, r21
    7576:	26 1b       	sub	r18, r22
    7578:	37 0b       	sbc	r19, r23
    757a:	09 c0       	rjmp	.+18     	; 0x758e <PatchCommand14+0x44>
			while(1){
				track->patchCommandStreamPos-=3;
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    757c:	ef 3f       	cpi	r30, 0xFF	; 255
    757e:	39 f0       	breq	.+14     	; 0x758e <PatchCommand14+0x44>
		if(param!=0){
			track->patchCommandStreamPos-=((param+1)*3);
		}else{
			u8 command;
			while(1){
				track->patchCommandStreamPos-=3;
    7580:	23 50       	subi	r18, 0x03	; 3
    7582:	31 09       	sbc	r19, r1
    7584:	f9 01       	movw	r30, r18
    7586:	32 97       	sbiw	r30, 0x02	; 2
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
    7588:	e4 91       	lpm	r30, Z
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    758a:	ed 30       	cpi	r30, 0x0D	; 13
    758c:	b9 f7       	brne	.-18     	; 0x757c <PatchCommand14+0x32>
    758e:	56 96       	adiw	r26, 0x16	; 22
    7590:	3c 93       	st	X, r19
    7592:	2e 93       	st	-X, r18
    7594:	55 97       	sbiw	r26, 0x15	; 21
			}
		}
		track->loopCount--;
    7596:	81 50       	subi	r24, 0x01	; 1
    7598:	14 96       	adiw	r26, 0x04	; 4
    759a:	8c 93       	st	X, r24
    759c:	08 95       	ret

0000759e <InitMusicPlayer>:

const Patch *patchPointers;

void InitMusicPlayer(const Patch *patchPointersParam){

	patchPointers=patchPointersParam;
    759e:	90 93 71 0d 	sts	0x0D71, r25
    75a2:	80 93 70 0d 	sts	0x0D70, r24

	masterVolume=DEFAULT_MASTER_VOL;
    75a6:	8f e6       	ldi	r24, 0x6F	; 111
    75a8:	80 93 73 0d 	sts	0x0D73, r24
#if MIDI_IN == ENABLED
	InitUartRxBuffer();
	lastMidiInStatus=0;
#endif

	playSong=false;
    75ac:	10 92 ce 0c 	sts	0x0CCE, r1
    75b0:	eb e0       	ldi	r30, 0x0B	; 11
    75b2:	fd e0       	ldi	r31, 0x0D	; 13

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    75b4:	80 e0       	ldi	r24, 0x00	; 0
		tracks[t].channel=t;
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    75b6:	90 e1       	ldi	r25, 0x10	; 16
		tracks[t].noteVol=0;
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    75b8:	3f ef       	ldi	r19, 0xFF	; 255
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
    75ba:	28 e1       	ldi	r18, 0x18	; 24
    75bc:	df 01       	movw	r26, r30
    75be:	1e 97       	sbiw	r26, 0x0e	; 14

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].channel=t;
    75c0:	8c 93       	st	X, r24
    75c2:	12 97       	sbiw	r26, 0x02	; 2
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    75c4:	9c 93       	st	X, r25
    75c6:	1d 96       	adiw	r26, 0x0d	; 13
		tracks[t].noteVol=0;
    75c8:	1c 92       	st	X, r1
    75ca:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    75cc:	3c 93       	st	X, r19
		tracks[t].patchNo=DEFAULT_PATCH;
    75ce:	10 82       	st	Z, r1
    75d0:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].tremoloRate=24; //~6hz
    75d2:	2c 93       	st	X, r18
    75d4:	13 97       	sbiw	r26, 0x03	; 3
		tracks[t].slideSpeed=0x10;
    75d6:	9c 93       	st	X, r25
#endif

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    75d8:	8f 5f       	subi	r24, 0xFF	; 255
    75da:	77 96       	adiw	r30, 0x17	; 23
    75dc:	85 30       	cpi	r24, 0x05	; 5
    75de:	71 f7       	brne	.-36     	; 0x75bc <InitMusicPlayer+0x1e>
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
		tracks[t].slideSpeed=0x10;
	}

}
    75e0:	08 95       	ret

000075e2 <StartSong>:

#if MUSIC_ENGINE == MIDI

	void StartSong(const char *song){
    75e2:	eb ef       	ldi	r30, 0xFB	; 251
    75e4:	fc e0       	ldi	r31, 0x0C	; 12
		for(unsigned char t=0;t<CHANNELS;t++){
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    75e6:	3f ef       	ldi	r19, 0xFF	; 255

#if MUSIC_ENGINE == MIDI

	void StartSong(const char *song){
		for(unsigned char t=0;t<CHANNELS;t++){
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    75e8:	20 81       	ld	r18, Z
    75ea:	2f 77       	andi	r18, 0x7F	; 127
    75ec:	20 83       	st	Z, r18
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    75ee:	33 83       	std	Z+3, r19	; 0x03
    75f0:	77 96       	adiw	r30, 0x17	; 23
}

#if MUSIC_ENGINE == MIDI

	void StartSong(const char *song){
		for(unsigned char t=0;t<CHANNELS;t++){
    75f2:	2d e0       	ldi	r18, 0x0D	; 13
    75f4:	ee 36       	cpi	r30, 0x6E	; 110
    75f6:	f2 07       	cpc	r31, r18
    75f8:	b9 f7       	brne	.-18     	; 0x75e8 <StartSong+0x6>
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
		}

		songPos=song+1; //skip first delta-time
    75fa:	01 96       	adiw	r24, 0x01	; 1
    75fc:	90 93 78 0d 	sts	0x0D78, r25
    7600:	80 93 77 0d 	sts	0x0D77, r24
		songStart=song+1;//skip first delta-time
    7604:	90 93 fa 0c 	sts	0x0CFA, r25
    7608:	80 93 f9 0c 	sts	0x0CF9, r24
		loopStart=song+1;
    760c:	90 93 7a 0d 	sts	0x0D7A, r25
    7610:	80 93 79 0d 	sts	0x0D79, r24
		nextDeltaTime=0;
    7614:	10 92 75 0d 	sts	0x0D75, r1
    7618:	10 92 74 0d 	sts	0x0D74, r1
		currDeltaTime=0;
    761c:	10 92 6f 0d 	sts	0x0D6F, r1
    7620:	10 92 6e 0d 	sts	0x0D6E, r1
		songSpeed=0;
    7624:	10 92 76 0d 	sts	0x0D76, r1

		lastStatus=0;
    7628:	10 92 72 0d 	sts	0x0D72, r1
		playSong=true;
    762c:	81 e0       	ldi	r24, 0x01	; 1
    762e:	80 93 ce 0c 	sts	0x0CCE, r24
    7632:	08 95       	ret

00007634 <StopSong>:


void StopSong(){

	for(u8 i=0;i<CHANNELS;i++){
		tracks[i].envelopeStep=-6;
    7634:	eb ef       	ldi	r30, 0xFB	; 251
    7636:	fc e0       	ldi	r31, 0x0C	; 12
    7638:	8a ef       	ldi	r24, 0xFA	; 250
    763a:	87 87       	std	Z+15, r24	; 0x0f
    763c:	86 a3       	std	Z+38, r24	; 0x26
    763e:	80 93 38 0d 	sts	0x0D38, r24
    7642:	80 93 4f 0d 	sts	0x0D4F, r24
    7646:	80 93 66 0d 	sts	0x0D66, r24
	}

	playSong=false;
    764a:	10 92 ce 0c 	sts	0x0CCE, r1
    764e:	08 95       	ret

00007650 <ReadVarLen>:
}



unsigned int ReadVarLen(const char **songPos)
{
    7650:	dc 01       	movw	r26, r24
    unsigned int value;
    unsigned char c;


    if ( (value = pgm_read_byte((*songPos)++)) & 0x80 )
    7652:	ed 91       	ld	r30, X+
    7654:	fc 91       	ld	r31, X
    7656:	11 97       	sbiw	r26, 0x01	; 1
    7658:	9f 01       	movw	r18, r30
    765a:	2f 5f       	subi	r18, 0xFF	; 255
    765c:	3f 4f       	sbci	r19, 0xFF	; 255
    765e:	11 96       	adiw	r26, 0x01	; 1
    7660:	3c 93       	st	X, r19
    7662:	2e 93       	st	-X, r18
    7664:	e4 91       	lpm	r30, Z
    7666:	e7 fd       	sbrc	r30, 7
    7668:	03 c0       	rjmp	.+6      	; 0x7670 <ReadVarLen+0x20>
    766a:	8e 2f       	mov	r24, r30
    766c:	90 e0       	ldi	r25, 0x00	; 0
    766e:	08 95       	ret
    {
       value &= 0x7F;
    7670:	ef 77       	andi	r30, 0x7F	; 127
    7672:	8e 2f       	mov	r24, r30
    7674:	90 e0       	ldi	r25, 0x00	; 0
       do
       {
         value = (value << 7) + ((c = pgm_read_byte((*songPos)++)) & 0x7F);
    7676:	96 95       	lsr	r25
    7678:	98 2f       	mov	r25, r24
    767a:	88 27       	eor	r24, r24
    767c:	97 95       	ror	r25
    767e:	87 95       	ror	r24
    7680:	2f 5f       	subi	r18, 0xFF	; 255
    7682:	3f 4f       	sbci	r19, 0xFF	; 255
    7684:	f9 01       	movw	r30, r18
    7686:	31 97       	sbiw	r30, 0x01	; 1
    7688:	e4 91       	lpm	r30, Z
    768a:	4e 2f       	mov	r20, r30
    768c:	4f 77       	andi	r20, 0x7F	; 127
    768e:	84 0f       	add	r24, r20
    7690:	91 1d       	adc	r25, r1
       } while (c & 0x80);
    7692:	e7 fd       	sbrc	r30, 7
    7694:	f0 cf       	rjmp	.-32     	; 0x7676 <ReadVarLen+0x26>
    7696:	2d 93       	st	X+, r18
    7698:	3c 93       	st	X, r19
    }


    return value;
}
    769a:	08 95       	ret

0000769c <TriggerCommon>:




void TriggerCommon(Track* track,u8 patch,u8 volume,u8 note){
    769c:	ef 92       	push	r14
    769e:	ff 92       	push	r15
    76a0:	0f 93       	push	r16
    76a2:	1f 93       	push	r17
    76a4:	cf 93       	push	r28
    76a6:	df 93       	push	r29
    76a8:	1f 92       	push	r1
    76aa:	cd b7       	in	r28, 0x3d	; 61
    76ac:	de b7       	in	r29, 0x3e	; 62
    76ae:	7c 01       	movw	r14, r24
    76b0:	16 2f       	mov	r17, r22
		
	bool isFx = (track->flags&TRACK_FLAGS_PRIORITY);
    76b2:	fc 01       	movw	r30, r24
    76b4:	80 81       	ld	r24, Z
    76b6:	08 2f       	mov	r16, r24
    76b8:	00 1f       	adc	r16, r16
    76ba:	00 27       	eor	r16, r16
    76bc:	00 1f       	adc	r16, r16

	track->envelopeStep=0; 
    76be:	17 86       	std	Z+15, r1	; 0x0f
	track->envelopeVol=0xff; 
    76c0:	9f ef       	ldi	r25, 0xFF	; 255
    76c2:	96 87       	std	Z+14, r25	; 0x0e
	track->noteVol=volume;
    76c4:	45 87       	std	Z+13, r20	; 0x0d
	track->patchPlayingTime=0;
    76c6:	14 8a       	std	Z+20, r1	; 0x14
	track->flags&=(~(TRACK_FLAGS_HOLD_ENV|TRACK_FLAGS_SLIDING));
    76c8:	87 7b       	andi	r24, 0xB7	; 183
    76ca:	80 83       	st	Z, r24
	track->tremoloLevel=0;
    76cc:	12 86       	std	Z+10, r1	; 0x0a
	track->tremoloPos=0;
    76ce:	11 86       	std	Z+9, r1	; 0x09
	track->note=note;
    76d0:	21 83       	std	Z+1, r18	; 0x01
	track->loopCount=0;
    76d2:	14 82       	std	Z+4, r1	; 0x04

#if MUSIC_ENGINE == MIDI
	track->expressionVol=DEFAULT_EXPRESSION_VOL;
    76d4:	93 83       	std	Z+3, r25	; 0x03
#endif

	#if SOUND_MIXER == MIXER_TYPE_INLINE

		if(track->channel==3){
    76d6:	82 81       	ldd	r24, Z+2	; 0x02
    76d8:	83 30       	cpi	r24, 0x03	; 3
    76da:	69 f4       	brne	.+26     	; 0x76f6 <TriggerCommon+0x5a>
			//noise channel		
			if(!isFx) patch=note;			
    76dc:	01 11       	cpse	r16, r1
    76de:	01 c0       	rjmp	.+2      	; 0x76e2 <TriggerCommon+0x46>
    76e0:	12 2f       	mov	r17, r18
			mixer.channels.type.noise.barrel=0x0101;				
    76e2:	81 e0       	ldi	r24, 0x01	; 1
    76e4:	91 e0       	ldi	r25, 0x01	; 1
    76e6:	90 93 e5 0c 	sts	0x0CE5, r25
    76ea:	80 93 e4 0c 	sts	0x0CE4, r24
			mixer.channels.type.noise.params=1; //default (15bits,no divider)
    76ee:	81 e0       	ldi	r24, 0x01	; 1
    76f0:	80 93 e3 0c 	sts	0x0CE3, r24
    76f4:	39 c0       	rjmp	.+114    	; 0x7768 <TriggerCommon+0xcc>

		#if SOUND_CHANNEL_5_ENABLE==1		

		}else if(track->channel==4){
    76f6:	84 30       	cpi	r24, 0x04	; 4
    76f8:	69 f5       	brne	.+90     	; 0x7754 <TriggerCommon+0xb8>
				//PCM channel					
				mixer.channels.type.pcm.positionFrac=0;
    76fa:	10 92 eb 0c 	sts	0x0CEB, r1
				const char *pos=(const char*)pgm_read_word(&(patchPointers[patch].pcmData));
    76fe:	80 91 70 0d 	lds	r24, 0x0D70
    7702:	90 91 71 0d 	lds	r25, 0x0D71
    7706:	f9 e0       	ldi	r31, 0x09	; 9
    7708:	6f 9f       	mul	r22, r31
    770a:	80 0d       	add	r24, r0
    770c:	91 1d       	adc	r25, r1
    770e:	11 24       	eor	r1, r1
    7710:	fc 01       	movw	r30, r24
    7712:	31 96       	adiw	r30, 0x01	; 1
    7714:	a5 91       	lpm	r26, Z+
    7716:	b4 91       	lpm	r27, Z
				mixer.channels.type.pcm.position=pos;				
    7718:	b0 93 ed 0c 	sts	0x0CED, r27
    771c:	a0 93 ec 0c 	sts	0x0CEC, r26
				mixer.pcmLoopLenght=pgm_read_word(&(patchPointers[patch].loopEnd))-pgm_read_word(&(patchPointers[patch].loopStart));
    7720:	ac 01       	movw	r20, r24
    7722:	49 5f       	subi	r20, 0xF9	; 249
    7724:	5f 4f       	sbci	r21, 0xFF	; 255
    7726:	fa 01       	movw	r30, r20
    7728:	65 91       	lpm	r22, Z+
    772a:	74 91       	lpm	r23, Z
    772c:	05 96       	adiw	r24, 0x05	; 5
    772e:	fc 01       	movw	r30, r24
    7730:	85 91       	lpm	r24, Z+
    7732:	94 91       	lpm	r25, Z
    7734:	68 1b       	sub	r22, r24
    7736:	79 0b       	sbc	r23, r25
    7738:	70 93 ef 0c 	sts	0x0CEF, r23
    773c:	60 93 ee 0c 	sts	0x0CEE, r22
				mixer.pcmLoopEnd=pos+pgm_read_word(&(patchPointers[patch].loopEnd));
    7740:	fa 01       	movw	r30, r20
    7742:	85 91       	lpm	r24, Z+
    7744:	94 91       	lpm	r25, Z
    7746:	a8 0f       	add	r26, r24
    7748:	b9 1f       	adc	r27, r25
    774a:	b0 93 f1 0c 	sts	0x0CF1, r27
    774e:	a0 93 f0 0c 	sts	0x0CF0, r26
    7752:	05 c0       	rjmp	.+10     	; 0x775e <TriggerCommon+0xc2>
				SetMixerNote(track->channel,note);
		#endif	

		}else{					
			//wave channels					
			SetMixerWave(track->channel,0);//default wave
    7754:	60 e0       	ldi	r22, 0x00	; 0
    7756:	29 83       	std	Y+1, r18	; 0x01
    7758:	0e 94 9d 3e 	call	0x7d3a	; 0x7d3a <SetMixerWave>
			SetMixerNote(track->channel,note);
    775c:	29 81       	ldd	r18, Y+1	; 0x01
    775e:	62 2f       	mov	r22, r18
    7760:	f7 01       	movw	r30, r14
    7762:	82 81       	ldd	r24, Z+2	; 0x02
    7764:	0e 94 86 3e 	call	0x7d0c	; 0x7d0c <SetMixerNote>
		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
		track->fxPatchNo=patch;
    7768:	f7 01       	movw	r30, r14

		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
    776a:	00 23       	and	r16, r16
    776c:	11 f0       	breq	.+4      	; 0x7772 <TriggerCommon+0xd6>
		track->fxPatchNo=patch;
    776e:	11 8b       	std	Z+17, r17	; 0x11
    7770:	01 c0       	rjmp	.+2      	; 0x7774 <TriggerCommon+0xd8>
	}else{
		track->patchNo=patch;	
    7772:	10 8b       	std	Z+16, r17	; 0x10
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
    7774:	e0 91 70 0d 	lds	r30, 0x0D70
    7778:	f0 91 71 0d 	lds	r31, 0x0D71
    777c:	39 e0       	ldi	r19, 0x09	; 9
    777e:	13 9f       	mul	r17, r19
    7780:	e0 0d       	add	r30, r0
    7782:	f1 1d       	adc	r31, r1
    7784:	11 24       	eor	r1, r1
    7786:	33 96       	adiw	r30, 0x03	; 3
    7788:	85 91       	lpm	r24, Z+
    778a:	94 91       	lpm	r25, Z
	if(pos==NULL){
		track->patchCommandStreamPos=NULL;
    778c:	f7 01       	movw	r30, r14
	}else{
		track->patchNo=patch;	
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
	if(pos==NULL){
    778e:	00 97       	sbiw	r24, 0x00	; 0
    7790:	19 f4       	brne	.+6      	; 0x7798 <TriggerCommon+0xfc>
		track->patchCommandStreamPos=NULL;
    7792:	16 8a       	std	Z+22, r1	; 0x16
    7794:	15 8a       	std	Z+21, r1	; 0x15
    7796:	08 c0       	rjmp	.+16     	; 0x77a8 <TriggerCommon+0x10c>
	}else{
		track->patchCurrDeltaTime=0;
    7798:	13 8a       	std	Z+19, r1	; 0x13
		track->patchNextDeltaTime=pgm_read_byte(pos++);
    779a:	fc 01       	movw	r30, r24
    779c:	24 91       	lpm	r18, Z
    779e:	f7 01       	movw	r30, r14
    77a0:	22 8b       	std	Z+18, r18	; 0x12
    77a2:	01 96       	adiw	r24, 0x01	; 1
		track->patchCommandStreamPos=pos;
    77a4:	96 8b       	std	Z+22, r25	; 0x16
    77a6:	85 8b       	std	Z+21, r24	; 0x15
	}

}
    77a8:	0f 90       	pop	r0
    77aa:	df 91       	pop	r29
    77ac:	cf 91       	pop	r28
    77ae:	1f 91       	pop	r17
    77b0:	0f 91       	pop	r16
    77b2:	ff 90       	pop	r15
    77b4:	ef 90       	pop	r14
    77b6:	08 95       	ret

000077b8 <TriggerFx>:

/* Trigger a sound effect.
 * Method allocates the channel based on priority.
 * Retrig: if this fx if already playing on a track, reuse same track.
 */
void TriggerFx(unsigned char patch,unsigned char volume,bool retrig){
    77b8:	cf 93       	push	r28
    77ba:	df 93       	push	r29
	unsigned char channel;
	
	unsigned char type=(unsigned char)pgm_read_byte(&(patchPointers[patch].type));
    77bc:	e0 91 70 0d 	lds	r30, 0x0D70
    77c0:	f0 91 71 0d 	lds	r31, 0x0D71
    77c4:	99 e0       	ldi	r25, 0x09	; 9
    77c6:	89 9f       	mul	r24, r25
    77c8:	e0 0d       	add	r30, r0
    77ca:	f1 1d       	adc	r31, r1
    77cc:	11 24       	eor	r1, r1
    77ce:	e4 91       	lpm	r30, Z

	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
    77d0:	e1 30       	cpi	r30, 0x01	; 1
    77d2:	e9 f0       	breq	.+58     	; 0x780e <TriggerFx+0x56>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
    77d4:	e2 30       	cpi	r30, 0x02	; 2
    77d6:	e9 f0       	breq	.+58     	; 0x7812 <TriggerFx+0x5a>
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
    77d8:	20 91 12 0d 	lds	r18, 0x0D12
    77dc:	27 ff       	sbrs	r18, 7
    77de:	1d c0       	rjmp	.+58     	; 0x781a <TriggerFx+0x62>
    77e0:	20 91 23 0d 	lds	r18, 0x0D23
    77e4:	28 13       	cpse	r18, r24
    77e6:	02 c0       	rjmp	.+4      	; 0x77ec <TriggerFx+0x34>
    77e8:	41 11       	cpse	r20, r1
    77ea:	17 c0       	rjmp	.+46     	; 0x781a <TriggerFx+0x62>
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
    77ec:	20 91 29 0d 	lds	r18, 0x0D29
    77f0:	27 ff       	sbrs	r18, 7
    77f2:	11 c0       	rjmp	.+34     	; 0x7816 <TriggerFx+0x5e>
    77f4:	20 91 3a 0d 	lds	r18, 0x0D3A
    77f8:	28 13       	cpse	r18, r24
    77fa:	02 c0       	rjmp	.+4      	; 0x7800 <TriggerFx+0x48>
    77fc:	41 11       	cpse	r20, r1
    77fe:	0b c0       	rjmp	.+22     	; 0x7816 <TriggerFx+0x5e>
		channel=2;
	}else{
		//both channels have fx playing, use the oldest one
		if(tracks[1].patchPlayingTime>tracks[2].patchPlayingTime){
    7800:	20 91 26 0d 	lds	r18, 0x0D26
    7804:	90 91 3d 0d 	lds	r25, 0x0D3D
    7808:	92 17       	cp	r25, r18
    780a:	28 f4       	brcc	.+10     	; 0x7816 <TriggerFx+0x5e>
    780c:	06 c0       	rjmp	.+12     	; 0x781a <TriggerFx+0x62>
	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
		//noise or PCM channel fx		
		channel=3;
    780e:	c3 e0       	ldi	r28, 0x03	; 3
    7810:	05 c0       	rjmp	.+10     	; 0x781c <TriggerFx+0x64>
	}else if(type==2){
		channel=4;
    7812:	c4 e0       	ldi	r28, 0x04	; 4
    7814:	03 c0       	rjmp	.+6      	; 0x781c <TriggerFx+0x64>
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
		channel=2;
    7816:	c2 e0       	ldi	r28, 0x02	; 2
    7818:	01 c0       	rjmp	.+2      	; 0x781c <TriggerFx+0x64>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
    781a:	c1 e0       	ldi	r28, 0x01	; 1
			channel=2;
		}
	}				

	Track* track=&tracks[channel];
	track->flags=TRACK_FLAGS_PRIORITY; //priority=1;
    781c:	97 e1       	ldi	r25, 0x17	; 23
    781e:	c9 9f       	mul	r28, r25
    7820:	e0 01       	movw	r28, r0
    7822:	11 24       	eor	r1, r1
    7824:	c5 50       	subi	r28, 0x05	; 5
    7826:	d3 4f       	sbci	r29, 0xF3	; 243
    7828:	90 e8       	ldi	r25, 0x80	; 128
    782a:	98 83       	st	Y, r25
	track->patchCommandStreamPos = NULL;
    782c:	1e 8a       	std	Y+22, r1	; 0x16
    782e:	1d 8a       	std	Y+21, r1	; 0x15
	TriggerCommon(track,patch,volume,80);
    7830:	20 e5       	ldi	r18, 0x50	; 80
    7832:	46 2f       	mov	r20, r22
    7834:	68 2f       	mov	r22, r24
    7836:	ce 01       	movw	r24, r28
    7838:	0e 94 4e 3b 	call	0x769c	; 0x769c <TriggerCommon>
	track->flags|=TRACK_FLAGS_PLAYING;
    783c:	88 81       	ld	r24, Y
    783e:	80 62       	ori	r24, 0x20	; 32
    7840:	88 83       	st	Y, r24
}
    7842:	df 91       	pop	r29
    7844:	cf 91       	pop	r28
    7846:	08 95       	ret

00007848 <TriggerNote>:


void TriggerNote(unsigned char channel,unsigned char patch,unsigned char note,unsigned char volume){
    7848:	cf 93       	push	r28
    784a:	df 93       	push	r29
	Track* track=&tracks[channel];

	//allow only other music notes 
	if((track->flags&TRACK_FLAGS_PLAYING)==0 || (track->flags&TRACK_FLAGS_PRIORITY)==0){
    784c:	a8 2f       	mov	r26, r24
    784e:	b0 e0       	ldi	r27, 0x00	; 0
    7850:	97 e1       	ldi	r25, 0x17	; 23
    7852:	89 9f       	mul	r24, r25
    7854:	f0 01       	movw	r30, r0
    7856:	11 24       	eor	r1, r1
    7858:	e5 50       	subi	r30, 0x05	; 5
    785a:	f3 4f       	sbci	r31, 0xF3	; 243
    785c:	80 81       	ld	r24, Z
    785e:	85 ff       	sbrs	r24, 5
    7860:	02 c0       	rjmp	.+4      	; 0x7866 <TriggerNote+0x1e>
    7862:	87 fd       	sbrc	r24, 7
    7864:	2e c0       	rjmp	.+92     	; 0x78c2 <TriggerNote+0x7a>
			
		if(volume==0){ //note-off received
    7866:	21 11       	cpse	r18, r1
    7868:	18 c0       	rjmp	.+48     	; 0x789a <TriggerNote+0x52>

			
			//cut note if there's no envelope & no note hold
			if(track->envelopeStep==0 && !(track->flags&TRACK_FLAGS_HOLD_ENV)){
    786a:	97 e1       	ldi	r25, 0x17	; 23
    786c:	9a 9f       	mul	r25, r26
    786e:	f0 01       	movw	r30, r0
    7870:	9b 9f       	mul	r25, r27
    7872:	f0 0d       	add	r31, r0
    7874:	11 24       	eor	r1, r1
    7876:	e5 50       	subi	r30, 0x05	; 5
    7878:	f3 4f       	sbci	r31, 0xF3	; 243
    787a:	97 85       	ldd	r25, Z+15	; 0x0f
    787c:	91 11       	cpse	r25, r1
    787e:	02 c0       	rjmp	.+4      	; 0x7884 <TriggerNote+0x3c>
    7880:	86 ff       	sbrs	r24, 6
				track->noteVol=0;
    7882:	15 86       	std	Z+13, r1	; 0x0d
			}

			track->flags&=(~TRACK_FLAGS_HOLD_ENV);//patchEnvelopeHold=false;
    7884:	97 e1       	ldi	r25, 0x17	; 23
    7886:	9a 9f       	mul	r25, r26
    7888:	f0 01       	movw	r30, r0
    788a:	9b 9f       	mul	r25, r27
    788c:	f0 0d       	add	r31, r0
    788e:	11 24       	eor	r1, r1
    7890:	e5 50       	subi	r30, 0x05	; 5
    7892:	f3 4f       	sbci	r31, 0xF3	; 243
    7894:	8f 7b       	andi	r24, 0xBF	; 191
    7896:	80 83       	st	Z, r24
    7898:	14 c0       	rjmp	.+40     	; 0x78c2 <TriggerNote+0x7a>
    789a:	82 2f       	mov	r24, r18
    789c:	24 2f       	mov	r18, r20
		}else{
		
			track->flags=0;//&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    789e:	97 e1       	ldi	r25, 0x17	; 23
    78a0:	9a 9f       	mul	r25, r26
    78a2:	e0 01       	movw	r28, r0
    78a4:	9b 9f       	mul	r25, r27
    78a6:	d0 0d       	add	r29, r0
    78a8:	11 24       	eor	r1, r1
    78aa:	c5 50       	subi	r28, 0x05	; 5
    78ac:	d3 4f       	sbci	r29, 0xF3	; 243
    78ae:	18 82       	st	Y, r1
			track->patchCommandStreamPos = NULL;
    78b0:	1e 8a       	std	Y+22, r1	; 0x16
    78b2:	1d 8a       	std	Y+21, r1	; 0x15
			TriggerCommon(track,patch,volume,note);
    78b4:	48 2f       	mov	r20, r24
    78b6:	ce 01       	movw	r24, r28
    78b8:	0e 94 4e 3b 	call	0x769c	; 0x769c <TriggerCommon>
			track->flags|=TRACK_FLAGS_PLAYING;
    78bc:	88 81       	ld	r24, Y
    78be:	80 62       	ori	r24, 0x20	; 32
    78c0:	88 83       	st	Y, r24
		}

	}
}
    78c2:	df 91       	pop	r29
    78c4:	cf 91       	pop	r28
    78c6:	08 95       	ret

000078c8 <ProcessMusic>:
	}

#endif


void ProcessMusic(void){
    78c8:	6f 92       	push	r6
    78ca:	7f 92       	push	r7
    78cc:	8f 92       	push	r8
    78ce:	9f 92       	push	r9
    78d0:	af 92       	push	r10
    78d2:	bf 92       	push	r11
    78d4:	cf 92       	push	r12
    78d6:	df 92       	push	r13
    78d8:	ef 92       	push	r14
    78da:	ff 92       	push	r15
    78dc:	0f 93       	push	r16
    78de:	1f 93       	push	r17
    78e0:	cf 93       	push	r28
    78e2:	df 93       	push	r29
    78e4:	cb ef       	ldi	r28, 0xFB	; 251
    78e6:	dc e0       	ldi	r29, 0x0C	; 12
    78e8:	00 ed       	ldi	r16, 0xD0	; 208
    78ea:	1c e0       	ldi	r17, 0x0C	; 12
    78ec:	d8 01       	movw	r26, r16
    78ee:	9e 01       	movw	r18, r28
    78f0:	40 e0       	ldi	r20, 0x00	; 0
    78f2:	50 e0       	ldi	r21, 0x00	; 0
    78f4:	ca 01       	movw	r24, r20
    78f6:	85 50       	subi	r24, 0x05	; 5
    78f8:	93 4f       	sbci	r25, 0xF3	; 243
    78fa:	6c 01       	movw	r12, r24
	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//update envelope
		if(track->envelopeStep!=0){
    78fc:	fc 01       	movw	r30, r24
    78fe:	87 85       	ldd	r24, Z+15	; 0x0f
    7900:	88 23       	and	r24, r24
    7902:	91 f0       	breq	.+36     	; 0x7928 <ProcessMusic+0x60>
			vol=track->envelopeVol+track->envelopeStep;		
    7904:	66 85       	ldd	r22, Z+14	; 0x0e
    7906:	99 27       	eor	r25, r25
    7908:	87 fd       	sbrc	r24, 7
    790a:	90 95       	com	r25
    790c:	86 0f       	add	r24, r22
    790e:	91 1d       	adc	r25, r1
    7910:	8f 3f       	cpi	r24, 0xFF	; 255
    7912:	91 05       	cpc	r25, r1
    7914:	19 f0       	breq	.+6      	; 0x791c <ProcessMusic+0x54>
    7916:	14 f0       	brlt	.+4      	; 0x791c <ProcessMusic+0x54>
    7918:	8f ef       	ldi	r24, 0xFF	; 255
    791a:	90 e0       	ldi	r25, 0x00	; 0
    791c:	97 ff       	sbrs	r25, 7
    791e:	02 c0       	rjmp	.+4      	; 0x7924 <ProcessMusic+0x5c>
    7920:	80 e0       	ldi	r24, 0x00	; 0
    7922:	90 e0       	ldi	r25, 0x00	; 0
			if(vol<0){
				vol=0;			
			}else if(vol>0xff){
				vol=0xff;						
			}
			track->envelopeVol=vol;
    7924:	f6 01       	movw	r30, r12
    7926:	86 87       	std	Z+14, r24	; 0x0e
		}

		//if volumes reaches zero and no more patch command, explicitly end playing on track
		//if(vol==0 && track->patchCommandStreamPos==NULL) track->flags&=~(TRACK_FLAGS_PLAYING);

		if(track->flags & TRACK_FLAGS_SLIDING){
    7928:	f9 01       	movw	r30, r18
    792a:	f0 80       	ld	r15, Z
    792c:	f3 fe       	sbrs	r15, 3
    792e:	2a c0       	rjmp	.+84     	; 0x7984 <ProcessMusic+0xbc>

			mixer.channels.all[trackNo].step+=track->slideStep;
    7930:	65 81       	ldd	r22, Z+5	; 0x05
    7932:	76 81       	ldd	r23, Z+6	; 0x06
    7934:	11 96       	adiw	r26, 0x01	; 1
    7936:	8d 91       	ld	r24, X+
    7938:	9c 91       	ld	r25, X
    793a:	12 97       	sbiw	r26, 0x02	; 2
    793c:	86 0f       	add	r24, r22
    793e:	97 1f       	adc	r25, r23
    7940:	12 96       	adiw	r26, 0x02	; 2
    7942:	9c 93       	st	X, r25
    7944:	8e 93       	st	-X, r24
    7946:	11 97       	sbiw	r26, 0x01	; 1
			u16 tStep=pgm_read_word(&(steptable[track->slideNote]));
    7948:	f6 01       	movw	r30, r12
    794a:	e7 80       	ldd	r14, Z+7	; 0x07
    794c:	ee 2d       	mov	r30, r14
    794e:	f0 e0       	ldi	r31, 0x00	; 0
    7950:	ee 0f       	add	r30, r30
    7952:	ff 1f       	adc	r31, r31
    7954:	e8 5f       	subi	r30, 0xF8	; 248
    7956:	f1 48       	sbci	r31, 0x81	; 129
    7958:	c5 90       	lpm	r12, Z+
    795a:	d4 90       	lpm	r13, Z

			if((track->slideStep>0 && mixer.channels.all[trackNo].step>=tStep) || 
    795c:	16 16       	cp	r1, r22
    795e:	17 06       	cpc	r1, r23
    7960:	24 f4       	brge	.+8      	; 0x796a <ProcessMusic+0xa2>
    7962:	8c 15       	cp	r24, r12
    7964:	9d 05       	cpc	r25, r13
    7966:	30 f4       	brcc	.+12     	; 0x7974 <ProcessMusic+0xac>
    7968:	0d c0       	rjmp	.+26     	; 0x7984 <ProcessMusic+0xbc>
    796a:	67 2b       	or	r22, r23
    796c:	59 f0       	breq	.+22     	; 0x7984 <ProcessMusic+0xbc>
				(track->slideStep<0 && mixer.channels.all[trackNo].step<=tStep))
    796e:	c8 16       	cp	r12, r24
    7970:	d9 06       	cpc	r13, r25
    7972:	40 f0       	brcs	.+16     	; 0x7984 <ProcessMusic+0xbc>
			{					
				mixer.channels.all[trackNo].step = tStep;					
    7974:	12 96       	adiw	r26, 0x02	; 2
    7976:	dc 92       	st	X, r13
    7978:	ce 92       	st	-X, r12
    797a:	11 97       	sbiw	r26, 0x01	; 1
				track->flags &= ~(TRACK_FLAGS_SLIDING);	
    797c:	8f 2d       	mov	r24, r15
    797e:	87 7f       	andi	r24, 0xF7	; 247
    7980:	f9 01       	movw	r30, r18
    7982:	80 83       	st	Z, r24
    7984:	49 5e       	subi	r20, 0xE9	; 233
    7986:	5f 4f       	sbci	r21, 0xFF	; 255
    7988:	29 5e       	subi	r18, 0xE9	; 233
    798a:	3f 4f       	sbci	r19, 0xFF	; 255
    798c:	16 96       	adiw	r26, 0x06	; 6
	u8 channel;
	Track* track;


	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    798e:	43 37       	cpi	r20, 0x73	; 115
    7990:	51 05       	cpc	r21, r1
    7992:	09 f0       	breq	.+2      	; 0x7996 <ProcessMusic+0xce>
    7994:	af cf       	rjmp	.-162    	; 0x78f4 <ProcessMusic+0x2c>
	}



	//Process song MIDI notes
	if(playSong){
    7996:	80 91 ce 0c 	lds	r24, 0x0CCE
    799a:	88 23       	and	r24, r24
    799c:	09 f4       	brne	.+2      	; 0x79a0 <ProcessMusic+0xd8>
    799e:	cc c0       	rjmp	.+408    	; 0x7b38 <ProcessMusic+0x270>
							}else if(c1==CONTROLER_EXPRESSION){
								tracks[channel].expressionVol=c2<<1;
							}else if(c1==CONTROLER_TREMOLO){
								tracks[channel].tremoloLevel=c2<<1;
							}else if(c1==CONTROLER_TREMOLO_RATE){
								tracks[channel].tremoloRate=c2<<1;
    79a0:	57 e1       	ldi	r21, 0x17	; 23
    79a2:	f5 2e       	mov	r15, r21
	if(playSong){
	
		#if MUSIC_ENGINE == MIDI
			
			//process all simultaneous events
			while(currDeltaTime==nextDeltaTime){
    79a4:	80 91 6e 0d 	lds	r24, 0x0D6E
    79a8:	90 91 6f 0d 	lds	r25, 0x0D6F
    79ac:	20 91 74 0d 	lds	r18, 0x0D74
    79b0:	30 91 75 0d 	lds	r19, 0x0D75
    79b4:	82 17       	cp	r24, r18
    79b6:	93 07       	cpc	r25, r19
    79b8:	09 f0       	breq	.+2      	; 0x79bc <ProcessMusic+0xf4>
    79ba:	b9 c0       	rjmp	.+370    	; 0x7b2e <ProcessMusic+0x266>

				c1=pgm_read_byte(songPos++);
    79bc:	20 91 77 0d 	lds	r18, 0x0D77
    79c0:	30 91 78 0d 	lds	r19, 0x0D78
    79c4:	b9 01       	movw	r22, r18
    79c6:	6f 5f       	subi	r22, 0xFF	; 255
    79c8:	7f 4f       	sbci	r23, 0xFF	; 255
    79ca:	70 93 78 0d 	sts	0x0D78, r23
    79ce:	60 93 77 0d 	sts	0x0D77, r22
    79d2:	f9 01       	movw	r30, r18
    79d4:	44 91       	lpm	r20, Z
			
				if(c1==0xff){
    79d6:	4f 3f       	cpi	r20, 0xFF	; 255
    79d8:	79 f5       	brne	.+94     	; 0x7a38 <ProcessMusic+0x170>
					//META data type event
					c1=pgm_read_byte(songPos++);
    79da:	a9 01       	movw	r20, r18
    79dc:	4e 5f       	subi	r20, 0xFE	; 254
    79de:	5f 4f       	sbci	r21, 0xFF	; 255
    79e0:	50 93 78 0d 	sts	0x0D78, r21
    79e4:	40 93 77 0d 	sts	0x0D77, r20
    79e8:	fb 01       	movw	r30, r22
    79ea:	64 91       	lpm	r22, Z

				
					if(c1==0x2f){ //end of song
    79ec:	6f 32       	cpi	r22, 0x2F	; 47
    79ee:	19 f4       	brne	.+6      	; 0x79f6 <ProcessMusic+0x12e>
						playSong=false;
    79f0:	10 92 ce 0c 	sts	0x0CCE, r1
						break;	
    79f4:	9c c0       	rjmp	.+312    	; 0x7b2e <ProcessMusic+0x266>
					}else if(c1==0x6){ //marker
    79f6:	66 30       	cpi	r22, 0x06	; 6
    79f8:	09 f0       	breq	.+2      	; 0x79fc <ProcessMusic+0x134>
    79fa:	8c c0       	rjmp	.+280    	; 0x7b14 <ProcessMusic+0x24c>
						c1=pgm_read_byte(songPos++); //read len
    79fc:	fa 01       	movw	r30, r20
    79fe:	44 91       	lpm	r20, Z
						c2=pgm_read_byte(songPos++); //read data
    7a00:	c9 01       	movw	r24, r18
    7a02:	04 96       	adiw	r24, 0x04	; 4
    7a04:	90 93 78 0d 	sts	0x0D78, r25
    7a08:	80 93 77 0d 	sts	0x0D77, r24
				
					if(c1==0x2f){ //end of song
						playSong=false;
						break;	
					}else if(c1==0x6){ //marker
						c1=pgm_read_byte(songPos++); //read len
    7a0c:	f9 01       	movw	r30, r18
    7a0e:	33 96       	adiw	r30, 0x03	; 3
						c2=pgm_read_byte(songPos++); //read data
    7a10:	e4 91       	lpm	r30, Z
						if(c2=='S'){ //loop start
    7a12:	e3 35       	cpi	r30, 0x53	; 83
    7a14:	29 f4       	brne	.+10     	; 0x7a20 <ProcessMusic+0x158>
							loopStart=songPos;
    7a16:	90 93 7a 0d 	sts	0x0D7A, r25
    7a1a:	80 93 79 0d 	sts	0x0D79, r24
    7a1e:	7a c0       	rjmp	.+244    	; 0x7b14 <ProcessMusic+0x24c>
						}else if(c2=='E'){//loop end
    7a20:	e5 34       	cpi	r30, 0x45	; 69
    7a22:	09 f0       	breq	.+2      	; 0x7a26 <ProcessMusic+0x15e>
    7a24:	77 c0       	rjmp	.+238    	; 0x7b14 <ProcessMusic+0x24c>
							songPos=loopStart;
    7a26:	80 91 79 0d 	lds	r24, 0x0D79
    7a2a:	90 91 7a 0d 	lds	r25, 0x0D7A
    7a2e:	90 93 78 0d 	sts	0x0D78, r25
    7a32:	80 93 77 0d 	sts	0x0D77, r24
    7a36:	6e c0       	rjmp	.+220    	; 0x7b14 <ProcessMusic+0x24c>
					}
				

				}else{

					if(c1&0x80) lastStatus=c1;					
    7a38:	47 fd       	sbrc	r20, 7
    7a3a:	40 93 72 0d 	sts	0x0D72, r20
					channel=lastStatus&0x0f;
    7a3e:	90 91 72 0d 	lds	r25, 0x0D72
    7a42:	89 2f       	mov	r24, r25
    7a44:	8f 70       	andi	r24, 0x0F	; 15
				
					//get next data byte
					//Note: maybe we should not advance the cursor
					//in case we receive an unsupported command				
					if(c1&0x80) c1=pgm_read_byte(songPos++); 
    7a46:	47 ff       	sbrs	r20, 7
    7a48:	08 c0       	rjmp	.+16     	; 0x7a5a <ProcessMusic+0x192>
    7a4a:	2e 5f       	subi	r18, 0xFE	; 254
    7a4c:	3f 4f       	sbci	r19, 0xFF	; 255
    7a4e:	30 93 78 0d 	sts	0x0D78, r19
    7a52:	20 93 77 0d 	sts	0x0D77, r18
    7a56:	fb 01       	movw	r30, r22
    7a58:	44 91       	lpm	r20, Z

					switch(lastStatus&0xf0){
    7a5a:	90 7f       	andi	r25, 0xF0	; 240
    7a5c:	90 3b       	cpi	r25, 0xB0	; 176
    7a5e:	e1 f0       	breq	.+56     	; 0x7a98 <ProcessMusic+0x1d0>
    7a60:	90 3c       	cpi	r25, 0xC0	; 192
    7a62:	09 f4       	brne	.+2      	; 0x7a66 <ProcessMusic+0x19e>
    7a64:	51 c0       	rjmp	.+162    	; 0x7b08 <ProcessMusic+0x240>
    7a66:	90 39       	cpi	r25, 0x90	; 144
    7a68:	09 f0       	breq	.+2      	; 0x7a6c <ProcessMusic+0x1a4>
    7a6a:	54 c0       	rjmp	.+168    	; 0x7b14 <ProcessMusic+0x24c>

						//note-on
						case 0x90:
							//c1 = note						
							c2=pgm_read_byte(songPos++)<<1; //get volume
    7a6c:	e0 91 77 0d 	lds	r30, 0x0D77
    7a70:	f0 91 78 0d 	lds	r31, 0x0D78
    7a74:	9f 01       	movw	r18, r30
    7a76:	2f 5f       	subi	r18, 0xFF	; 255
    7a78:	3f 4f       	sbci	r19, 0xFF	; 255
    7a7a:	30 93 78 0d 	sts	0x0D78, r19
    7a7e:	20 93 77 0d 	sts	0x0D77, r18
    7a82:	24 91       	lpm	r18, Z
    7a84:	22 0f       	add	r18, r18
						
							if(tracks[channel].flags|TRACK_FLAGS_ALLOCATED){ //allocated==true
								TriggerNote(channel,tracks[channel].patchNo,c1,c2);
    7a86:	f8 9e       	mul	r15, r24
    7a88:	f0 01       	movw	r30, r0
    7a8a:	11 24       	eor	r1, r1
    7a8c:	e5 50       	subi	r30, 0x05	; 5
    7a8e:	f3 4f       	sbci	r31, 0xF3	; 243
    7a90:	60 89       	ldd	r22, Z+16	; 0x10
    7a92:	0e 94 24 3c 	call	0x7848	; 0x7848 <TriggerNote>
    7a96:	3e c0       	rjmp	.+124    	; 0x7b14 <ProcessMusic+0x24c>
							break;

						//controllers
						case 0xb0:
							///c1 = controller #
							c2=pgm_read_byte(songPos++); //get controller value
    7a98:	e0 91 77 0d 	lds	r30, 0x0D77
    7a9c:	f0 91 78 0d 	lds	r31, 0x0D78
    7aa0:	9f 01       	movw	r18, r30
    7aa2:	2f 5f       	subi	r18, 0xFF	; 255
    7aa4:	3f 4f       	sbci	r19, 0xFF	; 255
    7aa6:	30 93 78 0d 	sts	0x0D78, r19
    7aaa:	20 93 77 0d 	sts	0x0D77, r18
    7aae:	e4 91       	lpm	r30, Z
						
							if(c1==CONTROLER_VOL){
    7ab0:	47 30       	cpi	r20, 0x07	; 7
    7ab2:	49 f4       	brne	.+18     	; 0x7ac6 <ProcessMusic+0x1fe>
								tracks[channel].trackVol=c2<<1;
    7ab4:	f8 9e       	mul	r15, r24
    7ab6:	d0 01       	movw	r26, r0
    7ab8:	11 24       	eor	r1, r1
    7aba:	a5 50       	subi	r26, 0x05	; 5
    7abc:	b3 4f       	sbci	r27, 0xF3	; 243
    7abe:	ee 0f       	add	r30, r30
    7ac0:	1c 96       	adiw	r26, 0x0c	; 12
    7ac2:	ec 93       	st	X, r30
    7ac4:	27 c0       	rjmp	.+78     	; 0x7b14 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_EXPRESSION){
    7ac6:	4b 30       	cpi	r20, 0x0B	; 11
    7ac8:	49 f4       	brne	.+18     	; 0x7adc <ProcessMusic+0x214>
								tracks[channel].expressionVol=c2<<1;
    7aca:	f8 9e       	mul	r15, r24
    7acc:	d0 01       	movw	r26, r0
    7ace:	11 24       	eor	r1, r1
    7ad0:	a5 50       	subi	r26, 0x05	; 5
    7ad2:	b3 4f       	sbci	r27, 0xF3	; 243
    7ad4:	ee 0f       	add	r30, r30
    7ad6:	13 96       	adiw	r26, 0x03	; 3
    7ad8:	ec 93       	st	X, r30
    7ada:	1c c0       	rjmp	.+56     	; 0x7b14 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO){
    7adc:	4c 35       	cpi	r20, 0x5C	; 92
    7ade:	49 f4       	brne	.+18     	; 0x7af2 <ProcessMusic+0x22a>
								tracks[channel].tremoloLevel=c2<<1;
    7ae0:	f8 9e       	mul	r15, r24
    7ae2:	d0 01       	movw	r26, r0
    7ae4:	11 24       	eor	r1, r1
    7ae6:	a5 50       	subi	r26, 0x05	; 5
    7ae8:	b3 4f       	sbci	r27, 0xF3	; 243
    7aea:	ee 0f       	add	r30, r30
    7aec:	1a 96       	adiw	r26, 0x0a	; 10
    7aee:	ec 93       	st	X, r30
    7af0:	11 c0       	rjmp	.+34     	; 0x7b14 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO_RATE){
    7af2:	44 36       	cpi	r20, 0x64	; 100
    7af4:	79 f4       	brne	.+30     	; 0x7b14 <ProcessMusic+0x24c>
								tracks[channel].tremoloRate=c2<<1;
    7af6:	f8 9e       	mul	r15, r24
    7af8:	d0 01       	movw	r26, r0
    7afa:	11 24       	eor	r1, r1
    7afc:	a5 50       	subi	r26, 0x05	; 5
    7afe:	b3 4f       	sbci	r27, 0xF3	; 243
    7b00:	ee 0f       	add	r30, r30
    7b02:	1b 96       	adiw	r26, 0x0b	; 11
    7b04:	ec 93       	st	X, r30
    7b06:	06 c0       	rjmp	.+12     	; 0x7b14 <ProcessMusic+0x24c>
							break;

						//program change
						case 0xc0:
							// c1 = patch #						
							tracks[channel].patchNo=c1;
    7b08:	f8 9e       	mul	r15, r24
    7b0a:	f0 01       	movw	r30, r0
    7b0c:	11 24       	eor	r1, r1
    7b0e:	e5 50       	subi	r30, 0x05	; 5
    7b10:	f3 4f       	sbci	r31, 0xF3	; 243
    7b12:	40 8b       	std	Z+16, r20	; 0x10


				}//end if(c1==0xff)

				//read next delta time
				nextDeltaTime=ReadVarLen(&songPos);			
    7b14:	87 e7       	ldi	r24, 0x77	; 119
    7b16:	9d e0       	ldi	r25, 0x0D	; 13
    7b18:	0e 94 28 3b 	call	0x7650	; 0x7650 <ReadVarLen>
    7b1c:	90 93 75 0d 	sts	0x0D75, r25
    7b20:	80 93 74 0d 	sts	0x0D74, r24
				currDeltaTime=0;
    7b24:	10 92 6f 0d 	sts	0x0D6F, r1
    7b28:	10 92 6e 0d 	sts	0x0D6E, r1
    7b2c:	3b cf       	rjmp	.-394    	; 0x79a4 <ProcessMusic+0xdc>
					}
				#endif

			}//end while
		
			currDeltaTime++;
    7b2e:	01 96       	adiw	r24, 0x01	; 1
    7b30:	90 93 6f 0d 	sts	0x0D6F, r25
    7b34:	80 93 6e 0d 	sts	0x0D6E, r24
    7b38:	94 e0       	ldi	r25, 0x04	; 4
    7b3a:	a9 2e       	mov	r10, r25
    7b3c:	9d e0       	ldi	r25, 0x0D	; 13
    7b3e:	b9 2e       	mov	r11, r25
    7b40:	2e e0       	ldi	r18, 0x0E	; 14
    7b42:	c2 2e       	mov	r12, r18
    7b44:	2d e0       	ldi	r18, 0x0D	; 13
    7b46:	d2 2e       	mov	r13, r18
    7b48:	3f e0       	ldi	r19, 0x0F	; 15
    7b4a:	e3 2e       	mov	r14, r19
    7b4c:	3d e0       	ldi	r19, 0x0D	; 13
    7b4e:	f3 2e       	mov	r15, r19
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    7b50:	66 24       	eor	r6, r6
    7b52:	6a 94       	dec	r6
    7b54:	71 2c       	mov	r7, r1
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//process patch command stream
		if((track->flags & TRACK_FLAGS_PLAYING) && (track->patchCommandStreamPos!=NULL) && ((track->flags & TRACK_FLAGS_HOLD_ENV)==0)){
    7b56:	88 81       	ld	r24, Y
    7b58:	85 ff       	sbrs	r24, 5
    7b5a:	42 c0       	rjmp	.+132    	; 0x7be0 <ProcessMusic+0x318>
    7b5c:	2d 89       	ldd	r18, Y+21	; 0x15
    7b5e:	3e 89       	ldd	r19, Y+22	; 0x16
    7b60:	23 2b       	or	r18, r19
    7b62:	09 f4       	brne	.+2      	; 0x7b66 <ProcessMusic+0x29e>
    7b64:	3d c0       	rjmp	.+122    	; 0x7be0 <ProcessMusic+0x318>
    7b66:	86 fd       	sbrc	r24, 6
    7b68:	3b c0       	rjmp	.+118    	; 0x7be0 <ProcessMusic+0x318>
    7b6a:	47 01       	movw	r8, r14
    7b6c:	f2 e0       	ldi	r31, 0x02	; 2
    7b6e:	8f 1a       	sub	r8, r31
    7b70:	91 08       	sbc	r9, r1

			//process all simultaneous events
			while(track->patchCurrDeltaTime==track->patchNextDeltaTime){
    7b72:	d6 01       	movw	r26, r12
    7b74:	9c 91       	ld	r25, X
    7b76:	f4 01       	movw	r30, r8
    7b78:	80 81       	ld	r24, Z
    7b7a:	98 13       	cpse	r25, r24
    7b7c:	2e c0       	rjmp	.+92     	; 0x7bda <ProcessMusic+0x312>

				c1=pgm_read_byte(track->patchCommandStreamPos++);
    7b7e:	ed 89       	ldd	r30, Y+21	; 0x15
    7b80:	fe 89       	ldd	r31, Y+22	; 0x16
    7b82:	bf 01       	movw	r22, r30
    7b84:	6f 5f       	subi	r22, 0xFF	; 255
    7b86:	7f 4f       	sbci	r23, 0xFF	; 255
    7b88:	7e 8b       	std	Y+22, r23	; 0x16
    7b8a:	6d 8b       	std	Y+21, r22	; 0x15
    7b8c:	84 91       	lpm	r24, Z
				if(c1==PATCH_END){
    7b8e:	8f 3f       	cpi	r24, 0xFF	; 255
    7b90:	31 f4       	brne	.+12     	; 0x7b9e <ProcessMusic+0x2d6>
					//end of stream!
					track->flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    7b92:	88 81       	ld	r24, Y
    7b94:	8f 77       	andi	r24, 0x7F	; 127
    7b96:	88 83       	st	Y, r24
					track->patchCommandStreamPos=NULL;
    7b98:	1e 8a       	std	Y+22, r1	; 0x16
    7b9a:	1d 8a       	std	Y+21, r1	; 0x15
					break;
    7b9c:	1e c0       	rjmp	.+60     	; 0x7bda <ProcessMusic+0x312>

				}else{
					c2=pgm_read_byte(track->patchCommandStreamPos++);
    7b9e:	9f 01       	movw	r18, r30
    7ba0:	2e 5f       	subi	r18, 0xFE	; 254
    7ba2:	3f 4f       	sbci	r19, 0xFF	; 255
    7ba4:	3e 8b       	std	Y+22, r19	; 0x16
    7ba6:	2d 8b       	std	Y+21, r18	; 0x15
    7ba8:	fb 01       	movw	r30, r22
    7baa:	64 91       	lpm	r22, Z
					//invoke patch command function
					((PatchCommand)pgm_read_word(&patchCommands[c1]))(track,c2);
    7bac:	e8 2f       	mov	r30, r24
    7bae:	f0 e0       	ldi	r31, 0x00	; 0
    7bb0:	ee 0f       	add	r30, r30
    7bb2:	ff 1f       	adc	r31, r31
    7bb4:	ee 52       	subi	r30, 0x2E	; 46
    7bb6:	ff 4f       	sbci	r31, 0xFF	; 255
    7bb8:	25 91       	lpm	r18, Z+
    7bba:	34 91       	lpm	r19, Z
    7bbc:	ce 01       	movw	r24, r28
    7bbe:	f9 01       	movw	r30, r18
    7bc0:	09 95       	icall
				}

				//read next delta time
				track->patchNextDeltaTime=pgm_read_byte(track->patchCommandStreamPos++);
    7bc2:	ed 89       	ldd	r30, Y+21	; 0x15
    7bc4:	fe 89       	ldd	r31, Y+22	; 0x16
    7bc6:	cf 01       	movw	r24, r30
    7bc8:	01 96       	adiw	r24, 0x01	; 1
    7bca:	9e 8b       	std	Y+22, r25	; 0x16
    7bcc:	8d 8b       	std	Y+21, r24	; 0x15
    7bce:	e4 91       	lpm	r30, Z
    7bd0:	d4 01       	movw	r26, r8
    7bd2:	ec 93       	st	X, r30
				track->patchCurrDeltaTime=0;
    7bd4:	f6 01       	movw	r30, r12
    7bd6:	10 82       	st	Z, r1
    7bd8:	cc cf       	rjmp	.-104    	; 0x7b72 <ProcessMusic+0x2aa>
			}

			track->patchCurrDeltaTime++;
    7bda:	9f 5f       	subi	r25, 0xFF	; 255
    7bdc:	d6 01       	movw	r26, r12
    7bde:	9c 93       	st	X, r25
		}

		if(track->flags & TRACK_FLAGS_PLAYING){
    7be0:	98 81       	ld	r25, Y
    7be2:	95 ff       	sbrs	r25, 5
    7be4:	6c c0       	rjmp	.+216    	; 0x7cbe <ProcessMusic+0x3f6>

			if(track->patchPlayingTime<0xff){
    7be6:	f7 01       	movw	r30, r14
    7be8:	80 81       	ld	r24, Z
    7bea:	8f 3f       	cpi	r24, 0xFF	; 255
    7bec:	11 f0       	breq	.+4      	; 0x7bf2 <ProcessMusic+0x32a>
				track->patchPlayingTime++;
    7bee:	8f 5f       	subi	r24, 0xFF	; 255
    7bf0:	80 83       	st	Z, r24
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
    7bf2:	97 fd       	sbrc	r25, 7
    7bf4:	04 c0       	rjmp	.+8      	; 0x7bfe <ProcessMusic+0x336>
    7bf6:	f7 01       	movw	r30, r14
    7bf8:	38 97       	sbiw	r30, 0x08	; 8
				//if an FX, use full track volume.
				trackVol=0xff;
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
    7bfa:	90 81       	ld	r25, Z
    7bfc:	01 c0       	rjmp	.+2      	; 0x7c00 <ProcessMusic+0x338>
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
				//if an FX, use full track volume.
				trackVol=0xff;
    7bfe:	9f ef       	ldi	r25, 0xFF	; 255
    7c00:	f7 01       	movw	r30, r14
    7c02:	37 97       	sbiw	r30, 0x07	; 7
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
			}
			if(track->noteVol!=0 && track->envelopeVol!=0 && trackVol!=0 && masterVolume!=0){
    7c04:	80 81       	ld	r24, Z
    7c06:	88 23       	and	r24, r24
    7c08:	09 f4       	brne	.+2      	; 0x7c0c <ProcessMusic+0x344>
    7c0a:	4e c0       	rjmp	.+156    	; 0x7ca8 <ProcessMusic+0x3e0>
    7c0c:	31 96       	adiw	r30, 0x01	; 1
    7c0e:	50 81       	ld	r21, Z
    7c10:	55 23       	and	r21, r21
    7c12:	09 f4       	brne	.+2      	; 0x7c16 <ProcessMusic+0x34e>
    7c14:	49 c0       	rjmp	.+146    	; 0x7ca8 <ProcessMusic+0x3e0>
    7c16:	99 23       	and	r25, r25
    7c18:	09 f4       	brne	.+2      	; 0x7c1c <ProcessMusic+0x354>
    7c1a:	46 c0       	rjmp	.+140    	; 0x7ca8 <ProcessMusic+0x3e0>
    7c1c:	40 91 73 0d 	lds	r20, 0x0D73
    7c20:	44 23       	and	r20, r20
    7c22:	09 f4       	brne	.+2      	; 0x7c26 <ProcessMusic+0x35e>
    7c24:	41 c0       	rjmp	.+130    	; 0x7ca8 <ProcessMusic+0x3e0>

				uVol=(track->noteVol*trackVol)+0x100;
    7c26:	89 9f       	mul	r24, r25
    7c28:	c0 01       	movw	r24, r0
    7c2a:	11 24       	eor	r1, r1
    7c2c:	93 95       	inc	r25
				uVol>>=8;
    7c2e:	89 2f       	mov	r24, r25
    7c30:	99 27       	eor	r25, r25
				
				uVol=(uVol*track->envelopeVol)+0x100;
    7c32:	58 9f       	mul	r21, r24
    7c34:	90 01       	movw	r18, r0
    7c36:	59 9f       	mul	r21, r25
    7c38:	30 0d       	add	r19, r0
    7c3a:	11 24       	eor	r1, r1
    7c3c:	c9 01       	movw	r24, r18
    7c3e:	93 95       	inc	r25
				uVol>>=8;
    7c40:	89 2f       	mov	r24, r25
    7c42:	99 27       	eor	r25, r25
    7c44:	3b 97       	sbiw	r30, 0x0b	; 11
				
				#if MUSIC_ENGINE == MIDI
					uVol=(uVol*track->expressionVol)+0x100;
    7c46:	50 81       	ld	r21, Z
    7c48:	58 9f       	mul	r21, r24
    7c4a:	90 01       	movw	r18, r0
    7c4c:	59 9f       	mul	r21, r25
    7c4e:	30 0d       	add	r19, r0
    7c50:	11 24       	eor	r1, r1
    7c52:	33 95       	inc	r19
					uVol>>=8;
    7c54:	23 2f       	mov	r18, r19
    7c56:	33 27       	eor	r19, r19
				#endif
				
				uVol=(uVol*masterVolume)+0x100;
    7c58:	42 9f       	mul	r20, r18
    7c5a:	c0 01       	movw	r24, r0
    7c5c:	43 9f       	mul	r20, r19
    7c5e:	90 0d       	add	r25, r0
    7c60:	11 24       	eor	r1, r1
    7c62:	93 95       	inc	r25
				uVol>>=8;
    7c64:	89 2f       	mov	r24, r25
    7c66:	99 27       	eor	r25, r25
    7c68:	37 96       	adiw	r30, 0x07	; 7

				if(track->tremoloLevel>0){					
    7c6a:	20 81       	ld	r18, Z
    7c6c:	22 23       	and	r18, r18
    7c6e:	f1 f0       	breq	.+60     	; 0x7cac <ProcessMusic+0x3e4>
					tmp=pgm_read_byte(&(waves[track->tremoloPos]));
    7c70:	d5 01       	movw	r26, r10
    7c72:	ec 91       	ld	r30, X
    7c74:	f0 e0       	ldi	r31, 0x00	; 0
    7c76:	e0 50       	subi	r30, 0x00	; 0
    7c78:	f0 48       	sbci	r31, 0x80	; 128
    7c7a:	e4 91       	lpm	r30, Z
					tmp-=128; //convert to unsigned
    7c7c:	e0 58       	subi	r30, 0x80	; 128

					tVol=(track->tremoloLevel*tmp)+0x100;
    7c7e:	2e 9f       	mul	r18, r30
    7c80:	f0 01       	movw	r30, r0
    7c82:	11 24       	eor	r1, r1
    7c84:	f3 95       	inc	r31
					tVol>>=8;
    7c86:	ef 2f       	mov	r30, r31
    7c88:	ff 27       	eor	r31, r31
					
					uVol=(uVol*(0xff-tVol))+0x100;
    7c8a:	a3 01       	movw	r20, r6
    7c8c:	4e 1b       	sub	r20, r30
    7c8e:	5f 0b       	sbc	r21, r31
    7c90:	48 9f       	mul	r20, r24
    7c92:	90 01       	movw	r18, r0
    7c94:	49 9f       	mul	r20, r25
    7c96:	30 0d       	add	r19, r0
    7c98:	58 9f       	mul	r21, r24
    7c9a:	30 0d       	add	r19, r0
    7c9c:	11 24       	eor	r1, r1
    7c9e:	c9 01       	movw	r24, r18
    7ca0:	93 95       	inc	r25
					uVol>>=8;
    7ca2:	89 2f       	mov	r24, r25
    7ca4:	99 27       	eor	r25, r25
    7ca6:	02 c0       	rjmp	.+4      	; 0x7cac <ProcessMusic+0x3e4>
				}

			
			}else{
				uVol=0;
    7ca8:	80 e0       	ldi	r24, 0x00	; 0
    7caa:	90 e0       	ldi	r25, 0x00	; 0
			}	

			track->tremoloPos+=track->tremoloRate;	
    7cac:	f5 01       	movw	r30, r10
    7cae:	30 81       	ld	r19, Z
    7cb0:	f7 01       	movw	r30, r14
    7cb2:	39 97       	sbiw	r30, 0x09	; 9
    7cb4:	20 81       	ld	r18, Z
    7cb6:	23 0f       	add	r18, r19
    7cb8:	d5 01       	movw	r26, r10
    7cba:	2c 93       	st	X, r18
    7cbc:	02 c0       	rjmp	.+4      	; 0x7cc2 <ProcessMusic+0x3fa>

		}else{
			uVol=0;
    7cbe:	80 e0       	ldi	r24, 0x00	; 0
    7cc0:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
    7cc2:	f8 01       	movw	r30, r16
    7cc4:	80 83       	st	Z, r24
    7cc6:	67 96       	adiw	r28, 0x17	; 23
    7cc8:	0a 5f       	subi	r16, 0xFA	; 250
    7cca:	1f 4f       	sbci	r17, 0xFF	; 255
    7ccc:	f7 e1       	ldi	r31, 0x17	; 23
    7cce:	af 0e       	add	r10, r31
    7cd0:	b1 1c       	adc	r11, r1
    7cd2:	87 e1       	ldi	r24, 0x17	; 23
    7cd4:	c8 0e       	add	r12, r24
    7cd6:	d1 1c       	adc	r13, r1
    7cd8:	97 e1       	ldi	r25, 0x17	; 23
    7cda:	e9 0e       	add	r14, r25
    7cdc:	f1 1c       	adc	r15, r1


	//
	// Process patches command streams & final volume
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    7cde:	ad e0       	ldi	r26, 0x0D	; 13
    7ce0:	ce 36       	cpi	r28, 0x6E	; 110
    7ce2:	da 07       	cpc	r29, r26
    7ce4:	09 f0       	breq	.+2      	; 0x7ce8 <ProcessMusic+0x420>
    7ce6:	37 cf       	rjmp	.-402    	; 0x7b56 <ProcessMusic+0x28e>
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
	}
	
}
    7ce8:	df 91       	pop	r29
    7cea:	cf 91       	pop	r28
    7cec:	1f 91       	pop	r17
    7cee:	0f 91       	pop	r16
    7cf0:	ff 90       	pop	r15
    7cf2:	ef 90       	pop	r14
    7cf4:	df 90       	pop	r13
    7cf6:	cf 90       	pop	r12
    7cf8:	bf 90       	pop	r11
    7cfa:	af 90       	pop	r10
    7cfc:	9f 90       	pop	r9
    7cfe:	8f 90       	pop	r8
    7d00:	7f 90       	pop	r7
    7d02:	6f 90       	pop	r6
    7d04:	08 95       	ret

00007d06 <SetMasterVolume>:
}



void SetMasterVolume(unsigned char vol){
	masterVolume=vol;
    7d06:	80 93 73 0d 	sts	0x0D73, r24
    7d0a:	08 95       	ret

00007d0c <SetMixerNote>:
; r22: -MIDI note, 69=A5(440) for waves channels (0,1,2)
;      -Noise params for channel 3
;***********************
.section .text.SetMixerNote
SetMixerNote:
	clr r25
    7d0c:	99 27       	eor	r25, r25
	clr r23
    7d0e:	77 27       	eor	r23, r23
	#if SOUND_MIXER == MIXER_TYPE_VSYNC
		cpi r24,3
		brlo set_note_waves
		ret		
	#else
		cpi r24,3
    7d10:	83 30       	cpi	r24, 0x03	; 3
		brne set_note_waves		
    7d12:	09 f4       	brne	.+2      	; 0x7d16 <set_note_waves>
		ret
    7d14:	08 95       	ret

00007d16 <set_note_waves>:
	#endif
#endif

set_note_waves:
	;get step for note
	ldi ZL,lo8(steptable)
    7d16:	e8 e0       	ldi	r30, 0x08	; 8
	ldi ZH,hi8(steptable)
    7d18:	fe e7       	ldi	r31, 0x7E	; 126
	lsl r22
    7d1a:	66 0f       	add	r22, r22
	rol r23
    7d1c:	77 1f       	adc	r23, r23
	add ZL,r22
    7d1e:	e6 0f       	add	r30, r22
	adc ZH,r23	
    7d20:	f7 1f       	adc	r31, r23

	lpm r26,Z+
    7d22:	a5 91       	lpm	r26, Z+
	lpm r27,Z
    7d24:	b4 91       	lpm	r27, Z

	ldi ZL,lo8(mixerStruct)
    7d26:	e0 ed       	ldi	r30, 0xD0	; 208
	ldi ZH,hi8(mixerStruct)
    7d28:	fc e0       	ldi	r31, 0x0C	; 12
	ldi r18,CHANNEL_STRUCT_SIZE
    7d2a:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24
    7d2c:	28 9f       	mul	r18, r24
	add ZL,r0
    7d2e:	e0 0d       	add	r30, r0
	adc ZH,r1
    7d30:	f1 1d       	adc	r31, r1
	
	std Z+step_lo,r26
    7d32:	a1 83       	std	Z+1, r26	; 0x01
	std Z+step_hi,r27
    7d34:	b2 83       	std	Z+2, r27	; 0x02
	
	clr r1
    7d36:	11 24       	eor	r1, r1
	

	ret
    7d38:	08 95       	ret

00007d3a <SetMixerWave>:
;         Noise channel: 0xfe=7 bit lfsr, 0xff=15 bit lfsr
;                 
;***********************
.section .text.SetMixerWave
SetMixerWave:
	clr r25
    7d3a:	99 27       	eor	r25, r25
	clr r23
    7d3c:	77 27       	eor	r23, r23

	ldi ZL,lo8(mixerStruct)
    7d3e:	e0 ed       	ldi	r30, 0xD0	; 208
	ldi ZH,hi8(mixerStruct)
    7d40:	fc e0       	ldi	r31, 0x0C	; 12
	ldi r18,CHANNEL_STRUCT_SIZE
    7d42:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24	
    7d44:	28 9f       	mul	r18, r24
	add ZL,r0
    7d46:	e0 0d       	add	r30, r0
	adc ZH,r1
    7d48:	f1 1d       	adc	r31, r1

#if MIXER_CHAN4_TYPE == 0
	cpi r22,0xfe	;7bit lfsr
    7d4a:	6e 3f       	cpi	r22, 0xFE	; 254
	brne smw1
    7d4c:	31 f4       	brne	.+12     	; 0x7d5a <smw1>
	lds r22,tr4_params
    7d4e:	60 91 e3 0c 	lds	r22, 0x0CE3
	andi r22,0xfe;
    7d52:	6e 7f       	andi	r22, 0xFE	; 254
	sts tr4_params,r22
    7d54:	60 93 e3 0c 	sts	0x0CE3, r22
	rjmp esmw	
    7d58:	0b c0       	rjmp	.+22     	; 0x7d70 <esmw>

00007d5a <smw1>:
smw1:
	cpi r22,0xff	;15bit lfsr
    7d5a:	6f 3f       	cpi	r22, 0xFF	; 255
	brne smw2
    7d5c:	31 f4       	brne	.+12     	; 0x7d6a <smw2>
	lds r22,tr4_params
    7d5e:	60 91 e3 0c 	lds	r22, 0x0CE3
	ori r22,0xfe;
    7d62:	6e 6f       	ori	r22, 0xFE	; 254
	sts tr4_params,r22	
    7d64:	60 93 e3 0c 	sts	0x0CE3, r22
	rjmp esmw
    7d68:	03 c0       	rjmp	.+6      	; 0x7d70 <esmw>

00007d6a <smw2>:
smw2:
#endif

	ldi r23,hi8(waves)
    7d6a:	70 e8       	ldi	r23, 0x80	; 128
	add r23,r22
    7d6c:	76 0f       	add	r23, r22
	std Z+samplepos_hi,r23 ;store path No
    7d6e:	75 83       	std	Z+5, r23	; 0x05

00007d70 <esmw>:

esmw:
	clr r1	
    7d70:	11 24       	eor	r1, r1
	ret
    7d72:	08 95       	ret
	...

00007e00 <DisableSoundEngine>:
; no CPU cycles are consumed.
; C-callable
;*****************************
.section .text.DisableSoundEngine
DisableSoundEngine:	
	ldi r24,0
    7e00:	80 e0       	ldi	r24, 0x00	; 0
	sts sound_enabled,r24
    7e02:	80 93 cf 0c 	sts	0x0CCF, r24
	ret
    7e06:	08 95       	ret

00007e08 <steptable>:
    7e08:	22 00       	.word	0x0022	; ????
    7e0a:	24 00       	.word	0x0024	; ????
    7e0c:	26 00       	.word	0x0026	; ????
    7e0e:	28 00       	.word	0x0028	; ????
    7e10:	2b 00       	.word	0x002b	; ????
    7e12:	2d 00       	.word	0x002d	; ????
    7e14:	30 00       	.word	0x0030	; ????
    7e16:	33 00       	.word	0x0033	; ????
    7e18:	36 00       	.word	0x0036	; ????
    7e1a:	39 00       	.word	0x0039	; ????
    7e1c:	3d 00       	.word	0x003d	; ????
    7e1e:	40 00       	.word	0x0040	; ????
    7e20:	44 00       	.word	0x0044	; ????
    7e22:	48 00       	.word	0x0048	; ????
    7e24:	4c 00       	.word	0x004c	; ????
    7e26:	51 00       	.word	0x0051	; ????
    7e28:	56 00       	.word	0x0056	; ????
    7e2a:	5b 00       	.word	0x005b	; ????
    7e2c:	60 00       	.word	0x0060	; ????
    7e2e:	66 00       	.word	0x0066	; ????
    7e30:	6c 00       	.word	0x006c	; ????
    7e32:	73 00       	.word	0x0073	; ????
    7e34:	79 00       	.word	0x0079	; ????
    7e36:	81 00       	.word	0x0081	; ????
    7e38:	88 00       	.word	0x0088	; ????
    7e3a:	90 00       	.word	0x0090	; ????
    7e3c:	99 00       	.word	0x0099	; ????
    7e3e:	a2 00       	.word	0x00a2	; ????
    7e40:	ac 00       	.word	0x00ac	; ????
    7e42:	b6 00       	.word	0x00b6	; ????
    7e44:	c1 00       	.word	0x00c1	; ????
    7e46:	cc 00       	.word	0x00cc	; ????
    7e48:	d8 00       	.word	0x00d8	; ????
    7e4a:	e5 00       	.word	0x00e5	; ????
    7e4c:	f3 00       	.word	0x00f3	; ????
    7e4e:	01 01       	movw	r0, r2
    7e50:	10 01       	movw	r2, r0
    7e52:	21 01       	movw	r4, r2
    7e54:	32 01       	movw	r6, r4
    7e56:	44 01       	movw	r8, r8
    7e58:	57 01       	movw	r10, r14
    7e5a:	6c 01       	movw	r12, r24
    7e5c:	81 01       	movw	r16, r2
    7e5e:	98 01       	movw	r18, r16
    7e60:	b0 01       	movw	r22, r0
    7e62:	ca 01       	movw	r24, r20
    7e64:	e5 01       	movw	r28, r10
    7e66:	02 02       	muls	r16, r18
    7e68:	21 02       	muls	r18, r17
    7e6a:	41 02       	muls	r20, r17
    7e6c:	64 02       	muls	r22, r20
    7e6e:	88 02       	muls	r24, r24
    7e70:	ae 02       	muls	r26, r30
    7e72:	d7 02       	muls	r29, r23
    7e74:	03 03       	mulsu	r16, r19
    7e76:	30 03       	mulsu	r19, r16
    7e78:	61 03       	mulsu	r22, r17
    7e7a:	94 03       	fmuls	r17, r20
    7e7c:	cb 03       	fmulsu	r20, r19
    7e7e:	05 04       	cpc	r0, r5
    7e80:	42 04       	cpc	r4, r2
    7e82:	83 04       	cpc	r8, r3
    7e84:	c7 04       	cpc	r12, r7
    7e86:	10 05       	cpc	r17, r0
    7e88:	5d 05       	cpc	r21, r13
    7e8a:	af 05       	cpc	r26, r15
    7e8c:	05 06       	cpc	r0, r21
    7e8e:	61 06       	cpc	r6, r17
    7e90:	c2 06       	cpc	r12, r18
    7e92:	29 07       	cpc	r18, r25
    7e94:	96 07       	cpc	r25, r22
    7e96:	09 08       	sbc	r0, r9
    7e98:	83 08       	sbc	r8, r3
    7e9a:	05 09       	sbc	r16, r5
    7e9c:	8e 09       	sbc	r24, r14
    7e9e:	20 0a       	sbc	r2, r16
    7ea0:	ba 0a       	sbc	r11, r26
    7ea2:	5d 0b       	sbc	r21, r29
    7ea4:	0a 0c       	add	r0, r10
    7ea6:	c1 0c       	add	r12, r1
    7ea8:	84 0d       	add	r24, r4
    7eaa:	51 0e       	add	r5, r17
    7eac:	2b 0f       	add	r18, r27
    7eae:	12 10       	cpse	r1, r2
    7eb0:	07 11       	cpse	r16, r7
    7eb2:	0a 12       	cpse	r0, r26
    7eb4:	1d 13       	cpse	r17, r29
    7eb6:	40 14       	cp	r4, r0
    7eb8:	74 15       	cp	r23, r4
    7eba:	ba 16       	cp	r11, r26
    7ebc:	14 18       	sub	r1, r4
    7ebe:	83 19       	sub	r24, r3
    7ec0:	07 1b       	sub	r16, r23
    7ec2:	a3 1c       	adc	r10, r3
    7ec4:	57 1e       	adc	r5, r23
    7ec6:	24 20       	and	r2, r4
    7ec8:	0e 22       	and	r0, r30
    7eca:	14 24       	eor	r1, r4
    7ecc:	39 26       	eor	r3, r25
    7ece:	7f 28       	or	r7, r15
    7ed0:	e8 2a       	or	r14, r24
    7ed2:	75 2d       	mov	r23, r5
    7ed4:	29 30       	cpi	r18, 0x09	; 9
    7ed6:	06 33       	cpi	r16, 0x36	; 54
    7ed8:	0f 36       	cpi	r16, 0x6F	; 111
    7eda:	45 39       	cpi	r20, 0x95	; 149
    7edc:	ad 3c       	cpi	r26, 0xCD	; 205
    7ede:	49 40       	sbci	r20, 0x09	; 9
    7ee0:	1b 44       	sbci	r17, 0x4B	; 75
    7ee2:	28 48       	sbci	r18, 0x88	; 136
    7ee4:	73 4c       	sbci	r23, 0xC3	; 195
    7ee6:	fe 50       	subi	r31, 0x0E	; 14
    7ee8:	cf 55       	subi	r28, 0x5F	; 95
    7eea:	ea 5a       	subi	r30, 0xAA	; 170
    7eec:	51 60       	ori	r21, 0x01	; 1
    7eee:	0c 66       	ori	r16, 0x6C	; 108
    7ef0:	1d 6c       	ori	r17, 0xCD	; 205
    7ef2:	8b 72       	andi	r24, 0x2B	; 43
    7ef4:	5a 79       	andi	r21, 0x9A	; 154
    7ef6:	92 80       	ldd	r9, Z+2	; 0x02
    7ef8:	37 88       	ldd	r3, Z+23	; 0x17
    7efa:	50 90 e5 98 	lds	r5, 0x98E5
    7efe:	fd a1       	ldd	r31, Y+37	; 0x25
    7f00:	9f ab       	std	Y+55, r25	; 0x37
    7f02:	d3 b5       	in	r29, 0x23	; 35
    7f04:	a3 c0       	rjmp	.+326    	; 0x804c <waves+0x4c>
	...

00008000 <waves>:
    8000:	00 03       	mulsu	r16, r16
    8002:	06 09       	sbc	r16, r6
    8004:	0c 10       	cpse	r0, r12
    8006:	13 16       	cp	r1, r19
    8008:	19 1c       	adc	r1, r9
    800a:	1f 22       	and	r1, r31
    800c:	25 28       	or	r2, r5
    800e:	2b 2e       	mov	r2, r27
    8010:	31 33       	cpi	r19, 0x31	; 49
    8012:	36 39       	cpi	r19, 0x96	; 150
    8014:	3c 3f       	cpi	r19, 0xFC	; 252
    8016:	41 44       	sbci	r20, 0x41	; 65
    8018:	47 49       	sbci	r20, 0x97	; 151
    801a:	4c 4e       	sbci	r20, 0xEC	; 236
    801c:	51 53       	subi	r21, 0x31	; 49
    801e:	55 58       	subi	r21, 0x85	; 133
    8020:	5a 5c       	subi	r21, 0xCA	; 202
    8022:	5e 60       	ori	r21, 0x0E	; 14
    8024:	62 64       	ori	r22, 0x42	; 66
    8026:	66 68       	ori	r22, 0x86	; 134
    8028:	6a 6b       	ori	r22, 0xBA	; 186
    802a:	6d 6f       	ori	r22, 0xFD	; 253
    802c:	70 71       	andi	r23, 0x10	; 16
    802e:	73 74       	andi	r23, 0x43	; 67
    8030:	75 76       	andi	r23, 0x65	; 101
    8032:	78 79       	andi	r23, 0x98	; 152
    8034:	7a 7a       	andi	r23, 0xAA	; 170
    8036:	7b 7c       	andi	r23, 0xCB	; 203
    8038:	7d 7d       	andi	r23, 0xDD	; 221
    803a:	7e 7e       	andi	r23, 0xEE	; 238
    803c:	7e 7f       	andi	r23, 0xFE	; 254
    803e:	7f 7f       	andi	r23, 0xFF	; 255
    8040:	7f 7f       	andi	r23, 0xFF	; 255
    8042:	7f 7f       	andi	r23, 0xFF	; 255
    8044:	7e 7e       	andi	r23, 0xEE	; 238
    8046:	7e 7d       	andi	r23, 0xDE	; 222
    8048:	7d 7c       	andi	r23, 0xCD	; 205
    804a:	7b 7a       	andi	r23, 0xAB	; 171
    804c:	7a 79       	andi	r23, 0x9A	; 154
    804e:	78 76       	andi	r23, 0x68	; 104
    8050:	75 74       	andi	r23, 0x45	; 69
    8052:	73 71       	andi	r23, 0x13	; 19
    8054:	70 6f       	ori	r23, 0xF0	; 240
    8056:	6d 6b       	ori	r22, 0xBD	; 189
    8058:	6a 68       	ori	r22, 0x8A	; 138
    805a:	66 64       	ori	r22, 0x46	; 70
    805c:	62 60       	ori	r22, 0x02	; 2
    805e:	5e 5c       	subi	r21, 0xCE	; 206
    8060:	5a 58       	subi	r21, 0x8A	; 138
    8062:	55 53       	subi	r21, 0x35	; 53
    8064:	51 4e       	sbci	r21, 0xE1	; 225
    8066:	4c 49       	sbci	r20, 0x9C	; 156
    8068:	47 44       	sbci	r20, 0x47	; 71
    806a:	41 3f       	cpi	r20, 0xF1	; 241
    806c:	3c 39       	cpi	r19, 0x9C	; 156
    806e:	36 33       	cpi	r19, 0x36	; 54
    8070:	31 2e       	mov	r3, r17
    8072:	2b 28       	or	r2, r11
    8074:	25 22       	and	r2, r21
    8076:	1f 1c       	adc	r1, r15
    8078:	19 16       	cp	r1, r25
    807a:	13 10       	cpse	r1, r3
    807c:	0c 09       	sbc	r16, r12
    807e:	06 03       	mulsu	r16, r22
    8080:	00 fd       	sbrc	r16, 0
    8082:	fa f7       	brpl	.-2      	; 0x8082 <waves+0x82>
    8084:	f4 f0       	brlt	.+60     	; 0x80c2 <waves+0xc2>
    8086:	ed ea       	ldi	r30, 0xAD	; 173
    8088:	e7 e4       	ldi	r30, 0x47	; 71
    808a:	e1 de       	rcall	.-574    	; 0x7e4e <steptable+0x46>
    808c:	db d8       	rcall	.-3658   	; 0x7244 <isEepromFormatted+0x26>
    808e:	d5 d2       	rcall	.+1450   	; 0x863a <waves+0x63a>
    8090:	cf cd       	rjmp	.-1122   	; 0x7c30 <ProcessMusic+0x368>
    8092:	ca c7       	rjmp	.+3988   	; 0x9028 <LBPrintByte+0xa>
    8094:	c4 c1       	rjmp	.+904    	; 0x841e <waves+0x41e>
    8096:	bf bc       	out	0x2f, r11	; 47
    8098:	b9 b7       	in	r27, 0x39	; 57
    809a:	b4 b2       	in	r11, 0x14	; 20
    809c:	af ad       	ldd	r26, Y+63	; 0x3f
    809e:	ab a8       	ldd	r10, Y+51	; 0x33
    80a0:	a6 a4       	ldd	r10, Z+46	; 0x2e
    80a2:	a2 a0       	ldd	r10, Z+34	; 0x22
    80a4:	9e 9c       	mul	r9, r14
    80a6:	9a 98       	cbi	0x13, 2	; 19
    80a8:	96 95       	lsr	r25
    80aa:	93 91       	.word	0x9193	; ????
    80ac:	90 8f       	std	Z+24, r25	; 0x18
    80ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    80b0:	8b 8a       	std	Y+19, r8	; 0x13
    80b2:	88 87       	std	Y+8, r24	; 0x08
    80b4:	86 86       	std	Z+14, r8	; 0x0e
    80b6:	85 84       	ldd	r8, Z+13	; 0x0d
    80b8:	83 83       	std	Z+3, r24	; 0x03
    80ba:	82 82       	std	Z+2, r8	; 0x02
    80bc:	82 81       	ldd	r24, Z+2	; 0x02
    80be:	81 81       	ldd	r24, Z+1	; 0x01
    80c0:	81 81       	ldd	r24, Z+1	; 0x01
    80c2:	81 81       	ldd	r24, Z+1	; 0x01
    80c4:	82 82       	std	Z+2, r8	; 0x02
    80c6:	82 83       	std	Z+2, r24	; 0x02
    80c8:	83 84       	ldd	r8, Z+11	; 0x0b
    80ca:	85 86       	std	Z+13, r8	; 0x0d
    80cc:	86 87       	std	Z+14, r24	; 0x0e
    80ce:	88 8a       	std	Y+16, r8	; 0x10
    80d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    80d2:	8d 8f       	std	Y+29, r24	; 0x1d
    80d4:	90 91 93 95 	lds	r25, 0x9593
    80d8:	96 98       	cbi	0x12, 6	; 18
    80da:	9a 9c       	mul	r9, r10
    80dc:	9e a0       	ldd	r9, Y+38	; 0x26
    80de:	a2 a4       	ldd	r10, Z+42	; 0x2a
    80e0:	a6 a8       	ldd	r10, Z+54	; 0x36
    80e2:	ab ad       	ldd	r26, Y+59	; 0x3b
    80e4:	af b2       	in	r10, 0x1f	; 31
    80e6:	b4 b7       	in	r27, 0x34	; 52
    80e8:	b9 bc       	out	0x29, r11	; 41
    80ea:	bf c1       	rjmp	.+894    	; 0x846a <waves+0x46a>
    80ec:	c4 c7       	rjmp	.+3976   	; 0x9076 <LBPrintByte+0x58>
    80ee:	ca cd       	rjmp	.-1132   	; 0x7c84 <ProcessMusic+0x3bc>
    80f0:	cf d2       	rcall	.+1438   	; 0x8690 <waves+0x690>
    80f2:	d5 d8       	rcall	.-3670   	; 0x729e <EepromBlockExists+0x52>
    80f4:	db de       	rcall	.-586    	; 0x7eac <steptable+0xa4>
    80f6:	e1 e4       	ldi	r30, 0x41	; 65
    80f8:	e7 ea       	ldi	r30, 0xA7	; 167
    80fa:	ed f0       	brhs	.+58     	; 0x8136 <waves+0x136>
    80fc:	f4 f7       	brge	.-4      	; 0x80fa <waves+0xfa>
    80fe:	fa fd       	.word	0xfdfa	; ????
    8100:	80 81       	ld	r24, Z
    8102:	82 83       	std	Z+2, r24	; 0x02
    8104:	84 85       	ldd	r24, Z+12	; 0x0c
    8106:	86 87       	std	Z+14, r24	; 0x0e
    8108:	88 89       	ldd	r24, Y+16	; 0x10
    810a:	8a 8b       	std	Y+18, r24	; 0x12
    810c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    810e:	8e 8f       	std	Y+30, r24	; 0x1e
    8110:	90 91 92 93 	lds	r25, 0x9392
    8114:	94 95       	.word	0x9594	; ????
    8116:	96 97       	sbiw	r26, 0x26	; 38
    8118:	98 99       	sbic	0x13, 0	; 19
    811a:	9a 9b       	sbis	0x13, 2	; 19
    811c:	9c 9d       	mul	r25, r12
    811e:	9e 9f       	mul	r25, r30
    8120:	a0 a1       	ldd	r26, Z+32	; 0x20
    8122:	a2 a3       	std	Z+34, r26	; 0x22
    8124:	a4 a5       	ldd	r26, Z+44	; 0x2c
    8126:	a6 a7       	std	Z+46, r26	; 0x2e
    8128:	a8 a9       	ldd	r26, Y+48	; 0x30
    812a:	aa ab       	std	Y+50, r26	; 0x32
    812c:	ac ad       	ldd	r26, Y+60	; 0x3c
    812e:	ae af       	std	Y+62, r26	; 0x3e
    8130:	b0 b1       	in	r27, 0x00	; 0
    8132:	b2 b3       	in	r27, 0x12	; 18
    8134:	b4 b5       	in	r27, 0x24	; 36
    8136:	b6 b7       	in	r27, 0x36	; 54
    8138:	b8 b9       	out	0x08, r27	; 8
    813a:	ba bb       	out	0x1a, r27	; 26
    813c:	bc bd       	out	0x2c, r27	; 44
    813e:	be bf       	out	0x3e, r27	; 62
    8140:	c0 c1       	rjmp	.+896    	; 0x84c2 <waves+0x4c2>
    8142:	c2 c3       	rjmp	.+1924   	; 0x88c8 <waves+0x8c8>
    8144:	c4 c5       	rjmp	.+2952   	; 0x8cce <DrawMap+0x16>
    8146:	c6 c7       	rjmp	.+3980   	; 0x90d4 <LBPrintInt+0x54>
    8148:	c8 c9       	rjmp	.-3184   	; 0x74da <PatchCommand11+0x58>
    814a:	ca cb       	rjmp	.-2156   	; 0x78e0 <ProcessMusic+0x18>
    814c:	cc cd       	rjmp	.-1128   	; 0x7ce6 <ProcessMusic+0x41e>
    814e:	ce cf       	rjmp	.-100    	; 0x80ec <waves+0xec>
    8150:	d0 d1       	rcall	.+928    	; 0x84f2 <waves+0x4f2>
    8152:	d2 d3       	rcall	.+1956   	; 0x88f8 <waves+0x8f8>
    8154:	d4 d5       	rcall	.+2984   	; 0x8cfe <DrawMap+0x46>
    8156:	d6 d7       	rcall	.+4012   	; 0x9104 <LBCollides+0x12>
    8158:	d8 d9       	rcall	.-3152   	; 0x750a <PatchCommand02+0x6>
    815a:	da db       	rcall	.-2124   	; 0x7910 <ProcessMusic+0x48>
    815c:	dc dd       	rcall	.-1096   	; 0x7d16 <set_note_waves>
    815e:	de df       	rcall	.-68     	; 0x811c <waves+0x11c>
    8160:	e0 e1       	ldi	r30, 0x10	; 16
    8162:	e2 e3       	ldi	r30, 0x32	; 50
    8164:	e4 e5       	ldi	r30, 0x54	; 84
    8166:	e6 e7       	ldi	r30, 0x76	; 118
    8168:	e8 e9       	ldi	r30, 0x98	; 152
    816a:	ea eb       	ldi	r30, 0xBA	; 186
    816c:	ec ed       	ldi	r30, 0xDC	; 220
    816e:	ee ef       	ldi	r30, 0xFE	; 254
    8170:	f0 f1       	brcs	.+124    	; 0x81ee <waves+0x1ee>
    8172:	f2 f3       	brmi	.-4      	; 0x8170 <waves+0x170>
    8174:	f4 f5       	brge	.+124    	; 0x81f2 <waves+0x1f2>
    8176:	f6 f7       	brtc	.-4      	; 0x8174 <waves+0x174>
    8178:	f8 f9       	.word	0xf9f8	; ????
    817a:	fa fb       	.word	0xfbfa	; ????
    817c:	fc fd       	.word	0xfdfc	; ????
    817e:	fe ff       	.word	0xfffe	; ????
    8180:	00 01       	movw	r0, r0
    8182:	02 03       	mulsu	r16, r18
    8184:	04 05       	cpc	r16, r4
    8186:	06 07       	cpc	r16, r22
    8188:	08 09       	sbc	r16, r8
    818a:	0a 0b       	sbc	r16, r26
    818c:	0c 0d       	add	r16, r12
    818e:	0e 0f       	add	r16, r30
    8190:	10 11       	cpse	r17, r0
    8192:	12 13       	cpse	r17, r18
    8194:	14 15       	cp	r17, r4
    8196:	16 17       	cp	r17, r22
    8198:	18 19       	sub	r17, r8
    819a:	1a 1b       	sub	r17, r26
    819c:	1c 1d       	adc	r17, r12
    819e:	1e 1f       	adc	r17, r30
    81a0:	20 21       	and	r18, r0
    81a2:	22 23       	and	r18, r18
    81a4:	24 25       	eor	r18, r4
    81a6:	26 27       	eor	r18, r22
    81a8:	28 29       	or	r18, r8
    81aa:	2a 2b       	or	r18, r26
    81ac:	2c 2d       	mov	r18, r12
    81ae:	2e 2f       	mov	r18, r30
    81b0:	30 31       	cpi	r19, 0x10	; 16
    81b2:	32 33       	cpi	r19, 0x32	; 50
    81b4:	34 35       	cpi	r19, 0x54	; 84
    81b6:	36 37       	cpi	r19, 0x76	; 118
    81b8:	38 39       	cpi	r19, 0x98	; 152
    81ba:	3a 3b       	cpi	r19, 0xBA	; 186
    81bc:	3c 3d       	cpi	r19, 0xDC	; 220
    81be:	3e 3f       	cpi	r19, 0xFE	; 254
    81c0:	40 41       	sbci	r20, 0x10	; 16
    81c2:	42 43       	sbci	r20, 0x32	; 50
    81c4:	44 45       	sbci	r20, 0x54	; 84
    81c6:	46 47       	sbci	r20, 0x76	; 118
    81c8:	48 49       	sbci	r20, 0x98	; 152
    81ca:	4a 4b       	sbci	r20, 0xBA	; 186
    81cc:	4c 4d       	sbci	r20, 0xDC	; 220
    81ce:	4e 4f       	sbci	r20, 0xFE	; 254
    81d0:	50 51       	subi	r21, 0x10	; 16
    81d2:	52 53       	subi	r21, 0x32	; 50
    81d4:	54 55       	subi	r21, 0x54	; 84
    81d6:	56 57       	subi	r21, 0x76	; 118
    81d8:	58 59       	subi	r21, 0x98	; 152
    81da:	5a 5b       	subi	r21, 0xBA	; 186
    81dc:	5c 5d       	subi	r21, 0xDC	; 220
    81de:	5e 5f       	subi	r21, 0xFE	; 254
    81e0:	60 61       	ori	r22, 0x10	; 16
    81e2:	62 63       	ori	r22, 0x32	; 50
    81e4:	64 65       	ori	r22, 0x54	; 84
    81e6:	66 67       	ori	r22, 0x76	; 118
    81e8:	68 69       	ori	r22, 0x98	; 152
    81ea:	6a 6b       	ori	r22, 0xBA	; 186
    81ec:	6c 6d       	ori	r22, 0xDC	; 220
    81ee:	6e 6f       	ori	r22, 0xFE	; 254
    81f0:	70 71       	andi	r23, 0x10	; 16
    81f2:	72 73       	andi	r23, 0x32	; 50
    81f4:	74 75       	andi	r23, 0x54	; 84
    81f6:	76 77       	andi	r23, 0x76	; 118
    81f8:	78 79       	andi	r23, 0x98	; 152
    81fa:	7a 7b       	andi	r23, 0xBA	; 186
    81fc:	7c 7d       	andi	r23, 0xDC	; 220
    81fe:	7e 7f       	andi	r23, 0xFE	; 254
    8200:	00 02       	muls	r16, r16
    8202:	04 06       	cpc	r0, r20
    8204:	08 0a       	sbc	r0, r24
    8206:	0c 0e       	add	r0, r28
    8208:	10 12       	cpse	r1, r16
    820a:	14 16       	cp	r1, r20
    820c:	18 1a       	sub	r1, r24
    820e:	1c 1e       	adc	r1, r28
    8210:	20 22       	and	r2, r16
    8212:	24 26       	eor	r2, r20
    8214:	28 2a       	or	r2, r24
    8216:	2c 2e       	mov	r2, r28
    8218:	30 32       	cpi	r19, 0x20	; 32
    821a:	34 36       	cpi	r19, 0x64	; 100
    821c:	38 3a       	cpi	r19, 0xA8	; 168
    821e:	3c 3e       	cpi	r19, 0xEC	; 236
    8220:	40 42       	sbci	r20, 0x20	; 32
    8222:	44 46       	sbci	r20, 0x64	; 100
    8224:	48 4a       	sbci	r20, 0xA8	; 168
    8226:	4c 4e       	sbci	r20, 0xEC	; 236
    8228:	50 52       	subi	r21, 0x20	; 32
    822a:	54 56       	subi	r21, 0x64	; 100
    822c:	58 5a       	subi	r21, 0xA8	; 168
    822e:	5c 5e       	subi	r21, 0xEC	; 236
    8230:	60 62       	ori	r22, 0x20	; 32
    8232:	64 66       	ori	r22, 0x64	; 100
    8234:	68 6a       	ori	r22, 0xA8	; 168
    8236:	6c 6e       	ori	r22, 0xEC	; 236
    8238:	70 72       	andi	r23, 0x20	; 32
    823a:	74 76       	andi	r23, 0x64	; 100
    823c:	78 7a       	andi	r23, 0xA8	; 168
    823e:	7c 7e       	andi	r23, 0xEC	; 236
    8240:	7f 7d       	andi	r23, 0xDF	; 223
    8242:	7b 79       	andi	r23, 0x9B	; 155
    8244:	77 75       	andi	r23, 0x57	; 87
    8246:	73 71       	andi	r23, 0x13	; 19
    8248:	6f 6d       	ori	r22, 0xDF	; 223
    824a:	6b 69       	ori	r22, 0x9B	; 155
    824c:	67 65       	ori	r22, 0x57	; 87
    824e:	63 61       	ori	r22, 0x13	; 19
    8250:	5f 5d       	subi	r21, 0xDF	; 223
    8252:	5b 59       	subi	r21, 0x9B	; 155
    8254:	57 55       	subi	r21, 0x57	; 87
    8256:	53 51       	subi	r21, 0x13	; 19
    8258:	4f 4d       	sbci	r20, 0xDF	; 223
    825a:	4b 49       	sbci	r20, 0x9B	; 155
    825c:	47 45       	sbci	r20, 0x57	; 87
    825e:	43 41       	sbci	r20, 0x13	; 19
    8260:	3f 3d       	cpi	r19, 0xDF	; 223
    8262:	3b 39       	cpi	r19, 0x9B	; 155
    8264:	37 35       	cpi	r19, 0x57	; 87
    8266:	33 31       	cpi	r19, 0x13	; 19
    8268:	2f 2d       	mov	r18, r15
    826a:	2b 29       	or	r18, r11
    826c:	27 25       	eor	r18, r7
    826e:	23 21       	and	r18, r3
    8270:	1f 1d       	adc	r17, r15
    8272:	1b 19       	sub	r17, r11
    8274:	17 15       	cp	r17, r7
    8276:	13 11       	cpse	r17, r3
    8278:	0f 0d       	add	r16, r15
    827a:	0b 09       	sbc	r16, r11
    827c:	07 05       	cpc	r16, r7
    827e:	03 01       	movw	r0, r6
    8280:	ff fd       	.word	0xfdff	; ????
    8282:	fb f9       	.word	0xf9fb	; ????
    8284:	f7 f5       	brid	.+124    	; 0x8302 <waves+0x302>
    8286:	f3 f1       	brvs	.+124    	; 0x8304 <waves+0x304>
    8288:	ef ed       	ldi	r30, 0xDF	; 223
    828a:	eb e9       	ldi	r30, 0x9B	; 155
    828c:	e7 e5       	ldi	r30, 0x57	; 87
    828e:	e3 e1       	ldi	r30, 0x13	; 19
    8290:	df dd       	rcall	.-1090   	; 0x7e50 <steptable+0x48>
    8292:	db d9       	rcall	.-3146   	; 0x764a <StopSong+0x16>
    8294:	d7 d5       	rcall	.+2990   	; 0x8e44 <FadeIn+0x2>
    8296:	d3 d1       	rcall	.+934    	; 0x863e <waves+0x63e>
    8298:	cf cd       	rjmp	.-1122   	; 0x7e38 <steptable+0x30>
    829a:	cb c9       	rjmp	.-3178   	; 0x7632 <StartSong+0x50>
    829c:	c7 c5       	rjmp	.+2958   	; 0x8e2c <doFade+0x6>
    829e:	c3 c1       	rjmp	.+902    	; 0x8626 <waves+0x626>
    82a0:	bf bd       	out	0x2f, r27	; 47
    82a2:	bb b9       	out	0x0b, r27	; 11
    82a4:	b7 b5       	in	r27, 0x27	; 39
    82a6:	b3 b1       	in	r27, 0x03	; 3
    82a8:	af ad       	ldd	r26, Y+63	; 0x3f
    82aa:	ab a9       	ldd	r26, Y+51	; 0x33
    82ac:	a7 a5       	ldd	r26, Z+47	; 0x2f
    82ae:	a3 a1       	ldd	r26, Z+35	; 0x23
    82b0:	9f 9d       	mul	r25, r15
    82b2:	9b 99       	sbic	0x13, 3	; 19
    82b4:	97 95       	ror	r25
    82b6:	93 91       	.word	0x9193	; ????
    82b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    82ba:	8b 89       	ldd	r24, Y+19	; 0x13
    82bc:	87 85       	ldd	r24, Z+15	; 0x0f
    82be:	83 81       	ldd	r24, Z+3	; 0x03
    82c0:	80 82       	st	Z, r8
    82c2:	84 86       	std	Z+12, r8	; 0x0c
    82c4:	88 8a       	std	Y+16, r8	; 0x10
    82c6:	8c 8e       	std	Y+28, r8	; 0x1c
    82c8:	90 92 94 96 	sts	0x9694, r9
    82cc:	98 9a       	sbi	0x13, 0	; 19
    82ce:	9c 9e       	mul	r9, r28
    82d0:	a0 a2       	std	Z+32, r10	; 0x20
    82d2:	a4 a6       	std	Z+44, r10	; 0x2c
    82d4:	a8 aa       	std	Y+48, r10	; 0x30
    82d6:	ac ae       	std	Y+60, r10	; 0x3c
    82d8:	b0 b2       	in	r11, 0x10	; 16
    82da:	b4 b6       	in	r11, 0x34	; 52
    82dc:	b8 ba       	out	0x18, r11	; 24
    82de:	bc be       	out	0x3c, r11	; 60
    82e0:	c0 c2       	rjmp	.+1408   	; 0x8862 <waves+0x862>
    82e2:	c4 c6       	rjmp	.+3464   	; 0x906c <LBPrintByte+0x4e>
    82e4:	c8 ca       	rjmp	.-2672   	; 0x7876 <TriggerNote+0x2e>
    82e6:	cc ce       	rjmp	.-616    	; 0x8080 <waves+0x80>
    82e8:	d0 d2       	rcall	.+1440   	; 0x888a <waves+0x88a>
    82ea:	d4 d6       	rcall	.+3496   	; 0x9094 <LBPrintInt+0x14>
    82ec:	d8 da       	rcall	.-2640   	; 0x789e <TriggerNote+0x56>
    82ee:	dc de       	rcall	.-584    	; 0x80a8 <waves+0xa8>
    82f0:	e0 e2       	ldi	r30, 0x20	; 32
    82f2:	e4 e6       	ldi	r30, 0x64	; 100
    82f4:	e8 ea       	ldi	r30, 0xA8	; 168
    82f6:	ec ee       	ldi	r30, 0xEC	; 236
    82f8:	f0 f2       	brcs	.-68     	; 0x82b6 <waves+0x2b6>
    82fa:	f4 f6       	brge	.-68     	; 0x82b8 <waves+0x2b8>
    82fc:	f8 fa       	.word	0xfaf8	; ????
    82fe:	fc fe       	.word	0xfefc	; ????
    8300:	7f 7f       	andi	r23, 0xFF	; 255
    8302:	7f 7f       	andi	r23, 0xFF	; 255
    8304:	7f 7f       	andi	r23, 0xFF	; 255
    8306:	7f 7f       	andi	r23, 0xFF	; 255
    8308:	7f 7f       	andi	r23, 0xFF	; 255
    830a:	7f 7f       	andi	r23, 0xFF	; 255
    830c:	7f 7f       	andi	r23, 0xFF	; 255
    830e:	7f 7f       	andi	r23, 0xFF	; 255
    8310:	7f 7f       	andi	r23, 0xFF	; 255
    8312:	7f 7f       	andi	r23, 0xFF	; 255
    8314:	7f 7f       	andi	r23, 0xFF	; 255
    8316:	7f 7f       	andi	r23, 0xFF	; 255
    8318:	7f 7f       	andi	r23, 0xFF	; 255
    831a:	7f 7f       	andi	r23, 0xFF	; 255
    831c:	7f 7f       	andi	r23, 0xFF	; 255
    831e:	7f 7f       	andi	r23, 0xFF	; 255
    8320:	7f 7f       	andi	r23, 0xFF	; 255
    8322:	7f 7f       	andi	r23, 0xFF	; 255
    8324:	7f 7f       	andi	r23, 0xFF	; 255
    8326:	7f 7f       	andi	r23, 0xFF	; 255
    8328:	7f 7f       	andi	r23, 0xFF	; 255
    832a:	7f 7f       	andi	r23, 0xFF	; 255
    832c:	7f 7f       	andi	r23, 0xFF	; 255
    832e:	7f 7f       	andi	r23, 0xFF	; 255
    8330:	7f 7f       	andi	r23, 0xFF	; 255
    8332:	7f 7f       	andi	r23, 0xFF	; 255
    8334:	7f 7f       	andi	r23, 0xFF	; 255
    8336:	7f 7f       	andi	r23, 0xFF	; 255
    8338:	7f 7f       	andi	r23, 0xFF	; 255
    833a:	7f 7f       	andi	r23, 0xFF	; 255
    833c:	7f 7f       	andi	r23, 0xFF	; 255
    833e:	7f 7f       	andi	r23, 0xFF	; 255
    8340:	80 80       	ld	r8, Z
    8342:	80 80       	ld	r8, Z
    8344:	80 80       	ld	r8, Z
    8346:	80 80       	ld	r8, Z
    8348:	80 80       	ld	r8, Z
    834a:	80 80       	ld	r8, Z
    834c:	80 80       	ld	r8, Z
    834e:	80 80       	ld	r8, Z
    8350:	80 80       	ld	r8, Z
    8352:	80 80       	ld	r8, Z
    8354:	80 80       	ld	r8, Z
    8356:	80 80       	ld	r8, Z
    8358:	80 80       	ld	r8, Z
    835a:	80 80       	ld	r8, Z
    835c:	80 80       	ld	r8, Z
    835e:	80 80       	ld	r8, Z
    8360:	80 80       	ld	r8, Z
    8362:	80 80       	ld	r8, Z
    8364:	80 80       	ld	r8, Z
    8366:	80 80       	ld	r8, Z
    8368:	80 80       	ld	r8, Z
    836a:	80 80       	ld	r8, Z
    836c:	80 80       	ld	r8, Z
    836e:	80 80       	ld	r8, Z
    8370:	80 80       	ld	r8, Z
    8372:	80 80       	ld	r8, Z
    8374:	80 80       	ld	r8, Z
    8376:	80 80       	ld	r8, Z
    8378:	80 80       	ld	r8, Z
    837a:	80 80       	ld	r8, Z
    837c:	80 80       	ld	r8, Z
    837e:	80 80       	ld	r8, Z
    8380:	80 80       	ld	r8, Z
    8382:	80 80       	ld	r8, Z
    8384:	80 80       	ld	r8, Z
    8386:	80 80       	ld	r8, Z
    8388:	80 80       	ld	r8, Z
    838a:	80 80       	ld	r8, Z
    838c:	80 80       	ld	r8, Z
    838e:	80 80       	ld	r8, Z
    8390:	80 80       	ld	r8, Z
    8392:	80 80       	ld	r8, Z
    8394:	80 80       	ld	r8, Z
    8396:	80 80       	ld	r8, Z
    8398:	80 80       	ld	r8, Z
    839a:	80 80       	ld	r8, Z
    839c:	80 80       	ld	r8, Z
    839e:	80 80       	ld	r8, Z
    83a0:	80 80       	ld	r8, Z
    83a2:	80 80       	ld	r8, Z
    83a4:	80 80       	ld	r8, Z
    83a6:	80 80       	ld	r8, Z
    83a8:	80 80       	ld	r8, Z
    83aa:	80 80       	ld	r8, Z
    83ac:	80 80       	ld	r8, Z
    83ae:	80 80       	ld	r8, Z
    83b0:	80 80       	ld	r8, Z
    83b2:	80 80       	ld	r8, Z
    83b4:	80 80       	ld	r8, Z
    83b6:	80 80       	ld	r8, Z
    83b8:	80 80       	ld	r8, Z
    83ba:	80 80       	ld	r8, Z
    83bc:	80 80       	ld	r8, Z
    83be:	80 80       	ld	r8, Z
    83c0:	80 80       	ld	r8, Z
    83c2:	80 80       	ld	r8, Z
    83c4:	80 80       	ld	r8, Z
    83c6:	80 80       	ld	r8, Z
    83c8:	80 80       	ld	r8, Z
    83ca:	80 80       	ld	r8, Z
    83cc:	80 80       	ld	r8, Z
    83ce:	80 80       	ld	r8, Z
    83d0:	80 80       	ld	r8, Z
    83d2:	80 80       	ld	r8, Z
    83d4:	80 80       	ld	r8, Z
    83d6:	80 80       	ld	r8, Z
    83d8:	80 80       	ld	r8, Z
    83da:	80 80       	ld	r8, Z
    83dc:	80 80       	ld	r8, Z
    83de:	80 80       	ld	r8, Z
    83e0:	80 80       	ld	r8, Z
    83e2:	80 80       	ld	r8, Z
    83e4:	80 80       	ld	r8, Z
    83e6:	80 80       	ld	r8, Z
    83e8:	80 80       	ld	r8, Z
    83ea:	80 80       	ld	r8, Z
    83ec:	80 80       	ld	r8, Z
    83ee:	80 80       	ld	r8, Z
    83f0:	80 80       	ld	r8, Z
    83f2:	80 80       	ld	r8, Z
    83f4:	80 80       	ld	r8, Z
    83f6:	80 80       	ld	r8, Z
    83f8:	80 80       	ld	r8, Z
    83fa:	80 80       	ld	r8, Z
    83fc:	80 80       	ld	r8, Z
    83fe:	80 80       	ld	r8, Z
    8400:	7f 7f       	andi	r23, 0xFF	; 255
    8402:	7f 7f       	andi	r23, 0xFF	; 255
    8404:	7f 7f       	andi	r23, 0xFF	; 255
    8406:	7f 7f       	andi	r23, 0xFF	; 255
    8408:	7f 7f       	andi	r23, 0xFF	; 255
    840a:	7f 7f       	andi	r23, 0xFF	; 255
    840c:	7f 7f       	andi	r23, 0xFF	; 255
    840e:	7f 7f       	andi	r23, 0xFF	; 255
    8410:	7f 7f       	andi	r23, 0xFF	; 255
    8412:	7f 7f       	andi	r23, 0xFF	; 255
    8414:	7f 7f       	andi	r23, 0xFF	; 255
    8416:	7f 7f       	andi	r23, 0xFF	; 255
    8418:	7f 7f       	andi	r23, 0xFF	; 255
    841a:	7f 7f       	andi	r23, 0xFF	; 255
    841c:	7f 7f       	andi	r23, 0xFF	; 255
    841e:	7f 7f       	andi	r23, 0xFF	; 255
    8420:	7f 7f       	andi	r23, 0xFF	; 255
    8422:	7f 7f       	andi	r23, 0xFF	; 255
    8424:	7f 7f       	andi	r23, 0xFF	; 255
    8426:	7f 7f       	andi	r23, 0xFF	; 255
    8428:	7f 7f       	andi	r23, 0xFF	; 255
    842a:	7f 7f       	andi	r23, 0xFF	; 255
    842c:	7f 7f       	andi	r23, 0xFF	; 255
    842e:	7f 7f       	andi	r23, 0xFF	; 255
    8430:	7f 7f       	andi	r23, 0xFF	; 255
    8432:	7f 7f       	andi	r23, 0xFF	; 255
    8434:	7f 7f       	andi	r23, 0xFF	; 255
    8436:	7f 7f       	andi	r23, 0xFF	; 255
    8438:	7f 7f       	andi	r23, 0xFF	; 255
    843a:	7f 7f       	andi	r23, 0xFF	; 255
    843c:	7f 7f       	andi	r23, 0xFF	; 255
    843e:	7f 7f       	andi	r23, 0xFF	; 255
    8440:	7f 7f       	andi	r23, 0xFF	; 255
    8442:	7f 7f       	andi	r23, 0xFF	; 255
    8444:	7f 7f       	andi	r23, 0xFF	; 255
    8446:	7f 7f       	andi	r23, 0xFF	; 255
    8448:	7f 7f       	andi	r23, 0xFF	; 255
    844a:	7f 7f       	andi	r23, 0xFF	; 255
    844c:	7f 7f       	andi	r23, 0xFF	; 255
    844e:	7f 7f       	andi	r23, 0xFF	; 255
    8450:	7f 7f       	andi	r23, 0xFF	; 255
    8452:	7f 7f       	andi	r23, 0xFF	; 255
    8454:	7f 7f       	andi	r23, 0xFF	; 255
    8456:	7f 7f       	andi	r23, 0xFF	; 255
    8458:	7f 7f       	andi	r23, 0xFF	; 255
    845a:	7f 7f       	andi	r23, 0xFF	; 255
    845c:	7f 7f       	andi	r23, 0xFF	; 255
    845e:	7f 7f       	andi	r23, 0xFF	; 255
    8460:	7f 7f       	andi	r23, 0xFF	; 255
    8462:	7f 7f       	andi	r23, 0xFF	; 255
    8464:	7f 7f       	andi	r23, 0xFF	; 255
    8466:	7f 7f       	andi	r23, 0xFF	; 255
    8468:	7f 7f       	andi	r23, 0xFF	; 255
    846a:	7f 7f       	andi	r23, 0xFF	; 255
    846c:	7f 7f       	andi	r23, 0xFF	; 255
    846e:	7f 7f       	andi	r23, 0xFF	; 255
    8470:	7f 7f       	andi	r23, 0xFF	; 255
    8472:	7f 7f       	andi	r23, 0xFF	; 255
    8474:	7f 7f       	andi	r23, 0xFF	; 255
    8476:	7f 7f       	andi	r23, 0xFF	; 255
    8478:	7f 7f       	andi	r23, 0xFF	; 255
    847a:	7f 7f       	andi	r23, 0xFF	; 255
    847c:	7f 7f       	andi	r23, 0xFF	; 255
    847e:	7f 7f       	andi	r23, 0xFF	; 255
    8480:	80 80       	ld	r8, Z
    8482:	80 80       	ld	r8, Z
    8484:	80 80       	ld	r8, Z
    8486:	80 80       	ld	r8, Z
    8488:	80 80       	ld	r8, Z
    848a:	80 80       	ld	r8, Z
    848c:	80 80       	ld	r8, Z
    848e:	80 80       	ld	r8, Z
    8490:	80 80       	ld	r8, Z
    8492:	80 80       	ld	r8, Z
    8494:	80 80       	ld	r8, Z
    8496:	80 80       	ld	r8, Z
    8498:	80 80       	ld	r8, Z
    849a:	80 80       	ld	r8, Z
    849c:	80 80       	ld	r8, Z
    849e:	80 80       	ld	r8, Z
    84a0:	80 80       	ld	r8, Z
    84a2:	80 80       	ld	r8, Z
    84a4:	80 80       	ld	r8, Z
    84a6:	80 80       	ld	r8, Z
    84a8:	80 80       	ld	r8, Z
    84aa:	80 80       	ld	r8, Z
    84ac:	80 80       	ld	r8, Z
    84ae:	80 80       	ld	r8, Z
    84b0:	80 80       	ld	r8, Z
    84b2:	80 80       	ld	r8, Z
    84b4:	80 80       	ld	r8, Z
    84b6:	80 80       	ld	r8, Z
    84b8:	80 80       	ld	r8, Z
    84ba:	80 80       	ld	r8, Z
    84bc:	80 80       	ld	r8, Z
    84be:	80 80       	ld	r8, Z
    84c0:	80 80       	ld	r8, Z
    84c2:	80 80       	ld	r8, Z
    84c4:	80 80       	ld	r8, Z
    84c6:	80 80       	ld	r8, Z
    84c8:	80 80       	ld	r8, Z
    84ca:	80 80       	ld	r8, Z
    84cc:	80 80       	ld	r8, Z
    84ce:	80 80       	ld	r8, Z
    84d0:	80 80       	ld	r8, Z
    84d2:	80 80       	ld	r8, Z
    84d4:	80 80       	ld	r8, Z
    84d6:	80 80       	ld	r8, Z
    84d8:	80 80       	ld	r8, Z
    84da:	80 80       	ld	r8, Z
    84dc:	80 80       	ld	r8, Z
    84de:	80 80       	ld	r8, Z
    84e0:	80 80       	ld	r8, Z
    84e2:	80 80       	ld	r8, Z
    84e4:	80 80       	ld	r8, Z
    84e6:	80 80       	ld	r8, Z
    84e8:	80 80       	ld	r8, Z
    84ea:	80 80       	ld	r8, Z
    84ec:	80 80       	ld	r8, Z
    84ee:	80 80       	ld	r8, Z
    84f0:	80 80       	ld	r8, Z
    84f2:	80 80       	ld	r8, Z
    84f4:	80 80       	ld	r8, Z
    84f6:	80 80       	ld	r8, Z
    84f8:	80 80       	ld	r8, Z
    84fa:	80 80       	ld	r8, Z
    84fc:	80 80       	ld	r8, Z
    84fe:	80 80       	ld	r8, Z
    8500:	7f 7f       	andi	r23, 0xFF	; 255
    8502:	7f 7f       	andi	r23, 0xFF	; 255
    8504:	7f 7f       	andi	r23, 0xFF	; 255
    8506:	7f 7f       	andi	r23, 0xFF	; 255
    8508:	7f 7f       	andi	r23, 0xFF	; 255
    850a:	7f 7f       	andi	r23, 0xFF	; 255
    850c:	7f 7f       	andi	r23, 0xFF	; 255
    850e:	7f 7f       	andi	r23, 0xFF	; 255
    8510:	7f 7f       	andi	r23, 0xFF	; 255
    8512:	7f 7f       	andi	r23, 0xFF	; 255
    8514:	7f 7f       	andi	r23, 0xFF	; 255
    8516:	7f 7f       	andi	r23, 0xFF	; 255
    8518:	7f 7f       	andi	r23, 0xFF	; 255
    851a:	7f 7f       	andi	r23, 0xFF	; 255
    851c:	7f 7f       	andi	r23, 0xFF	; 255
    851e:	7f 7f       	andi	r23, 0xFF	; 255
    8520:	7f 7f       	andi	r23, 0xFF	; 255
    8522:	7f 7f       	andi	r23, 0xFF	; 255
    8524:	7f 7f       	andi	r23, 0xFF	; 255
    8526:	7f 7f       	andi	r23, 0xFF	; 255
    8528:	7f 7f       	andi	r23, 0xFF	; 255
    852a:	7f 7f       	andi	r23, 0xFF	; 255
    852c:	7f 7f       	andi	r23, 0xFF	; 255
    852e:	7f 7f       	andi	r23, 0xFF	; 255
    8530:	7f 7f       	andi	r23, 0xFF	; 255
    8532:	7f 7f       	andi	r23, 0xFF	; 255
    8534:	7f 7f       	andi	r23, 0xFF	; 255
    8536:	7f 7f       	andi	r23, 0xFF	; 255
    8538:	7f 7f       	andi	r23, 0xFF	; 255
    853a:	7f 7f       	andi	r23, 0xFF	; 255
    853c:	7f 7f       	andi	r23, 0xFF	; 255
    853e:	7f 7f       	andi	r23, 0xFF	; 255
    8540:	7f 7f       	andi	r23, 0xFF	; 255
    8542:	7f 7f       	andi	r23, 0xFF	; 255
    8544:	7f 7f       	andi	r23, 0xFF	; 255
    8546:	7f 7f       	andi	r23, 0xFF	; 255
    8548:	7f 7f       	andi	r23, 0xFF	; 255
    854a:	7f 7f       	andi	r23, 0xFF	; 255
    854c:	7f 7f       	andi	r23, 0xFF	; 255
    854e:	7f 7f       	andi	r23, 0xFF	; 255
    8550:	7f 7f       	andi	r23, 0xFF	; 255
    8552:	7f 7f       	andi	r23, 0xFF	; 255
    8554:	7f 7f       	andi	r23, 0xFF	; 255
    8556:	7f 7f       	andi	r23, 0xFF	; 255
    8558:	7f 7f       	andi	r23, 0xFF	; 255
    855a:	7f 7f       	andi	r23, 0xFF	; 255
    855c:	7f 7f       	andi	r23, 0xFF	; 255
    855e:	7f 7f       	andi	r23, 0xFF	; 255
    8560:	7f 7f       	andi	r23, 0xFF	; 255
    8562:	7f 7f       	andi	r23, 0xFF	; 255
    8564:	7f 7f       	andi	r23, 0xFF	; 255
    8566:	7f 7f       	andi	r23, 0xFF	; 255
    8568:	7f 7f       	andi	r23, 0xFF	; 255
    856a:	7f 7f       	andi	r23, 0xFF	; 255
    856c:	7f 7f       	andi	r23, 0xFF	; 255
    856e:	7f 7f       	andi	r23, 0xFF	; 255
    8570:	7f 7f       	andi	r23, 0xFF	; 255
    8572:	7f 7f       	andi	r23, 0xFF	; 255
    8574:	7f 7f       	andi	r23, 0xFF	; 255
    8576:	7f 7f       	andi	r23, 0xFF	; 255
    8578:	7f 7f       	andi	r23, 0xFF	; 255
    857a:	7f 7f       	andi	r23, 0xFF	; 255
    857c:	7f 7f       	andi	r23, 0xFF	; 255
    857e:	7f 7f       	andi	r23, 0xFF	; 255
    8580:	7f 7f       	andi	r23, 0xFF	; 255
    8582:	7f 7f       	andi	r23, 0xFF	; 255
    8584:	7f 7f       	andi	r23, 0xFF	; 255
    8586:	7f 7f       	andi	r23, 0xFF	; 255
    8588:	7f 7f       	andi	r23, 0xFF	; 255
    858a:	7f 7f       	andi	r23, 0xFF	; 255
    858c:	7f 7f       	andi	r23, 0xFF	; 255
    858e:	7f 7f       	andi	r23, 0xFF	; 255
    8590:	7f 7f       	andi	r23, 0xFF	; 255
    8592:	7f 7f       	andi	r23, 0xFF	; 255
    8594:	7f 7f       	andi	r23, 0xFF	; 255
    8596:	7f 7f       	andi	r23, 0xFF	; 255
    8598:	7f 7f       	andi	r23, 0xFF	; 255
    859a:	7f 7f       	andi	r23, 0xFF	; 255
    859c:	7f 7f       	andi	r23, 0xFF	; 255
    859e:	7f 7f       	andi	r23, 0xFF	; 255
    85a0:	7f 7f       	andi	r23, 0xFF	; 255
    85a2:	7f 7f       	andi	r23, 0xFF	; 255
    85a4:	7f 7f       	andi	r23, 0xFF	; 255
    85a6:	7f 7f       	andi	r23, 0xFF	; 255
    85a8:	7f 7f       	andi	r23, 0xFF	; 255
    85aa:	7f 7f       	andi	r23, 0xFF	; 255
    85ac:	7f 7f       	andi	r23, 0xFF	; 255
    85ae:	7f 7f       	andi	r23, 0xFF	; 255
    85b0:	7f 7f       	andi	r23, 0xFF	; 255
    85b2:	7f 7f       	andi	r23, 0xFF	; 255
    85b4:	7f 7f       	andi	r23, 0xFF	; 255
    85b6:	7f 7f       	andi	r23, 0xFF	; 255
    85b8:	7f 7f       	andi	r23, 0xFF	; 255
    85ba:	7f 7f       	andi	r23, 0xFF	; 255
    85bc:	7f 7f       	andi	r23, 0xFF	; 255
    85be:	7f 7f       	andi	r23, 0xFF	; 255
    85c0:	80 80       	ld	r8, Z
    85c2:	80 80       	ld	r8, Z
    85c4:	80 80       	ld	r8, Z
    85c6:	80 80       	ld	r8, Z
    85c8:	80 80       	ld	r8, Z
    85ca:	80 80       	ld	r8, Z
    85cc:	80 80       	ld	r8, Z
    85ce:	80 80       	ld	r8, Z
    85d0:	80 80       	ld	r8, Z
    85d2:	80 80       	ld	r8, Z
    85d4:	80 80       	ld	r8, Z
    85d6:	80 80       	ld	r8, Z
    85d8:	80 80       	ld	r8, Z
    85da:	80 80       	ld	r8, Z
    85dc:	80 80       	ld	r8, Z
    85de:	80 80       	ld	r8, Z
    85e0:	80 80       	ld	r8, Z
    85e2:	80 80       	ld	r8, Z
    85e4:	80 80       	ld	r8, Z
    85e6:	80 80       	ld	r8, Z
    85e8:	80 80       	ld	r8, Z
    85ea:	80 80       	ld	r8, Z
    85ec:	80 80       	ld	r8, Z
    85ee:	80 80       	ld	r8, Z
    85f0:	80 80       	ld	r8, Z
    85f2:	80 80       	ld	r8, Z
    85f4:	80 80       	ld	r8, Z
    85f6:	80 80       	ld	r8, Z
    85f8:	80 80       	ld	r8, Z
    85fa:	80 80       	ld	r8, Z
    85fc:	80 80       	ld	r8, Z
    85fe:	80 80       	ld	r8, Z
    8600:	03 09       	sbc	r16, r3
    8602:	13 1e       	adc	r1, r19
    8604:	28 31       	cpi	r18, 0x18	; 24
    8606:	3a 40       	sbci	r19, 0x0A	; 10
    8608:	46 4c       	sbci	r20, 0xC6	; 198
    860a:	50 54       	subi	r21, 0x40	; 64
    860c:	58 5b       	subi	r21, 0xB8	; 184
    860e:	5e 61       	ori	r21, 0x1E	; 30
    8610:	63 65       	ori	r22, 0x53	; 83
    8612:	67 69       	ori	r22, 0x97	; 151
    8614:	6b 6c       	ori	r22, 0xCB	; 203
    8616:	6e 6f       	ori	r22, 0xFE	; 254
    8618:	70 71       	andi	r23, 0x10	; 16
    861a:	72 73       	andi	r23, 0x32	; 50
    861c:	74 75       	andi	r23, 0x54	; 84
    861e:	76 77       	andi	r23, 0x76	; 118
    8620:	77 78       	andi	r23, 0x87	; 135
    8622:	79 79       	andi	r23, 0x99	; 153
    8624:	7a 7a       	andi	r23, 0xAA	; 170
    8626:	7b 7b       	andi	r23, 0xBB	; 187
    8628:	7c 7c       	andi	r23, 0xCC	; 204
    862a:	7c 7d       	andi	r23, 0xDC	; 220
    862c:	7d 7d       	andi	r23, 0xDD	; 221
    862e:	7e 7e       	andi	r23, 0xEE	; 238
    8630:	7e 7e       	andi	r23, 0xEE	; 238
    8632:	7f 7f       	andi	r23, 0xFF	; 255
    8634:	7f 7f       	andi	r23, 0xFF	; 255
    8636:	7f 7f       	andi	r23, 0xFF	; 255
    8638:	7f 7f       	andi	r23, 0xFF	; 255
    863a:	7f 7f       	andi	r23, 0xFF	; 255
    863c:	7f 7f       	andi	r23, 0xFF	; 255
    863e:	7f 7f       	andi	r23, 0xFF	; 255
    8640:	7f 7f       	andi	r23, 0xFF	; 255
    8642:	7f 7f       	andi	r23, 0xFF	; 255
    8644:	7f 7f       	andi	r23, 0xFF	; 255
    8646:	7f 7f       	andi	r23, 0xFF	; 255
    8648:	7f 7f       	andi	r23, 0xFF	; 255
    864a:	7f 7f       	andi	r23, 0xFF	; 255
    864c:	7f 7e       	andi	r23, 0xEF	; 239
    864e:	7e 7e       	andi	r23, 0xEE	; 238
    8650:	7e 7d       	andi	r23, 0xDE	; 222
    8652:	7d 7d       	andi	r23, 0xDD	; 221
    8654:	7c 7c       	andi	r23, 0xCC	; 204
    8656:	7c 7b       	andi	r23, 0xBC	; 188
    8658:	7b 7a       	andi	r23, 0xAB	; 171
    865a:	7a 79       	andi	r23, 0x9A	; 154
    865c:	79 78       	andi	r23, 0x89	; 137
    865e:	77 77       	andi	r23, 0x77	; 119
    8660:	76 75       	andi	r23, 0x56	; 86
    8662:	74 73       	andi	r23, 0x34	; 52
    8664:	72 71       	andi	r23, 0x12	; 18
    8666:	70 6f       	ori	r23, 0xF0	; 240
    8668:	6e 6c       	ori	r22, 0xCE	; 206
    866a:	6b 69       	ori	r22, 0x9B	; 155
    866c:	67 65       	ori	r22, 0x57	; 87
    866e:	63 61       	ori	r22, 0x13	; 19
    8670:	5e 5b       	subi	r21, 0xBE	; 190
    8672:	58 54       	subi	r21, 0x48	; 72
    8674:	50 4c       	sbci	r21, 0xC0	; 192
    8676:	46 40       	sbci	r20, 0x06	; 6
    8678:	3a 31       	cpi	r19, 0x1A	; 26
    867a:	28 1e       	adc	r2, r24
    867c:	13 09       	sbc	r17, r3
    867e:	03 00       	.word	0x0003	; ????
    8680:	c6 cc       	rjmp	.-1652   	; 0x800e <waves+0xe>
    8682:	d5 db       	rcall	.-2134   	; 0x7e2e <steptable+0x26>
    8684:	df e3       	ldi	r29, 0x3F	; 63
    8686:	e5 e7       	ldi	r30, 0x75	; 117
    8688:	e9 ea       	ldi	r30, 0xA9	; 169
    868a:	eb ec       	ldi	r30, 0xCB	; 203
    868c:	ed ee       	ldi	r30, 0xED	; 237
    868e:	ef ef       	ldi	r30, 0xFF	; 255
    8690:	f0 f0       	brcs	.+60     	; 0x86ce <waves+0x6ce>
    8692:	f0 f1       	brcs	.+124    	; 0x8710 <waves+0x710>
    8694:	f1 f1       	breq	.+124    	; 0x8712 <waves+0x712>
    8696:	f1 f2       	breq	.-68     	; 0x8654 <waves+0x654>
    8698:	f2 f2       	brmi	.-68     	; 0x8656 <waves+0x656>
    869a:	f2 f2       	brmi	.-68     	; 0x8658 <waves+0x658>
    869c:	f2 f2       	brmi	.-68     	; 0x865a <waves+0x65a>
    869e:	f2 f3       	brmi	.-4      	; 0x869c <waves+0x69c>
    86a0:	f3 f3       	brvs	.-4      	; 0x869e <waves+0x69e>
    86a2:	f3 f3       	brvs	.-4      	; 0x86a0 <waves+0x6a0>
    86a4:	f3 f3       	brvs	.-4      	; 0x86a2 <waves+0x6a2>
    86a6:	f3 f3       	brvs	.-4      	; 0x86a4 <waves+0x6a4>
    86a8:	f3 f3       	brvs	.-4      	; 0x86a6 <waves+0x6a6>
    86aa:	f3 f3       	brvs	.-4      	; 0x86a8 <waves+0x6a8>
    86ac:	f3 f3       	brvs	.-4      	; 0x86aa <waves+0x6aa>
    86ae:	f3 f3       	brvs	.-4      	; 0x86ac <waves+0x6ac>
    86b0:	f3 f3       	brvs	.-4      	; 0x86ae <waves+0x6ae>
    86b2:	f3 f3       	brvs	.-4      	; 0x86b0 <waves+0x6b0>
    86b4:	f3 f3       	brvs	.-4      	; 0x86b2 <waves+0x6b2>
    86b6:	f3 f3       	brvs	.-4      	; 0x86b4 <waves+0x6b4>
    86b8:	f3 f3       	brvs	.-4      	; 0x86b6 <waves+0x6b6>
    86ba:	f3 f3       	brvs	.-4      	; 0x86b8 <waves+0x6b8>
    86bc:	f3 f3       	brvs	.-4      	; 0x86ba <waves+0x6ba>
    86be:	f3 f3       	brvs	.-4      	; 0x86bc <waves+0x6bc>
    86c0:	f3 f3       	brvs	.-4      	; 0x86be <waves+0x6be>
    86c2:	f3 f3       	brvs	.-4      	; 0x86c0 <waves+0x6c0>
    86c4:	f3 f3       	brvs	.-4      	; 0x86c2 <waves+0x6c2>
    86c6:	f3 f3       	brvs	.-4      	; 0x86c4 <waves+0x6c4>
    86c8:	f3 f3       	brvs	.-4      	; 0x86c6 <waves+0x6c6>
    86ca:	f3 f3       	brvs	.-4      	; 0x86c8 <waves+0x6c8>
    86cc:	f3 f3       	brvs	.-4      	; 0x86ca <waves+0x6ca>
    86ce:	f3 f3       	brvs	.-4      	; 0x86cc <waves+0x6cc>
    86d0:	f3 f3       	brvs	.-4      	; 0x86ce <waves+0x6ce>
    86d2:	f3 f3       	brvs	.-4      	; 0x86d0 <waves+0x6d0>
    86d4:	f3 f3       	brvs	.-4      	; 0x86d2 <waves+0x6d2>
    86d6:	f3 f3       	brvs	.-4      	; 0x86d4 <waves+0x6d4>
    86d8:	f3 f3       	brvs	.-4      	; 0x86d6 <waves+0x6d6>
    86da:	f3 f3       	brvs	.-4      	; 0x86d8 <waves+0x6d8>
    86dc:	f3 f3       	brvs	.-4      	; 0x86da <waves+0x6da>
    86de:	f3 f3       	brvs	.-4      	; 0x86dc <waves+0x6dc>
    86e0:	f2 f2       	brmi	.-68     	; 0x869e <waves+0x69e>
    86e2:	f2 f2       	brmi	.-68     	; 0x86a0 <waves+0x6a0>
    86e4:	f2 f2       	brmi	.-68     	; 0x86a2 <waves+0x6a2>
    86e6:	f2 f2       	brmi	.-68     	; 0x86a4 <waves+0x6a4>
    86e8:	f1 f1       	breq	.+124    	; 0x8766 <waves+0x766>
    86ea:	f1 f1       	breq	.+124    	; 0x8768 <waves+0x768>
    86ec:	f0 f0       	brcs	.+60     	; 0x872a <waves+0x72a>
    86ee:	f0 ef       	ldi	r31, 0xF0	; 240
    86f0:	ef ee       	ldi	r30, 0xEF	; 239
    86f2:	ed ec       	ldi	r30, 0xCD	; 205
    86f4:	eb ea       	ldi	r30, 0xAB	; 171
    86f6:	e9 e7       	ldi	r30, 0x79	; 121
    86f8:	e5 e3       	ldi	r30, 0x35	; 53
    86fa:	df db       	rcall	.-2114   	; 0x7eba <steptable+0xb2>
    86fc:	d5 cc       	rjmp	.-1622   	; 0x80a8 <waves+0xa8>
    86fe:	c6 00       	.word	0x00c6	; ????
    8700:	00 28       	or	r0, r0
    8702:	3d 42       	sbci	r19, 0x2D	; 45
    8704:	30 2d       	mov	r19, r0
    8706:	2c 2b       	or	r18, r28
    8708:	2c 2d       	mov	r18, r12
    870a:	2e 2f       	mov	r18, r30
    870c:	30 32       	cpi	r19, 0x20	; 32
    870e:	33 35       	cpi	r19, 0x53	; 83
    8710:	37 39       	cpi	r19, 0x97	; 151
    8712:	3b 3d       	cpi	r19, 0xDB	; 219
    8714:	3f 41       	sbci	r19, 0x1F	; 31
    8716:	43 45       	sbci	r20, 0x53	; 83
    8718:	48 4a       	sbci	r20, 0xA8	; 168
    871a:	4c 4e       	sbci	r20, 0xEC	; 236
    871c:	50 53       	subi	r21, 0x30	; 48
    871e:	55 57       	subi	r21, 0x75	; 117
    8720:	59 5b       	subi	r21, 0xB9	; 185
    8722:	5d 5f       	subi	r21, 0xFD	; 253
    8724:	61 63       	ori	r22, 0x31	; 49
    8726:	65 67       	ori	r22, 0x75	; 117
    8728:	69 6b       	ori	r22, 0xB9	; 185
    872a:	6c 6e       	ori	r22, 0xEC	; 236
    872c:	70 71       	andi	r23, 0x10	; 16
    872e:	73 74       	andi	r23, 0x43	; 67
    8730:	75 77       	andi	r23, 0x75	; 117
    8732:	78 79       	andi	r23, 0x98	; 152
    8734:	7a 7b       	andi	r23, 0xBA	; 186
    8736:	7c 7d       	andi	r23, 0xDC	; 220
    8738:	7d 7e       	andi	r23, 0xED	; 237
    873a:	7e 7f       	andi	r23, 0xFE	; 254
    873c:	7f 7f       	andi	r23, 0xFF	; 255
    873e:	7f 7f       	andi	r23, 0xFF	; 255
    8740:	7f 7f       	andi	r23, 0xFF	; 255
    8742:	7f 7f       	andi	r23, 0xFF	; 255
    8744:	7f 7f       	andi	r23, 0xFF	; 255
    8746:	7e 7e       	andi	r23, 0xEE	; 238
    8748:	7d 7d       	andi	r23, 0xDD	; 221
    874a:	7c 7b       	andi	r23, 0xBC	; 188
    874c:	7a 79       	andi	r23, 0x9A	; 154
    874e:	78 77       	andi	r23, 0x78	; 120
    8750:	75 74       	andi	r23, 0x45	; 69
    8752:	73 71       	andi	r23, 0x13	; 19
    8754:	70 6e       	ori	r23, 0xE0	; 224
    8756:	6c 6b       	ori	r22, 0xBC	; 188
    8758:	69 67       	ori	r22, 0x79	; 121
    875a:	65 63       	ori	r22, 0x35	; 53
    875c:	61 5f       	subi	r22, 0xF1	; 241
    875e:	5d 5b       	subi	r21, 0xBD	; 189
    8760:	59 57       	subi	r21, 0x79	; 121
    8762:	55 53       	subi	r21, 0x35	; 53
    8764:	50 4e       	sbci	r21, 0xE0	; 224
    8766:	4c 4a       	sbci	r20, 0xAC	; 172
    8768:	48 45       	sbci	r20, 0x58	; 88
    876a:	43 41       	sbci	r20, 0x13	; 19
    876c:	3f 3d       	cpi	r19, 0xDF	; 223
    876e:	3b 39       	cpi	r19, 0x9B	; 155
    8770:	37 35       	cpi	r19, 0x57	; 87
    8772:	33 32       	cpi	r19, 0x23	; 35
    8774:	30 2f       	mov	r19, r16
    8776:	2e 2d       	mov	r18, r14
    8778:	2c 2b       	or	r18, r28
    877a:	2c 2d       	mov	r18, r12
    877c:	30 42       	sbci	r19, 0x20	; 32
    877e:	3d 28       	or	r3, r13
    8780:	00 e9       	ldi	r16, 0x90	; 144
    8782:	e5 fe       	sbrs	r14, 5
    8784:	d4 d7       	rcall	.+4008   	; 0x972e <init_enemy_shark+0x7e>
    8786:	d7 d7       	rcall	.+4014   	; 0x9736 <init_enemy_shark+0x86>
    8788:	d6 d4       	rcall	.+2476   	; 0x9136 <LBCollides+0x44>
    878a:	d2 d0       	rcall	.+420    	; 0x8930 <waves+0x930>
    878c:	ce cc       	rjmp	.-1636   	; 0x812a <waves+0x12a>
    878e:	ca c8       	rjmp	.-3692   	; 0x7924 <ProcessMusic+0x5c>
    8790:	c6 c3       	rjmp	.+1932   	; 0x8f1e <LBGetJoyPadState+0xe>
    8792:	c1 bf       	out	0x31, r28	; 49
    8794:	bd ba       	out	0x1d, r11	; 29
    8796:	b8 b6       	in	r11, 0x38	; 56
    8798:	b4 b1       	in	r27, 0x04	; 4
    879a:	af ad       	ldd	r26, Y+63	; 0x3f
    879c:	ab a9       	ldd	r26, Y+51	; 0x33
    879e:	a7 a5       	ldd	r26, Z+47	; 0x2f
    87a0:	a3 a1       	ldd	r26, Z+35	; 0x23
    87a2:	9f 9e       	mul	r9, r31
    87a4:	9c 9a       	sbi	0x13, 4	; 19
    87a6:	99 97       	sbiw	r26, 0x29	; 41
    87a8:	95 94       	asr	r9
    87aa:	93 91       	.word	0x9193	; ????
    87ac:	90 8f       	std	Z+24, r25	; 0x18
    87ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    87b0:	8b 8a       	std	Y+19, r8	; 0x13
    87b2:	89 88       	ldd	r8, Y+17	; 0x11
    87b4:	88 87       	std	Y+8, r24	; 0x08
    87b6:	86 85       	ldd	r24, Z+14	; 0x0e
    87b8:	85 84       	ldd	r8, Z+13	; 0x0d
    87ba:	84 84       	ldd	r8, Z+12	; 0x0c
    87bc:	83 83       	std	Z+3, r24	; 0x03
    87be:	83 83       	std	Z+3, r24	; 0x03
    87c0:	83 83       	std	Z+3, r24	; 0x03
    87c2:	83 83       	std	Z+3, r24	; 0x03
    87c4:	83 84       	ldd	r8, Z+11	; 0x0b
    87c6:	84 84       	ldd	r8, Z+12	; 0x0c
    87c8:	85 85       	ldd	r24, Z+13	; 0x0d
    87ca:	86 87       	std	Z+14, r24	; 0x0e
    87cc:	88 88       	ldd	r8, Y+16	; 0x10
    87ce:	89 8a       	std	Y+17, r8	; 0x11
    87d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    87d2:	8d 8f       	std	Y+29, r24	; 0x1d
    87d4:	90 91 93 94 	lds	r25, 0x9493
    87d8:	95 97       	sbiw	r26, 0x25	; 37
    87da:	99 9a       	sbi	0x13, 1	; 19
    87dc:	9c 9e       	mul	r9, r28
    87de:	9f a1       	ldd	r25, Y+39	; 0x27
    87e0:	a3 a5       	ldd	r26, Z+43	; 0x2b
    87e2:	a7 a9       	ldd	r26, Z+55	; 0x37
    87e4:	ab ad       	ldd	r26, Y+59	; 0x3b
    87e6:	af b1       	in	r26, 0x0f	; 15
    87e8:	b4 b6       	in	r11, 0x34	; 52
    87ea:	b8 ba       	out	0x18, r11	; 24
    87ec:	bd bf       	out	0x3d, r27	; 61
    87ee:	c1 c3       	rjmp	.+1922   	; 0x8f72 <LBGetJoyPadState+0x62>
    87f0:	c6 c8       	rjmp	.-3700   	; 0x797e <ProcessMusic+0xb6>
    87f2:	ca cc       	rjmp	.-1644   	; 0x8188 <waves+0x188>
    87f4:	ce d0       	rcall	.+412    	; 0x8992 <waves+0x992>
    87f6:	d2 d4       	rcall	.+2468   	; 0x919c <LBMapSprite+0x14>
    87f8:	d6 d7       	rcall	.+4012   	; 0x97a6 <clear_overlay+0x4>
    87fa:	d7 d7       	rcall	.+4014   	; 0x97aa <clear_overlay+0x8>
    87fc:	d4 fe       	sbrs	r13, 4
    87fe:	e5 e9       	ldi	r30, 0x95	; 149
    8800:	f9 f8       	.word	0xf8f9	; ????
    8802:	f9 f5       	brne	.+126    	; 0x8882 <waves+0x882>
    8804:	eb e1       	ldi	r30, 0x1B	; 27
    8806:	dd de       	rcall	.-582    	; 0x85c2 <waves+0x5c2>
    8808:	e0 e2       	ldi	r30, 0x20	; 32
    880a:	e4 e5       	ldi	r30, 0x54	; 84
    880c:	e6 e5       	ldi	r30, 0x56	; 86
    880e:	e4 e2       	ldi	r30, 0x24	; 36
    8810:	de d9       	rcall	.-3140   	; 0x7bce <ProcessMusic+0x306>
    8812:	d2 ca       	rjmp	.-2652   	; 0x7db8 <esmw+0x48>
    8814:	c1 b7       	in	r28, 0x31	; 49
    8816:	ac a2       	std	Y+36, r10	; 0x24
    8818:	99 91       	ld	r25, Y+
    881a:	8a 86       	std	Y+10, r8	; 0x0a
    881c:	83 81       	ldd	r24, Z+3	; 0x03
    881e:	80 80       	ld	r8, Z
    8820:	81 82       	std	Z+1, r8	; 0x01
    8822:	83 85       	ldd	r24, Z+11	; 0x0b
    8824:	86 88       	ldd	r8, Z+22	; 0x16
    8826:	8a 8c       	ldd	r8, Y+26	; 0x1a
    8828:	8d 8f       	std	Y+29, r24	; 0x1d
    882a:	90 92 93 95 	sts	0x9593, r9
    882e:	96 97       	sbiw	r26, 0x26	; 38
    8830:	98 99       	sbic	0x13, 0	; 19
    8832:	9a 9b       	sbis	0x13, 2	; 19
    8834:	9b 9c       	mul	r9, r11
    8836:	9d 9d       	mul	r25, r13
    8838:	9d 9e       	mul	r9, r29
    883a:	9e 9e       	mul	r9, r30
    883c:	9f 9f       	mul	r25, r31
    883e:	9f 9f       	mul	r25, r31
    8840:	9f 9f       	mul	r25, r31
    8842:	9f 9e       	mul	r9, r31
    8844:	9e 9e       	mul	r9, r30
    8846:	9d 9d       	mul	r25, r13
    8848:	9d 9c       	mul	r9, r13
    884a:	9b 9b       	sbis	0x13, 3	; 19
    884c:	9a 99       	sbic	0x13, 2	; 19
    884e:	98 97       	sbiw	r26, 0x28	; 40
    8850:	96 95       	lsr	r25
    8852:	93 92       	.word	0x9293	; ????
    8854:	90 8f       	std	Z+24, r25	; 0x18
    8856:	8d 8c       	ldd	r8, Y+29	; 0x1d
    8858:	8a 88       	ldd	r8, Y+18	; 0x12
    885a:	86 85       	ldd	r24, Z+14	; 0x0e
    885c:	83 82       	std	Z+3, r8	; 0x03
    885e:	81 80       	ldd	r8, Z+1	; 0x01
    8860:	80 81       	ld	r24, Z
    8862:	83 86       	std	Z+11, r8	; 0x0b
    8864:	8a 91       	ld	r24, -Y
    8866:	99 a2       	std	Y+33, r9	; 0x21
    8868:	ac b7       	in	r26, 0x3c	; 60
    886a:	c1 ca       	rjmp	.-2686   	; 0x7dee <esmw+0x7e>
    886c:	d2 d9       	rcall	.-3164   	; 0x7c12 <ProcessMusic+0x34a>
    886e:	de e2       	ldi	r29, 0x2E	; 46
    8870:	e4 e5       	ldi	r30, 0x54	; 84
    8872:	e6 e5       	ldi	r30, 0x56	; 86
    8874:	e4 e2       	ldi	r30, 0x24	; 36
    8876:	e0 de       	rcall	.-576    	; 0x8638 <waves+0x638>
    8878:	dd e1       	ldi	r29, 0x1D	; 29
    887a:	eb f5       	brvc	.+122    	; 0x88f6 <waves+0x8f6>
    887c:	f9 f8       	.word	0xf8f9	; ????
    887e:	f9 00       	.word	0x00f9	; ????
    8880:	07 08       	sbc	r0, r7
    8882:	07 0b       	sbc	r16, r23
    8884:	15 1f       	adc	r17, r21
    8886:	23 22       	and	r2, r19
    8888:	20 1e       	adc	r2, r16
    888a:	1c 1b       	sub	r17, r28
    888c:	1a 1b       	sub	r17, r26
    888e:	1c 1e       	adc	r1, r28
    8890:	22 27       	eor	r18, r18
    8892:	2e 36       	cpi	r18, 0x6E	; 110
    8894:	3f 49       	sbci	r19, 0x9F	; 159
    8896:	54 5e       	subi	r21, 0xE4	; 228
    8898:	67 6f       	ori	r22, 0xF7	; 247
    889a:	76 7a       	andi	r23, 0xA6	; 166
    889c:	7e 7f       	andi	r23, 0xFE	; 254
    889e:	7f 7f       	andi	r23, 0xFF	; 255
    88a0:	7f 7e       	andi	r23, 0xEF	; 239
    88a2:	7d 7b       	andi	r23, 0xBD	; 189
    88a4:	7a 78       	andi	r23, 0x8A	; 138
    88a6:	76 74       	andi	r23, 0x46	; 70
    88a8:	73 71       	andi	r23, 0x13	; 19
    88aa:	70 6e       	ori	r23, 0xE0	; 224
    88ac:	6d 6b       	ori	r22, 0xBD	; 189
    88ae:	6a 69       	ori	r22, 0x9A	; 154
    88b0:	68 67       	ori	r22, 0x78	; 120
    88b2:	66 65       	ori	r22, 0x56	; 86
    88b4:	65 64       	ori	r22, 0x45	; 69
    88b6:	64 63       	ori	r22, 0x34	; 52
    88b8:	63 62       	ori	r22, 0x23	; 35
    88ba:	62 62       	ori	r22, 0x22	; 34
    88bc:	61 61       	ori	r22, 0x11	; 17
    88be:	61 61       	ori	r22, 0x11	; 17
    88c0:	61 61       	ori	r22, 0x11	; 17
    88c2:	61 62       	ori	r22, 0x21	; 33
    88c4:	62 62       	ori	r22, 0x22	; 34
    88c6:	63 63       	ori	r22, 0x33	; 51
    88c8:	63 64       	ori	r22, 0x43	; 67
    88ca:	65 65       	ori	r22, 0x55	; 85
    88cc:	66 67       	ori	r22, 0x76	; 118
    88ce:	68 69       	ori	r22, 0x98	; 152
    88d0:	6a 6b       	ori	r22, 0xBA	; 186
    88d2:	6d 6e       	ori	r22, 0xED	; 237
    88d4:	70 71       	andi	r23, 0x10	; 16
    88d6:	73 74       	andi	r23, 0x43	; 67
    88d8:	76 78       	andi	r23, 0x86	; 134
    88da:	7a 7b       	andi	r23, 0xBA	; 186
    88dc:	7d 7e       	andi	r23, 0xED	; 237
    88de:	7f 7f       	andi	r23, 0xFF	; 255
    88e0:	7f 7f       	andi	r23, 0xFF	; 255
    88e2:	7e 7a       	andi	r23, 0xAE	; 174
    88e4:	76 6f       	ori	r23, 0xF6	; 246
    88e6:	67 5e       	subi	r22, 0xE7	; 231
    88e8:	54 49       	sbci	r21, 0x94	; 148
    88ea:	3f 36       	cpi	r19, 0x6F	; 111
    88ec:	2e 27       	eor	r18, r30
    88ee:	22 1e       	adc	r2, r18
    88f0:	1c 1b       	sub	r17, r28
    88f2:	1a 1b       	sub	r17, r26
    88f4:	1c 1e       	adc	r1, r28
    88f6:	20 22       	and	r2, r16
    88f8:	23 1f       	adc	r18, r19
    88fa:	15 0b       	sbc	r17, r21
    88fc:	07 08       	sbc	r0, r7
    88fe:	07 00       	.word	0x0007	; ????
    8900:	1f 31       	cpi	r17, 0x1F	; 31
    8902:	3d 44       	sbci	r19, 0x4D	; 77
    8904:	4e 53       	subi	r20, 0x3E	; 62
    8906:	54 56       	subi	r21, 0x64	; 100
    8908:	5a 5f       	subi	r21, 0xFA	; 250
    890a:	64 69       	ori	r22, 0x94	; 148
    890c:	6e 74       	andi	r22, 0x4E	; 78
    890e:	76 79       	andi	r23, 0x96	; 150
    8910:	7c 7f       	andi	r23, 0xFC	; 252
    8912:	7f 7f       	andi	r23, 0xFF	; 255
    8914:	7f 7f       	andi	r23, 0xFF	; 255
    8916:	7f 7f       	andi	r23, 0xFF	; 255
    8918:	7f 7f       	andi	r23, 0xFF	; 255
    891a:	7f 7f       	andi	r23, 0xFF	; 255
    891c:	7f 7f       	andi	r23, 0xFF	; 255
    891e:	7f 7f       	andi	r23, 0xFF	; 255
    8920:	7f 7f       	andi	r23, 0xFF	; 255
    8922:	7f 7f       	andi	r23, 0xFF	; 255
    8924:	7f 7f       	andi	r23, 0xFF	; 255
    8926:	7f 7f       	andi	r23, 0xFF	; 255
    8928:	7f 7f       	andi	r23, 0xFF	; 255
    892a:	7f 7f       	andi	r23, 0xFF	; 255
    892c:	7f 7f       	andi	r23, 0xFF	; 255
    892e:	7f 7f       	andi	r23, 0xFF	; 255
    8930:	7f 7f       	andi	r23, 0xFF	; 255
    8932:	7f 7f       	andi	r23, 0xFF	; 255
    8934:	7f 7f       	andi	r23, 0xFF	; 255
    8936:	7f 7f       	andi	r23, 0xFF	; 255
    8938:	7f 7f       	andi	r23, 0xFF	; 255
    893a:	7f 7f       	andi	r23, 0xFF	; 255
    893c:	7f 7f       	andi	r23, 0xFF	; 255
    893e:	7f 7f       	andi	r23, 0xFF	; 255
    8940:	7f 7f       	andi	r23, 0xFF	; 255
    8942:	7f 7f       	andi	r23, 0xFF	; 255
    8944:	7f 7f       	andi	r23, 0xFF	; 255
    8946:	7f 7f       	andi	r23, 0xFF	; 255
    8948:	7f 7f       	andi	r23, 0xFF	; 255
    894a:	7f 7f       	andi	r23, 0xFF	; 255
    894c:	7f 7f       	andi	r23, 0xFF	; 255
    894e:	7f 7f       	andi	r23, 0xFF	; 255
    8950:	7f 7f       	andi	r23, 0xFF	; 255
    8952:	7f 7f       	andi	r23, 0xFF	; 255
    8954:	7f 7f       	andi	r23, 0xFF	; 255
    8956:	7f 7f       	andi	r23, 0xFF	; 255
    8958:	7f 7f       	andi	r23, 0xFF	; 255
    895a:	7f 7f       	andi	r23, 0xFF	; 255
    895c:	7f 7f       	andi	r23, 0xFF	; 255
    895e:	7f 7f       	andi	r23, 0xFF	; 255
    8960:	7f 7f       	andi	r23, 0xFF	; 255
    8962:	7f 7f       	andi	r23, 0xFF	; 255
    8964:	7f 7f       	andi	r23, 0xFF	; 255
    8966:	7f 7f       	andi	r23, 0xFF	; 255
    8968:	7f 7f       	andi	r23, 0xFF	; 255
    896a:	7f 7f       	andi	r23, 0xFF	; 255
    896c:	7f 7f       	andi	r23, 0xFF	; 255
    896e:	7f 7f       	andi	r23, 0xFF	; 255
    8970:	7f 7f       	andi	r23, 0xFF	; 255
    8972:	7f 7f       	andi	r23, 0xFF	; 255
    8974:	7f 7f       	andi	r23, 0xFF	; 255
    8976:	7f 7f       	andi	r23, 0xFF	; 255
    8978:	7f 7f       	andi	r23, 0xFF	; 255
    897a:	7f 7c       	andi	r23, 0xCF	; 207
    897c:	78 71       	andi	r23, 0x18	; 24
    897e:	68 4c       	sbci	r22, 0xC8	; 200
    8980:	2c 1c       	adc	r2, r12
    8982:	12 0c       	add	r1, r2
    8984:	0a 0b       	sbc	r16, r26
    8986:	0a 05       	cpc	r16, r10
    8988:	fd f3       	brhs	.-2      	; 0x8988 <waves+0x988>
    898a:	e9 df       	rcall	.-46     	; 0x895e <waves+0x95e>
    898c:	d4 ca       	rjmp	.-2648   	; 0x7f36 <steptable+0x12e>
    898e:	c0 b7       	in	r28, 0x30	; 48
    8990:	ae a6       	std	Y+46, r10	; 0x2e
    8992:	9e 97       	sbiw	r26, 0x2e	; 46
    8994:	91 8b       	std	Z+17, r25	; 0x11
    8996:	86 85       	ldd	r24, Z+14	; 0x0e
    8998:	82 80       	ldd	r8, Z+2	; 0x02
    899a:	80 80       	ld	r8, Z
    899c:	80 80       	ld	r8, Z
    899e:	80 80       	ld	r8, Z
    89a0:	80 80       	ld	r8, Z
    89a2:	80 80       	ld	r8, Z
    89a4:	80 80       	ld	r8, Z
    89a6:	80 80       	ld	r8, Z
    89a8:	80 80       	ld	r8, Z
    89aa:	80 80       	ld	r8, Z
    89ac:	80 80       	ld	r8, Z
    89ae:	80 80       	ld	r8, Z
    89b0:	80 80       	ld	r8, Z
    89b2:	80 80       	ld	r8, Z
    89b4:	80 80       	ld	r8, Z
    89b6:	80 80       	ld	r8, Z
    89b8:	80 80       	ld	r8, Z
    89ba:	80 80       	ld	r8, Z
    89bc:	80 80       	ld	r8, Z
    89be:	80 80       	ld	r8, Z
    89c0:	80 80       	ld	r8, Z
    89c2:	80 80       	ld	r8, Z
    89c4:	80 80       	ld	r8, Z
    89c6:	80 80       	ld	r8, Z
    89c8:	80 80       	ld	r8, Z
    89ca:	80 80       	ld	r8, Z
    89cc:	80 80       	ld	r8, Z
    89ce:	80 80       	ld	r8, Z
    89d0:	80 80       	ld	r8, Z
    89d2:	80 80       	ld	r8, Z
    89d4:	80 80       	ld	r8, Z
    89d6:	80 80       	ld	r8, Z
    89d8:	80 80       	ld	r8, Z
    89da:	80 80       	ld	r8, Z
    89dc:	80 80       	ld	r8, Z
    89de:	80 80       	ld	r8, Z
    89e0:	80 80       	ld	r8, Z
    89e2:	80 80       	ld	r8, Z
    89e4:	80 80       	ld	r8, Z
    89e6:	80 80       	ld	r8, Z
    89e8:	80 80       	ld	r8, Z
    89ea:	80 80       	ld	r8, Z
    89ec:	80 80       	ld	r8, Z
    89ee:	80 80       	ld	r8, Z
    89f0:	80 80       	ld	r8, Z
    89f2:	80 80       	ld	r8, Z
    89f4:	80 87       	std	Z+8, r24	; 0x08
    89f6:	91 9d       	mul	r25, r1
    89f8:	ac c4       	rjmp	.+2392   	; 0x9352 <init_default_high_scores+0x24>
    89fa:	cb d4       	rcall	.+2454   	; 0x9392 <init_player_state+0x10>
    89fc:	dd f2       	brhs	.-74     	; 0x89b4 <waves+0x9b4>
    89fe:	fa fa       	.word	0xfafa	; ????

00008a00 <RestoreBackground>:
	unsigned char free_tile_index, userRamTilesCount=0,userRamTilesCount_tmp=0;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=userRamTilesCount;i<free_tile_index;i++){
    8a00:	80 91 f3 0c 	lds	r24, 0x0CF3
    8a04:	90 91 7e 0d 	lds	r25, 0x0D7E
    8a08:	89 17       	cp	r24, r25
    8a0a:	78 f4       	brcc	.+30     	; 0x8a2a <RestoreBackground+0x2a>
			//vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
			*ram_tiles_restore[i].addr=ram_tiles_restore[i].tileIndex;
    8a0c:	e8 2f       	mov	r30, r24
    8a0e:	f0 e0       	ldi	r31, 0x00	; 0
    8a10:	9f 01       	movw	r18, r30
    8a12:	22 0f       	add	r18, r18
    8a14:	33 1f       	adc	r19, r19
    8a16:	e2 0f       	add	r30, r18
    8a18:	f3 1f       	adc	r31, r19
    8a1a:	e0 5b       	subi	r30, 0xB0	; 176
    8a1c:	f3 4f       	sbci	r31, 0xF3	; 243
    8a1e:	a0 81       	ld	r26, Z
    8a20:	b1 81       	ldd	r27, Z+1	; 0x01
    8a22:	92 81       	ldd	r25, Z+2	; 0x02
    8a24:	9c 93       	st	X, r25
	unsigned char free_tile_index, userRamTilesCount=0,userRamTilesCount_tmp=0;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=userRamTilesCount;i<free_tile_index;i++){
    8a26:	8f 5f       	subi	r24, 0xFF	; 255
    8a28:	ed cf       	rjmp	.-38     	; 0x8a04 <RestoreBackground+0x4>
			//vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
			*ram_tiles_restore[i].addr=ram_tiles_restore[i].tileIndex;
		}	
	}
    8a2a:	08 95       	ret

00008a2c <ProcessSprites>:
		}

	}
	*/

	void ProcessSprites(){
    8a2c:	2f 92       	push	r2
    8a2e:	3f 92       	push	r3
    8a30:	4f 92       	push	r4
    8a32:	5f 92       	push	r5
    8a34:	6f 92       	push	r6
    8a36:	7f 92       	push	r7
    8a38:	8f 92       	push	r8
    8a3a:	9f 92       	push	r9
    8a3c:	af 92       	push	r10
    8a3e:	bf 92       	push	r11
    8a40:	cf 92       	push	r12
    8a42:	df 92       	push	r13
    8a44:	ef 92       	push	r14
    8a46:	ff 92       	push	r15
    8a48:	0f 93       	push	r16
    8a4a:	1f 93       	push	r17
    8a4c:	cf 93       	push	r28
    8a4e:	df 93       	push	r29
    8a50:	00 d0       	rcall	.+0      	; 0x8a52 <ProcessSprites+0x26>
    8a52:	00 d0       	rcall	.+0      	; 0x8a54 <ProcessSprites+0x28>
    8a54:	cd b7       	in	r28, 0x3d	; 61
    8a56:	de b7       	in	r29, 0x3e	; 62
	
		unsigned char i,bx,by,dx,dy,bt,x,y,tx=1,ty=1,wx,wy;
		unsigned int ramPtr,ssx,ssy;

		if(!spritesOn) return;
    8a58:	80 91 00 05 	lds	r24, 0x0500
    8a5c:	88 23       	and	r24, r24
    8a5e:	09 f4       	brne	.+2      	; 0x8a62 <ProcessSprites+0x36>
    8a60:	e0 c0       	rjmp	.+448    	; 0x8c22 <ProcessSprites+0x1f6>

		userRamTilesCount=userRamTilesCount_tmp;
    8a62:	80 91 f2 0c 	lds	r24, 0x0CF2
    8a66:	80 93 f3 0c 	sts	0x0CF3, r24
		free_tile_index=userRamTilesCount;
    8a6a:	80 93 7e 0d 	sts	0x0D7E, r24
    8a6e:	e0 e1       	ldi	r30, 0x10	; 16
    8a70:	ce 2e       	mov	r12, r30
    8a72:	e5 e0       	ldi	r30, 0x05	; 5
    8a74:	de 2e       	mov	r13, r30
	
		for(i=0;i<MAX_SPRITES;i++){
    8a76:	71 2c       	mov	r7, r1
			bx=sprites[i].x;
    8a78:	f6 01       	movw	r30, r12
    8a7a:	20 81       	ld	r18, Z

			if(bx!=(SCREEN_TILES_H*TILE_WIDTH)){
    8a7c:	20 3e       	cpi	r18, 0xE0	; 224
    8a7e:	09 f4       	brne	.+2      	; 0x8a82 <ProcessSprites+0x56>
    8a80:	b1 c0       	rjmp	.+354    	; 0x8be4 <ProcessSprites+0x1b8>
				//get tile's screen section offsets
				
				#if SCROLLING == 1
					ssx=sprites[i].x+Screen.scrollX;
    8a82:	80 91 b2 0c 	lds	r24, 0x0CB2
    8a86:	90 e0       	ldi	r25, 0x00	; 0
    8a88:	82 0f       	add	r24, r18
    8a8a:	91 1d       	adc	r25, r1
					ssy=sprites[i].y+Screen.scrollY;
    8a8c:	41 81       	ldd	r20, Z+1	; 0x01
    8a8e:	20 91 b3 0c 	lds	r18, 0x0CB3
    8a92:	30 e0       	ldi	r19, 0x00	; 0
    8a94:	24 0f       	add	r18, r20
    8a96:	31 1d       	adc	r19, r1

				tx=1;
				ty=1;

				//get the BG tiles that are overlapped by the sprite
				bx=ssx>>3;
    8a98:	ac 01       	movw	r20, r24
    8a9a:	73 e0       	ldi	r23, 0x03	; 3
    8a9c:	56 95       	lsr	r21
    8a9e:	47 95       	ror	r20
    8aa0:	7a 95       	dec	r23
    8aa2:	e1 f7       	brne	.-8      	; 0x8a9c <ProcessSprites+0x70>
    8aa4:	64 2e       	mov	r6, r20
				dx=ssx&0x7;
    8aa6:	87 70       	andi	r24, 0x07	; 7
				if(dx>0) tx++;
    8aa8:	11 f0       	breq	.+4      	; 0x8aae <ProcessSprites+0x82>
    8aaa:	92 e0       	ldi	r25, 0x02	; 2
    8aac:	01 c0       	rjmp	.+2      	; 0x8ab0 <ProcessSprites+0x84>
   				#else
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
    8aae:	91 e0       	ldi	r25, 0x01	; 1
    8ab0:	99 83       	std	Y+1, r25	; 0x01
				dx=ssx&0x7;
				if(dx>0) tx++;

				//by=ssy>>3;
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
    8ab2:	a9 01       	movw	r20, r18
    8ab4:	63 e0       	ldi	r22, 0x03	; 3
    8ab6:	56 95       	lsr	r21
    8ab8:	47 95       	ror	r20
    8aba:	6a 95       	dec	r22
    8abc:	e1 f7       	brne	.-8      	; 0x8ab6 <ProcessSprites+0x8a>
    8abe:	54 2e       	mov	r5, r20
				dy=ssy%TILE_HEIGHT;
    8ac0:	27 70       	andi	r18, 0x07	; 7
				if(dy>0) ty++;			
    8ac2:	19 f0       	breq	.+6      	; 0x8aca <ProcessSprites+0x9e>
    8ac4:	52 e0       	ldi	r21, 0x02	; 2
    8ac6:	35 2e       	mov	r3, r21
    8ac8:	02 c0       	rjmp	.+4      	; 0x8ace <ProcessSprites+0xa2>
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
				ty=1;
    8aca:	33 24       	eor	r3, r3
    8acc:	33 94       	inc	r3
								bt=free_tile_index;
								free_tile_index++;
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    8ace:	30 e0       	ldi	r19, 0x00	; 0
    8ad0:	32 2f       	mov	r19, r18
    8ad2:	22 27       	eor	r18, r18
    8ad4:	f9 01       	movw	r30, r18
    8ad6:	e8 0f       	add	r30, r24
    8ad8:	f1 1d       	adc	r31, r1
    8ada:	fc 83       	std	Y+4, r31	; 0x04
    8adc:	eb 83       	std	Y+3, r30	; 0x03
    8ade:	e1 2c       	mov	r14, r1
    8ae0:	f1 2c       	mov	r15, r1
    8ae2:	be 2c       	mov	r11, r14
    8ae4:	aa 24       	eor	r10, r10
    8ae6:	26 2c       	mov	r2, r6
    8ae8:	45 2c       	mov	r4, r5
    8aea:	4e 0c       	add	r4, r14
								    wy-=(VRAM_TILES_V*2);
							    }else if(wy>=VRAM_TILES_V){
							    	wy-=VRAM_TILES_V;
							    }
                            #else
                                if(wy>=(Screen.scrollHeight*2)){
    8aec:	84 2c       	mov	r8, r4
    8aee:	91 2c       	mov	r9, r1
    8af0:	84 2d       	mov	r24, r4
    8af2:	20 91 b4 0c 	lds	r18, 0x0CB4
    8af6:	42 2f       	mov	r20, r18
    8af8:	50 e0       	ldi	r21, 0x00	; 0
    8afa:	44 0f       	add	r20, r20
    8afc:	55 1f       	adc	r21, r21
    8afe:	84 16       	cp	r8, r20
    8b00:	95 06       	cpc	r9, r21
    8b02:	14 f0       	brlt	.+4      	; 0x8b08 <ProcessSprites+0xdc>
								    wy-=(Screen.scrollHeight*2);
    8b04:	22 0f       	add	r18, r18
    8b06:	03 c0       	rjmp	.+6      	; 0x8b0e <ProcessSprites+0xe2>
							    }else if(wy>=Screen.scrollHeight){
    8b08:	42 16       	cp	r4, r18
    8b0a:	10 f0       	brcs	.+4      	; 0x8b10 <ProcessSprites+0xe4>
							    	wy-=Screen.scrollHeight;
    8b0c:	84 2d       	mov	r24, r4
    8b0e:	82 1b       	sub	r24, r18
							    }
                            #endif
							if(wx>=VRAM_TILES_H)wx-=VRAM_TILES_H; //should always be 32
    8b10:	ff e1       	ldi	r31, 0x1F	; 31
    8b12:	f2 15       	cp	r31, r2
    8b14:	18 f4       	brcc	.+6      	; 0x8b1c <ProcessSprites+0xf0>
    8b16:	00 ee       	ldi	r16, 0xE0	; 224
    8b18:	02 0d       	add	r16, r2
    8b1a:	01 c0       	rjmp	.+2      	; 0x8b1e <ProcessSprites+0xf2>
    8b1c:	02 2d       	mov	r16, r2

							#if SCROLLING == 0
								ramPtr=(wy*VRAM_TILES_H)+wx;
							#else

								ramPtr=((wy>>3)*256)+(wx*8)+(wy&7);	
    8b1e:	28 2f       	mov	r18, r24
    8b20:	26 95       	lsr	r18
    8b22:	26 95       	lsr	r18
    8b24:	26 95       	lsr	r18
    8b26:	10 e0       	ldi	r17, 0x00	; 0
    8b28:	40 e2       	ldi	r20, 0x20	; 32
    8b2a:	24 9f       	mul	r18, r20
    8b2c:	00 0d       	add	r16, r0
    8b2e:	11 1d       	adc	r17, r1
    8b30:	11 24       	eor	r1, r1
    8b32:	23 e0       	ldi	r18, 0x03	; 3
    8b34:	00 0f       	add	r16, r16
    8b36:	11 1f       	adc	r17, r17
    8b38:	2a 95       	dec	r18
    8b3a:	e1 f7       	brne	.-8      	; 0x8b34 <ProcessSprites+0x108>
    8b3c:	87 70       	andi	r24, 0x07	; 7
    8b3e:	08 0f       	add	r16, r24
    8b40:	11 1d       	adc	r17, r1

							#endif

							bt=vram[ramPtr];						
    8b42:	00 50       	subi	r16, 0x00	; 0
    8b44:	1f 4f       	sbci	r17, 0xFF	; 255
    8b46:	f8 01       	movw	r30, r16
    8b48:	70 81       	ld	r23, Z

							if( ((bt>=RAM_TILES_COUNT) | (bt<userRamTilesCount)) && (free_tile_index < RAM_TILES_COUNT) ){ //if no ram free ignore tile
    8b4a:	81 e0       	ldi	r24, 0x01	; 1
    8b4c:	7c 31       	cpi	r23, 0x1C	; 28
    8b4e:	08 f4       	brcc	.+2      	; 0x8b52 <ProcessSprites+0x126>
    8b50:	80 e0       	ldi	r24, 0x00	; 0
    8b52:	21 e0       	ldi	r18, 0x01	; 1
    8b54:	30 91 f3 0c 	lds	r19, 0x0CF3
    8b58:	73 17       	cp	r23, r19
    8b5a:	18 f0       	brcs	.+6      	; 0x8b62 <ProcessSprites+0x136>
    8b5c:	20 e0       	ldi	r18, 0x00	; 0
    8b5e:	88 23       	and	r24, r24
    8b60:	51 f1       	breq	.+84     	; 0x8bb6 <ProcessSprites+0x18a>
    8b62:	60 91 7e 0d 	lds	r22, 0x0D7E
    8b66:	6c 31       	cpi	r22, 0x1C	; 28
    8b68:	20 f5       	brcc	.+72     	; 0x8bb2 <ProcessSprites+0x186>
								if( bt>=RAM_TILES_COUNT ){
    8b6a:	88 23       	and	r24, r24
    8b6c:	31 f0       	breq	.+12     	; 0x8b7a <ProcessSprites+0x14e>
									//tile is mapped to flash. Copy it to next free RAM tile.
									CopyFlashTile(bt-RAM_TILES_COUNT,free_tile_index);
    8b6e:	84 ee       	ldi	r24, 0xE4	; 228
    8b70:	87 0f       	add	r24, r23
    8b72:	7a 83       	std	Y+2, r23	; 0x02
    8b74:	0e 94 b8 34 	call	0x6970	; 0x6970 <CopyFlashTile>
    8b78:	06 c0       	rjmp	.+12     	; 0x8b86 <ProcessSprites+0x15a>
								}else if(bt<userRamTilesCount){
    8b7a:	22 23       	and	r18, r18
    8b7c:	29 f0       	breq	.+10     	; 0x8b88 <ProcessSprites+0x15c>
									//tile is a user ram tile. Copy it to next free RAM tile.
									CopyRamTile(bt,free_tile_index);
    8b7e:	87 2f       	mov	r24, r23
    8b80:	7a 83       	std	Y+2, r23	; 0x02
    8b82:	0e 94 47 35 	call	0x6a8e	; 0x6a8e <CopyRamTile>
    8b86:	7a 81       	ldd	r23, Y+2	; 0x02
								}
								ram_tiles_restore[free_tile_index].addr=(&vram[ramPtr]);
    8b88:	80 91 7e 0d 	lds	r24, 0x0D7E
    8b8c:	e8 2f       	mov	r30, r24
    8b8e:	f0 e0       	ldi	r31, 0x00	; 0
    8b90:	9f 01       	movw	r18, r30
    8b92:	22 0f       	add	r18, r18
    8b94:	33 1f       	adc	r19, r19
    8b96:	e2 0f       	add	r30, r18
    8b98:	f3 1f       	adc	r31, r19
    8b9a:	e0 5b       	subi	r30, 0xB0	; 176
    8b9c:	f3 4f       	sbci	r31, 0xF3	; 243
    8b9e:	11 83       	std	Z+1, r17	; 0x01
    8ba0:	00 83       	st	Z, r16
								ram_tiles_restore[free_tile_index].tileIndex=bt;
    8ba2:	72 83       	std	Z+2, r23	; 0x02
								vram[ramPtr]=free_tile_index;
    8ba4:	f8 01       	movw	r30, r16
    8ba6:	80 83       	st	Z, r24
								bt=free_tile_index;
								free_tile_index++;
    8ba8:	21 e0       	ldi	r18, 0x01	; 1
    8baa:	28 0f       	add	r18, r24
    8bac:	20 93 7e 0d 	sts	0x0D7E, r18
									CopyRamTile(bt,free_tile_index);
								}
								ram_tiles_restore[free_tile_index].addr=(&vram[ramPtr]);
								ram_tiles_restore[free_tile_index].tileIndex=bt;
								vram[ramPtr]=free_tile_index;
								bt=free_tile_index;
    8bb0:	78 2f       	mov	r23, r24
								free_tile_index++;
							}
				
							if(bt<RAM_TILES_COUNT){				
    8bb2:	7c 31       	cpi	r23, 0x1C	; 28
    8bb4:	38 f4       	brcc	.+14     	; 0x8bc4 <ProcessSprites+0x198>
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    8bb6:	2b 81       	ldd	r18, Y+3	; 0x03
    8bb8:	3c 81       	ldd	r19, Y+4	; 0x04
    8bba:	a5 01       	movw	r20, r10
    8bbc:	67 2f       	mov	r22, r23
    8bbe:	87 2d       	mov	r24, r7
    8bc0:	0e 94 d4 35 	call	0x6ba8	; 0x6ba8 <BlitSprite>
    8bc4:	ff ef       	ldi	r31, 0xFF	; 255
    8bc6:	af 1a       	sub	r10, r31
    8bc8:	bf 0a       	sbc	r11, r31
    8bca:	23 94       	inc	r2
    8bcc:	82 2d       	mov	r24, r2
    8bce:	86 19       	sub	r24, r6
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){

					for(x=0;x<tx;x++){
    8bd0:	99 81       	ldd	r25, Y+1	; 0x01
    8bd2:	89 17       	cp	r24, r25
    8bd4:	08 f4       	brcc	.+2      	; 0x8bd8 <ProcessSprites+0x1ac>
    8bd6:	8c cf       	rjmp	.-232    	; 0x8af0 <ProcessSprites+0xc4>
    8bd8:	ef ef       	ldi	r30, 0xFF	; 255
    8bda:	ee 1a       	sub	r14, r30
    8bdc:	fe 0a       	sbc	r15, r30
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){
    8bde:	e3 14       	cp	r14, r3
    8be0:	08 f4       	brcc	.+2      	; 0x8be4 <ProcessSprites+0x1b8>
    8be2:	7f cf       	rjmp	.-258    	; 0x8ae2 <ProcessSprites+0xb6>
		if(!spritesOn) return;

		userRamTilesCount=userRamTilesCount_tmp;
		free_tile_index=userRamTilesCount;
	
		for(i=0;i<MAX_SPRITES;i++){
    8be4:	73 94       	inc	r7
    8be6:	f4 e0       	ldi	r31, 0x04	; 4
    8be8:	cf 0e       	add	r12, r31
    8bea:	d1 1c       	adc	r13, r1
    8bec:	40 e1       	ldi	r20, 0x10	; 16
    8bee:	74 12       	cpse	r7, r20
    8bf0:	43 cf       	rjmp	.-378    	; 0x8a78 <ProcessSprites+0x4c>


		//restore BG tiles
		RestoreBackground();

	}
    8bf2:	0f 90       	pop	r0
    8bf4:	0f 90       	pop	r0
    8bf6:	0f 90       	pop	r0
    8bf8:	0f 90       	pop	r0
    8bfa:	df 91       	pop	r29
    8bfc:	cf 91       	pop	r28
    8bfe:	1f 91       	pop	r17
    8c00:	0f 91       	pop	r16
    8c02:	ff 90       	pop	r15
    8c04:	ef 90       	pop	r14
    8c06:	df 90       	pop	r13
    8c08:	cf 90       	pop	r12
    8c0a:	bf 90       	pop	r11
    8c0c:	af 90       	pop	r10
    8c0e:	9f 90       	pop	r9
    8c10:	8f 90       	pop	r8
    8c12:	7f 90       	pop	r7
    8c14:	6f 90       	pop	r6
    8c16:	5f 90       	pop	r5
    8c18:	4f 90       	pop	r4
    8c1a:	3f 90       	pop	r3
    8c1c:	2f 90       	pop	r2
			}//	if(bx<(SCREEN_TILES_H*TILE_WIDTH))		
		}


		//restore BG tiles
		RestoreBackground();
    8c1e:	0c 94 00 45 	jmp	0x8a00	; 0x8a00 <RestoreBackground>

	}
    8c22:	0f 90       	pop	r0
    8c24:	0f 90       	pop	r0
    8c26:	0f 90       	pop	r0
    8c28:	0f 90       	pop	r0
    8c2a:	df 91       	pop	r29
    8c2c:	cf 91       	pop	r28
    8c2e:	1f 91       	pop	r17
    8c30:	0f 91       	pop	r16
    8c32:	ff 90       	pop	r15
    8c34:	ef 90       	pop	r14
    8c36:	df 90       	pop	r13
    8c38:	cf 90       	pop	r12
    8c3a:	bf 90       	pop	r11
    8c3c:	af 90       	pop	r10
    8c3e:	9f 90       	pop	r9
    8c40:	8f 90       	pop	r8
    8c42:	7f 90       	pop	r7
    8c44:	6f 90       	pop	r6
    8c46:	5f 90       	pop	r5
    8c48:	4f 90       	pop	r4
    8c4a:	3f 90       	pop	r3
    8c4c:	2f 90       	pop	r2
    8c4e:	08 95       	ret

00008c50 <Scroll>:

	#if SCROLLING == 1
		//Scroll the screen by the relative amount specified (+/-)
		//This function handles screen wrapping on the Y axis if VRAM_TILES_V is less than 32
		void Scroll(char dx,char dy){
		Screen.scrollY+=dy;
    8c50:	90 91 b3 0c 	lds	r25, 0x0CB3
    8c54:	96 0f       	add	r25, r22
    8c56:	90 93 b3 0c 	sts	0x0CB3, r25
		Screen.scrollX+=dx;
    8c5a:	20 91 b2 0c 	lds	r18, 0x0CB2
    8c5e:	82 0f       	add	r24, r18
    8c60:	80 93 b2 0c 	sts	0x0CB2, r24

		if(Screen.scrollHeight<32){
    8c64:	80 91 b4 0c 	lds	r24, 0x0CB4
    8c68:	80 32       	cpi	r24, 0x20	; 32
    8c6a:	b0 f4       	brcc	.+44     	; 0x8c98 <Scroll+0x48>

			if(Screen.scrollY>=(Screen.scrollHeight*TILE_HEIGHT)){
    8c6c:	29 2f       	mov	r18, r25
    8c6e:	30 e0       	ldi	r19, 0x00	; 0
    8c70:	78 e0       	ldi	r23, 0x08	; 8
    8c72:	87 9f       	mul	r24, r23
    8c74:	a0 01       	movw	r20, r0
    8c76:	11 24       	eor	r1, r1
    8c78:	24 17       	cp	r18, r20
    8c7a:	35 07       	cpc	r19, r21
    8c7c:	6c f0       	brlt	.+26     	; 0x8c98 <Scroll+0x48>
				if(dy>=0){	
    8c7e:	67 fd       	sbrc	r22, 7
    8c80:	05 c0       	rjmp	.+10     	; 0x8c8c <Scroll+0x3c>
					Screen.scrollY=(Screen.scrollY-(Screen.scrollHeight*TILE_HEIGHT));
    8c82:	28 ef       	ldi	r18, 0xF8	; 248
    8c84:	82 9f       	mul	r24, r18
    8c86:	90 0d       	add	r25, r0
    8c88:	11 24       	eor	r1, r1
    8c8a:	04 c0       	rjmp	.+8      	; 0x8c94 <Scroll+0x44>
				}else{
					Screen.scrollY=((Screen.scrollHeight*TILE_HEIGHT)-1)-(0xff-Screen.scrollY);
    8c8c:	78 e0       	ldi	r23, 0x08	; 8
    8c8e:	87 9f       	mul	r24, r23
    8c90:	90 0d       	add	r25, r0
    8c92:	11 24       	eor	r1, r1
    8c94:	90 93 b3 0c 	sts	0x0CB3, r25
    8c98:	08 95       	ret

00008c9a <InitializeVideoMode>:
		#endif	
	}


	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){
    8c9a:	e0 e1       	ldi	r30, 0x10	; 16
    8c9c:	f5 e0       	ldi	r31, 0x05	; 5

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
			sprites[i].x=(SCREEN_TILES_H*TILE_WIDTH);		
    8c9e:	80 ee       	ldi	r24, 0xE0	; 224
    8ca0:	80 83       	st	Z, r24
    8ca2:	34 96       	adiw	r30, 0x04	; 4

	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
    8ca4:	95 e0       	ldi	r25, 0x05	; 5
    8ca6:	e0 35       	cpi	r30, 0x50	; 80
    8ca8:	f9 07       	cpc	r31, r25
    8caa:	d1 f7       	brne	.-12     	; 0x8ca0 <InitializeVideoMode+0x6>
		
		#if SCROLLING == 1
		//	for(int i=0;i<(OVERLAY_LINES*VRAM_TILES_H);i++){
		//		overlay_vram[i]=RAM_TILES_COUNT;
		//	}
			Screen.scrollHeight=VRAM_TILES_V;
    8cac:	80 e2       	ldi	r24, 0x20	; 32
    8cae:	80 93 b4 0c 	sts	0x0CB4, r24
			Screen.overlayHeight=0;
    8cb2:	10 92 af 0c 	sts	0x0CAF, r1
    8cb6:	08 95       	ret

00008cb8 <DrawMap>:



//Draws a map of tile at the specified position
#if VRAM_ADDR_SIZE == 1
	void DrawMap(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
    8cb8:	2f 92       	push	r2
    8cba:	3f 92       	push	r3
    8cbc:	4f 92       	push	r4
    8cbe:	5f 92       	push	r5
    8cc0:	6f 92       	push	r6
    8cc2:	7f 92       	push	r7
    8cc4:	8f 92       	push	r8
    8cc6:	9f 92       	push	r9
    8cc8:	af 92       	push	r10
    8cca:	bf 92       	push	r11
    8ccc:	cf 92       	push	r12
    8cce:	df 92       	push	r13
    8cd0:	ef 92       	push	r14
    8cd2:	ff 92       	push	r15
    8cd4:	0f 93       	push	r16
    8cd6:	1f 93       	push	r17
    8cd8:	cf 93       	push	r28
    8cda:	df 93       	push	r29
    8cdc:	00 d0       	rcall	.+0      	; 0x8cde <DrawMap+0x26>
    8cde:	1f 92       	push	r1
    8ce0:	cd b7       	in	r28, 0x3d	; 61
    8ce2:	de b7       	in	r29, 0x3e	; 62
    8ce4:	28 2f       	mov	r18, r24
    8ce6:	3a 01       	movw	r6, r20
		//unsigned char i;
		u8 mapWidth=pgm_read_byte(&(map[0]));
    8ce8:	fa 01       	movw	r30, r20
    8cea:	24 90       	lpm	r2, Z
		u8 mapHeight=pgm_read_byte(&(map[1]));
    8cec:	31 96       	adiw	r30, 0x01	; 1
    8cee:	34 90       	lpm	r3, Z
    8cf0:	42 2c       	mov	r4, r2
    8cf2:	51 2c       	mov	r5, r1
		
		for(u8 dy=0;dy<mapHeight;dy++){
    8cf4:	e1 2c       	mov	r14, r1
    8cf6:	f1 2c       	mov	r15, r1
    8cf8:	00 e0       	ldi	r16, 0x00	; 0
    8cfa:	10 e0       	ldi	r17, 0x00	; 0
    8cfc:	c6 2e       	mov	r12, r22
    8cfe:	d1 2c       	mov	r13, r1
    8d00:	03 15       	cp	r16, r3
    8d02:	68 f5       	brcc	.+90     	; 0x8d5e <DrawMap+0xa6>
    8d04:	1b 82       	std	Y+3, r1	; 0x03
    8d06:	1a 82       	std	Y+2, r1	; 0x02
    8d08:	57 01       	movw	r10, r14
    8d0a:	92 e0       	ldi	r25, 0x02	; 2
    8d0c:	a9 0e       	add	r10, r25
    8d0e:	b1 1c       	adc	r11, r1
    8d10:	48 01       	movw	r8, r16
    8d12:	8c 0c       	add	r8, r12
    8d14:	9d 1c       	adc	r9, r13
			for(u8 dx=0;dx<mapWidth;dx++){			
    8d16:	ea 81       	ldd	r30, Y+2	; 0x02
    8d18:	e2 15       	cp	r30, r2
    8d1a:	e0 f4       	brcc	.+56     	; 0x8d54 <DrawMap+0x9c>
    8d1c:	ea 81       	ldd	r30, Y+2	; 0x02
    8d1e:	fb 81       	ldd	r31, Y+3	; 0x03
    8d20:	ea 0d       	add	r30, r10
    8d22:	fb 1d       	adc	r31, r11
    8d24:	e6 0d       	add	r30, r6
    8d26:	f7 1d       	adc	r31, r7
				SetTile(x+dx,(y+dy)%Screen.scrollHeight,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
    8d28:	e4 91       	lpm	r30, Z
    8d2a:	f0 e0       	ldi	r31, 0x00	; 0
    8d2c:	60 91 b4 0c 	lds	r22, 0x0CB4
    8d30:	70 e0       	ldi	r23, 0x00	; 0
    8d32:	c4 01       	movw	r24, r8
    8d34:	0e 94 ad 65 	call	0xcb5a	; 0xcb5a <__divmodhi4>
    8d38:	af 01       	movw	r20, r30
    8d3a:	68 2f       	mov	r22, r24
    8d3c:	8a 81       	ldd	r24, Y+2	; 0x02
    8d3e:	82 0f       	add	r24, r18
    8d40:	29 83       	std	Y+1, r18	; 0x01
    8d42:	0e 94 07 38 	call	0x700e	; 0x700e <SetTile>
    8d46:	8a 81       	ldd	r24, Y+2	; 0x02
    8d48:	9b 81       	ldd	r25, Y+3	; 0x03
    8d4a:	01 96       	adiw	r24, 0x01	; 1
    8d4c:	9b 83       	std	Y+3, r25	; 0x03
    8d4e:	8a 83       	std	Y+2, r24	; 0x02
    8d50:	29 81       	ldd	r18, Y+1	; 0x01
    8d52:	e1 cf       	rjmp	.-62     	; 0x8d16 <DrawMap+0x5e>
    8d54:	0f 5f       	subi	r16, 0xFF	; 255
    8d56:	1f 4f       	sbci	r17, 0xFF	; 255
    8d58:	e4 0c       	add	r14, r4
    8d5a:	f5 1c       	adc	r15, r5
    8d5c:	d1 cf       	rjmp	.-94     	; 0x8d00 <DrawMap+0x48>
			}
		}

	}
    8d5e:	0f 90       	pop	r0
    8d60:	0f 90       	pop	r0
    8d62:	0f 90       	pop	r0
    8d64:	df 91       	pop	r29
    8d66:	cf 91       	pop	r28
    8d68:	1f 91       	pop	r17
    8d6a:	0f 91       	pop	r16
    8d6c:	ff 90       	pop	r15
    8d6e:	ef 90       	pop	r14
    8d70:	df 90       	pop	r13
    8d72:	cf 90       	pop	r12
    8d74:	bf 90       	pop	r11
    8d76:	af 90       	pop	r10
    8d78:	9f 90       	pop	r9
    8d7a:	8f 90       	pop	r8
    8d7c:	7f 90       	pop	r7
    8d7e:	6f 90       	pop	r6
    8d80:	5f 90       	pop	r5
    8d82:	4f 90       	pop	r4
    8d84:	3f 90       	pop	r3
    8d86:	2f 90       	pop	r2
    8d88:	08 95       	ret

00008d8a <WaitVsync>:
		}
	}
}

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
    8d8a:	0f 93       	push	r16
    8d8c:	1f 93       	push	r17
    8d8e:	cf 93       	push	r28
    8d90:	df 93       	push	r29
    8d92:	8c 01       	movw	r16, r24
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    8d94:	c0 e0       	ldi	r28, 0x00	; 0
    8d96:	d0 e0       	ldi	r29, 0x00	; 0
    8d98:	c0 17       	cp	r28, r16
    8d9a:	d1 07       	cpc	r29, r17
    8d9c:	44 f4       	brge	.+16     	; 0x8dae <WaitVsync+0x24>
		while(!GetVsyncFlag());
    8d9e:	0e 94 1d 38 	call	0x703a	; 0x703a <GetVsyncFlag>
    8da2:	88 23       	and	r24, r24
    8da4:	e1 f3       	breq	.-8      	; 0x8d9e <WaitVsync+0x14>
		ClearVsyncFlag();		
    8da6:	0e 94 21 38 	call	0x7042	; 0x7042 <ClearVsyncFlag>

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    8daa:	21 96       	adiw	r28, 0x01	; 1
    8dac:	f5 cf       	rjmp	.-22     	; 0x8d98 <WaitVsync+0xe>
		while(!GetVsyncFlag());
		ClearVsyncFlag();		
	}
}
    8dae:	df 91       	pop	r29
    8db0:	cf 91       	pop	r28
    8db2:	1f 91       	pop	r17
    8db4:	0f 91       	pop	r16
    8db6:	08 95       	ret

00008db8 <DisplayLogo>:
	void DisplayLogo(){
	
		#if INTRO_LOGO !=0
			#define LOGO_X_POS 12
			
			InitMusicPlayer(logoInitPatches);
    8db8:	83 e2       	ldi	r24, 0x23	; 35
    8dba:	99 e0       	ldi	r25, 0x09	; 9
    8dbc:	0e 94 cf 3a 	call	0x759e	; 0x759e <InitMusicPlayer>
			SetTileTable(logo_tileset);
    8dc0:	83 e2       	ldi	r24, 0x23	; 35
    8dc2:	91 e0       	ldi	r25, 0x01	; 1
    8dc4:	0e 94 18 38 	call	0x7030	; 0x7030 <SetTileTable>
			
			//draw logo
			ClearVram();
    8dc8:	0e 94 fd 37 	call	0x6ffa	; 0x6ffa <ClearVram>
			WaitVsync(15);		
    8dcc:	8f e0       	ldi	r24, 0x0F	; 15
    8dce:	90 e0       	ldi	r25, 0x00	; 0
    8dd0:	0e 94 c5 46 	call	0x8d8a	; 0x8d8a <WaitVsync>


			#if INTRO_LOGO == 1 
				TriggerFx(0,0xff,true);
    8dd4:	41 e0       	ldi	r20, 0x01	; 1
    8dd6:	6f ef       	ldi	r22, 0xFF	; 255
    8dd8:	80 e0       	ldi	r24, 0x00	; 0
    8dda:	0e 94 dc 3b 	call	0x77b8	; 0x77b8 <TriggerFx>
			#endif

			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo);
    8dde:	4d e0       	ldi	r20, 0x0D	; 13
    8de0:	51 e0       	ldi	r21, 0x01	; 1
    8de2:	6c e0       	ldi	r22, 0x0C	; 12
    8de4:	8c e0       	ldi	r24, 0x0C	; 12
    8de6:	0e 94 5c 46 	call	0x8cb8	; 0x8cb8 <DrawMap>
			WaitVsync(3);
    8dea:	83 e0       	ldi	r24, 0x03	; 3
    8dec:	90 e0       	ldi	r25, 0x00	; 0
    8dee:	0e 94 c5 46 	call	0x8d8a	; 0x8d8a <WaitVsync>
			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo2);
    8df2:	4c ef       	ldi	r20, 0xFC	; 252
    8df4:	50 e0       	ldi	r21, 0x00	; 0
    8df6:	6c e0       	ldi	r22, 0x0C	; 12
    8df8:	8c e0       	ldi	r24, 0x0C	; 12
    8dfa:	0e 94 5c 46 	call	0x8cb8	; 0x8cb8 <DrawMap>
			WaitVsync(2);
    8dfe:	82 e0       	ldi	r24, 0x02	; 2
    8e00:	90 e0       	ldi	r25, 0x00	; 0
    8e02:	0e 94 c5 46 	call	0x8d8a	; 0x8d8a <WaitVsync>
			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo);
    8e06:	4d e0       	ldi	r20, 0x0D	; 13
    8e08:	51 e0       	ldi	r21, 0x01	; 1
    8e0a:	6c e0       	ldi	r22, 0x0C	; 12
    8e0c:	8c e0       	ldi	r24, 0x0C	; 12
    8e0e:	0e 94 5c 46 	call	0x8cb8	; 0x8cb8 <DrawMap>
			#if INTRO_LOGO == 2
				SetMasterVolume(0xc0);
				TriggerNote(3,0,16,0xff);
			#endif 
		
			WaitVsync(65);
    8e12:	81 e4       	ldi	r24, 0x41	; 65
    8e14:	90 e0       	ldi	r25, 0x00	; 0
    8e16:	0e 94 c5 46 	call	0x8d8a	; 0x8d8a <WaitVsync>
			ClearVram();
    8e1a:	0e 94 fd 37 	call	0x6ffa	; 0x6ffa <ClearVram>
			WaitVsync(20);
    8e1e:	84 e1       	ldi	r24, 0x14	; 20
    8e20:	90 e0       	ldi	r25, 0x00	; 0
    8e22:	0c 94 c5 46 	jmp	0x8d8a	; 0x8d8a <WaitVsync>

00008e26 <doFade>:
char fadeDir;
bool volatile fadeActive;


void doFade(unsigned char speed,bool blocking){
	fadeSpeed=speed;
    8e26:	80 93 7c 0d 	sts	0x0D7C, r24
	currFadeFrame=0;
    8e2a:	10 92 80 0d 	sts	0x0D80, r1
	fadeActive=true;
    8e2e:	81 e0       	ldi	r24, 0x01	; 1
    8e30:	80 93 7f 0d 	sts	0x0D7F, r24
		
	if(blocking){
    8e34:	66 23       	and	r22, r22
    8e36:	21 f0       	breq	.+8      	; 0x8e40 <doFade+0x1a>
		while(fadeActive==true);
    8e38:	80 91 7f 0d 	lds	r24, 0x0D7F
    8e3c:	81 11       	cpse	r24, r1
    8e3e:	fc cf       	rjmp	.-8      	; 0x8e38 <doFade+0x12>
    8e40:	08 95       	ret

00008e42 <FadeIn>:
	
	
}

void FadeIn(unsigned char speed,bool blocking){
	if(speed==0){
    8e42:	81 11       	cpse	r24, r1
    8e44:	03 c0       	rjmp	.+6      	; 0x8e4c <FadeIn+0xa>
		DDRC=0xff;
    8e46:	8f ef       	ldi	r24, 0xFF	; 255
    8e48:	87 b9       	out	0x07, r24	; 7
		return;
    8e4a:	08 95       	ret
	}
	fadeStep=1;
    8e4c:	91 e0       	ldi	r25, 0x01	; 1
    8e4e:	90 93 81 0d 	sts	0x0D81, r25
	fadeDir=1;
    8e52:	90 93 7d 0d 	sts	0x0D7D, r25
	doFade(speed,blocking);
    8e56:	0c 94 13 47 	jmp	0x8e26	; 0x8e26 <doFade>

00008e5a <FadeOut>:
}

void FadeOut(unsigned char speed,bool blocking){
	if(speed==0){
    8e5a:	81 11       	cpse	r24, r1
    8e5c:	02 c0       	rjmp	.+4      	; 0x8e62 <FadeOut+0x8>
		DDRC=0;
    8e5e:	17 b8       	out	0x07, r1	; 7
		return;
    8e60:	08 95       	ret
	}
	
	fadeStep=FADER_STEPS;
    8e62:	9c e0       	ldi	r25, 0x0C	; 12
    8e64:	90 93 81 0d 	sts	0x0D81, r25
	fadeDir=-1;
    8e68:	9f ef       	ldi	r25, 0xFF	; 255
    8e6a:	90 93 7d 0d 	sts	0x0D7D, r25
	doFade(speed,blocking);
    8e6e:	0c 94 13 47 	jmp	0x8e26	; 0x8e26 <doFade>

00008e72 <ProcessFading>:
}


//called by the kernel at each field end
void ProcessFading(){
	if(fadeActive==true){
    8e72:	80 91 7f 0d 	lds	r24, 0x0D7F
    8e76:	88 23       	and	r24, r24
    8e78:	01 f1       	breq	.+64     	; 0x8eba <ProcessFading+0x48>
		if(currFadeFrame==0){
    8e7a:	80 91 80 0d 	lds	r24, 0x0D80
    8e7e:	81 11       	cpse	r24, r1
    8e80:	19 c0       	rjmp	.+50     	; 0x8eb4 <ProcessFading+0x42>
			currFadeFrame=fadeSpeed;
    8e82:	80 91 7c 0d 	lds	r24, 0x0D7C
    8e86:	80 93 80 0d 	sts	0x0D80, r24
			DDRC = pgm_read_byte(&(fader[fadeStep-1]));
    8e8a:	e0 91 81 0d 	lds	r30, 0x0D81
    8e8e:	f0 e0       	ldi	r31, 0x00	; 0
    8e90:	e1 51       	subi	r30, 0x11	; 17
    8e92:	ff 4f       	sbci	r31, 0xFF	; 255
    8e94:	e4 91       	lpm	r30, Z
    8e96:	e7 b9       	out	0x07, r30	; 7
			fadeStep+=fadeDir;
    8e98:	90 91 7d 0d 	lds	r25, 0x0D7D
    8e9c:	80 91 81 0d 	lds	r24, 0x0D81
    8ea0:	89 0f       	add	r24, r25
    8ea2:	80 93 81 0d 	sts	0x0D81, r24
			if(fadeStep==0 || fadeStep==(FADER_STEPS+1)){
    8ea6:	88 23       	and	r24, r24
    8ea8:	11 f0       	breq	.+4      	; 0x8eae <ProcessFading+0x3c>
    8eaa:	8d 30       	cpi	r24, 0x0D	; 13
    8eac:	31 f4       	brne	.+12     	; 0x8eba <ProcessFading+0x48>
				fadeActive=false;
    8eae:	10 92 7f 0d 	sts	0x0D7F, r1
    8eb2:	08 95       	ret
			}
		}else{
			currFadeFrame--;
    8eb4:	81 50       	subi	r24, 0x01	; 1
    8eb6:	80 93 80 0d 	sts	0x0D80, r24
    8eba:	08 95       	ret

00008ebc <VideoModeVsync>:
	}

	//Callback invoked during hsync
	void VideoModeVsync(){
		
		ProcessFading();
    8ebc:	0e 94 39 47 	call	0x8e72	; 0x8e72 <ProcessFading>
		ProcessSprites();
    8ec0:	0c 94 16 45 	jmp	0x8a2c	; 0x8a2c <ProcessSprites>

00008ec4 <LBGetNextFrame>:
	u8 reversing;
	char** anims;
} Animation;

char* LBGetNextFrame(Animation* anim)
{
    8ec4:	fc 01       	movw	r30, r24
	anim->looped = 0;
    8ec6:	14 82       	std	Z+4, r1	; 0x04
	anim->frame_count += 1;
    8ec8:	93 81       	ldd	r25, Z+3	; 0x03
    8eca:	9f 5f       	subi	r25, 0xFF	; 255
    8ecc:	93 83       	std	Z+3, r25	; 0x03
	if (anim->frame_count < anim->frames_per_anim)
    8ece:	42 81       	ldd	r20, Z+2	; 0x02
    8ed0:	80 81       	ld	r24, Z
    8ed2:	26 81       	ldd	r18, Z+6	; 0x06
    8ed4:	37 81       	ldd	r19, Z+7	; 0x07
    8ed6:	94 17       	cp	r25, r20
    8ed8:	30 f4       	brcc	.+12     	; 0x8ee6 <LBGetNextFrame+0x22>
	{
		return anim->anims[anim->current_anim];
    8eda:	f9 01       	movw	r30, r18
    8edc:	e8 0f       	add	r30, r24
    8ede:	f1 1d       	adc	r31, r1
    8ee0:	e8 0f       	add	r30, r24
    8ee2:	f1 1d       	adc	r31, r1
    8ee4:	12 c0       	rjmp	.+36     	; 0x8f0a <LBGetNextFrame+0x46>
	}
	anim->frame_count = 0;
    8ee6:	13 82       	std	Z+3, r1	; 0x03
	anim->current_anim = (anim->current_anim + 1) % anim->anim_count;
    8ee8:	90 e0       	ldi	r25, 0x00	; 0
    8eea:	01 96       	adiw	r24, 0x01	; 1
    8eec:	61 81       	ldd	r22, Z+1	; 0x01
    8eee:	70 e0       	ldi	r23, 0x00	; 0
    8ef0:	0e 94 ad 65 	call	0xcb5a	; 0xcb5a <__divmodhi4>
    8ef4:	80 83       	st	Z, r24
	if (anim->current_anim == 0) anim->looped = 1;
    8ef6:	81 11       	cpse	r24, r1
    8ef8:	02 c0       	rjmp	.+4      	; 0x8efe <LBGetNextFrame+0x3a>
    8efa:	41 e0       	ldi	r20, 0x01	; 1
    8efc:	44 83       	std	Z+4, r20	; 0x04
    8efe:	99 27       	eor	r25, r25
	return anim->anims[anim->current_anim];
    8f00:	88 0f       	add	r24, r24
    8f02:	99 1f       	adc	r25, r25
    8f04:	f9 01       	movw	r30, r18
    8f06:	e8 0f       	add	r30, r24
    8f08:	f9 1f       	adc	r31, r25
    8f0a:	80 81       	ld	r24, Z
    8f0c:	91 81       	ldd	r25, Z+1	; 0x01
}
    8f0e:	08 95       	ret

00008f10 <LBGetJoyPadState>:

void LBGetJoyPadState(JoyPadState* p, unsigned char index)
/*
 * Get the current joy pad button state for index controller
 */
{
    8f10:	0f 93       	push	r16
    8f12:	1f 93       	push	r17
    8f14:	cf 93       	push	r28
    8f16:	df 93       	push	r29
    8f18:	1f 92       	push	r1
    8f1a:	cd b7       	in	r28, 0x3d	; 61
    8f1c:	de b7       	in	r29, 0x3e	; 62
    8f1e:	8c 01       	movw	r16, r24
	static unsigned int p_prev[2];

	p->held = ReadJoypad(index);
    8f20:	86 2f       	mov	r24, r22
    8f22:	69 83       	std	Y+1, r22	; 0x01
    8f24:	0e 94 27 38 	call	0x704e	; 0x704e <ReadJoypad>
    8f28:	d8 01       	movw	r26, r16
    8f2a:	15 96       	adiw	r26, 0x05	; 5
    8f2c:	9c 93       	st	X, r25
    8f2e:	8e 93       	st	-X, r24
    8f30:	14 97       	sbiw	r26, 0x04	; 4
    8f32:	69 81       	ldd	r22, Y+1	; 0x01
    8f34:	e6 2f       	mov	r30, r22
    8f36:	f0 e0       	ldi	r31, 0x00	; 0

	// Count held cycles
	if (p->held == 0 || p->held != p_prev[index])
    8f38:	00 97       	sbiw	r24, 0x00	; 0
    8f3a:	51 f0       	breq	.+20     	; 0x8f50 <LBGetJoyPadState+0x40>
    8f3c:	df 01       	movw	r26, r30
    8f3e:	aa 0f       	add	r26, r26
    8f40:	bb 1f       	adc	r27, r27
    8f42:	ac 50       	subi	r26, 0x0C	; 12
    8f44:	b3 4f       	sbci	r27, 0xF3	; 243
    8f46:	2d 91       	ld	r18, X+
    8f48:	3c 91       	ld	r19, X
    8f4a:	82 17       	cp	r24, r18
    8f4c:	93 07       	cpc	r25, r19
    8f4e:	21 f0       	breq	.+8      	; 0x8f58 <LBGetJoyPadState+0x48>
	    p->held_cycles = 0;
    8f50:	d8 01       	movw	r26, r16
    8f52:	16 96       	adiw	r26, 0x06	; 6
    8f54:	1c 92       	st	X, r1
    8f56:	07 c0       	rjmp	.+14     	; 0x8f66 <LBGetJoyPadState+0x56>
	else
	    p->held_cycles += 1;
    8f58:	d8 01       	movw	r26, r16
    8f5a:	16 96       	adiw	r26, 0x06	; 6
    8f5c:	2c 91       	ld	r18, X
    8f5e:	16 97       	sbiw	r26, 0x06	; 6
    8f60:	2f 5f       	subi	r18, 0xFF	; 255
    8f62:	16 96       	adiw	r26, 0x06	; 6
    8f64:	2c 93       	st	X, r18

	p->pressed = p->held & (p->held ^ p_prev[index]);
    8f66:	ee 0f       	add	r30, r30
    8f68:	ff 1f       	adc	r31, r31
    8f6a:	ec 50       	subi	r30, 0x0C	; 12
    8f6c:	f3 4f       	sbci	r31, 0xF3	; 243
    8f6e:	20 81       	ld	r18, Z
    8f70:	31 81       	ldd	r19, Z+1	; 0x01
    8f72:	a9 01       	movw	r20, r18
    8f74:	40 95       	com	r20
    8f76:	50 95       	com	r21
    8f78:	48 23       	and	r20, r24
    8f7a:	59 23       	and	r21, r25
    8f7c:	d8 01       	movw	r26, r16
    8f7e:	11 96       	adiw	r26, 0x01	; 1
    8f80:	5c 93       	st	X, r21
    8f82:	4e 93       	st	-X, r20
	p->released = p_prev[index] & (p->held ^ p_prev[index]);
    8f84:	ac 01       	movw	r20, r24
    8f86:	40 95       	com	r20
    8f88:	50 95       	com	r21
    8f8a:	24 23       	and	r18, r20
    8f8c:	35 23       	and	r19, r21
    8f8e:	13 96       	adiw	r26, 0x03	; 3
    8f90:	3c 93       	st	X, r19
    8f92:	2e 93       	st	-X, r18
    8f94:	12 97       	sbiw	r26, 0x02	; 2
	p_prev[index] = p->held;
    8f96:	91 83       	std	Z+1, r25	; 0x01
    8f98:	80 83       	st	Z, r24
}
    8f9a:	0f 90       	pop	r0
    8f9c:	df 91       	pop	r29
    8f9e:	cf 91       	pop	r28
    8fa0:	1f 91       	pop	r17
    8fa2:	0f 91       	pop	r16
    8fa4:	08 95       	ret

00008fa6 <LBPrintChar>:
	font_tiles_map = tiles_map;
}

void LBPrintChar(u8 x, u8 y, u8 code)
{
	if (code >= 48 && code <= 57)
    8fa6:	90 ed       	ldi	r25, 0xD0	; 208
    8fa8:	94 0f       	add	r25, r20
    8faa:	e0 91 82 0d 	lds	r30, 0x0D82
    8fae:	f0 91 83 0d 	lds	r31, 0x0D83
    8fb2:	9a 30       	cpi	r25, 0x0A	; 10
    8fb4:	38 f4       	brcc	.+14     	; 0x8fc4 <LBPrintChar+0x1e>
	{
		SetTile(x, y, pgm_read_byte(&font_tiles_map[3+code-48]));
    8fb6:	24 2f       	mov	r18, r20
    8fb8:	30 e0       	ldi	r19, 0x00	; 0
    8fba:	2d 52       	subi	r18, 0x2D	; 45
    8fbc:	31 09       	sbc	r19, r1
    8fbe:	e2 0f       	add	r30, r18
    8fc0:	f3 1f       	adc	r31, r19
    8fc2:	0c c0       	rjmp	.+24     	; 0x8fdc <LBPrintChar+0x36>
	}
	else if (code >= 65 && code <= 90)
    8fc4:	9f eb       	ldi	r25, 0xBF	; 191
    8fc6:	94 0f       	add	r25, r20
    8fc8:	9a 31       	cpi	r25, 0x1A	; 26
    8fca:	38 f4       	brcc	.+14     	; 0x8fda <LBPrintChar+0x34>
	{
		SetTile(x, y, pgm_read_byte(&font_tiles_map[13+code-65]));
    8fcc:	50 e0       	ldi	r21, 0x00	; 0
    8fce:	44 53       	subi	r20, 0x34	; 52
    8fd0:	51 09       	sbc	r21, r1
    8fd2:	e4 0f       	add	r30, r20
    8fd4:	f5 1f       	adc	r31, r21
    8fd6:	44 91       	lpm	r20, Z
    8fd8:	03 c0       	rjmp	.+6      	; 0x8fe0 <LBPrintChar+0x3a>
	}
	else
	{
		SetTile(x, y, pgm_read_byte(&font_tiles_map[2]));
    8fda:	32 96       	adiw	r30, 0x02	; 2
    8fdc:	e4 91       	lpm	r30, Z
    8fde:	4e 2f       	mov	r20, r30
    8fe0:	50 e0       	ldi	r21, 0x00	; 0
    8fe2:	0c 94 07 38 	jmp	0x700e	; 0x700e <SetTile>

00008fe6 <LBPrint>:
	}
}

void LBPrint(u8 x, u8 y, char* value)
{
    8fe6:	ff 92       	push	r15
    8fe8:	0f 93       	push	r16
    8fea:	1f 93       	push	r17
    8fec:	cf 93       	push	r28
    8fee:	df 93       	push	r29
    8ff0:	d8 2f       	mov	r29, r24
    8ff2:	f6 2e       	mov	r15, r22
    8ff4:	8a 01       	movw	r16, r20
	u8 i = 0;
    8ff6:	c0 e0       	ldi	r28, 0x00	; 0
    8ff8:	8c 2f       	mov	r24, r28
    8ffa:	8d 0f       	add	r24, r29
	u8 code = 0;
	while ((code = pgm_read_byte(&value[i])))
    8ffc:	f8 01       	movw	r30, r16
    8ffe:	ec 0f       	add	r30, r28
    9000:	f1 1d       	adc	r31, r1
    9002:	44 91       	lpm	r20, Z
    9004:	44 23       	and	r20, r20
    9006:	29 f0       	breq	.+10     	; 0x9012 <LBPrint+0x2c>
	{
		LBPrintChar(x++, y, code);
    9008:	6f 2d       	mov	r22, r15
    900a:	0e 94 d3 47 	call	0x8fa6	; 0x8fa6 <LBPrintChar>
		i++;
    900e:	cf 5f       	subi	r28, 0xFF	; 255
    9010:	f3 cf       	rjmp	.-26     	; 0x8ff8 <LBPrint+0x12>
	}
}
    9012:	df 91       	pop	r29
    9014:	cf 91       	pop	r28
    9016:	1f 91       	pop	r17
    9018:	0f 91       	pop	r16
    901a:	ff 90       	pop	r15
    901c:	08 95       	ret

0000901e <LBPrintByte>:

void LBPrintByte(u8 x, u8 y, u8 value, char pad)
{
    901e:	df 92       	push	r13
    9020:	ef 92       	push	r14
    9022:	ff 92       	push	r15
    9024:	0f 93       	push	r16
    9026:	1f 93       	push	r17
    9028:	cf 93       	push	r28
    902a:	df 93       	push	r29
    902c:	1f 92       	push	r1
    902e:	cd b7       	in	r28, 0x3d	; 61
    9030:	de b7       	in	r29, 0x3e	; 62
    9032:	38 2f       	mov	r19, r24
    9034:	06 2f       	mov	r16, r22
    9036:	84 2f       	mov	r24, r20
    9038:	9d ef       	ldi	r25, 0xFD	; 253
    903a:	e9 2e       	mov	r14, r25
    903c:	e3 0e       	add	r14, r19
	for (u8 i = 0; i < 3; i++)
	{
		LBPrintChar(x--, y, value % 10 + 48);
    903e:	4a e0       	ldi	r20, 0x0A	; 10
    9040:	f4 2e       	mov	r15, r20
    9042:	1f ef       	ldi	r17, 0xFF	; 255
    9044:	13 0f       	add	r17, r19
    9046:	6f 2d       	mov	r22, r15
    9048:	0e 94 7f 65 	call	0xcafe	; 0xcafe <__udivmodqi4>
    904c:	d8 2e       	mov	r13, r24
    904e:	40 e3       	ldi	r20, 0x30	; 48
    9050:	49 0f       	add	r20, r25
    9052:	60 2f       	mov	r22, r16
    9054:	83 2f       	mov	r24, r19
    9056:	29 83       	std	Y+1, r18	; 0x01
    9058:	0e 94 d3 47 	call	0x8fa6	; 0x8fa6 <LBPrintChar>
		value /= 10;
    905c:	8d 2d       	mov	r24, r13
		if (!pad && value == 0) break;
    905e:	29 81       	ldd	r18, Y+1	; 0x01
    9060:	21 11       	cpse	r18, r1
    9062:	02 c0       	rjmp	.+4      	; 0x9068 <LBPrintByte+0x4a>
    9064:	dd 20       	and	r13, r13
    9066:	19 f0       	breq	.+6      	; 0x906e <LBPrintByte+0x50>
    9068:	31 2f       	mov	r19, r17
	}
}

void LBPrintByte(u8 x, u8 y, u8 value, char pad)
{
	for (u8 i = 0; i < 3; i++)
    906a:	1e 11       	cpse	r17, r14
    906c:	ea cf       	rjmp	.-44     	; 0x9042 <LBPrintByte+0x24>
	{
		LBPrintChar(x--, y, value % 10 + 48);
		value /= 10;
		if (!pad && value == 0) break;
	}
}
    906e:	0f 90       	pop	r0
    9070:	df 91       	pop	r29
    9072:	cf 91       	pop	r28
    9074:	1f 91       	pop	r17
    9076:	0f 91       	pop	r16
    9078:	ff 90       	pop	r15
    907a:	ef 90       	pop	r14
    907c:	df 90       	pop	r13
    907e:	08 95       	ret

00009080 <LBPrintInt>:

void LBPrintInt(u8 x, u8 y, u16 value, char pad)
{
    9080:	cf 92       	push	r12
    9082:	df 92       	push	r13
    9084:	ef 92       	push	r14
    9086:	ff 92       	push	r15
    9088:	0f 93       	push	r16
    908a:	1f 93       	push	r17
    908c:	cf 93       	push	r28
    908e:	df 93       	push	r29
    9090:	00 d0       	rcall	.+0      	; 0x9092 <LBPrintInt+0x12>
    9092:	cd b7       	in	r28, 0x3d	; 61
    9094:	de b7       	in	r29, 0x3e	; 62
    9096:	38 2f       	mov	r19, r24
    9098:	16 2f       	mov	r17, r22
    909a:	ca 01       	movw	r24, r20
    909c:	4b ef       	ldi	r20, 0xFB	; 251
    909e:	d4 2e       	mov	r13, r20
    90a0:	d3 0e       	add	r13, r19
	for (u8 i = 0; i < 5; i++)
	{
		LBPrintChar(x--, y, value % 10 + 48);
    90a2:	5a e0       	ldi	r21, 0x0A	; 10
    90a4:	e5 2e       	mov	r14, r21
    90a6:	f1 2c       	mov	r15, r1
    90a8:	cc 24       	eor	r12, r12
    90aa:	ca 94       	dec	r12
    90ac:	c3 0e       	add	r12, r19
    90ae:	b7 01       	movw	r22, r14
    90b0:	0e 94 99 65 	call	0xcb32	; 0xcb32 <__udivmodhi4>
    90b4:	06 2f       	mov	r16, r22
    90b6:	40 e3       	ldi	r20, 0x30	; 48
    90b8:	48 0f       	add	r20, r24
    90ba:	61 2f       	mov	r22, r17
    90bc:	83 2f       	mov	r24, r19
    90be:	29 83       	std	Y+1, r18	; 0x01
    90c0:	7a 83       	std	Y+2, r23	; 0x02
    90c2:	0e 94 d3 47 	call	0x8fa6	; 0x8fa6 <LBPrintChar>
		value /= 10;
    90c6:	80 2f       	mov	r24, r16
    90c8:	7a 81       	ldd	r23, Y+2	; 0x02
    90ca:	97 2f       	mov	r25, r23
		if (!pad && value == 0) break;
    90cc:	29 81       	ldd	r18, Y+1	; 0x01
    90ce:	21 11       	cpse	r18, r1
    90d0:	02 c0       	rjmp	.+4      	; 0x90d6 <LBPrintInt+0x56>
    90d2:	00 97       	sbiw	r24, 0x00	; 0
    90d4:	19 f0       	breq	.+6      	; 0x90dc <LBPrintInt+0x5c>
    90d6:	3c 2d       	mov	r19, r12
	}
}

void LBPrintInt(u8 x, u8 y, u16 value, char pad)
{
	for (u8 i = 0; i < 5; i++)
    90d8:	cd 10       	cpse	r12, r13
    90da:	e6 cf       	rjmp	.-52     	; 0x90a8 <LBPrintInt+0x28>
	{
		LBPrintChar(x--, y, value % 10 + 48);
		value /= 10;
		if (!pad && value == 0) break;
	}
}
    90dc:	0f 90       	pop	r0
    90de:	0f 90       	pop	r0
    90e0:	df 91       	pop	r29
    90e2:	cf 91       	pop	r28
    90e4:	1f 91       	pop	r17
    90e6:	0f 91       	pop	r16
    90e8:	ff 90       	pop	r15
    90ea:	ef 90       	pop	r14
    90ec:	df 90       	pop	r13
    90ee:	cf 90       	pop	r12
    90f0:	08 95       	ret

000090f2 <LBCollides>:
	}
}

u8 LBCollides(u16 x1, u16 y1, u8 width1, u8 height1,
						 u16 x2, u16 y2, u8 width2, u8 height2)
{
    90f2:	af 92       	push	r10
    90f4:	cf 92       	push	r12
    90f6:	ef 92       	push	r14
    90f8:	ff 92       	push	r15
    90fa:	0f 93       	push	r16
    90fc:	1f 93       	push	r17
    90fe:	fc 01       	movw	r30, r24
	if (y1 + height1 <= y2) return 0;
    9100:	cb 01       	movw	r24, r22
    9102:	82 0f       	add	r24, r18
    9104:	91 1d       	adc	r25, r1
    9106:	e8 16       	cp	r14, r24
    9108:	f9 06       	cpc	r15, r25
    910a:	88 f4       	brcc	.+34     	; 0x912e <LBCollides+0x3c>
	if (y1 >= y2 + height2) return 0;
    910c:	ea 0c       	add	r14, r10
    910e:	f1 1c       	adc	r15, r1
    9110:	6e 15       	cp	r22, r14
    9112:	7f 05       	cpc	r23, r15
    9114:	60 f4       	brcc	.+24     	; 0x912e <LBCollides+0x3c>
	if (x1 + width1 <= x2) return 0;
    9116:	cf 01       	movw	r24, r30
    9118:	84 0f       	add	r24, r20
    911a:	91 1d       	adc	r25, r1
    911c:	08 17       	cp	r16, r24
    911e:	19 07       	cpc	r17, r25
    9120:	30 f4       	brcc	.+12     	; 0x912e <LBCollides+0x3c>
	if (x1 >= x2 + width2) return 0;
    9122:	0c 0d       	add	r16, r12
    9124:	11 1d       	adc	r17, r1
    9126:	81 e0       	ldi	r24, 0x01	; 1
    9128:	e0 17       	cp	r30, r16
    912a:	f1 07       	cpc	r31, r17
    912c:	08 f0       	brcs	.+2      	; 0x9130 <LBCollides+0x3e>
}

u8 LBCollides(u16 x1, u16 y1, u8 width1, u8 height1,
						 u16 x2, u16 y2, u8 width2, u8 height2)
{
	if (y1 + height1 <= y2) return 0;
    912e:	80 e0       	ldi	r24, 0x00	; 0
	if (y1 >= y2 + height2) return 0;
	if (x1 + width1 <= x2) return 0;
	if (x1 >= x2 + width2) return 0;
	return 1;
}
    9130:	1f 91       	pop	r17
    9132:	0f 91       	pop	r16
    9134:	ff 90       	pop	r15
    9136:	ef 90       	pop	r14
    9138:	cf 90       	pop	r12
    913a:	af 90       	pop	r10
    913c:	08 95       	ret

0000913e <LBRandom>:

u8 LBRandom(u8 from, u8 to)
/*
 * Return a random number between 'from' and 'to'.
 */
{
    913e:	cf 93       	push	r28
    9140:	df 93       	push	r29
    9142:	d8 2f       	mov	r29, r24
    9144:	c6 2f       	mov	r28, r22
	u16 tmp = GetPrngNumber(0) % 255;
    9146:	80 e0       	ldi	r24, 0x00	; 0
    9148:	90 e0       	ldi	r25, 0x00	; 0
    914a:	0e 94 f5 39 	call	0x73ea	; 0x73ea <GetPrngNumber>
    914e:	6f ef       	ldi	r22, 0xFF	; 255
    9150:	70 e0       	ldi	r23, 0x00	; 0
    9152:	0e 94 99 65 	call	0xcb32	; 0xcb32 <__udivmodhi4>
	return (((u8)tmp) % (to - from)) + from;
    9156:	6c 2f       	mov	r22, r28
    9158:	70 e0       	ldi	r23, 0x00	; 0
    915a:	6d 1b       	sub	r22, r29
    915c:	71 09       	sbc	r23, r1
    915e:	0e 94 ad 65 	call	0xcb5a	; 0xcb5a <__divmodhi4>
}
    9162:	8d 0f       	add	r24, r29
    9164:	df 91       	pop	r29
    9166:	cf 91       	pop	r28
    9168:	08 95       	ret

0000916a <LBWaitSeconds>:

void LBWaitSeconds(u8 seconds)
{
    916a:	cf 93       	push	r28
    916c:	df 93       	push	r29
    916e:	d8 2f       	mov	r29, r24
	for(u8 i = 0; i < seconds; i++)
    9170:	c0 e0       	ldi	r28, 0x00	; 0
    9172:	cd 17       	cp	r28, r29
    9174:	31 f0       	breq	.+12     	; 0x9182 <LBWaitSeconds+0x18>
	{
		WaitUs(65535);
    9176:	8f ef       	ldi	r24, 0xFF	; 255
    9178:	9f ef       	ldi	r25, 0xFF	; 255
    917a:	0e 94 33 38 	call	0x7066	; 0x7066 <WaitUs>
	return (((u8)tmp) % (to - from)) + from;
}

void LBWaitSeconds(u8 seconds)
{
	for(u8 i = 0; i < seconds; i++)
    917e:	cf 5f       	subi	r28, 0xFF	; 255
    9180:	f8 cf       	rjmp	.-16     	; 0x9172 <LBWaitSeconds+0x8>
	{
		WaitUs(65535);
	}
}
    9182:	df 91       	pop	r29
    9184:	cf 91       	pop	r28
    9186:	08 95       	ret

00009188 <LBMapSprite>:

void LBMapSprite(u8 startSprite,const char *map,u8 spriteFlags)
{
    9188:	df 92       	push	r13
    918a:	ef 92       	push	r14
    918c:	ff 92       	push	r15
    918e:	0f 93       	push	r16
    9190:	1f 93       	push	r17
    9192:	cf 93       	push	r28
    9194:	df 93       	push	r29
    9196:	db 01       	movw	r26, r22
	u8 mapWidth=pgm_read_byte(&(map[0]));
    9198:	fb 01       	movw	r30, r22
    919a:	14 91       	lpm	r17, Z
	u8 mapHeight=pgm_read_byte(&(map[1]));
    919c:	31 96       	adiw	r30, 0x01	; 1
    919e:	64 91       	lpm	r22, Z
    91a0:	5f ef       	ldi	r21, 0xFF	; 255
    91a2:	51 0f       	add	r21, r17
	s8 x,y,dx,dy,t; 

	if(spriteFlags & SPRITE_FLIP_X)
    91a4:	24 2f       	mov	r18, r20
    91a6:	21 70       	andi	r18, 0x01	; 1
    91a8:	40 ff       	sbrs	r20, 0
    91aa:	04 c0       	rjmp	.+8      	; 0x91b4 <LBMapSprite+0x2c>
	{
		x=(mapWidth-1);
    91ac:	95 2f       	mov	r25, r21
		dx=-1;
    91ae:	ff 24       	eor	r15, r15
    91b0:	fa 94       	dec	r15
    91b2:	03 c0       	rjmp	.+6      	; 0x91ba <LBMapSprite+0x32>
	}
	else
	{
		x=0;
		dx=1;
    91b4:	ff 24       	eor	r15, r15
    91b6:	f3 94       	inc	r15
		x=(mapWidth-1);
		dx=-1;
	}
	else
	{
		x=0;
    91b8:	90 e0       	ldi	r25, 0x00	; 0
		dx=1;
	}

	if(spriteFlags & SPRITE_FLIP_Y)
    91ba:	41 ff       	sbrs	r20, 1
    91bc:	05 c0       	rjmp	.+10     	; 0x91c8 <LBMapSprite+0x40>
	{
		y=(mapHeight-1);
    91be:	7f ef       	ldi	r23, 0xFF	; 255
    91c0:	76 0f       	add	r23, r22
		dy=-1;
    91c2:	ee 24       	eor	r14, r14
    91c4:	ea 94       	dec	r14
    91c6:	03 c0       	rjmp	.+6      	; 0x91ce <LBMapSprite+0x46>
	}
	else
	{
		y=0;
		dy=1;
    91c8:	ee 24       	eor	r14, r14
    91ca:	e3 94       	inc	r14
		y=(mapHeight-1);
		dy=-1;
	}
	else
	{
		y=0;
    91cc:	70 e0       	ldi	r23, 0x00	; 0
    91ce:	21 11       	cpse	r18, r1
    91d0:	01 c0       	rjmp	.+2      	; 0x91d4 <LBMapSprite+0x4c>
    91d2:	50 e0       	ldi	r21, 0x00	; 0
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
    91d4:	00 e0       	ldi	r16, 0x00	; 0
    91d6:	06 17       	cp	r16, r22
    91d8:	09 f1       	breq	.+66     	; 0x921c <LBMapSprite+0x94>
	{
		for(u8 cx=0;cx<mapWidth;cx++)
		{
			t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    91da:	71 03       	mulsu	r23, r17
    91dc:	e0 01       	movw	r28, r0
    91de:	11 24       	eor	r1, r1
    91e0:	d8 2e       	mov	r13, r24
    91e2:	d1 0e       	add	r13, r17
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
	{
		for(u8 cx=0;cx<mapWidth;cx++)
    91e4:	8d 15       	cp	r24, r13
    91e6:	b1 f0       	breq	.+44     	; 0x9214 <LBMapSprite+0x8c>
		{
			t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    91e8:	9e 01       	movw	r18, r28
    91ea:	29 0f       	add	r18, r25
    91ec:	31 1d       	adc	r19, r1
    91ee:	97 fd       	sbrc	r25, 7
    91f0:	3a 95       	dec	r19
    91f2:	2e 5f       	subi	r18, 0xFE	; 254
    91f4:	3f 4f       	sbci	r19, 0xFF	; 255
    91f6:	fd 01       	movw	r30, r26
    91f8:	e2 0f       	add	r30, r18
    91fa:	f3 1f       	adc	r31, r19
    91fc:	24 91       	lpm	r18, Z
			extendedSprites[startSprite].tileIndex=t;
    91fe:	34 e0       	ldi	r19, 0x04	; 4
    9200:	83 9f       	mul	r24, r19
    9202:	f0 01       	movw	r30, r0
    9204:	11 24       	eor	r1, r1
    9206:	e5 55       	subi	r30, 0x55	; 85
    9208:	f0 4f       	sbci	r31, 0xF0	; 240
    920a:	22 83       	std	Z+2, r18	; 0x02
			extendedSprites[startSprite++].flags=spriteFlags;
    920c:	8f 5f       	subi	r24, 0xFF	; 255
    920e:	43 83       	std	Z+3, r20	; 0x03
    9210:	9f 0d       	add	r25, r15
    9212:	e8 cf       	rjmp	.-48     	; 0x91e4 <LBMapSprite+0x5c>
    9214:	7e 0d       	add	r23, r14
	{
		y=0;
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
    9216:	0f 5f       	subi	r16, 0xFF	; 255
			extendedSprites[startSprite].tileIndex=t;
			extendedSprites[startSprite++].flags=spriteFlags;
			x+=dx;
		}
		y+=dy;
		x=(spriteFlags & SPRITE_FLIP_X)?(mapWidth-1):0;
    9218:	95 2f       	mov	r25, r21
    921a:	dd cf       	rjmp	.-70     	; 0x91d6 <LBMapSprite+0x4e>
	}
}
    921c:	df 91       	pop	r29
    921e:	cf 91       	pop	r28
    9220:	1f 91       	pop	r17
    9222:	0f 91       	pop	r16
    9224:	ff 90       	pop	r15
    9226:	ef 90       	pop	r14
    9228:	df 90       	pop	r13
    922a:	08 95       	ret

0000922c <LBMoveSprite>:

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
    922c:	df 92       	push	r13
    922e:	ef 92       	push	r14
    9230:	ff 92       	push	r15
    9232:	0f 93       	push	r16
    9234:	1f 93       	push	r17
    9236:	cf 93       	push	r28
    9238:	df 93       	push	r29
		{
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
    923a:	a0 91 b4 0c 	lds	r26, 0x0CB4
    923e:	98 e0       	ldi	r25, 0x08	; 8
    9240:	a9 9f       	mul	r26, r25
    9242:	70 01       	movw	r14, r0
    9244:	11 24       	eor	r1, r1
    9246:	50 e0       	ldi	r21, 0x00	; 0
    9248:	38 ef       	ldi	r19, 0xF8	; 248
    924a:	a3 9f       	mul	r26, r19
    924c:	30 2d       	mov	r19, r0
    924e:	11 24       	eor	r1, r1
	}
}

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
	for(u8 dy=0;dy<height;dy++)
    9250:	70 e0       	ldi	r23, 0x00	; 0
    9252:	70 17       	cp	r23, r16
    9254:	09 f1       	breq	.+66     	; 0x9298 <LBMoveSprite+0x6c>
    9256:	d4 2e       	mov	r13, r20
    9258:	13 2f       	mov	r17, r19
    925a:	14 0f       	add	r17, r20
    925c:	b8 2f       	mov	r27, r24
    925e:	b2 0f       	add	r27, r18
    9260:	96 2f       	mov	r25, r22
	{
		for(u8 dx=0;dx<width;dx++)
    9262:	8b 17       	cp	r24, r27
    9264:	a9 f0       	breq	.+42     	; 0x9290 <LBMoveSprite+0x64>
		{
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
    9266:	c4 e0       	ldi	r28, 0x04	; 4
    9268:	8c 9f       	mul	r24, r28
    926a:	f0 01       	movw	r30, r0
    926c:	11 24       	eor	r1, r1
    926e:	ef 01       	movw	r28, r30
    9270:	c5 55       	subi	r28, 0x55	; 85
    9272:	d0 4f       	sbci	r29, 0xF0	; 240
    9274:	98 83       	st	Y, r25
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
    9276:	a0 32       	cpi	r26, 0x20	; 32
    9278:	28 f4       	brcc	.+10     	; 0x9284 <LBMoveSprite+0x58>
    927a:	e4 16       	cp	r14, r20
    927c:	f5 06       	cpc	r15, r21
    927e:	14 f4       	brge	.+4      	; 0x9284 <LBMoveSprite+0x58>
				{
					u8 tmp=(y+(TILE_HEIGHT*dy))-(Screen.scrollHeight*TILE_HEIGHT);
					extendedSprites[startSprite].y=tmp;
    9280:	19 83       	std	Y+1, r17	; 0x01
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
				{
    9282:	03 c0       	rjmp	.+6      	; 0x928a <LBMoveSprite+0x5e>
					u8 tmp=(y+(TILE_HEIGHT*dy))-(Screen.scrollHeight*TILE_HEIGHT);
					extendedSprites[startSprite].y=tmp;
				}
				else
				{
					extendedSprites[startSprite].y=y+(TILE_HEIGHT*dy);
    9284:	e5 55       	subi	r30, 0x55	; 85
    9286:	f0 4f       	sbci	r31, 0xF0	; 240
    9288:	d1 82       	std	Z+1, r13	; 0x01
				{
					extendedSprites[startSprite].y=y+(TILE_HEIGHT*dy);
				}
			#endif

			startSprite++;
    928a:	8f 5f       	subi	r24, 0xFF	; 255
    928c:	98 5f       	subi	r25, 0xF8	; 248
    928e:	e9 cf       	rjmp	.-46     	; 0x9262 <LBMoveSprite+0x36>
	}
}

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
	for(u8 dy=0;dy<height;dy++)
    9290:	7f 5f       	subi	r23, 0xFF	; 255
    9292:	48 5f       	subi	r20, 0xF8	; 248
    9294:	5f 4f       	sbci	r21, 0xFF	; 255
    9296:	dd cf       	rjmp	.-70     	; 0x9252 <LBMoveSprite+0x26>
			#endif

			startSprite++;
		}
	}	
}
    9298:	df 91       	pop	r29
    929a:	cf 91       	pop	r28
    929c:	1f 91       	pop	r17
    929e:	0f 91       	pop	r16
    92a0:	ff 90       	pop	r15
    92a2:	ef 90       	pop	r14
    92a4:	df 90       	pop	r13
    92a6:	08 95       	ret

000092a8 <LBRotateSprites>:

void LBRotateSprites()
{
    92a8:	80 e0       	ldi	r24, 0x00	; 0
    92aa:	90 e0       	ldi	r25, 0x00	; 0
    92ac:	dc 01       	movw	r26, r24
    92ae:	a5 55       	subi	r26, 0x55	; 85
    92b0:	b0 4f       	sbci	r27, 0xF0	; 240
    92b2:	fc 01       	movw	r30, r24
    92b4:	e0 5f       	subi	r30, 0xF0	; 240
    92b6:	fa 4f       	sbci	r31, 0xFA	; 250
	static u8 rotate_index = ROTATE_SPRITES_FROM;
	u8 mappedSpriteCount = MAX_EXTENDED_SPRITES;
	
	for (u8 i = 0; i < ROTATE_SPRITES_FROM; i++)
	{
		sprites[i].flags = extendedSprites[i].flags;
    92b8:	13 96       	adiw	r26, 0x03	; 3
    92ba:	2c 91       	ld	r18, X
    92bc:	13 97       	sbiw	r26, 0x03	; 3
    92be:	23 83       	std	Z+3, r18	; 0x03
		sprites[i].tileIndex = extendedSprites[i].tileIndex;
    92c0:	12 96       	adiw	r26, 0x02	; 2
    92c2:	2c 91       	ld	r18, X
    92c4:	12 97       	sbiw	r26, 0x02	; 2
    92c6:	22 83       	std	Z+2, r18	; 0x02
		sprites[i].x = extendedSprites[i].x;
    92c8:	2c 91       	ld	r18, X
    92ca:	20 83       	st	Z, r18
		sprites[i].y = extendedSprites[i].y;
    92cc:	11 96       	adiw	r26, 0x01	; 1
    92ce:	2c 91       	ld	r18, X
    92d0:	21 83       	std	Z+1, r18	; 0x01
    92d2:	04 96       	adiw	r24, 0x04	; 4
void LBRotateSprites()
{
	static u8 rotate_index = ROTATE_SPRITES_FROM;
	u8 mappedSpriteCount = MAX_EXTENDED_SPRITES;
	
	for (u8 i = 0; i < ROTATE_SPRITES_FROM; i++)
    92d4:	88 33       	cpi	r24, 0x38	; 56
    92d6:	91 05       	cpc	r25, r1
    92d8:	49 f7       	brne	.-46     	; 0x92ac <LBRotateSprites+0x4>
    92da:	80 91 01 05 	lds	r24, 0x0501
    92de:	20 e0       	ldi	r18, 0x00	; 0
    92e0:	30 e0       	ldi	r19, 0x00	; 0
		sprites[i].y = extendedSprites[i].y;
	}
	
	for (u8 i = ROTATE_SPRITES_FROM; i < MAX_SPRITES; i++)
	{
		sprites[i].flags = extendedSprites[rotate_index].flags;
    92e2:	94 e0       	ldi	r25, 0x04	; 4
    92e4:	89 9f       	mul	r24, r25
    92e6:	d0 01       	movw	r26, r0
    92e8:	11 24       	eor	r1, r1
    92ea:	a5 55       	subi	r26, 0x55	; 85
    92ec:	b0 4f       	sbci	r27, 0xF0	; 240
    92ee:	13 96       	adiw	r26, 0x03	; 3
    92f0:	9c 91       	ld	r25, X
    92f2:	13 97       	sbiw	r26, 0x03	; 3
    92f4:	f9 01       	movw	r30, r18
    92f6:	e0 5f       	subi	r30, 0xF0	; 240
    92f8:	fa 4f       	sbci	r31, 0xFA	; 250
    92fa:	93 af       	std	Z+59, r25	; 0x3b
		sprites[i].tileIndex = extendedSprites[rotate_index].tileIndex;
    92fc:	12 96       	adiw	r26, 0x02	; 2
    92fe:	9c 91       	ld	r25, X
    9300:	12 97       	sbiw	r26, 0x02	; 2
    9302:	92 af       	std	Z+58, r25	; 0x3a
		sprites[i].x = extendedSprites[rotate_index].x;
    9304:	9c 91       	ld	r25, X
    9306:	90 af       	std	Z+56, r25	; 0x38
		sprites[i].y = extendedSprites[rotate_index].y;
    9308:	11 96       	adiw	r26, 0x01	; 1
    930a:	9c 91       	ld	r25, X
    930c:	91 af       	std	Z+57, r25	; 0x39
		rotate_index += 1;
    930e:	8f 5f       	subi	r24, 0xFF	; 255
		if (rotate_index >= MAX_EXTENDED_SPRITES) rotate_index = ROTATE_SPRITES_FROM;
    9310:	84 31       	cpi	r24, 0x14	; 20
    9312:	08 f0       	brcs	.+2      	; 0x9316 <LBRotateSprites+0x6e>
    9314:	8e e0       	ldi	r24, 0x0E	; 14
    9316:	2c 5f       	subi	r18, 0xFC	; 252
    9318:	3f 4f       	sbci	r19, 0xFF	; 255
		sprites[i].tileIndex = extendedSprites[i].tileIndex;
		sprites[i].x = extendedSprites[i].x;
		sprites[i].y = extendedSprites[i].y;
	}
	
	for (u8 i = ROTATE_SPRITES_FROM; i < MAX_SPRITES; i++)
    931a:	28 30       	cpi	r18, 0x08	; 8
    931c:	31 05       	cpc	r19, r1
    931e:	09 f7       	brne	.-62     	; 0x92e2 <LBRotateSprites+0x3a>
    9320:	80 93 01 05 	sts	0x0501, r24
    9324:	08 95       	ret

00009326 <is_space>:
char* enemy_shot_anim[1];
char* expl_anim[3];

u8 is_space()
{
	return (game.current_level_index % 2 != 0);
    9326:	80 91 b7 0d 	lds	r24, 0x0DB7
}
    932a:	81 70       	andi	r24, 0x01	; 1
    932c:	08 95       	ret

0000932e <init_default_high_scores>:

void init_default_high_scores()
{
	scores.id = EEPROM_SCORES_ID;
    932e:	8c e8       	ldi	r24, 0x8C	; 140
    9330:	90 e0       	ldi	r25, 0x00	; 0
    9332:	90 93 87 0d 	sts	0x0D87, r25
    9336:	80 93 86 0d 	sts	0x0D86, r24
    933a:	80 e0       	ldi	r24, 0x00	; 0
    933c:	90 e0       	ldi	r25, 0x00	; 0
    933e:	fc 01       	movw	r30, r24
    9340:	ee 50       	subi	r30, 0x0E	; 14
    9342:	f5 4f       	sbci	r31, 0xF5	; 245
	for (u8 i = 0; i < 30; i++)
	{
		scores.data[i] = pgm_read_byte(&default_scores[i]);
    9344:	e4 91       	lpm	r30, Z
    9346:	dc 01       	movw	r26, r24
    9348:	aa 57       	subi	r26, 0x7A	; 122
    934a:	b2 4f       	sbci	r27, 0xF2	; 242
    934c:	12 96       	adiw	r26, 0x02	; 2
    934e:	ec 93       	st	X, r30
    9350:	01 96       	adiw	r24, 0x01	; 1
}

void init_default_high_scores()
{
	scores.id = EEPROM_SCORES_ID;
	for (u8 i = 0; i < 30; i++)
    9352:	8e 31       	cpi	r24, 0x1E	; 30
    9354:	91 05       	cpc	r25, r1
    9356:	99 f7       	brne	.-26     	; 0x933e <init_default_high_scores+0x10>
	{
		scores.data[i] = pgm_read_byte(&default_scores[i]);
	}
}
    9358:	08 95       	ret

0000935a <init_enemy_state>:

void init_enemy_state()
{
    935a:	80 e0       	ldi	r24, 0x00	; 0
    935c:	90 e0       	ldi	r25, 0x00	; 0
    935e:	9c 01       	movw	r18, r24
    9360:	2a 55       	subi	r18, 0x5A	; 90
    9362:	32 4f       	sbci	r19, 0xF2	; 242
    9364:	f9 01       	movw	r30, r18
    9366:	e7 54       	subi	r30, 0x47	; 71
    9368:	ff 4f       	sbci	r31, 0xFF	; 255
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		game.enemies[i].active = 0;
    936a:	10 82       	st	Z, r1
    936c:	7a 96       	adiw	r30, 0x1a	; 26
		for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
		{
			game.enemies[i].shot[j].active = 0;
    936e:	10 82       	st	Z, r1
    9370:	8e 5b       	subi	r24, 0xBE	; 190
    9372:	9f 4f       	sbci	r25, 0xFF	; 255
	}
}

void init_enemy_state()
{
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    9374:	8a 34       	cpi	r24, 0x4A	; 74
    9376:	21 e0       	ldi	r18, 0x01	; 1
    9378:	92 07       	cpc	r25, r18
    937a:	89 f7       	brne	.-30     	; 0x935e <init_enemy_state+0x4>
		for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
		{
			game.enemies[i].shot[j].active = 0;
		}
	}
	game.active_enemies = 0;
    937c:	10 92 c1 0d 	sts	0x0DC1, r1
    9380:	08 95       	ret

00009382 <init_player_state>:
}

void init_player_state()
{
	if (is_space())
    9382:	0e 94 93 49 	call	0x9326	; 0x9326 <is_space>
    9386:	88 23       	and	r24, r24
    9388:	f9 f0       	breq	.+62     	; 0x93c8 <init_player_state+0x46>
	{
		game.player.width = 3;
    938a:	83 e0       	ldi	r24, 0x03	; 3
    938c:	80 93 d7 0d 	sts	0x0DD7, r24
		game.player.height = 1;
    9390:	81 e0       	ldi	r24, 0x01	; 1
    9392:	80 93 d8 0d 	sts	0x0DD8, r24
		game.player.run.anim_count = 2;
    9396:	82 e0       	ldi	r24, 0x02	; 2
    9398:	80 93 31 0e 	sts	0x0E31, r24
		game.player.run.frames_per_anim = EXPLOSION_FRAME_COUNT;
    939c:	85 e0       	ldi	r24, 0x05	; 5
    939e:	80 93 32 0e 	sts	0x0E32, r24
		game.player.run.anims = run_anim;
    93a2:	8b ef       	ldi	r24, 0xFB	; 251
    93a4:	9f e0       	ldi	r25, 0x0F	; 15
    93a6:	90 93 37 0e 	sts	0x0E37, r25
    93aa:	80 93 36 0e 	sts	0x0E36, r24
		game.player.run.anims[0] = (char*) map_hero_ship_0;
    93ae:	85 e8       	ldi	r24, 0x85	; 133
    93b0:	9d e2       	ldi	r25, 0x2D	; 45
    93b2:	90 93 fc 0f 	sts	0x0FFC, r25
    93b6:	80 93 fb 0f 	sts	0x0FFB, r24
		game.player.run.anims[1] = (char*) map_hero_ship_1;
    93ba:	80 e8       	ldi	r24, 0x80	; 128
    93bc:	9d e2       	ldi	r25, 0x2D	; 45
    93be:	90 93 fe 0f 	sts	0x0FFE, r25
    93c2:	80 93 fd 0f 	sts	0x0FFD, r24
    93c6:	2a c0       	rjmp	.+84     	; 0x941c <init_player_state+0x9a>
	}
	else
	{
		game.player.width = 2;
    93c8:	82 e0       	ldi	r24, 0x02	; 2
    93ca:	80 93 d7 0d 	sts	0x0DD7, r24
		game.player.height = 3;
    93ce:	83 e0       	ldi	r24, 0x03	; 3
    93d0:	80 93 d8 0d 	sts	0x0DD8, r24
		game.player.run.anim_count = 4;
    93d4:	84 e0       	ldi	r24, 0x04	; 4
    93d6:	80 93 31 0e 	sts	0x0E31, r24
		game.player.run.frames_per_anim = FRAMES_PER_RUN_CYCLE;
    93da:	8c e0       	ldi	r24, 0x0C	; 12
    93dc:	80 93 32 0e 	sts	0x0E32, r24
		game.player.run.anims = run_anim;
    93e0:	8b ef       	ldi	r24, 0xFB	; 251
    93e2:	9f e0       	ldi	r25, 0x0F	; 15
    93e4:	90 93 37 0e 	sts	0x0E37, r25
    93e8:	80 93 36 0e 	sts	0x0E36, r24
		game.player.run.anims[0] = (char*) map_hero_step_0;
    93ec:	8f ea       	ldi	r24, 0xAF	; 175
    93ee:	9d e2       	ldi	r25, 0x2D	; 45
    93f0:	90 93 fc 0f 	sts	0x0FFC, r25
    93f4:	80 93 fb 0f 	sts	0x0FFB, r24
		game.player.run.anims[1] = (char*) map_hero_step_1;
    93f8:	87 ea       	ldi	r24, 0xA7	; 167
    93fa:	9d e2       	ldi	r25, 0x2D	; 45
    93fc:	90 93 fe 0f 	sts	0x0FFE, r25
    9400:	80 93 fd 0f 	sts	0x0FFD, r24
		game.player.run.anims[2] = (char*) map_hero_step_2;
    9404:	8f e9       	ldi	r24, 0x9F	; 159
    9406:	9d e2       	ldi	r25, 0x2D	; 45
    9408:	90 93 00 10 	sts	0x1000, r25
    940c:	80 93 ff 0f 	sts	0x0FFF, r24
		game.player.run.anims[3] = (char*) map_hero_step_3;
    9410:	87 e9       	ldi	r24, 0x97	; 151
    9412:	9d e2       	ldi	r25, 0x2D	; 45
    9414:	90 93 02 10 	sts	0x1002, r25
    9418:	80 93 01 10 	sts	0x1001, r24
	}
	game.player.direction = D_RIGHT;
    941c:	81 e0       	ldi	r24, 0x01	; 1
    941e:	80 93 d6 0d 	sts	0x0DD6, r24
	game.player.flags = IDLE;
    9422:	98 e0       	ldi	r25, 0x08	; 8
    9424:	90 93 d4 0d 	sts	0x0DD4, r25
	game.player.shield = PLAYER_SHIELD;
    9428:	9a e0       	ldi	r25, 0x0A	; 10
    942a:	90 93 d9 0d 	sts	0x0DD9, r25
	game.player.idle.anim_count = 1;
    942e:	80 93 29 0e 	sts	0x0E29, r24
	game.player.idle.frames_per_anim = 1;
    9432:	80 93 2a 0e 	sts	0x0E2A, r24
	game.player.idle.anims = idle_anim;
    9436:	2d e0       	ldi	r18, 0x0D	; 13
    9438:	30 e1       	ldi	r19, 0x10	; 16
    943a:	30 93 2f 0e 	sts	0x0E2F, r19
    943e:	20 93 2e 0e 	sts	0x0E2E, r18
	game.player.idle.anims[0] = (char*) map_hero_idle;
    9442:	27 eb       	ldi	r18, 0xB7	; 183
    9444:	3d e2       	ldi	r19, 0x2D	; 45
    9446:	30 93 0e 10 	sts	0x100E, r19
    944a:	20 93 0d 10 	sts	0x100D, r18
	
	game.player.jump.anim_count = 1;
    944e:	80 93 39 0e 	sts	0x0E39, r24
	game.player.jump.frames_per_anim = 1;
    9452:	80 93 3a 0e 	sts	0x0E3A, r24
	game.player.jump.anims = jump_anim;
    9456:	24 e8       	ldi	r18, 0x84	; 132
    9458:	3d e0       	ldi	r19, 0x0D	; 13
    945a:	30 93 3f 0e 	sts	0x0E3F, r19
    945e:	20 93 3e 0e 	sts	0x0E3E, r18
	game.player.jump.anims[0] = (char*) map_hero_jump;
    9462:	2f e8       	ldi	r18, 0x8F	; 143
    9464:	3d e2       	ldi	r19, 0x2D	; 45
    9466:	30 93 85 0d 	sts	0x0D85, r19
    946a:	20 93 84 0d 	sts	0x0D84, r18
	
	game.player.prone.anim_count = 1;
    946e:	80 93 41 0e 	sts	0x0E41, r24
	game.player.prone.frames_per_anim = 1;
    9472:	80 93 42 0e 	sts	0x0E42, r24
	game.player.prone.anims = prone_anim;
    9476:	83 ea       	ldi	r24, 0xA3	; 163
    9478:	9f e0       	ldi	r25, 0x0F	; 15
    947a:	90 93 47 0e 	sts	0x0E47, r25
    947e:	80 93 46 0e 	sts	0x0E46, r24
	game.player.prone.anims[0] = (char*) map_hero_prone;
    9482:	8a e8       	ldi	r24, 0x8A	; 138
    9484:	9d e2       	ldi	r25, 0x2D	; 45
    9486:	90 93 a4 0f 	sts	0x0FA4, r25
    948a:	80 93 a3 0f 	sts	0x0FA3, r24
	
	game.player.expl.anim_count = 3;
    948e:	83 e0       	ldi	r24, 0x03	; 3
    9490:	80 93 49 0e 	sts	0x0E49, r24
	game.player.expl.frames_per_anim = EXPLOSION_FRAME_COUNT;
    9494:	85 e0       	ldi	r24, 0x05	; 5
    9496:	80 93 4a 0e 	sts	0x0E4A, r24
	game.player.expl.anims = expl_anim;
    949a:	87 e0       	ldi	r24, 0x07	; 7
    949c:	90 e1       	ldi	r25, 0x10	; 16
    949e:	90 93 4f 0e 	sts	0x0E4F, r25
    94a2:	80 93 4e 0e 	sts	0x0E4E, r24
	game.player.expl.anims[0] = (char*) map_explosion_0;
    94a6:	84 ed       	ldi	r24, 0xD4	; 212
    94a8:	9d e2       	ldi	r25, 0x2D	; 45
    94aa:	90 93 08 10 	sts	0x1008, r25
    94ae:	80 93 07 10 	sts	0x1007, r24
	game.player.expl.anims[1] = (char*) map_explosion_1;
    94b2:	81 ed       	ldi	r24, 0xD1	; 209
    94b4:	9d e2       	ldi	r25, 0x2D	; 45
    94b6:	90 93 0a 10 	sts	0x100A, r25
    94ba:	80 93 09 10 	sts	0x1009, r24
	game.player.expl.anims[2] = (char*) map_explosion_2;
    94be:	8e ec       	ldi	r24, 0xCE	; 206
    94c0:	9d e2       	ldi	r25, 0x2D	; 45
    94c2:	90 93 0c 10 	sts	0x100C, r25
    94c6:	80 93 0b 10 	sts	0x100B, r24
    94ca:	ee ee       	ldi	r30, 0xEE	; 238
    94cc:	fd e0       	ldi	r31, 0x0D	; 13
	
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
	{
		game.player.shot[i].hit_count = 1;
    94ce:	81 e0       	ldi	r24, 0x01	; 1
		game.player.shot[i].shot_type = BASIC_SHOT;
		game.player.shot[i].anim.anim_count = 1;
		game.player.shot[i].anim.frames_per_anim = 1;
		game.player.shot[i].anim.anims = shot_anim;
    94d0:	25 e0       	ldi	r18, 0x05	; 5
    94d2:	30 e1       	ldi	r19, 0x10	; 16
    94d4:	df 01       	movw	r26, r30
    94d6:	14 97       	sbiw	r26, 0x04	; 4
	game.player.expl.anims[1] = (char*) map_explosion_1;
	game.player.expl.anims[2] = (char*) map_explosion_2;
	
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
	{
		game.player.shot[i].hit_count = 1;
    94d8:	8c 93       	st	X, r24
    94da:	11 97       	sbiw	r26, 0x01	; 1
		game.player.shot[i].shot_type = BASIC_SHOT;
    94dc:	1c 92       	st	X, r1
    94de:	14 96       	adiw	r26, 0x04	; 4
		game.player.shot[i].anim.anim_count = 1;
    94e0:	8c 93       	st	X, r24
		game.player.shot[i].anim.frames_per_anim = 1;
    94e2:	80 83       	st	Z, r24
		game.player.shot[i].anim.anims = shot_anim;
    94e4:	35 83       	std	Z+5, r19	; 0x05
    94e6:	24 83       	std	Z+4, r18	; 0x04
    94e8:	7a 96       	adiw	r30, 0x1a	; 26
	game.player.expl.anims = expl_anim;
	game.player.expl.anims[0] = (char*) map_explosion_0;
	game.player.expl.anims[1] = (char*) map_explosion_1;
	game.player.expl.anims[2] = (char*) map_explosion_2;
	
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
    94ea:	9e e0       	ldi	r25, 0x0E	; 14
    94ec:	ec 33       	cpi	r30, 0x3C	; 60
    94ee:	f9 07       	cpc	r31, r25
    94f0:	89 f7       	brne	.-30     	; 0x94d4 <init_player_state+0x152>
    94f2:	89 e6       	ldi	r24, 0x69	; 105
    94f4:	9d e2       	ldi	r25, 0x2D	; 45
    94f6:	90 93 06 10 	sts	0x1006, r25
    94fa:	80 93 05 10 	sts	0x1005, r24
    94fe:	08 95       	ret

00009500 <init_enemy_shot>:
		game.player.shot[i].anim.anims[0] = (char*) map_hero_shot;
	}
}

void init_enemy_shot(u8 i, u16 x, u16 y)
{
    9500:	ef 92       	push	r14
    9502:	ff 92       	push	r15
    9504:	0f 93       	push	r16
    9506:	1f 93       	push	r17
    9508:	cf 93       	push	r28
    950a:	df 93       	push	r29
    950c:	8a 01       	movw	r16, r20
	game.enemies[i].expl.anim_count = 3;
    950e:	22 e4       	ldi	r18, 0x42	; 66
    9510:	82 9f       	mul	r24, r18
    9512:	c0 01       	movw	r24, r0
    9514:	11 24       	eor	r1, r1
    9516:	ec 01       	movw	r28, r24
    9518:	ca 55       	subi	r28, 0x5A	; 90
    951a:	d2 4f       	sbci	r29, 0xF2	; 242
    951c:	fe 01       	movw	r30, r28
    951e:	eb 51       	subi	r30, 0x1B	; 27
    9520:	ff 4f       	sbci	r31, 0xFF	; 255
    9522:	83 e0       	ldi	r24, 0x03	; 3
    9524:	80 83       	st	Z, r24
	game.enemies[i].expl.frames_per_anim = EXPLOSION_FRAME_COUNT;
    9526:	31 96       	adiw	r30, 0x01	; 1
    9528:	85 e0       	ldi	r24, 0x05	; 5
    952a:	80 83       	st	Z, r24
	game.enemies[i].expl.anims = expl_anim;
    952c:	de 01       	movw	r26, r28
    952e:	a6 51       	subi	r26, 0x16	; 22
    9530:	bf 4f       	sbci	r27, 0xFF	; 255
    9532:	e7 e0       	ldi	r30, 0x07	; 7
    9534:	f0 e1       	ldi	r31, 0x10	; 16
    9536:	11 96       	adiw	r26, 0x01	; 1
    9538:	fc 93       	st	X, r31
    953a:	ee 93       	st	-X, r30
	game.enemies[i].expl.anims[0] = (char*) map_explosion_0;
    953c:	84 ed       	ldi	r24, 0xD4	; 212
    953e:	9d e2       	ldi	r25, 0x2D	; 45
    9540:	91 83       	std	Z+1, r25	; 0x01
    9542:	80 83       	st	Z, r24
	game.enemies[i].expl.anims[1] = (char*) map_explosion_1;
    9544:	81 ed       	ldi	r24, 0xD1	; 209
    9546:	9d e2       	ldi	r25, 0x2D	; 45
    9548:	93 83       	std	Z+3, r25	; 0x03
    954a:	82 83       	std	Z+2, r24	; 0x02
	game.enemies[i].expl.anims[2] = (char*) map_explosion_2;
    954c:	8e ec       	ldi	r24, 0xCE	; 206
    954e:	9d e2       	ldi	r25, 0x2D	; 45
    9550:	95 83       	std	Z+5, r25	; 0x05
    9552:	84 83       	std	Z+4, r24	; 0x04
		
	for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
	{
		game.enemies[i].shot[j].hit_count = 1;
    9554:	fe 01       	movw	r30, r28
    9556:	ee 52       	subi	r30, 0x2E	; 46
    9558:	ff 4f       	sbci	r31, 0xFF	; 255
    955a:	81 e0       	ldi	r24, 0x01	; 1
    955c:	80 83       	st	Z, r24
		game.enemies[i].shot[j].active = 0;
    955e:	31 96       	adiw	r30, 0x01	; 1
    9560:	10 82       	st	Z, r1
		game.enemies[i].shot[j].shot_type = BASIC_ENEMY_SHOT;
    9562:	32 97       	sbiw	r30, 0x02	; 2
    9564:	80 83       	st	Z, r24
		game.enemies[i].shot[j].anim.anim_count = 1;
    9566:	34 96       	adiw	r30, 0x04	; 4
    9568:	80 83       	st	Z, r24
		game.enemies[i].shot[j].anim.frames_per_anim = 1;
    956a:	31 96       	adiw	r30, 0x01	; 1
    956c:	80 83       	st	Z, r24
		game.enemies[i].shot[j].anim.anims = enemy_shot_anim;
    956e:	50 97       	sbiw	r26, 0x10	; 16
    9570:	e3 e0       	ldi	r30, 0x03	; 3
    9572:	f0 e1       	ldi	r31, 0x10	; 16
    9574:	ed 93       	st	X+, r30
    9576:	fc 93       	st	X, r31
		game.enemies[i].shot[j].anim.anims[0] = (char*) map_enemy_shot;
    9578:	86 e6       	ldi	r24, 0x66	; 102
    957a:	9d e2       	ldi	r25, 0x2D	; 45
    957c:	91 83       	std	Z+1, r25	; 0x01
    957e:	80 83       	st	Z, r24
		game.enemies[i].shot[j].shared.vx = 0;
    9580:	fe 01       	movw	r30, r28
    9582:	e2 53       	subi	r30, 0x32	; 50
    9584:	ff 4f       	sbci	r31, 0xFF	; 255
    9586:	11 82       	std	Z+1, r1	; 0x01
    9588:	10 82       	st	Z, r1
		game.enemies[i].shot[j].shared.vy = 0;
    958a:	3c 97       	sbiw	r30, 0x0c	; 12
    958c:	10 82       	st	Z, r1
    958e:	11 82       	std	Z+1, r1	; 0x01
    9590:	12 82       	std	Z+2, r1	; 0x02
    9592:	13 82       	std	Z+3, r1	; 0x03
		game.enemies[i].shot[j].shared.x = x;
    9594:	7e 01       	movw	r14, r28
    9596:	86 ec       	ldi	r24, 0xC6	; 198
    9598:	e8 0e       	add	r14, r24
    959a:	f1 1c       	adc	r15, r1
    959c:	80 e0       	ldi	r24, 0x00	; 0
    959e:	90 e0       	ldi	r25, 0x00	; 0
    95a0:	0e 94 5c 66 	call	0xccb8	; 0xccb8 <__floatunsisf>
    95a4:	f7 01       	movw	r30, r14
    95a6:	60 83       	st	Z, r22
    95a8:	71 83       	std	Z+1, r23	; 0x01
    95aa:	82 83       	std	Z+2, r24	; 0x02
    95ac:	93 83       	std	Z+3, r25	; 0x03
		game.enemies[i].shot[j].shared.y = y;
    95ae:	c6 53       	subi	r28, 0x36	; 54
    95b0:	df 4f       	sbci	r29, 0xFF	; 255
    95b2:	b8 01       	movw	r22, r16
    95b4:	80 e0       	ldi	r24, 0x00	; 0
    95b6:	90 e0       	ldi	r25, 0x00	; 0
    95b8:	0e 94 5c 66 	call	0xccb8	; 0xccb8 <__floatunsisf>
    95bc:	68 83       	st	Y, r22
    95be:	79 83       	std	Y+1, r23	; 0x01
    95c0:	8a 83       	std	Y+2, r24	; 0x02
    95c2:	9b 83       	std	Y+3, r25	; 0x03
	}
}
    95c4:	df 91       	pop	r29
    95c6:	cf 91       	pop	r28
    95c8:	1f 91       	pop	r17
    95ca:	0f 91       	pop	r16
    95cc:	ff 90       	pop	r15
    95ce:	ef 90       	pop	r14
    95d0:	08 95       	ret

000095d2 <init_enemy_spider>:

void init_enemy_spider(u8 i, u16 x, u16 y)
{
    95d2:	af 92       	push	r10
    95d4:	bf 92       	push	r11
    95d6:	cf 92       	push	r12
    95d8:	df 92       	push	r13
    95da:	ef 92       	push	r14
    95dc:	ff 92       	push	r15
    95de:	1f 93       	push	r17
    95e0:	cf 93       	push	r28
    95e2:	df 93       	push	r29
    95e4:	18 2f       	mov	r17, r24
    95e6:	7b 01       	movw	r14, r22
    95e8:	6a 01       	movw	r12, r20
	game.enemies[i].active = 1;
    95ea:	82 e4       	ldi	r24, 0x42	; 66
    95ec:	18 9f       	mul	r17, r24
    95ee:	e0 01       	movw	r28, r0
    95f0:	11 24       	eor	r1, r1
    95f2:	ca 55       	subi	r28, 0x5A	; 90
    95f4:	d2 4f       	sbci	r29, 0xF2	; 242
    95f6:	fe 01       	movw	r30, r28
    95f8:	e7 54       	subi	r30, 0x47	; 71
    95fa:	ff 4f       	sbci	r31, 0xFF	; 255
    95fc:	91 e0       	ldi	r25, 0x01	; 1
    95fe:	90 83       	st	Z, r25
	game.enemies[i].direction = D_LEFT;
    9600:	32 96       	adiw	r30, 0x02	; 2
    9602:	10 82       	st	Z, r1
	game.enemies[i].flags = IDLE;
    9604:	31 97       	sbiw	r30, 0x01	; 1
    9606:	88 e0       	ldi	r24, 0x08	; 8
    9608:	80 83       	st	Z, r24
	game.enemies[i].width = 1;
    960a:	32 96       	adiw	r30, 0x02	; 2
    960c:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    960e:	31 96       	adiw	r30, 0x01	; 1
    9610:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_SPIDER;
    9612:	31 96       	adiw	r30, 0x01	; 1
    9614:	10 82       	st	Z, r1
	game.enemies[i].frame_count = 0;
    9616:	31 96       	adiw	r30, 0x01	; 1
    9618:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    961a:	31 96       	adiw	r30, 0x01	; 1
    961c:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_SPIDER_SHIELD;
    961e:	31 96       	adiw	r30, 0x01	; 1
    9620:	82 e0       	ldi	r24, 0x02	; 2
    9622:	80 83       	st	Z, r24
	
	game.enemies[i].anim.anim_count = 2;
    9624:	7c 96       	adiw	r30, 0x1c	; 28
    9626:	80 83       	st	Z, r24
	game.enemies[i].anim.frames_per_anim = SPIDER_FRAMES_PER_IDLE;
    9628:	31 96       	adiw	r30, 0x01	; 1
    962a:	8a e0       	ldi	r24, 0x0A	; 10
    962c:	80 83       	st	Z, r24
	game.enemies[i].anim.anims = spider_anim;
    962e:	de 01       	movw	r26, r28
    9630:	ae 51       	subi	r26, 0x1E	; 30
    9632:	bf 4f       	sbci	r27, 0xFF	; 255
    9634:	e5 ea       	ldi	r30, 0xA5	; 165
    9636:	ff e0       	ldi	r31, 0x0F	; 15
    9638:	ed 93       	st	X+, r30
    963a:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_spider_0;
    963c:	80 e6       	ldi	r24, 0x60	; 96
    963e:	9d e2       	ldi	r25, 0x2D	; 45
    9640:	91 83       	std	Z+1, r25	; 0x01
    9642:	80 83       	st	Z, r24
	game.enemies[i].anim.anims[1] = (char*) map_enemy_spider_1;
    9644:	8d e5       	ldi	r24, 0x5D	; 93
    9646:	9d e2       	ldi	r25, 0x2D	; 45
    9648:	93 83       	std	Z+3, r25	; 0x03
    964a:	82 83       	std	Z+2, r24	; 0x02
	game.enemies[i].shared.gravity = 0;
    964c:	fe 01       	movw	r30, r28
    964e:	e8 54       	subi	r30, 0x48	; 72
    9650:	ff 4f       	sbci	r31, 0xFF	; 255
    9652:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = 0;
    9654:	32 97       	sbiw	r30, 0x02	; 2
    9656:	11 82       	std	Z+1, r1	; 0x01
    9658:	10 82       	st	Z, r1
	game.enemies[i].shared.vy = 0;
    965a:	3c 97       	sbiw	r30, 0x0c	; 12
    965c:	10 82       	st	Z, r1
    965e:	11 82       	std	Z+1, r1	; 0x01
    9660:	12 82       	std	Z+2, r1	; 0x02
    9662:	13 82       	std	Z+3, r1	; 0x03
	game.enemies[i].shared.x = x;
    9664:	5e 01       	movw	r10, r28
    9666:	ee ea       	ldi	r30, 0xAE	; 174
    9668:	ae 0e       	add	r10, r30
    966a:	b1 1c       	adc	r11, r1
    966c:	80 e0       	ldi	r24, 0x00	; 0
    966e:	90 e0       	ldi	r25, 0x00	; 0
    9670:	0e 94 5c 66 	call	0xccb8	; 0xccb8 <__floatunsisf>
    9674:	f5 01       	movw	r30, r10
    9676:	60 83       	st	Z, r22
    9678:	71 83       	std	Z+1, r23	; 0x01
    967a:	82 83       	std	Z+2, r24	; 0x02
    967c:	93 83       	std	Z+3, r25	; 0x03
	game.enemies[i].shared.y = y;
    967e:	ce 54       	subi	r28, 0x4E	; 78
    9680:	df 4f       	sbci	r29, 0xFF	; 255
    9682:	b6 01       	movw	r22, r12
    9684:	80 e0       	ldi	r24, 0x00	; 0
    9686:	90 e0       	ldi	r25, 0x00	; 0
    9688:	0e 94 5c 66 	call	0xccb8	; 0xccb8 <__floatunsisf>
    968c:	68 83       	st	Y, r22
    968e:	79 83       	std	Y+1, r23	; 0x01
    9690:	8a 83       	std	Y+2, r24	; 0x02
    9692:	9b 83       	std	Y+3, r25	; 0x03
	
	init_enemy_shot(i, x, y);
    9694:	a6 01       	movw	r20, r12
    9696:	b7 01       	movw	r22, r14
    9698:	81 2f       	mov	r24, r17
}
    969a:	df 91       	pop	r29
    969c:	cf 91       	pop	r28
    969e:	1f 91       	pop	r17
    96a0:	ff 90       	pop	r15
    96a2:	ef 90       	pop	r14
    96a4:	df 90       	pop	r13
    96a6:	cf 90       	pop	r12
    96a8:	bf 90       	pop	r11
    96aa:	af 90       	pop	r10
	game.enemies[i].shared.vx = 0;
	game.enemies[i].shared.vy = 0;
	game.enemies[i].shared.x = x;
	game.enemies[i].shared.y = y;
	
	init_enemy_shot(i, x, y);
    96ac:	0c 94 80 4a 	jmp	0x9500	; 0x9500 <init_enemy_shot>

000096b0 <init_enemy_shark>:
}

void init_enemy_shark(u8 i, u16 x, u16 y)
{
    96b0:	af 92       	push	r10
    96b2:	bf 92       	push	r11
    96b4:	cf 92       	push	r12
    96b6:	df 92       	push	r13
    96b8:	ef 92       	push	r14
    96ba:	ff 92       	push	r15
    96bc:	1f 93       	push	r17
    96be:	cf 93       	push	r28
    96c0:	df 93       	push	r29
    96c2:	18 2f       	mov	r17, r24
    96c4:	7b 01       	movw	r14, r22
    96c6:	6a 01       	movw	r12, r20
	game.enemies[i].active = 1;
    96c8:	82 e4       	ldi	r24, 0x42	; 66
    96ca:	18 9f       	mul	r17, r24
    96cc:	e0 01       	movw	r28, r0
    96ce:	11 24       	eor	r1, r1
    96d0:	ca 55       	subi	r28, 0x5A	; 90
    96d2:	d2 4f       	sbci	r29, 0xF2	; 242
    96d4:	fe 01       	movw	r30, r28
    96d6:	e7 54       	subi	r30, 0x47	; 71
    96d8:	ff 4f       	sbci	r31, 0xFF	; 255
    96da:	91 e0       	ldi	r25, 0x01	; 1
    96dc:	90 83       	st	Z, r25
	game.enemies[i].width = 1;
    96de:	33 96       	adiw	r30, 0x03	; 3
    96e0:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    96e2:	31 96       	adiw	r30, 0x01	; 1
    96e4:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_SHARK;
    96e6:	31 96       	adiw	r30, 0x01	; 1
    96e8:	90 83       	st	Z, r25
	game.enemies[i].frame_count = 0;
    96ea:	31 96       	adiw	r30, 0x01	; 1
    96ec:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    96ee:	31 96       	adiw	r30, 0x01	; 1
    96f0:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_SHARK_SHIELD;
    96f2:	31 96       	adiw	r30, 0x01	; 1
    96f4:	84 e0       	ldi	r24, 0x04	; 4
    96f6:	80 83       	st	Z, r24
	
	game.enemies[i].anim.anim_count = 1;
    96f8:	7c 96       	adiw	r30, 0x1c	; 28
    96fa:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = 1;
    96fc:	31 96       	adiw	r30, 0x01	; 1
    96fe:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = shark_anim;
    9700:	de 01       	movw	r26, r28
    9702:	ae 51       	subi	r26, 0x1E	; 30
    9704:	bf 4f       	sbci	r27, 0xFF	; 255
    9706:	e9 ea       	ldi	r30, 0xA9	; 169
    9708:	ff e0       	ldi	r31, 0x0F	; 15
    970a:	ed 93       	st	X+, r30
    970c:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_shark;
    970e:	83 e6       	ldi	r24, 0x63	; 99
    9710:	9d e2       	ldi	r25, 0x2D	; 45
    9712:	91 83       	std	Z+1, r25	; 0x01
    9714:	80 83       	st	Z, r24
	game.enemies[i].shared.gravity = 0;
    9716:	fe 01       	movw	r30, r28
    9718:	e8 54       	subi	r30, 0x48	; 72
    971a:	ff 4f       	sbci	r31, 0xFF	; 255
    971c:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = SHARK_SPEED;
    971e:	32 97       	sbiw	r30, 0x02	; 2
    9720:	84 e1       	ldi	r24, 0x14	; 20
    9722:	90 e0       	ldi	r25, 0x00	; 0
    9724:	91 83       	std	Z+1, r25	; 0x01
    9726:	80 83       	st	Z, r24
	game.enemies[i].shared.vy = 0;
    9728:	3c 97       	sbiw	r30, 0x0c	; 12
    972a:	10 82       	st	Z, r1
    972c:	11 82       	std	Z+1, r1	; 0x01
    972e:	12 82       	std	Z+2, r1	; 0x02
    9730:	13 82       	std	Z+3, r1	; 0x03
	game.enemies[i].shared.x = x;
    9732:	5e 01       	movw	r10, r28
    9734:	ee ea       	ldi	r30, 0xAE	; 174
    9736:	ae 0e       	add	r10, r30
    9738:	b1 1c       	adc	r11, r1
    973a:	80 e0       	ldi	r24, 0x00	; 0
    973c:	90 e0       	ldi	r25, 0x00	; 0
    973e:	0e 94 5c 66 	call	0xccb8	; 0xccb8 <__floatunsisf>
    9742:	f5 01       	movw	r30, r10
    9744:	60 83       	st	Z, r22
    9746:	71 83       	std	Z+1, r23	; 0x01
    9748:	82 83       	std	Z+2, r24	; 0x02
    974a:	93 83       	std	Z+3, r25	; 0x03
	game.enemies[i].shared.y = y;
    974c:	ce 54       	subi	r28, 0x4E	; 78
    974e:	df 4f       	sbci	r29, 0xFF	; 255
    9750:	b6 01       	movw	r22, r12
    9752:	80 e0       	ldi	r24, 0x00	; 0
    9754:	90 e0       	ldi	r25, 0x00	; 0
    9756:	0e 94 5c 66 	call	0xccb8	; 0xccb8 <__floatunsisf>
    975a:	68 83       	st	Y, r22
    975c:	79 83       	std	Y+1, r23	; 0x01
    975e:	8a 83       	std	Y+2, r24	; 0x02
    9760:	9b 83       	std	Y+3, r25	; 0x03
	
	init_enemy_shot(i, x, y);
    9762:	a6 01       	movw	r20, r12
    9764:	b7 01       	movw	r22, r14
    9766:	81 2f       	mov	r24, r17
}
    9768:	df 91       	pop	r29
    976a:	cf 91       	pop	r28
    976c:	1f 91       	pop	r17
    976e:	ff 90       	pop	r15
    9770:	ef 90       	pop	r14
    9772:	df 90       	pop	r13
    9774:	cf 90       	pop	r12
    9776:	bf 90       	pop	r11
    9778:	af 90       	pop	r10
	game.enemies[i].shared.vx = SHARK_SPEED;
	game.enemies[i].shared.vy = 0;
	game.enemies[i].shared.x = x;
	game.enemies[i].shared.y = y;
	
	init_enemy_shot(i, x, y);
    977a:	0c 94 80 4a 	jmp	0x9500	; 0x9500 <init_enemy_shot>

0000977e <load_eeprom>:
 *  0x01 = EEPROM_ERROR_INVALID_BLOCK
 *  0x02 = EEPROM_ERROR_FULL
 *  0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 *  0x04 = EEPROM_ERROR_NOT_FORMATTED
 */
{
    977e:	cf 93       	push	r28
    9780:	df 93       	push	r29
    9782:	ec 01       	movw	r28, r24
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
    9784:	bc 01       	movw	r22, r24
    9786:	88 81       	ld	r24, Y
    9788:	99 81       	ldd	r25, Y+1	; 0x01
    978a:	0e 94 c2 39 	call	0x7384	; 0x7384 <EepromReadBlock>
	if (status == 0x03)
    978e:	83 30       	cpi	r24, 0x03	; 3
    9790:	29 f4       	brne	.+10     	; 0x979c <load_eeprom+0x1e>
	{
		status = EepromWriteBlock(block);
    9792:	ce 01       	movw	r24, r28
	}
}
    9794:	df 91       	pop	r29
    9796:	cf 91       	pop	r28
{
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
	if (status == 0x03)
	{
		status = EepromWriteBlock(block);
    9798:	0c 94 78 39 	jmp	0x72f0	; 0x72f0 <EepromWriteBlock>
	}
}
    979c:	df 91       	pop	r29
    979e:	cf 91       	pop	r28
    97a0:	08 95       	ret

000097a2 <clear_overlay>:
{
	SetTile(x, y, level_tile);
}

void clear_overlay(u8 overlayHeight)
{
    97a2:	1f 93       	push	r17
    97a4:	cf 93       	push	r28
    97a6:	df 93       	push	r29
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
    97a8:	d0 e0       	ldi	r29, 0x00	; 0
    97aa:	10 e2       	ldi	r17, 0x20	; 32
    97ac:	18 0f       	add	r17, r24
{
	SetTile(x, y, level_tile);
}

void clear_overlay(u8 overlayHeight)
{
    97ae:	c0 e2       	ldi	r28, 0x20	; 32
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
	{
		for(u8 y = 0; y < overlayHeight; y++)
    97b0:	c1 17       	cp	r28, r17
    97b2:	41 f0       	breq	.+16     	; 0x97c4 <clear_overlay+0x22>
		{
			SetTile(x, VRAM_TILES_V+y, 0);
    97b4:	40 e0       	ldi	r20, 0x00	; 0
    97b6:	50 e0       	ldi	r21, 0x00	; 0
    97b8:	6c 2f       	mov	r22, r28
    97ba:	8d 2f       	mov	r24, r29
    97bc:	0e 94 07 38 	call	0x700e	; 0x700e <SetTile>
    97c0:	cf 5f       	subi	r28, 0xFF	; 255
    97c2:	f6 cf       	rjmp	.-20     	; 0x97b0 <clear_overlay+0xe>
	SetTile(x, y, level_tile);
}

void clear_overlay(u8 overlayHeight)
{
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
    97c4:	df 5f       	subi	r29, 0xFF	; 255
    97c6:	dc 31       	cpi	r29, 0x1C	; 28
    97c8:	91 f7       	brne	.-28     	; 0x97ae <clear_overlay+0xc>
		for(u8 y = 0; y < overlayHeight; y++)
		{
			SetTile(x, VRAM_TILES_V+y, 0);
		}
	}
}
    97ca:	df 91       	pop	r29
    97cc:	cf 91       	pop	r28
    97ce:	1f 91       	pop	r17
    97d0:	08 95       	ret

000097d2 <read_level_byte>:
#else
u8 read_level_byte(char* level_data, u16 index)
{
	// C Code
	
	u16 counter = index / 128 * 32;
    97d2:	9b 01       	movw	r18, r22
    97d4:	22 0f       	add	r18, r18
    97d6:	23 2f       	mov	r18, r19
    97d8:	22 1f       	adc	r18, r18
    97da:	33 0b       	sbc	r19, r19
    97dc:	31 95       	neg	r19
	u16 cumulative_rlength = index / 128 * 128;
    97de:	a9 01       	movw	r20, r18
    97e0:	56 95       	lsr	r21
    97e2:	54 2f       	mov	r21, r20
    97e4:	44 27       	eor	r20, r20
    97e6:	57 95       	ror	r21
    97e8:	47 95       	ror	r20
#else
u8 read_level_byte(char* level_data, u16 index)
{
	// C Code
	
	u16 counter = index / 128 * 32;
    97ea:	f5 e0       	ldi	r31, 0x05	; 5
    97ec:	22 0f       	add	r18, r18
    97ee:	33 1f       	adc	r19, r19
    97f0:	fa 95       	dec	r31
    97f2:	e1 f7       	brne	.-8      	; 0x97ec <read_level_byte+0x1a>
    97f4:	28 0f       	add	r18, r24
    97f6:	39 1f       	adc	r19, r25
	u8 rlength = 0;
	u8 value = 0;
	
	while (1)
	{
		rlength = pgm_read_byte(&level_data[counter]);
    97f8:	f9 01       	movw	r30, r18
    97fa:	94 91       	lpm	r25, Z
    97fc:	31 96       	adiw	r30, 0x01	; 1
		value = pgm_read_byte(&level_data[counter+1]);
    97fe:	84 91       	lpm	r24, Z
		cumulative_rlength += rlength;
    9800:	49 0f       	add	r20, r25
    9802:	51 1d       	adc	r21, r1
    9804:	2e 5f       	subi	r18, 0xFE	; 254
    9806:	3f 4f       	sbci	r19, 0xFF	; 255
		if (cumulative_rlength > index)
    9808:	64 17       	cp	r22, r20
    980a:	75 07       	cpc	r23, r21
    980c:	a8 f7       	brcc	.-22     	; 0x97f8 <read_level_byte+0x26>
	  [cntr] "+z" (counter),
	  [crln] "+r" (cumulative_rlength),
	  [rln]  "+r" (rlength),
	  [vl]   "=&r" (value));
	return value;*/
}
    980e:	08 95       	ret

00009810 <get_level_tile>:
{
	return 21;
}

u8 get_level_tile(char* level_data, u16 x, u16 y)
{
    9810:	ef 92       	push	r14
    9812:	ff 92       	push	r15
    9814:	0f 93       	push	r16
    9816:	1f 93       	push	r17
    9818:	cf 93       	push	r28
    981a:	df 93       	push	r29
    981c:	8c 01       	movw	r16, r24
    981e:	7b 01       	movw	r14, r22
    9820:	ea 01       	movw	r28, r20
	if (is_space())
    9822:	0e 94 93 49 	call	0x9326	; 0x9326 <is_space>
    9826:	b7 01       	movw	r22, r14
    9828:	6e 5f       	subi	r22, 0xFE	; 254
    982a:	7f 4f       	sbci	r23, 0xFF	; 255
    982c:	88 23       	and	r24, r24
    982e:	41 f0       	breq	.+16     	; 0x9840 <get_level_tile+0x30>
	{
		return read_level_byte(level_data, 2 + y*32+x);
    9830:	85 e0       	ldi	r24, 0x05	; 5
    9832:	cc 0f       	add	r28, r28
    9834:	dd 1f       	adc	r29, r29
    9836:	8a 95       	dec	r24
    9838:	e1 f7       	brne	.-8      	; 0x9832 <get_level_tile+0x22>
    983a:	6c 0f       	add	r22, r28
    983c:	7d 1f       	adc	r23, r29
    983e:	09 c0       	rjmp	.+18     	; 0x9852 <get_level_tile+0x42>
	}
	return read_level_byte(level_data, 2 + y*game.level_width+x);
    9840:	80 91 b8 0d 	lds	r24, 0x0DB8
    9844:	8c 9f       	mul	r24, r28
    9846:	a0 01       	movw	r20, r0
    9848:	8d 9f       	mul	r24, r29
    984a:	50 0d       	add	r21, r0
    984c:	11 24       	eor	r1, r1
    984e:	64 0f       	add	r22, r20
    9850:	75 1f       	adc	r23, r21
    9852:	c8 01       	movw	r24, r16
}
    9854:	df 91       	pop	r29
    9856:	cf 91       	pop	r28
    9858:	1f 91       	pop	r17
    985a:	0f 91       	pop	r16
    985c:	ff 90       	pop	r15
    985e:	ef 90       	pop	r14
{
	if (is_space())
	{
		return read_level_byte(level_data, 2 + y*32+x);
	}
	return read_level_byte(level_data, 2 + y*game.level_width+x);
    9860:	0c 94 e9 4b 	jmp	0x97d2	; 0x97d2 <read_level_byte>

00009864 <render_camera_view>:
}

void render_camera_view()
{
    9864:	6f 92       	push	r6
    9866:	7f 92       	push	r7
    9868:	8f 92       	push	r8
    986a:	9f 92       	push	r9
    986c:	af 92       	push	r10
    986e:	bf 92       	push	r11
    9870:	cf 92       	push	r12
    9872:	df 92       	push	r13
    9874:	ef 92       	push	r14
    9876:	ff 92       	push	r15
    9878:	0f 93       	push	r16
    987a:	1f 93       	push	r17
    987c:	cf 93       	push	r28
    987e:	df 93       	push	r29
	u8 level_tile;
	u16 camara_x_tile = game.camera_x/8;
    9880:	e0 90 aa 0d 	lds	r14, 0x0DAA
    9884:	f0 90 ab 0d 	lds	r15, 0x0DAB
    9888:	83 e0       	ldi	r24, 0x03	; 3
    988a:	f6 94       	lsr	r15
    988c:	e7 94       	ror	r14
    988e:	8a 95       	dec	r24
    9890:	e1 f7       	brne	.-8      	; 0x988a <render_camera_view+0x26>
	u16 camera_y_tile = game.camera_y/8;
    9892:	00 91 ac 0d 	lds	r16, 0x0DAC
    9896:	10 91 ad 0d 	lds	r17, 0x0DAD
    989a:	93 e0       	ldi	r25, 0x03	; 3
    989c:	16 95       	lsr	r17
    989e:	07 95       	ror	r16
    98a0:	9a 95       	dec	r25
    98a2:	e1 f7       	brne	.-8      	; 0x989c <render_camera_view+0x38>
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    98a4:	37 01       	movw	r6, r14
    98a6:	67 01       	movw	r12, r14
    98a8:	8c e1       	ldi	r24, 0x1C	; 28
    98aa:	c8 0e       	add	r12, r24
    98ac:	d1 1c       	adc	r13, r1
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    98ae:	58 01       	movw	r10, r16
    98b0:	8a e1       	ldi	r24, 0x1A	; 26
    98b2:	a8 0e       	add	r10, r24
    98b4:	b1 1c       	adc	r11, r1
		{
			level_tile = get_level_tile(game.current_level, x, y);
			render_level_tile(level_tile, (Screen.scrollX / 8 + x - camara_x_tile) % 32, (Screen.scrollY / 8 + y - camera_y_tile) % 30);
    98b6:	2e e1       	ldi	r18, 0x1E	; 30
    98b8:	82 2e       	mov	r8, r18
    98ba:	91 2c       	mov	r9, r1
{
	u8 level_tile;
	u16 camara_x_tile = game.camera_x/8;
	u16 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    98bc:	c6 14       	cp	r12, r6
    98be:	d7 04       	cpc	r13, r7
    98c0:	70 f1       	brcs	.+92     	; 0x991e <render_camera_view+0xba>
    98c2:	e8 01       	movw	r28, r16
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    98c4:	ac 16       	cp	r10, r28
    98c6:	bd 06       	cpc	r11, r29
    98c8:	30 f1       	brcs	.+76     	; 0x9916 <render_camera_view+0xb2>
		{
			level_tile = get_level_tile(game.current_level, x, y);
    98ca:	ae 01       	movw	r20, r28
    98cc:	b3 01       	movw	r22, r6
    98ce:	80 91 a1 0f 	lds	r24, 0x0FA1
    98d2:	90 91 a2 0f 	lds	r25, 0x0FA2
    98d6:	0e 94 08 4c 	call	0x9810	; 0x9810 <get_level_tile>
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    98da:	28 2f       	mov	r18, r24
    98dc:	30 e0       	ldi	r19, 0x00	; 0
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
		{
			level_tile = get_level_tile(game.current_level, x, y);
			render_level_tile(level_tile, (Screen.scrollX / 8 + x - camara_x_tile) % 32, (Screen.scrollY / 8 + y - camera_y_tile) % 30);
    98de:	80 91 b3 0c 	lds	r24, 0x0CB3
    98e2:	86 95       	lsr	r24
    98e4:	86 95       	lsr	r24
    98e6:	86 95       	lsr	r24
    98e8:	90 e0       	ldi	r25, 0x00	; 0
    98ea:	80 1b       	sub	r24, r16
    98ec:	91 0b       	sbc	r25, r17
    98ee:	8c 0f       	add	r24, r28
    98f0:	9d 1f       	adc	r25, r29
    98f2:	b4 01       	movw	r22, r8
    98f4:	0e 94 99 65 	call	0xcb32	; 0xcb32 <__udivmodhi4>
    98f8:	90 91 b2 0c 	lds	r25, 0x0CB2
    98fc:	96 95       	lsr	r25
    98fe:	96 95       	lsr	r25
    9900:	96 95       	lsr	r25
    9902:	9e 19       	sub	r25, r14
    9904:	96 0d       	add	r25, r6
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    9906:	a9 01       	movw	r20, r18
    9908:	68 2f       	mov	r22, r24
    990a:	89 2f       	mov	r24, r25
    990c:	8f 71       	andi	r24, 0x1F	; 31
    990e:	0e 94 07 38 	call	0x700e	; 0x700e <SetTile>
	u16 camara_x_tile = game.camera_x/8;
	u16 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    9912:	21 96       	adiw	r28, 0x01	; 1
    9914:	d7 cf       	rjmp	.-82     	; 0x98c4 <render_camera_view+0x60>
{
	u8 level_tile;
	u16 camara_x_tile = game.camera_x/8;
	u16 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    9916:	8f ef       	ldi	r24, 0xFF	; 255
    9918:	68 1a       	sub	r6, r24
    991a:	78 0a       	sbc	r7, r24
    991c:	cf cf       	rjmp	.-98     	; 0x98bc <render_camera_view+0x58>
		{
			level_tile = get_level_tile(game.current_level, x, y);
			render_level_tile(level_tile, (Screen.scrollX / 8 + x - camara_x_tile) % 32, (Screen.scrollY / 8 + y - camera_y_tile) % 30);
		}
	}
}
    991e:	df 91       	pop	r29
    9920:	cf 91       	pop	r28
    9922:	1f 91       	pop	r17
    9924:	0f 91       	pop	r16
    9926:	ff 90       	pop	r15
    9928:	ef 90       	pop	r14
    992a:	df 90       	pop	r13
    992c:	cf 90       	pop	r12
    992e:	bf 90       	pop	r11
    9930:	af 90       	pop	r10
    9932:	9f 90       	pop	r9
    9934:	8f 90       	pop	r8
    9936:	7f 90       	pop	r7
    9938:	6f 90       	pop	r6
    993a:	08 95       	ret

0000993c <spawn_enemy>:

void spawn_enemy(u16 x, u16 y)
{
    993c:	ff 92       	push	r15
    993e:	0f 93       	push	r16
    9940:	1f 93       	push	r17
    9942:	cf 93       	push	r28
    9944:	df 93       	push	r29
    9946:	00 d0       	rcall	.+0      	; 0x9948 <spawn_enemy+0xc>
    9948:	cd b7       	in	r28, 0x3d	; 61
    994a:	de b7       	in	r29, 0x3e	; 62
    994c:	26 ea       	ldi	r18, 0xA6	; 166
    994e:	3d e0       	ldi	r19, 0x0D	; 13
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    9950:	f1 2c       	mov	r15, r1
    9952:	f9 01       	movw	r30, r18
    9954:	e7 54       	subi	r30, 0x47	; 71
    9956:	ff 4f       	sbci	r31, 0xFF	; 255
	{
		if (!game.enemies[i].active)
    9958:	40 81       	ld	r20, Z
    995a:	41 11       	cpse	r20, r1
    995c:	1c c0       	rjmp	.+56     	; 0x9996 <spawn_enemy+0x5a>
    995e:	7a 96       	adiw	r30, 0x1a	; 26
		{
			for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
			{
				if (!game.enemies[i].shot[j].active)
    9960:	40 81       	ld	r20, Z
    9962:	41 11       	cpse	r20, r1
    9964:	18 c0       	rjmp	.+48     	; 0x9996 <spawn_enemy+0x5a>
    9966:	ab 01       	movw	r20, r22
    9968:	8c 01       	movw	r16, r24
				{
					if (is_space())
    996a:	69 83       	std	Y+1, r22	; 0x01
    996c:	5a 83       	std	Y+2, r21	; 0x02
    996e:	0e 94 93 49 	call	0x9326	; 0x9326 <is_space>
    9972:	49 81       	ldd	r20, Y+1	; 0x01
    9974:	5a 81       	ldd	r21, Y+2	; 0x02
					{
						init_enemy_shark(i, x, y);
    9976:	b8 01       	movw	r22, r16
		{
			for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
			{
				if (!game.enemies[i].shot[j].active)
				{
					if (is_space())
    9978:	88 23       	and	r24, r24
    997a:	21 f0       	breq	.+8      	; 0x9984 <spawn_enemy+0x48>
					{
						init_enemy_shark(i, x, y);
    997c:	8f 2d       	mov	r24, r15
    997e:	0e 94 58 4b 	call	0x96b0	; 0x96b0 <init_enemy_shark>
    9982:	03 c0       	rjmp	.+6      	; 0x998a <spawn_enemy+0x4e>
					}
					else
					{
						init_enemy_spider(i, x, y);
    9984:	8f 2d       	mov	r24, r15
    9986:	0e 94 e9 4a 	call	0x95d2	; 0x95d2 <init_enemy_spider>
					}
					game.active_enemies++;
    998a:	80 91 c1 0d 	lds	r24, 0x0DC1
    998e:	8f 5f       	subi	r24, 0xFF	; 255
    9990:	80 93 c1 0d 	sts	0x0DC1, r24
    9994:	06 c0       	rjmp	.+12     	; 0x99a2 <spawn_enemy+0x66>
	}
}

void spawn_enemy(u16 x, u16 y)
{
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    9996:	f3 94       	inc	r15
    9998:	2e 5b       	subi	r18, 0xBE	; 190
    999a:	3f 4f       	sbci	r19, 0xFF	; 255
    999c:	45 e0       	ldi	r20, 0x05	; 5
    999e:	f4 12       	cpse	r15, r20
    99a0:	d8 cf       	rjmp	.-80     	; 0x9952 <spawn_enemy+0x16>
					return;
				}
			}
		}
	}
}
    99a2:	0f 90       	pop	r0
    99a4:	0f 90       	pop	r0
    99a6:	df 91       	pop	r29
    99a8:	cf 91       	pop	r28
    99aa:	1f 91       	pop	r17
    99ac:	0f 91       	pop	r16
    99ae:	ff 90       	pop	r15
    99b0:	08 95       	ret

000099b2 <solid_tile>:

char solid_tile(u8 level_tile)
{
	switch (level_tile)
    99b2:	81 50       	subi	r24, 0x01	; 1
    99b4:	84 30       	cpi	r24, 0x04	; 4
    99b6:	10 f0       	brcs	.+4      	; 0x99bc <solid_tile+0xa>
		case L_ICE_MIDDLE : return 1;
		case L_ICE_LEFT : return 1;
		case L_ICE_RIGHT : return 1;
		case L_ICE_BOTTOM : return 1;
	}
	return 0;
    99b8:	80 e0       	ldi	r24, 0x00	; 0
    99ba:	08 95       	ret

char solid_tile(u8 level_tile)
{
	switch (level_tile)
	{
		case L_ICE_MIDDLE : return 1;
    99bc:	81 e0       	ldi	r24, 0x01	; 1
		case L_ICE_LEFT : return 1;
		case L_ICE_RIGHT : return 1;
		case L_ICE_BOTTOM : return 1;
	}
	return 0;
}
    99be:	08 95       	ret

000099c0 <append_tile_column>:

void append_tile_column()
{
    99c0:	cf 92       	push	r12
    99c2:	df 92       	push	r13
    99c4:	ef 92       	push	r14
    99c6:	ff 92       	push	r15
    99c8:	0f 93       	push	r16
    99ca:	1f 93       	push	r17
    99cc:	cf 93       	push	r28
    99ce:	df 93       	push	r29
	u8 enemy_spawned = 0;
	u8 level_tile;
	u8 rndom = LBRandom(0, CAMERA_HEIGHT-1)*8;
    99d0:	69 e1       	ldi	r22, 0x19	; 25
    99d2:	80 e0       	ldi	r24, 0x00	; 0
    99d4:	0e 94 9f 48 	call	0x913e	; 0x913e <LBRandom>
    99d8:	88 0f       	add	r24, r24
    99da:	88 0f       	add	r24, r24
    99dc:	88 0f       	add	r24, r24

	game.column_count++;
    99de:	20 91 b2 0d 	lds	r18, 0x0DB2
    99e2:	30 91 b3 0d 	lds	r19, 0x0DB3
    99e6:	2f 5f       	subi	r18, 0xFF	; 255
    99e8:	3f 4f       	sbci	r19, 0xFF	; 255
    99ea:	30 93 b3 0d 	sts	0x0DB3, r19
    99ee:	20 93 b2 0d 	sts	0x0DB2, r18
    99f2:	c0 e0       	ldi	r28, 0x00	; 0
    99f4:	d0 e0       	ldi	r29, 0x00	; 0
	return 0;
}

void append_tile_column()
{
	u8 enemy_spawned = 0;
    99f6:	d1 2c       	mov	r13, r1

	game.column_count++;
    for (u8 y = 0; y <= CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
    99f8:	3e e1       	ldi	r19, 0x1E	; 30
    99fa:	e3 2e       	mov	r14, r19
    99fc:	f1 2c       	mov	r15, r1
		if (game.column_count % game.spawn_rate == game.spawn_rate - 1 && game.active_enemies < MAX_ENEMIES && !enemy_spawned)
		{
			if (is_space())
			{
				spawn_enemy(game.camera_x+CAMERA_WIDTH*8, rndom);
    99fe:	08 2f       	mov	r16, r24
    9a00:	10 e0       	ldi	r17, 0x00	; 0
	u8 rndom = LBRandom(0, CAMERA_HEIGHT-1)*8;

	game.column_count++;
    for (u8 y = 0; y <= CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
    9a02:	40 91 ac 0d 	lds	r20, 0x0DAC
    9a06:	50 91 ad 0d 	lds	r21, 0x0DAD
    9a0a:	23 e0       	ldi	r18, 0x03	; 3
    9a0c:	56 95       	lsr	r21
    9a0e:	47 95       	ror	r20
    9a10:	2a 95       	dec	r18
    9a12:	e1 f7       	brne	.-8      	; 0x9a0c <append_tile_column+0x4c>
    9a14:	4c 0f       	add	r20, r28
    9a16:	5d 1f       	adc	r21, r29
    9a18:	60 91 a6 0d 	lds	r22, 0x0DA6
    9a1c:	70 91 a7 0d 	lds	r23, 0x0DA7
    9a20:	80 91 a1 0f 	lds	r24, 0x0FA1
    9a24:	90 91 a2 0f 	lds	r25, 0x0FA2
    9a28:	0e 94 08 4c 	call	0x9810	; 0x9810 <get_level_tile>
    9a2c:	c8 2e       	mov	r12, r24
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    9a2e:	28 2f       	mov	r18, r24
    9a30:	30 e0       	ldi	r19, 0x00	; 0

	game.column_count++;
    for (u8 y = 0; y <= CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
    9a32:	90 91 b3 0c 	lds	r25, 0x0CB3
    9a36:	96 95       	lsr	r25
    9a38:	96 95       	lsr	r25
    9a3a:	96 95       	lsr	r25
    9a3c:	ae 01       	movw	r20, r28
    9a3e:	49 0f       	add	r20, r25
    9a40:	51 1d       	adc	r21, r1
    9a42:	ca 01       	movw	r24, r20
    9a44:	b7 01       	movw	r22, r14
    9a46:	0e 94 ad 65 	call	0xcb5a	; 0xcb5a <__divmodhi4>
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    9a4a:	a9 01       	movw	r20, r18
    9a4c:	68 2f       	mov	r22, r24
    9a4e:	80 91 bf 0d 	lds	r24, 0x0DBF
    9a52:	0e 94 07 38 	call	0x700e	; 0x700e <SetTile>
	game.column_count++;
    for (u8 y = 0; y <= CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
		if (game.column_count % game.spawn_rate == game.spawn_rate - 1 && game.active_enemies < MAX_ENEMIES && !enemy_spawned)
    9a56:	20 91 c2 0d 	lds	r18, 0x0DC2
    9a5a:	30 e0       	ldi	r19, 0x00	; 0
    9a5c:	80 91 b2 0d 	lds	r24, 0x0DB2
    9a60:	90 91 b3 0d 	lds	r25, 0x0DB3
    9a64:	b9 01       	movw	r22, r18
    9a66:	0e 94 99 65 	call	0xcb32	; 0xcb32 <__udivmodhi4>
    9a6a:	21 50       	subi	r18, 0x01	; 1
    9a6c:	31 09       	sbc	r19, r1
    9a6e:	82 17       	cp	r24, r18
    9a70:	93 07       	cpc	r25, r19
    9a72:	91 f5       	brne	.+100    	; 0x9ad8 <append_tile_column+0x118>
    9a74:	80 91 c1 0d 	lds	r24, 0x0DC1
    9a78:	85 30       	cpi	r24, 0x05	; 5
    9a7a:	70 f5       	brcc	.+92     	; 0x9ad8 <append_tile_column+0x118>
    9a7c:	d1 10       	cpse	r13, r1
    9a7e:	2a c0       	rjmp	.+84     	; 0x9ad4 <append_tile_column+0x114>
		{
			if (is_space())
    9a80:	0e 94 93 49 	call	0x9326	; 0x9326 <is_space>
    9a84:	88 23       	and	r24, r24
    9a86:	31 f0       	breq	.+12     	; 0x9a94 <append_tile_column+0xd4>
			{
				spawn_enemy(game.camera_x+CAMERA_WIDTH*8, rndom);
    9a88:	80 91 aa 0d 	lds	r24, 0x0DAA
    9a8c:	90 91 ab 0d 	lds	r25, 0x0DAB
    9a90:	b8 01       	movw	r22, r16
    9a92:	1c c0       	rjmp	.+56     	; 0x9acc <append_tile_column+0x10c>
				enemy_spawned = 1;
			}
			else if (solid_tile(level_tile))
    9a94:	8c 2d       	mov	r24, r12
    9a96:	0e 94 d9 4c 	call	0x99b2	; 0x99b2 <solid_tile>
    9a9a:	88 23       	and	r24, r24
    9a9c:	e9 f0       	breq	.+58     	; 0x9ad8 <append_tile_column+0x118>
			{
				spawn_enemy(game.camera_x+CAMERA_WIDTH*8, (game.camera_y / 8 + y - 1)*8);
    9a9e:	20 91 ac 0d 	lds	r18, 0x0DAC
    9aa2:	30 91 ad 0d 	lds	r19, 0x0DAD
    9aa6:	83 e0       	ldi	r24, 0x03	; 3
    9aa8:	36 95       	lsr	r19
    9aaa:	27 95       	ror	r18
    9aac:	8a 95       	dec	r24
    9aae:	e1 f7       	brne	.-8      	; 0x9aa8 <append_tile_column+0xe8>
    9ab0:	21 50       	subi	r18, 0x01	; 1
    9ab2:	30 4e       	sbci	r19, 0xE0	; 224
    9ab4:	2c 0f       	add	r18, r28
    9ab6:	3d 1f       	adc	r19, r29
    9ab8:	b9 01       	movw	r22, r18
    9aba:	93 e0       	ldi	r25, 0x03	; 3
    9abc:	66 0f       	add	r22, r22
    9abe:	77 1f       	adc	r23, r23
    9ac0:	9a 95       	dec	r25
    9ac2:	e1 f7       	brne	.-8      	; 0x9abc <append_tile_column+0xfc>
    9ac4:	80 91 aa 0d 	lds	r24, 0x0DAA
    9ac8:	90 91 ab 0d 	lds	r25, 0x0DAB
    9acc:	80 52       	subi	r24, 0x20	; 32
    9ace:	9f 4f       	sbci	r25, 0xFF	; 255
    9ad0:	0e 94 9e 4c 	call	0x993c	; 0x993c <spawn_enemy>
    9ad4:	dd 24       	eor	r13, r13
    9ad6:	d3 94       	inc	r13
    9ad8:	21 96       	adiw	r28, 0x01	; 1
	u8 enemy_spawned = 0;
	u8 level_tile;
	u8 rndom = LBRandom(0, CAMERA_HEIGHT-1)*8;

	game.column_count++;
    for (u8 y = 0; y <= CAMERA_HEIGHT; y++)
    9ada:	cb 31       	cpi	r28, 0x1B	; 27
    9adc:	d1 05       	cpc	r29, r1
    9ade:	09 f0       	breq	.+2      	; 0x9ae2 <append_tile_column+0x122>
    9ae0:	90 cf       	rjmp	.-224    	; 0x9a02 <append_tile_column+0x42>
				enemy_spawned = 1;
			}
		}
    }
	
    game.scroll_src_x++;
    9ae2:	c0 91 a6 0d 	lds	r28, 0x0DA6
    9ae6:	d0 91 a7 0d 	lds	r29, 0x0DA7
    9aea:	21 96       	adiw	r28, 0x01	; 1
    9aec:	d0 93 a7 0d 	sts	0x0DA7, r29
    9af0:	c0 93 a6 0d 	sts	0x0DA6, r28
	game.scroll_dest_x++;
    9af4:	80 91 bf 0d 	lds	r24, 0x0DBF
    9af8:	8f 5f       	subi	r24, 0xFF	; 255
    if(game.scroll_dest_x>=32)game.scroll_dest_x=0;
    9afa:	80 32       	cpi	r24, 0x20	; 32
    9afc:	18 f4       	brcc	.+6      	; 0x9b04 <append_tile_column+0x144>
			}
		}
    }
	
    game.scroll_src_x++;
	game.scroll_dest_x++;
    9afe:	80 93 bf 0d 	sts	0x0DBF, r24
    9b02:	02 c0       	rjmp	.+4      	; 0x9b08 <append_tile_column+0x148>
    if(game.scroll_dest_x>=32)game.scroll_dest_x=0;
    9b04:	10 92 bf 0d 	sts	0x0DBF, r1
	if(is_space() && game.scroll_src_x>=32)game.scroll_src_x=0;
    9b08:	0e 94 93 49 	call	0x9326	; 0x9326 <is_space>
    9b0c:	88 23       	and	r24, r24
    9b0e:	31 f0       	breq	.+12     	; 0x9b1c <append_tile_column+0x15c>
    9b10:	a0 97       	sbiw	r28, 0x20	; 32
    9b12:	20 f0       	brcs	.+8      	; 0x9b1c <append_tile_column+0x15c>
    9b14:	10 92 a7 0d 	sts	0x0DA7, r1
    9b18:	10 92 a6 0d 	sts	0x0DA6, r1
}
    9b1c:	df 91       	pop	r29
    9b1e:	cf 91       	pop	r28
    9b20:	1f 91       	pop	r17
    9b22:	0f 91       	pop	r16
    9b24:	ff 90       	pop	r15
    9b26:	ef 90       	pop	r14
    9b28:	df 90       	pop	r13
    9b2a:	cf 90       	pop	r12
    9b2c:	08 95       	ret

00009b2e <append_tile_row>:

void append_tile_row()
{
    9b2e:	cf 93       	push	r28
    9b30:	df 93       	push	r29
    9b32:	c0 e0       	ldi	r28, 0x00	; 0
    9b34:	d0 e0       	ldi	r29, 0x00	; 0
	u8 level_tile;

    for (u8 x = 0; x <= CAMERA_WIDTH; x++)
	{
		level_tile = get_level_tile(game.current_level, x + game.camera_x / 8, game.scroll_src_y);
    9b36:	40 91 a8 0d 	lds	r20, 0x0DA8
    9b3a:	50 91 a9 0d 	lds	r21, 0x0DA9
    9b3e:	60 91 aa 0d 	lds	r22, 0x0DAA
    9b42:	70 91 ab 0d 	lds	r23, 0x0DAB
    9b46:	83 e0       	ldi	r24, 0x03	; 3
    9b48:	76 95       	lsr	r23
    9b4a:	67 95       	ror	r22
    9b4c:	8a 95       	dec	r24
    9b4e:	e1 f7       	brne	.-8      	; 0x9b48 <append_tile_row+0x1a>
    9b50:	6c 0f       	add	r22, r28
    9b52:	7d 1f       	adc	r23, r29
    9b54:	80 91 a1 0f 	lds	r24, 0x0FA1
    9b58:	90 91 a2 0f 	lds	r25, 0x0FA2
    9b5c:	0e 94 08 4c 	call	0x9810	; 0x9810 <get_level_tile>
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    9b60:	48 2f       	mov	r20, r24
    9b62:	50 e0       	ldi	r21, 0x00	; 0
	u8 level_tile;

    for (u8 x = 0; x <= CAMERA_WIDTH; x++)
	{
		level_tile = get_level_tile(game.current_level, x + game.camera_x / 8, game.scroll_src_y);
		render_level_tile(level_tile, (x + Screen.scrollX / 8) % 32, game.scroll_dest_y);
    9b64:	80 91 b2 0c 	lds	r24, 0x0CB2
    9b68:	86 95       	lsr	r24
    9b6a:	86 95       	lsr	r24
    9b6c:	86 95       	lsr	r24
    9b6e:	8c 0f       	add	r24, r28
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    9b70:	60 91 c0 0d 	lds	r22, 0x0DC0
    9b74:	8f 71       	andi	r24, 0x1F	; 31
    9b76:	0e 94 07 38 	call	0x700e	; 0x700e <SetTile>
    9b7a:	21 96       	adiw	r28, 0x01	; 1

void append_tile_row()
{
	u8 level_tile;

    for (u8 x = 0; x <= CAMERA_WIDTH; x++)
    9b7c:	cd 31       	cpi	r28, 0x1D	; 29
    9b7e:	d1 05       	cpc	r29, r1
    9b80:	d1 f6       	brne	.-76     	; 0x9b36 <append_tile_row+0x8>
	{
		level_tile = get_level_tile(game.current_level, x + game.camera_x / 8, game.scroll_src_y);
		render_level_tile(level_tile, (x + Screen.scrollX / 8) % 32, game.scroll_dest_y);
    }
	
    game.scroll_src_y++;
    9b82:	80 91 a8 0d 	lds	r24, 0x0DA8
    9b86:	90 91 a9 0d 	lds	r25, 0x0DA9
    9b8a:	01 96       	adiw	r24, 0x01	; 1
    9b8c:	90 93 a9 0d 	sts	0x0DA9, r25
    9b90:	80 93 a8 0d 	sts	0x0DA8, r24
	game.scroll_dest_y++;
    9b94:	80 91 c0 0d 	lds	r24, 0x0DC0
    9b98:	8f 5f       	subi	r24, 0xFF	; 255
    if(game.scroll_dest_y>=30)game.scroll_dest_y=0;
    9b9a:	8e 31       	cpi	r24, 0x1E	; 30
    9b9c:	18 f4       	brcc	.+6      	; 0x9ba4 <append_tile_row+0x76>
		level_tile = get_level_tile(game.current_level, x + game.camera_x / 8, game.scroll_src_y);
		render_level_tile(level_tile, (x + Screen.scrollX / 8) % 32, game.scroll_dest_y);
    }
	
    game.scroll_src_y++;
	game.scroll_dest_y++;
    9b9e:	80 93 c0 0d 	sts	0x0DC0, r24
    9ba2:	02 c0       	rjmp	.+4      	; 0x9ba8 <append_tile_row+0x7a>
    if(game.scroll_dest_y>=30)game.scroll_dest_y=0;
    9ba4:	10 92 c0 0d 	sts	0x0DC0, r1
}
    9ba8:	df 91       	pop	r29
    9baa:	cf 91       	pop	r28
    9bac:	08 95       	ret

00009bae <move_camera_x>:

void move_camera_x()
{	
	game.camera_x++;
    9bae:	80 91 aa 0d 	lds	r24, 0x0DAA
    9bb2:	90 91 ab 0d 	lds	r25, 0x0DAB
    9bb6:	01 96       	adiw	r24, 0x01	; 1
    9bb8:	90 93 ab 0d 	sts	0x0DAB, r25
    9bbc:	80 93 aa 0d 	sts	0x0DAA, r24
	Scroll(1,0);
    9bc0:	60 e0       	ldi	r22, 0x00	; 0
    9bc2:	81 e0       	ldi	r24, 0x01	; 1
    9bc4:	0e 94 28 46 	call	0x8c50	; 0x8c50 <Scroll>
	if (++game.scroll_x == 8)
    9bc8:	80 91 bd 0d 	lds	r24, 0x0DBD
    9bcc:	8f 5f       	subi	r24, 0xFF	; 255
    9bce:	88 30       	cpi	r24, 0x08	; 8
    9bd0:	19 f0       	breq	.+6      	; 0x9bd8 <move_camera_x+0x2a>
    9bd2:	80 93 bd 0d 	sts	0x0DBD, r24
    9bd6:	08 95       	ret
	{
		game.scroll_x = 0;
    9bd8:	10 92 bd 0d 	sts	0x0DBD, r1
		append_tile_column();
    9bdc:	0c 94 e0 4c 	jmp	0x99c0	; 0x99c0 <append_tile_column>

00009be0 <move_camera_y>:
	}
}

void move_camera_y()
{	
	game.camera_y+=2;
    9be0:	80 91 ac 0d 	lds	r24, 0x0DAC
    9be4:	90 91 ad 0d 	lds	r25, 0x0DAD
    9be8:	02 96       	adiw	r24, 0x02	; 2
    9bea:	90 93 ad 0d 	sts	0x0DAD, r25
    9bee:	80 93 ac 0d 	sts	0x0DAC, r24
	game.scroll_y+=2;
    9bf2:	80 91 be 0d 	lds	r24, 0x0DBE
    9bf6:	8e 5f       	subi	r24, 0xFE	; 254
    9bf8:	80 93 be 0d 	sts	0x0DBE, r24
	Scroll(0,2);
    9bfc:	62 e0       	ldi	r22, 0x02	; 2
    9bfe:	80 e0       	ldi	r24, 0x00	; 0
    9c00:	0e 94 28 46 	call	0x8c50	; 0x8c50 <Scroll>
	if (game.scroll_y == 8)
    9c04:	80 91 be 0d 	lds	r24, 0x0DBE
    9c08:	88 30       	cpi	r24, 0x08	; 8
    9c0a:	21 f4       	brne	.+8      	; 0x9c14 <move_camera_y+0x34>
	{
		game.scroll_y = 0;
    9c0c:	10 92 be 0d 	sts	0x0DBE, r1
		append_tile_row();
    9c10:	0c 94 97 4d 	jmp	0x9b2e	; 0x9b2e <append_tile_row>
    9c14:	08 95       	ret

00009c16 <map_ship>:
	}
}

void map_ship()
{
	game.player.run.anim_count = 2;
    9c16:	82 e0       	ldi	r24, 0x02	; 2
    9c18:	80 93 31 0e 	sts	0x0E31, r24
	game.player.run.frames_per_anim = EXPLOSION_FRAME_COUNT;
    9c1c:	85 e0       	ldi	r24, 0x05	; 5
    9c1e:	80 93 32 0e 	sts	0x0E32, r24
	game.player.run.anims = run_anim;
    9c22:	eb ef       	ldi	r30, 0xFB	; 251
    9c24:	ff e0       	ldi	r31, 0x0F	; 15
    9c26:	f0 93 37 0e 	sts	0x0E37, r31
    9c2a:	e0 93 36 0e 	sts	0x0E36, r30
	game.player.run.anims[0] = (char*) map_hero_ship_large_0;
    9c2e:	86 e7       	ldi	r24, 0x76	; 118
    9c30:	9d e2       	ldi	r25, 0x2D	; 45
    9c32:	91 83       	std	Z+1, r25	; 0x01
    9c34:	80 83       	st	Z, r24
	game.player.run.anims[1] = (char*) map_hero_ship_large_1;
    9c36:	8c e6       	ldi	r24, 0x6C	; 108
    9c38:	9d e2       	ldi	r25, 0x2D	; 45
    9c3a:	93 83       	std	Z+3, r25	; 0x03
    9c3c:	82 83       	std	Z+2, r24	; 0x02
    9c3e:	08 95       	ret

00009c40 <map_level_info>:
}

void map_level_info(char* level)
{
    9c40:	cf 93       	push	r28
    9c42:	df 93       	push	r29
    9c44:	ec 01       	movw	r28, r24
	game.current_level = level;
    9c46:	90 93 a2 0f 	sts	0x0FA2, r25
    9c4a:	80 93 a1 0f 	sts	0x0FA1, r24
	if (!is_space())
    9c4e:	0e 94 93 49 	call	0x9326	; 0x9326 <is_space>
    9c52:	81 11       	cpse	r24, r1
    9c54:	0d c0       	rjmp	.+26     	; 0x9c70 <map_level_info+0x30>
	{
		game.level_width = read_level_byte(level, 0);
    9c56:	60 e0       	ldi	r22, 0x00	; 0
    9c58:	70 e0       	ldi	r23, 0x00	; 0
    9c5a:	ce 01       	movw	r24, r28
    9c5c:	0e 94 e9 4b 	call	0x97d2	; 0x97d2 <read_level_byte>
    9c60:	80 93 b8 0d 	sts	0x0DB8, r24
		game.level_height = read_level_byte(level, 1);
    9c64:	61 e0       	ldi	r22, 0x01	; 1
    9c66:	70 e0       	ldi	r23, 0x00	; 0
    9c68:	ce 01       	movw	r24, r28
    9c6a:	0e 94 e9 4b 	call	0x97d2	; 0x97d2 <read_level_byte>
    9c6e:	04 c0       	rjmp	.+8      	; 0x9c78 <map_level_info+0x38>
		
	}
	else
	{
		game.level_width = 255;
    9c70:	8f ef       	ldi	r24, 0xFF	; 255
    9c72:	80 93 b8 0d 	sts	0x0DB8, r24
		game.level_height = 26;
    9c76:	8a e1       	ldi	r24, 0x1A	; 26
    9c78:	80 93 b9 0d 	sts	0x0DB9, r24
	}
}
    9c7c:	df 91       	pop	r29
    9c7e:	cf 91       	pop	r28
    9c80:	08 95       	ret

00009c82 <on_solid_ground>:
		}
	}
}

char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
    9c82:	2f 92       	push	r2
    9c84:	3f 92       	push	r3
    9c86:	4f 92       	push	r4
    9c88:	5f 92       	push	r5
    9c8a:	6f 92       	push	r6
    9c8c:	7f 92       	push	r7
    9c8e:	8f 92       	push	r8
    9c90:	9f 92       	push	r9
    9c92:	af 92       	push	r10
    9c94:	bf 92       	push	r11
    9c96:	cf 92       	push	r12
    9c98:	df 92       	push	r13
    9c9a:	ef 92       	push	r14
    9c9c:	ff 92       	push	r15
    9c9e:	0f 93       	push	r16
    9ca0:	1f 93       	push	r17
    9ca2:	cf 93       	push	r28
    9ca4:	df 93       	push	r29
    9ca6:	00 d0       	rcall	.+0      	; 0x9ca8 <on_solid_ground+0x26>
    9ca8:	00 d0       	rcall	.+0      	; 0x9caa <on_solid_ground+0x28>
    9caa:	00 d0       	rcall	.+0      	; 0x9cac <on_solid_ground+0x2a>
    9cac:	cd b7       	in	r28, 0x3d	; 61
    9cae:	de b7       	in	r29, 0x3e	; 62
    9cb0:	9e 83       	std	Y+6, r25	; 0x06
    9cb2:	8d 83       	std	Y+5, r24	; 0x05
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
    9cb4:	88 e0       	ldi	r24, 0x08	; 8
    9cb6:	48 9f       	mul	r20, r24
    9cb8:	a0 01       	movw	r20, r0
    9cba:	11 24       	eor	r1, r1
    9cbc:	26 2e       	mov	r2, r22
    9cbe:	31 2c       	mov	r3, r1
char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
    9cc0:	00 e0       	ldi	r16, 0x00	; 0
    9cc2:	10 e0       	ldi	r17, 0x00	; 0
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
    9cc4:	ca 01       	movw	r24, r20
    9cc6:	aa 27       	eor	r26, r26
    9cc8:	97 fd       	sbrc	r25, 7
    9cca:	a0 95       	com	r26
    9ccc:	ba 2f       	mov	r27, r26
    9cce:	89 83       	std	Y+1, r24	; 0x01
    9cd0:	9a 83       	std	Y+2, r25	; 0x02
    9cd2:	ab 83       	std	Y+3, r26	; 0x03
    9cd4:	bc 83       	std	Y+4, r27	; 0x04
char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
    9cd6:	02 15       	cp	r16, r2
    9cd8:	13 05       	cpc	r17, r3
    9cda:	09 f4       	brne	.+2      	; 0x9cde <on_solid_ground+0x5c>
    9cdc:	85 c0       	rjmp	.+266    	; 0x9de8 <on_solid_ground+0x166>
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
    9cde:	69 81       	ldd	r22, Y+1	; 0x01
    9ce0:	7a 81       	ldd	r23, Y+2	; 0x02
    9ce2:	8b 81       	ldd	r24, Y+3	; 0x03
    9ce4:	9c 81       	ldd	r25, Y+4	; 0x04
    9ce6:	0e 94 5e 66 	call	0xccbc	; 0xccbc <__floatsisf>
    9cea:	4b 01       	movw	r8, r22
    9cec:	5c 01       	movw	r10, r24
    9cee:	b8 01       	movw	r22, r16
    9cf0:	88 27       	eor	r24, r24
    9cf2:	77 fd       	sbrc	r23, 7
    9cf4:	80 95       	com	r24
    9cf6:	98 2f       	mov	r25, r24
    9cf8:	0e 94 5e 66 	call	0xccbc	; 0xccbc <__floatsisf>
    9cfc:	6b 01       	movw	r12, r22
    9cfe:	7c 01       	movw	r14, r24
    9d00:	ad 81       	ldd	r26, Y+5	; 0x05
    9d02:	be 81       	ldd	r27, Y+6	; 0x06
    9d04:	18 96       	adiw	r26, 0x08	; 8
    9d06:	2d 91       	ld	r18, X+
    9d08:	3d 91       	ld	r19, X+
    9d0a:	4d 91       	ld	r20, X+
    9d0c:	5c 91       	ld	r21, X
    9d0e:	1b 97       	sbiw	r26, 0x0b	; 11
    9d10:	c5 01       	movw	r24, r10
    9d12:	b4 01       	movw	r22, r8
    9d14:	0e 94 c8 65 	call	0xcb90	; 0xcb90 <__addsf3>
    9d18:	20 e0       	ldi	r18, 0x00	; 0
    9d1a:	30 e0       	ldi	r19, 0x00	; 0
    9d1c:	40 e0       	ldi	r20, 0x00	; 0
    9d1e:	5e e3       	ldi	r21, 0x3E	; 62
    9d20:	0e 94 12 67 	call	0xce24	; 0xce24 <__mulsf3>
    9d24:	0e 94 30 66 	call	0xcc60	; 0xcc60 <__fixunssfsi>
    9d28:	2b 01       	movw	r4, r22
    9d2a:	3c 01       	movw	r6, r24
    9d2c:	20 e0       	ldi	r18, 0x00	; 0
    9d2e:	30 e0       	ldi	r19, 0x00	; 0
    9d30:	40 e0       	ldi	r20, 0x00	; 0
    9d32:	5e e3       	ldi	r21, 0x3E	; 62
    9d34:	ed 81       	ldd	r30, Y+5	; 0x05
    9d36:	fe 81       	ldd	r31, Y+6	; 0x06
    9d38:	64 81       	ldd	r22, Z+4	; 0x04
    9d3a:	75 81       	ldd	r23, Z+5	; 0x05
    9d3c:	86 81       	ldd	r24, Z+6	; 0x06
    9d3e:	97 81       	ldd	r25, Z+7	; 0x07
    9d40:	0e 94 12 67 	call	0xce24	; 0xce24 <__mulsf3>
    9d44:	a7 01       	movw	r20, r14
    9d46:	96 01       	movw	r18, r12
    9d48:	0e 94 c8 65 	call	0xcb90	; 0xcb90 <__addsf3>
    9d4c:	0e 94 30 66 	call	0xcc60	; 0xcc60 <__fixunssfsi>
    9d50:	a2 01       	movw	r20, r4
    9d52:	80 91 a1 0f 	lds	r24, 0x0FA1
    9d56:	90 91 a2 0f 	lds	r25, 0x0FA2
    9d5a:	0e 94 08 4c 	call	0x9810	; 0x9810 <get_level_tile>
    9d5e:	78 2e       	mov	r7, r24
		lt2 = get_level_tile(game.current_level, (s->x+7) / 8 + x, (s->y + tile_height*8) / 8);
    9d60:	ad 81       	ldd	r26, Y+5	; 0x05
    9d62:	be 81       	ldd	r27, Y+6	; 0x06
    9d64:	18 96       	adiw	r26, 0x08	; 8
    9d66:	2d 91       	ld	r18, X+
    9d68:	3d 91       	ld	r19, X+
    9d6a:	4d 91       	ld	r20, X+
    9d6c:	5c 91       	ld	r21, X
    9d6e:	1b 97       	sbiw	r26, 0x0b	; 11
    9d70:	c5 01       	movw	r24, r10
    9d72:	b4 01       	movw	r22, r8
    9d74:	0e 94 c8 65 	call	0xcb90	; 0xcb90 <__addsf3>
    9d78:	20 e0       	ldi	r18, 0x00	; 0
    9d7a:	30 e0       	ldi	r19, 0x00	; 0
    9d7c:	40 e0       	ldi	r20, 0x00	; 0
    9d7e:	5e e3       	ldi	r21, 0x3E	; 62
    9d80:	0e 94 12 67 	call	0xce24	; 0xce24 <__mulsf3>
    9d84:	0e 94 30 66 	call	0xcc60	; 0xcc60 <__fixunssfsi>
    9d88:	4b 01       	movw	r8, r22
    9d8a:	5c 01       	movw	r10, r24
    9d8c:	20 e0       	ldi	r18, 0x00	; 0
    9d8e:	30 e0       	ldi	r19, 0x00	; 0
    9d90:	40 ee       	ldi	r20, 0xE0	; 224
    9d92:	50 e4       	ldi	r21, 0x40	; 64
    9d94:	ed 81       	ldd	r30, Y+5	; 0x05
    9d96:	fe 81       	ldd	r31, Y+6	; 0x06
    9d98:	64 81       	ldd	r22, Z+4	; 0x04
    9d9a:	75 81       	ldd	r23, Z+5	; 0x05
    9d9c:	86 81       	ldd	r24, Z+6	; 0x06
    9d9e:	97 81       	ldd	r25, Z+7	; 0x07
    9da0:	0e 94 c8 65 	call	0xcb90	; 0xcb90 <__addsf3>
    9da4:	20 e0       	ldi	r18, 0x00	; 0
    9da6:	30 e0       	ldi	r19, 0x00	; 0
    9da8:	40 e0       	ldi	r20, 0x00	; 0
    9daa:	5e e3       	ldi	r21, 0x3E	; 62
    9dac:	0e 94 12 67 	call	0xce24	; 0xce24 <__mulsf3>
    9db0:	a7 01       	movw	r20, r14
    9db2:	96 01       	movw	r18, r12
    9db4:	0e 94 c8 65 	call	0xcb90	; 0xcb90 <__addsf3>
    9db8:	0e 94 30 66 	call	0xcc60	; 0xcc60 <__fixunssfsi>
    9dbc:	a4 01       	movw	r20, r8
    9dbe:	80 91 a1 0f 	lds	r24, 0x0FA1
    9dc2:	90 91 a2 0f 	lds	r25, 0x0FA2
    9dc6:	0e 94 08 4c 	call	0x9810	; 0x9810 <get_level_tile>
    9dca:	f8 2e       	mov	r15, r24
		if (solid_tile(lt1) || solid_tile(lt2))
    9dcc:	87 2d       	mov	r24, r7
    9dce:	0e 94 d9 4c 	call	0x99b2	; 0x99b2 <solid_tile>
    9dd2:	81 11       	cpse	r24, r1
    9dd4:	0b c0       	rjmp	.+22     	; 0x9dec <on_solid_ground+0x16a>
    9dd6:	8f 2d       	mov	r24, r15
    9dd8:	0e 94 d9 4c 	call	0x99b2	; 0x99b2 <solid_tile>
    9ddc:	0f 5f       	subi	r16, 0xFF	; 255
    9dde:	1f 4f       	sbci	r17, 0xFF	; 255
    9de0:	88 23       	and	r24, r24
    9de2:	09 f4       	brne	.+2      	; 0x9de6 <on_solid_ground+0x164>
    9de4:	78 cf       	rjmp	.-272    	; 0x9cd6 <on_solid_ground+0x54>
    9de6:	02 c0       	rjmp	.+4      	; 0x9dec <on_solid_ground+0x16a>
		{
			return 1;
		}
	}
	return 0;
    9de8:	80 e0       	ldi	r24, 0x00	; 0
    9dea:	01 c0       	rjmp	.+2      	; 0x9dee <on_solid_ground+0x16c>
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
		lt2 = get_level_tile(game.current_level, (s->x+7) / 8 + x, (s->y + tile_height*8) / 8);
		if (solid_tile(lt1) || solid_tile(lt2))
		{
			return 1;
    9dec:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return 0;
}
    9dee:	26 96       	adiw	r28, 0x06	; 6
    9df0:	0f b6       	in	r0, 0x3f	; 63
    9df2:	f8 94       	cli
    9df4:	de bf       	out	0x3e, r29	; 62
    9df6:	0f be       	out	0x3f, r0	; 63
    9df8:	cd bf       	out	0x3d, r28	; 61
    9dfa:	df 91       	pop	r29
    9dfc:	cf 91       	pop	r28
    9dfe:	1f 91       	pop	r17
    9e00:	0f 91       	pop	r16
    9e02:	ff 90       	pop	r15
    9e04:	ef 90       	pop	r14
    9e06:	df 90       	pop	r13
    9e08:	cf 90       	pop	r12
    9e0a:	bf 90       	pop	r11
    9e0c:	af 90       	pop	r10
    9e0e:	9f 90       	pop	r9
    9e10:	8f 90       	pop	r8
    9e12:	7f 90       	pop	r7
    9e14:	6f 90       	pop	r6
    9e16:	5f 90       	pop	r5
    9e18:	4f 90       	pop	r4
    9e1a:	3f 90       	pop	r3
    9e1c:	2f 90       	pop	r2
    9e1e:	08 95       	ret

00009e20 <find_shot_slot>:

u8 find_shot_slot()
{
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
	{
		if (!game.player.shot[i].active) return i;
    9e20:	80 91 eb 0d 	lds	r24, 0x0DEB
    9e24:	88 23       	and	r24, r24
    9e26:	61 f0       	breq	.+24     	; 0x9e40 <find_shot_slot+0x20>
    9e28:	80 91 05 0e 	lds	r24, 0x0E05
    9e2c:	88 23       	and	r24, r24
    9e2e:	31 f0       	breq	.+12     	; 0x9e3c <find_shot_slot+0x1c>
    9e30:	80 91 1f 0e 	lds	r24, 0x0E1F
    9e34:	81 11       	cpse	r24, r1
    9e36:	04 c0       	rjmp	.+8      	; 0x9e40 <find_shot_slot+0x20>
	return 0;
}

u8 find_shot_slot()
{
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
    9e38:	82 e0       	ldi	r24, 0x02	; 2
    9e3a:	08 95       	ret
    9e3c:	81 e0       	ldi	r24, 0x01	; 1
	{
		if (!game.player.shot[i].active) return i;
    9e3e:	08 95       	ret
	}
	return 0;
    9e40:	80 e0       	ldi	r24, 0x00	; 0
}
    9e42:	08 95       	ret

00009e44 <update_shot>:

void update_shot()
{
    9e44:	8f 92       	push	r8
    9e46:	9f 92       	push	r9
    9e48:	af 92       	push	r10
    9e4a:	bf 92       	push	r11
    9e4c:	df 92       	push	r13
    9e4e:	ef 92       	push	r14
    9e50:	ff 92       	push	r15
    9e52:	0f 93       	push	r16
    9e54:	1f 93       	push	r17
    9e56:	cf 93       	push	r28
    9e58:	df 93       	push	r29
	// Shot updates
	u8 idx;
	if (game.joypadState.pressed & BTN_A && game.player.active_shots < MAX_PLAYER_SHOTS)
    9e5a:	80 91 9a 0f 	lds	r24, 0x0F9A
    9e5e:	90 91 9b 0f 	lds	r25, 0x0F9B
    9e62:	90 ff       	sbrs	r25, 0
    9e64:	df c0       	rjmp	.+446    	; 0xa024 <update_shot+0x1e0>
    9e66:	80 91 d3 0d 	lds	r24, 0x0DD3
    9e6a:	83 30       	cpi	r24, 0x03	; 3
    9e6c:	08 f0       	brcs	.+2      	; 0x9e70 <update_shot+0x2c>
    9e6e:	da c0       	rjmp	.+436    	; 0xa024 <update_shot+0x1e0>
	{
		SFX_PLAYER_SHOOT;
    9e70:	2f ef       	ldi	r18, 0xFF	; 255
    9e72:	43 e2       	ldi	r20, 0x23	; 35
    9e74:	63 e0       	ldi	r22, 0x03	; 3
    9e76:	82 e0       	ldi	r24, 0x02	; 2
    9e78:	0e 94 24 3c 	call	0x7848	; 0x7848 <TriggerNote>
		idx = find_shot_slot();
    9e7c:	0e 94 10 4f 	call	0x9e20	; 0x9e20 <find_shot_slot>
    9e80:	f8 2e       	mov	r15, r24
		LBMapSprite(PLAYER_SHOT_SLOT+idx, LBGetNextFrame(&game.player.shot[idx].anim), 0);
    9e82:	08 2f       	mov	r16, r24
    9e84:	10 e0       	ldi	r17, 0x00	; 0
    9e86:	9a e1       	ldi	r25, 0x1A	; 26
    9e88:	d9 2e       	mov	r13, r25
    9e8a:	d0 9e       	mul	r13, r16
    9e8c:	e0 01       	movw	r28, r0
    9e8e:	d1 9e       	mul	r13, r17
    9e90:	d0 0d       	add	r29, r0
    9e92:	11 24       	eor	r1, r1
    9e94:	ce 01       	movw	r24, r28
    9e96:	84 51       	subi	r24, 0x14	; 20
    9e98:	92 4f       	sbci	r25, 0xF2	; 242
    9e9a:	0e 94 62 47 	call	0x8ec4	; 0x8ec4 <LBGetNextFrame>
    9e9e:	40 e0       	ldi	r20, 0x00	; 0
    9ea0:	bc 01       	movw	r22, r24
    9ea2:	8b e0       	ldi	r24, 0x0B	; 11
    9ea4:	8f 0d       	add	r24, r15
    9ea6:	0e 94 c4 48 	call	0x9188	; 0x9188 <LBMapSprite>
		game.player.shot[idx].active = 1;
    9eaa:	ca 55       	subi	r28, 0x5A	; 90
    9eac:	d2 4f       	sbci	r29, 0xF2	; 242
    9eae:	fe 01       	movw	r30, r28
    9eb0:	eb 5b       	subi	r30, 0xBB	; 187
    9eb2:	ff 4f       	sbci	r31, 0xFF	; 255
    9eb4:	81 e0       	ldi	r24, 0x01	; 1
    9eb6:	80 83       	st	Z, r24
		game.player.shot[idx].shared.y = (u16) game.player.shared.y / 8 * 8;
    9eb8:	60 91 cc 0d 	lds	r22, 0x0DCC
    9ebc:	70 91 cd 0d 	lds	r23, 0x0DCD
    9ec0:	80 91 ce 0d 	lds	r24, 0x0DCE
    9ec4:	90 91 cf 0d 	lds	r25, 0x0DCF
    9ec8:	0e 94 30 66 	call	0xcc60	; 0xcc60 <__fixunssfsi>
    9ecc:	23 e0       	ldi	r18, 0x03	; 3
    9ece:	76 95       	lsr	r23
    9ed0:	67 95       	ror	r22
    9ed2:	2a 95       	dec	r18
    9ed4:	e1 f7       	brne	.-8      	; 0x9ece <update_shot+0x8a>
    9ed6:	33 e0       	ldi	r19, 0x03	; 3
    9ed8:	66 0f       	add	r22, r22
    9eda:	77 1f       	adc	r23, r23
    9edc:	3a 95       	dec	r19
    9ede:	e1 f7       	brne	.-8      	; 0x9ed8 <update_shot+0x94>
    9ee0:	80 e0       	ldi	r24, 0x00	; 0
    9ee2:	90 e0       	ldi	r25, 0x00	; 0
    9ee4:	0e 94 5c 66 	call	0xccb8	; 0xccb8 <__floatunsisf>
    9ee8:	4b 01       	movw	r8, r22
    9eea:	5c 01       	movw	r10, r24
    9eec:	6c af       	std	Y+60, r22	; 0x3c
    9eee:	7d af       	std	Y+61, r23	; 0x3d
    9ef0:	8e af       	std	Y+62, r24	; 0x3e
    9ef2:	9f af       	std	Y+63, r25	; 0x3f
		if (is_space())
    9ef4:	0e 94 93 49 	call	0x9326	; 0x9326 <is_space>
    9ef8:	98 01       	movw	r18, r16
    9efa:	2f 5f       	subi	r18, 0xFF	; 255
    9efc:	3f 4f       	sbci	r19, 0xFF	; 255
    9efe:	79 01       	movw	r14, r18
    9f00:	88 23       	and	r24, r24
    9f02:	59 f1       	breq	.+86     	; 0x9f5a <update_shot+0x116>
		{
			game.player.shot[idx].shared.x = game.player.shared.x+game.player.width*8;
    9f04:	60 91 d7 0d 	lds	r22, 0x0DD7
    9f08:	d2 9e       	mul	r13, r18
    9f0a:	80 01       	movw	r16, r0
    9f0c:	d3 9e       	mul	r13, r19
    9f0e:	10 0d       	add	r17, r0
    9f10:	11 24       	eor	r1, r1
    9f12:	0a 55       	subi	r16, 0x5A	; 90
    9f14:	12 4f       	sbci	r17, 0xF2	; 242
    9f16:	38 e0       	ldi	r19, 0x08	; 8
    9f18:	63 9f       	mul	r22, r19
    9f1a:	b0 01       	movw	r22, r0
    9f1c:	11 24       	eor	r1, r1
    9f1e:	88 27       	eor	r24, r24
    9f20:	77 fd       	sbrc	r23, 7
    9f22:	80 95       	com	r24
    9f24:	98 2f       	mov	r25, r24
    9f26:	0e 94 5e 66 	call	0xccbc	; 0xccbc <__floatsisf>
    9f2a:	9b 01       	movw	r18, r22
    9f2c:	ac 01       	movw	r20, r24
    9f2e:	60 91 c8 0d 	lds	r22, 0x0DC8
    9f32:	70 91 c9 0d 	lds	r23, 0x0DC9
    9f36:	80 91 ca 0d 	lds	r24, 0x0DCA
    9f3a:	90 91 cb 0d 	lds	r25, 0x0DCB
    9f3e:	0e 94 c8 65 	call	0xcb90	; 0xcb90 <__addsf3>
    9f42:	f8 01       	movw	r30, r16
    9f44:	66 8f       	std	Z+30, r22	; 0x1e
    9f46:	77 8f       	std	Z+31, r23	; 0x1f
    9f48:	80 a3       	std	Z+32, r24	; 0x20
    9f4a:	91 a3       	std	Z+33, r25	; 0x21
			game.player.shot[idx].shared.vx = SHOT_SPEED;
    9f4c:	c0 5c       	subi	r28, 0xC0	; 192
    9f4e:	df 4f       	sbci	r29, 0xFF	; 255
    9f50:	80 e9       	ldi	r24, 0x90	; 144
    9f52:	91 e0       	ldi	r25, 0x01	; 1
    9f54:	99 83       	std	Y+1, r25	; 0x01
    9f56:	88 83       	st	Y, r24
    9f58:	60 c0       	rjmp	.+192    	; 0xa01a <update_shot+0x1d6>
		}
		else
		{
			if (!(game.player.flags & PRONE))
    9f5a:	80 91 d4 0d 	lds	r24, 0x0DD4
    9f5e:	82 fd       	sbrc	r24, 2
    9f60:	0c c0       	rjmp	.+24     	; 0x9f7a <update_shot+0x136>
			{
				game.player.shot[idx].shared.y += 8;
    9f62:	20 e0       	ldi	r18, 0x00	; 0
    9f64:	30 e0       	ldi	r19, 0x00	; 0
    9f66:	40 e0       	ldi	r20, 0x00	; 0
    9f68:	51 e4       	ldi	r21, 0x41	; 65
    9f6a:	c5 01       	movw	r24, r10
    9f6c:	b4 01       	movw	r22, r8
    9f6e:	0e 94 c8 65 	call	0xcb90	; 0xcb90 <__addsf3>
    9f72:	6c af       	std	Y+60, r22	; 0x3c
    9f74:	7d af       	std	Y+61, r23	; 0x3d
    9f76:	8e af       	std	Y+62, r24	; 0x3e
    9f78:	9f af       	std	Y+63, r25	; 0x3f
			}
			if (game.player.direction == D_RIGHT)
    9f7a:	80 91 d6 0d 	lds	r24, 0x0DD6
    9f7e:	81 30       	cpi	r24, 0x01	; 1
    9f80:	39 f5       	brne	.+78     	; 0x9fd0 <update_shot+0x18c>
			{
				game.player.shot[idx].shared.x = game.player.shared.x+2*8;
    9f82:	8a e1       	ldi	r24, 0x1A	; 26
    9f84:	d8 2e       	mov	r13, r24
    9f86:	de 9c       	mul	r13, r14
    9f88:	e0 01       	movw	r28, r0
    9f8a:	df 9c       	mul	r13, r15
    9f8c:	d0 0d       	add	r29, r0
    9f8e:	11 24       	eor	r1, r1
    9f90:	ca 55       	subi	r28, 0x5A	; 90
    9f92:	d2 4f       	sbci	r29, 0xF2	; 242
    9f94:	20 e0       	ldi	r18, 0x00	; 0
    9f96:	30 e0       	ldi	r19, 0x00	; 0
    9f98:	40 e8       	ldi	r20, 0x80	; 128
    9f9a:	51 e4       	ldi	r21, 0x41	; 65
    9f9c:	60 91 c8 0d 	lds	r22, 0x0DC8
    9fa0:	70 91 c9 0d 	lds	r23, 0x0DC9
    9fa4:	80 91 ca 0d 	lds	r24, 0x0DCA
    9fa8:	90 91 cb 0d 	lds	r25, 0x0DCB
    9fac:	0e 94 c8 65 	call	0xcb90	; 0xcb90 <__addsf3>
    9fb0:	6e 8f       	std	Y+30, r22	; 0x1e
    9fb2:	7f 8f       	std	Y+31, r23	; 0x1f
    9fb4:	88 a3       	std	Y+32, r24	; 0x20
    9fb6:	99 a3       	std	Y+33, r25	; 0x21
				game.player.shot[idx].shared.vx = SHOT_SPEED;
    9fb8:	d0 9e       	mul	r13, r16
    9fba:	f0 01       	movw	r30, r0
    9fbc:	d1 9e       	mul	r13, r17
    9fbe:	f0 0d       	add	r31, r0
    9fc0:	11 24       	eor	r1, r1
    9fc2:	ea 51       	subi	r30, 0x1A	; 26
    9fc4:	f2 4f       	sbci	r31, 0xF2	; 242
    9fc6:	80 e9       	ldi	r24, 0x90	; 144
    9fc8:	91 e0       	ldi	r25, 0x01	; 1
    9fca:	91 83       	std	Z+1, r25	; 0x01
    9fcc:	80 83       	st	Z, r24
    9fce:	25 c0       	rjmp	.+74     	; 0xa01a <update_shot+0x1d6>
			}
			else
			{
				game.player.shot[idx].shared.vx = -SHOT_SPEED;
    9fd0:	8a e1       	ldi	r24, 0x1A	; 26
    9fd2:	80 9f       	mul	r24, r16
    9fd4:	f0 01       	movw	r30, r0
    9fd6:	81 9f       	mul	r24, r17
    9fd8:	f0 0d       	add	r31, r0
    9fda:	11 24       	eor	r1, r1
    9fdc:	ea 51       	subi	r30, 0x1A	; 26
    9fde:	f2 4f       	sbci	r31, 0xF2	; 242
    9fe0:	20 e7       	ldi	r18, 0x70	; 112
    9fe2:	3e ef       	ldi	r19, 0xFE	; 254
    9fe4:	31 83       	std	Z+1, r19	; 0x01
    9fe6:	20 83       	st	Z, r18
				game.player.shot[idx].shared.x = game.player.shared.x-1*8;
    9fe8:	8e 9d       	mul	r24, r14
    9fea:	e0 01       	movw	r28, r0
    9fec:	8f 9d       	mul	r24, r15
    9fee:	d0 0d       	add	r29, r0
    9ff0:	11 24       	eor	r1, r1
    9ff2:	ca 55       	subi	r28, 0x5A	; 90
    9ff4:	d2 4f       	sbci	r29, 0xF2	; 242
    9ff6:	20 e0       	ldi	r18, 0x00	; 0
    9ff8:	30 e0       	ldi	r19, 0x00	; 0
    9ffa:	40 e0       	ldi	r20, 0x00	; 0
    9ffc:	51 e4       	ldi	r21, 0x41	; 65
    9ffe:	60 91 c8 0d 	lds	r22, 0x0DC8
    a002:	70 91 c9 0d 	lds	r23, 0x0DC9
    a006:	80 91 ca 0d 	lds	r24, 0x0DCA
    a00a:	90 91 cb 0d 	lds	r25, 0x0DCB
    a00e:	0e 94 c7 65 	call	0xcb8e	; 0xcb8e <__subsf3>
    a012:	6e 8f       	std	Y+30, r22	; 0x1e
    a014:	7f 8f       	std	Y+31, r23	; 0x1f
    a016:	88 a3       	std	Y+32, r24	; 0x20
    a018:	99 a3       	std	Y+33, r25	; 0x21
			}
		}
		game.player.active_shots++;
    a01a:	80 91 d3 0d 	lds	r24, 0x0DD3
    a01e:	8f 5f       	subi	r24, 0xFF	; 255
    a020:	80 93 d3 0d 	sts	0x0DD3, r24
	}
}
    a024:	df 91       	pop	r29
    a026:	cf 91       	pop	r28
    a028:	1f 91       	pop	r17
    a02a:	0f 91       	pop	r16
    a02c:	ff 90       	pop	r15
    a02e:	ef 90       	pop	r14
    a030:	df 90       	pop	r13
    a032:	bf 90       	pop	r11
    a034:	af 90       	pop	r10
    a036:	9f 90       	pop	r9
    a038:	8f 90       	pop	r8
    a03a:	08 95       	ret

0000a03c <pixel_overlap>:
		}
	}
}

u8 pixel_overlap(u16 s1, u16 s2, u8 w1, u8 w2)
{
    a03c:	fc 01       	movw	r30, r24
	u8 result = w1;
	
	if (s2 > s1)
    a03e:	86 17       	cp	r24, r22
    a040:	97 07       	cpc	r25, r23
    a042:	28 f4       	brcc	.+10     	; 0xa04e <pixel_overlap+0x12>
    a044:	94 2f       	mov	r25, r20
    a046:	9e 0f       	add	r25, r30
	{
		result -= s2 - s1;
    a048:	89 2f       	mov	r24, r25
    a04a:	86 1b       	sub	r24, r22
    a04c:	01 c0       	rjmp	.+2      	; 0xa050 <pixel_overlap+0x14>
	}
}

u8 pixel_overlap(u16 s1, u16 s2, u8 w1, u8 w2)
{
	u8 result = w1;
    a04e:	84 2f       	mov	r24, r20
	
	if (s2 > s1)
	{
		result -= s2 - s1;
	}
	s1 = s1 + w1;
    a050:	e4 0f       	add	r30, r20
    a052:	f1 1d       	adc	r31, r1
	s2 = s2 + w2;
    a054:	62 0f       	add	r22, r18
    a056:	71 1d       	adc	r23, r1
	if (s2 < s1)
    a058:	6e 17       	cp	r22, r30
    a05a:	7f 07       	cpc	r23, r31
    a05c:	10 f4       	brcc	.+4      	; 0xa062 <pixel_overlap+0x26>
	{
		result -= s1 - s2;
    a05e:	6e 1b       	sub	r22, r30
    a060:	86 0f       	add	r24, r22
	}
	return result;
}
    a062:	08 95       	ret

0000a064 <collision_detect_level>:

u8 collision_detect_level(SpriteShared* s, u8 tile_width, u8 tile_height)
{
    a064:	2f 92       	push	r2
    a066:	3f 92       	push	r3
    a068:	4f 92       	push	r4
    a06a:	5f 92       	push	r5
    a06c:	6f 92       	push	r6
    a06e:	7f 92       	push	r7
    a070:	8f 92       	push	r8
    a072:	9f 92       	push	r9
    a074:	af 92       	push	r10
    a076:	bf 92       	push	r11
    a078:	cf 92       	push	r12
    a07a:	df 92       	push	r13
    a07c:	ef 92       	push	r14
    a07e:	ff 92       	push	r15
    a080:	0f 93       	push	r16
    a082:	1f 93       	push	r17
    a084:	cf 93       	push	r28
    a086:	df 93       	push	r29
    a088:	cd b7       	in	r28, 0x3d	; 61
    a08a:	de b7       	in	r29, 0x3e	; 62
    a08c:	68 97       	sbiw	r28, 0x18	; 24
    a08e:	0f b6       	in	r0, 0x3f	; 63
    a090:	f8 94       	cli
    a092:	de bf       	out	0x3e, r29	; 62
    a094:	0f be       	out	0x3f, r0	; 63
    a096:	cd bf       	out	0x3d, r28	; 61
    a098:	98 8f       	std	Y+24, r25	; 0x18
    a09a:	8f 8b       	std	Y+23, r24	; 0x17
    a09c:	16 2f       	mov	r17, r22
    a09e:	49 8b       	std	Y+17, r20	; 0x11
	u16 x0_tile = s->x / 8;
    a0a0:	dc 01       	movw	r26, r24
    a0a2:	14 96       	adiw	r26, 0x04	; 4
    a0a4:	4d 90       	ld	r4, X+
    a0a6:	5d 90       	ld	r5, X+
    a0a8:	6d 90       	ld	r6, X+
    a0aa:	7c 90       	ld	r7, X
    a0ac:	17 97       	sbiw	r26, 0x07	; 7
	u16 y0_tile = s->y / 8;
    a0ae:	18 96       	adiw	r26, 0x08	; 8
    a0b0:	cd 90       	ld	r12, X+
    a0b2:	dd 90       	ld	r13, X+
    a0b4:	ed 90       	ld	r14, X+
    a0b6:	fc 90       	ld	r15, X
    a0b8:	1b 97       	sbiw	r26, 0x0b	; 11
	u16 y1_tile = (s->y+7) / 8;
	u8 lt1, lt2;
	u8 result = 0;
	
	// Only if moving on planet
	if (is_space() || (s->vx == 0 && s->vy == 0)) return result;
    a0ba:	0e 94 93 49 	call	0x9326	; 0x9326 <is_space>
    a0be:	81 11       	cpse	r24, r1
    a0c0:	f2 c2       	rjmp	.+1508   	; 0xa6a6 <collision_detect_level+0x642>
    a0c2:	ef 89       	ldd	r30, Y+23	; 0x17
    a0c4:	f8 8d       	ldd	r31, Y+24	; 0x18
    a0c6:	84 85       	ldd	r24, Z+12	; 0x0c
    a0c8:	95 85       	ldd	r25, Z+13	; 0x0d
    a0ca:	89 2b       	or	r24, r25
    a0cc:	61 f4       	brne	.+24     	; 0xa0e6 <collision_detect_level+0x82>
    a0ce:	20 e0       	ldi	r18, 0x00	; 0
    a0d0:	30 e0       	ldi	r19, 0x00	; 0
    a0d2:	a9 01       	movw	r20, r18
    a0d4:	60 81       	ld	r22, Z
    a0d6:	71 81       	ldd	r23, Z+1	; 0x01
    a0d8:	82 81       	ldd	r24, Z+2	; 0x02
    a0da:	93 81       	ldd	r25, Z+3	; 0x03
    a0dc:	0e 94 2c 66 	call	0xcc58	; 0xcc58 <__cmpsf2>
    a0e0:	88 23       	and	r24, r24
    a0e2:	09 f4       	brne	.+2      	; 0xa0e6 <collision_detect_level+0x82>
    a0e4:	e0 c2       	rjmp	.+1472   	; 0xa6a6 <collision_detect_level+0x642>
	return result;
}

u8 collision_detect_level(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u16 x0_tile = s->x / 8;
    a0e6:	20 e0       	ldi	r18, 0x00	; 0
    a0e8:	30 e0       	ldi	r19, 0x00	; 0
    a0ea:	40 e0       	ldi	r20, 0x00	; 0
    a0ec:	5e e3       	ldi	r21, 0x3E	; 62
    a0ee:	c3 01       	movw	r24, r6
    a0f0:	b2 01       	movw	r22, r4
    a0f2:	0e 94 12 67 	call	0xce24	; 0xce24 <__mulsf3>
    a0f6:	0e 94 30 66 	call	0xcc60	; 0xcc60 <__fixunssfsi>
    a0fa:	4b 01       	movw	r8, r22
    a0fc:	5c 01       	movw	r10, r24
    a0fe:	68 87       	std	Y+8, r22	; 0x08
    a100:	9a 8a       	std	Y+18, r9	; 0x12
	
	// Only if moving on planet
	if (is_space() || (s->vx == 0 && s->vy == 0)) return result;
	
	// Top and Bottom
	if (s->vy != 0)
    a102:	20 e0       	ldi	r18, 0x00	; 0
    a104:	30 e0       	ldi	r19, 0x00	; 0
    a106:	a9 01       	movw	r20, r18
    a108:	af 89       	ldd	r26, Y+23	; 0x17
    a10a:	b8 8d       	ldd	r27, Y+24	; 0x18
    a10c:	6d 91       	ld	r22, X+
    a10e:	7d 91       	ld	r23, X+
    a110:	8d 91       	ld	r24, X+
    a112:	9c 91       	ld	r25, X
    a114:	0e 94 2c 66 	call	0xcc58	; 0xcc58 <__cmpsf2>
    a118:	88 23       	and	r24, r24
    a11a:	09 f4       	brne	.+2      	; 0xa11e <collision_detect_level+0xba>
    a11c:	67 c1       	rjmp	.+718    	; 0xa3ec <collision_detect_level+0x388>
}

u8 collision_detect_level(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u16 x0_tile = s->x / 8;
	u16 y0_tile = s->y / 8;
    a11e:	20 e0       	ldi	r18, 0x00	; 0
    a120:	30 e0       	ldi	r19, 0x00	; 0
    a122:	40 e0       	ldi	r20, 0x00	; 0
    a124:	5e e3       	ldi	r21, 0x3E	; 62
    a126:	c7 01       	movw	r24, r14
    a128:	b6 01       	movw	r22, r12
    a12a:	0e 94 12 67 	call	0xce24	; 0xce24 <__mulsf3>
    a12e:	0e 94 30 66 	call	0xcc60	; 0xcc60 <__fixunssfsi>
    a132:	6b 01       	movw	r12, r22
    a134:	7c 01       	movw	r14, r24
    a136:	1b 01       	movw	r2, r22
	u16 x1_tile = (s->x+7) / 8;
    a138:	20 e0       	ldi	r18, 0x00	; 0
    a13a:	30 e0       	ldi	r19, 0x00	; 0
    a13c:	40 ee       	ldi	r20, 0xE0	; 224
    a13e:	50 e4       	ldi	r21, 0x40	; 64
    a140:	c3 01       	movw	r24, r6
    a142:	b2 01       	movw	r22, r4
    a144:	0e 94 c8 65 	call	0xcb90	; 0xcb90 <__addsf3>
    a148:	20 e0       	ldi	r18, 0x00	; 0
    a14a:	30 e0       	ldi	r19, 0x00	; 0
    a14c:	40 e0       	ldi	r20, 0x00	; 0
    a14e:	5e e3       	ldi	r21, 0x3E	; 62
    a150:	0e 94 12 67 	call	0xce24	; 0xce24 <__mulsf3>
    a154:	0e 94 30 66 	call	0xcc60	; 0xcc60 <__fixunssfsi>
		{
			if (s->vy < 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, y0_tile);
				lt2 = get_level_tile(game.current_level, x1_tile + x, y0_tile);
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    a158:	f4 01       	movw	r30, r8
    a15a:	53 e0       	ldi	r21, 0x03	; 3
    a15c:	ee 0f       	add	r30, r30
    a15e:	ff 1f       	adc	r31, r31
    a160:	5a 95       	dec	r21
    a162:	e1 f7       	brne	.-8      	; 0xa15c <collision_detect_level+0xf8>
    a164:	fb 83       	std	Y+3, r31	; 0x03
    a166:	ea 83       	std	Y+2, r30	; 0x02
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    a168:	9b 01       	movw	r18, r22
    a16a:	e3 e0       	ldi	r30, 0x03	; 3
    a16c:	22 0f       	add	r18, r18
    a16e:	33 1f       	adc	r19, r19
    a170:	ea 95       	dec	r30
    a172:	e1 f7       	brne	.-8      	; 0xa16c <collision_detect_level+0x108>
    a174:	3d 83       	std	Y+5, r19	; 0x05
    a176:	2c 83       	std	Y+4, r18	; 0x04
				{
					s->vy =  0;
					s->y = (y0_tile + 1) * 8;
    a178:	3f ef       	ldi	r19, 0xFF	; 255
    a17a:	c3 1a       	sub	r12, r19
    a17c:	d3 0a       	sbc	r13, r19
    a17e:	f3 e0       	ldi	r31, 0x03	; 3
    a180:	cc 0c       	add	r12, r12
    a182:	dd 1c       	adc	r13, r13
    a184:	fa 95       	dec	r31
    a186:	e1 f7       	brne	.-8      	; 0xa180 <collision_detect_level+0x11c>
					result = 1;
				}
			}
			if (s->vy > 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, (s->y + tile_height*8 - 1) / 8);
    a188:	b9 89       	ldd	r27, Y+17	; 0x11
    a18a:	a8 e0       	ldi	r26, 0x08	; 8
    a18c:	ba 9f       	mul	r27, r26
    a18e:	a0 01       	movw	r20, r0
    a190:	11 24       	eor	r1, r1
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) || 
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vy =  0;
					s->gravity = 0;
					s->y = y0_tile * 8;
    a192:	96 01       	movw	r18, r12
    a194:	28 50       	subi	r18, 0x08	; 8
    a196:	31 09       	sbc	r19, r1
    a198:	2b 01       	movw	r4, r22
    a19a:	34 01       	movw	r6, r8
    a19c:	19 82       	std	Y+1, r1	; 0x01
				lt2 = get_level_tile(game.current_level, x1_tile + x, y0_tile);
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vy =  0;
					s->y = (y0_tile + 1) * 8;
    a19e:	b6 01       	movw	r22, r12
    a1a0:	80 e0       	ldi	r24, 0x00	; 0
    a1a2:	90 e0       	ldi	r25, 0x00	; 0
    a1a4:	69 87       	std	Y+9, r22	; 0x09
    a1a6:	7a 87       	std	Y+10, r23	; 0x0a
    a1a8:	8b 87       	std	Y+11, r24	; 0x0b
    a1aa:	9c 87       	std	Y+12, r25	; 0x0c
					result = 1;
				}
			}
			if (s->vy > 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, (s->y + tile_height*8 - 1) / 8);
    a1ac:	66 27       	eor	r22, r22
    a1ae:	57 fd       	sbrc	r21, 7
    a1b0:	60 95       	com	r22
    a1b2:	76 2f       	mov	r23, r22
    a1b4:	4d 87       	std	Y+13, r20	; 0x0d
    a1b6:	5e 87       	std	Y+14, r21	; 0x0e
    a1b8:	6f 87       	std	Y+15, r22	; 0x0f
    a1ba:	78 8b       	std	Y+16, r23	; 0x10
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) || 
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vy =  0;
					s->gravity = 0;
					s->y = y0_tile * 8;
    a1bc:	b9 01       	movw	r22, r18
    a1be:	80 e0       	ldi	r24, 0x00	; 0
    a1c0:	90 e0       	ldi	r25, 0x00	; 0
    a1c2:	6b 8b       	std	Y+19, r22	; 0x13
    a1c4:	7c 8b       	std	Y+20, r23	; 0x14
    a1c6:	8d 8b       	std	Y+21, r24	; 0x15
    a1c8:	9e 8b       	std	Y+22, r25	; 0x16
    a1ca:	86 2d       	mov	r24, r6
    a1cc:	48 85       	ldd	r20, Y+8	; 0x08
    a1ce:	84 1b       	sub	r24, r20
	if (is_space() || (s->vx == 0 && s->vy == 0)) return result;
	
	// Top and Bottom
	if (s->vy != 0)
	{
		for (u8 x = 0; x < tile_width; x++)
    a1d0:	81 17       	cp	r24, r17
    a1d2:	08 f0       	brcs	.+2      	; 0xa1d6 <collision_detect_level+0x172>
    a1d4:	0c c1       	rjmp	.+536    	; 0xa3ee <collision_detect_level+0x38a>
		{
			if (s->vy < 0)
    a1d6:	20 e0       	ldi	r18, 0x00	; 0
    a1d8:	30 e0       	ldi	r19, 0x00	; 0
    a1da:	a9 01       	movw	r20, r18
    a1dc:	af 89       	ldd	r26, Y+23	; 0x17
    a1de:	b8 8d       	ldd	r27, Y+24	; 0x18
    a1e0:	6d 91       	ld	r22, X+
    a1e2:	7d 91       	ld	r23, X+
    a1e4:	8d 91       	ld	r24, X+
    a1e6:	9c 91       	ld	r25, X
    a1e8:	0e 94 2c 66 	call	0xcc58	; 0xcc58 <__cmpsf2>
    a1ec:	87 ff       	sbrs	r24, 7
    a1ee:	58 c0       	rjmp	.+176    	; 0xa2a0 <collision_detect_level+0x23c>
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, y0_tile);
    a1f0:	a1 01       	movw	r20, r2
    a1f2:	b3 01       	movw	r22, r6
    a1f4:	80 91 a1 0f 	lds	r24, 0x0FA1
    a1f8:	90 91 a2 0f 	lds	r25, 0x0FA2
    a1fc:	0e 94 08 4c 	call	0x9810	; 0x9810 <get_level_tile>
    a200:	f8 2e       	mov	r15, r24
				lt2 = get_level_tile(game.current_level, x1_tile + x, y0_tile);
    a202:	a1 01       	movw	r20, r2
    a204:	b2 01       	movw	r22, r4
    a206:	80 91 a1 0f 	lds	r24, 0x0FA1
    a20a:	90 91 a2 0f 	lds	r25, 0x0FA2
    a20e:	0e 94 08 4c 	call	0x9810	; 0x9810 <get_level_tile>
    a212:	08 2f       	mov	r16, r24
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    a214:	8f 2d       	mov	r24, r15
    a216:	0e 94 d9 4c 	call	0x99b2	; 0x99b2 <solid_tile>
    a21a:	88 23       	and	r24, r24
    a21c:	91 f0       	breq	.+36     	; 0xa242 <collision_detect_level+0x1de>
    a21e:	ef 89       	ldd	r30, Y+23	; 0x17
    a220:	f8 8d       	ldd	r31, Y+24	; 0x18
    a222:	64 81       	ldd	r22, Z+4	; 0x04
    a224:	75 81       	ldd	r23, Z+5	; 0x05
    a226:	86 81       	ldd	r24, Z+6	; 0x06
    a228:	97 81       	ldd	r25, Z+7	; 0x07
    a22a:	0e 94 30 66 	call	0xcc60	; 0xcc60 <__fixunssfsi>
    a22e:	dc 01       	movw	r26, r24
    a230:	cb 01       	movw	r24, r22
    a232:	28 e0       	ldi	r18, 0x08	; 8
    a234:	48 e0       	ldi	r20, 0x08	; 8
    a236:	6a 81       	ldd	r22, Y+2	; 0x02
    a238:	7b 81       	ldd	r23, Y+3	; 0x03
    a23a:	0e 94 1e 50 	call	0xa03c	; 0xa03c <pixel_overlap>
    a23e:	84 30       	cpi	r24, 0x04	; 4
    a240:	c8 f4       	brcc	.+50     	; 0xa274 <collision_detect_level+0x210>
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    a242:	80 2f       	mov	r24, r16
    a244:	0e 94 d9 4c 	call	0x99b2	; 0x99b2 <solid_tile>
		{
			if (s->vy < 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, y0_tile);
				lt2 = get_level_tile(game.current_level, x1_tile + x, y0_tile);
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    a248:	88 23       	and	r24, r24
    a24a:	51 f1       	breq	.+84     	; 0xa2a0 <collision_detect_level+0x23c>
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    a24c:	af 89       	ldd	r26, Y+23	; 0x17
    a24e:	b8 8d       	ldd	r27, Y+24	; 0x18
    a250:	14 96       	adiw	r26, 0x04	; 4
    a252:	6d 91       	ld	r22, X+
    a254:	7d 91       	ld	r23, X+
    a256:	8d 91       	ld	r24, X+
    a258:	9c 91       	ld	r25, X
    a25a:	17 97       	sbiw	r26, 0x07	; 7
    a25c:	0e 94 30 66 	call	0xcc60	; 0xcc60 <__fixunssfsi>
    a260:	dc 01       	movw	r26, r24
    a262:	cb 01       	movw	r24, r22
    a264:	28 e0       	ldi	r18, 0x08	; 8
    a266:	48 e0       	ldi	r20, 0x08	; 8
    a268:	6c 81       	ldd	r22, Y+4	; 0x04
    a26a:	7d 81       	ldd	r23, Y+5	; 0x05
    a26c:	0e 94 1e 50 	call	0xa03c	; 0xa03c <pixel_overlap>
    a270:	84 30       	cpi	r24, 0x04	; 4
    a272:	b0 f0       	brcs	.+44     	; 0xa2a0 <collision_detect_level+0x23c>
				{
					s->vy =  0;
    a274:	ef 89       	ldd	r30, Y+23	; 0x17
    a276:	f8 8d       	ldd	r31, Y+24	; 0x18
    a278:	10 82       	st	Z, r1
    a27a:	11 82       	std	Z+1, r1	; 0x01
    a27c:	12 82       	std	Z+2, r1	; 0x02
    a27e:	13 82       	std	Z+3, r1	; 0x03
					s->y = (y0_tile + 1) * 8;
    a280:	69 85       	ldd	r22, Y+9	; 0x09
    a282:	7a 85       	ldd	r23, Y+10	; 0x0a
    a284:	8b 85       	ldd	r24, Y+11	; 0x0b
    a286:	9c 85       	ldd	r25, Y+12	; 0x0c
    a288:	0e 94 5c 66 	call	0xccb8	; 0xccb8 <__floatunsisf>
    a28c:	af 89       	ldd	r26, Y+23	; 0x17
    a28e:	b8 8d       	ldd	r27, Y+24	; 0x18
    a290:	18 96       	adiw	r26, 0x08	; 8
    a292:	6d 93       	st	X+, r22
    a294:	7d 93       	st	X+, r23
    a296:	8d 93       	st	X+, r24
    a298:	9c 93       	st	X, r25
    a29a:	1b 97       	sbiw	r26, 0x0b	; 11
					result = 1;
    a29c:	b1 e0       	ldi	r27, 0x01	; 1
    a29e:	b9 83       	std	Y+1, r27	; 0x01
				}
			}
			if (s->vy > 0)
    a2a0:	20 e0       	ldi	r18, 0x00	; 0
    a2a2:	30 e0       	ldi	r19, 0x00	; 0
    a2a4:	a9 01       	movw	r20, r18
    a2a6:	ef 89       	ldd	r30, Y+23	; 0x17
    a2a8:	f8 8d       	ldd	r31, Y+24	; 0x18
    a2aa:	60 81       	ld	r22, Z
    a2ac:	71 81       	ldd	r23, Z+1	; 0x01
    a2ae:	82 81       	ldd	r24, Z+2	; 0x02
    a2b0:	93 81       	ldd	r25, Z+3	; 0x03
    a2b2:	0e 94 0e 67 	call	0xce1c	; 0xce1c <__gesf2>
    a2b6:	18 16       	cp	r1, r24
    a2b8:	0c f0       	brlt	.+2      	; 0xa2bc <collision_detect_level+0x258>
    a2ba:	91 c0       	rjmp	.+290    	; 0xa3de <collision_detect_level+0x37a>
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, (s->y + tile_height*8 - 1) / 8);
    a2bc:	6d 85       	ldd	r22, Y+13	; 0x0d
    a2be:	7e 85       	ldd	r23, Y+14	; 0x0e
    a2c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    a2c2:	98 89       	ldd	r25, Y+16	; 0x10
    a2c4:	0e 94 5e 66 	call	0xccbc	; 0xccbc <__floatsisf>
    a2c8:	6b 01       	movw	r12, r22
    a2ca:	7c 01       	movw	r14, r24
    a2cc:	af 89       	ldd	r26, Y+23	; 0x17
    a2ce:	b8 8d       	ldd	r27, Y+24	; 0x18
    a2d0:	18 96       	adiw	r26, 0x08	; 8
    a2d2:	2d 91       	ld	r18, X+
    a2d4:	3d 91       	ld	r19, X+
    a2d6:	4d 91       	ld	r20, X+
    a2d8:	5c 91       	ld	r21, X
    a2da:	1b 97       	sbiw	r26, 0x0b	; 11
    a2dc:	0e 94 c8 65 	call	0xcb90	; 0xcb90 <__addsf3>
    a2e0:	20 e0       	ldi	r18, 0x00	; 0
    a2e2:	30 e0       	ldi	r19, 0x00	; 0
    a2e4:	40 e8       	ldi	r20, 0x80	; 128
    a2e6:	5f e3       	ldi	r21, 0x3F	; 63
    a2e8:	0e 94 c7 65 	call	0xcb8e	; 0xcb8e <__subsf3>
    a2ec:	20 e0       	ldi	r18, 0x00	; 0
    a2ee:	30 e0       	ldi	r19, 0x00	; 0
    a2f0:	40 e0       	ldi	r20, 0x00	; 0
    a2f2:	5e e3       	ldi	r21, 0x3E	; 62
    a2f4:	0e 94 12 67 	call	0xce24	; 0xce24 <__mulsf3>
    a2f8:	0e 94 30 66 	call	0xcc60	; 0xcc60 <__fixunssfsi>
    a2fc:	ab 01       	movw	r20, r22
    a2fe:	b3 01       	movw	r22, r6
    a300:	80 91 a1 0f 	lds	r24, 0x0FA1
    a304:	90 91 a2 0f 	lds	r25, 0x0FA2
    a308:	0e 94 08 4c 	call	0x9810	; 0x9810 <get_level_tile>
    a30c:	08 2f       	mov	r16, r24
				lt2 = get_level_tile(game.current_level, x1_tile + x, (s->y + tile_height*8 - 1) / 8);
    a30e:	ef 89       	ldd	r30, Y+23	; 0x17
    a310:	f8 8d       	ldd	r31, Y+24	; 0x18
    a312:	20 85       	ldd	r18, Z+8	; 0x08
    a314:	31 85       	ldd	r19, Z+9	; 0x09
    a316:	42 85       	ldd	r20, Z+10	; 0x0a
    a318:	53 85       	ldd	r21, Z+11	; 0x0b
    a31a:	c7 01       	movw	r24, r14
    a31c:	b6 01       	movw	r22, r12
    a31e:	0e 94 c8 65 	call	0xcb90	; 0xcb90 <__addsf3>
    a322:	20 e0       	ldi	r18, 0x00	; 0
    a324:	30 e0       	ldi	r19, 0x00	; 0
    a326:	40 e8       	ldi	r20, 0x80	; 128
    a328:	5f e3       	ldi	r21, 0x3F	; 63
    a32a:	0e 94 c7 65 	call	0xcb8e	; 0xcb8e <__subsf3>
    a32e:	20 e0       	ldi	r18, 0x00	; 0
    a330:	30 e0       	ldi	r19, 0x00	; 0
    a332:	40 e0       	ldi	r20, 0x00	; 0
    a334:	5e e3       	ldi	r21, 0x3E	; 62
    a336:	0e 94 12 67 	call	0xce24	; 0xce24 <__mulsf3>
    a33a:	0e 94 30 66 	call	0xcc60	; 0xcc60 <__fixunssfsi>
    a33e:	ab 01       	movw	r20, r22
    a340:	b2 01       	movw	r22, r4
    a342:	80 91 a1 0f 	lds	r24, 0x0FA1
    a346:	90 91 a2 0f 	lds	r25, 0x0FA2
    a34a:	0e 94 08 4c 	call	0x9810	; 0x9810 <get_level_tile>
    a34e:	f8 2e       	mov	r15, r24
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) || 
    a350:	80 2f       	mov	r24, r16
    a352:	0e 94 d9 4c 	call	0x99b2	; 0x99b2 <solid_tile>
    a356:	88 23       	and	r24, r24
    a358:	a1 f0       	breq	.+40     	; 0xa382 <collision_detect_level+0x31e>
    a35a:	af 89       	ldd	r26, Y+23	; 0x17
    a35c:	b8 8d       	ldd	r27, Y+24	; 0x18
    a35e:	14 96       	adiw	r26, 0x04	; 4
    a360:	6d 91       	ld	r22, X+
    a362:	7d 91       	ld	r23, X+
    a364:	8d 91       	ld	r24, X+
    a366:	9c 91       	ld	r25, X
    a368:	17 97       	sbiw	r26, 0x07	; 7
    a36a:	0e 94 30 66 	call	0xcc60	; 0xcc60 <__fixunssfsi>
    a36e:	dc 01       	movw	r26, r24
    a370:	cb 01       	movw	r24, r22
    a372:	28 e0       	ldi	r18, 0x08	; 8
    a374:	48 e0       	ldi	r20, 0x08	; 8
    a376:	6a 81       	ldd	r22, Y+2	; 0x02
    a378:	7b 81       	ldd	r23, Y+3	; 0x03
    a37a:	0e 94 1e 50 	call	0xa03c	; 0xa03c <pixel_overlap>
    a37e:	84 30       	cpi	r24, 0x04	; 4
    a380:	b8 f4       	brcc	.+46     	; 0xa3b0 <collision_detect_level+0x34c>
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    a382:	8f 2d       	mov	r24, r15
    a384:	0e 94 d9 4c 	call	0x99b2	; 0x99b2 <solid_tile>
			}
			if (s->vy > 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, (s->y + tile_height*8 - 1) / 8);
				lt2 = get_level_tile(game.current_level, x1_tile + x, (s->y + tile_height*8 - 1) / 8);
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) || 
    a388:	88 23       	and	r24, r24
    a38a:	49 f1       	breq	.+82     	; 0xa3de <collision_detect_level+0x37a>
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    a38c:	ef 89       	ldd	r30, Y+23	; 0x17
    a38e:	f8 8d       	ldd	r31, Y+24	; 0x18
    a390:	64 81       	ldd	r22, Z+4	; 0x04
    a392:	75 81       	ldd	r23, Z+5	; 0x05
    a394:	86 81       	ldd	r24, Z+6	; 0x06
    a396:	97 81       	ldd	r25, Z+7	; 0x07
    a398:	0e 94 30 66 	call	0xcc60	; 0xcc60 <__fixunssfsi>
    a39c:	dc 01       	movw	r26, r24
    a39e:	cb 01       	movw	r24, r22
    a3a0:	28 e0       	ldi	r18, 0x08	; 8
    a3a2:	48 e0       	ldi	r20, 0x08	; 8
    a3a4:	6c 81       	ldd	r22, Y+4	; 0x04
    a3a6:	7d 81       	ldd	r23, Y+5	; 0x05
    a3a8:	0e 94 1e 50 	call	0xa03c	; 0xa03c <pixel_overlap>
    a3ac:	84 30       	cpi	r24, 0x04	; 4
    a3ae:	b8 f0       	brcs	.+46     	; 0xa3de <collision_detect_level+0x37a>
				{
					s->vy =  0;
    a3b0:	af 89       	ldd	r26, Y+23	; 0x17
    a3b2:	b8 8d       	ldd	r27, Y+24	; 0x18
    a3b4:	1d 92       	st	X+, r1
    a3b6:	1d 92       	st	X+, r1
    a3b8:	1d 92       	st	X+, r1
    a3ba:	1c 92       	st	X, r1
    a3bc:	13 97       	sbiw	r26, 0x03	; 3
					s->gravity = 0;
    a3be:	1e 96       	adiw	r26, 0x0e	; 14
    a3c0:	1c 92       	st	X, r1
					s->y = y0_tile * 8;
    a3c2:	6b 89       	ldd	r22, Y+19	; 0x13
    a3c4:	7c 89       	ldd	r23, Y+20	; 0x14
    a3c6:	8d 89       	ldd	r24, Y+21	; 0x15
    a3c8:	9e 89       	ldd	r25, Y+22	; 0x16
    a3ca:	0e 94 5c 66 	call	0xccb8	; 0xccb8 <__floatunsisf>
    a3ce:	ef 89       	ldd	r30, Y+23	; 0x17
    a3d0:	f8 8d       	ldd	r31, Y+24	; 0x18
    a3d2:	60 87       	std	Z+8, r22	; 0x08
    a3d4:	71 87       	std	Z+9, r23	; 0x09
    a3d6:	82 87       	std	Z+10, r24	; 0x0a
    a3d8:	93 87       	std	Z+11, r25	; 0x0b
					result = 1;
    a3da:	f1 e0       	ldi	r31, 0x01	; 1
    a3dc:	f9 83       	std	Y+1, r31	; 0x01
    a3de:	2f ef       	ldi	r18, 0xFF	; 255
    a3e0:	62 1a       	sub	r6, r18
    a3e2:	72 0a       	sbc	r7, r18
    a3e4:	3f ef       	ldi	r19, 0xFF	; 255
    a3e6:	43 1a       	sub	r4, r19
    a3e8:	53 0a       	sbc	r5, r19
    a3ea:	ef ce       	rjmp	.-546    	; 0xa1ca <collision_detect_level+0x166>
	u16 x0_tile = s->x / 8;
	u16 y0_tile = s->y / 8;
	u16 x1_tile = (s->x+7) / 8;
	u16 y1_tile = (s->y+7) / 8;
	u8 lt1, lt2;
	u8 result = 0;
    a3ec:	19 82       	std	Y+1, r1	; 0x01
			}
		}
	}
	
	// Left and Right
	if (s->vx != 0)
    a3ee:	af 89       	ldd	r26, Y+23	; 0x17
    a3f0:	b8 8d       	ldd	r27, Y+24	; 0x18
    a3f2:	1c 96       	adiw	r26, 0x0c	; 12
    a3f4:	8d 91       	ld	r24, X+
    a3f6:	9c 91       	ld	r25, X
    a3f8:	1d 97       	sbiw	r26, 0x0d	; 13
    a3fa:	89 2b       	or	r24, r25
    a3fc:	09 f4       	brne	.+2      	; 0xa400 <collision_detect_level+0x39c>
    a3fe:	54 c1       	rjmp	.+680    	; 0xa6a8 <collision_detect_level+0x644>
	{
		y0_tile = s->y / 8;
    a400:	18 96       	adiw	r26, 0x08	; 8
    a402:	cd 90       	ld	r12, X+
    a404:	dd 90       	ld	r13, X+
    a406:	ed 90       	ld	r14, X+
    a408:	fc 90       	ld	r15, X
    a40a:	1b 97       	sbiw	r26, 0x0b	; 11
    a40c:	20 e0       	ldi	r18, 0x00	; 0
    a40e:	30 e0       	ldi	r19, 0x00	; 0
    a410:	40 e0       	ldi	r20, 0x00	; 0
    a412:	5e e3       	ldi	r21, 0x3E	; 62
    a414:	c7 01       	movw	r24, r14
    a416:	b6 01       	movw	r22, r12
    a418:	0e 94 12 67 	call	0xce24	; 0xce24 <__mulsf3>
    a41c:	0e 94 30 66 	call	0xcc60	; 0xcc60 <__fixunssfsi>
    a420:	2b 01       	movw	r4, r22
    a422:	3c 01       	movw	r6, r24
    a424:	6d 87       	std	Y+13, r22	; 0x0d
		y1_tile = (s->y+7) / 8;
    a426:	20 e0       	ldi	r18, 0x00	; 0
    a428:	30 e0       	ldi	r19, 0x00	; 0
    a42a:	40 ee       	ldi	r20, 0xE0	; 224
    a42c:	50 e4       	ldi	r21, 0x40	; 64
    a42e:	c7 01       	movw	r24, r14
    a430:	b6 01       	movw	r22, r12
    a432:	0e 94 c8 65 	call	0xcb90	; 0xcb90 <__addsf3>
    a436:	20 e0       	ldi	r18, 0x00	; 0
    a438:	30 e0       	ldi	r19, 0x00	; 0
    a43a:	40 e0       	ldi	r20, 0x00	; 0
    a43c:	5e e3       	ldi	r21, 0x3E	; 62
    a43e:	0e 94 12 67 	call	0xce24	; 0xce24 <__mulsf3>
    a442:	0e 94 30 66 	call	0xcc60	; 0xcc60 <__fixunssfsi>
		{
			if (s->vx < 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile, y0_tile + y);
				lt2 = get_level_tile(game.current_level, x0_tile, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    a446:	12 01       	movw	r2, r4
    a448:	83 e0       	ldi	r24, 0x03	; 3
    a44a:	22 0c       	add	r2, r2
    a44c:	33 1c       	adc	r3, r3
    a44e:	8a 95       	dec	r24
    a450:	e1 f7       	brne	.-8      	; 0xa44a <collision_detect_level+0x3e6>
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    a452:	fb 01       	movw	r30, r22
    a454:	93 e0       	ldi	r25, 0x03	; 3
    a456:	ee 0f       	add	r30, r30
    a458:	ff 1f       	adc	r31, r31
    a45a:	9a 95       	dec	r25
    a45c:	e1 f7       	brne	.-8      	; 0xa456 <collision_detect_level+0x3f2>
    a45e:	fb 83       	std	Y+3, r31	; 0x03
    a460:	ea 83       	std	Y+2, r30	; 0x02
				{
					s->vx =  0;
					s->x = (x0_tile + 1) * 8;
    a462:	ff ef       	ldi	r31, 0xFF	; 255
    a464:	8f 1a       	sub	r8, r31
    a466:	9f 0a       	sbc	r9, r31
    a468:	94 01       	movw	r18, r8
    a46a:	43 e0       	ldi	r20, 0x03	; 3
    a46c:	22 0f       	add	r18, r18
    a46e:	33 1f       	adc	r19, r19
    a470:	4a 95       	dec	r20
    a472:	e1 f7       	brne	.-8      	; 0xa46c <collision_detect_level+0x408>
				}
			}
			
			if (s->vx > 0)
			{
				lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y0_tile + y);
    a474:	a8 e0       	ldi	r26, 0x08	; 8
    a476:	1a 9f       	mul	r17, r26
    a478:	a0 01       	movw	r20, r0
    a47a:	11 24       	eor	r1, r1
				lt2 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vx =  0;
					s->x = x0_tile * 8;
    a47c:	49 01       	movw	r8, r18
    a47e:	b8 e0       	ldi	r27, 0x08	; 8
    a480:	8b 1a       	sub	r8, r27
    a482:	91 08       	sbc	r9, r1
	// Left and Right
	if (s->vx != 0)
	{
		y0_tile = s->y / 8;
		y1_tile = (s->y+7) / 8;
		for (u8 y = 0; y < tile_height; y++)
    a484:	6b 01       	movw	r12, r22
    a486:	82 01       	movw	r16, r4
				lt2 = get_level_tile(game.current_level, x0_tile, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vx =  0;
					s->x = (x0_tile + 1) * 8;
    a488:	b9 01       	movw	r22, r18
    a48a:	80 e0       	ldi	r24, 0x00	; 0
    a48c:	90 e0       	ldi	r25, 0x00	; 0
    a48e:	6c 83       	std	Y+4, r22	; 0x04
    a490:	7d 83       	std	Y+5, r23	; 0x05
    a492:	8e 83       	std	Y+6, r24	; 0x06
    a494:	9f 83       	std	Y+7, r25	; 0x07
				}
			}
			
			if (s->vx > 0)
			{
				lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y0_tile + y);
    a496:	ca 01       	movw	r24, r20
    a498:	aa 27       	eor	r26, r26
    a49a:	97 fd       	sbrc	r25, 7
    a49c:	a0 95       	com	r26
    a49e:	ba 2f       	mov	r27, r26
    a4a0:	89 87       	std	Y+9, r24	; 0x09
    a4a2:	9a 87       	std	Y+10, r25	; 0x0a
    a4a4:	ab 87       	std	Y+11, r26	; 0x0b
    a4a6:	bc 87       	std	Y+12, r27	; 0x0c
				lt2 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vx =  0;
					s->x = x0_tile * 8;
    a4a8:	a1 2c       	mov	r10, r1
    a4aa:	b1 2c       	mov	r11, r1
    a4ac:	80 2f       	mov	r24, r16
    a4ae:	3d 85       	ldd	r19, Y+13	; 0x0d
    a4b0:	83 1b       	sub	r24, r19
	// Left and Right
	if (s->vx != 0)
	{
		y0_tile = s->y / 8;
		y1_tile = (s->y+7) / 8;
		for (u8 y = 0; y < tile_height; y++)
    a4b2:	49 89       	ldd	r20, Y+17	; 0x11
    a4b4:	84 17       	cp	r24, r20
    a4b6:	08 f0       	brcs	.+2      	; 0xa4ba <collision_detect_level+0x456>
    a4b8:	f7 c0       	rjmp	.+494    	; 0xa6a8 <collision_detect_level+0x644>
		{
			if (s->vx < 0)
    a4ba:	af 89       	ldd	r26, Y+23	; 0x17
    a4bc:	b8 8d       	ldd	r27, Y+24	; 0x18
    a4be:	1c 96       	adiw	r26, 0x0c	; 12
    a4c0:	8d 91       	ld	r24, X+
    a4c2:	9c 91       	ld	r25, X
    a4c4:	1d 97       	sbiw	r26, 0x0d	; 13
    a4c6:	97 ff       	sbrs	r25, 7
    a4c8:	57 c0       	rjmp	.+174    	; 0xa578 <collision_detect_level+0x514>
			{
				lt1 = get_level_tile(game.current_level, x0_tile, y0_tile + y);
    a4ca:	a8 01       	movw	r20, r16
    a4cc:	68 85       	ldd	r22, Y+8	; 0x08
    a4ce:	7a 89       	ldd	r23, Y+18	; 0x12
    a4d0:	80 91 a1 0f 	lds	r24, 0x0FA1
    a4d4:	90 91 a2 0f 	lds	r25, 0x0FA2
    a4d8:	0e 94 08 4c 	call	0x9810	; 0x9810 <get_level_tile>
    a4dc:	78 2e       	mov	r7, r24
				lt2 = get_level_tile(game.current_level, x0_tile, y1_tile + y);
    a4de:	a6 01       	movw	r20, r12
    a4e0:	68 85       	ldd	r22, Y+8	; 0x08
    a4e2:	7a 89       	ldd	r23, Y+18	; 0x12
    a4e4:	80 91 a1 0f 	lds	r24, 0x0FA1
    a4e8:	90 91 a2 0f 	lds	r25, 0x0FA2
    a4ec:	0e 94 08 4c 	call	0x9810	; 0x9810 <get_level_tile>
    a4f0:	e8 2e       	mov	r14, r24
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    a4f2:	87 2d       	mov	r24, r7
    a4f4:	0e 94 d9 4c 	call	0x99b2	; 0x99b2 <solid_tile>
    a4f8:	88 23       	and	r24, r24
    a4fa:	89 f0       	breq	.+34     	; 0xa51e <collision_detect_level+0x4ba>
    a4fc:	ef 89       	ldd	r30, Y+23	; 0x17
    a4fe:	f8 8d       	ldd	r31, Y+24	; 0x18
    a500:	60 85       	ldd	r22, Z+8	; 0x08
    a502:	71 85       	ldd	r23, Z+9	; 0x09
    a504:	82 85       	ldd	r24, Z+10	; 0x0a
    a506:	93 85       	ldd	r25, Z+11	; 0x0b
    a508:	0e 94 30 66 	call	0xcc60	; 0xcc60 <__fixunssfsi>
    a50c:	dc 01       	movw	r26, r24
    a50e:	cb 01       	movw	r24, r22
    a510:	28 e0       	ldi	r18, 0x08	; 8
    a512:	48 e0       	ldi	r20, 0x08	; 8
    a514:	b1 01       	movw	r22, r2
    a516:	0e 94 1e 50 	call	0xa03c	; 0xa03c <pixel_overlap>
    a51a:	84 30       	cpi	r24, 0x04	; 4
    a51c:	c8 f4       	brcc	.+50     	; 0xa550 <collision_detect_level+0x4ec>
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    a51e:	8e 2d       	mov	r24, r14
    a520:	0e 94 d9 4c 	call	0x99b2	; 0x99b2 <solid_tile>
		{
			if (s->vx < 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile, y0_tile + y);
				lt2 = get_level_tile(game.current_level, x0_tile, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    a524:	88 23       	and	r24, r24
    a526:	41 f1       	breq	.+80     	; 0xa578 <collision_detect_level+0x514>
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    a528:	af 89       	ldd	r26, Y+23	; 0x17
    a52a:	b8 8d       	ldd	r27, Y+24	; 0x18
    a52c:	18 96       	adiw	r26, 0x08	; 8
    a52e:	6d 91       	ld	r22, X+
    a530:	7d 91       	ld	r23, X+
    a532:	8d 91       	ld	r24, X+
    a534:	9c 91       	ld	r25, X
    a536:	1b 97       	sbiw	r26, 0x0b	; 11
    a538:	0e 94 30 66 	call	0xcc60	; 0xcc60 <__fixunssfsi>
    a53c:	dc 01       	movw	r26, r24
    a53e:	cb 01       	movw	r24, r22
    a540:	28 e0       	ldi	r18, 0x08	; 8
    a542:	48 e0       	ldi	r20, 0x08	; 8
    a544:	6a 81       	ldd	r22, Y+2	; 0x02
    a546:	7b 81       	ldd	r23, Y+3	; 0x03
    a548:	0e 94 1e 50 	call	0xa03c	; 0xa03c <pixel_overlap>
    a54c:	84 30       	cpi	r24, 0x04	; 4
    a54e:	a0 f0       	brcs	.+40     	; 0xa578 <collision_detect_level+0x514>
				{
					s->vx =  0;
    a550:	ef 89       	ldd	r30, Y+23	; 0x17
    a552:	f8 8d       	ldd	r31, Y+24	; 0x18
    a554:	15 86       	std	Z+13, r1	; 0x0d
    a556:	14 86       	std	Z+12, r1	; 0x0c
					s->x = (x0_tile + 1) * 8;
    a558:	6c 81       	ldd	r22, Y+4	; 0x04
    a55a:	7d 81       	ldd	r23, Y+5	; 0x05
    a55c:	8e 81       	ldd	r24, Y+6	; 0x06
    a55e:	9f 81       	ldd	r25, Y+7	; 0x07
    a560:	0e 94 5c 66 	call	0xccb8	; 0xccb8 <__floatunsisf>
    a564:	af 89       	ldd	r26, Y+23	; 0x17
    a566:	b8 8d       	ldd	r27, Y+24	; 0x18
    a568:	14 96       	adiw	r26, 0x04	; 4
    a56a:	6d 93       	st	X+, r22
    a56c:	7d 93       	st	X+, r23
    a56e:	8d 93       	st	X+, r24
    a570:	9c 93       	st	X, r25
    a572:	17 97       	sbiw	r26, 0x07	; 7
					result = 1;
    a574:	b1 e0       	ldi	r27, 0x01	; 1
    a576:	b9 83       	std	Y+1, r27	; 0x01
				}
			}
			
			if (s->vx > 0)
    a578:	ef 89       	ldd	r30, Y+23	; 0x17
    a57a:	f8 8d       	ldd	r31, Y+24	; 0x18
    a57c:	84 85       	ldd	r24, Z+12	; 0x0c
    a57e:	95 85       	ldd	r25, Z+13	; 0x0d
    a580:	18 16       	cp	r1, r24
    a582:	19 06       	cpc	r1, r25
    a584:	0c f0       	brlt	.+2      	; 0xa588 <collision_detect_level+0x524>
    a586:	89 c0       	rjmp	.+274    	; 0xa69a <collision_detect_level+0x636>
			{
				lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y0_tile + y);
    a588:	69 85       	ldd	r22, Y+9	; 0x09
    a58a:	7a 85       	ldd	r23, Y+10	; 0x0a
    a58c:	8b 85       	ldd	r24, Y+11	; 0x0b
    a58e:	9c 85       	ldd	r25, Y+12	; 0x0c
    a590:	0e 94 5e 66 	call	0xccbc	; 0xccbc <__floatsisf>
    a594:	2b 01       	movw	r4, r22
    a596:	3c 01       	movw	r6, r24
    a598:	af 89       	ldd	r26, Y+23	; 0x17
    a59a:	b8 8d       	ldd	r27, Y+24	; 0x18
    a59c:	14 96       	adiw	r26, 0x04	; 4
    a59e:	2d 91       	ld	r18, X+
    a5a0:	3d 91       	ld	r19, X+
    a5a2:	4d 91       	ld	r20, X+
    a5a4:	5c 91       	ld	r21, X
    a5a6:	17 97       	sbiw	r26, 0x07	; 7
    a5a8:	0e 94 c8 65 	call	0xcb90	; 0xcb90 <__addsf3>
    a5ac:	20 e0       	ldi	r18, 0x00	; 0
    a5ae:	30 e0       	ldi	r19, 0x00	; 0
    a5b0:	40 e8       	ldi	r20, 0x80	; 128
    a5b2:	5f e3       	ldi	r21, 0x3F	; 63
    a5b4:	0e 94 c7 65 	call	0xcb8e	; 0xcb8e <__subsf3>
    a5b8:	20 e0       	ldi	r18, 0x00	; 0
    a5ba:	30 e0       	ldi	r19, 0x00	; 0
    a5bc:	40 e0       	ldi	r20, 0x00	; 0
    a5be:	5e e3       	ldi	r21, 0x3E	; 62
    a5c0:	0e 94 12 67 	call	0xce24	; 0xce24 <__mulsf3>
    a5c4:	0e 94 30 66 	call	0xcc60	; 0xcc60 <__fixunssfsi>
    a5c8:	a8 01       	movw	r20, r16
    a5ca:	80 91 a1 0f 	lds	r24, 0x0FA1
    a5ce:	90 91 a2 0f 	lds	r25, 0x0FA2
    a5d2:	0e 94 08 4c 	call	0x9810	; 0x9810 <get_level_tile>
    a5d6:	e8 2e       	mov	r14, r24
				lt2 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y1_tile + y);
    a5d8:	ef 89       	ldd	r30, Y+23	; 0x17
    a5da:	f8 8d       	ldd	r31, Y+24	; 0x18
    a5dc:	24 81       	ldd	r18, Z+4	; 0x04
    a5de:	35 81       	ldd	r19, Z+5	; 0x05
    a5e0:	46 81       	ldd	r20, Z+6	; 0x06
    a5e2:	57 81       	ldd	r21, Z+7	; 0x07
    a5e4:	c3 01       	movw	r24, r6
    a5e6:	b2 01       	movw	r22, r4
    a5e8:	0e 94 c8 65 	call	0xcb90	; 0xcb90 <__addsf3>
    a5ec:	20 e0       	ldi	r18, 0x00	; 0
    a5ee:	30 e0       	ldi	r19, 0x00	; 0
    a5f0:	40 e8       	ldi	r20, 0x80	; 128
    a5f2:	5f e3       	ldi	r21, 0x3F	; 63
    a5f4:	0e 94 c7 65 	call	0xcb8e	; 0xcb8e <__subsf3>
    a5f8:	20 e0       	ldi	r18, 0x00	; 0
    a5fa:	30 e0       	ldi	r19, 0x00	; 0
    a5fc:	40 e0       	ldi	r20, 0x00	; 0
    a5fe:	5e e3       	ldi	r21, 0x3E	; 62
    a600:	0e 94 12 67 	call	0xce24	; 0xce24 <__mulsf3>
    a604:	0e 94 30 66 	call	0xcc60	; 0xcc60 <__fixunssfsi>
    a608:	a6 01       	movw	r20, r12
    a60a:	80 91 a1 0f 	lds	r24, 0x0FA1
    a60e:	90 91 a2 0f 	lds	r25, 0x0FA2
    a612:	0e 94 08 4c 	call	0x9810	; 0x9810 <get_level_tile>
    a616:	78 2e       	mov	r7, r24
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    a618:	8e 2d       	mov	r24, r14
    a61a:	0e 94 d9 4c 	call	0x99b2	; 0x99b2 <solid_tile>
    a61e:	88 23       	and	r24, r24
    a620:	99 f0       	breq	.+38     	; 0xa648 <collision_detect_level+0x5e4>
    a622:	af 89       	ldd	r26, Y+23	; 0x17
    a624:	b8 8d       	ldd	r27, Y+24	; 0x18
    a626:	18 96       	adiw	r26, 0x08	; 8
    a628:	6d 91       	ld	r22, X+
    a62a:	7d 91       	ld	r23, X+
    a62c:	8d 91       	ld	r24, X+
    a62e:	9c 91       	ld	r25, X
    a630:	1b 97       	sbiw	r26, 0x0b	; 11
    a632:	0e 94 30 66 	call	0xcc60	; 0xcc60 <__fixunssfsi>
    a636:	dc 01       	movw	r26, r24
    a638:	cb 01       	movw	r24, r22
    a63a:	28 e0       	ldi	r18, 0x08	; 8
    a63c:	48 e0       	ldi	r20, 0x08	; 8
    a63e:	b1 01       	movw	r22, r2
    a640:	0e 94 1e 50 	call	0xa03c	; 0xa03c <pixel_overlap>
    a644:	84 30       	cpi	r24, 0x04	; 4
    a646:	b8 f4       	brcc	.+46     	; 0xa676 <collision_detect_level+0x612>
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    a648:	87 2d       	mov	r24, r7
    a64a:	0e 94 d9 4c 	call	0x99b2	; 0x99b2 <solid_tile>
			
			if (s->vx > 0)
			{
				lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y0_tile + y);
				lt2 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    a64e:	88 23       	and	r24, r24
    a650:	21 f1       	breq	.+72     	; 0xa69a <collision_detect_level+0x636>
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    a652:	ef 89       	ldd	r30, Y+23	; 0x17
    a654:	f8 8d       	ldd	r31, Y+24	; 0x18
    a656:	60 85       	ldd	r22, Z+8	; 0x08
    a658:	71 85       	ldd	r23, Z+9	; 0x09
    a65a:	82 85       	ldd	r24, Z+10	; 0x0a
    a65c:	93 85       	ldd	r25, Z+11	; 0x0b
    a65e:	0e 94 30 66 	call	0xcc60	; 0xcc60 <__fixunssfsi>
    a662:	dc 01       	movw	r26, r24
    a664:	cb 01       	movw	r24, r22
    a666:	28 e0       	ldi	r18, 0x08	; 8
    a668:	48 e0       	ldi	r20, 0x08	; 8
    a66a:	6a 81       	ldd	r22, Y+2	; 0x02
    a66c:	7b 81       	ldd	r23, Y+3	; 0x03
    a66e:	0e 94 1e 50 	call	0xa03c	; 0xa03c <pixel_overlap>
    a672:	84 30       	cpi	r24, 0x04	; 4
    a674:	90 f0       	brcs	.+36     	; 0xa69a <collision_detect_level+0x636>
				{
					s->vx =  0;
    a676:	af 89       	ldd	r26, Y+23	; 0x17
    a678:	b8 8d       	ldd	r27, Y+24	; 0x18
    a67a:	1d 96       	adiw	r26, 0x0d	; 13
    a67c:	1c 92       	st	X, r1
    a67e:	1e 92       	st	-X, r1
    a680:	1c 97       	sbiw	r26, 0x0c	; 12
					s->x = x0_tile * 8;
    a682:	c5 01       	movw	r24, r10
    a684:	b4 01       	movw	r22, r8
    a686:	0e 94 5c 66 	call	0xccb8	; 0xccb8 <__floatunsisf>
    a68a:	ef 89       	ldd	r30, Y+23	; 0x17
    a68c:	f8 8d       	ldd	r31, Y+24	; 0x18
    a68e:	64 83       	std	Z+4, r22	; 0x04
    a690:	75 83       	std	Z+5, r23	; 0x05
    a692:	86 83       	std	Z+6, r24	; 0x06
    a694:	97 83       	std	Z+7, r25	; 0x07
					result = 1;
    a696:	f1 e0       	ldi	r31, 0x01	; 1
    a698:	f9 83       	std	Y+1, r31	; 0x01
    a69a:	0f 5f       	subi	r16, 0xFF	; 255
    a69c:	1f 4f       	sbci	r17, 0xFF	; 255
    a69e:	2f ef       	ldi	r18, 0xFF	; 255
    a6a0:	c2 1a       	sub	r12, r18
    a6a2:	d2 0a       	sbc	r13, r18
    a6a4:	03 cf       	rjmp	.-506    	; 0xa4ac <collision_detect_level+0x448>
	u16 y1_tile = (s->y+7) / 8;
	u8 lt1, lt2;
	u8 result = 0;
	
	// Only if moving on planet
	if (is_space() || (s->vx == 0 && s->vy == 0)) return result;
    a6a6:	19 82       	std	Y+1, r1	; 0x01
				}
			}
		}
	}
	return result;
}
    a6a8:	89 81       	ldd	r24, Y+1	; 0x01
    a6aa:	68 96       	adiw	r28, 0x18	; 24
    a6ac:	0f b6       	in	r0, 0x3f	; 63
    a6ae:	f8 94       	cli
    a6b0:	de bf       	out	0x3e, r29	; 62
    a6b2:	0f be       	out	0x3f, r0	; 63
    a6b4:	cd bf       	out	0x3d, r28	; 61
    a6b6:	df 91       	pop	r29
    a6b8:	cf 91       	pop	r28
    a6ba:	1f 91       	pop	r17
    a6bc:	0f 91       	pop	r16
    a6be:	ff 90       	pop	r15
    a6c0:	ef 90       	pop	r14
    a6c2:	df 90       	pop	r13
    a6c4:	cf 90       	pop	r12
    a6c6:	bf 90       	pop	r11
    a6c8:	af 90       	pop	r10
    a6ca:	9f 90       	pop	r9
    a6cc:	8f 90       	pop	r8
    a6ce:	7f 90       	pop	r7
    a6d0:	6f 90       	pop	r6
    a6d2:	5f 90       	pop	r5
    a6d4:	4f 90       	pop	r4
    a6d6:	3f 90       	pop	r3
    a6d8:	2f 90       	pop	r2
    a6da:	08 95       	ret

0000a6dc <animate_shot>:
		game.player.active_shots++;
	}
}

void animate_shot()
{
    a6dc:	2f 92       	push	r2
    a6de:	3f 92       	push	r3
    a6e0:	4f 92       	push	r4
    a6e2:	5f 92       	push	r5
    a6e4:	6f 92       	push	r6
    a6e6:	7f 92       	push	r7
    a6e8:	8f 92       	push	r8
    a6ea:	9f 92       	push	r9
    a6ec:	af 92       	push	r10
    a6ee:	bf 92       	push	r11
    a6f0:	cf 92       	push	r12
    a6f2:	df 92       	push	r13
    a6f4:	ef 92       	push	r14
    a6f6:	ff 92       	push	r15
    a6f8:	0f 93       	push	r16
    a6fa:	1f 93       	push	r17
    a6fc:	cf 93       	push	r28
    a6fe:	df 93       	push	r29
    a700:	cd b7       	in	r28, 0x3d	; 61
    a702:	de b7       	in	r29, 0x3e	; 62
    a704:	2f 97       	sbiw	r28, 0x0f	; 15
    a706:	0f b6       	in	r0, 0x3f	; 63
    a708:	f8 94       	cli
    a70a:	de bf       	out	0x3e, r29	; 62
    a70c:	0f be       	out	0x3f, r0	; 63
    a70e:	cd bf       	out	0x3d, r28	; 61
    a710:	9b ee       	ldi	r25, 0xEB	; 235
    a712:	89 2e       	mov	r8, r25
    a714:	9d e0       	ldi	r25, 0x0D	; 13
    a716:	99 2e       	mov	r9, r25
    a718:	8a ed       	ldi	r24, 0xDA	; 218
    a71a:	9d e0       	ldi	r25, 0x0D	; 13
    a71c:	9f 87       	std	Y+15, r25	; 0x0f
    a71e:	8e 87       	std	Y+14, r24	; 0x0e
    a720:	9b e0       	ldi	r25, 0x0B	; 11
    a722:	99 83       	std	Y+1, r25	; 0x01
						SFX_HIT;
						game.enemies[j].shield -= game.player.shot[i].hit_count;
						if (game.enemies[j].shield <= 0)
						{
							SFX_ENEMY_EXPLODE;
							game.enemies[j].flags = EXPLODING;
    a724:	20 e1       	ldi	r18, 0x10	; 16
    a726:	b2 2e       	mov	r11, r18
{
	// Animate shots
	u8 slot = ENEMY_SLOT;
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
	{
		if (game.player.shot[i].active)
    a728:	f4 01       	movw	r30, r8
    a72a:	80 81       	ld	r24, Z
    a72c:	88 23       	and	r24, r24
    a72e:	09 f4       	brne	.+2      	; 0xa732 <animate_shot+0x56>
    a730:	46 c1       	rjmp	.+652    	; 0xa9be <animate_shot+0x2e2>
		{
			game.player.shot[i].shared.x += game.player.shot[i].shared.vx*FRAME_TIME;
    a732:	ee 85       	ldd	r30, Y+14	; 0x0e
    a734:	ff 85       	ldd	r31, Y+15	; 0x0f
    a736:	64 85       	ldd	r22, Z+12	; 0x0c
    a738:	75 85       	ldd	r23, Z+13	; 0x0d
    a73a:	88 27       	eor	r24, r24
    a73c:	77 fd       	sbrc	r23, 7
    a73e:	80 95       	com	r24
    a740:	98 2f       	mov	r25, r24
    a742:	0e 94 5e 66 	call	0xccbc	; 0xccbc <__floatsisf>
    a746:	29 e8       	ldi	r18, 0x89	; 137
    a748:	38 e8       	ldi	r19, 0x88	; 136
    a74a:	48 e8       	ldi	r20, 0x88	; 136
    a74c:	5c e3       	ldi	r21, 0x3C	; 60
    a74e:	0e 94 12 67 	call	0xce24	; 0xce24 <__mulsf3>
    a752:	ee 85       	ldd	r30, Y+14	; 0x0e
    a754:	ff 85       	ldd	r31, Y+15	; 0x0f
    a756:	24 81       	ldd	r18, Z+4	; 0x04
    a758:	35 81       	ldd	r19, Z+5	; 0x05
    a75a:	46 81       	ldd	r20, Z+6	; 0x06
    a75c:	57 81       	ldd	r21, Z+7	; 0x07
    a75e:	0e 94 c8 65 	call	0xcb90	; 0xcb90 <__addsf3>
    a762:	2b 01       	movw	r4, r22
    a764:	3c 01       	movw	r6, r24
    a766:	ee 85       	ldd	r30, Y+14	; 0x0e
    a768:	ff 85       	ldd	r31, Y+15	; 0x0f
    a76a:	64 83       	std	Z+4, r22	; 0x04
    a76c:	75 83       	std	Z+5, r23	; 0x05
    a76e:	86 83       	std	Z+6, r24	; 0x06
    a770:	97 83       	std	Z+7, r25	; 0x07
			game.player.shot[i].shared.y += game.player.shot[i].shared.vy*FRAME_TIME;
    a772:	29 e8       	ldi	r18, 0x89	; 137
    a774:	38 e8       	ldi	r19, 0x88	; 136
    a776:	48 e8       	ldi	r20, 0x88	; 136
    a778:	5c e3       	ldi	r21, 0x3C	; 60
    a77a:	60 81       	ld	r22, Z
    a77c:	71 81       	ldd	r23, Z+1	; 0x01
    a77e:	82 81       	ldd	r24, Z+2	; 0x02
    a780:	93 81       	ldd	r25, Z+3	; 0x03
    a782:	0e 94 12 67 	call	0xce24	; 0xce24 <__mulsf3>
    a786:	ee 85       	ldd	r30, Y+14	; 0x0e
    a788:	ff 85       	ldd	r31, Y+15	; 0x0f
    a78a:	20 85       	ldd	r18, Z+8	; 0x08
    a78c:	31 85       	ldd	r19, Z+9	; 0x09
    a78e:	42 85       	ldd	r20, Z+10	; 0x0a
    a790:	53 85       	ldd	r21, Z+11	; 0x0b
    a792:	0e 94 c8 65 	call	0xcb90	; 0xcb90 <__addsf3>
    a796:	6b 01       	movw	r12, r22
    a798:	7c 01       	movw	r14, r24
    a79a:	ee 85       	ldd	r30, Y+14	; 0x0e
    a79c:	ff 85       	ldd	r31, Y+15	; 0x0f
    a79e:	60 87       	std	Z+8, r22	; 0x08
    a7a0:	71 87       	std	Z+9, r23	; 0x09
    a7a2:	82 87       	std	Z+10, r24	; 0x0a
    a7a4:	93 87       	std	Z+11, r25	; 0x0b
			LBMoveSprite(PLAYER_SHOT_SLOT+i, game.player.shot[i].shared.x - game.camera_x, game.player.shot[i].shared.y - game.camera_y, 1, 1);
    a7a6:	60 91 ac 0d 	lds	r22, 0x0DAC
    a7aa:	70 91 ad 0d 	lds	r23, 0x0DAD
    a7ae:	80 e0       	ldi	r24, 0x00	; 0
    a7b0:	90 e0       	ldi	r25, 0x00	; 0
    a7b2:	0e 94 5c 66 	call	0xccb8	; 0xccb8 <__floatunsisf>
    a7b6:	9b 01       	movw	r18, r22
    a7b8:	ac 01       	movw	r20, r24
    a7ba:	c7 01       	movw	r24, r14
    a7bc:	b6 01       	movw	r22, r12
    a7be:	0e 94 c7 65 	call	0xcb8e	; 0xcb8e <__subsf3>
    a7c2:	0e 94 30 66 	call	0xcc60	; 0xcc60 <__fixunssfsi>
    a7c6:	c6 2e       	mov	r12, r22
    a7c8:	80 91 aa 0d 	lds	r24, 0x0DAA
    a7cc:	90 91 ab 0d 	lds	r25, 0x0DAB
    a7d0:	bc 01       	movw	r22, r24
    a7d2:	80 e0       	ldi	r24, 0x00	; 0
    a7d4:	90 e0       	ldi	r25, 0x00	; 0
    a7d6:	0e 94 5c 66 	call	0xccb8	; 0xccb8 <__floatunsisf>
    a7da:	9b 01       	movw	r18, r22
    a7dc:	ac 01       	movw	r20, r24
    a7de:	c3 01       	movw	r24, r6
    a7e0:	b2 01       	movw	r22, r4
    a7e2:	0e 94 c7 65 	call	0xcb8e	; 0xcb8e <__subsf3>
    a7e6:	0e 94 30 66 	call	0xcc60	; 0xcc60 <__fixunssfsi>
    a7ea:	01 e0       	ldi	r16, 0x01	; 1
    a7ec:	21 e0       	ldi	r18, 0x01	; 1
    a7ee:	4c 2d       	mov	r20, r12
    a7f0:	89 81       	ldd	r24, Y+1	; 0x01
    a7f2:	0e 94 16 49 	call	0x922c	; 0x922c <LBMoveSprite>
			if (game.player.shot[i].shared.x < game.camera_x || game.player.shot[i].shared.x+8 > game.camera_x + CAMERA_WIDTH*8 ||
    a7f6:	ee 85       	ldd	r30, Y+14	; 0x0e
    a7f8:	ff 85       	ldd	r31, Y+15	; 0x0f
    a7fa:	c4 80       	ldd	r12, Z+4	; 0x04
    a7fc:	d5 80       	ldd	r13, Z+5	; 0x05
    a7fe:	e6 80       	ldd	r14, Z+6	; 0x06
    a800:	f7 80       	ldd	r15, Z+7	; 0x07
    a802:	60 90 aa 0d 	lds	r6, 0x0DAA
    a806:	70 90 ab 0d 	lds	r7, 0x0DAB
    a80a:	b3 01       	movw	r22, r6
    a80c:	80 e0       	ldi	r24, 0x00	; 0
    a80e:	90 e0       	ldi	r25, 0x00	; 0
    a810:	0e 94 5c 66 	call	0xccb8	; 0xccb8 <__floatunsisf>
    a814:	9b 01       	movw	r18, r22
    a816:	ac 01       	movw	r20, r24
    a818:	c7 01       	movw	r24, r14
    a81a:	b6 01       	movw	r22, r12
    a81c:	0e 94 2c 66 	call	0xcc58	; 0xcc58 <__cmpsf2>
    a820:	87 ff       	sbrs	r24, 7
    a822:	0f c0       	rjmp	.+30     	; 0xa842 <animate_shot+0x166>
			    collision_detect_level(&game.player.shot[i].shared, 1, 1))
			{
				game.player.shot[i].active = 0;
    a824:	f4 01       	movw	r30, r8
    a826:	10 82       	st	Z, r1
				game.player.active_shots--;
    a828:	80 91 d3 0d 	lds	r24, 0x0DD3
    a82c:	81 50       	subi	r24, 0x01	; 1
    a82e:	80 93 d3 0d 	sts	0x0DD3, r24
				LBMoveSprite(PLAYER_SHOT_SLOT+i, OFF_SCREEN, 0, 1, 1);
    a832:	01 e0       	ldi	r16, 0x01	; 1
    a834:	21 e0       	ldi	r18, 0x01	; 1
    a836:	40 e0       	ldi	r20, 0x00	; 0
    a838:	60 ee       	ldi	r22, 0xE0	; 224
    a83a:	89 81       	ldd	r24, Y+1	; 0x01
    a83c:	0e 94 16 49 	call	0x922c	; 0x922c <LBMoveSprite>
    a840:	be c0       	rjmp	.+380    	; 0xa9be <animate_shot+0x2e2>
		if (game.player.shot[i].active)
		{
			game.player.shot[i].shared.x += game.player.shot[i].shared.vx*FRAME_TIME;
			game.player.shot[i].shared.y += game.player.shot[i].shared.vy*FRAME_TIME;
			LBMoveSprite(PLAYER_SHOT_SLOT+i, game.player.shot[i].shared.x - game.camera_x, game.player.shot[i].shared.y - game.camera_y, 1, 1);
			if (game.player.shot[i].shared.x < game.camera_x || game.player.shot[i].shared.x+8 > game.camera_x + CAMERA_WIDTH*8 ||
    a842:	20 e0       	ldi	r18, 0x00	; 0
    a844:	30 e0       	ldi	r19, 0x00	; 0
    a846:	40 e0       	ldi	r20, 0x00	; 0
    a848:	51 e4       	ldi	r21, 0x41	; 65
    a84a:	c7 01       	movw	r24, r14
    a84c:	b6 01       	movw	r22, r12
    a84e:	0e 94 c8 65 	call	0xcb90	; 0xcb90 <__addsf3>
    a852:	1b 01       	movw	r2, r22
    a854:	2c 01       	movw	r4, r24
    a856:	b3 01       	movw	r22, r6
    a858:	60 52       	subi	r22, 0x20	; 32
    a85a:	7f 4f       	sbci	r23, 0xFF	; 255
    a85c:	80 e0       	ldi	r24, 0x00	; 0
    a85e:	90 e0       	ldi	r25, 0x00	; 0
    a860:	0e 94 5c 66 	call	0xccb8	; 0xccb8 <__floatunsisf>
    a864:	9b 01       	movw	r18, r22
    a866:	ac 01       	movw	r20, r24
    a868:	c2 01       	movw	r24, r4
    a86a:	b1 01       	movw	r22, r2
    a86c:	0e 94 0e 67 	call	0xce1c	; 0xce1c <__gesf2>
    a870:	18 16       	cp	r1, r24
    a872:	c4 f2       	brlt	.-80     	; 0xa824 <animate_shot+0x148>
			    collision_detect_level(&game.player.shot[i].shared, 1, 1))
    a874:	41 e0       	ldi	r20, 0x01	; 1
    a876:	61 e0       	ldi	r22, 0x01	; 1
    a878:	8e 85       	ldd	r24, Y+14	; 0x0e
    a87a:	9f 85       	ldd	r25, Y+15	; 0x0f
    a87c:	0e 94 32 50 	call	0xa064	; 0xa064 <collision_detect_level>
		if (game.player.shot[i].active)
		{
			game.player.shot[i].shared.x += game.player.shot[i].shared.vx*FRAME_TIME;
			game.player.shot[i].shared.y += game.player.shot[i].shared.vy*FRAME_TIME;
			LBMoveSprite(PLAYER_SHOT_SLOT+i, game.player.shot[i].shared.x - game.camera_x, game.player.shot[i].shared.y - game.camera_y, 1, 1);
			if (game.player.shot[i].shared.x < game.camera_x || game.player.shot[i].shared.x+8 > game.camera_x + CAMERA_WIDTH*8 ||
    a880:	81 11       	cpse	r24, r1
    a882:	d0 cf       	rjmp	.-96     	; 0xa824 <animate_shot+0x148>
    a884:	87 e6       	ldi	r24, 0x67	; 103
    a886:	28 2e       	mov	r2, r24
    a888:	8e e0       	ldi	r24, 0x0E	; 14
    a88a:	38 2e       	mov	r3, r24
    a88c:	61 2c       	mov	r6, r1
    a88e:	71 2c       	mov	r7, r1
    a890:	24 01       	movw	r4, r8
    a892:	f1 e0       	ldi	r31, 0x01	; 1
    a894:	4f 1a       	sub	r4, r31
    a896:	51 08       	sbc	r5, r1
    a898:	f1 01       	movw	r30, r2
    a89a:	38 97       	sbiw	r30, 0x08	; 8
			else
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
				{
					if (game.enemies[j].active &&
    a89c:	80 81       	ld	r24, Z
    a89e:	88 23       	and	r24, r24
    a8a0:	09 f4       	brne	.+2      	; 0xa8a4 <animate_shot+0x1c8>
    a8a2:	82 c0       	rjmp	.+260    	; 0xa9a8 <animate_shot+0x2cc>
    a8a4:	34 96       	adiw	r30, 0x04	; 4
					    LBCollides(game.player.shot[i].shared.x,game.player.shot[i].shared.y, 8, 8,
    a8a6:	a0 80       	ld	r10, Z
    a8a8:	aa 0c       	add	r10, r10
    a8aa:	aa 0c       	add	r10, r10
    a8ac:	aa 0c       	add	r10, r10
    a8ae:	31 97       	sbiw	r30, 0x01	; 1
    a8b0:	c0 80       	ld	r12, Z
    a8b2:	cc 0c       	add	r12, r12
    a8b4:	cc 0c       	add	r12, r12
    a8b6:	cc 0c       	add	r12, r12
    a8b8:	3a 97       	sbiw	r30, 0x0a	; 10
    a8ba:	60 81       	ld	r22, Z
    a8bc:	71 81       	ldd	r23, Z+1	; 0x01
    a8be:	82 81       	ldd	r24, Z+2	; 0x02
    a8c0:	93 81       	ldd	r25, Z+3	; 0x03
    a8c2:	0e 94 30 66 	call	0xcc60	; 0xcc60 <__fixunssfsi>
    a8c6:	6a 83       	std	Y+2, r22	; 0x02
    a8c8:	7b 83       	std	Y+3, r23	; 0x03
    a8ca:	8c 83       	std	Y+4, r24	; 0x04
    a8cc:	9d 83       	std	Y+5, r25	; 0x05
    a8ce:	f1 01       	movw	r30, r2
    a8d0:	73 97       	sbiw	r30, 0x13	; 19
    a8d2:	60 81       	ld	r22, Z
    a8d4:	71 81       	ldd	r23, Z+1	; 0x01
    a8d6:	82 81       	ldd	r24, Z+2	; 0x02
    a8d8:	93 81       	ldd	r25, Z+3	; 0x03
    a8da:	0e 94 30 66 	call	0xcc60	; 0xcc60 <__fixunssfsi>
    a8de:	6e 83       	std	Y+6, r22	; 0x06
    a8e0:	7f 83       	std	Y+7, r23	; 0x07
    a8e2:	88 87       	std	Y+8, r24	; 0x08
    a8e4:	99 87       	std	Y+9, r25	; 0x09
    a8e6:	ee 85       	ldd	r30, Y+14	; 0x0e
    a8e8:	ff 85       	ldd	r31, Y+15	; 0x0f
    a8ea:	60 85       	ldd	r22, Z+8	; 0x08
    a8ec:	71 85       	ldd	r23, Z+9	; 0x09
    a8ee:	82 85       	ldd	r24, Z+10	; 0x0a
    a8f0:	93 85       	ldd	r25, Z+11	; 0x0b
    a8f2:	0e 94 30 66 	call	0xcc60	; 0xcc60 <__fixunssfsi>
    a8f6:	6a 87       	std	Y+10, r22	; 0x0a
    a8f8:	7b 87       	std	Y+11, r23	; 0x0b
    a8fa:	8c 87       	std	Y+12, r24	; 0x0c
    a8fc:	9d 87       	std	Y+13, r25	; 0x0d
    a8fe:	ee 85       	ldd	r30, Y+14	; 0x0e
    a900:	ff 85       	ldd	r31, Y+15	; 0x0f
    a902:	64 81       	ldd	r22, Z+4	; 0x04
    a904:	75 81       	ldd	r23, Z+5	; 0x05
    a906:	86 81       	ldd	r24, Z+6	; 0x06
    a908:	97 81       	ldd	r25, Z+7	; 0x07
    a90a:	0e 94 30 66 	call	0xcc60	; 0xcc60 <__fixunssfsi>
    a90e:	dc 01       	movw	r26, r24
    a910:	cb 01       	movw	r24, r22
    a912:	ea 80       	ldd	r14, Y+2	; 0x02
    a914:	fb 80       	ldd	r15, Y+3	; 0x03
    a916:	0e 81       	ldd	r16, Y+6	; 0x06
    a918:	1f 81       	ldd	r17, Y+7	; 0x07
    a91a:	28 e0       	ldi	r18, 0x08	; 8
    a91c:	48 e0       	ldi	r20, 0x08	; 8
    a91e:	6a 85       	ldd	r22, Y+10	; 0x0a
    a920:	7b 85       	ldd	r23, Y+11	; 0x0b
    a922:	0e 94 79 48 	call	0x90f2	; 0x90f2 <LBCollides>
			else
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
				{
					if (game.enemies[j].active &&
    a926:	88 23       	and	r24, r24
    a928:	09 f4       	brne	.+2      	; 0xa92c <animate_shot+0x250>
    a92a:	3e c0       	rjmp	.+124    	; 0xa9a8 <animate_shot+0x2cc>
					    LBCollides(game.player.shot[i].shared.x,game.player.shot[i].shared.y, 8, 8,
							game.enemies[j].shared.x, game.enemies[j].shared.y, game.enemies[j].width*8, game.enemies[j].height*8
						)
					)
					{
						SFX_HIT;
    a92c:	41 e0       	ldi	r20, 0x01	; 1
    a92e:	6f ef       	ldi	r22, 0xFF	; 255
    a930:	84 e0       	ldi	r24, 0x04	; 4
    a932:	0e 94 dc 3b 	call	0x77b8	; 0x77b8 <TriggerFx>
						game.enemies[j].shield -= game.player.shot[i].hit_count;
    a936:	f1 01       	movw	r30, r2
    a938:	80 81       	ld	r24, Z
    a93a:	f2 01       	movw	r30, r4
    a93c:	90 81       	ld	r25, Z
    a93e:	89 1b       	sub	r24, r25
    a940:	f1 01       	movw	r30, r2
    a942:	80 83       	st	Z, r24
						if (game.enemies[j].shield <= 0)
    a944:	18 16       	cp	r1, r24
    a946:	14 f1       	brlt	.+68     	; 0xa98c <animate_shot+0x2b0>
						{
							SFX_ENEMY_EXPLODE;
    a948:	41 e0       	ldi	r20, 0x01	; 1
    a94a:	6f ef       	ldi	r22, 0xFF	; 255
    a94c:	86 e0       	ldi	r24, 0x06	; 6
    a94e:	0e 94 dc 3b 	call	0x77b8	; 0x77b8 <TriggerFx>
							game.enemies[j].flags = EXPLODING;
    a952:	f2 e4       	ldi	r31, 0x42	; 66
    a954:	f6 9d       	mul	r31, r6
    a956:	c0 01       	movw	r24, r0
    a958:	f7 9d       	mul	r31, r7
    a95a:	90 0d       	add	r25, r0
    a95c:	11 24       	eor	r1, r1
    a95e:	8a 55       	subi	r24, 0x5A	; 90
    a960:	92 4f       	sbci	r25, 0xF2	; 242
    a962:	fc 01       	movw	r30, r24
    a964:	e6 54       	subi	r30, 0x46	; 70
    a966:	ff 4f       	sbci	r31, 0xFF	; 255
    a968:	b0 82       	st	Z, r11
							game.enemies[j].active = 0;
    a96a:	31 97       	sbiw	r30, 0x01	; 1
    a96c:	10 82       	st	Z, r1
							game.active_enemies--;
    a96e:	80 91 c1 0d 	lds	r24, 0x0DC1
    a972:	81 50       	subi	r24, 0x01	; 1
    a974:	80 93 c1 0d 	sts	0x0DC1, r24
							game.score += KILL_SCORE;
    a978:	80 91 ae 0d 	lds	r24, 0x0DAE
    a97c:	90 91 af 0d 	lds	r25, 0x0DAF
    a980:	0a 96       	adiw	r24, 0x0a	; 10
    a982:	90 93 af 0d 	sts	0x0DAF, r25
    a986:	80 93 ae 0d 	sts	0x0DAE, r24
							break;
    a98a:	19 c0       	rjmp	.+50     	; 0xa9be <animate_shot+0x2e2>
						}
						game.player.shot[i].active = 0;
    a98c:	f4 01       	movw	r30, r8
    a98e:	10 82       	st	Z, r1
						game.player.active_shots--;
    a990:	80 91 d3 0d 	lds	r24, 0x0DD3
    a994:	81 50       	subi	r24, 0x01	; 1
    a996:	80 93 d3 0d 	sts	0x0DD3, r24
						LBMoveSprite(PLAYER_SHOT_SLOT+i, OFF_SCREEN, 0, 1, 1);
    a99a:	01 e0       	ldi	r16, 0x01	; 1
    a99c:	21 e0       	ldi	r18, 0x01	; 1
    a99e:	40 e0       	ldi	r20, 0x00	; 0
    a9a0:	60 ee       	ldi	r22, 0xE0	; 224
    a9a2:	89 81       	ldd	r24, Y+1	; 0x01
    a9a4:	0e 94 16 49 	call	0x922c	; 0x922c <LBMoveSprite>
    a9a8:	ff ef       	ldi	r31, 0xFF	; 255
    a9aa:	6f 1a       	sub	r6, r31
    a9ac:	7f 0a       	sbc	r7, r31
    a9ae:	22 e4       	ldi	r18, 0x42	; 66
    a9b0:	22 0e       	add	r2, r18
    a9b2:	31 1c       	adc	r3, r1
				LBMoveSprite(PLAYER_SHOT_SLOT+i, OFF_SCREEN, 0, 1, 1);
			}
			else
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
    a9b4:	85 e0       	ldi	r24, 0x05	; 5
    a9b6:	68 16       	cp	r6, r24
    a9b8:	71 04       	cpc	r7, r1
    a9ba:	09 f0       	breq	.+2      	; 0xa9be <animate_shot+0x2e2>
    a9bc:	6d cf       	rjmp	.-294    	; 0xa898 <animate_shot+0x1bc>
    a9be:	9a e1       	ldi	r25, 0x1A	; 26
    a9c0:	89 0e       	add	r8, r25
    a9c2:	91 1c       	adc	r9, r1
    a9c4:	e9 81       	ldd	r30, Y+1	; 0x01
    a9c6:	ef 5f       	subi	r30, 0xFF	; 255
    a9c8:	e9 83       	std	Y+1, r30	; 0x01
    a9ca:	8e 85       	ldd	r24, Y+14	; 0x0e
    a9cc:	9f 85       	ldd	r25, Y+15	; 0x0f
    a9ce:	4a 96       	adiw	r24, 0x1a	; 26
    a9d0:	9f 87       	std	Y+15, r25	; 0x0f
    a9d2:	8e 87       	std	Y+14, r24	; 0x0e

void animate_shot()
{
	// Animate shots
	u8 slot = ENEMY_SLOT;
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
    a9d4:	ee 30       	cpi	r30, 0x0E	; 14
    a9d6:	09 f0       	breq	.+2      	; 0xa9da <animate_shot+0x2fe>
    a9d8:	a7 ce       	rjmp	.-690    	; 0xa728 <animate_shot+0x4c>
					slot += game.enemies[j].width*game.enemies[j].height;
				}
			}
		}
	}
}
    a9da:	2f 96       	adiw	r28, 0x0f	; 15
    a9dc:	0f b6       	in	r0, 0x3f	; 63
    a9de:	f8 94       	cli
    a9e0:	de bf       	out	0x3e, r29	; 62
    a9e2:	0f be       	out	0x3f, r0	; 63
    a9e4:	cd bf       	out	0x3d, r28	; 61
    a9e6:	df 91       	pop	r29
    a9e8:	cf 91       	pop	r28
    a9ea:	1f 91       	pop	r17
    a9ec:	0f 91       	pop	r16
    a9ee:	ff 90       	pop	r15
    a9f0:	ef 90       	pop	r14
    a9f2:	df 90       	pop	r13
    a9f4:	cf 90       	pop	r12
    a9f6:	bf 90       	pop	r11
    a9f8:	af 90       	pop	r10
    a9fa:	9f 90       	pop	r9
    a9fc:	8f 90       	pop	r8
    a9fe:	7f 90       	pop	r7
    aa00:	6f 90       	pop	r6
    aa02:	5f 90       	pop	r5
    aa04:	4f 90       	pop	r4
    aa06:	3f 90       	pop	r3
    aa08:	2f 90       	pop	r2
    aa0a:	08 95       	ret

0000aa0c <map_explosion>:
	}
	return result;
}

u8 map_explosion(u8* flags, Animation* anim, u8 slot, u8 width, u8 height)
{
    aa0c:	7f 92       	push	r7
    aa0e:	8f 92       	push	r8
    aa10:	9f 92       	push	r9
    aa12:	af 92       	push	r10
    aa14:	bf 92       	push	r11
    aa16:	cf 92       	push	r12
    aa18:	df 92       	push	r13
    aa1a:	ef 92       	push	r14
    aa1c:	ff 92       	push	r15
    aa1e:	0f 93       	push	r16
    aa20:	1f 93       	push	r17
    aa22:	cf 93       	push	r28
    aa24:	df 93       	push	r29
    aa26:	1f 92       	push	r1
    aa28:	cd b7       	in	r28, 0x3d	; 61
    aa2a:	de b7       	in	r29, 0x3e	; 62
    aa2c:	6c 01       	movw	r12, r24
    aa2e:	7b 01       	movw	r14, r22
    aa30:	74 2e       	mov	r7, r20
	char* frame;
	frame = LBGetNextFrame(anim);
    aa32:	cb 01       	movw	r24, r22
    aa34:	29 83       	std	Y+1, r18	; 0x01
    aa36:	0e 94 62 47 	call	0x8ec4	; 0x8ec4 <LBGetNextFrame>
    aa3a:	4c 01       	movw	r8, r24
	for (u8 i = 0; i < width*height; i++)
    aa3c:	29 81       	ldd	r18, Y+1	; 0x01
    aa3e:	20 9f       	mul	r18, r16
    aa40:	50 01       	movw	r10, r0
    aa42:	11 24       	eor	r1, r1
    aa44:	10 e0       	ldi	r17, 0x00	; 0
    aa46:	81 2f       	mov	r24, r17
    aa48:	90 e0       	ldi	r25, 0x00	; 0
    aa4a:	8a 15       	cp	r24, r10
    aa4c:	9b 05       	cpc	r25, r11
    aa4e:	54 f4       	brge	.+20     	; 0xaa64 <map_explosion+0x58>
	{
		LBMapSprite(slot+i, frame, 0);
    aa50:	40 e0       	ldi	r20, 0x00	; 0
    aa52:	b4 01       	movw	r22, r8
    aa54:	81 2f       	mov	r24, r17
    aa56:	87 0d       	add	r24, r7
    aa58:	29 83       	std	Y+1, r18	; 0x01
    aa5a:	0e 94 c4 48 	call	0x9188	; 0x9188 <LBMapSprite>

u8 map_explosion(u8* flags, Animation* anim, u8 slot, u8 width, u8 height)
{
	char* frame;
	frame = LBGetNextFrame(anim);
	for (u8 i = 0; i < width*height; i++)
    aa5e:	1f 5f       	subi	r17, 0xFF	; 255
    aa60:	29 81       	ldd	r18, Y+1	; 0x01
    aa62:	f1 cf       	rjmp	.-30     	; 0xaa46 <map_explosion+0x3a>
	{
		LBMapSprite(slot+i, frame, 0);
	}
	if (anim->looped)
    aa64:	f7 01       	movw	r30, r14
    aa66:	84 81       	ldd	r24, Z+4	; 0x04
    aa68:	88 23       	and	r24, r24
    aa6a:	51 f0       	breq	.+20     	; 0xaa80 <map_explosion+0x74>
	{
		*flags ^= EXPLODING;
    aa6c:	f6 01       	movw	r30, r12
    aa6e:	80 81       	ld	r24, Z
    aa70:	90 e1       	ldi	r25, 0x10	; 16
    aa72:	98 27       	eor	r25, r24
    aa74:	90 83       	st	Z, r25
		LBMoveSprite(slot, OFF_SCREEN, 0, width, height);
    aa76:	40 e0       	ldi	r20, 0x00	; 0
    aa78:	60 ee       	ldi	r22, 0xE0	; 224
    aa7a:	87 2d       	mov	r24, r7
    aa7c:	0e 94 16 49 	call	0x922c	; 0x922c <LBMoveSprite>
	}
	return anim->looped;
}
    aa80:	f7 01       	movw	r30, r14
    aa82:	84 81       	ldd	r24, Z+4	; 0x04
    aa84:	0f 90       	pop	r0
    aa86:	df 91       	pop	r29
    aa88:	cf 91       	pop	r28
    aa8a:	1f 91       	pop	r17
    aa8c:	0f 91       	pop	r16
    aa8e:	ff 90       	pop	r15
    aa90:	ef 90       	pop	r14
    aa92:	df 90       	pop	r13
    aa94:	cf 90       	pop	r12
    aa96:	bf 90       	pop	r11
    aa98:	af 90       	pop	r10
    aa9a:	9f 90       	pop	r9
    aa9c:	8f 90       	pop	r8
    aa9e:	7f 90       	pop	r7
    aaa0:	08 95       	ret

0000aaa2 <animate_sprite>:

void animate_sprite(SpriteShared* s, u8 slot, u8 width, u8 height)
{
    aaa2:	8f 92       	push	r8
    aaa4:	9f 92       	push	r9
    aaa6:	af 92       	push	r10
    aaa8:	bf 92       	push	r11
    aaaa:	ff 92       	push	r15
    aaac:	0f 93       	push	r16
    aaae:	1f 93       	push	r17
    aab0:	cf 93       	push	r28
    aab2:	df 93       	push	r29
    aab4:	ec 01       	movw	r28, r24
    aab6:	f6 2e       	mov	r15, r22
    aab8:	14 2f       	mov	r17, r20
    aaba:	02 2f       	mov	r16, r18
	s->vy = s->vy + s->gravity*FRAME_TIME;
    aabc:	6e 85       	ldd	r22, Y+14	; 0x0e
    aabe:	70 e0       	ldi	r23, 0x00	; 0
    aac0:	80 e0       	ldi	r24, 0x00	; 0
    aac2:	90 e0       	ldi	r25, 0x00	; 0
    aac4:	0e 94 5e 66 	call	0xccbc	; 0xccbc <__floatsisf>
    aac8:	29 e8       	ldi	r18, 0x89	; 137
    aaca:	38 e8       	ldi	r19, 0x88	; 136
    aacc:	48 e8       	ldi	r20, 0x88	; 136
    aace:	5c e3       	ldi	r21, 0x3C	; 60
    aad0:	0e 94 12 67 	call	0xce24	; 0xce24 <__mulsf3>
    aad4:	28 81       	ld	r18, Y
    aad6:	39 81       	ldd	r19, Y+1	; 0x01
    aad8:	4a 81       	ldd	r20, Y+2	; 0x02
    aada:	5b 81       	ldd	r21, Y+3	; 0x03
    aadc:	0e 94 c8 65 	call	0xcb90	; 0xcb90 <__addsf3>
    aae0:	4b 01       	movw	r8, r22
    aae2:	5c 01       	movw	r10, r24
	if (s->vy > MAX_SPEED) s->vy = MAX_SPEED;
    aae4:	20 e0       	ldi	r18, 0x00	; 0
    aae6:	30 e0       	ldi	r19, 0x00	; 0
    aae8:	40 ef       	ldi	r20, 0xF0	; 240
    aaea:	52 e4       	ldi	r21, 0x42	; 66
    aaec:	0e 94 0e 67 	call	0xce1c	; 0xce1c <__gesf2>
    aaf0:	18 16       	cp	r1, r24
    aaf2:	2c f0       	brlt	.+10     	; 0xaafe <animate_sprite+0x5c>
	return anim->looped;
}

void animate_sprite(SpriteShared* s, u8 slot, u8 width, u8 height)
{
	s->vy = s->vy + s->gravity*FRAME_TIME;
    aaf4:	88 82       	st	Y, r8
    aaf6:	99 82       	std	Y+1, r9	; 0x01
    aaf8:	aa 82       	std	Y+2, r10	; 0x02
    aafa:	bb 82       	std	Y+3, r11	; 0x03
    aafc:	08 c0       	rjmp	.+16     	; 0xab0e <animate_sprite+0x6c>
	if (s->vy > MAX_SPEED) s->vy = MAX_SPEED;
    aafe:	80 e0       	ldi	r24, 0x00	; 0
    ab00:	90 e0       	ldi	r25, 0x00	; 0
    ab02:	a0 ef       	ldi	r26, 0xF0	; 240
    ab04:	b2 e4       	ldi	r27, 0x42	; 66
    ab06:	88 83       	st	Y, r24
    ab08:	99 83       	std	Y+1, r25	; 0x01
    ab0a:	aa 83       	std	Y+2, r26	; 0x02
    ab0c:	bb 83       	std	Y+3, r27	; 0x03
	s->x += s->vx*FRAME_TIME;
    ab0e:	6c 85       	ldd	r22, Y+12	; 0x0c
    ab10:	7d 85       	ldd	r23, Y+13	; 0x0d
    ab12:	88 27       	eor	r24, r24
    ab14:	77 fd       	sbrc	r23, 7
    ab16:	80 95       	com	r24
    ab18:	98 2f       	mov	r25, r24
    ab1a:	0e 94 5e 66 	call	0xccbc	; 0xccbc <__floatsisf>
    ab1e:	29 e8       	ldi	r18, 0x89	; 137
    ab20:	38 e8       	ldi	r19, 0x88	; 136
    ab22:	48 e8       	ldi	r20, 0x88	; 136
    ab24:	5c e3       	ldi	r21, 0x3C	; 60
    ab26:	0e 94 12 67 	call	0xce24	; 0xce24 <__mulsf3>
    ab2a:	9b 01       	movw	r18, r22
    ab2c:	ac 01       	movw	r20, r24
    ab2e:	6c 81       	ldd	r22, Y+4	; 0x04
    ab30:	7d 81       	ldd	r23, Y+5	; 0x05
    ab32:	8e 81       	ldd	r24, Y+6	; 0x06
    ab34:	9f 81       	ldd	r25, Y+7	; 0x07
    ab36:	0e 94 c8 65 	call	0xcb90	; 0xcb90 <__addsf3>
    ab3a:	6c 83       	std	Y+4, r22	; 0x04
    ab3c:	7d 83       	std	Y+5, r23	; 0x05
    ab3e:	8e 83       	std	Y+6, r24	; 0x06
    ab40:	9f 83       	std	Y+7, r25	; 0x07
	s->y += s->vy*FRAME_TIME;
    ab42:	29 e8       	ldi	r18, 0x89	; 137
    ab44:	38 e8       	ldi	r19, 0x88	; 136
    ab46:	48 e8       	ldi	r20, 0x88	; 136
    ab48:	5c e3       	ldi	r21, 0x3C	; 60
    ab4a:	68 81       	ld	r22, Y
    ab4c:	79 81       	ldd	r23, Y+1	; 0x01
    ab4e:	8a 81       	ldd	r24, Y+2	; 0x02
    ab50:	9b 81       	ldd	r25, Y+3	; 0x03
    ab52:	0e 94 12 67 	call	0xce24	; 0xce24 <__mulsf3>
    ab56:	9b 01       	movw	r18, r22
    ab58:	ac 01       	movw	r20, r24
    ab5a:	68 85       	ldd	r22, Y+8	; 0x08
    ab5c:	79 85       	ldd	r23, Y+9	; 0x09
    ab5e:	8a 85       	ldd	r24, Y+10	; 0x0a
    ab60:	9b 85       	ldd	r25, Y+11	; 0x0b
    ab62:	0e 94 c8 65 	call	0xcb90	; 0xcb90 <__addsf3>
    ab66:	68 87       	std	Y+8, r22	; 0x08
    ab68:	79 87       	std	Y+9, r23	; 0x09
    ab6a:	8a 87       	std	Y+10, r24	; 0x0a
    ab6c:	9b 87       	std	Y+11, r25	; 0x0b
	collision_detect_level(s, width, height);
    ab6e:	40 2f       	mov	r20, r16
    ab70:	61 2f       	mov	r22, r17
    ab72:	ce 01       	movw	r24, r28
    ab74:	0e 94 32 50 	call	0xa064	; 0xa064 <collision_detect_level>
	LBMoveSprite(slot, s->x - game.camera_x, s->y - game.camera_y, width, height);
    ab78:	e0 91 ac 0d 	lds	r30, 0x0DAC
    ab7c:	f0 91 ad 0d 	lds	r31, 0x0DAD
    ab80:	bf 01       	movw	r22, r30
    ab82:	80 e0       	ldi	r24, 0x00	; 0
    ab84:	90 e0       	ldi	r25, 0x00	; 0
    ab86:	0e 94 5c 66 	call	0xccb8	; 0xccb8 <__floatunsisf>
    ab8a:	9b 01       	movw	r18, r22
    ab8c:	ac 01       	movw	r20, r24
    ab8e:	68 85       	ldd	r22, Y+8	; 0x08
    ab90:	79 85       	ldd	r23, Y+9	; 0x09
    ab92:	8a 85       	ldd	r24, Y+10	; 0x0a
    ab94:	9b 85       	ldd	r25, Y+11	; 0x0b
    ab96:	0e 94 c7 65 	call	0xcb8e	; 0xcb8e <__subsf3>
    ab9a:	0e 94 30 66 	call	0xcc60	; 0xcc60 <__fixunssfsi>
    ab9e:	b6 2e       	mov	r11, r22
    aba0:	e0 91 aa 0d 	lds	r30, 0x0DAA
    aba4:	f0 91 ab 0d 	lds	r31, 0x0DAB
    aba8:	bf 01       	movw	r22, r30
    abaa:	80 e0       	ldi	r24, 0x00	; 0
    abac:	90 e0       	ldi	r25, 0x00	; 0
    abae:	0e 94 5c 66 	call	0xccb8	; 0xccb8 <__floatunsisf>
    abb2:	9b 01       	movw	r18, r22
    abb4:	ac 01       	movw	r20, r24
    abb6:	6c 81       	ldd	r22, Y+4	; 0x04
    abb8:	7d 81       	ldd	r23, Y+5	; 0x05
    abba:	8e 81       	ldd	r24, Y+6	; 0x06
    abbc:	9f 81       	ldd	r25, Y+7	; 0x07
    abbe:	0e 94 c7 65 	call	0xcb8e	; 0xcb8e <__subsf3>
    abc2:	0e 94 30 66 	call	0xcc60	; 0xcc60 <__fixunssfsi>
    abc6:	21 2f       	mov	r18, r17
    abc8:	4b 2d       	mov	r20, r11
    abca:	8f 2d       	mov	r24, r15
    abcc:	0e 94 16 49 	call	0x922c	; 0x922c <LBMoveSprite>
}
    abd0:	df 91       	pop	r29
    abd2:	cf 91       	pop	r28
    abd4:	1f 91       	pop	r17
    abd6:	0f 91       	pop	r16
    abd8:	ff 90       	pop	r15
    abda:	bf 90       	pop	r11
    abdc:	af 90       	pop	r10
    abde:	9f 90       	pop	r9
    abe0:	8f 90       	pop	r8
    abe2:	08 95       	ret

0000abe4 <animate_player>:

void animate_player()
{
    abe4:	0f 93       	push	r16
    abe6:	cf 93       	push	r28
	if (game.player.flags & EXPLODING)
    abe8:	80 91 d4 0d 	lds	r24, 0x0DD4
    abec:	84 ff       	sbrs	r24, 4
    abee:	38 c0       	rjmp	.+112    	; 0xac60 <animate_player+0x7c>
	{
		LBMoveSprite(PLAYER_SLOT, game.player.shared.x - game.camera_x, game.player.shared.y - game.camera_y, game.player.width, game.player.height);
    abf0:	60 91 ac 0d 	lds	r22, 0x0DAC
    abf4:	70 91 ad 0d 	lds	r23, 0x0DAD
    abf8:	80 e0       	ldi	r24, 0x00	; 0
    abfa:	90 e0       	ldi	r25, 0x00	; 0
    abfc:	0e 94 5c 66 	call	0xccb8	; 0xccb8 <__floatunsisf>
    ac00:	9b 01       	movw	r18, r22
    ac02:	ac 01       	movw	r20, r24
    ac04:	60 91 cc 0d 	lds	r22, 0x0DCC
    ac08:	70 91 cd 0d 	lds	r23, 0x0DCD
    ac0c:	80 91 ce 0d 	lds	r24, 0x0DCE
    ac10:	90 91 cf 0d 	lds	r25, 0x0DCF
    ac14:	0e 94 c7 65 	call	0xcb8e	; 0xcb8e <__subsf3>
    ac18:	0e 94 30 66 	call	0xcc60	; 0xcc60 <__fixunssfsi>
    ac1c:	c6 2f       	mov	r28, r22
    ac1e:	60 91 aa 0d 	lds	r22, 0x0DAA
    ac22:	70 91 ab 0d 	lds	r23, 0x0DAB
    ac26:	80 e0       	ldi	r24, 0x00	; 0
    ac28:	90 e0       	ldi	r25, 0x00	; 0
    ac2a:	0e 94 5c 66 	call	0xccb8	; 0xccb8 <__floatunsisf>
    ac2e:	9b 01       	movw	r18, r22
    ac30:	ac 01       	movw	r20, r24
    ac32:	60 91 c8 0d 	lds	r22, 0x0DC8
    ac36:	70 91 c9 0d 	lds	r23, 0x0DC9
    ac3a:	80 91 ca 0d 	lds	r24, 0x0DCA
    ac3e:	90 91 cb 0d 	lds	r25, 0x0DCB
    ac42:	0e 94 c7 65 	call	0xcb8e	; 0xcb8e <__subsf3>
    ac46:	0e 94 30 66 	call	0xcc60	; 0xcc60 <__fixunssfsi>
    ac4a:	00 91 d8 0d 	lds	r16, 0x0DD8
    ac4e:	20 91 d7 0d 	lds	r18, 0x0DD7
    ac52:	4c 2f       	mov	r20, r28
    ac54:	80 e0       	ldi	r24, 0x00	; 0
    ac56:	0e 94 16 49 	call	0x922c	; 0x922c <LBMoveSprite>
	}
	else animate_sprite(&game.player.shared, PLAYER_SLOT, game.player.width, game.player.height);
}
    ac5a:	cf 91       	pop	r28
    ac5c:	0f 91       	pop	r16
    ac5e:	08 95       	ret
{
	if (game.player.flags & EXPLODING)
	{
		LBMoveSprite(PLAYER_SLOT, game.player.shared.x - game.camera_x, game.player.shared.y - game.camera_y, game.player.width, game.player.height);
	}
	else animate_sprite(&game.player.shared, PLAYER_SLOT, game.player.width, game.player.height);
    ac60:	20 91 d8 0d 	lds	r18, 0x0DD8
    ac64:	40 91 d7 0d 	lds	r20, 0x0DD7
    ac68:	60 e0       	ldi	r22, 0x00	; 0
    ac6a:	84 ec       	ldi	r24, 0xC4	; 196
    ac6c:	9d e0       	ldi	r25, 0x0D	; 13
}
    ac6e:	cf 91       	pop	r28
    ac70:	0f 91       	pop	r16
{
	if (game.player.flags & EXPLODING)
	{
		LBMoveSprite(PLAYER_SLOT, game.player.shared.x - game.camera_x, game.player.shared.y - game.camera_y, game.player.width, game.player.height);
	}
	else animate_sprite(&game.player.shared, PLAYER_SLOT, game.player.width, game.player.height);
    ac72:	0c 94 51 55 	jmp	0xaaa2	; 0xaaa2 <animate_sprite>

0000ac76 <update_spider_enemy>:
}

void update_spider_enemy(Enemy* e, u8 slot)
{
    ac76:	1f 93       	push	r17
    ac78:	cf 93       	push	r28
    ac7a:	df 93       	push	r29
    ac7c:	ec 01       	movw	r28, r24
    ac7e:	16 2f       	mov	r17, r22
	if (e->flags & IDLE && e->frame_count == SPIDER_IDLE_FRAMES)
    ac80:	98 89       	ldd	r25, Y+16	; 0x10
    ac82:	89 2f       	mov	r24, r25
    ac84:	88 70       	andi	r24, 0x08	; 8
    ac86:	93 ff       	sbrs	r25, 3
    ac88:	1e c0       	rjmp	.+60     	; 0xacc6 <update_spider_enemy+0x50>
    ac8a:	2d 89       	ldd	r18, Y+21	; 0x15
    ac8c:	20 38       	cpi	r18, 0x80	; 128
    ac8e:	d9 f4       	brne	.+54     	; 0xacc6 <update_spider_enemy+0x50>
	{
		e->flags = JUMPING;
    ac90:	81 e0       	ldi	r24, 0x01	; 1
    ac92:	88 8b       	std	Y+16, r24	; 0x10
		e->shared.vy = -SPIDER_JUMP_SPEED;
    ac94:	80 e0       	ldi	r24, 0x00	; 0
    ac96:	90 e0       	ldi	r25, 0x00	; 0
    ac98:	a8 ec       	ldi	r26, 0xC8	; 200
    ac9a:	b2 ec       	ldi	r27, 0xC2	; 194
    ac9c:	88 83       	st	Y, r24
    ac9e:	99 83       	std	Y+1, r25	; 0x01
    aca0:	aa 83       	std	Y+2, r26	; 0x02
    aca2:	bb 83       	std	Y+3, r27	; 0x03
		e->shared.gravity = GRAVITY;
    aca4:	8f ef       	ldi	r24, 0xFF	; 255
    aca6:	8e 87       	std	Y+14, r24	; 0x0e
		e->shared.vx = SPIDER_SIDE_SPEED;
    aca8:	8c e3       	ldi	r24, 0x3C	; 60
    acaa:	90 e0       	ldi	r25, 0x00	; 0
    acac:	9d 87       	std	Y+13, r25	; 0x0d
    acae:	8c 87       	std	Y+12, r24	; 0x0c
		if (e->direction == D_LEFT)
    acb0:	89 89       	ldd	r24, Y+17	; 0x11
    acb2:	81 11       	cpse	r24, r1
    acb4:	04 c0       	rjmp	.+8      	; 0xacbe <update_spider_enemy+0x48>
		{
			e->shared.vx = -SPIDER_SIDE_SPEED;
    acb6:	84 ec       	ldi	r24, 0xC4	; 196
    acb8:	9f ef       	ldi	r25, 0xFF	; 255
    acba:	9d 87       	std	Y+13, r25	; 0x0d
    acbc:	8c 87       	std	Y+12, r24	; 0x0c
		}
		LBMapSprite(slot, map_enemy_spider_1, 0);
    acbe:	40 e0       	ldi	r20, 0x00	; 0
    acc0:	6d e5       	ldi	r22, 0x5D	; 93
    acc2:	7d e2       	ldi	r23, 0x2D	; 45
    acc4:	1a c0       	rjmp	.+52     	; 0xacfa <update_spider_enemy+0x84>
	}
	else if (e->flags & JUMPING && e->shared.gravity == 0)
    acc6:	90 ff       	sbrs	r25, 0
    acc8:	10 c0       	rjmp	.+32     	; 0xacea <update_spider_enemy+0x74>
    acca:	9e 85       	ldd	r25, Y+14	; 0x0e
    accc:	91 11       	cpse	r25, r1
    acce:	0d c0       	rjmp	.+26     	; 0xacea <update_spider_enemy+0x74>
	{
		e->flags = IDLE;
    acd0:	88 e0       	ldi	r24, 0x08	; 8
    acd2:	88 8b       	std	Y+16, r24	; 0x10
		e->shared.vx = 0;
    acd4:	1d 86       	std	Y+13, r1	; 0x0d
    acd6:	1c 86       	std	Y+12, r1	; 0x0c
		e->frame_count = 0;
    acd8:	1d 8a       	std	Y+21, r1	; 0x15
		if (e->direction == D_LEFT)
    acda:	89 89       	ldd	r24, Y+17	; 0x11
    acdc:	81 11       	cpse	r24, r1
    acde:	03 c0       	rjmp	.+6      	; 0xace6 <update_spider_enemy+0x70>
		{
			e->direction = D_RIGHT;
    ace0:	81 e0       	ldi	r24, 0x01	; 1
    ace2:	89 8b       	std	Y+17, r24	; 0x11
    ace4:	0d c0       	rjmp	.+26     	; 0xad00 <update_spider_enemy+0x8a>
		}
		else
		{
			e->direction = D_LEFT;
    ace6:	19 8a       	std	Y+17, r1	; 0x11
    ace8:	0b c0       	rjmp	.+22     	; 0xad00 <update_spider_enemy+0x8a>
		}
	}
	else if (e->flags & IDLE)
    acea:	88 23       	and	r24, r24
    acec:	49 f0       	breq	.+18     	; 0xad00 <update_spider_enemy+0x8a>
	{
		LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    acee:	ce 01       	movw	r24, r28
    acf0:	c2 96       	adiw	r24, 0x32	; 50
    acf2:	0e 94 62 47 	call	0x8ec4	; 0x8ec4 <LBGetNextFrame>
    acf6:	40 e0       	ldi	r20, 0x00	; 0
    acf8:	bc 01       	movw	r22, r24
    acfa:	81 2f       	mov	r24, r17
    acfc:	0e 94 c4 48 	call	0x9188	; 0x9188 <LBMapSprite>
	}
	e->frame_count++;
    ad00:	8d 89       	ldd	r24, Y+21	; 0x15
    ad02:	8f 5f       	subi	r24, 0xFF	; 255
    ad04:	8d 8b       	std	Y+21, r24	; 0x15
}
    ad06:	df 91       	pop	r29
    ad08:	cf 91       	pop	r28
    ad0a:	1f 91       	pop	r17
    ad0c:	08 95       	ret

0000ad0e <update_shark_enemy>:

void update_shark_enemy(Enemy* e, u8 slot)
{
    ad0e:	cf 93       	push	r28
    ad10:	fc 01       	movw	r30, r24
    ad12:	c6 2f       	mov	r28, r22
	e->shared.vx = SHARK_SPEED;
    ad14:	84 e1       	ldi	r24, 0x14	; 20
    ad16:	90 e0       	ldi	r25, 0x00	; 0
    ad18:	95 87       	std	Z+13, r25	; 0x0d
    ad1a:	84 87       	std	Z+12, r24	; 0x0c
	e->shared.vy = 0;
    ad1c:	10 82       	st	Z, r1
    ad1e:	11 82       	std	Z+1, r1	; 0x01
    ad20:	12 82       	std	Z+2, r1	; 0x02
    ad22:	13 82       	std	Z+3, r1	; 0x03
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    ad24:	cf 01       	movw	r24, r30
    ad26:	c2 96       	adiw	r24, 0x32	; 50
    ad28:	0e 94 62 47 	call	0x8ec4	; 0x8ec4 <LBGetNextFrame>
    ad2c:	40 e0       	ldi	r20, 0x00	; 0
    ad2e:	bc 01       	movw	r22, r24
    ad30:	8c 2f       	mov	r24, r28
}
    ad32:	cf 91       	pop	r28

void update_shark_enemy(Enemy* e, u8 slot)
{
	e->shared.vx = SHARK_SPEED;
	e->shared.vy = 0;
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    ad34:	0c 94 c4 48 	jmp	0x9188	; 0x9188 <LBMapSprite>

0000ad38 <update_basic_shot>:
}

void update_basic_shot(Shot* s, u8 slot)
{
    ad38:	cf 93       	push	r28
    ad3a:	c6 2f       	mov	r28, r22
	LBMapSprite(slot, LBGetNextFrame(&s->anim), 0);
    ad3c:	42 96       	adiw	r24, 0x12	; 18
    ad3e:	0e 94 62 47 	call	0x8ec4	; 0x8ec4 <LBGetNextFrame>
    ad42:	40 e0       	ldi	r20, 0x00	; 0
    ad44:	bc 01       	movw	r22, r24
    ad46:	8c 2f       	mov	r24, r28
}
    ad48:	cf 91       	pop	r28
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
}

void update_basic_shot(Shot* s, u8 slot)
{
	LBMapSprite(slot, LBGetNextFrame(&s->anim), 0);
    ad4a:	0c 94 c4 48 	jmp	0x9188	; 0x9188 <LBMapSprite>

0000ad4e <update_enemies>:
}

void update_enemies()
{
    ad4e:	ef 92       	push	r14
    ad50:	ff 92       	push	r15
    ad52:	0f 93       	push	r16
    ad54:	1f 93       	push	r17
    ad56:	cf 93       	push	r28
    ad58:	df 93       	push	r29
    ad5a:	c3 e6       	ldi	r28, 0x63	; 99
    ad5c:	de e0       	ldi	r29, 0x0E	; 14
	u8 slot = ENEMY_SLOT;
    ad5e:	16 e0       	ldi	r17, 0x06	; 6
    ad60:	ce 01       	movw	r24, r28
    ad62:	03 97       	sbiw	r24, 0x03	; 3
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].flags & EXPLODING)
    ad64:	fc 01       	movw	r30, r24
    ad66:	20 81       	ld	r18, Z
    ad68:	ae 01       	movw	r20, r28
    ad6a:	41 50       	subi	r20, 0x01	; 1
    ad6c:	51 09       	sbc	r21, r1
    ad6e:	7a 01       	movw	r14, r20
    ad70:	24 ff       	sbrs	r18, 4
    ad72:	0a c0       	rjmp	.+20     	; 0xad88 <update_enemies+0x3a>
		{
			map_explosion(&game.enemies[i].flags, &game.enemies[i].expl, slot, game.enemies[i].width, game.enemies[i].height);
    ad74:	08 81       	ld	r16, Y
    ad76:	fa 01       	movw	r30, r20
    ad78:	20 81       	ld	r18, Z
    ad7a:	41 2f       	mov	r20, r17
    ad7c:	be 01       	movw	r22, r28
    ad7e:	69 5d       	subi	r22, 0xD9	; 217
    ad80:	7f 4f       	sbci	r23, 0xFF	; 255
    ad82:	0e 94 06 55 	call	0xaa0c	; 0xaa0c <map_explosion>
    ad86:	15 c0       	rjmp	.+42     	; 0xadb2 <update_enemies+0x64>
    ad88:	fe 01       	movw	r30, r28
    ad8a:	34 97       	sbiw	r30, 0x04	; 4
		}
		else if (game.enemies[i].active)
    ad8c:	80 81       	ld	r24, Z
    ad8e:	88 23       	and	r24, r24
    ad90:	81 f0       	breq	.+32     	; 0xadb2 <update_enemies+0x64>
		{
			switch (game.enemies[i].enemy_type)
    ad92:	89 81       	ldd	r24, Y+1	; 0x01
    ad94:	88 23       	and	r24, r24
    ad96:	41 f0       	breq	.+16     	; 0xada8 <update_enemies+0x5a>
    ad98:	81 30       	cpi	r24, 0x01	; 1
    ad9a:	59 f4       	brne	.+22     	; 0xadb2 <update_enemies+0x64>
			{
				case ENEMY_SPIDER: update_spider_enemy(&game.enemies[i], slot); break;
				case ENEMY_SHARK: update_shark_enemy(&game.enemies[i], slot); break;
    ad9c:	61 2f       	mov	r22, r17
    ad9e:	ce 01       	movw	r24, r28
    ada0:	43 97       	sbiw	r24, 0x13	; 19
    ada2:	0e 94 87 56 	call	0xad0e	; 0xad0e <update_shark_enemy>
    ada6:	05 c0       	rjmp	.+10     	; 0xadb2 <update_enemies+0x64>
		}
		else if (game.enemies[i].active)
		{
			switch (game.enemies[i].enemy_type)
			{
				case ENEMY_SPIDER: update_spider_enemy(&game.enemies[i], slot); break;
    ada8:	61 2f       	mov	r22, r17
    adaa:	ce 01       	movw	r24, r28
    adac:	43 97       	sbiw	r24, 0x13	; 19
    adae:	0e 94 3b 56 	call	0xac76	; 0xac76 <update_spider_enemy>
				case ENEMY_SHARK: update_shark_enemy(&game.enemies[i], slot); break;
			}
		}
		slot += game.enemies[i].width * game.enemies[i].height;
    adb2:	f7 01       	movw	r30, r14
    adb4:	90 81       	ld	r25, Z
    adb6:	88 81       	ld	r24, Y
    adb8:	98 9f       	mul	r25, r24
    adba:	10 0d       	add	r17, r0
    adbc:	11 24       	eor	r1, r1
    adbe:	ce 5b       	subi	r28, 0xBE	; 190
    adc0:	df 4f       	sbci	r29, 0xFF	; 255

void update_enemies()
{
	u8 slot = ENEMY_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    adc2:	ff e0       	ldi	r31, 0x0F	; 15
    adc4:	cd 3a       	cpi	r28, 0xAD	; 173
    adc6:	df 07       	cpc	r29, r31
    adc8:	59 f6       	brne	.-106    	; 0xad60 <update_enemies+0x12>
				case ENEMY_SHARK: update_shark_enemy(&game.enemies[i], slot); break;
			}
		}
		slot += game.enemies[i].width * game.enemies[i].height;
	}
}
    adca:	df 91       	pop	r29
    adcc:	cf 91       	pop	r28
    adce:	1f 91       	pop	r17
    add0:	0f 91       	pop	r16
    add2:	ff 90       	pop	r15
    add4:	ef 90       	pop	r14
    add6:	08 95       	ret

0000add8 <update_enemy_shots>:

void update_enemy_shots()
{
    add8:	8f 92       	push	r8
    adda:	9f 92       	push	r9
    addc:	af 92       	push	r10
    adde:	bf 92       	push	r11
    ade0:	cf 92       	push	r12
    ade2:	df 92       	push	r13
    ade4:	ef 92       	push	r14
    ade6:	ff 92       	push	r15
    ade8:	0f 93       	push	r16
    adea:	1f 93       	push	r17
    adec:	cf 93       	push	r28
    adee:	df 93       	push	r29
    adf0:	00 d0       	rcall	.+0      	; 0xadf2 <update_enemy_shots+0x1a>
    adf2:	00 d0       	rcall	.+0      	; 0xadf4 <update_enemy_shots+0x1c>
    adf4:	cd b7       	in	r28, 0x3d	; 61
    adf6:	de b7       	in	r29, 0x3e	; 62
    adf8:	26 e6       	ldi	r18, 0x66	; 102
    adfa:	82 2e       	mov	r8, r18
    adfc:	2e e0       	ldi	r18, 0x0E	; 14
    adfe:	92 2e       	mov	r9, r18
    ae00:	09 e7       	ldi	r16, 0x79	; 121
    ae02:	1e e0       	ldi	r17, 0x0E	; 14
    ae04:	3f e0       	ldi	r19, 0x0F	; 15
    ae06:	b3 2e       	mov	r11, r19
					if (!game.enemies[i].shot[j].active)
					{
						game.enemies[i].shot[j].active = 1;
						game.enemies[i].shot[j].shared.x = game.enemies[i].shared.x;
						game.enemies[i].shot[j].shared.y = ((u16 ) game.enemies[i].shared.y / 8) * 8;
						game.enemies[i].shot[j].shared.vx = ENEMY_SHOT_SPEED;
    ae08:	44 e6       	ldi	r20, 0x64	; 100
    ae0a:	e4 2e       	mov	r14, r20
    ae0c:	f1 2c       	mov	r15, r1
						if (game.player.shared.x <= game.enemies[i].shared.x)
						{
							game.enemies[i].shot[j].shared.vx = -ENEMY_SHOT_SPEED;
    ae0e:	5c e9       	ldi	r21, 0x9C	; 156
    ae10:	c5 2e       	mov	r12, r21
    ae12:	dd 24       	eor	r13, r13
    ae14:	da 94       	dec	r13
    ae16:	aa 24       	eor	r10, r10
    ae18:	aa 94       	dec	r10
    ae1a:	ab 0c       	add	r10, r11
    ae1c:	f4 01       	movw	r30, r8
    ae1e:	37 97       	sbiw	r30, 0x07	; 7
{
	u8 slot = ENEMY_SHOT_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].active && game.enemies[i].shot_frame_count >= ENEMY_SHOT_DELAY_FRAMES)
    ae20:	80 81       	ld	r24, Z
    ae22:	88 23       	and	r24, r24
    ae24:	09 f4       	brne	.+2      	; 0xae28 <update_enemy_shots+0x50>
    ae26:	58 c0       	rjmp	.+176    	; 0xaed8 <update_enemy_shots+0x100>
    ae28:	f4 01       	movw	r30, r8
    ae2a:	80 81       	ld	r24, Z
    ae2c:	8c 33       	cpi	r24, 0x3C	; 60
    ae2e:	08 f4       	brcc	.+2      	; 0xae32 <update_enemy_shots+0x5a>
    ae30:	50 c0       	rjmp	.+160    	; 0xaed2 <update_enemy_shots+0xfa>
		{
			game.enemies[i].shot_frame_count = 0;	
    ae32:	10 82       	st	Z, r1
    ae34:	f8 01       	movw	r30, r16
    ae36:	32 97       	sbiw	r30, 0x02	; 2
			for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
			{
				if (game.enemies[i].shot[j].shot_type == BASIC_ENEMY_SHOT)
    ae38:	80 81       	ld	r24, Z
    ae3a:	81 30       	cpi	r24, 0x01	; 1
    ae3c:	09 f0       	breq	.+2      	; 0xae40 <update_enemy_shots+0x68>
    ae3e:	4c c0       	rjmp	.+152    	; 0xaed8 <update_enemy_shots+0x100>
				{
					if (!game.enemies[i].shot[j].active)
    ae40:	f8 01       	movw	r30, r16
    ae42:	90 81       	ld	r25, Z
    ae44:	91 11       	cpse	r25, r1
    ae46:	3f c0       	rjmp	.+126    	; 0xaec6 <update_enemy_shots+0xee>
					{
						game.enemies[i].shot[j].active = 1;
    ae48:	80 83       	st	Z, r24
    ae4a:	f4 01       	movw	r30, r8
    ae4c:	72 97       	sbiw	r30, 0x12	; 18
						game.enemies[i].shot[j].shared.x = game.enemies[i].shared.x;
    ae4e:	20 81       	ld	r18, Z
    ae50:	31 81       	ldd	r19, Z+1	; 0x01
    ae52:	42 81       	ldd	r20, Z+2	; 0x02
    ae54:	53 81       	ldd	r21, Z+3	; 0x03
    ae56:	f4 01       	movw	r30, r8
    ae58:	26 83       	std	Z+6, r18	; 0x06
    ae5a:	37 83       	std	Z+7, r19	; 0x07
    ae5c:	40 87       	std	Z+8, r20	; 0x08
    ae5e:	51 87       	std	Z+9, r21	; 0x09
    ae60:	3e 97       	sbiw	r30, 0x0e	; 14
						game.enemies[i].shot[j].shared.y = ((u16 ) game.enemies[i].shared.y / 8) * 8;
    ae62:	60 81       	ld	r22, Z
    ae64:	71 81       	ldd	r23, Z+1	; 0x01
    ae66:	82 81       	ldd	r24, Z+2	; 0x02
    ae68:	93 81       	ldd	r25, Z+3	; 0x03
    ae6a:	29 83       	std	Y+1, r18	; 0x01
    ae6c:	3a 83       	std	Y+2, r19	; 0x02
    ae6e:	4b 83       	std	Y+3, r20	; 0x03
    ae70:	5c 83       	std	Y+4, r21	; 0x04
    ae72:	0e 94 30 66 	call	0xcc60	; 0xcc60 <__fixunssfsi>
    ae76:	83 e0       	ldi	r24, 0x03	; 3
    ae78:	76 95       	lsr	r23
    ae7a:	67 95       	ror	r22
    ae7c:	8a 95       	dec	r24
    ae7e:	e1 f7       	brne	.-8      	; 0xae78 <update_enemy_shots+0xa0>
    ae80:	93 e0       	ldi	r25, 0x03	; 3
    ae82:	66 0f       	add	r22, r22
    ae84:	77 1f       	adc	r23, r23
    ae86:	9a 95       	dec	r25
    ae88:	e1 f7       	brne	.-8      	; 0xae82 <update_enemy_shots+0xaa>
    ae8a:	80 e0       	ldi	r24, 0x00	; 0
    ae8c:	90 e0       	ldi	r25, 0x00	; 0
    ae8e:	0e 94 5c 66 	call	0xccb8	; 0xccb8 <__floatunsisf>
    ae92:	f4 01       	movw	r30, r8
    ae94:	62 87       	std	Z+10, r22	; 0x0a
    ae96:	73 87       	std	Z+11, r23	; 0x0b
    ae98:	84 87       	std	Z+12, r24	; 0x0c
    ae9a:	95 87       	std	Z+13, r25	; 0x0d
						game.enemies[i].shot[j].shared.vx = ENEMY_SHOT_SPEED;
    ae9c:	f7 86       	std	Z+15, r15	; 0x0f
    ae9e:	e6 86       	std	Z+14, r14	; 0x0e
						if (game.player.shared.x <= game.enemies[i].shared.x)
    aea0:	29 81       	ldd	r18, Y+1	; 0x01
    aea2:	3a 81       	ldd	r19, Y+2	; 0x02
    aea4:	4b 81       	ldd	r20, Y+3	; 0x03
    aea6:	5c 81       	ldd	r21, Y+4	; 0x04
    aea8:	60 91 c8 0d 	lds	r22, 0x0DC8
    aeac:	70 91 c9 0d 	lds	r23, 0x0DC9
    aeb0:	80 91 ca 0d 	lds	r24, 0x0DCA
    aeb4:	90 91 cb 0d 	lds	r25, 0x0DCB
    aeb8:	0e 94 2c 66 	call	0xcc58	; 0xcc58 <__cmpsf2>
    aebc:	18 16       	cp	r1, r24
    aebe:	1c f0       	brlt	.+6      	; 0xaec6 <update_enemy_shots+0xee>
						{
							game.enemies[i].shot[j].shared.vx = -ENEMY_SHOT_SPEED;
    aec0:	f4 01       	movw	r30, r8
    aec2:	d7 86       	std	Z+15, r13	; 0x0f
    aec4:	c6 86       	std	Z+14, r12	; 0x0e
						}
					}
					update_basic_shot(&game.enemies[i].shot[j], slot);
    aec6:	6a 2d       	mov	r22, r10
    aec8:	c4 01       	movw	r24, r8
    aeca:	02 96       	adiw	r24, 0x02	; 2
    aecc:	0e 94 9c 56 	call	0xad38	; 0xad38 <update_basic_shot>
    aed0:	03 c0       	rjmp	.+6      	; 0xaed8 <update_enemy_shots+0x100>
				slot += 1;
			}
		}
		else if (game.enemies[i].active)
		{
			game.enemies[i].shot_frame_count++;
    aed2:	8f 5f       	subi	r24, 0xFF	; 255
    aed4:	f4 01       	movw	r30, r8
    aed6:	80 83       	st	Z, r24
    aed8:	b3 94       	inc	r11
    aeda:	f2 e4       	ldi	r31, 0x42	; 66
    aedc:	8f 0e       	add	r8, r31
    aede:	91 1c       	adc	r9, r1
    aee0:	0e 5b       	subi	r16, 0xBE	; 190
    aee2:	1f 4f       	sbci	r17, 0xFF	; 255

void update_enemy_shots()
{
	u8 slot = ENEMY_SHOT_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    aee4:	84 e1       	ldi	r24, 0x14	; 20
    aee6:	b8 12       	cpse	r11, r24
    aee8:	96 cf       	rjmp	.-212    	; 0xae16 <update_enemy_shots+0x3e>
		else
		{
			slot += MAX_ENEMY_SHOTS;
		}
	}
}
    aeea:	0f 90       	pop	r0
    aeec:	0f 90       	pop	r0
    aeee:	0f 90       	pop	r0
    aef0:	0f 90       	pop	r0
    aef2:	df 91       	pop	r29
    aef4:	cf 91       	pop	r28
    aef6:	1f 91       	pop	r17
    aef8:	0f 91       	pop	r16
    aefa:	ff 90       	pop	r15
    aefc:	ef 90       	pop	r14
    aefe:	df 90       	pop	r13
    af00:	cf 90       	pop	r12
    af02:	bf 90       	pop	r11
    af04:	af 90       	pop	r10
    af06:	9f 90       	pop	r9
    af08:	8f 90       	pop	r8
    af0a:	08 95       	ret

0000af0c <animate_enemies>:

void animate_enemies()
{
    af0c:	2f 92       	push	r2
    af0e:	3f 92       	push	r3
    af10:	4f 92       	push	r4
    af12:	5f 92       	push	r5
    af14:	6f 92       	push	r6
    af16:	7f 92       	push	r7
    af18:	8f 92       	push	r8
    af1a:	9f 92       	push	r9
    af1c:	af 92       	push	r10
    af1e:	bf 92       	push	r11
    af20:	cf 92       	push	r12
    af22:	df 92       	push	r13
    af24:	ef 92       	push	r14
    af26:	ff 92       	push	r15
    af28:	0f 93       	push	r16
    af2a:	1f 93       	push	r17
    af2c:	cf 93       	push	r28
    af2e:	df 93       	push	r29
    af30:	cd b7       	in	r28, 0x3d	; 61
    af32:	de b7       	in	r29, 0x3e	; 62
    af34:	2c 97       	sbiw	r28, 0x0c	; 12
    af36:	0f b6       	in	r0, 0x3f	; 63
    af38:	f8 94       	cli
    af3a:	de bf       	out	0x3e, r29	; 62
    af3c:	0f be       	out	0x3f, r0	; 63
    af3e:	cd bf       	out	0x3d, r28	; 61
    af40:	42 e6       	ldi	r20, 0x62	; 98
    af42:	24 2e       	mov	r2, r20
    af44:	4e e0       	ldi	r20, 0x0E	; 14
    af46:	34 2e       	mov	r3, r20
    af48:	83 e6       	ldi	r24, 0x63	; 99
    af4a:	9e e0       	ldi	r25, 0x0E	; 14
    af4c:	9c 87       	std	Y+12, r25	; 0x0c
    af4e:	8b 87       	std	Y+11, r24	; 0x0b
    af50:	50 e5       	ldi	r21, 0x50	; 80
    af52:	85 2e       	mov	r8, r21
    af54:	5e e0       	ldi	r21, 0x0E	; 14
    af56:	95 2e       	mov	r9, r21
	u8 slot = ENEMY_SLOT;
    af58:	66 e0       	ldi	r22, 0x06	; 6
    af5a:	b6 2e       	mov	r11, r22
    af5c:	eb 85       	ldd	r30, Y+11	; 0x0b
    af5e:	fc 85       	ldd	r31, Y+12	; 0x0c
    af60:	34 97       	sbiw	r30, 0x04	; 4
    af62:	fa 83       	std	Y+2, r31	; 0x02
    af64:	e9 83       	std	Y+1, r30	; 0x01
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].active && !(game.enemies[i].flags & EXPLODING))
    af66:	80 81       	ld	r24, Z
    af68:	eb 85       	ldd	r30, Y+11	; 0x0b
    af6a:	fc 85       	ldd	r31, Y+12	; 0x0c
    af6c:	33 97       	sbiw	r30, 0x03	; 3
    af6e:	88 23       	and	r24, r24
    af70:	09 f4       	brne	.+2      	; 0xaf74 <animate_enemies+0x68>
    af72:	a9 c0       	rjmp	.+338    	; 0xb0c6 <animate_enemies+0x1ba>
    af74:	80 81       	ld	r24, Z
    af76:	84 fd       	sbrc	r24, 4
    af78:	a6 c0       	rjmp	.+332    	; 0xb0c6 <animate_enemies+0x1ba>
		{
			if (game.enemies[i].shared.x < game.camera_x || game.enemies[i].shared.y < game.camera_y || game.enemies[i].shared.y > game.camera_y + CAMERA_HEIGHT*8)
    af7a:	f4 01       	movw	r30, r8
    af7c:	44 80       	ldd	r4, Z+4	; 0x04
    af7e:	55 80       	ldd	r5, Z+5	; 0x05
    af80:	66 80       	ldd	r6, Z+6	; 0x06
    af82:	77 80       	ldd	r7, Z+7	; 0x07
    af84:	60 91 aa 0d 	lds	r22, 0x0DAA
    af88:	70 91 ab 0d 	lds	r23, 0x0DAB
    af8c:	80 e0       	ldi	r24, 0x00	; 0
    af8e:	90 e0       	ldi	r25, 0x00	; 0
    af90:	0e 94 5c 66 	call	0xccb8	; 0xccb8 <__floatunsisf>
    af94:	9b 01       	movw	r18, r22
    af96:	ac 01       	movw	r20, r24
    af98:	c3 01       	movw	r24, r6
    af9a:	b2 01       	movw	r22, r4
    af9c:	0e 94 2c 66 	call	0xcc58	; 0xcc58 <__cmpsf2>
    afa0:	87 fd       	sbrc	r24, 7
    afa2:	25 c0       	rjmp	.+74     	; 0xafee <animate_enemies+0xe2>
    afa4:	f4 01       	movw	r30, r8
    afa6:	c0 84       	ldd	r12, Z+8	; 0x08
    afa8:	d1 84       	ldd	r13, Z+9	; 0x09
    afaa:	e2 84       	ldd	r14, Z+10	; 0x0a
    afac:	f3 84       	ldd	r15, Z+11	; 0x0b
    afae:	00 91 ac 0d 	lds	r16, 0x0DAC
    afb2:	10 91 ad 0d 	lds	r17, 0x0DAD
    afb6:	b8 01       	movw	r22, r16
    afb8:	80 e0       	ldi	r24, 0x00	; 0
    afba:	90 e0       	ldi	r25, 0x00	; 0
    afbc:	0e 94 5c 66 	call	0xccb8	; 0xccb8 <__floatunsisf>
    afc0:	9b 01       	movw	r18, r22
    afc2:	ac 01       	movw	r20, r24
    afc4:	c7 01       	movw	r24, r14
    afc6:	b6 01       	movw	r22, r12
    afc8:	0e 94 2c 66 	call	0xcc58	; 0xcc58 <__cmpsf2>
    afcc:	87 fd       	sbrc	r24, 7
    afce:	0f c0       	rjmp	.+30     	; 0xafee <animate_enemies+0xe2>
    afd0:	b8 01       	movw	r22, r16
    afd2:	60 53       	subi	r22, 0x30	; 48
    afd4:	7f 4f       	sbci	r23, 0xFF	; 255
    afd6:	80 e0       	ldi	r24, 0x00	; 0
    afd8:	90 e0       	ldi	r25, 0x00	; 0
    afda:	0e 94 5c 66 	call	0xccb8	; 0xccb8 <__floatunsisf>
    afde:	9b 01       	movw	r18, r22
    afe0:	ac 01       	movw	r20, r24
    afe2:	c7 01       	movw	r24, r14
    afe4:	b6 01       	movw	r22, r12
    afe6:	0e 94 0e 67 	call	0xce1c	; 0xce1c <__gesf2>
    afea:	18 16       	cp	r1, r24
    afec:	84 f4       	brge	.+32     	; 0xb00e <animate_enemies+0x102>
			{
				game.enemies[i].active = 0;
    afee:	e9 81       	ldd	r30, Y+1	; 0x01
    aff0:	fa 81       	ldd	r31, Y+2	; 0x02
    aff2:	10 82       	st	Z, r1
				game.active_enemies--;
    aff4:	80 91 c1 0d 	lds	r24, 0x0DC1
    aff8:	81 50       	subi	r24, 0x01	; 1
    affa:	80 93 c1 0d 	sts	0x0DC1, r24
				LBMoveSprite(slot, OFF_SCREEN, 0, game.enemies[i].width, game.enemies[i].height);
    affe:	eb 85       	ldd	r30, Y+11	; 0x0b
    b000:	fc 85       	ldd	r31, Y+12	; 0x0c
    b002:	00 81       	ld	r16, Z
    b004:	f1 01       	movw	r30, r2
    b006:	20 81       	ld	r18, Z
    b008:	40 e0       	ldi	r20, 0x00	; 0
    b00a:	60 ee       	ldi	r22, 0xE0	; 224
    b00c:	8c c0       	rjmp	.+280    	; 0xb126 <animate_enemies+0x21a>
			}
			else if (LBCollides(game.player.shared.x,game.player.shared.y, game.player.width*8, game.player.height*8,
    b00e:	c7 01       	movw	r24, r14
    b010:	b6 01       	movw	r22, r12
    b012:	0e 94 30 66 	call	0xcc60	; 0xcc60 <__fixunssfsi>
    b016:	69 83       	std	Y+1, r22	; 0x01
    b018:	7a 83       	std	Y+2, r23	; 0x02
    b01a:	8b 83       	std	Y+3, r24	; 0x03
    b01c:	9c 83       	std	Y+4, r25	; 0x04
    b01e:	c3 01       	movw	r24, r6
    b020:	b2 01       	movw	r22, r4
    b022:	0e 94 30 66 	call	0xcc60	; 0xcc60 <__fixunssfsi>
    b026:	6d 83       	std	Y+5, r22	; 0x05
    b028:	7e 83       	std	Y+6, r23	; 0x06
    b02a:	8f 83       	std	Y+7, r24	; 0x07
    b02c:	98 87       	std	Y+8, r25	; 0x08
    b02e:	20 91 d8 0d 	lds	r18, 0x0DD8
    b032:	22 0f       	add	r18, r18
    b034:	22 0f       	add	r18, r18
    b036:	22 0f       	add	r18, r18
    b038:	40 91 d7 0d 	lds	r20, 0x0DD7
    b03c:	44 0f       	add	r20, r20
    b03e:	44 0f       	add	r20, r20
    b040:	44 0f       	add	r20, r20
    b042:	60 91 cc 0d 	lds	r22, 0x0DCC
    b046:	70 91 cd 0d 	lds	r23, 0x0DCD
    b04a:	80 91 ce 0d 	lds	r24, 0x0DCE
    b04e:	90 91 cf 0d 	lds	r25, 0x0DCF
    b052:	29 87       	std	Y+9, r18	; 0x09
    b054:	4a 87       	std	Y+10, r20	; 0x0a
    b056:	0e 94 30 66 	call	0xcc60	; 0xcc60 <__fixunssfsi>
    b05a:	2b 01       	movw	r4, r22
    b05c:	3c 01       	movw	r6, r24
    b05e:	60 91 c8 0d 	lds	r22, 0x0DC8
    b062:	70 91 c9 0d 	lds	r23, 0x0DC9
    b066:	80 91 ca 0d 	lds	r24, 0x0DCA
    b06a:	90 91 cb 0d 	lds	r25, 0x0DCB
    b06e:	0e 94 30 66 	call	0xcc60	; 0xcc60 <__fixunssfsi>
    b072:	dc 01       	movw	r26, r24
    b074:	cb 01       	movw	r24, r22
    b076:	28 e0       	ldi	r18, 0x08	; 8
    b078:	a2 2e       	mov	r10, r18
    b07a:	38 e0       	ldi	r19, 0x08	; 8
    b07c:	c3 2e       	mov	r12, r19
    b07e:	e9 80       	ldd	r14, Y+1	; 0x01
    b080:	fa 80       	ldd	r15, Y+2	; 0x02
    b082:	0d 81       	ldd	r16, Y+5	; 0x05
    b084:	1e 81       	ldd	r17, Y+6	; 0x06
    b086:	29 85       	ldd	r18, Y+9	; 0x09
    b088:	4a 85       	ldd	r20, Y+10	; 0x0a
    b08a:	b2 01       	movw	r22, r4
    b08c:	0e 94 79 48 	call	0x90f2	; 0x90f2 <LBCollides>
    b090:	88 23       	and	r24, r24
    b092:	79 f0       	breq	.+30     	; 0xb0b2 <animate_enemies+0x1a6>
							game.enemies[i].shared.x, game.enemies[i].shared.y, 8, 8
						) && !(game.player.flags & EXPLODING)
    b094:	80 91 d4 0d 	lds	r24, 0x0DD4
    b098:	84 fd       	sbrc	r24, 4
    b09a:	0b c0       	rjmp	.+22     	; 0xb0b2 <animate_enemies+0x1a6>
			)
			{
				SFX_PLAYER_EXPLODE;
    b09c:	41 e0       	ldi	r20, 0x01	; 1
    b09e:	6f ef       	ldi	r22, 0xFF	; 255
    b0a0:	85 e0       	ldi	r24, 0x05	; 5
    b0a2:	0e 94 dc 3b 	call	0x77b8	; 0x77b8 <TriggerFx>
				game.player.shield = 0;
    b0a6:	10 92 d9 0d 	sts	0x0DD9, r1
				game.player.flags = EXPLODING;
    b0aa:	80 e1       	ldi	r24, 0x10	; 16
    b0ac:	80 93 d4 0d 	sts	0x0DD4, r24
				return;
    b0b0:	57 c0       	rjmp	.+174    	; 0xb160 <animate_enemies+0x254>
			}
			else
			{
				animate_sprite(&game.enemies[i].shared, slot, game.enemies[i].width, game.enemies[i].height);
    b0b2:	eb 85       	ldd	r30, Y+11	; 0x0b
    b0b4:	fc 85       	ldd	r31, Y+12	; 0x0c
    b0b6:	20 81       	ld	r18, Z
    b0b8:	f1 01       	movw	r30, r2
    b0ba:	40 81       	ld	r20, Z
    b0bc:	6b 2d       	mov	r22, r11
    b0be:	c4 01       	movw	r24, r8
    b0c0:	0e 94 51 55 	call	0xaaa2	; 0xaaa2 <animate_sprite>
    b0c4:	33 c0       	rjmp	.+102    	; 0xb12c <animate_enemies+0x220>
			}
		}
		else if (game.enemies[i].flags & EXPLODING)
    b0c6:	80 81       	ld	r24, Z
    b0c8:	84 ff       	sbrs	r24, 4
    b0ca:	30 c0       	rjmp	.+96     	; 0xb12c <animate_enemies+0x220>
		{
			LBMoveSprite(slot, game.enemies[i].shared.x - game.camera_x, game.enemies[i].shared.y - game.camera_y, game.enemies[i].width, game.enemies[i].height);
    b0cc:	60 91 ac 0d 	lds	r22, 0x0DAC
    b0d0:	70 91 ad 0d 	lds	r23, 0x0DAD
    b0d4:	80 e0       	ldi	r24, 0x00	; 0
    b0d6:	90 e0       	ldi	r25, 0x00	; 0
    b0d8:	0e 94 5c 66 	call	0xccb8	; 0xccb8 <__floatunsisf>
    b0dc:	9b 01       	movw	r18, r22
    b0de:	ac 01       	movw	r20, r24
    b0e0:	f4 01       	movw	r30, r8
    b0e2:	60 85       	ldd	r22, Z+8	; 0x08
    b0e4:	71 85       	ldd	r23, Z+9	; 0x09
    b0e6:	82 85       	ldd	r24, Z+10	; 0x0a
    b0e8:	93 85       	ldd	r25, Z+11	; 0x0b
    b0ea:	0e 94 c7 65 	call	0xcb8e	; 0xcb8e <__subsf3>
    b0ee:	0e 94 30 66 	call	0xcc60	; 0xcc60 <__fixunssfsi>
    b0f2:	16 2f       	mov	r17, r22
    b0f4:	60 91 aa 0d 	lds	r22, 0x0DAA
    b0f8:	70 91 ab 0d 	lds	r23, 0x0DAB
    b0fc:	80 e0       	ldi	r24, 0x00	; 0
    b0fe:	90 e0       	ldi	r25, 0x00	; 0
    b100:	0e 94 5c 66 	call	0xccb8	; 0xccb8 <__floatunsisf>
    b104:	9b 01       	movw	r18, r22
    b106:	ac 01       	movw	r20, r24
    b108:	f4 01       	movw	r30, r8
    b10a:	64 81       	ldd	r22, Z+4	; 0x04
    b10c:	75 81       	ldd	r23, Z+5	; 0x05
    b10e:	86 81       	ldd	r24, Z+6	; 0x06
    b110:	97 81       	ldd	r25, Z+7	; 0x07
    b112:	0e 94 c7 65 	call	0xcb8e	; 0xcb8e <__subsf3>
    b116:	0e 94 30 66 	call	0xcc60	; 0xcc60 <__fixunssfsi>
    b11a:	eb 85       	ldd	r30, Y+11	; 0x0b
    b11c:	fc 85       	ldd	r31, Y+12	; 0x0c
    b11e:	00 81       	ld	r16, Z
    b120:	f1 01       	movw	r30, r2
    b122:	20 81       	ld	r18, Z
    b124:	41 2f       	mov	r20, r17
    b126:	8b 2d       	mov	r24, r11
    b128:	0e 94 16 49 	call	0x922c	; 0x922c <LBMoveSprite>
		}
		slot +=  game.enemies[i].width * game.enemies[i].height;
    b12c:	eb 85       	ldd	r30, Y+11	; 0x0b
    b12e:	fc 85       	ldd	r31, Y+12	; 0x0c
    b130:	90 81       	ld	r25, Z
    b132:	f1 01       	movw	r30, r2
    b134:	80 81       	ld	r24, Z
    b136:	98 9f       	mul	r25, r24
    b138:	b0 0c       	add	r11, r0
    b13a:	11 24       	eor	r1, r1
    b13c:	f2 e4       	ldi	r31, 0x42	; 66
    b13e:	2f 0e       	add	r2, r31
    b140:	31 1c       	adc	r3, r1
    b142:	8b 85       	ldd	r24, Y+11	; 0x0b
    b144:	9c 85       	ldd	r25, Y+12	; 0x0c
    b146:	8e 5b       	subi	r24, 0xBE	; 190
    b148:	9f 4f       	sbci	r25, 0xFF	; 255
    b14a:	9c 87       	std	Y+12, r25	; 0x0c
    b14c:	8b 87       	std	Y+11, r24	; 0x0b
    b14e:	92 e4       	ldi	r25, 0x42	; 66
    b150:	89 0e       	add	r8, r25
    b152:	91 1c       	adc	r9, r1

void animate_enemies()
{
	u8 slot = ENEMY_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    b154:	eb 85       	ldd	r30, Y+11	; 0x0b
    b156:	fc 85       	ldd	r31, Y+12	; 0x0c
    b158:	ed 5a       	subi	r30, 0xAD	; 173
    b15a:	ff 40       	sbci	r31, 0x0F	; 15
    b15c:	09 f0       	breq	.+2      	; 0xb160 <animate_enemies+0x254>
    b15e:	fe ce       	rjmp	.-516    	; 0xaf5c <animate_enemies+0x50>
		{
			LBMoveSprite(slot, game.enemies[i].shared.x - game.camera_x, game.enemies[i].shared.y - game.camera_y, game.enemies[i].width, game.enemies[i].height);
		}
		slot +=  game.enemies[i].width * game.enemies[i].height;
	}
}
    b160:	2c 96       	adiw	r28, 0x0c	; 12
    b162:	0f b6       	in	r0, 0x3f	; 63
    b164:	f8 94       	cli
    b166:	de bf       	out	0x3e, r29	; 62
    b168:	0f be       	out	0x3f, r0	; 63
    b16a:	cd bf       	out	0x3d, r28	; 61
    b16c:	df 91       	pop	r29
    b16e:	cf 91       	pop	r28
    b170:	1f 91       	pop	r17
    b172:	0f 91       	pop	r16
    b174:	ff 90       	pop	r15
    b176:	ef 90       	pop	r14
    b178:	df 90       	pop	r13
    b17a:	cf 90       	pop	r12
    b17c:	bf 90       	pop	r11
    b17e:	af 90       	pop	r10
    b180:	9f 90       	pop	r9
    b182:	8f 90       	pop	r8
    b184:	7f 90       	pop	r7
    b186:	6f 90       	pop	r6
    b188:	5f 90       	pop	r5
    b18a:	4f 90       	pop	r4
    b18c:	3f 90       	pop	r3
    b18e:	2f 90       	pop	r2
    b190:	08 95       	ret

0000b192 <animate_enemy_shots>:

void animate_enemy_shots()
{
    b192:	2f 92       	push	r2
    b194:	3f 92       	push	r3
    b196:	4f 92       	push	r4
    b198:	5f 92       	push	r5
    b19a:	6f 92       	push	r6
    b19c:	7f 92       	push	r7
    b19e:	8f 92       	push	r8
    b1a0:	9f 92       	push	r9
    b1a2:	af 92       	push	r10
    b1a4:	bf 92       	push	r11
    b1a6:	cf 92       	push	r12
    b1a8:	df 92       	push	r13
    b1aa:	ef 92       	push	r14
    b1ac:	ff 92       	push	r15
    b1ae:	0f 93       	push	r16
    b1b0:	1f 93       	push	r17
    b1b2:	cf 93       	push	r28
    b1b4:	df 93       	push	r29
    b1b6:	cd b7       	in	r28, 0x3d	; 61
    b1b8:	de b7       	in	r29, 0x3e	; 62
    b1ba:	62 97       	sbiw	r28, 0x12	; 18
    b1bc:	0f b6       	in	r0, 0x3f	; 63
    b1be:	f8 94       	cli
    b1c0:	de bf       	out	0x3e, r29	; 62
    b1c2:	0f be       	out	0x3f, r0	; 63
    b1c4:	cd bf       	out	0x3d, r28	; 61
    b1c6:	49 e7       	ldi	r20, 0x79	; 121
    b1c8:	24 2e       	mov	r2, r20
    b1ca:	4e e0       	ldi	r20, 0x0E	; 14
    b1cc:	34 2e       	mov	r3, r20
    b1ce:	58 e6       	ldi	r21, 0x68	; 104
    b1d0:	85 2e       	mov	r8, r21
    b1d2:	5e e0       	ldi	r21, 0x0E	; 14
    b1d4:	95 2e       	mov	r9, r21
	u8 slot = ENEMY_SHOT_SLOT;
    b1d6:	6e e0       	ldi	r22, 0x0E	; 14
    b1d8:	b6 2e       	mov	r11, r22
    b1da:	f1 01       	movw	r30, r2
    b1dc:	32 97       	sbiw	r30, 0x02	; 2
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
		{
			if (game.enemies[i].shot[j].shot_type == BASIC_ENEMY_SHOT)
    b1de:	80 81       	ld	r24, Z
    b1e0:	81 30       	cpi	r24, 0x01	; 1
    b1e2:	09 f0       	breq	.+2      	; 0xb1e6 <animate_enemy_shots+0x54>
    b1e4:	f0 c0       	rjmp	.+480    	; 0xb3c6 <animate_enemy_shots+0x234>
			{
				if (game.enemies[i].shot[j].active)
    b1e6:	d1 01       	movw	r26, r2
    b1e8:	8c 91       	ld	r24, X
    b1ea:	88 23       	and	r24, r24
    b1ec:	09 f4       	brne	.+2      	; 0xb1f0 <animate_enemy_shots+0x5e>
    b1ee:	eb c0       	rjmp	.+470    	; 0xb3c6 <animate_enemy_shots+0x234>
				{
					if (game.enemies[i].shot[j].shared.x < game.camera_x || game.enemies[i].shot[j].shared.x > game.camera_x + CAMERA_WIDTH*8 ||
    b1f0:	f4 01       	movw	r30, r8
    b1f2:	c4 80       	ldd	r12, Z+4	; 0x04
    b1f4:	d5 80       	ldd	r13, Z+5	; 0x05
    b1f6:	e6 80       	ldd	r14, Z+6	; 0x06
    b1f8:	f7 80       	ldd	r15, Z+7	; 0x07
    b1fa:	60 90 aa 0d 	lds	r6, 0x0DAA
    b1fe:	70 90 ab 0d 	lds	r7, 0x0DAB
    b202:	b3 01       	movw	r22, r6
    b204:	80 e0       	ldi	r24, 0x00	; 0
    b206:	90 e0       	ldi	r25, 0x00	; 0
    b208:	0e 94 5c 66 	call	0xccb8	; 0xccb8 <__floatunsisf>
    b20c:	9b 01       	movw	r18, r22
    b20e:	ac 01       	movw	r20, r24
    b210:	c7 01       	movw	r24, r14
    b212:	b6 01       	movw	r22, r12
    b214:	0e 94 2c 66 	call	0xcc58	; 0xcc58 <__cmpsf2>
    b218:	87 ff       	sbrs	r24, 7
    b21a:	03 c0       	rjmp	.+6      	; 0xb222 <animate_enemy_shots+0x90>
					   collision_detect_level(&game.enemies[i].shot[j].shared, 1, 1))
					{
						game.enemies[i].shot[j].active = 0;
    b21c:	d1 01       	movw	r26, r2
    b21e:	1c 92       	st	X, r1
    b220:	86 c0       	rjmp	.+268    	; 0xb32e <animate_enemy_shots+0x19c>
		{
			if (game.enemies[i].shot[j].shot_type == BASIC_ENEMY_SHOT)
			{
				if (game.enemies[i].shot[j].active)
				{
					if (game.enemies[i].shot[j].shared.x < game.camera_x || game.enemies[i].shot[j].shared.x > game.camera_x + CAMERA_WIDTH*8 ||
    b222:	b3 01       	movw	r22, r6
    b224:	60 52       	subi	r22, 0x20	; 32
    b226:	7f 4f       	sbci	r23, 0xFF	; 255
    b228:	80 e0       	ldi	r24, 0x00	; 0
    b22a:	90 e0       	ldi	r25, 0x00	; 0
    b22c:	0e 94 5c 66 	call	0xccb8	; 0xccb8 <__floatunsisf>
    b230:	9b 01       	movw	r18, r22
    b232:	ac 01       	movw	r20, r24
    b234:	c7 01       	movw	r24, r14
    b236:	b6 01       	movw	r22, r12
    b238:	0e 94 0e 67 	call	0xce1c	; 0xce1c <__gesf2>
    b23c:	18 16       	cp	r1, r24
    b23e:	74 f3       	brlt	.-36     	; 0xb21c <animate_enemy_shots+0x8a>
					   collision_detect_level(&game.enemies[i].shot[j].shared, 1, 1))
    b240:	41 e0       	ldi	r20, 0x01	; 1
    b242:	61 e0       	ldi	r22, 0x01	; 1
    b244:	c4 01       	movw	r24, r8
    b246:	0e 94 32 50 	call	0xa064	; 0xa064 <collision_detect_level>
		{
			if (game.enemies[i].shot[j].shot_type == BASIC_ENEMY_SHOT)
			{
				if (game.enemies[i].shot[j].active)
				{
					if (game.enemies[i].shot[j].shared.x < game.camera_x || game.enemies[i].shot[j].shared.x > game.camera_x + CAMERA_WIDTH*8 ||
    b24a:	81 11       	cpse	r24, r1
    b24c:	e7 cf       	rjmp	.-50     	; 0xb21c <animate_enemy_shots+0x8a>
					{
						game.enemies[i].shot[j].active = 0;
						LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
					}
					else if (LBCollides(game.player.shared.x,game.player.shared.y, game.player.width*8, game.player.height*8,
							game.enemies[i].shot[j].shared.x, game.enemies[i].shot[j].shared.y, 8, 8
    b24e:	f4 01       	movw	r30, r8
    b250:	40 84       	ldd	r4, Z+8	; 0x08
    b252:	51 84       	ldd	r5, Z+9	; 0x09
    b254:	62 84       	ldd	r6, Z+10	; 0x0a
    b256:	73 84       	ldd	r7, Z+11	; 0x0b
    b258:	84 81       	ldd	r24, Z+4	; 0x04
    b25a:	95 81       	ldd	r25, Z+5	; 0x05
    b25c:	a6 81       	ldd	r26, Z+6	; 0x06
    b25e:	b7 81       	ldd	r27, Z+7	; 0x07
    b260:	89 83       	std	Y+1, r24	; 0x01
    b262:	9a 83       	std	Y+2, r25	; 0x02
    b264:	ab 83       	std	Y+3, r26	; 0x03
    b266:	bc 83       	std	Y+4, r27	; 0x04
					   collision_detect_level(&game.enemies[i].shot[j].shared, 1, 1))
					{
						game.enemies[i].shot[j].active = 0;
						LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
					}
					else if (LBCollides(game.player.shared.x,game.player.shared.y, game.player.width*8, game.player.height*8,
    b268:	c3 01       	movw	r24, r6
    b26a:	b2 01       	movw	r22, r4
    b26c:	0e 94 30 66 	call	0xcc60	; 0xcc60 <__fixunssfsi>
    b270:	6d 83       	std	Y+5, r22	; 0x05
    b272:	7e 83       	std	Y+6, r23	; 0x06
    b274:	8f 83       	std	Y+7, r24	; 0x07
    b276:	98 87       	std	Y+8, r25	; 0x08
    b278:	69 81       	ldd	r22, Y+1	; 0x01
    b27a:	7a 81       	ldd	r23, Y+2	; 0x02
    b27c:	8b 81       	ldd	r24, Y+3	; 0x03
    b27e:	9c 81       	ldd	r25, Y+4	; 0x04
    b280:	0e 94 30 66 	call	0xcc60	; 0xcc60 <__fixunssfsi>
    b284:	69 87       	std	Y+9, r22	; 0x09
    b286:	7a 87       	std	Y+10, r23	; 0x0a
    b288:	8b 87       	std	Y+11, r24	; 0x0b
    b28a:	9c 87       	std	Y+12, r25	; 0x0c
    b28c:	20 91 d8 0d 	lds	r18, 0x0DD8
    b290:	22 0f       	add	r18, r18
    b292:	22 0f       	add	r18, r18
    b294:	22 0f       	add	r18, r18
    b296:	40 91 d7 0d 	lds	r20, 0x0DD7
    b29a:	44 0f       	add	r20, r20
    b29c:	44 0f       	add	r20, r20
    b29e:	44 0f       	add	r20, r20
    b2a0:	60 91 cc 0d 	lds	r22, 0x0DCC
    b2a4:	70 91 cd 0d 	lds	r23, 0x0DCD
    b2a8:	80 91 ce 0d 	lds	r24, 0x0DCE
    b2ac:	90 91 cf 0d 	lds	r25, 0x0DCF
    b2b0:	29 8b       	std	Y+17, r18	; 0x11
    b2b2:	4a 8b       	std	Y+18, r20	; 0x12
    b2b4:	0e 94 30 66 	call	0xcc60	; 0xcc60 <__fixunssfsi>
    b2b8:	6d 87       	std	Y+13, r22	; 0x0d
    b2ba:	7e 87       	std	Y+14, r23	; 0x0e
    b2bc:	8f 87       	std	Y+15, r24	; 0x0f
    b2be:	98 8b       	std	Y+16, r25	; 0x10
    b2c0:	60 91 c8 0d 	lds	r22, 0x0DC8
    b2c4:	70 91 c9 0d 	lds	r23, 0x0DC9
    b2c8:	80 91 ca 0d 	lds	r24, 0x0DCA
    b2cc:	90 91 cb 0d 	lds	r25, 0x0DCB
    b2d0:	0e 94 30 66 	call	0xcc60	; 0xcc60 <__fixunssfsi>
    b2d4:	dc 01       	movw	r26, r24
    b2d6:	cb 01       	movw	r24, r22
    b2d8:	28 e0       	ldi	r18, 0x08	; 8
    b2da:	a2 2e       	mov	r10, r18
    b2dc:	38 e0       	ldi	r19, 0x08	; 8
    b2de:	c3 2e       	mov	r12, r19
    b2e0:	ed 80       	ldd	r14, Y+5	; 0x05
    b2e2:	fe 80       	ldd	r15, Y+6	; 0x06
    b2e4:	09 85       	ldd	r16, Y+9	; 0x09
    b2e6:	1a 85       	ldd	r17, Y+10	; 0x0a
    b2e8:	29 89       	ldd	r18, Y+17	; 0x11
    b2ea:	4a 89       	ldd	r20, Y+18	; 0x12
    b2ec:	6d 85       	ldd	r22, Y+13	; 0x0d
    b2ee:	7e 85       	ldd	r23, Y+14	; 0x0e
    b2f0:	0e 94 79 48 	call	0x90f2	; 0x90f2 <LBCollides>
    b2f4:	88 23       	and	r24, r24
    b2f6:	01 f1       	breq	.+64     	; 0xb338 <animate_enemy_shots+0x1a6>
							game.enemies[i].shot[j].shared.x, game.enemies[i].shot[j].shared.y, 8, 8
						)
					)
					{
						SFX_HIT;
    b2f8:	41 e0       	ldi	r20, 0x01	; 1
    b2fa:	6f ef       	ldi	r22, 0xFF	; 255
    b2fc:	84 e0       	ldi	r24, 0x04	; 4
    b2fe:	0e 94 dc 3b 	call	0x77b8	; 0x77b8 <TriggerFx>
						game.player.shield -= game.enemies[i].shot[j].hit_count;
    b302:	80 91 d9 0d 	lds	r24, 0x0DD9
    b306:	f1 01       	movw	r30, r2
    b308:	31 97       	sbiw	r30, 0x01	; 1
    b30a:	90 81       	ld	r25, Z
    b30c:	89 1b       	sub	r24, r25
    b30e:	80 93 d9 0d 	sts	0x0DD9, r24
						if (game.player.shield <= 0)
    b312:	18 16       	cp	r1, r24
    b314:	54 f0       	brlt	.+20     	; 0xb32a <animate_enemy_shots+0x198>
						{
							SFX_PLAYER_EXPLODE;
    b316:	41 e0       	ldi	r20, 0x01	; 1
    b318:	6f ef       	ldi	r22, 0xFF	; 255
    b31a:	85 e0       	ldi	r24, 0x05	; 5
    b31c:	0e 94 dc 3b 	call	0x77b8	; 0x77b8 <TriggerFx>
							game.player.shield = 0;
    b320:	10 92 d9 0d 	sts	0x0DD9, r1
							game.player.flags = EXPLODING;
    b324:	b0 e1       	ldi	r27, 0x10	; 16
    b326:	b0 93 d4 0d 	sts	0x0DD4, r27
						}
						game.enemies[i].shot[j].active = 0;
    b32a:	f1 01       	movw	r30, r2
    b32c:	10 82       	st	Z, r1
						LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
    b32e:	01 e0       	ldi	r16, 0x01	; 1
    b330:	21 e0       	ldi	r18, 0x01	; 1
    b332:	40 e0       	ldi	r20, 0x00	; 0
    b334:	60 ee       	ldi	r22, 0xE0	; 224
    b336:	44 c0       	rjmp	.+136    	; 0xb3c0 <animate_enemy_shots+0x22e>
					}
					else
					{
						game.enemies[i].shot[j].shared.x += game.enemies[i].shot[j].shared.vx*FRAME_TIME;
    b338:	d4 01       	movw	r26, r8
    b33a:	1c 96       	adiw	r26, 0x0c	; 12
    b33c:	6d 91       	ld	r22, X+
    b33e:	7c 91       	ld	r23, X
    b340:	1d 97       	sbiw	r26, 0x0d	; 13
    b342:	88 27       	eor	r24, r24
    b344:	77 fd       	sbrc	r23, 7
    b346:	80 95       	com	r24
    b348:	98 2f       	mov	r25, r24
    b34a:	0e 94 5e 66 	call	0xccbc	; 0xccbc <__floatsisf>
    b34e:	29 e8       	ldi	r18, 0x89	; 137
    b350:	38 e8       	ldi	r19, 0x88	; 136
    b352:	48 e8       	ldi	r20, 0x88	; 136
    b354:	5c e3       	ldi	r21, 0x3C	; 60
    b356:	0e 94 12 67 	call	0xce24	; 0xce24 <__mulsf3>
    b35a:	9b 01       	movw	r18, r22
    b35c:	ac 01       	movw	r20, r24
    b35e:	69 81       	ldd	r22, Y+1	; 0x01
    b360:	7a 81       	ldd	r23, Y+2	; 0x02
    b362:	8b 81       	ldd	r24, Y+3	; 0x03
    b364:	9c 81       	ldd	r25, Y+4	; 0x04
    b366:	0e 94 c8 65 	call	0xcb90	; 0xcb90 <__addsf3>
    b36a:	6b 01       	movw	r12, r22
    b36c:	7c 01       	movw	r14, r24
    b36e:	f4 01       	movw	r30, r8
    b370:	64 83       	std	Z+4, r22	; 0x04
    b372:	75 83       	std	Z+5, r23	; 0x05
    b374:	86 83       	std	Z+6, r24	; 0x06
    b376:	97 83       	std	Z+7, r25	; 0x07
						LBMoveSprite(slot, game.enemies[i].shot[j].shared.x - game.camera_x, game.enemies[i].shot[j].shared.y - game.camera_y, 1, 1);
    b378:	60 91 ac 0d 	lds	r22, 0x0DAC
    b37c:	70 91 ad 0d 	lds	r23, 0x0DAD
    b380:	80 e0       	ldi	r24, 0x00	; 0
    b382:	90 e0       	ldi	r25, 0x00	; 0
    b384:	0e 94 5c 66 	call	0xccb8	; 0xccb8 <__floatunsisf>
    b388:	9b 01       	movw	r18, r22
    b38a:	ac 01       	movw	r20, r24
    b38c:	c3 01       	movw	r24, r6
    b38e:	b2 01       	movw	r22, r4
    b390:	0e 94 c7 65 	call	0xcb8e	; 0xcb8e <__subsf3>
    b394:	0e 94 30 66 	call	0xcc60	; 0xcc60 <__fixunssfsi>
    b398:	76 2e       	mov	r7, r22
    b39a:	60 91 aa 0d 	lds	r22, 0x0DAA
    b39e:	70 91 ab 0d 	lds	r23, 0x0DAB
    b3a2:	80 e0       	ldi	r24, 0x00	; 0
    b3a4:	90 e0       	ldi	r25, 0x00	; 0
    b3a6:	0e 94 5c 66 	call	0xccb8	; 0xccb8 <__floatunsisf>
    b3aa:	9b 01       	movw	r18, r22
    b3ac:	ac 01       	movw	r20, r24
    b3ae:	c7 01       	movw	r24, r14
    b3b0:	b6 01       	movw	r22, r12
    b3b2:	0e 94 c7 65 	call	0xcb8e	; 0xcb8e <__subsf3>
    b3b6:	0e 94 30 66 	call	0xcc60	; 0xcc60 <__fixunssfsi>
    b3ba:	01 e0       	ldi	r16, 0x01	; 1
    b3bc:	21 e0       	ldi	r18, 0x01	; 1
    b3be:	47 2d       	mov	r20, r7
    b3c0:	8b 2d       	mov	r24, r11
    b3c2:	0e 94 16 49 	call	0x922c	; 0x922c <LBMoveSprite>
					}
				}
			}
			slot += 1;
    b3c6:	b3 94       	inc	r11
    b3c8:	f2 e4       	ldi	r31, 0x42	; 66
    b3ca:	2f 0e       	add	r2, r31
    b3cc:	31 1c       	adc	r3, r1
    b3ce:	82 e4       	ldi	r24, 0x42	; 66
    b3d0:	88 0e       	add	r8, r24
    b3d2:	91 1c       	adc	r9, r1

void animate_enemy_shots()
{
	u8 slot = ENEMY_SHOT_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    b3d4:	93 e1       	ldi	r25, 0x13	; 19
    b3d6:	b9 12       	cpse	r11, r25
    b3d8:	00 cf       	rjmp	.-512    	; 0xb1da <animate_enemy_shots+0x48>
				}
			}
			slot += 1;
		}
	}
}
    b3da:	62 96       	adiw	r28, 0x12	; 18
    b3dc:	0f b6       	in	r0, 0x3f	; 63
    b3de:	f8 94       	cli
    b3e0:	de bf       	out	0x3e, r29	; 62
    b3e2:	0f be       	out	0x3f, r0	; 63
    b3e4:	cd bf       	out	0x3d, r28	; 61
    b3e6:	df 91       	pop	r29
    b3e8:	cf 91       	pop	r28
    b3ea:	1f 91       	pop	r17
    b3ec:	0f 91       	pop	r16
    b3ee:	ff 90       	pop	r15
    b3f0:	ef 90       	pop	r14
    b3f2:	df 90       	pop	r13
    b3f4:	cf 90       	pop	r12
    b3f6:	bf 90       	pop	r11
    b3f8:	af 90       	pop	r10
    b3fa:	9f 90       	pop	r9
    b3fc:	8f 90       	pop	r8
    b3fe:	7f 90       	pop	r7
    b400:	6f 90       	pop	r6
    b402:	5f 90       	pop	r5
    b404:	4f 90       	pop	r4
    b406:	3f 90       	pop	r3
    b408:	2f 90       	pop	r2
    b40a:	08 95       	ret

0000b40c <clear_sprites>:
	}
	
}

void clear_sprites(u8 from, u8 count)
{
    b40c:	ef 92       	push	r14
    b40e:	ff 92       	push	r15
    b410:	0f 93       	push	r16
    b412:	cf 93       	push	r28
	for(u8 i = from; i < from+count; i++)
    b414:	c8 2f       	mov	r28, r24
    b416:	e6 2e       	mov	r14, r22
    b418:	f1 2c       	mov	r15, r1
    b41a:	e8 0e       	add	r14, r24
    b41c:	f1 1c       	adc	r15, r1
    b41e:	8c 2f       	mov	r24, r28
    b420:	90 e0       	ldi	r25, 0x00	; 0
    b422:	8e 15       	cp	r24, r14
    b424:	9f 05       	cpc	r25, r15
    b426:	7c f4       	brge	.+30     	; 0xb446 <clear_sprites+0x3a>
	{
		LBMapSprite(i, map_none, 0);
    b428:	40 e0       	ldi	r20, 0x00	; 0
    b42a:	63 ee       	ldi	r22, 0xE3	; 227
    b42c:	7d e2       	ldi	r23, 0x2D	; 45
    b42e:	8c 2f       	mov	r24, r28
    b430:	0e 94 c4 48 	call	0x9188	; 0x9188 <LBMapSprite>
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
    b434:	01 e0       	ldi	r16, 0x01	; 1
    b436:	21 e0       	ldi	r18, 0x01	; 1
    b438:	40 e0       	ldi	r20, 0x00	; 0
    b43a:	60 ee       	ldi	r22, 0xE0	; 224
    b43c:	8c 2f       	mov	r24, r28
    b43e:	0e 94 16 49 	call	0x922c	; 0x922c <LBMoveSprite>
	
}

void clear_sprites(u8 from, u8 count)
{
	for(u8 i = from; i < from+count; i++)
    b442:	cf 5f       	subi	r28, 0xFF	; 255
    b444:	ec cf       	rjmp	.-40     	; 0xb41e <clear_sprites+0x12>
	{
		LBMapSprite(i, map_none, 0);
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
	}
}
    b446:	cf 91       	pop	r28
    b448:	0f 91       	pop	r16
    b44a:	ff 90       	pop	r15
    b44c:	ef 90       	pop	r14
    b44e:	08 95       	ret

0000b450 <fade_through>:
	EepromWriteBlock(block);
}

void fade_through()
{
	FadeOut(FRAMES_PER_FADE, true);
    b450:	61 e0       	ldi	r22, 0x01	; 1
    b452:	81 e0       	ldi	r24, 0x01	; 1
    b454:	0e 94 2d 47 	call	0x8e5a	; 0x8e5a <FadeOut>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    b458:	64 e1       	ldi	r22, 0x14	; 20
    b45a:	80 e0       	ldi	r24, 0x00	; 0
    b45c:	0e 94 06 5a 	call	0xb40c	; 0xb40c <clear_sprites>
	LBRotateSprites();
    b460:	0e 94 54 49 	call	0x92a8	; 0x92a8 <LBRotateSprites>
	ClearVram();
    b464:	0e 94 fd 37 	call	0x6ffa	; 0x6ffa <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    b468:	60 e0       	ldi	r22, 0x00	; 0
    b46a:	81 e0       	ldi	r24, 0x01	; 1
    b46c:	0c 94 21 47 	jmp	0x8e42	; 0x8e42 <FadeIn>

0000b470 <load_level>:
		game.level_height = 26;
	}
}

void load_level(u8 index, u8 drop_ship)
{	
    b470:	0f 93       	push	r16
    b472:	cf 93       	push	r28
    b474:	df 93       	push	r29
    b476:	c8 2f       	mov	r28, r24
    b478:	d6 2f       	mov	r29, r22
	u8 ship_x = (get_hero_spawn_x(index) - 2) * 8;
	u8 ship_y = 0;
	char ship_increment = 3;
	
	Screen.scrollX = 0;
    b47a:	10 92 b2 0c 	sts	0x0CB2, r1
	Screen.scrollY = 0;
    b47e:	10 92 b3 0c 	sts	0x0CB3, r1
	Screen.scrollHeight = 30;
    b482:	8e e1       	ldi	r24, 0x1E	; 30
    b484:	80 93 b4 0c 	sts	0x0CB4, r24
	Screen.overlayTileTable = tiles_data;
    b488:	86 e6       	ldi	r24, 0x66	; 102
    b48a:	9f e4       	ldi	r25, 0x4F	; 79
    b48c:	90 93 b1 0c 	sts	0x0CB1, r25
    b490:	80 93 b0 0c 	sts	0x0CB0, r24
	Screen.overlayHeight = 2;
    b494:	82 e0       	ldi	r24, 0x02	; 2
    b496:	80 93 af 0c 	sts	0x0CAF, r24
	clear_overlay(2);
    b49a:	0e 94 d1 4b 	call	0x97a2	; 0x97a2 <clear_overlay>
	game.current_level_index = index;
    b49e:	c0 93 b7 0d 	sts	0x0DB7, r28
	game.level_ended = 0;
    b4a2:	10 92 c3 0d 	sts	0x0DC3, r1
	game.joypadState.held = 0;
    b4a6:	10 92 9f 0f 	sts	0x0F9F, r1
    b4aa:	10 92 9e 0f 	sts	0x0F9E, r1
	game.joypadState.pressed = 0;
    b4ae:	10 92 9b 0f 	sts	0x0F9B, r1
    b4b2:	10 92 9a 0f 	sts	0x0F9A, r1
	game.joypadState.released = 0;
    b4b6:	10 92 9d 0f 	sts	0x0F9D, r1
    b4ba:	10 92 9c 0f 	sts	0x0F9C, r1
	switch (index)
    b4be:	8c 2f       	mov	r24, r28
    b4c0:	90 e0       	ldi	r25, 0x00	; 0
    b4c2:	8a 30       	cpi	r24, 0x0A	; 10
    b4c4:	91 05       	cpc	r25, r1
    b4c6:	c0 f4       	brcc	.+48     	; 0xb4f8 <load_level+0x88>
    b4c8:	fc 01       	movw	r30, r24
    b4ca:	e8 5c       	subi	r30, 0xC8	; 200
    b4cc:	ff 4f       	sbci	r31, 0xFF	; 255
    b4ce:	0c 94 c1 65 	jmp	0xcb82	; 0xcb82 <__tablejump2__>
	{
		case 0: map_level_info((char*) map_level_0); break;
    b4d2:	86 ee       	ldi	r24, 0xE6	; 230
    b4d4:	98 e4       	ldi	r25, 0x48	; 72
    b4d6:	0e c0       	rjmp	.+28     	; 0xb4f4 <load_level+0x84>
		case 1: map_level_info((char*) map_level_space); break;
		case 2: map_level_info((char*) map_level_1); break;
    b4d8:	86 e6       	ldi	r24, 0x66	; 102
    b4da:	92 e4       	ldi	r25, 0x42	; 66
    b4dc:	0b c0       	rjmp	.+22     	; 0xb4f4 <load_level+0x84>
		case 3: map_level_info((char*) map_level_space); break;
		case 4: map_level_info((char*) map_level_2); break;
    b4de:	86 ee       	ldi	r24, 0xE6	; 230
    b4e0:	9b e3       	ldi	r25, 0x3B	; 59
    b4e2:	08 c0       	rjmp	.+16     	; 0xb4f4 <load_level+0x84>
		case 5: map_level_info((char*) map_level_space); break;
		case 6: map_level_info((char*) map_level_3); break;
    b4e4:	86 e6       	ldi	r24, 0x66	; 102
    b4e6:	95 e3       	ldi	r25, 0x35	; 53
    b4e8:	05 c0       	rjmp	.+10     	; 0xb4f4 <load_level+0x84>
		case 7: map_level_info((char*) map_level_space); break;
		case 8: map_level_info((char*) map_level_4); break;
    b4ea:	86 ee       	ldi	r24, 0xE6	; 230
    b4ec:	9e e2       	ldi	r25, 0x2E	; 46
    b4ee:	02 c0       	rjmp	.+4      	; 0xb4f4 <load_level+0x84>
		case 9: map_level_info((char*) map_level_space); break;
    b4f0:	86 ee       	ldi	r24, 0xE6	; 230
    b4f2:	9d e2       	ldi	r25, 0x2D	; 45
    b4f4:	0e 94 20 4e 	call	0x9c40	; 0x9c40 <map_level_info>
	}
	game.column_count = 0;
    b4f8:	10 92 b3 0d 	sts	0x0DB3, r1
    b4fc:	10 92 b2 0d 	sts	0x0DB2, r1
	game.camera_x = get_camera_x(index);
    b500:	10 92 ab 0d 	sts	0x0DAB, r1
    b504:	10 92 aa 0d 	sts	0x0DAA, r1
	game.camera_y = get_camera_y(index);
    b508:	10 92 ad 0d 	sts	0x0DAD, r1
    b50c:	10 92 ac 0d 	sts	0x0DAC, r1
	game.player.shared.x = get_hero_spawn_x(index)*8;
    b510:	80 e0       	ldi	r24, 0x00	; 0
    b512:	90 e0       	ldi	r25, 0x00	; 0
    b514:	a0 ec       	ldi	r26, 0xC0	; 192
    b516:	b1 e4       	ldi	r27, 0x41	; 65
    b518:	80 93 c8 0d 	sts	0x0DC8, r24
    b51c:	90 93 c9 0d 	sts	0x0DC9, r25
    b520:	a0 93 ca 0d 	sts	0x0DCA, r26
    b524:	b0 93 cb 0d 	sts	0x0DCB, r27
	game.player.shared.y = get_hero_spawn_y(index)*8;
    b528:	80 e0       	ldi	r24, 0x00	; 0
    b52a:	90 e0       	ldi	r25, 0x00	; 0
    b52c:	a8 e2       	ldi	r26, 0x28	; 40
    b52e:	b3 e4       	ldi	r27, 0x43	; 67
    b530:	80 93 cc 0d 	sts	0x0DCC, r24
    b534:	90 93 cd 0d 	sts	0x0DCD, r25
    b538:	a0 93 ce 0d 	sts	0x0DCE, r26
    b53c:	b0 93 cf 0d 	sts	0x0DCF, r27
	game.camera_x *= 8;
	game.camera_y *= 8;
	game.scroll_src_x = game.camera_x / 8 + CAMERA_WIDTH + 1;
    b540:	8d e1       	ldi	r24, 0x1D	; 29
    b542:	90 e0       	ldi	r25, 0x00	; 0
    b544:	90 93 a7 0d 	sts	0x0DA7, r25
    b548:	80 93 a6 0d 	sts	0x0DA6, r24
    game.scroll_dest_x = game.camera_x / 8 + CAMERA_WIDTH + 1;
    b54c:	80 93 bf 0d 	sts	0x0DBF, r24
	game.scroll_src_y = game.camera_y / 8 + CAMERA_HEIGHT + 1;
    b550:	8b e1       	ldi	r24, 0x1B	; 27
    b552:	90 e0       	ldi	r25, 0x00	; 0
    b554:	90 93 a9 0d 	sts	0x0DA9, r25
    b558:	80 93 a8 0d 	sts	0x0DA8, r24
    game.scroll_dest_y =  game.camera_y / 8 + CAMERA_HEIGHT + 1;
    b55c:	80 93 c0 0d 	sts	0x0DC0, r24
	game.scroll_x = 0;
    b560:	10 92 bd 0d 	sts	0x0DBD, r1
	game.scroll_y = 0;
    b564:	10 92 be 0d 	sts	0x0DBE, r1
	game.spawn_rate = BASE_SPAWN_RATE;
    b568:	8a e0       	ldi	r24, 0x0A	; 10
    b56a:	80 93 c2 0d 	sts	0x0DC2, r24
	render_camera_view();
    b56e:	0e 94 32 4c 	call	0x9864	; 0x9864 <render_camera_view>
	LBPrint(0, VRAM_TILES_V-1, (char*) strLives);
    b572:	46 e5       	ldi	r20, 0x56	; 86
    b574:	5b e0       	ldi	r21, 0x0B	; 11
    b576:	6f e1       	ldi	r22, 0x1F	; 31
    b578:	80 e0       	ldi	r24, 0x00	; 0
    b57a:	0e 94 f3 47 	call	0x8fe6	; 0x8fe6 <LBPrint>
	LBPrint(17, VRAM_TILES_V-1, (char*) strScore);
    b57e:	45 e6       	ldi	r20, 0x65	; 101
    b580:	5b e0       	ldi	r21, 0x0B	; 11
    b582:	6f e1       	ldi	r22, 0x1F	; 31
    b584:	81 e1       	ldi	r24, 0x11	; 17
    b586:	0e 94 f3 47 	call	0x8fe6	; 0x8fe6 <LBPrint>
	LBPrint(0, VRAM_TILES_V-2, (char*) strShield);
    b58a:	4d e5       	ldi	r20, 0x5D	; 93
    b58c:	5b e0       	ldi	r21, 0x0B	; 11
    b58e:	6e e1       	ldi	r22, 0x1E	; 30
    b590:	80 e0       	ldi	r24, 0x00	; 0
    b592:	0e 94 f3 47 	call	0x8fe6	; 0x8fe6 <LBPrint>
	LBPrint(18, VRAM_TILES_V-2, (char*) strTime);
    b596:	40 e5       	ldi	r20, 0x50	; 80
    b598:	5b e0       	ldi	r21, 0x0B	; 11
    b59a:	6e e1       	ldi	r22, 0x1E	; 30
    b59c:	82 e1       	ldi	r24, 0x12	; 18
    b59e:	0e 94 f3 47 	call	0x8fe6	; 0x8fe6 <LBPrint>
	LBPrintByte(9, VRAM_TILES_V-1, game.lives ,true);
    b5a2:	21 e0       	ldi	r18, 0x01	; 1
    b5a4:	40 91 b5 0d 	lds	r20, 0x0DB5
    b5a8:	6f e1       	ldi	r22, 0x1F	; 31
    b5aa:	89 e0       	ldi	r24, 0x09	; 9
    b5ac:	0e 94 0f 48 	call	0x901e	; 0x901e <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-1, game.score ,true);
    b5b0:	40 91 ae 0d 	lds	r20, 0x0DAE
    b5b4:	50 91 af 0d 	lds	r21, 0x0DAF
    b5b8:	21 e0       	ldi	r18, 0x01	; 1
    b5ba:	6f e1       	ldi	r22, 0x1F	; 31
    b5bc:	8b e1       	ldi	r24, 0x1B	; 27
    b5be:	0e 94 40 48 	call	0x9080	; 0x9080 <LBPrintInt>
	LBPrintByte(9, VRAM_TILES_V-2, game.player.shield ,true);
    b5c2:	21 e0       	ldi	r18, 0x01	; 1
    b5c4:	40 91 d9 0d 	lds	r20, 0x0DD9
    b5c8:	6e e1       	ldi	r22, 0x1E	; 30
    b5ca:	89 e0       	ldi	r24, 0x09	; 9
    b5cc:	0e 94 0f 48 	call	0x901e	; 0x901e <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-2, game.time ,true);
    b5d0:	40 91 b0 0d 	lds	r20, 0x0DB0
    b5d4:	50 91 b1 0d 	lds	r21, 0x0DB1
    b5d8:	21 e0       	ldi	r18, 0x01	; 1
    b5da:	6e e1       	ldi	r22, 0x1E	; 30
    b5dc:	8b e1       	ldi	r24, 0x1B	; 27
    b5de:	0e 94 40 48 	call	0x9080	; 0x9080 <LBPrintInt>
	
	
	if (!is_space() && drop_ship)
    b5e2:	0e 94 93 49 	call	0x9326	; 0x9326 <is_space>
    b5e6:	81 11       	cpse	r24, r1
    b5e8:	39 c0       	rjmp	.+114    	; 0xb65c <load_level+0x1ec>
    b5ea:	dd 23       	and	r29, r29
    b5ec:	b9 f1       	breq	.+110    	; 0xb65c <load_level+0x1ec>
	{
		map_ship();
    b5ee:	0e 94 0b 4e 	call	0x9c16	; 0x9c16 <map_ship>

void load_level(u8 index, u8 drop_ship)
{	
	u8 ship_x = (get_hero_spawn_x(index) - 2) * 8;
	u8 ship_y = 0;
	char ship_increment = 3;
    b5f2:	d3 e0       	ldi	r29, 0x03	; 3
}

void load_level(u8 index, u8 drop_ship)
{	
	u8 ship_x = (get_hero_spawn_x(index) - 2) * 8;
	u8 ship_y = 0;
    b5f4:	c0 e0       	ldi	r28, 0x00	; 0
	if (!is_space() && drop_ship)
	{
		map_ship();
		while (1)
		{
			WaitVsync(1);
    b5f6:	81 e0       	ldi	r24, 0x01	; 1
    b5f8:	90 e0       	ldi	r25, 0x00	; 0
    b5fa:	0e 94 c5 46 	call	0x8d8a	; 0x8d8a <WaitVsync>
			if (ship_y >= get_hero_spawn_y(index)*8)
    b5fe:	8c 2f       	mov	r24, r28
    b600:	90 e0       	ldi	r25, 0x00	; 0
    b602:	88 3a       	cpi	r24, 0xA8	; 168
    b604:	91 05       	cpc	r25, r1
    b606:	74 f0       	brlt	.+28     	; 0xb624 <load_level+0x1b4>
			{
				LBMapSprite(0, map_hero_idle, 0);
    b608:	40 e0       	ldi	r20, 0x00	; 0
    b60a:	67 eb       	ldi	r22, 0xB7	; 183
    b60c:	7d e2       	ldi	r23, 0x2D	; 45
    b60e:	80 e0       	ldi	r24, 0x00	; 0
    b610:	0e 94 c4 48 	call	0x9188	; 0x9188 <LBMapSprite>
				LBMoveSprite(0, get_hero_spawn_x(index)*8, get_hero_spawn_y(index)*8, 2, 3);
    b614:	03 e0       	ldi	r16, 0x03	; 3
    b616:	22 e0       	ldi	r18, 0x02	; 2
    b618:	48 ea       	ldi	r20, 0xA8	; 168
    b61a:	68 e1       	ldi	r22, 0x18	; 24
    b61c:	80 e0       	ldi	r24, 0x00	; 0
    b61e:	0e 94 16 49 	call	0x922c	; 0x922c <LBMoveSprite>
				ship_increment = -3;
    b622:	dd ef       	ldi	r29, 0xFD	; 253
			}
			LBMapSprite(6, LBGetNextFrame(&game.player.run), 0);
    b624:	80 e3       	ldi	r24, 0x30	; 48
    b626:	9e e0       	ldi	r25, 0x0E	; 14
    b628:	0e 94 62 47 	call	0x8ec4	; 0x8ec4 <LBGetNextFrame>
    b62c:	40 e0       	ldi	r20, 0x00	; 0
    b62e:	bc 01       	movw	r22, r24
    b630:	86 e0       	ldi	r24, 0x06	; 6
    b632:	0e 94 c4 48 	call	0x9188	; 0x9188 <LBMapSprite>
			LBMoveSprite(6, ship_x, ship_y, 4, 2);
    b636:	02 e0       	ldi	r16, 0x02	; 2
    b638:	24 e0       	ldi	r18, 0x04	; 4
    b63a:	4c 2f       	mov	r20, r28
    b63c:	68 e0       	ldi	r22, 0x08	; 8
    b63e:	86 e0       	ldi	r24, 0x06	; 6
    b640:	0e 94 16 49 	call	0x922c	; 0x922c <LBMoveSprite>
			ship_y += ship_increment;
    b644:	cd 0f       	add	r28, r29
			if (ship_y == 0)
    b646:	39 f4       	brne	.+14     	; 0xb656 <load_level+0x1e6>
			{
				clear_sprites(6, 8);
    b648:	68 e0       	ldi	r22, 0x08	; 8
    b64a:	86 e0       	ldi	r24, 0x06	; 6
				break;
			}
			LBRotateSprites();
		}
	}
}
    b64c:	df 91       	pop	r29
    b64e:	cf 91       	pop	r28
    b650:	0f 91       	pop	r16
			LBMapSprite(6, LBGetNextFrame(&game.player.run), 0);
			LBMoveSprite(6, ship_x, ship_y, 4, 2);
			ship_y += ship_increment;
			if (ship_y == 0)
			{
				clear_sprites(6, 8);
    b652:	0c 94 06 5a 	jmp	0xb40c	; 0xb40c <clear_sprites>
				break;
			}
			LBRotateSprites();
    b656:	0e 94 54 49 	call	0x92a8	; 0x92a8 <LBRotateSprites>
		}
    b65a:	cd cf       	rjmp	.-102    	; 0xb5f6 <load_level+0x186>
	}
}
    b65c:	df 91       	pop	r29
    b65e:	cf 91       	pop	r28
    b660:	0f 91       	pop	r16
    b662:	08 95       	ret

0000b664 <select_pressed>:
	StopSong();
	load_high_scores();
}

char select_pressed(JoyPadState* p)
{
    b664:	fc 01       	movw	r30, r24
    b666:	20 81       	ld	r18, Z
    b668:	31 81       	ldd	r19, Z+1	; 0x01
    b66a:	28 70       	andi	r18, 0x08	; 8
    b66c:	31 70       	andi	r19, 0x01	; 1
	return (p->pressed & BTN_A) || (p->pressed & BTN_START);
    b66e:	81 e0       	ldi	r24, 0x01	; 1
    b670:	23 2b       	or	r18, r19
    b672:	09 f4       	brne	.+2      	; 0xb676 <select_pressed+0x12>
    b674:	80 e0       	ldi	r24, 0x00	; 0
}
    b676:	08 95       	ret

0000b678 <stream_dialogue>:


void stream_dialogue(const char* dialogue, u8 y)
{
    b678:	ff 92       	push	r15
    b67a:	0f 93       	push	r16
    b67c:	1f 93       	push	r17
    b67e:	cf 93       	push	r28
    b680:	df 93       	push	r29
    b682:	ec 01       	movw	r28, r24
    b684:	16 2f       	mov	r17, r22
	u8 x, ln, c;
	
	while (pgm_read_byte(dialogue) != '#')
	{
		ln = strnlen_P(dialogue, 255);
		x = 14 - ln / 2;
    b686:	8e e0       	ldi	r24, 0x0E	; 14
    b688:	f8 2e       	mov	r15, r24

void stream_dialogue(const char* dialogue, u8 y)
{
	u8 x, ln, c;
	
	while (pgm_read_byte(dialogue) != '#')
    b68a:	fe 01       	movw	r30, r28
    b68c:	84 91       	lpm	r24, Z
    b68e:	83 32       	cpi	r24, 0x23	; 35
    b690:	21 f1       	breq	.+72     	; 0xb6da <stream_dialogue+0x62>
	{
		ln = strnlen_P(dialogue, 255);
    b692:	6f ef       	ldi	r22, 0xFF	; 255
    b694:	70 e0       	ldi	r23, 0x00	; 0
    b696:	ce 01       	movw	r24, r28
    b698:	0e 94 75 67 	call	0xceea	; 0xceea <strnlen_P>
		x = 14 - ln / 2;
    b69c:	86 95       	lsr	r24
    b69e:	0f 2d       	mov	r16, r15
    b6a0:	08 1b       	sub	r16, r24
    b6a2:	0c 1b       	sub	r16, r28
    b6a4:	8c 2f       	mov	r24, r28
    b6a6:	80 0f       	add	r24, r16
		while ((c = pgm_read_byte(dialogue++)))
    b6a8:	21 96       	adiw	r28, 0x01	; 1
    b6aa:	fe 01       	movw	r30, r28
    b6ac:	31 97       	sbiw	r30, 0x01	; 1
    b6ae:	44 91       	lpm	r20, Z
    b6b0:	44 23       	and	r20, r20
    b6b2:	89 f0       	breq	.+34     	; 0xb6d6 <stream_dialogue+0x5e>
		{
			LBPrintChar(x++, y, c);
    b6b4:	61 2f       	mov	r22, r17
    b6b6:	0e 94 d3 47 	call	0x8fa6	; 0x8fa6 <LBPrintChar>
			LBGetJoyPadState(&game.joypadState, 0);
    b6ba:	60 e0       	ldi	r22, 0x00	; 0
    b6bc:	8a e9       	ldi	r24, 0x9A	; 154
    b6be:	9f e0       	ldi	r25, 0x0F	; 15
    b6c0:	0e 94 88 47 	call	0x8f10	; 0x8f10 <LBGetJoyPadState>
			if (!(game.joypadState.held & BTN_B)) WaitUs(CHARACTER_DELAY_US);
    b6c4:	80 91 9e 0f 	lds	r24, 0x0F9E
    b6c8:	80 fd       	sbrc	r24, 0
    b6ca:	ec cf       	rjmp	.-40     	; 0xb6a4 <stream_dialogue+0x2c>
    b6cc:	80 e7       	ldi	r24, 0x70	; 112
    b6ce:	97 e1       	ldi	r25, 0x17	; 23
    b6d0:	0e 94 33 38 	call	0x7066	; 0x7066 <WaitUs>
    b6d4:	e7 cf       	rjmp	.-50     	; 0xb6a4 <stream_dialogue+0x2c>
		}
		y++;
    b6d6:	1f 5f       	subi	r17, 0xFF	; 255
    b6d8:	d8 cf       	rjmp	.-80     	; 0xb68a <stream_dialogue+0x12>
	}
}
    b6da:	df 91       	pop	r29
    b6dc:	cf 91       	pop	r28
    b6de:	1f 91       	pop	r17
    b6e0:	0f 91       	pop	r16
    b6e2:	ff 90       	pop	r15
    b6e4:	08 95       	ret

0000b6e6 <map_particles>:

void map_particles()
{
    b6e6:	cf 93       	push	r28
	for (u8 i = 9; i < 20; i++)
    b6e8:	c9 e0       	ldi	r28, 0x09	; 9
	{
		LBMapSprite(i, map_particle, 0);
    b6ea:	40 e0       	ldi	r20, 0x00	; 0
    b6ec:	67 ed       	ldi	r22, 0xD7	; 215
    b6ee:	7d e2       	ldi	r23, 0x2D	; 45
    b6f0:	8c 2f       	mov	r24, r28
    b6f2:	0e 94 c4 48 	call	0x9188	; 0x9188 <LBMapSprite>
	}
}

void map_particles()
{
	for (u8 i = 9; i < 20; i++)
    b6f6:	cf 5f       	subi	r28, 0xFF	; 255
    b6f8:	c4 31       	cpi	r28, 0x14	; 20
    b6fa:	b9 f7       	brne	.-18     	; 0xb6ea <map_particles+0x4>
	{
		LBMapSprite(i, map_particle, 0);
	}
}
    b6fc:	cf 91       	pop	r28
    b6fe:	08 95       	ret

0000b700 <place_particles>:

void place_particles()
{
    b700:	0f 93       	push	r16
    b702:	1f 93       	push	r17
    b704:	cf 93       	push	r28
    b706:	df 93       	push	r29
    b708:	1f 92       	push	r1
    b70a:	cd b7       	in	r28, 0x3d	; 61
    b70c:	de b7       	in	r29, 0x3e	; 62
	for (u8 i = 9; i < 20; i++)
    b70e:	19 e0       	ldi	r17, 0x09	; 9
	{
		LBMoveSprite(i, LBRandom(0, 224), LBRandom(0, 200), 1, 1);
    b710:	68 ec       	ldi	r22, 0xC8	; 200
    b712:	80 e0       	ldi	r24, 0x00	; 0
    b714:	0e 94 9f 48 	call	0x913e	; 0x913e <LBRandom>
    b718:	48 2f       	mov	r20, r24
    b71a:	60 ee       	ldi	r22, 0xE0	; 224
    b71c:	80 e0       	ldi	r24, 0x00	; 0
    b71e:	49 83       	std	Y+1, r20	; 0x01
    b720:	0e 94 9f 48 	call	0x913e	; 0x913e <LBRandom>
    b724:	68 2f       	mov	r22, r24
    b726:	01 e0       	ldi	r16, 0x01	; 1
    b728:	21 e0       	ldi	r18, 0x01	; 1
    b72a:	49 81       	ldd	r20, Y+1	; 0x01
    b72c:	81 2f       	mov	r24, r17
    b72e:	0e 94 16 49 	call	0x922c	; 0x922c <LBMoveSprite>
	}
}

void place_particles()
{
	for (u8 i = 9; i < 20; i++)
    b732:	1f 5f       	subi	r17, 0xFF	; 255
    b734:	14 31       	cpi	r17, 0x14	; 20
    b736:	61 f7       	brne	.-40     	; 0xb710 <place_particles+0x10>
	{
		LBMoveSprite(i, LBRandom(0, 224), LBRandom(0, 200), 1, 1);
	}
}
    b738:	0f 90       	pop	r0
    b73a:	df 91       	pop	r29
    b73c:	cf 91       	pop	r28
    b73e:	1f 91       	pop	r17
    b740:	0f 91       	pop	r16
    b742:	08 95       	ret

0000b744 <animate_particles>:

void animate_particles(char dy, u8 oy)
{
    b744:	ef 92       	push	r14
    b746:	ff 92       	push	r15
    b748:	0f 93       	push	r16
    b74a:	1f 93       	push	r17
    b74c:	cf 93       	push	r28
    b74e:	df 93       	push	r29
    b750:	d8 2f       	mov	r29, r24
    b752:	16 2f       	mov	r17, r22
    b754:	80 ed       	ldi	r24, 0xD0	; 208
    b756:	e8 2e       	mov	r14, r24
    b758:	8f e0       	ldi	r24, 0x0F	; 15
    b75a:	f8 2e       	mov	r15, r24
	for (u8 i = 9; i < 20; i++)
    b75c:	c9 e0       	ldi	r28, 0x09	; 9
	{
		LBMoveSprite(i, extendedSprites[i].x, extendedSprites[i].y+dy, 1, 1);
    b75e:	f7 01       	movw	r30, r14
    b760:	40 81       	ld	r20, Z
    b762:	4d 0f       	add	r20, r29
    b764:	01 e0       	ldi	r16, 0x01	; 1
    b766:	21 e0       	ldi	r18, 0x01	; 1
    b768:	31 97       	sbiw	r30, 0x01	; 1
    b76a:	60 81       	ld	r22, Z
    b76c:	8c 2f       	mov	r24, r28
    b76e:	0e 94 16 49 	call	0x922c	; 0x922c <LBMoveSprite>
		if (extendedSprites[i].y > 200)
    b772:	f7 01       	movw	r30, r14
    b774:	80 81       	ld	r24, Z
    b776:	89 3c       	cpi	r24, 0xC9	; 201
    b778:	50 f0       	brcs	.+20     	; 0xb78e <animate_particles+0x4a>
		{
			LBMoveSprite(i, LBRandom(0, 224), oy, 1, 1);
    b77a:	60 ee       	ldi	r22, 0xE0	; 224
    b77c:	80 e0       	ldi	r24, 0x00	; 0
    b77e:	0e 94 9f 48 	call	0x913e	; 0x913e <LBRandom>
    b782:	21 e0       	ldi	r18, 0x01	; 1
    b784:	41 2f       	mov	r20, r17
    b786:	68 2f       	mov	r22, r24
    b788:	8c 2f       	mov	r24, r28
    b78a:	0e 94 16 49 	call	0x922c	; 0x922c <LBMoveSprite>
	}
}

void animate_particles(char dy, u8 oy)
{
	for (u8 i = 9; i < 20; i++)
    b78e:	cf 5f       	subi	r28, 0xFF	; 255
    b790:	f4 e0       	ldi	r31, 0x04	; 4
    b792:	ef 0e       	add	r14, r31
    b794:	f1 1c       	adc	r15, r1
    b796:	c4 31       	cpi	r28, 0x14	; 20
    b798:	11 f7       	brne	.-60     	; 0xb75e <animate_particles+0x1a>
		if (extendedSprites[i].y > 200)
		{
			LBMoveSprite(i, LBRandom(0, 224), oy, 1, 1);
		}
	}
}
    b79a:	df 91       	pop	r29
    b79c:	cf 91       	pop	r28
    b79e:	1f 91       	pop	r17
    b7a0:	0f 91       	pop	r16
    b7a2:	ff 90       	pop	r15
    b7a4:	ef 90       	pop	r14
    b7a6:	08 95       	ret

0000b7a8 <get_emarald_map>:

const char* get_emarald_map(u8 index)
{
    b7a8:	82 50       	subi	r24, 0x02	; 2
    b7aa:	87 30       	cpi	r24, 0x07	; 7
    b7ac:	48 f4       	brcc	.+18     	; 0xb7c0 <get_emarald_map+0x18>
    b7ae:	e8 2f       	mov	r30, r24
    b7b0:	f0 e0       	ldi	r31, 0x00	; 0
    b7b2:	ee 0f       	add	r30, r30
    b7b4:	ff 1f       	adc	r31, r31
    b7b6:	ee 5f       	subi	r30, 0xFE	; 254
    b7b8:	fa 4f       	sbci	r31, 0xFA	; 250
    b7ba:	80 81       	ld	r24, Z
    b7bc:	91 81       	ldd	r25, Z+1	; 0x01
    b7be:	08 95       	ret
    b7c0:	88 ec       	ldi	r24, 0xC8	; 200
    b7c2:	9d e2       	ldi	r25, 0x2D	; 45
		case 4: return map_emerald_2;
		case 6: return map_emerald_3;
		case 8: return map_emerald_4;
		default: return map_emerald_0;
	}
}
    b7c4:	08 95       	ret

0000b7c6 <music_transition>:

void music_transition()
{
	if (is_space())
    b7c6:	0e 94 93 49 	call	0x9326	; 0x9326 <is_space>
    b7ca:	88 23       	and	r24, r24
    b7cc:	19 f0       	breq	.+6      	; 0xb7d4 <music_transition+0xe>
	{
		StartSong(spacesong);
    b7ce:	8c ea       	ldi	r24, 0xAC	; 172
    b7d0:	9b e0       	ldi	r25, 0x0B	; 11
    b7d2:	06 c0       	rjmp	.+12     	; 0xb7e0 <music_transition+0x1a>
	}
	else if (game.current_level_index != 0)
    b7d4:	80 91 b7 0d 	lds	r24, 0x0DB7
    b7d8:	88 23       	and	r24, r24
    b7da:	21 f0       	breq	.+8      	; 0xb7e4 <music_transition+0x1e>
	{
		StartSong(planetsong);
    b7dc:	8c e4       	ldi	r24, 0x4C	; 76
    b7de:	92 e1       	ldi	r25, 0x12	; 18
    b7e0:	0c 94 f1 3a 	jmp	0x75e2	; 0x75e2 <StartSong>
    b7e4:	08 95       	ret

0000b7e6 <planet_transition>:
	}
}

void planet_transition(u8 index, char scroll, char atmosphere_height, char dy, u8 oy)
{
    b7e6:	cf 92       	push	r12
    b7e8:	df 92       	push	r13
    b7ea:	ef 92       	push	r14
    b7ec:	ff 92       	push	r15
    b7ee:	0f 93       	push	r16
    b7f0:	1f 93       	push	r17
    b7f2:	cf 93       	push	r28
    b7f4:	df 93       	push	r29
    b7f6:	1f 92       	push	r1
    b7f8:	cd b7       	in	r28, 0x3d	; 61
    b7fa:	de b7       	in	r29, 0x3e	; 62
    b7fc:	c8 2e       	mov	r12, r24
    b7fe:	e6 2e       	mov	r14, r22
    b800:	12 2f       	mov	r17, r18
    b802:	f0 2e       	mov	r15, r16
	u8 frame_counter = 0;
	
	fade_through();
    b804:	49 83       	std	Y+1, r20	; 0x01
    b806:	0e 94 28 5a 	call	0xb450	; 0xb450 <fade_through>
	Screen.scrollX = 0;
    b80a:	10 92 b2 0c 	sts	0x0CB2, r1
	Screen.scrollY = 0;
    b80e:	10 92 b3 0c 	sts	0x0CB3, r1
	Screen.scrollHeight = 32;
    b812:	80 e2       	ldi	r24, 0x20	; 32
    b814:	80 93 b4 0c 	sts	0x0CB4, r24
	Screen.overlayHeight = 0;
    b818:	10 92 af 0c 	sts	0x0CAF, r1
	game.scroll_x = 0;
    b81c:	10 92 bd 0d 	sts	0x0DBD, r1
	game.scroll_y = 0;
    b820:	10 92 be 0d 	sts	0x0DBE, r1
	map_particles();
    b824:	0e 94 73 5b 	call	0xb6e6	; 0xb6e6 <map_particles>
	map_ship();
    b828:	0e 94 0b 4e 	call	0x9c16	; 0x9c16 <map_ship>
	place_particles();
    b82c:	0e 94 80 5b 	call	0xb700	; 0xb700 <place_particles>
	DrawMap2(0, atmosphere_height, map_atmosphere);
    b830:	4d e0       	ldi	r20, 0x0D	; 13
    b832:	54 e6       	ldi	r21, 0x64	; 100
    b834:	69 81       	ldd	r22, Y+1	; 0x01
    b836:	80 e0       	ldi	r24, 0x00	; 0
    b838:	0e 94 5c 46 	call	0x8cb8	; 0x8cb8 <DrawMap>
	game.current_level_index = index;
    b83c:	c0 92 b7 0d 	sts	0x0DB7, r12
	music_transition();
    b840:	0e 94 e3 5b 	call	0xb7c6	; 0xb7c6 <music_transition>
	if (!is_space())
    b844:	0e 94 93 49 	call	0x9326	; 0x9326 <is_space>
    b848:	81 11       	cpse	r24, r1
    b84a:	0f c0       	rjmp	.+30     	; 0xb86a <planet_transition+0x84>
	{
		LBMapSprite(8, get_emarald_map(index), 0);
    b84c:	8c 2d       	mov	r24, r12
    b84e:	0e 94 d4 5b 	call	0xb7a8	; 0xb7a8 <get_emarald_map>
    b852:	40 e0       	ldi	r20, 0x00	; 0
    b854:	bc 01       	movw	r22, r24
    b856:	88 e0       	ldi	r24, 0x08	; 8
    b858:	0e 94 c4 48 	call	0x9188	; 0x9188 <LBMapSprite>
		LBMoveSprite(8, 112, 48, 1, 1);
    b85c:	01 e0       	ldi	r16, 0x01	; 1
    b85e:	21 e0       	ldi	r18, 0x01	; 1
    b860:	40 e3       	ldi	r20, 0x30	; 48
    b862:	60 e7       	ldi	r22, 0x70	; 112
    b864:	88 e0       	ldi	r24, 0x08	; 8
    b866:	0e 94 16 49 	call	0x922c	; 0x922c <LBMoveSprite>
		StartSong(planetsong);
	}
}

void planet_transition(u8 index, char scroll, char atmosphere_height, char dy, u8 oy)
{
    b86a:	d1 2c       	mov	r13, r1
		LBMoveSprite(8, 112, 48, 1, 1);
	}
	
	while (frame_counter < 255)
	{
		WaitVsync(1);
    b86c:	81 e0       	ldi	r24, 0x01	; 1
    b86e:	90 e0       	ldi	r25, 0x00	; 0
    b870:	0e 94 c5 46 	call	0x8d8a	; 0x8d8a <WaitVsync>
		LBMapSprite(0, LBGetNextFrame(&game.player.run), 0);
    b874:	80 e3       	ldi	r24, 0x30	; 48
    b876:	9e e0       	ldi	r25, 0x0E	; 14
    b878:	0e 94 62 47 	call	0x8ec4	; 0x8ec4 <LBGetNextFrame>
    b87c:	40 e0       	ldi	r20, 0x00	; 0
    b87e:	bc 01       	movw	r22, r24
    b880:	80 e0       	ldi	r24, 0x00	; 0
    b882:	0e 94 c4 48 	call	0x9188	; 0x9188 <LBMapSprite>
		LBMoveSprite(0, 104, 104, 4, 2);
    b886:	02 e0       	ldi	r16, 0x02	; 2
    b888:	24 e0       	ldi	r18, 0x04	; 4
    b88a:	48 e6       	ldi	r20, 0x68	; 104
    b88c:	68 e6       	ldi	r22, 0x68	; 104
    b88e:	80 e0       	ldi	r24, 0x00	; 0
    b890:	0e 94 16 49 	call	0x922c	; 0x922c <LBMoveSprite>
		frame_counter++;
    b894:	d3 94       	inc	r13
		if (frame_counter % 16 == 0) Screen.scrollY += scroll;
    b896:	8d 2d       	mov	r24, r13
    b898:	8f 70       	andi	r24, 0x0F	; 15
    b89a:	29 f4       	brne	.+10     	; 0xb8a6 <planet_transition+0xc0>
    b89c:	90 91 b3 0c 	lds	r25, 0x0CB3
    b8a0:	9e 0d       	add	r25, r14
    b8a2:	90 93 b3 0c 	sts	0x0CB3, r25
		animate_particles(dy, oy);
    b8a6:	6f 2d       	mov	r22, r15
    b8a8:	81 2f       	mov	r24, r17
    b8aa:	0e 94 a2 5b 	call	0xb744	; 0xb744 <animate_particles>
		LBRotateSprites();
    b8ae:	0e 94 54 49 	call	0x92a8	; 0x92a8 <LBRotateSprites>
	{
		LBMapSprite(8, get_emarald_map(index), 0);
		LBMoveSprite(8, 112, 48, 1, 1);
	}
	
	while (frame_counter < 255)
    b8b2:	8f ef       	ldi	r24, 0xFF	; 255
    b8b4:	d8 12       	cpse	r13, r24
    b8b6:	da cf       	rjmp	.-76     	; 0xb86c <planet_transition+0x86>
		frame_counter++;
		if (frame_counter % 16 == 0) Screen.scrollY += scroll;
		animate_particles(dy, oy);
		LBRotateSprites();
	}
	game.current_screen = LEVEL;
    b8b8:	82 e0       	ldi	r24, 0x02	; 2
    b8ba:	80 93 b6 0d 	sts	0x0DB6, r24
	ClearVram();
    b8be:	0e 94 fd 37 	call	0x6ffa	; 0x6ffa <ClearVram>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    b8c2:	64 e1       	ldi	r22, 0x14	; 20
    b8c4:	80 e0       	ldi	r24, 0x00	; 0
    b8c6:	0e 94 06 5a 	call	0xb40c	; 0xb40c <clear_sprites>
	LBRotateSprites();
    b8ca:	0e 94 54 49 	call	0x92a8	; 0x92a8 <LBRotateSprites>
	fade_through();
    b8ce:	0e 94 28 5a 	call	0xb450	; 0xb450 <fade_through>
	load_level(index, true);
    b8d2:	61 e0       	ldi	r22, 0x01	; 1
    b8d4:	8c 2d       	mov	r24, r12
    b8d6:	0e 94 38 5a 	call	0xb470	; 0xb470 <load_level>
	init_player_state();
    b8da:	0e 94 c1 49 	call	0x9382	; 0x9382 <init_player_state>
	init_enemy_state();
}
    b8de:	0f 90       	pop	r0
    b8e0:	df 91       	pop	r29
    b8e2:	cf 91       	pop	r28
    b8e4:	1f 91       	pop	r17
    b8e6:	0f 91       	pop	r16
    b8e8:	ff 90       	pop	r15
    b8ea:	ef 90       	pop	r14
    b8ec:	df 90       	pop	r13
    b8ee:	cf 90       	pop	r12
	clear_sprites(0, MAX_EXTENDED_SPRITES);
	LBRotateSprites();
	fade_through();
	load_level(index, true);
	init_player_state();
	init_enemy_state();
    b8f0:	0c 94 ad 49 	jmp	0x935a	; 0x935a <init_enemy_state>

0000b8f4 <intro>:
}


void intro()
{
    b8f4:	0f 93       	push	r16
	fade_through();
    b8f6:	0e 94 28 5a 	call	0xb450	; 0xb450 <fade_through>
	game.lives = LIVES;
    b8fa:	e6 ea       	ldi	r30, 0xA6	; 166
    b8fc:	fd e0       	ldi	r31, 0x0D	; 13
    b8fe:	85 e0       	ldi	r24, 0x05	; 5
    b900:	87 87       	std	Z+15, r24	; 0x0f
	game.score = 0;
    b902:	11 86       	std	Z+9, r1	; 0x09
    b904:	10 86       	std	Z+8, r1	; 0x08
	game.time = 0;
    b906:	13 86       	std	Z+11, r1	; 0x0b
    b908:	12 86       	std	Z+10, r1	; 0x0a
	StartSong(planetsong);
    b90a:	8c e4       	ldi	r24, 0x4C	; 76
    b90c:	92 e1       	ldi	r25, 0x12	; 18
    b90e:	0e 94 f1 3a 	call	0x75e2	; 0x75e2 <StartSong>
	LBMapSprite(0, map_emerald_0, 0);
    b912:	40 e0       	ldi	r20, 0x00	; 0
    b914:	68 ec       	ldi	r22, 0xC8	; 200
    b916:	7d e2       	ldi	r23, 0x2D	; 45
    b918:	80 e0       	ldi	r24, 0x00	; 0
    b91a:	0e 94 c4 48 	call	0x9188	; 0x9188 <LBMapSprite>
	LBMoveSprite(0, 80, 48, 1, 1);
    b91e:	01 e0       	ldi	r16, 0x01	; 1
    b920:	21 e0       	ldi	r18, 0x01	; 1
    b922:	40 e3       	ldi	r20, 0x30	; 48
    b924:	60 e5       	ldi	r22, 0x50	; 80
    b926:	80 e0       	ldi	r24, 0x00	; 0
    b928:	0e 94 16 49 	call	0x922c	; 0x922c <LBMoveSprite>
	LBMapSprite(1, map_emerald_1, 0);
    b92c:	40 e0       	ldi	r20, 0x00	; 0
    b92e:	6b ec       	ldi	r22, 0xCB	; 203
    b930:	7d e2       	ldi	r23, 0x2D	; 45
    b932:	81 e0       	ldi	r24, 0x01	; 1
    b934:	0e 94 c4 48 	call	0x9188	; 0x9188 <LBMapSprite>
	LBMoveSprite(1, 96, 48, 1, 1);
    b938:	21 e0       	ldi	r18, 0x01	; 1
    b93a:	40 e3       	ldi	r20, 0x30	; 48
    b93c:	60 e6       	ldi	r22, 0x60	; 96
    b93e:	81 e0       	ldi	r24, 0x01	; 1
    b940:	0e 94 16 49 	call	0x922c	; 0x922c <LBMoveSprite>
	LBMapSprite(2, map_emerald_2, 0);
    b944:	40 e0       	ldi	r20, 0x00	; 0
    b946:	65 ec       	ldi	r22, 0xC5	; 197
    b948:	7d e2       	ldi	r23, 0x2D	; 45
    b94a:	82 e0       	ldi	r24, 0x02	; 2
    b94c:	0e 94 c4 48 	call	0x9188	; 0x9188 <LBMapSprite>
	LBMoveSprite(2, 112, 48, 1, 1);
    b950:	21 e0       	ldi	r18, 0x01	; 1
    b952:	40 e3       	ldi	r20, 0x30	; 48
    b954:	60 e7       	ldi	r22, 0x70	; 112
    b956:	82 e0       	ldi	r24, 0x02	; 2
    b958:	0e 94 16 49 	call	0x922c	; 0x922c <LBMoveSprite>
	LBMapSprite(3, map_emerald_3, 0);
    b95c:	40 e0       	ldi	r20, 0x00	; 0
    b95e:	62 ec       	ldi	r22, 0xC2	; 194
    b960:	7d e2       	ldi	r23, 0x2D	; 45
    b962:	83 e0       	ldi	r24, 0x03	; 3
    b964:	0e 94 c4 48 	call	0x9188	; 0x9188 <LBMapSprite>
	LBMoveSprite(3, 128, 48, 1, 1);
    b968:	21 e0       	ldi	r18, 0x01	; 1
    b96a:	40 e3       	ldi	r20, 0x30	; 48
    b96c:	60 e8       	ldi	r22, 0x80	; 128
    b96e:	83 e0       	ldi	r24, 0x03	; 3
    b970:	0e 94 16 49 	call	0x922c	; 0x922c <LBMoveSprite>
	LBMapSprite(4, map_emerald_4, 0);
    b974:	40 e0       	ldi	r20, 0x00	; 0
    b976:	6f eb       	ldi	r22, 0xBF	; 191
    b978:	7d e2       	ldi	r23, 0x2D	; 45
    b97a:	84 e0       	ldi	r24, 0x04	; 4
    b97c:	0e 94 c4 48 	call	0x9188	; 0x9188 <LBMapSprite>
	LBMoveSprite(4, 144, 48, 1, 1);
    b980:	21 e0       	ldi	r18, 0x01	; 1
    b982:	40 e3       	ldi	r20, 0x30	; 48
    b984:	60 e9       	ldi	r22, 0x90	; 144
    b986:	84 e0       	ldi	r24, 0x04	; 4
    b988:	0e 94 16 49 	call	0x922c	; 0x922c <LBMoveSprite>
	LBRotateSprites();
    b98c:	0e 94 54 49 	call	0x92a8	; 0x92a8 <LBRotateSprites>
	stream_dialogue((const char*) strIntro, 12);
    b990:	6c e0       	ldi	r22, 0x0C	; 12
    b992:	8d e4       	ldi	r24, 0x4D	; 77
    b994:	9a e0       	ldi	r25, 0x0A	; 10
    b996:	0e 94 3c 5b 	call	0xb678	; 0xb678 <stream_dialogue>
	LBWaitSeconds(1);
    b99a:	81 e0       	ldi	r24, 0x01	; 1
    b99c:	0e 94 b5 48 	call	0x916a	; 0x916a <LBWaitSeconds>
	planet_transition(0, 1, 28, -3, 199);
    b9a0:	07 ec       	ldi	r16, 0xC7	; 199
    b9a2:	2d ef       	ldi	r18, 0xFD	; 253
    b9a4:	4c e1       	ldi	r20, 0x1C	; 28
    b9a6:	61 e0       	ldi	r22, 0x01	; 1
    b9a8:	80 e0       	ldi	r24, 0x00	; 0
    b9aa:	0e 94 f3 5b 	call	0xb7e6	; 0xb7e6 <planet_transition>
}
    b9ae:	0f 91       	pop	r16
    b9b0:	08 95       	ret

0000b9b2 <load_splash>:

void load_splash()
{
	fade_through();
    b9b2:	0e 94 28 5a 	call	0xb450	; 0xb450 <fade_through>
	Screen.scrollX = 0;
    b9b6:	ef ea       	ldi	r30, 0xAF	; 175
    b9b8:	fc e0       	ldi	r31, 0x0C	; 12
    b9ba:	13 82       	std	Z+3, r1	; 0x03
	Screen.scrollY = 0;
    b9bc:	14 82       	std	Z+4, r1	; 0x04
	Screen.scrollHeight = 32;
    b9be:	80 e2       	ldi	r24, 0x20	; 32
    b9c0:	85 83       	std	Z+5, r24	; 0x05
	Screen.overlayHeight = 0;
    b9c2:	10 82       	st	Z, r1
	game.current_screen = SPLASH;
    b9c4:	e6 ea       	ldi	r30, 0xA6	; 166
    b9c6:	fd e0       	ldi	r31, 0x0D	; 13
    b9c8:	10 8a       	std	Z+16, r1	; 0x10
	game.selection = START_SELECTED;
    b9ca:	15 8a       	std	Z+21, r1	; 0x15
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    b9cc:	64 e1       	ldi	r22, 0x14	; 20
    b9ce:	80 e0       	ldi	r24, 0x00	; 0
    b9d0:	0e 94 06 5a 	call	0xb40c	; 0xb40c <clear_sprites>
	LBRotateSprites();
    b9d4:	0e 94 54 49 	call	0x92a8	; 0x92a8 <LBRotateSprites>
	LBPrint(8, 15, (char*) str1Player);
    b9d8:	49 e7       	ldi	r20, 0x79	; 121
    b9da:	5b e0       	ldi	r21, 0x0B	; 11
    b9dc:	6f e0       	ldi	r22, 0x0F	; 15
    b9de:	88 e0       	ldi	r24, 0x08	; 8
    b9e0:	0e 94 f3 47 	call	0x8fe6	; 0x8fe6 <LBPrint>
	LBPrint(8, 16, (char*) strHighScores);
    b9e4:	4d e6       	ldi	r20, 0x6D	; 109
    b9e6:	5b e0       	ldi	r21, 0x0B	; 11
    b9e8:	60 e1       	ldi	r22, 0x10	; 16
    b9ea:	88 e0       	ldi	r24, 0x08	; 8
    b9ec:	0e 94 f3 47 	call	0x8fe6	; 0x8fe6 <LBPrint>
	LBPrint(4, 21, (char*) strCopyright);
    b9f0:	47 e9       	ldi	r20, 0x97	; 151
    b9f2:	5b e0       	ldi	r21, 0x0B	; 11
    b9f4:	65 e1       	ldi	r22, 0x15	; 21
    b9f6:	84 e0       	ldi	r24, 0x04	; 4
    b9f8:	0e 94 f3 47 	call	0x8fe6	; 0x8fe6 <LBPrint>
	LBPrint(3, 26, (char*) strMusic);
    b9fc:	4f e7       	ldi	r20, 0x7F	; 127
    b9fe:	5b e0       	ldi	r21, 0x0B	; 11
    ba00:	6a e1       	ldi	r22, 0x1A	; 26
    ba02:	83 e0       	ldi	r24, 0x03	; 3
    ba04:	0e 94 f3 47 	call	0x8fe6	; 0x8fe6 <LBPrint>
	DrawMap2(6, 5, map_splash);
    ba08:	42 ee       	ldi	r20, 0xE2	; 226
    ba0a:	54 e6       	ldi	r21, 0x64	; 100
    ba0c:	65 e0       	ldi	r22, 0x05	; 5
    ba0e:	86 e0       	ldi	r24, 0x06	; 6
    ba10:	0e 94 5c 46 	call	0x8cb8	; 0x8cb8 <DrawMap>
	LBMapSprite(0, map_right_arrow, 0);
    ba14:	40 e0       	ldi	r20, 0x00	; 0
    ba16:	60 ee       	ldi	r22, 0xE0	; 224
    ba18:	7d e2       	ldi	r23, 0x2D	; 45
    ba1a:	80 e0       	ldi	r24, 0x00	; 0
    ba1c:	0c 94 c4 48 	jmp	0x9188	; 0x9188 <LBMapSprite>

0000ba20 <load_high_scores>:
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
	}
}

void load_high_scores()
{
    ba20:	4f 92       	push	r4
    ba22:	5f 92       	push	r5
    ba24:	6f 92       	push	r6
    ba26:	7f 92       	push	r7
    ba28:	8f 92       	push	r8
    ba2a:	9f 92       	push	r9
    ba2c:	af 92       	push	r10
    ba2e:	bf 92       	push	r11
    ba30:	cf 92       	push	r12
    ba32:	df 92       	push	r13
    ba34:	ef 92       	push	r14
    ba36:	ff 92       	push	r15
    ba38:	0f 93       	push	r16
    ba3a:	1f 93       	push	r17
    ba3c:	cf 93       	push	r28
    ba3e:	df 93       	push	r29
    ba40:	00 d0       	rcall	.+0      	; 0xba42 <load_high_scores+0x22>
    ba42:	cd b7       	in	r28, 0x3d	; 61
    ba44:	de b7       	in	r29, 0x3e	; 62
	u16 score = 0;
	u8 ypos = 7;
	
	game.current_screen = HIGH_SCORES;
    ba46:	81 e0       	ldi	r24, 0x01	; 1
    ba48:	80 93 b6 0d 	sts	0x0DB6, r24
	game.high_score_index = -1;
    ba4c:	8f ef       	ldi	r24, 0xFF	; 255
    ba4e:	80 93 b4 0d 	sts	0x0DB4, r24
	fade_through();
    ba52:	0e 94 28 5a 	call	0xb450	; 0xb450 <fade_through>
	Screen.scrollX = 0;
    ba56:	10 92 b2 0c 	sts	0x0CB2, r1
	Screen.scrollY = 0;
    ba5a:	10 92 b3 0c 	sts	0x0CB3, r1
	Screen.scrollHeight = 32;
    ba5e:	80 e2       	ldi	r24, 0x20	; 32
    ba60:	80 93 b4 0c 	sts	0x0CB4, r24
	Screen.overlayHeight = 0;
    ba64:	10 92 af 0c 	sts	0x0CAF, r1
	load_eeprom(&scores);
    ba68:	86 e8       	ldi	r24, 0x86	; 134
    ba6a:	9d e0       	ldi	r25, 0x0D	; 13
    ba6c:	0e 94 bf 4b 	call	0x977e	; 0x977e <load_eeprom>
	
	LBPrint(9, 3, (char*) strHighScores);
    ba70:	4d e6       	ldi	r20, 0x6D	; 109
    ba72:	5b e0       	ldi	r21, 0x0B	; 11
    ba74:	63 e0       	ldi	r22, 0x03	; 3
    ba76:	89 e0       	ldi	r24, 0x09	; 9
    ba78:	0e 94 f3 47 	call	0x8fe6	; 0x8fe6 <LBPrint>
	
	LBMapSprite(0, map_emerald_0, 0);
    ba7c:	40 e0       	ldi	r20, 0x00	; 0
    ba7e:	68 ec       	ldi	r22, 0xC8	; 200
    ba80:	7d e2       	ldi	r23, 0x2D	; 45
    ba82:	80 e0       	ldi	r24, 0x00	; 0
    ba84:	0e 94 c4 48 	call	0x9188	; 0x9188 <LBMapSprite>
	LBMapSprite(1, map_emerald_1, 0);
    ba88:	40 e0       	ldi	r20, 0x00	; 0
    ba8a:	6b ec       	ldi	r22, 0xCB	; 203
    ba8c:	7d e2       	ldi	r23, 0x2D	; 45
    ba8e:	81 e0       	ldi	r24, 0x01	; 1
    ba90:	0e 94 c4 48 	call	0x9188	; 0x9188 <LBMapSprite>
	LBMoveSprite(0, 7*8, 3*8, 1, 1);
    ba94:	01 e0       	ldi	r16, 0x01	; 1
    ba96:	21 e0       	ldi	r18, 0x01	; 1
    ba98:	48 e1       	ldi	r20, 0x18	; 24
    ba9a:	68 e3       	ldi	r22, 0x38	; 56
    ba9c:	80 e0       	ldi	r24, 0x00	; 0
    ba9e:	0e 94 16 49 	call	0x922c	; 0x922c <LBMoveSprite>
	LBMoveSprite(1, 21*8, 3*8, 1, 1);
    baa2:	21 e0       	ldi	r18, 0x01	; 1
    baa4:	48 e1       	ldi	r20, 0x18	; 24
    baa6:	68 ea       	ldi	r22, 0xA8	; 168
    baa8:	81 e0       	ldi	r24, 0x01	; 1
    baaa:	0e 94 16 49 	call	0x922c	; 0x922c <LBMoveSprite>
    baae:	8c e8       	ldi	r24, 0x8C	; 140
    bab0:	88 2e       	mov	r8, r24
    bab2:	8d e0       	ldi	r24, 0x0D	; 13
    bab4:	98 2e       	mov	r9, r24
    bab6:	74 01       	movw	r14, r8
    bab8:	90 e3       	ldi	r25, 0x30	; 48
    baba:	b9 2e       	mov	r11, r25
}

void load_high_scores()
{
	u16 score = 0;
	u8 ypos = 7;
    babc:	17 e0       	ldi	r17, 0x07	; 7
	LBMoveSprite(0, 7*8, 3*8, 1, 1);
	LBMoveSprite(1, 21*8, 3*8, 1, 1);
	
	for (u8 i = 0; i < 30; i += 5)
	{
		LBPrintByte(9, ypos, i/5+1, false);
    babe:	25 e0       	ldi	r18, 0x05	; 5
    bac0:	a2 2e       	mov	r10, r18
    bac2:	31 ea       	ldi	r19, 0xA1	; 161
    bac4:	63 2e       	mov	r6, r19
    bac6:	3d e0       	ldi	r19, 0x0D	; 13
    bac8:	73 2e       	mov	r7, r19
    baca:	0e 2d       	mov	r16, r14
    bacc:	08 19       	sub	r16, r8
    bace:	80 2f       	mov	r24, r16
    bad0:	6a 2d       	mov	r22, r10
    bad2:	0e 94 7f 65 	call	0xcafe	; 0xcafe <__udivmodqi4>
    bad6:	41 e0       	ldi	r20, 0x01	; 1
    bad8:	48 0f       	add	r20, r24
    bada:	20 e0       	ldi	r18, 0x00	; 0
    badc:	61 2f       	mov	r22, r17
    bade:	89 e0       	ldi	r24, 0x09	; 9
    bae0:	0e 94 0f 48 	call	0x901e	; 0x901e <LBPrintByte>
		LBPrintChar(10, ypos, ' ');
    bae4:	40 e2       	ldi	r20, 0x20	; 32
    bae6:	61 2f       	mov	r22, r17
    bae8:	8a e0       	ldi	r24, 0x0A	; 10
    baea:	0e 94 d3 47 	call	0x8fa6	; 0x8fa6 <LBPrintChar>
    baee:	f7 01       	movw	r30, r14
    baf0:	34 97       	sbiw	r30, 0x04	; 4
		LBPrintChar(11, ypos, scores.data[i]);
    baf2:	40 81       	ld	r20, Z
    baf4:	61 2f       	mov	r22, r17
    baf6:	8b e0       	ldi	r24, 0x0B	; 11
    baf8:	0e 94 d3 47 	call	0x8fa6	; 0x8fa6 <LBPrintChar>
    bafc:	f7 01       	movw	r30, r14
    bafe:	33 97       	sbiw	r30, 0x03	; 3
		LBPrintChar(12, ypos, scores.data[i+1]);
    bb00:	40 81       	ld	r20, Z
    bb02:	61 2f       	mov	r22, r17
    bb04:	8c e0       	ldi	r24, 0x0C	; 12
    bb06:	0e 94 d3 47 	call	0x8fa6	; 0x8fa6 <LBPrintChar>
    bb0a:	f7 01       	movw	r30, r14
    bb0c:	32 97       	sbiw	r30, 0x02	; 2
		LBPrintChar(13, ypos, scores.data[i+2]);
    bb0e:	40 81       	ld	r20, Z
    bb10:	61 2f       	mov	r22, r17
    bb12:	8d e0       	ldi	r24, 0x0D	; 13
    bb14:	0e 94 d3 47 	call	0x8fa6	; 0x8fa6 <LBPrintChar>
		LBPrintChar(14, ypos, ' ');
    bb18:	40 e2       	ldi	r20, 0x20	; 32
    bb1a:	61 2f       	mov	r22, r17
    bb1c:	8e e0       	ldi	r24, 0x0E	; 14
    bb1e:	0e 94 d3 47 	call	0x8fa6	; 0x8fa6 <LBPrintChar>
    bb22:	27 01       	movw	r4, r14
		(&score)[0] = scores.data[i+3];
    bb24:	f2 01       	movw	r30, r4
    bb26:	c2 90       	ld	r12, -Z
    bb28:	2f 01       	movw	r4, r30
    bb2a:	d1 2c       	mov	r13, r1
    bb2c:	da 82       	std	Y+2, r13	; 0x02
    bb2e:	c9 82       	std	Y+1, r12	; 0x01
		(&score)[1] = scores.data[i+4];
    bb30:	f7 01       	movw	r30, r14
    bb32:	80 81       	ld	r24, Z
    bb34:	90 e0       	ldi	r25, 0x00	; 0
    bb36:	9c 83       	std	Y+4, r25	; 0x04
    bb38:	8b 83       	std	Y+3, r24	; 0x03
		LBPrintInt(19, ypos, score, true);
    bb3a:	21 e0       	ldi	r18, 0x01	; 1
    bb3c:	a6 01       	movw	r20, r12
    bb3e:	61 2f       	mov	r22, r17
    bb40:	83 e1       	ldi	r24, 0x13	; 19
    bb42:	0e 94 40 48 	call	0x9080	; 0x9080 <LBPrintInt>
		
		if (game.score > score && game.high_score_index == -1)
    bb46:	40 91 ae 0d 	lds	r20, 0x0DAE
    bb4a:	50 91 af 0d 	lds	r21, 0x0DAF
    bb4e:	c4 16       	cp	r12, r20
    bb50:	d5 06       	cpc	r13, r21
    bb52:	f0 f5       	brcc	.+124    	; 0xbbd0 <load_high_scores+0x1b0>
    bb54:	80 91 b4 0d 	lds	r24, 0x0DB4
    bb58:	8f 3f       	cpi	r24, 0xFF	; 255
    bb5a:	d1 f5       	brne	.+116    	; 0xbbd0 <load_high_scores+0x1b0>
    bb5c:	a1 ea       	ldi	r26, 0xA1	; 161
    bb5e:	bd e0       	ldi	r27, 0x0D	; 13
    bb60:	cd 01       	movw	r24, r26
    bb62:	05 97       	sbiw	r24, 0x05	; 5
    bb64:	2e e1       	ldi	r18, 0x1E	; 30
    bb66:	28 0f       	add	r18, r24
    bb68:	26 19       	sub	r18, r6
		{
			// Shift scores down
			for (u8 j = 25; j > i; j -= 5)
    bb6a:	02 17       	cp	r16, r18
    bb6c:	40 f4       	brcc	.+16     	; 0xbb7e <load_high_scores+0x15e>
			{
				memcpy(&(scores.data[j]), &(scores.data[j-5]), 5);
    bb6e:	fc 01       	movw	r30, r24
    bb70:	2a 2d       	mov	r18, r10
    bb72:	01 90       	ld	r0, Z+
    bb74:	0d 92       	st	X+, r0
    bb76:	2a 95       	dec	r18
    bb78:	e1 f7       	brne	.-8      	; 0xbb72 <load_high_scores+0x152>
    bb7a:	dc 01       	movw	r26, r24
    bb7c:	f1 cf       	rjmp	.-30     	; 0xbb60 <load_high_scores+0x140>
			}
			LBPrintInt(19, ypos, game.score, true);
    bb7e:	21 e0       	ldi	r18, 0x01	; 1
    bb80:	61 2f       	mov	r22, r17
    bb82:	83 e1       	ldi	r24, 0x13	; 19
    bb84:	0e 94 40 48 	call	0x9080	; 0x9080 <LBPrintInt>
			scores.data[i+3] = (&game.score)[0];
    bb88:	80 91 ae 0d 	lds	r24, 0x0DAE
    bb8c:	f2 01       	movw	r30, r4
    bb8e:	80 83       	st	Z, r24
			scores.data[i+4] = (&game.score)[1];
    bb90:	80 91 b0 0d 	lds	r24, 0x0DB0
    bb94:	f7 01       	movw	r30, r14
    bb96:	80 83       	st	Z, r24
			game.high_score_index = i;
    bb98:	00 93 b4 0d 	sts	0x0DB4, r16
			LBMapSprite(2, map_down_arrow, 0);
    bb9c:	40 e0       	ldi	r20, 0x00	; 0
    bb9e:	6d ed       	ldi	r22, 0xDD	; 221
    bba0:	7d e2       	ldi	r23, 0x2D	; 45
    bba2:	82 e0       	ldi	r24, 0x02	; 2
    bba4:	0e 94 c4 48 	call	0x9188	; 0x9188 <LBMapSprite>
			LBMapSprite(3, map_up_arrow, 0);
    bba8:	40 e0       	ldi	r20, 0x00	; 0
    bbaa:	6a ed       	ldi	r22, 0xDA	; 218
    bbac:	7d e2       	ldi	r23, 0x2D	; 45
    bbae:	83 e0       	ldi	r24, 0x03	; 3
    bbb0:	0e 94 c4 48 	call	0x9188	; 0x9188 <LBMapSprite>
			LBMoveSprite(2, 11*8, (ypos-1)*8, 1, 1);
    bbb4:	01 e0       	ldi	r16, 0x01	; 1
    bbb6:	21 e0       	ldi	r18, 0x01	; 1
    bbb8:	4b 2d       	mov	r20, r11
    bbba:	68 e5       	ldi	r22, 0x58	; 88
    bbbc:	82 e0       	ldi	r24, 0x02	; 2
    bbbe:	0e 94 16 49 	call	0x922c	; 0x922c <LBMoveSprite>
			LBMoveSprite(3, 11*8, (ypos+1)*8, 1, 1);
    bbc2:	21 e0       	ldi	r18, 0x01	; 1
    bbc4:	40 e1       	ldi	r20, 0x10	; 16
    bbc6:	4b 0d       	add	r20, r11
    bbc8:	68 e5       	ldi	r22, 0x58	; 88
    bbca:	83 e0       	ldi	r24, 0x03	; 3
    bbcc:	0e 94 16 49 	call	0x922c	; 0x922c <LBMoveSprite>
		}
		
		ypos += 2;
    bbd0:	1e 5f       	subi	r17, 0xFE	; 254
    bbd2:	f5 e0       	ldi	r31, 0x05	; 5
    bbd4:	ef 0e       	add	r14, r31
    bbd6:	f1 1c       	adc	r15, r1
    bbd8:	80 e1       	ldi	r24, 0x10	; 16
    bbda:	b8 0e       	add	r11, r24
	LBMapSprite(0, map_emerald_0, 0);
	LBMapSprite(1, map_emerald_1, 0);
	LBMoveSprite(0, 7*8, 3*8, 1, 1);
	LBMoveSprite(1, 21*8, 3*8, 1, 1);
	
	for (u8 i = 0; i < 30; i += 5)
    bbdc:	13 31       	cpi	r17, 0x13	; 19
    bbde:	09 f0       	breq	.+2      	; 0xbbe2 <load_high_scores+0x1c2>
    bbe0:	74 cf       	rjmp	.-280    	; 0xbaca <load_high_scores+0xaa>
		}
		
		ypos += 2;
	}
	
	LBPrint(9, 22, (char*) strMainMenu);
    bbe2:	44 e4       	ldi	r20, 0x44	; 68
    bbe4:	5b e0       	ldi	r21, 0x0B	; 11
    bbe6:	66 e1       	ldi	r22, 0x16	; 22
    bbe8:	89 e0       	ldi	r24, 0x09	; 9
}
    bbea:	0f 90       	pop	r0
    bbec:	0f 90       	pop	r0
    bbee:	df 91       	pop	r29
    bbf0:	cf 91       	pop	r28
    bbf2:	1f 91       	pop	r17
    bbf4:	0f 91       	pop	r16
    bbf6:	ff 90       	pop	r15
    bbf8:	ef 90       	pop	r14
    bbfa:	df 90       	pop	r13
    bbfc:	cf 90       	pop	r12
    bbfe:	bf 90       	pop	r11
    bc00:	af 90       	pop	r10
    bc02:	9f 90       	pop	r9
    bc04:	8f 90       	pop	r8
    bc06:	7f 90       	pop	r7
    bc08:	6f 90       	pop	r6
    bc0a:	5f 90       	pop	r5
    bc0c:	4f 90       	pop	r4
		}
		
		ypos += 2;
	}
	
	LBPrint(9, 22, (char*) strMainMenu);
    bc0e:	0c 94 f3 47 	jmp	0x8fe6	; 0x8fe6 <LBPrint>

0000bc12 <exit_game>:
	}
}

void exit_game()
{
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    bc12:	64 e1       	ldi	r22, 0x14	; 20
    bc14:	80 e0       	ldi	r24, 0x00	; 0
    bc16:	0e 94 06 5a 	call	0xb40c	; 0xb40c <clear_sprites>
	LBRotateSprites();
    bc1a:	0e 94 54 49 	call	0x92a8	; 0x92a8 <LBRotateSprites>
	init_player_state();
    bc1e:	0e 94 c1 49 	call	0x9382	; 0x9382 <init_player_state>
	init_enemy_state();
    bc22:	0e 94 ad 49 	call	0x935a	; 0x935a <init_enemy_state>
	StopSong();
    bc26:	0e 94 1a 3b 	call	0x7634	; 0x7634 <StopSong>
	load_high_scores();
    bc2a:	0c 94 10 5d 	jmp	0xba20	; 0xba20 <load_high_scores>

0000bc2e <update_splash>:
	DrawMap2(6, 5, map_splash);
	LBMapSprite(0, map_right_arrow, 0);
}

void update_splash()
{
    bc2e:	0f 93       	push	r16
    bc30:	cf 93       	push	r28
	if (game.joypadState.pressed & BTN_DOWN && game.selection == START_SELECTED)
    bc32:	80 91 9a 0f 	lds	r24, 0x0F9A
    bc36:	c0 91 bb 0d 	lds	r28, 0x0DBB
    bc3a:	85 ff       	sbrs	r24, 5
    bc3c:	06 c0       	rjmp	.+12     	; 0xbc4a <update_splash+0x1c>
    bc3e:	c1 11       	cpse	r28, r1
    bc40:	04 c0       	rjmp	.+8      	; 0xbc4a <update_splash+0x1c>
	{
		game.selection = HIGH_SCORES_SELECTED;
    bc42:	81 e0       	ldi	r24, 0x01	; 1
    bc44:	80 93 bb 0d 	sts	0x0DBB, r24
    bc48:	06 c0       	rjmp	.+12     	; 0xbc56 <update_splash+0x28>
		SFX_NAVIGATE;
	}
	else if (game.joypadState.pressed & BTN_UP && game.selection == HIGH_SCORES_SELECTED)
    bc4a:	84 ff       	sbrs	r24, 4
    bc4c:	0a c0       	rjmp	.+20     	; 0xbc62 <update_splash+0x34>
    bc4e:	c1 30       	cpi	r28, 0x01	; 1
    bc50:	41 f4       	brne	.+16     	; 0xbc62 <update_splash+0x34>
	{
		game.selection = START_SELECTED;
    bc52:	10 92 bb 0d 	sts	0x0DBB, r1
		SFX_NAVIGATE;
    bc56:	41 e0       	ldi	r20, 0x01	; 1
    bc58:	6f ef       	ldi	r22, 0xFF	; 255
    bc5a:	82 e0       	ldi	r24, 0x02	; 2
    bc5c:	0e 94 dc 3b 	call	0x77b8	; 0x77b8 <TriggerFx>
    bc60:	1c c0       	rjmp	.+56     	; 0xbc9a <update_splash+0x6c>
	}
	else if (select_pressed(&game.joypadState) && game.selection == START_SELECTED)
    bc62:	8a e9       	ldi	r24, 0x9A	; 154
    bc64:	9f e0       	ldi	r25, 0x0F	; 15
    bc66:	0e 94 32 5b 	call	0xb664	; 0xb664 <select_pressed>
    bc6a:	88 23       	and	r24, r24
    bc6c:	b1 f0       	breq	.+44     	; 0xbc9a <update_splash+0x6c>
    bc6e:	c1 11       	cpse	r28, r1
    bc70:	09 c0       	rjmp	.+18     	; 0xbc84 <update_splash+0x56>
	{
		SFX_NAVIGATE;
    bc72:	41 e0       	ldi	r20, 0x01	; 1
    bc74:	6f ef       	ldi	r22, 0xFF	; 255
    bc76:	82 e0       	ldi	r24, 0x02	; 2
    bc78:	0e 94 dc 3b 	call	0x77b8	; 0x77b8 <TriggerFx>
	}
	else
	{
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
	}
}
    bc7c:	cf 91       	pop	r28
    bc7e:	0f 91       	pop	r16
		SFX_NAVIGATE;
	}
	else if (select_pressed(&game.joypadState) && game.selection == START_SELECTED)
	{
		SFX_NAVIGATE;
		intro();
    bc80:	0c 94 7a 5c 	jmp	0xb8f4	; 0xb8f4 <intro>
		return;
	}
	else if (select_pressed(&game.joypadState) && game.selection == HIGH_SCORES_SELECTED)
    bc84:	c1 30       	cpi	r28, 0x01	; 1
    bc86:	49 f4       	brne	.+18     	; 0xbc9a <update_splash+0x6c>
	{
		SFX_NAVIGATE;
    bc88:	41 e0       	ldi	r20, 0x01	; 1
    bc8a:	6f ef       	ldi	r22, 0xFF	; 255
    bc8c:	82 e0       	ldi	r24, 0x02	; 2
    bc8e:	0e 94 dc 3b 	call	0x77b8	; 0x77b8 <TriggerFx>
	}
	else
	{
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
	}
}
    bc92:	cf 91       	pop	r28
    bc94:	0f 91       	pop	r16
		return;
	}
	else if (select_pressed(&game.joypadState) && game.selection == HIGH_SCORES_SELECTED)
	{
		SFX_NAVIGATE;
		load_high_scores();
    bc96:	0c 94 10 5d 	jmp	0xba20	; 0xba20 <load_high_scores>
		return;
	}
	
	if (game.selection == START_SELECTED)
    bc9a:	80 91 bb 0d 	lds	r24, 0x0DBB
	{
		LBMoveSprite(0, 7*8, 15*8, 1, 1);
    bc9e:	01 e0       	ldi	r16, 0x01	; 1
    bca0:	21 e0       	ldi	r18, 0x01	; 1
		SFX_NAVIGATE;
		load_high_scores();
		return;
	}
	
	if (game.selection == START_SELECTED)
    bca2:	81 11       	cpse	r24, r1
    bca4:	03 c0       	rjmp	.+6      	; 0xbcac <update_splash+0x7e>
	{
		LBMoveSprite(0, 7*8, 15*8, 1, 1);
    bca6:	48 e7       	ldi	r20, 0x78	; 120
    bca8:	68 e3       	ldi	r22, 0x38	; 56
    bcaa:	03 c0       	rjmp	.+6      	; 0xbcb2 <update_splash+0x84>
	}
	else
	{
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
    bcac:	40 e8       	ldi	r20, 0x80	; 128
    bcae:	68 e3       	ldi	r22, 0x38	; 56
    bcb0:	80 e0       	ldi	r24, 0x00	; 0
    bcb2:	0e 94 16 49 	call	0x922c	; 0x922c <LBMoveSprite>
	}
}
    bcb6:	cf 91       	pop	r28
    bcb8:	0f 91       	pop	r16
    bcba:	08 95       	ret

0000bcbc <update_high_scores>:
	
	LBPrint(9, 22, (char*) strMainMenu);
}

void update_high_scores()
{
    bcbc:	0f 93       	push	r16
	if (game.joypadState.pressed & BTN_X)
    bcbe:	80 91 9a 0f 	lds	r24, 0x0F9A
    bcc2:	90 91 9b 0f 	lds	r25, 0x0F9B
    bcc6:	91 ff       	sbrs	r25, 1
    bcc8:	07 c0       	rjmp	.+14     	; 0xbcd8 <update_high_scores+0x1c>
	{
		SFX_NAVIGATE;
    bcca:	41 e0       	ldi	r20, 0x01	; 1
    bccc:	6f ef       	ldi	r22, 0xFF	; 255
    bcce:	82 e0       	ldi	r24, 0x02	; 2
    bcd0:	0e 94 dc 3b 	call	0x77b8	; 0x77b8 <TriggerFx>
		load_splash();
    bcd4:	0e 94 d9 5c 	call	0xb9b2	; 0xb9b2 <load_splash>
	}
	
	if (game.high_score_index != -1)
    bcd8:	30 91 b4 0d 	lds	r19, 0x0DB4
    bcdc:	3f 3f       	cpi	r19, 0xFF	; 255
    bcde:	09 f4       	brne	.+2      	; 0xbce2 <update_high_scores+0x26>
    bce0:	a2 c0       	rjmp	.+324    	; 0xbe26 <update_high_scores+0x16a>
	{
		if (game.joypadState.pressed & BTN_RIGHT && game.high_score_index % 5 != 2)
    bce2:	20 91 9a 0f 	lds	r18, 0x0F9A
    bce6:	27 ff       	sbrs	r18, 7
    bce8:	1e c0       	rjmp	.+60     	; 0xbd26 <update_high_scores+0x6a>
    bcea:	83 2f       	mov	r24, r19
    bcec:	65 e0       	ldi	r22, 0x05	; 5
    bcee:	0e 94 8b 65 	call	0xcb16	; 0xcb16 <__divmodqi4>
    bcf2:	92 30       	cpi	r25, 0x02	; 2
    bcf4:	c1 f0       	breq	.+48     	; 0xbd26 <update_high_scores+0x6a>
		{
			SFX_NAVIGATE;
    bcf6:	41 e0       	ldi	r20, 0x01	; 1
    bcf8:	6f ef       	ldi	r22, 0xFF	; 255
    bcfa:	82 e0       	ldi	r24, 0x02	; 2
    bcfc:	0e 94 dc 3b 	call	0x77b8	; 0x77b8 <TriggerFx>
			game.high_score_index++;
    bd00:	80 91 b4 0d 	lds	r24, 0x0DB4
    bd04:	8f 5f       	subi	r24, 0xFF	; 255
    bd06:	80 93 b4 0d 	sts	0x0DB4, r24
			LBMoveSprite(2, extendedSprites[2].x+8, extendedSprites[2].y, 1, 1);
    bd0a:	60 91 b3 0f 	lds	r22, 0x0FB3
    bd0e:	68 5f       	subi	r22, 0xF8	; 248
    bd10:	01 e0       	ldi	r16, 0x01	; 1
    bd12:	21 e0       	ldi	r18, 0x01	; 1
    bd14:	40 91 b4 0f 	lds	r20, 0x0FB4
    bd18:	82 e0       	ldi	r24, 0x02	; 2
    bd1a:	0e 94 16 49 	call	0x922c	; 0x922c <LBMoveSprite>
			LBMoveSprite(3, extendedSprites[3].x+8, extendedSprites[3].y, 1, 1);
    bd1e:	60 91 b7 0f 	lds	r22, 0x0FB7
    bd22:	68 5f       	subi	r22, 0xF8	; 248
    bd24:	1f c0       	rjmp	.+62     	; 0xbd64 <update_high_scores+0xa8>
		}
		else if (game.joypadState.pressed & BTN_LEFT && game.high_score_index % 5 != 0)
    bd26:	26 ff       	sbrs	r18, 6
    bd28:	24 c0       	rjmp	.+72     	; 0xbd72 <update_high_scores+0xb6>
    bd2a:	83 2f       	mov	r24, r19
    bd2c:	65 e0       	ldi	r22, 0x05	; 5
    bd2e:	0e 94 8b 65 	call	0xcb16	; 0xcb16 <__divmodqi4>
    bd32:	99 23       	and	r25, r25
    bd34:	f1 f0       	breq	.+60     	; 0xbd72 <update_high_scores+0xb6>
		{
			SFX_NAVIGATE;
    bd36:	41 e0       	ldi	r20, 0x01	; 1
    bd38:	6f ef       	ldi	r22, 0xFF	; 255
    bd3a:	82 e0       	ldi	r24, 0x02	; 2
    bd3c:	0e 94 dc 3b 	call	0x77b8	; 0x77b8 <TriggerFx>
			game.high_score_index--;
    bd40:	80 91 b4 0d 	lds	r24, 0x0DB4
    bd44:	81 50       	subi	r24, 0x01	; 1
    bd46:	80 93 b4 0d 	sts	0x0DB4, r24
			LBMoveSprite(2, extendedSprites[2].x-8, extendedSprites[2].y, 1, 1);
    bd4a:	60 91 b3 0f 	lds	r22, 0x0FB3
    bd4e:	68 50       	subi	r22, 0x08	; 8
    bd50:	01 e0       	ldi	r16, 0x01	; 1
    bd52:	21 e0       	ldi	r18, 0x01	; 1
    bd54:	40 91 b4 0f 	lds	r20, 0x0FB4
    bd58:	82 e0       	ldi	r24, 0x02	; 2
    bd5a:	0e 94 16 49 	call	0x922c	; 0x922c <LBMoveSprite>
			LBMoveSprite(3, extendedSprites[3].x-8, extendedSprites[3].y, 1, 1);
    bd5e:	60 91 b7 0f 	lds	r22, 0x0FB7
    bd62:	68 50       	subi	r22, 0x08	; 8
    bd64:	21 e0       	ldi	r18, 0x01	; 1
    bd66:	40 91 b8 0f 	lds	r20, 0x0FB8
    bd6a:	83 e0       	ldi	r24, 0x03	; 3
    bd6c:	0e 94 16 49 	call	0x922c	; 0x922c <LBMoveSprite>
    bd70:	5a c0       	rjmp	.+180    	; 0xbe26 <update_high_scores+0x16a>
		}
		else if (game.joypadState.pressed & BTN_UP)
    bd72:	24 ff       	sbrs	r18, 4
    bd74:	13 c0       	rjmp	.+38     	; 0xbd9c <update_high_scores+0xe0>
		{
			SFX_NAVIGATE;
    bd76:	41 e0       	ldi	r20, 0x01	; 1
    bd78:	6f ef       	ldi	r22, 0xFF	; 255
    bd7a:	82 e0       	ldi	r24, 0x02	; 2
    bd7c:	0e 94 dc 3b 	call	0x77b8	; 0x77b8 <TriggerFx>
			scores.data[game.high_score_index] = scores.data[game.high_score_index]-1;
    bd80:	80 91 b4 0d 	lds	r24, 0x0DB4
    bd84:	e8 2f       	mov	r30, r24
    bd86:	ff 27       	eor	r31, r31
    bd88:	e7 fd       	sbrc	r30, 7
    bd8a:	f0 95       	com	r31
    bd8c:	ea 57       	subi	r30, 0x7A	; 122
    bd8e:	f2 4f       	sbci	r31, 0xF2	; 242
    bd90:	92 81       	ldd	r25, Z+2	; 0x02
    bd92:	91 50       	subi	r25, 0x01	; 1
			if (scores.data[game.high_score_index] < 'A') scores.data[game.high_score_index] = 'A';
    bd94:	91 34       	cpi	r25, 0x41	; 65
    bd96:	b0 f4       	brcc	.+44     	; 0xbdc4 <update_high_scores+0x108>
    bd98:	91 e4       	ldi	r25, 0x41	; 65
    bd9a:	14 c0       	rjmp	.+40     	; 0xbdc4 <update_high_scores+0x108>
			LBPrintChar(11+(game.high_score_index % 5), 7+(game.high_score_index/5)*2, scores.data[game.high_score_index]);
		}
		else if (game.joypadState.pressed & BTN_DOWN)
    bd9c:	25 ff       	sbrs	r18, 5
    bd9e:	1f c0       	rjmp	.+62     	; 0xbdde <update_high_scores+0x122>
		{
			SFX_NAVIGATE;
    bda0:	41 e0       	ldi	r20, 0x01	; 1
    bda2:	6f ef       	ldi	r22, 0xFF	; 255
    bda4:	82 e0       	ldi	r24, 0x02	; 2
    bda6:	0e 94 dc 3b 	call	0x77b8	; 0x77b8 <TriggerFx>
			scores.data[game.high_score_index] = scores.data[game.high_score_index]+1;
    bdaa:	80 91 b4 0d 	lds	r24, 0x0DB4
    bdae:	e8 2f       	mov	r30, r24
    bdb0:	ff 27       	eor	r31, r31
    bdb2:	e7 fd       	sbrc	r30, 7
    bdb4:	f0 95       	com	r31
    bdb6:	ea 57       	subi	r30, 0x7A	; 122
    bdb8:	f2 4f       	sbci	r31, 0xF2	; 242
    bdba:	92 81       	ldd	r25, Z+2	; 0x02
    bdbc:	9f 5f       	subi	r25, 0xFF	; 255
			if (scores.data[game.high_score_index] > 'Z') scores.data[game.high_score_index] = 'Z';
    bdbe:	9b 35       	cpi	r25, 0x5B	; 91
    bdc0:	08 f0       	brcs	.+2      	; 0xbdc4 <update_high_scores+0x108>
    bdc2:	9a e5       	ldi	r25, 0x5A	; 90
    bdc4:	92 83       	std	Z+2, r25	; 0x02
			LBPrintChar(11+(game.high_score_index % 5), 7+(game.high_score_index/5)*2, scores.data[game.high_score_index]);
    bdc6:	65 e0       	ldi	r22, 0x05	; 5
    bdc8:	0e 94 8b 65 	call	0xcb16	; 0xcb16 <__divmodqi4>
    bdcc:	68 2f       	mov	r22, r24
    bdce:	66 0f       	add	r22, r22
    bdd0:	69 5f       	subi	r22, 0xF9	; 249
    bdd2:	42 81       	ldd	r20, Z+2	; 0x02
    bdd4:	8b e0       	ldi	r24, 0x0B	; 11
    bdd6:	89 0f       	add	r24, r25
			game.high_score_index = -1;
			game.score = 0;
			save_eeprom(&scores);
		}
	}
}
    bdd8:	0f 91       	pop	r16
		else if (game.joypadState.pressed & BTN_DOWN)
		{
			SFX_NAVIGATE;
			scores.data[game.high_score_index] = scores.data[game.high_score_index]+1;
			if (scores.data[game.high_score_index] > 'Z') scores.data[game.high_score_index] = 'Z';
			LBPrintChar(11+(game.high_score_index % 5), 7+(game.high_score_index/5)*2, scores.data[game.high_score_index]);
    bdda:	0c 94 d3 47 	jmp	0x8fa6	; 0x8fa6 <LBPrintChar>
		}
		else if (select_pressed(&game.joypadState))
    bdde:	8a e9       	ldi	r24, 0x9A	; 154
    bde0:	9f e0       	ldi	r25, 0x0F	; 15
    bde2:	0e 94 32 5b 	call	0xb664	; 0xb664 <select_pressed>
    bde6:	88 23       	and	r24, r24
    bde8:	f1 f0       	breq	.+60     	; 0xbe26 <update_high_scores+0x16a>
		{
			SFX_NAVIGATE;
    bdea:	41 e0       	ldi	r20, 0x01	; 1
    bdec:	6f ef       	ldi	r22, 0xFF	; 255
    bdee:	82 e0       	ldi	r24, 0x02	; 2
    bdf0:	0e 94 dc 3b 	call	0x77b8	; 0x77b8 <TriggerFx>
			LBMoveSprite(2, OFF_SCREEN, 0, 1, 1);
    bdf4:	01 e0       	ldi	r16, 0x01	; 1
    bdf6:	21 e0       	ldi	r18, 0x01	; 1
    bdf8:	40 e0       	ldi	r20, 0x00	; 0
    bdfa:	60 ee       	ldi	r22, 0xE0	; 224
    bdfc:	82 e0       	ldi	r24, 0x02	; 2
    bdfe:	0e 94 16 49 	call	0x922c	; 0x922c <LBMoveSprite>
			LBMoveSprite(3, OFF_SCREEN, 0, 1, 1);
    be02:	21 e0       	ldi	r18, 0x01	; 1
    be04:	40 e0       	ldi	r20, 0x00	; 0
    be06:	60 ee       	ldi	r22, 0xE0	; 224
    be08:	83 e0       	ldi	r24, 0x03	; 3
    be0a:	0e 94 16 49 	call	0x922c	; 0x922c <LBMoveSprite>
			game.high_score_index = -1;
    be0e:	8f ef       	ldi	r24, 0xFF	; 255
    be10:	80 93 b4 0d 	sts	0x0DB4, r24
			game.score = 0;
    be14:	10 92 af 0d 	sts	0x0DAF, r1
    be18:	10 92 ae 0d 	sts	0x0DAE, r1
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    be1c:	86 e8       	ldi	r24, 0x86	; 134
    be1e:	9d e0       	ldi	r25, 0x0D	; 13
			game.high_score_index = -1;
			game.score = 0;
			save_eeprom(&scores);
		}
	}
}
    be20:	0f 91       	pop	r16
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    be22:	0c 94 78 39 	jmp	0x72f0	; 0x72f0 <EepromWriteBlock>
			game.high_score_index = -1;
			game.score = 0;
			save_eeprom(&scores);
		}
	}
}
    be26:	0f 91       	pop	r16
    be28:	08 95       	ret

0000be2a <tally_score>:
		}
	}
}

void tally_score(char* title, u16 bonus)
{
    be2a:	5f 92       	push	r5
    be2c:	6f 92       	push	r6
    be2e:	7f 92       	push	r7
    be30:	8f 92       	push	r8
    be32:	9f 92       	push	r9
    be34:	af 92       	push	r10
    be36:	bf 92       	push	r11
    be38:	cf 92       	push	r12
    be3a:	df 92       	push	r13
    be3c:	ef 92       	push	r14
    be3e:	ff 92       	push	r15
    be40:	0f 93       	push	r16
    be42:	1f 93       	push	r17
    be44:	cf 93       	push	r28
    be46:	df 93       	push	r29
    be48:	6c 01       	movw	r12, r24
    be4a:	7b 01       	movw	r14, r22
	u8 x = Screen.scrollX / 8;
    be4c:	c0 91 b2 0c 	lds	r28, 0x0CB2
    be50:	c6 95       	lsr	r28
    be52:	c6 95       	lsr	r28
    be54:	c6 95       	lsr	r28
	u8 y = Screen.scrollY / 8;
    be56:	00 91 b3 0c 	lds	r16, 0x0CB3
    be5a:	06 95       	lsr	r16
    be5c:	06 95       	lsr	r16
    be5e:	06 95       	lsr	r16
	u16 counter = 0;
	
	//hide_sprites(0, MAX_EXTENDED_SPRITES);
	//LBRotateSprites();
	
	StopSong();
    be60:	0e 94 1a 3b 	call	0x7634	; 0x7634 <StopSong>
	DrawMap2((x+8)%32, (y+6)%30, map_canvas);
    be64:	10 e0       	ldi	r17, 0x00	; 0
    be66:	d0 e0       	ldi	r29, 0x00	; 0
    be68:	c8 01       	movw	r24, r16
    be6a:	06 96       	adiw	r24, 0x06	; 6
    be6c:	2e e1       	ldi	r18, 0x1E	; 30
    be6e:	a2 2e       	mov	r10, r18
    be70:	b1 2c       	mov	r11, r1
    be72:	b5 01       	movw	r22, r10
    be74:	0e 94 ad 65 	call	0xcb5a	; 0xcb5a <__divmodhi4>
    be78:	9e 01       	movw	r18, r28
    be7a:	28 5f       	subi	r18, 0xF8	; 248
    be7c:	3f 4f       	sbci	r19, 0xFF	; 255
    be7e:	49 e5       	ldi	r20, 0x59	; 89
    be80:	54 e6       	ldi	r21, 0x64	; 100
    be82:	68 2f       	mov	r22, r24
    be84:	82 2f       	mov	r24, r18
    be86:	8f 71       	andi	r24, 0x1F	; 31
    be88:	0e 94 5c 46 	call	0x8cb8	; 0x8cb8 <DrawMap>
	LBPrint((x+10)%32, (y+7)%30, title);
    be8c:	c8 01       	movw	r24, r16
    be8e:	07 96       	adiw	r24, 0x07	; 7
    be90:	b5 01       	movw	r22, r10
    be92:	0e 94 ad 65 	call	0xcb5a	; 0xcb5a <__divmodhi4>
    be96:	9e 01       	movw	r18, r28
    be98:	26 5f       	subi	r18, 0xF6	; 246
    be9a:	3f 4f       	sbci	r19, 0xFF	; 255
    be9c:	a6 01       	movw	r20, r12
    be9e:	68 2f       	mov	r22, r24
    bea0:	82 2f       	mov	r24, r18
    bea2:	8f 71       	andi	r24, 0x1F	; 31
    bea4:	0e 94 f3 47 	call	0x8fe6	; 0x8fe6 <LBPrint>
	LBPrint((x+9)%32, (y+9)%30, (char*) strTally);
    bea8:	c8 01       	movw	r24, r16
    beaa:	09 96       	adiw	r24, 0x09	; 9
    beac:	b5 01       	movw	r22, r10
    beae:	0e 94 ad 65 	call	0xcb5a	; 0xcb5a <__divmodhi4>
    beb2:	68 2e       	mov	r6, r24
    beb4:	98 2e       	mov	r9, r24
    beb6:	6e 01       	movw	r12, r28
    beb8:	29 e0       	ldi	r18, 0x09	; 9
    beba:	c2 0e       	add	r12, r18
    bebc:	d1 1c       	adc	r13, r1
    bebe:	8f e1       	ldi	r24, 0x1F	; 31
    bec0:	c8 22       	and	r12, r24
    bec2:	dd 24       	eor	r13, r13
    bec4:	40 e1       	ldi	r20, 0x10	; 16
    bec6:	5b e0       	ldi	r21, 0x0B	; 11
    bec8:	66 2d       	mov	r22, r6
    beca:	8c 2d       	mov	r24, r12
    becc:	0e 94 f3 47 	call	0x8fe6	; 0x8fe6 <LBPrint>
	LBPrint((x+9)%32, (y+11)%30, (char*) strScore);
    bed0:	c8 01       	movw	r24, r16
    bed2:	0b 96       	adiw	r24, 0x0b	; 11
    bed4:	b5 01       	movw	r22, r10
    bed6:	0e 94 ad 65 	call	0xcb5a	; 0xcb5a <__divmodhi4>
    beda:	58 2e       	mov	r5, r24
    bedc:	88 2e       	mov	r8, r24
    bede:	45 e6       	ldi	r20, 0x65	; 101
    bee0:	5b e0       	ldi	r21, 0x0B	; 11
    bee2:	68 2f       	mov	r22, r24
    bee4:	8c 2d       	mov	r24, r12
    bee6:	0e 94 f3 47 	call	0x8fe6	; 0x8fe6 <LBPrint>
	LBPrint((x+9)%32, (y+12)%30, (char*) strTime);
    beea:	c8 01       	movw	r24, r16
    beec:	0c 96       	adiw	r24, 0x0c	; 12
    beee:	b5 01       	movw	r22, r10
    bef0:	0e 94 ad 65 	call	0xcb5a	; 0xcb5a <__divmodhi4>
    bef4:	78 2e       	mov	r7, r24
    bef6:	d8 2e       	mov	r13, r24
    bef8:	40 e5       	ldi	r20, 0x50	; 80
    befa:	5b e0       	ldi	r21, 0x0B	; 11
    befc:	68 2f       	mov	r22, r24
    befe:	8c 2d       	mov	r24, r12
    bf00:	0e 94 f3 47 	call	0x8fe6	; 0x8fe6 <LBPrint>
	LBPrint((x+9)%32, (y+13)%30, (char*) strLevelBonus);
    bf04:	c8 01       	movw	r24, r16
    bf06:	0d 96       	adiw	r24, 0x0d	; 13
    bf08:	b5 01       	movw	r22, r10
    bf0a:	0e 94 ad 65 	call	0xcb5a	; 0xcb5a <__divmodhi4>
    bf0e:	18 2f       	mov	r17, r24
    bf10:	b8 2e       	mov	r11, r24
    bf12:	40 e2       	ldi	r20, 0x20	; 32
    bf14:	5b e0       	ldi	r21, 0x0B	; 11
    bf16:	68 2f       	mov	r22, r24
    bf18:	8c 2d       	mov	r24, r12
    bf1a:	0e 94 f3 47 	call	0x8fe6	; 0x8fe6 <LBPrint>
	
	LBPrintInt((x+20)%32, (y+9)%30, 0, true);
    bf1e:	64 96       	adiw	r28, 0x14	; 20
    bf20:	cf 71       	andi	r28, 0x1F	; 31
    bf22:	dd 27       	eor	r29, r29
    bf24:	cc 2e       	mov	r12, r28
    bf26:	21 e0       	ldi	r18, 0x01	; 1
    bf28:	40 e0       	ldi	r20, 0x00	; 0
    bf2a:	50 e0       	ldi	r21, 0x00	; 0
    bf2c:	66 2d       	mov	r22, r6
    bf2e:	8c 2f       	mov	r24, r28
    bf30:	0e 94 40 48 	call	0x9080	; 0x9080 <LBPrintInt>
	LBPrintInt((x+20)%32, (y+11)%30, game.score, true);
    bf34:	40 91 ae 0d 	lds	r20, 0x0DAE
    bf38:	50 91 af 0d 	lds	r21, 0x0DAF
    bf3c:	21 e0       	ldi	r18, 0x01	; 1
    bf3e:	65 2d       	mov	r22, r5
    bf40:	8c 2f       	mov	r24, r28
    bf42:	0e 94 40 48 	call	0x9080	; 0x9080 <LBPrintInt>
	LBPrintInt((x+20)%32, (y+12)%30, game.time, true);
    bf46:	40 91 b0 0d 	lds	r20, 0x0DB0
    bf4a:	50 91 b1 0d 	lds	r21, 0x0DB1
    bf4e:	21 e0       	ldi	r18, 0x01	; 1
    bf50:	67 2d       	mov	r22, r7
    bf52:	8c 2f       	mov	r24, r28
    bf54:	0e 94 40 48 	call	0x9080	; 0x9080 <LBPrintInt>
	LBPrintInt((x+20)%32, (y+13)%30, bonus, true);
    bf58:	21 e0       	ldi	r18, 0x01	; 1
    bf5a:	a7 01       	movw	r20, r14
    bf5c:	61 2f       	mov	r22, r17
    bf5e:	8c 2f       	mov	r24, r28
    bf60:	0e 94 40 48 	call	0x9080	; 0x9080 <LBPrintInt>
	
	LBWaitSeconds(2);
    bf64:	82 e0       	ldi	r24, 0x02	; 2
    bf66:	0e 94 b5 48 	call	0x916a	; 0x916a <LBWaitSeconds>
	
	// Tally Score
	counter = game.score;
    bf6a:	c0 91 ae 0d 	lds	r28, 0x0DAE
    bf6e:	d0 91 af 0d 	lds	r29, 0x0DAF

void tally_score(char* title, u16 bonus)
{
	u8 x = Screen.scrollX / 8;
	u8 y = Screen.scrollY / 8;
	u16 tally = 0;
    bf72:	00 e0       	ldi	r16, 0x00	; 0
    bf74:	10 e0       	ldi	r17, 0x00	; 0
	
	LBWaitSeconds(2);
	
	// Tally Score
	counter = game.score;
	while (counter > 0)
    bf76:	0c 17       	cp	r16, r28
    bf78:	1d 07       	cpc	r17, r29
    bf7a:	f9 f0       	breq	.+62     	; 0xbfba <tally_score+0x190>
	{
		WaitVsync(1);
    bf7c:	81 e0       	ldi	r24, 0x01	; 1
    bf7e:	90 e0       	ldi	r25, 0x00	; 0
    bf80:	0e 94 c5 46 	call	0x8d8a	; 0x8d8a <WaitVsync>
		SFX_HIT;
    bf84:	41 e0       	ldi	r20, 0x01	; 1
    bf86:	6f ef       	ldi	r22, 0xFF	; 255
    bf88:	84 e0       	ldi	r24, 0x04	; 4
    bf8a:	0e 94 dc 3b 	call	0x77b8	; 0x77b8 <TriggerFx>
		tally += 1;
    bf8e:	0f 5f       	subi	r16, 0xFF	; 255
    bf90:	1f 4f       	sbci	r17, 0xFF	; 255
		counter -= 1;
    bf92:	3e 01       	movw	r6, r28
    bf94:	60 1a       	sub	r6, r16
    bf96:	71 0a       	sbc	r7, r17
		LBPrintInt((x+20)%32, (y+9)%30, tally, true);
    bf98:	21 e0       	ldi	r18, 0x01	; 1
    bf9a:	a8 01       	movw	r20, r16
    bf9c:	69 2d       	mov	r22, r9
    bf9e:	8c 2d       	mov	r24, r12
    bfa0:	0e 94 40 48 	call	0x9080	; 0x9080 <LBPrintInt>
		LBPrintInt((x+20)%32, (y+11)%30, counter, true);
    bfa4:	21 e0       	ldi	r18, 0x01	; 1
    bfa6:	a3 01       	movw	r20, r6
    bfa8:	68 2d       	mov	r22, r8
    bfaa:	8c 2d       	mov	r24, r12
    bfac:	0e 94 40 48 	call	0x9080	; 0x9080 <LBPrintInt>
		WaitUs(TALLY_DELAY);
    bfb0:	8c ed       	ldi	r24, 0xDC	; 220
    bfb2:	95 e0       	ldi	r25, 0x05	; 5
    bfb4:	0e 94 33 38 	call	0x7066	; 0x7066 <WaitUs>
    bfb8:	de cf       	rjmp	.-68     	; 0xbf76 <tally_score+0x14c>
	}
	
	// Tally Time
	counter = game.time;
    bfba:	00 91 b0 0d 	lds	r16, 0x0DB0
    bfbe:	10 91 b1 0d 	lds	r17, 0x0DB1
	while (counter > 0)
    bfc2:	01 15       	cp	r16, r1
    bfc4:	11 05       	cpc	r17, r1
    bfc6:	29 f1       	breq	.+74     	; 0xc012 <tally_score+0x1e8>
	{
		WaitVsync(1);
    bfc8:	81 e0       	ldi	r24, 0x01	; 1
    bfca:	90 e0       	ldi	r25, 0x00	; 0
    bfcc:	0e 94 c5 46 	call	0x8d8a	; 0x8d8a <WaitVsync>
		SFX_HIT;
    bfd0:	41 e0       	ldi	r20, 0x01	; 1
    bfd2:	6f ef       	ldi	r22, 0xFF	; 255
    bfd4:	84 e0       	ldi	r24, 0x04	; 4
    bfd6:	0e 94 dc 3b 	call	0x77b8	; 0x77b8 <TriggerFx>
		tally -= 1;
		if (tally == 0 || tally == 65535) tally = 0;
    bfda:	ce 01       	movw	r24, r28
    bfdc:	02 97       	sbiw	r24, 0x02	; 2
    bfde:	8e 3f       	cpi	r24, 0xFE	; 254
    bfe0:	9f 4f       	sbci	r25, 0xFF	; 255
    bfe2:	10 f4       	brcc	.+4      	; 0xbfe8 <tally_score+0x1be>
	counter = game.time;
	while (counter > 0)
	{
		WaitVsync(1);
		SFX_HIT;
		tally -= 1;
    bfe4:	21 97       	sbiw	r28, 0x01	; 1
    bfe6:	02 c0       	rjmp	.+4      	; 0xbfec <tally_score+0x1c2>
		if (tally == 0 || tally == 65535) tally = 0;
    bfe8:	c0 e0       	ldi	r28, 0x00	; 0
    bfea:	d0 e0       	ldi	r29, 0x00	; 0
		counter -= 1;
    bfec:	01 50       	subi	r16, 0x01	; 1
    bfee:	11 09       	sbc	r17, r1
		LBPrintInt((x+20)%32, (y+9)%30, tally, true);
    bff0:	21 e0       	ldi	r18, 0x01	; 1
    bff2:	ae 01       	movw	r20, r28
    bff4:	69 2d       	mov	r22, r9
    bff6:	8c 2d       	mov	r24, r12
    bff8:	0e 94 40 48 	call	0x9080	; 0x9080 <LBPrintInt>
		LBPrintInt((x+20)%32, (y+12)%30, counter, true);
    bffc:	21 e0       	ldi	r18, 0x01	; 1
    bffe:	a8 01       	movw	r20, r16
    c000:	6d 2d       	mov	r22, r13
    c002:	8c 2d       	mov	r24, r12
    c004:	0e 94 40 48 	call	0x9080	; 0x9080 <LBPrintInt>
		WaitUs(TALLY_DELAY);
    c008:	8c ed       	ldi	r24, 0xDC	; 220
    c00a:	95 e0       	ldi	r25, 0x05	; 5
    c00c:	0e 94 33 38 	call	0x7066	; 0x7066 <WaitUs>
    c010:	d8 cf       	rjmp	.-80     	; 0xbfc2 <tally_score+0x198>
    c012:	3e 01       	movw	r6, r28
		WaitUs(TALLY_DELAY);
	}
	
	// Tally Time
	counter = game.time;
	while (counter > 0)
    c014:	87 01       	movw	r16, r14
		WaitUs(TALLY_DELAY);
	}
	
	// Tally Level Bonus
	counter = bonus;
	while (counter > 0)
    c016:	01 15       	cp	r16, r1
    c018:	11 05       	cpc	r17, r1
    c01a:	e9 f0       	breq	.+58     	; 0xc056 <tally_score+0x22c>
	{
		WaitVsync(1);
    c01c:	81 e0       	ldi	r24, 0x01	; 1
    c01e:	90 e0       	ldi	r25, 0x00	; 0
    c020:	0e 94 c5 46 	call	0x8d8a	; 0x8d8a <WaitVsync>
		SFX_HIT;
    c024:	41 e0       	ldi	r20, 0x01	; 1
    c026:	6f ef       	ldi	r22, 0xFF	; 255
    c028:	84 e0       	ldi	r24, 0x04	; 4
    c02a:	0e 94 dc 3b 	call	0x77b8	; 0x77b8 <TriggerFx>
		tally += 1;
    c02e:	21 96       	adiw	r28, 0x01	; 1
		counter -= 1;
    c030:	01 50       	subi	r16, 0x01	; 1
    c032:	11 09       	sbc	r17, r1
		LBPrintInt((x+20)%32, (y+9)%30, tally, true);
    c034:	21 e0       	ldi	r18, 0x01	; 1
    c036:	ae 01       	movw	r20, r28
    c038:	69 2d       	mov	r22, r9
    c03a:	8c 2d       	mov	r24, r12
    c03c:	0e 94 40 48 	call	0x9080	; 0x9080 <LBPrintInt>
		LBPrintInt((x+20)%32, (y+13)%30, counter, true);
    c040:	21 e0       	ldi	r18, 0x01	; 1
    c042:	a8 01       	movw	r20, r16
    c044:	6b 2d       	mov	r22, r11
    c046:	8c 2d       	mov	r24, r12
    c048:	0e 94 40 48 	call	0x9080	; 0x9080 <LBPrintInt>
		WaitUs(TALLY_DELAY);
    c04c:	8c ed       	ldi	r24, 0xDC	; 220
    c04e:	95 e0       	ldi	r25, 0x05	; 5
    c050:	0e 94 33 38 	call	0x7066	; 0x7066 <WaitUs>
    c054:	e0 cf       	rjmp	.-64     	; 0xc016 <tally_score+0x1ec>
    c056:	e6 0c       	add	r14, r6
    c058:	f7 1c       	adc	r15, r7
	}
	
	game.score = tally;
    c05a:	f0 92 af 0d 	sts	0x0DAF, r15
    c05e:	e0 92 ae 0d 	sts	0x0DAE, r14
	game.time = 0;
    c062:	10 92 b1 0d 	sts	0x0DB1, r1
    c066:	10 92 b0 0d 	sts	0x0DB0, r1
	LBWaitSeconds(2);
    c06a:	82 e0       	ldi	r24, 0x02	; 2
    c06c:	0e 94 b5 48 	call	0x916a	; 0x916a <LBWaitSeconds>
	render_camera_view();
}
    c070:	df 91       	pop	r29
    c072:	cf 91       	pop	r28
    c074:	1f 91       	pop	r17
    c076:	0f 91       	pop	r16
    c078:	ff 90       	pop	r15
    c07a:	ef 90       	pop	r14
    c07c:	df 90       	pop	r13
    c07e:	cf 90       	pop	r12
    c080:	bf 90       	pop	r11
    c082:	af 90       	pop	r10
    c084:	9f 90       	pop	r9
    c086:	8f 90       	pop	r8
    c088:	7f 90       	pop	r7
    c08a:	6f 90       	pop	r6
    c08c:	5f 90       	pop	r5
	}
	
	game.score = tally;
	game.time = 0;
	LBWaitSeconds(2);
	render_camera_view();
    c08e:	0c 94 32 4c 	jmp	0x9864	; 0x9864 <render_camera_view>

0000c092 <handle_player_death>:
	}
}

void handle_player_death()
{
	game.lives--;
    c092:	80 91 b5 0d 	lds	r24, 0x0DB5
    c096:	81 50       	subi	r24, 0x01	; 1
    c098:	80 93 b5 0d 	sts	0x0DB5, r24
	clear_sprites(0, 6);
    c09c:	66 e0       	ldi	r22, 0x06	; 6
    c09e:	80 e0       	ldi	r24, 0x00	; 0
    c0a0:	0e 94 06 5a 	call	0xb40c	; 0xb40c <clear_sprites>
	LBRotateSprites();
    c0a4:	0e 94 54 49 	call	0x92a8	; 0x92a8 <LBRotateSprites>
	if (game.lives == 0)
    c0a8:	80 91 b5 0d 	lds	r24, 0x0DB5
    c0ac:	81 11       	cpse	r24, r1
    c0ae:	08 c0       	rjmp	.+16     	; 0xc0c0 <handle_player_death+0x2e>
	{
		tally_score((char*) strGameOver, 0);
    c0b0:	60 e0       	ldi	r22, 0x00	; 0
    c0b2:	70 e0       	ldi	r23, 0x00	; 0
    c0b4:	86 e1       	ldi	r24, 0x16	; 22
    c0b6:	9b e0       	ldi	r25, 0x0B	; 11
    c0b8:	0e 94 15 5f 	call	0xbe2a	; 0xbe2a <tally_score>
		exit_game();
    c0bc:	0c 94 09 5e 	jmp	0xbc12	; 0xbc12 <exit_game>
		return;
	}
	FadeOut(FRAMES_PER_FADE, true);
    c0c0:	61 e0       	ldi	r22, 0x01	; 1
    c0c2:	81 e0       	ldi	r24, 0x01	; 1
    c0c4:	0e 94 2d 47 	call	0x8e5a	; 0x8e5a <FadeOut>
	ClearVram();
    c0c8:	0e 94 fd 37 	call	0x6ffa	; 0x6ffa <ClearVram>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    c0cc:	64 e1       	ldi	r22, 0x14	; 20
    c0ce:	80 e0       	ldi	r24, 0x00	; 0
    c0d0:	0e 94 06 5a 	call	0xb40c	; 0xb40c <clear_sprites>
	LBRotateSprites();
    c0d4:	0e 94 54 49 	call	0x92a8	; 0x92a8 <LBRotateSprites>
	FadeIn(FRAMES_PER_FADE, false);
    c0d8:	60 e0       	ldi	r22, 0x00	; 0
    c0da:	81 e0       	ldi	r24, 0x01	; 1
    c0dc:	0e 94 21 47 	call	0x8e42	; 0x8e42 <FadeIn>
	init_player_state();
    c0e0:	0e 94 c1 49 	call	0x9382	; 0x9382 <init_player_state>
	init_enemy_state();
    c0e4:	0e 94 ad 49 	call	0x935a	; 0x935a <init_enemy_state>
	load_level(game.current_level_index, false);
    c0e8:	60 e0       	ldi	r22, 0x00	; 0
    c0ea:	80 91 b7 0d 	lds	r24, 0x0DB7
    c0ee:	0c 94 38 5a 	jmp	0xb470	; 0xb470 <load_level>

0000c0f2 <update_player>:
}

void update_player()
{
    c0f2:	cf 92       	push	r12
    c0f4:	df 92       	push	r13
    c0f6:	ef 92       	push	r14
    c0f8:	ff 92       	push	r15
    c0fa:	0f 93       	push	r16
    c0fc:	1f 93       	push	r17
    c0fe:	cf 93       	push	r28
    c100:	df 93       	push	r29
    c102:	1f 92       	push	r1
    c104:	cd b7       	in	r28, 0x3d	; 61
    c106:	de b7       	in	r29, 0x3e	; 62
	
	if (game.player.flags & EXPLODING)
    c108:	10 91 d4 0d 	lds	r17, 0x0DD4
    c10c:	14 ff       	sbrs	r17, 4
    c10e:	19 c0       	rjmp	.+50     	; 0xc142 <update_player+0x50>
	{
		if (map_explosion(&game.player.flags, &game.player.expl, PLAYER_SLOT, game.player.width, game.player.height))
    c110:	00 91 d8 0d 	lds	r16, 0x0DD8
    c114:	20 91 d7 0d 	lds	r18, 0x0DD7
    c118:	40 e0       	ldi	r20, 0x00	; 0
    c11a:	68 e4       	ldi	r22, 0x48	; 72
    c11c:	7e e0       	ldi	r23, 0x0E	; 14
    c11e:	84 ed       	ldi	r24, 0xD4	; 212
    c120:	9d e0       	ldi	r25, 0x0D	; 13
    c122:	0e 94 06 55 	call	0xaa0c	; 0xaa0c <map_explosion>
    c126:	88 23       	and	r24, r24
    c128:	09 f4       	brne	.+2      	; 0xc12c <update_player+0x3a>
    c12a:	d8 c2       	rjmp	.+1456   	; 0xc6dc <update_player+0x5ea>
		{
			game.player.direction = D_RIGHT;
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.prone), 0);
		}
	}
}
    c12c:	0f 90       	pop	r0
    c12e:	df 91       	pop	r29
    c130:	cf 91       	pop	r28
    c132:	1f 91       	pop	r17
    c134:	0f 91       	pop	r16
    c136:	ff 90       	pop	r15
    c138:	ef 90       	pop	r14
    c13a:	df 90       	pop	r13
    c13c:	cf 90       	pop	r12
	
	if (game.player.flags & EXPLODING)
	{
		if (map_explosion(&game.player.flags, &game.player.expl, PLAYER_SLOT, game.player.width, game.player.height))
		{
			handle_player_death();
    c13e:	0c 94 49 60 	jmp	0xc092	; 0xc092 <handle_player_death>
		}
	}
	else if (is_space())
    c142:	0e 94 93 49 	call	0x9326	; 0x9326 <is_space>
    c146:	88 23       	and	r24, r24
    c148:	09 f4       	brne	.+2      	; 0xc14c <update_player+0x5a>
    c14a:	ab c0       	rjmp	.+342    	; 0xc2a2 <update_player+0x1b0>
	{
		game.player.shared.vy = 0;
    c14c:	10 92 c4 0d 	sts	0x0DC4, r1
    c150:	10 92 c5 0d 	sts	0x0DC5, r1
    c154:	10 92 c6 0d 	sts	0x0DC6, r1
    c158:	10 92 c7 0d 	sts	0x0DC7, r1
		game.player.shared.vx = SPACE_SHIP_SPEED;
    c15c:	8c e3       	ldi	r24, 0x3C	; 60
    c15e:	90 e0       	ldi	r25, 0x00	; 0
    c160:	90 93 d1 0d 	sts	0x0DD1, r25
    c164:	80 93 d0 0d 	sts	0x0DD0, r24
		
		if ((game.joypadState.held & BTN_DOWN) && (game.player.shared.y/8 + 1 < game.level_height))
    c168:	10 91 9e 0f 	lds	r17, 0x0F9E
    c16c:	15 ff       	sbrs	r17, 5
    c16e:	32 c0       	rjmp	.+100    	; 0xc1d4 <update_player+0xe2>
    c170:	20 e0       	ldi	r18, 0x00	; 0
    c172:	30 e0       	ldi	r19, 0x00	; 0
    c174:	40 e0       	ldi	r20, 0x00	; 0
    c176:	5e e3       	ldi	r21, 0x3E	; 62
    c178:	60 91 cc 0d 	lds	r22, 0x0DCC
    c17c:	70 91 cd 0d 	lds	r23, 0x0DCD
    c180:	80 91 ce 0d 	lds	r24, 0x0DCE
    c184:	90 91 cf 0d 	lds	r25, 0x0DCF
    c188:	0e 94 12 67 	call	0xce24	; 0xce24 <__mulsf3>
    c18c:	20 e0       	ldi	r18, 0x00	; 0
    c18e:	30 e0       	ldi	r19, 0x00	; 0
    c190:	40 e8       	ldi	r20, 0x80	; 128
    c192:	5f e3       	ldi	r21, 0x3F	; 63
    c194:	0e 94 c8 65 	call	0xcb90	; 0xcb90 <__addsf3>
    c198:	6b 01       	movw	r12, r22
    c19a:	7c 01       	movw	r14, r24
    c19c:	80 91 b9 0d 	lds	r24, 0x0DB9
    c1a0:	68 2f       	mov	r22, r24
    c1a2:	70 e0       	ldi	r23, 0x00	; 0
    c1a4:	80 e0       	ldi	r24, 0x00	; 0
    c1a6:	90 e0       	ldi	r25, 0x00	; 0
    c1a8:	0e 94 5e 66 	call	0xccbc	; 0xccbc <__floatsisf>
    c1ac:	9b 01       	movw	r18, r22
    c1ae:	ac 01       	movw	r20, r24
    c1b0:	c7 01       	movw	r24, r14
    c1b2:	b6 01       	movw	r22, r12
    c1b4:	0e 94 2c 66 	call	0xcc58	; 0xcc58 <__cmpsf2>
    c1b8:	87 ff       	sbrs	r24, 7
    c1ba:	0c c0       	rjmp	.+24     	; 0xc1d4 <update_player+0xe2>
		{
			game.player.shared.vy = SPACE_SHIP_SPEED;
    c1bc:	80 e0       	ldi	r24, 0x00	; 0
    c1be:	90 e0       	ldi	r25, 0x00	; 0
    c1c0:	a0 e7       	ldi	r26, 0x70	; 112
    c1c2:	b2 e4       	ldi	r27, 0x42	; 66
    c1c4:	80 93 c4 0d 	sts	0x0DC4, r24
    c1c8:	90 93 c5 0d 	sts	0x0DC5, r25
    c1cc:	a0 93 c6 0d 	sts	0x0DC6, r26
    c1d0:	b0 93 c7 0d 	sts	0x0DC7, r27
		}
		if ((game.joypadState.held & BTN_RIGHT) && (game.player.shared.x + 24 < game.camera_x + CAMERA_WIDTH*8))
    c1d4:	17 ff       	sbrs	r17, 7
    c1d6:	29 c0       	rjmp	.+82     	; 0xc22a <update_player+0x138>
    c1d8:	20 e0       	ldi	r18, 0x00	; 0
    c1da:	30 e0       	ldi	r19, 0x00	; 0
    c1dc:	40 ec       	ldi	r20, 0xC0	; 192
    c1de:	51 e4       	ldi	r21, 0x41	; 65
    c1e0:	60 91 c8 0d 	lds	r22, 0x0DC8
    c1e4:	70 91 c9 0d 	lds	r23, 0x0DC9
    c1e8:	80 91 ca 0d 	lds	r24, 0x0DCA
    c1ec:	90 91 cb 0d 	lds	r25, 0x0DCB
    c1f0:	0e 94 c8 65 	call	0xcb90	; 0xcb90 <__addsf3>
    c1f4:	6b 01       	movw	r12, r22
    c1f6:	7c 01       	movw	r14, r24
    c1f8:	80 91 aa 0d 	lds	r24, 0x0DAA
    c1fc:	90 91 ab 0d 	lds	r25, 0x0DAB
    c200:	80 52       	subi	r24, 0x20	; 32
    c202:	9f 4f       	sbci	r25, 0xFF	; 255
    c204:	bc 01       	movw	r22, r24
    c206:	80 e0       	ldi	r24, 0x00	; 0
    c208:	90 e0       	ldi	r25, 0x00	; 0
    c20a:	0e 94 5c 66 	call	0xccb8	; 0xccb8 <__floatunsisf>
    c20e:	9b 01       	movw	r18, r22
    c210:	ac 01       	movw	r20, r24
    c212:	c7 01       	movw	r24, r14
    c214:	b6 01       	movw	r22, r12
    c216:	0e 94 2c 66 	call	0xcc58	; 0xcc58 <__cmpsf2>
    c21a:	87 ff       	sbrs	r24, 7
    c21c:	06 c0       	rjmp	.+12     	; 0xc22a <update_player+0x138>
		{
			game.player.shared.vx = SPACE_SHIP_SPEED*2;
    c21e:	88 e7       	ldi	r24, 0x78	; 120
    c220:	90 e0       	ldi	r25, 0x00	; 0
    c222:	90 93 d1 0d 	sts	0x0DD1, r25
    c226:	80 93 d0 0d 	sts	0x0DD0, r24
		}
		if ((game.joypadState.held & BTN_LEFT) && (game.player.shared.x > game.camera_x))
    c22a:	16 ff       	sbrs	r17, 6
    c22c:	1a c0       	rjmp	.+52     	; 0xc262 <update_player+0x170>
    c22e:	60 91 aa 0d 	lds	r22, 0x0DAA
    c232:	70 91 ab 0d 	lds	r23, 0x0DAB
    c236:	80 e0       	ldi	r24, 0x00	; 0
    c238:	90 e0       	ldi	r25, 0x00	; 0
    c23a:	0e 94 5c 66 	call	0xccb8	; 0xccb8 <__floatunsisf>
    c23e:	9b 01       	movw	r18, r22
    c240:	ac 01       	movw	r20, r24
    c242:	60 91 c8 0d 	lds	r22, 0x0DC8
    c246:	70 91 c9 0d 	lds	r23, 0x0DC9
    c24a:	80 91 ca 0d 	lds	r24, 0x0DCA
    c24e:	90 91 cb 0d 	lds	r25, 0x0DCB
    c252:	0e 94 0e 67 	call	0xce1c	; 0xce1c <__gesf2>
    c256:	18 16       	cp	r1, r24
    c258:	24 f4       	brge	.+8      	; 0xc262 <update_player+0x170>
		{
			game.player.shared.vx = 0;
    c25a:	10 92 d1 0d 	sts	0x0DD1, r1
    c25e:	10 92 d0 0d 	sts	0x0DD0, r1
		}
		if ((game.joypadState.held & BTN_UP) && (game.player.shared.y > 0))
    c262:	14 ff       	sbrs	r17, 4
    c264:	1b c0       	rjmp	.+54     	; 0xc29c <update_player+0x1aa>
    c266:	20 e0       	ldi	r18, 0x00	; 0
    c268:	30 e0       	ldi	r19, 0x00	; 0
    c26a:	a9 01       	movw	r20, r18
    c26c:	60 91 cc 0d 	lds	r22, 0x0DCC
    c270:	70 91 cd 0d 	lds	r23, 0x0DCD
    c274:	80 91 ce 0d 	lds	r24, 0x0DCE
    c278:	90 91 cf 0d 	lds	r25, 0x0DCF
    c27c:	0e 94 0e 67 	call	0xce1c	; 0xce1c <__gesf2>
    c280:	18 16       	cp	r1, r24
    c282:	64 f4       	brge	.+24     	; 0xc29c <update_player+0x1aa>
		{
			game.player.shared.vy = -SPACE_SHIP_SPEED;
    c284:	80 e0       	ldi	r24, 0x00	; 0
    c286:	90 e0       	ldi	r25, 0x00	; 0
    c288:	a0 e7       	ldi	r26, 0x70	; 112
    c28a:	b2 ec       	ldi	r27, 0xC2	; 194
    c28c:	80 93 c4 0d 	sts	0x0DC4, r24
    c290:	90 93 c5 0d 	sts	0x0DC5, r25
    c294:	a0 93 c6 0d 	sts	0x0DC6, r26
    c298:	b0 93 c7 0d 	sts	0x0DC7, r27
		}
		LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.run), 0);
    c29c:	80 e3       	ldi	r24, 0x30	; 48
    c29e:	9e e0       	ldi	r25, 0x0E	; 14
    c2a0:	0d c2       	rjmp	.+1050   	; 0xc6bc <update_player+0x5ca>
	}
	else if (game.player.flags & (IDLE|RUNNING))
    c2a2:	81 2f       	mov	r24, r17
    c2a4:	8a 70       	andi	r24, 0x0A	; 10
    c2a6:	09 f4       	brne	.+2      	; 0xc2aa <update_player+0x1b8>
    c2a8:	ec c0       	rjmp	.+472    	; 0xc482 <update_player+0x390>
	{
		if (!on_solid_ground(&game.player.shared, game.player.width, game.player.height))
    c2aa:	40 91 d8 0d 	lds	r20, 0x0DD8
    c2ae:	60 91 d7 0d 	lds	r22, 0x0DD7
    c2b2:	84 ec       	ldi	r24, 0xC4	; 196
    c2b4:	9d e0       	ldi	r25, 0x0D	; 13
    c2b6:	0e 94 41 4e 	call	0x9c82	; 0x9c82 <on_solid_ground>
    c2ba:	81 11       	cpse	r24, r1
    c2bc:	07 c0       	rjmp	.+14     	; 0xc2cc <update_player+0x1da>
		{
			game.player.shared.gravity = GRAVITY;
    c2be:	8f ef       	ldi	r24, 0xFF	; 255
    c2c0:	80 93 d2 0d 	sts	0x0DD2, r24
			game.player.flags = JUMPING;
    c2c4:	81 e0       	ldi	r24, 0x01	; 1
    c2c6:	80 93 d4 0d 	sts	0x0DD4, r24
    c2ca:	de c1       	rjmp	.+956    	; 0xc688 <update_player+0x596>
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), extendedSprites[PLAYER_SLOT].flags);
		}
		else
		{
			if (game.joypadState.held & BTN_DOWN)
    c2cc:	10 91 9e 0f 	lds	r17, 0x0F9E
    c2d0:	15 ff       	sbrs	r17, 5
    c2d2:	46 c0       	rjmp	.+140    	; 0xc360 <update_player+0x26e>
			{
				game.player.shared.y += 16;
    c2d4:	20 e0       	ldi	r18, 0x00	; 0
    c2d6:	30 e0       	ldi	r19, 0x00	; 0
    c2d8:	40 e8       	ldi	r20, 0x80	; 128
    c2da:	51 e4       	ldi	r21, 0x41	; 65
    c2dc:	60 91 cc 0d 	lds	r22, 0x0DCC
    c2e0:	70 91 cd 0d 	lds	r23, 0x0DCD
    c2e4:	80 91 ce 0d 	lds	r24, 0x0DCE
    c2e8:	90 91 cf 0d 	lds	r25, 0x0DCF
    c2ec:	0e 94 c8 65 	call	0xcb90	; 0xcb90 <__addsf3>
    c2f0:	60 93 cc 0d 	sts	0x0DCC, r22
    c2f4:	70 93 cd 0d 	sts	0x0DCD, r23
    c2f8:	80 93 ce 0d 	sts	0x0DCE, r24
    c2fc:	90 93 cf 0d 	sts	0x0DCF, r25
				if(game.player.direction == D_RIGHT)
    c300:	80 91 d6 0d 	lds	r24, 0x0DD6
    c304:	81 30       	cpi	r24, 0x01	; 1
    c306:	b1 f4       	brne	.+44     	; 0xc334 <update_player+0x242>
				{
					game.player.shared.x -= 8;
    c308:	20 e0       	ldi	r18, 0x00	; 0
    c30a:	30 e0       	ldi	r19, 0x00	; 0
    c30c:	40 e0       	ldi	r20, 0x00	; 0
    c30e:	51 e4       	ldi	r21, 0x41	; 65
    c310:	60 91 c8 0d 	lds	r22, 0x0DC8
    c314:	70 91 c9 0d 	lds	r23, 0x0DC9
    c318:	80 91 ca 0d 	lds	r24, 0x0DCA
    c31c:	90 91 cb 0d 	lds	r25, 0x0DCB
    c320:	0e 94 c7 65 	call	0xcb8e	; 0xcb8e <__subsf3>
    c324:	60 93 c8 0d 	sts	0x0DC8, r22
    c328:	70 93 c9 0d 	sts	0x0DC9, r23
    c32c:	80 93 ca 0d 	sts	0x0DCA, r24
    c330:	90 93 cb 0d 	sts	0x0DCB, r25
				}
				game.player.shared.vx = 0;
    c334:	10 92 d1 0d 	sts	0x0DD1, r1
    c338:	10 92 d0 0d 	sts	0x0DD0, r1
				game.player.flags = PRONE;
    c33c:	84 e0       	ldi	r24, 0x04	; 4
    c33e:	80 93 d4 0d 	sts	0x0DD4, r24
				game.player.width = 3;
    c342:	83 e0       	ldi	r24, 0x03	; 3
    c344:	80 93 d7 0d 	sts	0x0DD7, r24
				game.player.height = 1;
    c348:	81 e0       	ldi	r24, 0x01	; 1
    c34a:	80 93 d8 0d 	sts	0x0DD8, r24
				clear_sprites(3, 3);
    c34e:	63 e0       	ldi	r22, 0x03	; 3
    c350:	83 e0       	ldi	r24, 0x03	; 3
    c352:	0e 94 06 5a 	call	0xb40c	; 0xb40c <clear_sprites>
				LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.prone), extendedSprites[PLAYER_SLOT].flags);
    c356:	40 91 ae 0f 	lds	r20, 0x0FAE
    c35a:	80 e4       	ldi	r24, 0x40	; 64
    c35c:	9e e0       	ldi	r25, 0x0E	; 14
    c35e:	6e c0       	rjmp	.+220    	; 0xc43c <update_player+0x34a>
			}
			else if ((game.joypadState.held & BTN_RIGHT) && (game.player.shared.x/8 + 2 < game.level_width))
    c360:	17 ff       	sbrs	r17, 7
    c362:	38 c0       	rjmp	.+112    	; 0xc3d4 <update_player+0x2e2>
    c364:	20 e0       	ldi	r18, 0x00	; 0
    c366:	30 e0       	ldi	r19, 0x00	; 0
    c368:	40 e0       	ldi	r20, 0x00	; 0
    c36a:	5e e3       	ldi	r21, 0x3E	; 62
    c36c:	60 91 c8 0d 	lds	r22, 0x0DC8
    c370:	70 91 c9 0d 	lds	r23, 0x0DC9
    c374:	80 91 ca 0d 	lds	r24, 0x0DCA
    c378:	90 91 cb 0d 	lds	r25, 0x0DCB
    c37c:	0e 94 12 67 	call	0xce24	; 0xce24 <__mulsf3>
    c380:	20 e0       	ldi	r18, 0x00	; 0
    c382:	30 e0       	ldi	r19, 0x00	; 0
    c384:	40 e0       	ldi	r20, 0x00	; 0
    c386:	50 e4       	ldi	r21, 0x40	; 64
    c388:	0e 94 c8 65 	call	0xcb90	; 0xcb90 <__addsf3>
    c38c:	6b 01       	movw	r12, r22
    c38e:	7c 01       	movw	r14, r24
    c390:	80 91 b8 0d 	lds	r24, 0x0DB8
    c394:	68 2f       	mov	r22, r24
    c396:	70 e0       	ldi	r23, 0x00	; 0
    c398:	80 e0       	ldi	r24, 0x00	; 0
    c39a:	90 e0       	ldi	r25, 0x00	; 0
    c39c:	0e 94 5e 66 	call	0xccbc	; 0xccbc <__floatsisf>
    c3a0:	9b 01       	movw	r18, r22
    c3a2:	ac 01       	movw	r20, r24
    c3a4:	c7 01       	movw	r24, r14
    c3a6:	b6 01       	movw	r22, r12
    c3a8:	0e 94 2c 66 	call	0xcc58	; 0xcc58 <__cmpsf2>
    c3ac:	87 ff       	sbrs	r24, 7
    c3ae:	12 c0       	rjmp	.+36     	; 0xc3d4 <update_player+0x2e2>
			{
				game.player.shared.vx = RUN_SPEED;
    c3b0:	8c e3       	ldi	r24, 0x3C	; 60
    c3b2:	90 e0       	ldi	r25, 0x00	; 0
    c3b4:	90 93 d1 0d 	sts	0x0DD1, r25
    c3b8:	80 93 d0 0d 	sts	0x0DD0, r24
				game.player.flags = RUNNING;
    c3bc:	82 e0       	ldi	r24, 0x02	; 2
    c3be:	80 93 d4 0d 	sts	0x0DD4, r24
				game.player.direction = D_RIGHT;
    c3c2:	81 e0       	ldi	r24, 0x01	; 1
    c3c4:	80 93 d6 0d 	sts	0x0DD6, r24
				LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.run), 0);
    c3c8:	80 e3       	ldi	r24, 0x30	; 48
    c3ca:	9e e0       	ldi	r25, 0x0E	; 14
    c3cc:	0e 94 62 47 	call	0x8ec4	; 0x8ec4 <LBGetNextFrame>
    c3d0:	40 e0       	ldi	r20, 0x00	; 0
    c3d2:	38 c0       	rjmp	.+112    	; 0xc444 <update_player+0x352>
			}
			else if ((game.joypadState.held & BTN_LEFT) && (game.player.shared.x > game.camera_x))
    c3d4:	16 ff       	sbrs	r17, 6
    c3d6:	27 c0       	rjmp	.+78     	; 0xc426 <update_player+0x334>
    c3d8:	60 91 aa 0d 	lds	r22, 0x0DAA
    c3dc:	70 91 ab 0d 	lds	r23, 0x0DAB
    c3e0:	80 e0       	ldi	r24, 0x00	; 0
    c3e2:	90 e0       	ldi	r25, 0x00	; 0
    c3e4:	0e 94 5c 66 	call	0xccb8	; 0xccb8 <__floatunsisf>
    c3e8:	9b 01       	movw	r18, r22
    c3ea:	ac 01       	movw	r20, r24
    c3ec:	60 91 c8 0d 	lds	r22, 0x0DC8
    c3f0:	70 91 c9 0d 	lds	r23, 0x0DC9
    c3f4:	80 91 ca 0d 	lds	r24, 0x0DCA
    c3f8:	90 91 cb 0d 	lds	r25, 0x0DCB
    c3fc:	0e 94 0e 67 	call	0xce1c	; 0xce1c <__gesf2>
    c400:	18 16       	cp	r1, r24
    c402:	8c f4       	brge	.+34     	; 0xc426 <update_player+0x334>
			{
				game.player.shared.vx = -RUN_SPEED;
    c404:	84 ec       	ldi	r24, 0xC4	; 196
    c406:	9f ef       	ldi	r25, 0xFF	; 255
    c408:	90 93 d1 0d 	sts	0x0DD1, r25
    c40c:	80 93 d0 0d 	sts	0x0DD0, r24
				game.player.flags = RUNNING;
    c410:	82 e0       	ldi	r24, 0x02	; 2
    c412:	80 93 d4 0d 	sts	0x0DD4, r24
				game.player.direction = D_LEFT;
    c416:	10 92 d6 0d 	sts	0x0DD6, r1
				LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.run), SPRITE_FLIP_X);
    c41a:	80 e3       	ldi	r24, 0x30	; 48
    c41c:	9e e0       	ldi	r25, 0x0E	; 14
    c41e:	0e 94 62 47 	call	0x8ec4	; 0x8ec4 <LBGetNextFrame>
    c422:	41 e0       	ldi	r20, 0x01	; 1
    c424:	0f c0       	rjmp	.+30     	; 0xc444 <update_player+0x352>
			}
			else
			{
				game.player.flags = IDLE;
    c426:	88 e0       	ldi	r24, 0x08	; 8
    c428:	80 93 d4 0d 	sts	0x0DD4, r24
				game.player.shared.vx = 0;
    c42c:	10 92 d1 0d 	sts	0x0DD1, r1
    c430:	10 92 d0 0d 	sts	0x0DD0, r1
				LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.idle), extendedSprites[PLAYER_SLOT].flags);
    c434:	40 91 ae 0f 	lds	r20, 0x0FAE
    c438:	88 e2       	ldi	r24, 0x28	; 40
    c43a:	9e e0       	ldi	r25, 0x0E	; 14
    c43c:	49 83       	std	Y+1, r20	; 0x01
    c43e:	0e 94 62 47 	call	0x8ec4	; 0x8ec4 <LBGetNextFrame>
    c442:	49 81       	ldd	r20, Y+1	; 0x01
    c444:	bc 01       	movw	r22, r24
    c446:	80 e0       	ldi	r24, 0x00	; 0
    c448:	0e 94 c4 48 	call	0x9188	; 0x9188 <LBMapSprite>
			}
			if (game.joypadState.pressed & BTN_B && !(game.player.flags & PRONE))
    c44c:	80 91 9a 0f 	lds	r24, 0x0F9A
    c450:	80 ff       	sbrs	r24, 0
    c452:	44 c1       	rjmp	.+648    	; 0xc6dc <update_player+0x5ea>
    c454:	80 91 d4 0d 	lds	r24, 0x0DD4
    c458:	82 fd       	sbrc	r24, 2
    c45a:	40 c1       	rjmp	.+640    	; 0xc6dc <update_player+0x5ea>
			{
				game.player.shared.vy = -JUMP_SPEED;
    c45c:	80 e0       	ldi	r24, 0x00	; 0
    c45e:	90 e0       	ldi	r25, 0x00	; 0
    c460:	a6 e1       	ldi	r26, 0x16	; 22
    c462:	b3 ec       	ldi	r27, 0xC3	; 195
    c464:	80 93 c4 0d 	sts	0x0DC4, r24
    c468:	90 93 c5 0d 	sts	0x0DC5, r25
    c46c:	a0 93 c6 0d 	sts	0x0DC6, r26
    c470:	b0 93 c7 0d 	sts	0x0DC7, r27
				game.player.shared.gravity = GRAVITY;
    c474:	8f ef       	ldi	r24, 0xFF	; 255
    c476:	80 93 d2 0d 	sts	0x0DD2, r24
				game.player.flags = JUMPING;
    c47a:	81 e0       	ldi	r24, 0x01	; 1
    c47c:	80 93 d4 0d 	sts	0x0DD4, r24
    c480:	fd c0       	rjmp	.+506    	; 0xc67c <update_player+0x58a>
				game.player.height = 3;
				LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), extendedSprites[PLAYER_SLOT].flags);
			}
		}
	}
	else if (game.player.flags & JUMPING)
    c482:	10 ff       	sbrs	r17, 0
    c484:	77 c0       	rjmp	.+238    	; 0xc574 <update_player+0x482>
	{
		if ((game.joypadState.held & BTN_RIGHT) && (game.player.shared.x/8 + 2 < game.level_width))
    c486:	10 91 9e 0f 	lds	r17, 0x0F9E
    c48a:	17 ff       	sbrs	r17, 7
    c48c:	35 c0       	rjmp	.+106    	; 0xc4f8 <update_player+0x406>
    c48e:	20 e0       	ldi	r18, 0x00	; 0
    c490:	30 e0       	ldi	r19, 0x00	; 0
    c492:	40 e0       	ldi	r20, 0x00	; 0
    c494:	5e e3       	ldi	r21, 0x3E	; 62
    c496:	60 91 c8 0d 	lds	r22, 0x0DC8
    c49a:	70 91 c9 0d 	lds	r23, 0x0DC9
    c49e:	80 91 ca 0d 	lds	r24, 0x0DCA
    c4a2:	90 91 cb 0d 	lds	r25, 0x0DCB
    c4a6:	0e 94 12 67 	call	0xce24	; 0xce24 <__mulsf3>
    c4aa:	20 e0       	ldi	r18, 0x00	; 0
    c4ac:	30 e0       	ldi	r19, 0x00	; 0
    c4ae:	40 e0       	ldi	r20, 0x00	; 0
    c4b0:	50 e4       	ldi	r21, 0x40	; 64
    c4b2:	0e 94 c8 65 	call	0xcb90	; 0xcb90 <__addsf3>
    c4b6:	6b 01       	movw	r12, r22
    c4b8:	7c 01       	movw	r14, r24
    c4ba:	80 91 b8 0d 	lds	r24, 0x0DB8
    c4be:	68 2f       	mov	r22, r24
    c4c0:	70 e0       	ldi	r23, 0x00	; 0
    c4c2:	80 e0       	ldi	r24, 0x00	; 0
    c4c4:	90 e0       	ldi	r25, 0x00	; 0
    c4c6:	0e 94 5e 66 	call	0xccbc	; 0xccbc <__floatsisf>
    c4ca:	9b 01       	movw	r18, r22
    c4cc:	ac 01       	movw	r20, r24
    c4ce:	c7 01       	movw	r24, r14
    c4d0:	b6 01       	movw	r22, r12
    c4d2:	0e 94 2c 66 	call	0xcc58	; 0xcc58 <__cmpsf2>
    c4d6:	87 ff       	sbrs	r24, 7
    c4d8:	0f c0       	rjmp	.+30     	; 0xc4f8 <update_player+0x406>
		{
			game.player.shared.vx = RUN_SPEED;
    c4da:	8c e3       	ldi	r24, 0x3C	; 60
    c4dc:	90 e0       	ldi	r25, 0x00	; 0
    c4de:	90 93 d1 0d 	sts	0x0DD1, r25
    c4e2:	80 93 d0 0d 	sts	0x0DD0, r24
			game.player.direction = D_RIGHT;
    c4e6:	81 e0       	ldi	r24, 0x01	; 1
    c4e8:	80 93 d6 0d 	sts	0x0DD6, r24
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), 0);
    c4ec:	88 e3       	ldi	r24, 0x38	; 56
    c4ee:	9e e0       	ldi	r25, 0x0E	; 14
    c4f0:	0e 94 62 47 	call	0x8ec4	; 0x8ec4 <LBGetNextFrame>
    c4f4:	40 e0       	ldi	r20, 0x00	; 0
    c4f6:	32 c0       	rjmp	.+100    	; 0xc55c <update_player+0x46a>
		}
		else if ((game.joypadState.held & BTN_LEFT) && (game.player.shared.x > game.camera_x))
    c4f8:	16 ff       	sbrs	r17, 6
    c4fa:	24 c0       	rjmp	.+72     	; 0xc544 <update_player+0x452>
    c4fc:	60 91 aa 0d 	lds	r22, 0x0DAA
    c500:	70 91 ab 0d 	lds	r23, 0x0DAB
    c504:	80 e0       	ldi	r24, 0x00	; 0
    c506:	90 e0       	ldi	r25, 0x00	; 0
    c508:	0e 94 5c 66 	call	0xccb8	; 0xccb8 <__floatunsisf>
    c50c:	9b 01       	movw	r18, r22
    c50e:	ac 01       	movw	r20, r24
    c510:	60 91 c8 0d 	lds	r22, 0x0DC8
    c514:	70 91 c9 0d 	lds	r23, 0x0DC9
    c518:	80 91 ca 0d 	lds	r24, 0x0DCA
    c51c:	90 91 cb 0d 	lds	r25, 0x0DCB
    c520:	0e 94 0e 67 	call	0xce1c	; 0xce1c <__gesf2>
    c524:	18 16       	cp	r1, r24
    c526:	74 f4       	brge	.+28     	; 0xc544 <update_player+0x452>
		{
			game.player.shared.vx = -RUN_SPEED;
    c528:	84 ec       	ldi	r24, 0xC4	; 196
    c52a:	9f ef       	ldi	r25, 0xFF	; 255
    c52c:	90 93 d1 0d 	sts	0x0DD1, r25
    c530:	80 93 d0 0d 	sts	0x0DD0, r24
			game.player.direction = D_LEFT;
    c534:	10 92 d6 0d 	sts	0x0DD6, r1
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), SPRITE_FLIP_X);
    c538:	88 e3       	ldi	r24, 0x38	; 56
    c53a:	9e e0       	ldi	r25, 0x0E	; 14
    c53c:	0e 94 62 47 	call	0x8ec4	; 0x8ec4 <LBGetNextFrame>
    c540:	41 e0       	ldi	r20, 0x01	; 1
    c542:	0c c0       	rjmp	.+24     	; 0xc55c <update_player+0x46a>
		}
		else
		{
			game.player.shared.vx = 0;
    c544:	10 92 d1 0d 	sts	0x0DD1, r1
    c548:	10 92 d0 0d 	sts	0x0DD0, r1
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), extendedSprites[PLAYER_SLOT].flags);
    c54c:	40 91 ae 0f 	lds	r20, 0x0FAE
    c550:	88 e3       	ldi	r24, 0x38	; 56
    c552:	9e e0       	ldi	r25, 0x0E	; 14
    c554:	49 83       	std	Y+1, r20	; 0x01
    c556:	0e 94 62 47 	call	0x8ec4	; 0x8ec4 <LBGetNextFrame>
    c55a:	49 81       	ldd	r20, Y+1	; 0x01
    c55c:	bc 01       	movw	r22, r24
    c55e:	80 e0       	ldi	r24, 0x00	; 0
    c560:	0e 94 c4 48 	call	0x9188	; 0x9188 <LBMapSprite>
		}
		
		if (game.player.shared.gravity == 0)
    c564:	80 91 d2 0d 	lds	r24, 0x0DD2
    c568:	81 11       	cpse	r24, r1
    c56a:	b8 c0       	rjmp	.+368    	; 0xc6dc <update_player+0x5ea>
		{
			game.player.flags = IDLE;
    c56c:	88 e0       	ldi	r24, 0x08	; 8
    c56e:	80 93 d4 0d 	sts	0x0DD4, r24
    c572:	b4 c0       	rjmp	.+360    	; 0xc6dc <update_player+0x5ea>
		}
	}
	else if (game.player.flags & PRONE)
    c574:	12 ff       	sbrs	r17, 2
    c576:	b2 c0       	rjmp	.+356    	; 0xc6dc <update_player+0x5ea>
	{
		if (game.joypadState.pressed & BTN_UP)
    c578:	80 91 9a 0f 	lds	r24, 0x0F9A
    c57c:	84 ff       	sbrs	r24, 4
    c57e:	3a c0       	rjmp	.+116    	; 0xc5f4 <update_player+0x502>
		{
			game.player.flags = IDLE;	
    c580:	88 e0       	ldi	r24, 0x08	; 8
    c582:	80 93 d4 0d 	sts	0x0DD4, r24
			game.player.shared.y -= 16;
    c586:	20 e0       	ldi	r18, 0x00	; 0
    c588:	30 e0       	ldi	r19, 0x00	; 0
    c58a:	40 e8       	ldi	r20, 0x80	; 128
    c58c:	51 e4       	ldi	r21, 0x41	; 65
    c58e:	60 91 cc 0d 	lds	r22, 0x0DCC
    c592:	70 91 cd 0d 	lds	r23, 0x0DCD
    c596:	80 91 ce 0d 	lds	r24, 0x0DCE
    c59a:	90 91 cf 0d 	lds	r25, 0x0DCF
    c59e:	0e 94 c7 65 	call	0xcb8e	; 0xcb8e <__subsf3>
    c5a2:	60 93 cc 0d 	sts	0x0DCC, r22
    c5a6:	70 93 cd 0d 	sts	0x0DCD, r23
    c5aa:	80 93 ce 0d 	sts	0x0DCE, r24
    c5ae:	90 93 cf 0d 	sts	0x0DCF, r25
			if(game.player.direction == D_RIGHT)
    c5b2:	80 91 d6 0d 	lds	r24, 0x0DD6
    c5b6:	81 30       	cpi	r24, 0x01	; 1
    c5b8:	b1 f4       	brne	.+44     	; 0xc5e6 <update_player+0x4f4>
			{
				game.player.shared.x += 8;
    c5ba:	20 e0       	ldi	r18, 0x00	; 0
    c5bc:	30 e0       	ldi	r19, 0x00	; 0
    c5be:	40 e0       	ldi	r20, 0x00	; 0
    c5c0:	51 e4       	ldi	r21, 0x41	; 65
    c5c2:	60 91 c8 0d 	lds	r22, 0x0DC8
    c5c6:	70 91 c9 0d 	lds	r23, 0x0DC9
    c5ca:	80 91 ca 0d 	lds	r24, 0x0DCA
    c5ce:	90 91 cb 0d 	lds	r25, 0x0DCB
    c5d2:	0e 94 c8 65 	call	0xcb90	; 0xcb90 <__addsf3>
    c5d6:	60 93 c8 0d 	sts	0x0DC8, r22
    c5da:	70 93 c9 0d 	sts	0x0DC9, r23
    c5de:	80 93 ca 0d 	sts	0x0DCA, r24
    c5e2:	90 93 cb 0d 	sts	0x0DCB, r25
			}
			game.player.width = 2;
    c5e6:	82 e0       	ldi	r24, 0x02	; 2
    c5e8:	80 93 d7 0d 	sts	0x0DD7, r24
			game.player.height = 3;
    c5ec:	83 e0       	ldi	r24, 0x03	; 3
    c5ee:	80 93 d8 0d 	sts	0x0DD8, r24
    c5f2:	74 c0       	rjmp	.+232    	; 0xc6dc <update_player+0x5ea>
		}
		else if (game.joypadState.pressed & BTN_B)
    c5f4:	80 ff       	sbrs	r24, 0
    c5f6:	51 c0       	rjmp	.+162    	; 0xc69a <update_player+0x5a8>
		{
			game.player.flags = JUMPING;
    c5f8:	81 e0       	ldi	r24, 0x01	; 1
    c5fa:	80 93 d4 0d 	sts	0x0DD4, r24
			game.player.shared.y -= 16;
    c5fe:	20 e0       	ldi	r18, 0x00	; 0
    c600:	30 e0       	ldi	r19, 0x00	; 0
    c602:	40 e8       	ldi	r20, 0x80	; 128
    c604:	51 e4       	ldi	r21, 0x41	; 65
    c606:	60 91 cc 0d 	lds	r22, 0x0DCC
    c60a:	70 91 cd 0d 	lds	r23, 0x0DCD
    c60e:	80 91 ce 0d 	lds	r24, 0x0DCE
    c612:	90 91 cf 0d 	lds	r25, 0x0DCF
    c616:	0e 94 c7 65 	call	0xcb8e	; 0xcb8e <__subsf3>
    c61a:	60 93 cc 0d 	sts	0x0DCC, r22
    c61e:	70 93 cd 0d 	sts	0x0DCD, r23
    c622:	80 93 ce 0d 	sts	0x0DCE, r24
    c626:	90 93 cf 0d 	sts	0x0DCF, r25
			if(game.player.direction == D_RIGHT)
    c62a:	80 91 d6 0d 	lds	r24, 0x0DD6
    c62e:	81 30       	cpi	r24, 0x01	; 1
    c630:	b1 f4       	brne	.+44     	; 0xc65e <update_player+0x56c>
			{
				game.player.shared.x += 8;
    c632:	20 e0       	ldi	r18, 0x00	; 0
    c634:	30 e0       	ldi	r19, 0x00	; 0
    c636:	40 e0       	ldi	r20, 0x00	; 0
    c638:	51 e4       	ldi	r21, 0x41	; 65
    c63a:	60 91 c8 0d 	lds	r22, 0x0DC8
    c63e:	70 91 c9 0d 	lds	r23, 0x0DC9
    c642:	80 91 ca 0d 	lds	r24, 0x0DCA
    c646:	90 91 cb 0d 	lds	r25, 0x0DCB
    c64a:	0e 94 c8 65 	call	0xcb90	; 0xcb90 <__addsf3>
    c64e:	60 93 c8 0d 	sts	0x0DC8, r22
    c652:	70 93 c9 0d 	sts	0x0DC9, r23
    c656:	80 93 ca 0d 	sts	0x0DCA, r24
    c65a:	90 93 cb 0d 	sts	0x0DCB, r25
			}
			game.player.shared.vy = -JUMP_SPEED;
    c65e:	80 e0       	ldi	r24, 0x00	; 0
    c660:	90 e0       	ldi	r25, 0x00	; 0
    c662:	a6 e1       	ldi	r26, 0x16	; 22
    c664:	b3 ec       	ldi	r27, 0xC3	; 195
    c666:	80 93 c4 0d 	sts	0x0DC4, r24
    c66a:	90 93 c5 0d 	sts	0x0DC5, r25
    c66e:	a0 93 c6 0d 	sts	0x0DC6, r26
    c672:	b0 93 c7 0d 	sts	0x0DC7, r27
			game.player.shared.gravity = GRAVITY;
    c676:	8f ef       	ldi	r24, 0xFF	; 255
    c678:	80 93 d2 0d 	sts	0x0DD2, r24
			game.player.width = 2;
    c67c:	82 e0       	ldi	r24, 0x02	; 2
    c67e:	80 93 d7 0d 	sts	0x0DD7, r24
			game.player.height = 3;
    c682:	83 e0       	ldi	r24, 0x03	; 3
    c684:	80 93 d8 0d 	sts	0x0DD8, r24
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), extendedSprites[PLAYER_SLOT].flags);
    c688:	40 91 ae 0f 	lds	r20, 0x0FAE
    c68c:	88 e3       	ldi	r24, 0x38	; 56
    c68e:	9e e0       	ldi	r25, 0x0E	; 14
    c690:	49 83       	std	Y+1, r20	; 0x01
    c692:	0e 94 62 47 	call	0x8ec4	; 0x8ec4 <LBGetNextFrame>
    c696:	49 81       	ldd	r20, Y+1	; 0x01
    c698:	14 c0       	rjmp	.+40     	; 0xc6c2 <update_player+0x5d0>
		}
		else if (game.joypadState.pressed & BTN_LEFT)
    c69a:	86 ff       	sbrs	r24, 6
    c69c:	08 c0       	rjmp	.+16     	; 0xc6ae <update_player+0x5bc>
		{
			game.player.direction = D_LEFT;
    c69e:	10 92 d6 0d 	sts	0x0DD6, r1
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.prone), SPRITE_FLIP_X);
    c6a2:	80 e4       	ldi	r24, 0x40	; 64
    c6a4:	9e e0       	ldi	r25, 0x0E	; 14
    c6a6:	0e 94 62 47 	call	0x8ec4	; 0x8ec4 <LBGetNextFrame>
    c6aa:	41 e0       	ldi	r20, 0x01	; 1
    c6ac:	0a c0       	rjmp	.+20     	; 0xc6c2 <update_player+0x5d0>
		}
		else if (game.joypadState.pressed & BTN_RIGHT)
    c6ae:	87 ff       	sbrs	r24, 7
    c6b0:	15 c0       	rjmp	.+42     	; 0xc6dc <update_player+0x5ea>
		{
			game.player.direction = D_RIGHT;
    c6b2:	81 e0       	ldi	r24, 0x01	; 1
    c6b4:	80 93 d6 0d 	sts	0x0DD6, r24
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.prone), 0);
    c6b8:	80 e4       	ldi	r24, 0x40	; 64
    c6ba:	9e e0       	ldi	r25, 0x0E	; 14
    c6bc:	0e 94 62 47 	call	0x8ec4	; 0x8ec4 <LBGetNextFrame>
    c6c0:	40 e0       	ldi	r20, 0x00	; 0
    c6c2:	bc 01       	movw	r22, r24
    c6c4:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
}
    c6c6:	0f 90       	pop	r0
    c6c8:	df 91       	pop	r29
    c6ca:	cf 91       	pop	r28
    c6cc:	1f 91       	pop	r17
    c6ce:	0f 91       	pop	r16
    c6d0:	ff 90       	pop	r15
    c6d2:	ef 90       	pop	r14
    c6d4:	df 90       	pop	r13
    c6d6:	cf 90       	pop	r12
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.prone), SPRITE_FLIP_X);
		}
		else if (game.joypadState.pressed & BTN_RIGHT)
		{
			game.player.direction = D_RIGHT;
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.prone), 0);
    c6d8:	0c 94 c4 48 	jmp	0x9188	; 0x9188 <LBMapSprite>
		}
	}
}
    c6dc:	0f 90       	pop	r0
    c6de:	df 91       	pop	r29
    c6e0:	cf 91       	pop	r28
    c6e2:	1f 91       	pop	r17
    c6e4:	0f 91       	pop	r16
    c6e6:	ff 90       	pop	r15
    c6e8:	ef 90       	pop	r14
    c6ea:	df 90       	pop	r13
    c6ec:	cf 90       	pop	r12
    c6ee:	08 95       	ret

0000c6f0 <update_level>:
		}
	}
}

void update_level()
{
    c6f0:	cf 92       	push	r12
    c6f2:	df 92       	push	r13
    c6f4:	ef 92       	push	r14
    c6f6:	ff 92       	push	r15
    c6f8:	0f 93       	push	r16
    c6fa:	1f 93       	push	r17
    c6fc:	cf 93       	push	r28
    c6fe:	df 93       	push	r29
	u8 ship_x = game.player.shared.x - game.camera_x;
    c700:	00 91 aa 0d 	lds	r16, 0x0DAA
    c704:	10 91 ab 0d 	lds	r17, 0x0DAB
    c708:	b8 01       	movw	r22, r16
    c70a:	80 e0       	ldi	r24, 0x00	; 0
    c70c:	90 e0       	ldi	r25, 0x00	; 0
    c70e:	0e 94 5c 66 	call	0xccb8	; 0xccb8 <__floatunsisf>
    c712:	9b 01       	movw	r18, r22
    c714:	ac 01       	movw	r20, r24
    c716:	60 91 c8 0d 	lds	r22, 0x0DC8
    c71a:	70 91 c9 0d 	lds	r23, 0x0DC9
    c71e:	80 91 ca 0d 	lds	r24, 0x0DCA
    c722:	90 91 cb 0d 	lds	r25, 0x0DCB
    c726:	0e 94 c7 65 	call	0xcb8e	; 0xcb8e <__subsf3>
    c72a:	6b 01       	movw	r12, r22
    c72c:	7c 01       	movw	r14, r24
	u8 ship_y = 0;
	char ship_increment = 3;
	
	game.frame_counter++;
    c72e:	80 91 bc 0d 	lds	r24, 0x0DBC
    c732:	8f 5f       	subi	r24, 0xFF	; 255
	if (game.frame_counter == 60)
    c734:	8c 33       	cpi	r24, 0x3C	; 60
    c736:	19 f0       	breq	.+6      	; 0xc73e <update_level+0x4e>
{
	u8 ship_x = game.player.shared.x - game.camera_x;
	u8 ship_y = 0;
	char ship_increment = 3;
	
	game.frame_counter++;
    c738:	80 93 bc 0d 	sts	0x0DBC, r24
    c73c:	0f c0       	rjmp	.+30     	; 0xc75c <update_level+0x6c>
	if (game.frame_counter == 60)
	{
		game.frame_counter = 0;
    c73e:	10 92 bc 0d 	sts	0x0DBC, r1
		if (game.time != 65535) game.time++;
    c742:	80 91 b0 0d 	lds	r24, 0x0DB0
    c746:	90 91 b1 0d 	lds	r25, 0x0DB1
    c74a:	8f 3f       	cpi	r24, 0xFF	; 255
    c74c:	2f ef       	ldi	r18, 0xFF	; 255
    c74e:	92 07       	cpc	r25, r18
    c750:	29 f0       	breq	.+10     	; 0xc75c <update_level+0x6c>
    c752:	01 96       	adiw	r24, 0x01	; 1
    c754:	90 93 b1 0d 	sts	0x0DB1, r25
    c758:	80 93 b0 0d 	sts	0x0DB0, r24
	}
	
	if (is_space() && game.camera_x/8 + CAMERA_WIDTH < game.level_width)
    c75c:	0e 94 93 49 	call	0x9326	; 0x9326 <is_space>
    c760:	93 e0       	ldi	r25, 0x03	; 3
    c762:	16 95       	lsr	r17
    c764:	07 95       	ror	r16
    c766:	9a 95       	dec	r25
    c768:	e1 f7       	brne	.-8      	; 0xc762 <update_level+0x72>
    c76a:	c0 91 b8 0d 	lds	r28, 0x0DB8
    c76e:	88 23       	and	r24, r24
    c770:	51 f0       	breq	.+20     	; 0xc786 <update_level+0x96>
    c772:	2c 2f       	mov	r18, r28
    c774:	30 e0       	ldi	r19, 0x00	; 0
    c776:	c8 01       	movw	r24, r16
    c778:	4c 96       	adiw	r24, 0x1c	; 28
    c77a:	82 17       	cp	r24, r18
    c77c:	93 07       	cpc	r25, r19
    c77e:	18 f4       	brcc	.+6      	; 0xc786 <update_level+0x96>
	{
		move_camera_x();
    c780:	0e 94 d7 4d 	call	0x9bae	; 0x9bae <move_camera_x>
    c784:	22 c0       	rjmp	.+68     	; 0xc7ca <update_level+0xda>
	}
	else if (game.player.shared.vx > 0 &&
    c786:	80 91 d0 0d 	lds	r24, 0x0DD0
    c78a:	90 91 d1 0d 	lds	r25, 0x0DD1
    c78e:	18 16       	cp	r1, r24
    c790:	19 06       	cpc	r1, r25
    c792:	8c f4       	brge	.+34     	; 0xc7b6 <update_level+0xc6>
    c794:	20 e0       	ldi	r18, 0x00	; 0
    c796:	30 e0       	ldi	r19, 0x00	; 0
    c798:	40 ee       	ldi	r20, 0xE0	; 224
    c79a:	52 e4       	ldi	r21, 0x42	; 66
    c79c:	c7 01       	movw	r24, r14
    c79e:	b6 01       	movw	r22, r12
    c7a0:	0e 94 0e 67 	call	0xce1c	; 0xce1c <__gesf2>
    c7a4:	87 fd       	sbrc	r24, 7
    c7a6:	07 c0       	rjmp	.+14     	; 0xc7b6 <update_level+0xc6>
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
		(game.camera_x/8 + CAMERA_WIDTH < game.level_width))
    c7a8:	2c 2f       	mov	r18, r28
    c7aa:	30 e0       	ldi	r19, 0x00	; 0
	if (is_space() && game.camera_x/8 + CAMERA_WIDTH < game.level_width)
	{
		move_camera_x();
	}
	else if (game.player.shared.vx > 0 &&
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
    c7ac:	c8 01       	movw	r24, r16
    c7ae:	4c 96       	adiw	r24, 0x1c	; 28
    c7b0:	82 17       	cp	r24, r18
    c7b2:	93 07       	cpc	r25, r19
    c7b4:	28 f3       	brcs	.-54     	; 0xc780 <update_level+0x90>
		(game.camera_x/8 + CAMERA_WIDTH < game.level_width))
	{
		move_camera_x();
	}
	else if (game.camera_x/8 + CAMERA_WIDTH >= game.level_width)
    c7b6:	04 5e       	subi	r16, 0xE4	; 228
    c7b8:	1f 4f       	sbci	r17, 0xFF	; 255
    c7ba:	8c 2f       	mov	r24, r28
    c7bc:	90 e0       	ldi	r25, 0x00	; 0
    c7be:	08 17       	cp	r16, r24
    c7c0:	19 07       	cpc	r17, r25
    c7c2:	18 f0       	brcs	.+6      	; 0xc7ca <update_level+0xda>
	{
		game.level_ended = 1;
    c7c4:	81 e0       	ldi	r24, 0x01	; 1
    c7c6:	80 93 c3 0d 	sts	0x0DC3, r24
	}
	
	if (!is_space() && game.player.shared.vy > 0 &&
    c7ca:	0e 94 93 49 	call	0x9326	; 0x9326 <is_space>
    c7ce:	81 11       	cpse	r24, r1
    c7d0:	40 c0       	rjmp	.+128    	; 0xc852 <update_level+0x162>
    c7d2:	20 e0       	ldi	r18, 0x00	; 0
    c7d4:	30 e0       	ldi	r19, 0x00	; 0
    c7d6:	a9 01       	movw	r20, r18
    c7d8:	60 91 c4 0d 	lds	r22, 0x0DC4
    c7dc:	70 91 c5 0d 	lds	r23, 0x0DC5
    c7e0:	80 91 c6 0d 	lds	r24, 0x0DC6
    c7e4:	90 91 c7 0d 	lds	r25, 0x0DC7
    c7e8:	0e 94 0e 67 	call	0xce1c	; 0xce1c <__gesf2>
    c7ec:	18 16       	cp	r1, r24
    c7ee:	8c f5       	brge	.+98     	; 0xc852 <update_level+0x162>
	    (game.player.shared.y - game.camera_y + 24) >= ((CAMERA_HEIGHT - 2) * 8) &&
    c7f0:	c0 91 ac 0d 	lds	r28, 0x0DAC
    c7f4:	d0 91 ad 0d 	lds	r29, 0x0DAD
    c7f8:	be 01       	movw	r22, r28
    c7fa:	80 e0       	ldi	r24, 0x00	; 0
    c7fc:	90 e0       	ldi	r25, 0x00	; 0
    c7fe:	0e 94 5c 66 	call	0xccb8	; 0xccb8 <__floatunsisf>
    c802:	9b 01       	movw	r18, r22
    c804:	ac 01       	movw	r20, r24
    c806:	60 91 cc 0d 	lds	r22, 0x0DCC
    c80a:	70 91 cd 0d 	lds	r23, 0x0DCD
    c80e:	80 91 ce 0d 	lds	r24, 0x0DCE
    c812:	90 91 cf 0d 	lds	r25, 0x0DCF
    c816:	0e 94 c7 65 	call	0xcb8e	; 0xcb8e <__subsf3>
    c81a:	20 e0       	ldi	r18, 0x00	; 0
    c81c:	30 e0       	ldi	r19, 0x00	; 0
    c81e:	40 ec       	ldi	r20, 0xC0	; 192
    c820:	51 e4       	ldi	r21, 0x41	; 65
    c822:	0e 94 c8 65 	call	0xcb90	; 0xcb90 <__addsf3>
	else if (game.camera_x/8 + CAMERA_WIDTH >= game.level_width)
	{
		game.level_ended = 1;
	}
	
	if (!is_space() && game.player.shared.vy > 0 &&
    c826:	20 e0       	ldi	r18, 0x00	; 0
    c828:	30 e0       	ldi	r19, 0x00	; 0
    c82a:	40 e4       	ldi	r20, 0x40	; 64
    c82c:	53 e4       	ldi	r21, 0x43	; 67
    c82e:	0e 94 0e 67 	call	0xce1c	; 0xce1c <__gesf2>
    c832:	87 fd       	sbrc	r24, 7
    c834:	0e c0       	rjmp	.+28     	; 0xc852 <update_level+0x162>
	    (game.player.shared.y - game.camera_y + 24) >= ((CAMERA_HEIGHT - 2) * 8) &&
		(game.camera_y/8 + CAMERA_HEIGHT < game.level_height))
    c836:	83 e0       	ldi	r24, 0x03	; 3
    c838:	d6 95       	lsr	r29
    c83a:	c7 95       	ror	r28
    c83c:	8a 95       	dec	r24
    c83e:	e1 f7       	brne	.-8      	; 0xc838 <update_level+0x148>
    c840:	6a 96       	adiw	r28, 0x1a	; 26
    c842:	80 91 b9 0d 	lds	r24, 0x0DB9
    c846:	90 e0       	ldi	r25, 0x00	; 0
	{
		game.level_ended = 1;
	}
	
	if (!is_space() && game.player.shared.vy > 0 &&
	    (game.player.shared.y - game.camera_y + 24) >= ((CAMERA_HEIGHT - 2) * 8) &&
    c848:	c8 17       	cp	r28, r24
    c84a:	d9 07       	cpc	r29, r25
    c84c:	10 f4       	brcc	.+4      	; 0xc852 <update_level+0x162>
		(game.camera_y/8 + CAMERA_HEIGHT < game.level_height))
	{
		move_camera_y();
    c84e:	0e 94 f0 4d 	call	0x9be0	; 0x9be0 <move_camera_y>
	}
	
	// Score
	LBPrintByte(9, VRAM_TILES_V-1, game.lives ,true);
    c852:	21 e0       	ldi	r18, 0x01	; 1
    c854:	40 91 b5 0d 	lds	r20, 0x0DB5
    c858:	6f e1       	ldi	r22, 0x1F	; 31
    c85a:	89 e0       	ldi	r24, 0x09	; 9
    c85c:	0e 94 0f 48 	call	0x901e	; 0x901e <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-1, game.score ,true);
    c860:	40 91 ae 0d 	lds	r20, 0x0DAE
    c864:	50 91 af 0d 	lds	r21, 0x0DAF
    c868:	21 e0       	ldi	r18, 0x01	; 1
    c86a:	6f e1       	ldi	r22, 0x1F	; 31
    c86c:	8b e1       	ldi	r24, 0x1B	; 27
    c86e:	0e 94 40 48 	call	0x9080	; 0x9080 <LBPrintInt>
	LBPrintByte(9, VRAM_TILES_V-2, game.player.shield ,true);
    c872:	21 e0       	ldi	r18, 0x01	; 1
    c874:	40 91 d9 0d 	lds	r20, 0x0DD9
    c878:	6e e1       	ldi	r22, 0x1E	; 30
    c87a:	89 e0       	ldi	r24, 0x09	; 9
    c87c:	0e 94 0f 48 	call	0x901e	; 0x901e <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-2, game.time ,true);
    c880:	40 91 b0 0d 	lds	r20, 0x0DB0
    c884:	50 91 b1 0d 	lds	r21, 0x0DB1
    c888:	21 e0       	ldi	r18, 0x01	; 1
    c88a:	6e e1       	ldi	r22, 0x1E	; 30
    c88c:	8b e1       	ldi	r24, 0x1B	; 27
    c88e:	0e 94 40 48 	call	0x9080	; 0x9080 <LBPrintInt>
	
	if (game.level_ended && !is_space() && game.player.flags & (IDLE|RUNNING|PRONE))
    c892:	80 91 c3 0d 	lds	r24, 0x0DC3
    c896:	88 23       	and	r24, r24
    c898:	09 f4       	brne	.+2      	; 0xc89c <update_level+0x1ac>
    c89a:	69 c0       	rjmp	.+210    	; 0xc96e <update_level+0x27e>
    c89c:	0e 94 93 49 	call	0x9326	; 0x9326 <is_space>
    c8a0:	81 11       	cpse	r24, r1
    c8a2:	56 c0       	rjmp	.+172    	; 0xc950 <update_level+0x260>
    c8a4:	80 91 d4 0d 	lds	r24, 0x0DD4
    c8a8:	8e 70       	andi	r24, 0x0E	; 14
    c8aa:	09 f4       	brne	.+2      	; 0xc8ae <update_level+0x1be>
    c8ac:	60 c0       	rjmp	.+192    	; 0xc96e <update_level+0x27e>
	{
		LBMapSprite(PLAYER_SLOT, map_hero_idle, 0);
    c8ae:	40 e0       	ldi	r20, 0x00	; 0
    c8b0:	67 eb       	ldi	r22, 0xB7	; 183
    c8b2:	7d e2       	ldi	r23, 0x2D	; 45
    c8b4:	80 e0       	ldi	r24, 0x00	; 0
    c8b6:	0e 94 c4 48 	call	0x9188	; 0x9188 <LBMapSprite>
		clear_sprites(ENEMY_SHOT_SLOT, MAX_ENEMY_SHOTS);
    c8ba:	61 e0       	ldi	r22, 0x01	; 1
    c8bc:	8e e0       	ldi	r24, 0x0E	; 14
    c8be:	0e 94 06 5a 	call	0xb40c	; 0xb40c <clear_sprites>
		LBRotateSprites();
    c8c2:	0e 94 54 49 	call	0x92a8	; 0x92a8 <LBRotateSprites>
		map_ship();
    c8c6:	0e 94 0b 4e 	call	0x9c16	; 0x9c16 <map_ship>

void update_level()
{
	u8 ship_x = game.player.shared.x - game.camera_x;
	u8 ship_y = 0;
	char ship_increment = 3;
    c8ca:	d3 e0       	ldi	r29, 0x03	; 3
}

void update_level()
{
	u8 ship_x = game.player.shared.x - game.camera_x;
	u8 ship_y = 0;
    c8cc:	c0 e0       	ldi	r28, 0x00	; 0
		clear_sprites(ENEMY_SHOT_SLOT, MAX_ENEMY_SHOTS);
		LBRotateSprites();
		map_ship();
		while (1)
		{
			WaitVsync(1);
    c8ce:	81 e0       	ldi	r24, 0x01	; 1
    c8d0:	90 e0       	ldi	r25, 0x00	; 0
    c8d2:	0e 94 c5 46 	call	0x8d8a	; 0x8d8a <WaitVsync>
			if (ship_y >= get_hero_spawn_y(game.current_level_index)*8)
    c8d6:	8c 2f       	mov	r24, r28
    c8d8:	90 e0       	ldi	r25, 0x00	; 0
    c8da:	88 3a       	cpi	r24, 0xA8	; 168
    c8dc:	91 05       	cpc	r25, r1
    c8de:	6c f0       	brlt	.+26     	; 0xc8fa <update_level+0x20a>
			{
				clear_sprites(0, game.player.width*game.player.height);
    c8e0:	80 91 d8 0d 	lds	r24, 0x0DD8
    c8e4:	60 91 d7 0d 	lds	r22, 0x0DD7
    c8e8:	86 9f       	mul	r24, r22
    c8ea:	60 2d       	mov	r22, r0
    c8ec:	11 24       	eor	r1, r1
    c8ee:	80 e0       	ldi	r24, 0x00	; 0
    c8f0:	0e 94 06 5a 	call	0xb40c	; 0xb40c <clear_sprites>
				LBRotateSprites();
    c8f4:	0e 94 54 49 	call	0x92a8	; 0x92a8 <LBRotateSprites>
				ship_increment = -3;
    c8f8:	dd ef       	ldi	r29, 0xFD	; 253
			}
			LBMapSprite(6, LBGetNextFrame(&game.player.run), 0);
    c8fa:	80 e3       	ldi	r24, 0x30	; 48
    c8fc:	9e e0       	ldi	r25, 0x0E	; 14
    c8fe:	0e 94 62 47 	call	0x8ec4	; 0x8ec4 <LBGetNextFrame>
    c902:	40 e0       	ldi	r20, 0x00	; 0
    c904:	bc 01       	movw	r22, r24
    c906:	86 e0       	ldi	r24, 0x06	; 6
    c908:	0e 94 c4 48 	call	0x9188	; 0x9188 <LBMapSprite>
	}
}

void update_level()
{
	u8 ship_x = game.player.shared.x - game.camera_x;
    c90c:	c7 01       	movw	r24, r14
    c90e:	b6 01       	movw	r22, r12
    c910:	0e 94 30 66 	call	0xcc60	; 0xcc60 <__fixunssfsi>
				clear_sprites(0, game.player.width*game.player.height);
				LBRotateSprites();
				ship_increment = -3;
			}
			LBMapSprite(6, LBGetNextFrame(&game.player.run), 0);
			LBMoveSprite(6, ship_x, ship_y, 4, 2);
    c914:	02 e0       	ldi	r16, 0x02	; 2
    c916:	24 e0       	ldi	r18, 0x04	; 4
    c918:	4c 2f       	mov	r20, r28
    c91a:	86 e0       	ldi	r24, 0x06	; 6
    c91c:	0e 94 16 49 	call	0x922c	; 0x922c <LBMoveSprite>
			ship_y += ship_increment;
    c920:	cd 0f       	add	r28, r29
			if (ship_y == 0)
    c922:	99 f4       	brne	.+38     	; 0xc94a <update_level+0x25a>
			{
				clear_sprites(6, 8);
    c924:	68 e0       	ldi	r22, 0x08	; 8
    c926:	86 e0       	ldi	r24, 0x06	; 6
    c928:	0e 94 06 5a 	call	0xb40c	; 0xb40c <clear_sprites>
				LBRotateSprites();
    c92c:	0e 94 54 49 	call	0x92a8	; 0x92a8 <LBRotateSprites>
				tally_score((char*) strLevelClear, 100);
    c930:	64 e6       	ldi	r22, 0x64	; 100
    c932:	70 e0       	ldi	r23, 0x00	; 0
    c934:	86 e2       	ldi	r24, 0x26	; 38
    c936:	9b e0       	ldi	r25, 0x0B	; 11
    c938:	0e 94 15 5f 	call	0xbe2a	; 0xbe2a <tally_score>
				planet_transition(game.current_level_index+1, -1, 26, 3, 0);
    c93c:	80 91 b7 0d 	lds	r24, 0x0DB7
    c940:	00 e0       	ldi	r16, 0x00	; 0
    c942:	23 e0       	ldi	r18, 0x03	; 3
    c944:	4a e1       	ldi	r20, 0x1A	; 26
    c946:	6f ef       	ldi	r22, 0xFF	; 255
    c948:	0f c0       	rjmp	.+30     	; 0xc968 <update_level+0x278>
				break;
			}
			LBRotateSprites();
    c94a:	0e 94 54 49 	call	0x92a8	; 0x92a8 <LBRotateSprites>
		}
    c94e:	bf cf       	rjmp	.-130    	; 0xc8ce <update_level+0x1de>
	}
	else if (game.level_ended && is_space())
	{
		tally_score((char*) strLevelClear, 100);
    c950:	64 e6       	ldi	r22, 0x64	; 100
    c952:	70 e0       	ldi	r23, 0x00	; 0
    c954:	86 e2       	ldi	r24, 0x26	; 38
    c956:	9b e0       	ldi	r25, 0x0B	; 11
    c958:	0e 94 15 5f 	call	0xbe2a	; 0xbe2a <tally_score>
		planet_transition(game.current_level_index+1, 1, 28, -3, 199);
    c95c:	80 91 b7 0d 	lds	r24, 0x0DB7
    c960:	07 ec       	ldi	r16, 0xC7	; 199
    c962:	2d ef       	ldi	r18, 0xFD	; 253
    c964:	4c e1       	ldi	r20, 0x1C	; 28
    c966:	61 e0       	ldi	r22, 0x01	; 1
    c968:	8f 5f       	subi	r24, 0xFF	; 255
    c96a:	0e 94 f3 5b 	call	0xb7e6	; 0xb7e6 <planet_transition>
	}
	
}
    c96e:	df 91       	pop	r29
    c970:	cf 91       	pop	r28
    c972:	1f 91       	pop	r17
    c974:	0f 91       	pop	r16
    c976:	ff 90       	pop	r15
    c978:	ef 90       	pop	r14
    c97a:	df 90       	pop	r13
    c97c:	cf 90       	pop	r12
    c97e:	08 95       	ret

0000c980 <update_pause>:
		}
	}
}

void update_pause()
{
    c980:	ef 92       	push	r14
    c982:	ff 92       	push	r15
    c984:	0f 93       	push	r16
    c986:	1f 93       	push	r17
    c988:	cf 93       	push	r28
    c98a:	df 93       	push	r29
	u8 x = Screen.scrollX / 8;
    c98c:	c0 91 b2 0c 	lds	r28, 0x0CB2
	u8 y = Screen.scrollY / 8;
    c990:	00 91 b3 0c 	lds	r16, 0x0CB3
	
	if (game.joypadState.pressed & BTN_START)
    c994:	80 91 9a 0f 	lds	r24, 0x0F9A
    c998:	83 ff       	sbrs	r24, 3
    c99a:	5d c0       	rjmp	.+186    	; 0xca56 <update_pause+0xd6>
}

void update_pause()
{
	u8 x = Screen.scrollX / 8;
	u8 y = Screen.scrollY / 8;
    c99c:	06 95       	lsr	r16
    c99e:	06 95       	lsr	r16
    c9a0:	06 95       	lsr	r16
	
	if (game.joypadState.pressed & BTN_START)
	{
		DrawMap2((x+8)%32, (y+6)%30, map_canvas);
    c9a2:	10 e0       	ldi	r17, 0x00	; 0
	}
}

void update_pause()
{
	u8 x = Screen.scrollX / 8;
    c9a4:	c6 95       	lsr	r28
    c9a6:	c6 95       	lsr	r28
    c9a8:	c6 95       	lsr	r28
	u8 y = Screen.scrollY / 8;
	
	if (game.joypadState.pressed & BTN_START)
	{
		DrawMap2((x+8)%32, (y+6)%30, map_canvas);
    c9aa:	d0 e0       	ldi	r29, 0x00	; 0
    c9ac:	c8 01       	movw	r24, r16
    c9ae:	06 96       	adiw	r24, 0x06	; 6
    c9b0:	2e e1       	ldi	r18, 0x1E	; 30
    c9b2:	e2 2e       	mov	r14, r18
    c9b4:	f1 2c       	mov	r15, r1
    c9b6:	b7 01       	movw	r22, r14
    c9b8:	0e 94 ad 65 	call	0xcb5a	; 0xcb5a <__divmodhi4>
    c9bc:	9e 01       	movw	r18, r28
    c9be:	28 5f       	subi	r18, 0xF8	; 248
    c9c0:	3f 4f       	sbci	r19, 0xFF	; 255
    c9c2:	49 e5       	ldi	r20, 0x59	; 89
    c9c4:	54 e6       	ldi	r21, 0x64	; 100
    c9c6:	68 2f       	mov	r22, r24
    c9c8:	82 2f       	mov	r24, r18
    c9ca:	8f 71       	andi	r24, 0x1F	; 31
    c9cc:	0e 94 5c 46 	call	0x8cb8	; 0x8cb8 <DrawMap>
		LBPrint((x+13)%32, (y+9)%30, (char*) strPaused);
    c9d0:	c8 01       	movw	r24, r16
    c9d2:	09 96       	adiw	r24, 0x09	; 9
    c9d4:	b7 01       	movw	r22, r14
    c9d6:	0e 94 ad 65 	call	0xcb5a	; 0xcb5a <__divmodhi4>
    c9da:	9e 01       	movw	r18, r28
    c9dc:	23 5f       	subi	r18, 0xF3	; 243
    c9de:	3f 4f       	sbci	r19, 0xFF	; 255
    c9e0:	42 e3       	ldi	r20, 0x32	; 50
    c9e2:	5b e0       	ldi	r21, 0x0B	; 11
    c9e4:	68 2f       	mov	r22, r24
    c9e6:	82 2f       	mov	r24, r18
    c9e8:	8f 71       	andi	r24, 0x1F	; 31
    c9ea:	0e 94 f3 47 	call	0x8fe6	; 0x8fe6 <LBPrint>
		LBPrint((x+10)%32, (y+12)%30, (char*) strExitGame);
    c9ee:	c8 01       	movw	r24, r16
    c9f0:	0c 96       	adiw	r24, 0x0c	; 12
    c9f2:	b7 01       	movw	r22, r14
    c9f4:	0e 94 ad 65 	call	0xcb5a	; 0xcb5a <__divmodhi4>
    c9f8:	2a 96       	adiw	r28, 0x0a	; 10
    c9fa:	48 e3       	ldi	r20, 0x38	; 56
    c9fc:	5b e0       	ldi	r21, 0x0B	; 11
    c9fe:	68 2f       	mov	r22, r24
    ca00:	8c 2f       	mov	r24, r28
    ca02:	8f 71       	andi	r24, 0x1F	; 31
    ca04:	0e 94 f3 47 	call	0x8fe6	; 0x8fe6 <LBPrint>
		//hide_sprites(0, MAX_EXTENDED_SPRITES);
		//LBRotateSprites();
		while (1)
		{
			WaitVsync(1);
    ca08:	81 e0       	ldi	r24, 0x01	; 1
    ca0a:	90 e0       	ldi	r25, 0x00	; 0
    ca0c:	0e 94 c5 46 	call	0x8d8a	; 0x8d8a <WaitVsync>
			LBGetJoyPadState(&game.joypadState, 0);
    ca10:	60 e0       	ldi	r22, 0x00	; 0
    ca12:	8a e9       	ldi	r24, 0x9A	; 154
    ca14:	9f e0       	ldi	r25, 0x0F	; 15
    ca16:	0e 94 88 47 	call	0x8f10	; 0x8f10 <LBGetJoyPadState>
			if (game.joypadState.pressed & BTN_START)
    ca1a:	80 91 9a 0f 	lds	r24, 0x0F9A
    ca1e:	90 91 9b 0f 	lds	r25, 0x0F9B
    ca22:	83 ff       	sbrs	r24, 3
    ca24:	08 c0       	rjmp	.+16     	; 0xca36 <update_pause+0xb6>
				exit_game();
				break;
			}
		}
	}
}
    ca26:	df 91       	pop	r29
    ca28:	cf 91       	pop	r28
    ca2a:	1f 91       	pop	r17
    ca2c:	0f 91       	pop	r16
    ca2e:	ff 90       	pop	r15
    ca30:	ef 90       	pop	r14
		{
			WaitVsync(1);
			LBGetJoyPadState(&game.joypadState, 0);
			if (game.joypadState.pressed & BTN_START)
			{
				render_camera_view();
    ca32:	0c 94 32 4c 	jmp	0x9864	; 0x9864 <render_camera_view>
				break;
			}
			else if (game.joypadState.pressed & BTN_X)
    ca36:	91 ff       	sbrs	r25, 1
    ca38:	e7 cf       	rjmp	.-50     	; 0xca08 <update_pause+0x88>
			{
				tally_score((char*)strGameOver, 0);
    ca3a:	60 e0       	ldi	r22, 0x00	; 0
    ca3c:	70 e0       	ldi	r23, 0x00	; 0
    ca3e:	86 e1       	ldi	r24, 0x16	; 22
    ca40:	9b e0       	ldi	r25, 0x0B	; 11
    ca42:	0e 94 15 5f 	call	0xbe2a	; 0xbe2a <tally_score>
				exit_game();
				break;
			}
		}
	}
}
    ca46:	df 91       	pop	r29
    ca48:	cf 91       	pop	r28
    ca4a:	1f 91       	pop	r17
    ca4c:	0f 91       	pop	r16
    ca4e:	ff 90       	pop	r15
    ca50:	ef 90       	pop	r14
				break;
			}
			else if (game.joypadState.pressed & BTN_X)
			{
				tally_score((char*)strGameOver, 0);
				exit_game();
    ca52:	0c 94 09 5e 	jmp	0xbc12	; 0xbc12 <exit_game>
				break;
			}
		}
	}
}
    ca56:	df 91       	pop	r29
    ca58:	cf 91       	pop	r28
    ca5a:	1f 91       	pop	r17
    ca5c:	0f 91       	pop	r16
    ca5e:	ff 90       	pop	r15
    ca60:	ef 90       	pop	r14
    ca62:	08 95       	ret

0000ca64 <main>:
}

int main()
{
	// Initialize
	GetPrngNumber(GetTrueRandomSeed());
    ca64:	0e 94 75 38 	call	0x70ea	; 0x70ea <GetTrueRandomSeed>
    ca68:	0e 94 f5 39 	call	0x73ea	; 0x73ea <GetPrngNumber>
	InitMusicPlayer(my_patches);
    ca6c:	8e e1       	ldi	r24, 0x1E	; 30
    ca6e:	9d e1       	ldi	r25, 0x1D	; 29
    ca70:	0e 94 cf 3a 	call	0x759e	; 0x759e <InitMusicPlayer>
	ClearVram();
    ca74:	0e 94 fd 37 	call	0x6ffa	; 0x6ffa <ClearVram>
	SetMasterVolume(0x05);
    ca78:	85 e0       	ldi	r24, 0x05	; 5
    ca7a:	0e 94 83 3e 	call	0x7d06	; 0x7d06 <SetMasterVolume>
	SetTileTable(tiles_data);
    ca7e:	86 e6       	ldi	r24, 0x66	; 102
    ca80:	9f e4       	ldi	r25, 0x4F	; 79
    ca82:	0e 94 18 38 	call	0x7030	; 0x7030 <SetTileTable>
	SetSpritesTileTable(sprites_data);
    ca86:	8d e9       	ldi	r24, 0x9D	; 157
    ca88:	9e e1       	ldi	r25, 0x1E	; 30
    ca8a:	0e 94 f8 37 	call	0x6ff0	; 0x6ff0 <SetSpritesTileTable>
	}
}

void LBSetFontTilesMap(char* tiles_map)
{
	font_tiles_map = tiles_map;
    ca8e:	86 ee       	ldi	r24, 0xE6	; 230
    ca90:	93 e6       	ldi	r25, 0x63	; 99
    ca92:	90 93 83 0d 	sts	0x0D83, r25
    ca96:	80 93 82 0d 	sts	0x0D82, r24
	LBSetFontTilesMap((char*) map_font);
	init_default_high_scores();
    ca9a:	0e 94 97 49 	call	0x932e	; 0x932e <init_default_high_scores>
	load_splash();
    ca9e:	0e 94 d9 5c 	call	0xb9b2	; 0xb9b2 <load_splash>
	while (1)
	{
		WaitVsync(1);
    caa2:	81 e0       	ldi	r24, 0x01	; 1
    caa4:	90 e0       	ldi	r25, 0x00	; 0
    caa6:	0e 94 c5 46 	call	0x8d8a	; 0x8d8a <WaitVsync>
		LBGetJoyPadState(&game.joypadState, 0);
    caaa:	60 e0       	ldi	r22, 0x00	; 0
    caac:	8a e9       	ldi	r24, 0x9A	; 154
    caae:	9f e0       	ldi	r25, 0x0F	; 15
    cab0:	0e 94 88 47 	call	0x8f10	; 0x8f10 <LBGetJoyPadState>
		if (game.current_screen == LEVEL)
    cab4:	80 91 b6 0d 	lds	r24, 0x0DB6
    cab8:	82 30       	cpi	r24, 0x02	; 2
    caba:	a9 f4       	brne	.+42     	; 0xcae6 <main+0x82>
		{
			update_level();
    cabc:	0e 94 78 63 	call	0xc6f0	; 0xc6f0 <update_level>
			update_player();
    cac0:	0e 94 79 60 	call	0xc0f2	; 0xc0f2 <update_player>
			update_shot();
    cac4:	0e 94 22 4f 	call	0x9e44	; 0x9e44 <update_shot>
			update_enemies();
    cac8:	0e 94 a7 56 	call	0xad4e	; 0xad4e <update_enemies>
			update_enemy_shots();
    cacc:	0e 94 ec 56 	call	0xadd8	; 0xadd8 <update_enemy_shots>
			animate_player();
    cad0:	0e 94 f2 55 	call	0xabe4	; 0xabe4 <animate_player>
			animate_shot();
    cad4:	0e 94 6e 53 	call	0xa6dc	; 0xa6dc <animate_shot>
			animate_enemies();
    cad8:	0e 94 86 57 	call	0xaf0c	; 0xaf0c <animate_enemies>
			animate_enemy_shots();
    cadc:	0e 94 c9 58 	call	0xb192	; 0xb192 <animate_enemy_shots>
			update_pause();
    cae0:	0e 94 c0 64 	call	0xc980	; 0xc980 <update_pause>
    cae4:	09 c0       	rjmp	.+18     	; 0xcaf8 <main+0x94>
		}
		else if (game.current_screen == SPLASH)
    cae6:	81 11       	cpse	r24, r1
    cae8:	03 c0       	rjmp	.+6      	; 0xcaf0 <main+0x8c>
		{
			update_splash();
    caea:	0e 94 17 5e 	call	0xbc2e	; 0xbc2e <update_splash>
    caee:	04 c0       	rjmp	.+8      	; 0xcaf8 <main+0x94>
			
		}
		else if (game.current_screen == HIGH_SCORES)
    caf0:	81 30       	cpi	r24, 0x01	; 1
    caf2:	11 f4       	brne	.+4      	; 0xcaf8 <main+0x94>
		{
			update_high_scores();
    caf4:	0e 94 5e 5e 	call	0xbcbc	; 0xbcbc <update_high_scores>
			
		}
		LBRotateSprites();
    caf8:	0e 94 54 49 	call	0x92a8	; 0x92a8 <LBRotateSprites>
	}
    cafc:	d2 cf       	rjmp	.-92     	; 0xcaa2 <main+0x3e>

0000cafe <__udivmodqi4>:
    cafe:	99 1b       	sub	r25, r25
    cb00:	79 e0       	ldi	r23, 0x09	; 9
    cb02:	04 c0       	rjmp	.+8      	; 0xcb0c <__udivmodqi4_ep>

0000cb04 <__udivmodqi4_loop>:
    cb04:	99 1f       	adc	r25, r25
    cb06:	96 17       	cp	r25, r22
    cb08:	08 f0       	brcs	.+2      	; 0xcb0c <__udivmodqi4_ep>
    cb0a:	96 1b       	sub	r25, r22

0000cb0c <__udivmodqi4_ep>:
    cb0c:	88 1f       	adc	r24, r24
    cb0e:	7a 95       	dec	r23
    cb10:	c9 f7       	brne	.-14     	; 0xcb04 <__udivmodqi4_loop>
    cb12:	80 95       	com	r24
    cb14:	08 95       	ret

0000cb16 <__divmodqi4>:
    cb16:	87 fb       	bst	r24, 7
    cb18:	08 2e       	mov	r0, r24
    cb1a:	06 26       	eor	r0, r22
    cb1c:	87 fd       	sbrc	r24, 7
    cb1e:	81 95       	neg	r24
    cb20:	67 fd       	sbrc	r22, 7
    cb22:	61 95       	neg	r22
    cb24:	0e 94 7f 65 	call	0xcafe	; 0xcafe <__udivmodqi4>
    cb28:	0e f4       	brtc	.+2      	; 0xcb2c <__divmodqi4_1>
    cb2a:	91 95       	neg	r25

0000cb2c <__divmodqi4_1>:
    cb2c:	07 fc       	sbrc	r0, 7
    cb2e:	81 95       	neg	r24

0000cb30 <__divmodqi4_exit>:
    cb30:	08 95       	ret

0000cb32 <__udivmodhi4>:
    cb32:	aa 1b       	sub	r26, r26
    cb34:	bb 1b       	sub	r27, r27
    cb36:	51 e1       	ldi	r21, 0x11	; 17
    cb38:	07 c0       	rjmp	.+14     	; 0xcb48 <__udivmodhi4_ep>

0000cb3a <__udivmodhi4_loop>:
    cb3a:	aa 1f       	adc	r26, r26
    cb3c:	bb 1f       	adc	r27, r27
    cb3e:	a6 17       	cp	r26, r22
    cb40:	b7 07       	cpc	r27, r23
    cb42:	10 f0       	brcs	.+4      	; 0xcb48 <__udivmodhi4_ep>
    cb44:	a6 1b       	sub	r26, r22
    cb46:	b7 0b       	sbc	r27, r23

0000cb48 <__udivmodhi4_ep>:
    cb48:	88 1f       	adc	r24, r24
    cb4a:	99 1f       	adc	r25, r25
    cb4c:	5a 95       	dec	r21
    cb4e:	a9 f7       	brne	.-22     	; 0xcb3a <__udivmodhi4_loop>
    cb50:	80 95       	com	r24
    cb52:	90 95       	com	r25
    cb54:	bc 01       	movw	r22, r24
    cb56:	cd 01       	movw	r24, r26
    cb58:	08 95       	ret

0000cb5a <__divmodhi4>:
    cb5a:	97 fb       	bst	r25, 7
    cb5c:	07 2e       	mov	r0, r23
    cb5e:	16 f4       	brtc	.+4      	; 0xcb64 <__divmodhi4+0xa>
    cb60:	00 94       	com	r0
    cb62:	07 d0       	rcall	.+14     	; 0xcb72 <__divmodhi4_neg1>
    cb64:	77 fd       	sbrc	r23, 7
    cb66:	09 d0       	rcall	.+18     	; 0xcb7a <__divmodhi4_neg2>
    cb68:	0e 94 99 65 	call	0xcb32	; 0xcb32 <__udivmodhi4>
    cb6c:	07 fc       	sbrc	r0, 7
    cb6e:	05 d0       	rcall	.+10     	; 0xcb7a <__divmodhi4_neg2>
    cb70:	3e f4       	brtc	.+14     	; 0xcb80 <__divmodhi4_exit>

0000cb72 <__divmodhi4_neg1>:
    cb72:	90 95       	com	r25
    cb74:	81 95       	neg	r24
    cb76:	9f 4f       	sbci	r25, 0xFF	; 255
    cb78:	08 95       	ret

0000cb7a <__divmodhi4_neg2>:
    cb7a:	70 95       	com	r23
    cb7c:	61 95       	neg	r22
    cb7e:	7f 4f       	sbci	r23, 0xFF	; 255

0000cb80 <__divmodhi4_exit>:
    cb80:	08 95       	ret

0000cb82 <__tablejump2__>:
    cb82:	ee 0f       	add	r30, r30
    cb84:	ff 1f       	adc	r31, r31
    cb86:	05 90       	lpm	r0, Z+
    cb88:	f4 91       	lpm	r31, Z
    cb8a:	e0 2d       	mov	r30, r0
    cb8c:	09 94       	ijmp

0000cb8e <__subsf3>:
    cb8e:	50 58       	subi	r21, 0x80	; 128

0000cb90 <__addsf3>:
    cb90:	bb 27       	eor	r27, r27
    cb92:	aa 27       	eor	r26, r26
    cb94:	0e d0       	rcall	.+28     	; 0xcbb2 <__addsf3x>
    cb96:	08 c1       	rjmp	.+528    	; 0xcda8 <__fp_round>
    cb98:	f9 d0       	rcall	.+498    	; 0xcd8c <__fp_pscA>
    cb9a:	30 f0       	brcs	.+12     	; 0xcba8 <__addsf3+0x18>
    cb9c:	fe d0       	rcall	.+508    	; 0xcd9a <__fp_pscB>
    cb9e:	20 f0       	brcs	.+8      	; 0xcba8 <__addsf3+0x18>
    cba0:	31 f4       	brne	.+12     	; 0xcbae <__addsf3+0x1e>
    cba2:	9f 3f       	cpi	r25, 0xFF	; 255
    cba4:	11 f4       	brne	.+4      	; 0xcbaa <__addsf3+0x1a>
    cba6:	1e f4       	brtc	.+6      	; 0xcbae <__addsf3+0x1e>
    cba8:	ee c0       	rjmp	.+476    	; 0xcd86 <__fp_nan>
    cbaa:	0e f4       	brtc	.+2      	; 0xcbae <__addsf3+0x1e>
    cbac:	e0 95       	com	r30
    cbae:	e7 fb       	bst	r30, 7
    cbb0:	e4 c0       	rjmp	.+456    	; 0xcd7a <__fp_inf>

0000cbb2 <__addsf3x>:
    cbb2:	e9 2f       	mov	r30, r25
    cbb4:	0a d1       	rcall	.+532    	; 0xcdca <__fp_split3>
    cbb6:	80 f3       	brcs	.-32     	; 0xcb98 <__addsf3+0x8>
    cbb8:	ba 17       	cp	r27, r26
    cbba:	62 07       	cpc	r22, r18
    cbbc:	73 07       	cpc	r23, r19
    cbbe:	84 07       	cpc	r24, r20
    cbc0:	95 07       	cpc	r25, r21
    cbc2:	18 f0       	brcs	.+6      	; 0xcbca <__addsf3x+0x18>
    cbc4:	71 f4       	brne	.+28     	; 0xcbe2 <__addsf3x+0x30>
    cbc6:	9e f5       	brtc	.+102    	; 0xcc2e <__addsf3x+0x7c>
    cbc8:	22 c1       	rjmp	.+580    	; 0xce0e <__fp_zero>
    cbca:	0e f4       	brtc	.+2      	; 0xcbce <__addsf3x+0x1c>
    cbcc:	e0 95       	com	r30
    cbce:	0b 2e       	mov	r0, r27
    cbd0:	ba 2f       	mov	r27, r26
    cbd2:	a0 2d       	mov	r26, r0
    cbd4:	0b 01       	movw	r0, r22
    cbd6:	b9 01       	movw	r22, r18
    cbd8:	90 01       	movw	r18, r0
    cbda:	0c 01       	movw	r0, r24
    cbdc:	ca 01       	movw	r24, r20
    cbde:	a0 01       	movw	r20, r0
    cbe0:	11 24       	eor	r1, r1
    cbe2:	ff 27       	eor	r31, r31
    cbe4:	59 1b       	sub	r21, r25
    cbe6:	99 f0       	breq	.+38     	; 0xcc0e <__addsf3x+0x5c>
    cbe8:	59 3f       	cpi	r21, 0xF9	; 249
    cbea:	50 f4       	brcc	.+20     	; 0xcc00 <__addsf3x+0x4e>
    cbec:	50 3e       	cpi	r21, 0xE0	; 224
    cbee:	68 f1       	brcs	.+90     	; 0xcc4a <__addsf3x+0x98>
    cbf0:	1a 16       	cp	r1, r26
    cbf2:	f0 40       	sbci	r31, 0x00	; 0
    cbf4:	a2 2f       	mov	r26, r18
    cbf6:	23 2f       	mov	r18, r19
    cbf8:	34 2f       	mov	r19, r20
    cbfa:	44 27       	eor	r20, r20
    cbfc:	58 5f       	subi	r21, 0xF8	; 248
    cbfe:	f3 cf       	rjmp	.-26     	; 0xcbe6 <__addsf3x+0x34>
    cc00:	46 95       	lsr	r20
    cc02:	37 95       	ror	r19
    cc04:	27 95       	ror	r18
    cc06:	a7 95       	ror	r26
    cc08:	f0 40       	sbci	r31, 0x00	; 0
    cc0a:	53 95       	inc	r21
    cc0c:	c9 f7       	brne	.-14     	; 0xcc00 <__addsf3x+0x4e>
    cc0e:	7e f4       	brtc	.+30     	; 0xcc2e <__addsf3x+0x7c>
    cc10:	1f 16       	cp	r1, r31
    cc12:	ba 0b       	sbc	r27, r26
    cc14:	62 0b       	sbc	r22, r18
    cc16:	73 0b       	sbc	r23, r19
    cc18:	84 0b       	sbc	r24, r20
    cc1a:	ba f0       	brmi	.+46     	; 0xcc4a <__addsf3x+0x98>
    cc1c:	91 50       	subi	r25, 0x01	; 1
    cc1e:	a1 f0       	breq	.+40     	; 0xcc48 <__addsf3x+0x96>
    cc20:	ff 0f       	add	r31, r31
    cc22:	bb 1f       	adc	r27, r27
    cc24:	66 1f       	adc	r22, r22
    cc26:	77 1f       	adc	r23, r23
    cc28:	88 1f       	adc	r24, r24
    cc2a:	c2 f7       	brpl	.-16     	; 0xcc1c <__addsf3x+0x6a>
    cc2c:	0e c0       	rjmp	.+28     	; 0xcc4a <__addsf3x+0x98>
    cc2e:	ba 0f       	add	r27, r26
    cc30:	62 1f       	adc	r22, r18
    cc32:	73 1f       	adc	r23, r19
    cc34:	84 1f       	adc	r24, r20
    cc36:	48 f4       	brcc	.+18     	; 0xcc4a <__addsf3x+0x98>
    cc38:	87 95       	ror	r24
    cc3a:	77 95       	ror	r23
    cc3c:	67 95       	ror	r22
    cc3e:	b7 95       	ror	r27
    cc40:	f7 95       	ror	r31
    cc42:	9e 3f       	cpi	r25, 0xFE	; 254
    cc44:	08 f0       	brcs	.+2      	; 0xcc48 <__addsf3x+0x96>
    cc46:	b3 cf       	rjmp	.-154    	; 0xcbae <__addsf3+0x1e>
    cc48:	93 95       	inc	r25
    cc4a:	88 0f       	add	r24, r24
    cc4c:	08 f0       	brcs	.+2      	; 0xcc50 <__addsf3x+0x9e>
    cc4e:	99 27       	eor	r25, r25
    cc50:	ee 0f       	add	r30, r30
    cc52:	97 95       	ror	r25
    cc54:	87 95       	ror	r24
    cc56:	08 95       	ret

0000cc58 <__cmpsf2>:
    cc58:	6c d0       	rcall	.+216    	; 0xcd32 <__fp_cmp>
    cc5a:	08 f4       	brcc	.+2      	; 0xcc5e <__cmpsf2+0x6>
    cc5c:	81 e0       	ldi	r24, 0x01	; 1
    cc5e:	08 95       	ret

0000cc60 <__fixunssfsi>:
    cc60:	bc d0       	rcall	.+376    	; 0xcdda <__fp_splitA>
    cc62:	88 f0       	brcs	.+34     	; 0xcc86 <__fixunssfsi+0x26>
    cc64:	9f 57       	subi	r25, 0x7F	; 127
    cc66:	90 f0       	brcs	.+36     	; 0xcc8c <__fixunssfsi+0x2c>
    cc68:	b9 2f       	mov	r27, r25
    cc6a:	99 27       	eor	r25, r25
    cc6c:	b7 51       	subi	r27, 0x17	; 23
    cc6e:	a0 f0       	brcs	.+40     	; 0xcc98 <__fixunssfsi+0x38>
    cc70:	d1 f0       	breq	.+52     	; 0xcca6 <__fixunssfsi+0x46>
    cc72:	66 0f       	add	r22, r22
    cc74:	77 1f       	adc	r23, r23
    cc76:	88 1f       	adc	r24, r24
    cc78:	99 1f       	adc	r25, r25
    cc7a:	1a f0       	brmi	.+6      	; 0xcc82 <__fixunssfsi+0x22>
    cc7c:	ba 95       	dec	r27
    cc7e:	c9 f7       	brne	.-14     	; 0xcc72 <__fixunssfsi+0x12>
    cc80:	12 c0       	rjmp	.+36     	; 0xcca6 <__fixunssfsi+0x46>
    cc82:	b1 30       	cpi	r27, 0x01	; 1
    cc84:	81 f0       	breq	.+32     	; 0xcca6 <__fixunssfsi+0x46>
    cc86:	c3 d0       	rcall	.+390    	; 0xce0e <__fp_zero>
    cc88:	b1 e0       	ldi	r27, 0x01	; 1
    cc8a:	08 95       	ret
    cc8c:	c0 c0       	rjmp	.+384    	; 0xce0e <__fp_zero>
    cc8e:	67 2f       	mov	r22, r23
    cc90:	78 2f       	mov	r23, r24
    cc92:	88 27       	eor	r24, r24
    cc94:	b8 5f       	subi	r27, 0xF8	; 248
    cc96:	39 f0       	breq	.+14     	; 0xcca6 <__fixunssfsi+0x46>
    cc98:	b9 3f       	cpi	r27, 0xF9	; 249
    cc9a:	cc f3       	brlt	.-14     	; 0xcc8e <__fixunssfsi+0x2e>
    cc9c:	86 95       	lsr	r24
    cc9e:	77 95       	ror	r23
    cca0:	67 95       	ror	r22
    cca2:	b3 95       	inc	r27
    cca4:	d9 f7       	brne	.-10     	; 0xcc9c <__fixunssfsi+0x3c>
    cca6:	3e f4       	brtc	.+14     	; 0xccb6 <__fixunssfsi+0x56>
    cca8:	90 95       	com	r25
    ccaa:	80 95       	com	r24
    ccac:	70 95       	com	r23
    ccae:	61 95       	neg	r22
    ccb0:	7f 4f       	sbci	r23, 0xFF	; 255
    ccb2:	8f 4f       	sbci	r24, 0xFF	; 255
    ccb4:	9f 4f       	sbci	r25, 0xFF	; 255
    ccb6:	08 95       	ret

0000ccb8 <__floatunsisf>:
    ccb8:	e8 94       	clt
    ccba:	09 c0       	rjmp	.+18     	; 0xccce <__floatsisf+0x12>

0000ccbc <__floatsisf>:
    ccbc:	97 fb       	bst	r25, 7
    ccbe:	3e f4       	brtc	.+14     	; 0xccce <__floatsisf+0x12>
    ccc0:	90 95       	com	r25
    ccc2:	80 95       	com	r24
    ccc4:	70 95       	com	r23
    ccc6:	61 95       	neg	r22
    ccc8:	7f 4f       	sbci	r23, 0xFF	; 255
    ccca:	8f 4f       	sbci	r24, 0xFF	; 255
    cccc:	9f 4f       	sbci	r25, 0xFF	; 255
    ccce:	99 23       	and	r25, r25
    ccd0:	a9 f0       	breq	.+42     	; 0xccfc <__floatsisf+0x40>
    ccd2:	f9 2f       	mov	r31, r25
    ccd4:	96 e9       	ldi	r25, 0x96	; 150
    ccd6:	bb 27       	eor	r27, r27
    ccd8:	93 95       	inc	r25
    ccda:	f6 95       	lsr	r31
    ccdc:	87 95       	ror	r24
    ccde:	77 95       	ror	r23
    cce0:	67 95       	ror	r22
    cce2:	b7 95       	ror	r27
    cce4:	f1 11       	cpse	r31, r1
    cce6:	f8 cf       	rjmp	.-16     	; 0xccd8 <__floatsisf+0x1c>
    cce8:	fa f4       	brpl	.+62     	; 0xcd28 <__floatsisf+0x6c>
    ccea:	bb 0f       	add	r27, r27
    ccec:	11 f4       	brne	.+4      	; 0xccf2 <__floatsisf+0x36>
    ccee:	60 ff       	sbrs	r22, 0
    ccf0:	1b c0       	rjmp	.+54     	; 0xcd28 <__floatsisf+0x6c>
    ccf2:	6f 5f       	subi	r22, 0xFF	; 255
    ccf4:	7f 4f       	sbci	r23, 0xFF	; 255
    ccf6:	8f 4f       	sbci	r24, 0xFF	; 255
    ccf8:	9f 4f       	sbci	r25, 0xFF	; 255
    ccfa:	16 c0       	rjmp	.+44     	; 0xcd28 <__floatsisf+0x6c>
    ccfc:	88 23       	and	r24, r24
    ccfe:	11 f0       	breq	.+4      	; 0xcd04 <__floatsisf+0x48>
    cd00:	96 e9       	ldi	r25, 0x96	; 150
    cd02:	11 c0       	rjmp	.+34     	; 0xcd26 <__floatsisf+0x6a>
    cd04:	77 23       	and	r23, r23
    cd06:	21 f0       	breq	.+8      	; 0xcd10 <__floatsisf+0x54>
    cd08:	9e e8       	ldi	r25, 0x8E	; 142
    cd0a:	87 2f       	mov	r24, r23
    cd0c:	76 2f       	mov	r23, r22
    cd0e:	05 c0       	rjmp	.+10     	; 0xcd1a <__floatsisf+0x5e>
    cd10:	66 23       	and	r22, r22
    cd12:	71 f0       	breq	.+28     	; 0xcd30 <__floatsisf+0x74>
    cd14:	96 e8       	ldi	r25, 0x86	; 134
    cd16:	86 2f       	mov	r24, r22
    cd18:	70 e0       	ldi	r23, 0x00	; 0
    cd1a:	60 e0       	ldi	r22, 0x00	; 0
    cd1c:	2a f0       	brmi	.+10     	; 0xcd28 <__floatsisf+0x6c>
    cd1e:	9a 95       	dec	r25
    cd20:	66 0f       	add	r22, r22
    cd22:	77 1f       	adc	r23, r23
    cd24:	88 1f       	adc	r24, r24
    cd26:	da f7       	brpl	.-10     	; 0xcd1e <__floatsisf+0x62>
    cd28:	88 0f       	add	r24, r24
    cd2a:	96 95       	lsr	r25
    cd2c:	87 95       	ror	r24
    cd2e:	97 f9       	bld	r25, 7
    cd30:	08 95       	ret

0000cd32 <__fp_cmp>:
    cd32:	99 0f       	add	r25, r25
    cd34:	00 08       	sbc	r0, r0
    cd36:	55 0f       	add	r21, r21
    cd38:	aa 0b       	sbc	r26, r26
    cd3a:	e0 e8       	ldi	r30, 0x80	; 128
    cd3c:	fe ef       	ldi	r31, 0xFE	; 254
    cd3e:	16 16       	cp	r1, r22
    cd40:	17 06       	cpc	r1, r23
    cd42:	e8 07       	cpc	r30, r24
    cd44:	f9 07       	cpc	r31, r25
    cd46:	c0 f0       	brcs	.+48     	; 0xcd78 <__fp_cmp+0x46>
    cd48:	12 16       	cp	r1, r18
    cd4a:	13 06       	cpc	r1, r19
    cd4c:	e4 07       	cpc	r30, r20
    cd4e:	f5 07       	cpc	r31, r21
    cd50:	98 f0       	brcs	.+38     	; 0xcd78 <__fp_cmp+0x46>
    cd52:	62 1b       	sub	r22, r18
    cd54:	73 0b       	sbc	r23, r19
    cd56:	84 0b       	sbc	r24, r20
    cd58:	95 0b       	sbc	r25, r21
    cd5a:	39 f4       	brne	.+14     	; 0xcd6a <__fp_cmp+0x38>
    cd5c:	0a 26       	eor	r0, r26
    cd5e:	61 f0       	breq	.+24     	; 0xcd78 <__fp_cmp+0x46>
    cd60:	23 2b       	or	r18, r19
    cd62:	24 2b       	or	r18, r20
    cd64:	25 2b       	or	r18, r21
    cd66:	21 f4       	brne	.+8      	; 0xcd70 <__fp_cmp+0x3e>
    cd68:	08 95       	ret
    cd6a:	0a 26       	eor	r0, r26
    cd6c:	09 f4       	brne	.+2      	; 0xcd70 <__fp_cmp+0x3e>
    cd6e:	a1 40       	sbci	r26, 0x01	; 1
    cd70:	a6 95       	lsr	r26
    cd72:	8f ef       	ldi	r24, 0xFF	; 255
    cd74:	81 1d       	adc	r24, r1
    cd76:	81 1d       	adc	r24, r1
    cd78:	08 95       	ret

0000cd7a <__fp_inf>:
    cd7a:	97 f9       	bld	r25, 7
    cd7c:	9f 67       	ori	r25, 0x7F	; 127
    cd7e:	80 e8       	ldi	r24, 0x80	; 128
    cd80:	70 e0       	ldi	r23, 0x00	; 0
    cd82:	60 e0       	ldi	r22, 0x00	; 0
    cd84:	08 95       	ret

0000cd86 <__fp_nan>:
    cd86:	9f ef       	ldi	r25, 0xFF	; 255
    cd88:	80 ec       	ldi	r24, 0xC0	; 192
    cd8a:	08 95       	ret

0000cd8c <__fp_pscA>:
    cd8c:	00 24       	eor	r0, r0
    cd8e:	0a 94       	dec	r0
    cd90:	16 16       	cp	r1, r22
    cd92:	17 06       	cpc	r1, r23
    cd94:	18 06       	cpc	r1, r24
    cd96:	09 06       	cpc	r0, r25
    cd98:	08 95       	ret

0000cd9a <__fp_pscB>:
    cd9a:	00 24       	eor	r0, r0
    cd9c:	0a 94       	dec	r0
    cd9e:	12 16       	cp	r1, r18
    cda0:	13 06       	cpc	r1, r19
    cda2:	14 06       	cpc	r1, r20
    cda4:	05 06       	cpc	r0, r21
    cda6:	08 95       	ret

0000cda8 <__fp_round>:
    cda8:	09 2e       	mov	r0, r25
    cdaa:	03 94       	inc	r0
    cdac:	00 0c       	add	r0, r0
    cdae:	11 f4       	brne	.+4      	; 0xcdb4 <__fp_round+0xc>
    cdb0:	88 23       	and	r24, r24
    cdb2:	52 f0       	brmi	.+20     	; 0xcdc8 <__fp_round+0x20>
    cdb4:	bb 0f       	add	r27, r27
    cdb6:	40 f4       	brcc	.+16     	; 0xcdc8 <__fp_round+0x20>
    cdb8:	bf 2b       	or	r27, r31
    cdba:	11 f4       	brne	.+4      	; 0xcdc0 <__fp_round+0x18>
    cdbc:	60 ff       	sbrs	r22, 0
    cdbe:	04 c0       	rjmp	.+8      	; 0xcdc8 <__fp_round+0x20>
    cdc0:	6f 5f       	subi	r22, 0xFF	; 255
    cdc2:	7f 4f       	sbci	r23, 0xFF	; 255
    cdc4:	8f 4f       	sbci	r24, 0xFF	; 255
    cdc6:	9f 4f       	sbci	r25, 0xFF	; 255
    cdc8:	08 95       	ret

0000cdca <__fp_split3>:
    cdca:	57 fd       	sbrc	r21, 7
    cdcc:	90 58       	subi	r25, 0x80	; 128
    cdce:	44 0f       	add	r20, r20
    cdd0:	55 1f       	adc	r21, r21
    cdd2:	59 f0       	breq	.+22     	; 0xcdea <__fp_splitA+0x10>
    cdd4:	5f 3f       	cpi	r21, 0xFF	; 255
    cdd6:	71 f0       	breq	.+28     	; 0xcdf4 <__fp_splitA+0x1a>
    cdd8:	47 95       	ror	r20

0000cdda <__fp_splitA>:
    cdda:	88 0f       	add	r24, r24
    cddc:	97 fb       	bst	r25, 7
    cdde:	99 1f       	adc	r25, r25
    cde0:	61 f0       	breq	.+24     	; 0xcdfa <__fp_splitA+0x20>
    cde2:	9f 3f       	cpi	r25, 0xFF	; 255
    cde4:	79 f0       	breq	.+30     	; 0xce04 <__fp_splitA+0x2a>
    cde6:	87 95       	ror	r24
    cde8:	08 95       	ret
    cdea:	12 16       	cp	r1, r18
    cdec:	13 06       	cpc	r1, r19
    cdee:	14 06       	cpc	r1, r20
    cdf0:	55 1f       	adc	r21, r21
    cdf2:	f2 cf       	rjmp	.-28     	; 0xcdd8 <__fp_split3+0xe>
    cdf4:	46 95       	lsr	r20
    cdf6:	f1 df       	rcall	.-30     	; 0xcdda <__fp_splitA>
    cdf8:	08 c0       	rjmp	.+16     	; 0xce0a <__fp_splitA+0x30>
    cdfa:	16 16       	cp	r1, r22
    cdfc:	17 06       	cpc	r1, r23
    cdfe:	18 06       	cpc	r1, r24
    ce00:	99 1f       	adc	r25, r25
    ce02:	f1 cf       	rjmp	.-30     	; 0xcde6 <__fp_splitA+0xc>
    ce04:	86 95       	lsr	r24
    ce06:	71 05       	cpc	r23, r1
    ce08:	61 05       	cpc	r22, r1
    ce0a:	08 94       	sec
    ce0c:	08 95       	ret

0000ce0e <__fp_zero>:
    ce0e:	e8 94       	clt

0000ce10 <__fp_szero>:
    ce10:	bb 27       	eor	r27, r27
    ce12:	66 27       	eor	r22, r22
    ce14:	77 27       	eor	r23, r23
    ce16:	cb 01       	movw	r24, r22
    ce18:	97 f9       	bld	r25, 7
    ce1a:	08 95       	ret

0000ce1c <__gesf2>:
    ce1c:	8a df       	rcall	.-236    	; 0xcd32 <__fp_cmp>
    ce1e:	08 f4       	brcc	.+2      	; 0xce22 <__gesf2+0x6>
    ce20:	8f ef       	ldi	r24, 0xFF	; 255
    ce22:	08 95       	ret

0000ce24 <__mulsf3>:
    ce24:	0b d0       	rcall	.+22     	; 0xce3c <__mulsf3x>
    ce26:	c0 cf       	rjmp	.-128    	; 0xcda8 <__fp_round>
    ce28:	b1 df       	rcall	.-158    	; 0xcd8c <__fp_pscA>
    ce2a:	28 f0       	brcs	.+10     	; 0xce36 <__mulsf3+0x12>
    ce2c:	b6 df       	rcall	.-148    	; 0xcd9a <__fp_pscB>
    ce2e:	18 f0       	brcs	.+6      	; 0xce36 <__mulsf3+0x12>
    ce30:	95 23       	and	r25, r21
    ce32:	09 f0       	breq	.+2      	; 0xce36 <__mulsf3+0x12>
    ce34:	a2 cf       	rjmp	.-188    	; 0xcd7a <__fp_inf>
    ce36:	a7 cf       	rjmp	.-178    	; 0xcd86 <__fp_nan>
    ce38:	11 24       	eor	r1, r1
    ce3a:	ea cf       	rjmp	.-44     	; 0xce10 <__fp_szero>

0000ce3c <__mulsf3x>:
    ce3c:	c6 df       	rcall	.-116    	; 0xcdca <__fp_split3>
    ce3e:	a0 f3       	brcs	.-24     	; 0xce28 <__mulsf3+0x4>

0000ce40 <__mulsf3_pse>:
    ce40:	95 9f       	mul	r25, r21
    ce42:	d1 f3       	breq	.-12     	; 0xce38 <__mulsf3+0x14>
    ce44:	95 0f       	add	r25, r21
    ce46:	50 e0       	ldi	r21, 0x00	; 0
    ce48:	55 1f       	adc	r21, r21
    ce4a:	62 9f       	mul	r22, r18
    ce4c:	f0 01       	movw	r30, r0
    ce4e:	72 9f       	mul	r23, r18
    ce50:	bb 27       	eor	r27, r27
    ce52:	f0 0d       	add	r31, r0
    ce54:	b1 1d       	adc	r27, r1
    ce56:	63 9f       	mul	r22, r19
    ce58:	aa 27       	eor	r26, r26
    ce5a:	f0 0d       	add	r31, r0
    ce5c:	b1 1d       	adc	r27, r1
    ce5e:	aa 1f       	adc	r26, r26
    ce60:	64 9f       	mul	r22, r20
    ce62:	66 27       	eor	r22, r22
    ce64:	b0 0d       	add	r27, r0
    ce66:	a1 1d       	adc	r26, r1
    ce68:	66 1f       	adc	r22, r22
    ce6a:	82 9f       	mul	r24, r18
    ce6c:	22 27       	eor	r18, r18
    ce6e:	b0 0d       	add	r27, r0
    ce70:	a1 1d       	adc	r26, r1
    ce72:	62 1f       	adc	r22, r18
    ce74:	73 9f       	mul	r23, r19
    ce76:	b0 0d       	add	r27, r0
    ce78:	a1 1d       	adc	r26, r1
    ce7a:	62 1f       	adc	r22, r18
    ce7c:	83 9f       	mul	r24, r19
    ce7e:	a0 0d       	add	r26, r0
    ce80:	61 1d       	adc	r22, r1
    ce82:	22 1f       	adc	r18, r18
    ce84:	74 9f       	mul	r23, r20
    ce86:	33 27       	eor	r19, r19
    ce88:	a0 0d       	add	r26, r0
    ce8a:	61 1d       	adc	r22, r1
    ce8c:	23 1f       	adc	r18, r19
    ce8e:	84 9f       	mul	r24, r20
    ce90:	60 0d       	add	r22, r0
    ce92:	21 1d       	adc	r18, r1
    ce94:	82 2f       	mov	r24, r18
    ce96:	76 2f       	mov	r23, r22
    ce98:	6a 2f       	mov	r22, r26
    ce9a:	11 24       	eor	r1, r1
    ce9c:	9f 57       	subi	r25, 0x7F	; 127
    ce9e:	50 40       	sbci	r21, 0x00	; 0
    cea0:	8a f0       	brmi	.+34     	; 0xcec4 <__mulsf3_pse+0x84>
    cea2:	e1 f0       	breq	.+56     	; 0xcedc <__mulsf3_pse+0x9c>
    cea4:	88 23       	and	r24, r24
    cea6:	4a f0       	brmi	.+18     	; 0xceba <__mulsf3_pse+0x7a>
    cea8:	ee 0f       	add	r30, r30
    ceaa:	ff 1f       	adc	r31, r31
    ceac:	bb 1f       	adc	r27, r27
    ceae:	66 1f       	adc	r22, r22
    ceb0:	77 1f       	adc	r23, r23
    ceb2:	88 1f       	adc	r24, r24
    ceb4:	91 50       	subi	r25, 0x01	; 1
    ceb6:	50 40       	sbci	r21, 0x00	; 0
    ceb8:	a9 f7       	brne	.-22     	; 0xcea4 <__mulsf3_pse+0x64>
    ceba:	9e 3f       	cpi	r25, 0xFE	; 254
    cebc:	51 05       	cpc	r21, r1
    cebe:	70 f0       	brcs	.+28     	; 0xcedc <__mulsf3_pse+0x9c>
    cec0:	5c cf       	rjmp	.-328    	; 0xcd7a <__fp_inf>
    cec2:	a6 cf       	rjmp	.-180    	; 0xce10 <__fp_szero>
    cec4:	5f 3f       	cpi	r21, 0xFF	; 255
    cec6:	ec f3       	brlt	.-6      	; 0xcec2 <__mulsf3_pse+0x82>
    cec8:	98 3e       	cpi	r25, 0xE8	; 232
    ceca:	dc f3       	brlt	.-10     	; 0xcec2 <__mulsf3_pse+0x82>
    cecc:	86 95       	lsr	r24
    cece:	77 95       	ror	r23
    ced0:	67 95       	ror	r22
    ced2:	b7 95       	ror	r27
    ced4:	f7 95       	ror	r31
    ced6:	e7 95       	ror	r30
    ced8:	9f 5f       	subi	r25, 0xFF	; 255
    ceda:	c1 f7       	brne	.-16     	; 0xcecc <__mulsf3_pse+0x8c>
    cedc:	fe 2b       	or	r31, r30
    cede:	88 0f       	add	r24, r24
    cee0:	91 1d       	adc	r25, r1
    cee2:	96 95       	lsr	r25
    cee4:	87 95       	ror	r24
    cee6:	97 f9       	bld	r25, 7
    cee8:	08 95       	ret

0000ceea <strnlen_P>:
    ceea:	fc 01       	movw	r30, r24
    ceec:	05 90       	lpm	r0, Z+
    ceee:	61 50       	subi	r22, 0x01	; 1
    cef0:	70 40       	sbci	r23, 0x00	; 0
    cef2:	01 10       	cpse	r0, r1
    cef4:	d8 f7       	brcc	.-10     	; 0xceec <strnlen_P+0x2>
    cef6:	80 95       	com	r24
    cef8:	90 95       	com	r25
    cefa:	8e 0f       	add	r24, r30
    cefc:	9f 1f       	adc	r25, r31
    cefe:	08 95       	ret

0000cf00 <_exit>:
    cf00:	f8 94       	cli

0000cf02 <__stop_program>:
    cf02:	ff cf       	rjmp	.-2      	; 0xcf02 <__stop_program>
