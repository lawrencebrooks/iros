
Iris.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800500  0000d314  0000d414  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .noinit       00000400  00800100  00800100  0000d440  2**5
                  CONTENTS, READONLY
  2 .text         0000d314  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .bss          00000aff  00800510  00800510  0000d424  2**1
                  ALLOC
  4 .stab         00000708  00000000  00000000  0000d840  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000002f1  00000000  00000000  0000df48  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  0000e239  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000690  00000000  00000000  0000e250  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00008e76  00000000  00000000  0000e8e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001680  00000000  00000000  00017756  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000022cb  00000000  00000000  00018dd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001628  00000000  00000000  0001b0a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00001b96  00000000  00000000  0001c6cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000077d2  00000000  00000000  0001e262  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000828  00000000  00000000  00025a38  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 61 34 	jmp	0x68c2	; 0x68c2 <__ctors_end>
       4:	0c 94 ca 34 	jmp	0x6994	; 0x6994 <__bad_interrupt>
       8:	0c 94 ca 34 	jmp	0x6994	; 0x6994 <__bad_interrupt>
       c:	0c 94 ca 34 	jmp	0x6994	; 0x6994 <__bad_interrupt>
      10:	0c 94 ca 34 	jmp	0x6994	; 0x6994 <__bad_interrupt>
      14:	0c 94 ca 34 	jmp	0x6994	; 0x6994 <__bad_interrupt>
      18:	0c 94 ca 34 	jmp	0x6994	; 0x6994 <__bad_interrupt>
      1c:	0c 94 ca 34 	jmp	0x6994	; 0x6994 <__bad_interrupt>
      20:	0c 94 42 3a 	jmp	0x7484	; 0x7484 <__vector_8>
      24:	0c 94 ca 34 	jmp	0x6994	; 0x6994 <__bad_interrupt>
      28:	0c 94 ca 34 	jmp	0x6994	; 0x6994 <__bad_interrupt>
      2c:	0c 94 ca 34 	jmp	0x6994	; 0x6994 <__bad_interrupt>
      30:	0c 94 ca 34 	jmp	0x6994	; 0x6994 <__bad_interrupt>
      34:	0c 94 0e 38 	jmp	0x701c	; 0x701c <__vector_13>
      38:	0c 94 4e 38 	jmp	0x709c	; 0x709c <__vector_14>
      3c:	0c 94 ca 34 	jmp	0x6994	; 0x6994 <__bad_interrupt>
      40:	0c 94 ca 34 	jmp	0x6994	; 0x6994 <__bad_interrupt>
      44:	0c 94 ca 34 	jmp	0x6994	; 0x6994 <__bad_interrupt>
      48:	0c 94 ca 34 	jmp	0x6994	; 0x6994 <__bad_interrupt>
      4c:	0c 94 ca 34 	jmp	0x6994	; 0x6994 <__bad_interrupt>
      50:	0c 94 ca 34 	jmp	0x6994	; 0x6994 <__bad_interrupt>
      54:	0c 94 ca 34 	jmp	0x6994	; 0x6994 <__bad_interrupt>
      58:	0c 94 ca 34 	jmp	0x6994	; 0x6994 <__bad_interrupt>
      5c:	0c 94 ca 34 	jmp	0x6994	; 0x6994 <__bad_interrupt>
      60:	0c 94 ca 34 	jmp	0x6994	; 0x6994 <__bad_interrupt>
      64:	0c 94 ca 34 	jmp	0x6994	; 0x6994 <__bad_interrupt>
      68:	0c 94 ca 34 	jmp	0x6994	; 0x6994 <__bad_interrupt>
      6c:	0c 94 ca 34 	jmp	0x6994	; 0x6994 <__bad_interrupt>
      70:	71 5c       	subi	r23, 0xC1	; 193
      72:	80 5c       	subi	r24, 0xC0	; 192
      74:	74 5c       	subi	r23, 0xC4	; 196
      76:	80 5c       	subi	r24, 0xC0	; 192
      78:	77 5c       	subi	r23, 0xC7	; 199
      7a:	80 5c       	subi	r24, 0xC0	; 192
      7c:	7a 5c       	subi	r23, 0xCA	; 202
      7e:	80 5c       	subi	r24, 0xC0	; 192
      80:	7d 5c       	subi	r23, 0xCD	; 205
      82:	80 5c       	subi	r24, 0xC0	; 192

00000084 <__trampolines_end>:
      84:	81 00       	.word	0x0081	; ????
      86:	45 00       	.word	0x0045	; ????
      88:	27 ff       	sbrs	r18, 7
      8a:	24 ff       	sbrs	r18, 4
      8c:	2a 90       	ld	r2, -Y
      8e:	2b 1c       	adc	r2, r11
      90:	21 0c       	add	r2, r1
      92:	22 fb       	bst	r18, 2
      94:	85 00       	.word	0x0085	; ????
      96:	84 00       	.word	0x0084	; ????
      98:	89 03       	fmulsu	r16, r17
      9a:	88 8d       	ldd	r24, Y+24	; 0x18
      9c:	81 09       	sbc	r24, r1
      9e:	6f 02       	muls	r22, r31
      a0:	44 42       	sbci	r20, 0x24	; 36
      a2:	47 00       	.word	0x0047	; ????
      a4:	45 01       	movw	r8, r10
      a6:	b0 83       	st	Z, r27
      a8:	b3 00       	.word	0x00b3	; ????
      aa:	b1 01       	movw	r22, r2
      ac:	25 11       	cpse	r18, r5
      ae:	8a 4f       	sbci	r24, 0xFA	; 250
      b0:	8b 03       	fmulsu	r16, r19

000000b2 <eeprom_format_table>:
      b2:	5a 55 01 20 01 01 00 38 08 00 00 00 00 00 00 00     ZU. ...8........
	...

000000d2 <patchCommands>:
      d2:	eb 3b ee 3b 4a 3c 4e 3c 55 3c f6 3b fb 3b 00 3c     .;.;J<N<U<.;.;.<
      e2:	5d 3c 03 3c 06 3c 09 3c 44 3c 47 3c 6d 3c           ]<.<.<.<D<G<m<

000000f0 <fader>:
      f0:	00 40 88 91 d2 e4 ad b5 b6 be bf ff                 .@..........

000000fc <map_uzeboxlogo2>:
      fc:	05 03 00 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f     ................
	...

0000010d <map_uzeboxlogo>:
     10d:	05 04 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d     ................
     11d:	00 0e 0f 10 11 12                                   ......

00000123 <logo_tileset>:
	...
     17f:	00 00 00 49 00 00 00 00 00 49 52 52 00 00 00 49     ...I.....IRR...I
     18f:	52 53 1c 25 00 49 52 52 24 25 25 1b 52 52 5c 2d     RS.%.IRR$%%.RR\-
     19f:	2d 1c 12 12 00 00 00 00 00 00 00 00 00 00 00 00     -...............
     1af:	40 49 49 49 00 40 49 49 52 5b 5b 5b 4a 52 52 5b     @III.@IIR[[[JRR[
     1bf:	1c 1c 13 12 5b 1c 24 1c 12 09 09 09 24 1b 12 09     ....[.$.....$...
     1cf:	09 09 09 0a 0a 0a 0a 0a 0a 0a 0a 13 0a 0a 12 0a     ................
     1df:	0a 12 13 0a 00 00 00 00 00 00 00 00 92 52 52 52     .............RRR
     1ef:	52 52 52 49 13 12 13 09 00 1c 1b 13 0a 12 12 40     RRRI...........@
     1ff:	1b 65 64 1c 09 0a 00 09 24 1b 1c 65 12 00 00 25     .ed.....$..e...%
     20f:	1c 1c 1c 1c 01 00 25 24 1c 1c 1c 1c 00 24 25 24     ......%$.....$%$
     21f:	24 24 1c 1c 00 00 00 00 00 00 00 00 49 40 00 00     $$..........I@..
     22f:	00 00 00 00 52 49 49 00 00 00 00 00 1c 5b 4a 48     ....RII......[JH
     23f:	00 00 00 00 1c 25 52 49 00 00 00 00 65 24 64 49     .....%RI....e$dI
     24f:	00 00 00 00 65 25 64 49 00 00 00 00 6d 2e 5c 49     ....e%dI....m.\I
	...
     267:	00 00 40 52 00 00 00 00 00 49 52 5c 00 00 00 00     ..@R.....IR\....
     277:	53 52 24 25 00 00 00 53 52 25 25 25 00 00 4a 52     SR$%...SR%%%..JR
     287:	25 25 1b 00 00 00 5b 25 13 00 00 1b 00 5b 53 00     %%....[%.....[S.
     297:	0a 1c 37 37 09 5b 1c 65 7f 37 2e 2e 52 2e 2e 1c     ..77.[.e.7..R...
     2a7:	13 13 12 00 2e 25 1b 13 12 00 00 12 1c 1c 12 00     .....%..........
     2b7:	00 12 25 1c 12 00 00 12 2e 37 1c 13 00 13 2e 37     ..%......7.....7
     2c7:	36 1c 13 1b 37 37 2e 2e 25 13 1c 1c 2e 2e 2e 2e     6...77..%.......
     2d7:	1b 1c 1c 1c 6e 6e 6e 1c 1c 1c 1c 1c 09 13 13 12     ....nnn.........
     2e7:	12 13 13 00 13 13 13 13 13 1c 00 09 13 13 13 13     ................
     2f7:	1c 01 00 37 13 13 13 1c 13 00 2e 2e 1b 1b 1c 1c     ...7............
     307:	00 1c 77 2e 1b 1b 25 00 13 7f 25 1c 1c 1c 01 0a     ..w...%...%.....
     317:	37 24 1c 1c 1c 13 0a 2e 25 25 09 00 13 2e 24 25     7$......%%....$%
     327:	25 25 25 25 2e 25 25 25 25 25 25 25 25 25 2d 2e     %%%%.%%%%%%%%%-.
     337:	25 1b 1c 1c 2e 2e 25 1c 13 25 1b 13 25 1c 1c 1c     %.....%..%..%...
     347:	1c 01 09 52 1c 1c 13 00 01 1c 5b 5c 0a 00 01 65     ...R......[\...e
     357:	77 5c 1b 00 01 6e 7f 6e 52 1b 00 00 6d 1c 52 49     w\...n.nR...m.RI
     367:	00 00 00 00 1c 13 53 00 00 00 00 00 1c 52 4a 00     ......S......RJ.
     377:	00 00 00 00 5b 5b 00 00 00 00 00 00 5c 00 00 00     ....[[......\...
	...
     3a3:	13 5b 7f 77 6e 6e 6e 6e 13 65 77 76 6e 6e 6e 6e     .[.wnnnn.ewvnnnn
     3b3:	1b 65 77 76 76 76 6e 77 1b 5b bf 76 b6 76 76 76     .ewvvvnw.[.v.vvv
     3c3:	09 13 6d bf b7 b6 b7 65 00 1b 12 5c 76 bf 76 6d     ..m....e...\v.vm
     3d3:	00 00 12 1b 12 5b 5b 5c 00 00 00 00 09 0a 12 13     .....[[\........
     3e3:	6e 77 24 1c 1c 1c 1c 1c 77 25 1c 1c 1c 1c 24 25     nw$.....w%....$%
     3f3:	6e 1c 1c 1c 24 25 25 1b 1c 1c 24 25 25 13 00 00     n...$%%...$%%...
     403:	64 6d 6d 1b 00 09 6e bf 6d 5b 09 12 6e bf 6d 5b     dmm...n.m[..n.m[
     413:	5b 12 5b 64 5b 12 13 12 13 1b 12 12 09 01 00 00     [.[d[...........
     423:	1c 24 2e 1c 09 00 09 6e 25 24 01 00 09 76 7f 7f     .$.....n%$...v..
     433:	00 00 12 77 7f 7f 64 12 64 bf bf 77 5b 12 1b 09     ...w..d.d..w[...
     443:	bf 6d 5b 12 1b 09 00 00 12 13 1b 09 00 00 00 00     .m[.............
     453:	09 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     463:	7f 7f 53 13 13 00 00 00 64 12 1b 01 00 00 00 00     ..S.....d.......
     473:	1b 12 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     4ab:	26 00 00 00 26 00 26 26 2f 00 00 00 2f 00 00 00     &...&.&&/.../...
     4bb:	37 00 00 00 37 00 00 00 ff 00 00 00 ff 00 00 00     7...7...........
     4cb:	bf 00 00 00 bf 00 00 bf 37 00 00 37 00 00 37 00     ........7..7..7.
     4db:	00 26 26 00 00 00 26 26 00 00 00 00 00 00 00 00     .&&...&&........
     4eb:	26 26 26 00 26 26 26 26 00 00 2f 00 2f 00 00 00     &&&.&&&&.././...
     4fb:	00 37 00 00 37 00 00 00 ff 00 00 00 ff ff ff ff     .7..7...........
     50b:	00 00 00 00 bf 00 00 00 00 00 00 00 37 00 00 00     ............7...
     51b:	26 26 26 00 26 26 26 26 00 00 00 00 00 00 00 00     &&&.&&&&........
     52b:	26 00 26 26 26 26 00 00 00 00 2f 00 00 00 2f 00     &.&&&&..../.../.
     53b:	00 00 37 00 00 00 37 00 00 00 ff ff ff ff 00 00     ..7...7.........
     54b:	00 00 bf 00 00 00 bf 00 00 00 37 00 00 00 37 00     ..........7...7.
     55b:	26 00 26 26 26 26 00 00 00 00 00 00 00 00 00 00     &.&&&&..........
     56b:	00 00 26 26 26 00 26 00 00 2f 00 00 2f 00 2f 00     ..&&&.&../.././.
     57b:	37 00 00 00 37 00 00 37 ff 00 00 00 ff 00 00 00     7...7..7........
     58b:	bf 00 00 00 bf 00 00 bf 37 00 00 37 00 00 37 00     ........7..7..7.
     59b:	26 26 26 00 00 00 26 00 00 00 00 00 00 00 00 00     &&&...&.........
     5ab:	00 00 26 00 00 00 00 00 00 00 2f 00 00 00 00 00     ..&......./.....
     5bb:	00 37 00 00 00 00 00 00 ff 00 00 00 00 00 00 00     .7..............
     5cb:	00 bf 00 00 00 00 00 00 00 00 37 00 00 00 00 00     ..........7.....
     5db:	00 00 26 00 00 00 00 00 00 00 00 00 00 00 00 00     ..&.............
	...
     5ff:	00 00 00 e4 00 00 00 00 09 9b ed f6 00 00 00 9b     ................
     60f:	a4 ad bf bf 00 52 9b a4 76 7f 7f b7 5b 9b 6d 77     .....R..v...[.mw
     61f:	7f 76 6e b7 00 00 00 00 00 00 00 00 00 00 00 00     .vn.............
     62f:	5b b6 f6 f6 00 5b f6 ff ff ff ff bf f6 ff ff ff     [....[..........
     63f:	ff bf bf ae ff bf ff ff ff b7 ad 65 bf bf ff ff     ...........e....
     64f:	b7 b6 ad 65 b7 bf ff ff bf b7 ae 6e b7 bf ff ff     ...e.......n....
     65f:	bf b7 b7 65 00 00 00 00 00 00 00 00 f6 f6 ed ed     ...e............
     66f:	ad a4 a4 9b b6 6d 6d 5c 52 6e 65 64 65 65 65 52     .....mm\RnedeeeR
     67f:	65 76 6d 25 5c 5c 52 53 6e 24 65 6e 65 52 52 6e     evm%\\RSn$eneRRn
     68f:	25 25 24 25 5b 52 77 2d 25 25 25 24 52 6e 6e 2d     %%$%[Rw-%%%$Rnn-
     69f:	25 25 25 25 00 00 00 00 00 00 00 00 9b 49 00 00     %%%%.........I..
     6af:	00 00 00 00 a4 9b 92 00 00 00 00 00 25 64 93 49     ............%d.I
     6bf:	00 00 00 00 65 2e 9b 52 00 00 00 00 6d 25 65 52     ....e..R....m%eR
     6cf:	00 00 00 00 6d 2d 65 52 00 00 00 00 6e 2e 64 52     ....m-eR....n.dR
	...
     6e7:	00 00 49 5b 00 00 00 00 00 4a 5b 65 00 00 00 00     ..I[.....J[e....
     6f7:	5b 9b 6d 2d 00 00 00 5b 5b 2d 2e 25 00 00 52 5b     [.m-...[[-.%..R[
     707:	2e 2e 1c 09 00 01 5b 2d 1c 01 09 1c 00 5c 5b 01     ......[-.....\[.
     717:	4a 65 77 7f 4a 5b 1c 6e 7f 77 77 76 9b 77 77 6d     Jew.J[.n.wwv.wwm
     727:	65 6e 6e a4 77 6e 65 65 65 5b a4 b7 25 25 5c 52     enn.wneee[..%%\R
     737:	52 6d bf bf 13 09 49 64 7f bf bf bf 09 5c 7f 7f     Rm....Id.....\..
     747:	bf bf b7 bf 7f 7f 77 7f 7f b7 bf bf 77 77 7f 7f     ......w.....ww..
     757:	6e b7 bf bf 77 7f 7f 6e 77 bf bf bf b6 ff ff ff     n...w..nw.......
     767:	bf bf b7 5b bf ff ff ff bf bf a4 64 bf ff ff ff     ...[.......d....
     777:	bf ad a4 7f bf ff ff ff bf a4 bf 7f ff ff ff bf     ................
     787:	ad bf bf bf ff ff ff b6 bf bf bf 77 ff ff f7 bf     ...........w....
     797:	bf bf 77 77 ff ff ff bf bf bf 64 52 6d 7f 6e 2e     ..ww......dRm.n.
     7a7:	2d 2d 25 6e 7f 76 6e 6e 6e 2e 25 65 77 77 77 76     --%n.vnnn.%ewwwv
     7b7:	2e 1c 25 24 7f 77 6e 25 1c 25 1c 1b 77 65 25 25     ..%$.wn%.%..we%%
     7c7:	1c 09 0a 5b 6e 6e 1c 09 49 25 64 64 5b 49 4a 6e     ...[nn..I%dd[IJn
     7d7:	7f 64 5c 00 53 77 bf 77 5b 5c 00 00 6e 25 5b 4a     .d\.Sw.w[\..n%[J
     7e7:	00 00 00 00 1c 1b 5b 00 00 00 00 00 24 5b 53 00     ......[.....$[S.
     7f7:	00 00 00 00 5b 5c 00 00 00 00 00 00 64 00 00 00     ....[\......d...
	...
     823:	5b 5c 7f bf 77 76 77 77 5c 6d 7f b7 77 77 77 77     [\..wvww\m..wwww
     833:	5c 6d 7f bf 77 77 77 bf 5c 64 bf bf bf bf bf 7f     \m..www.\d......
     843:	0a 5c 6e bf bf bf bf 76 00 65 64 6d bf bf bf bf     .\n....v.edm....
     853:	00 00 5b 6d 64 6d ad b6 00 00 00 00 12 5b 64 6d     ..[mdm.......[dm
     863:	77 7f 6e 6e 77 bf bf bf 7f 76 6d 76 77 bf bf bf     w.nnw....vmvw...
     873:	77 6d 6e 76 7f bf bf bf 6d 6e 76 7f bf b7 ad f6     wmnv....mnv.....
     883:	76 bf bf 76 a4 ad ff ff bf b6 64 ad ff ff ff ff     v..v......d.....
     893:	b6 ad bf ff ff ff ff f6 ad b6 ad 64 5b 52 00 00     ...........d[R..
     8a3:	ff ff bf bf ad 5b 64 bf ff ff b6 ad ad bf ff bf     .....[d.........
     8b3:	ff f6 ff ff ff ff bf 64 ff ff ff ff bf b6 76 5b     .......d......v[
     8c3:	ff ff ff bf bf 5b 00 00 ff ff ff 5c 00 00 00 00     .....[.....\....
     8d3:	a4 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     8e3:	bf bf 64 5c 5c 00 00 00 6e 5c 65 49 00 00 00 00     ..d\\...n\eI....
     8f3:	6d 5b 00 00 00 00 00 00 00 00 00 00 00 00 00 00     m[..............
	...

00000923 <logoInitPatches>:
     923:	00 00 00 2c 09 00 00 00 00                          ...,.....

0000092c <initPatch>:
     92c:	00 02 08 00 08 55 04 08 5a 00 00 f8 00 09 90 00     .....U..Z.......
     93c:	0a 1e 32 05 00 00 ff                                ..2....

00000943 <strTwist>:
     943:	49 52 49 53 20 57 41 53 20 41 20 46 4f 4f 4c 00     IRIS WAS A FOOL.
     953:	00 41 4e 44 20 53 4f 20 41 52 45 20 59 4f 55 00     .AND SO ARE YOU.
     963:	57 49 54 48 20 54 48 45 20 45 4d 45 52 41 4c 44     WITH THE EMERALD
     973:	53 20 52 45 54 55 52 4e 45 44 00 54 48 45 52 45     S RETURNED.THERE
     983:	20 49 53 20 4e 4f 20 53 54 4f 50 50 49 4e 47 20      IS NO STOPPING 
     993:	4f 55 52 00 44 4f 4d 49 4e 49 4f 4e 20 4f 56 45     OUR.DOMINION OVE
     9a3:	52 20 54 48 45 20 47 41 4c 41 58 59 00 00 4e 4f     R THE GALAXY..NO
     9b3:	57 20 59 4f 55 20 57 49 4c 4c 20 44 49 45 00 23     W YOU WILL DIE.#
	...

000009c4 <strReveal4>:
     9c4:	59 4f 55 20 44 4f 4e 54 20 4b 4e 4f 57 00 57 48     YOU DONT KNOW.WH
     9d4:	41 54 20 59 4f 55 20 41 52 45 20 44 4f 49 4e 47     AT YOU ARE DOING
     9e4:	00 23 00                                            .#.

000009e7 <strReveal3>:
     9e7:	59 4f 55 20 41 52 45 20 4d 41 4b 49 4e 47 20 41     YOU ARE MAKING A
     9f7:	20 4d 49 53 54 41 4b 45 00 23 00                     MISTAKE.#.

00000a02 <strReveal2>:
     a02:	59 4f 55 20 43 41 4e 54 20 48 41 56 45 20 54 48     YOU CANT HAVE TH
     a12:	45 4d 20 41 4c 4c 00 23 00                          EM ALL.#.

00000a1b <strReveal1>:
     a1b:	59 4f 55 20 41 52 45 20 50 45 52 53 49 53 54 45     YOU ARE PERSISTE
     a2b:	4e 54 00 23 00                                      NT.#.

00000a30 <strReveal0>:
     a30:	49 20 4b 4e 45 57 20 54 48 45 59 20 57 4f 55 4c     I KNEW THEY WOUL
     a40:	44 20 53 45 4e 44 20 59 4f 55 00 23 00              D SEND YOU.#.

00000a4d <strIntro>:
     a4d:	49 52 49 53 20 48 41 53 20 42 45 54 52 41 59 45     IRIS HAS BETRAYE
     a5d:	44 20 55 53 00 00 48 45 20 48 41 53 20 53 54 4f     D US..HE HAS STO
     a6d:	4c 45 4e 20 54 48 45 20 35 20 45 4d 45 52 41 4c     LEN THE 5 EMERAL
     a7d:	44 53 00 4f 46 20 50 4f 57 45 52 20 41 4e 44 20     DS.OF POWER AND 
     a8d:	57 49 4c 4c 20 53 55 52 45 4c 59 00 42 52 49 4e     WILL SURELY.BRIN
     a9d:	47 20 52 55 49 4e 20 54 4f 20 55 53 20 41 4c 4c     G RUIN TO US ALL
     aad:	00 00 44 45 53 54 52 4f 59 20 48 49 4d 20 41 4e     ..DESTROY HIM AN
     abd:	44 20 52 45 54 55 52 4e 20 54 48 45 00 45 4d 45     D RETURN THE.EME
     acd:	52 41 4c 44 53 20 54 4f 20 42 52 49 4e 47 20 50     RALDS TO BRING P
     add:	45 41 43 45 20 54 4f 00 54 48 45 20 47 41 4c 41     EACE TO.THE GALA
     aed:	58 59 00 23 00                                      XY.#.

00000af2 <default_scores>:
     af2:	55 5a 45 00 00 4c 4a 42 00 00 41 41 41 00 00 42     UZE..LJB..AAA..B
     b02:	42 42 00 00 43 43 43 00 00 44 44 44 00 00           BB..CCC..DDD..

00000b10 <strTally>:
     b10:	54 41 4c 4c 59 00                                   TALLY.

00000b16 <strGameOver>:
     b16:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

00000b20 <strLevelBonus>:
     b20:	42 4f 4e 55 53 00                                   BONUS.

00000b26 <strLevelClear>:
     b26:	4c 45 56 45 4c 20 43 4c 45 41 52 00                 LEVEL CLEAR.

00000b32 <strPaused>:
     b32:	50 41 55 53 45 00                                   PAUSE.

00000b38 <strExitGame>:
     b38:	58 20 45 58 49 54 20 47 41 4d 45 00                 X EXIT GAME.

00000b44 <strMainMenu>:
     b44:	58 20 4d 41 49 4e 20 4d 45 4e 55 00                 X MAIN MENU.

00000b50 <strTime>:
     b50:	54 49 4d 45 20 00                                   TIME .

00000b56 <strLives>:
     b56:	4c 49 56 45 53 20 00                                LIVES .

00000b5d <strShield>:
     b5d:	53 48 49 45 4c 44 20 00                             SHIELD .

00000b65 <strScore>:
     b65:	53 43 4f 52 45 20 00                                SCORE .

00000b6c <strSelectHandle>:
	...

00000b6d <strHighScores>:
     b6d:	48 49 47 48 20 53 43 4f 52 45 53 00                 HIGH SCORES.

00000b79 <str1Player>:
     b79:	53 54 41 52 54 00                                   START.

00000b7f <strMusic>:
     b7f:	4d 55 53 49 43 20 42 59 20 54 41 4e 4e 45 52 20     MUSIC BY TANNER 
     b8f:	48 45 4c 4c 41 4e 44 00                             HELLAND.

00000b97 <strCopyright>:
     b97:	32 30 31 36 20 4c 41 57 52 45 4e 43 45 20 42 52     2016 LAWRENCE BR
     ba7:	4f 4f 4b 53 00                                      OOKS.

00000bac <spacesong>:
     bac:	00 c0 00 00 c1 01 00 b0 07 7f 00 07 7f 00 90 43     ...............C
     bbc:	64 00 46 64 00 4b 64 00 4f 64 00 b1 07 74 00 91     d.Fd.Kd.Od...t..
     bcc:	33 64 00 ff 06 01 53 1d 91 33 64 0a 33 64 14 90     3d....S..3d.3d..
     bdc:	4b 64 00 46 64 00 43 64 00 91 33 64 27 33 64 14     Kd.Fd.Cd..3d'3d.
     bec:	90 46 64 00 43 64 00 4b 64 00 4f 64 00 91 33 64     .Fd.Cd.Kd.Od..3d
     bfc:	14 33 64 0a 90 41 64 00 4d 64 0a 41 64 00 46 64     .3d..Ad.Md.Ad.Fd
     c0c:	00 4a 64 00 4d 64 00 91 2e 64 1e 2e 64 09 2e 64     .Jd.Md...d..d..d
     c1c:	14 90 41 64 00 46 64 00 4a 64 00 91 2e 64 28 2e     ..Ad.Fd.Jd...d(.
     c2c:	64 14 90 41 64 00 46 64 00 4a 64 00 4d 64 00 91     d..Ad.Fd.Jd.Md..
     c3c:	2e 64 13 2e 64 0a 90 3f 64 00 4b 64 0a 3f 64 00     .d..d..?d.Kd.?d.
     c4c:	44 64 00 48 64 00 4b 64 00 91 2c 64 1e 2c 64 0a     Dd.Hd.Kd..,d.,d.
     c5c:	2c 64 14 90 41 64 00 46 64 00 4a 64 00 91 2c 64     ,d..Ad.Fd.Jd..,d
     c6c:	13 2e 64 14 90 46 64 00 91 2c 64 14 90 3f 64 00     ..d..Fd..,d..?d.
     c7c:	43 64 00 48 64 00 91 2e 64 14 30 64 14 90 43 64     Cd.Hd...d.0d..Cd
     c8c:	00 48 64 00 4b 64 00 4f 64 00 91 30 64 1d 30 64     .Hd.Kd.Od..0d.0d
     c9c:	0a 30 64 14 90 4b 64 00 48 64 00 43 64 00 91 30     .0d..Kd.Hd.Cd..0
     cac:	64 28 30 64 13 90 43 64 00 48 64 00 4b 64 00 4f     d(0d..Cd.Hd.Kd.O
     cbc:	64 00 91 30 64 14 30 64 0a 90 41 64 00 4d 64 0a     d..0d.0d..Ad.Md.
     ccc:	43 64 00 46 64 00 4b 64 00 4f 64 00 91 33 64 1e     Cd.Fd.Kd.Od..3d.
     cdc:	33 64 09 33 64 14 90 4b 64 00 46 64 00 43 64 00     3d.3d..Kd.Fd.Cd.
     cec:	91 33 64 28 33 64 14 90 46 64 00 43 64 00 4b 64     .3d(3d..Fd.Cd.Kd
     cfc:	00 4f 64 00 91 33 64 13 33 64 0a 90 41 64 00 4d     .Od..3d.3d..Ad.M
     d0c:	64 0a 41 64 00 46 64 00 4a 64 00 4d 64 00 91 2e     d.Ad.Fd.Jd.Md...
     d1c:	64 1e 2e 64 0a 2e 64 14 90 41 64 00 46 64 00 4a     d..d..d..Ad.Fd.J
     d2c:	64 00 91 2e 64 27 2e 64 14 90 41 64 00 46 64 00     d...d'.d..Ad.Fd.
     d3c:	4a 64 00 4d 64 00 91 2e 64 14 2e 64 0a 90 3f 64     Jd.Md...d..d..?d
     d4c:	00 4b 64 0a 3f 64 00 44 64 00 48 64 00 4b 64 00     .Kd.?d.Dd.Hd.Kd.
     d5c:	91 2c 64 1d 2c 64 0a 2c 64 14 90 41 64 00 46 64     .,d.,d.,d..Ad.Fd
     d6c:	00 4a 64 00 91 2c 64 14 2e 64 14 90 46 64 00 91     .Jd..,d..d..Fd..
     d7c:	2c 64 13 90 3f 64 00 43 64 00 48 64 00 91 30 64     ,d..?d.Cd.Hd..0d
     d8c:	14 30 64 14 90 48 64 00 91 2c 6e 14 2c 4b 06 90     .0d..Hd..,n.,K..
     d9c:	4a 64 0e 91 2c 4b 0d 90 4b 64 06 91 2c 6e 14 90     Jd..,K..Kd..,n..
     dac:	4d 64 00 91 2c 4b 14 2c 4b 07 90 4b 64 0d 91 2c     Md..,K.,K..Kd..,
     dbc:	6e 0d 90 4a 64 07 91 2c 4b 13 90 48 64 00 91 30     n..Jd..,K..Hd..0
     dcc:	6e 14 30 4b 07 90 4a 64 0d 91 30 4b 0d 90 46 64     n.0K..Jd..0K..Fd
     ddc:	07 91 30 6e 13 90 43 64 00 91 30 4b 14 30 4b 07     ..0n..Cd..0K.0K.
     dec:	90 46 64 0d 91 30 6e 0d 90 48 64 07 91 30 4b 14     .Fd..0n..Hd..0K.
     dfc:	90 48 64 00 91 2c 6e 13 2c 4b 07 90 4a 64 0d 91     .Hd..,n.,K..Jd..
     e0c:	2c 4b 0d 90 4b 64 07 91 2c 6e 14 90 4d 64 00 91     ,K..Kd..,n..Md..
     e1c:	2c 4b 14 2c 4b 06 90 4b 64 0d 91 2c 6e 0e 90 4d     ,K.,K..Kd..,n..M
     e2c:	64 06 91 2c 4b 14 90 4f 64 00 91 30 6e 14 30 4b     d..,K..Od..0n.0K
     e3c:	07 90 50 64 0d 91 30 4b 0e 90 4d 64 05 91 30 6e     ..Pd..0K..Md..0n
     e4c:	14 90 4f 64 00 91 30 4b 14 30 4b 07 90 4d 64 0d     ..Od..0K.0K..Md.
     e5c:	91 30 6e 0d 90 4b 64 07 91 30 4b 13 90 4d 64 00     .0n..Kd..0K..Md.
     e6c:	91 2b 6e 14 2b 4b 07 90 4f 64 0d 91 2b 4b 0d 90     .+n.+K..Od..+K..
     e7c:	4d 64 07 91 2b 6e 14 90 4b 64 00 91 2b 4b 13 2b     Md..+n..Kd..+K.+
     e8c:	4b 07 90 46 64 0d 91 2b 6e 0d 90 4b 64 07 91 2b     K..Fd..+n..Kd..+
     e9c:	4b 14 90 4d 64 00 91 2c 6e 13 2c 4b 07 90 50 64     K..Md..,n.,K..Pd
     eac:	0d 91 2c 4b 0d 90 4f 64 07 91 2c 6e 14 90 4d 64     ..,K..Od..,n..Md
     ebc:	00 91 2c 4b 14 2c 4b 06 90 48 64 0d 91 2c 6e 0e     ..,K.,K..Hd..,n.
     ecc:	90 4d 64 06 91 2c 4b 14 90 52 64 00 91 27 6e 0d     .Md..,K..Rd..'n.
     edc:	90 50 64 07 91 27 4b 06 90 4f 64 0e 50 64 00 91     .Pd..'K..Od.Pd..
     eec:	27 4b 0d 90 4f 64 06 91 27 6e 07 90 4d 64 0d 4b     'K..Od..'n..Md.K
     efc:	64 00 91 27 4b 14 27 4b 07 90 46 64 0d 91 27 6e     d..'K.'K..Fd..'n
     f0c:	0d 90 4b 64 07 91 27 4b 13 90 47 64 00 91 26 6e     ..Kd..'K..Gd..&n
     f1c:	14 26 4b 07 90 4a 64 0d 91 26 4b 0d 90 4f 64 07     .&K..Jd..&K..Od.
     f2c:	91 26 6e 14 90 53 64 00 91 26 4b 13 26 4b 07 90     .&n..Sd..&K.&K..
     f3c:	56 64 0d 91 26 6e 0d 90 5b 64 07 91 26 4b 14 90     Vd..&n..[d..&K..
     f4c:	3d 64 00 91 31 64 06 90 41 64 07 44 64 07 49 64     =d..1d..Ad.Dd.Id
     f5c:	06 4d 64 07 50 64 06 55 64 07 59 64 07 5c 64 06     .Md.Pd.Ud.Yd.\d.
     f6c:	59 64 07 55 64 06 50 64 07 4d 64 07 49 64 06 44     Yd.Ud.Pd.Md.Id.D
     f7c:	64 07 41 64 06 3d 64 07 38 64 07 3d 64 06 41 64     d.Ad.=d.8d.=d.Ad
     f8c:	07 44 64 06 49 64 07 44 64 07 41 64 06 43 64 00     .Dd.Id.Dd.Ad.Cd.
     f9c:	91 37 64 07 90 47 64 06 4a 64 07 4f 64 06 53 64     .7d..Gd.Jd.Od.Sd
     fac:	07 56 64 07 5b 64 06 5f 64 07 62 64 06 5f 64 07     .Vd.[d._d.bd._d.
     fbc:	5b 64 07 56 64 06 53 64 07 4f 64 06 4a 64 07 47     [d.Vd.Sd.Od.Jd.G
     fcc:	64 07 43 64 06 3e 64 07 43 64 06 47 64 07 4a 64     d.Cd.>d.Cd.Gd.Jd
     fdc:	07 4f 64 06 4a 64 07 47 64 06 46 64 00 91 3a 64     .Od.Jd.Gd.Fd..:d
     fec:	07 90 4a 64 07 4d 64 06 52 64 07 56 64 06 59 64     ..Jd.Md.Rd.Vd.Yd
     ffc:	07 5e 64 07 62 64 06 65 64 07 62 64 06 5e 64 07     .^d.bd.ed.bd.^d.
    100c:	59 64 07 56 64 06 52 64 07 4d 64 06 4a 64 07 46     Yd.Vd.Rd.Md.Jd.F
    101c:	64 07 41 64 06 46 64 07 4a 64 06 4d 64 07 52 64     d.Ad.Fd.Jd.Md.Rd
    102c:	07 4d 64 06 4a 64 07 54 7f 00 43 64 00 48 64 00     .Md.Jd.T..Cd.Hd.
    103c:	4b 64 00 4f 64 00 91 30 64 1d 30 64 0a 30 64 14     Kd.Od..0d.0d.0d.
    104c:	90 4b 64 00 48 64 00 43 64 00 91 30 64 28 30 64     .Kd.Hd.Cd..0d(0d
    105c:	14 90 43 64 00 48 64 00 4b 64 00 4f 64 00 91 30     ..Cd.Hd.Kd.Od..0
    106c:	64 13 30 64 0a 90 41 64 00 4d 64 0a 43 64 00 46     d.0d..Ad.Md.Cd.F
    107c:	64 00 4b 64 00 4f 64 00 91 33 64 1e 33 64 0a 33     d.Kd.Od..3d.3d.3
    108c:	64 14 90 4b 64 00 46 64 00 43 64 00 91 33 64 27     d..Kd.Fd.Cd..3d'
    109c:	33 64 14 90 46 64 00 43 64 00 4b 64 00 4f 64 00     3d..Fd.Cd.Kd.Od.
    10ac:	91 33 64 14 33 64 0a 90 41 64 00 4d 64 0a 41 64     .3d.3d..Ad.Md.Ad
    10bc:	00 46 64 00 4a 64 00 4d 64 00 91 2e 64 1d 2e 64     .Fd.Jd.Md...d..d
    10cc:	0a 2e 64 14 90 41 64 00 46 64 00 4a 64 00 91 2e     ..d..Ad.Fd.Jd...
    10dc:	64 27 2e 64 14 90 41 64 00 46 64 00 4a 64 00 4d     d'.d..Ad.Fd.Jd.M
    10ec:	64 00 91 2e 64 14 2e 64 0a 90 3f 64 00 4b 64 0a     d...d..d..?d.Kd.
    10fc:	3f 64 00 44 64 00 48 64 00 4b 64 00 91 2c 64 1e     ?d.Dd.Hd.Kd..,d.
    110c:	2c 64 09 2c 64 14 90 41 64 00 46 64 00 4a 64 00     ,d.,d..Ad.Fd.Jd.
    111c:	91 2c 64 14 2e 64 14 90 46 64 00 91 2c 64 14 90     .,d..d..Fd..,d..
    112c:	3f 64 00 43 64 00 48 64 00 91 2e 64 13 30 64 14     ?d.Cd.Hd...d.0d.
    113c:	90 43 64 00 48 64 00 4b 64 00 4f 64 00 91 30 64     .Cd.Hd.Kd.Od..0d
    114c:	1e 30 64 0a 30 64 14 90 4b 64 00 48 64 00 43 64     .0d.0d..Kd.Hd.Cd
    115c:	00 91 30 64 27 30 64 14 90 43 64 00 48 64 00 4b     ..0d'0d..Cd.Hd.K
    116c:	64 00 4f 64 00 91 30 64 14 30 64 0a 90 41 64 00     d.Od..0d.0d..Ad.
    117c:	4d 64 0a 43 64 00 46 64 00 4b 64 00 4f 64 00 91     Md.Cd.Fd.Kd.Od..
    118c:	33 64 1d 33 64 0a 33 64 14 90 4b 64 00 46 64 00     3d.3d.3d..Kd.Fd.
    119c:	43 64 00 91 33 64 28 33 64 13 90 46 64 00 43 64     Cd..3d(3d..Fd.Cd
    11ac:	00 4b 64 00 4f 64 00 91 33 64 14 33 64 0a 90 41     .Kd.Od..3d.3d..A
    11bc:	64 00 4d 64 0a 41 64 00 46 64 00 4a 64 00 4d 64     d.Md.Ad.Fd.Jd.Md
    11cc:	00 91 2e 64 1e 2e 64 09 2e 64 14 90 41 64 00 46     ...d..d..d..Ad.F
    11dc:	64 00 4a 64 00 91 2e 64 28 2e 64 14 90 41 64 00     d.Jd...d(.d..Ad.
    11ec:	46 64 00 4a 64 00 4d 64 00 91 2e 64 13 2e 64 0a     Fd.Jd.Md...d..d.
    11fc:	90 3f 64 00 4b 64 0a 3f 64 00 44 64 00 48 64 00     .?d.Kd.?d.Dd.Hd.
    120c:	4b 64 00 91 2c 64 1e 2c 64 0a 2c 64 14 90 41 64     Kd..,d.,d.,d..Ad
    121c:	00 46 64 00 4a 64 00 91 2c 64 13 2e 64 14 90 46     .Fd.Jd..,d..d..F
    122c:	64 00 91 2c 64 0f ff 06 01 45 05 90 3f 64 00 43     d..,d....E..?d.C
    123c:	64 00 48 64 00 91 30 64 14 30 64 81 0a ff 2f 00     d.Hd..0d.0d.../.

0000124c <planetsong>:
    124c:	00 c0 00 00 c1 01 00 b0 07 7f 00 b1 07 74 00 ff     .............t..
    125c:	06 01 53 1b 90 48 78 00 91 30 6e 07 90 43 55 00     ..S..Hx..0n..CU.
    126c:	91 30 50 07 90 48 55 00 91 30 50 07 90 4a 78 00     .0P..HU..0P..Jx.
    127c:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 48 55 00     .0n..KU..0P..HU.
    128c:	91 30 50 07 90 4a 78 00 91 30 6e 07 90 4b 55 00     .0P..Jx..0n..KU.
    129c:	91 30 50 07 90 4d 55 00 91 30 50 07 90 4a 78 00     .0P..MU..0P..Jx.
    12ac:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 4d 55 00     .0n..KU..0P..MU.
    12bc:	91 30 50 07 90 4f 78 00 91 30 6e 07 90 4b 55 00     .0P..Ox..0n..KU.
    12cc:	91 30 50 07 90 4d 78 00 91 2e 6e 07 90 4f 55 07     .0P..Mx...n..OU.
    12dc:	50 78 00 91 30 6e 06 90 4d 55 00 91 30 50 07 90     Px..0n..MU..0P..
    12ec:	4f 55 00 91 30 50 07 90 4b 78 00 91 30 6e 07 90     OU..0P..Kx..0n..
    12fc:	4d 55 00 91 30 50 07 90 4a 55 00 91 30 50 07 30     MU..0P..JU..0P.0
    130c:	6e 03 90 4b 78 04 48 55 00 91 30 50 07 90 4a 55     n..Kx.HU..0P..JU
    131c:	00 91 30 50 07 90 46 78 00 91 30 6e 07 90 4d 55     ..0P..Fx..0n..MU
    132c:	00 91 30 50 07 90 46 78 00 91 30 50 07 90 4f 55     ..0P..Fx..0P..OU
    133c:	00 91 30 6e 07 90 46 78 00 91 30 50 07 90 4d 55     ..0n..Fx..0P..MU
    134c:	00 91 2e 6e 07 90 46 78 07 48 55 00 91 30 6e 07     ...n..Fx.HU..0n.
    135c:	90 43 55 00 91 30 50 07 90 48 55 00 91 30 50 07     .CU..0P..HU..0P.
    136c:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    137c:	90 48 55 00 91 30 50 06 90 4a 55 00 91 30 6e 07     .HU..0P..JU..0n.
    138c:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 30 50 07     .KU..0P..MU..0P.
    139c:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    13ac:	90 4d 55 00 91 30 50 07 90 4f 55 00 91 30 6e 07     .MU..0P..OU..0n.
    13bc:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 2e 6e 07     .KU..0P..MU...n.
    13cc:	90 4f 55 07 50 55 00 91 30 6e 07 90 4d 55 00 91     .OU.PU..0n..MU..
    13dc:	30 50 07 90 4f 55 00 91 30 50 07 90 4b 55 00 91     0P..OU..0P..KU..
    13ec:	30 6e 07 90 4d 55 00 91 30 50 07 90 4a 55 00 91     0n..MU..0P..JU..
    13fc:	30 50 07 30 6e 02 90 4b 55 05 48 55 00 91 30 50     0P.0n..KU.HU..0P
    140c:	07 90 4a 55 00 91 30 50 07 90 46 55 00 91 30 6e     ..JU..0P..FU..0n
    141c:	06 90 4d 55 00 91 30 50 07 90 46 55 00 91 30 50     ..MU..0P..FU..0P
    142c:	07 90 4f 55 00 91 30 6e 07 90 46 55 00 91 30 50     ..OU..0n..FU..0P
    143c:	07 90 4d 55 00 91 2e 6e 07 90 46 55 07 48 78 00     ..MU...n..FU.Hx.
    144c:	91 2c 6e 07 90 43 55 00 91 2c 50 07 90 48 55 00     .,n..CU..,P..HU.
    145c:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
    146c:	91 2c 50 07 90 48 55 00 91 2c 50 07 90 4a 78 00     .,P..HU..,P..Jx.
    147c:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 55 00     .,n..KU..,P..MU.
    148c:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
    149c:	91 2c 50 07 90 4d 55 00 91 2c 50 07 90 4f 78 00     .,P..MU..,P..Ox.
    14ac:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 78 00     .,n..KU..,P..Mx.
    14bc:	91 2b 6e 06 90 4f 55 07 50 78 00 91 2c 6e 07 90     .+n..OU.Px..,n..
    14cc:	4d 55 00 91 2c 50 07 90 4f 55 00 91 2c 50 07 90     MU..,P..OU..,P..
    14dc:	4b 78 00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90     Kx..,n..MU..,P..
    14ec:	4a 55 00 91 2c 50 07 2c 6e 02 90 4b 78 05 48 55     JU..,P.,n..Kx.HU
    14fc:	00 91 2c 50 07 90 4a 55 00 91 2c 50 07 90 46 78     ..,P..JU..,P..Fx
    150c:	00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90 46 78     ..,n..MU..,P..Fx
    151c:	00 91 2c 50 07 90 4f 55 00 91 2c 6e 07 90 46 78     ..,P..OU..,n..Fx
    152c:	00 91 2c 50 07 90 4d 55 00 91 2b 6e 07 90 46 78     ..,P..MU..+n..Fx
    153c:	07 48 55 00 91 29 6e 07 90 43 55 00 91 29 50 07     .HU..)n..CU..)P.
    154c:	90 48 55 00 91 29 50 06 90 4a 55 00 91 29 6e 07     .HU..)P..JU..)n.
    155c:	90 4b 55 00 91 29 50 07 90 48 55 00 91 29 50 07     .KU..)P..HU..)P.
    156c:	90 4a 55 00 91 2b 6e 07 90 4b 55 00 91 2b 50 07     .JU..+n..KU..+P.
    157c:	90 4d 55 00 91 2b 50 07 90 4a 55 00 91 2b 6e 07     .MU..+P..JU..+n.
    158c:	90 4b 55 00 91 2b 50 07 90 4d 55 00 91 2b 50 07     .KU..+P..MU..+P.
    159c:	90 4f 55 00 91 2c 6e 07 90 4b 55 00 91 2c 50 07     .OU..,n..KU..,P.
    15ac:	90 4d 55 00 91 2c 6e 07 90 4f 55 07 50 55 00 91     .MU..,n..OU.PU..
    15bc:	2e 6e 07 90 4d 55 00 91 2e 50 07 90 4f 55 00 91     .n..MU...P..OU..
    15cc:	2e 50 07 90 4b 55 00 91 2e 6e 07 90 4d 55 00 91     .P..KU...n..MU..
    15dc:	2e 50 07 90 4a 55 00 91 2e 50 07 2e 6e 02 90 4b     .P..JU...P..n..K
    15ec:	55 05 48 55 00 91 2e 50 06 90 4a 55 00 91 2e 50     U.HU...P..JU...P
    15fc:	07 90 46 55 00 91 2e 6e 07 90 4d 55 00 91 2e 50     ..FU...n..MU...P
    160c:	07 90 46 55 00 91 2e 50 07 90 4f 55 00 91 2e 6e     ..FU...P..OU...n
    161c:	07 90 46 55 00 91 2e 50 07 90 4d 55 00 91 2e 6e     ..FU...P..MU...n
    162c:	07 90 46 55 07 48 55 00 91 30 6e 07 90 43 55 00     ..FU.HU..0n..CU.
    163c:	91 30 50 07 90 48 55 00 91 30 50 07 90 4a 55 00     .0P..HU..0P..JU.
    164c:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 48 55 00     .0n..KU..0P..HU.
    165c:	91 30 50 07 90 4a 55 00 91 30 6e 07 90 4b 55 00     .0P..JU..0n..KU.
    166c:	91 30 50 07 90 4d 55 00 91 30 50 07 90 4a 55 00     .0P..MU..0P..JU.
    167c:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 4d 55 00     .0n..KU..0P..MU.
    168c:	91 30 50 07 90 4f 55 00 91 30 6e 06 90 4b 55 00     .0P..OU..0n..KU.
    169c:	91 30 50 07 90 4d 55 00 91 2e 6e 07 90 4f 55 07     .0P..MU...n..OU.
    16ac:	50 55 00 91 30 6e 07 90 4d 55 00 91 30 50 07 90     PU..0n..MU..0P..
    16bc:	4f 55 00 91 30 50 07 90 4b 55 00 91 30 6e 07 90     OU..0P..KU..0n..
    16cc:	4d 55 00 91 30 50 07 90 4a 55 00 91 30 50 07 30     MU..0P..JU..0P.0
    16dc:	6e 02 90 4b 55 05 48 55 00 91 30 50 07 90 4a 55     n..KU.HU..0P..JU
    16ec:	00 91 30 50 07 90 46 55 00 91 30 6e 07 90 4d 55     ..0P..FU..0n..MU
    16fc:	00 91 30 50 07 90 46 55 00 91 30 50 07 90 4f 55     ..0P..FU..0P..OU
    170c:	00 91 30 6e 07 90 46 55 00 91 30 50 07 90 4d 55     ..0n..FU..0P..MU
    171c:	00 91 2e 6e 07 90 46 55 07 48 55 00 91 30 6e 06     ...n..FU.HU..0n.
    172c:	90 43 55 00 91 30 50 07 90 48 55 00 91 30 50 07     .CU..0P..HU..0P.
    173c:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    174c:	90 48 55 00 91 30 50 07 90 4a 55 00 91 30 6e 07     .HU..0P..JU..0n.
    175c:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 30 50 07     .KU..0P..MU..0P.
    176c:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    177c:	90 4d 55 00 91 30 50 07 90 4f 55 00 91 30 6e 07     .MU..0P..OU..0n.
    178c:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 2e 6e 07     .KU..0P..MU...n.
    179c:	90 4f 55 07 50 55 00 91 30 6e 07 90 4d 55 00 91     .OU.PU..0n..MU..
    17ac:	30 50 07 90 4f 55 00 91 30 50 07 90 4b 55 00 91     0P..OU..0P..KU..
    17bc:	30 6e 07 90 4d 55 00 91 30 50 07 90 4a 55 00 91     0n..MU..0P..JU..
    17cc:	30 50 06 30 6e 03 90 4b 55 04 48 55 00 91 30 50     0P.0n..KU.HU..0P
    17dc:	07 90 4a 55 00 91 30 50 07 90 46 55 00 91 30 6e     ..JU..0P..FU..0n
    17ec:	07 90 4d 55 00 91 30 50 07 90 46 55 00 91 30 50     ..MU..0P..FU..0P
    17fc:	07 90 4f 55 00 91 30 6e 07 90 46 55 00 91 30 50     ..OU..0n..FU..0P
    180c:	07 90 4d 55 00 91 2e 6e 07 90 46 55 07 48 78 00     ..MU...n..FU.Hx.
    181c:	91 2c 6e 07 90 43 55 00 91 2c 50 07 90 48 55 00     .,n..CU..,P..HU.
    182c:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
    183c:	91 2c 50 07 90 48 55 00 91 2c 50 07 90 4a 78 00     .,P..HU..,P..Jx.
    184c:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 55 00     .,n..KU..,P..MU.
    185c:	91 2c 50 07 90 4a 78 00 91 2c 6e 06 90 4b 55 00     .,P..Jx..,n..KU.
    186c:	91 2c 50 07 90 4d 55 00 91 2c 50 07 90 4f 78 00     .,P..MU..,P..Ox.
    187c:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 78 00     .,n..KU..,P..Mx.
    188c:	91 2b 6e 07 90 4f 55 07 50 78 00 91 2c 6e 07 90     .+n..OU.Px..,n..
    189c:	4d 55 00 91 2c 50 07 90 4f 55 00 91 2c 50 07 90     MU..,P..OU..,P..
    18ac:	4b 78 00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90     Kx..,n..MU..,P..
    18bc:	4a 55 00 91 2c 50 07 2c 6e 02 90 4b 78 05 48 55     JU..,P.,n..Kx.HU
    18cc:	00 91 2c 50 07 90 4a 55 00 91 2c 50 07 90 46 78     ..,P..JU..,P..Fx
    18dc:	00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90 46 78     ..,n..MU..,P..Fx
    18ec:	00 91 2c 50 07 90 4f 55 00 91 2c 6e 07 90 46 78     ..,P..OU..,n..Fx
    18fc:	00 91 2c 50 07 90 4d 55 00 91 2b 6e 06 90 46 78     ..,P..MU..+n..Fx
    190c:	07 48 55 00 91 29 6e 07 90 43 55 00 91 29 50 07     .HU..)n..CU..)P.
    191c:	90 48 55 00 91 29 50 07 90 4a 55 00 91 29 6e 07     .HU..)P..JU..)n.
    192c:	90 4b 55 00 91 29 50 07 90 48 55 00 91 29 50 07     .KU..)P..HU..)P.
    193c:	90 4a 55 00 91 2b 6e 07 90 4b 55 00 91 2b 50 07     .JU..+n..KU..+P.
    194c:	90 4d 55 00 91 2b 50 07 90 4a 55 00 91 2b 6e 07     .MU..+P..JU..+n.
    195c:	90 4b 55 00 91 2b 50 07 90 4d 55 00 91 2b 50 07     .KU..+P..MU..+P.
    196c:	90 4f 55 00 91 2c 6e 07 90 4b 55 00 91 2c 50 07     .OU..,n..KU..,P.
    197c:	90 4d 55 00 91 2c 6e 07 90 4f 55 07 50 55 00 91     .MU..,n..OU.PU..
    198c:	2e 6e 07 90 4d 55 00 91 2e 50 07 90 4f 55 00 91     .n..MU...P..OU..
    199c:	2e 50 07 90 4b 55 00 91 2e 6e 06 90 4d 55 00 91     .P..KU...n..MU..
    19ac:	2e 50 07 90 4a 55 00 91 2e 50 07 2e 6e 03 90 4b     .P..JU...P..n..K
    19bc:	55 04 48 55 00 91 2e 50 07 90 4a 55 00 91 2e 50     U.HU...P..JU...P
    19cc:	07 90 46 55 00 91 2e 6e 07 90 4d 55 00 91 2e 50     ..FU...n..MU...P
    19dc:	07 90 46 55 00 91 2e 50 07 90 4f 55 00 91 30 6e     ..FU...P..OU..0n
    19ec:	07 90 46 55 00 91 30 50 07 90 4d 55 00 91 2e 6e     ..FU..0P..MU...n
    19fc:	07 90 46 55 07 54 64 00 48 64 00 91 30 6e 07 30     ..FU.Td.Hd..0n.0
    1a0c:	50 07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e     P.0P.0n.0P.0P.0n
    1a1c:	07 30 50 06 30 50 07 30 6e 07 30 50 07 30 50 07     .0P.0P.0n.0P.0P.
    1a2c:	30 6e 07 30 50 07 2e 6e 0e 30 6e 07 30 50 07 30     0n.0P..n.0n.0P.0
    1a3c:	50 07 30 6e 07 30 50 07 30 50 07 30 6e 07 30 50     P.0n.0P.0P.0n.0P
    1a4c:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 06     .0P.0n.0P.0P.0n.
    1a5c:	30 50 07 2e 6e 0e 90 33 64 00 37 64 00 3c 64 00     0P..n..3d.7d.<d.
    1a6c:	91 30 6e 07 30 50 07 30 50 07 90 32 64 00 37 64     .0n.0P.0P..2d.7d
    1a7c:	00 3a 64 00 91 30 6e 07 30 50 07 30 50 07 90 33     .:d..0n.0P.0P..3
    1a8c:	64 00 37 64 00 3c 64 00 91 30 6e 07 30 50 07 30     d.7d.<d..0n.0P.0
    1a9c:	50 07 90 37 64 00 3a 64 00 3e 64 00 91 30 6e 07     P..7d.:d.>d..0n.
    1aac:	30 50 07 30 50 07 90 37 64 00 3c 64 00 3f 64 00     0P.0P..7d.<d.?d.
    1abc:	91 30 6e 07 30 50 07 90 37 64 00 3a 64 00 3e 64     .0n.0P..7d.:d.>d
    1acc:	00 91 30 6e 07 30 6e 07 90 3a 64 00 43 64 00 3f     ..0n.0n..:d.Cd.?
    1adc:	64 00 91 33 6e 06 33 50 07 33 50 07 33 6e 07 33     d..3n.3P.3P.3n.3
    1aec:	50 07 33 50 07 90 37 64 00 3a 64 00 3f 64 00 91     P.3P..7d.:d.?d..
    1afc:	33 6e 07 33 50 07 33 50 07 33 6e 07 33 50 07 33     3n.3P.3P.3n.3P.3
    1b0c:	50 07 90 3a 64 00 3f 64 00 43 64 00 91 33 6e 07     P..:d.?d.Cd..3n.
    1b1c:	33 50 07 33 6e 07 33 6e 07 90 41 64 00 3e 64 00     3P.3n.3n..Ad.>d.
    1b2c:	3a 64 00 91 2e 6e 07 2e 50 07 2e 50 07 2e 6e 07     :d...n..P..P..n.
    1b3c:	2e 50 07 2e 50 06 90 35 64 00 3a 64 00 3e 64 00     .P..P..5d.:d.>d.
    1b4c:	91 2e 6e 07 2e 50 07 2e 50 07 2e 6e 07 2e 50 07     ..n..P..P..n..P.
    1b5c:	2e 50 07 90 3a 64 00 3e 64 00 41 64 00 91 2e 6e     .P..:d.>d.Ad...n
    1b6c:	07 2e 50 07 2e 6e 07 2e 6e 07 90 37 64 00 3c 64     ..P..n..n..7d.<d
    1b7c:	00 3f 64 00 91 30 6e 07 30 50 07 30 50 07 30 6e     .?d..0n.0P.0P.0n
    1b8c:	07 30 50 07 30 50 07 30 6e 07 30 50 07 30 50 07     .0P.0P.0n.0P.0P.
    1b9c:	30 6e 06 30 50 07 30 50 07 30 6e 07 30 50 07 2e     0n.0P.0P.0n.0P..
    1bac:	6e 0e 30 6e 07 30 50 07 30 50 07 30 6e 07 30 50     n.0n.0P.0P.0n.0P
    1bbc:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 07     .0P.0n.0P.0P.0n.
    1bcc:	30 50 07 30 50 07 30 6e 07 30 50 07 2e 6e 0d 90     0P.0P.0n.0P..n..
    1bdc:	33 64 00 37 64 00 3c 64 00 91 30 6e 07 30 50 07     3d.7d.<d..0n.0P.
    1bec:	30 50 07 90 32 64 00 37 64 00 3a 64 00 91 30 6e     0P..2d.7d.:d..0n
    1bfc:	07 30 50 07 30 50 07 90 33 64 00 37 64 00 3c 64     .0P.0P..3d.7d.<d
    1c0c:	00 91 30 6e 07 30 50 07 30 50 07 90 37 64 00 3a     ..0n.0P.0P..7d.:
    1c1c:	64 00 3e 64 00 91 30 6e 07 30 50 07 30 50 07 90     d.>d..0n.0P.0P..
    1c2c:	37 64 00 3c 64 00 3f 64 00 91 30 6e 07 30 50 07     7d.<d.?d..0n.0P.
    1c3c:	90 37 64 00 3a 64 00 3e 64 00 91 2e 6e 0e 90 3a     .7d.:d.>d...n..:
    1c4c:	64 00 43 64 00 3f 64 00 91 33 6e 07 33 50 07 33     d.Cd.?d..3n.3P.3
    1c5c:	50 07 33 6e 06 33 50 07 33 50 07 90 37 64 00 3a     P.3n.3P.3P..7d.:
    1c6c:	64 00 3f 64 00 91 33 6e 07 33 50 07 33 50 07 33     d.?d..3n.3P.3P.3
    1c7c:	6e 07 33 50 07 33 50 07 90 3a 64 00 3f 64 00 43     n.3P.3P..:d.?d.C
    1c8c:	64 00 91 33 6e 07 33 50 07 32 6e 0e 90 41 64 00     d..3n.3P.2n..Ad.
    1c9c:	3e 64 00 3a 64 00 91 2e 6e 07 2e 50 07 2e 50 07     >d.:d...n..P..P.
    1cac:	2e 6e 07 2e 50 07 2e 50 07 90 35 64 00 3a 64 00     .n..P..P..5d.:d.
    1cbc:	3e 64 00 91 2e 6e 07 2e 50 06 2e 50 07 2e 6e 07     >d...n..P..P..n.
    1ccc:	2e 50 07 2e 50 07 90 3a 64 00 3e 64 00 41 64 00     .P..P..:d.>d.Ad.
    1cdc:	91 2e 6e 05 ff 06 01 45 02 91 2e 50 07 2c 6e 0e     ..n....E...P.,n.
    1cec:	90 37 64 00 3c 64 00 3f 64 00 91 30 6e 07 30 50     .7d.<d.?d..0n.0P
    1cfc:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 07     .0P.0n.0P.0P.0n.
    1d0c:	30 50 07 30 50 07 30 6e 07 30 50 07 30 50 07 ff     0P.0P.0n.0P.0P..
    1d1c:	2f 00                                               /.

00001d1e <my_patches>:
    1d1e:	00 00 00 95 1e 00 00 00 00 00 00 00 95 1e 00 00     ................
    1d2e:	00 00 00 00 00 84 1e 00 00 00 00 00 00 00 2e 1e     ................
    1d3e:	00 00 00 00 00 00 00 84 1e 00 00 00 00 00 00 00     ................
    1d4e:	5d 1d 00 00 00 00 00 00 00 5d 1d 00 00 00 00        ]........].....

00001d5d <explode>:
    1d5d:	00 07 7f 00 02 03 00 00 ff 00 08 41 01 04 04 01     ...........A....
    1d6d:	04 04 01 04 04 01 04 04 01 04 04 01 04 04 01 04     ................
    1d7d:	04 01 04 04 01 04 04 03 07 64 00 08 3c 01 04 04     .........d..<...
    1d8d:	01 04 04 01 04 04 01 04 04 01 04 04 01 04 04 01     ................
    1d9d:	04 04 01 04 04 01 04 04 03 07 50 00 08 37 01 04     ..........P..7..
    1dad:	04 01 04 04 01 04 04 01 04 04 01 04 04 01 04 04     ................
    1dbd:	01 04 04 01 04 04 01 04 04 03 07 32 00 08 32 01     ...........2..2.
    1dcd:	04 04 01 04 04 01 04 04 01 04 04 01 04 04 01 04     ................
    1ddd:	04 01 04 04 01 04 04 01 04 04 03 07 28 00 08 2d     ............(..-
    1ded:	01 04 04 01 04 04 01 04 04 01 04 04 01 04 04 01     ................
    1dfd:	04 04 01 04 04 01 04 04 01 04 04 03 07 14 00 08     ................
    1e0d:	28 01 04 04 01 04 04 01 04 04 01 04 04 01 04 04     (...............
    1e1d:	01 04 04 01 04 04 01 04 04 01 04 04 01 05 00 00     ................
    1e2d:	ff                                                  .

00001e2e <pshoot>:
    1e2e:	00 02 03 00 07 7f 00 08 50 01 04 06 01 04 06 01     ........P.......
    1e3e:	04 06 01 07 00 03 07 7f 00 08 50 01 04 06 01 04     ..........P.....
    1e4e:	06 01 04 06 01 07 00 03 08 50 00 07 20 01 04 06     .........P.. ...
    1e5e:	01 04 06 01 04 06 01 04 06 01 07 00 03 08 50 00     ..............P.
    1e6e:	07 0f 01 04 06 01 04 06 01 04 06 01 04 06 01 07     ................
    1e7e:	00 01 05 00 00 ff                                   ......

00001e84 <navigate>:
    1e84:	00 02 04 00 07 70 00 00 d8 00 08 3c 01 05 00 00     .....p.....<....
    1e94:	ff                                                  .

00001e95 <instrument>:
    1e95:	00 02 04 00 00 dd 00 ff                             ........

00001e9d <sprites_data>:
    1e9d:	fe fe fe fe fe fe fe 87 fe fe fe fe fe fe 87 87     ................
    1ead:	fe fe fe fe fe fe 87 87 fe fe fe fe 85 85 85 87     ................
    1ebd:	fe fe fe 85 87 87 87 85 fe fe 85 87 87 87 87 85     ................
    1ecd:	fe 85 87 87 87 85 85 87 85 87 87 85 85 87 87 87     ................
    1edd:	87 87 87 fe fe fe fe fe d2 d2 eb d2 fe fe fe fe     ................
    1eed:	87 d2 fd eb fe fe fe fe 87 87 eb d2 fe fe fe fe     ................
    1efd:	85 87 87 d2 fe fe fe fe 87 85 85 87 85 fe fe fe     ................
    1f0d:	87 ef 87 87 87 85 fe fe ef ff ef 87 87 85 fe fe     ................
    1f1d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 87     ................
    1f2d:	fe fe fe fe fe fe 87 87 fe fe fe fe fe fe 87 87     ................
    1f3d:	fe fe fe fe 85 85 85 87 fe fe fe 85 87 87 87 85     ................
    1f4d:	fe fe 85 87 87 87 87 85 fe 85 87 87 87 85 85 87     ................
    1f5d:	fe fe fe fe fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    1f6d:	d2 d2 eb d2 fe fe fe fe 87 d2 fd eb fe fe fe fe     ................
    1f7d:	87 87 eb d2 fe fe fe fe 85 87 87 d2 fe fe fe fe     ................
    1f8d:	87 85 85 87 85 fe fe fe 87 ef 87 87 87 85 fe fe     ................
    1f9d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1fad:	fe fe fe fe fe fe fe fe fe ba ba ba ba ba ba fe     ................
    1fbd:	ba bd bd bd bd bd bd ba fe ba ba ba ba ba ba fe     ................
    1fcd:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1fdd:	fe fe 46 46 46 46 46 46 fe a5 a5 a5 47 47 46 fe     ..FFFFFF....GGF.
    1fed:	fe 46 46 47 47 46 3f 3f 46 46 47 47 46 fe fe fe     .FFGGF??FFGGF...
    1ffd:	46 46 47 47 46 fe fe fe fe 46 46 47 47 3f 3f fe     FFGGF....FFGG??.
    200d:	fe a5 a5 a5 47 fe fe fe fe fe 46 46 46 46 fe fe     ....G.....FFFF..
    201d:	fe fe fe 07 fe fe fe fe fe fe 07 07 07 fe fe fe     ................
    202d:	fe 07 07 27 07 07 fe fe 07 07 27 77 27 07 07 fe     ...'......'w'...
    203d:	fe 07 07 27 07 07 fe fe fe fe 07 07 07 fe fe fe     ...'............
    204d:	fe fe fe 07 fe fe fe fe fe fe fe fe fe fe fe fe     ................
    205d:	fe fe fe d2 fe fe fe fe fe fe d2 d2 d2 fe fe fe     ................
    206d:	fe d2 d2 e4 d2 d2 fe fe d2 d2 e4 f5 e4 d2 d2 fe     ................
    207d:	fe d2 d2 e4 d2 d2 fe fe fe fe d2 d2 d2 fe fe fe     ................
    208d:	fe fe fe d2 fe fe fe fe fe fe fe fe fe fe fe fe     ................
    209d:	fe fe fe 38 fe fe fe fe fe fe 38 38 38 fe fe fe     ...8......888...
    20ad:	fe 38 38 bc 38 38 fe fe 38 38 bc be bc 38 38 fe     .88.88..88...88.
    20bd:	fe 38 38 bc 38 38 fe fe fe fe 38 38 38 fe fe fe     .88.88....888...
    20cd:	fe fe fe 38 fe fe fe fe fe fe fe fe fe fe fe fe     ...8............
    20dd:	fe fe fe a2 fe fe fe fe fe fe a2 a2 a2 fe fe fe     ................
    20ed:	fe a2 a2 aa a2 a2 fe fe a2 a2 aa ad aa a2 a2 fe     ................
    20fd:	fe a2 a2 aa a2 a2 fe fe fe fe a2 a2 a2 fe fe fe     ................
    210d:	fe fe fe a2 fe fe fe fe fe fe fe fe fe fe fe fe     ................
    211d:	fe fe fe 6e fe fe fe fe fe fe 6e 6e 6e fe fe fe     ...n......nnn...
    212d:	fe 6e 6e 6f 6e 6e fe fe 6e 6e 6f 77 6f 6e 6e fe     .nnonn..nnowonn.
    213d:	fe 6e 6e 6f 6e 6e fe fe fe fe 6e 6e 6e fe fe fe     .nnonn....nnn...
    214d:	fe fe fe 6e fe fe fe fe fe fe fe fe fe fe fe fe     ...n............
    215d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    216d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    217d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    218d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    219d:	85 87 87 85 fe 85 87 87 fe 85 87 85 fe 85 87 87     ................
    21ad:	fe 85 87 87 ad ad ad ad fe fe 85 87 ad ad ad ad     ................
    21bd:	fe fe 85 87 ad ad ad ad fe fe fe 85 a4 ad 87 87     ................
    21cd:	fe fe fe fe a4 a4 85 87 fe fe fe fe a4 a4 85 87     ................
    21dd:	87 ef 87 85 87 85 fe fe 87 87 87 85 87 87 85 fe     ................
    21ed:	ad ad ad ad ad 87 85 fe ad ad ad ad ad ad a4 ad     ................
    21fd:	ad ad ad ad ad a4 a4 a4 87 87 87 85 fe fe fe fe     ................
    220d:	87 87 87 85 fe fe fe fe 87 87 87 85 fe fe fe fe     ................
    221d:	87 ef 87 85 87 85 fe fe 87 87 87 85 87 87 85 fe     ................
    222d:	ad ad ad ad ad 87 85 fe ad ad ad ad ad ad a4 ad     ................
    223d:	ad ad ad ad ad a4 a4 a4 87 87 87 85 fe fe fe fe     ................
    224d:	87 87 87 85 fe fe fe fe 87 87 85 fe fe fe fe fe     ................
    225d:	85 87 87 85 85 87 87 87 85 87 87 85 fe 85 87 87     ................
    226d:	fe 85 87 85 fe 85 87 87 fe 85 87 87 ad ad ad ad     ................
    227d:	fe fe 85 87 ad ad ad ad fe fe 85 87 ad ad ad ad     ................
    228d:	fe fe fe 85 a4 ad 87 87 fe fe fe fe a4 a4 85 87     ................
    229d:	ef ff ef 87 87 85 fe fe 87 ef 87 85 87 85 fe fe     ................
    22ad:	87 87 87 85 87 87 85 fe ad ad ad ad ad 87 85 fe     ................
    22bd:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    22cd:	87 87 87 87 fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    22dd:	87 ef 87 85 87 85 fe fe 87 87 87 85 87 87 85 fe     ................
    22ed:	ad ad ad ad ad 87 85 fe ad ad ad ad ad ad a4 ad     ................
    22fd:	ad ad ad ad ad a4 a4 a4 87 87 87 87 fe fe fe fe     ................
    230d:	87 87 87 87 fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    231d:	ef ff ef 87 87 85 fe fe 87 ef 87 85 87 85 fe fe     ................
    232d:	87 87 87 85 87 87 85 fe ad ad ad ad ad 87 85 fe     ................
    233d:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    234d:	87 87 87 87 fe fe fe fe 87 87 87 87 87 fe fe fe     ................
    235d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    236d:	fe fe fe 27 07 fe fe fe fe fe 27 77 27 07 fe fe     ...'......'w'...
    237d:	fe fe 07 27 07 07 fe fe fe fe fe 07 07 fe fe fe     ...'............
    238d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    239d:	fe fe fe fe fe fe 85 87 fe fe fe fe fe fe 85 87     ................
    23ad:	fe fe fe fe fe 85 87 87 fe fe fe fe fe 85 87 87     ................
    23bd:	fe fe fe fe 85 87 87 fe fe fe fe fe 85 87 87 fe     ................
    23cd:	fe fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4     ................
    23dd:	87 fe 85 85 fe fe fe fe 87 fe 85 85 85 fe fe fe     ................
    23ed:	fe fe 85 85 85 fe fe fe fe fe 85 85 85 fe fe fe     ................
    23fd:	fe fe 85 85 85 fe fe fe fe fe 85 85 85 fe fe fe     ................
    240d:	fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe     ................
    241d:	fe fe fe fe fe fe fe 85 fe fe fe fe fe fe fe 85     ................
    242d:	fe fe fe fe fe 85 85 87 fe fe fe fe 85 87 87 87     ................
    243d:	fe fe fe a4 87 87 87 87 fe fe fe a4 87 87 87 fe     ................
    244d:	fe fe fe a4 a4 fe fe fe fe fe fe a4 a4 a4 fe fe     ................
    245d:	87 87 87 fe fe fe fe fe 87 87 87 87 fe fe fe fe     ................
    246d:	87 87 87 87 fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    247d:	87 85 85 fe fe fe fe fe 85 85 85 fe fe fe fe fe     ................
    248d:	a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe fe fe     ................
    249d:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 85 85     ................
    24ad:	fe fe fe fe 85 85 85 85 a4 a4 85 85 85 85 85 fe     ................
    24bd:	a4 a4 85 85 85 85 85 fe a4 a4 85 85 85 85 fe fe     ................
    24cd:	a4 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    24dd:	87 87 87 fe fe fe fe fe fe 85 87 87 fe fe fe fe     ................
    24ed:	fe 85 87 87 87 fe fe fe fe fe 85 87 87 fe fe fe     ................
    24fd:	fe fe 85 87 87 87 fe fe fe fe fe 85 87 87 fe fe     ................
    250d:	fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe     ................
    251d:	fe fe fe fe fe fe fe 85 fe fe fe fe fe fe fe 85     ................
    252d:	fe fe fe fe fe 85 85 85 fe fe fe fe 85 85 85 85     ................
    253d:	fe fe fe a4 85 85 85 85 fe fe fe a4 85 85 85 fe     ................
    254d:	fe fe fe a4 a4 fe fe fe fe fe fe a4 a4 a4 fe fe     ................
    255d:	87 87 87 fe fe fe fe fe 85 87 87 85 fe fe fe fe     ................
    256d:	85 87 87 85 fe fe fe fe 85 87 87 fe fe fe fe fe     ................
    257d:	85 87 87 fe fe fe fe fe 85 87 87 fe fe fe fe fe     ................
    258d:	a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe fe fe     ................
    259d:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 85 85     ................
    25ad:	fe fe fe fe 85 85 85 85 a4 a4 85 85 85 85 a4 a4     ................
    25bd:	a4 a4 85 85 85 85 a4 a4 a4 a4 85 85 85 85 a4 a4     ................
    25cd:	a4 fe fe fe fe fe a4 fe fe fe fe fe fe fe fe fe     ................
    25dd:	87 87 85 87 87 fe fe fe fe fe 85 87 87 87 fe fe     ................
    25ed:	fe fe 85 87 87 87 fe fe 85 85 85 87 87 fe fe fe     ................
    25fd:	87 87 87 87 87 fe fe fe 87 87 87 87 fe fe fe fe     ................
    260d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    261d:	fe fe fe fe fe fe fe fe fe fe 12 12 12 12 fe fe     ................
    262d:	ad 12 0f 1f 1f 0f 12 ad ad 12 12 12 12 12 12 ad     ................
    263d:	ad ad 12 12 12 12 ad ad ad 12 ad 12 12 ad 12 ad     ................
    264d:	ad fe 12 12 12 12 fe ad ad fe fe fe fe fe fe ad     ................
    265d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 7f     ................
    266d:	fe fe fe fe fe 7f 7f 7f fe fe fe fe 7f 7f 7f 7f     ................
    267d:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe fe fe     ................
    268d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    269d:	a4 fe fe fe fe fe fe fe a4 ad fe fe ff ff a4 ad     ................
    26ad:	a4 ad f6 ff ff a4 ad f6 a4 ad f6 ff a4 ad f6 ff     ................
    26bd:	a4 ad fe fe a4 ad f6 ff a4 fe fe a4 a4 ad f6 fe     ................
    26cd:	fe fe fe a4 a4 ad f6 f6 fe fe fe fe fe fe fe fe     ................
    26dd:	fe fe fe fe fe fe fe fe f6 ff ff ff d2 fe fe fe     ................
    26ed:	ff ff ff ff d2 eb fe fe ff fe ff ff eb fd d2 fe     ................
    26fd:	fe fe fe ff d2 eb d2 d2 fe fe fe fe fe fe fe fe     ................
    270d:	f6 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    271d:	fe fe bf 7f 7f bf fe fe fe 7f 7f 7f 7f 7f 7f fe     ................
    272d:	bf 7f 7f 7f 7f 7f 7f bf 7f 7f 7f 7f 7f 7f 7f 7f     ................
    273d:	7f 7f 7f 7f 7f 7f 7f 7f bf 7f 7f 7f 7f 7f 7f bf     ................
    274d:	fe 7f 7f 7f 7f 7f 7f fe fe fe bf 7f 7f bf fe fe     ................
    275d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    276d:	fe fe fe 7f 7f fe fe fe fe fe 7f 7f 7f 7f fe fe     ................
    277d:	fe fe 7f 7f 7f 7f fe fe fe fe fe 7f 7f fe fe fe     ................
    278d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    279d:	fe fe bf 7f 7f bf fe fe fe 7f 7f 7f 7f 7f 7f fe     ................
    27ad:	bf 7f fe fe 7f 7f 7f bf 7f fe fe fe fe 7f 7f 7f     ................
    27bd:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe 7f bf     ................
    27cd:	fe fe fe fe fe fe 7f fe fe fe fe fe fe bf fe fe     ................
    27dd:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    27ed:	fe fe fe fe fe fe fe fe fe fe fe e3 fe fe fe fe     ................
    27fd:	fe fe fe ff fe fe fe fe fe fe fe fe fe fe fe fe     ................
    280d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    281d:	fe fe fe fe fe fe fe fe fe fe fe fe ff fe fe fe     ................
    282d:	fe fe fe fe 7f ff fe fe fe fe fe fe 7f 7f ff fe     ................
    283d:	fe fe fe fe 7f 7f 7f ff fe fe fe fe 7f 7f 7f fe     ................
    284d:	fe fe fe fe 7f 7f fe fe fe fe fe fe 7f fe fe fe     ................
    285d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    286d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    287d:	7f 7f 7f 7f 7f 7f ff fe fe 7f 7f 7f 7f ff fe fe     ................
    288d:	fe fe 7f 7f ff fe fe fe fe fe fe fe fe fe fe fe     ................
    289d:	fe fe fe ff fe fe fe fe fe fe ff 7f 7f fe fe fe     ................
    28ad:	fe ff 7f 7f 7f 7f fe fe ff 7f 7f 7f 7f 7f 7f fe     ................
    28bd:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    28cd:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    28dd:	fe fe 12 12 12 12 fe fe fe 12 0f 1f 1f 0f 12 fe     ................
    28ed:	ad 12 12 12 12 12 12 ad ad 12 ad 12 12 ad 12 ad     ................
    28fd:	ad ad 12 12 12 12 ad ad ad fe 12 12 12 12 fe ad     ................
    290d:	ad fe fe fe fe fe fe ad ad fe fe fe fe fe fe ad     ................
    291d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 7f     ................
    292d:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe fe 7f     ................
    293d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    294d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    295d:	a4 fe fe fe fe fe fe fe a4 a4 fe fe fe fe fe fe     ................
    296d:	a4 a4 ad fe fe fe fe fe a4 a4 ad ad fe fe fe fe     ................
    297d:	a4 a4 ad ad f6 fe fe fe a4 a4 ad ad f6 f6 ff ff     ................
    298d:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    299d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    29ad:	fe fe ff ff ff ff a4 a4 fe ff ff ff ff a4 a4 a4     ................
    29bd:	ff ff ff ff ff a4 a4 a4 ff ff ff ff a4 a4 a4 ad     ................
    29cd:	ff ff ff ff a4 a4 ad ad ff ff ff a4 a4 ad ad f6     ................
    29dd:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    29ed:	a4 ad ad f6 f6 ff ff ff a4 ad ad f6 f6 ff ff ff     ................
    29fd:	ad ad f6 f6 ff ff ff ff ad f6 f6 ff ff ff ff ff     ................
    2a0d:	f6 f6 ff ff ff ff ff ff f6 ff ff 7f 7f ff ff ff     ................
    2a1d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2a2d:	d2 fe fe fe fe fe fe fe d2 d2 fe fe fe fe fe fe     ................
    2a3d:	d2 d2 d2 fe fe fe fe fe d2 d3 eb d3 fe fe fe fe     ................
    2a4d:	d2 eb fd eb d2 fe fe fe d2 d3 eb d3 d2 d2 fe fe     ................
    2a5d:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    2a6d:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 7f 7f fe     ................
    2a7d:	a4 a4 ad ad 7f 7f 7f fe a4 a4 ad fe fe 7f fe fe     ................
    2a8d:	a4 a4 fe fe fe fe fe fe a4 fe fe fe fe fe fe fe     ................
    2a9d:	ff ff fe a4 ad ad f6 f6 ff fe a4 a4 ad ad f6 f6     ................
    2aad:	fe fe a4 a4 ad ad f6 f6 fe a4 a4 a4 ad ad f6 f6     ................
    2abd:	fe a4 a4 a4 a4 ad ad f6 a4 a4 a4 a4 a4 a4 ad ad     ................
    2acd:	a4 a4 a4 a4 a4 a4 a4 ad a4 a4 a4 a4 a4 a4 a4 a4     ................
    2add:	ff ff 7f 7f 7f 7f ff ff ff fe 7f 7f 7f 7f fe ff     ................
    2aed:	fe fe 7f 7f 7f fe fe fe fe fe fe 7f fe fe fe fe     ................
    2afd:	f6 fe fe fe fe fe fe fe f6 f6 fe fe fe fe fe fe     ................
    2b0d:	ad f6 f6 fe fe fe fe fe ad ad f6 f6 fe fe fe fe     ................
    2b1d:	d2 d2 d2 d2 d2 d2 d2 fe ff ff ff ff ff ff ff ff     ................
    2b2d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2b3d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2b4d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2b5d:	ef ff ef 87 87 85 fe fe 87 ef 87 85 87 85 fe fe     ................
    2b6d:	87 87 87 85 87 87 85 fe ad ad ad ad ad 87 85 fe     ................
    2b7d:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    2b8d:	87 87 87 85 fe fe fe fe 87 87 85 fe fe fe fe fe     ................
    2b9d:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 87 87     ................
    2bad:	fe fe fe fe 85 87 87 87 a4 a4 85 85 85 87 87 fe     ................
    2bbd:	a4 a4 87 87 87 87 87 fe a4 a4 87 87 87 87 fe fe     ................
    2bcd:	a4 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2bdd:	87 87 85 fe fe fe fe fe fe 85 85 85 fe fe fe fe     ................
    2bed:	fe 85 85 85 85 fe fe fe fe fe 85 85 85 fe fe fe     ................
    2bfd:	fe fe 85 85 85 85 fe fe fe fe fe 85 85 85 fe fe     ................
    2c0d:	fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe     ................
    2c1d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2c2d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2c3d:	fe fe fe fe fe fe fe fe fe fe fe fe fe 85 85 85     ................
    2c4d:	fe a4 87 87 87 87 87 87 a4 a4 87 87 87 87 87 87     ................
    2c5d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 87     ................
    2c6d:	fe fe fe fe 85 85 85 87 fe fe fe 85 87 87 87 85     ................
    2c7d:	fe fe 85 85 87 87 87 87 85 85 85 85 85 87 87 ad     ................
    2c8d:	87 87 87 87 ad 85 87 87 87 87 87 87 ad ad a4 a4     ................
    2c9d:	87 87 87 87 fe fe fe fe 87 d2 d2 eb d2 fe fe fe     ................
    2cad:	87 87 d2 fd eb fe fe fe 87 87 87 eb d2 fe fe fe     ................
    2cbd:	85 85 87 87 d2 fe fe fe ad ad ad ad ad 87 ef fe     ................
    2ccd:	ad ad ad ad ad ad a4 ad a4 ad ad ad ad a4 a4 a4     ................
    2cdd:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    2ced:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 7f 7f 7f     ................
    2cfd:	a4 a4 ad ad 7f 7f 7f fe a4 a4 ad fe 7f 7f 7f fe     ................
    2d0d:	a4 a4 fe fe fe 7f fe fe a4 fe fe fe fe fe fe fe     ................
    2d1d:	ff ff 7f 7f 7f 7f ff ff ff 7f 7f 7f 7f 7f 7f ff     ................
    2d2d:	fe fe 7f 7f 7f 7f fe fe fe fe 7f 7f 7f fe fe fe     ................
    2d3d:	f6 fe fe 7f fe fe fe fe f6 f6 fe fe fe fe fe fe     ................
    2d4d:	ad f6 f6 fe fe fe fe fe ad ad f6 f6 fe fe fe fe     ................

00002d5d <map_enemy_spider_1>:
    2d5d:	01 01 29                                            ..)

00002d60 <map_enemy_spider_0>:
    2d60:	01 01 1e                                            ...

00002d63 <map_enemy_shark>:
    2d63:	01 01 05                                            ...

00002d66 <map_enemy_shot>:
    2d66:	01 01 13                                            ...

00002d69 <map_hero_shot>:
    2d69:	01 01 04                                            ...

00002d6c <map_hero_ship_large_1>:
    2d6c:	04 02 2b 2c 2d 2e 39 30 3a 32                       ..+,-.90:2

00002d76 <map_hero_ship_large_0>:
    2d76:	04 02 2b 2c 2d 2e 2f 30 31 32                       ..+,-./012

00002d80 <map_hero_ship_1>:
    2d80:	03 01 2a 20 21                                      ..* !

00002d85 <map_hero_ship_0>:
    2d85:	03 01 1f 20 21                                      ... !

00002d8a <map_hero_prone>:
    2d8a:	03 01 36 37 38                                      ..678

00002d8f <map_hero_jump>:
    2d8f:	02 03 02 03 0f 12 1c 1d                             ........

00002d97 <map_hero_step_3>:
    2d97:	02 03 02 03 0f 33 34 35                             .....345

00002d9f <map_hero_step_2>:
    2d9f:	02 03 00 01 0c 11 1a 1b                             ........

00002da7 <map_hero_step_1>:
    2da7:	02 03 02 03 0f 10 18 19                             ........

00002daf <map_hero_step_0>:
    2daf:	02 03 00 01 0c 0e 16 17                             ........

00002db7 <map_hero_idle>:
    2db7:	02 03 00 01 0c 0d 14 15                             ........

00002dbf <map_emerald_4>:
    2dbf:	01 01 0a                                            ...

00002dc2 <map_emerald_3>:
    2dc2:	01 01 09                                            ...

00002dc5 <map_emerald_2>:
    2dc5:	01 01 08                                            ...

00002dc8 <map_emerald_0>:
    2dc8:	01 01 07                                            ...

00002dcb <map_emerald_1>:
    2dcb:	01 01 06                                            ...

00002dce <map_explosion_2>:
    2dce:	01 01 24                                            ..$

00002dd1 <map_explosion_1>:
    2dd1:	01 01 23                                            ..#

00002dd4 <map_explosion_0>:
    2dd4:	01 01 22                                            .."

00002dd7 <map_particle>:
    2dd7:	01 01 25                                            ..%

00002dda <map_up_arrow>:
    2dda:	01 01 28                                            ..(

00002ddd <map_down_arrow>:
    2ddd:	01 01 27                                            ..'

00002de0 <map_right_arrow>:
    2de0:	01 01 26                                            ..&

00002de3 <map_none>:
    2de3:	01 01 0b                                            ...

00002de6 <map_level_space>:
    2de6:	01 20 01 1a 0f 00 01 12 0f 00 01 13 07 00 01 12     . ..............
    2df6:	0f 00 01 13 18 00 01 12 0b 00 01 12 06 00 01 12     ................
    2e06:	05 00 01 13 0b 00 01 12 08 00 12 00 01 12 0d 00     ................
    2e16:	01 13 0c 00 01 12 0c 00 01 12 0c 00 01 12 0d 00     ................
    2e26:	01 13 0e 00 01 13 0d 00 01 12 0c 00 01 12 0d 00     ................
    2e36:	01 12 0b 00 01 12 1b 00 01 12 0e 00 01 12 03 00     ................
    2e46:	01 12 08 00 01 13 1c 00 01 13 0e 00 01 12 02 00     ................
    2e56:	0d 00 01 12 04 00 01 12 06 00 01 12 09 00 01 13     ................
    2e66:	12 00 01 12 0f 00 01 12 08 00 01 13 11 00 01 12     ................
    2e76:	13 00 01 13 05 00 01 12 04 00 0b 00 01 13 14 00     ................
    2e86:	01 12 0e 00 01 12 02 00 01 12 05 00 01 12 0e 00     ................
    2e96:	01 12 15 00 01 13 0c 00 01 12 0d 00 01 13 07 00     ................
    2ea6:	04 00 01 13 0a 00 01 12 0b 00 01 12 18 00 01 12     ................
    2eb6:	01 13 11 00 01 12 19 00 01 13 16 00 01 12 07 00     ................
    2ec6:	0b 00 01 13 13 00 01 12 02 00 01 12 09 00 01 12     ................
    2ed6:	15 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................

00002ee6 <map_level_desert>:
    2ee6:	01 ff 01 1a 76 06 08 04 00 00 00 00 00 00 00 00     ....v...........
	...
    2f06:	24 04 5c 06 00 00 00 00 00 00 00 00 00 00 00 00     $.\.............
	...
    2f26:	06 06 01 08 65 06 01 08 0a 06 09 04 00 00 00 00     ....e...........
	...
    2f46:	23 04 2f 06 01 08 2d 06 00 00 00 00 00 00 00 00     #./...-.........
	...
    2f66:	76 06 0a 04 00 00 00 00 00 00 00 00 00 00 00 00     v...............
	...
    2f86:	22 04 5e 06 00 00 00 00 00 00 00 00 00 00 00 00     ".^.............
	...
    2fa6:	1c 06 01 08 21 06 01 08 36 06 0b 04 00 00 00 00     ....!...6.......
	...
    2fc6:	21 04 27 06 01 08 24 06 01 08 12 06 00 00 00 00     !.'...$.........
	...
    2fe6:	2e 06 01 08 33 06 01 08 11 06 0c 04 00 00 00 00     ....3...........
	...
    3006:	20 04 60 06 00 00 00 00 00 00 00 00 00 00 00 00      .`.............
	...
    3026:	4c 06 01 08 26 06 0d 04 00 00 00 00 00 00 00 00     L...&...........
	...
    3046:	1f 04 13 06 01 08 1d 06 01 08 2f 06 00 00 00 00     ........../.....
	...
    3066:	08 06 01 08 69 06 0e 04 00 00 00 00 00 00 00 00     ....i...........
	...
    3086:	1e 04 62 06 00 00 00 00 00 00 00 00 00 00 00 00     ..b.............
	...
    30a6:	71 06 0f 04 00 00 00 00 00 00 00 00 00 00 00 00     q...............
	...
    30c6:	1d 04 5d 06 06 05 00 00 00 00 00 00 00 00 00 00     ..].............
	...
    30e6:	70 05 10 04 00 00 00 00 00 00 00 00 00 00 00 00     p...............
	...
    3106:	1c 04 0d 05 08 02 48 05 07 07 00 00 00 00 00 00     ......H.........
	...
    3126:	6f 07 11 04 00 00 00 00 00 00 00 00 00 00 00 00     o...............
	...
    3146:	1b 04 0d 07 08 09 50 07 00 00 00 00 00 00 00 00     ......P.........
	...
    3166:	6e 07 12 09 00 00 00 00 00 00 00 00 00 00 00 00     n...............
	...
    3186:	1a 09 66 07 00 00 00 00 00 00 00 00 00 00 00 00     ..f.............
	...
    31a6:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    31c6:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    31e6:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3206:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3226:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3246:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3266:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3286:	2a 07 02 02 08 0a 4c 07 00 00 00 00 00 00 00 00     *.....L.........
	...
    32a6:	21 07 08 02 57 07 00 00 00 00 00 00 00 00 00 00     !...W...........
	...
    32c6:	29 07 0a 04 4d 07 00 00 00 00 00 00 00 00 00 00     )...M...........
	...
    32e6:	1f 07 01 02 08 04 02 02 56 07 00 00 00 00 00 00     ........V.......
	...
    3306:	28 07 0a 09 4e 07 00 00 00 00 00 00 00 00 00 00     (...N...........
	...
    3326:	1d 07 01 02 0b 04 02 02 55 07 00 00 00 00 00 00     ........U.......
	...
    3346:	19 07 08 02 13 07 08 02 3f 07 01 4c 04 07 00 00     ........?..L....
	...
    3366:	1b 07 01 02 0e 04 01 02 1a 07 01 4c 3a 07 00 00     ...........L:...
	...
    3386:	18 07 08 09 13 07 08 09 05 07 01 4c 39 07 01 4d     ...........L9..M
    3396:	01 4e 01 4f 03 07 00 00 00 00 00 00 00 00 00 00     .N.O............
    33a6:	15 07 05 02 10 04 01 02 19 07 01 4d 01 4e 01 4f     ...........M.N.O
    33b6:	20 07 12 02 06 0a 01 02 00 00 00 00 00 00 00 00      ...............
    33c6:	01 02 06 0a 02 02 06 0a 30 07 01 4d 01 4e 01 4f     ........0..M.N.O
    33d6:	35 07 01 4f 01 4e 01 50 06 07 00 00 00 00 00 00     5..O.N.P........
    33e6:	13 07 01 02 16 04 01 02 16 07 01 4f 01 4e 01 50     ...........O.N.P
    33f6:	21 07 01 02 1a 04 00 00 00 00 00 00 00 00 00 00     !...............
    3406:	0e 04 01 02 2d 07 01 4f 01 4e 01 50 39 07 01 50     ....-..O.N.P9..P
    3416:	01 4f 01 4e 05 07 00 00 00 00 00 00 00 00 00 00     .O.N............
    3426:	11 07 01 02 18 04 01 02 17 07 01 50 01 4f 01 4e     ...........P.O.N
    3436:	1e 07 01 02 1c 04 00 00 00 00 00 00 00 00 00 00     ................
    3446:	0e 04 01 02 2e 07 01 50 01 4f 01 4e 35 07 01 4e     .......P.O.N5..N
    3456:	01 4f 01 50 08 07 00 00 00 00 00 00 00 00 00 00     .O.P............
    3466:	0f 07 01 02 1a 04 01 02 14 07 01 4e 01 4f 01 50     ...........N.O.P
    3476:	1f 07 01 02 1e 04 00 00 00 00 00 00 00 00 00 00     ................
    3486:	0e 04 01 02 2b 07 01 4e 01 4f 01 50 39 07 01 51     ....+..N.O.P9..Q
    3496:	09 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    34a6:	0d 07 01 02 1c 04 01 02 15 07 01 51 1e 07 01 02     ...........Q....
    34b6:	20 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00      ...............
    34c6:	0e 04 01 02 2c 07 01 51 2e 07 16 02 00 00 00 00     ....,..Q........
	...
    34e6:	0c 02 1e 04 17 02 06 0a 02 02 06 0a 02 02 06 0a     ................
    34f6:	07 02 22 04 00 00 00 00 00 00 00 00 00 00 00 00     ..".............
    3506:	0e 04 5b 02 17 04 00 00 00 00 00 00 00 00 00 00     ..[.............
	...
    3526:	80 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3546:	68 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     h...............
	...

00003566 <map_level_city>:
    3566:	01 ff 01 1a 76 06 08 04 00 00 00 00 00 00 00 00     ....v...........
	...
    3586:	24 04 5c 06 00 00 00 00 00 00 00 00 00 00 00 00     $.\.............
	...
    35a6:	06 06 01 08 65 06 01 08 0a 06 09 04 00 00 00 00     ....e...........
	...
    35c6:	23 04 2f 06 01 08 2d 06 00 00 00 00 00 00 00 00     #./...-.........
	...
    35e6:	76 06 0a 04 00 00 00 00 00 00 00 00 00 00 00 00     v...............
	...
    3606:	22 04 5e 06 00 00 00 00 00 00 00 00 00 00 00 00     ".^.............
	...
    3626:	1c 06 01 08 21 06 01 08 36 06 0b 04 00 00 00 00     ....!...6.......
	...
    3646:	21 04 27 06 01 08 24 06 01 08 12 06 00 00 00 00     !.'...$.........
	...
    3666:	2e 06 01 08 33 06 01 08 11 06 0c 04 00 00 00 00     ....3...........
	...
    3686:	20 04 60 06 00 00 00 00 00 00 00 00 00 00 00 00      .`.............
	...
    36a6:	4c 06 01 08 26 06 0d 04 00 00 00 00 00 00 00 00     L...&...........
	...
    36c6:	1f 04 13 06 01 08 1d 06 01 08 2f 06 00 00 00 00     ........../.....
	...
    36e6:	08 06 01 08 69 06 0e 04 00 00 00 00 00 00 00 00     ....i...........
	...
    3706:	1e 04 62 06 00 00 00 00 00 00 00 00 00 00 00 00     ..b.............
	...
    3726:	71 06 0f 04 00 00 00 00 00 00 00 00 00 00 00 00     q...............
	...
    3746:	1d 04 5d 06 06 05 00 00 00 00 00 00 00 00 00 00     ..].............
	...
    3766:	70 05 10 04 00 00 00 00 00 00 00 00 00 00 00 00     p...............
	...
    3786:	1c 04 0d 05 08 02 48 05 07 07 00 00 00 00 00 00     ......H.........
	...
    37a6:	6f 07 11 04 00 00 00 00 00 00 00 00 00 00 00 00     o...............
	...
    37c6:	1b 04 0d 07 08 09 50 07 00 00 00 00 00 00 00 00     ......P.........
	...
    37e6:	6e 07 12 09 00 00 00 00 00 00 00 00 00 00 00 00     n...............
	...
    3806:	1a 09 66 07 00 00 00 00 00 00 00 00 00 00 00 00     ..f.............
	...
    3826:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3846:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3866:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3886:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    38a6:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    38c6:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    38e6:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3906:	2a 07 02 02 08 0a 4c 07 00 00 00 00 00 00 00 00     *.....L.........
	...
    3926:	21 07 08 02 57 07 00 00 00 00 00 00 00 00 00 00     !...W...........
	...
    3946:	29 07 0a 04 4d 07 00 00 00 00 00 00 00 00 00 00     )...M...........
	...
    3966:	1f 07 01 02 08 04 02 02 56 07 00 00 00 00 00 00     ........V.......
	...
    3986:	28 07 0a 09 4e 07 00 00 00 00 00 00 00 00 00 00     (...N...........
	...
    39a6:	1d 07 01 02 0b 04 02 02 55 07 00 00 00 00 00 00     ........U.......
	...
    39c6:	19 07 08 02 13 07 08 02 3f 07 01 4c 04 07 00 00     ........?..L....
	...
    39e6:	1b 07 01 02 0e 04 01 02 1a 07 01 4c 3a 07 00 00     ...........L:...
	...
    3a06:	18 07 08 09 13 07 08 09 05 07 01 4c 39 07 01 4d     ...........L9..M
    3a16:	01 4e 01 4f 03 07 00 00 00 00 00 00 00 00 00 00     .N.O............
    3a26:	15 07 05 02 10 04 01 02 19 07 01 4d 01 4e 01 4f     ...........M.N.O
    3a36:	20 07 12 02 06 0a 01 02 00 00 00 00 00 00 00 00      ...............
    3a46:	01 02 06 0a 02 02 06 0a 30 07 01 4d 01 4e 01 4f     ........0..M.N.O
    3a56:	35 07 01 4f 01 4e 01 50 06 07 00 00 00 00 00 00     5..O.N.P........
    3a66:	13 07 01 02 16 04 01 02 16 07 01 4f 01 4e 01 50     ...........O.N.P
    3a76:	21 07 01 02 1a 04 00 00 00 00 00 00 00 00 00 00     !...............
    3a86:	0e 04 01 02 2d 07 01 4f 01 4e 01 50 39 07 01 50     ....-..O.N.P9..P
    3a96:	01 4f 01 4e 05 07 00 00 00 00 00 00 00 00 00 00     .O.N............
    3aa6:	11 07 01 02 18 04 01 02 17 07 01 50 01 4f 01 4e     ...........P.O.N
    3ab6:	1e 07 01 02 1c 04 00 00 00 00 00 00 00 00 00 00     ................
    3ac6:	0e 04 01 02 2e 07 01 50 01 4f 01 4e 35 07 01 4e     .......P.O.N5..N
    3ad6:	01 4f 01 50 08 07 00 00 00 00 00 00 00 00 00 00     .O.P............
    3ae6:	0f 07 01 02 1a 04 01 02 14 07 01 4e 01 4f 01 50     ...........N.O.P
    3af6:	1f 07 01 02 1e 04 00 00 00 00 00 00 00 00 00 00     ................
    3b06:	0e 04 01 02 2b 07 01 4e 01 4f 01 50 39 07 01 51     ....+..N.O.P9..Q
    3b16:	09 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3b26:	0d 07 01 02 1c 04 01 02 15 07 01 51 1e 07 01 02     ...........Q....
    3b36:	20 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00      ...............
    3b46:	0e 04 01 02 2c 07 01 51 2e 07 16 02 00 00 00 00     ....,..Q........
	...
    3b66:	0c 02 1e 04 17 02 06 0a 02 02 06 0a 02 02 06 0a     ................
    3b76:	07 02 22 04 00 00 00 00 00 00 00 00 00 00 00 00     ..".............
    3b86:	0e 04 5b 02 17 04 00 00 00 00 00 00 00 00 00 00     ..[.............
	...
    3ba6:	80 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3bc6:	68 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     h...............
	...

00003be6 <map_level_forest>:
    3be6:	01 ff 01 1a 76 06 08 04 00 00 00 00 00 00 00 00     ....v...........
	...
    3c06:	24 04 5c 06 00 00 00 00 00 00 00 00 00 00 00 00     $.\.............
	...
    3c26:	06 06 01 08 65 06 01 08 0a 06 09 04 00 00 00 00     ....e...........
	...
    3c46:	23 04 2f 06 01 08 2d 06 00 00 00 00 00 00 00 00     #./...-.........
	...
    3c66:	76 06 0a 04 00 00 00 00 00 00 00 00 00 00 00 00     v...............
	...
    3c86:	22 04 5e 06 00 00 00 00 00 00 00 00 00 00 00 00     ".^.............
	...
    3ca6:	1c 06 01 08 21 06 01 08 36 06 0b 04 00 00 00 00     ....!...6.......
	...
    3cc6:	21 04 27 06 01 08 24 06 01 08 12 06 00 00 00 00     !.'...$.........
	...
    3ce6:	2e 06 01 08 33 06 01 08 11 06 0c 04 00 00 00 00     ....3...........
	...
    3d06:	20 04 60 06 00 00 00 00 00 00 00 00 00 00 00 00      .`.............
	...
    3d26:	4c 06 01 08 26 06 0d 04 00 00 00 00 00 00 00 00     L...&...........
	...
    3d46:	1f 04 13 06 01 08 1d 06 01 08 2f 06 00 00 00 00     ........../.....
	...
    3d66:	08 06 01 08 69 06 0e 04 00 00 00 00 00 00 00 00     ....i...........
	...
    3d86:	1e 04 62 06 00 00 00 00 00 00 00 00 00 00 00 00     ..b.............
	...
    3da6:	71 06 0f 04 00 00 00 00 00 00 00 00 00 00 00 00     q...............
	...
    3dc6:	1d 04 5d 06 06 05 00 00 00 00 00 00 00 00 00 00     ..].............
	...
    3de6:	70 05 10 04 00 00 00 00 00 00 00 00 00 00 00 00     p...............
	...
    3e06:	1c 04 0d 05 08 02 48 05 07 07 00 00 00 00 00 00     ......H.........
	...
    3e26:	6f 07 11 04 00 00 00 00 00 00 00 00 00 00 00 00     o...............
	...
    3e46:	1b 04 0d 07 08 09 50 07 00 00 00 00 00 00 00 00     ......P.........
	...
    3e66:	6e 07 12 09 00 00 00 00 00 00 00 00 00 00 00 00     n...............
	...
    3e86:	1a 09 66 07 00 00 00 00 00 00 00 00 00 00 00 00     ..f.............
	...
    3ea6:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3ec6:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3ee6:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3f06:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3f26:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3f46:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3f66:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3f86:	2a 07 02 02 08 0a 4c 07 00 00 00 00 00 00 00 00     *.....L.........
	...
    3fa6:	21 07 08 02 57 07 00 00 00 00 00 00 00 00 00 00     !...W...........
	...
    3fc6:	29 07 0a 04 4d 07 00 00 00 00 00 00 00 00 00 00     )...M...........
	...
    3fe6:	1f 07 01 02 08 04 02 02 56 07 00 00 00 00 00 00     ........V.......
	...
    4006:	28 07 0a 09 4e 07 00 00 00 00 00 00 00 00 00 00     (...N...........
	...
    4026:	1d 07 01 02 0b 04 02 02 55 07 00 00 00 00 00 00     ........U.......
	...
    4046:	19 07 08 02 13 07 08 02 3f 07 01 4c 04 07 00 00     ........?..L....
	...
    4066:	1b 07 01 02 0e 04 01 02 1a 07 01 4c 3a 07 00 00     ...........L:...
	...
    4086:	18 07 08 09 13 07 08 09 05 07 01 4c 39 07 01 4d     ...........L9..M
    4096:	01 4e 01 4f 03 07 00 00 00 00 00 00 00 00 00 00     .N.O............
    40a6:	15 07 05 02 10 04 01 02 19 07 01 4d 01 4e 01 4f     ...........M.N.O
    40b6:	20 07 12 02 06 0a 01 02 00 00 00 00 00 00 00 00      ...............
    40c6:	01 02 06 0a 02 02 06 0a 30 07 01 4d 01 4e 01 4f     ........0..M.N.O
    40d6:	35 07 01 4f 01 4e 01 50 06 07 00 00 00 00 00 00     5..O.N.P........
    40e6:	13 07 01 02 16 04 01 02 16 07 01 4f 01 4e 01 50     ...........O.N.P
    40f6:	21 07 01 02 1a 04 00 00 00 00 00 00 00 00 00 00     !...............
    4106:	0e 04 01 02 2d 07 01 4f 01 4e 01 50 39 07 01 50     ....-..O.N.P9..P
    4116:	01 4f 01 4e 05 07 00 00 00 00 00 00 00 00 00 00     .O.N............
    4126:	11 07 01 02 18 04 01 02 17 07 01 50 01 4f 01 4e     ...........P.O.N
    4136:	1e 07 01 02 1c 04 00 00 00 00 00 00 00 00 00 00     ................
    4146:	0e 04 01 02 2e 07 01 50 01 4f 01 4e 35 07 01 4e     .......P.O.N5..N
    4156:	01 4f 01 50 08 07 00 00 00 00 00 00 00 00 00 00     .O.P............
    4166:	0f 07 01 02 1a 04 01 02 14 07 01 4e 01 4f 01 50     ...........N.O.P
    4176:	1f 07 01 02 1e 04 00 00 00 00 00 00 00 00 00 00     ................
    4186:	0e 04 01 02 2b 07 01 4e 01 4f 01 50 39 07 01 51     ....+..N.O.P9..Q
    4196:	09 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    41a6:	0d 07 01 02 1c 04 01 02 15 07 01 51 1e 07 01 02     ...........Q....
    41b6:	20 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00      ...............
    41c6:	0e 04 01 02 2c 07 01 51 2e 07 16 02 00 00 00 00     ....,..Q........
	...
    41e6:	0c 02 1e 04 17 02 06 0a 02 02 06 0a 02 02 06 0a     ................
    41f6:	07 02 22 04 00 00 00 00 00 00 00 00 00 00 00 00     ..".............
    4206:	0e 04 5b 02 17 04 00 00 00 00 00 00 00 00 00 00     ..[.............
	...
    4226:	80 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4246:	68 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     h...............
	...

00004266 <map_level_fire>:
    4266:	01 ff 01 1a 7e 57 00 00 00 00 00 00 00 00 00 00     ....~W..........
	...
    4286:	80 57 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .W..............
	...
    42a6:	80 57 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .W..............
	...
    42c6:	80 57 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .W..............
	...
    42e6:	80 57 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .W..............
	...
    4306:	80 57 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .W..............
	...
    4326:	80 57 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .W..............
	...
    4346:	80 57 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .W..............
	...
    4366:	80 57 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .W..............
	...
    4386:	80 57 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .W..............
	...
    43a6:	80 57 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .W..............
	...
    43c6:	80 57 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .W..............
	...
    43e6:	80 57 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .W..............
	...
    4406:	80 57 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .W..............
	...
    4426:	80 57 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .W..............
	...
    4446:	7a 57 06 0b 00 00 00 00 00 00 00 00 00 00 00 00     zW..............
	...
    4466:	80 0b 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4486:	79 0b 07 58 00 00 00 00 00 00 00 00 00 00 00 00     y..X............
	...
    44a6:	19 58 01 59 01 5a 01 5b 40 58 01 59 01 5a 01 5b     .X.Y.Z.[@X.Y.Z.[
    44b6:	21 58 00 00 00 00 00 00 00 00 00 00 00 00 00 00     !X..............
    44c6:	10 58 01 59 01 5a 01 5b 6d 58 00 00 00 00 00 00     .X.Y.Z.[mX......
	...
    44e6:	01 59 01 5a 01 5b 14 58 01 5c 03 55 01 5d 17 58     .Y.Z.[.X.\.U.].X
    44f6:	01 59 01 5a 01 5b 24 58 01 5c 03 55 01 5d 21 58     .Y.Z.[$X.\.U.]!X
    4506:	0e 58 01 5c 03 55 01 5d 15 58 01 59 01 5a 01 5b     .X.\.U.].X.Y.Z.[
    4516:	3a 58 01 59 01 5a 01 5b 16 58 01 5c 01 55 00 00     :X.Y.Z.[.X.\.U..
    4526:	02 55 01 5d 2e 58 01 5c 03 55 01 5d 4a 58 00 00     .U.].X.\.U.]JX..
	...
    4546:	26 58 01 5c 03 55 01 5d 38 58 01 5c 03 55 01 5d     &X.\.U.]8X.\.U.]
    4556:	18 58 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .X..............
    4566:	80 58 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .X..............
	...
    4586:	80 58 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .X..............
	...
    45a6:	80 58 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .X..............
	...
    45c6:	80 58 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .X..............
	...
    45e6:	47 58 06 0d 33 58 00 00 00 00 00 00 00 00 00 00     GX..3X..........
	...
    4606:	01 0c 07 58 01 0c 77 58 00 00 00 00 00 00 00 00     ...X..wX........
	...
    4626:	7e 58 02 0c 00 00 00 00 00 00 00 00 00 00 00 00     ~X..............
	...
    4646:	07 0e 02 0c 77 58 00 00 00 00 00 00 00 00 00 00     ....wX..........
	...
    4666:	7c 58 04 0c 00 00 00 00 00 00 00 00 00 00 00 00     |X..............
	...
    4686:	05 0e 04 0c 77 58 00 00 00 00 00 00 00 00 00 00     ....wX..........
	...
    46a6:	7a 58 06 0c 00 00 00 00 00 00 00 00 00 00 00 00     zX..............
	...
    46c6:	09 0c 77 58 00 00 00 00 00 00 00 00 00 00 00 00     ..wX............
	...
    46e6:	78 58 08 0c 00 00 00 00 00 00 00 00 00 00 00 00     xX..............
	...
    4706:	09 0c 77 58 00 00 00 00 00 00 00 00 00 00 00 00     ..wX............
	...
    4726:	2c 58 06 0d 07 58 06 0d 0d 58 06 5e 24 58 0a 0c     ,X...X...X.^$X..
	...
    4746:	09 0c 77 58 00 00 00 00 00 00 00 00 00 00 00 00     ..wX............
	...
    4766:	4b 58 06 5f 23 58 01 0d 0b 0c 00 00 00 00 00 00     KX._#X..........
	...
    4786:	08 0c 01 0d 22 58 02 0c 07 0e 02 0c 0b 58 02 0c     ...."X.......X..
    4796:	07 0e 02 0c 34 58 00 00 00 00 00 00 00 00 00 00     ....4X..........
    47a6:	72 58 01 0d 0d 0c 00 00 00 00 00 00 00 00 00 00     rX..............
	...
    47c6:	08 0c 01 0d 20 58 04 0c 05 0e 04 0c 09 58 04 0c     .... X.......X..
    47d6:	05 0e 04 0c 34 58 00 00 00 00 00 00 00 00 00 00     ....4X..........
    47e6:	70 58 01 0d 0f 0c 00 00 00 00 00 00 00 00 00 00     pX..............
	...
    4806:	08 0c 01 0d 1e 58 0f 0c 07 58 0f 0c 34 58 00 00     .....X...X..4X..
	...
    4826:	6e 58 01 0d 11 0c 00 00 00 00 00 00 00 00 00 00     nX..............
	...
    4846:	08 0c 01 0d 1c 58 11 0c 05 58 11 0c 1e 58 11 0d     .....X...X...X..
    4856:	05 58 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .X..............
    4866:	03 58 02 0d 08 58 02 0d 08 58 02 0d 08 58 39 0d     .X...X...X...X9.
    4876:	08 58 02 0d 08 58 01 0d 13 0c 00 00 00 00 00 00     .X...X..........
    4886:	08 0c 08 58 02 0d 08 58 0a 0d 11 0c 05 0d 11 0c     ...X...X........
    4896:	1e 0d 11 0c 06 0e 00 00 00 00 00 00 00 00 00 00     ................
    48a6:	02 0e 02 0c 08 0e 02 0c 08 0e 02 0c 08 0e 39 0c     ..............9.
    48b6:	08 0e 02 0c 08 0e 15 0c 00 00 00 00 00 00 00 00     ................
    48c6:	07 0c 08 0e 02 0c 08 0e 4f 0c 00 00 00 00 00 00     ........O.......
	...

000048e6 <map_level_ice>:
    48e6:	01 ff 01 1a 76 06 08 04 00 00 00 00 00 00 00 00     ....v...........
	...
    4906:	24 04 5c 06 00 00 00 00 00 00 00 00 00 00 00 00     $.\.............
	...
    4926:	06 06 01 08 65 06 01 08 0a 06 09 04 00 00 00 00     ....e...........
	...
    4946:	23 04 2f 06 01 08 2d 06 00 00 00 00 00 00 00 00     #./...-.........
	...
    4966:	76 06 0a 04 00 00 00 00 00 00 00 00 00 00 00 00     v...............
	...
    4986:	22 04 5e 06 00 00 00 00 00 00 00 00 00 00 00 00     ".^.............
	...
    49a6:	1c 06 01 08 21 06 01 08 36 06 0b 04 00 00 00 00     ....!...6.......
	...
    49c6:	21 04 27 06 01 08 24 06 01 08 12 06 00 00 00 00     !.'...$.........
	...
    49e6:	2e 06 01 08 33 06 01 08 11 06 0c 04 00 00 00 00     ....3...........
	...
    4a06:	20 04 60 06 00 00 00 00 00 00 00 00 00 00 00 00      .`.............
	...
    4a26:	4c 06 01 08 26 06 0d 04 00 00 00 00 00 00 00 00     L...&...........
	...
    4a46:	1f 04 13 06 01 08 1d 06 01 08 2f 06 00 00 00 00     ........../.....
	...
    4a66:	08 06 01 08 69 06 0e 04 00 00 00 00 00 00 00 00     ....i...........
	...
    4a86:	1e 04 62 06 00 00 00 00 00 00 00 00 00 00 00 00     ..b.............
	...
    4aa6:	71 06 0f 04 00 00 00 00 00 00 00 00 00 00 00 00     q...............
	...
    4ac6:	1d 04 5d 06 06 05 00 00 00 00 00 00 00 00 00 00     ..].............
	...
    4ae6:	70 05 10 04 00 00 00 00 00 00 00 00 00 00 00 00     p...............
	...
    4b06:	1c 04 0d 05 08 02 48 05 07 07 00 00 00 00 00 00     ......H.........
	...
    4b26:	6f 07 11 04 00 00 00 00 00 00 00 00 00 00 00 00     o...............
	...
    4b46:	1b 04 0d 07 08 09 50 07 00 00 00 00 00 00 00 00     ......P.........
	...
    4b66:	6e 07 12 09 00 00 00 00 00 00 00 00 00 00 00 00     n...............
	...
    4b86:	1a 09 66 07 00 00 00 00 00 00 00 00 00 00 00 00     ..f.............
	...
    4ba6:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4bc6:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4be6:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4c06:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4c26:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4c46:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4c66:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4c86:	2a 07 02 02 08 0a 4c 07 00 00 00 00 00 00 00 00     *.....L.........
	...
    4ca6:	21 07 08 02 57 07 00 00 00 00 00 00 00 00 00 00     !...W...........
	...
    4cc6:	29 07 0a 04 4d 07 00 00 00 00 00 00 00 00 00 00     )...M...........
	...
    4ce6:	1f 07 01 02 08 04 02 02 56 07 00 00 00 00 00 00     ........V.......
	...
    4d06:	28 07 0a 09 4e 07 00 00 00 00 00 00 00 00 00 00     (...N...........
	...
    4d26:	1d 07 01 02 0b 04 02 02 55 07 00 00 00 00 00 00     ........U.......
	...
    4d46:	19 07 08 02 13 07 08 02 3f 07 01 4c 04 07 00 00     ........?..L....
	...
    4d66:	1b 07 01 02 0e 04 01 02 1a 07 01 4c 3a 07 00 00     ...........L:...
	...
    4d86:	18 07 08 09 13 07 08 09 05 07 01 4c 39 07 01 4d     ...........L9..M
    4d96:	01 4e 01 4f 03 07 00 00 00 00 00 00 00 00 00 00     .N.O............
    4da6:	15 07 05 02 10 04 01 02 19 07 01 4d 01 4e 01 4f     ...........M.N.O
    4db6:	20 07 12 02 06 0a 01 02 00 00 00 00 00 00 00 00      ...............
    4dc6:	01 02 06 0a 02 02 06 0a 30 07 01 4d 01 4e 01 4f     ........0..M.N.O
    4dd6:	35 07 01 4f 01 4e 01 50 06 07 00 00 00 00 00 00     5..O.N.P........
    4de6:	13 07 01 02 16 04 01 02 16 07 01 4f 01 4e 01 50     ...........O.N.P
    4df6:	21 07 01 02 1a 04 00 00 00 00 00 00 00 00 00 00     !...............
    4e06:	0e 04 01 02 2d 07 01 4f 01 4e 01 50 39 07 01 50     ....-..O.N.P9..P
    4e16:	01 4f 01 4e 05 07 00 00 00 00 00 00 00 00 00 00     .O.N............
    4e26:	11 07 01 02 18 04 01 02 17 07 01 50 01 4f 01 4e     ...........P.O.N
    4e36:	1e 07 01 02 1c 04 00 00 00 00 00 00 00 00 00 00     ................
    4e46:	0e 04 01 02 2e 07 01 50 01 4f 01 4e 35 07 01 4e     .......P.O.N5..N
    4e56:	01 4f 01 50 08 07 00 00 00 00 00 00 00 00 00 00     .O.P............
    4e66:	0f 07 01 02 1a 04 01 02 14 07 01 4e 01 4f 01 50     ...........N.O.P
    4e76:	1f 07 01 02 1e 04 00 00 00 00 00 00 00 00 00 00     ................
    4e86:	0e 04 01 02 2b 07 01 4e 01 4f 01 50 39 07 01 51     ....+..N.O.P9..Q
    4e96:	09 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4ea6:	0d 07 01 02 1c 04 01 02 15 07 01 51 1e 07 01 02     ...........Q....
    4eb6:	20 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00      ...............
    4ec6:	0e 04 01 02 2c 07 01 51 2e 07 16 02 00 00 00 00     ....,..Q........
	...
    4ee6:	0c 02 1e 04 17 02 06 0a 02 02 06 0a 02 02 06 0a     ................
    4ef6:	07 02 22 04 00 00 00 00 00 00 00 00 00 00 00 00     ..".............
    4f06:	0e 04 5b 02 17 04 00 00 00 00 00 00 00 00 00 00     ..[.............
	...
    4f26:	80 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4f46:	68 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     h...............
	...

00004f66 <tiles_data>:
	...
    4fa6:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4fb6:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    4fc6:	ff f8 fb f8 fb f8 f8 fd ff fb f8 f8 fb f8 f8 f8     ................
    4fd6:	ff f8 f8 fb f8 f8 f8 f8 ff f8 f8 f8 f8 f8 f8 f8     ................
    4fe6:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4ff6:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    5006:	fd f8 fb f8 fb f8 f8 fd f8 fb f8 f8 fb f8 f8 f8     ................
    5016:	f8 f8 f8 fb f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    5026:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5036:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    5046:	fd f8 fb f8 fb f8 f8 ff f8 fb f8 f8 fb f8 f8 ff     ................
    5056:	f8 f8 f8 fb f8 f8 f8 ff f8 f8 f8 f8 f8 f8 f8 ff     ................
    5066:	fa f8 f8 f8 f8 f8 f8 f8 f8 f8 fb f8 f8 f8 fb f8     ................
    5076:	f8 f8 fb f8 fb fb f8 f8 f8 f8 f8 fb f8 f8 f8 f8     ................
    5086:	f8 f8 fb f8 fb f8 f8 f8 f8 fb f8 f8 fb f8 f8 f8     ................
    5096:	f8 f8 f8 fb f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    50a6:	ac ac ac ac ac ac ac ac ac ac ac ac ac ac ac ac     ................
    50b6:	ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad     ................
    50c6:	ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae     ................
    50d6:	af af af af af af af af af af af af af af af af     ................
    50e6:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    50f6:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    5106:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    5116:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    5126:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    5136:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    5146:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    5156:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    5166:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    5176:	ab ab ab ab ab ab ab ab ab ad ad ad ad ad ad ab     ................
    5186:	ae ae ae ae ae ae ae ae ab ae ae ae ae ae ae ab     ................
    5196:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    51a6:	ff ff ff ff ff ff ff a3 ff ff ff ff ff ff ff a3     ................
    51b6:	a3 ff ff ff ff ff a3 a0 a3 ff ff ff ff ff a3 a0     ................
    51c6:	a0 a3 ff ff ff a3 a0 a0 a0 a3 ff ff ff a3 a0 a0     ................
    51d6:	a0 a0 a3 ff a3 a0 a0 a0 a0 a0 a3 ff a3 a0 a0 a0     ................
    51e6:	a0 a0 a0 a3 ff a3 a0 a0 a0 a0 a0 a3 ff a3 a0 a0     ................
    51f6:	a0 a0 a3 ff ff ff a3 a0 a0 a0 a3 ff ff ff a3 a0     ................
    5206:	a0 a3 ff ff ff ff ff a3 a0 a3 ff ff ff ff ff a3     ................
    5216:	a3 ff ff ff ff ff ff ff a3 ff ff ff ff ff ff ff     ................
    5226:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    5236:	06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    5246:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5256:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    5266:	02 02 02 02 02 02 02 02 02 02 0b 02 02 02 0b 02     ................
    5276:	02 0b 02 0b 02 0b 02 0b 02 02 0b 02 0b 02 0b 02     ................
    5286:	02 0b 02 02 02 0b 02 02 02 02 0b 02 0b 02 0b 02     ................
    5296:	02 0b 02 0b 02 0b 02 02 02 02 0b 02 02 02 0b 02     ................
    52a6:	5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c     \\\\\\\\\\\\\\\\
    52b6:	02 5c 02 5c 02 5c 02 5c 02 02 0b 02 0b 02 0b 02     .\.\.\.\........
    52c6:	02 0b 02 02 02 0b 02 02 02 02 0b 02 0b 02 0b 02     ................
    52d6:	02 0b 02 0b 02 0b 02 02 02 02 0b 02 02 02 0b 02     ................
    52e6:	27 1f 27 1f 1f 1f 27 1f 1f 1f 1f 27 1f 27 1f 1f     '.'...'....'.'..
    52f6:	27 1f 27 1f 1f 2f 27 1f 1f 27 2f 1f 27 1f 1f 1f     '.'../'..'/.'...
    5306:	1f 1f 27 1f 2f 1f 27 1f 1f 27 1f 27 1f 1f 2f 1f     ..'./.'..'.'../.
    5316:	1f 1f 2f 1f 1f 27 1f 27 1f 1f 1f 27 1f 1f 1f 1f     ../..'.'...'....
    5326:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    5336:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    5346:	bf bf bf bf 00 00 00 00 bf bf bf bf 00 00 00 00     ................
    5356:	bf bf bf bf 00 00 00 00 bf bf bf bf 00 00 00 00     ................
    5366:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    5376:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
	...
    53a6:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    53b6:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    53c6:	00 00 00 00 bf bf bf bf 00 00 00 00 bf bf bf bf     ................
    53d6:	00 00 00 00 bf bf bf bf 00 00 00 00 bf bf bf bf     ................
	...
    53fe:	00 00 00 e3 00 00 00 00 00 00 e3 ff e3 00 00 00     ................
    540e:	00 00 00 e3 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    543e:	00 00 00 d2 00 00 00 00 00 00 d2 e3 d2 00 00 00     ................
    544e:	00 00 00 d2 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5486:	02 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00     ................
    5496:	02 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00     ................
    54a6:	bf bf bf bf 00 00 00 00 bf bf bf bf 00 00 00 00     ................
    54b6:	bf bf bf bf 00 00 00 00 bf bf bf bf 00 00 00 00     ................
    54c6:	bf bf bf bf 00 00 00 00 bf bf bf bf 00 00 00 00     ................
    54d6:	bf bf bf bf 00 00 00 00 bf bf bf bf 00 00 00 00     ................
    54e6:	00 00 00 00 bf bf bf bf 00 00 00 00 bf bf bf bf     ................
    54f6:	00 00 00 00 bf bf bf bf 00 00 00 00 bf bf bf bf     ................
    5506:	00 00 00 00 bf bf bf bf 00 00 00 00 bf bf bf bf     ................
    5516:	00 00 00 00 bf bf bf bf 00 00 00 00 bf bf bf bf     ................
    5526:	02 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00     ................
    5536:	02 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00     ................
    5546:	02 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00     ................
    5556:	02 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00     ................
    5566:	02 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00     ................
    5576:	02 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00     ................
    5586:	02 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00     ................
    5596:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    55b2:	00 00 00 02 00 00 00 00 00 00 00 02 00 00 00 00     ................
    55c2:	00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    55e6:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    55f6:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    5606:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    5616:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
	...
    5632:	00 00 96 96 00 00 00 00 00 96 96 96 00 00 00 00     ................
    5642:	96 96 96 96 00 00 00 96 96 96 96 96 00 00 96 96     ................
    5652:	96 96 96 96 00 00 96 96 96 96 96 96 00 96 96 96     ................
    5662:	96 96 96 96 00 96 96 96 96 96 96 00 96 96 96 96     ................
    5672:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    5682:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    5692:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    56a2:	96 96 96 96 00 00 00 00 00 00 00 00 96 96 00 00     ................
    56b2:	00 00 00 00 96 96 96 00 00 00 00 00 96 96 96 96     ................
    56c2:	00 00 00 00 96 96 96 96 96 00 00 00 96 96 96 96     ................
    56d2:	96 96 00 00 96 96 96 96 96 96 00 00 96 96 96 96     ................
    56e2:	96 96 96 00 00 96 96 96 95 96 96 96 00 96 96 96     ................
    56f2:	95 96 96 96 96 96 96 96 96 95 96 96 96 96 96 96     ................
    5702:	96 95 96 96 96 96 96 96 96 96 95 96 96 96 96 96     ................
    5712:	96 bf 95 96 95 84 96 96 96 bf 96 95 8c 83 83 8c     ................
    5722:	96 bf 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    5732:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    5742:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    5752:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    5762:	96 96 96 96 96 96 96 95 96 96 96 00 96 96 96 95     ................
    5772:	96 96 96 00 96 96 95 96 96 96 96 96 96 96 95 96     ................
    5782:	96 96 96 96 96 95 96 96 96 96 96 96 96 95 96 96     ................
    5792:	96 96 95 96 95 96 96 96 96 95 95 95 96 96 96 96     ................
    57a2:	94 8c 8c 95 82 82 82 82 82 bf 96 96 00 d8 d8 d8     ................
    57b2:	bf ff bf 82 00 d8 d8 bf ff ff ff bf 00 d8 bf ff     ................
    57c2:	ff ff ff ff bf bf ff ff ff ff ff ff 00 00 bf ff     ................
    57d2:	ff ff ff ff 00 00 94 bf ff ff ff bf 00 00 00 8c     ................
    57e2:	bf ff bf d8 96 96 96 96 96 96 96 96 83 83 8c 8c     ................
    57f2:	8c 8c 8c 83 d8 d8 d8 d8 d8 d8 d8 d8 bf d8 d8 d8     ................
    5802:	d8 d8 d8 d8 ff bf bf d8 d8 d8 d8 d8 bf d8 d8 d8     ................
    5812:	d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8     ................
    5822:	d8 d8 82 82 96 96 8c 83 83 8c 8c 8c 83 82 83 83     ................
    5832:	83 83 8c 00 82 82 82 83 83 83 83 00 82 82 82 83     ................
    5842:	83 83 83 00 d8 82 82 83 83 83 83 00 82 82 82 83     ................
    5852:	83 83 00 00 82 82 83 83 83 95 00 00 82 82 83 83     ................
    5862:	95 00 00 00 40 40 40 40 40 40 40 40 40 40 40 40     ....@@@@@@@@@@@@
    5872:	40 40 40 40 41 41 41 41 41 41 41 41 41 41 41 41     @@@@AAAAAAAAAAAA
    5882:	41 41 41 41 42 42 42 42 42 42 42 42 42 42 42 42     AAAABBBBBBBBBBBB
    5892:	42 42 42 42 43 43 43 43 43 43 43 43 43 43 43 43     BBBBCCCCCCCCCCCC
    58a2:	43 43 43 43 00 00 00 96 95 ff d8 d8 00 00 00 00     CCCC............
    58b2:	96 ff 83 82 00 00 00 00 00 ff 96 96 00 00 00 00     ................
    58c2:	00 bf 96 96 00 00 00 00 00 bf 96 96 00 00 00 00     ................
    58d2:	00 bf 96 96 00 00 00 00 00 bf 00 00 00 00 00 00     ................
    58e2:	00 77 00 00 d8 d8 d8 82 82 82 82 82 82 82 82 82     .w..............
    58f2:	82 83 83 83 8c 8c 83 83 83 83 8c 95 96 96 96 96     ................
    5902:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    5912:	96 96 96 96 96 96 96 96 96 96 96 96 00 96 96 96     ................
    5922:	96 96 96 00 83 83 8c 95 96 00 00 00 83 8c 96 96     ................
    5932:	00 00 00 00 96 96 96 00 00 00 00 00 96 96 96 00     ................
    5942:	00 00 00 00 96 96 00 00 00 00 00 00 96 96 00 00     ................
	...
    5966:	44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44     DDDDDDDDDDDDDDDD
    5976:	45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45     EEEEEEEEEEEEEEEE
    5986:	46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46     FFFFFFFFFFFFFFFF
    5996:	47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47     GGGGGGGGGGGGGGGG
    59a6:	00 00 00 00 00 77 00 00 00 00 00 00 00 77 00 00     .....w.......w..
    59b6:	00 00 00 00 00 77 00 00 00 00 00 00 00 77 00 00     .....w.......w..
    59c6:	00 00 00 00 00 77 00 00 00 00 00 00 00 77 00 00     .....w.......w..
	...
    59ee:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    59fe:	00 3f 3f 2f 3f 3f 3f 2f 00 3f 3f 3f 2f 3f 3f 2f     .??/???/.???/??/
    5a0e:	00 3f 3f 2f 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??/.??/..????/.
	...
    5a2e:	00 00 00 3f 3f 2f 00 00 00 00 3f 3f 3f 2f 00 00     ...??/....???/..
    5a3e:	00 00 00 3f 3f 2f 00 00 00 00 00 3f 3f 2f 00 00     ...??/.....??/..
    5a4e:	00 00 00 3f 3f 2f 00 00 00 3f 3f 3f 3f 3f 3f 2f     ...??/...??????/
	...
    5a6e:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 00 00 3f 3f 2f     ..????/..??..??/
    5a7e:	00 00 00 00 3f 3f 2f 00 00 00 00 3f 3f 2f 00 00     ....??/....??/..
    5a8e:	00 00 3f 3f 2f 00 00 00 00 3f 3f 3f 3f 3f 3f 2f     ..??/....??????/
	...
    5aae:	00 3f 3f 3f 3f 3f 3f 2f 00 00 00 00 3f 3f 2f 00     .??????/....??/.
    5abe:	00 00 00 3f 3f 2f 00 00 00 00 00 00 3f 3f 2f 00     ...??/......??/.
    5ace:	00 3f 3f 00 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??..??/..????/.
	...
    5af2:	3f 3f 2f 00 00 00 00 3f 3f 3f 2f 00 00 00 3f 3f     ??/....???/...??
    5b02:	3f 3f 2f 00 00 3f 3f 00 3f 3f 2f 00 00 3f 3f 3f     ??/..??.??/..???
    5b12:	3f 3f 3f 2f 00 00 00 00 3f 3f 2f 00 00 00 00 00     ???/....??/.....
	...
    5b2e:	00 3f 3f 3f 3f 3f 3f 2f 00 3f 3f 2f 00 00 00 00     .??????/.??/....
    5b3e:	00 3f 3f 3f 3f 3f 2f 00 00 00 00 00 00 3f 3f 2f     .?????/......??/
    5b4e:	00 3f 3f 00 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??..??/..????/.
	...
    5b6e:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 00 00 00     ..????/..??/....
    5b7e:	00 3f 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     .?????/..??/.??/
    5b8e:	00 3f 3f 2f 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??/.??/..????/.
	...
    5bae:	00 3f 3f 3f 3f 3f 3f 2f 00 00 00 00 00 3f 3f 2f     .??????/.....??/
    5bbe:	00 00 00 00 3f 3f 2f 00 00 00 00 3f 3f 2f 00 00     ....??/....??/..
    5bce:	00 00 3f 3f 2f 00 00 00 00 00 3f 3f 2f 00 00 00     ..??/.....??/...
	...
    5bee:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    5bfe:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    5c0e:	00 3f 3f 2f 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??/.??/..????/.
	...
    5c2e:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    5c3e:	00 00 3f 3f 3f 3f 3f 2f 00 00 00 00 00 3f 3f 2f     ..?????/.....??/
    5c4e:	00 00 00 00 3f 3f 2f 00 00 00 3f 3f 3f 2f 00 00     ....??/...???/..
	...
    5c6e:	00 00 00 ff ff e3 00 00 00 00 ff ff ff ff e3 00     ................
    5c7e:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    5c8e:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    5cae:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    5cbe:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    5cce:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff e3 00     ................
	...
    5cee:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    5cfe:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    5d0e:	00 ff ff e3 00 ff ff e3 00 00 ff ff ff ff e3 00     ................
	...
    5d2e:	00 ff ff ff ff e3 00 00 00 ff ff e3 ff ff e3 00     ................
    5d3e:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    5d4e:	00 ff ff e3 ff ff e3 00 00 ff ff ff ff e3 00 00     ................
	...
    5d6e:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 00 00 00     ................
    5d7e:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 00 00 00     ................
    5d8e:	00 ff ff e3 00 00 00 00 00 ff ff ff ff ff ff e3     ................
	...
    5dae:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 00 00 00     ................
    5dbe:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 00 00 00     ................
    5dce:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
	...
    5dee:	00 00 ff ff ff ff ff e3 00 ff ff e3 00 00 00 00     ................
    5dfe:	00 ff ff e3 00 00 00 00 00 ff ff e3 ff ff ff e3     ................
    5e0e:	00 ff ff e3 00 ff ff e3 00 00 ff ff ff ff ff e3     ................
	...
    5e2e:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    5e3e:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 ff ff e3     ................
    5e4e:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    5e6e:	00 ff ff ff ff ff ff e3 00 00 00 ff ff e3 00 00     ................
    5e7e:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
    5e8e:	00 00 00 ff ff e3 00 00 00 ff ff ff ff ff ff e3     ................
	...
    5eb2:	ff ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    5ec2:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 ff ff 00     ................
    5ed2:	00 ff ff e3 00 00 ff ff ff ff e3 00 00 00 00 00     ................
	...
    5eee:	00 ff ff e3 00 ff ff e3 00 ff ff e3 ff ff e3 00     ................
    5efe:	00 ff ff ff ff e3 00 00 00 ff ff ff ff e3 00 00     ................
    5f0e:	00 ff ff e3 ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
	...
    5f2e:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    5f3e:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    5f4e:	00 ff ff e3 00 00 00 00 00 ff ff ff ff ff ff e3     ................
	...
    5f6e:	ff ff e3 00 00 ff ff e3 ff ff ff e3 ff ff ff e3     ................
    5f7e:	ff ff ff ff ff ff ff e3 ff ff e3 ff e3 ff ff e3     ................
    5f8e:	ff ff e3 00 00 ff ff e3 ff ff e3 00 00 ff ff e3     ................
	...
    5fae:	00 ff ff e3 00 ff ff e3 00 ff ff ff e3 ff ff e3     ................
    5fbe:	00 ff ff ff ff ff ff e3 00 ff ff ff ff ff ff e3     ................
    5fce:	00 ff ff e3 ff ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    5fee:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    5ffe:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    600e:	00 ff ff e3 00 ff ff e3 00 00 ff ff ff ff e3 00     ................
	...
    602e:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    603e:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff e3 00     ................
    604e:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
	...
    606e:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    607e:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    608e:	00 ff ff e3 ff ff e3 00 00 00 ff ff e3 ff ff e3     ................
	...
    60ae:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    60be:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff e3 00     ................
    60ce:	00 ff ff e3 ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
	...
    60ee:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 00 00 00     ................
    60fe:	00 00 ff ff ff ff e3 00 00 00 00 00 00 ff ff e3     ................
    610e:	00 00 00 00 00 ff ff e3 00 00 ff ff ff ff e3 00     ................
	...
    612e:	00 ff ff ff ff ff ff e3 00 00 00 ff ff e3 00 00     ................
    613e:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
    614e:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
	...
    616e:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    617e:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    618e:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff ff e3     ................
	...
    61ae:	00 ff ff 00 00 ff ff e3 00 ff ff 00 00 ff ff e3     ................
    61be:	00 ff ff 00 00 ff ff e3 00 ff ff 00 00 ff ff e3     ................
    61ce:	00 00 ff ff ff ff e3 00 00 00 00 ff ff e3 00 00     ................
	...
    61ee:	ff ff e3 00 00 ff ff e3 ff ff e3 00 00 ff ff e3     ................
    61fe:	ff ff e3 ff e3 ff ff e3 ff ff ff ff ff ff ff e3     ................
    620e:	ff ff ff e3 ff ff ff e3 ff ff e3 00 00 ff ff e3     ................
	...
    622e:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    623e:	00 00 ff ff ff ff e3 00 00 00 ff ff ff ff e3 00     ................
    624e:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    626e:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    627e:	00 00 ff ff ff ff e3 00 00 00 00 ff ff e3 00 00     ................
    628e:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
	...
    62ae:	00 ff ff ff ff ff ff e3 00 00 00 00 ff ff e3 00     ................
    62be:	00 00 00 ff ff e3 00 00 00 00 ff ff e3 00 00 00     ................
    62ce:	00 ff ff e3 00 00 00 00 00 ff ff ff ff ff ff e3     ................
	...
    62e6:	bf bf bf bf 00 00 00 00 bf bf bf bf 00 00 00 00     ................
    62f6:	bf bf bf bf 00 00 00 00 bf bf bf bf 00 00 00 00     ................
    6306:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    6316:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
	...
    6346:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    6356:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    6366:	00 00 00 00 bf bf bf bf 00 00 00 00 bf bf bf bf     ................
    6376:	00 00 00 00 bf bf bf bf 00 00 00 00 bf bf bf bf     ................
    6386:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    6396:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    63a6:	a0 a0 a0 a0 a0 a0 a0 ff a0 a0 a0 a0 a0 a0 ff ff     ................
    63b6:	a0 a0 a0 a0 a0 ff ff 02 a0 a0 a0 a0 ff ff 02 02     ................
    63c6:	a0 a0 a0 ff ff 02 02 02 a0 a0 ff ff 02 02 02 02     ................
    63d6:	a0 ff ff 02 02 02 02 02 ff ff 02 02 02 02 02 02     ................
    63e6:	ff 02 02 02 02 02 02 02 ff 02 02 02 02 02 02 02     ................
    63f6:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    6406:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    6416:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    6426:	ff ff ff ff ff ff ff ff 02 02 02 02 02 02 02 02     ................
    6436:	02 02 02 02 02 02 02 02 a0 a0 a0 a0 a0 a0 a0 a0     ................
    6446:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    6456:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    6466:	ff ff ff ff ff ff ff ff 02 02 ff ff ff ff 02 02     ................
    6476:	02 02 02 ff ff 02 02 02 a0 a0 a0 ff a0 a0 a0 a0     ................
    6486:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    6496:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    64a6:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    64b6:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    64c6:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    64d6:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    64e6:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    64f6:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    6506:	02 02 02 ff ff 02 02 02 02 02 ff ff ff ff 02 02     ................
    6516:	02 ff ff ff ff ff ff 02 ff ff ff ff ff ff ff ff     ................
    6526:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    6536:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    6546:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    6556:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    6566:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    6576:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    6586:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    6596:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    65a6:	03 03 03 03 03 03 03 1f 03 03 03 03 03 03 0f 06     ................
    65b6:	03 03 03 03 03 02 02 06 03 03 03 03 02 02 02 06     ................
    65c6:	03 03 03 02 02 02 02 06 03 03 02 02 02 02 06 02     ................
    65d6:	03 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    65e6:	1f 2f 2f 2f 2f 2f 2f 1f 06 06 06 1f 1f 1f 06 02     .//////.........
    65f6:	02 02 06 1f 06 1f 06 02 02 02 06 02 06 1f 06 02     ................
    6606:	02 02 06 02 06 06 02 06 02 06 06 02 02 06 02 06     ................
    6616:	02 06 02 02 02 06 02 06 06 02 02 02 02 06 02 02     ................
    6626:	1f 03 03 03 03 03 03 03 06 0f 03 03 03 03 03 03     ................
    6636:	06 02 02 03 03 03 03 03 06 02 02 02 03 03 03 03     ................
    6646:	06 06 02 02 02 03 03 03 02 02 02 02 02 02 03 03     ................
    6656:	02 02 02 02 02 02 02 03 06 02 02 02 02 02 02 02     ................
    6666:	03 03 03 03 03 03 03 02 03 03 03 03 03 03 02 02     ................
    6676:	03 03 03 03 03 02 02 02 03 03 03 03 02 02 02 02     ................
    6686:	03 03 03 02 02 02 02 02 03 03 02 02 02 02 02 02     ................
    6696:	03 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    66a6:	02 03 03 03 03 03 03 03 02 02 03 03 03 03 03 03     ................
    66b6:	02 02 02 03 03 03 03 03 02 02 02 02 03 03 03 03     ................
    66c6:	02 02 02 02 02 03 03 03 02 02 02 02 02 02 03 03     ................
    66d6:	02 02 02 02 02 02 02 03 02 02 02 02 02 02 02 02     ................
    66e6:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    66f6:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    6706:	5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c     \\\\\\\\\\\\\\\\
    6716:	02 5c 02 5c 02 5c 02 5c 02 02 0b 02 0b 02 0b 02     .\.\.\.\........
    6726:	02 0b 02 02 02 0b 02 02 02 02 0b 02 0b 02 0b 02     ................
    6736:	02 0b 02 0b 02 0b 02 02 02 02 0b 02 02 02 0b 02     ................
    6746:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    6756:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................

00006766 <map_font>:
    6766:	25 01 00 2a 2b 2c 2d 2e 2f 30 31 32 33 34 35 36     %..*+,-./0123456
    6776:	37 38 39 3a 3b 3c 3d 3e 3f 40 41 42 43 44 45 46     789:;<=>?@ABCDEF
    6786:	47 48 49 4a 4b 4c 4d                                GHIJKLM

0000678d <map_atmosphere>:
    678d:	1c 02 24 24 24 24 24 24 24 24 24 24 24 24 24 24     ..$$$$$$$$$$$$$$
    679d:	24 24 24 24 24 24 24 24 24 24 24 24 24 24 28 28     $$$$$$$$$$$$$$((
    67ad:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    67bd:	28 28 28 28 28 28 28 28 28 28                       ((((((((((

000067c7 <map_star_dark>:
    67c7:	01 01 13                                            ...

000067ca <map_star>:
    67ca:	01 01 12                                            ...

000067cd <map_fire_lava>:
    67cd:	01 01 0e                                            ...

000067d0 <map_fire_top>:
    67d0:	01 01 0d                                            ...

000067d3 <map_fire_bottom>:
    67d3:	01 01 0c                                            ...

000067d6 <map_icicle_up>:
    67d6:	01 01 0a                                            ...

000067d9 <map_icicle_down>:
    67d9:	01 01 09                                            ...

000067dc <map_ice_bottom>:
    67dc:	01 01 04                                            ...

000067df <map_ice_right>:
    67df:	01 01 03                                            ...

000067e2 <map_ice_middle>:
    67e2:	01 01 02                                            ...

000067e5 <map_ice_left>:
    67e5:	01 01 01                                            ...

000067e8 <map_canvas>:
    67e8:	0f 09 0f 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    67f8:	11 15 00 00 00 00 00 00 00 00 00 00 00 00 00 16     ................
    6808:	15 00 00 00 00 00 00 00 00 00 00 00 00 00 16 15     ................
	...
    6824:	00 16 15 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    6834:	16 15 00 00 00 00 00 00 00 00 00 00 00 00 00 16     ................
    6844:	15 00 00 00 00 00 00 00 00 00 00 00 00 00 16 15     ................
	...
    6860:	00 16 4e 4f 4f 4f 4f 4f 4f 4f 4f 4f 4f 4f 4f 4f     ..NOOOOOOOOOOOOO
    6870:	50                                                  P

00006871 <map_splash>:
    6871:	0f 05 1a 1a 1a 00 1a 1a 1a 00 1b 1c 1d 12 1a 1a     ................
    6881:	1a 00 1a 00 00 1a 13 00 00 1e 1f 20 00 1a 00 12     ........... ....
    6891:	13 1a 00 12 1a 00 00 00 21 22 23 00 1a 1a 1a 00     ........!"#.....
    68a1:	1a 00 00 1a 00 12 00 25 26 27 00 00 00 1a 1a 1a     .......%&'......
    68b1:	1a 00 1a 00 00 00 29 00 13 00 1a 1a 1a              ......)......

000068be <map_tile_none>:
    68be:	01 01 00 00                                         ....

000068c2 <__ctors_end>:
    68c2:	11 24       	eor	r1, r1
    68c4:	1f be       	out	0x3f, r1	; 63
    68c6:	cf ef       	ldi	r28, 0xFF	; 255
    68c8:	d0 e1       	ldi	r29, 0x10	; 16
    68ca:	de bf       	out	0x3e, r29	; 62
    68cc:	cd bf       	out	0x3d, r28	; 61

000068ce <__do_copy_data>:
    68ce:	15 e0       	ldi	r17, 0x05	; 5
    68d0:	a0 e0       	ldi	r26, 0x00	; 0
    68d2:	b5 e0       	ldi	r27, 0x05	; 5
    68d4:	e4 e1       	ldi	r30, 0x14	; 20
    68d6:	f3 ed       	ldi	r31, 0xD3	; 211
    68d8:	02 c0       	rjmp	.+4      	; 0x68de <__do_copy_data+0x10>
    68da:	05 90       	lpm	r0, Z+
    68dc:	0d 92       	st	X+, r0
    68de:	a0 31       	cpi	r26, 0x10	; 16
    68e0:	b1 07       	cpc	r27, r17
    68e2:	d9 f7       	brne	.-10     	; 0x68da <__do_copy_data+0xc>

000068e4 <__do_clear_bss>:
    68e4:	10 e1       	ldi	r17, 0x10	; 16
    68e6:	a0 e1       	ldi	r26, 0x10	; 16
    68e8:	b5 e0       	ldi	r27, 0x05	; 5
    68ea:	01 c0       	rjmp	.+2      	; 0x68ee <.do_clear_bss_start>

000068ec <.do_clear_bss_loop>:
    68ec:	1d 92       	st	X+, r1

000068ee <.do_clear_bss_start>:
    68ee:	af 30       	cpi	r26, 0x0F	; 15
    68f0:	b1 07       	cpc	r27, r17
    68f2:	e1 f7       	brne	.-8      	; 0x68ec <.do_clear_bss_loop>

000068f4 <wdt_init>:

void wdt_init(void)
{

#if TRUE_RANDOM_GEN == 1	
	wdt_randomize();
    68f4:	0e 94 15 3a 	call	0x742a	; 0x742a <wdt_randomize>
#endif

    MCUSR = 0;
    68f8:	14 be       	out	0x34, r1	; 52
    wdt_disable();
    68fa:	88 e1       	ldi	r24, 0x18	; 24
    68fc:	0f b6       	in	r0, 0x3f	; 63
    68fe:	f8 94       	cli
    6900:	80 93 60 00 	sts	0x0060, r24
    6904:	10 92 60 00 	sts	0x0060, r1
    6908:	0f be       	out	0x3f, r0	; 63

0000690a <Initialize>:


void Initialize(void){
	int i;

	if(!isEepromFormatted()) FormatEeprom();
    690a:	0e 94 d7 3a 	call	0x75ae	; 0x75ae <isEepromFormatted>
    690e:	81 11       	cpse	r24, r1
    6910:	02 c0       	rjmp	.+4      	; 0x6916 <Initialize+0xc>
    6912:	0e 94 b5 3a 	call	0x756a	; 0x756a <FormatEeprom>

	cli();
    6916:	f8 94       	cli
		mix_bank=0;
	#endif
	
	#if MIXER_CHAN4_TYPE == 0
		//initialize LFSR		
		tr4_barrel_lo=1;
    6918:	81 e0       	ldi	r24, 0x01	; 1
    691a:	80 93 e4 0c 	sts	0x0CE4, r24
		tr4_barrel_hi=1;		
    691e:	80 93 e5 0c 	sts	0x0CE5, r24
		tr4_params=0b00000001; //15 bits no divider (1)
    6922:	80 93 e3 0c 	sts	0x0CE3, r24
		snesMouseEnabled=false;
	#endif

	//silence all sound channels
	for(i=0;i<CHANNELS;i++){
		mixer.channels.all[i].volume=0;
    6926:	10 92 d0 0c 	sts	0x0CD0, r1
    692a:	10 92 d6 0c 	sts	0x0CD6, r1
    692e:	10 92 dc 0c 	sts	0x0CDC, r1
    6932:	10 92 e2 0c 	sts	0x0CE2, r1
    6936:	10 92 e8 0c 	sts	0x0CE8, r1
	}
	
	//set sync parameters. starts at odd field, in pre-eq pulses, line 1, vsync flag cleared
	sync_phase=0;
    693a:	10 92 b6 0c 	sts	0x0CB6, r1
	sync_flags=0;
    693e:	10 92 b8 0c 	sts	0x0CB8, r1
	sync_pulse=SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES;
    6942:	92 e1       	ldi	r25, 0x12	; 18
    6944:	90 93 b7 0c 	sts	0x0CB7, r25

	//set rendering parameters
	render_lines_count=FRAME_LINES;
    6948:	90 ee       	ldi	r25, 0xE0	; 224
    694a:	90 93 be 0c 	sts	0x0CBE, r25
	first_render_line=FIRST_RENDER_LINE;
    694e:	94 e1       	ldi	r25, 0x14	; 20
    6950:	90 93 bd 0c 	sts	0x0CBD, r25

	joypad1_status_hi=0;
    6954:	10 92 c2 0c 	sts	0x0CC2, r1
    6958:	10 92 c1 0c 	sts	0x0CC1, r1
	joypad2_status_hi=0;
    695c:	10 92 c6 0c 	sts	0x0CC6, r1
    6960:	10 92 c5 0c 	sts	0x0CC5, r1
	sound_enabled=1;
    6964:	80 93 cf 0c 	sts	0x0CCF, r24

	InitializeVideoMode();
    6968:	0e 94 4d 48 	call	0x909a	; 0x909a <InitializeVideoMode>
    696c:	84 e8       	ldi	r24, 0x84	; 132
    696e:	90 e0       	ldi	r25, 0x00	; 0
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
		val=pgm_read_word(&io_table[j]);
    6970:	fc 01       	movw	r30, r24
    6972:	25 91       	lpm	r18, Z+
    6974:	34 91       	lpm	r19, Z
		ptr=(u8*)(val&0xff);
    6976:	f9 01       	movw	r30, r18
    6978:	ff 27       	eor	r31, r31
		*ptr=val>>8;	
    697a:	30 83       	st	Z, r19
    697c:	02 96       	adiw	r24, 0x02	; 2
	InitializeVideoMode();
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
    697e:	20 e0       	ldi	r18, 0x00	; 0
    6980:	82 3b       	cpi	r24, 0xB2	; 178
    6982:	92 07       	cpc	r25, r18
    6984:	a9 f7       	brne	.-22     	; 0x6970 <Initialize+0x66>
		val=pgm_read_word(&io_table[j]);
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;	
	}

	sei();
    6986:	78 94       	sei
	
	DisplayLogo();
    6988:	0e 94 dc 48 	call	0x91b8	; 0x91b8 <DisplayLogo>
    698c:	0e 94 3a 67 	call	0xce74	; 0xce74 <main>
    6990:	0c 94 88 69 	jmp	0xd310	; 0xd310 <_exit>

00006994 <__bad_interrupt>:
    6994:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00006998 <sub_video_mode3>:
	;***************************************************

	sub_video_mode3:
		;de-activate sync timer interrupts
		;we will need to use the I flag to branch in a critical loop
		ldi ZL,(0<<OCIE1A)
    6998:	e0 e0       	ldi	r30, 0x00	; 0
		sts _SFR_MEM_ADDR(TIMSK1),ZL
    699a:	e0 93 6f 00 	sts	0x006F, r30

		;wait cycles to align with next hsync
		WAIT r26,183+241
    699e:	ad e8       	ldi	r26, 0x8D	; 141
    69a0:	aa 95       	dec	r26
    69a2:	f1 f7       	brne	.-4      	; 0x69a0 <sub_video_mode3+0x8>
    69a4:	00 00       	nop

		;Refresh ramtiles indexes in VRAM
		;This has to be done because the main
		;program may have altered the VRAM
		;after vsync and the rendering interrupt.
		lds r16,userRamTilesCount
    69a6:	00 91 f3 0c 	lds	r16, 0x0CF3

		ldi ZL,lo8(ram_tiles_restore);
    69aa:	e0 e5       	ldi	r30, 0x50	; 80
		ldi ZH,hi8(ram_tiles_restore);
    69ac:	fc e0       	ldi	r31, 0x0C	; 12
		ldi r18,3
    69ae:	23 e0       	ldi	r18, 0x03	; 3
		mul r16,r18
    69b0:	02 9f       	mul	r16, r18
		add ZL,r0
    69b2:	e0 0d       	add	r30, r0
		adc ZH,r1
    69b4:	f1 1d       	adc	r31, r1

		ldi YL,lo8(vram)
    69b6:	c0 e0       	ldi	r28, 0x00	; 0
		ldi YH,hi8(vram)
    69b8:	d1 e0       	ldi	r29, 0x01	; 1

		lds r18,free_tile_index
    69ba:	20 91 7e 0d 	lds	r18, 0x0D7E
		ldi r19,MAX_RAMTILES		;maximum possible ramtiles
    69be:	3c e3       	ldi	r19, 0x3C	; 60
		sub r19,r18					;sub free tile
    69c0:	32 1b       	sub	r19, r18
		add r19,r16					;add user tiles
    69c2:	30 0f       	add	r19, r16

		cp r18,r16
    69c4:	20 17       	cp	r18, r16
		breq no_ramtiles
    69c6:	51 f0       	breq	.+20     	; 0x69dc <no_ramtiles>
		nop
    69c8:	00 00       	nop
	...

000069cc <upd_loop>:
		nop
upd_loop:
		ld XL,Z+	;load vram offset of ramtile
    69cc:	a1 91       	ld	r26, Z+
		ld XH,Z+
    69ce:	b1 91       	ld	r27, Z+

		ld r17,X	;get latest VRAM tile that may have been modified my
    69d0:	1c 91       	ld	r17, X
		st Z+,r17	;the main program and store it in the restore buffer
    69d2:	11 93       	st	Z+, r17
		st X,r16	;write the ramtile index back to vram
    69d4:	0c 93       	st	X, r16

		inc r16
    69d6:	03 95       	inc	r16
		cp r16,r18
    69d8:	02 17       	cp	r16, r18
		brlo upd_loop ;loop is 14 cycles
    69da:	c0 f3       	brcs	.-16     	; 0x69cc <upd_loop>

000069dc <no_ramtiles>:

no_ramtiles:
		;wait for remaining maximum possible ramtiles
1:
		ldi r17,3
    69dc:	13 e0       	ldi	r17, 0x03	; 3
		dec r17
    69de:	1a 95       	dec	r17
		brne .-4
    69e0:	f1 f7       	brne	.-4      	; 0x69de <no_ramtiles+0x2>
		rjmp .
    69e2:	00 c0       	rjmp	.+0      	; 0x69e4 <no_ramtiles+0x8>
		dec r19
    69e4:	3a 95       	dec	r19
		brne 1b
    69e6:	d1 f7       	brne	.-12     	; 0x69dc <no_ramtiles>

		;**********************
		; setup scroll stuff
		;**********************
	
		ldi YL,lo8(vram)
    69e8:	c0 e0       	ldi	r28, 0x00	; 0
		ldi YH,hi8(vram)
    69ea:	d1 e0       	ldi	r29, 0x01	; 1

		//add X scroll (coarse)
		lds r18,screen_scrollX ;ScreenScrollX
    69ec:	20 91 b2 0c 	lds	r18, 0x0CB2
		mov r25,r18
    69f0:	92 2f       	mov	r25, r18
		andi r18,0xf8	;(x>>3) * 8 interleave
    69f2:	28 7f       	andi	r18, 0xF8	; 248
		add YL,r18
    69f4:	c2 0f       	add	r28, r18

		;save Y wrap adress 
		movw r12,YL
    69f6:	6e 01       	movw	r12, r28
	

		//add Y scroll (coarse)
		lds r16,screen_scrollY ;ScreenScrollY
    69f8:	00 91 b3 0c 	lds	r16, 0x0CB3
		mov r22,r16
    69fc:	60 2f       	mov	r22, r16
		lsr r16
    69fe:	06 95       	lsr	r16
		lsr r16
    6a00:	06 95       	lsr	r16
		lsr r16 ;/8
    6a02:	06 95       	lsr	r16

        lds r17,screen_scrollHeight
    6a04:	10 91 b4 0c 	lds	r17, 0x0CB4
        sub r17,r16
    6a08:	10 1b       	sub	r17, r16
        mov r15,r17 ;Y tiles to draw before wrapping
    6a0a:	f1 2e       	mov	r15, r17

        mov r17,r16
    6a0c:	10 2f       	mov	r17, r16
        lsr r16
    6a0e:	06 95       	lsr	r16
        lsr r16
    6a10:	06 95       	lsr	r16
        lsr r16 ;/8
    6a12:	06 95       	lsr	r16
		add YH,r16      ; (bits 6-7)
    6a14:	d0 0f       	add	r29, r16
		andi r17,0x7
    6a16:	17 70       	andi	r17, 0x07	; 7
        add YL,r17      ;interleave (bits 3-5)
    6a18:	c1 0f       	add	r28, r17
        andi r22,0x7    ;fine Y scrolling (bits 0-2)
    6a1a:	67 70       	andi	r22, 0x07	; 7
		;lds r20,tile_table_lo
		;lds r21,tile_table_hi
		;out _SFR_IO_ADDR(GPIOR1),r20 ;store for later
		;out _SFR_IO_ADDR(GPIOR2),r21

		lds r20,overlay_tile_table
    6a1c:	40 91 b0 0c 	lds	r20, 0x0CB0
		lds r21,overlay_tile_table+1
    6a20:	50 91 b1 0c 	lds	r21, 0x0CB1
		lds r6,tile_table_lo
    6a24:	60 90 ac 0c 	lds	r6, 0x0CAC
		lds r7,tile_table_hi
    6a28:	70 90 ad 0c 	lds	r7, 0x0CAD
		out _SFR_IO_ADDR(GPIOR1),r6 ;store for later
    6a2c:	6a bc       	out	0x2a, r6	; 42
		out _SFR_IO_ADDR(GPIOR2),r7
    6a2e:	7b bc       	out	0x2b, r7	; 43


		;save main section value	
		movw r10,YL
    6a30:	5e 01       	movw	r10, r28
		mov r23,r22
    6a32:	76 2f       	mov	r23, r22
		mov r24,r15
    6a34:	8f 2d       	mov	r24, r15
		mov r9,r25
    6a36:	99 2e       	mov	r9, r25

		;load values for overlay if it's activated (overlay_height>0)
		
		;compute beginning of overlay in vram 
		lds r16,screen_scrollHeight
    6a38:	00 91 b4 0c 	lds	r16, 0x0CB4
		mov r18,r16
    6a3c:	20 2f       	mov	r18, r16
		lsr r16
    6a3e:	06 95       	lsr	r16
		lsr r16
    6a40:	06 95       	lsr	r16
		lsr r16			;hi8
    6a42:	06 95       	lsr	r16
		inc r16			;add 0x100 ram offset
    6a44:	03 95       	inc	r16
		andi r18,7		;lo8
    6a46:	27 70       	andi	r18, 0x07	; 7
		
		lds r19,overlay_height	
    6a48:	30 91 af 0c 	lds	r19, 0x0CAF
		cpi r19,0
    6a4c:	30 30       	cpi	r19, 0x00	; 0
		in r0, _SFR_IO_ADDR(SREG)
    6a4e:	0f b6       	in	r0, 0x3f	; 63

		sbrs r0,SREG_Z
    6a50:	01 fe       	sbrs	r0, 1
		clr r22
    6a52:	66 27       	eor	r22, r22
		sbrs r0,SREG_Z
    6a54:	01 fe       	sbrs	r0, 1
		mov YL,r18		;lo8(overlay_vram)
    6a56:	c2 2f       	mov	r28, r18
		sbrs r0,SREG_Z
    6a58:	01 fe       	sbrs	r0, 1
		mov YH,r16		;hi8(overlay_vram)
    6a5a:	d0 2f       	mov	r29, r16
		sbrs r0,SREG_Z
    6a5c:	01 fe       	sbrs	r0, 1
		ser r24
    6a5e:	8f ef       	ldi	r24, 0xFF	; 255
		sbrs r0,SREG_Z
    6a60:	01 fe       	sbrs	r0, 1
		clr r9
    6a62:	99 24       	eor	r9, r9

		sbrs r0,SREG_Z
    6a64:	01 fe       	sbrs	r0, 1
		out _SFR_IO_ADDR(GPIOR1),r20
    6a66:	4a bd       	out	0x2a, r20	; 42
		sbrs r0,SREG_Z
    6a68:	01 fe       	sbrs	r0, 1
		out _SFR_IO_ADDR(GPIOR2),r21
    6a6a:	5b bd       	out	0x2b, r21	; 43


		//ldi r16,SCREEN_TILES_V*TILE_HEIGHT; total scanlines to draw
		//mov r8,r16
		lds r8,render_lines_count ;total scanlines to draw
    6a6c:	80 90 be 0c 	lds	r8, 0x0CBE

00006a70 <next_tile_line>:
	;r23 = Main section tile row
	;r24 = Current Y tiles to draw before wrapping
	;r25 = Main section scrollX

	next_tile_line:
		rcall hsync_pulse
    6a70:	bc d3       	rcall	.+1912   	; 0x71ea <hsync_pulse>

		WAIT r18,HSYNC_USABLE_CYCLES - AUDIO_OUT_HSYNC_CYCLES
    6a72:	24 e0       	ldi	r18, 0x04	; 4
    6a74:	2a 95       	dec	r18
    6a76:	f1 f7       	brne	.-4      	; 0x6a74 <next_tile_line+0x4>
    6a78:	00 00       	nop
				
		call render_tile_line
    6a7a:	0e 94 7e 35 	call	0x6afc	; 0x6afc <render_tile_line>

		WAIT r18,58
    6a7e:	23 e1       	ldi	r18, 0x13	; 19
    6a80:	2a 95       	dec	r18
    6a82:	f1 f7       	brne	.-4      	; 0x6a80 <next_tile_line+0x10>
    6a84:	00 00       	nop

		inc r22
    6a86:	63 95       	inc	r22
		dec r8
    6a88:	8a 94       	dec	r8
		breq text_frame_end
    6a8a:	09 f1       	breq	.+66     	; 0x6ace <text_frame_end>

		cpi r22,TILE_HEIGHT ;last char line? 1
    6a8c:	68 30       	cpi	r22, 0x08	; 8
		breq next_tile_row
    6a8e:	29 f0       	breq	.+10     	; 0x6a9a <next_tile_row>

		;wait to align with next_tile_row instructions (+1 cycle for the breq)
		WAIT r16,25
    6a90:	08 e0       	ldi	r16, 0x08	; 8
    6a92:	0a 95       	dec	r16
    6a94:	f1 f7       	brne	.-4      	; 0x6a92 <next_tile_line+0x22>
    6a96:	00 00       	nop
		rjmp next_tile_line
    6a98:	eb cf       	rjmp	.-42     	; 0x6a70 <next_tile_line>

00006a9a <next_tile_row>:

	next_tile_row:

		clr r22		;clear current char line
    6a9a:	66 27       	eor	r22, r22

		;increment vram pointer next row
		mov r16,YL
    6a9c:	0c 2f       	mov	r16, r28
		andi r16,0x7
    6a9e:	07 70       	andi	r16, 0x07	; 7
		cpi r16,7
    6aa0:	07 30       	cpi	r16, 0x07	; 7
		breq 1f
    6aa2:	11 f0       	breq	.+4      	; 0x6aa8 <next_tile_row+0xe>
		inc YL
    6aa4:	c3 95       	inc	r28
		rjmp 2f
    6aa6:	02 c0       	rjmp	.+4      	; 0x6aac <next_tile_row+0x12>
	1:
		andi YL,0xf8
    6aa8:	c8 7f       	andi	r28, 0xF8	; 248
		inc YH
    6aaa:	d3 95       	inc	r29
	2:

		dec r24		;wrap section?
    6aac:	8a 95       	dec	r24
		brne .+2
    6aae:	09 f4       	brne	.+2      	; 0x6ab2 <next_tile_row+0x18>
		movw YL,r12
    6ab0:	e6 01       	movw	r28, r12

		dec r19
    6ab2:	3a 95       	dec	r19
		brne .+2
    6ab4:	09 f4       	brne	.+2      	; 0x6ab8 <next_tile_row+0x1e>
		mov r22,r23	;section tile row
    6ab6:	67 2f       	mov	r22, r23
		brne .+2
    6ab8:	09 f4       	brne	.+2      	; 0x6abc <next_tile_row+0x22>
		movw YL,r10 ;vram adress
    6aba:	e5 01       	movw	r28, r10
		brne .+2
    6abc:	09 f4       	brne	.+2      	; 0x6ac0 <next_tile_row+0x26>
		mov r24,r15 ;Y wrapping
    6abe:	8f 2d       	mov	r24, r15
		brne .+2
    6ac0:	09 f4       	brne	.+2      	; 0x6ac4 <next_tile_row+0x2a>
		mov r9,r25  ;scrollX
    6ac2:	99 2e       	mov	r9, r25

		brne .+2
    6ac4:	09 f4       	brne	.+2      	; 0x6ac8 <next_tile_row+0x2e>
		out _SFR_IO_ADDR(GPIOR1),r6  ;tileset
    6ac6:	6a bc       	out	0x2a, r6	; 42
		brne .+2
    6ac8:	09 f4       	brne	.+2      	; 0x6acc <next_tile_row+0x32>
		out _SFR_IO_ADDR(GPIOR2),r7  ;tilset
    6aca:	7b bc       	out	0x2b, r7	; 43

		rjmp next_tile_line
    6acc:	d1 cf       	rjmp	.-94     	; 0x6a70 <next_tile_line>

00006ace <text_frame_end>:

	text_frame_end:

		WAIT r18,28
    6ace:	29 e0       	ldi	r18, 0x09	; 9
    6ad0:	2a 95       	dec	r18
    6ad2:	f1 f7       	brne	.-4      	; 0x6ad0 <text_frame_end+0x2>
    6ad4:	00 00       	nop

		rcall hsync_pulse ;145
    6ad6:	89 d3       	rcall	.+1810   	; 0x71ea <hsync_pulse>
	
		clr r1
    6ad8:	11 24       	eor	r1, r1
		call RestoreBackground
    6ada:	0e 94 00 47 	call	0x8e00	; 0x8e00 <RestoreBackground>

		;set vsync flag & flip field
		lds ZL,sync_flags
    6ade:	e0 91 b8 0c 	lds	r30, 0x0CB8
		ldi r20,SYNC_FLAG_FIELD
    6ae2:	42 e0       	ldi	r20, 0x02	; 2
		ori ZL,SYNC_FLAG_VSYNC
    6ae4:	e1 60       	ori	r30, 0x01	; 1
		eor ZL,r20
    6ae6:	e4 27       	eor	r30, r20
		sts sync_flags,ZL
    6ae8:	e0 93 b8 0c 	sts	0x0CB8, r30
	
		cli 
    6aec:	f8 94       	cli

		;re-activate sync timer interrupts
		ldi ZL,(1<<OCIE1A)
    6aee:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIMSK1),ZL
    6af0:	e0 93 6f 00 	sts	0x006F, r30
			
		;clear any pending timer int
		ldi ZL,(1<<OCF1A)
    6af4:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIFR1),ZL
    6af6:	e0 93 36 00 	sts	0x0036, r30

		ret
    6afa:	08 95       	ret

00006afc <render_tile_line>:
	; Can destroy: r0,r1,r2,r3,r4,r5,r6,r7,r13,r16,r17,r18,r19,r20,r21,Z
	; 
	; cycles  = 1495
	;*************************************************
	render_tile_line:
		push YL
    6afc:	cf 93       	push	r28
		push YH
    6afe:	df 93       	push	r29
		push r23
    6b00:	7f 93       	push	r23
		push r22
    6b02:	6f 93       	push	r22
		push r19
    6b04:	3f 93       	push	r19
		push r13
    6b06:	df 92       	push	r13
		push r12
    6b08:	cf 92       	push	r12
		push r9
    6b0a:	9f 92       	push	r9
		push r7
    6b0c:	7f 92       	push	r7
		push r6
    6b0e:	6f 92       	push	r6
		;--------------------------
		; Rendering 
		;---------------------------

		;get tile row offset
		ldi r23,TILE_WIDTH ;tile width in pixels
    6b10:	78 e0       	ldi	r23, 0x08	; 8
		mul r22,r23
    6b12:	67 9f       	mul	r22, r23

		;compute base adresses for ROM and RAM tiles
		in r16,_SFR_IO_ADDR(GPIOR1) ;tile_table_lo
    6b14:	0a b5       	in	r16, 0x2a	; 42
		in r17,_SFR_IO_ADDR(GPIOR2) ;tile_table_hi
    6b16:	1b b5       	in	r17, 0x2b	; 43
		subi r16,lo8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    6b18:	00 50       	subi	r16, 0x00	; 0
		sbci r17,hi8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    6b1a:	17 40       	sbci	r17, 0x07	; 7

		add r16,r0
    6b1c:	00 0d       	add	r16, r0
		adc r17,r1
    6b1e:	11 1d       	adc	r17, r1
		movw r2,r16			;rom tiles adress
    6b20:	18 01       	movw	r2, r16

		ldi r16,lo8(ram_tiles)
    6b22:	00 e5       	ldi	r16, 0x50	; 80
		ldi r17,hi8(ram_tiles)
    6b24:	15 e0       	ldi	r17, 0x05	; 5
		add r16,r0
    6b26:	00 0d       	add	r16, r0
		adc r17,r1
    6b28:	11 1d       	adc	r17, r1
		movw r4,r16			;ram tiles adress
    6b2a:	28 01       	movw	r4, r16

		ldi r19,TILE_HEIGHT*TILE_WIDTH
    6b2c:	30 e4       	ldi	r19, 0x40	; 64
		ldi r17,SCREEN_TILES_H-1	;main loop counter
    6b2e:	1b e1       	ldi	r17, 0x1B	; 27


		;handle fine scroll offset
		;lds r22,screenSections+scrollX
		mov r22,r9
    6b30:	69 2d       	mov	r22, r9
		andi r22,0x7		
    6b32:	67 70       	andi	r22, 0x07	; 7
		mov r14,r22	;pixels to draw on last tile	
    6b34:	e6 2e       	mov	r14, r22
		cli			;no trailing pixel to draw (hack, see end: )
    6b36:	f8 94       	cli
		breq .+2
    6b38:	09 f0       	breq	.+2      	; 0x6b3c <render_tile_line+0x40>
		sei			;some trailing pixel to draw (hack, see end: )
    6b3a:	78 94       	sei

		;get first pixel of last tile in ROM (for ROM tiles fine scroll)
		;and adress of next pixel
		movw ZL,YL
    6b3c:	fe 01       	movw	r30, r28
		subi ZL,-(SCREEN_TILES_H*8)
    6b3e:	e0 52       	subi	r30, 0x20	; 32
		ld r18,Z
    6b40:	20 81       	ld	r18, Z
		mul r18,r19 	;tile*width*height
    6b42:	23 9f       	mul	r18, r19
	    add r0,r2    ;add ROM title table address +row offset
    6b44:	02 0c       	add	r0, r2
	    adc r1,r3
    6b46:	13 1c       	adc	r1, r3
		movw ZL,r0
    6b48:	f0 01       	movw	r30, r0
		lpm r9,Z+	;hold first pixel until end 
    6b4a:	95 90       	lpm	r9, Z+
		movw r12,ZL ;hold second pixel adress until end
    6b4c:	6f 01       	movw	r12, r30


		;compute first tile adress
	    ld r18,Y     	;load next tile # from VRAM
    6b4e:	28 81       	ld	r18, Y
		subi YL,-8
    6b50:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT
    6b52:	2c 31       	cpi	r18, 0x1C	; 28
		in r16,_SFR_IO_ADDR(SREG)	;save the carry flag for later	
    6b54:	0f b7       	in	r16, 0x3f	; 63
		mul r18,r19 	;tile*width*height
    6b56:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles	
    6b58:	a1 01       	movw	r20, r2
		sbrc r16,SREG_C
    6b5a:	00 fd       	sbrc	r16, 0
		movw r20,r4		;ram tiles
    6b5c:	a2 01       	movw	r20, r4
	    add r0,r20    ;add title table address +row offset
    6b5e:	04 0e       	add	r0, r20
	    adc r1,r21
    6b60:	15 1e       	adc	r1, r21
		movw XL,r0
    6b62:	d0 01       	movw	r26, r0


		;compute second tile adress
	    ld r18,Y     	;load next tile # from VRAM
    6b64:	28 81       	ld	r18, Y
		subi YL,-8
    6b66:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT
    6b68:	2c 31       	cpi	r18, 0x1C	; 28
		in r7,_SFR_IO_ADDR(SREG)	;save the carry flag for later
    6b6a:	7f b6       	in	r7, 0x3f	; 63
		bst r7,SREG_C
    6b6c:	70 fa       	bst	r7, 0
		mul r18,r19 	;tile*width*height
    6b6e:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles
    6b70:	a1 01       	movw	r20, r2
		brtc .+2
    6b72:	0e f4       	brtc	.+2      	; 0x6b76 <render_tile_line+0x7a>
		movw r20,r4		;ram tiles
    6b74:	a2 01       	movw	r20, r4
	    add r0,r20      ;add title table address +row offset
    6b76:	04 0e       	add	r0, r20
	    adc r1,r21
    6b78:	15 1e       	adc	r1, r21
		movw ZL,r0
    6b7a:	f0 01       	movw	r30, r0
		movw r6,ZL		;push Z
    6b7c:	3f 01       	movw	r6, r30

00006b7e <do_fine_scroll>:


	do_fine_scroll:
		;output 1st tile with fine scroll offset 
		clr r0
    6b7e:	00 24       	eor	r0, r0
		add XL,r22	;add fine offset
    6b80:	a6 0f       	add	r26, r22
		adc XH,r0
    6b82:	b0 1d       	adc	r27, r0

		;compute jump offset
		ldi r23,3
    6b84:	73 e0       	ldi	r23, 0x03	; 3
		mul r22,r23 ;3 instructions
    6b86:	67 9f       	mul	r22, r23
	
		sbrs r16,SREG_C
    6b88:	00 ff       	sbrs	r16, 0
		rjmp rom_fine_scroll
    6b8a:	22 c0       	rjmp	.+68     	; 0x6bd0 <rom_fine_scroll>

00006b8c <ram_fine_scroll>:

	/***FINE SCROLL RAM LOOP***/
	ram_fine_scroll:
		rjmp .
    6b8c:	00 c0       	rjmp	.+0      	; 0x6b8e <ram_fine_scroll+0x2>
		ldi r22,lo8(pm(ram_fine_scroll_loop))
    6b8e:	6e ec       	ldi	r22, 0xCE	; 206
		ldi r23,hi8(pm(ram_fine_scroll_loop))
    6b90:	75 e3       	ldi	r23, 0x35	; 53
		add r22,r0
    6b92:	60 0d       	add	r22, r0
		adc r23,r1
    6b94:	71 1d       	adc	r23, r1
		push r22
    6b96:	6f 93       	push	r22
		push r23	
    6b98:	7f 93       	push	r23
		ret ;jump into ram_fine_scroll_loop
    6b9a:	08 95       	ret

00006b9c <ram_fine_scroll_loop>:
	ram_fine_scroll_loop:
		.rept 8
			ld r16,X+
			lpm
			out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		.endr
    6b9c:	0d 91       	ld	r16, X+
    6b9e:	c8 95       	lpm
    6ba0:	08 b9       	out	0x08, r16	; 8
    6ba2:	0d 91       	ld	r16, X+
    6ba4:	c8 95       	lpm
    6ba6:	08 b9       	out	0x08, r16	; 8
    6ba8:	0d 91       	ld	r16, X+
    6baa:	c8 95       	lpm
    6bac:	08 b9       	out	0x08, r16	; 8
    6bae:	0d 91       	ld	r16, X+
    6bb0:	c8 95       	lpm
    6bb2:	08 b9       	out	0x08, r16	; 8
    6bb4:	0d 91       	ld	r16, X+
    6bb6:	c8 95       	lpm
    6bb8:	08 b9       	out	0x08, r16	; 8
    6bba:	0d 91       	ld	r16, X+
    6bbc:	c8 95       	lpm
    6bbe:	08 b9       	out	0x08, r16	; 8
    6bc0:	0d 91       	ld	r16, X+
    6bc2:	c8 95       	lpm
    6bc4:	08 b9       	out	0x08, r16	; 8
    6bc6:	0d 91       	ld	r16, X+
    6bc8:	c8 95       	lpm
    6bca:	08 b9       	out	0x08, r16	; 8

		;branch to tile #2
		brtc romloop
    6bcc:	1e f5       	brtc	.+70     	; 0x6c14 <romloop>
		rjmp ramloop
    6bce:	40 c0       	rjmp	.+128    	; 0x6c50 <ramloop>

00006bd0 <rom_fine_scroll>:

	/***FINE SCROLL ROM LOOP***/
	rom_fine_scroll:
		movw ZL,XL
    6bd0:	fd 01       	movw	r30, r26
		ldi r22,lo8(pm(rom_fine_scroll_loop))	
    6bd2:	60 ef       	ldi	r22, 0xF0	; 240
		ldi r23,hi8(pm(rom_fine_scroll_loop))
    6bd4:	75 e3       	ldi	r23, 0x35	; 53
		add r22,r0
    6bd6:	60 0d       	add	r22, r0
		adc r23,r1
    6bd8:	71 1d       	adc	r23, r1
		push r22
    6bda:	6f 93       	push	r22
		push r23	
    6bdc:	7f 93       	push	r23
		ret
    6bde:	08 95       	ret

00006be0 <rom_fine_scroll_loop>:
	rom_fine_scroll_loop:
		.rept 8
			lpm r16,Z+
			rjmp .
			out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		.endr 
    6be0:	05 91       	lpm	r16, Z+
    6be2:	00 c0       	rjmp	.+0      	; 0x6be4 <rom_fine_scroll_loop+0x4>
    6be4:	08 b9       	out	0x08, r16	; 8
    6be6:	05 91       	lpm	r16, Z+
    6be8:	00 c0       	rjmp	.+0      	; 0x6bea <rom_fine_scroll_loop+0xa>
    6bea:	08 b9       	out	0x08, r16	; 8
    6bec:	05 91       	lpm	r16, Z+
    6bee:	00 c0       	rjmp	.+0      	; 0x6bf0 <rom_fine_scroll_loop+0x10>
    6bf0:	08 b9       	out	0x08, r16	; 8
    6bf2:	05 91       	lpm	r16, Z+
    6bf4:	00 c0       	rjmp	.+0      	; 0x6bf6 <rom_fine_scroll_loop+0x16>
    6bf6:	08 b9       	out	0x08, r16	; 8
    6bf8:	05 91       	lpm	r16, Z+
    6bfa:	00 c0       	rjmp	.+0      	; 0x6bfc <rom_fine_scroll_loop+0x1c>
    6bfc:	08 b9       	out	0x08, r16	; 8
    6bfe:	05 91       	lpm	r16, Z+
    6c00:	00 c0       	rjmp	.+0      	; 0x6c02 <rom_fine_scroll_loop+0x22>
    6c02:	08 b9       	out	0x08, r16	; 8
    6c04:	05 91       	lpm	r16, Z+
    6c06:	00 c0       	rjmp	.+0      	; 0x6c08 <rom_fine_scroll_loop+0x28>
    6c08:	08 b9       	out	0x08, r16	; 8
    6c0a:	05 91       	lpm	r16, Z+
    6c0c:	00 c0       	rjmp	.+0      	; 0x6c0e <rom_fine_scroll_loop+0x2e>
    6c0e:	08 b9       	out	0x08, r16	; 8
	
		movw ZL,r6		;restore Z for tile #2
    6c10:	f3 01       	movw	r30, r6

		;branch to tile #2
		brts ramloop
    6c12:	f6 f0       	brts	.+60     	; 0x6c50 <ramloop>

00006c14 <romloop>:

	
	romloop:
	    lpm r16,Z+
    6c14:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    6c16:	08 b9       	out	0x08, r16	; 8
	    ld r18,Y     ;load next tile # from VRAM
    6c18:	28 81       	ld	r18, Y

	    lpm r16,Z+
    6c1a:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 2
    6c1c:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    6c1e:	23 9f       	mul	r18, r19

	    lpm r16,Z+
    6c20:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 3
    6c22:	08 b9       	out	0x08, r16	; 8
		subi YL,-8
    6c24:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT		;is tile in RAM or ROM? (RAM tiles have indexes<RAM_TILES_COUNT)
    6c26:	2c 31       	cpi	r18, 0x1C	; 28
		
	    lpm r16,Z+
    6c28:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    6c2a:	08 b9       	out	0x08, r16	; 8
		brsh .+2		;skip if next tile is in ROM	
    6c2c:	08 f4       	brcc	.+2      	; 0x6c30 <romloop+0x1c>
		movw r20,r4 	;load RAM title table address +row offset	
    6c2e:	a2 01       	movw	r20, r4
   
	    lpm r16,Z+
    6c30:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 5
    6c32:	08 b9       	out	0x08, r16	; 8
		add r0,r20		;add tile table address +row offset lsb
    6c34:	04 0e       	add	r0, r20
	    adc r1,r21		;add title table address +row offset msb
    6c36:	15 1e       	adc	r1, r21

	    lpm r16,Z+
    6c38:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 6
    6c3a:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT	
    6c3c:	2c 31       	cpi	r18, 0x1C	; 28
		dec r17			;decrement tiles to draw on line (does not affect carry)
    6c3e:	1a 95       	dec	r17
   
	    lpm r16,Z+
    6c40:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 7   
    6c42:	08 b9       	out	0x08, r16	; 8
	    lpm r16,Z+
    6c44:	05 91       	lpm	r16, Z+

		breq end	
    6c46:	39 f1       	breq	.+78     	; 0x6c96 <end>
	    movw ZL,r0   	;copy next tile adress
    6c48:	f0 01       	movw	r30, r0

	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    6c4a:	08 b9       	out	0x08, r16	; 8
	    brcc romloop
    6c4c:	18 f7       	brcc	.-58     	; 0x6c14 <romloop>
	
		rjmp .
    6c4e:	00 c0       	rjmp	.+0      	; 0x6c50 <ramloop>

00006c50 <ramloop>:

	ramloop:

	    ld r16,Z+
    6c50:	01 91       	ld	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    6c52:	08 b9       	out	0x08, r16	; 8
	    ld r18,Y     ;load next tile # from VRAM
    6c54:	28 81       	ld	r18, Y

	    ld r16,Z+ 
    6c56:	01 91       	ld	r16, Z+
		subi YL,-8   		
    6c58:	c8 5f       	subi	r28, 0xF8	; 248
		out _SFR_IO_ADDR(DATA_PORT),r16 		;pixel 2
    6c5a:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    6c5c:	23 9f       	mul	r18, r19

	    ld r16,Z+
    6c5e:	01 91       	ld	r16, Z+
		nop
    6c60:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16         ;pixel 3
    6c62:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    6c64:	2c 31       	cpi	r18, 0x1C	; 28
		rjmp .
    6c66:	00 c0       	rjmp	.+0      	; 0x6c68 <ramloop+0x18>
   
	    ld r16,Z+
    6c68:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    6c6a:	08 b9       	out	0x08, r16	; 8
		brcs .+2 
    6c6c:	08 f0       	brcs	.+2      	; 0x6c70 <ramloop+0x20>
		movw r20,r2 	;ROM title table address +row offset	
    6c6e:	a1 01       	movw	r20, r2
   
   
	    ld r16,Z+
    6c70:	01 91       	ld	r16, Z+
	    add r0,r20    ;add title table address +row offset
    6c72:	04 0e       	add	r0, r20
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 5
    6c74:	08 b9       	out	0x08, r16	; 8
	    adc r1,r21
    6c76:	15 1e       	adc	r1, r21
		rjmp .
    6c78:	00 c0       	rjmp	.+0      	; 0x6c7a <ramloop+0x2a>
    
		ld r16,Z+		
    6c7a:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 6
    6c7c:	08 b9       	out	0x08, r16	; 8
		ld r7,Z+
    6c7e:	71 90       	ld	r7, Z+
	    ld r16,Z+	
    6c80:	01 91       	ld	r16, Z+
	
		movw ZL,r0
    6c82:	f0 01       	movw	r30, r0
		out _SFR_IO_ADDR(DATA_PORT),r7      ;pixel 7   
    6c84:	78 b8       	out	0x08, r7	; 8
		nop
    6c86:	00 00       	nop
		cpi r18,RAM_TILES_COUNT	
    6c88:	2c 31       	cpi	r18, 0x1C	; 28
	    dec r17
    6c8a:	1a 95       	dec	r17
	    breq end
    6c8c:	21 f0       	breq	.+8      	; 0x6c96 <end>
	
		nop
    6c8e:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    6c90:	08 b9       	out	0x08, r16	; 8
	
	    brcc romloop
    6c92:	00 f6       	brcc	.-128    	; 0x6c14 <romloop>
		rjmp ramloop
    6c94:	dd cf       	rjmp	.-70     	; 0x6c50 <ramloop>

00006c96 <end>:
	
	end:
		out _SFR_IO_ADDR(DATA_PORT),r16  	;pixel 8
    6c96:	08 b9       	out	0x08, r16	; 8
		brid end_fine_scroll				;hack: interrupt flag=0 => no fine offset pixel to draw
    6c98:	27 f5       	brid	.+72     	; 0x6ce2 <end_fine_scroll>
		brcc end_rom_fine_scroll_loop
    6c9a:	30 f4       	brcc	.+12     	; 0x6ca8 <end_rom_fine_scroll_loop>

	/***END RAM LOOP***/
		movw ZL,r0
    6c9c:	f0 01       	movw	r30, r0

00006c9e <end_ram_fine_scroll_loop>:
	end_ram_fine_scroll_loop:
		ld r16,Z+
    6c9e:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
    6ca0:	08 b9       	out	0x08, r16	; 8
		dec r14
    6ca2:	ea 94       	dec	r14
		brne end_ram_fine_scroll_loop
    6ca4:	e1 f7       	brne	.-8      	; 0x6c9e <end_ram_fine_scroll_loop>
		rjmp end_fine_scroll_ram
    6ca6:	1f c0       	rjmp	.+62     	; 0x6ce6 <end_fine_scroll_ram>

00006ca8 <end_rom_fine_scroll_loop>:

	/***END ROM LOOP***/
	end_rom_fine_scroll_loop:
		movw ZL,r12
    6ca8:	f6 01       	movw	r30, r12
		nop
    6caa:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r9        ;output saved 1st pixel
    6cac:	98 b8       	out	0x08, r9	; 8
		dec r14
    6cae:	ea 94       	dec	r14
		breq end_fine_scroll_rom
    6cb0:	c9 f0       	breq	.+50     	; 0x6ce4 <end_fine_scroll_rom>
	.rept 6
		lpm r16,Z+		
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		dec r14
		breq end_fine_scroll_rom
	.endr
    6cb2:	05 91       	lpm	r16, Z+
    6cb4:	08 b9       	out	0x08, r16	; 8
    6cb6:	ea 94       	dec	r14
    6cb8:	a9 f0       	breq	.+42     	; 0x6ce4 <end_fine_scroll_rom>
    6cba:	05 91       	lpm	r16, Z+
    6cbc:	08 b9       	out	0x08, r16	; 8
    6cbe:	ea 94       	dec	r14
    6cc0:	89 f0       	breq	.+34     	; 0x6ce4 <end_fine_scroll_rom>
    6cc2:	05 91       	lpm	r16, Z+
    6cc4:	08 b9       	out	0x08, r16	; 8
    6cc6:	ea 94       	dec	r14
    6cc8:	69 f0       	breq	.+26     	; 0x6ce4 <end_fine_scroll_rom>
    6cca:	05 91       	lpm	r16, Z+
    6ccc:	08 b9       	out	0x08, r16	; 8
    6cce:	ea 94       	dec	r14
    6cd0:	49 f0       	breq	.+18     	; 0x6ce4 <end_fine_scroll_rom>
    6cd2:	05 91       	lpm	r16, Z+
    6cd4:	08 b9       	out	0x08, r16	; 8
    6cd6:	ea 94       	dec	r14
    6cd8:	29 f0       	breq	.+10     	; 0x6ce4 <end_fine_scroll_rom>
    6cda:	05 91       	lpm	r16, Z+
    6cdc:	08 b9       	out	0x08, r16	; 8
    6cde:	ea 94       	dec	r14
    6ce0:	09 f0       	breq	.+2      	; 0x6ce4 <end_fine_scroll_rom>

00006ce2 <end_fine_scroll>:
	...

00006ce4 <end_fine_scroll_rom>:
	...

00006ce6 <end_fine_scroll_ram>:
	end_fine_scroll:	
		nop
	end_fine_scroll_rom:
		nop
	end_fine_scroll_ram:
		clr r16	
    6ce6:	00 27       	eor	r16, r16
		out _SFR_IO_ADDR(DATA_PORT),r16   
    6ce8:	08 b9       	out	0x08, r16	; 8

		pop r6
    6cea:	6f 90       	pop	r6
		pop r7
    6cec:	7f 90       	pop	r7
		pop r9
    6cee:	9f 90       	pop	r9
		pop r12
    6cf0:	cf 90       	pop	r12
		pop r13
    6cf2:	df 90       	pop	r13
		pop r19
    6cf4:	3f 91       	pop	r19
		pop r22
    6cf6:	6f 91       	pop	r22
		pop r23
    6cf8:	7f 91       	pop	r23
		pop YH
    6cfa:	df 91       	pop	r29
		pop YL
    6cfc:	cf 91       	pop	r28

		ret
    6cfe:	08 95       	ret

00006d00 <CopyFlashTile>:
; C-callable
; r24=Source ROM tile index
; r22=Dest RAM tile index
;************************************
CopyFlashTile:
	ldi r18,TILE_HEIGHT*TILE_WIDTH
    6d00:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	lds ZL,tile_table_lo
    6d02:	e0 91 ac 0c 	lds	r30, 0x0CAC
	lds ZH,tile_table_hi
    6d06:	f0 91 ad 0c 	lds	r31, 0x0CAD
	mul r24,r18
    6d0a:	82 9f       	mul	r24, r18
	add ZL,r0
    6d0c:	e0 0d       	add	r30, r0
	adc ZH,r1
    6d0e:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    6d10:	a0 e5       	ldi	r26, 0x50	; 80
	ldi XH,hi8(ram_tiles)
    6d12:	b5 e0       	ldi	r27, 0x05	; 5
	mul r22,r18
    6d14:	62 9f       	mul	r22, r18
	add XL,r0
    6d16:	a0 0d       	add	r26, r0
	adc XH,r1
    6d18:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	lpm r1,Z+
	st X+,r1
.endr
    6d1a:	15 90       	lpm	r1, Z+
    6d1c:	1d 92       	st	X+, r1
    6d1e:	15 90       	lpm	r1, Z+
    6d20:	1d 92       	st	X+, r1
    6d22:	15 90       	lpm	r1, Z+
    6d24:	1d 92       	st	X+, r1
    6d26:	15 90       	lpm	r1, Z+
    6d28:	1d 92       	st	X+, r1
    6d2a:	15 90       	lpm	r1, Z+
    6d2c:	1d 92       	st	X+, r1
    6d2e:	15 90       	lpm	r1, Z+
    6d30:	1d 92       	st	X+, r1
    6d32:	15 90       	lpm	r1, Z+
    6d34:	1d 92       	st	X+, r1
    6d36:	15 90       	lpm	r1, Z+
    6d38:	1d 92       	st	X+, r1
    6d3a:	15 90       	lpm	r1, Z+
    6d3c:	1d 92       	st	X+, r1
    6d3e:	15 90       	lpm	r1, Z+
    6d40:	1d 92       	st	X+, r1
    6d42:	15 90       	lpm	r1, Z+
    6d44:	1d 92       	st	X+, r1
    6d46:	15 90       	lpm	r1, Z+
    6d48:	1d 92       	st	X+, r1
    6d4a:	15 90       	lpm	r1, Z+
    6d4c:	1d 92       	st	X+, r1
    6d4e:	15 90       	lpm	r1, Z+
    6d50:	1d 92       	st	X+, r1
    6d52:	15 90       	lpm	r1, Z+
    6d54:	1d 92       	st	X+, r1
    6d56:	15 90       	lpm	r1, Z+
    6d58:	1d 92       	st	X+, r1
    6d5a:	15 90       	lpm	r1, Z+
    6d5c:	1d 92       	st	X+, r1
    6d5e:	15 90       	lpm	r1, Z+
    6d60:	1d 92       	st	X+, r1
    6d62:	15 90       	lpm	r1, Z+
    6d64:	1d 92       	st	X+, r1
    6d66:	15 90       	lpm	r1, Z+
    6d68:	1d 92       	st	X+, r1
    6d6a:	15 90       	lpm	r1, Z+
    6d6c:	1d 92       	st	X+, r1
    6d6e:	15 90       	lpm	r1, Z+
    6d70:	1d 92       	st	X+, r1
    6d72:	15 90       	lpm	r1, Z+
    6d74:	1d 92       	st	X+, r1
    6d76:	15 90       	lpm	r1, Z+
    6d78:	1d 92       	st	X+, r1
    6d7a:	15 90       	lpm	r1, Z+
    6d7c:	1d 92       	st	X+, r1
    6d7e:	15 90       	lpm	r1, Z+
    6d80:	1d 92       	st	X+, r1
    6d82:	15 90       	lpm	r1, Z+
    6d84:	1d 92       	st	X+, r1
    6d86:	15 90       	lpm	r1, Z+
    6d88:	1d 92       	st	X+, r1
    6d8a:	15 90       	lpm	r1, Z+
    6d8c:	1d 92       	st	X+, r1
    6d8e:	15 90       	lpm	r1, Z+
    6d90:	1d 92       	st	X+, r1
    6d92:	15 90       	lpm	r1, Z+
    6d94:	1d 92       	st	X+, r1
    6d96:	15 90       	lpm	r1, Z+
    6d98:	1d 92       	st	X+, r1
    6d9a:	15 90       	lpm	r1, Z+
    6d9c:	1d 92       	st	X+, r1
    6d9e:	15 90       	lpm	r1, Z+
    6da0:	1d 92       	st	X+, r1
    6da2:	15 90       	lpm	r1, Z+
    6da4:	1d 92       	st	X+, r1
    6da6:	15 90       	lpm	r1, Z+
    6da8:	1d 92       	st	X+, r1
    6daa:	15 90       	lpm	r1, Z+
    6dac:	1d 92       	st	X+, r1
    6dae:	15 90       	lpm	r1, Z+
    6db0:	1d 92       	st	X+, r1
    6db2:	15 90       	lpm	r1, Z+
    6db4:	1d 92       	st	X+, r1
    6db6:	15 90       	lpm	r1, Z+
    6db8:	1d 92       	st	X+, r1
    6dba:	15 90       	lpm	r1, Z+
    6dbc:	1d 92       	st	X+, r1
    6dbe:	15 90       	lpm	r1, Z+
    6dc0:	1d 92       	st	X+, r1
    6dc2:	15 90       	lpm	r1, Z+
    6dc4:	1d 92       	st	X+, r1
    6dc6:	15 90       	lpm	r1, Z+
    6dc8:	1d 92       	st	X+, r1
    6dca:	15 90       	lpm	r1, Z+
    6dcc:	1d 92       	st	X+, r1
    6dce:	15 90       	lpm	r1, Z+
    6dd0:	1d 92       	st	X+, r1
    6dd2:	15 90       	lpm	r1, Z+
    6dd4:	1d 92       	st	X+, r1
    6dd6:	15 90       	lpm	r1, Z+
    6dd8:	1d 92       	st	X+, r1
    6dda:	15 90       	lpm	r1, Z+
    6ddc:	1d 92       	st	X+, r1
    6dde:	15 90       	lpm	r1, Z+
    6de0:	1d 92       	st	X+, r1
    6de2:	15 90       	lpm	r1, Z+
    6de4:	1d 92       	st	X+, r1
    6de6:	15 90       	lpm	r1, Z+
    6de8:	1d 92       	st	X+, r1
    6dea:	15 90       	lpm	r1, Z+
    6dec:	1d 92       	st	X+, r1
    6dee:	15 90       	lpm	r1, Z+
    6df0:	1d 92       	st	X+, r1
    6df2:	15 90       	lpm	r1, Z+
    6df4:	1d 92       	st	X+, r1
    6df6:	15 90       	lpm	r1, Z+
    6df8:	1d 92       	st	X+, r1
    6dfa:	15 90       	lpm	r1, Z+
    6dfc:	1d 92       	st	X+, r1
    6dfe:	15 90       	lpm	r1, Z+
    6e00:	1d 92       	st	X+, r1
    6e02:	15 90       	lpm	r1, Z+
    6e04:	1d 92       	st	X+, r1
    6e06:	15 90       	lpm	r1, Z+
    6e08:	1d 92       	st	X+, r1
    6e0a:	15 90       	lpm	r1, Z+
    6e0c:	1d 92       	st	X+, r1
    6e0e:	15 90       	lpm	r1, Z+
    6e10:	1d 92       	st	X+, r1
    6e12:	15 90       	lpm	r1, Z+
    6e14:	1d 92       	st	X+, r1
    6e16:	15 90       	lpm	r1, Z+
    6e18:	1d 92       	st	X+, r1
	clr r1
    6e1a:	11 24       	eor	r1, r1
	ret
    6e1c:	08 95       	ret

00006e1e <CopyRamTile>:
; r24=Source RAM tile index
; r22=Dest RAM tile index
;************************************
CopyRamTile:

	ldi r18,TILE_HEIGHT*TILE_WIDTH
    6e1e:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	ldi ZL,lo8(ram_tiles)
    6e20:	e0 e5       	ldi	r30, 0x50	; 80
	ldi ZH,hi8(ram_tiles)
    6e22:	f5 e0       	ldi	r31, 0x05	; 5
	mul r24,r18
    6e24:	82 9f       	mul	r24, r18
	add ZL,r0
    6e26:	e0 0d       	add	r30, r0
	adc ZH,r1
    6e28:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    6e2a:	a0 e5       	ldi	r26, 0x50	; 80
	ldi XH,hi8(ram_tiles)
    6e2c:	b5 e0       	ldi	r27, 0x05	; 5
	mul r22,r18
    6e2e:	62 9f       	mul	r22, r18
	add XL,r0
    6e30:	a0 0d       	add	r26, r0
	adc XH,r1
    6e32:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	ld r1,Z+
	st X+,r1
.endr
    6e34:	11 90       	ld	r1, Z+
    6e36:	1d 92       	st	X+, r1
    6e38:	11 90       	ld	r1, Z+
    6e3a:	1d 92       	st	X+, r1
    6e3c:	11 90       	ld	r1, Z+
    6e3e:	1d 92       	st	X+, r1
    6e40:	11 90       	ld	r1, Z+
    6e42:	1d 92       	st	X+, r1
    6e44:	11 90       	ld	r1, Z+
    6e46:	1d 92       	st	X+, r1
    6e48:	11 90       	ld	r1, Z+
    6e4a:	1d 92       	st	X+, r1
    6e4c:	11 90       	ld	r1, Z+
    6e4e:	1d 92       	st	X+, r1
    6e50:	11 90       	ld	r1, Z+
    6e52:	1d 92       	st	X+, r1
    6e54:	11 90       	ld	r1, Z+
    6e56:	1d 92       	st	X+, r1
    6e58:	11 90       	ld	r1, Z+
    6e5a:	1d 92       	st	X+, r1
    6e5c:	11 90       	ld	r1, Z+
    6e5e:	1d 92       	st	X+, r1
    6e60:	11 90       	ld	r1, Z+
    6e62:	1d 92       	st	X+, r1
    6e64:	11 90       	ld	r1, Z+
    6e66:	1d 92       	st	X+, r1
    6e68:	11 90       	ld	r1, Z+
    6e6a:	1d 92       	st	X+, r1
    6e6c:	11 90       	ld	r1, Z+
    6e6e:	1d 92       	st	X+, r1
    6e70:	11 90       	ld	r1, Z+
    6e72:	1d 92       	st	X+, r1
    6e74:	11 90       	ld	r1, Z+
    6e76:	1d 92       	st	X+, r1
    6e78:	11 90       	ld	r1, Z+
    6e7a:	1d 92       	st	X+, r1
    6e7c:	11 90       	ld	r1, Z+
    6e7e:	1d 92       	st	X+, r1
    6e80:	11 90       	ld	r1, Z+
    6e82:	1d 92       	st	X+, r1
    6e84:	11 90       	ld	r1, Z+
    6e86:	1d 92       	st	X+, r1
    6e88:	11 90       	ld	r1, Z+
    6e8a:	1d 92       	st	X+, r1
    6e8c:	11 90       	ld	r1, Z+
    6e8e:	1d 92       	st	X+, r1
    6e90:	11 90       	ld	r1, Z+
    6e92:	1d 92       	st	X+, r1
    6e94:	11 90       	ld	r1, Z+
    6e96:	1d 92       	st	X+, r1
    6e98:	11 90       	ld	r1, Z+
    6e9a:	1d 92       	st	X+, r1
    6e9c:	11 90       	ld	r1, Z+
    6e9e:	1d 92       	st	X+, r1
    6ea0:	11 90       	ld	r1, Z+
    6ea2:	1d 92       	st	X+, r1
    6ea4:	11 90       	ld	r1, Z+
    6ea6:	1d 92       	st	X+, r1
    6ea8:	11 90       	ld	r1, Z+
    6eaa:	1d 92       	st	X+, r1
    6eac:	11 90       	ld	r1, Z+
    6eae:	1d 92       	st	X+, r1
    6eb0:	11 90       	ld	r1, Z+
    6eb2:	1d 92       	st	X+, r1
    6eb4:	11 90       	ld	r1, Z+
    6eb6:	1d 92       	st	X+, r1
    6eb8:	11 90       	ld	r1, Z+
    6eba:	1d 92       	st	X+, r1
    6ebc:	11 90       	ld	r1, Z+
    6ebe:	1d 92       	st	X+, r1
    6ec0:	11 90       	ld	r1, Z+
    6ec2:	1d 92       	st	X+, r1
    6ec4:	11 90       	ld	r1, Z+
    6ec6:	1d 92       	st	X+, r1
    6ec8:	11 90       	ld	r1, Z+
    6eca:	1d 92       	st	X+, r1
    6ecc:	11 90       	ld	r1, Z+
    6ece:	1d 92       	st	X+, r1
    6ed0:	11 90       	ld	r1, Z+
    6ed2:	1d 92       	st	X+, r1
    6ed4:	11 90       	ld	r1, Z+
    6ed6:	1d 92       	st	X+, r1
    6ed8:	11 90       	ld	r1, Z+
    6eda:	1d 92       	st	X+, r1
    6edc:	11 90       	ld	r1, Z+
    6ede:	1d 92       	st	X+, r1
    6ee0:	11 90       	ld	r1, Z+
    6ee2:	1d 92       	st	X+, r1
    6ee4:	11 90       	ld	r1, Z+
    6ee6:	1d 92       	st	X+, r1
    6ee8:	11 90       	ld	r1, Z+
    6eea:	1d 92       	st	X+, r1
    6eec:	11 90       	ld	r1, Z+
    6eee:	1d 92       	st	X+, r1
    6ef0:	11 90       	ld	r1, Z+
    6ef2:	1d 92       	st	X+, r1
    6ef4:	11 90       	ld	r1, Z+
    6ef6:	1d 92       	st	X+, r1
    6ef8:	11 90       	ld	r1, Z+
    6efa:	1d 92       	st	X+, r1
    6efc:	11 90       	ld	r1, Z+
    6efe:	1d 92       	st	X+, r1
    6f00:	11 90       	ld	r1, Z+
    6f02:	1d 92       	st	X+, r1
    6f04:	11 90       	ld	r1, Z+
    6f06:	1d 92       	st	X+, r1
    6f08:	11 90       	ld	r1, Z+
    6f0a:	1d 92       	st	X+, r1
    6f0c:	11 90       	ld	r1, Z+
    6f0e:	1d 92       	st	X+, r1
    6f10:	11 90       	ld	r1, Z+
    6f12:	1d 92       	st	X+, r1
    6f14:	11 90       	ld	r1, Z+
    6f16:	1d 92       	st	X+, r1
    6f18:	11 90       	ld	r1, Z+
    6f1a:	1d 92       	st	X+, r1
    6f1c:	11 90       	ld	r1, Z+
    6f1e:	1d 92       	st	X+, r1
    6f20:	11 90       	ld	r1, Z+
    6f22:	1d 92       	st	X+, r1
    6f24:	11 90       	ld	r1, Z+
    6f26:	1d 92       	st	X+, r1
    6f28:	11 90       	ld	r1, Z+
    6f2a:	1d 92       	st	X+, r1
    6f2c:	11 90       	ld	r1, Z+
    6f2e:	1d 92       	st	X+, r1
    6f30:	11 90       	ld	r1, Z+
    6f32:	1d 92       	st	X+, r1
	clr r1
    6f34:	11 24       	eor	r1, r1
	ret
    6f36:	08 95       	ret

00006f38 <BlitSprite>:
; r22=RAM tile index (bt)
; r21:r20=Y:X
; r19:r18=DY:DX
;************************************
BlitSprite:
	push r16
    6f38:	0f 93       	push	r16
	push r17
    6f3a:	1f 93       	push	r17
	push YL
    6f3c:	cf 93       	push	r28
	push YH
    6f3e:	df 93       	push	r29

	;src=sprites_tiletable_lo+(sprites[i].tileIndex*TILE_HEIGHT*TILE_WIDTH)
	ldi r25,SPRITE_STRUCT_SIZE
    6f40:	94 e0       	ldi	r25, 0x04	; 4
	mul r24,r25
    6f42:	89 9f       	mul	r24, r25

	ldi ZL,lo8(sprites)	
    6f44:	e0 e1       	ldi	r30, 0x10	; 16
	ldi ZH,hi8(sprites)	
    6f46:	f5 e0       	ldi	r31, 0x05	; 5
	add ZL,r0
    6f48:	e0 0d       	add	r30, r0
	adc ZH,r1
    6f4a:	f1 1d       	adc	r31, r1

	ldd r16,Z+sprFlags
    6f4c:	03 81       	ldd	r16, Z+3	; 0x03

	;8x16 multiply
	ldd r24,Z+sprTileIndex
    6f4e:	82 81       	ldd	r24, Z+2	; 0x02
	ldi r30,TILE_WIDTH*TILE_HEIGHT
    6f50:	e0 e4       	ldi	r30, 0x40	; 64
	mul r24,r30
    6f52:	8e 9f       	mul	r24, r30
	movw r26,r0
    6f54:	d0 01       	movw	r26, r0
	
	;get tile bank addr
	ldi r25,4*2
    6f56:	98 e0       	ldi	r25, 0x08	; 8
	mul r16,r25
    6f58:	09 9f       	mul	r16, r25
	ldi YL,lo8(sprites_tile_banks)	
    6f5a:	c4 ea       	ldi	r28, 0xA4	; 164
	ldi YH,hi8(sprites_tile_banks)	
    6f5c:	dc e0       	ldi	r29, 0x0C	; 12
	clr r0
    6f5e:	00 24       	eor	r0, r0
	add YL,r1
    6f60:	c1 0d       	add	r28, r1
	adc YH,r0		
    6f62:	d0 1d       	adc	r29, r0
	ldd ZL,Y+0
    6f64:	e8 81       	ld	r30, Y
	ldd ZH,Y+1
    6f66:	f9 81       	ldd	r31, Y+1	; 0x01
	add ZL,r26	;tile data src
    6f68:	ea 0f       	add	r30, r26
	adc ZH,r27
    6f6a:	fb 1f       	adc	r31, r27
	
	;dest=ram_tiles+(bt*TILE_HEIGHT*TILE_WIDTH)
	ldi XL,lo8(ram_tiles)	
    6f6c:	a0 e5       	ldi	r26, 0x50	; 80
	ldi XH,hi8(ram_tiles)
    6f6e:	b5 e0       	ldi	r27, 0x05	; 5
	ldi r25,TILE_WIDTH*TILE_HEIGHT
    6f70:	90 e4       	ldi	r25, 0x40	; 64
	mul r22,r25
    6f72:	69 9f       	mul	r22, r25
	add XL,r0
    6f74:	a0 0d       	add	r26, r0
	adc XH,r1
    6f76:	b1 1d       	adc	r27, r1
			srcXdiff=destXdiff;
			src+=destXdiff;
		}
	}
	*/
	clr r1
    6f78:	11 24       	eor	r1, r1
	clr YH		;hi8(srcXdiff)
    6f7a:	dd 27       	eor	r29, r29

	cpi r20,0	
    6f7c:	40 30       	cpi	r20, 0x00	; 0
	brne x_2nd_tile
    6f7e:	51 f4       	brne	.+20     	; 0x6f94 <x_2nd_tile>
	
	add XL,r18	;dest+=dx
    6f80:	a2 0f       	add	r26, r18
	adc XH,r1
    6f82:	b1 1d       	adc	r27, r1
	mov r24,r18	;destXdiff=dx
    6f84:	82 2f       	mov	r24, r18
	mov YL,r18	;srcXdiff=dx
    6f86:	c2 2f       	mov	r28, r18

	sbrs r16,SPRITE_FLIP_X_BIT
    6f88:	00 ff       	sbrs	r16, 0
	rjmp x_check_end
    6f8a:	11 c0       	rjmp	.+34     	; 0x6fae <x_check_end>

	adiw ZL,(TILE_WIDTH-1)	;src+=7
    6f8c:	37 96       	adiw	r30, 0x07	; 7
	ldi YL,TILE_WIDTH*2		;srcXdiff=((TILE_WIDTH*2)-dx);
    6f8e:	c0 e1       	ldi	r28, 0x10	; 16
	sub YL,r18	
    6f90:	c2 1b       	sub	r28, r18
	rjmp x_check_end
    6f92:	0d c0       	rjmp	.+26     	; 0x6fae <x_check_end>

00006f94 <x_2nd_tile>:

x_2nd_tile:
	ldi r24,TILE_WIDTH
    6f94:	88 e0       	ldi	r24, 0x08	; 8
	sub r24,r18		;8-DX = xdiff for dest
    6f96:	82 1b       	sub	r24, r18

	sbrc r16,SPRITE_FLIP_X_BIT
    6f98:	00 fd       	sbrc	r16, 0
	rjmp x2_flip_x
    6f9a:	04 c0       	rjmp	.+8      	; 0x6fa4 <x2_flip_x>

	mov YL,r24		;srcXdiff=destXdiff;
    6f9c:	c8 2f       	mov	r28, r24
	add ZL,r24		;src+=destXdiff;
    6f9e:	e8 0f       	add	r30, r24
	adc ZH,r1	
    6fa0:	f1 1d       	adc	r31, r1
	rjmp x_check_end
    6fa2:	05 c0       	rjmp	.+10     	; 0x6fae <x_check_end>

00006fa4 <x2_flip_x>:

x2_flip_x:
	ldi YL,TILE_WIDTH
    6fa4:	c8 e0       	ldi	r28, 0x08	; 8
	add YL,r18		;srcXdiff=TILE_WIDTH+dx;	
    6fa6:	c2 0f       	add	r28, r18
	add ZL,r18		;src+=dx;
    6fa8:	e2 0f       	add	r30, r18
	adc ZH,r1
    6faa:	f1 1d       	adc	r31, r1
	sbiw ZL,1		;src--;
    6fac:	31 97       	sbiw	r30, 0x01	; 1

00006fae <x_check_end>:
		}else{
			src+=(ydiff*TILE_WIDTH);
		}
	}
	*/
	cpi r21,0
    6fae:	50 30       	cpi	r21, 0x00	; 0
	brne y_2nd_tile
    6fb0:	51 f4       	brne	.+20     	; 0x6fc6 <y_2nd_tile>

	ldi r25,TILE_WIDTH	;dest+=(dy*TILE_WIDTH)
    6fb2:	98 e0       	ldi	r25, 0x08	; 8
	mul r25,r19			
    6fb4:	93 9f       	mul	r25, r19
	add XL,r0
    6fb6:	a0 0d       	add	r26, r0
	adc XH,r1
    6fb8:	b1 1d       	adc	r27, r1

	mov r25,r19			;ydiff=dy
    6fba:	93 2f       	mov	r25, r19

	//sbrc r16,SPRITE_FLIP_Y_BIT
	//adiw ZL,(TILE_WIDTH*(TILE_HEIGHT-1))

	sbrc r16,SPRITE_FLIP_Y_BIT
    6fbc:	01 fd       	sbrc	r16, 1
	subi ZL,lo8(-(TILE_WIDTH*(TILE_HEIGHT-1)));src+=(TILE_WIDTH*(TILE_HEIGHT-1));
    6fbe:	e8 5c       	subi	r30, 0xC8	; 200
	sbrc r16,SPRITE_FLIP_Y_BIT
    6fc0:	01 fd       	sbrc	r16, 1
	sbci ZH,hi8(-(TILE_WIDTH*(TILE_HEIGHT-1)))
    6fc2:	ff 4f       	sbci	r31, 0xFF	; 255


	rjmp y_check_end
    6fc4:	0a c0       	rjmp	.+20     	; 0x6fda <y_check_end>

00006fc6 <y_2nd_tile>:

y_2nd_tile:
	ldi r25,TILE_HEIGHT	;ydiff=(TILE_HEIGHT-dy)
    6fc6:	98 e0       	ldi	r25, 0x08	; 8
	sub r25,r19	
    6fc8:	93 1b       	sub	r25, r19
	
	mov r22,r19			;temp=dy-1
    6fca:	63 2f       	mov	r22, r19
	dec r22
    6fcc:	6a 95       	dec	r22
	sbrs r16,SPRITE_FLIP_Y_BIT
    6fce:	01 ff       	sbrs	r16, 1
	mov r22,r25			;temp=ydiff
    6fd0:	69 2f       	mov	r22, r25

	ldi r21,TILE_WIDTH	;src+=(temp*TILE_WIDTH);
    6fd2:	58 e0       	ldi	r21, 0x08	; 8
	mul r21,r22
    6fd4:	56 9f       	mul	r21, r22
	add ZL,r0
    6fd6:	e0 0d       	add	r30, r0
	adc ZH,r1	
    6fd8:	f1 1d       	adc	r31, r1

00006fda <y_check_end>:
y_check_end:	
	
	//if(flags&SPRITE_FLIP_X){
	//	step=-1;
	//}
	ser r22		;step=-1
    6fda:	6f ef       	ldi	r22, 0xFF	; 255
	ser r23
    6fdc:	7f ef       	ldi	r23, 0xFF	; 255
	sbrs r16,SPRITE_FLIP_X_BIT
    6fde:	00 ff       	sbrs	r16, 0
	ldi r22,1	;step=1
    6fe0:	61 e0       	ldi	r22, 0x01	; 1
	sbrs r16,SPRITE_FLIP_X_BIT
    6fe2:	00 ff       	sbrs	r16, 0
	clr r23
    6fe4:	77 27       	eor	r23, r23

	//if(flags&SPRITE_FLIP_Y){
	//	srcXdiff-=(TILE_WIDTH*2);
	//}
	sbrc r16,SPRITE_FLIP_Y_BIT
    6fe6:	01 fd       	sbrc	r16, 1
	sbiw YL,(TILE_WIDTH*2)
    6fe8:	60 97       	sbiw	r28, 0x10	; 16
	;r24	= destXdiff
	;r25	= ydiff
	;X		= dest
	;Y		= srcXdiff
	;Z		= src
	clr r1
    6fea:	11 24       	eor	r1, r1
	ldi r19,TRANSLUCENT_COLOR
    6fec:	3e ef       	ldi	r19, 0xFE	; 254

	ldi r21,TILE_HEIGHT
    6fee:	58 e0       	ldi	r21, 0x08	; 8
	sub r21,r25 	;yspan=(TILE_HEIGHT-ydiff)
    6ff0:	59 1b       	sub	r21, r25

00006ff2 <y_loop>:

y_loop:
	ldi r20,TILE_WIDTH
    6ff2:	48 e0       	ldi	r20, 0x08	; 8
	sub r20,r24 	;xspan=(TILE_WIDTH-destXdiff)
    6ff4:	48 1b       	sub	r20, r24

00006ff6 <x_loop>:

x_loop:
	lpm r18,Z		;px=pgm_read_byte(src);
    6ff6:	24 91       	lpm	r18, Z
	cpse r18,r19	;if(px!=TRANSLUCENT_COLOR)
    6ff8:	23 13       	cpse	r18, r19
	st X,r18		;*dest=px;
    6ffa:	2c 93       	st	X, r18
	adiw XL,1
    6ffc:	11 96       	adiw	r26, 0x01	; 1
	add ZL,r22		;src+=step;
    6ffe:	e6 0f       	add	r30, r22
	adc ZH,r23
    7000:	f7 1f       	adc	r31, r23
	dec r20
    7002:	4a 95       	dec	r20
	brne x_loop
    7004:	c1 f7       	brne	.-16     	; 0x6ff6 <x_loop>

	add ZL,YL		;src+=srcXdiff
    7006:	ec 0f       	add	r30, r28
	adc ZH,YH
    7008:	fd 1f       	adc	r31, r29
	add XL,r24		;dest+=destXdiff
    700a:	a8 0f       	add	r26, r24
	adc XH,r1
    700c:	b1 1d       	adc	r27, r1
	dec r21
    700e:	5a 95       	dec	r21
	brne y_loop
    7010:	81 f7       	brne	.-32     	; 0x6ff2 <y_loop>


	pop YH
    7012:	df 91       	pop	r29
	pop YL
    7014:	cf 91       	pop	r28
	pop r17
    7016:	1f 91       	pop	r17
	pop r16
    7018:	0f 91       	pop	r16
	ret
    701a:	08 95       	ret

0000701c <__vector_13>:

;***************************************************************************
; Main Video sync interrupt
;***************************************************************************
TIMER1_COMPA_vect:
	push r0
    701c:	0f 92       	push	r0
	push r1
    701e:	1f 92       	push	r1
	push ZL;2
    7020:	ef 93       	push	r30
	push ZH;2
    7022:	ff 93       	push	r31
	
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    7024:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    7026:	ef 93       	push	r30

	;Read timer offset since rollover to remove cycles 
	;and conpensate for interrupt latency.
	;This is nessesary to eliminate frame jitter.
	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    7028:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,0x12 ;MIN_INT_LATENCY
    702c:	e2 51       	subi	r30, 0x12	; 18

	ldi ZH,1
    702e:	f1 e0       	ldi	r31, 0x01	; 1

00007030 <latency_loop>:
latency_loop:
	cp ZL,ZH
    7030:	ef 17       	cp	r30, r31
	brlo .		;advance PC to next instruction	
    7032:	00 f0       	brcs	.+0      	; 0x7034 <latency_loop+0x4>
	inc ZH
    7034:	f3 95       	inc	r31
	cpi ZH,10
    7036:	fa 30       	cpi	r31, 0x0A	; 10
	brlo latency_loop
    7038:	d8 f3       	brcs	.-10     	; 0x7030 <latency_loop>
	jmp .
    703a:	0c 94 1f 38 	jmp	0x703e	; 0x703e <latency_loop+0xe>
	
	;decrement sync pulse counter
	lds ZL,sync_pulse
    703e:	e0 91 b7 0c 	lds	r30, 0x0CB7
	dec ZL
    7042:	ea 95       	dec	r30
	sts sync_pulse,ZL
    7044:	e0 93 b7 0c 	sts	0x0CB7, r30

	;process sync phases
	lds ZH,sync_phase
    7048:	f0 91 b6 0c 	lds	r31, 0x0CB6
	sbrc ZH,0
    704c:	f0 fd       	sbrc	r31, 0
	rjmp sync_hsync
    704e:	57 c0       	rjmp	.+174    	; 0x70fe <sync_hsync>
; Note: TCNT1 should be equal to 
; 0x68 on the cbi
; 0xAC on the sbi
; pulse duration: 68 clocks
;***************************************************		
	cpi ZL,SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    7050:	ec 30       	cpi	r30, 0x0C	; 12
	brlo sync_eq
    7052:	98 f0       	brcs	.+38     	; 0x707a <sync_eq>

	;Set HDRIVE to double rate during VSYNC
	ldi ZH,hi8(HDRIVE_CL_TWICE)
    7054:	f3 e0       	ldi	r31, 0x03	; 3
	sts _SFR_MEM_ADDR(OCR1AH),ZH	
    7056:	f0 93 89 00 	sts	0x0089, r31
	ldi ZH,lo8(HDRIVE_CL_TWICE)
    705a:	fd e8       	ldi	r31, 0x8D	; 141
	sts _SFR_MEM_ADDR(OCR1AL),ZH
    705c:	f0 93 88 00 	sts	0x0088, r31

	bst ZL,0
    7060:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0x68
    7062:	28 98       	cbi	0x05, 0	; 5
	brtc sync_pre_eq_no_sound_update
    7064:	26 f4       	brtc	.+8      	; 0x706e <sync_pre_eq_no_sound_update>
	ldi ZL,1	;indicate update_sound to generate the SBI for pre-eq
    7066:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    7068:	0e 94 06 39 	call	0x720c	; 0x720c <update_sound>
	rjmp sync_end
    706c:	b7 c0       	rjmp	.+366    	; 0x71dc <sync_end>

0000706e <sync_pre_eq_no_sound_update>:

sync_pre_eq_no_sound_update:
	WAIT ZL,64
    706e:	e5 e1       	ldi	r30, 0x15	; 21
    7070:	ea 95       	dec	r30
    7072:	f1 f7       	brne	.-4      	; 0x7070 <sync_pre_eq_no_sound_update+0x2>
    7074:	00 00       	nop
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    7076:	28 9a       	sbi	0x05, 0	; 5
		
	rjmp sync_end
    7078:	b1 c0       	rjmp	.+354    	; 0x71dc <sync_end>

0000707a <sync_eq>:
; 0x68  on the cbi
; 0x36E on the sbi
; low pulse duration: 774 clocks
;***************************************************	
sync_eq:
	cpi ZL,SYNC_POST_EQ_PULSES
    707a:	e6 30       	cpi	r30, 0x06	; 6
	brlo sync_post_eq
    707c:	38 f1       	brcs	.+78     	; 0x70cc <sync_post_eq>

	rjmp .
    707e:	00 c0       	rjmp	.+0      	; 0x7080 <sync_eq+0x6>
	rjmp .
    7080:	00 c0       	rjmp	.+0      	; 0x7082 <sync_eq+0x8>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    7082:	28 98       	cbi	0x05, 0	; 5

	bst ZL,0
    7084:	e0 fb       	bst	r30, 0
	ldi ZL,4
    7086:	e4 e0       	ldi	r30, 0x04	; 4
	brtc sync_eq_skip
    7088:	16 f4       	brtc	.+4      	; 0x708e <sync_eq_skip>
	
	call update_sound
    708a:	0e 94 06 39 	call	0x720c	; 0x720c <update_sound>

0000708e <sync_eq_skip>:
	;enable interupt to bring back sync 
	;level instead of wasting cycles
	;in a big wait loop

 	;clear interrupt flag
	ldi ZL,(1<<OCF1B)
    708e:	e4 e0       	ldi	r30, 0x04	; 4
	sts _SFR_MEM_ADDR(TIFR1),ZL 
    7090:	e0 93 36 00 	sts	0x0036, r30
	
	;generate interrupt on match
	;for timer1 compare unit b
	ldi ZL,(1<<OCIE1A)+(1<<OCIE1B)
    7094:	e6 e0       	ldi	r30, 0x06	; 6
	sts _SFR_MEM_ADDR(TIMSK1),ZL
    7096:	e0 93 6f 00 	sts	0x006F, r30

	rjmp sync_end
    709a:	a0 c0       	rjmp	.+320    	; 0x71dc <sync_end>

0000709c <__vector_14>:
; during VSYNC EQ pulses to recover ~5000 cycles per field
; with interrupt latency conpensation
; 37 cycles
;**********************************************************	
TIMER1_COMPB_vect:
	push ZL
    709c:	ef 93       	push	r30
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    709e:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    70a0:	ef 93       	push	r30

	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    70a2:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,62+31 ;0x5D ;MIN_INT_LATENCY
    70a6:	ed 55       	subi	r30, 0x5D	; 93

	cpi ZL,1
    70a8:	e1 30       	cpi	r30, 0x01	; 1
	brlo .		;advance PC to next instruction
    70aa:	00 f0       	brcs	.+0      	; 0x70ac <__vector_14+0x10>

	cpi ZL,2
    70ac:	e2 30       	cpi	r30, 0x02	; 2
	brlo .		;advance PC to next instruction
    70ae:	00 f0       	brcs	.+0      	; 0x70b0 <__vector_14+0x14>

	cpi ZL,3
    70b0:	e3 30       	cpi	r30, 0x03	; 3
	brlo .		;advance PC to next instruction
    70b2:	00 f0       	brcs	.+0      	; 0x70b4 <__vector_14+0x18>

	cpi ZL,4
    70b4:	e4 30       	cpi	r30, 0x04	; 4
	brlo .		;advance PC to next instruction
    70b6:	00 f0       	brcs	.+0      	; 0x70b8 <__vector_14+0x1c>

	cpi ZL,5
    70b8:	e5 30       	cpi	r30, 0x05	; 5
	brlo .		;advance PC to next instruction
    70ba:	00 f0       	brcs	.+0      	; 0x70bc <__vector_14+0x20>

 	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;68
    70bc:	28 9a       	sbi	0x05, 0	; 5
	ldi ZL,(1<<OCIE1A) ; disable OCIE1B 
    70be:	e2 e0       	ldi	r30, 0x02	; 2
	sts _SFR_MEM_ADDR(TIMSK1),ZL ;stop generate interrupt on match
    70c0:	e0 93 6f 00 	sts	0x006F, r30
	
	;restore flags
	pop ZL
    70c4:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL	
    70c6:	ef bf       	out	0x3f, r30	; 63
	pop ZL
    70c8:	ef 91       	pop	r30
	reti
    70ca:	18 95       	reti

000070cc <sync_post_eq>:
; 0x68 on the cbi
; 0xAC on the sbi
; pulse cycles: 68 clocks
;***************************************************	
sync_post_eq:	
	rjmp .
    70cc:	00 c0       	rjmp	.+0      	; 0x70ce <sync_post_eq+0x2>

	bst ZL,0
    70ce:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    70d0:	28 98       	cbi	0x05, 0	; 5
	brtc sync_post_eq_no_sound_update
    70d2:	26 f4       	brtc	.+8      	; 0x70dc <sync_post_eq_no_sound_update>
	ldi ZL,1	
    70d4:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    70d6:	0e 94 06 39 	call	0x720c	; 0x720c <update_sound>
	rjmp sync_pre_eq_cont
    70da:	05 c0       	rjmp	.+10     	; 0x70e6 <sync_pre_eq_cont>

000070dc <sync_post_eq_no_sound_update>:

sync_post_eq_no_sound_update:
	WAIT ZL,64
    70dc:	e5 e1       	ldi	r30, 0x15	; 21
    70de:	ea 95       	dec	r30
    70e0:	f1 f7       	brne	.-4      	; 0x70de <sync_post_eq_no_sound_update+0x2>
    70e2:	00 00       	nop

	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN 
    70e4:	28 9a       	sbi	0x05, 0	; 5

000070e6 <sync_pre_eq_cont>:

sync_pre_eq_cont:	
	;check if it's the last vsync pulse
	lds ZL,sync_pulse
    70e6:	e0 91 b7 0c 	lds	r30, 0x0CB7
	cpi ZL,0
    70ea:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2 ;skip rjmp
    70ec:	09 f0       	breq	.+2      	; 0x70f0 <sync_pre_eq_cont+0xa>
	rjmp sync_end
    70ee:	76 c0       	rjmp	.+236    	; 0x71dc <sync_end>
	
	;update sync flags
	ldi ZL,SYNC_HSYNC_PULSES
    70f0:	ed ef       	ldi	r30, 0xFD	; 253
	sts sync_pulse,ZL
    70f2:	e0 93 b7 0c 	sts	0x0CB7, r30
	ldi ZL,1
    70f6:	e1 e0       	ldi	r30, 0x01	; 1
	sts sync_phase,ZL
    70f8:	e0 93 b6 0c 	sts	0x0CB6, r30
	
	rjmp sync_end
    70fc:	6f c0       	rjmp	.+222    	; 0x71dc <sync_end>

000070fe <sync_hsync>:
; 0xF0 on the sbi
; pulse duration: 136 clocks
;***************************************************	

	; Set HDRIVE to normal rate
	ldi ZL,hi8(HDRIVE_CL)
    70fe:	e7 e0       	ldi	r30, 0x07	; 7
	sts _SFR_MEM_ADDR(OCR1AH),ZL	
    7100:	e0 93 89 00 	sts	0x0089, r30
	ldi ZL,lo8(HDRIVE_CL)
    7104:	eb e1       	ldi	r30, 0x1B	; 27
	sts _SFR_MEM_ADDR(OCR1AL),ZL
    7106:	e0 93 88 00 	sts	0x0088, r30
	rjmp .
    710a:	00 c0       	rjmp	.+0      	; 0x710c <sync_hsync+0xe>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    710c:	28 98       	cbi	0x05, 0	; 5
	
	ldi ZL,2	;indicate update_sound to generate the SBI for pre-eq
    710e:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    7110:	00 c0       	rjmp	.+0      	; 0x7112 <sync_hsync+0x14>
	call update_sound
    7112:	0e 94 06 39 	call	0x720c	; 0x720c <update_sound>

	;check if we have reached the first line to render
	ldi ZH,SYNC_HSYNC_PULSES
    7116:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    7118:	00 90 bd 0c 	lds	r0, 0x0CBD
	sub ZH,r0				
    711c:	f0 19       	sub	r31, r0
	lds ZL,sync_pulse
    711e:	e0 91 b7 0c 	lds	r30, 0x0CB7
	cp ZL,ZH
    7122:	ef 17       	cp	r30, r31
	brsh no_render
    7124:	d0 f4       	brcc	.+52     	; 0x715a <no_render>

	ldi ZH,SYNC_HSYNC_PULSES
    7126:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    7128:	00 90 bd 0c 	lds	r0, 0x0CBD
	sub ZH,r0				
    712c:	f0 19       	sub	r31, r0
	lds r0,render_lines_count
    712e:	00 90 be 0c 	lds	r0, 0x0CBE
	sub ZH,r0			
    7132:	f0 19       	sub	r31, r0
	cp ZL,ZH
    7134:	ef 17       	cp	r30, r31
	brlo no_render
    7136:	88 f0       	brcs	.+34     	; 0x715a <no_render>

	;push r1-r29
	ldi ZL,29
    7138:	ed e1       	ldi	r30, 0x1D	; 29
	clr ZH
    713a:	ff 27       	eor	r31, r31

0000713c <push_loop>:
push_loop:
	ld r0,Z	;load value from register file
    713c:	00 80       	ld	r0, Z
	push r0
    713e:	0f 92       	push	r0
	dec ZL
    7140:	ea 95       	dec	r30
	brne push_loop	
    7142:	e1 f7       	brne	.-8      	; 0x713c <push_loop>

	;timing compensation
	;to insure we always call the video mode 
	;routine at the same cycle	
	WAIT r16,230-(AUDIO_OUT_HSYNC_CYCLES)
    7144:	06 e0       	ldi	r16, 0x06	; 6
    7146:	0a 95       	dec	r16
    7148:	f1 f7       	brne	.-4      	; 0x7146 <push_loop+0xa>

	call VMODE_FUNC		;TCNT1=0x234
    714a:	0e 94 cc 34 	call	0x6998	; 0x6998 <sub_video_mode3>

	;pop r1-r29
	ldi ZL,1
    714e:	e1 e0       	ldi	r30, 0x01	; 1
	clr ZH
    7150:	ff 27       	eor	r31, r31

00007152 <pop_loop>:
pop_loop:
	pop r0
    7152:	0f 90       	pop	r0
	st Z+,r0 ;store value to register file
    7154:	01 92       	st	Z+, r0
	cpi ZL,30
    7156:	ee 31       	cpi	r30, 0x1E	; 30
	brlo pop_loop	
    7158:	e0 f3       	brcs	.-8      	; 0x7152 <pop_loop>

0000715a <no_render>:

no_render:

	;check if it's the last hsync pulse and we are 
	;ready for VSYNC
	lds ZL,sync_pulse
    715a:	e0 91 b7 0c 	lds	r30, 0x0CB7
	cpi ZL,0
    715e:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2
    7160:	09 f0       	breq	.+2      	; 0x7164 <no_render+0xa>
	rjmp sync_end
    7162:	3c c0       	rjmp	.+120    	; 0x71dc <sync_end>
;***************************************************
; Process VSYNC stuff
;***************************************************
	
	;push C-call registers
	push r18
    7164:	2f 93       	push	r18
	push r19
    7166:	3f 93       	push	r19
	push r20
    7168:	4f 93       	push	r20
	push r21
    716a:	5f 93       	push	r21
	push r22
    716c:	6f 93       	push	r22
	push r23
    716e:	7f 93       	push	r23
	push r24
    7170:	8f 93       	push	r24
	push r25
    7172:	9f 93       	push	r25
	push r26
    7174:	af 93       	push	r26
	push r27
    7176:	bf 93       	push	r27

	sei ;must enable ints for re-entrant sync pulses
    7178:	78 94       	sei
	clr r1
    717a:	11 24       	eor	r1, r1

	;set vsync flags
	clr ZL
    717c:	ee 27       	eor	r30, r30
	sts sync_phase,ZL
    717e:	e0 93 b6 0c 	sts	0x0CB6, r30
	ldi ZL,SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    7182:	e2 e1       	ldi	r30, 0x12	; 18
	sts sync_pulse,ZL
    7184:	e0 93 b7 0c 	sts	0x0CB7, r30



	;increment the vsync counter
	lds r24,vsync_counter
    7188:	80 91 c7 0c 	lds	r24, 0x0CC7
	lds r25,vsync_counter+1
    718c:	90 91 c8 0c 	lds	r25, 0x0CC8
	adiw r24,1
    7190:	01 96       	adiw	r24, 0x01	; 1
	sts vsync_counter,r24
    7192:	80 93 c7 0c 	sts	0x0CC7, r24
	sts vsync_counter+1,r25
    7196:	90 93 c8 0c 	sts	0x0CC8, r25


	;process user pre callback
	lds ZL,pre_vsync_user_callback+0
    719a:	e0 91 b9 0c 	lds	r30, 0x0CB9
	lds ZH,pre_vsync_user_callback+1
    719e:	f0 91 ba 0c 	lds	r31, 0x0CBA
	cp  ZL,r1
    71a2:	e1 15       	cp	r30, r1
	cpc ZH,r1
    71a4:	f1 05       	cpc	r31, r1
	breq .+2 
    71a6:	09 f0       	breq	.+2      	; 0x71aa <no_render+0x50>
	icall
    71a8:	09 95       	icall

	;refresh buttons states
	#if CONTROLLERS_VSYNC_READ == 1
		call ReadControllers
    71aa:	0e 94 a5 3a 	call	0x754a	; 0x754a <ReadControllers>
	#endif 
	
	;invoke stuff the video mode may have to do
	call VideoModeVsync	
    71ae:	0e 94 5e 49 	call	0x92bc	; 0x92bc <VideoModeVsync>

	;process music (music, envelopes, etc)
	call process_music
    71b2:	0e 94 00 39 	call	0x7200	; 0x7200 <process_music>
	clr r1
    71b6:	11 24       	eor	r1, r1

	;process user post callback
	lds ZL,post_vsync_user_callback+0
    71b8:	e0 91 bb 0c 	lds	r30, 0x0CBB
	lds ZH,post_vsync_user_callback+1
    71bc:	f0 91 bc 0c 	lds	r31, 0x0CBC
	cp  ZL,r1
    71c0:	e1 15       	cp	r30, r1
	cpc ZH,r1
    71c2:	f1 05       	cpc	r31, r1
	breq .+2 
    71c4:	09 f0       	breq	.+2      	; 0x71c8 <no_render+0x6e>
	icall
    71c6:	09 95       	icall
	#if SNES_MOUSE == 1
		call ReadMouseExtendedData
		call ProcessMouseMovement
	#endif

	pop r27
    71c8:	bf 91       	pop	r27
	pop r26
    71ca:	af 91       	pop	r26
	pop r25
    71cc:	9f 91       	pop	r25
	pop r24
    71ce:	8f 91       	pop	r24
	pop r23
    71d0:	7f 91       	pop	r23
	pop r22
    71d2:	6f 91       	pop	r22
	pop r21
    71d4:	5f 91       	pop	r21
	pop r20
    71d6:	4f 91       	pop	r20
	pop r19
    71d8:	3f 91       	pop	r19
	pop r18
    71da:	2f 91       	pop	r18

000071dc <sync_end>:
	
sync_end:	
	;restore flags
	pop ZL
    71dc:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL
    71de:	ef bf       	out	0x3f, r30	; 63
	
	pop ZH
    71e0:	ff 91       	pop	r31
	pop ZL
    71e2:	ef 91       	pop	r30
	pop r1
    71e4:	1f 90       	pop	r1
	pop r0
    71e6:	0f 90       	pop	r0
	reti
    71e8:	18 95       	reti

000071ea <hsync_pulse>:
; 0xf0 on the sbi 
;	
; Destroys: ZL (r30)
;*************************************************
hsync_pulse:
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    71ea:	28 98       	cbi	0x05, 0	; 5
	ldi ZL,2
    71ec:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    71ee:	00 c0       	rjmp	.+0      	; 0x71f0 <hsync_pulse+0x6>
	call update_sound
    71f0:	0e 94 06 39 	call	0x720c	; 0x720c <update_sound>

	lds ZL,sync_pulse
    71f4:	e0 91 b7 0c 	lds	r30, 0x0CB7
	dec ZL
    71f8:	ea 95       	dec	r30
	sts sync_pulse,ZL
    71fa:	e0 93 b7 0c 	sts	0x0CB7, r30

	ret
    71fe:	08 95       	ret

00007200 <process_music>:
; NOTE: registers r18-r27 are already saved by the caller
;***********************
process_music:
	
#if ENABLE_MIXER==1
	lds ZL,sound_enabled
    7200:	e0 91 cf 0c 	lds	r30, 0x0CCF
	sbrc ZL,0
    7204:	e0 fd       	sbrc	r30, 0
 	call ProcessMusic
    7206:	0e 94 2c 3e 	call	0x7c58	; 0x7c58 <ProcessMusic>
#endif

	ret
    720a:	08 95       	ret

0000720c <update_sound>:

; Destroys: Z,r0,r1
; cycles: 212+
;****************************
update_sound:
	push r16
    720c:	0f 93       	push	r16
	push r17
    720e:	1f 93       	push	r17
	push r18
    7210:	2f 93       	push	r18
	push r28
    7212:	cf 93       	push	r28
	push r29
    7214:	df 93       	push	r29

	mov r18,ZL
    7216:	2e 2f       	mov	r18, r30

	;channel 1 
	lds r16,tr1_step_lo
    7218:	00 91 d1 0c 	lds	r16, 0x0CD1
	lds r17,tr1_pos_frac
    721c:	10 91 d3 0c 	lds	r17, 0x0CD3
	add	r17,r16	;add step to fractional part of sample pos
    7220:	10 0f       	add	r17, r16
	lds r16,tr1_step_hi	
    7222:	00 91 d2 0c 	lds	r16, 0x0CD2
	lds ZL,tr1_pos_lo
    7226:	e0 91 d4 0c 	lds	r30, 0x0CD4
	lds ZH,tr1_pos_hi 
    722a:	f0 91 d5 0c 	lds	r31, 0x0CD5
	adc ZL,r16	;add step to low byte of sample pos
    722e:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    7230:	04 91       	lpm	r16, Z
	sts tr1_pos_lo,ZL
    7232:	e0 93 d4 0c 	sts	0x0CD4, r30
	sts tr1_pos_frac,r17
    7236:	10 93 d3 0c 	sts	0x0CD3, r17
	lds r17,tr1_vol
    723a:	10 91 d0 0c 	lds	r17, 0x0CD0
	mulsu r16,r17;(sample*mixing vol)
    723e:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend	
    7240:	00 08       	sbc	r0, r0
	mov r28,r1	;set (sample*vol>>8) to mix buffer lsb
    7242:	c1 2d       	mov	r28, r1
	mov r29,r0	;set mix buffer msb	
    7244:	d0 2d       	mov	r29, r0
	nop
    7246:	00 00       	nop

;38
	
	;channel 2
	lds r16,tr2_step_lo
    7248:	00 91 d7 0c 	lds	r16, 0x0CD7
	lds r17,tr2_pos_frac
    724c:	10 91 d9 0c 	lds	r17, 0x0CD9
	add	r17,r16	;add step to fractional part of sample pos
    7250:	10 0f       	add	r17, r16
	lds r16,tr2_step_hi	
    7252:	00 91 d8 0c 	lds	r16, 0x0CD8
	lds ZL,tr2_pos_lo
    7256:	e0 91 da 0c 	lds	r30, 0x0CDA
	lds ZH,tr2_pos_hi 
    725a:	f0 91 db 0c 	lds	r31, 0x0CDB
	adc ZL,r16	;add step to low byte of sample pos
    725e:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    7260:	04 91       	lpm	r16, Z
	sts tr2_pos_lo,ZL
    7262:	e0 93 da 0c 	sts	0x0CDA, r30
	sts tr2_pos_frac,r17
    7266:	10 93 d9 0c 	sts	0x0CD9, r17
	lds r17,tr2_vol
    726a:	10 91 d6 0c 	lds	r17, 0x0CD6

	;*** Video sync update ***
	sbrc r18,0								;pre-eq/post-eq sync
    726e:	20 fd       	sbrc	r18, 0
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    7270:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,0								
    7272:	20 ff       	sbrs	r18, 0
	rjmp .
    7274:	00 c0       	rjmp	.+0      	; 0x7276 <update_sound+0x6a>
	;*************************

	mulsu r16,r17;(sample*mixing vol)
    7276:	01 03       	mulsu	r16, r17
	clr r0
    7278:	00 24       	eor	r0, r0
	sbc r0,r0	;sign extend
    727a:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    727c:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb		
    727e:	d0 1d       	adc	r29, r0
;70
	
	;channel 3
	lds r16,tr3_step_lo
    7280:	00 91 dd 0c 	lds	r16, 0x0CDD
	lds r17,tr3_pos_frac
    7284:	10 91 df 0c 	lds	r17, 0x0CDF
	add	r17,r16				;add step to fractional part of sample pos
    7288:	10 0f       	add	r17, r16
	lds r16,tr3_step_hi	
    728a:	00 91 de 0c 	lds	r16, 0x0CDE
	lds ZL,tr3_pos_lo
    728e:	e0 91 e0 0c 	lds	r30, 0x0CE0
	lds ZH,tr3_pos_hi 
    7292:	f0 91 e1 0c 	lds	r31, 0x0CE1
	adc ZL,r16				;add step to low byte of sample pos
    7296:	e0 1f       	adc	r30, r16
	lpm	r16,Z				;load sample
    7298:	04 91       	lpm	r16, Z
	sts tr3_pos_lo,ZL
    729a:	e0 93 e0 0c 	sts	0x0CE0, r30
	sts tr3_pos_frac,r17
    729e:	10 93 df 0c 	sts	0x0CDF, r17
	lds r17,tr3_vol
    72a2:	10 91 dc 0c 	lds	r17, 0x0CDC
	mulsu r16,r17			;(sample*mixing vol)
    72a6:	01 03       	mulsu	r16, r17
	sbc r0,r0				;sign extend
    72a8:	00 08       	sbc	r0, r0
	add r28,r1				;add (sample*vol>>8) to mix buffer lsb
    72aa:	c1 0d       	add	r28, r1
	adc r29,r0				;ajust mix buffer msb
    72ac:	d0 1d       	adc	r29, r0
;97	

	;channel 4 - 7/15 bit LFSR 
	lds r16,tr4_barrel_lo
    72ae:	00 91 e4 0c 	lds	r16, 0x0CE4
	lds r17,tr4_barrel_hi
    72b2:	10 91 e5 0c 	lds	r17, 0x0CE5
	lds ZL,tr4_divider
    72b6:	e0 91 e6 0c 	lds	r30, 0x0CE6
	dec ZL	
    72ba:	ea 95       	dec	r30
	brpl ch4_no_shift	
    72bc:	92 f4       	brpl	.+36     	; 0x72e2 <ch4_no_shift>

	lds ZH,tr4_params
    72be:	f0 91 e3 0c 	lds	r31, 0x0CE3
	mov ZL,ZH
    72c2:	ef 2f       	mov	r30, r31
	lsr ZL 			;keep bits7:1
    72c4:	e6 95       	lsr	r30

	mov r0,r16  ;copy barrel shifter
    72c6:	00 2e       	mov	r0, r16
	lsr r0
    72c8:	06 94       	lsr	r0
	eor r0,r16  ;xor bit0 and bit1
    72ca:	00 26       	eor	r0, r16
	bst r0,0
    72cc:	00 fa       	bst	r0, 0
	lsr r17
    72ce:	16 95       	lsr	r17
	ror r16
    72d0:	07 95       	ror	r16
	bld r17,6	;15 bits mode
    72d2:	16 f9       	bld	r17, 6
	sbrs ZH,0
    72d4:	f0 ff       	sbrs	r31, 0
	bld r16,6	;7 bits mode
    72d6:	06 f9       	bld	r16, 6

	sts tr4_barrel_lo,r16
    72d8:	00 93 e4 0c 	sts	0x0CE4, r16
	sts tr4_barrel_hi,r17
    72dc:	10 93 e5 0c 	sts	0x0CE5, r17

	rjmp ch4_end
    72e0:	03 c0       	rjmp	.+6      	; 0x72e8 <ch4_end>

000072e2 <ch4_no_shift>:
ch4_no_shift:
	;wait loop 21 cycles
	ldi r17,6
    72e2:	16 e0       	ldi	r17, 0x06	; 6
	dec r17
    72e4:	1a 95       	dec	r17
	brne .-4
    72e6:	f1 f7       	brne	.-4      	; 0x72e4 <ch4_no_shift+0x2>

000072e8 <ch4_end>:
	;rjmp .
ch4_end:

	sts tr4_divider,ZL
    72e8:	e0 93 e6 0c 	sts	0x0CE6, r30
	ldi r17,0x80 ;-128
    72ec:	10 e8       	ldi	r17, 0x80	; 128
	
	;*** Video sync update ***
	sbrc r18,1								;hsync
    72ee:	21 fd       	sbrc	r18, 1
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xF0
    72f0:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,1								
    72f2:	21 ff       	sbrs	r18, 1
	rjmp .
    72f4:	00 c0       	rjmp	.+0      	; 0x72f6 <ch4_end+0xe>
	;*************************
	
	sbrc r16,0
    72f6:	00 fd       	sbrc	r16, 0
	ldi r17,0x7f ;+127
    72f8:	1f e7       	ldi	r17, 0x7F	; 127
	
	lds r16,tr4_vol
    72fa:	00 91 e2 0c 	lds	r16, 0x0CE2

	mulsu r17,r16;(sample*mixing vol)
    72fe:	10 03       	mulsu	r17, r16
	sbc r0,r0	;sign extend
    7300:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    7302:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb
    7304:	d0 1d       	adc	r29, r0
;142
#if SOUND_CHANNEL_5_ENABLE==1
	;channel 5 PCM -- 45 cycles

	;add fractional part
	lds r16,tr5_pos_frac
    7306:	00 91 eb 0c 	lds	r16, 0x0CEB
	lds r17,tr5_step_lo 
    730a:	10 91 e9 0c 	lds	r17, 0x0CE9
	add r16,r17
    730e:	01 0f       	add	r16, r17
	sts tr5_pos_frac,r16
    7310:	00 93 eb 0c 	sts	0x0CEB, r16

	;add lo
	lds ZL,tr5_pos_lo
    7314:	e0 91 ec 0c 	lds	r30, 0x0CEC
	lds r17,tr5_step_hi 
    7318:	10 91 ea 0c 	lds	r17, 0x0CEA
	adc ZL,r17
    731c:	e1 1f       	adc	r30, r17

	;add hi
	lds ZH,tr5_pos_hi
    731e:	f0 91 ed 0c 	lds	r31, 0x0CED
	ldi r16,0
    7322:	00 e0       	ldi	r16, 0x00	; 0
	adc ZH,r16
    7324:	f0 1f       	adc	r31, r16

	movw r16,ZL
    7326:	8f 01       	movw	r16, r30
	lds r0,tr5_loop_len_lo
    7328:	00 90 ee 0c 	lds	r0, 0x0CEE
	lds r1,tr5_loop_len_hi	
    732c:	10 90 ef 0c 	lds	r1, 0x0CEF
	sub r16,r0
    7330:	00 19       	sub	r16, r0
	sbc r17,r1
    7332:	11 09       	sbc	r17, r1
	lds r0,tr5_loop_end_lo
    7334:	00 90 f0 0c 	lds	r0, 0x0CF0
	lds r1,tr5_loop_end_hi
    7338:	10 90 f1 0c 	lds	r1, 0x0CF1

	cp ZL,r0
    733c:	e0 15       	cp	r30, r0
	cpc ZH,r1
    733e:	f1 05       	cpc	r31, r1
	brlo .+2
    7340:	08 f0       	brcs	.+2      	; 0x7344 <ch4_end+0x5c>
	movw ZL,r16
    7342:	f8 01       	movw	r30, r16

	sts tr5_pos_lo,ZL
    7344:	e0 93 ec 0c 	sts	0x0CEC, r30
	sts tr5_pos_hi,ZH
    7348:	f0 93 ed 0c 	sts	0x0CED, r31

	lpm	r16,Z	;load sample
    734c:	04 91       	lpm	r16, Z
	lds r17,tr5_vol
    734e:	10 91 e8 0c 	lds	r17, 0x0CE8

	mulsu r16,r17;(sample*mixing vol)
    7352:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend
    7354:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    7356:	c1 0d       	add	r28, r1
	adc r29,r0	;adjust mix buffer msb	
    7358:	d0 1d       	adc	r29, r0
#endif
	
	;final processing

	;clip
	clr r0
    735a:	00 24       	eor	r0, r0
	cpi r28,128	;> 127?
    735c:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0	
    735e:	d0 05       	cpc	r29, r0
	brlt .+2
    7360:	0c f0       	brlt	.+2      	; 0x7364 <ch4_end+0x7c>
	ldi r28,127
    7362:	cf e7       	ldi	r28, 0x7F	; 127
	
	dec r0
    7364:	0a 94       	dec	r0
	cpi r28,-128; <-128?
    7366:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0xff
    7368:	d0 05       	cpc	r29, r0
	brge .+2
    736a:	0c f4       	brge	.+2      	; 0x736e <ch4_end+0x86>
	ldi r28,-128
    736c:	c0 e8       	ldi	r28, 0x80	; 128

	subi r28,128	;convert to unsigned		
    736e:	c0 58       	subi	r28, 0x80	; 128
	sts _SFR_MEM_ADDR(OCR2A),r28 ;output sound byte
    7370:	c0 93 b3 00 	sts	0x00B3, r28

00007374 <update_sound_end>:
#endif


update_sound_end:

	pop r29
    7374:	df 91       	pop	r29
	pop r28
    7376:	cf 91       	pop	r28
	pop r18
    7378:	2f 91       	pop	r18
	pop r17
    737a:	1f 91       	pop	r17
	pop r16
    737c:	0f 91       	pop	r16
	
	ret
    737e:	08 95       	ret

00007380 <SetSpritesTileTable>:
; C-callable
; r25:r24=pointer to sprites pixel data.
;*****************************
.section .text.SetSpritesTileTable
SetSpritesTileTable:
	sts sprites_tile_banks,r24
    7380:	80 93 a4 0c 	sts	0x0CA4, r24
	sts sprites_tile_banks+1,r25
    7384:	90 93 a5 0c 	sts	0x0CA5, r25
	ret
    7388:	08 95       	ret

0000738a <ClearVram>:
; C-callable
;************************************
.section .text.ClearVram
ClearVram:
	//init vram		
	ldi r30,lo8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    738a:	e0 e0       	ldi	r30, 0x00	; 0
	ldi r31,hi8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    738c:	f4 e0       	ldi	r31, 0x04	; 4

	ldi XL,lo8(vram)
    738e:	a0 e0       	ldi	r26, 0x00	; 0
	ldi XH,hi8(vram)
    7390:	b1 e0       	ldi	r27, 0x01	; 1

	ldi r22,RAM_TILES_COUNT
    7392:	6c e1       	ldi	r22, 0x1C	; 28

00007394 <fill_vram_loop>:

fill_vram_loop:
	st X+,r22
    7394:	6d 93       	st	X+, r22
	sbiw r30,1
    7396:	31 97       	sbiw	r30, 0x01	; 1
	brne fill_vram_loop
    7398:	e9 f7       	brne	.-6      	; 0x7394 <fill_vram_loop>

	clr r1
    739a:	11 24       	eor	r1, r1

	ret
    739c:	08 95       	ret

0000739e <SetTile>:
.section .text.SetTile
SetTile:
#if SCROLLING == 1
	;index formula is vram[((y>>3)*256)+8x+(y&7)]
	
	andi r24,0x1f
    739e:	8f 71       	andi	r24, 0x1F	; 31
	mov r23,r22
    73a0:	76 2f       	mov	r23, r22
	lsr r22
    73a2:	66 95       	lsr	r22
	lsr r22
    73a4:	66 95       	lsr	r22
	lsr r22			;y>>3
    73a6:	66 95       	lsr	r22
	ldi r18,8		
    73a8:	28 e0       	ldi	r18, 0x08	; 8
	mul r24,r18		;x*8
    73aa:	82 9f       	mul	r24, r18
	movw XL,r0
    73ac:	d0 01       	movw	r26, r0
	subi XL,lo8(-(vram))
    73ae:	a0 50       	subi	r26, 0x00	; 0
	sbci XH,hi8(-(vram))
    73b0:	bf 4f       	sbci	r27, 0xFF	; 255
	add XH,r22		;vram+((y>>3)*256)
    73b2:	b6 0f       	add	r27, r22
	andi r23,7		;y&7	
    73b4:	77 70       	andi	r23, 0x07	; 7
	add XL,r23
    73b6:	a7 0f       	add	r26, r23
						
	subi r20,~(RAM_TILES_COUNT-1)	
    73b8:	44 5e       	subi	r20, 0xE4	; 228
	st X,r20
    73ba:	4c 93       	st	X, r20

	clr r1
    73bc:	11 24       	eor	r1, r1

	ret
    73be:	08 95       	ret

000073c0 <SetTileTable>:
; C-callable
; r25:r24=pointer to tiles data
;************************************
.section .text.SetTileTable
SetTileTable:
	sts tile_table_lo,r24
    73c0:	80 93 ac 0c 	sts	0x0CAC, r24
	sts tile_table_hi,r25	
    73c4:	90 93 ad 0c 	sts	0x0CAD, r25
	ret
    73c8:	08 95       	ret

000073ca <GetVsyncFlag>:
;
; C-callable
;************************************
.section .text.GetVsyncFlag
GetVsyncFlag:
	lds r24,sync_flags
    73ca:	80 91 b8 0c 	lds	r24, 0x0CB8
	andi r24,SYNC_FLAG_VSYNC
    73ce:	81 70       	andi	r24, 0x01	; 1
	ret
    73d0:	08 95       	ret

000073d2 <ClearVsyncFlag>:
; 
; C-callable
;*****************************
.section .text.ClearVsyncFlag
ClearVsyncFlag:
	lds r18,sync_flags
    73d2:	20 91 b8 0c 	lds	r18, 0x0CB8
	andi r18,~SYNC_FLAG_VSYNC
    73d6:	2e 7f       	andi	r18, 0xFE	; 254
	sts sync_flags,r18
    73d8:	20 93 b8 0c 	sts	0x0CB8, r18
	ret
    73dc:	08 95       	ret

000073de <ReadJoypad>:
; r24=joypad No (0 or 1)
; returns: (int) r25:r24
;*****************************
.section .text.ReadJoypad
ReadJoypad:	
	tst r24
    73de:	88 23       	and	r24, r24
	brne rj_p2
    73e0:	29 f4       	brne	.+10     	; 0x73ec <rj_p2>
		
	lds r24,joypad1_status_lo
    73e2:	80 91 bf 0c 	lds	r24, 0x0CBF
	lds r25,joypad1_status_lo+1
    73e6:	90 91 c0 0c 	lds	r25, 0x0CC0
	ret
    73ea:	08 95       	ret

000073ec <rj_p2>:
rj_p2:
	lds r24,joypad2_status_lo
    73ec:	80 91 c3 0c 	lds	r24, 0x0CC3
	lds r25,joypad2_status_lo+1	
    73f0:	90 91 c4 0c 	lds	r25, 0x0CC4

	ret
    73f4:	08 95       	ret

000073f6 <WaitUs>:
; r25:r24 - us to wait
; returns: void
;****************************
.section .text.WaitUs
WaitUs:	
	ldi r23,8
    73f6:	78 e0       	ldi	r23, 0x08	; 8
	dec 23
    73f8:	7a 95       	dec	r23
	brne .-4 ;~1 us
    73fa:	f1 f7       	brne	.-4      	; 0x73f8 <WaitUs+0x2>
	nop
    73fc:	00 00       	nop
	sbiw r24,1
    73fe:	01 97       	sbiw	r24, 0x01	; 1
	brne WaitUs
    7400:	d1 f7       	brne	.-12     	; 0x73f6 <WaitUs>

	ret
    7402:	08 95       	ret

00007404 <WriteEeprom>:
;****************************

.section .text.WriteEeprom
WriteEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    7404:	f9 99       	sbic	0x1f, 1	; 31
   rjmp WriteEeprom
    7406:	fe cf       	rjmp	.-4      	; 0x7404 <WriteEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    7408:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    740a:	81 bd       	out	0x21, r24	; 33
   ; Write data (r22) to Data Register
   out _SFR_IO_ADDR(EEDR),r22
    740c:	60 bd       	out	0x20, r22	; 32
   cli
    740e:	f8 94       	cli
   ; Write logical one to EEMPE
   sbi _SFR_IO_ADDR(EECR),EEMPE
    7410:	fa 9a       	sbi	0x1f, 2	; 31
   ; Start eeprom write by setting EEPE
   sbi _SFR_IO_ADDR(EECR),EEPE
    7412:	f9 9a       	sbi	0x1f, 1	; 31
   sei
    7414:	78 94       	sei
   ret
    7416:	08 95       	ret

00007418 <ReadEeprom>:
; r24 - value read
;****************************
.section .text.ReadEeprom
ReadEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    7418:	f9 99       	sbic	0x1f, 1	; 31
   rjmp ReadEeprom
    741a:	fe cf       	rjmp	.-4      	; 0x7418 <ReadEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    741c:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    741e:	81 bd       	out	0x21, r24	; 33
   ; Start eeprom read by writing EERE
   cli
    7420:	f8 94       	cli
   sbi _SFR_IO_ADDR(EECR),EERE
    7422:	f8 9a       	sbi	0x1f, 0	; 31
   ; Read data from Data Register
   in r24,_SFR_IO_ADDR(EEDR)
    7424:	80 b5       	in	r24, 0x20	; 32
   sei
    7426:	78 94       	sei
   ret
    7428:	08 95       	ret

0000742a <wdt_randomize>:
	.global wdt_randomize
	.section .text.wdt_randomize
	wdt_randomize:

		;set timer 1 full speed count to 0xffff
		ldi r24,0
    742a:	80 e0       	ldi	r24, 0x00	; 0
		sts sync_pulse,r24
    742c:	80 93 b7 0c 	sts	0x0CB7, r24


		sts _SFR_MEM_ADDR(TIMSK1),r24
    7430:	80 93 6f 00 	sts	0x006F, r24
		sts _SFR_MEM_ADDR(OCR1AL),r24
    7434:	80 93 88 00 	sts	0x0088, r24
		sts _SFR_MEM_ADDR(OCR1AH),r24
    7438:	80 93 89 00 	sts	0x0089, r24
		sts _SFR_MEM_ADDR(OCR1BL),r24
    743c:	80 93 8a 00 	sts	0x008A, r24
		sts _SFR_MEM_ADDR(OCR1BH),r24
    7440:	80 93 8b 00 	sts	0x008B, r24
		sts _SFR_MEM_ADDR(TCNT1H),r24
    7444:	80 93 85 00 	sts	0x0085, r24
		sts _SFR_MEM_ADDR(TCNT1L),r24
    7448:	80 93 84 00 	sts	0x0084, r24
		
		sts _SFR_MEM_ADDR(TCCR1A),r24	
    744c:	80 93 80 00 	sts	0x0080, r24
		ldi 24,(1<<CS10)
    7450:	81 e0       	ldi	r24, 0x01	; 1
		sts _SFR_MEM_ADDR(TCCR1B),r24
    7452:	80 93 81 00 	sts	0x0081, r24

		cli
    7456:	f8 94       	cli

		;enable watchdog at fastest speed and generate interrupts
		ldi r24,0
    7458:	80 e0       	ldi	r24, 0x00	; 0
		sts _SFR_MEM_ADDR(MCUSR),r24	
    745a:	80 93 54 00 	sts	0x0054, r24
		ldi r25,(1<<WDIE)+(1<<WDE)+(0<<WDP3)+(0<<WDP2)+(0<<WDP1)+(0<<WDP0)
    745e:	98 e4       	ldi	r25, 0x48	; 72
		lds r24,_SFR_MEM_ADDR(WDTCSR)
    7460:	80 91 60 00 	lds	r24, 0x0060
		ori r24,(1<<WDCE)+(1<<WDE)
    7464:	88 61       	ori	r24, 0x18	; 24
		sts _SFR_MEM_ADDR(WDTCSR),r24
    7466:	80 93 60 00 	sts	0x0060, r24
		sts _SFR_MEM_ADDR(WDTCSR),r25
    746a:	90 93 60 00 	sts	0x0060, r25
	
		sei
    746e:	78 94       	sei

00007470 <wait>:

		;generate 8 random cycles
	wait:
		lds r24,sync_pulse ;using the yet unalocated "sync_pulse" as a temp variable
    7470:	80 91 b7 0c 	lds	r24, 0x0CB7
		cpi r24,8
    7474:	88 30       	cpi	r24, 0x08	; 8
		brlo wait
    7476:	e0 f3       	brcs	.-8      	; 0x7470 <wait>

		ret
    7478:	08 95       	ret

0000747a <GetTrueRandomSeed>:
	;********************************

	.global GetTrueRandomSeed
	.section .text.GetTrueRandomSeed
	GetTrueRandomSeed:
		lds r24,random_value
    747a:	80 91 c9 0c 	lds	r24, 0x0CC9
		lds r25,random_value+1
    747e:	90 91 ca 0c 	lds	r25, 0x0CCA
		ret
    7482:	08 95       	ret

00007484 <__vector_8>:
	;*************************************
	; Watchdog timer interrupt
	;*************************************
	WDT_vect:
		;save flags & status register
		push r16
    7484:	0f 93       	push	r16
		push r17
    7486:	1f 93       	push	r17

		in r16,_SFR_IO_ADDR(SREG)
    7488:	0f b7       	in	r16, 0x3f	; 63
		push r16
    748a:	0f 93       	push	r16

		lds r16,sync_pulse
    748c:	00 91 b7 0c 	lds	r16, 0x0CB7
		inc r16
    7490:	03 95       	inc	r16
		sts sync_pulse,r16
    7492:	00 93 b7 0c 	sts	0x0CB7, r16

		;XOR succesive timer1 LSB into a int
		sbrc r16,0
    7496:	00 fd       	sbrc	r16, 0
		rjmp 1f
    7498:	08 c0       	rjmp	.+16     	; 0x74aa <__vector_8+0x26>
		lds r17,random_value
    749a:	10 91 c9 0c 	lds	r17, 0x0CC9
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    749e:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    74a2:	10 27       	eor	r17, r16
		sts random_value,r17
    74a4:	10 93 c9 0c 	sts	0x0CC9, r17
		rjmp 2f
    74a8:	07 c0       	rjmp	.+14     	; 0x74b8 <__vector_8+0x34>
	1:
		lds r17,random_value+1
    74aa:	10 91 ca 0c 	lds	r17, 0x0CCA
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    74ae:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    74b2:	10 27       	eor	r17, r16
		sts random_value+1,r17
    74b4:	10 93 ca 0c 	sts	0x0CCA, r17
	2:

		ldi r16,(1<<WDIE)+(1<<WDE)
    74b8:	08 e4       	ldi	r16, 0x48	; 72
		sts _SFR_MEM_ADDR(WDTCSR),r16
    74ba:	00 93 60 00 	sts	0x0060, r16

		;restore flags
		pop r16
    74be:	0f 91       	pop	r16
		out _SFR_IO_ADDR(SREG),r16
    74c0:	0f bf       	out	0x3f, r16	; 63
	
		pop r17
    74c2:	1f 91       	pop	r17
		pop r16
    74c4:	0f 91       	pop	r16
		reti
    74c6:	18 95       	reti

000074c8 <SoftReset>:

/**
 * Performs a software reset
 */
void SoftReset(void){        
	wdt_enable(WDTO_15MS);  
    74c8:	98 e0       	ldi	r25, 0x08	; 8
    74ca:	88 e1       	ldi	r24, 0x18	; 24
    74cc:	0f b6       	in	r0, 0x3f	; 63
    74ce:	f8 94       	cli
    74d0:	a8 95       	wdr
    74d2:	80 93 60 00 	sts	0x0060, r24
    74d6:	0f be       	out	0x3f, r0	; 63
    74d8:	90 93 60 00 	sts	0x0060, r25
	while(1);
    74dc:	ff cf       	rjmp	.-2      	; 0x74dc <SoftReset+0x14>

000074de <ReadButtons>:
void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
	unsigned char i;

	//latch controllers
	JOYPAD_OUT_PORT|=_BV(JOYPAD_LATCH_PIN);
    74de:	12 9a       	sbi	0x02, 2	; 2
		}else{
			Wait200ns();
			Wait200ns();
		}	
	#else
		Wait200ns();
    74e0:	c8 95       	lpm
    74e2:	c8 95       	lpm
		Wait200ns();
    74e4:	c8 95       	lpm
    74e6:	c8 95       	lpm
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));
    74e8:	12 98       	cbi	0x02, 2	; 2
    74ea:	40 e1       	ldi	r20, 0x10	; 16
	DisplayLogo();
	
}

void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
    74ec:	80 e0       	ldi	r24, 0x00	; 0
    74ee:	90 e0       	ldi	r25, 0x00	; 0
    74f0:	20 e0       	ldi	r18, 0x00	; 0
    74f2:	30 e0       	ldi	r19, 0x00	; 0


	//read button states
	for(i=0;i<16;i++){

		p1ButtonsLo>>=1;
    74f4:	36 95       	lsr	r19
    74f6:	27 95       	ror	r18
		p2ButtonsLo>>=1;
    74f8:	96 95       	lsr	r25
    74fa:	87 95       	ror	r24
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    74fc:	c8 95       	lpm
    74fe:	c8 95       	lpm
			Wait200ns();
    7500:	c8 95       	lpm
    7502:	c8 95       	lpm
		#endif
			
		//pulse clock pin		
		JOYPAD_OUT_PORT&=~(_BV(JOYPAD_CLOCK_PIN));
    7504:	13 98       	cbi	0x02, 3	; 2
		
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) p1ButtonsLo|=(1<<15);
    7506:	00 9b       	sbis	0x00, 0	; 0
    7508:	30 68       	ori	r19, 0x80	; 128
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) p2ButtonsLo|=(1<<15);
    750a:	01 9b       	sbis	0x00, 1	; 0
    750c:	90 68       	ori	r25, 0x80	; 128
		
		JOYPAD_OUT_PORT|=_BV(JOYPAD_CLOCK_PIN);
    750e:	13 9a       	sbi	0x02, 3	; 2
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    7510:	c8 95       	lpm
    7512:	c8 95       	lpm
			Wait200ns();
    7514:	c8 95       	lpm
    7516:	c8 95       	lpm
    7518:	41 50       	subi	r20, 0x01	; 1
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));


	//read button states
	for(i=0;i<16;i++){
    751a:	61 f7       	brne	.-40     	; 0x74f4 <ReadButtons+0x16>
		#endif

	}

	#if JOYSTICK==TYPE_SNES
		joypad1_status_lo=p1ButtonsLo;
    751c:	30 93 c0 0c 	sts	0x0CC0, r19
    7520:	20 93 bf 0c 	sts	0x0CBF, r18
		joypad2_status_lo=p2ButtonsLo;
    7524:	90 93 c4 0c 	sts	0x0CC4, r25
    7528:	80 93 c3 0c 	sts	0x0CC3, r24
	#else
		joypad1_status_lo=p1ButtonsLo&0xff;
		joypad2_status_lo=p2ButtonsLo&0xff;	
	#endif

	if(joypad1_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B) || joypad2_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B)){
    752c:	80 91 bf 0c 	lds	r24, 0x0CBF
    7530:	90 91 c0 0c 	lds	r25, 0x0CC0
    7534:	0f 97       	sbiw	r24, 0x0f	; 15
    7536:	31 f0       	breq	.+12     	; 0x7544 <ReadButtons+0x66>
    7538:	80 91 c3 0c 	lds	r24, 0x0CC3
    753c:	90 91 c4 0c 	lds	r25, 0x0CC4
    7540:	0f 97       	sbiw	r24, 0x0f	; 15
    7542:	11 f4       	brne	.+4      	; 0x7548 <ReadButtons+0x6a>
		SoftReset();
    7544:	0e 94 64 3a 	call	0x74c8	; 0x74c8 <SoftReset>
    7548:	08 95       	ret

0000754a <ReadControllers>:
 * program when CONTROLLERS_VSYNC_READ==0.
*/
void ReadControllers(){

	//Detect if devices are connected.
	joypadsConnectionStatus=0;
    754a:	10 92 f8 0c 	sts	0x0CF8, r1
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) joypadsConnectionStatus|=1;
    754e:	00 99       	sbic	0x00, 0	; 0
    7550:	03 c0       	rjmp	.+6      	; 0x7558 <ReadControllers+0xe>
    7552:	81 e0       	ldi	r24, 0x01	; 1
    7554:	80 93 f8 0c 	sts	0x0CF8, r24
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) joypadsConnectionStatus|=2;
    7558:	01 99       	sbic	0x00, 1	; 0
    755a:	05 c0       	rjmp	.+10     	; 0x7566 <ReadControllers+0x1c>
    755c:	80 91 f8 0c 	lds	r24, 0x0CF8
    7560:	82 60       	ori	r24, 0x02	; 2
    7562:	80 93 f8 0c 	sts	0x0CF8, r24
			
	//read the standard buttons
	ReadButtons();
    7566:	0c 94 6f 3a 	jmp	0x74de	; 0x74de <ReadButtons>

0000756a <FormatEeprom>:
	return resp;
}

	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {
    756a:	cf 93       	push	r28
    756c:	df 93       	push	r29
    756e:	c0 e0       	ldi	r28, 0x00	; 0
    7570:	d0 e0       	ldi	r29, 0x00	; 0
    7572:	fe 01       	movw	r30, r28
    7574:	ee 54       	subi	r30, 0x4E	; 78
    7576:	ff 4f       	sbci	r31, 0xFF	; 255

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
    7578:	64 91       	lpm	r22, Z
    757a:	ce 01       	movw	r24, r28
    757c:	0e 94 02 3a 	call	0x7404	; 0x7404 <WriteEeprom>
    7580:	21 96       	adiw	r28, 0x01	; 1
	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
    7582:	c0 32       	cpi	r28, 0x20	; 32
    7584:	d1 05       	cpc	r29, r1
    7586:	a9 f7       	brne	.-22     	; 0x7572 <FormatEeprom+0x8>
    7588:	c0 e2       	ldi	r28, 0x20	; 32
    758a:	d0 e0       	ldi	r29, 0x00	; 0
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
    758c:	6f ef       	ldi	r22, 0xFF	; 255
    758e:	ce 01       	movw	r24, r28
    7590:	0e 94 02 3a 	call	0x7404	; 0x7404 <WriteEeprom>
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
    7594:	6f ef       	ldi	r22, 0xFF	; 255
    7596:	ce 01       	movw	r24, r28
    7598:	01 96       	adiw	r24, 0x01	; 1
    759a:	0e 94 02 3a 	call	0x7404	; 0x7404 <WriteEeprom>
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
    759e:	a0 96       	adiw	r28, 0x20	; 32
    75a0:	c1 15       	cp	r28, r1
    75a2:	88 e0       	ldi	r24, 0x08	; 8
    75a4:	d8 07       	cpc	r29, r24
    75a6:	91 f7       	brne	.-28     	; 0x758c <FormatEeprom+0x22>
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
   }
   
}
    75a8:	df 91       	pop	r29
    75aa:	cf 91       	pop	r28
    75ac:	08 95       	ret

000075ae <isEepromFormatted>:
	  }
   }
}
	
//returns true if the EEPROM has been setup to work with the kernel.
bool isEepromFormatted(){
    75ae:	cf 93       	push	r28
	unsigned id;
	id=ReadEeprom(0)+(ReadEeprom(1)<<8);
    75b0:	80 e0       	ldi	r24, 0x00	; 0
    75b2:	90 e0       	ldi	r25, 0x00	; 0
    75b4:	0e 94 0c 3a 	call	0x7418	; 0x7418 <ReadEeprom>
    75b8:	c8 2f       	mov	r28, r24
    75ba:	81 e0       	ldi	r24, 0x01	; 1
    75bc:	90 e0       	ldi	r25, 0x00	; 0
    75be:	0e 94 0c 3a 	call	0x7418	; 0x7418 <ReadEeprom>
    75c2:	28 2f       	mov	r18, r24
    75c4:	30 e0       	ldi	r19, 0x00	; 0
    75c6:	32 2f       	mov	r19, r18
    75c8:	22 27       	eor	r18, r18
    75ca:	2c 0f       	add	r18, r28
    75cc:	31 1d       	adc	r19, r1
	return (id==EEPROM_SIGNATURE);
    75ce:	81 e0       	ldi	r24, 0x01	; 1
    75d0:	2a 35       	cpi	r18, 0x5A	; 90
    75d2:	35 45       	sbci	r19, 0x55	; 85
    75d4:	09 f0       	breq	.+2      	; 0x75d8 <isEepromFormatted+0x2a>
    75d6:	80 e0       	ldi	r24, 0x00	; 0
}
    75d8:	cf 91       	pop	r28
    75da:	08 95       	ret

000075dc <EepromBlockExists>:
 * @return
 *  0x00 = Success, Block exists.
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK.
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND.
 */
char EepromBlockExists(unsigned int blockId, u16* eepromAddr, u8* nextFreeBlockId){
    75dc:	8f 92       	push	r8
    75de:	9f 92       	push	r9
    75e0:	af 92       	push	r10
    75e2:	bf 92       	push	r11
    75e4:	cf 92       	push	r12
    75e6:	df 92       	push	r13
    75e8:	ef 92       	push	r14
    75ea:	ff 92       	push	r15
    75ec:	0f 93       	push	r16
    75ee:	1f 93       	push	r17
    75f0:	cf 93       	push	r28
    75f2:	df 93       	push	r29
	u8 nextFreeBlock=0;
	u8 result=EEPROM_ERROR_BLOCK_NOT_FOUND;
	u16 id;
	*eepromAddr=0;
    75f4:	fb 01       	movw	r30, r22
    75f6:	11 82       	std	Z+1, r1	; 0x01
    75f8:	10 82       	st	Z, r1

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    75fa:	8f 3f       	cpi	r24, 0xFF	; 255
    75fc:	ff ef       	ldi	r31, 0xFF	; 255
    75fe:	9f 07       	cpc	r25, r31
    7600:	89 f1       	breq	.+98     	; 0x7664 <EepromBlockExists+0x88>
    7602:	6a 01       	movw	r12, r20
    7604:	8b 01       	movw	r16, r22
    7606:	7c 01       	movw	r14, r24
    7608:	a1 2c       	mov	r10, r1
    760a:	b1 2c       	mov	r11, r1
    760c:	c0 e0       	ldi	r28, 0x00	; 0
    760e:	d3 e0       	ldi	r29, 0x03	; 3
    7610:	91 2c       	mov	r9, r1
		
	//scan all blocks and get the memory adress of that block and the next free block
	for(u8 i=0;i<EEPROM_MAX_BLOCKS;i++){
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
    7612:	c5 01       	movw	r24, r10
    7614:	0e 94 0c 3a 	call	0x7418	; 0x7418 <ReadEeprom>
    7618:	88 2e       	mov	r8, r24
    761a:	c5 01       	movw	r24, r10
    761c:	01 96       	adiw	r24, 0x01	; 1
    761e:	0e 94 0c 3a 	call	0x7418	; 0x7418 <ReadEeprom>
    7622:	28 2f       	mov	r18, r24
    7624:	30 e0       	ldi	r19, 0x00	; 0
    7626:	32 2f       	mov	r19, r18
    7628:	22 27       	eor	r18, r18
    762a:	28 0d       	add	r18, r8
    762c:	31 1d       	adc	r19, r1
		
		if(id==blockId){
    762e:	2e 15       	cp	r18, r14
    7630:	3f 05       	cpc	r19, r15
    7632:	29 f4       	brne	.+10     	; 0x763e <EepromBlockExists+0x62>
			*eepromAddr=(i*EEPROM_BLOCK_SIZE);
    7634:	f8 01       	movw	r30, r16
    7636:	b1 82       	std	Z+1, r11	; 0x01
    7638:	a0 82       	st	Z, r10
			result=EEPROM_OK;
    763a:	d0 e0       	ldi	r29, 0x00	; 0
    763c:	0b c0       	rjmp	.+22     	; 0x7654 <EepromBlockExists+0x78>
		}
		
		if(id==0xffff && nextFreeBlock==0){
    763e:	2f 3f       	cpi	r18, 0xFF	; 255
    7640:	3f 4f       	sbci	r19, 0xFF	; 255
    7642:	41 f4       	brne	.+16     	; 0x7654 <EepromBlockExists+0x78>
    7644:	91 10       	cpse	r9, r1
    7646:	06 c0       	rjmp	.+12     	; 0x7654 <EepromBlockExists+0x78>
			nextFreeBlock=i;
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
    7648:	c1 14       	cp	r12, r1
    764a:	d1 04       	cpc	r13, r1
    764c:	11 f0       	breq	.+4      	; 0x7652 <EepromBlockExists+0x76>
    764e:	f6 01       	movw	r30, r12
    7650:	c0 83       	st	Z, r28
    7652:	9c 2e       	mov	r9, r28
	*eepromAddr=0;

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
		
	//scan all blocks and get the memory adress of that block and the next free block
	for(u8 i=0;i<EEPROM_MAX_BLOCKS;i++){
    7654:	cf 5f       	subi	r28, 0xFF	; 255
    7656:	f0 e2       	ldi	r31, 0x20	; 32
    7658:	af 0e       	add	r10, r31
    765a:	b1 1c       	adc	r11, r1
    765c:	c0 34       	cpi	r28, 0x40	; 64
    765e:	c9 f6       	brne	.-78     	; 0x7612 <EepromBlockExists+0x36>
			nextFreeBlock=i;
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
		}
	}

	return result;
    7660:	8d 2f       	mov	r24, r29
    7662:	01 c0       	rjmp	.+2      	; 0x7666 <EepromBlockExists+0x8a>
	u8 nextFreeBlock=0;
	u8 result=EEPROM_ERROR_BLOCK_NOT_FOUND;
	u16 id;
	*eepromAddr=0;

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    7664:	81 e0       	ldi	r24, 0x01	; 1
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
		}
	}

	return result;
}
    7666:	df 91       	pop	r29
    7668:	cf 91       	pop	r28
    766a:	1f 91       	pop	r17
    766c:	0f 91       	pop	r16
    766e:	ff 90       	pop	r15
    7670:	ef 90       	pop	r14
    7672:	df 90       	pop	r13
    7674:	cf 90       	pop	r12
    7676:	bf 90       	pop	r11
    7678:	af 90       	pop	r10
    767a:	9f 90       	pop	r9
    767c:	8f 90       	pop	r8
    767e:	08 95       	ret

00007680 <EepromWriteBlock>:
 * Returns:
 *  0x00 = Success
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x02 = EEPROM_ERROR_FULL
 */
char EepromWriteBlock(struct EepromBlockStruct *block){
    7680:	ef 92       	push	r14
    7682:	ff 92       	push	r15
    7684:	0f 93       	push	r16
    7686:	1f 93       	push	r17
    7688:	cf 93       	push	r28
    768a:	df 93       	push	r29
    768c:	00 d0       	rcall	.+0      	; 0x768e <EepromWriteBlock+0xe>
    768e:	1f 92       	push	r1
    7690:	cd b7       	in	r28, 0x3d	; 61
    7692:	de b7       	in	r29, 0x3e	; 62
    7694:	8c 01       	movw	r16, r24
	u16 eepromAddr=0;
    7696:	1a 82       	std	Y+2, r1	; 0x02
    7698:	19 82       	std	Y+1, r1	; 0x01
	u8 *srcPtr=(unsigned char *)block,res,nextFreeBlock=0;
    769a:	1b 82       	std	Y+3, r1	; 0x03

	res=EepromBlockExists(block->id,&eepromAddr,&nextFreeBlock);
    769c:	ae 01       	movw	r20, r28
    769e:	4d 5f       	subi	r20, 0xFD	; 253
    76a0:	5f 4f       	sbci	r21, 0xFF	; 255
    76a2:	be 01       	movw	r22, r28
    76a4:	6f 5f       	subi	r22, 0xFF	; 255
    76a6:	7f 4f       	sbci	r23, 0xFF	; 255
    76a8:	fc 01       	movw	r30, r24
    76aa:	80 81       	ld	r24, Z
    76ac:	91 81       	ldd	r25, Z+1	; 0x01
    76ae:	0e 94 ee 3a 	call	0x75dc	; 0x75dc <EepromBlockExists>
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;
    76b2:	88 23       	and	r24, r24
    76b4:	11 f0       	breq	.+4      	; 0x76ba <EepromWriteBlock+0x3a>
    76b6:	83 30       	cpi	r24, 0x03	; 3
    76b8:	19 f5       	brne	.+70     	; 0x7700 <EepromWriteBlock+0x80>

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    76ba:	89 81       	ldd	r24, Y+1	; 0x01
    76bc:	9a 81       	ldd	r25, Y+2	; 0x02
    76be:	89 2b       	or	r24, r25
    76c0:	49 f4       	brne	.+18     	; 0x76d4 <EepromWriteBlock+0x54>
    76c2:	8b 81       	ldd	r24, Y+3	; 0x03
    76c4:	88 23       	and	r24, r24
    76c6:	d9 f0       	breq	.+54     	; 0x76fe <EepromWriteBlock+0x7e>
	if(eepromAddr==0 && nextFreeBlock!=0) eepromAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;
    76c8:	f0 e2       	ldi	r31, 0x20	; 32
    76ca:	8f 9f       	mul	r24, r31
    76cc:	c0 01       	movw	r24, r0
    76ce:	11 24       	eor	r1, r1
    76d0:	9a 83       	std	Y+2, r25	; 0x02
    76d2:	89 83       	std	Y+1, r24	; 0x01
    76d4:	78 01       	movw	r14, r16
    76d6:	20 e2       	ldi	r18, 0x20	; 32
    76d8:	e2 0e       	add	r14, r18
    76da:	f1 1c       	adc	r15, r1

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
		WriteEeprom(eepromAddr++,*srcPtr);
    76dc:	f8 01       	movw	r30, r16
    76de:	61 91       	ld	r22, Z+
    76e0:	8f 01       	movw	r16, r30
    76e2:	89 81       	ldd	r24, Y+1	; 0x01
    76e4:	9a 81       	ldd	r25, Y+2	; 0x02
    76e6:	9c 01       	movw	r18, r24
    76e8:	2f 5f       	subi	r18, 0xFF	; 255
    76ea:	3f 4f       	sbci	r19, 0xFF	; 255
    76ec:	3a 83       	std	Y+2, r19	; 0x02
    76ee:	29 83       	std	Y+1, r18	; 0x01
    76f0:	0e 94 02 3a 	call	0x7404	; 0x7404 <WriteEeprom>
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(eepromAddr==0 && nextFreeBlock!=0) eepromAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
    76f4:	0e 15       	cp	r16, r14
    76f6:	1f 05       	cpc	r17, r15
    76f8:	89 f7       	brne	.-30     	; 0x76dc <EepromWriteBlock+0x5c>
		WriteEeprom(eepromAddr++,*srcPtr);
		srcPtr++;	
	}
	
	return 0;
    76fa:	80 e0       	ldi	r24, 0x00	; 0
    76fc:	01 c0       	rjmp	.+2      	; 0x7700 <EepromWriteBlock+0x80>
	u8 *srcPtr=(unsigned char *)block,res,nextFreeBlock=0;

	res=EepromBlockExists(block->id,&eepromAddr,&nextFreeBlock);
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    76fe:	82 e0       	ldi	r24, 0x02	; 2
		WriteEeprom(eepromAddr++,*srcPtr);
		srcPtr++;	
	}
	
	return 0;
}
    7700:	0f 90       	pop	r0
    7702:	0f 90       	pop	r0
    7704:	0f 90       	pop	r0
    7706:	df 91       	pop	r29
    7708:	cf 91       	pop	r28
    770a:	1f 91       	pop	r17
    770c:	0f 91       	pop	r16
    770e:	ff 90       	pop	r15
    7710:	ef 90       	pop	r14
    7712:	08 95       	ret

00007714 <EepromReadBlock>:
 * Returns: 
 *  0x00 = Success
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 */
char EepromReadBlock(unsigned int blockId,struct EepromBlockStruct *block){	
    7714:	cf 92       	push	r12
    7716:	df 92       	push	r13
    7718:	ff 92       	push	r15
    771a:	0f 93       	push	r16
    771c:	1f 93       	push	r17
    771e:	cf 93       	push	r28
    7720:	df 93       	push	r29
    7722:	00 d0       	rcall	.+0      	; 0x7724 <EepromReadBlock+0x10>
    7724:	cd b7       	in	r28, 0x3d	; 61
    7726:	de b7       	in	r29, 0x3e	; 62
    7728:	8b 01       	movw	r16, r22
	u16 eepromAddr;
	u8 *blockPtr=(unsigned char *)block;

	u8 res=EepromBlockExists(blockId,&eepromAddr,NULL);
    772a:	40 e0       	ldi	r20, 0x00	; 0
    772c:	50 e0       	ldi	r21, 0x00	; 0
    772e:	be 01       	movw	r22, r28
    7730:	6f 5f       	subi	r22, 0xFF	; 255
    7732:	7f 4f       	sbci	r23, 0xFF	; 255
    7734:	0e 94 ee 3a 	call	0x75dc	; 0x75dc <EepromBlockExists>
    7738:	f8 2e       	mov	r15, r24
	if(res!=0) return res;
    773a:	81 11       	cpse	r24, r1
    773c:	13 c0       	rjmp	.+38     	; 0x7764 <EepromReadBlock+0x50>
    773e:	68 01       	movw	r12, r16
    7740:	80 e2       	ldi	r24, 0x20	; 32
    7742:	c8 0e       	add	r12, r24
    7744:	d1 1c       	adc	r13, r1

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
		*blockPtr=ReadEeprom(eepromAddr++);
    7746:	89 81       	ldd	r24, Y+1	; 0x01
    7748:	9a 81       	ldd	r25, Y+2	; 0x02
    774a:	9c 01       	movw	r18, r24
    774c:	2f 5f       	subi	r18, 0xFF	; 255
    774e:	3f 4f       	sbci	r19, 0xFF	; 255
    7750:	3a 83       	std	Y+2, r19	; 0x02
    7752:	29 83       	std	Y+1, r18	; 0x01
    7754:	0e 94 0c 3a 	call	0x7418	; 0x7418 <ReadEeprom>
    7758:	f8 01       	movw	r30, r16
    775a:	81 93       	st	Z+, r24
    775c:	8f 01       	movw	r16, r30
	u8 *blockPtr=(unsigned char *)block;

	u8 res=EepromBlockExists(blockId,&eepromAddr,NULL);
	if(res!=0) return res;

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
    775e:	ec 15       	cp	r30, r12
    7760:	fd 05       	cpc	r31, r13
    7762:	89 f7       	brne	.-30     	; 0x7746 <EepromReadBlock+0x32>
		*blockPtr=ReadEeprom(eepromAddr++);
		blockPtr++;	
	}
	
	return EEPROM_OK;
}
    7764:	8f 2d       	mov	r24, r15
    7766:	0f 90       	pop	r0
    7768:	0f 90       	pop	r0
    776a:	df 91       	pop	r29
    776c:	cf 91       	pop	r28
    776e:	1f 91       	pop	r17
    7770:	0f 91       	pop	r16
    7772:	ff 90       	pop	r15
    7774:	df 90       	pop	r13
    7776:	cf 90       	pop	r12
    7778:	08 95       	ret

0000777a <GetPrngNumber>:
 * Input: Zero=return the next random value. Non-zero=Sets the seed value.
 */
u16 GetPrngNumber(u16 seed){
	static u16 prng_state;
  	
	if(seed!=0) prng_state=seed;
    777a:	00 97       	sbiw	r24, 0x00	; 0
    777c:	21 f0       	breq	.+8      	; 0x7786 <GetPrngNumber+0xc>
    777e:	90 93 cd 0c 	sts	0x0CCD, r25
    7782:	80 93 cc 0c 	sts	0x0CCC, r24
	
	u16 bit  = ((prng_state >> 0) ^ (prng_state >> 2) ^ (prng_state >> 3) ^ (prng_state >> 5) ) & 1;
    7786:	20 91 cc 0c 	lds	r18, 0x0CCC
    778a:	30 91 cd 0c 	lds	r19, 0x0CCD
    778e:	a9 01       	movw	r20, r18
    7790:	56 95       	lsr	r21
    7792:	47 95       	ror	r20
    7794:	56 95       	lsr	r21
    7796:	47 95       	ror	r20
    7798:	c9 01       	movw	r24, r18
    779a:	63 e0       	ldi	r22, 0x03	; 3
    779c:	96 95       	lsr	r25
    779e:	87 95       	ror	r24
    77a0:	6a 95       	dec	r22
    77a2:	e1 f7       	brne	.-8      	; 0x779c <GetPrngNumber+0x22>
    77a4:	84 27       	eor	r24, r20
    77a6:	95 27       	eor	r25, r21
    77a8:	82 27       	eor	r24, r18
    77aa:	93 27       	eor	r25, r19
    77ac:	a9 01       	movw	r20, r18
    77ae:	75 e0       	ldi	r23, 0x05	; 5
    77b0:	56 95       	lsr	r21
    77b2:	47 95       	ror	r20
    77b4:	7a 95       	dec	r23
    77b6:	e1 f7       	brne	.-8      	; 0x77b0 <GetPrngNumber+0x36>
    77b8:	84 27       	eor	r24, r20
    77ba:	95 27       	eor	r25, r21
	prng_state =  (prng_state >> 1) | (bit << 15);
    77bc:	99 27       	eor	r25, r25
    77be:	86 95       	lsr	r24
    77c0:	97 95       	ror	r25
    77c2:	88 27       	eor	r24, r24
    77c4:	36 95       	lsr	r19
    77c6:	27 95       	ror	r18
    77c8:	82 2b       	or	r24, r18
    77ca:	93 2b       	or	r25, r19
    77cc:	90 93 cd 0c 	sts	0x0CCD, r25
    77d0:	80 93 cc 0c 	sts	0x0CCC, r24
	return prng_state;   
}
    77d4:	08 95       	ret

000077d6 <PatchCommand00>:
/*
 * Command 00: Set envelope speed per frame +127/-128, 0=no enveloppe
 * Param:
 */
void PatchCommand00(Track* track, char param){
	track->envelopeStep=param;
    77d6:	fc 01       	movw	r30, r24
    77d8:	67 87       	std	Z+15, r22	; 0x0f
    77da:	08 95       	ret

000077dc <PatchCommand01>:
 * Param:
 */
void PatchCommand01(Track* track, char param){
	(void)track; //to remove unused warning
	#if MIXER_CHAN4_TYPE == 0
		mixer.channels.type.noise.barrel=0x0101;
    77dc:	e0 ed       	ldi	r30, 0xD0	; 208
    77de:	fc e0       	ldi	r31, 0x0C	; 12
    77e0:	81 e0       	ldi	r24, 0x01	; 1
    77e2:	91 e0       	ldi	r25, 0x01	; 1
    77e4:	95 8b       	std	Z+21, r25	; 0x15
    77e6:	84 8b       	std	Z+20, r24	; 0x14
		mixer.channels.type.noise.params=param;
    77e8:	63 8b       	std	Z+19, r22	; 0x13
    77ea:	08 95       	ret

000077ec <PatchCommand05>:
}
/*
 * Command 05: End of note/fx
 * Param:
 */
void PatchCommand05(Track* track, char param){
    77ec:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags&=~(TRACK_FLAGS_PLAYING+TRACK_FLAGS_PRIORITY);	//patchPlaying=false,priority=0	
    77ee:	90 81       	ld	r25, Z
    77f0:	9f 75       	andi	r25, 0x5F	; 95
    77f2:	90 83       	st	Z, r25
    77f4:	08 95       	ret

000077f6 <PatchCommand06>:

/*
 * Command 06: Note hold
 * Param:
 */
void PatchCommand06(Track* track, char param){
    77f6:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags|=TRACK_FLAGS_HOLD_ENV; //patchEnvelopeHold=true;
    77f8:	90 81       	ld	r25, Z
    77fa:	90 64       	ori	r25, 0x40	; 64
    77fc:	90 83       	st	Z, r25
    77fe:	08 95       	ret

00007800 <PatchCommand07>:
 * Command 07: Set envelope volume
 * Param:
 */

void PatchCommand07(Track* track, char param){
	track->envelopeVol=param;
    7800:	fc 01       	movw	r30, r24
    7802:	66 87       	std	Z+14, r22	; 0x0e
    7804:	08 95       	ret

00007806 <PatchCommand09>:
 * Command 09: Set tremolo level
 * Param:
*/

void PatchCommand09(Track* track, char param){
	track->tremoloLevel=param;
    7806:	fc 01       	movw	r30, r24
    7808:	62 87       	std	Z+10, r22	; 0x0a
    780a:	08 95       	ret

0000780c <PatchCommand10>:
/*
 * Command 10: Set tremolo rate
 * Param:
*/
void PatchCommand10(Track* track, char param){
	track->tremoloRate=param;
    780c:	fc 01       	movw	r30, r24
    780e:	63 87       	std	Z+11, r22	; 0x0b
    7810:	08 95       	ret

00007812 <PatchCommand11>:
/*
 * Command 11: Pitch slide (linear) 
 * Param: (+/-) half steps to slide to
*/

void PatchCommand11(Track* track, char param){
    7812:	cf 93       	push	r28
    7814:	df 93       	push	r29
    7816:	ec 01       	movw	r28, r24
    7818:	46 2f       	mov	r20, r22
	//slide to note from current note
	s16 currentStep,targetStep,delta;	
	
	currentStep=pgm_read_word(&(steptable[track->note]));
    781a:	29 81       	ldd	r18, Y+1	; 0x01
    781c:	30 e0       	ldi	r19, 0x00	; 0
    781e:	f9 01       	movw	r30, r18
    7820:	ee 0f       	add	r30, r30
    7822:	ff 1f       	adc	r31, r31
    7824:	e8 5f       	subi	r30, 0xF8	; 248
    7826:	fd 47       	sbci	r31, 0x7D	; 125
    7828:	65 91       	lpm	r22, Z+
    782a:	74 91       	lpm	r23, Z
	targetStep=pgm_read_word(&(steptable[track->note+param]));	
    782c:	f9 01       	movw	r30, r18
    782e:	e4 0f       	add	r30, r20
    7830:	f1 1d       	adc	r31, r1
    7832:	47 fd       	sbrc	r20, 7
    7834:	fa 95       	dec	r31
    7836:	ee 0f       	add	r30, r30
    7838:	ff 1f       	adc	r31, r31
    783a:	e8 5f       	subi	r30, 0xF8	; 248
    783c:	fd 47       	sbci	r31, 0x7D	; 125
    783e:	85 91       	lpm	r24, Z+
    7840:	94 91       	lpm	r25, Z
	delta=((targetStep-currentStep)/track->slideSpeed);
    7842:	86 1b       	sub	r24, r22
    7844:	97 0b       	sbc	r25, r23
    7846:	68 85       	ldd	r22, Y+8	; 0x08
    7848:	70 e0       	ldi	r23, 0x00	; 0
    784a:	0e 94 b5 67 	call	0xcf6a	; 0xcf6a <__divmodhi4>
	if(delta==0)delta++;
    784e:	61 15       	cp	r22, r1
    7850:	71 05       	cpc	r23, r1
    7852:	11 f4       	brne	.+4      	; 0x7858 <PatchCommand11+0x46>
    7854:	61 e0       	ldi	r22, 0x01	; 1
    7856:	70 e0       	ldi	r23, 0x00	; 0

	mixer.channels.all[track->channel].step+=delta;
    7858:	ea 81       	ldd	r30, Y+2	; 0x02
    785a:	86 e0       	ldi	r24, 0x06	; 6
    785c:	e8 9f       	mul	r30, r24
    785e:	f0 01       	movw	r30, r0
    7860:	11 24       	eor	r1, r1
    7862:	e0 53       	subi	r30, 0x30	; 48
    7864:	f3 4f       	sbci	r31, 0xF3	; 243
    7866:	81 81       	ldd	r24, Z+1	; 0x01
    7868:	92 81       	ldd	r25, Z+2	; 0x02
    786a:	86 0f       	add	r24, r22
    786c:	97 1f       	adc	r25, r23
    786e:	92 83       	std	Z+2, r25	; 0x02
    7870:	81 83       	std	Z+1, r24	; 0x01
	
	track->slideStep=delta;
    7872:	7e 83       	std	Y+6, r23	; 0x06
    7874:	6d 83       	std	Y+5, r22	; 0x05
	track->flags|=TRACK_FLAGS_SLIDING;
    7876:	88 81       	ld	r24, Y
    7878:	88 60       	ori	r24, 0x08	; 8
    787a:	88 83       	st	Y, r24
	track->slideNote=track->note+param;
    787c:	89 81       	ldd	r24, Y+1	; 0x01
    787e:	48 0f       	add	r20, r24
    7880:	4f 83       	std	Y+7, r20	; 0x07
}
    7882:	df 91       	pop	r29
    7884:	cf 91       	pop	r28
    7886:	08 95       	ret

00007888 <PatchCommand12>:
/*
 * Command 12: Pitch slide speed 
 * Param: slide speed (fixed 4:4)
 */
void PatchCommand12(Track* track, char param){
	track->slideSpeed=param;
    7888:	fc 01       	movw	r30, r24
    788a:	60 87       	std	Z+8, r22	; 0x08
    788c:	08 95       	ret

0000788e <PatchCommand13>:
 *  Command 13: Loop start
 * Description: Defines the start of a loop. Works in conjunction with command 14 (PC_LOOP_END).
 *		 Param: loop count
 */
void PatchCommand13(Track* track, char param){
	track->loopCount=(u8)param;
    788e:	fc 01       	movw	r30, r24
    7890:	64 83       	std	Z+4, r22	; 0x04
    7892:	08 95       	ret

00007894 <PatchCommand02>:
/*
 * Command 02: Set wave
 * Param:
 */
void PatchCommand02(Track* track, char param){
	SetMixerWave(track->channel,param);
    7894:	fc 01       	movw	r30, r24
    7896:	82 81       	ldd	r24, Z+2	; 0x02
    7898:	0c 94 65 40 	jmp	0x80ca	; 0x80ca <SetMixerWave>

0000789c <PatchCommand03>:
}
/*
 * Command 03: Note up * param
 * Param:
 */
void PatchCommand03(Track* track, char param){
    789c:	fc 01       	movw	r30, r24
	track->note+=param;
    789e:	91 81       	ldd	r25, Z+1	; 0x01
    78a0:	69 0f       	add	r22, r25
    78a2:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(track->channel,track->note);
    78a4:	82 81       	ldd	r24, Z+2	; 0x02
    78a6:	0c 94 4e 40 	jmp	0x809c	; 0x809c <SetMixerNote>

000078aa <PatchCommand04>:
}
/*
 * Command 04: Note down * param
 * Param:
 */
void PatchCommand04(Track* track, char param){
    78aa:	fc 01       	movw	r30, r24
	track->note-=param;
    78ac:	91 81       	ldd	r25, Z+1	; 0x01
    78ae:	96 1b       	sub	r25, r22
    78b0:	69 2f       	mov	r22, r25
    78b2:	91 83       	std	Z+1, r25	; 0x01
	SetMixerNote(track->channel,track->note);
    78b4:	82 81       	ldd	r24, Z+2	; 0x02
    78b6:	0c 94 4e 40 	jmp	0x809c	; 0x809c <SetMixerNote>

000078ba <PatchCommand08>:
/*
 * Command 08: Set Note/Pitch
 * Param:
 */

void PatchCommand08(Track* track, char param){
    78ba:	1f 93       	push	r17
    78bc:	cf 93       	push	r28
    78be:	df 93       	push	r29
    78c0:	ec 01       	movw	r28, r24
    78c2:	16 2f       	mov	r17, r22
	SetMixerNote(track->channel,param);
    78c4:	8a 81       	ldd	r24, Y+2	; 0x02
    78c6:	0e 94 4e 40 	call	0x809c	; 0x809c <SetMixerNote>
	track->note=param;
    78ca:	19 83       	std	Y+1, r17	; 0x01
	track->flags &= ~(TRACK_FLAGS_SLIDING);	
    78cc:	88 81       	ld	r24, Y
    78ce:	87 7f       	andi	r24, 0xF7	; 247
    78d0:	88 83       	st	Y, r24
}
    78d2:	df 91       	pop	r29
    78d4:	cf 91       	pop	r28
    78d6:	1f 91       	pop	r17
    78d8:	08 95       	ret

000078da <PatchCommand14>:
 *					1,PC_NOTE_DOWN,3,
 *					0,PC_LOOP_END,2,
 *					0,PATCH_END  
 *				};
 */
void PatchCommand14(Track* track, char param){
    78da:	dc 01       	movw	r26, r24
	if(track->loopCount>0){
    78dc:	14 96       	adiw	r26, 0x04	; 4
    78de:	8c 91       	ld	r24, X
    78e0:	14 97       	sbiw	r26, 0x04	; 4
    78e2:	88 23       	and	r24, r24
    78e4:	19 f1       	breq	.+70     	; 0x792c <PatchCommand14+0x52>
    78e6:	55 96       	adiw	r26, 0x15	; 21
    78e8:	2d 91       	ld	r18, X+
    78ea:	3c 91       	ld	r19, X
    78ec:	56 97       	sbiw	r26, 0x16	; 22
		//track->patchCommandStreamPos=track->loopStart;
		if(param!=0){
    78ee:	66 23       	and	r22, r22
    78f0:	79 f0       	breq	.+30     	; 0x7910 <PatchCommand14+0x36>
			track->patchCommandStreamPos-=((param+1)*3);
    78f2:	77 27       	eor	r23, r23
    78f4:	67 fd       	sbrc	r22, 7
    78f6:	70 95       	com	r23
    78f8:	6f 5f       	subi	r22, 0xFF	; 255
    78fa:	7f 4f       	sbci	r23, 0xFF	; 255
    78fc:	ab 01       	movw	r20, r22
    78fe:	44 0f       	add	r20, r20
    7900:	55 1f       	adc	r21, r21
    7902:	64 0f       	add	r22, r20
    7904:	75 1f       	adc	r23, r21
    7906:	26 1b       	sub	r18, r22
    7908:	37 0b       	sbc	r19, r23
    790a:	09 c0       	rjmp	.+18     	; 0x791e <PatchCommand14+0x44>
			while(1){
				track->patchCommandStreamPos-=3;
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    790c:	ef 3f       	cpi	r30, 0xFF	; 255
    790e:	39 f0       	breq	.+14     	; 0x791e <PatchCommand14+0x44>
		if(param!=0){
			track->patchCommandStreamPos-=((param+1)*3);
		}else{
			u8 command;
			while(1){
				track->patchCommandStreamPos-=3;
    7910:	23 50       	subi	r18, 0x03	; 3
    7912:	31 09       	sbc	r19, r1
    7914:	f9 01       	movw	r30, r18
    7916:	32 97       	sbiw	r30, 0x02	; 2
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
    7918:	e4 91       	lpm	r30, Z
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    791a:	ed 30       	cpi	r30, 0x0D	; 13
    791c:	b9 f7       	brne	.-18     	; 0x790c <PatchCommand14+0x32>
    791e:	56 96       	adiw	r26, 0x16	; 22
    7920:	3c 93       	st	X, r19
    7922:	2e 93       	st	-X, r18
    7924:	55 97       	sbiw	r26, 0x15	; 21
			}
		}
		track->loopCount--;
    7926:	81 50       	subi	r24, 0x01	; 1
    7928:	14 96       	adiw	r26, 0x04	; 4
    792a:	8c 93       	st	X, r24
    792c:	08 95       	ret

0000792e <InitMusicPlayer>:

const Patch *patchPointers;

void InitMusicPlayer(const Patch *patchPointersParam){

	patchPointers=patchPointersParam;
    792e:	90 93 71 0d 	sts	0x0D71, r25
    7932:	80 93 70 0d 	sts	0x0D70, r24

	masterVolume=DEFAULT_MASTER_VOL;
    7936:	8f e6       	ldi	r24, 0x6F	; 111
    7938:	80 93 73 0d 	sts	0x0D73, r24
#if MIDI_IN == ENABLED
	InitUartRxBuffer();
	lastMidiInStatus=0;
#endif

	playSong=false;
    793c:	10 92 ce 0c 	sts	0x0CCE, r1
    7940:	eb e0       	ldi	r30, 0x0B	; 11
    7942:	fd e0       	ldi	r31, 0x0D	; 13

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    7944:	80 e0       	ldi	r24, 0x00	; 0
		tracks[t].channel=t;
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    7946:	90 e1       	ldi	r25, 0x10	; 16
		tracks[t].noteVol=0;
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    7948:	3f ef       	ldi	r19, 0xFF	; 255
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
    794a:	28 e1       	ldi	r18, 0x18	; 24
    794c:	df 01       	movw	r26, r30
    794e:	1e 97       	sbiw	r26, 0x0e	; 14

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].channel=t;
    7950:	8c 93       	st	X, r24
    7952:	12 97       	sbiw	r26, 0x02	; 2
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    7954:	9c 93       	st	X, r25
    7956:	1d 96       	adiw	r26, 0x0d	; 13
		tracks[t].noteVol=0;
    7958:	1c 92       	st	X, r1
    795a:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    795c:	3c 93       	st	X, r19
		tracks[t].patchNo=DEFAULT_PATCH;
    795e:	10 82       	st	Z, r1
    7960:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].tremoloRate=24; //~6hz
    7962:	2c 93       	st	X, r18
    7964:	13 97       	sbiw	r26, 0x03	; 3
		tracks[t].slideSpeed=0x10;
    7966:	9c 93       	st	X, r25
#endif

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    7968:	8f 5f       	subi	r24, 0xFF	; 255
    796a:	77 96       	adiw	r30, 0x17	; 23
    796c:	85 30       	cpi	r24, 0x05	; 5
    796e:	71 f7       	brne	.-36     	; 0x794c <InitMusicPlayer+0x1e>
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
		tracks[t].slideSpeed=0x10;
	}

}
    7970:	08 95       	ret

00007972 <StartSong>:

#if MUSIC_ENGINE == MIDI

	void StartSong(const char *song){
    7972:	eb ef       	ldi	r30, 0xFB	; 251
    7974:	fc e0       	ldi	r31, 0x0C	; 12
		for(unsigned char t=0;t<CHANNELS;t++){
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    7976:	3f ef       	ldi	r19, 0xFF	; 255

#if MUSIC_ENGINE == MIDI

	void StartSong(const char *song){
		for(unsigned char t=0;t<CHANNELS;t++){
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    7978:	20 81       	ld	r18, Z
    797a:	2f 77       	andi	r18, 0x7F	; 127
    797c:	20 83       	st	Z, r18
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    797e:	33 83       	std	Z+3, r19	; 0x03
    7980:	77 96       	adiw	r30, 0x17	; 23
}

#if MUSIC_ENGINE == MIDI

	void StartSong(const char *song){
		for(unsigned char t=0;t<CHANNELS;t++){
    7982:	2d e0       	ldi	r18, 0x0D	; 13
    7984:	ee 36       	cpi	r30, 0x6E	; 110
    7986:	f2 07       	cpc	r31, r18
    7988:	b9 f7       	brne	.-18     	; 0x7978 <StartSong+0x6>
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
		}

		songPos=song+1; //skip first delta-time
    798a:	01 96       	adiw	r24, 0x01	; 1
    798c:	90 93 78 0d 	sts	0x0D78, r25
    7990:	80 93 77 0d 	sts	0x0D77, r24
		songStart=song+1;//skip first delta-time
    7994:	90 93 fa 0c 	sts	0x0CFA, r25
    7998:	80 93 f9 0c 	sts	0x0CF9, r24
		loopStart=song+1;
    799c:	90 93 7a 0d 	sts	0x0D7A, r25
    79a0:	80 93 79 0d 	sts	0x0D79, r24
		nextDeltaTime=0;
    79a4:	10 92 75 0d 	sts	0x0D75, r1
    79a8:	10 92 74 0d 	sts	0x0D74, r1
		currDeltaTime=0;
    79ac:	10 92 6f 0d 	sts	0x0D6F, r1
    79b0:	10 92 6e 0d 	sts	0x0D6E, r1
		songSpeed=0;
    79b4:	10 92 76 0d 	sts	0x0D76, r1

		lastStatus=0;
    79b8:	10 92 72 0d 	sts	0x0D72, r1
		playSong=true;
    79bc:	81 e0       	ldi	r24, 0x01	; 1
    79be:	80 93 ce 0c 	sts	0x0CCE, r24
    79c2:	08 95       	ret

000079c4 <StopSong>:


void StopSong(){

	for(u8 i=0;i<CHANNELS;i++){
		tracks[i].envelopeStep=-6;
    79c4:	eb ef       	ldi	r30, 0xFB	; 251
    79c6:	fc e0       	ldi	r31, 0x0C	; 12
    79c8:	8a ef       	ldi	r24, 0xFA	; 250
    79ca:	87 87       	std	Z+15, r24	; 0x0f
    79cc:	86 a3       	std	Z+38, r24	; 0x26
    79ce:	80 93 38 0d 	sts	0x0D38, r24
    79d2:	80 93 4f 0d 	sts	0x0D4F, r24
    79d6:	80 93 66 0d 	sts	0x0D66, r24
	}

	playSong=false;
    79da:	10 92 ce 0c 	sts	0x0CCE, r1
    79de:	08 95       	ret

000079e0 <ReadVarLen>:
}



unsigned int ReadVarLen(const char **songPos)
{
    79e0:	dc 01       	movw	r26, r24
    unsigned int value;
    unsigned char c;


    if ( (value = pgm_read_byte((*songPos)++)) & 0x80 )
    79e2:	ed 91       	ld	r30, X+
    79e4:	fc 91       	ld	r31, X
    79e6:	11 97       	sbiw	r26, 0x01	; 1
    79e8:	9f 01       	movw	r18, r30
    79ea:	2f 5f       	subi	r18, 0xFF	; 255
    79ec:	3f 4f       	sbci	r19, 0xFF	; 255
    79ee:	11 96       	adiw	r26, 0x01	; 1
    79f0:	3c 93       	st	X, r19
    79f2:	2e 93       	st	-X, r18
    79f4:	e4 91       	lpm	r30, Z
    79f6:	e7 fd       	sbrc	r30, 7
    79f8:	03 c0       	rjmp	.+6      	; 0x7a00 <ReadVarLen+0x20>
    79fa:	8e 2f       	mov	r24, r30
    79fc:	90 e0       	ldi	r25, 0x00	; 0
    79fe:	08 95       	ret
    {
       value &= 0x7F;
    7a00:	ef 77       	andi	r30, 0x7F	; 127
    7a02:	8e 2f       	mov	r24, r30
    7a04:	90 e0       	ldi	r25, 0x00	; 0
       do
       {
         value = (value << 7) + ((c = pgm_read_byte((*songPos)++)) & 0x7F);
    7a06:	96 95       	lsr	r25
    7a08:	98 2f       	mov	r25, r24
    7a0a:	88 27       	eor	r24, r24
    7a0c:	97 95       	ror	r25
    7a0e:	87 95       	ror	r24
    7a10:	2f 5f       	subi	r18, 0xFF	; 255
    7a12:	3f 4f       	sbci	r19, 0xFF	; 255
    7a14:	f9 01       	movw	r30, r18
    7a16:	31 97       	sbiw	r30, 0x01	; 1
    7a18:	e4 91       	lpm	r30, Z
    7a1a:	4e 2f       	mov	r20, r30
    7a1c:	4f 77       	andi	r20, 0x7F	; 127
    7a1e:	84 0f       	add	r24, r20
    7a20:	91 1d       	adc	r25, r1
       } while (c & 0x80);
    7a22:	e7 fd       	sbrc	r30, 7
    7a24:	f0 cf       	rjmp	.-32     	; 0x7a06 <ReadVarLen+0x26>
    7a26:	2d 93       	st	X+, r18
    7a28:	3c 93       	st	X, r19
    }


    return value;
}
    7a2a:	08 95       	ret

00007a2c <TriggerCommon>:




void TriggerCommon(Track* track,u8 patch,u8 volume,u8 note){
    7a2c:	ef 92       	push	r14
    7a2e:	ff 92       	push	r15
    7a30:	0f 93       	push	r16
    7a32:	1f 93       	push	r17
    7a34:	cf 93       	push	r28
    7a36:	df 93       	push	r29
    7a38:	1f 92       	push	r1
    7a3a:	cd b7       	in	r28, 0x3d	; 61
    7a3c:	de b7       	in	r29, 0x3e	; 62
    7a3e:	7c 01       	movw	r14, r24
    7a40:	16 2f       	mov	r17, r22
		
	bool isFx = (track->flags&TRACK_FLAGS_PRIORITY);
    7a42:	fc 01       	movw	r30, r24
    7a44:	80 81       	ld	r24, Z
    7a46:	08 2f       	mov	r16, r24
    7a48:	00 1f       	adc	r16, r16
    7a4a:	00 27       	eor	r16, r16
    7a4c:	00 1f       	adc	r16, r16

	track->envelopeStep=0; 
    7a4e:	17 86       	std	Z+15, r1	; 0x0f
	track->envelopeVol=0xff; 
    7a50:	9f ef       	ldi	r25, 0xFF	; 255
    7a52:	96 87       	std	Z+14, r25	; 0x0e
	track->noteVol=volume;
    7a54:	45 87       	std	Z+13, r20	; 0x0d
	track->patchPlayingTime=0;
    7a56:	14 8a       	std	Z+20, r1	; 0x14
	track->flags&=(~(TRACK_FLAGS_HOLD_ENV|TRACK_FLAGS_SLIDING));
    7a58:	87 7b       	andi	r24, 0xB7	; 183
    7a5a:	80 83       	st	Z, r24
	track->tremoloLevel=0;
    7a5c:	12 86       	std	Z+10, r1	; 0x0a
	track->tremoloPos=0;
    7a5e:	11 86       	std	Z+9, r1	; 0x09
	track->note=note;
    7a60:	21 83       	std	Z+1, r18	; 0x01
	track->loopCount=0;
    7a62:	14 82       	std	Z+4, r1	; 0x04

#if MUSIC_ENGINE == MIDI
	track->expressionVol=DEFAULT_EXPRESSION_VOL;
    7a64:	93 83       	std	Z+3, r25	; 0x03
#endif

	#if SOUND_MIXER == MIXER_TYPE_INLINE

		if(track->channel==3){
    7a66:	82 81       	ldd	r24, Z+2	; 0x02
    7a68:	83 30       	cpi	r24, 0x03	; 3
    7a6a:	69 f4       	brne	.+26     	; 0x7a86 <TriggerCommon+0x5a>
			//noise channel		
			if(!isFx) patch=note;			
    7a6c:	01 11       	cpse	r16, r1
    7a6e:	01 c0       	rjmp	.+2      	; 0x7a72 <TriggerCommon+0x46>
    7a70:	12 2f       	mov	r17, r18
			mixer.channels.type.noise.barrel=0x0101;				
    7a72:	81 e0       	ldi	r24, 0x01	; 1
    7a74:	91 e0       	ldi	r25, 0x01	; 1
    7a76:	90 93 e5 0c 	sts	0x0CE5, r25
    7a7a:	80 93 e4 0c 	sts	0x0CE4, r24
			mixer.channels.type.noise.params=1; //default (15bits,no divider)
    7a7e:	81 e0       	ldi	r24, 0x01	; 1
    7a80:	80 93 e3 0c 	sts	0x0CE3, r24
    7a84:	39 c0       	rjmp	.+114    	; 0x7af8 <TriggerCommon+0xcc>

		#if SOUND_CHANNEL_5_ENABLE==1		

		}else if(track->channel==4){
    7a86:	84 30       	cpi	r24, 0x04	; 4
    7a88:	69 f5       	brne	.+90     	; 0x7ae4 <TriggerCommon+0xb8>
				//PCM channel					
				mixer.channels.type.pcm.positionFrac=0;
    7a8a:	10 92 eb 0c 	sts	0x0CEB, r1
				const char *pos=(const char*)pgm_read_word(&(patchPointers[patch].pcmData));
    7a8e:	80 91 70 0d 	lds	r24, 0x0D70
    7a92:	90 91 71 0d 	lds	r25, 0x0D71
    7a96:	f9 e0       	ldi	r31, 0x09	; 9
    7a98:	6f 9f       	mul	r22, r31
    7a9a:	80 0d       	add	r24, r0
    7a9c:	91 1d       	adc	r25, r1
    7a9e:	11 24       	eor	r1, r1
    7aa0:	fc 01       	movw	r30, r24
    7aa2:	31 96       	adiw	r30, 0x01	; 1
    7aa4:	a5 91       	lpm	r26, Z+
    7aa6:	b4 91       	lpm	r27, Z
				mixer.channels.type.pcm.position=pos;				
    7aa8:	b0 93 ed 0c 	sts	0x0CED, r27
    7aac:	a0 93 ec 0c 	sts	0x0CEC, r26
				mixer.pcmLoopLenght=pgm_read_word(&(patchPointers[patch].loopEnd))-pgm_read_word(&(patchPointers[patch].loopStart));
    7ab0:	ac 01       	movw	r20, r24
    7ab2:	49 5f       	subi	r20, 0xF9	; 249
    7ab4:	5f 4f       	sbci	r21, 0xFF	; 255
    7ab6:	fa 01       	movw	r30, r20
    7ab8:	65 91       	lpm	r22, Z+
    7aba:	74 91       	lpm	r23, Z
    7abc:	05 96       	adiw	r24, 0x05	; 5
    7abe:	fc 01       	movw	r30, r24
    7ac0:	85 91       	lpm	r24, Z+
    7ac2:	94 91       	lpm	r25, Z
    7ac4:	68 1b       	sub	r22, r24
    7ac6:	79 0b       	sbc	r23, r25
    7ac8:	70 93 ef 0c 	sts	0x0CEF, r23
    7acc:	60 93 ee 0c 	sts	0x0CEE, r22
				mixer.pcmLoopEnd=pos+pgm_read_word(&(patchPointers[patch].loopEnd));
    7ad0:	fa 01       	movw	r30, r20
    7ad2:	85 91       	lpm	r24, Z+
    7ad4:	94 91       	lpm	r25, Z
    7ad6:	a8 0f       	add	r26, r24
    7ad8:	b9 1f       	adc	r27, r25
    7ada:	b0 93 f1 0c 	sts	0x0CF1, r27
    7ade:	a0 93 f0 0c 	sts	0x0CF0, r26
    7ae2:	05 c0       	rjmp	.+10     	; 0x7aee <TriggerCommon+0xc2>
				SetMixerNote(track->channel,note);
		#endif	

		}else{					
			//wave channels					
			SetMixerWave(track->channel,0);//default wave
    7ae4:	60 e0       	ldi	r22, 0x00	; 0
    7ae6:	29 83       	std	Y+1, r18	; 0x01
    7ae8:	0e 94 65 40 	call	0x80ca	; 0x80ca <SetMixerWave>
			SetMixerNote(track->channel,note);
    7aec:	29 81       	ldd	r18, Y+1	; 0x01
    7aee:	62 2f       	mov	r22, r18
    7af0:	f7 01       	movw	r30, r14
    7af2:	82 81       	ldd	r24, Z+2	; 0x02
    7af4:	0e 94 4e 40 	call	0x809c	; 0x809c <SetMixerNote>
		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
		track->fxPatchNo=patch;
    7af8:	f7 01       	movw	r30, r14

		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
    7afa:	00 23       	and	r16, r16
    7afc:	11 f0       	breq	.+4      	; 0x7b02 <TriggerCommon+0xd6>
		track->fxPatchNo=patch;
    7afe:	11 8b       	std	Z+17, r17	; 0x11
    7b00:	01 c0       	rjmp	.+2      	; 0x7b04 <TriggerCommon+0xd8>
	}else{
		track->patchNo=patch;	
    7b02:	10 8b       	std	Z+16, r17	; 0x10
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
    7b04:	e0 91 70 0d 	lds	r30, 0x0D70
    7b08:	f0 91 71 0d 	lds	r31, 0x0D71
    7b0c:	39 e0       	ldi	r19, 0x09	; 9
    7b0e:	13 9f       	mul	r17, r19
    7b10:	e0 0d       	add	r30, r0
    7b12:	f1 1d       	adc	r31, r1
    7b14:	11 24       	eor	r1, r1
    7b16:	33 96       	adiw	r30, 0x03	; 3
    7b18:	85 91       	lpm	r24, Z+
    7b1a:	94 91       	lpm	r25, Z
	if(pos==NULL){
		track->patchCommandStreamPos=NULL;
    7b1c:	f7 01       	movw	r30, r14
	}else{
		track->patchNo=patch;	
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
	if(pos==NULL){
    7b1e:	00 97       	sbiw	r24, 0x00	; 0
    7b20:	19 f4       	brne	.+6      	; 0x7b28 <TriggerCommon+0xfc>
		track->patchCommandStreamPos=NULL;
    7b22:	16 8a       	std	Z+22, r1	; 0x16
    7b24:	15 8a       	std	Z+21, r1	; 0x15
    7b26:	08 c0       	rjmp	.+16     	; 0x7b38 <TriggerCommon+0x10c>
	}else{
		track->patchCurrDeltaTime=0;
    7b28:	13 8a       	std	Z+19, r1	; 0x13
		track->patchNextDeltaTime=pgm_read_byte(pos++);
    7b2a:	fc 01       	movw	r30, r24
    7b2c:	24 91       	lpm	r18, Z
    7b2e:	f7 01       	movw	r30, r14
    7b30:	22 8b       	std	Z+18, r18	; 0x12
    7b32:	01 96       	adiw	r24, 0x01	; 1
		track->patchCommandStreamPos=pos;
    7b34:	96 8b       	std	Z+22, r25	; 0x16
    7b36:	85 8b       	std	Z+21, r24	; 0x15
	}

}
    7b38:	0f 90       	pop	r0
    7b3a:	df 91       	pop	r29
    7b3c:	cf 91       	pop	r28
    7b3e:	1f 91       	pop	r17
    7b40:	0f 91       	pop	r16
    7b42:	ff 90       	pop	r15
    7b44:	ef 90       	pop	r14
    7b46:	08 95       	ret

00007b48 <TriggerFx>:

/* Trigger a sound effect.
 * Method allocates the channel based on priority.
 * Retrig: if this fx if already playing on a track, reuse same track.
 */
void TriggerFx(unsigned char patch,unsigned char volume,bool retrig){
    7b48:	cf 93       	push	r28
    7b4a:	df 93       	push	r29
	unsigned char channel;
	
	unsigned char type=(unsigned char)pgm_read_byte(&(patchPointers[patch].type));
    7b4c:	e0 91 70 0d 	lds	r30, 0x0D70
    7b50:	f0 91 71 0d 	lds	r31, 0x0D71
    7b54:	99 e0       	ldi	r25, 0x09	; 9
    7b56:	89 9f       	mul	r24, r25
    7b58:	e0 0d       	add	r30, r0
    7b5a:	f1 1d       	adc	r31, r1
    7b5c:	11 24       	eor	r1, r1
    7b5e:	e4 91       	lpm	r30, Z

	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
    7b60:	e1 30       	cpi	r30, 0x01	; 1
    7b62:	e9 f0       	breq	.+58     	; 0x7b9e <TriggerFx+0x56>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
    7b64:	e2 30       	cpi	r30, 0x02	; 2
    7b66:	e9 f0       	breq	.+58     	; 0x7ba2 <TriggerFx+0x5a>
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
    7b68:	20 91 12 0d 	lds	r18, 0x0D12
    7b6c:	27 ff       	sbrs	r18, 7
    7b6e:	1d c0       	rjmp	.+58     	; 0x7baa <TriggerFx+0x62>
    7b70:	20 91 23 0d 	lds	r18, 0x0D23
    7b74:	28 13       	cpse	r18, r24
    7b76:	02 c0       	rjmp	.+4      	; 0x7b7c <TriggerFx+0x34>
    7b78:	41 11       	cpse	r20, r1
    7b7a:	17 c0       	rjmp	.+46     	; 0x7baa <TriggerFx+0x62>
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
    7b7c:	20 91 29 0d 	lds	r18, 0x0D29
    7b80:	27 ff       	sbrs	r18, 7
    7b82:	11 c0       	rjmp	.+34     	; 0x7ba6 <TriggerFx+0x5e>
    7b84:	20 91 3a 0d 	lds	r18, 0x0D3A
    7b88:	28 13       	cpse	r18, r24
    7b8a:	02 c0       	rjmp	.+4      	; 0x7b90 <TriggerFx+0x48>
    7b8c:	41 11       	cpse	r20, r1
    7b8e:	0b c0       	rjmp	.+22     	; 0x7ba6 <TriggerFx+0x5e>
		channel=2;
	}else{
		//both channels have fx playing, use the oldest one
		if(tracks[1].patchPlayingTime>tracks[2].patchPlayingTime){
    7b90:	20 91 26 0d 	lds	r18, 0x0D26
    7b94:	90 91 3d 0d 	lds	r25, 0x0D3D
    7b98:	92 17       	cp	r25, r18
    7b9a:	28 f4       	brcc	.+10     	; 0x7ba6 <TriggerFx+0x5e>
    7b9c:	06 c0       	rjmp	.+12     	; 0x7baa <TriggerFx+0x62>
	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
		//noise or PCM channel fx		
		channel=3;
    7b9e:	c3 e0       	ldi	r28, 0x03	; 3
    7ba0:	05 c0       	rjmp	.+10     	; 0x7bac <TriggerFx+0x64>
	}else if(type==2){
		channel=4;
    7ba2:	c4 e0       	ldi	r28, 0x04	; 4
    7ba4:	03 c0       	rjmp	.+6      	; 0x7bac <TriggerFx+0x64>
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
		channel=2;
    7ba6:	c2 e0       	ldi	r28, 0x02	; 2
    7ba8:	01 c0       	rjmp	.+2      	; 0x7bac <TriggerFx+0x64>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
    7baa:	c1 e0       	ldi	r28, 0x01	; 1
			channel=2;
		}
	}				

	Track* track=&tracks[channel];
	track->flags=TRACK_FLAGS_PRIORITY; //priority=1;
    7bac:	97 e1       	ldi	r25, 0x17	; 23
    7bae:	c9 9f       	mul	r28, r25
    7bb0:	e0 01       	movw	r28, r0
    7bb2:	11 24       	eor	r1, r1
    7bb4:	c5 50       	subi	r28, 0x05	; 5
    7bb6:	d3 4f       	sbci	r29, 0xF3	; 243
    7bb8:	90 e8       	ldi	r25, 0x80	; 128
    7bba:	98 83       	st	Y, r25
	track->patchCommandStreamPos = NULL;
    7bbc:	1e 8a       	std	Y+22, r1	; 0x16
    7bbe:	1d 8a       	std	Y+21, r1	; 0x15
	TriggerCommon(track,patch,volume,80);
    7bc0:	20 e5       	ldi	r18, 0x50	; 80
    7bc2:	46 2f       	mov	r20, r22
    7bc4:	68 2f       	mov	r22, r24
    7bc6:	ce 01       	movw	r24, r28
    7bc8:	0e 94 16 3d 	call	0x7a2c	; 0x7a2c <TriggerCommon>
	track->flags|=TRACK_FLAGS_PLAYING;
    7bcc:	88 81       	ld	r24, Y
    7bce:	80 62       	ori	r24, 0x20	; 32
    7bd0:	88 83       	st	Y, r24
}
    7bd2:	df 91       	pop	r29
    7bd4:	cf 91       	pop	r28
    7bd6:	08 95       	ret

00007bd8 <TriggerNote>:


void TriggerNote(unsigned char channel,unsigned char patch,unsigned char note,unsigned char volume){
    7bd8:	cf 93       	push	r28
    7bda:	df 93       	push	r29
	Track* track=&tracks[channel];

	//allow only other music notes 
	if((track->flags&TRACK_FLAGS_PLAYING)==0 || (track->flags&TRACK_FLAGS_PRIORITY)==0){
    7bdc:	a8 2f       	mov	r26, r24
    7bde:	b0 e0       	ldi	r27, 0x00	; 0
    7be0:	97 e1       	ldi	r25, 0x17	; 23
    7be2:	89 9f       	mul	r24, r25
    7be4:	f0 01       	movw	r30, r0
    7be6:	11 24       	eor	r1, r1
    7be8:	e5 50       	subi	r30, 0x05	; 5
    7bea:	f3 4f       	sbci	r31, 0xF3	; 243
    7bec:	80 81       	ld	r24, Z
    7bee:	85 ff       	sbrs	r24, 5
    7bf0:	02 c0       	rjmp	.+4      	; 0x7bf6 <TriggerNote+0x1e>
    7bf2:	87 fd       	sbrc	r24, 7
    7bf4:	2e c0       	rjmp	.+92     	; 0x7c52 <TriggerNote+0x7a>
			
		if(volume==0){ //note-off received
    7bf6:	21 11       	cpse	r18, r1
    7bf8:	18 c0       	rjmp	.+48     	; 0x7c2a <TriggerNote+0x52>

			
			//cut note if there's no envelope & no note hold
			if(track->envelopeStep==0 && !(track->flags&TRACK_FLAGS_HOLD_ENV)){
    7bfa:	97 e1       	ldi	r25, 0x17	; 23
    7bfc:	9a 9f       	mul	r25, r26
    7bfe:	f0 01       	movw	r30, r0
    7c00:	9b 9f       	mul	r25, r27
    7c02:	f0 0d       	add	r31, r0
    7c04:	11 24       	eor	r1, r1
    7c06:	e5 50       	subi	r30, 0x05	; 5
    7c08:	f3 4f       	sbci	r31, 0xF3	; 243
    7c0a:	97 85       	ldd	r25, Z+15	; 0x0f
    7c0c:	91 11       	cpse	r25, r1
    7c0e:	02 c0       	rjmp	.+4      	; 0x7c14 <TriggerNote+0x3c>
    7c10:	86 ff       	sbrs	r24, 6
				track->noteVol=0;
    7c12:	15 86       	std	Z+13, r1	; 0x0d
			}

			track->flags&=(~TRACK_FLAGS_HOLD_ENV);//patchEnvelopeHold=false;
    7c14:	97 e1       	ldi	r25, 0x17	; 23
    7c16:	9a 9f       	mul	r25, r26
    7c18:	f0 01       	movw	r30, r0
    7c1a:	9b 9f       	mul	r25, r27
    7c1c:	f0 0d       	add	r31, r0
    7c1e:	11 24       	eor	r1, r1
    7c20:	e5 50       	subi	r30, 0x05	; 5
    7c22:	f3 4f       	sbci	r31, 0xF3	; 243
    7c24:	8f 7b       	andi	r24, 0xBF	; 191
    7c26:	80 83       	st	Z, r24
    7c28:	14 c0       	rjmp	.+40     	; 0x7c52 <TriggerNote+0x7a>
    7c2a:	82 2f       	mov	r24, r18
    7c2c:	24 2f       	mov	r18, r20
		}else{
		
			track->flags=0;//&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    7c2e:	97 e1       	ldi	r25, 0x17	; 23
    7c30:	9a 9f       	mul	r25, r26
    7c32:	e0 01       	movw	r28, r0
    7c34:	9b 9f       	mul	r25, r27
    7c36:	d0 0d       	add	r29, r0
    7c38:	11 24       	eor	r1, r1
    7c3a:	c5 50       	subi	r28, 0x05	; 5
    7c3c:	d3 4f       	sbci	r29, 0xF3	; 243
    7c3e:	18 82       	st	Y, r1
			track->patchCommandStreamPos = NULL;
    7c40:	1e 8a       	std	Y+22, r1	; 0x16
    7c42:	1d 8a       	std	Y+21, r1	; 0x15
			TriggerCommon(track,patch,volume,note);
    7c44:	48 2f       	mov	r20, r24
    7c46:	ce 01       	movw	r24, r28
    7c48:	0e 94 16 3d 	call	0x7a2c	; 0x7a2c <TriggerCommon>
			track->flags|=TRACK_FLAGS_PLAYING;
    7c4c:	88 81       	ld	r24, Y
    7c4e:	80 62       	ori	r24, 0x20	; 32
    7c50:	88 83       	st	Y, r24
		}

	}
}
    7c52:	df 91       	pop	r29
    7c54:	cf 91       	pop	r28
    7c56:	08 95       	ret

00007c58 <ProcessMusic>:
	}

#endif


void ProcessMusic(void){
    7c58:	6f 92       	push	r6
    7c5a:	7f 92       	push	r7
    7c5c:	8f 92       	push	r8
    7c5e:	9f 92       	push	r9
    7c60:	af 92       	push	r10
    7c62:	bf 92       	push	r11
    7c64:	cf 92       	push	r12
    7c66:	df 92       	push	r13
    7c68:	ef 92       	push	r14
    7c6a:	ff 92       	push	r15
    7c6c:	0f 93       	push	r16
    7c6e:	1f 93       	push	r17
    7c70:	cf 93       	push	r28
    7c72:	df 93       	push	r29
    7c74:	cb ef       	ldi	r28, 0xFB	; 251
    7c76:	dc e0       	ldi	r29, 0x0C	; 12
    7c78:	00 ed       	ldi	r16, 0xD0	; 208
    7c7a:	1c e0       	ldi	r17, 0x0C	; 12
    7c7c:	d8 01       	movw	r26, r16
    7c7e:	9e 01       	movw	r18, r28
    7c80:	40 e0       	ldi	r20, 0x00	; 0
    7c82:	50 e0       	ldi	r21, 0x00	; 0
    7c84:	ca 01       	movw	r24, r20
    7c86:	85 50       	subi	r24, 0x05	; 5
    7c88:	93 4f       	sbci	r25, 0xF3	; 243
    7c8a:	6c 01       	movw	r12, r24
	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//update envelope
		if(track->envelopeStep!=0){
    7c8c:	fc 01       	movw	r30, r24
    7c8e:	87 85       	ldd	r24, Z+15	; 0x0f
    7c90:	88 23       	and	r24, r24
    7c92:	91 f0       	breq	.+36     	; 0x7cb8 <ProcessMusic+0x60>
			vol=track->envelopeVol+track->envelopeStep;		
    7c94:	66 85       	ldd	r22, Z+14	; 0x0e
    7c96:	99 27       	eor	r25, r25
    7c98:	87 fd       	sbrc	r24, 7
    7c9a:	90 95       	com	r25
    7c9c:	86 0f       	add	r24, r22
    7c9e:	91 1d       	adc	r25, r1
    7ca0:	8f 3f       	cpi	r24, 0xFF	; 255
    7ca2:	91 05       	cpc	r25, r1
    7ca4:	19 f0       	breq	.+6      	; 0x7cac <ProcessMusic+0x54>
    7ca6:	14 f0       	brlt	.+4      	; 0x7cac <ProcessMusic+0x54>
    7ca8:	8f ef       	ldi	r24, 0xFF	; 255
    7caa:	90 e0       	ldi	r25, 0x00	; 0
    7cac:	97 ff       	sbrs	r25, 7
    7cae:	02 c0       	rjmp	.+4      	; 0x7cb4 <ProcessMusic+0x5c>
    7cb0:	80 e0       	ldi	r24, 0x00	; 0
    7cb2:	90 e0       	ldi	r25, 0x00	; 0
			if(vol<0){
				vol=0;			
			}else if(vol>0xff){
				vol=0xff;						
			}
			track->envelopeVol=vol;
    7cb4:	f6 01       	movw	r30, r12
    7cb6:	86 87       	std	Z+14, r24	; 0x0e
		}

		//if volumes reaches zero and no more patch command, explicitly end playing on track
		//if(vol==0 && track->patchCommandStreamPos==NULL) track->flags&=~(TRACK_FLAGS_PLAYING);

		if(track->flags & TRACK_FLAGS_SLIDING){
    7cb8:	f9 01       	movw	r30, r18
    7cba:	f0 80       	ld	r15, Z
    7cbc:	f3 fe       	sbrs	r15, 3
    7cbe:	2a c0       	rjmp	.+84     	; 0x7d14 <ProcessMusic+0xbc>

			mixer.channels.all[trackNo].step+=track->slideStep;
    7cc0:	65 81       	ldd	r22, Z+5	; 0x05
    7cc2:	76 81       	ldd	r23, Z+6	; 0x06
    7cc4:	11 96       	adiw	r26, 0x01	; 1
    7cc6:	8d 91       	ld	r24, X+
    7cc8:	9c 91       	ld	r25, X
    7cca:	12 97       	sbiw	r26, 0x02	; 2
    7ccc:	86 0f       	add	r24, r22
    7cce:	97 1f       	adc	r25, r23
    7cd0:	12 96       	adiw	r26, 0x02	; 2
    7cd2:	9c 93       	st	X, r25
    7cd4:	8e 93       	st	-X, r24
    7cd6:	11 97       	sbiw	r26, 0x01	; 1
			u16 tStep=pgm_read_word(&(steptable[track->slideNote]));
    7cd8:	f6 01       	movw	r30, r12
    7cda:	e7 80       	ldd	r14, Z+7	; 0x07
    7cdc:	ee 2d       	mov	r30, r14
    7cde:	f0 e0       	ldi	r31, 0x00	; 0
    7ce0:	ee 0f       	add	r30, r30
    7ce2:	ff 1f       	adc	r31, r31
    7ce4:	e8 5f       	subi	r30, 0xF8	; 248
    7ce6:	fd 47       	sbci	r31, 0x7D	; 125
    7ce8:	c5 90       	lpm	r12, Z+
    7cea:	d4 90       	lpm	r13, Z

			if((track->slideStep>0 && mixer.channels.all[trackNo].step>=tStep) || 
    7cec:	16 16       	cp	r1, r22
    7cee:	17 06       	cpc	r1, r23
    7cf0:	24 f4       	brge	.+8      	; 0x7cfa <ProcessMusic+0xa2>
    7cf2:	8c 15       	cp	r24, r12
    7cf4:	9d 05       	cpc	r25, r13
    7cf6:	30 f4       	brcc	.+12     	; 0x7d04 <ProcessMusic+0xac>
    7cf8:	0d c0       	rjmp	.+26     	; 0x7d14 <ProcessMusic+0xbc>
    7cfa:	67 2b       	or	r22, r23
    7cfc:	59 f0       	breq	.+22     	; 0x7d14 <ProcessMusic+0xbc>
				(track->slideStep<0 && mixer.channels.all[trackNo].step<=tStep))
    7cfe:	c8 16       	cp	r12, r24
    7d00:	d9 06       	cpc	r13, r25
    7d02:	40 f0       	brcs	.+16     	; 0x7d14 <ProcessMusic+0xbc>
			{					
				mixer.channels.all[trackNo].step = tStep;					
    7d04:	12 96       	adiw	r26, 0x02	; 2
    7d06:	dc 92       	st	X, r13
    7d08:	ce 92       	st	-X, r12
    7d0a:	11 97       	sbiw	r26, 0x01	; 1
				track->flags &= ~(TRACK_FLAGS_SLIDING);	
    7d0c:	8f 2d       	mov	r24, r15
    7d0e:	87 7f       	andi	r24, 0xF7	; 247
    7d10:	f9 01       	movw	r30, r18
    7d12:	80 83       	st	Z, r24
    7d14:	49 5e       	subi	r20, 0xE9	; 233
    7d16:	5f 4f       	sbci	r21, 0xFF	; 255
    7d18:	29 5e       	subi	r18, 0xE9	; 233
    7d1a:	3f 4f       	sbci	r19, 0xFF	; 255
    7d1c:	16 96       	adiw	r26, 0x06	; 6
	u8 channel;
	Track* track;


	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    7d1e:	43 37       	cpi	r20, 0x73	; 115
    7d20:	51 05       	cpc	r21, r1
    7d22:	09 f0       	breq	.+2      	; 0x7d26 <ProcessMusic+0xce>
    7d24:	af cf       	rjmp	.-162    	; 0x7c84 <ProcessMusic+0x2c>
	}



	//Process song MIDI notes
	if(playSong){
    7d26:	80 91 ce 0c 	lds	r24, 0x0CCE
    7d2a:	88 23       	and	r24, r24
    7d2c:	09 f4       	brne	.+2      	; 0x7d30 <ProcessMusic+0xd8>
    7d2e:	cc c0       	rjmp	.+408    	; 0x7ec8 <ProcessMusic+0x270>
							}else if(c1==CONTROLER_EXPRESSION){
								tracks[channel].expressionVol=c2<<1;
							}else if(c1==CONTROLER_TREMOLO){
								tracks[channel].tremoloLevel=c2<<1;
							}else if(c1==CONTROLER_TREMOLO_RATE){
								tracks[channel].tremoloRate=c2<<1;
    7d30:	57 e1       	ldi	r21, 0x17	; 23
    7d32:	f5 2e       	mov	r15, r21
	if(playSong){
	
		#if MUSIC_ENGINE == MIDI
			
			//process all simultaneous events
			while(currDeltaTime==nextDeltaTime){
    7d34:	80 91 6e 0d 	lds	r24, 0x0D6E
    7d38:	90 91 6f 0d 	lds	r25, 0x0D6F
    7d3c:	20 91 74 0d 	lds	r18, 0x0D74
    7d40:	30 91 75 0d 	lds	r19, 0x0D75
    7d44:	82 17       	cp	r24, r18
    7d46:	93 07       	cpc	r25, r19
    7d48:	09 f0       	breq	.+2      	; 0x7d4c <ProcessMusic+0xf4>
    7d4a:	b9 c0       	rjmp	.+370    	; 0x7ebe <ProcessMusic+0x266>

				c1=pgm_read_byte(songPos++);
    7d4c:	20 91 77 0d 	lds	r18, 0x0D77
    7d50:	30 91 78 0d 	lds	r19, 0x0D78
    7d54:	b9 01       	movw	r22, r18
    7d56:	6f 5f       	subi	r22, 0xFF	; 255
    7d58:	7f 4f       	sbci	r23, 0xFF	; 255
    7d5a:	70 93 78 0d 	sts	0x0D78, r23
    7d5e:	60 93 77 0d 	sts	0x0D77, r22
    7d62:	f9 01       	movw	r30, r18
    7d64:	44 91       	lpm	r20, Z
			
				if(c1==0xff){
    7d66:	4f 3f       	cpi	r20, 0xFF	; 255
    7d68:	79 f5       	brne	.+94     	; 0x7dc8 <ProcessMusic+0x170>
					//META data type event
					c1=pgm_read_byte(songPos++);
    7d6a:	a9 01       	movw	r20, r18
    7d6c:	4e 5f       	subi	r20, 0xFE	; 254
    7d6e:	5f 4f       	sbci	r21, 0xFF	; 255
    7d70:	50 93 78 0d 	sts	0x0D78, r21
    7d74:	40 93 77 0d 	sts	0x0D77, r20
    7d78:	fb 01       	movw	r30, r22
    7d7a:	64 91       	lpm	r22, Z

				
					if(c1==0x2f){ //end of song
    7d7c:	6f 32       	cpi	r22, 0x2F	; 47
    7d7e:	19 f4       	brne	.+6      	; 0x7d86 <ProcessMusic+0x12e>
						playSong=false;
    7d80:	10 92 ce 0c 	sts	0x0CCE, r1
						break;	
    7d84:	9c c0       	rjmp	.+312    	; 0x7ebe <ProcessMusic+0x266>
					}else if(c1==0x6){ //marker
    7d86:	66 30       	cpi	r22, 0x06	; 6
    7d88:	09 f0       	breq	.+2      	; 0x7d8c <ProcessMusic+0x134>
    7d8a:	8c c0       	rjmp	.+280    	; 0x7ea4 <ProcessMusic+0x24c>
						c1=pgm_read_byte(songPos++); //read len
    7d8c:	fa 01       	movw	r30, r20
    7d8e:	44 91       	lpm	r20, Z
						c2=pgm_read_byte(songPos++); //read data
    7d90:	c9 01       	movw	r24, r18
    7d92:	04 96       	adiw	r24, 0x04	; 4
    7d94:	90 93 78 0d 	sts	0x0D78, r25
    7d98:	80 93 77 0d 	sts	0x0D77, r24
				
					if(c1==0x2f){ //end of song
						playSong=false;
						break;	
					}else if(c1==0x6){ //marker
						c1=pgm_read_byte(songPos++); //read len
    7d9c:	f9 01       	movw	r30, r18
    7d9e:	33 96       	adiw	r30, 0x03	; 3
						c2=pgm_read_byte(songPos++); //read data
    7da0:	e4 91       	lpm	r30, Z
						if(c2=='S'){ //loop start
    7da2:	e3 35       	cpi	r30, 0x53	; 83
    7da4:	29 f4       	brne	.+10     	; 0x7db0 <ProcessMusic+0x158>
							loopStart=songPos;
    7da6:	90 93 7a 0d 	sts	0x0D7A, r25
    7daa:	80 93 79 0d 	sts	0x0D79, r24
    7dae:	7a c0       	rjmp	.+244    	; 0x7ea4 <ProcessMusic+0x24c>
						}else if(c2=='E'){//loop end
    7db0:	e5 34       	cpi	r30, 0x45	; 69
    7db2:	09 f0       	breq	.+2      	; 0x7db6 <ProcessMusic+0x15e>
    7db4:	77 c0       	rjmp	.+238    	; 0x7ea4 <ProcessMusic+0x24c>
							songPos=loopStart;
    7db6:	80 91 79 0d 	lds	r24, 0x0D79
    7dba:	90 91 7a 0d 	lds	r25, 0x0D7A
    7dbe:	90 93 78 0d 	sts	0x0D78, r25
    7dc2:	80 93 77 0d 	sts	0x0D77, r24
    7dc6:	6e c0       	rjmp	.+220    	; 0x7ea4 <ProcessMusic+0x24c>
					}
				

				}else{

					if(c1&0x80) lastStatus=c1;					
    7dc8:	47 fd       	sbrc	r20, 7
    7dca:	40 93 72 0d 	sts	0x0D72, r20
					channel=lastStatus&0x0f;
    7dce:	90 91 72 0d 	lds	r25, 0x0D72
    7dd2:	89 2f       	mov	r24, r25
    7dd4:	8f 70       	andi	r24, 0x0F	; 15
				
					//get next data byte
					//Note: maybe we should not advance the cursor
					//in case we receive an unsupported command				
					if(c1&0x80) c1=pgm_read_byte(songPos++); 
    7dd6:	47 ff       	sbrs	r20, 7
    7dd8:	08 c0       	rjmp	.+16     	; 0x7dea <ProcessMusic+0x192>
    7dda:	2e 5f       	subi	r18, 0xFE	; 254
    7ddc:	3f 4f       	sbci	r19, 0xFF	; 255
    7dde:	30 93 78 0d 	sts	0x0D78, r19
    7de2:	20 93 77 0d 	sts	0x0D77, r18
    7de6:	fb 01       	movw	r30, r22
    7de8:	44 91       	lpm	r20, Z

					switch(lastStatus&0xf0){
    7dea:	90 7f       	andi	r25, 0xF0	; 240
    7dec:	90 3b       	cpi	r25, 0xB0	; 176
    7dee:	e1 f0       	breq	.+56     	; 0x7e28 <ProcessMusic+0x1d0>
    7df0:	90 3c       	cpi	r25, 0xC0	; 192
    7df2:	09 f4       	brne	.+2      	; 0x7df6 <ProcessMusic+0x19e>
    7df4:	51 c0       	rjmp	.+162    	; 0x7e98 <ProcessMusic+0x240>
    7df6:	90 39       	cpi	r25, 0x90	; 144
    7df8:	09 f0       	breq	.+2      	; 0x7dfc <ProcessMusic+0x1a4>
    7dfa:	54 c0       	rjmp	.+168    	; 0x7ea4 <ProcessMusic+0x24c>

						//note-on
						case 0x90:
							//c1 = note						
							c2=pgm_read_byte(songPos++)<<1; //get volume
    7dfc:	e0 91 77 0d 	lds	r30, 0x0D77
    7e00:	f0 91 78 0d 	lds	r31, 0x0D78
    7e04:	9f 01       	movw	r18, r30
    7e06:	2f 5f       	subi	r18, 0xFF	; 255
    7e08:	3f 4f       	sbci	r19, 0xFF	; 255
    7e0a:	30 93 78 0d 	sts	0x0D78, r19
    7e0e:	20 93 77 0d 	sts	0x0D77, r18
    7e12:	24 91       	lpm	r18, Z
    7e14:	22 0f       	add	r18, r18
						
							if(tracks[channel].flags|TRACK_FLAGS_ALLOCATED){ //allocated==true
								TriggerNote(channel,tracks[channel].patchNo,c1,c2);
    7e16:	f8 9e       	mul	r15, r24
    7e18:	f0 01       	movw	r30, r0
    7e1a:	11 24       	eor	r1, r1
    7e1c:	e5 50       	subi	r30, 0x05	; 5
    7e1e:	f3 4f       	sbci	r31, 0xF3	; 243
    7e20:	60 89       	ldd	r22, Z+16	; 0x10
    7e22:	0e 94 ec 3d 	call	0x7bd8	; 0x7bd8 <TriggerNote>
    7e26:	3e c0       	rjmp	.+124    	; 0x7ea4 <ProcessMusic+0x24c>
							break;

						//controllers
						case 0xb0:
							///c1 = controller #
							c2=pgm_read_byte(songPos++); //get controller value
    7e28:	e0 91 77 0d 	lds	r30, 0x0D77
    7e2c:	f0 91 78 0d 	lds	r31, 0x0D78
    7e30:	9f 01       	movw	r18, r30
    7e32:	2f 5f       	subi	r18, 0xFF	; 255
    7e34:	3f 4f       	sbci	r19, 0xFF	; 255
    7e36:	30 93 78 0d 	sts	0x0D78, r19
    7e3a:	20 93 77 0d 	sts	0x0D77, r18
    7e3e:	e4 91       	lpm	r30, Z
						
							if(c1==CONTROLER_VOL){
    7e40:	47 30       	cpi	r20, 0x07	; 7
    7e42:	49 f4       	brne	.+18     	; 0x7e56 <ProcessMusic+0x1fe>
								tracks[channel].trackVol=c2<<1;
    7e44:	f8 9e       	mul	r15, r24
    7e46:	d0 01       	movw	r26, r0
    7e48:	11 24       	eor	r1, r1
    7e4a:	a5 50       	subi	r26, 0x05	; 5
    7e4c:	b3 4f       	sbci	r27, 0xF3	; 243
    7e4e:	ee 0f       	add	r30, r30
    7e50:	1c 96       	adiw	r26, 0x0c	; 12
    7e52:	ec 93       	st	X, r30
    7e54:	27 c0       	rjmp	.+78     	; 0x7ea4 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_EXPRESSION){
    7e56:	4b 30       	cpi	r20, 0x0B	; 11
    7e58:	49 f4       	brne	.+18     	; 0x7e6c <ProcessMusic+0x214>
								tracks[channel].expressionVol=c2<<1;
    7e5a:	f8 9e       	mul	r15, r24
    7e5c:	d0 01       	movw	r26, r0
    7e5e:	11 24       	eor	r1, r1
    7e60:	a5 50       	subi	r26, 0x05	; 5
    7e62:	b3 4f       	sbci	r27, 0xF3	; 243
    7e64:	ee 0f       	add	r30, r30
    7e66:	13 96       	adiw	r26, 0x03	; 3
    7e68:	ec 93       	st	X, r30
    7e6a:	1c c0       	rjmp	.+56     	; 0x7ea4 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO){
    7e6c:	4c 35       	cpi	r20, 0x5C	; 92
    7e6e:	49 f4       	brne	.+18     	; 0x7e82 <ProcessMusic+0x22a>
								tracks[channel].tremoloLevel=c2<<1;
    7e70:	f8 9e       	mul	r15, r24
    7e72:	d0 01       	movw	r26, r0
    7e74:	11 24       	eor	r1, r1
    7e76:	a5 50       	subi	r26, 0x05	; 5
    7e78:	b3 4f       	sbci	r27, 0xF3	; 243
    7e7a:	ee 0f       	add	r30, r30
    7e7c:	1a 96       	adiw	r26, 0x0a	; 10
    7e7e:	ec 93       	st	X, r30
    7e80:	11 c0       	rjmp	.+34     	; 0x7ea4 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO_RATE){
    7e82:	44 36       	cpi	r20, 0x64	; 100
    7e84:	79 f4       	brne	.+30     	; 0x7ea4 <ProcessMusic+0x24c>
								tracks[channel].tremoloRate=c2<<1;
    7e86:	f8 9e       	mul	r15, r24
    7e88:	d0 01       	movw	r26, r0
    7e8a:	11 24       	eor	r1, r1
    7e8c:	a5 50       	subi	r26, 0x05	; 5
    7e8e:	b3 4f       	sbci	r27, 0xF3	; 243
    7e90:	ee 0f       	add	r30, r30
    7e92:	1b 96       	adiw	r26, 0x0b	; 11
    7e94:	ec 93       	st	X, r30
    7e96:	06 c0       	rjmp	.+12     	; 0x7ea4 <ProcessMusic+0x24c>
							break;

						//program change
						case 0xc0:
							// c1 = patch #						
							tracks[channel].patchNo=c1;
    7e98:	f8 9e       	mul	r15, r24
    7e9a:	f0 01       	movw	r30, r0
    7e9c:	11 24       	eor	r1, r1
    7e9e:	e5 50       	subi	r30, 0x05	; 5
    7ea0:	f3 4f       	sbci	r31, 0xF3	; 243
    7ea2:	40 8b       	std	Z+16, r20	; 0x10


				}//end if(c1==0xff)

				//read next delta time
				nextDeltaTime=ReadVarLen(&songPos);			
    7ea4:	87 e7       	ldi	r24, 0x77	; 119
    7ea6:	9d e0       	ldi	r25, 0x0D	; 13
    7ea8:	0e 94 f0 3c 	call	0x79e0	; 0x79e0 <ReadVarLen>
    7eac:	90 93 75 0d 	sts	0x0D75, r25
    7eb0:	80 93 74 0d 	sts	0x0D74, r24
				currDeltaTime=0;
    7eb4:	10 92 6f 0d 	sts	0x0D6F, r1
    7eb8:	10 92 6e 0d 	sts	0x0D6E, r1
    7ebc:	3b cf       	rjmp	.-394    	; 0x7d34 <ProcessMusic+0xdc>
					}
				#endif

			}//end while
		
			currDeltaTime++;
    7ebe:	01 96       	adiw	r24, 0x01	; 1
    7ec0:	90 93 6f 0d 	sts	0x0D6F, r25
    7ec4:	80 93 6e 0d 	sts	0x0D6E, r24
    7ec8:	94 e0       	ldi	r25, 0x04	; 4
    7eca:	a9 2e       	mov	r10, r25
    7ecc:	9d e0       	ldi	r25, 0x0D	; 13
    7ece:	b9 2e       	mov	r11, r25
    7ed0:	2e e0       	ldi	r18, 0x0E	; 14
    7ed2:	c2 2e       	mov	r12, r18
    7ed4:	2d e0       	ldi	r18, 0x0D	; 13
    7ed6:	d2 2e       	mov	r13, r18
    7ed8:	3f e0       	ldi	r19, 0x0F	; 15
    7eda:	e3 2e       	mov	r14, r19
    7edc:	3d e0       	ldi	r19, 0x0D	; 13
    7ede:	f3 2e       	mov	r15, r19
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    7ee0:	66 24       	eor	r6, r6
    7ee2:	6a 94       	dec	r6
    7ee4:	71 2c       	mov	r7, r1
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//process patch command stream
		if((track->flags & TRACK_FLAGS_PLAYING) && (track->patchCommandStreamPos!=NULL) && ((track->flags & TRACK_FLAGS_HOLD_ENV)==0)){
    7ee6:	88 81       	ld	r24, Y
    7ee8:	85 ff       	sbrs	r24, 5
    7eea:	42 c0       	rjmp	.+132    	; 0x7f70 <ProcessMusic+0x318>
    7eec:	2d 89       	ldd	r18, Y+21	; 0x15
    7eee:	3e 89       	ldd	r19, Y+22	; 0x16
    7ef0:	23 2b       	or	r18, r19
    7ef2:	09 f4       	brne	.+2      	; 0x7ef6 <ProcessMusic+0x29e>
    7ef4:	3d c0       	rjmp	.+122    	; 0x7f70 <ProcessMusic+0x318>
    7ef6:	86 fd       	sbrc	r24, 6
    7ef8:	3b c0       	rjmp	.+118    	; 0x7f70 <ProcessMusic+0x318>
    7efa:	47 01       	movw	r8, r14
    7efc:	f2 e0       	ldi	r31, 0x02	; 2
    7efe:	8f 1a       	sub	r8, r31
    7f00:	91 08       	sbc	r9, r1

			//process all simultaneous events
			while(track->patchCurrDeltaTime==track->patchNextDeltaTime){
    7f02:	d6 01       	movw	r26, r12
    7f04:	9c 91       	ld	r25, X
    7f06:	f4 01       	movw	r30, r8
    7f08:	80 81       	ld	r24, Z
    7f0a:	98 13       	cpse	r25, r24
    7f0c:	2e c0       	rjmp	.+92     	; 0x7f6a <ProcessMusic+0x312>

				c1=pgm_read_byte(track->patchCommandStreamPos++);
    7f0e:	ed 89       	ldd	r30, Y+21	; 0x15
    7f10:	fe 89       	ldd	r31, Y+22	; 0x16
    7f12:	bf 01       	movw	r22, r30
    7f14:	6f 5f       	subi	r22, 0xFF	; 255
    7f16:	7f 4f       	sbci	r23, 0xFF	; 255
    7f18:	7e 8b       	std	Y+22, r23	; 0x16
    7f1a:	6d 8b       	std	Y+21, r22	; 0x15
    7f1c:	84 91       	lpm	r24, Z
				if(c1==PATCH_END){
    7f1e:	8f 3f       	cpi	r24, 0xFF	; 255
    7f20:	31 f4       	brne	.+12     	; 0x7f2e <ProcessMusic+0x2d6>
					//end of stream!
					track->flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    7f22:	88 81       	ld	r24, Y
    7f24:	8f 77       	andi	r24, 0x7F	; 127
    7f26:	88 83       	st	Y, r24
					track->patchCommandStreamPos=NULL;
    7f28:	1e 8a       	std	Y+22, r1	; 0x16
    7f2a:	1d 8a       	std	Y+21, r1	; 0x15
					break;
    7f2c:	1e c0       	rjmp	.+60     	; 0x7f6a <ProcessMusic+0x312>

				}else{
					c2=pgm_read_byte(track->patchCommandStreamPos++);
    7f2e:	9f 01       	movw	r18, r30
    7f30:	2e 5f       	subi	r18, 0xFE	; 254
    7f32:	3f 4f       	sbci	r19, 0xFF	; 255
    7f34:	3e 8b       	std	Y+22, r19	; 0x16
    7f36:	2d 8b       	std	Y+21, r18	; 0x15
    7f38:	fb 01       	movw	r30, r22
    7f3a:	64 91       	lpm	r22, Z
					//invoke patch command function
					((PatchCommand)pgm_read_word(&patchCommands[c1]))(track,c2);
    7f3c:	e8 2f       	mov	r30, r24
    7f3e:	f0 e0       	ldi	r31, 0x00	; 0
    7f40:	ee 0f       	add	r30, r30
    7f42:	ff 1f       	adc	r31, r31
    7f44:	ee 52       	subi	r30, 0x2E	; 46
    7f46:	ff 4f       	sbci	r31, 0xFF	; 255
    7f48:	25 91       	lpm	r18, Z+
    7f4a:	34 91       	lpm	r19, Z
    7f4c:	ce 01       	movw	r24, r28
    7f4e:	f9 01       	movw	r30, r18
    7f50:	09 95       	icall
				}

				//read next delta time
				track->patchNextDeltaTime=pgm_read_byte(track->patchCommandStreamPos++);
    7f52:	ed 89       	ldd	r30, Y+21	; 0x15
    7f54:	fe 89       	ldd	r31, Y+22	; 0x16
    7f56:	cf 01       	movw	r24, r30
    7f58:	01 96       	adiw	r24, 0x01	; 1
    7f5a:	9e 8b       	std	Y+22, r25	; 0x16
    7f5c:	8d 8b       	std	Y+21, r24	; 0x15
    7f5e:	e4 91       	lpm	r30, Z
    7f60:	d4 01       	movw	r26, r8
    7f62:	ec 93       	st	X, r30
				track->patchCurrDeltaTime=0;
    7f64:	f6 01       	movw	r30, r12
    7f66:	10 82       	st	Z, r1
    7f68:	cc cf       	rjmp	.-104    	; 0x7f02 <ProcessMusic+0x2aa>
			}

			track->patchCurrDeltaTime++;
    7f6a:	9f 5f       	subi	r25, 0xFF	; 255
    7f6c:	d6 01       	movw	r26, r12
    7f6e:	9c 93       	st	X, r25
		}

		if(track->flags & TRACK_FLAGS_PLAYING){
    7f70:	98 81       	ld	r25, Y
    7f72:	95 ff       	sbrs	r25, 5
    7f74:	6c c0       	rjmp	.+216    	; 0x804e <ProcessMusic+0x3f6>

			if(track->patchPlayingTime<0xff){
    7f76:	f7 01       	movw	r30, r14
    7f78:	80 81       	ld	r24, Z
    7f7a:	8f 3f       	cpi	r24, 0xFF	; 255
    7f7c:	11 f0       	breq	.+4      	; 0x7f82 <ProcessMusic+0x32a>
				track->patchPlayingTime++;
    7f7e:	8f 5f       	subi	r24, 0xFF	; 255
    7f80:	80 83       	st	Z, r24
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
    7f82:	97 fd       	sbrc	r25, 7
    7f84:	04 c0       	rjmp	.+8      	; 0x7f8e <ProcessMusic+0x336>
    7f86:	f7 01       	movw	r30, r14
    7f88:	38 97       	sbiw	r30, 0x08	; 8
				//if an FX, use full track volume.
				trackVol=0xff;
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
    7f8a:	90 81       	ld	r25, Z
    7f8c:	01 c0       	rjmp	.+2      	; 0x7f90 <ProcessMusic+0x338>
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
				//if an FX, use full track volume.
				trackVol=0xff;
    7f8e:	9f ef       	ldi	r25, 0xFF	; 255
    7f90:	f7 01       	movw	r30, r14
    7f92:	37 97       	sbiw	r30, 0x07	; 7
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
			}
			if(track->noteVol!=0 && track->envelopeVol!=0 && trackVol!=0 && masterVolume!=0){
    7f94:	80 81       	ld	r24, Z
    7f96:	88 23       	and	r24, r24
    7f98:	09 f4       	brne	.+2      	; 0x7f9c <ProcessMusic+0x344>
    7f9a:	4e c0       	rjmp	.+156    	; 0x8038 <ProcessMusic+0x3e0>
    7f9c:	31 96       	adiw	r30, 0x01	; 1
    7f9e:	50 81       	ld	r21, Z
    7fa0:	55 23       	and	r21, r21
    7fa2:	09 f4       	brne	.+2      	; 0x7fa6 <ProcessMusic+0x34e>
    7fa4:	49 c0       	rjmp	.+146    	; 0x8038 <ProcessMusic+0x3e0>
    7fa6:	99 23       	and	r25, r25
    7fa8:	09 f4       	brne	.+2      	; 0x7fac <ProcessMusic+0x354>
    7faa:	46 c0       	rjmp	.+140    	; 0x8038 <ProcessMusic+0x3e0>
    7fac:	40 91 73 0d 	lds	r20, 0x0D73
    7fb0:	44 23       	and	r20, r20
    7fb2:	09 f4       	brne	.+2      	; 0x7fb6 <ProcessMusic+0x35e>
    7fb4:	41 c0       	rjmp	.+130    	; 0x8038 <ProcessMusic+0x3e0>

				uVol=(track->noteVol*trackVol)+0x100;
    7fb6:	89 9f       	mul	r24, r25
    7fb8:	c0 01       	movw	r24, r0
    7fba:	11 24       	eor	r1, r1
    7fbc:	93 95       	inc	r25
				uVol>>=8;
    7fbe:	89 2f       	mov	r24, r25
    7fc0:	99 27       	eor	r25, r25
				
				uVol=(uVol*track->envelopeVol)+0x100;
    7fc2:	58 9f       	mul	r21, r24
    7fc4:	90 01       	movw	r18, r0
    7fc6:	59 9f       	mul	r21, r25
    7fc8:	30 0d       	add	r19, r0
    7fca:	11 24       	eor	r1, r1
    7fcc:	c9 01       	movw	r24, r18
    7fce:	93 95       	inc	r25
				uVol>>=8;
    7fd0:	89 2f       	mov	r24, r25
    7fd2:	99 27       	eor	r25, r25
    7fd4:	3b 97       	sbiw	r30, 0x0b	; 11
				
				#if MUSIC_ENGINE == MIDI
					uVol=(uVol*track->expressionVol)+0x100;
    7fd6:	50 81       	ld	r21, Z
    7fd8:	58 9f       	mul	r21, r24
    7fda:	90 01       	movw	r18, r0
    7fdc:	59 9f       	mul	r21, r25
    7fde:	30 0d       	add	r19, r0
    7fe0:	11 24       	eor	r1, r1
    7fe2:	33 95       	inc	r19
					uVol>>=8;
    7fe4:	23 2f       	mov	r18, r19
    7fe6:	33 27       	eor	r19, r19
				#endif
				
				uVol=(uVol*masterVolume)+0x100;
    7fe8:	42 9f       	mul	r20, r18
    7fea:	c0 01       	movw	r24, r0
    7fec:	43 9f       	mul	r20, r19
    7fee:	90 0d       	add	r25, r0
    7ff0:	11 24       	eor	r1, r1
    7ff2:	93 95       	inc	r25
				uVol>>=8;
    7ff4:	89 2f       	mov	r24, r25
    7ff6:	99 27       	eor	r25, r25
    7ff8:	37 96       	adiw	r30, 0x07	; 7

				if(track->tremoloLevel>0){					
    7ffa:	20 81       	ld	r18, Z
    7ffc:	22 23       	and	r18, r18
    7ffe:	f1 f0       	breq	.+60     	; 0x803c <ProcessMusic+0x3e4>
					tmp=pgm_read_byte(&(waves[track->tremoloPos]));
    8000:	d5 01       	movw	r26, r10
    8002:	ec 91       	ld	r30, X
    8004:	f0 e0       	ldi	r31, 0x00	; 0
    8006:	e0 50       	subi	r30, 0x00	; 0
    8008:	fc 47       	sbci	r31, 0x7C	; 124
    800a:	e4 91       	lpm	r30, Z
					tmp-=128; //convert to unsigned
    800c:	e0 58       	subi	r30, 0x80	; 128

					tVol=(track->tremoloLevel*tmp)+0x100;
    800e:	2e 9f       	mul	r18, r30
    8010:	f0 01       	movw	r30, r0
    8012:	11 24       	eor	r1, r1
    8014:	f3 95       	inc	r31
					tVol>>=8;
    8016:	ef 2f       	mov	r30, r31
    8018:	ff 27       	eor	r31, r31
					
					uVol=(uVol*(0xff-tVol))+0x100;
    801a:	a3 01       	movw	r20, r6
    801c:	4e 1b       	sub	r20, r30
    801e:	5f 0b       	sbc	r21, r31
    8020:	48 9f       	mul	r20, r24
    8022:	90 01       	movw	r18, r0
    8024:	49 9f       	mul	r20, r25
    8026:	30 0d       	add	r19, r0
    8028:	58 9f       	mul	r21, r24
    802a:	30 0d       	add	r19, r0
    802c:	11 24       	eor	r1, r1
    802e:	c9 01       	movw	r24, r18
    8030:	93 95       	inc	r25
					uVol>>=8;
    8032:	89 2f       	mov	r24, r25
    8034:	99 27       	eor	r25, r25
    8036:	02 c0       	rjmp	.+4      	; 0x803c <ProcessMusic+0x3e4>
				}

			
			}else{
				uVol=0;
    8038:	80 e0       	ldi	r24, 0x00	; 0
    803a:	90 e0       	ldi	r25, 0x00	; 0
			}	

			track->tremoloPos+=track->tremoloRate;	
    803c:	f5 01       	movw	r30, r10
    803e:	30 81       	ld	r19, Z
    8040:	f7 01       	movw	r30, r14
    8042:	39 97       	sbiw	r30, 0x09	; 9
    8044:	20 81       	ld	r18, Z
    8046:	23 0f       	add	r18, r19
    8048:	d5 01       	movw	r26, r10
    804a:	2c 93       	st	X, r18
    804c:	02 c0       	rjmp	.+4      	; 0x8052 <ProcessMusic+0x3fa>

		}else{
			uVol=0;
    804e:	80 e0       	ldi	r24, 0x00	; 0
    8050:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
    8052:	f8 01       	movw	r30, r16
    8054:	80 83       	st	Z, r24
    8056:	67 96       	adiw	r28, 0x17	; 23
    8058:	0a 5f       	subi	r16, 0xFA	; 250
    805a:	1f 4f       	sbci	r17, 0xFF	; 255
    805c:	f7 e1       	ldi	r31, 0x17	; 23
    805e:	af 0e       	add	r10, r31
    8060:	b1 1c       	adc	r11, r1
    8062:	87 e1       	ldi	r24, 0x17	; 23
    8064:	c8 0e       	add	r12, r24
    8066:	d1 1c       	adc	r13, r1
    8068:	97 e1       	ldi	r25, 0x17	; 23
    806a:	e9 0e       	add	r14, r25
    806c:	f1 1c       	adc	r15, r1


	//
	// Process patches command streams & final volume
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    806e:	ad e0       	ldi	r26, 0x0D	; 13
    8070:	ce 36       	cpi	r28, 0x6E	; 110
    8072:	da 07       	cpc	r29, r26
    8074:	09 f0       	breq	.+2      	; 0x8078 <ProcessMusic+0x420>
    8076:	37 cf       	rjmp	.-402    	; 0x7ee6 <ProcessMusic+0x28e>
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
	}
	
}
    8078:	df 91       	pop	r29
    807a:	cf 91       	pop	r28
    807c:	1f 91       	pop	r17
    807e:	0f 91       	pop	r16
    8080:	ff 90       	pop	r15
    8082:	ef 90       	pop	r14
    8084:	df 90       	pop	r13
    8086:	cf 90       	pop	r12
    8088:	bf 90       	pop	r11
    808a:	af 90       	pop	r10
    808c:	9f 90       	pop	r9
    808e:	8f 90       	pop	r8
    8090:	7f 90       	pop	r7
    8092:	6f 90       	pop	r6
    8094:	08 95       	ret

00008096 <SetMasterVolume>:
}



void SetMasterVolume(unsigned char vol){
	masterVolume=vol;
    8096:	80 93 73 0d 	sts	0x0D73, r24
    809a:	08 95       	ret

0000809c <SetMixerNote>:
; r22: -MIDI note, 69=A5(440) for waves channels (0,1,2)
;      -Noise params for channel 3
;***********************
.section .text.SetMixerNote
SetMixerNote:
	clr r25
    809c:	99 27       	eor	r25, r25
	clr r23
    809e:	77 27       	eor	r23, r23
	#if SOUND_MIXER == MIXER_TYPE_VSYNC
		cpi r24,3
		brlo set_note_waves
		ret		
	#else
		cpi r24,3
    80a0:	83 30       	cpi	r24, 0x03	; 3
		brne set_note_waves		
    80a2:	09 f4       	brne	.+2      	; 0x80a6 <set_note_waves>
		ret
    80a4:	08 95       	ret

000080a6 <set_note_waves>:
	#endif
#endif

set_note_waves:
	;get step for note
	ldi ZL,lo8(steptable)
    80a6:	e8 e0       	ldi	r30, 0x08	; 8
	ldi ZH,hi8(steptable)
    80a8:	f2 e8       	ldi	r31, 0x82	; 130
	lsl r22
    80aa:	66 0f       	add	r22, r22
	rol r23
    80ac:	77 1f       	adc	r23, r23
	add ZL,r22
    80ae:	e6 0f       	add	r30, r22
	adc ZH,r23	
    80b0:	f7 1f       	adc	r31, r23

	lpm r26,Z+
    80b2:	a5 91       	lpm	r26, Z+
	lpm r27,Z
    80b4:	b4 91       	lpm	r27, Z

	ldi ZL,lo8(mixerStruct)
    80b6:	e0 ed       	ldi	r30, 0xD0	; 208
	ldi ZH,hi8(mixerStruct)
    80b8:	fc e0       	ldi	r31, 0x0C	; 12
	ldi r18,CHANNEL_STRUCT_SIZE
    80ba:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24
    80bc:	28 9f       	mul	r18, r24
	add ZL,r0
    80be:	e0 0d       	add	r30, r0
	adc ZH,r1
    80c0:	f1 1d       	adc	r31, r1
	
	std Z+step_lo,r26
    80c2:	a1 83       	std	Z+1, r26	; 0x01
	std Z+step_hi,r27
    80c4:	b2 83       	std	Z+2, r27	; 0x02
	
	clr r1
    80c6:	11 24       	eor	r1, r1
	

	ret
    80c8:	08 95       	ret

000080ca <SetMixerWave>:
;         Noise channel: 0xfe=7 bit lfsr, 0xff=15 bit lfsr
;                 
;***********************
.section .text.SetMixerWave
SetMixerWave:
	clr r25
    80ca:	99 27       	eor	r25, r25
	clr r23
    80cc:	77 27       	eor	r23, r23

	ldi ZL,lo8(mixerStruct)
    80ce:	e0 ed       	ldi	r30, 0xD0	; 208
	ldi ZH,hi8(mixerStruct)
    80d0:	fc e0       	ldi	r31, 0x0C	; 12
	ldi r18,CHANNEL_STRUCT_SIZE
    80d2:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24	
    80d4:	28 9f       	mul	r18, r24
	add ZL,r0
    80d6:	e0 0d       	add	r30, r0
	adc ZH,r1
    80d8:	f1 1d       	adc	r31, r1

#if MIXER_CHAN4_TYPE == 0
	cpi r22,0xfe	;7bit lfsr
    80da:	6e 3f       	cpi	r22, 0xFE	; 254
	brne smw1
    80dc:	31 f4       	brne	.+12     	; 0x80ea <smw1>
	lds r22,tr4_params
    80de:	60 91 e3 0c 	lds	r22, 0x0CE3
	andi r22,0xfe;
    80e2:	6e 7f       	andi	r22, 0xFE	; 254
	sts tr4_params,r22
    80e4:	60 93 e3 0c 	sts	0x0CE3, r22
	rjmp esmw	
    80e8:	0b c0       	rjmp	.+22     	; 0x8100 <esmw>

000080ea <smw1>:
smw1:
	cpi r22,0xff	;15bit lfsr
    80ea:	6f 3f       	cpi	r22, 0xFF	; 255
	brne smw2
    80ec:	31 f4       	brne	.+12     	; 0x80fa <smw2>
	lds r22,tr4_params
    80ee:	60 91 e3 0c 	lds	r22, 0x0CE3
	ori r22,0xfe;
    80f2:	6e 6f       	ori	r22, 0xFE	; 254
	sts tr4_params,r22	
    80f4:	60 93 e3 0c 	sts	0x0CE3, r22
	rjmp esmw
    80f8:	03 c0       	rjmp	.+6      	; 0x8100 <esmw>

000080fa <smw2>:
smw2:
#endif

	ldi r23,hi8(waves)
    80fa:	74 e8       	ldi	r23, 0x84	; 132
	add r23,r22
    80fc:	76 0f       	add	r23, r22
	std Z+samplepos_hi,r23 ;store path No
    80fe:	75 83       	std	Z+5, r23	; 0x05

00008100 <esmw>:

esmw:
	clr r1	
    8100:	11 24       	eor	r1, r1
	ret
    8102:	08 95       	ret
	...

00008200 <DisableSoundEngine>:
; no CPU cycles are consumed.
; C-callable
;*****************************
.section .text.DisableSoundEngine
DisableSoundEngine:	
	ldi r24,0
    8200:	80 e0       	ldi	r24, 0x00	; 0
	sts sound_enabled,r24
    8202:	80 93 cf 0c 	sts	0x0CCF, r24
	ret
    8206:	08 95       	ret

00008208 <steptable>:
    8208:	22 00       	.word	0x0022	; ????
    820a:	24 00       	.word	0x0024	; ????
    820c:	26 00       	.word	0x0026	; ????
    820e:	28 00       	.word	0x0028	; ????
    8210:	2b 00       	.word	0x002b	; ????
    8212:	2d 00       	.word	0x002d	; ????
    8214:	30 00       	.word	0x0030	; ????
    8216:	33 00       	.word	0x0033	; ????
    8218:	36 00       	.word	0x0036	; ????
    821a:	39 00       	.word	0x0039	; ????
    821c:	3d 00       	.word	0x003d	; ????
    821e:	40 00       	.word	0x0040	; ????
    8220:	44 00       	.word	0x0044	; ????
    8222:	48 00       	.word	0x0048	; ????
    8224:	4c 00       	.word	0x004c	; ????
    8226:	51 00       	.word	0x0051	; ????
    8228:	56 00       	.word	0x0056	; ????
    822a:	5b 00       	.word	0x005b	; ????
    822c:	60 00       	.word	0x0060	; ????
    822e:	66 00       	.word	0x0066	; ????
    8230:	6c 00       	.word	0x006c	; ????
    8232:	73 00       	.word	0x0073	; ????
    8234:	79 00       	.word	0x0079	; ????
    8236:	81 00       	.word	0x0081	; ????
    8238:	88 00       	.word	0x0088	; ????
    823a:	90 00       	.word	0x0090	; ????
    823c:	99 00       	.word	0x0099	; ????
    823e:	a2 00       	.word	0x00a2	; ????
    8240:	ac 00       	.word	0x00ac	; ????
    8242:	b6 00       	.word	0x00b6	; ????
    8244:	c1 00       	.word	0x00c1	; ????
    8246:	cc 00       	.word	0x00cc	; ????
    8248:	d8 00       	.word	0x00d8	; ????
    824a:	e5 00       	.word	0x00e5	; ????
    824c:	f3 00       	.word	0x00f3	; ????
    824e:	01 01       	movw	r0, r2
    8250:	10 01       	movw	r2, r0
    8252:	21 01       	movw	r4, r2
    8254:	32 01       	movw	r6, r4
    8256:	44 01       	movw	r8, r8
    8258:	57 01       	movw	r10, r14
    825a:	6c 01       	movw	r12, r24
    825c:	81 01       	movw	r16, r2
    825e:	98 01       	movw	r18, r16
    8260:	b0 01       	movw	r22, r0
    8262:	ca 01       	movw	r24, r20
    8264:	e5 01       	movw	r28, r10
    8266:	02 02       	muls	r16, r18
    8268:	21 02       	muls	r18, r17
    826a:	41 02       	muls	r20, r17
    826c:	64 02       	muls	r22, r20
    826e:	88 02       	muls	r24, r24
    8270:	ae 02       	muls	r26, r30
    8272:	d7 02       	muls	r29, r23
    8274:	03 03       	mulsu	r16, r19
    8276:	30 03       	mulsu	r19, r16
    8278:	61 03       	mulsu	r22, r17
    827a:	94 03       	fmuls	r17, r20
    827c:	cb 03       	fmulsu	r20, r19
    827e:	05 04       	cpc	r0, r5
    8280:	42 04       	cpc	r4, r2
    8282:	83 04       	cpc	r8, r3
    8284:	c7 04       	cpc	r12, r7
    8286:	10 05       	cpc	r17, r0
    8288:	5d 05       	cpc	r21, r13
    828a:	af 05       	cpc	r26, r15
    828c:	05 06       	cpc	r0, r21
    828e:	61 06       	cpc	r6, r17
    8290:	c2 06       	cpc	r12, r18
    8292:	29 07       	cpc	r18, r25
    8294:	96 07       	cpc	r25, r22
    8296:	09 08       	sbc	r0, r9
    8298:	83 08       	sbc	r8, r3
    829a:	05 09       	sbc	r16, r5
    829c:	8e 09       	sbc	r24, r14
    829e:	20 0a       	sbc	r2, r16
    82a0:	ba 0a       	sbc	r11, r26
    82a2:	5d 0b       	sbc	r21, r29
    82a4:	0a 0c       	add	r0, r10
    82a6:	c1 0c       	add	r12, r1
    82a8:	84 0d       	add	r24, r4
    82aa:	51 0e       	add	r5, r17
    82ac:	2b 0f       	add	r18, r27
    82ae:	12 10       	cpse	r1, r2
    82b0:	07 11       	cpse	r16, r7
    82b2:	0a 12       	cpse	r0, r26
    82b4:	1d 13       	cpse	r17, r29
    82b6:	40 14       	cp	r4, r0
    82b8:	74 15       	cp	r23, r4
    82ba:	ba 16       	cp	r11, r26
    82bc:	14 18       	sub	r1, r4
    82be:	83 19       	sub	r24, r3
    82c0:	07 1b       	sub	r16, r23
    82c2:	a3 1c       	adc	r10, r3
    82c4:	57 1e       	adc	r5, r23
    82c6:	24 20       	and	r2, r4
    82c8:	0e 22       	and	r0, r30
    82ca:	14 24       	eor	r1, r4
    82cc:	39 26       	eor	r3, r25
    82ce:	7f 28       	or	r7, r15
    82d0:	e8 2a       	or	r14, r24
    82d2:	75 2d       	mov	r23, r5
    82d4:	29 30       	cpi	r18, 0x09	; 9
    82d6:	06 33       	cpi	r16, 0x36	; 54
    82d8:	0f 36       	cpi	r16, 0x6F	; 111
    82da:	45 39       	cpi	r20, 0x95	; 149
    82dc:	ad 3c       	cpi	r26, 0xCD	; 205
    82de:	49 40       	sbci	r20, 0x09	; 9
    82e0:	1b 44       	sbci	r17, 0x4B	; 75
    82e2:	28 48       	sbci	r18, 0x88	; 136
    82e4:	73 4c       	sbci	r23, 0xC3	; 195
    82e6:	fe 50       	subi	r31, 0x0E	; 14
    82e8:	cf 55       	subi	r28, 0x5F	; 95
    82ea:	ea 5a       	subi	r30, 0xAA	; 170
    82ec:	51 60       	ori	r21, 0x01	; 1
    82ee:	0c 66       	ori	r16, 0x6C	; 108
    82f0:	1d 6c       	ori	r17, 0xCD	; 205
    82f2:	8b 72       	andi	r24, 0x2B	; 43
    82f4:	5a 79       	andi	r21, 0x9A	; 154
    82f6:	92 80       	ldd	r9, Z+2	; 0x02
    82f8:	37 88       	ldd	r3, Z+23	; 0x17
    82fa:	50 90 e5 98 	lds	r5, 0x98E5
    82fe:	fd a1       	ldd	r31, Y+37	; 0x25
    8300:	9f ab       	std	Y+55, r25	; 0x37
    8302:	d3 b5       	in	r29, 0x23	; 35
    8304:	a3 c0       	rjmp	.+326    	; 0x844c <waves+0x4c>
	...

00008400 <waves>:
    8400:	00 03       	mulsu	r16, r16
    8402:	06 09       	sbc	r16, r6
    8404:	0c 10       	cpse	r0, r12
    8406:	13 16       	cp	r1, r19
    8408:	19 1c       	adc	r1, r9
    840a:	1f 22       	and	r1, r31
    840c:	25 28       	or	r2, r5
    840e:	2b 2e       	mov	r2, r27
    8410:	31 33       	cpi	r19, 0x31	; 49
    8412:	36 39       	cpi	r19, 0x96	; 150
    8414:	3c 3f       	cpi	r19, 0xFC	; 252
    8416:	41 44       	sbci	r20, 0x41	; 65
    8418:	47 49       	sbci	r20, 0x97	; 151
    841a:	4c 4e       	sbci	r20, 0xEC	; 236
    841c:	51 53       	subi	r21, 0x31	; 49
    841e:	55 58       	subi	r21, 0x85	; 133
    8420:	5a 5c       	subi	r21, 0xCA	; 202
    8422:	5e 60       	ori	r21, 0x0E	; 14
    8424:	62 64       	ori	r22, 0x42	; 66
    8426:	66 68       	ori	r22, 0x86	; 134
    8428:	6a 6b       	ori	r22, 0xBA	; 186
    842a:	6d 6f       	ori	r22, 0xFD	; 253
    842c:	70 71       	andi	r23, 0x10	; 16
    842e:	73 74       	andi	r23, 0x43	; 67
    8430:	75 76       	andi	r23, 0x65	; 101
    8432:	78 79       	andi	r23, 0x98	; 152
    8434:	7a 7a       	andi	r23, 0xAA	; 170
    8436:	7b 7c       	andi	r23, 0xCB	; 203
    8438:	7d 7d       	andi	r23, 0xDD	; 221
    843a:	7e 7e       	andi	r23, 0xEE	; 238
    843c:	7e 7f       	andi	r23, 0xFE	; 254
    843e:	7f 7f       	andi	r23, 0xFF	; 255
    8440:	7f 7f       	andi	r23, 0xFF	; 255
    8442:	7f 7f       	andi	r23, 0xFF	; 255
    8444:	7e 7e       	andi	r23, 0xEE	; 238
    8446:	7e 7d       	andi	r23, 0xDE	; 222
    8448:	7d 7c       	andi	r23, 0xCD	; 205
    844a:	7b 7a       	andi	r23, 0xAB	; 171
    844c:	7a 79       	andi	r23, 0x9A	; 154
    844e:	78 76       	andi	r23, 0x68	; 104
    8450:	75 74       	andi	r23, 0x45	; 69
    8452:	73 71       	andi	r23, 0x13	; 19
    8454:	70 6f       	ori	r23, 0xF0	; 240
    8456:	6d 6b       	ori	r22, 0xBD	; 189
    8458:	6a 68       	ori	r22, 0x8A	; 138
    845a:	66 64       	ori	r22, 0x46	; 70
    845c:	62 60       	ori	r22, 0x02	; 2
    845e:	5e 5c       	subi	r21, 0xCE	; 206
    8460:	5a 58       	subi	r21, 0x8A	; 138
    8462:	55 53       	subi	r21, 0x35	; 53
    8464:	51 4e       	sbci	r21, 0xE1	; 225
    8466:	4c 49       	sbci	r20, 0x9C	; 156
    8468:	47 44       	sbci	r20, 0x47	; 71
    846a:	41 3f       	cpi	r20, 0xF1	; 241
    846c:	3c 39       	cpi	r19, 0x9C	; 156
    846e:	36 33       	cpi	r19, 0x36	; 54
    8470:	31 2e       	mov	r3, r17
    8472:	2b 28       	or	r2, r11
    8474:	25 22       	and	r2, r21
    8476:	1f 1c       	adc	r1, r15
    8478:	19 16       	cp	r1, r25
    847a:	13 10       	cpse	r1, r3
    847c:	0c 09       	sbc	r16, r12
    847e:	06 03       	mulsu	r16, r22
    8480:	00 fd       	sbrc	r16, 0
    8482:	fa f7       	brpl	.-2      	; 0x8482 <waves+0x82>
    8484:	f4 f0       	brlt	.+60     	; 0x84c2 <waves+0xc2>
    8486:	ed ea       	ldi	r30, 0xAD	; 173
    8488:	e7 e4       	ldi	r30, 0x47	; 71
    848a:	e1 de       	rcall	.-574    	; 0x824e <steptable+0x46>
    848c:	db d8       	rcall	.-3658   	; 0x7644 <EepromBlockExists+0x68>
    848e:	d5 d2       	rcall	.+1450   	; 0x8a3a <waves+0x63a>
    8490:	cf cd       	rjmp	.-1122   	; 0x8030 <ProcessMusic+0x3d8>
    8492:	ca c7       	rjmp	.+3988   	; 0x9428 <LBPrintByte+0xa>
    8494:	c4 c1       	rjmp	.+904    	; 0x881e <waves+0x41e>
    8496:	bf bc       	out	0x2f, r11	; 47
    8498:	b9 b7       	in	r27, 0x39	; 57
    849a:	b4 b2       	in	r11, 0x14	; 20
    849c:	af ad       	ldd	r26, Y+63	; 0x3f
    849e:	ab a8       	ldd	r10, Y+51	; 0x33
    84a0:	a6 a4       	ldd	r10, Z+46	; 0x2e
    84a2:	a2 a0       	ldd	r10, Z+34	; 0x22
    84a4:	9e 9c       	mul	r9, r14
    84a6:	9a 98       	cbi	0x13, 2	; 19
    84a8:	96 95       	lsr	r25
    84aa:	93 91       	.word	0x9193	; ????
    84ac:	90 8f       	std	Z+24, r25	; 0x18
    84ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    84b0:	8b 8a       	std	Y+19, r8	; 0x13
    84b2:	88 87       	std	Y+8, r24	; 0x08
    84b4:	86 86       	std	Z+14, r8	; 0x0e
    84b6:	85 84       	ldd	r8, Z+13	; 0x0d
    84b8:	83 83       	std	Z+3, r24	; 0x03
    84ba:	82 82       	std	Z+2, r8	; 0x02
    84bc:	82 81       	ldd	r24, Z+2	; 0x02
    84be:	81 81       	ldd	r24, Z+1	; 0x01
    84c0:	81 81       	ldd	r24, Z+1	; 0x01
    84c2:	81 81       	ldd	r24, Z+1	; 0x01
    84c4:	82 82       	std	Z+2, r8	; 0x02
    84c6:	82 83       	std	Z+2, r24	; 0x02
    84c8:	83 84       	ldd	r8, Z+11	; 0x0b
    84ca:	85 86       	std	Z+13, r8	; 0x0d
    84cc:	86 87       	std	Z+14, r24	; 0x0e
    84ce:	88 8a       	std	Y+16, r8	; 0x10
    84d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    84d2:	8d 8f       	std	Y+29, r24	; 0x1d
    84d4:	90 91 93 95 	lds	r25, 0x9593
    84d8:	96 98       	cbi	0x12, 6	; 18
    84da:	9a 9c       	mul	r9, r10
    84dc:	9e a0       	ldd	r9, Y+38	; 0x26
    84de:	a2 a4       	ldd	r10, Z+42	; 0x2a
    84e0:	a6 a8       	ldd	r10, Z+54	; 0x36
    84e2:	ab ad       	ldd	r26, Y+59	; 0x3b
    84e4:	af b2       	in	r10, 0x1f	; 31
    84e6:	b4 b7       	in	r27, 0x34	; 52
    84e8:	b9 bc       	out	0x29, r11	; 41
    84ea:	bf c1       	rjmp	.+894    	; 0x886a <waves+0x46a>
    84ec:	c4 c7       	rjmp	.+3976   	; 0x9476 <LBPrintByte+0x58>
    84ee:	ca cd       	rjmp	.-1132   	; 0x8084 <ProcessMusic+0x42c>
    84f0:	cf d2       	rcall	.+1438   	; 0x8a90 <waves+0x690>
    84f2:	d5 d8       	rcall	.-3670   	; 0x769e <EepromWriteBlock+0x1e>
    84f4:	db de       	rcall	.-586    	; 0x82ac <steptable+0xa4>
    84f6:	e1 e4       	ldi	r30, 0x41	; 65
    84f8:	e7 ea       	ldi	r30, 0xA7	; 167
    84fa:	ed f0       	brhs	.+58     	; 0x8536 <waves+0x136>
    84fc:	f4 f7       	brge	.-4      	; 0x84fa <waves+0xfa>
    84fe:	fa fd       	.word	0xfdfa	; ????
    8500:	80 81       	ld	r24, Z
    8502:	82 83       	std	Z+2, r24	; 0x02
    8504:	84 85       	ldd	r24, Z+12	; 0x0c
    8506:	86 87       	std	Z+14, r24	; 0x0e
    8508:	88 89       	ldd	r24, Y+16	; 0x10
    850a:	8a 8b       	std	Y+18, r24	; 0x12
    850c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    850e:	8e 8f       	std	Y+30, r24	; 0x1e
    8510:	90 91 92 93 	lds	r25, 0x9392
    8514:	94 95       	.word	0x9594	; ????
    8516:	96 97       	sbiw	r26, 0x26	; 38
    8518:	98 99       	sbic	0x13, 0	; 19
    851a:	9a 9b       	sbis	0x13, 2	; 19
    851c:	9c 9d       	mul	r25, r12
    851e:	9e 9f       	mul	r25, r30
    8520:	a0 a1       	ldd	r26, Z+32	; 0x20
    8522:	a2 a3       	std	Z+34, r26	; 0x22
    8524:	a4 a5       	ldd	r26, Z+44	; 0x2c
    8526:	a6 a7       	std	Z+46, r26	; 0x2e
    8528:	a8 a9       	ldd	r26, Y+48	; 0x30
    852a:	aa ab       	std	Y+50, r26	; 0x32
    852c:	ac ad       	ldd	r26, Y+60	; 0x3c
    852e:	ae af       	std	Y+62, r26	; 0x3e
    8530:	b0 b1       	in	r27, 0x00	; 0
    8532:	b2 b3       	in	r27, 0x12	; 18
    8534:	b4 b5       	in	r27, 0x24	; 36
    8536:	b6 b7       	in	r27, 0x36	; 54
    8538:	b8 b9       	out	0x08, r27	; 8
    853a:	ba bb       	out	0x1a, r27	; 26
    853c:	bc bd       	out	0x2c, r27	; 44
    853e:	be bf       	out	0x3e, r27	; 62
    8540:	c0 c1       	rjmp	.+896    	; 0x88c2 <waves+0x4c2>
    8542:	c2 c3       	rjmp	.+1924   	; 0x8cc8 <waves+0x8c8>
    8544:	c4 c5       	rjmp	.+2952   	; 0x90ce <DrawMap+0x16>
    8546:	c6 c7       	rjmp	.+3980   	; 0x94d4 <LBPrintInt+0x54>
    8548:	c8 c9       	rjmp	.-3184   	; 0x78da <PatchCommand14>
    854a:	ca cb       	rjmp	.-2156   	; 0x7ce0 <ProcessMusic+0x88>
    854c:	cc cd       	rjmp	.-1128   	; 0x80e6 <SetMixerWave+0x1c>
    854e:	ce cf       	rjmp	.-100    	; 0x84ec <waves+0xec>
    8550:	d0 d1       	rcall	.+928    	; 0x88f2 <waves+0x4f2>
    8552:	d2 d3       	rcall	.+1956   	; 0x8cf8 <waves+0x8f8>
    8554:	d4 d5       	rcall	.+2984   	; 0x90fe <DrawMap+0x46>
    8556:	d6 d7       	rcall	.+4012   	; 0x9504 <LBCollides+0x12>
    8558:	d8 d9       	rcall	.-3152   	; 0x790a <PatchCommand14+0x30>
    855a:	da db       	rcall	.-2124   	; 0x7d10 <ProcessMusic+0xb8>
    855c:	dc dd       	rcall	.-1096   	; 0x8116 <esmw+0x16>
    855e:	de df       	rcall	.-68     	; 0x851c <waves+0x11c>
    8560:	e0 e1       	ldi	r30, 0x10	; 16
    8562:	e2 e3       	ldi	r30, 0x32	; 50
    8564:	e4 e5       	ldi	r30, 0x54	; 84
    8566:	e6 e7       	ldi	r30, 0x76	; 118
    8568:	e8 e9       	ldi	r30, 0x98	; 152
    856a:	ea eb       	ldi	r30, 0xBA	; 186
    856c:	ec ed       	ldi	r30, 0xDC	; 220
    856e:	ee ef       	ldi	r30, 0xFE	; 254
    8570:	f0 f1       	brcs	.+124    	; 0x85ee <waves+0x1ee>
    8572:	f2 f3       	brmi	.-4      	; 0x8570 <waves+0x170>
    8574:	f4 f5       	brge	.+124    	; 0x85f2 <waves+0x1f2>
    8576:	f6 f7       	brtc	.-4      	; 0x8574 <waves+0x174>
    8578:	f8 f9       	.word	0xf9f8	; ????
    857a:	fa fb       	.word	0xfbfa	; ????
    857c:	fc fd       	.word	0xfdfc	; ????
    857e:	fe ff       	.word	0xfffe	; ????
    8580:	00 01       	movw	r0, r0
    8582:	02 03       	mulsu	r16, r18
    8584:	04 05       	cpc	r16, r4
    8586:	06 07       	cpc	r16, r22
    8588:	08 09       	sbc	r16, r8
    858a:	0a 0b       	sbc	r16, r26
    858c:	0c 0d       	add	r16, r12
    858e:	0e 0f       	add	r16, r30
    8590:	10 11       	cpse	r17, r0
    8592:	12 13       	cpse	r17, r18
    8594:	14 15       	cp	r17, r4
    8596:	16 17       	cp	r17, r22
    8598:	18 19       	sub	r17, r8
    859a:	1a 1b       	sub	r17, r26
    859c:	1c 1d       	adc	r17, r12
    859e:	1e 1f       	adc	r17, r30
    85a0:	20 21       	and	r18, r0
    85a2:	22 23       	and	r18, r18
    85a4:	24 25       	eor	r18, r4
    85a6:	26 27       	eor	r18, r22
    85a8:	28 29       	or	r18, r8
    85aa:	2a 2b       	or	r18, r26
    85ac:	2c 2d       	mov	r18, r12
    85ae:	2e 2f       	mov	r18, r30
    85b0:	30 31       	cpi	r19, 0x10	; 16
    85b2:	32 33       	cpi	r19, 0x32	; 50
    85b4:	34 35       	cpi	r19, 0x54	; 84
    85b6:	36 37       	cpi	r19, 0x76	; 118
    85b8:	38 39       	cpi	r19, 0x98	; 152
    85ba:	3a 3b       	cpi	r19, 0xBA	; 186
    85bc:	3c 3d       	cpi	r19, 0xDC	; 220
    85be:	3e 3f       	cpi	r19, 0xFE	; 254
    85c0:	40 41       	sbci	r20, 0x10	; 16
    85c2:	42 43       	sbci	r20, 0x32	; 50
    85c4:	44 45       	sbci	r20, 0x54	; 84
    85c6:	46 47       	sbci	r20, 0x76	; 118
    85c8:	48 49       	sbci	r20, 0x98	; 152
    85ca:	4a 4b       	sbci	r20, 0xBA	; 186
    85cc:	4c 4d       	sbci	r20, 0xDC	; 220
    85ce:	4e 4f       	sbci	r20, 0xFE	; 254
    85d0:	50 51       	subi	r21, 0x10	; 16
    85d2:	52 53       	subi	r21, 0x32	; 50
    85d4:	54 55       	subi	r21, 0x54	; 84
    85d6:	56 57       	subi	r21, 0x76	; 118
    85d8:	58 59       	subi	r21, 0x98	; 152
    85da:	5a 5b       	subi	r21, 0xBA	; 186
    85dc:	5c 5d       	subi	r21, 0xDC	; 220
    85de:	5e 5f       	subi	r21, 0xFE	; 254
    85e0:	60 61       	ori	r22, 0x10	; 16
    85e2:	62 63       	ori	r22, 0x32	; 50
    85e4:	64 65       	ori	r22, 0x54	; 84
    85e6:	66 67       	ori	r22, 0x76	; 118
    85e8:	68 69       	ori	r22, 0x98	; 152
    85ea:	6a 6b       	ori	r22, 0xBA	; 186
    85ec:	6c 6d       	ori	r22, 0xDC	; 220
    85ee:	6e 6f       	ori	r22, 0xFE	; 254
    85f0:	70 71       	andi	r23, 0x10	; 16
    85f2:	72 73       	andi	r23, 0x32	; 50
    85f4:	74 75       	andi	r23, 0x54	; 84
    85f6:	76 77       	andi	r23, 0x76	; 118
    85f8:	78 79       	andi	r23, 0x98	; 152
    85fa:	7a 7b       	andi	r23, 0xBA	; 186
    85fc:	7c 7d       	andi	r23, 0xDC	; 220
    85fe:	7e 7f       	andi	r23, 0xFE	; 254
    8600:	00 02       	muls	r16, r16
    8602:	04 06       	cpc	r0, r20
    8604:	08 0a       	sbc	r0, r24
    8606:	0c 0e       	add	r0, r28
    8608:	10 12       	cpse	r1, r16
    860a:	14 16       	cp	r1, r20
    860c:	18 1a       	sub	r1, r24
    860e:	1c 1e       	adc	r1, r28
    8610:	20 22       	and	r2, r16
    8612:	24 26       	eor	r2, r20
    8614:	28 2a       	or	r2, r24
    8616:	2c 2e       	mov	r2, r28
    8618:	30 32       	cpi	r19, 0x20	; 32
    861a:	34 36       	cpi	r19, 0x64	; 100
    861c:	38 3a       	cpi	r19, 0xA8	; 168
    861e:	3c 3e       	cpi	r19, 0xEC	; 236
    8620:	40 42       	sbci	r20, 0x20	; 32
    8622:	44 46       	sbci	r20, 0x64	; 100
    8624:	48 4a       	sbci	r20, 0xA8	; 168
    8626:	4c 4e       	sbci	r20, 0xEC	; 236
    8628:	50 52       	subi	r21, 0x20	; 32
    862a:	54 56       	subi	r21, 0x64	; 100
    862c:	58 5a       	subi	r21, 0xA8	; 168
    862e:	5c 5e       	subi	r21, 0xEC	; 236
    8630:	60 62       	ori	r22, 0x20	; 32
    8632:	64 66       	ori	r22, 0x64	; 100
    8634:	68 6a       	ori	r22, 0xA8	; 168
    8636:	6c 6e       	ori	r22, 0xEC	; 236
    8638:	70 72       	andi	r23, 0x20	; 32
    863a:	74 76       	andi	r23, 0x64	; 100
    863c:	78 7a       	andi	r23, 0xA8	; 168
    863e:	7c 7e       	andi	r23, 0xEC	; 236
    8640:	7f 7d       	andi	r23, 0xDF	; 223
    8642:	7b 79       	andi	r23, 0x9B	; 155
    8644:	77 75       	andi	r23, 0x57	; 87
    8646:	73 71       	andi	r23, 0x13	; 19
    8648:	6f 6d       	ori	r22, 0xDF	; 223
    864a:	6b 69       	ori	r22, 0x9B	; 155
    864c:	67 65       	ori	r22, 0x57	; 87
    864e:	63 61       	ori	r22, 0x13	; 19
    8650:	5f 5d       	subi	r21, 0xDF	; 223
    8652:	5b 59       	subi	r21, 0x9B	; 155
    8654:	57 55       	subi	r21, 0x57	; 87
    8656:	53 51       	subi	r21, 0x13	; 19
    8658:	4f 4d       	sbci	r20, 0xDF	; 223
    865a:	4b 49       	sbci	r20, 0x9B	; 155
    865c:	47 45       	sbci	r20, 0x57	; 87
    865e:	43 41       	sbci	r20, 0x13	; 19
    8660:	3f 3d       	cpi	r19, 0xDF	; 223
    8662:	3b 39       	cpi	r19, 0x9B	; 155
    8664:	37 35       	cpi	r19, 0x57	; 87
    8666:	33 31       	cpi	r19, 0x13	; 19
    8668:	2f 2d       	mov	r18, r15
    866a:	2b 29       	or	r18, r11
    866c:	27 25       	eor	r18, r7
    866e:	23 21       	and	r18, r3
    8670:	1f 1d       	adc	r17, r15
    8672:	1b 19       	sub	r17, r11
    8674:	17 15       	cp	r17, r7
    8676:	13 11       	cpse	r17, r3
    8678:	0f 0d       	add	r16, r15
    867a:	0b 09       	sbc	r16, r11
    867c:	07 05       	cpc	r16, r7
    867e:	03 01       	movw	r0, r6
    8680:	ff fd       	.word	0xfdff	; ????
    8682:	fb f9       	.word	0xf9fb	; ????
    8684:	f7 f5       	brid	.+124    	; 0x8702 <waves+0x302>
    8686:	f3 f1       	brvs	.+124    	; 0x8704 <waves+0x304>
    8688:	ef ed       	ldi	r30, 0xDF	; 223
    868a:	eb e9       	ldi	r30, 0x9B	; 155
    868c:	e7 e5       	ldi	r30, 0x57	; 87
    868e:	e3 e1       	ldi	r30, 0x13	; 19
    8690:	df dd       	rcall	.-1090   	; 0x8250 <steptable+0x48>
    8692:	db d9       	rcall	.-3146   	; 0x7a4a <TriggerCommon+0x1e>
    8694:	d7 d5       	rcall	.+2990   	; 0x9244 <FadeIn+0x2>
    8696:	d3 d1       	rcall	.+934    	; 0x8a3e <waves+0x63e>
    8698:	cf cd       	rjmp	.-1122   	; 0x8238 <steptable+0x30>
    869a:	cb c9       	rjmp	.-3178   	; 0x7a32 <TriggerCommon+0x6>
    869c:	c7 c5       	rjmp	.+2958   	; 0x922c <doFade+0x6>
    869e:	c3 c1       	rjmp	.+902    	; 0x8a26 <waves+0x626>
    86a0:	bf bd       	out	0x2f, r27	; 47
    86a2:	bb b9       	out	0x0b, r27	; 11
    86a4:	b7 b5       	in	r27, 0x27	; 39
    86a6:	b3 b1       	in	r27, 0x03	; 3
    86a8:	af ad       	ldd	r26, Y+63	; 0x3f
    86aa:	ab a9       	ldd	r26, Y+51	; 0x33
    86ac:	a7 a5       	ldd	r26, Z+47	; 0x2f
    86ae:	a3 a1       	ldd	r26, Z+35	; 0x23
    86b0:	9f 9d       	mul	r25, r15
    86b2:	9b 99       	sbic	0x13, 3	; 19
    86b4:	97 95       	ror	r25
    86b6:	93 91       	.word	0x9193	; ????
    86b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    86ba:	8b 89       	ldd	r24, Y+19	; 0x13
    86bc:	87 85       	ldd	r24, Z+15	; 0x0f
    86be:	83 81       	ldd	r24, Z+3	; 0x03
    86c0:	80 82       	st	Z, r8
    86c2:	84 86       	std	Z+12, r8	; 0x0c
    86c4:	88 8a       	std	Y+16, r8	; 0x10
    86c6:	8c 8e       	std	Y+28, r8	; 0x1c
    86c8:	90 92 94 96 	sts	0x9694, r9
    86cc:	98 9a       	sbi	0x13, 0	; 19
    86ce:	9c 9e       	mul	r9, r28
    86d0:	a0 a2       	std	Z+32, r10	; 0x20
    86d2:	a4 a6       	std	Z+44, r10	; 0x2c
    86d4:	a8 aa       	std	Y+48, r10	; 0x30
    86d6:	ac ae       	std	Y+60, r10	; 0x3c
    86d8:	b0 b2       	in	r11, 0x10	; 16
    86da:	b4 b6       	in	r11, 0x34	; 52
    86dc:	b8 ba       	out	0x18, r11	; 24
    86de:	bc be       	out	0x3c, r11	; 60
    86e0:	c0 c2       	rjmp	.+1408   	; 0x8c62 <waves+0x862>
    86e2:	c4 c6       	rjmp	.+3464   	; 0x946c <LBPrintByte+0x4e>
    86e4:	c8 ca       	rjmp	.-2672   	; 0x7c76 <ProcessMusic+0x1e>
    86e6:	cc ce       	rjmp	.-616    	; 0x8480 <waves+0x80>
    86e8:	d0 d2       	rcall	.+1440   	; 0x8c8a <waves+0x88a>
    86ea:	d4 d6       	rcall	.+3496   	; 0x9494 <LBPrintInt+0x14>
    86ec:	d8 da       	rcall	.-2640   	; 0x7c9e <ProcessMusic+0x46>
    86ee:	dc de       	rcall	.-584    	; 0x84a8 <waves+0xa8>
    86f0:	e0 e2       	ldi	r30, 0x20	; 32
    86f2:	e4 e6       	ldi	r30, 0x64	; 100
    86f4:	e8 ea       	ldi	r30, 0xA8	; 168
    86f6:	ec ee       	ldi	r30, 0xEC	; 236
    86f8:	f0 f2       	brcs	.-68     	; 0x86b6 <waves+0x2b6>
    86fa:	f4 f6       	brge	.-68     	; 0x86b8 <waves+0x2b8>
    86fc:	f8 fa       	.word	0xfaf8	; ????
    86fe:	fc fe       	.word	0xfefc	; ????
    8700:	7f 7f       	andi	r23, 0xFF	; 255
    8702:	7f 7f       	andi	r23, 0xFF	; 255
    8704:	7f 7f       	andi	r23, 0xFF	; 255
    8706:	7f 7f       	andi	r23, 0xFF	; 255
    8708:	7f 7f       	andi	r23, 0xFF	; 255
    870a:	7f 7f       	andi	r23, 0xFF	; 255
    870c:	7f 7f       	andi	r23, 0xFF	; 255
    870e:	7f 7f       	andi	r23, 0xFF	; 255
    8710:	7f 7f       	andi	r23, 0xFF	; 255
    8712:	7f 7f       	andi	r23, 0xFF	; 255
    8714:	7f 7f       	andi	r23, 0xFF	; 255
    8716:	7f 7f       	andi	r23, 0xFF	; 255
    8718:	7f 7f       	andi	r23, 0xFF	; 255
    871a:	7f 7f       	andi	r23, 0xFF	; 255
    871c:	7f 7f       	andi	r23, 0xFF	; 255
    871e:	7f 7f       	andi	r23, 0xFF	; 255
    8720:	7f 7f       	andi	r23, 0xFF	; 255
    8722:	7f 7f       	andi	r23, 0xFF	; 255
    8724:	7f 7f       	andi	r23, 0xFF	; 255
    8726:	7f 7f       	andi	r23, 0xFF	; 255
    8728:	7f 7f       	andi	r23, 0xFF	; 255
    872a:	7f 7f       	andi	r23, 0xFF	; 255
    872c:	7f 7f       	andi	r23, 0xFF	; 255
    872e:	7f 7f       	andi	r23, 0xFF	; 255
    8730:	7f 7f       	andi	r23, 0xFF	; 255
    8732:	7f 7f       	andi	r23, 0xFF	; 255
    8734:	7f 7f       	andi	r23, 0xFF	; 255
    8736:	7f 7f       	andi	r23, 0xFF	; 255
    8738:	7f 7f       	andi	r23, 0xFF	; 255
    873a:	7f 7f       	andi	r23, 0xFF	; 255
    873c:	7f 7f       	andi	r23, 0xFF	; 255
    873e:	7f 7f       	andi	r23, 0xFF	; 255
    8740:	80 80       	ld	r8, Z
    8742:	80 80       	ld	r8, Z
    8744:	80 80       	ld	r8, Z
    8746:	80 80       	ld	r8, Z
    8748:	80 80       	ld	r8, Z
    874a:	80 80       	ld	r8, Z
    874c:	80 80       	ld	r8, Z
    874e:	80 80       	ld	r8, Z
    8750:	80 80       	ld	r8, Z
    8752:	80 80       	ld	r8, Z
    8754:	80 80       	ld	r8, Z
    8756:	80 80       	ld	r8, Z
    8758:	80 80       	ld	r8, Z
    875a:	80 80       	ld	r8, Z
    875c:	80 80       	ld	r8, Z
    875e:	80 80       	ld	r8, Z
    8760:	80 80       	ld	r8, Z
    8762:	80 80       	ld	r8, Z
    8764:	80 80       	ld	r8, Z
    8766:	80 80       	ld	r8, Z
    8768:	80 80       	ld	r8, Z
    876a:	80 80       	ld	r8, Z
    876c:	80 80       	ld	r8, Z
    876e:	80 80       	ld	r8, Z
    8770:	80 80       	ld	r8, Z
    8772:	80 80       	ld	r8, Z
    8774:	80 80       	ld	r8, Z
    8776:	80 80       	ld	r8, Z
    8778:	80 80       	ld	r8, Z
    877a:	80 80       	ld	r8, Z
    877c:	80 80       	ld	r8, Z
    877e:	80 80       	ld	r8, Z
    8780:	80 80       	ld	r8, Z
    8782:	80 80       	ld	r8, Z
    8784:	80 80       	ld	r8, Z
    8786:	80 80       	ld	r8, Z
    8788:	80 80       	ld	r8, Z
    878a:	80 80       	ld	r8, Z
    878c:	80 80       	ld	r8, Z
    878e:	80 80       	ld	r8, Z
    8790:	80 80       	ld	r8, Z
    8792:	80 80       	ld	r8, Z
    8794:	80 80       	ld	r8, Z
    8796:	80 80       	ld	r8, Z
    8798:	80 80       	ld	r8, Z
    879a:	80 80       	ld	r8, Z
    879c:	80 80       	ld	r8, Z
    879e:	80 80       	ld	r8, Z
    87a0:	80 80       	ld	r8, Z
    87a2:	80 80       	ld	r8, Z
    87a4:	80 80       	ld	r8, Z
    87a6:	80 80       	ld	r8, Z
    87a8:	80 80       	ld	r8, Z
    87aa:	80 80       	ld	r8, Z
    87ac:	80 80       	ld	r8, Z
    87ae:	80 80       	ld	r8, Z
    87b0:	80 80       	ld	r8, Z
    87b2:	80 80       	ld	r8, Z
    87b4:	80 80       	ld	r8, Z
    87b6:	80 80       	ld	r8, Z
    87b8:	80 80       	ld	r8, Z
    87ba:	80 80       	ld	r8, Z
    87bc:	80 80       	ld	r8, Z
    87be:	80 80       	ld	r8, Z
    87c0:	80 80       	ld	r8, Z
    87c2:	80 80       	ld	r8, Z
    87c4:	80 80       	ld	r8, Z
    87c6:	80 80       	ld	r8, Z
    87c8:	80 80       	ld	r8, Z
    87ca:	80 80       	ld	r8, Z
    87cc:	80 80       	ld	r8, Z
    87ce:	80 80       	ld	r8, Z
    87d0:	80 80       	ld	r8, Z
    87d2:	80 80       	ld	r8, Z
    87d4:	80 80       	ld	r8, Z
    87d6:	80 80       	ld	r8, Z
    87d8:	80 80       	ld	r8, Z
    87da:	80 80       	ld	r8, Z
    87dc:	80 80       	ld	r8, Z
    87de:	80 80       	ld	r8, Z
    87e0:	80 80       	ld	r8, Z
    87e2:	80 80       	ld	r8, Z
    87e4:	80 80       	ld	r8, Z
    87e6:	80 80       	ld	r8, Z
    87e8:	80 80       	ld	r8, Z
    87ea:	80 80       	ld	r8, Z
    87ec:	80 80       	ld	r8, Z
    87ee:	80 80       	ld	r8, Z
    87f0:	80 80       	ld	r8, Z
    87f2:	80 80       	ld	r8, Z
    87f4:	80 80       	ld	r8, Z
    87f6:	80 80       	ld	r8, Z
    87f8:	80 80       	ld	r8, Z
    87fa:	80 80       	ld	r8, Z
    87fc:	80 80       	ld	r8, Z
    87fe:	80 80       	ld	r8, Z
    8800:	7f 7f       	andi	r23, 0xFF	; 255
    8802:	7f 7f       	andi	r23, 0xFF	; 255
    8804:	7f 7f       	andi	r23, 0xFF	; 255
    8806:	7f 7f       	andi	r23, 0xFF	; 255
    8808:	7f 7f       	andi	r23, 0xFF	; 255
    880a:	7f 7f       	andi	r23, 0xFF	; 255
    880c:	7f 7f       	andi	r23, 0xFF	; 255
    880e:	7f 7f       	andi	r23, 0xFF	; 255
    8810:	7f 7f       	andi	r23, 0xFF	; 255
    8812:	7f 7f       	andi	r23, 0xFF	; 255
    8814:	7f 7f       	andi	r23, 0xFF	; 255
    8816:	7f 7f       	andi	r23, 0xFF	; 255
    8818:	7f 7f       	andi	r23, 0xFF	; 255
    881a:	7f 7f       	andi	r23, 0xFF	; 255
    881c:	7f 7f       	andi	r23, 0xFF	; 255
    881e:	7f 7f       	andi	r23, 0xFF	; 255
    8820:	7f 7f       	andi	r23, 0xFF	; 255
    8822:	7f 7f       	andi	r23, 0xFF	; 255
    8824:	7f 7f       	andi	r23, 0xFF	; 255
    8826:	7f 7f       	andi	r23, 0xFF	; 255
    8828:	7f 7f       	andi	r23, 0xFF	; 255
    882a:	7f 7f       	andi	r23, 0xFF	; 255
    882c:	7f 7f       	andi	r23, 0xFF	; 255
    882e:	7f 7f       	andi	r23, 0xFF	; 255
    8830:	7f 7f       	andi	r23, 0xFF	; 255
    8832:	7f 7f       	andi	r23, 0xFF	; 255
    8834:	7f 7f       	andi	r23, 0xFF	; 255
    8836:	7f 7f       	andi	r23, 0xFF	; 255
    8838:	7f 7f       	andi	r23, 0xFF	; 255
    883a:	7f 7f       	andi	r23, 0xFF	; 255
    883c:	7f 7f       	andi	r23, 0xFF	; 255
    883e:	7f 7f       	andi	r23, 0xFF	; 255
    8840:	7f 7f       	andi	r23, 0xFF	; 255
    8842:	7f 7f       	andi	r23, 0xFF	; 255
    8844:	7f 7f       	andi	r23, 0xFF	; 255
    8846:	7f 7f       	andi	r23, 0xFF	; 255
    8848:	7f 7f       	andi	r23, 0xFF	; 255
    884a:	7f 7f       	andi	r23, 0xFF	; 255
    884c:	7f 7f       	andi	r23, 0xFF	; 255
    884e:	7f 7f       	andi	r23, 0xFF	; 255
    8850:	7f 7f       	andi	r23, 0xFF	; 255
    8852:	7f 7f       	andi	r23, 0xFF	; 255
    8854:	7f 7f       	andi	r23, 0xFF	; 255
    8856:	7f 7f       	andi	r23, 0xFF	; 255
    8858:	7f 7f       	andi	r23, 0xFF	; 255
    885a:	7f 7f       	andi	r23, 0xFF	; 255
    885c:	7f 7f       	andi	r23, 0xFF	; 255
    885e:	7f 7f       	andi	r23, 0xFF	; 255
    8860:	7f 7f       	andi	r23, 0xFF	; 255
    8862:	7f 7f       	andi	r23, 0xFF	; 255
    8864:	7f 7f       	andi	r23, 0xFF	; 255
    8866:	7f 7f       	andi	r23, 0xFF	; 255
    8868:	7f 7f       	andi	r23, 0xFF	; 255
    886a:	7f 7f       	andi	r23, 0xFF	; 255
    886c:	7f 7f       	andi	r23, 0xFF	; 255
    886e:	7f 7f       	andi	r23, 0xFF	; 255
    8870:	7f 7f       	andi	r23, 0xFF	; 255
    8872:	7f 7f       	andi	r23, 0xFF	; 255
    8874:	7f 7f       	andi	r23, 0xFF	; 255
    8876:	7f 7f       	andi	r23, 0xFF	; 255
    8878:	7f 7f       	andi	r23, 0xFF	; 255
    887a:	7f 7f       	andi	r23, 0xFF	; 255
    887c:	7f 7f       	andi	r23, 0xFF	; 255
    887e:	7f 7f       	andi	r23, 0xFF	; 255
    8880:	80 80       	ld	r8, Z
    8882:	80 80       	ld	r8, Z
    8884:	80 80       	ld	r8, Z
    8886:	80 80       	ld	r8, Z
    8888:	80 80       	ld	r8, Z
    888a:	80 80       	ld	r8, Z
    888c:	80 80       	ld	r8, Z
    888e:	80 80       	ld	r8, Z
    8890:	80 80       	ld	r8, Z
    8892:	80 80       	ld	r8, Z
    8894:	80 80       	ld	r8, Z
    8896:	80 80       	ld	r8, Z
    8898:	80 80       	ld	r8, Z
    889a:	80 80       	ld	r8, Z
    889c:	80 80       	ld	r8, Z
    889e:	80 80       	ld	r8, Z
    88a0:	80 80       	ld	r8, Z
    88a2:	80 80       	ld	r8, Z
    88a4:	80 80       	ld	r8, Z
    88a6:	80 80       	ld	r8, Z
    88a8:	80 80       	ld	r8, Z
    88aa:	80 80       	ld	r8, Z
    88ac:	80 80       	ld	r8, Z
    88ae:	80 80       	ld	r8, Z
    88b0:	80 80       	ld	r8, Z
    88b2:	80 80       	ld	r8, Z
    88b4:	80 80       	ld	r8, Z
    88b6:	80 80       	ld	r8, Z
    88b8:	80 80       	ld	r8, Z
    88ba:	80 80       	ld	r8, Z
    88bc:	80 80       	ld	r8, Z
    88be:	80 80       	ld	r8, Z
    88c0:	80 80       	ld	r8, Z
    88c2:	80 80       	ld	r8, Z
    88c4:	80 80       	ld	r8, Z
    88c6:	80 80       	ld	r8, Z
    88c8:	80 80       	ld	r8, Z
    88ca:	80 80       	ld	r8, Z
    88cc:	80 80       	ld	r8, Z
    88ce:	80 80       	ld	r8, Z
    88d0:	80 80       	ld	r8, Z
    88d2:	80 80       	ld	r8, Z
    88d4:	80 80       	ld	r8, Z
    88d6:	80 80       	ld	r8, Z
    88d8:	80 80       	ld	r8, Z
    88da:	80 80       	ld	r8, Z
    88dc:	80 80       	ld	r8, Z
    88de:	80 80       	ld	r8, Z
    88e0:	80 80       	ld	r8, Z
    88e2:	80 80       	ld	r8, Z
    88e4:	80 80       	ld	r8, Z
    88e6:	80 80       	ld	r8, Z
    88e8:	80 80       	ld	r8, Z
    88ea:	80 80       	ld	r8, Z
    88ec:	80 80       	ld	r8, Z
    88ee:	80 80       	ld	r8, Z
    88f0:	80 80       	ld	r8, Z
    88f2:	80 80       	ld	r8, Z
    88f4:	80 80       	ld	r8, Z
    88f6:	80 80       	ld	r8, Z
    88f8:	80 80       	ld	r8, Z
    88fa:	80 80       	ld	r8, Z
    88fc:	80 80       	ld	r8, Z
    88fe:	80 80       	ld	r8, Z
    8900:	7f 7f       	andi	r23, 0xFF	; 255
    8902:	7f 7f       	andi	r23, 0xFF	; 255
    8904:	7f 7f       	andi	r23, 0xFF	; 255
    8906:	7f 7f       	andi	r23, 0xFF	; 255
    8908:	7f 7f       	andi	r23, 0xFF	; 255
    890a:	7f 7f       	andi	r23, 0xFF	; 255
    890c:	7f 7f       	andi	r23, 0xFF	; 255
    890e:	7f 7f       	andi	r23, 0xFF	; 255
    8910:	7f 7f       	andi	r23, 0xFF	; 255
    8912:	7f 7f       	andi	r23, 0xFF	; 255
    8914:	7f 7f       	andi	r23, 0xFF	; 255
    8916:	7f 7f       	andi	r23, 0xFF	; 255
    8918:	7f 7f       	andi	r23, 0xFF	; 255
    891a:	7f 7f       	andi	r23, 0xFF	; 255
    891c:	7f 7f       	andi	r23, 0xFF	; 255
    891e:	7f 7f       	andi	r23, 0xFF	; 255
    8920:	7f 7f       	andi	r23, 0xFF	; 255
    8922:	7f 7f       	andi	r23, 0xFF	; 255
    8924:	7f 7f       	andi	r23, 0xFF	; 255
    8926:	7f 7f       	andi	r23, 0xFF	; 255
    8928:	7f 7f       	andi	r23, 0xFF	; 255
    892a:	7f 7f       	andi	r23, 0xFF	; 255
    892c:	7f 7f       	andi	r23, 0xFF	; 255
    892e:	7f 7f       	andi	r23, 0xFF	; 255
    8930:	7f 7f       	andi	r23, 0xFF	; 255
    8932:	7f 7f       	andi	r23, 0xFF	; 255
    8934:	7f 7f       	andi	r23, 0xFF	; 255
    8936:	7f 7f       	andi	r23, 0xFF	; 255
    8938:	7f 7f       	andi	r23, 0xFF	; 255
    893a:	7f 7f       	andi	r23, 0xFF	; 255
    893c:	7f 7f       	andi	r23, 0xFF	; 255
    893e:	7f 7f       	andi	r23, 0xFF	; 255
    8940:	7f 7f       	andi	r23, 0xFF	; 255
    8942:	7f 7f       	andi	r23, 0xFF	; 255
    8944:	7f 7f       	andi	r23, 0xFF	; 255
    8946:	7f 7f       	andi	r23, 0xFF	; 255
    8948:	7f 7f       	andi	r23, 0xFF	; 255
    894a:	7f 7f       	andi	r23, 0xFF	; 255
    894c:	7f 7f       	andi	r23, 0xFF	; 255
    894e:	7f 7f       	andi	r23, 0xFF	; 255
    8950:	7f 7f       	andi	r23, 0xFF	; 255
    8952:	7f 7f       	andi	r23, 0xFF	; 255
    8954:	7f 7f       	andi	r23, 0xFF	; 255
    8956:	7f 7f       	andi	r23, 0xFF	; 255
    8958:	7f 7f       	andi	r23, 0xFF	; 255
    895a:	7f 7f       	andi	r23, 0xFF	; 255
    895c:	7f 7f       	andi	r23, 0xFF	; 255
    895e:	7f 7f       	andi	r23, 0xFF	; 255
    8960:	7f 7f       	andi	r23, 0xFF	; 255
    8962:	7f 7f       	andi	r23, 0xFF	; 255
    8964:	7f 7f       	andi	r23, 0xFF	; 255
    8966:	7f 7f       	andi	r23, 0xFF	; 255
    8968:	7f 7f       	andi	r23, 0xFF	; 255
    896a:	7f 7f       	andi	r23, 0xFF	; 255
    896c:	7f 7f       	andi	r23, 0xFF	; 255
    896e:	7f 7f       	andi	r23, 0xFF	; 255
    8970:	7f 7f       	andi	r23, 0xFF	; 255
    8972:	7f 7f       	andi	r23, 0xFF	; 255
    8974:	7f 7f       	andi	r23, 0xFF	; 255
    8976:	7f 7f       	andi	r23, 0xFF	; 255
    8978:	7f 7f       	andi	r23, 0xFF	; 255
    897a:	7f 7f       	andi	r23, 0xFF	; 255
    897c:	7f 7f       	andi	r23, 0xFF	; 255
    897e:	7f 7f       	andi	r23, 0xFF	; 255
    8980:	7f 7f       	andi	r23, 0xFF	; 255
    8982:	7f 7f       	andi	r23, 0xFF	; 255
    8984:	7f 7f       	andi	r23, 0xFF	; 255
    8986:	7f 7f       	andi	r23, 0xFF	; 255
    8988:	7f 7f       	andi	r23, 0xFF	; 255
    898a:	7f 7f       	andi	r23, 0xFF	; 255
    898c:	7f 7f       	andi	r23, 0xFF	; 255
    898e:	7f 7f       	andi	r23, 0xFF	; 255
    8990:	7f 7f       	andi	r23, 0xFF	; 255
    8992:	7f 7f       	andi	r23, 0xFF	; 255
    8994:	7f 7f       	andi	r23, 0xFF	; 255
    8996:	7f 7f       	andi	r23, 0xFF	; 255
    8998:	7f 7f       	andi	r23, 0xFF	; 255
    899a:	7f 7f       	andi	r23, 0xFF	; 255
    899c:	7f 7f       	andi	r23, 0xFF	; 255
    899e:	7f 7f       	andi	r23, 0xFF	; 255
    89a0:	7f 7f       	andi	r23, 0xFF	; 255
    89a2:	7f 7f       	andi	r23, 0xFF	; 255
    89a4:	7f 7f       	andi	r23, 0xFF	; 255
    89a6:	7f 7f       	andi	r23, 0xFF	; 255
    89a8:	7f 7f       	andi	r23, 0xFF	; 255
    89aa:	7f 7f       	andi	r23, 0xFF	; 255
    89ac:	7f 7f       	andi	r23, 0xFF	; 255
    89ae:	7f 7f       	andi	r23, 0xFF	; 255
    89b0:	7f 7f       	andi	r23, 0xFF	; 255
    89b2:	7f 7f       	andi	r23, 0xFF	; 255
    89b4:	7f 7f       	andi	r23, 0xFF	; 255
    89b6:	7f 7f       	andi	r23, 0xFF	; 255
    89b8:	7f 7f       	andi	r23, 0xFF	; 255
    89ba:	7f 7f       	andi	r23, 0xFF	; 255
    89bc:	7f 7f       	andi	r23, 0xFF	; 255
    89be:	7f 7f       	andi	r23, 0xFF	; 255
    89c0:	80 80       	ld	r8, Z
    89c2:	80 80       	ld	r8, Z
    89c4:	80 80       	ld	r8, Z
    89c6:	80 80       	ld	r8, Z
    89c8:	80 80       	ld	r8, Z
    89ca:	80 80       	ld	r8, Z
    89cc:	80 80       	ld	r8, Z
    89ce:	80 80       	ld	r8, Z
    89d0:	80 80       	ld	r8, Z
    89d2:	80 80       	ld	r8, Z
    89d4:	80 80       	ld	r8, Z
    89d6:	80 80       	ld	r8, Z
    89d8:	80 80       	ld	r8, Z
    89da:	80 80       	ld	r8, Z
    89dc:	80 80       	ld	r8, Z
    89de:	80 80       	ld	r8, Z
    89e0:	80 80       	ld	r8, Z
    89e2:	80 80       	ld	r8, Z
    89e4:	80 80       	ld	r8, Z
    89e6:	80 80       	ld	r8, Z
    89e8:	80 80       	ld	r8, Z
    89ea:	80 80       	ld	r8, Z
    89ec:	80 80       	ld	r8, Z
    89ee:	80 80       	ld	r8, Z
    89f0:	80 80       	ld	r8, Z
    89f2:	80 80       	ld	r8, Z
    89f4:	80 80       	ld	r8, Z
    89f6:	80 80       	ld	r8, Z
    89f8:	80 80       	ld	r8, Z
    89fa:	80 80       	ld	r8, Z
    89fc:	80 80       	ld	r8, Z
    89fe:	80 80       	ld	r8, Z
    8a00:	03 09       	sbc	r16, r3
    8a02:	13 1e       	adc	r1, r19
    8a04:	28 31       	cpi	r18, 0x18	; 24
    8a06:	3a 40       	sbci	r19, 0x0A	; 10
    8a08:	46 4c       	sbci	r20, 0xC6	; 198
    8a0a:	50 54       	subi	r21, 0x40	; 64
    8a0c:	58 5b       	subi	r21, 0xB8	; 184
    8a0e:	5e 61       	ori	r21, 0x1E	; 30
    8a10:	63 65       	ori	r22, 0x53	; 83
    8a12:	67 69       	ori	r22, 0x97	; 151
    8a14:	6b 6c       	ori	r22, 0xCB	; 203
    8a16:	6e 6f       	ori	r22, 0xFE	; 254
    8a18:	70 71       	andi	r23, 0x10	; 16
    8a1a:	72 73       	andi	r23, 0x32	; 50
    8a1c:	74 75       	andi	r23, 0x54	; 84
    8a1e:	76 77       	andi	r23, 0x76	; 118
    8a20:	77 78       	andi	r23, 0x87	; 135
    8a22:	79 79       	andi	r23, 0x99	; 153
    8a24:	7a 7a       	andi	r23, 0xAA	; 170
    8a26:	7b 7b       	andi	r23, 0xBB	; 187
    8a28:	7c 7c       	andi	r23, 0xCC	; 204
    8a2a:	7c 7d       	andi	r23, 0xDC	; 220
    8a2c:	7d 7d       	andi	r23, 0xDD	; 221
    8a2e:	7e 7e       	andi	r23, 0xEE	; 238
    8a30:	7e 7e       	andi	r23, 0xEE	; 238
    8a32:	7f 7f       	andi	r23, 0xFF	; 255
    8a34:	7f 7f       	andi	r23, 0xFF	; 255
    8a36:	7f 7f       	andi	r23, 0xFF	; 255
    8a38:	7f 7f       	andi	r23, 0xFF	; 255
    8a3a:	7f 7f       	andi	r23, 0xFF	; 255
    8a3c:	7f 7f       	andi	r23, 0xFF	; 255
    8a3e:	7f 7f       	andi	r23, 0xFF	; 255
    8a40:	7f 7f       	andi	r23, 0xFF	; 255
    8a42:	7f 7f       	andi	r23, 0xFF	; 255
    8a44:	7f 7f       	andi	r23, 0xFF	; 255
    8a46:	7f 7f       	andi	r23, 0xFF	; 255
    8a48:	7f 7f       	andi	r23, 0xFF	; 255
    8a4a:	7f 7f       	andi	r23, 0xFF	; 255
    8a4c:	7f 7e       	andi	r23, 0xEF	; 239
    8a4e:	7e 7e       	andi	r23, 0xEE	; 238
    8a50:	7e 7d       	andi	r23, 0xDE	; 222
    8a52:	7d 7d       	andi	r23, 0xDD	; 221
    8a54:	7c 7c       	andi	r23, 0xCC	; 204
    8a56:	7c 7b       	andi	r23, 0xBC	; 188
    8a58:	7b 7a       	andi	r23, 0xAB	; 171
    8a5a:	7a 79       	andi	r23, 0x9A	; 154
    8a5c:	79 78       	andi	r23, 0x89	; 137
    8a5e:	77 77       	andi	r23, 0x77	; 119
    8a60:	76 75       	andi	r23, 0x56	; 86
    8a62:	74 73       	andi	r23, 0x34	; 52
    8a64:	72 71       	andi	r23, 0x12	; 18
    8a66:	70 6f       	ori	r23, 0xF0	; 240
    8a68:	6e 6c       	ori	r22, 0xCE	; 206
    8a6a:	6b 69       	ori	r22, 0x9B	; 155
    8a6c:	67 65       	ori	r22, 0x57	; 87
    8a6e:	63 61       	ori	r22, 0x13	; 19
    8a70:	5e 5b       	subi	r21, 0xBE	; 190
    8a72:	58 54       	subi	r21, 0x48	; 72
    8a74:	50 4c       	sbci	r21, 0xC0	; 192
    8a76:	46 40       	sbci	r20, 0x06	; 6
    8a78:	3a 31       	cpi	r19, 0x1A	; 26
    8a7a:	28 1e       	adc	r2, r24
    8a7c:	13 09       	sbc	r17, r3
    8a7e:	03 00       	.word	0x0003	; ????
    8a80:	c6 cc       	rjmp	.-1652   	; 0x840e <waves+0xe>
    8a82:	d5 db       	rcall	.-2134   	; 0x822e <steptable+0x26>
    8a84:	df e3       	ldi	r29, 0x3F	; 63
    8a86:	e5 e7       	ldi	r30, 0x75	; 117
    8a88:	e9 ea       	ldi	r30, 0xA9	; 169
    8a8a:	eb ec       	ldi	r30, 0xCB	; 203
    8a8c:	ed ee       	ldi	r30, 0xED	; 237
    8a8e:	ef ef       	ldi	r30, 0xFF	; 255
    8a90:	f0 f0       	brcs	.+60     	; 0x8ace <waves+0x6ce>
    8a92:	f0 f1       	brcs	.+124    	; 0x8b10 <waves+0x710>
    8a94:	f1 f1       	breq	.+124    	; 0x8b12 <waves+0x712>
    8a96:	f1 f2       	breq	.-68     	; 0x8a54 <waves+0x654>
    8a98:	f2 f2       	brmi	.-68     	; 0x8a56 <waves+0x656>
    8a9a:	f2 f2       	brmi	.-68     	; 0x8a58 <waves+0x658>
    8a9c:	f2 f2       	brmi	.-68     	; 0x8a5a <waves+0x65a>
    8a9e:	f2 f3       	brmi	.-4      	; 0x8a9c <waves+0x69c>
    8aa0:	f3 f3       	brvs	.-4      	; 0x8a9e <waves+0x69e>
    8aa2:	f3 f3       	brvs	.-4      	; 0x8aa0 <waves+0x6a0>
    8aa4:	f3 f3       	brvs	.-4      	; 0x8aa2 <waves+0x6a2>
    8aa6:	f3 f3       	brvs	.-4      	; 0x8aa4 <waves+0x6a4>
    8aa8:	f3 f3       	brvs	.-4      	; 0x8aa6 <waves+0x6a6>
    8aaa:	f3 f3       	brvs	.-4      	; 0x8aa8 <waves+0x6a8>
    8aac:	f3 f3       	brvs	.-4      	; 0x8aaa <waves+0x6aa>
    8aae:	f3 f3       	brvs	.-4      	; 0x8aac <waves+0x6ac>
    8ab0:	f3 f3       	brvs	.-4      	; 0x8aae <waves+0x6ae>
    8ab2:	f3 f3       	brvs	.-4      	; 0x8ab0 <waves+0x6b0>
    8ab4:	f3 f3       	brvs	.-4      	; 0x8ab2 <waves+0x6b2>
    8ab6:	f3 f3       	brvs	.-4      	; 0x8ab4 <waves+0x6b4>
    8ab8:	f3 f3       	brvs	.-4      	; 0x8ab6 <waves+0x6b6>
    8aba:	f3 f3       	brvs	.-4      	; 0x8ab8 <waves+0x6b8>
    8abc:	f3 f3       	brvs	.-4      	; 0x8aba <waves+0x6ba>
    8abe:	f3 f3       	brvs	.-4      	; 0x8abc <waves+0x6bc>
    8ac0:	f3 f3       	brvs	.-4      	; 0x8abe <waves+0x6be>
    8ac2:	f3 f3       	brvs	.-4      	; 0x8ac0 <waves+0x6c0>
    8ac4:	f3 f3       	brvs	.-4      	; 0x8ac2 <waves+0x6c2>
    8ac6:	f3 f3       	brvs	.-4      	; 0x8ac4 <waves+0x6c4>
    8ac8:	f3 f3       	brvs	.-4      	; 0x8ac6 <waves+0x6c6>
    8aca:	f3 f3       	brvs	.-4      	; 0x8ac8 <waves+0x6c8>
    8acc:	f3 f3       	brvs	.-4      	; 0x8aca <waves+0x6ca>
    8ace:	f3 f3       	brvs	.-4      	; 0x8acc <waves+0x6cc>
    8ad0:	f3 f3       	brvs	.-4      	; 0x8ace <waves+0x6ce>
    8ad2:	f3 f3       	brvs	.-4      	; 0x8ad0 <waves+0x6d0>
    8ad4:	f3 f3       	brvs	.-4      	; 0x8ad2 <waves+0x6d2>
    8ad6:	f3 f3       	brvs	.-4      	; 0x8ad4 <waves+0x6d4>
    8ad8:	f3 f3       	brvs	.-4      	; 0x8ad6 <waves+0x6d6>
    8ada:	f3 f3       	brvs	.-4      	; 0x8ad8 <waves+0x6d8>
    8adc:	f3 f3       	brvs	.-4      	; 0x8ada <waves+0x6da>
    8ade:	f3 f3       	brvs	.-4      	; 0x8adc <waves+0x6dc>
    8ae0:	f2 f2       	brmi	.-68     	; 0x8a9e <waves+0x69e>
    8ae2:	f2 f2       	brmi	.-68     	; 0x8aa0 <waves+0x6a0>
    8ae4:	f2 f2       	brmi	.-68     	; 0x8aa2 <waves+0x6a2>
    8ae6:	f2 f2       	brmi	.-68     	; 0x8aa4 <waves+0x6a4>
    8ae8:	f1 f1       	breq	.+124    	; 0x8b66 <waves+0x766>
    8aea:	f1 f1       	breq	.+124    	; 0x8b68 <waves+0x768>
    8aec:	f0 f0       	brcs	.+60     	; 0x8b2a <waves+0x72a>
    8aee:	f0 ef       	ldi	r31, 0xF0	; 240
    8af0:	ef ee       	ldi	r30, 0xEF	; 239
    8af2:	ed ec       	ldi	r30, 0xCD	; 205
    8af4:	eb ea       	ldi	r30, 0xAB	; 171
    8af6:	e9 e7       	ldi	r30, 0x79	; 121
    8af8:	e5 e3       	ldi	r30, 0x35	; 53
    8afa:	df db       	rcall	.-2114   	; 0x82ba <steptable+0xb2>
    8afc:	d5 cc       	rjmp	.-1622   	; 0x84a8 <waves+0xa8>
    8afe:	c6 00       	.word	0x00c6	; ????
    8b00:	00 28       	or	r0, r0
    8b02:	3d 42       	sbci	r19, 0x2D	; 45
    8b04:	30 2d       	mov	r19, r0
    8b06:	2c 2b       	or	r18, r28
    8b08:	2c 2d       	mov	r18, r12
    8b0a:	2e 2f       	mov	r18, r30
    8b0c:	30 32       	cpi	r19, 0x20	; 32
    8b0e:	33 35       	cpi	r19, 0x53	; 83
    8b10:	37 39       	cpi	r19, 0x97	; 151
    8b12:	3b 3d       	cpi	r19, 0xDB	; 219
    8b14:	3f 41       	sbci	r19, 0x1F	; 31
    8b16:	43 45       	sbci	r20, 0x53	; 83
    8b18:	48 4a       	sbci	r20, 0xA8	; 168
    8b1a:	4c 4e       	sbci	r20, 0xEC	; 236
    8b1c:	50 53       	subi	r21, 0x30	; 48
    8b1e:	55 57       	subi	r21, 0x75	; 117
    8b20:	59 5b       	subi	r21, 0xB9	; 185
    8b22:	5d 5f       	subi	r21, 0xFD	; 253
    8b24:	61 63       	ori	r22, 0x31	; 49
    8b26:	65 67       	ori	r22, 0x75	; 117
    8b28:	69 6b       	ori	r22, 0xB9	; 185
    8b2a:	6c 6e       	ori	r22, 0xEC	; 236
    8b2c:	70 71       	andi	r23, 0x10	; 16
    8b2e:	73 74       	andi	r23, 0x43	; 67
    8b30:	75 77       	andi	r23, 0x75	; 117
    8b32:	78 79       	andi	r23, 0x98	; 152
    8b34:	7a 7b       	andi	r23, 0xBA	; 186
    8b36:	7c 7d       	andi	r23, 0xDC	; 220
    8b38:	7d 7e       	andi	r23, 0xED	; 237
    8b3a:	7e 7f       	andi	r23, 0xFE	; 254
    8b3c:	7f 7f       	andi	r23, 0xFF	; 255
    8b3e:	7f 7f       	andi	r23, 0xFF	; 255
    8b40:	7f 7f       	andi	r23, 0xFF	; 255
    8b42:	7f 7f       	andi	r23, 0xFF	; 255
    8b44:	7f 7f       	andi	r23, 0xFF	; 255
    8b46:	7e 7e       	andi	r23, 0xEE	; 238
    8b48:	7d 7d       	andi	r23, 0xDD	; 221
    8b4a:	7c 7b       	andi	r23, 0xBC	; 188
    8b4c:	7a 79       	andi	r23, 0x9A	; 154
    8b4e:	78 77       	andi	r23, 0x78	; 120
    8b50:	75 74       	andi	r23, 0x45	; 69
    8b52:	73 71       	andi	r23, 0x13	; 19
    8b54:	70 6e       	ori	r23, 0xE0	; 224
    8b56:	6c 6b       	ori	r22, 0xBC	; 188
    8b58:	69 67       	ori	r22, 0x79	; 121
    8b5a:	65 63       	ori	r22, 0x35	; 53
    8b5c:	61 5f       	subi	r22, 0xF1	; 241
    8b5e:	5d 5b       	subi	r21, 0xBD	; 189
    8b60:	59 57       	subi	r21, 0x79	; 121
    8b62:	55 53       	subi	r21, 0x35	; 53
    8b64:	50 4e       	sbci	r21, 0xE0	; 224
    8b66:	4c 4a       	sbci	r20, 0xAC	; 172
    8b68:	48 45       	sbci	r20, 0x58	; 88
    8b6a:	43 41       	sbci	r20, 0x13	; 19
    8b6c:	3f 3d       	cpi	r19, 0xDF	; 223
    8b6e:	3b 39       	cpi	r19, 0x9B	; 155
    8b70:	37 35       	cpi	r19, 0x57	; 87
    8b72:	33 32       	cpi	r19, 0x23	; 35
    8b74:	30 2f       	mov	r19, r16
    8b76:	2e 2d       	mov	r18, r14
    8b78:	2c 2b       	or	r18, r28
    8b7a:	2c 2d       	mov	r18, r12
    8b7c:	30 42       	sbci	r19, 0x20	; 32
    8b7e:	3d 28       	or	r3, r13
    8b80:	00 e9       	ldi	r16, 0x90	; 144
    8b82:	e5 fe       	sbrs	r14, 5
    8b84:	d4 d7       	rcall	.+4008   	; 0x9b2e <init_enemy_shark+0x7e>
    8b86:	d7 d7       	rcall	.+4014   	; 0x9b36 <init_enemy_shark+0x86>
    8b88:	d6 d4       	rcall	.+2476   	; 0x9536 <LBCollides+0x44>
    8b8a:	d2 d0       	rcall	.+420    	; 0x8d30 <waves+0x930>
    8b8c:	ce cc       	rjmp	.-1636   	; 0x852a <waves+0x12a>
    8b8e:	ca c8       	rjmp	.-3692   	; 0x7d24 <ProcessMusic+0xcc>
    8b90:	c6 c3       	rjmp	.+1932   	; 0x931e <LBGetJoyPadState+0xe>
    8b92:	c1 bf       	out	0x31, r28	; 49
    8b94:	bd ba       	out	0x1d, r11	; 29
    8b96:	b8 b6       	in	r11, 0x38	; 56
    8b98:	b4 b1       	in	r27, 0x04	; 4
    8b9a:	af ad       	ldd	r26, Y+63	; 0x3f
    8b9c:	ab a9       	ldd	r26, Y+51	; 0x33
    8b9e:	a7 a5       	ldd	r26, Z+47	; 0x2f
    8ba0:	a3 a1       	ldd	r26, Z+35	; 0x23
    8ba2:	9f 9e       	mul	r9, r31
    8ba4:	9c 9a       	sbi	0x13, 4	; 19
    8ba6:	99 97       	sbiw	r26, 0x29	; 41
    8ba8:	95 94       	asr	r9
    8baa:	93 91       	.word	0x9193	; ????
    8bac:	90 8f       	std	Z+24, r25	; 0x18
    8bae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    8bb0:	8b 8a       	std	Y+19, r8	; 0x13
    8bb2:	89 88       	ldd	r8, Y+17	; 0x11
    8bb4:	88 87       	std	Y+8, r24	; 0x08
    8bb6:	86 85       	ldd	r24, Z+14	; 0x0e
    8bb8:	85 84       	ldd	r8, Z+13	; 0x0d
    8bba:	84 84       	ldd	r8, Z+12	; 0x0c
    8bbc:	83 83       	std	Z+3, r24	; 0x03
    8bbe:	83 83       	std	Z+3, r24	; 0x03
    8bc0:	83 83       	std	Z+3, r24	; 0x03
    8bc2:	83 83       	std	Z+3, r24	; 0x03
    8bc4:	83 84       	ldd	r8, Z+11	; 0x0b
    8bc6:	84 84       	ldd	r8, Z+12	; 0x0c
    8bc8:	85 85       	ldd	r24, Z+13	; 0x0d
    8bca:	86 87       	std	Z+14, r24	; 0x0e
    8bcc:	88 88       	ldd	r8, Y+16	; 0x10
    8bce:	89 8a       	std	Y+17, r8	; 0x11
    8bd0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    8bd2:	8d 8f       	std	Y+29, r24	; 0x1d
    8bd4:	90 91 93 94 	lds	r25, 0x9493
    8bd8:	95 97       	sbiw	r26, 0x25	; 37
    8bda:	99 9a       	sbi	0x13, 1	; 19
    8bdc:	9c 9e       	mul	r9, r28
    8bde:	9f a1       	ldd	r25, Y+39	; 0x27
    8be0:	a3 a5       	ldd	r26, Z+43	; 0x2b
    8be2:	a7 a9       	ldd	r26, Z+55	; 0x37
    8be4:	ab ad       	ldd	r26, Y+59	; 0x3b
    8be6:	af b1       	in	r26, 0x0f	; 15
    8be8:	b4 b6       	in	r11, 0x34	; 52
    8bea:	b8 ba       	out	0x18, r11	; 24
    8bec:	bd bf       	out	0x3d, r27	; 61
    8bee:	c1 c3       	rjmp	.+1922   	; 0x9372 <LBGetJoyPadState+0x62>
    8bf0:	c6 c8       	rjmp	.-3700   	; 0x7d7e <ProcessMusic+0x126>
    8bf2:	ca cc       	rjmp	.-1644   	; 0x8588 <waves+0x188>
    8bf4:	ce d0       	rcall	.+412    	; 0x8d92 <waves+0x992>
    8bf6:	d2 d4       	rcall	.+2468   	; 0x959c <LBMapSprite+0x14>
    8bf8:	d6 d7       	rcall	.+4012   	; 0x9ba6 <clear_overlay+0x4>
    8bfa:	d7 d7       	rcall	.+4014   	; 0x9baa <clear_overlay+0x8>
    8bfc:	d4 fe       	sbrs	r13, 4
    8bfe:	e5 e9       	ldi	r30, 0x95	; 149
    8c00:	f9 f8       	.word	0xf8f9	; ????
    8c02:	f9 f5       	brne	.+126    	; 0x8c82 <waves+0x882>
    8c04:	eb e1       	ldi	r30, 0x1B	; 27
    8c06:	dd de       	rcall	.-582    	; 0x89c2 <waves+0x5c2>
    8c08:	e0 e2       	ldi	r30, 0x20	; 32
    8c0a:	e4 e5       	ldi	r30, 0x54	; 84
    8c0c:	e6 e5       	ldi	r30, 0x56	; 86
    8c0e:	e4 e2       	ldi	r30, 0x24	; 36
    8c10:	de d9       	rcall	.-3140   	; 0x7fce <ProcessMusic+0x376>
    8c12:	d2 ca       	rjmp	.-2652   	; 0x81b8 <esmw+0xb8>
    8c14:	c1 b7       	in	r28, 0x31	; 49
    8c16:	ac a2       	std	Y+36, r10	; 0x24
    8c18:	99 91       	ld	r25, Y+
    8c1a:	8a 86       	std	Y+10, r8	; 0x0a
    8c1c:	83 81       	ldd	r24, Z+3	; 0x03
    8c1e:	80 80       	ld	r8, Z
    8c20:	81 82       	std	Z+1, r8	; 0x01
    8c22:	83 85       	ldd	r24, Z+11	; 0x0b
    8c24:	86 88       	ldd	r8, Z+22	; 0x16
    8c26:	8a 8c       	ldd	r8, Y+26	; 0x1a
    8c28:	8d 8f       	std	Y+29, r24	; 0x1d
    8c2a:	90 92 93 95 	sts	0x9593, r9
    8c2e:	96 97       	sbiw	r26, 0x26	; 38
    8c30:	98 99       	sbic	0x13, 0	; 19
    8c32:	9a 9b       	sbis	0x13, 2	; 19
    8c34:	9b 9c       	mul	r9, r11
    8c36:	9d 9d       	mul	r25, r13
    8c38:	9d 9e       	mul	r9, r29
    8c3a:	9e 9e       	mul	r9, r30
    8c3c:	9f 9f       	mul	r25, r31
    8c3e:	9f 9f       	mul	r25, r31
    8c40:	9f 9f       	mul	r25, r31
    8c42:	9f 9e       	mul	r9, r31
    8c44:	9e 9e       	mul	r9, r30
    8c46:	9d 9d       	mul	r25, r13
    8c48:	9d 9c       	mul	r9, r13
    8c4a:	9b 9b       	sbis	0x13, 3	; 19
    8c4c:	9a 99       	sbic	0x13, 2	; 19
    8c4e:	98 97       	sbiw	r26, 0x28	; 40
    8c50:	96 95       	lsr	r25
    8c52:	93 92       	.word	0x9293	; ????
    8c54:	90 8f       	std	Z+24, r25	; 0x18
    8c56:	8d 8c       	ldd	r8, Y+29	; 0x1d
    8c58:	8a 88       	ldd	r8, Y+18	; 0x12
    8c5a:	86 85       	ldd	r24, Z+14	; 0x0e
    8c5c:	83 82       	std	Z+3, r8	; 0x03
    8c5e:	81 80       	ldd	r8, Z+1	; 0x01
    8c60:	80 81       	ld	r24, Z
    8c62:	83 86       	std	Z+11, r8	; 0x0b
    8c64:	8a 91       	ld	r24, -Y
    8c66:	99 a2       	std	Y+33, r9	; 0x21
    8c68:	ac b7       	in	r26, 0x3c	; 60
    8c6a:	c1 ca       	rjmp	.-2686   	; 0x81ee <esmw+0xee>
    8c6c:	d2 d9       	rcall	.-3164   	; 0x8012 <ProcessMusic+0x3ba>
    8c6e:	de e2       	ldi	r29, 0x2E	; 46
    8c70:	e4 e5       	ldi	r30, 0x54	; 84
    8c72:	e6 e5       	ldi	r30, 0x56	; 86
    8c74:	e4 e2       	ldi	r30, 0x24	; 36
    8c76:	e0 de       	rcall	.-576    	; 0x8a38 <waves+0x638>
    8c78:	dd e1       	ldi	r29, 0x1D	; 29
    8c7a:	eb f5       	brvc	.+122    	; 0x8cf6 <waves+0x8f6>
    8c7c:	f9 f8       	.word	0xf8f9	; ????
    8c7e:	f9 00       	.word	0x00f9	; ????
    8c80:	07 08       	sbc	r0, r7
    8c82:	07 0b       	sbc	r16, r23
    8c84:	15 1f       	adc	r17, r21
    8c86:	23 22       	and	r2, r19
    8c88:	20 1e       	adc	r2, r16
    8c8a:	1c 1b       	sub	r17, r28
    8c8c:	1a 1b       	sub	r17, r26
    8c8e:	1c 1e       	adc	r1, r28
    8c90:	22 27       	eor	r18, r18
    8c92:	2e 36       	cpi	r18, 0x6E	; 110
    8c94:	3f 49       	sbci	r19, 0x9F	; 159
    8c96:	54 5e       	subi	r21, 0xE4	; 228
    8c98:	67 6f       	ori	r22, 0xF7	; 247
    8c9a:	76 7a       	andi	r23, 0xA6	; 166
    8c9c:	7e 7f       	andi	r23, 0xFE	; 254
    8c9e:	7f 7f       	andi	r23, 0xFF	; 255
    8ca0:	7f 7e       	andi	r23, 0xEF	; 239
    8ca2:	7d 7b       	andi	r23, 0xBD	; 189
    8ca4:	7a 78       	andi	r23, 0x8A	; 138
    8ca6:	76 74       	andi	r23, 0x46	; 70
    8ca8:	73 71       	andi	r23, 0x13	; 19
    8caa:	70 6e       	ori	r23, 0xE0	; 224
    8cac:	6d 6b       	ori	r22, 0xBD	; 189
    8cae:	6a 69       	ori	r22, 0x9A	; 154
    8cb0:	68 67       	ori	r22, 0x78	; 120
    8cb2:	66 65       	ori	r22, 0x56	; 86
    8cb4:	65 64       	ori	r22, 0x45	; 69
    8cb6:	64 63       	ori	r22, 0x34	; 52
    8cb8:	63 62       	ori	r22, 0x23	; 35
    8cba:	62 62       	ori	r22, 0x22	; 34
    8cbc:	61 61       	ori	r22, 0x11	; 17
    8cbe:	61 61       	ori	r22, 0x11	; 17
    8cc0:	61 61       	ori	r22, 0x11	; 17
    8cc2:	61 62       	ori	r22, 0x21	; 33
    8cc4:	62 62       	ori	r22, 0x22	; 34
    8cc6:	63 63       	ori	r22, 0x33	; 51
    8cc8:	63 64       	ori	r22, 0x43	; 67
    8cca:	65 65       	ori	r22, 0x55	; 85
    8ccc:	66 67       	ori	r22, 0x76	; 118
    8cce:	68 69       	ori	r22, 0x98	; 152
    8cd0:	6a 6b       	ori	r22, 0xBA	; 186
    8cd2:	6d 6e       	ori	r22, 0xED	; 237
    8cd4:	70 71       	andi	r23, 0x10	; 16
    8cd6:	73 74       	andi	r23, 0x43	; 67
    8cd8:	76 78       	andi	r23, 0x86	; 134
    8cda:	7a 7b       	andi	r23, 0xBA	; 186
    8cdc:	7d 7e       	andi	r23, 0xED	; 237
    8cde:	7f 7f       	andi	r23, 0xFF	; 255
    8ce0:	7f 7f       	andi	r23, 0xFF	; 255
    8ce2:	7e 7a       	andi	r23, 0xAE	; 174
    8ce4:	76 6f       	ori	r23, 0xF6	; 246
    8ce6:	67 5e       	subi	r22, 0xE7	; 231
    8ce8:	54 49       	sbci	r21, 0x94	; 148
    8cea:	3f 36       	cpi	r19, 0x6F	; 111
    8cec:	2e 27       	eor	r18, r30
    8cee:	22 1e       	adc	r2, r18
    8cf0:	1c 1b       	sub	r17, r28
    8cf2:	1a 1b       	sub	r17, r26
    8cf4:	1c 1e       	adc	r1, r28
    8cf6:	20 22       	and	r2, r16
    8cf8:	23 1f       	adc	r18, r19
    8cfa:	15 0b       	sbc	r17, r21
    8cfc:	07 08       	sbc	r0, r7
    8cfe:	07 00       	.word	0x0007	; ????
    8d00:	1f 31       	cpi	r17, 0x1F	; 31
    8d02:	3d 44       	sbci	r19, 0x4D	; 77
    8d04:	4e 53       	subi	r20, 0x3E	; 62
    8d06:	54 56       	subi	r21, 0x64	; 100
    8d08:	5a 5f       	subi	r21, 0xFA	; 250
    8d0a:	64 69       	ori	r22, 0x94	; 148
    8d0c:	6e 74       	andi	r22, 0x4E	; 78
    8d0e:	76 79       	andi	r23, 0x96	; 150
    8d10:	7c 7f       	andi	r23, 0xFC	; 252
    8d12:	7f 7f       	andi	r23, 0xFF	; 255
    8d14:	7f 7f       	andi	r23, 0xFF	; 255
    8d16:	7f 7f       	andi	r23, 0xFF	; 255
    8d18:	7f 7f       	andi	r23, 0xFF	; 255
    8d1a:	7f 7f       	andi	r23, 0xFF	; 255
    8d1c:	7f 7f       	andi	r23, 0xFF	; 255
    8d1e:	7f 7f       	andi	r23, 0xFF	; 255
    8d20:	7f 7f       	andi	r23, 0xFF	; 255
    8d22:	7f 7f       	andi	r23, 0xFF	; 255
    8d24:	7f 7f       	andi	r23, 0xFF	; 255
    8d26:	7f 7f       	andi	r23, 0xFF	; 255
    8d28:	7f 7f       	andi	r23, 0xFF	; 255
    8d2a:	7f 7f       	andi	r23, 0xFF	; 255
    8d2c:	7f 7f       	andi	r23, 0xFF	; 255
    8d2e:	7f 7f       	andi	r23, 0xFF	; 255
    8d30:	7f 7f       	andi	r23, 0xFF	; 255
    8d32:	7f 7f       	andi	r23, 0xFF	; 255
    8d34:	7f 7f       	andi	r23, 0xFF	; 255
    8d36:	7f 7f       	andi	r23, 0xFF	; 255
    8d38:	7f 7f       	andi	r23, 0xFF	; 255
    8d3a:	7f 7f       	andi	r23, 0xFF	; 255
    8d3c:	7f 7f       	andi	r23, 0xFF	; 255
    8d3e:	7f 7f       	andi	r23, 0xFF	; 255
    8d40:	7f 7f       	andi	r23, 0xFF	; 255
    8d42:	7f 7f       	andi	r23, 0xFF	; 255
    8d44:	7f 7f       	andi	r23, 0xFF	; 255
    8d46:	7f 7f       	andi	r23, 0xFF	; 255
    8d48:	7f 7f       	andi	r23, 0xFF	; 255
    8d4a:	7f 7f       	andi	r23, 0xFF	; 255
    8d4c:	7f 7f       	andi	r23, 0xFF	; 255
    8d4e:	7f 7f       	andi	r23, 0xFF	; 255
    8d50:	7f 7f       	andi	r23, 0xFF	; 255
    8d52:	7f 7f       	andi	r23, 0xFF	; 255
    8d54:	7f 7f       	andi	r23, 0xFF	; 255
    8d56:	7f 7f       	andi	r23, 0xFF	; 255
    8d58:	7f 7f       	andi	r23, 0xFF	; 255
    8d5a:	7f 7f       	andi	r23, 0xFF	; 255
    8d5c:	7f 7f       	andi	r23, 0xFF	; 255
    8d5e:	7f 7f       	andi	r23, 0xFF	; 255
    8d60:	7f 7f       	andi	r23, 0xFF	; 255
    8d62:	7f 7f       	andi	r23, 0xFF	; 255
    8d64:	7f 7f       	andi	r23, 0xFF	; 255
    8d66:	7f 7f       	andi	r23, 0xFF	; 255
    8d68:	7f 7f       	andi	r23, 0xFF	; 255
    8d6a:	7f 7f       	andi	r23, 0xFF	; 255
    8d6c:	7f 7f       	andi	r23, 0xFF	; 255
    8d6e:	7f 7f       	andi	r23, 0xFF	; 255
    8d70:	7f 7f       	andi	r23, 0xFF	; 255
    8d72:	7f 7f       	andi	r23, 0xFF	; 255
    8d74:	7f 7f       	andi	r23, 0xFF	; 255
    8d76:	7f 7f       	andi	r23, 0xFF	; 255
    8d78:	7f 7f       	andi	r23, 0xFF	; 255
    8d7a:	7f 7c       	andi	r23, 0xCF	; 207
    8d7c:	78 71       	andi	r23, 0x18	; 24
    8d7e:	68 4c       	sbci	r22, 0xC8	; 200
    8d80:	2c 1c       	adc	r2, r12
    8d82:	12 0c       	add	r1, r2
    8d84:	0a 0b       	sbc	r16, r26
    8d86:	0a 05       	cpc	r16, r10
    8d88:	fd f3       	brhs	.-2      	; 0x8d88 <waves+0x988>
    8d8a:	e9 df       	rcall	.-46     	; 0x8d5e <waves+0x95e>
    8d8c:	d4 ca       	rjmp	.-2648   	; 0x8336 <steptable+0x12e>
    8d8e:	c0 b7       	in	r28, 0x30	; 48
    8d90:	ae a6       	std	Y+46, r10	; 0x2e
    8d92:	9e 97       	sbiw	r26, 0x2e	; 46
    8d94:	91 8b       	std	Z+17, r25	; 0x11
    8d96:	86 85       	ldd	r24, Z+14	; 0x0e
    8d98:	82 80       	ldd	r8, Z+2	; 0x02
    8d9a:	80 80       	ld	r8, Z
    8d9c:	80 80       	ld	r8, Z
    8d9e:	80 80       	ld	r8, Z
    8da0:	80 80       	ld	r8, Z
    8da2:	80 80       	ld	r8, Z
    8da4:	80 80       	ld	r8, Z
    8da6:	80 80       	ld	r8, Z
    8da8:	80 80       	ld	r8, Z
    8daa:	80 80       	ld	r8, Z
    8dac:	80 80       	ld	r8, Z
    8dae:	80 80       	ld	r8, Z
    8db0:	80 80       	ld	r8, Z
    8db2:	80 80       	ld	r8, Z
    8db4:	80 80       	ld	r8, Z
    8db6:	80 80       	ld	r8, Z
    8db8:	80 80       	ld	r8, Z
    8dba:	80 80       	ld	r8, Z
    8dbc:	80 80       	ld	r8, Z
    8dbe:	80 80       	ld	r8, Z
    8dc0:	80 80       	ld	r8, Z
    8dc2:	80 80       	ld	r8, Z
    8dc4:	80 80       	ld	r8, Z
    8dc6:	80 80       	ld	r8, Z
    8dc8:	80 80       	ld	r8, Z
    8dca:	80 80       	ld	r8, Z
    8dcc:	80 80       	ld	r8, Z
    8dce:	80 80       	ld	r8, Z
    8dd0:	80 80       	ld	r8, Z
    8dd2:	80 80       	ld	r8, Z
    8dd4:	80 80       	ld	r8, Z
    8dd6:	80 80       	ld	r8, Z
    8dd8:	80 80       	ld	r8, Z
    8dda:	80 80       	ld	r8, Z
    8ddc:	80 80       	ld	r8, Z
    8dde:	80 80       	ld	r8, Z
    8de0:	80 80       	ld	r8, Z
    8de2:	80 80       	ld	r8, Z
    8de4:	80 80       	ld	r8, Z
    8de6:	80 80       	ld	r8, Z
    8de8:	80 80       	ld	r8, Z
    8dea:	80 80       	ld	r8, Z
    8dec:	80 80       	ld	r8, Z
    8dee:	80 80       	ld	r8, Z
    8df0:	80 80       	ld	r8, Z
    8df2:	80 80       	ld	r8, Z
    8df4:	80 87       	std	Z+8, r24	; 0x08
    8df6:	91 9d       	mul	r25, r1
    8df8:	ac c4       	rjmp	.+2392   	; 0x9752 <init_default_high_scores+0x24>
    8dfa:	cb d4       	rcall	.+2454   	; 0x9792 <init_player_state+0x10>
    8dfc:	dd f2       	brhs	.-74     	; 0x8db4 <waves+0x9b4>
    8dfe:	fa fa       	.word	0xfafa	; ????

00008e00 <RestoreBackground>:
	unsigned char free_tile_index, userRamTilesCount=0,userRamTilesCount_tmp=0;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=userRamTilesCount;i<free_tile_index;i++){
    8e00:	80 91 f3 0c 	lds	r24, 0x0CF3
    8e04:	90 91 7e 0d 	lds	r25, 0x0D7E
    8e08:	89 17       	cp	r24, r25
    8e0a:	78 f4       	brcc	.+30     	; 0x8e2a <RestoreBackground+0x2a>
			//vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
			*ram_tiles_restore[i].addr=ram_tiles_restore[i].tileIndex;
    8e0c:	e8 2f       	mov	r30, r24
    8e0e:	f0 e0       	ldi	r31, 0x00	; 0
    8e10:	9f 01       	movw	r18, r30
    8e12:	22 0f       	add	r18, r18
    8e14:	33 1f       	adc	r19, r19
    8e16:	e2 0f       	add	r30, r18
    8e18:	f3 1f       	adc	r31, r19
    8e1a:	e0 5b       	subi	r30, 0xB0	; 176
    8e1c:	f3 4f       	sbci	r31, 0xF3	; 243
    8e1e:	a0 81       	ld	r26, Z
    8e20:	b1 81       	ldd	r27, Z+1	; 0x01
    8e22:	92 81       	ldd	r25, Z+2	; 0x02
    8e24:	9c 93       	st	X, r25
	unsigned char free_tile_index, userRamTilesCount=0,userRamTilesCount_tmp=0;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=userRamTilesCount;i<free_tile_index;i++){
    8e26:	8f 5f       	subi	r24, 0xFF	; 255
    8e28:	ed cf       	rjmp	.-38     	; 0x8e04 <RestoreBackground+0x4>
			//vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
			*ram_tiles_restore[i].addr=ram_tiles_restore[i].tileIndex;
		}	
	}
    8e2a:	08 95       	ret

00008e2c <ProcessSprites>:
		}

	}
	*/

	void ProcessSprites(){
    8e2c:	2f 92       	push	r2
    8e2e:	3f 92       	push	r3
    8e30:	4f 92       	push	r4
    8e32:	5f 92       	push	r5
    8e34:	6f 92       	push	r6
    8e36:	7f 92       	push	r7
    8e38:	8f 92       	push	r8
    8e3a:	9f 92       	push	r9
    8e3c:	af 92       	push	r10
    8e3e:	bf 92       	push	r11
    8e40:	cf 92       	push	r12
    8e42:	df 92       	push	r13
    8e44:	ef 92       	push	r14
    8e46:	ff 92       	push	r15
    8e48:	0f 93       	push	r16
    8e4a:	1f 93       	push	r17
    8e4c:	cf 93       	push	r28
    8e4e:	df 93       	push	r29
    8e50:	00 d0       	rcall	.+0      	; 0x8e52 <ProcessSprites+0x26>
    8e52:	00 d0       	rcall	.+0      	; 0x8e54 <ProcessSprites+0x28>
    8e54:	cd b7       	in	r28, 0x3d	; 61
    8e56:	de b7       	in	r29, 0x3e	; 62
	
		unsigned char i,bx,by,dx,dy,bt,x,y,tx=1,ty=1,wx,wy;
		unsigned int ramPtr,ssx,ssy;

		if(!spritesOn) return;
    8e58:	80 91 00 05 	lds	r24, 0x0500
    8e5c:	88 23       	and	r24, r24
    8e5e:	09 f4       	brne	.+2      	; 0x8e62 <ProcessSprites+0x36>
    8e60:	e0 c0       	rjmp	.+448    	; 0x9022 <ProcessSprites+0x1f6>

		userRamTilesCount=userRamTilesCount_tmp;
    8e62:	80 91 f2 0c 	lds	r24, 0x0CF2
    8e66:	80 93 f3 0c 	sts	0x0CF3, r24
		free_tile_index=userRamTilesCount;
    8e6a:	80 93 7e 0d 	sts	0x0D7E, r24
    8e6e:	e0 e1       	ldi	r30, 0x10	; 16
    8e70:	ce 2e       	mov	r12, r30
    8e72:	e5 e0       	ldi	r30, 0x05	; 5
    8e74:	de 2e       	mov	r13, r30
	
		for(i=0;i<MAX_SPRITES;i++){
    8e76:	71 2c       	mov	r7, r1
			bx=sprites[i].x;
    8e78:	f6 01       	movw	r30, r12
    8e7a:	20 81       	ld	r18, Z

			if(bx!=(SCREEN_TILES_H*TILE_WIDTH)){
    8e7c:	20 3e       	cpi	r18, 0xE0	; 224
    8e7e:	09 f4       	brne	.+2      	; 0x8e82 <ProcessSprites+0x56>
    8e80:	b1 c0       	rjmp	.+354    	; 0x8fe4 <ProcessSprites+0x1b8>
				//get tile's screen section offsets
				
				#if SCROLLING == 1
					ssx=sprites[i].x+Screen.scrollX;
    8e82:	80 91 b2 0c 	lds	r24, 0x0CB2
    8e86:	90 e0       	ldi	r25, 0x00	; 0
    8e88:	82 0f       	add	r24, r18
    8e8a:	91 1d       	adc	r25, r1
					ssy=sprites[i].y+Screen.scrollY;
    8e8c:	41 81       	ldd	r20, Z+1	; 0x01
    8e8e:	20 91 b3 0c 	lds	r18, 0x0CB3
    8e92:	30 e0       	ldi	r19, 0x00	; 0
    8e94:	24 0f       	add	r18, r20
    8e96:	31 1d       	adc	r19, r1

				tx=1;
				ty=1;

				//get the BG tiles that are overlapped by the sprite
				bx=ssx>>3;
    8e98:	ac 01       	movw	r20, r24
    8e9a:	73 e0       	ldi	r23, 0x03	; 3
    8e9c:	56 95       	lsr	r21
    8e9e:	47 95       	ror	r20
    8ea0:	7a 95       	dec	r23
    8ea2:	e1 f7       	brne	.-8      	; 0x8e9c <ProcessSprites+0x70>
    8ea4:	64 2e       	mov	r6, r20
				dx=ssx&0x7;
    8ea6:	87 70       	andi	r24, 0x07	; 7
				if(dx>0) tx++;
    8ea8:	11 f0       	breq	.+4      	; 0x8eae <ProcessSprites+0x82>
    8eaa:	92 e0       	ldi	r25, 0x02	; 2
    8eac:	01 c0       	rjmp	.+2      	; 0x8eb0 <ProcessSprites+0x84>
   				#else
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
    8eae:	91 e0       	ldi	r25, 0x01	; 1
    8eb0:	99 83       	std	Y+1, r25	; 0x01
				dx=ssx&0x7;
				if(dx>0) tx++;

				//by=ssy>>3;
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
    8eb2:	a9 01       	movw	r20, r18
    8eb4:	63 e0       	ldi	r22, 0x03	; 3
    8eb6:	56 95       	lsr	r21
    8eb8:	47 95       	ror	r20
    8eba:	6a 95       	dec	r22
    8ebc:	e1 f7       	brne	.-8      	; 0x8eb6 <ProcessSprites+0x8a>
    8ebe:	54 2e       	mov	r5, r20
				dy=ssy%TILE_HEIGHT;
    8ec0:	27 70       	andi	r18, 0x07	; 7
				if(dy>0) ty++;			
    8ec2:	19 f0       	breq	.+6      	; 0x8eca <ProcessSprites+0x9e>
    8ec4:	52 e0       	ldi	r21, 0x02	; 2
    8ec6:	35 2e       	mov	r3, r21
    8ec8:	02 c0       	rjmp	.+4      	; 0x8ece <ProcessSprites+0xa2>
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
				ty=1;
    8eca:	33 24       	eor	r3, r3
    8ecc:	33 94       	inc	r3
								bt=free_tile_index;
								free_tile_index++;
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    8ece:	30 e0       	ldi	r19, 0x00	; 0
    8ed0:	32 2f       	mov	r19, r18
    8ed2:	22 27       	eor	r18, r18
    8ed4:	f9 01       	movw	r30, r18
    8ed6:	e8 0f       	add	r30, r24
    8ed8:	f1 1d       	adc	r31, r1
    8eda:	fc 83       	std	Y+4, r31	; 0x04
    8edc:	eb 83       	std	Y+3, r30	; 0x03
    8ede:	e1 2c       	mov	r14, r1
    8ee0:	f1 2c       	mov	r15, r1
    8ee2:	be 2c       	mov	r11, r14
    8ee4:	aa 24       	eor	r10, r10
    8ee6:	26 2c       	mov	r2, r6
    8ee8:	45 2c       	mov	r4, r5
    8eea:	4e 0c       	add	r4, r14
								    wy-=(VRAM_TILES_V*2);
							    }else if(wy>=VRAM_TILES_V){
							    	wy-=VRAM_TILES_V;
							    }
                            #else
                                if(wy>=(Screen.scrollHeight*2)){
    8eec:	84 2c       	mov	r8, r4
    8eee:	91 2c       	mov	r9, r1
    8ef0:	84 2d       	mov	r24, r4
    8ef2:	20 91 b4 0c 	lds	r18, 0x0CB4
    8ef6:	42 2f       	mov	r20, r18
    8ef8:	50 e0       	ldi	r21, 0x00	; 0
    8efa:	44 0f       	add	r20, r20
    8efc:	55 1f       	adc	r21, r21
    8efe:	84 16       	cp	r8, r20
    8f00:	95 06       	cpc	r9, r21
    8f02:	14 f0       	brlt	.+4      	; 0x8f08 <ProcessSprites+0xdc>
								    wy-=(Screen.scrollHeight*2);
    8f04:	22 0f       	add	r18, r18
    8f06:	03 c0       	rjmp	.+6      	; 0x8f0e <ProcessSprites+0xe2>
							    }else if(wy>=Screen.scrollHeight){
    8f08:	42 16       	cp	r4, r18
    8f0a:	10 f0       	brcs	.+4      	; 0x8f10 <ProcessSprites+0xe4>
							    	wy-=Screen.scrollHeight;
    8f0c:	84 2d       	mov	r24, r4
    8f0e:	82 1b       	sub	r24, r18
							    }
                            #endif
							if(wx>=VRAM_TILES_H)wx-=VRAM_TILES_H; //should always be 32
    8f10:	ff e1       	ldi	r31, 0x1F	; 31
    8f12:	f2 15       	cp	r31, r2
    8f14:	18 f4       	brcc	.+6      	; 0x8f1c <ProcessSprites+0xf0>
    8f16:	00 ee       	ldi	r16, 0xE0	; 224
    8f18:	02 0d       	add	r16, r2
    8f1a:	01 c0       	rjmp	.+2      	; 0x8f1e <ProcessSprites+0xf2>
    8f1c:	02 2d       	mov	r16, r2

							#if SCROLLING == 0
								ramPtr=(wy*VRAM_TILES_H)+wx;
							#else

								ramPtr=((wy>>3)*256)+(wx*8)+(wy&7);	
    8f1e:	28 2f       	mov	r18, r24
    8f20:	26 95       	lsr	r18
    8f22:	26 95       	lsr	r18
    8f24:	26 95       	lsr	r18
    8f26:	10 e0       	ldi	r17, 0x00	; 0
    8f28:	40 e2       	ldi	r20, 0x20	; 32
    8f2a:	24 9f       	mul	r18, r20
    8f2c:	00 0d       	add	r16, r0
    8f2e:	11 1d       	adc	r17, r1
    8f30:	11 24       	eor	r1, r1
    8f32:	23 e0       	ldi	r18, 0x03	; 3
    8f34:	00 0f       	add	r16, r16
    8f36:	11 1f       	adc	r17, r17
    8f38:	2a 95       	dec	r18
    8f3a:	e1 f7       	brne	.-8      	; 0x8f34 <ProcessSprites+0x108>
    8f3c:	87 70       	andi	r24, 0x07	; 7
    8f3e:	08 0f       	add	r16, r24
    8f40:	11 1d       	adc	r17, r1

							#endif

							bt=vram[ramPtr];						
    8f42:	00 50       	subi	r16, 0x00	; 0
    8f44:	1f 4f       	sbci	r17, 0xFF	; 255
    8f46:	f8 01       	movw	r30, r16
    8f48:	70 81       	ld	r23, Z

							if( ((bt>=RAM_TILES_COUNT) | (bt<userRamTilesCount)) && (free_tile_index < RAM_TILES_COUNT) ){ //if no ram free ignore tile
    8f4a:	81 e0       	ldi	r24, 0x01	; 1
    8f4c:	7c 31       	cpi	r23, 0x1C	; 28
    8f4e:	08 f4       	brcc	.+2      	; 0x8f52 <ProcessSprites+0x126>
    8f50:	80 e0       	ldi	r24, 0x00	; 0
    8f52:	21 e0       	ldi	r18, 0x01	; 1
    8f54:	30 91 f3 0c 	lds	r19, 0x0CF3
    8f58:	73 17       	cp	r23, r19
    8f5a:	18 f0       	brcs	.+6      	; 0x8f62 <ProcessSprites+0x136>
    8f5c:	20 e0       	ldi	r18, 0x00	; 0
    8f5e:	88 23       	and	r24, r24
    8f60:	51 f1       	breq	.+84     	; 0x8fb6 <ProcessSprites+0x18a>
    8f62:	60 91 7e 0d 	lds	r22, 0x0D7E
    8f66:	6c 31       	cpi	r22, 0x1C	; 28
    8f68:	20 f5       	brcc	.+72     	; 0x8fb2 <ProcessSprites+0x186>
								if( bt>=RAM_TILES_COUNT ){
    8f6a:	88 23       	and	r24, r24
    8f6c:	31 f0       	breq	.+12     	; 0x8f7a <ProcessSprites+0x14e>
									//tile is mapped to flash. Copy it to next free RAM tile.
									CopyFlashTile(bt-RAM_TILES_COUNT,free_tile_index);
    8f6e:	84 ee       	ldi	r24, 0xE4	; 228
    8f70:	87 0f       	add	r24, r23
    8f72:	7a 83       	std	Y+2, r23	; 0x02
    8f74:	0e 94 80 36 	call	0x6d00	; 0x6d00 <CopyFlashTile>
    8f78:	06 c0       	rjmp	.+12     	; 0x8f86 <ProcessSprites+0x15a>
								}else if(bt<userRamTilesCount){
    8f7a:	22 23       	and	r18, r18
    8f7c:	29 f0       	breq	.+10     	; 0x8f88 <ProcessSprites+0x15c>
									//tile is a user ram tile. Copy it to next free RAM tile.
									CopyRamTile(bt,free_tile_index);
    8f7e:	87 2f       	mov	r24, r23
    8f80:	7a 83       	std	Y+2, r23	; 0x02
    8f82:	0e 94 0f 37 	call	0x6e1e	; 0x6e1e <CopyRamTile>
    8f86:	7a 81       	ldd	r23, Y+2	; 0x02
								}
								ram_tiles_restore[free_tile_index].addr=(&vram[ramPtr]);
    8f88:	80 91 7e 0d 	lds	r24, 0x0D7E
    8f8c:	e8 2f       	mov	r30, r24
    8f8e:	f0 e0       	ldi	r31, 0x00	; 0
    8f90:	9f 01       	movw	r18, r30
    8f92:	22 0f       	add	r18, r18
    8f94:	33 1f       	adc	r19, r19
    8f96:	e2 0f       	add	r30, r18
    8f98:	f3 1f       	adc	r31, r19
    8f9a:	e0 5b       	subi	r30, 0xB0	; 176
    8f9c:	f3 4f       	sbci	r31, 0xF3	; 243
    8f9e:	11 83       	std	Z+1, r17	; 0x01
    8fa0:	00 83       	st	Z, r16
								ram_tiles_restore[free_tile_index].tileIndex=bt;
    8fa2:	72 83       	std	Z+2, r23	; 0x02
								vram[ramPtr]=free_tile_index;
    8fa4:	f8 01       	movw	r30, r16
    8fa6:	80 83       	st	Z, r24
								bt=free_tile_index;
								free_tile_index++;
    8fa8:	21 e0       	ldi	r18, 0x01	; 1
    8faa:	28 0f       	add	r18, r24
    8fac:	20 93 7e 0d 	sts	0x0D7E, r18
									CopyRamTile(bt,free_tile_index);
								}
								ram_tiles_restore[free_tile_index].addr=(&vram[ramPtr]);
								ram_tiles_restore[free_tile_index].tileIndex=bt;
								vram[ramPtr]=free_tile_index;
								bt=free_tile_index;
    8fb0:	78 2f       	mov	r23, r24
								free_tile_index++;
							}
				
							if(bt<RAM_TILES_COUNT){				
    8fb2:	7c 31       	cpi	r23, 0x1C	; 28
    8fb4:	38 f4       	brcc	.+14     	; 0x8fc4 <ProcessSprites+0x198>
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    8fb6:	2b 81       	ldd	r18, Y+3	; 0x03
    8fb8:	3c 81       	ldd	r19, Y+4	; 0x04
    8fba:	a5 01       	movw	r20, r10
    8fbc:	67 2f       	mov	r22, r23
    8fbe:	87 2d       	mov	r24, r7
    8fc0:	0e 94 9c 37 	call	0x6f38	; 0x6f38 <BlitSprite>
    8fc4:	ff ef       	ldi	r31, 0xFF	; 255
    8fc6:	af 1a       	sub	r10, r31
    8fc8:	bf 0a       	sbc	r11, r31
    8fca:	23 94       	inc	r2
    8fcc:	82 2d       	mov	r24, r2
    8fce:	86 19       	sub	r24, r6
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){

					for(x=0;x<tx;x++){
    8fd0:	99 81       	ldd	r25, Y+1	; 0x01
    8fd2:	89 17       	cp	r24, r25
    8fd4:	08 f4       	brcc	.+2      	; 0x8fd8 <ProcessSprites+0x1ac>
    8fd6:	8c cf       	rjmp	.-232    	; 0x8ef0 <ProcessSprites+0xc4>
    8fd8:	ef ef       	ldi	r30, 0xFF	; 255
    8fda:	ee 1a       	sub	r14, r30
    8fdc:	fe 0a       	sbc	r15, r30
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){
    8fde:	e3 14       	cp	r14, r3
    8fe0:	08 f4       	brcc	.+2      	; 0x8fe4 <ProcessSprites+0x1b8>
    8fe2:	7f cf       	rjmp	.-258    	; 0x8ee2 <ProcessSprites+0xb6>
		if(!spritesOn) return;

		userRamTilesCount=userRamTilesCount_tmp;
		free_tile_index=userRamTilesCount;
	
		for(i=0;i<MAX_SPRITES;i++){
    8fe4:	73 94       	inc	r7
    8fe6:	f4 e0       	ldi	r31, 0x04	; 4
    8fe8:	cf 0e       	add	r12, r31
    8fea:	d1 1c       	adc	r13, r1
    8fec:	40 e1       	ldi	r20, 0x10	; 16
    8fee:	74 12       	cpse	r7, r20
    8ff0:	43 cf       	rjmp	.-378    	; 0x8e78 <ProcessSprites+0x4c>


		//restore BG tiles
		RestoreBackground();

	}
    8ff2:	0f 90       	pop	r0
    8ff4:	0f 90       	pop	r0
    8ff6:	0f 90       	pop	r0
    8ff8:	0f 90       	pop	r0
    8ffa:	df 91       	pop	r29
    8ffc:	cf 91       	pop	r28
    8ffe:	1f 91       	pop	r17
    9000:	0f 91       	pop	r16
    9002:	ff 90       	pop	r15
    9004:	ef 90       	pop	r14
    9006:	df 90       	pop	r13
    9008:	cf 90       	pop	r12
    900a:	bf 90       	pop	r11
    900c:	af 90       	pop	r10
    900e:	9f 90       	pop	r9
    9010:	8f 90       	pop	r8
    9012:	7f 90       	pop	r7
    9014:	6f 90       	pop	r6
    9016:	5f 90       	pop	r5
    9018:	4f 90       	pop	r4
    901a:	3f 90       	pop	r3
    901c:	2f 90       	pop	r2
			}//	if(bx<(SCREEN_TILES_H*TILE_WIDTH))		
		}


		//restore BG tiles
		RestoreBackground();
    901e:	0c 94 00 47 	jmp	0x8e00	; 0x8e00 <RestoreBackground>

	}
    9022:	0f 90       	pop	r0
    9024:	0f 90       	pop	r0
    9026:	0f 90       	pop	r0
    9028:	0f 90       	pop	r0
    902a:	df 91       	pop	r29
    902c:	cf 91       	pop	r28
    902e:	1f 91       	pop	r17
    9030:	0f 91       	pop	r16
    9032:	ff 90       	pop	r15
    9034:	ef 90       	pop	r14
    9036:	df 90       	pop	r13
    9038:	cf 90       	pop	r12
    903a:	bf 90       	pop	r11
    903c:	af 90       	pop	r10
    903e:	9f 90       	pop	r9
    9040:	8f 90       	pop	r8
    9042:	7f 90       	pop	r7
    9044:	6f 90       	pop	r6
    9046:	5f 90       	pop	r5
    9048:	4f 90       	pop	r4
    904a:	3f 90       	pop	r3
    904c:	2f 90       	pop	r2
    904e:	08 95       	ret

00009050 <Scroll>:

	#if SCROLLING == 1
		//Scroll the screen by the relative amount specified (+/-)
		//This function handles screen wrapping on the Y axis if VRAM_TILES_V is less than 32
		void Scroll(char dx,char dy){
		Screen.scrollY+=dy;
    9050:	90 91 b3 0c 	lds	r25, 0x0CB3
    9054:	96 0f       	add	r25, r22
    9056:	90 93 b3 0c 	sts	0x0CB3, r25
		Screen.scrollX+=dx;
    905a:	20 91 b2 0c 	lds	r18, 0x0CB2
    905e:	82 0f       	add	r24, r18
    9060:	80 93 b2 0c 	sts	0x0CB2, r24

		if(Screen.scrollHeight<32){
    9064:	80 91 b4 0c 	lds	r24, 0x0CB4
    9068:	80 32       	cpi	r24, 0x20	; 32
    906a:	b0 f4       	brcc	.+44     	; 0x9098 <Scroll+0x48>

			if(Screen.scrollY>=(Screen.scrollHeight*TILE_HEIGHT)){
    906c:	29 2f       	mov	r18, r25
    906e:	30 e0       	ldi	r19, 0x00	; 0
    9070:	78 e0       	ldi	r23, 0x08	; 8
    9072:	87 9f       	mul	r24, r23
    9074:	a0 01       	movw	r20, r0
    9076:	11 24       	eor	r1, r1
    9078:	24 17       	cp	r18, r20
    907a:	35 07       	cpc	r19, r21
    907c:	6c f0       	brlt	.+26     	; 0x9098 <Scroll+0x48>
				if(dy>=0){	
    907e:	67 fd       	sbrc	r22, 7
    9080:	05 c0       	rjmp	.+10     	; 0x908c <Scroll+0x3c>
					Screen.scrollY=(Screen.scrollY-(Screen.scrollHeight*TILE_HEIGHT));
    9082:	28 ef       	ldi	r18, 0xF8	; 248
    9084:	82 9f       	mul	r24, r18
    9086:	90 0d       	add	r25, r0
    9088:	11 24       	eor	r1, r1
    908a:	04 c0       	rjmp	.+8      	; 0x9094 <Scroll+0x44>
				}else{
					Screen.scrollY=((Screen.scrollHeight*TILE_HEIGHT)-1)-(0xff-Screen.scrollY);
    908c:	78 e0       	ldi	r23, 0x08	; 8
    908e:	87 9f       	mul	r24, r23
    9090:	90 0d       	add	r25, r0
    9092:	11 24       	eor	r1, r1
    9094:	90 93 b3 0c 	sts	0x0CB3, r25
    9098:	08 95       	ret

0000909a <InitializeVideoMode>:
		#endif	
	}


	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){
    909a:	e0 e1       	ldi	r30, 0x10	; 16
    909c:	f5 e0       	ldi	r31, 0x05	; 5

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
			sprites[i].x=(SCREEN_TILES_H*TILE_WIDTH);		
    909e:	80 ee       	ldi	r24, 0xE0	; 224
    90a0:	80 83       	st	Z, r24
    90a2:	34 96       	adiw	r30, 0x04	; 4

	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
    90a4:	95 e0       	ldi	r25, 0x05	; 5
    90a6:	e0 35       	cpi	r30, 0x50	; 80
    90a8:	f9 07       	cpc	r31, r25
    90aa:	d1 f7       	brne	.-12     	; 0x90a0 <InitializeVideoMode+0x6>
		
		#if SCROLLING == 1
		//	for(int i=0;i<(OVERLAY_LINES*VRAM_TILES_H);i++){
		//		overlay_vram[i]=RAM_TILES_COUNT;
		//	}
			Screen.scrollHeight=VRAM_TILES_V;
    90ac:	80 e2       	ldi	r24, 0x20	; 32
    90ae:	80 93 b4 0c 	sts	0x0CB4, r24
			Screen.overlayHeight=0;
    90b2:	10 92 af 0c 	sts	0x0CAF, r1
    90b6:	08 95       	ret

000090b8 <DrawMap>:



//Draws a map of tile at the specified position
#if VRAM_ADDR_SIZE == 1
	void DrawMap(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
    90b8:	2f 92       	push	r2
    90ba:	3f 92       	push	r3
    90bc:	4f 92       	push	r4
    90be:	5f 92       	push	r5
    90c0:	6f 92       	push	r6
    90c2:	7f 92       	push	r7
    90c4:	8f 92       	push	r8
    90c6:	9f 92       	push	r9
    90c8:	af 92       	push	r10
    90ca:	bf 92       	push	r11
    90cc:	cf 92       	push	r12
    90ce:	df 92       	push	r13
    90d0:	ef 92       	push	r14
    90d2:	ff 92       	push	r15
    90d4:	0f 93       	push	r16
    90d6:	1f 93       	push	r17
    90d8:	cf 93       	push	r28
    90da:	df 93       	push	r29
    90dc:	00 d0       	rcall	.+0      	; 0x90de <DrawMap+0x26>
    90de:	1f 92       	push	r1
    90e0:	cd b7       	in	r28, 0x3d	; 61
    90e2:	de b7       	in	r29, 0x3e	; 62
    90e4:	28 2f       	mov	r18, r24
    90e6:	3a 01       	movw	r6, r20
		//unsigned char i;
		u8 mapWidth=pgm_read_byte(&(map[0]));
    90e8:	fa 01       	movw	r30, r20
    90ea:	24 90       	lpm	r2, Z
		u8 mapHeight=pgm_read_byte(&(map[1]));
    90ec:	31 96       	adiw	r30, 0x01	; 1
    90ee:	34 90       	lpm	r3, Z
    90f0:	42 2c       	mov	r4, r2
    90f2:	51 2c       	mov	r5, r1
		
		for(u8 dy=0;dy<mapHeight;dy++){
    90f4:	e1 2c       	mov	r14, r1
    90f6:	f1 2c       	mov	r15, r1
    90f8:	00 e0       	ldi	r16, 0x00	; 0
    90fa:	10 e0       	ldi	r17, 0x00	; 0
    90fc:	c6 2e       	mov	r12, r22
    90fe:	d1 2c       	mov	r13, r1
    9100:	03 15       	cp	r16, r3
    9102:	68 f5       	brcc	.+90     	; 0x915e <DrawMap+0xa6>
    9104:	1b 82       	std	Y+3, r1	; 0x03
    9106:	1a 82       	std	Y+2, r1	; 0x02
    9108:	57 01       	movw	r10, r14
    910a:	92 e0       	ldi	r25, 0x02	; 2
    910c:	a9 0e       	add	r10, r25
    910e:	b1 1c       	adc	r11, r1
    9110:	48 01       	movw	r8, r16
    9112:	8c 0c       	add	r8, r12
    9114:	9d 1c       	adc	r9, r13
			for(u8 dx=0;dx<mapWidth;dx++){			
    9116:	ea 81       	ldd	r30, Y+2	; 0x02
    9118:	e2 15       	cp	r30, r2
    911a:	e0 f4       	brcc	.+56     	; 0x9154 <DrawMap+0x9c>
    911c:	ea 81       	ldd	r30, Y+2	; 0x02
    911e:	fb 81       	ldd	r31, Y+3	; 0x03
    9120:	ea 0d       	add	r30, r10
    9122:	fb 1d       	adc	r31, r11
    9124:	e6 0d       	add	r30, r6
    9126:	f7 1d       	adc	r31, r7
				SetTile(x+dx,(y+dy)%Screen.scrollHeight,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
    9128:	e4 91       	lpm	r30, Z
    912a:	f0 e0       	ldi	r31, 0x00	; 0
    912c:	60 91 b4 0c 	lds	r22, 0x0CB4
    9130:	70 e0       	ldi	r23, 0x00	; 0
    9132:	c4 01       	movw	r24, r8
    9134:	0e 94 b5 67 	call	0xcf6a	; 0xcf6a <__divmodhi4>
    9138:	af 01       	movw	r20, r30
    913a:	68 2f       	mov	r22, r24
    913c:	8a 81       	ldd	r24, Y+2	; 0x02
    913e:	82 0f       	add	r24, r18
    9140:	29 83       	std	Y+1, r18	; 0x01
    9142:	0e 94 cf 39 	call	0x739e	; 0x739e <SetTile>
    9146:	8a 81       	ldd	r24, Y+2	; 0x02
    9148:	9b 81       	ldd	r25, Y+3	; 0x03
    914a:	01 96       	adiw	r24, 0x01	; 1
    914c:	9b 83       	std	Y+3, r25	; 0x03
    914e:	8a 83       	std	Y+2, r24	; 0x02
    9150:	29 81       	ldd	r18, Y+1	; 0x01
    9152:	e1 cf       	rjmp	.-62     	; 0x9116 <DrawMap+0x5e>
    9154:	0f 5f       	subi	r16, 0xFF	; 255
    9156:	1f 4f       	sbci	r17, 0xFF	; 255
    9158:	e4 0c       	add	r14, r4
    915a:	f5 1c       	adc	r15, r5
    915c:	d1 cf       	rjmp	.-94     	; 0x9100 <DrawMap+0x48>
			}
		}

	}
    915e:	0f 90       	pop	r0
    9160:	0f 90       	pop	r0
    9162:	0f 90       	pop	r0
    9164:	df 91       	pop	r29
    9166:	cf 91       	pop	r28
    9168:	1f 91       	pop	r17
    916a:	0f 91       	pop	r16
    916c:	ff 90       	pop	r15
    916e:	ef 90       	pop	r14
    9170:	df 90       	pop	r13
    9172:	cf 90       	pop	r12
    9174:	bf 90       	pop	r11
    9176:	af 90       	pop	r10
    9178:	9f 90       	pop	r9
    917a:	8f 90       	pop	r8
    917c:	7f 90       	pop	r7
    917e:	6f 90       	pop	r6
    9180:	5f 90       	pop	r5
    9182:	4f 90       	pop	r4
    9184:	3f 90       	pop	r3
    9186:	2f 90       	pop	r2
    9188:	08 95       	ret

0000918a <WaitVsync>:
		}
	}
}

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
    918a:	0f 93       	push	r16
    918c:	1f 93       	push	r17
    918e:	cf 93       	push	r28
    9190:	df 93       	push	r29
    9192:	8c 01       	movw	r16, r24
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    9194:	c0 e0       	ldi	r28, 0x00	; 0
    9196:	d0 e0       	ldi	r29, 0x00	; 0
    9198:	c0 17       	cp	r28, r16
    919a:	d1 07       	cpc	r29, r17
    919c:	44 f4       	brge	.+16     	; 0x91ae <WaitVsync+0x24>
		while(!GetVsyncFlag());
    919e:	0e 94 e5 39 	call	0x73ca	; 0x73ca <GetVsyncFlag>
    91a2:	88 23       	and	r24, r24
    91a4:	e1 f3       	breq	.-8      	; 0x919e <WaitVsync+0x14>
		ClearVsyncFlag();		
    91a6:	0e 94 e9 39 	call	0x73d2	; 0x73d2 <ClearVsyncFlag>

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    91aa:	21 96       	adiw	r28, 0x01	; 1
    91ac:	f5 cf       	rjmp	.-22     	; 0x9198 <WaitVsync+0xe>
		while(!GetVsyncFlag());
		ClearVsyncFlag();		
	}
}
    91ae:	df 91       	pop	r29
    91b0:	cf 91       	pop	r28
    91b2:	1f 91       	pop	r17
    91b4:	0f 91       	pop	r16
    91b6:	08 95       	ret

000091b8 <DisplayLogo>:
	void DisplayLogo(){
	
		#if INTRO_LOGO !=0
			#define LOGO_X_POS 12
			
			InitMusicPlayer(logoInitPatches);
    91b8:	83 e2       	ldi	r24, 0x23	; 35
    91ba:	99 e0       	ldi	r25, 0x09	; 9
    91bc:	0e 94 97 3c 	call	0x792e	; 0x792e <InitMusicPlayer>
			SetTileTable(logo_tileset);
    91c0:	83 e2       	ldi	r24, 0x23	; 35
    91c2:	91 e0       	ldi	r25, 0x01	; 1
    91c4:	0e 94 e0 39 	call	0x73c0	; 0x73c0 <SetTileTable>
			
			//draw logo
			ClearVram();
    91c8:	0e 94 c5 39 	call	0x738a	; 0x738a <ClearVram>
			WaitVsync(15);		
    91cc:	8f e0       	ldi	r24, 0x0F	; 15
    91ce:	90 e0       	ldi	r25, 0x00	; 0
    91d0:	0e 94 c5 48 	call	0x918a	; 0x918a <WaitVsync>


			#if INTRO_LOGO == 1 
				TriggerFx(0,0xff,true);
    91d4:	41 e0       	ldi	r20, 0x01	; 1
    91d6:	6f ef       	ldi	r22, 0xFF	; 255
    91d8:	80 e0       	ldi	r24, 0x00	; 0
    91da:	0e 94 a4 3d 	call	0x7b48	; 0x7b48 <TriggerFx>
			#endif

			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo);
    91de:	4d e0       	ldi	r20, 0x0D	; 13
    91e0:	51 e0       	ldi	r21, 0x01	; 1
    91e2:	6c e0       	ldi	r22, 0x0C	; 12
    91e4:	8c e0       	ldi	r24, 0x0C	; 12
    91e6:	0e 94 5c 48 	call	0x90b8	; 0x90b8 <DrawMap>
			WaitVsync(3);
    91ea:	83 e0       	ldi	r24, 0x03	; 3
    91ec:	90 e0       	ldi	r25, 0x00	; 0
    91ee:	0e 94 c5 48 	call	0x918a	; 0x918a <WaitVsync>
			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo2);
    91f2:	4c ef       	ldi	r20, 0xFC	; 252
    91f4:	50 e0       	ldi	r21, 0x00	; 0
    91f6:	6c e0       	ldi	r22, 0x0C	; 12
    91f8:	8c e0       	ldi	r24, 0x0C	; 12
    91fa:	0e 94 5c 48 	call	0x90b8	; 0x90b8 <DrawMap>
			WaitVsync(2);
    91fe:	82 e0       	ldi	r24, 0x02	; 2
    9200:	90 e0       	ldi	r25, 0x00	; 0
    9202:	0e 94 c5 48 	call	0x918a	; 0x918a <WaitVsync>
			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo);
    9206:	4d e0       	ldi	r20, 0x0D	; 13
    9208:	51 e0       	ldi	r21, 0x01	; 1
    920a:	6c e0       	ldi	r22, 0x0C	; 12
    920c:	8c e0       	ldi	r24, 0x0C	; 12
    920e:	0e 94 5c 48 	call	0x90b8	; 0x90b8 <DrawMap>
			#if INTRO_LOGO == 2
				SetMasterVolume(0xc0);
				TriggerNote(3,0,16,0xff);
			#endif 
		
			WaitVsync(65);
    9212:	81 e4       	ldi	r24, 0x41	; 65
    9214:	90 e0       	ldi	r25, 0x00	; 0
    9216:	0e 94 c5 48 	call	0x918a	; 0x918a <WaitVsync>
			ClearVram();
    921a:	0e 94 c5 39 	call	0x738a	; 0x738a <ClearVram>
			WaitVsync(20);
    921e:	84 e1       	ldi	r24, 0x14	; 20
    9220:	90 e0       	ldi	r25, 0x00	; 0
    9222:	0c 94 c5 48 	jmp	0x918a	; 0x918a <WaitVsync>

00009226 <doFade>:
char fadeDir;
bool volatile fadeActive;


void doFade(unsigned char speed,bool blocking){
	fadeSpeed=speed;
    9226:	80 93 7c 0d 	sts	0x0D7C, r24
	currFadeFrame=0;
    922a:	10 92 80 0d 	sts	0x0D80, r1
	fadeActive=true;
    922e:	81 e0       	ldi	r24, 0x01	; 1
    9230:	80 93 7f 0d 	sts	0x0D7F, r24
		
	if(blocking){
    9234:	66 23       	and	r22, r22
    9236:	21 f0       	breq	.+8      	; 0x9240 <doFade+0x1a>
		while(fadeActive==true);
    9238:	80 91 7f 0d 	lds	r24, 0x0D7F
    923c:	81 11       	cpse	r24, r1
    923e:	fc cf       	rjmp	.-8      	; 0x9238 <doFade+0x12>
    9240:	08 95       	ret

00009242 <FadeIn>:
	
	
}

void FadeIn(unsigned char speed,bool blocking){
	if(speed==0){
    9242:	81 11       	cpse	r24, r1
    9244:	03 c0       	rjmp	.+6      	; 0x924c <FadeIn+0xa>
		DDRC=0xff;
    9246:	8f ef       	ldi	r24, 0xFF	; 255
    9248:	87 b9       	out	0x07, r24	; 7
		return;
    924a:	08 95       	ret
	}
	fadeStep=1;
    924c:	91 e0       	ldi	r25, 0x01	; 1
    924e:	90 93 81 0d 	sts	0x0D81, r25
	fadeDir=1;
    9252:	90 93 7d 0d 	sts	0x0D7D, r25
	doFade(speed,blocking);
    9256:	0c 94 13 49 	jmp	0x9226	; 0x9226 <doFade>

0000925a <FadeOut>:
}

void FadeOut(unsigned char speed,bool blocking){
	if(speed==0){
    925a:	81 11       	cpse	r24, r1
    925c:	02 c0       	rjmp	.+4      	; 0x9262 <FadeOut+0x8>
		DDRC=0;
    925e:	17 b8       	out	0x07, r1	; 7
		return;
    9260:	08 95       	ret
	}
	
	fadeStep=FADER_STEPS;
    9262:	9c e0       	ldi	r25, 0x0C	; 12
    9264:	90 93 81 0d 	sts	0x0D81, r25
	fadeDir=-1;
    9268:	9f ef       	ldi	r25, 0xFF	; 255
    926a:	90 93 7d 0d 	sts	0x0D7D, r25
	doFade(speed,blocking);
    926e:	0c 94 13 49 	jmp	0x9226	; 0x9226 <doFade>

00009272 <ProcessFading>:
}


//called by the kernel at each field end
void ProcessFading(){
	if(fadeActive==true){
    9272:	80 91 7f 0d 	lds	r24, 0x0D7F
    9276:	88 23       	and	r24, r24
    9278:	01 f1       	breq	.+64     	; 0x92ba <ProcessFading+0x48>
		if(currFadeFrame==0){
    927a:	80 91 80 0d 	lds	r24, 0x0D80
    927e:	81 11       	cpse	r24, r1
    9280:	19 c0       	rjmp	.+50     	; 0x92b4 <ProcessFading+0x42>
			currFadeFrame=fadeSpeed;
    9282:	80 91 7c 0d 	lds	r24, 0x0D7C
    9286:	80 93 80 0d 	sts	0x0D80, r24
			DDRC = pgm_read_byte(&(fader[fadeStep-1]));
    928a:	e0 91 81 0d 	lds	r30, 0x0D81
    928e:	f0 e0       	ldi	r31, 0x00	; 0
    9290:	e1 51       	subi	r30, 0x11	; 17
    9292:	ff 4f       	sbci	r31, 0xFF	; 255
    9294:	e4 91       	lpm	r30, Z
    9296:	e7 b9       	out	0x07, r30	; 7
			fadeStep+=fadeDir;
    9298:	90 91 7d 0d 	lds	r25, 0x0D7D
    929c:	80 91 81 0d 	lds	r24, 0x0D81
    92a0:	89 0f       	add	r24, r25
    92a2:	80 93 81 0d 	sts	0x0D81, r24
			if(fadeStep==0 || fadeStep==(FADER_STEPS+1)){
    92a6:	88 23       	and	r24, r24
    92a8:	11 f0       	breq	.+4      	; 0x92ae <ProcessFading+0x3c>
    92aa:	8d 30       	cpi	r24, 0x0D	; 13
    92ac:	31 f4       	brne	.+12     	; 0x92ba <ProcessFading+0x48>
				fadeActive=false;
    92ae:	10 92 7f 0d 	sts	0x0D7F, r1
    92b2:	08 95       	ret
			}
		}else{
			currFadeFrame--;
    92b4:	81 50       	subi	r24, 0x01	; 1
    92b6:	80 93 80 0d 	sts	0x0D80, r24
    92ba:	08 95       	ret

000092bc <VideoModeVsync>:
	}

	//Callback invoked during hsync
	void VideoModeVsync(){
		
		ProcessFading();
    92bc:	0e 94 39 49 	call	0x9272	; 0x9272 <ProcessFading>
		ProcessSprites();
    92c0:	0c 94 16 47 	jmp	0x8e2c	; 0x8e2c <ProcessSprites>

000092c4 <LBGetNextFrame>:
	u8 reversing;
	char** anims;
} Animation;

char* LBGetNextFrame(Animation* anim)
{
    92c4:	fc 01       	movw	r30, r24
	anim->looped = 0;
    92c6:	14 82       	std	Z+4, r1	; 0x04
	anim->frame_count += 1;
    92c8:	93 81       	ldd	r25, Z+3	; 0x03
    92ca:	9f 5f       	subi	r25, 0xFF	; 255
    92cc:	93 83       	std	Z+3, r25	; 0x03
	if (anim->frame_count < anim->frames_per_anim)
    92ce:	42 81       	ldd	r20, Z+2	; 0x02
    92d0:	80 81       	ld	r24, Z
    92d2:	26 81       	ldd	r18, Z+6	; 0x06
    92d4:	37 81       	ldd	r19, Z+7	; 0x07
    92d6:	94 17       	cp	r25, r20
    92d8:	30 f4       	brcc	.+12     	; 0x92e6 <LBGetNextFrame+0x22>
	{
		return anim->anims[anim->current_anim];
    92da:	f9 01       	movw	r30, r18
    92dc:	e8 0f       	add	r30, r24
    92de:	f1 1d       	adc	r31, r1
    92e0:	e8 0f       	add	r30, r24
    92e2:	f1 1d       	adc	r31, r1
    92e4:	12 c0       	rjmp	.+36     	; 0x930a <LBGetNextFrame+0x46>
	}
	anim->frame_count = 0;
    92e6:	13 82       	std	Z+3, r1	; 0x03
	anim->current_anim = (anim->current_anim + 1) % anim->anim_count;
    92e8:	90 e0       	ldi	r25, 0x00	; 0
    92ea:	01 96       	adiw	r24, 0x01	; 1
    92ec:	61 81       	ldd	r22, Z+1	; 0x01
    92ee:	70 e0       	ldi	r23, 0x00	; 0
    92f0:	0e 94 b5 67 	call	0xcf6a	; 0xcf6a <__divmodhi4>
    92f4:	80 83       	st	Z, r24
	if (anim->current_anim == 0) anim->looped = 1;
    92f6:	81 11       	cpse	r24, r1
    92f8:	02 c0       	rjmp	.+4      	; 0x92fe <LBGetNextFrame+0x3a>
    92fa:	41 e0       	ldi	r20, 0x01	; 1
    92fc:	44 83       	std	Z+4, r20	; 0x04
    92fe:	99 27       	eor	r25, r25
	return anim->anims[anim->current_anim];
    9300:	88 0f       	add	r24, r24
    9302:	99 1f       	adc	r25, r25
    9304:	f9 01       	movw	r30, r18
    9306:	e8 0f       	add	r30, r24
    9308:	f9 1f       	adc	r31, r25
    930a:	80 81       	ld	r24, Z
    930c:	91 81       	ldd	r25, Z+1	; 0x01
}
    930e:	08 95       	ret

00009310 <LBGetJoyPadState>:

void LBGetJoyPadState(JoyPadState* p, unsigned char index)
/*
 * Get the current joy pad button state for index controller
 */
{
    9310:	0f 93       	push	r16
    9312:	1f 93       	push	r17
    9314:	cf 93       	push	r28
    9316:	df 93       	push	r29
    9318:	1f 92       	push	r1
    931a:	cd b7       	in	r28, 0x3d	; 61
    931c:	de b7       	in	r29, 0x3e	; 62
    931e:	8c 01       	movw	r16, r24
	static unsigned int p_prev[2];

	p->held = ReadJoypad(index);
    9320:	86 2f       	mov	r24, r22
    9322:	69 83       	std	Y+1, r22	; 0x01
    9324:	0e 94 ef 39 	call	0x73de	; 0x73de <ReadJoypad>
    9328:	d8 01       	movw	r26, r16
    932a:	15 96       	adiw	r26, 0x05	; 5
    932c:	9c 93       	st	X, r25
    932e:	8e 93       	st	-X, r24
    9330:	14 97       	sbiw	r26, 0x04	; 4
    9332:	69 81       	ldd	r22, Y+1	; 0x01
    9334:	e6 2f       	mov	r30, r22
    9336:	f0 e0       	ldi	r31, 0x00	; 0

	// Count held cycles
	if (p->held == 0 || p->held != p_prev[index])
    9338:	00 97       	sbiw	r24, 0x00	; 0
    933a:	51 f0       	breq	.+20     	; 0x9350 <LBGetJoyPadState+0x40>
    933c:	df 01       	movw	r26, r30
    933e:	aa 0f       	add	r26, r26
    9340:	bb 1f       	adc	r27, r27
    9342:	ac 50       	subi	r26, 0x0C	; 12
    9344:	b3 4f       	sbci	r27, 0xF3	; 243
    9346:	2d 91       	ld	r18, X+
    9348:	3c 91       	ld	r19, X
    934a:	82 17       	cp	r24, r18
    934c:	93 07       	cpc	r25, r19
    934e:	21 f0       	breq	.+8      	; 0x9358 <LBGetJoyPadState+0x48>
	    p->held_cycles = 0;
    9350:	d8 01       	movw	r26, r16
    9352:	16 96       	adiw	r26, 0x06	; 6
    9354:	1c 92       	st	X, r1
    9356:	07 c0       	rjmp	.+14     	; 0x9366 <LBGetJoyPadState+0x56>
	else
	    p->held_cycles += 1;
    9358:	d8 01       	movw	r26, r16
    935a:	16 96       	adiw	r26, 0x06	; 6
    935c:	2c 91       	ld	r18, X
    935e:	16 97       	sbiw	r26, 0x06	; 6
    9360:	2f 5f       	subi	r18, 0xFF	; 255
    9362:	16 96       	adiw	r26, 0x06	; 6
    9364:	2c 93       	st	X, r18

	p->pressed = p->held & (p->held ^ p_prev[index]);
    9366:	ee 0f       	add	r30, r30
    9368:	ff 1f       	adc	r31, r31
    936a:	ec 50       	subi	r30, 0x0C	; 12
    936c:	f3 4f       	sbci	r31, 0xF3	; 243
    936e:	20 81       	ld	r18, Z
    9370:	31 81       	ldd	r19, Z+1	; 0x01
    9372:	a9 01       	movw	r20, r18
    9374:	40 95       	com	r20
    9376:	50 95       	com	r21
    9378:	48 23       	and	r20, r24
    937a:	59 23       	and	r21, r25
    937c:	d8 01       	movw	r26, r16
    937e:	11 96       	adiw	r26, 0x01	; 1
    9380:	5c 93       	st	X, r21
    9382:	4e 93       	st	-X, r20
	p->released = p_prev[index] & (p->held ^ p_prev[index]);
    9384:	ac 01       	movw	r20, r24
    9386:	40 95       	com	r20
    9388:	50 95       	com	r21
    938a:	24 23       	and	r18, r20
    938c:	35 23       	and	r19, r21
    938e:	13 96       	adiw	r26, 0x03	; 3
    9390:	3c 93       	st	X, r19
    9392:	2e 93       	st	-X, r18
    9394:	12 97       	sbiw	r26, 0x02	; 2
	p_prev[index] = p->held;
    9396:	91 83       	std	Z+1, r25	; 0x01
    9398:	80 83       	st	Z, r24
}
    939a:	0f 90       	pop	r0
    939c:	df 91       	pop	r29
    939e:	cf 91       	pop	r28
    93a0:	1f 91       	pop	r17
    93a2:	0f 91       	pop	r16
    93a4:	08 95       	ret

000093a6 <LBPrintChar>:
	font_tiles_map = tiles_map;
}

void LBPrintChar(u8 x, u8 y, u8 code)
{
	if (code >= 48 && code <= 57)
    93a6:	90 ed       	ldi	r25, 0xD0	; 208
    93a8:	94 0f       	add	r25, r20
    93aa:	e0 91 82 0d 	lds	r30, 0x0D82
    93ae:	f0 91 83 0d 	lds	r31, 0x0D83
    93b2:	9a 30       	cpi	r25, 0x0A	; 10
    93b4:	38 f4       	brcc	.+14     	; 0x93c4 <LBPrintChar+0x1e>
	{
		SetTile(x, y, pgm_read_byte(&font_tiles_map[3+code-48]));
    93b6:	24 2f       	mov	r18, r20
    93b8:	30 e0       	ldi	r19, 0x00	; 0
    93ba:	2d 52       	subi	r18, 0x2D	; 45
    93bc:	31 09       	sbc	r19, r1
    93be:	e2 0f       	add	r30, r18
    93c0:	f3 1f       	adc	r31, r19
    93c2:	0c c0       	rjmp	.+24     	; 0x93dc <LBPrintChar+0x36>
	}
	else if (code >= 65 && code <= 90)
    93c4:	9f eb       	ldi	r25, 0xBF	; 191
    93c6:	94 0f       	add	r25, r20
    93c8:	9a 31       	cpi	r25, 0x1A	; 26
    93ca:	38 f4       	brcc	.+14     	; 0x93da <LBPrintChar+0x34>
	{
		SetTile(x, y, pgm_read_byte(&font_tiles_map[13+code-65]));
    93cc:	50 e0       	ldi	r21, 0x00	; 0
    93ce:	44 53       	subi	r20, 0x34	; 52
    93d0:	51 09       	sbc	r21, r1
    93d2:	e4 0f       	add	r30, r20
    93d4:	f5 1f       	adc	r31, r21
    93d6:	44 91       	lpm	r20, Z
    93d8:	03 c0       	rjmp	.+6      	; 0x93e0 <LBPrintChar+0x3a>
	}
	else
	{
		SetTile(x, y, pgm_read_byte(&font_tiles_map[2]));
    93da:	32 96       	adiw	r30, 0x02	; 2
    93dc:	e4 91       	lpm	r30, Z
    93de:	4e 2f       	mov	r20, r30
    93e0:	50 e0       	ldi	r21, 0x00	; 0
    93e2:	0c 94 cf 39 	jmp	0x739e	; 0x739e <SetTile>

000093e6 <LBPrint>:
	}
}

void LBPrint(u8 x, u8 y, char* value)
{
    93e6:	ff 92       	push	r15
    93e8:	0f 93       	push	r16
    93ea:	1f 93       	push	r17
    93ec:	cf 93       	push	r28
    93ee:	df 93       	push	r29
    93f0:	d8 2f       	mov	r29, r24
    93f2:	f6 2e       	mov	r15, r22
    93f4:	8a 01       	movw	r16, r20
	u8 i = 0;
    93f6:	c0 e0       	ldi	r28, 0x00	; 0
    93f8:	8c 2f       	mov	r24, r28
    93fa:	8d 0f       	add	r24, r29
	u8 code = 0;
	while ((code = pgm_read_byte(&value[i])))
    93fc:	f8 01       	movw	r30, r16
    93fe:	ec 0f       	add	r30, r28
    9400:	f1 1d       	adc	r31, r1
    9402:	44 91       	lpm	r20, Z
    9404:	44 23       	and	r20, r20
    9406:	29 f0       	breq	.+10     	; 0x9412 <LBPrint+0x2c>
	{
		LBPrintChar(x++, y, code);
    9408:	6f 2d       	mov	r22, r15
    940a:	0e 94 d3 49 	call	0x93a6	; 0x93a6 <LBPrintChar>
		i++;
    940e:	cf 5f       	subi	r28, 0xFF	; 255
    9410:	f3 cf       	rjmp	.-26     	; 0x93f8 <LBPrint+0x12>
	}
}
    9412:	df 91       	pop	r29
    9414:	cf 91       	pop	r28
    9416:	1f 91       	pop	r17
    9418:	0f 91       	pop	r16
    941a:	ff 90       	pop	r15
    941c:	08 95       	ret

0000941e <LBPrintByte>:

void LBPrintByte(u8 x, u8 y, u8 value, char pad)
{
    941e:	df 92       	push	r13
    9420:	ef 92       	push	r14
    9422:	ff 92       	push	r15
    9424:	0f 93       	push	r16
    9426:	1f 93       	push	r17
    9428:	cf 93       	push	r28
    942a:	df 93       	push	r29
    942c:	1f 92       	push	r1
    942e:	cd b7       	in	r28, 0x3d	; 61
    9430:	de b7       	in	r29, 0x3e	; 62
    9432:	38 2f       	mov	r19, r24
    9434:	06 2f       	mov	r16, r22
    9436:	84 2f       	mov	r24, r20
    9438:	9d ef       	ldi	r25, 0xFD	; 253
    943a:	e9 2e       	mov	r14, r25
    943c:	e3 0e       	add	r14, r19
	for (u8 i = 0; i < 3; i++)
	{
		LBPrintChar(x--, y, value % 10 + 48);
    943e:	4a e0       	ldi	r20, 0x0A	; 10
    9440:	f4 2e       	mov	r15, r20
    9442:	1f ef       	ldi	r17, 0xFF	; 255
    9444:	13 0f       	add	r17, r19
    9446:	6f 2d       	mov	r22, r15
    9448:	0e 94 87 67 	call	0xcf0e	; 0xcf0e <__udivmodqi4>
    944c:	d8 2e       	mov	r13, r24
    944e:	40 e3       	ldi	r20, 0x30	; 48
    9450:	49 0f       	add	r20, r25
    9452:	60 2f       	mov	r22, r16
    9454:	83 2f       	mov	r24, r19
    9456:	29 83       	std	Y+1, r18	; 0x01
    9458:	0e 94 d3 49 	call	0x93a6	; 0x93a6 <LBPrintChar>
		value /= 10;
    945c:	8d 2d       	mov	r24, r13
		if (!pad && value == 0) break;
    945e:	29 81       	ldd	r18, Y+1	; 0x01
    9460:	21 11       	cpse	r18, r1
    9462:	02 c0       	rjmp	.+4      	; 0x9468 <LBPrintByte+0x4a>
    9464:	dd 20       	and	r13, r13
    9466:	19 f0       	breq	.+6      	; 0x946e <LBPrintByte+0x50>
    9468:	31 2f       	mov	r19, r17
	}
}

void LBPrintByte(u8 x, u8 y, u8 value, char pad)
{
	for (u8 i = 0; i < 3; i++)
    946a:	1e 11       	cpse	r17, r14
    946c:	ea cf       	rjmp	.-44     	; 0x9442 <LBPrintByte+0x24>
	{
		LBPrintChar(x--, y, value % 10 + 48);
		value /= 10;
		if (!pad && value == 0) break;
	}
}
    946e:	0f 90       	pop	r0
    9470:	df 91       	pop	r29
    9472:	cf 91       	pop	r28
    9474:	1f 91       	pop	r17
    9476:	0f 91       	pop	r16
    9478:	ff 90       	pop	r15
    947a:	ef 90       	pop	r14
    947c:	df 90       	pop	r13
    947e:	08 95       	ret

00009480 <LBPrintInt>:

void LBPrintInt(u8 x, u8 y, u16 value, char pad)
{
    9480:	cf 92       	push	r12
    9482:	df 92       	push	r13
    9484:	ef 92       	push	r14
    9486:	ff 92       	push	r15
    9488:	0f 93       	push	r16
    948a:	1f 93       	push	r17
    948c:	cf 93       	push	r28
    948e:	df 93       	push	r29
    9490:	00 d0       	rcall	.+0      	; 0x9492 <LBPrintInt+0x12>
    9492:	cd b7       	in	r28, 0x3d	; 61
    9494:	de b7       	in	r29, 0x3e	; 62
    9496:	38 2f       	mov	r19, r24
    9498:	16 2f       	mov	r17, r22
    949a:	ca 01       	movw	r24, r20
    949c:	4b ef       	ldi	r20, 0xFB	; 251
    949e:	d4 2e       	mov	r13, r20
    94a0:	d3 0e       	add	r13, r19
	for (u8 i = 0; i < 5; i++)
	{
		LBPrintChar(x--, y, value % 10 + 48);
    94a2:	5a e0       	ldi	r21, 0x0A	; 10
    94a4:	e5 2e       	mov	r14, r21
    94a6:	f1 2c       	mov	r15, r1
    94a8:	cc 24       	eor	r12, r12
    94aa:	ca 94       	dec	r12
    94ac:	c3 0e       	add	r12, r19
    94ae:	b7 01       	movw	r22, r14
    94b0:	0e 94 a1 67 	call	0xcf42	; 0xcf42 <__udivmodhi4>
    94b4:	06 2f       	mov	r16, r22
    94b6:	40 e3       	ldi	r20, 0x30	; 48
    94b8:	48 0f       	add	r20, r24
    94ba:	61 2f       	mov	r22, r17
    94bc:	83 2f       	mov	r24, r19
    94be:	29 83       	std	Y+1, r18	; 0x01
    94c0:	7a 83       	std	Y+2, r23	; 0x02
    94c2:	0e 94 d3 49 	call	0x93a6	; 0x93a6 <LBPrintChar>
		value /= 10;
    94c6:	80 2f       	mov	r24, r16
    94c8:	7a 81       	ldd	r23, Y+2	; 0x02
    94ca:	97 2f       	mov	r25, r23
		if (!pad && value == 0) break;
    94cc:	29 81       	ldd	r18, Y+1	; 0x01
    94ce:	21 11       	cpse	r18, r1
    94d0:	02 c0       	rjmp	.+4      	; 0x94d6 <LBPrintInt+0x56>
    94d2:	00 97       	sbiw	r24, 0x00	; 0
    94d4:	19 f0       	breq	.+6      	; 0x94dc <LBPrintInt+0x5c>
    94d6:	3c 2d       	mov	r19, r12
	}
}

void LBPrintInt(u8 x, u8 y, u16 value, char pad)
{
	for (u8 i = 0; i < 5; i++)
    94d8:	cd 10       	cpse	r12, r13
    94da:	e6 cf       	rjmp	.-52     	; 0x94a8 <LBPrintInt+0x28>
	{
		LBPrintChar(x--, y, value % 10 + 48);
		value /= 10;
		if (!pad && value == 0) break;
	}
}
    94dc:	0f 90       	pop	r0
    94de:	0f 90       	pop	r0
    94e0:	df 91       	pop	r29
    94e2:	cf 91       	pop	r28
    94e4:	1f 91       	pop	r17
    94e6:	0f 91       	pop	r16
    94e8:	ff 90       	pop	r15
    94ea:	ef 90       	pop	r14
    94ec:	df 90       	pop	r13
    94ee:	cf 90       	pop	r12
    94f0:	08 95       	ret

000094f2 <LBCollides>:
	}
}

u8 LBCollides(u16 x1, u16 y1, u8 width1, u8 height1,
						 u16 x2, u16 y2, u8 width2, u8 height2)
{
    94f2:	af 92       	push	r10
    94f4:	cf 92       	push	r12
    94f6:	ef 92       	push	r14
    94f8:	ff 92       	push	r15
    94fa:	0f 93       	push	r16
    94fc:	1f 93       	push	r17
    94fe:	fc 01       	movw	r30, r24
	if (y1 + height1 <= y2) return 0;
    9500:	cb 01       	movw	r24, r22
    9502:	82 0f       	add	r24, r18
    9504:	91 1d       	adc	r25, r1
    9506:	e8 16       	cp	r14, r24
    9508:	f9 06       	cpc	r15, r25
    950a:	88 f4       	brcc	.+34     	; 0x952e <LBCollides+0x3c>
	if (y1 >= y2 + height2) return 0;
    950c:	ea 0c       	add	r14, r10
    950e:	f1 1c       	adc	r15, r1
    9510:	6e 15       	cp	r22, r14
    9512:	7f 05       	cpc	r23, r15
    9514:	60 f4       	brcc	.+24     	; 0x952e <LBCollides+0x3c>
	if (x1 + width1 <= x2) return 0;
    9516:	cf 01       	movw	r24, r30
    9518:	84 0f       	add	r24, r20
    951a:	91 1d       	adc	r25, r1
    951c:	08 17       	cp	r16, r24
    951e:	19 07       	cpc	r17, r25
    9520:	30 f4       	brcc	.+12     	; 0x952e <LBCollides+0x3c>
	if (x1 >= x2 + width2) return 0;
    9522:	0c 0d       	add	r16, r12
    9524:	11 1d       	adc	r17, r1
    9526:	81 e0       	ldi	r24, 0x01	; 1
    9528:	e0 17       	cp	r30, r16
    952a:	f1 07       	cpc	r31, r17
    952c:	08 f0       	brcs	.+2      	; 0x9530 <LBCollides+0x3e>
}

u8 LBCollides(u16 x1, u16 y1, u8 width1, u8 height1,
						 u16 x2, u16 y2, u8 width2, u8 height2)
{
	if (y1 + height1 <= y2) return 0;
    952e:	80 e0       	ldi	r24, 0x00	; 0
	if (y1 >= y2 + height2) return 0;
	if (x1 + width1 <= x2) return 0;
	if (x1 >= x2 + width2) return 0;
	return 1;
}
    9530:	1f 91       	pop	r17
    9532:	0f 91       	pop	r16
    9534:	ff 90       	pop	r15
    9536:	ef 90       	pop	r14
    9538:	cf 90       	pop	r12
    953a:	af 90       	pop	r10
    953c:	08 95       	ret

0000953e <LBRandom>:

u8 LBRandom(u8 from, u8 to)
/*
 * Return a random number between 'from' and 'to'.
 */
{
    953e:	cf 93       	push	r28
    9540:	df 93       	push	r29
    9542:	d8 2f       	mov	r29, r24
    9544:	c6 2f       	mov	r28, r22
	u16 tmp = GetPrngNumber(0) % 255;
    9546:	80 e0       	ldi	r24, 0x00	; 0
    9548:	90 e0       	ldi	r25, 0x00	; 0
    954a:	0e 94 bd 3b 	call	0x777a	; 0x777a <GetPrngNumber>
    954e:	6f ef       	ldi	r22, 0xFF	; 255
    9550:	70 e0       	ldi	r23, 0x00	; 0
    9552:	0e 94 a1 67 	call	0xcf42	; 0xcf42 <__udivmodhi4>
	return (((u8)tmp) % (to - from)) + from;
    9556:	6c 2f       	mov	r22, r28
    9558:	70 e0       	ldi	r23, 0x00	; 0
    955a:	6d 1b       	sub	r22, r29
    955c:	71 09       	sbc	r23, r1
    955e:	0e 94 b5 67 	call	0xcf6a	; 0xcf6a <__divmodhi4>
}
    9562:	8d 0f       	add	r24, r29
    9564:	df 91       	pop	r29
    9566:	cf 91       	pop	r28
    9568:	08 95       	ret

0000956a <LBWaitSeconds>:

void LBWaitSeconds(u8 seconds)
{
    956a:	cf 93       	push	r28
    956c:	df 93       	push	r29
    956e:	d8 2f       	mov	r29, r24
	for(u8 i = 0; i < seconds; i++)
    9570:	c0 e0       	ldi	r28, 0x00	; 0
    9572:	cd 17       	cp	r28, r29
    9574:	31 f0       	breq	.+12     	; 0x9582 <LBWaitSeconds+0x18>
	{
		WaitUs(65535);
    9576:	8f ef       	ldi	r24, 0xFF	; 255
    9578:	9f ef       	ldi	r25, 0xFF	; 255
    957a:	0e 94 fb 39 	call	0x73f6	; 0x73f6 <WaitUs>
	return (((u8)tmp) % (to - from)) + from;
}

void LBWaitSeconds(u8 seconds)
{
	for(u8 i = 0; i < seconds; i++)
    957e:	cf 5f       	subi	r28, 0xFF	; 255
    9580:	f8 cf       	rjmp	.-16     	; 0x9572 <LBWaitSeconds+0x8>
	{
		WaitUs(65535);
	}
}
    9582:	df 91       	pop	r29
    9584:	cf 91       	pop	r28
    9586:	08 95       	ret

00009588 <LBMapSprite>:

void LBMapSprite(u8 startSprite,const char *map,u8 spriteFlags)
{
    9588:	df 92       	push	r13
    958a:	ef 92       	push	r14
    958c:	ff 92       	push	r15
    958e:	0f 93       	push	r16
    9590:	1f 93       	push	r17
    9592:	cf 93       	push	r28
    9594:	df 93       	push	r29
    9596:	db 01       	movw	r26, r22
	u8 mapWidth=pgm_read_byte(&(map[0]));
    9598:	fb 01       	movw	r30, r22
    959a:	14 91       	lpm	r17, Z
	u8 mapHeight=pgm_read_byte(&(map[1]));
    959c:	31 96       	adiw	r30, 0x01	; 1
    959e:	64 91       	lpm	r22, Z
    95a0:	5f ef       	ldi	r21, 0xFF	; 255
    95a2:	51 0f       	add	r21, r17
	s8 x,y,dx,dy,t; 

	if(spriteFlags & SPRITE_FLIP_X)
    95a4:	24 2f       	mov	r18, r20
    95a6:	21 70       	andi	r18, 0x01	; 1
    95a8:	40 ff       	sbrs	r20, 0
    95aa:	04 c0       	rjmp	.+8      	; 0x95b4 <LBMapSprite+0x2c>
	{
		x=(mapWidth-1);
    95ac:	95 2f       	mov	r25, r21
		dx=-1;
    95ae:	ff 24       	eor	r15, r15
    95b0:	fa 94       	dec	r15
    95b2:	03 c0       	rjmp	.+6      	; 0x95ba <LBMapSprite+0x32>
	}
	else
	{
		x=0;
		dx=1;
    95b4:	ff 24       	eor	r15, r15
    95b6:	f3 94       	inc	r15
		x=(mapWidth-1);
		dx=-1;
	}
	else
	{
		x=0;
    95b8:	90 e0       	ldi	r25, 0x00	; 0
		dx=1;
	}

	if(spriteFlags & SPRITE_FLIP_Y)
    95ba:	41 ff       	sbrs	r20, 1
    95bc:	05 c0       	rjmp	.+10     	; 0x95c8 <LBMapSprite+0x40>
	{
		y=(mapHeight-1);
    95be:	7f ef       	ldi	r23, 0xFF	; 255
    95c0:	76 0f       	add	r23, r22
		dy=-1;
    95c2:	ee 24       	eor	r14, r14
    95c4:	ea 94       	dec	r14
    95c6:	03 c0       	rjmp	.+6      	; 0x95ce <LBMapSprite+0x46>
	}
	else
	{
		y=0;
		dy=1;
    95c8:	ee 24       	eor	r14, r14
    95ca:	e3 94       	inc	r14
		y=(mapHeight-1);
		dy=-1;
	}
	else
	{
		y=0;
    95cc:	70 e0       	ldi	r23, 0x00	; 0
    95ce:	21 11       	cpse	r18, r1
    95d0:	01 c0       	rjmp	.+2      	; 0x95d4 <LBMapSprite+0x4c>
    95d2:	50 e0       	ldi	r21, 0x00	; 0
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
    95d4:	00 e0       	ldi	r16, 0x00	; 0
    95d6:	06 17       	cp	r16, r22
    95d8:	09 f1       	breq	.+66     	; 0x961c <LBMapSprite+0x94>
	{
		for(u8 cx=0;cx<mapWidth;cx++)
		{
			t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    95da:	71 03       	mulsu	r23, r17
    95dc:	e0 01       	movw	r28, r0
    95de:	11 24       	eor	r1, r1
    95e0:	d8 2e       	mov	r13, r24
    95e2:	d1 0e       	add	r13, r17
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
	{
		for(u8 cx=0;cx<mapWidth;cx++)
    95e4:	8d 15       	cp	r24, r13
    95e6:	b1 f0       	breq	.+44     	; 0x9614 <LBMapSprite+0x8c>
		{
			t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    95e8:	9e 01       	movw	r18, r28
    95ea:	29 0f       	add	r18, r25
    95ec:	31 1d       	adc	r19, r1
    95ee:	97 fd       	sbrc	r25, 7
    95f0:	3a 95       	dec	r19
    95f2:	2e 5f       	subi	r18, 0xFE	; 254
    95f4:	3f 4f       	sbci	r19, 0xFF	; 255
    95f6:	fd 01       	movw	r30, r26
    95f8:	e2 0f       	add	r30, r18
    95fa:	f3 1f       	adc	r31, r19
    95fc:	24 91       	lpm	r18, Z
			extendedSprites[startSprite].tileIndex=t;
    95fe:	34 e0       	ldi	r19, 0x04	; 4
    9600:	83 9f       	mul	r24, r19
    9602:	f0 01       	movw	r30, r0
    9604:	11 24       	eor	r1, r1
    9606:	e5 55       	subi	r30, 0x55	; 85
    9608:	f0 4f       	sbci	r31, 0xF0	; 240
    960a:	22 83       	std	Z+2, r18	; 0x02
			extendedSprites[startSprite++].flags=spriteFlags;
    960c:	8f 5f       	subi	r24, 0xFF	; 255
    960e:	43 83       	std	Z+3, r20	; 0x03
    9610:	9f 0d       	add	r25, r15
    9612:	e8 cf       	rjmp	.-48     	; 0x95e4 <LBMapSprite+0x5c>
    9614:	7e 0d       	add	r23, r14
	{
		y=0;
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
    9616:	0f 5f       	subi	r16, 0xFF	; 255
			extendedSprites[startSprite].tileIndex=t;
			extendedSprites[startSprite++].flags=spriteFlags;
			x+=dx;
		}
		y+=dy;
		x=(spriteFlags & SPRITE_FLIP_X)?(mapWidth-1):0;
    9618:	95 2f       	mov	r25, r21
    961a:	dd cf       	rjmp	.-70     	; 0x95d6 <LBMapSprite+0x4e>
	}
}
    961c:	df 91       	pop	r29
    961e:	cf 91       	pop	r28
    9620:	1f 91       	pop	r17
    9622:	0f 91       	pop	r16
    9624:	ff 90       	pop	r15
    9626:	ef 90       	pop	r14
    9628:	df 90       	pop	r13
    962a:	08 95       	ret

0000962c <LBMoveSprite>:

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
    962c:	df 92       	push	r13
    962e:	ef 92       	push	r14
    9630:	ff 92       	push	r15
    9632:	0f 93       	push	r16
    9634:	1f 93       	push	r17
    9636:	cf 93       	push	r28
    9638:	df 93       	push	r29
		{
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
    963a:	a0 91 b4 0c 	lds	r26, 0x0CB4
    963e:	98 e0       	ldi	r25, 0x08	; 8
    9640:	a9 9f       	mul	r26, r25
    9642:	70 01       	movw	r14, r0
    9644:	11 24       	eor	r1, r1
    9646:	50 e0       	ldi	r21, 0x00	; 0
    9648:	38 ef       	ldi	r19, 0xF8	; 248
    964a:	a3 9f       	mul	r26, r19
    964c:	30 2d       	mov	r19, r0
    964e:	11 24       	eor	r1, r1
	}
}

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
	for(u8 dy=0;dy<height;dy++)
    9650:	70 e0       	ldi	r23, 0x00	; 0
    9652:	70 17       	cp	r23, r16
    9654:	09 f1       	breq	.+66     	; 0x9698 <LBMoveSprite+0x6c>
    9656:	d4 2e       	mov	r13, r20
    9658:	13 2f       	mov	r17, r19
    965a:	14 0f       	add	r17, r20
    965c:	b8 2f       	mov	r27, r24
    965e:	b2 0f       	add	r27, r18
    9660:	96 2f       	mov	r25, r22
	{
		for(u8 dx=0;dx<width;dx++)
    9662:	8b 17       	cp	r24, r27
    9664:	a9 f0       	breq	.+42     	; 0x9690 <LBMoveSprite+0x64>
		{
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
    9666:	c4 e0       	ldi	r28, 0x04	; 4
    9668:	8c 9f       	mul	r24, r28
    966a:	f0 01       	movw	r30, r0
    966c:	11 24       	eor	r1, r1
    966e:	ef 01       	movw	r28, r30
    9670:	c5 55       	subi	r28, 0x55	; 85
    9672:	d0 4f       	sbci	r29, 0xF0	; 240
    9674:	98 83       	st	Y, r25
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
    9676:	a0 32       	cpi	r26, 0x20	; 32
    9678:	28 f4       	brcc	.+10     	; 0x9684 <LBMoveSprite+0x58>
    967a:	e4 16       	cp	r14, r20
    967c:	f5 06       	cpc	r15, r21
    967e:	14 f4       	brge	.+4      	; 0x9684 <LBMoveSprite+0x58>
				{
					u8 tmp=(y+(TILE_HEIGHT*dy))-(Screen.scrollHeight*TILE_HEIGHT);
					extendedSprites[startSprite].y=tmp;
    9680:	19 83       	std	Y+1, r17	; 0x01
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
				{
    9682:	03 c0       	rjmp	.+6      	; 0x968a <LBMoveSprite+0x5e>
					u8 tmp=(y+(TILE_HEIGHT*dy))-(Screen.scrollHeight*TILE_HEIGHT);
					extendedSprites[startSprite].y=tmp;
				}
				else
				{
					extendedSprites[startSprite].y=y+(TILE_HEIGHT*dy);
    9684:	e5 55       	subi	r30, 0x55	; 85
    9686:	f0 4f       	sbci	r31, 0xF0	; 240
    9688:	d1 82       	std	Z+1, r13	; 0x01
				{
					extendedSprites[startSprite].y=y+(TILE_HEIGHT*dy);
				}
			#endif

			startSprite++;
    968a:	8f 5f       	subi	r24, 0xFF	; 255
    968c:	98 5f       	subi	r25, 0xF8	; 248
    968e:	e9 cf       	rjmp	.-46     	; 0x9662 <LBMoveSprite+0x36>
	}
}

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
	for(u8 dy=0;dy<height;dy++)
    9690:	7f 5f       	subi	r23, 0xFF	; 255
    9692:	48 5f       	subi	r20, 0xF8	; 248
    9694:	5f 4f       	sbci	r21, 0xFF	; 255
    9696:	dd cf       	rjmp	.-70     	; 0x9652 <LBMoveSprite+0x26>
			#endif

			startSprite++;
		}
	}	
}
    9698:	df 91       	pop	r29
    969a:	cf 91       	pop	r28
    969c:	1f 91       	pop	r17
    969e:	0f 91       	pop	r16
    96a0:	ff 90       	pop	r15
    96a2:	ef 90       	pop	r14
    96a4:	df 90       	pop	r13
    96a6:	08 95       	ret

000096a8 <LBRotateSprites>:

void LBRotateSprites()
{
    96a8:	80 e0       	ldi	r24, 0x00	; 0
    96aa:	90 e0       	ldi	r25, 0x00	; 0
    96ac:	dc 01       	movw	r26, r24
    96ae:	a5 55       	subi	r26, 0x55	; 85
    96b0:	b0 4f       	sbci	r27, 0xF0	; 240
    96b2:	fc 01       	movw	r30, r24
    96b4:	e0 5f       	subi	r30, 0xF0	; 240
    96b6:	fa 4f       	sbci	r31, 0xFA	; 250
	static u8 rotate_index = ROTATE_SPRITES_FROM;
	u8 mappedSpriteCount = MAX_EXTENDED_SPRITES;
	
	for (u8 i = 0; i < ROTATE_SPRITES_FROM; i++)
	{
		sprites[i].flags = extendedSprites[i].flags;
    96b8:	13 96       	adiw	r26, 0x03	; 3
    96ba:	2c 91       	ld	r18, X
    96bc:	13 97       	sbiw	r26, 0x03	; 3
    96be:	23 83       	std	Z+3, r18	; 0x03
		sprites[i].tileIndex = extendedSprites[i].tileIndex;
    96c0:	12 96       	adiw	r26, 0x02	; 2
    96c2:	2c 91       	ld	r18, X
    96c4:	12 97       	sbiw	r26, 0x02	; 2
    96c6:	22 83       	std	Z+2, r18	; 0x02
		sprites[i].x = extendedSprites[i].x;
    96c8:	2c 91       	ld	r18, X
    96ca:	20 83       	st	Z, r18
		sprites[i].y = extendedSprites[i].y;
    96cc:	11 96       	adiw	r26, 0x01	; 1
    96ce:	2c 91       	ld	r18, X
    96d0:	21 83       	std	Z+1, r18	; 0x01
    96d2:	04 96       	adiw	r24, 0x04	; 4
void LBRotateSprites()
{
	static u8 rotate_index = ROTATE_SPRITES_FROM;
	u8 mappedSpriteCount = MAX_EXTENDED_SPRITES;
	
	for (u8 i = 0; i < ROTATE_SPRITES_FROM; i++)
    96d4:	88 33       	cpi	r24, 0x38	; 56
    96d6:	91 05       	cpc	r25, r1
    96d8:	49 f7       	brne	.-46     	; 0x96ac <LBRotateSprites+0x4>
    96da:	80 91 01 05 	lds	r24, 0x0501
    96de:	20 e0       	ldi	r18, 0x00	; 0
    96e0:	30 e0       	ldi	r19, 0x00	; 0
		sprites[i].y = extendedSprites[i].y;
	}
	
	for (u8 i = ROTATE_SPRITES_FROM; i < MAX_SPRITES; i++)
	{
		sprites[i].flags = extendedSprites[rotate_index].flags;
    96e2:	94 e0       	ldi	r25, 0x04	; 4
    96e4:	89 9f       	mul	r24, r25
    96e6:	d0 01       	movw	r26, r0
    96e8:	11 24       	eor	r1, r1
    96ea:	a5 55       	subi	r26, 0x55	; 85
    96ec:	b0 4f       	sbci	r27, 0xF0	; 240
    96ee:	13 96       	adiw	r26, 0x03	; 3
    96f0:	9c 91       	ld	r25, X
    96f2:	13 97       	sbiw	r26, 0x03	; 3
    96f4:	f9 01       	movw	r30, r18
    96f6:	e0 5f       	subi	r30, 0xF0	; 240
    96f8:	fa 4f       	sbci	r31, 0xFA	; 250
    96fa:	93 af       	std	Z+59, r25	; 0x3b
		sprites[i].tileIndex = extendedSprites[rotate_index].tileIndex;
    96fc:	12 96       	adiw	r26, 0x02	; 2
    96fe:	9c 91       	ld	r25, X
    9700:	12 97       	sbiw	r26, 0x02	; 2
    9702:	92 af       	std	Z+58, r25	; 0x3a
		sprites[i].x = extendedSprites[rotate_index].x;
    9704:	9c 91       	ld	r25, X
    9706:	90 af       	std	Z+56, r25	; 0x38
		sprites[i].y = extendedSprites[rotate_index].y;
    9708:	11 96       	adiw	r26, 0x01	; 1
    970a:	9c 91       	ld	r25, X
    970c:	91 af       	std	Z+57, r25	; 0x39
		rotate_index += 1;
    970e:	8f 5f       	subi	r24, 0xFF	; 255
		if (rotate_index >= MAX_EXTENDED_SPRITES) rotate_index = ROTATE_SPRITES_FROM;
    9710:	84 31       	cpi	r24, 0x14	; 20
    9712:	08 f0       	brcs	.+2      	; 0x9716 <LBRotateSprites+0x6e>
    9714:	8e e0       	ldi	r24, 0x0E	; 14
    9716:	2c 5f       	subi	r18, 0xFC	; 252
    9718:	3f 4f       	sbci	r19, 0xFF	; 255
		sprites[i].tileIndex = extendedSprites[i].tileIndex;
		sprites[i].x = extendedSprites[i].x;
		sprites[i].y = extendedSprites[i].y;
	}
	
	for (u8 i = ROTATE_SPRITES_FROM; i < MAX_SPRITES; i++)
    971a:	28 30       	cpi	r18, 0x08	; 8
    971c:	31 05       	cpc	r19, r1
    971e:	09 f7       	brne	.-62     	; 0x96e2 <LBRotateSprites+0x3a>
    9720:	80 93 01 05 	sts	0x0501, r24
    9724:	08 95       	ret

00009726 <is_space>:
char* enemy_shot_anim[1];
char* expl_anim[3];

u8 is_space()
{
	return (game.current_level_index % 2 != 0);
    9726:	80 91 b7 0d 	lds	r24, 0x0DB7
}
    972a:	81 70       	andi	r24, 0x01	; 1
    972c:	08 95       	ret

0000972e <init_default_high_scores>:

void init_default_high_scores()
{
	scores.id = EEPROM_SCORES_ID;
    972e:	8c e8       	ldi	r24, 0x8C	; 140
    9730:	90 e0       	ldi	r25, 0x00	; 0
    9732:	90 93 87 0d 	sts	0x0D87, r25
    9736:	80 93 86 0d 	sts	0x0D86, r24
    973a:	80 e0       	ldi	r24, 0x00	; 0
    973c:	90 e0       	ldi	r25, 0x00	; 0
    973e:	fc 01       	movw	r30, r24
    9740:	ee 50       	subi	r30, 0x0E	; 14
    9742:	f5 4f       	sbci	r31, 0xF5	; 245
	for (u8 i = 0; i < 30; i++)
	{
		scores.data[i] = pgm_read_byte(&default_scores[i]);
    9744:	e4 91       	lpm	r30, Z
    9746:	dc 01       	movw	r26, r24
    9748:	aa 57       	subi	r26, 0x7A	; 122
    974a:	b2 4f       	sbci	r27, 0xF2	; 242
    974c:	12 96       	adiw	r26, 0x02	; 2
    974e:	ec 93       	st	X, r30
    9750:	01 96       	adiw	r24, 0x01	; 1
}

void init_default_high_scores()
{
	scores.id = EEPROM_SCORES_ID;
	for (u8 i = 0; i < 30; i++)
    9752:	8e 31       	cpi	r24, 0x1E	; 30
    9754:	91 05       	cpc	r25, r1
    9756:	99 f7       	brne	.-26     	; 0x973e <init_default_high_scores+0x10>
	{
		scores.data[i] = pgm_read_byte(&default_scores[i]);
	}
}
    9758:	08 95       	ret

0000975a <init_enemy_state>:

void init_enemy_state()
{
    975a:	80 e0       	ldi	r24, 0x00	; 0
    975c:	90 e0       	ldi	r25, 0x00	; 0
    975e:	9c 01       	movw	r18, r24
    9760:	2a 55       	subi	r18, 0x5A	; 90
    9762:	32 4f       	sbci	r19, 0xF2	; 242
    9764:	f9 01       	movw	r30, r18
    9766:	e7 54       	subi	r30, 0x47	; 71
    9768:	ff 4f       	sbci	r31, 0xFF	; 255
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		game.enemies[i].active = 0;
    976a:	10 82       	st	Z, r1
    976c:	7a 96       	adiw	r30, 0x1a	; 26
		for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
		{
			game.enemies[i].shot[j].active = 0;
    976e:	10 82       	st	Z, r1
    9770:	8e 5b       	subi	r24, 0xBE	; 190
    9772:	9f 4f       	sbci	r25, 0xFF	; 255
	}
}

void init_enemy_state()
{
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    9774:	8a 34       	cpi	r24, 0x4A	; 74
    9776:	21 e0       	ldi	r18, 0x01	; 1
    9778:	92 07       	cpc	r25, r18
    977a:	89 f7       	brne	.-30     	; 0x975e <init_enemy_state+0x4>
		for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
		{
			game.enemies[i].shot[j].active = 0;
		}
	}
	game.active_enemies = 0;
    977c:	10 92 c1 0d 	sts	0x0DC1, r1
    9780:	08 95       	ret

00009782 <init_player_state>:
}

void init_player_state()
{
	if (is_space())
    9782:	0e 94 93 4b 	call	0x9726	; 0x9726 <is_space>
    9786:	88 23       	and	r24, r24
    9788:	f9 f0       	breq	.+62     	; 0x97c8 <init_player_state+0x46>
	{
		game.player.width = 3;
    978a:	83 e0       	ldi	r24, 0x03	; 3
    978c:	80 93 d7 0d 	sts	0x0DD7, r24
		game.player.height = 1;
    9790:	81 e0       	ldi	r24, 0x01	; 1
    9792:	80 93 d8 0d 	sts	0x0DD8, r24
		game.player.run.anim_count = 2;
    9796:	82 e0       	ldi	r24, 0x02	; 2
    9798:	80 93 31 0e 	sts	0x0E31, r24
		game.player.run.frames_per_anim = EXPLOSION_FRAME_COUNT;
    979c:	85 e0       	ldi	r24, 0x05	; 5
    979e:	80 93 32 0e 	sts	0x0E32, r24
		game.player.run.anims = run_anim;
    97a2:	8b ef       	ldi	r24, 0xFB	; 251
    97a4:	9f e0       	ldi	r25, 0x0F	; 15
    97a6:	90 93 37 0e 	sts	0x0E37, r25
    97aa:	80 93 36 0e 	sts	0x0E36, r24
		game.player.run.anims[0] = (char*) map_hero_ship_0;
    97ae:	85 e8       	ldi	r24, 0x85	; 133
    97b0:	9d e2       	ldi	r25, 0x2D	; 45
    97b2:	90 93 fc 0f 	sts	0x0FFC, r25
    97b6:	80 93 fb 0f 	sts	0x0FFB, r24
		game.player.run.anims[1] = (char*) map_hero_ship_1;
    97ba:	80 e8       	ldi	r24, 0x80	; 128
    97bc:	9d e2       	ldi	r25, 0x2D	; 45
    97be:	90 93 fe 0f 	sts	0x0FFE, r25
    97c2:	80 93 fd 0f 	sts	0x0FFD, r24
    97c6:	2a c0       	rjmp	.+84     	; 0x981c <init_player_state+0x9a>
	}
	else
	{
		game.player.width = 2;
    97c8:	82 e0       	ldi	r24, 0x02	; 2
    97ca:	80 93 d7 0d 	sts	0x0DD7, r24
		game.player.height = 3;
    97ce:	83 e0       	ldi	r24, 0x03	; 3
    97d0:	80 93 d8 0d 	sts	0x0DD8, r24
		game.player.run.anim_count = 4;
    97d4:	84 e0       	ldi	r24, 0x04	; 4
    97d6:	80 93 31 0e 	sts	0x0E31, r24
		game.player.run.frames_per_anim = FRAMES_PER_RUN_CYCLE;
    97da:	8c e0       	ldi	r24, 0x0C	; 12
    97dc:	80 93 32 0e 	sts	0x0E32, r24
		game.player.run.anims = run_anim;
    97e0:	8b ef       	ldi	r24, 0xFB	; 251
    97e2:	9f e0       	ldi	r25, 0x0F	; 15
    97e4:	90 93 37 0e 	sts	0x0E37, r25
    97e8:	80 93 36 0e 	sts	0x0E36, r24
		game.player.run.anims[0] = (char*) map_hero_step_0;
    97ec:	8f ea       	ldi	r24, 0xAF	; 175
    97ee:	9d e2       	ldi	r25, 0x2D	; 45
    97f0:	90 93 fc 0f 	sts	0x0FFC, r25
    97f4:	80 93 fb 0f 	sts	0x0FFB, r24
		game.player.run.anims[1] = (char*) map_hero_step_1;
    97f8:	87 ea       	ldi	r24, 0xA7	; 167
    97fa:	9d e2       	ldi	r25, 0x2D	; 45
    97fc:	90 93 fe 0f 	sts	0x0FFE, r25
    9800:	80 93 fd 0f 	sts	0x0FFD, r24
		game.player.run.anims[2] = (char*) map_hero_step_2;
    9804:	8f e9       	ldi	r24, 0x9F	; 159
    9806:	9d e2       	ldi	r25, 0x2D	; 45
    9808:	90 93 00 10 	sts	0x1000, r25
    980c:	80 93 ff 0f 	sts	0x0FFF, r24
		game.player.run.anims[3] = (char*) map_hero_step_3;
    9810:	87 e9       	ldi	r24, 0x97	; 151
    9812:	9d e2       	ldi	r25, 0x2D	; 45
    9814:	90 93 02 10 	sts	0x1002, r25
    9818:	80 93 01 10 	sts	0x1001, r24
	}
	game.player.direction = D_RIGHT;
    981c:	81 e0       	ldi	r24, 0x01	; 1
    981e:	80 93 d6 0d 	sts	0x0DD6, r24
	game.player.flags = IDLE;
    9822:	98 e0       	ldi	r25, 0x08	; 8
    9824:	90 93 d4 0d 	sts	0x0DD4, r25
	game.player.shield = PLAYER_SHIELD;
    9828:	9a e0       	ldi	r25, 0x0A	; 10
    982a:	90 93 d9 0d 	sts	0x0DD9, r25
	game.player.idle.anim_count = 1;
    982e:	80 93 29 0e 	sts	0x0E29, r24
	game.player.idle.frames_per_anim = 1;
    9832:	80 93 2a 0e 	sts	0x0E2A, r24
	game.player.idle.anims = idle_anim;
    9836:	2d e0       	ldi	r18, 0x0D	; 13
    9838:	30 e1       	ldi	r19, 0x10	; 16
    983a:	30 93 2f 0e 	sts	0x0E2F, r19
    983e:	20 93 2e 0e 	sts	0x0E2E, r18
	game.player.idle.anims[0] = (char*) map_hero_idle;
    9842:	27 eb       	ldi	r18, 0xB7	; 183
    9844:	3d e2       	ldi	r19, 0x2D	; 45
    9846:	30 93 0e 10 	sts	0x100E, r19
    984a:	20 93 0d 10 	sts	0x100D, r18
	
	game.player.jump.anim_count = 1;
    984e:	80 93 39 0e 	sts	0x0E39, r24
	game.player.jump.frames_per_anim = 1;
    9852:	80 93 3a 0e 	sts	0x0E3A, r24
	game.player.jump.anims = jump_anim;
    9856:	24 e8       	ldi	r18, 0x84	; 132
    9858:	3d e0       	ldi	r19, 0x0D	; 13
    985a:	30 93 3f 0e 	sts	0x0E3F, r19
    985e:	20 93 3e 0e 	sts	0x0E3E, r18
	game.player.jump.anims[0] = (char*) map_hero_jump;
    9862:	2f e8       	ldi	r18, 0x8F	; 143
    9864:	3d e2       	ldi	r19, 0x2D	; 45
    9866:	30 93 85 0d 	sts	0x0D85, r19
    986a:	20 93 84 0d 	sts	0x0D84, r18
	
	game.player.prone.anim_count = 1;
    986e:	80 93 41 0e 	sts	0x0E41, r24
	game.player.prone.frames_per_anim = 1;
    9872:	80 93 42 0e 	sts	0x0E42, r24
	game.player.prone.anims = prone_anim;
    9876:	83 ea       	ldi	r24, 0xA3	; 163
    9878:	9f e0       	ldi	r25, 0x0F	; 15
    987a:	90 93 47 0e 	sts	0x0E47, r25
    987e:	80 93 46 0e 	sts	0x0E46, r24
	game.player.prone.anims[0] = (char*) map_hero_prone;
    9882:	8a e8       	ldi	r24, 0x8A	; 138
    9884:	9d e2       	ldi	r25, 0x2D	; 45
    9886:	90 93 a4 0f 	sts	0x0FA4, r25
    988a:	80 93 a3 0f 	sts	0x0FA3, r24
	
	game.player.expl.anim_count = 3;
    988e:	83 e0       	ldi	r24, 0x03	; 3
    9890:	80 93 49 0e 	sts	0x0E49, r24
	game.player.expl.frames_per_anim = EXPLOSION_FRAME_COUNT;
    9894:	85 e0       	ldi	r24, 0x05	; 5
    9896:	80 93 4a 0e 	sts	0x0E4A, r24
	game.player.expl.anims = expl_anim;
    989a:	87 e0       	ldi	r24, 0x07	; 7
    989c:	90 e1       	ldi	r25, 0x10	; 16
    989e:	90 93 4f 0e 	sts	0x0E4F, r25
    98a2:	80 93 4e 0e 	sts	0x0E4E, r24
	game.player.expl.anims[0] = (char*) map_explosion_0;
    98a6:	84 ed       	ldi	r24, 0xD4	; 212
    98a8:	9d e2       	ldi	r25, 0x2D	; 45
    98aa:	90 93 08 10 	sts	0x1008, r25
    98ae:	80 93 07 10 	sts	0x1007, r24
	game.player.expl.anims[1] = (char*) map_explosion_1;
    98b2:	81 ed       	ldi	r24, 0xD1	; 209
    98b4:	9d e2       	ldi	r25, 0x2D	; 45
    98b6:	90 93 0a 10 	sts	0x100A, r25
    98ba:	80 93 09 10 	sts	0x1009, r24
	game.player.expl.anims[2] = (char*) map_explosion_2;
    98be:	8e ec       	ldi	r24, 0xCE	; 206
    98c0:	9d e2       	ldi	r25, 0x2D	; 45
    98c2:	90 93 0c 10 	sts	0x100C, r25
    98c6:	80 93 0b 10 	sts	0x100B, r24
    98ca:	ee ee       	ldi	r30, 0xEE	; 238
    98cc:	fd e0       	ldi	r31, 0x0D	; 13
	
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
	{
		game.player.shot[i].hit_count = 1;
    98ce:	81 e0       	ldi	r24, 0x01	; 1
		game.player.shot[i].shot_type = BASIC_SHOT;
		game.player.shot[i].anim.anim_count = 1;
		game.player.shot[i].anim.frames_per_anim = 1;
		game.player.shot[i].anim.anims = shot_anim;
    98d0:	25 e0       	ldi	r18, 0x05	; 5
    98d2:	30 e1       	ldi	r19, 0x10	; 16
    98d4:	df 01       	movw	r26, r30
    98d6:	14 97       	sbiw	r26, 0x04	; 4
	game.player.expl.anims[1] = (char*) map_explosion_1;
	game.player.expl.anims[2] = (char*) map_explosion_2;
	
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
	{
		game.player.shot[i].hit_count = 1;
    98d8:	8c 93       	st	X, r24
    98da:	11 97       	sbiw	r26, 0x01	; 1
		game.player.shot[i].shot_type = BASIC_SHOT;
    98dc:	1c 92       	st	X, r1
    98de:	14 96       	adiw	r26, 0x04	; 4
		game.player.shot[i].anim.anim_count = 1;
    98e0:	8c 93       	st	X, r24
		game.player.shot[i].anim.frames_per_anim = 1;
    98e2:	80 83       	st	Z, r24
		game.player.shot[i].anim.anims = shot_anim;
    98e4:	35 83       	std	Z+5, r19	; 0x05
    98e6:	24 83       	std	Z+4, r18	; 0x04
    98e8:	7a 96       	adiw	r30, 0x1a	; 26
	game.player.expl.anims = expl_anim;
	game.player.expl.anims[0] = (char*) map_explosion_0;
	game.player.expl.anims[1] = (char*) map_explosion_1;
	game.player.expl.anims[2] = (char*) map_explosion_2;
	
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
    98ea:	9e e0       	ldi	r25, 0x0E	; 14
    98ec:	ec 33       	cpi	r30, 0x3C	; 60
    98ee:	f9 07       	cpc	r31, r25
    98f0:	89 f7       	brne	.-30     	; 0x98d4 <init_player_state+0x152>
    98f2:	89 e6       	ldi	r24, 0x69	; 105
    98f4:	9d e2       	ldi	r25, 0x2D	; 45
    98f6:	90 93 06 10 	sts	0x1006, r25
    98fa:	80 93 05 10 	sts	0x1005, r24
    98fe:	08 95       	ret

00009900 <init_enemy_shot>:
		game.player.shot[i].anim.anims[0] = (char*) map_hero_shot;
	}
}

void init_enemy_shot(u8 i, u16 x, u16 y)
{
    9900:	ef 92       	push	r14
    9902:	ff 92       	push	r15
    9904:	0f 93       	push	r16
    9906:	1f 93       	push	r17
    9908:	cf 93       	push	r28
    990a:	df 93       	push	r29
    990c:	8a 01       	movw	r16, r20
	game.enemies[i].expl.anim_count = 3;
    990e:	22 e4       	ldi	r18, 0x42	; 66
    9910:	82 9f       	mul	r24, r18
    9912:	c0 01       	movw	r24, r0
    9914:	11 24       	eor	r1, r1
    9916:	ec 01       	movw	r28, r24
    9918:	ca 55       	subi	r28, 0x5A	; 90
    991a:	d2 4f       	sbci	r29, 0xF2	; 242
    991c:	fe 01       	movw	r30, r28
    991e:	eb 51       	subi	r30, 0x1B	; 27
    9920:	ff 4f       	sbci	r31, 0xFF	; 255
    9922:	83 e0       	ldi	r24, 0x03	; 3
    9924:	80 83       	st	Z, r24
	game.enemies[i].expl.frames_per_anim = EXPLOSION_FRAME_COUNT;
    9926:	31 96       	adiw	r30, 0x01	; 1
    9928:	85 e0       	ldi	r24, 0x05	; 5
    992a:	80 83       	st	Z, r24
	game.enemies[i].expl.anims = expl_anim;
    992c:	de 01       	movw	r26, r28
    992e:	a6 51       	subi	r26, 0x16	; 22
    9930:	bf 4f       	sbci	r27, 0xFF	; 255
    9932:	e7 e0       	ldi	r30, 0x07	; 7
    9934:	f0 e1       	ldi	r31, 0x10	; 16
    9936:	11 96       	adiw	r26, 0x01	; 1
    9938:	fc 93       	st	X, r31
    993a:	ee 93       	st	-X, r30
	game.enemies[i].expl.anims[0] = (char*) map_explosion_0;
    993c:	84 ed       	ldi	r24, 0xD4	; 212
    993e:	9d e2       	ldi	r25, 0x2D	; 45
    9940:	91 83       	std	Z+1, r25	; 0x01
    9942:	80 83       	st	Z, r24
	game.enemies[i].expl.anims[1] = (char*) map_explosion_1;
    9944:	81 ed       	ldi	r24, 0xD1	; 209
    9946:	9d e2       	ldi	r25, 0x2D	; 45
    9948:	93 83       	std	Z+3, r25	; 0x03
    994a:	82 83       	std	Z+2, r24	; 0x02
	game.enemies[i].expl.anims[2] = (char*) map_explosion_2;
    994c:	8e ec       	ldi	r24, 0xCE	; 206
    994e:	9d e2       	ldi	r25, 0x2D	; 45
    9950:	95 83       	std	Z+5, r25	; 0x05
    9952:	84 83       	std	Z+4, r24	; 0x04
		
	for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
	{
		game.enemies[i].shot[j].hit_count = 1;
    9954:	fe 01       	movw	r30, r28
    9956:	ee 52       	subi	r30, 0x2E	; 46
    9958:	ff 4f       	sbci	r31, 0xFF	; 255
    995a:	81 e0       	ldi	r24, 0x01	; 1
    995c:	80 83       	st	Z, r24
		game.enemies[i].shot[j].active = 0;
    995e:	31 96       	adiw	r30, 0x01	; 1
    9960:	10 82       	st	Z, r1
		game.enemies[i].shot[j].shot_type = BASIC_ENEMY_SHOT;
    9962:	32 97       	sbiw	r30, 0x02	; 2
    9964:	80 83       	st	Z, r24
		game.enemies[i].shot[j].anim.anim_count = 1;
    9966:	34 96       	adiw	r30, 0x04	; 4
    9968:	80 83       	st	Z, r24
		game.enemies[i].shot[j].anim.frames_per_anim = 1;
    996a:	31 96       	adiw	r30, 0x01	; 1
    996c:	80 83       	st	Z, r24
		game.enemies[i].shot[j].anim.anims = enemy_shot_anim;
    996e:	50 97       	sbiw	r26, 0x10	; 16
    9970:	e3 e0       	ldi	r30, 0x03	; 3
    9972:	f0 e1       	ldi	r31, 0x10	; 16
    9974:	ed 93       	st	X+, r30
    9976:	fc 93       	st	X, r31
		game.enemies[i].shot[j].anim.anims[0] = (char*) map_enemy_shot;
    9978:	86 e6       	ldi	r24, 0x66	; 102
    997a:	9d e2       	ldi	r25, 0x2D	; 45
    997c:	91 83       	std	Z+1, r25	; 0x01
    997e:	80 83       	st	Z, r24
		game.enemies[i].shot[j].shared.vx = 0;
    9980:	fe 01       	movw	r30, r28
    9982:	e2 53       	subi	r30, 0x32	; 50
    9984:	ff 4f       	sbci	r31, 0xFF	; 255
    9986:	11 82       	std	Z+1, r1	; 0x01
    9988:	10 82       	st	Z, r1
		game.enemies[i].shot[j].shared.vy = 0;
    998a:	3c 97       	sbiw	r30, 0x0c	; 12
    998c:	10 82       	st	Z, r1
    998e:	11 82       	std	Z+1, r1	; 0x01
    9990:	12 82       	std	Z+2, r1	; 0x02
    9992:	13 82       	std	Z+3, r1	; 0x03
		game.enemies[i].shot[j].shared.x = x;
    9994:	7e 01       	movw	r14, r28
    9996:	86 ec       	ldi	r24, 0xC6	; 198
    9998:	e8 0e       	add	r14, r24
    999a:	f1 1c       	adc	r15, r1
    999c:	80 e0       	ldi	r24, 0x00	; 0
    999e:	90 e0       	ldi	r25, 0x00	; 0
    99a0:	0e 94 64 68 	call	0xd0c8	; 0xd0c8 <__floatunsisf>
    99a4:	f7 01       	movw	r30, r14
    99a6:	60 83       	st	Z, r22
    99a8:	71 83       	std	Z+1, r23	; 0x01
    99aa:	82 83       	std	Z+2, r24	; 0x02
    99ac:	93 83       	std	Z+3, r25	; 0x03
		game.enemies[i].shot[j].shared.y = y;
    99ae:	c6 53       	subi	r28, 0x36	; 54
    99b0:	df 4f       	sbci	r29, 0xFF	; 255
    99b2:	b8 01       	movw	r22, r16
    99b4:	80 e0       	ldi	r24, 0x00	; 0
    99b6:	90 e0       	ldi	r25, 0x00	; 0
    99b8:	0e 94 64 68 	call	0xd0c8	; 0xd0c8 <__floatunsisf>
    99bc:	68 83       	st	Y, r22
    99be:	79 83       	std	Y+1, r23	; 0x01
    99c0:	8a 83       	std	Y+2, r24	; 0x02
    99c2:	9b 83       	std	Y+3, r25	; 0x03
	}
}
    99c4:	df 91       	pop	r29
    99c6:	cf 91       	pop	r28
    99c8:	1f 91       	pop	r17
    99ca:	0f 91       	pop	r16
    99cc:	ff 90       	pop	r15
    99ce:	ef 90       	pop	r14
    99d0:	08 95       	ret

000099d2 <init_enemy_spider>:

void init_enemy_spider(u8 i, u16 x, u16 y)
{
    99d2:	af 92       	push	r10
    99d4:	bf 92       	push	r11
    99d6:	cf 92       	push	r12
    99d8:	df 92       	push	r13
    99da:	ef 92       	push	r14
    99dc:	ff 92       	push	r15
    99de:	1f 93       	push	r17
    99e0:	cf 93       	push	r28
    99e2:	df 93       	push	r29
    99e4:	18 2f       	mov	r17, r24
    99e6:	7b 01       	movw	r14, r22
    99e8:	6a 01       	movw	r12, r20
	game.enemies[i].active = 1;
    99ea:	82 e4       	ldi	r24, 0x42	; 66
    99ec:	18 9f       	mul	r17, r24
    99ee:	e0 01       	movw	r28, r0
    99f0:	11 24       	eor	r1, r1
    99f2:	ca 55       	subi	r28, 0x5A	; 90
    99f4:	d2 4f       	sbci	r29, 0xF2	; 242
    99f6:	fe 01       	movw	r30, r28
    99f8:	e7 54       	subi	r30, 0x47	; 71
    99fa:	ff 4f       	sbci	r31, 0xFF	; 255
    99fc:	91 e0       	ldi	r25, 0x01	; 1
    99fe:	90 83       	st	Z, r25
	game.enemies[i].direction = D_LEFT;
    9a00:	32 96       	adiw	r30, 0x02	; 2
    9a02:	10 82       	st	Z, r1
	game.enemies[i].flags = IDLE;
    9a04:	31 97       	sbiw	r30, 0x01	; 1
    9a06:	88 e0       	ldi	r24, 0x08	; 8
    9a08:	80 83       	st	Z, r24
	game.enemies[i].width = 1;
    9a0a:	32 96       	adiw	r30, 0x02	; 2
    9a0c:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    9a0e:	31 96       	adiw	r30, 0x01	; 1
    9a10:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_SPIDER;
    9a12:	31 96       	adiw	r30, 0x01	; 1
    9a14:	10 82       	st	Z, r1
	game.enemies[i].frame_count = 0;
    9a16:	31 96       	adiw	r30, 0x01	; 1
    9a18:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    9a1a:	31 96       	adiw	r30, 0x01	; 1
    9a1c:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_SPIDER_SHIELD;
    9a1e:	31 96       	adiw	r30, 0x01	; 1
    9a20:	82 e0       	ldi	r24, 0x02	; 2
    9a22:	80 83       	st	Z, r24
	
	game.enemies[i].anim.anim_count = 2;
    9a24:	7c 96       	adiw	r30, 0x1c	; 28
    9a26:	80 83       	st	Z, r24
	game.enemies[i].anim.frames_per_anim = SPIDER_FRAMES_PER_IDLE;
    9a28:	31 96       	adiw	r30, 0x01	; 1
    9a2a:	8a e0       	ldi	r24, 0x0A	; 10
    9a2c:	80 83       	st	Z, r24
	game.enemies[i].anim.anims = spider_anim;
    9a2e:	de 01       	movw	r26, r28
    9a30:	ae 51       	subi	r26, 0x1E	; 30
    9a32:	bf 4f       	sbci	r27, 0xFF	; 255
    9a34:	e5 ea       	ldi	r30, 0xA5	; 165
    9a36:	ff e0       	ldi	r31, 0x0F	; 15
    9a38:	ed 93       	st	X+, r30
    9a3a:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_spider_0;
    9a3c:	80 e6       	ldi	r24, 0x60	; 96
    9a3e:	9d e2       	ldi	r25, 0x2D	; 45
    9a40:	91 83       	std	Z+1, r25	; 0x01
    9a42:	80 83       	st	Z, r24
	game.enemies[i].anim.anims[1] = (char*) map_enemy_spider_1;
    9a44:	8d e5       	ldi	r24, 0x5D	; 93
    9a46:	9d e2       	ldi	r25, 0x2D	; 45
    9a48:	93 83       	std	Z+3, r25	; 0x03
    9a4a:	82 83       	std	Z+2, r24	; 0x02
	game.enemies[i].shared.gravity = 0;
    9a4c:	fe 01       	movw	r30, r28
    9a4e:	e8 54       	subi	r30, 0x48	; 72
    9a50:	ff 4f       	sbci	r31, 0xFF	; 255
    9a52:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = 0;
    9a54:	32 97       	sbiw	r30, 0x02	; 2
    9a56:	11 82       	std	Z+1, r1	; 0x01
    9a58:	10 82       	st	Z, r1
	game.enemies[i].shared.vy = 0;
    9a5a:	3c 97       	sbiw	r30, 0x0c	; 12
    9a5c:	10 82       	st	Z, r1
    9a5e:	11 82       	std	Z+1, r1	; 0x01
    9a60:	12 82       	std	Z+2, r1	; 0x02
    9a62:	13 82       	std	Z+3, r1	; 0x03
	game.enemies[i].shared.x = x;
    9a64:	5e 01       	movw	r10, r28
    9a66:	ee ea       	ldi	r30, 0xAE	; 174
    9a68:	ae 0e       	add	r10, r30
    9a6a:	b1 1c       	adc	r11, r1
    9a6c:	80 e0       	ldi	r24, 0x00	; 0
    9a6e:	90 e0       	ldi	r25, 0x00	; 0
    9a70:	0e 94 64 68 	call	0xd0c8	; 0xd0c8 <__floatunsisf>
    9a74:	f5 01       	movw	r30, r10
    9a76:	60 83       	st	Z, r22
    9a78:	71 83       	std	Z+1, r23	; 0x01
    9a7a:	82 83       	std	Z+2, r24	; 0x02
    9a7c:	93 83       	std	Z+3, r25	; 0x03
	game.enemies[i].shared.y = y;
    9a7e:	ce 54       	subi	r28, 0x4E	; 78
    9a80:	df 4f       	sbci	r29, 0xFF	; 255
    9a82:	b6 01       	movw	r22, r12
    9a84:	80 e0       	ldi	r24, 0x00	; 0
    9a86:	90 e0       	ldi	r25, 0x00	; 0
    9a88:	0e 94 64 68 	call	0xd0c8	; 0xd0c8 <__floatunsisf>
    9a8c:	68 83       	st	Y, r22
    9a8e:	79 83       	std	Y+1, r23	; 0x01
    9a90:	8a 83       	std	Y+2, r24	; 0x02
    9a92:	9b 83       	std	Y+3, r25	; 0x03
	
	init_enemy_shot(i, x, y);
    9a94:	a6 01       	movw	r20, r12
    9a96:	b7 01       	movw	r22, r14
    9a98:	81 2f       	mov	r24, r17
}
    9a9a:	df 91       	pop	r29
    9a9c:	cf 91       	pop	r28
    9a9e:	1f 91       	pop	r17
    9aa0:	ff 90       	pop	r15
    9aa2:	ef 90       	pop	r14
    9aa4:	df 90       	pop	r13
    9aa6:	cf 90       	pop	r12
    9aa8:	bf 90       	pop	r11
    9aaa:	af 90       	pop	r10
	game.enemies[i].shared.vx = 0;
	game.enemies[i].shared.vy = 0;
	game.enemies[i].shared.x = x;
	game.enemies[i].shared.y = y;
	
	init_enemy_shot(i, x, y);
    9aac:	0c 94 80 4c 	jmp	0x9900	; 0x9900 <init_enemy_shot>

00009ab0 <init_enemy_shark>:
}

void init_enemy_shark(u8 i, u16 x, u16 y)
{
    9ab0:	af 92       	push	r10
    9ab2:	bf 92       	push	r11
    9ab4:	cf 92       	push	r12
    9ab6:	df 92       	push	r13
    9ab8:	ef 92       	push	r14
    9aba:	ff 92       	push	r15
    9abc:	1f 93       	push	r17
    9abe:	cf 93       	push	r28
    9ac0:	df 93       	push	r29
    9ac2:	18 2f       	mov	r17, r24
    9ac4:	7b 01       	movw	r14, r22
    9ac6:	6a 01       	movw	r12, r20
	game.enemies[i].active = 1;
    9ac8:	82 e4       	ldi	r24, 0x42	; 66
    9aca:	18 9f       	mul	r17, r24
    9acc:	e0 01       	movw	r28, r0
    9ace:	11 24       	eor	r1, r1
    9ad0:	ca 55       	subi	r28, 0x5A	; 90
    9ad2:	d2 4f       	sbci	r29, 0xF2	; 242
    9ad4:	fe 01       	movw	r30, r28
    9ad6:	e7 54       	subi	r30, 0x47	; 71
    9ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    9ada:	91 e0       	ldi	r25, 0x01	; 1
    9adc:	90 83       	st	Z, r25
	game.enemies[i].width = 1;
    9ade:	33 96       	adiw	r30, 0x03	; 3
    9ae0:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    9ae2:	31 96       	adiw	r30, 0x01	; 1
    9ae4:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_SHARK;
    9ae6:	31 96       	adiw	r30, 0x01	; 1
    9ae8:	90 83       	st	Z, r25
	game.enemies[i].frame_count = 0;
    9aea:	31 96       	adiw	r30, 0x01	; 1
    9aec:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    9aee:	31 96       	adiw	r30, 0x01	; 1
    9af0:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_SHARK_SHIELD;
    9af2:	31 96       	adiw	r30, 0x01	; 1
    9af4:	84 e0       	ldi	r24, 0x04	; 4
    9af6:	80 83       	st	Z, r24
	
	game.enemies[i].anim.anim_count = 1;
    9af8:	7c 96       	adiw	r30, 0x1c	; 28
    9afa:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = 1;
    9afc:	31 96       	adiw	r30, 0x01	; 1
    9afe:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = shark_anim;
    9b00:	de 01       	movw	r26, r28
    9b02:	ae 51       	subi	r26, 0x1E	; 30
    9b04:	bf 4f       	sbci	r27, 0xFF	; 255
    9b06:	e9 ea       	ldi	r30, 0xA9	; 169
    9b08:	ff e0       	ldi	r31, 0x0F	; 15
    9b0a:	ed 93       	st	X+, r30
    9b0c:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_shark;
    9b0e:	83 e6       	ldi	r24, 0x63	; 99
    9b10:	9d e2       	ldi	r25, 0x2D	; 45
    9b12:	91 83       	std	Z+1, r25	; 0x01
    9b14:	80 83       	st	Z, r24
	game.enemies[i].shared.gravity = 0;
    9b16:	fe 01       	movw	r30, r28
    9b18:	e8 54       	subi	r30, 0x48	; 72
    9b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    9b1c:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = SHARK_SPEED;
    9b1e:	32 97       	sbiw	r30, 0x02	; 2
    9b20:	84 e1       	ldi	r24, 0x14	; 20
    9b22:	90 e0       	ldi	r25, 0x00	; 0
    9b24:	91 83       	std	Z+1, r25	; 0x01
    9b26:	80 83       	st	Z, r24
	game.enemies[i].shared.vy = 0;
    9b28:	3c 97       	sbiw	r30, 0x0c	; 12
    9b2a:	10 82       	st	Z, r1
    9b2c:	11 82       	std	Z+1, r1	; 0x01
    9b2e:	12 82       	std	Z+2, r1	; 0x02
    9b30:	13 82       	std	Z+3, r1	; 0x03
	game.enemies[i].shared.x = x;
    9b32:	5e 01       	movw	r10, r28
    9b34:	ee ea       	ldi	r30, 0xAE	; 174
    9b36:	ae 0e       	add	r10, r30
    9b38:	b1 1c       	adc	r11, r1
    9b3a:	80 e0       	ldi	r24, 0x00	; 0
    9b3c:	90 e0       	ldi	r25, 0x00	; 0
    9b3e:	0e 94 64 68 	call	0xd0c8	; 0xd0c8 <__floatunsisf>
    9b42:	f5 01       	movw	r30, r10
    9b44:	60 83       	st	Z, r22
    9b46:	71 83       	std	Z+1, r23	; 0x01
    9b48:	82 83       	std	Z+2, r24	; 0x02
    9b4a:	93 83       	std	Z+3, r25	; 0x03
	game.enemies[i].shared.y = y;
    9b4c:	ce 54       	subi	r28, 0x4E	; 78
    9b4e:	df 4f       	sbci	r29, 0xFF	; 255
    9b50:	b6 01       	movw	r22, r12
    9b52:	80 e0       	ldi	r24, 0x00	; 0
    9b54:	90 e0       	ldi	r25, 0x00	; 0
    9b56:	0e 94 64 68 	call	0xd0c8	; 0xd0c8 <__floatunsisf>
    9b5a:	68 83       	st	Y, r22
    9b5c:	79 83       	std	Y+1, r23	; 0x01
    9b5e:	8a 83       	std	Y+2, r24	; 0x02
    9b60:	9b 83       	std	Y+3, r25	; 0x03
	
	init_enemy_shot(i, x, y);
    9b62:	a6 01       	movw	r20, r12
    9b64:	b7 01       	movw	r22, r14
    9b66:	81 2f       	mov	r24, r17
}
    9b68:	df 91       	pop	r29
    9b6a:	cf 91       	pop	r28
    9b6c:	1f 91       	pop	r17
    9b6e:	ff 90       	pop	r15
    9b70:	ef 90       	pop	r14
    9b72:	df 90       	pop	r13
    9b74:	cf 90       	pop	r12
    9b76:	bf 90       	pop	r11
    9b78:	af 90       	pop	r10
	game.enemies[i].shared.vx = SHARK_SPEED;
	game.enemies[i].shared.vy = 0;
	game.enemies[i].shared.x = x;
	game.enemies[i].shared.y = y;
	
	init_enemy_shot(i, x, y);
    9b7a:	0c 94 80 4c 	jmp	0x9900	; 0x9900 <init_enemy_shot>

00009b7e <load_eeprom>:
 *  0x01 = EEPROM_ERROR_INVALID_BLOCK
 *  0x02 = EEPROM_ERROR_FULL
 *  0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 *  0x04 = EEPROM_ERROR_NOT_FORMATTED
 */
{
    9b7e:	cf 93       	push	r28
    9b80:	df 93       	push	r29
    9b82:	ec 01       	movw	r28, r24
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
    9b84:	bc 01       	movw	r22, r24
    9b86:	88 81       	ld	r24, Y
    9b88:	99 81       	ldd	r25, Y+1	; 0x01
    9b8a:	0e 94 8a 3b 	call	0x7714	; 0x7714 <EepromReadBlock>
	if (status == 0x03)
    9b8e:	83 30       	cpi	r24, 0x03	; 3
    9b90:	29 f4       	brne	.+10     	; 0x9b9c <load_eeprom+0x1e>
	{
		status = EepromWriteBlock(block);
    9b92:	ce 01       	movw	r24, r28
	}
}
    9b94:	df 91       	pop	r29
    9b96:	cf 91       	pop	r28
{
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
	if (status == 0x03)
	{
		status = EepromWriteBlock(block);
    9b98:	0c 94 40 3b 	jmp	0x7680	; 0x7680 <EepromWriteBlock>
	}
}
    9b9c:	df 91       	pop	r29
    9b9e:	cf 91       	pop	r28
    9ba0:	08 95       	ret

00009ba2 <clear_overlay>:
{
	SetTile(x, y, level_tile);
}

void clear_overlay(u8 overlayHeight)
{
    9ba2:	1f 93       	push	r17
    9ba4:	cf 93       	push	r28
    9ba6:	df 93       	push	r29
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
    9ba8:	d0 e0       	ldi	r29, 0x00	; 0
    9baa:	10 e2       	ldi	r17, 0x20	; 32
    9bac:	18 0f       	add	r17, r24
{
	SetTile(x, y, level_tile);
}

void clear_overlay(u8 overlayHeight)
{
    9bae:	c0 e2       	ldi	r28, 0x20	; 32
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
	{
		for(u8 y = 0; y < overlayHeight; y++)
    9bb0:	c1 17       	cp	r28, r17
    9bb2:	41 f0       	breq	.+16     	; 0x9bc4 <clear_overlay+0x22>
		{
			SetTile(x, VRAM_TILES_V+y, 0);
    9bb4:	40 e0       	ldi	r20, 0x00	; 0
    9bb6:	50 e0       	ldi	r21, 0x00	; 0
    9bb8:	6c 2f       	mov	r22, r28
    9bba:	8d 2f       	mov	r24, r29
    9bbc:	0e 94 cf 39 	call	0x739e	; 0x739e <SetTile>
    9bc0:	cf 5f       	subi	r28, 0xFF	; 255
    9bc2:	f6 cf       	rjmp	.-20     	; 0x9bb0 <clear_overlay+0xe>
	SetTile(x, y, level_tile);
}

void clear_overlay(u8 overlayHeight)
{
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
    9bc4:	df 5f       	subi	r29, 0xFF	; 255
    9bc6:	dc 31       	cpi	r29, 0x1C	; 28
    9bc8:	91 f7       	brne	.-28     	; 0x9bae <clear_overlay+0xc>
		for(u8 y = 0; y < overlayHeight; y++)
		{
			SetTile(x, VRAM_TILES_V+y, 0);
		}
	}
}
    9bca:	df 91       	pop	r29
    9bcc:	cf 91       	pop	r28
    9bce:	1f 91       	pop	r17
    9bd0:	08 95       	ret

00009bd2 <read_level_byte>:
#else
u8 read_level_byte(char* level_data, u16 index)
{
	// C Code
	
	u16 counter = index / 128 * 32;
    9bd2:	9b 01       	movw	r18, r22
    9bd4:	22 0f       	add	r18, r18
    9bd6:	23 2f       	mov	r18, r19
    9bd8:	22 1f       	adc	r18, r18
    9bda:	33 0b       	sbc	r19, r19
    9bdc:	31 95       	neg	r19
	u16 cumulative_rlength = index / 128 * 128;
    9bde:	a9 01       	movw	r20, r18
    9be0:	56 95       	lsr	r21
    9be2:	54 2f       	mov	r21, r20
    9be4:	44 27       	eor	r20, r20
    9be6:	57 95       	ror	r21
    9be8:	47 95       	ror	r20
#else
u8 read_level_byte(char* level_data, u16 index)
{
	// C Code
	
	u16 counter = index / 128 * 32;
    9bea:	f5 e0       	ldi	r31, 0x05	; 5
    9bec:	22 0f       	add	r18, r18
    9bee:	33 1f       	adc	r19, r19
    9bf0:	fa 95       	dec	r31
    9bf2:	e1 f7       	brne	.-8      	; 0x9bec <read_level_byte+0x1a>
    9bf4:	28 0f       	add	r18, r24
    9bf6:	39 1f       	adc	r19, r25
	u8 rlength = 0;
	u8 value = 0;
	
	while (1)
	{
		rlength = pgm_read_byte(&level_data[counter]);
    9bf8:	f9 01       	movw	r30, r18
    9bfa:	94 91       	lpm	r25, Z
    9bfc:	31 96       	adiw	r30, 0x01	; 1
		value = pgm_read_byte(&level_data[counter+1]);
    9bfe:	84 91       	lpm	r24, Z
		cumulative_rlength += rlength;
    9c00:	49 0f       	add	r20, r25
    9c02:	51 1d       	adc	r21, r1
    9c04:	2e 5f       	subi	r18, 0xFE	; 254
    9c06:	3f 4f       	sbci	r19, 0xFF	; 255
		if (cumulative_rlength > index)
    9c08:	64 17       	cp	r22, r20
    9c0a:	75 07       	cpc	r23, r21
    9c0c:	a8 f7       	brcc	.-22     	; 0x9bf8 <read_level_byte+0x26>
	  [cntr] "+z" (counter),
	  [crln] "+r" (cumulative_rlength),
	  [rln]  "+r" (rlength),
	  [vl]   "=&r" (value));
	return value;*/
}
    9c0e:	08 95       	ret

00009c10 <get_level_tile>:
{
	return 21;
}

u8 get_level_tile(char* level_data, u16 x, u16 y)
{
    9c10:	ef 92       	push	r14
    9c12:	ff 92       	push	r15
    9c14:	0f 93       	push	r16
    9c16:	1f 93       	push	r17
    9c18:	cf 93       	push	r28
    9c1a:	df 93       	push	r29
    9c1c:	8c 01       	movw	r16, r24
    9c1e:	7b 01       	movw	r14, r22
    9c20:	ea 01       	movw	r28, r20
	if (is_space())
    9c22:	0e 94 93 4b 	call	0x9726	; 0x9726 <is_space>
    9c26:	b7 01       	movw	r22, r14
    9c28:	6e 5f       	subi	r22, 0xFE	; 254
    9c2a:	7f 4f       	sbci	r23, 0xFF	; 255
    9c2c:	88 23       	and	r24, r24
    9c2e:	41 f0       	breq	.+16     	; 0x9c40 <get_level_tile+0x30>
	{
		return read_level_byte(level_data, 2 + y*32+x);
    9c30:	85 e0       	ldi	r24, 0x05	; 5
    9c32:	cc 0f       	add	r28, r28
    9c34:	dd 1f       	adc	r29, r29
    9c36:	8a 95       	dec	r24
    9c38:	e1 f7       	brne	.-8      	; 0x9c32 <get_level_tile+0x22>
    9c3a:	6c 0f       	add	r22, r28
    9c3c:	7d 1f       	adc	r23, r29
    9c3e:	09 c0       	rjmp	.+18     	; 0x9c52 <get_level_tile+0x42>
	}
	return read_level_byte(level_data, 2 + y*game.level_width+x);
    9c40:	80 91 b8 0d 	lds	r24, 0x0DB8
    9c44:	8c 9f       	mul	r24, r28
    9c46:	a0 01       	movw	r20, r0
    9c48:	8d 9f       	mul	r24, r29
    9c4a:	50 0d       	add	r21, r0
    9c4c:	11 24       	eor	r1, r1
    9c4e:	64 0f       	add	r22, r20
    9c50:	75 1f       	adc	r23, r21
    9c52:	c8 01       	movw	r24, r16
}
    9c54:	df 91       	pop	r29
    9c56:	cf 91       	pop	r28
    9c58:	1f 91       	pop	r17
    9c5a:	0f 91       	pop	r16
    9c5c:	ff 90       	pop	r15
    9c5e:	ef 90       	pop	r14
{
	if (is_space())
	{
		return read_level_byte(level_data, 2 + y*32+x);
	}
	return read_level_byte(level_data, 2 + y*game.level_width+x);
    9c60:	0c 94 e9 4d 	jmp	0x9bd2	; 0x9bd2 <read_level_byte>

00009c64 <render_camera_view>:
}

void render_camera_view()
{
    9c64:	6f 92       	push	r6
    9c66:	7f 92       	push	r7
    9c68:	8f 92       	push	r8
    9c6a:	9f 92       	push	r9
    9c6c:	af 92       	push	r10
    9c6e:	bf 92       	push	r11
    9c70:	cf 92       	push	r12
    9c72:	df 92       	push	r13
    9c74:	ef 92       	push	r14
    9c76:	ff 92       	push	r15
    9c78:	0f 93       	push	r16
    9c7a:	1f 93       	push	r17
    9c7c:	cf 93       	push	r28
    9c7e:	df 93       	push	r29
	u8 level_tile;
	u16 camara_x_tile = game.camera_x/8;
    9c80:	e0 90 aa 0d 	lds	r14, 0x0DAA
    9c84:	f0 90 ab 0d 	lds	r15, 0x0DAB
    9c88:	83 e0       	ldi	r24, 0x03	; 3
    9c8a:	f6 94       	lsr	r15
    9c8c:	e7 94       	ror	r14
    9c8e:	8a 95       	dec	r24
    9c90:	e1 f7       	brne	.-8      	; 0x9c8a <render_camera_view+0x26>
	u16 camera_y_tile = game.camera_y/8;
    9c92:	00 91 ac 0d 	lds	r16, 0x0DAC
    9c96:	10 91 ad 0d 	lds	r17, 0x0DAD
    9c9a:	93 e0       	ldi	r25, 0x03	; 3
    9c9c:	16 95       	lsr	r17
    9c9e:	07 95       	ror	r16
    9ca0:	9a 95       	dec	r25
    9ca2:	e1 f7       	brne	.-8      	; 0x9c9c <render_camera_view+0x38>
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    9ca4:	37 01       	movw	r6, r14
    9ca6:	67 01       	movw	r12, r14
    9ca8:	8c e1       	ldi	r24, 0x1C	; 28
    9caa:	c8 0e       	add	r12, r24
    9cac:	d1 1c       	adc	r13, r1
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    9cae:	58 01       	movw	r10, r16
    9cb0:	8a e1       	ldi	r24, 0x1A	; 26
    9cb2:	a8 0e       	add	r10, r24
    9cb4:	b1 1c       	adc	r11, r1
		{
			level_tile = get_level_tile(game.current_level, x, y);
			render_level_tile(level_tile, (Screen.scrollX / 8 + x - camara_x_tile) % 32, (Screen.scrollY / 8 + y - camera_y_tile) % 30);
    9cb6:	2e e1       	ldi	r18, 0x1E	; 30
    9cb8:	82 2e       	mov	r8, r18
    9cba:	91 2c       	mov	r9, r1
{
	u8 level_tile;
	u16 camara_x_tile = game.camera_x/8;
	u16 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    9cbc:	c6 14       	cp	r12, r6
    9cbe:	d7 04       	cpc	r13, r7
    9cc0:	70 f1       	brcs	.+92     	; 0x9d1e <render_camera_view+0xba>
    9cc2:	e8 01       	movw	r28, r16
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    9cc4:	ac 16       	cp	r10, r28
    9cc6:	bd 06       	cpc	r11, r29
    9cc8:	30 f1       	brcs	.+76     	; 0x9d16 <render_camera_view+0xb2>
		{
			level_tile = get_level_tile(game.current_level, x, y);
    9cca:	ae 01       	movw	r20, r28
    9ccc:	b3 01       	movw	r22, r6
    9cce:	80 91 a1 0f 	lds	r24, 0x0FA1
    9cd2:	90 91 a2 0f 	lds	r25, 0x0FA2
    9cd6:	0e 94 08 4e 	call	0x9c10	; 0x9c10 <get_level_tile>
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    9cda:	28 2f       	mov	r18, r24
    9cdc:	30 e0       	ldi	r19, 0x00	; 0
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
		{
			level_tile = get_level_tile(game.current_level, x, y);
			render_level_tile(level_tile, (Screen.scrollX / 8 + x - camara_x_tile) % 32, (Screen.scrollY / 8 + y - camera_y_tile) % 30);
    9cde:	80 91 b3 0c 	lds	r24, 0x0CB3
    9ce2:	86 95       	lsr	r24
    9ce4:	86 95       	lsr	r24
    9ce6:	86 95       	lsr	r24
    9ce8:	90 e0       	ldi	r25, 0x00	; 0
    9cea:	80 1b       	sub	r24, r16
    9cec:	91 0b       	sbc	r25, r17
    9cee:	8c 0f       	add	r24, r28
    9cf0:	9d 1f       	adc	r25, r29
    9cf2:	b4 01       	movw	r22, r8
    9cf4:	0e 94 a1 67 	call	0xcf42	; 0xcf42 <__udivmodhi4>
    9cf8:	90 91 b2 0c 	lds	r25, 0x0CB2
    9cfc:	96 95       	lsr	r25
    9cfe:	96 95       	lsr	r25
    9d00:	96 95       	lsr	r25
    9d02:	9e 19       	sub	r25, r14
    9d04:	96 0d       	add	r25, r6
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    9d06:	a9 01       	movw	r20, r18
    9d08:	68 2f       	mov	r22, r24
    9d0a:	89 2f       	mov	r24, r25
    9d0c:	8f 71       	andi	r24, 0x1F	; 31
    9d0e:	0e 94 cf 39 	call	0x739e	; 0x739e <SetTile>
	u16 camara_x_tile = game.camera_x/8;
	u16 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    9d12:	21 96       	adiw	r28, 0x01	; 1
    9d14:	d7 cf       	rjmp	.-82     	; 0x9cc4 <render_camera_view+0x60>
{
	u8 level_tile;
	u16 camara_x_tile = game.camera_x/8;
	u16 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    9d16:	8f ef       	ldi	r24, 0xFF	; 255
    9d18:	68 1a       	sub	r6, r24
    9d1a:	78 0a       	sbc	r7, r24
    9d1c:	cf cf       	rjmp	.-98     	; 0x9cbc <render_camera_view+0x58>
		{
			level_tile = get_level_tile(game.current_level, x, y);
			render_level_tile(level_tile, (Screen.scrollX / 8 + x - camara_x_tile) % 32, (Screen.scrollY / 8 + y - camera_y_tile) % 30);
		}
	}
}
    9d1e:	df 91       	pop	r29
    9d20:	cf 91       	pop	r28
    9d22:	1f 91       	pop	r17
    9d24:	0f 91       	pop	r16
    9d26:	ff 90       	pop	r15
    9d28:	ef 90       	pop	r14
    9d2a:	df 90       	pop	r13
    9d2c:	cf 90       	pop	r12
    9d2e:	bf 90       	pop	r11
    9d30:	af 90       	pop	r10
    9d32:	9f 90       	pop	r9
    9d34:	8f 90       	pop	r8
    9d36:	7f 90       	pop	r7
    9d38:	6f 90       	pop	r6
    9d3a:	08 95       	ret

00009d3c <spawn_enemy>:

void spawn_enemy(u16 x, u16 y)
{
    9d3c:	ff 92       	push	r15
    9d3e:	0f 93       	push	r16
    9d40:	1f 93       	push	r17
    9d42:	cf 93       	push	r28
    9d44:	df 93       	push	r29
    9d46:	00 d0       	rcall	.+0      	; 0x9d48 <spawn_enemy+0xc>
    9d48:	cd b7       	in	r28, 0x3d	; 61
    9d4a:	de b7       	in	r29, 0x3e	; 62
    9d4c:	26 ea       	ldi	r18, 0xA6	; 166
    9d4e:	3d e0       	ldi	r19, 0x0D	; 13
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    9d50:	f1 2c       	mov	r15, r1
    9d52:	f9 01       	movw	r30, r18
    9d54:	e7 54       	subi	r30, 0x47	; 71
    9d56:	ff 4f       	sbci	r31, 0xFF	; 255
	{
		if (!game.enemies[i].active)
    9d58:	40 81       	ld	r20, Z
    9d5a:	41 11       	cpse	r20, r1
    9d5c:	1c c0       	rjmp	.+56     	; 0x9d96 <spawn_enemy+0x5a>
    9d5e:	7a 96       	adiw	r30, 0x1a	; 26
		{
			for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
			{
				if (!game.enemies[i].shot[j].active)
    9d60:	40 81       	ld	r20, Z
    9d62:	41 11       	cpse	r20, r1
    9d64:	18 c0       	rjmp	.+48     	; 0x9d96 <spawn_enemy+0x5a>
    9d66:	ab 01       	movw	r20, r22
    9d68:	8c 01       	movw	r16, r24
				{
					if (is_space())
    9d6a:	69 83       	std	Y+1, r22	; 0x01
    9d6c:	5a 83       	std	Y+2, r21	; 0x02
    9d6e:	0e 94 93 4b 	call	0x9726	; 0x9726 <is_space>
    9d72:	49 81       	ldd	r20, Y+1	; 0x01
    9d74:	5a 81       	ldd	r21, Y+2	; 0x02
					{
						init_enemy_shark(i, x, y);
    9d76:	b8 01       	movw	r22, r16
		{
			for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
			{
				if (!game.enemies[i].shot[j].active)
				{
					if (is_space())
    9d78:	88 23       	and	r24, r24
    9d7a:	21 f0       	breq	.+8      	; 0x9d84 <spawn_enemy+0x48>
					{
						init_enemy_shark(i, x, y);
    9d7c:	8f 2d       	mov	r24, r15
    9d7e:	0e 94 58 4d 	call	0x9ab0	; 0x9ab0 <init_enemy_shark>
    9d82:	03 c0       	rjmp	.+6      	; 0x9d8a <spawn_enemy+0x4e>
					}
					else
					{
						init_enemy_spider(i, x, y);
    9d84:	8f 2d       	mov	r24, r15
    9d86:	0e 94 e9 4c 	call	0x99d2	; 0x99d2 <init_enemy_spider>
					}
					game.active_enemies++;
    9d8a:	80 91 c1 0d 	lds	r24, 0x0DC1
    9d8e:	8f 5f       	subi	r24, 0xFF	; 255
    9d90:	80 93 c1 0d 	sts	0x0DC1, r24
    9d94:	06 c0       	rjmp	.+12     	; 0x9da2 <spawn_enemy+0x66>
	}
}

void spawn_enemy(u16 x, u16 y)
{
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    9d96:	f3 94       	inc	r15
    9d98:	2e 5b       	subi	r18, 0xBE	; 190
    9d9a:	3f 4f       	sbci	r19, 0xFF	; 255
    9d9c:	45 e0       	ldi	r20, 0x05	; 5
    9d9e:	f4 12       	cpse	r15, r20
    9da0:	d8 cf       	rjmp	.-80     	; 0x9d52 <spawn_enemy+0x16>
					return;
				}
			}
		}
	}
}
    9da2:	0f 90       	pop	r0
    9da4:	0f 90       	pop	r0
    9da6:	df 91       	pop	r29
    9da8:	cf 91       	pop	r28
    9daa:	1f 91       	pop	r17
    9dac:	0f 91       	pop	r16
    9dae:	ff 90       	pop	r15
    9db0:	08 95       	ret

00009db2 <solid_tile>:

u8 solid_tile(u8 level_tile)
{
	switch (level_tile)
    9db2:	8b 30       	cpi	r24, 0x0B	; 11
    9db4:	30 f4       	brcc	.+12     	; 0x9dc2 <solid_tile+0x10>
    9db6:	89 30       	cpi	r24, 0x09	; 9
    9db8:	48 f4       	brcc	.+18     	; 0x9dcc <solid_tile+0x1a>
    9dba:	81 50       	subi	r24, 0x01	; 1
    9dbc:	84 30       	cpi	r24, 0x04	; 4
    9dbe:	20 f4       	brcc	.+8      	; 0x9dc8 <solid_tile+0x16>
    9dc0:	05 c0       	rjmp	.+10     	; 0x9dcc <solid_tile+0x1a>
    9dc2:	8c 50       	subi	r24, 0x0C	; 12
    9dc4:	83 30       	cpi	r24, 0x03	; 3
    9dc6:	10 f0       	brcs	.+4      	; 0x9dcc <solid_tile+0x1a>
		case L_ICICLE_UP : return 1;
		case L_FIRE_BOTTOM : return 1;
		case L_FIRE_TOP : return 1;
		case L_FIRE_LAVA : return 1;
	}
	return 0;
    9dc8:	80 e0       	ldi	r24, 0x00	; 0
    9dca:	08 95       	ret

u8 solid_tile(u8 level_tile)
{
	switch (level_tile)
	{
		case L_ICE_MIDDLE : return 1;
    9dcc:	81 e0       	ldi	r24, 0x01	; 1
		case L_FIRE_BOTTOM : return 1;
		case L_FIRE_TOP : return 1;
		case L_FIRE_LAVA : return 1;
	}
	return 0;
}
    9dce:	08 95       	ret

00009dd0 <append_tile_column>:
	}
	return 0;
}

void append_tile_column()
{
    9dd0:	cf 92       	push	r12
    9dd2:	df 92       	push	r13
    9dd4:	ef 92       	push	r14
    9dd6:	ff 92       	push	r15
    9dd8:	0f 93       	push	r16
    9dda:	1f 93       	push	r17
    9ddc:	cf 93       	push	r28
    9dde:	df 93       	push	r29
	u8 enemy_spawned = 0;
	u8 level_tile;
	u8 rndom = LBRandom(0, CAMERA_HEIGHT-1)*8;
    9de0:	69 e1       	ldi	r22, 0x19	; 25
    9de2:	80 e0       	ldi	r24, 0x00	; 0
    9de4:	0e 94 9f 4a 	call	0x953e	; 0x953e <LBRandom>
    9de8:	88 0f       	add	r24, r24
    9dea:	88 0f       	add	r24, r24
    9dec:	88 0f       	add	r24, r24

	game.column_count++;
    9dee:	20 91 b2 0d 	lds	r18, 0x0DB2
    9df2:	30 91 b3 0d 	lds	r19, 0x0DB3
    9df6:	2f 5f       	subi	r18, 0xFF	; 255
    9df8:	3f 4f       	sbci	r19, 0xFF	; 255
    9dfa:	30 93 b3 0d 	sts	0x0DB3, r19
    9dfe:	20 93 b2 0d 	sts	0x0DB2, r18
    9e02:	c0 e0       	ldi	r28, 0x00	; 0
    9e04:	d0 e0       	ldi	r29, 0x00	; 0
	return 0;
}

void append_tile_column()
{
	u8 enemy_spawned = 0;
    9e06:	d1 2c       	mov	r13, r1

	game.column_count++;
    for (u8 y = 0; y <= CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
    9e08:	3e e1       	ldi	r19, 0x1E	; 30
    9e0a:	e3 2e       	mov	r14, r19
    9e0c:	f1 2c       	mov	r15, r1
		if (game.column_count % game.spawn_rate == game.spawn_rate - 1 && game.active_enemies < MAX_ENEMIES && !enemy_spawned)
		{
			if (is_space())
			{
				spawn_enemy(game.camera_x+CAMERA_WIDTH*8, rndom);
    9e0e:	08 2f       	mov	r16, r24
    9e10:	10 e0       	ldi	r17, 0x00	; 0
	u8 rndom = LBRandom(0, CAMERA_HEIGHT-1)*8;

	game.column_count++;
    for (u8 y = 0; y <= CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
    9e12:	40 91 ac 0d 	lds	r20, 0x0DAC
    9e16:	50 91 ad 0d 	lds	r21, 0x0DAD
    9e1a:	23 e0       	ldi	r18, 0x03	; 3
    9e1c:	56 95       	lsr	r21
    9e1e:	47 95       	ror	r20
    9e20:	2a 95       	dec	r18
    9e22:	e1 f7       	brne	.-8      	; 0x9e1c <append_tile_column+0x4c>
    9e24:	4c 0f       	add	r20, r28
    9e26:	5d 1f       	adc	r21, r29
    9e28:	60 91 a6 0d 	lds	r22, 0x0DA6
    9e2c:	70 91 a7 0d 	lds	r23, 0x0DA7
    9e30:	80 91 a1 0f 	lds	r24, 0x0FA1
    9e34:	90 91 a2 0f 	lds	r25, 0x0FA2
    9e38:	0e 94 08 4e 	call	0x9c10	; 0x9c10 <get_level_tile>
    9e3c:	c8 2e       	mov	r12, r24
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    9e3e:	28 2f       	mov	r18, r24
    9e40:	30 e0       	ldi	r19, 0x00	; 0

	game.column_count++;
    for (u8 y = 0; y <= CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
    9e42:	90 91 b3 0c 	lds	r25, 0x0CB3
    9e46:	96 95       	lsr	r25
    9e48:	96 95       	lsr	r25
    9e4a:	96 95       	lsr	r25
    9e4c:	ae 01       	movw	r20, r28
    9e4e:	49 0f       	add	r20, r25
    9e50:	51 1d       	adc	r21, r1
    9e52:	ca 01       	movw	r24, r20
    9e54:	b7 01       	movw	r22, r14
    9e56:	0e 94 b5 67 	call	0xcf6a	; 0xcf6a <__divmodhi4>
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    9e5a:	a9 01       	movw	r20, r18
    9e5c:	68 2f       	mov	r22, r24
    9e5e:	80 91 bf 0d 	lds	r24, 0x0DBF
    9e62:	0e 94 cf 39 	call	0x739e	; 0x739e <SetTile>
	game.column_count++;
    for (u8 y = 0; y <= CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
		if (game.column_count % game.spawn_rate == game.spawn_rate - 1 && game.active_enemies < MAX_ENEMIES && !enemy_spawned)
    9e66:	20 91 c2 0d 	lds	r18, 0x0DC2
    9e6a:	30 e0       	ldi	r19, 0x00	; 0
    9e6c:	80 91 b2 0d 	lds	r24, 0x0DB2
    9e70:	90 91 b3 0d 	lds	r25, 0x0DB3
    9e74:	b9 01       	movw	r22, r18
    9e76:	0e 94 a1 67 	call	0xcf42	; 0xcf42 <__udivmodhi4>
    9e7a:	21 50       	subi	r18, 0x01	; 1
    9e7c:	31 09       	sbc	r19, r1
    9e7e:	82 17       	cp	r24, r18
    9e80:	93 07       	cpc	r25, r19
    9e82:	91 f5       	brne	.+100    	; 0x9ee8 <append_tile_column+0x118>
    9e84:	80 91 c1 0d 	lds	r24, 0x0DC1
    9e88:	85 30       	cpi	r24, 0x05	; 5
    9e8a:	70 f5       	brcc	.+92     	; 0x9ee8 <append_tile_column+0x118>
    9e8c:	d1 10       	cpse	r13, r1
    9e8e:	2a c0       	rjmp	.+84     	; 0x9ee4 <append_tile_column+0x114>
		{
			if (is_space())
    9e90:	0e 94 93 4b 	call	0x9726	; 0x9726 <is_space>
    9e94:	88 23       	and	r24, r24
    9e96:	31 f0       	breq	.+12     	; 0x9ea4 <append_tile_column+0xd4>
			{
				spawn_enemy(game.camera_x+CAMERA_WIDTH*8, rndom);
    9e98:	80 91 aa 0d 	lds	r24, 0x0DAA
    9e9c:	90 91 ab 0d 	lds	r25, 0x0DAB
    9ea0:	b8 01       	movw	r22, r16
    9ea2:	1c c0       	rjmp	.+56     	; 0x9edc <append_tile_column+0x10c>
				enemy_spawned = 1;
			}
			else if (solid_tile(level_tile))
    9ea4:	8c 2d       	mov	r24, r12
    9ea6:	0e 94 d9 4e 	call	0x9db2	; 0x9db2 <solid_tile>
    9eaa:	88 23       	and	r24, r24
    9eac:	e9 f0       	breq	.+58     	; 0x9ee8 <append_tile_column+0x118>
			{
				spawn_enemy(game.camera_x+CAMERA_WIDTH*8, (game.camera_y / 8 + y - 1)*8);
    9eae:	20 91 ac 0d 	lds	r18, 0x0DAC
    9eb2:	30 91 ad 0d 	lds	r19, 0x0DAD
    9eb6:	83 e0       	ldi	r24, 0x03	; 3
    9eb8:	36 95       	lsr	r19
    9eba:	27 95       	ror	r18
    9ebc:	8a 95       	dec	r24
    9ebe:	e1 f7       	brne	.-8      	; 0x9eb8 <append_tile_column+0xe8>
    9ec0:	21 50       	subi	r18, 0x01	; 1
    9ec2:	30 4e       	sbci	r19, 0xE0	; 224
    9ec4:	2c 0f       	add	r18, r28
    9ec6:	3d 1f       	adc	r19, r29
    9ec8:	b9 01       	movw	r22, r18
    9eca:	93 e0       	ldi	r25, 0x03	; 3
    9ecc:	66 0f       	add	r22, r22
    9ece:	77 1f       	adc	r23, r23
    9ed0:	9a 95       	dec	r25
    9ed2:	e1 f7       	brne	.-8      	; 0x9ecc <append_tile_column+0xfc>
    9ed4:	80 91 aa 0d 	lds	r24, 0x0DAA
    9ed8:	90 91 ab 0d 	lds	r25, 0x0DAB
    9edc:	80 52       	subi	r24, 0x20	; 32
    9ede:	9f 4f       	sbci	r25, 0xFF	; 255
    9ee0:	0e 94 9e 4e 	call	0x9d3c	; 0x9d3c <spawn_enemy>
    9ee4:	dd 24       	eor	r13, r13
    9ee6:	d3 94       	inc	r13
    9ee8:	21 96       	adiw	r28, 0x01	; 1
	u8 enemy_spawned = 0;
	u8 level_tile;
	u8 rndom = LBRandom(0, CAMERA_HEIGHT-1)*8;

	game.column_count++;
    for (u8 y = 0; y <= CAMERA_HEIGHT; y++)
    9eea:	cb 31       	cpi	r28, 0x1B	; 27
    9eec:	d1 05       	cpc	r29, r1
    9eee:	09 f0       	breq	.+2      	; 0x9ef2 <append_tile_column+0x122>
    9ef0:	90 cf       	rjmp	.-224    	; 0x9e12 <append_tile_column+0x42>
				enemy_spawned = 1;
			}
		}
    }
	
    game.scroll_src_x++;
    9ef2:	c0 91 a6 0d 	lds	r28, 0x0DA6
    9ef6:	d0 91 a7 0d 	lds	r29, 0x0DA7
    9efa:	21 96       	adiw	r28, 0x01	; 1
    9efc:	d0 93 a7 0d 	sts	0x0DA7, r29
    9f00:	c0 93 a6 0d 	sts	0x0DA6, r28
	game.scroll_dest_x++;
    9f04:	80 91 bf 0d 	lds	r24, 0x0DBF
    9f08:	8f 5f       	subi	r24, 0xFF	; 255
    if(game.scroll_dest_x>=32)game.scroll_dest_x=0;
    9f0a:	80 32       	cpi	r24, 0x20	; 32
    9f0c:	18 f4       	brcc	.+6      	; 0x9f14 <append_tile_column+0x144>
			}
		}
    }
	
    game.scroll_src_x++;
	game.scroll_dest_x++;
    9f0e:	80 93 bf 0d 	sts	0x0DBF, r24
    9f12:	02 c0       	rjmp	.+4      	; 0x9f18 <append_tile_column+0x148>
    if(game.scroll_dest_x>=32)game.scroll_dest_x=0;
    9f14:	10 92 bf 0d 	sts	0x0DBF, r1
	if(is_space() && game.scroll_src_x>=32)game.scroll_src_x=0;
    9f18:	0e 94 93 4b 	call	0x9726	; 0x9726 <is_space>
    9f1c:	88 23       	and	r24, r24
    9f1e:	31 f0       	breq	.+12     	; 0x9f2c <append_tile_column+0x15c>
    9f20:	a0 97       	sbiw	r28, 0x20	; 32
    9f22:	20 f0       	brcs	.+8      	; 0x9f2c <append_tile_column+0x15c>
    9f24:	10 92 a7 0d 	sts	0x0DA7, r1
    9f28:	10 92 a6 0d 	sts	0x0DA6, r1
}
    9f2c:	df 91       	pop	r29
    9f2e:	cf 91       	pop	r28
    9f30:	1f 91       	pop	r17
    9f32:	0f 91       	pop	r16
    9f34:	ff 90       	pop	r15
    9f36:	ef 90       	pop	r14
    9f38:	df 90       	pop	r13
    9f3a:	cf 90       	pop	r12
    9f3c:	08 95       	ret

00009f3e <append_tile_row>:

void append_tile_row()
{
    9f3e:	cf 93       	push	r28
    9f40:	df 93       	push	r29
    9f42:	c0 e0       	ldi	r28, 0x00	; 0
    9f44:	d0 e0       	ldi	r29, 0x00	; 0
	u8 level_tile;

    for (u8 x = 0; x <= CAMERA_WIDTH; x++)
	{
		level_tile = get_level_tile(game.current_level, x + game.camera_x / 8, game.scroll_src_y);
    9f46:	40 91 a8 0d 	lds	r20, 0x0DA8
    9f4a:	50 91 a9 0d 	lds	r21, 0x0DA9
    9f4e:	60 91 aa 0d 	lds	r22, 0x0DAA
    9f52:	70 91 ab 0d 	lds	r23, 0x0DAB
    9f56:	83 e0       	ldi	r24, 0x03	; 3
    9f58:	76 95       	lsr	r23
    9f5a:	67 95       	ror	r22
    9f5c:	8a 95       	dec	r24
    9f5e:	e1 f7       	brne	.-8      	; 0x9f58 <append_tile_row+0x1a>
    9f60:	6c 0f       	add	r22, r28
    9f62:	7d 1f       	adc	r23, r29
    9f64:	80 91 a1 0f 	lds	r24, 0x0FA1
    9f68:	90 91 a2 0f 	lds	r25, 0x0FA2
    9f6c:	0e 94 08 4e 	call	0x9c10	; 0x9c10 <get_level_tile>
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    9f70:	48 2f       	mov	r20, r24
    9f72:	50 e0       	ldi	r21, 0x00	; 0
	u8 level_tile;

    for (u8 x = 0; x <= CAMERA_WIDTH; x++)
	{
		level_tile = get_level_tile(game.current_level, x + game.camera_x / 8, game.scroll_src_y);
		render_level_tile(level_tile, (x + Screen.scrollX / 8) % 32, game.scroll_dest_y);
    9f74:	80 91 b2 0c 	lds	r24, 0x0CB2
    9f78:	86 95       	lsr	r24
    9f7a:	86 95       	lsr	r24
    9f7c:	86 95       	lsr	r24
    9f7e:	8c 0f       	add	r24, r28
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    9f80:	60 91 c0 0d 	lds	r22, 0x0DC0
    9f84:	8f 71       	andi	r24, 0x1F	; 31
    9f86:	0e 94 cf 39 	call	0x739e	; 0x739e <SetTile>
    9f8a:	21 96       	adiw	r28, 0x01	; 1

void append_tile_row()
{
	u8 level_tile;

    for (u8 x = 0; x <= CAMERA_WIDTH; x++)
    9f8c:	cd 31       	cpi	r28, 0x1D	; 29
    9f8e:	d1 05       	cpc	r29, r1
    9f90:	d1 f6       	brne	.-76     	; 0x9f46 <append_tile_row+0x8>
	{
		level_tile = get_level_tile(game.current_level, x + game.camera_x / 8, game.scroll_src_y);
		render_level_tile(level_tile, (x + Screen.scrollX / 8) % 32, game.scroll_dest_y);
    }
	
    game.scroll_src_y++;
    9f92:	80 91 a8 0d 	lds	r24, 0x0DA8
    9f96:	90 91 a9 0d 	lds	r25, 0x0DA9
    9f9a:	01 96       	adiw	r24, 0x01	; 1
    9f9c:	90 93 a9 0d 	sts	0x0DA9, r25
    9fa0:	80 93 a8 0d 	sts	0x0DA8, r24
	game.scroll_dest_y++;
    9fa4:	80 91 c0 0d 	lds	r24, 0x0DC0
    9fa8:	8f 5f       	subi	r24, 0xFF	; 255
    if(game.scroll_dest_y>=30)game.scroll_dest_y=0;
    9faa:	8e 31       	cpi	r24, 0x1E	; 30
    9fac:	18 f4       	brcc	.+6      	; 0x9fb4 <append_tile_row+0x76>
		level_tile = get_level_tile(game.current_level, x + game.camera_x / 8, game.scroll_src_y);
		render_level_tile(level_tile, (x + Screen.scrollX / 8) % 32, game.scroll_dest_y);
    }
	
    game.scroll_src_y++;
	game.scroll_dest_y++;
    9fae:	80 93 c0 0d 	sts	0x0DC0, r24
    9fb2:	02 c0       	rjmp	.+4      	; 0x9fb8 <append_tile_row+0x7a>
    if(game.scroll_dest_y>=30)game.scroll_dest_y=0;
    9fb4:	10 92 c0 0d 	sts	0x0DC0, r1
}
    9fb8:	df 91       	pop	r29
    9fba:	cf 91       	pop	r28
    9fbc:	08 95       	ret

00009fbe <move_camera_x>:

void move_camera_x()
{	
	game.camera_x++;
    9fbe:	80 91 aa 0d 	lds	r24, 0x0DAA
    9fc2:	90 91 ab 0d 	lds	r25, 0x0DAB
    9fc6:	01 96       	adiw	r24, 0x01	; 1
    9fc8:	90 93 ab 0d 	sts	0x0DAB, r25
    9fcc:	80 93 aa 0d 	sts	0x0DAA, r24
	Scroll(1,0);
    9fd0:	60 e0       	ldi	r22, 0x00	; 0
    9fd2:	81 e0       	ldi	r24, 0x01	; 1
    9fd4:	0e 94 28 48 	call	0x9050	; 0x9050 <Scroll>
	if (++game.scroll_x == 8)
    9fd8:	80 91 bd 0d 	lds	r24, 0x0DBD
    9fdc:	8f 5f       	subi	r24, 0xFF	; 255
    9fde:	88 30       	cpi	r24, 0x08	; 8
    9fe0:	19 f0       	breq	.+6      	; 0x9fe8 <move_camera_x+0x2a>
    9fe2:	80 93 bd 0d 	sts	0x0DBD, r24
    9fe6:	08 95       	ret
	{
		game.scroll_x = 0;
    9fe8:	10 92 bd 0d 	sts	0x0DBD, r1
		append_tile_column();
    9fec:	0c 94 e8 4e 	jmp	0x9dd0	; 0x9dd0 <append_tile_column>

00009ff0 <move_camera_y>:
	}
}

void move_camera_y()
{	
	game.camera_y+=2;
    9ff0:	80 91 ac 0d 	lds	r24, 0x0DAC
    9ff4:	90 91 ad 0d 	lds	r25, 0x0DAD
    9ff8:	02 96       	adiw	r24, 0x02	; 2
    9ffa:	90 93 ad 0d 	sts	0x0DAD, r25
    9ffe:	80 93 ac 0d 	sts	0x0DAC, r24
	game.scroll_y+=2;
    a002:	80 91 be 0d 	lds	r24, 0x0DBE
    a006:	8e 5f       	subi	r24, 0xFE	; 254
    a008:	80 93 be 0d 	sts	0x0DBE, r24
	Scroll(0,2);
    a00c:	62 e0       	ldi	r22, 0x02	; 2
    a00e:	80 e0       	ldi	r24, 0x00	; 0
    a010:	0e 94 28 48 	call	0x9050	; 0x9050 <Scroll>
	if (game.scroll_y == 8)
    a014:	80 91 be 0d 	lds	r24, 0x0DBE
    a018:	88 30       	cpi	r24, 0x08	; 8
    a01a:	21 f4       	brne	.+8      	; 0xa024 <move_camera_y+0x34>
	{
		game.scroll_y = 0;
    a01c:	10 92 be 0d 	sts	0x0DBE, r1
		append_tile_row();
    a020:	0c 94 9f 4f 	jmp	0x9f3e	; 0x9f3e <append_tile_row>
    a024:	08 95       	ret

0000a026 <map_ship>:
	}
}

void map_ship()
{
	game.player.run.anim_count = 2;
    a026:	82 e0       	ldi	r24, 0x02	; 2
    a028:	80 93 31 0e 	sts	0x0E31, r24
	game.player.run.frames_per_anim = EXPLOSION_FRAME_COUNT;
    a02c:	85 e0       	ldi	r24, 0x05	; 5
    a02e:	80 93 32 0e 	sts	0x0E32, r24
	game.player.run.anims = run_anim;
    a032:	eb ef       	ldi	r30, 0xFB	; 251
    a034:	ff e0       	ldi	r31, 0x0F	; 15
    a036:	f0 93 37 0e 	sts	0x0E37, r31
    a03a:	e0 93 36 0e 	sts	0x0E36, r30
	game.player.run.anims[0] = (char*) map_hero_ship_large_0;
    a03e:	86 e7       	ldi	r24, 0x76	; 118
    a040:	9d e2       	ldi	r25, 0x2D	; 45
    a042:	91 83       	std	Z+1, r25	; 0x01
    a044:	80 83       	st	Z, r24
	game.player.run.anims[1] = (char*) map_hero_ship_large_1;
    a046:	8c e6       	ldi	r24, 0x6C	; 108
    a048:	9d e2       	ldi	r25, 0x2D	; 45
    a04a:	93 83       	std	Z+3, r25	; 0x03
    a04c:	82 83       	std	Z+2, r24	; 0x02
    a04e:	08 95       	ret

0000a050 <map_level_info>:
}

void map_level_info(char* level)
{
    a050:	cf 93       	push	r28
    a052:	df 93       	push	r29
    a054:	ec 01       	movw	r28, r24
	game.current_level = level;
    a056:	90 93 a2 0f 	sts	0x0FA2, r25
    a05a:	80 93 a1 0f 	sts	0x0FA1, r24
	if (!is_space())
    a05e:	0e 94 93 4b 	call	0x9726	; 0x9726 <is_space>
    a062:	81 11       	cpse	r24, r1
    a064:	0d c0       	rjmp	.+26     	; 0xa080 <map_level_info+0x30>
	{
		game.level_width = read_level_byte(level, 0);
    a066:	60 e0       	ldi	r22, 0x00	; 0
    a068:	70 e0       	ldi	r23, 0x00	; 0
    a06a:	ce 01       	movw	r24, r28
    a06c:	0e 94 e9 4d 	call	0x9bd2	; 0x9bd2 <read_level_byte>
    a070:	80 93 b8 0d 	sts	0x0DB8, r24
		game.level_height = read_level_byte(level, 1);
    a074:	61 e0       	ldi	r22, 0x01	; 1
    a076:	70 e0       	ldi	r23, 0x00	; 0
    a078:	ce 01       	movw	r24, r28
    a07a:	0e 94 e9 4d 	call	0x9bd2	; 0x9bd2 <read_level_byte>
    a07e:	04 c0       	rjmp	.+8      	; 0xa088 <map_level_info+0x38>
		
	}
	else
	{
		game.level_width = 255;
    a080:	8f ef       	ldi	r24, 0xFF	; 255
    a082:	80 93 b8 0d 	sts	0x0DB8, r24
		game.level_height = 26;
    a086:	8a e1       	ldi	r24, 0x1A	; 26
    a088:	80 93 b9 0d 	sts	0x0DB9, r24
	}
}
    a08c:	df 91       	pop	r29
    a08e:	cf 91       	pop	r28
    a090:	08 95       	ret

0000a092 <on_solid_ground>:
		}
	}
}

char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
    a092:	2f 92       	push	r2
    a094:	3f 92       	push	r3
    a096:	4f 92       	push	r4
    a098:	5f 92       	push	r5
    a09a:	6f 92       	push	r6
    a09c:	7f 92       	push	r7
    a09e:	8f 92       	push	r8
    a0a0:	9f 92       	push	r9
    a0a2:	af 92       	push	r10
    a0a4:	bf 92       	push	r11
    a0a6:	cf 92       	push	r12
    a0a8:	df 92       	push	r13
    a0aa:	ef 92       	push	r14
    a0ac:	ff 92       	push	r15
    a0ae:	0f 93       	push	r16
    a0b0:	1f 93       	push	r17
    a0b2:	cf 93       	push	r28
    a0b4:	df 93       	push	r29
    a0b6:	00 d0       	rcall	.+0      	; 0xa0b8 <on_solid_ground+0x26>
    a0b8:	00 d0       	rcall	.+0      	; 0xa0ba <on_solid_ground+0x28>
    a0ba:	00 d0       	rcall	.+0      	; 0xa0bc <on_solid_ground+0x2a>
    a0bc:	cd b7       	in	r28, 0x3d	; 61
    a0be:	de b7       	in	r29, 0x3e	; 62
    a0c0:	9e 83       	std	Y+6, r25	; 0x06
    a0c2:	8d 83       	std	Y+5, r24	; 0x05
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
    a0c4:	88 e0       	ldi	r24, 0x08	; 8
    a0c6:	48 9f       	mul	r20, r24
    a0c8:	a0 01       	movw	r20, r0
    a0ca:	11 24       	eor	r1, r1
    a0cc:	26 2e       	mov	r2, r22
    a0ce:	31 2c       	mov	r3, r1
char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
    a0d0:	00 e0       	ldi	r16, 0x00	; 0
    a0d2:	10 e0       	ldi	r17, 0x00	; 0
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
    a0d4:	ca 01       	movw	r24, r20
    a0d6:	aa 27       	eor	r26, r26
    a0d8:	97 fd       	sbrc	r25, 7
    a0da:	a0 95       	com	r26
    a0dc:	ba 2f       	mov	r27, r26
    a0de:	89 83       	std	Y+1, r24	; 0x01
    a0e0:	9a 83       	std	Y+2, r25	; 0x02
    a0e2:	ab 83       	std	Y+3, r26	; 0x03
    a0e4:	bc 83       	std	Y+4, r27	; 0x04
char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
    a0e6:	02 15       	cp	r16, r2
    a0e8:	13 05       	cpc	r17, r3
    a0ea:	09 f4       	brne	.+2      	; 0xa0ee <on_solid_ground+0x5c>
    a0ec:	85 c0       	rjmp	.+266    	; 0xa1f8 <on_solid_ground+0x166>
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
    a0ee:	69 81       	ldd	r22, Y+1	; 0x01
    a0f0:	7a 81       	ldd	r23, Y+2	; 0x02
    a0f2:	8b 81       	ldd	r24, Y+3	; 0x03
    a0f4:	9c 81       	ldd	r25, Y+4	; 0x04
    a0f6:	0e 94 66 68 	call	0xd0cc	; 0xd0cc <__floatsisf>
    a0fa:	4b 01       	movw	r8, r22
    a0fc:	5c 01       	movw	r10, r24
    a0fe:	b8 01       	movw	r22, r16
    a100:	88 27       	eor	r24, r24
    a102:	77 fd       	sbrc	r23, 7
    a104:	80 95       	com	r24
    a106:	98 2f       	mov	r25, r24
    a108:	0e 94 66 68 	call	0xd0cc	; 0xd0cc <__floatsisf>
    a10c:	6b 01       	movw	r12, r22
    a10e:	7c 01       	movw	r14, r24
    a110:	ad 81       	ldd	r26, Y+5	; 0x05
    a112:	be 81       	ldd	r27, Y+6	; 0x06
    a114:	18 96       	adiw	r26, 0x08	; 8
    a116:	2d 91       	ld	r18, X+
    a118:	3d 91       	ld	r19, X+
    a11a:	4d 91       	ld	r20, X+
    a11c:	5c 91       	ld	r21, X
    a11e:	1b 97       	sbiw	r26, 0x0b	; 11
    a120:	c5 01       	movw	r24, r10
    a122:	b4 01       	movw	r22, r8
    a124:	0e 94 d0 67 	call	0xcfa0	; 0xcfa0 <__addsf3>
    a128:	20 e0       	ldi	r18, 0x00	; 0
    a12a:	30 e0       	ldi	r19, 0x00	; 0
    a12c:	40 e0       	ldi	r20, 0x00	; 0
    a12e:	5e e3       	ldi	r21, 0x3E	; 62
    a130:	0e 94 1a 69 	call	0xd234	; 0xd234 <__mulsf3>
    a134:	0e 94 38 68 	call	0xd070	; 0xd070 <__fixunssfsi>
    a138:	2b 01       	movw	r4, r22
    a13a:	3c 01       	movw	r6, r24
    a13c:	20 e0       	ldi	r18, 0x00	; 0
    a13e:	30 e0       	ldi	r19, 0x00	; 0
    a140:	40 e0       	ldi	r20, 0x00	; 0
    a142:	5e e3       	ldi	r21, 0x3E	; 62
    a144:	ed 81       	ldd	r30, Y+5	; 0x05
    a146:	fe 81       	ldd	r31, Y+6	; 0x06
    a148:	64 81       	ldd	r22, Z+4	; 0x04
    a14a:	75 81       	ldd	r23, Z+5	; 0x05
    a14c:	86 81       	ldd	r24, Z+6	; 0x06
    a14e:	97 81       	ldd	r25, Z+7	; 0x07
    a150:	0e 94 1a 69 	call	0xd234	; 0xd234 <__mulsf3>
    a154:	a7 01       	movw	r20, r14
    a156:	96 01       	movw	r18, r12
    a158:	0e 94 d0 67 	call	0xcfa0	; 0xcfa0 <__addsf3>
    a15c:	0e 94 38 68 	call	0xd070	; 0xd070 <__fixunssfsi>
    a160:	a2 01       	movw	r20, r4
    a162:	80 91 a1 0f 	lds	r24, 0x0FA1
    a166:	90 91 a2 0f 	lds	r25, 0x0FA2
    a16a:	0e 94 08 4e 	call	0x9c10	; 0x9c10 <get_level_tile>
    a16e:	78 2e       	mov	r7, r24
		lt2 = get_level_tile(game.current_level, (s->x+7) / 8 + x, (s->y + tile_height*8) / 8);
    a170:	ad 81       	ldd	r26, Y+5	; 0x05
    a172:	be 81       	ldd	r27, Y+6	; 0x06
    a174:	18 96       	adiw	r26, 0x08	; 8
    a176:	2d 91       	ld	r18, X+
    a178:	3d 91       	ld	r19, X+
    a17a:	4d 91       	ld	r20, X+
    a17c:	5c 91       	ld	r21, X
    a17e:	1b 97       	sbiw	r26, 0x0b	; 11
    a180:	c5 01       	movw	r24, r10
    a182:	b4 01       	movw	r22, r8
    a184:	0e 94 d0 67 	call	0xcfa0	; 0xcfa0 <__addsf3>
    a188:	20 e0       	ldi	r18, 0x00	; 0
    a18a:	30 e0       	ldi	r19, 0x00	; 0
    a18c:	40 e0       	ldi	r20, 0x00	; 0
    a18e:	5e e3       	ldi	r21, 0x3E	; 62
    a190:	0e 94 1a 69 	call	0xd234	; 0xd234 <__mulsf3>
    a194:	0e 94 38 68 	call	0xd070	; 0xd070 <__fixunssfsi>
    a198:	4b 01       	movw	r8, r22
    a19a:	5c 01       	movw	r10, r24
    a19c:	20 e0       	ldi	r18, 0x00	; 0
    a19e:	30 e0       	ldi	r19, 0x00	; 0
    a1a0:	40 ee       	ldi	r20, 0xE0	; 224
    a1a2:	50 e4       	ldi	r21, 0x40	; 64
    a1a4:	ed 81       	ldd	r30, Y+5	; 0x05
    a1a6:	fe 81       	ldd	r31, Y+6	; 0x06
    a1a8:	64 81       	ldd	r22, Z+4	; 0x04
    a1aa:	75 81       	ldd	r23, Z+5	; 0x05
    a1ac:	86 81       	ldd	r24, Z+6	; 0x06
    a1ae:	97 81       	ldd	r25, Z+7	; 0x07
    a1b0:	0e 94 d0 67 	call	0xcfa0	; 0xcfa0 <__addsf3>
    a1b4:	20 e0       	ldi	r18, 0x00	; 0
    a1b6:	30 e0       	ldi	r19, 0x00	; 0
    a1b8:	40 e0       	ldi	r20, 0x00	; 0
    a1ba:	5e e3       	ldi	r21, 0x3E	; 62
    a1bc:	0e 94 1a 69 	call	0xd234	; 0xd234 <__mulsf3>
    a1c0:	a7 01       	movw	r20, r14
    a1c2:	96 01       	movw	r18, r12
    a1c4:	0e 94 d0 67 	call	0xcfa0	; 0xcfa0 <__addsf3>
    a1c8:	0e 94 38 68 	call	0xd070	; 0xd070 <__fixunssfsi>
    a1cc:	a4 01       	movw	r20, r8
    a1ce:	80 91 a1 0f 	lds	r24, 0x0FA1
    a1d2:	90 91 a2 0f 	lds	r25, 0x0FA2
    a1d6:	0e 94 08 4e 	call	0x9c10	; 0x9c10 <get_level_tile>
    a1da:	f8 2e       	mov	r15, r24
		if (solid_tile(lt1) || solid_tile(lt2))
    a1dc:	87 2d       	mov	r24, r7
    a1de:	0e 94 d9 4e 	call	0x9db2	; 0x9db2 <solid_tile>
    a1e2:	81 11       	cpse	r24, r1
    a1e4:	0b c0       	rjmp	.+22     	; 0xa1fc <on_solid_ground+0x16a>
    a1e6:	8f 2d       	mov	r24, r15
    a1e8:	0e 94 d9 4e 	call	0x9db2	; 0x9db2 <solid_tile>
    a1ec:	0f 5f       	subi	r16, 0xFF	; 255
    a1ee:	1f 4f       	sbci	r17, 0xFF	; 255
    a1f0:	88 23       	and	r24, r24
    a1f2:	09 f4       	brne	.+2      	; 0xa1f6 <on_solid_ground+0x164>
    a1f4:	78 cf       	rjmp	.-272    	; 0xa0e6 <on_solid_ground+0x54>
    a1f6:	02 c0       	rjmp	.+4      	; 0xa1fc <on_solid_ground+0x16a>
		{
			return 1;
		}
	}
	return 0;
    a1f8:	80 e0       	ldi	r24, 0x00	; 0
    a1fa:	01 c0       	rjmp	.+2      	; 0xa1fe <on_solid_ground+0x16c>
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
		lt2 = get_level_tile(game.current_level, (s->x+7) / 8 + x, (s->y + tile_height*8) / 8);
		if (solid_tile(lt1) || solid_tile(lt2))
		{
			return 1;
    a1fc:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return 0;
}
    a1fe:	26 96       	adiw	r28, 0x06	; 6
    a200:	0f b6       	in	r0, 0x3f	; 63
    a202:	f8 94       	cli
    a204:	de bf       	out	0x3e, r29	; 62
    a206:	0f be       	out	0x3f, r0	; 63
    a208:	cd bf       	out	0x3d, r28	; 61
    a20a:	df 91       	pop	r29
    a20c:	cf 91       	pop	r28
    a20e:	1f 91       	pop	r17
    a210:	0f 91       	pop	r16
    a212:	ff 90       	pop	r15
    a214:	ef 90       	pop	r14
    a216:	df 90       	pop	r13
    a218:	cf 90       	pop	r12
    a21a:	bf 90       	pop	r11
    a21c:	af 90       	pop	r10
    a21e:	9f 90       	pop	r9
    a220:	8f 90       	pop	r8
    a222:	7f 90       	pop	r7
    a224:	6f 90       	pop	r6
    a226:	5f 90       	pop	r5
    a228:	4f 90       	pop	r4
    a22a:	3f 90       	pop	r3
    a22c:	2f 90       	pop	r2
    a22e:	08 95       	ret

0000a230 <find_shot_slot>:

u8 find_shot_slot()
{
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
	{
		if (!game.player.shot[i].active) return i;
    a230:	80 91 eb 0d 	lds	r24, 0x0DEB
    a234:	88 23       	and	r24, r24
    a236:	61 f0       	breq	.+24     	; 0xa250 <find_shot_slot+0x20>
    a238:	80 91 05 0e 	lds	r24, 0x0E05
    a23c:	88 23       	and	r24, r24
    a23e:	31 f0       	breq	.+12     	; 0xa24c <find_shot_slot+0x1c>
    a240:	80 91 1f 0e 	lds	r24, 0x0E1F
    a244:	81 11       	cpse	r24, r1
    a246:	04 c0       	rjmp	.+8      	; 0xa250 <find_shot_slot+0x20>
	return 0;
}

u8 find_shot_slot()
{
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
    a248:	82 e0       	ldi	r24, 0x02	; 2
    a24a:	08 95       	ret
    a24c:	81 e0       	ldi	r24, 0x01	; 1
	{
		if (!game.player.shot[i].active) return i;
    a24e:	08 95       	ret
	}
	return 0;
    a250:	80 e0       	ldi	r24, 0x00	; 0
}
    a252:	08 95       	ret

0000a254 <update_shot>:

void update_shot()
{
    a254:	8f 92       	push	r8
    a256:	9f 92       	push	r9
    a258:	af 92       	push	r10
    a25a:	bf 92       	push	r11
    a25c:	df 92       	push	r13
    a25e:	ef 92       	push	r14
    a260:	ff 92       	push	r15
    a262:	0f 93       	push	r16
    a264:	1f 93       	push	r17
    a266:	cf 93       	push	r28
    a268:	df 93       	push	r29
	// Shot updates
	u8 idx;
	if (game.joypadState.pressed & BTN_A && game.player.active_shots < MAX_PLAYER_SHOTS)
    a26a:	80 91 9a 0f 	lds	r24, 0x0F9A
    a26e:	90 91 9b 0f 	lds	r25, 0x0F9B
    a272:	90 ff       	sbrs	r25, 0
    a274:	df c0       	rjmp	.+446    	; 0xa434 <update_shot+0x1e0>
    a276:	80 91 d3 0d 	lds	r24, 0x0DD3
    a27a:	83 30       	cpi	r24, 0x03	; 3
    a27c:	08 f0       	brcs	.+2      	; 0xa280 <update_shot+0x2c>
    a27e:	da c0       	rjmp	.+436    	; 0xa434 <update_shot+0x1e0>
	{
		SFX_PLAYER_SHOOT;
    a280:	2f ef       	ldi	r18, 0xFF	; 255
    a282:	43 e2       	ldi	r20, 0x23	; 35
    a284:	63 e0       	ldi	r22, 0x03	; 3
    a286:	82 e0       	ldi	r24, 0x02	; 2
    a288:	0e 94 ec 3d 	call	0x7bd8	; 0x7bd8 <TriggerNote>
		idx = find_shot_slot();
    a28c:	0e 94 18 51 	call	0xa230	; 0xa230 <find_shot_slot>
    a290:	f8 2e       	mov	r15, r24
		LBMapSprite(PLAYER_SHOT_SLOT+idx, LBGetNextFrame(&game.player.shot[idx].anim), 0);
    a292:	08 2f       	mov	r16, r24
    a294:	10 e0       	ldi	r17, 0x00	; 0
    a296:	9a e1       	ldi	r25, 0x1A	; 26
    a298:	d9 2e       	mov	r13, r25
    a29a:	d0 9e       	mul	r13, r16
    a29c:	e0 01       	movw	r28, r0
    a29e:	d1 9e       	mul	r13, r17
    a2a0:	d0 0d       	add	r29, r0
    a2a2:	11 24       	eor	r1, r1
    a2a4:	ce 01       	movw	r24, r28
    a2a6:	84 51       	subi	r24, 0x14	; 20
    a2a8:	92 4f       	sbci	r25, 0xF2	; 242
    a2aa:	0e 94 62 49 	call	0x92c4	; 0x92c4 <LBGetNextFrame>
    a2ae:	40 e0       	ldi	r20, 0x00	; 0
    a2b0:	bc 01       	movw	r22, r24
    a2b2:	8b e0       	ldi	r24, 0x0B	; 11
    a2b4:	8f 0d       	add	r24, r15
    a2b6:	0e 94 c4 4a 	call	0x9588	; 0x9588 <LBMapSprite>
		game.player.shot[idx].active = 1;
    a2ba:	ca 55       	subi	r28, 0x5A	; 90
    a2bc:	d2 4f       	sbci	r29, 0xF2	; 242
    a2be:	fe 01       	movw	r30, r28
    a2c0:	eb 5b       	subi	r30, 0xBB	; 187
    a2c2:	ff 4f       	sbci	r31, 0xFF	; 255
    a2c4:	81 e0       	ldi	r24, 0x01	; 1
    a2c6:	80 83       	st	Z, r24
		game.player.shot[idx].shared.y = (u16) game.player.shared.y / 8 * 8;
    a2c8:	60 91 cc 0d 	lds	r22, 0x0DCC
    a2cc:	70 91 cd 0d 	lds	r23, 0x0DCD
    a2d0:	80 91 ce 0d 	lds	r24, 0x0DCE
    a2d4:	90 91 cf 0d 	lds	r25, 0x0DCF
    a2d8:	0e 94 38 68 	call	0xd070	; 0xd070 <__fixunssfsi>
    a2dc:	23 e0       	ldi	r18, 0x03	; 3
    a2de:	76 95       	lsr	r23
    a2e0:	67 95       	ror	r22
    a2e2:	2a 95       	dec	r18
    a2e4:	e1 f7       	brne	.-8      	; 0xa2de <update_shot+0x8a>
    a2e6:	33 e0       	ldi	r19, 0x03	; 3
    a2e8:	66 0f       	add	r22, r22
    a2ea:	77 1f       	adc	r23, r23
    a2ec:	3a 95       	dec	r19
    a2ee:	e1 f7       	brne	.-8      	; 0xa2e8 <update_shot+0x94>
    a2f0:	80 e0       	ldi	r24, 0x00	; 0
    a2f2:	90 e0       	ldi	r25, 0x00	; 0
    a2f4:	0e 94 64 68 	call	0xd0c8	; 0xd0c8 <__floatunsisf>
    a2f8:	4b 01       	movw	r8, r22
    a2fa:	5c 01       	movw	r10, r24
    a2fc:	6c af       	std	Y+60, r22	; 0x3c
    a2fe:	7d af       	std	Y+61, r23	; 0x3d
    a300:	8e af       	std	Y+62, r24	; 0x3e
    a302:	9f af       	std	Y+63, r25	; 0x3f
		if (is_space())
    a304:	0e 94 93 4b 	call	0x9726	; 0x9726 <is_space>
    a308:	98 01       	movw	r18, r16
    a30a:	2f 5f       	subi	r18, 0xFF	; 255
    a30c:	3f 4f       	sbci	r19, 0xFF	; 255
    a30e:	79 01       	movw	r14, r18
    a310:	88 23       	and	r24, r24
    a312:	59 f1       	breq	.+86     	; 0xa36a <update_shot+0x116>
		{
			game.player.shot[idx].shared.x = game.player.shared.x+game.player.width*8;
    a314:	60 91 d7 0d 	lds	r22, 0x0DD7
    a318:	d2 9e       	mul	r13, r18
    a31a:	80 01       	movw	r16, r0
    a31c:	d3 9e       	mul	r13, r19
    a31e:	10 0d       	add	r17, r0
    a320:	11 24       	eor	r1, r1
    a322:	0a 55       	subi	r16, 0x5A	; 90
    a324:	12 4f       	sbci	r17, 0xF2	; 242
    a326:	38 e0       	ldi	r19, 0x08	; 8
    a328:	63 9f       	mul	r22, r19
    a32a:	b0 01       	movw	r22, r0
    a32c:	11 24       	eor	r1, r1
    a32e:	88 27       	eor	r24, r24
    a330:	77 fd       	sbrc	r23, 7
    a332:	80 95       	com	r24
    a334:	98 2f       	mov	r25, r24
    a336:	0e 94 66 68 	call	0xd0cc	; 0xd0cc <__floatsisf>
    a33a:	9b 01       	movw	r18, r22
    a33c:	ac 01       	movw	r20, r24
    a33e:	60 91 c8 0d 	lds	r22, 0x0DC8
    a342:	70 91 c9 0d 	lds	r23, 0x0DC9
    a346:	80 91 ca 0d 	lds	r24, 0x0DCA
    a34a:	90 91 cb 0d 	lds	r25, 0x0DCB
    a34e:	0e 94 d0 67 	call	0xcfa0	; 0xcfa0 <__addsf3>
    a352:	f8 01       	movw	r30, r16
    a354:	66 8f       	std	Z+30, r22	; 0x1e
    a356:	77 8f       	std	Z+31, r23	; 0x1f
    a358:	80 a3       	std	Z+32, r24	; 0x20
    a35a:	91 a3       	std	Z+33, r25	; 0x21
			game.player.shot[idx].shared.vx = SHOT_SPEED;
    a35c:	c0 5c       	subi	r28, 0xC0	; 192
    a35e:	df 4f       	sbci	r29, 0xFF	; 255
    a360:	80 e9       	ldi	r24, 0x90	; 144
    a362:	91 e0       	ldi	r25, 0x01	; 1
    a364:	99 83       	std	Y+1, r25	; 0x01
    a366:	88 83       	st	Y, r24
    a368:	60 c0       	rjmp	.+192    	; 0xa42a <update_shot+0x1d6>
		}
		else
		{
			if (!(game.player.flags & PRONE))
    a36a:	80 91 d4 0d 	lds	r24, 0x0DD4
    a36e:	82 fd       	sbrc	r24, 2
    a370:	0c c0       	rjmp	.+24     	; 0xa38a <update_shot+0x136>
			{
				game.player.shot[idx].shared.y += 8;
    a372:	20 e0       	ldi	r18, 0x00	; 0
    a374:	30 e0       	ldi	r19, 0x00	; 0
    a376:	40 e0       	ldi	r20, 0x00	; 0
    a378:	51 e4       	ldi	r21, 0x41	; 65
    a37a:	c5 01       	movw	r24, r10
    a37c:	b4 01       	movw	r22, r8
    a37e:	0e 94 d0 67 	call	0xcfa0	; 0xcfa0 <__addsf3>
    a382:	6c af       	std	Y+60, r22	; 0x3c
    a384:	7d af       	std	Y+61, r23	; 0x3d
    a386:	8e af       	std	Y+62, r24	; 0x3e
    a388:	9f af       	std	Y+63, r25	; 0x3f
			}
			if (game.player.direction == D_RIGHT)
    a38a:	80 91 d6 0d 	lds	r24, 0x0DD6
    a38e:	81 30       	cpi	r24, 0x01	; 1
    a390:	39 f5       	brne	.+78     	; 0xa3e0 <update_shot+0x18c>
			{
				game.player.shot[idx].shared.x = game.player.shared.x+2*8;
    a392:	8a e1       	ldi	r24, 0x1A	; 26
    a394:	d8 2e       	mov	r13, r24
    a396:	de 9c       	mul	r13, r14
    a398:	e0 01       	movw	r28, r0
    a39a:	df 9c       	mul	r13, r15
    a39c:	d0 0d       	add	r29, r0
    a39e:	11 24       	eor	r1, r1
    a3a0:	ca 55       	subi	r28, 0x5A	; 90
    a3a2:	d2 4f       	sbci	r29, 0xF2	; 242
    a3a4:	20 e0       	ldi	r18, 0x00	; 0
    a3a6:	30 e0       	ldi	r19, 0x00	; 0
    a3a8:	40 e8       	ldi	r20, 0x80	; 128
    a3aa:	51 e4       	ldi	r21, 0x41	; 65
    a3ac:	60 91 c8 0d 	lds	r22, 0x0DC8
    a3b0:	70 91 c9 0d 	lds	r23, 0x0DC9
    a3b4:	80 91 ca 0d 	lds	r24, 0x0DCA
    a3b8:	90 91 cb 0d 	lds	r25, 0x0DCB
    a3bc:	0e 94 d0 67 	call	0xcfa0	; 0xcfa0 <__addsf3>
    a3c0:	6e 8f       	std	Y+30, r22	; 0x1e
    a3c2:	7f 8f       	std	Y+31, r23	; 0x1f
    a3c4:	88 a3       	std	Y+32, r24	; 0x20
    a3c6:	99 a3       	std	Y+33, r25	; 0x21
				game.player.shot[idx].shared.vx = SHOT_SPEED;
    a3c8:	d0 9e       	mul	r13, r16
    a3ca:	f0 01       	movw	r30, r0
    a3cc:	d1 9e       	mul	r13, r17
    a3ce:	f0 0d       	add	r31, r0
    a3d0:	11 24       	eor	r1, r1
    a3d2:	ea 51       	subi	r30, 0x1A	; 26
    a3d4:	f2 4f       	sbci	r31, 0xF2	; 242
    a3d6:	80 e9       	ldi	r24, 0x90	; 144
    a3d8:	91 e0       	ldi	r25, 0x01	; 1
    a3da:	91 83       	std	Z+1, r25	; 0x01
    a3dc:	80 83       	st	Z, r24
    a3de:	25 c0       	rjmp	.+74     	; 0xa42a <update_shot+0x1d6>
			}
			else
			{
				game.player.shot[idx].shared.vx = -SHOT_SPEED;
    a3e0:	8a e1       	ldi	r24, 0x1A	; 26
    a3e2:	80 9f       	mul	r24, r16
    a3e4:	f0 01       	movw	r30, r0
    a3e6:	81 9f       	mul	r24, r17
    a3e8:	f0 0d       	add	r31, r0
    a3ea:	11 24       	eor	r1, r1
    a3ec:	ea 51       	subi	r30, 0x1A	; 26
    a3ee:	f2 4f       	sbci	r31, 0xF2	; 242
    a3f0:	20 e7       	ldi	r18, 0x70	; 112
    a3f2:	3e ef       	ldi	r19, 0xFE	; 254
    a3f4:	31 83       	std	Z+1, r19	; 0x01
    a3f6:	20 83       	st	Z, r18
				game.player.shot[idx].shared.x = game.player.shared.x-1*8;
    a3f8:	8e 9d       	mul	r24, r14
    a3fa:	e0 01       	movw	r28, r0
    a3fc:	8f 9d       	mul	r24, r15
    a3fe:	d0 0d       	add	r29, r0
    a400:	11 24       	eor	r1, r1
    a402:	ca 55       	subi	r28, 0x5A	; 90
    a404:	d2 4f       	sbci	r29, 0xF2	; 242
    a406:	20 e0       	ldi	r18, 0x00	; 0
    a408:	30 e0       	ldi	r19, 0x00	; 0
    a40a:	40 e0       	ldi	r20, 0x00	; 0
    a40c:	51 e4       	ldi	r21, 0x41	; 65
    a40e:	60 91 c8 0d 	lds	r22, 0x0DC8
    a412:	70 91 c9 0d 	lds	r23, 0x0DC9
    a416:	80 91 ca 0d 	lds	r24, 0x0DCA
    a41a:	90 91 cb 0d 	lds	r25, 0x0DCB
    a41e:	0e 94 cf 67 	call	0xcf9e	; 0xcf9e <__subsf3>
    a422:	6e 8f       	std	Y+30, r22	; 0x1e
    a424:	7f 8f       	std	Y+31, r23	; 0x1f
    a426:	88 a3       	std	Y+32, r24	; 0x20
    a428:	99 a3       	std	Y+33, r25	; 0x21
			}
		}
		game.player.active_shots++;
    a42a:	80 91 d3 0d 	lds	r24, 0x0DD3
    a42e:	8f 5f       	subi	r24, 0xFF	; 255
    a430:	80 93 d3 0d 	sts	0x0DD3, r24
	}
}
    a434:	df 91       	pop	r29
    a436:	cf 91       	pop	r28
    a438:	1f 91       	pop	r17
    a43a:	0f 91       	pop	r16
    a43c:	ff 90       	pop	r15
    a43e:	ef 90       	pop	r14
    a440:	df 90       	pop	r13
    a442:	bf 90       	pop	r11
    a444:	af 90       	pop	r10
    a446:	9f 90       	pop	r9
    a448:	8f 90       	pop	r8
    a44a:	08 95       	ret

0000a44c <pixel_overlap>:
		}
	}
}

u8 pixel_overlap(u16 s1, u16 s2, u8 w1, u8 w2)
{
    a44c:	fc 01       	movw	r30, r24
	u8 result = w1;
	
	if (s2 > s1)
    a44e:	86 17       	cp	r24, r22
    a450:	97 07       	cpc	r25, r23
    a452:	28 f4       	brcc	.+10     	; 0xa45e <pixel_overlap+0x12>
    a454:	94 2f       	mov	r25, r20
    a456:	9e 0f       	add	r25, r30
	{
		result -= s2 - s1;
    a458:	89 2f       	mov	r24, r25
    a45a:	86 1b       	sub	r24, r22
    a45c:	01 c0       	rjmp	.+2      	; 0xa460 <pixel_overlap+0x14>
	}
}

u8 pixel_overlap(u16 s1, u16 s2, u8 w1, u8 w2)
{
	u8 result = w1;
    a45e:	84 2f       	mov	r24, r20
	
	if (s2 > s1)
	{
		result -= s2 - s1;
	}
	s1 = s1 + w1;
    a460:	e4 0f       	add	r30, r20
    a462:	f1 1d       	adc	r31, r1
	s2 = s2 + w2;
    a464:	62 0f       	add	r22, r18
    a466:	71 1d       	adc	r23, r1
	if (s2 < s1)
    a468:	6e 17       	cp	r22, r30
    a46a:	7f 07       	cpc	r23, r31
    a46c:	10 f4       	brcc	.+4      	; 0xa472 <pixel_overlap+0x26>
	{
		result -= s1 - s2;
    a46e:	6e 1b       	sub	r22, r30
    a470:	86 0f       	add	r24, r22
	}
	return result;
}
    a472:	08 95       	ret

0000a474 <collision_detect_level>:

u8 collision_detect_level(SpriteShared* s, u8 tile_width, u8 tile_height)
{
    a474:	2f 92       	push	r2
    a476:	3f 92       	push	r3
    a478:	4f 92       	push	r4
    a47a:	5f 92       	push	r5
    a47c:	6f 92       	push	r6
    a47e:	7f 92       	push	r7
    a480:	8f 92       	push	r8
    a482:	9f 92       	push	r9
    a484:	af 92       	push	r10
    a486:	bf 92       	push	r11
    a488:	cf 92       	push	r12
    a48a:	df 92       	push	r13
    a48c:	ef 92       	push	r14
    a48e:	ff 92       	push	r15
    a490:	0f 93       	push	r16
    a492:	1f 93       	push	r17
    a494:	cf 93       	push	r28
    a496:	df 93       	push	r29
    a498:	cd b7       	in	r28, 0x3d	; 61
    a49a:	de b7       	in	r29, 0x3e	; 62
    a49c:	68 97       	sbiw	r28, 0x18	; 24
    a49e:	0f b6       	in	r0, 0x3f	; 63
    a4a0:	f8 94       	cli
    a4a2:	de bf       	out	0x3e, r29	; 62
    a4a4:	0f be       	out	0x3f, r0	; 63
    a4a6:	cd bf       	out	0x3d, r28	; 61
    a4a8:	98 8f       	std	Y+24, r25	; 0x18
    a4aa:	8f 8b       	std	Y+23, r24	; 0x17
    a4ac:	16 2f       	mov	r17, r22
    a4ae:	49 8b       	std	Y+17, r20	; 0x11
	u16 x0_tile = s->x / 8;
    a4b0:	dc 01       	movw	r26, r24
    a4b2:	14 96       	adiw	r26, 0x04	; 4
    a4b4:	4d 90       	ld	r4, X+
    a4b6:	5d 90       	ld	r5, X+
    a4b8:	6d 90       	ld	r6, X+
    a4ba:	7c 90       	ld	r7, X
    a4bc:	17 97       	sbiw	r26, 0x07	; 7
	u16 y0_tile = s->y / 8;
    a4be:	18 96       	adiw	r26, 0x08	; 8
    a4c0:	cd 90       	ld	r12, X+
    a4c2:	dd 90       	ld	r13, X+
    a4c4:	ed 90       	ld	r14, X+
    a4c6:	fc 90       	ld	r15, X
    a4c8:	1b 97       	sbiw	r26, 0x0b	; 11
	u16 y1_tile = (s->y+7) / 8;
	u8 lt1, lt2;
	u8 result = 0;
	
	// Only if moving on planet
	if (is_space() || (s->vx == 0 && s->vy == 0)) return result;
    a4ca:	0e 94 93 4b 	call	0x9726	; 0x9726 <is_space>
    a4ce:	81 11       	cpse	r24, r1
    a4d0:	f2 c2       	rjmp	.+1508   	; 0xaab6 <collision_detect_level+0x642>
    a4d2:	ef 89       	ldd	r30, Y+23	; 0x17
    a4d4:	f8 8d       	ldd	r31, Y+24	; 0x18
    a4d6:	84 85       	ldd	r24, Z+12	; 0x0c
    a4d8:	95 85       	ldd	r25, Z+13	; 0x0d
    a4da:	89 2b       	or	r24, r25
    a4dc:	61 f4       	brne	.+24     	; 0xa4f6 <collision_detect_level+0x82>
    a4de:	20 e0       	ldi	r18, 0x00	; 0
    a4e0:	30 e0       	ldi	r19, 0x00	; 0
    a4e2:	a9 01       	movw	r20, r18
    a4e4:	60 81       	ld	r22, Z
    a4e6:	71 81       	ldd	r23, Z+1	; 0x01
    a4e8:	82 81       	ldd	r24, Z+2	; 0x02
    a4ea:	93 81       	ldd	r25, Z+3	; 0x03
    a4ec:	0e 94 34 68 	call	0xd068	; 0xd068 <__cmpsf2>
    a4f0:	88 23       	and	r24, r24
    a4f2:	09 f4       	brne	.+2      	; 0xa4f6 <collision_detect_level+0x82>
    a4f4:	e0 c2       	rjmp	.+1472   	; 0xaab6 <collision_detect_level+0x642>
	return result;
}

u8 collision_detect_level(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u16 x0_tile = s->x / 8;
    a4f6:	20 e0       	ldi	r18, 0x00	; 0
    a4f8:	30 e0       	ldi	r19, 0x00	; 0
    a4fa:	40 e0       	ldi	r20, 0x00	; 0
    a4fc:	5e e3       	ldi	r21, 0x3E	; 62
    a4fe:	c3 01       	movw	r24, r6
    a500:	b2 01       	movw	r22, r4
    a502:	0e 94 1a 69 	call	0xd234	; 0xd234 <__mulsf3>
    a506:	0e 94 38 68 	call	0xd070	; 0xd070 <__fixunssfsi>
    a50a:	4b 01       	movw	r8, r22
    a50c:	5c 01       	movw	r10, r24
    a50e:	68 87       	std	Y+8, r22	; 0x08
    a510:	9a 8a       	std	Y+18, r9	; 0x12
	
	// Only if moving on planet
	if (is_space() || (s->vx == 0 && s->vy == 0)) return result;
	
	// Top and Bottom
	if (s->vy != 0)
    a512:	20 e0       	ldi	r18, 0x00	; 0
    a514:	30 e0       	ldi	r19, 0x00	; 0
    a516:	a9 01       	movw	r20, r18
    a518:	af 89       	ldd	r26, Y+23	; 0x17
    a51a:	b8 8d       	ldd	r27, Y+24	; 0x18
    a51c:	6d 91       	ld	r22, X+
    a51e:	7d 91       	ld	r23, X+
    a520:	8d 91       	ld	r24, X+
    a522:	9c 91       	ld	r25, X
    a524:	0e 94 34 68 	call	0xd068	; 0xd068 <__cmpsf2>
    a528:	88 23       	and	r24, r24
    a52a:	09 f4       	brne	.+2      	; 0xa52e <collision_detect_level+0xba>
    a52c:	67 c1       	rjmp	.+718    	; 0xa7fc <collision_detect_level+0x388>
}

u8 collision_detect_level(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u16 x0_tile = s->x / 8;
	u16 y0_tile = s->y / 8;
    a52e:	20 e0       	ldi	r18, 0x00	; 0
    a530:	30 e0       	ldi	r19, 0x00	; 0
    a532:	40 e0       	ldi	r20, 0x00	; 0
    a534:	5e e3       	ldi	r21, 0x3E	; 62
    a536:	c7 01       	movw	r24, r14
    a538:	b6 01       	movw	r22, r12
    a53a:	0e 94 1a 69 	call	0xd234	; 0xd234 <__mulsf3>
    a53e:	0e 94 38 68 	call	0xd070	; 0xd070 <__fixunssfsi>
    a542:	6b 01       	movw	r12, r22
    a544:	7c 01       	movw	r14, r24
    a546:	1b 01       	movw	r2, r22
	u16 x1_tile = (s->x+7) / 8;
    a548:	20 e0       	ldi	r18, 0x00	; 0
    a54a:	30 e0       	ldi	r19, 0x00	; 0
    a54c:	40 ee       	ldi	r20, 0xE0	; 224
    a54e:	50 e4       	ldi	r21, 0x40	; 64
    a550:	c3 01       	movw	r24, r6
    a552:	b2 01       	movw	r22, r4
    a554:	0e 94 d0 67 	call	0xcfa0	; 0xcfa0 <__addsf3>
    a558:	20 e0       	ldi	r18, 0x00	; 0
    a55a:	30 e0       	ldi	r19, 0x00	; 0
    a55c:	40 e0       	ldi	r20, 0x00	; 0
    a55e:	5e e3       	ldi	r21, 0x3E	; 62
    a560:	0e 94 1a 69 	call	0xd234	; 0xd234 <__mulsf3>
    a564:	0e 94 38 68 	call	0xd070	; 0xd070 <__fixunssfsi>
		{
			if (s->vy < 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, y0_tile);
				lt2 = get_level_tile(game.current_level, x1_tile + x, y0_tile);
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    a568:	f4 01       	movw	r30, r8
    a56a:	53 e0       	ldi	r21, 0x03	; 3
    a56c:	ee 0f       	add	r30, r30
    a56e:	ff 1f       	adc	r31, r31
    a570:	5a 95       	dec	r21
    a572:	e1 f7       	brne	.-8      	; 0xa56c <collision_detect_level+0xf8>
    a574:	fb 83       	std	Y+3, r31	; 0x03
    a576:	ea 83       	std	Y+2, r30	; 0x02
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    a578:	9b 01       	movw	r18, r22
    a57a:	e3 e0       	ldi	r30, 0x03	; 3
    a57c:	22 0f       	add	r18, r18
    a57e:	33 1f       	adc	r19, r19
    a580:	ea 95       	dec	r30
    a582:	e1 f7       	brne	.-8      	; 0xa57c <collision_detect_level+0x108>
    a584:	3d 83       	std	Y+5, r19	; 0x05
    a586:	2c 83       	std	Y+4, r18	; 0x04
				{
					s->vy =  0;
					s->y = (y0_tile + 1) * 8;
    a588:	3f ef       	ldi	r19, 0xFF	; 255
    a58a:	c3 1a       	sub	r12, r19
    a58c:	d3 0a       	sbc	r13, r19
    a58e:	f3 e0       	ldi	r31, 0x03	; 3
    a590:	cc 0c       	add	r12, r12
    a592:	dd 1c       	adc	r13, r13
    a594:	fa 95       	dec	r31
    a596:	e1 f7       	brne	.-8      	; 0xa590 <collision_detect_level+0x11c>
					result = 1;
				}
			}
			if (s->vy > 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, (s->y + tile_height*8 - 1) / 8);
    a598:	b9 89       	ldd	r27, Y+17	; 0x11
    a59a:	a8 e0       	ldi	r26, 0x08	; 8
    a59c:	ba 9f       	mul	r27, r26
    a59e:	a0 01       	movw	r20, r0
    a5a0:	11 24       	eor	r1, r1
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) || 
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vy =  0;
					s->gravity = 0;
					s->y = y0_tile * 8;
    a5a2:	96 01       	movw	r18, r12
    a5a4:	28 50       	subi	r18, 0x08	; 8
    a5a6:	31 09       	sbc	r19, r1
    a5a8:	2b 01       	movw	r4, r22
    a5aa:	34 01       	movw	r6, r8
    a5ac:	19 82       	std	Y+1, r1	; 0x01
				lt2 = get_level_tile(game.current_level, x1_tile + x, y0_tile);
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vy =  0;
					s->y = (y0_tile + 1) * 8;
    a5ae:	b6 01       	movw	r22, r12
    a5b0:	80 e0       	ldi	r24, 0x00	; 0
    a5b2:	90 e0       	ldi	r25, 0x00	; 0
    a5b4:	69 87       	std	Y+9, r22	; 0x09
    a5b6:	7a 87       	std	Y+10, r23	; 0x0a
    a5b8:	8b 87       	std	Y+11, r24	; 0x0b
    a5ba:	9c 87       	std	Y+12, r25	; 0x0c
					result = 1;
				}
			}
			if (s->vy > 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, (s->y + tile_height*8 - 1) / 8);
    a5bc:	66 27       	eor	r22, r22
    a5be:	57 fd       	sbrc	r21, 7
    a5c0:	60 95       	com	r22
    a5c2:	76 2f       	mov	r23, r22
    a5c4:	4d 87       	std	Y+13, r20	; 0x0d
    a5c6:	5e 87       	std	Y+14, r21	; 0x0e
    a5c8:	6f 87       	std	Y+15, r22	; 0x0f
    a5ca:	78 8b       	std	Y+16, r23	; 0x10
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) || 
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vy =  0;
					s->gravity = 0;
					s->y = y0_tile * 8;
    a5cc:	b9 01       	movw	r22, r18
    a5ce:	80 e0       	ldi	r24, 0x00	; 0
    a5d0:	90 e0       	ldi	r25, 0x00	; 0
    a5d2:	6b 8b       	std	Y+19, r22	; 0x13
    a5d4:	7c 8b       	std	Y+20, r23	; 0x14
    a5d6:	8d 8b       	std	Y+21, r24	; 0x15
    a5d8:	9e 8b       	std	Y+22, r25	; 0x16
    a5da:	86 2d       	mov	r24, r6
    a5dc:	48 85       	ldd	r20, Y+8	; 0x08
    a5de:	84 1b       	sub	r24, r20
	if (is_space() || (s->vx == 0 && s->vy == 0)) return result;
	
	// Top and Bottom
	if (s->vy != 0)
	{
		for (u8 x = 0; x < tile_width; x++)
    a5e0:	81 17       	cp	r24, r17
    a5e2:	08 f0       	brcs	.+2      	; 0xa5e6 <collision_detect_level+0x172>
    a5e4:	0c c1       	rjmp	.+536    	; 0xa7fe <collision_detect_level+0x38a>
		{
			if (s->vy < 0)
    a5e6:	20 e0       	ldi	r18, 0x00	; 0
    a5e8:	30 e0       	ldi	r19, 0x00	; 0
    a5ea:	a9 01       	movw	r20, r18
    a5ec:	af 89       	ldd	r26, Y+23	; 0x17
    a5ee:	b8 8d       	ldd	r27, Y+24	; 0x18
    a5f0:	6d 91       	ld	r22, X+
    a5f2:	7d 91       	ld	r23, X+
    a5f4:	8d 91       	ld	r24, X+
    a5f6:	9c 91       	ld	r25, X
    a5f8:	0e 94 34 68 	call	0xd068	; 0xd068 <__cmpsf2>
    a5fc:	87 ff       	sbrs	r24, 7
    a5fe:	58 c0       	rjmp	.+176    	; 0xa6b0 <collision_detect_level+0x23c>
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, y0_tile);
    a600:	a1 01       	movw	r20, r2
    a602:	b3 01       	movw	r22, r6
    a604:	80 91 a1 0f 	lds	r24, 0x0FA1
    a608:	90 91 a2 0f 	lds	r25, 0x0FA2
    a60c:	0e 94 08 4e 	call	0x9c10	; 0x9c10 <get_level_tile>
    a610:	f8 2e       	mov	r15, r24
				lt2 = get_level_tile(game.current_level, x1_tile + x, y0_tile);
    a612:	a1 01       	movw	r20, r2
    a614:	b2 01       	movw	r22, r4
    a616:	80 91 a1 0f 	lds	r24, 0x0FA1
    a61a:	90 91 a2 0f 	lds	r25, 0x0FA2
    a61e:	0e 94 08 4e 	call	0x9c10	; 0x9c10 <get_level_tile>
    a622:	08 2f       	mov	r16, r24
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    a624:	8f 2d       	mov	r24, r15
    a626:	0e 94 d9 4e 	call	0x9db2	; 0x9db2 <solid_tile>
    a62a:	88 23       	and	r24, r24
    a62c:	91 f0       	breq	.+36     	; 0xa652 <collision_detect_level+0x1de>
    a62e:	ef 89       	ldd	r30, Y+23	; 0x17
    a630:	f8 8d       	ldd	r31, Y+24	; 0x18
    a632:	64 81       	ldd	r22, Z+4	; 0x04
    a634:	75 81       	ldd	r23, Z+5	; 0x05
    a636:	86 81       	ldd	r24, Z+6	; 0x06
    a638:	97 81       	ldd	r25, Z+7	; 0x07
    a63a:	0e 94 38 68 	call	0xd070	; 0xd070 <__fixunssfsi>
    a63e:	dc 01       	movw	r26, r24
    a640:	cb 01       	movw	r24, r22
    a642:	28 e0       	ldi	r18, 0x08	; 8
    a644:	48 e0       	ldi	r20, 0x08	; 8
    a646:	6a 81       	ldd	r22, Y+2	; 0x02
    a648:	7b 81       	ldd	r23, Y+3	; 0x03
    a64a:	0e 94 26 52 	call	0xa44c	; 0xa44c <pixel_overlap>
    a64e:	84 30       	cpi	r24, 0x04	; 4
    a650:	c8 f4       	brcc	.+50     	; 0xa684 <collision_detect_level+0x210>
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    a652:	80 2f       	mov	r24, r16
    a654:	0e 94 d9 4e 	call	0x9db2	; 0x9db2 <solid_tile>
		{
			if (s->vy < 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, y0_tile);
				lt2 = get_level_tile(game.current_level, x1_tile + x, y0_tile);
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    a658:	88 23       	and	r24, r24
    a65a:	51 f1       	breq	.+84     	; 0xa6b0 <collision_detect_level+0x23c>
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    a65c:	af 89       	ldd	r26, Y+23	; 0x17
    a65e:	b8 8d       	ldd	r27, Y+24	; 0x18
    a660:	14 96       	adiw	r26, 0x04	; 4
    a662:	6d 91       	ld	r22, X+
    a664:	7d 91       	ld	r23, X+
    a666:	8d 91       	ld	r24, X+
    a668:	9c 91       	ld	r25, X
    a66a:	17 97       	sbiw	r26, 0x07	; 7
    a66c:	0e 94 38 68 	call	0xd070	; 0xd070 <__fixunssfsi>
    a670:	dc 01       	movw	r26, r24
    a672:	cb 01       	movw	r24, r22
    a674:	28 e0       	ldi	r18, 0x08	; 8
    a676:	48 e0       	ldi	r20, 0x08	; 8
    a678:	6c 81       	ldd	r22, Y+4	; 0x04
    a67a:	7d 81       	ldd	r23, Y+5	; 0x05
    a67c:	0e 94 26 52 	call	0xa44c	; 0xa44c <pixel_overlap>
    a680:	84 30       	cpi	r24, 0x04	; 4
    a682:	b0 f0       	brcs	.+44     	; 0xa6b0 <collision_detect_level+0x23c>
				{
					s->vy =  0;
    a684:	ef 89       	ldd	r30, Y+23	; 0x17
    a686:	f8 8d       	ldd	r31, Y+24	; 0x18
    a688:	10 82       	st	Z, r1
    a68a:	11 82       	std	Z+1, r1	; 0x01
    a68c:	12 82       	std	Z+2, r1	; 0x02
    a68e:	13 82       	std	Z+3, r1	; 0x03
					s->y = (y0_tile + 1) * 8;
    a690:	69 85       	ldd	r22, Y+9	; 0x09
    a692:	7a 85       	ldd	r23, Y+10	; 0x0a
    a694:	8b 85       	ldd	r24, Y+11	; 0x0b
    a696:	9c 85       	ldd	r25, Y+12	; 0x0c
    a698:	0e 94 64 68 	call	0xd0c8	; 0xd0c8 <__floatunsisf>
    a69c:	af 89       	ldd	r26, Y+23	; 0x17
    a69e:	b8 8d       	ldd	r27, Y+24	; 0x18
    a6a0:	18 96       	adiw	r26, 0x08	; 8
    a6a2:	6d 93       	st	X+, r22
    a6a4:	7d 93       	st	X+, r23
    a6a6:	8d 93       	st	X+, r24
    a6a8:	9c 93       	st	X, r25
    a6aa:	1b 97       	sbiw	r26, 0x0b	; 11
					result = 1;
    a6ac:	b1 e0       	ldi	r27, 0x01	; 1
    a6ae:	b9 83       	std	Y+1, r27	; 0x01
				}
			}
			if (s->vy > 0)
    a6b0:	20 e0       	ldi	r18, 0x00	; 0
    a6b2:	30 e0       	ldi	r19, 0x00	; 0
    a6b4:	a9 01       	movw	r20, r18
    a6b6:	ef 89       	ldd	r30, Y+23	; 0x17
    a6b8:	f8 8d       	ldd	r31, Y+24	; 0x18
    a6ba:	60 81       	ld	r22, Z
    a6bc:	71 81       	ldd	r23, Z+1	; 0x01
    a6be:	82 81       	ldd	r24, Z+2	; 0x02
    a6c0:	93 81       	ldd	r25, Z+3	; 0x03
    a6c2:	0e 94 16 69 	call	0xd22c	; 0xd22c <__gesf2>
    a6c6:	18 16       	cp	r1, r24
    a6c8:	0c f0       	brlt	.+2      	; 0xa6cc <collision_detect_level+0x258>
    a6ca:	91 c0       	rjmp	.+290    	; 0xa7ee <collision_detect_level+0x37a>
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, (s->y + tile_height*8 - 1) / 8);
    a6cc:	6d 85       	ldd	r22, Y+13	; 0x0d
    a6ce:	7e 85       	ldd	r23, Y+14	; 0x0e
    a6d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    a6d2:	98 89       	ldd	r25, Y+16	; 0x10
    a6d4:	0e 94 66 68 	call	0xd0cc	; 0xd0cc <__floatsisf>
    a6d8:	6b 01       	movw	r12, r22
    a6da:	7c 01       	movw	r14, r24
    a6dc:	af 89       	ldd	r26, Y+23	; 0x17
    a6de:	b8 8d       	ldd	r27, Y+24	; 0x18
    a6e0:	18 96       	adiw	r26, 0x08	; 8
    a6e2:	2d 91       	ld	r18, X+
    a6e4:	3d 91       	ld	r19, X+
    a6e6:	4d 91       	ld	r20, X+
    a6e8:	5c 91       	ld	r21, X
    a6ea:	1b 97       	sbiw	r26, 0x0b	; 11
    a6ec:	0e 94 d0 67 	call	0xcfa0	; 0xcfa0 <__addsf3>
    a6f0:	20 e0       	ldi	r18, 0x00	; 0
    a6f2:	30 e0       	ldi	r19, 0x00	; 0
    a6f4:	40 e8       	ldi	r20, 0x80	; 128
    a6f6:	5f e3       	ldi	r21, 0x3F	; 63
    a6f8:	0e 94 cf 67 	call	0xcf9e	; 0xcf9e <__subsf3>
    a6fc:	20 e0       	ldi	r18, 0x00	; 0
    a6fe:	30 e0       	ldi	r19, 0x00	; 0
    a700:	40 e0       	ldi	r20, 0x00	; 0
    a702:	5e e3       	ldi	r21, 0x3E	; 62
    a704:	0e 94 1a 69 	call	0xd234	; 0xd234 <__mulsf3>
    a708:	0e 94 38 68 	call	0xd070	; 0xd070 <__fixunssfsi>
    a70c:	ab 01       	movw	r20, r22
    a70e:	b3 01       	movw	r22, r6
    a710:	80 91 a1 0f 	lds	r24, 0x0FA1
    a714:	90 91 a2 0f 	lds	r25, 0x0FA2
    a718:	0e 94 08 4e 	call	0x9c10	; 0x9c10 <get_level_tile>
    a71c:	08 2f       	mov	r16, r24
				lt2 = get_level_tile(game.current_level, x1_tile + x, (s->y + tile_height*8 - 1) / 8);
    a71e:	ef 89       	ldd	r30, Y+23	; 0x17
    a720:	f8 8d       	ldd	r31, Y+24	; 0x18
    a722:	20 85       	ldd	r18, Z+8	; 0x08
    a724:	31 85       	ldd	r19, Z+9	; 0x09
    a726:	42 85       	ldd	r20, Z+10	; 0x0a
    a728:	53 85       	ldd	r21, Z+11	; 0x0b
    a72a:	c7 01       	movw	r24, r14
    a72c:	b6 01       	movw	r22, r12
    a72e:	0e 94 d0 67 	call	0xcfa0	; 0xcfa0 <__addsf3>
    a732:	20 e0       	ldi	r18, 0x00	; 0
    a734:	30 e0       	ldi	r19, 0x00	; 0
    a736:	40 e8       	ldi	r20, 0x80	; 128
    a738:	5f e3       	ldi	r21, 0x3F	; 63
    a73a:	0e 94 cf 67 	call	0xcf9e	; 0xcf9e <__subsf3>
    a73e:	20 e0       	ldi	r18, 0x00	; 0
    a740:	30 e0       	ldi	r19, 0x00	; 0
    a742:	40 e0       	ldi	r20, 0x00	; 0
    a744:	5e e3       	ldi	r21, 0x3E	; 62
    a746:	0e 94 1a 69 	call	0xd234	; 0xd234 <__mulsf3>
    a74a:	0e 94 38 68 	call	0xd070	; 0xd070 <__fixunssfsi>
    a74e:	ab 01       	movw	r20, r22
    a750:	b2 01       	movw	r22, r4
    a752:	80 91 a1 0f 	lds	r24, 0x0FA1
    a756:	90 91 a2 0f 	lds	r25, 0x0FA2
    a75a:	0e 94 08 4e 	call	0x9c10	; 0x9c10 <get_level_tile>
    a75e:	f8 2e       	mov	r15, r24
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) || 
    a760:	80 2f       	mov	r24, r16
    a762:	0e 94 d9 4e 	call	0x9db2	; 0x9db2 <solid_tile>
    a766:	88 23       	and	r24, r24
    a768:	a1 f0       	breq	.+40     	; 0xa792 <collision_detect_level+0x31e>
    a76a:	af 89       	ldd	r26, Y+23	; 0x17
    a76c:	b8 8d       	ldd	r27, Y+24	; 0x18
    a76e:	14 96       	adiw	r26, 0x04	; 4
    a770:	6d 91       	ld	r22, X+
    a772:	7d 91       	ld	r23, X+
    a774:	8d 91       	ld	r24, X+
    a776:	9c 91       	ld	r25, X
    a778:	17 97       	sbiw	r26, 0x07	; 7
    a77a:	0e 94 38 68 	call	0xd070	; 0xd070 <__fixunssfsi>
    a77e:	dc 01       	movw	r26, r24
    a780:	cb 01       	movw	r24, r22
    a782:	28 e0       	ldi	r18, 0x08	; 8
    a784:	48 e0       	ldi	r20, 0x08	; 8
    a786:	6a 81       	ldd	r22, Y+2	; 0x02
    a788:	7b 81       	ldd	r23, Y+3	; 0x03
    a78a:	0e 94 26 52 	call	0xa44c	; 0xa44c <pixel_overlap>
    a78e:	84 30       	cpi	r24, 0x04	; 4
    a790:	b8 f4       	brcc	.+46     	; 0xa7c0 <collision_detect_level+0x34c>
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    a792:	8f 2d       	mov	r24, r15
    a794:	0e 94 d9 4e 	call	0x9db2	; 0x9db2 <solid_tile>
			}
			if (s->vy > 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, (s->y + tile_height*8 - 1) / 8);
				lt2 = get_level_tile(game.current_level, x1_tile + x, (s->y + tile_height*8 - 1) / 8);
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) || 
    a798:	88 23       	and	r24, r24
    a79a:	49 f1       	breq	.+82     	; 0xa7ee <collision_detect_level+0x37a>
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    a79c:	ef 89       	ldd	r30, Y+23	; 0x17
    a79e:	f8 8d       	ldd	r31, Y+24	; 0x18
    a7a0:	64 81       	ldd	r22, Z+4	; 0x04
    a7a2:	75 81       	ldd	r23, Z+5	; 0x05
    a7a4:	86 81       	ldd	r24, Z+6	; 0x06
    a7a6:	97 81       	ldd	r25, Z+7	; 0x07
    a7a8:	0e 94 38 68 	call	0xd070	; 0xd070 <__fixunssfsi>
    a7ac:	dc 01       	movw	r26, r24
    a7ae:	cb 01       	movw	r24, r22
    a7b0:	28 e0       	ldi	r18, 0x08	; 8
    a7b2:	48 e0       	ldi	r20, 0x08	; 8
    a7b4:	6c 81       	ldd	r22, Y+4	; 0x04
    a7b6:	7d 81       	ldd	r23, Y+5	; 0x05
    a7b8:	0e 94 26 52 	call	0xa44c	; 0xa44c <pixel_overlap>
    a7bc:	84 30       	cpi	r24, 0x04	; 4
    a7be:	b8 f0       	brcs	.+46     	; 0xa7ee <collision_detect_level+0x37a>
				{
					s->vy =  0;
    a7c0:	af 89       	ldd	r26, Y+23	; 0x17
    a7c2:	b8 8d       	ldd	r27, Y+24	; 0x18
    a7c4:	1d 92       	st	X+, r1
    a7c6:	1d 92       	st	X+, r1
    a7c8:	1d 92       	st	X+, r1
    a7ca:	1c 92       	st	X, r1
    a7cc:	13 97       	sbiw	r26, 0x03	; 3
					s->gravity = 0;
    a7ce:	1e 96       	adiw	r26, 0x0e	; 14
    a7d0:	1c 92       	st	X, r1
					s->y = y0_tile * 8;
    a7d2:	6b 89       	ldd	r22, Y+19	; 0x13
    a7d4:	7c 89       	ldd	r23, Y+20	; 0x14
    a7d6:	8d 89       	ldd	r24, Y+21	; 0x15
    a7d8:	9e 89       	ldd	r25, Y+22	; 0x16
    a7da:	0e 94 64 68 	call	0xd0c8	; 0xd0c8 <__floatunsisf>
    a7de:	ef 89       	ldd	r30, Y+23	; 0x17
    a7e0:	f8 8d       	ldd	r31, Y+24	; 0x18
    a7e2:	60 87       	std	Z+8, r22	; 0x08
    a7e4:	71 87       	std	Z+9, r23	; 0x09
    a7e6:	82 87       	std	Z+10, r24	; 0x0a
    a7e8:	93 87       	std	Z+11, r25	; 0x0b
					result = 1;
    a7ea:	f1 e0       	ldi	r31, 0x01	; 1
    a7ec:	f9 83       	std	Y+1, r31	; 0x01
    a7ee:	2f ef       	ldi	r18, 0xFF	; 255
    a7f0:	62 1a       	sub	r6, r18
    a7f2:	72 0a       	sbc	r7, r18
    a7f4:	3f ef       	ldi	r19, 0xFF	; 255
    a7f6:	43 1a       	sub	r4, r19
    a7f8:	53 0a       	sbc	r5, r19
    a7fa:	ef ce       	rjmp	.-546    	; 0xa5da <collision_detect_level+0x166>
	u16 x0_tile = s->x / 8;
	u16 y0_tile = s->y / 8;
	u16 x1_tile = (s->x+7) / 8;
	u16 y1_tile = (s->y+7) / 8;
	u8 lt1, lt2;
	u8 result = 0;
    a7fc:	19 82       	std	Y+1, r1	; 0x01
			}
		}
	}
	
	// Left and Right
	if (s->vx != 0)
    a7fe:	af 89       	ldd	r26, Y+23	; 0x17
    a800:	b8 8d       	ldd	r27, Y+24	; 0x18
    a802:	1c 96       	adiw	r26, 0x0c	; 12
    a804:	8d 91       	ld	r24, X+
    a806:	9c 91       	ld	r25, X
    a808:	1d 97       	sbiw	r26, 0x0d	; 13
    a80a:	89 2b       	or	r24, r25
    a80c:	09 f4       	brne	.+2      	; 0xa810 <collision_detect_level+0x39c>
    a80e:	54 c1       	rjmp	.+680    	; 0xaab8 <collision_detect_level+0x644>
	{
		y0_tile = s->y / 8;
    a810:	18 96       	adiw	r26, 0x08	; 8
    a812:	cd 90       	ld	r12, X+
    a814:	dd 90       	ld	r13, X+
    a816:	ed 90       	ld	r14, X+
    a818:	fc 90       	ld	r15, X
    a81a:	1b 97       	sbiw	r26, 0x0b	; 11
    a81c:	20 e0       	ldi	r18, 0x00	; 0
    a81e:	30 e0       	ldi	r19, 0x00	; 0
    a820:	40 e0       	ldi	r20, 0x00	; 0
    a822:	5e e3       	ldi	r21, 0x3E	; 62
    a824:	c7 01       	movw	r24, r14
    a826:	b6 01       	movw	r22, r12
    a828:	0e 94 1a 69 	call	0xd234	; 0xd234 <__mulsf3>
    a82c:	0e 94 38 68 	call	0xd070	; 0xd070 <__fixunssfsi>
    a830:	2b 01       	movw	r4, r22
    a832:	3c 01       	movw	r6, r24
    a834:	6d 87       	std	Y+13, r22	; 0x0d
		y1_tile = (s->y+7) / 8;
    a836:	20 e0       	ldi	r18, 0x00	; 0
    a838:	30 e0       	ldi	r19, 0x00	; 0
    a83a:	40 ee       	ldi	r20, 0xE0	; 224
    a83c:	50 e4       	ldi	r21, 0x40	; 64
    a83e:	c7 01       	movw	r24, r14
    a840:	b6 01       	movw	r22, r12
    a842:	0e 94 d0 67 	call	0xcfa0	; 0xcfa0 <__addsf3>
    a846:	20 e0       	ldi	r18, 0x00	; 0
    a848:	30 e0       	ldi	r19, 0x00	; 0
    a84a:	40 e0       	ldi	r20, 0x00	; 0
    a84c:	5e e3       	ldi	r21, 0x3E	; 62
    a84e:	0e 94 1a 69 	call	0xd234	; 0xd234 <__mulsf3>
    a852:	0e 94 38 68 	call	0xd070	; 0xd070 <__fixunssfsi>
		{
			if (s->vx < 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile, y0_tile + y);
				lt2 = get_level_tile(game.current_level, x0_tile, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    a856:	12 01       	movw	r2, r4
    a858:	83 e0       	ldi	r24, 0x03	; 3
    a85a:	22 0c       	add	r2, r2
    a85c:	33 1c       	adc	r3, r3
    a85e:	8a 95       	dec	r24
    a860:	e1 f7       	brne	.-8      	; 0xa85a <collision_detect_level+0x3e6>
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    a862:	fb 01       	movw	r30, r22
    a864:	93 e0       	ldi	r25, 0x03	; 3
    a866:	ee 0f       	add	r30, r30
    a868:	ff 1f       	adc	r31, r31
    a86a:	9a 95       	dec	r25
    a86c:	e1 f7       	brne	.-8      	; 0xa866 <collision_detect_level+0x3f2>
    a86e:	fb 83       	std	Y+3, r31	; 0x03
    a870:	ea 83       	std	Y+2, r30	; 0x02
				{
					s->vx =  0;
					s->x = (x0_tile + 1) * 8;
    a872:	ff ef       	ldi	r31, 0xFF	; 255
    a874:	8f 1a       	sub	r8, r31
    a876:	9f 0a       	sbc	r9, r31
    a878:	94 01       	movw	r18, r8
    a87a:	43 e0       	ldi	r20, 0x03	; 3
    a87c:	22 0f       	add	r18, r18
    a87e:	33 1f       	adc	r19, r19
    a880:	4a 95       	dec	r20
    a882:	e1 f7       	brne	.-8      	; 0xa87c <collision_detect_level+0x408>
				}
			}
			
			if (s->vx > 0)
			{
				lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y0_tile + y);
    a884:	a8 e0       	ldi	r26, 0x08	; 8
    a886:	1a 9f       	mul	r17, r26
    a888:	a0 01       	movw	r20, r0
    a88a:	11 24       	eor	r1, r1
				lt2 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vx =  0;
					s->x = x0_tile * 8;
    a88c:	49 01       	movw	r8, r18
    a88e:	b8 e0       	ldi	r27, 0x08	; 8
    a890:	8b 1a       	sub	r8, r27
    a892:	91 08       	sbc	r9, r1
	// Left and Right
	if (s->vx != 0)
	{
		y0_tile = s->y / 8;
		y1_tile = (s->y+7) / 8;
		for (u8 y = 0; y < tile_height; y++)
    a894:	6b 01       	movw	r12, r22
    a896:	82 01       	movw	r16, r4
				lt2 = get_level_tile(game.current_level, x0_tile, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vx =  0;
					s->x = (x0_tile + 1) * 8;
    a898:	b9 01       	movw	r22, r18
    a89a:	80 e0       	ldi	r24, 0x00	; 0
    a89c:	90 e0       	ldi	r25, 0x00	; 0
    a89e:	6c 83       	std	Y+4, r22	; 0x04
    a8a0:	7d 83       	std	Y+5, r23	; 0x05
    a8a2:	8e 83       	std	Y+6, r24	; 0x06
    a8a4:	9f 83       	std	Y+7, r25	; 0x07
				}
			}
			
			if (s->vx > 0)
			{
				lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y0_tile + y);
    a8a6:	ca 01       	movw	r24, r20
    a8a8:	aa 27       	eor	r26, r26
    a8aa:	97 fd       	sbrc	r25, 7
    a8ac:	a0 95       	com	r26
    a8ae:	ba 2f       	mov	r27, r26
    a8b0:	89 87       	std	Y+9, r24	; 0x09
    a8b2:	9a 87       	std	Y+10, r25	; 0x0a
    a8b4:	ab 87       	std	Y+11, r26	; 0x0b
    a8b6:	bc 87       	std	Y+12, r27	; 0x0c
				lt2 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vx =  0;
					s->x = x0_tile * 8;
    a8b8:	a1 2c       	mov	r10, r1
    a8ba:	b1 2c       	mov	r11, r1
    a8bc:	80 2f       	mov	r24, r16
    a8be:	3d 85       	ldd	r19, Y+13	; 0x0d
    a8c0:	83 1b       	sub	r24, r19
	// Left and Right
	if (s->vx != 0)
	{
		y0_tile = s->y / 8;
		y1_tile = (s->y+7) / 8;
		for (u8 y = 0; y < tile_height; y++)
    a8c2:	49 89       	ldd	r20, Y+17	; 0x11
    a8c4:	84 17       	cp	r24, r20
    a8c6:	08 f0       	brcs	.+2      	; 0xa8ca <collision_detect_level+0x456>
    a8c8:	f7 c0       	rjmp	.+494    	; 0xaab8 <collision_detect_level+0x644>
		{
			if (s->vx < 0)
    a8ca:	af 89       	ldd	r26, Y+23	; 0x17
    a8cc:	b8 8d       	ldd	r27, Y+24	; 0x18
    a8ce:	1c 96       	adiw	r26, 0x0c	; 12
    a8d0:	8d 91       	ld	r24, X+
    a8d2:	9c 91       	ld	r25, X
    a8d4:	1d 97       	sbiw	r26, 0x0d	; 13
    a8d6:	97 ff       	sbrs	r25, 7
    a8d8:	57 c0       	rjmp	.+174    	; 0xa988 <collision_detect_level+0x514>
			{
				lt1 = get_level_tile(game.current_level, x0_tile, y0_tile + y);
    a8da:	a8 01       	movw	r20, r16
    a8dc:	68 85       	ldd	r22, Y+8	; 0x08
    a8de:	7a 89       	ldd	r23, Y+18	; 0x12
    a8e0:	80 91 a1 0f 	lds	r24, 0x0FA1
    a8e4:	90 91 a2 0f 	lds	r25, 0x0FA2
    a8e8:	0e 94 08 4e 	call	0x9c10	; 0x9c10 <get_level_tile>
    a8ec:	78 2e       	mov	r7, r24
				lt2 = get_level_tile(game.current_level, x0_tile, y1_tile + y);
    a8ee:	a6 01       	movw	r20, r12
    a8f0:	68 85       	ldd	r22, Y+8	; 0x08
    a8f2:	7a 89       	ldd	r23, Y+18	; 0x12
    a8f4:	80 91 a1 0f 	lds	r24, 0x0FA1
    a8f8:	90 91 a2 0f 	lds	r25, 0x0FA2
    a8fc:	0e 94 08 4e 	call	0x9c10	; 0x9c10 <get_level_tile>
    a900:	e8 2e       	mov	r14, r24
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    a902:	87 2d       	mov	r24, r7
    a904:	0e 94 d9 4e 	call	0x9db2	; 0x9db2 <solid_tile>
    a908:	88 23       	and	r24, r24
    a90a:	89 f0       	breq	.+34     	; 0xa92e <collision_detect_level+0x4ba>
    a90c:	ef 89       	ldd	r30, Y+23	; 0x17
    a90e:	f8 8d       	ldd	r31, Y+24	; 0x18
    a910:	60 85       	ldd	r22, Z+8	; 0x08
    a912:	71 85       	ldd	r23, Z+9	; 0x09
    a914:	82 85       	ldd	r24, Z+10	; 0x0a
    a916:	93 85       	ldd	r25, Z+11	; 0x0b
    a918:	0e 94 38 68 	call	0xd070	; 0xd070 <__fixunssfsi>
    a91c:	dc 01       	movw	r26, r24
    a91e:	cb 01       	movw	r24, r22
    a920:	28 e0       	ldi	r18, 0x08	; 8
    a922:	48 e0       	ldi	r20, 0x08	; 8
    a924:	b1 01       	movw	r22, r2
    a926:	0e 94 26 52 	call	0xa44c	; 0xa44c <pixel_overlap>
    a92a:	84 30       	cpi	r24, 0x04	; 4
    a92c:	c8 f4       	brcc	.+50     	; 0xa960 <collision_detect_level+0x4ec>
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    a92e:	8e 2d       	mov	r24, r14
    a930:	0e 94 d9 4e 	call	0x9db2	; 0x9db2 <solid_tile>
		{
			if (s->vx < 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile, y0_tile + y);
				lt2 = get_level_tile(game.current_level, x0_tile, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    a934:	88 23       	and	r24, r24
    a936:	41 f1       	breq	.+80     	; 0xa988 <collision_detect_level+0x514>
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    a938:	af 89       	ldd	r26, Y+23	; 0x17
    a93a:	b8 8d       	ldd	r27, Y+24	; 0x18
    a93c:	18 96       	adiw	r26, 0x08	; 8
    a93e:	6d 91       	ld	r22, X+
    a940:	7d 91       	ld	r23, X+
    a942:	8d 91       	ld	r24, X+
    a944:	9c 91       	ld	r25, X
    a946:	1b 97       	sbiw	r26, 0x0b	; 11
    a948:	0e 94 38 68 	call	0xd070	; 0xd070 <__fixunssfsi>
    a94c:	dc 01       	movw	r26, r24
    a94e:	cb 01       	movw	r24, r22
    a950:	28 e0       	ldi	r18, 0x08	; 8
    a952:	48 e0       	ldi	r20, 0x08	; 8
    a954:	6a 81       	ldd	r22, Y+2	; 0x02
    a956:	7b 81       	ldd	r23, Y+3	; 0x03
    a958:	0e 94 26 52 	call	0xa44c	; 0xa44c <pixel_overlap>
    a95c:	84 30       	cpi	r24, 0x04	; 4
    a95e:	a0 f0       	brcs	.+40     	; 0xa988 <collision_detect_level+0x514>
				{
					s->vx =  0;
    a960:	ef 89       	ldd	r30, Y+23	; 0x17
    a962:	f8 8d       	ldd	r31, Y+24	; 0x18
    a964:	15 86       	std	Z+13, r1	; 0x0d
    a966:	14 86       	std	Z+12, r1	; 0x0c
					s->x = (x0_tile + 1) * 8;
    a968:	6c 81       	ldd	r22, Y+4	; 0x04
    a96a:	7d 81       	ldd	r23, Y+5	; 0x05
    a96c:	8e 81       	ldd	r24, Y+6	; 0x06
    a96e:	9f 81       	ldd	r25, Y+7	; 0x07
    a970:	0e 94 64 68 	call	0xd0c8	; 0xd0c8 <__floatunsisf>
    a974:	af 89       	ldd	r26, Y+23	; 0x17
    a976:	b8 8d       	ldd	r27, Y+24	; 0x18
    a978:	14 96       	adiw	r26, 0x04	; 4
    a97a:	6d 93       	st	X+, r22
    a97c:	7d 93       	st	X+, r23
    a97e:	8d 93       	st	X+, r24
    a980:	9c 93       	st	X, r25
    a982:	17 97       	sbiw	r26, 0x07	; 7
					result = 1;
    a984:	b1 e0       	ldi	r27, 0x01	; 1
    a986:	b9 83       	std	Y+1, r27	; 0x01
				}
			}
			
			if (s->vx > 0)
    a988:	ef 89       	ldd	r30, Y+23	; 0x17
    a98a:	f8 8d       	ldd	r31, Y+24	; 0x18
    a98c:	84 85       	ldd	r24, Z+12	; 0x0c
    a98e:	95 85       	ldd	r25, Z+13	; 0x0d
    a990:	18 16       	cp	r1, r24
    a992:	19 06       	cpc	r1, r25
    a994:	0c f0       	brlt	.+2      	; 0xa998 <collision_detect_level+0x524>
    a996:	89 c0       	rjmp	.+274    	; 0xaaaa <collision_detect_level+0x636>
			{
				lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y0_tile + y);
    a998:	69 85       	ldd	r22, Y+9	; 0x09
    a99a:	7a 85       	ldd	r23, Y+10	; 0x0a
    a99c:	8b 85       	ldd	r24, Y+11	; 0x0b
    a99e:	9c 85       	ldd	r25, Y+12	; 0x0c
    a9a0:	0e 94 66 68 	call	0xd0cc	; 0xd0cc <__floatsisf>
    a9a4:	2b 01       	movw	r4, r22
    a9a6:	3c 01       	movw	r6, r24
    a9a8:	af 89       	ldd	r26, Y+23	; 0x17
    a9aa:	b8 8d       	ldd	r27, Y+24	; 0x18
    a9ac:	14 96       	adiw	r26, 0x04	; 4
    a9ae:	2d 91       	ld	r18, X+
    a9b0:	3d 91       	ld	r19, X+
    a9b2:	4d 91       	ld	r20, X+
    a9b4:	5c 91       	ld	r21, X
    a9b6:	17 97       	sbiw	r26, 0x07	; 7
    a9b8:	0e 94 d0 67 	call	0xcfa0	; 0xcfa0 <__addsf3>
    a9bc:	20 e0       	ldi	r18, 0x00	; 0
    a9be:	30 e0       	ldi	r19, 0x00	; 0
    a9c0:	40 e8       	ldi	r20, 0x80	; 128
    a9c2:	5f e3       	ldi	r21, 0x3F	; 63
    a9c4:	0e 94 cf 67 	call	0xcf9e	; 0xcf9e <__subsf3>
    a9c8:	20 e0       	ldi	r18, 0x00	; 0
    a9ca:	30 e0       	ldi	r19, 0x00	; 0
    a9cc:	40 e0       	ldi	r20, 0x00	; 0
    a9ce:	5e e3       	ldi	r21, 0x3E	; 62
    a9d0:	0e 94 1a 69 	call	0xd234	; 0xd234 <__mulsf3>
    a9d4:	0e 94 38 68 	call	0xd070	; 0xd070 <__fixunssfsi>
    a9d8:	a8 01       	movw	r20, r16
    a9da:	80 91 a1 0f 	lds	r24, 0x0FA1
    a9de:	90 91 a2 0f 	lds	r25, 0x0FA2
    a9e2:	0e 94 08 4e 	call	0x9c10	; 0x9c10 <get_level_tile>
    a9e6:	e8 2e       	mov	r14, r24
				lt2 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y1_tile + y);
    a9e8:	ef 89       	ldd	r30, Y+23	; 0x17
    a9ea:	f8 8d       	ldd	r31, Y+24	; 0x18
    a9ec:	24 81       	ldd	r18, Z+4	; 0x04
    a9ee:	35 81       	ldd	r19, Z+5	; 0x05
    a9f0:	46 81       	ldd	r20, Z+6	; 0x06
    a9f2:	57 81       	ldd	r21, Z+7	; 0x07
    a9f4:	c3 01       	movw	r24, r6
    a9f6:	b2 01       	movw	r22, r4
    a9f8:	0e 94 d0 67 	call	0xcfa0	; 0xcfa0 <__addsf3>
    a9fc:	20 e0       	ldi	r18, 0x00	; 0
    a9fe:	30 e0       	ldi	r19, 0x00	; 0
    aa00:	40 e8       	ldi	r20, 0x80	; 128
    aa02:	5f e3       	ldi	r21, 0x3F	; 63
    aa04:	0e 94 cf 67 	call	0xcf9e	; 0xcf9e <__subsf3>
    aa08:	20 e0       	ldi	r18, 0x00	; 0
    aa0a:	30 e0       	ldi	r19, 0x00	; 0
    aa0c:	40 e0       	ldi	r20, 0x00	; 0
    aa0e:	5e e3       	ldi	r21, 0x3E	; 62
    aa10:	0e 94 1a 69 	call	0xd234	; 0xd234 <__mulsf3>
    aa14:	0e 94 38 68 	call	0xd070	; 0xd070 <__fixunssfsi>
    aa18:	a6 01       	movw	r20, r12
    aa1a:	80 91 a1 0f 	lds	r24, 0x0FA1
    aa1e:	90 91 a2 0f 	lds	r25, 0x0FA2
    aa22:	0e 94 08 4e 	call	0x9c10	; 0x9c10 <get_level_tile>
    aa26:	78 2e       	mov	r7, r24
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    aa28:	8e 2d       	mov	r24, r14
    aa2a:	0e 94 d9 4e 	call	0x9db2	; 0x9db2 <solid_tile>
    aa2e:	88 23       	and	r24, r24
    aa30:	99 f0       	breq	.+38     	; 0xaa58 <collision_detect_level+0x5e4>
    aa32:	af 89       	ldd	r26, Y+23	; 0x17
    aa34:	b8 8d       	ldd	r27, Y+24	; 0x18
    aa36:	18 96       	adiw	r26, 0x08	; 8
    aa38:	6d 91       	ld	r22, X+
    aa3a:	7d 91       	ld	r23, X+
    aa3c:	8d 91       	ld	r24, X+
    aa3e:	9c 91       	ld	r25, X
    aa40:	1b 97       	sbiw	r26, 0x0b	; 11
    aa42:	0e 94 38 68 	call	0xd070	; 0xd070 <__fixunssfsi>
    aa46:	dc 01       	movw	r26, r24
    aa48:	cb 01       	movw	r24, r22
    aa4a:	28 e0       	ldi	r18, 0x08	; 8
    aa4c:	48 e0       	ldi	r20, 0x08	; 8
    aa4e:	b1 01       	movw	r22, r2
    aa50:	0e 94 26 52 	call	0xa44c	; 0xa44c <pixel_overlap>
    aa54:	84 30       	cpi	r24, 0x04	; 4
    aa56:	b8 f4       	brcc	.+46     	; 0xaa86 <collision_detect_level+0x612>
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    aa58:	87 2d       	mov	r24, r7
    aa5a:	0e 94 d9 4e 	call	0x9db2	; 0x9db2 <solid_tile>
			
			if (s->vx > 0)
			{
				lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y0_tile + y);
				lt2 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    aa5e:	88 23       	and	r24, r24
    aa60:	21 f1       	breq	.+72     	; 0xaaaa <collision_detect_level+0x636>
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    aa62:	ef 89       	ldd	r30, Y+23	; 0x17
    aa64:	f8 8d       	ldd	r31, Y+24	; 0x18
    aa66:	60 85       	ldd	r22, Z+8	; 0x08
    aa68:	71 85       	ldd	r23, Z+9	; 0x09
    aa6a:	82 85       	ldd	r24, Z+10	; 0x0a
    aa6c:	93 85       	ldd	r25, Z+11	; 0x0b
    aa6e:	0e 94 38 68 	call	0xd070	; 0xd070 <__fixunssfsi>
    aa72:	dc 01       	movw	r26, r24
    aa74:	cb 01       	movw	r24, r22
    aa76:	28 e0       	ldi	r18, 0x08	; 8
    aa78:	48 e0       	ldi	r20, 0x08	; 8
    aa7a:	6a 81       	ldd	r22, Y+2	; 0x02
    aa7c:	7b 81       	ldd	r23, Y+3	; 0x03
    aa7e:	0e 94 26 52 	call	0xa44c	; 0xa44c <pixel_overlap>
    aa82:	84 30       	cpi	r24, 0x04	; 4
    aa84:	90 f0       	brcs	.+36     	; 0xaaaa <collision_detect_level+0x636>
				{
					s->vx =  0;
    aa86:	af 89       	ldd	r26, Y+23	; 0x17
    aa88:	b8 8d       	ldd	r27, Y+24	; 0x18
    aa8a:	1d 96       	adiw	r26, 0x0d	; 13
    aa8c:	1c 92       	st	X, r1
    aa8e:	1e 92       	st	-X, r1
    aa90:	1c 97       	sbiw	r26, 0x0c	; 12
					s->x = x0_tile * 8;
    aa92:	c5 01       	movw	r24, r10
    aa94:	b4 01       	movw	r22, r8
    aa96:	0e 94 64 68 	call	0xd0c8	; 0xd0c8 <__floatunsisf>
    aa9a:	ef 89       	ldd	r30, Y+23	; 0x17
    aa9c:	f8 8d       	ldd	r31, Y+24	; 0x18
    aa9e:	64 83       	std	Z+4, r22	; 0x04
    aaa0:	75 83       	std	Z+5, r23	; 0x05
    aaa2:	86 83       	std	Z+6, r24	; 0x06
    aaa4:	97 83       	std	Z+7, r25	; 0x07
					result = 1;
    aaa6:	f1 e0       	ldi	r31, 0x01	; 1
    aaa8:	f9 83       	std	Y+1, r31	; 0x01
    aaaa:	0f 5f       	subi	r16, 0xFF	; 255
    aaac:	1f 4f       	sbci	r17, 0xFF	; 255
    aaae:	2f ef       	ldi	r18, 0xFF	; 255
    aab0:	c2 1a       	sub	r12, r18
    aab2:	d2 0a       	sbc	r13, r18
    aab4:	03 cf       	rjmp	.-506    	; 0xa8bc <collision_detect_level+0x448>
	u16 y1_tile = (s->y+7) / 8;
	u8 lt1, lt2;
	u8 result = 0;
	
	// Only if moving on planet
	if (is_space() || (s->vx == 0 && s->vy == 0)) return result;
    aab6:	19 82       	std	Y+1, r1	; 0x01
				}
			}
		}
	}
	return result;
}
    aab8:	89 81       	ldd	r24, Y+1	; 0x01
    aaba:	68 96       	adiw	r28, 0x18	; 24
    aabc:	0f b6       	in	r0, 0x3f	; 63
    aabe:	f8 94       	cli
    aac0:	de bf       	out	0x3e, r29	; 62
    aac2:	0f be       	out	0x3f, r0	; 63
    aac4:	cd bf       	out	0x3d, r28	; 61
    aac6:	df 91       	pop	r29
    aac8:	cf 91       	pop	r28
    aaca:	1f 91       	pop	r17
    aacc:	0f 91       	pop	r16
    aace:	ff 90       	pop	r15
    aad0:	ef 90       	pop	r14
    aad2:	df 90       	pop	r13
    aad4:	cf 90       	pop	r12
    aad6:	bf 90       	pop	r11
    aad8:	af 90       	pop	r10
    aada:	9f 90       	pop	r9
    aadc:	8f 90       	pop	r8
    aade:	7f 90       	pop	r7
    aae0:	6f 90       	pop	r6
    aae2:	5f 90       	pop	r5
    aae4:	4f 90       	pop	r4
    aae6:	3f 90       	pop	r3
    aae8:	2f 90       	pop	r2
    aaea:	08 95       	ret

0000aaec <animate_shot>:
		game.player.active_shots++;
	}
}

void animate_shot()
{
    aaec:	2f 92       	push	r2
    aaee:	3f 92       	push	r3
    aaf0:	4f 92       	push	r4
    aaf2:	5f 92       	push	r5
    aaf4:	6f 92       	push	r6
    aaf6:	7f 92       	push	r7
    aaf8:	8f 92       	push	r8
    aafa:	9f 92       	push	r9
    aafc:	af 92       	push	r10
    aafe:	bf 92       	push	r11
    ab00:	cf 92       	push	r12
    ab02:	df 92       	push	r13
    ab04:	ef 92       	push	r14
    ab06:	ff 92       	push	r15
    ab08:	0f 93       	push	r16
    ab0a:	1f 93       	push	r17
    ab0c:	cf 93       	push	r28
    ab0e:	df 93       	push	r29
    ab10:	cd b7       	in	r28, 0x3d	; 61
    ab12:	de b7       	in	r29, 0x3e	; 62
    ab14:	2f 97       	sbiw	r28, 0x0f	; 15
    ab16:	0f b6       	in	r0, 0x3f	; 63
    ab18:	f8 94       	cli
    ab1a:	de bf       	out	0x3e, r29	; 62
    ab1c:	0f be       	out	0x3f, r0	; 63
    ab1e:	cd bf       	out	0x3d, r28	; 61
    ab20:	9b ee       	ldi	r25, 0xEB	; 235
    ab22:	89 2e       	mov	r8, r25
    ab24:	9d e0       	ldi	r25, 0x0D	; 13
    ab26:	99 2e       	mov	r9, r25
    ab28:	8a ed       	ldi	r24, 0xDA	; 218
    ab2a:	9d e0       	ldi	r25, 0x0D	; 13
    ab2c:	9f 87       	std	Y+15, r25	; 0x0f
    ab2e:	8e 87       	std	Y+14, r24	; 0x0e
    ab30:	9b e0       	ldi	r25, 0x0B	; 11
    ab32:	99 83       	std	Y+1, r25	; 0x01
						SFX_HIT;
						game.enemies[j].shield -= game.player.shot[i].hit_count;
						if (game.enemies[j].shield <= 0)
						{
							SFX_ENEMY_EXPLODE;
							game.enemies[j].flags = EXPLODING;
    ab34:	20 e1       	ldi	r18, 0x10	; 16
    ab36:	b2 2e       	mov	r11, r18
{
	// Animate shots
	u8 slot = ENEMY_SLOT;
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
	{
		if (game.player.shot[i].active)
    ab38:	f4 01       	movw	r30, r8
    ab3a:	80 81       	ld	r24, Z
    ab3c:	88 23       	and	r24, r24
    ab3e:	09 f4       	brne	.+2      	; 0xab42 <animate_shot+0x56>
    ab40:	46 c1       	rjmp	.+652    	; 0xadce <animate_shot+0x2e2>
		{
			game.player.shot[i].shared.x += game.player.shot[i].shared.vx*FRAME_TIME;
    ab42:	ee 85       	ldd	r30, Y+14	; 0x0e
    ab44:	ff 85       	ldd	r31, Y+15	; 0x0f
    ab46:	64 85       	ldd	r22, Z+12	; 0x0c
    ab48:	75 85       	ldd	r23, Z+13	; 0x0d
    ab4a:	88 27       	eor	r24, r24
    ab4c:	77 fd       	sbrc	r23, 7
    ab4e:	80 95       	com	r24
    ab50:	98 2f       	mov	r25, r24
    ab52:	0e 94 66 68 	call	0xd0cc	; 0xd0cc <__floatsisf>
    ab56:	29 e8       	ldi	r18, 0x89	; 137
    ab58:	38 e8       	ldi	r19, 0x88	; 136
    ab5a:	48 e8       	ldi	r20, 0x88	; 136
    ab5c:	5c e3       	ldi	r21, 0x3C	; 60
    ab5e:	0e 94 1a 69 	call	0xd234	; 0xd234 <__mulsf3>
    ab62:	ee 85       	ldd	r30, Y+14	; 0x0e
    ab64:	ff 85       	ldd	r31, Y+15	; 0x0f
    ab66:	24 81       	ldd	r18, Z+4	; 0x04
    ab68:	35 81       	ldd	r19, Z+5	; 0x05
    ab6a:	46 81       	ldd	r20, Z+6	; 0x06
    ab6c:	57 81       	ldd	r21, Z+7	; 0x07
    ab6e:	0e 94 d0 67 	call	0xcfa0	; 0xcfa0 <__addsf3>
    ab72:	2b 01       	movw	r4, r22
    ab74:	3c 01       	movw	r6, r24
    ab76:	ee 85       	ldd	r30, Y+14	; 0x0e
    ab78:	ff 85       	ldd	r31, Y+15	; 0x0f
    ab7a:	64 83       	std	Z+4, r22	; 0x04
    ab7c:	75 83       	std	Z+5, r23	; 0x05
    ab7e:	86 83       	std	Z+6, r24	; 0x06
    ab80:	97 83       	std	Z+7, r25	; 0x07
			game.player.shot[i].shared.y += game.player.shot[i].shared.vy*FRAME_TIME;
    ab82:	29 e8       	ldi	r18, 0x89	; 137
    ab84:	38 e8       	ldi	r19, 0x88	; 136
    ab86:	48 e8       	ldi	r20, 0x88	; 136
    ab88:	5c e3       	ldi	r21, 0x3C	; 60
    ab8a:	60 81       	ld	r22, Z
    ab8c:	71 81       	ldd	r23, Z+1	; 0x01
    ab8e:	82 81       	ldd	r24, Z+2	; 0x02
    ab90:	93 81       	ldd	r25, Z+3	; 0x03
    ab92:	0e 94 1a 69 	call	0xd234	; 0xd234 <__mulsf3>
    ab96:	ee 85       	ldd	r30, Y+14	; 0x0e
    ab98:	ff 85       	ldd	r31, Y+15	; 0x0f
    ab9a:	20 85       	ldd	r18, Z+8	; 0x08
    ab9c:	31 85       	ldd	r19, Z+9	; 0x09
    ab9e:	42 85       	ldd	r20, Z+10	; 0x0a
    aba0:	53 85       	ldd	r21, Z+11	; 0x0b
    aba2:	0e 94 d0 67 	call	0xcfa0	; 0xcfa0 <__addsf3>
    aba6:	6b 01       	movw	r12, r22
    aba8:	7c 01       	movw	r14, r24
    abaa:	ee 85       	ldd	r30, Y+14	; 0x0e
    abac:	ff 85       	ldd	r31, Y+15	; 0x0f
    abae:	60 87       	std	Z+8, r22	; 0x08
    abb0:	71 87       	std	Z+9, r23	; 0x09
    abb2:	82 87       	std	Z+10, r24	; 0x0a
    abb4:	93 87       	std	Z+11, r25	; 0x0b
			LBMoveSprite(PLAYER_SHOT_SLOT+i, game.player.shot[i].shared.x - game.camera_x, game.player.shot[i].shared.y - game.camera_y, 1, 1);
    abb6:	60 91 ac 0d 	lds	r22, 0x0DAC
    abba:	70 91 ad 0d 	lds	r23, 0x0DAD
    abbe:	80 e0       	ldi	r24, 0x00	; 0
    abc0:	90 e0       	ldi	r25, 0x00	; 0
    abc2:	0e 94 64 68 	call	0xd0c8	; 0xd0c8 <__floatunsisf>
    abc6:	9b 01       	movw	r18, r22
    abc8:	ac 01       	movw	r20, r24
    abca:	c7 01       	movw	r24, r14
    abcc:	b6 01       	movw	r22, r12
    abce:	0e 94 cf 67 	call	0xcf9e	; 0xcf9e <__subsf3>
    abd2:	0e 94 38 68 	call	0xd070	; 0xd070 <__fixunssfsi>
    abd6:	c6 2e       	mov	r12, r22
    abd8:	80 91 aa 0d 	lds	r24, 0x0DAA
    abdc:	90 91 ab 0d 	lds	r25, 0x0DAB
    abe0:	bc 01       	movw	r22, r24
    abe2:	80 e0       	ldi	r24, 0x00	; 0
    abe4:	90 e0       	ldi	r25, 0x00	; 0
    abe6:	0e 94 64 68 	call	0xd0c8	; 0xd0c8 <__floatunsisf>
    abea:	9b 01       	movw	r18, r22
    abec:	ac 01       	movw	r20, r24
    abee:	c3 01       	movw	r24, r6
    abf0:	b2 01       	movw	r22, r4
    abf2:	0e 94 cf 67 	call	0xcf9e	; 0xcf9e <__subsf3>
    abf6:	0e 94 38 68 	call	0xd070	; 0xd070 <__fixunssfsi>
    abfa:	01 e0       	ldi	r16, 0x01	; 1
    abfc:	21 e0       	ldi	r18, 0x01	; 1
    abfe:	4c 2d       	mov	r20, r12
    ac00:	89 81       	ldd	r24, Y+1	; 0x01
    ac02:	0e 94 16 4b 	call	0x962c	; 0x962c <LBMoveSprite>
			if (game.player.shot[i].shared.x < game.camera_x || game.player.shot[i].shared.x+8 > game.camera_x + CAMERA_WIDTH*8 ||
    ac06:	ee 85       	ldd	r30, Y+14	; 0x0e
    ac08:	ff 85       	ldd	r31, Y+15	; 0x0f
    ac0a:	c4 80       	ldd	r12, Z+4	; 0x04
    ac0c:	d5 80       	ldd	r13, Z+5	; 0x05
    ac0e:	e6 80       	ldd	r14, Z+6	; 0x06
    ac10:	f7 80       	ldd	r15, Z+7	; 0x07
    ac12:	60 90 aa 0d 	lds	r6, 0x0DAA
    ac16:	70 90 ab 0d 	lds	r7, 0x0DAB
    ac1a:	b3 01       	movw	r22, r6
    ac1c:	80 e0       	ldi	r24, 0x00	; 0
    ac1e:	90 e0       	ldi	r25, 0x00	; 0
    ac20:	0e 94 64 68 	call	0xd0c8	; 0xd0c8 <__floatunsisf>
    ac24:	9b 01       	movw	r18, r22
    ac26:	ac 01       	movw	r20, r24
    ac28:	c7 01       	movw	r24, r14
    ac2a:	b6 01       	movw	r22, r12
    ac2c:	0e 94 34 68 	call	0xd068	; 0xd068 <__cmpsf2>
    ac30:	87 ff       	sbrs	r24, 7
    ac32:	0f c0       	rjmp	.+30     	; 0xac52 <animate_shot+0x166>
			    collision_detect_level(&game.player.shot[i].shared, 1, 1))
			{
				game.player.shot[i].active = 0;
    ac34:	f4 01       	movw	r30, r8
    ac36:	10 82       	st	Z, r1
				game.player.active_shots--;
    ac38:	80 91 d3 0d 	lds	r24, 0x0DD3
    ac3c:	81 50       	subi	r24, 0x01	; 1
    ac3e:	80 93 d3 0d 	sts	0x0DD3, r24
				LBMoveSprite(PLAYER_SHOT_SLOT+i, OFF_SCREEN, 0, 1, 1);
    ac42:	01 e0       	ldi	r16, 0x01	; 1
    ac44:	21 e0       	ldi	r18, 0x01	; 1
    ac46:	40 e0       	ldi	r20, 0x00	; 0
    ac48:	60 ee       	ldi	r22, 0xE0	; 224
    ac4a:	89 81       	ldd	r24, Y+1	; 0x01
    ac4c:	0e 94 16 4b 	call	0x962c	; 0x962c <LBMoveSprite>
    ac50:	be c0       	rjmp	.+380    	; 0xadce <animate_shot+0x2e2>
		if (game.player.shot[i].active)
		{
			game.player.shot[i].shared.x += game.player.shot[i].shared.vx*FRAME_TIME;
			game.player.shot[i].shared.y += game.player.shot[i].shared.vy*FRAME_TIME;
			LBMoveSprite(PLAYER_SHOT_SLOT+i, game.player.shot[i].shared.x - game.camera_x, game.player.shot[i].shared.y - game.camera_y, 1, 1);
			if (game.player.shot[i].shared.x < game.camera_x || game.player.shot[i].shared.x+8 > game.camera_x + CAMERA_WIDTH*8 ||
    ac52:	20 e0       	ldi	r18, 0x00	; 0
    ac54:	30 e0       	ldi	r19, 0x00	; 0
    ac56:	40 e0       	ldi	r20, 0x00	; 0
    ac58:	51 e4       	ldi	r21, 0x41	; 65
    ac5a:	c7 01       	movw	r24, r14
    ac5c:	b6 01       	movw	r22, r12
    ac5e:	0e 94 d0 67 	call	0xcfa0	; 0xcfa0 <__addsf3>
    ac62:	1b 01       	movw	r2, r22
    ac64:	2c 01       	movw	r4, r24
    ac66:	b3 01       	movw	r22, r6
    ac68:	60 52       	subi	r22, 0x20	; 32
    ac6a:	7f 4f       	sbci	r23, 0xFF	; 255
    ac6c:	80 e0       	ldi	r24, 0x00	; 0
    ac6e:	90 e0       	ldi	r25, 0x00	; 0
    ac70:	0e 94 64 68 	call	0xd0c8	; 0xd0c8 <__floatunsisf>
    ac74:	9b 01       	movw	r18, r22
    ac76:	ac 01       	movw	r20, r24
    ac78:	c2 01       	movw	r24, r4
    ac7a:	b1 01       	movw	r22, r2
    ac7c:	0e 94 16 69 	call	0xd22c	; 0xd22c <__gesf2>
    ac80:	18 16       	cp	r1, r24
    ac82:	c4 f2       	brlt	.-80     	; 0xac34 <animate_shot+0x148>
			    collision_detect_level(&game.player.shot[i].shared, 1, 1))
    ac84:	41 e0       	ldi	r20, 0x01	; 1
    ac86:	61 e0       	ldi	r22, 0x01	; 1
    ac88:	8e 85       	ldd	r24, Y+14	; 0x0e
    ac8a:	9f 85       	ldd	r25, Y+15	; 0x0f
    ac8c:	0e 94 3a 52 	call	0xa474	; 0xa474 <collision_detect_level>
		if (game.player.shot[i].active)
		{
			game.player.shot[i].shared.x += game.player.shot[i].shared.vx*FRAME_TIME;
			game.player.shot[i].shared.y += game.player.shot[i].shared.vy*FRAME_TIME;
			LBMoveSprite(PLAYER_SHOT_SLOT+i, game.player.shot[i].shared.x - game.camera_x, game.player.shot[i].shared.y - game.camera_y, 1, 1);
			if (game.player.shot[i].shared.x < game.camera_x || game.player.shot[i].shared.x+8 > game.camera_x + CAMERA_WIDTH*8 ||
    ac90:	81 11       	cpse	r24, r1
    ac92:	d0 cf       	rjmp	.-96     	; 0xac34 <animate_shot+0x148>
    ac94:	87 e6       	ldi	r24, 0x67	; 103
    ac96:	28 2e       	mov	r2, r24
    ac98:	8e e0       	ldi	r24, 0x0E	; 14
    ac9a:	38 2e       	mov	r3, r24
    ac9c:	61 2c       	mov	r6, r1
    ac9e:	71 2c       	mov	r7, r1
    aca0:	24 01       	movw	r4, r8
    aca2:	f1 e0       	ldi	r31, 0x01	; 1
    aca4:	4f 1a       	sub	r4, r31
    aca6:	51 08       	sbc	r5, r1
    aca8:	f1 01       	movw	r30, r2
    acaa:	38 97       	sbiw	r30, 0x08	; 8
			else
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
				{
					if (game.enemies[j].active &&
    acac:	80 81       	ld	r24, Z
    acae:	88 23       	and	r24, r24
    acb0:	09 f4       	brne	.+2      	; 0xacb4 <animate_shot+0x1c8>
    acb2:	82 c0       	rjmp	.+260    	; 0xadb8 <animate_shot+0x2cc>
    acb4:	34 96       	adiw	r30, 0x04	; 4
					    LBCollides(game.player.shot[i].shared.x,game.player.shot[i].shared.y, 8, 8,
    acb6:	a0 80       	ld	r10, Z
    acb8:	aa 0c       	add	r10, r10
    acba:	aa 0c       	add	r10, r10
    acbc:	aa 0c       	add	r10, r10
    acbe:	31 97       	sbiw	r30, 0x01	; 1
    acc0:	c0 80       	ld	r12, Z
    acc2:	cc 0c       	add	r12, r12
    acc4:	cc 0c       	add	r12, r12
    acc6:	cc 0c       	add	r12, r12
    acc8:	3a 97       	sbiw	r30, 0x0a	; 10
    acca:	60 81       	ld	r22, Z
    accc:	71 81       	ldd	r23, Z+1	; 0x01
    acce:	82 81       	ldd	r24, Z+2	; 0x02
    acd0:	93 81       	ldd	r25, Z+3	; 0x03
    acd2:	0e 94 38 68 	call	0xd070	; 0xd070 <__fixunssfsi>
    acd6:	6a 83       	std	Y+2, r22	; 0x02
    acd8:	7b 83       	std	Y+3, r23	; 0x03
    acda:	8c 83       	std	Y+4, r24	; 0x04
    acdc:	9d 83       	std	Y+5, r25	; 0x05
    acde:	f1 01       	movw	r30, r2
    ace0:	73 97       	sbiw	r30, 0x13	; 19
    ace2:	60 81       	ld	r22, Z
    ace4:	71 81       	ldd	r23, Z+1	; 0x01
    ace6:	82 81       	ldd	r24, Z+2	; 0x02
    ace8:	93 81       	ldd	r25, Z+3	; 0x03
    acea:	0e 94 38 68 	call	0xd070	; 0xd070 <__fixunssfsi>
    acee:	6e 83       	std	Y+6, r22	; 0x06
    acf0:	7f 83       	std	Y+7, r23	; 0x07
    acf2:	88 87       	std	Y+8, r24	; 0x08
    acf4:	99 87       	std	Y+9, r25	; 0x09
    acf6:	ee 85       	ldd	r30, Y+14	; 0x0e
    acf8:	ff 85       	ldd	r31, Y+15	; 0x0f
    acfa:	60 85       	ldd	r22, Z+8	; 0x08
    acfc:	71 85       	ldd	r23, Z+9	; 0x09
    acfe:	82 85       	ldd	r24, Z+10	; 0x0a
    ad00:	93 85       	ldd	r25, Z+11	; 0x0b
    ad02:	0e 94 38 68 	call	0xd070	; 0xd070 <__fixunssfsi>
    ad06:	6a 87       	std	Y+10, r22	; 0x0a
    ad08:	7b 87       	std	Y+11, r23	; 0x0b
    ad0a:	8c 87       	std	Y+12, r24	; 0x0c
    ad0c:	9d 87       	std	Y+13, r25	; 0x0d
    ad0e:	ee 85       	ldd	r30, Y+14	; 0x0e
    ad10:	ff 85       	ldd	r31, Y+15	; 0x0f
    ad12:	64 81       	ldd	r22, Z+4	; 0x04
    ad14:	75 81       	ldd	r23, Z+5	; 0x05
    ad16:	86 81       	ldd	r24, Z+6	; 0x06
    ad18:	97 81       	ldd	r25, Z+7	; 0x07
    ad1a:	0e 94 38 68 	call	0xd070	; 0xd070 <__fixunssfsi>
    ad1e:	dc 01       	movw	r26, r24
    ad20:	cb 01       	movw	r24, r22
    ad22:	ea 80       	ldd	r14, Y+2	; 0x02
    ad24:	fb 80       	ldd	r15, Y+3	; 0x03
    ad26:	0e 81       	ldd	r16, Y+6	; 0x06
    ad28:	1f 81       	ldd	r17, Y+7	; 0x07
    ad2a:	28 e0       	ldi	r18, 0x08	; 8
    ad2c:	48 e0       	ldi	r20, 0x08	; 8
    ad2e:	6a 85       	ldd	r22, Y+10	; 0x0a
    ad30:	7b 85       	ldd	r23, Y+11	; 0x0b
    ad32:	0e 94 79 4a 	call	0x94f2	; 0x94f2 <LBCollides>
			else
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
				{
					if (game.enemies[j].active &&
    ad36:	88 23       	and	r24, r24
    ad38:	09 f4       	brne	.+2      	; 0xad3c <animate_shot+0x250>
    ad3a:	3e c0       	rjmp	.+124    	; 0xadb8 <animate_shot+0x2cc>
					    LBCollides(game.player.shot[i].shared.x,game.player.shot[i].shared.y, 8, 8,
							game.enemies[j].shared.x, game.enemies[j].shared.y, game.enemies[j].width*8, game.enemies[j].height*8
						)
					)
					{
						SFX_HIT;
    ad3c:	41 e0       	ldi	r20, 0x01	; 1
    ad3e:	6f ef       	ldi	r22, 0xFF	; 255
    ad40:	84 e0       	ldi	r24, 0x04	; 4
    ad42:	0e 94 a4 3d 	call	0x7b48	; 0x7b48 <TriggerFx>
						game.enemies[j].shield -= game.player.shot[i].hit_count;
    ad46:	f1 01       	movw	r30, r2
    ad48:	80 81       	ld	r24, Z
    ad4a:	f2 01       	movw	r30, r4
    ad4c:	90 81       	ld	r25, Z
    ad4e:	89 1b       	sub	r24, r25
    ad50:	f1 01       	movw	r30, r2
    ad52:	80 83       	st	Z, r24
						if (game.enemies[j].shield <= 0)
    ad54:	18 16       	cp	r1, r24
    ad56:	14 f1       	brlt	.+68     	; 0xad9c <animate_shot+0x2b0>
						{
							SFX_ENEMY_EXPLODE;
    ad58:	41 e0       	ldi	r20, 0x01	; 1
    ad5a:	6f ef       	ldi	r22, 0xFF	; 255
    ad5c:	86 e0       	ldi	r24, 0x06	; 6
    ad5e:	0e 94 a4 3d 	call	0x7b48	; 0x7b48 <TriggerFx>
							game.enemies[j].flags = EXPLODING;
    ad62:	f2 e4       	ldi	r31, 0x42	; 66
    ad64:	f6 9d       	mul	r31, r6
    ad66:	c0 01       	movw	r24, r0
    ad68:	f7 9d       	mul	r31, r7
    ad6a:	90 0d       	add	r25, r0
    ad6c:	11 24       	eor	r1, r1
    ad6e:	8a 55       	subi	r24, 0x5A	; 90
    ad70:	92 4f       	sbci	r25, 0xF2	; 242
    ad72:	fc 01       	movw	r30, r24
    ad74:	e6 54       	subi	r30, 0x46	; 70
    ad76:	ff 4f       	sbci	r31, 0xFF	; 255
    ad78:	b0 82       	st	Z, r11
							game.enemies[j].active = 0;
    ad7a:	31 97       	sbiw	r30, 0x01	; 1
    ad7c:	10 82       	st	Z, r1
							game.active_enemies--;
    ad7e:	80 91 c1 0d 	lds	r24, 0x0DC1
    ad82:	81 50       	subi	r24, 0x01	; 1
    ad84:	80 93 c1 0d 	sts	0x0DC1, r24
							game.score += KILL_SCORE;
    ad88:	80 91 ae 0d 	lds	r24, 0x0DAE
    ad8c:	90 91 af 0d 	lds	r25, 0x0DAF
    ad90:	0a 96       	adiw	r24, 0x0a	; 10
    ad92:	90 93 af 0d 	sts	0x0DAF, r25
    ad96:	80 93 ae 0d 	sts	0x0DAE, r24
							break;
    ad9a:	19 c0       	rjmp	.+50     	; 0xadce <animate_shot+0x2e2>
						}
						game.player.shot[i].active = 0;
    ad9c:	f4 01       	movw	r30, r8
    ad9e:	10 82       	st	Z, r1
						game.player.active_shots--;
    ada0:	80 91 d3 0d 	lds	r24, 0x0DD3
    ada4:	81 50       	subi	r24, 0x01	; 1
    ada6:	80 93 d3 0d 	sts	0x0DD3, r24
						LBMoveSprite(PLAYER_SHOT_SLOT+i, OFF_SCREEN, 0, 1, 1);
    adaa:	01 e0       	ldi	r16, 0x01	; 1
    adac:	21 e0       	ldi	r18, 0x01	; 1
    adae:	40 e0       	ldi	r20, 0x00	; 0
    adb0:	60 ee       	ldi	r22, 0xE0	; 224
    adb2:	89 81       	ldd	r24, Y+1	; 0x01
    adb4:	0e 94 16 4b 	call	0x962c	; 0x962c <LBMoveSprite>
    adb8:	ff ef       	ldi	r31, 0xFF	; 255
    adba:	6f 1a       	sub	r6, r31
    adbc:	7f 0a       	sbc	r7, r31
    adbe:	22 e4       	ldi	r18, 0x42	; 66
    adc0:	22 0e       	add	r2, r18
    adc2:	31 1c       	adc	r3, r1
				LBMoveSprite(PLAYER_SHOT_SLOT+i, OFF_SCREEN, 0, 1, 1);
			}
			else
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
    adc4:	85 e0       	ldi	r24, 0x05	; 5
    adc6:	68 16       	cp	r6, r24
    adc8:	71 04       	cpc	r7, r1
    adca:	09 f0       	breq	.+2      	; 0xadce <animate_shot+0x2e2>
    adcc:	6d cf       	rjmp	.-294    	; 0xaca8 <animate_shot+0x1bc>
    adce:	9a e1       	ldi	r25, 0x1A	; 26
    add0:	89 0e       	add	r8, r25
    add2:	91 1c       	adc	r9, r1
    add4:	e9 81       	ldd	r30, Y+1	; 0x01
    add6:	ef 5f       	subi	r30, 0xFF	; 255
    add8:	e9 83       	std	Y+1, r30	; 0x01
    adda:	8e 85       	ldd	r24, Y+14	; 0x0e
    addc:	9f 85       	ldd	r25, Y+15	; 0x0f
    adde:	4a 96       	adiw	r24, 0x1a	; 26
    ade0:	9f 87       	std	Y+15, r25	; 0x0f
    ade2:	8e 87       	std	Y+14, r24	; 0x0e

void animate_shot()
{
	// Animate shots
	u8 slot = ENEMY_SLOT;
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
    ade4:	ee 30       	cpi	r30, 0x0E	; 14
    ade6:	09 f0       	breq	.+2      	; 0xadea <animate_shot+0x2fe>
    ade8:	a7 ce       	rjmp	.-690    	; 0xab38 <animate_shot+0x4c>
					slot += game.enemies[j].width*game.enemies[j].height;
				}
			}
		}
	}
}
    adea:	2f 96       	adiw	r28, 0x0f	; 15
    adec:	0f b6       	in	r0, 0x3f	; 63
    adee:	f8 94       	cli
    adf0:	de bf       	out	0x3e, r29	; 62
    adf2:	0f be       	out	0x3f, r0	; 63
    adf4:	cd bf       	out	0x3d, r28	; 61
    adf6:	df 91       	pop	r29
    adf8:	cf 91       	pop	r28
    adfa:	1f 91       	pop	r17
    adfc:	0f 91       	pop	r16
    adfe:	ff 90       	pop	r15
    ae00:	ef 90       	pop	r14
    ae02:	df 90       	pop	r13
    ae04:	cf 90       	pop	r12
    ae06:	bf 90       	pop	r11
    ae08:	af 90       	pop	r10
    ae0a:	9f 90       	pop	r9
    ae0c:	8f 90       	pop	r8
    ae0e:	7f 90       	pop	r7
    ae10:	6f 90       	pop	r6
    ae12:	5f 90       	pop	r5
    ae14:	4f 90       	pop	r4
    ae16:	3f 90       	pop	r3
    ae18:	2f 90       	pop	r2
    ae1a:	08 95       	ret

0000ae1c <map_explosion>:
	}
	return result;
}

u8 map_explosion(u8* flags, Animation* anim, u8 slot, u8 width, u8 height)
{
    ae1c:	7f 92       	push	r7
    ae1e:	8f 92       	push	r8
    ae20:	9f 92       	push	r9
    ae22:	af 92       	push	r10
    ae24:	bf 92       	push	r11
    ae26:	cf 92       	push	r12
    ae28:	df 92       	push	r13
    ae2a:	ef 92       	push	r14
    ae2c:	ff 92       	push	r15
    ae2e:	0f 93       	push	r16
    ae30:	1f 93       	push	r17
    ae32:	cf 93       	push	r28
    ae34:	df 93       	push	r29
    ae36:	1f 92       	push	r1
    ae38:	cd b7       	in	r28, 0x3d	; 61
    ae3a:	de b7       	in	r29, 0x3e	; 62
    ae3c:	6c 01       	movw	r12, r24
    ae3e:	7b 01       	movw	r14, r22
    ae40:	74 2e       	mov	r7, r20
	char* frame;
	frame = LBGetNextFrame(anim);
    ae42:	cb 01       	movw	r24, r22
    ae44:	29 83       	std	Y+1, r18	; 0x01
    ae46:	0e 94 62 49 	call	0x92c4	; 0x92c4 <LBGetNextFrame>
    ae4a:	4c 01       	movw	r8, r24
	for (u8 i = 0; i < width*height; i++)
    ae4c:	29 81       	ldd	r18, Y+1	; 0x01
    ae4e:	20 9f       	mul	r18, r16
    ae50:	50 01       	movw	r10, r0
    ae52:	11 24       	eor	r1, r1
    ae54:	10 e0       	ldi	r17, 0x00	; 0
    ae56:	81 2f       	mov	r24, r17
    ae58:	90 e0       	ldi	r25, 0x00	; 0
    ae5a:	8a 15       	cp	r24, r10
    ae5c:	9b 05       	cpc	r25, r11
    ae5e:	54 f4       	brge	.+20     	; 0xae74 <map_explosion+0x58>
	{
		LBMapSprite(slot+i, frame, 0);
    ae60:	40 e0       	ldi	r20, 0x00	; 0
    ae62:	b4 01       	movw	r22, r8
    ae64:	81 2f       	mov	r24, r17
    ae66:	87 0d       	add	r24, r7
    ae68:	29 83       	std	Y+1, r18	; 0x01
    ae6a:	0e 94 c4 4a 	call	0x9588	; 0x9588 <LBMapSprite>

u8 map_explosion(u8* flags, Animation* anim, u8 slot, u8 width, u8 height)
{
	char* frame;
	frame = LBGetNextFrame(anim);
	for (u8 i = 0; i < width*height; i++)
    ae6e:	1f 5f       	subi	r17, 0xFF	; 255
    ae70:	29 81       	ldd	r18, Y+1	; 0x01
    ae72:	f1 cf       	rjmp	.-30     	; 0xae56 <map_explosion+0x3a>
	{
		LBMapSprite(slot+i, frame, 0);
	}
	if (anim->looped)
    ae74:	f7 01       	movw	r30, r14
    ae76:	84 81       	ldd	r24, Z+4	; 0x04
    ae78:	88 23       	and	r24, r24
    ae7a:	51 f0       	breq	.+20     	; 0xae90 <map_explosion+0x74>
	{
		*flags ^= EXPLODING;
    ae7c:	f6 01       	movw	r30, r12
    ae7e:	80 81       	ld	r24, Z
    ae80:	90 e1       	ldi	r25, 0x10	; 16
    ae82:	98 27       	eor	r25, r24
    ae84:	90 83       	st	Z, r25
		LBMoveSprite(slot, OFF_SCREEN, 0, width, height);
    ae86:	40 e0       	ldi	r20, 0x00	; 0
    ae88:	60 ee       	ldi	r22, 0xE0	; 224
    ae8a:	87 2d       	mov	r24, r7
    ae8c:	0e 94 16 4b 	call	0x962c	; 0x962c <LBMoveSprite>
	}
	return anim->looped;
}
    ae90:	f7 01       	movw	r30, r14
    ae92:	84 81       	ldd	r24, Z+4	; 0x04
    ae94:	0f 90       	pop	r0
    ae96:	df 91       	pop	r29
    ae98:	cf 91       	pop	r28
    ae9a:	1f 91       	pop	r17
    ae9c:	0f 91       	pop	r16
    ae9e:	ff 90       	pop	r15
    aea0:	ef 90       	pop	r14
    aea2:	df 90       	pop	r13
    aea4:	cf 90       	pop	r12
    aea6:	bf 90       	pop	r11
    aea8:	af 90       	pop	r10
    aeaa:	9f 90       	pop	r9
    aeac:	8f 90       	pop	r8
    aeae:	7f 90       	pop	r7
    aeb0:	08 95       	ret

0000aeb2 <animate_sprite>:

void animate_sprite(SpriteShared* s, u8 slot, u8 width, u8 height)
{
    aeb2:	8f 92       	push	r8
    aeb4:	9f 92       	push	r9
    aeb6:	af 92       	push	r10
    aeb8:	bf 92       	push	r11
    aeba:	ff 92       	push	r15
    aebc:	0f 93       	push	r16
    aebe:	1f 93       	push	r17
    aec0:	cf 93       	push	r28
    aec2:	df 93       	push	r29
    aec4:	ec 01       	movw	r28, r24
    aec6:	f6 2e       	mov	r15, r22
    aec8:	14 2f       	mov	r17, r20
    aeca:	02 2f       	mov	r16, r18
	s->vy = s->vy + s->gravity*FRAME_TIME;
    aecc:	6e 85       	ldd	r22, Y+14	; 0x0e
    aece:	70 e0       	ldi	r23, 0x00	; 0
    aed0:	80 e0       	ldi	r24, 0x00	; 0
    aed2:	90 e0       	ldi	r25, 0x00	; 0
    aed4:	0e 94 66 68 	call	0xd0cc	; 0xd0cc <__floatsisf>
    aed8:	29 e8       	ldi	r18, 0x89	; 137
    aeda:	38 e8       	ldi	r19, 0x88	; 136
    aedc:	48 e8       	ldi	r20, 0x88	; 136
    aede:	5c e3       	ldi	r21, 0x3C	; 60
    aee0:	0e 94 1a 69 	call	0xd234	; 0xd234 <__mulsf3>
    aee4:	28 81       	ld	r18, Y
    aee6:	39 81       	ldd	r19, Y+1	; 0x01
    aee8:	4a 81       	ldd	r20, Y+2	; 0x02
    aeea:	5b 81       	ldd	r21, Y+3	; 0x03
    aeec:	0e 94 d0 67 	call	0xcfa0	; 0xcfa0 <__addsf3>
    aef0:	4b 01       	movw	r8, r22
    aef2:	5c 01       	movw	r10, r24
	if (s->vy > MAX_SPEED) s->vy = MAX_SPEED;
    aef4:	20 e0       	ldi	r18, 0x00	; 0
    aef6:	30 e0       	ldi	r19, 0x00	; 0
    aef8:	40 ef       	ldi	r20, 0xF0	; 240
    aefa:	52 e4       	ldi	r21, 0x42	; 66
    aefc:	0e 94 16 69 	call	0xd22c	; 0xd22c <__gesf2>
    af00:	18 16       	cp	r1, r24
    af02:	2c f0       	brlt	.+10     	; 0xaf0e <animate_sprite+0x5c>
	return anim->looped;
}

void animate_sprite(SpriteShared* s, u8 slot, u8 width, u8 height)
{
	s->vy = s->vy + s->gravity*FRAME_TIME;
    af04:	88 82       	st	Y, r8
    af06:	99 82       	std	Y+1, r9	; 0x01
    af08:	aa 82       	std	Y+2, r10	; 0x02
    af0a:	bb 82       	std	Y+3, r11	; 0x03
    af0c:	08 c0       	rjmp	.+16     	; 0xaf1e <animate_sprite+0x6c>
	if (s->vy > MAX_SPEED) s->vy = MAX_SPEED;
    af0e:	80 e0       	ldi	r24, 0x00	; 0
    af10:	90 e0       	ldi	r25, 0x00	; 0
    af12:	a0 ef       	ldi	r26, 0xF0	; 240
    af14:	b2 e4       	ldi	r27, 0x42	; 66
    af16:	88 83       	st	Y, r24
    af18:	99 83       	std	Y+1, r25	; 0x01
    af1a:	aa 83       	std	Y+2, r26	; 0x02
    af1c:	bb 83       	std	Y+3, r27	; 0x03
	s->x += s->vx*FRAME_TIME;
    af1e:	6c 85       	ldd	r22, Y+12	; 0x0c
    af20:	7d 85       	ldd	r23, Y+13	; 0x0d
    af22:	88 27       	eor	r24, r24
    af24:	77 fd       	sbrc	r23, 7
    af26:	80 95       	com	r24
    af28:	98 2f       	mov	r25, r24
    af2a:	0e 94 66 68 	call	0xd0cc	; 0xd0cc <__floatsisf>
    af2e:	29 e8       	ldi	r18, 0x89	; 137
    af30:	38 e8       	ldi	r19, 0x88	; 136
    af32:	48 e8       	ldi	r20, 0x88	; 136
    af34:	5c e3       	ldi	r21, 0x3C	; 60
    af36:	0e 94 1a 69 	call	0xd234	; 0xd234 <__mulsf3>
    af3a:	9b 01       	movw	r18, r22
    af3c:	ac 01       	movw	r20, r24
    af3e:	6c 81       	ldd	r22, Y+4	; 0x04
    af40:	7d 81       	ldd	r23, Y+5	; 0x05
    af42:	8e 81       	ldd	r24, Y+6	; 0x06
    af44:	9f 81       	ldd	r25, Y+7	; 0x07
    af46:	0e 94 d0 67 	call	0xcfa0	; 0xcfa0 <__addsf3>
    af4a:	6c 83       	std	Y+4, r22	; 0x04
    af4c:	7d 83       	std	Y+5, r23	; 0x05
    af4e:	8e 83       	std	Y+6, r24	; 0x06
    af50:	9f 83       	std	Y+7, r25	; 0x07
	s->y += s->vy*FRAME_TIME;
    af52:	29 e8       	ldi	r18, 0x89	; 137
    af54:	38 e8       	ldi	r19, 0x88	; 136
    af56:	48 e8       	ldi	r20, 0x88	; 136
    af58:	5c e3       	ldi	r21, 0x3C	; 60
    af5a:	68 81       	ld	r22, Y
    af5c:	79 81       	ldd	r23, Y+1	; 0x01
    af5e:	8a 81       	ldd	r24, Y+2	; 0x02
    af60:	9b 81       	ldd	r25, Y+3	; 0x03
    af62:	0e 94 1a 69 	call	0xd234	; 0xd234 <__mulsf3>
    af66:	9b 01       	movw	r18, r22
    af68:	ac 01       	movw	r20, r24
    af6a:	68 85       	ldd	r22, Y+8	; 0x08
    af6c:	79 85       	ldd	r23, Y+9	; 0x09
    af6e:	8a 85       	ldd	r24, Y+10	; 0x0a
    af70:	9b 85       	ldd	r25, Y+11	; 0x0b
    af72:	0e 94 d0 67 	call	0xcfa0	; 0xcfa0 <__addsf3>
    af76:	68 87       	std	Y+8, r22	; 0x08
    af78:	79 87       	std	Y+9, r23	; 0x09
    af7a:	8a 87       	std	Y+10, r24	; 0x0a
    af7c:	9b 87       	std	Y+11, r25	; 0x0b
	collision_detect_level(s, width, height);
    af7e:	40 2f       	mov	r20, r16
    af80:	61 2f       	mov	r22, r17
    af82:	ce 01       	movw	r24, r28
    af84:	0e 94 3a 52 	call	0xa474	; 0xa474 <collision_detect_level>
	LBMoveSprite(slot, s->x - game.camera_x, s->y - game.camera_y, width, height);
    af88:	e0 91 ac 0d 	lds	r30, 0x0DAC
    af8c:	f0 91 ad 0d 	lds	r31, 0x0DAD
    af90:	bf 01       	movw	r22, r30
    af92:	80 e0       	ldi	r24, 0x00	; 0
    af94:	90 e0       	ldi	r25, 0x00	; 0
    af96:	0e 94 64 68 	call	0xd0c8	; 0xd0c8 <__floatunsisf>
    af9a:	9b 01       	movw	r18, r22
    af9c:	ac 01       	movw	r20, r24
    af9e:	68 85       	ldd	r22, Y+8	; 0x08
    afa0:	79 85       	ldd	r23, Y+9	; 0x09
    afa2:	8a 85       	ldd	r24, Y+10	; 0x0a
    afa4:	9b 85       	ldd	r25, Y+11	; 0x0b
    afa6:	0e 94 cf 67 	call	0xcf9e	; 0xcf9e <__subsf3>
    afaa:	0e 94 38 68 	call	0xd070	; 0xd070 <__fixunssfsi>
    afae:	b6 2e       	mov	r11, r22
    afb0:	e0 91 aa 0d 	lds	r30, 0x0DAA
    afb4:	f0 91 ab 0d 	lds	r31, 0x0DAB
    afb8:	bf 01       	movw	r22, r30
    afba:	80 e0       	ldi	r24, 0x00	; 0
    afbc:	90 e0       	ldi	r25, 0x00	; 0
    afbe:	0e 94 64 68 	call	0xd0c8	; 0xd0c8 <__floatunsisf>
    afc2:	9b 01       	movw	r18, r22
    afc4:	ac 01       	movw	r20, r24
    afc6:	6c 81       	ldd	r22, Y+4	; 0x04
    afc8:	7d 81       	ldd	r23, Y+5	; 0x05
    afca:	8e 81       	ldd	r24, Y+6	; 0x06
    afcc:	9f 81       	ldd	r25, Y+7	; 0x07
    afce:	0e 94 cf 67 	call	0xcf9e	; 0xcf9e <__subsf3>
    afd2:	0e 94 38 68 	call	0xd070	; 0xd070 <__fixunssfsi>
    afd6:	21 2f       	mov	r18, r17
    afd8:	4b 2d       	mov	r20, r11
    afda:	8f 2d       	mov	r24, r15
    afdc:	0e 94 16 4b 	call	0x962c	; 0x962c <LBMoveSprite>
}
    afe0:	df 91       	pop	r29
    afe2:	cf 91       	pop	r28
    afe4:	1f 91       	pop	r17
    afe6:	0f 91       	pop	r16
    afe8:	ff 90       	pop	r15
    afea:	bf 90       	pop	r11
    afec:	af 90       	pop	r10
    afee:	9f 90       	pop	r9
    aff0:	8f 90       	pop	r8
    aff2:	08 95       	ret

0000aff4 <animate_player>:

void animate_player()
{
    aff4:	0f 93       	push	r16
    aff6:	cf 93       	push	r28
	if (game.player.flags & EXPLODING)
    aff8:	80 91 d4 0d 	lds	r24, 0x0DD4
    affc:	84 ff       	sbrs	r24, 4
    affe:	38 c0       	rjmp	.+112    	; 0xb070 <animate_player+0x7c>
	{
		LBMoveSprite(PLAYER_SLOT, game.player.shared.x - game.camera_x, game.player.shared.y - game.camera_y, game.player.width, game.player.height);
    b000:	60 91 ac 0d 	lds	r22, 0x0DAC
    b004:	70 91 ad 0d 	lds	r23, 0x0DAD
    b008:	80 e0       	ldi	r24, 0x00	; 0
    b00a:	90 e0       	ldi	r25, 0x00	; 0
    b00c:	0e 94 64 68 	call	0xd0c8	; 0xd0c8 <__floatunsisf>
    b010:	9b 01       	movw	r18, r22
    b012:	ac 01       	movw	r20, r24
    b014:	60 91 cc 0d 	lds	r22, 0x0DCC
    b018:	70 91 cd 0d 	lds	r23, 0x0DCD
    b01c:	80 91 ce 0d 	lds	r24, 0x0DCE
    b020:	90 91 cf 0d 	lds	r25, 0x0DCF
    b024:	0e 94 cf 67 	call	0xcf9e	; 0xcf9e <__subsf3>
    b028:	0e 94 38 68 	call	0xd070	; 0xd070 <__fixunssfsi>
    b02c:	c6 2f       	mov	r28, r22
    b02e:	60 91 aa 0d 	lds	r22, 0x0DAA
    b032:	70 91 ab 0d 	lds	r23, 0x0DAB
    b036:	80 e0       	ldi	r24, 0x00	; 0
    b038:	90 e0       	ldi	r25, 0x00	; 0
    b03a:	0e 94 64 68 	call	0xd0c8	; 0xd0c8 <__floatunsisf>
    b03e:	9b 01       	movw	r18, r22
    b040:	ac 01       	movw	r20, r24
    b042:	60 91 c8 0d 	lds	r22, 0x0DC8
    b046:	70 91 c9 0d 	lds	r23, 0x0DC9
    b04a:	80 91 ca 0d 	lds	r24, 0x0DCA
    b04e:	90 91 cb 0d 	lds	r25, 0x0DCB
    b052:	0e 94 cf 67 	call	0xcf9e	; 0xcf9e <__subsf3>
    b056:	0e 94 38 68 	call	0xd070	; 0xd070 <__fixunssfsi>
    b05a:	00 91 d8 0d 	lds	r16, 0x0DD8
    b05e:	20 91 d7 0d 	lds	r18, 0x0DD7
    b062:	4c 2f       	mov	r20, r28
    b064:	80 e0       	ldi	r24, 0x00	; 0
    b066:	0e 94 16 4b 	call	0x962c	; 0x962c <LBMoveSprite>
	}
	else animate_sprite(&game.player.shared, PLAYER_SLOT, game.player.width, game.player.height);
}
    b06a:	cf 91       	pop	r28
    b06c:	0f 91       	pop	r16
    b06e:	08 95       	ret
{
	if (game.player.flags & EXPLODING)
	{
		LBMoveSprite(PLAYER_SLOT, game.player.shared.x - game.camera_x, game.player.shared.y - game.camera_y, game.player.width, game.player.height);
	}
	else animate_sprite(&game.player.shared, PLAYER_SLOT, game.player.width, game.player.height);
    b070:	20 91 d8 0d 	lds	r18, 0x0DD8
    b074:	40 91 d7 0d 	lds	r20, 0x0DD7
    b078:	60 e0       	ldi	r22, 0x00	; 0
    b07a:	84 ec       	ldi	r24, 0xC4	; 196
    b07c:	9d e0       	ldi	r25, 0x0D	; 13
}
    b07e:	cf 91       	pop	r28
    b080:	0f 91       	pop	r16
{
	if (game.player.flags & EXPLODING)
	{
		LBMoveSprite(PLAYER_SLOT, game.player.shared.x - game.camera_x, game.player.shared.y - game.camera_y, game.player.width, game.player.height);
	}
	else animate_sprite(&game.player.shared, PLAYER_SLOT, game.player.width, game.player.height);
    b082:	0c 94 59 57 	jmp	0xaeb2	; 0xaeb2 <animate_sprite>

0000b086 <update_spider_enemy>:
}

void update_spider_enemy(Enemy* e, u8 slot)
{
    b086:	1f 93       	push	r17
    b088:	cf 93       	push	r28
    b08a:	df 93       	push	r29
    b08c:	ec 01       	movw	r28, r24
    b08e:	16 2f       	mov	r17, r22
	if (e->flags & IDLE && e->frame_count == SPIDER_IDLE_FRAMES)
    b090:	98 89       	ldd	r25, Y+16	; 0x10
    b092:	89 2f       	mov	r24, r25
    b094:	88 70       	andi	r24, 0x08	; 8
    b096:	93 ff       	sbrs	r25, 3
    b098:	1e c0       	rjmp	.+60     	; 0xb0d6 <update_spider_enemy+0x50>
    b09a:	2d 89       	ldd	r18, Y+21	; 0x15
    b09c:	20 38       	cpi	r18, 0x80	; 128
    b09e:	d9 f4       	brne	.+54     	; 0xb0d6 <update_spider_enemy+0x50>
	{
		e->flags = JUMPING;
    b0a0:	81 e0       	ldi	r24, 0x01	; 1
    b0a2:	88 8b       	std	Y+16, r24	; 0x10
		e->shared.vy = -SPIDER_JUMP_SPEED;
    b0a4:	80 e0       	ldi	r24, 0x00	; 0
    b0a6:	90 e0       	ldi	r25, 0x00	; 0
    b0a8:	a8 ec       	ldi	r26, 0xC8	; 200
    b0aa:	b2 ec       	ldi	r27, 0xC2	; 194
    b0ac:	88 83       	st	Y, r24
    b0ae:	99 83       	std	Y+1, r25	; 0x01
    b0b0:	aa 83       	std	Y+2, r26	; 0x02
    b0b2:	bb 83       	std	Y+3, r27	; 0x03
		e->shared.gravity = GRAVITY;
    b0b4:	8f ef       	ldi	r24, 0xFF	; 255
    b0b6:	8e 87       	std	Y+14, r24	; 0x0e
		e->shared.vx = SPIDER_SIDE_SPEED;
    b0b8:	8c e3       	ldi	r24, 0x3C	; 60
    b0ba:	90 e0       	ldi	r25, 0x00	; 0
    b0bc:	9d 87       	std	Y+13, r25	; 0x0d
    b0be:	8c 87       	std	Y+12, r24	; 0x0c
		if (e->direction == D_LEFT)
    b0c0:	89 89       	ldd	r24, Y+17	; 0x11
    b0c2:	81 11       	cpse	r24, r1
    b0c4:	04 c0       	rjmp	.+8      	; 0xb0ce <update_spider_enemy+0x48>
		{
			e->shared.vx = -SPIDER_SIDE_SPEED;
    b0c6:	84 ec       	ldi	r24, 0xC4	; 196
    b0c8:	9f ef       	ldi	r25, 0xFF	; 255
    b0ca:	9d 87       	std	Y+13, r25	; 0x0d
    b0cc:	8c 87       	std	Y+12, r24	; 0x0c
		}
		LBMapSprite(slot, map_enemy_spider_1, 0);
    b0ce:	40 e0       	ldi	r20, 0x00	; 0
    b0d0:	6d e5       	ldi	r22, 0x5D	; 93
    b0d2:	7d e2       	ldi	r23, 0x2D	; 45
    b0d4:	1a c0       	rjmp	.+52     	; 0xb10a <update_spider_enemy+0x84>
	}
	else if (e->flags & JUMPING && e->shared.gravity == 0)
    b0d6:	90 ff       	sbrs	r25, 0
    b0d8:	10 c0       	rjmp	.+32     	; 0xb0fa <update_spider_enemy+0x74>
    b0da:	9e 85       	ldd	r25, Y+14	; 0x0e
    b0dc:	91 11       	cpse	r25, r1
    b0de:	0d c0       	rjmp	.+26     	; 0xb0fa <update_spider_enemy+0x74>
	{
		e->flags = IDLE;
    b0e0:	88 e0       	ldi	r24, 0x08	; 8
    b0e2:	88 8b       	std	Y+16, r24	; 0x10
		e->shared.vx = 0;
    b0e4:	1d 86       	std	Y+13, r1	; 0x0d
    b0e6:	1c 86       	std	Y+12, r1	; 0x0c
		e->frame_count = 0;
    b0e8:	1d 8a       	std	Y+21, r1	; 0x15
		if (e->direction == D_LEFT)
    b0ea:	89 89       	ldd	r24, Y+17	; 0x11
    b0ec:	81 11       	cpse	r24, r1
    b0ee:	03 c0       	rjmp	.+6      	; 0xb0f6 <update_spider_enemy+0x70>
		{
			e->direction = D_RIGHT;
    b0f0:	81 e0       	ldi	r24, 0x01	; 1
    b0f2:	89 8b       	std	Y+17, r24	; 0x11
    b0f4:	0d c0       	rjmp	.+26     	; 0xb110 <update_spider_enemy+0x8a>
		}
		else
		{
			e->direction = D_LEFT;
    b0f6:	19 8a       	std	Y+17, r1	; 0x11
    b0f8:	0b c0       	rjmp	.+22     	; 0xb110 <update_spider_enemy+0x8a>
		}
	}
	else if (e->flags & IDLE)
    b0fa:	88 23       	and	r24, r24
    b0fc:	49 f0       	breq	.+18     	; 0xb110 <update_spider_enemy+0x8a>
	{
		LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    b0fe:	ce 01       	movw	r24, r28
    b100:	c2 96       	adiw	r24, 0x32	; 50
    b102:	0e 94 62 49 	call	0x92c4	; 0x92c4 <LBGetNextFrame>
    b106:	40 e0       	ldi	r20, 0x00	; 0
    b108:	bc 01       	movw	r22, r24
    b10a:	81 2f       	mov	r24, r17
    b10c:	0e 94 c4 4a 	call	0x9588	; 0x9588 <LBMapSprite>
	}
	e->frame_count++;
    b110:	8d 89       	ldd	r24, Y+21	; 0x15
    b112:	8f 5f       	subi	r24, 0xFF	; 255
    b114:	8d 8b       	std	Y+21, r24	; 0x15
}
    b116:	df 91       	pop	r29
    b118:	cf 91       	pop	r28
    b11a:	1f 91       	pop	r17
    b11c:	08 95       	ret

0000b11e <update_shark_enemy>:

void update_shark_enemy(Enemy* e, u8 slot)
{
    b11e:	cf 93       	push	r28
    b120:	fc 01       	movw	r30, r24
    b122:	c6 2f       	mov	r28, r22
	e->shared.vx = SHARK_SPEED;
    b124:	84 e1       	ldi	r24, 0x14	; 20
    b126:	90 e0       	ldi	r25, 0x00	; 0
    b128:	95 87       	std	Z+13, r25	; 0x0d
    b12a:	84 87       	std	Z+12, r24	; 0x0c
	e->shared.vy = 0;
    b12c:	10 82       	st	Z, r1
    b12e:	11 82       	std	Z+1, r1	; 0x01
    b130:	12 82       	std	Z+2, r1	; 0x02
    b132:	13 82       	std	Z+3, r1	; 0x03
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    b134:	cf 01       	movw	r24, r30
    b136:	c2 96       	adiw	r24, 0x32	; 50
    b138:	0e 94 62 49 	call	0x92c4	; 0x92c4 <LBGetNextFrame>
    b13c:	40 e0       	ldi	r20, 0x00	; 0
    b13e:	bc 01       	movw	r22, r24
    b140:	8c 2f       	mov	r24, r28
}
    b142:	cf 91       	pop	r28

void update_shark_enemy(Enemy* e, u8 slot)
{
	e->shared.vx = SHARK_SPEED;
	e->shared.vy = 0;
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    b144:	0c 94 c4 4a 	jmp	0x9588	; 0x9588 <LBMapSprite>

0000b148 <update_basic_shot>:
}

void update_basic_shot(Shot* s, u8 slot)
{
    b148:	cf 93       	push	r28
    b14a:	c6 2f       	mov	r28, r22
	LBMapSprite(slot, LBGetNextFrame(&s->anim), 0);
    b14c:	42 96       	adiw	r24, 0x12	; 18
    b14e:	0e 94 62 49 	call	0x92c4	; 0x92c4 <LBGetNextFrame>
    b152:	40 e0       	ldi	r20, 0x00	; 0
    b154:	bc 01       	movw	r22, r24
    b156:	8c 2f       	mov	r24, r28
}
    b158:	cf 91       	pop	r28
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
}

void update_basic_shot(Shot* s, u8 slot)
{
	LBMapSprite(slot, LBGetNextFrame(&s->anim), 0);
    b15a:	0c 94 c4 4a 	jmp	0x9588	; 0x9588 <LBMapSprite>

0000b15e <update_enemies>:
}

void update_enemies()
{
    b15e:	ef 92       	push	r14
    b160:	ff 92       	push	r15
    b162:	0f 93       	push	r16
    b164:	1f 93       	push	r17
    b166:	cf 93       	push	r28
    b168:	df 93       	push	r29
    b16a:	c3 e6       	ldi	r28, 0x63	; 99
    b16c:	de e0       	ldi	r29, 0x0E	; 14
	u8 slot = ENEMY_SLOT;
    b16e:	16 e0       	ldi	r17, 0x06	; 6
    b170:	ce 01       	movw	r24, r28
    b172:	03 97       	sbiw	r24, 0x03	; 3
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].flags & EXPLODING)
    b174:	fc 01       	movw	r30, r24
    b176:	20 81       	ld	r18, Z
    b178:	ae 01       	movw	r20, r28
    b17a:	41 50       	subi	r20, 0x01	; 1
    b17c:	51 09       	sbc	r21, r1
    b17e:	7a 01       	movw	r14, r20
    b180:	24 ff       	sbrs	r18, 4
    b182:	0a c0       	rjmp	.+20     	; 0xb198 <update_enemies+0x3a>
		{
			map_explosion(&game.enemies[i].flags, &game.enemies[i].expl, slot, game.enemies[i].width, game.enemies[i].height);
    b184:	08 81       	ld	r16, Y
    b186:	fa 01       	movw	r30, r20
    b188:	20 81       	ld	r18, Z
    b18a:	41 2f       	mov	r20, r17
    b18c:	be 01       	movw	r22, r28
    b18e:	69 5d       	subi	r22, 0xD9	; 217
    b190:	7f 4f       	sbci	r23, 0xFF	; 255
    b192:	0e 94 0e 57 	call	0xae1c	; 0xae1c <map_explosion>
    b196:	15 c0       	rjmp	.+42     	; 0xb1c2 <update_enemies+0x64>
    b198:	fe 01       	movw	r30, r28
    b19a:	34 97       	sbiw	r30, 0x04	; 4
		}
		else if (game.enemies[i].active)
    b19c:	80 81       	ld	r24, Z
    b19e:	88 23       	and	r24, r24
    b1a0:	81 f0       	breq	.+32     	; 0xb1c2 <update_enemies+0x64>
		{
			switch (game.enemies[i].enemy_type)
    b1a2:	89 81       	ldd	r24, Y+1	; 0x01
    b1a4:	88 23       	and	r24, r24
    b1a6:	41 f0       	breq	.+16     	; 0xb1b8 <update_enemies+0x5a>
    b1a8:	81 30       	cpi	r24, 0x01	; 1
    b1aa:	59 f4       	brne	.+22     	; 0xb1c2 <update_enemies+0x64>
			{
				case ENEMY_SPIDER: update_spider_enemy(&game.enemies[i], slot); break;
				case ENEMY_SHARK: update_shark_enemy(&game.enemies[i], slot); break;
    b1ac:	61 2f       	mov	r22, r17
    b1ae:	ce 01       	movw	r24, r28
    b1b0:	43 97       	sbiw	r24, 0x13	; 19
    b1b2:	0e 94 8f 58 	call	0xb11e	; 0xb11e <update_shark_enemy>
    b1b6:	05 c0       	rjmp	.+10     	; 0xb1c2 <update_enemies+0x64>
		}
		else if (game.enemies[i].active)
		{
			switch (game.enemies[i].enemy_type)
			{
				case ENEMY_SPIDER: update_spider_enemy(&game.enemies[i], slot); break;
    b1b8:	61 2f       	mov	r22, r17
    b1ba:	ce 01       	movw	r24, r28
    b1bc:	43 97       	sbiw	r24, 0x13	; 19
    b1be:	0e 94 43 58 	call	0xb086	; 0xb086 <update_spider_enemy>
				case ENEMY_SHARK: update_shark_enemy(&game.enemies[i], slot); break;
			}
		}
		slot += game.enemies[i].width * game.enemies[i].height;
    b1c2:	f7 01       	movw	r30, r14
    b1c4:	90 81       	ld	r25, Z
    b1c6:	88 81       	ld	r24, Y
    b1c8:	98 9f       	mul	r25, r24
    b1ca:	10 0d       	add	r17, r0
    b1cc:	11 24       	eor	r1, r1
    b1ce:	ce 5b       	subi	r28, 0xBE	; 190
    b1d0:	df 4f       	sbci	r29, 0xFF	; 255

void update_enemies()
{
	u8 slot = ENEMY_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    b1d2:	ff e0       	ldi	r31, 0x0F	; 15
    b1d4:	cd 3a       	cpi	r28, 0xAD	; 173
    b1d6:	df 07       	cpc	r29, r31
    b1d8:	59 f6       	brne	.-106    	; 0xb170 <update_enemies+0x12>
				case ENEMY_SHARK: update_shark_enemy(&game.enemies[i], slot); break;
			}
		}
		slot += game.enemies[i].width * game.enemies[i].height;
	}
}
    b1da:	df 91       	pop	r29
    b1dc:	cf 91       	pop	r28
    b1de:	1f 91       	pop	r17
    b1e0:	0f 91       	pop	r16
    b1e2:	ff 90       	pop	r15
    b1e4:	ef 90       	pop	r14
    b1e6:	08 95       	ret

0000b1e8 <update_enemy_shots>:

void update_enemy_shots()
{
    b1e8:	8f 92       	push	r8
    b1ea:	9f 92       	push	r9
    b1ec:	af 92       	push	r10
    b1ee:	bf 92       	push	r11
    b1f0:	cf 92       	push	r12
    b1f2:	df 92       	push	r13
    b1f4:	ef 92       	push	r14
    b1f6:	ff 92       	push	r15
    b1f8:	0f 93       	push	r16
    b1fa:	1f 93       	push	r17
    b1fc:	cf 93       	push	r28
    b1fe:	df 93       	push	r29
    b200:	00 d0       	rcall	.+0      	; 0xb202 <update_enemy_shots+0x1a>
    b202:	00 d0       	rcall	.+0      	; 0xb204 <update_enemy_shots+0x1c>
    b204:	cd b7       	in	r28, 0x3d	; 61
    b206:	de b7       	in	r29, 0x3e	; 62
    b208:	26 e6       	ldi	r18, 0x66	; 102
    b20a:	82 2e       	mov	r8, r18
    b20c:	2e e0       	ldi	r18, 0x0E	; 14
    b20e:	92 2e       	mov	r9, r18
    b210:	09 e7       	ldi	r16, 0x79	; 121
    b212:	1e e0       	ldi	r17, 0x0E	; 14
    b214:	3f e0       	ldi	r19, 0x0F	; 15
    b216:	b3 2e       	mov	r11, r19
					if (!game.enemies[i].shot[j].active)
					{
						game.enemies[i].shot[j].active = 1;
						game.enemies[i].shot[j].shared.x = game.enemies[i].shared.x;
						game.enemies[i].shot[j].shared.y = ((u16 ) game.enemies[i].shared.y / 8) * 8;
						game.enemies[i].shot[j].shared.vx = ENEMY_SHOT_SPEED;
    b218:	44 e6       	ldi	r20, 0x64	; 100
    b21a:	e4 2e       	mov	r14, r20
    b21c:	f1 2c       	mov	r15, r1
						if (game.player.shared.x <= game.enemies[i].shared.x)
						{
							game.enemies[i].shot[j].shared.vx = -ENEMY_SHOT_SPEED;
    b21e:	5c e9       	ldi	r21, 0x9C	; 156
    b220:	c5 2e       	mov	r12, r21
    b222:	dd 24       	eor	r13, r13
    b224:	da 94       	dec	r13
    b226:	aa 24       	eor	r10, r10
    b228:	aa 94       	dec	r10
    b22a:	ab 0c       	add	r10, r11
    b22c:	f4 01       	movw	r30, r8
    b22e:	37 97       	sbiw	r30, 0x07	; 7
{
	u8 slot = ENEMY_SHOT_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].active && game.enemies[i].shot_frame_count >= ENEMY_SHOT_DELAY_FRAMES)
    b230:	80 81       	ld	r24, Z
    b232:	88 23       	and	r24, r24
    b234:	09 f4       	brne	.+2      	; 0xb238 <update_enemy_shots+0x50>
    b236:	58 c0       	rjmp	.+176    	; 0xb2e8 <update_enemy_shots+0x100>
    b238:	f4 01       	movw	r30, r8
    b23a:	80 81       	ld	r24, Z
    b23c:	8c 33       	cpi	r24, 0x3C	; 60
    b23e:	08 f4       	brcc	.+2      	; 0xb242 <update_enemy_shots+0x5a>
    b240:	50 c0       	rjmp	.+160    	; 0xb2e2 <update_enemy_shots+0xfa>
		{
			game.enemies[i].shot_frame_count = 0;	
    b242:	10 82       	st	Z, r1
    b244:	f8 01       	movw	r30, r16
    b246:	32 97       	sbiw	r30, 0x02	; 2
			for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
			{
				if (game.enemies[i].shot[j].shot_type == BASIC_ENEMY_SHOT)
    b248:	80 81       	ld	r24, Z
    b24a:	81 30       	cpi	r24, 0x01	; 1
    b24c:	09 f0       	breq	.+2      	; 0xb250 <update_enemy_shots+0x68>
    b24e:	4c c0       	rjmp	.+152    	; 0xb2e8 <update_enemy_shots+0x100>
				{
					if (!game.enemies[i].shot[j].active)
    b250:	f8 01       	movw	r30, r16
    b252:	90 81       	ld	r25, Z
    b254:	91 11       	cpse	r25, r1
    b256:	3f c0       	rjmp	.+126    	; 0xb2d6 <update_enemy_shots+0xee>
					{
						game.enemies[i].shot[j].active = 1;
    b258:	80 83       	st	Z, r24
    b25a:	f4 01       	movw	r30, r8
    b25c:	72 97       	sbiw	r30, 0x12	; 18
						game.enemies[i].shot[j].shared.x = game.enemies[i].shared.x;
    b25e:	20 81       	ld	r18, Z
    b260:	31 81       	ldd	r19, Z+1	; 0x01
    b262:	42 81       	ldd	r20, Z+2	; 0x02
    b264:	53 81       	ldd	r21, Z+3	; 0x03
    b266:	f4 01       	movw	r30, r8
    b268:	26 83       	std	Z+6, r18	; 0x06
    b26a:	37 83       	std	Z+7, r19	; 0x07
    b26c:	40 87       	std	Z+8, r20	; 0x08
    b26e:	51 87       	std	Z+9, r21	; 0x09
    b270:	3e 97       	sbiw	r30, 0x0e	; 14
						game.enemies[i].shot[j].shared.y = ((u16 ) game.enemies[i].shared.y / 8) * 8;
    b272:	60 81       	ld	r22, Z
    b274:	71 81       	ldd	r23, Z+1	; 0x01
    b276:	82 81       	ldd	r24, Z+2	; 0x02
    b278:	93 81       	ldd	r25, Z+3	; 0x03
    b27a:	29 83       	std	Y+1, r18	; 0x01
    b27c:	3a 83       	std	Y+2, r19	; 0x02
    b27e:	4b 83       	std	Y+3, r20	; 0x03
    b280:	5c 83       	std	Y+4, r21	; 0x04
    b282:	0e 94 38 68 	call	0xd070	; 0xd070 <__fixunssfsi>
    b286:	83 e0       	ldi	r24, 0x03	; 3
    b288:	76 95       	lsr	r23
    b28a:	67 95       	ror	r22
    b28c:	8a 95       	dec	r24
    b28e:	e1 f7       	brne	.-8      	; 0xb288 <update_enemy_shots+0xa0>
    b290:	93 e0       	ldi	r25, 0x03	; 3
    b292:	66 0f       	add	r22, r22
    b294:	77 1f       	adc	r23, r23
    b296:	9a 95       	dec	r25
    b298:	e1 f7       	brne	.-8      	; 0xb292 <update_enemy_shots+0xaa>
    b29a:	80 e0       	ldi	r24, 0x00	; 0
    b29c:	90 e0       	ldi	r25, 0x00	; 0
    b29e:	0e 94 64 68 	call	0xd0c8	; 0xd0c8 <__floatunsisf>
    b2a2:	f4 01       	movw	r30, r8
    b2a4:	62 87       	std	Z+10, r22	; 0x0a
    b2a6:	73 87       	std	Z+11, r23	; 0x0b
    b2a8:	84 87       	std	Z+12, r24	; 0x0c
    b2aa:	95 87       	std	Z+13, r25	; 0x0d
						game.enemies[i].shot[j].shared.vx = ENEMY_SHOT_SPEED;
    b2ac:	f7 86       	std	Z+15, r15	; 0x0f
    b2ae:	e6 86       	std	Z+14, r14	; 0x0e
						if (game.player.shared.x <= game.enemies[i].shared.x)
    b2b0:	29 81       	ldd	r18, Y+1	; 0x01
    b2b2:	3a 81       	ldd	r19, Y+2	; 0x02
    b2b4:	4b 81       	ldd	r20, Y+3	; 0x03
    b2b6:	5c 81       	ldd	r21, Y+4	; 0x04
    b2b8:	60 91 c8 0d 	lds	r22, 0x0DC8
    b2bc:	70 91 c9 0d 	lds	r23, 0x0DC9
    b2c0:	80 91 ca 0d 	lds	r24, 0x0DCA
    b2c4:	90 91 cb 0d 	lds	r25, 0x0DCB
    b2c8:	0e 94 34 68 	call	0xd068	; 0xd068 <__cmpsf2>
    b2cc:	18 16       	cp	r1, r24
    b2ce:	1c f0       	brlt	.+6      	; 0xb2d6 <update_enemy_shots+0xee>
						{
							game.enemies[i].shot[j].shared.vx = -ENEMY_SHOT_SPEED;
    b2d0:	f4 01       	movw	r30, r8
    b2d2:	d7 86       	std	Z+15, r13	; 0x0f
    b2d4:	c6 86       	std	Z+14, r12	; 0x0e
						}
					}
					update_basic_shot(&game.enemies[i].shot[j], slot);
    b2d6:	6a 2d       	mov	r22, r10
    b2d8:	c4 01       	movw	r24, r8
    b2da:	02 96       	adiw	r24, 0x02	; 2
    b2dc:	0e 94 a4 58 	call	0xb148	; 0xb148 <update_basic_shot>
    b2e0:	03 c0       	rjmp	.+6      	; 0xb2e8 <update_enemy_shots+0x100>
				slot += 1;
			}
		}
		else if (game.enemies[i].active)
		{
			game.enemies[i].shot_frame_count++;
    b2e2:	8f 5f       	subi	r24, 0xFF	; 255
    b2e4:	f4 01       	movw	r30, r8
    b2e6:	80 83       	st	Z, r24
    b2e8:	b3 94       	inc	r11
    b2ea:	f2 e4       	ldi	r31, 0x42	; 66
    b2ec:	8f 0e       	add	r8, r31
    b2ee:	91 1c       	adc	r9, r1
    b2f0:	0e 5b       	subi	r16, 0xBE	; 190
    b2f2:	1f 4f       	sbci	r17, 0xFF	; 255

void update_enemy_shots()
{
	u8 slot = ENEMY_SHOT_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    b2f4:	84 e1       	ldi	r24, 0x14	; 20
    b2f6:	b8 12       	cpse	r11, r24
    b2f8:	96 cf       	rjmp	.-212    	; 0xb226 <update_enemy_shots+0x3e>
		else
		{
			slot += MAX_ENEMY_SHOTS;
		}
	}
}
    b2fa:	0f 90       	pop	r0
    b2fc:	0f 90       	pop	r0
    b2fe:	0f 90       	pop	r0
    b300:	0f 90       	pop	r0
    b302:	df 91       	pop	r29
    b304:	cf 91       	pop	r28
    b306:	1f 91       	pop	r17
    b308:	0f 91       	pop	r16
    b30a:	ff 90       	pop	r15
    b30c:	ef 90       	pop	r14
    b30e:	df 90       	pop	r13
    b310:	cf 90       	pop	r12
    b312:	bf 90       	pop	r11
    b314:	af 90       	pop	r10
    b316:	9f 90       	pop	r9
    b318:	8f 90       	pop	r8
    b31a:	08 95       	ret

0000b31c <animate_enemies>:

void animate_enemies()
{
    b31c:	2f 92       	push	r2
    b31e:	3f 92       	push	r3
    b320:	4f 92       	push	r4
    b322:	5f 92       	push	r5
    b324:	6f 92       	push	r6
    b326:	7f 92       	push	r7
    b328:	8f 92       	push	r8
    b32a:	9f 92       	push	r9
    b32c:	af 92       	push	r10
    b32e:	bf 92       	push	r11
    b330:	cf 92       	push	r12
    b332:	df 92       	push	r13
    b334:	ef 92       	push	r14
    b336:	ff 92       	push	r15
    b338:	0f 93       	push	r16
    b33a:	1f 93       	push	r17
    b33c:	cf 93       	push	r28
    b33e:	df 93       	push	r29
    b340:	cd b7       	in	r28, 0x3d	; 61
    b342:	de b7       	in	r29, 0x3e	; 62
    b344:	2c 97       	sbiw	r28, 0x0c	; 12
    b346:	0f b6       	in	r0, 0x3f	; 63
    b348:	f8 94       	cli
    b34a:	de bf       	out	0x3e, r29	; 62
    b34c:	0f be       	out	0x3f, r0	; 63
    b34e:	cd bf       	out	0x3d, r28	; 61
    b350:	42 e6       	ldi	r20, 0x62	; 98
    b352:	24 2e       	mov	r2, r20
    b354:	4e e0       	ldi	r20, 0x0E	; 14
    b356:	34 2e       	mov	r3, r20
    b358:	83 e6       	ldi	r24, 0x63	; 99
    b35a:	9e e0       	ldi	r25, 0x0E	; 14
    b35c:	9c 87       	std	Y+12, r25	; 0x0c
    b35e:	8b 87       	std	Y+11, r24	; 0x0b
    b360:	50 e5       	ldi	r21, 0x50	; 80
    b362:	85 2e       	mov	r8, r21
    b364:	5e e0       	ldi	r21, 0x0E	; 14
    b366:	95 2e       	mov	r9, r21
	u8 slot = ENEMY_SLOT;
    b368:	66 e0       	ldi	r22, 0x06	; 6
    b36a:	b6 2e       	mov	r11, r22
    b36c:	eb 85       	ldd	r30, Y+11	; 0x0b
    b36e:	fc 85       	ldd	r31, Y+12	; 0x0c
    b370:	34 97       	sbiw	r30, 0x04	; 4
    b372:	fa 83       	std	Y+2, r31	; 0x02
    b374:	e9 83       	std	Y+1, r30	; 0x01
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].active && !(game.enemies[i].flags & EXPLODING))
    b376:	80 81       	ld	r24, Z
    b378:	eb 85       	ldd	r30, Y+11	; 0x0b
    b37a:	fc 85       	ldd	r31, Y+12	; 0x0c
    b37c:	33 97       	sbiw	r30, 0x03	; 3
    b37e:	88 23       	and	r24, r24
    b380:	09 f4       	brne	.+2      	; 0xb384 <animate_enemies+0x68>
    b382:	a9 c0       	rjmp	.+338    	; 0xb4d6 <animate_enemies+0x1ba>
    b384:	80 81       	ld	r24, Z
    b386:	84 fd       	sbrc	r24, 4
    b388:	a6 c0       	rjmp	.+332    	; 0xb4d6 <animate_enemies+0x1ba>
		{
			if (game.enemies[i].shared.x < game.camera_x || game.enemies[i].shared.y < game.camera_y || game.enemies[i].shared.y > game.camera_y + CAMERA_HEIGHT*8)
    b38a:	f4 01       	movw	r30, r8
    b38c:	44 80       	ldd	r4, Z+4	; 0x04
    b38e:	55 80       	ldd	r5, Z+5	; 0x05
    b390:	66 80       	ldd	r6, Z+6	; 0x06
    b392:	77 80       	ldd	r7, Z+7	; 0x07
    b394:	60 91 aa 0d 	lds	r22, 0x0DAA
    b398:	70 91 ab 0d 	lds	r23, 0x0DAB
    b39c:	80 e0       	ldi	r24, 0x00	; 0
    b39e:	90 e0       	ldi	r25, 0x00	; 0
    b3a0:	0e 94 64 68 	call	0xd0c8	; 0xd0c8 <__floatunsisf>
    b3a4:	9b 01       	movw	r18, r22
    b3a6:	ac 01       	movw	r20, r24
    b3a8:	c3 01       	movw	r24, r6
    b3aa:	b2 01       	movw	r22, r4
    b3ac:	0e 94 34 68 	call	0xd068	; 0xd068 <__cmpsf2>
    b3b0:	87 fd       	sbrc	r24, 7
    b3b2:	25 c0       	rjmp	.+74     	; 0xb3fe <animate_enemies+0xe2>
    b3b4:	f4 01       	movw	r30, r8
    b3b6:	c0 84       	ldd	r12, Z+8	; 0x08
    b3b8:	d1 84       	ldd	r13, Z+9	; 0x09
    b3ba:	e2 84       	ldd	r14, Z+10	; 0x0a
    b3bc:	f3 84       	ldd	r15, Z+11	; 0x0b
    b3be:	00 91 ac 0d 	lds	r16, 0x0DAC
    b3c2:	10 91 ad 0d 	lds	r17, 0x0DAD
    b3c6:	b8 01       	movw	r22, r16
    b3c8:	80 e0       	ldi	r24, 0x00	; 0
    b3ca:	90 e0       	ldi	r25, 0x00	; 0
    b3cc:	0e 94 64 68 	call	0xd0c8	; 0xd0c8 <__floatunsisf>
    b3d0:	9b 01       	movw	r18, r22
    b3d2:	ac 01       	movw	r20, r24
    b3d4:	c7 01       	movw	r24, r14
    b3d6:	b6 01       	movw	r22, r12
    b3d8:	0e 94 34 68 	call	0xd068	; 0xd068 <__cmpsf2>
    b3dc:	87 fd       	sbrc	r24, 7
    b3de:	0f c0       	rjmp	.+30     	; 0xb3fe <animate_enemies+0xe2>
    b3e0:	b8 01       	movw	r22, r16
    b3e2:	60 53       	subi	r22, 0x30	; 48
    b3e4:	7f 4f       	sbci	r23, 0xFF	; 255
    b3e6:	80 e0       	ldi	r24, 0x00	; 0
    b3e8:	90 e0       	ldi	r25, 0x00	; 0
    b3ea:	0e 94 64 68 	call	0xd0c8	; 0xd0c8 <__floatunsisf>
    b3ee:	9b 01       	movw	r18, r22
    b3f0:	ac 01       	movw	r20, r24
    b3f2:	c7 01       	movw	r24, r14
    b3f4:	b6 01       	movw	r22, r12
    b3f6:	0e 94 16 69 	call	0xd22c	; 0xd22c <__gesf2>
    b3fa:	18 16       	cp	r1, r24
    b3fc:	84 f4       	brge	.+32     	; 0xb41e <animate_enemies+0x102>
			{
				game.enemies[i].active = 0;
    b3fe:	e9 81       	ldd	r30, Y+1	; 0x01
    b400:	fa 81       	ldd	r31, Y+2	; 0x02
    b402:	10 82       	st	Z, r1
				game.active_enemies--;
    b404:	80 91 c1 0d 	lds	r24, 0x0DC1
    b408:	81 50       	subi	r24, 0x01	; 1
    b40a:	80 93 c1 0d 	sts	0x0DC1, r24
				LBMoveSprite(slot, OFF_SCREEN, 0, game.enemies[i].width, game.enemies[i].height);
    b40e:	eb 85       	ldd	r30, Y+11	; 0x0b
    b410:	fc 85       	ldd	r31, Y+12	; 0x0c
    b412:	00 81       	ld	r16, Z
    b414:	f1 01       	movw	r30, r2
    b416:	20 81       	ld	r18, Z
    b418:	40 e0       	ldi	r20, 0x00	; 0
    b41a:	60 ee       	ldi	r22, 0xE0	; 224
    b41c:	8c c0       	rjmp	.+280    	; 0xb536 <animate_enemies+0x21a>
			}
			else if (LBCollides(game.player.shared.x,game.player.shared.y, game.player.width*8, game.player.height*8,
    b41e:	c7 01       	movw	r24, r14
    b420:	b6 01       	movw	r22, r12
    b422:	0e 94 38 68 	call	0xd070	; 0xd070 <__fixunssfsi>
    b426:	69 83       	std	Y+1, r22	; 0x01
    b428:	7a 83       	std	Y+2, r23	; 0x02
    b42a:	8b 83       	std	Y+3, r24	; 0x03
    b42c:	9c 83       	std	Y+4, r25	; 0x04
    b42e:	c3 01       	movw	r24, r6
    b430:	b2 01       	movw	r22, r4
    b432:	0e 94 38 68 	call	0xd070	; 0xd070 <__fixunssfsi>
    b436:	6d 83       	std	Y+5, r22	; 0x05
    b438:	7e 83       	std	Y+6, r23	; 0x06
    b43a:	8f 83       	std	Y+7, r24	; 0x07
    b43c:	98 87       	std	Y+8, r25	; 0x08
    b43e:	20 91 d8 0d 	lds	r18, 0x0DD8
    b442:	22 0f       	add	r18, r18
    b444:	22 0f       	add	r18, r18
    b446:	22 0f       	add	r18, r18
    b448:	40 91 d7 0d 	lds	r20, 0x0DD7
    b44c:	44 0f       	add	r20, r20
    b44e:	44 0f       	add	r20, r20
    b450:	44 0f       	add	r20, r20
    b452:	60 91 cc 0d 	lds	r22, 0x0DCC
    b456:	70 91 cd 0d 	lds	r23, 0x0DCD
    b45a:	80 91 ce 0d 	lds	r24, 0x0DCE
    b45e:	90 91 cf 0d 	lds	r25, 0x0DCF
    b462:	29 87       	std	Y+9, r18	; 0x09
    b464:	4a 87       	std	Y+10, r20	; 0x0a
    b466:	0e 94 38 68 	call	0xd070	; 0xd070 <__fixunssfsi>
    b46a:	2b 01       	movw	r4, r22
    b46c:	3c 01       	movw	r6, r24
    b46e:	60 91 c8 0d 	lds	r22, 0x0DC8
    b472:	70 91 c9 0d 	lds	r23, 0x0DC9
    b476:	80 91 ca 0d 	lds	r24, 0x0DCA
    b47a:	90 91 cb 0d 	lds	r25, 0x0DCB
    b47e:	0e 94 38 68 	call	0xd070	; 0xd070 <__fixunssfsi>
    b482:	dc 01       	movw	r26, r24
    b484:	cb 01       	movw	r24, r22
    b486:	28 e0       	ldi	r18, 0x08	; 8
    b488:	a2 2e       	mov	r10, r18
    b48a:	38 e0       	ldi	r19, 0x08	; 8
    b48c:	c3 2e       	mov	r12, r19
    b48e:	e9 80       	ldd	r14, Y+1	; 0x01
    b490:	fa 80       	ldd	r15, Y+2	; 0x02
    b492:	0d 81       	ldd	r16, Y+5	; 0x05
    b494:	1e 81       	ldd	r17, Y+6	; 0x06
    b496:	29 85       	ldd	r18, Y+9	; 0x09
    b498:	4a 85       	ldd	r20, Y+10	; 0x0a
    b49a:	b2 01       	movw	r22, r4
    b49c:	0e 94 79 4a 	call	0x94f2	; 0x94f2 <LBCollides>
    b4a0:	88 23       	and	r24, r24
    b4a2:	79 f0       	breq	.+30     	; 0xb4c2 <animate_enemies+0x1a6>
							game.enemies[i].shared.x, game.enemies[i].shared.y, 8, 8
						) && !(game.player.flags & EXPLODING)
    b4a4:	80 91 d4 0d 	lds	r24, 0x0DD4
    b4a8:	84 fd       	sbrc	r24, 4
    b4aa:	0b c0       	rjmp	.+22     	; 0xb4c2 <animate_enemies+0x1a6>
			)
			{
				SFX_PLAYER_EXPLODE;
    b4ac:	41 e0       	ldi	r20, 0x01	; 1
    b4ae:	6f ef       	ldi	r22, 0xFF	; 255
    b4b0:	85 e0       	ldi	r24, 0x05	; 5
    b4b2:	0e 94 a4 3d 	call	0x7b48	; 0x7b48 <TriggerFx>
				game.player.shield = 0;
    b4b6:	10 92 d9 0d 	sts	0x0DD9, r1
				game.player.flags = EXPLODING;
    b4ba:	80 e1       	ldi	r24, 0x10	; 16
    b4bc:	80 93 d4 0d 	sts	0x0DD4, r24
				return;
    b4c0:	57 c0       	rjmp	.+174    	; 0xb570 <animate_enemies+0x254>
			}
			else
			{
				animate_sprite(&game.enemies[i].shared, slot, game.enemies[i].width, game.enemies[i].height);
    b4c2:	eb 85       	ldd	r30, Y+11	; 0x0b
    b4c4:	fc 85       	ldd	r31, Y+12	; 0x0c
    b4c6:	20 81       	ld	r18, Z
    b4c8:	f1 01       	movw	r30, r2
    b4ca:	40 81       	ld	r20, Z
    b4cc:	6b 2d       	mov	r22, r11
    b4ce:	c4 01       	movw	r24, r8
    b4d0:	0e 94 59 57 	call	0xaeb2	; 0xaeb2 <animate_sprite>
    b4d4:	33 c0       	rjmp	.+102    	; 0xb53c <animate_enemies+0x220>
			}
		}
		else if (game.enemies[i].flags & EXPLODING)
    b4d6:	80 81       	ld	r24, Z
    b4d8:	84 ff       	sbrs	r24, 4
    b4da:	30 c0       	rjmp	.+96     	; 0xb53c <animate_enemies+0x220>
		{
			LBMoveSprite(slot, game.enemies[i].shared.x - game.camera_x, game.enemies[i].shared.y - game.camera_y, game.enemies[i].width, game.enemies[i].height);
    b4dc:	60 91 ac 0d 	lds	r22, 0x0DAC
    b4e0:	70 91 ad 0d 	lds	r23, 0x0DAD
    b4e4:	80 e0       	ldi	r24, 0x00	; 0
    b4e6:	90 e0       	ldi	r25, 0x00	; 0
    b4e8:	0e 94 64 68 	call	0xd0c8	; 0xd0c8 <__floatunsisf>
    b4ec:	9b 01       	movw	r18, r22
    b4ee:	ac 01       	movw	r20, r24
    b4f0:	f4 01       	movw	r30, r8
    b4f2:	60 85       	ldd	r22, Z+8	; 0x08
    b4f4:	71 85       	ldd	r23, Z+9	; 0x09
    b4f6:	82 85       	ldd	r24, Z+10	; 0x0a
    b4f8:	93 85       	ldd	r25, Z+11	; 0x0b
    b4fa:	0e 94 cf 67 	call	0xcf9e	; 0xcf9e <__subsf3>
    b4fe:	0e 94 38 68 	call	0xd070	; 0xd070 <__fixunssfsi>
    b502:	16 2f       	mov	r17, r22
    b504:	60 91 aa 0d 	lds	r22, 0x0DAA
    b508:	70 91 ab 0d 	lds	r23, 0x0DAB
    b50c:	80 e0       	ldi	r24, 0x00	; 0
    b50e:	90 e0       	ldi	r25, 0x00	; 0
    b510:	0e 94 64 68 	call	0xd0c8	; 0xd0c8 <__floatunsisf>
    b514:	9b 01       	movw	r18, r22
    b516:	ac 01       	movw	r20, r24
    b518:	f4 01       	movw	r30, r8
    b51a:	64 81       	ldd	r22, Z+4	; 0x04
    b51c:	75 81       	ldd	r23, Z+5	; 0x05
    b51e:	86 81       	ldd	r24, Z+6	; 0x06
    b520:	97 81       	ldd	r25, Z+7	; 0x07
    b522:	0e 94 cf 67 	call	0xcf9e	; 0xcf9e <__subsf3>
    b526:	0e 94 38 68 	call	0xd070	; 0xd070 <__fixunssfsi>
    b52a:	eb 85       	ldd	r30, Y+11	; 0x0b
    b52c:	fc 85       	ldd	r31, Y+12	; 0x0c
    b52e:	00 81       	ld	r16, Z
    b530:	f1 01       	movw	r30, r2
    b532:	20 81       	ld	r18, Z
    b534:	41 2f       	mov	r20, r17
    b536:	8b 2d       	mov	r24, r11
    b538:	0e 94 16 4b 	call	0x962c	; 0x962c <LBMoveSprite>
		}
		slot +=  game.enemies[i].width * game.enemies[i].height;
    b53c:	eb 85       	ldd	r30, Y+11	; 0x0b
    b53e:	fc 85       	ldd	r31, Y+12	; 0x0c
    b540:	90 81       	ld	r25, Z
    b542:	f1 01       	movw	r30, r2
    b544:	80 81       	ld	r24, Z
    b546:	98 9f       	mul	r25, r24
    b548:	b0 0c       	add	r11, r0
    b54a:	11 24       	eor	r1, r1
    b54c:	f2 e4       	ldi	r31, 0x42	; 66
    b54e:	2f 0e       	add	r2, r31
    b550:	31 1c       	adc	r3, r1
    b552:	8b 85       	ldd	r24, Y+11	; 0x0b
    b554:	9c 85       	ldd	r25, Y+12	; 0x0c
    b556:	8e 5b       	subi	r24, 0xBE	; 190
    b558:	9f 4f       	sbci	r25, 0xFF	; 255
    b55a:	9c 87       	std	Y+12, r25	; 0x0c
    b55c:	8b 87       	std	Y+11, r24	; 0x0b
    b55e:	92 e4       	ldi	r25, 0x42	; 66
    b560:	89 0e       	add	r8, r25
    b562:	91 1c       	adc	r9, r1

void animate_enemies()
{
	u8 slot = ENEMY_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    b564:	eb 85       	ldd	r30, Y+11	; 0x0b
    b566:	fc 85       	ldd	r31, Y+12	; 0x0c
    b568:	ed 5a       	subi	r30, 0xAD	; 173
    b56a:	ff 40       	sbci	r31, 0x0F	; 15
    b56c:	09 f0       	breq	.+2      	; 0xb570 <animate_enemies+0x254>
    b56e:	fe ce       	rjmp	.-516    	; 0xb36c <animate_enemies+0x50>
		{
			LBMoveSprite(slot, game.enemies[i].shared.x - game.camera_x, game.enemies[i].shared.y - game.camera_y, game.enemies[i].width, game.enemies[i].height);
		}
		slot +=  game.enemies[i].width * game.enemies[i].height;
	}
}
    b570:	2c 96       	adiw	r28, 0x0c	; 12
    b572:	0f b6       	in	r0, 0x3f	; 63
    b574:	f8 94       	cli
    b576:	de bf       	out	0x3e, r29	; 62
    b578:	0f be       	out	0x3f, r0	; 63
    b57a:	cd bf       	out	0x3d, r28	; 61
    b57c:	df 91       	pop	r29
    b57e:	cf 91       	pop	r28
    b580:	1f 91       	pop	r17
    b582:	0f 91       	pop	r16
    b584:	ff 90       	pop	r15
    b586:	ef 90       	pop	r14
    b588:	df 90       	pop	r13
    b58a:	cf 90       	pop	r12
    b58c:	bf 90       	pop	r11
    b58e:	af 90       	pop	r10
    b590:	9f 90       	pop	r9
    b592:	8f 90       	pop	r8
    b594:	7f 90       	pop	r7
    b596:	6f 90       	pop	r6
    b598:	5f 90       	pop	r5
    b59a:	4f 90       	pop	r4
    b59c:	3f 90       	pop	r3
    b59e:	2f 90       	pop	r2
    b5a0:	08 95       	ret

0000b5a2 <animate_enemy_shots>:

void animate_enemy_shots()
{
    b5a2:	2f 92       	push	r2
    b5a4:	3f 92       	push	r3
    b5a6:	4f 92       	push	r4
    b5a8:	5f 92       	push	r5
    b5aa:	6f 92       	push	r6
    b5ac:	7f 92       	push	r7
    b5ae:	8f 92       	push	r8
    b5b0:	9f 92       	push	r9
    b5b2:	af 92       	push	r10
    b5b4:	bf 92       	push	r11
    b5b6:	cf 92       	push	r12
    b5b8:	df 92       	push	r13
    b5ba:	ef 92       	push	r14
    b5bc:	ff 92       	push	r15
    b5be:	0f 93       	push	r16
    b5c0:	1f 93       	push	r17
    b5c2:	cf 93       	push	r28
    b5c4:	df 93       	push	r29
    b5c6:	cd b7       	in	r28, 0x3d	; 61
    b5c8:	de b7       	in	r29, 0x3e	; 62
    b5ca:	62 97       	sbiw	r28, 0x12	; 18
    b5cc:	0f b6       	in	r0, 0x3f	; 63
    b5ce:	f8 94       	cli
    b5d0:	de bf       	out	0x3e, r29	; 62
    b5d2:	0f be       	out	0x3f, r0	; 63
    b5d4:	cd bf       	out	0x3d, r28	; 61
    b5d6:	49 e7       	ldi	r20, 0x79	; 121
    b5d8:	24 2e       	mov	r2, r20
    b5da:	4e e0       	ldi	r20, 0x0E	; 14
    b5dc:	34 2e       	mov	r3, r20
    b5de:	58 e6       	ldi	r21, 0x68	; 104
    b5e0:	85 2e       	mov	r8, r21
    b5e2:	5e e0       	ldi	r21, 0x0E	; 14
    b5e4:	95 2e       	mov	r9, r21
	u8 slot = ENEMY_SHOT_SLOT;
    b5e6:	6e e0       	ldi	r22, 0x0E	; 14
    b5e8:	b6 2e       	mov	r11, r22
    b5ea:	f1 01       	movw	r30, r2
    b5ec:	32 97       	sbiw	r30, 0x02	; 2
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
		{
			if (game.enemies[i].shot[j].shot_type == BASIC_ENEMY_SHOT)
    b5ee:	80 81       	ld	r24, Z
    b5f0:	81 30       	cpi	r24, 0x01	; 1
    b5f2:	09 f0       	breq	.+2      	; 0xb5f6 <animate_enemy_shots+0x54>
    b5f4:	f0 c0       	rjmp	.+480    	; 0xb7d6 <animate_enemy_shots+0x234>
			{
				if (game.enemies[i].shot[j].active)
    b5f6:	d1 01       	movw	r26, r2
    b5f8:	8c 91       	ld	r24, X
    b5fa:	88 23       	and	r24, r24
    b5fc:	09 f4       	brne	.+2      	; 0xb600 <animate_enemy_shots+0x5e>
    b5fe:	eb c0       	rjmp	.+470    	; 0xb7d6 <animate_enemy_shots+0x234>
				{
					if (game.enemies[i].shot[j].shared.x < game.camera_x || game.enemies[i].shot[j].shared.x > game.camera_x + CAMERA_WIDTH*8 ||
    b600:	f4 01       	movw	r30, r8
    b602:	c4 80       	ldd	r12, Z+4	; 0x04
    b604:	d5 80       	ldd	r13, Z+5	; 0x05
    b606:	e6 80       	ldd	r14, Z+6	; 0x06
    b608:	f7 80       	ldd	r15, Z+7	; 0x07
    b60a:	60 90 aa 0d 	lds	r6, 0x0DAA
    b60e:	70 90 ab 0d 	lds	r7, 0x0DAB
    b612:	b3 01       	movw	r22, r6
    b614:	80 e0       	ldi	r24, 0x00	; 0
    b616:	90 e0       	ldi	r25, 0x00	; 0
    b618:	0e 94 64 68 	call	0xd0c8	; 0xd0c8 <__floatunsisf>
    b61c:	9b 01       	movw	r18, r22
    b61e:	ac 01       	movw	r20, r24
    b620:	c7 01       	movw	r24, r14
    b622:	b6 01       	movw	r22, r12
    b624:	0e 94 34 68 	call	0xd068	; 0xd068 <__cmpsf2>
    b628:	87 ff       	sbrs	r24, 7
    b62a:	03 c0       	rjmp	.+6      	; 0xb632 <animate_enemy_shots+0x90>
					   collision_detect_level(&game.enemies[i].shot[j].shared, 1, 1))
					{
						game.enemies[i].shot[j].active = 0;
    b62c:	d1 01       	movw	r26, r2
    b62e:	1c 92       	st	X, r1
    b630:	86 c0       	rjmp	.+268    	; 0xb73e <animate_enemy_shots+0x19c>
		{
			if (game.enemies[i].shot[j].shot_type == BASIC_ENEMY_SHOT)
			{
				if (game.enemies[i].shot[j].active)
				{
					if (game.enemies[i].shot[j].shared.x < game.camera_x || game.enemies[i].shot[j].shared.x > game.camera_x + CAMERA_WIDTH*8 ||
    b632:	b3 01       	movw	r22, r6
    b634:	60 52       	subi	r22, 0x20	; 32
    b636:	7f 4f       	sbci	r23, 0xFF	; 255
    b638:	80 e0       	ldi	r24, 0x00	; 0
    b63a:	90 e0       	ldi	r25, 0x00	; 0
    b63c:	0e 94 64 68 	call	0xd0c8	; 0xd0c8 <__floatunsisf>
    b640:	9b 01       	movw	r18, r22
    b642:	ac 01       	movw	r20, r24
    b644:	c7 01       	movw	r24, r14
    b646:	b6 01       	movw	r22, r12
    b648:	0e 94 16 69 	call	0xd22c	; 0xd22c <__gesf2>
    b64c:	18 16       	cp	r1, r24
    b64e:	74 f3       	brlt	.-36     	; 0xb62c <animate_enemy_shots+0x8a>
					   collision_detect_level(&game.enemies[i].shot[j].shared, 1, 1))
    b650:	41 e0       	ldi	r20, 0x01	; 1
    b652:	61 e0       	ldi	r22, 0x01	; 1
    b654:	c4 01       	movw	r24, r8
    b656:	0e 94 3a 52 	call	0xa474	; 0xa474 <collision_detect_level>
		{
			if (game.enemies[i].shot[j].shot_type == BASIC_ENEMY_SHOT)
			{
				if (game.enemies[i].shot[j].active)
				{
					if (game.enemies[i].shot[j].shared.x < game.camera_x || game.enemies[i].shot[j].shared.x > game.camera_x + CAMERA_WIDTH*8 ||
    b65a:	81 11       	cpse	r24, r1
    b65c:	e7 cf       	rjmp	.-50     	; 0xb62c <animate_enemy_shots+0x8a>
					{
						game.enemies[i].shot[j].active = 0;
						LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
					}
					else if (LBCollides(game.player.shared.x,game.player.shared.y, game.player.width*8, game.player.height*8,
							game.enemies[i].shot[j].shared.x, game.enemies[i].shot[j].shared.y, 8, 8
    b65e:	f4 01       	movw	r30, r8
    b660:	40 84       	ldd	r4, Z+8	; 0x08
    b662:	51 84       	ldd	r5, Z+9	; 0x09
    b664:	62 84       	ldd	r6, Z+10	; 0x0a
    b666:	73 84       	ldd	r7, Z+11	; 0x0b
    b668:	84 81       	ldd	r24, Z+4	; 0x04
    b66a:	95 81       	ldd	r25, Z+5	; 0x05
    b66c:	a6 81       	ldd	r26, Z+6	; 0x06
    b66e:	b7 81       	ldd	r27, Z+7	; 0x07
    b670:	89 83       	std	Y+1, r24	; 0x01
    b672:	9a 83       	std	Y+2, r25	; 0x02
    b674:	ab 83       	std	Y+3, r26	; 0x03
    b676:	bc 83       	std	Y+4, r27	; 0x04
					   collision_detect_level(&game.enemies[i].shot[j].shared, 1, 1))
					{
						game.enemies[i].shot[j].active = 0;
						LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
					}
					else if (LBCollides(game.player.shared.x,game.player.shared.y, game.player.width*8, game.player.height*8,
    b678:	c3 01       	movw	r24, r6
    b67a:	b2 01       	movw	r22, r4
    b67c:	0e 94 38 68 	call	0xd070	; 0xd070 <__fixunssfsi>
    b680:	6d 83       	std	Y+5, r22	; 0x05
    b682:	7e 83       	std	Y+6, r23	; 0x06
    b684:	8f 83       	std	Y+7, r24	; 0x07
    b686:	98 87       	std	Y+8, r25	; 0x08
    b688:	69 81       	ldd	r22, Y+1	; 0x01
    b68a:	7a 81       	ldd	r23, Y+2	; 0x02
    b68c:	8b 81       	ldd	r24, Y+3	; 0x03
    b68e:	9c 81       	ldd	r25, Y+4	; 0x04
    b690:	0e 94 38 68 	call	0xd070	; 0xd070 <__fixunssfsi>
    b694:	69 87       	std	Y+9, r22	; 0x09
    b696:	7a 87       	std	Y+10, r23	; 0x0a
    b698:	8b 87       	std	Y+11, r24	; 0x0b
    b69a:	9c 87       	std	Y+12, r25	; 0x0c
    b69c:	20 91 d8 0d 	lds	r18, 0x0DD8
    b6a0:	22 0f       	add	r18, r18
    b6a2:	22 0f       	add	r18, r18
    b6a4:	22 0f       	add	r18, r18
    b6a6:	40 91 d7 0d 	lds	r20, 0x0DD7
    b6aa:	44 0f       	add	r20, r20
    b6ac:	44 0f       	add	r20, r20
    b6ae:	44 0f       	add	r20, r20
    b6b0:	60 91 cc 0d 	lds	r22, 0x0DCC
    b6b4:	70 91 cd 0d 	lds	r23, 0x0DCD
    b6b8:	80 91 ce 0d 	lds	r24, 0x0DCE
    b6bc:	90 91 cf 0d 	lds	r25, 0x0DCF
    b6c0:	29 8b       	std	Y+17, r18	; 0x11
    b6c2:	4a 8b       	std	Y+18, r20	; 0x12
    b6c4:	0e 94 38 68 	call	0xd070	; 0xd070 <__fixunssfsi>
    b6c8:	6d 87       	std	Y+13, r22	; 0x0d
    b6ca:	7e 87       	std	Y+14, r23	; 0x0e
    b6cc:	8f 87       	std	Y+15, r24	; 0x0f
    b6ce:	98 8b       	std	Y+16, r25	; 0x10
    b6d0:	60 91 c8 0d 	lds	r22, 0x0DC8
    b6d4:	70 91 c9 0d 	lds	r23, 0x0DC9
    b6d8:	80 91 ca 0d 	lds	r24, 0x0DCA
    b6dc:	90 91 cb 0d 	lds	r25, 0x0DCB
    b6e0:	0e 94 38 68 	call	0xd070	; 0xd070 <__fixunssfsi>
    b6e4:	dc 01       	movw	r26, r24
    b6e6:	cb 01       	movw	r24, r22
    b6e8:	28 e0       	ldi	r18, 0x08	; 8
    b6ea:	a2 2e       	mov	r10, r18
    b6ec:	38 e0       	ldi	r19, 0x08	; 8
    b6ee:	c3 2e       	mov	r12, r19
    b6f0:	ed 80       	ldd	r14, Y+5	; 0x05
    b6f2:	fe 80       	ldd	r15, Y+6	; 0x06
    b6f4:	09 85       	ldd	r16, Y+9	; 0x09
    b6f6:	1a 85       	ldd	r17, Y+10	; 0x0a
    b6f8:	29 89       	ldd	r18, Y+17	; 0x11
    b6fa:	4a 89       	ldd	r20, Y+18	; 0x12
    b6fc:	6d 85       	ldd	r22, Y+13	; 0x0d
    b6fe:	7e 85       	ldd	r23, Y+14	; 0x0e
    b700:	0e 94 79 4a 	call	0x94f2	; 0x94f2 <LBCollides>
    b704:	88 23       	and	r24, r24
    b706:	01 f1       	breq	.+64     	; 0xb748 <animate_enemy_shots+0x1a6>
							game.enemies[i].shot[j].shared.x, game.enemies[i].shot[j].shared.y, 8, 8
						)
					)
					{
						SFX_HIT;
    b708:	41 e0       	ldi	r20, 0x01	; 1
    b70a:	6f ef       	ldi	r22, 0xFF	; 255
    b70c:	84 e0       	ldi	r24, 0x04	; 4
    b70e:	0e 94 a4 3d 	call	0x7b48	; 0x7b48 <TriggerFx>
						game.player.shield -= game.enemies[i].shot[j].hit_count;
    b712:	80 91 d9 0d 	lds	r24, 0x0DD9
    b716:	f1 01       	movw	r30, r2
    b718:	31 97       	sbiw	r30, 0x01	; 1
    b71a:	90 81       	ld	r25, Z
    b71c:	89 1b       	sub	r24, r25
    b71e:	80 93 d9 0d 	sts	0x0DD9, r24
						if (game.player.shield <= 0)
    b722:	18 16       	cp	r1, r24
    b724:	54 f0       	brlt	.+20     	; 0xb73a <animate_enemy_shots+0x198>
						{
							SFX_PLAYER_EXPLODE;
    b726:	41 e0       	ldi	r20, 0x01	; 1
    b728:	6f ef       	ldi	r22, 0xFF	; 255
    b72a:	85 e0       	ldi	r24, 0x05	; 5
    b72c:	0e 94 a4 3d 	call	0x7b48	; 0x7b48 <TriggerFx>
							game.player.shield = 0;
    b730:	10 92 d9 0d 	sts	0x0DD9, r1
							game.player.flags = EXPLODING;
    b734:	b0 e1       	ldi	r27, 0x10	; 16
    b736:	b0 93 d4 0d 	sts	0x0DD4, r27
						}
						game.enemies[i].shot[j].active = 0;
    b73a:	f1 01       	movw	r30, r2
    b73c:	10 82       	st	Z, r1
						LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
    b73e:	01 e0       	ldi	r16, 0x01	; 1
    b740:	21 e0       	ldi	r18, 0x01	; 1
    b742:	40 e0       	ldi	r20, 0x00	; 0
    b744:	60 ee       	ldi	r22, 0xE0	; 224
    b746:	44 c0       	rjmp	.+136    	; 0xb7d0 <animate_enemy_shots+0x22e>
					}
					else
					{
						game.enemies[i].shot[j].shared.x += game.enemies[i].shot[j].shared.vx*FRAME_TIME;
    b748:	d4 01       	movw	r26, r8
    b74a:	1c 96       	adiw	r26, 0x0c	; 12
    b74c:	6d 91       	ld	r22, X+
    b74e:	7c 91       	ld	r23, X
    b750:	1d 97       	sbiw	r26, 0x0d	; 13
    b752:	88 27       	eor	r24, r24
    b754:	77 fd       	sbrc	r23, 7
    b756:	80 95       	com	r24
    b758:	98 2f       	mov	r25, r24
    b75a:	0e 94 66 68 	call	0xd0cc	; 0xd0cc <__floatsisf>
    b75e:	29 e8       	ldi	r18, 0x89	; 137
    b760:	38 e8       	ldi	r19, 0x88	; 136
    b762:	48 e8       	ldi	r20, 0x88	; 136
    b764:	5c e3       	ldi	r21, 0x3C	; 60
    b766:	0e 94 1a 69 	call	0xd234	; 0xd234 <__mulsf3>
    b76a:	9b 01       	movw	r18, r22
    b76c:	ac 01       	movw	r20, r24
    b76e:	69 81       	ldd	r22, Y+1	; 0x01
    b770:	7a 81       	ldd	r23, Y+2	; 0x02
    b772:	8b 81       	ldd	r24, Y+3	; 0x03
    b774:	9c 81       	ldd	r25, Y+4	; 0x04
    b776:	0e 94 d0 67 	call	0xcfa0	; 0xcfa0 <__addsf3>
    b77a:	6b 01       	movw	r12, r22
    b77c:	7c 01       	movw	r14, r24
    b77e:	f4 01       	movw	r30, r8
    b780:	64 83       	std	Z+4, r22	; 0x04
    b782:	75 83       	std	Z+5, r23	; 0x05
    b784:	86 83       	std	Z+6, r24	; 0x06
    b786:	97 83       	std	Z+7, r25	; 0x07
						LBMoveSprite(slot, game.enemies[i].shot[j].shared.x - game.camera_x, game.enemies[i].shot[j].shared.y - game.camera_y, 1, 1);
    b788:	60 91 ac 0d 	lds	r22, 0x0DAC
    b78c:	70 91 ad 0d 	lds	r23, 0x0DAD
    b790:	80 e0       	ldi	r24, 0x00	; 0
    b792:	90 e0       	ldi	r25, 0x00	; 0
    b794:	0e 94 64 68 	call	0xd0c8	; 0xd0c8 <__floatunsisf>
    b798:	9b 01       	movw	r18, r22
    b79a:	ac 01       	movw	r20, r24
    b79c:	c3 01       	movw	r24, r6
    b79e:	b2 01       	movw	r22, r4
    b7a0:	0e 94 cf 67 	call	0xcf9e	; 0xcf9e <__subsf3>
    b7a4:	0e 94 38 68 	call	0xd070	; 0xd070 <__fixunssfsi>
    b7a8:	76 2e       	mov	r7, r22
    b7aa:	60 91 aa 0d 	lds	r22, 0x0DAA
    b7ae:	70 91 ab 0d 	lds	r23, 0x0DAB
    b7b2:	80 e0       	ldi	r24, 0x00	; 0
    b7b4:	90 e0       	ldi	r25, 0x00	; 0
    b7b6:	0e 94 64 68 	call	0xd0c8	; 0xd0c8 <__floatunsisf>
    b7ba:	9b 01       	movw	r18, r22
    b7bc:	ac 01       	movw	r20, r24
    b7be:	c7 01       	movw	r24, r14
    b7c0:	b6 01       	movw	r22, r12
    b7c2:	0e 94 cf 67 	call	0xcf9e	; 0xcf9e <__subsf3>
    b7c6:	0e 94 38 68 	call	0xd070	; 0xd070 <__fixunssfsi>
    b7ca:	01 e0       	ldi	r16, 0x01	; 1
    b7cc:	21 e0       	ldi	r18, 0x01	; 1
    b7ce:	47 2d       	mov	r20, r7
    b7d0:	8b 2d       	mov	r24, r11
    b7d2:	0e 94 16 4b 	call	0x962c	; 0x962c <LBMoveSprite>
					}
				}
			}
			slot += 1;
    b7d6:	b3 94       	inc	r11
    b7d8:	f2 e4       	ldi	r31, 0x42	; 66
    b7da:	2f 0e       	add	r2, r31
    b7dc:	31 1c       	adc	r3, r1
    b7de:	82 e4       	ldi	r24, 0x42	; 66
    b7e0:	88 0e       	add	r8, r24
    b7e2:	91 1c       	adc	r9, r1

void animate_enemy_shots()
{
	u8 slot = ENEMY_SHOT_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    b7e4:	93 e1       	ldi	r25, 0x13	; 19
    b7e6:	b9 12       	cpse	r11, r25
    b7e8:	00 cf       	rjmp	.-512    	; 0xb5ea <animate_enemy_shots+0x48>
				}
			}
			slot += 1;
		}
	}
}
    b7ea:	62 96       	adiw	r28, 0x12	; 18
    b7ec:	0f b6       	in	r0, 0x3f	; 63
    b7ee:	f8 94       	cli
    b7f0:	de bf       	out	0x3e, r29	; 62
    b7f2:	0f be       	out	0x3f, r0	; 63
    b7f4:	cd bf       	out	0x3d, r28	; 61
    b7f6:	df 91       	pop	r29
    b7f8:	cf 91       	pop	r28
    b7fa:	1f 91       	pop	r17
    b7fc:	0f 91       	pop	r16
    b7fe:	ff 90       	pop	r15
    b800:	ef 90       	pop	r14
    b802:	df 90       	pop	r13
    b804:	cf 90       	pop	r12
    b806:	bf 90       	pop	r11
    b808:	af 90       	pop	r10
    b80a:	9f 90       	pop	r9
    b80c:	8f 90       	pop	r8
    b80e:	7f 90       	pop	r7
    b810:	6f 90       	pop	r6
    b812:	5f 90       	pop	r5
    b814:	4f 90       	pop	r4
    b816:	3f 90       	pop	r3
    b818:	2f 90       	pop	r2
    b81a:	08 95       	ret

0000b81c <clear_sprites>:
	}
	
}

void clear_sprites(u8 from, u8 count)
{
    b81c:	ef 92       	push	r14
    b81e:	ff 92       	push	r15
    b820:	0f 93       	push	r16
    b822:	cf 93       	push	r28
	for(u8 i = from; i < from+count; i++)
    b824:	c8 2f       	mov	r28, r24
    b826:	e6 2e       	mov	r14, r22
    b828:	f1 2c       	mov	r15, r1
    b82a:	e8 0e       	add	r14, r24
    b82c:	f1 1c       	adc	r15, r1
    b82e:	8c 2f       	mov	r24, r28
    b830:	90 e0       	ldi	r25, 0x00	; 0
    b832:	8e 15       	cp	r24, r14
    b834:	9f 05       	cpc	r25, r15
    b836:	7c f4       	brge	.+30     	; 0xb856 <clear_sprites+0x3a>
	{
		LBMapSprite(i, map_none, 0);
    b838:	40 e0       	ldi	r20, 0x00	; 0
    b83a:	63 ee       	ldi	r22, 0xE3	; 227
    b83c:	7d e2       	ldi	r23, 0x2D	; 45
    b83e:	8c 2f       	mov	r24, r28
    b840:	0e 94 c4 4a 	call	0x9588	; 0x9588 <LBMapSprite>
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
    b844:	01 e0       	ldi	r16, 0x01	; 1
    b846:	21 e0       	ldi	r18, 0x01	; 1
    b848:	40 e0       	ldi	r20, 0x00	; 0
    b84a:	60 ee       	ldi	r22, 0xE0	; 224
    b84c:	8c 2f       	mov	r24, r28
    b84e:	0e 94 16 4b 	call	0x962c	; 0x962c <LBMoveSprite>
	
}

void clear_sprites(u8 from, u8 count)
{
	for(u8 i = from; i < from+count; i++)
    b852:	cf 5f       	subi	r28, 0xFF	; 255
    b854:	ec cf       	rjmp	.-40     	; 0xb82e <clear_sprites+0x12>
	{
		LBMapSprite(i, map_none, 0);
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
	}
}
    b856:	cf 91       	pop	r28
    b858:	0f 91       	pop	r16
    b85a:	ff 90       	pop	r15
    b85c:	ef 90       	pop	r14
    b85e:	08 95       	ret

0000b860 <fade_through>:
	EepromWriteBlock(block);
}

void fade_through()
{
	FadeOut(FRAMES_PER_FADE, true);
    b860:	61 e0       	ldi	r22, 0x01	; 1
    b862:	81 e0       	ldi	r24, 0x01	; 1
    b864:	0e 94 2d 49 	call	0x925a	; 0x925a <FadeOut>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    b868:	64 e1       	ldi	r22, 0x14	; 20
    b86a:	80 e0       	ldi	r24, 0x00	; 0
    b86c:	0e 94 0e 5c 	call	0xb81c	; 0xb81c <clear_sprites>
	LBRotateSprites();
    b870:	0e 94 54 4b 	call	0x96a8	; 0x96a8 <LBRotateSprites>
	ClearVram();
    b874:	0e 94 c5 39 	call	0x738a	; 0x738a <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    b878:	60 e0       	ldi	r22, 0x00	; 0
    b87a:	81 e0       	ldi	r24, 0x01	; 1
    b87c:	0c 94 21 49 	jmp	0x9242	; 0x9242 <FadeIn>

0000b880 <load_level>:
		game.level_height = 26;
	}
}

void load_level(u8 index, u8 drop_ship)
{	
    b880:	0f 93       	push	r16
    b882:	cf 93       	push	r28
    b884:	df 93       	push	r29
    b886:	c8 2f       	mov	r28, r24
    b888:	d6 2f       	mov	r29, r22
	u8 ship_x = (get_hero_spawn_x(index) - 2) * 8;
	u8 ship_y = 0;
	char ship_increment = 3;
	
	Screen.scrollX = 0;
    b88a:	10 92 b2 0c 	sts	0x0CB2, r1
	Screen.scrollY = 0;
    b88e:	10 92 b3 0c 	sts	0x0CB3, r1
	Screen.scrollHeight = 30;
    b892:	8e e1       	ldi	r24, 0x1E	; 30
    b894:	80 93 b4 0c 	sts	0x0CB4, r24
	Screen.overlayTileTable = tiles_data;
    b898:	86 e6       	ldi	r24, 0x66	; 102
    b89a:	9f e4       	ldi	r25, 0x4F	; 79
    b89c:	90 93 b1 0c 	sts	0x0CB1, r25
    b8a0:	80 93 b0 0c 	sts	0x0CB0, r24
	Screen.overlayHeight = 2;
    b8a4:	82 e0       	ldi	r24, 0x02	; 2
    b8a6:	80 93 af 0c 	sts	0x0CAF, r24
	clear_overlay(2);
    b8aa:	0e 94 d1 4d 	call	0x9ba2	; 0x9ba2 <clear_overlay>
	game.current_level_index = index;
    b8ae:	c0 93 b7 0d 	sts	0x0DB7, r28
	game.level_ended = 0;
    b8b2:	10 92 c3 0d 	sts	0x0DC3, r1
	game.joypadState.held = 0;
    b8b6:	10 92 9f 0f 	sts	0x0F9F, r1
    b8ba:	10 92 9e 0f 	sts	0x0F9E, r1
	game.joypadState.pressed = 0;
    b8be:	10 92 9b 0f 	sts	0x0F9B, r1
    b8c2:	10 92 9a 0f 	sts	0x0F9A, r1
	game.joypadState.released = 0;
    b8c6:	10 92 9d 0f 	sts	0x0F9D, r1
    b8ca:	10 92 9c 0f 	sts	0x0F9C, r1
	switch (index)
    b8ce:	8c 2f       	mov	r24, r28
    b8d0:	90 e0       	ldi	r25, 0x00	; 0
    b8d2:	8a 30       	cpi	r24, 0x0A	; 10
    b8d4:	91 05       	cpc	r25, r1
    b8d6:	c0 f4       	brcc	.+48     	; 0xb908 <load_level+0x88>
    b8d8:	fc 01       	movw	r30, r24
    b8da:	e8 5c       	subi	r30, 0xC8	; 200
    b8dc:	ff 4f       	sbci	r31, 0xFF	; 255
    b8de:	0c 94 c9 67 	jmp	0xcf92	; 0xcf92 <__tablejump2__>
	{
		case 0: map_level_info((char*) map_level_ice); break;
    b8e2:	86 ee       	ldi	r24, 0xE6	; 230
    b8e4:	98 e4       	ldi	r25, 0x48	; 72
    b8e6:	0e c0       	rjmp	.+28     	; 0xb904 <load_level+0x84>
		case 1: map_level_info((char*) map_level_space); break;
		case 2: map_level_info((char*) map_level_fire); break;
    b8e8:	86 e6       	ldi	r24, 0x66	; 102
    b8ea:	92 e4       	ldi	r25, 0x42	; 66
    b8ec:	0b c0       	rjmp	.+22     	; 0xb904 <load_level+0x84>
		case 3: map_level_info((char*) map_level_space); break;
		case 4: map_level_info((char*) map_level_forest); break;
    b8ee:	86 ee       	ldi	r24, 0xE6	; 230
    b8f0:	9b e3       	ldi	r25, 0x3B	; 59
    b8f2:	08 c0       	rjmp	.+16     	; 0xb904 <load_level+0x84>
		case 5: map_level_info((char*) map_level_space); break;
		case 6: map_level_info((char*) map_level_city); break;
    b8f4:	86 e6       	ldi	r24, 0x66	; 102
    b8f6:	95 e3       	ldi	r25, 0x35	; 53
    b8f8:	05 c0       	rjmp	.+10     	; 0xb904 <load_level+0x84>
		case 7: map_level_info((char*) map_level_space); break;
		case 8: map_level_info((char*) map_level_desert); break;
    b8fa:	86 ee       	ldi	r24, 0xE6	; 230
    b8fc:	9e e2       	ldi	r25, 0x2E	; 46
    b8fe:	02 c0       	rjmp	.+4      	; 0xb904 <load_level+0x84>
		case 9: map_level_info((char*) map_level_space); break;
    b900:	86 ee       	ldi	r24, 0xE6	; 230
    b902:	9d e2       	ldi	r25, 0x2D	; 45
    b904:	0e 94 28 50 	call	0xa050	; 0xa050 <map_level_info>
	}
	game.column_count = 0;
    b908:	10 92 b3 0d 	sts	0x0DB3, r1
    b90c:	10 92 b2 0d 	sts	0x0DB2, r1
	game.camera_x = get_camera_x(index);
    b910:	10 92 ab 0d 	sts	0x0DAB, r1
    b914:	10 92 aa 0d 	sts	0x0DAA, r1
	game.camera_y = get_camera_y(index);
    b918:	10 92 ad 0d 	sts	0x0DAD, r1
    b91c:	10 92 ac 0d 	sts	0x0DAC, r1
	game.player.shared.x = get_hero_spawn_x(index)*8;
    b920:	80 e0       	ldi	r24, 0x00	; 0
    b922:	90 e0       	ldi	r25, 0x00	; 0
    b924:	a0 ec       	ldi	r26, 0xC0	; 192
    b926:	b1 e4       	ldi	r27, 0x41	; 65
    b928:	80 93 c8 0d 	sts	0x0DC8, r24
    b92c:	90 93 c9 0d 	sts	0x0DC9, r25
    b930:	a0 93 ca 0d 	sts	0x0DCA, r26
    b934:	b0 93 cb 0d 	sts	0x0DCB, r27
	game.player.shared.y = get_hero_spawn_y(index)*8;
    b938:	80 e0       	ldi	r24, 0x00	; 0
    b93a:	90 e0       	ldi	r25, 0x00	; 0
    b93c:	a8 e2       	ldi	r26, 0x28	; 40
    b93e:	b3 e4       	ldi	r27, 0x43	; 67
    b940:	80 93 cc 0d 	sts	0x0DCC, r24
    b944:	90 93 cd 0d 	sts	0x0DCD, r25
    b948:	a0 93 ce 0d 	sts	0x0DCE, r26
    b94c:	b0 93 cf 0d 	sts	0x0DCF, r27
	game.camera_x *= 8;
	game.camera_y *= 8;
	game.scroll_src_x = game.camera_x / 8 + CAMERA_WIDTH + 1;
    b950:	8d e1       	ldi	r24, 0x1D	; 29
    b952:	90 e0       	ldi	r25, 0x00	; 0
    b954:	90 93 a7 0d 	sts	0x0DA7, r25
    b958:	80 93 a6 0d 	sts	0x0DA6, r24
    game.scroll_dest_x = game.camera_x / 8 + CAMERA_WIDTH + 1;
    b95c:	80 93 bf 0d 	sts	0x0DBF, r24
	game.scroll_src_y = game.camera_y / 8 + CAMERA_HEIGHT + 1;
    b960:	8b e1       	ldi	r24, 0x1B	; 27
    b962:	90 e0       	ldi	r25, 0x00	; 0
    b964:	90 93 a9 0d 	sts	0x0DA9, r25
    b968:	80 93 a8 0d 	sts	0x0DA8, r24
    game.scroll_dest_y =  game.camera_y / 8 + CAMERA_HEIGHT + 1;
    b96c:	80 93 c0 0d 	sts	0x0DC0, r24
	game.scroll_x = 0;
    b970:	10 92 bd 0d 	sts	0x0DBD, r1
	game.scroll_y = 0;
    b974:	10 92 be 0d 	sts	0x0DBE, r1
	game.spawn_rate = BASE_SPAWN_RATE;
    b978:	8a e0       	ldi	r24, 0x0A	; 10
    b97a:	80 93 c2 0d 	sts	0x0DC2, r24
	render_camera_view();
    b97e:	0e 94 32 4e 	call	0x9c64	; 0x9c64 <render_camera_view>
	LBPrint(0, VRAM_TILES_V-1, (char*) strLives);
    b982:	46 e5       	ldi	r20, 0x56	; 86
    b984:	5b e0       	ldi	r21, 0x0B	; 11
    b986:	6f e1       	ldi	r22, 0x1F	; 31
    b988:	80 e0       	ldi	r24, 0x00	; 0
    b98a:	0e 94 f3 49 	call	0x93e6	; 0x93e6 <LBPrint>
	LBPrint(17, VRAM_TILES_V-1, (char*) strScore);
    b98e:	45 e6       	ldi	r20, 0x65	; 101
    b990:	5b e0       	ldi	r21, 0x0B	; 11
    b992:	6f e1       	ldi	r22, 0x1F	; 31
    b994:	81 e1       	ldi	r24, 0x11	; 17
    b996:	0e 94 f3 49 	call	0x93e6	; 0x93e6 <LBPrint>
	LBPrint(0, VRAM_TILES_V-2, (char*) strShield);
    b99a:	4d e5       	ldi	r20, 0x5D	; 93
    b99c:	5b e0       	ldi	r21, 0x0B	; 11
    b99e:	6e e1       	ldi	r22, 0x1E	; 30
    b9a0:	80 e0       	ldi	r24, 0x00	; 0
    b9a2:	0e 94 f3 49 	call	0x93e6	; 0x93e6 <LBPrint>
	LBPrint(18, VRAM_TILES_V-2, (char*) strTime);
    b9a6:	40 e5       	ldi	r20, 0x50	; 80
    b9a8:	5b e0       	ldi	r21, 0x0B	; 11
    b9aa:	6e e1       	ldi	r22, 0x1E	; 30
    b9ac:	82 e1       	ldi	r24, 0x12	; 18
    b9ae:	0e 94 f3 49 	call	0x93e6	; 0x93e6 <LBPrint>
	LBPrintByte(9, VRAM_TILES_V-1, game.lives ,true);
    b9b2:	21 e0       	ldi	r18, 0x01	; 1
    b9b4:	40 91 b5 0d 	lds	r20, 0x0DB5
    b9b8:	6f e1       	ldi	r22, 0x1F	; 31
    b9ba:	89 e0       	ldi	r24, 0x09	; 9
    b9bc:	0e 94 0f 4a 	call	0x941e	; 0x941e <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-1, game.score ,true);
    b9c0:	40 91 ae 0d 	lds	r20, 0x0DAE
    b9c4:	50 91 af 0d 	lds	r21, 0x0DAF
    b9c8:	21 e0       	ldi	r18, 0x01	; 1
    b9ca:	6f e1       	ldi	r22, 0x1F	; 31
    b9cc:	8b e1       	ldi	r24, 0x1B	; 27
    b9ce:	0e 94 40 4a 	call	0x9480	; 0x9480 <LBPrintInt>
	LBPrintByte(9, VRAM_TILES_V-2, game.player.shield ,true);
    b9d2:	21 e0       	ldi	r18, 0x01	; 1
    b9d4:	40 91 d9 0d 	lds	r20, 0x0DD9
    b9d8:	6e e1       	ldi	r22, 0x1E	; 30
    b9da:	89 e0       	ldi	r24, 0x09	; 9
    b9dc:	0e 94 0f 4a 	call	0x941e	; 0x941e <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-2, game.time ,true);
    b9e0:	40 91 b0 0d 	lds	r20, 0x0DB0
    b9e4:	50 91 b1 0d 	lds	r21, 0x0DB1
    b9e8:	21 e0       	ldi	r18, 0x01	; 1
    b9ea:	6e e1       	ldi	r22, 0x1E	; 30
    b9ec:	8b e1       	ldi	r24, 0x1B	; 27
    b9ee:	0e 94 40 4a 	call	0x9480	; 0x9480 <LBPrintInt>
	
	
	if (!is_space() && drop_ship)
    b9f2:	0e 94 93 4b 	call	0x9726	; 0x9726 <is_space>
    b9f6:	81 11       	cpse	r24, r1
    b9f8:	39 c0       	rjmp	.+114    	; 0xba6c <load_level+0x1ec>
    b9fa:	dd 23       	and	r29, r29
    b9fc:	b9 f1       	breq	.+110    	; 0xba6c <load_level+0x1ec>
	{
		map_ship();
    b9fe:	0e 94 13 50 	call	0xa026	; 0xa026 <map_ship>

void load_level(u8 index, u8 drop_ship)
{	
	u8 ship_x = (get_hero_spawn_x(index) - 2) * 8;
	u8 ship_y = 0;
	char ship_increment = 3;
    ba02:	d3 e0       	ldi	r29, 0x03	; 3
}

void load_level(u8 index, u8 drop_ship)
{	
	u8 ship_x = (get_hero_spawn_x(index) - 2) * 8;
	u8 ship_y = 0;
    ba04:	c0 e0       	ldi	r28, 0x00	; 0
	if (!is_space() && drop_ship)
	{
		map_ship();
		while (1)
		{
			WaitVsync(1);
    ba06:	81 e0       	ldi	r24, 0x01	; 1
    ba08:	90 e0       	ldi	r25, 0x00	; 0
    ba0a:	0e 94 c5 48 	call	0x918a	; 0x918a <WaitVsync>
			if (ship_y >= get_hero_spawn_y(index)*8)
    ba0e:	8c 2f       	mov	r24, r28
    ba10:	90 e0       	ldi	r25, 0x00	; 0
    ba12:	88 3a       	cpi	r24, 0xA8	; 168
    ba14:	91 05       	cpc	r25, r1
    ba16:	74 f0       	brlt	.+28     	; 0xba34 <load_level+0x1b4>
			{
				LBMapSprite(0, map_hero_idle, 0);
    ba18:	40 e0       	ldi	r20, 0x00	; 0
    ba1a:	67 eb       	ldi	r22, 0xB7	; 183
    ba1c:	7d e2       	ldi	r23, 0x2D	; 45
    ba1e:	80 e0       	ldi	r24, 0x00	; 0
    ba20:	0e 94 c4 4a 	call	0x9588	; 0x9588 <LBMapSprite>
				LBMoveSprite(0, get_hero_spawn_x(index)*8, get_hero_spawn_y(index)*8, 2, 3);
    ba24:	03 e0       	ldi	r16, 0x03	; 3
    ba26:	22 e0       	ldi	r18, 0x02	; 2
    ba28:	48 ea       	ldi	r20, 0xA8	; 168
    ba2a:	68 e1       	ldi	r22, 0x18	; 24
    ba2c:	80 e0       	ldi	r24, 0x00	; 0
    ba2e:	0e 94 16 4b 	call	0x962c	; 0x962c <LBMoveSprite>
				ship_increment = -3;
    ba32:	dd ef       	ldi	r29, 0xFD	; 253
			}
			LBMapSprite(6, LBGetNextFrame(&game.player.run), 0);
    ba34:	80 e3       	ldi	r24, 0x30	; 48
    ba36:	9e e0       	ldi	r25, 0x0E	; 14
    ba38:	0e 94 62 49 	call	0x92c4	; 0x92c4 <LBGetNextFrame>
    ba3c:	40 e0       	ldi	r20, 0x00	; 0
    ba3e:	bc 01       	movw	r22, r24
    ba40:	86 e0       	ldi	r24, 0x06	; 6
    ba42:	0e 94 c4 4a 	call	0x9588	; 0x9588 <LBMapSprite>
			LBMoveSprite(6, ship_x, ship_y, 4, 2);
    ba46:	02 e0       	ldi	r16, 0x02	; 2
    ba48:	24 e0       	ldi	r18, 0x04	; 4
    ba4a:	4c 2f       	mov	r20, r28
    ba4c:	68 e0       	ldi	r22, 0x08	; 8
    ba4e:	86 e0       	ldi	r24, 0x06	; 6
    ba50:	0e 94 16 4b 	call	0x962c	; 0x962c <LBMoveSprite>
			ship_y += ship_increment;
    ba54:	cd 0f       	add	r28, r29
			if (ship_y == 0)
    ba56:	39 f4       	brne	.+14     	; 0xba66 <load_level+0x1e6>
			{
				clear_sprites(6, 8);
    ba58:	68 e0       	ldi	r22, 0x08	; 8
    ba5a:	86 e0       	ldi	r24, 0x06	; 6
				break;
			}
			LBRotateSprites();
		}
	}
}
    ba5c:	df 91       	pop	r29
    ba5e:	cf 91       	pop	r28
    ba60:	0f 91       	pop	r16
			LBMapSprite(6, LBGetNextFrame(&game.player.run), 0);
			LBMoveSprite(6, ship_x, ship_y, 4, 2);
			ship_y += ship_increment;
			if (ship_y == 0)
			{
				clear_sprites(6, 8);
    ba62:	0c 94 0e 5c 	jmp	0xb81c	; 0xb81c <clear_sprites>
				break;
			}
			LBRotateSprites();
    ba66:	0e 94 54 4b 	call	0x96a8	; 0x96a8 <LBRotateSprites>
		}
    ba6a:	cd cf       	rjmp	.-102    	; 0xba06 <load_level+0x186>
	}
}
    ba6c:	df 91       	pop	r29
    ba6e:	cf 91       	pop	r28
    ba70:	0f 91       	pop	r16
    ba72:	08 95       	ret

0000ba74 <select_pressed>:
	StopSong();
	load_high_scores();
}

char select_pressed(JoyPadState* p)
{
    ba74:	fc 01       	movw	r30, r24
    ba76:	20 81       	ld	r18, Z
    ba78:	31 81       	ldd	r19, Z+1	; 0x01
    ba7a:	28 70       	andi	r18, 0x08	; 8
    ba7c:	31 70       	andi	r19, 0x01	; 1
	return (p->pressed & BTN_A) || (p->pressed & BTN_START);
    ba7e:	81 e0       	ldi	r24, 0x01	; 1
    ba80:	23 2b       	or	r18, r19
    ba82:	09 f4       	brne	.+2      	; 0xba86 <select_pressed+0x12>
    ba84:	80 e0       	ldi	r24, 0x00	; 0
}
    ba86:	08 95       	ret

0000ba88 <stream_dialogue>:


void stream_dialogue(const char* dialogue, u8 y)
{
    ba88:	ff 92       	push	r15
    ba8a:	0f 93       	push	r16
    ba8c:	1f 93       	push	r17
    ba8e:	cf 93       	push	r28
    ba90:	df 93       	push	r29
    ba92:	ec 01       	movw	r28, r24
    ba94:	16 2f       	mov	r17, r22
	u8 x, ln, c;
	
	while (pgm_read_byte(dialogue) != '#')
	{
		ln = strnlen_P(dialogue, 255);
		x = 14 - ln / 2;
    ba96:	8e e0       	ldi	r24, 0x0E	; 14
    ba98:	f8 2e       	mov	r15, r24

void stream_dialogue(const char* dialogue, u8 y)
{
	u8 x, ln, c;
	
	while (pgm_read_byte(dialogue) != '#')
    ba9a:	fe 01       	movw	r30, r28
    ba9c:	84 91       	lpm	r24, Z
    ba9e:	83 32       	cpi	r24, 0x23	; 35
    baa0:	21 f1       	breq	.+72     	; 0xbaea <stream_dialogue+0x62>
	{
		ln = strnlen_P(dialogue, 255);
    baa2:	6f ef       	ldi	r22, 0xFF	; 255
    baa4:	70 e0       	ldi	r23, 0x00	; 0
    baa6:	ce 01       	movw	r24, r28
    baa8:	0e 94 7d 69 	call	0xd2fa	; 0xd2fa <strnlen_P>
		x = 14 - ln / 2;
    baac:	86 95       	lsr	r24
    baae:	0f 2d       	mov	r16, r15
    bab0:	08 1b       	sub	r16, r24
    bab2:	0c 1b       	sub	r16, r28
    bab4:	8c 2f       	mov	r24, r28
    bab6:	80 0f       	add	r24, r16
		while ((c = pgm_read_byte(dialogue++)))
    bab8:	21 96       	adiw	r28, 0x01	; 1
    baba:	fe 01       	movw	r30, r28
    babc:	31 97       	sbiw	r30, 0x01	; 1
    babe:	44 91       	lpm	r20, Z
    bac0:	44 23       	and	r20, r20
    bac2:	89 f0       	breq	.+34     	; 0xbae6 <stream_dialogue+0x5e>
		{
			LBPrintChar(x++, y, c);
    bac4:	61 2f       	mov	r22, r17
    bac6:	0e 94 d3 49 	call	0x93a6	; 0x93a6 <LBPrintChar>
			LBGetJoyPadState(&game.joypadState, 0);
    baca:	60 e0       	ldi	r22, 0x00	; 0
    bacc:	8a e9       	ldi	r24, 0x9A	; 154
    bace:	9f e0       	ldi	r25, 0x0F	; 15
    bad0:	0e 94 88 49 	call	0x9310	; 0x9310 <LBGetJoyPadState>
			if (!(game.joypadState.held & BTN_B)) WaitUs(CHARACTER_DELAY_US);
    bad4:	80 91 9e 0f 	lds	r24, 0x0F9E
    bad8:	80 fd       	sbrc	r24, 0
    bada:	ec cf       	rjmp	.-40     	; 0xbab4 <stream_dialogue+0x2c>
    badc:	80 e7       	ldi	r24, 0x70	; 112
    bade:	97 e1       	ldi	r25, 0x17	; 23
    bae0:	0e 94 fb 39 	call	0x73f6	; 0x73f6 <WaitUs>
    bae4:	e7 cf       	rjmp	.-50     	; 0xbab4 <stream_dialogue+0x2c>
		}
		y++;
    bae6:	1f 5f       	subi	r17, 0xFF	; 255
    bae8:	d8 cf       	rjmp	.-80     	; 0xba9a <stream_dialogue+0x12>
	}
}
    baea:	df 91       	pop	r29
    baec:	cf 91       	pop	r28
    baee:	1f 91       	pop	r17
    baf0:	0f 91       	pop	r16
    baf2:	ff 90       	pop	r15
    baf4:	08 95       	ret

0000baf6 <map_particles>:

void map_particles()
{
    baf6:	cf 93       	push	r28
	for (u8 i = 9; i < 20; i++)
    baf8:	c9 e0       	ldi	r28, 0x09	; 9
	{
		LBMapSprite(i, map_particle, 0);
    bafa:	40 e0       	ldi	r20, 0x00	; 0
    bafc:	67 ed       	ldi	r22, 0xD7	; 215
    bafe:	7d e2       	ldi	r23, 0x2D	; 45
    bb00:	8c 2f       	mov	r24, r28
    bb02:	0e 94 c4 4a 	call	0x9588	; 0x9588 <LBMapSprite>
	}
}

void map_particles()
{
	for (u8 i = 9; i < 20; i++)
    bb06:	cf 5f       	subi	r28, 0xFF	; 255
    bb08:	c4 31       	cpi	r28, 0x14	; 20
    bb0a:	b9 f7       	brne	.-18     	; 0xbafa <map_particles+0x4>
	{
		LBMapSprite(i, map_particle, 0);
	}
}
    bb0c:	cf 91       	pop	r28
    bb0e:	08 95       	ret

0000bb10 <place_particles>:

void place_particles()
{
    bb10:	0f 93       	push	r16
    bb12:	1f 93       	push	r17
    bb14:	cf 93       	push	r28
    bb16:	df 93       	push	r29
    bb18:	1f 92       	push	r1
    bb1a:	cd b7       	in	r28, 0x3d	; 61
    bb1c:	de b7       	in	r29, 0x3e	; 62
	for (u8 i = 9; i < 20; i++)
    bb1e:	19 e0       	ldi	r17, 0x09	; 9
	{
		LBMoveSprite(i, LBRandom(0, 224), LBRandom(0, 200), 1, 1);
    bb20:	68 ec       	ldi	r22, 0xC8	; 200
    bb22:	80 e0       	ldi	r24, 0x00	; 0
    bb24:	0e 94 9f 4a 	call	0x953e	; 0x953e <LBRandom>
    bb28:	48 2f       	mov	r20, r24
    bb2a:	60 ee       	ldi	r22, 0xE0	; 224
    bb2c:	80 e0       	ldi	r24, 0x00	; 0
    bb2e:	49 83       	std	Y+1, r20	; 0x01
    bb30:	0e 94 9f 4a 	call	0x953e	; 0x953e <LBRandom>
    bb34:	68 2f       	mov	r22, r24
    bb36:	01 e0       	ldi	r16, 0x01	; 1
    bb38:	21 e0       	ldi	r18, 0x01	; 1
    bb3a:	49 81       	ldd	r20, Y+1	; 0x01
    bb3c:	81 2f       	mov	r24, r17
    bb3e:	0e 94 16 4b 	call	0x962c	; 0x962c <LBMoveSprite>
	}
}

void place_particles()
{
	for (u8 i = 9; i < 20; i++)
    bb42:	1f 5f       	subi	r17, 0xFF	; 255
    bb44:	14 31       	cpi	r17, 0x14	; 20
    bb46:	61 f7       	brne	.-40     	; 0xbb20 <place_particles+0x10>
	{
		LBMoveSprite(i, LBRandom(0, 224), LBRandom(0, 200), 1, 1);
	}
}
    bb48:	0f 90       	pop	r0
    bb4a:	df 91       	pop	r29
    bb4c:	cf 91       	pop	r28
    bb4e:	1f 91       	pop	r17
    bb50:	0f 91       	pop	r16
    bb52:	08 95       	ret

0000bb54 <animate_particles>:

void animate_particles(char dy, u8 oy)
{
    bb54:	ef 92       	push	r14
    bb56:	ff 92       	push	r15
    bb58:	0f 93       	push	r16
    bb5a:	1f 93       	push	r17
    bb5c:	cf 93       	push	r28
    bb5e:	df 93       	push	r29
    bb60:	d8 2f       	mov	r29, r24
    bb62:	16 2f       	mov	r17, r22
    bb64:	80 ed       	ldi	r24, 0xD0	; 208
    bb66:	e8 2e       	mov	r14, r24
    bb68:	8f e0       	ldi	r24, 0x0F	; 15
    bb6a:	f8 2e       	mov	r15, r24
	for (u8 i = 9; i < 20; i++)
    bb6c:	c9 e0       	ldi	r28, 0x09	; 9
	{
		LBMoveSprite(i, extendedSprites[i].x, extendedSprites[i].y+dy, 1, 1);
    bb6e:	f7 01       	movw	r30, r14
    bb70:	40 81       	ld	r20, Z
    bb72:	4d 0f       	add	r20, r29
    bb74:	01 e0       	ldi	r16, 0x01	; 1
    bb76:	21 e0       	ldi	r18, 0x01	; 1
    bb78:	31 97       	sbiw	r30, 0x01	; 1
    bb7a:	60 81       	ld	r22, Z
    bb7c:	8c 2f       	mov	r24, r28
    bb7e:	0e 94 16 4b 	call	0x962c	; 0x962c <LBMoveSprite>
		if (extendedSprites[i].y > 200)
    bb82:	f7 01       	movw	r30, r14
    bb84:	80 81       	ld	r24, Z
    bb86:	89 3c       	cpi	r24, 0xC9	; 201
    bb88:	50 f0       	brcs	.+20     	; 0xbb9e <animate_particles+0x4a>
		{
			LBMoveSprite(i, LBRandom(0, 224), oy, 1, 1);
    bb8a:	60 ee       	ldi	r22, 0xE0	; 224
    bb8c:	80 e0       	ldi	r24, 0x00	; 0
    bb8e:	0e 94 9f 4a 	call	0x953e	; 0x953e <LBRandom>
    bb92:	21 e0       	ldi	r18, 0x01	; 1
    bb94:	41 2f       	mov	r20, r17
    bb96:	68 2f       	mov	r22, r24
    bb98:	8c 2f       	mov	r24, r28
    bb9a:	0e 94 16 4b 	call	0x962c	; 0x962c <LBMoveSprite>
	}
}

void animate_particles(char dy, u8 oy)
{
	for (u8 i = 9; i < 20; i++)
    bb9e:	cf 5f       	subi	r28, 0xFF	; 255
    bba0:	f4 e0       	ldi	r31, 0x04	; 4
    bba2:	ef 0e       	add	r14, r31
    bba4:	f1 1c       	adc	r15, r1
    bba6:	c4 31       	cpi	r28, 0x14	; 20
    bba8:	11 f7       	brne	.-60     	; 0xbb6e <animate_particles+0x1a>
		if (extendedSprites[i].y > 200)
		{
			LBMoveSprite(i, LBRandom(0, 224), oy, 1, 1);
		}
	}
}
    bbaa:	df 91       	pop	r29
    bbac:	cf 91       	pop	r28
    bbae:	1f 91       	pop	r17
    bbb0:	0f 91       	pop	r16
    bbb2:	ff 90       	pop	r15
    bbb4:	ef 90       	pop	r14
    bbb6:	08 95       	ret

0000bbb8 <get_emarald_map>:

const char* get_emarald_map(u8 index)
{
    bbb8:	82 50       	subi	r24, 0x02	; 2
    bbba:	87 30       	cpi	r24, 0x07	; 7
    bbbc:	48 f4       	brcc	.+18     	; 0xbbd0 <get_emarald_map+0x18>
    bbbe:	e8 2f       	mov	r30, r24
    bbc0:	f0 e0       	ldi	r31, 0x00	; 0
    bbc2:	ee 0f       	add	r30, r30
    bbc4:	ff 1f       	adc	r31, r31
    bbc6:	ee 5f       	subi	r30, 0xFE	; 254
    bbc8:	fa 4f       	sbci	r31, 0xFA	; 250
    bbca:	80 81       	ld	r24, Z
    bbcc:	91 81       	ldd	r25, Z+1	; 0x01
    bbce:	08 95       	ret
    bbd0:	88 ec       	ldi	r24, 0xC8	; 200
    bbd2:	9d e2       	ldi	r25, 0x2D	; 45
		case 4: return map_emerald_2;
		case 6: return map_emerald_3;
		case 8: return map_emerald_4;
		default: return map_emerald_0;
	}
}
    bbd4:	08 95       	ret

0000bbd6 <music_transition>:

void music_transition()
{
	if (is_space())
    bbd6:	0e 94 93 4b 	call	0x9726	; 0x9726 <is_space>
    bbda:	88 23       	and	r24, r24
    bbdc:	19 f0       	breq	.+6      	; 0xbbe4 <music_transition+0xe>
	{
		StartSong(spacesong);
    bbde:	8c ea       	ldi	r24, 0xAC	; 172
    bbe0:	9b e0       	ldi	r25, 0x0B	; 11
    bbe2:	06 c0       	rjmp	.+12     	; 0xbbf0 <music_transition+0x1a>
	}
	else if (game.current_level_index != 0)
    bbe4:	80 91 b7 0d 	lds	r24, 0x0DB7
    bbe8:	88 23       	and	r24, r24
    bbea:	21 f0       	breq	.+8      	; 0xbbf4 <music_transition+0x1e>
	{
		StartSong(planetsong);
    bbec:	8c e4       	ldi	r24, 0x4C	; 76
    bbee:	92 e1       	ldi	r25, 0x12	; 18
    bbf0:	0c 94 b9 3c 	jmp	0x7972	; 0x7972 <StartSong>
    bbf4:	08 95       	ret

0000bbf6 <planet_transition>:
	}
}

void planet_transition(u8 index, char scroll, char atmosphere_height, char dy, u8 oy)
{
    bbf6:	cf 92       	push	r12
    bbf8:	df 92       	push	r13
    bbfa:	ef 92       	push	r14
    bbfc:	ff 92       	push	r15
    bbfe:	0f 93       	push	r16
    bc00:	1f 93       	push	r17
    bc02:	cf 93       	push	r28
    bc04:	df 93       	push	r29
    bc06:	1f 92       	push	r1
    bc08:	cd b7       	in	r28, 0x3d	; 61
    bc0a:	de b7       	in	r29, 0x3e	; 62
    bc0c:	c8 2e       	mov	r12, r24
    bc0e:	e6 2e       	mov	r14, r22
    bc10:	12 2f       	mov	r17, r18
    bc12:	f0 2e       	mov	r15, r16
	u8 frame_counter = 0;
	
	fade_through();
    bc14:	49 83       	std	Y+1, r20	; 0x01
    bc16:	0e 94 30 5c 	call	0xb860	; 0xb860 <fade_through>
	Screen.scrollX = 0;
    bc1a:	10 92 b2 0c 	sts	0x0CB2, r1
	Screen.scrollY = 0;
    bc1e:	10 92 b3 0c 	sts	0x0CB3, r1
	Screen.scrollHeight = 32;
    bc22:	80 e2       	ldi	r24, 0x20	; 32
    bc24:	80 93 b4 0c 	sts	0x0CB4, r24
	Screen.overlayHeight = 0;
    bc28:	10 92 af 0c 	sts	0x0CAF, r1
	game.scroll_x = 0;
    bc2c:	10 92 bd 0d 	sts	0x0DBD, r1
	game.scroll_y = 0;
    bc30:	10 92 be 0d 	sts	0x0DBE, r1
	map_particles();
    bc34:	0e 94 7b 5d 	call	0xbaf6	; 0xbaf6 <map_particles>
	map_ship();
    bc38:	0e 94 13 50 	call	0xa026	; 0xa026 <map_ship>
	place_particles();
    bc3c:	0e 94 88 5d 	call	0xbb10	; 0xbb10 <place_particles>
	DrawMap2(0, atmosphere_height, map_atmosphere);
    bc40:	4d e8       	ldi	r20, 0x8D	; 141
    bc42:	57 e6       	ldi	r21, 0x67	; 103
    bc44:	69 81       	ldd	r22, Y+1	; 0x01
    bc46:	80 e0       	ldi	r24, 0x00	; 0
    bc48:	0e 94 5c 48 	call	0x90b8	; 0x90b8 <DrawMap>
	game.current_level_index = index;
    bc4c:	c0 92 b7 0d 	sts	0x0DB7, r12
	music_transition();
    bc50:	0e 94 eb 5d 	call	0xbbd6	; 0xbbd6 <music_transition>
	if (!is_space())
    bc54:	0e 94 93 4b 	call	0x9726	; 0x9726 <is_space>
    bc58:	81 11       	cpse	r24, r1
    bc5a:	0f c0       	rjmp	.+30     	; 0xbc7a <planet_transition+0x84>
	{
		LBMapSprite(8, get_emarald_map(index), 0);
    bc5c:	8c 2d       	mov	r24, r12
    bc5e:	0e 94 dc 5d 	call	0xbbb8	; 0xbbb8 <get_emarald_map>
    bc62:	40 e0       	ldi	r20, 0x00	; 0
    bc64:	bc 01       	movw	r22, r24
    bc66:	88 e0       	ldi	r24, 0x08	; 8
    bc68:	0e 94 c4 4a 	call	0x9588	; 0x9588 <LBMapSprite>
		LBMoveSprite(8, 112, 48, 1, 1);
    bc6c:	01 e0       	ldi	r16, 0x01	; 1
    bc6e:	21 e0       	ldi	r18, 0x01	; 1
    bc70:	40 e3       	ldi	r20, 0x30	; 48
    bc72:	60 e7       	ldi	r22, 0x70	; 112
    bc74:	88 e0       	ldi	r24, 0x08	; 8
    bc76:	0e 94 16 4b 	call	0x962c	; 0x962c <LBMoveSprite>
		StartSong(planetsong);
	}
}

void planet_transition(u8 index, char scroll, char atmosphere_height, char dy, u8 oy)
{
    bc7a:	d1 2c       	mov	r13, r1
		LBMoveSprite(8, 112, 48, 1, 1);
	}
	
	while (frame_counter < 255)
	{
		WaitVsync(1);
    bc7c:	81 e0       	ldi	r24, 0x01	; 1
    bc7e:	90 e0       	ldi	r25, 0x00	; 0
    bc80:	0e 94 c5 48 	call	0x918a	; 0x918a <WaitVsync>
		LBMapSprite(0, LBGetNextFrame(&game.player.run), 0);
    bc84:	80 e3       	ldi	r24, 0x30	; 48
    bc86:	9e e0       	ldi	r25, 0x0E	; 14
    bc88:	0e 94 62 49 	call	0x92c4	; 0x92c4 <LBGetNextFrame>
    bc8c:	40 e0       	ldi	r20, 0x00	; 0
    bc8e:	bc 01       	movw	r22, r24
    bc90:	80 e0       	ldi	r24, 0x00	; 0
    bc92:	0e 94 c4 4a 	call	0x9588	; 0x9588 <LBMapSprite>
		LBMoveSprite(0, 104, 104, 4, 2);
    bc96:	02 e0       	ldi	r16, 0x02	; 2
    bc98:	24 e0       	ldi	r18, 0x04	; 4
    bc9a:	48 e6       	ldi	r20, 0x68	; 104
    bc9c:	68 e6       	ldi	r22, 0x68	; 104
    bc9e:	80 e0       	ldi	r24, 0x00	; 0
    bca0:	0e 94 16 4b 	call	0x962c	; 0x962c <LBMoveSprite>
		frame_counter++;
    bca4:	d3 94       	inc	r13
		if (frame_counter % 16 == 0) Screen.scrollY += scroll;
    bca6:	8d 2d       	mov	r24, r13
    bca8:	8f 70       	andi	r24, 0x0F	; 15
    bcaa:	29 f4       	brne	.+10     	; 0xbcb6 <planet_transition+0xc0>
    bcac:	90 91 b3 0c 	lds	r25, 0x0CB3
    bcb0:	9e 0d       	add	r25, r14
    bcb2:	90 93 b3 0c 	sts	0x0CB3, r25
		animate_particles(dy, oy);
    bcb6:	6f 2d       	mov	r22, r15
    bcb8:	81 2f       	mov	r24, r17
    bcba:	0e 94 aa 5d 	call	0xbb54	; 0xbb54 <animate_particles>
		LBRotateSprites();
    bcbe:	0e 94 54 4b 	call	0x96a8	; 0x96a8 <LBRotateSprites>
	{
		LBMapSprite(8, get_emarald_map(index), 0);
		LBMoveSprite(8, 112, 48, 1, 1);
	}
	
	while (frame_counter < 255)
    bcc2:	8f ef       	ldi	r24, 0xFF	; 255
    bcc4:	d8 12       	cpse	r13, r24
    bcc6:	da cf       	rjmp	.-76     	; 0xbc7c <planet_transition+0x86>
		frame_counter++;
		if (frame_counter % 16 == 0) Screen.scrollY += scroll;
		animate_particles(dy, oy);
		LBRotateSprites();
	}
	game.current_screen = LEVEL;
    bcc8:	82 e0       	ldi	r24, 0x02	; 2
    bcca:	80 93 b6 0d 	sts	0x0DB6, r24
	ClearVram();
    bcce:	0e 94 c5 39 	call	0x738a	; 0x738a <ClearVram>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    bcd2:	64 e1       	ldi	r22, 0x14	; 20
    bcd4:	80 e0       	ldi	r24, 0x00	; 0
    bcd6:	0e 94 0e 5c 	call	0xb81c	; 0xb81c <clear_sprites>
	LBRotateSprites();
    bcda:	0e 94 54 4b 	call	0x96a8	; 0x96a8 <LBRotateSprites>
	fade_through();
    bcde:	0e 94 30 5c 	call	0xb860	; 0xb860 <fade_through>
	load_level(index, true);
    bce2:	61 e0       	ldi	r22, 0x01	; 1
    bce4:	8c 2d       	mov	r24, r12
    bce6:	0e 94 40 5c 	call	0xb880	; 0xb880 <load_level>
	init_player_state();
    bcea:	0e 94 c1 4b 	call	0x9782	; 0x9782 <init_player_state>
	init_enemy_state();
}
    bcee:	0f 90       	pop	r0
    bcf0:	df 91       	pop	r29
    bcf2:	cf 91       	pop	r28
    bcf4:	1f 91       	pop	r17
    bcf6:	0f 91       	pop	r16
    bcf8:	ff 90       	pop	r15
    bcfa:	ef 90       	pop	r14
    bcfc:	df 90       	pop	r13
    bcfe:	cf 90       	pop	r12
	clear_sprites(0, MAX_EXTENDED_SPRITES);
	LBRotateSprites();
	fade_through();
	load_level(index, true);
	init_player_state();
	init_enemy_state();
    bd00:	0c 94 ad 4b 	jmp	0x975a	; 0x975a <init_enemy_state>

0000bd04 <intro>:
}


void intro()
{
    bd04:	0f 93       	push	r16
	fade_through();
    bd06:	0e 94 30 5c 	call	0xb860	; 0xb860 <fade_through>
	game.lives = LIVES;
    bd0a:	e6 ea       	ldi	r30, 0xA6	; 166
    bd0c:	fd e0       	ldi	r31, 0x0D	; 13
    bd0e:	85 e0       	ldi	r24, 0x05	; 5
    bd10:	87 87       	std	Z+15, r24	; 0x0f
	game.score = 0;
    bd12:	11 86       	std	Z+9, r1	; 0x09
    bd14:	10 86       	std	Z+8, r1	; 0x08
	game.time = 0;
    bd16:	13 86       	std	Z+11, r1	; 0x0b
    bd18:	12 86       	std	Z+10, r1	; 0x0a
	StartSong(planetsong);
    bd1a:	8c e4       	ldi	r24, 0x4C	; 76
    bd1c:	92 e1       	ldi	r25, 0x12	; 18
    bd1e:	0e 94 b9 3c 	call	0x7972	; 0x7972 <StartSong>
	LBMapSprite(0, map_emerald_0, 0);
    bd22:	40 e0       	ldi	r20, 0x00	; 0
    bd24:	68 ec       	ldi	r22, 0xC8	; 200
    bd26:	7d e2       	ldi	r23, 0x2D	; 45
    bd28:	80 e0       	ldi	r24, 0x00	; 0
    bd2a:	0e 94 c4 4a 	call	0x9588	; 0x9588 <LBMapSprite>
	LBMoveSprite(0, 80, 48, 1, 1);
    bd2e:	01 e0       	ldi	r16, 0x01	; 1
    bd30:	21 e0       	ldi	r18, 0x01	; 1
    bd32:	40 e3       	ldi	r20, 0x30	; 48
    bd34:	60 e5       	ldi	r22, 0x50	; 80
    bd36:	80 e0       	ldi	r24, 0x00	; 0
    bd38:	0e 94 16 4b 	call	0x962c	; 0x962c <LBMoveSprite>
	LBMapSprite(1, map_emerald_1, 0);
    bd3c:	40 e0       	ldi	r20, 0x00	; 0
    bd3e:	6b ec       	ldi	r22, 0xCB	; 203
    bd40:	7d e2       	ldi	r23, 0x2D	; 45
    bd42:	81 e0       	ldi	r24, 0x01	; 1
    bd44:	0e 94 c4 4a 	call	0x9588	; 0x9588 <LBMapSprite>
	LBMoveSprite(1, 96, 48, 1, 1);
    bd48:	21 e0       	ldi	r18, 0x01	; 1
    bd4a:	40 e3       	ldi	r20, 0x30	; 48
    bd4c:	60 e6       	ldi	r22, 0x60	; 96
    bd4e:	81 e0       	ldi	r24, 0x01	; 1
    bd50:	0e 94 16 4b 	call	0x962c	; 0x962c <LBMoveSprite>
	LBMapSprite(2, map_emerald_2, 0);
    bd54:	40 e0       	ldi	r20, 0x00	; 0
    bd56:	65 ec       	ldi	r22, 0xC5	; 197
    bd58:	7d e2       	ldi	r23, 0x2D	; 45
    bd5a:	82 e0       	ldi	r24, 0x02	; 2
    bd5c:	0e 94 c4 4a 	call	0x9588	; 0x9588 <LBMapSprite>
	LBMoveSprite(2, 112, 48, 1, 1);
    bd60:	21 e0       	ldi	r18, 0x01	; 1
    bd62:	40 e3       	ldi	r20, 0x30	; 48
    bd64:	60 e7       	ldi	r22, 0x70	; 112
    bd66:	82 e0       	ldi	r24, 0x02	; 2
    bd68:	0e 94 16 4b 	call	0x962c	; 0x962c <LBMoveSprite>
	LBMapSprite(3, map_emerald_3, 0);
    bd6c:	40 e0       	ldi	r20, 0x00	; 0
    bd6e:	62 ec       	ldi	r22, 0xC2	; 194
    bd70:	7d e2       	ldi	r23, 0x2D	; 45
    bd72:	83 e0       	ldi	r24, 0x03	; 3
    bd74:	0e 94 c4 4a 	call	0x9588	; 0x9588 <LBMapSprite>
	LBMoveSprite(3, 128, 48, 1, 1);
    bd78:	21 e0       	ldi	r18, 0x01	; 1
    bd7a:	40 e3       	ldi	r20, 0x30	; 48
    bd7c:	60 e8       	ldi	r22, 0x80	; 128
    bd7e:	83 e0       	ldi	r24, 0x03	; 3
    bd80:	0e 94 16 4b 	call	0x962c	; 0x962c <LBMoveSprite>
	LBMapSprite(4, map_emerald_4, 0);
    bd84:	40 e0       	ldi	r20, 0x00	; 0
    bd86:	6f eb       	ldi	r22, 0xBF	; 191
    bd88:	7d e2       	ldi	r23, 0x2D	; 45
    bd8a:	84 e0       	ldi	r24, 0x04	; 4
    bd8c:	0e 94 c4 4a 	call	0x9588	; 0x9588 <LBMapSprite>
	LBMoveSprite(4, 144, 48, 1, 1);
    bd90:	21 e0       	ldi	r18, 0x01	; 1
    bd92:	40 e3       	ldi	r20, 0x30	; 48
    bd94:	60 e9       	ldi	r22, 0x90	; 144
    bd96:	84 e0       	ldi	r24, 0x04	; 4
    bd98:	0e 94 16 4b 	call	0x962c	; 0x962c <LBMoveSprite>
	LBRotateSprites();
    bd9c:	0e 94 54 4b 	call	0x96a8	; 0x96a8 <LBRotateSprites>
	stream_dialogue((const char*) strIntro, 12);
    bda0:	6c e0       	ldi	r22, 0x0C	; 12
    bda2:	8d e4       	ldi	r24, 0x4D	; 77
    bda4:	9a e0       	ldi	r25, 0x0A	; 10
    bda6:	0e 94 44 5d 	call	0xba88	; 0xba88 <stream_dialogue>
	LBWaitSeconds(1);
    bdaa:	81 e0       	ldi	r24, 0x01	; 1
    bdac:	0e 94 b5 4a 	call	0x956a	; 0x956a <LBWaitSeconds>
	planet_transition(0, 1, 28, -3, 199);
    bdb0:	07 ec       	ldi	r16, 0xC7	; 199
    bdb2:	2d ef       	ldi	r18, 0xFD	; 253
    bdb4:	4c e1       	ldi	r20, 0x1C	; 28
    bdb6:	61 e0       	ldi	r22, 0x01	; 1
    bdb8:	80 e0       	ldi	r24, 0x00	; 0
    bdba:	0e 94 fb 5d 	call	0xbbf6	; 0xbbf6 <planet_transition>
}
    bdbe:	0f 91       	pop	r16
    bdc0:	08 95       	ret

0000bdc2 <load_splash>:

void load_splash()
{
	fade_through();
    bdc2:	0e 94 30 5c 	call	0xb860	; 0xb860 <fade_through>
	Screen.scrollX = 0;
    bdc6:	ef ea       	ldi	r30, 0xAF	; 175
    bdc8:	fc e0       	ldi	r31, 0x0C	; 12
    bdca:	13 82       	std	Z+3, r1	; 0x03
	Screen.scrollY = 0;
    bdcc:	14 82       	std	Z+4, r1	; 0x04
	Screen.scrollHeight = 32;
    bdce:	80 e2       	ldi	r24, 0x20	; 32
    bdd0:	85 83       	std	Z+5, r24	; 0x05
	Screen.overlayHeight = 0;
    bdd2:	10 82       	st	Z, r1
	game.current_screen = SPLASH;
    bdd4:	e6 ea       	ldi	r30, 0xA6	; 166
    bdd6:	fd e0       	ldi	r31, 0x0D	; 13
    bdd8:	10 8a       	std	Z+16, r1	; 0x10
	game.selection = START_SELECTED;
    bdda:	15 8a       	std	Z+21, r1	; 0x15
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    bddc:	64 e1       	ldi	r22, 0x14	; 20
    bdde:	80 e0       	ldi	r24, 0x00	; 0
    bde0:	0e 94 0e 5c 	call	0xb81c	; 0xb81c <clear_sprites>
	LBRotateSprites();
    bde4:	0e 94 54 4b 	call	0x96a8	; 0x96a8 <LBRotateSprites>
	LBPrint(8, 15, (char*) str1Player);
    bde8:	49 e7       	ldi	r20, 0x79	; 121
    bdea:	5b e0       	ldi	r21, 0x0B	; 11
    bdec:	6f e0       	ldi	r22, 0x0F	; 15
    bdee:	88 e0       	ldi	r24, 0x08	; 8
    bdf0:	0e 94 f3 49 	call	0x93e6	; 0x93e6 <LBPrint>
	LBPrint(8, 16, (char*) strHighScores);
    bdf4:	4d e6       	ldi	r20, 0x6D	; 109
    bdf6:	5b e0       	ldi	r21, 0x0B	; 11
    bdf8:	60 e1       	ldi	r22, 0x10	; 16
    bdfa:	88 e0       	ldi	r24, 0x08	; 8
    bdfc:	0e 94 f3 49 	call	0x93e6	; 0x93e6 <LBPrint>
	LBPrint(4, 21, (char*) strCopyright);
    be00:	47 e9       	ldi	r20, 0x97	; 151
    be02:	5b e0       	ldi	r21, 0x0B	; 11
    be04:	65 e1       	ldi	r22, 0x15	; 21
    be06:	84 e0       	ldi	r24, 0x04	; 4
    be08:	0e 94 f3 49 	call	0x93e6	; 0x93e6 <LBPrint>
	LBPrint(3, 26, (char*) strMusic);
    be0c:	4f e7       	ldi	r20, 0x7F	; 127
    be0e:	5b e0       	ldi	r21, 0x0B	; 11
    be10:	6a e1       	ldi	r22, 0x1A	; 26
    be12:	83 e0       	ldi	r24, 0x03	; 3
    be14:	0e 94 f3 49 	call	0x93e6	; 0x93e6 <LBPrint>
	DrawMap2(6, 5, map_splash);
    be18:	41 e7       	ldi	r20, 0x71	; 113
    be1a:	58 e6       	ldi	r21, 0x68	; 104
    be1c:	65 e0       	ldi	r22, 0x05	; 5
    be1e:	86 e0       	ldi	r24, 0x06	; 6
    be20:	0e 94 5c 48 	call	0x90b8	; 0x90b8 <DrawMap>
	LBMapSprite(0, map_right_arrow, 0);
    be24:	40 e0       	ldi	r20, 0x00	; 0
    be26:	60 ee       	ldi	r22, 0xE0	; 224
    be28:	7d e2       	ldi	r23, 0x2D	; 45
    be2a:	80 e0       	ldi	r24, 0x00	; 0
    be2c:	0c 94 c4 4a 	jmp	0x9588	; 0x9588 <LBMapSprite>

0000be30 <load_high_scores>:
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
	}
}

void load_high_scores()
{
    be30:	4f 92       	push	r4
    be32:	5f 92       	push	r5
    be34:	6f 92       	push	r6
    be36:	7f 92       	push	r7
    be38:	8f 92       	push	r8
    be3a:	9f 92       	push	r9
    be3c:	af 92       	push	r10
    be3e:	bf 92       	push	r11
    be40:	cf 92       	push	r12
    be42:	df 92       	push	r13
    be44:	ef 92       	push	r14
    be46:	ff 92       	push	r15
    be48:	0f 93       	push	r16
    be4a:	1f 93       	push	r17
    be4c:	cf 93       	push	r28
    be4e:	df 93       	push	r29
    be50:	00 d0       	rcall	.+0      	; 0xbe52 <load_high_scores+0x22>
    be52:	cd b7       	in	r28, 0x3d	; 61
    be54:	de b7       	in	r29, 0x3e	; 62
	u16 score = 0;
	u8 ypos = 7;
	
	game.current_screen = HIGH_SCORES;
    be56:	81 e0       	ldi	r24, 0x01	; 1
    be58:	80 93 b6 0d 	sts	0x0DB6, r24
	game.high_score_index = -1;
    be5c:	8f ef       	ldi	r24, 0xFF	; 255
    be5e:	80 93 b4 0d 	sts	0x0DB4, r24
	fade_through();
    be62:	0e 94 30 5c 	call	0xb860	; 0xb860 <fade_through>
	Screen.scrollX = 0;
    be66:	10 92 b2 0c 	sts	0x0CB2, r1
	Screen.scrollY = 0;
    be6a:	10 92 b3 0c 	sts	0x0CB3, r1
	Screen.scrollHeight = 32;
    be6e:	80 e2       	ldi	r24, 0x20	; 32
    be70:	80 93 b4 0c 	sts	0x0CB4, r24
	Screen.overlayHeight = 0;
    be74:	10 92 af 0c 	sts	0x0CAF, r1
	load_eeprom(&scores);
    be78:	86 e8       	ldi	r24, 0x86	; 134
    be7a:	9d e0       	ldi	r25, 0x0D	; 13
    be7c:	0e 94 bf 4d 	call	0x9b7e	; 0x9b7e <load_eeprom>
	
	LBPrint(9, 3, (char*) strHighScores);
    be80:	4d e6       	ldi	r20, 0x6D	; 109
    be82:	5b e0       	ldi	r21, 0x0B	; 11
    be84:	63 e0       	ldi	r22, 0x03	; 3
    be86:	89 e0       	ldi	r24, 0x09	; 9
    be88:	0e 94 f3 49 	call	0x93e6	; 0x93e6 <LBPrint>
	
	LBMapSprite(0, map_emerald_0, 0);
    be8c:	40 e0       	ldi	r20, 0x00	; 0
    be8e:	68 ec       	ldi	r22, 0xC8	; 200
    be90:	7d e2       	ldi	r23, 0x2D	; 45
    be92:	80 e0       	ldi	r24, 0x00	; 0
    be94:	0e 94 c4 4a 	call	0x9588	; 0x9588 <LBMapSprite>
	LBMapSprite(1, map_emerald_1, 0);
    be98:	40 e0       	ldi	r20, 0x00	; 0
    be9a:	6b ec       	ldi	r22, 0xCB	; 203
    be9c:	7d e2       	ldi	r23, 0x2D	; 45
    be9e:	81 e0       	ldi	r24, 0x01	; 1
    bea0:	0e 94 c4 4a 	call	0x9588	; 0x9588 <LBMapSprite>
	LBMoveSprite(0, 7*8, 3*8, 1, 1);
    bea4:	01 e0       	ldi	r16, 0x01	; 1
    bea6:	21 e0       	ldi	r18, 0x01	; 1
    bea8:	48 e1       	ldi	r20, 0x18	; 24
    beaa:	68 e3       	ldi	r22, 0x38	; 56
    beac:	80 e0       	ldi	r24, 0x00	; 0
    beae:	0e 94 16 4b 	call	0x962c	; 0x962c <LBMoveSprite>
	LBMoveSprite(1, 21*8, 3*8, 1, 1);
    beb2:	21 e0       	ldi	r18, 0x01	; 1
    beb4:	48 e1       	ldi	r20, 0x18	; 24
    beb6:	68 ea       	ldi	r22, 0xA8	; 168
    beb8:	81 e0       	ldi	r24, 0x01	; 1
    beba:	0e 94 16 4b 	call	0x962c	; 0x962c <LBMoveSprite>
    bebe:	8c e8       	ldi	r24, 0x8C	; 140
    bec0:	88 2e       	mov	r8, r24
    bec2:	8d e0       	ldi	r24, 0x0D	; 13
    bec4:	98 2e       	mov	r9, r24
    bec6:	74 01       	movw	r14, r8
    bec8:	90 e3       	ldi	r25, 0x30	; 48
    beca:	b9 2e       	mov	r11, r25
}

void load_high_scores()
{
	u16 score = 0;
	u8 ypos = 7;
    becc:	17 e0       	ldi	r17, 0x07	; 7
	LBMoveSprite(0, 7*8, 3*8, 1, 1);
	LBMoveSprite(1, 21*8, 3*8, 1, 1);
	
	for (u8 i = 0; i < 30; i += 5)
	{
		LBPrintByte(9, ypos, i/5+1, false);
    bece:	25 e0       	ldi	r18, 0x05	; 5
    bed0:	a2 2e       	mov	r10, r18
    bed2:	31 ea       	ldi	r19, 0xA1	; 161
    bed4:	63 2e       	mov	r6, r19
    bed6:	3d e0       	ldi	r19, 0x0D	; 13
    bed8:	73 2e       	mov	r7, r19
    beda:	0e 2d       	mov	r16, r14
    bedc:	08 19       	sub	r16, r8
    bede:	80 2f       	mov	r24, r16
    bee0:	6a 2d       	mov	r22, r10
    bee2:	0e 94 87 67 	call	0xcf0e	; 0xcf0e <__udivmodqi4>
    bee6:	41 e0       	ldi	r20, 0x01	; 1
    bee8:	48 0f       	add	r20, r24
    beea:	20 e0       	ldi	r18, 0x00	; 0
    beec:	61 2f       	mov	r22, r17
    beee:	89 e0       	ldi	r24, 0x09	; 9
    bef0:	0e 94 0f 4a 	call	0x941e	; 0x941e <LBPrintByte>
		LBPrintChar(10, ypos, ' ');
    bef4:	40 e2       	ldi	r20, 0x20	; 32
    bef6:	61 2f       	mov	r22, r17
    bef8:	8a e0       	ldi	r24, 0x0A	; 10
    befa:	0e 94 d3 49 	call	0x93a6	; 0x93a6 <LBPrintChar>
    befe:	f7 01       	movw	r30, r14
    bf00:	34 97       	sbiw	r30, 0x04	; 4
		LBPrintChar(11, ypos, scores.data[i]);
    bf02:	40 81       	ld	r20, Z
    bf04:	61 2f       	mov	r22, r17
    bf06:	8b e0       	ldi	r24, 0x0B	; 11
    bf08:	0e 94 d3 49 	call	0x93a6	; 0x93a6 <LBPrintChar>
    bf0c:	f7 01       	movw	r30, r14
    bf0e:	33 97       	sbiw	r30, 0x03	; 3
		LBPrintChar(12, ypos, scores.data[i+1]);
    bf10:	40 81       	ld	r20, Z
    bf12:	61 2f       	mov	r22, r17
    bf14:	8c e0       	ldi	r24, 0x0C	; 12
    bf16:	0e 94 d3 49 	call	0x93a6	; 0x93a6 <LBPrintChar>
    bf1a:	f7 01       	movw	r30, r14
    bf1c:	32 97       	sbiw	r30, 0x02	; 2
		LBPrintChar(13, ypos, scores.data[i+2]);
    bf1e:	40 81       	ld	r20, Z
    bf20:	61 2f       	mov	r22, r17
    bf22:	8d e0       	ldi	r24, 0x0D	; 13
    bf24:	0e 94 d3 49 	call	0x93a6	; 0x93a6 <LBPrintChar>
		LBPrintChar(14, ypos, ' ');
    bf28:	40 e2       	ldi	r20, 0x20	; 32
    bf2a:	61 2f       	mov	r22, r17
    bf2c:	8e e0       	ldi	r24, 0x0E	; 14
    bf2e:	0e 94 d3 49 	call	0x93a6	; 0x93a6 <LBPrintChar>
    bf32:	27 01       	movw	r4, r14
		(&score)[0] = scores.data[i+3];
    bf34:	f2 01       	movw	r30, r4
    bf36:	c2 90       	ld	r12, -Z
    bf38:	2f 01       	movw	r4, r30
    bf3a:	d1 2c       	mov	r13, r1
    bf3c:	da 82       	std	Y+2, r13	; 0x02
    bf3e:	c9 82       	std	Y+1, r12	; 0x01
		(&score)[1] = scores.data[i+4];
    bf40:	f7 01       	movw	r30, r14
    bf42:	80 81       	ld	r24, Z
    bf44:	90 e0       	ldi	r25, 0x00	; 0
    bf46:	9c 83       	std	Y+4, r25	; 0x04
    bf48:	8b 83       	std	Y+3, r24	; 0x03
		LBPrintInt(19, ypos, score, true);
    bf4a:	21 e0       	ldi	r18, 0x01	; 1
    bf4c:	a6 01       	movw	r20, r12
    bf4e:	61 2f       	mov	r22, r17
    bf50:	83 e1       	ldi	r24, 0x13	; 19
    bf52:	0e 94 40 4a 	call	0x9480	; 0x9480 <LBPrintInt>
		
		if (game.score > score && game.high_score_index == -1)
    bf56:	40 91 ae 0d 	lds	r20, 0x0DAE
    bf5a:	50 91 af 0d 	lds	r21, 0x0DAF
    bf5e:	c4 16       	cp	r12, r20
    bf60:	d5 06       	cpc	r13, r21
    bf62:	f0 f5       	brcc	.+124    	; 0xbfe0 <load_high_scores+0x1b0>
    bf64:	80 91 b4 0d 	lds	r24, 0x0DB4
    bf68:	8f 3f       	cpi	r24, 0xFF	; 255
    bf6a:	d1 f5       	brne	.+116    	; 0xbfe0 <load_high_scores+0x1b0>
    bf6c:	a1 ea       	ldi	r26, 0xA1	; 161
    bf6e:	bd e0       	ldi	r27, 0x0D	; 13
    bf70:	cd 01       	movw	r24, r26
    bf72:	05 97       	sbiw	r24, 0x05	; 5
    bf74:	2e e1       	ldi	r18, 0x1E	; 30
    bf76:	28 0f       	add	r18, r24
    bf78:	26 19       	sub	r18, r6
		{
			// Shift scores down
			for (u8 j = 25; j > i; j -= 5)
    bf7a:	02 17       	cp	r16, r18
    bf7c:	40 f4       	brcc	.+16     	; 0xbf8e <load_high_scores+0x15e>
			{
				memcpy(&(scores.data[j]), &(scores.data[j-5]), 5);
    bf7e:	fc 01       	movw	r30, r24
    bf80:	2a 2d       	mov	r18, r10
    bf82:	01 90       	ld	r0, Z+
    bf84:	0d 92       	st	X+, r0
    bf86:	2a 95       	dec	r18
    bf88:	e1 f7       	brne	.-8      	; 0xbf82 <load_high_scores+0x152>
    bf8a:	dc 01       	movw	r26, r24
    bf8c:	f1 cf       	rjmp	.-30     	; 0xbf70 <load_high_scores+0x140>
			}
			LBPrintInt(19, ypos, game.score, true);
    bf8e:	21 e0       	ldi	r18, 0x01	; 1
    bf90:	61 2f       	mov	r22, r17
    bf92:	83 e1       	ldi	r24, 0x13	; 19
    bf94:	0e 94 40 4a 	call	0x9480	; 0x9480 <LBPrintInt>
			scores.data[i+3] = (&game.score)[0];
    bf98:	80 91 ae 0d 	lds	r24, 0x0DAE
    bf9c:	f2 01       	movw	r30, r4
    bf9e:	80 83       	st	Z, r24
			scores.data[i+4] = (&game.score)[1];
    bfa0:	80 91 b0 0d 	lds	r24, 0x0DB0
    bfa4:	f7 01       	movw	r30, r14
    bfa6:	80 83       	st	Z, r24
			game.high_score_index = i;
    bfa8:	00 93 b4 0d 	sts	0x0DB4, r16
			LBMapSprite(2, map_down_arrow, 0);
    bfac:	40 e0       	ldi	r20, 0x00	; 0
    bfae:	6d ed       	ldi	r22, 0xDD	; 221
    bfb0:	7d e2       	ldi	r23, 0x2D	; 45
    bfb2:	82 e0       	ldi	r24, 0x02	; 2
    bfb4:	0e 94 c4 4a 	call	0x9588	; 0x9588 <LBMapSprite>
			LBMapSprite(3, map_up_arrow, 0);
    bfb8:	40 e0       	ldi	r20, 0x00	; 0
    bfba:	6a ed       	ldi	r22, 0xDA	; 218
    bfbc:	7d e2       	ldi	r23, 0x2D	; 45
    bfbe:	83 e0       	ldi	r24, 0x03	; 3
    bfc0:	0e 94 c4 4a 	call	0x9588	; 0x9588 <LBMapSprite>
			LBMoveSprite(2, 11*8, (ypos-1)*8, 1, 1);
    bfc4:	01 e0       	ldi	r16, 0x01	; 1
    bfc6:	21 e0       	ldi	r18, 0x01	; 1
    bfc8:	4b 2d       	mov	r20, r11
    bfca:	68 e5       	ldi	r22, 0x58	; 88
    bfcc:	82 e0       	ldi	r24, 0x02	; 2
    bfce:	0e 94 16 4b 	call	0x962c	; 0x962c <LBMoveSprite>
			LBMoveSprite(3, 11*8, (ypos+1)*8, 1, 1);
    bfd2:	21 e0       	ldi	r18, 0x01	; 1
    bfd4:	40 e1       	ldi	r20, 0x10	; 16
    bfd6:	4b 0d       	add	r20, r11
    bfd8:	68 e5       	ldi	r22, 0x58	; 88
    bfda:	83 e0       	ldi	r24, 0x03	; 3
    bfdc:	0e 94 16 4b 	call	0x962c	; 0x962c <LBMoveSprite>
		}
		
		ypos += 2;
    bfe0:	1e 5f       	subi	r17, 0xFE	; 254
    bfe2:	f5 e0       	ldi	r31, 0x05	; 5
    bfe4:	ef 0e       	add	r14, r31
    bfe6:	f1 1c       	adc	r15, r1
    bfe8:	80 e1       	ldi	r24, 0x10	; 16
    bfea:	b8 0e       	add	r11, r24
	LBMapSprite(0, map_emerald_0, 0);
	LBMapSprite(1, map_emerald_1, 0);
	LBMoveSprite(0, 7*8, 3*8, 1, 1);
	LBMoveSprite(1, 21*8, 3*8, 1, 1);
	
	for (u8 i = 0; i < 30; i += 5)
    bfec:	13 31       	cpi	r17, 0x13	; 19
    bfee:	09 f0       	breq	.+2      	; 0xbff2 <load_high_scores+0x1c2>
    bff0:	74 cf       	rjmp	.-280    	; 0xbeda <load_high_scores+0xaa>
		}
		
		ypos += 2;
	}
	
	LBPrint(9, 22, (char*) strMainMenu);
    bff2:	44 e4       	ldi	r20, 0x44	; 68
    bff4:	5b e0       	ldi	r21, 0x0B	; 11
    bff6:	66 e1       	ldi	r22, 0x16	; 22
    bff8:	89 e0       	ldi	r24, 0x09	; 9
}
    bffa:	0f 90       	pop	r0
    bffc:	0f 90       	pop	r0
    bffe:	df 91       	pop	r29
    c000:	cf 91       	pop	r28
    c002:	1f 91       	pop	r17
    c004:	0f 91       	pop	r16
    c006:	ff 90       	pop	r15
    c008:	ef 90       	pop	r14
    c00a:	df 90       	pop	r13
    c00c:	cf 90       	pop	r12
    c00e:	bf 90       	pop	r11
    c010:	af 90       	pop	r10
    c012:	9f 90       	pop	r9
    c014:	8f 90       	pop	r8
    c016:	7f 90       	pop	r7
    c018:	6f 90       	pop	r6
    c01a:	5f 90       	pop	r5
    c01c:	4f 90       	pop	r4
		}
		
		ypos += 2;
	}
	
	LBPrint(9, 22, (char*) strMainMenu);
    c01e:	0c 94 f3 49 	jmp	0x93e6	; 0x93e6 <LBPrint>

0000c022 <exit_game>:
	}
}

void exit_game()
{
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    c022:	64 e1       	ldi	r22, 0x14	; 20
    c024:	80 e0       	ldi	r24, 0x00	; 0
    c026:	0e 94 0e 5c 	call	0xb81c	; 0xb81c <clear_sprites>
	LBRotateSprites();
    c02a:	0e 94 54 4b 	call	0x96a8	; 0x96a8 <LBRotateSprites>
	init_player_state();
    c02e:	0e 94 c1 4b 	call	0x9782	; 0x9782 <init_player_state>
	init_enemy_state();
    c032:	0e 94 ad 4b 	call	0x975a	; 0x975a <init_enemy_state>
	StopSong();
    c036:	0e 94 e2 3c 	call	0x79c4	; 0x79c4 <StopSong>
	load_high_scores();
    c03a:	0c 94 18 5f 	jmp	0xbe30	; 0xbe30 <load_high_scores>

0000c03e <update_splash>:
	DrawMap2(6, 5, map_splash);
	LBMapSprite(0, map_right_arrow, 0);
}

void update_splash()
{
    c03e:	0f 93       	push	r16
    c040:	cf 93       	push	r28
	if (game.joypadState.pressed & BTN_DOWN && game.selection == START_SELECTED)
    c042:	80 91 9a 0f 	lds	r24, 0x0F9A
    c046:	c0 91 bb 0d 	lds	r28, 0x0DBB
    c04a:	85 ff       	sbrs	r24, 5
    c04c:	06 c0       	rjmp	.+12     	; 0xc05a <update_splash+0x1c>
    c04e:	c1 11       	cpse	r28, r1
    c050:	04 c0       	rjmp	.+8      	; 0xc05a <update_splash+0x1c>
	{
		game.selection = HIGH_SCORES_SELECTED;
    c052:	81 e0       	ldi	r24, 0x01	; 1
    c054:	80 93 bb 0d 	sts	0x0DBB, r24
    c058:	06 c0       	rjmp	.+12     	; 0xc066 <update_splash+0x28>
		SFX_NAVIGATE;
	}
	else if (game.joypadState.pressed & BTN_UP && game.selection == HIGH_SCORES_SELECTED)
    c05a:	84 ff       	sbrs	r24, 4
    c05c:	0a c0       	rjmp	.+20     	; 0xc072 <update_splash+0x34>
    c05e:	c1 30       	cpi	r28, 0x01	; 1
    c060:	41 f4       	brne	.+16     	; 0xc072 <update_splash+0x34>
	{
		game.selection = START_SELECTED;
    c062:	10 92 bb 0d 	sts	0x0DBB, r1
		SFX_NAVIGATE;
    c066:	41 e0       	ldi	r20, 0x01	; 1
    c068:	6f ef       	ldi	r22, 0xFF	; 255
    c06a:	82 e0       	ldi	r24, 0x02	; 2
    c06c:	0e 94 a4 3d 	call	0x7b48	; 0x7b48 <TriggerFx>
    c070:	1c c0       	rjmp	.+56     	; 0xc0aa <update_splash+0x6c>
	}
	else if (select_pressed(&game.joypadState) && game.selection == START_SELECTED)
    c072:	8a e9       	ldi	r24, 0x9A	; 154
    c074:	9f e0       	ldi	r25, 0x0F	; 15
    c076:	0e 94 3a 5d 	call	0xba74	; 0xba74 <select_pressed>
    c07a:	88 23       	and	r24, r24
    c07c:	b1 f0       	breq	.+44     	; 0xc0aa <update_splash+0x6c>
    c07e:	c1 11       	cpse	r28, r1
    c080:	09 c0       	rjmp	.+18     	; 0xc094 <update_splash+0x56>
	{
		SFX_NAVIGATE;
    c082:	41 e0       	ldi	r20, 0x01	; 1
    c084:	6f ef       	ldi	r22, 0xFF	; 255
    c086:	82 e0       	ldi	r24, 0x02	; 2
    c088:	0e 94 a4 3d 	call	0x7b48	; 0x7b48 <TriggerFx>
	}
	else
	{
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
	}
}
    c08c:	cf 91       	pop	r28
    c08e:	0f 91       	pop	r16
		SFX_NAVIGATE;
	}
	else if (select_pressed(&game.joypadState) && game.selection == START_SELECTED)
	{
		SFX_NAVIGATE;
		intro();
    c090:	0c 94 82 5e 	jmp	0xbd04	; 0xbd04 <intro>
		return;
	}
	else if (select_pressed(&game.joypadState) && game.selection == HIGH_SCORES_SELECTED)
    c094:	c1 30       	cpi	r28, 0x01	; 1
    c096:	49 f4       	brne	.+18     	; 0xc0aa <update_splash+0x6c>
	{
		SFX_NAVIGATE;
    c098:	41 e0       	ldi	r20, 0x01	; 1
    c09a:	6f ef       	ldi	r22, 0xFF	; 255
    c09c:	82 e0       	ldi	r24, 0x02	; 2
    c09e:	0e 94 a4 3d 	call	0x7b48	; 0x7b48 <TriggerFx>
	}
	else
	{
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
	}
}
    c0a2:	cf 91       	pop	r28
    c0a4:	0f 91       	pop	r16
		return;
	}
	else if (select_pressed(&game.joypadState) && game.selection == HIGH_SCORES_SELECTED)
	{
		SFX_NAVIGATE;
		load_high_scores();
    c0a6:	0c 94 18 5f 	jmp	0xbe30	; 0xbe30 <load_high_scores>
		return;
	}
	
	if (game.selection == START_SELECTED)
    c0aa:	80 91 bb 0d 	lds	r24, 0x0DBB
	{
		LBMoveSprite(0, 7*8, 15*8, 1, 1);
    c0ae:	01 e0       	ldi	r16, 0x01	; 1
    c0b0:	21 e0       	ldi	r18, 0x01	; 1
		SFX_NAVIGATE;
		load_high_scores();
		return;
	}
	
	if (game.selection == START_SELECTED)
    c0b2:	81 11       	cpse	r24, r1
    c0b4:	03 c0       	rjmp	.+6      	; 0xc0bc <update_splash+0x7e>
	{
		LBMoveSprite(0, 7*8, 15*8, 1, 1);
    c0b6:	48 e7       	ldi	r20, 0x78	; 120
    c0b8:	68 e3       	ldi	r22, 0x38	; 56
    c0ba:	03 c0       	rjmp	.+6      	; 0xc0c2 <update_splash+0x84>
	}
	else
	{
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
    c0bc:	40 e8       	ldi	r20, 0x80	; 128
    c0be:	68 e3       	ldi	r22, 0x38	; 56
    c0c0:	80 e0       	ldi	r24, 0x00	; 0
    c0c2:	0e 94 16 4b 	call	0x962c	; 0x962c <LBMoveSprite>
	}
}
    c0c6:	cf 91       	pop	r28
    c0c8:	0f 91       	pop	r16
    c0ca:	08 95       	ret

0000c0cc <update_high_scores>:
	
	LBPrint(9, 22, (char*) strMainMenu);
}

void update_high_scores()
{
    c0cc:	0f 93       	push	r16
	if (game.joypadState.pressed & BTN_X)
    c0ce:	80 91 9a 0f 	lds	r24, 0x0F9A
    c0d2:	90 91 9b 0f 	lds	r25, 0x0F9B
    c0d6:	91 ff       	sbrs	r25, 1
    c0d8:	07 c0       	rjmp	.+14     	; 0xc0e8 <update_high_scores+0x1c>
	{
		SFX_NAVIGATE;
    c0da:	41 e0       	ldi	r20, 0x01	; 1
    c0dc:	6f ef       	ldi	r22, 0xFF	; 255
    c0de:	82 e0       	ldi	r24, 0x02	; 2
    c0e0:	0e 94 a4 3d 	call	0x7b48	; 0x7b48 <TriggerFx>
		load_splash();
    c0e4:	0e 94 e1 5e 	call	0xbdc2	; 0xbdc2 <load_splash>
	}
	
	if (game.high_score_index != -1)
    c0e8:	30 91 b4 0d 	lds	r19, 0x0DB4
    c0ec:	3f 3f       	cpi	r19, 0xFF	; 255
    c0ee:	09 f4       	brne	.+2      	; 0xc0f2 <update_high_scores+0x26>
    c0f0:	a2 c0       	rjmp	.+324    	; 0xc236 <update_high_scores+0x16a>
	{
		if (game.joypadState.pressed & BTN_RIGHT && game.high_score_index % 5 != 2)
    c0f2:	20 91 9a 0f 	lds	r18, 0x0F9A
    c0f6:	27 ff       	sbrs	r18, 7
    c0f8:	1e c0       	rjmp	.+60     	; 0xc136 <update_high_scores+0x6a>
    c0fa:	83 2f       	mov	r24, r19
    c0fc:	65 e0       	ldi	r22, 0x05	; 5
    c0fe:	0e 94 93 67 	call	0xcf26	; 0xcf26 <__divmodqi4>
    c102:	92 30       	cpi	r25, 0x02	; 2
    c104:	c1 f0       	breq	.+48     	; 0xc136 <update_high_scores+0x6a>
		{
			SFX_NAVIGATE;
    c106:	41 e0       	ldi	r20, 0x01	; 1
    c108:	6f ef       	ldi	r22, 0xFF	; 255
    c10a:	82 e0       	ldi	r24, 0x02	; 2
    c10c:	0e 94 a4 3d 	call	0x7b48	; 0x7b48 <TriggerFx>
			game.high_score_index++;
    c110:	80 91 b4 0d 	lds	r24, 0x0DB4
    c114:	8f 5f       	subi	r24, 0xFF	; 255
    c116:	80 93 b4 0d 	sts	0x0DB4, r24
			LBMoveSprite(2, extendedSprites[2].x+8, extendedSprites[2].y, 1, 1);
    c11a:	60 91 b3 0f 	lds	r22, 0x0FB3
    c11e:	68 5f       	subi	r22, 0xF8	; 248
    c120:	01 e0       	ldi	r16, 0x01	; 1
    c122:	21 e0       	ldi	r18, 0x01	; 1
    c124:	40 91 b4 0f 	lds	r20, 0x0FB4
    c128:	82 e0       	ldi	r24, 0x02	; 2
    c12a:	0e 94 16 4b 	call	0x962c	; 0x962c <LBMoveSprite>
			LBMoveSprite(3, extendedSprites[3].x+8, extendedSprites[3].y, 1, 1);
    c12e:	60 91 b7 0f 	lds	r22, 0x0FB7
    c132:	68 5f       	subi	r22, 0xF8	; 248
    c134:	1f c0       	rjmp	.+62     	; 0xc174 <update_high_scores+0xa8>
		}
		else if (game.joypadState.pressed & BTN_LEFT && game.high_score_index % 5 != 0)
    c136:	26 ff       	sbrs	r18, 6
    c138:	24 c0       	rjmp	.+72     	; 0xc182 <update_high_scores+0xb6>
    c13a:	83 2f       	mov	r24, r19
    c13c:	65 e0       	ldi	r22, 0x05	; 5
    c13e:	0e 94 93 67 	call	0xcf26	; 0xcf26 <__divmodqi4>
    c142:	99 23       	and	r25, r25
    c144:	f1 f0       	breq	.+60     	; 0xc182 <update_high_scores+0xb6>
		{
			SFX_NAVIGATE;
    c146:	41 e0       	ldi	r20, 0x01	; 1
    c148:	6f ef       	ldi	r22, 0xFF	; 255
    c14a:	82 e0       	ldi	r24, 0x02	; 2
    c14c:	0e 94 a4 3d 	call	0x7b48	; 0x7b48 <TriggerFx>
			game.high_score_index--;
    c150:	80 91 b4 0d 	lds	r24, 0x0DB4
    c154:	81 50       	subi	r24, 0x01	; 1
    c156:	80 93 b4 0d 	sts	0x0DB4, r24
			LBMoveSprite(2, extendedSprites[2].x-8, extendedSprites[2].y, 1, 1);
    c15a:	60 91 b3 0f 	lds	r22, 0x0FB3
    c15e:	68 50       	subi	r22, 0x08	; 8
    c160:	01 e0       	ldi	r16, 0x01	; 1
    c162:	21 e0       	ldi	r18, 0x01	; 1
    c164:	40 91 b4 0f 	lds	r20, 0x0FB4
    c168:	82 e0       	ldi	r24, 0x02	; 2
    c16a:	0e 94 16 4b 	call	0x962c	; 0x962c <LBMoveSprite>
			LBMoveSprite(3, extendedSprites[3].x-8, extendedSprites[3].y, 1, 1);
    c16e:	60 91 b7 0f 	lds	r22, 0x0FB7
    c172:	68 50       	subi	r22, 0x08	; 8
    c174:	21 e0       	ldi	r18, 0x01	; 1
    c176:	40 91 b8 0f 	lds	r20, 0x0FB8
    c17a:	83 e0       	ldi	r24, 0x03	; 3
    c17c:	0e 94 16 4b 	call	0x962c	; 0x962c <LBMoveSprite>
    c180:	5a c0       	rjmp	.+180    	; 0xc236 <update_high_scores+0x16a>
		}
		else if (game.joypadState.pressed & BTN_UP)
    c182:	24 ff       	sbrs	r18, 4
    c184:	13 c0       	rjmp	.+38     	; 0xc1ac <update_high_scores+0xe0>
		{
			SFX_NAVIGATE;
    c186:	41 e0       	ldi	r20, 0x01	; 1
    c188:	6f ef       	ldi	r22, 0xFF	; 255
    c18a:	82 e0       	ldi	r24, 0x02	; 2
    c18c:	0e 94 a4 3d 	call	0x7b48	; 0x7b48 <TriggerFx>
			scores.data[game.high_score_index] = scores.data[game.high_score_index]-1;
    c190:	80 91 b4 0d 	lds	r24, 0x0DB4
    c194:	e8 2f       	mov	r30, r24
    c196:	ff 27       	eor	r31, r31
    c198:	e7 fd       	sbrc	r30, 7
    c19a:	f0 95       	com	r31
    c19c:	ea 57       	subi	r30, 0x7A	; 122
    c19e:	f2 4f       	sbci	r31, 0xF2	; 242
    c1a0:	92 81       	ldd	r25, Z+2	; 0x02
    c1a2:	91 50       	subi	r25, 0x01	; 1
			if (scores.data[game.high_score_index] < 'A') scores.data[game.high_score_index] = 'A';
    c1a4:	91 34       	cpi	r25, 0x41	; 65
    c1a6:	b0 f4       	brcc	.+44     	; 0xc1d4 <update_high_scores+0x108>
    c1a8:	91 e4       	ldi	r25, 0x41	; 65
    c1aa:	14 c0       	rjmp	.+40     	; 0xc1d4 <update_high_scores+0x108>
			LBPrintChar(11+(game.high_score_index % 5), 7+(game.high_score_index/5)*2, scores.data[game.high_score_index]);
		}
		else if (game.joypadState.pressed & BTN_DOWN)
    c1ac:	25 ff       	sbrs	r18, 5
    c1ae:	1f c0       	rjmp	.+62     	; 0xc1ee <update_high_scores+0x122>
		{
			SFX_NAVIGATE;
    c1b0:	41 e0       	ldi	r20, 0x01	; 1
    c1b2:	6f ef       	ldi	r22, 0xFF	; 255
    c1b4:	82 e0       	ldi	r24, 0x02	; 2
    c1b6:	0e 94 a4 3d 	call	0x7b48	; 0x7b48 <TriggerFx>
			scores.data[game.high_score_index] = scores.data[game.high_score_index]+1;
    c1ba:	80 91 b4 0d 	lds	r24, 0x0DB4
    c1be:	e8 2f       	mov	r30, r24
    c1c0:	ff 27       	eor	r31, r31
    c1c2:	e7 fd       	sbrc	r30, 7
    c1c4:	f0 95       	com	r31
    c1c6:	ea 57       	subi	r30, 0x7A	; 122
    c1c8:	f2 4f       	sbci	r31, 0xF2	; 242
    c1ca:	92 81       	ldd	r25, Z+2	; 0x02
    c1cc:	9f 5f       	subi	r25, 0xFF	; 255
			if (scores.data[game.high_score_index] > 'Z') scores.data[game.high_score_index] = 'Z';
    c1ce:	9b 35       	cpi	r25, 0x5B	; 91
    c1d0:	08 f0       	brcs	.+2      	; 0xc1d4 <update_high_scores+0x108>
    c1d2:	9a e5       	ldi	r25, 0x5A	; 90
    c1d4:	92 83       	std	Z+2, r25	; 0x02
			LBPrintChar(11+(game.high_score_index % 5), 7+(game.high_score_index/5)*2, scores.data[game.high_score_index]);
    c1d6:	65 e0       	ldi	r22, 0x05	; 5
    c1d8:	0e 94 93 67 	call	0xcf26	; 0xcf26 <__divmodqi4>
    c1dc:	68 2f       	mov	r22, r24
    c1de:	66 0f       	add	r22, r22
    c1e0:	69 5f       	subi	r22, 0xF9	; 249
    c1e2:	42 81       	ldd	r20, Z+2	; 0x02
    c1e4:	8b e0       	ldi	r24, 0x0B	; 11
    c1e6:	89 0f       	add	r24, r25
			game.high_score_index = -1;
			game.score = 0;
			save_eeprom(&scores);
		}
	}
}
    c1e8:	0f 91       	pop	r16
		else if (game.joypadState.pressed & BTN_DOWN)
		{
			SFX_NAVIGATE;
			scores.data[game.high_score_index] = scores.data[game.high_score_index]+1;
			if (scores.data[game.high_score_index] > 'Z') scores.data[game.high_score_index] = 'Z';
			LBPrintChar(11+(game.high_score_index % 5), 7+(game.high_score_index/5)*2, scores.data[game.high_score_index]);
    c1ea:	0c 94 d3 49 	jmp	0x93a6	; 0x93a6 <LBPrintChar>
		}
		else if (select_pressed(&game.joypadState))
    c1ee:	8a e9       	ldi	r24, 0x9A	; 154
    c1f0:	9f e0       	ldi	r25, 0x0F	; 15
    c1f2:	0e 94 3a 5d 	call	0xba74	; 0xba74 <select_pressed>
    c1f6:	88 23       	and	r24, r24
    c1f8:	f1 f0       	breq	.+60     	; 0xc236 <update_high_scores+0x16a>
		{
			SFX_NAVIGATE;
    c1fa:	41 e0       	ldi	r20, 0x01	; 1
    c1fc:	6f ef       	ldi	r22, 0xFF	; 255
    c1fe:	82 e0       	ldi	r24, 0x02	; 2
    c200:	0e 94 a4 3d 	call	0x7b48	; 0x7b48 <TriggerFx>
			LBMoveSprite(2, OFF_SCREEN, 0, 1, 1);
    c204:	01 e0       	ldi	r16, 0x01	; 1
    c206:	21 e0       	ldi	r18, 0x01	; 1
    c208:	40 e0       	ldi	r20, 0x00	; 0
    c20a:	60 ee       	ldi	r22, 0xE0	; 224
    c20c:	82 e0       	ldi	r24, 0x02	; 2
    c20e:	0e 94 16 4b 	call	0x962c	; 0x962c <LBMoveSprite>
			LBMoveSprite(3, OFF_SCREEN, 0, 1, 1);
    c212:	21 e0       	ldi	r18, 0x01	; 1
    c214:	40 e0       	ldi	r20, 0x00	; 0
    c216:	60 ee       	ldi	r22, 0xE0	; 224
    c218:	83 e0       	ldi	r24, 0x03	; 3
    c21a:	0e 94 16 4b 	call	0x962c	; 0x962c <LBMoveSprite>
			game.high_score_index = -1;
    c21e:	8f ef       	ldi	r24, 0xFF	; 255
    c220:	80 93 b4 0d 	sts	0x0DB4, r24
			game.score = 0;
    c224:	10 92 af 0d 	sts	0x0DAF, r1
    c228:	10 92 ae 0d 	sts	0x0DAE, r1
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    c22c:	86 e8       	ldi	r24, 0x86	; 134
    c22e:	9d e0       	ldi	r25, 0x0D	; 13
			game.high_score_index = -1;
			game.score = 0;
			save_eeprom(&scores);
		}
	}
}
    c230:	0f 91       	pop	r16
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    c232:	0c 94 40 3b 	jmp	0x7680	; 0x7680 <EepromWriteBlock>
			game.high_score_index = -1;
			game.score = 0;
			save_eeprom(&scores);
		}
	}
}
    c236:	0f 91       	pop	r16
    c238:	08 95       	ret

0000c23a <tally_score>:
		}
	}
}

void tally_score(char* title, u16 bonus)
{
    c23a:	5f 92       	push	r5
    c23c:	6f 92       	push	r6
    c23e:	7f 92       	push	r7
    c240:	8f 92       	push	r8
    c242:	9f 92       	push	r9
    c244:	af 92       	push	r10
    c246:	bf 92       	push	r11
    c248:	cf 92       	push	r12
    c24a:	df 92       	push	r13
    c24c:	ef 92       	push	r14
    c24e:	ff 92       	push	r15
    c250:	0f 93       	push	r16
    c252:	1f 93       	push	r17
    c254:	cf 93       	push	r28
    c256:	df 93       	push	r29
    c258:	6c 01       	movw	r12, r24
    c25a:	7b 01       	movw	r14, r22
	u8 x = Screen.scrollX / 8;
    c25c:	c0 91 b2 0c 	lds	r28, 0x0CB2
    c260:	c6 95       	lsr	r28
    c262:	c6 95       	lsr	r28
    c264:	c6 95       	lsr	r28
	u8 y = Screen.scrollY / 8;
    c266:	00 91 b3 0c 	lds	r16, 0x0CB3
    c26a:	06 95       	lsr	r16
    c26c:	06 95       	lsr	r16
    c26e:	06 95       	lsr	r16
	u16 counter = 0;
	
	//hide_sprites(0, MAX_EXTENDED_SPRITES);
	//LBRotateSprites();
	
	StopSong();
    c270:	0e 94 e2 3c 	call	0x79c4	; 0x79c4 <StopSong>
	DrawMap2((x+8)%32, (y+6)%30, map_canvas);
    c274:	10 e0       	ldi	r17, 0x00	; 0
    c276:	d0 e0       	ldi	r29, 0x00	; 0
    c278:	c8 01       	movw	r24, r16
    c27a:	06 96       	adiw	r24, 0x06	; 6
    c27c:	2e e1       	ldi	r18, 0x1E	; 30
    c27e:	a2 2e       	mov	r10, r18
    c280:	b1 2c       	mov	r11, r1
    c282:	b5 01       	movw	r22, r10
    c284:	0e 94 b5 67 	call	0xcf6a	; 0xcf6a <__divmodhi4>
    c288:	9e 01       	movw	r18, r28
    c28a:	28 5f       	subi	r18, 0xF8	; 248
    c28c:	3f 4f       	sbci	r19, 0xFF	; 255
    c28e:	48 ee       	ldi	r20, 0xE8	; 232
    c290:	57 e6       	ldi	r21, 0x67	; 103
    c292:	68 2f       	mov	r22, r24
    c294:	82 2f       	mov	r24, r18
    c296:	8f 71       	andi	r24, 0x1F	; 31
    c298:	0e 94 5c 48 	call	0x90b8	; 0x90b8 <DrawMap>
	LBPrint((x+10)%32, (y+7)%30, title);
    c29c:	c8 01       	movw	r24, r16
    c29e:	07 96       	adiw	r24, 0x07	; 7
    c2a0:	b5 01       	movw	r22, r10
    c2a2:	0e 94 b5 67 	call	0xcf6a	; 0xcf6a <__divmodhi4>
    c2a6:	9e 01       	movw	r18, r28
    c2a8:	26 5f       	subi	r18, 0xF6	; 246
    c2aa:	3f 4f       	sbci	r19, 0xFF	; 255
    c2ac:	a6 01       	movw	r20, r12
    c2ae:	68 2f       	mov	r22, r24
    c2b0:	82 2f       	mov	r24, r18
    c2b2:	8f 71       	andi	r24, 0x1F	; 31
    c2b4:	0e 94 f3 49 	call	0x93e6	; 0x93e6 <LBPrint>
	LBPrint((x+9)%32, (y+9)%30, (char*) strTally);
    c2b8:	c8 01       	movw	r24, r16
    c2ba:	09 96       	adiw	r24, 0x09	; 9
    c2bc:	b5 01       	movw	r22, r10
    c2be:	0e 94 b5 67 	call	0xcf6a	; 0xcf6a <__divmodhi4>
    c2c2:	68 2e       	mov	r6, r24
    c2c4:	98 2e       	mov	r9, r24
    c2c6:	6e 01       	movw	r12, r28
    c2c8:	29 e0       	ldi	r18, 0x09	; 9
    c2ca:	c2 0e       	add	r12, r18
    c2cc:	d1 1c       	adc	r13, r1
    c2ce:	8f e1       	ldi	r24, 0x1F	; 31
    c2d0:	c8 22       	and	r12, r24
    c2d2:	dd 24       	eor	r13, r13
    c2d4:	40 e1       	ldi	r20, 0x10	; 16
    c2d6:	5b e0       	ldi	r21, 0x0B	; 11
    c2d8:	66 2d       	mov	r22, r6
    c2da:	8c 2d       	mov	r24, r12
    c2dc:	0e 94 f3 49 	call	0x93e6	; 0x93e6 <LBPrint>
	LBPrint((x+9)%32, (y+11)%30, (char*) strScore);
    c2e0:	c8 01       	movw	r24, r16
    c2e2:	0b 96       	adiw	r24, 0x0b	; 11
    c2e4:	b5 01       	movw	r22, r10
    c2e6:	0e 94 b5 67 	call	0xcf6a	; 0xcf6a <__divmodhi4>
    c2ea:	58 2e       	mov	r5, r24
    c2ec:	88 2e       	mov	r8, r24
    c2ee:	45 e6       	ldi	r20, 0x65	; 101
    c2f0:	5b e0       	ldi	r21, 0x0B	; 11
    c2f2:	68 2f       	mov	r22, r24
    c2f4:	8c 2d       	mov	r24, r12
    c2f6:	0e 94 f3 49 	call	0x93e6	; 0x93e6 <LBPrint>
	LBPrint((x+9)%32, (y+12)%30, (char*) strTime);
    c2fa:	c8 01       	movw	r24, r16
    c2fc:	0c 96       	adiw	r24, 0x0c	; 12
    c2fe:	b5 01       	movw	r22, r10
    c300:	0e 94 b5 67 	call	0xcf6a	; 0xcf6a <__divmodhi4>
    c304:	78 2e       	mov	r7, r24
    c306:	d8 2e       	mov	r13, r24
    c308:	40 e5       	ldi	r20, 0x50	; 80
    c30a:	5b e0       	ldi	r21, 0x0B	; 11
    c30c:	68 2f       	mov	r22, r24
    c30e:	8c 2d       	mov	r24, r12
    c310:	0e 94 f3 49 	call	0x93e6	; 0x93e6 <LBPrint>
	LBPrint((x+9)%32, (y+13)%30, (char*) strLevelBonus);
    c314:	c8 01       	movw	r24, r16
    c316:	0d 96       	adiw	r24, 0x0d	; 13
    c318:	b5 01       	movw	r22, r10
    c31a:	0e 94 b5 67 	call	0xcf6a	; 0xcf6a <__divmodhi4>
    c31e:	18 2f       	mov	r17, r24
    c320:	b8 2e       	mov	r11, r24
    c322:	40 e2       	ldi	r20, 0x20	; 32
    c324:	5b e0       	ldi	r21, 0x0B	; 11
    c326:	68 2f       	mov	r22, r24
    c328:	8c 2d       	mov	r24, r12
    c32a:	0e 94 f3 49 	call	0x93e6	; 0x93e6 <LBPrint>
	
	LBPrintInt((x+20)%32, (y+9)%30, 0, true);
    c32e:	64 96       	adiw	r28, 0x14	; 20
    c330:	cf 71       	andi	r28, 0x1F	; 31
    c332:	dd 27       	eor	r29, r29
    c334:	cc 2e       	mov	r12, r28
    c336:	21 e0       	ldi	r18, 0x01	; 1
    c338:	40 e0       	ldi	r20, 0x00	; 0
    c33a:	50 e0       	ldi	r21, 0x00	; 0
    c33c:	66 2d       	mov	r22, r6
    c33e:	8c 2f       	mov	r24, r28
    c340:	0e 94 40 4a 	call	0x9480	; 0x9480 <LBPrintInt>
	LBPrintInt((x+20)%32, (y+11)%30, game.score, true);
    c344:	40 91 ae 0d 	lds	r20, 0x0DAE
    c348:	50 91 af 0d 	lds	r21, 0x0DAF
    c34c:	21 e0       	ldi	r18, 0x01	; 1
    c34e:	65 2d       	mov	r22, r5
    c350:	8c 2f       	mov	r24, r28
    c352:	0e 94 40 4a 	call	0x9480	; 0x9480 <LBPrintInt>
	LBPrintInt((x+20)%32, (y+12)%30, game.time, true);
    c356:	40 91 b0 0d 	lds	r20, 0x0DB0
    c35a:	50 91 b1 0d 	lds	r21, 0x0DB1
    c35e:	21 e0       	ldi	r18, 0x01	; 1
    c360:	67 2d       	mov	r22, r7
    c362:	8c 2f       	mov	r24, r28
    c364:	0e 94 40 4a 	call	0x9480	; 0x9480 <LBPrintInt>
	LBPrintInt((x+20)%32, (y+13)%30, bonus, true);
    c368:	21 e0       	ldi	r18, 0x01	; 1
    c36a:	a7 01       	movw	r20, r14
    c36c:	61 2f       	mov	r22, r17
    c36e:	8c 2f       	mov	r24, r28
    c370:	0e 94 40 4a 	call	0x9480	; 0x9480 <LBPrintInt>
	
	LBWaitSeconds(2);
    c374:	82 e0       	ldi	r24, 0x02	; 2
    c376:	0e 94 b5 4a 	call	0x956a	; 0x956a <LBWaitSeconds>
	
	// Tally Score
	counter = game.score;
    c37a:	c0 91 ae 0d 	lds	r28, 0x0DAE
    c37e:	d0 91 af 0d 	lds	r29, 0x0DAF

void tally_score(char* title, u16 bonus)
{
	u8 x = Screen.scrollX / 8;
	u8 y = Screen.scrollY / 8;
	u16 tally = 0;
    c382:	00 e0       	ldi	r16, 0x00	; 0
    c384:	10 e0       	ldi	r17, 0x00	; 0
	
	LBWaitSeconds(2);
	
	// Tally Score
	counter = game.score;
	while (counter > 0)
    c386:	0c 17       	cp	r16, r28
    c388:	1d 07       	cpc	r17, r29
    c38a:	f9 f0       	breq	.+62     	; 0xc3ca <tally_score+0x190>
	{
		WaitVsync(1);
    c38c:	81 e0       	ldi	r24, 0x01	; 1
    c38e:	90 e0       	ldi	r25, 0x00	; 0
    c390:	0e 94 c5 48 	call	0x918a	; 0x918a <WaitVsync>
		SFX_HIT;
    c394:	41 e0       	ldi	r20, 0x01	; 1
    c396:	6f ef       	ldi	r22, 0xFF	; 255
    c398:	84 e0       	ldi	r24, 0x04	; 4
    c39a:	0e 94 a4 3d 	call	0x7b48	; 0x7b48 <TriggerFx>
		tally += 1;
    c39e:	0f 5f       	subi	r16, 0xFF	; 255
    c3a0:	1f 4f       	sbci	r17, 0xFF	; 255
		counter -= 1;
    c3a2:	3e 01       	movw	r6, r28
    c3a4:	60 1a       	sub	r6, r16
    c3a6:	71 0a       	sbc	r7, r17
		LBPrintInt((x+20)%32, (y+9)%30, tally, true);
    c3a8:	21 e0       	ldi	r18, 0x01	; 1
    c3aa:	a8 01       	movw	r20, r16
    c3ac:	69 2d       	mov	r22, r9
    c3ae:	8c 2d       	mov	r24, r12
    c3b0:	0e 94 40 4a 	call	0x9480	; 0x9480 <LBPrintInt>
		LBPrintInt((x+20)%32, (y+11)%30, counter, true);
    c3b4:	21 e0       	ldi	r18, 0x01	; 1
    c3b6:	a3 01       	movw	r20, r6
    c3b8:	68 2d       	mov	r22, r8
    c3ba:	8c 2d       	mov	r24, r12
    c3bc:	0e 94 40 4a 	call	0x9480	; 0x9480 <LBPrintInt>
		WaitUs(TALLY_DELAY);
    c3c0:	8c ed       	ldi	r24, 0xDC	; 220
    c3c2:	95 e0       	ldi	r25, 0x05	; 5
    c3c4:	0e 94 fb 39 	call	0x73f6	; 0x73f6 <WaitUs>
    c3c8:	de cf       	rjmp	.-68     	; 0xc386 <tally_score+0x14c>
	}
	
	// Tally Time
	counter = game.time;
    c3ca:	00 91 b0 0d 	lds	r16, 0x0DB0
    c3ce:	10 91 b1 0d 	lds	r17, 0x0DB1
	while (counter > 0)
    c3d2:	01 15       	cp	r16, r1
    c3d4:	11 05       	cpc	r17, r1
    c3d6:	29 f1       	breq	.+74     	; 0xc422 <tally_score+0x1e8>
	{
		WaitVsync(1);
    c3d8:	81 e0       	ldi	r24, 0x01	; 1
    c3da:	90 e0       	ldi	r25, 0x00	; 0
    c3dc:	0e 94 c5 48 	call	0x918a	; 0x918a <WaitVsync>
		SFX_HIT;
    c3e0:	41 e0       	ldi	r20, 0x01	; 1
    c3e2:	6f ef       	ldi	r22, 0xFF	; 255
    c3e4:	84 e0       	ldi	r24, 0x04	; 4
    c3e6:	0e 94 a4 3d 	call	0x7b48	; 0x7b48 <TriggerFx>
		tally -= 1;
		if (tally == 0 || tally == 65535) tally = 0;
    c3ea:	ce 01       	movw	r24, r28
    c3ec:	02 97       	sbiw	r24, 0x02	; 2
    c3ee:	8e 3f       	cpi	r24, 0xFE	; 254
    c3f0:	9f 4f       	sbci	r25, 0xFF	; 255
    c3f2:	10 f4       	brcc	.+4      	; 0xc3f8 <tally_score+0x1be>
	counter = game.time;
	while (counter > 0)
	{
		WaitVsync(1);
		SFX_HIT;
		tally -= 1;
    c3f4:	21 97       	sbiw	r28, 0x01	; 1
    c3f6:	02 c0       	rjmp	.+4      	; 0xc3fc <tally_score+0x1c2>
		if (tally == 0 || tally == 65535) tally = 0;
    c3f8:	c0 e0       	ldi	r28, 0x00	; 0
    c3fa:	d0 e0       	ldi	r29, 0x00	; 0
		counter -= 1;
    c3fc:	01 50       	subi	r16, 0x01	; 1
    c3fe:	11 09       	sbc	r17, r1
		LBPrintInt((x+20)%32, (y+9)%30, tally, true);
    c400:	21 e0       	ldi	r18, 0x01	; 1
    c402:	ae 01       	movw	r20, r28
    c404:	69 2d       	mov	r22, r9
    c406:	8c 2d       	mov	r24, r12
    c408:	0e 94 40 4a 	call	0x9480	; 0x9480 <LBPrintInt>
		LBPrintInt((x+20)%32, (y+12)%30, counter, true);
    c40c:	21 e0       	ldi	r18, 0x01	; 1
    c40e:	a8 01       	movw	r20, r16
    c410:	6d 2d       	mov	r22, r13
    c412:	8c 2d       	mov	r24, r12
    c414:	0e 94 40 4a 	call	0x9480	; 0x9480 <LBPrintInt>
		WaitUs(TALLY_DELAY);
    c418:	8c ed       	ldi	r24, 0xDC	; 220
    c41a:	95 e0       	ldi	r25, 0x05	; 5
    c41c:	0e 94 fb 39 	call	0x73f6	; 0x73f6 <WaitUs>
    c420:	d8 cf       	rjmp	.-80     	; 0xc3d2 <tally_score+0x198>
    c422:	3e 01       	movw	r6, r28
		WaitUs(TALLY_DELAY);
	}
	
	// Tally Time
	counter = game.time;
	while (counter > 0)
    c424:	87 01       	movw	r16, r14
		WaitUs(TALLY_DELAY);
	}
	
	// Tally Level Bonus
	counter = bonus;
	while (counter > 0)
    c426:	01 15       	cp	r16, r1
    c428:	11 05       	cpc	r17, r1
    c42a:	e9 f0       	breq	.+58     	; 0xc466 <tally_score+0x22c>
	{
		WaitVsync(1);
    c42c:	81 e0       	ldi	r24, 0x01	; 1
    c42e:	90 e0       	ldi	r25, 0x00	; 0
    c430:	0e 94 c5 48 	call	0x918a	; 0x918a <WaitVsync>
		SFX_HIT;
    c434:	41 e0       	ldi	r20, 0x01	; 1
    c436:	6f ef       	ldi	r22, 0xFF	; 255
    c438:	84 e0       	ldi	r24, 0x04	; 4
    c43a:	0e 94 a4 3d 	call	0x7b48	; 0x7b48 <TriggerFx>
		tally += 1;
    c43e:	21 96       	adiw	r28, 0x01	; 1
		counter -= 1;
    c440:	01 50       	subi	r16, 0x01	; 1
    c442:	11 09       	sbc	r17, r1
		LBPrintInt((x+20)%32, (y+9)%30, tally, true);
    c444:	21 e0       	ldi	r18, 0x01	; 1
    c446:	ae 01       	movw	r20, r28
    c448:	69 2d       	mov	r22, r9
    c44a:	8c 2d       	mov	r24, r12
    c44c:	0e 94 40 4a 	call	0x9480	; 0x9480 <LBPrintInt>
		LBPrintInt((x+20)%32, (y+13)%30, counter, true);
    c450:	21 e0       	ldi	r18, 0x01	; 1
    c452:	a8 01       	movw	r20, r16
    c454:	6b 2d       	mov	r22, r11
    c456:	8c 2d       	mov	r24, r12
    c458:	0e 94 40 4a 	call	0x9480	; 0x9480 <LBPrintInt>
		WaitUs(TALLY_DELAY);
    c45c:	8c ed       	ldi	r24, 0xDC	; 220
    c45e:	95 e0       	ldi	r25, 0x05	; 5
    c460:	0e 94 fb 39 	call	0x73f6	; 0x73f6 <WaitUs>
    c464:	e0 cf       	rjmp	.-64     	; 0xc426 <tally_score+0x1ec>
    c466:	e6 0c       	add	r14, r6
    c468:	f7 1c       	adc	r15, r7
	}
	
	game.score = tally;
    c46a:	f0 92 af 0d 	sts	0x0DAF, r15
    c46e:	e0 92 ae 0d 	sts	0x0DAE, r14
	game.time = 0;
    c472:	10 92 b1 0d 	sts	0x0DB1, r1
    c476:	10 92 b0 0d 	sts	0x0DB0, r1
	LBWaitSeconds(2);
    c47a:	82 e0       	ldi	r24, 0x02	; 2
    c47c:	0e 94 b5 4a 	call	0x956a	; 0x956a <LBWaitSeconds>
	render_camera_view();
}
    c480:	df 91       	pop	r29
    c482:	cf 91       	pop	r28
    c484:	1f 91       	pop	r17
    c486:	0f 91       	pop	r16
    c488:	ff 90       	pop	r15
    c48a:	ef 90       	pop	r14
    c48c:	df 90       	pop	r13
    c48e:	cf 90       	pop	r12
    c490:	bf 90       	pop	r11
    c492:	af 90       	pop	r10
    c494:	9f 90       	pop	r9
    c496:	8f 90       	pop	r8
    c498:	7f 90       	pop	r7
    c49a:	6f 90       	pop	r6
    c49c:	5f 90       	pop	r5
	}
	
	game.score = tally;
	game.time = 0;
	LBWaitSeconds(2);
	render_camera_view();
    c49e:	0c 94 32 4e 	jmp	0x9c64	; 0x9c64 <render_camera_view>

0000c4a2 <handle_player_death>:
	}
}

void handle_player_death()
{
	game.lives--;
    c4a2:	80 91 b5 0d 	lds	r24, 0x0DB5
    c4a6:	81 50       	subi	r24, 0x01	; 1
    c4a8:	80 93 b5 0d 	sts	0x0DB5, r24
	clear_sprites(0, 6);
    c4ac:	66 e0       	ldi	r22, 0x06	; 6
    c4ae:	80 e0       	ldi	r24, 0x00	; 0
    c4b0:	0e 94 0e 5c 	call	0xb81c	; 0xb81c <clear_sprites>
	LBRotateSprites();
    c4b4:	0e 94 54 4b 	call	0x96a8	; 0x96a8 <LBRotateSprites>
	if (game.lives == 0)
    c4b8:	80 91 b5 0d 	lds	r24, 0x0DB5
    c4bc:	81 11       	cpse	r24, r1
    c4be:	08 c0       	rjmp	.+16     	; 0xc4d0 <handle_player_death+0x2e>
	{
		tally_score((char*) strGameOver, 0);
    c4c0:	60 e0       	ldi	r22, 0x00	; 0
    c4c2:	70 e0       	ldi	r23, 0x00	; 0
    c4c4:	86 e1       	ldi	r24, 0x16	; 22
    c4c6:	9b e0       	ldi	r25, 0x0B	; 11
    c4c8:	0e 94 1d 61 	call	0xc23a	; 0xc23a <tally_score>
		exit_game();
    c4cc:	0c 94 11 60 	jmp	0xc022	; 0xc022 <exit_game>
		return;
	}
	FadeOut(FRAMES_PER_FADE, true);
    c4d0:	61 e0       	ldi	r22, 0x01	; 1
    c4d2:	81 e0       	ldi	r24, 0x01	; 1
    c4d4:	0e 94 2d 49 	call	0x925a	; 0x925a <FadeOut>
	ClearVram();
    c4d8:	0e 94 c5 39 	call	0x738a	; 0x738a <ClearVram>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    c4dc:	64 e1       	ldi	r22, 0x14	; 20
    c4de:	80 e0       	ldi	r24, 0x00	; 0
    c4e0:	0e 94 0e 5c 	call	0xb81c	; 0xb81c <clear_sprites>
	LBRotateSprites();
    c4e4:	0e 94 54 4b 	call	0x96a8	; 0x96a8 <LBRotateSprites>
	FadeIn(FRAMES_PER_FADE, false);
    c4e8:	60 e0       	ldi	r22, 0x00	; 0
    c4ea:	81 e0       	ldi	r24, 0x01	; 1
    c4ec:	0e 94 21 49 	call	0x9242	; 0x9242 <FadeIn>
	init_player_state();
    c4f0:	0e 94 c1 4b 	call	0x9782	; 0x9782 <init_player_state>
	init_enemy_state();
    c4f4:	0e 94 ad 4b 	call	0x975a	; 0x975a <init_enemy_state>
	load_level(game.current_level_index, false);
    c4f8:	60 e0       	ldi	r22, 0x00	; 0
    c4fa:	80 91 b7 0d 	lds	r24, 0x0DB7
    c4fe:	0c 94 40 5c 	jmp	0xb880	; 0xb880 <load_level>

0000c502 <update_player>:
}

void update_player()
{
    c502:	cf 92       	push	r12
    c504:	df 92       	push	r13
    c506:	ef 92       	push	r14
    c508:	ff 92       	push	r15
    c50a:	0f 93       	push	r16
    c50c:	1f 93       	push	r17
    c50e:	cf 93       	push	r28
    c510:	df 93       	push	r29
    c512:	1f 92       	push	r1
    c514:	cd b7       	in	r28, 0x3d	; 61
    c516:	de b7       	in	r29, 0x3e	; 62
	
	if (game.player.flags & EXPLODING)
    c518:	10 91 d4 0d 	lds	r17, 0x0DD4
    c51c:	14 ff       	sbrs	r17, 4
    c51e:	19 c0       	rjmp	.+50     	; 0xc552 <update_player+0x50>
	{
		if (map_explosion(&game.player.flags, &game.player.expl, PLAYER_SLOT, game.player.width, game.player.height))
    c520:	00 91 d8 0d 	lds	r16, 0x0DD8
    c524:	20 91 d7 0d 	lds	r18, 0x0DD7
    c528:	40 e0       	ldi	r20, 0x00	; 0
    c52a:	68 e4       	ldi	r22, 0x48	; 72
    c52c:	7e e0       	ldi	r23, 0x0E	; 14
    c52e:	84 ed       	ldi	r24, 0xD4	; 212
    c530:	9d e0       	ldi	r25, 0x0D	; 13
    c532:	0e 94 0e 57 	call	0xae1c	; 0xae1c <map_explosion>
    c536:	88 23       	and	r24, r24
    c538:	09 f4       	brne	.+2      	; 0xc53c <update_player+0x3a>
    c53a:	d8 c2       	rjmp	.+1456   	; 0xcaec <update_player+0x5ea>
		{
			game.player.direction = D_RIGHT;
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.prone), 0);
		}
	}
}
    c53c:	0f 90       	pop	r0
    c53e:	df 91       	pop	r29
    c540:	cf 91       	pop	r28
    c542:	1f 91       	pop	r17
    c544:	0f 91       	pop	r16
    c546:	ff 90       	pop	r15
    c548:	ef 90       	pop	r14
    c54a:	df 90       	pop	r13
    c54c:	cf 90       	pop	r12
	
	if (game.player.flags & EXPLODING)
	{
		if (map_explosion(&game.player.flags, &game.player.expl, PLAYER_SLOT, game.player.width, game.player.height))
		{
			handle_player_death();
    c54e:	0c 94 51 62 	jmp	0xc4a2	; 0xc4a2 <handle_player_death>
		}
	}
	else if (is_space())
    c552:	0e 94 93 4b 	call	0x9726	; 0x9726 <is_space>
    c556:	88 23       	and	r24, r24
    c558:	09 f4       	brne	.+2      	; 0xc55c <update_player+0x5a>
    c55a:	ab c0       	rjmp	.+342    	; 0xc6b2 <update_player+0x1b0>
	{
		game.player.shared.vy = 0;
    c55c:	10 92 c4 0d 	sts	0x0DC4, r1
    c560:	10 92 c5 0d 	sts	0x0DC5, r1
    c564:	10 92 c6 0d 	sts	0x0DC6, r1
    c568:	10 92 c7 0d 	sts	0x0DC7, r1
		game.player.shared.vx = SPACE_SHIP_SPEED;
    c56c:	8c e3       	ldi	r24, 0x3C	; 60
    c56e:	90 e0       	ldi	r25, 0x00	; 0
    c570:	90 93 d1 0d 	sts	0x0DD1, r25
    c574:	80 93 d0 0d 	sts	0x0DD0, r24
		
		if ((game.joypadState.held & BTN_DOWN) && (game.player.shared.y/8 + 1 < game.level_height))
    c578:	10 91 9e 0f 	lds	r17, 0x0F9E
    c57c:	15 ff       	sbrs	r17, 5
    c57e:	32 c0       	rjmp	.+100    	; 0xc5e4 <update_player+0xe2>
    c580:	20 e0       	ldi	r18, 0x00	; 0
    c582:	30 e0       	ldi	r19, 0x00	; 0
    c584:	40 e0       	ldi	r20, 0x00	; 0
    c586:	5e e3       	ldi	r21, 0x3E	; 62
    c588:	60 91 cc 0d 	lds	r22, 0x0DCC
    c58c:	70 91 cd 0d 	lds	r23, 0x0DCD
    c590:	80 91 ce 0d 	lds	r24, 0x0DCE
    c594:	90 91 cf 0d 	lds	r25, 0x0DCF
    c598:	0e 94 1a 69 	call	0xd234	; 0xd234 <__mulsf3>
    c59c:	20 e0       	ldi	r18, 0x00	; 0
    c59e:	30 e0       	ldi	r19, 0x00	; 0
    c5a0:	40 e8       	ldi	r20, 0x80	; 128
    c5a2:	5f e3       	ldi	r21, 0x3F	; 63
    c5a4:	0e 94 d0 67 	call	0xcfa0	; 0xcfa0 <__addsf3>
    c5a8:	6b 01       	movw	r12, r22
    c5aa:	7c 01       	movw	r14, r24
    c5ac:	80 91 b9 0d 	lds	r24, 0x0DB9
    c5b0:	68 2f       	mov	r22, r24
    c5b2:	70 e0       	ldi	r23, 0x00	; 0
    c5b4:	80 e0       	ldi	r24, 0x00	; 0
    c5b6:	90 e0       	ldi	r25, 0x00	; 0
    c5b8:	0e 94 66 68 	call	0xd0cc	; 0xd0cc <__floatsisf>
    c5bc:	9b 01       	movw	r18, r22
    c5be:	ac 01       	movw	r20, r24
    c5c0:	c7 01       	movw	r24, r14
    c5c2:	b6 01       	movw	r22, r12
    c5c4:	0e 94 34 68 	call	0xd068	; 0xd068 <__cmpsf2>
    c5c8:	87 ff       	sbrs	r24, 7
    c5ca:	0c c0       	rjmp	.+24     	; 0xc5e4 <update_player+0xe2>
		{
			game.player.shared.vy = SPACE_SHIP_SPEED;
    c5cc:	80 e0       	ldi	r24, 0x00	; 0
    c5ce:	90 e0       	ldi	r25, 0x00	; 0
    c5d0:	a0 e7       	ldi	r26, 0x70	; 112
    c5d2:	b2 e4       	ldi	r27, 0x42	; 66
    c5d4:	80 93 c4 0d 	sts	0x0DC4, r24
    c5d8:	90 93 c5 0d 	sts	0x0DC5, r25
    c5dc:	a0 93 c6 0d 	sts	0x0DC6, r26
    c5e0:	b0 93 c7 0d 	sts	0x0DC7, r27
		}
		if ((game.joypadState.held & BTN_RIGHT) && (game.player.shared.x + 24 < game.camera_x + CAMERA_WIDTH*8))
    c5e4:	17 ff       	sbrs	r17, 7
    c5e6:	29 c0       	rjmp	.+82     	; 0xc63a <update_player+0x138>
    c5e8:	20 e0       	ldi	r18, 0x00	; 0
    c5ea:	30 e0       	ldi	r19, 0x00	; 0
    c5ec:	40 ec       	ldi	r20, 0xC0	; 192
    c5ee:	51 e4       	ldi	r21, 0x41	; 65
    c5f0:	60 91 c8 0d 	lds	r22, 0x0DC8
    c5f4:	70 91 c9 0d 	lds	r23, 0x0DC9
    c5f8:	80 91 ca 0d 	lds	r24, 0x0DCA
    c5fc:	90 91 cb 0d 	lds	r25, 0x0DCB
    c600:	0e 94 d0 67 	call	0xcfa0	; 0xcfa0 <__addsf3>
    c604:	6b 01       	movw	r12, r22
    c606:	7c 01       	movw	r14, r24
    c608:	80 91 aa 0d 	lds	r24, 0x0DAA
    c60c:	90 91 ab 0d 	lds	r25, 0x0DAB
    c610:	80 52       	subi	r24, 0x20	; 32
    c612:	9f 4f       	sbci	r25, 0xFF	; 255
    c614:	bc 01       	movw	r22, r24
    c616:	80 e0       	ldi	r24, 0x00	; 0
    c618:	90 e0       	ldi	r25, 0x00	; 0
    c61a:	0e 94 64 68 	call	0xd0c8	; 0xd0c8 <__floatunsisf>
    c61e:	9b 01       	movw	r18, r22
    c620:	ac 01       	movw	r20, r24
    c622:	c7 01       	movw	r24, r14
    c624:	b6 01       	movw	r22, r12
    c626:	0e 94 34 68 	call	0xd068	; 0xd068 <__cmpsf2>
    c62a:	87 ff       	sbrs	r24, 7
    c62c:	06 c0       	rjmp	.+12     	; 0xc63a <update_player+0x138>
		{
			game.player.shared.vx = SPACE_SHIP_SPEED*2;
    c62e:	88 e7       	ldi	r24, 0x78	; 120
    c630:	90 e0       	ldi	r25, 0x00	; 0
    c632:	90 93 d1 0d 	sts	0x0DD1, r25
    c636:	80 93 d0 0d 	sts	0x0DD0, r24
		}
		if ((game.joypadState.held & BTN_LEFT) && (game.player.shared.x > game.camera_x))
    c63a:	16 ff       	sbrs	r17, 6
    c63c:	1a c0       	rjmp	.+52     	; 0xc672 <update_player+0x170>
    c63e:	60 91 aa 0d 	lds	r22, 0x0DAA
    c642:	70 91 ab 0d 	lds	r23, 0x0DAB
    c646:	80 e0       	ldi	r24, 0x00	; 0
    c648:	90 e0       	ldi	r25, 0x00	; 0
    c64a:	0e 94 64 68 	call	0xd0c8	; 0xd0c8 <__floatunsisf>
    c64e:	9b 01       	movw	r18, r22
    c650:	ac 01       	movw	r20, r24
    c652:	60 91 c8 0d 	lds	r22, 0x0DC8
    c656:	70 91 c9 0d 	lds	r23, 0x0DC9
    c65a:	80 91 ca 0d 	lds	r24, 0x0DCA
    c65e:	90 91 cb 0d 	lds	r25, 0x0DCB
    c662:	0e 94 16 69 	call	0xd22c	; 0xd22c <__gesf2>
    c666:	18 16       	cp	r1, r24
    c668:	24 f4       	brge	.+8      	; 0xc672 <update_player+0x170>
		{
			game.player.shared.vx = 0;
    c66a:	10 92 d1 0d 	sts	0x0DD1, r1
    c66e:	10 92 d0 0d 	sts	0x0DD0, r1
		}
		if ((game.joypadState.held & BTN_UP) && (game.player.shared.y > 0))
    c672:	14 ff       	sbrs	r17, 4
    c674:	1b c0       	rjmp	.+54     	; 0xc6ac <update_player+0x1aa>
    c676:	20 e0       	ldi	r18, 0x00	; 0
    c678:	30 e0       	ldi	r19, 0x00	; 0
    c67a:	a9 01       	movw	r20, r18
    c67c:	60 91 cc 0d 	lds	r22, 0x0DCC
    c680:	70 91 cd 0d 	lds	r23, 0x0DCD
    c684:	80 91 ce 0d 	lds	r24, 0x0DCE
    c688:	90 91 cf 0d 	lds	r25, 0x0DCF
    c68c:	0e 94 16 69 	call	0xd22c	; 0xd22c <__gesf2>
    c690:	18 16       	cp	r1, r24
    c692:	64 f4       	brge	.+24     	; 0xc6ac <update_player+0x1aa>
		{
			game.player.shared.vy = -SPACE_SHIP_SPEED;
    c694:	80 e0       	ldi	r24, 0x00	; 0
    c696:	90 e0       	ldi	r25, 0x00	; 0
    c698:	a0 e7       	ldi	r26, 0x70	; 112
    c69a:	b2 ec       	ldi	r27, 0xC2	; 194
    c69c:	80 93 c4 0d 	sts	0x0DC4, r24
    c6a0:	90 93 c5 0d 	sts	0x0DC5, r25
    c6a4:	a0 93 c6 0d 	sts	0x0DC6, r26
    c6a8:	b0 93 c7 0d 	sts	0x0DC7, r27
		}
		LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.run), 0);
    c6ac:	80 e3       	ldi	r24, 0x30	; 48
    c6ae:	9e e0       	ldi	r25, 0x0E	; 14
    c6b0:	0d c2       	rjmp	.+1050   	; 0xcacc <update_player+0x5ca>
	}
	else if (game.player.flags & (IDLE|RUNNING))
    c6b2:	81 2f       	mov	r24, r17
    c6b4:	8a 70       	andi	r24, 0x0A	; 10
    c6b6:	09 f4       	brne	.+2      	; 0xc6ba <update_player+0x1b8>
    c6b8:	ec c0       	rjmp	.+472    	; 0xc892 <update_player+0x390>
	{
		if (!on_solid_ground(&game.player.shared, game.player.width, game.player.height))
    c6ba:	40 91 d8 0d 	lds	r20, 0x0DD8
    c6be:	60 91 d7 0d 	lds	r22, 0x0DD7
    c6c2:	84 ec       	ldi	r24, 0xC4	; 196
    c6c4:	9d e0       	ldi	r25, 0x0D	; 13
    c6c6:	0e 94 49 50 	call	0xa092	; 0xa092 <on_solid_ground>
    c6ca:	81 11       	cpse	r24, r1
    c6cc:	07 c0       	rjmp	.+14     	; 0xc6dc <update_player+0x1da>
		{
			game.player.shared.gravity = GRAVITY;
    c6ce:	8f ef       	ldi	r24, 0xFF	; 255
    c6d0:	80 93 d2 0d 	sts	0x0DD2, r24
			game.player.flags = JUMPING;
    c6d4:	81 e0       	ldi	r24, 0x01	; 1
    c6d6:	80 93 d4 0d 	sts	0x0DD4, r24
    c6da:	de c1       	rjmp	.+956    	; 0xca98 <update_player+0x596>
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), extendedSprites[PLAYER_SLOT].flags);
		}
		else
		{
			if (game.joypadState.held & BTN_DOWN)
    c6dc:	10 91 9e 0f 	lds	r17, 0x0F9E
    c6e0:	15 ff       	sbrs	r17, 5
    c6e2:	46 c0       	rjmp	.+140    	; 0xc770 <update_player+0x26e>
			{
				game.player.shared.y += 16;
    c6e4:	20 e0       	ldi	r18, 0x00	; 0
    c6e6:	30 e0       	ldi	r19, 0x00	; 0
    c6e8:	40 e8       	ldi	r20, 0x80	; 128
    c6ea:	51 e4       	ldi	r21, 0x41	; 65
    c6ec:	60 91 cc 0d 	lds	r22, 0x0DCC
    c6f0:	70 91 cd 0d 	lds	r23, 0x0DCD
    c6f4:	80 91 ce 0d 	lds	r24, 0x0DCE
    c6f8:	90 91 cf 0d 	lds	r25, 0x0DCF
    c6fc:	0e 94 d0 67 	call	0xcfa0	; 0xcfa0 <__addsf3>
    c700:	60 93 cc 0d 	sts	0x0DCC, r22
    c704:	70 93 cd 0d 	sts	0x0DCD, r23
    c708:	80 93 ce 0d 	sts	0x0DCE, r24
    c70c:	90 93 cf 0d 	sts	0x0DCF, r25
				if(game.player.direction == D_RIGHT)
    c710:	80 91 d6 0d 	lds	r24, 0x0DD6
    c714:	81 30       	cpi	r24, 0x01	; 1
    c716:	b1 f4       	brne	.+44     	; 0xc744 <update_player+0x242>
				{
					game.player.shared.x -= 8;
    c718:	20 e0       	ldi	r18, 0x00	; 0
    c71a:	30 e0       	ldi	r19, 0x00	; 0
    c71c:	40 e0       	ldi	r20, 0x00	; 0
    c71e:	51 e4       	ldi	r21, 0x41	; 65
    c720:	60 91 c8 0d 	lds	r22, 0x0DC8
    c724:	70 91 c9 0d 	lds	r23, 0x0DC9
    c728:	80 91 ca 0d 	lds	r24, 0x0DCA
    c72c:	90 91 cb 0d 	lds	r25, 0x0DCB
    c730:	0e 94 cf 67 	call	0xcf9e	; 0xcf9e <__subsf3>
    c734:	60 93 c8 0d 	sts	0x0DC8, r22
    c738:	70 93 c9 0d 	sts	0x0DC9, r23
    c73c:	80 93 ca 0d 	sts	0x0DCA, r24
    c740:	90 93 cb 0d 	sts	0x0DCB, r25
				}
				game.player.shared.vx = 0;
    c744:	10 92 d1 0d 	sts	0x0DD1, r1
    c748:	10 92 d0 0d 	sts	0x0DD0, r1
				game.player.flags = PRONE;
    c74c:	84 e0       	ldi	r24, 0x04	; 4
    c74e:	80 93 d4 0d 	sts	0x0DD4, r24
				game.player.width = 3;
    c752:	83 e0       	ldi	r24, 0x03	; 3
    c754:	80 93 d7 0d 	sts	0x0DD7, r24
				game.player.height = 1;
    c758:	81 e0       	ldi	r24, 0x01	; 1
    c75a:	80 93 d8 0d 	sts	0x0DD8, r24
				clear_sprites(3, 3);
    c75e:	63 e0       	ldi	r22, 0x03	; 3
    c760:	83 e0       	ldi	r24, 0x03	; 3
    c762:	0e 94 0e 5c 	call	0xb81c	; 0xb81c <clear_sprites>
				LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.prone), extendedSprites[PLAYER_SLOT].flags);
    c766:	40 91 ae 0f 	lds	r20, 0x0FAE
    c76a:	80 e4       	ldi	r24, 0x40	; 64
    c76c:	9e e0       	ldi	r25, 0x0E	; 14
    c76e:	6e c0       	rjmp	.+220    	; 0xc84c <update_player+0x34a>
			}
			else if ((game.joypadState.held & BTN_RIGHT) && (game.player.shared.x/8 + 2 < game.level_width))
    c770:	17 ff       	sbrs	r17, 7
    c772:	38 c0       	rjmp	.+112    	; 0xc7e4 <update_player+0x2e2>
    c774:	20 e0       	ldi	r18, 0x00	; 0
    c776:	30 e0       	ldi	r19, 0x00	; 0
    c778:	40 e0       	ldi	r20, 0x00	; 0
    c77a:	5e e3       	ldi	r21, 0x3E	; 62
    c77c:	60 91 c8 0d 	lds	r22, 0x0DC8
    c780:	70 91 c9 0d 	lds	r23, 0x0DC9
    c784:	80 91 ca 0d 	lds	r24, 0x0DCA
    c788:	90 91 cb 0d 	lds	r25, 0x0DCB
    c78c:	0e 94 1a 69 	call	0xd234	; 0xd234 <__mulsf3>
    c790:	20 e0       	ldi	r18, 0x00	; 0
    c792:	30 e0       	ldi	r19, 0x00	; 0
    c794:	40 e0       	ldi	r20, 0x00	; 0
    c796:	50 e4       	ldi	r21, 0x40	; 64
    c798:	0e 94 d0 67 	call	0xcfa0	; 0xcfa0 <__addsf3>
    c79c:	6b 01       	movw	r12, r22
    c79e:	7c 01       	movw	r14, r24
    c7a0:	80 91 b8 0d 	lds	r24, 0x0DB8
    c7a4:	68 2f       	mov	r22, r24
    c7a6:	70 e0       	ldi	r23, 0x00	; 0
    c7a8:	80 e0       	ldi	r24, 0x00	; 0
    c7aa:	90 e0       	ldi	r25, 0x00	; 0
    c7ac:	0e 94 66 68 	call	0xd0cc	; 0xd0cc <__floatsisf>
    c7b0:	9b 01       	movw	r18, r22
    c7b2:	ac 01       	movw	r20, r24
    c7b4:	c7 01       	movw	r24, r14
    c7b6:	b6 01       	movw	r22, r12
    c7b8:	0e 94 34 68 	call	0xd068	; 0xd068 <__cmpsf2>
    c7bc:	87 ff       	sbrs	r24, 7
    c7be:	12 c0       	rjmp	.+36     	; 0xc7e4 <update_player+0x2e2>
			{
				game.player.shared.vx = RUN_SPEED;
    c7c0:	8c e3       	ldi	r24, 0x3C	; 60
    c7c2:	90 e0       	ldi	r25, 0x00	; 0
    c7c4:	90 93 d1 0d 	sts	0x0DD1, r25
    c7c8:	80 93 d0 0d 	sts	0x0DD0, r24
				game.player.flags = RUNNING;
    c7cc:	82 e0       	ldi	r24, 0x02	; 2
    c7ce:	80 93 d4 0d 	sts	0x0DD4, r24
				game.player.direction = D_RIGHT;
    c7d2:	81 e0       	ldi	r24, 0x01	; 1
    c7d4:	80 93 d6 0d 	sts	0x0DD6, r24
				LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.run), 0);
    c7d8:	80 e3       	ldi	r24, 0x30	; 48
    c7da:	9e e0       	ldi	r25, 0x0E	; 14
    c7dc:	0e 94 62 49 	call	0x92c4	; 0x92c4 <LBGetNextFrame>
    c7e0:	40 e0       	ldi	r20, 0x00	; 0
    c7e2:	38 c0       	rjmp	.+112    	; 0xc854 <update_player+0x352>
			}
			else if ((game.joypadState.held & BTN_LEFT) && (game.player.shared.x > game.camera_x))
    c7e4:	16 ff       	sbrs	r17, 6
    c7e6:	27 c0       	rjmp	.+78     	; 0xc836 <update_player+0x334>
    c7e8:	60 91 aa 0d 	lds	r22, 0x0DAA
    c7ec:	70 91 ab 0d 	lds	r23, 0x0DAB
    c7f0:	80 e0       	ldi	r24, 0x00	; 0
    c7f2:	90 e0       	ldi	r25, 0x00	; 0
    c7f4:	0e 94 64 68 	call	0xd0c8	; 0xd0c8 <__floatunsisf>
    c7f8:	9b 01       	movw	r18, r22
    c7fa:	ac 01       	movw	r20, r24
    c7fc:	60 91 c8 0d 	lds	r22, 0x0DC8
    c800:	70 91 c9 0d 	lds	r23, 0x0DC9
    c804:	80 91 ca 0d 	lds	r24, 0x0DCA
    c808:	90 91 cb 0d 	lds	r25, 0x0DCB
    c80c:	0e 94 16 69 	call	0xd22c	; 0xd22c <__gesf2>
    c810:	18 16       	cp	r1, r24
    c812:	8c f4       	brge	.+34     	; 0xc836 <update_player+0x334>
			{
				game.player.shared.vx = -RUN_SPEED;
    c814:	84 ec       	ldi	r24, 0xC4	; 196
    c816:	9f ef       	ldi	r25, 0xFF	; 255
    c818:	90 93 d1 0d 	sts	0x0DD1, r25
    c81c:	80 93 d0 0d 	sts	0x0DD0, r24
				game.player.flags = RUNNING;
    c820:	82 e0       	ldi	r24, 0x02	; 2
    c822:	80 93 d4 0d 	sts	0x0DD4, r24
				game.player.direction = D_LEFT;
    c826:	10 92 d6 0d 	sts	0x0DD6, r1
				LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.run), SPRITE_FLIP_X);
    c82a:	80 e3       	ldi	r24, 0x30	; 48
    c82c:	9e e0       	ldi	r25, 0x0E	; 14
    c82e:	0e 94 62 49 	call	0x92c4	; 0x92c4 <LBGetNextFrame>
    c832:	41 e0       	ldi	r20, 0x01	; 1
    c834:	0f c0       	rjmp	.+30     	; 0xc854 <update_player+0x352>
			}
			else
			{
				game.player.flags = IDLE;
    c836:	88 e0       	ldi	r24, 0x08	; 8
    c838:	80 93 d4 0d 	sts	0x0DD4, r24
				game.player.shared.vx = 0;
    c83c:	10 92 d1 0d 	sts	0x0DD1, r1
    c840:	10 92 d0 0d 	sts	0x0DD0, r1
				LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.idle), extendedSprites[PLAYER_SLOT].flags);
    c844:	40 91 ae 0f 	lds	r20, 0x0FAE
    c848:	88 e2       	ldi	r24, 0x28	; 40
    c84a:	9e e0       	ldi	r25, 0x0E	; 14
    c84c:	49 83       	std	Y+1, r20	; 0x01
    c84e:	0e 94 62 49 	call	0x92c4	; 0x92c4 <LBGetNextFrame>
    c852:	49 81       	ldd	r20, Y+1	; 0x01
    c854:	bc 01       	movw	r22, r24
    c856:	80 e0       	ldi	r24, 0x00	; 0
    c858:	0e 94 c4 4a 	call	0x9588	; 0x9588 <LBMapSprite>
			}
			if (game.joypadState.pressed & BTN_B && !(game.player.flags & PRONE))
    c85c:	80 91 9a 0f 	lds	r24, 0x0F9A
    c860:	80 ff       	sbrs	r24, 0
    c862:	44 c1       	rjmp	.+648    	; 0xcaec <update_player+0x5ea>
    c864:	80 91 d4 0d 	lds	r24, 0x0DD4
    c868:	82 fd       	sbrc	r24, 2
    c86a:	40 c1       	rjmp	.+640    	; 0xcaec <update_player+0x5ea>
			{
				game.player.shared.vy = -JUMP_SPEED;
    c86c:	80 e0       	ldi	r24, 0x00	; 0
    c86e:	90 e0       	ldi	r25, 0x00	; 0
    c870:	a6 e1       	ldi	r26, 0x16	; 22
    c872:	b3 ec       	ldi	r27, 0xC3	; 195
    c874:	80 93 c4 0d 	sts	0x0DC4, r24
    c878:	90 93 c5 0d 	sts	0x0DC5, r25
    c87c:	a0 93 c6 0d 	sts	0x0DC6, r26
    c880:	b0 93 c7 0d 	sts	0x0DC7, r27
				game.player.shared.gravity = GRAVITY;
    c884:	8f ef       	ldi	r24, 0xFF	; 255
    c886:	80 93 d2 0d 	sts	0x0DD2, r24
				game.player.flags = JUMPING;
    c88a:	81 e0       	ldi	r24, 0x01	; 1
    c88c:	80 93 d4 0d 	sts	0x0DD4, r24
    c890:	fd c0       	rjmp	.+506    	; 0xca8c <update_player+0x58a>
				game.player.height = 3;
				LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), extendedSprites[PLAYER_SLOT].flags);
			}
		}
	}
	else if (game.player.flags & JUMPING)
    c892:	10 ff       	sbrs	r17, 0
    c894:	77 c0       	rjmp	.+238    	; 0xc984 <update_player+0x482>
	{
		if ((game.joypadState.held & BTN_RIGHT) && (game.player.shared.x/8 + 2 < game.level_width))
    c896:	10 91 9e 0f 	lds	r17, 0x0F9E
    c89a:	17 ff       	sbrs	r17, 7
    c89c:	35 c0       	rjmp	.+106    	; 0xc908 <update_player+0x406>
    c89e:	20 e0       	ldi	r18, 0x00	; 0
    c8a0:	30 e0       	ldi	r19, 0x00	; 0
    c8a2:	40 e0       	ldi	r20, 0x00	; 0
    c8a4:	5e e3       	ldi	r21, 0x3E	; 62
    c8a6:	60 91 c8 0d 	lds	r22, 0x0DC8
    c8aa:	70 91 c9 0d 	lds	r23, 0x0DC9
    c8ae:	80 91 ca 0d 	lds	r24, 0x0DCA
    c8b2:	90 91 cb 0d 	lds	r25, 0x0DCB
    c8b6:	0e 94 1a 69 	call	0xd234	; 0xd234 <__mulsf3>
    c8ba:	20 e0       	ldi	r18, 0x00	; 0
    c8bc:	30 e0       	ldi	r19, 0x00	; 0
    c8be:	40 e0       	ldi	r20, 0x00	; 0
    c8c0:	50 e4       	ldi	r21, 0x40	; 64
    c8c2:	0e 94 d0 67 	call	0xcfa0	; 0xcfa0 <__addsf3>
    c8c6:	6b 01       	movw	r12, r22
    c8c8:	7c 01       	movw	r14, r24
    c8ca:	80 91 b8 0d 	lds	r24, 0x0DB8
    c8ce:	68 2f       	mov	r22, r24
    c8d0:	70 e0       	ldi	r23, 0x00	; 0
    c8d2:	80 e0       	ldi	r24, 0x00	; 0
    c8d4:	90 e0       	ldi	r25, 0x00	; 0
    c8d6:	0e 94 66 68 	call	0xd0cc	; 0xd0cc <__floatsisf>
    c8da:	9b 01       	movw	r18, r22
    c8dc:	ac 01       	movw	r20, r24
    c8de:	c7 01       	movw	r24, r14
    c8e0:	b6 01       	movw	r22, r12
    c8e2:	0e 94 34 68 	call	0xd068	; 0xd068 <__cmpsf2>
    c8e6:	87 ff       	sbrs	r24, 7
    c8e8:	0f c0       	rjmp	.+30     	; 0xc908 <update_player+0x406>
		{
			game.player.shared.vx = RUN_SPEED;
    c8ea:	8c e3       	ldi	r24, 0x3C	; 60
    c8ec:	90 e0       	ldi	r25, 0x00	; 0
    c8ee:	90 93 d1 0d 	sts	0x0DD1, r25
    c8f2:	80 93 d0 0d 	sts	0x0DD0, r24
			game.player.direction = D_RIGHT;
    c8f6:	81 e0       	ldi	r24, 0x01	; 1
    c8f8:	80 93 d6 0d 	sts	0x0DD6, r24
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), 0);
    c8fc:	88 e3       	ldi	r24, 0x38	; 56
    c8fe:	9e e0       	ldi	r25, 0x0E	; 14
    c900:	0e 94 62 49 	call	0x92c4	; 0x92c4 <LBGetNextFrame>
    c904:	40 e0       	ldi	r20, 0x00	; 0
    c906:	32 c0       	rjmp	.+100    	; 0xc96c <update_player+0x46a>
		}
		else if ((game.joypadState.held & BTN_LEFT) && (game.player.shared.x > game.camera_x))
    c908:	16 ff       	sbrs	r17, 6
    c90a:	24 c0       	rjmp	.+72     	; 0xc954 <update_player+0x452>
    c90c:	60 91 aa 0d 	lds	r22, 0x0DAA
    c910:	70 91 ab 0d 	lds	r23, 0x0DAB
    c914:	80 e0       	ldi	r24, 0x00	; 0
    c916:	90 e0       	ldi	r25, 0x00	; 0
    c918:	0e 94 64 68 	call	0xd0c8	; 0xd0c8 <__floatunsisf>
    c91c:	9b 01       	movw	r18, r22
    c91e:	ac 01       	movw	r20, r24
    c920:	60 91 c8 0d 	lds	r22, 0x0DC8
    c924:	70 91 c9 0d 	lds	r23, 0x0DC9
    c928:	80 91 ca 0d 	lds	r24, 0x0DCA
    c92c:	90 91 cb 0d 	lds	r25, 0x0DCB
    c930:	0e 94 16 69 	call	0xd22c	; 0xd22c <__gesf2>
    c934:	18 16       	cp	r1, r24
    c936:	74 f4       	brge	.+28     	; 0xc954 <update_player+0x452>
		{
			game.player.shared.vx = -RUN_SPEED;
    c938:	84 ec       	ldi	r24, 0xC4	; 196
    c93a:	9f ef       	ldi	r25, 0xFF	; 255
    c93c:	90 93 d1 0d 	sts	0x0DD1, r25
    c940:	80 93 d0 0d 	sts	0x0DD0, r24
			game.player.direction = D_LEFT;
    c944:	10 92 d6 0d 	sts	0x0DD6, r1
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), SPRITE_FLIP_X);
    c948:	88 e3       	ldi	r24, 0x38	; 56
    c94a:	9e e0       	ldi	r25, 0x0E	; 14
    c94c:	0e 94 62 49 	call	0x92c4	; 0x92c4 <LBGetNextFrame>
    c950:	41 e0       	ldi	r20, 0x01	; 1
    c952:	0c c0       	rjmp	.+24     	; 0xc96c <update_player+0x46a>
		}
		else
		{
			game.player.shared.vx = 0;
    c954:	10 92 d1 0d 	sts	0x0DD1, r1
    c958:	10 92 d0 0d 	sts	0x0DD0, r1
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), extendedSprites[PLAYER_SLOT].flags);
    c95c:	40 91 ae 0f 	lds	r20, 0x0FAE
    c960:	88 e3       	ldi	r24, 0x38	; 56
    c962:	9e e0       	ldi	r25, 0x0E	; 14
    c964:	49 83       	std	Y+1, r20	; 0x01
    c966:	0e 94 62 49 	call	0x92c4	; 0x92c4 <LBGetNextFrame>
    c96a:	49 81       	ldd	r20, Y+1	; 0x01
    c96c:	bc 01       	movw	r22, r24
    c96e:	80 e0       	ldi	r24, 0x00	; 0
    c970:	0e 94 c4 4a 	call	0x9588	; 0x9588 <LBMapSprite>
		}
		
		if (game.player.shared.gravity == 0)
    c974:	80 91 d2 0d 	lds	r24, 0x0DD2
    c978:	81 11       	cpse	r24, r1
    c97a:	b8 c0       	rjmp	.+368    	; 0xcaec <update_player+0x5ea>
		{
			game.player.flags = IDLE;
    c97c:	88 e0       	ldi	r24, 0x08	; 8
    c97e:	80 93 d4 0d 	sts	0x0DD4, r24
    c982:	b4 c0       	rjmp	.+360    	; 0xcaec <update_player+0x5ea>
		}
	}
	else if (game.player.flags & PRONE)
    c984:	12 ff       	sbrs	r17, 2
    c986:	b2 c0       	rjmp	.+356    	; 0xcaec <update_player+0x5ea>
	{
		if (game.joypadState.pressed & BTN_UP)
    c988:	80 91 9a 0f 	lds	r24, 0x0F9A
    c98c:	84 ff       	sbrs	r24, 4
    c98e:	3a c0       	rjmp	.+116    	; 0xca04 <update_player+0x502>
		{
			game.player.flags = IDLE;	
    c990:	88 e0       	ldi	r24, 0x08	; 8
    c992:	80 93 d4 0d 	sts	0x0DD4, r24
			game.player.shared.y -= 16;
    c996:	20 e0       	ldi	r18, 0x00	; 0
    c998:	30 e0       	ldi	r19, 0x00	; 0
    c99a:	40 e8       	ldi	r20, 0x80	; 128
    c99c:	51 e4       	ldi	r21, 0x41	; 65
    c99e:	60 91 cc 0d 	lds	r22, 0x0DCC
    c9a2:	70 91 cd 0d 	lds	r23, 0x0DCD
    c9a6:	80 91 ce 0d 	lds	r24, 0x0DCE
    c9aa:	90 91 cf 0d 	lds	r25, 0x0DCF
    c9ae:	0e 94 cf 67 	call	0xcf9e	; 0xcf9e <__subsf3>
    c9b2:	60 93 cc 0d 	sts	0x0DCC, r22
    c9b6:	70 93 cd 0d 	sts	0x0DCD, r23
    c9ba:	80 93 ce 0d 	sts	0x0DCE, r24
    c9be:	90 93 cf 0d 	sts	0x0DCF, r25
			if(game.player.direction == D_RIGHT)
    c9c2:	80 91 d6 0d 	lds	r24, 0x0DD6
    c9c6:	81 30       	cpi	r24, 0x01	; 1
    c9c8:	b1 f4       	brne	.+44     	; 0xc9f6 <update_player+0x4f4>
			{
				game.player.shared.x += 8;
    c9ca:	20 e0       	ldi	r18, 0x00	; 0
    c9cc:	30 e0       	ldi	r19, 0x00	; 0
    c9ce:	40 e0       	ldi	r20, 0x00	; 0
    c9d0:	51 e4       	ldi	r21, 0x41	; 65
    c9d2:	60 91 c8 0d 	lds	r22, 0x0DC8
    c9d6:	70 91 c9 0d 	lds	r23, 0x0DC9
    c9da:	80 91 ca 0d 	lds	r24, 0x0DCA
    c9de:	90 91 cb 0d 	lds	r25, 0x0DCB
    c9e2:	0e 94 d0 67 	call	0xcfa0	; 0xcfa0 <__addsf3>
    c9e6:	60 93 c8 0d 	sts	0x0DC8, r22
    c9ea:	70 93 c9 0d 	sts	0x0DC9, r23
    c9ee:	80 93 ca 0d 	sts	0x0DCA, r24
    c9f2:	90 93 cb 0d 	sts	0x0DCB, r25
			}
			game.player.width = 2;
    c9f6:	82 e0       	ldi	r24, 0x02	; 2
    c9f8:	80 93 d7 0d 	sts	0x0DD7, r24
			game.player.height = 3;
    c9fc:	83 e0       	ldi	r24, 0x03	; 3
    c9fe:	80 93 d8 0d 	sts	0x0DD8, r24
    ca02:	74 c0       	rjmp	.+232    	; 0xcaec <update_player+0x5ea>
		}
		else if (game.joypadState.pressed & BTN_B)
    ca04:	80 ff       	sbrs	r24, 0
    ca06:	51 c0       	rjmp	.+162    	; 0xcaaa <update_player+0x5a8>
		{
			game.player.flags = JUMPING;
    ca08:	81 e0       	ldi	r24, 0x01	; 1
    ca0a:	80 93 d4 0d 	sts	0x0DD4, r24
			game.player.shared.y -= 16;
    ca0e:	20 e0       	ldi	r18, 0x00	; 0
    ca10:	30 e0       	ldi	r19, 0x00	; 0
    ca12:	40 e8       	ldi	r20, 0x80	; 128
    ca14:	51 e4       	ldi	r21, 0x41	; 65
    ca16:	60 91 cc 0d 	lds	r22, 0x0DCC
    ca1a:	70 91 cd 0d 	lds	r23, 0x0DCD
    ca1e:	80 91 ce 0d 	lds	r24, 0x0DCE
    ca22:	90 91 cf 0d 	lds	r25, 0x0DCF
    ca26:	0e 94 cf 67 	call	0xcf9e	; 0xcf9e <__subsf3>
    ca2a:	60 93 cc 0d 	sts	0x0DCC, r22
    ca2e:	70 93 cd 0d 	sts	0x0DCD, r23
    ca32:	80 93 ce 0d 	sts	0x0DCE, r24
    ca36:	90 93 cf 0d 	sts	0x0DCF, r25
			if(game.player.direction == D_RIGHT)
    ca3a:	80 91 d6 0d 	lds	r24, 0x0DD6
    ca3e:	81 30       	cpi	r24, 0x01	; 1
    ca40:	b1 f4       	brne	.+44     	; 0xca6e <update_player+0x56c>
			{
				game.player.shared.x += 8;
    ca42:	20 e0       	ldi	r18, 0x00	; 0
    ca44:	30 e0       	ldi	r19, 0x00	; 0
    ca46:	40 e0       	ldi	r20, 0x00	; 0
    ca48:	51 e4       	ldi	r21, 0x41	; 65
    ca4a:	60 91 c8 0d 	lds	r22, 0x0DC8
    ca4e:	70 91 c9 0d 	lds	r23, 0x0DC9
    ca52:	80 91 ca 0d 	lds	r24, 0x0DCA
    ca56:	90 91 cb 0d 	lds	r25, 0x0DCB
    ca5a:	0e 94 d0 67 	call	0xcfa0	; 0xcfa0 <__addsf3>
    ca5e:	60 93 c8 0d 	sts	0x0DC8, r22
    ca62:	70 93 c9 0d 	sts	0x0DC9, r23
    ca66:	80 93 ca 0d 	sts	0x0DCA, r24
    ca6a:	90 93 cb 0d 	sts	0x0DCB, r25
			}
			game.player.shared.vy = -JUMP_SPEED;
    ca6e:	80 e0       	ldi	r24, 0x00	; 0
    ca70:	90 e0       	ldi	r25, 0x00	; 0
    ca72:	a6 e1       	ldi	r26, 0x16	; 22
    ca74:	b3 ec       	ldi	r27, 0xC3	; 195
    ca76:	80 93 c4 0d 	sts	0x0DC4, r24
    ca7a:	90 93 c5 0d 	sts	0x0DC5, r25
    ca7e:	a0 93 c6 0d 	sts	0x0DC6, r26
    ca82:	b0 93 c7 0d 	sts	0x0DC7, r27
			game.player.shared.gravity = GRAVITY;
    ca86:	8f ef       	ldi	r24, 0xFF	; 255
    ca88:	80 93 d2 0d 	sts	0x0DD2, r24
			game.player.width = 2;
    ca8c:	82 e0       	ldi	r24, 0x02	; 2
    ca8e:	80 93 d7 0d 	sts	0x0DD7, r24
			game.player.height = 3;
    ca92:	83 e0       	ldi	r24, 0x03	; 3
    ca94:	80 93 d8 0d 	sts	0x0DD8, r24
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), extendedSprites[PLAYER_SLOT].flags);
    ca98:	40 91 ae 0f 	lds	r20, 0x0FAE
    ca9c:	88 e3       	ldi	r24, 0x38	; 56
    ca9e:	9e e0       	ldi	r25, 0x0E	; 14
    caa0:	49 83       	std	Y+1, r20	; 0x01
    caa2:	0e 94 62 49 	call	0x92c4	; 0x92c4 <LBGetNextFrame>
    caa6:	49 81       	ldd	r20, Y+1	; 0x01
    caa8:	14 c0       	rjmp	.+40     	; 0xcad2 <update_player+0x5d0>
		}
		else if (game.joypadState.pressed & BTN_LEFT)
    caaa:	86 ff       	sbrs	r24, 6
    caac:	08 c0       	rjmp	.+16     	; 0xcabe <update_player+0x5bc>
		{
			game.player.direction = D_LEFT;
    caae:	10 92 d6 0d 	sts	0x0DD6, r1
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.prone), SPRITE_FLIP_X);
    cab2:	80 e4       	ldi	r24, 0x40	; 64
    cab4:	9e e0       	ldi	r25, 0x0E	; 14
    cab6:	0e 94 62 49 	call	0x92c4	; 0x92c4 <LBGetNextFrame>
    caba:	41 e0       	ldi	r20, 0x01	; 1
    cabc:	0a c0       	rjmp	.+20     	; 0xcad2 <update_player+0x5d0>
		}
		else if (game.joypadState.pressed & BTN_RIGHT)
    cabe:	87 ff       	sbrs	r24, 7
    cac0:	15 c0       	rjmp	.+42     	; 0xcaec <update_player+0x5ea>
		{
			game.player.direction = D_RIGHT;
    cac2:	81 e0       	ldi	r24, 0x01	; 1
    cac4:	80 93 d6 0d 	sts	0x0DD6, r24
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.prone), 0);
    cac8:	80 e4       	ldi	r24, 0x40	; 64
    caca:	9e e0       	ldi	r25, 0x0E	; 14
    cacc:	0e 94 62 49 	call	0x92c4	; 0x92c4 <LBGetNextFrame>
    cad0:	40 e0       	ldi	r20, 0x00	; 0
    cad2:	bc 01       	movw	r22, r24
    cad4:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
}
    cad6:	0f 90       	pop	r0
    cad8:	df 91       	pop	r29
    cada:	cf 91       	pop	r28
    cadc:	1f 91       	pop	r17
    cade:	0f 91       	pop	r16
    cae0:	ff 90       	pop	r15
    cae2:	ef 90       	pop	r14
    cae4:	df 90       	pop	r13
    cae6:	cf 90       	pop	r12
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.prone), SPRITE_FLIP_X);
		}
		else if (game.joypadState.pressed & BTN_RIGHT)
		{
			game.player.direction = D_RIGHT;
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.prone), 0);
    cae8:	0c 94 c4 4a 	jmp	0x9588	; 0x9588 <LBMapSprite>
		}
	}
}
    caec:	0f 90       	pop	r0
    caee:	df 91       	pop	r29
    caf0:	cf 91       	pop	r28
    caf2:	1f 91       	pop	r17
    caf4:	0f 91       	pop	r16
    caf6:	ff 90       	pop	r15
    caf8:	ef 90       	pop	r14
    cafa:	df 90       	pop	r13
    cafc:	cf 90       	pop	r12
    cafe:	08 95       	ret

0000cb00 <update_level>:
		}
	}
}

void update_level()
{
    cb00:	cf 92       	push	r12
    cb02:	df 92       	push	r13
    cb04:	ef 92       	push	r14
    cb06:	ff 92       	push	r15
    cb08:	0f 93       	push	r16
    cb0a:	1f 93       	push	r17
    cb0c:	cf 93       	push	r28
    cb0e:	df 93       	push	r29
	u8 ship_x = game.player.shared.x - game.camera_x;
    cb10:	00 91 aa 0d 	lds	r16, 0x0DAA
    cb14:	10 91 ab 0d 	lds	r17, 0x0DAB
    cb18:	b8 01       	movw	r22, r16
    cb1a:	80 e0       	ldi	r24, 0x00	; 0
    cb1c:	90 e0       	ldi	r25, 0x00	; 0
    cb1e:	0e 94 64 68 	call	0xd0c8	; 0xd0c8 <__floatunsisf>
    cb22:	9b 01       	movw	r18, r22
    cb24:	ac 01       	movw	r20, r24
    cb26:	60 91 c8 0d 	lds	r22, 0x0DC8
    cb2a:	70 91 c9 0d 	lds	r23, 0x0DC9
    cb2e:	80 91 ca 0d 	lds	r24, 0x0DCA
    cb32:	90 91 cb 0d 	lds	r25, 0x0DCB
    cb36:	0e 94 cf 67 	call	0xcf9e	; 0xcf9e <__subsf3>
    cb3a:	6b 01       	movw	r12, r22
    cb3c:	7c 01       	movw	r14, r24
	u8 ship_y = 0;
	char ship_increment = 3;
	
	game.frame_counter++;
    cb3e:	80 91 bc 0d 	lds	r24, 0x0DBC
    cb42:	8f 5f       	subi	r24, 0xFF	; 255
	if (game.frame_counter == 60)
    cb44:	8c 33       	cpi	r24, 0x3C	; 60
    cb46:	19 f0       	breq	.+6      	; 0xcb4e <update_level+0x4e>
{
	u8 ship_x = game.player.shared.x - game.camera_x;
	u8 ship_y = 0;
	char ship_increment = 3;
	
	game.frame_counter++;
    cb48:	80 93 bc 0d 	sts	0x0DBC, r24
    cb4c:	0f c0       	rjmp	.+30     	; 0xcb6c <update_level+0x6c>
	if (game.frame_counter == 60)
	{
		game.frame_counter = 0;
    cb4e:	10 92 bc 0d 	sts	0x0DBC, r1
		if (game.time != 65535) game.time++;
    cb52:	80 91 b0 0d 	lds	r24, 0x0DB0
    cb56:	90 91 b1 0d 	lds	r25, 0x0DB1
    cb5a:	8f 3f       	cpi	r24, 0xFF	; 255
    cb5c:	2f ef       	ldi	r18, 0xFF	; 255
    cb5e:	92 07       	cpc	r25, r18
    cb60:	29 f0       	breq	.+10     	; 0xcb6c <update_level+0x6c>
    cb62:	01 96       	adiw	r24, 0x01	; 1
    cb64:	90 93 b1 0d 	sts	0x0DB1, r25
    cb68:	80 93 b0 0d 	sts	0x0DB0, r24
	}
	
	if (is_space() && game.camera_x/8 + CAMERA_WIDTH < game.level_width)
    cb6c:	0e 94 93 4b 	call	0x9726	; 0x9726 <is_space>
    cb70:	93 e0       	ldi	r25, 0x03	; 3
    cb72:	16 95       	lsr	r17
    cb74:	07 95       	ror	r16
    cb76:	9a 95       	dec	r25
    cb78:	e1 f7       	brne	.-8      	; 0xcb72 <update_level+0x72>
    cb7a:	c0 91 b8 0d 	lds	r28, 0x0DB8
    cb7e:	88 23       	and	r24, r24
    cb80:	51 f0       	breq	.+20     	; 0xcb96 <update_level+0x96>
    cb82:	2c 2f       	mov	r18, r28
    cb84:	30 e0       	ldi	r19, 0x00	; 0
    cb86:	c8 01       	movw	r24, r16
    cb88:	4c 96       	adiw	r24, 0x1c	; 28
    cb8a:	82 17       	cp	r24, r18
    cb8c:	93 07       	cpc	r25, r19
    cb8e:	18 f4       	brcc	.+6      	; 0xcb96 <update_level+0x96>
	{
		move_camera_x();
    cb90:	0e 94 df 4f 	call	0x9fbe	; 0x9fbe <move_camera_x>
    cb94:	22 c0       	rjmp	.+68     	; 0xcbda <update_level+0xda>
	}
	else if (game.player.shared.vx > 0 &&
    cb96:	80 91 d0 0d 	lds	r24, 0x0DD0
    cb9a:	90 91 d1 0d 	lds	r25, 0x0DD1
    cb9e:	18 16       	cp	r1, r24
    cba0:	19 06       	cpc	r1, r25
    cba2:	8c f4       	brge	.+34     	; 0xcbc6 <update_level+0xc6>
    cba4:	20 e0       	ldi	r18, 0x00	; 0
    cba6:	30 e0       	ldi	r19, 0x00	; 0
    cba8:	40 ee       	ldi	r20, 0xE0	; 224
    cbaa:	52 e4       	ldi	r21, 0x42	; 66
    cbac:	c7 01       	movw	r24, r14
    cbae:	b6 01       	movw	r22, r12
    cbb0:	0e 94 16 69 	call	0xd22c	; 0xd22c <__gesf2>
    cbb4:	87 fd       	sbrc	r24, 7
    cbb6:	07 c0       	rjmp	.+14     	; 0xcbc6 <update_level+0xc6>
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
		(game.camera_x/8 + CAMERA_WIDTH < game.level_width))
    cbb8:	2c 2f       	mov	r18, r28
    cbba:	30 e0       	ldi	r19, 0x00	; 0
	if (is_space() && game.camera_x/8 + CAMERA_WIDTH < game.level_width)
	{
		move_camera_x();
	}
	else if (game.player.shared.vx > 0 &&
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
    cbbc:	c8 01       	movw	r24, r16
    cbbe:	4c 96       	adiw	r24, 0x1c	; 28
    cbc0:	82 17       	cp	r24, r18
    cbc2:	93 07       	cpc	r25, r19
    cbc4:	28 f3       	brcs	.-54     	; 0xcb90 <update_level+0x90>
		(game.camera_x/8 + CAMERA_WIDTH < game.level_width))
	{
		move_camera_x();
	}
	else if (game.camera_x/8 + CAMERA_WIDTH >= game.level_width)
    cbc6:	04 5e       	subi	r16, 0xE4	; 228
    cbc8:	1f 4f       	sbci	r17, 0xFF	; 255
    cbca:	8c 2f       	mov	r24, r28
    cbcc:	90 e0       	ldi	r25, 0x00	; 0
    cbce:	08 17       	cp	r16, r24
    cbd0:	19 07       	cpc	r17, r25
    cbd2:	18 f0       	brcs	.+6      	; 0xcbda <update_level+0xda>
	{
		game.level_ended = 1;
    cbd4:	81 e0       	ldi	r24, 0x01	; 1
    cbd6:	80 93 c3 0d 	sts	0x0DC3, r24
	}
	
	if (!is_space() && game.player.shared.vy > 0 &&
    cbda:	0e 94 93 4b 	call	0x9726	; 0x9726 <is_space>
    cbde:	81 11       	cpse	r24, r1
    cbe0:	40 c0       	rjmp	.+128    	; 0xcc62 <update_level+0x162>
    cbe2:	20 e0       	ldi	r18, 0x00	; 0
    cbe4:	30 e0       	ldi	r19, 0x00	; 0
    cbe6:	a9 01       	movw	r20, r18
    cbe8:	60 91 c4 0d 	lds	r22, 0x0DC4
    cbec:	70 91 c5 0d 	lds	r23, 0x0DC5
    cbf0:	80 91 c6 0d 	lds	r24, 0x0DC6
    cbf4:	90 91 c7 0d 	lds	r25, 0x0DC7
    cbf8:	0e 94 16 69 	call	0xd22c	; 0xd22c <__gesf2>
    cbfc:	18 16       	cp	r1, r24
    cbfe:	8c f5       	brge	.+98     	; 0xcc62 <update_level+0x162>
	    (game.player.shared.y - game.camera_y + 24) >= ((CAMERA_HEIGHT - 2) * 8) &&
    cc00:	c0 91 ac 0d 	lds	r28, 0x0DAC
    cc04:	d0 91 ad 0d 	lds	r29, 0x0DAD
    cc08:	be 01       	movw	r22, r28
    cc0a:	80 e0       	ldi	r24, 0x00	; 0
    cc0c:	90 e0       	ldi	r25, 0x00	; 0
    cc0e:	0e 94 64 68 	call	0xd0c8	; 0xd0c8 <__floatunsisf>
    cc12:	9b 01       	movw	r18, r22
    cc14:	ac 01       	movw	r20, r24
    cc16:	60 91 cc 0d 	lds	r22, 0x0DCC
    cc1a:	70 91 cd 0d 	lds	r23, 0x0DCD
    cc1e:	80 91 ce 0d 	lds	r24, 0x0DCE
    cc22:	90 91 cf 0d 	lds	r25, 0x0DCF
    cc26:	0e 94 cf 67 	call	0xcf9e	; 0xcf9e <__subsf3>
    cc2a:	20 e0       	ldi	r18, 0x00	; 0
    cc2c:	30 e0       	ldi	r19, 0x00	; 0
    cc2e:	40 ec       	ldi	r20, 0xC0	; 192
    cc30:	51 e4       	ldi	r21, 0x41	; 65
    cc32:	0e 94 d0 67 	call	0xcfa0	; 0xcfa0 <__addsf3>
	else if (game.camera_x/8 + CAMERA_WIDTH >= game.level_width)
	{
		game.level_ended = 1;
	}
	
	if (!is_space() && game.player.shared.vy > 0 &&
    cc36:	20 e0       	ldi	r18, 0x00	; 0
    cc38:	30 e0       	ldi	r19, 0x00	; 0
    cc3a:	40 e4       	ldi	r20, 0x40	; 64
    cc3c:	53 e4       	ldi	r21, 0x43	; 67
    cc3e:	0e 94 16 69 	call	0xd22c	; 0xd22c <__gesf2>
    cc42:	87 fd       	sbrc	r24, 7
    cc44:	0e c0       	rjmp	.+28     	; 0xcc62 <update_level+0x162>
	    (game.player.shared.y - game.camera_y + 24) >= ((CAMERA_HEIGHT - 2) * 8) &&
		(game.camera_y/8 + CAMERA_HEIGHT < game.level_height))
    cc46:	83 e0       	ldi	r24, 0x03	; 3
    cc48:	d6 95       	lsr	r29
    cc4a:	c7 95       	ror	r28
    cc4c:	8a 95       	dec	r24
    cc4e:	e1 f7       	brne	.-8      	; 0xcc48 <update_level+0x148>
    cc50:	6a 96       	adiw	r28, 0x1a	; 26
    cc52:	80 91 b9 0d 	lds	r24, 0x0DB9
    cc56:	90 e0       	ldi	r25, 0x00	; 0
	{
		game.level_ended = 1;
	}
	
	if (!is_space() && game.player.shared.vy > 0 &&
	    (game.player.shared.y - game.camera_y + 24) >= ((CAMERA_HEIGHT - 2) * 8) &&
    cc58:	c8 17       	cp	r28, r24
    cc5a:	d9 07       	cpc	r29, r25
    cc5c:	10 f4       	brcc	.+4      	; 0xcc62 <update_level+0x162>
		(game.camera_y/8 + CAMERA_HEIGHT < game.level_height))
	{
		move_camera_y();
    cc5e:	0e 94 f8 4f 	call	0x9ff0	; 0x9ff0 <move_camera_y>
	}
	
	// Score
	LBPrintByte(9, VRAM_TILES_V-1, game.lives ,true);
    cc62:	21 e0       	ldi	r18, 0x01	; 1
    cc64:	40 91 b5 0d 	lds	r20, 0x0DB5
    cc68:	6f e1       	ldi	r22, 0x1F	; 31
    cc6a:	89 e0       	ldi	r24, 0x09	; 9
    cc6c:	0e 94 0f 4a 	call	0x941e	; 0x941e <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-1, game.score ,true);
    cc70:	40 91 ae 0d 	lds	r20, 0x0DAE
    cc74:	50 91 af 0d 	lds	r21, 0x0DAF
    cc78:	21 e0       	ldi	r18, 0x01	; 1
    cc7a:	6f e1       	ldi	r22, 0x1F	; 31
    cc7c:	8b e1       	ldi	r24, 0x1B	; 27
    cc7e:	0e 94 40 4a 	call	0x9480	; 0x9480 <LBPrintInt>
	LBPrintByte(9, VRAM_TILES_V-2, game.player.shield ,true);
    cc82:	21 e0       	ldi	r18, 0x01	; 1
    cc84:	40 91 d9 0d 	lds	r20, 0x0DD9
    cc88:	6e e1       	ldi	r22, 0x1E	; 30
    cc8a:	89 e0       	ldi	r24, 0x09	; 9
    cc8c:	0e 94 0f 4a 	call	0x941e	; 0x941e <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-2, game.time ,true);
    cc90:	40 91 b0 0d 	lds	r20, 0x0DB0
    cc94:	50 91 b1 0d 	lds	r21, 0x0DB1
    cc98:	21 e0       	ldi	r18, 0x01	; 1
    cc9a:	6e e1       	ldi	r22, 0x1E	; 30
    cc9c:	8b e1       	ldi	r24, 0x1B	; 27
    cc9e:	0e 94 40 4a 	call	0x9480	; 0x9480 <LBPrintInt>
	
	if (game.level_ended && !is_space() && game.player.flags & (IDLE|RUNNING|PRONE))
    cca2:	80 91 c3 0d 	lds	r24, 0x0DC3
    cca6:	88 23       	and	r24, r24
    cca8:	09 f4       	brne	.+2      	; 0xccac <update_level+0x1ac>
    ccaa:	69 c0       	rjmp	.+210    	; 0xcd7e <update_level+0x27e>
    ccac:	0e 94 93 4b 	call	0x9726	; 0x9726 <is_space>
    ccb0:	81 11       	cpse	r24, r1
    ccb2:	56 c0       	rjmp	.+172    	; 0xcd60 <update_level+0x260>
    ccb4:	80 91 d4 0d 	lds	r24, 0x0DD4
    ccb8:	8e 70       	andi	r24, 0x0E	; 14
    ccba:	09 f4       	brne	.+2      	; 0xccbe <update_level+0x1be>
    ccbc:	60 c0       	rjmp	.+192    	; 0xcd7e <update_level+0x27e>
	{
		LBMapSprite(PLAYER_SLOT, map_hero_idle, 0);
    ccbe:	40 e0       	ldi	r20, 0x00	; 0
    ccc0:	67 eb       	ldi	r22, 0xB7	; 183
    ccc2:	7d e2       	ldi	r23, 0x2D	; 45
    ccc4:	80 e0       	ldi	r24, 0x00	; 0
    ccc6:	0e 94 c4 4a 	call	0x9588	; 0x9588 <LBMapSprite>
		clear_sprites(ENEMY_SHOT_SLOT, MAX_ENEMY_SHOTS);
    ccca:	61 e0       	ldi	r22, 0x01	; 1
    cccc:	8e e0       	ldi	r24, 0x0E	; 14
    ccce:	0e 94 0e 5c 	call	0xb81c	; 0xb81c <clear_sprites>
		LBRotateSprites();
    ccd2:	0e 94 54 4b 	call	0x96a8	; 0x96a8 <LBRotateSprites>
		map_ship();
    ccd6:	0e 94 13 50 	call	0xa026	; 0xa026 <map_ship>

void update_level()
{
	u8 ship_x = game.player.shared.x - game.camera_x;
	u8 ship_y = 0;
	char ship_increment = 3;
    ccda:	d3 e0       	ldi	r29, 0x03	; 3
}

void update_level()
{
	u8 ship_x = game.player.shared.x - game.camera_x;
	u8 ship_y = 0;
    ccdc:	c0 e0       	ldi	r28, 0x00	; 0
		clear_sprites(ENEMY_SHOT_SLOT, MAX_ENEMY_SHOTS);
		LBRotateSprites();
		map_ship();
		while (1)
		{
			WaitVsync(1);
    ccde:	81 e0       	ldi	r24, 0x01	; 1
    cce0:	90 e0       	ldi	r25, 0x00	; 0
    cce2:	0e 94 c5 48 	call	0x918a	; 0x918a <WaitVsync>
			if (ship_y >= get_hero_spawn_y(game.current_level_index)*8)
    cce6:	8c 2f       	mov	r24, r28
    cce8:	90 e0       	ldi	r25, 0x00	; 0
    ccea:	88 3a       	cpi	r24, 0xA8	; 168
    ccec:	91 05       	cpc	r25, r1
    ccee:	6c f0       	brlt	.+26     	; 0xcd0a <update_level+0x20a>
			{
				clear_sprites(0, game.player.width*game.player.height);
    ccf0:	80 91 d8 0d 	lds	r24, 0x0DD8
    ccf4:	60 91 d7 0d 	lds	r22, 0x0DD7
    ccf8:	86 9f       	mul	r24, r22
    ccfa:	60 2d       	mov	r22, r0
    ccfc:	11 24       	eor	r1, r1
    ccfe:	80 e0       	ldi	r24, 0x00	; 0
    cd00:	0e 94 0e 5c 	call	0xb81c	; 0xb81c <clear_sprites>
				LBRotateSprites();
    cd04:	0e 94 54 4b 	call	0x96a8	; 0x96a8 <LBRotateSprites>
				ship_increment = -3;
    cd08:	dd ef       	ldi	r29, 0xFD	; 253
			}
			LBMapSprite(6, LBGetNextFrame(&game.player.run), 0);
    cd0a:	80 e3       	ldi	r24, 0x30	; 48
    cd0c:	9e e0       	ldi	r25, 0x0E	; 14
    cd0e:	0e 94 62 49 	call	0x92c4	; 0x92c4 <LBGetNextFrame>
    cd12:	40 e0       	ldi	r20, 0x00	; 0
    cd14:	bc 01       	movw	r22, r24
    cd16:	86 e0       	ldi	r24, 0x06	; 6
    cd18:	0e 94 c4 4a 	call	0x9588	; 0x9588 <LBMapSprite>
	}
}

void update_level()
{
	u8 ship_x = game.player.shared.x - game.camera_x;
    cd1c:	c7 01       	movw	r24, r14
    cd1e:	b6 01       	movw	r22, r12
    cd20:	0e 94 38 68 	call	0xd070	; 0xd070 <__fixunssfsi>
				clear_sprites(0, game.player.width*game.player.height);
				LBRotateSprites();
				ship_increment = -3;
			}
			LBMapSprite(6, LBGetNextFrame(&game.player.run), 0);
			LBMoveSprite(6, ship_x, ship_y, 4, 2);
    cd24:	02 e0       	ldi	r16, 0x02	; 2
    cd26:	24 e0       	ldi	r18, 0x04	; 4
    cd28:	4c 2f       	mov	r20, r28
    cd2a:	86 e0       	ldi	r24, 0x06	; 6
    cd2c:	0e 94 16 4b 	call	0x962c	; 0x962c <LBMoveSprite>
			ship_y += ship_increment;
    cd30:	cd 0f       	add	r28, r29
			if (ship_y == 0)
    cd32:	99 f4       	brne	.+38     	; 0xcd5a <update_level+0x25a>
			{
				clear_sprites(6, 8);
    cd34:	68 e0       	ldi	r22, 0x08	; 8
    cd36:	86 e0       	ldi	r24, 0x06	; 6
    cd38:	0e 94 0e 5c 	call	0xb81c	; 0xb81c <clear_sprites>
				LBRotateSprites();
    cd3c:	0e 94 54 4b 	call	0x96a8	; 0x96a8 <LBRotateSprites>
				tally_score((char*) strLevelClear, 100);
    cd40:	64 e6       	ldi	r22, 0x64	; 100
    cd42:	70 e0       	ldi	r23, 0x00	; 0
    cd44:	86 e2       	ldi	r24, 0x26	; 38
    cd46:	9b e0       	ldi	r25, 0x0B	; 11
    cd48:	0e 94 1d 61 	call	0xc23a	; 0xc23a <tally_score>
				planet_transition(game.current_level_index+1, -1, 26, 3, 0);
    cd4c:	80 91 b7 0d 	lds	r24, 0x0DB7
    cd50:	00 e0       	ldi	r16, 0x00	; 0
    cd52:	23 e0       	ldi	r18, 0x03	; 3
    cd54:	4a e1       	ldi	r20, 0x1A	; 26
    cd56:	6f ef       	ldi	r22, 0xFF	; 255
    cd58:	0f c0       	rjmp	.+30     	; 0xcd78 <update_level+0x278>
				break;
			}
			LBRotateSprites();
    cd5a:	0e 94 54 4b 	call	0x96a8	; 0x96a8 <LBRotateSprites>
		}
    cd5e:	bf cf       	rjmp	.-130    	; 0xccde <update_level+0x1de>
	}
	else if (game.level_ended && is_space())
	{
		tally_score((char*) strLevelClear, 100);
    cd60:	64 e6       	ldi	r22, 0x64	; 100
    cd62:	70 e0       	ldi	r23, 0x00	; 0
    cd64:	86 e2       	ldi	r24, 0x26	; 38
    cd66:	9b e0       	ldi	r25, 0x0B	; 11
    cd68:	0e 94 1d 61 	call	0xc23a	; 0xc23a <tally_score>
		planet_transition(game.current_level_index+1, 1, 28, -3, 199);
    cd6c:	80 91 b7 0d 	lds	r24, 0x0DB7
    cd70:	07 ec       	ldi	r16, 0xC7	; 199
    cd72:	2d ef       	ldi	r18, 0xFD	; 253
    cd74:	4c e1       	ldi	r20, 0x1C	; 28
    cd76:	61 e0       	ldi	r22, 0x01	; 1
    cd78:	8f 5f       	subi	r24, 0xFF	; 255
    cd7a:	0e 94 fb 5d 	call	0xbbf6	; 0xbbf6 <planet_transition>
	}
	
}
    cd7e:	df 91       	pop	r29
    cd80:	cf 91       	pop	r28
    cd82:	1f 91       	pop	r17
    cd84:	0f 91       	pop	r16
    cd86:	ff 90       	pop	r15
    cd88:	ef 90       	pop	r14
    cd8a:	df 90       	pop	r13
    cd8c:	cf 90       	pop	r12
    cd8e:	08 95       	ret

0000cd90 <update_pause>:
		}
	}
}

void update_pause()
{
    cd90:	ef 92       	push	r14
    cd92:	ff 92       	push	r15
    cd94:	0f 93       	push	r16
    cd96:	1f 93       	push	r17
    cd98:	cf 93       	push	r28
    cd9a:	df 93       	push	r29
	u8 x = Screen.scrollX / 8;
    cd9c:	c0 91 b2 0c 	lds	r28, 0x0CB2
	u8 y = Screen.scrollY / 8;
    cda0:	00 91 b3 0c 	lds	r16, 0x0CB3
	
	if (game.joypadState.pressed & BTN_START)
    cda4:	80 91 9a 0f 	lds	r24, 0x0F9A
    cda8:	83 ff       	sbrs	r24, 3
    cdaa:	5d c0       	rjmp	.+186    	; 0xce66 <update_pause+0xd6>
}

void update_pause()
{
	u8 x = Screen.scrollX / 8;
	u8 y = Screen.scrollY / 8;
    cdac:	06 95       	lsr	r16
    cdae:	06 95       	lsr	r16
    cdb0:	06 95       	lsr	r16
	
	if (game.joypadState.pressed & BTN_START)
	{
		DrawMap2((x+8)%32, (y+6)%30, map_canvas);
    cdb2:	10 e0       	ldi	r17, 0x00	; 0
	}
}

void update_pause()
{
	u8 x = Screen.scrollX / 8;
    cdb4:	c6 95       	lsr	r28
    cdb6:	c6 95       	lsr	r28
    cdb8:	c6 95       	lsr	r28
	u8 y = Screen.scrollY / 8;
	
	if (game.joypadState.pressed & BTN_START)
	{
		DrawMap2((x+8)%32, (y+6)%30, map_canvas);
    cdba:	d0 e0       	ldi	r29, 0x00	; 0
    cdbc:	c8 01       	movw	r24, r16
    cdbe:	06 96       	adiw	r24, 0x06	; 6
    cdc0:	2e e1       	ldi	r18, 0x1E	; 30
    cdc2:	e2 2e       	mov	r14, r18
    cdc4:	f1 2c       	mov	r15, r1
    cdc6:	b7 01       	movw	r22, r14
    cdc8:	0e 94 b5 67 	call	0xcf6a	; 0xcf6a <__divmodhi4>
    cdcc:	9e 01       	movw	r18, r28
    cdce:	28 5f       	subi	r18, 0xF8	; 248
    cdd0:	3f 4f       	sbci	r19, 0xFF	; 255
    cdd2:	48 ee       	ldi	r20, 0xE8	; 232
    cdd4:	57 e6       	ldi	r21, 0x67	; 103
    cdd6:	68 2f       	mov	r22, r24
    cdd8:	82 2f       	mov	r24, r18
    cdda:	8f 71       	andi	r24, 0x1F	; 31
    cddc:	0e 94 5c 48 	call	0x90b8	; 0x90b8 <DrawMap>
		LBPrint((x+13)%32, (y+9)%30, (char*) strPaused);
    cde0:	c8 01       	movw	r24, r16
    cde2:	09 96       	adiw	r24, 0x09	; 9
    cde4:	b7 01       	movw	r22, r14
    cde6:	0e 94 b5 67 	call	0xcf6a	; 0xcf6a <__divmodhi4>
    cdea:	9e 01       	movw	r18, r28
    cdec:	23 5f       	subi	r18, 0xF3	; 243
    cdee:	3f 4f       	sbci	r19, 0xFF	; 255
    cdf0:	42 e3       	ldi	r20, 0x32	; 50
    cdf2:	5b e0       	ldi	r21, 0x0B	; 11
    cdf4:	68 2f       	mov	r22, r24
    cdf6:	82 2f       	mov	r24, r18
    cdf8:	8f 71       	andi	r24, 0x1F	; 31
    cdfa:	0e 94 f3 49 	call	0x93e6	; 0x93e6 <LBPrint>
		LBPrint((x+10)%32, (y+12)%30, (char*) strExitGame);
    cdfe:	c8 01       	movw	r24, r16
    ce00:	0c 96       	adiw	r24, 0x0c	; 12
    ce02:	b7 01       	movw	r22, r14
    ce04:	0e 94 b5 67 	call	0xcf6a	; 0xcf6a <__divmodhi4>
    ce08:	2a 96       	adiw	r28, 0x0a	; 10
    ce0a:	48 e3       	ldi	r20, 0x38	; 56
    ce0c:	5b e0       	ldi	r21, 0x0B	; 11
    ce0e:	68 2f       	mov	r22, r24
    ce10:	8c 2f       	mov	r24, r28
    ce12:	8f 71       	andi	r24, 0x1F	; 31
    ce14:	0e 94 f3 49 	call	0x93e6	; 0x93e6 <LBPrint>
		//hide_sprites(0, MAX_EXTENDED_SPRITES);
		//LBRotateSprites();
		while (1)
		{
			WaitVsync(1);
    ce18:	81 e0       	ldi	r24, 0x01	; 1
    ce1a:	90 e0       	ldi	r25, 0x00	; 0
    ce1c:	0e 94 c5 48 	call	0x918a	; 0x918a <WaitVsync>
			LBGetJoyPadState(&game.joypadState, 0);
    ce20:	60 e0       	ldi	r22, 0x00	; 0
    ce22:	8a e9       	ldi	r24, 0x9A	; 154
    ce24:	9f e0       	ldi	r25, 0x0F	; 15
    ce26:	0e 94 88 49 	call	0x9310	; 0x9310 <LBGetJoyPadState>
			if (game.joypadState.pressed & BTN_START)
    ce2a:	80 91 9a 0f 	lds	r24, 0x0F9A
    ce2e:	90 91 9b 0f 	lds	r25, 0x0F9B
    ce32:	83 ff       	sbrs	r24, 3
    ce34:	08 c0       	rjmp	.+16     	; 0xce46 <update_pause+0xb6>
				exit_game();
				break;
			}
		}
	}
}
    ce36:	df 91       	pop	r29
    ce38:	cf 91       	pop	r28
    ce3a:	1f 91       	pop	r17
    ce3c:	0f 91       	pop	r16
    ce3e:	ff 90       	pop	r15
    ce40:	ef 90       	pop	r14
		{
			WaitVsync(1);
			LBGetJoyPadState(&game.joypadState, 0);
			if (game.joypadState.pressed & BTN_START)
			{
				render_camera_view();
    ce42:	0c 94 32 4e 	jmp	0x9c64	; 0x9c64 <render_camera_view>
				break;
			}
			else if (game.joypadState.pressed & BTN_X)
    ce46:	91 ff       	sbrs	r25, 1
    ce48:	e7 cf       	rjmp	.-50     	; 0xce18 <update_pause+0x88>
			{
				tally_score((char*)strGameOver, 0);
    ce4a:	60 e0       	ldi	r22, 0x00	; 0
    ce4c:	70 e0       	ldi	r23, 0x00	; 0
    ce4e:	86 e1       	ldi	r24, 0x16	; 22
    ce50:	9b e0       	ldi	r25, 0x0B	; 11
    ce52:	0e 94 1d 61 	call	0xc23a	; 0xc23a <tally_score>
				exit_game();
				break;
			}
		}
	}
}
    ce56:	df 91       	pop	r29
    ce58:	cf 91       	pop	r28
    ce5a:	1f 91       	pop	r17
    ce5c:	0f 91       	pop	r16
    ce5e:	ff 90       	pop	r15
    ce60:	ef 90       	pop	r14
				break;
			}
			else if (game.joypadState.pressed & BTN_X)
			{
				tally_score((char*)strGameOver, 0);
				exit_game();
    ce62:	0c 94 11 60 	jmp	0xc022	; 0xc022 <exit_game>
				break;
			}
		}
	}
}
    ce66:	df 91       	pop	r29
    ce68:	cf 91       	pop	r28
    ce6a:	1f 91       	pop	r17
    ce6c:	0f 91       	pop	r16
    ce6e:	ff 90       	pop	r15
    ce70:	ef 90       	pop	r14
    ce72:	08 95       	ret

0000ce74 <main>:
}

int main()
{
	// Initialize
	GetPrngNumber(GetTrueRandomSeed());
    ce74:	0e 94 3d 3a 	call	0x747a	; 0x747a <GetTrueRandomSeed>
    ce78:	0e 94 bd 3b 	call	0x777a	; 0x777a <GetPrngNumber>
	InitMusicPlayer(my_patches);
    ce7c:	8e e1       	ldi	r24, 0x1E	; 30
    ce7e:	9d e1       	ldi	r25, 0x1D	; 29
    ce80:	0e 94 97 3c 	call	0x792e	; 0x792e <InitMusicPlayer>
	ClearVram();
    ce84:	0e 94 c5 39 	call	0x738a	; 0x738a <ClearVram>
	SetMasterVolume(0x05);
    ce88:	85 e0       	ldi	r24, 0x05	; 5
    ce8a:	0e 94 4b 40 	call	0x8096	; 0x8096 <SetMasterVolume>
	SetTileTable(tiles_data);
    ce8e:	86 e6       	ldi	r24, 0x66	; 102
    ce90:	9f e4       	ldi	r25, 0x4F	; 79
    ce92:	0e 94 e0 39 	call	0x73c0	; 0x73c0 <SetTileTable>
	SetSpritesTileTable(sprites_data);
    ce96:	8d e9       	ldi	r24, 0x9D	; 157
    ce98:	9e e1       	ldi	r25, 0x1E	; 30
    ce9a:	0e 94 c0 39 	call	0x7380	; 0x7380 <SetSpritesTileTable>
	}
}

void LBSetFontTilesMap(char* tiles_map)
{
	font_tiles_map = tiles_map;
    ce9e:	86 e6       	ldi	r24, 0x66	; 102
    cea0:	97 e6       	ldi	r25, 0x67	; 103
    cea2:	90 93 83 0d 	sts	0x0D83, r25
    cea6:	80 93 82 0d 	sts	0x0D82, r24
	LBSetFontTilesMap((char*) map_font);
	init_default_high_scores();
    ceaa:	0e 94 97 4b 	call	0x972e	; 0x972e <init_default_high_scores>
	load_splash();
    ceae:	0e 94 e1 5e 	call	0xbdc2	; 0xbdc2 <load_splash>
	while (1)
	{
		WaitVsync(1);
    ceb2:	81 e0       	ldi	r24, 0x01	; 1
    ceb4:	90 e0       	ldi	r25, 0x00	; 0
    ceb6:	0e 94 c5 48 	call	0x918a	; 0x918a <WaitVsync>
		LBGetJoyPadState(&game.joypadState, 0);
    ceba:	60 e0       	ldi	r22, 0x00	; 0
    cebc:	8a e9       	ldi	r24, 0x9A	; 154
    cebe:	9f e0       	ldi	r25, 0x0F	; 15
    cec0:	0e 94 88 49 	call	0x9310	; 0x9310 <LBGetJoyPadState>
		if (game.current_screen == LEVEL)
    cec4:	80 91 b6 0d 	lds	r24, 0x0DB6
    cec8:	82 30       	cpi	r24, 0x02	; 2
    ceca:	a9 f4       	brne	.+42     	; 0xcef6 <main+0x82>
		{
			update_level();
    cecc:	0e 94 80 65 	call	0xcb00	; 0xcb00 <update_level>
			update_player();
    ced0:	0e 94 81 62 	call	0xc502	; 0xc502 <update_player>
			update_shot();
    ced4:	0e 94 2a 51 	call	0xa254	; 0xa254 <update_shot>
			update_enemies();
    ced8:	0e 94 af 58 	call	0xb15e	; 0xb15e <update_enemies>
			update_enemy_shots();
    cedc:	0e 94 f4 58 	call	0xb1e8	; 0xb1e8 <update_enemy_shots>
			animate_player();
    cee0:	0e 94 fa 57 	call	0xaff4	; 0xaff4 <animate_player>
			animate_shot();
    cee4:	0e 94 76 55 	call	0xaaec	; 0xaaec <animate_shot>
			animate_enemies();
    cee8:	0e 94 8e 59 	call	0xb31c	; 0xb31c <animate_enemies>
			animate_enemy_shots();
    ceec:	0e 94 d1 5a 	call	0xb5a2	; 0xb5a2 <animate_enemy_shots>
			update_pause();
    cef0:	0e 94 c8 66 	call	0xcd90	; 0xcd90 <update_pause>
    cef4:	09 c0       	rjmp	.+18     	; 0xcf08 <main+0x94>
		}
		else if (game.current_screen == SPLASH)
    cef6:	81 11       	cpse	r24, r1
    cef8:	03 c0       	rjmp	.+6      	; 0xcf00 <main+0x8c>
		{
			update_splash();
    cefa:	0e 94 1f 60 	call	0xc03e	; 0xc03e <update_splash>
    cefe:	04 c0       	rjmp	.+8      	; 0xcf08 <main+0x94>
			
		}
		else if (game.current_screen == HIGH_SCORES)
    cf00:	81 30       	cpi	r24, 0x01	; 1
    cf02:	11 f4       	brne	.+4      	; 0xcf08 <main+0x94>
		{
			update_high_scores();
    cf04:	0e 94 66 60 	call	0xc0cc	; 0xc0cc <update_high_scores>
			
		}
		LBRotateSprites();
    cf08:	0e 94 54 4b 	call	0x96a8	; 0x96a8 <LBRotateSprites>
	}
    cf0c:	d2 cf       	rjmp	.-92     	; 0xceb2 <main+0x3e>

0000cf0e <__udivmodqi4>:
    cf0e:	99 1b       	sub	r25, r25
    cf10:	79 e0       	ldi	r23, 0x09	; 9
    cf12:	04 c0       	rjmp	.+8      	; 0xcf1c <__udivmodqi4_ep>

0000cf14 <__udivmodqi4_loop>:
    cf14:	99 1f       	adc	r25, r25
    cf16:	96 17       	cp	r25, r22
    cf18:	08 f0       	brcs	.+2      	; 0xcf1c <__udivmodqi4_ep>
    cf1a:	96 1b       	sub	r25, r22

0000cf1c <__udivmodqi4_ep>:
    cf1c:	88 1f       	adc	r24, r24
    cf1e:	7a 95       	dec	r23
    cf20:	c9 f7       	brne	.-14     	; 0xcf14 <__udivmodqi4_loop>
    cf22:	80 95       	com	r24
    cf24:	08 95       	ret

0000cf26 <__divmodqi4>:
    cf26:	87 fb       	bst	r24, 7
    cf28:	08 2e       	mov	r0, r24
    cf2a:	06 26       	eor	r0, r22
    cf2c:	87 fd       	sbrc	r24, 7
    cf2e:	81 95       	neg	r24
    cf30:	67 fd       	sbrc	r22, 7
    cf32:	61 95       	neg	r22
    cf34:	0e 94 87 67 	call	0xcf0e	; 0xcf0e <__udivmodqi4>
    cf38:	0e f4       	brtc	.+2      	; 0xcf3c <__divmodqi4_1>
    cf3a:	91 95       	neg	r25

0000cf3c <__divmodqi4_1>:
    cf3c:	07 fc       	sbrc	r0, 7
    cf3e:	81 95       	neg	r24

0000cf40 <__divmodqi4_exit>:
    cf40:	08 95       	ret

0000cf42 <__udivmodhi4>:
    cf42:	aa 1b       	sub	r26, r26
    cf44:	bb 1b       	sub	r27, r27
    cf46:	51 e1       	ldi	r21, 0x11	; 17
    cf48:	07 c0       	rjmp	.+14     	; 0xcf58 <__udivmodhi4_ep>

0000cf4a <__udivmodhi4_loop>:
    cf4a:	aa 1f       	adc	r26, r26
    cf4c:	bb 1f       	adc	r27, r27
    cf4e:	a6 17       	cp	r26, r22
    cf50:	b7 07       	cpc	r27, r23
    cf52:	10 f0       	brcs	.+4      	; 0xcf58 <__udivmodhi4_ep>
    cf54:	a6 1b       	sub	r26, r22
    cf56:	b7 0b       	sbc	r27, r23

0000cf58 <__udivmodhi4_ep>:
    cf58:	88 1f       	adc	r24, r24
    cf5a:	99 1f       	adc	r25, r25
    cf5c:	5a 95       	dec	r21
    cf5e:	a9 f7       	brne	.-22     	; 0xcf4a <__udivmodhi4_loop>
    cf60:	80 95       	com	r24
    cf62:	90 95       	com	r25
    cf64:	bc 01       	movw	r22, r24
    cf66:	cd 01       	movw	r24, r26
    cf68:	08 95       	ret

0000cf6a <__divmodhi4>:
    cf6a:	97 fb       	bst	r25, 7
    cf6c:	07 2e       	mov	r0, r23
    cf6e:	16 f4       	brtc	.+4      	; 0xcf74 <__divmodhi4+0xa>
    cf70:	00 94       	com	r0
    cf72:	07 d0       	rcall	.+14     	; 0xcf82 <__divmodhi4_neg1>
    cf74:	77 fd       	sbrc	r23, 7
    cf76:	09 d0       	rcall	.+18     	; 0xcf8a <__divmodhi4_neg2>
    cf78:	0e 94 a1 67 	call	0xcf42	; 0xcf42 <__udivmodhi4>
    cf7c:	07 fc       	sbrc	r0, 7
    cf7e:	05 d0       	rcall	.+10     	; 0xcf8a <__divmodhi4_neg2>
    cf80:	3e f4       	brtc	.+14     	; 0xcf90 <__divmodhi4_exit>

0000cf82 <__divmodhi4_neg1>:
    cf82:	90 95       	com	r25
    cf84:	81 95       	neg	r24
    cf86:	9f 4f       	sbci	r25, 0xFF	; 255
    cf88:	08 95       	ret

0000cf8a <__divmodhi4_neg2>:
    cf8a:	70 95       	com	r23
    cf8c:	61 95       	neg	r22
    cf8e:	7f 4f       	sbci	r23, 0xFF	; 255

0000cf90 <__divmodhi4_exit>:
    cf90:	08 95       	ret

0000cf92 <__tablejump2__>:
    cf92:	ee 0f       	add	r30, r30
    cf94:	ff 1f       	adc	r31, r31
    cf96:	05 90       	lpm	r0, Z+
    cf98:	f4 91       	lpm	r31, Z
    cf9a:	e0 2d       	mov	r30, r0
    cf9c:	09 94       	ijmp

0000cf9e <__subsf3>:
    cf9e:	50 58       	subi	r21, 0x80	; 128

0000cfa0 <__addsf3>:
    cfa0:	bb 27       	eor	r27, r27
    cfa2:	aa 27       	eor	r26, r26
    cfa4:	0e d0       	rcall	.+28     	; 0xcfc2 <__addsf3x>
    cfa6:	08 c1       	rjmp	.+528    	; 0xd1b8 <__fp_round>
    cfa8:	f9 d0       	rcall	.+498    	; 0xd19c <__fp_pscA>
    cfaa:	30 f0       	brcs	.+12     	; 0xcfb8 <__addsf3+0x18>
    cfac:	fe d0       	rcall	.+508    	; 0xd1aa <__fp_pscB>
    cfae:	20 f0       	brcs	.+8      	; 0xcfb8 <__addsf3+0x18>
    cfb0:	31 f4       	brne	.+12     	; 0xcfbe <__addsf3+0x1e>
    cfb2:	9f 3f       	cpi	r25, 0xFF	; 255
    cfb4:	11 f4       	brne	.+4      	; 0xcfba <__addsf3+0x1a>
    cfb6:	1e f4       	brtc	.+6      	; 0xcfbe <__addsf3+0x1e>
    cfb8:	ee c0       	rjmp	.+476    	; 0xd196 <__fp_nan>
    cfba:	0e f4       	brtc	.+2      	; 0xcfbe <__addsf3+0x1e>
    cfbc:	e0 95       	com	r30
    cfbe:	e7 fb       	bst	r30, 7
    cfc0:	e4 c0       	rjmp	.+456    	; 0xd18a <__fp_inf>

0000cfc2 <__addsf3x>:
    cfc2:	e9 2f       	mov	r30, r25
    cfc4:	0a d1       	rcall	.+532    	; 0xd1da <__fp_split3>
    cfc6:	80 f3       	brcs	.-32     	; 0xcfa8 <__addsf3+0x8>
    cfc8:	ba 17       	cp	r27, r26
    cfca:	62 07       	cpc	r22, r18
    cfcc:	73 07       	cpc	r23, r19
    cfce:	84 07       	cpc	r24, r20
    cfd0:	95 07       	cpc	r25, r21
    cfd2:	18 f0       	brcs	.+6      	; 0xcfda <__addsf3x+0x18>
    cfd4:	71 f4       	brne	.+28     	; 0xcff2 <__addsf3x+0x30>
    cfd6:	9e f5       	brtc	.+102    	; 0xd03e <__addsf3x+0x7c>
    cfd8:	22 c1       	rjmp	.+580    	; 0xd21e <__fp_zero>
    cfda:	0e f4       	brtc	.+2      	; 0xcfde <__addsf3x+0x1c>
    cfdc:	e0 95       	com	r30
    cfde:	0b 2e       	mov	r0, r27
    cfe0:	ba 2f       	mov	r27, r26
    cfe2:	a0 2d       	mov	r26, r0
    cfe4:	0b 01       	movw	r0, r22
    cfe6:	b9 01       	movw	r22, r18
    cfe8:	90 01       	movw	r18, r0
    cfea:	0c 01       	movw	r0, r24
    cfec:	ca 01       	movw	r24, r20
    cfee:	a0 01       	movw	r20, r0
    cff0:	11 24       	eor	r1, r1
    cff2:	ff 27       	eor	r31, r31
    cff4:	59 1b       	sub	r21, r25
    cff6:	99 f0       	breq	.+38     	; 0xd01e <__addsf3x+0x5c>
    cff8:	59 3f       	cpi	r21, 0xF9	; 249
    cffa:	50 f4       	brcc	.+20     	; 0xd010 <__addsf3x+0x4e>
    cffc:	50 3e       	cpi	r21, 0xE0	; 224
    cffe:	68 f1       	brcs	.+90     	; 0xd05a <__addsf3x+0x98>
    d000:	1a 16       	cp	r1, r26
    d002:	f0 40       	sbci	r31, 0x00	; 0
    d004:	a2 2f       	mov	r26, r18
    d006:	23 2f       	mov	r18, r19
    d008:	34 2f       	mov	r19, r20
    d00a:	44 27       	eor	r20, r20
    d00c:	58 5f       	subi	r21, 0xF8	; 248
    d00e:	f3 cf       	rjmp	.-26     	; 0xcff6 <__addsf3x+0x34>
    d010:	46 95       	lsr	r20
    d012:	37 95       	ror	r19
    d014:	27 95       	ror	r18
    d016:	a7 95       	ror	r26
    d018:	f0 40       	sbci	r31, 0x00	; 0
    d01a:	53 95       	inc	r21
    d01c:	c9 f7       	brne	.-14     	; 0xd010 <__addsf3x+0x4e>
    d01e:	7e f4       	brtc	.+30     	; 0xd03e <__addsf3x+0x7c>
    d020:	1f 16       	cp	r1, r31
    d022:	ba 0b       	sbc	r27, r26
    d024:	62 0b       	sbc	r22, r18
    d026:	73 0b       	sbc	r23, r19
    d028:	84 0b       	sbc	r24, r20
    d02a:	ba f0       	brmi	.+46     	; 0xd05a <__addsf3x+0x98>
    d02c:	91 50       	subi	r25, 0x01	; 1
    d02e:	a1 f0       	breq	.+40     	; 0xd058 <__addsf3x+0x96>
    d030:	ff 0f       	add	r31, r31
    d032:	bb 1f       	adc	r27, r27
    d034:	66 1f       	adc	r22, r22
    d036:	77 1f       	adc	r23, r23
    d038:	88 1f       	adc	r24, r24
    d03a:	c2 f7       	brpl	.-16     	; 0xd02c <__addsf3x+0x6a>
    d03c:	0e c0       	rjmp	.+28     	; 0xd05a <__addsf3x+0x98>
    d03e:	ba 0f       	add	r27, r26
    d040:	62 1f       	adc	r22, r18
    d042:	73 1f       	adc	r23, r19
    d044:	84 1f       	adc	r24, r20
    d046:	48 f4       	brcc	.+18     	; 0xd05a <__addsf3x+0x98>
    d048:	87 95       	ror	r24
    d04a:	77 95       	ror	r23
    d04c:	67 95       	ror	r22
    d04e:	b7 95       	ror	r27
    d050:	f7 95       	ror	r31
    d052:	9e 3f       	cpi	r25, 0xFE	; 254
    d054:	08 f0       	brcs	.+2      	; 0xd058 <__addsf3x+0x96>
    d056:	b3 cf       	rjmp	.-154    	; 0xcfbe <__addsf3+0x1e>
    d058:	93 95       	inc	r25
    d05a:	88 0f       	add	r24, r24
    d05c:	08 f0       	brcs	.+2      	; 0xd060 <__addsf3x+0x9e>
    d05e:	99 27       	eor	r25, r25
    d060:	ee 0f       	add	r30, r30
    d062:	97 95       	ror	r25
    d064:	87 95       	ror	r24
    d066:	08 95       	ret

0000d068 <__cmpsf2>:
    d068:	6c d0       	rcall	.+216    	; 0xd142 <__fp_cmp>
    d06a:	08 f4       	brcc	.+2      	; 0xd06e <__cmpsf2+0x6>
    d06c:	81 e0       	ldi	r24, 0x01	; 1
    d06e:	08 95       	ret

0000d070 <__fixunssfsi>:
    d070:	bc d0       	rcall	.+376    	; 0xd1ea <__fp_splitA>
    d072:	88 f0       	brcs	.+34     	; 0xd096 <__fixunssfsi+0x26>
    d074:	9f 57       	subi	r25, 0x7F	; 127
    d076:	90 f0       	brcs	.+36     	; 0xd09c <__fixunssfsi+0x2c>
    d078:	b9 2f       	mov	r27, r25
    d07a:	99 27       	eor	r25, r25
    d07c:	b7 51       	subi	r27, 0x17	; 23
    d07e:	a0 f0       	brcs	.+40     	; 0xd0a8 <__fixunssfsi+0x38>
    d080:	d1 f0       	breq	.+52     	; 0xd0b6 <__fixunssfsi+0x46>
    d082:	66 0f       	add	r22, r22
    d084:	77 1f       	adc	r23, r23
    d086:	88 1f       	adc	r24, r24
    d088:	99 1f       	adc	r25, r25
    d08a:	1a f0       	brmi	.+6      	; 0xd092 <__fixunssfsi+0x22>
    d08c:	ba 95       	dec	r27
    d08e:	c9 f7       	brne	.-14     	; 0xd082 <__fixunssfsi+0x12>
    d090:	12 c0       	rjmp	.+36     	; 0xd0b6 <__fixunssfsi+0x46>
    d092:	b1 30       	cpi	r27, 0x01	; 1
    d094:	81 f0       	breq	.+32     	; 0xd0b6 <__fixunssfsi+0x46>
    d096:	c3 d0       	rcall	.+390    	; 0xd21e <__fp_zero>
    d098:	b1 e0       	ldi	r27, 0x01	; 1
    d09a:	08 95       	ret
    d09c:	c0 c0       	rjmp	.+384    	; 0xd21e <__fp_zero>
    d09e:	67 2f       	mov	r22, r23
    d0a0:	78 2f       	mov	r23, r24
    d0a2:	88 27       	eor	r24, r24
    d0a4:	b8 5f       	subi	r27, 0xF8	; 248
    d0a6:	39 f0       	breq	.+14     	; 0xd0b6 <__fixunssfsi+0x46>
    d0a8:	b9 3f       	cpi	r27, 0xF9	; 249
    d0aa:	cc f3       	brlt	.-14     	; 0xd09e <__fixunssfsi+0x2e>
    d0ac:	86 95       	lsr	r24
    d0ae:	77 95       	ror	r23
    d0b0:	67 95       	ror	r22
    d0b2:	b3 95       	inc	r27
    d0b4:	d9 f7       	brne	.-10     	; 0xd0ac <__fixunssfsi+0x3c>
    d0b6:	3e f4       	brtc	.+14     	; 0xd0c6 <__fixunssfsi+0x56>
    d0b8:	90 95       	com	r25
    d0ba:	80 95       	com	r24
    d0bc:	70 95       	com	r23
    d0be:	61 95       	neg	r22
    d0c0:	7f 4f       	sbci	r23, 0xFF	; 255
    d0c2:	8f 4f       	sbci	r24, 0xFF	; 255
    d0c4:	9f 4f       	sbci	r25, 0xFF	; 255
    d0c6:	08 95       	ret

0000d0c8 <__floatunsisf>:
    d0c8:	e8 94       	clt
    d0ca:	09 c0       	rjmp	.+18     	; 0xd0de <__floatsisf+0x12>

0000d0cc <__floatsisf>:
    d0cc:	97 fb       	bst	r25, 7
    d0ce:	3e f4       	brtc	.+14     	; 0xd0de <__floatsisf+0x12>
    d0d0:	90 95       	com	r25
    d0d2:	80 95       	com	r24
    d0d4:	70 95       	com	r23
    d0d6:	61 95       	neg	r22
    d0d8:	7f 4f       	sbci	r23, 0xFF	; 255
    d0da:	8f 4f       	sbci	r24, 0xFF	; 255
    d0dc:	9f 4f       	sbci	r25, 0xFF	; 255
    d0de:	99 23       	and	r25, r25
    d0e0:	a9 f0       	breq	.+42     	; 0xd10c <__floatsisf+0x40>
    d0e2:	f9 2f       	mov	r31, r25
    d0e4:	96 e9       	ldi	r25, 0x96	; 150
    d0e6:	bb 27       	eor	r27, r27
    d0e8:	93 95       	inc	r25
    d0ea:	f6 95       	lsr	r31
    d0ec:	87 95       	ror	r24
    d0ee:	77 95       	ror	r23
    d0f0:	67 95       	ror	r22
    d0f2:	b7 95       	ror	r27
    d0f4:	f1 11       	cpse	r31, r1
    d0f6:	f8 cf       	rjmp	.-16     	; 0xd0e8 <__floatsisf+0x1c>
    d0f8:	fa f4       	brpl	.+62     	; 0xd138 <__floatsisf+0x6c>
    d0fa:	bb 0f       	add	r27, r27
    d0fc:	11 f4       	brne	.+4      	; 0xd102 <__floatsisf+0x36>
    d0fe:	60 ff       	sbrs	r22, 0
    d100:	1b c0       	rjmp	.+54     	; 0xd138 <__floatsisf+0x6c>
    d102:	6f 5f       	subi	r22, 0xFF	; 255
    d104:	7f 4f       	sbci	r23, 0xFF	; 255
    d106:	8f 4f       	sbci	r24, 0xFF	; 255
    d108:	9f 4f       	sbci	r25, 0xFF	; 255
    d10a:	16 c0       	rjmp	.+44     	; 0xd138 <__floatsisf+0x6c>
    d10c:	88 23       	and	r24, r24
    d10e:	11 f0       	breq	.+4      	; 0xd114 <__floatsisf+0x48>
    d110:	96 e9       	ldi	r25, 0x96	; 150
    d112:	11 c0       	rjmp	.+34     	; 0xd136 <__floatsisf+0x6a>
    d114:	77 23       	and	r23, r23
    d116:	21 f0       	breq	.+8      	; 0xd120 <__floatsisf+0x54>
    d118:	9e e8       	ldi	r25, 0x8E	; 142
    d11a:	87 2f       	mov	r24, r23
    d11c:	76 2f       	mov	r23, r22
    d11e:	05 c0       	rjmp	.+10     	; 0xd12a <__floatsisf+0x5e>
    d120:	66 23       	and	r22, r22
    d122:	71 f0       	breq	.+28     	; 0xd140 <__floatsisf+0x74>
    d124:	96 e8       	ldi	r25, 0x86	; 134
    d126:	86 2f       	mov	r24, r22
    d128:	70 e0       	ldi	r23, 0x00	; 0
    d12a:	60 e0       	ldi	r22, 0x00	; 0
    d12c:	2a f0       	brmi	.+10     	; 0xd138 <__floatsisf+0x6c>
    d12e:	9a 95       	dec	r25
    d130:	66 0f       	add	r22, r22
    d132:	77 1f       	adc	r23, r23
    d134:	88 1f       	adc	r24, r24
    d136:	da f7       	brpl	.-10     	; 0xd12e <__floatsisf+0x62>
    d138:	88 0f       	add	r24, r24
    d13a:	96 95       	lsr	r25
    d13c:	87 95       	ror	r24
    d13e:	97 f9       	bld	r25, 7
    d140:	08 95       	ret

0000d142 <__fp_cmp>:
    d142:	99 0f       	add	r25, r25
    d144:	00 08       	sbc	r0, r0
    d146:	55 0f       	add	r21, r21
    d148:	aa 0b       	sbc	r26, r26
    d14a:	e0 e8       	ldi	r30, 0x80	; 128
    d14c:	fe ef       	ldi	r31, 0xFE	; 254
    d14e:	16 16       	cp	r1, r22
    d150:	17 06       	cpc	r1, r23
    d152:	e8 07       	cpc	r30, r24
    d154:	f9 07       	cpc	r31, r25
    d156:	c0 f0       	brcs	.+48     	; 0xd188 <__fp_cmp+0x46>
    d158:	12 16       	cp	r1, r18
    d15a:	13 06       	cpc	r1, r19
    d15c:	e4 07       	cpc	r30, r20
    d15e:	f5 07       	cpc	r31, r21
    d160:	98 f0       	brcs	.+38     	; 0xd188 <__fp_cmp+0x46>
    d162:	62 1b       	sub	r22, r18
    d164:	73 0b       	sbc	r23, r19
    d166:	84 0b       	sbc	r24, r20
    d168:	95 0b       	sbc	r25, r21
    d16a:	39 f4       	brne	.+14     	; 0xd17a <__fp_cmp+0x38>
    d16c:	0a 26       	eor	r0, r26
    d16e:	61 f0       	breq	.+24     	; 0xd188 <__fp_cmp+0x46>
    d170:	23 2b       	or	r18, r19
    d172:	24 2b       	or	r18, r20
    d174:	25 2b       	or	r18, r21
    d176:	21 f4       	brne	.+8      	; 0xd180 <__fp_cmp+0x3e>
    d178:	08 95       	ret
    d17a:	0a 26       	eor	r0, r26
    d17c:	09 f4       	brne	.+2      	; 0xd180 <__fp_cmp+0x3e>
    d17e:	a1 40       	sbci	r26, 0x01	; 1
    d180:	a6 95       	lsr	r26
    d182:	8f ef       	ldi	r24, 0xFF	; 255
    d184:	81 1d       	adc	r24, r1
    d186:	81 1d       	adc	r24, r1
    d188:	08 95       	ret

0000d18a <__fp_inf>:
    d18a:	97 f9       	bld	r25, 7
    d18c:	9f 67       	ori	r25, 0x7F	; 127
    d18e:	80 e8       	ldi	r24, 0x80	; 128
    d190:	70 e0       	ldi	r23, 0x00	; 0
    d192:	60 e0       	ldi	r22, 0x00	; 0
    d194:	08 95       	ret

0000d196 <__fp_nan>:
    d196:	9f ef       	ldi	r25, 0xFF	; 255
    d198:	80 ec       	ldi	r24, 0xC0	; 192
    d19a:	08 95       	ret

0000d19c <__fp_pscA>:
    d19c:	00 24       	eor	r0, r0
    d19e:	0a 94       	dec	r0
    d1a0:	16 16       	cp	r1, r22
    d1a2:	17 06       	cpc	r1, r23
    d1a4:	18 06       	cpc	r1, r24
    d1a6:	09 06       	cpc	r0, r25
    d1a8:	08 95       	ret

0000d1aa <__fp_pscB>:
    d1aa:	00 24       	eor	r0, r0
    d1ac:	0a 94       	dec	r0
    d1ae:	12 16       	cp	r1, r18
    d1b0:	13 06       	cpc	r1, r19
    d1b2:	14 06       	cpc	r1, r20
    d1b4:	05 06       	cpc	r0, r21
    d1b6:	08 95       	ret

0000d1b8 <__fp_round>:
    d1b8:	09 2e       	mov	r0, r25
    d1ba:	03 94       	inc	r0
    d1bc:	00 0c       	add	r0, r0
    d1be:	11 f4       	brne	.+4      	; 0xd1c4 <__fp_round+0xc>
    d1c0:	88 23       	and	r24, r24
    d1c2:	52 f0       	brmi	.+20     	; 0xd1d8 <__fp_round+0x20>
    d1c4:	bb 0f       	add	r27, r27
    d1c6:	40 f4       	brcc	.+16     	; 0xd1d8 <__fp_round+0x20>
    d1c8:	bf 2b       	or	r27, r31
    d1ca:	11 f4       	brne	.+4      	; 0xd1d0 <__fp_round+0x18>
    d1cc:	60 ff       	sbrs	r22, 0
    d1ce:	04 c0       	rjmp	.+8      	; 0xd1d8 <__fp_round+0x20>
    d1d0:	6f 5f       	subi	r22, 0xFF	; 255
    d1d2:	7f 4f       	sbci	r23, 0xFF	; 255
    d1d4:	8f 4f       	sbci	r24, 0xFF	; 255
    d1d6:	9f 4f       	sbci	r25, 0xFF	; 255
    d1d8:	08 95       	ret

0000d1da <__fp_split3>:
    d1da:	57 fd       	sbrc	r21, 7
    d1dc:	90 58       	subi	r25, 0x80	; 128
    d1de:	44 0f       	add	r20, r20
    d1e0:	55 1f       	adc	r21, r21
    d1e2:	59 f0       	breq	.+22     	; 0xd1fa <__fp_splitA+0x10>
    d1e4:	5f 3f       	cpi	r21, 0xFF	; 255
    d1e6:	71 f0       	breq	.+28     	; 0xd204 <__fp_splitA+0x1a>
    d1e8:	47 95       	ror	r20

0000d1ea <__fp_splitA>:
    d1ea:	88 0f       	add	r24, r24
    d1ec:	97 fb       	bst	r25, 7
    d1ee:	99 1f       	adc	r25, r25
    d1f0:	61 f0       	breq	.+24     	; 0xd20a <__fp_splitA+0x20>
    d1f2:	9f 3f       	cpi	r25, 0xFF	; 255
    d1f4:	79 f0       	breq	.+30     	; 0xd214 <__fp_splitA+0x2a>
    d1f6:	87 95       	ror	r24
    d1f8:	08 95       	ret
    d1fa:	12 16       	cp	r1, r18
    d1fc:	13 06       	cpc	r1, r19
    d1fe:	14 06       	cpc	r1, r20
    d200:	55 1f       	adc	r21, r21
    d202:	f2 cf       	rjmp	.-28     	; 0xd1e8 <__fp_split3+0xe>
    d204:	46 95       	lsr	r20
    d206:	f1 df       	rcall	.-30     	; 0xd1ea <__fp_splitA>
    d208:	08 c0       	rjmp	.+16     	; 0xd21a <__fp_splitA+0x30>
    d20a:	16 16       	cp	r1, r22
    d20c:	17 06       	cpc	r1, r23
    d20e:	18 06       	cpc	r1, r24
    d210:	99 1f       	adc	r25, r25
    d212:	f1 cf       	rjmp	.-30     	; 0xd1f6 <__fp_splitA+0xc>
    d214:	86 95       	lsr	r24
    d216:	71 05       	cpc	r23, r1
    d218:	61 05       	cpc	r22, r1
    d21a:	08 94       	sec
    d21c:	08 95       	ret

0000d21e <__fp_zero>:
    d21e:	e8 94       	clt

0000d220 <__fp_szero>:
    d220:	bb 27       	eor	r27, r27
    d222:	66 27       	eor	r22, r22
    d224:	77 27       	eor	r23, r23
    d226:	cb 01       	movw	r24, r22
    d228:	97 f9       	bld	r25, 7
    d22a:	08 95       	ret

0000d22c <__gesf2>:
    d22c:	8a df       	rcall	.-236    	; 0xd142 <__fp_cmp>
    d22e:	08 f4       	brcc	.+2      	; 0xd232 <__gesf2+0x6>
    d230:	8f ef       	ldi	r24, 0xFF	; 255
    d232:	08 95       	ret

0000d234 <__mulsf3>:
    d234:	0b d0       	rcall	.+22     	; 0xd24c <__mulsf3x>
    d236:	c0 cf       	rjmp	.-128    	; 0xd1b8 <__fp_round>
    d238:	b1 df       	rcall	.-158    	; 0xd19c <__fp_pscA>
    d23a:	28 f0       	brcs	.+10     	; 0xd246 <__mulsf3+0x12>
    d23c:	b6 df       	rcall	.-148    	; 0xd1aa <__fp_pscB>
    d23e:	18 f0       	brcs	.+6      	; 0xd246 <__mulsf3+0x12>
    d240:	95 23       	and	r25, r21
    d242:	09 f0       	breq	.+2      	; 0xd246 <__mulsf3+0x12>
    d244:	a2 cf       	rjmp	.-188    	; 0xd18a <__fp_inf>
    d246:	a7 cf       	rjmp	.-178    	; 0xd196 <__fp_nan>
    d248:	11 24       	eor	r1, r1
    d24a:	ea cf       	rjmp	.-44     	; 0xd220 <__fp_szero>

0000d24c <__mulsf3x>:
    d24c:	c6 df       	rcall	.-116    	; 0xd1da <__fp_split3>
    d24e:	a0 f3       	brcs	.-24     	; 0xd238 <__mulsf3+0x4>

0000d250 <__mulsf3_pse>:
    d250:	95 9f       	mul	r25, r21
    d252:	d1 f3       	breq	.-12     	; 0xd248 <__mulsf3+0x14>
    d254:	95 0f       	add	r25, r21
    d256:	50 e0       	ldi	r21, 0x00	; 0
    d258:	55 1f       	adc	r21, r21
    d25a:	62 9f       	mul	r22, r18
    d25c:	f0 01       	movw	r30, r0
    d25e:	72 9f       	mul	r23, r18
    d260:	bb 27       	eor	r27, r27
    d262:	f0 0d       	add	r31, r0
    d264:	b1 1d       	adc	r27, r1
    d266:	63 9f       	mul	r22, r19
    d268:	aa 27       	eor	r26, r26
    d26a:	f0 0d       	add	r31, r0
    d26c:	b1 1d       	adc	r27, r1
    d26e:	aa 1f       	adc	r26, r26
    d270:	64 9f       	mul	r22, r20
    d272:	66 27       	eor	r22, r22
    d274:	b0 0d       	add	r27, r0
    d276:	a1 1d       	adc	r26, r1
    d278:	66 1f       	adc	r22, r22
    d27a:	82 9f       	mul	r24, r18
    d27c:	22 27       	eor	r18, r18
    d27e:	b0 0d       	add	r27, r0
    d280:	a1 1d       	adc	r26, r1
    d282:	62 1f       	adc	r22, r18
    d284:	73 9f       	mul	r23, r19
    d286:	b0 0d       	add	r27, r0
    d288:	a1 1d       	adc	r26, r1
    d28a:	62 1f       	adc	r22, r18
    d28c:	83 9f       	mul	r24, r19
    d28e:	a0 0d       	add	r26, r0
    d290:	61 1d       	adc	r22, r1
    d292:	22 1f       	adc	r18, r18
    d294:	74 9f       	mul	r23, r20
    d296:	33 27       	eor	r19, r19
    d298:	a0 0d       	add	r26, r0
    d29a:	61 1d       	adc	r22, r1
    d29c:	23 1f       	adc	r18, r19
    d29e:	84 9f       	mul	r24, r20
    d2a0:	60 0d       	add	r22, r0
    d2a2:	21 1d       	adc	r18, r1
    d2a4:	82 2f       	mov	r24, r18
    d2a6:	76 2f       	mov	r23, r22
    d2a8:	6a 2f       	mov	r22, r26
    d2aa:	11 24       	eor	r1, r1
    d2ac:	9f 57       	subi	r25, 0x7F	; 127
    d2ae:	50 40       	sbci	r21, 0x00	; 0
    d2b0:	8a f0       	brmi	.+34     	; 0xd2d4 <__mulsf3_pse+0x84>
    d2b2:	e1 f0       	breq	.+56     	; 0xd2ec <__mulsf3_pse+0x9c>
    d2b4:	88 23       	and	r24, r24
    d2b6:	4a f0       	brmi	.+18     	; 0xd2ca <__mulsf3_pse+0x7a>
    d2b8:	ee 0f       	add	r30, r30
    d2ba:	ff 1f       	adc	r31, r31
    d2bc:	bb 1f       	adc	r27, r27
    d2be:	66 1f       	adc	r22, r22
    d2c0:	77 1f       	adc	r23, r23
    d2c2:	88 1f       	adc	r24, r24
    d2c4:	91 50       	subi	r25, 0x01	; 1
    d2c6:	50 40       	sbci	r21, 0x00	; 0
    d2c8:	a9 f7       	brne	.-22     	; 0xd2b4 <__mulsf3_pse+0x64>
    d2ca:	9e 3f       	cpi	r25, 0xFE	; 254
    d2cc:	51 05       	cpc	r21, r1
    d2ce:	70 f0       	brcs	.+28     	; 0xd2ec <__mulsf3_pse+0x9c>
    d2d0:	5c cf       	rjmp	.-328    	; 0xd18a <__fp_inf>
    d2d2:	a6 cf       	rjmp	.-180    	; 0xd220 <__fp_szero>
    d2d4:	5f 3f       	cpi	r21, 0xFF	; 255
    d2d6:	ec f3       	brlt	.-6      	; 0xd2d2 <__mulsf3_pse+0x82>
    d2d8:	98 3e       	cpi	r25, 0xE8	; 232
    d2da:	dc f3       	brlt	.-10     	; 0xd2d2 <__mulsf3_pse+0x82>
    d2dc:	86 95       	lsr	r24
    d2de:	77 95       	ror	r23
    d2e0:	67 95       	ror	r22
    d2e2:	b7 95       	ror	r27
    d2e4:	f7 95       	ror	r31
    d2e6:	e7 95       	ror	r30
    d2e8:	9f 5f       	subi	r25, 0xFF	; 255
    d2ea:	c1 f7       	brne	.-16     	; 0xd2dc <__mulsf3_pse+0x8c>
    d2ec:	fe 2b       	or	r31, r30
    d2ee:	88 0f       	add	r24, r24
    d2f0:	91 1d       	adc	r25, r1
    d2f2:	96 95       	lsr	r25
    d2f4:	87 95       	ror	r24
    d2f6:	97 f9       	bld	r25, 7
    d2f8:	08 95       	ret

0000d2fa <strnlen_P>:
    d2fa:	fc 01       	movw	r30, r24
    d2fc:	05 90       	lpm	r0, Z+
    d2fe:	61 50       	subi	r22, 0x01	; 1
    d300:	70 40       	sbci	r23, 0x00	; 0
    d302:	01 10       	cpse	r0, r1
    d304:	d8 f7       	brcc	.-10     	; 0xd2fc <strnlen_P+0x2>
    d306:	80 95       	com	r24
    d308:	90 95       	com	r25
    d30a:	8e 0f       	add	r24, r30
    d30c:	9f 1f       	adc	r25, r31
    d30e:	08 95       	ret

0000d310 <_exit>:
    d310:	f8 94       	cli

0000d312 <__stop_program>:
    d312:	ff cf       	rjmp	.-2      	; 0xd312 <__stop_program>
