
Iris.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800500  0000a49a  0000a59a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .noinit       00000400  00800100  00800100  0000a5a0  2**5
                  CONTENTS, READONLY
  2 .text         0000a49a  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .bss          00000aee  00800502  00800502  0000a59c  2**1
                  ALLOC
  4 .stab         00000618  00000000  00000000  0000a9a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000002a5  00000000  00000000  0000afb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  0000b25d  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000005e0  00000000  00000000  0000b270  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000710c  00000000  00000000  0000b850  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000015b7  00000000  00000000  0001295c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00001e16  00000000  00000000  00013f13  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000011ec  00000000  00000000  00015d2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000185e  00000000  00000000  00016f18  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00006052  00000000  00000000  00018776  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000006e0  00000000  00000000  0001e7c8  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 99 26 	jmp	0x4d32	; 0x4d32 <__ctors_end>
       4:	0c 94 02 27 	jmp	0x4e04	; 0x4e04 <__bad_interrupt>
       8:	0c 94 02 27 	jmp	0x4e04	; 0x4e04 <__bad_interrupt>
       c:	0c 94 02 27 	jmp	0x4e04	; 0x4e04 <__bad_interrupt>
      10:	0c 94 02 27 	jmp	0x4e04	; 0x4e04 <__bad_interrupt>
      14:	0c 94 02 27 	jmp	0x4e04	; 0x4e04 <__bad_interrupt>
      18:	0c 94 02 27 	jmp	0x4e04	; 0x4e04 <__bad_interrupt>
      1c:	0c 94 02 27 	jmp	0x4e04	; 0x4e04 <__bad_interrupt>
      20:	0c 94 7c 2c 	jmp	0x58f8	; 0x58f8 <__vector_8>
      24:	0c 94 02 27 	jmp	0x4e04	; 0x4e04 <__bad_interrupt>
      28:	0c 94 02 27 	jmp	0x4e04	; 0x4e04 <__bad_interrupt>
      2c:	0c 94 02 27 	jmp	0x4e04	; 0x4e04 <__bad_interrupt>
      30:	0c 94 02 27 	jmp	0x4e04	; 0x4e04 <__bad_interrupt>
      34:	0c 94 46 2a 	jmp	0x548c	; 0x548c <__vector_13>
      38:	0c 94 86 2a 	jmp	0x550c	; 0x550c <__vector_14>
      3c:	0c 94 02 27 	jmp	0x4e04	; 0x4e04 <__bad_interrupt>
      40:	0c 94 02 27 	jmp	0x4e04	; 0x4e04 <__bad_interrupt>
      44:	0c 94 02 27 	jmp	0x4e04	; 0x4e04 <__bad_interrupt>
      48:	0c 94 02 27 	jmp	0x4e04	; 0x4e04 <__bad_interrupt>
      4c:	0c 94 02 27 	jmp	0x4e04	; 0x4e04 <__bad_interrupt>
      50:	0c 94 02 27 	jmp	0x4e04	; 0x4e04 <__bad_interrupt>
      54:	0c 94 02 27 	jmp	0x4e04	; 0x4e04 <__bad_interrupt>
      58:	0c 94 02 27 	jmp	0x4e04	; 0x4e04 <__bad_interrupt>
      5c:	0c 94 02 27 	jmp	0x4e04	; 0x4e04 <__bad_interrupt>
      60:	0c 94 02 27 	jmp	0x4e04	; 0x4e04 <__bad_interrupt>
      64:	0c 94 02 27 	jmp	0x4e04	; 0x4e04 <__bad_interrupt>
      68:	0c 94 02 27 	jmp	0x4e04	; 0x4e04 <__bad_interrupt>
      6c:	0c 94 02 27 	jmp	0x4e04	; 0x4e04 <__bad_interrupt>
      70:	47 3e       	cpi	r20, 0xE7	; 231
      72:	4a 3e       	cpi	r20, 0xEA	; 234
      74:	4d 3e       	cpi	r20, 0xED	; 237
      76:	50 3e       	cpi	r21, 0xE0	; 224
      78:	53 3e       	cpi	r21, 0xE3	; 227
      7a:	56 3e       	cpi	r21, 0xE6	; 230
      7c:	59 3e       	cpi	r21, 0xE9	; 233

0000007e <__trampolines_end>:
      7e:	81 00       	.word	0x0081	; ????
      80:	45 00       	.word	0x0045	; ????
      82:	27 ff       	sbrs	r18, 7
      84:	24 ff       	sbrs	r18, 4
      86:	2a 90       	ld	r2, -Y
      88:	2b 1c       	adc	r2, r11
      8a:	21 0c       	add	r2, r1
      8c:	22 fb       	bst	r18, 2
      8e:	85 00       	.word	0x0085	; ????
      90:	84 00       	.word	0x0084	; ????
      92:	89 03       	fmulsu	r16, r17
      94:	88 8d       	ldd	r24, Y+24	; 0x18
      96:	81 09       	sbc	r24, r1
      98:	6f 02       	muls	r22, r31
      9a:	44 42       	sbci	r20, 0x24	; 36
      9c:	47 00       	.word	0x0047	; ????
      9e:	45 01       	movw	r8, r10
      a0:	b0 83       	st	Z, r27
      a2:	b3 00       	.word	0x00b3	; ????
      a4:	b1 01       	movw	r22, r2
      a6:	25 11       	cpse	r18, r5
      a8:	8a 4f       	sbci	r24, 0xFA	; 250
      aa:	8b 03       	fmulsu	r16, r19

000000ac <eeprom_format_table>:
      ac:	5a 55 01 20 01 01 00 38 08 00 00 00 00 00 00 00     ZU. ...8........
	...

000000cc <patchCommands>:
      cc:	c4 2d c7 2d 23 2e 27 2e 2e 2e cf 2d d4 2d d9 2d     .-.-#.'....-.-.-
      dc:	36 2e dc 2d df 2d e2 2d 1d 2e 20 2e 46 2e           6..-.-.-.. .F.

000000ea <fader>:
      ea:	00 40 88 91 d2 e4 ad b5 b6 be bf ff                 .@..........

000000f6 <map_uzeboxlogo2>:
      f6:	05 03 00 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f     ................
	...

00000107 <map_uzeboxlogo>:
     107:	05 04 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d     ................
     117:	00 0e 0f 10 11 12                                   ......

0000011d <logo_tileset>:
	...
     179:	00 00 00 49 00 00 00 00 00 49 52 52 00 00 00 49     ...I.....IRR...I
     189:	52 53 1c 25 00 49 52 52 24 25 25 1b 52 52 5c 2d     RS.%.IRR$%%.RR\-
     199:	2d 1c 12 12 00 00 00 00 00 00 00 00 00 00 00 00     -...............
     1a9:	40 49 49 49 00 40 49 49 52 5b 5b 5b 4a 52 52 5b     @III.@IIR[[[JRR[
     1b9:	1c 1c 13 12 5b 1c 24 1c 12 09 09 09 24 1b 12 09     ....[.$.....$...
     1c9:	09 09 09 0a 0a 0a 0a 0a 0a 0a 0a 13 0a 0a 12 0a     ................
     1d9:	0a 12 13 0a 00 00 00 00 00 00 00 00 92 52 52 52     .............RRR
     1e9:	52 52 52 49 13 12 13 09 00 1c 1b 13 0a 12 12 40     RRRI...........@
     1f9:	1b 65 64 1c 09 0a 00 09 24 1b 1c 65 12 00 00 25     .ed.....$..e...%
     209:	1c 1c 1c 1c 01 00 25 24 1c 1c 1c 1c 00 24 25 24     ......%$.....$%$
     219:	24 24 1c 1c 00 00 00 00 00 00 00 00 49 40 00 00     $$..........I@..
     229:	00 00 00 00 52 49 49 00 00 00 00 00 1c 5b 4a 48     ....RII......[JH
     239:	00 00 00 00 1c 25 52 49 00 00 00 00 65 24 64 49     .....%RI....e$dI
     249:	00 00 00 00 65 25 64 49 00 00 00 00 6d 2e 5c 49     ....e%dI....m.\I
	...
     261:	00 00 40 52 00 00 00 00 00 49 52 5c 00 00 00 00     ..@R.....IR\....
     271:	53 52 24 25 00 00 00 53 52 25 25 25 00 00 4a 52     SR$%...SR%%%..JR
     281:	25 25 1b 00 00 00 5b 25 13 00 00 1b 00 5b 53 00     %%....[%.....[S.
     291:	0a 1c 37 37 09 5b 1c 65 7f 37 2e 2e 52 2e 2e 1c     ..77.[.e.7..R...
     2a1:	13 13 12 00 2e 25 1b 13 12 00 00 12 1c 1c 12 00     .....%..........
     2b1:	00 12 25 1c 12 00 00 12 2e 37 1c 13 00 13 2e 37     ..%......7.....7
     2c1:	36 1c 13 1b 37 37 2e 2e 25 13 1c 1c 2e 2e 2e 2e     6...77..%.......
     2d1:	1b 1c 1c 1c 6e 6e 6e 1c 1c 1c 1c 1c 09 13 13 12     ....nnn.........
     2e1:	12 13 13 00 13 13 13 13 13 1c 00 09 13 13 13 13     ................
     2f1:	1c 01 00 37 13 13 13 1c 13 00 2e 2e 1b 1b 1c 1c     ...7............
     301:	00 1c 77 2e 1b 1b 25 00 13 7f 25 1c 1c 1c 01 0a     ..w...%...%.....
     311:	37 24 1c 1c 1c 13 0a 2e 25 25 09 00 13 2e 24 25     7$......%%....$%
     321:	25 25 25 25 2e 25 25 25 25 25 25 25 25 25 2d 2e     %%%%.%%%%%%%%%-.
     331:	25 1b 1c 1c 2e 2e 25 1c 13 25 1b 13 25 1c 1c 1c     %.....%..%..%...
     341:	1c 01 09 52 1c 1c 13 00 01 1c 5b 5c 0a 00 01 65     ...R......[\...e
     351:	77 5c 1b 00 01 6e 7f 6e 52 1b 00 00 6d 1c 52 49     w\...n.nR...m.RI
     361:	00 00 00 00 1c 13 53 00 00 00 00 00 1c 52 4a 00     ......S......RJ.
     371:	00 00 00 00 5b 5b 00 00 00 00 00 00 5c 00 00 00     ....[[......\...
	...
     39d:	13 5b 7f 77 6e 6e 6e 6e 13 65 77 76 6e 6e 6e 6e     .[.wnnnn.ewvnnnn
     3ad:	1b 65 77 76 76 76 6e 77 1b 5b bf 76 b6 76 76 76     .ewvvvnw.[.v.vvv
     3bd:	09 13 6d bf b7 b6 b7 65 00 1b 12 5c 76 bf 76 6d     ..m....e...\v.vm
     3cd:	00 00 12 1b 12 5b 5b 5c 00 00 00 00 09 0a 12 13     .....[[\........
     3dd:	6e 77 24 1c 1c 1c 1c 1c 77 25 1c 1c 1c 1c 24 25     nw$.....w%....$%
     3ed:	6e 1c 1c 1c 24 25 25 1b 1c 1c 24 25 25 13 00 00     n...$%%...$%%...
     3fd:	64 6d 6d 1b 00 09 6e bf 6d 5b 09 12 6e bf 6d 5b     dmm...n.m[..n.m[
     40d:	5b 12 5b 64 5b 12 13 12 13 1b 12 12 09 01 00 00     [.[d[...........
     41d:	1c 24 2e 1c 09 00 09 6e 25 24 01 00 09 76 7f 7f     .$.....n%$...v..
     42d:	00 00 12 77 7f 7f 64 12 64 bf bf 77 5b 12 1b 09     ...w..d.d..w[...
     43d:	bf 6d 5b 12 1b 09 00 00 12 13 1b 09 00 00 00 00     .m[.............
     44d:	09 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     45d:	7f 7f 53 13 13 00 00 00 64 12 1b 01 00 00 00 00     ..S.....d.......
     46d:	1b 12 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     4a5:	26 00 00 00 26 00 26 26 2f 00 00 00 2f 00 00 00     &...&.&&/.../...
     4b5:	37 00 00 00 37 00 00 00 ff 00 00 00 ff 00 00 00     7...7...........
     4c5:	bf 00 00 00 bf 00 00 bf 37 00 00 37 00 00 37 00     ........7..7..7.
     4d5:	00 26 26 00 00 00 26 26 00 00 00 00 00 00 00 00     .&&...&&........
     4e5:	26 26 26 00 26 26 26 26 00 00 2f 00 2f 00 00 00     &&&.&&&&.././...
     4f5:	00 37 00 00 37 00 00 00 ff 00 00 00 ff ff ff ff     .7..7...........
     505:	00 00 00 00 bf 00 00 00 00 00 00 00 37 00 00 00     ............7...
     515:	26 26 26 00 26 26 26 26 00 00 00 00 00 00 00 00     &&&.&&&&........
     525:	26 00 26 26 26 26 00 00 00 00 2f 00 00 00 2f 00     &.&&&&..../.../.
     535:	00 00 37 00 00 00 37 00 00 00 ff ff ff ff 00 00     ..7...7.........
     545:	00 00 bf 00 00 00 bf 00 00 00 37 00 00 00 37 00     ..........7...7.
     555:	26 00 26 26 26 26 00 00 00 00 00 00 00 00 00 00     &.&&&&..........
     565:	00 00 26 26 26 00 26 00 00 2f 00 00 2f 00 2f 00     ..&&&.&../.././.
     575:	37 00 00 00 37 00 00 37 ff 00 00 00 ff 00 00 00     7...7..7........
     585:	bf 00 00 00 bf 00 00 bf 37 00 00 37 00 00 37 00     ........7..7..7.
     595:	26 26 26 00 00 00 26 00 00 00 00 00 00 00 00 00     &&&...&.........
     5a5:	00 00 26 00 00 00 00 00 00 00 2f 00 00 00 00 00     ..&......./.....
     5b5:	00 37 00 00 00 00 00 00 ff 00 00 00 00 00 00 00     .7..............
     5c5:	00 bf 00 00 00 00 00 00 00 00 37 00 00 00 00 00     ..........7.....
     5d5:	00 00 26 00 00 00 00 00 00 00 00 00 00 00 00 00     ..&.............
	...
     5f9:	00 00 00 e4 00 00 00 00 09 9b ed f6 00 00 00 9b     ................
     609:	a4 ad bf bf 00 52 9b a4 76 7f 7f b7 5b 9b 6d 77     .....R..v...[.mw
     619:	7f 76 6e b7 00 00 00 00 00 00 00 00 00 00 00 00     .vn.............
     629:	5b b6 f6 f6 00 5b f6 ff ff ff ff bf f6 ff ff ff     [....[..........
     639:	ff bf bf ae ff bf ff ff ff b7 ad 65 bf bf ff ff     ...........e....
     649:	b7 b6 ad 65 b7 bf ff ff bf b7 ae 6e b7 bf ff ff     ...e.......n....
     659:	bf b7 b7 65 00 00 00 00 00 00 00 00 f6 f6 ed ed     ...e............
     669:	ad a4 a4 9b b6 6d 6d 5c 52 6e 65 64 65 65 65 52     .....mm\RnedeeeR
     679:	65 76 6d 25 5c 5c 52 53 6e 24 65 6e 65 52 52 6e     evm%\\RSn$eneRRn
     689:	25 25 24 25 5b 52 77 2d 25 25 25 24 52 6e 6e 2d     %%$%[Rw-%%%$Rnn-
     699:	25 25 25 25 00 00 00 00 00 00 00 00 9b 49 00 00     %%%%.........I..
     6a9:	00 00 00 00 a4 9b 92 00 00 00 00 00 25 64 93 49     ............%d.I
     6b9:	00 00 00 00 65 2e 9b 52 00 00 00 00 6d 25 65 52     ....e..R....m%eR
     6c9:	00 00 00 00 6d 2d 65 52 00 00 00 00 6e 2e 64 52     ....m-eR....n.dR
	...
     6e1:	00 00 49 5b 00 00 00 00 00 4a 5b 65 00 00 00 00     ..I[.....J[e....
     6f1:	5b 9b 6d 2d 00 00 00 5b 5b 2d 2e 25 00 00 52 5b     [.m-...[[-.%..R[
     701:	2e 2e 1c 09 00 01 5b 2d 1c 01 09 1c 00 5c 5b 01     ......[-.....\[.
     711:	4a 65 77 7f 4a 5b 1c 6e 7f 77 77 76 9b 77 77 6d     Jew.J[.n.wwv.wwm
     721:	65 6e 6e a4 77 6e 65 65 65 5b a4 b7 25 25 5c 52     enn.wneee[..%%\R
     731:	52 6d bf bf 13 09 49 64 7f bf bf bf 09 5c 7f 7f     Rm....Id.....\..
     741:	bf bf b7 bf 7f 7f 77 7f 7f b7 bf bf 77 77 7f 7f     ......w.....ww..
     751:	6e b7 bf bf 77 7f 7f 6e 77 bf bf bf b6 ff ff ff     n...w..nw.......
     761:	bf bf b7 5b bf ff ff ff bf bf a4 64 bf ff ff ff     ...[.......d....
     771:	bf ad a4 7f bf ff ff ff bf a4 bf 7f ff ff ff bf     ................
     781:	ad bf bf bf ff ff ff b6 bf bf bf 77 ff ff f7 bf     ...........w....
     791:	bf bf 77 77 ff ff ff bf bf bf 64 52 6d 7f 6e 2e     ..ww......dRm.n.
     7a1:	2d 2d 25 6e 7f 76 6e 6e 6e 2e 25 65 77 77 77 76     --%n.vnnn.%ewwwv
     7b1:	2e 1c 25 24 7f 77 6e 25 1c 25 1c 1b 77 65 25 25     ..%$.wn%.%..we%%
     7c1:	1c 09 0a 5b 6e 6e 1c 09 49 25 64 64 5b 49 4a 6e     ...[nn..I%dd[IJn
     7d1:	7f 64 5c 00 53 77 bf 77 5b 5c 00 00 6e 25 5b 4a     .d\.Sw.w[\..n%[J
     7e1:	00 00 00 00 1c 1b 5b 00 00 00 00 00 24 5b 53 00     ......[.....$[S.
     7f1:	00 00 00 00 5b 5c 00 00 00 00 00 00 64 00 00 00     ....[\......d...
	...
     81d:	5b 5c 7f bf 77 76 77 77 5c 6d 7f b7 77 77 77 77     [\..wvww\m..wwww
     82d:	5c 6d 7f bf 77 77 77 bf 5c 64 bf bf bf bf bf 7f     \m..www.\d......
     83d:	0a 5c 6e bf bf bf bf 76 00 65 64 6d bf bf bf bf     .\n....v.edm....
     84d:	00 00 5b 6d 64 6d ad b6 00 00 00 00 12 5b 64 6d     ..[mdm.......[dm
     85d:	77 7f 6e 6e 77 bf bf bf 7f 76 6d 76 77 bf bf bf     w.nnw....vmvw...
     86d:	77 6d 6e 76 7f bf bf bf 6d 6e 76 7f bf b7 ad f6     wmnv....mnv.....
     87d:	76 bf bf 76 a4 ad ff ff bf b6 64 ad ff ff ff ff     v..v......d.....
     88d:	b6 ad bf ff ff ff ff f6 ad b6 ad 64 5b 52 00 00     ...........d[R..
     89d:	ff ff bf bf ad 5b 64 bf ff ff b6 ad ad bf ff bf     .....[d.........
     8ad:	ff f6 ff ff ff ff bf 64 ff ff ff ff bf b6 76 5b     .......d......v[
     8bd:	ff ff ff bf bf 5b 00 00 ff ff ff 5c 00 00 00 00     .....[.....\....
     8cd:	a4 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     8dd:	bf bf 64 5c 5c 00 00 00 6e 5c 65 49 00 00 00 00     ..d\\...n\eI....
     8ed:	6d 5b 00 00 00 00 00 00 00 00 00 00 00 00 00 00     m[..............
	...

0000091d <logoInitPatches>:
     91d:	00 00 00 26 09 00 00 00 00                          ...&.....

00000926 <initPatch>:
     926:	00 02 08 00 08 55 04 08 5a 00 00 f8 00 09 90 00     .....U..Z.......
     936:	0a 1e 32 05 00 00 ff                                ..2....

0000093d <default_scores>:
     93d:	55 5a 45 00 00 4c 4a 42 00 00 41 41 41 00 00 42     UZE..LJB..AAA..B
     94d:	42 42 00 00 43 43 43 00 00 44 44 44 00 00           BB..CCC..DDD..

0000095b <strLevels>:
     95b:	20 20 20 47 4c 41 43 49 45 53 20 20 20 00              GLACIES   .

00000969 <strPaused>:
     969:	50 41 55 53 45 44 00                                PAUSED.

00000970 <strExit>:
     970:	45 58 49 54 20 2d 20 58 00                          EXIT - X.

00000979 <strTime>:
     979:	54 49 4d 45 3a 20 00                                TIME: .

00000980 <strLives>:
     980:	4c 49 56 45 53 3a 20 00                             LIVES: .

00000988 <strShield>:
     988:	53 48 49 45 4c 44 3a 20 00                          SHIELD: .

00000991 <strScore>:
     991:	53 43 4f 52 45 3a 20 00                             SCORE: .

00000999 <strSelectHandle>:
     999:	53 45 4c 45 43 54 20 2d 20 41 2f 53 54 41 52 54     SELECT - A/START
	...

000009aa <strHighscores>:
     9aa:	48 49 47 48 20 53 43 4f 52 45 53 00                 HIGH SCORES.

000009b6 <str1Player>:
     9b6:	53 54 41 52 54 00                                   START.

000009bc <strCopyright>:
     9bc:	32 30 31 36 20 4c 41 57 52 45 4e 43 45 20 42 52     2016 LAWRENCE BR
     9cc:	4f 4f 4b 53 00                                      OOKS.

000009d1 <spacesong>:
     9d1:	00 c0 00 00 c1 01 00 b0 07 7f 00 07 7f 00 90 43     ...............C
     9e1:	64 00 46 64 00 4b 64 00 4f 64 00 b1 07 74 00 91     d.Fd.Kd.Od...t..
     9f1:	33 64 00 ff 06 01 53 1d 91 33 64 0a 33 64 14 90     3d....S..3d.3d..
     a01:	4b 64 00 46 64 00 43 64 00 91 33 64 27 33 64 14     Kd.Fd.Cd..3d'3d.
     a11:	90 46 64 00 43 64 00 4b 64 00 4f 64 00 91 33 64     .Fd.Cd.Kd.Od..3d
     a21:	14 33 64 0a 90 41 64 00 4d 64 0a 41 64 00 46 64     .3d..Ad.Md.Ad.Fd
     a31:	00 4a 64 00 4d 64 00 91 2e 64 1e 2e 64 09 2e 64     .Jd.Md...d..d..d
     a41:	14 90 41 64 00 46 64 00 4a 64 00 91 2e 64 28 2e     ..Ad.Fd.Jd...d(.
     a51:	64 14 90 41 64 00 46 64 00 4a 64 00 4d 64 00 91     d..Ad.Fd.Jd.Md..
     a61:	2e 64 13 2e 64 0a 90 3f 64 00 4b 64 0a 3f 64 00     .d..d..?d.Kd.?d.
     a71:	44 64 00 48 64 00 4b 64 00 91 2c 64 1e 2c 64 0a     Dd.Hd.Kd..,d.,d.
     a81:	2c 64 14 90 41 64 00 46 64 00 4a 64 00 91 2c 64     ,d..Ad.Fd.Jd..,d
     a91:	13 2e 64 14 90 46 64 00 91 2c 64 14 90 3f 64 00     ..d..Fd..,d..?d.
     aa1:	43 64 00 48 64 00 91 2e 64 14 30 64 14 90 43 64     Cd.Hd...d.0d..Cd
     ab1:	00 48 64 00 4b 64 00 4f 64 00 91 30 64 1d 30 64     .Hd.Kd.Od..0d.0d
     ac1:	0a 30 64 14 90 4b 64 00 48 64 00 43 64 00 91 30     .0d..Kd.Hd.Cd..0
     ad1:	64 28 30 64 13 90 43 64 00 48 64 00 4b 64 00 4f     d(0d..Cd.Hd.Kd.O
     ae1:	64 00 91 30 64 14 30 64 0a 90 41 64 00 4d 64 0a     d..0d.0d..Ad.Md.
     af1:	43 64 00 46 64 00 4b 64 00 4f 64 00 91 33 64 1e     Cd.Fd.Kd.Od..3d.
     b01:	33 64 09 33 64 14 90 4b 64 00 46 64 00 43 64 00     3d.3d..Kd.Fd.Cd.
     b11:	91 33 64 28 33 64 14 90 46 64 00 43 64 00 4b 64     .3d(3d..Fd.Cd.Kd
     b21:	00 4f 64 00 91 33 64 13 33 64 0a 90 41 64 00 4d     .Od..3d.3d..Ad.M
     b31:	64 0a 41 64 00 46 64 00 4a 64 00 4d 64 00 91 2e     d.Ad.Fd.Jd.Md...
     b41:	64 1e 2e 64 0a 2e 64 14 90 41 64 00 46 64 00 4a     d..d..d..Ad.Fd.J
     b51:	64 00 91 2e 64 27 2e 64 14 90 41 64 00 46 64 00     d...d'.d..Ad.Fd.
     b61:	4a 64 00 4d 64 00 91 2e 64 14 2e 64 0a 90 3f 64     Jd.Md...d..d..?d
     b71:	00 4b 64 0a 3f 64 00 44 64 00 48 64 00 4b 64 00     .Kd.?d.Dd.Hd.Kd.
     b81:	91 2c 64 1d 2c 64 0a 2c 64 14 90 41 64 00 46 64     .,d.,d.,d..Ad.Fd
     b91:	00 4a 64 00 91 2c 64 14 2e 64 14 90 46 64 00 91     .Jd..,d..d..Fd..
     ba1:	2c 64 13 90 3f 64 00 43 64 00 48 64 00 91 30 64     ,d..?d.Cd.Hd..0d
     bb1:	14 30 64 14 90 48 64 00 91 2c 6e 14 2c 4b 06 90     .0d..Hd..,n.,K..
     bc1:	4a 64 0e 91 2c 4b 0d 90 4b 64 06 91 2c 6e 14 90     Jd..,K..Kd..,n..
     bd1:	4d 64 00 91 2c 4b 14 2c 4b 07 90 4b 64 0d 91 2c     Md..,K.,K..Kd..,
     be1:	6e 0d 90 4a 64 07 91 2c 4b 13 90 48 64 00 91 30     n..Jd..,K..Hd..0
     bf1:	6e 14 30 4b 07 90 4a 64 0d 91 30 4b 0d 90 46 64     n.0K..Jd..0K..Fd
     c01:	07 91 30 6e 13 90 43 64 00 91 30 4b 14 30 4b 07     ..0n..Cd..0K.0K.
     c11:	90 46 64 0d 91 30 6e 0d 90 48 64 07 91 30 4b 14     .Fd..0n..Hd..0K.
     c21:	90 48 64 00 91 2c 6e 13 2c 4b 07 90 4a 64 0d 91     .Hd..,n.,K..Jd..
     c31:	2c 4b 0d 90 4b 64 07 91 2c 6e 14 90 4d 64 00 91     ,K..Kd..,n..Md..
     c41:	2c 4b 14 2c 4b 06 90 4b 64 0d 91 2c 6e 0e 90 4d     ,K.,K..Kd..,n..M
     c51:	64 06 91 2c 4b 14 90 4f 64 00 91 30 6e 14 30 4b     d..,K..Od..0n.0K
     c61:	07 90 50 64 0d 91 30 4b 0e 90 4d 64 05 91 30 6e     ..Pd..0K..Md..0n
     c71:	14 90 4f 64 00 91 30 4b 14 30 4b 07 90 4d 64 0d     ..Od..0K.0K..Md.
     c81:	91 30 6e 0d 90 4b 64 07 91 30 4b 13 90 4d 64 00     .0n..Kd..0K..Md.
     c91:	91 2b 6e 14 2b 4b 07 90 4f 64 0d 91 2b 4b 0d 90     .+n.+K..Od..+K..
     ca1:	4d 64 07 91 2b 6e 14 90 4b 64 00 91 2b 4b 13 2b     Md..+n..Kd..+K.+
     cb1:	4b 07 90 46 64 0d 91 2b 6e 0d 90 4b 64 07 91 2b     K..Fd..+n..Kd..+
     cc1:	4b 14 90 4d 64 00 91 2c 6e 13 2c 4b 07 90 50 64     K..Md..,n.,K..Pd
     cd1:	0d 91 2c 4b 0d 90 4f 64 07 91 2c 6e 14 90 4d 64     ..,K..Od..,n..Md
     ce1:	00 91 2c 4b 14 2c 4b 06 90 48 64 0d 91 2c 6e 0e     ..,K.,K..Hd..,n.
     cf1:	90 4d 64 06 91 2c 4b 14 90 52 64 00 91 27 6e 0d     .Md..,K..Rd..'n.
     d01:	90 50 64 07 91 27 4b 06 90 4f 64 0e 50 64 00 91     .Pd..'K..Od.Pd..
     d11:	27 4b 0d 90 4f 64 06 91 27 6e 07 90 4d 64 0d 4b     'K..Od..'n..Md.K
     d21:	64 00 91 27 4b 14 27 4b 07 90 46 64 0d 91 27 6e     d..'K.'K..Fd..'n
     d31:	0d 90 4b 64 07 91 27 4b 13 90 47 64 00 91 26 6e     ..Kd..'K..Gd..&n
     d41:	14 26 4b 07 90 4a 64 0d 91 26 4b 0d 90 4f 64 07     .&K..Jd..&K..Od.
     d51:	91 26 6e 14 90 53 64 00 91 26 4b 13 26 4b 07 90     .&n..Sd..&K.&K..
     d61:	56 64 0d 91 26 6e 0d 90 5b 64 07 91 26 4b 14 90     Vd..&n..[d..&K..
     d71:	3d 64 00 91 31 64 06 90 41 64 07 44 64 07 49 64     =d..1d..Ad.Dd.Id
     d81:	06 4d 64 07 50 64 06 55 64 07 59 64 07 5c 64 06     .Md.Pd.Ud.Yd.\d.
     d91:	59 64 07 55 64 06 50 64 07 4d 64 07 49 64 06 44     Yd.Ud.Pd.Md.Id.D
     da1:	64 07 41 64 06 3d 64 07 38 64 07 3d 64 06 41 64     d.Ad.=d.8d.=d.Ad
     db1:	07 44 64 06 49 64 07 44 64 07 41 64 06 43 64 00     .Dd.Id.Dd.Ad.Cd.
     dc1:	91 37 64 07 90 47 64 06 4a 64 07 4f 64 06 53 64     .7d..Gd.Jd.Od.Sd
     dd1:	07 56 64 07 5b 64 06 5f 64 07 62 64 06 5f 64 07     .Vd.[d._d.bd._d.
     de1:	5b 64 07 56 64 06 53 64 07 4f 64 06 4a 64 07 47     [d.Vd.Sd.Od.Jd.G
     df1:	64 07 43 64 06 3e 64 07 43 64 06 47 64 07 4a 64     d.Cd.>d.Cd.Gd.Jd
     e01:	07 4f 64 06 4a 64 07 47 64 06 46 64 00 91 3a 64     .Od.Jd.Gd.Fd..:d
     e11:	07 90 4a 64 07 4d 64 06 52 64 07 56 64 06 59 64     ..Jd.Md.Rd.Vd.Yd
     e21:	07 5e 64 07 62 64 06 65 64 07 62 64 06 5e 64 07     .^d.bd.ed.bd.^d.
     e31:	59 64 07 56 64 06 52 64 07 4d 64 06 4a 64 07 46     Yd.Vd.Rd.Md.Jd.F
     e41:	64 07 41 64 06 46 64 07 4a 64 06 4d 64 07 52 64     d.Ad.Fd.Jd.Md.Rd
     e51:	07 4d 64 06 4a 64 07 54 7f 00 43 64 00 48 64 00     .Md.Jd.T..Cd.Hd.
     e61:	4b 64 00 4f 64 00 91 30 64 1d 30 64 0a 30 64 14     Kd.Od..0d.0d.0d.
     e71:	90 4b 64 00 48 64 00 43 64 00 91 30 64 28 30 64     .Kd.Hd.Cd..0d(0d
     e81:	14 90 43 64 00 48 64 00 4b 64 00 4f 64 00 91 30     ..Cd.Hd.Kd.Od..0
     e91:	64 13 30 64 0a 90 41 64 00 4d 64 0a 43 64 00 46     d.0d..Ad.Md.Cd.F
     ea1:	64 00 4b 64 00 4f 64 00 91 33 64 1e 33 64 0a 33     d.Kd.Od..3d.3d.3
     eb1:	64 14 90 4b 64 00 46 64 00 43 64 00 91 33 64 27     d..Kd.Fd.Cd..3d'
     ec1:	33 64 14 90 46 64 00 43 64 00 4b 64 00 4f 64 00     3d..Fd.Cd.Kd.Od.
     ed1:	91 33 64 14 33 64 0a 90 41 64 00 4d 64 0a 41 64     .3d.3d..Ad.Md.Ad
     ee1:	00 46 64 00 4a 64 00 4d 64 00 91 2e 64 1d 2e 64     .Fd.Jd.Md...d..d
     ef1:	0a 2e 64 14 90 41 64 00 46 64 00 4a 64 00 91 2e     ..d..Ad.Fd.Jd...
     f01:	64 27 2e 64 14 90 41 64 00 46 64 00 4a 64 00 4d     d'.d..Ad.Fd.Jd.M
     f11:	64 00 91 2e 64 14 2e 64 0a 90 3f 64 00 4b 64 0a     d...d..d..?d.Kd.
     f21:	3f 64 00 44 64 00 48 64 00 4b 64 00 91 2c 64 1e     ?d.Dd.Hd.Kd..,d.
     f31:	2c 64 09 2c 64 14 90 41 64 00 46 64 00 4a 64 00     ,d.,d..Ad.Fd.Jd.
     f41:	91 2c 64 14 2e 64 14 90 46 64 00 91 2c 64 14 90     .,d..d..Fd..,d..
     f51:	3f 64 00 43 64 00 48 64 00 91 2e 64 13 30 64 14     ?d.Cd.Hd...d.0d.
     f61:	90 43 64 00 48 64 00 4b 64 00 4f 64 00 91 30 64     .Cd.Hd.Kd.Od..0d
     f71:	1e 30 64 0a 30 64 14 90 4b 64 00 48 64 00 43 64     .0d.0d..Kd.Hd.Cd
     f81:	00 91 30 64 27 30 64 14 90 43 64 00 48 64 00 4b     ..0d'0d..Cd.Hd.K
     f91:	64 00 4f 64 00 91 30 64 14 30 64 0a 90 41 64 00     d.Od..0d.0d..Ad.
     fa1:	4d 64 0a 43 64 00 46 64 00 4b 64 00 4f 64 00 91     Md.Cd.Fd.Kd.Od..
     fb1:	33 64 1d 33 64 0a 33 64 14 90 4b 64 00 46 64 00     3d.3d.3d..Kd.Fd.
     fc1:	43 64 00 91 33 64 28 33 64 13 90 46 64 00 43 64     Cd..3d(3d..Fd.Cd
     fd1:	00 4b 64 00 4f 64 00 91 33 64 14 33 64 0a 90 41     .Kd.Od..3d.3d..A
     fe1:	64 00 4d 64 0a 41 64 00 46 64 00 4a 64 00 4d 64     d.Md.Ad.Fd.Jd.Md
     ff1:	00 91 2e 64 1e 2e 64 09 2e 64 14 90 41 64 00 46     ...d..d..d..Ad.F
    1001:	64 00 4a 64 00 91 2e 64 28 2e 64 14 90 41 64 00     d.Jd...d(.d..Ad.
    1011:	46 64 00 4a 64 00 4d 64 00 91 2e 64 13 2e 64 0a     Fd.Jd.Md...d..d.
    1021:	90 3f 64 00 4b 64 0a 3f 64 00 44 64 00 48 64 00     .?d.Kd.?d.Dd.Hd.
    1031:	4b 64 00 91 2c 64 1e 2c 64 0a 2c 64 14 90 41 64     Kd..,d.,d.,d..Ad
    1041:	00 46 64 00 4a 64 00 91 2c 64 13 2e 64 14 90 46     .Fd.Jd..,d..d..F
    1051:	64 00 91 2c 64 0f ff 06 01 45 05 90 3f 64 00 43     d..,d....E..?d.C
    1061:	64 00 48 64 00 91 30 64 14 30 64 81 0a ff 2f 00     d.Hd..0d.0d.../.

00001071 <planetsong>:
    1071:	00 c0 00 00 c1 01 00 b0 07 7f 00 b1 07 74 00 ff     .............t..
    1081:	06 01 53 1b 90 48 78 00 91 30 6e 07 90 43 55 00     ..S..Hx..0n..CU.
    1091:	91 30 50 07 90 48 55 00 91 30 50 07 90 4a 78 00     .0P..HU..0P..Jx.
    10a1:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 48 55 00     .0n..KU..0P..HU.
    10b1:	91 30 50 07 90 4a 78 00 91 30 6e 07 90 4b 55 00     .0P..Jx..0n..KU.
    10c1:	91 30 50 07 90 4d 55 00 91 30 50 07 90 4a 78 00     .0P..MU..0P..Jx.
    10d1:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 4d 55 00     .0n..KU..0P..MU.
    10e1:	91 30 50 07 90 4f 78 00 91 30 6e 07 90 4b 55 00     .0P..Ox..0n..KU.
    10f1:	91 30 50 07 90 4d 78 00 91 2e 6e 07 90 4f 55 07     .0P..Mx...n..OU.
    1101:	50 78 00 91 30 6e 06 90 4d 55 00 91 30 50 07 90     Px..0n..MU..0P..
    1111:	4f 55 00 91 30 50 07 90 4b 78 00 91 30 6e 07 90     OU..0P..Kx..0n..
    1121:	4d 55 00 91 30 50 07 90 4a 55 00 91 30 50 07 30     MU..0P..JU..0P.0
    1131:	6e 03 90 4b 78 04 48 55 00 91 30 50 07 90 4a 55     n..Kx.HU..0P..JU
    1141:	00 91 30 50 07 90 46 78 00 91 30 6e 07 90 4d 55     ..0P..Fx..0n..MU
    1151:	00 91 30 50 07 90 46 78 00 91 30 50 07 90 4f 55     ..0P..Fx..0P..OU
    1161:	00 91 30 6e 07 90 46 78 00 91 30 50 07 90 4d 55     ..0n..Fx..0P..MU
    1171:	00 91 2e 6e 07 90 46 78 07 48 55 00 91 30 6e 07     ...n..Fx.HU..0n.
    1181:	90 43 55 00 91 30 50 07 90 48 55 00 91 30 50 07     .CU..0P..HU..0P.
    1191:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    11a1:	90 48 55 00 91 30 50 06 90 4a 55 00 91 30 6e 07     .HU..0P..JU..0n.
    11b1:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 30 50 07     .KU..0P..MU..0P.
    11c1:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    11d1:	90 4d 55 00 91 30 50 07 90 4f 55 00 91 30 6e 07     .MU..0P..OU..0n.
    11e1:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 2e 6e 07     .KU..0P..MU...n.
    11f1:	90 4f 55 07 50 55 00 91 30 6e 07 90 4d 55 00 91     .OU.PU..0n..MU..
    1201:	30 50 07 90 4f 55 00 91 30 50 07 90 4b 55 00 91     0P..OU..0P..KU..
    1211:	30 6e 07 90 4d 55 00 91 30 50 07 90 4a 55 00 91     0n..MU..0P..JU..
    1221:	30 50 07 30 6e 02 90 4b 55 05 48 55 00 91 30 50     0P.0n..KU.HU..0P
    1231:	07 90 4a 55 00 91 30 50 07 90 46 55 00 91 30 6e     ..JU..0P..FU..0n
    1241:	06 90 4d 55 00 91 30 50 07 90 46 55 00 91 30 50     ..MU..0P..FU..0P
    1251:	07 90 4f 55 00 91 30 6e 07 90 46 55 00 91 30 50     ..OU..0n..FU..0P
    1261:	07 90 4d 55 00 91 2e 6e 07 90 46 55 07 48 78 00     ..MU...n..FU.Hx.
    1271:	91 2c 6e 07 90 43 55 00 91 2c 50 07 90 48 55 00     .,n..CU..,P..HU.
    1281:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
    1291:	91 2c 50 07 90 48 55 00 91 2c 50 07 90 4a 78 00     .,P..HU..,P..Jx.
    12a1:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 55 00     .,n..KU..,P..MU.
    12b1:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
    12c1:	91 2c 50 07 90 4d 55 00 91 2c 50 07 90 4f 78 00     .,P..MU..,P..Ox.
    12d1:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 78 00     .,n..KU..,P..Mx.
    12e1:	91 2b 6e 06 90 4f 55 07 50 78 00 91 2c 6e 07 90     .+n..OU.Px..,n..
    12f1:	4d 55 00 91 2c 50 07 90 4f 55 00 91 2c 50 07 90     MU..,P..OU..,P..
    1301:	4b 78 00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90     Kx..,n..MU..,P..
    1311:	4a 55 00 91 2c 50 07 2c 6e 02 90 4b 78 05 48 55     JU..,P.,n..Kx.HU
    1321:	00 91 2c 50 07 90 4a 55 00 91 2c 50 07 90 46 78     ..,P..JU..,P..Fx
    1331:	00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90 46 78     ..,n..MU..,P..Fx
    1341:	00 91 2c 50 07 90 4f 55 00 91 2c 6e 07 90 46 78     ..,P..OU..,n..Fx
    1351:	00 91 2c 50 07 90 4d 55 00 91 2b 6e 07 90 46 78     ..,P..MU..+n..Fx
    1361:	07 48 55 00 91 29 6e 07 90 43 55 00 91 29 50 07     .HU..)n..CU..)P.
    1371:	90 48 55 00 91 29 50 06 90 4a 55 00 91 29 6e 07     .HU..)P..JU..)n.
    1381:	90 4b 55 00 91 29 50 07 90 48 55 00 91 29 50 07     .KU..)P..HU..)P.
    1391:	90 4a 55 00 91 2b 6e 07 90 4b 55 00 91 2b 50 07     .JU..+n..KU..+P.
    13a1:	90 4d 55 00 91 2b 50 07 90 4a 55 00 91 2b 6e 07     .MU..+P..JU..+n.
    13b1:	90 4b 55 00 91 2b 50 07 90 4d 55 00 91 2b 50 07     .KU..+P..MU..+P.
    13c1:	90 4f 55 00 91 2c 6e 07 90 4b 55 00 91 2c 50 07     .OU..,n..KU..,P.
    13d1:	90 4d 55 00 91 2c 6e 07 90 4f 55 07 50 55 00 91     .MU..,n..OU.PU..
    13e1:	2e 6e 07 90 4d 55 00 91 2e 50 07 90 4f 55 00 91     .n..MU...P..OU..
    13f1:	2e 50 07 90 4b 55 00 91 2e 6e 07 90 4d 55 00 91     .P..KU...n..MU..
    1401:	2e 50 07 90 4a 55 00 91 2e 50 07 2e 6e 02 90 4b     .P..JU...P..n..K
    1411:	55 05 48 55 00 91 2e 50 06 90 4a 55 00 91 2e 50     U.HU...P..JU...P
    1421:	07 90 46 55 00 91 2e 6e 07 90 4d 55 00 91 2e 50     ..FU...n..MU...P
    1431:	07 90 46 55 00 91 2e 50 07 90 4f 55 00 91 2e 6e     ..FU...P..OU...n
    1441:	07 90 46 55 00 91 2e 50 07 90 4d 55 00 91 2e 6e     ..FU...P..MU...n
    1451:	07 90 46 55 07 48 55 00 91 30 6e 07 90 43 55 00     ..FU.HU..0n..CU.
    1461:	91 30 50 07 90 48 55 00 91 30 50 07 90 4a 55 00     .0P..HU..0P..JU.
    1471:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 48 55 00     .0n..KU..0P..HU.
    1481:	91 30 50 07 90 4a 55 00 91 30 6e 07 90 4b 55 00     .0P..JU..0n..KU.
    1491:	91 30 50 07 90 4d 55 00 91 30 50 07 90 4a 55 00     .0P..MU..0P..JU.
    14a1:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 4d 55 00     .0n..KU..0P..MU.
    14b1:	91 30 50 07 90 4f 55 00 91 30 6e 06 90 4b 55 00     .0P..OU..0n..KU.
    14c1:	91 30 50 07 90 4d 55 00 91 2e 6e 07 90 4f 55 07     .0P..MU...n..OU.
    14d1:	50 55 00 91 30 6e 07 90 4d 55 00 91 30 50 07 90     PU..0n..MU..0P..
    14e1:	4f 55 00 91 30 50 07 90 4b 55 00 91 30 6e 07 90     OU..0P..KU..0n..
    14f1:	4d 55 00 91 30 50 07 90 4a 55 00 91 30 50 07 30     MU..0P..JU..0P.0
    1501:	6e 02 90 4b 55 05 48 55 00 91 30 50 07 90 4a 55     n..KU.HU..0P..JU
    1511:	00 91 30 50 07 90 46 55 00 91 30 6e 07 90 4d 55     ..0P..FU..0n..MU
    1521:	00 91 30 50 07 90 46 55 00 91 30 50 07 90 4f 55     ..0P..FU..0P..OU
    1531:	00 91 30 6e 07 90 46 55 00 91 30 50 07 90 4d 55     ..0n..FU..0P..MU
    1541:	00 91 2e 6e 07 90 46 55 07 48 55 00 91 30 6e 06     ...n..FU.HU..0n.
    1551:	90 43 55 00 91 30 50 07 90 48 55 00 91 30 50 07     .CU..0P..HU..0P.
    1561:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    1571:	90 48 55 00 91 30 50 07 90 4a 55 00 91 30 6e 07     .HU..0P..JU..0n.
    1581:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 30 50 07     .KU..0P..MU..0P.
    1591:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    15a1:	90 4d 55 00 91 30 50 07 90 4f 55 00 91 30 6e 07     .MU..0P..OU..0n.
    15b1:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 2e 6e 07     .KU..0P..MU...n.
    15c1:	90 4f 55 07 50 55 00 91 30 6e 07 90 4d 55 00 91     .OU.PU..0n..MU..
    15d1:	30 50 07 90 4f 55 00 91 30 50 07 90 4b 55 00 91     0P..OU..0P..KU..
    15e1:	30 6e 07 90 4d 55 00 91 30 50 07 90 4a 55 00 91     0n..MU..0P..JU..
    15f1:	30 50 06 30 6e 03 90 4b 55 04 48 55 00 91 30 50     0P.0n..KU.HU..0P
    1601:	07 90 4a 55 00 91 30 50 07 90 46 55 00 91 30 6e     ..JU..0P..FU..0n
    1611:	07 90 4d 55 00 91 30 50 07 90 46 55 00 91 30 50     ..MU..0P..FU..0P
    1621:	07 90 4f 55 00 91 30 6e 07 90 46 55 00 91 30 50     ..OU..0n..FU..0P
    1631:	07 90 4d 55 00 91 2e 6e 07 90 46 55 07 48 78 00     ..MU...n..FU.Hx.
    1641:	91 2c 6e 07 90 43 55 00 91 2c 50 07 90 48 55 00     .,n..CU..,P..HU.
    1651:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
    1661:	91 2c 50 07 90 48 55 00 91 2c 50 07 90 4a 78 00     .,P..HU..,P..Jx.
    1671:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 55 00     .,n..KU..,P..MU.
    1681:	91 2c 50 07 90 4a 78 00 91 2c 6e 06 90 4b 55 00     .,P..Jx..,n..KU.
    1691:	91 2c 50 07 90 4d 55 00 91 2c 50 07 90 4f 78 00     .,P..MU..,P..Ox.
    16a1:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 78 00     .,n..KU..,P..Mx.
    16b1:	91 2b 6e 07 90 4f 55 07 50 78 00 91 2c 6e 07 90     .+n..OU.Px..,n..
    16c1:	4d 55 00 91 2c 50 07 90 4f 55 00 91 2c 50 07 90     MU..,P..OU..,P..
    16d1:	4b 78 00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90     Kx..,n..MU..,P..
    16e1:	4a 55 00 91 2c 50 07 2c 6e 02 90 4b 78 05 48 55     JU..,P.,n..Kx.HU
    16f1:	00 91 2c 50 07 90 4a 55 00 91 2c 50 07 90 46 78     ..,P..JU..,P..Fx
    1701:	00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90 46 78     ..,n..MU..,P..Fx
    1711:	00 91 2c 50 07 90 4f 55 00 91 2c 6e 07 90 46 78     ..,P..OU..,n..Fx
    1721:	00 91 2c 50 07 90 4d 55 00 91 2b 6e 06 90 46 78     ..,P..MU..+n..Fx
    1731:	07 48 55 00 91 29 6e 07 90 43 55 00 91 29 50 07     .HU..)n..CU..)P.
    1741:	90 48 55 00 91 29 50 07 90 4a 55 00 91 29 6e 07     .HU..)P..JU..)n.
    1751:	90 4b 55 00 91 29 50 07 90 48 55 00 91 29 50 07     .KU..)P..HU..)P.
    1761:	90 4a 55 00 91 2b 6e 07 90 4b 55 00 91 2b 50 07     .JU..+n..KU..+P.
    1771:	90 4d 55 00 91 2b 50 07 90 4a 55 00 91 2b 6e 07     .MU..+P..JU..+n.
    1781:	90 4b 55 00 91 2b 50 07 90 4d 55 00 91 2b 50 07     .KU..+P..MU..+P.
    1791:	90 4f 55 00 91 2c 6e 07 90 4b 55 00 91 2c 50 07     .OU..,n..KU..,P.
    17a1:	90 4d 55 00 91 2c 6e 07 90 4f 55 07 50 55 00 91     .MU..,n..OU.PU..
    17b1:	2e 6e 07 90 4d 55 00 91 2e 50 07 90 4f 55 00 91     .n..MU...P..OU..
    17c1:	2e 50 07 90 4b 55 00 91 2e 6e 06 90 4d 55 00 91     .P..KU...n..MU..
    17d1:	2e 50 07 90 4a 55 00 91 2e 50 07 2e 6e 03 90 4b     .P..JU...P..n..K
    17e1:	55 04 48 55 00 91 2e 50 07 90 4a 55 00 91 2e 50     U.HU...P..JU...P
    17f1:	07 90 46 55 00 91 2e 6e 07 90 4d 55 00 91 2e 50     ..FU...n..MU...P
    1801:	07 90 46 55 00 91 2e 50 07 90 4f 55 00 91 30 6e     ..FU...P..OU..0n
    1811:	07 90 46 55 00 91 30 50 07 90 4d 55 00 91 2e 6e     ..FU..0P..MU...n
    1821:	07 90 46 55 07 54 64 00 48 64 00 91 30 6e 07 30     ..FU.Td.Hd..0n.0
    1831:	50 07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e     P.0P.0n.0P.0P.0n
    1841:	07 30 50 06 30 50 07 30 6e 07 30 50 07 30 50 07     .0P.0P.0n.0P.0P.
    1851:	30 6e 07 30 50 07 2e 6e 0e 30 6e 07 30 50 07 30     0n.0P..n.0n.0P.0
    1861:	50 07 30 6e 07 30 50 07 30 50 07 30 6e 07 30 50     P.0n.0P.0P.0n.0P
    1871:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 06     .0P.0n.0P.0P.0n.
    1881:	30 50 07 2e 6e 0e 90 33 64 00 37 64 00 3c 64 00     0P..n..3d.7d.<d.
    1891:	91 30 6e 07 30 50 07 30 50 07 90 32 64 00 37 64     .0n.0P.0P..2d.7d
    18a1:	00 3a 64 00 91 30 6e 07 30 50 07 30 50 07 90 33     .:d..0n.0P.0P..3
    18b1:	64 00 37 64 00 3c 64 00 91 30 6e 07 30 50 07 30     d.7d.<d..0n.0P.0
    18c1:	50 07 90 37 64 00 3a 64 00 3e 64 00 91 30 6e 07     P..7d.:d.>d..0n.
    18d1:	30 50 07 30 50 07 90 37 64 00 3c 64 00 3f 64 00     0P.0P..7d.<d.?d.
    18e1:	91 30 6e 07 30 50 07 90 37 64 00 3a 64 00 3e 64     .0n.0P..7d.:d.>d
    18f1:	00 91 30 6e 07 30 6e 07 90 3a 64 00 43 64 00 3f     ..0n.0n..:d.Cd.?
    1901:	64 00 91 33 6e 06 33 50 07 33 50 07 33 6e 07 33     d..3n.3P.3P.3n.3
    1911:	50 07 33 50 07 90 37 64 00 3a 64 00 3f 64 00 91     P.3P..7d.:d.?d..
    1921:	33 6e 07 33 50 07 33 50 07 33 6e 07 33 50 07 33     3n.3P.3P.3n.3P.3
    1931:	50 07 90 3a 64 00 3f 64 00 43 64 00 91 33 6e 07     P..:d.?d.Cd..3n.
    1941:	33 50 07 33 6e 07 33 6e 07 90 41 64 00 3e 64 00     3P.3n.3n..Ad.>d.
    1951:	3a 64 00 91 2e 6e 07 2e 50 07 2e 50 07 2e 6e 07     :d...n..P..P..n.
    1961:	2e 50 07 2e 50 06 90 35 64 00 3a 64 00 3e 64 00     .P..P..5d.:d.>d.
    1971:	91 2e 6e 07 2e 50 07 2e 50 07 2e 6e 07 2e 50 07     ..n..P..P..n..P.
    1981:	2e 50 07 90 3a 64 00 3e 64 00 41 64 00 91 2e 6e     .P..:d.>d.Ad...n
    1991:	07 2e 50 07 2e 6e 07 2e 6e 07 90 37 64 00 3c 64     ..P..n..n..7d.<d
    19a1:	00 3f 64 00 91 30 6e 07 30 50 07 30 50 07 30 6e     .?d..0n.0P.0P.0n
    19b1:	07 30 50 07 30 50 07 30 6e 07 30 50 07 30 50 07     .0P.0P.0n.0P.0P.
    19c1:	30 6e 06 30 50 07 30 50 07 30 6e 07 30 50 07 2e     0n.0P.0P.0n.0P..
    19d1:	6e 0e 30 6e 07 30 50 07 30 50 07 30 6e 07 30 50     n.0n.0P.0P.0n.0P
    19e1:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 07     .0P.0n.0P.0P.0n.
    19f1:	30 50 07 30 50 07 30 6e 07 30 50 07 2e 6e 0d 90     0P.0P.0n.0P..n..
    1a01:	33 64 00 37 64 00 3c 64 00 91 30 6e 07 30 50 07     3d.7d.<d..0n.0P.
    1a11:	30 50 07 90 32 64 00 37 64 00 3a 64 00 91 30 6e     0P..2d.7d.:d..0n
    1a21:	07 30 50 07 30 50 07 90 33 64 00 37 64 00 3c 64     .0P.0P..3d.7d.<d
    1a31:	00 91 30 6e 07 30 50 07 30 50 07 90 37 64 00 3a     ..0n.0P.0P..7d.:
    1a41:	64 00 3e 64 00 91 30 6e 07 30 50 07 30 50 07 90     d.>d..0n.0P.0P..
    1a51:	37 64 00 3c 64 00 3f 64 00 91 30 6e 07 30 50 07     7d.<d.?d..0n.0P.
    1a61:	90 37 64 00 3a 64 00 3e 64 00 91 2e 6e 0e 90 3a     .7d.:d.>d...n..:
    1a71:	64 00 43 64 00 3f 64 00 91 33 6e 07 33 50 07 33     d.Cd.?d..3n.3P.3
    1a81:	50 07 33 6e 06 33 50 07 33 50 07 90 37 64 00 3a     P.3n.3P.3P..7d.:
    1a91:	64 00 3f 64 00 91 33 6e 07 33 50 07 33 50 07 33     d.?d..3n.3P.3P.3
    1aa1:	6e 07 33 50 07 33 50 07 90 3a 64 00 3f 64 00 43     n.3P.3P..:d.?d.C
    1ab1:	64 00 91 33 6e 07 33 50 07 32 6e 0e 90 41 64 00     d..3n.3P.2n..Ad.
    1ac1:	3e 64 00 3a 64 00 91 2e 6e 07 2e 50 07 2e 50 07     >d.:d...n..P..P.
    1ad1:	2e 6e 07 2e 50 07 2e 50 07 90 35 64 00 3a 64 00     .n..P..P..5d.:d.
    1ae1:	3e 64 00 91 2e 6e 07 2e 50 06 2e 50 07 2e 6e 07     >d...n..P..P..n.
    1af1:	2e 50 07 2e 50 07 90 3a 64 00 3e 64 00 41 64 00     .P..P..:d.>d.Ad.
    1b01:	91 2e 6e 05 ff 06 01 45 02 91 2e 50 07 2c 6e 0e     ..n....E...P.,n.
    1b11:	90 37 64 00 3c 64 00 3f 64 00 91 30 6e 07 30 50     .7d.<d.?d..0n.0P
    1b21:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 07     .0P.0n.0P.0P.0n.
    1b31:	30 50 07 30 50 07 30 6e 07 30 50 07 30 50 07 ff     0P.0P.0n.0P.0P..
    1b41:	2f 00                                               /.

00001b43 <my_patches>:
    1b43:	00 00 00 ba 1c 00 00 00 00 00 00 00 ba 1c 00 00     ................
    1b53:	00 00 00 00 00 a9 1c 00 00 00 00 00 00 00 53 1c     ..............S.
    1b63:	00 00 00 00 00 00 00 a9 1c 00 00 00 00 00 00 00     ................
    1b73:	82 1b 00 00 00 00 00 00 00 82 1b 00 00 00 00        ...............

00001b82 <explode>:
    1b82:	00 07 7f 00 02 03 00 00 ff 00 08 41 01 04 04 01     ...........A....
    1b92:	04 04 01 04 04 01 04 04 01 04 04 01 04 04 01 04     ................
    1ba2:	04 01 04 04 01 04 04 03 07 64 00 08 3c 01 04 04     .........d..<...
    1bb2:	01 04 04 01 04 04 01 04 04 01 04 04 01 04 04 01     ................
    1bc2:	04 04 01 04 04 01 04 04 03 07 50 00 08 37 01 04     ..........P..7..
    1bd2:	04 01 04 04 01 04 04 01 04 04 01 04 04 01 04 04     ................
    1be2:	01 04 04 01 04 04 01 04 04 03 07 32 00 08 32 01     ...........2..2.
    1bf2:	04 04 01 04 04 01 04 04 01 04 04 01 04 04 01 04     ................
    1c02:	04 01 04 04 01 04 04 01 04 04 03 07 28 00 08 2d     ............(..-
    1c12:	01 04 04 01 04 04 01 04 04 01 04 04 01 04 04 01     ................
    1c22:	04 04 01 04 04 01 04 04 01 04 04 03 07 14 00 08     ................
    1c32:	28 01 04 04 01 04 04 01 04 04 01 04 04 01 04 04     (...............
    1c42:	01 04 04 01 04 04 01 04 04 01 04 04 01 05 00 00     ................
    1c52:	ff                                                  .

00001c53 <pshoot>:
    1c53:	00 02 03 00 07 7f 00 08 50 01 04 06 01 04 06 01     ........P.......
    1c63:	04 06 01 07 00 03 07 7f 00 08 50 01 04 06 01 04     ..........P.....
    1c73:	06 01 04 06 01 07 00 03 08 50 00 07 20 01 04 06     .........P.. ...
    1c83:	01 04 06 01 04 06 01 04 06 01 07 00 03 08 50 00     ..............P.
    1c93:	07 0f 01 04 06 01 04 06 01 04 06 01 04 06 01 07     ................
    1ca3:	00 01 05 00 00 ff                                   ......

00001ca9 <navigate>:
    1ca9:	00 02 04 00 07 70 00 00 d8 00 08 3c 01 05 00 00     .....p.....<....
    1cb9:	ff                                                  .

00001cba <instrument>:
    1cba:	00 02 04 00 00 dd 00 ff                             ........

00001cc2 <level_data>:
    1cc2:	02 00 01 03 01 15 7c 00 00 00 00 00 00 00 00 00     ......|.........
    1cd2:	80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1ce2:	80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1cf2:	80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1d02:	80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1d12:	80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1d22:	80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1d32:	80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1d42:	80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1d52:	80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1d62:	80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1d72:	80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1d82:	80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1d92:	80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1da2:	80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1db2:	7c 00 04 06 00 00 00 00 00 00 00 00 00 00 00 00     |...............
    1dc2:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1dd2:	7b 06 05 05 00 00 00 00 00 00 00 00 00 00 00 00     {...............
    1de2:	80 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1df2:	80 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1e02:	80 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1e12:	80 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1e22:	80 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1e32:	80 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1e42:	80 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1e52:	80 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1e62:	80 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1e72:	80 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1e82:	0a 05 07 01 35 05 07 01 33 05 00 00 00 00 00 00     ....5...3.......
    1e92:	02 05 07 01 35 05 07 01 3b 05 00 00 00 00 00 00     ....5...;.......
    1ea2:	80 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1eb2:	80 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1ec2:	80 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1ed2:	80 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1ee2:	80 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1ef2:	80 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1f02:	80 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1f12:	7e 05 02 01 00 00 00 00 00 00 00 00 00 00 00 00     ~...............
    1f22:	05 01 07 05 07 01 27 05 07 01 07 05 07 01 27 05     ......'.......'.
    1f32:	07 01 03 05 04 05 07 01 27 05 07 01 07 05 07 01     ........'.......
    1f42:	39 05 00 00 80 05 00 00 00 00 00 00 00 00 00 00     9...............
    1f52:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    1f62:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    1f72:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    1f82:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    1f92:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    1fa2:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    1fb2:	00 00 00 00 6c 05 14 01 00 00 00 00 00 00 00 00     ....l...........
    1fc2:	00 00 00 00 1f 01 05 05 5c 01 00 00 00 00 00 00     ........\.......
    1fd2:	00 00 00 00 6b 01 15 04 00 00 00 00 00 00 00 00     ....k...........
    1fe2:	00 00 00 00 1e 04 05 05 5d 04 00 00 00 00 00 00     ........].......
    1ff2:	00 00 00 00 6a 04 16 05 00 00 00 00 00 00 00 00     ....j...........
    2002:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    2012:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    2022:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    2032:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    2042:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    2052:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    2062:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    2072:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    2082:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    2092:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    20a2:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    20b2:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    20c2:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    20d2:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    20e2:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    20f2:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    2102:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    2112:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    2122:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    2132:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    2142:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    2152:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    2162:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    2172:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    2182:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    2192:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    21a2:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    21b2:	00 00 00 00 70 05 07 01 09 05 00 00 00 00 00 00     ....p...........
    21c2:	00 00 00 00 2c 05 07 01 35 05 07 01 11 05 00 00     ....,...5.......
    21d2:	00 00 00 00 24 05 07 01 55 05 00 00 00 00 00 00     ....$...U.......
    21e2:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    21f2:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    2202:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    2212:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    2222:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    2232:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    2242:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    2252:	00 00 00 00 64 05 07 01 07 05 07 01 07 05 00 00     ....d...........
    2262:	00 00 00 00 20 05 07 01 07 05 07 01 27 05 07 01     .... .......'...
    2272:	07 05 07 01 0f 05 18 05 07 01 07 05 07 01 53 05     ..............S.
    2282:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    2292:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    22a2:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    22b2:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    22c2:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    22d2:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    22e2:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    22f2:	00 00 00 00 00 00 52 05 2e 01 00 00 00 00 00 00     ......R.........
    2302:	00 00 00 00 00 00 34 01 05 05 47 01 00 00 00 00     ......4...G.....
    2312:	00 00 00 00 00 00 51 01 2f 04 00 00 00 00 00 00     ......Q./.......
    2322:	00 00 00 00 00 00 33 04 05 05 48 04 00 00 00 00     ......3...H.....
    2332:	00 00 00 00 00 00 50 04 30 05 00 00 00 00 00 00     ......P.0.......
    2342:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    2352:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    2362:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    2372:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    2382:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    2392:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    23a2:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    23b2:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    23c2:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    23d2:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    23e2:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    23f2:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    2402:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    2412:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    2422:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    2432:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    2442:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    2452:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    2462:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    2472:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    2482:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    2492:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    24a2:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    24b2:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    24c2:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    24d2:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    24e2:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    24f2:	00 00 00 00 00 00 56 05 07 01 23 05 00 00 00 00     ......V...#.....
    2502:	00 00 00 00 00 00 12 05 07 01 35 05 07 01 2b 05     ..........5...+.
    2512:	00 00 00 00 00 00 0a 05 07 01 6f 05 00 00 00 00     ..........o.....
    2522:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    2532:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    2542:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    2552:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    2562:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    2572:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    2582:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    2592:	00 00 00 00 00 00 4a 05 07 01 07 05 07 01 21 05     ......J.......!.
    25a2:	00 00 00 00 00 00 06 05 07 01 07 05 07 01 27 05     ..............'.
    25b2:	07 01 07 05 07 01 27 05 02 01 05 01 07 05 07 01     ......'.........
    25c2:	6d 05 00 00 00 00 00 00 00 00 80 05 00 00 00 00     m...............
	...
    25da:	00 00 80 05 00 00 00 00 00 00 00 00 00 00 00 00     ................
    25ea:	00 00 80 05 00 00 00 00 00 00 00 00 00 00 00 00     ................
    25fa:	00 00 80 05 00 00 00 00 00 00 00 00 00 00 00 00     ................
    260a:	00 00 80 05 00 00 00 00 00 00 00 00 00 00 00 00     ................
    261a:	00 00 80 05 00 00 00 00 00 00 00 00 00 00 00 00     ................
    262a:	00 00 80 05 00 00 00 00 00 00 00 00 00 00 00 00     ................
    263a:	00 00 38 05 48 01 00 00 00 00 00 00 00 00 00 00     ..8.H...........
    264a:	00 00 80 01 00 00 00 00 00 00 00 00 00 00 00 00     ................
    265a:	00 00 37 01 49 04 00 00 00 00 00 00 00 00 00 00     ..7.I...........
    266a:	00 00 80 04 00 00 00 00 00 00 00 00 00 00 00 00     ................
    267a:	00 00 36 04 00 00 00 00 00 00 00 00 00 00 00 00     ..6.............
	...

0000268c <sprites_data>:
    268c:	fe fe fe fe fe fe fe 87 fe fe fe fe fe fe 87 87     ................
    269c:	fe fe fe fe fe fe 87 87 fe fe fe fe 85 85 85 87     ................
    26ac:	fe fe fe 85 87 87 87 85 fe fe 85 87 87 87 87 85     ................
    26bc:	fe 85 87 87 87 85 85 87 85 87 87 85 85 87 87 87     ................
    26cc:	87 87 87 fe fe fe fe fe d2 d2 eb d2 fe fe fe fe     ................
    26dc:	87 d2 fd eb fe fe fe fe 87 87 eb d2 fe fe fe fe     ................
    26ec:	85 87 87 d2 fe fe fe fe 87 85 85 87 85 fe fe fe     ................
    26fc:	87 ef 87 87 87 85 fe fe ef ff ef 87 87 85 fe fe     ................
    270c:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 87     ................
    271c:	fe fe fe fe fe fe 87 87 fe fe fe fe fe fe 87 87     ................
    272c:	fe fe fe fe 85 85 85 87 fe fe fe 85 87 87 87 85     ................
    273c:	fe fe 85 87 87 87 87 85 fe 85 87 87 87 85 85 87     ................
    274c:	fe fe fe fe fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    275c:	d2 d2 eb d2 fe fe fe fe 87 d2 fd eb fe fe fe fe     ................
    276c:	87 87 eb d2 fe fe fe fe 85 87 87 d2 fe fe fe fe     ................
    277c:	87 85 85 87 85 fe fe fe 87 ef 87 87 87 85 fe fe     ................
    278c:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    279c:	fe fe fe fe fe fe fe fe fe ba ba ba ba ba ba fe     ................
    27ac:	ba bd bd bd bd bd bd ba fe ba ba ba ba ba ba fe     ................
    27bc:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    27cc:	fe fe 46 46 46 46 46 46 fe a5 a5 a5 47 47 46 fe     ..FFFFFF....GGF.
    27dc:	fe 46 46 47 47 46 3f 3f 46 46 47 47 46 fe fe fe     .FFGGF??FFGGF...
    27ec:	46 46 47 47 46 fe fe fe fe 46 46 47 47 3f 3f fe     FFGGF....FFGG??.
    27fc:	fe a5 a5 a5 47 fe fe fe fe fe 46 46 46 46 fe fe     ....G.....FFFF..
    280c:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    281c:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    282c:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    283c:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    284c:	85 87 87 85 fe 85 87 87 fe 85 87 85 fe 85 87 87     ................
    285c:	fe 85 87 87 ad ad ad ad fe fe 85 87 ad ad ad ad     ................
    286c:	fe fe 85 87 ad ad ad ad fe fe fe 85 a4 ad 87 87     ................
    287c:	fe fe fe fe a4 a4 85 87 fe fe fe fe a4 a4 85 87     ................
    288c:	87 ef 87 85 87 85 fe fe 87 87 87 85 87 87 85 fe     ................
    289c:	ad ad ad ad ad 87 85 fe ad ad ad ad ad ad a4 ad     ................
    28ac:	ad ad ad ad ad a4 a4 a4 87 87 87 85 fe fe fe fe     ................
    28bc:	87 87 87 85 fe fe fe fe 87 87 87 85 fe fe fe fe     ................
    28cc:	87 ef 87 85 87 85 fe fe 87 87 87 85 87 87 85 fe     ................
    28dc:	ad ad ad ad ad 87 85 fe ad ad ad ad ad ad a4 ad     ................
    28ec:	ad ad ad ad ad a4 a4 a4 87 87 87 85 fe fe fe fe     ................
    28fc:	87 87 87 85 fe fe fe fe 87 87 85 fe fe fe fe fe     ................
    290c:	85 87 87 85 85 87 87 87 85 87 87 85 fe 85 87 87     ................
    291c:	fe 85 87 85 fe 85 87 87 fe 85 87 87 ad ad ad ad     ................
    292c:	fe fe 85 87 ad ad ad ad fe fe 85 87 ad ad ad ad     ................
    293c:	fe fe fe 85 a4 ad 87 87 fe fe fe fe a4 a4 85 87     ................
    294c:	ef ff ef 87 87 85 fe fe 87 ef 87 85 87 85 fe fe     ................
    295c:	87 87 87 85 87 87 85 fe ad ad ad ad ad 87 85 fe     ................
    296c:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    297c:	87 87 87 87 fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    298c:	87 ef 87 85 87 85 fe fe 87 87 87 85 87 87 85 fe     ................
    299c:	ad ad ad ad ad 87 85 fe ad ad ad ad ad ad a4 ad     ................
    29ac:	ad ad ad ad ad a4 a4 a4 87 87 87 87 fe fe fe fe     ................
    29bc:	87 87 87 87 fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    29cc:	ef ff ef 87 87 85 fe fe 87 ef 87 85 87 85 fe fe     ................
    29dc:	87 87 87 85 87 87 85 fe ad ad ad ad ad 87 85 fe     ................
    29ec:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    29fc:	87 87 87 87 fe fe fe fe 87 87 87 87 87 fe fe fe     ................
    2a0c:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2a1c:	fe fe fe 27 07 fe fe fe fe fe 27 77 27 07 fe fe     ...'......'w'...
    2a2c:	fe fe 07 27 07 07 fe fe fe fe fe 07 07 fe fe fe     ...'............
    2a3c:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2a4c:	fe fe fe fe fe fe 85 87 fe fe fe fe fe fe 85 87     ................
    2a5c:	fe fe fe fe fe 85 87 87 fe fe fe fe fe 85 87 87     ................
    2a6c:	fe fe fe fe 85 87 87 fe fe fe fe fe 85 87 87 fe     ................
    2a7c:	fe fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4     ................
    2a8c:	87 fe 85 85 fe fe fe fe 87 fe 85 85 85 fe fe fe     ................
    2a9c:	fe fe 85 85 85 fe fe fe fe fe 85 85 85 fe fe fe     ................
    2aac:	fe fe 85 85 85 fe fe fe fe fe 85 85 85 fe fe fe     ................
    2abc:	fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe     ................
    2acc:	fe fe fe fe fe fe fe 85 fe fe fe fe fe fe fe 85     ................
    2adc:	fe fe fe fe fe 85 85 87 fe fe fe fe 85 87 87 87     ................
    2aec:	fe fe fe a4 87 87 87 87 fe fe fe a4 87 87 87 fe     ................
    2afc:	fe fe fe a4 a4 fe fe fe fe fe fe a4 a4 a4 fe fe     ................
    2b0c:	87 87 87 fe fe fe fe fe 87 87 87 87 fe fe fe fe     ................
    2b1c:	87 87 87 87 fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    2b2c:	87 85 85 fe fe fe fe fe 85 85 85 fe fe fe fe fe     ................
    2b3c:	a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe fe fe     ................
    2b4c:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 85 85     ................
    2b5c:	fe fe fe fe 85 85 85 85 a4 a4 85 85 85 85 85 fe     ................
    2b6c:	a4 a4 85 85 85 85 85 fe a4 a4 85 85 85 85 fe fe     ................
    2b7c:	a4 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2b8c:	87 87 87 fe fe fe fe fe fe 85 87 87 fe fe fe fe     ................
    2b9c:	fe 85 87 87 87 fe fe fe fe fe 85 87 87 fe fe fe     ................
    2bac:	fe fe 85 87 87 87 fe fe fe fe fe 85 87 87 fe fe     ................
    2bbc:	fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe     ................
    2bcc:	fe fe fe fe fe fe fe 85 fe fe fe fe fe fe fe 85     ................
    2bdc:	fe fe fe fe fe 85 85 85 fe fe fe fe 85 85 85 85     ................
    2bec:	fe fe fe a4 85 85 85 85 fe fe fe a4 85 85 85 fe     ................
    2bfc:	fe fe fe a4 a4 fe fe fe fe fe fe a4 a4 a4 fe fe     ................
    2c0c:	87 87 87 fe fe fe fe fe 85 87 87 85 fe fe fe fe     ................
    2c1c:	85 87 87 85 fe fe fe fe 85 87 87 fe fe fe fe fe     ................
    2c2c:	85 87 87 fe fe fe fe fe 85 87 87 fe fe fe fe fe     ................
    2c3c:	a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe fe fe     ................
    2c4c:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 85 85     ................
    2c5c:	fe fe fe fe 85 85 85 85 a4 a4 85 85 85 85 a4 a4     ................
    2c6c:	a4 a4 85 85 85 85 a4 a4 a4 a4 85 85 85 85 a4 a4     ................
    2c7c:	a4 fe fe fe fe fe a4 fe fe fe fe fe fe fe fe fe     ................
    2c8c:	87 87 85 87 87 fe fe fe fe fe 85 87 87 87 fe fe     ................
    2c9c:	fe fe 85 87 87 87 fe fe 85 85 85 87 87 fe fe fe     ................
    2cac:	87 87 87 87 87 fe fe fe 87 87 87 87 fe fe fe fe     ................
    2cbc:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2ccc:	fe fe fe fe fe fe fe fe fe fe 12 12 12 12 fe fe     ................
    2cdc:	ad 12 0f 1f 1f 0f 12 ad ad 12 12 12 12 12 12 ad     ................
    2cec:	ad ad 12 12 12 12 ad ad ad 12 ad 12 12 ad 12 ad     ................
    2cfc:	ad fe 12 12 12 12 fe ad ad fe fe fe fe fe fe ad     ................
    2d0c:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 7f     ................
    2d1c:	fe fe fe fe fe 7f 7f 7f fe fe fe fe 7f 7f 7f 7f     ................
    2d2c:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe fe fe     ................
    2d3c:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2d4c:	a4 fe fe fe fe fe fe fe a4 ad fe fe ff ff a4 ad     ................
    2d5c:	a4 ad f6 ff ff a4 ad f6 a4 ad f6 ff a4 ad f6 ff     ................
    2d6c:	a4 ad fe fe a4 ad f6 ff a4 fe fe a4 a4 ad f6 fe     ................
    2d7c:	fe fe fe a4 a4 ad f6 f6 fe fe fe fe fe fe fe fe     ................
    2d8c:	fe fe fe fe fe fe fe fe f6 ff ff ff d2 fe fe fe     ................
    2d9c:	ff ff ff ff d2 eb fe fe ff fe ff ff eb fd d2 fe     ................
    2dac:	fe fe fe ff d2 eb d2 d2 fe fe fe fe fe fe fe fe     ................
    2dbc:	f6 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2dcc:	fe fe bf 7f 7f bf fe fe fe 7f 7f 7f 7f 7f 7f fe     ................
    2ddc:	bf 7f 7f 7f 7f 7f 7f bf 7f 7f 7f 7f 7f 7f 7f 7f     ................
    2dec:	7f 7f 7f 7f 7f 7f 7f 7f bf 7f 7f 7f 7f 7f 7f bf     ................
    2dfc:	fe 7f 7f 7f 7f 7f 7f fe fe fe bf 7f 7f bf fe fe     ................
    2e0c:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2e1c:	fe fe fe 7f 7f fe fe fe fe fe 7f 7f 7f 7f fe fe     ................
    2e2c:	fe fe 7f 7f 7f 7f fe fe fe fe fe 7f 7f fe fe fe     ................
    2e3c:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2e4c:	fe fe bf 7f 7f bf fe fe fe 7f 7f 7f 7f 7f 7f fe     ................
    2e5c:	bf 7f fe fe 7f 7f 7f bf 7f fe fe fe fe 7f 7f 7f     ................
    2e6c:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe 7f bf     ................
    2e7c:	fe fe fe fe fe fe 7f fe fe fe fe fe fe bf fe fe     ................
    2e8c:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2e9c:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2eac:	fe fe fe bf e3 fe fe fe fe fe fe fe fe fe fe fe     ................
    2ebc:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2ecc:	fe fe fe fe fe fe fe fe fe fe fe fe ff fe fe fe     ................
    2edc:	fe fe fe fe 7f ff fe fe fe fe fe fe 7f 7f ff fe     ................
    2eec:	fe fe fe fe 7f 7f 7f ff fe fe fe fe 7f 7f 7f fe     ................
    2efc:	fe fe fe fe 7f 7f fe fe fe fe fe fe 7f fe fe fe     ................
    2f0c:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2f1c:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2f2c:	7f 7f 7f 7f 7f 7f ff fe fe 7f 7f 7f 7f ff fe fe     ................
    2f3c:	fe fe 7f 7f ff fe fe fe fe fe fe fe fe fe fe fe     ................
    2f4c:	fe fe fe ff fe fe fe fe fe fe ff 7f 7f fe fe fe     ................
    2f5c:	fe ff 7f 7f 7f 7f fe fe ff 7f 7f 7f 7f 7f 7f fe     ................
    2f6c:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2f7c:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2f8c:	fe fe 12 12 12 12 fe fe fe 12 0f 1f 1f 0f 12 fe     ................
    2f9c:	ad 12 12 12 12 12 12 ad ad 12 ad 12 12 ad 12 ad     ................
    2fac:	ad ad 12 12 12 12 ad ad ad fe 12 12 12 12 fe ad     ................
    2fbc:	ad fe fe fe fe fe fe ad ad fe fe fe fe fe fe ad     ................
    2fcc:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 7f     ................
    2fdc:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe fe 7f     ................
    2fec:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2ffc:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    300c:	a4 fe fe fe fe fe fe fe a4 a4 fe fe fe fe fe fe     ................
    301c:	a4 a4 ad fe fe fe fe fe a4 a4 ad ad fe fe fe fe     ................
    302c:	a4 a4 ad ad f6 fe fe fe a4 a4 ad ad f6 f6 ff ff     ................
    303c:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    304c:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    305c:	fe fe ff ff ff ff a4 a4 fe ff ff ff ff a4 a4 a4     ................
    306c:	ff ff ff ff ff a4 a4 a4 ff ff ff ff a4 a4 a4 ad     ................
    307c:	ff ff ff ff a4 a4 ad ad ff ff ff a4 a4 ad ad f6     ................
    308c:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    309c:	a4 ad ad f6 f6 ff ff ff a4 ad ad f6 f6 ff ff ff     ................
    30ac:	ad ad f6 f6 ff ff ff ff ad f6 f6 ff ff ff ff ff     ................
    30bc:	f6 f6 ff ff ff ff ff ff f6 ff ff fe fe ff ff ff     ................
    30cc:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    30dc:	d2 fe fe fe fe fe fe fe d2 d2 fe fe fe fe fe fe     ................
    30ec:	d2 d2 d2 fe fe fe fe fe d2 d3 eb d3 fe fe fe fe     ................
    30fc:	d2 eb fd eb d2 fe fe fe d2 d3 eb d3 d2 d2 fe fe     ................
    310c:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    311c:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 fe fe fe     ................
    312c:	a4 a4 ad ad fe fe fe fe a4 a4 ad fe fe fe fe fe     ................
    313c:	a4 a4 fe fe fe fe fe fe a4 fe fe fe fe fe fe fe     ................
    314c:	ff ff fe a4 ad ad f6 f6 ff fe a4 a4 ad ad f6 f6     ................
    315c:	fe fe a4 a4 ad ad f6 f6 fe a4 a4 a4 ad ad f6 f6     ................
    316c:	fe a4 a4 a4 a4 ad ad f6 a4 a4 a4 a4 a4 a4 ad ad     ................
    317c:	a4 a4 a4 a4 a4 a4 a4 ad a4 a4 a4 a4 a4 a4 a4 a4     ................
    318c:	ff ff fe fe fe fe ff ff ff fe fe fe fe fe fe ff     ................
    319c:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    31ac:	f6 fe fe fe fe fe fe fe f6 f6 fe fe fe fe fe fe     ................
    31bc:	ad f6 f6 fe fe fe fe fe ad ad f6 f6 fe fe fe fe     ................
    31cc:	d2 d2 d2 d2 d2 d2 d2 fe ff ff ff ff ff ff ff ff     ................
    31dc:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    31ec:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    31fc:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    320c:	ef ff ef 87 87 85 fe fe 87 ef 87 85 87 85 fe fe     ................
    321c:	87 87 87 85 87 87 85 fe ad ad ad ad ad 87 85 fe     ................
    322c:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    323c:	87 87 87 85 fe fe fe fe 87 87 85 fe fe fe fe fe     ................
    324c:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 87 87     ................
    325c:	fe fe fe fe 85 87 87 87 a4 a4 85 85 85 87 87 fe     ................
    326c:	a4 a4 87 87 87 87 87 fe a4 a4 87 87 87 87 fe fe     ................
    327c:	a4 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    328c:	87 87 85 fe fe fe fe fe fe 85 85 85 fe fe fe fe     ................
    329c:	fe 85 85 85 85 fe fe fe fe fe 85 85 85 fe fe fe     ................
    32ac:	fe fe 85 85 85 85 fe fe fe fe fe 85 85 85 fe fe     ................
    32bc:	fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe     ................
    32cc:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    32dc:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    32ec:	fe fe fe fe fe fe fe fe fe fe fe fe fe 85 85 85     ................
    32fc:	fe a4 87 87 87 87 87 87 a4 a4 87 87 87 87 87 87     ................
    330c:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 87     ................
    331c:	fe fe fe fe 85 85 85 87 fe fe fe 85 87 87 87 85     ................
    332c:	fe fe 85 85 87 87 87 87 85 85 85 85 85 87 87 ad     ................
    333c:	87 87 87 87 ad 85 87 87 87 87 87 87 ad ad a4 a4     ................
    334c:	87 87 87 87 fe fe fe fe 87 d2 d2 eb d2 fe fe fe     ................
    335c:	87 87 d2 fd eb fe fe fe 87 87 87 eb d2 fe fe fe     ................
    336c:	85 85 87 87 d2 fe fe fe ad ad ad ad ad 87 ef fe     ................
    337c:	ad ad ad ad ad ad a4 ad a4 ad ad ad ad a4 a4 a4     ................

0000338c <map_enemy_spider_1>:
    338c:	01 01 24                                            ..$

0000338f <map_enemy_spider_0>:
    338f:	01 01 19                                            ...

00003392 <map_enemy_shark>:
    3392:	01 01 05                                            ...

00003395 <map_enemy_shot>:
    3395:	01 01 0e                                            ...

00003398 <map_hero_shot>:
    3398:	01 01 04                                            ...

0000339b <map_hero_ship_large>:
    339b:	04 02 26 27 28 29 2a 2b 2c 2d                       ..&'()*+,-

000033a5 <map_hero_ship_1>:
    33a5:	03 01 25 1b 1c                                      ..%..

000033aa <map_hero_ship_0>:
    33aa:	03 01 1a 1b 1c                                      .....

000033af <map_hero_prone>:
    33af:	03 01 31 32 33                                      ..123

000033b4 <map_hero_jump>:
    33b4:	02 03 02 03 0a 0d 17 18                             ........

000033bc <map_hero_step_3>:
    33bc:	02 03 02 03 0a 2e 2f 30                             ....../0

000033c4 <map_hero_step_2>:
    33c4:	02 03 00 01 07 0c 15 16                             ........

000033cc <map_hero_step_1>:
    33cc:	02 03 02 03 0a 0b 13 14                             ........

000033d4 <map_hero_step_0>:
    33d4:	02 03 00 01 07 09 11 12                             ........

000033dc <map_hero_idle>:
    33dc:	02 03 00 01 07 08 0f 10                             ........

000033e4 <map_explosion_2>:
    33e4:	01 01 1f                                            ...

000033e7 <map_explosion_1>:
    33e7:	01 01 1e                                            ...

000033ea <map_explosion_0>:
    33ea:	01 01 1d                                            ...

000033ed <map_meteor>:
    33ed:	01 01 20                                            .. 

000033f0 <map_up_arrow>:
    33f0:	01 01 23                                            ..#

000033f3 <map_down_arrow>:
    33f3:	01 01 22                                            .."

000033f6 <map_right_arrow>:
    33f6:	01 01 21                                            ..!

000033f9 <map_none>:
    33f9:	01 01 06                                            ...

000033fc <tiles_data>:
	...
    343c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    344c:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    345c:	ff f8 fb f8 fb f8 f8 fd ff fb f8 f8 fb f8 f8 f8     ................
    346c:	ff f8 f8 fb f8 f8 f8 f8 ff f8 f8 f8 f8 f8 f8 f8     ................
    347c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    348c:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    349c:	fd f8 fb f8 fb f8 f8 fd f8 fb f8 f8 fb f8 f8 f8     ................
    34ac:	f8 f8 f8 fb f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    34bc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    34cc:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    34dc:	fd f8 fb f8 fb f8 f8 ff f8 fb f8 f8 fb f8 f8 ff     ................
    34ec:	f8 f8 f8 fb f8 f8 f8 ff f8 f8 f8 f8 f8 f8 f8 ff     ................
    34fc:	fa f8 f8 f8 f8 f8 f8 f8 f8 f8 fb f8 f8 f8 fb f8     ................
    350c:	f8 f8 fb f8 fb fb f8 f8 f8 f8 f8 fb f8 f8 f8 f8     ................
    351c:	f8 f8 fb f8 fb f8 f8 f8 f8 fb f8 f8 fb f8 f8 f8     ................
    352c:	f8 f8 f8 fb f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    353c:	ac ac ac ac ac ac ac ac ac ac ac ac ac ac ac ac     ................
    354c:	ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad     ................
    355c:	ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae     ................
    356c:	af af af af af af af af af af af af af af af af     ................
    357c:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    358c:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    359c:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    35ac:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    35bc:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    35cc:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    35dc:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    35ec:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    35fc:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    360c:	ab ab ab ab ab ab ab ab ab ad ad ad ad ad ad ab     ................
    361c:	ae ae ae ae ae ae ae ae ab ae ae ae ae ae ae ab     ................
    362c:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    363c:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab a0     ................
    364c:	ab ab ab ab ab a0 a0 a0 ab ab ab ab a0 a0 a0 a0     ................
    365c:	ab ab ab a0 a0 a0 a0 a0 ab ab a0 a0 a0 a0 a0 a0     ................
    366c:	ab ab a0 a0 a0 a0 a0 a0 ab a0 a0 a0 a0 a0 a0 a0     ................
    367c:	ab a4 ff ff ff ff ff ab a0 a0 a4 ff ff ff ff ff     ................
    368c:	a0 a0 a0 a4 ff ff ff ff a0 a0 a0 a0 a4 ff ff ff     ................
    369c:	a0 a0 a0 a0 a0 a4 ff ff a0 a0 a0 a0 a0 a0 a4 ff     ................
    36ac:	a0 a0 a0 a0 a0 a0 a4 ff a0 a0 a0 a0 a0 a0 a0 a4     ................
    36bc:	ab ab ab ab ab ab ab ab ff ab ab ab ab ab ab ab     ................
    36cc:	ff ff ff ab ab ab ab ab ff ff ff ff ab ab ab ab     ................
    36dc:	ff ff ff ff ff ab ab ab ff ff ff ff ff ff ab ab     ................
    36ec:	ff ff ff ff ff ff ab ab ff ff ff ff ff ff ff ab     ................
	...
    3714:	00 00 00 e3 00 00 00 00 00 00 e3 ff e3 00 00 00     ................
    3724:	00 00 00 e3 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    373c:	ab a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    374c:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    375c:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    376c:	a0 a0 a0 a0 a0 a0 a0 a0 ab a0 a0 a0 a0 a0 a0 a0     ................
    377c:	a0 a0 a0 a0 a0 a0 a0 a4 a0 a0 a0 a0 a0 a0 a0 a0     ................
    378c:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    379c:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    37ac:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a4     ................
    37bc:	ff ff ff ff ff ff ff ab a4 ff ff ff ff ff ff ff     ................
    37cc:	a4 ff ff ff ff ff ff ff a4 ff ff ff ff ff ff ff     ................
    37dc:	a4 ff ff ff ff ff ff ff a4 ff ff ff ff ff ff ff     ................
    37ec:	a4 ff ff ff ff ff ff ff ff ff ff ff ff ff ff ab     ................
    37fc:	ab a0 a0 a0 a0 a0 a0 a0 ab ab a0 a0 a0 a0 a0 a0     ................
    380c:	ab ab a0 a0 a0 a0 a0 a0 ab ab ab a0 a0 a0 a0 a0     ................
    381c:	ab ab ab ab a0 a0 a0 a0 ab ab ab ab ab a0 a0 a0     ................
    382c:	ab ab ab ab ab ab ab a0 ab ab ab ab ab ab ab ab     ................
    383c:	a0 a0 a0 a0 a0 a0 a0 a4 a0 a0 a0 a0 a0 a0 a4 ff     ................
    384c:	a0 a0 a0 a0 a0 a0 a4 ff a0 a0 a0 a0 a0 a4 ff ff     ................
    385c:	a0 a0 a0 a0 a4 ff ff ff a0 a0 a0 a4 ff ff ff ff     ................
    386c:	a0 a0 a4 ff ff ff ff ff ab a4 ff ff ff ff ff ab     ................
    387c:	ff ff ff ff ff ff ff ab ff ff ff ff ff ff ab ab     ................
    388c:	ff ff ff ff ff ff ab ab ff ff ff ff ff ab ab ab     ................
    389c:	ff ff ff ff ab ab ab ab ff ff ff ab ab ab ab ab     ................
    38ac:	ff ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    38bc:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    38cc:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    38dc:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    38ec:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
	...
    3908:	00 00 96 96 00 00 00 00 00 96 96 96 00 00 00 00     ................
    3918:	96 96 96 96 00 00 00 96 96 96 96 96 00 00 96 96     ................
    3928:	96 96 96 96 00 00 96 96 96 96 96 96 00 96 96 96     ................
    3938:	96 96 96 96 00 96 96 96 96 96 96 00 96 96 96 96     ................
    3948:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3958:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3968:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3978:	96 96 96 96 00 00 00 00 00 00 00 00 96 96 00 00     ................
    3988:	00 00 00 00 96 96 96 00 00 00 00 00 96 96 96 96     ................
    3998:	00 00 00 00 96 96 96 96 96 00 00 00 96 96 96 96     ................
    39a8:	96 96 00 00 96 96 96 96 96 96 00 00 96 96 96 96     ................
    39b8:	96 96 96 00 bf bf bf bf bf bf bf bf 00 00 00 00     ................
	...
    39fc:	00 96 96 96 95 96 96 96 00 96 96 96 95 96 96 96     ................
    3a0c:	96 96 96 96 96 95 96 96 96 96 96 96 96 95 96 96     ................
    3a1c:	96 96 96 96 96 96 95 96 96 96 96 96 96 bf 95 96     ................
    3a2c:	95 84 96 96 96 bf 96 95 8c 83 83 8c 96 bf 96 96     ................
    3a3c:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3a4c:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3a5c:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3a6c:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3a7c:	96 96 96 95 96 96 96 00 96 96 96 95 96 96 96 00     ................
    3a8c:	96 96 95 96 96 96 96 96 96 96 95 96 96 96 96 96     ................
    3a9c:	96 95 96 96 96 96 96 96 96 95 96 96 96 96 95 96     ................
    3aac:	95 96 96 96 96 95 95 95 96 96 96 96 94 8c 8c 95     ................
    3abc:	82 82 82 82 82 bf 96 96 00 d8 d8 d8 bf ff bf 82     ................
    3acc:	00 d8 d8 bf ff ff ff bf 00 d8 bf ff ff ff ff ff     ................
    3adc:	bf bf ff ff ff ff ff ff 00 00 bf ff ff ff ff ff     ................
    3aec:	00 00 94 bf ff ff ff bf 00 00 00 8c bf ff bf d8     ................
    3afc:	96 96 96 96 96 96 96 96 83 83 8c 8c 8c 8c 8c 83     ................
    3b0c:	d8 d8 d8 d8 d8 d8 d8 d8 bf d8 d8 d8 d8 d8 d8 d8     ................
    3b1c:	ff bf bf d8 d8 d8 d8 d8 bf d8 d8 d8 d8 d8 d8 d8     ................
    3b2c:	d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 82 82     ................
    3b3c:	96 96 8c 83 83 8c 8c 8c 83 82 83 83 83 83 8c 00     ................
    3b4c:	82 82 82 83 83 83 83 00 82 82 82 83 83 83 83 00     ................
    3b5c:	d8 82 82 83 83 83 83 00 82 82 82 83 83 83 00 00     ................
    3b6c:	82 82 83 83 83 95 00 00 82 82 83 83 95 00 00 00     ................
	...
    3bb4:	bf bf bf bf bf bf bf bf 00 00 00 96 95 ff d8 d8     ................
    3bc4:	00 00 00 00 96 ff 83 82 00 00 00 00 00 ff 96 96     ................
    3bd4:	00 00 00 00 00 bf 96 96 00 00 00 00 00 bf 96 96     ................
    3be4:	00 00 00 00 00 bf 96 96 00 00 00 00 00 bf 00 00     ................
    3bf4:	00 00 00 00 00 77 00 00 d8 d8 d8 82 82 82 82 82     .....w..........
    3c04:	82 82 82 82 82 83 83 83 8c 8c 83 83 83 83 8c 95     ................
    3c14:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3c24:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3c34:	00 96 96 96 96 96 96 00 83 83 8c 95 96 00 00 00     ................
    3c44:	83 8c 96 96 00 00 00 00 96 96 96 00 00 00 00 00     ................
    3c54:	96 96 96 00 00 00 00 00 96 96 00 00 00 00 00 00     ................
    3c64:	96 96 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3c80:	00 77 00 00 00 00 00 00 00 77 00 00 00 00 00 00     .w.......w......
    3c90:	00 77 00 00 00 00 00 00 00 77 00 00 00 00 00 00     .w.......w......
    3ca0:	00 77 00 00 00 00 00 00 00 77 00 00 00 00 00 00     .w.......w......
	...
    3d04:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    3d14:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    3d2c:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3ec8:	ff ff ff 00 00 00 00 ff ff ff 00 00 00 00 00 ff     ................
    3ed8:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
    3ee8:	ff ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 00     ................
	...
    3f04:	00 ff ff ff 00 00 00 00 00 00 ff ff ff 00 00 00     ................
    3f14:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    3f24:	00 00 ff ff ff 00 00 00 00 ff ff ff 00 00 00 00     ................
	...
    3fe4:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    3ff4:	00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4014:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    4064:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    4088:	00 ff ff 00 00 00 00 00 ff ff 00 00 00 00 00 ff     ................
    4098:	ff 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff 00     ................
    40a8:	00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    40c4:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    40d4:	00 6f 6f 00 6f 6f 6f 00 00 6f 6f 6f 00 6f 6f 00     .oo.ooo..ooo.oo.
    40e4:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    4104:	00 00 00 6f 6f 00 00 00 00 00 6f 6f 6f 00 00 00     ...oo.....ooo...
    4114:	00 00 00 6f 6f 00 00 00 00 00 00 6f 6f 00 00 00     ...oo......oo...
    4124:	00 00 00 6f 6f 00 00 00 00 6f 6f 6f 6f 6f 6f 00     ...oo....oooooo.
	...
    4144:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    4154:	00 00 00 00 6f 6f 00 00 00 00 00 6f 6f 00 00 00     ....oo.....oo...
    4164:	00 00 6f 6f 00 00 00 00 00 6f 6f 6f 6f 6f 6f 00     ..oo.....oooooo.
	...
    4184:	00 6f 6f 6f 6f 6f 6f 00 00 00 00 00 6f 6f 00 00     .oooooo.....oo..
    4194:	00 00 00 6f 6f 00 00 00 00 00 00 00 6f 6f 00 00     ...oo.......oo..
    41a4:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    41c8:	6f 6f 00 00 00 00 00 6f 6f 6f 00 00 00 00 6f 6f     oo.....ooo....oo
    41d8:	6f 6f 00 00 00 6f 6f 00 6f 6f 00 00 00 6f 6f 6f     oo...oo.oo...ooo
    41e8:	6f 6f 6f 00 00 00 00 00 6f 6f 00 00 00 00 00 00     ooo.....oo......
	...
    4204:	00 6f 6f 6f 6f 6f 6f 00 00 6f 6f 00 00 00 00 00     .oooooo..oo.....
    4214:	00 6f 6f 6f 6f 6f 00 00 00 00 00 00 00 6f 6f 00     .ooooo.......oo.
    4224:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    4244:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 00 00 00     ..oooo...oo.....
    4254:	00 6f 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     .ooooo...oo..oo.
    4264:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    4284:	00 6f 6f 6f 6f 6f 6f 00 00 00 00 00 00 6f 6f 00     .oooooo......oo.
    4294:	00 00 00 00 6f 6f 00 00 00 00 00 6f 6f 00 00 00     ....oo.....oo...
    42a4:	00 00 6f 6f 00 00 00 00 00 00 6f 6f 00 00 00 00     ..oo......oo....
	...
    42c4:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    42d4:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    42e4:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    4304:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    4314:	00 00 6f 6f 6f 6f 6f 00 00 00 00 00 00 6f 6f 00     ..ooooo......oo.
    4324:	00 00 00 00 6f 6f 00 00 00 00 6f 6f 6f 00 00 00     ....oo....ooo...
	...
    437c:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    438c:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    439c:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    43ac:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    4484:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    4494:	00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    44ac:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    44c4:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    44d4:	00 ff ff 00 ff ff ff 00 00 ff ff 00 ff ff ff 00     ................
    44e4:	00 ff ff 00 00 00 00 00 00 00 ff ff ff ff ff 00     ................
	...
    4504:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    4514:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    4524:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    4544:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    4554:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    4564:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
	...
    4584:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    4594:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    45a4:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    45c4:	00 ff ff ff ff 00 00 00 00 ff ff 00 ff ff 00 00     ................
    45d4:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    45e4:	00 ff ff 00 ff ff 00 00 00 ff ff ff ff 00 00 00     ................
	...
    4604:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    4614:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    4624:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    4644:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    4654:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    4664:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    4684:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    4694:	00 ff ff 00 00 00 00 00 00 ff ff 00 ff ff ff 00     ................
    46a4:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
	...
    46c4:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    46d4:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    46e4:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    4704:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    4714:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    4724:	00 00 00 ff ff 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    4748:	ff ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    4758:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 ff ff 00     ................
    4768:	00 ff ff 00 00 00 ff ff ff ff 00 00 00 00 00 00     ................
	...
    4784:	00 ff ff 00 00 ff ff 00 00 ff ff 00 ff ff 00 00     ................
    4794:	00 ff ff ff ff 00 00 00 00 ff ff ff ff 00 00 00     ................
    47a4:	00 ff ff 00 ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
	...
    47c4:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    47d4:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    47e4:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    4804:	00 ff ff 00 00 00 ff ff 00 ff ff ff 00 ff ff ff     ................
    4814:	00 ff ff ff ff ff ff ff 00 ff ff 00 ff 00 ff ff     ................
    4824:	00 ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff     ................
	...
    4844:	00 ff ff 00 00 ff ff 00 00 ff ff ff 00 ff ff 00     ................
    4854:	00 ff ff ff ff ff ff 00 00 ff ff ff ff ff ff 00     ................
    4864:	00 ff ff 00 ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    4884:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    4894:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    48a4:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    48c4:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    48d4:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    48e4:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    4904:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    4914:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    4924:	00 ff ff 00 ff ff 00 00 00 00 ff ff 00 ff ff 00     ................
	...
    4944:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    4954:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    4964:	00 ff ff 00 ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
	...
    4984:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    4994:	00 00 ff ff ff ff 00 00 00 00 00 00 00 ff ff 00     ................
    49a4:	00 00 00 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    49c4:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    49d4:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    49e4:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    4a04:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    4a14:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    4a24:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff ff 00     ................
	...
    4a44:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    4a54:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    4a64:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    4a84:	00 ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff     ................
    4a94:	00 ff ff 00 ff 00 ff ff 00 ff ff ff ff ff ff ff     ................
    4aa4:	00 ff ff ff 00 ff ff ff 00 ff ff 00 00 00 ff ff     ................
	...
    4ac4:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    4ad4:	00 00 ff ff ff ff 00 00 00 00 ff ff ff ff 00 00     ................
    4ae4:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    4b04:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    4b14:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
    4b24:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    4b44:	00 ff ff ff ff ff ff 00 00 00 00 00 ff ff 00 00     ................
    4b54:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    4b64:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    4cac:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................

00004cbc <map_star>:
    4cbc:	01 01 0c                                            ...

00004cbf <map_ice_moon>:
    4cbf:	03 03 09 0a 0b 0d 0e 0f 10 11 12                    ...........

00004cca <map_ice_cloud>:
    4cca:	01 01 08                                            ...

00004ccd <map_ice_far>:
    4ccd:	01 01 07                                            ...

00004cd0 <map_ice_sky>:
    4cd0:	01 01 06                                            ...

00004cd3 <map_ice_horizon>:
    4cd3:	01 01 05                                            ...

00004cd6 <map_ice_bottom>:
    4cd6:	01 01 04                                            ...

00004cd9 <map_ice_right>:
    4cd9:	01 01 03                                            ...

00004cdc <map_ice_middle>:
    4cdc:	01 01 02                                            ...

00004cdf <map_ice_left>:
    4cdf:	01 01 01                                            ...

00004ce2 <map_splash>:
    4ce2:	0f 05 13 13 13 00 13 13 13 00 14 15 16 00 13 13     ................
    4cf2:	13 17 13 17 00 13 17 17 00 18 19 1a 00 13 17 17     ................
    4d02:	00 13 00 00 13 00 00 00 1b 1c 1d 00 13 13 13 1e     ................
    4d12:	13 1e 00 13 00 00 00 1f 20 21 00 1e 1e 13 13 13     ........ !......
    4d22:	13 00 13 00 00 00 22 00 00 00 13 13 13              ......"......

00004d2f <map_tile_none>:
    4d2f:	01 01 00                                            ...

00004d32 <__ctors_end>:
    4d32:	11 24       	eor	r1, r1
    4d34:	1f be       	out	0x3f, r1	; 63
    4d36:	cf ef       	ldi	r28, 0xFF	; 255
    4d38:	d0 e1       	ldi	r29, 0x10	; 16
    4d3a:	de bf       	out	0x3e, r29	; 62
    4d3c:	cd bf       	out	0x3d, r28	; 61

00004d3e <__do_copy_data>:
    4d3e:	15 e0       	ldi	r17, 0x05	; 5
    4d40:	a0 e0       	ldi	r26, 0x00	; 0
    4d42:	b5 e0       	ldi	r27, 0x05	; 5
    4d44:	ea e9       	ldi	r30, 0x9A	; 154
    4d46:	f4 ea       	ldi	r31, 0xA4	; 164
    4d48:	02 c0       	rjmp	.+4      	; 0x4d4e <__do_copy_data+0x10>
    4d4a:	05 90       	lpm	r0, Z+
    4d4c:	0d 92       	st	X+, r0
    4d4e:	a2 30       	cpi	r26, 0x02	; 2
    4d50:	b1 07       	cpc	r27, r17
    4d52:	d9 f7       	brne	.-10     	; 0x4d4a <__do_copy_data+0xc>

00004d54 <__do_clear_bss>:
    4d54:	1f e0       	ldi	r17, 0x0F	; 15
    4d56:	a2 e0       	ldi	r26, 0x02	; 2
    4d58:	b5 e0       	ldi	r27, 0x05	; 5
    4d5a:	01 c0       	rjmp	.+2      	; 0x4d5e <.do_clear_bss_start>

00004d5c <.do_clear_bss_loop>:
    4d5c:	1d 92       	st	X+, r1

00004d5e <.do_clear_bss_start>:
    4d5e:	a0 3f       	cpi	r26, 0xF0	; 240
    4d60:	b1 07       	cpc	r27, r17
    4d62:	e1 f7       	brne	.-8      	; 0x4d5c <.do_clear_bss_loop>

00004d64 <wdt_init>:

void wdt_init(void)
{

#if TRUE_RANDOM_GEN == 1	
	wdt_randomize();
    4d64:	0e 94 54 2c 	call	0x58a8	; 0x58a8 <wdt_randomize>
#endif

    MCUSR = 0;
    4d68:	14 be       	out	0x34, r1	; 52
    wdt_disable();
    4d6a:	88 e1       	ldi	r24, 0x18	; 24
    4d6c:	0f b6       	in	r0, 0x3f	; 63
    4d6e:	f8 94       	cli
    4d70:	80 93 60 00 	sts	0x0060, r24
    4d74:	10 92 60 00 	sts	0x0060, r1
    4d78:	0f be       	out	0x3f, r0	; 63

00004d7a <Initialize>:


void Initialize(void){
	int i;

	if(!isEepromFormatted()) FormatEeprom();
    4d7a:	0e 94 11 2d 	call	0x5a22	; 0x5a22 <isEepromFormatted>
    4d7e:	81 11       	cpse	r24, r1
    4d80:	02 c0       	rjmp	.+4      	; 0x4d86 <Initialize+0xc>
    4d82:	0e 94 ef 2c 	call	0x59de	; 0x59de <FormatEeprom>

	cli();
    4d86:	f8 94       	cli
		mix_bank=0;
	#endif
	
	#if MIXER_CHAN4_TYPE == 0
		//initialize LFSR		
		tr4_barrel_lo=1;
    4d88:	81 e0       	ldi	r24, 0x01	; 1
    4d8a:	80 93 cc 0c 	sts	0x0CCC, r24
		tr4_barrel_hi=1;		
    4d8e:	80 93 cd 0c 	sts	0x0CCD, r24
		tr4_params=0b00000001; //15 bits no divider (1)
    4d92:	80 93 cb 0c 	sts	0x0CCB, r24
		snesMouseEnabled=false;
	#endif

	//silence all sound channels
	for(i=0;i<CHANNELS;i++){
		mixer.channels.all[i].volume=0;
    4d96:	10 92 b8 0c 	sts	0x0CB8, r1
    4d9a:	10 92 be 0c 	sts	0x0CBE, r1
    4d9e:	10 92 c4 0c 	sts	0x0CC4, r1
    4da2:	10 92 ca 0c 	sts	0x0CCA, r1
    4da6:	10 92 d0 0c 	sts	0x0CD0, r1
	}
	
	//set sync parameters. starts at odd field, in pre-eq pulses, line 1, vsync flag cleared
	sync_phase=0;
    4daa:	10 92 a0 0c 	sts	0x0CA0, r1
	sync_flags=0;
    4dae:	10 92 a2 0c 	sts	0x0CA2, r1
	sync_pulse=SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES;
    4db2:	92 e1       	ldi	r25, 0x12	; 18
    4db4:	90 93 a1 0c 	sts	0x0CA1, r25

	//set rendering parameters
	render_lines_count=FRAME_LINES;
    4db8:	90 ee       	ldi	r25, 0xE0	; 224
    4dba:	90 93 a8 0c 	sts	0x0CA8, r25
	first_render_line=FIRST_RENDER_LINE;
    4dbe:	94 e1       	ldi	r25, 0x14	; 20
    4dc0:	90 93 a7 0c 	sts	0x0CA7, r25

	joypad1_status_hi=0;
    4dc4:	10 92 ac 0c 	sts	0x0CAC, r1
    4dc8:	10 92 ab 0c 	sts	0x0CAB, r1
	joypad2_status_hi=0;
    4dcc:	10 92 b0 0c 	sts	0x0CB0, r1
    4dd0:	10 92 af 0c 	sts	0x0CAF, r1
	sound_enabled=1;
    4dd4:	80 93 b7 0c 	sts	0x0CB7, r24

	InitializeVideoMode();
    4dd8:	0e 94 cd 39 	call	0x739a	; 0x739a <InitializeVideoMode>
    4ddc:	8e e7       	ldi	r24, 0x7E	; 126
    4dde:	90 e0       	ldi	r25, 0x00	; 0
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
		val=pgm_read_word(&io_table[j]);
    4de0:	fc 01       	movw	r30, r24
    4de2:	25 91       	lpm	r18, Z+
    4de4:	34 91       	lpm	r19, Z
		ptr=(u8*)(val&0xff);
    4de6:	f9 01       	movw	r30, r18
    4de8:	ff 27       	eor	r31, r31
		*ptr=val>>8;	
    4dea:	30 83       	st	Z, r19
    4dec:	02 96       	adiw	r24, 0x02	; 2
	InitializeVideoMode();
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
    4dee:	20 e0       	ldi	r18, 0x00	; 0
    4df0:	8c 3a       	cpi	r24, 0xAC	; 172
    4df2:	92 07       	cpc	r25, r18
    4df4:	a9 f7       	brne	.-22     	; 0x4de0 <Initialize+0x66>
		val=pgm_read_word(&io_table[j]);
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;	
	}

	sei();
    4df6:	78 94       	sei
	
	DisplayLogo();
    4df8:	0e 94 c6 3a 	call	0x758c	; 0x758c <DisplayLogo>
    4dfc:	0e 94 20 50 	call	0xa040	; 0xa040 <main>
    4e00:	0c 94 4b 52 	jmp	0xa496	; 0xa496 <_exit>

00004e04 <__bad_interrupt>:
    4e04:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00004e08 <sub_video_mode3>:
	;***************************************************

	sub_video_mode3:
		;de-activate sync timer interrupts
		;we will need to use the I flag to branch in a critical loop
		ldi ZL,(0<<OCIE1A)
    4e08:	e0 e0       	ldi	r30, 0x00	; 0
		sts _SFR_MEM_ADDR(TIMSK1),ZL
    4e0a:	e0 93 6f 00 	sts	0x006F, r30

		;wait cycles to align with next hsync
		WAIT r26,183+241
    4e0e:	ad e8       	ldi	r26, 0x8D	; 141
    4e10:	aa 95       	dec	r26
    4e12:	f1 f7       	brne	.-4      	; 0x4e10 <sub_video_mode3+0x8>
    4e14:	00 00       	nop

		;Refresh ramtiles indexes in VRAM
		;This has to be done because the main
		;program may have altered the VRAM
		;after vsync and the rendering interrupt.
		lds r16,userRamTilesCount
    4e16:	00 91 db 0c 	lds	r16, 0x0CDB

		ldi ZL,lo8(ram_tiles_restore);
    4e1a:	ea e3       	ldi	r30, 0x3A	; 58
		ldi ZH,hi8(ram_tiles_restore);
    4e1c:	fc e0       	ldi	r31, 0x0C	; 12
		ldi r18,3
    4e1e:	23 e0       	ldi	r18, 0x03	; 3
		mul r16,r18
    4e20:	02 9f       	mul	r16, r18
		add ZL,r0
    4e22:	e0 0d       	add	r30, r0
		adc ZH,r1
    4e24:	f1 1d       	adc	r31, r1

		ldi YL,lo8(vram)
    4e26:	c0 e0       	ldi	r28, 0x00	; 0
		ldi YH,hi8(vram)
    4e28:	d1 e0       	ldi	r29, 0x01	; 1

		lds r18,free_tile_index
    4e2a:	20 91 69 0d 	lds	r18, 0x0D69
		ldi r19,MAX_RAMTILES		;maximum possible ramtiles
    4e2e:	3c e3       	ldi	r19, 0x3C	; 60
		sub r19,r18					;sub free tile
    4e30:	32 1b       	sub	r19, r18
		add r19,r16					;add user tiles
    4e32:	30 0f       	add	r19, r16

		cp r18,r16
    4e34:	20 17       	cp	r18, r16
		breq no_ramtiles
    4e36:	51 f0       	breq	.+20     	; 0x4e4c <no_ramtiles>
		nop
    4e38:	00 00       	nop
	...

00004e3c <upd_loop>:
		nop
upd_loop:
		ld XL,Z+	;load vram offset of ramtile
    4e3c:	a1 91       	ld	r26, Z+
		ld XH,Z+
    4e3e:	b1 91       	ld	r27, Z+

		ld r17,X	;get latest VRAM tile that may have been modified my
    4e40:	1c 91       	ld	r17, X
		st Z+,r17	;the main program and store it in the restore buffer
    4e42:	11 93       	st	Z+, r17
		st X,r16	;write the ramtile index back to vram
    4e44:	0c 93       	st	X, r16

		inc r16
    4e46:	03 95       	inc	r16
		cp r16,r18
    4e48:	02 17       	cp	r16, r18
		brlo upd_loop ;loop is 14 cycles
    4e4a:	c0 f3       	brcs	.-16     	; 0x4e3c <upd_loop>

00004e4c <no_ramtiles>:

no_ramtiles:
		;wait for remaining maximum possible ramtiles
1:
		ldi r17,3
    4e4c:	13 e0       	ldi	r17, 0x03	; 3
		dec r17
    4e4e:	1a 95       	dec	r17
		brne .-4
    4e50:	f1 f7       	brne	.-4      	; 0x4e4e <no_ramtiles+0x2>
		rjmp .
    4e52:	00 c0       	rjmp	.+0      	; 0x4e54 <no_ramtiles+0x8>
		dec r19
    4e54:	3a 95       	dec	r19
		brne 1b
    4e56:	d1 f7       	brne	.-12     	; 0x4e4c <no_ramtiles>

		;**********************
		; setup scroll stuff
		;**********************
	
		ldi YL,lo8(vram)
    4e58:	c0 e0       	ldi	r28, 0x00	; 0
		ldi YH,hi8(vram)
    4e5a:	d1 e0       	ldi	r29, 0x01	; 1

		//add X scroll (coarse)
		lds r18,screen_scrollX ;ScreenScrollX
    4e5c:	20 91 9c 0c 	lds	r18, 0x0C9C
		mov r25,r18
    4e60:	92 2f       	mov	r25, r18
		andi r18,0xf8	;(x>>3) * 8 interleave
    4e62:	28 7f       	andi	r18, 0xF8	; 248
		add YL,r18
    4e64:	c2 0f       	add	r28, r18

		;save Y wrap adress 
		movw r12,YL
    4e66:	6e 01       	movw	r12, r28
	

		//add Y scroll (coarse)
		lds r16,screen_scrollY ;ScreenScrollY
    4e68:	00 91 9d 0c 	lds	r16, 0x0C9D
		mov r22,r16
    4e6c:	60 2f       	mov	r22, r16
		lsr r16
    4e6e:	06 95       	lsr	r16
		lsr r16
    4e70:	06 95       	lsr	r16
		lsr r16 ;/8
    4e72:	06 95       	lsr	r16

        lds r17,screen_scrollHeight
    4e74:	10 91 9e 0c 	lds	r17, 0x0C9E
        sub r17,r16
    4e78:	10 1b       	sub	r17, r16
        mov r15,r17 ;Y tiles to draw before wrapping
    4e7a:	f1 2e       	mov	r15, r17

        mov r17,r16
    4e7c:	10 2f       	mov	r17, r16
        lsr r16
    4e7e:	06 95       	lsr	r16
        lsr r16
    4e80:	06 95       	lsr	r16
        lsr r16 ;/8
    4e82:	06 95       	lsr	r16
		add YH,r16      ; (bits 6-7)
    4e84:	d0 0f       	add	r29, r16
		andi r17,0x7
    4e86:	17 70       	andi	r17, 0x07	; 7
        add YL,r17      ;interleave (bits 3-5)
    4e88:	c1 0f       	add	r28, r17
        andi r22,0x7    ;fine Y scrolling (bits 0-2)
    4e8a:	67 70       	andi	r22, 0x07	; 7
		;lds r20,tile_table_lo
		;lds r21,tile_table_hi
		;out _SFR_IO_ADDR(GPIOR1),r20 ;store for later
		;out _SFR_IO_ADDR(GPIOR2),r21

		lds r20,overlay_tile_table
    4e8c:	40 91 9a 0c 	lds	r20, 0x0C9A
		lds r21,overlay_tile_table+1
    4e90:	50 91 9b 0c 	lds	r21, 0x0C9B
		lds r6,tile_table_lo
    4e94:	60 90 96 0c 	lds	r6, 0x0C96
		lds r7,tile_table_hi
    4e98:	70 90 97 0c 	lds	r7, 0x0C97
		out _SFR_IO_ADDR(GPIOR1),r6 ;store for later
    4e9c:	6a bc       	out	0x2a, r6	; 42
		out _SFR_IO_ADDR(GPIOR2),r7
    4e9e:	7b bc       	out	0x2b, r7	; 43


		;save main section value	
		movw r10,YL
    4ea0:	5e 01       	movw	r10, r28
		mov r23,r22
    4ea2:	76 2f       	mov	r23, r22
		mov r24,r15
    4ea4:	8f 2d       	mov	r24, r15
		mov r9,r25
    4ea6:	99 2e       	mov	r9, r25

		;load values for overlay if it's activated (overlay_height>0)
		
		;compute beginning of overlay in vram 
		lds r16,screen_scrollHeight
    4ea8:	00 91 9e 0c 	lds	r16, 0x0C9E
		mov r18,r16
    4eac:	20 2f       	mov	r18, r16
		lsr r16
    4eae:	06 95       	lsr	r16
		lsr r16
    4eb0:	06 95       	lsr	r16
		lsr r16			;hi8
    4eb2:	06 95       	lsr	r16
		inc r16			;add 0x100 ram offset
    4eb4:	03 95       	inc	r16
		andi r18,7		;lo8
    4eb6:	27 70       	andi	r18, 0x07	; 7
		
		lds r19,overlay_height	
    4eb8:	30 91 99 0c 	lds	r19, 0x0C99
		cpi r19,0
    4ebc:	30 30       	cpi	r19, 0x00	; 0
		in r0, _SFR_IO_ADDR(SREG)
    4ebe:	0f b6       	in	r0, 0x3f	; 63

		sbrs r0,SREG_Z
    4ec0:	01 fe       	sbrs	r0, 1
		clr r22
    4ec2:	66 27       	eor	r22, r22
		sbrs r0,SREG_Z
    4ec4:	01 fe       	sbrs	r0, 1
		mov YL,r18		;lo8(overlay_vram)
    4ec6:	c2 2f       	mov	r28, r18
		sbrs r0,SREG_Z
    4ec8:	01 fe       	sbrs	r0, 1
		mov YH,r16		;hi8(overlay_vram)
    4eca:	d0 2f       	mov	r29, r16
		sbrs r0,SREG_Z
    4ecc:	01 fe       	sbrs	r0, 1
		ser r24
    4ece:	8f ef       	ldi	r24, 0xFF	; 255
		sbrs r0,SREG_Z
    4ed0:	01 fe       	sbrs	r0, 1
		clr r9
    4ed2:	99 24       	eor	r9, r9

		sbrs r0,SREG_Z
    4ed4:	01 fe       	sbrs	r0, 1
		out _SFR_IO_ADDR(GPIOR1),r20
    4ed6:	4a bd       	out	0x2a, r20	; 42
		sbrs r0,SREG_Z
    4ed8:	01 fe       	sbrs	r0, 1
		out _SFR_IO_ADDR(GPIOR2),r21
    4eda:	5b bd       	out	0x2b, r21	; 43


		//ldi r16,SCREEN_TILES_V*TILE_HEIGHT; total scanlines to draw
		//mov r8,r16
		lds r8,render_lines_count ;total scanlines to draw
    4edc:	80 90 a8 0c 	lds	r8, 0x0CA8

00004ee0 <next_tile_line>:
	;r23 = Main section tile row
	;r24 = Current Y tiles to draw before wrapping
	;r25 = Main section scrollX

	next_tile_line:
		rcall hsync_pulse
    4ee0:	bc d3       	rcall	.+1912   	; 0x565a <hsync_pulse>

		WAIT r18,HSYNC_USABLE_CYCLES - AUDIO_OUT_HSYNC_CYCLES
    4ee2:	24 e0       	ldi	r18, 0x04	; 4
    4ee4:	2a 95       	dec	r18
    4ee6:	f1 f7       	brne	.-4      	; 0x4ee4 <next_tile_line+0x4>
    4ee8:	00 00       	nop
				
		call render_tile_line
    4eea:	0e 94 b6 27 	call	0x4f6c	; 0x4f6c <render_tile_line>

		WAIT r18,58
    4eee:	23 e1       	ldi	r18, 0x13	; 19
    4ef0:	2a 95       	dec	r18
    4ef2:	f1 f7       	brne	.-4      	; 0x4ef0 <next_tile_line+0x10>
    4ef4:	00 00       	nop

		inc r22
    4ef6:	63 95       	inc	r22
		dec r8
    4ef8:	8a 94       	dec	r8
		breq text_frame_end
    4efa:	09 f1       	breq	.+66     	; 0x4f3e <text_frame_end>

		cpi r22,TILE_HEIGHT ;last char line? 1
    4efc:	68 30       	cpi	r22, 0x08	; 8
		breq next_tile_row
    4efe:	29 f0       	breq	.+10     	; 0x4f0a <next_tile_row>

		;wait to align with next_tile_row instructions (+1 cycle for the breq)
		WAIT r16,25
    4f00:	08 e0       	ldi	r16, 0x08	; 8
    4f02:	0a 95       	dec	r16
    4f04:	f1 f7       	brne	.-4      	; 0x4f02 <next_tile_line+0x22>
    4f06:	00 00       	nop
		rjmp next_tile_line
    4f08:	eb cf       	rjmp	.-42     	; 0x4ee0 <next_tile_line>

00004f0a <next_tile_row>:

	next_tile_row:

		clr r22		;clear current char line
    4f0a:	66 27       	eor	r22, r22

		;increment vram pointer next row
		mov r16,YL
    4f0c:	0c 2f       	mov	r16, r28
		andi r16,0x7
    4f0e:	07 70       	andi	r16, 0x07	; 7
		cpi r16,7
    4f10:	07 30       	cpi	r16, 0x07	; 7
		breq 1f
    4f12:	11 f0       	breq	.+4      	; 0x4f18 <next_tile_row+0xe>
		inc YL
    4f14:	c3 95       	inc	r28
		rjmp 2f
    4f16:	02 c0       	rjmp	.+4      	; 0x4f1c <next_tile_row+0x12>
	1:
		andi YL,0xf8
    4f18:	c8 7f       	andi	r28, 0xF8	; 248
		inc YH
    4f1a:	d3 95       	inc	r29
	2:

		dec r24		;wrap section?
    4f1c:	8a 95       	dec	r24
		brne .+2
    4f1e:	09 f4       	brne	.+2      	; 0x4f22 <next_tile_row+0x18>
		movw YL,r12
    4f20:	e6 01       	movw	r28, r12

		dec r19
    4f22:	3a 95       	dec	r19
		brne .+2
    4f24:	09 f4       	brne	.+2      	; 0x4f28 <next_tile_row+0x1e>
		mov r22,r23	;section tile row
    4f26:	67 2f       	mov	r22, r23
		brne .+2
    4f28:	09 f4       	brne	.+2      	; 0x4f2c <next_tile_row+0x22>
		movw YL,r10 ;vram adress
    4f2a:	e5 01       	movw	r28, r10
		brne .+2
    4f2c:	09 f4       	brne	.+2      	; 0x4f30 <next_tile_row+0x26>
		mov r24,r15 ;Y wrapping
    4f2e:	8f 2d       	mov	r24, r15
		brne .+2
    4f30:	09 f4       	brne	.+2      	; 0x4f34 <next_tile_row+0x2a>
		mov r9,r25  ;scrollX
    4f32:	99 2e       	mov	r9, r25

		brne .+2
    4f34:	09 f4       	brne	.+2      	; 0x4f38 <next_tile_row+0x2e>
		out _SFR_IO_ADDR(GPIOR1),r6  ;tileset
    4f36:	6a bc       	out	0x2a, r6	; 42
		brne .+2
    4f38:	09 f4       	brne	.+2      	; 0x4f3c <next_tile_row+0x32>
		out _SFR_IO_ADDR(GPIOR2),r7  ;tilset
    4f3a:	7b bc       	out	0x2b, r7	; 43

		rjmp next_tile_line
    4f3c:	d1 cf       	rjmp	.-94     	; 0x4ee0 <next_tile_line>

00004f3e <text_frame_end>:

	text_frame_end:

		WAIT r18,28
    4f3e:	29 e0       	ldi	r18, 0x09	; 9
    4f40:	2a 95       	dec	r18
    4f42:	f1 f7       	brne	.-4      	; 0x4f40 <text_frame_end+0x2>
    4f44:	00 00       	nop

		rcall hsync_pulse ;145
    4f46:	89 d3       	rcall	.+1810   	; 0x565a <hsync_pulse>
	
		clr r1
    4f48:	11 24       	eor	r1, r1
		call RestoreBackground
    4f4a:	0e 94 80 38 	call	0x7100	; 0x7100 <RestoreBackground>

		;set vsync flag & flip field
		lds ZL,sync_flags
    4f4e:	e0 91 a2 0c 	lds	r30, 0x0CA2
		ldi r20,SYNC_FLAG_FIELD
    4f52:	42 e0       	ldi	r20, 0x02	; 2
		ori ZL,SYNC_FLAG_VSYNC
    4f54:	e1 60       	ori	r30, 0x01	; 1
		eor ZL,r20
    4f56:	e4 27       	eor	r30, r20
		sts sync_flags,ZL
    4f58:	e0 93 a2 0c 	sts	0x0CA2, r30
	
		cli 
    4f5c:	f8 94       	cli

		;re-activate sync timer interrupts
		ldi ZL,(1<<OCIE1A)
    4f5e:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIMSK1),ZL
    4f60:	e0 93 6f 00 	sts	0x006F, r30
			
		;clear any pending timer int
		ldi ZL,(1<<OCF1A)
    4f64:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIFR1),ZL
    4f66:	e0 93 36 00 	sts	0x0036, r30

		ret
    4f6a:	08 95       	ret

00004f6c <render_tile_line>:
	; Can destroy: r0,r1,r2,r3,r4,r5,r6,r7,r13,r16,r17,r18,r19,r20,r21,Z
	; 
	; cycles  = 1495
	;*************************************************
	render_tile_line:
		push YL
    4f6c:	cf 93       	push	r28
		push YH
    4f6e:	df 93       	push	r29
		push r23
    4f70:	7f 93       	push	r23
		push r22
    4f72:	6f 93       	push	r22
		push r19
    4f74:	3f 93       	push	r19
		push r13
    4f76:	df 92       	push	r13
		push r12
    4f78:	cf 92       	push	r12
		push r9
    4f7a:	9f 92       	push	r9
		push r7
    4f7c:	7f 92       	push	r7
		push r6
    4f7e:	6f 92       	push	r6
		;--------------------------
		; Rendering 
		;---------------------------

		;get tile row offset
		ldi r23,TILE_WIDTH ;tile width in pixels
    4f80:	78 e0       	ldi	r23, 0x08	; 8
		mul r22,r23
    4f82:	67 9f       	mul	r22, r23

		;compute base adresses for ROM and RAM tiles
		in r16,_SFR_IO_ADDR(GPIOR1) ;tile_table_lo
    4f84:	0a b5       	in	r16, 0x2a	; 42
		in r17,_SFR_IO_ADDR(GPIOR2) ;tile_table_hi
    4f86:	1b b5       	in	r17, 0x2b	; 43
		subi r16,lo8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    4f88:	00 50       	subi	r16, 0x00	; 0
		sbci r17,hi8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    4f8a:	17 40       	sbci	r17, 0x07	; 7

		add r16,r0
    4f8c:	00 0d       	add	r16, r0
		adc r17,r1
    4f8e:	11 1d       	adc	r17, r1
		movw r2,r16			;rom tiles adress
    4f90:	18 01       	movw	r2, r16

		ldi r16,lo8(ram_tiles)
    4f92:	0a e3       	ldi	r16, 0x3A	; 58
		ldi r17,hi8(ram_tiles)
    4f94:	15 e0       	ldi	r17, 0x05	; 5
		add r16,r0
    4f96:	00 0d       	add	r16, r0
		adc r17,r1
    4f98:	11 1d       	adc	r17, r1
		movw r4,r16			;ram tiles adress
    4f9a:	28 01       	movw	r4, r16

		ldi r19,TILE_HEIGHT*TILE_WIDTH
    4f9c:	30 e4       	ldi	r19, 0x40	; 64
		ldi r17,SCREEN_TILES_H-1	;main loop counter
    4f9e:	1b e1       	ldi	r17, 0x1B	; 27


		;handle fine scroll offset
		;lds r22,screenSections+scrollX
		mov r22,r9
    4fa0:	69 2d       	mov	r22, r9
		andi r22,0x7		
    4fa2:	67 70       	andi	r22, 0x07	; 7
		mov r14,r22	;pixels to draw on last tile	
    4fa4:	e6 2e       	mov	r14, r22
		cli			;no trailing pixel to draw (hack, see end: )
    4fa6:	f8 94       	cli
		breq .+2
    4fa8:	09 f0       	breq	.+2      	; 0x4fac <render_tile_line+0x40>
		sei			;some trailing pixel to draw (hack, see end: )
    4faa:	78 94       	sei

		;get first pixel of last tile in ROM (for ROM tiles fine scroll)
		;and adress of next pixel
		movw ZL,YL
    4fac:	fe 01       	movw	r30, r28
		subi ZL,-(SCREEN_TILES_H*8)
    4fae:	e0 52       	subi	r30, 0x20	; 32
		ld r18,Z
    4fb0:	20 81       	ld	r18, Z
		mul r18,r19 	;tile*width*height
    4fb2:	23 9f       	mul	r18, r19
	    add r0,r2    ;add ROM title table address +row offset
    4fb4:	02 0c       	add	r0, r2
	    adc r1,r3
    4fb6:	13 1c       	adc	r1, r3
		movw ZL,r0
    4fb8:	f0 01       	movw	r30, r0
		lpm r9,Z+	;hold first pixel until end 
    4fba:	95 90       	lpm	r9, Z+
		movw r12,ZL ;hold second pixel adress until end
    4fbc:	6f 01       	movw	r12, r30


		;compute first tile adress
	    ld r18,Y     	;load next tile # from VRAM
    4fbe:	28 81       	ld	r18, Y
		subi YL,-8
    4fc0:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT
    4fc2:	2c 31       	cpi	r18, 0x1C	; 28
		in r16,_SFR_IO_ADDR(SREG)	;save the carry flag for later	
    4fc4:	0f b7       	in	r16, 0x3f	; 63
		mul r18,r19 	;tile*width*height
    4fc6:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles	
    4fc8:	a1 01       	movw	r20, r2
		sbrc r16,SREG_C
    4fca:	00 fd       	sbrc	r16, 0
		movw r20,r4		;ram tiles
    4fcc:	a2 01       	movw	r20, r4
	    add r0,r20    ;add title table address +row offset
    4fce:	04 0e       	add	r0, r20
	    adc r1,r21
    4fd0:	15 1e       	adc	r1, r21
		movw XL,r0
    4fd2:	d0 01       	movw	r26, r0


		;compute second tile adress
	    ld r18,Y     	;load next tile # from VRAM
    4fd4:	28 81       	ld	r18, Y
		subi YL,-8
    4fd6:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT
    4fd8:	2c 31       	cpi	r18, 0x1C	; 28
		in r7,_SFR_IO_ADDR(SREG)	;save the carry flag for later
    4fda:	7f b6       	in	r7, 0x3f	; 63
		bst r7,SREG_C
    4fdc:	70 fa       	bst	r7, 0
		mul r18,r19 	;tile*width*height
    4fde:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles
    4fe0:	a1 01       	movw	r20, r2
		brtc .+2
    4fe2:	0e f4       	brtc	.+2      	; 0x4fe6 <render_tile_line+0x7a>
		movw r20,r4		;ram tiles
    4fe4:	a2 01       	movw	r20, r4
	    add r0,r20      ;add title table address +row offset
    4fe6:	04 0e       	add	r0, r20
	    adc r1,r21
    4fe8:	15 1e       	adc	r1, r21
		movw ZL,r0
    4fea:	f0 01       	movw	r30, r0
		movw r6,ZL		;push Z
    4fec:	3f 01       	movw	r6, r30

00004fee <do_fine_scroll>:


	do_fine_scroll:
		;output 1st tile with fine scroll offset 
		clr r0
    4fee:	00 24       	eor	r0, r0
		add XL,r22	;add fine offset
    4ff0:	a6 0f       	add	r26, r22
		adc XH,r0
    4ff2:	b0 1d       	adc	r27, r0

		;compute jump offset
		ldi r23,3
    4ff4:	73 e0       	ldi	r23, 0x03	; 3
		mul r22,r23 ;3 instructions
    4ff6:	67 9f       	mul	r22, r23
	
		sbrs r16,SREG_C
    4ff8:	00 ff       	sbrs	r16, 0
		rjmp rom_fine_scroll
    4ffa:	22 c0       	rjmp	.+68     	; 0x5040 <rom_fine_scroll>

00004ffc <ram_fine_scroll>:

	/***FINE SCROLL RAM LOOP***/
	ram_fine_scroll:
		rjmp .
    4ffc:	00 c0       	rjmp	.+0      	; 0x4ffe <ram_fine_scroll+0x2>
		ldi r22,lo8(pm(ram_fine_scroll_loop))
    4ffe:	66 e0       	ldi	r22, 0x06	; 6
		ldi r23,hi8(pm(ram_fine_scroll_loop))
    5000:	78 e2       	ldi	r23, 0x28	; 40
		add r22,r0
    5002:	60 0d       	add	r22, r0
		adc r23,r1
    5004:	71 1d       	adc	r23, r1
		push r22
    5006:	6f 93       	push	r22
		push r23	
    5008:	7f 93       	push	r23
		ret ;jump into ram_fine_scroll_loop
    500a:	08 95       	ret

0000500c <ram_fine_scroll_loop>:
	ram_fine_scroll_loop:
		.rept 8
			ld r16,X+
			lpm
			out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		.endr
    500c:	0d 91       	ld	r16, X+
    500e:	c8 95       	lpm
    5010:	08 b9       	out	0x08, r16	; 8
    5012:	0d 91       	ld	r16, X+
    5014:	c8 95       	lpm
    5016:	08 b9       	out	0x08, r16	; 8
    5018:	0d 91       	ld	r16, X+
    501a:	c8 95       	lpm
    501c:	08 b9       	out	0x08, r16	; 8
    501e:	0d 91       	ld	r16, X+
    5020:	c8 95       	lpm
    5022:	08 b9       	out	0x08, r16	; 8
    5024:	0d 91       	ld	r16, X+
    5026:	c8 95       	lpm
    5028:	08 b9       	out	0x08, r16	; 8
    502a:	0d 91       	ld	r16, X+
    502c:	c8 95       	lpm
    502e:	08 b9       	out	0x08, r16	; 8
    5030:	0d 91       	ld	r16, X+
    5032:	c8 95       	lpm
    5034:	08 b9       	out	0x08, r16	; 8
    5036:	0d 91       	ld	r16, X+
    5038:	c8 95       	lpm
    503a:	08 b9       	out	0x08, r16	; 8

		;branch to tile #2
		brtc romloop
    503c:	1e f5       	brtc	.+70     	; 0x5084 <romloop>
		rjmp ramloop
    503e:	40 c0       	rjmp	.+128    	; 0x50c0 <ramloop>

00005040 <rom_fine_scroll>:

	/***FINE SCROLL ROM LOOP***/
	rom_fine_scroll:
		movw ZL,XL
    5040:	fd 01       	movw	r30, r26
		ldi r22,lo8(pm(rom_fine_scroll_loop))	
    5042:	68 e2       	ldi	r22, 0x28	; 40
		ldi r23,hi8(pm(rom_fine_scroll_loop))
    5044:	78 e2       	ldi	r23, 0x28	; 40
		add r22,r0
    5046:	60 0d       	add	r22, r0
		adc r23,r1
    5048:	71 1d       	adc	r23, r1
		push r22
    504a:	6f 93       	push	r22
		push r23	
    504c:	7f 93       	push	r23
		ret
    504e:	08 95       	ret

00005050 <rom_fine_scroll_loop>:
	rom_fine_scroll_loop:
		.rept 8
			lpm r16,Z+
			rjmp .
			out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		.endr 
    5050:	05 91       	lpm	r16, Z+
    5052:	00 c0       	rjmp	.+0      	; 0x5054 <rom_fine_scroll_loop+0x4>
    5054:	08 b9       	out	0x08, r16	; 8
    5056:	05 91       	lpm	r16, Z+
    5058:	00 c0       	rjmp	.+0      	; 0x505a <rom_fine_scroll_loop+0xa>
    505a:	08 b9       	out	0x08, r16	; 8
    505c:	05 91       	lpm	r16, Z+
    505e:	00 c0       	rjmp	.+0      	; 0x5060 <rom_fine_scroll_loop+0x10>
    5060:	08 b9       	out	0x08, r16	; 8
    5062:	05 91       	lpm	r16, Z+
    5064:	00 c0       	rjmp	.+0      	; 0x5066 <rom_fine_scroll_loop+0x16>
    5066:	08 b9       	out	0x08, r16	; 8
    5068:	05 91       	lpm	r16, Z+
    506a:	00 c0       	rjmp	.+0      	; 0x506c <rom_fine_scroll_loop+0x1c>
    506c:	08 b9       	out	0x08, r16	; 8
    506e:	05 91       	lpm	r16, Z+
    5070:	00 c0       	rjmp	.+0      	; 0x5072 <rom_fine_scroll_loop+0x22>
    5072:	08 b9       	out	0x08, r16	; 8
    5074:	05 91       	lpm	r16, Z+
    5076:	00 c0       	rjmp	.+0      	; 0x5078 <rom_fine_scroll_loop+0x28>
    5078:	08 b9       	out	0x08, r16	; 8
    507a:	05 91       	lpm	r16, Z+
    507c:	00 c0       	rjmp	.+0      	; 0x507e <rom_fine_scroll_loop+0x2e>
    507e:	08 b9       	out	0x08, r16	; 8
	
		movw ZL,r6		;restore Z for tile #2
    5080:	f3 01       	movw	r30, r6

		;branch to tile #2
		brts ramloop
    5082:	f6 f0       	brts	.+60     	; 0x50c0 <ramloop>

00005084 <romloop>:

	
	romloop:
	    lpm r16,Z+
    5084:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    5086:	08 b9       	out	0x08, r16	; 8
	    ld r18,Y     ;load next tile # from VRAM
    5088:	28 81       	ld	r18, Y

	    lpm r16,Z+
    508a:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 2
    508c:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    508e:	23 9f       	mul	r18, r19

	    lpm r16,Z+
    5090:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 3
    5092:	08 b9       	out	0x08, r16	; 8
		subi YL,-8
    5094:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT		;is tile in RAM or ROM? (RAM tiles have indexes<RAM_TILES_COUNT)
    5096:	2c 31       	cpi	r18, 0x1C	; 28
		
	    lpm r16,Z+
    5098:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    509a:	08 b9       	out	0x08, r16	; 8
		brsh .+2		;skip if next tile is in ROM	
    509c:	08 f4       	brcc	.+2      	; 0x50a0 <romloop+0x1c>
		movw r20,r4 	;load RAM title table address +row offset	
    509e:	a2 01       	movw	r20, r4
   
	    lpm r16,Z+
    50a0:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 5
    50a2:	08 b9       	out	0x08, r16	; 8
		add r0,r20		;add tile table address +row offset lsb
    50a4:	04 0e       	add	r0, r20
	    adc r1,r21		;add title table address +row offset msb
    50a6:	15 1e       	adc	r1, r21

	    lpm r16,Z+
    50a8:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 6
    50aa:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT	
    50ac:	2c 31       	cpi	r18, 0x1C	; 28
		dec r17			;decrement tiles to draw on line (does not affect carry)
    50ae:	1a 95       	dec	r17
   
	    lpm r16,Z+
    50b0:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 7   
    50b2:	08 b9       	out	0x08, r16	; 8
	    lpm r16,Z+
    50b4:	05 91       	lpm	r16, Z+

		breq end	
    50b6:	39 f1       	breq	.+78     	; 0x5106 <end>
	    movw ZL,r0   	;copy next tile adress
    50b8:	f0 01       	movw	r30, r0

	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    50ba:	08 b9       	out	0x08, r16	; 8
	    brcc romloop
    50bc:	18 f7       	brcc	.-58     	; 0x5084 <romloop>
	
		rjmp .
    50be:	00 c0       	rjmp	.+0      	; 0x50c0 <ramloop>

000050c0 <ramloop>:

	ramloop:

	    ld r16,Z+
    50c0:	01 91       	ld	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    50c2:	08 b9       	out	0x08, r16	; 8
	    ld r18,Y     ;load next tile # from VRAM
    50c4:	28 81       	ld	r18, Y

	    ld r16,Z+ 
    50c6:	01 91       	ld	r16, Z+
		subi YL,-8   		
    50c8:	c8 5f       	subi	r28, 0xF8	; 248
		out _SFR_IO_ADDR(DATA_PORT),r16 		;pixel 2
    50ca:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    50cc:	23 9f       	mul	r18, r19

	    ld r16,Z+
    50ce:	01 91       	ld	r16, Z+
		nop
    50d0:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16         ;pixel 3
    50d2:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    50d4:	2c 31       	cpi	r18, 0x1C	; 28
		rjmp .
    50d6:	00 c0       	rjmp	.+0      	; 0x50d8 <ramloop+0x18>
   
	    ld r16,Z+
    50d8:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    50da:	08 b9       	out	0x08, r16	; 8
		brcs .+2 
    50dc:	08 f0       	brcs	.+2      	; 0x50e0 <ramloop+0x20>
		movw r20,r2 	;ROM title table address +row offset	
    50de:	a1 01       	movw	r20, r2
   
   
	    ld r16,Z+
    50e0:	01 91       	ld	r16, Z+
	    add r0,r20    ;add title table address +row offset
    50e2:	04 0e       	add	r0, r20
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 5
    50e4:	08 b9       	out	0x08, r16	; 8
	    adc r1,r21
    50e6:	15 1e       	adc	r1, r21
		rjmp .
    50e8:	00 c0       	rjmp	.+0      	; 0x50ea <ramloop+0x2a>
    
		ld r16,Z+		
    50ea:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 6
    50ec:	08 b9       	out	0x08, r16	; 8
		ld r7,Z+
    50ee:	71 90       	ld	r7, Z+
	    ld r16,Z+	
    50f0:	01 91       	ld	r16, Z+
	
		movw ZL,r0
    50f2:	f0 01       	movw	r30, r0
		out _SFR_IO_ADDR(DATA_PORT),r7      ;pixel 7   
    50f4:	78 b8       	out	0x08, r7	; 8
		nop
    50f6:	00 00       	nop
		cpi r18,RAM_TILES_COUNT	
    50f8:	2c 31       	cpi	r18, 0x1C	; 28
	    dec r17
    50fa:	1a 95       	dec	r17
	    breq end
    50fc:	21 f0       	breq	.+8      	; 0x5106 <end>
	
		nop
    50fe:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    5100:	08 b9       	out	0x08, r16	; 8
	
	    brcc romloop
    5102:	00 f6       	brcc	.-128    	; 0x5084 <romloop>
		rjmp ramloop
    5104:	dd cf       	rjmp	.-70     	; 0x50c0 <ramloop>

00005106 <end>:
	
	end:
		out _SFR_IO_ADDR(DATA_PORT),r16  	;pixel 8
    5106:	08 b9       	out	0x08, r16	; 8
		brid end_fine_scroll				;hack: interrupt flag=0 => no fine offset pixel to draw
    5108:	27 f5       	brid	.+72     	; 0x5152 <end_fine_scroll>
		brcc end_rom_fine_scroll_loop
    510a:	30 f4       	brcc	.+12     	; 0x5118 <end_rom_fine_scroll_loop>

	/***END RAM LOOP***/
		movw ZL,r0
    510c:	f0 01       	movw	r30, r0

0000510e <end_ram_fine_scroll_loop>:
	end_ram_fine_scroll_loop:
		ld r16,Z+
    510e:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
    5110:	08 b9       	out	0x08, r16	; 8
		dec r14
    5112:	ea 94       	dec	r14
		brne end_ram_fine_scroll_loop
    5114:	e1 f7       	brne	.-8      	; 0x510e <end_ram_fine_scroll_loop>
		rjmp end_fine_scroll_ram
    5116:	1f c0       	rjmp	.+62     	; 0x5156 <end_fine_scroll_ram>

00005118 <end_rom_fine_scroll_loop>:

	/***END ROM LOOP***/
	end_rom_fine_scroll_loop:
		movw ZL,r12
    5118:	f6 01       	movw	r30, r12
		nop
    511a:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r9        ;output saved 1st pixel
    511c:	98 b8       	out	0x08, r9	; 8
		dec r14
    511e:	ea 94       	dec	r14
		breq end_fine_scroll_rom
    5120:	c9 f0       	breq	.+50     	; 0x5154 <end_fine_scroll_rom>
	.rept 6
		lpm r16,Z+		
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		dec r14
		breq end_fine_scroll_rom
	.endr
    5122:	05 91       	lpm	r16, Z+
    5124:	08 b9       	out	0x08, r16	; 8
    5126:	ea 94       	dec	r14
    5128:	a9 f0       	breq	.+42     	; 0x5154 <end_fine_scroll_rom>
    512a:	05 91       	lpm	r16, Z+
    512c:	08 b9       	out	0x08, r16	; 8
    512e:	ea 94       	dec	r14
    5130:	89 f0       	breq	.+34     	; 0x5154 <end_fine_scroll_rom>
    5132:	05 91       	lpm	r16, Z+
    5134:	08 b9       	out	0x08, r16	; 8
    5136:	ea 94       	dec	r14
    5138:	69 f0       	breq	.+26     	; 0x5154 <end_fine_scroll_rom>
    513a:	05 91       	lpm	r16, Z+
    513c:	08 b9       	out	0x08, r16	; 8
    513e:	ea 94       	dec	r14
    5140:	49 f0       	breq	.+18     	; 0x5154 <end_fine_scroll_rom>
    5142:	05 91       	lpm	r16, Z+
    5144:	08 b9       	out	0x08, r16	; 8
    5146:	ea 94       	dec	r14
    5148:	29 f0       	breq	.+10     	; 0x5154 <end_fine_scroll_rom>
    514a:	05 91       	lpm	r16, Z+
    514c:	08 b9       	out	0x08, r16	; 8
    514e:	ea 94       	dec	r14
    5150:	09 f0       	breq	.+2      	; 0x5154 <end_fine_scroll_rom>

00005152 <end_fine_scroll>:
	...

00005154 <end_fine_scroll_rom>:
	...

00005156 <end_fine_scroll_ram>:
	end_fine_scroll:	
		nop
	end_fine_scroll_rom:
		nop
	end_fine_scroll_ram:
		clr r16	
    5156:	00 27       	eor	r16, r16
		out _SFR_IO_ADDR(DATA_PORT),r16   
    5158:	08 b9       	out	0x08, r16	; 8

		pop r6
    515a:	6f 90       	pop	r6
		pop r7
    515c:	7f 90       	pop	r7
		pop r9
    515e:	9f 90       	pop	r9
		pop r12
    5160:	cf 90       	pop	r12
		pop r13
    5162:	df 90       	pop	r13
		pop r19
    5164:	3f 91       	pop	r19
		pop r22
    5166:	6f 91       	pop	r22
		pop r23
    5168:	7f 91       	pop	r23
		pop YH
    516a:	df 91       	pop	r29
		pop YL
    516c:	cf 91       	pop	r28

		ret
    516e:	08 95       	ret

00005170 <CopyFlashTile>:
; C-callable
; r24=Source ROM tile index
; r22=Dest RAM tile index
;************************************
CopyFlashTile:
	ldi r18,TILE_HEIGHT*TILE_WIDTH
    5170:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	lds ZL,tile_table_lo
    5172:	e0 91 96 0c 	lds	r30, 0x0C96
	lds ZH,tile_table_hi
    5176:	f0 91 97 0c 	lds	r31, 0x0C97
	mul r24,r18
    517a:	82 9f       	mul	r24, r18
	add ZL,r0
    517c:	e0 0d       	add	r30, r0
	adc ZH,r1
    517e:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    5180:	aa e3       	ldi	r26, 0x3A	; 58
	ldi XH,hi8(ram_tiles)
    5182:	b5 e0       	ldi	r27, 0x05	; 5
	mul r22,r18
    5184:	62 9f       	mul	r22, r18
	add XL,r0
    5186:	a0 0d       	add	r26, r0
	adc XH,r1
    5188:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	lpm r1,Z+
	st X+,r1
.endr
    518a:	15 90       	lpm	r1, Z+
    518c:	1d 92       	st	X+, r1
    518e:	15 90       	lpm	r1, Z+
    5190:	1d 92       	st	X+, r1
    5192:	15 90       	lpm	r1, Z+
    5194:	1d 92       	st	X+, r1
    5196:	15 90       	lpm	r1, Z+
    5198:	1d 92       	st	X+, r1
    519a:	15 90       	lpm	r1, Z+
    519c:	1d 92       	st	X+, r1
    519e:	15 90       	lpm	r1, Z+
    51a0:	1d 92       	st	X+, r1
    51a2:	15 90       	lpm	r1, Z+
    51a4:	1d 92       	st	X+, r1
    51a6:	15 90       	lpm	r1, Z+
    51a8:	1d 92       	st	X+, r1
    51aa:	15 90       	lpm	r1, Z+
    51ac:	1d 92       	st	X+, r1
    51ae:	15 90       	lpm	r1, Z+
    51b0:	1d 92       	st	X+, r1
    51b2:	15 90       	lpm	r1, Z+
    51b4:	1d 92       	st	X+, r1
    51b6:	15 90       	lpm	r1, Z+
    51b8:	1d 92       	st	X+, r1
    51ba:	15 90       	lpm	r1, Z+
    51bc:	1d 92       	st	X+, r1
    51be:	15 90       	lpm	r1, Z+
    51c0:	1d 92       	st	X+, r1
    51c2:	15 90       	lpm	r1, Z+
    51c4:	1d 92       	st	X+, r1
    51c6:	15 90       	lpm	r1, Z+
    51c8:	1d 92       	st	X+, r1
    51ca:	15 90       	lpm	r1, Z+
    51cc:	1d 92       	st	X+, r1
    51ce:	15 90       	lpm	r1, Z+
    51d0:	1d 92       	st	X+, r1
    51d2:	15 90       	lpm	r1, Z+
    51d4:	1d 92       	st	X+, r1
    51d6:	15 90       	lpm	r1, Z+
    51d8:	1d 92       	st	X+, r1
    51da:	15 90       	lpm	r1, Z+
    51dc:	1d 92       	st	X+, r1
    51de:	15 90       	lpm	r1, Z+
    51e0:	1d 92       	st	X+, r1
    51e2:	15 90       	lpm	r1, Z+
    51e4:	1d 92       	st	X+, r1
    51e6:	15 90       	lpm	r1, Z+
    51e8:	1d 92       	st	X+, r1
    51ea:	15 90       	lpm	r1, Z+
    51ec:	1d 92       	st	X+, r1
    51ee:	15 90       	lpm	r1, Z+
    51f0:	1d 92       	st	X+, r1
    51f2:	15 90       	lpm	r1, Z+
    51f4:	1d 92       	st	X+, r1
    51f6:	15 90       	lpm	r1, Z+
    51f8:	1d 92       	st	X+, r1
    51fa:	15 90       	lpm	r1, Z+
    51fc:	1d 92       	st	X+, r1
    51fe:	15 90       	lpm	r1, Z+
    5200:	1d 92       	st	X+, r1
    5202:	15 90       	lpm	r1, Z+
    5204:	1d 92       	st	X+, r1
    5206:	15 90       	lpm	r1, Z+
    5208:	1d 92       	st	X+, r1
    520a:	15 90       	lpm	r1, Z+
    520c:	1d 92       	st	X+, r1
    520e:	15 90       	lpm	r1, Z+
    5210:	1d 92       	st	X+, r1
    5212:	15 90       	lpm	r1, Z+
    5214:	1d 92       	st	X+, r1
    5216:	15 90       	lpm	r1, Z+
    5218:	1d 92       	st	X+, r1
    521a:	15 90       	lpm	r1, Z+
    521c:	1d 92       	st	X+, r1
    521e:	15 90       	lpm	r1, Z+
    5220:	1d 92       	st	X+, r1
    5222:	15 90       	lpm	r1, Z+
    5224:	1d 92       	st	X+, r1
    5226:	15 90       	lpm	r1, Z+
    5228:	1d 92       	st	X+, r1
    522a:	15 90       	lpm	r1, Z+
    522c:	1d 92       	st	X+, r1
    522e:	15 90       	lpm	r1, Z+
    5230:	1d 92       	st	X+, r1
    5232:	15 90       	lpm	r1, Z+
    5234:	1d 92       	st	X+, r1
    5236:	15 90       	lpm	r1, Z+
    5238:	1d 92       	st	X+, r1
    523a:	15 90       	lpm	r1, Z+
    523c:	1d 92       	st	X+, r1
    523e:	15 90       	lpm	r1, Z+
    5240:	1d 92       	st	X+, r1
    5242:	15 90       	lpm	r1, Z+
    5244:	1d 92       	st	X+, r1
    5246:	15 90       	lpm	r1, Z+
    5248:	1d 92       	st	X+, r1
    524a:	15 90       	lpm	r1, Z+
    524c:	1d 92       	st	X+, r1
    524e:	15 90       	lpm	r1, Z+
    5250:	1d 92       	st	X+, r1
    5252:	15 90       	lpm	r1, Z+
    5254:	1d 92       	st	X+, r1
    5256:	15 90       	lpm	r1, Z+
    5258:	1d 92       	st	X+, r1
    525a:	15 90       	lpm	r1, Z+
    525c:	1d 92       	st	X+, r1
    525e:	15 90       	lpm	r1, Z+
    5260:	1d 92       	st	X+, r1
    5262:	15 90       	lpm	r1, Z+
    5264:	1d 92       	st	X+, r1
    5266:	15 90       	lpm	r1, Z+
    5268:	1d 92       	st	X+, r1
    526a:	15 90       	lpm	r1, Z+
    526c:	1d 92       	st	X+, r1
    526e:	15 90       	lpm	r1, Z+
    5270:	1d 92       	st	X+, r1
    5272:	15 90       	lpm	r1, Z+
    5274:	1d 92       	st	X+, r1
    5276:	15 90       	lpm	r1, Z+
    5278:	1d 92       	st	X+, r1
    527a:	15 90       	lpm	r1, Z+
    527c:	1d 92       	st	X+, r1
    527e:	15 90       	lpm	r1, Z+
    5280:	1d 92       	st	X+, r1
    5282:	15 90       	lpm	r1, Z+
    5284:	1d 92       	st	X+, r1
    5286:	15 90       	lpm	r1, Z+
    5288:	1d 92       	st	X+, r1
	clr r1
    528a:	11 24       	eor	r1, r1
	ret
    528c:	08 95       	ret

0000528e <CopyRamTile>:
; r24=Source RAM tile index
; r22=Dest RAM tile index
;************************************
CopyRamTile:

	ldi r18,TILE_HEIGHT*TILE_WIDTH
    528e:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	ldi ZL,lo8(ram_tiles)
    5290:	ea e3       	ldi	r30, 0x3A	; 58
	ldi ZH,hi8(ram_tiles)
    5292:	f5 e0       	ldi	r31, 0x05	; 5
	mul r24,r18
    5294:	82 9f       	mul	r24, r18
	add ZL,r0
    5296:	e0 0d       	add	r30, r0
	adc ZH,r1
    5298:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    529a:	aa e3       	ldi	r26, 0x3A	; 58
	ldi XH,hi8(ram_tiles)
    529c:	b5 e0       	ldi	r27, 0x05	; 5
	mul r22,r18
    529e:	62 9f       	mul	r22, r18
	add XL,r0
    52a0:	a0 0d       	add	r26, r0
	adc XH,r1
    52a2:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	ld r1,Z+
	st X+,r1
.endr
    52a4:	11 90       	ld	r1, Z+
    52a6:	1d 92       	st	X+, r1
    52a8:	11 90       	ld	r1, Z+
    52aa:	1d 92       	st	X+, r1
    52ac:	11 90       	ld	r1, Z+
    52ae:	1d 92       	st	X+, r1
    52b0:	11 90       	ld	r1, Z+
    52b2:	1d 92       	st	X+, r1
    52b4:	11 90       	ld	r1, Z+
    52b6:	1d 92       	st	X+, r1
    52b8:	11 90       	ld	r1, Z+
    52ba:	1d 92       	st	X+, r1
    52bc:	11 90       	ld	r1, Z+
    52be:	1d 92       	st	X+, r1
    52c0:	11 90       	ld	r1, Z+
    52c2:	1d 92       	st	X+, r1
    52c4:	11 90       	ld	r1, Z+
    52c6:	1d 92       	st	X+, r1
    52c8:	11 90       	ld	r1, Z+
    52ca:	1d 92       	st	X+, r1
    52cc:	11 90       	ld	r1, Z+
    52ce:	1d 92       	st	X+, r1
    52d0:	11 90       	ld	r1, Z+
    52d2:	1d 92       	st	X+, r1
    52d4:	11 90       	ld	r1, Z+
    52d6:	1d 92       	st	X+, r1
    52d8:	11 90       	ld	r1, Z+
    52da:	1d 92       	st	X+, r1
    52dc:	11 90       	ld	r1, Z+
    52de:	1d 92       	st	X+, r1
    52e0:	11 90       	ld	r1, Z+
    52e2:	1d 92       	st	X+, r1
    52e4:	11 90       	ld	r1, Z+
    52e6:	1d 92       	st	X+, r1
    52e8:	11 90       	ld	r1, Z+
    52ea:	1d 92       	st	X+, r1
    52ec:	11 90       	ld	r1, Z+
    52ee:	1d 92       	st	X+, r1
    52f0:	11 90       	ld	r1, Z+
    52f2:	1d 92       	st	X+, r1
    52f4:	11 90       	ld	r1, Z+
    52f6:	1d 92       	st	X+, r1
    52f8:	11 90       	ld	r1, Z+
    52fa:	1d 92       	st	X+, r1
    52fc:	11 90       	ld	r1, Z+
    52fe:	1d 92       	st	X+, r1
    5300:	11 90       	ld	r1, Z+
    5302:	1d 92       	st	X+, r1
    5304:	11 90       	ld	r1, Z+
    5306:	1d 92       	st	X+, r1
    5308:	11 90       	ld	r1, Z+
    530a:	1d 92       	st	X+, r1
    530c:	11 90       	ld	r1, Z+
    530e:	1d 92       	st	X+, r1
    5310:	11 90       	ld	r1, Z+
    5312:	1d 92       	st	X+, r1
    5314:	11 90       	ld	r1, Z+
    5316:	1d 92       	st	X+, r1
    5318:	11 90       	ld	r1, Z+
    531a:	1d 92       	st	X+, r1
    531c:	11 90       	ld	r1, Z+
    531e:	1d 92       	st	X+, r1
    5320:	11 90       	ld	r1, Z+
    5322:	1d 92       	st	X+, r1
    5324:	11 90       	ld	r1, Z+
    5326:	1d 92       	st	X+, r1
    5328:	11 90       	ld	r1, Z+
    532a:	1d 92       	st	X+, r1
    532c:	11 90       	ld	r1, Z+
    532e:	1d 92       	st	X+, r1
    5330:	11 90       	ld	r1, Z+
    5332:	1d 92       	st	X+, r1
    5334:	11 90       	ld	r1, Z+
    5336:	1d 92       	st	X+, r1
    5338:	11 90       	ld	r1, Z+
    533a:	1d 92       	st	X+, r1
    533c:	11 90       	ld	r1, Z+
    533e:	1d 92       	st	X+, r1
    5340:	11 90       	ld	r1, Z+
    5342:	1d 92       	st	X+, r1
    5344:	11 90       	ld	r1, Z+
    5346:	1d 92       	st	X+, r1
    5348:	11 90       	ld	r1, Z+
    534a:	1d 92       	st	X+, r1
    534c:	11 90       	ld	r1, Z+
    534e:	1d 92       	st	X+, r1
    5350:	11 90       	ld	r1, Z+
    5352:	1d 92       	st	X+, r1
    5354:	11 90       	ld	r1, Z+
    5356:	1d 92       	st	X+, r1
    5358:	11 90       	ld	r1, Z+
    535a:	1d 92       	st	X+, r1
    535c:	11 90       	ld	r1, Z+
    535e:	1d 92       	st	X+, r1
    5360:	11 90       	ld	r1, Z+
    5362:	1d 92       	st	X+, r1
    5364:	11 90       	ld	r1, Z+
    5366:	1d 92       	st	X+, r1
    5368:	11 90       	ld	r1, Z+
    536a:	1d 92       	st	X+, r1
    536c:	11 90       	ld	r1, Z+
    536e:	1d 92       	st	X+, r1
    5370:	11 90       	ld	r1, Z+
    5372:	1d 92       	st	X+, r1
    5374:	11 90       	ld	r1, Z+
    5376:	1d 92       	st	X+, r1
    5378:	11 90       	ld	r1, Z+
    537a:	1d 92       	st	X+, r1
    537c:	11 90       	ld	r1, Z+
    537e:	1d 92       	st	X+, r1
    5380:	11 90       	ld	r1, Z+
    5382:	1d 92       	st	X+, r1
    5384:	11 90       	ld	r1, Z+
    5386:	1d 92       	st	X+, r1
    5388:	11 90       	ld	r1, Z+
    538a:	1d 92       	st	X+, r1
    538c:	11 90       	ld	r1, Z+
    538e:	1d 92       	st	X+, r1
    5390:	11 90       	ld	r1, Z+
    5392:	1d 92       	st	X+, r1
    5394:	11 90       	ld	r1, Z+
    5396:	1d 92       	st	X+, r1
    5398:	11 90       	ld	r1, Z+
    539a:	1d 92       	st	X+, r1
    539c:	11 90       	ld	r1, Z+
    539e:	1d 92       	st	X+, r1
    53a0:	11 90       	ld	r1, Z+
    53a2:	1d 92       	st	X+, r1
	clr r1
    53a4:	11 24       	eor	r1, r1
	ret
    53a6:	08 95       	ret

000053a8 <BlitSprite>:
; r22=RAM tile index (bt)
; r21:r20=Y:X
; r19:r18=DY:DX
;************************************
BlitSprite:
	push r16
    53a8:	0f 93       	push	r16
	push r17
    53aa:	1f 93       	push	r17
	push YL
    53ac:	cf 93       	push	r28
	push YH
    53ae:	df 93       	push	r29

	;src=sprites_tiletable_lo+(sprites[i].tileIndex*TILE_HEIGHT*TILE_WIDTH)
	ldi r25,SPRITE_STRUCT_SIZE
    53b0:	94 e0       	ldi	r25, 0x04	; 4
	mul r24,r25
    53b2:	89 9f       	mul	r24, r25

	ldi ZL,lo8(sprites)	
    53b4:	e2 e0       	ldi	r30, 0x02	; 2
	ldi ZH,hi8(sprites)	
    53b6:	f5 e0       	ldi	r31, 0x05	; 5
	add ZL,r0
    53b8:	e0 0d       	add	r30, r0
	adc ZH,r1
    53ba:	f1 1d       	adc	r31, r1

	ldd r16,Z+sprFlags
    53bc:	03 81       	ldd	r16, Z+3	; 0x03

	;8x16 multiply
	ldd r24,Z+sprTileIndex
    53be:	82 81       	ldd	r24, Z+2	; 0x02
	ldi r30,TILE_WIDTH*TILE_HEIGHT
    53c0:	e0 e4       	ldi	r30, 0x40	; 64
	mul r24,r30
    53c2:	8e 9f       	mul	r24, r30
	movw r26,r0
    53c4:	d0 01       	movw	r26, r0
	
	;get tile bank addr
	ldi r25,4*2
    53c6:	98 e0       	ldi	r25, 0x08	; 8
	mul r16,r25
    53c8:	09 9f       	mul	r16, r25
	ldi YL,lo8(sprites_tile_banks)	
    53ca:	ce e8       	ldi	r28, 0x8E	; 142
	ldi YH,hi8(sprites_tile_banks)	
    53cc:	dc e0       	ldi	r29, 0x0C	; 12
	clr r0
    53ce:	00 24       	eor	r0, r0
	add YL,r1
    53d0:	c1 0d       	add	r28, r1
	adc YH,r0		
    53d2:	d0 1d       	adc	r29, r0
	ldd ZL,Y+0
    53d4:	e8 81       	ld	r30, Y
	ldd ZH,Y+1
    53d6:	f9 81       	ldd	r31, Y+1	; 0x01
	add ZL,r26	;tile data src
    53d8:	ea 0f       	add	r30, r26
	adc ZH,r27
    53da:	fb 1f       	adc	r31, r27
	
	;dest=ram_tiles+(bt*TILE_HEIGHT*TILE_WIDTH)
	ldi XL,lo8(ram_tiles)	
    53dc:	aa e3       	ldi	r26, 0x3A	; 58
	ldi XH,hi8(ram_tiles)
    53de:	b5 e0       	ldi	r27, 0x05	; 5
	ldi r25,TILE_WIDTH*TILE_HEIGHT
    53e0:	90 e4       	ldi	r25, 0x40	; 64
	mul r22,r25
    53e2:	69 9f       	mul	r22, r25
	add XL,r0
    53e4:	a0 0d       	add	r26, r0
	adc XH,r1
    53e6:	b1 1d       	adc	r27, r1
			srcXdiff=destXdiff;
			src+=destXdiff;
		}
	}
	*/
	clr r1
    53e8:	11 24       	eor	r1, r1
	clr YH		;hi8(srcXdiff)
    53ea:	dd 27       	eor	r29, r29

	cpi r20,0	
    53ec:	40 30       	cpi	r20, 0x00	; 0
	brne x_2nd_tile
    53ee:	51 f4       	brne	.+20     	; 0x5404 <x_2nd_tile>
	
	add XL,r18	;dest+=dx
    53f0:	a2 0f       	add	r26, r18
	adc XH,r1
    53f2:	b1 1d       	adc	r27, r1
	mov r24,r18	;destXdiff=dx
    53f4:	82 2f       	mov	r24, r18
	mov YL,r18	;srcXdiff=dx
    53f6:	c2 2f       	mov	r28, r18

	sbrs r16,SPRITE_FLIP_X_BIT
    53f8:	00 ff       	sbrs	r16, 0
	rjmp x_check_end
    53fa:	11 c0       	rjmp	.+34     	; 0x541e <x_check_end>

	adiw ZL,(TILE_WIDTH-1)	;src+=7
    53fc:	37 96       	adiw	r30, 0x07	; 7
	ldi YL,TILE_WIDTH*2		;srcXdiff=((TILE_WIDTH*2)-dx);
    53fe:	c0 e1       	ldi	r28, 0x10	; 16
	sub YL,r18	
    5400:	c2 1b       	sub	r28, r18
	rjmp x_check_end
    5402:	0d c0       	rjmp	.+26     	; 0x541e <x_check_end>

00005404 <x_2nd_tile>:

x_2nd_tile:
	ldi r24,TILE_WIDTH
    5404:	88 e0       	ldi	r24, 0x08	; 8
	sub r24,r18		;8-DX = xdiff for dest
    5406:	82 1b       	sub	r24, r18

	sbrc r16,SPRITE_FLIP_X_BIT
    5408:	00 fd       	sbrc	r16, 0
	rjmp x2_flip_x
    540a:	04 c0       	rjmp	.+8      	; 0x5414 <x2_flip_x>

	mov YL,r24		;srcXdiff=destXdiff;
    540c:	c8 2f       	mov	r28, r24
	add ZL,r24		;src+=destXdiff;
    540e:	e8 0f       	add	r30, r24
	adc ZH,r1	
    5410:	f1 1d       	adc	r31, r1
	rjmp x_check_end
    5412:	05 c0       	rjmp	.+10     	; 0x541e <x_check_end>

00005414 <x2_flip_x>:

x2_flip_x:
	ldi YL,TILE_WIDTH
    5414:	c8 e0       	ldi	r28, 0x08	; 8
	add YL,r18		;srcXdiff=TILE_WIDTH+dx;	
    5416:	c2 0f       	add	r28, r18
	add ZL,r18		;src+=dx;
    5418:	e2 0f       	add	r30, r18
	adc ZH,r1
    541a:	f1 1d       	adc	r31, r1
	sbiw ZL,1		;src--;
    541c:	31 97       	sbiw	r30, 0x01	; 1

0000541e <x_check_end>:
		}else{
			src+=(ydiff*TILE_WIDTH);
		}
	}
	*/
	cpi r21,0
    541e:	50 30       	cpi	r21, 0x00	; 0
	brne y_2nd_tile
    5420:	51 f4       	brne	.+20     	; 0x5436 <y_2nd_tile>

	ldi r25,TILE_WIDTH	;dest+=(dy*TILE_WIDTH)
    5422:	98 e0       	ldi	r25, 0x08	; 8
	mul r25,r19			
    5424:	93 9f       	mul	r25, r19
	add XL,r0
    5426:	a0 0d       	add	r26, r0
	adc XH,r1
    5428:	b1 1d       	adc	r27, r1

	mov r25,r19			;ydiff=dy
    542a:	93 2f       	mov	r25, r19

	//sbrc r16,SPRITE_FLIP_Y_BIT
	//adiw ZL,(TILE_WIDTH*(TILE_HEIGHT-1))

	sbrc r16,SPRITE_FLIP_Y_BIT
    542c:	01 fd       	sbrc	r16, 1
	subi ZL,lo8(-(TILE_WIDTH*(TILE_HEIGHT-1)));src+=(TILE_WIDTH*(TILE_HEIGHT-1));
    542e:	e8 5c       	subi	r30, 0xC8	; 200
	sbrc r16,SPRITE_FLIP_Y_BIT
    5430:	01 fd       	sbrc	r16, 1
	sbci ZH,hi8(-(TILE_WIDTH*(TILE_HEIGHT-1)))
    5432:	ff 4f       	sbci	r31, 0xFF	; 255


	rjmp y_check_end
    5434:	0a c0       	rjmp	.+20     	; 0x544a <y_check_end>

00005436 <y_2nd_tile>:

y_2nd_tile:
	ldi r25,TILE_HEIGHT	;ydiff=(TILE_HEIGHT-dy)
    5436:	98 e0       	ldi	r25, 0x08	; 8
	sub r25,r19	
    5438:	93 1b       	sub	r25, r19
	
	mov r22,r19			;temp=dy-1
    543a:	63 2f       	mov	r22, r19
	dec r22
    543c:	6a 95       	dec	r22
	sbrs r16,SPRITE_FLIP_Y_BIT
    543e:	01 ff       	sbrs	r16, 1
	mov r22,r25			;temp=ydiff
    5440:	69 2f       	mov	r22, r25

	ldi r21,TILE_WIDTH	;src+=(temp*TILE_WIDTH);
    5442:	58 e0       	ldi	r21, 0x08	; 8
	mul r21,r22
    5444:	56 9f       	mul	r21, r22
	add ZL,r0
    5446:	e0 0d       	add	r30, r0
	adc ZH,r1	
    5448:	f1 1d       	adc	r31, r1

0000544a <y_check_end>:
y_check_end:	
	
	//if(flags&SPRITE_FLIP_X){
	//	step=-1;
	//}
	ser r22		;step=-1
    544a:	6f ef       	ldi	r22, 0xFF	; 255
	ser r23
    544c:	7f ef       	ldi	r23, 0xFF	; 255
	sbrs r16,SPRITE_FLIP_X_BIT
    544e:	00 ff       	sbrs	r16, 0
	ldi r22,1	;step=1
    5450:	61 e0       	ldi	r22, 0x01	; 1
	sbrs r16,SPRITE_FLIP_X_BIT
    5452:	00 ff       	sbrs	r16, 0
	clr r23
    5454:	77 27       	eor	r23, r23

	//if(flags&SPRITE_FLIP_Y){
	//	srcXdiff-=(TILE_WIDTH*2);
	//}
	sbrc r16,SPRITE_FLIP_Y_BIT
    5456:	01 fd       	sbrc	r16, 1
	sbiw YL,(TILE_WIDTH*2)
    5458:	60 97       	sbiw	r28, 0x10	; 16
	;r24	= destXdiff
	;r25	= ydiff
	;X		= dest
	;Y		= srcXdiff
	;Z		= src
	clr r1
    545a:	11 24       	eor	r1, r1
	ldi r19,TRANSLUCENT_COLOR
    545c:	3e ef       	ldi	r19, 0xFE	; 254

	ldi r21,TILE_HEIGHT
    545e:	58 e0       	ldi	r21, 0x08	; 8
	sub r21,r25 	;yspan=(TILE_HEIGHT-ydiff)
    5460:	59 1b       	sub	r21, r25

00005462 <y_loop>:

y_loop:
	ldi r20,TILE_WIDTH
    5462:	48 e0       	ldi	r20, 0x08	; 8
	sub r20,r24 	;xspan=(TILE_WIDTH-destXdiff)
    5464:	48 1b       	sub	r20, r24

00005466 <x_loop>:

x_loop:
	lpm r18,Z		;px=pgm_read_byte(src);
    5466:	24 91       	lpm	r18, Z
	cpse r18,r19	;if(px!=TRANSLUCENT_COLOR)
    5468:	23 13       	cpse	r18, r19
	st X,r18		;*dest=px;
    546a:	2c 93       	st	X, r18
	adiw XL,1
    546c:	11 96       	adiw	r26, 0x01	; 1
	add ZL,r22		;src+=step;
    546e:	e6 0f       	add	r30, r22
	adc ZH,r23
    5470:	f7 1f       	adc	r31, r23
	dec r20
    5472:	4a 95       	dec	r20
	brne x_loop
    5474:	c1 f7       	brne	.-16     	; 0x5466 <x_loop>

	add ZL,YL		;src+=srcXdiff
    5476:	ec 0f       	add	r30, r28
	adc ZH,YH
    5478:	fd 1f       	adc	r31, r29
	add XL,r24		;dest+=destXdiff
    547a:	a8 0f       	add	r26, r24
	adc XH,r1
    547c:	b1 1d       	adc	r27, r1
	dec r21
    547e:	5a 95       	dec	r21
	brne y_loop
    5480:	81 f7       	brne	.-32     	; 0x5462 <y_loop>


	pop YH
    5482:	df 91       	pop	r29
	pop YL
    5484:	cf 91       	pop	r28
	pop r17
    5486:	1f 91       	pop	r17
	pop r16
    5488:	0f 91       	pop	r16
	ret
    548a:	08 95       	ret

0000548c <__vector_13>:

;***************************************************************************
; Main Video sync interrupt
;***************************************************************************
TIMER1_COMPA_vect:
	push r0
    548c:	0f 92       	push	r0
	push r1
    548e:	1f 92       	push	r1
	push ZL;2
    5490:	ef 93       	push	r30
	push ZH;2
    5492:	ff 93       	push	r31
	
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    5494:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    5496:	ef 93       	push	r30

	;Read timer offset since rollover to remove cycles 
	;and conpensate for interrupt latency.
	;This is nessesary to eliminate frame jitter.
	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    5498:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,0x12 ;MIN_INT_LATENCY
    549c:	e2 51       	subi	r30, 0x12	; 18

	ldi ZH,1
    549e:	f1 e0       	ldi	r31, 0x01	; 1

000054a0 <latency_loop>:
latency_loop:
	cp ZL,ZH
    54a0:	ef 17       	cp	r30, r31
	brlo .		;advance PC to next instruction	
    54a2:	00 f0       	brcs	.+0      	; 0x54a4 <latency_loop+0x4>
	inc ZH
    54a4:	f3 95       	inc	r31
	cpi ZH,10
    54a6:	fa 30       	cpi	r31, 0x0A	; 10
	brlo latency_loop
    54a8:	d8 f3       	brcs	.-10     	; 0x54a0 <latency_loop>
	jmp .
    54aa:	0c 94 57 2a 	jmp	0x54ae	; 0x54ae <latency_loop+0xe>
	
	;decrement sync pulse counter
	lds ZL,sync_pulse
    54ae:	e0 91 a1 0c 	lds	r30, 0x0CA1
	dec ZL
    54b2:	ea 95       	dec	r30
	sts sync_pulse,ZL
    54b4:	e0 93 a1 0c 	sts	0x0CA1, r30

	;process sync phases
	lds ZH,sync_phase
    54b8:	f0 91 a0 0c 	lds	r31, 0x0CA0
	sbrc ZH,0
    54bc:	f0 fd       	sbrc	r31, 0
	rjmp sync_hsync
    54be:	57 c0       	rjmp	.+174    	; 0x556e <sync_hsync>
; Note: TCNT1 should be equal to 
; 0x68 on the cbi
; 0xAC on the sbi
; pulse duration: 68 clocks
;***************************************************		
	cpi ZL,SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    54c0:	ec 30       	cpi	r30, 0x0C	; 12
	brlo sync_eq
    54c2:	98 f0       	brcs	.+38     	; 0x54ea <sync_eq>

	;Set HDRIVE to double rate during VSYNC
	ldi ZH,hi8(HDRIVE_CL_TWICE)
    54c4:	f3 e0       	ldi	r31, 0x03	; 3
	sts _SFR_MEM_ADDR(OCR1AH),ZH	
    54c6:	f0 93 89 00 	sts	0x0089, r31
	ldi ZH,lo8(HDRIVE_CL_TWICE)
    54ca:	fd e8       	ldi	r31, 0x8D	; 141
	sts _SFR_MEM_ADDR(OCR1AL),ZH
    54cc:	f0 93 88 00 	sts	0x0088, r31

	bst ZL,0
    54d0:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0x68
    54d2:	28 98       	cbi	0x05, 0	; 5
	brtc sync_pre_eq_no_sound_update
    54d4:	26 f4       	brtc	.+8      	; 0x54de <sync_pre_eq_no_sound_update>
	ldi ZL,1	;indicate update_sound to generate the SBI for pre-eq
    54d6:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    54d8:	0e 94 3e 2b 	call	0x567c	; 0x567c <update_sound>
	rjmp sync_end
    54dc:	b7 c0       	rjmp	.+366    	; 0x564c <sync_end>

000054de <sync_pre_eq_no_sound_update>:

sync_pre_eq_no_sound_update:
	WAIT ZL,64
    54de:	e5 e1       	ldi	r30, 0x15	; 21
    54e0:	ea 95       	dec	r30
    54e2:	f1 f7       	brne	.-4      	; 0x54e0 <sync_pre_eq_no_sound_update+0x2>
    54e4:	00 00       	nop
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    54e6:	28 9a       	sbi	0x05, 0	; 5
		
	rjmp sync_end
    54e8:	b1 c0       	rjmp	.+354    	; 0x564c <sync_end>

000054ea <sync_eq>:
; 0x68  on the cbi
; 0x36E on the sbi
; low pulse duration: 774 clocks
;***************************************************	
sync_eq:
	cpi ZL,SYNC_POST_EQ_PULSES
    54ea:	e6 30       	cpi	r30, 0x06	; 6
	brlo sync_post_eq
    54ec:	38 f1       	brcs	.+78     	; 0x553c <sync_post_eq>

	rjmp .
    54ee:	00 c0       	rjmp	.+0      	; 0x54f0 <sync_eq+0x6>
	rjmp .
    54f0:	00 c0       	rjmp	.+0      	; 0x54f2 <sync_eq+0x8>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    54f2:	28 98       	cbi	0x05, 0	; 5

	bst ZL,0
    54f4:	e0 fb       	bst	r30, 0
	ldi ZL,4
    54f6:	e4 e0       	ldi	r30, 0x04	; 4
	brtc sync_eq_skip
    54f8:	16 f4       	brtc	.+4      	; 0x54fe <sync_eq_skip>
	
	call update_sound
    54fa:	0e 94 3e 2b 	call	0x567c	; 0x567c <update_sound>

000054fe <sync_eq_skip>:
	;enable interupt to bring back sync 
	;level instead of wasting cycles
	;in a big wait loop

 	;clear interrupt flag
	ldi ZL,(1<<OCF1B)
    54fe:	e4 e0       	ldi	r30, 0x04	; 4
	sts _SFR_MEM_ADDR(TIFR1),ZL 
    5500:	e0 93 36 00 	sts	0x0036, r30
	
	;generate interrupt on match
	;for timer1 compare unit b
	ldi ZL,(1<<OCIE1A)+(1<<OCIE1B)
    5504:	e6 e0       	ldi	r30, 0x06	; 6
	sts _SFR_MEM_ADDR(TIMSK1),ZL
    5506:	e0 93 6f 00 	sts	0x006F, r30

	rjmp sync_end
    550a:	a0 c0       	rjmp	.+320    	; 0x564c <sync_end>

0000550c <__vector_14>:
; during VSYNC EQ pulses to recover ~5000 cycles per field
; with interrupt latency conpensation
; 37 cycles
;**********************************************************	
TIMER1_COMPB_vect:
	push ZL
    550c:	ef 93       	push	r30
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    550e:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    5510:	ef 93       	push	r30

	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    5512:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,62+31 ;0x5D ;MIN_INT_LATENCY
    5516:	ed 55       	subi	r30, 0x5D	; 93

	cpi ZL,1
    5518:	e1 30       	cpi	r30, 0x01	; 1
	brlo .		;advance PC to next instruction
    551a:	00 f0       	brcs	.+0      	; 0x551c <__vector_14+0x10>

	cpi ZL,2
    551c:	e2 30       	cpi	r30, 0x02	; 2
	brlo .		;advance PC to next instruction
    551e:	00 f0       	brcs	.+0      	; 0x5520 <__vector_14+0x14>

	cpi ZL,3
    5520:	e3 30       	cpi	r30, 0x03	; 3
	brlo .		;advance PC to next instruction
    5522:	00 f0       	brcs	.+0      	; 0x5524 <__vector_14+0x18>

	cpi ZL,4
    5524:	e4 30       	cpi	r30, 0x04	; 4
	brlo .		;advance PC to next instruction
    5526:	00 f0       	brcs	.+0      	; 0x5528 <__vector_14+0x1c>

	cpi ZL,5
    5528:	e5 30       	cpi	r30, 0x05	; 5
	brlo .		;advance PC to next instruction
    552a:	00 f0       	brcs	.+0      	; 0x552c <__vector_14+0x20>

 	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;68
    552c:	28 9a       	sbi	0x05, 0	; 5
	ldi ZL,(1<<OCIE1A) ; disable OCIE1B 
    552e:	e2 e0       	ldi	r30, 0x02	; 2
	sts _SFR_MEM_ADDR(TIMSK1),ZL ;stop generate interrupt on match
    5530:	e0 93 6f 00 	sts	0x006F, r30
	
	;restore flags
	pop ZL
    5534:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL	
    5536:	ef bf       	out	0x3f, r30	; 63
	pop ZL
    5538:	ef 91       	pop	r30
	reti
    553a:	18 95       	reti

0000553c <sync_post_eq>:
; 0x68 on the cbi
; 0xAC on the sbi
; pulse cycles: 68 clocks
;***************************************************	
sync_post_eq:	
	rjmp .
    553c:	00 c0       	rjmp	.+0      	; 0x553e <sync_post_eq+0x2>

	bst ZL,0
    553e:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    5540:	28 98       	cbi	0x05, 0	; 5
	brtc sync_post_eq_no_sound_update
    5542:	26 f4       	brtc	.+8      	; 0x554c <sync_post_eq_no_sound_update>
	ldi ZL,1	
    5544:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    5546:	0e 94 3e 2b 	call	0x567c	; 0x567c <update_sound>
	rjmp sync_pre_eq_cont
    554a:	05 c0       	rjmp	.+10     	; 0x5556 <sync_pre_eq_cont>

0000554c <sync_post_eq_no_sound_update>:

sync_post_eq_no_sound_update:
	WAIT ZL,64
    554c:	e5 e1       	ldi	r30, 0x15	; 21
    554e:	ea 95       	dec	r30
    5550:	f1 f7       	brne	.-4      	; 0x554e <sync_post_eq_no_sound_update+0x2>
    5552:	00 00       	nop

	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN 
    5554:	28 9a       	sbi	0x05, 0	; 5

00005556 <sync_pre_eq_cont>:

sync_pre_eq_cont:	
	;check if it's the last vsync pulse
	lds ZL,sync_pulse
    5556:	e0 91 a1 0c 	lds	r30, 0x0CA1
	cpi ZL,0
    555a:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2 ;skip rjmp
    555c:	09 f0       	breq	.+2      	; 0x5560 <sync_pre_eq_cont+0xa>
	rjmp sync_end
    555e:	76 c0       	rjmp	.+236    	; 0x564c <sync_end>
	
	;update sync flags
	ldi ZL,SYNC_HSYNC_PULSES
    5560:	ed ef       	ldi	r30, 0xFD	; 253
	sts sync_pulse,ZL
    5562:	e0 93 a1 0c 	sts	0x0CA1, r30
	ldi ZL,1
    5566:	e1 e0       	ldi	r30, 0x01	; 1
	sts sync_phase,ZL
    5568:	e0 93 a0 0c 	sts	0x0CA0, r30
	
	rjmp sync_end
    556c:	6f c0       	rjmp	.+222    	; 0x564c <sync_end>

0000556e <sync_hsync>:
; 0xF0 on the sbi
; pulse duration: 136 clocks
;***************************************************	

	; Set HDRIVE to normal rate
	ldi ZL,hi8(HDRIVE_CL)
    556e:	e7 e0       	ldi	r30, 0x07	; 7
	sts _SFR_MEM_ADDR(OCR1AH),ZL	
    5570:	e0 93 89 00 	sts	0x0089, r30
	ldi ZL,lo8(HDRIVE_CL)
    5574:	eb e1       	ldi	r30, 0x1B	; 27
	sts _SFR_MEM_ADDR(OCR1AL),ZL
    5576:	e0 93 88 00 	sts	0x0088, r30
	rjmp .
    557a:	00 c0       	rjmp	.+0      	; 0x557c <sync_hsync+0xe>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    557c:	28 98       	cbi	0x05, 0	; 5
	
	ldi ZL,2	;indicate update_sound to generate the SBI for pre-eq
    557e:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    5580:	00 c0       	rjmp	.+0      	; 0x5582 <sync_hsync+0x14>
	call update_sound
    5582:	0e 94 3e 2b 	call	0x567c	; 0x567c <update_sound>

	;check if we have reached the first line to render
	ldi ZH,SYNC_HSYNC_PULSES
    5586:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    5588:	00 90 a7 0c 	lds	r0, 0x0CA7
	sub ZH,r0				
    558c:	f0 19       	sub	r31, r0
	lds ZL,sync_pulse
    558e:	e0 91 a1 0c 	lds	r30, 0x0CA1
	cp ZL,ZH
    5592:	ef 17       	cp	r30, r31
	brsh no_render
    5594:	d0 f4       	brcc	.+52     	; 0x55ca <no_render>

	ldi ZH,SYNC_HSYNC_PULSES
    5596:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    5598:	00 90 a7 0c 	lds	r0, 0x0CA7
	sub ZH,r0				
    559c:	f0 19       	sub	r31, r0
	lds r0,render_lines_count
    559e:	00 90 a8 0c 	lds	r0, 0x0CA8
	sub ZH,r0			
    55a2:	f0 19       	sub	r31, r0
	cp ZL,ZH
    55a4:	ef 17       	cp	r30, r31
	brlo no_render
    55a6:	88 f0       	brcs	.+34     	; 0x55ca <no_render>

	;push r1-r29
	ldi ZL,29
    55a8:	ed e1       	ldi	r30, 0x1D	; 29
	clr ZH
    55aa:	ff 27       	eor	r31, r31

000055ac <push_loop>:
push_loop:
	ld r0,Z	;load value from register file
    55ac:	00 80       	ld	r0, Z
	push r0
    55ae:	0f 92       	push	r0
	dec ZL
    55b0:	ea 95       	dec	r30
	brne push_loop	
    55b2:	e1 f7       	brne	.-8      	; 0x55ac <push_loop>

	;timing compensation
	;to insure we always call the video mode 
	;routine at the same cycle	
	WAIT r16,230-(AUDIO_OUT_HSYNC_CYCLES)
    55b4:	06 e0       	ldi	r16, 0x06	; 6
    55b6:	0a 95       	dec	r16
    55b8:	f1 f7       	brne	.-4      	; 0x55b6 <push_loop+0xa>

	call VMODE_FUNC		;TCNT1=0x234
    55ba:	0e 94 04 27 	call	0x4e08	; 0x4e08 <sub_video_mode3>

	;pop r1-r29
	ldi ZL,1
    55be:	e1 e0       	ldi	r30, 0x01	; 1
	clr ZH
    55c0:	ff 27       	eor	r31, r31

000055c2 <pop_loop>:
pop_loop:
	pop r0
    55c2:	0f 90       	pop	r0
	st Z+,r0 ;store value to register file
    55c4:	01 92       	st	Z+, r0
	cpi ZL,30
    55c6:	ee 31       	cpi	r30, 0x1E	; 30
	brlo pop_loop	
    55c8:	e0 f3       	brcs	.-8      	; 0x55c2 <pop_loop>

000055ca <no_render>:

no_render:

	;check if it's the last hsync pulse and we are 
	;ready for VSYNC
	lds ZL,sync_pulse
    55ca:	e0 91 a1 0c 	lds	r30, 0x0CA1
	cpi ZL,0
    55ce:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2
    55d0:	09 f0       	breq	.+2      	; 0x55d4 <no_render+0xa>
	rjmp sync_end
    55d2:	3c c0       	rjmp	.+120    	; 0x564c <sync_end>
;***************************************************
; Process VSYNC stuff
;***************************************************
	
	;push C-call registers
	push r18
    55d4:	2f 93       	push	r18
	push r19
    55d6:	3f 93       	push	r19
	push r20
    55d8:	4f 93       	push	r20
	push r21
    55da:	5f 93       	push	r21
	push r22
    55dc:	6f 93       	push	r22
	push r23
    55de:	7f 93       	push	r23
	push r24
    55e0:	8f 93       	push	r24
	push r25
    55e2:	9f 93       	push	r25
	push r26
    55e4:	af 93       	push	r26
	push r27
    55e6:	bf 93       	push	r27

	sei ;must enable ints for re-entrant sync pulses
    55e8:	78 94       	sei
	clr r1
    55ea:	11 24       	eor	r1, r1

	;set vsync flags
	clr ZL
    55ec:	ee 27       	eor	r30, r30
	sts sync_phase,ZL
    55ee:	e0 93 a0 0c 	sts	0x0CA0, r30
	ldi ZL,SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    55f2:	e2 e1       	ldi	r30, 0x12	; 18
	sts sync_pulse,ZL
    55f4:	e0 93 a1 0c 	sts	0x0CA1, r30



	;increment the vsync counter
	lds r24,vsync_counter
    55f8:	80 91 b1 0c 	lds	r24, 0x0CB1
	lds r25,vsync_counter+1
    55fc:	90 91 b2 0c 	lds	r25, 0x0CB2
	adiw r24,1
    5600:	01 96       	adiw	r24, 0x01	; 1
	sts vsync_counter,r24
    5602:	80 93 b1 0c 	sts	0x0CB1, r24
	sts vsync_counter+1,r25
    5606:	90 93 b2 0c 	sts	0x0CB2, r25


	;process user pre callback
	lds ZL,pre_vsync_user_callback+0
    560a:	e0 91 a3 0c 	lds	r30, 0x0CA3
	lds ZH,pre_vsync_user_callback+1
    560e:	f0 91 a4 0c 	lds	r31, 0x0CA4
	cp  ZL,r1
    5612:	e1 15       	cp	r30, r1
	cpc ZH,r1
    5614:	f1 05       	cpc	r31, r1
	breq .+2 
    5616:	09 f0       	breq	.+2      	; 0x561a <no_render+0x50>
	icall
    5618:	09 95       	icall

	;refresh buttons states
	#if CONTROLLERS_VSYNC_READ == 1
		call ReadControllers
    561a:	0e 94 df 2c 	call	0x59be	; 0x59be <ReadControllers>
	#endif 
	
	;invoke stuff the video mode may have to do
	call VideoModeVsync	
    561e:	0e 94 48 3b 	call	0x7690	; 0x7690 <VideoModeVsync>

	;process music (music, envelopes, etc)
	call process_music
    5622:	0e 94 38 2b 	call	0x5670	; 0x5670 <process_music>
	clr r1
    5626:	11 24       	eor	r1, r1

	;process user post callback
	lds ZL,post_vsync_user_callback+0
    5628:	e0 91 a5 0c 	lds	r30, 0x0CA5
	lds ZH,post_vsync_user_callback+1
    562c:	f0 91 a6 0c 	lds	r31, 0x0CA6
	cp  ZL,r1
    5630:	e1 15       	cp	r30, r1
	cpc ZH,r1
    5632:	f1 05       	cpc	r31, r1
	breq .+2 
    5634:	09 f0       	breq	.+2      	; 0x5638 <no_render+0x6e>
	icall
    5636:	09 95       	icall
	#if SNES_MOUSE == 1
		call ReadMouseExtendedData
		call ProcessMouseMovement
	#endif

	pop r27
    5638:	bf 91       	pop	r27
	pop r26
    563a:	af 91       	pop	r26
	pop r25
    563c:	9f 91       	pop	r25
	pop r24
    563e:	8f 91       	pop	r24
	pop r23
    5640:	7f 91       	pop	r23
	pop r22
    5642:	6f 91       	pop	r22
	pop r21
    5644:	5f 91       	pop	r21
	pop r20
    5646:	4f 91       	pop	r20
	pop r19
    5648:	3f 91       	pop	r19
	pop r18
    564a:	2f 91       	pop	r18

0000564c <sync_end>:
	
sync_end:	
	;restore flags
	pop ZL
    564c:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL
    564e:	ef bf       	out	0x3f, r30	; 63
	
	pop ZH
    5650:	ff 91       	pop	r31
	pop ZL
    5652:	ef 91       	pop	r30
	pop r1
    5654:	1f 90       	pop	r1
	pop r0
    5656:	0f 90       	pop	r0
	reti
    5658:	18 95       	reti

0000565a <hsync_pulse>:
; 0xf0 on the sbi 
;	
; Destroys: ZL (r30)
;*************************************************
hsync_pulse:
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    565a:	28 98       	cbi	0x05, 0	; 5
	ldi ZL,2
    565c:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    565e:	00 c0       	rjmp	.+0      	; 0x5660 <hsync_pulse+0x6>
	call update_sound
    5660:	0e 94 3e 2b 	call	0x567c	; 0x567c <update_sound>

	lds ZL,sync_pulse
    5664:	e0 91 a1 0c 	lds	r30, 0x0CA1
	dec ZL
    5668:	ea 95       	dec	r30
	sts sync_pulse,ZL
    566a:	e0 93 a1 0c 	sts	0x0CA1, r30

	ret
    566e:	08 95       	ret

00005670 <process_music>:
; NOTE: registers r18-r27 are already saved by the caller
;***********************
process_music:
	
#if ENABLE_MIXER==1
	lds ZL,sound_enabled
    5670:	e0 91 b7 0c 	lds	r30, 0x0CB7
	sbrc ZL,0
    5674:	e0 fd       	sbrc	r30, 0
 	call ProcessMusic
    5676:	0e 94 05 30 	call	0x600a	; 0x600a <ProcessMusic>
#endif

	ret
    567a:	08 95       	ret

0000567c <update_sound>:

; Destroys: Z,r0,r1
; cycles: 212+
;****************************
update_sound:
	push r16
    567c:	0f 93       	push	r16
	push r17
    567e:	1f 93       	push	r17
	push r18
    5680:	2f 93       	push	r18
	push r28
    5682:	cf 93       	push	r28
	push r29
    5684:	df 93       	push	r29

	mov r18,ZL
    5686:	2e 2f       	mov	r18, r30

	;channel 1 
	lds r16,tr1_step_lo
    5688:	00 91 b9 0c 	lds	r16, 0x0CB9
	lds r17,tr1_pos_frac
    568c:	10 91 bb 0c 	lds	r17, 0x0CBB
	add	r17,r16	;add step to fractional part of sample pos
    5690:	10 0f       	add	r17, r16
	lds r16,tr1_step_hi	
    5692:	00 91 ba 0c 	lds	r16, 0x0CBA
	lds ZL,tr1_pos_lo
    5696:	e0 91 bc 0c 	lds	r30, 0x0CBC
	lds ZH,tr1_pos_hi 
    569a:	f0 91 bd 0c 	lds	r31, 0x0CBD
	adc ZL,r16	;add step to low byte of sample pos
    569e:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    56a0:	04 91       	lpm	r16, Z
	sts tr1_pos_lo,ZL
    56a2:	e0 93 bc 0c 	sts	0x0CBC, r30
	sts tr1_pos_frac,r17
    56a6:	10 93 bb 0c 	sts	0x0CBB, r17
	lds r17,tr1_vol
    56aa:	10 91 b8 0c 	lds	r17, 0x0CB8
	mulsu r16,r17;(sample*mixing vol)
    56ae:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend	
    56b0:	00 08       	sbc	r0, r0
	mov r28,r1	;set (sample*vol>>8) to mix buffer lsb
    56b2:	c1 2d       	mov	r28, r1
	mov r29,r0	;set mix buffer msb	
    56b4:	d0 2d       	mov	r29, r0
	nop
    56b6:	00 00       	nop

;38
	
	;channel 2
	lds r16,tr2_step_lo
    56b8:	00 91 bf 0c 	lds	r16, 0x0CBF
	lds r17,tr2_pos_frac
    56bc:	10 91 c1 0c 	lds	r17, 0x0CC1
	add	r17,r16	;add step to fractional part of sample pos
    56c0:	10 0f       	add	r17, r16
	lds r16,tr2_step_hi	
    56c2:	00 91 c0 0c 	lds	r16, 0x0CC0
	lds ZL,tr2_pos_lo
    56c6:	e0 91 c2 0c 	lds	r30, 0x0CC2
	lds ZH,tr2_pos_hi 
    56ca:	f0 91 c3 0c 	lds	r31, 0x0CC3
	adc ZL,r16	;add step to low byte of sample pos
    56ce:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    56d0:	04 91       	lpm	r16, Z
	sts tr2_pos_lo,ZL
    56d2:	e0 93 c2 0c 	sts	0x0CC2, r30
	sts tr2_pos_frac,r17
    56d6:	10 93 c1 0c 	sts	0x0CC1, r17
	lds r17,tr2_vol
    56da:	10 91 be 0c 	lds	r17, 0x0CBE

	;*** Video sync update ***
	sbrc r18,0								;pre-eq/post-eq sync
    56de:	20 fd       	sbrc	r18, 0
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    56e0:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,0								
    56e2:	20 ff       	sbrs	r18, 0
	rjmp .
    56e4:	00 c0       	rjmp	.+0      	; 0x56e6 <update_sound+0x6a>
	;*************************

	mulsu r16,r17;(sample*mixing vol)
    56e6:	01 03       	mulsu	r16, r17
	clr r0
    56e8:	00 24       	eor	r0, r0
	sbc r0,r0	;sign extend
    56ea:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    56ec:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb		
    56ee:	d0 1d       	adc	r29, r0
;70
	
	;channel 3
	lds r16,tr3_step_lo
    56f0:	00 91 c5 0c 	lds	r16, 0x0CC5
	lds r17,tr3_pos_frac
    56f4:	10 91 c7 0c 	lds	r17, 0x0CC7
	add	r17,r16				;add step to fractional part of sample pos
    56f8:	10 0f       	add	r17, r16
	lds r16,tr3_step_hi	
    56fa:	00 91 c6 0c 	lds	r16, 0x0CC6
	lds ZL,tr3_pos_lo
    56fe:	e0 91 c8 0c 	lds	r30, 0x0CC8
	lds ZH,tr3_pos_hi 
    5702:	f0 91 c9 0c 	lds	r31, 0x0CC9
	adc ZL,r16				;add step to low byte of sample pos
    5706:	e0 1f       	adc	r30, r16
	lpm	r16,Z				;load sample
    5708:	04 91       	lpm	r16, Z
	sts tr3_pos_lo,ZL
    570a:	e0 93 c8 0c 	sts	0x0CC8, r30
	sts tr3_pos_frac,r17
    570e:	10 93 c7 0c 	sts	0x0CC7, r17
	lds r17,tr3_vol
    5712:	10 91 c4 0c 	lds	r17, 0x0CC4
	mulsu r16,r17			;(sample*mixing vol)
    5716:	01 03       	mulsu	r16, r17
	sbc r0,r0				;sign extend
    5718:	00 08       	sbc	r0, r0
	add r28,r1				;add (sample*vol>>8) to mix buffer lsb
    571a:	c1 0d       	add	r28, r1
	adc r29,r0				;ajust mix buffer msb
    571c:	d0 1d       	adc	r29, r0
;97	

	;channel 4 - 7/15 bit LFSR 
	lds r16,tr4_barrel_lo
    571e:	00 91 cc 0c 	lds	r16, 0x0CCC
	lds r17,tr4_barrel_hi
    5722:	10 91 cd 0c 	lds	r17, 0x0CCD
	lds ZL,tr4_divider
    5726:	e0 91 ce 0c 	lds	r30, 0x0CCE
	dec ZL	
    572a:	ea 95       	dec	r30
	brpl ch4_no_shift	
    572c:	92 f4       	brpl	.+36     	; 0x5752 <ch4_no_shift>

	lds ZH,tr4_params
    572e:	f0 91 cb 0c 	lds	r31, 0x0CCB
	mov ZL,ZH
    5732:	ef 2f       	mov	r30, r31
	lsr ZL 			;keep bits7:1
    5734:	e6 95       	lsr	r30

	mov r0,r16  ;copy barrel shifter
    5736:	00 2e       	mov	r0, r16
	lsr r0
    5738:	06 94       	lsr	r0
	eor r0,r16  ;xor bit0 and bit1
    573a:	00 26       	eor	r0, r16
	bst r0,0
    573c:	00 fa       	bst	r0, 0
	lsr r17
    573e:	16 95       	lsr	r17
	ror r16
    5740:	07 95       	ror	r16
	bld r17,6	;15 bits mode
    5742:	16 f9       	bld	r17, 6
	sbrs ZH,0
    5744:	f0 ff       	sbrs	r31, 0
	bld r16,6	;7 bits mode
    5746:	06 f9       	bld	r16, 6

	sts tr4_barrel_lo,r16
    5748:	00 93 cc 0c 	sts	0x0CCC, r16
	sts tr4_barrel_hi,r17
    574c:	10 93 cd 0c 	sts	0x0CCD, r17

	rjmp ch4_end
    5750:	03 c0       	rjmp	.+6      	; 0x5758 <ch4_end>

00005752 <ch4_no_shift>:
ch4_no_shift:
	;wait loop 21 cycles
	ldi r17,6
    5752:	16 e0       	ldi	r17, 0x06	; 6
	dec r17
    5754:	1a 95       	dec	r17
	brne .-4
    5756:	f1 f7       	brne	.-4      	; 0x5754 <ch4_no_shift+0x2>

00005758 <ch4_end>:
	;rjmp .
ch4_end:

	sts tr4_divider,ZL
    5758:	e0 93 ce 0c 	sts	0x0CCE, r30
	ldi r17,0x80 ;-128
    575c:	10 e8       	ldi	r17, 0x80	; 128
	
	;*** Video sync update ***
	sbrc r18,1								;hsync
    575e:	21 fd       	sbrc	r18, 1
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xF0
    5760:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,1								
    5762:	21 ff       	sbrs	r18, 1
	rjmp .
    5764:	00 c0       	rjmp	.+0      	; 0x5766 <ch4_end+0xe>
	;*************************
	
	sbrc r16,0
    5766:	00 fd       	sbrc	r16, 0
	ldi r17,0x7f ;+127
    5768:	1f e7       	ldi	r17, 0x7F	; 127
	
	lds r16,tr4_vol
    576a:	00 91 ca 0c 	lds	r16, 0x0CCA

	mulsu r17,r16;(sample*mixing vol)
    576e:	10 03       	mulsu	r17, r16
	sbc r0,r0	;sign extend
    5770:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    5772:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb
    5774:	d0 1d       	adc	r29, r0
;142
#if SOUND_CHANNEL_5_ENABLE==1
	;channel 5 PCM -- 45 cycles

	;add fractional part
	lds r16,tr5_pos_frac
    5776:	00 91 d3 0c 	lds	r16, 0x0CD3
	lds r17,tr5_step_lo 
    577a:	10 91 d1 0c 	lds	r17, 0x0CD1
	add r16,r17
    577e:	01 0f       	add	r16, r17
	sts tr5_pos_frac,r16
    5780:	00 93 d3 0c 	sts	0x0CD3, r16

	;add lo
	lds ZL,tr5_pos_lo
    5784:	e0 91 d4 0c 	lds	r30, 0x0CD4
	lds r17,tr5_step_hi 
    5788:	10 91 d2 0c 	lds	r17, 0x0CD2
	adc ZL,r17
    578c:	e1 1f       	adc	r30, r17

	;add hi
	lds ZH,tr5_pos_hi
    578e:	f0 91 d5 0c 	lds	r31, 0x0CD5
	ldi r16,0
    5792:	00 e0       	ldi	r16, 0x00	; 0
	adc ZH,r16
    5794:	f0 1f       	adc	r31, r16

	movw r16,ZL
    5796:	8f 01       	movw	r16, r30
	lds r0,tr5_loop_len_lo
    5798:	00 90 d6 0c 	lds	r0, 0x0CD6
	lds r1,tr5_loop_len_hi	
    579c:	10 90 d7 0c 	lds	r1, 0x0CD7
	sub r16,r0
    57a0:	00 19       	sub	r16, r0
	sbc r17,r1
    57a2:	11 09       	sbc	r17, r1
	lds r0,tr5_loop_end_lo
    57a4:	00 90 d8 0c 	lds	r0, 0x0CD8
	lds r1,tr5_loop_end_hi
    57a8:	10 90 d9 0c 	lds	r1, 0x0CD9

	cp ZL,r0
    57ac:	e0 15       	cp	r30, r0
	cpc ZH,r1
    57ae:	f1 05       	cpc	r31, r1
	brlo .+2
    57b0:	08 f0       	brcs	.+2      	; 0x57b4 <ch4_end+0x5c>
	movw ZL,r16
    57b2:	f8 01       	movw	r30, r16

	sts tr5_pos_lo,ZL
    57b4:	e0 93 d4 0c 	sts	0x0CD4, r30
	sts tr5_pos_hi,ZH
    57b8:	f0 93 d5 0c 	sts	0x0CD5, r31

	lpm	r16,Z	;load sample
    57bc:	04 91       	lpm	r16, Z
	lds r17,tr5_vol
    57be:	10 91 d0 0c 	lds	r17, 0x0CD0

	mulsu r16,r17;(sample*mixing vol)
    57c2:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend
    57c4:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    57c6:	c1 0d       	add	r28, r1
	adc r29,r0	;adjust mix buffer msb	
    57c8:	d0 1d       	adc	r29, r0
#endif
	
	;final processing

	;clip
	clr r0
    57ca:	00 24       	eor	r0, r0
	cpi r28,128	;> 127?
    57cc:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0	
    57ce:	d0 05       	cpc	r29, r0
	brlt .+2
    57d0:	0c f0       	brlt	.+2      	; 0x57d4 <ch4_end+0x7c>
	ldi r28,127
    57d2:	cf e7       	ldi	r28, 0x7F	; 127
	
	dec r0
    57d4:	0a 94       	dec	r0
	cpi r28,-128; <-128?
    57d6:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0xff
    57d8:	d0 05       	cpc	r29, r0
	brge .+2
    57da:	0c f4       	brge	.+2      	; 0x57de <ch4_end+0x86>
	ldi r28,-128
    57dc:	c0 e8       	ldi	r28, 0x80	; 128

	subi r28,128	;convert to unsigned		
    57de:	c0 58       	subi	r28, 0x80	; 128
	sts _SFR_MEM_ADDR(OCR2A),r28 ;output sound byte
    57e0:	c0 93 b3 00 	sts	0x00B3, r28

000057e4 <update_sound_end>:
#endif


update_sound_end:

	pop r29
    57e4:	df 91       	pop	r29
	pop r28
    57e6:	cf 91       	pop	r28
	pop r18
    57e8:	2f 91       	pop	r18
	pop r17
    57ea:	1f 91       	pop	r17
	pop r16
    57ec:	0f 91       	pop	r16
	
	ret
    57ee:	08 95       	ret

000057f0 <SetSpritesTileTable>:
; C-callable
; r25:r24=pointer to sprites pixel data.
;*****************************
.section .text.SetSpritesTileTable
SetSpritesTileTable:
	sts sprites_tile_banks,r24
    57f0:	80 93 8e 0c 	sts	0x0C8E, r24
	sts sprites_tile_banks+1,r25
    57f4:	90 93 8f 0c 	sts	0x0C8F, r25
	ret
    57f8:	08 95       	ret

000057fa <ClearVram>:
; C-callable
;************************************
.section .text.ClearVram
ClearVram:
	//init vram		
	ldi r30,lo8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    57fa:	e0 e0       	ldi	r30, 0x00	; 0
	ldi r31,hi8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    57fc:	f4 e0       	ldi	r31, 0x04	; 4

	ldi XL,lo8(vram)
    57fe:	a0 e0       	ldi	r26, 0x00	; 0
	ldi XH,hi8(vram)
    5800:	b1 e0       	ldi	r27, 0x01	; 1

	ldi r22,RAM_TILES_COUNT
    5802:	6c e1       	ldi	r22, 0x1C	; 28

00005804 <fill_vram_loop>:

fill_vram_loop:
	st X+,r22
    5804:	6d 93       	st	X+, r22
	sbiw r30,1
    5806:	31 97       	sbiw	r30, 0x01	; 1
	brne fill_vram_loop
    5808:	e9 f7       	brne	.-6      	; 0x5804 <fill_vram_loop>

	clr r1
    580a:	11 24       	eor	r1, r1

	ret
    580c:	08 95       	ret

0000580e <SetFont>:
; r22=Y pos (8 bit)
; r20=Font tile No (8 bit)
;************************************
.section .text.SetFont
SetFont:
	lds r21,font_tile_index
    580e:	50 91 98 0c 	lds	r21, 0x0C98
	add r20,21
    5812:	45 0f       	add	r20, r21
	rjmp SetTile	
    5814:	00 c0       	rjmp	.+0      	; 0x5816 <SetTile>

00005816 <SetTile>:
.section .text.SetTile
SetTile:
#if SCROLLING == 1
	;index formula is vram[((y>>3)*256)+8x+(y&7)]
	
	andi r24,0x1f
    5816:	8f 71       	andi	r24, 0x1F	; 31
	mov r23,r22
    5818:	76 2f       	mov	r23, r22
	lsr r22
    581a:	66 95       	lsr	r22
	lsr r22
    581c:	66 95       	lsr	r22
	lsr r22			;y>>3
    581e:	66 95       	lsr	r22
	ldi r18,8		
    5820:	28 e0       	ldi	r18, 0x08	; 8
	mul r24,r18		;x*8
    5822:	82 9f       	mul	r24, r18
	movw XL,r0
    5824:	d0 01       	movw	r26, r0
	subi XL,lo8(-(vram))
    5826:	a0 50       	subi	r26, 0x00	; 0
	sbci XH,hi8(-(vram))
    5828:	bf 4f       	sbci	r27, 0xFF	; 255
	add XH,r22		;vram+((y>>3)*256)
    582a:	b6 0f       	add	r27, r22
	andi r23,7		;y&7	
    582c:	77 70       	andi	r23, 0x07	; 7
	add XL,r23
    582e:	a7 0f       	add	r26, r23
						
	subi r20,~(RAM_TILES_COUNT-1)	
    5830:	44 5e       	subi	r20, 0xE4	; 228
	st X,r20
    5832:	4c 93       	st	X, r20

	clr r1
    5834:	11 24       	eor	r1, r1

	ret
    5836:	08 95       	ret

00005838 <SetFontTilesIndex>:
; C-callable
; r24=First font tile index in tile table (8 bit)
;************************************
.section .text.SetFontTilesIndex
	SetFontTilesIndex:
	sts font_tile_index,r24
    5838:	80 93 98 0c 	sts	0x0C98, r24
	ret
    583c:	08 95       	ret

0000583e <SetTileTable>:
; C-callable
; r25:r24=pointer to tiles data
;************************************
.section .text.SetTileTable
SetTileTable:
	sts tile_table_lo,r24
    583e:	80 93 96 0c 	sts	0x0C96, r24
	sts tile_table_hi,r25	
    5842:	90 93 97 0c 	sts	0x0C97, r25
	ret
    5846:	08 95       	ret

00005848 <GetVsyncFlag>:
;
; C-callable
;************************************
.section .text.GetVsyncFlag
GetVsyncFlag:
	lds r24,sync_flags
    5848:	80 91 a2 0c 	lds	r24, 0x0CA2
	andi r24,SYNC_FLAG_VSYNC
    584c:	81 70       	andi	r24, 0x01	; 1
	ret
    584e:	08 95       	ret

00005850 <ClearVsyncFlag>:
; 
; C-callable
;*****************************
.section .text.ClearVsyncFlag
ClearVsyncFlag:
	lds r18,sync_flags
    5850:	20 91 a2 0c 	lds	r18, 0x0CA2
	andi r18,~SYNC_FLAG_VSYNC
    5854:	2e 7f       	andi	r18, 0xFE	; 254
	sts sync_flags,r18
    5856:	20 93 a2 0c 	sts	0x0CA2, r18
	ret
    585a:	08 95       	ret

0000585c <ReadJoypad>:
; r24=joypad No (0 or 1)
; returns: (int) r25:r24
;*****************************
.section .text.ReadJoypad
ReadJoypad:	
	tst r24
    585c:	88 23       	and	r24, r24
	brne rj_p2
    585e:	29 f4       	brne	.+10     	; 0x586a <rj_p2>
		
	lds r24,joypad1_status_lo
    5860:	80 91 a9 0c 	lds	r24, 0x0CA9
	lds r25,joypad1_status_lo+1
    5864:	90 91 aa 0c 	lds	r25, 0x0CAA
	ret
    5868:	08 95       	ret

0000586a <rj_p2>:
rj_p2:
	lds r24,joypad2_status_lo
    586a:	80 91 ad 0c 	lds	r24, 0x0CAD
	lds r25,joypad2_status_lo+1	
    586e:	90 91 ae 0c 	lds	r25, 0x0CAE

	ret
    5872:	08 95       	ret

00005874 <WaitUs>:
; r25:r24 - us to wait
; returns: void
;****************************
.section .text.WaitUs
WaitUs:	
	ldi r23,8
    5874:	78 e0       	ldi	r23, 0x08	; 8
	dec 23
    5876:	7a 95       	dec	r23
	brne .-4 ;~1 us
    5878:	f1 f7       	brne	.-4      	; 0x5876 <WaitUs+0x2>
	nop
    587a:	00 00       	nop
	sbiw r24,1
    587c:	01 97       	sbiw	r24, 0x01	; 1
	brne WaitUs
    587e:	d1 f7       	brne	.-12     	; 0x5874 <WaitUs>

	ret
    5880:	08 95       	ret

00005882 <WriteEeprom>:
;****************************

.section .text.WriteEeprom
WriteEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    5882:	f9 99       	sbic	0x1f, 1	; 31
   rjmp WriteEeprom
    5884:	fe cf       	rjmp	.-4      	; 0x5882 <WriteEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    5886:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    5888:	81 bd       	out	0x21, r24	; 33
   ; Write data (r22) to Data Register
   out _SFR_IO_ADDR(EEDR),r22
    588a:	60 bd       	out	0x20, r22	; 32
   cli
    588c:	f8 94       	cli
   ; Write logical one to EEMPE
   sbi _SFR_IO_ADDR(EECR),EEMPE
    588e:	fa 9a       	sbi	0x1f, 2	; 31
   ; Start eeprom write by setting EEPE
   sbi _SFR_IO_ADDR(EECR),EEPE
    5890:	f9 9a       	sbi	0x1f, 1	; 31
   sei
    5892:	78 94       	sei
   ret
    5894:	08 95       	ret

00005896 <ReadEeprom>:
; r24 - value read
;****************************
.section .text.ReadEeprom
ReadEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    5896:	f9 99       	sbic	0x1f, 1	; 31
   rjmp ReadEeprom
    5898:	fe cf       	rjmp	.-4      	; 0x5896 <ReadEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    589a:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    589c:	81 bd       	out	0x21, r24	; 33
   ; Start eeprom read by writing EERE
   cli
    589e:	f8 94       	cli
   sbi _SFR_IO_ADDR(EECR),EERE
    58a0:	f8 9a       	sbi	0x1f, 0	; 31
   ; Read data from Data Register
   in r24,_SFR_IO_ADDR(EEDR)
    58a2:	80 b5       	in	r24, 0x20	; 32
   sei
    58a4:	78 94       	sei
   ret
    58a6:	08 95       	ret

000058a8 <wdt_randomize>:
	.global wdt_randomize
	.section .text.wdt_randomize
	wdt_randomize:

		;set timer 1 full speed count to 0xffff
		ldi r24,0
    58a8:	80 e0       	ldi	r24, 0x00	; 0
		sts sync_pulse,r24
    58aa:	80 93 a1 0c 	sts	0x0CA1, r24


		sts _SFR_MEM_ADDR(TIMSK1),r24
    58ae:	80 93 6f 00 	sts	0x006F, r24
		sts _SFR_MEM_ADDR(OCR1AL),r24
    58b2:	80 93 88 00 	sts	0x0088, r24
		sts _SFR_MEM_ADDR(OCR1AH),r24
    58b6:	80 93 89 00 	sts	0x0089, r24
		sts _SFR_MEM_ADDR(OCR1BL),r24
    58ba:	80 93 8a 00 	sts	0x008A, r24
		sts _SFR_MEM_ADDR(OCR1BH),r24
    58be:	80 93 8b 00 	sts	0x008B, r24
		sts _SFR_MEM_ADDR(TCNT1H),r24
    58c2:	80 93 85 00 	sts	0x0085, r24
		sts _SFR_MEM_ADDR(TCNT1L),r24
    58c6:	80 93 84 00 	sts	0x0084, r24
		
		sts _SFR_MEM_ADDR(TCCR1A),r24	
    58ca:	80 93 80 00 	sts	0x0080, r24
		ldi 24,(1<<CS10)
    58ce:	81 e0       	ldi	r24, 0x01	; 1
		sts _SFR_MEM_ADDR(TCCR1B),r24
    58d0:	80 93 81 00 	sts	0x0081, r24

		cli
    58d4:	f8 94       	cli

		;enable watchdog at fastest speed and generate interrupts
		ldi r24,0
    58d6:	80 e0       	ldi	r24, 0x00	; 0
		sts _SFR_MEM_ADDR(MCUSR),r24	
    58d8:	80 93 54 00 	sts	0x0054, r24
		ldi r25,(1<<WDIE)+(1<<WDE)+(0<<WDP3)+(0<<WDP2)+(0<<WDP1)+(0<<WDP0)
    58dc:	98 e4       	ldi	r25, 0x48	; 72
		lds r24,_SFR_MEM_ADDR(WDTCSR)
    58de:	80 91 60 00 	lds	r24, 0x0060
		ori r24,(1<<WDCE)+(1<<WDE)
    58e2:	88 61       	ori	r24, 0x18	; 24
		sts _SFR_MEM_ADDR(WDTCSR),r24
    58e4:	80 93 60 00 	sts	0x0060, r24
		sts _SFR_MEM_ADDR(WDTCSR),r25
    58e8:	90 93 60 00 	sts	0x0060, r25
	
		sei
    58ec:	78 94       	sei

000058ee <wait>:

		;generate 8 random cycles
	wait:
		lds r24,sync_pulse ;using the yet unalocated "sync_pulse" as a temp variable
    58ee:	80 91 a1 0c 	lds	r24, 0x0CA1
		cpi r24,8
    58f2:	88 30       	cpi	r24, 0x08	; 8
		brlo wait
    58f4:	e0 f3       	brcs	.-8      	; 0x58ee <wait>

		ret
    58f6:	08 95       	ret

000058f8 <__vector_8>:
	;*************************************
	; Watchdog timer interrupt
	;*************************************
	WDT_vect:
		;save flags & status register
		push r16
    58f8:	0f 93       	push	r16
		push r17
    58fa:	1f 93       	push	r17

		in r16,_SFR_IO_ADDR(SREG)
    58fc:	0f b7       	in	r16, 0x3f	; 63
		push r16
    58fe:	0f 93       	push	r16

		lds r16,sync_pulse
    5900:	00 91 a1 0c 	lds	r16, 0x0CA1
		inc r16
    5904:	03 95       	inc	r16
		sts sync_pulse,r16
    5906:	00 93 a1 0c 	sts	0x0CA1, r16

		;XOR succesive timer1 LSB into a int
		sbrc r16,0
    590a:	00 fd       	sbrc	r16, 0
		rjmp 1f
    590c:	08 c0       	rjmp	.+16     	; 0x591e <__vector_8+0x26>
		lds r17,random_value
    590e:	10 91 b3 0c 	lds	r17, 0x0CB3
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    5912:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    5916:	10 27       	eor	r17, r16
		sts random_value,r17
    5918:	10 93 b3 0c 	sts	0x0CB3, r17
		rjmp 2f
    591c:	07 c0       	rjmp	.+14     	; 0x592c <__vector_8+0x34>
	1:
		lds r17,random_value+1
    591e:	10 91 b4 0c 	lds	r17, 0x0CB4
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    5922:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    5926:	10 27       	eor	r17, r16
		sts random_value+1,r17
    5928:	10 93 b4 0c 	sts	0x0CB4, r17
	2:

		ldi r16,(1<<WDIE)+(1<<WDE)
    592c:	08 e4       	ldi	r16, 0x48	; 72
		sts _SFR_MEM_ADDR(WDTCSR),r16
    592e:	00 93 60 00 	sts	0x0060, r16

		;restore flags
		pop r16
    5932:	0f 91       	pop	r16
		out _SFR_IO_ADDR(SREG),r16
    5934:	0f bf       	out	0x3f, r16	; 63
	
		pop r17
    5936:	1f 91       	pop	r17
		pop r16
    5938:	0f 91       	pop	r16
		reti
    593a:	18 95       	reti

0000593c <SoftReset>:

/**
 * Performs a software reset
 */
void SoftReset(void){        
	wdt_enable(WDTO_15MS);  
    593c:	98 e0       	ldi	r25, 0x08	; 8
    593e:	88 e1       	ldi	r24, 0x18	; 24
    5940:	0f b6       	in	r0, 0x3f	; 63
    5942:	f8 94       	cli
    5944:	a8 95       	wdr
    5946:	80 93 60 00 	sts	0x0060, r24
    594a:	0f be       	out	0x3f, r0	; 63
    594c:	90 93 60 00 	sts	0x0060, r25
	while(1);
    5950:	ff cf       	rjmp	.-2      	; 0x5950 <SoftReset+0x14>

00005952 <ReadButtons>:
void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
	unsigned char i;

	//latch controllers
	JOYPAD_OUT_PORT|=_BV(JOYPAD_LATCH_PIN);
    5952:	12 9a       	sbi	0x02, 2	; 2
		}else{
			Wait200ns();
			Wait200ns();
		}	
	#else
		Wait200ns();
    5954:	c8 95       	lpm
    5956:	c8 95       	lpm
		Wait200ns();
    5958:	c8 95       	lpm
    595a:	c8 95       	lpm
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));
    595c:	12 98       	cbi	0x02, 2	; 2
    595e:	40 e1       	ldi	r20, 0x10	; 16
	DisplayLogo();
	
}

void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
    5960:	80 e0       	ldi	r24, 0x00	; 0
    5962:	90 e0       	ldi	r25, 0x00	; 0
    5964:	20 e0       	ldi	r18, 0x00	; 0
    5966:	30 e0       	ldi	r19, 0x00	; 0


	//read button states
	for(i=0;i<16;i++){

		p1ButtonsLo>>=1;
    5968:	36 95       	lsr	r19
    596a:	27 95       	ror	r18
		p2ButtonsLo>>=1;
    596c:	96 95       	lsr	r25
    596e:	87 95       	ror	r24
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    5970:	c8 95       	lpm
    5972:	c8 95       	lpm
			Wait200ns();
    5974:	c8 95       	lpm
    5976:	c8 95       	lpm
		#endif
			
		//pulse clock pin		
		JOYPAD_OUT_PORT&=~(_BV(JOYPAD_CLOCK_PIN));
    5978:	13 98       	cbi	0x02, 3	; 2
		
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) p1ButtonsLo|=(1<<15);
    597a:	00 9b       	sbis	0x00, 0	; 0
    597c:	30 68       	ori	r19, 0x80	; 128
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) p2ButtonsLo|=(1<<15);
    597e:	01 9b       	sbis	0x00, 1	; 0
    5980:	90 68       	ori	r25, 0x80	; 128
		
		JOYPAD_OUT_PORT|=_BV(JOYPAD_CLOCK_PIN);
    5982:	13 9a       	sbi	0x02, 3	; 2
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    5984:	c8 95       	lpm
    5986:	c8 95       	lpm
			Wait200ns();
    5988:	c8 95       	lpm
    598a:	c8 95       	lpm
    598c:	41 50       	subi	r20, 0x01	; 1
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));


	//read button states
	for(i=0;i<16;i++){
    598e:	61 f7       	brne	.-40     	; 0x5968 <ReadButtons+0x16>
		#endif

	}

	#if JOYSTICK==TYPE_SNES
		joypad1_status_lo=p1ButtonsLo;
    5990:	30 93 aa 0c 	sts	0x0CAA, r19
    5994:	20 93 a9 0c 	sts	0x0CA9, r18
		joypad2_status_lo=p2ButtonsLo;
    5998:	90 93 ae 0c 	sts	0x0CAE, r25
    599c:	80 93 ad 0c 	sts	0x0CAD, r24
	#else
		joypad1_status_lo=p1ButtonsLo&0xff;
		joypad2_status_lo=p2ButtonsLo&0xff;	
	#endif

	if(joypad1_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B) || joypad2_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B)){
    59a0:	80 91 a9 0c 	lds	r24, 0x0CA9
    59a4:	90 91 aa 0c 	lds	r25, 0x0CAA
    59a8:	0f 97       	sbiw	r24, 0x0f	; 15
    59aa:	31 f0       	breq	.+12     	; 0x59b8 <ReadButtons+0x66>
    59ac:	80 91 ad 0c 	lds	r24, 0x0CAD
    59b0:	90 91 ae 0c 	lds	r25, 0x0CAE
    59b4:	0f 97       	sbiw	r24, 0x0f	; 15
    59b6:	11 f4       	brne	.+4      	; 0x59bc <ReadButtons+0x6a>
		SoftReset();
    59b8:	0e 94 9e 2c 	call	0x593c	; 0x593c <SoftReset>
    59bc:	08 95       	ret

000059be <ReadControllers>:
 * program when CONTROLLERS_VSYNC_READ==0.
*/
void ReadControllers(){

	//Detect if devices are connected.
	joypadsConnectionStatus=0;
    59be:	10 92 e3 0c 	sts	0x0CE3, r1
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) joypadsConnectionStatus|=1;
    59c2:	00 99       	sbic	0x00, 0	; 0
    59c4:	03 c0       	rjmp	.+6      	; 0x59cc <ReadControllers+0xe>
    59c6:	81 e0       	ldi	r24, 0x01	; 1
    59c8:	80 93 e3 0c 	sts	0x0CE3, r24
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) joypadsConnectionStatus|=2;
    59cc:	01 99       	sbic	0x00, 1	; 0
    59ce:	05 c0       	rjmp	.+10     	; 0x59da <ReadControllers+0x1c>
    59d0:	80 91 e3 0c 	lds	r24, 0x0CE3
    59d4:	82 60       	ori	r24, 0x02	; 2
    59d6:	80 93 e3 0c 	sts	0x0CE3, r24
			
	//read the standard buttons
	ReadButtons();
    59da:	0c 94 a9 2c 	jmp	0x5952	; 0x5952 <ReadButtons>

000059de <FormatEeprom>:
	return resp;
}

	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {
    59de:	cf 93       	push	r28
    59e0:	df 93       	push	r29
    59e2:	c0 e0       	ldi	r28, 0x00	; 0
    59e4:	d0 e0       	ldi	r29, 0x00	; 0
    59e6:	fe 01       	movw	r30, r28
    59e8:	e4 55       	subi	r30, 0x54	; 84
    59ea:	ff 4f       	sbci	r31, 0xFF	; 255

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
    59ec:	64 91       	lpm	r22, Z
    59ee:	ce 01       	movw	r24, r28
    59f0:	0e 94 41 2c 	call	0x5882	; 0x5882 <WriteEeprom>
    59f4:	21 96       	adiw	r28, 0x01	; 1
	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
    59f6:	c0 32       	cpi	r28, 0x20	; 32
    59f8:	d1 05       	cpc	r29, r1
    59fa:	a9 f7       	brne	.-22     	; 0x59e6 <FormatEeprom+0x8>
    59fc:	c0 e2       	ldi	r28, 0x20	; 32
    59fe:	d0 e0       	ldi	r29, 0x00	; 0
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
    5a00:	6f ef       	ldi	r22, 0xFF	; 255
    5a02:	ce 01       	movw	r24, r28
    5a04:	0e 94 41 2c 	call	0x5882	; 0x5882 <WriteEeprom>
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
    5a08:	6f ef       	ldi	r22, 0xFF	; 255
    5a0a:	ce 01       	movw	r24, r28
    5a0c:	01 96       	adiw	r24, 0x01	; 1
    5a0e:	0e 94 41 2c 	call	0x5882	; 0x5882 <WriteEeprom>
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
    5a12:	a0 96       	adiw	r28, 0x20	; 32
    5a14:	c1 15       	cp	r28, r1
    5a16:	88 e0       	ldi	r24, 0x08	; 8
    5a18:	d8 07       	cpc	r29, r24
    5a1a:	91 f7       	brne	.-28     	; 0x5a00 <FormatEeprom+0x22>
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
   }
   
}
    5a1c:	df 91       	pop	r29
    5a1e:	cf 91       	pop	r28
    5a20:	08 95       	ret

00005a22 <isEepromFormatted>:
	  }
   }
}
	
//returns true if the EEPROM has been setup to work with the kernel.
bool isEepromFormatted(){
    5a22:	cf 93       	push	r28
	unsigned id;
	id=ReadEeprom(0)+(ReadEeprom(1)<<8);
    5a24:	80 e0       	ldi	r24, 0x00	; 0
    5a26:	90 e0       	ldi	r25, 0x00	; 0
    5a28:	0e 94 4b 2c 	call	0x5896	; 0x5896 <ReadEeprom>
    5a2c:	c8 2f       	mov	r28, r24
    5a2e:	81 e0       	ldi	r24, 0x01	; 1
    5a30:	90 e0       	ldi	r25, 0x00	; 0
    5a32:	0e 94 4b 2c 	call	0x5896	; 0x5896 <ReadEeprom>
    5a36:	28 2f       	mov	r18, r24
    5a38:	30 e0       	ldi	r19, 0x00	; 0
    5a3a:	32 2f       	mov	r19, r18
    5a3c:	22 27       	eor	r18, r18
    5a3e:	2c 0f       	add	r18, r28
    5a40:	31 1d       	adc	r19, r1
	return (id==EEPROM_SIGNATURE);
    5a42:	81 e0       	ldi	r24, 0x01	; 1
    5a44:	2a 35       	cpi	r18, 0x5A	; 90
    5a46:	35 45       	sbci	r19, 0x55	; 85
    5a48:	09 f0       	breq	.+2      	; 0x5a4c <isEepromFormatted+0x2a>
    5a4a:	80 e0       	ldi	r24, 0x00	; 0
}
    5a4c:	cf 91       	pop	r28
    5a4e:	08 95       	ret

00005a50 <EepromBlockExists>:
 * @return
 *  0x00 = Success, Block exists.
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK.
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND.
 */
char EepromBlockExists(unsigned int blockId, u16* eepromAddr, u8* nextFreeBlockId){
    5a50:	8f 92       	push	r8
    5a52:	9f 92       	push	r9
    5a54:	af 92       	push	r10
    5a56:	bf 92       	push	r11
    5a58:	cf 92       	push	r12
    5a5a:	df 92       	push	r13
    5a5c:	ef 92       	push	r14
    5a5e:	ff 92       	push	r15
    5a60:	0f 93       	push	r16
    5a62:	1f 93       	push	r17
    5a64:	cf 93       	push	r28
    5a66:	df 93       	push	r29
	u8 nextFreeBlock=0;
	u8 result=EEPROM_ERROR_BLOCK_NOT_FOUND;
	u16 id;
	*eepromAddr=0;
    5a68:	fb 01       	movw	r30, r22
    5a6a:	11 82       	std	Z+1, r1	; 0x01
    5a6c:	10 82       	st	Z, r1

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    5a6e:	8f 3f       	cpi	r24, 0xFF	; 255
    5a70:	ff ef       	ldi	r31, 0xFF	; 255
    5a72:	9f 07       	cpc	r25, r31
    5a74:	89 f1       	breq	.+98     	; 0x5ad8 <EepromBlockExists+0x88>
    5a76:	6a 01       	movw	r12, r20
    5a78:	8b 01       	movw	r16, r22
    5a7a:	7c 01       	movw	r14, r24
    5a7c:	a1 2c       	mov	r10, r1
    5a7e:	b1 2c       	mov	r11, r1
    5a80:	c0 e0       	ldi	r28, 0x00	; 0
    5a82:	d3 e0       	ldi	r29, 0x03	; 3
    5a84:	91 2c       	mov	r9, r1
		
	//scan all blocks and get the memory adress of that block and the next free block
	for(u8 i=0;i<EEPROM_MAX_BLOCKS;i++){
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
    5a86:	c5 01       	movw	r24, r10
    5a88:	0e 94 4b 2c 	call	0x5896	; 0x5896 <ReadEeprom>
    5a8c:	88 2e       	mov	r8, r24
    5a8e:	c5 01       	movw	r24, r10
    5a90:	01 96       	adiw	r24, 0x01	; 1
    5a92:	0e 94 4b 2c 	call	0x5896	; 0x5896 <ReadEeprom>
    5a96:	28 2f       	mov	r18, r24
    5a98:	30 e0       	ldi	r19, 0x00	; 0
    5a9a:	32 2f       	mov	r19, r18
    5a9c:	22 27       	eor	r18, r18
    5a9e:	28 0d       	add	r18, r8
    5aa0:	31 1d       	adc	r19, r1
		
		if(id==blockId){
    5aa2:	2e 15       	cp	r18, r14
    5aa4:	3f 05       	cpc	r19, r15
    5aa6:	29 f4       	brne	.+10     	; 0x5ab2 <EepromBlockExists+0x62>
			*eepromAddr=(i*EEPROM_BLOCK_SIZE);
    5aa8:	f8 01       	movw	r30, r16
    5aaa:	b1 82       	std	Z+1, r11	; 0x01
    5aac:	a0 82       	st	Z, r10
			result=EEPROM_OK;
    5aae:	d0 e0       	ldi	r29, 0x00	; 0
    5ab0:	0b c0       	rjmp	.+22     	; 0x5ac8 <EepromBlockExists+0x78>
		}
		
		if(id==0xffff && nextFreeBlock==0){
    5ab2:	2f 3f       	cpi	r18, 0xFF	; 255
    5ab4:	3f 4f       	sbci	r19, 0xFF	; 255
    5ab6:	41 f4       	brne	.+16     	; 0x5ac8 <EepromBlockExists+0x78>
    5ab8:	91 10       	cpse	r9, r1
    5aba:	06 c0       	rjmp	.+12     	; 0x5ac8 <EepromBlockExists+0x78>
			nextFreeBlock=i;
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
    5abc:	c1 14       	cp	r12, r1
    5abe:	d1 04       	cpc	r13, r1
    5ac0:	11 f0       	breq	.+4      	; 0x5ac6 <EepromBlockExists+0x76>
    5ac2:	f6 01       	movw	r30, r12
    5ac4:	c0 83       	st	Z, r28
    5ac6:	9c 2e       	mov	r9, r28
	*eepromAddr=0;

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
		
	//scan all blocks and get the memory adress of that block and the next free block
	for(u8 i=0;i<EEPROM_MAX_BLOCKS;i++){
    5ac8:	cf 5f       	subi	r28, 0xFF	; 255
    5aca:	f0 e2       	ldi	r31, 0x20	; 32
    5acc:	af 0e       	add	r10, r31
    5ace:	b1 1c       	adc	r11, r1
    5ad0:	c0 34       	cpi	r28, 0x40	; 64
    5ad2:	c9 f6       	brne	.-78     	; 0x5a86 <EepromBlockExists+0x36>
			nextFreeBlock=i;
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
		}
	}

	return result;
    5ad4:	8d 2f       	mov	r24, r29
    5ad6:	01 c0       	rjmp	.+2      	; 0x5ada <EepromBlockExists+0x8a>
	u8 nextFreeBlock=0;
	u8 result=EEPROM_ERROR_BLOCK_NOT_FOUND;
	u16 id;
	*eepromAddr=0;

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    5ad8:	81 e0       	ldi	r24, 0x01	; 1
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
		}
	}

	return result;
}
    5ada:	df 91       	pop	r29
    5adc:	cf 91       	pop	r28
    5ade:	1f 91       	pop	r17
    5ae0:	0f 91       	pop	r16
    5ae2:	ff 90       	pop	r15
    5ae4:	ef 90       	pop	r14
    5ae6:	df 90       	pop	r13
    5ae8:	cf 90       	pop	r12
    5aea:	bf 90       	pop	r11
    5aec:	af 90       	pop	r10
    5aee:	9f 90       	pop	r9
    5af0:	8f 90       	pop	r8
    5af2:	08 95       	ret

00005af4 <EepromWriteBlock>:
 * Returns:
 *  0x00 = Success
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x02 = EEPROM_ERROR_FULL
 */
char EepromWriteBlock(struct EepromBlockStruct *block){
    5af4:	ef 92       	push	r14
    5af6:	ff 92       	push	r15
    5af8:	0f 93       	push	r16
    5afa:	1f 93       	push	r17
    5afc:	cf 93       	push	r28
    5afe:	df 93       	push	r29
    5b00:	00 d0       	rcall	.+0      	; 0x5b02 <EepromWriteBlock+0xe>
    5b02:	1f 92       	push	r1
    5b04:	cd b7       	in	r28, 0x3d	; 61
    5b06:	de b7       	in	r29, 0x3e	; 62
    5b08:	8c 01       	movw	r16, r24
	u16 eepromAddr=0;
    5b0a:	1a 82       	std	Y+2, r1	; 0x02
    5b0c:	19 82       	std	Y+1, r1	; 0x01
	u8 *srcPtr=(unsigned char *)block,res,nextFreeBlock=0;
    5b0e:	1b 82       	std	Y+3, r1	; 0x03

	res=EepromBlockExists(block->id,&eepromAddr,&nextFreeBlock);
    5b10:	ae 01       	movw	r20, r28
    5b12:	4d 5f       	subi	r20, 0xFD	; 253
    5b14:	5f 4f       	sbci	r21, 0xFF	; 255
    5b16:	be 01       	movw	r22, r28
    5b18:	6f 5f       	subi	r22, 0xFF	; 255
    5b1a:	7f 4f       	sbci	r23, 0xFF	; 255
    5b1c:	fc 01       	movw	r30, r24
    5b1e:	80 81       	ld	r24, Z
    5b20:	91 81       	ldd	r25, Z+1	; 0x01
    5b22:	0e 94 28 2d 	call	0x5a50	; 0x5a50 <EepromBlockExists>
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;
    5b26:	88 23       	and	r24, r24
    5b28:	11 f0       	breq	.+4      	; 0x5b2e <EepromWriteBlock+0x3a>
    5b2a:	83 30       	cpi	r24, 0x03	; 3
    5b2c:	19 f5       	brne	.+70     	; 0x5b74 <EepromWriteBlock+0x80>

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    5b2e:	89 81       	ldd	r24, Y+1	; 0x01
    5b30:	9a 81       	ldd	r25, Y+2	; 0x02
    5b32:	89 2b       	or	r24, r25
    5b34:	49 f4       	brne	.+18     	; 0x5b48 <EepromWriteBlock+0x54>
    5b36:	8b 81       	ldd	r24, Y+3	; 0x03
    5b38:	88 23       	and	r24, r24
    5b3a:	d9 f0       	breq	.+54     	; 0x5b72 <EepromWriteBlock+0x7e>
	if(eepromAddr==0 && nextFreeBlock!=0) eepromAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;
    5b3c:	f0 e2       	ldi	r31, 0x20	; 32
    5b3e:	8f 9f       	mul	r24, r31
    5b40:	c0 01       	movw	r24, r0
    5b42:	11 24       	eor	r1, r1
    5b44:	9a 83       	std	Y+2, r25	; 0x02
    5b46:	89 83       	std	Y+1, r24	; 0x01
    5b48:	78 01       	movw	r14, r16
    5b4a:	20 e2       	ldi	r18, 0x20	; 32
    5b4c:	e2 0e       	add	r14, r18
    5b4e:	f1 1c       	adc	r15, r1

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
		WriteEeprom(eepromAddr++,*srcPtr);
    5b50:	f8 01       	movw	r30, r16
    5b52:	61 91       	ld	r22, Z+
    5b54:	8f 01       	movw	r16, r30
    5b56:	89 81       	ldd	r24, Y+1	; 0x01
    5b58:	9a 81       	ldd	r25, Y+2	; 0x02
    5b5a:	9c 01       	movw	r18, r24
    5b5c:	2f 5f       	subi	r18, 0xFF	; 255
    5b5e:	3f 4f       	sbci	r19, 0xFF	; 255
    5b60:	3a 83       	std	Y+2, r19	; 0x02
    5b62:	29 83       	std	Y+1, r18	; 0x01
    5b64:	0e 94 41 2c 	call	0x5882	; 0x5882 <WriteEeprom>
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(eepromAddr==0 && nextFreeBlock!=0) eepromAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
    5b68:	0e 15       	cp	r16, r14
    5b6a:	1f 05       	cpc	r17, r15
    5b6c:	89 f7       	brne	.-30     	; 0x5b50 <EepromWriteBlock+0x5c>
		WriteEeprom(eepromAddr++,*srcPtr);
		srcPtr++;	
	}
	
	return 0;
    5b6e:	80 e0       	ldi	r24, 0x00	; 0
    5b70:	01 c0       	rjmp	.+2      	; 0x5b74 <EepromWriteBlock+0x80>
	u8 *srcPtr=(unsigned char *)block,res,nextFreeBlock=0;

	res=EepromBlockExists(block->id,&eepromAddr,&nextFreeBlock);
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    5b72:	82 e0       	ldi	r24, 0x02	; 2
		WriteEeprom(eepromAddr++,*srcPtr);
		srcPtr++;	
	}
	
	return 0;
}
    5b74:	0f 90       	pop	r0
    5b76:	0f 90       	pop	r0
    5b78:	0f 90       	pop	r0
    5b7a:	df 91       	pop	r29
    5b7c:	cf 91       	pop	r28
    5b7e:	1f 91       	pop	r17
    5b80:	0f 91       	pop	r16
    5b82:	ff 90       	pop	r15
    5b84:	ef 90       	pop	r14
    5b86:	08 95       	ret

00005b88 <PatchCommand00>:
/*
 * Command 00: Set envelope speed per frame +127/-128, 0=no enveloppe
 * Param:
 */
void PatchCommand00(Track* track, char param){
	track->envelopeStep=param;
    5b88:	fc 01       	movw	r30, r24
    5b8a:	67 87       	std	Z+15, r22	; 0x0f
    5b8c:	08 95       	ret

00005b8e <PatchCommand01>:
 * Param:
 */
void PatchCommand01(Track* track, char param){
	(void)track; //to remove unused warning
	#if MIXER_CHAN4_TYPE == 0
		mixer.channels.type.noise.barrel=0x0101;
    5b8e:	e8 eb       	ldi	r30, 0xB8	; 184
    5b90:	fc e0       	ldi	r31, 0x0C	; 12
    5b92:	81 e0       	ldi	r24, 0x01	; 1
    5b94:	91 e0       	ldi	r25, 0x01	; 1
    5b96:	95 8b       	std	Z+21, r25	; 0x15
    5b98:	84 8b       	std	Z+20, r24	; 0x14
		mixer.channels.type.noise.params=param;
    5b9a:	63 8b       	std	Z+19, r22	; 0x13
    5b9c:	08 95       	ret

00005b9e <PatchCommand05>:
}
/*
 * Command 05: End of note/fx
 * Param:
 */
void PatchCommand05(Track* track, char param){
    5b9e:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags&=~(TRACK_FLAGS_PLAYING+TRACK_FLAGS_PRIORITY);	//patchPlaying=false,priority=0	
    5ba0:	90 81       	ld	r25, Z
    5ba2:	9f 75       	andi	r25, 0x5F	; 95
    5ba4:	90 83       	st	Z, r25
    5ba6:	08 95       	ret

00005ba8 <PatchCommand06>:

/*
 * Command 06: Note hold
 * Param:
 */
void PatchCommand06(Track* track, char param){
    5ba8:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags|=TRACK_FLAGS_HOLD_ENV; //patchEnvelopeHold=true;
    5baa:	90 81       	ld	r25, Z
    5bac:	90 64       	ori	r25, 0x40	; 64
    5bae:	90 83       	st	Z, r25
    5bb0:	08 95       	ret

00005bb2 <PatchCommand07>:
 * Command 07: Set envelope volume
 * Param:
 */

void PatchCommand07(Track* track, char param){
	track->envelopeVol=param;
    5bb2:	fc 01       	movw	r30, r24
    5bb4:	66 87       	std	Z+14, r22	; 0x0e
    5bb6:	08 95       	ret

00005bb8 <PatchCommand09>:
 * Command 09: Set tremolo level
 * Param:
*/

void PatchCommand09(Track* track, char param){
	track->tremoloLevel=param;
    5bb8:	fc 01       	movw	r30, r24
    5bba:	62 87       	std	Z+10, r22	; 0x0a
    5bbc:	08 95       	ret

00005bbe <PatchCommand10>:
/*
 * Command 10: Set tremolo rate
 * Param:
*/
void PatchCommand10(Track* track, char param){
	track->tremoloRate=param;
    5bbe:	fc 01       	movw	r30, r24
    5bc0:	63 87       	std	Z+11, r22	; 0x0b
    5bc2:	08 95       	ret

00005bc4 <PatchCommand11>:
/*
 * Command 11: Pitch slide (linear) 
 * Param: (+/-) half steps to slide to
*/

void PatchCommand11(Track* track, char param){
    5bc4:	cf 93       	push	r28
    5bc6:	df 93       	push	r29
    5bc8:	ec 01       	movw	r28, r24
    5bca:	46 2f       	mov	r20, r22
	//slide to note from current note
	s16 currentStep,targetStep,delta;	
	
	currentStep=pgm_read_word(&(steptable[track->note]));
    5bcc:	29 81       	ldd	r18, Y+1	; 0x01
    5bce:	30 e0       	ldi	r19, 0x00	; 0
    5bd0:	f9 01       	movw	r30, r18
    5bd2:	ee 0f       	add	r30, r30
    5bd4:	ff 1f       	adc	r31, r31
    5bd6:	e8 5f       	subi	r30, 0xF8	; 248
    5bd8:	fa 49       	sbci	r31, 0x9A	; 154
    5bda:	65 91       	lpm	r22, Z+
    5bdc:	74 91       	lpm	r23, Z
	targetStep=pgm_read_word(&(steptable[track->note+param]));	
    5bde:	f9 01       	movw	r30, r18
    5be0:	e4 0f       	add	r30, r20
    5be2:	f1 1d       	adc	r31, r1
    5be4:	47 fd       	sbrc	r20, 7
    5be6:	fa 95       	dec	r31
    5be8:	ee 0f       	add	r30, r30
    5bea:	ff 1f       	adc	r31, r31
    5bec:	e8 5f       	subi	r30, 0xF8	; 248
    5bee:	fa 49       	sbci	r31, 0x9A	; 154
    5bf0:	85 91       	lpm	r24, Z+
    5bf2:	94 91       	lpm	r25, Z
	delta=((targetStep-currentStep)/track->slideSpeed);
    5bf4:	86 1b       	sub	r24, r22
    5bf6:	97 0b       	sbc	r25, r23
    5bf8:	68 85       	ldd	r22, Y+8	; 0x08
    5bfa:	70 e0       	ldi	r23, 0x00	; 0
    5bfc:	0e 94 83 50 	call	0xa106	; 0xa106 <__divmodhi4>
	if(delta==0)delta++;
    5c00:	61 15       	cp	r22, r1
    5c02:	71 05       	cpc	r23, r1
    5c04:	11 f4       	brne	.+4      	; 0x5c0a <PatchCommand11+0x46>
    5c06:	61 e0       	ldi	r22, 0x01	; 1
    5c08:	70 e0       	ldi	r23, 0x00	; 0

	mixer.channels.all[track->channel].step+=delta;
    5c0a:	ea 81       	ldd	r30, Y+2	; 0x02
    5c0c:	86 e0       	ldi	r24, 0x06	; 6
    5c0e:	e8 9f       	mul	r30, r24
    5c10:	f0 01       	movw	r30, r0
    5c12:	11 24       	eor	r1, r1
    5c14:	e8 54       	subi	r30, 0x48	; 72
    5c16:	f3 4f       	sbci	r31, 0xF3	; 243
    5c18:	81 81       	ldd	r24, Z+1	; 0x01
    5c1a:	92 81       	ldd	r25, Z+2	; 0x02
    5c1c:	86 0f       	add	r24, r22
    5c1e:	97 1f       	adc	r25, r23
    5c20:	92 83       	std	Z+2, r25	; 0x02
    5c22:	81 83       	std	Z+1, r24	; 0x01
	
	track->slideStep=delta;
    5c24:	7e 83       	std	Y+6, r23	; 0x06
    5c26:	6d 83       	std	Y+5, r22	; 0x05
	track->flags|=TRACK_FLAGS_SLIDING;
    5c28:	88 81       	ld	r24, Y
    5c2a:	88 60       	ori	r24, 0x08	; 8
    5c2c:	88 83       	st	Y, r24
	track->slideNote=track->note+param;
    5c2e:	89 81       	ldd	r24, Y+1	; 0x01
    5c30:	48 0f       	add	r20, r24
    5c32:	4f 83       	std	Y+7, r20	; 0x07
}
    5c34:	df 91       	pop	r29
    5c36:	cf 91       	pop	r28
    5c38:	08 95       	ret

00005c3a <PatchCommand12>:
/*
 * Command 12: Pitch slide speed 
 * Param: slide speed (fixed 4:4)
 */
void PatchCommand12(Track* track, char param){
	track->slideSpeed=param;
    5c3a:	fc 01       	movw	r30, r24
    5c3c:	60 87       	std	Z+8, r22	; 0x08
    5c3e:	08 95       	ret

00005c40 <PatchCommand13>:
 *  Command 13: Loop start
 * Description: Defines the start of a loop. Works in conjunction with command 14 (PC_LOOP_END).
 *		 Param: loop count
 */
void PatchCommand13(Track* track, char param){
	track->loopCount=(u8)param;
    5c40:	fc 01       	movw	r30, r24
    5c42:	64 83       	std	Z+4, r22	; 0x04
    5c44:	08 95       	ret

00005c46 <PatchCommand02>:
/*
 * Command 02: Set wave
 * Param:
 */
void PatchCommand02(Track* track, char param){
	SetMixerWave(track->channel,param);
    5c46:	fc 01       	movw	r30, r24
    5c48:	82 81       	ldd	r24, Z+2	; 0x02
    5c4a:	0c 94 3e 32 	jmp	0x647c	; 0x647c <SetMixerWave>

00005c4e <PatchCommand03>:
}
/*
 * Command 03: Note up * param
 * Param:
 */
void PatchCommand03(Track* track, char param){
    5c4e:	fc 01       	movw	r30, r24
	track->note+=param;
    5c50:	91 81       	ldd	r25, Z+1	; 0x01
    5c52:	69 0f       	add	r22, r25
    5c54:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(track->channel,track->note);
    5c56:	82 81       	ldd	r24, Z+2	; 0x02
    5c58:	0c 94 27 32 	jmp	0x644e	; 0x644e <SetMixerNote>

00005c5c <PatchCommand04>:
}
/*
 * Command 04: Note down * param
 * Param:
 */
void PatchCommand04(Track* track, char param){
    5c5c:	fc 01       	movw	r30, r24
	track->note-=param;
    5c5e:	91 81       	ldd	r25, Z+1	; 0x01
    5c60:	96 1b       	sub	r25, r22
    5c62:	69 2f       	mov	r22, r25
    5c64:	91 83       	std	Z+1, r25	; 0x01
	SetMixerNote(track->channel,track->note);
    5c66:	82 81       	ldd	r24, Z+2	; 0x02
    5c68:	0c 94 27 32 	jmp	0x644e	; 0x644e <SetMixerNote>

00005c6c <PatchCommand08>:
/*
 * Command 08: Set Note/Pitch
 * Param:
 */

void PatchCommand08(Track* track, char param){
    5c6c:	1f 93       	push	r17
    5c6e:	cf 93       	push	r28
    5c70:	df 93       	push	r29
    5c72:	ec 01       	movw	r28, r24
    5c74:	16 2f       	mov	r17, r22
	SetMixerNote(track->channel,param);
    5c76:	8a 81       	ldd	r24, Y+2	; 0x02
    5c78:	0e 94 27 32 	call	0x644e	; 0x644e <SetMixerNote>
	track->note=param;
    5c7c:	19 83       	std	Y+1, r17	; 0x01
	track->flags &= ~(TRACK_FLAGS_SLIDING);	
    5c7e:	88 81       	ld	r24, Y
    5c80:	87 7f       	andi	r24, 0xF7	; 247
    5c82:	88 83       	st	Y, r24
}
    5c84:	df 91       	pop	r29
    5c86:	cf 91       	pop	r28
    5c88:	1f 91       	pop	r17
    5c8a:	08 95       	ret

00005c8c <PatchCommand14>:
 *					1,PC_NOTE_DOWN,3,
 *					0,PC_LOOP_END,2,
 *					0,PATCH_END  
 *				};
 */
void PatchCommand14(Track* track, char param){
    5c8c:	dc 01       	movw	r26, r24
	if(track->loopCount>0){
    5c8e:	14 96       	adiw	r26, 0x04	; 4
    5c90:	8c 91       	ld	r24, X
    5c92:	14 97       	sbiw	r26, 0x04	; 4
    5c94:	88 23       	and	r24, r24
    5c96:	19 f1       	breq	.+70     	; 0x5cde <PatchCommand14+0x52>
    5c98:	55 96       	adiw	r26, 0x15	; 21
    5c9a:	2d 91       	ld	r18, X+
    5c9c:	3c 91       	ld	r19, X
    5c9e:	56 97       	sbiw	r26, 0x16	; 22
		//track->patchCommandStreamPos=track->loopStart;
		if(param!=0){
    5ca0:	66 23       	and	r22, r22
    5ca2:	79 f0       	breq	.+30     	; 0x5cc2 <PatchCommand14+0x36>
			track->patchCommandStreamPos-=((param+1)*3);
    5ca4:	77 27       	eor	r23, r23
    5ca6:	67 fd       	sbrc	r22, 7
    5ca8:	70 95       	com	r23
    5caa:	6f 5f       	subi	r22, 0xFF	; 255
    5cac:	7f 4f       	sbci	r23, 0xFF	; 255
    5cae:	ab 01       	movw	r20, r22
    5cb0:	44 0f       	add	r20, r20
    5cb2:	55 1f       	adc	r21, r21
    5cb4:	64 0f       	add	r22, r20
    5cb6:	75 1f       	adc	r23, r21
    5cb8:	26 1b       	sub	r18, r22
    5cba:	37 0b       	sbc	r19, r23
    5cbc:	09 c0       	rjmp	.+18     	; 0x5cd0 <PatchCommand14+0x44>
			while(1){
				track->patchCommandStreamPos-=3;
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    5cbe:	ef 3f       	cpi	r30, 0xFF	; 255
    5cc0:	39 f0       	breq	.+14     	; 0x5cd0 <PatchCommand14+0x44>
		if(param!=0){
			track->patchCommandStreamPos-=((param+1)*3);
		}else{
			u8 command;
			while(1){
				track->patchCommandStreamPos-=3;
    5cc2:	23 50       	subi	r18, 0x03	; 3
    5cc4:	31 09       	sbc	r19, r1
    5cc6:	f9 01       	movw	r30, r18
    5cc8:	32 97       	sbiw	r30, 0x02	; 2
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
    5cca:	e4 91       	lpm	r30, Z
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    5ccc:	ed 30       	cpi	r30, 0x0D	; 13
    5cce:	b9 f7       	brne	.-18     	; 0x5cbe <PatchCommand14+0x32>
    5cd0:	56 96       	adiw	r26, 0x16	; 22
    5cd2:	3c 93       	st	X, r19
    5cd4:	2e 93       	st	-X, r18
    5cd6:	55 97       	sbiw	r26, 0x15	; 21
			}
		}
		track->loopCount--;
    5cd8:	81 50       	subi	r24, 0x01	; 1
    5cda:	14 96       	adiw	r26, 0x04	; 4
    5cdc:	8c 93       	st	X, r24
    5cde:	08 95       	ret

00005ce0 <InitMusicPlayer>:

const Patch *patchPointers;

void InitMusicPlayer(const Patch *patchPointersParam){

	patchPointers=patchPointersParam;
    5ce0:	90 93 5c 0d 	sts	0x0D5C, r25
    5ce4:	80 93 5b 0d 	sts	0x0D5B, r24

	masterVolume=DEFAULT_MASTER_VOL;
    5ce8:	8f e6       	ldi	r24, 0x6F	; 111
    5cea:	80 93 5e 0d 	sts	0x0D5E, r24
#if MIDI_IN == ENABLED
	InitUartRxBuffer();
	lastMidiInStatus=0;
#endif

	playSong=false;
    5cee:	10 92 b6 0c 	sts	0x0CB6, r1
    5cf2:	e6 ef       	ldi	r30, 0xF6	; 246
    5cf4:	fc e0       	ldi	r31, 0x0C	; 12

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    5cf6:	80 e0       	ldi	r24, 0x00	; 0
		tracks[t].channel=t;
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    5cf8:	90 e1       	ldi	r25, 0x10	; 16
		tracks[t].noteVol=0;
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    5cfa:	3f ef       	ldi	r19, 0xFF	; 255
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
    5cfc:	28 e1       	ldi	r18, 0x18	; 24
    5cfe:	df 01       	movw	r26, r30
    5d00:	1e 97       	sbiw	r26, 0x0e	; 14

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].channel=t;
    5d02:	8c 93       	st	X, r24
    5d04:	12 97       	sbiw	r26, 0x02	; 2
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    5d06:	9c 93       	st	X, r25
    5d08:	1d 96       	adiw	r26, 0x0d	; 13
		tracks[t].noteVol=0;
    5d0a:	1c 92       	st	X, r1
    5d0c:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    5d0e:	3c 93       	st	X, r19
		tracks[t].patchNo=DEFAULT_PATCH;
    5d10:	10 82       	st	Z, r1
    5d12:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].tremoloRate=24; //~6hz
    5d14:	2c 93       	st	X, r18
    5d16:	13 97       	sbiw	r26, 0x03	; 3
		tracks[t].slideSpeed=0x10;
    5d18:	9c 93       	st	X, r25
#endif

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    5d1a:	8f 5f       	subi	r24, 0xFF	; 255
    5d1c:	77 96       	adiw	r30, 0x17	; 23
    5d1e:	85 30       	cpi	r24, 0x05	; 5
    5d20:	71 f7       	brne	.-36     	; 0x5cfe <InitMusicPlayer+0x1e>
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
		tracks[t].slideSpeed=0x10;
	}

}
    5d22:	08 95       	ret

00005d24 <StartSong>:

#if MUSIC_ENGINE == MIDI

	void StartSong(const char *song){
    5d24:	e6 ee       	ldi	r30, 0xE6	; 230
    5d26:	fc e0       	ldi	r31, 0x0C	; 12
		for(unsigned char t=0;t<CHANNELS;t++){
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    5d28:	3f ef       	ldi	r19, 0xFF	; 255

#if MUSIC_ENGINE == MIDI

	void StartSong(const char *song){
		for(unsigned char t=0;t<CHANNELS;t++){
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    5d2a:	20 81       	ld	r18, Z
    5d2c:	2f 77       	andi	r18, 0x7F	; 127
    5d2e:	20 83       	st	Z, r18
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    5d30:	33 83       	std	Z+3, r19	; 0x03
    5d32:	77 96       	adiw	r30, 0x17	; 23
}

#if MUSIC_ENGINE == MIDI

	void StartSong(const char *song){
		for(unsigned char t=0;t<CHANNELS;t++){
    5d34:	2d e0       	ldi	r18, 0x0D	; 13
    5d36:	e9 35       	cpi	r30, 0x59	; 89
    5d38:	f2 07       	cpc	r31, r18
    5d3a:	b9 f7       	brne	.-18     	; 0x5d2a <StartSong+0x6>
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
		}

		songPos=song+1; //skip first delta-time
    5d3c:	01 96       	adiw	r24, 0x01	; 1
    5d3e:	90 93 63 0d 	sts	0x0D63, r25
    5d42:	80 93 62 0d 	sts	0x0D62, r24
		songStart=song+1;//skip first delta-time
    5d46:	90 93 e5 0c 	sts	0x0CE5, r25
    5d4a:	80 93 e4 0c 	sts	0x0CE4, r24
		loopStart=song+1;
    5d4e:	90 93 65 0d 	sts	0x0D65, r25
    5d52:	80 93 64 0d 	sts	0x0D64, r24
		nextDeltaTime=0;
    5d56:	10 92 60 0d 	sts	0x0D60, r1
    5d5a:	10 92 5f 0d 	sts	0x0D5F, r1
		currDeltaTime=0;
    5d5e:	10 92 5a 0d 	sts	0x0D5A, r1
    5d62:	10 92 59 0d 	sts	0x0D59, r1
		songSpeed=0;
    5d66:	10 92 61 0d 	sts	0x0D61, r1

		lastStatus=0;
    5d6a:	10 92 5d 0d 	sts	0x0D5D, r1
		playSong=true;
    5d6e:	81 e0       	ldi	r24, 0x01	; 1
    5d70:	80 93 b6 0c 	sts	0x0CB6, r24
    5d74:	08 95       	ret

00005d76 <StopSong>:


void StopSong(){

	for(u8 i=0;i<CHANNELS;i++){
		tracks[i].envelopeStep=-6;
    5d76:	e6 ee       	ldi	r30, 0xE6	; 230
    5d78:	fc e0       	ldi	r31, 0x0C	; 12
    5d7a:	8a ef       	ldi	r24, 0xFA	; 250
    5d7c:	87 87       	std	Z+15, r24	; 0x0f
    5d7e:	86 a3       	std	Z+38, r24	; 0x26
    5d80:	80 93 23 0d 	sts	0x0D23, r24
    5d84:	80 93 3a 0d 	sts	0x0D3A, r24
    5d88:	80 93 51 0d 	sts	0x0D51, r24
	}

	playSong=false;
    5d8c:	10 92 b6 0c 	sts	0x0CB6, r1
    5d90:	08 95       	ret

00005d92 <ReadVarLen>:
}



unsigned int ReadVarLen(const char **songPos)
{
    5d92:	dc 01       	movw	r26, r24
    unsigned int value;
    unsigned char c;


    if ( (value = pgm_read_byte((*songPos)++)) & 0x80 )
    5d94:	ed 91       	ld	r30, X+
    5d96:	fc 91       	ld	r31, X
    5d98:	11 97       	sbiw	r26, 0x01	; 1
    5d9a:	9f 01       	movw	r18, r30
    5d9c:	2f 5f       	subi	r18, 0xFF	; 255
    5d9e:	3f 4f       	sbci	r19, 0xFF	; 255
    5da0:	11 96       	adiw	r26, 0x01	; 1
    5da2:	3c 93       	st	X, r19
    5da4:	2e 93       	st	-X, r18
    5da6:	e4 91       	lpm	r30, Z
    5da8:	e7 fd       	sbrc	r30, 7
    5daa:	03 c0       	rjmp	.+6      	; 0x5db2 <ReadVarLen+0x20>
    5dac:	8e 2f       	mov	r24, r30
    5dae:	90 e0       	ldi	r25, 0x00	; 0
    5db0:	08 95       	ret
    {
       value &= 0x7F;
    5db2:	ef 77       	andi	r30, 0x7F	; 127
    5db4:	8e 2f       	mov	r24, r30
    5db6:	90 e0       	ldi	r25, 0x00	; 0
       do
       {
         value = (value << 7) + ((c = pgm_read_byte((*songPos)++)) & 0x7F);
    5db8:	96 95       	lsr	r25
    5dba:	98 2f       	mov	r25, r24
    5dbc:	88 27       	eor	r24, r24
    5dbe:	97 95       	ror	r25
    5dc0:	87 95       	ror	r24
    5dc2:	2f 5f       	subi	r18, 0xFF	; 255
    5dc4:	3f 4f       	sbci	r19, 0xFF	; 255
    5dc6:	f9 01       	movw	r30, r18
    5dc8:	31 97       	sbiw	r30, 0x01	; 1
    5dca:	e4 91       	lpm	r30, Z
    5dcc:	4e 2f       	mov	r20, r30
    5dce:	4f 77       	andi	r20, 0x7F	; 127
    5dd0:	84 0f       	add	r24, r20
    5dd2:	91 1d       	adc	r25, r1
       } while (c & 0x80);
    5dd4:	e7 fd       	sbrc	r30, 7
    5dd6:	f0 cf       	rjmp	.-32     	; 0x5db8 <ReadVarLen+0x26>
    5dd8:	2d 93       	st	X+, r18
    5dda:	3c 93       	st	X, r19
    }


    return value;
}
    5ddc:	08 95       	ret

00005dde <TriggerCommon>:




void TriggerCommon(Track* track,u8 patch,u8 volume,u8 note){
    5dde:	ef 92       	push	r14
    5de0:	ff 92       	push	r15
    5de2:	0f 93       	push	r16
    5de4:	1f 93       	push	r17
    5de6:	cf 93       	push	r28
    5de8:	df 93       	push	r29
    5dea:	1f 92       	push	r1
    5dec:	cd b7       	in	r28, 0x3d	; 61
    5dee:	de b7       	in	r29, 0x3e	; 62
    5df0:	7c 01       	movw	r14, r24
    5df2:	16 2f       	mov	r17, r22
		
	bool isFx = (track->flags&TRACK_FLAGS_PRIORITY);
    5df4:	fc 01       	movw	r30, r24
    5df6:	80 81       	ld	r24, Z
    5df8:	08 2f       	mov	r16, r24
    5dfa:	00 1f       	adc	r16, r16
    5dfc:	00 27       	eor	r16, r16
    5dfe:	00 1f       	adc	r16, r16

	track->envelopeStep=0; 
    5e00:	17 86       	std	Z+15, r1	; 0x0f
	track->envelopeVol=0xff; 
    5e02:	9f ef       	ldi	r25, 0xFF	; 255
    5e04:	96 87       	std	Z+14, r25	; 0x0e
	track->noteVol=volume;
    5e06:	45 87       	std	Z+13, r20	; 0x0d
	track->patchPlayingTime=0;
    5e08:	14 8a       	std	Z+20, r1	; 0x14
	track->flags&=(~(TRACK_FLAGS_HOLD_ENV|TRACK_FLAGS_SLIDING));
    5e0a:	87 7b       	andi	r24, 0xB7	; 183
    5e0c:	80 83       	st	Z, r24
	track->tremoloLevel=0;
    5e0e:	12 86       	std	Z+10, r1	; 0x0a
	track->tremoloPos=0;
    5e10:	11 86       	std	Z+9, r1	; 0x09
	track->note=note;
    5e12:	21 83       	std	Z+1, r18	; 0x01
	track->loopCount=0;
    5e14:	14 82       	std	Z+4, r1	; 0x04

#if MUSIC_ENGINE == MIDI
	track->expressionVol=DEFAULT_EXPRESSION_VOL;
    5e16:	93 83       	std	Z+3, r25	; 0x03
#endif

	#if SOUND_MIXER == MIXER_TYPE_INLINE

		if(track->channel==3){
    5e18:	82 81       	ldd	r24, Z+2	; 0x02
    5e1a:	83 30       	cpi	r24, 0x03	; 3
    5e1c:	69 f4       	brne	.+26     	; 0x5e38 <TriggerCommon+0x5a>
			//noise channel		
			if(!isFx) patch=note;			
    5e1e:	01 11       	cpse	r16, r1
    5e20:	01 c0       	rjmp	.+2      	; 0x5e24 <TriggerCommon+0x46>
    5e22:	12 2f       	mov	r17, r18
			mixer.channels.type.noise.barrel=0x0101;				
    5e24:	81 e0       	ldi	r24, 0x01	; 1
    5e26:	91 e0       	ldi	r25, 0x01	; 1
    5e28:	90 93 cd 0c 	sts	0x0CCD, r25
    5e2c:	80 93 cc 0c 	sts	0x0CCC, r24
			mixer.channels.type.noise.params=1; //default (15bits,no divider)
    5e30:	81 e0       	ldi	r24, 0x01	; 1
    5e32:	80 93 cb 0c 	sts	0x0CCB, r24
    5e36:	39 c0       	rjmp	.+114    	; 0x5eaa <TriggerCommon+0xcc>

		#if SOUND_CHANNEL_5_ENABLE==1		

		}else if(track->channel==4){
    5e38:	84 30       	cpi	r24, 0x04	; 4
    5e3a:	69 f5       	brne	.+90     	; 0x5e96 <TriggerCommon+0xb8>
				//PCM channel					
				mixer.channels.type.pcm.positionFrac=0;
    5e3c:	10 92 d3 0c 	sts	0x0CD3, r1
				const char *pos=(const char*)pgm_read_word(&(patchPointers[patch].pcmData));
    5e40:	80 91 5b 0d 	lds	r24, 0x0D5B
    5e44:	90 91 5c 0d 	lds	r25, 0x0D5C
    5e48:	f9 e0       	ldi	r31, 0x09	; 9
    5e4a:	6f 9f       	mul	r22, r31
    5e4c:	80 0d       	add	r24, r0
    5e4e:	91 1d       	adc	r25, r1
    5e50:	11 24       	eor	r1, r1
    5e52:	fc 01       	movw	r30, r24
    5e54:	31 96       	adiw	r30, 0x01	; 1
    5e56:	a5 91       	lpm	r26, Z+
    5e58:	b4 91       	lpm	r27, Z
				mixer.channels.type.pcm.position=pos;				
    5e5a:	b0 93 d5 0c 	sts	0x0CD5, r27
    5e5e:	a0 93 d4 0c 	sts	0x0CD4, r26
				mixer.pcmLoopLenght=pgm_read_word(&(patchPointers[patch].loopEnd))-pgm_read_word(&(patchPointers[patch].loopStart));
    5e62:	ac 01       	movw	r20, r24
    5e64:	49 5f       	subi	r20, 0xF9	; 249
    5e66:	5f 4f       	sbci	r21, 0xFF	; 255
    5e68:	fa 01       	movw	r30, r20
    5e6a:	65 91       	lpm	r22, Z+
    5e6c:	74 91       	lpm	r23, Z
    5e6e:	05 96       	adiw	r24, 0x05	; 5
    5e70:	fc 01       	movw	r30, r24
    5e72:	85 91       	lpm	r24, Z+
    5e74:	94 91       	lpm	r25, Z
    5e76:	68 1b       	sub	r22, r24
    5e78:	79 0b       	sbc	r23, r25
    5e7a:	70 93 d7 0c 	sts	0x0CD7, r23
    5e7e:	60 93 d6 0c 	sts	0x0CD6, r22
				mixer.pcmLoopEnd=pos+pgm_read_word(&(patchPointers[patch].loopEnd));
    5e82:	fa 01       	movw	r30, r20
    5e84:	85 91       	lpm	r24, Z+
    5e86:	94 91       	lpm	r25, Z
    5e88:	a8 0f       	add	r26, r24
    5e8a:	b9 1f       	adc	r27, r25
    5e8c:	b0 93 d9 0c 	sts	0x0CD9, r27
    5e90:	a0 93 d8 0c 	sts	0x0CD8, r26
    5e94:	05 c0       	rjmp	.+10     	; 0x5ea0 <TriggerCommon+0xc2>
				SetMixerNote(track->channel,note);
		#endif	

		}else{					
			//wave channels					
			SetMixerWave(track->channel,0);//default wave
    5e96:	60 e0       	ldi	r22, 0x00	; 0
    5e98:	29 83       	std	Y+1, r18	; 0x01
    5e9a:	0e 94 3e 32 	call	0x647c	; 0x647c <SetMixerWave>
			SetMixerNote(track->channel,note);
    5e9e:	29 81       	ldd	r18, Y+1	; 0x01
    5ea0:	62 2f       	mov	r22, r18
    5ea2:	f7 01       	movw	r30, r14
    5ea4:	82 81       	ldd	r24, Z+2	; 0x02
    5ea6:	0e 94 27 32 	call	0x644e	; 0x644e <SetMixerNote>
		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
		track->fxPatchNo=patch;
    5eaa:	f7 01       	movw	r30, r14

		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
    5eac:	00 23       	and	r16, r16
    5eae:	11 f0       	breq	.+4      	; 0x5eb4 <TriggerCommon+0xd6>
		track->fxPatchNo=patch;
    5eb0:	11 8b       	std	Z+17, r17	; 0x11
    5eb2:	01 c0       	rjmp	.+2      	; 0x5eb6 <TriggerCommon+0xd8>
	}else{
		track->patchNo=patch;	
    5eb4:	10 8b       	std	Z+16, r17	; 0x10
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
    5eb6:	e0 91 5b 0d 	lds	r30, 0x0D5B
    5eba:	f0 91 5c 0d 	lds	r31, 0x0D5C
    5ebe:	39 e0       	ldi	r19, 0x09	; 9
    5ec0:	13 9f       	mul	r17, r19
    5ec2:	e0 0d       	add	r30, r0
    5ec4:	f1 1d       	adc	r31, r1
    5ec6:	11 24       	eor	r1, r1
    5ec8:	33 96       	adiw	r30, 0x03	; 3
    5eca:	85 91       	lpm	r24, Z+
    5ecc:	94 91       	lpm	r25, Z
	if(pos==NULL){
		track->patchCommandStreamPos=NULL;
    5ece:	f7 01       	movw	r30, r14
	}else{
		track->patchNo=patch;	
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
	if(pos==NULL){
    5ed0:	00 97       	sbiw	r24, 0x00	; 0
    5ed2:	19 f4       	brne	.+6      	; 0x5eda <TriggerCommon+0xfc>
		track->patchCommandStreamPos=NULL;
    5ed4:	16 8a       	std	Z+22, r1	; 0x16
    5ed6:	15 8a       	std	Z+21, r1	; 0x15
    5ed8:	08 c0       	rjmp	.+16     	; 0x5eea <TriggerCommon+0x10c>
	}else{
		track->patchCurrDeltaTime=0;
    5eda:	13 8a       	std	Z+19, r1	; 0x13
		track->patchNextDeltaTime=pgm_read_byte(pos++);
    5edc:	fc 01       	movw	r30, r24
    5ede:	24 91       	lpm	r18, Z
    5ee0:	f7 01       	movw	r30, r14
    5ee2:	22 8b       	std	Z+18, r18	; 0x12
    5ee4:	01 96       	adiw	r24, 0x01	; 1
		track->patchCommandStreamPos=pos;
    5ee6:	96 8b       	std	Z+22, r25	; 0x16
    5ee8:	85 8b       	std	Z+21, r24	; 0x15
	}

}
    5eea:	0f 90       	pop	r0
    5eec:	df 91       	pop	r29
    5eee:	cf 91       	pop	r28
    5ef0:	1f 91       	pop	r17
    5ef2:	0f 91       	pop	r16
    5ef4:	ff 90       	pop	r15
    5ef6:	ef 90       	pop	r14
    5ef8:	08 95       	ret

00005efa <TriggerFx>:

/* Trigger a sound effect.
 * Method allocates the channel based on priority.
 * Retrig: if this fx if already playing on a track, reuse same track.
 */
void TriggerFx(unsigned char patch,unsigned char volume,bool retrig){
    5efa:	cf 93       	push	r28
    5efc:	df 93       	push	r29
	unsigned char channel;
	
	unsigned char type=(unsigned char)pgm_read_byte(&(patchPointers[patch].type));
    5efe:	e0 91 5b 0d 	lds	r30, 0x0D5B
    5f02:	f0 91 5c 0d 	lds	r31, 0x0D5C
    5f06:	99 e0       	ldi	r25, 0x09	; 9
    5f08:	89 9f       	mul	r24, r25
    5f0a:	e0 0d       	add	r30, r0
    5f0c:	f1 1d       	adc	r31, r1
    5f0e:	11 24       	eor	r1, r1
    5f10:	e4 91       	lpm	r30, Z

	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
    5f12:	e1 30       	cpi	r30, 0x01	; 1
    5f14:	e9 f0       	breq	.+58     	; 0x5f50 <TriggerFx+0x56>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
    5f16:	e2 30       	cpi	r30, 0x02	; 2
    5f18:	e9 f0       	breq	.+58     	; 0x5f54 <TriggerFx+0x5a>
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
    5f1a:	20 91 fd 0c 	lds	r18, 0x0CFD
    5f1e:	27 ff       	sbrs	r18, 7
    5f20:	1d c0       	rjmp	.+58     	; 0x5f5c <TriggerFx+0x62>
    5f22:	20 91 0e 0d 	lds	r18, 0x0D0E
    5f26:	28 13       	cpse	r18, r24
    5f28:	02 c0       	rjmp	.+4      	; 0x5f2e <TriggerFx+0x34>
    5f2a:	41 11       	cpse	r20, r1
    5f2c:	17 c0       	rjmp	.+46     	; 0x5f5c <TriggerFx+0x62>
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
    5f2e:	20 91 14 0d 	lds	r18, 0x0D14
    5f32:	27 ff       	sbrs	r18, 7
    5f34:	11 c0       	rjmp	.+34     	; 0x5f58 <TriggerFx+0x5e>
    5f36:	20 91 25 0d 	lds	r18, 0x0D25
    5f3a:	28 13       	cpse	r18, r24
    5f3c:	02 c0       	rjmp	.+4      	; 0x5f42 <TriggerFx+0x48>
    5f3e:	41 11       	cpse	r20, r1
    5f40:	0b c0       	rjmp	.+22     	; 0x5f58 <TriggerFx+0x5e>
		channel=2;
	}else{
		//both channels have fx playing, use the oldest one
		if(tracks[1].patchPlayingTime>tracks[2].patchPlayingTime){
    5f42:	20 91 11 0d 	lds	r18, 0x0D11
    5f46:	90 91 28 0d 	lds	r25, 0x0D28
    5f4a:	92 17       	cp	r25, r18
    5f4c:	28 f4       	brcc	.+10     	; 0x5f58 <TriggerFx+0x5e>
    5f4e:	06 c0       	rjmp	.+12     	; 0x5f5c <TriggerFx+0x62>
	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
		//noise or PCM channel fx		
		channel=3;
    5f50:	c3 e0       	ldi	r28, 0x03	; 3
    5f52:	05 c0       	rjmp	.+10     	; 0x5f5e <TriggerFx+0x64>
	}else if(type==2){
		channel=4;
    5f54:	c4 e0       	ldi	r28, 0x04	; 4
    5f56:	03 c0       	rjmp	.+6      	; 0x5f5e <TriggerFx+0x64>
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
		channel=2;
    5f58:	c2 e0       	ldi	r28, 0x02	; 2
    5f5a:	01 c0       	rjmp	.+2      	; 0x5f5e <TriggerFx+0x64>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
    5f5c:	c1 e0       	ldi	r28, 0x01	; 1
			channel=2;
		}
	}				

	Track* track=&tracks[channel];
	track->flags=TRACK_FLAGS_PRIORITY; //priority=1;
    5f5e:	97 e1       	ldi	r25, 0x17	; 23
    5f60:	c9 9f       	mul	r28, r25
    5f62:	e0 01       	movw	r28, r0
    5f64:	11 24       	eor	r1, r1
    5f66:	ca 51       	subi	r28, 0x1A	; 26
    5f68:	d3 4f       	sbci	r29, 0xF3	; 243
    5f6a:	90 e8       	ldi	r25, 0x80	; 128
    5f6c:	98 83       	st	Y, r25
	track->patchCommandStreamPos = NULL;
    5f6e:	1e 8a       	std	Y+22, r1	; 0x16
    5f70:	1d 8a       	std	Y+21, r1	; 0x15
	TriggerCommon(track,patch,volume,80);
    5f72:	20 e5       	ldi	r18, 0x50	; 80
    5f74:	46 2f       	mov	r20, r22
    5f76:	68 2f       	mov	r22, r24
    5f78:	ce 01       	movw	r24, r28
    5f7a:	0e 94 ef 2e 	call	0x5dde	; 0x5dde <TriggerCommon>
	track->flags|=TRACK_FLAGS_PLAYING;
    5f7e:	88 81       	ld	r24, Y
    5f80:	80 62       	ori	r24, 0x20	; 32
    5f82:	88 83       	st	Y, r24
}
    5f84:	df 91       	pop	r29
    5f86:	cf 91       	pop	r28
    5f88:	08 95       	ret

00005f8a <TriggerNote>:


void TriggerNote(unsigned char channel,unsigned char patch,unsigned char note,unsigned char volume){
    5f8a:	cf 93       	push	r28
    5f8c:	df 93       	push	r29
	Track* track=&tracks[channel];

	//allow only other music notes 
	if((track->flags&TRACK_FLAGS_PLAYING)==0 || (track->flags&TRACK_FLAGS_PRIORITY)==0){
    5f8e:	a8 2f       	mov	r26, r24
    5f90:	b0 e0       	ldi	r27, 0x00	; 0
    5f92:	97 e1       	ldi	r25, 0x17	; 23
    5f94:	89 9f       	mul	r24, r25
    5f96:	f0 01       	movw	r30, r0
    5f98:	11 24       	eor	r1, r1
    5f9a:	ea 51       	subi	r30, 0x1A	; 26
    5f9c:	f3 4f       	sbci	r31, 0xF3	; 243
    5f9e:	80 81       	ld	r24, Z
    5fa0:	85 ff       	sbrs	r24, 5
    5fa2:	02 c0       	rjmp	.+4      	; 0x5fa8 <TriggerNote+0x1e>
    5fa4:	87 fd       	sbrc	r24, 7
    5fa6:	2e c0       	rjmp	.+92     	; 0x6004 <TriggerNote+0x7a>
			
		if(volume==0){ //note-off received
    5fa8:	21 11       	cpse	r18, r1
    5faa:	18 c0       	rjmp	.+48     	; 0x5fdc <TriggerNote+0x52>

			
			//cut note if there's no envelope & no note hold
			if(track->envelopeStep==0 && !(track->flags&TRACK_FLAGS_HOLD_ENV)){
    5fac:	97 e1       	ldi	r25, 0x17	; 23
    5fae:	9a 9f       	mul	r25, r26
    5fb0:	f0 01       	movw	r30, r0
    5fb2:	9b 9f       	mul	r25, r27
    5fb4:	f0 0d       	add	r31, r0
    5fb6:	11 24       	eor	r1, r1
    5fb8:	ea 51       	subi	r30, 0x1A	; 26
    5fba:	f3 4f       	sbci	r31, 0xF3	; 243
    5fbc:	97 85       	ldd	r25, Z+15	; 0x0f
    5fbe:	91 11       	cpse	r25, r1
    5fc0:	02 c0       	rjmp	.+4      	; 0x5fc6 <TriggerNote+0x3c>
    5fc2:	86 ff       	sbrs	r24, 6
				track->noteVol=0;
    5fc4:	15 86       	std	Z+13, r1	; 0x0d
			}

			track->flags&=(~TRACK_FLAGS_HOLD_ENV);//patchEnvelopeHold=false;
    5fc6:	97 e1       	ldi	r25, 0x17	; 23
    5fc8:	9a 9f       	mul	r25, r26
    5fca:	f0 01       	movw	r30, r0
    5fcc:	9b 9f       	mul	r25, r27
    5fce:	f0 0d       	add	r31, r0
    5fd0:	11 24       	eor	r1, r1
    5fd2:	ea 51       	subi	r30, 0x1A	; 26
    5fd4:	f3 4f       	sbci	r31, 0xF3	; 243
    5fd6:	8f 7b       	andi	r24, 0xBF	; 191
    5fd8:	80 83       	st	Z, r24
    5fda:	14 c0       	rjmp	.+40     	; 0x6004 <TriggerNote+0x7a>
    5fdc:	82 2f       	mov	r24, r18
    5fde:	24 2f       	mov	r18, r20
		}else{
		
			track->flags=0;//&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    5fe0:	97 e1       	ldi	r25, 0x17	; 23
    5fe2:	9a 9f       	mul	r25, r26
    5fe4:	e0 01       	movw	r28, r0
    5fe6:	9b 9f       	mul	r25, r27
    5fe8:	d0 0d       	add	r29, r0
    5fea:	11 24       	eor	r1, r1
    5fec:	ca 51       	subi	r28, 0x1A	; 26
    5fee:	d3 4f       	sbci	r29, 0xF3	; 243
    5ff0:	18 82       	st	Y, r1
			track->patchCommandStreamPos = NULL;
    5ff2:	1e 8a       	std	Y+22, r1	; 0x16
    5ff4:	1d 8a       	std	Y+21, r1	; 0x15
			TriggerCommon(track,patch,volume,note);
    5ff6:	48 2f       	mov	r20, r24
    5ff8:	ce 01       	movw	r24, r28
    5ffa:	0e 94 ef 2e 	call	0x5dde	; 0x5dde <TriggerCommon>
			track->flags|=TRACK_FLAGS_PLAYING;
    5ffe:	88 81       	ld	r24, Y
    6000:	80 62       	ori	r24, 0x20	; 32
    6002:	88 83       	st	Y, r24
		}

	}
}
    6004:	df 91       	pop	r29
    6006:	cf 91       	pop	r28
    6008:	08 95       	ret

0000600a <ProcessMusic>:
	}

#endif


void ProcessMusic(void){
    600a:	6f 92       	push	r6
    600c:	7f 92       	push	r7
    600e:	8f 92       	push	r8
    6010:	9f 92       	push	r9
    6012:	af 92       	push	r10
    6014:	bf 92       	push	r11
    6016:	cf 92       	push	r12
    6018:	df 92       	push	r13
    601a:	ef 92       	push	r14
    601c:	ff 92       	push	r15
    601e:	0f 93       	push	r16
    6020:	1f 93       	push	r17
    6022:	cf 93       	push	r28
    6024:	df 93       	push	r29
    6026:	c6 ee       	ldi	r28, 0xE6	; 230
    6028:	dc e0       	ldi	r29, 0x0C	; 12
    602a:	08 eb       	ldi	r16, 0xB8	; 184
    602c:	1c e0       	ldi	r17, 0x0C	; 12
    602e:	d8 01       	movw	r26, r16
    6030:	9e 01       	movw	r18, r28
    6032:	40 e0       	ldi	r20, 0x00	; 0
    6034:	50 e0       	ldi	r21, 0x00	; 0
    6036:	ca 01       	movw	r24, r20
    6038:	8a 51       	subi	r24, 0x1A	; 26
    603a:	93 4f       	sbci	r25, 0xF3	; 243
    603c:	6c 01       	movw	r12, r24
	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//update envelope
		if(track->envelopeStep!=0){
    603e:	fc 01       	movw	r30, r24
    6040:	87 85       	ldd	r24, Z+15	; 0x0f
    6042:	88 23       	and	r24, r24
    6044:	91 f0       	breq	.+36     	; 0x606a <ProcessMusic+0x60>
			vol=track->envelopeVol+track->envelopeStep;		
    6046:	66 85       	ldd	r22, Z+14	; 0x0e
    6048:	99 27       	eor	r25, r25
    604a:	87 fd       	sbrc	r24, 7
    604c:	90 95       	com	r25
    604e:	86 0f       	add	r24, r22
    6050:	91 1d       	adc	r25, r1
    6052:	8f 3f       	cpi	r24, 0xFF	; 255
    6054:	91 05       	cpc	r25, r1
    6056:	19 f0       	breq	.+6      	; 0x605e <ProcessMusic+0x54>
    6058:	14 f0       	brlt	.+4      	; 0x605e <ProcessMusic+0x54>
    605a:	8f ef       	ldi	r24, 0xFF	; 255
    605c:	90 e0       	ldi	r25, 0x00	; 0
    605e:	97 ff       	sbrs	r25, 7
    6060:	02 c0       	rjmp	.+4      	; 0x6066 <ProcessMusic+0x5c>
    6062:	80 e0       	ldi	r24, 0x00	; 0
    6064:	90 e0       	ldi	r25, 0x00	; 0
			if(vol<0){
				vol=0;			
			}else if(vol>0xff){
				vol=0xff;						
			}
			track->envelopeVol=vol;
    6066:	f6 01       	movw	r30, r12
    6068:	86 87       	std	Z+14, r24	; 0x0e
		}

		//if volumes reaches zero and no more patch command, explicitly end playing on track
		//if(vol==0 && track->patchCommandStreamPos==NULL) track->flags&=~(TRACK_FLAGS_PLAYING);

		if(track->flags & TRACK_FLAGS_SLIDING){
    606a:	f9 01       	movw	r30, r18
    606c:	f0 80       	ld	r15, Z
    606e:	f3 fe       	sbrs	r15, 3
    6070:	2a c0       	rjmp	.+84     	; 0x60c6 <ProcessMusic+0xbc>

			mixer.channels.all[trackNo].step+=track->slideStep;
    6072:	65 81       	ldd	r22, Z+5	; 0x05
    6074:	76 81       	ldd	r23, Z+6	; 0x06
    6076:	11 96       	adiw	r26, 0x01	; 1
    6078:	8d 91       	ld	r24, X+
    607a:	9c 91       	ld	r25, X
    607c:	12 97       	sbiw	r26, 0x02	; 2
    607e:	86 0f       	add	r24, r22
    6080:	97 1f       	adc	r25, r23
    6082:	12 96       	adiw	r26, 0x02	; 2
    6084:	9c 93       	st	X, r25
    6086:	8e 93       	st	-X, r24
    6088:	11 97       	sbiw	r26, 0x01	; 1
			u16 tStep=pgm_read_word(&(steptable[track->slideNote]));
    608a:	f6 01       	movw	r30, r12
    608c:	e7 80       	ldd	r14, Z+7	; 0x07
    608e:	ee 2d       	mov	r30, r14
    6090:	f0 e0       	ldi	r31, 0x00	; 0
    6092:	ee 0f       	add	r30, r30
    6094:	ff 1f       	adc	r31, r31
    6096:	e8 5f       	subi	r30, 0xF8	; 248
    6098:	fa 49       	sbci	r31, 0x9A	; 154
    609a:	c5 90       	lpm	r12, Z+
    609c:	d4 90       	lpm	r13, Z

			if((track->slideStep>0 && mixer.channels.all[trackNo].step>=tStep) || 
    609e:	16 16       	cp	r1, r22
    60a0:	17 06       	cpc	r1, r23
    60a2:	24 f4       	brge	.+8      	; 0x60ac <ProcessMusic+0xa2>
    60a4:	8c 15       	cp	r24, r12
    60a6:	9d 05       	cpc	r25, r13
    60a8:	30 f4       	brcc	.+12     	; 0x60b6 <ProcessMusic+0xac>
    60aa:	0d c0       	rjmp	.+26     	; 0x60c6 <ProcessMusic+0xbc>
    60ac:	67 2b       	or	r22, r23
    60ae:	59 f0       	breq	.+22     	; 0x60c6 <ProcessMusic+0xbc>
				(track->slideStep<0 && mixer.channels.all[trackNo].step<=tStep))
    60b0:	c8 16       	cp	r12, r24
    60b2:	d9 06       	cpc	r13, r25
    60b4:	40 f0       	brcs	.+16     	; 0x60c6 <ProcessMusic+0xbc>
			{					
				mixer.channels.all[trackNo].step = tStep;					
    60b6:	12 96       	adiw	r26, 0x02	; 2
    60b8:	dc 92       	st	X, r13
    60ba:	ce 92       	st	-X, r12
    60bc:	11 97       	sbiw	r26, 0x01	; 1
				track->flags &= ~(TRACK_FLAGS_SLIDING);	
    60be:	8f 2d       	mov	r24, r15
    60c0:	87 7f       	andi	r24, 0xF7	; 247
    60c2:	f9 01       	movw	r30, r18
    60c4:	80 83       	st	Z, r24
    60c6:	49 5e       	subi	r20, 0xE9	; 233
    60c8:	5f 4f       	sbci	r21, 0xFF	; 255
    60ca:	29 5e       	subi	r18, 0xE9	; 233
    60cc:	3f 4f       	sbci	r19, 0xFF	; 255
    60ce:	16 96       	adiw	r26, 0x06	; 6
	u8 channel;
	Track* track;


	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    60d0:	43 37       	cpi	r20, 0x73	; 115
    60d2:	51 05       	cpc	r21, r1
    60d4:	09 f0       	breq	.+2      	; 0x60d8 <ProcessMusic+0xce>
    60d6:	af cf       	rjmp	.-162    	; 0x6036 <ProcessMusic+0x2c>
	}



	//Process song MIDI notes
	if(playSong){
    60d8:	80 91 b6 0c 	lds	r24, 0x0CB6
    60dc:	88 23       	and	r24, r24
    60de:	09 f4       	brne	.+2      	; 0x60e2 <ProcessMusic+0xd8>
    60e0:	cc c0       	rjmp	.+408    	; 0x627a <ProcessMusic+0x270>
							}else if(c1==CONTROLER_EXPRESSION){
								tracks[channel].expressionVol=c2<<1;
							}else if(c1==CONTROLER_TREMOLO){
								tracks[channel].tremoloLevel=c2<<1;
							}else if(c1==CONTROLER_TREMOLO_RATE){
								tracks[channel].tremoloRate=c2<<1;
    60e2:	57 e1       	ldi	r21, 0x17	; 23
    60e4:	f5 2e       	mov	r15, r21
	if(playSong){
	
		#if MUSIC_ENGINE == MIDI
			
			//process all simultaneous events
			while(currDeltaTime==nextDeltaTime){
    60e6:	80 91 59 0d 	lds	r24, 0x0D59
    60ea:	90 91 5a 0d 	lds	r25, 0x0D5A
    60ee:	20 91 5f 0d 	lds	r18, 0x0D5F
    60f2:	30 91 60 0d 	lds	r19, 0x0D60
    60f6:	82 17       	cp	r24, r18
    60f8:	93 07       	cpc	r25, r19
    60fa:	09 f0       	breq	.+2      	; 0x60fe <ProcessMusic+0xf4>
    60fc:	b9 c0       	rjmp	.+370    	; 0x6270 <ProcessMusic+0x266>

				c1=pgm_read_byte(songPos++);
    60fe:	20 91 62 0d 	lds	r18, 0x0D62
    6102:	30 91 63 0d 	lds	r19, 0x0D63
    6106:	b9 01       	movw	r22, r18
    6108:	6f 5f       	subi	r22, 0xFF	; 255
    610a:	7f 4f       	sbci	r23, 0xFF	; 255
    610c:	70 93 63 0d 	sts	0x0D63, r23
    6110:	60 93 62 0d 	sts	0x0D62, r22
    6114:	f9 01       	movw	r30, r18
    6116:	44 91       	lpm	r20, Z
			
				if(c1==0xff){
    6118:	4f 3f       	cpi	r20, 0xFF	; 255
    611a:	79 f5       	brne	.+94     	; 0x617a <ProcessMusic+0x170>
					//META data type event
					c1=pgm_read_byte(songPos++);
    611c:	a9 01       	movw	r20, r18
    611e:	4e 5f       	subi	r20, 0xFE	; 254
    6120:	5f 4f       	sbci	r21, 0xFF	; 255
    6122:	50 93 63 0d 	sts	0x0D63, r21
    6126:	40 93 62 0d 	sts	0x0D62, r20
    612a:	fb 01       	movw	r30, r22
    612c:	64 91       	lpm	r22, Z

				
					if(c1==0x2f){ //end of song
    612e:	6f 32       	cpi	r22, 0x2F	; 47
    6130:	19 f4       	brne	.+6      	; 0x6138 <ProcessMusic+0x12e>
						playSong=false;
    6132:	10 92 b6 0c 	sts	0x0CB6, r1
						break;	
    6136:	9c c0       	rjmp	.+312    	; 0x6270 <ProcessMusic+0x266>
					}else if(c1==0x6){ //marker
    6138:	66 30       	cpi	r22, 0x06	; 6
    613a:	09 f0       	breq	.+2      	; 0x613e <ProcessMusic+0x134>
    613c:	8c c0       	rjmp	.+280    	; 0x6256 <ProcessMusic+0x24c>
						c1=pgm_read_byte(songPos++); //read len
    613e:	fa 01       	movw	r30, r20
    6140:	44 91       	lpm	r20, Z
						c2=pgm_read_byte(songPos++); //read data
    6142:	c9 01       	movw	r24, r18
    6144:	04 96       	adiw	r24, 0x04	; 4
    6146:	90 93 63 0d 	sts	0x0D63, r25
    614a:	80 93 62 0d 	sts	0x0D62, r24
				
					if(c1==0x2f){ //end of song
						playSong=false;
						break;	
					}else if(c1==0x6){ //marker
						c1=pgm_read_byte(songPos++); //read len
    614e:	f9 01       	movw	r30, r18
    6150:	33 96       	adiw	r30, 0x03	; 3
						c2=pgm_read_byte(songPos++); //read data
    6152:	e4 91       	lpm	r30, Z
						if(c2=='S'){ //loop start
    6154:	e3 35       	cpi	r30, 0x53	; 83
    6156:	29 f4       	brne	.+10     	; 0x6162 <ProcessMusic+0x158>
							loopStart=songPos;
    6158:	90 93 65 0d 	sts	0x0D65, r25
    615c:	80 93 64 0d 	sts	0x0D64, r24
    6160:	7a c0       	rjmp	.+244    	; 0x6256 <ProcessMusic+0x24c>
						}else if(c2=='E'){//loop end
    6162:	e5 34       	cpi	r30, 0x45	; 69
    6164:	09 f0       	breq	.+2      	; 0x6168 <ProcessMusic+0x15e>
    6166:	77 c0       	rjmp	.+238    	; 0x6256 <ProcessMusic+0x24c>
							songPos=loopStart;
    6168:	80 91 64 0d 	lds	r24, 0x0D64
    616c:	90 91 65 0d 	lds	r25, 0x0D65
    6170:	90 93 63 0d 	sts	0x0D63, r25
    6174:	80 93 62 0d 	sts	0x0D62, r24
    6178:	6e c0       	rjmp	.+220    	; 0x6256 <ProcessMusic+0x24c>
					}
				

				}else{

					if(c1&0x80) lastStatus=c1;					
    617a:	47 fd       	sbrc	r20, 7
    617c:	40 93 5d 0d 	sts	0x0D5D, r20
					channel=lastStatus&0x0f;
    6180:	90 91 5d 0d 	lds	r25, 0x0D5D
    6184:	89 2f       	mov	r24, r25
    6186:	8f 70       	andi	r24, 0x0F	; 15
				
					//get next data byte
					//Note: maybe we should not advance the cursor
					//in case we receive an unsupported command				
					if(c1&0x80) c1=pgm_read_byte(songPos++); 
    6188:	47 ff       	sbrs	r20, 7
    618a:	08 c0       	rjmp	.+16     	; 0x619c <ProcessMusic+0x192>
    618c:	2e 5f       	subi	r18, 0xFE	; 254
    618e:	3f 4f       	sbci	r19, 0xFF	; 255
    6190:	30 93 63 0d 	sts	0x0D63, r19
    6194:	20 93 62 0d 	sts	0x0D62, r18
    6198:	fb 01       	movw	r30, r22
    619a:	44 91       	lpm	r20, Z

					switch(lastStatus&0xf0){
    619c:	90 7f       	andi	r25, 0xF0	; 240
    619e:	90 3b       	cpi	r25, 0xB0	; 176
    61a0:	e1 f0       	breq	.+56     	; 0x61da <ProcessMusic+0x1d0>
    61a2:	90 3c       	cpi	r25, 0xC0	; 192
    61a4:	09 f4       	brne	.+2      	; 0x61a8 <ProcessMusic+0x19e>
    61a6:	51 c0       	rjmp	.+162    	; 0x624a <ProcessMusic+0x240>
    61a8:	90 39       	cpi	r25, 0x90	; 144
    61aa:	09 f0       	breq	.+2      	; 0x61ae <ProcessMusic+0x1a4>
    61ac:	54 c0       	rjmp	.+168    	; 0x6256 <ProcessMusic+0x24c>

						//note-on
						case 0x90:
							//c1 = note						
							c2=pgm_read_byte(songPos++)<<1; //get volume
    61ae:	e0 91 62 0d 	lds	r30, 0x0D62
    61b2:	f0 91 63 0d 	lds	r31, 0x0D63
    61b6:	9f 01       	movw	r18, r30
    61b8:	2f 5f       	subi	r18, 0xFF	; 255
    61ba:	3f 4f       	sbci	r19, 0xFF	; 255
    61bc:	30 93 63 0d 	sts	0x0D63, r19
    61c0:	20 93 62 0d 	sts	0x0D62, r18
    61c4:	24 91       	lpm	r18, Z
    61c6:	22 0f       	add	r18, r18
						
							if(tracks[channel].flags|TRACK_FLAGS_ALLOCATED){ //allocated==true
								TriggerNote(channel,tracks[channel].patchNo,c1,c2);
    61c8:	f8 9e       	mul	r15, r24
    61ca:	f0 01       	movw	r30, r0
    61cc:	11 24       	eor	r1, r1
    61ce:	ea 51       	subi	r30, 0x1A	; 26
    61d0:	f3 4f       	sbci	r31, 0xF3	; 243
    61d2:	60 89       	ldd	r22, Z+16	; 0x10
    61d4:	0e 94 c5 2f 	call	0x5f8a	; 0x5f8a <TriggerNote>
    61d8:	3e c0       	rjmp	.+124    	; 0x6256 <ProcessMusic+0x24c>
							break;

						//controllers
						case 0xb0:
							///c1 = controller #
							c2=pgm_read_byte(songPos++); //get controller value
    61da:	e0 91 62 0d 	lds	r30, 0x0D62
    61de:	f0 91 63 0d 	lds	r31, 0x0D63
    61e2:	9f 01       	movw	r18, r30
    61e4:	2f 5f       	subi	r18, 0xFF	; 255
    61e6:	3f 4f       	sbci	r19, 0xFF	; 255
    61e8:	30 93 63 0d 	sts	0x0D63, r19
    61ec:	20 93 62 0d 	sts	0x0D62, r18
    61f0:	e4 91       	lpm	r30, Z
						
							if(c1==CONTROLER_VOL){
    61f2:	47 30       	cpi	r20, 0x07	; 7
    61f4:	49 f4       	brne	.+18     	; 0x6208 <ProcessMusic+0x1fe>
								tracks[channel].trackVol=c2<<1;
    61f6:	f8 9e       	mul	r15, r24
    61f8:	d0 01       	movw	r26, r0
    61fa:	11 24       	eor	r1, r1
    61fc:	aa 51       	subi	r26, 0x1A	; 26
    61fe:	b3 4f       	sbci	r27, 0xF3	; 243
    6200:	ee 0f       	add	r30, r30
    6202:	1c 96       	adiw	r26, 0x0c	; 12
    6204:	ec 93       	st	X, r30
    6206:	27 c0       	rjmp	.+78     	; 0x6256 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_EXPRESSION){
    6208:	4b 30       	cpi	r20, 0x0B	; 11
    620a:	49 f4       	brne	.+18     	; 0x621e <ProcessMusic+0x214>
								tracks[channel].expressionVol=c2<<1;
    620c:	f8 9e       	mul	r15, r24
    620e:	d0 01       	movw	r26, r0
    6210:	11 24       	eor	r1, r1
    6212:	aa 51       	subi	r26, 0x1A	; 26
    6214:	b3 4f       	sbci	r27, 0xF3	; 243
    6216:	ee 0f       	add	r30, r30
    6218:	13 96       	adiw	r26, 0x03	; 3
    621a:	ec 93       	st	X, r30
    621c:	1c c0       	rjmp	.+56     	; 0x6256 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO){
    621e:	4c 35       	cpi	r20, 0x5C	; 92
    6220:	49 f4       	brne	.+18     	; 0x6234 <ProcessMusic+0x22a>
								tracks[channel].tremoloLevel=c2<<1;
    6222:	f8 9e       	mul	r15, r24
    6224:	d0 01       	movw	r26, r0
    6226:	11 24       	eor	r1, r1
    6228:	aa 51       	subi	r26, 0x1A	; 26
    622a:	b3 4f       	sbci	r27, 0xF3	; 243
    622c:	ee 0f       	add	r30, r30
    622e:	1a 96       	adiw	r26, 0x0a	; 10
    6230:	ec 93       	st	X, r30
    6232:	11 c0       	rjmp	.+34     	; 0x6256 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO_RATE){
    6234:	44 36       	cpi	r20, 0x64	; 100
    6236:	79 f4       	brne	.+30     	; 0x6256 <ProcessMusic+0x24c>
								tracks[channel].tremoloRate=c2<<1;
    6238:	f8 9e       	mul	r15, r24
    623a:	d0 01       	movw	r26, r0
    623c:	11 24       	eor	r1, r1
    623e:	aa 51       	subi	r26, 0x1A	; 26
    6240:	b3 4f       	sbci	r27, 0xF3	; 243
    6242:	ee 0f       	add	r30, r30
    6244:	1b 96       	adiw	r26, 0x0b	; 11
    6246:	ec 93       	st	X, r30
    6248:	06 c0       	rjmp	.+12     	; 0x6256 <ProcessMusic+0x24c>
							break;

						//program change
						case 0xc0:
							// c1 = patch #						
							tracks[channel].patchNo=c1;
    624a:	f8 9e       	mul	r15, r24
    624c:	f0 01       	movw	r30, r0
    624e:	11 24       	eor	r1, r1
    6250:	ea 51       	subi	r30, 0x1A	; 26
    6252:	f3 4f       	sbci	r31, 0xF3	; 243
    6254:	40 8b       	std	Z+16, r20	; 0x10


				}//end if(c1==0xff)

				//read next delta time
				nextDeltaTime=ReadVarLen(&songPos);			
    6256:	82 e6       	ldi	r24, 0x62	; 98
    6258:	9d e0       	ldi	r25, 0x0D	; 13
    625a:	0e 94 c9 2e 	call	0x5d92	; 0x5d92 <ReadVarLen>
    625e:	90 93 60 0d 	sts	0x0D60, r25
    6262:	80 93 5f 0d 	sts	0x0D5F, r24
				currDeltaTime=0;
    6266:	10 92 5a 0d 	sts	0x0D5A, r1
    626a:	10 92 59 0d 	sts	0x0D59, r1
    626e:	3b cf       	rjmp	.-394    	; 0x60e6 <ProcessMusic+0xdc>
					}
				#endif

			}//end while
		
			currDeltaTime++;
    6270:	01 96       	adiw	r24, 0x01	; 1
    6272:	90 93 5a 0d 	sts	0x0D5A, r25
    6276:	80 93 59 0d 	sts	0x0D59, r24
    627a:	9f ee       	ldi	r25, 0xEF	; 239
    627c:	a9 2e       	mov	r10, r25
    627e:	9c e0       	ldi	r25, 0x0C	; 12
    6280:	b9 2e       	mov	r11, r25
    6282:	29 ef       	ldi	r18, 0xF9	; 249
    6284:	c2 2e       	mov	r12, r18
    6286:	2c e0       	ldi	r18, 0x0C	; 12
    6288:	d2 2e       	mov	r13, r18
    628a:	3a ef       	ldi	r19, 0xFA	; 250
    628c:	e3 2e       	mov	r14, r19
    628e:	3c e0       	ldi	r19, 0x0C	; 12
    6290:	f3 2e       	mov	r15, r19
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    6292:	66 24       	eor	r6, r6
    6294:	6a 94       	dec	r6
    6296:	71 2c       	mov	r7, r1
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//process patch command stream
		if((track->flags & TRACK_FLAGS_PLAYING) && (track->patchCommandStreamPos!=NULL) && ((track->flags & TRACK_FLAGS_HOLD_ENV)==0)){
    6298:	88 81       	ld	r24, Y
    629a:	85 ff       	sbrs	r24, 5
    629c:	42 c0       	rjmp	.+132    	; 0x6322 <ProcessMusic+0x318>
    629e:	2d 89       	ldd	r18, Y+21	; 0x15
    62a0:	3e 89       	ldd	r19, Y+22	; 0x16
    62a2:	23 2b       	or	r18, r19
    62a4:	09 f4       	brne	.+2      	; 0x62a8 <ProcessMusic+0x29e>
    62a6:	3d c0       	rjmp	.+122    	; 0x6322 <ProcessMusic+0x318>
    62a8:	86 fd       	sbrc	r24, 6
    62aa:	3b c0       	rjmp	.+118    	; 0x6322 <ProcessMusic+0x318>
    62ac:	47 01       	movw	r8, r14
    62ae:	f2 e0       	ldi	r31, 0x02	; 2
    62b0:	8f 1a       	sub	r8, r31
    62b2:	91 08       	sbc	r9, r1

			//process all simultaneous events
			while(track->patchCurrDeltaTime==track->patchNextDeltaTime){
    62b4:	d6 01       	movw	r26, r12
    62b6:	9c 91       	ld	r25, X
    62b8:	f4 01       	movw	r30, r8
    62ba:	80 81       	ld	r24, Z
    62bc:	98 13       	cpse	r25, r24
    62be:	2e c0       	rjmp	.+92     	; 0x631c <ProcessMusic+0x312>

				c1=pgm_read_byte(track->patchCommandStreamPos++);
    62c0:	ed 89       	ldd	r30, Y+21	; 0x15
    62c2:	fe 89       	ldd	r31, Y+22	; 0x16
    62c4:	bf 01       	movw	r22, r30
    62c6:	6f 5f       	subi	r22, 0xFF	; 255
    62c8:	7f 4f       	sbci	r23, 0xFF	; 255
    62ca:	7e 8b       	std	Y+22, r23	; 0x16
    62cc:	6d 8b       	std	Y+21, r22	; 0x15
    62ce:	84 91       	lpm	r24, Z
				if(c1==PATCH_END){
    62d0:	8f 3f       	cpi	r24, 0xFF	; 255
    62d2:	31 f4       	brne	.+12     	; 0x62e0 <ProcessMusic+0x2d6>
					//end of stream!
					track->flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    62d4:	88 81       	ld	r24, Y
    62d6:	8f 77       	andi	r24, 0x7F	; 127
    62d8:	88 83       	st	Y, r24
					track->patchCommandStreamPos=NULL;
    62da:	1e 8a       	std	Y+22, r1	; 0x16
    62dc:	1d 8a       	std	Y+21, r1	; 0x15
					break;
    62de:	1e c0       	rjmp	.+60     	; 0x631c <ProcessMusic+0x312>

				}else{
					c2=pgm_read_byte(track->patchCommandStreamPos++);
    62e0:	9f 01       	movw	r18, r30
    62e2:	2e 5f       	subi	r18, 0xFE	; 254
    62e4:	3f 4f       	sbci	r19, 0xFF	; 255
    62e6:	3e 8b       	std	Y+22, r19	; 0x16
    62e8:	2d 8b       	std	Y+21, r18	; 0x15
    62ea:	fb 01       	movw	r30, r22
    62ec:	64 91       	lpm	r22, Z
					//invoke patch command function
					((PatchCommand)pgm_read_word(&patchCommands[c1]))(track,c2);
    62ee:	e8 2f       	mov	r30, r24
    62f0:	f0 e0       	ldi	r31, 0x00	; 0
    62f2:	ee 0f       	add	r30, r30
    62f4:	ff 1f       	adc	r31, r31
    62f6:	e4 53       	subi	r30, 0x34	; 52
    62f8:	ff 4f       	sbci	r31, 0xFF	; 255
    62fa:	25 91       	lpm	r18, Z+
    62fc:	34 91       	lpm	r19, Z
    62fe:	ce 01       	movw	r24, r28
    6300:	f9 01       	movw	r30, r18
    6302:	09 95       	icall
				}

				//read next delta time
				track->patchNextDeltaTime=pgm_read_byte(track->patchCommandStreamPos++);
    6304:	ed 89       	ldd	r30, Y+21	; 0x15
    6306:	fe 89       	ldd	r31, Y+22	; 0x16
    6308:	cf 01       	movw	r24, r30
    630a:	01 96       	adiw	r24, 0x01	; 1
    630c:	9e 8b       	std	Y+22, r25	; 0x16
    630e:	8d 8b       	std	Y+21, r24	; 0x15
    6310:	e4 91       	lpm	r30, Z
    6312:	d4 01       	movw	r26, r8
    6314:	ec 93       	st	X, r30
				track->patchCurrDeltaTime=0;
    6316:	f6 01       	movw	r30, r12
    6318:	10 82       	st	Z, r1
    631a:	cc cf       	rjmp	.-104    	; 0x62b4 <ProcessMusic+0x2aa>
			}

			track->patchCurrDeltaTime++;
    631c:	9f 5f       	subi	r25, 0xFF	; 255
    631e:	d6 01       	movw	r26, r12
    6320:	9c 93       	st	X, r25
		}

		if(track->flags & TRACK_FLAGS_PLAYING){
    6322:	98 81       	ld	r25, Y
    6324:	95 ff       	sbrs	r25, 5
    6326:	6c c0       	rjmp	.+216    	; 0x6400 <ProcessMusic+0x3f6>

			if(track->patchPlayingTime<0xff){
    6328:	f7 01       	movw	r30, r14
    632a:	80 81       	ld	r24, Z
    632c:	8f 3f       	cpi	r24, 0xFF	; 255
    632e:	11 f0       	breq	.+4      	; 0x6334 <ProcessMusic+0x32a>
				track->patchPlayingTime++;
    6330:	8f 5f       	subi	r24, 0xFF	; 255
    6332:	80 83       	st	Z, r24
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
    6334:	97 fd       	sbrc	r25, 7
    6336:	04 c0       	rjmp	.+8      	; 0x6340 <ProcessMusic+0x336>
    6338:	f7 01       	movw	r30, r14
    633a:	38 97       	sbiw	r30, 0x08	; 8
				//if an FX, use full track volume.
				trackVol=0xff;
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
    633c:	90 81       	ld	r25, Z
    633e:	01 c0       	rjmp	.+2      	; 0x6342 <ProcessMusic+0x338>
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
				//if an FX, use full track volume.
				trackVol=0xff;
    6340:	9f ef       	ldi	r25, 0xFF	; 255
    6342:	f7 01       	movw	r30, r14
    6344:	37 97       	sbiw	r30, 0x07	; 7
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
			}
			if(track->noteVol!=0 && track->envelopeVol!=0 && trackVol!=0 && masterVolume!=0){
    6346:	80 81       	ld	r24, Z
    6348:	88 23       	and	r24, r24
    634a:	09 f4       	brne	.+2      	; 0x634e <ProcessMusic+0x344>
    634c:	4e c0       	rjmp	.+156    	; 0x63ea <ProcessMusic+0x3e0>
    634e:	31 96       	adiw	r30, 0x01	; 1
    6350:	50 81       	ld	r21, Z
    6352:	55 23       	and	r21, r21
    6354:	09 f4       	brne	.+2      	; 0x6358 <ProcessMusic+0x34e>
    6356:	49 c0       	rjmp	.+146    	; 0x63ea <ProcessMusic+0x3e0>
    6358:	99 23       	and	r25, r25
    635a:	09 f4       	brne	.+2      	; 0x635e <ProcessMusic+0x354>
    635c:	46 c0       	rjmp	.+140    	; 0x63ea <ProcessMusic+0x3e0>
    635e:	40 91 5e 0d 	lds	r20, 0x0D5E
    6362:	44 23       	and	r20, r20
    6364:	09 f4       	brne	.+2      	; 0x6368 <ProcessMusic+0x35e>
    6366:	41 c0       	rjmp	.+130    	; 0x63ea <ProcessMusic+0x3e0>

				uVol=(track->noteVol*trackVol)+0x100;
    6368:	89 9f       	mul	r24, r25
    636a:	c0 01       	movw	r24, r0
    636c:	11 24       	eor	r1, r1
    636e:	93 95       	inc	r25
				uVol>>=8;
    6370:	89 2f       	mov	r24, r25
    6372:	99 27       	eor	r25, r25
				
				uVol=(uVol*track->envelopeVol)+0x100;
    6374:	58 9f       	mul	r21, r24
    6376:	90 01       	movw	r18, r0
    6378:	59 9f       	mul	r21, r25
    637a:	30 0d       	add	r19, r0
    637c:	11 24       	eor	r1, r1
    637e:	c9 01       	movw	r24, r18
    6380:	93 95       	inc	r25
				uVol>>=8;
    6382:	89 2f       	mov	r24, r25
    6384:	99 27       	eor	r25, r25
    6386:	3b 97       	sbiw	r30, 0x0b	; 11
				
				#if MUSIC_ENGINE == MIDI
					uVol=(uVol*track->expressionVol)+0x100;
    6388:	50 81       	ld	r21, Z
    638a:	58 9f       	mul	r21, r24
    638c:	90 01       	movw	r18, r0
    638e:	59 9f       	mul	r21, r25
    6390:	30 0d       	add	r19, r0
    6392:	11 24       	eor	r1, r1
    6394:	33 95       	inc	r19
					uVol>>=8;
    6396:	23 2f       	mov	r18, r19
    6398:	33 27       	eor	r19, r19
				#endif
				
				uVol=(uVol*masterVolume)+0x100;
    639a:	42 9f       	mul	r20, r18
    639c:	c0 01       	movw	r24, r0
    639e:	43 9f       	mul	r20, r19
    63a0:	90 0d       	add	r25, r0
    63a2:	11 24       	eor	r1, r1
    63a4:	93 95       	inc	r25
				uVol>>=8;
    63a6:	89 2f       	mov	r24, r25
    63a8:	99 27       	eor	r25, r25
    63aa:	37 96       	adiw	r30, 0x07	; 7

				if(track->tremoloLevel>0){					
    63ac:	20 81       	ld	r18, Z
    63ae:	22 23       	and	r18, r18
    63b0:	f1 f0       	breq	.+60     	; 0x63ee <ProcessMusic+0x3e4>
					tmp=pgm_read_byte(&(waves[track->tremoloPos]));
    63b2:	d5 01       	movw	r26, r10
    63b4:	ec 91       	ld	r30, X
    63b6:	f0 e0       	ldi	r31, 0x00	; 0
    63b8:	e0 50       	subi	r30, 0x00	; 0
    63ba:	f9 49       	sbci	r31, 0x99	; 153
    63bc:	e4 91       	lpm	r30, Z
					tmp-=128; //convert to unsigned
    63be:	e0 58       	subi	r30, 0x80	; 128

					tVol=(track->tremoloLevel*tmp)+0x100;
    63c0:	2e 9f       	mul	r18, r30
    63c2:	f0 01       	movw	r30, r0
    63c4:	11 24       	eor	r1, r1
    63c6:	f3 95       	inc	r31
					tVol>>=8;
    63c8:	ef 2f       	mov	r30, r31
    63ca:	ff 27       	eor	r31, r31
					
					uVol=(uVol*(0xff-tVol))+0x100;
    63cc:	a3 01       	movw	r20, r6
    63ce:	4e 1b       	sub	r20, r30
    63d0:	5f 0b       	sbc	r21, r31
    63d2:	48 9f       	mul	r20, r24
    63d4:	90 01       	movw	r18, r0
    63d6:	49 9f       	mul	r20, r25
    63d8:	30 0d       	add	r19, r0
    63da:	58 9f       	mul	r21, r24
    63dc:	30 0d       	add	r19, r0
    63de:	11 24       	eor	r1, r1
    63e0:	c9 01       	movw	r24, r18
    63e2:	93 95       	inc	r25
					uVol>>=8;
    63e4:	89 2f       	mov	r24, r25
    63e6:	99 27       	eor	r25, r25
    63e8:	02 c0       	rjmp	.+4      	; 0x63ee <ProcessMusic+0x3e4>
				}

			
			}else{
				uVol=0;
    63ea:	80 e0       	ldi	r24, 0x00	; 0
    63ec:	90 e0       	ldi	r25, 0x00	; 0
			}	

			track->tremoloPos+=track->tremoloRate;	
    63ee:	f5 01       	movw	r30, r10
    63f0:	30 81       	ld	r19, Z
    63f2:	f7 01       	movw	r30, r14
    63f4:	39 97       	sbiw	r30, 0x09	; 9
    63f6:	20 81       	ld	r18, Z
    63f8:	23 0f       	add	r18, r19
    63fa:	d5 01       	movw	r26, r10
    63fc:	2c 93       	st	X, r18
    63fe:	02 c0       	rjmp	.+4      	; 0x6404 <ProcessMusic+0x3fa>

		}else{
			uVol=0;
    6400:	80 e0       	ldi	r24, 0x00	; 0
    6402:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
    6404:	f8 01       	movw	r30, r16
    6406:	80 83       	st	Z, r24
    6408:	67 96       	adiw	r28, 0x17	; 23
    640a:	0a 5f       	subi	r16, 0xFA	; 250
    640c:	1f 4f       	sbci	r17, 0xFF	; 255
    640e:	f7 e1       	ldi	r31, 0x17	; 23
    6410:	af 0e       	add	r10, r31
    6412:	b1 1c       	adc	r11, r1
    6414:	87 e1       	ldi	r24, 0x17	; 23
    6416:	c8 0e       	add	r12, r24
    6418:	d1 1c       	adc	r13, r1
    641a:	97 e1       	ldi	r25, 0x17	; 23
    641c:	e9 0e       	add	r14, r25
    641e:	f1 1c       	adc	r15, r1


	//
	// Process patches command streams & final volume
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    6420:	ad e0       	ldi	r26, 0x0D	; 13
    6422:	c9 35       	cpi	r28, 0x59	; 89
    6424:	da 07       	cpc	r29, r26
    6426:	09 f0       	breq	.+2      	; 0x642a <ProcessMusic+0x420>
    6428:	37 cf       	rjmp	.-402    	; 0x6298 <ProcessMusic+0x28e>
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
	}
	
}
    642a:	df 91       	pop	r29
    642c:	cf 91       	pop	r28
    642e:	1f 91       	pop	r17
    6430:	0f 91       	pop	r16
    6432:	ff 90       	pop	r15
    6434:	ef 90       	pop	r14
    6436:	df 90       	pop	r13
    6438:	cf 90       	pop	r12
    643a:	bf 90       	pop	r11
    643c:	af 90       	pop	r10
    643e:	9f 90       	pop	r9
    6440:	8f 90       	pop	r8
    6442:	7f 90       	pop	r7
    6444:	6f 90       	pop	r6
    6446:	08 95       	ret

00006448 <SetMasterVolume>:
}



void SetMasterVolume(unsigned char vol){
	masterVolume=vol;
    6448:	80 93 5e 0d 	sts	0x0D5E, r24
    644c:	08 95       	ret

0000644e <SetMixerNote>:
; r22: -MIDI note, 69=A5(440) for waves channels (0,1,2)
;      -Noise params for channel 3
;***********************
.section .text.SetMixerNote
SetMixerNote:
	clr r25
    644e:	99 27       	eor	r25, r25
	clr r23
    6450:	77 27       	eor	r23, r23
	#if SOUND_MIXER == MIXER_TYPE_VSYNC
		cpi r24,3
		brlo set_note_waves
		ret		
	#else
		cpi r24,3
    6452:	83 30       	cpi	r24, 0x03	; 3
		brne set_note_waves		
    6454:	09 f4       	brne	.+2      	; 0x6458 <set_note_waves>
		ret
    6456:	08 95       	ret

00006458 <set_note_waves>:
	#endif
#endif

set_note_waves:
	;get step for note
	ldi ZL,lo8(steptable)
    6458:	e8 e0       	ldi	r30, 0x08	; 8
	ldi ZH,hi8(steptable)
    645a:	f5 e6       	ldi	r31, 0x65	; 101
	lsl r22
    645c:	66 0f       	add	r22, r22
	rol r23
    645e:	77 1f       	adc	r23, r23
	add ZL,r22
    6460:	e6 0f       	add	r30, r22
	adc ZH,r23	
    6462:	f7 1f       	adc	r31, r23

	lpm r26,Z+
    6464:	a5 91       	lpm	r26, Z+
	lpm r27,Z
    6466:	b4 91       	lpm	r27, Z

	ldi ZL,lo8(mixerStruct)
    6468:	e8 eb       	ldi	r30, 0xB8	; 184
	ldi ZH,hi8(mixerStruct)
    646a:	fc e0       	ldi	r31, 0x0C	; 12
	ldi r18,CHANNEL_STRUCT_SIZE
    646c:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24
    646e:	28 9f       	mul	r18, r24
	add ZL,r0
    6470:	e0 0d       	add	r30, r0
	adc ZH,r1
    6472:	f1 1d       	adc	r31, r1
	
	std Z+step_lo,r26
    6474:	a1 83       	std	Z+1, r26	; 0x01
	std Z+step_hi,r27
    6476:	b2 83       	std	Z+2, r27	; 0x02
	
	clr r1
    6478:	11 24       	eor	r1, r1
	

	ret
    647a:	08 95       	ret

0000647c <SetMixerWave>:
;         Noise channel: 0xfe=7 bit lfsr, 0xff=15 bit lfsr
;                 
;***********************
.section .text.SetMixerWave
SetMixerWave:
	clr r25
    647c:	99 27       	eor	r25, r25
	clr r23
    647e:	77 27       	eor	r23, r23

	ldi ZL,lo8(mixerStruct)
    6480:	e8 eb       	ldi	r30, 0xB8	; 184
	ldi ZH,hi8(mixerStruct)
    6482:	fc e0       	ldi	r31, 0x0C	; 12
	ldi r18,CHANNEL_STRUCT_SIZE
    6484:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24	
    6486:	28 9f       	mul	r18, r24
	add ZL,r0
    6488:	e0 0d       	add	r30, r0
	adc ZH,r1
    648a:	f1 1d       	adc	r31, r1

#if MIXER_CHAN4_TYPE == 0
	cpi r22,0xfe	;7bit lfsr
    648c:	6e 3f       	cpi	r22, 0xFE	; 254
	brne smw1
    648e:	31 f4       	brne	.+12     	; 0x649c <smw1>
	lds r22,tr4_params
    6490:	60 91 cb 0c 	lds	r22, 0x0CCB
	andi r22,0xfe;
    6494:	6e 7f       	andi	r22, 0xFE	; 254
	sts tr4_params,r22
    6496:	60 93 cb 0c 	sts	0x0CCB, r22
	rjmp esmw	
    649a:	0b c0       	rjmp	.+22     	; 0x64b2 <esmw>

0000649c <smw1>:
smw1:
	cpi r22,0xff	;15bit lfsr
    649c:	6f 3f       	cpi	r22, 0xFF	; 255
	brne smw2
    649e:	31 f4       	brne	.+12     	; 0x64ac <smw2>
	lds r22,tr4_params
    64a0:	60 91 cb 0c 	lds	r22, 0x0CCB
	ori r22,0xfe;
    64a4:	6e 6f       	ori	r22, 0xFE	; 254
	sts tr4_params,r22	
    64a6:	60 93 cb 0c 	sts	0x0CCB, r22
	rjmp esmw
    64aa:	03 c0       	rjmp	.+6      	; 0x64b2 <esmw>

000064ac <smw2>:
smw2:
#endif

	ldi r23,hi8(waves)
    64ac:	77 e6       	ldi	r23, 0x67	; 103
	add r23,r22
    64ae:	76 0f       	add	r23, r22
	std Z+samplepos_hi,r23 ;store path No
    64b0:	75 83       	std	Z+5, r23	; 0x05

000064b2 <esmw>:

esmw:
	clr r1	
    64b2:	11 24       	eor	r1, r1
	ret
    64b4:	08 95       	ret
	...

00006500 <DisableSoundEngine>:
; no CPU cycles are consumed.
; C-callable
;*****************************
.section .text.DisableSoundEngine
DisableSoundEngine:	
	ldi r24,0
    6500:	80 e0       	ldi	r24, 0x00	; 0
	sts sound_enabled,r24
    6502:	80 93 b7 0c 	sts	0x0CB7, r24
	ret
    6506:	08 95       	ret

00006508 <steptable>:
    6508:	22 00       	.word	0x0022	; ????
    650a:	24 00       	.word	0x0024	; ????
    650c:	26 00       	.word	0x0026	; ????
    650e:	28 00       	.word	0x0028	; ????
    6510:	2b 00       	.word	0x002b	; ????
    6512:	2d 00       	.word	0x002d	; ????
    6514:	30 00       	.word	0x0030	; ????
    6516:	33 00       	.word	0x0033	; ????
    6518:	36 00       	.word	0x0036	; ????
    651a:	39 00       	.word	0x0039	; ????
    651c:	3d 00       	.word	0x003d	; ????
    651e:	40 00       	.word	0x0040	; ????
    6520:	44 00       	.word	0x0044	; ????
    6522:	48 00       	.word	0x0048	; ????
    6524:	4c 00       	.word	0x004c	; ????
    6526:	51 00       	.word	0x0051	; ????
    6528:	56 00       	.word	0x0056	; ????
    652a:	5b 00       	.word	0x005b	; ????
    652c:	60 00       	.word	0x0060	; ????
    652e:	66 00       	.word	0x0066	; ????
    6530:	6c 00       	.word	0x006c	; ????
    6532:	73 00       	.word	0x0073	; ????
    6534:	79 00       	.word	0x0079	; ????
    6536:	81 00       	.word	0x0081	; ????
    6538:	88 00       	.word	0x0088	; ????
    653a:	90 00       	.word	0x0090	; ????
    653c:	99 00       	.word	0x0099	; ????
    653e:	a2 00       	.word	0x00a2	; ????
    6540:	ac 00       	.word	0x00ac	; ????
    6542:	b6 00       	.word	0x00b6	; ????
    6544:	c1 00       	.word	0x00c1	; ????
    6546:	cc 00       	.word	0x00cc	; ????
    6548:	d8 00       	.word	0x00d8	; ????
    654a:	e5 00       	.word	0x00e5	; ????
    654c:	f3 00       	.word	0x00f3	; ????
    654e:	01 01       	movw	r0, r2
    6550:	10 01       	movw	r2, r0
    6552:	21 01       	movw	r4, r2
    6554:	32 01       	movw	r6, r4
    6556:	44 01       	movw	r8, r8
    6558:	57 01       	movw	r10, r14
    655a:	6c 01       	movw	r12, r24
    655c:	81 01       	movw	r16, r2
    655e:	98 01       	movw	r18, r16
    6560:	b0 01       	movw	r22, r0
    6562:	ca 01       	movw	r24, r20
    6564:	e5 01       	movw	r28, r10
    6566:	02 02       	muls	r16, r18
    6568:	21 02       	muls	r18, r17
    656a:	41 02       	muls	r20, r17
    656c:	64 02       	muls	r22, r20
    656e:	88 02       	muls	r24, r24
    6570:	ae 02       	muls	r26, r30
    6572:	d7 02       	muls	r29, r23
    6574:	03 03       	mulsu	r16, r19
    6576:	30 03       	mulsu	r19, r16
    6578:	61 03       	mulsu	r22, r17
    657a:	94 03       	fmuls	r17, r20
    657c:	cb 03       	fmulsu	r20, r19
    657e:	05 04       	cpc	r0, r5
    6580:	42 04       	cpc	r4, r2
    6582:	83 04       	cpc	r8, r3
    6584:	c7 04       	cpc	r12, r7
    6586:	10 05       	cpc	r17, r0
    6588:	5d 05       	cpc	r21, r13
    658a:	af 05       	cpc	r26, r15
    658c:	05 06       	cpc	r0, r21
    658e:	61 06       	cpc	r6, r17
    6590:	c2 06       	cpc	r12, r18
    6592:	29 07       	cpc	r18, r25
    6594:	96 07       	cpc	r25, r22
    6596:	09 08       	sbc	r0, r9
    6598:	83 08       	sbc	r8, r3
    659a:	05 09       	sbc	r16, r5
    659c:	8e 09       	sbc	r24, r14
    659e:	20 0a       	sbc	r2, r16
    65a0:	ba 0a       	sbc	r11, r26
    65a2:	5d 0b       	sbc	r21, r29
    65a4:	0a 0c       	add	r0, r10
    65a6:	c1 0c       	add	r12, r1
    65a8:	84 0d       	add	r24, r4
    65aa:	51 0e       	add	r5, r17
    65ac:	2b 0f       	add	r18, r27
    65ae:	12 10       	cpse	r1, r2
    65b0:	07 11       	cpse	r16, r7
    65b2:	0a 12       	cpse	r0, r26
    65b4:	1d 13       	cpse	r17, r29
    65b6:	40 14       	cp	r4, r0
    65b8:	74 15       	cp	r23, r4
    65ba:	ba 16       	cp	r11, r26
    65bc:	14 18       	sub	r1, r4
    65be:	83 19       	sub	r24, r3
    65c0:	07 1b       	sub	r16, r23
    65c2:	a3 1c       	adc	r10, r3
    65c4:	57 1e       	adc	r5, r23
    65c6:	24 20       	and	r2, r4
    65c8:	0e 22       	and	r0, r30
    65ca:	14 24       	eor	r1, r4
    65cc:	39 26       	eor	r3, r25
    65ce:	7f 28       	or	r7, r15
    65d0:	e8 2a       	or	r14, r24
    65d2:	75 2d       	mov	r23, r5
    65d4:	29 30       	cpi	r18, 0x09	; 9
    65d6:	06 33       	cpi	r16, 0x36	; 54
    65d8:	0f 36       	cpi	r16, 0x6F	; 111
    65da:	45 39       	cpi	r20, 0x95	; 149
    65dc:	ad 3c       	cpi	r26, 0xCD	; 205
    65de:	49 40       	sbci	r20, 0x09	; 9
    65e0:	1b 44       	sbci	r17, 0x4B	; 75
    65e2:	28 48       	sbci	r18, 0x88	; 136
    65e4:	73 4c       	sbci	r23, 0xC3	; 195
    65e6:	fe 50       	subi	r31, 0x0E	; 14
    65e8:	cf 55       	subi	r28, 0x5F	; 95
    65ea:	ea 5a       	subi	r30, 0xAA	; 170
    65ec:	51 60       	ori	r21, 0x01	; 1
    65ee:	0c 66       	ori	r16, 0x6C	; 108
    65f0:	1d 6c       	ori	r17, 0xCD	; 205
    65f2:	8b 72       	andi	r24, 0x2B	; 43
    65f4:	5a 79       	andi	r21, 0x9A	; 154
    65f6:	92 80       	ldd	r9, Z+2	; 0x02
    65f8:	37 88       	ldd	r3, Z+23	; 0x17
    65fa:	50 90 e5 98 	lds	r5, 0x98E5
    65fe:	fd a1       	ldd	r31, Y+37	; 0x25
    6600:	9f ab       	std	Y+55, r25	; 0x37
    6602:	d3 b5       	in	r29, 0x23	; 35
    6604:	a3 c0       	rjmp	.+326    	; 0x674c <waves+0x4c>
	...

00006700 <waves>:
    6700:	00 03       	mulsu	r16, r16
    6702:	06 09       	sbc	r16, r6
    6704:	0c 10       	cpse	r0, r12
    6706:	13 16       	cp	r1, r19
    6708:	19 1c       	adc	r1, r9
    670a:	1f 22       	and	r1, r31
    670c:	25 28       	or	r2, r5
    670e:	2b 2e       	mov	r2, r27
    6710:	31 33       	cpi	r19, 0x31	; 49
    6712:	36 39       	cpi	r19, 0x96	; 150
    6714:	3c 3f       	cpi	r19, 0xFC	; 252
    6716:	41 44       	sbci	r20, 0x41	; 65
    6718:	47 49       	sbci	r20, 0x97	; 151
    671a:	4c 4e       	sbci	r20, 0xEC	; 236
    671c:	51 53       	subi	r21, 0x31	; 49
    671e:	55 58       	subi	r21, 0x85	; 133
    6720:	5a 5c       	subi	r21, 0xCA	; 202
    6722:	5e 60       	ori	r21, 0x0E	; 14
    6724:	62 64       	ori	r22, 0x42	; 66
    6726:	66 68       	ori	r22, 0x86	; 134
    6728:	6a 6b       	ori	r22, 0xBA	; 186
    672a:	6d 6f       	ori	r22, 0xFD	; 253
    672c:	70 71       	andi	r23, 0x10	; 16
    672e:	73 74       	andi	r23, 0x43	; 67
    6730:	75 76       	andi	r23, 0x65	; 101
    6732:	78 79       	andi	r23, 0x98	; 152
    6734:	7a 7a       	andi	r23, 0xAA	; 170
    6736:	7b 7c       	andi	r23, 0xCB	; 203
    6738:	7d 7d       	andi	r23, 0xDD	; 221
    673a:	7e 7e       	andi	r23, 0xEE	; 238
    673c:	7e 7f       	andi	r23, 0xFE	; 254
    673e:	7f 7f       	andi	r23, 0xFF	; 255
    6740:	7f 7f       	andi	r23, 0xFF	; 255
    6742:	7f 7f       	andi	r23, 0xFF	; 255
    6744:	7e 7e       	andi	r23, 0xEE	; 238
    6746:	7e 7d       	andi	r23, 0xDE	; 222
    6748:	7d 7c       	andi	r23, 0xCD	; 205
    674a:	7b 7a       	andi	r23, 0xAB	; 171
    674c:	7a 79       	andi	r23, 0x9A	; 154
    674e:	78 76       	andi	r23, 0x68	; 104
    6750:	75 74       	andi	r23, 0x45	; 69
    6752:	73 71       	andi	r23, 0x13	; 19
    6754:	70 6f       	ori	r23, 0xF0	; 240
    6756:	6d 6b       	ori	r22, 0xBD	; 189
    6758:	6a 68       	ori	r22, 0x8A	; 138
    675a:	66 64       	ori	r22, 0x46	; 70
    675c:	62 60       	ori	r22, 0x02	; 2
    675e:	5e 5c       	subi	r21, 0xCE	; 206
    6760:	5a 58       	subi	r21, 0x8A	; 138
    6762:	55 53       	subi	r21, 0x35	; 53
    6764:	51 4e       	sbci	r21, 0xE1	; 225
    6766:	4c 49       	sbci	r20, 0x9C	; 156
    6768:	47 44       	sbci	r20, 0x47	; 71
    676a:	41 3f       	cpi	r20, 0xF1	; 241
    676c:	3c 39       	cpi	r19, 0x9C	; 156
    676e:	36 33       	cpi	r19, 0x36	; 54
    6770:	31 2e       	mov	r3, r17
    6772:	2b 28       	or	r2, r11
    6774:	25 22       	and	r2, r21
    6776:	1f 1c       	adc	r1, r15
    6778:	19 16       	cp	r1, r25
    677a:	13 10       	cpse	r1, r3
    677c:	0c 09       	sbc	r16, r12
    677e:	06 03       	mulsu	r16, r22
    6780:	00 fd       	sbrc	r16, 0
    6782:	fa f7       	brpl	.-2      	; 0x6782 <waves+0x82>
    6784:	f4 f0       	brlt	.+60     	; 0x67c2 <waves+0xc2>
    6786:	ed ea       	ldi	r30, 0xAD	; 173
    6788:	e7 e4       	ldi	r30, 0x47	; 71
    678a:	e1 de       	rcall	.-574    	; 0x654e <steptable+0x46>
    678c:	db d8       	rcall	.-3658   	; 0x5944 <SoftReset+0x8>
    678e:	d5 d2       	rcall	.+1450   	; 0x6d3a <waves+0x63a>
    6790:	cf cd       	rjmp	.-1122   	; 0x6330 <ProcessMusic+0x326>
    6792:	ca c7       	rjmp	.+3988   	; 0x7728 <LBGetJoyPadState+0x44>
    6794:	c4 c1       	rjmp	.+904    	; 0x6b1e <waves+0x41e>
    6796:	bf bc       	out	0x2f, r11	; 47
    6798:	b9 b7       	in	r27, 0x39	; 57
    679a:	b4 b2       	in	r11, 0x14	; 20
    679c:	af ad       	ldd	r26, Y+63	; 0x3f
    679e:	ab a8       	ldd	r10, Y+51	; 0x33
    67a0:	a6 a4       	ldd	r10, Z+46	; 0x2e
    67a2:	a2 a0       	ldd	r10, Z+34	; 0x22
    67a4:	9e 9c       	mul	r9, r14
    67a6:	9a 98       	cbi	0x13, 2	; 19
    67a8:	96 95       	lsr	r25
    67aa:	93 91       	.word	0x9193	; ????
    67ac:	90 8f       	std	Z+24, r25	; 0x18
    67ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    67b0:	8b 8a       	std	Y+19, r8	; 0x13
    67b2:	88 87       	std	Y+8, r24	; 0x08
    67b4:	86 86       	std	Z+14, r8	; 0x0e
    67b6:	85 84       	ldd	r8, Z+13	; 0x0d
    67b8:	83 83       	std	Z+3, r24	; 0x03
    67ba:	82 82       	std	Z+2, r8	; 0x02
    67bc:	82 81       	ldd	r24, Z+2	; 0x02
    67be:	81 81       	ldd	r24, Z+1	; 0x01
    67c0:	81 81       	ldd	r24, Z+1	; 0x01
    67c2:	81 81       	ldd	r24, Z+1	; 0x01
    67c4:	82 82       	std	Z+2, r8	; 0x02
    67c6:	82 83       	std	Z+2, r24	; 0x02
    67c8:	83 84       	ldd	r8, Z+11	; 0x0b
    67ca:	85 86       	std	Z+13, r8	; 0x0d
    67cc:	86 87       	std	Z+14, r24	; 0x0e
    67ce:	88 8a       	std	Y+16, r8	; 0x10
    67d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    67d2:	8d 8f       	std	Y+29, r24	; 0x1d
    67d4:	90 91 93 95 	lds	r25, 0x9593
    67d8:	96 98       	cbi	0x12, 6	; 18
    67da:	9a 9c       	mul	r9, r10
    67dc:	9e a0       	ldd	r9, Y+38	; 0x26
    67de:	a2 a4       	ldd	r10, Z+42	; 0x2a
    67e0:	a6 a8       	ldd	r10, Z+54	; 0x36
    67e2:	ab ad       	ldd	r26, Y+59	; 0x3b
    67e4:	af b2       	in	r10, 0x1f	; 31
    67e6:	b4 b7       	in	r27, 0x34	; 52
    67e8:	b9 bc       	out	0x29, r11	; 41
    67ea:	bf c1       	rjmp	.+894    	; 0x6b6a <waves+0x46a>
    67ec:	c4 c7       	rjmp	.+3976   	; 0x7776 <LBGetJoyPadState+0x92>
    67ee:	ca cd       	rjmp	.-1132   	; 0x6384 <ProcessMusic+0x37a>
    67f0:	cf d2       	rcall	.+1438   	; 0x6d90 <waves+0x690>
    67f2:	d5 d8       	rcall	.-3670   	; 0x599e <ReadButtons+0x4c>
    67f4:	db de       	rcall	.-586    	; 0x65ac <steptable+0xa4>
    67f6:	e1 e4       	ldi	r30, 0x41	; 65
    67f8:	e7 ea       	ldi	r30, 0xA7	; 167
    67fa:	ed f0       	brhs	.+58     	; 0x6836 <waves+0x136>
    67fc:	f4 f7       	brge	.-4      	; 0x67fa <waves+0xfa>
    67fe:	fa fd       	.word	0xfdfa	; ????
    6800:	80 81       	ld	r24, Z
    6802:	82 83       	std	Z+2, r24	; 0x02
    6804:	84 85       	ldd	r24, Z+12	; 0x0c
    6806:	86 87       	std	Z+14, r24	; 0x0e
    6808:	88 89       	ldd	r24, Y+16	; 0x10
    680a:	8a 8b       	std	Y+18, r24	; 0x12
    680c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    680e:	8e 8f       	std	Y+30, r24	; 0x1e
    6810:	90 91 92 93 	lds	r25, 0x9392
    6814:	94 95       	.word	0x9594	; ????
    6816:	96 97       	sbiw	r26, 0x26	; 38
    6818:	98 99       	sbic	0x13, 0	; 19
    681a:	9a 9b       	sbis	0x13, 2	; 19
    681c:	9c 9d       	mul	r25, r12
    681e:	9e 9f       	mul	r25, r30
    6820:	a0 a1       	ldd	r26, Z+32	; 0x20
    6822:	a2 a3       	std	Z+34, r26	; 0x22
    6824:	a4 a5       	ldd	r26, Z+44	; 0x2c
    6826:	a6 a7       	std	Z+46, r26	; 0x2e
    6828:	a8 a9       	ldd	r26, Y+48	; 0x30
    682a:	aa ab       	std	Y+50, r26	; 0x32
    682c:	ac ad       	ldd	r26, Y+60	; 0x3c
    682e:	ae af       	std	Y+62, r26	; 0x3e
    6830:	b0 b1       	in	r27, 0x00	; 0
    6832:	b2 b3       	in	r27, 0x12	; 18
    6834:	b4 b5       	in	r27, 0x24	; 36
    6836:	b6 b7       	in	r27, 0x36	; 54
    6838:	b8 b9       	out	0x08, r27	; 8
    683a:	ba bb       	out	0x1a, r27	; 26
    683c:	bc bd       	out	0x2c, r27	; 44
    683e:	be bf       	out	0x3e, r27	; 62
    6840:	c0 c1       	rjmp	.+896    	; 0x6bc2 <waves+0x4c2>
    6842:	c2 c3       	rjmp	.+1924   	; 0x6fc8 <waves+0x8c8>
    6844:	c4 c5       	rjmp	.+2952   	; 0x73ce <DrawMap+0x16>
    6846:	c6 c7       	rjmp	.+3980   	; 0x77d4 <LBWaitSeconds+0xe>
    6848:	c8 c9       	rjmp	.-3184   	; 0x5bda <PatchCommand11+0x16>
    684a:	ca cb       	rjmp	.-2156   	; 0x5fe0 <TriggerNote+0x56>
    684c:	cc cd       	rjmp	.-1128   	; 0x63e6 <ProcessMusic+0x3dc>
    684e:	ce cf       	rjmp	.-100    	; 0x67ec <waves+0xec>
    6850:	d0 d1       	rcall	.+928    	; 0x6bf2 <waves+0x4f2>
    6852:	d2 d3       	rcall	.+1956   	; 0x6ff8 <waves+0x8f8>
    6854:	d4 d5       	rcall	.+2984   	; 0x73fe <DrawMap+0x46>
    6856:	d6 d7       	rcall	.+4012   	; 0x7804 <LBMapSprite+0x20>
    6858:	d8 d9       	rcall	.-3152   	; 0x5c0a <PatchCommand11+0x46>
    685a:	da db       	rcall	.-2124   	; 0x6010 <ProcessMusic+0x6>
    685c:	dc dd       	rcall	.-1096   	; 0x6416 <ProcessMusic+0x40c>
    685e:	de df       	rcall	.-68     	; 0x681c <waves+0x11c>
    6860:	e0 e1       	ldi	r30, 0x10	; 16
    6862:	e2 e3       	ldi	r30, 0x32	; 50
    6864:	e4 e5       	ldi	r30, 0x54	; 84
    6866:	e6 e7       	ldi	r30, 0x76	; 118
    6868:	e8 e9       	ldi	r30, 0x98	; 152
    686a:	ea eb       	ldi	r30, 0xBA	; 186
    686c:	ec ed       	ldi	r30, 0xDC	; 220
    686e:	ee ef       	ldi	r30, 0xFE	; 254
    6870:	f0 f1       	brcs	.+124    	; 0x68ee <waves+0x1ee>
    6872:	f2 f3       	brmi	.-4      	; 0x6870 <waves+0x170>
    6874:	f4 f5       	brge	.+124    	; 0x68f2 <waves+0x1f2>
    6876:	f6 f7       	brtc	.-4      	; 0x6874 <waves+0x174>
    6878:	f8 f9       	.word	0xf9f8	; ????
    687a:	fa fb       	.word	0xfbfa	; ????
    687c:	fc fd       	.word	0xfdfc	; ????
    687e:	fe ff       	.word	0xfffe	; ????
    6880:	00 01       	movw	r0, r0
    6882:	02 03       	mulsu	r16, r18
    6884:	04 05       	cpc	r16, r4
    6886:	06 07       	cpc	r16, r22
    6888:	08 09       	sbc	r16, r8
    688a:	0a 0b       	sbc	r16, r26
    688c:	0c 0d       	add	r16, r12
    688e:	0e 0f       	add	r16, r30
    6890:	10 11       	cpse	r17, r0
    6892:	12 13       	cpse	r17, r18
    6894:	14 15       	cp	r17, r4
    6896:	16 17       	cp	r17, r22
    6898:	18 19       	sub	r17, r8
    689a:	1a 1b       	sub	r17, r26
    689c:	1c 1d       	adc	r17, r12
    689e:	1e 1f       	adc	r17, r30
    68a0:	20 21       	and	r18, r0
    68a2:	22 23       	and	r18, r18
    68a4:	24 25       	eor	r18, r4
    68a6:	26 27       	eor	r18, r22
    68a8:	28 29       	or	r18, r8
    68aa:	2a 2b       	or	r18, r26
    68ac:	2c 2d       	mov	r18, r12
    68ae:	2e 2f       	mov	r18, r30
    68b0:	30 31       	cpi	r19, 0x10	; 16
    68b2:	32 33       	cpi	r19, 0x32	; 50
    68b4:	34 35       	cpi	r19, 0x54	; 84
    68b6:	36 37       	cpi	r19, 0x76	; 118
    68b8:	38 39       	cpi	r19, 0x98	; 152
    68ba:	3a 3b       	cpi	r19, 0xBA	; 186
    68bc:	3c 3d       	cpi	r19, 0xDC	; 220
    68be:	3e 3f       	cpi	r19, 0xFE	; 254
    68c0:	40 41       	sbci	r20, 0x10	; 16
    68c2:	42 43       	sbci	r20, 0x32	; 50
    68c4:	44 45       	sbci	r20, 0x54	; 84
    68c6:	46 47       	sbci	r20, 0x76	; 118
    68c8:	48 49       	sbci	r20, 0x98	; 152
    68ca:	4a 4b       	sbci	r20, 0xBA	; 186
    68cc:	4c 4d       	sbci	r20, 0xDC	; 220
    68ce:	4e 4f       	sbci	r20, 0xFE	; 254
    68d0:	50 51       	subi	r21, 0x10	; 16
    68d2:	52 53       	subi	r21, 0x32	; 50
    68d4:	54 55       	subi	r21, 0x54	; 84
    68d6:	56 57       	subi	r21, 0x76	; 118
    68d8:	58 59       	subi	r21, 0x98	; 152
    68da:	5a 5b       	subi	r21, 0xBA	; 186
    68dc:	5c 5d       	subi	r21, 0xDC	; 220
    68de:	5e 5f       	subi	r21, 0xFE	; 254
    68e0:	60 61       	ori	r22, 0x10	; 16
    68e2:	62 63       	ori	r22, 0x32	; 50
    68e4:	64 65       	ori	r22, 0x54	; 84
    68e6:	66 67       	ori	r22, 0x76	; 118
    68e8:	68 69       	ori	r22, 0x98	; 152
    68ea:	6a 6b       	ori	r22, 0xBA	; 186
    68ec:	6c 6d       	ori	r22, 0xDC	; 220
    68ee:	6e 6f       	ori	r22, 0xFE	; 254
    68f0:	70 71       	andi	r23, 0x10	; 16
    68f2:	72 73       	andi	r23, 0x32	; 50
    68f4:	74 75       	andi	r23, 0x54	; 84
    68f6:	76 77       	andi	r23, 0x76	; 118
    68f8:	78 79       	andi	r23, 0x98	; 152
    68fa:	7a 7b       	andi	r23, 0xBA	; 186
    68fc:	7c 7d       	andi	r23, 0xDC	; 220
    68fe:	7e 7f       	andi	r23, 0xFE	; 254
    6900:	00 02       	muls	r16, r16
    6902:	04 06       	cpc	r0, r20
    6904:	08 0a       	sbc	r0, r24
    6906:	0c 0e       	add	r0, r28
    6908:	10 12       	cpse	r1, r16
    690a:	14 16       	cp	r1, r20
    690c:	18 1a       	sub	r1, r24
    690e:	1c 1e       	adc	r1, r28
    6910:	20 22       	and	r2, r16
    6912:	24 26       	eor	r2, r20
    6914:	28 2a       	or	r2, r24
    6916:	2c 2e       	mov	r2, r28
    6918:	30 32       	cpi	r19, 0x20	; 32
    691a:	34 36       	cpi	r19, 0x64	; 100
    691c:	38 3a       	cpi	r19, 0xA8	; 168
    691e:	3c 3e       	cpi	r19, 0xEC	; 236
    6920:	40 42       	sbci	r20, 0x20	; 32
    6922:	44 46       	sbci	r20, 0x64	; 100
    6924:	48 4a       	sbci	r20, 0xA8	; 168
    6926:	4c 4e       	sbci	r20, 0xEC	; 236
    6928:	50 52       	subi	r21, 0x20	; 32
    692a:	54 56       	subi	r21, 0x64	; 100
    692c:	58 5a       	subi	r21, 0xA8	; 168
    692e:	5c 5e       	subi	r21, 0xEC	; 236
    6930:	60 62       	ori	r22, 0x20	; 32
    6932:	64 66       	ori	r22, 0x64	; 100
    6934:	68 6a       	ori	r22, 0xA8	; 168
    6936:	6c 6e       	ori	r22, 0xEC	; 236
    6938:	70 72       	andi	r23, 0x20	; 32
    693a:	74 76       	andi	r23, 0x64	; 100
    693c:	78 7a       	andi	r23, 0xA8	; 168
    693e:	7c 7e       	andi	r23, 0xEC	; 236
    6940:	7f 7d       	andi	r23, 0xDF	; 223
    6942:	7b 79       	andi	r23, 0x9B	; 155
    6944:	77 75       	andi	r23, 0x57	; 87
    6946:	73 71       	andi	r23, 0x13	; 19
    6948:	6f 6d       	ori	r22, 0xDF	; 223
    694a:	6b 69       	ori	r22, 0x9B	; 155
    694c:	67 65       	ori	r22, 0x57	; 87
    694e:	63 61       	ori	r22, 0x13	; 19
    6950:	5f 5d       	subi	r21, 0xDF	; 223
    6952:	5b 59       	subi	r21, 0x9B	; 155
    6954:	57 55       	subi	r21, 0x57	; 87
    6956:	53 51       	subi	r21, 0x13	; 19
    6958:	4f 4d       	sbci	r20, 0xDF	; 223
    695a:	4b 49       	sbci	r20, 0x9B	; 155
    695c:	47 45       	sbci	r20, 0x57	; 87
    695e:	43 41       	sbci	r20, 0x13	; 19
    6960:	3f 3d       	cpi	r19, 0xDF	; 223
    6962:	3b 39       	cpi	r19, 0x9B	; 155
    6964:	37 35       	cpi	r19, 0x57	; 87
    6966:	33 31       	cpi	r19, 0x13	; 19
    6968:	2f 2d       	mov	r18, r15
    696a:	2b 29       	or	r18, r11
    696c:	27 25       	eor	r18, r7
    696e:	23 21       	and	r18, r3
    6970:	1f 1d       	adc	r17, r15
    6972:	1b 19       	sub	r17, r11
    6974:	17 15       	cp	r17, r7
    6976:	13 11       	cpse	r17, r3
    6978:	0f 0d       	add	r16, r15
    697a:	0b 09       	sbc	r16, r11
    697c:	07 05       	cpc	r16, r7
    697e:	03 01       	movw	r0, r6
    6980:	ff fd       	.word	0xfdff	; ????
    6982:	fb f9       	.word	0xf9fb	; ????
    6984:	f7 f5       	brid	.+124    	; 0x6a02 <waves+0x302>
    6986:	f3 f1       	brvs	.+124    	; 0x6a04 <waves+0x304>
    6988:	ef ed       	ldi	r30, 0xDF	; 223
    698a:	eb e9       	ldi	r30, 0x9B	; 155
    698c:	e7 e5       	ldi	r30, 0x57	; 87
    698e:	e3 e1       	ldi	r30, 0x13	; 19
    6990:	df dd       	rcall	.-1090   	; 0x6550 <steptable+0x48>
    6992:	db d9       	rcall	.-3146   	; 0x5d4a <StartSong+0x26>
    6994:	d7 d5       	rcall	.+2990   	; 0x7544 <Print+0x1c>
    6996:	d3 d1       	rcall	.+934    	; 0x6d3e <waves+0x63e>
    6998:	cf cd       	rjmp	.-1122   	; 0x6538 <steptable+0x30>
    699a:	cb c9       	rjmp	.-3178   	; 0x5d32 <StartSong+0xe>
    699c:	c7 c5       	rjmp	.+2958   	; 0x752c <Print+0x4>
    699e:	c3 c1       	rjmp	.+902    	; 0x6d26 <waves+0x626>
    69a0:	bf bd       	out	0x2f, r27	; 47
    69a2:	bb b9       	out	0x0b, r27	; 11
    69a4:	b7 b5       	in	r27, 0x27	; 39
    69a6:	b3 b1       	in	r27, 0x03	; 3
    69a8:	af ad       	ldd	r26, Y+63	; 0x3f
    69aa:	ab a9       	ldd	r26, Y+51	; 0x33
    69ac:	a7 a5       	ldd	r26, Z+47	; 0x2f
    69ae:	a3 a1       	ldd	r26, Z+35	; 0x23
    69b0:	9f 9d       	mul	r25, r15
    69b2:	9b 99       	sbic	0x13, 3	; 19
    69b4:	97 95       	ror	r25
    69b6:	93 91       	.word	0x9193	; ????
    69b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    69ba:	8b 89       	ldd	r24, Y+19	; 0x13
    69bc:	87 85       	ldd	r24, Z+15	; 0x0f
    69be:	83 81       	ldd	r24, Z+3	; 0x03
    69c0:	80 82       	st	Z, r8
    69c2:	84 86       	std	Z+12, r8	; 0x0c
    69c4:	88 8a       	std	Y+16, r8	; 0x10
    69c6:	8c 8e       	std	Y+28, r8	; 0x1c
    69c8:	90 92 94 96 	sts	0x9694, r9
    69cc:	98 9a       	sbi	0x13, 0	; 19
    69ce:	9c 9e       	mul	r9, r28
    69d0:	a0 a2       	std	Z+32, r10	; 0x20
    69d2:	a4 a6       	std	Z+44, r10	; 0x2c
    69d4:	a8 aa       	std	Y+48, r10	; 0x30
    69d6:	ac ae       	std	Y+60, r10	; 0x3c
    69d8:	b0 b2       	in	r11, 0x10	; 16
    69da:	b4 b6       	in	r11, 0x34	; 52
    69dc:	b8 ba       	out	0x18, r11	; 24
    69de:	bc be       	out	0x3c, r11	; 60
    69e0:	c0 c2       	rjmp	.+1408   	; 0x6f62 <waves+0x862>
    69e2:	c4 c6       	rjmp	.+3464   	; 0x776c <LBGetJoyPadState+0x88>
    69e4:	c8 ca       	rjmp	.-2672   	; 0x5f76 <TriggerFx+0x7c>
    69e6:	cc ce       	rjmp	.-616    	; 0x6780 <waves+0x80>
    69e8:	d0 d2       	rcall	.+1440   	; 0x6f8a <waves+0x88a>
    69ea:	d4 d6       	rcall	.+3496   	; 0x7794 <LBCollides+0x1a>
    69ec:	d8 da       	rcall	.-2640   	; 0x5f9e <TriggerNote+0x14>
    69ee:	dc de       	rcall	.-584    	; 0x67a8 <waves+0xa8>
    69f0:	e0 e2       	ldi	r30, 0x20	; 32
    69f2:	e4 e6       	ldi	r30, 0x64	; 100
    69f4:	e8 ea       	ldi	r30, 0xA8	; 168
    69f6:	ec ee       	ldi	r30, 0xEC	; 236
    69f8:	f0 f2       	brcs	.-68     	; 0x69b6 <waves+0x2b6>
    69fa:	f4 f6       	brge	.-68     	; 0x69b8 <waves+0x2b8>
    69fc:	f8 fa       	.word	0xfaf8	; ????
    69fe:	fc fe       	.word	0xfefc	; ????
    6a00:	7f 7f       	andi	r23, 0xFF	; 255
    6a02:	7f 7f       	andi	r23, 0xFF	; 255
    6a04:	7f 7f       	andi	r23, 0xFF	; 255
    6a06:	7f 7f       	andi	r23, 0xFF	; 255
    6a08:	7f 7f       	andi	r23, 0xFF	; 255
    6a0a:	7f 7f       	andi	r23, 0xFF	; 255
    6a0c:	7f 7f       	andi	r23, 0xFF	; 255
    6a0e:	7f 7f       	andi	r23, 0xFF	; 255
    6a10:	7f 7f       	andi	r23, 0xFF	; 255
    6a12:	7f 7f       	andi	r23, 0xFF	; 255
    6a14:	7f 7f       	andi	r23, 0xFF	; 255
    6a16:	7f 7f       	andi	r23, 0xFF	; 255
    6a18:	7f 7f       	andi	r23, 0xFF	; 255
    6a1a:	7f 7f       	andi	r23, 0xFF	; 255
    6a1c:	7f 7f       	andi	r23, 0xFF	; 255
    6a1e:	7f 7f       	andi	r23, 0xFF	; 255
    6a20:	7f 7f       	andi	r23, 0xFF	; 255
    6a22:	7f 7f       	andi	r23, 0xFF	; 255
    6a24:	7f 7f       	andi	r23, 0xFF	; 255
    6a26:	7f 7f       	andi	r23, 0xFF	; 255
    6a28:	7f 7f       	andi	r23, 0xFF	; 255
    6a2a:	7f 7f       	andi	r23, 0xFF	; 255
    6a2c:	7f 7f       	andi	r23, 0xFF	; 255
    6a2e:	7f 7f       	andi	r23, 0xFF	; 255
    6a30:	7f 7f       	andi	r23, 0xFF	; 255
    6a32:	7f 7f       	andi	r23, 0xFF	; 255
    6a34:	7f 7f       	andi	r23, 0xFF	; 255
    6a36:	7f 7f       	andi	r23, 0xFF	; 255
    6a38:	7f 7f       	andi	r23, 0xFF	; 255
    6a3a:	7f 7f       	andi	r23, 0xFF	; 255
    6a3c:	7f 7f       	andi	r23, 0xFF	; 255
    6a3e:	7f 7f       	andi	r23, 0xFF	; 255
    6a40:	80 80       	ld	r8, Z
    6a42:	80 80       	ld	r8, Z
    6a44:	80 80       	ld	r8, Z
    6a46:	80 80       	ld	r8, Z
    6a48:	80 80       	ld	r8, Z
    6a4a:	80 80       	ld	r8, Z
    6a4c:	80 80       	ld	r8, Z
    6a4e:	80 80       	ld	r8, Z
    6a50:	80 80       	ld	r8, Z
    6a52:	80 80       	ld	r8, Z
    6a54:	80 80       	ld	r8, Z
    6a56:	80 80       	ld	r8, Z
    6a58:	80 80       	ld	r8, Z
    6a5a:	80 80       	ld	r8, Z
    6a5c:	80 80       	ld	r8, Z
    6a5e:	80 80       	ld	r8, Z
    6a60:	80 80       	ld	r8, Z
    6a62:	80 80       	ld	r8, Z
    6a64:	80 80       	ld	r8, Z
    6a66:	80 80       	ld	r8, Z
    6a68:	80 80       	ld	r8, Z
    6a6a:	80 80       	ld	r8, Z
    6a6c:	80 80       	ld	r8, Z
    6a6e:	80 80       	ld	r8, Z
    6a70:	80 80       	ld	r8, Z
    6a72:	80 80       	ld	r8, Z
    6a74:	80 80       	ld	r8, Z
    6a76:	80 80       	ld	r8, Z
    6a78:	80 80       	ld	r8, Z
    6a7a:	80 80       	ld	r8, Z
    6a7c:	80 80       	ld	r8, Z
    6a7e:	80 80       	ld	r8, Z
    6a80:	80 80       	ld	r8, Z
    6a82:	80 80       	ld	r8, Z
    6a84:	80 80       	ld	r8, Z
    6a86:	80 80       	ld	r8, Z
    6a88:	80 80       	ld	r8, Z
    6a8a:	80 80       	ld	r8, Z
    6a8c:	80 80       	ld	r8, Z
    6a8e:	80 80       	ld	r8, Z
    6a90:	80 80       	ld	r8, Z
    6a92:	80 80       	ld	r8, Z
    6a94:	80 80       	ld	r8, Z
    6a96:	80 80       	ld	r8, Z
    6a98:	80 80       	ld	r8, Z
    6a9a:	80 80       	ld	r8, Z
    6a9c:	80 80       	ld	r8, Z
    6a9e:	80 80       	ld	r8, Z
    6aa0:	80 80       	ld	r8, Z
    6aa2:	80 80       	ld	r8, Z
    6aa4:	80 80       	ld	r8, Z
    6aa6:	80 80       	ld	r8, Z
    6aa8:	80 80       	ld	r8, Z
    6aaa:	80 80       	ld	r8, Z
    6aac:	80 80       	ld	r8, Z
    6aae:	80 80       	ld	r8, Z
    6ab0:	80 80       	ld	r8, Z
    6ab2:	80 80       	ld	r8, Z
    6ab4:	80 80       	ld	r8, Z
    6ab6:	80 80       	ld	r8, Z
    6ab8:	80 80       	ld	r8, Z
    6aba:	80 80       	ld	r8, Z
    6abc:	80 80       	ld	r8, Z
    6abe:	80 80       	ld	r8, Z
    6ac0:	80 80       	ld	r8, Z
    6ac2:	80 80       	ld	r8, Z
    6ac4:	80 80       	ld	r8, Z
    6ac6:	80 80       	ld	r8, Z
    6ac8:	80 80       	ld	r8, Z
    6aca:	80 80       	ld	r8, Z
    6acc:	80 80       	ld	r8, Z
    6ace:	80 80       	ld	r8, Z
    6ad0:	80 80       	ld	r8, Z
    6ad2:	80 80       	ld	r8, Z
    6ad4:	80 80       	ld	r8, Z
    6ad6:	80 80       	ld	r8, Z
    6ad8:	80 80       	ld	r8, Z
    6ada:	80 80       	ld	r8, Z
    6adc:	80 80       	ld	r8, Z
    6ade:	80 80       	ld	r8, Z
    6ae0:	80 80       	ld	r8, Z
    6ae2:	80 80       	ld	r8, Z
    6ae4:	80 80       	ld	r8, Z
    6ae6:	80 80       	ld	r8, Z
    6ae8:	80 80       	ld	r8, Z
    6aea:	80 80       	ld	r8, Z
    6aec:	80 80       	ld	r8, Z
    6aee:	80 80       	ld	r8, Z
    6af0:	80 80       	ld	r8, Z
    6af2:	80 80       	ld	r8, Z
    6af4:	80 80       	ld	r8, Z
    6af6:	80 80       	ld	r8, Z
    6af8:	80 80       	ld	r8, Z
    6afa:	80 80       	ld	r8, Z
    6afc:	80 80       	ld	r8, Z
    6afe:	80 80       	ld	r8, Z
    6b00:	7f 7f       	andi	r23, 0xFF	; 255
    6b02:	7f 7f       	andi	r23, 0xFF	; 255
    6b04:	7f 7f       	andi	r23, 0xFF	; 255
    6b06:	7f 7f       	andi	r23, 0xFF	; 255
    6b08:	7f 7f       	andi	r23, 0xFF	; 255
    6b0a:	7f 7f       	andi	r23, 0xFF	; 255
    6b0c:	7f 7f       	andi	r23, 0xFF	; 255
    6b0e:	7f 7f       	andi	r23, 0xFF	; 255
    6b10:	7f 7f       	andi	r23, 0xFF	; 255
    6b12:	7f 7f       	andi	r23, 0xFF	; 255
    6b14:	7f 7f       	andi	r23, 0xFF	; 255
    6b16:	7f 7f       	andi	r23, 0xFF	; 255
    6b18:	7f 7f       	andi	r23, 0xFF	; 255
    6b1a:	7f 7f       	andi	r23, 0xFF	; 255
    6b1c:	7f 7f       	andi	r23, 0xFF	; 255
    6b1e:	7f 7f       	andi	r23, 0xFF	; 255
    6b20:	7f 7f       	andi	r23, 0xFF	; 255
    6b22:	7f 7f       	andi	r23, 0xFF	; 255
    6b24:	7f 7f       	andi	r23, 0xFF	; 255
    6b26:	7f 7f       	andi	r23, 0xFF	; 255
    6b28:	7f 7f       	andi	r23, 0xFF	; 255
    6b2a:	7f 7f       	andi	r23, 0xFF	; 255
    6b2c:	7f 7f       	andi	r23, 0xFF	; 255
    6b2e:	7f 7f       	andi	r23, 0xFF	; 255
    6b30:	7f 7f       	andi	r23, 0xFF	; 255
    6b32:	7f 7f       	andi	r23, 0xFF	; 255
    6b34:	7f 7f       	andi	r23, 0xFF	; 255
    6b36:	7f 7f       	andi	r23, 0xFF	; 255
    6b38:	7f 7f       	andi	r23, 0xFF	; 255
    6b3a:	7f 7f       	andi	r23, 0xFF	; 255
    6b3c:	7f 7f       	andi	r23, 0xFF	; 255
    6b3e:	7f 7f       	andi	r23, 0xFF	; 255
    6b40:	7f 7f       	andi	r23, 0xFF	; 255
    6b42:	7f 7f       	andi	r23, 0xFF	; 255
    6b44:	7f 7f       	andi	r23, 0xFF	; 255
    6b46:	7f 7f       	andi	r23, 0xFF	; 255
    6b48:	7f 7f       	andi	r23, 0xFF	; 255
    6b4a:	7f 7f       	andi	r23, 0xFF	; 255
    6b4c:	7f 7f       	andi	r23, 0xFF	; 255
    6b4e:	7f 7f       	andi	r23, 0xFF	; 255
    6b50:	7f 7f       	andi	r23, 0xFF	; 255
    6b52:	7f 7f       	andi	r23, 0xFF	; 255
    6b54:	7f 7f       	andi	r23, 0xFF	; 255
    6b56:	7f 7f       	andi	r23, 0xFF	; 255
    6b58:	7f 7f       	andi	r23, 0xFF	; 255
    6b5a:	7f 7f       	andi	r23, 0xFF	; 255
    6b5c:	7f 7f       	andi	r23, 0xFF	; 255
    6b5e:	7f 7f       	andi	r23, 0xFF	; 255
    6b60:	7f 7f       	andi	r23, 0xFF	; 255
    6b62:	7f 7f       	andi	r23, 0xFF	; 255
    6b64:	7f 7f       	andi	r23, 0xFF	; 255
    6b66:	7f 7f       	andi	r23, 0xFF	; 255
    6b68:	7f 7f       	andi	r23, 0xFF	; 255
    6b6a:	7f 7f       	andi	r23, 0xFF	; 255
    6b6c:	7f 7f       	andi	r23, 0xFF	; 255
    6b6e:	7f 7f       	andi	r23, 0xFF	; 255
    6b70:	7f 7f       	andi	r23, 0xFF	; 255
    6b72:	7f 7f       	andi	r23, 0xFF	; 255
    6b74:	7f 7f       	andi	r23, 0xFF	; 255
    6b76:	7f 7f       	andi	r23, 0xFF	; 255
    6b78:	7f 7f       	andi	r23, 0xFF	; 255
    6b7a:	7f 7f       	andi	r23, 0xFF	; 255
    6b7c:	7f 7f       	andi	r23, 0xFF	; 255
    6b7e:	7f 7f       	andi	r23, 0xFF	; 255
    6b80:	80 80       	ld	r8, Z
    6b82:	80 80       	ld	r8, Z
    6b84:	80 80       	ld	r8, Z
    6b86:	80 80       	ld	r8, Z
    6b88:	80 80       	ld	r8, Z
    6b8a:	80 80       	ld	r8, Z
    6b8c:	80 80       	ld	r8, Z
    6b8e:	80 80       	ld	r8, Z
    6b90:	80 80       	ld	r8, Z
    6b92:	80 80       	ld	r8, Z
    6b94:	80 80       	ld	r8, Z
    6b96:	80 80       	ld	r8, Z
    6b98:	80 80       	ld	r8, Z
    6b9a:	80 80       	ld	r8, Z
    6b9c:	80 80       	ld	r8, Z
    6b9e:	80 80       	ld	r8, Z
    6ba0:	80 80       	ld	r8, Z
    6ba2:	80 80       	ld	r8, Z
    6ba4:	80 80       	ld	r8, Z
    6ba6:	80 80       	ld	r8, Z
    6ba8:	80 80       	ld	r8, Z
    6baa:	80 80       	ld	r8, Z
    6bac:	80 80       	ld	r8, Z
    6bae:	80 80       	ld	r8, Z
    6bb0:	80 80       	ld	r8, Z
    6bb2:	80 80       	ld	r8, Z
    6bb4:	80 80       	ld	r8, Z
    6bb6:	80 80       	ld	r8, Z
    6bb8:	80 80       	ld	r8, Z
    6bba:	80 80       	ld	r8, Z
    6bbc:	80 80       	ld	r8, Z
    6bbe:	80 80       	ld	r8, Z
    6bc0:	80 80       	ld	r8, Z
    6bc2:	80 80       	ld	r8, Z
    6bc4:	80 80       	ld	r8, Z
    6bc6:	80 80       	ld	r8, Z
    6bc8:	80 80       	ld	r8, Z
    6bca:	80 80       	ld	r8, Z
    6bcc:	80 80       	ld	r8, Z
    6bce:	80 80       	ld	r8, Z
    6bd0:	80 80       	ld	r8, Z
    6bd2:	80 80       	ld	r8, Z
    6bd4:	80 80       	ld	r8, Z
    6bd6:	80 80       	ld	r8, Z
    6bd8:	80 80       	ld	r8, Z
    6bda:	80 80       	ld	r8, Z
    6bdc:	80 80       	ld	r8, Z
    6bde:	80 80       	ld	r8, Z
    6be0:	80 80       	ld	r8, Z
    6be2:	80 80       	ld	r8, Z
    6be4:	80 80       	ld	r8, Z
    6be6:	80 80       	ld	r8, Z
    6be8:	80 80       	ld	r8, Z
    6bea:	80 80       	ld	r8, Z
    6bec:	80 80       	ld	r8, Z
    6bee:	80 80       	ld	r8, Z
    6bf0:	80 80       	ld	r8, Z
    6bf2:	80 80       	ld	r8, Z
    6bf4:	80 80       	ld	r8, Z
    6bf6:	80 80       	ld	r8, Z
    6bf8:	80 80       	ld	r8, Z
    6bfa:	80 80       	ld	r8, Z
    6bfc:	80 80       	ld	r8, Z
    6bfe:	80 80       	ld	r8, Z
    6c00:	7f 7f       	andi	r23, 0xFF	; 255
    6c02:	7f 7f       	andi	r23, 0xFF	; 255
    6c04:	7f 7f       	andi	r23, 0xFF	; 255
    6c06:	7f 7f       	andi	r23, 0xFF	; 255
    6c08:	7f 7f       	andi	r23, 0xFF	; 255
    6c0a:	7f 7f       	andi	r23, 0xFF	; 255
    6c0c:	7f 7f       	andi	r23, 0xFF	; 255
    6c0e:	7f 7f       	andi	r23, 0xFF	; 255
    6c10:	7f 7f       	andi	r23, 0xFF	; 255
    6c12:	7f 7f       	andi	r23, 0xFF	; 255
    6c14:	7f 7f       	andi	r23, 0xFF	; 255
    6c16:	7f 7f       	andi	r23, 0xFF	; 255
    6c18:	7f 7f       	andi	r23, 0xFF	; 255
    6c1a:	7f 7f       	andi	r23, 0xFF	; 255
    6c1c:	7f 7f       	andi	r23, 0xFF	; 255
    6c1e:	7f 7f       	andi	r23, 0xFF	; 255
    6c20:	7f 7f       	andi	r23, 0xFF	; 255
    6c22:	7f 7f       	andi	r23, 0xFF	; 255
    6c24:	7f 7f       	andi	r23, 0xFF	; 255
    6c26:	7f 7f       	andi	r23, 0xFF	; 255
    6c28:	7f 7f       	andi	r23, 0xFF	; 255
    6c2a:	7f 7f       	andi	r23, 0xFF	; 255
    6c2c:	7f 7f       	andi	r23, 0xFF	; 255
    6c2e:	7f 7f       	andi	r23, 0xFF	; 255
    6c30:	7f 7f       	andi	r23, 0xFF	; 255
    6c32:	7f 7f       	andi	r23, 0xFF	; 255
    6c34:	7f 7f       	andi	r23, 0xFF	; 255
    6c36:	7f 7f       	andi	r23, 0xFF	; 255
    6c38:	7f 7f       	andi	r23, 0xFF	; 255
    6c3a:	7f 7f       	andi	r23, 0xFF	; 255
    6c3c:	7f 7f       	andi	r23, 0xFF	; 255
    6c3e:	7f 7f       	andi	r23, 0xFF	; 255
    6c40:	7f 7f       	andi	r23, 0xFF	; 255
    6c42:	7f 7f       	andi	r23, 0xFF	; 255
    6c44:	7f 7f       	andi	r23, 0xFF	; 255
    6c46:	7f 7f       	andi	r23, 0xFF	; 255
    6c48:	7f 7f       	andi	r23, 0xFF	; 255
    6c4a:	7f 7f       	andi	r23, 0xFF	; 255
    6c4c:	7f 7f       	andi	r23, 0xFF	; 255
    6c4e:	7f 7f       	andi	r23, 0xFF	; 255
    6c50:	7f 7f       	andi	r23, 0xFF	; 255
    6c52:	7f 7f       	andi	r23, 0xFF	; 255
    6c54:	7f 7f       	andi	r23, 0xFF	; 255
    6c56:	7f 7f       	andi	r23, 0xFF	; 255
    6c58:	7f 7f       	andi	r23, 0xFF	; 255
    6c5a:	7f 7f       	andi	r23, 0xFF	; 255
    6c5c:	7f 7f       	andi	r23, 0xFF	; 255
    6c5e:	7f 7f       	andi	r23, 0xFF	; 255
    6c60:	7f 7f       	andi	r23, 0xFF	; 255
    6c62:	7f 7f       	andi	r23, 0xFF	; 255
    6c64:	7f 7f       	andi	r23, 0xFF	; 255
    6c66:	7f 7f       	andi	r23, 0xFF	; 255
    6c68:	7f 7f       	andi	r23, 0xFF	; 255
    6c6a:	7f 7f       	andi	r23, 0xFF	; 255
    6c6c:	7f 7f       	andi	r23, 0xFF	; 255
    6c6e:	7f 7f       	andi	r23, 0xFF	; 255
    6c70:	7f 7f       	andi	r23, 0xFF	; 255
    6c72:	7f 7f       	andi	r23, 0xFF	; 255
    6c74:	7f 7f       	andi	r23, 0xFF	; 255
    6c76:	7f 7f       	andi	r23, 0xFF	; 255
    6c78:	7f 7f       	andi	r23, 0xFF	; 255
    6c7a:	7f 7f       	andi	r23, 0xFF	; 255
    6c7c:	7f 7f       	andi	r23, 0xFF	; 255
    6c7e:	7f 7f       	andi	r23, 0xFF	; 255
    6c80:	7f 7f       	andi	r23, 0xFF	; 255
    6c82:	7f 7f       	andi	r23, 0xFF	; 255
    6c84:	7f 7f       	andi	r23, 0xFF	; 255
    6c86:	7f 7f       	andi	r23, 0xFF	; 255
    6c88:	7f 7f       	andi	r23, 0xFF	; 255
    6c8a:	7f 7f       	andi	r23, 0xFF	; 255
    6c8c:	7f 7f       	andi	r23, 0xFF	; 255
    6c8e:	7f 7f       	andi	r23, 0xFF	; 255
    6c90:	7f 7f       	andi	r23, 0xFF	; 255
    6c92:	7f 7f       	andi	r23, 0xFF	; 255
    6c94:	7f 7f       	andi	r23, 0xFF	; 255
    6c96:	7f 7f       	andi	r23, 0xFF	; 255
    6c98:	7f 7f       	andi	r23, 0xFF	; 255
    6c9a:	7f 7f       	andi	r23, 0xFF	; 255
    6c9c:	7f 7f       	andi	r23, 0xFF	; 255
    6c9e:	7f 7f       	andi	r23, 0xFF	; 255
    6ca0:	7f 7f       	andi	r23, 0xFF	; 255
    6ca2:	7f 7f       	andi	r23, 0xFF	; 255
    6ca4:	7f 7f       	andi	r23, 0xFF	; 255
    6ca6:	7f 7f       	andi	r23, 0xFF	; 255
    6ca8:	7f 7f       	andi	r23, 0xFF	; 255
    6caa:	7f 7f       	andi	r23, 0xFF	; 255
    6cac:	7f 7f       	andi	r23, 0xFF	; 255
    6cae:	7f 7f       	andi	r23, 0xFF	; 255
    6cb0:	7f 7f       	andi	r23, 0xFF	; 255
    6cb2:	7f 7f       	andi	r23, 0xFF	; 255
    6cb4:	7f 7f       	andi	r23, 0xFF	; 255
    6cb6:	7f 7f       	andi	r23, 0xFF	; 255
    6cb8:	7f 7f       	andi	r23, 0xFF	; 255
    6cba:	7f 7f       	andi	r23, 0xFF	; 255
    6cbc:	7f 7f       	andi	r23, 0xFF	; 255
    6cbe:	7f 7f       	andi	r23, 0xFF	; 255
    6cc0:	80 80       	ld	r8, Z
    6cc2:	80 80       	ld	r8, Z
    6cc4:	80 80       	ld	r8, Z
    6cc6:	80 80       	ld	r8, Z
    6cc8:	80 80       	ld	r8, Z
    6cca:	80 80       	ld	r8, Z
    6ccc:	80 80       	ld	r8, Z
    6cce:	80 80       	ld	r8, Z
    6cd0:	80 80       	ld	r8, Z
    6cd2:	80 80       	ld	r8, Z
    6cd4:	80 80       	ld	r8, Z
    6cd6:	80 80       	ld	r8, Z
    6cd8:	80 80       	ld	r8, Z
    6cda:	80 80       	ld	r8, Z
    6cdc:	80 80       	ld	r8, Z
    6cde:	80 80       	ld	r8, Z
    6ce0:	80 80       	ld	r8, Z
    6ce2:	80 80       	ld	r8, Z
    6ce4:	80 80       	ld	r8, Z
    6ce6:	80 80       	ld	r8, Z
    6ce8:	80 80       	ld	r8, Z
    6cea:	80 80       	ld	r8, Z
    6cec:	80 80       	ld	r8, Z
    6cee:	80 80       	ld	r8, Z
    6cf0:	80 80       	ld	r8, Z
    6cf2:	80 80       	ld	r8, Z
    6cf4:	80 80       	ld	r8, Z
    6cf6:	80 80       	ld	r8, Z
    6cf8:	80 80       	ld	r8, Z
    6cfa:	80 80       	ld	r8, Z
    6cfc:	80 80       	ld	r8, Z
    6cfe:	80 80       	ld	r8, Z
    6d00:	03 09       	sbc	r16, r3
    6d02:	13 1e       	adc	r1, r19
    6d04:	28 31       	cpi	r18, 0x18	; 24
    6d06:	3a 40       	sbci	r19, 0x0A	; 10
    6d08:	46 4c       	sbci	r20, 0xC6	; 198
    6d0a:	50 54       	subi	r21, 0x40	; 64
    6d0c:	58 5b       	subi	r21, 0xB8	; 184
    6d0e:	5e 61       	ori	r21, 0x1E	; 30
    6d10:	63 65       	ori	r22, 0x53	; 83
    6d12:	67 69       	ori	r22, 0x97	; 151
    6d14:	6b 6c       	ori	r22, 0xCB	; 203
    6d16:	6e 6f       	ori	r22, 0xFE	; 254
    6d18:	70 71       	andi	r23, 0x10	; 16
    6d1a:	72 73       	andi	r23, 0x32	; 50
    6d1c:	74 75       	andi	r23, 0x54	; 84
    6d1e:	76 77       	andi	r23, 0x76	; 118
    6d20:	77 78       	andi	r23, 0x87	; 135
    6d22:	79 79       	andi	r23, 0x99	; 153
    6d24:	7a 7a       	andi	r23, 0xAA	; 170
    6d26:	7b 7b       	andi	r23, 0xBB	; 187
    6d28:	7c 7c       	andi	r23, 0xCC	; 204
    6d2a:	7c 7d       	andi	r23, 0xDC	; 220
    6d2c:	7d 7d       	andi	r23, 0xDD	; 221
    6d2e:	7e 7e       	andi	r23, 0xEE	; 238
    6d30:	7e 7e       	andi	r23, 0xEE	; 238
    6d32:	7f 7f       	andi	r23, 0xFF	; 255
    6d34:	7f 7f       	andi	r23, 0xFF	; 255
    6d36:	7f 7f       	andi	r23, 0xFF	; 255
    6d38:	7f 7f       	andi	r23, 0xFF	; 255
    6d3a:	7f 7f       	andi	r23, 0xFF	; 255
    6d3c:	7f 7f       	andi	r23, 0xFF	; 255
    6d3e:	7f 7f       	andi	r23, 0xFF	; 255
    6d40:	7f 7f       	andi	r23, 0xFF	; 255
    6d42:	7f 7f       	andi	r23, 0xFF	; 255
    6d44:	7f 7f       	andi	r23, 0xFF	; 255
    6d46:	7f 7f       	andi	r23, 0xFF	; 255
    6d48:	7f 7f       	andi	r23, 0xFF	; 255
    6d4a:	7f 7f       	andi	r23, 0xFF	; 255
    6d4c:	7f 7e       	andi	r23, 0xEF	; 239
    6d4e:	7e 7e       	andi	r23, 0xEE	; 238
    6d50:	7e 7d       	andi	r23, 0xDE	; 222
    6d52:	7d 7d       	andi	r23, 0xDD	; 221
    6d54:	7c 7c       	andi	r23, 0xCC	; 204
    6d56:	7c 7b       	andi	r23, 0xBC	; 188
    6d58:	7b 7a       	andi	r23, 0xAB	; 171
    6d5a:	7a 79       	andi	r23, 0x9A	; 154
    6d5c:	79 78       	andi	r23, 0x89	; 137
    6d5e:	77 77       	andi	r23, 0x77	; 119
    6d60:	76 75       	andi	r23, 0x56	; 86
    6d62:	74 73       	andi	r23, 0x34	; 52
    6d64:	72 71       	andi	r23, 0x12	; 18
    6d66:	70 6f       	ori	r23, 0xF0	; 240
    6d68:	6e 6c       	ori	r22, 0xCE	; 206
    6d6a:	6b 69       	ori	r22, 0x9B	; 155
    6d6c:	67 65       	ori	r22, 0x57	; 87
    6d6e:	63 61       	ori	r22, 0x13	; 19
    6d70:	5e 5b       	subi	r21, 0xBE	; 190
    6d72:	58 54       	subi	r21, 0x48	; 72
    6d74:	50 4c       	sbci	r21, 0xC0	; 192
    6d76:	46 40       	sbci	r20, 0x06	; 6
    6d78:	3a 31       	cpi	r19, 0x1A	; 26
    6d7a:	28 1e       	adc	r2, r24
    6d7c:	13 09       	sbc	r17, r3
    6d7e:	03 00       	.word	0x0003	; ????
    6d80:	c6 cc       	rjmp	.-1652   	; 0x670e <waves+0xe>
    6d82:	d5 db       	rcall	.-2134   	; 0x652e <steptable+0x26>
    6d84:	df e3       	ldi	r29, 0x3F	; 63
    6d86:	e5 e7       	ldi	r30, 0x75	; 117
    6d88:	e9 ea       	ldi	r30, 0xA9	; 169
    6d8a:	eb ec       	ldi	r30, 0xCB	; 203
    6d8c:	ed ee       	ldi	r30, 0xED	; 237
    6d8e:	ef ef       	ldi	r30, 0xFF	; 255
    6d90:	f0 f0       	brcs	.+60     	; 0x6dce <waves+0x6ce>
    6d92:	f0 f1       	brcs	.+124    	; 0x6e10 <waves+0x710>
    6d94:	f1 f1       	breq	.+124    	; 0x6e12 <waves+0x712>
    6d96:	f1 f2       	breq	.-68     	; 0x6d54 <waves+0x654>
    6d98:	f2 f2       	brmi	.-68     	; 0x6d56 <waves+0x656>
    6d9a:	f2 f2       	brmi	.-68     	; 0x6d58 <waves+0x658>
    6d9c:	f2 f2       	brmi	.-68     	; 0x6d5a <waves+0x65a>
    6d9e:	f2 f3       	brmi	.-4      	; 0x6d9c <waves+0x69c>
    6da0:	f3 f3       	brvs	.-4      	; 0x6d9e <waves+0x69e>
    6da2:	f3 f3       	brvs	.-4      	; 0x6da0 <waves+0x6a0>
    6da4:	f3 f3       	brvs	.-4      	; 0x6da2 <waves+0x6a2>
    6da6:	f3 f3       	brvs	.-4      	; 0x6da4 <waves+0x6a4>
    6da8:	f3 f3       	brvs	.-4      	; 0x6da6 <waves+0x6a6>
    6daa:	f3 f3       	brvs	.-4      	; 0x6da8 <waves+0x6a8>
    6dac:	f3 f3       	brvs	.-4      	; 0x6daa <waves+0x6aa>
    6dae:	f3 f3       	brvs	.-4      	; 0x6dac <waves+0x6ac>
    6db0:	f3 f3       	brvs	.-4      	; 0x6dae <waves+0x6ae>
    6db2:	f3 f3       	brvs	.-4      	; 0x6db0 <waves+0x6b0>
    6db4:	f3 f3       	brvs	.-4      	; 0x6db2 <waves+0x6b2>
    6db6:	f3 f3       	brvs	.-4      	; 0x6db4 <waves+0x6b4>
    6db8:	f3 f3       	brvs	.-4      	; 0x6db6 <waves+0x6b6>
    6dba:	f3 f3       	brvs	.-4      	; 0x6db8 <waves+0x6b8>
    6dbc:	f3 f3       	brvs	.-4      	; 0x6dba <waves+0x6ba>
    6dbe:	f3 f3       	brvs	.-4      	; 0x6dbc <waves+0x6bc>
    6dc0:	f3 f3       	brvs	.-4      	; 0x6dbe <waves+0x6be>
    6dc2:	f3 f3       	brvs	.-4      	; 0x6dc0 <waves+0x6c0>
    6dc4:	f3 f3       	brvs	.-4      	; 0x6dc2 <waves+0x6c2>
    6dc6:	f3 f3       	brvs	.-4      	; 0x6dc4 <waves+0x6c4>
    6dc8:	f3 f3       	brvs	.-4      	; 0x6dc6 <waves+0x6c6>
    6dca:	f3 f3       	brvs	.-4      	; 0x6dc8 <waves+0x6c8>
    6dcc:	f3 f3       	brvs	.-4      	; 0x6dca <waves+0x6ca>
    6dce:	f3 f3       	brvs	.-4      	; 0x6dcc <waves+0x6cc>
    6dd0:	f3 f3       	brvs	.-4      	; 0x6dce <waves+0x6ce>
    6dd2:	f3 f3       	brvs	.-4      	; 0x6dd0 <waves+0x6d0>
    6dd4:	f3 f3       	brvs	.-4      	; 0x6dd2 <waves+0x6d2>
    6dd6:	f3 f3       	brvs	.-4      	; 0x6dd4 <waves+0x6d4>
    6dd8:	f3 f3       	brvs	.-4      	; 0x6dd6 <waves+0x6d6>
    6dda:	f3 f3       	brvs	.-4      	; 0x6dd8 <waves+0x6d8>
    6ddc:	f3 f3       	brvs	.-4      	; 0x6dda <waves+0x6da>
    6dde:	f3 f3       	brvs	.-4      	; 0x6ddc <waves+0x6dc>
    6de0:	f2 f2       	brmi	.-68     	; 0x6d9e <waves+0x69e>
    6de2:	f2 f2       	brmi	.-68     	; 0x6da0 <waves+0x6a0>
    6de4:	f2 f2       	brmi	.-68     	; 0x6da2 <waves+0x6a2>
    6de6:	f2 f2       	brmi	.-68     	; 0x6da4 <waves+0x6a4>
    6de8:	f1 f1       	breq	.+124    	; 0x6e66 <waves+0x766>
    6dea:	f1 f1       	breq	.+124    	; 0x6e68 <waves+0x768>
    6dec:	f0 f0       	brcs	.+60     	; 0x6e2a <waves+0x72a>
    6dee:	f0 ef       	ldi	r31, 0xF0	; 240
    6df0:	ef ee       	ldi	r30, 0xEF	; 239
    6df2:	ed ec       	ldi	r30, 0xCD	; 205
    6df4:	eb ea       	ldi	r30, 0xAB	; 171
    6df6:	e9 e7       	ldi	r30, 0x79	; 121
    6df8:	e5 e3       	ldi	r30, 0x35	; 53
    6dfa:	df db       	rcall	.-2114   	; 0x65ba <steptable+0xb2>
    6dfc:	d5 cc       	rjmp	.-1622   	; 0x67a8 <waves+0xa8>
    6dfe:	c6 00       	.word	0x00c6	; ????
    6e00:	00 28       	or	r0, r0
    6e02:	3d 42       	sbci	r19, 0x2D	; 45
    6e04:	30 2d       	mov	r19, r0
    6e06:	2c 2b       	or	r18, r28
    6e08:	2c 2d       	mov	r18, r12
    6e0a:	2e 2f       	mov	r18, r30
    6e0c:	30 32       	cpi	r19, 0x20	; 32
    6e0e:	33 35       	cpi	r19, 0x53	; 83
    6e10:	37 39       	cpi	r19, 0x97	; 151
    6e12:	3b 3d       	cpi	r19, 0xDB	; 219
    6e14:	3f 41       	sbci	r19, 0x1F	; 31
    6e16:	43 45       	sbci	r20, 0x53	; 83
    6e18:	48 4a       	sbci	r20, 0xA8	; 168
    6e1a:	4c 4e       	sbci	r20, 0xEC	; 236
    6e1c:	50 53       	subi	r21, 0x30	; 48
    6e1e:	55 57       	subi	r21, 0x75	; 117
    6e20:	59 5b       	subi	r21, 0xB9	; 185
    6e22:	5d 5f       	subi	r21, 0xFD	; 253
    6e24:	61 63       	ori	r22, 0x31	; 49
    6e26:	65 67       	ori	r22, 0x75	; 117
    6e28:	69 6b       	ori	r22, 0xB9	; 185
    6e2a:	6c 6e       	ori	r22, 0xEC	; 236
    6e2c:	70 71       	andi	r23, 0x10	; 16
    6e2e:	73 74       	andi	r23, 0x43	; 67
    6e30:	75 77       	andi	r23, 0x75	; 117
    6e32:	78 79       	andi	r23, 0x98	; 152
    6e34:	7a 7b       	andi	r23, 0xBA	; 186
    6e36:	7c 7d       	andi	r23, 0xDC	; 220
    6e38:	7d 7e       	andi	r23, 0xED	; 237
    6e3a:	7e 7f       	andi	r23, 0xFE	; 254
    6e3c:	7f 7f       	andi	r23, 0xFF	; 255
    6e3e:	7f 7f       	andi	r23, 0xFF	; 255
    6e40:	7f 7f       	andi	r23, 0xFF	; 255
    6e42:	7f 7f       	andi	r23, 0xFF	; 255
    6e44:	7f 7f       	andi	r23, 0xFF	; 255
    6e46:	7e 7e       	andi	r23, 0xEE	; 238
    6e48:	7d 7d       	andi	r23, 0xDD	; 221
    6e4a:	7c 7b       	andi	r23, 0xBC	; 188
    6e4c:	7a 79       	andi	r23, 0x9A	; 154
    6e4e:	78 77       	andi	r23, 0x78	; 120
    6e50:	75 74       	andi	r23, 0x45	; 69
    6e52:	73 71       	andi	r23, 0x13	; 19
    6e54:	70 6e       	ori	r23, 0xE0	; 224
    6e56:	6c 6b       	ori	r22, 0xBC	; 188
    6e58:	69 67       	ori	r22, 0x79	; 121
    6e5a:	65 63       	ori	r22, 0x35	; 53
    6e5c:	61 5f       	subi	r22, 0xF1	; 241
    6e5e:	5d 5b       	subi	r21, 0xBD	; 189
    6e60:	59 57       	subi	r21, 0x79	; 121
    6e62:	55 53       	subi	r21, 0x35	; 53
    6e64:	50 4e       	sbci	r21, 0xE0	; 224
    6e66:	4c 4a       	sbci	r20, 0xAC	; 172
    6e68:	48 45       	sbci	r20, 0x58	; 88
    6e6a:	43 41       	sbci	r20, 0x13	; 19
    6e6c:	3f 3d       	cpi	r19, 0xDF	; 223
    6e6e:	3b 39       	cpi	r19, 0x9B	; 155
    6e70:	37 35       	cpi	r19, 0x57	; 87
    6e72:	33 32       	cpi	r19, 0x23	; 35
    6e74:	30 2f       	mov	r19, r16
    6e76:	2e 2d       	mov	r18, r14
    6e78:	2c 2b       	or	r18, r28
    6e7a:	2c 2d       	mov	r18, r12
    6e7c:	30 42       	sbci	r19, 0x20	; 32
    6e7e:	3d 28       	or	r3, r13
    6e80:	00 e9       	ldi	r16, 0x90	; 144
    6e82:	e5 fe       	sbrs	r14, 5
    6e84:	d4 d7       	rcall	.+4008   	; 0x7e2e <render_camera_view+0x7a>
    6e86:	d7 d7       	rcall	.+4014   	; 0x7e36 <render_camera_view+0x82>
    6e88:	d6 d4       	rcall	.+2476   	; 0x7836 <LBMapSprite+0x52>
    6e8a:	d2 d0       	rcall	.+420    	; 0x7030 <waves+0x930>
    6e8c:	ce cc       	rjmp	.-1636   	; 0x682a <waves+0x12a>
    6e8e:	ca c8       	rjmp	.-3692   	; 0x6024 <ProcessMusic+0x1a>
    6e90:	c6 c3       	rjmp	.+1932   	; 0x761e <FadeIn+0x8>
    6e92:	c1 bf       	out	0x31, r28	; 49
    6e94:	bd ba       	out	0x1d, r11	; 29
    6e96:	b8 b6       	in	r11, 0x38	; 56
    6e98:	b4 b1       	in	r27, 0x04	; 4
    6e9a:	af ad       	ldd	r26, Y+63	; 0x3f
    6e9c:	ab a9       	ldd	r26, Y+51	; 0x33
    6e9e:	a7 a5       	ldd	r26, Z+47	; 0x2f
    6ea0:	a3 a1       	ldd	r26, Z+35	; 0x23
    6ea2:	9f 9e       	mul	r9, r31
    6ea4:	9c 9a       	sbi	0x13, 4	; 19
    6ea6:	99 97       	sbiw	r26, 0x29	; 41
    6ea8:	95 94       	asr	r9
    6eaa:	93 91       	.word	0x9193	; ????
    6eac:	90 8f       	std	Z+24, r25	; 0x18
    6eae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    6eb0:	8b 8a       	std	Y+19, r8	; 0x13
    6eb2:	89 88       	ldd	r8, Y+17	; 0x11
    6eb4:	88 87       	std	Y+8, r24	; 0x08
    6eb6:	86 85       	ldd	r24, Z+14	; 0x0e
    6eb8:	85 84       	ldd	r8, Z+13	; 0x0d
    6eba:	84 84       	ldd	r8, Z+12	; 0x0c
    6ebc:	83 83       	std	Z+3, r24	; 0x03
    6ebe:	83 83       	std	Z+3, r24	; 0x03
    6ec0:	83 83       	std	Z+3, r24	; 0x03
    6ec2:	83 83       	std	Z+3, r24	; 0x03
    6ec4:	83 84       	ldd	r8, Z+11	; 0x0b
    6ec6:	84 84       	ldd	r8, Z+12	; 0x0c
    6ec8:	85 85       	ldd	r24, Z+13	; 0x0d
    6eca:	86 87       	std	Z+14, r24	; 0x0e
    6ecc:	88 88       	ldd	r8, Y+16	; 0x10
    6ece:	89 8a       	std	Y+17, r8	; 0x11
    6ed0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    6ed2:	8d 8f       	std	Y+29, r24	; 0x1d
    6ed4:	90 91 93 94 	lds	r25, 0x9493
    6ed8:	95 97       	sbiw	r26, 0x25	; 37
    6eda:	99 9a       	sbi	0x13, 1	; 19
    6edc:	9c 9e       	mul	r9, r28
    6ede:	9f a1       	ldd	r25, Y+39	; 0x27
    6ee0:	a3 a5       	ldd	r26, Z+43	; 0x2b
    6ee2:	a7 a9       	ldd	r26, Z+55	; 0x37
    6ee4:	ab ad       	ldd	r26, Y+59	; 0x3b
    6ee6:	af b1       	in	r26, 0x0f	; 15
    6ee8:	b4 b6       	in	r11, 0x34	; 52
    6eea:	b8 ba       	out	0x18, r11	; 24
    6eec:	bd bf       	out	0x3d, r27	; 61
    6eee:	c1 c3       	rjmp	.+1922   	; 0x7672 <ProcessFading+0x2c>
    6ef0:	c6 c8       	rjmp	.-3700   	; 0x607e <ProcessMusic+0x74>
    6ef2:	ca cc       	rjmp	.-1644   	; 0x6888 <waves+0x188>
    6ef4:	ce d0       	rcall	.+412    	; 0x7092 <waves+0x992>
    6ef6:	d2 d4       	rcall	.+2468   	; 0x789c <LBMoveSprite+0x14>
    6ef8:	d6 d7       	rcall	.+4012   	; 0x7ea6 <append_tile_column+0x4>
    6efa:	d7 d7       	rcall	.+4014   	; 0x7eaa <append_tile_column+0x8>
    6efc:	d4 fe       	sbrs	r13, 4
    6efe:	e5 e9       	ldi	r30, 0x95	; 149
    6f00:	f9 f8       	.word	0xf8f9	; ????
    6f02:	f9 f5       	brne	.+126    	; 0x6f82 <waves+0x882>
    6f04:	eb e1       	ldi	r30, 0x1B	; 27
    6f06:	dd de       	rcall	.-582    	; 0x6cc2 <waves+0x5c2>
    6f08:	e0 e2       	ldi	r30, 0x20	; 32
    6f0a:	e4 e5       	ldi	r30, 0x54	; 84
    6f0c:	e6 e5       	ldi	r30, 0x56	; 86
    6f0e:	e4 e2       	ldi	r30, 0x24	; 36
    6f10:	de d9       	rcall	.-3140   	; 0x62ce <ProcessMusic+0x2c4>
    6f12:	d2 ca       	rjmp	.-2652   	; 0x64b8 <esmw+0x6>
    6f14:	c1 b7       	in	r28, 0x31	; 49
    6f16:	ac a2       	std	Y+36, r10	; 0x24
    6f18:	99 91       	ld	r25, Y+
    6f1a:	8a 86       	std	Y+10, r8	; 0x0a
    6f1c:	83 81       	ldd	r24, Z+3	; 0x03
    6f1e:	80 80       	ld	r8, Z
    6f20:	81 82       	std	Z+1, r8	; 0x01
    6f22:	83 85       	ldd	r24, Z+11	; 0x0b
    6f24:	86 88       	ldd	r8, Z+22	; 0x16
    6f26:	8a 8c       	ldd	r8, Y+26	; 0x1a
    6f28:	8d 8f       	std	Y+29, r24	; 0x1d
    6f2a:	90 92 93 95 	sts	0x9593, r9
    6f2e:	96 97       	sbiw	r26, 0x26	; 38
    6f30:	98 99       	sbic	0x13, 0	; 19
    6f32:	9a 9b       	sbis	0x13, 2	; 19
    6f34:	9b 9c       	mul	r9, r11
    6f36:	9d 9d       	mul	r25, r13
    6f38:	9d 9e       	mul	r9, r29
    6f3a:	9e 9e       	mul	r9, r30
    6f3c:	9f 9f       	mul	r25, r31
    6f3e:	9f 9f       	mul	r25, r31
    6f40:	9f 9f       	mul	r25, r31
    6f42:	9f 9e       	mul	r9, r31
    6f44:	9e 9e       	mul	r9, r30
    6f46:	9d 9d       	mul	r25, r13
    6f48:	9d 9c       	mul	r9, r13
    6f4a:	9b 9b       	sbis	0x13, 3	; 19
    6f4c:	9a 99       	sbic	0x13, 2	; 19
    6f4e:	98 97       	sbiw	r26, 0x28	; 40
    6f50:	96 95       	lsr	r25
    6f52:	93 92       	.word	0x9293	; ????
    6f54:	90 8f       	std	Z+24, r25	; 0x18
    6f56:	8d 8c       	ldd	r8, Y+29	; 0x1d
    6f58:	8a 88       	ldd	r8, Y+18	; 0x12
    6f5a:	86 85       	ldd	r24, Z+14	; 0x0e
    6f5c:	83 82       	std	Z+3, r8	; 0x03
    6f5e:	81 80       	ldd	r8, Z+1	; 0x01
    6f60:	80 81       	ld	r24, Z
    6f62:	83 86       	std	Z+11, r8	; 0x0b
    6f64:	8a 91       	ld	r24, -Y
    6f66:	99 a2       	std	Y+33, r9	; 0x21
    6f68:	ac b7       	in	r26, 0x3c	; 60
    6f6a:	c1 ca       	rjmp	.-2686   	; 0x64ee <esmw+0x3c>
    6f6c:	d2 d9       	rcall	.-3164   	; 0x6312 <ProcessMusic+0x308>
    6f6e:	de e2       	ldi	r29, 0x2E	; 46
    6f70:	e4 e5       	ldi	r30, 0x54	; 84
    6f72:	e6 e5       	ldi	r30, 0x56	; 86
    6f74:	e4 e2       	ldi	r30, 0x24	; 36
    6f76:	e0 de       	rcall	.-576    	; 0x6d38 <waves+0x638>
    6f78:	dd e1       	ldi	r29, 0x1D	; 29
    6f7a:	eb f5       	brvc	.+122    	; 0x6ff6 <waves+0x8f6>
    6f7c:	f9 f8       	.word	0xf8f9	; ????
    6f7e:	f9 00       	.word	0x00f9	; ????
    6f80:	07 08       	sbc	r0, r7
    6f82:	07 0b       	sbc	r16, r23
    6f84:	15 1f       	adc	r17, r21
    6f86:	23 22       	and	r2, r19
    6f88:	20 1e       	adc	r2, r16
    6f8a:	1c 1b       	sub	r17, r28
    6f8c:	1a 1b       	sub	r17, r26
    6f8e:	1c 1e       	adc	r1, r28
    6f90:	22 27       	eor	r18, r18
    6f92:	2e 36       	cpi	r18, 0x6E	; 110
    6f94:	3f 49       	sbci	r19, 0x9F	; 159
    6f96:	54 5e       	subi	r21, 0xE4	; 228
    6f98:	67 6f       	ori	r22, 0xF7	; 247
    6f9a:	76 7a       	andi	r23, 0xA6	; 166
    6f9c:	7e 7f       	andi	r23, 0xFE	; 254
    6f9e:	7f 7f       	andi	r23, 0xFF	; 255
    6fa0:	7f 7e       	andi	r23, 0xEF	; 239
    6fa2:	7d 7b       	andi	r23, 0xBD	; 189
    6fa4:	7a 78       	andi	r23, 0x8A	; 138
    6fa6:	76 74       	andi	r23, 0x46	; 70
    6fa8:	73 71       	andi	r23, 0x13	; 19
    6faa:	70 6e       	ori	r23, 0xE0	; 224
    6fac:	6d 6b       	ori	r22, 0xBD	; 189
    6fae:	6a 69       	ori	r22, 0x9A	; 154
    6fb0:	68 67       	ori	r22, 0x78	; 120
    6fb2:	66 65       	ori	r22, 0x56	; 86
    6fb4:	65 64       	ori	r22, 0x45	; 69
    6fb6:	64 63       	ori	r22, 0x34	; 52
    6fb8:	63 62       	ori	r22, 0x23	; 35
    6fba:	62 62       	ori	r22, 0x22	; 34
    6fbc:	61 61       	ori	r22, 0x11	; 17
    6fbe:	61 61       	ori	r22, 0x11	; 17
    6fc0:	61 61       	ori	r22, 0x11	; 17
    6fc2:	61 62       	ori	r22, 0x21	; 33
    6fc4:	62 62       	ori	r22, 0x22	; 34
    6fc6:	63 63       	ori	r22, 0x33	; 51
    6fc8:	63 64       	ori	r22, 0x43	; 67
    6fca:	65 65       	ori	r22, 0x55	; 85
    6fcc:	66 67       	ori	r22, 0x76	; 118
    6fce:	68 69       	ori	r22, 0x98	; 152
    6fd0:	6a 6b       	ori	r22, 0xBA	; 186
    6fd2:	6d 6e       	ori	r22, 0xED	; 237
    6fd4:	70 71       	andi	r23, 0x10	; 16
    6fd6:	73 74       	andi	r23, 0x43	; 67
    6fd8:	76 78       	andi	r23, 0x86	; 134
    6fda:	7a 7b       	andi	r23, 0xBA	; 186
    6fdc:	7d 7e       	andi	r23, 0xED	; 237
    6fde:	7f 7f       	andi	r23, 0xFF	; 255
    6fe0:	7f 7f       	andi	r23, 0xFF	; 255
    6fe2:	7e 7a       	andi	r23, 0xAE	; 174
    6fe4:	76 6f       	ori	r23, 0xF6	; 246
    6fe6:	67 5e       	subi	r22, 0xE7	; 231
    6fe8:	54 49       	sbci	r21, 0x94	; 148
    6fea:	3f 36       	cpi	r19, 0x6F	; 111
    6fec:	2e 27       	eor	r18, r30
    6fee:	22 1e       	adc	r2, r18
    6ff0:	1c 1b       	sub	r17, r28
    6ff2:	1a 1b       	sub	r17, r26
    6ff4:	1c 1e       	adc	r1, r28
    6ff6:	20 22       	and	r2, r16
    6ff8:	23 1f       	adc	r18, r19
    6ffa:	15 0b       	sbc	r17, r21
    6ffc:	07 08       	sbc	r0, r7
    6ffe:	07 00       	.word	0x0007	; ????
    7000:	1f 31       	cpi	r17, 0x1F	; 31
    7002:	3d 44       	sbci	r19, 0x4D	; 77
    7004:	4e 53       	subi	r20, 0x3E	; 62
    7006:	54 56       	subi	r21, 0x64	; 100
    7008:	5a 5f       	subi	r21, 0xFA	; 250
    700a:	64 69       	ori	r22, 0x94	; 148
    700c:	6e 74       	andi	r22, 0x4E	; 78
    700e:	76 79       	andi	r23, 0x96	; 150
    7010:	7c 7f       	andi	r23, 0xFC	; 252
    7012:	7f 7f       	andi	r23, 0xFF	; 255
    7014:	7f 7f       	andi	r23, 0xFF	; 255
    7016:	7f 7f       	andi	r23, 0xFF	; 255
    7018:	7f 7f       	andi	r23, 0xFF	; 255
    701a:	7f 7f       	andi	r23, 0xFF	; 255
    701c:	7f 7f       	andi	r23, 0xFF	; 255
    701e:	7f 7f       	andi	r23, 0xFF	; 255
    7020:	7f 7f       	andi	r23, 0xFF	; 255
    7022:	7f 7f       	andi	r23, 0xFF	; 255
    7024:	7f 7f       	andi	r23, 0xFF	; 255
    7026:	7f 7f       	andi	r23, 0xFF	; 255
    7028:	7f 7f       	andi	r23, 0xFF	; 255
    702a:	7f 7f       	andi	r23, 0xFF	; 255
    702c:	7f 7f       	andi	r23, 0xFF	; 255
    702e:	7f 7f       	andi	r23, 0xFF	; 255
    7030:	7f 7f       	andi	r23, 0xFF	; 255
    7032:	7f 7f       	andi	r23, 0xFF	; 255
    7034:	7f 7f       	andi	r23, 0xFF	; 255
    7036:	7f 7f       	andi	r23, 0xFF	; 255
    7038:	7f 7f       	andi	r23, 0xFF	; 255
    703a:	7f 7f       	andi	r23, 0xFF	; 255
    703c:	7f 7f       	andi	r23, 0xFF	; 255
    703e:	7f 7f       	andi	r23, 0xFF	; 255
    7040:	7f 7f       	andi	r23, 0xFF	; 255
    7042:	7f 7f       	andi	r23, 0xFF	; 255
    7044:	7f 7f       	andi	r23, 0xFF	; 255
    7046:	7f 7f       	andi	r23, 0xFF	; 255
    7048:	7f 7f       	andi	r23, 0xFF	; 255
    704a:	7f 7f       	andi	r23, 0xFF	; 255
    704c:	7f 7f       	andi	r23, 0xFF	; 255
    704e:	7f 7f       	andi	r23, 0xFF	; 255
    7050:	7f 7f       	andi	r23, 0xFF	; 255
    7052:	7f 7f       	andi	r23, 0xFF	; 255
    7054:	7f 7f       	andi	r23, 0xFF	; 255
    7056:	7f 7f       	andi	r23, 0xFF	; 255
    7058:	7f 7f       	andi	r23, 0xFF	; 255
    705a:	7f 7f       	andi	r23, 0xFF	; 255
    705c:	7f 7f       	andi	r23, 0xFF	; 255
    705e:	7f 7f       	andi	r23, 0xFF	; 255
    7060:	7f 7f       	andi	r23, 0xFF	; 255
    7062:	7f 7f       	andi	r23, 0xFF	; 255
    7064:	7f 7f       	andi	r23, 0xFF	; 255
    7066:	7f 7f       	andi	r23, 0xFF	; 255
    7068:	7f 7f       	andi	r23, 0xFF	; 255
    706a:	7f 7f       	andi	r23, 0xFF	; 255
    706c:	7f 7f       	andi	r23, 0xFF	; 255
    706e:	7f 7f       	andi	r23, 0xFF	; 255
    7070:	7f 7f       	andi	r23, 0xFF	; 255
    7072:	7f 7f       	andi	r23, 0xFF	; 255
    7074:	7f 7f       	andi	r23, 0xFF	; 255
    7076:	7f 7f       	andi	r23, 0xFF	; 255
    7078:	7f 7f       	andi	r23, 0xFF	; 255
    707a:	7f 7c       	andi	r23, 0xCF	; 207
    707c:	78 71       	andi	r23, 0x18	; 24
    707e:	68 4c       	sbci	r22, 0xC8	; 200
    7080:	2c 1c       	adc	r2, r12
    7082:	12 0c       	add	r1, r2
    7084:	0a 0b       	sbc	r16, r26
    7086:	0a 05       	cpc	r16, r10
    7088:	fd f3       	brhs	.-2      	; 0x7088 <waves+0x988>
    708a:	e9 df       	rcall	.-46     	; 0x705e <waves+0x95e>
    708c:	d4 ca       	rjmp	.-2648   	; 0x6636 <steptable+0x12e>
    708e:	c0 b7       	in	r28, 0x30	; 48
    7090:	ae a6       	std	Y+46, r10	; 0x2e
    7092:	9e 97       	sbiw	r26, 0x2e	; 46
    7094:	91 8b       	std	Z+17, r25	; 0x11
    7096:	86 85       	ldd	r24, Z+14	; 0x0e
    7098:	82 80       	ldd	r8, Z+2	; 0x02
    709a:	80 80       	ld	r8, Z
    709c:	80 80       	ld	r8, Z
    709e:	80 80       	ld	r8, Z
    70a0:	80 80       	ld	r8, Z
    70a2:	80 80       	ld	r8, Z
    70a4:	80 80       	ld	r8, Z
    70a6:	80 80       	ld	r8, Z
    70a8:	80 80       	ld	r8, Z
    70aa:	80 80       	ld	r8, Z
    70ac:	80 80       	ld	r8, Z
    70ae:	80 80       	ld	r8, Z
    70b0:	80 80       	ld	r8, Z
    70b2:	80 80       	ld	r8, Z
    70b4:	80 80       	ld	r8, Z
    70b6:	80 80       	ld	r8, Z
    70b8:	80 80       	ld	r8, Z
    70ba:	80 80       	ld	r8, Z
    70bc:	80 80       	ld	r8, Z
    70be:	80 80       	ld	r8, Z
    70c0:	80 80       	ld	r8, Z
    70c2:	80 80       	ld	r8, Z
    70c4:	80 80       	ld	r8, Z
    70c6:	80 80       	ld	r8, Z
    70c8:	80 80       	ld	r8, Z
    70ca:	80 80       	ld	r8, Z
    70cc:	80 80       	ld	r8, Z
    70ce:	80 80       	ld	r8, Z
    70d0:	80 80       	ld	r8, Z
    70d2:	80 80       	ld	r8, Z
    70d4:	80 80       	ld	r8, Z
    70d6:	80 80       	ld	r8, Z
    70d8:	80 80       	ld	r8, Z
    70da:	80 80       	ld	r8, Z
    70dc:	80 80       	ld	r8, Z
    70de:	80 80       	ld	r8, Z
    70e0:	80 80       	ld	r8, Z
    70e2:	80 80       	ld	r8, Z
    70e4:	80 80       	ld	r8, Z
    70e6:	80 80       	ld	r8, Z
    70e8:	80 80       	ld	r8, Z
    70ea:	80 80       	ld	r8, Z
    70ec:	80 80       	ld	r8, Z
    70ee:	80 80       	ld	r8, Z
    70f0:	80 80       	ld	r8, Z
    70f2:	80 80       	ld	r8, Z
    70f4:	80 87       	std	Z+8, r24	; 0x08
    70f6:	91 9d       	mul	r25, r1
    70f8:	ac c4       	rjmp	.+2392   	; 0x7a52 <init_player_state+0x8a>
    70fa:	cb d4       	rcall	.+2454   	; 0x7a92 <init_player_state+0xca>
    70fc:	dd f2       	brhs	.-74     	; 0x70b4 <waves+0x9b4>
    70fe:	fa fa       	.word	0xfafa	; ????

00007100 <RestoreBackground>:
	unsigned char free_tile_index, userRamTilesCount=0,userRamTilesCount_tmp=0;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=userRamTilesCount;i<free_tile_index;i++){
    7100:	80 91 db 0c 	lds	r24, 0x0CDB
    7104:	90 91 69 0d 	lds	r25, 0x0D69
    7108:	89 17       	cp	r24, r25
    710a:	78 f4       	brcc	.+30     	; 0x712a <RestoreBackground+0x2a>
			//vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
			*ram_tiles_restore[i].addr=ram_tiles_restore[i].tileIndex;
    710c:	e8 2f       	mov	r30, r24
    710e:	f0 e0       	ldi	r31, 0x00	; 0
    7110:	9f 01       	movw	r18, r30
    7112:	22 0f       	add	r18, r18
    7114:	33 1f       	adc	r19, r19
    7116:	e2 0f       	add	r30, r18
    7118:	f3 1f       	adc	r31, r19
    711a:	e6 5c       	subi	r30, 0xC6	; 198
    711c:	f3 4f       	sbci	r31, 0xF3	; 243
    711e:	a0 81       	ld	r26, Z
    7120:	b1 81       	ldd	r27, Z+1	; 0x01
    7122:	92 81       	ldd	r25, Z+2	; 0x02
    7124:	9c 93       	st	X, r25
	unsigned char free_tile_index, userRamTilesCount=0,userRamTilesCount_tmp=0;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=userRamTilesCount;i<free_tile_index;i++){
    7126:	8f 5f       	subi	r24, 0xFF	; 255
    7128:	ed cf       	rjmp	.-38     	; 0x7104 <RestoreBackground+0x4>
			//vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
			*ram_tiles_restore[i].addr=ram_tiles_restore[i].tileIndex;
		}	
	}
    712a:	08 95       	ret

0000712c <ProcessSprites>:
		}

	}
	*/

	void ProcessSprites(){
    712c:	2f 92       	push	r2
    712e:	3f 92       	push	r3
    7130:	4f 92       	push	r4
    7132:	5f 92       	push	r5
    7134:	6f 92       	push	r6
    7136:	7f 92       	push	r7
    7138:	8f 92       	push	r8
    713a:	9f 92       	push	r9
    713c:	af 92       	push	r10
    713e:	bf 92       	push	r11
    7140:	cf 92       	push	r12
    7142:	df 92       	push	r13
    7144:	ef 92       	push	r14
    7146:	ff 92       	push	r15
    7148:	0f 93       	push	r16
    714a:	1f 93       	push	r17
    714c:	cf 93       	push	r28
    714e:	df 93       	push	r29
    7150:	00 d0       	rcall	.+0      	; 0x7152 <ProcessSprites+0x26>
    7152:	00 d0       	rcall	.+0      	; 0x7154 <ProcessSprites+0x28>
    7154:	cd b7       	in	r28, 0x3d	; 61
    7156:	de b7       	in	r29, 0x3e	; 62
	
		unsigned char i,bx,by,dx,dy,bt,x,y,tx=1,ty=1,wx,wy;
		unsigned int ramPtr,ssx,ssy;

		if(!spritesOn) return;
    7158:	80 91 00 05 	lds	r24, 0x0500
    715c:	88 23       	and	r24, r24
    715e:	09 f4       	brne	.+2      	; 0x7162 <ProcessSprites+0x36>
    7160:	e0 c0       	rjmp	.+448    	; 0x7322 <ProcessSprites+0x1f6>

		userRamTilesCount=userRamTilesCount_tmp;
    7162:	80 91 da 0c 	lds	r24, 0x0CDA
    7166:	80 93 db 0c 	sts	0x0CDB, r24
		free_tile_index=userRamTilesCount;
    716a:	80 93 69 0d 	sts	0x0D69, r24
    716e:	e2 e0       	ldi	r30, 0x02	; 2
    7170:	ce 2e       	mov	r12, r30
    7172:	e5 e0       	ldi	r30, 0x05	; 5
    7174:	de 2e       	mov	r13, r30
	
		for(i=0;i<MAX_SPRITES;i++){
    7176:	71 2c       	mov	r7, r1
			bx=sprites[i].x;
    7178:	f6 01       	movw	r30, r12
    717a:	20 81       	ld	r18, Z

			if(bx!=(SCREEN_TILES_H*TILE_WIDTH)){
    717c:	20 3e       	cpi	r18, 0xE0	; 224
    717e:	09 f4       	brne	.+2      	; 0x7182 <ProcessSprites+0x56>
    7180:	b1 c0       	rjmp	.+354    	; 0x72e4 <ProcessSprites+0x1b8>
				//get tile's screen section offsets
				
				#if SCROLLING == 1
					ssx=sprites[i].x+Screen.scrollX;
    7182:	80 91 9c 0c 	lds	r24, 0x0C9C
    7186:	90 e0       	ldi	r25, 0x00	; 0
    7188:	82 0f       	add	r24, r18
    718a:	91 1d       	adc	r25, r1
					ssy=sprites[i].y+Screen.scrollY;
    718c:	41 81       	ldd	r20, Z+1	; 0x01
    718e:	20 91 9d 0c 	lds	r18, 0x0C9D
    7192:	30 e0       	ldi	r19, 0x00	; 0
    7194:	24 0f       	add	r18, r20
    7196:	31 1d       	adc	r19, r1

				tx=1;
				ty=1;

				//get the BG tiles that are overlapped by the sprite
				bx=ssx>>3;
    7198:	ac 01       	movw	r20, r24
    719a:	73 e0       	ldi	r23, 0x03	; 3
    719c:	56 95       	lsr	r21
    719e:	47 95       	ror	r20
    71a0:	7a 95       	dec	r23
    71a2:	e1 f7       	brne	.-8      	; 0x719c <ProcessSprites+0x70>
    71a4:	64 2e       	mov	r6, r20
				dx=ssx&0x7;
    71a6:	87 70       	andi	r24, 0x07	; 7
				if(dx>0) tx++;
    71a8:	11 f0       	breq	.+4      	; 0x71ae <ProcessSprites+0x82>
    71aa:	92 e0       	ldi	r25, 0x02	; 2
    71ac:	01 c0       	rjmp	.+2      	; 0x71b0 <ProcessSprites+0x84>
   				#else
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
    71ae:	91 e0       	ldi	r25, 0x01	; 1
    71b0:	99 83       	std	Y+1, r25	; 0x01
				dx=ssx&0x7;
				if(dx>0) tx++;

				//by=ssy>>3;
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
    71b2:	a9 01       	movw	r20, r18
    71b4:	63 e0       	ldi	r22, 0x03	; 3
    71b6:	56 95       	lsr	r21
    71b8:	47 95       	ror	r20
    71ba:	6a 95       	dec	r22
    71bc:	e1 f7       	brne	.-8      	; 0x71b6 <ProcessSprites+0x8a>
    71be:	54 2e       	mov	r5, r20
				dy=ssy%TILE_HEIGHT;
    71c0:	27 70       	andi	r18, 0x07	; 7
				if(dy>0) ty++;			
    71c2:	19 f0       	breq	.+6      	; 0x71ca <ProcessSprites+0x9e>
    71c4:	52 e0       	ldi	r21, 0x02	; 2
    71c6:	35 2e       	mov	r3, r21
    71c8:	02 c0       	rjmp	.+4      	; 0x71ce <ProcessSprites+0xa2>
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
				ty=1;
    71ca:	33 24       	eor	r3, r3
    71cc:	33 94       	inc	r3
								bt=free_tile_index;
								free_tile_index++;
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    71ce:	30 e0       	ldi	r19, 0x00	; 0
    71d0:	32 2f       	mov	r19, r18
    71d2:	22 27       	eor	r18, r18
    71d4:	f9 01       	movw	r30, r18
    71d6:	e8 0f       	add	r30, r24
    71d8:	f1 1d       	adc	r31, r1
    71da:	fc 83       	std	Y+4, r31	; 0x04
    71dc:	eb 83       	std	Y+3, r30	; 0x03
    71de:	e1 2c       	mov	r14, r1
    71e0:	f1 2c       	mov	r15, r1
    71e2:	be 2c       	mov	r11, r14
    71e4:	aa 24       	eor	r10, r10
    71e6:	26 2c       	mov	r2, r6
    71e8:	45 2c       	mov	r4, r5
    71ea:	4e 0c       	add	r4, r14
								    wy-=(VRAM_TILES_V*2);
							    }else if(wy>=VRAM_TILES_V){
							    	wy-=VRAM_TILES_V;
							    }
                            #else
                                if(wy>=(Screen.scrollHeight*2)){
    71ec:	84 2c       	mov	r8, r4
    71ee:	91 2c       	mov	r9, r1
    71f0:	84 2d       	mov	r24, r4
    71f2:	20 91 9e 0c 	lds	r18, 0x0C9E
    71f6:	42 2f       	mov	r20, r18
    71f8:	50 e0       	ldi	r21, 0x00	; 0
    71fa:	44 0f       	add	r20, r20
    71fc:	55 1f       	adc	r21, r21
    71fe:	84 16       	cp	r8, r20
    7200:	95 06       	cpc	r9, r21
    7202:	14 f0       	brlt	.+4      	; 0x7208 <ProcessSprites+0xdc>
								    wy-=(Screen.scrollHeight*2);
    7204:	22 0f       	add	r18, r18
    7206:	03 c0       	rjmp	.+6      	; 0x720e <ProcessSprites+0xe2>
							    }else if(wy>=Screen.scrollHeight){
    7208:	42 16       	cp	r4, r18
    720a:	10 f0       	brcs	.+4      	; 0x7210 <ProcessSprites+0xe4>
							    	wy-=Screen.scrollHeight;
    720c:	84 2d       	mov	r24, r4
    720e:	82 1b       	sub	r24, r18
							    }
                            #endif
							if(wx>=VRAM_TILES_H)wx-=VRAM_TILES_H; //should always be 32
    7210:	ff e1       	ldi	r31, 0x1F	; 31
    7212:	f2 15       	cp	r31, r2
    7214:	18 f4       	brcc	.+6      	; 0x721c <ProcessSprites+0xf0>
    7216:	00 ee       	ldi	r16, 0xE0	; 224
    7218:	02 0d       	add	r16, r2
    721a:	01 c0       	rjmp	.+2      	; 0x721e <ProcessSprites+0xf2>
    721c:	02 2d       	mov	r16, r2

							#if SCROLLING == 0
								ramPtr=(wy*VRAM_TILES_H)+wx;
							#else

								ramPtr=((wy>>3)*256)+(wx*8)+(wy&7);	
    721e:	28 2f       	mov	r18, r24
    7220:	26 95       	lsr	r18
    7222:	26 95       	lsr	r18
    7224:	26 95       	lsr	r18
    7226:	10 e0       	ldi	r17, 0x00	; 0
    7228:	40 e2       	ldi	r20, 0x20	; 32
    722a:	24 9f       	mul	r18, r20
    722c:	00 0d       	add	r16, r0
    722e:	11 1d       	adc	r17, r1
    7230:	11 24       	eor	r1, r1
    7232:	23 e0       	ldi	r18, 0x03	; 3
    7234:	00 0f       	add	r16, r16
    7236:	11 1f       	adc	r17, r17
    7238:	2a 95       	dec	r18
    723a:	e1 f7       	brne	.-8      	; 0x7234 <ProcessSprites+0x108>
    723c:	87 70       	andi	r24, 0x07	; 7
    723e:	08 0f       	add	r16, r24
    7240:	11 1d       	adc	r17, r1

							#endif

							bt=vram[ramPtr];						
    7242:	00 50       	subi	r16, 0x00	; 0
    7244:	1f 4f       	sbci	r17, 0xFF	; 255
    7246:	f8 01       	movw	r30, r16
    7248:	70 81       	ld	r23, Z

							if( ((bt>=RAM_TILES_COUNT) | (bt<userRamTilesCount)) && (free_tile_index < RAM_TILES_COUNT) ){ //if no ram free ignore tile
    724a:	81 e0       	ldi	r24, 0x01	; 1
    724c:	7c 31       	cpi	r23, 0x1C	; 28
    724e:	08 f4       	brcc	.+2      	; 0x7252 <ProcessSprites+0x126>
    7250:	80 e0       	ldi	r24, 0x00	; 0
    7252:	21 e0       	ldi	r18, 0x01	; 1
    7254:	30 91 db 0c 	lds	r19, 0x0CDB
    7258:	73 17       	cp	r23, r19
    725a:	18 f0       	brcs	.+6      	; 0x7262 <ProcessSprites+0x136>
    725c:	20 e0       	ldi	r18, 0x00	; 0
    725e:	88 23       	and	r24, r24
    7260:	51 f1       	breq	.+84     	; 0x72b6 <ProcessSprites+0x18a>
    7262:	60 91 69 0d 	lds	r22, 0x0D69
    7266:	6c 31       	cpi	r22, 0x1C	; 28
    7268:	20 f5       	brcc	.+72     	; 0x72b2 <ProcessSprites+0x186>
								if( bt>=RAM_TILES_COUNT ){
    726a:	88 23       	and	r24, r24
    726c:	31 f0       	breq	.+12     	; 0x727a <ProcessSprites+0x14e>
									//tile is mapped to flash. Copy it to next free RAM tile.
									CopyFlashTile(bt-RAM_TILES_COUNT,free_tile_index);
    726e:	84 ee       	ldi	r24, 0xE4	; 228
    7270:	87 0f       	add	r24, r23
    7272:	7a 83       	std	Y+2, r23	; 0x02
    7274:	0e 94 b8 28 	call	0x5170	; 0x5170 <CopyFlashTile>
    7278:	06 c0       	rjmp	.+12     	; 0x7286 <ProcessSprites+0x15a>
								}else if(bt<userRamTilesCount){
    727a:	22 23       	and	r18, r18
    727c:	29 f0       	breq	.+10     	; 0x7288 <ProcessSprites+0x15c>
									//tile is a user ram tile. Copy it to next free RAM tile.
									CopyRamTile(bt,free_tile_index);
    727e:	87 2f       	mov	r24, r23
    7280:	7a 83       	std	Y+2, r23	; 0x02
    7282:	0e 94 47 29 	call	0x528e	; 0x528e <CopyRamTile>
    7286:	7a 81       	ldd	r23, Y+2	; 0x02
								}
								ram_tiles_restore[free_tile_index].addr=(&vram[ramPtr]);
    7288:	80 91 69 0d 	lds	r24, 0x0D69
    728c:	e8 2f       	mov	r30, r24
    728e:	f0 e0       	ldi	r31, 0x00	; 0
    7290:	9f 01       	movw	r18, r30
    7292:	22 0f       	add	r18, r18
    7294:	33 1f       	adc	r19, r19
    7296:	e2 0f       	add	r30, r18
    7298:	f3 1f       	adc	r31, r19
    729a:	e6 5c       	subi	r30, 0xC6	; 198
    729c:	f3 4f       	sbci	r31, 0xF3	; 243
    729e:	11 83       	std	Z+1, r17	; 0x01
    72a0:	00 83       	st	Z, r16
								ram_tiles_restore[free_tile_index].tileIndex=bt;
    72a2:	72 83       	std	Z+2, r23	; 0x02
								vram[ramPtr]=free_tile_index;
    72a4:	f8 01       	movw	r30, r16
    72a6:	80 83       	st	Z, r24
								bt=free_tile_index;
								free_tile_index++;
    72a8:	21 e0       	ldi	r18, 0x01	; 1
    72aa:	28 0f       	add	r18, r24
    72ac:	20 93 69 0d 	sts	0x0D69, r18
									CopyRamTile(bt,free_tile_index);
								}
								ram_tiles_restore[free_tile_index].addr=(&vram[ramPtr]);
								ram_tiles_restore[free_tile_index].tileIndex=bt;
								vram[ramPtr]=free_tile_index;
								bt=free_tile_index;
    72b0:	78 2f       	mov	r23, r24
								free_tile_index++;
							}
				
							if(bt<RAM_TILES_COUNT){				
    72b2:	7c 31       	cpi	r23, 0x1C	; 28
    72b4:	38 f4       	brcc	.+14     	; 0x72c4 <ProcessSprites+0x198>
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    72b6:	2b 81       	ldd	r18, Y+3	; 0x03
    72b8:	3c 81       	ldd	r19, Y+4	; 0x04
    72ba:	a5 01       	movw	r20, r10
    72bc:	67 2f       	mov	r22, r23
    72be:	87 2d       	mov	r24, r7
    72c0:	0e 94 d4 29 	call	0x53a8	; 0x53a8 <BlitSprite>
    72c4:	ff ef       	ldi	r31, 0xFF	; 255
    72c6:	af 1a       	sub	r10, r31
    72c8:	bf 0a       	sbc	r11, r31
    72ca:	23 94       	inc	r2
    72cc:	82 2d       	mov	r24, r2
    72ce:	86 19       	sub	r24, r6
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){

					for(x=0;x<tx;x++){
    72d0:	99 81       	ldd	r25, Y+1	; 0x01
    72d2:	89 17       	cp	r24, r25
    72d4:	08 f4       	brcc	.+2      	; 0x72d8 <ProcessSprites+0x1ac>
    72d6:	8c cf       	rjmp	.-232    	; 0x71f0 <ProcessSprites+0xc4>
    72d8:	ef ef       	ldi	r30, 0xFF	; 255
    72da:	ee 1a       	sub	r14, r30
    72dc:	fe 0a       	sbc	r15, r30
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){
    72de:	e3 14       	cp	r14, r3
    72e0:	08 f4       	brcc	.+2      	; 0x72e4 <ProcessSprites+0x1b8>
    72e2:	7f cf       	rjmp	.-258    	; 0x71e2 <ProcessSprites+0xb6>
		if(!spritesOn) return;

		userRamTilesCount=userRamTilesCount_tmp;
		free_tile_index=userRamTilesCount;
	
		for(i=0;i<MAX_SPRITES;i++){
    72e4:	73 94       	inc	r7
    72e6:	f4 e0       	ldi	r31, 0x04	; 4
    72e8:	cf 0e       	add	r12, r31
    72ea:	d1 1c       	adc	r13, r1
    72ec:	4e e0       	ldi	r20, 0x0E	; 14
    72ee:	74 12       	cpse	r7, r20
    72f0:	43 cf       	rjmp	.-378    	; 0x7178 <ProcessSprites+0x4c>


		//restore BG tiles
		RestoreBackground();

	}
    72f2:	0f 90       	pop	r0
    72f4:	0f 90       	pop	r0
    72f6:	0f 90       	pop	r0
    72f8:	0f 90       	pop	r0
    72fa:	df 91       	pop	r29
    72fc:	cf 91       	pop	r28
    72fe:	1f 91       	pop	r17
    7300:	0f 91       	pop	r16
    7302:	ff 90       	pop	r15
    7304:	ef 90       	pop	r14
    7306:	df 90       	pop	r13
    7308:	cf 90       	pop	r12
    730a:	bf 90       	pop	r11
    730c:	af 90       	pop	r10
    730e:	9f 90       	pop	r9
    7310:	8f 90       	pop	r8
    7312:	7f 90       	pop	r7
    7314:	6f 90       	pop	r6
    7316:	5f 90       	pop	r5
    7318:	4f 90       	pop	r4
    731a:	3f 90       	pop	r3
    731c:	2f 90       	pop	r2
			}//	if(bx<(SCREEN_TILES_H*TILE_WIDTH))		
		}


		//restore BG tiles
		RestoreBackground();
    731e:	0c 94 80 38 	jmp	0x7100	; 0x7100 <RestoreBackground>

	}
    7322:	0f 90       	pop	r0
    7324:	0f 90       	pop	r0
    7326:	0f 90       	pop	r0
    7328:	0f 90       	pop	r0
    732a:	df 91       	pop	r29
    732c:	cf 91       	pop	r28
    732e:	1f 91       	pop	r17
    7330:	0f 91       	pop	r16
    7332:	ff 90       	pop	r15
    7334:	ef 90       	pop	r14
    7336:	df 90       	pop	r13
    7338:	cf 90       	pop	r12
    733a:	bf 90       	pop	r11
    733c:	af 90       	pop	r10
    733e:	9f 90       	pop	r9
    7340:	8f 90       	pop	r8
    7342:	7f 90       	pop	r7
    7344:	6f 90       	pop	r6
    7346:	5f 90       	pop	r5
    7348:	4f 90       	pop	r4
    734a:	3f 90       	pop	r3
    734c:	2f 90       	pop	r2
    734e:	08 95       	ret

00007350 <Scroll>:

	#if SCROLLING == 1
		//Scroll the screen by the relative amount specified (+/-)
		//This function handles screen wrapping on the Y axis if VRAM_TILES_V is less than 32
		void Scroll(char dx,char dy){
		Screen.scrollY+=dy;
    7350:	90 91 9d 0c 	lds	r25, 0x0C9D
    7354:	96 0f       	add	r25, r22
    7356:	90 93 9d 0c 	sts	0x0C9D, r25
		Screen.scrollX+=dx;
    735a:	20 91 9c 0c 	lds	r18, 0x0C9C
    735e:	82 0f       	add	r24, r18
    7360:	80 93 9c 0c 	sts	0x0C9C, r24

		if(Screen.scrollHeight<32){
    7364:	80 91 9e 0c 	lds	r24, 0x0C9E
    7368:	80 32       	cpi	r24, 0x20	; 32
    736a:	b0 f4       	brcc	.+44     	; 0x7398 <Scroll+0x48>

			if(Screen.scrollY>=(Screen.scrollHeight*TILE_HEIGHT)){
    736c:	29 2f       	mov	r18, r25
    736e:	30 e0       	ldi	r19, 0x00	; 0
    7370:	78 e0       	ldi	r23, 0x08	; 8
    7372:	87 9f       	mul	r24, r23
    7374:	a0 01       	movw	r20, r0
    7376:	11 24       	eor	r1, r1
    7378:	24 17       	cp	r18, r20
    737a:	35 07       	cpc	r19, r21
    737c:	6c f0       	brlt	.+26     	; 0x7398 <Scroll+0x48>
				if(dy>=0){	
    737e:	67 fd       	sbrc	r22, 7
    7380:	05 c0       	rjmp	.+10     	; 0x738c <Scroll+0x3c>
					Screen.scrollY=(Screen.scrollY-(Screen.scrollHeight*TILE_HEIGHT));
    7382:	28 ef       	ldi	r18, 0xF8	; 248
    7384:	82 9f       	mul	r24, r18
    7386:	90 0d       	add	r25, r0
    7388:	11 24       	eor	r1, r1
    738a:	04 c0       	rjmp	.+8      	; 0x7394 <Scroll+0x44>
				}else{
					Screen.scrollY=((Screen.scrollHeight*TILE_HEIGHT)-1)-(0xff-Screen.scrollY);
    738c:	78 e0       	ldi	r23, 0x08	; 8
    738e:	87 9f       	mul	r24, r23
    7390:	90 0d       	add	r25, r0
    7392:	11 24       	eor	r1, r1
    7394:	90 93 9d 0c 	sts	0x0C9D, r25
    7398:	08 95       	ret

0000739a <InitializeVideoMode>:
		#endif	
	}


	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){
    739a:	e2 e0       	ldi	r30, 0x02	; 2
    739c:	f5 e0       	ldi	r31, 0x05	; 5

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
			sprites[i].x=(SCREEN_TILES_H*TILE_WIDTH);		
    739e:	80 ee       	ldi	r24, 0xE0	; 224
    73a0:	80 83       	st	Z, r24
    73a2:	34 96       	adiw	r30, 0x04	; 4

	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
    73a4:	95 e0       	ldi	r25, 0x05	; 5
    73a6:	ea 33       	cpi	r30, 0x3A	; 58
    73a8:	f9 07       	cpc	r31, r25
    73aa:	d1 f7       	brne	.-12     	; 0x73a0 <InitializeVideoMode+0x6>
		
		#if SCROLLING == 1
		//	for(int i=0;i<(OVERLAY_LINES*VRAM_TILES_H);i++){
		//		overlay_vram[i]=RAM_TILES_COUNT;
		//	}
			Screen.scrollHeight=VRAM_TILES_V;
    73ac:	80 e2       	ldi	r24, 0x20	; 32
    73ae:	80 93 9e 0c 	sts	0x0C9E, r24
			Screen.overlayHeight=0;
    73b2:	10 92 99 0c 	sts	0x0C99, r1
    73b6:	08 95       	ret

000073b8 <DrawMap>:



//Draws a map of tile at the specified position
#if VRAM_ADDR_SIZE == 1
	void DrawMap(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
    73b8:	4f 92       	push	r4
    73ba:	5f 92       	push	r5
    73bc:	6f 92       	push	r6
    73be:	7f 92       	push	r7
    73c0:	8f 92       	push	r8
    73c2:	9f 92       	push	r9
    73c4:	af 92       	push	r10
    73c6:	bf 92       	push	r11
    73c8:	cf 92       	push	r12
    73ca:	df 92       	push	r13
    73cc:	ef 92       	push	r14
    73ce:	ff 92       	push	r15
    73d0:	0f 93       	push	r16
    73d2:	1f 93       	push	r17
    73d4:	cf 93       	push	r28
    73d6:	df 93       	push	r29
    73d8:	68 2e       	mov	r6, r24
    73da:	56 2e       	mov	r5, r22
    73dc:	7a 01       	movw	r14, r20
		//unsigned char i;
		u8 mapWidth=pgm_read_byte(&(map[0]));
    73de:	fa 01       	movw	r30, r20
    73e0:	74 90       	lpm	r7, Z
		u8 mapHeight=pgm_read_byte(&(map[1]));
    73e2:	31 96       	adiw	r30, 0x01	; 1
    73e4:	84 90       	lpm	r8, Z
    73e6:	c7 2c       	mov	r12, r7
    73e8:	d1 2c       	mov	r13, r1
		
		for(u8 dy=0;dy<mapHeight;dy++){
    73ea:	00 e0       	ldi	r16, 0x00	; 0
    73ec:	10 e0       	ldi	r17, 0x00	; 0
    73ee:	91 2c       	mov	r9, r1
    73f0:	98 14       	cp	r9, r8
    73f2:	f1 f0       	breq	.+60     	; 0x7430 <DrawMap+0x78>
    73f4:	c0 e0       	ldi	r28, 0x00	; 0
    73f6:	d0 e0       	ldi	r29, 0x00	; 0
    73f8:	58 01       	movw	r10, r16
    73fa:	f2 e0       	ldi	r31, 0x02	; 2
    73fc:	af 0e       	add	r10, r31
    73fe:	b1 1c       	adc	r11, r1
    7400:	49 2c       	mov	r4, r9
    7402:	45 0c       	add	r4, r5
			for(u8 dx=0;dx<mapWidth;dx++){			
    7404:	c7 15       	cp	r28, r7
    7406:	80 f4       	brcc	.+32     	; 0x7428 <DrawMap+0x70>
    7408:	95 01       	movw	r18, r10
    740a:	2c 0f       	add	r18, r28
    740c:	3d 1f       	adc	r19, r29
    740e:	f7 01       	movw	r30, r14
    7410:	e2 0f       	add	r30, r18
    7412:	f3 1f       	adc	r31, r19
				SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
    7414:	24 91       	lpm	r18, Z
    7416:	42 2f       	mov	r20, r18
    7418:	50 e0       	ldi	r21, 0x00	; 0
    741a:	64 2d       	mov	r22, r4
    741c:	8c 2f       	mov	r24, r28
    741e:	86 0d       	add	r24, r6
    7420:	0e 94 0b 2c 	call	0x5816	; 0x5816 <SetTile>
    7424:	21 96       	adiw	r28, 0x01	; 1
    7426:	ee cf       	rjmp	.-36     	; 0x7404 <DrawMap+0x4c>
	void DrawMap(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
		//unsigned char i;
		u8 mapWidth=pgm_read_byte(&(map[0]));
		u8 mapHeight=pgm_read_byte(&(map[1]));
		
		for(u8 dy=0;dy<mapHeight;dy++){
    7428:	93 94       	inc	r9
    742a:	0c 0d       	add	r16, r12
    742c:	1d 1d       	adc	r17, r13
    742e:	e0 cf       	rjmp	.-64     	; 0x73f0 <DrawMap+0x38>
			for(u8 dx=0;dx<mapWidth;dx++){			
				SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
			}
		}

	}
    7430:	df 91       	pop	r29
    7432:	cf 91       	pop	r28
    7434:	1f 91       	pop	r17
    7436:	0f 91       	pop	r16
    7438:	ff 90       	pop	r15
    743a:	ef 90       	pop	r14
    743c:	df 90       	pop	r13
    743e:	cf 90       	pop	r12
    7440:	bf 90       	pop	r11
    7442:	af 90       	pop	r10
    7444:	9f 90       	pop	r9
    7446:	8f 90       	pop	r8
    7448:	7f 90       	pop	r7
    744a:	6f 90       	pop	r6
    744c:	5f 90       	pop	r5
    744e:	4f 90       	pop	r4
    7450:	08 95       	ret

00007452 <PrintByte>:
	}
		
}

//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
    7452:	df 92       	push	r13
    7454:	ef 92       	push	r14
    7456:	ff 92       	push	r15
    7458:	0f 93       	push	r16
    745a:	1f 93       	push	r17
    745c:	cf 93       	push	r28
    745e:	df 93       	push	r29
    7460:	f6 2e       	mov	r15, r22
    7462:	04 2f       	mov	r16, r20
    7464:	d2 2e       	mov	r13, r18
    7466:	ec 01       	movw	r28, r24
	unsigned char c,i;

	for(i=0;i<3;i++){
    7468:	10 e0       	ldi	r17, 0x00	; 0
		c=val%10;
    746a:	8a e0       	ldi	r24, 0x0A	; 10
    746c:	e8 2e       	mov	r14, r24
		if(val>0 || i==0){
    746e:	01 11       	cpse	r16, r1
    7470:	02 c0       	rjmp	.+4      	; 0x7476 <PrintByte+0x24>
    7472:	11 11       	cpse	r17, r1
    7474:	07 c0       	rjmp	.+14     	; 0x7484 <PrintByte+0x32>
//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
	unsigned char c,i;

	for(i=0;i<3;i++){
		c=val%10;
    7476:	80 2f       	mov	r24, r16
    7478:	6e 2d       	mov	r22, r14
    747a:	0e 94 63 50 	call	0xa0c6	; 0xa0c6 <__udivmodqi4>
		if(val>0 || i==0){
			SetFont(x--,y,c+CHAR_ZERO);
    747e:	40 e1       	ldi	r20, 0x10	; 16
    7480:	49 0f       	add	r20, r25
    7482:	05 c0       	rjmp	.+10     	; 0x748e <PrintByte+0x3c>
		}else{
			if(zeropad){
    7484:	dd 20       	and	r13, r13
    7486:	11 f0       	breq	.+4      	; 0x748c <PrintByte+0x3a>
				SetFont(x--,y,CHAR_ZERO);
    7488:	40 e1       	ldi	r20, 0x10	; 16
    748a:	01 c0       	rjmp	.+2      	; 0x748e <PrintByte+0x3c>
			}else{
				SetFont(x--,y,0);
    748c:	40 e0       	ldi	r20, 0x00	; 0
    748e:	6f 2d       	mov	r22, r15
    7490:	8c 2f       	mov	r24, r28
    7492:	0e 94 07 2c 	call	0x580e	; 0x580e <SetFont>
			}
		}
		val=val/10;
    7496:	80 2f       	mov	r24, r16
    7498:	6e 2d       	mov	r22, r14
    749a:	0e 94 63 50 	call	0xa0c6	; 0xa0c6 <__udivmodqi4>
    749e:	08 2f       	mov	r16, r24

//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
	unsigned char c,i;

	for(i=0;i<3;i++){
    74a0:	1f 5f       	subi	r17, 0xFF	; 255
    74a2:	21 97       	sbiw	r28, 0x01	; 1
    74a4:	13 30       	cpi	r17, 0x03	; 3
    74a6:	19 f7       	brne	.-58     	; 0x746e <PrintByte+0x1c>
			}
		}
		val=val/10;
	}
		
}
    74a8:	df 91       	pop	r29
    74aa:	cf 91       	pop	r28
    74ac:	1f 91       	pop	r17
    74ae:	0f 91       	pop	r16
    74b0:	ff 90       	pop	r15
    74b2:	ef 90       	pop	r14
    74b4:	df 90       	pop	r13
    74b6:	08 95       	ret

000074b8 <PrintInt>:

//Print an unsigned byte in decimal
void PrintInt(int x,int y, unsigned int val,bool zeropad){
    74b8:	cf 92       	push	r12
    74ba:	df 92       	push	r13
    74bc:	ef 92       	push	r14
    74be:	ff 92       	push	r15
    74c0:	0f 93       	push	r16
    74c2:	1f 93       	push	r17
    74c4:	cf 93       	push	r28
    74c6:	df 93       	push	r29
    74c8:	c8 2e       	mov	r12, r24
    74ca:	d6 2f       	mov	r29, r22
    74cc:	8a 01       	movw	r16, r20
    74ce:	d2 2e       	mov	r13, r18
	unsigned char c,i;

	for(i=0;i<5;i++){
    74d0:	c0 e0       	ldi	r28, 0x00	; 0
		c=val%10;
    74d2:	8a e0       	ldi	r24, 0x0A	; 10
    74d4:	e8 2e       	mov	r14, r24
    74d6:	f1 2c       	mov	r15, r1
    74d8:	3c 2d       	mov	r19, r12
    74da:	3c 1b       	sub	r19, r28
		if(val>0 || i==0){
    74dc:	01 15       	cp	r16, r1
    74de:	11 05       	cpc	r17, r1
    74e0:	11 f4       	brne	.+4      	; 0x74e6 <PrintInt+0x2e>
    74e2:	c1 11       	cpse	r28, r1
    74e4:	07 c0       	rjmp	.+14     	; 0x74f4 <PrintInt+0x3c>
//Print an unsigned byte in decimal
void PrintInt(int x,int y, unsigned int val,bool zeropad){
	unsigned char c,i;

	for(i=0;i<5;i++){
		c=val%10;
    74e6:	c8 01       	movw	r24, r16
    74e8:	b7 01       	movw	r22, r14
    74ea:	0e 94 6f 50 	call	0xa0de	; 0xa0de <__udivmodhi4>
		if(val>0 || i==0){
			SetFont(x--,y,c+CHAR_ZERO);
    74ee:	40 e1       	ldi	r20, 0x10	; 16
    74f0:	48 0f       	add	r20, r24
    74f2:	05 c0       	rjmp	.+10     	; 0x74fe <PrintInt+0x46>
		}else{
			if(zeropad){
    74f4:	dd 20       	and	r13, r13
    74f6:	11 f0       	breq	.+4      	; 0x74fc <PrintInt+0x44>
				SetFont(x--,y,CHAR_ZERO);
    74f8:	40 e1       	ldi	r20, 0x10	; 16
    74fa:	01 c0       	rjmp	.+2      	; 0x74fe <PrintInt+0x46>
			}else{
				SetFont(x--,y,0);
    74fc:	40 e0       	ldi	r20, 0x00	; 0
    74fe:	6d 2f       	mov	r22, r29
    7500:	83 2f       	mov	r24, r19
    7502:	0e 94 07 2c 	call	0x580e	; 0x580e <SetFont>
			}
		}
		val=val/10;
    7506:	c8 01       	movw	r24, r16
    7508:	b7 01       	movw	r22, r14
    750a:	0e 94 6f 50 	call	0xa0de	; 0xa0de <__udivmodhi4>
    750e:	8b 01       	movw	r16, r22

//Print an unsigned byte in decimal
void PrintInt(int x,int y, unsigned int val,bool zeropad){
	unsigned char c,i;

	for(i=0;i<5;i++){
    7510:	cf 5f       	subi	r28, 0xFF	; 255
    7512:	c5 30       	cpi	r28, 0x05	; 5
    7514:	09 f7       	brne	.-62     	; 0x74d8 <PrintInt+0x20>
			}
		}
		val=val/10;
	}
		
}
    7516:	df 91       	pop	r29
    7518:	cf 91       	pop	r28
    751a:	1f 91       	pop	r17
    751c:	0f 91       	pop	r16
    751e:	ff 90       	pop	r15
    7520:	ef 90       	pop	r14
    7522:	df 90       	pop	r13
    7524:	cf 90       	pop	r12
    7526:	08 95       	ret

00007528 <Print>:
	PrintHexByte(x+4,y, value>>8);
	PrintHexByte(x+6,y,value&0xff);
}

//Print a string from flash
void Print(int x,int y,const char *string){
    7528:	0f 93       	push	r16
    752a:	1f 93       	push	r17
    752c:	cf 93       	push	r28
    752e:	df 93       	push	r29
    7530:	06 2f       	mov	r16, r22
    7532:	c4 2f       	mov	r28, r20
    7534:	d5 2f       	mov	r29, r21
    7536:	18 2f       	mov	r17, r24
    7538:	14 1b       	sub	r17, r20

	int i=0;
	char c;

	while(1){
		c=pgm_read_byte(&(string[i++]));		
    753a:	fe 01       	movw	r30, r28
    753c:	44 91       	lpm	r20, Z
		if(c!=0){
    753e:	44 23       	and	r20, r20
    7540:	49 f0       	breq	.+18     	; 0x7554 <Print+0x2c>
			c=((c&127)-32);			
    7542:	4f 77       	andi	r20, 0x7F	; 127
    7544:	40 52       	subi	r20, 0x20	; 32
			SetFont(x++,y,c);
    7546:	60 2f       	mov	r22, r16
    7548:	8c 2f       	mov	r24, r28
    754a:	81 0f       	add	r24, r17
    754c:	0e 94 07 2c 	call	0x580e	; 0x580e <SetFont>
    7550:	21 96       	adiw	r28, 0x01	; 1
		}else{
			break;
		}
	}
    7552:	f3 cf       	rjmp	.-26     	; 0x753a <Print+0x12>
	
}
    7554:	df 91       	pop	r29
    7556:	cf 91       	pop	r28
    7558:	1f 91       	pop	r17
    755a:	0f 91       	pop	r16
    755c:	08 95       	ret

0000755e <WaitVsync>:
		}
	}
}

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
    755e:	0f 93       	push	r16
    7560:	1f 93       	push	r17
    7562:	cf 93       	push	r28
    7564:	df 93       	push	r29
    7566:	8c 01       	movw	r16, r24
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    7568:	c0 e0       	ldi	r28, 0x00	; 0
    756a:	d0 e0       	ldi	r29, 0x00	; 0
    756c:	c0 17       	cp	r28, r16
    756e:	d1 07       	cpc	r29, r17
    7570:	44 f4       	brge	.+16     	; 0x7582 <WaitVsync+0x24>
		while(!GetVsyncFlag());
    7572:	0e 94 24 2c 	call	0x5848	; 0x5848 <GetVsyncFlag>
    7576:	88 23       	and	r24, r24
    7578:	e1 f3       	breq	.-8      	; 0x7572 <WaitVsync+0x14>
		ClearVsyncFlag();		
    757a:	0e 94 28 2c 	call	0x5850	; 0x5850 <ClearVsyncFlag>

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    757e:	21 96       	adiw	r28, 0x01	; 1
    7580:	f5 cf       	rjmp	.-22     	; 0x756c <WaitVsync+0xe>
		while(!GetVsyncFlag());
		ClearVsyncFlag();		
	}
}
    7582:	df 91       	pop	r29
    7584:	cf 91       	pop	r28
    7586:	1f 91       	pop	r17
    7588:	0f 91       	pop	r16
    758a:	08 95       	ret

0000758c <DisplayLogo>:
	void DisplayLogo(){
	
		#if INTRO_LOGO !=0
			#define LOGO_X_POS 12
			
			InitMusicPlayer(logoInitPatches);
    758c:	8d e1       	ldi	r24, 0x1D	; 29
    758e:	99 e0       	ldi	r25, 0x09	; 9
    7590:	0e 94 70 2e 	call	0x5ce0	; 0x5ce0 <InitMusicPlayer>
			SetTileTable(logo_tileset);
    7594:	8d e1       	ldi	r24, 0x1D	; 29
    7596:	91 e0       	ldi	r25, 0x01	; 1
    7598:	0e 94 1f 2c 	call	0x583e	; 0x583e <SetTileTable>
			
			//draw logo
			ClearVram();
    759c:	0e 94 fd 2b 	call	0x57fa	; 0x57fa <ClearVram>
			WaitVsync(15);		
    75a0:	8f e0       	ldi	r24, 0x0F	; 15
    75a2:	90 e0       	ldi	r25, 0x00	; 0
    75a4:	0e 94 af 3a 	call	0x755e	; 0x755e <WaitVsync>


			#if INTRO_LOGO == 1 
				TriggerFx(0,0xff,true);
    75a8:	41 e0       	ldi	r20, 0x01	; 1
    75aa:	6f ef       	ldi	r22, 0xFF	; 255
    75ac:	80 e0       	ldi	r24, 0x00	; 0
    75ae:	0e 94 7d 2f 	call	0x5efa	; 0x5efa <TriggerFx>
			#endif

			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo);
    75b2:	47 e0       	ldi	r20, 0x07	; 7
    75b4:	51 e0       	ldi	r21, 0x01	; 1
    75b6:	6c e0       	ldi	r22, 0x0C	; 12
    75b8:	8c e0       	ldi	r24, 0x0C	; 12
    75ba:	0e 94 dc 39 	call	0x73b8	; 0x73b8 <DrawMap>
			WaitVsync(3);
    75be:	83 e0       	ldi	r24, 0x03	; 3
    75c0:	90 e0       	ldi	r25, 0x00	; 0
    75c2:	0e 94 af 3a 	call	0x755e	; 0x755e <WaitVsync>
			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo2);
    75c6:	46 ef       	ldi	r20, 0xF6	; 246
    75c8:	50 e0       	ldi	r21, 0x00	; 0
    75ca:	6c e0       	ldi	r22, 0x0C	; 12
    75cc:	8c e0       	ldi	r24, 0x0C	; 12
    75ce:	0e 94 dc 39 	call	0x73b8	; 0x73b8 <DrawMap>
			WaitVsync(2);
    75d2:	82 e0       	ldi	r24, 0x02	; 2
    75d4:	90 e0       	ldi	r25, 0x00	; 0
    75d6:	0e 94 af 3a 	call	0x755e	; 0x755e <WaitVsync>
			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo);
    75da:	47 e0       	ldi	r20, 0x07	; 7
    75dc:	51 e0       	ldi	r21, 0x01	; 1
    75de:	6c e0       	ldi	r22, 0x0C	; 12
    75e0:	8c e0       	ldi	r24, 0x0C	; 12
    75e2:	0e 94 dc 39 	call	0x73b8	; 0x73b8 <DrawMap>
			#if INTRO_LOGO == 2
				SetMasterVolume(0xc0);
				TriggerNote(3,0,16,0xff);
			#endif 
		
			WaitVsync(65);
    75e6:	81 e4       	ldi	r24, 0x41	; 65
    75e8:	90 e0       	ldi	r25, 0x00	; 0
    75ea:	0e 94 af 3a 	call	0x755e	; 0x755e <WaitVsync>
			ClearVram();
    75ee:	0e 94 fd 2b 	call	0x57fa	; 0x57fa <ClearVram>
			WaitVsync(20);
    75f2:	84 e1       	ldi	r24, 0x14	; 20
    75f4:	90 e0       	ldi	r25, 0x00	; 0
    75f6:	0c 94 af 3a 	jmp	0x755e	; 0x755e <WaitVsync>

000075fa <doFade>:
char fadeDir;
bool volatile fadeActive;


void doFade(unsigned char speed,bool blocking){
	fadeSpeed=speed;
    75fa:	80 93 67 0d 	sts	0x0D67, r24
	currFadeFrame=0;
    75fe:	10 92 6b 0d 	sts	0x0D6B, r1
	fadeActive=true;
    7602:	81 e0       	ldi	r24, 0x01	; 1
    7604:	80 93 6a 0d 	sts	0x0D6A, r24
		
	if(blocking){
    7608:	66 23       	and	r22, r22
    760a:	21 f0       	breq	.+8      	; 0x7614 <doFade+0x1a>
		while(fadeActive==true);
    760c:	80 91 6a 0d 	lds	r24, 0x0D6A
    7610:	81 11       	cpse	r24, r1
    7612:	fc cf       	rjmp	.-8      	; 0x760c <doFade+0x12>
    7614:	08 95       	ret

00007616 <FadeIn>:
	
	
}

void FadeIn(unsigned char speed,bool blocking){
	if(speed==0){
    7616:	81 11       	cpse	r24, r1
    7618:	03 c0       	rjmp	.+6      	; 0x7620 <FadeIn+0xa>
		DDRC=0xff;
    761a:	8f ef       	ldi	r24, 0xFF	; 255
    761c:	87 b9       	out	0x07, r24	; 7
		return;
    761e:	08 95       	ret
	}
	fadeStep=1;
    7620:	91 e0       	ldi	r25, 0x01	; 1
    7622:	90 93 6c 0d 	sts	0x0D6C, r25
	fadeDir=1;
    7626:	90 93 68 0d 	sts	0x0D68, r25
	doFade(speed,blocking);
    762a:	0c 94 fd 3a 	jmp	0x75fa	; 0x75fa <doFade>

0000762e <FadeOut>:
}

void FadeOut(unsigned char speed,bool blocking){
	if(speed==0){
    762e:	81 11       	cpse	r24, r1
    7630:	02 c0       	rjmp	.+4      	; 0x7636 <FadeOut+0x8>
		DDRC=0;
    7632:	17 b8       	out	0x07, r1	; 7
		return;
    7634:	08 95       	ret
	}
	
	fadeStep=FADER_STEPS;
    7636:	9c e0       	ldi	r25, 0x0C	; 12
    7638:	90 93 6c 0d 	sts	0x0D6C, r25
	fadeDir=-1;
    763c:	9f ef       	ldi	r25, 0xFF	; 255
    763e:	90 93 68 0d 	sts	0x0D68, r25
	doFade(speed,blocking);
    7642:	0c 94 fd 3a 	jmp	0x75fa	; 0x75fa <doFade>

00007646 <ProcessFading>:
}


//called by the kernel at each field end
void ProcessFading(){
	if(fadeActive==true){
    7646:	80 91 6a 0d 	lds	r24, 0x0D6A
    764a:	88 23       	and	r24, r24
    764c:	01 f1       	breq	.+64     	; 0x768e <ProcessFading+0x48>
		if(currFadeFrame==0){
    764e:	80 91 6b 0d 	lds	r24, 0x0D6B
    7652:	81 11       	cpse	r24, r1
    7654:	19 c0       	rjmp	.+50     	; 0x7688 <ProcessFading+0x42>
			currFadeFrame=fadeSpeed;
    7656:	80 91 67 0d 	lds	r24, 0x0D67
    765a:	80 93 6b 0d 	sts	0x0D6B, r24
			DDRC = pgm_read_byte(&(fader[fadeStep-1]));
    765e:	e0 91 6c 0d 	lds	r30, 0x0D6C
    7662:	f0 e0       	ldi	r31, 0x00	; 0
    7664:	e7 51       	subi	r30, 0x17	; 23
    7666:	ff 4f       	sbci	r31, 0xFF	; 255
    7668:	e4 91       	lpm	r30, Z
    766a:	e7 b9       	out	0x07, r30	; 7
			fadeStep+=fadeDir;
    766c:	90 91 68 0d 	lds	r25, 0x0D68
    7670:	80 91 6c 0d 	lds	r24, 0x0D6C
    7674:	89 0f       	add	r24, r25
    7676:	80 93 6c 0d 	sts	0x0D6C, r24
			if(fadeStep==0 || fadeStep==(FADER_STEPS+1)){
    767a:	88 23       	and	r24, r24
    767c:	11 f0       	breq	.+4      	; 0x7682 <ProcessFading+0x3c>
    767e:	8d 30       	cpi	r24, 0x0D	; 13
    7680:	31 f4       	brne	.+12     	; 0x768e <ProcessFading+0x48>
				fadeActive=false;
    7682:	10 92 6a 0d 	sts	0x0D6A, r1
    7686:	08 95       	ret
			}
		}else{
			currFadeFrame--;
    7688:	81 50       	subi	r24, 0x01	; 1
    768a:	80 93 6b 0d 	sts	0x0D6B, r24
    768e:	08 95       	ret

00007690 <VideoModeVsync>:
	}

	//Callback invoked during hsync
	void VideoModeVsync(){
		
		ProcessFading();
    7690:	0e 94 23 3b 	call	0x7646	; 0x7646 <ProcessFading>
		ProcessSprites();
    7694:	0c 94 96 38 	jmp	0x712c	; 0x712c <ProcessSprites>

00007698 <LBGetNextFrame>:
	u8 reversing;
	char** anims;
} Animation;

char* LBGetNextFrame(Animation* anim)
{
    7698:	fc 01       	movw	r30, r24
	anim->looped = 0;
    769a:	14 82       	std	Z+4, r1	; 0x04
	anim->frame_count += 1;
    769c:	93 81       	ldd	r25, Z+3	; 0x03
    769e:	9f 5f       	subi	r25, 0xFF	; 255
    76a0:	93 83       	std	Z+3, r25	; 0x03
	if (anim->frame_count < anim->frames_per_anim)
    76a2:	42 81       	ldd	r20, Z+2	; 0x02
    76a4:	80 81       	ld	r24, Z
    76a6:	26 81       	ldd	r18, Z+6	; 0x06
    76a8:	37 81       	ldd	r19, Z+7	; 0x07
    76aa:	94 17       	cp	r25, r20
    76ac:	30 f4       	brcc	.+12     	; 0x76ba <LBGetNextFrame+0x22>
	{
		return anim->anims[anim->current_anim];
    76ae:	f9 01       	movw	r30, r18
    76b0:	e8 0f       	add	r30, r24
    76b2:	f1 1d       	adc	r31, r1
    76b4:	e8 0f       	add	r30, r24
    76b6:	f1 1d       	adc	r31, r1
    76b8:	12 c0       	rjmp	.+36     	; 0x76de <LBGetNextFrame+0x46>
	}
	anim->frame_count = 0;
    76ba:	13 82       	std	Z+3, r1	; 0x03
	anim->current_anim = (anim->current_anim + 1) % anim->anim_count;
    76bc:	90 e0       	ldi	r25, 0x00	; 0
    76be:	01 96       	adiw	r24, 0x01	; 1
    76c0:	61 81       	ldd	r22, Z+1	; 0x01
    76c2:	70 e0       	ldi	r23, 0x00	; 0
    76c4:	0e 94 83 50 	call	0xa106	; 0xa106 <__divmodhi4>
    76c8:	80 83       	st	Z, r24
	if (anim->current_anim == 0) anim->looped = 1;
    76ca:	81 11       	cpse	r24, r1
    76cc:	02 c0       	rjmp	.+4      	; 0x76d2 <LBGetNextFrame+0x3a>
    76ce:	41 e0       	ldi	r20, 0x01	; 1
    76d0:	44 83       	std	Z+4, r20	; 0x04
    76d2:	99 27       	eor	r25, r25
	return anim->anims[anim->current_anim];
    76d4:	88 0f       	add	r24, r24
    76d6:	99 1f       	adc	r25, r25
    76d8:	f9 01       	movw	r30, r18
    76da:	e8 0f       	add	r30, r24
    76dc:	f9 1f       	adc	r31, r25
    76de:	80 81       	ld	r24, Z
    76e0:	91 81       	ldd	r25, Z+1	; 0x01
}
    76e2:	08 95       	ret

000076e4 <LBGetJoyPadState>:

void LBGetJoyPadState(JoyPadState* p, unsigned char index)
/*
 * Get the current joy pad button state for index controller
 */
{
    76e4:	0f 93       	push	r16
    76e6:	1f 93       	push	r17
    76e8:	cf 93       	push	r28
    76ea:	df 93       	push	r29
    76ec:	1f 92       	push	r1
    76ee:	cd b7       	in	r28, 0x3d	; 61
    76f0:	de b7       	in	r29, 0x3e	; 62
    76f2:	8c 01       	movw	r16, r24
	static unsigned int p_prev[2];

	p->held = ReadJoypad(index);
    76f4:	86 2f       	mov	r24, r22
    76f6:	69 83       	std	Y+1, r22	; 0x01
    76f8:	0e 94 2e 2c 	call	0x585c	; 0x585c <ReadJoypad>
    76fc:	d8 01       	movw	r26, r16
    76fe:	15 96       	adiw	r26, 0x05	; 5
    7700:	9c 93       	st	X, r25
    7702:	8e 93       	st	-X, r24
    7704:	14 97       	sbiw	r26, 0x04	; 4
    7706:	69 81       	ldd	r22, Y+1	; 0x01
    7708:	e6 2f       	mov	r30, r22
    770a:	f0 e0       	ldi	r31, 0x00	; 0

	// Count held cycles
	if (p->held == 0 || p->held != p_prev[index])
    770c:	00 97       	sbiw	r24, 0x00	; 0
    770e:	51 f0       	breq	.+20     	; 0x7724 <LBGetJoyPadState+0x40>
    7710:	df 01       	movw	r26, r30
    7712:	aa 0f       	add	r26, r26
    7714:	bb 1f       	adc	r27, r27
    7716:	a1 52       	subi	r26, 0x21	; 33
    7718:	b3 4f       	sbci	r27, 0xF3	; 243
    771a:	2d 91       	ld	r18, X+
    771c:	3c 91       	ld	r19, X
    771e:	82 17       	cp	r24, r18
    7720:	93 07       	cpc	r25, r19
    7722:	21 f0       	breq	.+8      	; 0x772c <LBGetJoyPadState+0x48>
	    p->held_cycles = 0;
    7724:	d8 01       	movw	r26, r16
    7726:	16 96       	adiw	r26, 0x06	; 6
    7728:	1c 92       	st	X, r1
    772a:	07 c0       	rjmp	.+14     	; 0x773a <LBGetJoyPadState+0x56>
	else
	    p->held_cycles += 1;
    772c:	d8 01       	movw	r26, r16
    772e:	16 96       	adiw	r26, 0x06	; 6
    7730:	2c 91       	ld	r18, X
    7732:	16 97       	sbiw	r26, 0x06	; 6
    7734:	2f 5f       	subi	r18, 0xFF	; 255
    7736:	16 96       	adiw	r26, 0x06	; 6
    7738:	2c 93       	st	X, r18

	p->pressed = p->held & (p->held ^ p_prev[index]);
    773a:	ee 0f       	add	r30, r30
    773c:	ff 1f       	adc	r31, r31
    773e:	e1 52       	subi	r30, 0x21	; 33
    7740:	f3 4f       	sbci	r31, 0xF3	; 243
    7742:	20 81       	ld	r18, Z
    7744:	31 81       	ldd	r19, Z+1	; 0x01
    7746:	a9 01       	movw	r20, r18
    7748:	40 95       	com	r20
    774a:	50 95       	com	r21
    774c:	48 23       	and	r20, r24
    774e:	59 23       	and	r21, r25
    7750:	d8 01       	movw	r26, r16
    7752:	11 96       	adiw	r26, 0x01	; 1
    7754:	5c 93       	st	X, r21
    7756:	4e 93       	st	-X, r20
	p->released = p_prev[index] & (p->held ^ p_prev[index]);
    7758:	ac 01       	movw	r20, r24
    775a:	40 95       	com	r20
    775c:	50 95       	com	r21
    775e:	24 23       	and	r18, r20
    7760:	35 23       	and	r19, r21
    7762:	13 96       	adiw	r26, 0x03	; 3
    7764:	3c 93       	st	X, r19
    7766:	2e 93       	st	-X, r18
    7768:	12 97       	sbiw	r26, 0x02	; 2
	p_prev[index] = p->held;
    776a:	91 83       	std	Z+1, r25	; 0x01
    776c:	80 83       	st	Z, r24
}
    776e:	0f 90       	pop	r0
    7770:	df 91       	pop	r29
    7772:	cf 91       	pop	r28
    7774:	1f 91       	pop	r17
    7776:	0f 91       	pop	r16
    7778:	08 95       	ret

0000777a <LBCollides>:
	}
}

u8 LBCollides(u16 x1, u16 y1, u8 width1, u8 height1,
						 u16 x2, u16 y2, u8 width2, u8 height2)
{
    777a:	af 92       	push	r10
    777c:	cf 92       	push	r12
    777e:	ef 92       	push	r14
    7780:	ff 92       	push	r15
    7782:	0f 93       	push	r16
    7784:	1f 93       	push	r17
    7786:	fc 01       	movw	r30, r24
	if (y1 + height1 <= y2) return 0;
    7788:	cb 01       	movw	r24, r22
    778a:	82 0f       	add	r24, r18
    778c:	91 1d       	adc	r25, r1
    778e:	e8 16       	cp	r14, r24
    7790:	f9 06       	cpc	r15, r25
    7792:	88 f4       	brcc	.+34     	; 0x77b6 <LBCollides+0x3c>
	if (y1 >= y2 + height2) return 0;
    7794:	ea 0c       	add	r14, r10
    7796:	f1 1c       	adc	r15, r1
    7798:	6e 15       	cp	r22, r14
    779a:	7f 05       	cpc	r23, r15
    779c:	60 f4       	brcc	.+24     	; 0x77b6 <LBCollides+0x3c>
	if (x1 + width1 <= x2) return 0;
    779e:	cf 01       	movw	r24, r30
    77a0:	84 0f       	add	r24, r20
    77a2:	91 1d       	adc	r25, r1
    77a4:	08 17       	cp	r16, r24
    77a6:	19 07       	cpc	r17, r25
    77a8:	30 f4       	brcc	.+12     	; 0x77b6 <LBCollides+0x3c>
	if (x1 >= x2 + width2) return 0;
    77aa:	0c 0d       	add	r16, r12
    77ac:	11 1d       	adc	r17, r1
    77ae:	81 e0       	ldi	r24, 0x01	; 1
    77b0:	e0 17       	cp	r30, r16
    77b2:	f1 07       	cpc	r31, r17
    77b4:	08 f0       	brcs	.+2      	; 0x77b8 <LBCollides+0x3e>
}

u8 LBCollides(u16 x1, u16 y1, u8 width1, u8 height1,
						 u16 x2, u16 y2, u8 width2, u8 height2)
{
	if (y1 + height1 <= y2) return 0;
    77b6:	80 e0       	ldi	r24, 0x00	; 0
	if (y1 >= y2 + height2) return 0;
	if (x1 + width1 <= x2) return 0;
	if (x1 >= x2 + width2) return 0;
	return 1;
}
    77b8:	1f 91       	pop	r17
    77ba:	0f 91       	pop	r16
    77bc:	ff 90       	pop	r15
    77be:	ef 90       	pop	r14
    77c0:	cf 90       	pop	r12
    77c2:	af 90       	pop	r10
    77c4:	08 95       	ret

000077c6 <LBWaitSeconds>:

	return from + ((delta + shifted) % delta);
}

void LBWaitSeconds(u8 seconds)
{
    77c6:	cf 93       	push	r28
    77c8:	df 93       	push	r29
    77ca:	d8 2f       	mov	r29, r24
	for(u8 i = 0; i < seconds; i++)
    77cc:	c0 e0       	ldi	r28, 0x00	; 0
    77ce:	cd 17       	cp	r28, r29
    77d0:	31 f0       	breq	.+12     	; 0x77de <LBWaitSeconds+0x18>
	{
		WaitUs(65535);
    77d2:	8f ef       	ldi	r24, 0xFF	; 255
    77d4:	9f ef       	ldi	r25, 0xFF	; 255
    77d6:	0e 94 3a 2c 	call	0x5874	; 0x5874 <WaitUs>
	return from + ((delta + shifted) % delta);
}

void LBWaitSeconds(u8 seconds)
{
	for(u8 i = 0; i < seconds; i++)
    77da:	cf 5f       	subi	r28, 0xFF	; 255
    77dc:	f8 cf       	rjmp	.-16     	; 0x77ce <LBWaitSeconds+0x8>
	{
		WaitUs(65535);
	}
}
    77de:	df 91       	pop	r29
    77e0:	cf 91       	pop	r28
    77e2:	08 95       	ret

000077e4 <LBMapSprite>:

void LBMapSprite(u8 startSprite,const char *map,u8 spriteFlags)
{
    77e4:	df 92       	push	r13
    77e6:	ef 92       	push	r14
    77e8:	ff 92       	push	r15
    77ea:	0f 93       	push	r16
    77ec:	1f 93       	push	r17
    77ee:	cf 93       	push	r28
    77f0:	df 93       	push	r29
    77f2:	db 01       	movw	r26, r22
	unsigned char mapWidth=pgm_read_byte(&(map[0]));
    77f4:	fb 01       	movw	r30, r22
    77f6:	14 91       	lpm	r17, Z
	unsigned char mapHeight=pgm_read_byte(&(map[1]));
    77f8:	31 96       	adiw	r30, 0x01	; 1
    77fa:	64 91       	lpm	r22, Z
    77fc:	5f ef       	ldi	r21, 0xFF	; 255
    77fe:	51 0f       	add	r21, r17
	s8 x,y,dx,dy,t; 

	if(spriteFlags & SPRITE_FLIP_X)
    7800:	24 2f       	mov	r18, r20
    7802:	21 70       	andi	r18, 0x01	; 1
    7804:	40 ff       	sbrs	r20, 0
    7806:	04 c0       	rjmp	.+8      	; 0x7810 <LBMapSprite+0x2c>
	{
		x=(mapWidth-1);
    7808:	95 2f       	mov	r25, r21
		dx=-1;
    780a:	ff 24       	eor	r15, r15
    780c:	fa 94       	dec	r15
    780e:	03 c0       	rjmp	.+6      	; 0x7816 <LBMapSprite+0x32>
	}
	else
	{
		x=0;
		dx=1;
    7810:	ff 24       	eor	r15, r15
    7812:	f3 94       	inc	r15
		x=(mapWidth-1);
		dx=-1;
	}
	else
	{
		x=0;
    7814:	90 e0       	ldi	r25, 0x00	; 0
		dx=1;
	}

	if(spriteFlags & SPRITE_FLIP_Y)
    7816:	41 ff       	sbrs	r20, 1
    7818:	05 c0       	rjmp	.+10     	; 0x7824 <LBMapSprite+0x40>
	{
		y=(mapHeight-1);
    781a:	7f ef       	ldi	r23, 0xFF	; 255
    781c:	76 0f       	add	r23, r22
		dy=-1;
    781e:	ee 24       	eor	r14, r14
    7820:	ea 94       	dec	r14
    7822:	03 c0       	rjmp	.+6      	; 0x782a <LBMapSprite+0x46>
	}
	else
	{
		y=0;
		dy=1;
    7824:	ee 24       	eor	r14, r14
    7826:	e3 94       	inc	r14
		y=(mapHeight-1);
		dy=-1;
	}
	else
	{
		y=0;
    7828:	70 e0       	ldi	r23, 0x00	; 0
    782a:	21 11       	cpse	r18, r1
    782c:	01 c0       	rjmp	.+2      	; 0x7830 <LBMapSprite+0x4c>
    782e:	50 e0       	ldi	r21, 0x00	; 0
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
    7830:	00 e0       	ldi	r16, 0x00	; 0
    7832:	06 17       	cp	r16, r22
    7834:	09 f1       	breq	.+66     	; 0x7878 <LBMapSprite+0x94>
	{
		for(u8 cx=0;cx<mapWidth;cx++)
		{
			t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    7836:	71 03       	mulsu	r23, r17
    7838:	e0 01       	movw	r28, r0
    783a:	11 24       	eor	r1, r1
    783c:	d8 2e       	mov	r13, r24
    783e:	d1 0e       	add	r13, r17
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
	{
		for(u8 cx=0;cx<mapWidth;cx++)
    7840:	8d 15       	cp	r24, r13
    7842:	b1 f0       	breq	.+44     	; 0x7870 <LBMapSprite+0x8c>
		{
			t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    7844:	9e 01       	movw	r18, r28
    7846:	29 0f       	add	r18, r25
    7848:	31 1d       	adc	r19, r1
    784a:	97 fd       	sbrc	r25, 7
    784c:	3a 95       	dec	r19
    784e:	2e 5f       	subi	r18, 0xFE	; 254
    7850:	3f 4f       	sbci	r19, 0xFF	; 255
    7852:	fd 01       	movw	r30, r26
    7854:	e2 0f       	add	r30, r18
    7856:	f3 1f       	adc	r31, r19
    7858:	24 91       	lpm	r18, Z
			extendedSprites[startSprite].tileIndex=t;
    785a:	34 e0       	ldi	r19, 0x04	; 4
    785c:	83 9f       	mul	r24, r19
    785e:	f0 01       	movw	r30, r0
    7860:	11 24       	eor	r1, r1
    7862:	e4 57       	subi	r30, 0x74	; 116
    7864:	f0 4f       	sbci	r31, 0xF0	; 240
    7866:	22 83       	std	Z+2, r18	; 0x02
			extendedSprites[startSprite++].flags=spriteFlags;
    7868:	8f 5f       	subi	r24, 0xFF	; 255
    786a:	43 83       	std	Z+3, r20	; 0x03
    786c:	9f 0d       	add	r25, r15
    786e:	e8 cf       	rjmp	.-48     	; 0x7840 <LBMapSprite+0x5c>
    7870:	7e 0d       	add	r23, r14
	{
		y=0;
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
    7872:	0f 5f       	subi	r16, 0xFF	; 255
			extendedSprites[startSprite].tileIndex=t;
			extendedSprites[startSprite++].flags=spriteFlags;
			x+=dx;
		}
		y+=dy;
		x=(spriteFlags & SPRITE_FLIP_X)?(mapWidth-1):0;
    7874:	95 2f       	mov	r25, r21
    7876:	dd cf       	rjmp	.-70     	; 0x7832 <LBMapSprite+0x4e>
	}
}
    7878:	df 91       	pop	r29
    787a:	cf 91       	pop	r28
    787c:	1f 91       	pop	r17
    787e:	0f 91       	pop	r16
    7880:	ff 90       	pop	r15
    7882:	ef 90       	pop	r14
    7884:	df 90       	pop	r13
    7886:	08 95       	ret

00007888 <LBMoveSprite>:

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
    7888:	df 92       	push	r13
    788a:	ef 92       	push	r14
    788c:	ff 92       	push	r15
    788e:	0f 93       	push	r16
    7890:	1f 93       	push	r17
    7892:	cf 93       	push	r28
    7894:	df 93       	push	r29
		{
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
    7896:	a0 91 9e 0c 	lds	r26, 0x0C9E
    789a:	98 e0       	ldi	r25, 0x08	; 8
    789c:	a9 9f       	mul	r26, r25
    789e:	70 01       	movw	r14, r0
    78a0:	11 24       	eor	r1, r1
    78a2:	50 e0       	ldi	r21, 0x00	; 0
    78a4:	38 ef       	ldi	r19, 0xF8	; 248
    78a6:	a3 9f       	mul	r26, r19
    78a8:	30 2d       	mov	r19, r0
    78aa:	11 24       	eor	r1, r1
	}
}

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
	for(u8 dy=0;dy<height;dy++)
    78ac:	70 e0       	ldi	r23, 0x00	; 0
    78ae:	70 17       	cp	r23, r16
    78b0:	09 f1       	breq	.+66     	; 0x78f4 <LBMoveSprite+0x6c>
    78b2:	d4 2e       	mov	r13, r20
    78b4:	13 2f       	mov	r17, r19
    78b6:	14 0f       	add	r17, r20
    78b8:	b8 2f       	mov	r27, r24
    78ba:	b2 0f       	add	r27, r18
    78bc:	96 2f       	mov	r25, r22
	{
		for(u8 dx=0;dx<width;dx++)
    78be:	8b 17       	cp	r24, r27
    78c0:	a9 f0       	breq	.+42     	; 0x78ec <LBMoveSprite+0x64>
		{
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
    78c2:	c4 e0       	ldi	r28, 0x04	; 4
    78c4:	8c 9f       	mul	r24, r28
    78c6:	f0 01       	movw	r30, r0
    78c8:	11 24       	eor	r1, r1
    78ca:	ef 01       	movw	r28, r30
    78cc:	c4 57       	subi	r28, 0x74	; 116
    78ce:	d0 4f       	sbci	r29, 0xF0	; 240
    78d0:	98 83       	st	Y, r25
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
    78d2:	a0 32       	cpi	r26, 0x20	; 32
    78d4:	28 f4       	brcc	.+10     	; 0x78e0 <LBMoveSprite+0x58>
    78d6:	e4 16       	cp	r14, r20
    78d8:	f5 06       	cpc	r15, r21
    78da:	14 f4       	brge	.+4      	; 0x78e0 <LBMoveSprite+0x58>
				{
					u8 tmp=(y+(TILE_HEIGHT*dy))-(Screen.scrollHeight*TILE_HEIGHT);
					extendedSprites[startSprite].y=tmp;
    78dc:	19 83       	std	Y+1, r17	; 0x01
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
				{
    78de:	03 c0       	rjmp	.+6      	; 0x78e6 <LBMoveSprite+0x5e>
					u8 tmp=(y+(TILE_HEIGHT*dy))-(Screen.scrollHeight*TILE_HEIGHT);
					extendedSprites[startSprite].y=tmp;
				}
				else
				{
					extendedSprites[startSprite].y=y+(TILE_HEIGHT*dy);
    78e0:	e4 57       	subi	r30, 0x74	; 116
    78e2:	f0 4f       	sbci	r31, 0xF0	; 240
    78e4:	d1 82       	std	Z+1, r13	; 0x01
				{
					extendedSprites[startSprite].y=y+(TILE_HEIGHT*dy);
				}
			#endif

			startSprite++;
    78e6:	8f 5f       	subi	r24, 0xFF	; 255
    78e8:	98 5f       	subi	r25, 0xF8	; 248
    78ea:	e9 cf       	rjmp	.-46     	; 0x78be <LBMoveSprite+0x36>
	}
}

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
	for(u8 dy=0;dy<height;dy++)
    78ec:	7f 5f       	subi	r23, 0xFF	; 255
    78ee:	48 5f       	subi	r20, 0xF8	; 248
    78f0:	5f 4f       	sbci	r21, 0xFF	; 255
    78f2:	dd cf       	rjmp	.-70     	; 0x78ae <LBMoveSprite+0x26>
			#endif

			startSprite++;
		}
	}	
}
    78f4:	df 91       	pop	r29
    78f6:	cf 91       	pop	r28
    78f8:	1f 91       	pop	r17
    78fa:	0f 91       	pop	r16
    78fc:	ff 90       	pop	r15
    78fe:	ef 90       	pop	r14
    7900:	df 90       	pop	r13
    7902:	08 95       	ret

00007904 <LBRotateSprites>:

void LBRotateSprites()
{
    7904:	80 e0       	ldi	r24, 0x00	; 0
    7906:	90 e0       	ldi	r25, 0x00	; 0
    7908:	dc 01       	movw	r26, r24
    790a:	a4 57       	subi	r26, 0x74	; 116
    790c:	b0 4f       	sbci	r27, 0xF0	; 240
    790e:	fc 01       	movw	r30, r24
    7910:	ee 5f       	subi	r30, 0xFE	; 254
    7912:	fa 4f       	sbci	r31, 0xFA	; 250
	static u8 rotate_index = ROTATE_SPRITES_FROM;
	u8 mappedSpriteCount = MAX_EXTENDED_SPRITES;
	
	for (u8 i = 0; i < ROTATE_SPRITES_FROM; i++)
	{
		sprites[i].flags = extendedSprites[i].flags;
    7914:	13 96       	adiw	r26, 0x03	; 3
    7916:	2c 91       	ld	r18, X
    7918:	13 97       	sbiw	r26, 0x03	; 3
    791a:	23 83       	std	Z+3, r18	; 0x03
		sprites[i].tileIndex = extendedSprites[i].tileIndex;
    791c:	12 96       	adiw	r26, 0x02	; 2
    791e:	2c 91       	ld	r18, X
    7920:	12 97       	sbiw	r26, 0x02	; 2
    7922:	22 83       	std	Z+2, r18	; 0x02
		sprites[i].x = extendedSprites[i].x;
    7924:	2c 91       	ld	r18, X
    7926:	20 83       	st	Z, r18
		sprites[i].y = extendedSprites[i].y;
    7928:	11 96       	adiw	r26, 0x01	; 1
    792a:	2c 91       	ld	r18, X
    792c:	21 83       	std	Z+1, r18	; 0x01
    792e:	04 96       	adiw	r24, 0x04	; 4
void LBRotateSprites()
{
	static u8 rotate_index = ROTATE_SPRITES_FROM;
	u8 mappedSpriteCount = MAX_EXTENDED_SPRITES;
	
	for (u8 i = 0; i < ROTATE_SPRITES_FROM; i++)
    7930:	8c 32       	cpi	r24, 0x2C	; 44
    7932:	91 05       	cpc	r25, r1
    7934:	49 f7       	brne	.-46     	; 0x7908 <LBRotateSprites+0x4>
    7936:	80 91 01 05 	lds	r24, 0x0501
    793a:	20 e0       	ldi	r18, 0x00	; 0
    793c:	30 e0       	ldi	r19, 0x00	; 0
		sprites[i].y = extendedSprites[i].y;
	}
	
	for (u8 i = ROTATE_SPRITES_FROM; i < MAX_SPRITES; i++)
	{
		sprites[i].flags = extendedSprites[rotate_index].flags;
    793e:	94 e0       	ldi	r25, 0x04	; 4
    7940:	89 9f       	mul	r24, r25
    7942:	d0 01       	movw	r26, r0
    7944:	11 24       	eor	r1, r1
    7946:	a4 57       	subi	r26, 0x74	; 116
    7948:	b0 4f       	sbci	r27, 0xF0	; 240
    794a:	13 96       	adiw	r26, 0x03	; 3
    794c:	9c 91       	ld	r25, X
    794e:	13 97       	sbiw	r26, 0x03	; 3
    7950:	f9 01       	movw	r30, r18
    7952:	ee 5f       	subi	r30, 0xFE	; 254
    7954:	fa 4f       	sbci	r31, 0xFA	; 250
    7956:	97 a7       	std	Z+47, r25	; 0x2f
		sprites[i].tileIndex = extendedSprites[rotate_index].tileIndex;
    7958:	12 96       	adiw	r26, 0x02	; 2
    795a:	9c 91       	ld	r25, X
    795c:	12 97       	sbiw	r26, 0x02	; 2
    795e:	96 a7       	std	Z+46, r25	; 0x2e
		sprites[i].x = extendedSprites[rotate_index].x;
    7960:	9c 91       	ld	r25, X
    7962:	94 a7       	std	Z+44, r25	; 0x2c
		sprites[i].y = extendedSprites[rotate_index].y;
    7964:	11 96       	adiw	r26, 0x01	; 1
    7966:	9c 91       	ld	r25, X
    7968:	95 a7       	std	Z+45, r25	; 0x2d
		rotate_index += 1;
    796a:	8f 5f       	subi	r24, 0xFF	; 255
		if (rotate_index >= MAX_EXTENDED_SPRITES) rotate_index = ROTATE_SPRITES_FROM;
    796c:	84 31       	cpi	r24, 0x14	; 20
    796e:	08 f0       	brcs	.+2      	; 0x7972 <LBRotateSprites+0x6e>
    7970:	8b e0       	ldi	r24, 0x0B	; 11
    7972:	2c 5f       	subi	r18, 0xFC	; 252
    7974:	3f 4f       	sbci	r19, 0xFF	; 255
		sprites[i].tileIndex = extendedSprites[i].tileIndex;
		sprites[i].x = extendedSprites[i].x;
		sprites[i].y = extendedSprites[i].y;
	}
	
	for (u8 i = ROTATE_SPRITES_FROM; i < MAX_SPRITES; i++)
    7976:	2c 30       	cpi	r18, 0x0C	; 12
    7978:	31 05       	cpc	r19, r1
    797a:	09 f7       	brne	.-62     	; 0x793e <LBRotateSprites+0x3a>
    797c:	80 93 01 05 	sts	0x0501, r24
    7980:	08 95       	ret

00007982 <LBDrawTile>:

/*
 * A more efficient map draw for single tile maps 
 */ 
void LBDrawTile(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
	SetTile(x,y,pgm_read_byte(&(map[2])));					
    7982:	fa 01       	movw	r30, r20
    7984:	32 96       	adiw	r30, 0x02	; 2
    7986:	44 91       	lpm	r20, Z
    7988:	50 e0       	ldi	r21, 0x00	; 0
    798a:	0c 94 0b 2c 	jmp	0x5816	; 0x5816 <SetTile>

0000798e <init_game_state>:
char* enemy_shot_anim[1];
char* expl_anim[3];

void init_game_state()
{
	game.lives = LIVES;
    798e:	ef e8       	ldi	r30, 0x8F	; 143
    7990:	fd e0       	ldi	r31, 0x0D	; 13
    7992:	85 e0       	ldi	r24, 0x05	; 5
    7994:	86 87       	std	Z+14, r24	; 0x0e
	game.score = 0;
    7996:	11 86       	std	Z+9, r1	; 0x09
    7998:	10 86       	std	Z+8, r1	; 0x08
	game.time = 0;
    799a:	13 86       	std	Z+11, r1	; 0x0b
    799c:	12 86       	std	Z+10, r1	; 0x0a
    799e:	08 95       	ret

000079a0 <init_enemy_state>:
}

void init_enemy_state()
{
    79a0:	80 e0       	ldi	r24, 0x00	; 0
    79a2:	90 e0       	ldi	r25, 0x00	; 0
    79a4:	9c 01       	movw	r18, r24
    79a6:	21 57       	subi	r18, 0x71	; 113
    79a8:	32 4f       	sbci	r19, 0xF2	; 242
    79aa:	f9 01       	movw	r30, r18
    79ac:	eb 54       	subi	r30, 0x4B	; 75
    79ae:	ff 4f       	sbci	r31, 0xFF	; 255
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		game.enemies[i].active = 0;
    79b0:	10 82       	st	Z, r1
    79b2:	7a 96       	adiw	r30, 0x1a	; 26
		for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
		{
			game.enemies[i].shot[j].active = 0;
    79b4:	10 82       	st	Z, r1
    79b6:	8e 5b       	subi	r24, 0xBE	; 190
    79b8:	9f 4f       	sbci	r25, 0xFF	; 255
	game.time = 0;
}

void init_enemy_state()
{
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    79ba:	8a 34       	cpi	r24, 0x4A	; 74
    79bc:	21 e0       	ldi	r18, 0x01	; 1
    79be:	92 07       	cpc	r25, r18
    79c0:	89 f7       	brne	.-30     	; 0x79a4 <init_enemy_state+0x4>
		for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
		{
			game.enemies[i].shot[j].active = 0;
		}
	}
	game.active_enemies = 0;
    79c2:	10 92 a7 0d 	sts	0x0DA7, r1
    79c6:	08 95       	ret

000079c8 <init_player_state>:
}

void init_player_state()
{
	game.player.direction = D_RIGHT;
    79c8:	81 e0       	ldi	r24, 0x01	; 1
    79ca:	80 93 bb 0d 	sts	0x0DBB, r24
	game.player.flags = IDLE;
    79ce:	98 e0       	ldi	r25, 0x08	; 8
    79d0:	90 93 b9 0d 	sts	0x0DB9, r25
	game.player.width = 2;
    79d4:	92 e0       	ldi	r25, 0x02	; 2
    79d6:	90 93 bc 0d 	sts	0x0DBC, r25
	game.player.height = 3;
    79da:	93 e0       	ldi	r25, 0x03	; 3
    79dc:	90 93 bd 0d 	sts	0x0DBD, r25
	game.player.shield = PLAYER_SHIELD;
    79e0:	2a e0       	ldi	r18, 0x0A	; 10
    79e2:	20 93 be 0d 	sts	0x0DBE, r18
	game.player.idle.anim_count = 1;
    79e6:	80 93 0e 0e 	sts	0x0E0E, r24
	game.player.idle.frames_per_anim = 1;
    79ea:	80 93 0f 0e 	sts	0x0E0F, r24
	game.player.idle.anims = idle_anim;
    79ee:	2e ee       	ldi	r18, 0xEE	; 238
    79f0:	3f e0       	ldi	r19, 0x0F	; 15
    79f2:	30 93 14 0e 	sts	0x0E14, r19
    79f6:	20 93 13 0e 	sts	0x0E13, r18
	game.player.idle.anims[0] = (char*) map_hero_idle;
    79fa:	2c ed       	ldi	r18, 0xDC	; 220
    79fc:	33 e3       	ldi	r19, 0x33	; 51
    79fe:	30 93 ef 0f 	sts	0x0FEF, r19
    7a02:	20 93 ee 0f 	sts	0x0FEE, r18
	
	game.player.jump.anim_count = 1;
    7a06:	80 93 1e 0e 	sts	0x0E1E, r24
	game.player.jump.frames_per_anim = 1;
    7a0a:	80 93 1f 0e 	sts	0x0E1F, r24
	game.player.jump.anims = jump_anim;
    7a0e:	2d e6       	ldi	r18, 0x6D	; 109
    7a10:	3d e0       	ldi	r19, 0x0D	; 13
    7a12:	30 93 24 0e 	sts	0x0E24, r19
    7a16:	20 93 23 0e 	sts	0x0E23, r18
	game.player.jump.anims[0] = (char*) map_hero_jump;
    7a1a:	24 eb       	ldi	r18, 0xB4	; 180
    7a1c:	33 e3       	ldi	r19, 0x33	; 51
    7a1e:	30 93 6e 0d 	sts	0x0D6E, r19
    7a22:	20 93 6d 0d 	sts	0x0D6D, r18
	
	game.player.prone.anim_count = 1;
    7a26:	80 93 26 0e 	sts	0x0E26, r24
	game.player.prone.frames_per_anim = 1;
    7a2a:	80 93 27 0e 	sts	0x0E27, r24
	game.player.prone.anims = prone_anim;
    7a2e:	26 e8       	ldi	r18, 0x86	; 134
    7a30:	3f e0       	ldi	r19, 0x0F	; 15
    7a32:	30 93 2c 0e 	sts	0x0E2C, r19
    7a36:	20 93 2b 0e 	sts	0x0E2B, r18
	game.player.prone.anims[0] = (char*) map_hero_prone;
    7a3a:	2f ea       	ldi	r18, 0xAF	; 175
    7a3c:	33 e3       	ldi	r19, 0x33	; 51
    7a3e:	30 93 87 0f 	sts	0x0F87, r19
    7a42:	20 93 86 0f 	sts	0x0F86, r18
	
	game.player.expl.anim_count = 3;
    7a46:	90 93 2e 0e 	sts	0x0E2E, r25
	game.player.expl.frames_per_anim = EXPLOSION_FRAME_COUNT;
    7a4a:	85 e0       	ldi	r24, 0x05	; 5
    7a4c:	80 93 2f 0e 	sts	0x0E2F, r24
	game.player.expl.anims = expl_anim;
    7a50:	88 ee       	ldi	r24, 0xE8	; 232
    7a52:	9f e0       	ldi	r25, 0x0F	; 15
    7a54:	90 93 34 0e 	sts	0x0E34, r25
    7a58:	80 93 33 0e 	sts	0x0E33, r24
	game.player.expl.anims[0] = (char*) map_explosion_0;
    7a5c:	8a ee       	ldi	r24, 0xEA	; 234
    7a5e:	93 e3       	ldi	r25, 0x33	; 51
    7a60:	90 93 e9 0f 	sts	0x0FE9, r25
    7a64:	80 93 e8 0f 	sts	0x0FE8, r24
	game.player.expl.anims[1] = (char*) map_explosion_1;
    7a68:	87 ee       	ldi	r24, 0xE7	; 231
    7a6a:	93 e3       	ldi	r25, 0x33	; 51
    7a6c:	90 93 eb 0f 	sts	0x0FEB, r25
    7a70:	80 93 ea 0f 	sts	0x0FEA, r24
	game.player.expl.anims[2] = (char*) map_explosion_2;
    7a74:	84 ee       	ldi	r24, 0xE4	; 228
    7a76:	93 e3       	ldi	r25, 0x33	; 51
    7a78:	90 93 ed 0f 	sts	0x0FED, r25
    7a7c:	80 93 ec 0f 	sts	0x0FEC, r24
	
	game.player.run.anim_count = 4;
    7a80:	84 e0       	ldi	r24, 0x04	; 4
    7a82:	80 93 16 0e 	sts	0x0E16, r24
	game.player.run.frames_per_anim = FRAMES_PER_RUN_CYCLE;
    7a86:	8c e0       	ldi	r24, 0x0C	; 12
    7a88:	80 93 17 0e 	sts	0x0E17, r24
	game.player.run.anims = run_anim;
    7a8c:	8c ed       	ldi	r24, 0xDC	; 220
    7a8e:	9f e0       	ldi	r25, 0x0F	; 15
    7a90:	90 93 1c 0e 	sts	0x0E1C, r25
    7a94:	80 93 1b 0e 	sts	0x0E1B, r24
	game.player.run.anims[0] = (char*) map_hero_step_0;
    7a98:	84 ed       	ldi	r24, 0xD4	; 212
    7a9a:	93 e3       	ldi	r25, 0x33	; 51
    7a9c:	90 93 dd 0f 	sts	0x0FDD, r25
    7aa0:	80 93 dc 0f 	sts	0x0FDC, r24
	game.player.run.anims[1] = (char*) map_hero_step_1;
    7aa4:	8c ec       	ldi	r24, 0xCC	; 204
    7aa6:	93 e3       	ldi	r25, 0x33	; 51
    7aa8:	90 93 df 0f 	sts	0x0FDF, r25
    7aac:	80 93 de 0f 	sts	0x0FDE, r24
	game.player.run.anims[2] = (char*) map_hero_step_2;
    7ab0:	84 ec       	ldi	r24, 0xC4	; 196
    7ab2:	93 e3       	ldi	r25, 0x33	; 51
    7ab4:	90 93 e1 0f 	sts	0x0FE1, r25
    7ab8:	80 93 e0 0f 	sts	0x0FE0, r24
	game.player.run.anims[3] = (char*) map_hero_step_3;
    7abc:	8c eb       	ldi	r24, 0xBC	; 188
    7abe:	93 e3       	ldi	r25, 0x33	; 51
    7ac0:	90 93 e3 0f 	sts	0x0FE3, r25
    7ac4:	80 93 e2 0f 	sts	0x0FE2, r24
    7ac8:	e3 ed       	ldi	r30, 0xD3	; 211
    7aca:	fd e0       	ldi	r31, 0x0D	; 13
	
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
	{
		game.player.shot[i].hit_count = 1;
    7acc:	81 e0       	ldi	r24, 0x01	; 1
		game.player.shot[i].shot_type = BASIC_SHOT;
		game.player.shot[i].anim.anim_count = 1;
		game.player.shot[i].anim.frames_per_anim = 1;
		game.player.shot[i].anim.anims = shot_anim;
    7ace:	26 ee       	ldi	r18, 0xE6	; 230
    7ad0:	3f e0       	ldi	r19, 0x0F	; 15
    7ad2:	df 01       	movw	r26, r30
    7ad4:	14 97       	sbiw	r26, 0x04	; 4
	game.player.run.anims[2] = (char*) map_hero_step_2;
	game.player.run.anims[3] = (char*) map_hero_step_3;
	
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
	{
		game.player.shot[i].hit_count = 1;
    7ad6:	8c 93       	st	X, r24
    7ad8:	11 97       	sbiw	r26, 0x01	; 1
		game.player.shot[i].shot_type = BASIC_SHOT;
    7ada:	1c 92       	st	X, r1
    7adc:	14 96       	adiw	r26, 0x04	; 4
		game.player.shot[i].anim.anim_count = 1;
    7ade:	8c 93       	st	X, r24
		game.player.shot[i].anim.frames_per_anim = 1;
    7ae0:	80 83       	st	Z, r24
		game.player.shot[i].anim.anims = shot_anim;
    7ae2:	35 83       	std	Z+5, r19	; 0x05
    7ae4:	24 83       	std	Z+4, r18	; 0x04
    7ae6:	7a 96       	adiw	r30, 0x1a	; 26
	game.player.run.anims[0] = (char*) map_hero_step_0;
	game.player.run.anims[1] = (char*) map_hero_step_1;
	game.player.run.anims[2] = (char*) map_hero_step_2;
	game.player.run.anims[3] = (char*) map_hero_step_3;
	
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
    7ae8:	9e e0       	ldi	r25, 0x0E	; 14
    7aea:	e1 32       	cpi	r30, 0x21	; 33
    7aec:	f9 07       	cpc	r31, r25
    7aee:	89 f7       	brne	.-30     	; 0x7ad2 <init_player_state+0x10a>
    7af0:	88 e9       	ldi	r24, 0x98	; 152
    7af2:	93 e3       	ldi	r25, 0x33	; 51
    7af4:	90 93 e7 0f 	sts	0x0FE7, r25
    7af8:	80 93 e6 0f 	sts	0x0FE6, r24
    7afc:	08 95       	ret

00007afe <init_enemy_spider>:
		game.player.shot[i].anim.anims[0] = (char*) map_hero_shot;
	}
}

void init_enemy_spider(u8 i, u16 x, u16 y)
{
    7afe:	af 92       	push	r10
    7b00:	bf 92       	push	r11
    7b02:	cf 92       	push	r12
    7b04:	df 92       	push	r13
    7b06:	ef 92       	push	r14
    7b08:	ff 92       	push	r15
    7b0a:	1f 93       	push	r17
    7b0c:	cf 93       	push	r28
    7b0e:	df 93       	push	r29
    7b10:	5a 01       	movw	r10, r20
	game.enemies[i].active = 1;
    7b12:	22 e4       	ldi	r18, 0x42	; 66
    7b14:	82 9f       	mul	r24, r18
    7b16:	c0 01       	movw	r24, r0
    7b18:	11 24       	eor	r1, r1
    7b1a:	ec 01       	movw	r28, r24
    7b1c:	c1 57       	subi	r28, 0x71	; 113
    7b1e:	d2 4f       	sbci	r29, 0xF2	; 242
    7b20:	fe 01       	movw	r30, r28
    7b22:	eb 54       	subi	r30, 0x4B	; 75
    7b24:	ff 4f       	sbci	r31, 0xFF	; 255
    7b26:	11 e0       	ldi	r17, 0x01	; 1
    7b28:	10 83       	st	Z, r17
	game.enemies[i].direction = D_LEFT;
    7b2a:	32 96       	adiw	r30, 0x02	; 2
    7b2c:	10 82       	st	Z, r1
	game.enemies[i].flags = IDLE;
    7b2e:	31 97       	sbiw	r30, 0x01	; 1
    7b30:	88 e0       	ldi	r24, 0x08	; 8
    7b32:	80 83       	st	Z, r24
	game.enemies[i].width = 1;
    7b34:	32 96       	adiw	r30, 0x02	; 2
    7b36:	10 83       	st	Z, r17
	game.enemies[i].height = 1;
    7b38:	31 96       	adiw	r30, 0x01	; 1
    7b3a:	10 83       	st	Z, r17
	game.enemies[i].enemy_type = ENEMY_SPIDER;
    7b3c:	31 96       	adiw	r30, 0x01	; 1
    7b3e:	10 82       	st	Z, r1
	game.enemies[i].frame_count = 0;
    7b40:	31 96       	adiw	r30, 0x01	; 1
    7b42:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    7b44:	31 96       	adiw	r30, 0x01	; 1
    7b46:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_SPIDER_SHIELD;
    7b48:	31 96       	adiw	r30, 0x01	; 1
    7b4a:	82 e0       	ldi	r24, 0x02	; 2
    7b4c:	80 83       	st	Z, r24
	
	game.enemies[i].anim.anim_count = 2;
    7b4e:	7c 96       	adiw	r30, 0x1c	; 28
    7b50:	80 83       	st	Z, r24
	game.enemies[i].anim.frames_per_anim = SPIDER_FRAMES_PER_IDLE;
    7b52:	31 96       	adiw	r30, 0x01	; 1
    7b54:	8a e0       	ldi	r24, 0x0A	; 10
    7b56:	80 83       	st	Z, r24
	game.enemies[i].anim.anims = spider_anim;
    7b58:	de 01       	movw	r26, r28
    7b5a:	a2 52       	subi	r26, 0x22	; 34
    7b5c:	bf 4f       	sbci	r27, 0xFF	; 255
    7b5e:	e8 e8       	ldi	r30, 0x88	; 136
    7b60:	ff e0       	ldi	r31, 0x0F	; 15
    7b62:	ed 93       	st	X+, r30
    7b64:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_spider_0;
    7b66:	8f e8       	ldi	r24, 0x8F	; 143
    7b68:	93 e3       	ldi	r25, 0x33	; 51
    7b6a:	91 83       	std	Z+1, r25	; 0x01
    7b6c:	80 83       	st	Z, r24
	game.enemies[i].anim.anims[1] = (char*) map_enemy_spider_1;
    7b6e:	8c e8       	ldi	r24, 0x8C	; 140
    7b70:	93 e3       	ldi	r25, 0x33	; 51
    7b72:	93 83       	std	Z+3, r25	; 0x03
    7b74:	82 83       	std	Z+2, r24	; 0x02
	game.enemies[i].shared.gravity = 0;
    7b76:	fe 01       	movw	r30, r28
    7b78:	ec 54       	subi	r30, 0x4C	; 76
    7b7a:	ff 4f       	sbci	r31, 0xFF	; 255
    7b7c:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = 0;
    7b7e:	32 97       	sbiw	r30, 0x02	; 2
    7b80:	11 82       	std	Z+1, r1	; 0x01
    7b82:	10 82       	st	Z, r1
	game.enemies[i].shared.vy = 0;
    7b84:	3c 97       	sbiw	r30, 0x0c	; 12
    7b86:	10 82       	st	Z, r1
    7b88:	11 82       	std	Z+1, r1	; 0x01
    7b8a:	12 82       	std	Z+2, r1	; 0x02
    7b8c:	13 82       	std	Z+3, r1	; 0x03
	game.enemies[i].shared.x = x;
    7b8e:	80 e0       	ldi	r24, 0x00	; 0
    7b90:	90 e0       	ldi	r25, 0x00	; 0
    7b92:	0e 94 32 51 	call	0xa264	; 0xa264 <__floatunsisf>
    7b96:	6b 01       	movw	r12, r22
    7b98:	7c 01       	movw	r14, r24
    7b9a:	fe 01       	movw	r30, r28
    7b9c:	e6 55       	subi	r30, 0x56	; 86
    7b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    7ba0:	60 83       	st	Z, r22
    7ba2:	71 83       	std	Z+1, r23	; 0x01
    7ba4:	82 83       	std	Z+2, r24	; 0x02
    7ba6:	93 83       	std	Z+3, r25	; 0x03
	game.enemies[i].shared.y = y;
    7ba8:	b5 01       	movw	r22, r10
    7baa:	80 e0       	ldi	r24, 0x00	; 0
    7bac:	90 e0       	ldi	r25, 0x00	; 0
    7bae:	0e 94 32 51 	call	0xa264	; 0xa264 <__floatunsisf>
    7bb2:	fe 01       	movw	r30, r28
    7bb4:	e2 55       	subi	r30, 0x52	; 82
    7bb6:	ff 4f       	sbci	r31, 0xFF	; 255
    7bb8:	60 83       	st	Z, r22
    7bba:	71 83       	std	Z+1, r23	; 0x01
    7bbc:	82 83       	std	Z+2, r24	; 0x02
    7bbe:	93 83       	std	Z+3, r25	; 0x03
	
	game.enemies[i].expl.anim_count = 3;
    7bc0:	f3 96       	adiw	r30, 0x33	; 51
    7bc2:	23 e0       	ldi	r18, 0x03	; 3
    7bc4:	20 83       	st	Z, r18
	game.enemies[i].expl.frames_per_anim = EXPLOSION_FRAME_COUNT;
    7bc6:	31 96       	adiw	r30, 0x01	; 1
    7bc8:	25 e0       	ldi	r18, 0x05	; 5
    7bca:	20 83       	st	Z, r18
	game.enemies[i].expl.anims = expl_anim;
    7bcc:	de 01       	movw	r26, r28
    7bce:	aa 51       	subi	r26, 0x1A	; 26
    7bd0:	bf 4f       	sbci	r27, 0xFF	; 255
    7bd2:	e8 ee       	ldi	r30, 0xE8	; 232
    7bd4:	ff e0       	ldi	r31, 0x0F	; 15
    7bd6:	11 96       	adiw	r26, 0x01	; 1
    7bd8:	fc 93       	st	X, r31
    7bda:	ee 93       	st	-X, r30
	game.enemies[i].expl.anims[0] = (char*) map_explosion_0;
    7bdc:	2a ee       	ldi	r18, 0xEA	; 234
    7bde:	33 e3       	ldi	r19, 0x33	; 51
    7be0:	31 83       	std	Z+1, r19	; 0x01
    7be2:	20 83       	st	Z, r18
	game.enemies[i].expl.anims[1] = (char*) map_explosion_1;
    7be4:	27 ee       	ldi	r18, 0xE7	; 231
    7be6:	33 e3       	ldi	r19, 0x33	; 51
    7be8:	33 83       	std	Z+3, r19	; 0x03
    7bea:	22 83       	std	Z+2, r18	; 0x02
	game.enemies[i].expl.anims[2] = (char*) map_explosion_2;
    7bec:	24 ee       	ldi	r18, 0xE4	; 228
    7bee:	33 e3       	ldi	r19, 0x33	; 51
    7bf0:	35 83       	std	Z+5, r19	; 0x05
    7bf2:	24 83       	std	Z+4, r18	; 0x04
		
	for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
	{
		game.enemies[i].shot[j].hit_count = 1;
    7bf4:	fe 01       	movw	r30, r28
    7bf6:	e2 53       	subi	r30, 0x32	; 50
    7bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    7bfa:	10 83       	st	Z, r17
		game.enemies[i].shot[j].active = 0;
    7bfc:	31 96       	adiw	r30, 0x01	; 1
    7bfe:	10 82       	st	Z, r1
		game.enemies[i].shot[j].shot_type = BASIC_ENEMY_SHOT;
    7c00:	32 97       	sbiw	r30, 0x02	; 2
    7c02:	10 83       	st	Z, r17
		game.enemies[i].shot[j].anim.anim_count = 1;
    7c04:	34 96       	adiw	r30, 0x04	; 4
    7c06:	10 83       	st	Z, r17
		game.enemies[i].shot[j].anim.frames_per_anim = 1;
    7c08:	31 96       	adiw	r30, 0x01	; 1
    7c0a:	10 83       	st	Z, r17
		game.enemies[i].shot[j].anim.anims = enemy_shot_anim;
    7c0c:	50 97       	sbiw	r26, 0x10	; 16
    7c0e:	e4 ee       	ldi	r30, 0xE4	; 228
    7c10:	ff e0       	ldi	r31, 0x0F	; 15
    7c12:	ed 93       	st	X+, r30
    7c14:	fc 93       	st	X, r31
		game.enemies[i].shot[j].anim.anims[0] = (char*) map_enemy_shot;
    7c16:	25 e9       	ldi	r18, 0x95	; 149
    7c18:	33 e3       	ldi	r19, 0x33	; 51
    7c1a:	31 83       	std	Z+1, r19	; 0x01
    7c1c:	20 83       	st	Z, r18
		game.enemies[i].shot[j].shared.vx = 0;
    7c1e:	fe 01       	movw	r30, r28
    7c20:	e6 53       	subi	r30, 0x36	; 54
    7c22:	ff 4f       	sbci	r31, 0xFF	; 255
    7c24:	11 82       	std	Z+1, r1	; 0x01
    7c26:	10 82       	st	Z, r1
		game.enemies[i].shot[j].shared.vy = 0;
    7c28:	3c 97       	sbiw	r30, 0x0c	; 12
    7c2a:	10 82       	st	Z, r1
    7c2c:	11 82       	std	Z+1, r1	; 0x01
    7c2e:	12 82       	std	Z+2, r1	; 0x02
    7c30:	13 82       	std	Z+3, r1	; 0x03
		game.enemies[i].shot[j].shared.x = x;
    7c32:	34 96       	adiw	r30, 0x04	; 4
    7c34:	c0 82       	st	Z, r12
    7c36:	d1 82       	std	Z+1, r13	; 0x01
    7c38:	e2 82       	std	Z+2, r14	; 0x02
    7c3a:	f3 82       	std	Z+3, r15	; 0x03
		game.enemies[i].shot[j].shared.y = y;
    7c3c:	ca 53       	subi	r28, 0x3A	; 58
    7c3e:	df 4f       	sbci	r29, 0xFF	; 255
    7c40:	68 83       	st	Y, r22
    7c42:	79 83       	std	Y+1, r23	; 0x01
    7c44:	8a 83       	std	Y+2, r24	; 0x02
    7c46:	9b 83       	std	Y+3, r25	; 0x03
	}
}
    7c48:	df 91       	pop	r29
    7c4a:	cf 91       	pop	r28
    7c4c:	1f 91       	pop	r17
    7c4e:	ff 90       	pop	r15
    7c50:	ef 90       	pop	r14
    7c52:	df 90       	pop	r13
    7c54:	cf 90       	pop	r12
    7c56:	bf 90       	pop	r11
    7c58:	af 90       	pop	r10
    7c5a:	08 95       	ret

00007c5c <fade_through>:
	EepromWriteBlock(block);
}

void fade_through()
{
	FadeOut(FRAMES_PER_FADE, true);
    7c5c:	61 e0       	ldi	r22, 0x01	; 1
    7c5e:	83 e0       	ldi	r24, 0x03	; 3
    7c60:	0e 94 17 3b 	call	0x762e	; 0x762e <FadeOut>
	ClearVram();
    7c64:	0e 94 fd 2b 	call	0x57fa	; 0x57fa <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    7c68:	60 e0       	ldi	r22, 0x00	; 0
    7c6a:	83 e0       	ldi	r24, 0x03	; 3
    7c6c:	0c 94 0b 3b 	jmp	0x7616	; 0x7616 <FadeIn>

00007c70 <render_level_tile>:
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
    7c70:	0f 93       	push	r16
    7c72:	1f 93       	push	r17
    7c74:	e8 2f       	mov	r30, r24
    7c76:	86 2f       	mov	r24, r22
    7c78:	64 2f       	mov	r22, r20
	switch (level_tile)
    7c7a:	0e 2f       	mov	r16, r30
    7c7c:	10 e0       	ldi	r17, 0x00	; 0
    7c7e:	07 30       	cpi	r16, 0x07	; 7
    7c80:	11 05       	cpc	r17, r1
    7c82:	e8 f4       	brcc	.+58     	; 0x7cbe <render_level_tile+0x4e>
    7c84:	f8 01       	movw	r30, r16
    7c86:	e8 5c       	subi	r30, 0xC8	; 200
    7c88:	ff 4f       	sbci	r31, 0xFF	; 255
    7c8a:	0c 94 97 50 	jmp	0xa12e	; 0xa12e <__tablejump2__>
	{
		case L_ICE_SKY : LBDrawTile(x, y, map_ice_sky); break;
    7c8e:	40 ed       	ldi	r20, 0xD0	; 208
    7c90:	5c e4       	ldi	r21, 0x4C	; 76
    7c92:	11 c0       	rjmp	.+34     	; 0x7cb6 <render_level_tile+0x46>
		case L_ICE_MIDDLE : LBDrawTile(x, y, map_ice_middle); break;
    7c94:	4c ed       	ldi	r20, 0xDC	; 220
    7c96:	5c e4       	ldi	r21, 0x4C	; 76
    7c98:	0e c0       	rjmp	.+28     	; 0x7cb6 <render_level_tile+0x46>
		case L_ICE_LEFT : LBDrawTile(x, y, map_ice_left); break;
    7c9a:	4f ed       	ldi	r20, 0xDF	; 223
    7c9c:	5c e4       	ldi	r21, 0x4C	; 76
    7c9e:	0b c0       	rjmp	.+22     	; 0x7cb6 <render_level_tile+0x46>
		case L_ICE_RIGHT : LBDrawTile(x, y, map_ice_right); break;
    7ca0:	49 ed       	ldi	r20, 0xD9	; 217
    7ca2:	5c e4       	ldi	r21, 0x4C	; 76
    7ca4:	08 c0       	rjmp	.+16     	; 0x7cb6 <render_level_tile+0x46>
		case L_ICE_BOTTOM : LBDrawTile(x, y, map_ice_bottom); break;
    7ca6:	46 ed       	ldi	r20, 0xD6	; 214
    7ca8:	5c e4       	ldi	r21, 0x4C	; 76
    7caa:	05 c0       	rjmp	.+10     	; 0x7cb6 <render_level_tile+0x46>
		case L_ICE_FAR : LBDrawTile(x, y, map_ice_far); break;
    7cac:	4d ec       	ldi	r20, 0xCD	; 205
    7cae:	5c e4       	ldi	r21, 0x4C	; 76
    7cb0:	02 c0       	rjmp	.+4      	; 0x7cb6 <render_level_tile+0x46>
		case L_ICE_HORIZON : LBDrawTile(x, y, map_ice_horizon); break;
    7cb2:	43 ed       	ldi	r20, 0xD3	; 211
    7cb4:	5c e4       	ldi	r21, 0x4C	; 76
	}
}
    7cb6:	1f 91       	pop	r17
    7cb8:	0f 91       	pop	r16
		case L_ICE_MIDDLE : LBDrawTile(x, y, map_ice_middle); break;
		case L_ICE_LEFT : LBDrawTile(x, y, map_ice_left); break;
		case L_ICE_RIGHT : LBDrawTile(x, y, map_ice_right); break;
		case L_ICE_BOTTOM : LBDrawTile(x, y, map_ice_bottom); break;
		case L_ICE_FAR : LBDrawTile(x, y, map_ice_far); break;
		case L_ICE_HORIZON : LBDrawTile(x, y, map_ice_horizon); break;
    7cba:	0c 94 c1 3c 	jmp	0x7982	; 0x7982 <LBDrawTile>
	}
}
    7cbe:	1f 91       	pop	r17
    7cc0:	0f 91       	pop	r16
    7cc2:	08 95       	ret

00007cc4 <clear_overlay>:

void clear_overlay(u8 overlayHeight)
{
    7cc4:	1f 93       	push	r17
    7cc6:	cf 93       	push	r28
    7cc8:	df 93       	push	r29
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
    7cca:	d0 e0       	ldi	r29, 0x00	; 0
    7ccc:	10 e2       	ldi	r17, 0x20	; 32
    7cce:	18 0f       	add	r17, r24
		case L_ICE_HORIZON : LBDrawTile(x, y, map_ice_horizon); break;
	}
}

void clear_overlay(u8 overlayHeight)
{
    7cd0:	c0 e2       	ldi	r28, 0x20	; 32
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
	{
		for(u8 y = 0; y < overlayHeight; y++)
    7cd2:	c1 17       	cp	r28, r17
    7cd4:	41 f0       	breq	.+16     	; 0x7ce6 <clear_overlay+0x22>
		{
			SetTile(x, VRAM_TILES_V+y, 0);
    7cd6:	40 e0       	ldi	r20, 0x00	; 0
    7cd8:	50 e0       	ldi	r21, 0x00	; 0
    7cda:	6c 2f       	mov	r22, r28
    7cdc:	8d 2f       	mov	r24, r29
    7cde:	0e 94 0b 2c 	call	0x5816	; 0x5816 <SetTile>
    7ce2:	cf 5f       	subi	r28, 0xFF	; 255
    7ce4:	f6 cf       	rjmp	.-20     	; 0x7cd2 <clear_overlay+0xe>
	}
}

void clear_overlay(u8 overlayHeight)
{
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
    7ce6:	df 5f       	subi	r29, 0xFF	; 255
    7ce8:	dc 31       	cpi	r29, 0x1C	; 28
    7cea:	91 f7       	brne	.-28     	; 0x7cd0 <clear_overlay+0xc>
		for(u8 y = 0; y < overlayHeight; y++)
		{
			SetTile(x, VRAM_TILES_V+y, 0);
		}
	}
}
    7cec:	df 91       	pop	r29
    7cee:	cf 91       	pop	r28
    7cf0:	1f 91       	pop	r17
    7cf2:	08 95       	ret

00007cf4 <read_level_byte>:
#else
u8 read_level_byte(u16 index)
{
	// C Code
	
	u16 counter = index / 128 * 16;
    7cf4:	fc 01       	movw	r30, r24
    7cf6:	ee 0f       	add	r30, r30
    7cf8:	ef 2f       	mov	r30, r31
    7cfa:	ee 1f       	adc	r30, r30
    7cfc:	ff 0b       	sbc	r31, r31
    7cfe:	f1 95       	neg	r31
    7d00:	34 e0       	ldi	r19, 0x04	; 4
    7d02:	ee 0f       	add	r30, r30
    7d04:	ff 1f       	adc	r31, r31
    7d06:	3a 95       	dec	r19
    7d08:	e1 f7       	brne	.-8      	; 0x7d02 <read_level_byte+0xe>
	u16 cumulative_rlength = counter * 8;
    7d0a:	af 01       	movw	r20, r30
    7d0c:	63 e0       	ldi	r22, 0x03	; 3
    7d0e:	44 0f       	add	r20, r20
    7d10:	55 1f       	adc	r21, r21
    7d12:	6a 95       	dec	r22
    7d14:	e1 f7       	brne	.-8      	; 0x7d0e <read_level_byte+0x1a>
		counter += 2;
	}
	return 0;*/
	
	// ASM Code
	index += 1;
    7d16:	01 96       	adiw	r24, 0x01	; 1
	counter += (u16) &level_data;
    7d18:	ee 53       	subi	r30, 0x3E	; 62
    7d1a:	f3 4e       	sbci	r31, 0xE3	; 227
	  [cntr] "+z" (counter),
	  [crln] "+r" (cumulative_rlength),
	  [rln]  "+r" (rlength),
	  [vl]   "=&r" (value));
	return value;
}
    7d1c:	9c 01       	movw	r18, r24
    7d1e:	90 e0       	ldi	r25, 0x00	; 0

00007d20 <while1>:
    7d20:	95 91       	lpm	r25, Z+
    7d22:	85 91       	lpm	r24, Z+
    7d24:	49 0f       	add	r20, r25
    7d26:	51 1d       	adc	r21, r1
    7d28:	42 17       	cp	r20, r18
    7d2a:	53 07       	cpc	r21, r19
    7d2c:	08 f4       	brcc	.+2      	; 0x7d30 <while1done>
    7d2e:	f8 cf       	rjmp	.-16     	; 0x7d20 <while1>

00007d30 <while1done>:
    7d30:	08 95       	ret

00007d32 <get_camera_x>:

#endif

u8 get_camera_x(u8 level_index)
{
	return read_level_byte(level_index*LEVEL_WIDTH*LEVEL_HEIGHT + level_index*4 + 0);
    7d32:	25 e0       	ldi	r18, 0x05	; 5
    7d34:	3e ef       	ldi	r19, 0xFE	; 254
    7d36:	48 2f       	mov	r20, r24
    7d38:	42 9f       	mul	r20, r18
    7d3a:	c0 01       	movw	r24, r0
    7d3c:	43 9f       	mul	r20, r19
    7d3e:	90 0d       	add	r25, r0
    7d40:	11 24       	eor	r1, r1
    7d42:	0c 94 7a 3e 	jmp	0x7cf4	; 0x7cf4 <read_level_byte>

00007d46 <get_camera_y>:
}

u8 get_camera_y(u8 level_index)
{
	return read_level_byte(level_index*LEVEL_WIDTH*LEVEL_HEIGHT + level_index*4 + 1);
    7d46:	25 e0       	ldi	r18, 0x05	; 5
    7d48:	3e ef       	ldi	r19, 0xFE	; 254
    7d4a:	48 2f       	mov	r20, r24
    7d4c:	42 9f       	mul	r20, r18
    7d4e:	c0 01       	movw	r24, r0
    7d50:	43 9f       	mul	r20, r19
    7d52:	90 0d       	add	r25, r0
    7d54:	11 24       	eor	r1, r1
    7d56:	01 96       	adiw	r24, 0x01	; 1
    7d58:	0c 94 7a 3e 	jmp	0x7cf4	; 0x7cf4 <read_level_byte>

00007d5c <get_hero_spawn_x>:
}

u8 get_hero_spawn_x(u8 level_index)
{
	return read_level_byte(level_index*LEVEL_WIDTH*LEVEL_HEIGHT + level_index*4 + 2);
    7d5c:	25 e0       	ldi	r18, 0x05	; 5
    7d5e:	3e ef       	ldi	r19, 0xFE	; 254
    7d60:	48 2f       	mov	r20, r24
    7d62:	42 9f       	mul	r20, r18
    7d64:	c0 01       	movw	r24, r0
    7d66:	43 9f       	mul	r20, r19
    7d68:	90 0d       	add	r25, r0
    7d6a:	11 24       	eor	r1, r1
    7d6c:	02 96       	adiw	r24, 0x02	; 2
    7d6e:	0c 94 7a 3e 	jmp	0x7cf4	; 0x7cf4 <read_level_byte>

00007d72 <get_hero_spawn_y>:
}

u8 get_hero_spawn_y(u8 level_index)
{
	return read_level_byte(level_index*LEVEL_WIDTH*LEVEL_HEIGHT + level_index*4 + 3);
    7d72:	25 e0       	ldi	r18, 0x05	; 5
    7d74:	3e ef       	ldi	r19, 0xFE	; 254
    7d76:	48 2f       	mov	r20, r24
    7d78:	42 9f       	mul	r20, r18
    7d7a:	c0 01       	movw	r24, r0
    7d7c:	43 9f       	mul	r20, r19
    7d7e:	90 0d       	add	r25, r0
    7d80:	11 24       	eor	r1, r1
    7d82:	03 96       	adiw	r24, 0x03	; 3
    7d84:	0c 94 7a 3e 	jmp	0x7cf4	; 0x7cf4 <read_level_byte>

00007d88 <get_level_tile>:
}

u8 get_level_tile(u8 level_index, u16 x, u16 y)
{
    7d88:	6c 5f       	subi	r22, 0xFC	; 252
    7d8a:	7f 4f       	sbci	r23, 0xFF	; 255
	return read_level_byte(level_index*LEVEL_WIDTH*LEVEL_HEIGHT + level_index*4 + 4 + (y*LEVEL_WIDTH+x));
    7d8c:	9f ef       	ldi	r25, 0xFF	; 255
    7d8e:	94 9f       	mul	r25, r20
    7d90:	90 01       	movw	r18, r0
    7d92:	95 9f       	mul	r25, r21
    7d94:	30 0d       	add	r19, r0
    7d96:	11 24       	eor	r1, r1
    7d98:	62 0f       	add	r22, r18
    7d9a:	73 1f       	adc	r23, r19
    7d9c:	25 e0       	ldi	r18, 0x05	; 5
    7d9e:	3e ef       	ldi	r19, 0xFE	; 254
    7da0:	48 2f       	mov	r20, r24
    7da2:	42 9f       	mul	r20, r18
    7da4:	c0 01       	movw	r24, r0
    7da6:	43 9f       	mul	r20, r19
    7da8:	90 0d       	add	r25, r0
    7daa:	11 24       	eor	r1, r1
    7dac:	86 0f       	add	r24, r22
    7dae:	97 1f       	adc	r25, r23
    7db0:	0c 94 7a 3e 	jmp	0x7cf4	; 0x7cf4 <read_level_byte>

00007db4 <render_camera_view>:
}

void render_camera_view()
{
    7db4:	7f 92       	push	r7
    7db6:	8f 92       	push	r8
    7db8:	9f 92       	push	r9
    7dba:	af 92       	push	r10
    7dbc:	bf 92       	push	r11
    7dbe:	cf 92       	push	r12
    7dc0:	df 92       	push	r13
    7dc2:	ef 92       	push	r14
    7dc4:	ff 92       	push	r15
    7dc6:	0f 93       	push	r16
    7dc8:	1f 93       	push	r17
    7dca:	cf 93       	push	r28
    7dcc:	df 93       	push	r29
	u8 level_tile;
	u16 camara_x_tile = game.camera_x/8;
    7dce:	c0 91 93 0d 	lds	r28, 0x0D93
    7dd2:	d0 91 94 0d 	lds	r29, 0x0D94
    7dd6:	83 e0       	ldi	r24, 0x03	; 3
    7dd8:	d6 95       	lsr	r29
    7dda:	c7 95       	ror	r28
    7ddc:	8a 95       	dec	r24
    7dde:	e1 f7       	brne	.-8      	; 0x7dd8 <render_camera_view+0x24>
	u16 camera_y_tile = game.camera_y/8;
    7de0:	c0 90 95 0d 	lds	r12, 0x0D95
    7de4:	d0 90 96 0d 	lds	r13, 0x0D96
    7de8:	93 e0       	ldi	r25, 0x03	; 3
    7dea:	d6 94       	lsr	r13
    7dec:	c7 94       	ror	r12
    7dee:	9a 95       	dec	r25
    7df0:	e1 f7       	brne	.-8      	; 0x7dea <render_camera_view+0x36>
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    7df2:	8e 01       	movw	r16, r28
    7df4:	5e 01       	movw	r10, r28
    7df6:	8c e1       	ldi	r24, 0x1C	; 28
    7df8:	a8 0e       	add	r10, r24
    7dfa:	b1 1c       	adc	r11, r1
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    7dfc:	46 01       	movw	r8, r12
    7dfe:	8a e1       	ldi	r24, 0x1A	; 26
    7e00:	88 0e       	add	r8, r24
    7e02:	91 1c       	adc	r9, r1
{
	u8 level_tile;
	u16 camara_x_tile = game.camera_x/8;
	u16 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    7e04:	a0 16       	cp	r10, r16
    7e06:	b1 06       	cpc	r11, r17
    7e08:	c0 f0       	brcs	.+48     	; 0x7e3a <render_camera_view+0x86>
    7e0a:	76 01       	movw	r14, r12
    7e0c:	70 2e       	mov	r7, r16
    7e0e:	7c 1a       	sub	r7, r28
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    7e10:	8e 14       	cp	r8, r14
    7e12:	9f 04       	cpc	r9, r15
    7e14:	78 f0       	brcs	.+30     	; 0x7e34 <render_camera_view+0x80>
		{
			level_tile = get_level_tile(game.current_level, x, y);
    7e16:	a7 01       	movw	r20, r14
    7e18:	b8 01       	movw	r22, r16
    7e1a:	80 91 9f 0d 	lds	r24, 0x0D9F
    7e1e:	0e 94 c4 3e 	call	0x7d88	; 0x7d88 <get_level_tile>
    7e22:	4e 2d       	mov	r20, r14
    7e24:	4c 19       	sub	r20, r12
			render_level_tile(level_tile, x - camara_x_tile, y - camera_y_tile);
    7e26:	67 2d       	mov	r22, r7
    7e28:	0e 94 38 3e 	call	0x7c70	; 0x7c70 <render_level_tile>
	u16 camara_x_tile = game.camera_x/8;
	u16 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    7e2c:	8f ef       	ldi	r24, 0xFF	; 255
    7e2e:	e8 1a       	sub	r14, r24
    7e30:	f8 0a       	sbc	r15, r24
    7e32:	ee cf       	rjmp	.-36     	; 0x7e10 <render_camera_view+0x5c>
{
	u8 level_tile;
	u16 camara_x_tile = game.camera_x/8;
	u16 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    7e34:	0f 5f       	subi	r16, 0xFF	; 255
    7e36:	1f 4f       	sbci	r17, 0xFF	; 255
    7e38:	e5 cf       	rjmp	.-54     	; 0x7e04 <render_camera_view+0x50>
		{
			level_tile = get_level_tile(game.current_level, x, y);
			render_level_tile(level_tile, x - camara_x_tile, y - camera_y_tile);
		}
	}
}
    7e3a:	df 91       	pop	r29
    7e3c:	cf 91       	pop	r28
    7e3e:	1f 91       	pop	r17
    7e40:	0f 91       	pop	r16
    7e42:	ff 90       	pop	r15
    7e44:	ef 90       	pop	r14
    7e46:	df 90       	pop	r13
    7e48:	cf 90       	pop	r12
    7e4a:	bf 90       	pop	r11
    7e4c:	af 90       	pop	r10
    7e4e:	9f 90       	pop	r9
    7e50:	8f 90       	pop	r8
    7e52:	7f 90       	pop	r7
    7e54:	08 95       	ret

00007e56 <spawn_enemy>:

void spawn_enemy(u16 x, u16 y)
{
    7e56:	fc 01       	movw	r30, r24
    7e58:	2f e8       	ldi	r18, 0x8F	; 143
    7e5a:	3d e0       	ldi	r19, 0x0D	; 13
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    7e5c:	90 e0       	ldi	r25, 0x00	; 0
    7e5e:	d9 01       	movw	r26, r18
    7e60:	ab 54       	subi	r26, 0x4B	; 75
    7e62:	bf 4f       	sbci	r27, 0xFF	; 255
	{
		if (!game.enemies[i].active)
    7e64:	8c 91       	ld	r24, X
    7e66:	81 11       	cpse	r24, r1
    7e68:	0f c0       	rjmp	.+30     	; 0x7e88 <spawn_enemy+0x32>
    7e6a:	5a 96       	adiw	r26, 0x1a	; 26
		{
			for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
			{
				if (!game.enemies[i].shot[j].active)
    7e6c:	8c 91       	ld	r24, X
    7e6e:	81 11       	cpse	r24, r1
    7e70:	0b c0       	rjmp	.+22     	; 0x7e88 <spawn_enemy+0x32>
    7e72:	ab 01       	movw	r20, r22
    7e74:	bf 01       	movw	r22, r30
				{
					init_enemy_spider(i, x, y);
    7e76:	89 2f       	mov	r24, r25
    7e78:	0e 94 7f 3d 	call	0x7afe	; 0x7afe <init_enemy_spider>
					game.active_enemies++;
    7e7c:	80 91 a7 0d 	lds	r24, 0x0DA7
    7e80:	8f 5f       	subi	r24, 0xFF	; 255
    7e82:	80 93 a7 0d 	sts	0x0DA7, r24
					return;
    7e86:	08 95       	ret
	}
}

void spawn_enemy(u16 x, u16 y)
{
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    7e88:	9f 5f       	subi	r25, 0xFF	; 255
    7e8a:	2e 5b       	subi	r18, 0xBE	; 190
    7e8c:	3f 4f       	sbci	r19, 0xFF	; 255
    7e8e:	95 30       	cpi	r25, 0x05	; 5
    7e90:	31 f7       	brne	.-52     	; 0x7e5e <spawn_enemy+0x8>
    7e92:	08 95       	ret

00007e94 <solid_tile>:
	}
}

char solid_tile(u8 level_tile)
{
	switch (level_tile)
    7e94:	81 50       	subi	r24, 0x01	; 1
    7e96:	84 30       	cpi	r24, 0x04	; 4
    7e98:	10 f0       	brcs	.+4      	; 0x7e9e <solid_tile+0xa>
		case L_ICE_MIDDLE : return 1;
		case L_ICE_LEFT : return 1;
		case L_ICE_RIGHT : return 1;
		case L_ICE_BOTTOM : return 1;
	}
	return 0;
    7e9a:	80 e0       	ldi	r24, 0x00	; 0
    7e9c:	08 95       	ret

char solid_tile(u8 level_tile)
{
	switch (level_tile)
	{
		case L_ICE_MIDDLE : return 1;
    7e9e:	81 e0       	ldi	r24, 0x01	; 1
		case L_ICE_LEFT : return 1;
		case L_ICE_RIGHT : return 1;
		case L_ICE_BOTTOM : return 1;
	}
	return 0;
}
    7ea0:	08 95       	ret

00007ea2 <append_tile_column>:

void append_tile_column()
{
    7ea2:	ef 92       	push	r14
    7ea4:	ff 92       	push	r15
    7ea6:	0f 93       	push	r16
    7ea8:	1f 93       	push	r17
    7eaa:	cf 93       	push	r28
    7eac:	df 93       	push	r29
	u8 enemy_spawned = 0;
	u8 level_tile;

	game.column_count++;
    7eae:	80 91 9b 0d 	lds	r24, 0x0D9B
    7eb2:	90 91 9c 0d 	lds	r25, 0x0D9C
    7eb6:	01 96       	adiw	r24, 0x01	; 1
    7eb8:	90 93 9c 0d 	sts	0x0D9C, r25
    7ebc:	80 93 9b 0d 	sts	0x0D9B, r24
    7ec0:	c0 e0       	ldi	r28, 0x00	; 0
    7ec2:	d0 e0       	ldi	r29, 0x00	; 0
	return 0;
}

void append_tile_column()
{
	u8 enemy_spawned = 0;
    7ec4:	f1 2c       	mov	r15, r1

	game.column_count++;
    for (u8 y = 0; y <= CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
    7ec6:	0e e1       	ldi	r16, 0x1E	; 30
    7ec8:	10 e0       	ldi	r17, 0x00	; 0
	u8 level_tile;

	game.column_count++;
    for (u8 y = 0; y <= CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
    7eca:	40 91 95 0d 	lds	r20, 0x0D95
    7ece:	50 91 96 0d 	lds	r21, 0x0D96
    7ed2:	63 e0       	ldi	r22, 0x03	; 3
    7ed4:	56 95       	lsr	r21
    7ed6:	47 95       	ror	r20
    7ed8:	6a 95       	dec	r22
    7eda:	e1 f7       	brne	.-8      	; 0x7ed4 <append_tile_column+0x32>
    7edc:	4c 0f       	add	r20, r28
    7ede:	5d 1f       	adc	r21, r29
    7ee0:	60 91 8f 0d 	lds	r22, 0x0D8F
    7ee4:	70 91 90 0d 	lds	r23, 0x0D90
    7ee8:	80 91 9f 0d 	lds	r24, 0x0D9F
    7eec:	0e 94 c4 3e 	call	0x7d88	; 0x7d88 <get_level_tile>
    7ef0:	e8 2e       	mov	r14, r24
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
    7ef2:	90 91 9d 0c 	lds	r25, 0x0C9D
    7ef6:	96 95       	lsr	r25
    7ef8:	96 95       	lsr	r25
    7efa:	96 95       	lsr	r25
    7efc:	9e 01       	movw	r18, r28
    7efe:	29 0f       	add	r18, r25
    7f00:	31 1d       	adc	r19, r1
    7f02:	c9 01       	movw	r24, r18
    7f04:	b8 01       	movw	r22, r16
    7f06:	0e 94 83 50 	call	0xa106	; 0xa106 <__divmodhi4>
    7f0a:	48 2f       	mov	r20, r24
    7f0c:	60 91 a5 0d 	lds	r22, 0x0DA5
    7f10:	8e 2d       	mov	r24, r14
    7f12:	0e 94 38 3e 	call	0x7c70	; 0x7c70 <render_level_tile>
		if (game.column_count % game.spawn_rate == game.spawn_rate - 1 && game.active_enemies < MAX_ENEMIES && !enemy_spawned && solid_tile(level_tile))
    7f16:	20 91 a8 0d 	lds	r18, 0x0DA8
    7f1a:	30 e0       	ldi	r19, 0x00	; 0
    7f1c:	80 91 9b 0d 	lds	r24, 0x0D9B
    7f20:	90 91 9c 0d 	lds	r25, 0x0D9C
    7f24:	b9 01       	movw	r22, r18
    7f26:	0e 94 6f 50 	call	0xa0de	; 0xa0de <__udivmodhi4>
    7f2a:	21 50       	subi	r18, 0x01	; 1
    7f2c:	31 09       	sbc	r19, r1
    7f2e:	82 17       	cp	r24, r18
    7f30:	93 07       	cpc	r25, r19
    7f32:	49 f5       	brne	.+82     	; 0x7f86 <append_tile_column+0xe4>
    7f34:	80 91 a7 0d 	lds	r24, 0x0DA7
    7f38:	85 30       	cpi	r24, 0x05	; 5
    7f3a:	28 f5       	brcc	.+74     	; 0x7f86 <append_tile_column+0xe4>
    7f3c:	f1 10       	cpse	r15, r1
    7f3e:	21 c0       	rjmp	.+66     	; 0x7f82 <append_tile_column+0xe0>
    7f40:	8e 2d       	mov	r24, r14
    7f42:	0e 94 4a 3f 	call	0x7e94	; 0x7e94 <solid_tile>
    7f46:	88 23       	and	r24, r24
    7f48:	f1 f0       	breq	.+60     	; 0x7f86 <append_tile_column+0xe4>
		{
			spawn_enemy(game.camera_x+(CAMERA_WIDTH+1)*8, (game.camera_y / 8 + y - 1)*8);
    7f4a:	60 91 95 0d 	lds	r22, 0x0D95
    7f4e:	70 91 96 0d 	lds	r23, 0x0D96
    7f52:	cb 01       	movw	r24, r22
    7f54:	23 e0       	ldi	r18, 0x03	; 3
    7f56:	96 95       	lsr	r25
    7f58:	87 95       	ror	r24
    7f5a:	2a 95       	dec	r18
    7f5c:	e1 f7       	brne	.-8      	; 0x7f56 <append_tile_column+0xb4>
    7f5e:	bc 01       	movw	r22, r24
    7f60:	61 50       	subi	r22, 0x01	; 1
    7f62:	70 4e       	sbci	r23, 0xE0	; 224
    7f64:	6c 0f       	add	r22, r28
    7f66:	7d 1f       	adc	r23, r29
    7f68:	33 e0       	ldi	r19, 0x03	; 3
    7f6a:	66 0f       	add	r22, r22
    7f6c:	77 1f       	adc	r23, r23
    7f6e:	3a 95       	dec	r19
    7f70:	e1 f7       	brne	.-8      	; 0x7f6a <append_tile_column+0xc8>
    7f72:	80 91 93 0d 	lds	r24, 0x0D93
    7f76:	90 91 94 0d 	lds	r25, 0x0D94
    7f7a:	88 51       	subi	r24, 0x18	; 24
    7f7c:	9f 4f       	sbci	r25, 0xFF	; 255
    7f7e:	0e 94 2b 3f 	call	0x7e56	; 0x7e56 <spawn_enemy>
    7f82:	ff 24       	eor	r15, r15
    7f84:	f3 94       	inc	r15
    7f86:	21 96       	adiw	r28, 0x01	; 1
{
	u8 enemy_spawned = 0;
	u8 level_tile;

	game.column_count++;
    for (u8 y = 0; y <= CAMERA_HEIGHT; y++)
    7f88:	cb 31       	cpi	r28, 0x1B	; 27
    7f8a:	d1 05       	cpc	r29, r1
    7f8c:	09 f0       	breq	.+2      	; 0x7f90 <append_tile_column+0xee>
    7f8e:	9d cf       	rjmp	.-198    	; 0x7eca <append_tile_column+0x28>
			spawn_enemy(game.camera_x+(CAMERA_WIDTH+1)*8, (game.camera_y / 8 + y - 1)*8);
			enemy_spawned = 1;
		}
    }
	
    game.scroll_src_x++;
    7f90:	80 91 8f 0d 	lds	r24, 0x0D8F
    7f94:	90 91 90 0d 	lds	r25, 0x0D90
    7f98:	01 96       	adiw	r24, 0x01	; 1
    7f9a:	90 93 90 0d 	sts	0x0D90, r25
    7f9e:	80 93 8f 0d 	sts	0x0D8F, r24
	game.scroll_dest_x++;
    7fa2:	80 91 a5 0d 	lds	r24, 0x0DA5
    7fa6:	8f 5f       	subi	r24, 0xFF	; 255
    if(game.scroll_dest_x>=32)game.scroll_dest_x=0;
    7fa8:	80 32       	cpi	r24, 0x20	; 32
    7faa:	18 f4       	brcc	.+6      	; 0x7fb2 <append_tile_column+0x110>
			enemy_spawned = 1;
		}
    }
	
    game.scroll_src_x++;
	game.scroll_dest_x++;
    7fac:	80 93 a5 0d 	sts	0x0DA5, r24
    7fb0:	02 c0       	rjmp	.+4      	; 0x7fb6 <append_tile_column+0x114>
    if(game.scroll_dest_x>=32)game.scroll_dest_x=0;
    7fb2:	10 92 a5 0d 	sts	0x0DA5, r1
}
    7fb6:	df 91       	pop	r29
    7fb8:	cf 91       	pop	r28
    7fba:	1f 91       	pop	r17
    7fbc:	0f 91       	pop	r16
    7fbe:	ff 90       	pop	r15
    7fc0:	ef 90       	pop	r14
    7fc2:	08 95       	ret

00007fc4 <append_tile_row>:

void append_tile_row()
{
    7fc4:	cf 93       	push	r28
    7fc6:	df 93       	push	r29
    7fc8:	c0 e0       	ldi	r28, 0x00	; 0
    7fca:	d0 e0       	ldi	r29, 0x00	; 0
	u8 level_tile;

    for (u8 x = 0; x <= CAMERA_WIDTH; x++)
	{
		level_tile = get_level_tile(game.current_level, x + game.camera_x / 8, game.scroll_src_y);
    7fcc:	40 91 91 0d 	lds	r20, 0x0D91
    7fd0:	50 91 92 0d 	lds	r21, 0x0D92
    7fd4:	60 91 93 0d 	lds	r22, 0x0D93
    7fd8:	70 91 94 0d 	lds	r23, 0x0D94
    7fdc:	83 e0       	ldi	r24, 0x03	; 3
    7fde:	76 95       	lsr	r23
    7fe0:	67 95       	ror	r22
    7fe2:	8a 95       	dec	r24
    7fe4:	e1 f7       	brne	.-8      	; 0x7fde <append_tile_row+0x1a>
    7fe6:	6c 0f       	add	r22, r28
    7fe8:	7d 1f       	adc	r23, r29
    7fea:	80 91 9f 0d 	lds	r24, 0x0D9F
    7fee:	0e 94 c4 3e 	call	0x7d88	; 0x7d88 <get_level_tile>
		render_level_tile(level_tile, (x + Screen.scrollX / 8) % 32, game.scroll_dest_y);
    7ff2:	60 91 9c 0c 	lds	r22, 0x0C9C
    7ff6:	66 95       	lsr	r22
    7ff8:	66 95       	lsr	r22
    7ffa:	66 95       	lsr	r22
    7ffc:	6c 0f       	add	r22, r28
    7ffe:	6f 71       	andi	r22, 0x1F	; 31
    8000:	40 91 a6 0d 	lds	r20, 0x0DA6
    8004:	0e 94 38 3e 	call	0x7c70	; 0x7c70 <render_level_tile>
    8008:	21 96       	adiw	r28, 0x01	; 1

void append_tile_row()
{
	u8 level_tile;

    for (u8 x = 0; x <= CAMERA_WIDTH; x++)
    800a:	cd 31       	cpi	r28, 0x1D	; 29
    800c:	d1 05       	cpc	r29, r1
    800e:	f1 f6       	brne	.-68     	; 0x7fcc <append_tile_row+0x8>
	{
		level_tile = get_level_tile(game.current_level, x + game.camera_x / 8, game.scroll_src_y);
		render_level_tile(level_tile, (x + Screen.scrollX / 8) % 32, game.scroll_dest_y);
    }
	
    game.scroll_src_y++;
    8010:	80 91 91 0d 	lds	r24, 0x0D91
    8014:	90 91 92 0d 	lds	r25, 0x0D92
    8018:	01 96       	adiw	r24, 0x01	; 1
    801a:	90 93 92 0d 	sts	0x0D92, r25
    801e:	80 93 91 0d 	sts	0x0D91, r24
	game.scroll_dest_y++;
    8022:	80 91 a6 0d 	lds	r24, 0x0DA6
    8026:	8f 5f       	subi	r24, 0xFF	; 255
    if(game.scroll_dest_y>=30)game.scroll_dest_y=0;
    8028:	8e 31       	cpi	r24, 0x1E	; 30
    802a:	18 f4       	brcc	.+6      	; 0x8032 <append_tile_row+0x6e>
		level_tile = get_level_tile(game.current_level, x + game.camera_x / 8, game.scroll_src_y);
		render_level_tile(level_tile, (x + Screen.scrollX / 8) % 32, game.scroll_dest_y);
    }
	
    game.scroll_src_y++;
	game.scroll_dest_y++;
    802c:	80 93 a6 0d 	sts	0x0DA6, r24
    8030:	02 c0       	rjmp	.+4      	; 0x8036 <append_tile_row+0x72>
    if(game.scroll_dest_y>=30)game.scroll_dest_y=0;
    8032:	10 92 a6 0d 	sts	0x0DA6, r1
}
    8036:	df 91       	pop	r29
    8038:	cf 91       	pop	r28
    803a:	08 95       	ret

0000803c <move_camera_x>:

void move_camera_x()
{	
	game.camera_x++;
    803c:	80 91 93 0d 	lds	r24, 0x0D93
    8040:	90 91 94 0d 	lds	r25, 0x0D94
    8044:	01 96       	adiw	r24, 0x01	; 1
    8046:	90 93 94 0d 	sts	0x0D94, r25
    804a:	80 93 93 0d 	sts	0x0D93, r24
	Scroll(1,0);
    804e:	60 e0       	ldi	r22, 0x00	; 0
    8050:	81 e0       	ldi	r24, 0x01	; 1
    8052:	0e 94 a8 39 	call	0x7350	; 0x7350 <Scroll>
	if (++game.scroll_x == 8)
    8056:	80 91 a3 0d 	lds	r24, 0x0DA3
    805a:	8f 5f       	subi	r24, 0xFF	; 255
    805c:	88 30       	cpi	r24, 0x08	; 8
    805e:	19 f0       	breq	.+6      	; 0x8066 <move_camera_x+0x2a>
    8060:	80 93 a3 0d 	sts	0x0DA3, r24
    8064:	08 95       	ret
	{
		game.scroll_x = 0;
    8066:	10 92 a3 0d 	sts	0x0DA3, r1
		append_tile_column();
    806a:	0c 94 51 3f 	jmp	0x7ea2	; 0x7ea2 <append_tile_column>

0000806e <move_camera_y>:
	}
}

void move_camera_y()
{	
	game.camera_y+=2;
    806e:	80 91 95 0d 	lds	r24, 0x0D95
    8072:	90 91 96 0d 	lds	r25, 0x0D96
    8076:	02 96       	adiw	r24, 0x02	; 2
    8078:	90 93 96 0d 	sts	0x0D96, r25
    807c:	80 93 95 0d 	sts	0x0D95, r24
	game.scroll_y+=2;
    8080:	80 91 a4 0d 	lds	r24, 0x0DA4
    8084:	8e 5f       	subi	r24, 0xFE	; 254
    8086:	80 93 a4 0d 	sts	0x0DA4, r24
	Scroll(0,2);
    808a:	62 e0       	ldi	r22, 0x02	; 2
    808c:	80 e0       	ldi	r24, 0x00	; 0
    808e:	0e 94 a8 39 	call	0x7350	; 0x7350 <Scroll>
	if (game.scroll_y == 8)
    8092:	80 91 a4 0d 	lds	r24, 0x0DA4
    8096:	88 30       	cpi	r24, 0x08	; 8
    8098:	21 f4       	brne	.+8      	; 0x80a2 <move_camera_y+0x34>
	{
		game.scroll_y = 0;
    809a:	10 92 a4 0d 	sts	0x0DA4, r1
		append_tile_row();
    809e:	0c 94 e2 3f 	jmp	0x7fc4	; 0x7fc4 <append_tile_row>
    80a2:	08 95       	ret

000080a4 <load_level>:
	}
}

void load_level(u8 index)
{	
    80a4:	1f 93       	push	r17
    80a6:	cf 93       	push	r28
    80a8:	df 93       	push	r29
    80aa:	18 2f       	mov	r17, r24
	Screen.scrollX = 0;
    80ac:	e9 e9       	ldi	r30, 0x99	; 153
    80ae:	fc e0       	ldi	r31, 0x0C	; 12
    80b0:	13 82       	std	Z+3, r1	; 0x03
	Screen.scrollY = 0;
    80b2:	14 82       	std	Z+4, r1	; 0x04
	Screen.scrollHeight = 30;
    80b4:	8e e1       	ldi	r24, 0x1E	; 30
    80b6:	85 83       	std	Z+5, r24	; 0x05
	Screen.overlayTileTable = tiles_data;
    80b8:	8c ef       	ldi	r24, 0xFC	; 252
    80ba:	93 e3       	ldi	r25, 0x33	; 51
    80bc:	92 83       	std	Z+2, r25	; 0x02
    80be:	81 83       	std	Z+1, r24	; 0x01
	Screen.overlayHeight = 2;
    80c0:	82 e0       	ldi	r24, 0x02	; 2
    80c2:	80 83       	st	Z, r24
	clear_overlay(2);
    80c4:	0e 94 62 3e 	call	0x7cc4	; 0x7cc4 <clear_overlay>
	game.current_level = index;
    80c8:	cf e8       	ldi	r28, 0x8F	; 143
    80ca:	dd e0       	ldi	r29, 0x0D	; 13
    80cc:	18 8b       	std	Y+16, r17	; 0x10
	game.column_count = 0;
    80ce:	1d 86       	std	Y+13, r1	; 0x0d
    80d0:	1c 86       	std	Y+12, r1	; 0x0c
	game.camera_x = get_camera_x(index);
    80d2:	81 2f       	mov	r24, r17
    80d4:	0e 94 99 3e 	call	0x7d32	; 0x7d32 <get_camera_x>
    80d8:	90 e0       	ldi	r25, 0x00	; 0
    80da:	9d 83       	std	Y+5, r25	; 0x05
    80dc:	8c 83       	std	Y+4, r24	; 0x04
	game.camera_y = get_camera_y(index);
    80de:	81 2f       	mov	r24, r17
    80e0:	0e 94 a3 3e 	call	0x7d46	; 0x7d46 <get_camera_y>
    80e4:	90 e0       	ldi	r25, 0x00	; 0
    80e6:	9f 83       	std	Y+7, r25	; 0x07
    80e8:	8e 83       	std	Y+6, r24	; 0x06
	game.player.shared.x = get_hero_spawn_x(index)*8;
    80ea:	81 2f       	mov	r24, r17
    80ec:	0e 94 ae 3e 	call	0x7d5c	; 0x7d5c <get_hero_spawn_x>
    80f0:	28 e0       	ldi	r18, 0x08	; 8
    80f2:	82 9f       	mul	r24, r18
    80f4:	c0 01       	movw	r24, r0
    80f6:	11 24       	eor	r1, r1
    80f8:	bc 01       	movw	r22, r24
    80fa:	88 27       	eor	r24, r24
    80fc:	77 fd       	sbrc	r23, 7
    80fe:	80 95       	com	r24
    8100:	98 2f       	mov	r25, r24
    8102:	0e 94 34 51 	call	0xa268	; 0xa268 <__floatsisf>
    8106:	6e 8f       	std	Y+30, r22	; 0x1e
    8108:	7f 8f       	std	Y+31, r23	; 0x1f
    810a:	88 a3       	std	Y+32, r24	; 0x20
    810c:	99 a3       	std	Y+33, r25	; 0x21
	game.player.shared.y = get_hero_spawn_y(index)*8;
    810e:	81 2f       	mov	r24, r17
    8110:	0e 94 b9 3e 	call	0x7d72	; 0x7d72 <get_hero_spawn_y>
    8114:	28 e0       	ldi	r18, 0x08	; 8
    8116:	82 9f       	mul	r24, r18
    8118:	c0 01       	movw	r24, r0
    811a:	11 24       	eor	r1, r1
    811c:	bc 01       	movw	r22, r24
    811e:	88 27       	eor	r24, r24
    8120:	77 fd       	sbrc	r23, 7
    8122:	80 95       	com	r24
    8124:	98 2f       	mov	r25, r24
    8126:	0e 94 34 51 	call	0xa268	; 0xa268 <__floatsisf>
    812a:	6a a3       	std	Y+34, r22	; 0x22
    812c:	7b a3       	std	Y+35, r23	; 0x23
    812e:	8c a3       	std	Y+36, r24	; 0x24
    8130:	9d a3       	std	Y+37, r25	; 0x25
	game.camera_x *= 8;
    8132:	2c 81       	ldd	r18, Y+4	; 0x04
    8134:	3d 81       	ldd	r19, Y+5	; 0x05
    8136:	83 e0       	ldi	r24, 0x03	; 3
    8138:	22 0f       	add	r18, r18
    813a:	33 1f       	adc	r19, r19
    813c:	8a 95       	dec	r24
    813e:	e1 f7       	brne	.-8      	; 0x8138 <load_level+0x94>
    8140:	3d 83       	std	Y+5, r19	; 0x05
    8142:	2c 83       	std	Y+4, r18	; 0x04
	game.camera_y *= 8;
    8144:	8e 81       	ldd	r24, Y+6	; 0x06
    8146:	9f 81       	ldd	r25, Y+7	; 0x07
    8148:	43 e0       	ldi	r20, 0x03	; 3
    814a:	88 0f       	add	r24, r24
    814c:	99 1f       	adc	r25, r25
    814e:	4a 95       	dec	r20
    8150:	e1 f7       	brne	.-8      	; 0x814a <load_level+0xa6>
    8152:	9f 83       	std	Y+7, r25	; 0x07
    8154:	8e 83       	std	Y+6, r24	; 0x06
	game.scroll_src_x = game.camera_x / 8 + CAMERA_WIDTH + 1;
    8156:	53 e0       	ldi	r21, 0x03	; 3
    8158:	36 95       	lsr	r19
    815a:	27 95       	ror	r18
    815c:	5a 95       	dec	r21
    815e:	e1 f7       	brne	.-8      	; 0x8158 <load_level+0xb4>
    8160:	a9 01       	movw	r20, r18
    8162:	43 5e       	subi	r20, 0xE3	; 227
    8164:	5f 4f       	sbci	r21, 0xFF	; 255
    8166:	59 83       	std	Y+1, r21	; 0x01
    8168:	48 83       	st	Y, r20
    game.scroll_dest_x = game.camera_x / 8 + CAMERA_WIDTH + 1;
    816a:	23 5e       	subi	r18, 0xE3	; 227
    816c:	2e 8b       	std	Y+22, r18	; 0x16
	game.scroll_src_y = game.camera_y / 8 + CAMERA_HEIGHT + 1;
    816e:	63 e0       	ldi	r22, 0x03	; 3
    8170:	96 95       	lsr	r25
    8172:	87 95       	ror	r24
    8174:	6a 95       	dec	r22
    8176:	e1 f7       	brne	.-8      	; 0x8170 <load_level+0xcc>
    8178:	9c 01       	movw	r18, r24
    817a:	25 5e       	subi	r18, 0xE5	; 229
    817c:	3f 4f       	sbci	r19, 0xFF	; 255
    817e:	3b 83       	std	Y+3, r19	; 0x03
    8180:	2a 83       	std	Y+2, r18	; 0x02
    game.scroll_dest_y =  game.camera_y / 8 + CAMERA_HEIGHT + 1;
    8182:	85 5e       	subi	r24, 0xE5	; 229
    8184:	8f 8b       	std	Y+23, r24	; 0x17
	game.scroll_x = 0;
    8186:	1c 8a       	std	Y+20, r1	; 0x14
	game.scroll_y = 0;
    8188:	1d 8a       	std	Y+21, r1	; 0x15
	game.spawn_rate = BASE_SPAWN_RATE;
    818a:	8a e0       	ldi	r24, 0x0A	; 10
    818c:	89 8f       	std	Y+25, r24	; 0x19
	render_camera_view();
    818e:	0e 94 da 3e 	call	0x7db4	; 0x7db4 <render_camera_view>
	Print(0, VRAM_TILES_V-1, (char*) strLives);
    8192:	40 e8       	ldi	r20, 0x80	; 128
    8194:	59 e0       	ldi	r21, 0x09	; 9
    8196:	6f e1       	ldi	r22, 0x1F	; 31
    8198:	70 e0       	ldi	r23, 0x00	; 0
    819a:	80 e0       	ldi	r24, 0x00	; 0
    819c:	90 e0       	ldi	r25, 0x00	; 0
    819e:	0e 94 94 3a 	call	0x7528	; 0x7528 <Print>
	Print(17, VRAM_TILES_V-1, (char*) strScore);
    81a2:	41 e9       	ldi	r20, 0x91	; 145
    81a4:	59 e0       	ldi	r21, 0x09	; 9
    81a6:	6f e1       	ldi	r22, 0x1F	; 31
    81a8:	70 e0       	ldi	r23, 0x00	; 0
    81aa:	81 e1       	ldi	r24, 0x11	; 17
    81ac:	90 e0       	ldi	r25, 0x00	; 0
    81ae:	0e 94 94 3a 	call	0x7528	; 0x7528 <Print>
	Print(0, VRAM_TILES_V-2, (char*) strShield);
    81b2:	48 e8       	ldi	r20, 0x88	; 136
    81b4:	59 e0       	ldi	r21, 0x09	; 9
    81b6:	6e e1       	ldi	r22, 0x1E	; 30
    81b8:	70 e0       	ldi	r23, 0x00	; 0
    81ba:	80 e0       	ldi	r24, 0x00	; 0
    81bc:	90 e0       	ldi	r25, 0x00	; 0
    81be:	0e 94 94 3a 	call	0x7528	; 0x7528 <Print>
	Print(18, VRAM_TILES_V-2, (char*) strTime);
    81c2:	49 e7       	ldi	r20, 0x79	; 121
    81c4:	59 e0       	ldi	r21, 0x09	; 9
    81c6:	6e e1       	ldi	r22, 0x1E	; 30
    81c8:	70 e0       	ldi	r23, 0x00	; 0
    81ca:	82 e1       	ldi	r24, 0x12	; 18
    81cc:	90 e0       	ldi	r25, 0x00	; 0
}
    81ce:	df 91       	pop	r29
    81d0:	cf 91       	pop	r28
    81d2:	1f 91       	pop	r17
	game.spawn_rate = BASE_SPAWN_RATE;
	render_camera_view();
	Print(0, VRAM_TILES_V-1, (char*) strLives);
	Print(17, VRAM_TILES_V-1, (char*) strScore);
	Print(0, VRAM_TILES_V-2, (char*) strShield);
	Print(18, VRAM_TILES_V-2, (char*) strTime);
    81d4:	0c 94 94 3a 	jmp	0x7528	; 0x7528 <Print>

000081d8 <on_solid_ground>:
	FadeIn(FRAMES_PER_FADE, false);
	load_level(index);
}

char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
    81d8:	2f 92       	push	r2
    81da:	3f 92       	push	r3
    81dc:	4f 92       	push	r4
    81de:	5f 92       	push	r5
    81e0:	6f 92       	push	r6
    81e2:	7f 92       	push	r7
    81e4:	8f 92       	push	r8
    81e6:	9f 92       	push	r9
    81e8:	af 92       	push	r10
    81ea:	bf 92       	push	r11
    81ec:	cf 92       	push	r12
    81ee:	df 92       	push	r13
    81f0:	ef 92       	push	r14
    81f2:	ff 92       	push	r15
    81f4:	0f 93       	push	r16
    81f6:	1f 93       	push	r17
    81f8:	cf 93       	push	r28
    81fa:	df 93       	push	r29
    81fc:	00 d0       	rcall	.+0      	; 0x81fe <on_solid_ground+0x26>
    81fe:	00 d0       	rcall	.+0      	; 0x8200 <on_solid_ground+0x28>
    8200:	00 d0       	rcall	.+0      	; 0x8202 <on_solid_ground+0x2a>
    8202:	cd b7       	in	r28, 0x3d	; 61
    8204:	de b7       	in	r29, 0x3e	; 62
    8206:	9e 83       	std	Y+6, r25	; 0x06
    8208:	8d 83       	std	Y+5, r24	; 0x05
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
    820a:	88 e0       	ldi	r24, 0x08	; 8
    820c:	48 9f       	mul	r20, r24
    820e:	a0 01       	movw	r20, r0
    8210:	11 24       	eor	r1, r1
    8212:	26 2e       	mov	r2, r22
    8214:	31 2c       	mov	r3, r1
char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
    8216:	00 e0       	ldi	r16, 0x00	; 0
    8218:	10 e0       	ldi	r17, 0x00	; 0
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
    821a:	ca 01       	movw	r24, r20
    821c:	aa 27       	eor	r26, r26
    821e:	97 fd       	sbrc	r25, 7
    8220:	a0 95       	com	r26
    8222:	ba 2f       	mov	r27, r26
    8224:	89 83       	std	Y+1, r24	; 0x01
    8226:	9a 83       	std	Y+2, r25	; 0x02
    8228:	ab 83       	std	Y+3, r26	; 0x03
    822a:	bc 83       	std	Y+4, r27	; 0x04
char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
    822c:	02 15       	cp	r16, r2
    822e:	13 05       	cpc	r17, r3
    8230:	09 f4       	brne	.+2      	; 0x8234 <on_solid_ground+0x5c>
    8232:	81 c0       	rjmp	.+258    	; 0x8336 <on_solid_ground+0x15e>
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
    8234:	69 81       	ldd	r22, Y+1	; 0x01
    8236:	7a 81       	ldd	r23, Y+2	; 0x02
    8238:	8b 81       	ldd	r24, Y+3	; 0x03
    823a:	9c 81       	ldd	r25, Y+4	; 0x04
    823c:	0e 94 34 51 	call	0xa268	; 0xa268 <__floatsisf>
    8240:	4b 01       	movw	r8, r22
    8242:	5c 01       	movw	r10, r24
    8244:	b8 01       	movw	r22, r16
    8246:	88 27       	eor	r24, r24
    8248:	77 fd       	sbrc	r23, 7
    824a:	80 95       	com	r24
    824c:	98 2f       	mov	r25, r24
    824e:	0e 94 34 51 	call	0xa268	; 0xa268 <__floatsisf>
    8252:	6b 01       	movw	r12, r22
    8254:	7c 01       	movw	r14, r24
    8256:	ad 81       	ldd	r26, Y+5	; 0x05
    8258:	be 81       	ldd	r27, Y+6	; 0x06
    825a:	18 96       	adiw	r26, 0x08	; 8
    825c:	2d 91       	ld	r18, X+
    825e:	3d 91       	ld	r19, X+
    8260:	4d 91       	ld	r20, X+
    8262:	5c 91       	ld	r21, X
    8264:	1b 97       	sbiw	r26, 0x0b	; 11
    8266:	c5 01       	movw	r24, r10
    8268:	b4 01       	movw	r22, r8
    826a:	0e 94 9e 50 	call	0xa13c	; 0xa13c <__addsf3>
    826e:	20 e0       	ldi	r18, 0x00	; 0
    8270:	30 e0       	ldi	r19, 0x00	; 0
    8272:	40 e0       	ldi	r20, 0x00	; 0
    8274:	5e e3       	ldi	r21, 0x3E	; 62
    8276:	0e 94 e8 51 	call	0xa3d0	; 0xa3d0 <__mulsf3>
    827a:	0e 94 06 51 	call	0xa20c	; 0xa20c <__fixunssfsi>
    827e:	2b 01       	movw	r4, r22
    8280:	3c 01       	movw	r6, r24
    8282:	20 e0       	ldi	r18, 0x00	; 0
    8284:	30 e0       	ldi	r19, 0x00	; 0
    8286:	40 e0       	ldi	r20, 0x00	; 0
    8288:	5e e3       	ldi	r21, 0x3E	; 62
    828a:	ed 81       	ldd	r30, Y+5	; 0x05
    828c:	fe 81       	ldd	r31, Y+6	; 0x06
    828e:	64 81       	ldd	r22, Z+4	; 0x04
    8290:	75 81       	ldd	r23, Z+5	; 0x05
    8292:	86 81       	ldd	r24, Z+6	; 0x06
    8294:	97 81       	ldd	r25, Z+7	; 0x07
    8296:	0e 94 e8 51 	call	0xa3d0	; 0xa3d0 <__mulsf3>
    829a:	a7 01       	movw	r20, r14
    829c:	96 01       	movw	r18, r12
    829e:	0e 94 9e 50 	call	0xa13c	; 0xa13c <__addsf3>
    82a2:	0e 94 06 51 	call	0xa20c	; 0xa20c <__fixunssfsi>
    82a6:	a2 01       	movw	r20, r4
    82a8:	80 91 9f 0d 	lds	r24, 0x0D9F
    82ac:	0e 94 c4 3e 	call	0x7d88	; 0x7d88 <get_level_tile>
    82b0:	78 2e       	mov	r7, r24
		lt2 = get_level_tile(game.current_level, (s->x+7) / 8 + x, (s->y + tile_height*8) / 8);
    82b2:	ad 81       	ldd	r26, Y+5	; 0x05
    82b4:	be 81       	ldd	r27, Y+6	; 0x06
    82b6:	18 96       	adiw	r26, 0x08	; 8
    82b8:	2d 91       	ld	r18, X+
    82ba:	3d 91       	ld	r19, X+
    82bc:	4d 91       	ld	r20, X+
    82be:	5c 91       	ld	r21, X
    82c0:	1b 97       	sbiw	r26, 0x0b	; 11
    82c2:	c5 01       	movw	r24, r10
    82c4:	b4 01       	movw	r22, r8
    82c6:	0e 94 9e 50 	call	0xa13c	; 0xa13c <__addsf3>
    82ca:	20 e0       	ldi	r18, 0x00	; 0
    82cc:	30 e0       	ldi	r19, 0x00	; 0
    82ce:	40 e0       	ldi	r20, 0x00	; 0
    82d0:	5e e3       	ldi	r21, 0x3E	; 62
    82d2:	0e 94 e8 51 	call	0xa3d0	; 0xa3d0 <__mulsf3>
    82d6:	0e 94 06 51 	call	0xa20c	; 0xa20c <__fixunssfsi>
    82da:	4b 01       	movw	r8, r22
    82dc:	5c 01       	movw	r10, r24
    82de:	20 e0       	ldi	r18, 0x00	; 0
    82e0:	30 e0       	ldi	r19, 0x00	; 0
    82e2:	40 ee       	ldi	r20, 0xE0	; 224
    82e4:	50 e4       	ldi	r21, 0x40	; 64
    82e6:	ed 81       	ldd	r30, Y+5	; 0x05
    82e8:	fe 81       	ldd	r31, Y+6	; 0x06
    82ea:	64 81       	ldd	r22, Z+4	; 0x04
    82ec:	75 81       	ldd	r23, Z+5	; 0x05
    82ee:	86 81       	ldd	r24, Z+6	; 0x06
    82f0:	97 81       	ldd	r25, Z+7	; 0x07
    82f2:	0e 94 9e 50 	call	0xa13c	; 0xa13c <__addsf3>
    82f6:	20 e0       	ldi	r18, 0x00	; 0
    82f8:	30 e0       	ldi	r19, 0x00	; 0
    82fa:	40 e0       	ldi	r20, 0x00	; 0
    82fc:	5e e3       	ldi	r21, 0x3E	; 62
    82fe:	0e 94 e8 51 	call	0xa3d0	; 0xa3d0 <__mulsf3>
    8302:	a7 01       	movw	r20, r14
    8304:	96 01       	movw	r18, r12
    8306:	0e 94 9e 50 	call	0xa13c	; 0xa13c <__addsf3>
    830a:	0e 94 06 51 	call	0xa20c	; 0xa20c <__fixunssfsi>
    830e:	a4 01       	movw	r20, r8
    8310:	80 91 9f 0d 	lds	r24, 0x0D9F
    8314:	0e 94 c4 3e 	call	0x7d88	; 0x7d88 <get_level_tile>
    8318:	f8 2e       	mov	r15, r24
		if (solid_tile(lt1) || solid_tile(lt2))
    831a:	87 2d       	mov	r24, r7
    831c:	0e 94 4a 3f 	call	0x7e94	; 0x7e94 <solid_tile>
    8320:	81 11       	cpse	r24, r1
    8322:	0b c0       	rjmp	.+22     	; 0x833a <on_solid_ground+0x162>
    8324:	8f 2d       	mov	r24, r15
    8326:	0e 94 4a 3f 	call	0x7e94	; 0x7e94 <solid_tile>
    832a:	0f 5f       	subi	r16, 0xFF	; 255
    832c:	1f 4f       	sbci	r17, 0xFF	; 255
    832e:	88 23       	and	r24, r24
    8330:	09 f4       	brne	.+2      	; 0x8334 <on_solid_ground+0x15c>
    8332:	7c cf       	rjmp	.-264    	; 0x822c <on_solid_ground+0x54>
    8334:	02 c0       	rjmp	.+4      	; 0x833a <on_solid_ground+0x162>
		{
			return 1;
		}
	}
	return 0;
    8336:	80 e0       	ldi	r24, 0x00	; 0
    8338:	01 c0       	rjmp	.+2      	; 0x833c <on_solid_ground+0x164>
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
		lt2 = get_level_tile(game.current_level, (s->x+7) / 8 + x, (s->y + tile_height*8) / 8);
		if (solid_tile(lt1) || solid_tile(lt2))
		{
			return 1;
    833a:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return 0;
}
    833c:	26 96       	adiw	r28, 0x06	; 6
    833e:	0f b6       	in	r0, 0x3f	; 63
    8340:	f8 94       	cli
    8342:	de bf       	out	0x3e, r29	; 62
    8344:	0f be       	out	0x3f, r0	; 63
    8346:	cd bf       	out	0x3d, r28	; 61
    8348:	df 91       	pop	r29
    834a:	cf 91       	pop	r28
    834c:	1f 91       	pop	r17
    834e:	0f 91       	pop	r16
    8350:	ff 90       	pop	r15
    8352:	ef 90       	pop	r14
    8354:	df 90       	pop	r13
    8356:	cf 90       	pop	r12
    8358:	bf 90       	pop	r11
    835a:	af 90       	pop	r10
    835c:	9f 90       	pop	r9
    835e:	8f 90       	pop	r8
    8360:	7f 90       	pop	r7
    8362:	6f 90       	pop	r6
    8364:	5f 90       	pop	r5
    8366:	4f 90       	pop	r4
    8368:	3f 90       	pop	r3
    836a:	2f 90       	pop	r2
    836c:	08 95       	ret

0000836e <find_shot_slot>:

u8 find_shot_slot()
{
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
	{
		if (!game.player.shot[i].active) return i;
    836e:	80 91 d0 0d 	lds	r24, 0x0DD0
    8372:	88 23       	and	r24, r24
    8374:	61 f0       	breq	.+24     	; 0x838e <find_shot_slot+0x20>
    8376:	80 91 ea 0d 	lds	r24, 0x0DEA
    837a:	88 23       	and	r24, r24
    837c:	31 f0       	breq	.+12     	; 0x838a <find_shot_slot+0x1c>
    837e:	80 91 04 0e 	lds	r24, 0x0E04
    8382:	81 11       	cpse	r24, r1
    8384:	04 c0       	rjmp	.+8      	; 0x838e <find_shot_slot+0x20>
	return 0;
}

u8 find_shot_slot()
{
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
    8386:	82 e0       	ldi	r24, 0x02	; 2
    8388:	08 95       	ret
    838a:	81 e0       	ldi	r24, 0x01	; 1
	{
		if (!game.player.shot[i].active) return i;
    838c:	08 95       	ret
	}
	return 0;
    838e:	80 e0       	ldi	r24, 0x00	; 0
}
    8390:	08 95       	ret

00008392 <update_shot>:

void update_shot()
{
    8392:	ef 92       	push	r14
    8394:	ff 92       	push	r15
    8396:	0f 93       	push	r16
    8398:	1f 93       	push	r17
    839a:	cf 93       	push	r28
    839c:	df 93       	push	r29
	// Shot updates
	u8 idx;
	if (game.joypadState.pressed & BTN_A && game.player.active_shots < MAX_PLAYER_SHOTS)
    839e:	80 91 7f 0f 	lds	r24, 0x0F7F
    83a2:	90 91 80 0f 	lds	r25, 0x0F80
    83a6:	90 ff       	sbrs	r25, 0
    83a8:	97 c0       	rjmp	.+302    	; 0x84d8 <update_shot+0x146>
    83aa:	80 91 b8 0d 	lds	r24, 0x0DB8
    83ae:	83 30       	cpi	r24, 0x03	; 3
    83b0:	08 f0       	brcs	.+2      	; 0x83b4 <update_shot+0x22>
    83b2:	92 c0       	rjmp	.+292    	; 0x84d8 <update_shot+0x146>
	{
		SFX_PLAYER_SHOOT;
    83b4:	2f ef       	ldi	r18, 0xFF	; 255
    83b6:	43 e2       	ldi	r20, 0x23	; 35
    83b8:	63 e0       	ldi	r22, 0x03	; 3
    83ba:	82 e0       	ldi	r24, 0x02	; 2
    83bc:	0e 94 c5 2f 	call	0x5f8a	; 0x5f8a <TriggerNote>
		idx = find_shot_slot();
    83c0:	0e 94 b7 41 	call	0x836e	; 0x836e <find_shot_slot>
    83c4:	d8 2f       	mov	r29, r24
		LBMapSprite(PLAYER_SHOT_SLOT+idx, LBGetNextFrame(&game.player.shot[idx].anim), 0);
    83c6:	08 2f       	mov	r16, r24
    83c8:	10 e0       	ldi	r17, 0x00	; 0
    83ca:	8a e1       	ldi	r24, 0x1A	; 26
    83cc:	d8 9f       	mul	r29, r24
    83ce:	70 01       	movw	r14, r0
    83d0:	11 24       	eor	r1, r1
    83d2:	c7 01       	movw	r24, r14
    83d4:	8f 52       	subi	r24, 0x2F	; 47
    83d6:	92 4f       	sbci	r25, 0xF2	; 242
    83d8:	0e 94 4c 3b 	call	0x7698	; 0x7698 <LBGetNextFrame>
    83dc:	40 e0       	ldi	r20, 0x00	; 0
    83de:	bc 01       	movw	r22, r24
    83e0:	8b e0       	ldi	r24, 0x0B	; 11
    83e2:	8d 0f       	add	r24, r29
    83e4:	0e 94 f2 3b 	call	0x77e4	; 0x77e4 <LBMapSprite>
		game.player.shot[idx].active = 1;
    83e8:	e7 01       	movw	r28, r14
    83ea:	c1 57       	subi	r28, 0x71	; 113
    83ec:	d2 4f       	sbci	r29, 0xF2	; 242
    83ee:	fe 01       	movw	r30, r28
    83f0:	ef 5b       	subi	r30, 0xBF	; 191
    83f2:	ff 4f       	sbci	r31, 0xFF	; 255
    83f4:	81 e0       	ldi	r24, 0x01	; 1
    83f6:	80 83       	st	Z, r24
		game.player.shot[idx].shared.y = (u16) game.player.shared.y / 8 * 8;
    83f8:	60 91 b1 0d 	lds	r22, 0x0DB1
    83fc:	70 91 b2 0d 	lds	r23, 0x0DB2
    8400:	80 91 b3 0d 	lds	r24, 0x0DB3
    8404:	90 91 b4 0d 	lds	r25, 0x0DB4
    8408:	0e 94 06 51 	call	0xa20c	; 0xa20c <__fixunssfsi>
    840c:	83 e0       	ldi	r24, 0x03	; 3
    840e:	76 95       	lsr	r23
    8410:	67 95       	ror	r22
    8412:	8a 95       	dec	r24
    8414:	e1 f7       	brne	.-8      	; 0x840e <update_shot+0x7c>
    8416:	93 e0       	ldi	r25, 0x03	; 3
    8418:	66 0f       	add	r22, r22
    841a:	77 1f       	adc	r23, r23
    841c:	9a 95       	dec	r25
    841e:	e1 f7       	brne	.-8      	; 0x8418 <update_shot+0x86>
    8420:	80 e0       	ldi	r24, 0x00	; 0
    8422:	90 e0       	ldi	r25, 0x00	; 0
    8424:	0e 94 32 51 	call	0xa264	; 0xa264 <__floatunsisf>
    8428:	68 af       	std	Y+56, r22	; 0x38
    842a:	79 af       	std	Y+57, r23	; 0x39
    842c:	8a af       	std	Y+58, r24	; 0x3a
    842e:	9b af       	std	Y+59, r25	; 0x3b
		if (!(game.player.flags & PRONE))
    8430:	20 91 b9 0d 	lds	r18, 0x0DB9
    8434:	22 fd       	sbrc	r18, 2
    8436:	0a c0       	rjmp	.+20     	; 0x844c <update_shot+0xba>
		{
			game.player.shot[idx].shared.y += 8;
    8438:	20 e0       	ldi	r18, 0x00	; 0
    843a:	30 e0       	ldi	r19, 0x00	; 0
    843c:	40 e0       	ldi	r20, 0x00	; 0
    843e:	51 e4       	ldi	r21, 0x41	; 65
    8440:	0e 94 9e 50 	call	0xa13c	; 0xa13c <__addsf3>
    8444:	68 af       	std	Y+56, r22	; 0x38
    8446:	79 af       	std	Y+57, r23	; 0x39
    8448:	8a af       	std	Y+58, r24	; 0x3a
    844a:	9b af       	std	Y+59, r25	; 0x3b
		}
		if (game.player.direction == D_RIGHT)
    844c:	80 91 bb 0d 	lds	r24, 0x0DBB
    8450:	81 30       	cpi	r24, 0x01	; 1
    8452:	f9 f4       	brne	.+62     	; 0x8492 <update_shot+0x100>
		{
			game.player.shot[idx].shared.x = game.player.shared.x+2*8;
    8454:	8a e1       	ldi	r24, 0x1A	; 26
    8456:	80 9f       	mul	r24, r16
    8458:	e0 01       	movw	r28, r0
    845a:	81 9f       	mul	r24, r17
    845c:	d0 0d       	add	r29, r0
    845e:	11 24       	eor	r1, r1
    8460:	c1 57       	subi	r28, 0x71	; 113
    8462:	d2 4f       	sbci	r29, 0xF2	; 242
    8464:	20 e0       	ldi	r18, 0x00	; 0
    8466:	30 e0       	ldi	r19, 0x00	; 0
    8468:	40 e8       	ldi	r20, 0x80	; 128
    846a:	51 e4       	ldi	r21, 0x41	; 65
    846c:	60 91 ad 0d 	lds	r22, 0x0DAD
    8470:	70 91 ae 0d 	lds	r23, 0x0DAE
    8474:	80 91 af 0d 	lds	r24, 0x0DAF
    8478:	90 91 b0 0d 	lds	r25, 0x0DB0
    847c:	0e 94 9e 50 	call	0xa13c	; 0xa13c <__addsf3>
    8480:	6c ab       	std	Y+52, r22	; 0x34
    8482:	7d ab       	std	Y+53, r23	; 0x35
    8484:	8e ab       	std	Y+54, r24	; 0x36
    8486:	9f ab       	std	Y+55, r25	; 0x37
			game.player.shot[idx].shared.vx = SHOT_SPEED;
    8488:	80 e9       	ldi	r24, 0x90	; 144
    848a:	91 e0       	ldi	r25, 0x01	; 1
    848c:	9d af       	std	Y+61, r25	; 0x3d
    848e:	8c af       	std	Y+60, r24	; 0x3c
    8490:	1e c0       	rjmp	.+60     	; 0x84ce <update_shot+0x13c>
		}
		else
		{
			game.player.shot[idx].shared.vx = -SHOT_SPEED;
    8492:	8a e1       	ldi	r24, 0x1A	; 26
    8494:	80 9f       	mul	r24, r16
    8496:	e0 01       	movw	r28, r0
    8498:	81 9f       	mul	r24, r17
    849a:	d0 0d       	add	r29, r0
    849c:	11 24       	eor	r1, r1
    849e:	c1 57       	subi	r28, 0x71	; 113
    84a0:	d2 4f       	sbci	r29, 0xF2	; 242
    84a2:	80 e7       	ldi	r24, 0x70	; 112
    84a4:	9e ef       	ldi	r25, 0xFE	; 254
    84a6:	9d af       	std	Y+61, r25	; 0x3d
    84a8:	8c af       	std	Y+60, r24	; 0x3c
			game.player.shot[idx].shared.x = game.player.shared.x-1*8;
    84aa:	20 e0       	ldi	r18, 0x00	; 0
    84ac:	30 e0       	ldi	r19, 0x00	; 0
    84ae:	40 e0       	ldi	r20, 0x00	; 0
    84b0:	51 e4       	ldi	r21, 0x41	; 65
    84b2:	60 91 ad 0d 	lds	r22, 0x0DAD
    84b6:	70 91 ae 0d 	lds	r23, 0x0DAE
    84ba:	80 91 af 0d 	lds	r24, 0x0DAF
    84be:	90 91 b0 0d 	lds	r25, 0x0DB0
    84c2:	0e 94 9d 50 	call	0xa13a	; 0xa13a <__subsf3>
    84c6:	6c ab       	std	Y+52, r22	; 0x34
    84c8:	7d ab       	std	Y+53, r23	; 0x35
    84ca:	8e ab       	std	Y+54, r24	; 0x36
    84cc:	9f ab       	std	Y+55, r25	; 0x37
		}
		game.player.active_shots++;
    84ce:	80 91 b8 0d 	lds	r24, 0x0DB8
    84d2:	8f 5f       	subi	r24, 0xFF	; 255
    84d4:	80 93 b8 0d 	sts	0x0DB8, r24
	}
}
    84d8:	df 91       	pop	r29
    84da:	cf 91       	pop	r28
    84dc:	1f 91       	pop	r17
    84de:	0f 91       	pop	r16
    84e0:	ff 90       	pop	r15
    84e2:	ef 90       	pop	r14
    84e4:	08 95       	ret

000084e6 <pixel_overlap>:
		}
	}
}

u8 pixel_overlap(u16 s1, u16 s2, u8 w1, u8 w2)
{
    84e6:	fc 01       	movw	r30, r24
	u8 result = w1;
	
	if (s2 > s1)
    84e8:	86 17       	cp	r24, r22
    84ea:	97 07       	cpc	r25, r23
    84ec:	28 f4       	brcc	.+10     	; 0x84f8 <pixel_overlap+0x12>
    84ee:	94 2f       	mov	r25, r20
    84f0:	9e 0f       	add	r25, r30
	{
		result -= s2 - s1;
    84f2:	89 2f       	mov	r24, r25
    84f4:	86 1b       	sub	r24, r22
    84f6:	01 c0       	rjmp	.+2      	; 0x84fa <pixel_overlap+0x14>
	}
}

u8 pixel_overlap(u16 s1, u16 s2, u8 w1, u8 w2)
{
	u8 result = w1;
    84f8:	84 2f       	mov	r24, r20
	
	if (s2 > s1)
	{
		result -= s2 - s1;
	}
	s1 = s1 + w1;
    84fa:	e4 0f       	add	r30, r20
    84fc:	f1 1d       	adc	r31, r1
	s2 = s2 + w2;
    84fe:	62 0f       	add	r22, r18
    8500:	71 1d       	adc	r23, r1
	if (s2 < s1)
    8502:	6e 17       	cp	r22, r30
    8504:	7f 07       	cpc	r23, r31
    8506:	10 f4       	brcc	.+4      	; 0x850c <pixel_overlap+0x26>
	{
		result -= s1 - s2;
    8508:	6e 1b       	sub	r22, r30
    850a:	86 0f       	add	r24, r22
	}
	return result;
}
    850c:	08 95       	ret

0000850e <collision_detect_level>:

u8 collision_detect_level(SpriteShared* s, u8 tile_width, u8 tile_height)
{
    850e:	2f 92       	push	r2
    8510:	3f 92       	push	r3
    8512:	4f 92       	push	r4
    8514:	5f 92       	push	r5
    8516:	6f 92       	push	r6
    8518:	7f 92       	push	r7
    851a:	8f 92       	push	r8
    851c:	9f 92       	push	r9
    851e:	af 92       	push	r10
    8520:	bf 92       	push	r11
    8522:	cf 92       	push	r12
    8524:	df 92       	push	r13
    8526:	ef 92       	push	r14
    8528:	ff 92       	push	r15
    852a:	0f 93       	push	r16
    852c:	1f 93       	push	r17
    852e:	cf 93       	push	r28
    8530:	df 93       	push	r29
    8532:	cd b7       	in	r28, 0x3d	; 61
    8534:	de b7       	in	r29, 0x3e	; 62
    8536:	68 97       	sbiw	r28, 0x18	; 24
    8538:	0f b6       	in	r0, 0x3f	; 63
    853a:	f8 94       	cli
    853c:	de bf       	out	0x3e, r29	; 62
    853e:	0f be       	out	0x3f, r0	; 63
    8540:	cd bf       	out	0x3d, r28	; 61
    8542:	98 8f       	std	Y+24, r25	; 0x18
    8544:	8f 8b       	std	Y+23, r24	; 0x17
    8546:	16 2f       	mov	r17, r22
    8548:	49 8b       	std	Y+17, r20	; 0x11
	u16 x0_tile = s->x / 8;
    854a:	dc 01       	movw	r26, r24
    854c:	14 96       	adiw	r26, 0x04	; 4
    854e:	4d 90       	ld	r4, X+
    8550:	5d 90       	ld	r5, X+
    8552:	6d 90       	ld	r6, X+
    8554:	7c 90       	ld	r7, X
    8556:	17 97       	sbiw	r26, 0x07	; 7
    8558:	20 e0       	ldi	r18, 0x00	; 0
    855a:	30 e0       	ldi	r19, 0x00	; 0
    855c:	40 e0       	ldi	r20, 0x00	; 0
    855e:	5e e3       	ldi	r21, 0x3E	; 62
    8560:	c3 01       	movw	r24, r6
    8562:	b2 01       	movw	r22, r4
    8564:	0e 94 e8 51 	call	0xa3d0	; 0xa3d0 <__mulsf3>
    8568:	0e 94 06 51 	call	0xa20c	; 0xa20c <__fixunssfsi>
    856c:	4b 01       	movw	r8, r22
    856e:	5c 01       	movw	r10, r24
    8570:	68 87       	std	Y+8, r22	; 0x08
    8572:	9a 8a       	std	Y+18, r9	; 0x12
	u16 y0_tile = s->y / 8;
    8574:	ef 89       	ldd	r30, Y+23	; 0x17
    8576:	f8 8d       	ldd	r31, Y+24	; 0x18
    8578:	c0 84       	ldd	r12, Z+8	; 0x08
    857a:	d1 84       	ldd	r13, Z+9	; 0x09
    857c:	e2 84       	ldd	r14, Z+10	; 0x0a
    857e:	f3 84       	ldd	r15, Z+11	; 0x0b
	u16 y1_tile = (s->y+7) / 8;
	u8 lt1, lt2;
	u8 result = 0;
	
	// Only if moving
	if (s->vx == 0 && s->vy == 0) return result;
    8580:	84 85       	ldd	r24, Z+12	; 0x0c
    8582:	95 85       	ldd	r25, Z+13	; 0x0d
    8584:	89 2b       	or	r24, r25
    8586:	61 f4       	brne	.+24     	; 0x85a0 <collision_detect_level+0x92>
    8588:	20 e0       	ldi	r18, 0x00	; 0
    858a:	30 e0       	ldi	r19, 0x00	; 0
    858c:	a9 01       	movw	r20, r18
    858e:	60 81       	ld	r22, Z
    8590:	71 81       	ldd	r23, Z+1	; 0x01
    8592:	82 81       	ldd	r24, Z+2	; 0x02
    8594:	93 81       	ldd	r25, Z+3	; 0x03
    8596:	0e 94 02 51 	call	0xa204	; 0xa204 <__cmpsf2>
    859a:	88 23       	and	r24, r24
    859c:	09 f4       	brne	.+2      	; 0x85a0 <collision_detect_level+0x92>
    859e:	c2 c2       	rjmp	.+1412   	; 0x8b24 <collision_detect_level+0x616>
	
	// Top and Bottom
	if (s->vy != 0)
    85a0:	20 e0       	ldi	r18, 0x00	; 0
    85a2:	30 e0       	ldi	r19, 0x00	; 0
    85a4:	a9 01       	movw	r20, r18
    85a6:	af 89       	ldd	r26, Y+23	; 0x17
    85a8:	b8 8d       	ldd	r27, Y+24	; 0x18
    85aa:	6d 91       	ld	r22, X+
    85ac:	7d 91       	ld	r23, X+
    85ae:	8d 91       	ld	r24, X+
    85b0:	9c 91       	ld	r25, X
    85b2:	0e 94 02 51 	call	0xa204	; 0xa204 <__cmpsf2>
    85b6:	88 23       	and	r24, r24
    85b8:	09 f4       	brne	.+2      	; 0x85bc <collision_detect_level+0xae>
    85ba:	5f c1       	rjmp	.+702    	; 0x887a <collision_detect_level+0x36c>
}

u8 collision_detect_level(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u16 x0_tile = s->x / 8;
	u16 y0_tile = s->y / 8;
    85bc:	20 e0       	ldi	r18, 0x00	; 0
    85be:	30 e0       	ldi	r19, 0x00	; 0
    85c0:	40 e0       	ldi	r20, 0x00	; 0
    85c2:	5e e3       	ldi	r21, 0x3E	; 62
    85c4:	c7 01       	movw	r24, r14
    85c6:	b6 01       	movw	r22, r12
    85c8:	0e 94 e8 51 	call	0xa3d0	; 0xa3d0 <__mulsf3>
    85cc:	0e 94 06 51 	call	0xa20c	; 0xa20c <__fixunssfsi>
    85d0:	6b 01       	movw	r12, r22
    85d2:	7c 01       	movw	r14, r24
    85d4:	1b 01       	movw	r2, r22
	u16 x1_tile = (s->x+7) / 8;
    85d6:	20 e0       	ldi	r18, 0x00	; 0
    85d8:	30 e0       	ldi	r19, 0x00	; 0
    85da:	40 ee       	ldi	r20, 0xE0	; 224
    85dc:	50 e4       	ldi	r21, 0x40	; 64
    85de:	c3 01       	movw	r24, r6
    85e0:	b2 01       	movw	r22, r4
    85e2:	0e 94 9e 50 	call	0xa13c	; 0xa13c <__addsf3>
    85e6:	20 e0       	ldi	r18, 0x00	; 0
    85e8:	30 e0       	ldi	r19, 0x00	; 0
    85ea:	40 e0       	ldi	r20, 0x00	; 0
    85ec:	5e e3       	ldi	r21, 0x3E	; 62
    85ee:	0e 94 e8 51 	call	0xa3d0	; 0xa3d0 <__mulsf3>
    85f2:	0e 94 06 51 	call	0xa20c	; 0xa20c <__fixunssfsi>
		{
			if (s->vy < 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, y0_tile);
				lt2 = get_level_tile(game.current_level, x1_tile + x, y0_tile);
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    85f6:	f4 01       	movw	r30, r8
    85f8:	53 e0       	ldi	r21, 0x03	; 3
    85fa:	ee 0f       	add	r30, r30
    85fc:	ff 1f       	adc	r31, r31
    85fe:	5a 95       	dec	r21
    8600:	e1 f7       	brne	.-8      	; 0x85fa <collision_detect_level+0xec>
    8602:	fb 83       	std	Y+3, r31	; 0x03
    8604:	ea 83       	std	Y+2, r30	; 0x02
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    8606:	9b 01       	movw	r18, r22
    8608:	e3 e0       	ldi	r30, 0x03	; 3
    860a:	22 0f       	add	r18, r18
    860c:	33 1f       	adc	r19, r19
    860e:	ea 95       	dec	r30
    8610:	e1 f7       	brne	.-8      	; 0x860a <collision_detect_level+0xfc>
    8612:	3d 83       	std	Y+5, r19	; 0x05
    8614:	2c 83       	std	Y+4, r18	; 0x04
				{
					s->vy =  0;
					s->y = (y0_tile + 1) * 8;
    8616:	3f ef       	ldi	r19, 0xFF	; 255
    8618:	c3 1a       	sub	r12, r19
    861a:	d3 0a       	sbc	r13, r19
    861c:	f3 e0       	ldi	r31, 0x03	; 3
    861e:	cc 0c       	add	r12, r12
    8620:	dd 1c       	adc	r13, r13
    8622:	fa 95       	dec	r31
    8624:	e1 f7       	brne	.-8      	; 0x861e <collision_detect_level+0x110>
					result = 1;
				}
			}
			if (s->vy > 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, (s->y + tile_height*8 - 1) / 8);
    8626:	b9 89       	ldd	r27, Y+17	; 0x11
    8628:	a8 e0       	ldi	r26, 0x08	; 8
    862a:	ba 9f       	mul	r27, r26
    862c:	a0 01       	movw	r20, r0
    862e:	11 24       	eor	r1, r1
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) || 
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vy =  0;
					s->gravity = 0;
					s->y = y0_tile * 8;
    8630:	96 01       	movw	r18, r12
    8632:	28 50       	subi	r18, 0x08	; 8
    8634:	31 09       	sbc	r19, r1
    8636:	2b 01       	movw	r4, r22
    8638:	34 01       	movw	r6, r8
    863a:	19 82       	std	Y+1, r1	; 0x01
				lt2 = get_level_tile(game.current_level, x1_tile + x, y0_tile);
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vy =  0;
					s->y = (y0_tile + 1) * 8;
    863c:	b6 01       	movw	r22, r12
    863e:	80 e0       	ldi	r24, 0x00	; 0
    8640:	90 e0       	ldi	r25, 0x00	; 0
    8642:	69 87       	std	Y+9, r22	; 0x09
    8644:	7a 87       	std	Y+10, r23	; 0x0a
    8646:	8b 87       	std	Y+11, r24	; 0x0b
    8648:	9c 87       	std	Y+12, r25	; 0x0c
					result = 1;
				}
			}
			if (s->vy > 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, (s->y + tile_height*8 - 1) / 8);
    864a:	66 27       	eor	r22, r22
    864c:	57 fd       	sbrc	r21, 7
    864e:	60 95       	com	r22
    8650:	76 2f       	mov	r23, r22
    8652:	4d 87       	std	Y+13, r20	; 0x0d
    8654:	5e 87       	std	Y+14, r21	; 0x0e
    8656:	6f 87       	std	Y+15, r22	; 0x0f
    8658:	78 8b       	std	Y+16, r23	; 0x10
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) || 
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vy =  0;
					s->gravity = 0;
					s->y = y0_tile * 8;
    865a:	b9 01       	movw	r22, r18
    865c:	80 e0       	ldi	r24, 0x00	; 0
    865e:	90 e0       	ldi	r25, 0x00	; 0
    8660:	6b 8b       	std	Y+19, r22	; 0x13
    8662:	7c 8b       	std	Y+20, r23	; 0x14
    8664:	8d 8b       	std	Y+21, r24	; 0x15
    8666:	9e 8b       	std	Y+22, r25	; 0x16
    8668:	86 2d       	mov	r24, r6
    866a:	48 85       	ldd	r20, Y+8	; 0x08
    866c:	84 1b       	sub	r24, r20
	if (s->vx == 0 && s->vy == 0) return result;
	
	// Top and Bottom
	if (s->vy != 0)
	{
		for (u8 x = 0; x < tile_width; x++)
    866e:	81 17       	cp	r24, r17
    8670:	08 f0       	brcs	.+2      	; 0x8674 <collision_detect_level+0x166>
    8672:	04 c1       	rjmp	.+520    	; 0x887c <collision_detect_level+0x36e>
		{
			if (s->vy < 0)
    8674:	20 e0       	ldi	r18, 0x00	; 0
    8676:	30 e0       	ldi	r19, 0x00	; 0
    8678:	a9 01       	movw	r20, r18
    867a:	af 89       	ldd	r26, Y+23	; 0x17
    867c:	b8 8d       	ldd	r27, Y+24	; 0x18
    867e:	6d 91       	ld	r22, X+
    8680:	7d 91       	ld	r23, X+
    8682:	8d 91       	ld	r24, X+
    8684:	9c 91       	ld	r25, X
    8686:	0e 94 02 51 	call	0xa204	; 0xa204 <__cmpsf2>
    868a:	87 ff       	sbrs	r24, 7
    868c:	54 c0       	rjmp	.+168    	; 0x8736 <collision_detect_level+0x228>
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, y0_tile);
    868e:	a1 01       	movw	r20, r2
    8690:	b3 01       	movw	r22, r6
    8692:	80 91 9f 0d 	lds	r24, 0x0D9F
    8696:	0e 94 c4 3e 	call	0x7d88	; 0x7d88 <get_level_tile>
    869a:	f8 2e       	mov	r15, r24
				lt2 = get_level_tile(game.current_level, x1_tile + x, y0_tile);
    869c:	a1 01       	movw	r20, r2
    869e:	b2 01       	movw	r22, r4
    86a0:	80 91 9f 0d 	lds	r24, 0x0D9F
    86a4:	0e 94 c4 3e 	call	0x7d88	; 0x7d88 <get_level_tile>
    86a8:	08 2f       	mov	r16, r24
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    86aa:	8f 2d       	mov	r24, r15
    86ac:	0e 94 4a 3f 	call	0x7e94	; 0x7e94 <solid_tile>
    86b0:	88 23       	and	r24, r24
    86b2:	91 f0       	breq	.+36     	; 0x86d8 <collision_detect_level+0x1ca>
    86b4:	ef 89       	ldd	r30, Y+23	; 0x17
    86b6:	f8 8d       	ldd	r31, Y+24	; 0x18
    86b8:	64 81       	ldd	r22, Z+4	; 0x04
    86ba:	75 81       	ldd	r23, Z+5	; 0x05
    86bc:	86 81       	ldd	r24, Z+6	; 0x06
    86be:	97 81       	ldd	r25, Z+7	; 0x07
    86c0:	0e 94 06 51 	call	0xa20c	; 0xa20c <__fixunssfsi>
    86c4:	dc 01       	movw	r26, r24
    86c6:	cb 01       	movw	r24, r22
    86c8:	28 e0       	ldi	r18, 0x08	; 8
    86ca:	48 e0       	ldi	r20, 0x08	; 8
    86cc:	6a 81       	ldd	r22, Y+2	; 0x02
    86ce:	7b 81       	ldd	r23, Y+3	; 0x03
    86d0:	0e 94 73 42 	call	0x84e6	; 0x84e6 <pixel_overlap>
    86d4:	84 30       	cpi	r24, 0x04	; 4
    86d6:	c8 f4       	brcc	.+50     	; 0x870a <collision_detect_level+0x1fc>
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    86d8:	80 2f       	mov	r24, r16
    86da:	0e 94 4a 3f 	call	0x7e94	; 0x7e94 <solid_tile>
		{
			if (s->vy < 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, y0_tile);
				lt2 = get_level_tile(game.current_level, x1_tile + x, y0_tile);
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    86de:	88 23       	and	r24, r24
    86e0:	51 f1       	breq	.+84     	; 0x8736 <collision_detect_level+0x228>
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    86e2:	af 89       	ldd	r26, Y+23	; 0x17
    86e4:	b8 8d       	ldd	r27, Y+24	; 0x18
    86e6:	14 96       	adiw	r26, 0x04	; 4
    86e8:	6d 91       	ld	r22, X+
    86ea:	7d 91       	ld	r23, X+
    86ec:	8d 91       	ld	r24, X+
    86ee:	9c 91       	ld	r25, X
    86f0:	17 97       	sbiw	r26, 0x07	; 7
    86f2:	0e 94 06 51 	call	0xa20c	; 0xa20c <__fixunssfsi>
    86f6:	dc 01       	movw	r26, r24
    86f8:	cb 01       	movw	r24, r22
    86fa:	28 e0       	ldi	r18, 0x08	; 8
    86fc:	48 e0       	ldi	r20, 0x08	; 8
    86fe:	6c 81       	ldd	r22, Y+4	; 0x04
    8700:	7d 81       	ldd	r23, Y+5	; 0x05
    8702:	0e 94 73 42 	call	0x84e6	; 0x84e6 <pixel_overlap>
    8706:	84 30       	cpi	r24, 0x04	; 4
    8708:	b0 f0       	brcs	.+44     	; 0x8736 <collision_detect_level+0x228>
				{
					s->vy =  0;
    870a:	ef 89       	ldd	r30, Y+23	; 0x17
    870c:	f8 8d       	ldd	r31, Y+24	; 0x18
    870e:	10 82       	st	Z, r1
    8710:	11 82       	std	Z+1, r1	; 0x01
    8712:	12 82       	std	Z+2, r1	; 0x02
    8714:	13 82       	std	Z+3, r1	; 0x03
					s->y = (y0_tile + 1) * 8;
    8716:	69 85       	ldd	r22, Y+9	; 0x09
    8718:	7a 85       	ldd	r23, Y+10	; 0x0a
    871a:	8b 85       	ldd	r24, Y+11	; 0x0b
    871c:	9c 85       	ldd	r25, Y+12	; 0x0c
    871e:	0e 94 32 51 	call	0xa264	; 0xa264 <__floatunsisf>
    8722:	af 89       	ldd	r26, Y+23	; 0x17
    8724:	b8 8d       	ldd	r27, Y+24	; 0x18
    8726:	18 96       	adiw	r26, 0x08	; 8
    8728:	6d 93       	st	X+, r22
    872a:	7d 93       	st	X+, r23
    872c:	8d 93       	st	X+, r24
    872e:	9c 93       	st	X, r25
    8730:	1b 97       	sbiw	r26, 0x0b	; 11
					result = 1;
    8732:	b1 e0       	ldi	r27, 0x01	; 1
    8734:	b9 83       	std	Y+1, r27	; 0x01
				}
			}
			if (s->vy > 0)
    8736:	20 e0       	ldi	r18, 0x00	; 0
    8738:	30 e0       	ldi	r19, 0x00	; 0
    873a:	a9 01       	movw	r20, r18
    873c:	ef 89       	ldd	r30, Y+23	; 0x17
    873e:	f8 8d       	ldd	r31, Y+24	; 0x18
    8740:	60 81       	ld	r22, Z
    8742:	71 81       	ldd	r23, Z+1	; 0x01
    8744:	82 81       	ldd	r24, Z+2	; 0x02
    8746:	93 81       	ldd	r25, Z+3	; 0x03
    8748:	0e 94 e4 51 	call	0xa3c8	; 0xa3c8 <__gesf2>
    874c:	18 16       	cp	r1, r24
    874e:	0c f0       	brlt	.+2      	; 0x8752 <collision_detect_level+0x244>
    8750:	8d c0       	rjmp	.+282    	; 0x886c <collision_detect_level+0x35e>
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, (s->y + tile_height*8 - 1) / 8);
    8752:	6d 85       	ldd	r22, Y+13	; 0x0d
    8754:	7e 85       	ldd	r23, Y+14	; 0x0e
    8756:	8f 85       	ldd	r24, Y+15	; 0x0f
    8758:	98 89       	ldd	r25, Y+16	; 0x10
    875a:	0e 94 34 51 	call	0xa268	; 0xa268 <__floatsisf>
    875e:	6b 01       	movw	r12, r22
    8760:	7c 01       	movw	r14, r24
    8762:	af 89       	ldd	r26, Y+23	; 0x17
    8764:	b8 8d       	ldd	r27, Y+24	; 0x18
    8766:	18 96       	adiw	r26, 0x08	; 8
    8768:	2d 91       	ld	r18, X+
    876a:	3d 91       	ld	r19, X+
    876c:	4d 91       	ld	r20, X+
    876e:	5c 91       	ld	r21, X
    8770:	1b 97       	sbiw	r26, 0x0b	; 11
    8772:	0e 94 9e 50 	call	0xa13c	; 0xa13c <__addsf3>
    8776:	20 e0       	ldi	r18, 0x00	; 0
    8778:	30 e0       	ldi	r19, 0x00	; 0
    877a:	40 e8       	ldi	r20, 0x80	; 128
    877c:	5f e3       	ldi	r21, 0x3F	; 63
    877e:	0e 94 9d 50 	call	0xa13a	; 0xa13a <__subsf3>
    8782:	20 e0       	ldi	r18, 0x00	; 0
    8784:	30 e0       	ldi	r19, 0x00	; 0
    8786:	40 e0       	ldi	r20, 0x00	; 0
    8788:	5e e3       	ldi	r21, 0x3E	; 62
    878a:	0e 94 e8 51 	call	0xa3d0	; 0xa3d0 <__mulsf3>
    878e:	0e 94 06 51 	call	0xa20c	; 0xa20c <__fixunssfsi>
    8792:	ab 01       	movw	r20, r22
    8794:	b3 01       	movw	r22, r6
    8796:	80 91 9f 0d 	lds	r24, 0x0D9F
    879a:	0e 94 c4 3e 	call	0x7d88	; 0x7d88 <get_level_tile>
    879e:	08 2f       	mov	r16, r24
				lt2 = get_level_tile(game.current_level, x1_tile + x, (s->y + tile_height*8 - 1) / 8);
    87a0:	ef 89       	ldd	r30, Y+23	; 0x17
    87a2:	f8 8d       	ldd	r31, Y+24	; 0x18
    87a4:	20 85       	ldd	r18, Z+8	; 0x08
    87a6:	31 85       	ldd	r19, Z+9	; 0x09
    87a8:	42 85       	ldd	r20, Z+10	; 0x0a
    87aa:	53 85       	ldd	r21, Z+11	; 0x0b
    87ac:	c7 01       	movw	r24, r14
    87ae:	b6 01       	movw	r22, r12
    87b0:	0e 94 9e 50 	call	0xa13c	; 0xa13c <__addsf3>
    87b4:	20 e0       	ldi	r18, 0x00	; 0
    87b6:	30 e0       	ldi	r19, 0x00	; 0
    87b8:	40 e8       	ldi	r20, 0x80	; 128
    87ba:	5f e3       	ldi	r21, 0x3F	; 63
    87bc:	0e 94 9d 50 	call	0xa13a	; 0xa13a <__subsf3>
    87c0:	20 e0       	ldi	r18, 0x00	; 0
    87c2:	30 e0       	ldi	r19, 0x00	; 0
    87c4:	40 e0       	ldi	r20, 0x00	; 0
    87c6:	5e e3       	ldi	r21, 0x3E	; 62
    87c8:	0e 94 e8 51 	call	0xa3d0	; 0xa3d0 <__mulsf3>
    87cc:	0e 94 06 51 	call	0xa20c	; 0xa20c <__fixunssfsi>
    87d0:	ab 01       	movw	r20, r22
    87d2:	b2 01       	movw	r22, r4
    87d4:	80 91 9f 0d 	lds	r24, 0x0D9F
    87d8:	0e 94 c4 3e 	call	0x7d88	; 0x7d88 <get_level_tile>
    87dc:	f8 2e       	mov	r15, r24
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) || 
    87de:	80 2f       	mov	r24, r16
    87e0:	0e 94 4a 3f 	call	0x7e94	; 0x7e94 <solid_tile>
    87e4:	88 23       	and	r24, r24
    87e6:	a1 f0       	breq	.+40     	; 0x8810 <collision_detect_level+0x302>
    87e8:	af 89       	ldd	r26, Y+23	; 0x17
    87ea:	b8 8d       	ldd	r27, Y+24	; 0x18
    87ec:	14 96       	adiw	r26, 0x04	; 4
    87ee:	6d 91       	ld	r22, X+
    87f0:	7d 91       	ld	r23, X+
    87f2:	8d 91       	ld	r24, X+
    87f4:	9c 91       	ld	r25, X
    87f6:	17 97       	sbiw	r26, 0x07	; 7
    87f8:	0e 94 06 51 	call	0xa20c	; 0xa20c <__fixunssfsi>
    87fc:	dc 01       	movw	r26, r24
    87fe:	cb 01       	movw	r24, r22
    8800:	28 e0       	ldi	r18, 0x08	; 8
    8802:	48 e0       	ldi	r20, 0x08	; 8
    8804:	6a 81       	ldd	r22, Y+2	; 0x02
    8806:	7b 81       	ldd	r23, Y+3	; 0x03
    8808:	0e 94 73 42 	call	0x84e6	; 0x84e6 <pixel_overlap>
    880c:	84 30       	cpi	r24, 0x04	; 4
    880e:	b8 f4       	brcc	.+46     	; 0x883e <collision_detect_level+0x330>
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    8810:	8f 2d       	mov	r24, r15
    8812:	0e 94 4a 3f 	call	0x7e94	; 0x7e94 <solid_tile>
			}
			if (s->vy > 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, (s->y + tile_height*8 - 1) / 8);
				lt2 = get_level_tile(game.current_level, x1_tile + x, (s->y + tile_height*8 - 1) / 8);
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) || 
    8816:	88 23       	and	r24, r24
    8818:	49 f1       	breq	.+82     	; 0x886c <collision_detect_level+0x35e>
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    881a:	ef 89       	ldd	r30, Y+23	; 0x17
    881c:	f8 8d       	ldd	r31, Y+24	; 0x18
    881e:	64 81       	ldd	r22, Z+4	; 0x04
    8820:	75 81       	ldd	r23, Z+5	; 0x05
    8822:	86 81       	ldd	r24, Z+6	; 0x06
    8824:	97 81       	ldd	r25, Z+7	; 0x07
    8826:	0e 94 06 51 	call	0xa20c	; 0xa20c <__fixunssfsi>
    882a:	dc 01       	movw	r26, r24
    882c:	cb 01       	movw	r24, r22
    882e:	28 e0       	ldi	r18, 0x08	; 8
    8830:	48 e0       	ldi	r20, 0x08	; 8
    8832:	6c 81       	ldd	r22, Y+4	; 0x04
    8834:	7d 81       	ldd	r23, Y+5	; 0x05
    8836:	0e 94 73 42 	call	0x84e6	; 0x84e6 <pixel_overlap>
    883a:	84 30       	cpi	r24, 0x04	; 4
    883c:	b8 f0       	brcs	.+46     	; 0x886c <collision_detect_level+0x35e>
				{
					s->vy =  0;
    883e:	af 89       	ldd	r26, Y+23	; 0x17
    8840:	b8 8d       	ldd	r27, Y+24	; 0x18
    8842:	1d 92       	st	X+, r1
    8844:	1d 92       	st	X+, r1
    8846:	1d 92       	st	X+, r1
    8848:	1c 92       	st	X, r1
    884a:	13 97       	sbiw	r26, 0x03	; 3
					s->gravity = 0;
    884c:	1e 96       	adiw	r26, 0x0e	; 14
    884e:	1c 92       	st	X, r1
					s->y = y0_tile * 8;
    8850:	6b 89       	ldd	r22, Y+19	; 0x13
    8852:	7c 89       	ldd	r23, Y+20	; 0x14
    8854:	8d 89       	ldd	r24, Y+21	; 0x15
    8856:	9e 89       	ldd	r25, Y+22	; 0x16
    8858:	0e 94 32 51 	call	0xa264	; 0xa264 <__floatunsisf>
    885c:	ef 89       	ldd	r30, Y+23	; 0x17
    885e:	f8 8d       	ldd	r31, Y+24	; 0x18
    8860:	60 87       	std	Z+8, r22	; 0x08
    8862:	71 87       	std	Z+9, r23	; 0x09
    8864:	82 87       	std	Z+10, r24	; 0x0a
    8866:	93 87       	std	Z+11, r25	; 0x0b
					result = 1;
    8868:	f1 e0       	ldi	r31, 0x01	; 1
    886a:	f9 83       	std	Y+1, r31	; 0x01
    886c:	2f ef       	ldi	r18, 0xFF	; 255
    886e:	62 1a       	sub	r6, r18
    8870:	72 0a       	sbc	r7, r18
    8872:	3f ef       	ldi	r19, 0xFF	; 255
    8874:	43 1a       	sub	r4, r19
    8876:	53 0a       	sbc	r5, r19
    8878:	f7 ce       	rjmp	.-530    	; 0x8668 <collision_detect_level+0x15a>
	u16 x0_tile = s->x / 8;
	u16 y0_tile = s->y / 8;
	u16 x1_tile = (s->x+7) / 8;
	u16 y1_tile = (s->y+7) / 8;
	u8 lt1, lt2;
	u8 result = 0;
    887a:	19 82       	std	Y+1, r1	; 0x01
			}
		}
	}
	
	// Left and Right
	if (s->vx != 0)
    887c:	af 89       	ldd	r26, Y+23	; 0x17
    887e:	b8 8d       	ldd	r27, Y+24	; 0x18
    8880:	1c 96       	adiw	r26, 0x0c	; 12
    8882:	8d 91       	ld	r24, X+
    8884:	9c 91       	ld	r25, X
    8886:	1d 97       	sbiw	r26, 0x0d	; 13
    8888:	89 2b       	or	r24, r25
    888a:	09 f4       	brne	.+2      	; 0x888e <collision_detect_level+0x380>
    888c:	4c c1       	rjmp	.+664    	; 0x8b26 <collision_detect_level+0x618>
	{
		y0_tile = s->y / 8;
    888e:	18 96       	adiw	r26, 0x08	; 8
    8890:	cd 90       	ld	r12, X+
    8892:	dd 90       	ld	r13, X+
    8894:	ed 90       	ld	r14, X+
    8896:	fc 90       	ld	r15, X
    8898:	1b 97       	sbiw	r26, 0x0b	; 11
    889a:	20 e0       	ldi	r18, 0x00	; 0
    889c:	30 e0       	ldi	r19, 0x00	; 0
    889e:	40 e0       	ldi	r20, 0x00	; 0
    88a0:	5e e3       	ldi	r21, 0x3E	; 62
    88a2:	c7 01       	movw	r24, r14
    88a4:	b6 01       	movw	r22, r12
    88a6:	0e 94 e8 51 	call	0xa3d0	; 0xa3d0 <__mulsf3>
    88aa:	0e 94 06 51 	call	0xa20c	; 0xa20c <__fixunssfsi>
    88ae:	2b 01       	movw	r4, r22
    88b0:	3c 01       	movw	r6, r24
    88b2:	6d 87       	std	Y+13, r22	; 0x0d
		y1_tile = (s->y+7) / 8;
    88b4:	20 e0       	ldi	r18, 0x00	; 0
    88b6:	30 e0       	ldi	r19, 0x00	; 0
    88b8:	40 ee       	ldi	r20, 0xE0	; 224
    88ba:	50 e4       	ldi	r21, 0x40	; 64
    88bc:	c7 01       	movw	r24, r14
    88be:	b6 01       	movw	r22, r12
    88c0:	0e 94 9e 50 	call	0xa13c	; 0xa13c <__addsf3>
    88c4:	20 e0       	ldi	r18, 0x00	; 0
    88c6:	30 e0       	ldi	r19, 0x00	; 0
    88c8:	40 e0       	ldi	r20, 0x00	; 0
    88ca:	5e e3       	ldi	r21, 0x3E	; 62
    88cc:	0e 94 e8 51 	call	0xa3d0	; 0xa3d0 <__mulsf3>
    88d0:	0e 94 06 51 	call	0xa20c	; 0xa20c <__fixunssfsi>
		{
			if (s->vx < 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile, y0_tile + y);
				lt2 = get_level_tile(game.current_level, x0_tile, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    88d4:	12 01       	movw	r2, r4
    88d6:	83 e0       	ldi	r24, 0x03	; 3
    88d8:	22 0c       	add	r2, r2
    88da:	33 1c       	adc	r3, r3
    88dc:	8a 95       	dec	r24
    88de:	e1 f7       	brne	.-8      	; 0x88d8 <collision_detect_level+0x3ca>
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    88e0:	fb 01       	movw	r30, r22
    88e2:	93 e0       	ldi	r25, 0x03	; 3
    88e4:	ee 0f       	add	r30, r30
    88e6:	ff 1f       	adc	r31, r31
    88e8:	9a 95       	dec	r25
    88ea:	e1 f7       	brne	.-8      	; 0x88e4 <collision_detect_level+0x3d6>
    88ec:	fb 83       	std	Y+3, r31	; 0x03
    88ee:	ea 83       	std	Y+2, r30	; 0x02
				{
					s->vx =  0;
					s->x = (x0_tile + 1) * 8;
    88f0:	ff ef       	ldi	r31, 0xFF	; 255
    88f2:	8f 1a       	sub	r8, r31
    88f4:	9f 0a       	sbc	r9, r31
    88f6:	94 01       	movw	r18, r8
    88f8:	43 e0       	ldi	r20, 0x03	; 3
    88fa:	22 0f       	add	r18, r18
    88fc:	33 1f       	adc	r19, r19
    88fe:	4a 95       	dec	r20
    8900:	e1 f7       	brne	.-8      	; 0x88fa <collision_detect_level+0x3ec>
				}
			}
			
			if (s->vx > 0)
			{
				lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y0_tile + y);
    8902:	a8 e0       	ldi	r26, 0x08	; 8
    8904:	1a 9f       	mul	r17, r26
    8906:	a0 01       	movw	r20, r0
    8908:	11 24       	eor	r1, r1
				lt2 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vx =  0;
					s->x = x0_tile * 8;
    890a:	49 01       	movw	r8, r18
    890c:	b8 e0       	ldi	r27, 0x08	; 8
    890e:	8b 1a       	sub	r8, r27
    8910:	91 08       	sbc	r9, r1
	// Left and Right
	if (s->vx != 0)
	{
		y0_tile = s->y / 8;
		y1_tile = (s->y+7) / 8;
		for (u8 y = 0; y < tile_height; y++)
    8912:	6b 01       	movw	r12, r22
    8914:	82 01       	movw	r16, r4
				lt2 = get_level_tile(game.current_level, x0_tile, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vx =  0;
					s->x = (x0_tile + 1) * 8;
    8916:	b9 01       	movw	r22, r18
    8918:	80 e0       	ldi	r24, 0x00	; 0
    891a:	90 e0       	ldi	r25, 0x00	; 0
    891c:	6c 83       	std	Y+4, r22	; 0x04
    891e:	7d 83       	std	Y+5, r23	; 0x05
    8920:	8e 83       	std	Y+6, r24	; 0x06
    8922:	9f 83       	std	Y+7, r25	; 0x07
				}
			}
			
			if (s->vx > 0)
			{
				lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y0_tile + y);
    8924:	ca 01       	movw	r24, r20
    8926:	aa 27       	eor	r26, r26
    8928:	97 fd       	sbrc	r25, 7
    892a:	a0 95       	com	r26
    892c:	ba 2f       	mov	r27, r26
    892e:	89 87       	std	Y+9, r24	; 0x09
    8930:	9a 87       	std	Y+10, r25	; 0x0a
    8932:	ab 87       	std	Y+11, r26	; 0x0b
    8934:	bc 87       	std	Y+12, r27	; 0x0c
				lt2 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vx =  0;
					s->x = x0_tile * 8;
    8936:	a1 2c       	mov	r10, r1
    8938:	b1 2c       	mov	r11, r1
    893a:	80 2f       	mov	r24, r16
    893c:	3d 85       	ldd	r19, Y+13	; 0x0d
    893e:	83 1b       	sub	r24, r19
	// Left and Right
	if (s->vx != 0)
	{
		y0_tile = s->y / 8;
		y1_tile = (s->y+7) / 8;
		for (u8 y = 0; y < tile_height; y++)
    8940:	49 89       	ldd	r20, Y+17	; 0x11
    8942:	84 17       	cp	r24, r20
    8944:	08 f0       	brcs	.+2      	; 0x8948 <collision_detect_level+0x43a>
    8946:	ef c0       	rjmp	.+478    	; 0x8b26 <collision_detect_level+0x618>
		{
			if (s->vx < 0)
    8948:	af 89       	ldd	r26, Y+23	; 0x17
    894a:	b8 8d       	ldd	r27, Y+24	; 0x18
    894c:	1c 96       	adiw	r26, 0x0c	; 12
    894e:	8d 91       	ld	r24, X+
    8950:	9c 91       	ld	r25, X
    8952:	1d 97       	sbiw	r26, 0x0d	; 13
    8954:	97 ff       	sbrs	r25, 7
    8956:	53 c0       	rjmp	.+166    	; 0x89fe <collision_detect_level+0x4f0>
			{
				lt1 = get_level_tile(game.current_level, x0_tile, y0_tile + y);
    8958:	a8 01       	movw	r20, r16
    895a:	68 85       	ldd	r22, Y+8	; 0x08
    895c:	7a 89       	ldd	r23, Y+18	; 0x12
    895e:	80 91 9f 0d 	lds	r24, 0x0D9F
    8962:	0e 94 c4 3e 	call	0x7d88	; 0x7d88 <get_level_tile>
    8966:	78 2e       	mov	r7, r24
				lt2 = get_level_tile(game.current_level, x0_tile, y1_tile + y);
    8968:	a6 01       	movw	r20, r12
    896a:	68 85       	ldd	r22, Y+8	; 0x08
    896c:	7a 89       	ldd	r23, Y+18	; 0x12
    896e:	80 91 9f 0d 	lds	r24, 0x0D9F
    8972:	0e 94 c4 3e 	call	0x7d88	; 0x7d88 <get_level_tile>
    8976:	e8 2e       	mov	r14, r24
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    8978:	87 2d       	mov	r24, r7
    897a:	0e 94 4a 3f 	call	0x7e94	; 0x7e94 <solid_tile>
    897e:	88 23       	and	r24, r24
    8980:	89 f0       	breq	.+34     	; 0x89a4 <collision_detect_level+0x496>
    8982:	ef 89       	ldd	r30, Y+23	; 0x17
    8984:	f8 8d       	ldd	r31, Y+24	; 0x18
    8986:	60 85       	ldd	r22, Z+8	; 0x08
    8988:	71 85       	ldd	r23, Z+9	; 0x09
    898a:	82 85       	ldd	r24, Z+10	; 0x0a
    898c:	93 85       	ldd	r25, Z+11	; 0x0b
    898e:	0e 94 06 51 	call	0xa20c	; 0xa20c <__fixunssfsi>
    8992:	dc 01       	movw	r26, r24
    8994:	cb 01       	movw	r24, r22
    8996:	28 e0       	ldi	r18, 0x08	; 8
    8998:	48 e0       	ldi	r20, 0x08	; 8
    899a:	b1 01       	movw	r22, r2
    899c:	0e 94 73 42 	call	0x84e6	; 0x84e6 <pixel_overlap>
    89a0:	84 30       	cpi	r24, 0x04	; 4
    89a2:	c8 f4       	brcc	.+50     	; 0x89d6 <collision_detect_level+0x4c8>
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    89a4:	8e 2d       	mov	r24, r14
    89a6:	0e 94 4a 3f 	call	0x7e94	; 0x7e94 <solid_tile>
		{
			if (s->vx < 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile, y0_tile + y);
				lt2 = get_level_tile(game.current_level, x0_tile, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    89aa:	88 23       	and	r24, r24
    89ac:	41 f1       	breq	.+80     	; 0x89fe <collision_detect_level+0x4f0>
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    89ae:	af 89       	ldd	r26, Y+23	; 0x17
    89b0:	b8 8d       	ldd	r27, Y+24	; 0x18
    89b2:	18 96       	adiw	r26, 0x08	; 8
    89b4:	6d 91       	ld	r22, X+
    89b6:	7d 91       	ld	r23, X+
    89b8:	8d 91       	ld	r24, X+
    89ba:	9c 91       	ld	r25, X
    89bc:	1b 97       	sbiw	r26, 0x0b	; 11
    89be:	0e 94 06 51 	call	0xa20c	; 0xa20c <__fixunssfsi>
    89c2:	dc 01       	movw	r26, r24
    89c4:	cb 01       	movw	r24, r22
    89c6:	28 e0       	ldi	r18, 0x08	; 8
    89c8:	48 e0       	ldi	r20, 0x08	; 8
    89ca:	6a 81       	ldd	r22, Y+2	; 0x02
    89cc:	7b 81       	ldd	r23, Y+3	; 0x03
    89ce:	0e 94 73 42 	call	0x84e6	; 0x84e6 <pixel_overlap>
    89d2:	84 30       	cpi	r24, 0x04	; 4
    89d4:	a0 f0       	brcs	.+40     	; 0x89fe <collision_detect_level+0x4f0>
				{
					s->vx =  0;
    89d6:	ef 89       	ldd	r30, Y+23	; 0x17
    89d8:	f8 8d       	ldd	r31, Y+24	; 0x18
    89da:	15 86       	std	Z+13, r1	; 0x0d
    89dc:	14 86       	std	Z+12, r1	; 0x0c
					s->x = (x0_tile + 1) * 8;
    89de:	6c 81       	ldd	r22, Y+4	; 0x04
    89e0:	7d 81       	ldd	r23, Y+5	; 0x05
    89e2:	8e 81       	ldd	r24, Y+6	; 0x06
    89e4:	9f 81       	ldd	r25, Y+7	; 0x07
    89e6:	0e 94 32 51 	call	0xa264	; 0xa264 <__floatunsisf>
    89ea:	af 89       	ldd	r26, Y+23	; 0x17
    89ec:	b8 8d       	ldd	r27, Y+24	; 0x18
    89ee:	14 96       	adiw	r26, 0x04	; 4
    89f0:	6d 93       	st	X+, r22
    89f2:	7d 93       	st	X+, r23
    89f4:	8d 93       	st	X+, r24
    89f6:	9c 93       	st	X, r25
    89f8:	17 97       	sbiw	r26, 0x07	; 7
					result = 1;
    89fa:	b1 e0       	ldi	r27, 0x01	; 1
    89fc:	b9 83       	std	Y+1, r27	; 0x01
				}
			}
			
			if (s->vx > 0)
    89fe:	ef 89       	ldd	r30, Y+23	; 0x17
    8a00:	f8 8d       	ldd	r31, Y+24	; 0x18
    8a02:	84 85       	ldd	r24, Z+12	; 0x0c
    8a04:	95 85       	ldd	r25, Z+13	; 0x0d
    8a06:	18 16       	cp	r1, r24
    8a08:	19 06       	cpc	r1, r25
    8a0a:	0c f0       	brlt	.+2      	; 0x8a0e <collision_detect_level+0x500>
    8a0c:	85 c0       	rjmp	.+266    	; 0x8b18 <collision_detect_level+0x60a>
			{
				lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y0_tile + y);
    8a0e:	69 85       	ldd	r22, Y+9	; 0x09
    8a10:	7a 85       	ldd	r23, Y+10	; 0x0a
    8a12:	8b 85       	ldd	r24, Y+11	; 0x0b
    8a14:	9c 85       	ldd	r25, Y+12	; 0x0c
    8a16:	0e 94 34 51 	call	0xa268	; 0xa268 <__floatsisf>
    8a1a:	2b 01       	movw	r4, r22
    8a1c:	3c 01       	movw	r6, r24
    8a1e:	af 89       	ldd	r26, Y+23	; 0x17
    8a20:	b8 8d       	ldd	r27, Y+24	; 0x18
    8a22:	14 96       	adiw	r26, 0x04	; 4
    8a24:	2d 91       	ld	r18, X+
    8a26:	3d 91       	ld	r19, X+
    8a28:	4d 91       	ld	r20, X+
    8a2a:	5c 91       	ld	r21, X
    8a2c:	17 97       	sbiw	r26, 0x07	; 7
    8a2e:	0e 94 9e 50 	call	0xa13c	; 0xa13c <__addsf3>
    8a32:	20 e0       	ldi	r18, 0x00	; 0
    8a34:	30 e0       	ldi	r19, 0x00	; 0
    8a36:	40 e8       	ldi	r20, 0x80	; 128
    8a38:	5f e3       	ldi	r21, 0x3F	; 63
    8a3a:	0e 94 9d 50 	call	0xa13a	; 0xa13a <__subsf3>
    8a3e:	20 e0       	ldi	r18, 0x00	; 0
    8a40:	30 e0       	ldi	r19, 0x00	; 0
    8a42:	40 e0       	ldi	r20, 0x00	; 0
    8a44:	5e e3       	ldi	r21, 0x3E	; 62
    8a46:	0e 94 e8 51 	call	0xa3d0	; 0xa3d0 <__mulsf3>
    8a4a:	0e 94 06 51 	call	0xa20c	; 0xa20c <__fixunssfsi>
    8a4e:	a8 01       	movw	r20, r16
    8a50:	80 91 9f 0d 	lds	r24, 0x0D9F
    8a54:	0e 94 c4 3e 	call	0x7d88	; 0x7d88 <get_level_tile>
    8a58:	e8 2e       	mov	r14, r24
				lt2 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y1_tile + y);
    8a5a:	ef 89       	ldd	r30, Y+23	; 0x17
    8a5c:	f8 8d       	ldd	r31, Y+24	; 0x18
    8a5e:	24 81       	ldd	r18, Z+4	; 0x04
    8a60:	35 81       	ldd	r19, Z+5	; 0x05
    8a62:	46 81       	ldd	r20, Z+6	; 0x06
    8a64:	57 81       	ldd	r21, Z+7	; 0x07
    8a66:	c3 01       	movw	r24, r6
    8a68:	b2 01       	movw	r22, r4
    8a6a:	0e 94 9e 50 	call	0xa13c	; 0xa13c <__addsf3>
    8a6e:	20 e0       	ldi	r18, 0x00	; 0
    8a70:	30 e0       	ldi	r19, 0x00	; 0
    8a72:	40 e8       	ldi	r20, 0x80	; 128
    8a74:	5f e3       	ldi	r21, 0x3F	; 63
    8a76:	0e 94 9d 50 	call	0xa13a	; 0xa13a <__subsf3>
    8a7a:	20 e0       	ldi	r18, 0x00	; 0
    8a7c:	30 e0       	ldi	r19, 0x00	; 0
    8a7e:	40 e0       	ldi	r20, 0x00	; 0
    8a80:	5e e3       	ldi	r21, 0x3E	; 62
    8a82:	0e 94 e8 51 	call	0xa3d0	; 0xa3d0 <__mulsf3>
    8a86:	0e 94 06 51 	call	0xa20c	; 0xa20c <__fixunssfsi>
    8a8a:	a6 01       	movw	r20, r12
    8a8c:	80 91 9f 0d 	lds	r24, 0x0D9F
    8a90:	0e 94 c4 3e 	call	0x7d88	; 0x7d88 <get_level_tile>
    8a94:	78 2e       	mov	r7, r24
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    8a96:	8e 2d       	mov	r24, r14
    8a98:	0e 94 4a 3f 	call	0x7e94	; 0x7e94 <solid_tile>
    8a9c:	88 23       	and	r24, r24
    8a9e:	99 f0       	breq	.+38     	; 0x8ac6 <collision_detect_level+0x5b8>
    8aa0:	af 89       	ldd	r26, Y+23	; 0x17
    8aa2:	b8 8d       	ldd	r27, Y+24	; 0x18
    8aa4:	18 96       	adiw	r26, 0x08	; 8
    8aa6:	6d 91       	ld	r22, X+
    8aa8:	7d 91       	ld	r23, X+
    8aaa:	8d 91       	ld	r24, X+
    8aac:	9c 91       	ld	r25, X
    8aae:	1b 97       	sbiw	r26, 0x0b	; 11
    8ab0:	0e 94 06 51 	call	0xa20c	; 0xa20c <__fixunssfsi>
    8ab4:	dc 01       	movw	r26, r24
    8ab6:	cb 01       	movw	r24, r22
    8ab8:	28 e0       	ldi	r18, 0x08	; 8
    8aba:	48 e0       	ldi	r20, 0x08	; 8
    8abc:	b1 01       	movw	r22, r2
    8abe:	0e 94 73 42 	call	0x84e6	; 0x84e6 <pixel_overlap>
    8ac2:	84 30       	cpi	r24, 0x04	; 4
    8ac4:	b8 f4       	brcc	.+46     	; 0x8af4 <collision_detect_level+0x5e6>
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    8ac6:	87 2d       	mov	r24, r7
    8ac8:	0e 94 4a 3f 	call	0x7e94	; 0x7e94 <solid_tile>
			
			if (s->vx > 0)
			{
				lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y0_tile + y);
				lt2 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    8acc:	88 23       	and	r24, r24
    8ace:	21 f1       	breq	.+72     	; 0x8b18 <collision_detect_level+0x60a>
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    8ad0:	ef 89       	ldd	r30, Y+23	; 0x17
    8ad2:	f8 8d       	ldd	r31, Y+24	; 0x18
    8ad4:	60 85       	ldd	r22, Z+8	; 0x08
    8ad6:	71 85       	ldd	r23, Z+9	; 0x09
    8ad8:	82 85       	ldd	r24, Z+10	; 0x0a
    8ada:	93 85       	ldd	r25, Z+11	; 0x0b
    8adc:	0e 94 06 51 	call	0xa20c	; 0xa20c <__fixunssfsi>
    8ae0:	dc 01       	movw	r26, r24
    8ae2:	cb 01       	movw	r24, r22
    8ae4:	28 e0       	ldi	r18, 0x08	; 8
    8ae6:	48 e0       	ldi	r20, 0x08	; 8
    8ae8:	6a 81       	ldd	r22, Y+2	; 0x02
    8aea:	7b 81       	ldd	r23, Y+3	; 0x03
    8aec:	0e 94 73 42 	call	0x84e6	; 0x84e6 <pixel_overlap>
    8af0:	84 30       	cpi	r24, 0x04	; 4
    8af2:	90 f0       	brcs	.+36     	; 0x8b18 <collision_detect_level+0x60a>
				{
					s->vx =  0;
    8af4:	af 89       	ldd	r26, Y+23	; 0x17
    8af6:	b8 8d       	ldd	r27, Y+24	; 0x18
    8af8:	1d 96       	adiw	r26, 0x0d	; 13
    8afa:	1c 92       	st	X, r1
    8afc:	1e 92       	st	-X, r1
    8afe:	1c 97       	sbiw	r26, 0x0c	; 12
					s->x = x0_tile * 8;
    8b00:	c5 01       	movw	r24, r10
    8b02:	b4 01       	movw	r22, r8
    8b04:	0e 94 32 51 	call	0xa264	; 0xa264 <__floatunsisf>
    8b08:	ef 89       	ldd	r30, Y+23	; 0x17
    8b0a:	f8 8d       	ldd	r31, Y+24	; 0x18
    8b0c:	64 83       	std	Z+4, r22	; 0x04
    8b0e:	75 83       	std	Z+5, r23	; 0x05
    8b10:	86 83       	std	Z+6, r24	; 0x06
    8b12:	97 83       	std	Z+7, r25	; 0x07
					result = 1;
    8b14:	f1 e0       	ldi	r31, 0x01	; 1
    8b16:	f9 83       	std	Y+1, r31	; 0x01
    8b18:	0f 5f       	subi	r16, 0xFF	; 255
    8b1a:	1f 4f       	sbci	r17, 0xFF	; 255
    8b1c:	2f ef       	ldi	r18, 0xFF	; 255
    8b1e:	c2 1a       	sub	r12, r18
    8b20:	d2 0a       	sbc	r13, r18
    8b22:	0b cf       	rjmp	.-490    	; 0x893a <collision_detect_level+0x42c>
	u16 y1_tile = (s->y+7) / 8;
	u8 lt1, lt2;
	u8 result = 0;
	
	// Only if moving
	if (s->vx == 0 && s->vy == 0) return result;
    8b24:	19 82       	std	Y+1, r1	; 0x01
				}
			}
		}
	}
	return result;
}
    8b26:	89 81       	ldd	r24, Y+1	; 0x01
    8b28:	68 96       	adiw	r28, 0x18	; 24
    8b2a:	0f b6       	in	r0, 0x3f	; 63
    8b2c:	f8 94       	cli
    8b2e:	de bf       	out	0x3e, r29	; 62
    8b30:	0f be       	out	0x3f, r0	; 63
    8b32:	cd bf       	out	0x3d, r28	; 61
    8b34:	df 91       	pop	r29
    8b36:	cf 91       	pop	r28
    8b38:	1f 91       	pop	r17
    8b3a:	0f 91       	pop	r16
    8b3c:	ff 90       	pop	r15
    8b3e:	ef 90       	pop	r14
    8b40:	df 90       	pop	r13
    8b42:	cf 90       	pop	r12
    8b44:	bf 90       	pop	r11
    8b46:	af 90       	pop	r10
    8b48:	9f 90       	pop	r9
    8b4a:	8f 90       	pop	r8
    8b4c:	7f 90       	pop	r7
    8b4e:	6f 90       	pop	r6
    8b50:	5f 90       	pop	r5
    8b52:	4f 90       	pop	r4
    8b54:	3f 90       	pop	r3
    8b56:	2f 90       	pop	r2
    8b58:	08 95       	ret

00008b5a <animate_shot>:
		game.player.active_shots++;
	}
}

void animate_shot()
{
    8b5a:	2f 92       	push	r2
    8b5c:	3f 92       	push	r3
    8b5e:	4f 92       	push	r4
    8b60:	5f 92       	push	r5
    8b62:	6f 92       	push	r6
    8b64:	7f 92       	push	r7
    8b66:	8f 92       	push	r8
    8b68:	9f 92       	push	r9
    8b6a:	af 92       	push	r10
    8b6c:	bf 92       	push	r11
    8b6e:	cf 92       	push	r12
    8b70:	df 92       	push	r13
    8b72:	ef 92       	push	r14
    8b74:	ff 92       	push	r15
    8b76:	0f 93       	push	r16
    8b78:	1f 93       	push	r17
    8b7a:	cf 93       	push	r28
    8b7c:	df 93       	push	r29
    8b7e:	cd b7       	in	r28, 0x3d	; 61
    8b80:	de b7       	in	r29, 0x3e	; 62
    8b82:	2f 97       	sbiw	r28, 0x0f	; 15
    8b84:	0f b6       	in	r0, 0x3f	; 63
    8b86:	f8 94       	cli
    8b88:	de bf       	out	0x3e, r29	; 62
    8b8a:	0f be       	out	0x3f, r0	; 63
    8b8c:	cd bf       	out	0x3d, r28	; 61
    8b8e:	90 ed       	ldi	r25, 0xD0	; 208
    8b90:	89 2e       	mov	r8, r25
    8b92:	9d e0       	ldi	r25, 0x0D	; 13
    8b94:	99 2e       	mov	r9, r25
    8b96:	8f eb       	ldi	r24, 0xBF	; 191
    8b98:	9d e0       	ldi	r25, 0x0D	; 13
    8b9a:	9f 87       	std	Y+15, r25	; 0x0f
    8b9c:	8e 87       	std	Y+14, r24	; 0x0e
    8b9e:	9b e0       	ldi	r25, 0x0B	; 11
    8ba0:	99 83       	std	Y+1, r25	; 0x01
						SFX_HIT;
						game.enemies[j].shield -= game.player.shot[i].hit_count;
						if (game.enemies[j].shield <= 0)
						{
							SFX_ENEMY_EXPLODE;
							game.enemies[j].flags = EXPLODING;
    8ba2:	20 e1       	ldi	r18, 0x10	; 16
    8ba4:	b2 2e       	mov	r11, r18
{
	// Animate shots
	u8 slot = ENEMY_SLOT;
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
	{
		if (game.player.shot[i].active)
    8ba6:	f4 01       	movw	r30, r8
    8ba8:	80 81       	ld	r24, Z
    8baa:	88 23       	and	r24, r24
    8bac:	09 f4       	brne	.+2      	; 0x8bb0 <animate_shot+0x56>
    8bae:	46 c1       	rjmp	.+652    	; 0x8e3c <animate_shot+0x2e2>
		{
			game.player.shot[i].shared.x += game.player.shot[i].shared.vx*FRAME_TIME;
    8bb0:	ee 85       	ldd	r30, Y+14	; 0x0e
    8bb2:	ff 85       	ldd	r31, Y+15	; 0x0f
    8bb4:	64 85       	ldd	r22, Z+12	; 0x0c
    8bb6:	75 85       	ldd	r23, Z+13	; 0x0d
    8bb8:	88 27       	eor	r24, r24
    8bba:	77 fd       	sbrc	r23, 7
    8bbc:	80 95       	com	r24
    8bbe:	98 2f       	mov	r25, r24
    8bc0:	0e 94 34 51 	call	0xa268	; 0xa268 <__floatsisf>
    8bc4:	29 e8       	ldi	r18, 0x89	; 137
    8bc6:	38 e8       	ldi	r19, 0x88	; 136
    8bc8:	48 e8       	ldi	r20, 0x88	; 136
    8bca:	5c e3       	ldi	r21, 0x3C	; 60
    8bcc:	0e 94 e8 51 	call	0xa3d0	; 0xa3d0 <__mulsf3>
    8bd0:	ee 85       	ldd	r30, Y+14	; 0x0e
    8bd2:	ff 85       	ldd	r31, Y+15	; 0x0f
    8bd4:	24 81       	ldd	r18, Z+4	; 0x04
    8bd6:	35 81       	ldd	r19, Z+5	; 0x05
    8bd8:	46 81       	ldd	r20, Z+6	; 0x06
    8bda:	57 81       	ldd	r21, Z+7	; 0x07
    8bdc:	0e 94 9e 50 	call	0xa13c	; 0xa13c <__addsf3>
    8be0:	2b 01       	movw	r4, r22
    8be2:	3c 01       	movw	r6, r24
    8be4:	ee 85       	ldd	r30, Y+14	; 0x0e
    8be6:	ff 85       	ldd	r31, Y+15	; 0x0f
    8be8:	64 83       	std	Z+4, r22	; 0x04
    8bea:	75 83       	std	Z+5, r23	; 0x05
    8bec:	86 83       	std	Z+6, r24	; 0x06
    8bee:	97 83       	std	Z+7, r25	; 0x07
			game.player.shot[i].shared.y += game.player.shot[i].shared.vy*FRAME_TIME;
    8bf0:	29 e8       	ldi	r18, 0x89	; 137
    8bf2:	38 e8       	ldi	r19, 0x88	; 136
    8bf4:	48 e8       	ldi	r20, 0x88	; 136
    8bf6:	5c e3       	ldi	r21, 0x3C	; 60
    8bf8:	60 81       	ld	r22, Z
    8bfa:	71 81       	ldd	r23, Z+1	; 0x01
    8bfc:	82 81       	ldd	r24, Z+2	; 0x02
    8bfe:	93 81       	ldd	r25, Z+3	; 0x03
    8c00:	0e 94 e8 51 	call	0xa3d0	; 0xa3d0 <__mulsf3>
    8c04:	ee 85       	ldd	r30, Y+14	; 0x0e
    8c06:	ff 85       	ldd	r31, Y+15	; 0x0f
    8c08:	20 85       	ldd	r18, Z+8	; 0x08
    8c0a:	31 85       	ldd	r19, Z+9	; 0x09
    8c0c:	42 85       	ldd	r20, Z+10	; 0x0a
    8c0e:	53 85       	ldd	r21, Z+11	; 0x0b
    8c10:	0e 94 9e 50 	call	0xa13c	; 0xa13c <__addsf3>
    8c14:	6b 01       	movw	r12, r22
    8c16:	7c 01       	movw	r14, r24
    8c18:	ee 85       	ldd	r30, Y+14	; 0x0e
    8c1a:	ff 85       	ldd	r31, Y+15	; 0x0f
    8c1c:	60 87       	std	Z+8, r22	; 0x08
    8c1e:	71 87       	std	Z+9, r23	; 0x09
    8c20:	82 87       	std	Z+10, r24	; 0x0a
    8c22:	93 87       	std	Z+11, r25	; 0x0b
			LBMoveSprite(PLAYER_SHOT_SLOT+i, game.player.shot[i].shared.x - game.camera_x, game.player.shot[i].shared.y - game.camera_y, 1, 1);
    8c24:	60 91 95 0d 	lds	r22, 0x0D95
    8c28:	70 91 96 0d 	lds	r23, 0x0D96
    8c2c:	80 e0       	ldi	r24, 0x00	; 0
    8c2e:	90 e0       	ldi	r25, 0x00	; 0
    8c30:	0e 94 32 51 	call	0xa264	; 0xa264 <__floatunsisf>
    8c34:	9b 01       	movw	r18, r22
    8c36:	ac 01       	movw	r20, r24
    8c38:	c7 01       	movw	r24, r14
    8c3a:	b6 01       	movw	r22, r12
    8c3c:	0e 94 9d 50 	call	0xa13a	; 0xa13a <__subsf3>
    8c40:	0e 94 06 51 	call	0xa20c	; 0xa20c <__fixunssfsi>
    8c44:	c6 2e       	mov	r12, r22
    8c46:	80 91 93 0d 	lds	r24, 0x0D93
    8c4a:	90 91 94 0d 	lds	r25, 0x0D94
    8c4e:	bc 01       	movw	r22, r24
    8c50:	80 e0       	ldi	r24, 0x00	; 0
    8c52:	90 e0       	ldi	r25, 0x00	; 0
    8c54:	0e 94 32 51 	call	0xa264	; 0xa264 <__floatunsisf>
    8c58:	9b 01       	movw	r18, r22
    8c5a:	ac 01       	movw	r20, r24
    8c5c:	c3 01       	movw	r24, r6
    8c5e:	b2 01       	movw	r22, r4
    8c60:	0e 94 9d 50 	call	0xa13a	; 0xa13a <__subsf3>
    8c64:	0e 94 06 51 	call	0xa20c	; 0xa20c <__fixunssfsi>
    8c68:	01 e0       	ldi	r16, 0x01	; 1
    8c6a:	21 e0       	ldi	r18, 0x01	; 1
    8c6c:	4c 2d       	mov	r20, r12
    8c6e:	89 81       	ldd	r24, Y+1	; 0x01
    8c70:	0e 94 44 3c 	call	0x7888	; 0x7888 <LBMoveSprite>
			if (game.player.shot[i].shared.x < game.camera_x || game.player.shot[i].shared.x+8 > game.camera_x + CAMERA_WIDTH*8 ||
    8c74:	ee 85       	ldd	r30, Y+14	; 0x0e
    8c76:	ff 85       	ldd	r31, Y+15	; 0x0f
    8c78:	c4 80       	ldd	r12, Z+4	; 0x04
    8c7a:	d5 80       	ldd	r13, Z+5	; 0x05
    8c7c:	e6 80       	ldd	r14, Z+6	; 0x06
    8c7e:	f7 80       	ldd	r15, Z+7	; 0x07
    8c80:	60 90 93 0d 	lds	r6, 0x0D93
    8c84:	70 90 94 0d 	lds	r7, 0x0D94
    8c88:	b3 01       	movw	r22, r6
    8c8a:	80 e0       	ldi	r24, 0x00	; 0
    8c8c:	90 e0       	ldi	r25, 0x00	; 0
    8c8e:	0e 94 32 51 	call	0xa264	; 0xa264 <__floatunsisf>
    8c92:	9b 01       	movw	r18, r22
    8c94:	ac 01       	movw	r20, r24
    8c96:	c7 01       	movw	r24, r14
    8c98:	b6 01       	movw	r22, r12
    8c9a:	0e 94 02 51 	call	0xa204	; 0xa204 <__cmpsf2>
    8c9e:	87 ff       	sbrs	r24, 7
    8ca0:	0f c0       	rjmp	.+30     	; 0x8cc0 <animate_shot+0x166>
			    collision_detect_level(&game.player.shot[i].shared, 1, 1))
			{
				game.player.shot[i].active = 0;
    8ca2:	f4 01       	movw	r30, r8
    8ca4:	10 82       	st	Z, r1
				game.player.active_shots--;
    8ca6:	80 91 b8 0d 	lds	r24, 0x0DB8
    8caa:	81 50       	subi	r24, 0x01	; 1
    8cac:	80 93 b8 0d 	sts	0x0DB8, r24
				LBMoveSprite(PLAYER_SHOT_SLOT+i, OFF_SCREEN, 0, 1, 1);
    8cb0:	01 e0       	ldi	r16, 0x01	; 1
    8cb2:	21 e0       	ldi	r18, 0x01	; 1
    8cb4:	40 e0       	ldi	r20, 0x00	; 0
    8cb6:	60 ee       	ldi	r22, 0xE0	; 224
    8cb8:	89 81       	ldd	r24, Y+1	; 0x01
    8cba:	0e 94 44 3c 	call	0x7888	; 0x7888 <LBMoveSprite>
    8cbe:	be c0       	rjmp	.+380    	; 0x8e3c <animate_shot+0x2e2>
		if (game.player.shot[i].active)
		{
			game.player.shot[i].shared.x += game.player.shot[i].shared.vx*FRAME_TIME;
			game.player.shot[i].shared.y += game.player.shot[i].shared.vy*FRAME_TIME;
			LBMoveSprite(PLAYER_SHOT_SLOT+i, game.player.shot[i].shared.x - game.camera_x, game.player.shot[i].shared.y - game.camera_y, 1, 1);
			if (game.player.shot[i].shared.x < game.camera_x || game.player.shot[i].shared.x+8 > game.camera_x + CAMERA_WIDTH*8 ||
    8cc0:	20 e0       	ldi	r18, 0x00	; 0
    8cc2:	30 e0       	ldi	r19, 0x00	; 0
    8cc4:	40 e0       	ldi	r20, 0x00	; 0
    8cc6:	51 e4       	ldi	r21, 0x41	; 65
    8cc8:	c7 01       	movw	r24, r14
    8cca:	b6 01       	movw	r22, r12
    8ccc:	0e 94 9e 50 	call	0xa13c	; 0xa13c <__addsf3>
    8cd0:	1b 01       	movw	r2, r22
    8cd2:	2c 01       	movw	r4, r24
    8cd4:	b3 01       	movw	r22, r6
    8cd6:	60 52       	subi	r22, 0x20	; 32
    8cd8:	7f 4f       	sbci	r23, 0xFF	; 255
    8cda:	80 e0       	ldi	r24, 0x00	; 0
    8cdc:	90 e0       	ldi	r25, 0x00	; 0
    8cde:	0e 94 32 51 	call	0xa264	; 0xa264 <__floatunsisf>
    8ce2:	9b 01       	movw	r18, r22
    8ce4:	ac 01       	movw	r20, r24
    8ce6:	c2 01       	movw	r24, r4
    8ce8:	b1 01       	movw	r22, r2
    8cea:	0e 94 e4 51 	call	0xa3c8	; 0xa3c8 <__gesf2>
    8cee:	18 16       	cp	r1, r24
    8cf0:	c4 f2       	brlt	.-80     	; 0x8ca2 <animate_shot+0x148>
			    collision_detect_level(&game.player.shot[i].shared, 1, 1))
    8cf2:	41 e0       	ldi	r20, 0x01	; 1
    8cf4:	61 e0       	ldi	r22, 0x01	; 1
    8cf6:	8e 85       	ldd	r24, Y+14	; 0x0e
    8cf8:	9f 85       	ldd	r25, Y+15	; 0x0f
    8cfa:	0e 94 87 42 	call	0x850e	; 0x850e <collision_detect_level>
		if (game.player.shot[i].active)
		{
			game.player.shot[i].shared.x += game.player.shot[i].shared.vx*FRAME_TIME;
			game.player.shot[i].shared.y += game.player.shot[i].shared.vy*FRAME_TIME;
			LBMoveSprite(PLAYER_SHOT_SLOT+i, game.player.shot[i].shared.x - game.camera_x, game.player.shot[i].shared.y - game.camera_y, 1, 1);
			if (game.player.shot[i].shared.x < game.camera_x || game.player.shot[i].shared.x+8 > game.camera_x + CAMERA_WIDTH*8 ||
    8cfe:	81 11       	cpse	r24, r1
    8d00:	d0 cf       	rjmp	.-96     	; 0x8ca2 <animate_shot+0x148>
    8d02:	8c e4       	ldi	r24, 0x4C	; 76
    8d04:	28 2e       	mov	r2, r24
    8d06:	8e e0       	ldi	r24, 0x0E	; 14
    8d08:	38 2e       	mov	r3, r24
    8d0a:	61 2c       	mov	r6, r1
    8d0c:	71 2c       	mov	r7, r1
    8d0e:	24 01       	movw	r4, r8
    8d10:	f1 e0       	ldi	r31, 0x01	; 1
    8d12:	4f 1a       	sub	r4, r31
    8d14:	51 08       	sbc	r5, r1
    8d16:	f1 01       	movw	r30, r2
    8d18:	38 97       	sbiw	r30, 0x08	; 8
			else
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
				{
					if (game.enemies[j].active &&
    8d1a:	80 81       	ld	r24, Z
    8d1c:	88 23       	and	r24, r24
    8d1e:	09 f4       	brne	.+2      	; 0x8d22 <animate_shot+0x1c8>
    8d20:	82 c0       	rjmp	.+260    	; 0x8e26 <animate_shot+0x2cc>
    8d22:	34 96       	adiw	r30, 0x04	; 4
					    LBCollides(game.player.shot[i].shared.x,game.player.shot[i].shared.y, 8, 8,
    8d24:	a0 80       	ld	r10, Z
    8d26:	aa 0c       	add	r10, r10
    8d28:	aa 0c       	add	r10, r10
    8d2a:	aa 0c       	add	r10, r10
    8d2c:	31 97       	sbiw	r30, 0x01	; 1
    8d2e:	c0 80       	ld	r12, Z
    8d30:	cc 0c       	add	r12, r12
    8d32:	cc 0c       	add	r12, r12
    8d34:	cc 0c       	add	r12, r12
    8d36:	3a 97       	sbiw	r30, 0x0a	; 10
    8d38:	60 81       	ld	r22, Z
    8d3a:	71 81       	ldd	r23, Z+1	; 0x01
    8d3c:	82 81       	ldd	r24, Z+2	; 0x02
    8d3e:	93 81       	ldd	r25, Z+3	; 0x03
    8d40:	0e 94 06 51 	call	0xa20c	; 0xa20c <__fixunssfsi>
    8d44:	6a 83       	std	Y+2, r22	; 0x02
    8d46:	7b 83       	std	Y+3, r23	; 0x03
    8d48:	8c 83       	std	Y+4, r24	; 0x04
    8d4a:	9d 83       	std	Y+5, r25	; 0x05
    8d4c:	f1 01       	movw	r30, r2
    8d4e:	73 97       	sbiw	r30, 0x13	; 19
    8d50:	60 81       	ld	r22, Z
    8d52:	71 81       	ldd	r23, Z+1	; 0x01
    8d54:	82 81       	ldd	r24, Z+2	; 0x02
    8d56:	93 81       	ldd	r25, Z+3	; 0x03
    8d58:	0e 94 06 51 	call	0xa20c	; 0xa20c <__fixunssfsi>
    8d5c:	6e 83       	std	Y+6, r22	; 0x06
    8d5e:	7f 83       	std	Y+7, r23	; 0x07
    8d60:	88 87       	std	Y+8, r24	; 0x08
    8d62:	99 87       	std	Y+9, r25	; 0x09
    8d64:	ee 85       	ldd	r30, Y+14	; 0x0e
    8d66:	ff 85       	ldd	r31, Y+15	; 0x0f
    8d68:	60 85       	ldd	r22, Z+8	; 0x08
    8d6a:	71 85       	ldd	r23, Z+9	; 0x09
    8d6c:	82 85       	ldd	r24, Z+10	; 0x0a
    8d6e:	93 85       	ldd	r25, Z+11	; 0x0b
    8d70:	0e 94 06 51 	call	0xa20c	; 0xa20c <__fixunssfsi>
    8d74:	6a 87       	std	Y+10, r22	; 0x0a
    8d76:	7b 87       	std	Y+11, r23	; 0x0b
    8d78:	8c 87       	std	Y+12, r24	; 0x0c
    8d7a:	9d 87       	std	Y+13, r25	; 0x0d
    8d7c:	ee 85       	ldd	r30, Y+14	; 0x0e
    8d7e:	ff 85       	ldd	r31, Y+15	; 0x0f
    8d80:	64 81       	ldd	r22, Z+4	; 0x04
    8d82:	75 81       	ldd	r23, Z+5	; 0x05
    8d84:	86 81       	ldd	r24, Z+6	; 0x06
    8d86:	97 81       	ldd	r25, Z+7	; 0x07
    8d88:	0e 94 06 51 	call	0xa20c	; 0xa20c <__fixunssfsi>
    8d8c:	dc 01       	movw	r26, r24
    8d8e:	cb 01       	movw	r24, r22
    8d90:	ea 80       	ldd	r14, Y+2	; 0x02
    8d92:	fb 80       	ldd	r15, Y+3	; 0x03
    8d94:	0e 81       	ldd	r16, Y+6	; 0x06
    8d96:	1f 81       	ldd	r17, Y+7	; 0x07
    8d98:	28 e0       	ldi	r18, 0x08	; 8
    8d9a:	48 e0       	ldi	r20, 0x08	; 8
    8d9c:	6a 85       	ldd	r22, Y+10	; 0x0a
    8d9e:	7b 85       	ldd	r23, Y+11	; 0x0b
    8da0:	0e 94 bd 3b 	call	0x777a	; 0x777a <LBCollides>
			else
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
				{
					if (game.enemies[j].active &&
    8da4:	88 23       	and	r24, r24
    8da6:	09 f4       	brne	.+2      	; 0x8daa <animate_shot+0x250>
    8da8:	3e c0       	rjmp	.+124    	; 0x8e26 <animate_shot+0x2cc>
					    LBCollides(game.player.shot[i].shared.x,game.player.shot[i].shared.y, 8, 8,
							game.enemies[j].shared.x, game.enemies[j].shared.y, game.enemies[j].width*8, game.enemies[j].height*8
						)
					)
					{
						SFX_HIT;
    8daa:	41 e0       	ldi	r20, 0x01	; 1
    8dac:	6f ef       	ldi	r22, 0xFF	; 255
    8dae:	84 e0       	ldi	r24, 0x04	; 4
    8db0:	0e 94 7d 2f 	call	0x5efa	; 0x5efa <TriggerFx>
						game.enemies[j].shield -= game.player.shot[i].hit_count;
    8db4:	f1 01       	movw	r30, r2
    8db6:	80 81       	ld	r24, Z
    8db8:	f2 01       	movw	r30, r4
    8dba:	90 81       	ld	r25, Z
    8dbc:	89 1b       	sub	r24, r25
    8dbe:	f1 01       	movw	r30, r2
    8dc0:	80 83       	st	Z, r24
						if (game.enemies[j].shield <= 0)
    8dc2:	18 16       	cp	r1, r24
    8dc4:	14 f1       	brlt	.+68     	; 0x8e0a <animate_shot+0x2b0>
						{
							SFX_ENEMY_EXPLODE;
    8dc6:	41 e0       	ldi	r20, 0x01	; 1
    8dc8:	6f ef       	ldi	r22, 0xFF	; 255
    8dca:	86 e0       	ldi	r24, 0x06	; 6
    8dcc:	0e 94 7d 2f 	call	0x5efa	; 0x5efa <TriggerFx>
							game.enemies[j].flags = EXPLODING;
    8dd0:	f2 e4       	ldi	r31, 0x42	; 66
    8dd2:	f6 9d       	mul	r31, r6
    8dd4:	c0 01       	movw	r24, r0
    8dd6:	f7 9d       	mul	r31, r7
    8dd8:	90 0d       	add	r25, r0
    8dda:	11 24       	eor	r1, r1
    8ddc:	81 57       	subi	r24, 0x71	; 113
    8dde:	92 4f       	sbci	r25, 0xF2	; 242
    8de0:	fc 01       	movw	r30, r24
    8de2:	ea 54       	subi	r30, 0x4A	; 74
    8de4:	ff 4f       	sbci	r31, 0xFF	; 255
    8de6:	b0 82       	st	Z, r11
							game.enemies[j].active = 0;
    8de8:	31 97       	sbiw	r30, 0x01	; 1
    8dea:	10 82       	st	Z, r1
							game.active_enemies--;
    8dec:	80 91 a7 0d 	lds	r24, 0x0DA7
    8df0:	81 50       	subi	r24, 0x01	; 1
    8df2:	80 93 a7 0d 	sts	0x0DA7, r24
							game.score += KILL_SCORE;
    8df6:	80 91 97 0d 	lds	r24, 0x0D97
    8dfa:	90 91 98 0d 	lds	r25, 0x0D98
    8dfe:	0a 96       	adiw	r24, 0x0a	; 10
    8e00:	90 93 98 0d 	sts	0x0D98, r25
    8e04:	80 93 97 0d 	sts	0x0D97, r24
							break;
    8e08:	19 c0       	rjmp	.+50     	; 0x8e3c <animate_shot+0x2e2>
						}
						game.player.shot[i].active = 0;
    8e0a:	f4 01       	movw	r30, r8
    8e0c:	10 82       	st	Z, r1
						game.player.active_shots--;
    8e0e:	80 91 b8 0d 	lds	r24, 0x0DB8
    8e12:	81 50       	subi	r24, 0x01	; 1
    8e14:	80 93 b8 0d 	sts	0x0DB8, r24
						LBMoveSprite(PLAYER_SHOT_SLOT+i, OFF_SCREEN, 0, 1, 1);
    8e18:	01 e0       	ldi	r16, 0x01	; 1
    8e1a:	21 e0       	ldi	r18, 0x01	; 1
    8e1c:	40 e0       	ldi	r20, 0x00	; 0
    8e1e:	60 ee       	ldi	r22, 0xE0	; 224
    8e20:	89 81       	ldd	r24, Y+1	; 0x01
    8e22:	0e 94 44 3c 	call	0x7888	; 0x7888 <LBMoveSprite>
    8e26:	ff ef       	ldi	r31, 0xFF	; 255
    8e28:	6f 1a       	sub	r6, r31
    8e2a:	7f 0a       	sbc	r7, r31
    8e2c:	22 e4       	ldi	r18, 0x42	; 66
    8e2e:	22 0e       	add	r2, r18
    8e30:	31 1c       	adc	r3, r1
				LBMoveSprite(PLAYER_SHOT_SLOT+i, OFF_SCREEN, 0, 1, 1);
			}
			else
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
    8e32:	85 e0       	ldi	r24, 0x05	; 5
    8e34:	68 16       	cp	r6, r24
    8e36:	71 04       	cpc	r7, r1
    8e38:	09 f0       	breq	.+2      	; 0x8e3c <animate_shot+0x2e2>
    8e3a:	6d cf       	rjmp	.-294    	; 0x8d16 <animate_shot+0x1bc>
    8e3c:	9a e1       	ldi	r25, 0x1A	; 26
    8e3e:	89 0e       	add	r8, r25
    8e40:	91 1c       	adc	r9, r1
    8e42:	e9 81       	ldd	r30, Y+1	; 0x01
    8e44:	ef 5f       	subi	r30, 0xFF	; 255
    8e46:	e9 83       	std	Y+1, r30	; 0x01
    8e48:	8e 85       	ldd	r24, Y+14	; 0x0e
    8e4a:	9f 85       	ldd	r25, Y+15	; 0x0f
    8e4c:	4a 96       	adiw	r24, 0x1a	; 26
    8e4e:	9f 87       	std	Y+15, r25	; 0x0f
    8e50:	8e 87       	std	Y+14, r24	; 0x0e

void animate_shot()
{
	// Animate shots
	u8 slot = ENEMY_SLOT;
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
    8e52:	ee 30       	cpi	r30, 0x0E	; 14
    8e54:	09 f0       	breq	.+2      	; 0x8e58 <animate_shot+0x2fe>
    8e56:	a7 ce       	rjmp	.-690    	; 0x8ba6 <animate_shot+0x4c>
					slot += game.enemies[j].width*game.enemies[j].height;
				}
			}
		}
	}
}
    8e58:	2f 96       	adiw	r28, 0x0f	; 15
    8e5a:	0f b6       	in	r0, 0x3f	; 63
    8e5c:	f8 94       	cli
    8e5e:	de bf       	out	0x3e, r29	; 62
    8e60:	0f be       	out	0x3f, r0	; 63
    8e62:	cd bf       	out	0x3d, r28	; 61
    8e64:	df 91       	pop	r29
    8e66:	cf 91       	pop	r28
    8e68:	1f 91       	pop	r17
    8e6a:	0f 91       	pop	r16
    8e6c:	ff 90       	pop	r15
    8e6e:	ef 90       	pop	r14
    8e70:	df 90       	pop	r13
    8e72:	cf 90       	pop	r12
    8e74:	bf 90       	pop	r11
    8e76:	af 90       	pop	r10
    8e78:	9f 90       	pop	r9
    8e7a:	8f 90       	pop	r8
    8e7c:	7f 90       	pop	r7
    8e7e:	6f 90       	pop	r6
    8e80:	5f 90       	pop	r5
    8e82:	4f 90       	pop	r4
    8e84:	3f 90       	pop	r3
    8e86:	2f 90       	pop	r2
    8e88:	08 95       	ret

00008e8a <map_explosion>:
	}
	return result;
}

u8 map_explosion(u8* flags, Animation* anim, u8 slot, u8 width, u8 height)
{
    8e8a:	7f 92       	push	r7
    8e8c:	8f 92       	push	r8
    8e8e:	9f 92       	push	r9
    8e90:	af 92       	push	r10
    8e92:	bf 92       	push	r11
    8e94:	cf 92       	push	r12
    8e96:	df 92       	push	r13
    8e98:	ef 92       	push	r14
    8e9a:	ff 92       	push	r15
    8e9c:	0f 93       	push	r16
    8e9e:	1f 93       	push	r17
    8ea0:	cf 93       	push	r28
    8ea2:	df 93       	push	r29
    8ea4:	1f 92       	push	r1
    8ea6:	cd b7       	in	r28, 0x3d	; 61
    8ea8:	de b7       	in	r29, 0x3e	; 62
    8eaa:	6c 01       	movw	r12, r24
    8eac:	7b 01       	movw	r14, r22
    8eae:	74 2e       	mov	r7, r20
	char* frame;
	frame = LBGetNextFrame(anim);
    8eb0:	cb 01       	movw	r24, r22
    8eb2:	29 83       	std	Y+1, r18	; 0x01
    8eb4:	0e 94 4c 3b 	call	0x7698	; 0x7698 <LBGetNextFrame>
    8eb8:	4c 01       	movw	r8, r24
	for (u8 i = 0; i < width*height; i++)
    8eba:	29 81       	ldd	r18, Y+1	; 0x01
    8ebc:	20 9f       	mul	r18, r16
    8ebe:	50 01       	movw	r10, r0
    8ec0:	11 24       	eor	r1, r1
    8ec2:	10 e0       	ldi	r17, 0x00	; 0
    8ec4:	81 2f       	mov	r24, r17
    8ec6:	90 e0       	ldi	r25, 0x00	; 0
    8ec8:	8a 15       	cp	r24, r10
    8eca:	9b 05       	cpc	r25, r11
    8ecc:	54 f4       	brge	.+20     	; 0x8ee2 <map_explosion+0x58>
	{
		LBMapSprite(slot+i, frame, 0);
    8ece:	40 e0       	ldi	r20, 0x00	; 0
    8ed0:	b4 01       	movw	r22, r8
    8ed2:	81 2f       	mov	r24, r17
    8ed4:	87 0d       	add	r24, r7
    8ed6:	29 83       	std	Y+1, r18	; 0x01
    8ed8:	0e 94 f2 3b 	call	0x77e4	; 0x77e4 <LBMapSprite>

u8 map_explosion(u8* flags, Animation* anim, u8 slot, u8 width, u8 height)
{
	char* frame;
	frame = LBGetNextFrame(anim);
	for (u8 i = 0; i < width*height; i++)
    8edc:	1f 5f       	subi	r17, 0xFF	; 255
    8ede:	29 81       	ldd	r18, Y+1	; 0x01
    8ee0:	f1 cf       	rjmp	.-30     	; 0x8ec4 <map_explosion+0x3a>
	{
		LBMapSprite(slot+i, frame, 0);
	}
	if (anim->looped)
    8ee2:	f7 01       	movw	r30, r14
    8ee4:	84 81       	ldd	r24, Z+4	; 0x04
    8ee6:	88 23       	and	r24, r24
    8ee8:	51 f0       	breq	.+20     	; 0x8efe <map_explosion+0x74>
	{
		*flags ^= EXPLODING;
    8eea:	f6 01       	movw	r30, r12
    8eec:	80 81       	ld	r24, Z
    8eee:	90 e1       	ldi	r25, 0x10	; 16
    8ef0:	98 27       	eor	r25, r24
    8ef2:	90 83       	st	Z, r25
		LBMoveSprite(slot, OFF_SCREEN, 0, width, height);
    8ef4:	40 e0       	ldi	r20, 0x00	; 0
    8ef6:	60 ee       	ldi	r22, 0xE0	; 224
    8ef8:	87 2d       	mov	r24, r7
    8efa:	0e 94 44 3c 	call	0x7888	; 0x7888 <LBMoveSprite>
	}
	return anim->looped;
}
    8efe:	f7 01       	movw	r30, r14
    8f00:	84 81       	ldd	r24, Z+4	; 0x04
    8f02:	0f 90       	pop	r0
    8f04:	df 91       	pop	r29
    8f06:	cf 91       	pop	r28
    8f08:	1f 91       	pop	r17
    8f0a:	0f 91       	pop	r16
    8f0c:	ff 90       	pop	r15
    8f0e:	ef 90       	pop	r14
    8f10:	df 90       	pop	r13
    8f12:	cf 90       	pop	r12
    8f14:	bf 90       	pop	r11
    8f16:	af 90       	pop	r10
    8f18:	9f 90       	pop	r9
    8f1a:	8f 90       	pop	r8
    8f1c:	7f 90       	pop	r7
    8f1e:	08 95       	ret

00008f20 <animate_sprite>:

void animate_sprite(SpriteShared* s, u8 slot, u8 width, u8 height)
{
    8f20:	8f 92       	push	r8
    8f22:	9f 92       	push	r9
    8f24:	af 92       	push	r10
    8f26:	bf 92       	push	r11
    8f28:	ff 92       	push	r15
    8f2a:	0f 93       	push	r16
    8f2c:	1f 93       	push	r17
    8f2e:	cf 93       	push	r28
    8f30:	df 93       	push	r29
    8f32:	ec 01       	movw	r28, r24
    8f34:	f6 2e       	mov	r15, r22
    8f36:	14 2f       	mov	r17, r20
    8f38:	02 2f       	mov	r16, r18
	s->vy = s->vy + s->gravity*FRAME_TIME;
    8f3a:	6e 85       	ldd	r22, Y+14	; 0x0e
    8f3c:	70 e0       	ldi	r23, 0x00	; 0
    8f3e:	80 e0       	ldi	r24, 0x00	; 0
    8f40:	90 e0       	ldi	r25, 0x00	; 0
    8f42:	0e 94 34 51 	call	0xa268	; 0xa268 <__floatsisf>
    8f46:	29 e8       	ldi	r18, 0x89	; 137
    8f48:	38 e8       	ldi	r19, 0x88	; 136
    8f4a:	48 e8       	ldi	r20, 0x88	; 136
    8f4c:	5c e3       	ldi	r21, 0x3C	; 60
    8f4e:	0e 94 e8 51 	call	0xa3d0	; 0xa3d0 <__mulsf3>
    8f52:	28 81       	ld	r18, Y
    8f54:	39 81       	ldd	r19, Y+1	; 0x01
    8f56:	4a 81       	ldd	r20, Y+2	; 0x02
    8f58:	5b 81       	ldd	r21, Y+3	; 0x03
    8f5a:	0e 94 9e 50 	call	0xa13c	; 0xa13c <__addsf3>
    8f5e:	4b 01       	movw	r8, r22
    8f60:	5c 01       	movw	r10, r24
	if (s->vy > MAX_SPEED) s->vy = MAX_SPEED;
    8f62:	20 e0       	ldi	r18, 0x00	; 0
    8f64:	30 e0       	ldi	r19, 0x00	; 0
    8f66:	40 ef       	ldi	r20, 0xF0	; 240
    8f68:	52 e4       	ldi	r21, 0x42	; 66
    8f6a:	0e 94 e4 51 	call	0xa3c8	; 0xa3c8 <__gesf2>
    8f6e:	18 16       	cp	r1, r24
    8f70:	2c f0       	brlt	.+10     	; 0x8f7c <animate_sprite+0x5c>
	return anim->looped;
}

void animate_sprite(SpriteShared* s, u8 slot, u8 width, u8 height)
{
	s->vy = s->vy + s->gravity*FRAME_TIME;
    8f72:	88 82       	st	Y, r8
    8f74:	99 82       	std	Y+1, r9	; 0x01
    8f76:	aa 82       	std	Y+2, r10	; 0x02
    8f78:	bb 82       	std	Y+3, r11	; 0x03
    8f7a:	08 c0       	rjmp	.+16     	; 0x8f8c <animate_sprite+0x6c>
	if (s->vy > MAX_SPEED) s->vy = MAX_SPEED;
    8f7c:	80 e0       	ldi	r24, 0x00	; 0
    8f7e:	90 e0       	ldi	r25, 0x00	; 0
    8f80:	a0 ef       	ldi	r26, 0xF0	; 240
    8f82:	b2 e4       	ldi	r27, 0x42	; 66
    8f84:	88 83       	st	Y, r24
    8f86:	99 83       	std	Y+1, r25	; 0x01
    8f88:	aa 83       	std	Y+2, r26	; 0x02
    8f8a:	bb 83       	std	Y+3, r27	; 0x03
	s->x += s->vx*FRAME_TIME;
    8f8c:	6c 85       	ldd	r22, Y+12	; 0x0c
    8f8e:	7d 85       	ldd	r23, Y+13	; 0x0d
    8f90:	88 27       	eor	r24, r24
    8f92:	77 fd       	sbrc	r23, 7
    8f94:	80 95       	com	r24
    8f96:	98 2f       	mov	r25, r24
    8f98:	0e 94 34 51 	call	0xa268	; 0xa268 <__floatsisf>
    8f9c:	29 e8       	ldi	r18, 0x89	; 137
    8f9e:	38 e8       	ldi	r19, 0x88	; 136
    8fa0:	48 e8       	ldi	r20, 0x88	; 136
    8fa2:	5c e3       	ldi	r21, 0x3C	; 60
    8fa4:	0e 94 e8 51 	call	0xa3d0	; 0xa3d0 <__mulsf3>
    8fa8:	9b 01       	movw	r18, r22
    8faa:	ac 01       	movw	r20, r24
    8fac:	6c 81       	ldd	r22, Y+4	; 0x04
    8fae:	7d 81       	ldd	r23, Y+5	; 0x05
    8fb0:	8e 81       	ldd	r24, Y+6	; 0x06
    8fb2:	9f 81       	ldd	r25, Y+7	; 0x07
    8fb4:	0e 94 9e 50 	call	0xa13c	; 0xa13c <__addsf3>
    8fb8:	6c 83       	std	Y+4, r22	; 0x04
    8fba:	7d 83       	std	Y+5, r23	; 0x05
    8fbc:	8e 83       	std	Y+6, r24	; 0x06
    8fbe:	9f 83       	std	Y+7, r25	; 0x07
	s->y += s->vy*FRAME_TIME;
    8fc0:	29 e8       	ldi	r18, 0x89	; 137
    8fc2:	38 e8       	ldi	r19, 0x88	; 136
    8fc4:	48 e8       	ldi	r20, 0x88	; 136
    8fc6:	5c e3       	ldi	r21, 0x3C	; 60
    8fc8:	68 81       	ld	r22, Y
    8fca:	79 81       	ldd	r23, Y+1	; 0x01
    8fcc:	8a 81       	ldd	r24, Y+2	; 0x02
    8fce:	9b 81       	ldd	r25, Y+3	; 0x03
    8fd0:	0e 94 e8 51 	call	0xa3d0	; 0xa3d0 <__mulsf3>
    8fd4:	9b 01       	movw	r18, r22
    8fd6:	ac 01       	movw	r20, r24
    8fd8:	68 85       	ldd	r22, Y+8	; 0x08
    8fda:	79 85       	ldd	r23, Y+9	; 0x09
    8fdc:	8a 85       	ldd	r24, Y+10	; 0x0a
    8fde:	9b 85       	ldd	r25, Y+11	; 0x0b
    8fe0:	0e 94 9e 50 	call	0xa13c	; 0xa13c <__addsf3>
    8fe4:	68 87       	std	Y+8, r22	; 0x08
    8fe6:	79 87       	std	Y+9, r23	; 0x09
    8fe8:	8a 87       	std	Y+10, r24	; 0x0a
    8fea:	9b 87       	std	Y+11, r25	; 0x0b
	collision_detect_level(s, width, height);
    8fec:	40 2f       	mov	r20, r16
    8fee:	61 2f       	mov	r22, r17
    8ff0:	ce 01       	movw	r24, r28
    8ff2:	0e 94 87 42 	call	0x850e	; 0x850e <collision_detect_level>
	LBMoveSprite(slot, s->x - game.camera_x, s->y - game.camera_y, width, height);
    8ff6:	e0 91 95 0d 	lds	r30, 0x0D95
    8ffa:	f0 91 96 0d 	lds	r31, 0x0D96
    8ffe:	bf 01       	movw	r22, r30
    9000:	80 e0       	ldi	r24, 0x00	; 0
    9002:	90 e0       	ldi	r25, 0x00	; 0
    9004:	0e 94 32 51 	call	0xa264	; 0xa264 <__floatunsisf>
    9008:	9b 01       	movw	r18, r22
    900a:	ac 01       	movw	r20, r24
    900c:	68 85       	ldd	r22, Y+8	; 0x08
    900e:	79 85       	ldd	r23, Y+9	; 0x09
    9010:	8a 85       	ldd	r24, Y+10	; 0x0a
    9012:	9b 85       	ldd	r25, Y+11	; 0x0b
    9014:	0e 94 9d 50 	call	0xa13a	; 0xa13a <__subsf3>
    9018:	0e 94 06 51 	call	0xa20c	; 0xa20c <__fixunssfsi>
    901c:	b6 2e       	mov	r11, r22
    901e:	e0 91 93 0d 	lds	r30, 0x0D93
    9022:	f0 91 94 0d 	lds	r31, 0x0D94
    9026:	bf 01       	movw	r22, r30
    9028:	80 e0       	ldi	r24, 0x00	; 0
    902a:	90 e0       	ldi	r25, 0x00	; 0
    902c:	0e 94 32 51 	call	0xa264	; 0xa264 <__floatunsisf>
    9030:	9b 01       	movw	r18, r22
    9032:	ac 01       	movw	r20, r24
    9034:	6c 81       	ldd	r22, Y+4	; 0x04
    9036:	7d 81       	ldd	r23, Y+5	; 0x05
    9038:	8e 81       	ldd	r24, Y+6	; 0x06
    903a:	9f 81       	ldd	r25, Y+7	; 0x07
    903c:	0e 94 9d 50 	call	0xa13a	; 0xa13a <__subsf3>
    9040:	0e 94 06 51 	call	0xa20c	; 0xa20c <__fixunssfsi>
    9044:	21 2f       	mov	r18, r17
    9046:	4b 2d       	mov	r20, r11
    9048:	8f 2d       	mov	r24, r15
    904a:	0e 94 44 3c 	call	0x7888	; 0x7888 <LBMoveSprite>
}
    904e:	df 91       	pop	r29
    9050:	cf 91       	pop	r28
    9052:	1f 91       	pop	r17
    9054:	0f 91       	pop	r16
    9056:	ff 90       	pop	r15
    9058:	bf 90       	pop	r11
    905a:	af 90       	pop	r10
    905c:	9f 90       	pop	r9
    905e:	8f 90       	pop	r8
    9060:	08 95       	ret

00009062 <animate_player>:

void animate_player()
{
    9062:	0f 93       	push	r16
    9064:	cf 93       	push	r28
	if (game.player.flags & EXPLODING)
    9066:	80 91 b9 0d 	lds	r24, 0x0DB9
    906a:	84 ff       	sbrs	r24, 4
    906c:	38 c0       	rjmp	.+112    	; 0x90de <animate_player+0x7c>
	{
		LBMoveSprite(PLAYER_SLOT, game.player.shared.x - game.camera_x, game.player.shared.y - game.camera_y, game.player.width, game.player.height);
    906e:	60 91 95 0d 	lds	r22, 0x0D95
    9072:	70 91 96 0d 	lds	r23, 0x0D96
    9076:	80 e0       	ldi	r24, 0x00	; 0
    9078:	90 e0       	ldi	r25, 0x00	; 0
    907a:	0e 94 32 51 	call	0xa264	; 0xa264 <__floatunsisf>
    907e:	9b 01       	movw	r18, r22
    9080:	ac 01       	movw	r20, r24
    9082:	60 91 b1 0d 	lds	r22, 0x0DB1
    9086:	70 91 b2 0d 	lds	r23, 0x0DB2
    908a:	80 91 b3 0d 	lds	r24, 0x0DB3
    908e:	90 91 b4 0d 	lds	r25, 0x0DB4
    9092:	0e 94 9d 50 	call	0xa13a	; 0xa13a <__subsf3>
    9096:	0e 94 06 51 	call	0xa20c	; 0xa20c <__fixunssfsi>
    909a:	c6 2f       	mov	r28, r22
    909c:	60 91 93 0d 	lds	r22, 0x0D93
    90a0:	70 91 94 0d 	lds	r23, 0x0D94
    90a4:	80 e0       	ldi	r24, 0x00	; 0
    90a6:	90 e0       	ldi	r25, 0x00	; 0
    90a8:	0e 94 32 51 	call	0xa264	; 0xa264 <__floatunsisf>
    90ac:	9b 01       	movw	r18, r22
    90ae:	ac 01       	movw	r20, r24
    90b0:	60 91 ad 0d 	lds	r22, 0x0DAD
    90b4:	70 91 ae 0d 	lds	r23, 0x0DAE
    90b8:	80 91 af 0d 	lds	r24, 0x0DAF
    90bc:	90 91 b0 0d 	lds	r25, 0x0DB0
    90c0:	0e 94 9d 50 	call	0xa13a	; 0xa13a <__subsf3>
    90c4:	0e 94 06 51 	call	0xa20c	; 0xa20c <__fixunssfsi>
    90c8:	00 91 bd 0d 	lds	r16, 0x0DBD
    90cc:	20 91 bc 0d 	lds	r18, 0x0DBC
    90d0:	4c 2f       	mov	r20, r28
    90d2:	80 e0       	ldi	r24, 0x00	; 0
    90d4:	0e 94 44 3c 	call	0x7888	; 0x7888 <LBMoveSprite>
	}
	else animate_sprite(&game.player.shared, PLAYER_SLOT, game.player.width, game.player.height);
}
    90d8:	cf 91       	pop	r28
    90da:	0f 91       	pop	r16
    90dc:	08 95       	ret
{
	if (game.player.flags & EXPLODING)
	{
		LBMoveSprite(PLAYER_SLOT, game.player.shared.x - game.camera_x, game.player.shared.y - game.camera_y, game.player.width, game.player.height);
	}
	else animate_sprite(&game.player.shared, PLAYER_SLOT, game.player.width, game.player.height);
    90de:	20 91 bd 0d 	lds	r18, 0x0DBD
    90e2:	40 91 bc 0d 	lds	r20, 0x0DBC
    90e6:	60 e0       	ldi	r22, 0x00	; 0
    90e8:	89 ea       	ldi	r24, 0xA9	; 169
    90ea:	9d e0       	ldi	r25, 0x0D	; 13
}
    90ec:	cf 91       	pop	r28
    90ee:	0f 91       	pop	r16
{
	if (game.player.flags & EXPLODING)
	{
		LBMoveSprite(PLAYER_SLOT, game.player.shared.x - game.camera_x, game.player.shared.y - game.camera_y, game.player.width, game.player.height);
	}
	else animate_sprite(&game.player.shared, PLAYER_SLOT, game.player.width, game.player.height);
    90f0:	0c 94 90 47 	jmp	0x8f20	; 0x8f20 <animate_sprite>

000090f4 <update_spider_enemy>:
}

void update_spider_enemy(Enemy* e, u8 slot)
{
    90f4:	1f 93       	push	r17
    90f6:	cf 93       	push	r28
    90f8:	df 93       	push	r29
    90fa:	ec 01       	movw	r28, r24
    90fc:	16 2f       	mov	r17, r22
	if (e->flags & IDLE && e->frame_count == SPIDER_IDLE_FRAMES)
    90fe:	98 89       	ldd	r25, Y+16	; 0x10
    9100:	89 2f       	mov	r24, r25
    9102:	88 70       	andi	r24, 0x08	; 8
    9104:	93 ff       	sbrs	r25, 3
    9106:	1e c0       	rjmp	.+60     	; 0x9144 <update_spider_enemy+0x50>
    9108:	2d 89       	ldd	r18, Y+21	; 0x15
    910a:	20 38       	cpi	r18, 0x80	; 128
    910c:	d9 f4       	brne	.+54     	; 0x9144 <update_spider_enemy+0x50>
	{
		e->flags = JUMPING;
    910e:	81 e0       	ldi	r24, 0x01	; 1
    9110:	88 8b       	std	Y+16, r24	; 0x10
		e->shared.vy = -SPIDER_JUMP_SPEED;
    9112:	80 e0       	ldi	r24, 0x00	; 0
    9114:	90 e0       	ldi	r25, 0x00	; 0
    9116:	a8 ec       	ldi	r26, 0xC8	; 200
    9118:	b2 ec       	ldi	r27, 0xC2	; 194
    911a:	88 83       	st	Y, r24
    911c:	99 83       	std	Y+1, r25	; 0x01
    911e:	aa 83       	std	Y+2, r26	; 0x02
    9120:	bb 83       	std	Y+3, r27	; 0x03
		e->shared.gravity = GRAVITY;
    9122:	8f ef       	ldi	r24, 0xFF	; 255
    9124:	8e 87       	std	Y+14, r24	; 0x0e
		e->shared.vx = SPIDER_SIDE_SPEED;
    9126:	8c e3       	ldi	r24, 0x3C	; 60
    9128:	90 e0       	ldi	r25, 0x00	; 0
    912a:	9d 87       	std	Y+13, r25	; 0x0d
    912c:	8c 87       	std	Y+12, r24	; 0x0c
		if (e->direction == D_LEFT)
    912e:	89 89       	ldd	r24, Y+17	; 0x11
    9130:	81 11       	cpse	r24, r1
    9132:	04 c0       	rjmp	.+8      	; 0x913c <update_spider_enemy+0x48>
		{
			e->shared.vx = -SPIDER_SIDE_SPEED;
    9134:	84 ec       	ldi	r24, 0xC4	; 196
    9136:	9f ef       	ldi	r25, 0xFF	; 255
    9138:	9d 87       	std	Y+13, r25	; 0x0d
    913a:	8c 87       	std	Y+12, r24	; 0x0c
		}
		LBMapSprite(slot, map_enemy_spider_1, 0);
    913c:	40 e0       	ldi	r20, 0x00	; 0
    913e:	6c e8       	ldi	r22, 0x8C	; 140
    9140:	73 e3       	ldi	r23, 0x33	; 51
    9142:	1a c0       	rjmp	.+52     	; 0x9178 <update_spider_enemy+0x84>
	}
	else if (e->flags & JUMPING && e->shared.gravity == 0)
    9144:	90 ff       	sbrs	r25, 0
    9146:	10 c0       	rjmp	.+32     	; 0x9168 <update_spider_enemy+0x74>
    9148:	9e 85       	ldd	r25, Y+14	; 0x0e
    914a:	91 11       	cpse	r25, r1
    914c:	0d c0       	rjmp	.+26     	; 0x9168 <update_spider_enemy+0x74>
	{
		e->flags = IDLE;
    914e:	88 e0       	ldi	r24, 0x08	; 8
    9150:	88 8b       	std	Y+16, r24	; 0x10
		e->shared.vx = 0;
    9152:	1d 86       	std	Y+13, r1	; 0x0d
    9154:	1c 86       	std	Y+12, r1	; 0x0c
		e->frame_count = 0;
    9156:	1d 8a       	std	Y+21, r1	; 0x15
		if (e->direction == D_LEFT)
    9158:	89 89       	ldd	r24, Y+17	; 0x11
    915a:	81 11       	cpse	r24, r1
    915c:	03 c0       	rjmp	.+6      	; 0x9164 <update_spider_enemy+0x70>
		{
			e->direction = D_RIGHT;
    915e:	81 e0       	ldi	r24, 0x01	; 1
    9160:	89 8b       	std	Y+17, r24	; 0x11
    9162:	0d c0       	rjmp	.+26     	; 0x917e <update_spider_enemy+0x8a>
		}
		else
		{
			e->direction = D_LEFT;
    9164:	19 8a       	std	Y+17, r1	; 0x11
    9166:	0b c0       	rjmp	.+22     	; 0x917e <update_spider_enemy+0x8a>
		}
	}
	else if (e->flags & IDLE)
    9168:	88 23       	and	r24, r24
    916a:	49 f0       	breq	.+18     	; 0x917e <update_spider_enemy+0x8a>
	{
		LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    916c:	ce 01       	movw	r24, r28
    916e:	c2 96       	adiw	r24, 0x32	; 50
    9170:	0e 94 4c 3b 	call	0x7698	; 0x7698 <LBGetNextFrame>
    9174:	40 e0       	ldi	r20, 0x00	; 0
    9176:	bc 01       	movw	r22, r24
    9178:	81 2f       	mov	r24, r17
    917a:	0e 94 f2 3b 	call	0x77e4	; 0x77e4 <LBMapSprite>
	}
	e->frame_count++;
    917e:	8d 89       	ldd	r24, Y+21	; 0x15
    9180:	8f 5f       	subi	r24, 0xFF	; 255
    9182:	8d 8b       	std	Y+21, r24	; 0x15
}
    9184:	df 91       	pop	r29
    9186:	cf 91       	pop	r28
    9188:	1f 91       	pop	r17
    918a:	08 95       	ret

0000918c <update_basic_shot>:

void update_basic_shot(Shot* s, u8 slot)
{
    918c:	cf 93       	push	r28
    918e:	c6 2f       	mov	r28, r22
	LBMapSprite(slot, LBGetNextFrame(&s->anim), 0);
    9190:	42 96       	adiw	r24, 0x12	; 18
    9192:	0e 94 4c 3b 	call	0x7698	; 0x7698 <LBGetNextFrame>
    9196:	40 e0       	ldi	r20, 0x00	; 0
    9198:	bc 01       	movw	r22, r24
    919a:	8c 2f       	mov	r24, r28
}
    919c:	cf 91       	pop	r28
	e->frame_count++;
}

void update_basic_shot(Shot* s, u8 slot)
{
	LBMapSprite(slot, LBGetNextFrame(&s->anim), 0);
    919e:	0c 94 f2 3b 	jmp	0x77e4	; 0x77e4 <LBMapSprite>

000091a2 <update_enemies>:
}

void update_enemies()
{
    91a2:	ef 92       	push	r14
    91a4:	ff 92       	push	r15
    91a6:	0f 93       	push	r16
    91a8:	1f 93       	push	r17
    91aa:	cf 93       	push	r28
    91ac:	df 93       	push	r29
    91ae:	c8 e4       	ldi	r28, 0x48	; 72
    91b0:	de e0       	ldi	r29, 0x0E	; 14
	u8 slot = ENEMY_SLOT;
    91b2:	16 e0       	ldi	r17, 0x06	; 6
    91b4:	ce 01       	movw	r24, r28
    91b6:	03 97       	sbiw	r24, 0x03	; 3
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].flags & EXPLODING)
    91b8:	fc 01       	movw	r30, r24
    91ba:	20 81       	ld	r18, Z
    91bc:	ae 01       	movw	r20, r28
    91be:	41 50       	subi	r20, 0x01	; 1
    91c0:	51 09       	sbc	r21, r1
    91c2:	7a 01       	movw	r14, r20
    91c4:	24 ff       	sbrs	r18, 4
    91c6:	0a c0       	rjmp	.+20     	; 0x91dc <update_enemies+0x3a>
		{
			map_explosion(&game.enemies[i].flags, &game.enemies[i].expl, slot, game.enemies[i].width, game.enemies[i].height);
    91c8:	08 81       	ld	r16, Y
    91ca:	fa 01       	movw	r30, r20
    91cc:	20 81       	ld	r18, Z
    91ce:	41 2f       	mov	r20, r17
    91d0:	be 01       	movw	r22, r28
    91d2:	69 5d       	subi	r22, 0xD9	; 217
    91d4:	7f 4f       	sbci	r23, 0xFF	; 255
    91d6:	0e 94 45 47 	call	0x8e8a	; 0x8e8a <map_explosion>
    91da:	0d c0       	rjmp	.+26     	; 0x91f6 <update_enemies+0x54>
    91dc:	fe 01       	movw	r30, r28
    91de:	34 97       	sbiw	r30, 0x04	; 4
		}
		else if (game.enemies[i].active)
    91e0:	80 81       	ld	r24, Z
    91e2:	88 23       	and	r24, r24
    91e4:	41 f0       	breq	.+16     	; 0x91f6 <update_enemies+0x54>
		{
			switch (game.enemies[i].enemy_type)
    91e6:	89 81       	ldd	r24, Y+1	; 0x01
    91e8:	81 11       	cpse	r24, r1
    91ea:	05 c0       	rjmp	.+10     	; 0x91f6 <update_enemies+0x54>
			{
				case ENEMY_SPIDER: update_spider_enemy(&game.enemies[i], slot); break;
    91ec:	61 2f       	mov	r22, r17
    91ee:	ce 01       	movw	r24, r28
    91f0:	43 97       	sbiw	r24, 0x13	; 19
    91f2:	0e 94 7a 48 	call	0x90f4	; 0x90f4 <update_spider_enemy>
			}
		}
		slot += game.enemies[i].width * game.enemies[i].height;
    91f6:	f7 01       	movw	r30, r14
    91f8:	90 81       	ld	r25, Z
    91fa:	88 81       	ld	r24, Y
    91fc:	98 9f       	mul	r25, r24
    91fe:	10 0d       	add	r17, r0
    9200:	11 24       	eor	r1, r1
    9202:	ce 5b       	subi	r28, 0xBE	; 190
    9204:	df 4f       	sbci	r29, 0xFF	; 255

void update_enemies()
{
	u8 slot = ENEMY_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    9206:	ff e0       	ldi	r31, 0x0F	; 15
    9208:	c2 39       	cpi	r28, 0x92	; 146
    920a:	df 07       	cpc	r29, r31
    920c:	99 f6       	brne	.-90     	; 0x91b4 <update_enemies+0x12>
				case ENEMY_SPIDER: update_spider_enemy(&game.enemies[i], slot); break;
			}
		}
		slot += game.enemies[i].width * game.enemies[i].height;
	}
}
    920e:	df 91       	pop	r29
    9210:	cf 91       	pop	r28
    9212:	1f 91       	pop	r17
    9214:	0f 91       	pop	r16
    9216:	ff 90       	pop	r15
    9218:	ef 90       	pop	r14
    921a:	08 95       	ret

0000921c <update_enemy_shots>:

void update_enemy_shots()
{
    921c:	8f 92       	push	r8
    921e:	9f 92       	push	r9
    9220:	af 92       	push	r10
    9222:	bf 92       	push	r11
    9224:	cf 92       	push	r12
    9226:	df 92       	push	r13
    9228:	ef 92       	push	r14
    922a:	ff 92       	push	r15
    922c:	0f 93       	push	r16
    922e:	1f 93       	push	r17
    9230:	cf 93       	push	r28
    9232:	df 93       	push	r29
    9234:	00 d0       	rcall	.+0      	; 0x9236 <update_enemy_shots+0x1a>
    9236:	00 d0       	rcall	.+0      	; 0x9238 <update_enemy_shots+0x1c>
    9238:	cd b7       	in	r28, 0x3d	; 61
    923a:	de b7       	in	r29, 0x3e	; 62
    923c:	2b e4       	ldi	r18, 0x4B	; 75
    923e:	82 2e       	mov	r8, r18
    9240:	2e e0       	ldi	r18, 0x0E	; 14
    9242:	92 2e       	mov	r9, r18
    9244:	0e e5       	ldi	r16, 0x5E	; 94
    9246:	1e e0       	ldi	r17, 0x0E	; 14
    9248:	3f e0       	ldi	r19, 0x0F	; 15
    924a:	b3 2e       	mov	r11, r19
					if (!game.enemies[i].shot[j].active)
					{
						game.enemies[i].shot[j].active = 1;
						game.enemies[i].shot[j].shared.x = game.enemies[i].shared.x;
						game.enemies[i].shot[j].shared.y = ((u16 ) game.enemies[i].shared.y / 8) * 8;
						game.enemies[i].shot[j].shared.vx = ENEMY_SHOT_SPEED;
    924c:	44 e6       	ldi	r20, 0x64	; 100
    924e:	e4 2e       	mov	r14, r20
    9250:	f1 2c       	mov	r15, r1
						if (game.player.shared.x <= game.enemies[i].shared.x)
						{
							game.enemies[i].shot[j].shared.vx = -ENEMY_SHOT_SPEED;
    9252:	5c e9       	ldi	r21, 0x9C	; 156
    9254:	c5 2e       	mov	r12, r21
    9256:	dd 24       	eor	r13, r13
    9258:	da 94       	dec	r13
    925a:	aa 24       	eor	r10, r10
    925c:	aa 94       	dec	r10
    925e:	ab 0c       	add	r10, r11
    9260:	f4 01       	movw	r30, r8
    9262:	37 97       	sbiw	r30, 0x07	; 7
{
	u8 slot = ENEMY_SHOT_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].active && game.enemies[i].shot_frame_count >= ENEMY_SHOT_DELAY_FRAMES)
    9264:	80 81       	ld	r24, Z
    9266:	88 23       	and	r24, r24
    9268:	09 f4       	brne	.+2      	; 0x926c <update_enemy_shots+0x50>
    926a:	58 c0       	rjmp	.+176    	; 0x931c <update_enemy_shots+0x100>
    926c:	f4 01       	movw	r30, r8
    926e:	80 81       	ld	r24, Z
    9270:	8c 33       	cpi	r24, 0x3C	; 60
    9272:	08 f4       	brcc	.+2      	; 0x9276 <update_enemy_shots+0x5a>
    9274:	50 c0       	rjmp	.+160    	; 0x9316 <update_enemy_shots+0xfa>
		{
			game.enemies[i].shot_frame_count = 0;	
    9276:	10 82       	st	Z, r1
    9278:	f8 01       	movw	r30, r16
    927a:	32 97       	sbiw	r30, 0x02	; 2
			for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
			{
				if (game.enemies[i].shot[j].shot_type == BASIC_ENEMY_SHOT)
    927c:	80 81       	ld	r24, Z
    927e:	81 30       	cpi	r24, 0x01	; 1
    9280:	09 f0       	breq	.+2      	; 0x9284 <update_enemy_shots+0x68>
    9282:	4c c0       	rjmp	.+152    	; 0x931c <update_enemy_shots+0x100>
				{
					if (!game.enemies[i].shot[j].active)
    9284:	f8 01       	movw	r30, r16
    9286:	90 81       	ld	r25, Z
    9288:	91 11       	cpse	r25, r1
    928a:	3f c0       	rjmp	.+126    	; 0x930a <update_enemy_shots+0xee>
					{
						game.enemies[i].shot[j].active = 1;
    928c:	80 83       	st	Z, r24
    928e:	f4 01       	movw	r30, r8
    9290:	72 97       	sbiw	r30, 0x12	; 18
						game.enemies[i].shot[j].shared.x = game.enemies[i].shared.x;
    9292:	20 81       	ld	r18, Z
    9294:	31 81       	ldd	r19, Z+1	; 0x01
    9296:	42 81       	ldd	r20, Z+2	; 0x02
    9298:	53 81       	ldd	r21, Z+3	; 0x03
    929a:	f4 01       	movw	r30, r8
    929c:	26 83       	std	Z+6, r18	; 0x06
    929e:	37 83       	std	Z+7, r19	; 0x07
    92a0:	40 87       	std	Z+8, r20	; 0x08
    92a2:	51 87       	std	Z+9, r21	; 0x09
    92a4:	3e 97       	sbiw	r30, 0x0e	; 14
						game.enemies[i].shot[j].shared.y = ((u16 ) game.enemies[i].shared.y / 8) * 8;
    92a6:	60 81       	ld	r22, Z
    92a8:	71 81       	ldd	r23, Z+1	; 0x01
    92aa:	82 81       	ldd	r24, Z+2	; 0x02
    92ac:	93 81       	ldd	r25, Z+3	; 0x03
    92ae:	29 83       	std	Y+1, r18	; 0x01
    92b0:	3a 83       	std	Y+2, r19	; 0x02
    92b2:	4b 83       	std	Y+3, r20	; 0x03
    92b4:	5c 83       	std	Y+4, r21	; 0x04
    92b6:	0e 94 06 51 	call	0xa20c	; 0xa20c <__fixunssfsi>
    92ba:	83 e0       	ldi	r24, 0x03	; 3
    92bc:	76 95       	lsr	r23
    92be:	67 95       	ror	r22
    92c0:	8a 95       	dec	r24
    92c2:	e1 f7       	brne	.-8      	; 0x92bc <update_enemy_shots+0xa0>
    92c4:	93 e0       	ldi	r25, 0x03	; 3
    92c6:	66 0f       	add	r22, r22
    92c8:	77 1f       	adc	r23, r23
    92ca:	9a 95       	dec	r25
    92cc:	e1 f7       	brne	.-8      	; 0x92c6 <update_enemy_shots+0xaa>
    92ce:	80 e0       	ldi	r24, 0x00	; 0
    92d0:	90 e0       	ldi	r25, 0x00	; 0
    92d2:	0e 94 32 51 	call	0xa264	; 0xa264 <__floatunsisf>
    92d6:	f4 01       	movw	r30, r8
    92d8:	62 87       	std	Z+10, r22	; 0x0a
    92da:	73 87       	std	Z+11, r23	; 0x0b
    92dc:	84 87       	std	Z+12, r24	; 0x0c
    92de:	95 87       	std	Z+13, r25	; 0x0d
						game.enemies[i].shot[j].shared.vx = ENEMY_SHOT_SPEED;
    92e0:	f7 86       	std	Z+15, r15	; 0x0f
    92e2:	e6 86       	std	Z+14, r14	; 0x0e
						if (game.player.shared.x <= game.enemies[i].shared.x)
    92e4:	29 81       	ldd	r18, Y+1	; 0x01
    92e6:	3a 81       	ldd	r19, Y+2	; 0x02
    92e8:	4b 81       	ldd	r20, Y+3	; 0x03
    92ea:	5c 81       	ldd	r21, Y+4	; 0x04
    92ec:	60 91 ad 0d 	lds	r22, 0x0DAD
    92f0:	70 91 ae 0d 	lds	r23, 0x0DAE
    92f4:	80 91 af 0d 	lds	r24, 0x0DAF
    92f8:	90 91 b0 0d 	lds	r25, 0x0DB0
    92fc:	0e 94 02 51 	call	0xa204	; 0xa204 <__cmpsf2>
    9300:	18 16       	cp	r1, r24
    9302:	1c f0       	brlt	.+6      	; 0x930a <update_enemy_shots+0xee>
						{
							game.enemies[i].shot[j].shared.vx = -ENEMY_SHOT_SPEED;
    9304:	f4 01       	movw	r30, r8
    9306:	d7 86       	std	Z+15, r13	; 0x0f
    9308:	c6 86       	std	Z+14, r12	; 0x0e
						}
					}
					update_basic_shot(&game.enemies[i].shot[j], slot);
    930a:	6a 2d       	mov	r22, r10
    930c:	c4 01       	movw	r24, r8
    930e:	02 96       	adiw	r24, 0x02	; 2
    9310:	0e 94 c6 48 	call	0x918c	; 0x918c <update_basic_shot>
    9314:	03 c0       	rjmp	.+6      	; 0x931c <update_enemy_shots+0x100>
				slot += 1;
			}
		}
		else if (game.enemies[i].active)
		{
			game.enemies[i].shot_frame_count++;
    9316:	8f 5f       	subi	r24, 0xFF	; 255
    9318:	f4 01       	movw	r30, r8
    931a:	80 83       	st	Z, r24
    931c:	b3 94       	inc	r11
    931e:	f2 e4       	ldi	r31, 0x42	; 66
    9320:	8f 0e       	add	r8, r31
    9322:	91 1c       	adc	r9, r1
    9324:	0e 5b       	subi	r16, 0xBE	; 190
    9326:	1f 4f       	sbci	r17, 0xFF	; 255

void update_enemy_shots()
{
	u8 slot = ENEMY_SHOT_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    9328:	84 e1       	ldi	r24, 0x14	; 20
    932a:	b8 12       	cpse	r11, r24
    932c:	96 cf       	rjmp	.-212    	; 0x925a <update_enemy_shots+0x3e>
		else
		{
			slot += MAX_ENEMY_SHOTS;
		}
	}
}
    932e:	0f 90       	pop	r0
    9330:	0f 90       	pop	r0
    9332:	0f 90       	pop	r0
    9334:	0f 90       	pop	r0
    9336:	df 91       	pop	r29
    9338:	cf 91       	pop	r28
    933a:	1f 91       	pop	r17
    933c:	0f 91       	pop	r16
    933e:	ff 90       	pop	r15
    9340:	ef 90       	pop	r14
    9342:	df 90       	pop	r13
    9344:	cf 90       	pop	r12
    9346:	bf 90       	pop	r11
    9348:	af 90       	pop	r10
    934a:	9f 90       	pop	r9
    934c:	8f 90       	pop	r8
    934e:	08 95       	ret

00009350 <animate_enemies>:

void animate_enemies()
{
    9350:	2f 92       	push	r2
    9352:	3f 92       	push	r3
    9354:	4f 92       	push	r4
    9356:	5f 92       	push	r5
    9358:	6f 92       	push	r6
    935a:	7f 92       	push	r7
    935c:	8f 92       	push	r8
    935e:	9f 92       	push	r9
    9360:	af 92       	push	r10
    9362:	bf 92       	push	r11
    9364:	cf 92       	push	r12
    9366:	df 92       	push	r13
    9368:	ef 92       	push	r14
    936a:	ff 92       	push	r15
    936c:	0f 93       	push	r16
    936e:	1f 93       	push	r17
    9370:	cf 93       	push	r28
    9372:	df 93       	push	r29
    9374:	cd b7       	in	r28, 0x3d	; 61
    9376:	de b7       	in	r29, 0x3e	; 62
    9378:	2c 97       	sbiw	r28, 0x0c	; 12
    937a:	0f b6       	in	r0, 0x3f	; 63
    937c:	f8 94       	cli
    937e:	de bf       	out	0x3e, r29	; 62
    9380:	0f be       	out	0x3f, r0	; 63
    9382:	cd bf       	out	0x3d, r28	; 61
    9384:	47 e4       	ldi	r20, 0x47	; 71
    9386:	24 2e       	mov	r2, r20
    9388:	4e e0       	ldi	r20, 0x0E	; 14
    938a:	34 2e       	mov	r3, r20
    938c:	88 e4       	ldi	r24, 0x48	; 72
    938e:	9e e0       	ldi	r25, 0x0E	; 14
    9390:	9c 87       	std	Y+12, r25	; 0x0c
    9392:	8b 87       	std	Y+11, r24	; 0x0b
    9394:	55 e3       	ldi	r21, 0x35	; 53
    9396:	85 2e       	mov	r8, r21
    9398:	5e e0       	ldi	r21, 0x0E	; 14
    939a:	95 2e       	mov	r9, r21
	u8 slot = ENEMY_SLOT;
    939c:	66 e0       	ldi	r22, 0x06	; 6
    939e:	b6 2e       	mov	r11, r22
    93a0:	eb 85       	ldd	r30, Y+11	; 0x0b
    93a2:	fc 85       	ldd	r31, Y+12	; 0x0c
    93a4:	34 97       	sbiw	r30, 0x04	; 4
    93a6:	fa 83       	std	Y+2, r31	; 0x02
    93a8:	e9 83       	std	Y+1, r30	; 0x01
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].active && !(game.enemies[i].flags & EXPLODING))
    93aa:	80 81       	ld	r24, Z
    93ac:	eb 85       	ldd	r30, Y+11	; 0x0b
    93ae:	fc 85       	ldd	r31, Y+12	; 0x0c
    93b0:	33 97       	sbiw	r30, 0x03	; 3
    93b2:	88 23       	and	r24, r24
    93b4:	09 f4       	brne	.+2      	; 0x93b8 <animate_enemies+0x68>
    93b6:	a9 c0       	rjmp	.+338    	; 0x950a <animate_enemies+0x1ba>
    93b8:	80 81       	ld	r24, Z
    93ba:	84 fd       	sbrc	r24, 4
    93bc:	a6 c0       	rjmp	.+332    	; 0x950a <animate_enemies+0x1ba>
		{
			if (game.enemies[i].shared.x < game.camera_x || game.enemies[i].shared.y < game.camera_y || game.enemies[i].shared.y > game.camera_y + CAMERA_HEIGHT*8)
    93be:	f4 01       	movw	r30, r8
    93c0:	44 80       	ldd	r4, Z+4	; 0x04
    93c2:	55 80       	ldd	r5, Z+5	; 0x05
    93c4:	66 80       	ldd	r6, Z+6	; 0x06
    93c6:	77 80       	ldd	r7, Z+7	; 0x07
    93c8:	60 91 93 0d 	lds	r22, 0x0D93
    93cc:	70 91 94 0d 	lds	r23, 0x0D94
    93d0:	80 e0       	ldi	r24, 0x00	; 0
    93d2:	90 e0       	ldi	r25, 0x00	; 0
    93d4:	0e 94 32 51 	call	0xa264	; 0xa264 <__floatunsisf>
    93d8:	9b 01       	movw	r18, r22
    93da:	ac 01       	movw	r20, r24
    93dc:	c3 01       	movw	r24, r6
    93de:	b2 01       	movw	r22, r4
    93e0:	0e 94 02 51 	call	0xa204	; 0xa204 <__cmpsf2>
    93e4:	87 fd       	sbrc	r24, 7
    93e6:	25 c0       	rjmp	.+74     	; 0x9432 <animate_enemies+0xe2>
    93e8:	f4 01       	movw	r30, r8
    93ea:	c0 84       	ldd	r12, Z+8	; 0x08
    93ec:	d1 84       	ldd	r13, Z+9	; 0x09
    93ee:	e2 84       	ldd	r14, Z+10	; 0x0a
    93f0:	f3 84       	ldd	r15, Z+11	; 0x0b
    93f2:	00 91 95 0d 	lds	r16, 0x0D95
    93f6:	10 91 96 0d 	lds	r17, 0x0D96
    93fa:	b8 01       	movw	r22, r16
    93fc:	80 e0       	ldi	r24, 0x00	; 0
    93fe:	90 e0       	ldi	r25, 0x00	; 0
    9400:	0e 94 32 51 	call	0xa264	; 0xa264 <__floatunsisf>
    9404:	9b 01       	movw	r18, r22
    9406:	ac 01       	movw	r20, r24
    9408:	c7 01       	movw	r24, r14
    940a:	b6 01       	movw	r22, r12
    940c:	0e 94 02 51 	call	0xa204	; 0xa204 <__cmpsf2>
    9410:	87 fd       	sbrc	r24, 7
    9412:	0f c0       	rjmp	.+30     	; 0x9432 <animate_enemies+0xe2>
    9414:	b8 01       	movw	r22, r16
    9416:	60 53       	subi	r22, 0x30	; 48
    9418:	7f 4f       	sbci	r23, 0xFF	; 255
    941a:	80 e0       	ldi	r24, 0x00	; 0
    941c:	90 e0       	ldi	r25, 0x00	; 0
    941e:	0e 94 32 51 	call	0xa264	; 0xa264 <__floatunsisf>
    9422:	9b 01       	movw	r18, r22
    9424:	ac 01       	movw	r20, r24
    9426:	c7 01       	movw	r24, r14
    9428:	b6 01       	movw	r22, r12
    942a:	0e 94 e4 51 	call	0xa3c8	; 0xa3c8 <__gesf2>
    942e:	18 16       	cp	r1, r24
    9430:	84 f4       	brge	.+32     	; 0x9452 <animate_enemies+0x102>
			{
				game.enemies[i].active = 0;
    9432:	e9 81       	ldd	r30, Y+1	; 0x01
    9434:	fa 81       	ldd	r31, Y+2	; 0x02
    9436:	10 82       	st	Z, r1
				game.active_enemies--;
    9438:	80 91 a7 0d 	lds	r24, 0x0DA7
    943c:	81 50       	subi	r24, 0x01	; 1
    943e:	80 93 a7 0d 	sts	0x0DA7, r24
				LBMoveSprite(slot, OFF_SCREEN, 0, game.enemies[i].width, game.enemies[i].height);
    9442:	eb 85       	ldd	r30, Y+11	; 0x0b
    9444:	fc 85       	ldd	r31, Y+12	; 0x0c
    9446:	00 81       	ld	r16, Z
    9448:	f1 01       	movw	r30, r2
    944a:	20 81       	ld	r18, Z
    944c:	40 e0       	ldi	r20, 0x00	; 0
    944e:	60 ee       	ldi	r22, 0xE0	; 224
    9450:	8c c0       	rjmp	.+280    	; 0x956a <animate_enemies+0x21a>
			}
			else if (LBCollides(game.player.shared.x,game.player.shared.y, game.player.width*8, game.player.height*8,
    9452:	c7 01       	movw	r24, r14
    9454:	b6 01       	movw	r22, r12
    9456:	0e 94 06 51 	call	0xa20c	; 0xa20c <__fixunssfsi>
    945a:	69 83       	std	Y+1, r22	; 0x01
    945c:	7a 83       	std	Y+2, r23	; 0x02
    945e:	8b 83       	std	Y+3, r24	; 0x03
    9460:	9c 83       	std	Y+4, r25	; 0x04
    9462:	c3 01       	movw	r24, r6
    9464:	b2 01       	movw	r22, r4
    9466:	0e 94 06 51 	call	0xa20c	; 0xa20c <__fixunssfsi>
    946a:	6d 83       	std	Y+5, r22	; 0x05
    946c:	7e 83       	std	Y+6, r23	; 0x06
    946e:	8f 83       	std	Y+7, r24	; 0x07
    9470:	98 87       	std	Y+8, r25	; 0x08
    9472:	20 91 bd 0d 	lds	r18, 0x0DBD
    9476:	22 0f       	add	r18, r18
    9478:	22 0f       	add	r18, r18
    947a:	22 0f       	add	r18, r18
    947c:	40 91 bc 0d 	lds	r20, 0x0DBC
    9480:	44 0f       	add	r20, r20
    9482:	44 0f       	add	r20, r20
    9484:	44 0f       	add	r20, r20
    9486:	60 91 b1 0d 	lds	r22, 0x0DB1
    948a:	70 91 b2 0d 	lds	r23, 0x0DB2
    948e:	80 91 b3 0d 	lds	r24, 0x0DB3
    9492:	90 91 b4 0d 	lds	r25, 0x0DB4
    9496:	29 87       	std	Y+9, r18	; 0x09
    9498:	4a 87       	std	Y+10, r20	; 0x0a
    949a:	0e 94 06 51 	call	0xa20c	; 0xa20c <__fixunssfsi>
    949e:	2b 01       	movw	r4, r22
    94a0:	3c 01       	movw	r6, r24
    94a2:	60 91 ad 0d 	lds	r22, 0x0DAD
    94a6:	70 91 ae 0d 	lds	r23, 0x0DAE
    94aa:	80 91 af 0d 	lds	r24, 0x0DAF
    94ae:	90 91 b0 0d 	lds	r25, 0x0DB0
    94b2:	0e 94 06 51 	call	0xa20c	; 0xa20c <__fixunssfsi>
    94b6:	dc 01       	movw	r26, r24
    94b8:	cb 01       	movw	r24, r22
    94ba:	28 e0       	ldi	r18, 0x08	; 8
    94bc:	a2 2e       	mov	r10, r18
    94be:	38 e0       	ldi	r19, 0x08	; 8
    94c0:	c3 2e       	mov	r12, r19
    94c2:	e9 80       	ldd	r14, Y+1	; 0x01
    94c4:	fa 80       	ldd	r15, Y+2	; 0x02
    94c6:	0d 81       	ldd	r16, Y+5	; 0x05
    94c8:	1e 81       	ldd	r17, Y+6	; 0x06
    94ca:	29 85       	ldd	r18, Y+9	; 0x09
    94cc:	4a 85       	ldd	r20, Y+10	; 0x0a
    94ce:	b2 01       	movw	r22, r4
    94d0:	0e 94 bd 3b 	call	0x777a	; 0x777a <LBCollides>
    94d4:	88 23       	and	r24, r24
    94d6:	79 f0       	breq	.+30     	; 0x94f6 <animate_enemies+0x1a6>
							game.enemies[i].shared.x, game.enemies[i].shared.y, 8, 8
						) && !(game.player.flags & EXPLODING)
    94d8:	80 91 b9 0d 	lds	r24, 0x0DB9
    94dc:	84 fd       	sbrc	r24, 4
    94de:	0b c0       	rjmp	.+22     	; 0x94f6 <animate_enemies+0x1a6>
			)
			{
				SFX_PLAYER_EXPLODE;
    94e0:	41 e0       	ldi	r20, 0x01	; 1
    94e2:	6f ef       	ldi	r22, 0xFF	; 255
    94e4:	85 e0       	ldi	r24, 0x05	; 5
    94e6:	0e 94 7d 2f 	call	0x5efa	; 0x5efa <TriggerFx>
				game.player.shield = 0;
    94ea:	10 92 be 0d 	sts	0x0DBE, r1
				game.player.flags = EXPLODING;
    94ee:	80 e1       	ldi	r24, 0x10	; 16
    94f0:	80 93 b9 0d 	sts	0x0DB9, r24
				return;
    94f4:	57 c0       	rjmp	.+174    	; 0x95a4 <animate_enemies+0x254>
			}
			else
			{
				animate_sprite(&game.enemies[i].shared, slot, game.enemies[i].width, game.enemies[i].height);
    94f6:	eb 85       	ldd	r30, Y+11	; 0x0b
    94f8:	fc 85       	ldd	r31, Y+12	; 0x0c
    94fa:	20 81       	ld	r18, Z
    94fc:	f1 01       	movw	r30, r2
    94fe:	40 81       	ld	r20, Z
    9500:	6b 2d       	mov	r22, r11
    9502:	c4 01       	movw	r24, r8
    9504:	0e 94 90 47 	call	0x8f20	; 0x8f20 <animate_sprite>
    9508:	33 c0       	rjmp	.+102    	; 0x9570 <animate_enemies+0x220>
			}
		}
		else if (game.enemies[i].flags & EXPLODING)
    950a:	80 81       	ld	r24, Z
    950c:	84 ff       	sbrs	r24, 4
    950e:	30 c0       	rjmp	.+96     	; 0x9570 <animate_enemies+0x220>
		{
			LBMoveSprite(slot, game.enemies[i].shared.x - game.camera_x, game.enemies[i].shared.y - game.camera_y, game.enemies[i].width, game.enemies[i].height);
    9510:	60 91 95 0d 	lds	r22, 0x0D95
    9514:	70 91 96 0d 	lds	r23, 0x0D96
    9518:	80 e0       	ldi	r24, 0x00	; 0
    951a:	90 e0       	ldi	r25, 0x00	; 0
    951c:	0e 94 32 51 	call	0xa264	; 0xa264 <__floatunsisf>
    9520:	9b 01       	movw	r18, r22
    9522:	ac 01       	movw	r20, r24
    9524:	f4 01       	movw	r30, r8
    9526:	60 85       	ldd	r22, Z+8	; 0x08
    9528:	71 85       	ldd	r23, Z+9	; 0x09
    952a:	82 85       	ldd	r24, Z+10	; 0x0a
    952c:	93 85       	ldd	r25, Z+11	; 0x0b
    952e:	0e 94 9d 50 	call	0xa13a	; 0xa13a <__subsf3>
    9532:	0e 94 06 51 	call	0xa20c	; 0xa20c <__fixunssfsi>
    9536:	16 2f       	mov	r17, r22
    9538:	60 91 93 0d 	lds	r22, 0x0D93
    953c:	70 91 94 0d 	lds	r23, 0x0D94
    9540:	80 e0       	ldi	r24, 0x00	; 0
    9542:	90 e0       	ldi	r25, 0x00	; 0
    9544:	0e 94 32 51 	call	0xa264	; 0xa264 <__floatunsisf>
    9548:	9b 01       	movw	r18, r22
    954a:	ac 01       	movw	r20, r24
    954c:	f4 01       	movw	r30, r8
    954e:	64 81       	ldd	r22, Z+4	; 0x04
    9550:	75 81       	ldd	r23, Z+5	; 0x05
    9552:	86 81       	ldd	r24, Z+6	; 0x06
    9554:	97 81       	ldd	r25, Z+7	; 0x07
    9556:	0e 94 9d 50 	call	0xa13a	; 0xa13a <__subsf3>
    955a:	0e 94 06 51 	call	0xa20c	; 0xa20c <__fixunssfsi>
    955e:	eb 85       	ldd	r30, Y+11	; 0x0b
    9560:	fc 85       	ldd	r31, Y+12	; 0x0c
    9562:	00 81       	ld	r16, Z
    9564:	f1 01       	movw	r30, r2
    9566:	20 81       	ld	r18, Z
    9568:	41 2f       	mov	r20, r17
    956a:	8b 2d       	mov	r24, r11
    956c:	0e 94 44 3c 	call	0x7888	; 0x7888 <LBMoveSprite>
		}
		slot +=  game.enemies[i].width * game.enemies[i].height;
    9570:	eb 85       	ldd	r30, Y+11	; 0x0b
    9572:	fc 85       	ldd	r31, Y+12	; 0x0c
    9574:	90 81       	ld	r25, Z
    9576:	f1 01       	movw	r30, r2
    9578:	80 81       	ld	r24, Z
    957a:	98 9f       	mul	r25, r24
    957c:	b0 0c       	add	r11, r0
    957e:	11 24       	eor	r1, r1
    9580:	f2 e4       	ldi	r31, 0x42	; 66
    9582:	2f 0e       	add	r2, r31
    9584:	31 1c       	adc	r3, r1
    9586:	8b 85       	ldd	r24, Y+11	; 0x0b
    9588:	9c 85       	ldd	r25, Y+12	; 0x0c
    958a:	8e 5b       	subi	r24, 0xBE	; 190
    958c:	9f 4f       	sbci	r25, 0xFF	; 255
    958e:	9c 87       	std	Y+12, r25	; 0x0c
    9590:	8b 87       	std	Y+11, r24	; 0x0b
    9592:	92 e4       	ldi	r25, 0x42	; 66
    9594:	89 0e       	add	r8, r25
    9596:	91 1c       	adc	r9, r1

void animate_enemies()
{
	u8 slot = ENEMY_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    9598:	eb 85       	ldd	r30, Y+11	; 0x0b
    959a:	fc 85       	ldd	r31, Y+12	; 0x0c
    959c:	e2 59       	subi	r30, 0x92	; 146
    959e:	ff 40       	sbci	r31, 0x0F	; 15
    95a0:	09 f0       	breq	.+2      	; 0x95a4 <animate_enemies+0x254>
    95a2:	fe ce       	rjmp	.-516    	; 0x93a0 <animate_enemies+0x50>
		{
			LBMoveSprite(slot, game.enemies[i].shared.x - game.camera_x, game.enemies[i].shared.y - game.camera_y, game.enemies[i].width, game.enemies[i].height);
		}
		slot +=  game.enemies[i].width * game.enemies[i].height;
	}
}
    95a4:	2c 96       	adiw	r28, 0x0c	; 12
    95a6:	0f b6       	in	r0, 0x3f	; 63
    95a8:	f8 94       	cli
    95aa:	de bf       	out	0x3e, r29	; 62
    95ac:	0f be       	out	0x3f, r0	; 63
    95ae:	cd bf       	out	0x3d, r28	; 61
    95b0:	df 91       	pop	r29
    95b2:	cf 91       	pop	r28
    95b4:	1f 91       	pop	r17
    95b6:	0f 91       	pop	r16
    95b8:	ff 90       	pop	r15
    95ba:	ef 90       	pop	r14
    95bc:	df 90       	pop	r13
    95be:	cf 90       	pop	r12
    95c0:	bf 90       	pop	r11
    95c2:	af 90       	pop	r10
    95c4:	9f 90       	pop	r9
    95c6:	8f 90       	pop	r8
    95c8:	7f 90       	pop	r7
    95ca:	6f 90       	pop	r6
    95cc:	5f 90       	pop	r5
    95ce:	4f 90       	pop	r4
    95d0:	3f 90       	pop	r3
    95d2:	2f 90       	pop	r2
    95d4:	08 95       	ret

000095d6 <animate_enemy_shots>:

void animate_enemy_shots()
{
    95d6:	2f 92       	push	r2
    95d8:	3f 92       	push	r3
    95da:	4f 92       	push	r4
    95dc:	5f 92       	push	r5
    95de:	6f 92       	push	r6
    95e0:	7f 92       	push	r7
    95e2:	8f 92       	push	r8
    95e4:	9f 92       	push	r9
    95e6:	af 92       	push	r10
    95e8:	bf 92       	push	r11
    95ea:	cf 92       	push	r12
    95ec:	df 92       	push	r13
    95ee:	ef 92       	push	r14
    95f0:	ff 92       	push	r15
    95f2:	0f 93       	push	r16
    95f4:	1f 93       	push	r17
    95f6:	cf 93       	push	r28
    95f8:	df 93       	push	r29
    95fa:	cd b7       	in	r28, 0x3d	; 61
    95fc:	de b7       	in	r29, 0x3e	; 62
    95fe:	62 97       	sbiw	r28, 0x12	; 18
    9600:	0f b6       	in	r0, 0x3f	; 63
    9602:	f8 94       	cli
    9604:	de bf       	out	0x3e, r29	; 62
    9606:	0f be       	out	0x3f, r0	; 63
    9608:	cd bf       	out	0x3d, r28	; 61
    960a:	4e e5       	ldi	r20, 0x5E	; 94
    960c:	24 2e       	mov	r2, r20
    960e:	4e e0       	ldi	r20, 0x0E	; 14
    9610:	34 2e       	mov	r3, r20
    9612:	5d e4       	ldi	r21, 0x4D	; 77
    9614:	85 2e       	mov	r8, r21
    9616:	5e e0       	ldi	r21, 0x0E	; 14
    9618:	95 2e       	mov	r9, r21
	u8 slot = ENEMY_SHOT_SLOT;
    961a:	6e e0       	ldi	r22, 0x0E	; 14
    961c:	b6 2e       	mov	r11, r22
    961e:	f1 01       	movw	r30, r2
    9620:	32 97       	sbiw	r30, 0x02	; 2
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
		{
			if (game.enemies[i].shot[j].shot_type == BASIC_ENEMY_SHOT)
    9622:	80 81       	ld	r24, Z
    9624:	81 30       	cpi	r24, 0x01	; 1
    9626:	09 f0       	breq	.+2      	; 0x962a <animate_enemy_shots+0x54>
    9628:	ee c0       	rjmp	.+476    	; 0x9806 <animate_enemy_shots+0x230>
			{
				if (game.enemies[i].shot[j].active)
    962a:	d1 01       	movw	r26, r2
    962c:	8c 91       	ld	r24, X
    962e:	88 23       	and	r24, r24
    9630:	09 f4       	brne	.+2      	; 0x9634 <animate_enemy_shots+0x5e>
    9632:	e9 c0       	rjmp	.+466    	; 0x9806 <animate_enemy_shots+0x230>
				{
					if (game.enemies[i].shot[j].shared.x < game.camera_x || game.enemies[i].shot[j].shared.x > game.camera_x + CAMERA_WIDTH*8 ||
    9634:	f4 01       	movw	r30, r8
    9636:	c4 80       	ldd	r12, Z+4	; 0x04
    9638:	d5 80       	ldd	r13, Z+5	; 0x05
    963a:	e6 80       	ldd	r14, Z+6	; 0x06
    963c:	f7 80       	ldd	r15, Z+7	; 0x07
    963e:	60 90 93 0d 	lds	r6, 0x0D93
    9642:	70 90 94 0d 	lds	r7, 0x0D94
    9646:	b3 01       	movw	r22, r6
    9648:	80 e0       	ldi	r24, 0x00	; 0
    964a:	90 e0       	ldi	r25, 0x00	; 0
    964c:	0e 94 32 51 	call	0xa264	; 0xa264 <__floatunsisf>
    9650:	9b 01       	movw	r18, r22
    9652:	ac 01       	movw	r20, r24
    9654:	c7 01       	movw	r24, r14
    9656:	b6 01       	movw	r22, r12
    9658:	0e 94 02 51 	call	0xa204	; 0xa204 <__cmpsf2>
    965c:	87 ff       	sbrs	r24, 7
    965e:	03 c0       	rjmp	.+6      	; 0x9666 <animate_enemy_shots+0x90>
					   collision_detect_level(&game.enemies[i].shot[j].shared, 1, 1))
					{
						game.enemies[i].shot[j].active = 0;
    9660:	d1 01       	movw	r26, r2
    9662:	1c 92       	st	X, r1
    9664:	84 c0       	rjmp	.+264    	; 0x976e <animate_enemy_shots+0x198>
		{
			if (game.enemies[i].shot[j].shot_type == BASIC_ENEMY_SHOT)
			{
				if (game.enemies[i].shot[j].active)
				{
					if (game.enemies[i].shot[j].shared.x < game.camera_x || game.enemies[i].shot[j].shared.x > game.camera_x + CAMERA_WIDTH*8 ||
    9666:	b3 01       	movw	r22, r6
    9668:	60 52       	subi	r22, 0x20	; 32
    966a:	7f 4f       	sbci	r23, 0xFF	; 255
    966c:	80 e0       	ldi	r24, 0x00	; 0
    966e:	90 e0       	ldi	r25, 0x00	; 0
    9670:	0e 94 32 51 	call	0xa264	; 0xa264 <__floatunsisf>
    9674:	9b 01       	movw	r18, r22
    9676:	ac 01       	movw	r20, r24
    9678:	c7 01       	movw	r24, r14
    967a:	b6 01       	movw	r22, r12
    967c:	0e 94 e4 51 	call	0xa3c8	; 0xa3c8 <__gesf2>
    9680:	18 16       	cp	r1, r24
    9682:	74 f3       	brlt	.-36     	; 0x9660 <animate_enemy_shots+0x8a>
					   collision_detect_level(&game.enemies[i].shot[j].shared, 1, 1))
    9684:	41 e0       	ldi	r20, 0x01	; 1
    9686:	61 e0       	ldi	r22, 0x01	; 1
    9688:	c4 01       	movw	r24, r8
    968a:	0e 94 87 42 	call	0x850e	; 0x850e <collision_detect_level>
		{
			if (game.enemies[i].shot[j].shot_type == BASIC_ENEMY_SHOT)
			{
				if (game.enemies[i].shot[j].active)
				{
					if (game.enemies[i].shot[j].shared.x < game.camera_x || game.enemies[i].shot[j].shared.x > game.camera_x + CAMERA_WIDTH*8 ||
    968e:	81 11       	cpse	r24, r1
    9690:	e7 cf       	rjmp	.-50     	; 0x9660 <animate_enemy_shots+0x8a>
					{
						game.enemies[i].shot[j].active = 0;
						LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
					}
					else if (LBCollides(game.player.shared.x,game.player.shared.y, game.player.width*8, game.player.height*8,
							game.enemies[i].shot[j].shared.x, game.enemies[i].shot[j].shared.y, 8, 8
    9692:	f4 01       	movw	r30, r8
    9694:	40 84       	ldd	r4, Z+8	; 0x08
    9696:	51 84       	ldd	r5, Z+9	; 0x09
    9698:	62 84       	ldd	r6, Z+10	; 0x0a
    969a:	73 84       	ldd	r7, Z+11	; 0x0b
    969c:	84 81       	ldd	r24, Z+4	; 0x04
    969e:	95 81       	ldd	r25, Z+5	; 0x05
    96a0:	a6 81       	ldd	r26, Z+6	; 0x06
    96a2:	b7 81       	ldd	r27, Z+7	; 0x07
    96a4:	89 83       	std	Y+1, r24	; 0x01
    96a6:	9a 83       	std	Y+2, r25	; 0x02
    96a8:	ab 83       	std	Y+3, r26	; 0x03
    96aa:	bc 83       	std	Y+4, r27	; 0x04
					   collision_detect_level(&game.enemies[i].shot[j].shared, 1, 1))
					{
						game.enemies[i].shot[j].active = 0;
						LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
					}
					else if (LBCollides(game.player.shared.x,game.player.shared.y, game.player.width*8, game.player.height*8,
    96ac:	c3 01       	movw	r24, r6
    96ae:	b2 01       	movw	r22, r4
    96b0:	0e 94 06 51 	call	0xa20c	; 0xa20c <__fixunssfsi>
    96b4:	6d 83       	std	Y+5, r22	; 0x05
    96b6:	7e 83       	std	Y+6, r23	; 0x06
    96b8:	8f 83       	std	Y+7, r24	; 0x07
    96ba:	98 87       	std	Y+8, r25	; 0x08
    96bc:	69 81       	ldd	r22, Y+1	; 0x01
    96be:	7a 81       	ldd	r23, Y+2	; 0x02
    96c0:	8b 81       	ldd	r24, Y+3	; 0x03
    96c2:	9c 81       	ldd	r25, Y+4	; 0x04
    96c4:	0e 94 06 51 	call	0xa20c	; 0xa20c <__fixunssfsi>
    96c8:	69 87       	std	Y+9, r22	; 0x09
    96ca:	7a 87       	std	Y+10, r23	; 0x0a
    96cc:	8b 87       	std	Y+11, r24	; 0x0b
    96ce:	9c 87       	std	Y+12, r25	; 0x0c
    96d0:	20 91 bd 0d 	lds	r18, 0x0DBD
    96d4:	22 0f       	add	r18, r18
    96d6:	22 0f       	add	r18, r18
    96d8:	22 0f       	add	r18, r18
    96da:	40 91 bc 0d 	lds	r20, 0x0DBC
    96de:	44 0f       	add	r20, r20
    96e0:	44 0f       	add	r20, r20
    96e2:	44 0f       	add	r20, r20
    96e4:	60 91 b1 0d 	lds	r22, 0x0DB1
    96e8:	70 91 b2 0d 	lds	r23, 0x0DB2
    96ec:	80 91 b3 0d 	lds	r24, 0x0DB3
    96f0:	90 91 b4 0d 	lds	r25, 0x0DB4
    96f4:	29 8b       	std	Y+17, r18	; 0x11
    96f6:	4a 8b       	std	Y+18, r20	; 0x12
    96f8:	0e 94 06 51 	call	0xa20c	; 0xa20c <__fixunssfsi>
    96fc:	6d 87       	std	Y+13, r22	; 0x0d
    96fe:	7e 87       	std	Y+14, r23	; 0x0e
    9700:	8f 87       	std	Y+15, r24	; 0x0f
    9702:	98 8b       	std	Y+16, r25	; 0x10
    9704:	60 91 ad 0d 	lds	r22, 0x0DAD
    9708:	70 91 ae 0d 	lds	r23, 0x0DAE
    970c:	80 91 af 0d 	lds	r24, 0x0DAF
    9710:	90 91 b0 0d 	lds	r25, 0x0DB0
    9714:	0e 94 06 51 	call	0xa20c	; 0xa20c <__fixunssfsi>
    9718:	dc 01       	movw	r26, r24
    971a:	cb 01       	movw	r24, r22
    971c:	28 e0       	ldi	r18, 0x08	; 8
    971e:	a2 2e       	mov	r10, r18
    9720:	38 e0       	ldi	r19, 0x08	; 8
    9722:	c3 2e       	mov	r12, r19
    9724:	ed 80       	ldd	r14, Y+5	; 0x05
    9726:	fe 80       	ldd	r15, Y+6	; 0x06
    9728:	09 85       	ldd	r16, Y+9	; 0x09
    972a:	1a 85       	ldd	r17, Y+10	; 0x0a
    972c:	29 89       	ldd	r18, Y+17	; 0x11
    972e:	4a 89       	ldd	r20, Y+18	; 0x12
    9730:	6d 85       	ldd	r22, Y+13	; 0x0d
    9732:	7e 85       	ldd	r23, Y+14	; 0x0e
    9734:	0e 94 bd 3b 	call	0x777a	; 0x777a <LBCollides>
    9738:	88 23       	and	r24, r24
    973a:	f1 f0       	breq	.+60     	; 0x9778 <animate_enemy_shots+0x1a2>
							game.enemies[i].shot[j].shared.x, game.enemies[i].shot[j].shared.y, 8, 8
						)
					)
					{
						SFX_HIT;
    973c:	41 e0       	ldi	r20, 0x01	; 1
    973e:	6f ef       	ldi	r22, 0xFF	; 255
    9740:	84 e0       	ldi	r24, 0x04	; 4
    9742:	0e 94 7d 2f 	call	0x5efa	; 0x5efa <TriggerFx>
						game.player.shield -= game.enemies[i].shot[j].hit_count;
    9746:	80 91 be 0d 	lds	r24, 0x0DBE
    974a:	f1 01       	movw	r30, r2
    974c:	31 97       	sbiw	r30, 0x01	; 1
    974e:	90 81       	ld	r25, Z
    9750:	89 1b       	sub	r24, r25
    9752:	80 93 be 0d 	sts	0x0DBE, r24
						if (game.player.shield <= 0)
    9756:	18 16       	cp	r1, r24
    9758:	44 f0       	brlt	.+16     	; 0x976a <animate_enemy_shots+0x194>
						{
							SFX_PLAYER_EXPLODE;
    975a:	41 e0       	ldi	r20, 0x01	; 1
    975c:	6f ef       	ldi	r22, 0xFF	; 255
    975e:	85 e0       	ldi	r24, 0x05	; 5
    9760:	0e 94 7d 2f 	call	0x5efa	; 0x5efa <TriggerFx>
							game.player.flags = EXPLODING;
    9764:	b0 e1       	ldi	r27, 0x10	; 16
    9766:	b0 93 b9 0d 	sts	0x0DB9, r27
						}
						game.enemies[i].shot[j].active = 0;
    976a:	f1 01       	movw	r30, r2
    976c:	10 82       	st	Z, r1
						LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
    976e:	01 e0       	ldi	r16, 0x01	; 1
    9770:	21 e0       	ldi	r18, 0x01	; 1
    9772:	40 e0       	ldi	r20, 0x00	; 0
    9774:	60 ee       	ldi	r22, 0xE0	; 224
    9776:	44 c0       	rjmp	.+136    	; 0x9800 <animate_enemy_shots+0x22a>
					}
					else
					{
						game.enemies[i].shot[j].shared.x += game.enemies[i].shot[j].shared.vx*FRAME_TIME;
    9778:	d4 01       	movw	r26, r8
    977a:	1c 96       	adiw	r26, 0x0c	; 12
    977c:	6d 91       	ld	r22, X+
    977e:	7c 91       	ld	r23, X
    9780:	1d 97       	sbiw	r26, 0x0d	; 13
    9782:	88 27       	eor	r24, r24
    9784:	77 fd       	sbrc	r23, 7
    9786:	80 95       	com	r24
    9788:	98 2f       	mov	r25, r24
    978a:	0e 94 34 51 	call	0xa268	; 0xa268 <__floatsisf>
    978e:	29 e8       	ldi	r18, 0x89	; 137
    9790:	38 e8       	ldi	r19, 0x88	; 136
    9792:	48 e8       	ldi	r20, 0x88	; 136
    9794:	5c e3       	ldi	r21, 0x3C	; 60
    9796:	0e 94 e8 51 	call	0xa3d0	; 0xa3d0 <__mulsf3>
    979a:	9b 01       	movw	r18, r22
    979c:	ac 01       	movw	r20, r24
    979e:	69 81       	ldd	r22, Y+1	; 0x01
    97a0:	7a 81       	ldd	r23, Y+2	; 0x02
    97a2:	8b 81       	ldd	r24, Y+3	; 0x03
    97a4:	9c 81       	ldd	r25, Y+4	; 0x04
    97a6:	0e 94 9e 50 	call	0xa13c	; 0xa13c <__addsf3>
    97aa:	6b 01       	movw	r12, r22
    97ac:	7c 01       	movw	r14, r24
    97ae:	f4 01       	movw	r30, r8
    97b0:	64 83       	std	Z+4, r22	; 0x04
    97b2:	75 83       	std	Z+5, r23	; 0x05
    97b4:	86 83       	std	Z+6, r24	; 0x06
    97b6:	97 83       	std	Z+7, r25	; 0x07
						LBMoveSprite(slot, game.enemies[i].shot[j].shared.x - game.camera_x, game.enemies[i].shot[j].shared.y - game.camera_y, 1, 1);
    97b8:	60 91 95 0d 	lds	r22, 0x0D95
    97bc:	70 91 96 0d 	lds	r23, 0x0D96
    97c0:	80 e0       	ldi	r24, 0x00	; 0
    97c2:	90 e0       	ldi	r25, 0x00	; 0
    97c4:	0e 94 32 51 	call	0xa264	; 0xa264 <__floatunsisf>
    97c8:	9b 01       	movw	r18, r22
    97ca:	ac 01       	movw	r20, r24
    97cc:	c3 01       	movw	r24, r6
    97ce:	b2 01       	movw	r22, r4
    97d0:	0e 94 9d 50 	call	0xa13a	; 0xa13a <__subsf3>
    97d4:	0e 94 06 51 	call	0xa20c	; 0xa20c <__fixunssfsi>
    97d8:	76 2e       	mov	r7, r22
    97da:	60 91 93 0d 	lds	r22, 0x0D93
    97de:	70 91 94 0d 	lds	r23, 0x0D94
    97e2:	80 e0       	ldi	r24, 0x00	; 0
    97e4:	90 e0       	ldi	r25, 0x00	; 0
    97e6:	0e 94 32 51 	call	0xa264	; 0xa264 <__floatunsisf>
    97ea:	9b 01       	movw	r18, r22
    97ec:	ac 01       	movw	r20, r24
    97ee:	c7 01       	movw	r24, r14
    97f0:	b6 01       	movw	r22, r12
    97f2:	0e 94 9d 50 	call	0xa13a	; 0xa13a <__subsf3>
    97f6:	0e 94 06 51 	call	0xa20c	; 0xa20c <__fixunssfsi>
    97fa:	01 e0       	ldi	r16, 0x01	; 1
    97fc:	21 e0       	ldi	r18, 0x01	; 1
    97fe:	47 2d       	mov	r20, r7
    9800:	8b 2d       	mov	r24, r11
    9802:	0e 94 44 3c 	call	0x7888	; 0x7888 <LBMoveSprite>
					}
				}
			}
			slot += 1;
    9806:	b3 94       	inc	r11
    9808:	f2 e4       	ldi	r31, 0x42	; 66
    980a:	2f 0e       	add	r2, r31
    980c:	31 1c       	adc	r3, r1
    980e:	82 e4       	ldi	r24, 0x42	; 66
    9810:	88 0e       	add	r8, r24
    9812:	91 1c       	adc	r9, r1

void animate_enemy_shots()
{
	u8 slot = ENEMY_SHOT_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    9814:	93 e1       	ldi	r25, 0x13	; 19
    9816:	b9 12       	cpse	r11, r25
    9818:	02 cf       	rjmp	.-508    	; 0x961e <animate_enemy_shots+0x48>
				}
			}
			slot += 1;
		}
	}
}
    981a:	62 96       	adiw	r28, 0x12	; 18
    981c:	0f b6       	in	r0, 0x3f	; 63
    981e:	f8 94       	cli
    9820:	de bf       	out	0x3e, r29	; 62
    9822:	0f be       	out	0x3f, r0	; 63
    9824:	cd bf       	out	0x3d, r28	; 61
    9826:	df 91       	pop	r29
    9828:	cf 91       	pop	r28
    982a:	1f 91       	pop	r17
    982c:	0f 91       	pop	r16
    982e:	ff 90       	pop	r15
    9830:	ef 90       	pop	r14
    9832:	df 90       	pop	r13
    9834:	cf 90       	pop	r12
    9836:	bf 90       	pop	r11
    9838:	af 90       	pop	r10
    983a:	9f 90       	pop	r9
    983c:	8f 90       	pop	r8
    983e:	7f 90       	pop	r7
    9840:	6f 90       	pop	r6
    9842:	5f 90       	pop	r5
    9844:	4f 90       	pop	r4
    9846:	3f 90       	pop	r3
    9848:	2f 90       	pop	r2
    984a:	08 95       	ret

0000984c <update_level>:

void update_level()
{
    984c:	cf 93       	push	r28
    984e:	df 93       	push	r29
	game.frame_counter++;
    9850:	80 91 a2 0d 	lds	r24, 0x0DA2
    9854:	8f 5f       	subi	r24, 0xFF	; 255
	if (game.frame_counter == 60)
    9856:	8c 33       	cpi	r24, 0x3C	; 60
    9858:	19 f0       	breq	.+6      	; 0x9860 <update_level+0x14>
	}
}

void update_level()
{
	game.frame_counter++;
    985a:	80 93 a2 0d 	sts	0x0DA2, r24
    985e:	0f c0       	rjmp	.+30     	; 0x987e <update_level+0x32>
	if (game.frame_counter == 60)
	{
		game.frame_counter = 0;
    9860:	10 92 a2 0d 	sts	0x0DA2, r1
		if (game.time != 65535) game.time++;
    9864:	80 91 99 0d 	lds	r24, 0x0D99
    9868:	90 91 9a 0d 	lds	r25, 0x0D9A
    986c:	8f 3f       	cpi	r24, 0xFF	; 255
    986e:	2f ef       	ldi	r18, 0xFF	; 255
    9870:	92 07       	cpc	r25, r18
    9872:	29 f0       	breq	.+10     	; 0x987e <update_level+0x32>
    9874:	01 96       	adiw	r24, 0x01	; 1
    9876:	90 93 9a 0d 	sts	0x0D9A, r25
    987a:	80 93 99 0d 	sts	0x0D99, r24
	}
	
	if (game.player.shared.vx > 0 &&
    987e:	80 91 b5 0d 	lds	r24, 0x0DB5
    9882:	90 91 b6 0d 	lds	r25, 0x0DB6
    9886:	18 16       	cp	r1, r24
    9888:	19 06       	cpc	r1, r25
    988a:	44 f5       	brge	.+80     	; 0x98dc <update_level+0x90>
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
    988c:	c0 91 93 0d 	lds	r28, 0x0D93
    9890:	d0 91 94 0d 	lds	r29, 0x0D94
    9894:	be 01       	movw	r22, r28
    9896:	80 e0       	ldi	r24, 0x00	; 0
    9898:	90 e0       	ldi	r25, 0x00	; 0
    989a:	0e 94 32 51 	call	0xa264	; 0xa264 <__floatunsisf>
    989e:	9b 01       	movw	r18, r22
    98a0:	ac 01       	movw	r20, r24
    98a2:	60 91 ad 0d 	lds	r22, 0x0DAD
    98a6:	70 91 ae 0d 	lds	r23, 0x0DAE
    98aa:	80 91 af 0d 	lds	r24, 0x0DAF
    98ae:	90 91 b0 0d 	lds	r25, 0x0DB0
    98b2:	0e 94 9d 50 	call	0xa13a	; 0xa13a <__subsf3>
	{
		game.frame_counter = 0;
		if (game.time != 65535) game.time++;
	}
	
	if (game.player.shared.vx > 0 &&
    98b6:	20 e0       	ldi	r18, 0x00	; 0
    98b8:	30 e0       	ldi	r19, 0x00	; 0
    98ba:	40 ee       	ldi	r20, 0xE0	; 224
    98bc:	52 e4       	ldi	r21, 0x42	; 66
    98be:	0e 94 e4 51 	call	0xa3c8	; 0xa3c8 <__gesf2>
    98c2:	87 fd       	sbrc	r24, 7
    98c4:	0b c0       	rjmp	.+22     	; 0x98dc <update_level+0x90>
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
		(game.camera_x/8 + CAMERA_WIDTH < LEVEL_WIDTH))
    98c6:	93 e0       	ldi	r25, 0x03	; 3
    98c8:	d6 95       	lsr	r29
    98ca:	c7 95       	ror	r28
    98cc:	9a 95       	dec	r25
    98ce:	e1 f7       	brne	.-8      	; 0x98c8 <update_level+0x7c>
    98d0:	6c 96       	adiw	r28, 0x1c	; 28
		game.frame_counter = 0;
		if (game.time != 65535) game.time++;
	}
	
	if (game.player.shared.vx > 0 &&
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
    98d2:	cf 3f       	cpi	r28, 0xFF	; 255
    98d4:	d1 05       	cpc	r29, r1
    98d6:	10 f4       	brcc	.+4      	; 0x98dc <update_level+0x90>
		(game.camera_x/8 + CAMERA_WIDTH < LEVEL_WIDTH))
	{
		move_camera_x();
    98d8:	0e 94 1e 40 	call	0x803c	; 0x803c <move_camera_x>
	}
	
	if (game.player.shared.vy > 0 &&
    98dc:	20 e0       	ldi	r18, 0x00	; 0
    98de:	30 e0       	ldi	r19, 0x00	; 0
    98e0:	a9 01       	movw	r20, r18
    98e2:	60 91 a9 0d 	lds	r22, 0x0DA9
    98e6:	70 91 aa 0d 	lds	r23, 0x0DAA
    98ea:	80 91 ab 0d 	lds	r24, 0x0DAB
    98ee:	90 91 ac 0d 	lds	r25, 0x0DAC
    98f2:	0e 94 e4 51 	call	0xa3c8	; 0xa3c8 <__gesf2>
    98f6:	18 16       	cp	r1, r24
    98f8:	74 f5       	brge	.+92     	; 0x9956 <update_level+0x10a>
	    (game.player.shared.y - game.camera_y + 24) >= ((CAMERA_HEIGHT - 2) * 8) &&
    98fa:	c0 91 95 0d 	lds	r28, 0x0D95
    98fe:	d0 91 96 0d 	lds	r29, 0x0D96
    9902:	be 01       	movw	r22, r28
    9904:	80 e0       	ldi	r24, 0x00	; 0
    9906:	90 e0       	ldi	r25, 0x00	; 0
    9908:	0e 94 32 51 	call	0xa264	; 0xa264 <__floatunsisf>
    990c:	9b 01       	movw	r18, r22
    990e:	ac 01       	movw	r20, r24
    9910:	60 91 b1 0d 	lds	r22, 0x0DB1
    9914:	70 91 b2 0d 	lds	r23, 0x0DB2
    9918:	80 91 b3 0d 	lds	r24, 0x0DB3
    991c:	90 91 b4 0d 	lds	r25, 0x0DB4
    9920:	0e 94 9d 50 	call	0xa13a	; 0xa13a <__subsf3>
    9924:	20 e0       	ldi	r18, 0x00	; 0
    9926:	30 e0       	ldi	r19, 0x00	; 0
    9928:	40 ec       	ldi	r20, 0xC0	; 192
    992a:	51 e4       	ldi	r21, 0x41	; 65
    992c:	0e 94 9e 50 	call	0xa13c	; 0xa13c <__addsf3>
		(game.camera_x/8 + CAMERA_WIDTH < LEVEL_WIDTH))
	{
		move_camera_x();
	}
	
	if (game.player.shared.vy > 0 &&
    9930:	20 e0       	ldi	r18, 0x00	; 0
    9932:	30 e0       	ldi	r19, 0x00	; 0
    9934:	40 e4       	ldi	r20, 0x40	; 64
    9936:	53 e4       	ldi	r21, 0x43	; 67
    9938:	0e 94 e4 51 	call	0xa3c8	; 0xa3c8 <__gesf2>
    993c:	87 fd       	sbrc	r24, 7
    993e:	0b c0       	rjmp	.+22     	; 0x9956 <update_level+0x10a>
	    (game.player.shared.y - game.camera_y + 24) >= ((CAMERA_HEIGHT - 2) * 8) &&
		(game.camera_y/8 + CAMERA_HEIGHT < LEVEL_HEIGHT))
    9940:	83 e0       	ldi	r24, 0x03	; 3
    9942:	d6 95       	lsr	r29
    9944:	c7 95       	ror	r28
    9946:	8a 95       	dec	r24
    9948:	e1 f7       	brne	.-8      	; 0x9942 <update_level+0xf6>
    994a:	6a 96       	adiw	r28, 0x1a	; 26
	{
		move_camera_x();
	}
	
	if (game.player.shared.vy > 0 &&
	    (game.player.shared.y - game.camera_y + 24) >= ((CAMERA_HEIGHT - 2) * 8) &&
    994c:	cf 3f       	cpi	r28, 0xFF	; 255
    994e:	d1 05       	cpc	r29, r1
    9950:	10 f4       	brcc	.+4      	; 0x9956 <update_level+0x10a>
		(game.camera_y/8 + CAMERA_HEIGHT < LEVEL_HEIGHT))
	{
		move_camera_y();
    9952:	0e 94 37 40 	call	0x806e	; 0x806e <move_camera_y>
	}
	
	// Score
	PrintByte(9, VRAM_TILES_V-1, game.lives ,true);
    9956:	21 e0       	ldi	r18, 0x01	; 1
    9958:	40 91 9d 0d 	lds	r20, 0x0D9D
    995c:	6f e1       	ldi	r22, 0x1F	; 31
    995e:	70 e0       	ldi	r23, 0x00	; 0
    9960:	89 e0       	ldi	r24, 0x09	; 9
    9962:	90 e0       	ldi	r25, 0x00	; 0
    9964:	0e 94 29 3a 	call	0x7452	; 0x7452 <PrintByte>
	PrintInt(27, VRAM_TILES_V-1, game.score ,true);
    9968:	40 91 97 0d 	lds	r20, 0x0D97
    996c:	50 91 98 0d 	lds	r21, 0x0D98
    9970:	21 e0       	ldi	r18, 0x01	; 1
    9972:	6f e1       	ldi	r22, 0x1F	; 31
    9974:	70 e0       	ldi	r23, 0x00	; 0
    9976:	8b e1       	ldi	r24, 0x1B	; 27
    9978:	90 e0       	ldi	r25, 0x00	; 0
    997a:	0e 94 5c 3a 	call	0x74b8	; 0x74b8 <PrintInt>
	PrintByte(9, VRAM_TILES_V-2, game.player.shield ,true);
    997e:	21 e0       	ldi	r18, 0x01	; 1
    9980:	40 91 be 0d 	lds	r20, 0x0DBE
    9984:	6e e1       	ldi	r22, 0x1E	; 30
    9986:	70 e0       	ldi	r23, 0x00	; 0
    9988:	89 e0       	ldi	r24, 0x09	; 9
    998a:	90 e0       	ldi	r25, 0x00	; 0
    998c:	0e 94 29 3a 	call	0x7452	; 0x7452 <PrintByte>
	PrintInt(27, VRAM_TILES_V-2, game.time ,true);
    9990:	40 91 99 0d 	lds	r20, 0x0D99
    9994:	50 91 9a 0d 	lds	r21, 0x0D9A
    9998:	21 e0       	ldi	r18, 0x01	; 1
    999a:	6e e1       	ldi	r22, 0x1E	; 30
    999c:	70 e0       	ldi	r23, 0x00	; 0
    999e:	8b e1       	ldi	r24, 0x1B	; 27
    99a0:	90 e0       	ldi	r25, 0x00	; 0
	
}
    99a2:	df 91       	pop	r29
    99a4:	cf 91       	pop	r28
	
	// Score
	PrintByte(9, VRAM_TILES_V-1, game.lives ,true);
	PrintInt(27, VRAM_TILES_V-1, game.score ,true);
	PrintByte(9, VRAM_TILES_V-2, game.player.shield ,true);
	PrintInt(27, VRAM_TILES_V-2, game.time ,true);
    99a6:	0c 94 5c 3a 	jmp	0x74b8	; 0x74b8 <PrintInt>

000099aa <clear_sprites>:
	
}

void clear_sprites(u8 from, u8 count)
{
    99aa:	ef 92       	push	r14
    99ac:	ff 92       	push	r15
    99ae:	0f 93       	push	r16
    99b0:	cf 93       	push	r28
	for(u8 i = from; i < from+count; i++)
    99b2:	c8 2f       	mov	r28, r24
    99b4:	e6 2e       	mov	r14, r22
    99b6:	f1 2c       	mov	r15, r1
    99b8:	e8 0e       	add	r14, r24
    99ba:	f1 1c       	adc	r15, r1
    99bc:	8c 2f       	mov	r24, r28
    99be:	90 e0       	ldi	r25, 0x00	; 0
    99c0:	8e 15       	cp	r24, r14
    99c2:	9f 05       	cpc	r25, r15
    99c4:	7c f4       	brge	.+30     	; 0x99e4 <clear_sprites+0x3a>
	{
		LBMapSprite(i, map_none, 0);
    99c6:	40 e0       	ldi	r20, 0x00	; 0
    99c8:	69 ef       	ldi	r22, 0xF9	; 249
    99ca:	73 e3       	ldi	r23, 0x33	; 51
    99cc:	8c 2f       	mov	r24, r28
    99ce:	0e 94 f2 3b 	call	0x77e4	; 0x77e4 <LBMapSprite>
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
    99d2:	01 e0       	ldi	r16, 0x01	; 1
    99d4:	21 e0       	ldi	r18, 0x01	; 1
    99d6:	40 e0       	ldi	r20, 0x00	; 0
    99d8:	60 ee       	ldi	r22, 0xE0	; 224
    99da:	8c 2f       	mov	r24, r28
    99dc:	0e 94 44 3c 	call	0x7888	; 0x7888 <LBMoveSprite>
	
}

void clear_sprites(u8 from, u8 count)
{
	for(u8 i = from; i < from+count; i++)
    99e0:	cf 5f       	subi	r28, 0xFF	; 255
    99e2:	ec cf       	rjmp	.-40     	; 0x99bc <clear_sprites+0x12>
	{
		LBMapSprite(i, map_none, 0);
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
	}
}
    99e4:	cf 91       	pop	r28
    99e6:	0f 91       	pop	r16
    99e8:	ff 90       	pop	r15
    99ea:	ef 90       	pop	r14
    99ec:	08 95       	ret

000099ee <level_transition>:
	Print(0, VRAM_TILES_V-2, (char*) strShield);
	Print(18, VRAM_TILES_V-2, (char*) strTime);
}

void level_transition(u8 index)
{
    99ee:	cf 93       	push	r28
    99f0:	c8 2f       	mov	r28, r24
	FadeOut(FRAMES_PER_FADE, true);
    99f2:	61 e0       	ldi	r22, 0x01	; 1
    99f4:	83 e0       	ldi	r24, 0x03	; 3
    99f6:	0e 94 17 3b 	call	0x762e	; 0x762e <FadeOut>
	ClearVram();
    99fa:	0e 94 fd 2b 	call	0x57fa	; 0x57fa <ClearVram>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    99fe:	64 e1       	ldi	r22, 0x14	; 20
    9a00:	80 e0       	ldi	r24, 0x00	; 0
    9a02:	0e 94 d5 4c 	call	0x99aa	; 0x99aa <clear_sprites>
	LBRotateSprites();
    9a06:	0e 94 82 3c 	call	0x7904	; 0x7904 <LBRotateSprites>
	init_player_state();
    9a0a:	0e 94 e4 3c 	call	0x79c8	; 0x79c8 <init_player_state>
	init_enemy_state();
    9a0e:	0e 94 d0 3c 	call	0x79a0	; 0x79a0 <init_enemy_state>
	Print(8, 12, (char*) strLevels+index*16);
    9a12:	80 e1       	ldi	r24, 0x10	; 16
    9a14:	c8 9f       	mul	r28, r24
    9a16:	a0 01       	movw	r20, r0
    9a18:	11 24       	eor	r1, r1
    9a1a:	45 5a       	subi	r20, 0xA5	; 165
    9a1c:	56 4f       	sbci	r21, 0xF6	; 246
    9a1e:	6c e0       	ldi	r22, 0x0C	; 12
    9a20:	70 e0       	ldi	r23, 0x00	; 0
    9a22:	88 e0       	ldi	r24, 0x08	; 8
    9a24:	90 e0       	ldi	r25, 0x00	; 0
    9a26:	0e 94 94 3a 	call	0x7528	; 0x7528 <Print>
	FadeIn(1, true);
    9a2a:	61 e0       	ldi	r22, 0x01	; 1
    9a2c:	81 e0       	ldi	r24, 0x01	; 1
    9a2e:	0e 94 0b 3b 	call	0x7616	; 0x7616 <FadeIn>
	StartSong(planetsong);
    9a32:	81 e7       	ldi	r24, 0x71	; 113
    9a34:	90 e1       	ldi	r25, 0x10	; 16
    9a36:	0e 94 92 2e 	call	0x5d24	; 0x5d24 <StartSong>
	LBWaitSeconds(TEXT_LINGER);
    9a3a:	83 e0       	ldi	r24, 0x03	; 3
    9a3c:	0e 94 e3 3b 	call	0x77c6	; 0x77c6 <LBWaitSeconds>
	FadeOut(1, true);
    9a40:	61 e0       	ldi	r22, 0x01	; 1
    9a42:	81 e0       	ldi	r24, 0x01	; 1
    9a44:	0e 94 17 3b 	call	0x762e	; 0x762e <FadeOut>
	ClearVram();
    9a48:	0e 94 fd 2b 	call	0x57fa	; 0x57fa <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    9a4c:	60 e0       	ldi	r22, 0x00	; 0
    9a4e:	83 e0       	ldi	r24, 0x03	; 3
    9a50:	0e 94 0b 3b 	call	0x7616	; 0x7616 <FadeIn>
	load_level(index);
    9a54:	8c 2f       	mov	r24, r28
}
    9a56:	cf 91       	pop	r28
	StartSong(planetsong);
	LBWaitSeconds(TEXT_LINGER);
	FadeOut(1, true);
	ClearVram();
	FadeIn(FRAMES_PER_FADE, false);
	load_level(index);
    9a58:	0c 94 52 40 	jmp	0x80a4	; 0x80a4 <load_level>

00009a5c <save_score>:
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    9a5c:	8f e6       	ldi	r24, 0x6F	; 111
    9a5e:	9d e0       	ldi	r25, 0x0D	; 13
    9a60:	0c 94 7a 2d 	jmp	0x5af4	; 0x5af4 <EepromWriteBlock>

00009a64 <load_splash>:
	load_splash();
}

void load_splash()
{
	Screen.scrollX = 0;
    9a64:	e9 e9       	ldi	r30, 0x99	; 153
    9a66:	fc e0       	ldi	r31, 0x0C	; 12
    9a68:	13 82       	std	Z+3, r1	; 0x03
	Screen.scrollY = 0;
    9a6a:	14 82       	std	Z+4, r1	; 0x04
	Screen.scrollHeight = 32;
    9a6c:	80 e2       	ldi	r24, 0x20	; 32
    9a6e:	85 83       	std	Z+5, r24	; 0x05
	Screen.overlayHeight = 0;
    9a70:	10 82       	st	Z, r1
	game.current_screen = SPLASH;
    9a72:	ef e8       	ldi	r30, 0x8F	; 143
    9a74:	fd e0       	ldi	r31, 0x0D	; 13
    9a76:	17 86       	std	Z+15, r1	; 0x0f
	game.selection = START_SELECTED;
    9a78:	12 8a       	std	Z+18, r1	; 0x12
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    9a7a:	64 e1       	ldi	r22, 0x14	; 20
    9a7c:	80 e0       	ldi	r24, 0x00	; 0
    9a7e:	0e 94 d5 4c 	call	0x99aa	; 0x99aa <clear_sprites>
	LBRotateSprites();
    9a82:	0e 94 82 3c 	call	0x7904	; 0x7904 <LBRotateSprites>
	Print(8, 15, (char*) str1Player);
    9a86:	46 eb       	ldi	r20, 0xB6	; 182
    9a88:	59 e0       	ldi	r21, 0x09	; 9
    9a8a:	6f e0       	ldi	r22, 0x0F	; 15
    9a8c:	70 e0       	ldi	r23, 0x00	; 0
    9a8e:	88 e0       	ldi	r24, 0x08	; 8
    9a90:	90 e0       	ldi	r25, 0x00	; 0
    9a92:	0e 94 94 3a 	call	0x7528	; 0x7528 <Print>
	Print(8, 16, (char*) strHighscores);
    9a96:	4a ea       	ldi	r20, 0xAA	; 170
    9a98:	59 e0       	ldi	r21, 0x09	; 9
    9a9a:	60 e1       	ldi	r22, 0x10	; 16
    9a9c:	70 e0       	ldi	r23, 0x00	; 0
    9a9e:	88 e0       	ldi	r24, 0x08	; 8
    9aa0:	90 e0       	ldi	r25, 0x00	; 0
    9aa2:	0e 94 94 3a 	call	0x7528	; 0x7528 <Print>
	Print(6, 21, (char*) strSelectHandle);
    9aa6:	49 e9       	ldi	r20, 0x99	; 153
    9aa8:	59 e0       	ldi	r21, 0x09	; 9
    9aaa:	65 e1       	ldi	r22, 0x15	; 21
    9aac:	70 e0       	ldi	r23, 0x00	; 0
    9aae:	86 e0       	ldi	r24, 0x06	; 6
    9ab0:	90 e0       	ldi	r25, 0x00	; 0
    9ab2:	0e 94 94 3a 	call	0x7528	; 0x7528 <Print>
	Print(4, 26, (char*) strCopyright);
    9ab6:	4c eb       	ldi	r20, 0xBC	; 188
    9ab8:	59 e0       	ldi	r21, 0x09	; 9
    9aba:	6a e1       	ldi	r22, 0x1A	; 26
    9abc:	70 e0       	ldi	r23, 0x00	; 0
    9abe:	84 e0       	ldi	r24, 0x04	; 4
    9ac0:	90 e0       	ldi	r25, 0x00	; 0
    9ac2:	0e 94 94 3a 	call	0x7528	; 0x7528 <Print>
	DrawMap2(6, 5, (const char*) map_splash);
    9ac6:	42 ee       	ldi	r20, 0xE2	; 226
    9ac8:	5c e4       	ldi	r21, 0x4C	; 76
    9aca:	65 e0       	ldi	r22, 0x05	; 5
    9acc:	86 e0       	ldi	r24, 0x06	; 6
    9ace:	0e 94 dc 39 	call	0x73b8	; 0x73b8 <DrawMap>
	LBMapSprite(0, map_right_arrow, 0);
    9ad2:	40 e0       	ldi	r20, 0x00	; 0
    9ad4:	66 ef       	ldi	r22, 0xF6	; 246
    9ad6:	73 e3       	ldi	r23, 0x33	; 51
    9ad8:	80 e0       	ldi	r24, 0x00	; 0
    9ada:	0c 94 f2 3b 	jmp	0x77e4	; 0x77e4 <LBMapSprite>

00009ade <exit_game>:
	save_eeprom(&scores);
}

void exit_game()
{
    save_score();
    9ade:	0e 94 2e 4d 	call	0x9a5c	; 0x9a5c <save_score>
	fade_through();
    9ae2:	0e 94 2e 3e 	call	0x7c5c	; 0x7c5c <fade_through>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    9ae6:	64 e1       	ldi	r22, 0x14	; 20
    9ae8:	80 e0       	ldi	r24, 0x00	; 0
    9aea:	0e 94 d5 4c 	call	0x99aa	; 0x99aa <clear_sprites>
	LBRotateSprites();
    9aee:	0e 94 82 3c 	call	0x7904	; 0x7904 <LBRotateSprites>
	init_game_state();
    9af2:	0e 94 c7 3c 	call	0x798e	; 0x798e <init_game_state>
	init_player_state();
    9af6:	0e 94 e4 3c 	call	0x79c8	; 0x79c8 <init_player_state>
	init_enemy_state();
    9afa:	0e 94 d0 3c 	call	0x79a0	; 0x79a0 <init_enemy_state>
	StopSong();
    9afe:	0e 94 bb 2e 	call	0x5d76	; 0x5d76 <StopSong>
	load_splash();
    9b02:	0c 94 32 4d 	jmp	0x9a64	; 0x9a64 <load_splash>

00009b06 <handle_player_death>:
	}
}

void handle_player_death()
{
	game.lives--;
    9b06:	80 91 9d 0d 	lds	r24, 0x0D9D
    9b0a:	81 50       	subi	r24, 0x01	; 1
    9b0c:	80 93 9d 0d 	sts	0x0D9D, r24
	clear_sprites(0, 6);
    9b10:	66 e0       	ldi	r22, 0x06	; 6
    9b12:	80 e0       	ldi	r24, 0x00	; 0
    9b14:	0e 94 d5 4c 	call	0x99aa	; 0x99aa <clear_sprites>
	LBRotateSprites();
    9b18:	0e 94 82 3c 	call	0x7904	; 0x7904 <LBRotateSprites>
	if (game.lives == 0)
    9b1c:	80 91 9d 0d 	lds	r24, 0x0D9D
    9b20:	81 11       	cpse	r24, r1
    9b22:	02 c0       	rjmp	.+4      	; 0x9b28 <handle_player_death+0x22>
	{
		exit_game();
    9b24:	0c 94 6f 4d 	jmp	0x9ade	; 0x9ade <exit_game>
		return;
	}
	FadeOut(FRAMES_PER_FADE, true);
    9b28:	61 e0       	ldi	r22, 0x01	; 1
    9b2a:	83 e0       	ldi	r24, 0x03	; 3
    9b2c:	0e 94 17 3b 	call	0x762e	; 0x762e <FadeOut>
	ClearVram();
    9b30:	0e 94 fd 2b 	call	0x57fa	; 0x57fa <ClearVram>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    9b34:	64 e1       	ldi	r22, 0x14	; 20
    9b36:	80 e0       	ldi	r24, 0x00	; 0
    9b38:	0e 94 d5 4c 	call	0x99aa	; 0x99aa <clear_sprites>
	LBRotateSprites();
    9b3c:	0e 94 82 3c 	call	0x7904	; 0x7904 <LBRotateSprites>
	init_player_state();
    9b40:	0e 94 e4 3c 	call	0x79c8	; 0x79c8 <init_player_state>
	init_enemy_state();
    9b44:	0e 94 d0 3c 	call	0x79a0	; 0x79a0 <init_enemy_state>
	FadeIn(FRAMES_PER_FADE, false);
    9b48:	60 e0       	ldi	r22, 0x00	; 0
    9b4a:	83 e0       	ldi	r24, 0x03	; 3
    9b4c:	0e 94 0b 3b 	call	0x7616	; 0x7616 <FadeIn>
	load_level(game.current_level);
    9b50:	80 91 9f 0d 	lds	r24, 0x0D9F
    9b54:	0c 94 52 40 	jmp	0x80a4	; 0x80a4 <load_level>

00009b58 <update_player>:
}

void update_player()
{
    9b58:	0f 93       	push	r16
    9b5a:	1f 93       	push	r17
    9b5c:	cf 93       	push	r28
    9b5e:	df 93       	push	r29
    9b60:	1f 92       	push	r1
    9b62:	cd b7       	in	r28, 0x3d	; 61
    9b64:	de b7       	in	r29, 0x3e	; 62
	
	if (game.player.flags & EXPLODING)
    9b66:	80 91 b9 0d 	lds	r24, 0x0DB9
    9b6a:	84 ff       	sbrs	r24, 4
    9b6c:	15 c0       	rjmp	.+42     	; 0x9b98 <update_player+0x40>
	{
		if (map_explosion(&game.player.flags, &game.player.expl, PLAYER_SLOT, game.player.width, game.player.height))
    9b6e:	00 91 bd 0d 	lds	r16, 0x0DBD
    9b72:	20 91 bc 0d 	lds	r18, 0x0DBC
    9b76:	40 e0       	ldi	r20, 0x00	; 0
    9b78:	6d e2       	ldi	r22, 0x2D	; 45
    9b7a:	7e e0       	ldi	r23, 0x0E	; 14
    9b7c:	89 eb       	ldi	r24, 0xB9	; 185
    9b7e:	9d e0       	ldi	r25, 0x0D	; 13
    9b80:	0e 94 45 47 	call	0x8e8a	; 0x8e8a <map_explosion>
    9b84:	88 23       	and	r24, r24
    9b86:	09 f4       	brne	.+2      	; 0x9b8a <update_player+0x32>
    9b88:	0c c2       	rjmp	.+1048   	; 0x9fa2 <update_player+0x44a>
		{
			game.player.direction = D_RIGHT;
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.prone), 0);
		}
	}
}
    9b8a:	0f 90       	pop	r0
    9b8c:	df 91       	pop	r29
    9b8e:	cf 91       	pop	r28
    9b90:	1f 91       	pop	r17
    9b92:	0f 91       	pop	r16
	
	if (game.player.flags & EXPLODING)
	{
		if (map_explosion(&game.player.flags, &game.player.expl, PLAYER_SLOT, game.player.width, game.player.height))
		{
			handle_player_death();
    9b94:	0c 94 83 4d 	jmp	0x9b06	; 0x9b06 <handle_player_death>
		}
	}
	else if (game.player.flags & (IDLE|RUNNING))
    9b98:	98 2f       	mov	r25, r24
    9b9a:	9a 70       	andi	r25, 0x0A	; 10
    9b9c:	09 f4       	brne	.+2      	; 0x9ba0 <update_player+0x48>
    9b9e:	f0 c0       	rjmp	.+480    	; 0x9d80 <update_player+0x228>
	{
		if (!on_solid_ground(&game.player.shared, game.player.width, game.player.height))
    9ba0:	40 91 bd 0d 	lds	r20, 0x0DBD
    9ba4:	60 91 bc 0d 	lds	r22, 0x0DBC
    9ba8:	89 ea       	ldi	r24, 0xA9	; 169
    9baa:	9d e0       	ldi	r25, 0x0D	; 13
    9bac:	0e 94 ec 40 	call	0x81d8	; 0x81d8 <on_solid_ground>
    9bb0:	81 11       	cpse	r24, r1
    9bb2:	07 c0       	rjmp	.+14     	; 0x9bc2 <update_player+0x6a>
		{
			game.player.shared.gravity = GRAVITY;
    9bb4:	8f ef       	ldi	r24, 0xFF	; 255
    9bb6:	80 93 b7 0d 	sts	0x0DB7, r24
			game.player.flags = JUMPING;
    9bba:	81 e0       	ldi	r24, 0x01	; 1
    9bbc:	80 93 b9 0d 	sts	0x0DB9, r24
    9bc0:	d6 c0       	rjmp	.+428    	; 0x9d6e <update_player+0x216>
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), extendedSprites[PLAYER_SLOT].flags);
		}
		else
		{
			if (game.joypadState.held & BTN_DOWN)
    9bc2:	10 91 83 0f 	lds	r17, 0x0F83
    9bc6:	15 ff       	sbrs	r17, 5
    9bc8:	46 c0       	rjmp	.+140    	; 0x9c56 <update_player+0xfe>
			{
				game.player.shared.y += 16;
    9bca:	20 e0       	ldi	r18, 0x00	; 0
    9bcc:	30 e0       	ldi	r19, 0x00	; 0
    9bce:	40 e8       	ldi	r20, 0x80	; 128
    9bd0:	51 e4       	ldi	r21, 0x41	; 65
    9bd2:	60 91 b1 0d 	lds	r22, 0x0DB1
    9bd6:	70 91 b2 0d 	lds	r23, 0x0DB2
    9bda:	80 91 b3 0d 	lds	r24, 0x0DB3
    9bde:	90 91 b4 0d 	lds	r25, 0x0DB4
    9be2:	0e 94 9e 50 	call	0xa13c	; 0xa13c <__addsf3>
    9be6:	60 93 b1 0d 	sts	0x0DB1, r22
    9bea:	70 93 b2 0d 	sts	0x0DB2, r23
    9bee:	80 93 b3 0d 	sts	0x0DB3, r24
    9bf2:	90 93 b4 0d 	sts	0x0DB4, r25
				if(game.player.direction == D_RIGHT)
    9bf6:	80 91 bb 0d 	lds	r24, 0x0DBB
    9bfa:	81 30       	cpi	r24, 0x01	; 1
    9bfc:	b1 f4       	brne	.+44     	; 0x9c2a <update_player+0xd2>
				{
					game.player.shared.x -= 8;
    9bfe:	20 e0       	ldi	r18, 0x00	; 0
    9c00:	30 e0       	ldi	r19, 0x00	; 0
    9c02:	40 e0       	ldi	r20, 0x00	; 0
    9c04:	51 e4       	ldi	r21, 0x41	; 65
    9c06:	60 91 ad 0d 	lds	r22, 0x0DAD
    9c0a:	70 91 ae 0d 	lds	r23, 0x0DAE
    9c0e:	80 91 af 0d 	lds	r24, 0x0DAF
    9c12:	90 91 b0 0d 	lds	r25, 0x0DB0
    9c16:	0e 94 9d 50 	call	0xa13a	; 0xa13a <__subsf3>
    9c1a:	60 93 ad 0d 	sts	0x0DAD, r22
    9c1e:	70 93 ae 0d 	sts	0x0DAE, r23
    9c22:	80 93 af 0d 	sts	0x0DAF, r24
    9c26:	90 93 b0 0d 	sts	0x0DB0, r25
				}
				game.player.shared.vx = 0;
    9c2a:	10 92 b6 0d 	sts	0x0DB6, r1
    9c2e:	10 92 b5 0d 	sts	0x0DB5, r1
				game.player.flags = PRONE;
    9c32:	84 e0       	ldi	r24, 0x04	; 4
    9c34:	80 93 b9 0d 	sts	0x0DB9, r24
				game.player.width = 3;
    9c38:	83 e0       	ldi	r24, 0x03	; 3
    9c3a:	80 93 bc 0d 	sts	0x0DBC, r24
				game.player.height = 1;
    9c3e:	81 e0       	ldi	r24, 0x01	; 1
    9c40:	80 93 bd 0d 	sts	0x0DBD, r24
				clear_sprites(3, 3);
    9c44:	63 e0       	ldi	r22, 0x03	; 3
    9c46:	83 e0       	ldi	r24, 0x03	; 3
    9c48:	0e 94 d5 4c 	call	0x99aa	; 0x99aa <clear_sprites>
				LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.prone), extendedSprites[PLAYER_SLOT].flags);
    9c4c:	40 91 8f 0f 	lds	r20, 0x0F8F
    9c50:	85 e2       	ldi	r24, 0x25	; 37
    9c52:	9e e0       	ldi	r25, 0x0E	; 14
    9c54:	64 c0       	rjmp	.+200    	; 0x9d1e <update_player+0x1c6>
			}
			else if ((game.joypadState.held & BTN_RIGHT) && (game.player.shared.x/8 + 2 < LEVEL_WIDTH))
    9c56:	17 ff       	sbrs	r17, 7
    9c58:	2e c0       	rjmp	.+92     	; 0x9cb6 <update_player+0x15e>
    9c5a:	20 e0       	ldi	r18, 0x00	; 0
    9c5c:	30 e0       	ldi	r19, 0x00	; 0
    9c5e:	40 e0       	ldi	r20, 0x00	; 0
    9c60:	5e e3       	ldi	r21, 0x3E	; 62
    9c62:	60 91 ad 0d 	lds	r22, 0x0DAD
    9c66:	70 91 ae 0d 	lds	r23, 0x0DAE
    9c6a:	80 91 af 0d 	lds	r24, 0x0DAF
    9c6e:	90 91 b0 0d 	lds	r25, 0x0DB0
    9c72:	0e 94 e8 51 	call	0xa3d0	; 0xa3d0 <__mulsf3>
    9c76:	20 e0       	ldi	r18, 0x00	; 0
    9c78:	30 e0       	ldi	r19, 0x00	; 0
    9c7a:	40 e0       	ldi	r20, 0x00	; 0
    9c7c:	50 e4       	ldi	r21, 0x40	; 64
    9c7e:	0e 94 9e 50 	call	0xa13c	; 0xa13c <__addsf3>
    9c82:	20 e0       	ldi	r18, 0x00	; 0
    9c84:	30 e0       	ldi	r19, 0x00	; 0
    9c86:	4f e7       	ldi	r20, 0x7F	; 127
    9c88:	53 e4       	ldi	r21, 0x43	; 67
    9c8a:	0e 94 02 51 	call	0xa204	; 0xa204 <__cmpsf2>
    9c8e:	87 ff       	sbrs	r24, 7
    9c90:	12 c0       	rjmp	.+36     	; 0x9cb6 <update_player+0x15e>
			{
				game.player.shared.vx = RUN_SPEED;
    9c92:	8c e3       	ldi	r24, 0x3C	; 60
    9c94:	90 e0       	ldi	r25, 0x00	; 0
    9c96:	90 93 b6 0d 	sts	0x0DB6, r25
    9c9a:	80 93 b5 0d 	sts	0x0DB5, r24
				game.player.flags = RUNNING;
    9c9e:	82 e0       	ldi	r24, 0x02	; 2
    9ca0:	80 93 b9 0d 	sts	0x0DB9, r24
				game.player.direction = D_RIGHT;
    9ca4:	81 e0       	ldi	r24, 0x01	; 1
    9ca6:	80 93 bb 0d 	sts	0x0DBB, r24
				LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.run), 0);
    9caa:	85 e1       	ldi	r24, 0x15	; 21
    9cac:	9e e0       	ldi	r25, 0x0E	; 14
    9cae:	0e 94 4c 3b 	call	0x7698	; 0x7698 <LBGetNextFrame>
    9cb2:	40 e0       	ldi	r20, 0x00	; 0
    9cb4:	38 c0       	rjmp	.+112    	; 0x9d26 <update_player+0x1ce>
			}
			else if ((game.joypadState.held & BTN_LEFT) && (game.player.shared.x > game.camera_x))
    9cb6:	16 ff       	sbrs	r17, 6
    9cb8:	27 c0       	rjmp	.+78     	; 0x9d08 <update_player+0x1b0>
    9cba:	60 91 93 0d 	lds	r22, 0x0D93
    9cbe:	70 91 94 0d 	lds	r23, 0x0D94
    9cc2:	80 e0       	ldi	r24, 0x00	; 0
    9cc4:	90 e0       	ldi	r25, 0x00	; 0
    9cc6:	0e 94 32 51 	call	0xa264	; 0xa264 <__floatunsisf>
    9cca:	9b 01       	movw	r18, r22
    9ccc:	ac 01       	movw	r20, r24
    9cce:	60 91 ad 0d 	lds	r22, 0x0DAD
    9cd2:	70 91 ae 0d 	lds	r23, 0x0DAE
    9cd6:	80 91 af 0d 	lds	r24, 0x0DAF
    9cda:	90 91 b0 0d 	lds	r25, 0x0DB0
    9cde:	0e 94 e4 51 	call	0xa3c8	; 0xa3c8 <__gesf2>
    9ce2:	18 16       	cp	r1, r24
    9ce4:	8c f4       	brge	.+34     	; 0x9d08 <update_player+0x1b0>
			{
				game.player.shared.vx = -RUN_SPEED;
    9ce6:	84 ec       	ldi	r24, 0xC4	; 196
    9ce8:	9f ef       	ldi	r25, 0xFF	; 255
    9cea:	90 93 b6 0d 	sts	0x0DB6, r25
    9cee:	80 93 b5 0d 	sts	0x0DB5, r24
				game.player.flags = RUNNING;
    9cf2:	82 e0       	ldi	r24, 0x02	; 2
    9cf4:	80 93 b9 0d 	sts	0x0DB9, r24
				game.player.direction = D_LEFT;
    9cf8:	10 92 bb 0d 	sts	0x0DBB, r1
				LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.run), SPRITE_FLIP_X);
    9cfc:	85 e1       	ldi	r24, 0x15	; 21
    9cfe:	9e e0       	ldi	r25, 0x0E	; 14
    9d00:	0e 94 4c 3b 	call	0x7698	; 0x7698 <LBGetNextFrame>
    9d04:	41 e0       	ldi	r20, 0x01	; 1
    9d06:	0f c0       	rjmp	.+30     	; 0x9d26 <update_player+0x1ce>
			}
			else
			{
				game.player.flags = IDLE;
    9d08:	88 e0       	ldi	r24, 0x08	; 8
    9d0a:	80 93 b9 0d 	sts	0x0DB9, r24
				game.player.shared.vx = 0;
    9d0e:	10 92 b6 0d 	sts	0x0DB6, r1
    9d12:	10 92 b5 0d 	sts	0x0DB5, r1
				LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.idle), extendedSprites[PLAYER_SLOT].flags);
    9d16:	40 91 8f 0f 	lds	r20, 0x0F8F
    9d1a:	8d e0       	ldi	r24, 0x0D	; 13
    9d1c:	9e e0       	ldi	r25, 0x0E	; 14
    9d1e:	49 83       	std	Y+1, r20	; 0x01
    9d20:	0e 94 4c 3b 	call	0x7698	; 0x7698 <LBGetNextFrame>
    9d24:	49 81       	ldd	r20, Y+1	; 0x01
    9d26:	bc 01       	movw	r22, r24
    9d28:	80 e0       	ldi	r24, 0x00	; 0
    9d2a:	0e 94 f2 3b 	call	0x77e4	; 0x77e4 <LBMapSprite>
			}
			if (game.joypadState.pressed & BTN_B && !(game.player.flags & PRONE))
    9d2e:	80 91 7f 0f 	lds	r24, 0x0F7F
    9d32:	80 ff       	sbrs	r24, 0
    9d34:	36 c1       	rjmp	.+620    	; 0x9fa2 <update_player+0x44a>
    9d36:	80 91 b9 0d 	lds	r24, 0x0DB9
    9d3a:	82 fd       	sbrc	r24, 2
    9d3c:	32 c1       	rjmp	.+612    	; 0x9fa2 <update_player+0x44a>
			{
				game.player.shared.vy = -JUMP_SPEED;
    9d3e:	80 e0       	ldi	r24, 0x00	; 0
    9d40:	90 e0       	ldi	r25, 0x00	; 0
    9d42:	a6 e1       	ldi	r26, 0x16	; 22
    9d44:	b3 ec       	ldi	r27, 0xC3	; 195
    9d46:	80 93 a9 0d 	sts	0x0DA9, r24
    9d4a:	90 93 aa 0d 	sts	0x0DAA, r25
    9d4e:	a0 93 ab 0d 	sts	0x0DAB, r26
    9d52:	b0 93 ac 0d 	sts	0x0DAC, r27
				game.player.shared.gravity = GRAVITY;
    9d56:	8f ef       	ldi	r24, 0xFF	; 255
    9d58:	80 93 b7 0d 	sts	0x0DB7, r24
				game.player.flags = JUMPING;
    9d5c:	81 e0       	ldi	r24, 0x01	; 1
    9d5e:	80 93 b9 0d 	sts	0x0DB9, r24
				game.player.width = 2;
    9d62:	82 e0       	ldi	r24, 0x02	; 2
    9d64:	80 93 bc 0d 	sts	0x0DBC, r24
				game.player.height = 3;
    9d68:	83 e0       	ldi	r24, 0x03	; 3
    9d6a:	80 93 bd 0d 	sts	0x0DBD, r24
				LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), extendedSprites[PLAYER_SLOT].flags);
    9d6e:	40 91 8f 0f 	lds	r20, 0x0F8F
    9d72:	8d e1       	ldi	r24, 0x1D	; 29
    9d74:	9e e0       	ldi	r25, 0x0E	; 14
    9d76:	49 83       	std	Y+1, r20	; 0x01
    9d78:	0e 94 4c 3b 	call	0x7698	; 0x7698 <LBGetNextFrame>
    9d7c:	49 81       	ldd	r20, Y+1	; 0x01
    9d7e:	08 c1       	rjmp	.+528    	; 0x9f90 <update_player+0x438>
			}
		}
	}
	else if (game.player.flags & JUMPING)
    9d80:	80 ff       	sbrs	r24, 0
    9d82:	6d c0       	rjmp	.+218    	; 0x9e5e <update_player+0x306>
	{
		if ((game.joypadState.held & BTN_RIGHT) && (game.player.shared.x/8 + 2 < LEVEL_WIDTH))
    9d84:	10 91 83 0f 	lds	r17, 0x0F83
    9d88:	17 ff       	sbrs	r17, 7
    9d8a:	2b c0       	rjmp	.+86     	; 0x9de2 <update_player+0x28a>
    9d8c:	20 e0       	ldi	r18, 0x00	; 0
    9d8e:	30 e0       	ldi	r19, 0x00	; 0
    9d90:	40 e0       	ldi	r20, 0x00	; 0
    9d92:	5e e3       	ldi	r21, 0x3E	; 62
    9d94:	60 91 ad 0d 	lds	r22, 0x0DAD
    9d98:	70 91 ae 0d 	lds	r23, 0x0DAE
    9d9c:	80 91 af 0d 	lds	r24, 0x0DAF
    9da0:	90 91 b0 0d 	lds	r25, 0x0DB0
    9da4:	0e 94 e8 51 	call	0xa3d0	; 0xa3d0 <__mulsf3>
    9da8:	20 e0       	ldi	r18, 0x00	; 0
    9daa:	30 e0       	ldi	r19, 0x00	; 0
    9dac:	40 e0       	ldi	r20, 0x00	; 0
    9dae:	50 e4       	ldi	r21, 0x40	; 64
    9db0:	0e 94 9e 50 	call	0xa13c	; 0xa13c <__addsf3>
    9db4:	20 e0       	ldi	r18, 0x00	; 0
    9db6:	30 e0       	ldi	r19, 0x00	; 0
    9db8:	4f e7       	ldi	r20, 0x7F	; 127
    9dba:	53 e4       	ldi	r21, 0x43	; 67
    9dbc:	0e 94 02 51 	call	0xa204	; 0xa204 <__cmpsf2>
    9dc0:	87 ff       	sbrs	r24, 7
    9dc2:	0f c0       	rjmp	.+30     	; 0x9de2 <update_player+0x28a>
		{
			game.player.shared.vx = RUN_SPEED;
    9dc4:	8c e3       	ldi	r24, 0x3C	; 60
    9dc6:	90 e0       	ldi	r25, 0x00	; 0
    9dc8:	90 93 b6 0d 	sts	0x0DB6, r25
    9dcc:	80 93 b5 0d 	sts	0x0DB5, r24
			game.player.direction = D_RIGHT;
    9dd0:	81 e0       	ldi	r24, 0x01	; 1
    9dd2:	80 93 bb 0d 	sts	0x0DBB, r24
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), 0);
    9dd6:	8d e1       	ldi	r24, 0x1D	; 29
    9dd8:	9e e0       	ldi	r25, 0x0E	; 14
    9dda:	0e 94 4c 3b 	call	0x7698	; 0x7698 <LBGetNextFrame>
    9dde:	40 e0       	ldi	r20, 0x00	; 0
    9de0:	32 c0       	rjmp	.+100    	; 0x9e46 <update_player+0x2ee>
		}
		else if ((game.joypadState.held & BTN_LEFT) && (game.player.shared.x > game.camera_x))
    9de2:	16 ff       	sbrs	r17, 6
    9de4:	24 c0       	rjmp	.+72     	; 0x9e2e <update_player+0x2d6>
    9de6:	60 91 93 0d 	lds	r22, 0x0D93
    9dea:	70 91 94 0d 	lds	r23, 0x0D94
    9dee:	80 e0       	ldi	r24, 0x00	; 0
    9df0:	90 e0       	ldi	r25, 0x00	; 0
    9df2:	0e 94 32 51 	call	0xa264	; 0xa264 <__floatunsisf>
    9df6:	9b 01       	movw	r18, r22
    9df8:	ac 01       	movw	r20, r24
    9dfa:	60 91 ad 0d 	lds	r22, 0x0DAD
    9dfe:	70 91 ae 0d 	lds	r23, 0x0DAE
    9e02:	80 91 af 0d 	lds	r24, 0x0DAF
    9e06:	90 91 b0 0d 	lds	r25, 0x0DB0
    9e0a:	0e 94 e4 51 	call	0xa3c8	; 0xa3c8 <__gesf2>
    9e0e:	18 16       	cp	r1, r24
    9e10:	74 f4       	brge	.+28     	; 0x9e2e <update_player+0x2d6>
		{
			game.player.shared.vx = -RUN_SPEED;
    9e12:	84 ec       	ldi	r24, 0xC4	; 196
    9e14:	9f ef       	ldi	r25, 0xFF	; 255
    9e16:	90 93 b6 0d 	sts	0x0DB6, r25
    9e1a:	80 93 b5 0d 	sts	0x0DB5, r24
			game.player.direction = D_LEFT;
    9e1e:	10 92 bb 0d 	sts	0x0DBB, r1
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), SPRITE_FLIP_X);
    9e22:	8d e1       	ldi	r24, 0x1D	; 29
    9e24:	9e e0       	ldi	r25, 0x0E	; 14
    9e26:	0e 94 4c 3b 	call	0x7698	; 0x7698 <LBGetNextFrame>
    9e2a:	41 e0       	ldi	r20, 0x01	; 1
    9e2c:	0c c0       	rjmp	.+24     	; 0x9e46 <update_player+0x2ee>
		}
		else
		{
			game.player.shared.vx = 0;
    9e2e:	10 92 b6 0d 	sts	0x0DB6, r1
    9e32:	10 92 b5 0d 	sts	0x0DB5, r1
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), extendedSprites[PLAYER_SLOT].flags);
    9e36:	40 91 8f 0f 	lds	r20, 0x0F8F
    9e3a:	8d e1       	ldi	r24, 0x1D	; 29
    9e3c:	9e e0       	ldi	r25, 0x0E	; 14
    9e3e:	49 83       	std	Y+1, r20	; 0x01
    9e40:	0e 94 4c 3b 	call	0x7698	; 0x7698 <LBGetNextFrame>
    9e44:	49 81       	ldd	r20, Y+1	; 0x01
    9e46:	bc 01       	movw	r22, r24
    9e48:	80 e0       	ldi	r24, 0x00	; 0
    9e4a:	0e 94 f2 3b 	call	0x77e4	; 0x77e4 <LBMapSprite>
		}
		
		if (game.player.shared.gravity == 0)
    9e4e:	80 91 b7 0d 	lds	r24, 0x0DB7
    9e52:	81 11       	cpse	r24, r1
    9e54:	a6 c0       	rjmp	.+332    	; 0x9fa2 <update_player+0x44a>
		{
			game.player.flags = IDLE;
    9e56:	88 e0       	ldi	r24, 0x08	; 8
    9e58:	80 93 b9 0d 	sts	0x0DB9, r24
    9e5c:	a2 c0       	rjmp	.+324    	; 0x9fa2 <update_player+0x44a>
		}
	}
	else if (game.player.flags & PRONE)
    9e5e:	82 ff       	sbrs	r24, 2
    9e60:	a0 c0       	rjmp	.+320    	; 0x9fa2 <update_player+0x44a>
	{
		if (game.joypadState.pressed & BTN_UP)
    9e62:	80 91 7f 0f 	lds	r24, 0x0F7F
    9e66:	84 ff       	sbrs	r24, 4
    9e68:	3a c0       	rjmp	.+116    	; 0x9ede <update_player+0x386>
		{
			game.player.flags = IDLE;	
    9e6a:	88 e0       	ldi	r24, 0x08	; 8
    9e6c:	80 93 b9 0d 	sts	0x0DB9, r24
			game.player.shared.y -= 16;
    9e70:	20 e0       	ldi	r18, 0x00	; 0
    9e72:	30 e0       	ldi	r19, 0x00	; 0
    9e74:	40 e8       	ldi	r20, 0x80	; 128
    9e76:	51 e4       	ldi	r21, 0x41	; 65
    9e78:	60 91 b1 0d 	lds	r22, 0x0DB1
    9e7c:	70 91 b2 0d 	lds	r23, 0x0DB2
    9e80:	80 91 b3 0d 	lds	r24, 0x0DB3
    9e84:	90 91 b4 0d 	lds	r25, 0x0DB4
    9e88:	0e 94 9d 50 	call	0xa13a	; 0xa13a <__subsf3>
    9e8c:	60 93 b1 0d 	sts	0x0DB1, r22
    9e90:	70 93 b2 0d 	sts	0x0DB2, r23
    9e94:	80 93 b3 0d 	sts	0x0DB3, r24
    9e98:	90 93 b4 0d 	sts	0x0DB4, r25
			if(game.player.direction == D_RIGHT)
    9e9c:	80 91 bb 0d 	lds	r24, 0x0DBB
    9ea0:	81 30       	cpi	r24, 0x01	; 1
    9ea2:	b1 f4       	brne	.+44     	; 0x9ed0 <update_player+0x378>
			{
				game.player.shared.x += 8;
    9ea4:	20 e0       	ldi	r18, 0x00	; 0
    9ea6:	30 e0       	ldi	r19, 0x00	; 0
    9ea8:	40 e0       	ldi	r20, 0x00	; 0
    9eaa:	51 e4       	ldi	r21, 0x41	; 65
    9eac:	60 91 ad 0d 	lds	r22, 0x0DAD
    9eb0:	70 91 ae 0d 	lds	r23, 0x0DAE
    9eb4:	80 91 af 0d 	lds	r24, 0x0DAF
    9eb8:	90 91 b0 0d 	lds	r25, 0x0DB0
    9ebc:	0e 94 9e 50 	call	0xa13c	; 0xa13c <__addsf3>
    9ec0:	60 93 ad 0d 	sts	0x0DAD, r22
    9ec4:	70 93 ae 0d 	sts	0x0DAE, r23
    9ec8:	80 93 af 0d 	sts	0x0DAF, r24
    9ecc:	90 93 b0 0d 	sts	0x0DB0, r25
			}
			game.player.width = 2;
    9ed0:	82 e0       	ldi	r24, 0x02	; 2
    9ed2:	80 93 bc 0d 	sts	0x0DBC, r24
			game.player.height = 3;
    9ed6:	83 e0       	ldi	r24, 0x03	; 3
    9ed8:	80 93 bd 0d 	sts	0x0DBD, r24
    9edc:	62 c0       	rjmp	.+196    	; 0x9fa2 <update_player+0x44a>
		}
		else if (game.joypadState.pressed & BTN_B)
    9ede:	80 ff       	sbrs	r24, 0
    9ee0:	43 c0       	rjmp	.+134    	; 0x9f68 <update_player+0x410>
		{
			game.player.flags = JUMPING;
    9ee2:	81 e0       	ldi	r24, 0x01	; 1
    9ee4:	80 93 b9 0d 	sts	0x0DB9, r24
			game.player.shared.y -= 16;
    9ee8:	20 e0       	ldi	r18, 0x00	; 0
    9eea:	30 e0       	ldi	r19, 0x00	; 0
    9eec:	40 e8       	ldi	r20, 0x80	; 128
    9eee:	51 e4       	ldi	r21, 0x41	; 65
    9ef0:	60 91 b1 0d 	lds	r22, 0x0DB1
    9ef4:	70 91 b2 0d 	lds	r23, 0x0DB2
    9ef8:	80 91 b3 0d 	lds	r24, 0x0DB3
    9efc:	90 91 b4 0d 	lds	r25, 0x0DB4
    9f00:	0e 94 9d 50 	call	0xa13a	; 0xa13a <__subsf3>
    9f04:	60 93 b1 0d 	sts	0x0DB1, r22
    9f08:	70 93 b2 0d 	sts	0x0DB2, r23
    9f0c:	80 93 b3 0d 	sts	0x0DB3, r24
    9f10:	90 93 b4 0d 	sts	0x0DB4, r25
			if(game.player.direction == D_RIGHT)
    9f14:	80 91 bb 0d 	lds	r24, 0x0DBB
    9f18:	81 30       	cpi	r24, 0x01	; 1
    9f1a:	b1 f4       	brne	.+44     	; 0x9f48 <update_player+0x3f0>
			{
				game.player.shared.x += 8;
    9f1c:	20 e0       	ldi	r18, 0x00	; 0
    9f1e:	30 e0       	ldi	r19, 0x00	; 0
    9f20:	40 e0       	ldi	r20, 0x00	; 0
    9f22:	51 e4       	ldi	r21, 0x41	; 65
    9f24:	60 91 ad 0d 	lds	r22, 0x0DAD
    9f28:	70 91 ae 0d 	lds	r23, 0x0DAE
    9f2c:	80 91 af 0d 	lds	r24, 0x0DAF
    9f30:	90 91 b0 0d 	lds	r25, 0x0DB0
    9f34:	0e 94 9e 50 	call	0xa13c	; 0xa13c <__addsf3>
    9f38:	60 93 ad 0d 	sts	0x0DAD, r22
    9f3c:	70 93 ae 0d 	sts	0x0DAE, r23
    9f40:	80 93 af 0d 	sts	0x0DAF, r24
    9f44:	90 93 b0 0d 	sts	0x0DB0, r25
			}
			game.player.shared.vy = -JUMP_SPEED;
    9f48:	80 e0       	ldi	r24, 0x00	; 0
    9f4a:	90 e0       	ldi	r25, 0x00	; 0
    9f4c:	a6 e1       	ldi	r26, 0x16	; 22
    9f4e:	b3 ec       	ldi	r27, 0xC3	; 195
    9f50:	80 93 a9 0d 	sts	0x0DA9, r24
    9f54:	90 93 aa 0d 	sts	0x0DAA, r25
    9f58:	a0 93 ab 0d 	sts	0x0DAB, r26
    9f5c:	b0 93 ac 0d 	sts	0x0DAC, r27
			game.player.shared.gravity = GRAVITY;
    9f60:	8f ef       	ldi	r24, 0xFF	; 255
    9f62:	80 93 b7 0d 	sts	0x0DB7, r24
    9f66:	fd ce       	rjmp	.-518    	; 0x9d62 <update_player+0x20a>
			game.player.width = 2;
			game.player.height = 3;
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), extendedSprites[PLAYER_SLOT].flags);
		}
		else if (game.joypadState.pressed & BTN_LEFT)
    9f68:	86 ff       	sbrs	r24, 6
    9f6a:	08 c0       	rjmp	.+16     	; 0x9f7c <update_player+0x424>
		{
			game.player.direction = D_LEFT;
    9f6c:	10 92 bb 0d 	sts	0x0DBB, r1
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.prone), SPRITE_FLIP_X);
    9f70:	85 e2       	ldi	r24, 0x25	; 37
    9f72:	9e e0       	ldi	r25, 0x0E	; 14
    9f74:	0e 94 4c 3b 	call	0x7698	; 0x7698 <LBGetNextFrame>
    9f78:	41 e0       	ldi	r20, 0x01	; 1
    9f7a:	0a c0       	rjmp	.+20     	; 0x9f90 <update_player+0x438>
		}
		else if (game.joypadState.pressed & BTN_RIGHT)
    9f7c:	87 ff       	sbrs	r24, 7
    9f7e:	11 c0       	rjmp	.+34     	; 0x9fa2 <update_player+0x44a>
		{
			game.player.direction = D_RIGHT;
    9f80:	81 e0       	ldi	r24, 0x01	; 1
    9f82:	80 93 bb 0d 	sts	0x0DBB, r24
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.prone), 0);
    9f86:	85 e2       	ldi	r24, 0x25	; 37
    9f88:	9e e0       	ldi	r25, 0x0E	; 14
    9f8a:	0e 94 4c 3b 	call	0x7698	; 0x7698 <LBGetNextFrame>
    9f8e:	40 e0       	ldi	r20, 0x00	; 0
    9f90:	bc 01       	movw	r22, r24
    9f92:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
}
    9f94:	0f 90       	pop	r0
    9f96:	df 91       	pop	r29
    9f98:	cf 91       	pop	r28
    9f9a:	1f 91       	pop	r17
    9f9c:	0f 91       	pop	r16
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.prone), SPRITE_FLIP_X);
		}
		else if (game.joypadState.pressed & BTN_RIGHT)
		{
			game.player.direction = D_RIGHT;
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.prone), 0);
    9f9e:	0c 94 f2 3b 	jmp	0x77e4	; 0x77e4 <LBMapSprite>
		}
	}
}
    9fa2:	0f 90       	pop	r0
    9fa4:	df 91       	pop	r29
    9fa6:	cf 91       	pop	r28
    9fa8:	1f 91       	pop	r17
    9faa:	0f 91       	pop	r16
    9fac:	08 95       	ret

00009fae <select_pressed>:
	DrawMap2(6, 5, (const char*) map_splash);
	LBMapSprite(0, map_right_arrow, 0);
}

char select_pressed(JoyPadState* p)
{
    9fae:	fc 01       	movw	r30, r24
    9fb0:	20 81       	ld	r18, Z
    9fb2:	31 81       	ldd	r19, Z+1	; 0x01
    9fb4:	28 70       	andi	r18, 0x08	; 8
    9fb6:	31 70       	andi	r19, 0x01	; 1
	return (p->pressed & BTN_A) || (p->pressed & BTN_START);
    9fb8:	81 e0       	ldi	r24, 0x01	; 1
    9fba:	23 2b       	or	r18, r19
    9fbc:	09 f4       	brne	.+2      	; 0x9fc0 <select_pressed+0x12>
    9fbe:	80 e0       	ldi	r24, 0x00	; 0
}
    9fc0:	08 95       	ret

00009fc2 <update_splash>:

void update_splash()
{
    9fc2:	0f 93       	push	r16
    9fc4:	cf 93       	push	r28
	if (game.joypadState.pressed & BTN_DOWN && game.selection == START_SELECTED)
    9fc6:	80 91 7f 0f 	lds	r24, 0x0F7F
    9fca:	c0 91 a1 0d 	lds	r28, 0x0DA1
    9fce:	85 ff       	sbrs	r24, 5
    9fd0:	06 c0       	rjmp	.+12     	; 0x9fde <update_splash+0x1c>
    9fd2:	c1 11       	cpse	r28, r1
    9fd4:	04 c0       	rjmp	.+8      	; 0x9fde <update_splash+0x1c>
	{
		game.selection = HIGH_SCORES_SELECTED;
    9fd6:	81 e0       	ldi	r24, 0x01	; 1
    9fd8:	80 93 a1 0d 	sts	0x0DA1, r24
    9fdc:	06 c0       	rjmp	.+12     	; 0x9fea <update_splash+0x28>
		SFX_NAVIGATE;
	}
	else if (game.joypadState.pressed & BTN_UP && game.selection == HIGH_SCORES_SELECTED)
    9fde:	84 ff       	sbrs	r24, 4
    9fe0:	0a c0       	rjmp	.+20     	; 0x9ff6 <update_splash+0x34>
    9fe2:	c1 30       	cpi	r28, 0x01	; 1
    9fe4:	41 f4       	brne	.+16     	; 0x9ff6 <update_splash+0x34>
	{
		game.selection = START_SELECTED;
    9fe6:	10 92 a1 0d 	sts	0x0DA1, r1
		SFX_NAVIGATE;
    9fea:	41 e0       	ldi	r20, 0x01	; 1
    9fec:	6f ef       	ldi	r22, 0xFF	; 255
    9fee:	82 e0       	ldi	r24, 0x02	; 2
    9ff0:	0e 94 7d 2f 	call	0x5efa	; 0x5efa <TriggerFx>
    9ff4:	14 c0       	rjmp	.+40     	; 0xa01e <update_splash+0x5c>
	}
	else if (select_pressed(&game.joypadState) && game.selection == START_SELECTED)
    9ff6:	8f e7       	ldi	r24, 0x7F	; 127
    9ff8:	9f e0       	ldi	r25, 0x0F	; 15
    9ffa:	0e 94 d7 4f 	call	0x9fae	; 0x9fae <select_pressed>
    9ffe:	88 23       	and	r24, r24
    a000:	71 f0       	breq	.+28     	; 0xa01e <update_splash+0x5c>
    a002:	c1 11       	cpse	r28, r1
    a004:	0c c0       	rjmp	.+24     	; 0xa01e <update_splash+0x5c>
	{
		game.current_screen = LEVEL;
    a006:	82 e0       	ldi	r24, 0x02	; 2
    a008:	80 93 9e 0d 	sts	0x0D9E, r24
		SFX_NAVIGATE;
    a00c:	41 e0       	ldi	r20, 0x01	; 1
    a00e:	6f ef       	ldi	r22, 0xFF	; 255
    a010:	0e 94 7d 2f 	call	0x5efa	; 0x5efa <TriggerFx>
		level_transition(0);
    a014:	80 e0       	ldi	r24, 0x00	; 0
	}
	else
	{
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
	}
}
    a016:	cf 91       	pop	r28
    a018:	0f 91       	pop	r16
	}
	else if (select_pressed(&game.joypadState) && game.selection == START_SELECTED)
	{
		game.current_screen = LEVEL;
		SFX_NAVIGATE;
		level_transition(0);
    a01a:	0c 94 f7 4c 	jmp	0x99ee	; 0x99ee <level_transition>
		return;
	}
	
	if (game.selection == START_SELECTED)
    a01e:	80 91 a1 0d 	lds	r24, 0x0DA1
	{
		LBMoveSprite(0, 7*8, 15*8, 1, 1);
    a022:	01 e0       	ldi	r16, 0x01	; 1
    a024:	21 e0       	ldi	r18, 0x01	; 1
		SFX_NAVIGATE;
		level_transition(0);
		return;
	}
	
	if (game.selection == START_SELECTED)
    a026:	81 11       	cpse	r24, r1
    a028:	03 c0       	rjmp	.+6      	; 0xa030 <update_splash+0x6e>
	{
		LBMoveSprite(0, 7*8, 15*8, 1, 1);
    a02a:	48 e7       	ldi	r20, 0x78	; 120
    a02c:	68 e3       	ldi	r22, 0x38	; 56
    a02e:	03 c0       	rjmp	.+6      	; 0xa036 <update_splash+0x74>
	}
	else
	{
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
    a030:	40 e8       	ldi	r20, 0x80	; 128
    a032:	68 e3       	ldi	r22, 0x38	; 56
    a034:	80 e0       	ldi	r24, 0x00	; 0
    a036:	0e 94 44 3c 	call	0x7888	; 0x7888 <LBMoveSprite>
	}
}
    a03a:	cf 91       	pop	r28
    a03c:	0f 91       	pop	r16
    a03e:	08 95       	ret

0000a040 <main>:

int main()
{
	// Initialize
	InitMusicPlayer(my_patches);
    a040:	83 e4       	ldi	r24, 0x43	; 67
    a042:	9b e1       	ldi	r25, 0x1B	; 27
    a044:	0e 94 70 2e 	call	0x5ce0	; 0x5ce0 <InitMusicPlayer>
	ClearVram();
    a048:	0e 94 fd 2b 	call	0x57fa	; 0x57fa <ClearVram>
	SetMasterVolume(0x05);
    a04c:	85 e0       	ldi	r24, 0x05	; 5
    a04e:	0e 94 24 32 	call	0x6448	; 0x6448 <SetMasterVolume>
	SetTileTable(tiles_data);
    a052:	8c ef       	ldi	r24, 0xFC	; 252
    a054:	93 e3       	ldi	r25, 0x33	; 51
    a056:	0e 94 1f 2c 	call	0x583e	; 0x583e <SetTileTable>
	SetSpritesTileTable(sprites_data);
    a05a:	8c e8       	ldi	r24, 0x8C	; 140
    a05c:	96 e2       	ldi	r25, 0x26	; 38
    a05e:	0e 94 f8 2b 	call	0x57f0	; 0x57f0 <SetSpritesTileTable>
	SetFontTilesIndex(TILES_DATA_SIZE);
    a062:	83 e2       	ldi	r24, 0x23	; 35
    a064:	0e 94 1c 2c 	call	0x5838	; 0x5838 <SetFontTilesIndex>
	FadeIn(FRAMES_PER_FADE, false);
    a068:	60 e0       	ldi	r22, 0x00	; 0
    a06a:	83 e0       	ldi	r24, 0x03	; 3
    a06c:	0e 94 0b 3b 	call	0x7616	; 0x7616 <FadeIn>
	init_game_state();
    a070:	0e 94 c7 3c 	call	0x798e	; 0x798e <init_game_state>
	load_splash();
    a074:	0e 94 32 4d 	call	0x9a64	; 0x9a64 <load_splash>
	while (1)
	{
		WaitVsync(1);
    a078:	81 e0       	ldi	r24, 0x01	; 1
    a07a:	90 e0       	ldi	r25, 0x00	; 0
    a07c:	0e 94 af 3a 	call	0x755e	; 0x755e <WaitVsync>
		LBGetJoyPadState(&game.joypadState, 0);
    a080:	60 e0       	ldi	r22, 0x00	; 0
    a082:	8f e7       	ldi	r24, 0x7F	; 127
    a084:	9f e0       	ldi	r25, 0x0F	; 15
    a086:	0e 94 72 3b 	call	0x76e4	; 0x76e4 <LBGetJoyPadState>
		switch (game.current_screen)
    a08a:	80 91 9e 0d 	lds	r24, 0x0D9E
    a08e:	88 23       	and	r24, r24
    a090:	a9 f0       	breq	.+42     	; 0xa0bc <main+0x7c>
    a092:	82 30       	cpi	r24, 0x02	; 2
    a094:	89 f7       	brne	.-30     	; 0xa078 <main+0x38>
			case SPLASH:
				update_splash();
				LBRotateSprites();
				break;
			case LEVEL:
				update_level();
    a096:	0e 94 26 4c 	call	0x984c	; 0x984c <update_level>
				update_player();
    a09a:	0e 94 ac 4d 	call	0x9b58	; 0x9b58 <update_player>
				update_shot();
    a09e:	0e 94 c9 41 	call	0x8392	; 0x8392 <update_shot>
				update_enemies();
    a0a2:	0e 94 d1 48 	call	0x91a2	; 0x91a2 <update_enemies>
				update_enemy_shots();
    a0a6:	0e 94 0e 49 	call	0x921c	; 0x921c <update_enemy_shots>
				animate_player();
    a0aa:	0e 94 31 48 	call	0x9062	; 0x9062 <animate_player>
				animate_shot();
    a0ae:	0e 94 ad 45 	call	0x8b5a	; 0x8b5a <animate_shot>
				animate_enemies();
    a0b2:	0e 94 a8 49 	call	0x9350	; 0x9350 <animate_enemies>
				animate_enemy_shots();
    a0b6:	0e 94 eb 4a 	call	0x95d6	; 0x95d6 <animate_enemy_shots>
    a0ba:	02 c0       	rjmp	.+4      	; 0xa0c0 <main+0x80>
		WaitVsync(1);
		LBGetJoyPadState(&game.joypadState, 0);
		switch (game.current_screen)
		{
			case SPLASH:
				update_splash();
    a0bc:	0e 94 e1 4f 	call	0x9fc2	; 0x9fc2 <update_splash>
				update_enemy_shots();
				animate_player();
				animate_shot();
				animate_enemies();
				animate_enemy_shots();
				LBRotateSprites();
    a0c0:	0e 94 82 3c 	call	0x7904	; 0x7904 <LBRotateSprites>
				break;
    a0c4:	d9 cf       	rjmp	.-78     	; 0xa078 <main+0x38>

0000a0c6 <__udivmodqi4>:
    a0c6:	99 1b       	sub	r25, r25
    a0c8:	79 e0       	ldi	r23, 0x09	; 9
    a0ca:	04 c0       	rjmp	.+8      	; 0xa0d4 <__udivmodqi4_ep>

0000a0cc <__udivmodqi4_loop>:
    a0cc:	99 1f       	adc	r25, r25
    a0ce:	96 17       	cp	r25, r22
    a0d0:	08 f0       	brcs	.+2      	; 0xa0d4 <__udivmodqi4_ep>
    a0d2:	96 1b       	sub	r25, r22

0000a0d4 <__udivmodqi4_ep>:
    a0d4:	88 1f       	adc	r24, r24
    a0d6:	7a 95       	dec	r23
    a0d8:	c9 f7       	brne	.-14     	; 0xa0cc <__udivmodqi4_loop>
    a0da:	80 95       	com	r24
    a0dc:	08 95       	ret

0000a0de <__udivmodhi4>:
    a0de:	aa 1b       	sub	r26, r26
    a0e0:	bb 1b       	sub	r27, r27
    a0e2:	51 e1       	ldi	r21, 0x11	; 17
    a0e4:	07 c0       	rjmp	.+14     	; 0xa0f4 <__udivmodhi4_ep>

0000a0e6 <__udivmodhi4_loop>:
    a0e6:	aa 1f       	adc	r26, r26
    a0e8:	bb 1f       	adc	r27, r27
    a0ea:	a6 17       	cp	r26, r22
    a0ec:	b7 07       	cpc	r27, r23
    a0ee:	10 f0       	brcs	.+4      	; 0xa0f4 <__udivmodhi4_ep>
    a0f0:	a6 1b       	sub	r26, r22
    a0f2:	b7 0b       	sbc	r27, r23

0000a0f4 <__udivmodhi4_ep>:
    a0f4:	88 1f       	adc	r24, r24
    a0f6:	99 1f       	adc	r25, r25
    a0f8:	5a 95       	dec	r21
    a0fa:	a9 f7       	brne	.-22     	; 0xa0e6 <__udivmodhi4_loop>
    a0fc:	80 95       	com	r24
    a0fe:	90 95       	com	r25
    a100:	bc 01       	movw	r22, r24
    a102:	cd 01       	movw	r24, r26
    a104:	08 95       	ret

0000a106 <__divmodhi4>:
    a106:	97 fb       	bst	r25, 7
    a108:	07 2e       	mov	r0, r23
    a10a:	16 f4       	brtc	.+4      	; 0xa110 <__divmodhi4+0xa>
    a10c:	00 94       	com	r0
    a10e:	07 d0       	rcall	.+14     	; 0xa11e <__divmodhi4_neg1>
    a110:	77 fd       	sbrc	r23, 7
    a112:	09 d0       	rcall	.+18     	; 0xa126 <__divmodhi4_neg2>
    a114:	0e 94 6f 50 	call	0xa0de	; 0xa0de <__udivmodhi4>
    a118:	07 fc       	sbrc	r0, 7
    a11a:	05 d0       	rcall	.+10     	; 0xa126 <__divmodhi4_neg2>
    a11c:	3e f4       	brtc	.+14     	; 0xa12c <__divmodhi4_exit>

0000a11e <__divmodhi4_neg1>:
    a11e:	90 95       	com	r25
    a120:	81 95       	neg	r24
    a122:	9f 4f       	sbci	r25, 0xFF	; 255
    a124:	08 95       	ret

0000a126 <__divmodhi4_neg2>:
    a126:	70 95       	com	r23
    a128:	61 95       	neg	r22
    a12a:	7f 4f       	sbci	r23, 0xFF	; 255

0000a12c <__divmodhi4_exit>:
    a12c:	08 95       	ret

0000a12e <__tablejump2__>:
    a12e:	ee 0f       	add	r30, r30
    a130:	ff 1f       	adc	r31, r31
    a132:	05 90       	lpm	r0, Z+
    a134:	f4 91       	lpm	r31, Z
    a136:	e0 2d       	mov	r30, r0
    a138:	09 94       	ijmp

0000a13a <__subsf3>:
    a13a:	50 58       	subi	r21, 0x80	; 128

0000a13c <__addsf3>:
    a13c:	bb 27       	eor	r27, r27
    a13e:	aa 27       	eor	r26, r26
    a140:	0e d0       	rcall	.+28     	; 0xa15e <__addsf3x>
    a142:	08 c1       	rjmp	.+528    	; 0xa354 <__fp_round>
    a144:	f9 d0       	rcall	.+498    	; 0xa338 <__fp_pscA>
    a146:	30 f0       	brcs	.+12     	; 0xa154 <__addsf3+0x18>
    a148:	fe d0       	rcall	.+508    	; 0xa346 <__fp_pscB>
    a14a:	20 f0       	brcs	.+8      	; 0xa154 <__addsf3+0x18>
    a14c:	31 f4       	brne	.+12     	; 0xa15a <__addsf3+0x1e>
    a14e:	9f 3f       	cpi	r25, 0xFF	; 255
    a150:	11 f4       	brne	.+4      	; 0xa156 <__addsf3+0x1a>
    a152:	1e f4       	brtc	.+6      	; 0xa15a <__addsf3+0x1e>
    a154:	ee c0       	rjmp	.+476    	; 0xa332 <__fp_nan>
    a156:	0e f4       	brtc	.+2      	; 0xa15a <__addsf3+0x1e>
    a158:	e0 95       	com	r30
    a15a:	e7 fb       	bst	r30, 7
    a15c:	e4 c0       	rjmp	.+456    	; 0xa326 <__fp_inf>

0000a15e <__addsf3x>:
    a15e:	e9 2f       	mov	r30, r25
    a160:	0a d1       	rcall	.+532    	; 0xa376 <__fp_split3>
    a162:	80 f3       	brcs	.-32     	; 0xa144 <__addsf3+0x8>
    a164:	ba 17       	cp	r27, r26
    a166:	62 07       	cpc	r22, r18
    a168:	73 07       	cpc	r23, r19
    a16a:	84 07       	cpc	r24, r20
    a16c:	95 07       	cpc	r25, r21
    a16e:	18 f0       	brcs	.+6      	; 0xa176 <__addsf3x+0x18>
    a170:	71 f4       	brne	.+28     	; 0xa18e <__addsf3x+0x30>
    a172:	9e f5       	brtc	.+102    	; 0xa1da <__addsf3x+0x7c>
    a174:	22 c1       	rjmp	.+580    	; 0xa3ba <__fp_zero>
    a176:	0e f4       	brtc	.+2      	; 0xa17a <__addsf3x+0x1c>
    a178:	e0 95       	com	r30
    a17a:	0b 2e       	mov	r0, r27
    a17c:	ba 2f       	mov	r27, r26
    a17e:	a0 2d       	mov	r26, r0
    a180:	0b 01       	movw	r0, r22
    a182:	b9 01       	movw	r22, r18
    a184:	90 01       	movw	r18, r0
    a186:	0c 01       	movw	r0, r24
    a188:	ca 01       	movw	r24, r20
    a18a:	a0 01       	movw	r20, r0
    a18c:	11 24       	eor	r1, r1
    a18e:	ff 27       	eor	r31, r31
    a190:	59 1b       	sub	r21, r25
    a192:	99 f0       	breq	.+38     	; 0xa1ba <__addsf3x+0x5c>
    a194:	59 3f       	cpi	r21, 0xF9	; 249
    a196:	50 f4       	brcc	.+20     	; 0xa1ac <__addsf3x+0x4e>
    a198:	50 3e       	cpi	r21, 0xE0	; 224
    a19a:	68 f1       	brcs	.+90     	; 0xa1f6 <__addsf3x+0x98>
    a19c:	1a 16       	cp	r1, r26
    a19e:	f0 40       	sbci	r31, 0x00	; 0
    a1a0:	a2 2f       	mov	r26, r18
    a1a2:	23 2f       	mov	r18, r19
    a1a4:	34 2f       	mov	r19, r20
    a1a6:	44 27       	eor	r20, r20
    a1a8:	58 5f       	subi	r21, 0xF8	; 248
    a1aa:	f3 cf       	rjmp	.-26     	; 0xa192 <__addsf3x+0x34>
    a1ac:	46 95       	lsr	r20
    a1ae:	37 95       	ror	r19
    a1b0:	27 95       	ror	r18
    a1b2:	a7 95       	ror	r26
    a1b4:	f0 40       	sbci	r31, 0x00	; 0
    a1b6:	53 95       	inc	r21
    a1b8:	c9 f7       	brne	.-14     	; 0xa1ac <__addsf3x+0x4e>
    a1ba:	7e f4       	brtc	.+30     	; 0xa1da <__addsf3x+0x7c>
    a1bc:	1f 16       	cp	r1, r31
    a1be:	ba 0b       	sbc	r27, r26
    a1c0:	62 0b       	sbc	r22, r18
    a1c2:	73 0b       	sbc	r23, r19
    a1c4:	84 0b       	sbc	r24, r20
    a1c6:	ba f0       	brmi	.+46     	; 0xa1f6 <__addsf3x+0x98>
    a1c8:	91 50       	subi	r25, 0x01	; 1
    a1ca:	a1 f0       	breq	.+40     	; 0xa1f4 <__addsf3x+0x96>
    a1cc:	ff 0f       	add	r31, r31
    a1ce:	bb 1f       	adc	r27, r27
    a1d0:	66 1f       	adc	r22, r22
    a1d2:	77 1f       	adc	r23, r23
    a1d4:	88 1f       	adc	r24, r24
    a1d6:	c2 f7       	brpl	.-16     	; 0xa1c8 <__addsf3x+0x6a>
    a1d8:	0e c0       	rjmp	.+28     	; 0xa1f6 <__addsf3x+0x98>
    a1da:	ba 0f       	add	r27, r26
    a1dc:	62 1f       	adc	r22, r18
    a1de:	73 1f       	adc	r23, r19
    a1e0:	84 1f       	adc	r24, r20
    a1e2:	48 f4       	brcc	.+18     	; 0xa1f6 <__addsf3x+0x98>
    a1e4:	87 95       	ror	r24
    a1e6:	77 95       	ror	r23
    a1e8:	67 95       	ror	r22
    a1ea:	b7 95       	ror	r27
    a1ec:	f7 95       	ror	r31
    a1ee:	9e 3f       	cpi	r25, 0xFE	; 254
    a1f0:	08 f0       	brcs	.+2      	; 0xa1f4 <__addsf3x+0x96>
    a1f2:	b3 cf       	rjmp	.-154    	; 0xa15a <__addsf3+0x1e>
    a1f4:	93 95       	inc	r25
    a1f6:	88 0f       	add	r24, r24
    a1f8:	08 f0       	brcs	.+2      	; 0xa1fc <__addsf3x+0x9e>
    a1fa:	99 27       	eor	r25, r25
    a1fc:	ee 0f       	add	r30, r30
    a1fe:	97 95       	ror	r25
    a200:	87 95       	ror	r24
    a202:	08 95       	ret

0000a204 <__cmpsf2>:
    a204:	6c d0       	rcall	.+216    	; 0xa2de <__fp_cmp>
    a206:	08 f4       	brcc	.+2      	; 0xa20a <__cmpsf2+0x6>
    a208:	81 e0       	ldi	r24, 0x01	; 1
    a20a:	08 95       	ret

0000a20c <__fixunssfsi>:
    a20c:	bc d0       	rcall	.+376    	; 0xa386 <__fp_splitA>
    a20e:	88 f0       	brcs	.+34     	; 0xa232 <__fixunssfsi+0x26>
    a210:	9f 57       	subi	r25, 0x7F	; 127
    a212:	90 f0       	brcs	.+36     	; 0xa238 <__fixunssfsi+0x2c>
    a214:	b9 2f       	mov	r27, r25
    a216:	99 27       	eor	r25, r25
    a218:	b7 51       	subi	r27, 0x17	; 23
    a21a:	a0 f0       	brcs	.+40     	; 0xa244 <__fixunssfsi+0x38>
    a21c:	d1 f0       	breq	.+52     	; 0xa252 <__fixunssfsi+0x46>
    a21e:	66 0f       	add	r22, r22
    a220:	77 1f       	adc	r23, r23
    a222:	88 1f       	adc	r24, r24
    a224:	99 1f       	adc	r25, r25
    a226:	1a f0       	brmi	.+6      	; 0xa22e <__fixunssfsi+0x22>
    a228:	ba 95       	dec	r27
    a22a:	c9 f7       	brne	.-14     	; 0xa21e <__fixunssfsi+0x12>
    a22c:	12 c0       	rjmp	.+36     	; 0xa252 <__fixunssfsi+0x46>
    a22e:	b1 30       	cpi	r27, 0x01	; 1
    a230:	81 f0       	breq	.+32     	; 0xa252 <__fixunssfsi+0x46>
    a232:	c3 d0       	rcall	.+390    	; 0xa3ba <__fp_zero>
    a234:	b1 e0       	ldi	r27, 0x01	; 1
    a236:	08 95       	ret
    a238:	c0 c0       	rjmp	.+384    	; 0xa3ba <__fp_zero>
    a23a:	67 2f       	mov	r22, r23
    a23c:	78 2f       	mov	r23, r24
    a23e:	88 27       	eor	r24, r24
    a240:	b8 5f       	subi	r27, 0xF8	; 248
    a242:	39 f0       	breq	.+14     	; 0xa252 <__fixunssfsi+0x46>
    a244:	b9 3f       	cpi	r27, 0xF9	; 249
    a246:	cc f3       	brlt	.-14     	; 0xa23a <__fixunssfsi+0x2e>
    a248:	86 95       	lsr	r24
    a24a:	77 95       	ror	r23
    a24c:	67 95       	ror	r22
    a24e:	b3 95       	inc	r27
    a250:	d9 f7       	brne	.-10     	; 0xa248 <__fixunssfsi+0x3c>
    a252:	3e f4       	brtc	.+14     	; 0xa262 <__fixunssfsi+0x56>
    a254:	90 95       	com	r25
    a256:	80 95       	com	r24
    a258:	70 95       	com	r23
    a25a:	61 95       	neg	r22
    a25c:	7f 4f       	sbci	r23, 0xFF	; 255
    a25e:	8f 4f       	sbci	r24, 0xFF	; 255
    a260:	9f 4f       	sbci	r25, 0xFF	; 255
    a262:	08 95       	ret

0000a264 <__floatunsisf>:
    a264:	e8 94       	clt
    a266:	09 c0       	rjmp	.+18     	; 0xa27a <__floatsisf+0x12>

0000a268 <__floatsisf>:
    a268:	97 fb       	bst	r25, 7
    a26a:	3e f4       	brtc	.+14     	; 0xa27a <__floatsisf+0x12>
    a26c:	90 95       	com	r25
    a26e:	80 95       	com	r24
    a270:	70 95       	com	r23
    a272:	61 95       	neg	r22
    a274:	7f 4f       	sbci	r23, 0xFF	; 255
    a276:	8f 4f       	sbci	r24, 0xFF	; 255
    a278:	9f 4f       	sbci	r25, 0xFF	; 255
    a27a:	99 23       	and	r25, r25
    a27c:	a9 f0       	breq	.+42     	; 0xa2a8 <__floatsisf+0x40>
    a27e:	f9 2f       	mov	r31, r25
    a280:	96 e9       	ldi	r25, 0x96	; 150
    a282:	bb 27       	eor	r27, r27
    a284:	93 95       	inc	r25
    a286:	f6 95       	lsr	r31
    a288:	87 95       	ror	r24
    a28a:	77 95       	ror	r23
    a28c:	67 95       	ror	r22
    a28e:	b7 95       	ror	r27
    a290:	f1 11       	cpse	r31, r1
    a292:	f8 cf       	rjmp	.-16     	; 0xa284 <__floatsisf+0x1c>
    a294:	fa f4       	brpl	.+62     	; 0xa2d4 <__floatsisf+0x6c>
    a296:	bb 0f       	add	r27, r27
    a298:	11 f4       	brne	.+4      	; 0xa29e <__floatsisf+0x36>
    a29a:	60 ff       	sbrs	r22, 0
    a29c:	1b c0       	rjmp	.+54     	; 0xa2d4 <__floatsisf+0x6c>
    a29e:	6f 5f       	subi	r22, 0xFF	; 255
    a2a0:	7f 4f       	sbci	r23, 0xFF	; 255
    a2a2:	8f 4f       	sbci	r24, 0xFF	; 255
    a2a4:	9f 4f       	sbci	r25, 0xFF	; 255
    a2a6:	16 c0       	rjmp	.+44     	; 0xa2d4 <__floatsisf+0x6c>
    a2a8:	88 23       	and	r24, r24
    a2aa:	11 f0       	breq	.+4      	; 0xa2b0 <__floatsisf+0x48>
    a2ac:	96 e9       	ldi	r25, 0x96	; 150
    a2ae:	11 c0       	rjmp	.+34     	; 0xa2d2 <__floatsisf+0x6a>
    a2b0:	77 23       	and	r23, r23
    a2b2:	21 f0       	breq	.+8      	; 0xa2bc <__floatsisf+0x54>
    a2b4:	9e e8       	ldi	r25, 0x8E	; 142
    a2b6:	87 2f       	mov	r24, r23
    a2b8:	76 2f       	mov	r23, r22
    a2ba:	05 c0       	rjmp	.+10     	; 0xa2c6 <__floatsisf+0x5e>
    a2bc:	66 23       	and	r22, r22
    a2be:	71 f0       	breq	.+28     	; 0xa2dc <__floatsisf+0x74>
    a2c0:	96 e8       	ldi	r25, 0x86	; 134
    a2c2:	86 2f       	mov	r24, r22
    a2c4:	70 e0       	ldi	r23, 0x00	; 0
    a2c6:	60 e0       	ldi	r22, 0x00	; 0
    a2c8:	2a f0       	brmi	.+10     	; 0xa2d4 <__floatsisf+0x6c>
    a2ca:	9a 95       	dec	r25
    a2cc:	66 0f       	add	r22, r22
    a2ce:	77 1f       	adc	r23, r23
    a2d0:	88 1f       	adc	r24, r24
    a2d2:	da f7       	brpl	.-10     	; 0xa2ca <__floatsisf+0x62>
    a2d4:	88 0f       	add	r24, r24
    a2d6:	96 95       	lsr	r25
    a2d8:	87 95       	ror	r24
    a2da:	97 f9       	bld	r25, 7
    a2dc:	08 95       	ret

0000a2de <__fp_cmp>:
    a2de:	99 0f       	add	r25, r25
    a2e0:	00 08       	sbc	r0, r0
    a2e2:	55 0f       	add	r21, r21
    a2e4:	aa 0b       	sbc	r26, r26
    a2e6:	e0 e8       	ldi	r30, 0x80	; 128
    a2e8:	fe ef       	ldi	r31, 0xFE	; 254
    a2ea:	16 16       	cp	r1, r22
    a2ec:	17 06       	cpc	r1, r23
    a2ee:	e8 07       	cpc	r30, r24
    a2f0:	f9 07       	cpc	r31, r25
    a2f2:	c0 f0       	brcs	.+48     	; 0xa324 <__fp_cmp+0x46>
    a2f4:	12 16       	cp	r1, r18
    a2f6:	13 06       	cpc	r1, r19
    a2f8:	e4 07       	cpc	r30, r20
    a2fa:	f5 07       	cpc	r31, r21
    a2fc:	98 f0       	brcs	.+38     	; 0xa324 <__fp_cmp+0x46>
    a2fe:	62 1b       	sub	r22, r18
    a300:	73 0b       	sbc	r23, r19
    a302:	84 0b       	sbc	r24, r20
    a304:	95 0b       	sbc	r25, r21
    a306:	39 f4       	brne	.+14     	; 0xa316 <__fp_cmp+0x38>
    a308:	0a 26       	eor	r0, r26
    a30a:	61 f0       	breq	.+24     	; 0xa324 <__fp_cmp+0x46>
    a30c:	23 2b       	or	r18, r19
    a30e:	24 2b       	or	r18, r20
    a310:	25 2b       	or	r18, r21
    a312:	21 f4       	brne	.+8      	; 0xa31c <__fp_cmp+0x3e>
    a314:	08 95       	ret
    a316:	0a 26       	eor	r0, r26
    a318:	09 f4       	brne	.+2      	; 0xa31c <__fp_cmp+0x3e>
    a31a:	a1 40       	sbci	r26, 0x01	; 1
    a31c:	a6 95       	lsr	r26
    a31e:	8f ef       	ldi	r24, 0xFF	; 255
    a320:	81 1d       	adc	r24, r1
    a322:	81 1d       	adc	r24, r1
    a324:	08 95       	ret

0000a326 <__fp_inf>:
    a326:	97 f9       	bld	r25, 7
    a328:	9f 67       	ori	r25, 0x7F	; 127
    a32a:	80 e8       	ldi	r24, 0x80	; 128
    a32c:	70 e0       	ldi	r23, 0x00	; 0
    a32e:	60 e0       	ldi	r22, 0x00	; 0
    a330:	08 95       	ret

0000a332 <__fp_nan>:
    a332:	9f ef       	ldi	r25, 0xFF	; 255
    a334:	80 ec       	ldi	r24, 0xC0	; 192
    a336:	08 95       	ret

0000a338 <__fp_pscA>:
    a338:	00 24       	eor	r0, r0
    a33a:	0a 94       	dec	r0
    a33c:	16 16       	cp	r1, r22
    a33e:	17 06       	cpc	r1, r23
    a340:	18 06       	cpc	r1, r24
    a342:	09 06       	cpc	r0, r25
    a344:	08 95       	ret

0000a346 <__fp_pscB>:
    a346:	00 24       	eor	r0, r0
    a348:	0a 94       	dec	r0
    a34a:	12 16       	cp	r1, r18
    a34c:	13 06       	cpc	r1, r19
    a34e:	14 06       	cpc	r1, r20
    a350:	05 06       	cpc	r0, r21
    a352:	08 95       	ret

0000a354 <__fp_round>:
    a354:	09 2e       	mov	r0, r25
    a356:	03 94       	inc	r0
    a358:	00 0c       	add	r0, r0
    a35a:	11 f4       	brne	.+4      	; 0xa360 <__fp_round+0xc>
    a35c:	88 23       	and	r24, r24
    a35e:	52 f0       	brmi	.+20     	; 0xa374 <__fp_round+0x20>
    a360:	bb 0f       	add	r27, r27
    a362:	40 f4       	brcc	.+16     	; 0xa374 <__fp_round+0x20>
    a364:	bf 2b       	or	r27, r31
    a366:	11 f4       	brne	.+4      	; 0xa36c <__fp_round+0x18>
    a368:	60 ff       	sbrs	r22, 0
    a36a:	04 c0       	rjmp	.+8      	; 0xa374 <__fp_round+0x20>
    a36c:	6f 5f       	subi	r22, 0xFF	; 255
    a36e:	7f 4f       	sbci	r23, 0xFF	; 255
    a370:	8f 4f       	sbci	r24, 0xFF	; 255
    a372:	9f 4f       	sbci	r25, 0xFF	; 255
    a374:	08 95       	ret

0000a376 <__fp_split3>:
    a376:	57 fd       	sbrc	r21, 7
    a378:	90 58       	subi	r25, 0x80	; 128
    a37a:	44 0f       	add	r20, r20
    a37c:	55 1f       	adc	r21, r21
    a37e:	59 f0       	breq	.+22     	; 0xa396 <__fp_splitA+0x10>
    a380:	5f 3f       	cpi	r21, 0xFF	; 255
    a382:	71 f0       	breq	.+28     	; 0xa3a0 <__fp_splitA+0x1a>
    a384:	47 95       	ror	r20

0000a386 <__fp_splitA>:
    a386:	88 0f       	add	r24, r24
    a388:	97 fb       	bst	r25, 7
    a38a:	99 1f       	adc	r25, r25
    a38c:	61 f0       	breq	.+24     	; 0xa3a6 <__fp_splitA+0x20>
    a38e:	9f 3f       	cpi	r25, 0xFF	; 255
    a390:	79 f0       	breq	.+30     	; 0xa3b0 <__fp_splitA+0x2a>
    a392:	87 95       	ror	r24
    a394:	08 95       	ret
    a396:	12 16       	cp	r1, r18
    a398:	13 06       	cpc	r1, r19
    a39a:	14 06       	cpc	r1, r20
    a39c:	55 1f       	adc	r21, r21
    a39e:	f2 cf       	rjmp	.-28     	; 0xa384 <__fp_split3+0xe>
    a3a0:	46 95       	lsr	r20
    a3a2:	f1 df       	rcall	.-30     	; 0xa386 <__fp_splitA>
    a3a4:	08 c0       	rjmp	.+16     	; 0xa3b6 <__fp_splitA+0x30>
    a3a6:	16 16       	cp	r1, r22
    a3a8:	17 06       	cpc	r1, r23
    a3aa:	18 06       	cpc	r1, r24
    a3ac:	99 1f       	adc	r25, r25
    a3ae:	f1 cf       	rjmp	.-30     	; 0xa392 <__fp_splitA+0xc>
    a3b0:	86 95       	lsr	r24
    a3b2:	71 05       	cpc	r23, r1
    a3b4:	61 05       	cpc	r22, r1
    a3b6:	08 94       	sec
    a3b8:	08 95       	ret

0000a3ba <__fp_zero>:
    a3ba:	e8 94       	clt

0000a3bc <__fp_szero>:
    a3bc:	bb 27       	eor	r27, r27
    a3be:	66 27       	eor	r22, r22
    a3c0:	77 27       	eor	r23, r23
    a3c2:	cb 01       	movw	r24, r22
    a3c4:	97 f9       	bld	r25, 7
    a3c6:	08 95       	ret

0000a3c8 <__gesf2>:
    a3c8:	8a df       	rcall	.-236    	; 0xa2de <__fp_cmp>
    a3ca:	08 f4       	brcc	.+2      	; 0xa3ce <__gesf2+0x6>
    a3cc:	8f ef       	ldi	r24, 0xFF	; 255
    a3ce:	08 95       	ret

0000a3d0 <__mulsf3>:
    a3d0:	0b d0       	rcall	.+22     	; 0xa3e8 <__mulsf3x>
    a3d2:	c0 cf       	rjmp	.-128    	; 0xa354 <__fp_round>
    a3d4:	b1 df       	rcall	.-158    	; 0xa338 <__fp_pscA>
    a3d6:	28 f0       	brcs	.+10     	; 0xa3e2 <__mulsf3+0x12>
    a3d8:	b6 df       	rcall	.-148    	; 0xa346 <__fp_pscB>
    a3da:	18 f0       	brcs	.+6      	; 0xa3e2 <__mulsf3+0x12>
    a3dc:	95 23       	and	r25, r21
    a3de:	09 f0       	breq	.+2      	; 0xa3e2 <__mulsf3+0x12>
    a3e0:	a2 cf       	rjmp	.-188    	; 0xa326 <__fp_inf>
    a3e2:	a7 cf       	rjmp	.-178    	; 0xa332 <__fp_nan>
    a3e4:	11 24       	eor	r1, r1
    a3e6:	ea cf       	rjmp	.-44     	; 0xa3bc <__fp_szero>

0000a3e8 <__mulsf3x>:
    a3e8:	c6 df       	rcall	.-116    	; 0xa376 <__fp_split3>
    a3ea:	a0 f3       	brcs	.-24     	; 0xa3d4 <__mulsf3+0x4>

0000a3ec <__mulsf3_pse>:
    a3ec:	95 9f       	mul	r25, r21
    a3ee:	d1 f3       	breq	.-12     	; 0xa3e4 <__mulsf3+0x14>
    a3f0:	95 0f       	add	r25, r21
    a3f2:	50 e0       	ldi	r21, 0x00	; 0
    a3f4:	55 1f       	adc	r21, r21
    a3f6:	62 9f       	mul	r22, r18
    a3f8:	f0 01       	movw	r30, r0
    a3fa:	72 9f       	mul	r23, r18
    a3fc:	bb 27       	eor	r27, r27
    a3fe:	f0 0d       	add	r31, r0
    a400:	b1 1d       	adc	r27, r1
    a402:	63 9f       	mul	r22, r19
    a404:	aa 27       	eor	r26, r26
    a406:	f0 0d       	add	r31, r0
    a408:	b1 1d       	adc	r27, r1
    a40a:	aa 1f       	adc	r26, r26
    a40c:	64 9f       	mul	r22, r20
    a40e:	66 27       	eor	r22, r22
    a410:	b0 0d       	add	r27, r0
    a412:	a1 1d       	adc	r26, r1
    a414:	66 1f       	adc	r22, r22
    a416:	82 9f       	mul	r24, r18
    a418:	22 27       	eor	r18, r18
    a41a:	b0 0d       	add	r27, r0
    a41c:	a1 1d       	adc	r26, r1
    a41e:	62 1f       	adc	r22, r18
    a420:	73 9f       	mul	r23, r19
    a422:	b0 0d       	add	r27, r0
    a424:	a1 1d       	adc	r26, r1
    a426:	62 1f       	adc	r22, r18
    a428:	83 9f       	mul	r24, r19
    a42a:	a0 0d       	add	r26, r0
    a42c:	61 1d       	adc	r22, r1
    a42e:	22 1f       	adc	r18, r18
    a430:	74 9f       	mul	r23, r20
    a432:	33 27       	eor	r19, r19
    a434:	a0 0d       	add	r26, r0
    a436:	61 1d       	adc	r22, r1
    a438:	23 1f       	adc	r18, r19
    a43a:	84 9f       	mul	r24, r20
    a43c:	60 0d       	add	r22, r0
    a43e:	21 1d       	adc	r18, r1
    a440:	82 2f       	mov	r24, r18
    a442:	76 2f       	mov	r23, r22
    a444:	6a 2f       	mov	r22, r26
    a446:	11 24       	eor	r1, r1
    a448:	9f 57       	subi	r25, 0x7F	; 127
    a44a:	50 40       	sbci	r21, 0x00	; 0
    a44c:	8a f0       	brmi	.+34     	; 0xa470 <__mulsf3_pse+0x84>
    a44e:	e1 f0       	breq	.+56     	; 0xa488 <__mulsf3_pse+0x9c>
    a450:	88 23       	and	r24, r24
    a452:	4a f0       	brmi	.+18     	; 0xa466 <__mulsf3_pse+0x7a>
    a454:	ee 0f       	add	r30, r30
    a456:	ff 1f       	adc	r31, r31
    a458:	bb 1f       	adc	r27, r27
    a45a:	66 1f       	adc	r22, r22
    a45c:	77 1f       	adc	r23, r23
    a45e:	88 1f       	adc	r24, r24
    a460:	91 50       	subi	r25, 0x01	; 1
    a462:	50 40       	sbci	r21, 0x00	; 0
    a464:	a9 f7       	brne	.-22     	; 0xa450 <__mulsf3_pse+0x64>
    a466:	9e 3f       	cpi	r25, 0xFE	; 254
    a468:	51 05       	cpc	r21, r1
    a46a:	70 f0       	brcs	.+28     	; 0xa488 <__mulsf3_pse+0x9c>
    a46c:	5c cf       	rjmp	.-328    	; 0xa326 <__fp_inf>
    a46e:	a6 cf       	rjmp	.-180    	; 0xa3bc <__fp_szero>
    a470:	5f 3f       	cpi	r21, 0xFF	; 255
    a472:	ec f3       	brlt	.-6      	; 0xa46e <__mulsf3_pse+0x82>
    a474:	98 3e       	cpi	r25, 0xE8	; 232
    a476:	dc f3       	brlt	.-10     	; 0xa46e <__mulsf3_pse+0x82>
    a478:	86 95       	lsr	r24
    a47a:	77 95       	ror	r23
    a47c:	67 95       	ror	r22
    a47e:	b7 95       	ror	r27
    a480:	f7 95       	ror	r31
    a482:	e7 95       	ror	r30
    a484:	9f 5f       	subi	r25, 0xFF	; 255
    a486:	c1 f7       	brne	.-16     	; 0xa478 <__mulsf3_pse+0x8c>
    a488:	fe 2b       	or	r31, r30
    a48a:	88 0f       	add	r24, r24
    a48c:	91 1d       	adc	r25, r1
    a48e:	96 95       	lsr	r25
    a490:	87 95       	ror	r24
    a492:	97 f9       	bld	r25, 7
    a494:	08 95       	ret

0000a496 <_exit>:
    a496:	f8 94       	cli

0000a498 <__stop_program>:
    a498:	ff cf       	rjmp	.-2      	; 0xa498 <__stop_program>
