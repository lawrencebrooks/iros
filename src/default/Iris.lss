
Iris.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800500  00006c92  00006d92  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .noinit       00000400  00800100  00800100  00006da0  2**5
                  CONTENTS, READONLY
  2 .text         00006c92  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .bss          0000099b  00800502  00800502  00006d94  2**1
                  ALLOC
  4 .stab         00000528  00000000  00000000  000071a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000002a5  00000000  00000000  000076c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  0000796d  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000528  00000000  00000000  00007980  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00005a5a  00000000  00000000  00007ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001506  00000000  00000000  0000d902  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000018ce  00000000  00000000  0000ee08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000d44  00000000  00000000  000106d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000015c6  00000000  00000000  0001141c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00004c1d  00000000  00000000  000129e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000005e0  00000000  00000000  00017600  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b8 1b 	jmp	0x3770	; 0x3770 <__ctors_end>
       4:	0c 94 21 1c 	jmp	0x3842	; 0x3842 <__bad_interrupt>
       8:	0c 94 21 1c 	jmp	0x3842	; 0x3842 <__bad_interrupt>
       c:	0c 94 21 1c 	jmp	0x3842	; 0x3842 <__bad_interrupt>
      10:	0c 94 21 1c 	jmp	0x3842	; 0x3842 <__bad_interrupt>
      14:	0c 94 21 1c 	jmp	0x3842	; 0x3842 <__bad_interrupt>
      18:	0c 94 21 1c 	jmp	0x3842	; 0x3842 <__bad_interrupt>
      1c:	0c 94 21 1c 	jmp	0x3842	; 0x3842 <__bad_interrupt>
      20:	0c 94 9b 21 	jmp	0x4336	; 0x4336 <__vector_8>
      24:	0c 94 21 1c 	jmp	0x3842	; 0x3842 <__bad_interrupt>
      28:	0c 94 21 1c 	jmp	0x3842	; 0x3842 <__bad_interrupt>
      2c:	0c 94 21 1c 	jmp	0x3842	; 0x3842 <__bad_interrupt>
      30:	0c 94 21 1c 	jmp	0x3842	; 0x3842 <__bad_interrupt>
      34:	0c 94 65 1f 	jmp	0x3eca	; 0x3eca <__vector_13>
      38:	0c 94 a5 1f 	jmp	0x3f4a	; 0x3f4a <__vector_14>
      3c:	0c 94 21 1c 	jmp	0x3842	; 0x3842 <__bad_interrupt>
      40:	0c 94 21 1c 	jmp	0x3842	; 0x3842 <__bad_interrupt>
      44:	0c 94 21 1c 	jmp	0x3842	; 0x3842 <__bad_interrupt>
      48:	0c 94 21 1c 	jmp	0x3842	; 0x3842 <__bad_interrupt>
      4c:	0c 94 21 1c 	jmp	0x3842	; 0x3842 <__bad_interrupt>
      50:	0c 94 21 1c 	jmp	0x3842	; 0x3842 <__bad_interrupt>
      54:	0c 94 21 1c 	jmp	0x3842	; 0x3842 <__bad_interrupt>
      58:	0c 94 21 1c 	jmp	0x3842	; 0x3842 <__bad_interrupt>
      5c:	0c 94 21 1c 	jmp	0x3842	; 0x3842 <__bad_interrupt>
      60:	0c 94 21 1c 	jmp	0x3842	; 0x3842 <__bad_interrupt>
      64:	0c 94 21 1c 	jmp	0x3842	; 0x3842 <__bad_interrupt>
      68:	0c 94 21 1c 	jmp	0x3842	; 0x3842 <__bad_interrupt>
      6c:	0c 94 21 1c 	jmp	0x3842	; 0x3842 <__bad_interrupt>
      70:	66 31       	cpi	r22, 0x16	; 22
      72:	69 31       	cpi	r22, 0x19	; 25
      74:	6c 31       	cpi	r22, 0x1C	; 28
      76:	6f 31       	cpi	r22, 0x1F	; 31
      78:	72 31       	cpi	r23, 0x12	; 18
      7a:	75 31       	cpi	r23, 0x15	; 21
      7c:	78 31       	cpi	r23, 0x18	; 24

0000007e <__trampolines_end>:
      7e:	81 00       	.word	0x0081	; ????
      80:	45 00       	.word	0x0045	; ????
      82:	27 ff       	sbrs	r18, 7
      84:	24 ff       	sbrs	r18, 4
      86:	2a 90       	ld	r2, -Y
      88:	2b 1c       	adc	r2, r11
      8a:	21 0c       	add	r2, r1
      8c:	22 fb       	bst	r18, 2
      8e:	85 00       	.word	0x0085	; ????
      90:	84 00       	.word	0x0084	; ????
      92:	89 03       	fmulsu	r16, r17
      94:	88 8d       	ldd	r24, Y+24	; 0x18
      96:	81 09       	sbc	r24, r1
      98:	6f 02       	muls	r22, r31
      9a:	44 42       	sbci	r20, 0x24	; 36
      9c:	47 00       	.word	0x0047	; ????
      9e:	45 01       	movw	r8, r10
      a0:	b0 83       	st	Z, r27
      a2:	b3 00       	.word	0x00b3	; ????
      a4:	b1 01       	movw	r22, r2
      a6:	25 11       	cpse	r18, r5
      a8:	8a 4f       	sbci	r24, 0xFA	; 250
      aa:	8b 03       	fmulsu	r16, r19

000000ac <eeprom_format_table>:
      ac:	5a 55 01 20 01 01 00 38 08 00 00 00 00 00 00 00     ZU. ...8........
	...

000000cc <patchCommands>:
      cc:	47 22 4a 22 a6 22 aa 22 b1 22 52 22 57 22 5c 22     G"J"."."."R"W"\"
      dc:	b9 22 5f 22 62 22 65 22 a0 22 a3 22 c9 22           ."_"b"e"."."."

000000ea <fader>:
      ea:	00 40 88 91 d2 e4 ad b5 b6 be bf ff                 .@..........

000000f6 <map_uzeboxlogo2>:
      f6:	05 03 00 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f     ................
	...

00000107 <map_uzeboxlogo>:
     107:	05 04 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d     ................
     117:	00 0e 0f 10 11 12                                   ......

0000011d <logo_tileset>:
	...
     179:	00 00 00 49 00 00 00 00 00 49 52 52 00 00 00 49     ...I.....IRR...I
     189:	52 53 1c 25 00 49 52 52 24 25 25 1b 52 52 5c 2d     RS.%.IRR$%%.RR\-
     199:	2d 1c 12 12 00 00 00 00 00 00 00 00 00 00 00 00     -...............
     1a9:	40 49 49 49 00 40 49 49 52 5b 5b 5b 4a 52 52 5b     @III.@IIR[[[JRR[
     1b9:	1c 1c 13 12 5b 1c 24 1c 12 09 09 09 24 1b 12 09     ....[.$.....$...
     1c9:	09 09 09 0a 0a 0a 0a 0a 0a 0a 0a 13 0a 0a 12 0a     ................
     1d9:	0a 12 13 0a 00 00 00 00 00 00 00 00 92 52 52 52     .............RRR
     1e9:	52 52 52 49 13 12 13 09 00 1c 1b 13 0a 12 12 40     RRRI...........@
     1f9:	1b 65 64 1c 09 0a 00 09 24 1b 1c 65 12 00 00 25     .ed.....$..e...%
     209:	1c 1c 1c 1c 01 00 25 24 1c 1c 1c 1c 00 24 25 24     ......%$.....$%$
     219:	24 24 1c 1c 00 00 00 00 00 00 00 00 49 40 00 00     $$..........I@..
     229:	00 00 00 00 52 49 49 00 00 00 00 00 1c 5b 4a 48     ....RII......[JH
     239:	00 00 00 00 1c 25 52 49 00 00 00 00 65 24 64 49     .....%RI....e$dI
     249:	00 00 00 00 65 25 64 49 00 00 00 00 6d 2e 5c 49     ....e%dI....m.\I
	...
     261:	00 00 40 52 00 00 00 00 00 49 52 5c 00 00 00 00     ..@R.....IR\....
     271:	53 52 24 25 00 00 00 53 52 25 25 25 00 00 4a 52     SR$%...SR%%%..JR
     281:	25 25 1b 00 00 00 5b 25 13 00 00 1b 00 5b 53 00     %%....[%.....[S.
     291:	0a 1c 37 37 09 5b 1c 65 7f 37 2e 2e 52 2e 2e 1c     ..77.[.e.7..R...
     2a1:	13 13 12 00 2e 25 1b 13 12 00 00 12 1c 1c 12 00     .....%..........
     2b1:	00 12 25 1c 12 00 00 12 2e 37 1c 13 00 13 2e 37     ..%......7.....7
     2c1:	36 1c 13 1b 37 37 2e 2e 25 13 1c 1c 2e 2e 2e 2e     6...77..%.......
     2d1:	1b 1c 1c 1c 6e 6e 6e 1c 1c 1c 1c 1c 09 13 13 12     ....nnn.........
     2e1:	12 13 13 00 13 13 13 13 13 1c 00 09 13 13 13 13     ................
     2f1:	1c 01 00 37 13 13 13 1c 13 00 2e 2e 1b 1b 1c 1c     ...7............
     301:	00 1c 77 2e 1b 1b 25 00 13 7f 25 1c 1c 1c 01 0a     ..w...%...%.....
     311:	37 24 1c 1c 1c 13 0a 2e 25 25 09 00 13 2e 24 25     7$......%%....$%
     321:	25 25 25 25 2e 25 25 25 25 25 25 25 25 25 2d 2e     %%%%.%%%%%%%%%-.
     331:	25 1b 1c 1c 2e 2e 25 1c 13 25 1b 13 25 1c 1c 1c     %.....%..%..%...
     341:	1c 01 09 52 1c 1c 13 00 01 1c 5b 5c 0a 00 01 65     ...R......[\...e
     351:	77 5c 1b 00 01 6e 7f 6e 52 1b 00 00 6d 1c 52 49     w\...n.nR...m.RI
     361:	00 00 00 00 1c 13 53 00 00 00 00 00 1c 52 4a 00     ......S......RJ.
     371:	00 00 00 00 5b 5b 00 00 00 00 00 00 5c 00 00 00     ....[[......\...
	...
     39d:	13 5b 7f 77 6e 6e 6e 6e 13 65 77 76 6e 6e 6e 6e     .[.wnnnn.ewvnnnn
     3ad:	1b 65 77 76 76 76 6e 77 1b 5b bf 76 b6 76 76 76     .ewvvvnw.[.v.vvv
     3bd:	09 13 6d bf b7 b6 b7 65 00 1b 12 5c 76 bf 76 6d     ..m....e...\v.vm
     3cd:	00 00 12 1b 12 5b 5b 5c 00 00 00 00 09 0a 12 13     .....[[\........
     3dd:	6e 77 24 1c 1c 1c 1c 1c 77 25 1c 1c 1c 1c 24 25     nw$.....w%....$%
     3ed:	6e 1c 1c 1c 24 25 25 1b 1c 1c 24 25 25 13 00 00     n...$%%...$%%...
     3fd:	64 6d 6d 1b 00 09 6e bf 6d 5b 09 12 6e bf 6d 5b     dmm...n.m[..n.m[
     40d:	5b 12 5b 64 5b 12 13 12 13 1b 12 12 09 01 00 00     [.[d[...........
     41d:	1c 24 2e 1c 09 00 09 6e 25 24 01 00 09 76 7f 7f     .$.....n%$...v..
     42d:	00 00 12 77 7f 7f 64 12 64 bf bf 77 5b 12 1b 09     ...w..d.d..w[...
     43d:	bf 6d 5b 12 1b 09 00 00 12 13 1b 09 00 00 00 00     .m[.............
     44d:	09 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     45d:	7f 7f 53 13 13 00 00 00 64 12 1b 01 00 00 00 00     ..S.....d.......
     46d:	1b 12 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     4a5:	26 00 00 00 26 00 26 26 2f 00 00 00 2f 00 00 00     &...&.&&/.../...
     4b5:	37 00 00 00 37 00 00 00 ff 00 00 00 ff 00 00 00     7...7...........
     4c5:	bf 00 00 00 bf 00 00 bf 37 00 00 37 00 00 37 00     ........7..7..7.
     4d5:	00 26 26 00 00 00 26 26 00 00 00 00 00 00 00 00     .&&...&&........
     4e5:	26 26 26 00 26 26 26 26 00 00 2f 00 2f 00 00 00     &&&.&&&&.././...
     4f5:	00 37 00 00 37 00 00 00 ff 00 00 00 ff ff ff ff     .7..7...........
     505:	00 00 00 00 bf 00 00 00 00 00 00 00 37 00 00 00     ............7...
     515:	26 26 26 00 26 26 26 26 00 00 00 00 00 00 00 00     &&&.&&&&........
     525:	26 00 26 26 26 26 00 00 00 00 2f 00 00 00 2f 00     &.&&&&..../.../.
     535:	00 00 37 00 00 00 37 00 00 00 ff ff ff ff 00 00     ..7...7.........
     545:	00 00 bf 00 00 00 bf 00 00 00 37 00 00 00 37 00     ..........7...7.
     555:	26 00 26 26 26 26 00 00 00 00 00 00 00 00 00 00     &.&&&&..........
     565:	00 00 26 26 26 00 26 00 00 2f 00 00 2f 00 2f 00     ..&&&.&../.././.
     575:	37 00 00 00 37 00 00 37 ff 00 00 00 ff 00 00 00     7...7..7........
     585:	bf 00 00 00 bf 00 00 bf 37 00 00 37 00 00 37 00     ........7..7..7.
     595:	26 26 26 00 00 00 26 00 00 00 00 00 00 00 00 00     &&&...&.........
     5a5:	00 00 26 00 00 00 00 00 00 00 2f 00 00 00 00 00     ..&......./.....
     5b5:	00 37 00 00 00 00 00 00 ff 00 00 00 00 00 00 00     .7..............
     5c5:	00 bf 00 00 00 00 00 00 00 00 37 00 00 00 00 00     ..........7.....
     5d5:	00 00 26 00 00 00 00 00 00 00 00 00 00 00 00 00     ..&.............
	...
     5f9:	00 00 00 e4 00 00 00 00 09 9b ed f6 00 00 00 9b     ................
     609:	a4 ad bf bf 00 52 9b a4 76 7f 7f b7 5b 9b 6d 77     .....R..v...[.mw
     619:	7f 76 6e b7 00 00 00 00 00 00 00 00 00 00 00 00     .vn.............
     629:	5b b6 f6 f6 00 5b f6 ff ff ff ff bf f6 ff ff ff     [....[..........
     639:	ff bf bf ae ff bf ff ff ff b7 ad 65 bf bf ff ff     ...........e....
     649:	b7 b6 ad 65 b7 bf ff ff bf b7 ae 6e b7 bf ff ff     ...e.......n....
     659:	bf b7 b7 65 00 00 00 00 00 00 00 00 f6 f6 ed ed     ...e............
     669:	ad a4 a4 9b b6 6d 6d 5c 52 6e 65 64 65 65 65 52     .....mm\RnedeeeR
     679:	65 76 6d 25 5c 5c 52 53 6e 24 65 6e 65 52 52 6e     evm%\\RSn$eneRRn
     689:	25 25 24 25 5b 52 77 2d 25 25 25 24 52 6e 6e 2d     %%$%[Rw-%%%$Rnn-
     699:	25 25 25 25 00 00 00 00 00 00 00 00 9b 49 00 00     %%%%.........I..
     6a9:	00 00 00 00 a4 9b 92 00 00 00 00 00 25 64 93 49     ............%d.I
     6b9:	00 00 00 00 65 2e 9b 52 00 00 00 00 6d 25 65 52     ....e..R....m%eR
     6c9:	00 00 00 00 6d 2d 65 52 00 00 00 00 6e 2e 64 52     ....m-eR....n.dR
	...
     6e1:	00 00 49 5b 00 00 00 00 00 4a 5b 65 00 00 00 00     ..I[.....J[e....
     6f1:	5b 9b 6d 2d 00 00 00 5b 5b 2d 2e 25 00 00 52 5b     [.m-...[[-.%..R[
     701:	2e 2e 1c 09 00 01 5b 2d 1c 01 09 1c 00 5c 5b 01     ......[-.....\[.
     711:	4a 65 77 7f 4a 5b 1c 6e 7f 77 77 76 9b 77 77 6d     Jew.J[.n.wwv.wwm
     721:	65 6e 6e a4 77 6e 65 65 65 5b a4 b7 25 25 5c 52     enn.wneee[..%%\R
     731:	52 6d bf bf 13 09 49 64 7f bf bf bf 09 5c 7f 7f     Rm....Id.....\..
     741:	bf bf b7 bf 7f 7f 77 7f 7f b7 bf bf 77 77 7f 7f     ......w.....ww..
     751:	6e b7 bf bf 77 7f 7f 6e 77 bf bf bf b6 ff ff ff     n...w..nw.......
     761:	bf bf b7 5b bf ff ff ff bf bf a4 64 bf ff ff ff     ...[.......d....
     771:	bf ad a4 7f bf ff ff ff bf a4 bf 7f ff ff ff bf     ................
     781:	ad bf bf bf ff ff ff b6 bf bf bf 77 ff ff f7 bf     ...........w....
     791:	bf bf 77 77 ff ff ff bf bf bf 64 52 6d 7f 6e 2e     ..ww......dRm.n.
     7a1:	2d 2d 25 6e 7f 76 6e 6e 6e 2e 25 65 77 77 77 76     --%n.vnnn.%ewwwv
     7b1:	2e 1c 25 24 7f 77 6e 25 1c 25 1c 1b 77 65 25 25     ..%$.wn%.%..we%%
     7c1:	1c 09 0a 5b 6e 6e 1c 09 49 25 64 64 5b 49 4a 6e     ...[nn..I%dd[IJn
     7d1:	7f 64 5c 00 53 77 bf 77 5b 5c 00 00 6e 25 5b 4a     .d\.Sw.w[\..n%[J
     7e1:	00 00 00 00 1c 1b 5b 00 00 00 00 00 24 5b 53 00     ......[.....$[S.
     7f1:	00 00 00 00 5b 5c 00 00 00 00 00 00 64 00 00 00     ....[\......d...
	...
     81d:	5b 5c 7f bf 77 76 77 77 5c 6d 7f b7 77 77 77 77     [\..wvww\m..wwww
     82d:	5c 6d 7f bf 77 77 77 bf 5c 64 bf bf bf bf bf 7f     \m..www.\d......
     83d:	0a 5c 6e bf bf bf bf 76 00 65 64 6d bf bf bf bf     .\n....v.edm....
     84d:	00 00 5b 6d 64 6d ad b6 00 00 00 00 12 5b 64 6d     ..[mdm.......[dm
     85d:	77 7f 6e 6e 77 bf bf bf 7f 76 6d 76 77 bf bf bf     w.nnw....vmvw...
     86d:	77 6d 6e 76 7f bf bf bf 6d 6e 76 7f bf b7 ad f6     wmnv....mnv.....
     87d:	76 bf bf 76 a4 ad ff ff bf b6 64 ad ff ff ff ff     v..v......d.....
     88d:	b6 ad bf ff ff ff ff f6 ad b6 ad 64 5b 52 00 00     ...........d[R..
     89d:	ff ff bf bf ad 5b 64 bf ff ff b6 ad ad bf ff bf     .....[d.........
     8ad:	ff f6 ff ff ff ff bf 64 ff ff ff ff bf b6 76 5b     .......d......v[
     8bd:	ff ff ff bf bf 5b 00 00 ff ff ff 5c 00 00 00 00     .....[.....\....
     8cd:	a4 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     8dd:	bf bf 64 5c 5c 00 00 00 6e 5c 65 49 00 00 00 00     ..d\\...n\eI....
     8ed:	6d 5b 00 00 00 00 00 00 00 00 00 00 00 00 00 00     m[..............
	...

0000091d <logoInitPatches>:
     91d:	00 00 00 26 09 00 00 00 00                          ...&.....

00000926 <initPatch>:
     926:	00 02 08 00 08 55 04 08 5a 00 00 f8 00 09 90 00     .....U..Z.......
     936:	0a 1e 32 05 00 00 ff                                ..2....

0000093d <default_scores>:
     93d:	55 5a 45 00 00 4c 4a 42 00 00 41 41 41 00 00 42     UZE..LJB..AAA..B
     94d:	42 42 00 00 43 43 43 00 00 44 44 44 00 00           BB..CCC..DDD..

0000095b <strLevels>:
     95b:	20 20 20 47 4c 41 43 49 45 53 20 20 20 00              GLACIES   .

00000969 <strPaused>:
     969:	50 41 55 53 45 44 00                                PAUSED.

00000970 <strExit>:
     970:	45 58 49 54 20 2d 20 58 00                          EXIT - X.

00000979 <strLives>:
     979:	4c 49 56 45 53 3a 00                                LIVES:.

00000980 <strShield>:
     980:	53 48 49 45 4c 44 3a 00                             SHIELD:.

00000988 <strScore>:
     988:	53 43 4f 52 45 3a 00                                SCORE:.

0000098f <strSelectHandle>:
     98f:	53 45 4c 45 43 54 20 2d 20 41 2f 53 54 41 52 54     SELECT - A/START
	...

000009a0 <strHighscores>:
     9a0:	48 49 47 48 20 53 43 4f 52 45 53 00                 HIGH SCORES.

000009ac <str1Player>:
     9ac:	53 54 41 52 54 00                                   START.

000009b2 <strCopyright>:
     9b2:	32 30 31 36 20 4c 41 57 52 45 4e 43 45 20 42 52     2016 LAWRENCE BR
     9c2:	4f 4f 4b 53 00                                      OOKS.

000009c7 <my_patches>:
     9c7:	00 00 00 d0 09 00 00 00 00                          .........

000009d0 <ad_navigate>:
     9d0:	00 02 02 00 04 32 01 03 01 01 03 01 01 03 01 01     .....2..........
     9e0:	03 01 01 03 01 01 03 01 01 03 01 01 03 01 01 03     ................
     9f0:	01 01 03 01 01 03 01 01 03 01 01 03 01 01 03 01     ................
     a00:	01 03 01 01 03 01 01 04 01 01 04 01 01 04 01 01     ................
     a10:	04 01 01 04 01 01 04 01 01 04 01 01 04 01 01 04     ................
     a20:	01 01 04 01 01 04 01 01 04 01 01 04 01 01 04 01     ................
     a30:	01 04 01 01 03 01 01 03 01 01 03 01 01 03 01 01     ................
     a40:	03 01 01 03 01 01 03 01 01 03 01 01 03 01 01 03     ................
     a50:	01 01 03 01 01 03 01 01 03 01 01 03 01 01 03 01     ................
     a60:	01 03 01 01 04 01 01 04 01 01 04 01 01 04 01 01     ................
     a70:	04 01 01 04 01 01 04 01 01 04 01 01 04 01 01 04     ................
     a80:	01 01 04 01 01 04 01 01 04 01 01 04 01 01 04 01     ................
     a90:	01 03 01 01 03 01 01 03 01 01 03 01 01 03 01 01     ................
     aa0:	03 01 01 03 01 01 03 01 01 03 01 01 03 01 01 03     ................
     ab0:	01 01 03 01 01 03 01 01 03 01 01 03 01 01 03 01     ................
     ac0:	01 04 01 01 04 01 01 04 01 01 04 01 01 04 01 01     ................
     ad0:	04 01 01 04 01 01 04 01 01 04 01 01 04 01 01 04     ................
     ae0:	01 01 04 01 01 04 01 01 04 01 01 04 01 01 05 00     ................
     af0:	00 ff                                               ..

00000af2 <level_data>:
     af2:	00 00 03 15 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     cd6:	06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
     ce6:	06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
     cf6:	06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
     d06:	06 06 06 06 06 06 06 06 06 06 06 06 05 05 05 05     ................
     d16:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     d26:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     d36:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     d46:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     d56:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     d66:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     d76:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     d86:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     d96:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     da6:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     db6:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     dc6:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     dd6:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     de6:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     df6:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     e06:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     e16:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     e26:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     e36:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     e46:	05 05 05 05 05 05 05 05 05 05 05 05 02 01 01 01     ................
     e56:	01 01 03 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     e66:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     e76:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     e86:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     e96:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     ea6:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     eb6:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     ec6:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     ed6:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     ee6:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     ef6:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     f06:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     f16:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     f26:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     f36:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     f46:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     f56:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     f66:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     f76:	05 02 01 01 01 01 01 03 05 05 05 05 05 05 05 02     ................
     f86:	01 01 01 01 01 03 05 05 05 05 05 05 05 05 05 05     ................
     f96:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     fa6:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     fb6:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     fc6:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     fd6:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     fe6:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     ff6:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    1006:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    1016:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    1026:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    1036:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    1046:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    1056:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    1066:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    1076:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    1086:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    1096:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    10a6:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    10b6:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    10c6:	01 01 01 01 01 01 01 01 01 01 01 01 04 04 04 04     ................
    10d6:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    10e6:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    10f6:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    1106:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    1116:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    1126:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    1136:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    1146:	04 04 04 04                                         ....

0000114a <sprites_data>:
    114a:	fe fe fe fe fe fe fe 87 fe fe fe fe fe fe 87 87     ................
    115a:	fe fe fe fe fe fe 87 87 fe fe fe fe 85 85 85 87     ................
    116a:	fe fe fe 85 87 87 87 85 fe fe 85 87 87 87 87 85     ................
    117a:	fe 85 87 87 87 85 85 87 85 87 87 85 85 87 87 87     ................
    118a:	87 87 87 fe fe fe fe fe d2 d2 eb d2 fe fe fe fe     ................
    119a:	87 d2 fd eb fe fe fe fe 87 87 eb d2 fe fe fe fe     ................
    11aa:	85 87 87 d2 fe fe fe fe 87 85 85 87 ef fe fe fe     ................
    11ba:	87 ef 87 87 87 ef fe fe ef ff ef 87 87 ef fe fe     ................
    11ca:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 87     ................
    11da:	fe fe fe fe fe fe 87 87 fe fe fe fe fe fe 87 87     ................
    11ea:	fe fe fe fe 85 85 85 87 fe fe fe 85 87 87 87 85     ................
    11fa:	fe fe 85 87 87 87 87 85 fe 85 87 87 87 85 85 87     ................
    120a:	fe fe fe fe fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    121a:	d2 d2 eb d2 fe fe fe fe 87 d2 fd eb fe fe fe fe     ................
    122a:	87 87 eb d2 fe fe fe fe 85 87 87 d2 fe fe fe fe     ................
    123a:	87 85 85 87 ef fe fe fe 87 ef 87 87 87 ef fe fe     ................
    124a:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    125a:	fe fe fe fe fe fe fe fe fe ba ba ba ba ba ba fe     ................
    126a:	ba bd bd bd bd bd bd ba fe ba ba ba ba ba ba fe     ................
    127a:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    128a:	fe fe 46 46 46 46 46 46 fe a5 a5 a5 47 47 46 fe     ..FFFFFF....GGF.
    129a:	fe 46 46 47 47 46 3f 3f 46 46 47 47 46 fe fe fe     .FFGGF??FFGGF...
    12aa:	46 46 47 47 46 fe fe fe fe 46 46 47 47 3f 3f fe     FFGGF....FFGG??.
    12ba:	fe a5 a5 a5 47 fe fe fe fe fe 46 46 46 46 fe fe     ....G.....FFFF..
    12ca:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    12da:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    12ea:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    12fa:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    130a:	85 87 87 85 fe 85 87 87 fe 85 87 85 fe 85 87 87     ................
    131a:	fe 85 87 87 ad ad ad ad fe fe 85 87 ad ad ad ad     ................
    132a:	fe fe 85 87 ad ad ad ad fe fe fe 85 a4 ad 87 87     ................
    133a:	fe fe fe fe a4 a4 85 87 fe fe fe fe a4 a4 85 87     ................
    134a:	87 ef 87 85 87 ef fe fe 87 87 87 85 87 87 ef fe     ................
    135a:	ad ad ad ad ad 87 ef fe ad ad ad ad ad ad a4 ad     ................
    136a:	ad ad ad ad ad a4 a4 a4 87 87 87 ef fe fe fe fe     ................
    137a:	87 87 87 ef fe fe fe fe 87 87 87 ef fe fe fe fe     ................
    138a:	87 ef 87 85 87 ef fe fe 87 87 87 85 87 87 ef fe     ................
    139a:	ad ad ad ad ad 87 ef fe ad ad ad ad ad ad a4 ad     ................
    13aa:	ad ad ad ad ad a4 a4 a4 87 87 87 ef fe fe fe fe     ................
    13ba:	87 87 87 ef fe fe fe fe 87 87 ef fe fe fe fe fe     ................
    13ca:	85 87 87 85 85 87 87 87 85 87 87 85 fe 85 87 87     ................
    13da:	fe 85 87 85 fe 85 87 87 fe 85 87 87 ad ad ad ad     ................
    13ea:	fe fe 85 87 ad ad ad ad fe fe 85 87 ad ad ad ad     ................
    13fa:	fe fe fe 85 a4 ad 87 87 fe fe fe fe a4 a4 85 87     ................
    140a:	ef ff ef 87 87 ef fe fe 87 ef 87 85 87 ef fe fe     ................
    141a:	87 87 87 85 87 87 ef fe ad ad ad ad ad 87 ef fe     ................
    142a:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    143a:	87 87 87 ef fe fe fe fe 87 87 ef fe fe fe fe fe     ................
    144a:	ef ff ef 87 87 ef fe fe 87 ef 87 85 87 ef fe fe     ................
    145a:	87 87 87 85 87 87 ef fe ad ad ad ad ad 87 ef fe     ................
    146a:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    147a:	87 87 87 ef fe fe fe fe 87 87 87 87 ef fe fe fe     ................
    148a:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    149a:	fe fe fe 27 07 fe fe fe fe fe 27 77 27 07 fe fe     ...'......'w'...
    14aa:	fe fe 07 27 07 07 fe fe fe fe fe 07 07 fe fe fe     ...'............
    14ba:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    14ca:	fe fe fe fe fe fe 85 87 fe fe fe fe fe fe 85 87     ................
    14da:	fe fe fe fe fe 85 87 ef fe fe fe fe fe 85 87 ef     ................
    14ea:	fe fe fe fe 85 87 ef fe fe fe fe fe 85 87 ef fe     ................
    14fa:	fe fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4     ................
    150a:	ef fe 85 ef fe fe fe fe ef fe 85 85 ef fe fe fe     ................
    151a:	fe fe 85 85 ef fe fe fe fe fe 85 85 ef fe fe fe     ................
    152a:	fe fe 85 85 ef fe fe fe fe fe 85 85 ef fe fe fe     ................
    153a:	fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe     ................
    154a:	fe fe fe fe fe fe fe 85 fe fe fe fe fe fe fe 85     ................
    155a:	fe fe fe fe fe 85 85 87 fe fe fe fe 85 87 87 87     ................
    156a:	fe fe fe a4 87 87 87 ef fe fe fe a4 ef ef ef fe     ................
    157a:	fe fe fe a4 a4 fe fe fe fe fe fe a4 a4 a4 fe fe     ................
    158a:	87 87 85 fe fe fe fe fe 87 87 87 85 fe fe fe fe     ................
    159a:	87 87 87 ef fe fe fe fe 87 ef ef fe fe fe fe fe     ................
    15aa:	ef 85 ef fe fe fe fe fe 85 85 ef fe fe fe fe fe     ................
    15ba:	a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe fe fe     ................
    15ca:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 85 ef     ................
    15da:	fe fe fe fe 85 85 85 ef a4 a4 85 85 85 85 ef fe     ................
    15ea:	a4 a4 85 85 85 85 ef fe a4 a4 ef ef ef ef fe fe     ................
    15fa:	a4 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    160a:	87 87 ef fe fe fe fe fe fe 85 87 ef fe fe fe fe     ................
    161a:	fe 85 87 87 ef fe fe fe fe fe 85 87 ef fe fe fe     ................
    162a:	fe fe 85 87 87 ef fe fe fe fe fe 85 87 ef fe fe     ................
    163a:	fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe     ................
    164a:	fe fe fe fe fe fe fe 85 fe fe fe fe fe fe fe 85     ................
    165a:	fe fe fe fe fe 85 85 85 fe fe fe fe 85 85 85 85     ................
    166a:	fe fe fe a4 85 85 85 ef fe fe fe a4 ef ef ef fe     ................
    167a:	fe fe fe a4 a4 fe fe fe fe fe fe a4 a4 a4 fe fe     ................
    168a:	87 87 ef fe fe fe fe fe 85 87 ef 85 fe fe fe fe     ................
    169a:	85 87 ef ef fe fe fe fe 85 87 ef fe fe fe fe fe     ................
    16aa:	85 87 ef fe fe fe fe fe 85 87 ef fe fe fe fe fe     ................
    16ba:	a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe fe fe     ................
    16ca:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 85 ef     ................
    16da:	fe fe fe fe 85 85 85 ef a4 a4 85 85 85 85 a4 a4     ................
    16ea:	a4 a4 85 85 85 85 a4 a4 a4 a4 ef ef ef ef a4 a4     ................
    16fa:	a4 fe fe fe fe fe a4 fe fe fe fe fe fe fe fe fe     ................
    170a:	87 87 85 87 ef fe fe fe fe fe 85 87 87 ef fe fe     ................
    171a:	fe fe 85 87 87 ef fe fe 85 85 85 87 ef fe fe fe     ................
    172a:	87 87 87 87 ef fe fe fe ef ef ef ef fe fe fe fe     ................
    173a:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    174a:	fe fe fe fe fe fe fe fe fe fe 12 12 12 12 fe fe     ................
    175a:	ad 12 0f 1f 1f 0f 12 ad ad 12 12 12 12 12 12 ad     ................
    176a:	ad ad 12 12 12 12 ad ad ad 12 ad 12 12 ad 12 ad     ................
    177a:	ad fe 12 12 12 12 fe ad ad fe fe fe fe fe fe ad     ................
    178a:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 7f     ................
    179a:	fe fe fe fe fe 7f 7f 7f fe fe fe fe 7f 7f 7f 7f     ................
    17aa:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe fe fe     ................
    17ba:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    17ca:	a4 fe fe fe fe fe fe fe a4 ad fe fe ff ff a4 ad     ................
    17da:	a4 ad f6 ff ff a4 ad f6 a4 ad f6 ff a4 ad f6 ff     ................
    17ea:	a4 ad fe fe a4 ad f6 ff a4 fe fe a4 a4 ad f6 fe     ................
    17fa:	fe fe fe a4 a4 ad f6 f6 fe fe fe fe fe fe fe fe     ................
    180a:	fe fe fe fe fe fe fe fe f6 ff ff ff d2 fe fe fe     ................
    181a:	ff ff ff ff d2 eb fe fe ff fe ff ff eb fd d2 fe     ................
    182a:	fe fe fe ff d2 eb d2 d2 fe fe fe fe fe fe fe fe     ................
    183a:	f6 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    184a:	fe fe bf 7f 7f bf fe fe fe 7f 7f 7f 7f 7f 7f fe     ................
    185a:	bf 7f 7f 7f 7f 7f 7f bf 7f 7f 7f 7f 7f 7f 7f 7f     ................
    186a:	7f 7f 7f 7f 7f 7f 7f 7f bf 7f 7f 7f 7f 7f 7f bf     ................
    187a:	fe 7f 7f 7f 7f 7f 7f fe fe fe bf 7f 7f bf fe fe     ................
    188a:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    189a:	fe fe fe 7f 7f fe fe fe fe fe 7f 7f 7f 7f fe fe     ................
    18aa:	fe fe 7f 7f 7f 7f fe fe fe fe fe 7f 7f fe fe fe     ................
    18ba:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    18ca:	fe fe bf 7f 7f bf fe fe fe 7f 7f 7f 7f 7f 7f fe     ................
    18da:	bf 7f fe fe 7f 7f 7f bf 7f fe fe fe fe 7f 7f 7f     ................
    18ea:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe 7f bf     ................
    18fa:	fe fe fe fe fe fe 7f fe fe fe fe fe fe bf fe fe     ................
    190a:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    191a:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    192a:	fe fe fe bf e3 fe fe fe fe fe fe fe fe fe fe fe     ................
    193a:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    194a:	fe fe fe fe fe fe fe fe fe fe fe fe ff fe fe fe     ................
    195a:	fe fe fe fe 7f ff fe fe fe fe fe fe 7f 7f ff fe     ................
    196a:	fe fe fe fe 7f 7f 7f ff fe fe fe fe 7f 7f 7f fe     ................
    197a:	fe fe fe fe 7f 7f fe fe fe fe fe fe 7f fe fe fe     ................
    198a:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    199a:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    19aa:	7f 7f 7f 7f 7f 7f ff fe fe 7f 7f 7f 7f ff fe fe     ................
    19ba:	fe fe 7f 7f ff fe fe fe fe fe fe fe fe fe fe fe     ................
    19ca:	fe fe fe ff fe fe fe fe fe fe ff 7f 7f fe fe fe     ................
    19da:	fe ff 7f 7f 7f 7f fe fe ff 7f 7f 7f 7f 7f 7f fe     ................
    19ea:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    19fa:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1a0a:	fe fe 12 12 12 12 fe fe fe 12 0f 1f 1f 0f 12 fe     ................
    1a1a:	ad 12 12 12 12 12 12 ad ad 12 ad 12 12 ad 12 ad     ................
    1a2a:	ad ad 12 12 12 12 ad ad ad fe 12 12 12 12 fe ad     ................
    1a3a:	ad fe fe fe fe fe fe ad ad fe fe fe fe fe fe ad     ................
    1a4a:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 7f     ................
    1a5a:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe fe 7f     ................
    1a6a:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1a7a:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1a8a:	a4 fe fe fe fe fe fe fe a4 a4 fe fe fe fe fe fe     ................
    1a9a:	a4 a4 ad fe fe fe fe fe a4 a4 ad ad fe fe fe fe     ................
    1aaa:	a4 a4 ad ad f6 fe fe fe a4 a4 ad ad f6 f6 ff ff     ................
    1aba:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    1aca:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1ada:	fe fe ff ff ff ff a4 a4 fe ff ff ff ff a4 a4 a4     ................
    1aea:	ff ff ff ff ff a4 a4 a4 ff ff ff ff a4 a4 a4 ad     ................
    1afa:	ff ff ff ff a4 a4 ad ad ff ff ff a4 a4 ad ad f6     ................
    1b0a:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1b1a:	a4 ad ad f6 f6 ff ff ff a4 ad ad f6 f6 ff ff ff     ................
    1b2a:	ad ad f6 f6 ff ff ff ff ad f6 f6 ff ff ff ff ff     ................
    1b3a:	f6 f6 ff ff ff ff ff ff f6 ff ff fe fe ff ff ff     ................
    1b4a:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1b5a:	d2 fe fe fe fe fe fe fe d2 d2 fe fe fe fe fe fe     ................
    1b6a:	d2 d2 d2 fe fe fe fe fe d2 d3 eb d3 fe fe fe fe     ................
    1b7a:	d2 eb fd eb d2 fe fe fe d2 d3 eb d3 d2 d2 fe fe     ................
    1b8a:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    1b9a:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 fe fe fe     ................
    1baa:	a4 a4 ad ad fe fe fe fe a4 a4 ad fe fe fe fe fe     ................
    1bba:	a4 a4 fe fe fe fe fe fe a4 fe fe fe fe fe fe fe     ................
    1bca:	ff ff fe a4 ad ad f6 f6 ff fe a4 a4 ad ad f6 f6     ................
    1bda:	fe fe a4 a4 ad ad f6 f6 fe a4 a4 a4 ad ad f6 f6     ................
    1bea:	fe a4 a4 a4 a4 ad ad f6 a4 a4 a4 a4 a4 a4 ad ad     ................
    1bfa:	a4 a4 a4 a4 a4 a4 a4 ad a4 a4 a4 a4 a4 a4 a4 a4     ................
    1c0a:	ff ff fe fe fe fe ff ff ff fe fe fe fe fe fe ff     ................
    1c1a:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1c2a:	f6 fe fe fe fe fe fe fe f6 f6 fe fe fe fe fe fe     ................
    1c3a:	ad f6 f6 fe fe fe fe fe ad ad f6 f6 fe fe fe fe     ................
    1c4a:	d2 d2 d2 d2 d2 d2 d2 fe ff ff ff ff ff ff ff ff     ................
    1c5a:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1c6a:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1c7a:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1c8a:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 87 ef     ................
    1c9a:	fe fe fe fe 85 87 87 ef a4 a4 85 85 85 87 ef fe     ................
    1caa:	a4 a4 87 87 87 87 ef fe a4 a4 ef ef ef ef fe fe     ................
    1cba:	a4 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1cca:	87 87 ef fe fe fe fe fe fe 85 85 ef fe fe fe fe     ................
    1cda:	fe 85 85 85 ef fe fe fe fe fe 85 85 ef fe fe fe     ................
    1cea:	fe fe 85 85 85 ef fe fe fe fe fe 85 85 ef fe fe     ................
    1cfa:	fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe     ................
    1d0a:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1d1a:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1d2a:	fe fe fe fe fe fe fe fe fe fe fe fe fe 85 85 85     ................
    1d3a:	fe a4 87 87 87 87 87 87 a4 a4 ef ef ef ef ef ef     ................
    1d4a:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 87     ................
    1d5a:	fe fe fe fe 85 85 85 87 fe fe fe 85 87 87 87 85     ................
    1d6a:	fe fe 85 85 87 87 87 87 85 85 85 85 85 87 87 ad     ................
    1d7a:	87 87 87 87 ad 85 87 87 ef ef ef ef ad ad a4 a4     ................
    1d8a:	87 87 87 87 fe fe fe fe 87 d2 d2 eb d2 fe fe fe     ................
    1d9a:	87 87 d2 fd eb fe fe fe 87 87 87 eb d2 fe fe fe     ................
    1daa:	85 85 87 87 d2 fe fe fe ad ad ad ad ad 87 ef fe     ................
    1dba:	ad ad ad ad ad ad a4 ad a4 ad ad ad ad a4 a4 a4     ................

00001dca <map_enemy_spider_1>:
    1dca:	01 01 23                                            ..#

00001dcd <map_enemy_spider_0>:
    1dcd:	01 01 18                                            ...

00001dd0 <map_enemy_shark>:
    1dd0:	01 01 05                                            ...

00001dd3 <map_enemy_shot>:
    1dd3:	01 01 0d                                            ...

00001dd6 <map_hero_shot>:
    1dd6:	01 01 04                                            ...

00001dd9 <map_hero_ship_large>:
    1dd9:	04 02 25 26 27 28 29 2a 2b 2c                       ..%&'()*+,

00001de3 <map_hero_ship_1>:
    1de3:	03 01 24 1a 1b                                      ..$..

00001de8 <map_hero_ship_0>:
    1de8:	03 01 19 1a 1b                                      .....

00001ded <map_hero_prone>:
    1ded:	03 01 2f 30 31                                      ../01

00001df2 <map_hero_jump>:
    1df2:	02 03 02 03 0a 0c 16 17                             ........

00001dfa <map_hero_step_3>:
    1dfa:	02 03 02 03 0a 0b 2d 2e                             ......-.

00001e02 <map_hero_step_2>:
    1e02:	02 03 00 01 07 09 14 15                             ........

00001e0a <map_hero_step_1>:
    1e0a:	02 03 02 03 0a 0b 12 13                             ........

00001e12 <map_hero_step_0>:
    1e12:	02 03 00 01 07 09 10 11                             ........

00001e1a <map_hero_idle>:
    1e1a:	02 03 00 01 07 08 0e 0f                             ........

00001e22 <map_explosion_2>:
    1e22:	01 01 1e                                            ...

00001e25 <map_explosion_1>:
    1e25:	01 01 1d                                            ...

00001e28 <map_explosion_0>:
    1e28:	01 01 1c                                            ...

00001e2b <map_meteor>:
    1e2b:	01 01 1f                                            ...

00001e2e <map_up_arrow>:
    1e2e:	01 01 22                                            .."

00001e31 <map_down_arrow>:
    1e31:	01 01 21                                            ..!

00001e34 <map_right_arrow>:
    1e34:	01 01 20                                            .. 

00001e37 <map_none>:
    1e37:	01 01 06                                            ...

00001e3a <tiles_data>:
	...
    1e7a:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1e8a:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    1e9a:	ff f8 fb f8 fb f8 f8 fd ff fb f8 f8 fb f8 f8 f8     ................
    1eaa:	ff f8 f8 fb f8 f8 f8 f8 ff f8 f8 f8 f8 f8 f8 f8     ................
    1eba:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1eca:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    1eda:	fd f8 fb f8 fb f8 f8 fd f8 fb f8 f8 fb f8 f8 f8     ................
    1eea:	f8 f8 f8 fb f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    1efa:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1f0a:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    1f1a:	fd f8 fb f8 fb f8 f8 ff f8 fb f8 f8 fb f8 f8 ff     ................
    1f2a:	f8 f8 f8 fb f8 f8 f8 ff f8 f8 f8 f8 f8 f8 f8 ff     ................
    1f3a:	fa f8 f8 f8 f8 f8 f8 f8 f8 f8 fb f8 f8 f8 fb f8     ................
    1f4a:	f8 f8 fb f8 fb fb f8 f8 f8 f8 f8 fb f8 f8 f8 f8     ................
    1f5a:	f8 f8 fb f8 fb f8 f8 f8 f8 fb f8 f8 fb f8 f8 f8     ................
    1f6a:	f8 f8 f8 fb f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    1f7a:	ac ac ac ac ac ac ac ac ac ac ac ac ac ac ac ac     ................
    1f8a:	ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad     ................
    1f9a:	ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae     ................
    1faa:	af af af af af af af af af af af af af af af af     ................
    1fba:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    1fca:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    1fda:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    1fea:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    1ffa:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    200a:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    201a:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    202a:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    203a:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    204a:	ab ab ab ab ab ab ab ab ab ad ad ad ad ad ad ab     ................
    205a:	ae ae ae ae ae ae ae ae ab ae ae ae ae ae ae ab     ................
    206a:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    207a:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab a0     ................
    208a:	ab ab ab ab ab a0 a0 a0 ab ab ab ab a0 a0 a0 a0     ................
    209a:	ab ab ab a0 a0 a0 a0 a0 ab ab a0 a0 a0 a0 a0 a0     ................
    20aa:	ab ab a0 a0 a0 a0 a0 a0 ab a0 a0 a0 a0 a0 a0 a0     ................
    20ba:	ab a4 ff ff ff ff ff ab a0 a0 a4 ff ff ff ff ff     ................
    20ca:	a0 a0 a0 a4 ff ff ff ff a0 a0 a0 a0 a4 ff ff ff     ................
    20da:	a0 a0 a0 a0 a0 a4 ff ff a0 a0 a0 a0 a0 a0 a4 ff     ................
    20ea:	a0 a0 a0 a0 a0 a0 a4 ff a0 a0 a0 a0 a0 a0 a0 a4     ................
    20fa:	ab ab ab ab ab ab ab ab ff ab ab ab ab ab ab ab     ................
    210a:	ff ff ff ab ab ab ab ab ff ff ff ff ab ab ab ab     ................
    211a:	ff ff ff ff ff ab ab ab ff ff ff ff ff ff ab ab     ................
    212a:	ff ff ff ff ff ff ab ab ff ff ff ff ff ff ff ab     ................
	...
    2152:	00 00 00 e3 00 00 00 00 00 00 e3 ff e3 00 00 00     ................
    2162:	00 00 00 e3 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    217a:	ab a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    218a:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    219a:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    21aa:	a0 a0 a0 a0 a0 a0 a0 a0 ab a0 a0 a0 a0 a0 a0 a0     ................
    21ba:	a0 a0 a0 a0 a0 a0 a0 a4 a0 a0 a0 a0 a0 a0 a0 a0     ................
    21ca:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    21da:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    21ea:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a4     ................
    21fa:	ff ff ff ff ff ff ff ab a4 ff ff ff ff ff ff ff     ................
    220a:	a4 ff ff ff ff ff ff ff a4 ff ff ff ff ff ff ff     ................
    221a:	a4 ff ff ff ff ff ff ff a4 ff ff ff ff ff ff ff     ................
    222a:	a4 ff ff ff ff ff ff ff ff ff ff ff ff ff ff ab     ................
    223a:	ab a0 a0 a0 a0 a0 a0 a0 ab ab a0 a0 a0 a0 a0 a0     ................
    224a:	ab ab a0 a0 a0 a0 a0 a0 ab ab ab a0 a0 a0 a0 a0     ................
    225a:	ab ab ab ab a0 a0 a0 a0 ab ab ab ab ab a0 a0 a0     ................
    226a:	ab ab ab ab ab ab ab a0 ab ab ab ab ab ab ab ab     ................
    227a:	a0 a0 a0 a0 a0 a0 a0 a4 a0 a0 a0 a0 a0 a0 a4 ff     ................
    228a:	a0 a0 a0 a0 a0 a0 a4 ff a0 a0 a0 a0 a0 a4 ff ff     ................
    229a:	a0 a0 a0 a0 a4 ff ff ff a0 a0 a0 a4 ff ff ff ff     ................
    22aa:	a0 a0 a4 ff ff ff ff ff ab a4 ff ff ff ff ff ab     ................
    22ba:	ff ff ff ff ff ff ff ab ff ff ff ff ff ff ab ab     ................
    22ca:	ff ff ff ff ff ff ab ab ff ff ff ff ff ab ab ab     ................
    22da:	ff ff ff ff ab ab ab ab ff ff ff ab ab ab ab ab     ................
    22ea:	ff ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    22fa:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    230a:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    231a:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    232a:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
	...
    2346:	00 00 96 96 00 00 00 00 00 96 96 96 00 00 00 00     ................
    2356:	96 96 96 96 00 00 00 96 96 96 96 96 00 00 96 96     ................
    2366:	96 96 96 96 00 00 96 96 96 96 96 96 00 96 96 96     ................
    2376:	96 96 96 96 00 96 96 96 96 96 96 00 96 96 96 96     ................
    2386:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    2396:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    23a6:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    23b6:	96 96 96 96 00 00 00 00 00 00 00 00 96 96 00 00     ................
    23c6:	00 00 00 00 96 96 96 00 00 00 00 00 96 96 96 96     ................
    23d6:	00 00 00 00 96 96 96 96 96 00 00 00 96 96 96 96     ................
    23e6:	96 96 00 00 96 96 96 96 96 96 00 00 96 96 96 96     ................
    23f6:	96 96 96 00 bf bf bf bf bf bf bf bf 00 00 00 00     ................
	...
    243a:	00 96 96 96 95 96 96 96 00 96 96 96 95 96 96 96     ................
    244a:	96 96 96 96 96 95 96 96 96 96 96 96 96 95 96 96     ................
    245a:	96 96 96 96 96 96 95 96 96 96 96 96 96 bf 95 96     ................
    246a:	95 84 96 96 96 bf 96 95 8c 83 83 8c 96 bf 96 96     ................
    247a:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    248a:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    249a:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    24aa:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    24ba:	96 96 96 95 96 96 96 00 96 96 96 95 96 96 96 00     ................
    24ca:	96 96 95 96 96 96 96 96 96 96 95 96 96 96 96 96     ................
    24da:	96 95 96 96 96 96 96 96 96 95 96 96 96 96 95 96     ................
    24ea:	95 96 96 96 96 95 95 95 96 96 96 96 94 8c 8c 95     ................
    24fa:	82 82 82 82 82 bf 96 96 00 d8 d8 d8 bf ff bf 82     ................
    250a:	00 d8 d8 bf ff ff ff bf 00 d8 bf ff ff ff ff ff     ................
    251a:	bf bf ff ff ff ff ff ff 00 00 bf ff ff ff ff ff     ................
    252a:	00 00 94 bf ff ff ff bf 00 00 00 8c bf ff bf d8     ................
    253a:	96 96 96 96 96 96 96 96 83 83 8c 8c 8c 8c 8c 83     ................
    254a:	d8 d8 d8 d8 d8 d8 d8 d8 bf d8 d8 d8 d8 d8 d8 d8     ................
    255a:	ff bf bf d8 d8 d8 d8 d8 bf d8 d8 d8 d8 d8 d8 d8     ................
    256a:	d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 82 82     ................
    257a:	96 96 8c 83 83 8c 8c 8c 83 82 83 83 83 83 8c 00     ................
    258a:	82 82 82 83 83 83 83 00 82 82 82 83 83 83 83 00     ................
    259a:	d8 82 82 83 83 83 83 00 82 82 82 83 83 83 00 00     ................
    25aa:	82 82 83 83 83 95 00 00 82 82 83 83 95 00 00 00     ................
	...
    25f2:	bf bf bf bf bf bf bf bf 00 00 00 96 95 ff d8 d8     ................
    2602:	00 00 00 00 96 ff 83 82 00 00 00 00 00 ff 96 96     ................
    2612:	00 00 00 00 00 bf 96 96 00 00 00 00 00 bf 96 96     ................
    2622:	00 00 00 00 00 bf 96 96 00 00 00 00 00 bf 00 00     ................
    2632:	00 00 00 00 00 77 00 00 d8 d8 d8 82 82 82 82 82     .....w..........
    2642:	82 82 82 82 82 83 83 83 8c 8c 83 83 83 83 8c 95     ................
    2652:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    2662:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    2672:	00 96 96 96 96 96 96 00 83 83 8c 95 96 00 00 00     ................
    2682:	83 8c 96 96 00 00 00 00 96 96 96 00 00 00 00 00     ................
    2692:	96 96 96 00 00 00 00 00 96 96 00 00 00 00 00 00     ................
    26a2:	96 96 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    26be:	00 77 00 00 00 00 00 00 00 77 00 00 00 00 00 00     .w.......w......
    26ce:	00 77 00 00 00 00 00 00 00 77 00 00 00 00 00 00     .w.......w......
    26de:	00 77 00 00 00 00 00 00 00 77 00 00 00 00 00 00     .w.......w......
	...
    2742:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    2752:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    276a:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2906:	ff ff ff 00 00 00 00 ff ff ff 00 00 00 00 00 ff     ................
    2916:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
    2926:	ff ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 00     ................
	...
    2942:	00 ff ff ff 00 00 00 00 00 00 ff ff ff 00 00 00     ................
    2952:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    2962:	00 00 ff ff ff 00 00 00 00 ff ff ff 00 00 00 00     ................
	...
    2a22:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    2a32:	00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2a52:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    2aa2:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    2ac6:	00 ff ff 00 00 00 00 00 ff ff 00 00 00 00 00 ff     ................
    2ad6:	ff 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff 00     ................
    2ae6:	00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    2b02:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    2b12:	00 6f 6f 00 6f 6f 6f 00 00 6f 6f 6f 00 6f 6f 00     .oo.ooo..ooo.oo.
    2b22:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    2b42:	00 00 00 6f 6f 00 00 00 00 00 6f 6f 6f 00 00 00     ...oo.....ooo...
    2b52:	00 00 00 6f 6f 00 00 00 00 00 00 6f 6f 00 00 00     ...oo......oo...
    2b62:	00 00 00 6f 6f 00 00 00 00 6f 6f 6f 6f 6f 6f 00     ...oo....oooooo.
	...
    2b82:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    2b92:	00 00 00 00 6f 6f 00 00 00 00 00 6f 6f 00 00 00     ....oo.....oo...
    2ba2:	00 00 6f 6f 00 00 00 00 00 6f 6f 6f 6f 6f 6f 00     ..oo.....oooooo.
	...
    2bc2:	00 6f 6f 6f 6f 6f 6f 00 00 00 00 00 6f 6f 00 00     .oooooo.....oo..
    2bd2:	00 00 00 6f 6f 00 00 00 00 00 00 00 6f 6f 00 00     ...oo.......oo..
    2be2:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    2c06:	6f 6f 00 00 00 00 00 6f 6f 6f 00 00 00 00 6f 6f     oo.....ooo....oo
    2c16:	6f 6f 00 00 00 6f 6f 00 6f 6f 00 00 00 6f 6f 6f     oo...oo.oo...ooo
    2c26:	6f 6f 6f 00 00 00 00 00 6f 6f 00 00 00 00 00 00     ooo.....oo......
	...
    2c42:	00 6f 6f 6f 6f 6f 6f 00 00 6f 6f 00 00 00 00 00     .oooooo..oo.....
    2c52:	00 6f 6f 6f 6f 6f 00 00 00 00 00 00 00 6f 6f 00     .ooooo.......oo.
    2c62:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    2c82:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 00 00 00     ..oooo...oo.....
    2c92:	00 6f 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     .ooooo...oo..oo.
    2ca2:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    2cc2:	00 6f 6f 6f 6f 6f 6f 00 00 00 00 00 00 6f 6f 00     .oooooo......oo.
    2cd2:	00 00 00 00 6f 6f 00 00 00 00 00 6f 6f 00 00 00     ....oo.....oo...
    2ce2:	00 00 6f 6f 00 00 00 00 00 00 6f 6f 00 00 00 00     ..oo......oo....
	...
    2d02:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    2d12:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    2d22:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    2d42:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    2d52:	00 00 6f 6f 6f 6f 6f 00 00 00 00 00 00 6f 6f 00     ..ooooo......oo.
    2d62:	00 00 00 00 6f 6f 00 00 00 00 6f 6f 6f 00 00 00     ....oo....ooo...
	...
    2dba:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    2dca:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    2dda:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    2dea:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    2ec2:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    2ed2:	00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    2eea:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2f02:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    2f12:	00 ff ff 00 ff ff ff 00 00 ff ff 00 ff ff ff 00     ................
    2f22:	00 ff ff 00 00 00 00 00 00 00 ff ff ff ff ff 00     ................
	...
    2f42:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    2f52:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    2f62:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    2f82:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    2f92:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    2fa2:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
	...
    2fc2:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    2fd2:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    2fe2:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    3002:	00 ff ff ff ff 00 00 00 00 ff ff 00 ff ff 00 00     ................
    3012:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    3022:	00 ff ff 00 ff ff 00 00 00 ff ff ff ff 00 00 00     ................
	...
    3042:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    3052:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    3062:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    3082:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    3092:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    30a2:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    30c2:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    30d2:	00 ff ff 00 00 00 00 00 00 ff ff 00 ff ff ff 00     ................
    30e2:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
	...
    3102:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    3112:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    3122:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    3142:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    3152:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    3162:	00 00 00 ff ff 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    3186:	ff ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    3196:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 ff ff 00     ................
    31a6:	00 ff ff 00 00 00 ff ff ff ff 00 00 00 00 00 00     ................
	...
    31c2:	00 ff ff 00 00 ff ff 00 00 ff ff 00 ff ff 00 00     ................
    31d2:	00 ff ff ff ff 00 00 00 00 ff ff ff ff 00 00 00     ................
    31e2:	00 ff ff 00 ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
	...
    3202:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    3212:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    3222:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    3242:	00 ff ff 00 00 00 ff ff 00 ff ff ff 00 ff ff ff     ................
    3252:	00 ff ff ff ff ff ff ff 00 ff ff 00 ff 00 ff ff     ................
    3262:	00 ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff     ................
	...
    3282:	00 ff ff 00 00 ff ff 00 00 ff ff ff 00 ff ff 00     ................
    3292:	00 ff ff ff ff ff ff 00 00 ff ff ff ff ff ff 00     ................
    32a2:	00 ff ff 00 ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    32c2:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    32d2:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    32e2:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    3302:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    3312:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    3322:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    3342:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    3352:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    3362:	00 ff ff 00 ff ff 00 00 00 00 ff ff 00 ff ff 00     ................
	...
    3382:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    3392:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    33a2:	00 ff ff 00 ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
	...
    33c2:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    33d2:	00 00 ff ff ff ff 00 00 00 00 00 00 00 ff ff 00     ................
    33e2:	00 00 00 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    3402:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    3412:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    3422:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    3442:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    3452:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    3462:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff ff 00     ................
	...
    3482:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    3492:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    34a2:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    34c2:	00 ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff     ................
    34d2:	00 ff ff 00 ff 00 ff ff 00 ff ff ff ff ff ff ff     ................
    34e2:	00 ff ff ff 00 ff ff ff 00 ff ff 00 00 00 ff ff     ................
	...
    3502:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    3512:	00 00 ff ff ff ff 00 00 00 00 ff ff ff ff 00 00     ................
    3522:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    3542:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    3552:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
    3562:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    3582:	00 ff ff ff ff ff ff 00 00 00 00 00 ff ff 00 00     ................
    3592:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    35a2:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    36ea:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................

000036fa <map_star>:
    36fa:	01 01 0c                                            ...

000036fd <map_ice_moon>:
    36fd:	03 03 09 0a 0b 0d 0e 0f 10 11 12                    ...........

00003708 <map_ice_cloud>:
    3708:	01 01 08                                            ...

0000370b <map_ice_far>:
    370b:	01 01 07                                            ...

0000370e <map_ice_sky>:
    370e:	01 01 06                                            ...

00003711 <map_ice_horizon>:
    3711:	01 01 05                                            ...

00003714 <map_ice_bottom>:
    3714:	01 01 04                                            ...

00003717 <map_ice_right>:
    3717:	01 01 03                                            ...

0000371a <map_ice_middle>:
    371a:	01 01 02                                            ...

0000371d <map_ice_left>:
    371d:	01 01 01                                            ...

00003720 <map_splash>:
    3720:	0f 05 13 13 13 00 13 13 13 00 14 15 16 00 13 13     ................
    3730:	13 17 13 17 00 13 17 17 00 18 19 1a 00 13 17 17     ................
    3740:	00 13 00 00 13 00 00 00 1b 1c 1d 00 13 13 13 1e     ................
    3750:	13 1e 00 13 00 00 00 1f 20 21 00 1e 1e 13 13 13     ........ !......
    3760:	13 00 13 00 00 00 22 00 00 00 13 13 13              ......"......

0000376d <map_tile_none>:
    376d:	01 01 00                                            ...

00003770 <__ctors_end>:
    3770:	11 24       	eor	r1, r1
    3772:	1f be       	out	0x3f, r1	; 63
    3774:	cf ef       	ldi	r28, 0xFF	; 255
    3776:	d0 e1       	ldi	r29, 0x10	; 16
    3778:	de bf       	out	0x3e, r29	; 62
    377a:	cd bf       	out	0x3d, r28	; 61

0000377c <__do_copy_data>:
    377c:	15 e0       	ldi	r17, 0x05	; 5
    377e:	a0 e0       	ldi	r26, 0x00	; 0
    3780:	b5 e0       	ldi	r27, 0x05	; 5
    3782:	e2 e9       	ldi	r30, 0x92	; 146
    3784:	fc e6       	ldi	r31, 0x6C	; 108
    3786:	02 c0       	rjmp	.+4      	; 0x378c <__do_copy_data+0x10>
    3788:	05 90       	lpm	r0, Z+
    378a:	0d 92       	st	X+, r0
    378c:	a2 30       	cpi	r26, 0x02	; 2
    378e:	b1 07       	cpc	r27, r17
    3790:	d9 f7       	brne	.-10     	; 0x3788 <__do_copy_data+0xc>

00003792 <__do_clear_bss>:
    3792:	1e e0       	ldi	r17, 0x0E	; 14
    3794:	a2 e0       	ldi	r26, 0x02	; 2
    3796:	b5 e0       	ldi	r27, 0x05	; 5
    3798:	01 c0       	rjmp	.+2      	; 0x379c <.do_clear_bss_start>

0000379a <.do_clear_bss_loop>:
    379a:	1d 92       	st	X+, r1

0000379c <.do_clear_bss_start>:
    379c:	ad 39       	cpi	r26, 0x9D	; 157
    379e:	b1 07       	cpc	r27, r17
    37a0:	e1 f7       	brne	.-8      	; 0x379a <.do_clear_bss_loop>

000037a2 <wdt_init>:

void wdt_init(void)
{

#if TRUE_RANDOM_GEN == 1	
	wdt_randomize();
    37a2:	0e 94 73 21 	call	0x42e6	; 0x42e6 <wdt_randomize>
#endif

    MCUSR = 0;
    37a6:	14 be       	out	0x34, r1	; 52
    wdt_disable();
    37a8:	88 e1       	ldi	r24, 0x18	; 24
    37aa:	0f b6       	in	r0, 0x3f	; 63
    37ac:	f8 94       	cli
    37ae:	80 93 60 00 	sts	0x0060, r24
    37b2:	10 92 60 00 	sts	0x0060, r1
    37b6:	0f be       	out	0x3f, r0	; 63

000037b8 <Initialize>:


void Initialize(void){
	int i;

	if(!isEepromFormatted()) FormatEeprom();
    37b8:	0e 94 30 22 	call	0x4460	; 0x4460 <isEepromFormatted>
    37bc:	81 11       	cpse	r24, r1
    37be:	02 c0       	rjmp	.+4      	; 0x37c4 <Initialize+0xc>
    37c0:	0e 94 0e 22 	call	0x441c	; 0x441c <FormatEeprom>

	cli();
    37c4:	f8 94       	cli
		mix_bank=0;
	#endif
	
	#if MIXER_CHAN4_TYPE == 0
		//initialize LFSR		
		tr4_barrel_lo=1;
    37c6:	81 e0       	ldi	r24, 0x01	; 1
    37c8:	80 93 cc 0c 	sts	0x0CCC, r24
		tr4_barrel_hi=1;		
    37cc:	80 93 cd 0c 	sts	0x0CCD, r24
		tr4_params=0b00000001; //15 bits no divider (1)
    37d0:	80 93 cb 0c 	sts	0x0CCB, r24
		snesMouseEnabled=false;
	#endif

	//silence all sound channels
	for(i=0;i<CHANNELS;i++){
		mixer.channels.all[i].volume=0;
    37d4:	10 92 b8 0c 	sts	0x0CB8, r1
    37d8:	10 92 be 0c 	sts	0x0CBE, r1
    37dc:	10 92 c4 0c 	sts	0x0CC4, r1
    37e0:	10 92 ca 0c 	sts	0x0CCA, r1
    37e4:	10 92 d0 0c 	sts	0x0CD0, r1
	}
	
	//set sync parameters. starts at odd field, in pre-eq pulses, line 1, vsync flag cleared
	sync_phase=0;
    37e8:	10 92 a0 0c 	sts	0x0CA0, r1
	sync_flags=0;
    37ec:	10 92 a2 0c 	sts	0x0CA2, r1
	sync_pulse=SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES;
    37f0:	92 e1       	ldi	r25, 0x12	; 18
    37f2:	90 93 a1 0c 	sts	0x0CA1, r25

	//set rendering parameters
	render_lines_count=FRAME_LINES;
    37f6:	90 ee       	ldi	r25, 0xE0	; 224
    37f8:	90 93 a8 0c 	sts	0x0CA8, r25
	first_render_line=FIRST_RENDER_LINE;
    37fc:	94 e1       	ldi	r25, 0x14	; 20
    37fe:	90 93 a7 0c 	sts	0x0CA7, r25

	joypad1_status_hi=0;
    3802:	10 92 ac 0c 	sts	0x0CAC, r1
    3806:	10 92 ab 0c 	sts	0x0CAB, r1
	joypad2_status_hi=0;
    380a:	10 92 b0 0c 	sts	0x0CB0, r1
    380e:	10 92 af 0c 	sts	0x0CAF, r1
	sound_enabled=1;
    3812:	80 93 b7 0c 	sts	0x0CB7, r24

	InitializeVideoMode();
    3816:	0e 94 4d 2e 	call	0x5c9a	; 0x5c9a <InitializeVideoMode>
    381a:	8e e7       	ldi	r24, 0x7E	; 126
    381c:	90 e0       	ldi	r25, 0x00	; 0
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
		val=pgm_read_word(&io_table[j]);
    381e:	fc 01       	movw	r30, r24
    3820:	25 91       	lpm	r18, Z+
    3822:	34 91       	lpm	r19, Z
		ptr=(u8*)(val&0xff);
    3824:	f9 01       	movw	r30, r18
    3826:	ff 27       	eor	r31, r31
		*ptr=val>>8;	
    3828:	30 83       	st	Z, r19
    382a:	02 96       	adiw	r24, 0x02	; 2
	InitializeVideoMode();
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
    382c:	20 e0       	ldi	r18, 0x00	; 0
    382e:	8c 3a       	cpi	r24, 0xAC	; 172
    3830:	92 07       	cpc	r25, r18
    3832:	a9 f7       	brne	.-22     	; 0x381e <Initialize+0x66>
		val=pgm_read_word(&io_table[j]);
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;	
	}

	sei();
    3834:	78 94       	sei
	
	DisplayLogo();
    3836:	0e 94 db 2e 	call	0x5db6	; 0x5db6 <DisplayLogo>
    383a:	0e 94 5e 34 	call	0x68bc	; 0x68bc <main>
    383e:	0c 94 47 36 	jmp	0x6c8e	; 0x6c8e <_exit>

00003842 <__bad_interrupt>:
    3842:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00003846 <sub_video_mode3>:
	;***************************************************

	sub_video_mode3:
		;de-activate sync timer interrupts
		;we will need to use the I flag to branch in a critical loop
		ldi ZL,(0<<OCIE1A)
    3846:	e0 e0       	ldi	r30, 0x00	; 0
		sts _SFR_MEM_ADDR(TIMSK1),ZL
    3848:	e0 93 6f 00 	sts	0x006F, r30

		;wait cycles to align with next hsync
		WAIT r26,183+241
    384c:	ad e8       	ldi	r26, 0x8D	; 141
    384e:	aa 95       	dec	r26
    3850:	f1 f7       	brne	.-4      	; 0x384e <sub_video_mode3+0x8>
    3852:	00 00       	nop

		;Refresh ramtiles indexes in VRAM
		;This has to be done because the main
		;program may have altered the VRAM
		;after vsync and the rendering interrupt.
		lds r16,userRamTilesCount
    3854:	00 91 db 0c 	lds	r16, 0x0CDB

		ldi ZL,lo8(ram_tiles_restore);
    3858:	ea e3       	ldi	r30, 0x3A	; 58
		ldi ZH,hi8(ram_tiles_restore);
    385a:	fc e0       	ldi	r31, 0x0C	; 12
		ldi r18,3
    385c:	23 e0       	ldi	r18, 0x03	; 3
		mul r16,r18
    385e:	02 9f       	mul	r16, r18
		add ZL,r0
    3860:	e0 0d       	add	r30, r0
		adc ZH,r1
    3862:	f1 1d       	adc	r31, r1

		ldi YL,lo8(vram)
    3864:	c0 e0       	ldi	r28, 0x00	; 0
		ldi YH,hi8(vram)
    3866:	d1 e0       	ldi	r29, 0x01	; 1

		lds r18,free_tile_index
    3868:	20 91 6b 0d 	lds	r18, 0x0D6B
		ldi r19,MAX_RAMTILES		;maximum possible ramtiles
    386c:	3c e3       	ldi	r19, 0x3C	; 60
		sub r19,r18					;sub free tile
    386e:	32 1b       	sub	r19, r18
		add r19,r16					;add user tiles
    3870:	30 0f       	add	r19, r16

		cp r18,r16
    3872:	20 17       	cp	r18, r16
		breq no_ramtiles
    3874:	51 f0       	breq	.+20     	; 0x388a <no_ramtiles>
		nop
    3876:	00 00       	nop
	...

0000387a <upd_loop>:
		nop
upd_loop:
		ld XL,Z+	;load vram offset of ramtile
    387a:	a1 91       	ld	r26, Z+
		ld XH,Z+
    387c:	b1 91       	ld	r27, Z+

		ld r17,X	;get latest VRAM tile that may have been modified my
    387e:	1c 91       	ld	r17, X
		st Z+,r17	;the main program and store it in the restore buffer
    3880:	11 93       	st	Z+, r17
		st X,r16	;write the ramtile index back to vram
    3882:	0c 93       	st	X, r16

		inc r16
    3884:	03 95       	inc	r16
		cp r16,r18
    3886:	02 17       	cp	r16, r18
		brlo upd_loop ;loop is 14 cycles
    3888:	c0 f3       	brcs	.-16     	; 0x387a <upd_loop>

0000388a <no_ramtiles>:

no_ramtiles:
		;wait for remaining maximum possible ramtiles
1:
		ldi r17,3
    388a:	13 e0       	ldi	r17, 0x03	; 3
		dec r17
    388c:	1a 95       	dec	r17
		brne .-4
    388e:	f1 f7       	brne	.-4      	; 0x388c <no_ramtiles+0x2>
		rjmp .
    3890:	00 c0       	rjmp	.+0      	; 0x3892 <no_ramtiles+0x8>
		dec r19
    3892:	3a 95       	dec	r19
		brne 1b
    3894:	d1 f7       	brne	.-12     	; 0x388a <no_ramtiles>

		;**********************
		; setup scroll stuff
		;**********************
	
		ldi YL,lo8(vram)
    3896:	c0 e0       	ldi	r28, 0x00	; 0
		ldi YH,hi8(vram)
    3898:	d1 e0       	ldi	r29, 0x01	; 1

		//add X scroll (coarse)
		lds r18,screen_scrollX ;ScreenScrollX
    389a:	20 91 9c 0c 	lds	r18, 0x0C9C
		mov r25,r18
    389e:	92 2f       	mov	r25, r18
		andi r18,0xf8	;(x>>3) * 8 interleave
    38a0:	28 7f       	andi	r18, 0xF8	; 248
		add YL,r18
    38a2:	c2 0f       	add	r28, r18

		;save Y wrap adress 
		movw r12,YL
    38a4:	6e 01       	movw	r12, r28
	

		//add Y scroll (coarse)
		lds r16,screen_scrollY ;ScreenScrollY
    38a6:	00 91 9d 0c 	lds	r16, 0x0C9D
		mov r22,r16
    38aa:	60 2f       	mov	r22, r16
		lsr r16
    38ac:	06 95       	lsr	r16
		lsr r16
    38ae:	06 95       	lsr	r16
		lsr r16 ;/8
    38b0:	06 95       	lsr	r16

        lds r17,screen_scrollHeight
    38b2:	10 91 9e 0c 	lds	r17, 0x0C9E
        sub r17,r16
    38b6:	10 1b       	sub	r17, r16
        mov r15,r17 ;Y tiles to draw before wrapping
    38b8:	f1 2e       	mov	r15, r17

        mov r17,r16
    38ba:	10 2f       	mov	r17, r16
        lsr r16
    38bc:	06 95       	lsr	r16
        lsr r16
    38be:	06 95       	lsr	r16
        lsr r16 ;/8
    38c0:	06 95       	lsr	r16
		add YH,r16      ; (bits 6-7)
    38c2:	d0 0f       	add	r29, r16
		andi r17,0x7
    38c4:	17 70       	andi	r17, 0x07	; 7
        add YL,r17      ;interleave (bits 3-5)
    38c6:	c1 0f       	add	r28, r17
        andi r22,0x7    ;fine Y scrolling (bits 0-2)
    38c8:	67 70       	andi	r22, 0x07	; 7
		;lds r20,tile_table_lo
		;lds r21,tile_table_hi
		;out _SFR_IO_ADDR(GPIOR1),r20 ;store for later
		;out _SFR_IO_ADDR(GPIOR2),r21

		lds r20,overlay_tile_table
    38ca:	40 91 9a 0c 	lds	r20, 0x0C9A
		lds r21,overlay_tile_table+1
    38ce:	50 91 9b 0c 	lds	r21, 0x0C9B
		lds r6,tile_table_lo
    38d2:	60 90 96 0c 	lds	r6, 0x0C96
		lds r7,tile_table_hi
    38d6:	70 90 97 0c 	lds	r7, 0x0C97
		out _SFR_IO_ADDR(GPIOR1),r6 ;store for later
    38da:	6a bc       	out	0x2a, r6	; 42
		out _SFR_IO_ADDR(GPIOR2),r7
    38dc:	7b bc       	out	0x2b, r7	; 43


		;save main section value	
		movw r10,YL
    38de:	5e 01       	movw	r10, r28
		mov r23,r22
    38e0:	76 2f       	mov	r23, r22
		mov r24,r15
    38e2:	8f 2d       	mov	r24, r15
		mov r9,r25
    38e4:	99 2e       	mov	r9, r25

		;load values for overlay if it's activated (overlay_height>0)
		
		;compute beginning of overlay in vram 
		lds r16,screen_scrollHeight
    38e6:	00 91 9e 0c 	lds	r16, 0x0C9E
		mov r18,r16
    38ea:	20 2f       	mov	r18, r16
		lsr r16
    38ec:	06 95       	lsr	r16
		lsr r16
    38ee:	06 95       	lsr	r16
		lsr r16			;hi8
    38f0:	06 95       	lsr	r16
		inc r16			;add 0x100 ram offset
    38f2:	03 95       	inc	r16
		andi r18,7		;lo8
    38f4:	27 70       	andi	r18, 0x07	; 7
		
		lds r19,overlay_height	
    38f6:	30 91 99 0c 	lds	r19, 0x0C99
		cpi r19,0
    38fa:	30 30       	cpi	r19, 0x00	; 0
		in r0, _SFR_IO_ADDR(SREG)
    38fc:	0f b6       	in	r0, 0x3f	; 63

		sbrs r0,SREG_Z
    38fe:	01 fe       	sbrs	r0, 1
		clr r22
    3900:	66 27       	eor	r22, r22
		sbrs r0,SREG_Z
    3902:	01 fe       	sbrs	r0, 1
		mov YL,r18		;lo8(overlay_vram)
    3904:	c2 2f       	mov	r28, r18
		sbrs r0,SREG_Z
    3906:	01 fe       	sbrs	r0, 1
		mov YH,r16		;hi8(overlay_vram)
    3908:	d0 2f       	mov	r29, r16
		sbrs r0,SREG_Z
    390a:	01 fe       	sbrs	r0, 1
		ser r24
    390c:	8f ef       	ldi	r24, 0xFF	; 255
		sbrs r0,SREG_Z
    390e:	01 fe       	sbrs	r0, 1
		clr r9
    3910:	99 24       	eor	r9, r9

		sbrs r0,SREG_Z
    3912:	01 fe       	sbrs	r0, 1
		out _SFR_IO_ADDR(GPIOR1),r20
    3914:	4a bd       	out	0x2a, r20	; 42
		sbrs r0,SREG_Z
    3916:	01 fe       	sbrs	r0, 1
		out _SFR_IO_ADDR(GPIOR2),r21
    3918:	5b bd       	out	0x2b, r21	; 43


		//ldi r16,SCREEN_TILES_V*TILE_HEIGHT; total scanlines to draw
		//mov r8,r16
		lds r8,render_lines_count ;total scanlines to draw
    391a:	80 90 a8 0c 	lds	r8, 0x0CA8

0000391e <next_tile_line>:
	;r23 = Main section tile row
	;r24 = Current Y tiles to draw before wrapping
	;r25 = Main section scrollX

	next_tile_line:
		rcall hsync_pulse
    391e:	bc d3       	rcall	.+1912   	; 0x4098 <hsync_pulse>

		WAIT r18,HSYNC_USABLE_CYCLES - AUDIO_OUT_HSYNC_CYCLES
    3920:	24 e0       	ldi	r18, 0x04	; 4
    3922:	2a 95       	dec	r18
    3924:	f1 f7       	brne	.-4      	; 0x3922 <next_tile_line+0x4>
    3926:	00 00       	nop
				
		call render_tile_line
    3928:	0e 94 d5 1c 	call	0x39aa	; 0x39aa <render_tile_line>

		WAIT r18,58
    392c:	23 e1       	ldi	r18, 0x13	; 19
    392e:	2a 95       	dec	r18
    3930:	f1 f7       	brne	.-4      	; 0x392e <next_tile_line+0x10>
    3932:	00 00       	nop

		inc r22
    3934:	63 95       	inc	r22
		dec r8
    3936:	8a 94       	dec	r8
		breq text_frame_end
    3938:	09 f1       	breq	.+66     	; 0x397c <text_frame_end>

		cpi r22,TILE_HEIGHT ;last char line? 1
    393a:	68 30       	cpi	r22, 0x08	; 8
		breq next_tile_row
    393c:	29 f0       	breq	.+10     	; 0x3948 <next_tile_row>

		;wait to align with next_tile_row instructions (+1 cycle for the breq)
		WAIT r16,25
    393e:	08 e0       	ldi	r16, 0x08	; 8
    3940:	0a 95       	dec	r16
    3942:	f1 f7       	brne	.-4      	; 0x3940 <next_tile_line+0x22>
    3944:	00 00       	nop
		rjmp next_tile_line
    3946:	eb cf       	rjmp	.-42     	; 0x391e <next_tile_line>

00003948 <next_tile_row>:

	next_tile_row:

		clr r22		;clear current char line
    3948:	66 27       	eor	r22, r22

		;increment vram pointer next row
		mov r16,YL
    394a:	0c 2f       	mov	r16, r28
		andi r16,0x7
    394c:	07 70       	andi	r16, 0x07	; 7
		cpi r16,7
    394e:	07 30       	cpi	r16, 0x07	; 7
		breq 1f
    3950:	11 f0       	breq	.+4      	; 0x3956 <next_tile_row+0xe>
		inc YL
    3952:	c3 95       	inc	r28
		rjmp 2f
    3954:	02 c0       	rjmp	.+4      	; 0x395a <next_tile_row+0x12>
	1:
		andi YL,0xf8
    3956:	c8 7f       	andi	r28, 0xF8	; 248
		inc YH
    3958:	d3 95       	inc	r29
	2:

		dec r24		;wrap section?
    395a:	8a 95       	dec	r24
		brne .+2
    395c:	09 f4       	brne	.+2      	; 0x3960 <next_tile_row+0x18>
		movw YL,r12
    395e:	e6 01       	movw	r28, r12

		dec r19
    3960:	3a 95       	dec	r19
		brne .+2
    3962:	09 f4       	brne	.+2      	; 0x3966 <next_tile_row+0x1e>
		mov r22,r23	;section tile row
    3964:	67 2f       	mov	r22, r23
		brne .+2
    3966:	09 f4       	brne	.+2      	; 0x396a <next_tile_row+0x22>
		movw YL,r10 ;vram adress
    3968:	e5 01       	movw	r28, r10
		brne .+2
    396a:	09 f4       	brne	.+2      	; 0x396e <next_tile_row+0x26>
		mov r24,r15 ;Y wrapping
    396c:	8f 2d       	mov	r24, r15
		brne .+2
    396e:	09 f4       	brne	.+2      	; 0x3972 <next_tile_row+0x2a>
		mov r9,r25  ;scrollX
    3970:	99 2e       	mov	r9, r25

		brne .+2
    3972:	09 f4       	brne	.+2      	; 0x3976 <next_tile_row+0x2e>
		out _SFR_IO_ADDR(GPIOR1),r6  ;tileset
    3974:	6a bc       	out	0x2a, r6	; 42
		brne .+2
    3976:	09 f4       	brne	.+2      	; 0x397a <next_tile_row+0x32>
		out _SFR_IO_ADDR(GPIOR2),r7  ;tilset
    3978:	7b bc       	out	0x2b, r7	; 43

		rjmp next_tile_line
    397a:	d1 cf       	rjmp	.-94     	; 0x391e <next_tile_line>

0000397c <text_frame_end>:

	text_frame_end:

		WAIT r18,28
    397c:	29 e0       	ldi	r18, 0x09	; 9
    397e:	2a 95       	dec	r18
    3980:	f1 f7       	brne	.-4      	; 0x397e <text_frame_end+0x2>
    3982:	00 00       	nop

		rcall hsync_pulse ;145
    3984:	89 d3       	rcall	.+1810   	; 0x4098 <hsync_pulse>
	
		clr r1
    3986:	11 24       	eor	r1, r1
		call RestoreBackground
    3988:	0e 94 00 2d 	call	0x5a00	; 0x5a00 <RestoreBackground>

		;set vsync flag & flip field
		lds ZL,sync_flags
    398c:	e0 91 a2 0c 	lds	r30, 0x0CA2
		ldi r20,SYNC_FLAG_FIELD
    3990:	42 e0       	ldi	r20, 0x02	; 2
		ori ZL,SYNC_FLAG_VSYNC
    3992:	e1 60       	ori	r30, 0x01	; 1
		eor ZL,r20
    3994:	e4 27       	eor	r30, r20
		sts sync_flags,ZL
    3996:	e0 93 a2 0c 	sts	0x0CA2, r30
	
		cli 
    399a:	f8 94       	cli

		;re-activate sync timer interrupts
		ldi ZL,(1<<OCIE1A)
    399c:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIMSK1),ZL
    399e:	e0 93 6f 00 	sts	0x006F, r30
			
		;clear any pending timer int
		ldi ZL,(1<<OCF1A)
    39a2:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIFR1),ZL
    39a4:	e0 93 36 00 	sts	0x0036, r30

		ret
    39a8:	08 95       	ret

000039aa <render_tile_line>:
	; Can destroy: r0,r1,r2,r3,r4,r5,r6,r7,r13,r16,r17,r18,r19,r20,r21,Z
	; 
	; cycles  = 1495
	;*************************************************
	render_tile_line:
		push YL
    39aa:	cf 93       	push	r28
		push YH
    39ac:	df 93       	push	r29
		push r23
    39ae:	7f 93       	push	r23
		push r22
    39b0:	6f 93       	push	r22
		push r19
    39b2:	3f 93       	push	r19
		push r13
    39b4:	df 92       	push	r13
		push r12
    39b6:	cf 92       	push	r12
		push r9
    39b8:	9f 92       	push	r9
		push r7
    39ba:	7f 92       	push	r7
		push r6
    39bc:	6f 92       	push	r6
		;--------------------------
		; Rendering 
		;---------------------------

		;get tile row offset
		ldi r23,TILE_WIDTH ;tile width in pixels
    39be:	78 e0       	ldi	r23, 0x08	; 8
		mul r22,r23
    39c0:	67 9f       	mul	r22, r23

		;compute base adresses for ROM and RAM tiles
		in r16,_SFR_IO_ADDR(GPIOR1) ;tile_table_lo
    39c2:	0a b5       	in	r16, 0x2a	; 42
		in r17,_SFR_IO_ADDR(GPIOR2) ;tile_table_hi
    39c4:	1b b5       	in	r17, 0x2b	; 43
		subi r16,lo8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    39c6:	00 50       	subi	r16, 0x00	; 0
		sbci r17,hi8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    39c8:	17 40       	sbci	r17, 0x07	; 7

		add r16,r0
    39ca:	00 0d       	add	r16, r0
		adc r17,r1
    39cc:	11 1d       	adc	r17, r1
		movw r2,r16			;rom tiles adress
    39ce:	18 01       	movw	r2, r16

		ldi r16,lo8(ram_tiles)
    39d0:	0a e3       	ldi	r16, 0x3A	; 58
		ldi r17,hi8(ram_tiles)
    39d2:	15 e0       	ldi	r17, 0x05	; 5
		add r16,r0
    39d4:	00 0d       	add	r16, r0
		adc r17,r1
    39d6:	11 1d       	adc	r17, r1
		movw r4,r16			;ram tiles adress
    39d8:	28 01       	movw	r4, r16

		ldi r19,TILE_HEIGHT*TILE_WIDTH
    39da:	30 e4       	ldi	r19, 0x40	; 64
		ldi r17,SCREEN_TILES_H-1	;main loop counter
    39dc:	1b e1       	ldi	r17, 0x1B	; 27


		;handle fine scroll offset
		;lds r22,screenSections+scrollX
		mov r22,r9
    39de:	69 2d       	mov	r22, r9
		andi r22,0x7		
    39e0:	67 70       	andi	r22, 0x07	; 7
		mov r14,r22	;pixels to draw on last tile	
    39e2:	e6 2e       	mov	r14, r22
		cli			;no trailing pixel to draw (hack, see end: )
    39e4:	f8 94       	cli
		breq .+2
    39e6:	09 f0       	breq	.+2      	; 0x39ea <render_tile_line+0x40>
		sei			;some trailing pixel to draw (hack, see end: )
    39e8:	78 94       	sei

		;get first pixel of last tile in ROM (for ROM tiles fine scroll)
		;and adress of next pixel
		movw ZL,YL
    39ea:	fe 01       	movw	r30, r28
		subi ZL,-(SCREEN_TILES_H*8)
    39ec:	e0 52       	subi	r30, 0x20	; 32
		ld r18,Z
    39ee:	20 81       	ld	r18, Z
		mul r18,r19 	;tile*width*height
    39f0:	23 9f       	mul	r18, r19
	    add r0,r2    ;add ROM title table address +row offset
    39f2:	02 0c       	add	r0, r2
	    adc r1,r3
    39f4:	13 1c       	adc	r1, r3
		movw ZL,r0
    39f6:	f0 01       	movw	r30, r0
		lpm r9,Z+	;hold first pixel until end 
    39f8:	95 90       	lpm	r9, Z+
		movw r12,ZL ;hold second pixel adress until end
    39fa:	6f 01       	movw	r12, r30


		;compute first tile adress
	    ld r18,Y     	;load next tile # from VRAM
    39fc:	28 81       	ld	r18, Y
		subi YL,-8
    39fe:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT
    3a00:	2c 31       	cpi	r18, 0x1C	; 28
		in r16,_SFR_IO_ADDR(SREG)	;save the carry flag for later	
    3a02:	0f b7       	in	r16, 0x3f	; 63
		mul r18,r19 	;tile*width*height
    3a04:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles	
    3a06:	a1 01       	movw	r20, r2
		sbrc r16,SREG_C
    3a08:	00 fd       	sbrc	r16, 0
		movw r20,r4		;ram tiles
    3a0a:	a2 01       	movw	r20, r4
	    add r0,r20    ;add title table address +row offset
    3a0c:	04 0e       	add	r0, r20
	    adc r1,r21
    3a0e:	15 1e       	adc	r1, r21
		movw XL,r0
    3a10:	d0 01       	movw	r26, r0


		;compute second tile adress
	    ld r18,Y     	;load next tile # from VRAM
    3a12:	28 81       	ld	r18, Y
		subi YL,-8
    3a14:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT
    3a16:	2c 31       	cpi	r18, 0x1C	; 28
		in r7,_SFR_IO_ADDR(SREG)	;save the carry flag for later
    3a18:	7f b6       	in	r7, 0x3f	; 63
		bst r7,SREG_C
    3a1a:	70 fa       	bst	r7, 0
		mul r18,r19 	;tile*width*height
    3a1c:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles
    3a1e:	a1 01       	movw	r20, r2
		brtc .+2
    3a20:	0e f4       	brtc	.+2      	; 0x3a24 <render_tile_line+0x7a>
		movw r20,r4		;ram tiles
    3a22:	a2 01       	movw	r20, r4
	    add r0,r20      ;add title table address +row offset
    3a24:	04 0e       	add	r0, r20
	    adc r1,r21
    3a26:	15 1e       	adc	r1, r21
		movw ZL,r0
    3a28:	f0 01       	movw	r30, r0
		movw r6,ZL		;push Z
    3a2a:	3f 01       	movw	r6, r30

00003a2c <do_fine_scroll>:


	do_fine_scroll:
		;output 1st tile with fine scroll offset 
		clr r0
    3a2c:	00 24       	eor	r0, r0
		add XL,r22	;add fine offset
    3a2e:	a6 0f       	add	r26, r22
		adc XH,r0
    3a30:	b0 1d       	adc	r27, r0

		;compute jump offset
		ldi r23,3
    3a32:	73 e0       	ldi	r23, 0x03	; 3
		mul r22,r23 ;3 instructions
    3a34:	67 9f       	mul	r22, r23
	
		sbrs r16,SREG_C
    3a36:	00 ff       	sbrs	r16, 0
		rjmp rom_fine_scroll
    3a38:	22 c0       	rjmp	.+68     	; 0x3a7e <rom_fine_scroll>

00003a3a <ram_fine_scroll>:

	/***FINE SCROLL RAM LOOP***/
	ram_fine_scroll:
		rjmp .
    3a3a:	00 c0       	rjmp	.+0      	; 0x3a3c <ram_fine_scroll+0x2>
		ldi r22,lo8(pm(ram_fine_scroll_loop))
    3a3c:	65 e2       	ldi	r22, 0x25	; 37
		ldi r23,hi8(pm(ram_fine_scroll_loop))
    3a3e:	7d e1       	ldi	r23, 0x1D	; 29
		add r22,r0
    3a40:	60 0d       	add	r22, r0
		adc r23,r1
    3a42:	71 1d       	adc	r23, r1
		push r22
    3a44:	6f 93       	push	r22
		push r23	
    3a46:	7f 93       	push	r23
		ret ;jump into ram_fine_scroll_loop
    3a48:	08 95       	ret

00003a4a <ram_fine_scroll_loop>:
	ram_fine_scroll_loop:
		.rept 8
			ld r16,X+
			lpm
			out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		.endr
    3a4a:	0d 91       	ld	r16, X+
    3a4c:	c8 95       	lpm
    3a4e:	08 b9       	out	0x08, r16	; 8
    3a50:	0d 91       	ld	r16, X+
    3a52:	c8 95       	lpm
    3a54:	08 b9       	out	0x08, r16	; 8
    3a56:	0d 91       	ld	r16, X+
    3a58:	c8 95       	lpm
    3a5a:	08 b9       	out	0x08, r16	; 8
    3a5c:	0d 91       	ld	r16, X+
    3a5e:	c8 95       	lpm
    3a60:	08 b9       	out	0x08, r16	; 8
    3a62:	0d 91       	ld	r16, X+
    3a64:	c8 95       	lpm
    3a66:	08 b9       	out	0x08, r16	; 8
    3a68:	0d 91       	ld	r16, X+
    3a6a:	c8 95       	lpm
    3a6c:	08 b9       	out	0x08, r16	; 8
    3a6e:	0d 91       	ld	r16, X+
    3a70:	c8 95       	lpm
    3a72:	08 b9       	out	0x08, r16	; 8
    3a74:	0d 91       	ld	r16, X+
    3a76:	c8 95       	lpm
    3a78:	08 b9       	out	0x08, r16	; 8

		;branch to tile #2
		brtc romloop
    3a7a:	1e f5       	brtc	.+70     	; 0x3ac2 <romloop>
		rjmp ramloop
    3a7c:	40 c0       	rjmp	.+128    	; 0x3afe <ramloop>

00003a7e <rom_fine_scroll>:

	/***FINE SCROLL ROM LOOP***/
	rom_fine_scroll:
		movw ZL,XL
    3a7e:	fd 01       	movw	r30, r26
		ldi r22,lo8(pm(rom_fine_scroll_loop))	
    3a80:	67 e4       	ldi	r22, 0x47	; 71
		ldi r23,hi8(pm(rom_fine_scroll_loop))
    3a82:	7d e1       	ldi	r23, 0x1D	; 29
		add r22,r0
    3a84:	60 0d       	add	r22, r0
		adc r23,r1
    3a86:	71 1d       	adc	r23, r1
		push r22
    3a88:	6f 93       	push	r22
		push r23	
    3a8a:	7f 93       	push	r23
		ret
    3a8c:	08 95       	ret

00003a8e <rom_fine_scroll_loop>:
	rom_fine_scroll_loop:
		.rept 8
			lpm r16,Z+
			rjmp .
			out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		.endr 
    3a8e:	05 91       	lpm	r16, Z+
    3a90:	00 c0       	rjmp	.+0      	; 0x3a92 <rom_fine_scroll_loop+0x4>
    3a92:	08 b9       	out	0x08, r16	; 8
    3a94:	05 91       	lpm	r16, Z+
    3a96:	00 c0       	rjmp	.+0      	; 0x3a98 <rom_fine_scroll_loop+0xa>
    3a98:	08 b9       	out	0x08, r16	; 8
    3a9a:	05 91       	lpm	r16, Z+
    3a9c:	00 c0       	rjmp	.+0      	; 0x3a9e <rom_fine_scroll_loop+0x10>
    3a9e:	08 b9       	out	0x08, r16	; 8
    3aa0:	05 91       	lpm	r16, Z+
    3aa2:	00 c0       	rjmp	.+0      	; 0x3aa4 <rom_fine_scroll_loop+0x16>
    3aa4:	08 b9       	out	0x08, r16	; 8
    3aa6:	05 91       	lpm	r16, Z+
    3aa8:	00 c0       	rjmp	.+0      	; 0x3aaa <rom_fine_scroll_loop+0x1c>
    3aaa:	08 b9       	out	0x08, r16	; 8
    3aac:	05 91       	lpm	r16, Z+
    3aae:	00 c0       	rjmp	.+0      	; 0x3ab0 <rom_fine_scroll_loop+0x22>
    3ab0:	08 b9       	out	0x08, r16	; 8
    3ab2:	05 91       	lpm	r16, Z+
    3ab4:	00 c0       	rjmp	.+0      	; 0x3ab6 <rom_fine_scroll_loop+0x28>
    3ab6:	08 b9       	out	0x08, r16	; 8
    3ab8:	05 91       	lpm	r16, Z+
    3aba:	00 c0       	rjmp	.+0      	; 0x3abc <rom_fine_scroll_loop+0x2e>
    3abc:	08 b9       	out	0x08, r16	; 8
	
		movw ZL,r6		;restore Z for tile #2
    3abe:	f3 01       	movw	r30, r6

		;branch to tile #2
		brts ramloop
    3ac0:	f6 f0       	brts	.+60     	; 0x3afe <ramloop>

00003ac2 <romloop>:

	
	romloop:
	    lpm r16,Z+
    3ac2:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    3ac4:	08 b9       	out	0x08, r16	; 8
	    ld r18,Y     ;load next tile # from VRAM
    3ac6:	28 81       	ld	r18, Y

	    lpm r16,Z+
    3ac8:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 2
    3aca:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    3acc:	23 9f       	mul	r18, r19

	    lpm r16,Z+
    3ace:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 3
    3ad0:	08 b9       	out	0x08, r16	; 8
		subi YL,-8
    3ad2:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT		;is tile in RAM or ROM? (RAM tiles have indexes<RAM_TILES_COUNT)
    3ad4:	2c 31       	cpi	r18, 0x1C	; 28
		
	    lpm r16,Z+
    3ad6:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    3ad8:	08 b9       	out	0x08, r16	; 8
		brsh .+2		;skip if next tile is in ROM	
    3ada:	08 f4       	brcc	.+2      	; 0x3ade <romloop+0x1c>
		movw r20,r4 	;load RAM title table address +row offset	
    3adc:	a2 01       	movw	r20, r4
   
	    lpm r16,Z+
    3ade:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 5
    3ae0:	08 b9       	out	0x08, r16	; 8
		add r0,r20		;add tile table address +row offset lsb
    3ae2:	04 0e       	add	r0, r20
	    adc r1,r21		;add title table address +row offset msb
    3ae4:	15 1e       	adc	r1, r21

	    lpm r16,Z+
    3ae6:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 6
    3ae8:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT	
    3aea:	2c 31       	cpi	r18, 0x1C	; 28
		dec r17			;decrement tiles to draw on line (does not affect carry)
    3aec:	1a 95       	dec	r17
   
	    lpm r16,Z+
    3aee:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 7   
    3af0:	08 b9       	out	0x08, r16	; 8
	    lpm r16,Z+
    3af2:	05 91       	lpm	r16, Z+

		breq end	
    3af4:	39 f1       	breq	.+78     	; 0x3b44 <end>
	    movw ZL,r0   	;copy next tile adress
    3af6:	f0 01       	movw	r30, r0

	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    3af8:	08 b9       	out	0x08, r16	; 8
	    brcc romloop
    3afa:	18 f7       	brcc	.-58     	; 0x3ac2 <romloop>
	
		rjmp .
    3afc:	00 c0       	rjmp	.+0      	; 0x3afe <ramloop>

00003afe <ramloop>:

	ramloop:

	    ld r16,Z+
    3afe:	01 91       	ld	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    3b00:	08 b9       	out	0x08, r16	; 8
	    ld r18,Y     ;load next tile # from VRAM
    3b02:	28 81       	ld	r18, Y

	    ld r16,Z+ 
    3b04:	01 91       	ld	r16, Z+
		subi YL,-8   		
    3b06:	c8 5f       	subi	r28, 0xF8	; 248
		out _SFR_IO_ADDR(DATA_PORT),r16 		;pixel 2
    3b08:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    3b0a:	23 9f       	mul	r18, r19

	    ld r16,Z+
    3b0c:	01 91       	ld	r16, Z+
		nop
    3b0e:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16         ;pixel 3
    3b10:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    3b12:	2c 31       	cpi	r18, 0x1C	; 28
		rjmp .
    3b14:	00 c0       	rjmp	.+0      	; 0x3b16 <ramloop+0x18>
   
	    ld r16,Z+
    3b16:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    3b18:	08 b9       	out	0x08, r16	; 8
		brcs .+2 
    3b1a:	08 f0       	brcs	.+2      	; 0x3b1e <ramloop+0x20>
		movw r20,r2 	;ROM title table address +row offset	
    3b1c:	a1 01       	movw	r20, r2
   
   
	    ld r16,Z+
    3b1e:	01 91       	ld	r16, Z+
	    add r0,r20    ;add title table address +row offset
    3b20:	04 0e       	add	r0, r20
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 5
    3b22:	08 b9       	out	0x08, r16	; 8
	    adc r1,r21
    3b24:	15 1e       	adc	r1, r21
		rjmp .
    3b26:	00 c0       	rjmp	.+0      	; 0x3b28 <ramloop+0x2a>
    
		ld r16,Z+		
    3b28:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 6
    3b2a:	08 b9       	out	0x08, r16	; 8
		ld r7,Z+
    3b2c:	71 90       	ld	r7, Z+
	    ld r16,Z+	
    3b2e:	01 91       	ld	r16, Z+
	
		movw ZL,r0
    3b30:	f0 01       	movw	r30, r0
		out _SFR_IO_ADDR(DATA_PORT),r7      ;pixel 7   
    3b32:	78 b8       	out	0x08, r7	; 8
		nop
    3b34:	00 00       	nop
		cpi r18,RAM_TILES_COUNT	
    3b36:	2c 31       	cpi	r18, 0x1C	; 28
	    dec r17
    3b38:	1a 95       	dec	r17
	    breq end
    3b3a:	21 f0       	breq	.+8      	; 0x3b44 <end>
	
		nop
    3b3c:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    3b3e:	08 b9       	out	0x08, r16	; 8
	
	    brcc romloop
    3b40:	00 f6       	brcc	.-128    	; 0x3ac2 <romloop>
		rjmp ramloop
    3b42:	dd cf       	rjmp	.-70     	; 0x3afe <ramloop>

00003b44 <end>:
	
	end:
		out _SFR_IO_ADDR(DATA_PORT),r16  	;pixel 8
    3b44:	08 b9       	out	0x08, r16	; 8
		brid end_fine_scroll				;hack: interrupt flag=0 => no fine offset pixel to draw
    3b46:	27 f5       	brid	.+72     	; 0x3b90 <end_fine_scroll>
		brcc end_rom_fine_scroll_loop
    3b48:	30 f4       	brcc	.+12     	; 0x3b56 <end_rom_fine_scroll_loop>

	/***END RAM LOOP***/
		movw ZL,r0
    3b4a:	f0 01       	movw	r30, r0

00003b4c <end_ram_fine_scroll_loop>:
	end_ram_fine_scroll_loop:
		ld r16,Z+
    3b4c:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
    3b4e:	08 b9       	out	0x08, r16	; 8
		dec r14
    3b50:	ea 94       	dec	r14
		brne end_ram_fine_scroll_loop
    3b52:	e1 f7       	brne	.-8      	; 0x3b4c <end_ram_fine_scroll_loop>
		rjmp end_fine_scroll_ram
    3b54:	1f c0       	rjmp	.+62     	; 0x3b94 <end_fine_scroll_ram>

00003b56 <end_rom_fine_scroll_loop>:

	/***END ROM LOOP***/
	end_rom_fine_scroll_loop:
		movw ZL,r12
    3b56:	f6 01       	movw	r30, r12
		nop
    3b58:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r9        ;output saved 1st pixel
    3b5a:	98 b8       	out	0x08, r9	; 8
		dec r14
    3b5c:	ea 94       	dec	r14
		breq end_fine_scroll_rom
    3b5e:	c9 f0       	breq	.+50     	; 0x3b92 <end_fine_scroll_rom>
	.rept 6
		lpm r16,Z+		
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		dec r14
		breq end_fine_scroll_rom
	.endr
    3b60:	05 91       	lpm	r16, Z+
    3b62:	08 b9       	out	0x08, r16	; 8
    3b64:	ea 94       	dec	r14
    3b66:	a9 f0       	breq	.+42     	; 0x3b92 <end_fine_scroll_rom>
    3b68:	05 91       	lpm	r16, Z+
    3b6a:	08 b9       	out	0x08, r16	; 8
    3b6c:	ea 94       	dec	r14
    3b6e:	89 f0       	breq	.+34     	; 0x3b92 <end_fine_scroll_rom>
    3b70:	05 91       	lpm	r16, Z+
    3b72:	08 b9       	out	0x08, r16	; 8
    3b74:	ea 94       	dec	r14
    3b76:	69 f0       	breq	.+26     	; 0x3b92 <end_fine_scroll_rom>
    3b78:	05 91       	lpm	r16, Z+
    3b7a:	08 b9       	out	0x08, r16	; 8
    3b7c:	ea 94       	dec	r14
    3b7e:	49 f0       	breq	.+18     	; 0x3b92 <end_fine_scroll_rom>
    3b80:	05 91       	lpm	r16, Z+
    3b82:	08 b9       	out	0x08, r16	; 8
    3b84:	ea 94       	dec	r14
    3b86:	29 f0       	breq	.+10     	; 0x3b92 <end_fine_scroll_rom>
    3b88:	05 91       	lpm	r16, Z+
    3b8a:	08 b9       	out	0x08, r16	; 8
    3b8c:	ea 94       	dec	r14
    3b8e:	09 f0       	breq	.+2      	; 0x3b92 <end_fine_scroll_rom>

00003b90 <end_fine_scroll>:
	...

00003b92 <end_fine_scroll_rom>:
	...

00003b94 <end_fine_scroll_ram>:
	end_fine_scroll:	
		nop
	end_fine_scroll_rom:
		nop
	end_fine_scroll_ram:
		clr r16	
    3b94:	00 27       	eor	r16, r16
		out _SFR_IO_ADDR(DATA_PORT),r16   
    3b96:	08 b9       	out	0x08, r16	; 8

		pop r6
    3b98:	6f 90       	pop	r6
		pop r7
    3b9a:	7f 90       	pop	r7
		pop r9
    3b9c:	9f 90       	pop	r9
		pop r12
    3b9e:	cf 90       	pop	r12
		pop r13
    3ba0:	df 90       	pop	r13
		pop r19
    3ba2:	3f 91       	pop	r19
		pop r22
    3ba4:	6f 91       	pop	r22
		pop r23
    3ba6:	7f 91       	pop	r23
		pop YH
    3ba8:	df 91       	pop	r29
		pop YL
    3baa:	cf 91       	pop	r28

		ret
    3bac:	08 95       	ret

00003bae <CopyFlashTile>:
; C-callable
; r24=Source ROM tile index
; r22=Dest RAM tile index
;************************************
CopyFlashTile:
	ldi r18,TILE_HEIGHT*TILE_WIDTH
    3bae:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	lds ZL,tile_table_lo
    3bb0:	e0 91 96 0c 	lds	r30, 0x0C96
	lds ZH,tile_table_hi
    3bb4:	f0 91 97 0c 	lds	r31, 0x0C97
	mul r24,r18
    3bb8:	82 9f       	mul	r24, r18
	add ZL,r0
    3bba:	e0 0d       	add	r30, r0
	adc ZH,r1
    3bbc:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    3bbe:	aa e3       	ldi	r26, 0x3A	; 58
	ldi XH,hi8(ram_tiles)
    3bc0:	b5 e0       	ldi	r27, 0x05	; 5
	mul r22,r18
    3bc2:	62 9f       	mul	r22, r18
	add XL,r0
    3bc4:	a0 0d       	add	r26, r0
	adc XH,r1
    3bc6:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	lpm r1,Z+
	st X+,r1
.endr
    3bc8:	15 90       	lpm	r1, Z+
    3bca:	1d 92       	st	X+, r1
    3bcc:	15 90       	lpm	r1, Z+
    3bce:	1d 92       	st	X+, r1
    3bd0:	15 90       	lpm	r1, Z+
    3bd2:	1d 92       	st	X+, r1
    3bd4:	15 90       	lpm	r1, Z+
    3bd6:	1d 92       	st	X+, r1
    3bd8:	15 90       	lpm	r1, Z+
    3bda:	1d 92       	st	X+, r1
    3bdc:	15 90       	lpm	r1, Z+
    3bde:	1d 92       	st	X+, r1
    3be0:	15 90       	lpm	r1, Z+
    3be2:	1d 92       	st	X+, r1
    3be4:	15 90       	lpm	r1, Z+
    3be6:	1d 92       	st	X+, r1
    3be8:	15 90       	lpm	r1, Z+
    3bea:	1d 92       	st	X+, r1
    3bec:	15 90       	lpm	r1, Z+
    3bee:	1d 92       	st	X+, r1
    3bf0:	15 90       	lpm	r1, Z+
    3bf2:	1d 92       	st	X+, r1
    3bf4:	15 90       	lpm	r1, Z+
    3bf6:	1d 92       	st	X+, r1
    3bf8:	15 90       	lpm	r1, Z+
    3bfa:	1d 92       	st	X+, r1
    3bfc:	15 90       	lpm	r1, Z+
    3bfe:	1d 92       	st	X+, r1
    3c00:	15 90       	lpm	r1, Z+
    3c02:	1d 92       	st	X+, r1
    3c04:	15 90       	lpm	r1, Z+
    3c06:	1d 92       	st	X+, r1
    3c08:	15 90       	lpm	r1, Z+
    3c0a:	1d 92       	st	X+, r1
    3c0c:	15 90       	lpm	r1, Z+
    3c0e:	1d 92       	st	X+, r1
    3c10:	15 90       	lpm	r1, Z+
    3c12:	1d 92       	st	X+, r1
    3c14:	15 90       	lpm	r1, Z+
    3c16:	1d 92       	st	X+, r1
    3c18:	15 90       	lpm	r1, Z+
    3c1a:	1d 92       	st	X+, r1
    3c1c:	15 90       	lpm	r1, Z+
    3c1e:	1d 92       	st	X+, r1
    3c20:	15 90       	lpm	r1, Z+
    3c22:	1d 92       	st	X+, r1
    3c24:	15 90       	lpm	r1, Z+
    3c26:	1d 92       	st	X+, r1
    3c28:	15 90       	lpm	r1, Z+
    3c2a:	1d 92       	st	X+, r1
    3c2c:	15 90       	lpm	r1, Z+
    3c2e:	1d 92       	st	X+, r1
    3c30:	15 90       	lpm	r1, Z+
    3c32:	1d 92       	st	X+, r1
    3c34:	15 90       	lpm	r1, Z+
    3c36:	1d 92       	st	X+, r1
    3c38:	15 90       	lpm	r1, Z+
    3c3a:	1d 92       	st	X+, r1
    3c3c:	15 90       	lpm	r1, Z+
    3c3e:	1d 92       	st	X+, r1
    3c40:	15 90       	lpm	r1, Z+
    3c42:	1d 92       	st	X+, r1
    3c44:	15 90       	lpm	r1, Z+
    3c46:	1d 92       	st	X+, r1
    3c48:	15 90       	lpm	r1, Z+
    3c4a:	1d 92       	st	X+, r1
    3c4c:	15 90       	lpm	r1, Z+
    3c4e:	1d 92       	st	X+, r1
    3c50:	15 90       	lpm	r1, Z+
    3c52:	1d 92       	st	X+, r1
    3c54:	15 90       	lpm	r1, Z+
    3c56:	1d 92       	st	X+, r1
    3c58:	15 90       	lpm	r1, Z+
    3c5a:	1d 92       	st	X+, r1
    3c5c:	15 90       	lpm	r1, Z+
    3c5e:	1d 92       	st	X+, r1
    3c60:	15 90       	lpm	r1, Z+
    3c62:	1d 92       	st	X+, r1
    3c64:	15 90       	lpm	r1, Z+
    3c66:	1d 92       	st	X+, r1
    3c68:	15 90       	lpm	r1, Z+
    3c6a:	1d 92       	st	X+, r1
    3c6c:	15 90       	lpm	r1, Z+
    3c6e:	1d 92       	st	X+, r1
    3c70:	15 90       	lpm	r1, Z+
    3c72:	1d 92       	st	X+, r1
    3c74:	15 90       	lpm	r1, Z+
    3c76:	1d 92       	st	X+, r1
    3c78:	15 90       	lpm	r1, Z+
    3c7a:	1d 92       	st	X+, r1
    3c7c:	15 90       	lpm	r1, Z+
    3c7e:	1d 92       	st	X+, r1
    3c80:	15 90       	lpm	r1, Z+
    3c82:	1d 92       	st	X+, r1
    3c84:	15 90       	lpm	r1, Z+
    3c86:	1d 92       	st	X+, r1
    3c88:	15 90       	lpm	r1, Z+
    3c8a:	1d 92       	st	X+, r1
    3c8c:	15 90       	lpm	r1, Z+
    3c8e:	1d 92       	st	X+, r1
    3c90:	15 90       	lpm	r1, Z+
    3c92:	1d 92       	st	X+, r1
    3c94:	15 90       	lpm	r1, Z+
    3c96:	1d 92       	st	X+, r1
    3c98:	15 90       	lpm	r1, Z+
    3c9a:	1d 92       	st	X+, r1
    3c9c:	15 90       	lpm	r1, Z+
    3c9e:	1d 92       	st	X+, r1
    3ca0:	15 90       	lpm	r1, Z+
    3ca2:	1d 92       	st	X+, r1
    3ca4:	15 90       	lpm	r1, Z+
    3ca6:	1d 92       	st	X+, r1
    3ca8:	15 90       	lpm	r1, Z+
    3caa:	1d 92       	st	X+, r1
    3cac:	15 90       	lpm	r1, Z+
    3cae:	1d 92       	st	X+, r1
    3cb0:	15 90       	lpm	r1, Z+
    3cb2:	1d 92       	st	X+, r1
    3cb4:	15 90       	lpm	r1, Z+
    3cb6:	1d 92       	st	X+, r1
    3cb8:	15 90       	lpm	r1, Z+
    3cba:	1d 92       	st	X+, r1
    3cbc:	15 90       	lpm	r1, Z+
    3cbe:	1d 92       	st	X+, r1
    3cc0:	15 90       	lpm	r1, Z+
    3cc2:	1d 92       	st	X+, r1
    3cc4:	15 90       	lpm	r1, Z+
    3cc6:	1d 92       	st	X+, r1
	clr r1
    3cc8:	11 24       	eor	r1, r1
	ret
    3cca:	08 95       	ret

00003ccc <CopyRamTile>:
; r24=Source RAM tile index
; r22=Dest RAM tile index
;************************************
CopyRamTile:

	ldi r18,TILE_HEIGHT*TILE_WIDTH
    3ccc:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	ldi ZL,lo8(ram_tiles)
    3cce:	ea e3       	ldi	r30, 0x3A	; 58
	ldi ZH,hi8(ram_tiles)
    3cd0:	f5 e0       	ldi	r31, 0x05	; 5
	mul r24,r18
    3cd2:	82 9f       	mul	r24, r18
	add ZL,r0
    3cd4:	e0 0d       	add	r30, r0
	adc ZH,r1
    3cd6:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    3cd8:	aa e3       	ldi	r26, 0x3A	; 58
	ldi XH,hi8(ram_tiles)
    3cda:	b5 e0       	ldi	r27, 0x05	; 5
	mul r22,r18
    3cdc:	62 9f       	mul	r22, r18
	add XL,r0
    3cde:	a0 0d       	add	r26, r0
	adc XH,r1
    3ce0:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	ld r1,Z+
	st X+,r1
.endr
    3ce2:	11 90       	ld	r1, Z+
    3ce4:	1d 92       	st	X+, r1
    3ce6:	11 90       	ld	r1, Z+
    3ce8:	1d 92       	st	X+, r1
    3cea:	11 90       	ld	r1, Z+
    3cec:	1d 92       	st	X+, r1
    3cee:	11 90       	ld	r1, Z+
    3cf0:	1d 92       	st	X+, r1
    3cf2:	11 90       	ld	r1, Z+
    3cf4:	1d 92       	st	X+, r1
    3cf6:	11 90       	ld	r1, Z+
    3cf8:	1d 92       	st	X+, r1
    3cfa:	11 90       	ld	r1, Z+
    3cfc:	1d 92       	st	X+, r1
    3cfe:	11 90       	ld	r1, Z+
    3d00:	1d 92       	st	X+, r1
    3d02:	11 90       	ld	r1, Z+
    3d04:	1d 92       	st	X+, r1
    3d06:	11 90       	ld	r1, Z+
    3d08:	1d 92       	st	X+, r1
    3d0a:	11 90       	ld	r1, Z+
    3d0c:	1d 92       	st	X+, r1
    3d0e:	11 90       	ld	r1, Z+
    3d10:	1d 92       	st	X+, r1
    3d12:	11 90       	ld	r1, Z+
    3d14:	1d 92       	st	X+, r1
    3d16:	11 90       	ld	r1, Z+
    3d18:	1d 92       	st	X+, r1
    3d1a:	11 90       	ld	r1, Z+
    3d1c:	1d 92       	st	X+, r1
    3d1e:	11 90       	ld	r1, Z+
    3d20:	1d 92       	st	X+, r1
    3d22:	11 90       	ld	r1, Z+
    3d24:	1d 92       	st	X+, r1
    3d26:	11 90       	ld	r1, Z+
    3d28:	1d 92       	st	X+, r1
    3d2a:	11 90       	ld	r1, Z+
    3d2c:	1d 92       	st	X+, r1
    3d2e:	11 90       	ld	r1, Z+
    3d30:	1d 92       	st	X+, r1
    3d32:	11 90       	ld	r1, Z+
    3d34:	1d 92       	st	X+, r1
    3d36:	11 90       	ld	r1, Z+
    3d38:	1d 92       	st	X+, r1
    3d3a:	11 90       	ld	r1, Z+
    3d3c:	1d 92       	st	X+, r1
    3d3e:	11 90       	ld	r1, Z+
    3d40:	1d 92       	st	X+, r1
    3d42:	11 90       	ld	r1, Z+
    3d44:	1d 92       	st	X+, r1
    3d46:	11 90       	ld	r1, Z+
    3d48:	1d 92       	st	X+, r1
    3d4a:	11 90       	ld	r1, Z+
    3d4c:	1d 92       	st	X+, r1
    3d4e:	11 90       	ld	r1, Z+
    3d50:	1d 92       	st	X+, r1
    3d52:	11 90       	ld	r1, Z+
    3d54:	1d 92       	st	X+, r1
    3d56:	11 90       	ld	r1, Z+
    3d58:	1d 92       	st	X+, r1
    3d5a:	11 90       	ld	r1, Z+
    3d5c:	1d 92       	st	X+, r1
    3d5e:	11 90       	ld	r1, Z+
    3d60:	1d 92       	st	X+, r1
    3d62:	11 90       	ld	r1, Z+
    3d64:	1d 92       	st	X+, r1
    3d66:	11 90       	ld	r1, Z+
    3d68:	1d 92       	st	X+, r1
    3d6a:	11 90       	ld	r1, Z+
    3d6c:	1d 92       	st	X+, r1
    3d6e:	11 90       	ld	r1, Z+
    3d70:	1d 92       	st	X+, r1
    3d72:	11 90       	ld	r1, Z+
    3d74:	1d 92       	st	X+, r1
    3d76:	11 90       	ld	r1, Z+
    3d78:	1d 92       	st	X+, r1
    3d7a:	11 90       	ld	r1, Z+
    3d7c:	1d 92       	st	X+, r1
    3d7e:	11 90       	ld	r1, Z+
    3d80:	1d 92       	st	X+, r1
    3d82:	11 90       	ld	r1, Z+
    3d84:	1d 92       	st	X+, r1
    3d86:	11 90       	ld	r1, Z+
    3d88:	1d 92       	st	X+, r1
    3d8a:	11 90       	ld	r1, Z+
    3d8c:	1d 92       	st	X+, r1
    3d8e:	11 90       	ld	r1, Z+
    3d90:	1d 92       	st	X+, r1
    3d92:	11 90       	ld	r1, Z+
    3d94:	1d 92       	st	X+, r1
    3d96:	11 90       	ld	r1, Z+
    3d98:	1d 92       	st	X+, r1
    3d9a:	11 90       	ld	r1, Z+
    3d9c:	1d 92       	st	X+, r1
    3d9e:	11 90       	ld	r1, Z+
    3da0:	1d 92       	st	X+, r1
    3da2:	11 90       	ld	r1, Z+
    3da4:	1d 92       	st	X+, r1
    3da6:	11 90       	ld	r1, Z+
    3da8:	1d 92       	st	X+, r1
    3daa:	11 90       	ld	r1, Z+
    3dac:	1d 92       	st	X+, r1
    3dae:	11 90       	ld	r1, Z+
    3db0:	1d 92       	st	X+, r1
    3db2:	11 90       	ld	r1, Z+
    3db4:	1d 92       	st	X+, r1
    3db6:	11 90       	ld	r1, Z+
    3db8:	1d 92       	st	X+, r1
    3dba:	11 90       	ld	r1, Z+
    3dbc:	1d 92       	st	X+, r1
    3dbe:	11 90       	ld	r1, Z+
    3dc0:	1d 92       	st	X+, r1
    3dc2:	11 90       	ld	r1, Z+
    3dc4:	1d 92       	st	X+, r1
    3dc6:	11 90       	ld	r1, Z+
    3dc8:	1d 92       	st	X+, r1
    3dca:	11 90       	ld	r1, Z+
    3dcc:	1d 92       	st	X+, r1
    3dce:	11 90       	ld	r1, Z+
    3dd0:	1d 92       	st	X+, r1
    3dd2:	11 90       	ld	r1, Z+
    3dd4:	1d 92       	st	X+, r1
    3dd6:	11 90       	ld	r1, Z+
    3dd8:	1d 92       	st	X+, r1
    3dda:	11 90       	ld	r1, Z+
    3ddc:	1d 92       	st	X+, r1
    3dde:	11 90       	ld	r1, Z+
    3de0:	1d 92       	st	X+, r1
	clr r1
    3de2:	11 24       	eor	r1, r1
	ret
    3de4:	08 95       	ret

00003de6 <BlitSprite>:
; r22=RAM tile index (bt)
; r21:r20=Y:X
; r19:r18=DY:DX
;************************************
BlitSprite:
	push r16
    3de6:	0f 93       	push	r16
	push r17
    3de8:	1f 93       	push	r17
	push YL
    3dea:	cf 93       	push	r28
	push YH
    3dec:	df 93       	push	r29

	;src=sprites_tiletable_lo+(sprites[i].tileIndex*TILE_HEIGHT*TILE_WIDTH)
	ldi r25,SPRITE_STRUCT_SIZE
    3dee:	94 e0       	ldi	r25, 0x04	; 4
	mul r24,r25
    3df0:	89 9f       	mul	r24, r25

	ldi ZL,lo8(sprites)	
    3df2:	e2 e0       	ldi	r30, 0x02	; 2
	ldi ZH,hi8(sprites)	
    3df4:	f5 e0       	ldi	r31, 0x05	; 5
	add ZL,r0
    3df6:	e0 0d       	add	r30, r0
	adc ZH,r1
    3df8:	f1 1d       	adc	r31, r1

	ldd r16,Z+sprFlags
    3dfa:	03 81       	ldd	r16, Z+3	; 0x03

	;8x16 multiply
	ldd r24,Z+sprTileIndex
    3dfc:	82 81       	ldd	r24, Z+2	; 0x02
	ldi r30,TILE_WIDTH*TILE_HEIGHT
    3dfe:	e0 e4       	ldi	r30, 0x40	; 64
	mul r24,r30
    3e00:	8e 9f       	mul	r24, r30
	movw r26,r0
    3e02:	d0 01       	movw	r26, r0
	
	;get tile bank addr
	ldi r25,4*2
    3e04:	98 e0       	ldi	r25, 0x08	; 8
	mul r16,r25
    3e06:	09 9f       	mul	r16, r25
	ldi YL,lo8(sprites_tile_banks)	
    3e08:	ce e8       	ldi	r28, 0x8E	; 142
	ldi YH,hi8(sprites_tile_banks)	
    3e0a:	dc e0       	ldi	r29, 0x0C	; 12
	clr r0
    3e0c:	00 24       	eor	r0, r0
	add YL,r1
    3e0e:	c1 0d       	add	r28, r1
	adc YH,r0		
    3e10:	d0 1d       	adc	r29, r0
	ldd ZL,Y+0
    3e12:	e8 81       	ld	r30, Y
	ldd ZH,Y+1
    3e14:	f9 81       	ldd	r31, Y+1	; 0x01
	add ZL,r26	;tile data src
    3e16:	ea 0f       	add	r30, r26
	adc ZH,r27
    3e18:	fb 1f       	adc	r31, r27
	
	;dest=ram_tiles+(bt*TILE_HEIGHT*TILE_WIDTH)
	ldi XL,lo8(ram_tiles)	
    3e1a:	aa e3       	ldi	r26, 0x3A	; 58
	ldi XH,hi8(ram_tiles)
    3e1c:	b5 e0       	ldi	r27, 0x05	; 5
	ldi r25,TILE_WIDTH*TILE_HEIGHT
    3e1e:	90 e4       	ldi	r25, 0x40	; 64
	mul r22,r25
    3e20:	69 9f       	mul	r22, r25
	add XL,r0
    3e22:	a0 0d       	add	r26, r0
	adc XH,r1
    3e24:	b1 1d       	adc	r27, r1
			srcXdiff=destXdiff;
			src+=destXdiff;
		}
	}
	*/
	clr r1
    3e26:	11 24       	eor	r1, r1
	clr YH		;hi8(srcXdiff)
    3e28:	dd 27       	eor	r29, r29

	cpi r20,0	
    3e2a:	40 30       	cpi	r20, 0x00	; 0
	brne x_2nd_tile
    3e2c:	51 f4       	brne	.+20     	; 0x3e42 <x_2nd_tile>
	
	add XL,r18	;dest+=dx
    3e2e:	a2 0f       	add	r26, r18
	adc XH,r1
    3e30:	b1 1d       	adc	r27, r1
	mov r24,r18	;destXdiff=dx
    3e32:	82 2f       	mov	r24, r18
	mov YL,r18	;srcXdiff=dx
    3e34:	c2 2f       	mov	r28, r18

	sbrs r16,SPRITE_FLIP_X_BIT
    3e36:	00 ff       	sbrs	r16, 0
	rjmp x_check_end
    3e38:	11 c0       	rjmp	.+34     	; 0x3e5c <x_check_end>

	adiw ZL,(TILE_WIDTH-1)	;src+=7
    3e3a:	37 96       	adiw	r30, 0x07	; 7
	ldi YL,TILE_WIDTH*2		;srcXdiff=((TILE_WIDTH*2)-dx);
    3e3c:	c0 e1       	ldi	r28, 0x10	; 16
	sub YL,r18	
    3e3e:	c2 1b       	sub	r28, r18
	rjmp x_check_end
    3e40:	0d c0       	rjmp	.+26     	; 0x3e5c <x_check_end>

00003e42 <x_2nd_tile>:

x_2nd_tile:
	ldi r24,TILE_WIDTH
    3e42:	88 e0       	ldi	r24, 0x08	; 8
	sub r24,r18		;8-DX = xdiff for dest
    3e44:	82 1b       	sub	r24, r18

	sbrc r16,SPRITE_FLIP_X_BIT
    3e46:	00 fd       	sbrc	r16, 0
	rjmp x2_flip_x
    3e48:	04 c0       	rjmp	.+8      	; 0x3e52 <x2_flip_x>

	mov YL,r24		;srcXdiff=destXdiff;
    3e4a:	c8 2f       	mov	r28, r24
	add ZL,r24		;src+=destXdiff;
    3e4c:	e8 0f       	add	r30, r24
	adc ZH,r1	
    3e4e:	f1 1d       	adc	r31, r1
	rjmp x_check_end
    3e50:	05 c0       	rjmp	.+10     	; 0x3e5c <x_check_end>

00003e52 <x2_flip_x>:

x2_flip_x:
	ldi YL,TILE_WIDTH
    3e52:	c8 e0       	ldi	r28, 0x08	; 8
	add YL,r18		;srcXdiff=TILE_WIDTH+dx;	
    3e54:	c2 0f       	add	r28, r18
	add ZL,r18		;src+=dx;
    3e56:	e2 0f       	add	r30, r18
	adc ZH,r1
    3e58:	f1 1d       	adc	r31, r1
	sbiw ZL,1		;src--;
    3e5a:	31 97       	sbiw	r30, 0x01	; 1

00003e5c <x_check_end>:
		}else{
			src+=(ydiff*TILE_WIDTH);
		}
	}
	*/
	cpi r21,0
    3e5c:	50 30       	cpi	r21, 0x00	; 0
	brne y_2nd_tile
    3e5e:	51 f4       	brne	.+20     	; 0x3e74 <y_2nd_tile>

	ldi r25,TILE_WIDTH	;dest+=(dy*TILE_WIDTH)
    3e60:	98 e0       	ldi	r25, 0x08	; 8
	mul r25,r19			
    3e62:	93 9f       	mul	r25, r19
	add XL,r0
    3e64:	a0 0d       	add	r26, r0
	adc XH,r1
    3e66:	b1 1d       	adc	r27, r1

	mov r25,r19			;ydiff=dy
    3e68:	93 2f       	mov	r25, r19

	//sbrc r16,SPRITE_FLIP_Y_BIT
	//adiw ZL,(TILE_WIDTH*(TILE_HEIGHT-1))

	sbrc r16,SPRITE_FLIP_Y_BIT
    3e6a:	01 fd       	sbrc	r16, 1
	subi ZL,lo8(-(TILE_WIDTH*(TILE_HEIGHT-1)));src+=(TILE_WIDTH*(TILE_HEIGHT-1));
    3e6c:	e8 5c       	subi	r30, 0xC8	; 200
	sbrc r16,SPRITE_FLIP_Y_BIT
    3e6e:	01 fd       	sbrc	r16, 1
	sbci ZH,hi8(-(TILE_WIDTH*(TILE_HEIGHT-1)))
    3e70:	ff 4f       	sbci	r31, 0xFF	; 255


	rjmp y_check_end
    3e72:	0a c0       	rjmp	.+20     	; 0x3e88 <y_check_end>

00003e74 <y_2nd_tile>:

y_2nd_tile:
	ldi r25,TILE_HEIGHT	;ydiff=(TILE_HEIGHT-dy)
    3e74:	98 e0       	ldi	r25, 0x08	; 8
	sub r25,r19	
    3e76:	93 1b       	sub	r25, r19
	
	mov r22,r19			;temp=dy-1
    3e78:	63 2f       	mov	r22, r19
	dec r22
    3e7a:	6a 95       	dec	r22
	sbrs r16,SPRITE_FLIP_Y_BIT
    3e7c:	01 ff       	sbrs	r16, 1
	mov r22,r25			;temp=ydiff
    3e7e:	69 2f       	mov	r22, r25

	ldi r21,TILE_WIDTH	;src+=(temp*TILE_WIDTH);
    3e80:	58 e0       	ldi	r21, 0x08	; 8
	mul r21,r22
    3e82:	56 9f       	mul	r21, r22
	add ZL,r0
    3e84:	e0 0d       	add	r30, r0
	adc ZH,r1	
    3e86:	f1 1d       	adc	r31, r1

00003e88 <y_check_end>:
y_check_end:	
	
	//if(flags&SPRITE_FLIP_X){
	//	step=-1;
	//}
	ser r22		;step=-1
    3e88:	6f ef       	ldi	r22, 0xFF	; 255
	ser r23
    3e8a:	7f ef       	ldi	r23, 0xFF	; 255
	sbrs r16,SPRITE_FLIP_X_BIT
    3e8c:	00 ff       	sbrs	r16, 0
	ldi r22,1	;step=1
    3e8e:	61 e0       	ldi	r22, 0x01	; 1
	sbrs r16,SPRITE_FLIP_X_BIT
    3e90:	00 ff       	sbrs	r16, 0
	clr r23
    3e92:	77 27       	eor	r23, r23

	//if(flags&SPRITE_FLIP_Y){
	//	srcXdiff-=(TILE_WIDTH*2);
	//}
	sbrc r16,SPRITE_FLIP_Y_BIT
    3e94:	01 fd       	sbrc	r16, 1
	sbiw YL,(TILE_WIDTH*2)
    3e96:	60 97       	sbiw	r28, 0x10	; 16
	;r24	= destXdiff
	;r25	= ydiff
	;X		= dest
	;Y		= srcXdiff
	;Z		= src
	clr r1
    3e98:	11 24       	eor	r1, r1
	ldi r19,TRANSLUCENT_COLOR
    3e9a:	3e ef       	ldi	r19, 0xFE	; 254

	ldi r21,TILE_HEIGHT
    3e9c:	58 e0       	ldi	r21, 0x08	; 8
	sub r21,r25 	;yspan=(TILE_HEIGHT-ydiff)
    3e9e:	59 1b       	sub	r21, r25

00003ea0 <y_loop>:

y_loop:
	ldi r20,TILE_WIDTH
    3ea0:	48 e0       	ldi	r20, 0x08	; 8
	sub r20,r24 	;xspan=(TILE_WIDTH-destXdiff)
    3ea2:	48 1b       	sub	r20, r24

00003ea4 <x_loop>:

x_loop:
	lpm r18,Z		;px=pgm_read_byte(src);
    3ea4:	24 91       	lpm	r18, Z
	cpse r18,r19	;if(px!=TRANSLUCENT_COLOR)
    3ea6:	23 13       	cpse	r18, r19
	st X,r18		;*dest=px;
    3ea8:	2c 93       	st	X, r18
	adiw XL,1
    3eaa:	11 96       	adiw	r26, 0x01	; 1
	add ZL,r22		;src+=step;
    3eac:	e6 0f       	add	r30, r22
	adc ZH,r23
    3eae:	f7 1f       	adc	r31, r23
	dec r20
    3eb0:	4a 95       	dec	r20
	brne x_loop
    3eb2:	c1 f7       	brne	.-16     	; 0x3ea4 <x_loop>

	add ZL,YL		;src+=srcXdiff
    3eb4:	ec 0f       	add	r30, r28
	adc ZH,YH
    3eb6:	fd 1f       	adc	r31, r29
	add XL,r24		;dest+=destXdiff
    3eb8:	a8 0f       	add	r26, r24
	adc XH,r1
    3eba:	b1 1d       	adc	r27, r1
	dec r21
    3ebc:	5a 95       	dec	r21
	brne y_loop
    3ebe:	81 f7       	brne	.-32     	; 0x3ea0 <y_loop>


	pop YH
    3ec0:	df 91       	pop	r29
	pop YL
    3ec2:	cf 91       	pop	r28
	pop r17
    3ec4:	1f 91       	pop	r17
	pop r16
    3ec6:	0f 91       	pop	r16
	ret
    3ec8:	08 95       	ret

00003eca <__vector_13>:

;***************************************************************************
; Main Video sync interrupt
;***************************************************************************
TIMER1_COMPA_vect:
	push r0
    3eca:	0f 92       	push	r0
	push r1
    3ecc:	1f 92       	push	r1
	push ZL;2
    3ece:	ef 93       	push	r30
	push ZH;2
    3ed0:	ff 93       	push	r31
	
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    3ed2:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    3ed4:	ef 93       	push	r30

	;Read timer offset since rollover to remove cycles 
	;and conpensate for interrupt latency.
	;This is nessesary to eliminate frame jitter.
	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    3ed6:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,0x12 ;MIN_INT_LATENCY
    3eda:	e2 51       	subi	r30, 0x12	; 18

	ldi ZH,1
    3edc:	f1 e0       	ldi	r31, 0x01	; 1

00003ede <latency_loop>:
latency_loop:
	cp ZL,ZH
    3ede:	ef 17       	cp	r30, r31
	brlo .		;advance PC to next instruction	
    3ee0:	00 f0       	brcs	.+0      	; 0x3ee2 <latency_loop+0x4>
	inc ZH
    3ee2:	f3 95       	inc	r31
	cpi ZH,10
    3ee4:	fa 30       	cpi	r31, 0x0A	; 10
	brlo latency_loop
    3ee6:	d8 f3       	brcs	.-10     	; 0x3ede <latency_loop>
	jmp .
    3ee8:	0c 94 76 1f 	jmp	0x3eec	; 0x3eec <latency_loop+0xe>
	
	;decrement sync pulse counter
	lds ZL,sync_pulse
    3eec:	e0 91 a1 0c 	lds	r30, 0x0CA1
	dec ZL
    3ef0:	ea 95       	dec	r30
	sts sync_pulse,ZL
    3ef2:	e0 93 a1 0c 	sts	0x0CA1, r30

	;process sync phases
	lds ZH,sync_phase
    3ef6:	f0 91 a0 0c 	lds	r31, 0x0CA0
	sbrc ZH,0
    3efa:	f0 fd       	sbrc	r31, 0
	rjmp sync_hsync
    3efc:	57 c0       	rjmp	.+174    	; 0x3fac <sync_hsync>
; Note: TCNT1 should be equal to 
; 0x68 on the cbi
; 0xAC on the sbi
; pulse duration: 68 clocks
;***************************************************		
	cpi ZL,SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    3efe:	ec 30       	cpi	r30, 0x0C	; 12
	brlo sync_eq
    3f00:	98 f0       	brcs	.+38     	; 0x3f28 <sync_eq>

	;Set HDRIVE to double rate during VSYNC
	ldi ZH,hi8(HDRIVE_CL_TWICE)
    3f02:	f3 e0       	ldi	r31, 0x03	; 3
	sts _SFR_MEM_ADDR(OCR1AH),ZH	
    3f04:	f0 93 89 00 	sts	0x0089, r31
	ldi ZH,lo8(HDRIVE_CL_TWICE)
    3f08:	fd e8       	ldi	r31, 0x8D	; 141
	sts _SFR_MEM_ADDR(OCR1AL),ZH
    3f0a:	f0 93 88 00 	sts	0x0088, r31

	bst ZL,0
    3f0e:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0x68
    3f10:	28 98       	cbi	0x05, 0	; 5
	brtc sync_pre_eq_no_sound_update
    3f12:	26 f4       	brtc	.+8      	; 0x3f1c <sync_pre_eq_no_sound_update>
	ldi ZL,1	;indicate update_sound to generate the SBI for pre-eq
    3f14:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    3f16:	0e 94 5d 20 	call	0x40ba	; 0x40ba <update_sound>
	rjmp sync_end
    3f1a:	b7 c0       	rjmp	.+366    	; 0x408a <sync_end>

00003f1c <sync_pre_eq_no_sound_update>:

sync_pre_eq_no_sound_update:
	WAIT ZL,64
    3f1c:	e5 e1       	ldi	r30, 0x15	; 21
    3f1e:	ea 95       	dec	r30
    3f20:	f1 f7       	brne	.-4      	; 0x3f1e <sync_pre_eq_no_sound_update+0x2>
    3f22:	00 00       	nop
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    3f24:	28 9a       	sbi	0x05, 0	; 5
		
	rjmp sync_end
    3f26:	b1 c0       	rjmp	.+354    	; 0x408a <sync_end>

00003f28 <sync_eq>:
; 0x68  on the cbi
; 0x36E on the sbi
; low pulse duration: 774 clocks
;***************************************************	
sync_eq:
	cpi ZL,SYNC_POST_EQ_PULSES
    3f28:	e6 30       	cpi	r30, 0x06	; 6
	brlo sync_post_eq
    3f2a:	38 f1       	brcs	.+78     	; 0x3f7a <sync_post_eq>

	rjmp .
    3f2c:	00 c0       	rjmp	.+0      	; 0x3f2e <sync_eq+0x6>
	rjmp .
    3f2e:	00 c0       	rjmp	.+0      	; 0x3f30 <sync_eq+0x8>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    3f30:	28 98       	cbi	0x05, 0	; 5

	bst ZL,0
    3f32:	e0 fb       	bst	r30, 0
	ldi ZL,4
    3f34:	e4 e0       	ldi	r30, 0x04	; 4
	brtc sync_eq_skip
    3f36:	16 f4       	brtc	.+4      	; 0x3f3c <sync_eq_skip>
	
	call update_sound
    3f38:	0e 94 5d 20 	call	0x40ba	; 0x40ba <update_sound>

00003f3c <sync_eq_skip>:
	;enable interupt to bring back sync 
	;level instead of wasting cycles
	;in a big wait loop

 	;clear interrupt flag
	ldi ZL,(1<<OCF1B)
    3f3c:	e4 e0       	ldi	r30, 0x04	; 4
	sts _SFR_MEM_ADDR(TIFR1),ZL 
    3f3e:	e0 93 36 00 	sts	0x0036, r30
	
	;generate interrupt on match
	;for timer1 compare unit b
	ldi ZL,(1<<OCIE1A)+(1<<OCIE1B)
    3f42:	e6 e0       	ldi	r30, 0x06	; 6
	sts _SFR_MEM_ADDR(TIMSK1),ZL
    3f44:	e0 93 6f 00 	sts	0x006F, r30

	rjmp sync_end
    3f48:	a0 c0       	rjmp	.+320    	; 0x408a <sync_end>

00003f4a <__vector_14>:
; during VSYNC EQ pulses to recover ~5000 cycles per field
; with interrupt latency conpensation
; 37 cycles
;**********************************************************	
TIMER1_COMPB_vect:
	push ZL
    3f4a:	ef 93       	push	r30
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    3f4c:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    3f4e:	ef 93       	push	r30

	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    3f50:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,62+31 ;0x5D ;MIN_INT_LATENCY
    3f54:	ed 55       	subi	r30, 0x5D	; 93

	cpi ZL,1
    3f56:	e1 30       	cpi	r30, 0x01	; 1
	brlo .		;advance PC to next instruction
    3f58:	00 f0       	brcs	.+0      	; 0x3f5a <__vector_14+0x10>

	cpi ZL,2
    3f5a:	e2 30       	cpi	r30, 0x02	; 2
	brlo .		;advance PC to next instruction
    3f5c:	00 f0       	brcs	.+0      	; 0x3f5e <__vector_14+0x14>

	cpi ZL,3
    3f5e:	e3 30       	cpi	r30, 0x03	; 3
	brlo .		;advance PC to next instruction
    3f60:	00 f0       	brcs	.+0      	; 0x3f62 <__vector_14+0x18>

	cpi ZL,4
    3f62:	e4 30       	cpi	r30, 0x04	; 4
	brlo .		;advance PC to next instruction
    3f64:	00 f0       	brcs	.+0      	; 0x3f66 <__vector_14+0x1c>

	cpi ZL,5
    3f66:	e5 30       	cpi	r30, 0x05	; 5
	brlo .		;advance PC to next instruction
    3f68:	00 f0       	brcs	.+0      	; 0x3f6a <__vector_14+0x20>

 	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;68
    3f6a:	28 9a       	sbi	0x05, 0	; 5
	ldi ZL,(1<<OCIE1A) ; disable OCIE1B 
    3f6c:	e2 e0       	ldi	r30, 0x02	; 2
	sts _SFR_MEM_ADDR(TIMSK1),ZL ;stop generate interrupt on match
    3f6e:	e0 93 6f 00 	sts	0x006F, r30
	
	;restore flags
	pop ZL
    3f72:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL	
    3f74:	ef bf       	out	0x3f, r30	; 63
	pop ZL
    3f76:	ef 91       	pop	r30
	reti
    3f78:	18 95       	reti

00003f7a <sync_post_eq>:
; 0x68 on the cbi
; 0xAC on the sbi
; pulse cycles: 68 clocks
;***************************************************	
sync_post_eq:	
	rjmp .
    3f7a:	00 c0       	rjmp	.+0      	; 0x3f7c <sync_post_eq+0x2>

	bst ZL,0
    3f7c:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    3f7e:	28 98       	cbi	0x05, 0	; 5
	brtc sync_post_eq_no_sound_update
    3f80:	26 f4       	brtc	.+8      	; 0x3f8a <sync_post_eq_no_sound_update>
	ldi ZL,1	
    3f82:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    3f84:	0e 94 5d 20 	call	0x40ba	; 0x40ba <update_sound>
	rjmp sync_pre_eq_cont
    3f88:	05 c0       	rjmp	.+10     	; 0x3f94 <sync_pre_eq_cont>

00003f8a <sync_post_eq_no_sound_update>:

sync_post_eq_no_sound_update:
	WAIT ZL,64
    3f8a:	e5 e1       	ldi	r30, 0x15	; 21
    3f8c:	ea 95       	dec	r30
    3f8e:	f1 f7       	brne	.-4      	; 0x3f8c <sync_post_eq_no_sound_update+0x2>
    3f90:	00 00       	nop

	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN 
    3f92:	28 9a       	sbi	0x05, 0	; 5

00003f94 <sync_pre_eq_cont>:

sync_pre_eq_cont:	
	;check if it's the last vsync pulse
	lds ZL,sync_pulse
    3f94:	e0 91 a1 0c 	lds	r30, 0x0CA1
	cpi ZL,0
    3f98:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2 ;skip rjmp
    3f9a:	09 f0       	breq	.+2      	; 0x3f9e <sync_pre_eq_cont+0xa>
	rjmp sync_end
    3f9c:	76 c0       	rjmp	.+236    	; 0x408a <sync_end>
	
	;update sync flags
	ldi ZL,SYNC_HSYNC_PULSES
    3f9e:	ed ef       	ldi	r30, 0xFD	; 253
	sts sync_pulse,ZL
    3fa0:	e0 93 a1 0c 	sts	0x0CA1, r30
	ldi ZL,1
    3fa4:	e1 e0       	ldi	r30, 0x01	; 1
	sts sync_phase,ZL
    3fa6:	e0 93 a0 0c 	sts	0x0CA0, r30
	
	rjmp sync_end
    3faa:	6f c0       	rjmp	.+222    	; 0x408a <sync_end>

00003fac <sync_hsync>:
; 0xF0 on the sbi
; pulse duration: 136 clocks
;***************************************************	

	; Set HDRIVE to normal rate
	ldi ZL,hi8(HDRIVE_CL)
    3fac:	e7 e0       	ldi	r30, 0x07	; 7
	sts _SFR_MEM_ADDR(OCR1AH),ZL	
    3fae:	e0 93 89 00 	sts	0x0089, r30
	ldi ZL,lo8(HDRIVE_CL)
    3fb2:	eb e1       	ldi	r30, 0x1B	; 27
	sts _SFR_MEM_ADDR(OCR1AL),ZL
    3fb4:	e0 93 88 00 	sts	0x0088, r30
	rjmp .
    3fb8:	00 c0       	rjmp	.+0      	; 0x3fba <sync_hsync+0xe>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    3fba:	28 98       	cbi	0x05, 0	; 5
	
	ldi ZL,2	;indicate update_sound to generate the SBI for pre-eq
    3fbc:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    3fbe:	00 c0       	rjmp	.+0      	; 0x3fc0 <sync_hsync+0x14>
	call update_sound
    3fc0:	0e 94 5d 20 	call	0x40ba	; 0x40ba <update_sound>

	;check if we have reached the first line to render
	ldi ZH,SYNC_HSYNC_PULSES
    3fc4:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    3fc6:	00 90 a7 0c 	lds	r0, 0x0CA7
	sub ZH,r0				
    3fca:	f0 19       	sub	r31, r0
	lds ZL,sync_pulse
    3fcc:	e0 91 a1 0c 	lds	r30, 0x0CA1
	cp ZL,ZH
    3fd0:	ef 17       	cp	r30, r31
	brsh no_render
    3fd2:	d0 f4       	brcc	.+52     	; 0x4008 <no_render>

	ldi ZH,SYNC_HSYNC_PULSES
    3fd4:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    3fd6:	00 90 a7 0c 	lds	r0, 0x0CA7
	sub ZH,r0				
    3fda:	f0 19       	sub	r31, r0
	lds r0,render_lines_count
    3fdc:	00 90 a8 0c 	lds	r0, 0x0CA8
	sub ZH,r0			
    3fe0:	f0 19       	sub	r31, r0
	cp ZL,ZH
    3fe2:	ef 17       	cp	r30, r31
	brlo no_render
    3fe4:	88 f0       	brcs	.+34     	; 0x4008 <no_render>

	;push r1-r29
	ldi ZL,29
    3fe6:	ed e1       	ldi	r30, 0x1D	; 29
	clr ZH
    3fe8:	ff 27       	eor	r31, r31

00003fea <push_loop>:
push_loop:
	ld r0,Z	;load value from register file
    3fea:	00 80       	ld	r0, Z
	push r0
    3fec:	0f 92       	push	r0
	dec ZL
    3fee:	ea 95       	dec	r30
	brne push_loop	
    3ff0:	e1 f7       	brne	.-8      	; 0x3fea <push_loop>

	;timing compensation
	;to insure we always call the video mode 
	;routine at the same cycle	
	WAIT r16,230-(AUDIO_OUT_HSYNC_CYCLES)
    3ff2:	06 e0       	ldi	r16, 0x06	; 6
    3ff4:	0a 95       	dec	r16
    3ff6:	f1 f7       	brne	.-4      	; 0x3ff4 <push_loop+0xa>

	call VMODE_FUNC		;TCNT1=0x234
    3ff8:	0e 94 23 1c 	call	0x3846	; 0x3846 <sub_video_mode3>

	;pop r1-r29
	ldi ZL,1
    3ffc:	e1 e0       	ldi	r30, 0x01	; 1
	clr ZH
    3ffe:	ff 27       	eor	r31, r31

00004000 <pop_loop>:
pop_loop:
	pop r0
    4000:	0f 90       	pop	r0
	st Z+,r0 ;store value to register file
    4002:	01 92       	st	Z+, r0
	cpi ZL,30
    4004:	ee 31       	cpi	r30, 0x1E	; 30
	brlo pop_loop	
    4006:	e0 f3       	brcs	.-8      	; 0x4000 <pop_loop>

00004008 <no_render>:

no_render:

	;check if it's the last hsync pulse and we are 
	;ready for VSYNC
	lds ZL,sync_pulse
    4008:	e0 91 a1 0c 	lds	r30, 0x0CA1
	cpi ZL,0
    400c:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2
    400e:	09 f0       	breq	.+2      	; 0x4012 <no_render+0xa>
	rjmp sync_end
    4010:	3c c0       	rjmp	.+120    	; 0x408a <sync_end>
;***************************************************
; Process VSYNC stuff
;***************************************************
	
	;push C-call registers
	push r18
    4012:	2f 93       	push	r18
	push r19
    4014:	3f 93       	push	r19
	push r20
    4016:	4f 93       	push	r20
	push r21
    4018:	5f 93       	push	r21
	push r22
    401a:	6f 93       	push	r22
	push r23
    401c:	7f 93       	push	r23
	push r24
    401e:	8f 93       	push	r24
	push r25
    4020:	9f 93       	push	r25
	push r26
    4022:	af 93       	push	r26
	push r27
    4024:	bf 93       	push	r27

	sei ;must enable ints for re-entrant sync pulses
    4026:	78 94       	sei
	clr r1
    4028:	11 24       	eor	r1, r1

	;set vsync flags
	clr ZL
    402a:	ee 27       	eor	r30, r30
	sts sync_phase,ZL
    402c:	e0 93 a0 0c 	sts	0x0CA0, r30
	ldi ZL,SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    4030:	e2 e1       	ldi	r30, 0x12	; 18
	sts sync_pulse,ZL
    4032:	e0 93 a1 0c 	sts	0x0CA1, r30



	;increment the vsync counter
	lds r24,vsync_counter
    4036:	80 91 b1 0c 	lds	r24, 0x0CB1
	lds r25,vsync_counter+1
    403a:	90 91 b2 0c 	lds	r25, 0x0CB2
	adiw r24,1
    403e:	01 96       	adiw	r24, 0x01	; 1
	sts vsync_counter,r24
    4040:	80 93 b1 0c 	sts	0x0CB1, r24
	sts vsync_counter+1,r25
    4044:	90 93 b2 0c 	sts	0x0CB2, r25


	;process user pre callback
	lds ZL,pre_vsync_user_callback+0
    4048:	e0 91 a3 0c 	lds	r30, 0x0CA3
	lds ZH,pre_vsync_user_callback+1
    404c:	f0 91 a4 0c 	lds	r31, 0x0CA4
	cp  ZL,r1
    4050:	e1 15       	cp	r30, r1
	cpc ZH,r1
    4052:	f1 05       	cpc	r31, r1
	breq .+2 
    4054:	09 f0       	breq	.+2      	; 0x4058 <no_render+0x50>
	icall
    4056:	09 95       	icall

	;refresh buttons states
	#if CONTROLLERS_VSYNC_READ == 1
		call ReadControllers
    4058:	0e 94 fe 21 	call	0x43fc	; 0x43fc <ReadControllers>
	#endif 
	
	;invoke stuff the video mode may have to do
	call VideoModeVsync	
    405c:	0e 94 5d 2f 	call	0x5eba	; 0x5eba <VideoModeVsync>

	;process music (music, envelopes, etc)
	call process_music
    4060:	0e 94 57 20 	call	0x40ae	; 0x40ae <process_music>
	clr r1
    4064:	11 24       	eor	r1, r1

	;process user post callback
	lds ZL,post_vsync_user_callback+0
    4066:	e0 91 a5 0c 	lds	r30, 0x0CA5
	lds ZH,post_vsync_user_callback+1
    406a:	f0 91 a6 0c 	lds	r31, 0x0CA6
	cp  ZL,r1
    406e:	e1 15       	cp	r30, r1
	cpc ZH,r1
    4070:	f1 05       	cpc	r31, r1
	breq .+2 
    4072:	09 f0       	breq	.+2      	; 0x4076 <no_render+0x6e>
	icall
    4074:	09 95       	icall
	#if SNES_MOUSE == 1
		call ReadMouseExtendedData
		call ProcessMouseMovement
	#endif

	pop r27
    4076:	bf 91       	pop	r27
	pop r26
    4078:	af 91       	pop	r26
	pop r25
    407a:	9f 91       	pop	r25
	pop r24
    407c:	8f 91       	pop	r24
	pop r23
    407e:	7f 91       	pop	r23
	pop r22
    4080:	6f 91       	pop	r22
	pop r21
    4082:	5f 91       	pop	r21
	pop r20
    4084:	4f 91       	pop	r20
	pop r19
    4086:	3f 91       	pop	r19
	pop r18
    4088:	2f 91       	pop	r18

0000408a <sync_end>:
	
sync_end:	
	;restore flags
	pop ZL
    408a:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL
    408c:	ef bf       	out	0x3f, r30	; 63
	
	pop ZH
    408e:	ff 91       	pop	r31
	pop ZL
    4090:	ef 91       	pop	r30
	pop r1
    4092:	1f 90       	pop	r1
	pop r0
    4094:	0f 90       	pop	r0
	reti
    4096:	18 95       	reti

00004098 <hsync_pulse>:
; 0xf0 on the sbi 
;	
; Destroys: ZL (r30)
;*************************************************
hsync_pulse:
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    4098:	28 98       	cbi	0x05, 0	; 5
	ldi ZL,2
    409a:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    409c:	00 c0       	rjmp	.+0      	; 0x409e <hsync_pulse+0x6>
	call update_sound
    409e:	0e 94 5d 20 	call	0x40ba	; 0x40ba <update_sound>

	lds ZL,sync_pulse
    40a2:	e0 91 a1 0c 	lds	r30, 0x0CA1
	dec ZL
    40a6:	ea 95       	dec	r30
	sts sync_pulse,ZL
    40a8:	e0 93 a1 0c 	sts	0x0CA1, r30

	ret
    40ac:	08 95       	ret

000040ae <process_music>:
; NOTE: registers r18-r27 are already saved by the caller
;***********************
process_music:
	
#if ENABLE_MIXER==1
	lds ZL,sound_enabled
    40ae:	e0 91 b7 0c 	lds	r30, 0x0CB7
	sbrc ZL,0
    40b2:	e0 fd       	sbrc	r30, 0
 	call ProcessMusic
    40b4:	0e 94 51 24 	call	0x48a2	; 0x48a2 <ProcessMusic>
#endif

	ret
    40b8:	08 95       	ret

000040ba <update_sound>:

; Destroys: Z,r0,r1
; cycles: 212+
;****************************
update_sound:
	push r16
    40ba:	0f 93       	push	r16
	push r17
    40bc:	1f 93       	push	r17
	push r18
    40be:	2f 93       	push	r18
	push r28
    40c0:	cf 93       	push	r28
	push r29
    40c2:	df 93       	push	r29

	mov r18,ZL
    40c4:	2e 2f       	mov	r18, r30

	;channel 1 
	lds r16,tr1_step_lo
    40c6:	00 91 b9 0c 	lds	r16, 0x0CB9
	lds r17,tr1_pos_frac
    40ca:	10 91 bb 0c 	lds	r17, 0x0CBB
	add	r17,r16	;add step to fractional part of sample pos
    40ce:	10 0f       	add	r17, r16
	lds r16,tr1_step_hi	
    40d0:	00 91 ba 0c 	lds	r16, 0x0CBA
	lds ZL,tr1_pos_lo
    40d4:	e0 91 bc 0c 	lds	r30, 0x0CBC
	lds ZH,tr1_pos_hi 
    40d8:	f0 91 bd 0c 	lds	r31, 0x0CBD
	adc ZL,r16	;add step to low byte of sample pos
    40dc:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    40de:	04 91       	lpm	r16, Z
	sts tr1_pos_lo,ZL
    40e0:	e0 93 bc 0c 	sts	0x0CBC, r30
	sts tr1_pos_frac,r17
    40e4:	10 93 bb 0c 	sts	0x0CBB, r17
	lds r17,tr1_vol
    40e8:	10 91 b8 0c 	lds	r17, 0x0CB8
	mulsu r16,r17;(sample*mixing vol)
    40ec:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend	
    40ee:	00 08       	sbc	r0, r0
	mov r28,r1	;set (sample*vol>>8) to mix buffer lsb
    40f0:	c1 2d       	mov	r28, r1
	mov r29,r0	;set mix buffer msb	
    40f2:	d0 2d       	mov	r29, r0
	nop
    40f4:	00 00       	nop

;38
	
	;channel 2
	lds r16,tr2_step_lo
    40f6:	00 91 bf 0c 	lds	r16, 0x0CBF
	lds r17,tr2_pos_frac
    40fa:	10 91 c1 0c 	lds	r17, 0x0CC1
	add	r17,r16	;add step to fractional part of sample pos
    40fe:	10 0f       	add	r17, r16
	lds r16,tr2_step_hi	
    4100:	00 91 c0 0c 	lds	r16, 0x0CC0
	lds ZL,tr2_pos_lo
    4104:	e0 91 c2 0c 	lds	r30, 0x0CC2
	lds ZH,tr2_pos_hi 
    4108:	f0 91 c3 0c 	lds	r31, 0x0CC3
	adc ZL,r16	;add step to low byte of sample pos
    410c:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    410e:	04 91       	lpm	r16, Z
	sts tr2_pos_lo,ZL
    4110:	e0 93 c2 0c 	sts	0x0CC2, r30
	sts tr2_pos_frac,r17
    4114:	10 93 c1 0c 	sts	0x0CC1, r17
	lds r17,tr2_vol
    4118:	10 91 be 0c 	lds	r17, 0x0CBE

	;*** Video sync update ***
	sbrc r18,0								;pre-eq/post-eq sync
    411c:	20 fd       	sbrc	r18, 0
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    411e:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,0								
    4120:	20 ff       	sbrs	r18, 0
	rjmp .
    4122:	00 c0       	rjmp	.+0      	; 0x4124 <update_sound+0x6a>
	;*************************

	mulsu r16,r17;(sample*mixing vol)
    4124:	01 03       	mulsu	r16, r17
	clr r0
    4126:	00 24       	eor	r0, r0
	sbc r0,r0	;sign extend
    4128:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    412a:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb		
    412c:	d0 1d       	adc	r29, r0
;70
	
	;channel 3
	lds r16,tr3_step_lo
    412e:	00 91 c5 0c 	lds	r16, 0x0CC5
	lds r17,tr3_pos_frac
    4132:	10 91 c7 0c 	lds	r17, 0x0CC7
	add	r17,r16				;add step to fractional part of sample pos
    4136:	10 0f       	add	r17, r16
	lds r16,tr3_step_hi	
    4138:	00 91 c6 0c 	lds	r16, 0x0CC6
	lds ZL,tr3_pos_lo
    413c:	e0 91 c8 0c 	lds	r30, 0x0CC8
	lds ZH,tr3_pos_hi 
    4140:	f0 91 c9 0c 	lds	r31, 0x0CC9
	adc ZL,r16				;add step to low byte of sample pos
    4144:	e0 1f       	adc	r30, r16
	lpm	r16,Z				;load sample
    4146:	04 91       	lpm	r16, Z
	sts tr3_pos_lo,ZL
    4148:	e0 93 c8 0c 	sts	0x0CC8, r30
	sts tr3_pos_frac,r17
    414c:	10 93 c7 0c 	sts	0x0CC7, r17
	lds r17,tr3_vol
    4150:	10 91 c4 0c 	lds	r17, 0x0CC4
	mulsu r16,r17			;(sample*mixing vol)
    4154:	01 03       	mulsu	r16, r17
	sbc r0,r0				;sign extend
    4156:	00 08       	sbc	r0, r0
	add r28,r1				;add (sample*vol>>8) to mix buffer lsb
    4158:	c1 0d       	add	r28, r1
	adc r29,r0				;ajust mix buffer msb
    415a:	d0 1d       	adc	r29, r0
;97	

	;channel 4 - 7/15 bit LFSR 
	lds r16,tr4_barrel_lo
    415c:	00 91 cc 0c 	lds	r16, 0x0CCC
	lds r17,tr4_barrel_hi
    4160:	10 91 cd 0c 	lds	r17, 0x0CCD
	lds ZL,tr4_divider
    4164:	e0 91 ce 0c 	lds	r30, 0x0CCE
	dec ZL	
    4168:	ea 95       	dec	r30
	brpl ch4_no_shift	
    416a:	92 f4       	brpl	.+36     	; 0x4190 <ch4_no_shift>

	lds ZH,tr4_params
    416c:	f0 91 cb 0c 	lds	r31, 0x0CCB
	mov ZL,ZH
    4170:	ef 2f       	mov	r30, r31
	lsr ZL 			;keep bits7:1
    4172:	e6 95       	lsr	r30

	mov r0,r16  ;copy barrel shifter
    4174:	00 2e       	mov	r0, r16
	lsr r0
    4176:	06 94       	lsr	r0
	eor r0,r16  ;xor bit0 and bit1
    4178:	00 26       	eor	r0, r16
	bst r0,0
    417a:	00 fa       	bst	r0, 0
	lsr r17
    417c:	16 95       	lsr	r17
	ror r16
    417e:	07 95       	ror	r16
	bld r17,6	;15 bits mode
    4180:	16 f9       	bld	r17, 6
	sbrs ZH,0
    4182:	f0 ff       	sbrs	r31, 0
	bld r16,6	;7 bits mode
    4184:	06 f9       	bld	r16, 6

	sts tr4_barrel_lo,r16
    4186:	00 93 cc 0c 	sts	0x0CCC, r16
	sts tr4_barrel_hi,r17
    418a:	10 93 cd 0c 	sts	0x0CCD, r17

	rjmp ch4_end
    418e:	03 c0       	rjmp	.+6      	; 0x4196 <ch4_end>

00004190 <ch4_no_shift>:
ch4_no_shift:
	;wait loop 21 cycles
	ldi r17,6
    4190:	16 e0       	ldi	r17, 0x06	; 6
	dec r17
    4192:	1a 95       	dec	r17
	brne .-4
    4194:	f1 f7       	brne	.-4      	; 0x4192 <ch4_no_shift+0x2>

00004196 <ch4_end>:
	;rjmp .
ch4_end:

	sts tr4_divider,ZL
    4196:	e0 93 ce 0c 	sts	0x0CCE, r30
	ldi r17,0x80 ;-128
    419a:	10 e8       	ldi	r17, 0x80	; 128
	
	;*** Video sync update ***
	sbrc r18,1								;hsync
    419c:	21 fd       	sbrc	r18, 1
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xF0
    419e:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,1								
    41a0:	21 ff       	sbrs	r18, 1
	rjmp .
    41a2:	00 c0       	rjmp	.+0      	; 0x41a4 <ch4_end+0xe>
	;*************************
	
	sbrc r16,0
    41a4:	00 fd       	sbrc	r16, 0
	ldi r17,0x7f ;+127
    41a6:	1f e7       	ldi	r17, 0x7F	; 127
	
	lds r16,tr4_vol
    41a8:	00 91 ca 0c 	lds	r16, 0x0CCA

	mulsu r17,r16;(sample*mixing vol)
    41ac:	10 03       	mulsu	r17, r16
	sbc r0,r0	;sign extend
    41ae:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    41b0:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb
    41b2:	d0 1d       	adc	r29, r0
;142
#if SOUND_CHANNEL_5_ENABLE==1
	;channel 5 PCM -- 45 cycles

	;add fractional part
	lds r16,tr5_pos_frac
    41b4:	00 91 d3 0c 	lds	r16, 0x0CD3
	lds r17,tr5_step_lo 
    41b8:	10 91 d1 0c 	lds	r17, 0x0CD1
	add r16,r17
    41bc:	01 0f       	add	r16, r17
	sts tr5_pos_frac,r16
    41be:	00 93 d3 0c 	sts	0x0CD3, r16

	;add lo
	lds ZL,tr5_pos_lo
    41c2:	e0 91 d4 0c 	lds	r30, 0x0CD4
	lds r17,tr5_step_hi 
    41c6:	10 91 d2 0c 	lds	r17, 0x0CD2
	adc ZL,r17
    41ca:	e1 1f       	adc	r30, r17

	;add hi
	lds ZH,tr5_pos_hi
    41cc:	f0 91 d5 0c 	lds	r31, 0x0CD5
	ldi r16,0
    41d0:	00 e0       	ldi	r16, 0x00	; 0
	adc ZH,r16
    41d2:	f0 1f       	adc	r31, r16

	movw r16,ZL
    41d4:	8f 01       	movw	r16, r30
	lds r0,tr5_loop_len_lo
    41d6:	00 90 d6 0c 	lds	r0, 0x0CD6
	lds r1,tr5_loop_len_hi	
    41da:	10 90 d7 0c 	lds	r1, 0x0CD7
	sub r16,r0
    41de:	00 19       	sub	r16, r0
	sbc r17,r1
    41e0:	11 09       	sbc	r17, r1
	lds r0,tr5_loop_end_lo
    41e2:	00 90 d8 0c 	lds	r0, 0x0CD8
	lds r1,tr5_loop_end_hi
    41e6:	10 90 d9 0c 	lds	r1, 0x0CD9

	cp ZL,r0
    41ea:	e0 15       	cp	r30, r0
	cpc ZH,r1
    41ec:	f1 05       	cpc	r31, r1
	brlo .+2
    41ee:	08 f0       	brcs	.+2      	; 0x41f2 <ch4_end+0x5c>
	movw ZL,r16
    41f0:	f8 01       	movw	r30, r16

	sts tr5_pos_lo,ZL
    41f2:	e0 93 d4 0c 	sts	0x0CD4, r30
	sts tr5_pos_hi,ZH
    41f6:	f0 93 d5 0c 	sts	0x0CD5, r31

	lpm	r16,Z	;load sample
    41fa:	04 91       	lpm	r16, Z
	lds r17,tr5_vol
    41fc:	10 91 d0 0c 	lds	r17, 0x0CD0

	mulsu r16,r17;(sample*mixing vol)
    4200:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend
    4202:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    4204:	c1 0d       	add	r28, r1
	adc r29,r0	;adjust mix buffer msb	
    4206:	d0 1d       	adc	r29, r0
#endif
	
	;final processing

	;clip
	clr r0
    4208:	00 24       	eor	r0, r0
	cpi r28,128	;> 127?
    420a:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0	
    420c:	d0 05       	cpc	r29, r0
	brlt .+2
    420e:	0c f0       	brlt	.+2      	; 0x4212 <ch4_end+0x7c>
	ldi r28,127
    4210:	cf e7       	ldi	r28, 0x7F	; 127
	
	dec r0
    4212:	0a 94       	dec	r0
	cpi r28,-128; <-128?
    4214:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0xff
    4216:	d0 05       	cpc	r29, r0
	brge .+2
    4218:	0c f4       	brge	.+2      	; 0x421c <ch4_end+0x86>
	ldi r28,-128
    421a:	c0 e8       	ldi	r28, 0x80	; 128

	subi r28,128	;convert to unsigned		
    421c:	c0 58       	subi	r28, 0x80	; 128
	sts _SFR_MEM_ADDR(OCR2A),r28 ;output sound byte
    421e:	c0 93 b3 00 	sts	0x00B3, r28

00004222 <update_sound_end>:
#endif


update_sound_end:

	pop r29
    4222:	df 91       	pop	r29
	pop r28
    4224:	cf 91       	pop	r28
	pop r18
    4226:	2f 91       	pop	r18
	pop r17
    4228:	1f 91       	pop	r17
	pop r16
    422a:	0f 91       	pop	r16
	
	ret
    422c:	08 95       	ret

0000422e <SetSpritesTileTable>:
; C-callable
; r25:r24=pointer to sprites pixel data.
;*****************************
.section .text.SetSpritesTileTable
SetSpritesTileTable:
	sts sprites_tile_banks,r24
    422e:	80 93 8e 0c 	sts	0x0C8E, r24
	sts sprites_tile_banks+1,r25
    4232:	90 93 8f 0c 	sts	0x0C8F, r25
	ret
    4236:	08 95       	ret

00004238 <ClearVram>:
; C-callable
;************************************
.section .text.ClearVram
ClearVram:
	//init vram		
	ldi r30,lo8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    4238:	e0 e0       	ldi	r30, 0x00	; 0
	ldi r31,hi8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    423a:	f4 e0       	ldi	r31, 0x04	; 4

	ldi XL,lo8(vram)
    423c:	a0 e0       	ldi	r26, 0x00	; 0
	ldi XH,hi8(vram)
    423e:	b1 e0       	ldi	r27, 0x01	; 1

	ldi r22,RAM_TILES_COUNT
    4240:	6c e1       	ldi	r22, 0x1C	; 28

00004242 <fill_vram_loop>:

fill_vram_loop:
	st X+,r22
    4242:	6d 93       	st	X+, r22
	sbiw r30,1
    4244:	31 97       	sbiw	r30, 0x01	; 1
	brne fill_vram_loop
    4246:	e9 f7       	brne	.-6      	; 0x4242 <fill_vram_loop>

	clr r1
    4248:	11 24       	eor	r1, r1

	ret
    424a:	08 95       	ret

0000424c <SetFont>:
; r22=Y pos (8 bit)
; r20=Font tile No (8 bit)
;************************************
.section .text.SetFont
SetFont:
	lds r21,font_tile_index
    424c:	50 91 98 0c 	lds	r21, 0x0C98
	add r20,21
    4250:	45 0f       	add	r20, r21
	rjmp SetTile	
    4252:	00 c0       	rjmp	.+0      	; 0x4254 <SetTile>

00004254 <SetTile>:
.section .text.SetTile
SetTile:
#if SCROLLING == 1
	;index formula is vram[((y>>3)*256)+8x+(y&7)]
	
	andi r24,0x1f
    4254:	8f 71       	andi	r24, 0x1F	; 31
	mov r23,r22
    4256:	76 2f       	mov	r23, r22
	lsr r22
    4258:	66 95       	lsr	r22
	lsr r22
    425a:	66 95       	lsr	r22
	lsr r22			;y>>3
    425c:	66 95       	lsr	r22
	ldi r18,8		
    425e:	28 e0       	ldi	r18, 0x08	; 8
	mul r24,r18		;x*8
    4260:	82 9f       	mul	r24, r18
	movw XL,r0
    4262:	d0 01       	movw	r26, r0
	subi XL,lo8(-(vram))
    4264:	a0 50       	subi	r26, 0x00	; 0
	sbci XH,hi8(-(vram))
    4266:	bf 4f       	sbci	r27, 0xFF	; 255
	add XH,r22		;vram+((y>>3)*256)
    4268:	b6 0f       	add	r27, r22
	andi r23,7		;y&7	
    426a:	77 70       	andi	r23, 0x07	; 7
	add XL,r23
    426c:	a7 0f       	add	r26, r23
						
	subi r20,~(RAM_TILES_COUNT-1)	
    426e:	44 5e       	subi	r20, 0xE4	; 228
	st X,r20
    4270:	4c 93       	st	X, r20

	clr r1
    4272:	11 24       	eor	r1, r1

	ret
    4274:	08 95       	ret

00004276 <SetFontTilesIndex>:
; C-callable
; r24=First font tile index in tile table (8 bit)
;************************************
.section .text.SetFontTilesIndex
	SetFontTilesIndex:
	sts font_tile_index,r24
    4276:	80 93 98 0c 	sts	0x0C98, r24
	ret
    427a:	08 95       	ret

0000427c <SetTileTable>:
; C-callable
; r25:r24=pointer to tiles data
;************************************
.section .text.SetTileTable
SetTileTable:
	sts tile_table_lo,r24
    427c:	80 93 96 0c 	sts	0x0C96, r24
	sts tile_table_hi,r25	
    4280:	90 93 97 0c 	sts	0x0C97, r25
	ret
    4284:	08 95       	ret

00004286 <GetVsyncFlag>:
;
; C-callable
;************************************
.section .text.GetVsyncFlag
GetVsyncFlag:
	lds r24,sync_flags
    4286:	80 91 a2 0c 	lds	r24, 0x0CA2
	andi r24,SYNC_FLAG_VSYNC
    428a:	81 70       	andi	r24, 0x01	; 1
	ret
    428c:	08 95       	ret

0000428e <ClearVsyncFlag>:
; 
; C-callable
;*****************************
.section .text.ClearVsyncFlag
ClearVsyncFlag:
	lds r18,sync_flags
    428e:	20 91 a2 0c 	lds	r18, 0x0CA2
	andi r18,~SYNC_FLAG_VSYNC
    4292:	2e 7f       	andi	r18, 0xFE	; 254
	sts sync_flags,r18
    4294:	20 93 a2 0c 	sts	0x0CA2, r18
	ret
    4298:	08 95       	ret

0000429a <ReadJoypad>:
; r24=joypad No (0 or 1)
; returns: (int) r25:r24
;*****************************
.section .text.ReadJoypad
ReadJoypad:	
	tst r24
    429a:	88 23       	and	r24, r24
	brne rj_p2
    429c:	29 f4       	brne	.+10     	; 0x42a8 <rj_p2>
		
	lds r24,joypad1_status_lo
    429e:	80 91 a9 0c 	lds	r24, 0x0CA9
	lds r25,joypad1_status_lo+1
    42a2:	90 91 aa 0c 	lds	r25, 0x0CAA
	ret
    42a6:	08 95       	ret

000042a8 <rj_p2>:
rj_p2:
	lds r24,joypad2_status_lo
    42a8:	80 91 ad 0c 	lds	r24, 0x0CAD
	lds r25,joypad2_status_lo+1	
    42ac:	90 91 ae 0c 	lds	r25, 0x0CAE

	ret
    42b0:	08 95       	ret

000042b2 <WaitUs>:
; r25:r24 - us to wait
; returns: void
;****************************
.section .text.WaitUs
WaitUs:	
	ldi r23,8
    42b2:	78 e0       	ldi	r23, 0x08	; 8
	dec 23
    42b4:	7a 95       	dec	r23
	brne .-4 ;~1 us
    42b6:	f1 f7       	brne	.-4      	; 0x42b4 <WaitUs+0x2>
	nop
    42b8:	00 00       	nop
	sbiw r24,1
    42ba:	01 97       	sbiw	r24, 0x01	; 1
	brne WaitUs
    42bc:	d1 f7       	brne	.-12     	; 0x42b2 <WaitUs>

	ret
    42be:	08 95       	ret

000042c0 <WriteEeprom>:
;****************************

.section .text.WriteEeprom
WriteEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    42c0:	f9 99       	sbic	0x1f, 1	; 31
   rjmp WriteEeprom
    42c2:	fe cf       	rjmp	.-4      	; 0x42c0 <WriteEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    42c4:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    42c6:	81 bd       	out	0x21, r24	; 33
   ; Write data (r22) to Data Register
   out _SFR_IO_ADDR(EEDR),r22
    42c8:	60 bd       	out	0x20, r22	; 32
   cli
    42ca:	f8 94       	cli
   ; Write logical one to EEMPE
   sbi _SFR_IO_ADDR(EECR),EEMPE
    42cc:	fa 9a       	sbi	0x1f, 2	; 31
   ; Start eeprom write by setting EEPE
   sbi _SFR_IO_ADDR(EECR),EEPE
    42ce:	f9 9a       	sbi	0x1f, 1	; 31
   sei
    42d0:	78 94       	sei
   ret
    42d2:	08 95       	ret

000042d4 <ReadEeprom>:
; r24 - value read
;****************************
.section .text.ReadEeprom
ReadEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    42d4:	f9 99       	sbic	0x1f, 1	; 31
   rjmp ReadEeprom
    42d6:	fe cf       	rjmp	.-4      	; 0x42d4 <ReadEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    42d8:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    42da:	81 bd       	out	0x21, r24	; 33
   ; Start eeprom read by writing EERE
   cli
    42dc:	f8 94       	cli
   sbi _SFR_IO_ADDR(EECR),EERE
    42de:	f8 9a       	sbi	0x1f, 0	; 31
   ; Read data from Data Register
   in r24,_SFR_IO_ADDR(EEDR)
    42e0:	80 b5       	in	r24, 0x20	; 32
   sei
    42e2:	78 94       	sei
   ret
    42e4:	08 95       	ret

000042e6 <wdt_randomize>:
	.global wdt_randomize
	.section .text.wdt_randomize
	wdt_randomize:

		;set timer 1 full speed count to 0xffff
		ldi r24,0
    42e6:	80 e0       	ldi	r24, 0x00	; 0
		sts sync_pulse,r24
    42e8:	80 93 a1 0c 	sts	0x0CA1, r24


		sts _SFR_MEM_ADDR(TIMSK1),r24
    42ec:	80 93 6f 00 	sts	0x006F, r24
		sts _SFR_MEM_ADDR(OCR1AL),r24
    42f0:	80 93 88 00 	sts	0x0088, r24
		sts _SFR_MEM_ADDR(OCR1AH),r24
    42f4:	80 93 89 00 	sts	0x0089, r24
		sts _SFR_MEM_ADDR(OCR1BL),r24
    42f8:	80 93 8a 00 	sts	0x008A, r24
		sts _SFR_MEM_ADDR(OCR1BH),r24
    42fc:	80 93 8b 00 	sts	0x008B, r24
		sts _SFR_MEM_ADDR(TCNT1H),r24
    4300:	80 93 85 00 	sts	0x0085, r24
		sts _SFR_MEM_ADDR(TCNT1L),r24
    4304:	80 93 84 00 	sts	0x0084, r24
		
		sts _SFR_MEM_ADDR(TCCR1A),r24	
    4308:	80 93 80 00 	sts	0x0080, r24
		ldi 24,(1<<CS10)
    430c:	81 e0       	ldi	r24, 0x01	; 1
		sts _SFR_MEM_ADDR(TCCR1B),r24
    430e:	80 93 81 00 	sts	0x0081, r24

		cli
    4312:	f8 94       	cli

		;enable watchdog at fastest speed and generate interrupts
		ldi r24,0
    4314:	80 e0       	ldi	r24, 0x00	; 0
		sts _SFR_MEM_ADDR(MCUSR),r24	
    4316:	80 93 54 00 	sts	0x0054, r24
		ldi r25,(1<<WDIE)+(1<<WDE)+(0<<WDP3)+(0<<WDP2)+(0<<WDP1)+(0<<WDP0)
    431a:	98 e4       	ldi	r25, 0x48	; 72
		lds r24,_SFR_MEM_ADDR(WDTCSR)
    431c:	80 91 60 00 	lds	r24, 0x0060
		ori r24,(1<<WDCE)+(1<<WDE)
    4320:	88 61       	ori	r24, 0x18	; 24
		sts _SFR_MEM_ADDR(WDTCSR),r24
    4322:	80 93 60 00 	sts	0x0060, r24
		sts _SFR_MEM_ADDR(WDTCSR),r25
    4326:	90 93 60 00 	sts	0x0060, r25
	
		sei
    432a:	78 94       	sei

0000432c <wait>:

		;generate 8 random cycles
	wait:
		lds r24,sync_pulse ;using the yet unalocated "sync_pulse" as a temp variable
    432c:	80 91 a1 0c 	lds	r24, 0x0CA1
		cpi r24,8
    4330:	88 30       	cpi	r24, 0x08	; 8
		brlo wait
    4332:	e0 f3       	brcs	.-8      	; 0x432c <wait>

		ret
    4334:	08 95       	ret

00004336 <__vector_8>:
	;*************************************
	; Watchdog timer interrupt
	;*************************************
	WDT_vect:
		;save flags & status register
		push r16
    4336:	0f 93       	push	r16
		push r17
    4338:	1f 93       	push	r17

		in r16,_SFR_IO_ADDR(SREG)
    433a:	0f b7       	in	r16, 0x3f	; 63
		push r16
    433c:	0f 93       	push	r16

		lds r16,sync_pulse
    433e:	00 91 a1 0c 	lds	r16, 0x0CA1
		inc r16
    4342:	03 95       	inc	r16
		sts sync_pulse,r16
    4344:	00 93 a1 0c 	sts	0x0CA1, r16

		;XOR succesive timer1 LSB into a int
		sbrc r16,0
    4348:	00 fd       	sbrc	r16, 0
		rjmp 1f
    434a:	08 c0       	rjmp	.+16     	; 0x435c <__vector_8+0x26>
		lds r17,random_value
    434c:	10 91 b3 0c 	lds	r17, 0x0CB3
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    4350:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    4354:	10 27       	eor	r17, r16
		sts random_value,r17
    4356:	10 93 b3 0c 	sts	0x0CB3, r17
		rjmp 2f
    435a:	07 c0       	rjmp	.+14     	; 0x436a <__vector_8+0x34>
	1:
		lds r17,random_value+1
    435c:	10 91 b4 0c 	lds	r17, 0x0CB4
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    4360:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    4364:	10 27       	eor	r17, r16
		sts random_value+1,r17
    4366:	10 93 b4 0c 	sts	0x0CB4, r17
	2:

		ldi r16,(1<<WDIE)+(1<<WDE)
    436a:	08 e4       	ldi	r16, 0x48	; 72
		sts _SFR_MEM_ADDR(WDTCSR),r16
    436c:	00 93 60 00 	sts	0x0060, r16

		;restore flags
		pop r16
    4370:	0f 91       	pop	r16
		out _SFR_IO_ADDR(SREG),r16
    4372:	0f bf       	out	0x3f, r16	; 63
	
		pop r17
    4374:	1f 91       	pop	r17
		pop r16
    4376:	0f 91       	pop	r16
		reti
    4378:	18 95       	reti

0000437a <SoftReset>:

/**
 * Performs a software reset
 */
void SoftReset(void){        
	wdt_enable(WDTO_15MS);  
    437a:	98 e0       	ldi	r25, 0x08	; 8
    437c:	88 e1       	ldi	r24, 0x18	; 24
    437e:	0f b6       	in	r0, 0x3f	; 63
    4380:	f8 94       	cli
    4382:	a8 95       	wdr
    4384:	80 93 60 00 	sts	0x0060, r24
    4388:	0f be       	out	0x3f, r0	; 63
    438a:	90 93 60 00 	sts	0x0060, r25
	while(1);
    438e:	ff cf       	rjmp	.-2      	; 0x438e <SoftReset+0x14>

00004390 <ReadButtons>:
void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
	unsigned char i;

	//latch controllers
	JOYPAD_OUT_PORT|=_BV(JOYPAD_LATCH_PIN);
    4390:	12 9a       	sbi	0x02, 2	; 2
		}else{
			Wait200ns();
			Wait200ns();
		}	
	#else
		Wait200ns();
    4392:	c8 95       	lpm
    4394:	c8 95       	lpm
		Wait200ns();
    4396:	c8 95       	lpm
    4398:	c8 95       	lpm
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));
    439a:	12 98       	cbi	0x02, 2	; 2
    439c:	40 e1       	ldi	r20, 0x10	; 16
	DisplayLogo();
	
}

void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
    439e:	80 e0       	ldi	r24, 0x00	; 0
    43a0:	90 e0       	ldi	r25, 0x00	; 0
    43a2:	20 e0       	ldi	r18, 0x00	; 0
    43a4:	30 e0       	ldi	r19, 0x00	; 0


	//read button states
	for(i=0;i<16;i++){

		p1ButtonsLo>>=1;
    43a6:	36 95       	lsr	r19
    43a8:	27 95       	ror	r18
		p2ButtonsLo>>=1;
    43aa:	96 95       	lsr	r25
    43ac:	87 95       	ror	r24
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    43ae:	c8 95       	lpm
    43b0:	c8 95       	lpm
			Wait200ns();
    43b2:	c8 95       	lpm
    43b4:	c8 95       	lpm
		#endif
			
		//pulse clock pin		
		JOYPAD_OUT_PORT&=~(_BV(JOYPAD_CLOCK_PIN));
    43b6:	13 98       	cbi	0x02, 3	; 2
		
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) p1ButtonsLo|=(1<<15);
    43b8:	00 9b       	sbis	0x00, 0	; 0
    43ba:	30 68       	ori	r19, 0x80	; 128
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) p2ButtonsLo|=(1<<15);
    43bc:	01 9b       	sbis	0x00, 1	; 0
    43be:	90 68       	ori	r25, 0x80	; 128
		
		JOYPAD_OUT_PORT|=_BV(JOYPAD_CLOCK_PIN);
    43c0:	13 9a       	sbi	0x02, 3	; 2
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    43c2:	c8 95       	lpm
    43c4:	c8 95       	lpm
			Wait200ns();
    43c6:	c8 95       	lpm
    43c8:	c8 95       	lpm
    43ca:	41 50       	subi	r20, 0x01	; 1
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));


	//read button states
	for(i=0;i<16;i++){
    43cc:	61 f7       	brne	.-40     	; 0x43a6 <ReadButtons+0x16>
		#endif

	}

	#if JOYSTICK==TYPE_SNES
		joypad1_status_lo=p1ButtonsLo;
    43ce:	30 93 aa 0c 	sts	0x0CAA, r19
    43d2:	20 93 a9 0c 	sts	0x0CA9, r18
		joypad2_status_lo=p2ButtonsLo;
    43d6:	90 93 ae 0c 	sts	0x0CAE, r25
    43da:	80 93 ad 0c 	sts	0x0CAD, r24
	#else
		joypad1_status_lo=p1ButtonsLo&0xff;
		joypad2_status_lo=p2ButtonsLo&0xff;	
	#endif

	if(joypad1_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B) || joypad2_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B)){
    43de:	80 91 a9 0c 	lds	r24, 0x0CA9
    43e2:	90 91 aa 0c 	lds	r25, 0x0CAA
    43e6:	0f 97       	sbiw	r24, 0x0f	; 15
    43e8:	31 f0       	breq	.+12     	; 0x43f6 <ReadButtons+0x66>
    43ea:	80 91 ad 0c 	lds	r24, 0x0CAD
    43ee:	90 91 ae 0c 	lds	r25, 0x0CAE
    43f2:	0f 97       	sbiw	r24, 0x0f	; 15
    43f4:	11 f4       	brne	.+4      	; 0x43fa <ReadButtons+0x6a>
		SoftReset();
    43f6:	0e 94 bd 21 	call	0x437a	; 0x437a <SoftReset>
    43fa:	08 95       	ret

000043fc <ReadControllers>:
 * program when CONTROLLERS_VSYNC_READ==0.
*/
void ReadControllers(){

	//Detect if devices are connected.
	joypadsConnectionStatus=0;
    43fc:	10 92 e5 0c 	sts	0x0CE5, r1
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) joypadsConnectionStatus|=1;
    4400:	00 99       	sbic	0x00, 0	; 0
    4402:	03 c0       	rjmp	.+6      	; 0x440a <ReadControllers+0xe>
    4404:	81 e0       	ldi	r24, 0x01	; 1
    4406:	80 93 e5 0c 	sts	0x0CE5, r24
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) joypadsConnectionStatus|=2;
    440a:	01 99       	sbic	0x00, 1	; 0
    440c:	05 c0       	rjmp	.+10     	; 0x4418 <ReadControllers+0x1c>
    440e:	80 91 e5 0c 	lds	r24, 0x0CE5
    4412:	82 60       	ori	r24, 0x02	; 2
    4414:	80 93 e5 0c 	sts	0x0CE5, r24
			
	//read the standard buttons
	ReadButtons();
    4418:	0c 94 c8 21 	jmp	0x4390	; 0x4390 <ReadButtons>

0000441c <FormatEeprom>:
	return resp;
}

	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {
    441c:	cf 93       	push	r28
    441e:	df 93       	push	r29
    4420:	c0 e0       	ldi	r28, 0x00	; 0
    4422:	d0 e0       	ldi	r29, 0x00	; 0
    4424:	fe 01       	movw	r30, r28
    4426:	e4 55       	subi	r30, 0x54	; 84
    4428:	ff 4f       	sbci	r31, 0xFF	; 255

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
    442a:	64 91       	lpm	r22, Z
    442c:	ce 01       	movw	r24, r28
    442e:	0e 94 60 21 	call	0x42c0	; 0x42c0 <WriteEeprom>
    4432:	21 96       	adiw	r28, 0x01	; 1
	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
    4434:	c0 32       	cpi	r28, 0x20	; 32
    4436:	d1 05       	cpc	r29, r1
    4438:	a9 f7       	brne	.-22     	; 0x4424 <FormatEeprom+0x8>
    443a:	c0 e2       	ldi	r28, 0x20	; 32
    443c:	d0 e0       	ldi	r29, 0x00	; 0
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
    443e:	6f ef       	ldi	r22, 0xFF	; 255
    4440:	ce 01       	movw	r24, r28
    4442:	0e 94 60 21 	call	0x42c0	; 0x42c0 <WriteEeprom>
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
    4446:	6f ef       	ldi	r22, 0xFF	; 255
    4448:	ce 01       	movw	r24, r28
    444a:	01 96       	adiw	r24, 0x01	; 1
    444c:	0e 94 60 21 	call	0x42c0	; 0x42c0 <WriteEeprom>
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
    4450:	a0 96       	adiw	r28, 0x20	; 32
    4452:	c1 15       	cp	r28, r1
    4454:	88 e0       	ldi	r24, 0x08	; 8
    4456:	d8 07       	cpc	r29, r24
    4458:	91 f7       	brne	.-28     	; 0x443e <FormatEeprom+0x22>
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
   }
   
}
    445a:	df 91       	pop	r29
    445c:	cf 91       	pop	r28
    445e:	08 95       	ret

00004460 <isEepromFormatted>:
	  }
   }
}
	
//returns true if the EEPROM has been setup to work with the kernel.
bool isEepromFormatted(){
    4460:	cf 93       	push	r28
	unsigned id;
	id=ReadEeprom(0)+(ReadEeprom(1)<<8);
    4462:	80 e0       	ldi	r24, 0x00	; 0
    4464:	90 e0       	ldi	r25, 0x00	; 0
    4466:	0e 94 6a 21 	call	0x42d4	; 0x42d4 <ReadEeprom>
    446a:	c8 2f       	mov	r28, r24
    446c:	81 e0       	ldi	r24, 0x01	; 1
    446e:	90 e0       	ldi	r25, 0x00	; 0
    4470:	0e 94 6a 21 	call	0x42d4	; 0x42d4 <ReadEeprom>
    4474:	28 2f       	mov	r18, r24
    4476:	30 e0       	ldi	r19, 0x00	; 0
    4478:	32 2f       	mov	r19, r18
    447a:	22 27       	eor	r18, r18
    447c:	2c 0f       	add	r18, r28
    447e:	31 1d       	adc	r19, r1
	return (id==EEPROM_SIGNATURE);
    4480:	81 e0       	ldi	r24, 0x01	; 1
    4482:	2a 35       	cpi	r18, 0x5A	; 90
    4484:	35 45       	sbci	r19, 0x55	; 85
    4486:	09 f0       	breq	.+2      	; 0x448a <isEepromFormatted+0x2a>
    4488:	80 e0       	ldi	r24, 0x00	; 0
}
    448a:	cf 91       	pop	r28
    448c:	08 95       	ret

0000448e <PatchCommand00>:
/*
 * Command 00: Set envelope speed per frame +127/-128, 0=no enveloppe
 * Param:
 */
void PatchCommand00(Track* track, char param){
	track->envelopeStep=param;
    448e:	fc 01       	movw	r30, r24
    4490:	67 87       	std	Z+15, r22	; 0x0f
    4492:	08 95       	ret

00004494 <PatchCommand01>:
 * Param:
 */
void PatchCommand01(Track* track, char param){
	(void)track; //to remove unused warning
	#if MIXER_CHAN4_TYPE == 0
		mixer.channels.type.noise.barrel=0x0101;
    4494:	e8 eb       	ldi	r30, 0xB8	; 184
    4496:	fc e0       	ldi	r31, 0x0C	; 12
    4498:	81 e0       	ldi	r24, 0x01	; 1
    449a:	91 e0       	ldi	r25, 0x01	; 1
    449c:	95 8b       	std	Z+21, r25	; 0x15
    449e:	84 8b       	std	Z+20, r24	; 0x14
		mixer.channels.type.noise.params=param;
    44a0:	63 8b       	std	Z+19, r22	; 0x13
    44a2:	08 95       	ret

000044a4 <PatchCommand05>:
}
/*
 * Command 05: End of note/fx
 * Param:
 */
void PatchCommand05(Track* track, char param){
    44a4:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags&=~(TRACK_FLAGS_PLAYING+TRACK_FLAGS_PRIORITY);	//patchPlaying=false,priority=0	
    44a6:	90 81       	ld	r25, Z
    44a8:	9f 75       	andi	r25, 0x5F	; 95
    44aa:	90 83       	st	Z, r25
    44ac:	08 95       	ret

000044ae <PatchCommand06>:

/*
 * Command 06: Note hold
 * Param:
 */
void PatchCommand06(Track* track, char param){
    44ae:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags|=TRACK_FLAGS_HOLD_ENV; //patchEnvelopeHold=true;
    44b0:	90 81       	ld	r25, Z
    44b2:	90 64       	ori	r25, 0x40	; 64
    44b4:	90 83       	st	Z, r25
    44b6:	08 95       	ret

000044b8 <PatchCommand07>:
 * Command 07: Set envelope volume
 * Param:
 */

void PatchCommand07(Track* track, char param){
	track->envelopeVol=param;
    44b8:	fc 01       	movw	r30, r24
    44ba:	66 87       	std	Z+14, r22	; 0x0e
    44bc:	08 95       	ret

000044be <PatchCommand09>:
 * Command 09: Set tremolo level
 * Param:
*/

void PatchCommand09(Track* track, char param){
	track->tremoloLevel=param;
    44be:	fc 01       	movw	r30, r24
    44c0:	62 87       	std	Z+10, r22	; 0x0a
    44c2:	08 95       	ret

000044c4 <PatchCommand10>:
/*
 * Command 10: Set tremolo rate
 * Param:
*/
void PatchCommand10(Track* track, char param){
	track->tremoloRate=param;
    44c4:	fc 01       	movw	r30, r24
    44c6:	63 87       	std	Z+11, r22	; 0x0b
    44c8:	08 95       	ret

000044ca <PatchCommand11>:
/*
 * Command 11: Pitch slide (linear) 
 * Param: (+/-) half steps to slide to
*/

void PatchCommand11(Track* track, char param){
    44ca:	cf 93       	push	r28
    44cc:	df 93       	push	r29
    44ce:	ec 01       	movw	r28, r24
    44d0:	46 2f       	mov	r20, r22
	//slide to note from current note
	s16 currentStep,targetStep,delta;	
	
	currentStep=pgm_read_word(&(steptable[track->note]));
    44d2:	29 81       	ldd	r18, Y+1	; 0x01
    44d4:	30 e0       	ldi	r19, 0x00	; 0
    44d6:	f9 01       	movw	r30, r18
    44d8:	ee 0f       	add	r30, r30
    44da:	ff 1f       	adc	r31, r31
    44dc:	e8 5f       	subi	r30, 0xF8	; 248
    44de:	f1 4b       	sbci	r31, 0xB1	; 177
    44e0:	65 91       	lpm	r22, Z+
    44e2:	74 91       	lpm	r23, Z
	targetStep=pgm_read_word(&(steptable[track->note+param]));	
    44e4:	f9 01       	movw	r30, r18
    44e6:	e4 0f       	add	r30, r20
    44e8:	f1 1d       	adc	r31, r1
    44ea:	47 fd       	sbrc	r20, 7
    44ec:	fa 95       	dec	r31
    44ee:	ee 0f       	add	r30, r30
    44f0:	ff 1f       	adc	r31, r31
    44f2:	e8 5f       	subi	r30, 0xF8	; 248
    44f4:	f1 4b       	sbci	r31, 0xB1	; 177
    44f6:	85 91       	lpm	r24, Z+
    44f8:	94 91       	lpm	r25, Z
	delta=((targetStep-currentStep)/track->slideSpeed);
    44fa:	86 1b       	sub	r24, r22
    44fc:	97 0b       	sbc	r25, r23
    44fe:	68 85       	ldd	r22, Y+8	; 0x08
    4500:	70 e0       	ldi	r23, 0x00	; 0
    4502:	0e 94 ab 34 	call	0x6956	; 0x6956 <__divmodhi4>
	if(delta==0)delta++;
    4506:	61 15       	cp	r22, r1
    4508:	71 05       	cpc	r23, r1
    450a:	11 f4       	brne	.+4      	; 0x4510 <PatchCommand11+0x46>
    450c:	61 e0       	ldi	r22, 0x01	; 1
    450e:	70 e0       	ldi	r23, 0x00	; 0

	mixer.channels.all[track->channel].step+=delta;
    4510:	ea 81       	ldd	r30, Y+2	; 0x02
    4512:	86 e0       	ldi	r24, 0x06	; 6
    4514:	e8 9f       	mul	r30, r24
    4516:	f0 01       	movw	r30, r0
    4518:	11 24       	eor	r1, r1
    451a:	e8 54       	subi	r30, 0x48	; 72
    451c:	f3 4f       	sbci	r31, 0xF3	; 243
    451e:	81 81       	ldd	r24, Z+1	; 0x01
    4520:	92 81       	ldd	r25, Z+2	; 0x02
    4522:	86 0f       	add	r24, r22
    4524:	97 1f       	adc	r25, r23
    4526:	92 83       	std	Z+2, r25	; 0x02
    4528:	81 83       	std	Z+1, r24	; 0x01
	
	track->slideStep=delta;
    452a:	7e 83       	std	Y+6, r23	; 0x06
    452c:	6d 83       	std	Y+5, r22	; 0x05
	track->flags|=TRACK_FLAGS_SLIDING;
    452e:	88 81       	ld	r24, Y
    4530:	88 60       	ori	r24, 0x08	; 8
    4532:	88 83       	st	Y, r24
	track->slideNote=track->note+param;
    4534:	89 81       	ldd	r24, Y+1	; 0x01
    4536:	48 0f       	add	r20, r24
    4538:	4f 83       	std	Y+7, r20	; 0x07
}
    453a:	df 91       	pop	r29
    453c:	cf 91       	pop	r28
    453e:	08 95       	ret

00004540 <PatchCommand12>:
/*
 * Command 12: Pitch slide speed 
 * Param: slide speed (fixed 4:4)
 */
void PatchCommand12(Track* track, char param){
	track->slideSpeed=param;
    4540:	fc 01       	movw	r30, r24
    4542:	60 87       	std	Z+8, r22	; 0x08
    4544:	08 95       	ret

00004546 <PatchCommand13>:
 *  Command 13: Loop start
 * Description: Defines the start of a loop. Works in conjunction with command 14 (PC_LOOP_END).
 *		 Param: loop count
 */
void PatchCommand13(Track* track, char param){
	track->loopCount=(u8)param;
    4546:	fc 01       	movw	r30, r24
    4548:	64 83       	std	Z+4, r22	; 0x04
    454a:	08 95       	ret

0000454c <PatchCommand02>:
/*
 * Command 02: Set wave
 * Param:
 */
void PatchCommand02(Track* track, char param){
	SetMixerWave(track->channel,param);
    454c:	fc 01       	movw	r30, r24
    454e:	82 81       	ldd	r24, Z+2	; 0x02
    4550:	0c 94 8a 26 	jmp	0x4d14	; 0x4d14 <SetMixerWave>

00004554 <PatchCommand03>:
}
/*
 * Command 03: Note up * param
 * Param:
 */
void PatchCommand03(Track* track, char param){
    4554:	fc 01       	movw	r30, r24
	track->note+=param;
    4556:	91 81       	ldd	r25, Z+1	; 0x01
    4558:	69 0f       	add	r22, r25
    455a:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(track->channel,track->note);
    455c:	82 81       	ldd	r24, Z+2	; 0x02
    455e:	0c 94 73 26 	jmp	0x4ce6	; 0x4ce6 <SetMixerNote>

00004562 <PatchCommand04>:
}
/*
 * Command 04: Note down * param
 * Param:
 */
void PatchCommand04(Track* track, char param){
    4562:	fc 01       	movw	r30, r24
	track->note-=param;
    4564:	91 81       	ldd	r25, Z+1	; 0x01
    4566:	96 1b       	sub	r25, r22
    4568:	69 2f       	mov	r22, r25
    456a:	91 83       	std	Z+1, r25	; 0x01
	SetMixerNote(track->channel,track->note);
    456c:	82 81       	ldd	r24, Z+2	; 0x02
    456e:	0c 94 73 26 	jmp	0x4ce6	; 0x4ce6 <SetMixerNote>

00004572 <PatchCommand08>:
/*
 * Command 08: Set Note/Pitch
 * Param:
 */

void PatchCommand08(Track* track, char param){
    4572:	1f 93       	push	r17
    4574:	cf 93       	push	r28
    4576:	df 93       	push	r29
    4578:	ec 01       	movw	r28, r24
    457a:	16 2f       	mov	r17, r22
	SetMixerNote(track->channel,param);
    457c:	8a 81       	ldd	r24, Y+2	; 0x02
    457e:	0e 94 73 26 	call	0x4ce6	; 0x4ce6 <SetMixerNote>
	track->note=param;
    4582:	19 83       	std	Y+1, r17	; 0x01
	track->flags &= ~(TRACK_FLAGS_SLIDING);	
    4584:	88 81       	ld	r24, Y
    4586:	87 7f       	andi	r24, 0xF7	; 247
    4588:	88 83       	st	Y, r24
}
    458a:	df 91       	pop	r29
    458c:	cf 91       	pop	r28
    458e:	1f 91       	pop	r17
    4590:	08 95       	ret

00004592 <PatchCommand14>:
 *					1,PC_NOTE_DOWN,3,
 *					0,PC_LOOP_END,2,
 *					0,PATCH_END  
 *				};
 */
void PatchCommand14(Track* track, char param){
    4592:	dc 01       	movw	r26, r24
	if(track->loopCount>0){
    4594:	14 96       	adiw	r26, 0x04	; 4
    4596:	8c 91       	ld	r24, X
    4598:	14 97       	sbiw	r26, 0x04	; 4
    459a:	88 23       	and	r24, r24
    459c:	19 f1       	breq	.+70     	; 0x45e4 <PatchCommand14+0x52>
    459e:	55 96       	adiw	r26, 0x15	; 21
    45a0:	2d 91       	ld	r18, X+
    45a2:	3c 91       	ld	r19, X
    45a4:	56 97       	sbiw	r26, 0x16	; 22
		//track->patchCommandStreamPos=track->loopStart;
		if(param!=0){
    45a6:	66 23       	and	r22, r22
    45a8:	79 f0       	breq	.+30     	; 0x45c8 <PatchCommand14+0x36>
			track->patchCommandStreamPos-=((param+1)*3);
    45aa:	77 27       	eor	r23, r23
    45ac:	67 fd       	sbrc	r22, 7
    45ae:	70 95       	com	r23
    45b0:	6f 5f       	subi	r22, 0xFF	; 255
    45b2:	7f 4f       	sbci	r23, 0xFF	; 255
    45b4:	ab 01       	movw	r20, r22
    45b6:	44 0f       	add	r20, r20
    45b8:	55 1f       	adc	r21, r21
    45ba:	64 0f       	add	r22, r20
    45bc:	75 1f       	adc	r23, r21
    45be:	26 1b       	sub	r18, r22
    45c0:	37 0b       	sbc	r19, r23
    45c2:	09 c0       	rjmp	.+18     	; 0x45d6 <PatchCommand14+0x44>
			while(1){
				track->patchCommandStreamPos-=3;
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    45c4:	ef 3f       	cpi	r30, 0xFF	; 255
    45c6:	39 f0       	breq	.+14     	; 0x45d6 <PatchCommand14+0x44>
		if(param!=0){
			track->patchCommandStreamPos-=((param+1)*3);
		}else{
			u8 command;
			while(1){
				track->patchCommandStreamPos-=3;
    45c8:	23 50       	subi	r18, 0x03	; 3
    45ca:	31 09       	sbc	r19, r1
    45cc:	f9 01       	movw	r30, r18
    45ce:	32 97       	sbiw	r30, 0x02	; 2
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
    45d0:	e4 91       	lpm	r30, Z
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    45d2:	ed 30       	cpi	r30, 0x0D	; 13
    45d4:	b9 f7       	brne	.-18     	; 0x45c4 <PatchCommand14+0x32>
    45d6:	56 96       	adiw	r26, 0x16	; 22
    45d8:	3c 93       	st	X, r19
    45da:	2e 93       	st	-X, r18
    45dc:	55 97       	sbiw	r26, 0x15	; 21
			}
		}
		track->loopCount--;
    45de:	81 50       	subi	r24, 0x01	; 1
    45e0:	14 96       	adiw	r26, 0x04	; 4
    45e2:	8c 93       	st	X, r24
    45e4:	08 95       	ret

000045e6 <InitMusicPlayer>:

const Patch *patchPointers;

void InitMusicPlayer(const Patch *patchPointersParam){

	patchPointers=patchPointersParam;
    45e6:	90 93 5e 0d 	sts	0x0D5E, r25
    45ea:	80 93 5d 0d 	sts	0x0D5D, r24

	masterVolume=DEFAULT_MASTER_VOL;
    45ee:	8f e6       	ldi	r24, 0x6F	; 111
    45f0:	80 93 60 0d 	sts	0x0D60, r24
#if MIDI_IN == ENABLED
	InitUartRxBuffer();
	lastMidiInStatus=0;
#endif

	playSong=false;
    45f4:	10 92 b6 0c 	sts	0x0CB6, r1
    45f8:	e8 ef       	ldi	r30, 0xF8	; 248
    45fa:	fc e0       	ldi	r31, 0x0C	; 12

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    45fc:	80 e0       	ldi	r24, 0x00	; 0
		tracks[t].channel=t;
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    45fe:	90 e1       	ldi	r25, 0x10	; 16
		tracks[t].noteVol=0;
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    4600:	3f ef       	ldi	r19, 0xFF	; 255
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
    4602:	28 e1       	ldi	r18, 0x18	; 24
    4604:	df 01       	movw	r26, r30
    4606:	1e 97       	sbiw	r26, 0x0e	; 14

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].channel=t;
    4608:	8c 93       	st	X, r24
    460a:	12 97       	sbiw	r26, 0x02	; 2
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    460c:	9c 93       	st	X, r25
    460e:	1d 96       	adiw	r26, 0x0d	; 13
		tracks[t].noteVol=0;
    4610:	1c 92       	st	X, r1
    4612:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    4614:	3c 93       	st	X, r19
		tracks[t].patchNo=DEFAULT_PATCH;
    4616:	10 82       	st	Z, r1
    4618:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].tremoloRate=24; //~6hz
    461a:	2c 93       	st	X, r18
    461c:	13 97       	sbiw	r26, 0x03	; 3
		tracks[t].slideSpeed=0x10;
    461e:	9c 93       	st	X, r25
#endif

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    4620:	8f 5f       	subi	r24, 0xFF	; 255
    4622:	77 96       	adiw	r30, 0x17	; 23
    4624:	85 30       	cpi	r24, 0x05	; 5
    4626:	71 f7       	brne	.-36     	; 0x4604 <InitMusicPlayer+0x1e>
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
		tracks[t].slideSpeed=0x10;
	}

}
    4628:	08 95       	ret

0000462a <ReadVarLen>:
}



unsigned int ReadVarLen(const char **songPos)
{
    462a:	dc 01       	movw	r26, r24
    unsigned int value;
    unsigned char c;


    if ( (value = pgm_read_byte((*songPos)++)) & 0x80 )
    462c:	ed 91       	ld	r30, X+
    462e:	fc 91       	ld	r31, X
    4630:	11 97       	sbiw	r26, 0x01	; 1
    4632:	9f 01       	movw	r18, r30
    4634:	2f 5f       	subi	r18, 0xFF	; 255
    4636:	3f 4f       	sbci	r19, 0xFF	; 255
    4638:	11 96       	adiw	r26, 0x01	; 1
    463a:	3c 93       	st	X, r19
    463c:	2e 93       	st	-X, r18
    463e:	e4 91       	lpm	r30, Z
    4640:	e7 fd       	sbrc	r30, 7
    4642:	03 c0       	rjmp	.+6      	; 0x464a <ReadVarLen+0x20>
    4644:	8e 2f       	mov	r24, r30
    4646:	90 e0       	ldi	r25, 0x00	; 0
    4648:	08 95       	ret
    {
       value &= 0x7F;
    464a:	ef 77       	andi	r30, 0x7F	; 127
    464c:	8e 2f       	mov	r24, r30
    464e:	90 e0       	ldi	r25, 0x00	; 0
       do
       {
         value = (value << 7) + ((c = pgm_read_byte((*songPos)++)) & 0x7F);
    4650:	96 95       	lsr	r25
    4652:	98 2f       	mov	r25, r24
    4654:	88 27       	eor	r24, r24
    4656:	97 95       	ror	r25
    4658:	87 95       	ror	r24
    465a:	2f 5f       	subi	r18, 0xFF	; 255
    465c:	3f 4f       	sbci	r19, 0xFF	; 255
    465e:	f9 01       	movw	r30, r18
    4660:	31 97       	sbiw	r30, 0x01	; 1
    4662:	e4 91       	lpm	r30, Z
    4664:	4e 2f       	mov	r20, r30
    4666:	4f 77       	andi	r20, 0x7F	; 127
    4668:	84 0f       	add	r24, r20
    466a:	91 1d       	adc	r25, r1
       } while (c & 0x80);
    466c:	e7 fd       	sbrc	r30, 7
    466e:	f0 cf       	rjmp	.-32     	; 0x4650 <ReadVarLen+0x26>
    4670:	2d 93       	st	X+, r18
    4672:	3c 93       	st	X, r19
    }


    return value;
}
    4674:	08 95       	ret

00004676 <TriggerCommon>:




void TriggerCommon(Track* track,u8 patch,u8 volume,u8 note){
    4676:	ef 92       	push	r14
    4678:	ff 92       	push	r15
    467a:	0f 93       	push	r16
    467c:	1f 93       	push	r17
    467e:	cf 93       	push	r28
    4680:	df 93       	push	r29
    4682:	1f 92       	push	r1
    4684:	cd b7       	in	r28, 0x3d	; 61
    4686:	de b7       	in	r29, 0x3e	; 62
    4688:	7c 01       	movw	r14, r24
    468a:	16 2f       	mov	r17, r22
		
	bool isFx = (track->flags&TRACK_FLAGS_PRIORITY);
    468c:	fc 01       	movw	r30, r24
    468e:	80 81       	ld	r24, Z
    4690:	08 2f       	mov	r16, r24
    4692:	00 1f       	adc	r16, r16
    4694:	00 27       	eor	r16, r16
    4696:	00 1f       	adc	r16, r16

	track->envelopeStep=0; 
    4698:	17 86       	std	Z+15, r1	; 0x0f
	track->envelopeVol=0xff; 
    469a:	9f ef       	ldi	r25, 0xFF	; 255
    469c:	96 87       	std	Z+14, r25	; 0x0e
	track->noteVol=volume;
    469e:	45 87       	std	Z+13, r20	; 0x0d
	track->patchPlayingTime=0;
    46a0:	14 8a       	std	Z+20, r1	; 0x14
	track->flags&=(~(TRACK_FLAGS_HOLD_ENV|TRACK_FLAGS_SLIDING));
    46a2:	87 7b       	andi	r24, 0xB7	; 183
    46a4:	80 83       	st	Z, r24
	track->tremoloLevel=0;
    46a6:	12 86       	std	Z+10, r1	; 0x0a
	track->tremoloPos=0;
    46a8:	11 86       	std	Z+9, r1	; 0x09
	track->note=note;
    46aa:	21 83       	std	Z+1, r18	; 0x01
	track->loopCount=0;
    46ac:	14 82       	std	Z+4, r1	; 0x04

#if MUSIC_ENGINE == MIDI
	track->expressionVol=DEFAULT_EXPRESSION_VOL;
    46ae:	93 83       	std	Z+3, r25	; 0x03
#endif

	#if SOUND_MIXER == MIXER_TYPE_INLINE

		if(track->channel==3){
    46b0:	82 81       	ldd	r24, Z+2	; 0x02
    46b2:	83 30       	cpi	r24, 0x03	; 3
    46b4:	69 f4       	brne	.+26     	; 0x46d0 <TriggerCommon+0x5a>
			//noise channel		
			if(!isFx) patch=note;			
    46b6:	01 11       	cpse	r16, r1
    46b8:	01 c0       	rjmp	.+2      	; 0x46bc <TriggerCommon+0x46>
    46ba:	12 2f       	mov	r17, r18
			mixer.channels.type.noise.barrel=0x0101;				
    46bc:	81 e0       	ldi	r24, 0x01	; 1
    46be:	91 e0       	ldi	r25, 0x01	; 1
    46c0:	90 93 cd 0c 	sts	0x0CCD, r25
    46c4:	80 93 cc 0c 	sts	0x0CCC, r24
			mixer.channels.type.noise.params=1; //default (15bits,no divider)
    46c8:	81 e0       	ldi	r24, 0x01	; 1
    46ca:	80 93 cb 0c 	sts	0x0CCB, r24
    46ce:	39 c0       	rjmp	.+114    	; 0x4742 <TriggerCommon+0xcc>

		#if SOUND_CHANNEL_5_ENABLE==1		

		}else if(track->channel==4){
    46d0:	84 30       	cpi	r24, 0x04	; 4
    46d2:	69 f5       	brne	.+90     	; 0x472e <TriggerCommon+0xb8>
				//PCM channel					
				mixer.channels.type.pcm.positionFrac=0;
    46d4:	10 92 d3 0c 	sts	0x0CD3, r1
				const char *pos=(const char*)pgm_read_word(&(patchPointers[patch].pcmData));
    46d8:	80 91 5d 0d 	lds	r24, 0x0D5D
    46dc:	90 91 5e 0d 	lds	r25, 0x0D5E
    46e0:	f9 e0       	ldi	r31, 0x09	; 9
    46e2:	6f 9f       	mul	r22, r31
    46e4:	80 0d       	add	r24, r0
    46e6:	91 1d       	adc	r25, r1
    46e8:	11 24       	eor	r1, r1
    46ea:	fc 01       	movw	r30, r24
    46ec:	31 96       	adiw	r30, 0x01	; 1
    46ee:	a5 91       	lpm	r26, Z+
    46f0:	b4 91       	lpm	r27, Z
				mixer.channels.type.pcm.position=pos;				
    46f2:	b0 93 d5 0c 	sts	0x0CD5, r27
    46f6:	a0 93 d4 0c 	sts	0x0CD4, r26
				mixer.pcmLoopLenght=pgm_read_word(&(patchPointers[patch].loopEnd))-pgm_read_word(&(patchPointers[patch].loopStart));
    46fa:	ac 01       	movw	r20, r24
    46fc:	49 5f       	subi	r20, 0xF9	; 249
    46fe:	5f 4f       	sbci	r21, 0xFF	; 255
    4700:	fa 01       	movw	r30, r20
    4702:	65 91       	lpm	r22, Z+
    4704:	74 91       	lpm	r23, Z
    4706:	05 96       	adiw	r24, 0x05	; 5
    4708:	fc 01       	movw	r30, r24
    470a:	85 91       	lpm	r24, Z+
    470c:	94 91       	lpm	r25, Z
    470e:	68 1b       	sub	r22, r24
    4710:	79 0b       	sbc	r23, r25
    4712:	70 93 d7 0c 	sts	0x0CD7, r23
    4716:	60 93 d6 0c 	sts	0x0CD6, r22
				mixer.pcmLoopEnd=pos+pgm_read_word(&(patchPointers[patch].loopEnd));
    471a:	fa 01       	movw	r30, r20
    471c:	85 91       	lpm	r24, Z+
    471e:	94 91       	lpm	r25, Z
    4720:	a8 0f       	add	r26, r24
    4722:	b9 1f       	adc	r27, r25
    4724:	b0 93 d9 0c 	sts	0x0CD9, r27
    4728:	a0 93 d8 0c 	sts	0x0CD8, r26
    472c:	05 c0       	rjmp	.+10     	; 0x4738 <TriggerCommon+0xc2>
				SetMixerNote(track->channel,note);
		#endif	

		}else{					
			//wave channels					
			SetMixerWave(track->channel,0);//default wave
    472e:	60 e0       	ldi	r22, 0x00	; 0
    4730:	29 83       	std	Y+1, r18	; 0x01
    4732:	0e 94 8a 26 	call	0x4d14	; 0x4d14 <SetMixerWave>
			SetMixerNote(track->channel,note);
    4736:	29 81       	ldd	r18, Y+1	; 0x01
    4738:	62 2f       	mov	r22, r18
    473a:	f7 01       	movw	r30, r14
    473c:	82 81       	ldd	r24, Z+2	; 0x02
    473e:	0e 94 73 26 	call	0x4ce6	; 0x4ce6 <SetMixerNote>
		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
		track->fxPatchNo=patch;
    4742:	f7 01       	movw	r30, r14

		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
    4744:	00 23       	and	r16, r16
    4746:	11 f0       	breq	.+4      	; 0x474c <TriggerCommon+0xd6>
		track->fxPatchNo=patch;
    4748:	11 8b       	std	Z+17, r17	; 0x11
    474a:	01 c0       	rjmp	.+2      	; 0x474e <TriggerCommon+0xd8>
	}else{
		track->patchNo=patch;	
    474c:	10 8b       	std	Z+16, r17	; 0x10
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
    474e:	e0 91 5d 0d 	lds	r30, 0x0D5D
    4752:	f0 91 5e 0d 	lds	r31, 0x0D5E
    4756:	39 e0       	ldi	r19, 0x09	; 9
    4758:	13 9f       	mul	r17, r19
    475a:	e0 0d       	add	r30, r0
    475c:	f1 1d       	adc	r31, r1
    475e:	11 24       	eor	r1, r1
    4760:	33 96       	adiw	r30, 0x03	; 3
    4762:	85 91       	lpm	r24, Z+
    4764:	94 91       	lpm	r25, Z
	if(pos==NULL){
		track->patchCommandStreamPos=NULL;
    4766:	f7 01       	movw	r30, r14
	}else{
		track->patchNo=patch;	
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
	if(pos==NULL){
    4768:	00 97       	sbiw	r24, 0x00	; 0
    476a:	19 f4       	brne	.+6      	; 0x4772 <TriggerCommon+0xfc>
		track->patchCommandStreamPos=NULL;
    476c:	16 8a       	std	Z+22, r1	; 0x16
    476e:	15 8a       	std	Z+21, r1	; 0x15
    4770:	08 c0       	rjmp	.+16     	; 0x4782 <TriggerCommon+0x10c>
	}else{
		track->patchCurrDeltaTime=0;
    4772:	13 8a       	std	Z+19, r1	; 0x13
		track->patchNextDeltaTime=pgm_read_byte(pos++);
    4774:	fc 01       	movw	r30, r24
    4776:	24 91       	lpm	r18, Z
    4778:	f7 01       	movw	r30, r14
    477a:	22 8b       	std	Z+18, r18	; 0x12
    477c:	01 96       	adiw	r24, 0x01	; 1
		track->patchCommandStreamPos=pos;
    477e:	96 8b       	std	Z+22, r25	; 0x16
    4780:	85 8b       	std	Z+21, r24	; 0x15
	}

}
    4782:	0f 90       	pop	r0
    4784:	df 91       	pop	r29
    4786:	cf 91       	pop	r28
    4788:	1f 91       	pop	r17
    478a:	0f 91       	pop	r16
    478c:	ff 90       	pop	r15
    478e:	ef 90       	pop	r14
    4790:	08 95       	ret

00004792 <TriggerFx>:

/* Trigger a sound effect.
 * Method allocates the channel based on priority.
 * Retrig: if this fx if already playing on a track, reuse same track.
 */
void TriggerFx(unsigned char patch,unsigned char volume,bool retrig){
    4792:	cf 93       	push	r28
    4794:	df 93       	push	r29
	unsigned char channel;
	
	unsigned char type=(unsigned char)pgm_read_byte(&(patchPointers[patch].type));
    4796:	e0 91 5d 0d 	lds	r30, 0x0D5D
    479a:	f0 91 5e 0d 	lds	r31, 0x0D5E
    479e:	99 e0       	ldi	r25, 0x09	; 9
    47a0:	89 9f       	mul	r24, r25
    47a2:	e0 0d       	add	r30, r0
    47a4:	f1 1d       	adc	r31, r1
    47a6:	11 24       	eor	r1, r1
    47a8:	e4 91       	lpm	r30, Z

	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
    47aa:	e1 30       	cpi	r30, 0x01	; 1
    47ac:	e9 f0       	breq	.+58     	; 0x47e8 <TriggerFx+0x56>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
    47ae:	e2 30       	cpi	r30, 0x02	; 2
    47b0:	e9 f0       	breq	.+58     	; 0x47ec <TriggerFx+0x5a>
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
    47b2:	20 91 ff 0c 	lds	r18, 0x0CFF
    47b6:	27 ff       	sbrs	r18, 7
    47b8:	1d c0       	rjmp	.+58     	; 0x47f4 <TriggerFx+0x62>
    47ba:	20 91 10 0d 	lds	r18, 0x0D10
    47be:	28 13       	cpse	r18, r24
    47c0:	02 c0       	rjmp	.+4      	; 0x47c6 <TriggerFx+0x34>
    47c2:	41 11       	cpse	r20, r1
    47c4:	17 c0       	rjmp	.+46     	; 0x47f4 <TriggerFx+0x62>
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
    47c6:	20 91 16 0d 	lds	r18, 0x0D16
    47ca:	27 ff       	sbrs	r18, 7
    47cc:	11 c0       	rjmp	.+34     	; 0x47f0 <TriggerFx+0x5e>
    47ce:	20 91 27 0d 	lds	r18, 0x0D27
    47d2:	28 13       	cpse	r18, r24
    47d4:	02 c0       	rjmp	.+4      	; 0x47da <TriggerFx+0x48>
    47d6:	41 11       	cpse	r20, r1
    47d8:	0b c0       	rjmp	.+22     	; 0x47f0 <TriggerFx+0x5e>
		channel=2;
	}else{
		//both channels have fx playing, use the oldest one
		if(tracks[1].patchPlayingTime>tracks[2].patchPlayingTime){
    47da:	20 91 13 0d 	lds	r18, 0x0D13
    47de:	90 91 2a 0d 	lds	r25, 0x0D2A
    47e2:	92 17       	cp	r25, r18
    47e4:	28 f4       	brcc	.+10     	; 0x47f0 <TriggerFx+0x5e>
    47e6:	06 c0       	rjmp	.+12     	; 0x47f4 <TriggerFx+0x62>
	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
		//noise or PCM channel fx		
		channel=3;
    47e8:	c3 e0       	ldi	r28, 0x03	; 3
    47ea:	05 c0       	rjmp	.+10     	; 0x47f6 <TriggerFx+0x64>
	}else if(type==2){
		channel=4;
    47ec:	c4 e0       	ldi	r28, 0x04	; 4
    47ee:	03 c0       	rjmp	.+6      	; 0x47f6 <TriggerFx+0x64>
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
		channel=2;
    47f0:	c2 e0       	ldi	r28, 0x02	; 2
    47f2:	01 c0       	rjmp	.+2      	; 0x47f6 <TriggerFx+0x64>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
    47f4:	c1 e0       	ldi	r28, 0x01	; 1
			channel=2;
		}
	}				

	Track* track=&tracks[channel];
	track->flags=TRACK_FLAGS_PRIORITY; //priority=1;
    47f6:	97 e1       	ldi	r25, 0x17	; 23
    47f8:	c9 9f       	mul	r28, r25
    47fa:	e0 01       	movw	r28, r0
    47fc:	11 24       	eor	r1, r1
    47fe:	c8 51       	subi	r28, 0x18	; 24
    4800:	d3 4f       	sbci	r29, 0xF3	; 243
    4802:	90 e8       	ldi	r25, 0x80	; 128
    4804:	98 83       	st	Y, r25
	track->patchCommandStreamPos = NULL;
    4806:	1e 8a       	std	Y+22, r1	; 0x16
    4808:	1d 8a       	std	Y+21, r1	; 0x15
	TriggerCommon(track,patch,volume,80);
    480a:	20 e5       	ldi	r18, 0x50	; 80
    480c:	46 2f       	mov	r20, r22
    480e:	68 2f       	mov	r22, r24
    4810:	ce 01       	movw	r24, r28
    4812:	0e 94 3b 23 	call	0x4676	; 0x4676 <TriggerCommon>
	track->flags|=TRACK_FLAGS_PLAYING;
    4816:	88 81       	ld	r24, Y
    4818:	80 62       	ori	r24, 0x20	; 32
    481a:	88 83       	st	Y, r24
}
    481c:	df 91       	pop	r29
    481e:	cf 91       	pop	r28
    4820:	08 95       	ret

00004822 <TriggerNote>:


void TriggerNote(unsigned char channel,unsigned char patch,unsigned char note,unsigned char volume){
    4822:	cf 93       	push	r28
    4824:	df 93       	push	r29
	Track* track=&tracks[channel];

	//allow only other music notes 
	if((track->flags&TRACK_FLAGS_PLAYING)==0 || (track->flags&TRACK_FLAGS_PRIORITY)==0){
    4826:	a8 2f       	mov	r26, r24
    4828:	b0 e0       	ldi	r27, 0x00	; 0
    482a:	97 e1       	ldi	r25, 0x17	; 23
    482c:	89 9f       	mul	r24, r25
    482e:	f0 01       	movw	r30, r0
    4830:	11 24       	eor	r1, r1
    4832:	e8 51       	subi	r30, 0x18	; 24
    4834:	f3 4f       	sbci	r31, 0xF3	; 243
    4836:	80 81       	ld	r24, Z
    4838:	85 ff       	sbrs	r24, 5
    483a:	02 c0       	rjmp	.+4      	; 0x4840 <TriggerNote+0x1e>
    483c:	87 fd       	sbrc	r24, 7
    483e:	2e c0       	rjmp	.+92     	; 0x489c <TriggerNote+0x7a>
			
		if(volume==0){ //note-off received
    4840:	21 11       	cpse	r18, r1
    4842:	18 c0       	rjmp	.+48     	; 0x4874 <TriggerNote+0x52>

			
			//cut note if there's no envelope & no note hold
			if(track->envelopeStep==0 && !(track->flags&TRACK_FLAGS_HOLD_ENV)){
    4844:	97 e1       	ldi	r25, 0x17	; 23
    4846:	9a 9f       	mul	r25, r26
    4848:	f0 01       	movw	r30, r0
    484a:	9b 9f       	mul	r25, r27
    484c:	f0 0d       	add	r31, r0
    484e:	11 24       	eor	r1, r1
    4850:	e8 51       	subi	r30, 0x18	; 24
    4852:	f3 4f       	sbci	r31, 0xF3	; 243
    4854:	97 85       	ldd	r25, Z+15	; 0x0f
    4856:	91 11       	cpse	r25, r1
    4858:	02 c0       	rjmp	.+4      	; 0x485e <TriggerNote+0x3c>
    485a:	86 ff       	sbrs	r24, 6
				track->noteVol=0;
    485c:	15 86       	std	Z+13, r1	; 0x0d
			}

			track->flags&=(~TRACK_FLAGS_HOLD_ENV);//patchEnvelopeHold=false;
    485e:	97 e1       	ldi	r25, 0x17	; 23
    4860:	9a 9f       	mul	r25, r26
    4862:	f0 01       	movw	r30, r0
    4864:	9b 9f       	mul	r25, r27
    4866:	f0 0d       	add	r31, r0
    4868:	11 24       	eor	r1, r1
    486a:	e8 51       	subi	r30, 0x18	; 24
    486c:	f3 4f       	sbci	r31, 0xF3	; 243
    486e:	8f 7b       	andi	r24, 0xBF	; 191
    4870:	80 83       	st	Z, r24
    4872:	14 c0       	rjmp	.+40     	; 0x489c <TriggerNote+0x7a>
    4874:	82 2f       	mov	r24, r18
    4876:	24 2f       	mov	r18, r20
		}else{
		
			track->flags=0;//&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    4878:	97 e1       	ldi	r25, 0x17	; 23
    487a:	9a 9f       	mul	r25, r26
    487c:	e0 01       	movw	r28, r0
    487e:	9b 9f       	mul	r25, r27
    4880:	d0 0d       	add	r29, r0
    4882:	11 24       	eor	r1, r1
    4884:	c8 51       	subi	r28, 0x18	; 24
    4886:	d3 4f       	sbci	r29, 0xF3	; 243
    4888:	18 82       	st	Y, r1
			track->patchCommandStreamPos = NULL;
    488a:	1e 8a       	std	Y+22, r1	; 0x16
    488c:	1d 8a       	std	Y+21, r1	; 0x15
			TriggerCommon(track,patch,volume,note);
    488e:	48 2f       	mov	r20, r24
    4890:	ce 01       	movw	r24, r28
    4892:	0e 94 3b 23 	call	0x4676	; 0x4676 <TriggerCommon>
			track->flags|=TRACK_FLAGS_PLAYING;
    4896:	88 81       	ld	r24, Y
    4898:	80 62       	ori	r24, 0x20	; 32
    489a:	88 83       	st	Y, r24
		}

	}
}
    489c:	df 91       	pop	r29
    489e:	cf 91       	pop	r28
    48a0:	08 95       	ret

000048a2 <ProcessMusic>:
	}

#endif


void ProcessMusic(void){
    48a2:	6f 92       	push	r6
    48a4:	7f 92       	push	r7
    48a6:	8f 92       	push	r8
    48a8:	9f 92       	push	r9
    48aa:	af 92       	push	r10
    48ac:	bf 92       	push	r11
    48ae:	cf 92       	push	r12
    48b0:	df 92       	push	r13
    48b2:	ef 92       	push	r14
    48b4:	ff 92       	push	r15
    48b6:	0f 93       	push	r16
    48b8:	1f 93       	push	r17
    48ba:	cf 93       	push	r28
    48bc:	df 93       	push	r29
    48be:	c8 ee       	ldi	r28, 0xE8	; 232
    48c0:	dc e0       	ldi	r29, 0x0C	; 12
    48c2:	08 eb       	ldi	r16, 0xB8	; 184
    48c4:	1c e0       	ldi	r17, 0x0C	; 12
    48c6:	d8 01       	movw	r26, r16
    48c8:	9e 01       	movw	r18, r28
    48ca:	40 e0       	ldi	r20, 0x00	; 0
    48cc:	50 e0       	ldi	r21, 0x00	; 0
    48ce:	ca 01       	movw	r24, r20
    48d0:	88 51       	subi	r24, 0x18	; 24
    48d2:	93 4f       	sbci	r25, 0xF3	; 243
    48d4:	6c 01       	movw	r12, r24
	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//update envelope
		if(track->envelopeStep!=0){
    48d6:	fc 01       	movw	r30, r24
    48d8:	87 85       	ldd	r24, Z+15	; 0x0f
    48da:	88 23       	and	r24, r24
    48dc:	91 f0       	breq	.+36     	; 0x4902 <ProcessMusic+0x60>
			vol=track->envelopeVol+track->envelopeStep;		
    48de:	66 85       	ldd	r22, Z+14	; 0x0e
    48e0:	99 27       	eor	r25, r25
    48e2:	87 fd       	sbrc	r24, 7
    48e4:	90 95       	com	r25
    48e6:	86 0f       	add	r24, r22
    48e8:	91 1d       	adc	r25, r1
    48ea:	8f 3f       	cpi	r24, 0xFF	; 255
    48ec:	91 05       	cpc	r25, r1
    48ee:	19 f0       	breq	.+6      	; 0x48f6 <ProcessMusic+0x54>
    48f0:	14 f0       	brlt	.+4      	; 0x48f6 <ProcessMusic+0x54>
    48f2:	8f ef       	ldi	r24, 0xFF	; 255
    48f4:	90 e0       	ldi	r25, 0x00	; 0
    48f6:	97 ff       	sbrs	r25, 7
    48f8:	02 c0       	rjmp	.+4      	; 0x48fe <ProcessMusic+0x5c>
    48fa:	80 e0       	ldi	r24, 0x00	; 0
    48fc:	90 e0       	ldi	r25, 0x00	; 0
			if(vol<0){
				vol=0;			
			}else if(vol>0xff){
				vol=0xff;						
			}
			track->envelopeVol=vol;
    48fe:	f6 01       	movw	r30, r12
    4900:	86 87       	std	Z+14, r24	; 0x0e
		}

		//if volumes reaches zero and no more patch command, explicitly end playing on track
		//if(vol==0 && track->patchCommandStreamPos==NULL) track->flags&=~(TRACK_FLAGS_PLAYING);

		if(track->flags & TRACK_FLAGS_SLIDING){
    4902:	f9 01       	movw	r30, r18
    4904:	f0 80       	ld	r15, Z
    4906:	f3 fe       	sbrs	r15, 3
    4908:	2a c0       	rjmp	.+84     	; 0x495e <ProcessMusic+0xbc>

			mixer.channels.all[trackNo].step+=track->slideStep;
    490a:	65 81       	ldd	r22, Z+5	; 0x05
    490c:	76 81       	ldd	r23, Z+6	; 0x06
    490e:	11 96       	adiw	r26, 0x01	; 1
    4910:	8d 91       	ld	r24, X+
    4912:	9c 91       	ld	r25, X
    4914:	12 97       	sbiw	r26, 0x02	; 2
    4916:	86 0f       	add	r24, r22
    4918:	97 1f       	adc	r25, r23
    491a:	12 96       	adiw	r26, 0x02	; 2
    491c:	9c 93       	st	X, r25
    491e:	8e 93       	st	-X, r24
    4920:	11 97       	sbiw	r26, 0x01	; 1
			u16 tStep=pgm_read_word(&(steptable[track->slideNote]));
    4922:	f6 01       	movw	r30, r12
    4924:	e7 80       	ldd	r14, Z+7	; 0x07
    4926:	ee 2d       	mov	r30, r14
    4928:	f0 e0       	ldi	r31, 0x00	; 0
    492a:	ee 0f       	add	r30, r30
    492c:	ff 1f       	adc	r31, r31
    492e:	e8 5f       	subi	r30, 0xF8	; 248
    4930:	f1 4b       	sbci	r31, 0xB1	; 177
    4932:	c5 90       	lpm	r12, Z+
    4934:	d4 90       	lpm	r13, Z

			if((track->slideStep>0 && mixer.channels.all[trackNo].step>=tStep) || 
    4936:	16 16       	cp	r1, r22
    4938:	17 06       	cpc	r1, r23
    493a:	24 f4       	brge	.+8      	; 0x4944 <ProcessMusic+0xa2>
    493c:	8c 15       	cp	r24, r12
    493e:	9d 05       	cpc	r25, r13
    4940:	30 f4       	brcc	.+12     	; 0x494e <ProcessMusic+0xac>
    4942:	0d c0       	rjmp	.+26     	; 0x495e <ProcessMusic+0xbc>
    4944:	67 2b       	or	r22, r23
    4946:	59 f0       	breq	.+22     	; 0x495e <ProcessMusic+0xbc>
				(track->slideStep<0 && mixer.channels.all[trackNo].step<=tStep))
    4948:	c8 16       	cp	r12, r24
    494a:	d9 06       	cpc	r13, r25
    494c:	40 f0       	brcs	.+16     	; 0x495e <ProcessMusic+0xbc>
			{					
				mixer.channels.all[trackNo].step = tStep;					
    494e:	12 96       	adiw	r26, 0x02	; 2
    4950:	dc 92       	st	X, r13
    4952:	ce 92       	st	-X, r12
    4954:	11 97       	sbiw	r26, 0x01	; 1
				track->flags &= ~(TRACK_FLAGS_SLIDING);	
    4956:	8f 2d       	mov	r24, r15
    4958:	87 7f       	andi	r24, 0xF7	; 247
    495a:	f9 01       	movw	r30, r18
    495c:	80 83       	st	Z, r24
    495e:	49 5e       	subi	r20, 0xE9	; 233
    4960:	5f 4f       	sbci	r21, 0xFF	; 255
    4962:	29 5e       	subi	r18, 0xE9	; 233
    4964:	3f 4f       	sbci	r19, 0xFF	; 255
    4966:	16 96       	adiw	r26, 0x06	; 6
	u8 channel;
	Track* track;


	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    4968:	43 37       	cpi	r20, 0x73	; 115
    496a:	51 05       	cpc	r21, r1
    496c:	09 f0       	breq	.+2      	; 0x4970 <ProcessMusic+0xce>
    496e:	af cf       	rjmp	.-162    	; 0x48ce <ProcessMusic+0x2c>
	}



	//Process song MIDI notes
	if(playSong){
    4970:	80 91 b6 0c 	lds	r24, 0x0CB6
    4974:	88 23       	and	r24, r24
    4976:	09 f4       	brne	.+2      	; 0x497a <ProcessMusic+0xd8>
    4978:	cc c0       	rjmp	.+408    	; 0x4b12 <ProcessMusic+0x270>
							}else if(c1==CONTROLER_EXPRESSION){
								tracks[channel].expressionVol=c2<<1;
							}else if(c1==CONTROLER_TREMOLO){
								tracks[channel].tremoloLevel=c2<<1;
							}else if(c1==CONTROLER_TREMOLO_RATE){
								tracks[channel].tremoloRate=c2<<1;
    497a:	57 e1       	ldi	r21, 0x17	; 23
    497c:	f5 2e       	mov	r15, r21
	if(playSong){
	
		#if MUSIC_ENGINE == MIDI
			
			//process all simultaneous events
			while(currDeltaTime==nextDeltaTime){
    497e:	80 91 5b 0d 	lds	r24, 0x0D5B
    4982:	90 91 5c 0d 	lds	r25, 0x0D5C
    4986:	20 91 61 0d 	lds	r18, 0x0D61
    498a:	30 91 62 0d 	lds	r19, 0x0D62
    498e:	82 17       	cp	r24, r18
    4990:	93 07       	cpc	r25, r19
    4992:	09 f0       	breq	.+2      	; 0x4996 <ProcessMusic+0xf4>
    4994:	b9 c0       	rjmp	.+370    	; 0x4b08 <ProcessMusic+0x266>

				c1=pgm_read_byte(songPos++);
    4996:	20 91 64 0d 	lds	r18, 0x0D64
    499a:	30 91 65 0d 	lds	r19, 0x0D65
    499e:	b9 01       	movw	r22, r18
    49a0:	6f 5f       	subi	r22, 0xFF	; 255
    49a2:	7f 4f       	sbci	r23, 0xFF	; 255
    49a4:	70 93 65 0d 	sts	0x0D65, r23
    49a8:	60 93 64 0d 	sts	0x0D64, r22
    49ac:	f9 01       	movw	r30, r18
    49ae:	44 91       	lpm	r20, Z
			
				if(c1==0xff){
    49b0:	4f 3f       	cpi	r20, 0xFF	; 255
    49b2:	79 f5       	brne	.+94     	; 0x4a12 <ProcessMusic+0x170>
					//META data type event
					c1=pgm_read_byte(songPos++);
    49b4:	a9 01       	movw	r20, r18
    49b6:	4e 5f       	subi	r20, 0xFE	; 254
    49b8:	5f 4f       	sbci	r21, 0xFF	; 255
    49ba:	50 93 65 0d 	sts	0x0D65, r21
    49be:	40 93 64 0d 	sts	0x0D64, r20
    49c2:	fb 01       	movw	r30, r22
    49c4:	64 91       	lpm	r22, Z

				
					if(c1==0x2f){ //end of song
    49c6:	6f 32       	cpi	r22, 0x2F	; 47
    49c8:	19 f4       	brne	.+6      	; 0x49d0 <ProcessMusic+0x12e>
						playSong=false;
    49ca:	10 92 b6 0c 	sts	0x0CB6, r1
						break;	
    49ce:	9c c0       	rjmp	.+312    	; 0x4b08 <ProcessMusic+0x266>
					}else if(c1==0x6){ //marker
    49d0:	66 30       	cpi	r22, 0x06	; 6
    49d2:	09 f0       	breq	.+2      	; 0x49d6 <ProcessMusic+0x134>
    49d4:	8c c0       	rjmp	.+280    	; 0x4aee <ProcessMusic+0x24c>
						c1=pgm_read_byte(songPos++); //read len
    49d6:	fa 01       	movw	r30, r20
    49d8:	44 91       	lpm	r20, Z
						c2=pgm_read_byte(songPos++); //read data
    49da:	c9 01       	movw	r24, r18
    49dc:	04 96       	adiw	r24, 0x04	; 4
    49de:	90 93 65 0d 	sts	0x0D65, r25
    49e2:	80 93 64 0d 	sts	0x0D64, r24
				
					if(c1==0x2f){ //end of song
						playSong=false;
						break;	
					}else if(c1==0x6){ //marker
						c1=pgm_read_byte(songPos++); //read len
    49e6:	f9 01       	movw	r30, r18
    49e8:	33 96       	adiw	r30, 0x03	; 3
						c2=pgm_read_byte(songPos++); //read data
    49ea:	e4 91       	lpm	r30, Z
						if(c2=='S'){ //loop start
    49ec:	e3 35       	cpi	r30, 0x53	; 83
    49ee:	29 f4       	brne	.+10     	; 0x49fa <ProcessMusic+0x158>
							loopStart=songPos;
    49f0:	90 93 67 0d 	sts	0x0D67, r25
    49f4:	80 93 66 0d 	sts	0x0D66, r24
    49f8:	7a c0       	rjmp	.+244    	; 0x4aee <ProcessMusic+0x24c>
						}else if(c2=='E'){//loop end
    49fa:	e5 34       	cpi	r30, 0x45	; 69
    49fc:	09 f0       	breq	.+2      	; 0x4a00 <ProcessMusic+0x15e>
    49fe:	77 c0       	rjmp	.+238    	; 0x4aee <ProcessMusic+0x24c>
							songPos=loopStart;
    4a00:	80 91 66 0d 	lds	r24, 0x0D66
    4a04:	90 91 67 0d 	lds	r25, 0x0D67
    4a08:	90 93 65 0d 	sts	0x0D65, r25
    4a0c:	80 93 64 0d 	sts	0x0D64, r24
    4a10:	6e c0       	rjmp	.+220    	; 0x4aee <ProcessMusic+0x24c>
					}
				

				}else{

					if(c1&0x80) lastStatus=c1;					
    4a12:	47 fd       	sbrc	r20, 7
    4a14:	40 93 5f 0d 	sts	0x0D5F, r20
					channel=lastStatus&0x0f;
    4a18:	90 91 5f 0d 	lds	r25, 0x0D5F
    4a1c:	89 2f       	mov	r24, r25
    4a1e:	8f 70       	andi	r24, 0x0F	; 15
				
					//get next data byte
					//Note: maybe we should not advance the cursor
					//in case we receive an unsupported command				
					if(c1&0x80) c1=pgm_read_byte(songPos++); 
    4a20:	47 ff       	sbrs	r20, 7
    4a22:	08 c0       	rjmp	.+16     	; 0x4a34 <ProcessMusic+0x192>
    4a24:	2e 5f       	subi	r18, 0xFE	; 254
    4a26:	3f 4f       	sbci	r19, 0xFF	; 255
    4a28:	30 93 65 0d 	sts	0x0D65, r19
    4a2c:	20 93 64 0d 	sts	0x0D64, r18
    4a30:	fb 01       	movw	r30, r22
    4a32:	44 91       	lpm	r20, Z

					switch(lastStatus&0xf0){
    4a34:	90 7f       	andi	r25, 0xF0	; 240
    4a36:	90 3b       	cpi	r25, 0xB0	; 176
    4a38:	e1 f0       	breq	.+56     	; 0x4a72 <ProcessMusic+0x1d0>
    4a3a:	90 3c       	cpi	r25, 0xC0	; 192
    4a3c:	09 f4       	brne	.+2      	; 0x4a40 <ProcessMusic+0x19e>
    4a3e:	51 c0       	rjmp	.+162    	; 0x4ae2 <ProcessMusic+0x240>
    4a40:	90 39       	cpi	r25, 0x90	; 144
    4a42:	09 f0       	breq	.+2      	; 0x4a46 <ProcessMusic+0x1a4>
    4a44:	54 c0       	rjmp	.+168    	; 0x4aee <ProcessMusic+0x24c>

						//note-on
						case 0x90:
							//c1 = note						
							c2=pgm_read_byte(songPos++)<<1; //get volume
    4a46:	e0 91 64 0d 	lds	r30, 0x0D64
    4a4a:	f0 91 65 0d 	lds	r31, 0x0D65
    4a4e:	9f 01       	movw	r18, r30
    4a50:	2f 5f       	subi	r18, 0xFF	; 255
    4a52:	3f 4f       	sbci	r19, 0xFF	; 255
    4a54:	30 93 65 0d 	sts	0x0D65, r19
    4a58:	20 93 64 0d 	sts	0x0D64, r18
    4a5c:	24 91       	lpm	r18, Z
    4a5e:	22 0f       	add	r18, r18
						
							if(tracks[channel].flags|TRACK_FLAGS_ALLOCATED){ //allocated==true
								TriggerNote(channel,tracks[channel].patchNo,c1,c2);
    4a60:	f8 9e       	mul	r15, r24
    4a62:	f0 01       	movw	r30, r0
    4a64:	11 24       	eor	r1, r1
    4a66:	e8 51       	subi	r30, 0x18	; 24
    4a68:	f3 4f       	sbci	r31, 0xF3	; 243
    4a6a:	60 89       	ldd	r22, Z+16	; 0x10
    4a6c:	0e 94 11 24 	call	0x4822	; 0x4822 <TriggerNote>
    4a70:	3e c0       	rjmp	.+124    	; 0x4aee <ProcessMusic+0x24c>
							break;

						//controllers
						case 0xb0:
							///c1 = controller #
							c2=pgm_read_byte(songPos++); //get controller value
    4a72:	e0 91 64 0d 	lds	r30, 0x0D64
    4a76:	f0 91 65 0d 	lds	r31, 0x0D65
    4a7a:	9f 01       	movw	r18, r30
    4a7c:	2f 5f       	subi	r18, 0xFF	; 255
    4a7e:	3f 4f       	sbci	r19, 0xFF	; 255
    4a80:	30 93 65 0d 	sts	0x0D65, r19
    4a84:	20 93 64 0d 	sts	0x0D64, r18
    4a88:	e4 91       	lpm	r30, Z
						
							if(c1==CONTROLER_VOL){
    4a8a:	47 30       	cpi	r20, 0x07	; 7
    4a8c:	49 f4       	brne	.+18     	; 0x4aa0 <ProcessMusic+0x1fe>
								tracks[channel].trackVol=c2<<1;
    4a8e:	f8 9e       	mul	r15, r24
    4a90:	d0 01       	movw	r26, r0
    4a92:	11 24       	eor	r1, r1
    4a94:	a8 51       	subi	r26, 0x18	; 24
    4a96:	b3 4f       	sbci	r27, 0xF3	; 243
    4a98:	ee 0f       	add	r30, r30
    4a9a:	1c 96       	adiw	r26, 0x0c	; 12
    4a9c:	ec 93       	st	X, r30
    4a9e:	27 c0       	rjmp	.+78     	; 0x4aee <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_EXPRESSION){
    4aa0:	4b 30       	cpi	r20, 0x0B	; 11
    4aa2:	49 f4       	brne	.+18     	; 0x4ab6 <ProcessMusic+0x214>
								tracks[channel].expressionVol=c2<<1;
    4aa4:	f8 9e       	mul	r15, r24
    4aa6:	d0 01       	movw	r26, r0
    4aa8:	11 24       	eor	r1, r1
    4aaa:	a8 51       	subi	r26, 0x18	; 24
    4aac:	b3 4f       	sbci	r27, 0xF3	; 243
    4aae:	ee 0f       	add	r30, r30
    4ab0:	13 96       	adiw	r26, 0x03	; 3
    4ab2:	ec 93       	st	X, r30
    4ab4:	1c c0       	rjmp	.+56     	; 0x4aee <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO){
    4ab6:	4c 35       	cpi	r20, 0x5C	; 92
    4ab8:	49 f4       	brne	.+18     	; 0x4acc <ProcessMusic+0x22a>
								tracks[channel].tremoloLevel=c2<<1;
    4aba:	f8 9e       	mul	r15, r24
    4abc:	d0 01       	movw	r26, r0
    4abe:	11 24       	eor	r1, r1
    4ac0:	a8 51       	subi	r26, 0x18	; 24
    4ac2:	b3 4f       	sbci	r27, 0xF3	; 243
    4ac4:	ee 0f       	add	r30, r30
    4ac6:	1a 96       	adiw	r26, 0x0a	; 10
    4ac8:	ec 93       	st	X, r30
    4aca:	11 c0       	rjmp	.+34     	; 0x4aee <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO_RATE){
    4acc:	44 36       	cpi	r20, 0x64	; 100
    4ace:	79 f4       	brne	.+30     	; 0x4aee <ProcessMusic+0x24c>
								tracks[channel].tremoloRate=c2<<1;
    4ad0:	f8 9e       	mul	r15, r24
    4ad2:	d0 01       	movw	r26, r0
    4ad4:	11 24       	eor	r1, r1
    4ad6:	a8 51       	subi	r26, 0x18	; 24
    4ad8:	b3 4f       	sbci	r27, 0xF3	; 243
    4ada:	ee 0f       	add	r30, r30
    4adc:	1b 96       	adiw	r26, 0x0b	; 11
    4ade:	ec 93       	st	X, r30
    4ae0:	06 c0       	rjmp	.+12     	; 0x4aee <ProcessMusic+0x24c>
							break;

						//program change
						case 0xc0:
							// c1 = patch #						
							tracks[channel].patchNo=c1;
    4ae2:	f8 9e       	mul	r15, r24
    4ae4:	f0 01       	movw	r30, r0
    4ae6:	11 24       	eor	r1, r1
    4ae8:	e8 51       	subi	r30, 0x18	; 24
    4aea:	f3 4f       	sbci	r31, 0xF3	; 243
    4aec:	40 8b       	std	Z+16, r20	; 0x10


				}//end if(c1==0xff)

				//read next delta time
				nextDeltaTime=ReadVarLen(&songPos);			
    4aee:	84 e6       	ldi	r24, 0x64	; 100
    4af0:	9d e0       	ldi	r25, 0x0D	; 13
    4af2:	0e 94 15 23 	call	0x462a	; 0x462a <ReadVarLen>
    4af6:	90 93 62 0d 	sts	0x0D62, r25
    4afa:	80 93 61 0d 	sts	0x0D61, r24
				currDeltaTime=0;
    4afe:	10 92 5c 0d 	sts	0x0D5C, r1
    4b02:	10 92 5b 0d 	sts	0x0D5B, r1
    4b06:	3b cf       	rjmp	.-394    	; 0x497e <ProcessMusic+0xdc>
					}
				#endif

			}//end while
		
			currDeltaTime++;
    4b08:	01 96       	adiw	r24, 0x01	; 1
    4b0a:	90 93 5c 0d 	sts	0x0D5C, r25
    4b0e:	80 93 5b 0d 	sts	0x0D5B, r24
    4b12:	91 ef       	ldi	r25, 0xF1	; 241
    4b14:	a9 2e       	mov	r10, r25
    4b16:	9c e0       	ldi	r25, 0x0C	; 12
    4b18:	b9 2e       	mov	r11, r25
    4b1a:	2b ef       	ldi	r18, 0xFB	; 251
    4b1c:	c2 2e       	mov	r12, r18
    4b1e:	2c e0       	ldi	r18, 0x0C	; 12
    4b20:	d2 2e       	mov	r13, r18
    4b22:	3c ef       	ldi	r19, 0xFC	; 252
    4b24:	e3 2e       	mov	r14, r19
    4b26:	3c e0       	ldi	r19, 0x0C	; 12
    4b28:	f3 2e       	mov	r15, r19
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    4b2a:	66 24       	eor	r6, r6
    4b2c:	6a 94       	dec	r6
    4b2e:	71 2c       	mov	r7, r1
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//process patch command stream
		if((track->flags & TRACK_FLAGS_PLAYING) && (track->patchCommandStreamPos!=NULL) && ((track->flags & TRACK_FLAGS_HOLD_ENV)==0)){
    4b30:	88 81       	ld	r24, Y
    4b32:	85 ff       	sbrs	r24, 5
    4b34:	42 c0       	rjmp	.+132    	; 0x4bba <ProcessMusic+0x318>
    4b36:	2d 89       	ldd	r18, Y+21	; 0x15
    4b38:	3e 89       	ldd	r19, Y+22	; 0x16
    4b3a:	23 2b       	or	r18, r19
    4b3c:	09 f4       	brne	.+2      	; 0x4b40 <ProcessMusic+0x29e>
    4b3e:	3d c0       	rjmp	.+122    	; 0x4bba <ProcessMusic+0x318>
    4b40:	86 fd       	sbrc	r24, 6
    4b42:	3b c0       	rjmp	.+118    	; 0x4bba <ProcessMusic+0x318>
    4b44:	47 01       	movw	r8, r14
    4b46:	f2 e0       	ldi	r31, 0x02	; 2
    4b48:	8f 1a       	sub	r8, r31
    4b4a:	91 08       	sbc	r9, r1

			//process all simultaneous events
			while(track->patchCurrDeltaTime==track->patchNextDeltaTime){
    4b4c:	d6 01       	movw	r26, r12
    4b4e:	9c 91       	ld	r25, X
    4b50:	f4 01       	movw	r30, r8
    4b52:	80 81       	ld	r24, Z
    4b54:	98 13       	cpse	r25, r24
    4b56:	2e c0       	rjmp	.+92     	; 0x4bb4 <ProcessMusic+0x312>

				c1=pgm_read_byte(track->patchCommandStreamPos++);
    4b58:	ed 89       	ldd	r30, Y+21	; 0x15
    4b5a:	fe 89       	ldd	r31, Y+22	; 0x16
    4b5c:	bf 01       	movw	r22, r30
    4b5e:	6f 5f       	subi	r22, 0xFF	; 255
    4b60:	7f 4f       	sbci	r23, 0xFF	; 255
    4b62:	7e 8b       	std	Y+22, r23	; 0x16
    4b64:	6d 8b       	std	Y+21, r22	; 0x15
    4b66:	84 91       	lpm	r24, Z
				if(c1==PATCH_END){
    4b68:	8f 3f       	cpi	r24, 0xFF	; 255
    4b6a:	31 f4       	brne	.+12     	; 0x4b78 <ProcessMusic+0x2d6>
					//end of stream!
					track->flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    4b6c:	88 81       	ld	r24, Y
    4b6e:	8f 77       	andi	r24, 0x7F	; 127
    4b70:	88 83       	st	Y, r24
					track->patchCommandStreamPos=NULL;
    4b72:	1e 8a       	std	Y+22, r1	; 0x16
    4b74:	1d 8a       	std	Y+21, r1	; 0x15
					break;
    4b76:	1e c0       	rjmp	.+60     	; 0x4bb4 <ProcessMusic+0x312>

				}else{
					c2=pgm_read_byte(track->patchCommandStreamPos++);
    4b78:	9f 01       	movw	r18, r30
    4b7a:	2e 5f       	subi	r18, 0xFE	; 254
    4b7c:	3f 4f       	sbci	r19, 0xFF	; 255
    4b7e:	3e 8b       	std	Y+22, r19	; 0x16
    4b80:	2d 8b       	std	Y+21, r18	; 0x15
    4b82:	fb 01       	movw	r30, r22
    4b84:	64 91       	lpm	r22, Z
					//invoke patch command function
					((PatchCommand)pgm_read_word(&patchCommands[c1]))(track,c2);
    4b86:	e8 2f       	mov	r30, r24
    4b88:	f0 e0       	ldi	r31, 0x00	; 0
    4b8a:	ee 0f       	add	r30, r30
    4b8c:	ff 1f       	adc	r31, r31
    4b8e:	e4 53       	subi	r30, 0x34	; 52
    4b90:	ff 4f       	sbci	r31, 0xFF	; 255
    4b92:	25 91       	lpm	r18, Z+
    4b94:	34 91       	lpm	r19, Z
    4b96:	ce 01       	movw	r24, r28
    4b98:	f9 01       	movw	r30, r18
    4b9a:	09 95       	icall
				}

				//read next delta time
				track->patchNextDeltaTime=pgm_read_byte(track->patchCommandStreamPos++);
    4b9c:	ed 89       	ldd	r30, Y+21	; 0x15
    4b9e:	fe 89       	ldd	r31, Y+22	; 0x16
    4ba0:	cf 01       	movw	r24, r30
    4ba2:	01 96       	adiw	r24, 0x01	; 1
    4ba4:	9e 8b       	std	Y+22, r25	; 0x16
    4ba6:	8d 8b       	std	Y+21, r24	; 0x15
    4ba8:	e4 91       	lpm	r30, Z
    4baa:	d4 01       	movw	r26, r8
    4bac:	ec 93       	st	X, r30
				track->patchCurrDeltaTime=0;
    4bae:	f6 01       	movw	r30, r12
    4bb0:	10 82       	st	Z, r1
    4bb2:	cc cf       	rjmp	.-104    	; 0x4b4c <ProcessMusic+0x2aa>
			}

			track->patchCurrDeltaTime++;
    4bb4:	9f 5f       	subi	r25, 0xFF	; 255
    4bb6:	d6 01       	movw	r26, r12
    4bb8:	9c 93       	st	X, r25
		}

		if(track->flags & TRACK_FLAGS_PLAYING){
    4bba:	98 81       	ld	r25, Y
    4bbc:	95 ff       	sbrs	r25, 5
    4bbe:	6c c0       	rjmp	.+216    	; 0x4c98 <ProcessMusic+0x3f6>

			if(track->patchPlayingTime<0xff){
    4bc0:	f7 01       	movw	r30, r14
    4bc2:	80 81       	ld	r24, Z
    4bc4:	8f 3f       	cpi	r24, 0xFF	; 255
    4bc6:	11 f0       	breq	.+4      	; 0x4bcc <ProcessMusic+0x32a>
				track->patchPlayingTime++;
    4bc8:	8f 5f       	subi	r24, 0xFF	; 255
    4bca:	80 83       	st	Z, r24
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
    4bcc:	97 fd       	sbrc	r25, 7
    4bce:	04 c0       	rjmp	.+8      	; 0x4bd8 <ProcessMusic+0x336>
    4bd0:	f7 01       	movw	r30, r14
    4bd2:	38 97       	sbiw	r30, 0x08	; 8
				//if an FX, use full track volume.
				trackVol=0xff;
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
    4bd4:	90 81       	ld	r25, Z
    4bd6:	01 c0       	rjmp	.+2      	; 0x4bda <ProcessMusic+0x338>
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
				//if an FX, use full track volume.
				trackVol=0xff;
    4bd8:	9f ef       	ldi	r25, 0xFF	; 255
    4bda:	f7 01       	movw	r30, r14
    4bdc:	37 97       	sbiw	r30, 0x07	; 7
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
			}
			if(track->noteVol!=0 && track->envelopeVol!=0 && trackVol!=0 && masterVolume!=0){
    4bde:	80 81       	ld	r24, Z
    4be0:	88 23       	and	r24, r24
    4be2:	09 f4       	brne	.+2      	; 0x4be6 <ProcessMusic+0x344>
    4be4:	4e c0       	rjmp	.+156    	; 0x4c82 <ProcessMusic+0x3e0>
    4be6:	31 96       	adiw	r30, 0x01	; 1
    4be8:	50 81       	ld	r21, Z
    4bea:	55 23       	and	r21, r21
    4bec:	09 f4       	brne	.+2      	; 0x4bf0 <ProcessMusic+0x34e>
    4bee:	49 c0       	rjmp	.+146    	; 0x4c82 <ProcessMusic+0x3e0>
    4bf0:	99 23       	and	r25, r25
    4bf2:	09 f4       	brne	.+2      	; 0x4bf6 <ProcessMusic+0x354>
    4bf4:	46 c0       	rjmp	.+140    	; 0x4c82 <ProcessMusic+0x3e0>
    4bf6:	40 91 60 0d 	lds	r20, 0x0D60
    4bfa:	44 23       	and	r20, r20
    4bfc:	09 f4       	brne	.+2      	; 0x4c00 <ProcessMusic+0x35e>
    4bfe:	41 c0       	rjmp	.+130    	; 0x4c82 <ProcessMusic+0x3e0>

				uVol=(track->noteVol*trackVol)+0x100;
    4c00:	89 9f       	mul	r24, r25
    4c02:	c0 01       	movw	r24, r0
    4c04:	11 24       	eor	r1, r1
    4c06:	93 95       	inc	r25
				uVol>>=8;
    4c08:	89 2f       	mov	r24, r25
    4c0a:	99 27       	eor	r25, r25
				
				uVol=(uVol*track->envelopeVol)+0x100;
    4c0c:	58 9f       	mul	r21, r24
    4c0e:	90 01       	movw	r18, r0
    4c10:	59 9f       	mul	r21, r25
    4c12:	30 0d       	add	r19, r0
    4c14:	11 24       	eor	r1, r1
    4c16:	c9 01       	movw	r24, r18
    4c18:	93 95       	inc	r25
				uVol>>=8;
    4c1a:	89 2f       	mov	r24, r25
    4c1c:	99 27       	eor	r25, r25
    4c1e:	3b 97       	sbiw	r30, 0x0b	; 11
				
				#if MUSIC_ENGINE == MIDI
					uVol=(uVol*track->expressionVol)+0x100;
    4c20:	50 81       	ld	r21, Z
    4c22:	58 9f       	mul	r21, r24
    4c24:	90 01       	movw	r18, r0
    4c26:	59 9f       	mul	r21, r25
    4c28:	30 0d       	add	r19, r0
    4c2a:	11 24       	eor	r1, r1
    4c2c:	33 95       	inc	r19
					uVol>>=8;
    4c2e:	23 2f       	mov	r18, r19
    4c30:	33 27       	eor	r19, r19
				#endif
				
				uVol=(uVol*masterVolume)+0x100;
    4c32:	42 9f       	mul	r20, r18
    4c34:	c0 01       	movw	r24, r0
    4c36:	43 9f       	mul	r20, r19
    4c38:	90 0d       	add	r25, r0
    4c3a:	11 24       	eor	r1, r1
    4c3c:	93 95       	inc	r25
				uVol>>=8;
    4c3e:	89 2f       	mov	r24, r25
    4c40:	99 27       	eor	r25, r25
    4c42:	37 96       	adiw	r30, 0x07	; 7

				if(track->tremoloLevel>0){					
    4c44:	20 81       	ld	r18, Z
    4c46:	22 23       	and	r18, r18
    4c48:	f1 f0       	breq	.+60     	; 0x4c86 <ProcessMusic+0x3e4>
					tmp=pgm_read_byte(&(waves[track->tremoloPos]));
    4c4a:	d5 01       	movw	r26, r10
    4c4c:	ec 91       	ld	r30, X
    4c4e:	f0 e0       	ldi	r31, 0x00	; 0
    4c50:	e0 50       	subi	r30, 0x00	; 0
    4c52:	f0 4b       	sbci	r31, 0xB0	; 176
    4c54:	e4 91       	lpm	r30, Z
					tmp-=128; //convert to unsigned
    4c56:	e0 58       	subi	r30, 0x80	; 128

					tVol=(track->tremoloLevel*tmp)+0x100;
    4c58:	2e 9f       	mul	r18, r30
    4c5a:	f0 01       	movw	r30, r0
    4c5c:	11 24       	eor	r1, r1
    4c5e:	f3 95       	inc	r31
					tVol>>=8;
    4c60:	ef 2f       	mov	r30, r31
    4c62:	ff 27       	eor	r31, r31
					
					uVol=(uVol*(0xff-tVol))+0x100;
    4c64:	a3 01       	movw	r20, r6
    4c66:	4e 1b       	sub	r20, r30
    4c68:	5f 0b       	sbc	r21, r31
    4c6a:	48 9f       	mul	r20, r24
    4c6c:	90 01       	movw	r18, r0
    4c6e:	49 9f       	mul	r20, r25
    4c70:	30 0d       	add	r19, r0
    4c72:	58 9f       	mul	r21, r24
    4c74:	30 0d       	add	r19, r0
    4c76:	11 24       	eor	r1, r1
    4c78:	c9 01       	movw	r24, r18
    4c7a:	93 95       	inc	r25
					uVol>>=8;
    4c7c:	89 2f       	mov	r24, r25
    4c7e:	99 27       	eor	r25, r25
    4c80:	02 c0       	rjmp	.+4      	; 0x4c86 <ProcessMusic+0x3e4>
				}

			
			}else{
				uVol=0;
    4c82:	80 e0       	ldi	r24, 0x00	; 0
    4c84:	90 e0       	ldi	r25, 0x00	; 0
			}	

			track->tremoloPos+=track->tremoloRate;	
    4c86:	f5 01       	movw	r30, r10
    4c88:	30 81       	ld	r19, Z
    4c8a:	f7 01       	movw	r30, r14
    4c8c:	39 97       	sbiw	r30, 0x09	; 9
    4c8e:	20 81       	ld	r18, Z
    4c90:	23 0f       	add	r18, r19
    4c92:	d5 01       	movw	r26, r10
    4c94:	2c 93       	st	X, r18
    4c96:	02 c0       	rjmp	.+4      	; 0x4c9c <ProcessMusic+0x3fa>

		}else{
			uVol=0;
    4c98:	80 e0       	ldi	r24, 0x00	; 0
    4c9a:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
    4c9c:	f8 01       	movw	r30, r16
    4c9e:	80 83       	st	Z, r24
    4ca0:	67 96       	adiw	r28, 0x17	; 23
    4ca2:	0a 5f       	subi	r16, 0xFA	; 250
    4ca4:	1f 4f       	sbci	r17, 0xFF	; 255
    4ca6:	f7 e1       	ldi	r31, 0x17	; 23
    4ca8:	af 0e       	add	r10, r31
    4caa:	b1 1c       	adc	r11, r1
    4cac:	87 e1       	ldi	r24, 0x17	; 23
    4cae:	c8 0e       	add	r12, r24
    4cb0:	d1 1c       	adc	r13, r1
    4cb2:	97 e1       	ldi	r25, 0x17	; 23
    4cb4:	e9 0e       	add	r14, r25
    4cb6:	f1 1c       	adc	r15, r1


	//
	// Process patches command streams & final volume
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    4cb8:	ad e0       	ldi	r26, 0x0D	; 13
    4cba:	cb 35       	cpi	r28, 0x5B	; 91
    4cbc:	da 07       	cpc	r29, r26
    4cbe:	09 f0       	breq	.+2      	; 0x4cc2 <ProcessMusic+0x420>
    4cc0:	37 cf       	rjmp	.-402    	; 0x4b30 <ProcessMusic+0x28e>
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
	}
	
}
    4cc2:	df 91       	pop	r29
    4cc4:	cf 91       	pop	r28
    4cc6:	1f 91       	pop	r17
    4cc8:	0f 91       	pop	r16
    4cca:	ff 90       	pop	r15
    4ccc:	ef 90       	pop	r14
    4cce:	df 90       	pop	r13
    4cd0:	cf 90       	pop	r12
    4cd2:	bf 90       	pop	r11
    4cd4:	af 90       	pop	r10
    4cd6:	9f 90       	pop	r9
    4cd8:	8f 90       	pop	r8
    4cda:	7f 90       	pop	r7
    4cdc:	6f 90       	pop	r6
    4cde:	08 95       	ret

00004ce0 <SetMasterVolume>:
}



void SetMasterVolume(unsigned char vol){
	masterVolume=vol;
    4ce0:	80 93 60 0d 	sts	0x0D60, r24
    4ce4:	08 95       	ret

00004ce6 <SetMixerNote>:
; r22: -MIDI note, 69=A5(440) for waves channels (0,1,2)
;      -Noise params for channel 3
;***********************
.section .text.SetMixerNote
SetMixerNote:
	clr r25
    4ce6:	99 27       	eor	r25, r25
	clr r23
    4ce8:	77 27       	eor	r23, r23
	#if SOUND_MIXER == MIXER_TYPE_VSYNC
		cpi r24,3
		brlo set_note_waves
		ret		
	#else
		cpi r24,3
    4cea:	83 30       	cpi	r24, 0x03	; 3
		brne set_note_waves		
    4cec:	09 f4       	brne	.+2      	; 0x4cf0 <set_note_waves>
		ret
    4cee:	08 95       	ret

00004cf0 <set_note_waves>:
	#endif
#endif

set_note_waves:
	;get step for note
	ldi ZL,lo8(steptable)
    4cf0:	e8 e0       	ldi	r30, 0x08	; 8
	ldi ZH,hi8(steptable)
    4cf2:	fe e4       	ldi	r31, 0x4E	; 78
	lsl r22
    4cf4:	66 0f       	add	r22, r22
	rol r23
    4cf6:	77 1f       	adc	r23, r23
	add ZL,r22
    4cf8:	e6 0f       	add	r30, r22
	adc ZH,r23	
    4cfa:	f7 1f       	adc	r31, r23

	lpm r26,Z+
    4cfc:	a5 91       	lpm	r26, Z+
	lpm r27,Z
    4cfe:	b4 91       	lpm	r27, Z

	ldi ZL,lo8(mixerStruct)
    4d00:	e8 eb       	ldi	r30, 0xB8	; 184
	ldi ZH,hi8(mixerStruct)
    4d02:	fc e0       	ldi	r31, 0x0C	; 12
	ldi r18,CHANNEL_STRUCT_SIZE
    4d04:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24
    4d06:	28 9f       	mul	r18, r24
	add ZL,r0
    4d08:	e0 0d       	add	r30, r0
	adc ZH,r1
    4d0a:	f1 1d       	adc	r31, r1
	
	std Z+step_lo,r26
    4d0c:	a1 83       	std	Z+1, r26	; 0x01
	std Z+step_hi,r27
    4d0e:	b2 83       	std	Z+2, r27	; 0x02
	
	clr r1
    4d10:	11 24       	eor	r1, r1
	

	ret
    4d12:	08 95       	ret

00004d14 <SetMixerWave>:
;         Noise channel: 0xfe=7 bit lfsr, 0xff=15 bit lfsr
;                 
;***********************
.section .text.SetMixerWave
SetMixerWave:
	clr r25
    4d14:	99 27       	eor	r25, r25
	clr r23
    4d16:	77 27       	eor	r23, r23

	ldi ZL,lo8(mixerStruct)
    4d18:	e8 eb       	ldi	r30, 0xB8	; 184
	ldi ZH,hi8(mixerStruct)
    4d1a:	fc e0       	ldi	r31, 0x0C	; 12
	ldi r18,CHANNEL_STRUCT_SIZE
    4d1c:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24	
    4d1e:	28 9f       	mul	r18, r24
	add ZL,r0
    4d20:	e0 0d       	add	r30, r0
	adc ZH,r1
    4d22:	f1 1d       	adc	r31, r1

#if MIXER_CHAN4_TYPE == 0
	cpi r22,0xfe	;7bit lfsr
    4d24:	6e 3f       	cpi	r22, 0xFE	; 254
	brne smw1
    4d26:	31 f4       	brne	.+12     	; 0x4d34 <smw1>
	lds r22,tr4_params
    4d28:	60 91 cb 0c 	lds	r22, 0x0CCB
	andi r22,0xfe;
    4d2c:	6e 7f       	andi	r22, 0xFE	; 254
	sts tr4_params,r22
    4d2e:	60 93 cb 0c 	sts	0x0CCB, r22
	rjmp esmw	
    4d32:	0b c0       	rjmp	.+22     	; 0x4d4a <esmw>

00004d34 <smw1>:
smw1:
	cpi r22,0xff	;15bit lfsr
    4d34:	6f 3f       	cpi	r22, 0xFF	; 255
	brne smw2
    4d36:	31 f4       	brne	.+12     	; 0x4d44 <smw2>
	lds r22,tr4_params
    4d38:	60 91 cb 0c 	lds	r22, 0x0CCB
	ori r22,0xfe;
    4d3c:	6e 6f       	ori	r22, 0xFE	; 254
	sts tr4_params,r22	
    4d3e:	60 93 cb 0c 	sts	0x0CCB, r22
	rjmp esmw
    4d42:	03 c0       	rjmp	.+6      	; 0x4d4a <esmw>

00004d44 <smw2>:
smw2:
#endif

	ldi r23,hi8(waves)
    4d44:	70 e5       	ldi	r23, 0x50	; 80
	add r23,r22
    4d46:	76 0f       	add	r23, r22
	std Z+samplepos_hi,r23 ;store path No
    4d48:	75 83       	std	Z+5, r23	; 0x05

00004d4a <esmw>:

esmw:
	clr r1	
    4d4a:	11 24       	eor	r1, r1
	ret
    4d4c:	08 95       	ret
	...

00004e00 <DisableSoundEngine>:
; no CPU cycles are consumed.
; C-callable
;*****************************
.section .text.DisableSoundEngine
DisableSoundEngine:	
	ldi r24,0
    4e00:	80 e0       	ldi	r24, 0x00	; 0
	sts sound_enabled,r24
    4e02:	80 93 b7 0c 	sts	0x0CB7, r24
	ret
    4e06:	08 95       	ret

00004e08 <steptable>:
    4e08:	22 00       	.word	0x0022	; ????
    4e0a:	24 00       	.word	0x0024	; ????
    4e0c:	26 00       	.word	0x0026	; ????
    4e0e:	28 00       	.word	0x0028	; ????
    4e10:	2b 00       	.word	0x002b	; ????
    4e12:	2d 00       	.word	0x002d	; ????
    4e14:	30 00       	.word	0x0030	; ????
    4e16:	33 00       	.word	0x0033	; ????
    4e18:	36 00       	.word	0x0036	; ????
    4e1a:	39 00       	.word	0x0039	; ????
    4e1c:	3d 00       	.word	0x003d	; ????
    4e1e:	40 00       	.word	0x0040	; ????
    4e20:	44 00       	.word	0x0044	; ????
    4e22:	48 00       	.word	0x0048	; ????
    4e24:	4c 00       	.word	0x004c	; ????
    4e26:	51 00       	.word	0x0051	; ????
    4e28:	56 00       	.word	0x0056	; ????
    4e2a:	5b 00       	.word	0x005b	; ????
    4e2c:	60 00       	.word	0x0060	; ????
    4e2e:	66 00       	.word	0x0066	; ????
    4e30:	6c 00       	.word	0x006c	; ????
    4e32:	73 00       	.word	0x0073	; ????
    4e34:	79 00       	.word	0x0079	; ????
    4e36:	81 00       	.word	0x0081	; ????
    4e38:	88 00       	.word	0x0088	; ????
    4e3a:	90 00       	.word	0x0090	; ????
    4e3c:	99 00       	.word	0x0099	; ????
    4e3e:	a2 00       	.word	0x00a2	; ????
    4e40:	ac 00       	.word	0x00ac	; ????
    4e42:	b6 00       	.word	0x00b6	; ????
    4e44:	c1 00       	.word	0x00c1	; ????
    4e46:	cc 00       	.word	0x00cc	; ????
    4e48:	d8 00       	.word	0x00d8	; ????
    4e4a:	e5 00       	.word	0x00e5	; ????
    4e4c:	f3 00       	.word	0x00f3	; ????
    4e4e:	01 01       	movw	r0, r2
    4e50:	10 01       	movw	r2, r0
    4e52:	21 01       	movw	r4, r2
    4e54:	32 01       	movw	r6, r4
    4e56:	44 01       	movw	r8, r8
    4e58:	57 01       	movw	r10, r14
    4e5a:	6c 01       	movw	r12, r24
    4e5c:	81 01       	movw	r16, r2
    4e5e:	98 01       	movw	r18, r16
    4e60:	b0 01       	movw	r22, r0
    4e62:	ca 01       	movw	r24, r20
    4e64:	e5 01       	movw	r28, r10
    4e66:	02 02       	muls	r16, r18
    4e68:	21 02       	muls	r18, r17
    4e6a:	41 02       	muls	r20, r17
    4e6c:	64 02       	muls	r22, r20
    4e6e:	88 02       	muls	r24, r24
    4e70:	ae 02       	muls	r26, r30
    4e72:	d7 02       	muls	r29, r23
    4e74:	03 03       	mulsu	r16, r19
    4e76:	30 03       	mulsu	r19, r16
    4e78:	61 03       	mulsu	r22, r17
    4e7a:	94 03       	fmuls	r17, r20
    4e7c:	cb 03       	fmulsu	r20, r19
    4e7e:	05 04       	cpc	r0, r5
    4e80:	42 04       	cpc	r4, r2
    4e82:	83 04       	cpc	r8, r3
    4e84:	c7 04       	cpc	r12, r7
    4e86:	10 05       	cpc	r17, r0
    4e88:	5d 05       	cpc	r21, r13
    4e8a:	af 05       	cpc	r26, r15
    4e8c:	05 06       	cpc	r0, r21
    4e8e:	61 06       	cpc	r6, r17
    4e90:	c2 06       	cpc	r12, r18
    4e92:	29 07       	cpc	r18, r25
    4e94:	96 07       	cpc	r25, r22
    4e96:	09 08       	sbc	r0, r9
    4e98:	83 08       	sbc	r8, r3
    4e9a:	05 09       	sbc	r16, r5
    4e9c:	8e 09       	sbc	r24, r14
    4e9e:	20 0a       	sbc	r2, r16
    4ea0:	ba 0a       	sbc	r11, r26
    4ea2:	5d 0b       	sbc	r21, r29
    4ea4:	0a 0c       	add	r0, r10
    4ea6:	c1 0c       	add	r12, r1
    4ea8:	84 0d       	add	r24, r4
    4eaa:	51 0e       	add	r5, r17
    4eac:	2b 0f       	add	r18, r27
    4eae:	12 10       	cpse	r1, r2
    4eb0:	07 11       	cpse	r16, r7
    4eb2:	0a 12       	cpse	r0, r26
    4eb4:	1d 13       	cpse	r17, r29
    4eb6:	40 14       	cp	r4, r0
    4eb8:	74 15       	cp	r23, r4
    4eba:	ba 16       	cp	r11, r26
    4ebc:	14 18       	sub	r1, r4
    4ebe:	83 19       	sub	r24, r3
    4ec0:	07 1b       	sub	r16, r23
    4ec2:	a3 1c       	adc	r10, r3
    4ec4:	57 1e       	adc	r5, r23
    4ec6:	24 20       	and	r2, r4
    4ec8:	0e 22       	and	r0, r30
    4eca:	14 24       	eor	r1, r4
    4ecc:	39 26       	eor	r3, r25
    4ece:	7f 28       	or	r7, r15
    4ed0:	e8 2a       	or	r14, r24
    4ed2:	75 2d       	mov	r23, r5
    4ed4:	29 30       	cpi	r18, 0x09	; 9
    4ed6:	06 33       	cpi	r16, 0x36	; 54
    4ed8:	0f 36       	cpi	r16, 0x6F	; 111
    4eda:	45 39       	cpi	r20, 0x95	; 149
    4edc:	ad 3c       	cpi	r26, 0xCD	; 205
    4ede:	49 40       	sbci	r20, 0x09	; 9
    4ee0:	1b 44       	sbci	r17, 0x4B	; 75
    4ee2:	28 48       	sbci	r18, 0x88	; 136
    4ee4:	73 4c       	sbci	r23, 0xC3	; 195
    4ee6:	fe 50       	subi	r31, 0x0E	; 14
    4ee8:	cf 55       	subi	r28, 0x5F	; 95
    4eea:	ea 5a       	subi	r30, 0xAA	; 170
    4eec:	51 60       	ori	r21, 0x01	; 1
    4eee:	0c 66       	ori	r16, 0x6C	; 108
    4ef0:	1d 6c       	ori	r17, 0xCD	; 205
    4ef2:	8b 72       	andi	r24, 0x2B	; 43
    4ef4:	5a 79       	andi	r21, 0x9A	; 154
    4ef6:	92 80       	ldd	r9, Z+2	; 0x02
    4ef8:	37 88       	ldd	r3, Z+23	; 0x17
    4efa:	50 90 e5 98 	lds	r5, 0x98E5
    4efe:	fd a1       	ldd	r31, Y+37	; 0x25
    4f00:	9f ab       	std	Y+55, r25	; 0x37
    4f02:	d3 b5       	in	r29, 0x23	; 35
    4f04:	a3 c0       	rjmp	.+326    	; 0x504c <waves+0x4c>
	...

00005000 <waves>:
    5000:	00 03       	mulsu	r16, r16
    5002:	06 09       	sbc	r16, r6
    5004:	0c 10       	cpse	r0, r12
    5006:	13 16       	cp	r1, r19
    5008:	19 1c       	adc	r1, r9
    500a:	1f 22       	and	r1, r31
    500c:	25 28       	or	r2, r5
    500e:	2b 2e       	mov	r2, r27
    5010:	31 33       	cpi	r19, 0x31	; 49
    5012:	36 39       	cpi	r19, 0x96	; 150
    5014:	3c 3f       	cpi	r19, 0xFC	; 252
    5016:	41 44       	sbci	r20, 0x41	; 65
    5018:	47 49       	sbci	r20, 0x97	; 151
    501a:	4c 4e       	sbci	r20, 0xEC	; 236
    501c:	51 53       	subi	r21, 0x31	; 49
    501e:	55 58       	subi	r21, 0x85	; 133
    5020:	5a 5c       	subi	r21, 0xCA	; 202
    5022:	5e 60       	ori	r21, 0x0E	; 14
    5024:	62 64       	ori	r22, 0x42	; 66
    5026:	66 68       	ori	r22, 0x86	; 134
    5028:	6a 6b       	ori	r22, 0xBA	; 186
    502a:	6d 6f       	ori	r22, 0xFD	; 253
    502c:	70 71       	andi	r23, 0x10	; 16
    502e:	73 74       	andi	r23, 0x43	; 67
    5030:	75 76       	andi	r23, 0x65	; 101
    5032:	78 79       	andi	r23, 0x98	; 152
    5034:	7a 7a       	andi	r23, 0xAA	; 170
    5036:	7b 7c       	andi	r23, 0xCB	; 203
    5038:	7d 7d       	andi	r23, 0xDD	; 221
    503a:	7e 7e       	andi	r23, 0xEE	; 238
    503c:	7e 7f       	andi	r23, 0xFE	; 254
    503e:	7f 7f       	andi	r23, 0xFF	; 255
    5040:	7f 7f       	andi	r23, 0xFF	; 255
    5042:	7f 7f       	andi	r23, 0xFF	; 255
    5044:	7e 7e       	andi	r23, 0xEE	; 238
    5046:	7e 7d       	andi	r23, 0xDE	; 222
    5048:	7d 7c       	andi	r23, 0xCD	; 205
    504a:	7b 7a       	andi	r23, 0xAB	; 171
    504c:	7a 79       	andi	r23, 0x9A	; 154
    504e:	78 76       	andi	r23, 0x68	; 104
    5050:	75 74       	andi	r23, 0x45	; 69
    5052:	73 71       	andi	r23, 0x13	; 19
    5054:	70 6f       	ori	r23, 0xF0	; 240
    5056:	6d 6b       	ori	r22, 0xBD	; 189
    5058:	6a 68       	ori	r22, 0x8A	; 138
    505a:	66 64       	ori	r22, 0x46	; 70
    505c:	62 60       	ori	r22, 0x02	; 2
    505e:	5e 5c       	subi	r21, 0xCE	; 206
    5060:	5a 58       	subi	r21, 0x8A	; 138
    5062:	55 53       	subi	r21, 0x35	; 53
    5064:	51 4e       	sbci	r21, 0xE1	; 225
    5066:	4c 49       	sbci	r20, 0x9C	; 156
    5068:	47 44       	sbci	r20, 0x47	; 71
    506a:	41 3f       	cpi	r20, 0xF1	; 241
    506c:	3c 39       	cpi	r19, 0x9C	; 156
    506e:	36 33       	cpi	r19, 0x36	; 54
    5070:	31 2e       	mov	r3, r17
    5072:	2b 28       	or	r2, r11
    5074:	25 22       	and	r2, r21
    5076:	1f 1c       	adc	r1, r15
    5078:	19 16       	cp	r1, r25
    507a:	13 10       	cpse	r1, r3
    507c:	0c 09       	sbc	r16, r12
    507e:	06 03       	mulsu	r16, r22
    5080:	00 fd       	sbrc	r16, 0
    5082:	fa f7       	brpl	.-2      	; 0x5082 <waves+0x82>
    5084:	f4 f0       	brlt	.+60     	; 0x50c2 <waves+0xc2>
    5086:	ed ea       	ldi	r30, 0xAD	; 173
    5088:	e7 e4       	ldi	r30, 0x47	; 71
    508a:	e1 de       	rcall	.-574    	; 0x4e4e <steptable+0x46>
    508c:	db d8       	rcall	.-3658   	; 0x4244 <fill_vram_loop+0x2>
    508e:	d5 d2       	rcall	.+1450   	; 0x563a <waves+0x63a>
    5090:	cf cd       	rjmp	.-1122   	; 0x4c30 <ProcessMusic+0x38e>
    5092:	ca c7       	rjmp	.+3988   	; 0x6028 <LBMapSprite+0x66>
    5094:	c4 c1       	rjmp	.+904    	; 0x541e <waves+0x41e>
    5096:	bf bc       	out	0x2f, r11	; 47
    5098:	b9 b7       	in	r27, 0x39	; 57
    509a:	b4 b2       	in	r11, 0x14	; 20
    509c:	af ad       	ldd	r26, Y+63	; 0x3f
    509e:	ab a8       	ldd	r10, Y+51	; 0x33
    50a0:	a6 a4       	ldd	r10, Z+46	; 0x2e
    50a2:	a2 a0       	ldd	r10, Z+34	; 0x22
    50a4:	9e 9c       	mul	r9, r14
    50a6:	9a 98       	cbi	0x13, 2	; 19
    50a8:	96 95       	lsr	r25
    50aa:	93 91       	.word	0x9193	; ????
    50ac:	90 8f       	std	Z+24, r25	; 0x18
    50ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    50b0:	8b 8a       	std	Y+19, r8	; 0x13
    50b2:	88 87       	std	Y+8, r24	; 0x08
    50b4:	86 86       	std	Z+14, r8	; 0x0e
    50b6:	85 84       	ldd	r8, Z+13	; 0x0d
    50b8:	83 83       	std	Z+3, r24	; 0x03
    50ba:	82 82       	std	Z+2, r8	; 0x02
    50bc:	82 81       	ldd	r24, Z+2	; 0x02
    50be:	81 81       	ldd	r24, Z+1	; 0x01
    50c0:	81 81       	ldd	r24, Z+1	; 0x01
    50c2:	81 81       	ldd	r24, Z+1	; 0x01
    50c4:	82 82       	std	Z+2, r8	; 0x02
    50c6:	82 83       	std	Z+2, r24	; 0x02
    50c8:	83 84       	ldd	r8, Z+11	; 0x0b
    50ca:	85 86       	std	Z+13, r8	; 0x0d
    50cc:	86 87       	std	Z+14, r24	; 0x0e
    50ce:	88 8a       	std	Y+16, r8	; 0x10
    50d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    50d2:	8d 8f       	std	Y+29, r24	; 0x1d
    50d4:	90 91 93 95 	lds	r25, 0x9593
    50d8:	96 98       	cbi	0x12, 6	; 18
    50da:	9a 9c       	mul	r9, r10
    50dc:	9e a0       	ldd	r9, Y+38	; 0x26
    50de:	a2 a4       	ldd	r10, Z+42	; 0x2a
    50e0:	a6 a8       	ldd	r10, Z+54	; 0x36
    50e2:	ab ad       	ldd	r26, Y+59	; 0x3b
    50e4:	af b2       	in	r10, 0x1f	; 31
    50e6:	b4 b7       	in	r27, 0x34	; 52
    50e8:	b9 bc       	out	0x29, r11	; 41
    50ea:	bf c1       	rjmp	.+894    	; 0x546a <waves+0x46a>
    50ec:	c4 c7       	rjmp	.+3976   	; 0x6076 <LBMoveSprite+0x10>
    50ee:	ca cd       	rjmp	.-1132   	; 0x4c84 <ProcessMusic+0x3e2>
    50f0:	cf d2       	rcall	.+1438   	; 0x5690 <waves+0x690>
    50f2:	d5 d8       	rcall	.-3670   	; 0x429e <ReadJoypad+0x4>
    50f4:	db de       	rcall	.-586    	; 0x4eac <steptable+0xa4>
    50f6:	e1 e4       	ldi	r30, 0x41	; 65
    50f8:	e7 ea       	ldi	r30, 0xA7	; 167
    50fa:	ed f0       	brhs	.+58     	; 0x5136 <waves+0x136>
    50fc:	f4 f7       	brge	.-4      	; 0x50fa <waves+0xfa>
    50fe:	fa fd       	.word	0xfdfa	; ????
    5100:	80 81       	ld	r24, Z
    5102:	82 83       	std	Z+2, r24	; 0x02
    5104:	84 85       	ldd	r24, Z+12	; 0x0c
    5106:	86 87       	std	Z+14, r24	; 0x0e
    5108:	88 89       	ldd	r24, Y+16	; 0x10
    510a:	8a 8b       	std	Y+18, r24	; 0x12
    510c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    510e:	8e 8f       	std	Y+30, r24	; 0x1e
    5110:	90 91 92 93 	lds	r25, 0x9392
    5114:	94 95       	.word	0x9594	; ????
    5116:	96 97       	sbiw	r26, 0x26	; 38
    5118:	98 99       	sbic	0x13, 0	; 19
    511a:	9a 9b       	sbis	0x13, 2	; 19
    511c:	9c 9d       	mul	r25, r12
    511e:	9e 9f       	mul	r25, r30
    5120:	a0 a1       	ldd	r26, Z+32	; 0x20
    5122:	a2 a3       	std	Z+34, r26	; 0x22
    5124:	a4 a5       	ldd	r26, Z+44	; 0x2c
    5126:	a6 a7       	std	Z+46, r26	; 0x2e
    5128:	a8 a9       	ldd	r26, Y+48	; 0x30
    512a:	aa ab       	std	Y+50, r26	; 0x32
    512c:	ac ad       	ldd	r26, Y+60	; 0x3c
    512e:	ae af       	std	Y+62, r26	; 0x3e
    5130:	b0 b1       	in	r27, 0x00	; 0
    5132:	b2 b3       	in	r27, 0x12	; 18
    5134:	b4 b5       	in	r27, 0x24	; 36
    5136:	b6 b7       	in	r27, 0x36	; 54
    5138:	b8 b9       	out	0x08, r27	; 8
    513a:	ba bb       	out	0x1a, r27	; 26
    513c:	bc bd       	out	0x2c, r27	; 44
    513e:	be bf       	out	0x3e, r27	; 62
    5140:	c0 c1       	rjmp	.+896    	; 0x54c2 <waves+0x4c2>
    5142:	c2 c3       	rjmp	.+1924   	; 0x58c8 <waves+0x8c8>
    5144:	c4 c5       	rjmp	.+2952   	; 0x5cce <DrawMap+0x16>
    5146:	c6 c7       	rjmp	.+3980   	; 0x60d4 <LBMoveSprite+0x6e>
    5148:	c8 c9       	rjmp	.-3184   	; 0x44da <PatchCommand11+0x10>
    514a:	ca cb       	rjmp	.-2156   	; 0x48e0 <ProcessMusic+0x3e>
    514c:	cc cd       	rjmp	.-1128   	; 0x4ce6 <SetMixerNote>
    514e:	ce cf       	rjmp	.-100    	; 0x50ec <waves+0xec>
    5150:	d0 d1       	rcall	.+928    	; 0x54f2 <waves+0x4f2>
    5152:	d2 d3       	rcall	.+1956   	; 0x58f8 <waves+0x8f8>
    5154:	d4 d5       	rcall	.+2984   	; 0x5cfe <DrawMap+0x46>
    5156:	d6 d7       	rcall	.+4012   	; 0x6104 <LBRotateSprites+0x22>
    5158:	d8 d9       	rcall	.-3152   	; 0x450a <PatchCommand11+0x40>
    515a:	da db       	rcall	.-2124   	; 0x4910 <ProcessMusic+0x6e>
    515c:	dc dd       	rcall	.-1096   	; 0x4d16 <SetMixerWave+0x2>
    515e:	de df       	rcall	.-68     	; 0x511c <waves+0x11c>
    5160:	e0 e1       	ldi	r30, 0x10	; 16
    5162:	e2 e3       	ldi	r30, 0x32	; 50
    5164:	e4 e5       	ldi	r30, 0x54	; 84
    5166:	e6 e7       	ldi	r30, 0x76	; 118
    5168:	e8 e9       	ldi	r30, 0x98	; 152
    516a:	ea eb       	ldi	r30, 0xBA	; 186
    516c:	ec ed       	ldi	r30, 0xDC	; 220
    516e:	ee ef       	ldi	r30, 0xFE	; 254
    5170:	f0 f1       	brcs	.+124    	; 0x51ee <waves+0x1ee>
    5172:	f2 f3       	brmi	.-4      	; 0x5170 <waves+0x170>
    5174:	f4 f5       	brge	.+124    	; 0x51f2 <waves+0x1f2>
    5176:	f6 f7       	brtc	.-4      	; 0x5174 <waves+0x174>
    5178:	f8 f9       	.word	0xf9f8	; ????
    517a:	fa fb       	.word	0xfbfa	; ????
    517c:	fc fd       	.word	0xfdfc	; ????
    517e:	fe ff       	.word	0xfffe	; ????
    5180:	00 01       	movw	r0, r0
    5182:	02 03       	mulsu	r16, r18
    5184:	04 05       	cpc	r16, r4
    5186:	06 07       	cpc	r16, r22
    5188:	08 09       	sbc	r16, r8
    518a:	0a 0b       	sbc	r16, r26
    518c:	0c 0d       	add	r16, r12
    518e:	0e 0f       	add	r16, r30
    5190:	10 11       	cpse	r17, r0
    5192:	12 13       	cpse	r17, r18
    5194:	14 15       	cp	r17, r4
    5196:	16 17       	cp	r17, r22
    5198:	18 19       	sub	r17, r8
    519a:	1a 1b       	sub	r17, r26
    519c:	1c 1d       	adc	r17, r12
    519e:	1e 1f       	adc	r17, r30
    51a0:	20 21       	and	r18, r0
    51a2:	22 23       	and	r18, r18
    51a4:	24 25       	eor	r18, r4
    51a6:	26 27       	eor	r18, r22
    51a8:	28 29       	or	r18, r8
    51aa:	2a 2b       	or	r18, r26
    51ac:	2c 2d       	mov	r18, r12
    51ae:	2e 2f       	mov	r18, r30
    51b0:	30 31       	cpi	r19, 0x10	; 16
    51b2:	32 33       	cpi	r19, 0x32	; 50
    51b4:	34 35       	cpi	r19, 0x54	; 84
    51b6:	36 37       	cpi	r19, 0x76	; 118
    51b8:	38 39       	cpi	r19, 0x98	; 152
    51ba:	3a 3b       	cpi	r19, 0xBA	; 186
    51bc:	3c 3d       	cpi	r19, 0xDC	; 220
    51be:	3e 3f       	cpi	r19, 0xFE	; 254
    51c0:	40 41       	sbci	r20, 0x10	; 16
    51c2:	42 43       	sbci	r20, 0x32	; 50
    51c4:	44 45       	sbci	r20, 0x54	; 84
    51c6:	46 47       	sbci	r20, 0x76	; 118
    51c8:	48 49       	sbci	r20, 0x98	; 152
    51ca:	4a 4b       	sbci	r20, 0xBA	; 186
    51cc:	4c 4d       	sbci	r20, 0xDC	; 220
    51ce:	4e 4f       	sbci	r20, 0xFE	; 254
    51d0:	50 51       	subi	r21, 0x10	; 16
    51d2:	52 53       	subi	r21, 0x32	; 50
    51d4:	54 55       	subi	r21, 0x54	; 84
    51d6:	56 57       	subi	r21, 0x76	; 118
    51d8:	58 59       	subi	r21, 0x98	; 152
    51da:	5a 5b       	subi	r21, 0xBA	; 186
    51dc:	5c 5d       	subi	r21, 0xDC	; 220
    51de:	5e 5f       	subi	r21, 0xFE	; 254
    51e0:	60 61       	ori	r22, 0x10	; 16
    51e2:	62 63       	ori	r22, 0x32	; 50
    51e4:	64 65       	ori	r22, 0x54	; 84
    51e6:	66 67       	ori	r22, 0x76	; 118
    51e8:	68 69       	ori	r22, 0x98	; 152
    51ea:	6a 6b       	ori	r22, 0xBA	; 186
    51ec:	6c 6d       	ori	r22, 0xDC	; 220
    51ee:	6e 6f       	ori	r22, 0xFE	; 254
    51f0:	70 71       	andi	r23, 0x10	; 16
    51f2:	72 73       	andi	r23, 0x32	; 50
    51f4:	74 75       	andi	r23, 0x54	; 84
    51f6:	76 77       	andi	r23, 0x76	; 118
    51f8:	78 79       	andi	r23, 0x98	; 152
    51fa:	7a 7b       	andi	r23, 0xBA	; 186
    51fc:	7c 7d       	andi	r23, 0xDC	; 220
    51fe:	7e 7f       	andi	r23, 0xFE	; 254
    5200:	00 02       	muls	r16, r16
    5202:	04 06       	cpc	r0, r20
    5204:	08 0a       	sbc	r0, r24
    5206:	0c 0e       	add	r0, r28
    5208:	10 12       	cpse	r1, r16
    520a:	14 16       	cp	r1, r20
    520c:	18 1a       	sub	r1, r24
    520e:	1c 1e       	adc	r1, r28
    5210:	20 22       	and	r2, r16
    5212:	24 26       	eor	r2, r20
    5214:	28 2a       	or	r2, r24
    5216:	2c 2e       	mov	r2, r28
    5218:	30 32       	cpi	r19, 0x20	; 32
    521a:	34 36       	cpi	r19, 0x64	; 100
    521c:	38 3a       	cpi	r19, 0xA8	; 168
    521e:	3c 3e       	cpi	r19, 0xEC	; 236
    5220:	40 42       	sbci	r20, 0x20	; 32
    5222:	44 46       	sbci	r20, 0x64	; 100
    5224:	48 4a       	sbci	r20, 0xA8	; 168
    5226:	4c 4e       	sbci	r20, 0xEC	; 236
    5228:	50 52       	subi	r21, 0x20	; 32
    522a:	54 56       	subi	r21, 0x64	; 100
    522c:	58 5a       	subi	r21, 0xA8	; 168
    522e:	5c 5e       	subi	r21, 0xEC	; 236
    5230:	60 62       	ori	r22, 0x20	; 32
    5232:	64 66       	ori	r22, 0x64	; 100
    5234:	68 6a       	ori	r22, 0xA8	; 168
    5236:	6c 6e       	ori	r22, 0xEC	; 236
    5238:	70 72       	andi	r23, 0x20	; 32
    523a:	74 76       	andi	r23, 0x64	; 100
    523c:	78 7a       	andi	r23, 0xA8	; 168
    523e:	7c 7e       	andi	r23, 0xEC	; 236
    5240:	7f 7d       	andi	r23, 0xDF	; 223
    5242:	7b 79       	andi	r23, 0x9B	; 155
    5244:	77 75       	andi	r23, 0x57	; 87
    5246:	73 71       	andi	r23, 0x13	; 19
    5248:	6f 6d       	ori	r22, 0xDF	; 223
    524a:	6b 69       	ori	r22, 0x9B	; 155
    524c:	67 65       	ori	r22, 0x57	; 87
    524e:	63 61       	ori	r22, 0x13	; 19
    5250:	5f 5d       	subi	r21, 0xDF	; 223
    5252:	5b 59       	subi	r21, 0x9B	; 155
    5254:	57 55       	subi	r21, 0x57	; 87
    5256:	53 51       	subi	r21, 0x13	; 19
    5258:	4f 4d       	sbci	r20, 0xDF	; 223
    525a:	4b 49       	sbci	r20, 0x9B	; 155
    525c:	47 45       	sbci	r20, 0x57	; 87
    525e:	43 41       	sbci	r20, 0x13	; 19
    5260:	3f 3d       	cpi	r19, 0xDF	; 223
    5262:	3b 39       	cpi	r19, 0x9B	; 155
    5264:	37 35       	cpi	r19, 0x57	; 87
    5266:	33 31       	cpi	r19, 0x13	; 19
    5268:	2f 2d       	mov	r18, r15
    526a:	2b 29       	or	r18, r11
    526c:	27 25       	eor	r18, r7
    526e:	23 21       	and	r18, r3
    5270:	1f 1d       	adc	r17, r15
    5272:	1b 19       	sub	r17, r11
    5274:	17 15       	cp	r17, r7
    5276:	13 11       	cpse	r17, r3
    5278:	0f 0d       	add	r16, r15
    527a:	0b 09       	sbc	r16, r11
    527c:	07 05       	cpc	r16, r7
    527e:	03 01       	movw	r0, r6
    5280:	ff fd       	.word	0xfdff	; ????
    5282:	fb f9       	.word	0xf9fb	; ????
    5284:	f7 f5       	brid	.+124    	; 0x5302 <waves+0x302>
    5286:	f3 f1       	brvs	.+124    	; 0x5304 <waves+0x304>
    5288:	ef ed       	ldi	r30, 0xDF	; 223
    528a:	eb e9       	ldi	r30, 0x9B	; 155
    528c:	e7 e5       	ldi	r30, 0x57	; 87
    528e:	e3 e1       	ldi	r30, 0x13	; 19
    5290:	df dd       	rcall	.-1090   	; 0x4e50 <steptable+0x48>
    5292:	db d9       	rcall	.-3146   	; 0x464a <ReadVarLen+0x20>
    5294:	d7 d5       	rcall	.+2990   	; 0x5e44 <FadeIn+0x4>
    5296:	d3 d1       	rcall	.+934    	; 0x563e <waves+0x63e>
    5298:	cf cd       	rjmp	.-1122   	; 0x4e38 <steptable+0x30>
    529a:	cb c9       	rjmp	.-3178   	; 0x4632 <ReadVarLen+0x8>
    529c:	c7 c5       	rjmp	.+2958   	; 0x5e2c <doFade+0x8>
    529e:	c3 c1       	rjmp	.+902    	; 0x5626 <waves+0x626>
    52a0:	bf bd       	out	0x2f, r27	; 47
    52a2:	bb b9       	out	0x0b, r27	; 11
    52a4:	b7 b5       	in	r27, 0x27	; 39
    52a6:	b3 b1       	in	r27, 0x03	; 3
    52a8:	af ad       	ldd	r26, Y+63	; 0x3f
    52aa:	ab a9       	ldd	r26, Y+51	; 0x33
    52ac:	a7 a5       	ldd	r26, Z+47	; 0x2f
    52ae:	a3 a1       	ldd	r26, Z+35	; 0x23
    52b0:	9f 9d       	mul	r25, r15
    52b2:	9b 99       	sbic	0x13, 3	; 19
    52b4:	97 95       	ror	r25
    52b6:	93 91       	.word	0x9193	; ????
    52b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    52ba:	8b 89       	ldd	r24, Y+19	; 0x13
    52bc:	87 85       	ldd	r24, Z+15	; 0x0f
    52be:	83 81       	ldd	r24, Z+3	; 0x03
    52c0:	80 82       	st	Z, r8
    52c2:	84 86       	std	Z+12, r8	; 0x0c
    52c4:	88 8a       	std	Y+16, r8	; 0x10
    52c6:	8c 8e       	std	Y+28, r8	; 0x1c
    52c8:	90 92 94 96 	sts	0x9694, r9
    52cc:	98 9a       	sbi	0x13, 0	; 19
    52ce:	9c 9e       	mul	r9, r28
    52d0:	a0 a2       	std	Z+32, r10	; 0x20
    52d2:	a4 a6       	std	Z+44, r10	; 0x2c
    52d4:	a8 aa       	std	Y+48, r10	; 0x30
    52d6:	ac ae       	std	Y+60, r10	; 0x3c
    52d8:	b0 b2       	in	r11, 0x10	; 16
    52da:	b4 b6       	in	r11, 0x34	; 52
    52dc:	b8 ba       	out	0x18, r11	; 24
    52de:	bc be       	out	0x3c, r11	; 60
    52e0:	c0 c2       	rjmp	.+1408   	; 0x5862 <waves+0x862>
    52e2:	c4 c6       	rjmp	.+3464   	; 0x606c <LBMoveSprite+0x6>
    52e4:	c8 ca       	rjmp	.-2672   	; 0x4876 <TriggerNote+0x54>
    52e6:	cc ce       	rjmp	.-616    	; 0x5080 <waves+0x80>
    52e8:	d0 d2       	rcall	.+1440   	; 0x588a <waves+0x88a>
    52ea:	d4 d6       	rcall	.+3496   	; 0x6094 <LBMoveSprite+0x2e>
    52ec:	d8 da       	rcall	.-2640   	; 0x489e <TriggerNote+0x7c>
    52ee:	dc de       	rcall	.-584    	; 0x50a8 <waves+0xa8>
    52f0:	e0 e2       	ldi	r30, 0x20	; 32
    52f2:	e4 e6       	ldi	r30, 0x64	; 100
    52f4:	e8 ea       	ldi	r30, 0xA8	; 168
    52f6:	ec ee       	ldi	r30, 0xEC	; 236
    52f8:	f0 f2       	brcs	.-68     	; 0x52b6 <waves+0x2b6>
    52fa:	f4 f6       	brge	.-68     	; 0x52b8 <waves+0x2b8>
    52fc:	f8 fa       	.word	0xfaf8	; ????
    52fe:	fc fe       	.word	0xfefc	; ????
    5300:	7f 7f       	andi	r23, 0xFF	; 255
    5302:	7f 7f       	andi	r23, 0xFF	; 255
    5304:	7f 7f       	andi	r23, 0xFF	; 255
    5306:	7f 7f       	andi	r23, 0xFF	; 255
    5308:	7f 7f       	andi	r23, 0xFF	; 255
    530a:	7f 7f       	andi	r23, 0xFF	; 255
    530c:	7f 7f       	andi	r23, 0xFF	; 255
    530e:	7f 7f       	andi	r23, 0xFF	; 255
    5310:	7f 7f       	andi	r23, 0xFF	; 255
    5312:	7f 7f       	andi	r23, 0xFF	; 255
    5314:	7f 7f       	andi	r23, 0xFF	; 255
    5316:	7f 7f       	andi	r23, 0xFF	; 255
    5318:	7f 7f       	andi	r23, 0xFF	; 255
    531a:	7f 7f       	andi	r23, 0xFF	; 255
    531c:	7f 7f       	andi	r23, 0xFF	; 255
    531e:	7f 7f       	andi	r23, 0xFF	; 255
    5320:	7f 7f       	andi	r23, 0xFF	; 255
    5322:	7f 7f       	andi	r23, 0xFF	; 255
    5324:	7f 7f       	andi	r23, 0xFF	; 255
    5326:	7f 7f       	andi	r23, 0xFF	; 255
    5328:	7f 7f       	andi	r23, 0xFF	; 255
    532a:	7f 7f       	andi	r23, 0xFF	; 255
    532c:	7f 7f       	andi	r23, 0xFF	; 255
    532e:	7f 7f       	andi	r23, 0xFF	; 255
    5330:	7f 7f       	andi	r23, 0xFF	; 255
    5332:	7f 7f       	andi	r23, 0xFF	; 255
    5334:	7f 7f       	andi	r23, 0xFF	; 255
    5336:	7f 7f       	andi	r23, 0xFF	; 255
    5338:	7f 7f       	andi	r23, 0xFF	; 255
    533a:	7f 7f       	andi	r23, 0xFF	; 255
    533c:	7f 7f       	andi	r23, 0xFF	; 255
    533e:	7f 7f       	andi	r23, 0xFF	; 255
    5340:	80 80       	ld	r8, Z
    5342:	80 80       	ld	r8, Z
    5344:	80 80       	ld	r8, Z
    5346:	80 80       	ld	r8, Z
    5348:	80 80       	ld	r8, Z
    534a:	80 80       	ld	r8, Z
    534c:	80 80       	ld	r8, Z
    534e:	80 80       	ld	r8, Z
    5350:	80 80       	ld	r8, Z
    5352:	80 80       	ld	r8, Z
    5354:	80 80       	ld	r8, Z
    5356:	80 80       	ld	r8, Z
    5358:	80 80       	ld	r8, Z
    535a:	80 80       	ld	r8, Z
    535c:	80 80       	ld	r8, Z
    535e:	80 80       	ld	r8, Z
    5360:	80 80       	ld	r8, Z
    5362:	80 80       	ld	r8, Z
    5364:	80 80       	ld	r8, Z
    5366:	80 80       	ld	r8, Z
    5368:	80 80       	ld	r8, Z
    536a:	80 80       	ld	r8, Z
    536c:	80 80       	ld	r8, Z
    536e:	80 80       	ld	r8, Z
    5370:	80 80       	ld	r8, Z
    5372:	80 80       	ld	r8, Z
    5374:	80 80       	ld	r8, Z
    5376:	80 80       	ld	r8, Z
    5378:	80 80       	ld	r8, Z
    537a:	80 80       	ld	r8, Z
    537c:	80 80       	ld	r8, Z
    537e:	80 80       	ld	r8, Z
    5380:	80 80       	ld	r8, Z
    5382:	80 80       	ld	r8, Z
    5384:	80 80       	ld	r8, Z
    5386:	80 80       	ld	r8, Z
    5388:	80 80       	ld	r8, Z
    538a:	80 80       	ld	r8, Z
    538c:	80 80       	ld	r8, Z
    538e:	80 80       	ld	r8, Z
    5390:	80 80       	ld	r8, Z
    5392:	80 80       	ld	r8, Z
    5394:	80 80       	ld	r8, Z
    5396:	80 80       	ld	r8, Z
    5398:	80 80       	ld	r8, Z
    539a:	80 80       	ld	r8, Z
    539c:	80 80       	ld	r8, Z
    539e:	80 80       	ld	r8, Z
    53a0:	80 80       	ld	r8, Z
    53a2:	80 80       	ld	r8, Z
    53a4:	80 80       	ld	r8, Z
    53a6:	80 80       	ld	r8, Z
    53a8:	80 80       	ld	r8, Z
    53aa:	80 80       	ld	r8, Z
    53ac:	80 80       	ld	r8, Z
    53ae:	80 80       	ld	r8, Z
    53b0:	80 80       	ld	r8, Z
    53b2:	80 80       	ld	r8, Z
    53b4:	80 80       	ld	r8, Z
    53b6:	80 80       	ld	r8, Z
    53b8:	80 80       	ld	r8, Z
    53ba:	80 80       	ld	r8, Z
    53bc:	80 80       	ld	r8, Z
    53be:	80 80       	ld	r8, Z
    53c0:	80 80       	ld	r8, Z
    53c2:	80 80       	ld	r8, Z
    53c4:	80 80       	ld	r8, Z
    53c6:	80 80       	ld	r8, Z
    53c8:	80 80       	ld	r8, Z
    53ca:	80 80       	ld	r8, Z
    53cc:	80 80       	ld	r8, Z
    53ce:	80 80       	ld	r8, Z
    53d0:	80 80       	ld	r8, Z
    53d2:	80 80       	ld	r8, Z
    53d4:	80 80       	ld	r8, Z
    53d6:	80 80       	ld	r8, Z
    53d8:	80 80       	ld	r8, Z
    53da:	80 80       	ld	r8, Z
    53dc:	80 80       	ld	r8, Z
    53de:	80 80       	ld	r8, Z
    53e0:	80 80       	ld	r8, Z
    53e2:	80 80       	ld	r8, Z
    53e4:	80 80       	ld	r8, Z
    53e6:	80 80       	ld	r8, Z
    53e8:	80 80       	ld	r8, Z
    53ea:	80 80       	ld	r8, Z
    53ec:	80 80       	ld	r8, Z
    53ee:	80 80       	ld	r8, Z
    53f0:	80 80       	ld	r8, Z
    53f2:	80 80       	ld	r8, Z
    53f4:	80 80       	ld	r8, Z
    53f6:	80 80       	ld	r8, Z
    53f8:	80 80       	ld	r8, Z
    53fa:	80 80       	ld	r8, Z
    53fc:	80 80       	ld	r8, Z
    53fe:	80 80       	ld	r8, Z
    5400:	7f 7f       	andi	r23, 0xFF	; 255
    5402:	7f 7f       	andi	r23, 0xFF	; 255
    5404:	7f 7f       	andi	r23, 0xFF	; 255
    5406:	7f 7f       	andi	r23, 0xFF	; 255
    5408:	7f 7f       	andi	r23, 0xFF	; 255
    540a:	7f 7f       	andi	r23, 0xFF	; 255
    540c:	7f 7f       	andi	r23, 0xFF	; 255
    540e:	7f 7f       	andi	r23, 0xFF	; 255
    5410:	7f 7f       	andi	r23, 0xFF	; 255
    5412:	7f 7f       	andi	r23, 0xFF	; 255
    5414:	7f 7f       	andi	r23, 0xFF	; 255
    5416:	7f 7f       	andi	r23, 0xFF	; 255
    5418:	7f 7f       	andi	r23, 0xFF	; 255
    541a:	7f 7f       	andi	r23, 0xFF	; 255
    541c:	7f 7f       	andi	r23, 0xFF	; 255
    541e:	7f 7f       	andi	r23, 0xFF	; 255
    5420:	7f 7f       	andi	r23, 0xFF	; 255
    5422:	7f 7f       	andi	r23, 0xFF	; 255
    5424:	7f 7f       	andi	r23, 0xFF	; 255
    5426:	7f 7f       	andi	r23, 0xFF	; 255
    5428:	7f 7f       	andi	r23, 0xFF	; 255
    542a:	7f 7f       	andi	r23, 0xFF	; 255
    542c:	7f 7f       	andi	r23, 0xFF	; 255
    542e:	7f 7f       	andi	r23, 0xFF	; 255
    5430:	7f 7f       	andi	r23, 0xFF	; 255
    5432:	7f 7f       	andi	r23, 0xFF	; 255
    5434:	7f 7f       	andi	r23, 0xFF	; 255
    5436:	7f 7f       	andi	r23, 0xFF	; 255
    5438:	7f 7f       	andi	r23, 0xFF	; 255
    543a:	7f 7f       	andi	r23, 0xFF	; 255
    543c:	7f 7f       	andi	r23, 0xFF	; 255
    543e:	7f 7f       	andi	r23, 0xFF	; 255
    5440:	7f 7f       	andi	r23, 0xFF	; 255
    5442:	7f 7f       	andi	r23, 0xFF	; 255
    5444:	7f 7f       	andi	r23, 0xFF	; 255
    5446:	7f 7f       	andi	r23, 0xFF	; 255
    5448:	7f 7f       	andi	r23, 0xFF	; 255
    544a:	7f 7f       	andi	r23, 0xFF	; 255
    544c:	7f 7f       	andi	r23, 0xFF	; 255
    544e:	7f 7f       	andi	r23, 0xFF	; 255
    5450:	7f 7f       	andi	r23, 0xFF	; 255
    5452:	7f 7f       	andi	r23, 0xFF	; 255
    5454:	7f 7f       	andi	r23, 0xFF	; 255
    5456:	7f 7f       	andi	r23, 0xFF	; 255
    5458:	7f 7f       	andi	r23, 0xFF	; 255
    545a:	7f 7f       	andi	r23, 0xFF	; 255
    545c:	7f 7f       	andi	r23, 0xFF	; 255
    545e:	7f 7f       	andi	r23, 0xFF	; 255
    5460:	7f 7f       	andi	r23, 0xFF	; 255
    5462:	7f 7f       	andi	r23, 0xFF	; 255
    5464:	7f 7f       	andi	r23, 0xFF	; 255
    5466:	7f 7f       	andi	r23, 0xFF	; 255
    5468:	7f 7f       	andi	r23, 0xFF	; 255
    546a:	7f 7f       	andi	r23, 0xFF	; 255
    546c:	7f 7f       	andi	r23, 0xFF	; 255
    546e:	7f 7f       	andi	r23, 0xFF	; 255
    5470:	7f 7f       	andi	r23, 0xFF	; 255
    5472:	7f 7f       	andi	r23, 0xFF	; 255
    5474:	7f 7f       	andi	r23, 0xFF	; 255
    5476:	7f 7f       	andi	r23, 0xFF	; 255
    5478:	7f 7f       	andi	r23, 0xFF	; 255
    547a:	7f 7f       	andi	r23, 0xFF	; 255
    547c:	7f 7f       	andi	r23, 0xFF	; 255
    547e:	7f 7f       	andi	r23, 0xFF	; 255
    5480:	80 80       	ld	r8, Z
    5482:	80 80       	ld	r8, Z
    5484:	80 80       	ld	r8, Z
    5486:	80 80       	ld	r8, Z
    5488:	80 80       	ld	r8, Z
    548a:	80 80       	ld	r8, Z
    548c:	80 80       	ld	r8, Z
    548e:	80 80       	ld	r8, Z
    5490:	80 80       	ld	r8, Z
    5492:	80 80       	ld	r8, Z
    5494:	80 80       	ld	r8, Z
    5496:	80 80       	ld	r8, Z
    5498:	80 80       	ld	r8, Z
    549a:	80 80       	ld	r8, Z
    549c:	80 80       	ld	r8, Z
    549e:	80 80       	ld	r8, Z
    54a0:	80 80       	ld	r8, Z
    54a2:	80 80       	ld	r8, Z
    54a4:	80 80       	ld	r8, Z
    54a6:	80 80       	ld	r8, Z
    54a8:	80 80       	ld	r8, Z
    54aa:	80 80       	ld	r8, Z
    54ac:	80 80       	ld	r8, Z
    54ae:	80 80       	ld	r8, Z
    54b0:	80 80       	ld	r8, Z
    54b2:	80 80       	ld	r8, Z
    54b4:	80 80       	ld	r8, Z
    54b6:	80 80       	ld	r8, Z
    54b8:	80 80       	ld	r8, Z
    54ba:	80 80       	ld	r8, Z
    54bc:	80 80       	ld	r8, Z
    54be:	80 80       	ld	r8, Z
    54c0:	80 80       	ld	r8, Z
    54c2:	80 80       	ld	r8, Z
    54c4:	80 80       	ld	r8, Z
    54c6:	80 80       	ld	r8, Z
    54c8:	80 80       	ld	r8, Z
    54ca:	80 80       	ld	r8, Z
    54cc:	80 80       	ld	r8, Z
    54ce:	80 80       	ld	r8, Z
    54d0:	80 80       	ld	r8, Z
    54d2:	80 80       	ld	r8, Z
    54d4:	80 80       	ld	r8, Z
    54d6:	80 80       	ld	r8, Z
    54d8:	80 80       	ld	r8, Z
    54da:	80 80       	ld	r8, Z
    54dc:	80 80       	ld	r8, Z
    54de:	80 80       	ld	r8, Z
    54e0:	80 80       	ld	r8, Z
    54e2:	80 80       	ld	r8, Z
    54e4:	80 80       	ld	r8, Z
    54e6:	80 80       	ld	r8, Z
    54e8:	80 80       	ld	r8, Z
    54ea:	80 80       	ld	r8, Z
    54ec:	80 80       	ld	r8, Z
    54ee:	80 80       	ld	r8, Z
    54f0:	80 80       	ld	r8, Z
    54f2:	80 80       	ld	r8, Z
    54f4:	80 80       	ld	r8, Z
    54f6:	80 80       	ld	r8, Z
    54f8:	80 80       	ld	r8, Z
    54fa:	80 80       	ld	r8, Z
    54fc:	80 80       	ld	r8, Z
    54fe:	80 80       	ld	r8, Z
    5500:	7f 7f       	andi	r23, 0xFF	; 255
    5502:	7f 7f       	andi	r23, 0xFF	; 255
    5504:	7f 7f       	andi	r23, 0xFF	; 255
    5506:	7f 7f       	andi	r23, 0xFF	; 255
    5508:	7f 7f       	andi	r23, 0xFF	; 255
    550a:	7f 7f       	andi	r23, 0xFF	; 255
    550c:	7f 7f       	andi	r23, 0xFF	; 255
    550e:	7f 7f       	andi	r23, 0xFF	; 255
    5510:	7f 7f       	andi	r23, 0xFF	; 255
    5512:	7f 7f       	andi	r23, 0xFF	; 255
    5514:	7f 7f       	andi	r23, 0xFF	; 255
    5516:	7f 7f       	andi	r23, 0xFF	; 255
    5518:	7f 7f       	andi	r23, 0xFF	; 255
    551a:	7f 7f       	andi	r23, 0xFF	; 255
    551c:	7f 7f       	andi	r23, 0xFF	; 255
    551e:	7f 7f       	andi	r23, 0xFF	; 255
    5520:	7f 7f       	andi	r23, 0xFF	; 255
    5522:	7f 7f       	andi	r23, 0xFF	; 255
    5524:	7f 7f       	andi	r23, 0xFF	; 255
    5526:	7f 7f       	andi	r23, 0xFF	; 255
    5528:	7f 7f       	andi	r23, 0xFF	; 255
    552a:	7f 7f       	andi	r23, 0xFF	; 255
    552c:	7f 7f       	andi	r23, 0xFF	; 255
    552e:	7f 7f       	andi	r23, 0xFF	; 255
    5530:	7f 7f       	andi	r23, 0xFF	; 255
    5532:	7f 7f       	andi	r23, 0xFF	; 255
    5534:	7f 7f       	andi	r23, 0xFF	; 255
    5536:	7f 7f       	andi	r23, 0xFF	; 255
    5538:	7f 7f       	andi	r23, 0xFF	; 255
    553a:	7f 7f       	andi	r23, 0xFF	; 255
    553c:	7f 7f       	andi	r23, 0xFF	; 255
    553e:	7f 7f       	andi	r23, 0xFF	; 255
    5540:	7f 7f       	andi	r23, 0xFF	; 255
    5542:	7f 7f       	andi	r23, 0xFF	; 255
    5544:	7f 7f       	andi	r23, 0xFF	; 255
    5546:	7f 7f       	andi	r23, 0xFF	; 255
    5548:	7f 7f       	andi	r23, 0xFF	; 255
    554a:	7f 7f       	andi	r23, 0xFF	; 255
    554c:	7f 7f       	andi	r23, 0xFF	; 255
    554e:	7f 7f       	andi	r23, 0xFF	; 255
    5550:	7f 7f       	andi	r23, 0xFF	; 255
    5552:	7f 7f       	andi	r23, 0xFF	; 255
    5554:	7f 7f       	andi	r23, 0xFF	; 255
    5556:	7f 7f       	andi	r23, 0xFF	; 255
    5558:	7f 7f       	andi	r23, 0xFF	; 255
    555a:	7f 7f       	andi	r23, 0xFF	; 255
    555c:	7f 7f       	andi	r23, 0xFF	; 255
    555e:	7f 7f       	andi	r23, 0xFF	; 255
    5560:	7f 7f       	andi	r23, 0xFF	; 255
    5562:	7f 7f       	andi	r23, 0xFF	; 255
    5564:	7f 7f       	andi	r23, 0xFF	; 255
    5566:	7f 7f       	andi	r23, 0xFF	; 255
    5568:	7f 7f       	andi	r23, 0xFF	; 255
    556a:	7f 7f       	andi	r23, 0xFF	; 255
    556c:	7f 7f       	andi	r23, 0xFF	; 255
    556e:	7f 7f       	andi	r23, 0xFF	; 255
    5570:	7f 7f       	andi	r23, 0xFF	; 255
    5572:	7f 7f       	andi	r23, 0xFF	; 255
    5574:	7f 7f       	andi	r23, 0xFF	; 255
    5576:	7f 7f       	andi	r23, 0xFF	; 255
    5578:	7f 7f       	andi	r23, 0xFF	; 255
    557a:	7f 7f       	andi	r23, 0xFF	; 255
    557c:	7f 7f       	andi	r23, 0xFF	; 255
    557e:	7f 7f       	andi	r23, 0xFF	; 255
    5580:	7f 7f       	andi	r23, 0xFF	; 255
    5582:	7f 7f       	andi	r23, 0xFF	; 255
    5584:	7f 7f       	andi	r23, 0xFF	; 255
    5586:	7f 7f       	andi	r23, 0xFF	; 255
    5588:	7f 7f       	andi	r23, 0xFF	; 255
    558a:	7f 7f       	andi	r23, 0xFF	; 255
    558c:	7f 7f       	andi	r23, 0xFF	; 255
    558e:	7f 7f       	andi	r23, 0xFF	; 255
    5590:	7f 7f       	andi	r23, 0xFF	; 255
    5592:	7f 7f       	andi	r23, 0xFF	; 255
    5594:	7f 7f       	andi	r23, 0xFF	; 255
    5596:	7f 7f       	andi	r23, 0xFF	; 255
    5598:	7f 7f       	andi	r23, 0xFF	; 255
    559a:	7f 7f       	andi	r23, 0xFF	; 255
    559c:	7f 7f       	andi	r23, 0xFF	; 255
    559e:	7f 7f       	andi	r23, 0xFF	; 255
    55a0:	7f 7f       	andi	r23, 0xFF	; 255
    55a2:	7f 7f       	andi	r23, 0xFF	; 255
    55a4:	7f 7f       	andi	r23, 0xFF	; 255
    55a6:	7f 7f       	andi	r23, 0xFF	; 255
    55a8:	7f 7f       	andi	r23, 0xFF	; 255
    55aa:	7f 7f       	andi	r23, 0xFF	; 255
    55ac:	7f 7f       	andi	r23, 0xFF	; 255
    55ae:	7f 7f       	andi	r23, 0xFF	; 255
    55b0:	7f 7f       	andi	r23, 0xFF	; 255
    55b2:	7f 7f       	andi	r23, 0xFF	; 255
    55b4:	7f 7f       	andi	r23, 0xFF	; 255
    55b6:	7f 7f       	andi	r23, 0xFF	; 255
    55b8:	7f 7f       	andi	r23, 0xFF	; 255
    55ba:	7f 7f       	andi	r23, 0xFF	; 255
    55bc:	7f 7f       	andi	r23, 0xFF	; 255
    55be:	7f 7f       	andi	r23, 0xFF	; 255
    55c0:	80 80       	ld	r8, Z
    55c2:	80 80       	ld	r8, Z
    55c4:	80 80       	ld	r8, Z
    55c6:	80 80       	ld	r8, Z
    55c8:	80 80       	ld	r8, Z
    55ca:	80 80       	ld	r8, Z
    55cc:	80 80       	ld	r8, Z
    55ce:	80 80       	ld	r8, Z
    55d0:	80 80       	ld	r8, Z
    55d2:	80 80       	ld	r8, Z
    55d4:	80 80       	ld	r8, Z
    55d6:	80 80       	ld	r8, Z
    55d8:	80 80       	ld	r8, Z
    55da:	80 80       	ld	r8, Z
    55dc:	80 80       	ld	r8, Z
    55de:	80 80       	ld	r8, Z
    55e0:	80 80       	ld	r8, Z
    55e2:	80 80       	ld	r8, Z
    55e4:	80 80       	ld	r8, Z
    55e6:	80 80       	ld	r8, Z
    55e8:	80 80       	ld	r8, Z
    55ea:	80 80       	ld	r8, Z
    55ec:	80 80       	ld	r8, Z
    55ee:	80 80       	ld	r8, Z
    55f0:	80 80       	ld	r8, Z
    55f2:	80 80       	ld	r8, Z
    55f4:	80 80       	ld	r8, Z
    55f6:	80 80       	ld	r8, Z
    55f8:	80 80       	ld	r8, Z
    55fa:	80 80       	ld	r8, Z
    55fc:	80 80       	ld	r8, Z
    55fe:	80 80       	ld	r8, Z
    5600:	03 09       	sbc	r16, r3
    5602:	13 1e       	adc	r1, r19
    5604:	28 31       	cpi	r18, 0x18	; 24
    5606:	3a 40       	sbci	r19, 0x0A	; 10
    5608:	46 4c       	sbci	r20, 0xC6	; 198
    560a:	50 54       	subi	r21, 0x40	; 64
    560c:	58 5b       	subi	r21, 0xB8	; 184
    560e:	5e 61       	ori	r21, 0x1E	; 30
    5610:	63 65       	ori	r22, 0x53	; 83
    5612:	67 69       	ori	r22, 0x97	; 151
    5614:	6b 6c       	ori	r22, 0xCB	; 203
    5616:	6e 6f       	ori	r22, 0xFE	; 254
    5618:	70 71       	andi	r23, 0x10	; 16
    561a:	72 73       	andi	r23, 0x32	; 50
    561c:	74 75       	andi	r23, 0x54	; 84
    561e:	76 77       	andi	r23, 0x76	; 118
    5620:	77 78       	andi	r23, 0x87	; 135
    5622:	79 79       	andi	r23, 0x99	; 153
    5624:	7a 7a       	andi	r23, 0xAA	; 170
    5626:	7b 7b       	andi	r23, 0xBB	; 187
    5628:	7c 7c       	andi	r23, 0xCC	; 204
    562a:	7c 7d       	andi	r23, 0xDC	; 220
    562c:	7d 7d       	andi	r23, 0xDD	; 221
    562e:	7e 7e       	andi	r23, 0xEE	; 238
    5630:	7e 7e       	andi	r23, 0xEE	; 238
    5632:	7f 7f       	andi	r23, 0xFF	; 255
    5634:	7f 7f       	andi	r23, 0xFF	; 255
    5636:	7f 7f       	andi	r23, 0xFF	; 255
    5638:	7f 7f       	andi	r23, 0xFF	; 255
    563a:	7f 7f       	andi	r23, 0xFF	; 255
    563c:	7f 7f       	andi	r23, 0xFF	; 255
    563e:	7f 7f       	andi	r23, 0xFF	; 255
    5640:	7f 7f       	andi	r23, 0xFF	; 255
    5642:	7f 7f       	andi	r23, 0xFF	; 255
    5644:	7f 7f       	andi	r23, 0xFF	; 255
    5646:	7f 7f       	andi	r23, 0xFF	; 255
    5648:	7f 7f       	andi	r23, 0xFF	; 255
    564a:	7f 7f       	andi	r23, 0xFF	; 255
    564c:	7f 7e       	andi	r23, 0xEF	; 239
    564e:	7e 7e       	andi	r23, 0xEE	; 238
    5650:	7e 7d       	andi	r23, 0xDE	; 222
    5652:	7d 7d       	andi	r23, 0xDD	; 221
    5654:	7c 7c       	andi	r23, 0xCC	; 204
    5656:	7c 7b       	andi	r23, 0xBC	; 188
    5658:	7b 7a       	andi	r23, 0xAB	; 171
    565a:	7a 79       	andi	r23, 0x9A	; 154
    565c:	79 78       	andi	r23, 0x89	; 137
    565e:	77 77       	andi	r23, 0x77	; 119
    5660:	76 75       	andi	r23, 0x56	; 86
    5662:	74 73       	andi	r23, 0x34	; 52
    5664:	72 71       	andi	r23, 0x12	; 18
    5666:	70 6f       	ori	r23, 0xF0	; 240
    5668:	6e 6c       	ori	r22, 0xCE	; 206
    566a:	6b 69       	ori	r22, 0x9B	; 155
    566c:	67 65       	ori	r22, 0x57	; 87
    566e:	63 61       	ori	r22, 0x13	; 19
    5670:	5e 5b       	subi	r21, 0xBE	; 190
    5672:	58 54       	subi	r21, 0x48	; 72
    5674:	50 4c       	sbci	r21, 0xC0	; 192
    5676:	46 40       	sbci	r20, 0x06	; 6
    5678:	3a 31       	cpi	r19, 0x1A	; 26
    567a:	28 1e       	adc	r2, r24
    567c:	13 09       	sbc	r17, r3
    567e:	03 00       	.word	0x0003	; ????
    5680:	c6 cc       	rjmp	.-1652   	; 0x500e <waves+0xe>
    5682:	d5 db       	rcall	.-2134   	; 0x4e2e <steptable+0x26>
    5684:	df e3       	ldi	r29, 0x3F	; 63
    5686:	e5 e7       	ldi	r30, 0x75	; 117
    5688:	e9 ea       	ldi	r30, 0xA9	; 169
    568a:	eb ec       	ldi	r30, 0xCB	; 203
    568c:	ed ee       	ldi	r30, 0xED	; 237
    568e:	ef ef       	ldi	r30, 0xFF	; 255
    5690:	f0 f0       	brcs	.+60     	; 0x56ce <waves+0x6ce>
    5692:	f0 f1       	brcs	.+124    	; 0x5710 <waves+0x710>
    5694:	f1 f1       	breq	.+124    	; 0x5712 <waves+0x712>
    5696:	f1 f2       	breq	.-68     	; 0x5654 <waves+0x654>
    5698:	f2 f2       	brmi	.-68     	; 0x5656 <waves+0x656>
    569a:	f2 f2       	brmi	.-68     	; 0x5658 <waves+0x658>
    569c:	f2 f2       	brmi	.-68     	; 0x565a <waves+0x65a>
    569e:	f2 f3       	brmi	.-4      	; 0x569c <waves+0x69c>
    56a0:	f3 f3       	brvs	.-4      	; 0x569e <waves+0x69e>
    56a2:	f3 f3       	brvs	.-4      	; 0x56a0 <waves+0x6a0>
    56a4:	f3 f3       	brvs	.-4      	; 0x56a2 <waves+0x6a2>
    56a6:	f3 f3       	brvs	.-4      	; 0x56a4 <waves+0x6a4>
    56a8:	f3 f3       	brvs	.-4      	; 0x56a6 <waves+0x6a6>
    56aa:	f3 f3       	brvs	.-4      	; 0x56a8 <waves+0x6a8>
    56ac:	f3 f3       	brvs	.-4      	; 0x56aa <waves+0x6aa>
    56ae:	f3 f3       	brvs	.-4      	; 0x56ac <waves+0x6ac>
    56b0:	f3 f3       	brvs	.-4      	; 0x56ae <waves+0x6ae>
    56b2:	f3 f3       	brvs	.-4      	; 0x56b0 <waves+0x6b0>
    56b4:	f3 f3       	brvs	.-4      	; 0x56b2 <waves+0x6b2>
    56b6:	f3 f3       	brvs	.-4      	; 0x56b4 <waves+0x6b4>
    56b8:	f3 f3       	brvs	.-4      	; 0x56b6 <waves+0x6b6>
    56ba:	f3 f3       	brvs	.-4      	; 0x56b8 <waves+0x6b8>
    56bc:	f3 f3       	brvs	.-4      	; 0x56ba <waves+0x6ba>
    56be:	f3 f3       	brvs	.-4      	; 0x56bc <waves+0x6bc>
    56c0:	f3 f3       	brvs	.-4      	; 0x56be <waves+0x6be>
    56c2:	f3 f3       	brvs	.-4      	; 0x56c0 <waves+0x6c0>
    56c4:	f3 f3       	brvs	.-4      	; 0x56c2 <waves+0x6c2>
    56c6:	f3 f3       	brvs	.-4      	; 0x56c4 <waves+0x6c4>
    56c8:	f3 f3       	brvs	.-4      	; 0x56c6 <waves+0x6c6>
    56ca:	f3 f3       	brvs	.-4      	; 0x56c8 <waves+0x6c8>
    56cc:	f3 f3       	brvs	.-4      	; 0x56ca <waves+0x6ca>
    56ce:	f3 f3       	brvs	.-4      	; 0x56cc <waves+0x6cc>
    56d0:	f3 f3       	brvs	.-4      	; 0x56ce <waves+0x6ce>
    56d2:	f3 f3       	brvs	.-4      	; 0x56d0 <waves+0x6d0>
    56d4:	f3 f3       	brvs	.-4      	; 0x56d2 <waves+0x6d2>
    56d6:	f3 f3       	brvs	.-4      	; 0x56d4 <waves+0x6d4>
    56d8:	f3 f3       	brvs	.-4      	; 0x56d6 <waves+0x6d6>
    56da:	f3 f3       	brvs	.-4      	; 0x56d8 <waves+0x6d8>
    56dc:	f3 f3       	brvs	.-4      	; 0x56da <waves+0x6da>
    56de:	f3 f3       	brvs	.-4      	; 0x56dc <waves+0x6dc>
    56e0:	f2 f2       	brmi	.-68     	; 0x569e <waves+0x69e>
    56e2:	f2 f2       	brmi	.-68     	; 0x56a0 <waves+0x6a0>
    56e4:	f2 f2       	brmi	.-68     	; 0x56a2 <waves+0x6a2>
    56e6:	f2 f2       	brmi	.-68     	; 0x56a4 <waves+0x6a4>
    56e8:	f1 f1       	breq	.+124    	; 0x5766 <waves+0x766>
    56ea:	f1 f1       	breq	.+124    	; 0x5768 <waves+0x768>
    56ec:	f0 f0       	brcs	.+60     	; 0x572a <waves+0x72a>
    56ee:	f0 ef       	ldi	r31, 0xF0	; 240
    56f0:	ef ee       	ldi	r30, 0xEF	; 239
    56f2:	ed ec       	ldi	r30, 0xCD	; 205
    56f4:	eb ea       	ldi	r30, 0xAB	; 171
    56f6:	e9 e7       	ldi	r30, 0x79	; 121
    56f8:	e5 e3       	ldi	r30, 0x35	; 53
    56fa:	df db       	rcall	.-2114   	; 0x4eba <steptable+0xb2>
    56fc:	d5 cc       	rjmp	.-1622   	; 0x50a8 <waves+0xa8>
    56fe:	c6 00       	.word	0x00c6	; ????
    5700:	00 28       	or	r0, r0
    5702:	3d 42       	sbci	r19, 0x2D	; 45
    5704:	30 2d       	mov	r19, r0
    5706:	2c 2b       	or	r18, r28
    5708:	2c 2d       	mov	r18, r12
    570a:	2e 2f       	mov	r18, r30
    570c:	30 32       	cpi	r19, 0x20	; 32
    570e:	33 35       	cpi	r19, 0x53	; 83
    5710:	37 39       	cpi	r19, 0x97	; 151
    5712:	3b 3d       	cpi	r19, 0xDB	; 219
    5714:	3f 41       	sbci	r19, 0x1F	; 31
    5716:	43 45       	sbci	r20, 0x53	; 83
    5718:	48 4a       	sbci	r20, 0xA8	; 168
    571a:	4c 4e       	sbci	r20, 0xEC	; 236
    571c:	50 53       	subi	r21, 0x30	; 48
    571e:	55 57       	subi	r21, 0x75	; 117
    5720:	59 5b       	subi	r21, 0xB9	; 185
    5722:	5d 5f       	subi	r21, 0xFD	; 253
    5724:	61 63       	ori	r22, 0x31	; 49
    5726:	65 67       	ori	r22, 0x75	; 117
    5728:	69 6b       	ori	r22, 0xB9	; 185
    572a:	6c 6e       	ori	r22, 0xEC	; 236
    572c:	70 71       	andi	r23, 0x10	; 16
    572e:	73 74       	andi	r23, 0x43	; 67
    5730:	75 77       	andi	r23, 0x75	; 117
    5732:	78 79       	andi	r23, 0x98	; 152
    5734:	7a 7b       	andi	r23, 0xBA	; 186
    5736:	7c 7d       	andi	r23, 0xDC	; 220
    5738:	7d 7e       	andi	r23, 0xED	; 237
    573a:	7e 7f       	andi	r23, 0xFE	; 254
    573c:	7f 7f       	andi	r23, 0xFF	; 255
    573e:	7f 7f       	andi	r23, 0xFF	; 255
    5740:	7f 7f       	andi	r23, 0xFF	; 255
    5742:	7f 7f       	andi	r23, 0xFF	; 255
    5744:	7f 7f       	andi	r23, 0xFF	; 255
    5746:	7e 7e       	andi	r23, 0xEE	; 238
    5748:	7d 7d       	andi	r23, 0xDD	; 221
    574a:	7c 7b       	andi	r23, 0xBC	; 188
    574c:	7a 79       	andi	r23, 0x9A	; 154
    574e:	78 77       	andi	r23, 0x78	; 120
    5750:	75 74       	andi	r23, 0x45	; 69
    5752:	73 71       	andi	r23, 0x13	; 19
    5754:	70 6e       	ori	r23, 0xE0	; 224
    5756:	6c 6b       	ori	r22, 0xBC	; 188
    5758:	69 67       	ori	r22, 0x79	; 121
    575a:	65 63       	ori	r22, 0x35	; 53
    575c:	61 5f       	subi	r22, 0xF1	; 241
    575e:	5d 5b       	subi	r21, 0xBD	; 189
    5760:	59 57       	subi	r21, 0x79	; 121
    5762:	55 53       	subi	r21, 0x35	; 53
    5764:	50 4e       	sbci	r21, 0xE0	; 224
    5766:	4c 4a       	sbci	r20, 0xAC	; 172
    5768:	48 45       	sbci	r20, 0x58	; 88
    576a:	43 41       	sbci	r20, 0x13	; 19
    576c:	3f 3d       	cpi	r19, 0xDF	; 223
    576e:	3b 39       	cpi	r19, 0x9B	; 155
    5770:	37 35       	cpi	r19, 0x57	; 87
    5772:	33 32       	cpi	r19, 0x23	; 35
    5774:	30 2f       	mov	r19, r16
    5776:	2e 2d       	mov	r18, r14
    5778:	2c 2b       	or	r18, r28
    577a:	2c 2d       	mov	r18, r12
    577c:	30 42       	sbci	r19, 0x20	; 32
    577e:	3d 28       	or	r3, r13
    5780:	00 e9       	ldi	r16, 0x90	; 144
    5782:	e5 fe       	sbrs	r14, 5
    5784:	d4 d7       	rcall	.+4008   	; 0x672e <update_level+0x30>
    5786:	d7 d7       	rcall	.+4014   	; 0x6736 <update_level+0x38>
    5788:	d6 d4       	rcall	.+2476   	; 0x6136 <LBRotateSprites+0x54>
    578a:	d2 d0       	rcall	.+420    	; 0x5930 <waves+0x930>
    578c:	ce cc       	rjmp	.-1636   	; 0x512a <waves+0x12a>
    578e:	ca c8       	rjmp	.-3692   	; 0x4924 <ProcessMusic+0x82>
    5790:	c6 c3       	rjmp	.+1932   	; 0x5f1e <LBGetJoyPadState+0x10>
    5792:	c1 bf       	out	0x31, r28	; 49
    5794:	bd ba       	out	0x1d, r11	; 29
    5796:	b8 b6       	in	r11, 0x38	; 56
    5798:	b4 b1       	in	r27, 0x04	; 4
    579a:	af ad       	ldd	r26, Y+63	; 0x3f
    579c:	ab a9       	ldd	r26, Y+51	; 0x33
    579e:	a7 a5       	ldd	r26, Z+47	; 0x2f
    57a0:	a3 a1       	ldd	r26, Z+35	; 0x23
    57a2:	9f 9e       	mul	r9, r31
    57a4:	9c 9a       	sbi	0x13, 4	; 19
    57a6:	99 97       	sbiw	r26, 0x29	; 41
    57a8:	95 94       	asr	r9
    57aa:	93 91       	.word	0x9193	; ????
    57ac:	90 8f       	std	Z+24, r25	; 0x18
    57ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    57b0:	8b 8a       	std	Y+19, r8	; 0x13
    57b2:	89 88       	ldd	r8, Y+17	; 0x11
    57b4:	88 87       	std	Y+8, r24	; 0x08
    57b6:	86 85       	ldd	r24, Z+14	; 0x0e
    57b8:	85 84       	ldd	r8, Z+13	; 0x0d
    57ba:	84 84       	ldd	r8, Z+12	; 0x0c
    57bc:	83 83       	std	Z+3, r24	; 0x03
    57be:	83 83       	std	Z+3, r24	; 0x03
    57c0:	83 83       	std	Z+3, r24	; 0x03
    57c2:	83 83       	std	Z+3, r24	; 0x03
    57c4:	83 84       	ldd	r8, Z+11	; 0x0b
    57c6:	84 84       	ldd	r8, Z+12	; 0x0c
    57c8:	85 85       	ldd	r24, Z+13	; 0x0d
    57ca:	86 87       	std	Z+14, r24	; 0x0e
    57cc:	88 88       	ldd	r8, Y+16	; 0x10
    57ce:	89 8a       	std	Y+17, r8	; 0x11
    57d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    57d2:	8d 8f       	std	Y+29, r24	; 0x1d
    57d4:	90 91 93 94 	lds	r25, 0x9493
    57d8:	95 97       	sbiw	r26, 0x25	; 37
    57da:	99 9a       	sbi	0x13, 1	; 19
    57dc:	9c 9e       	mul	r9, r28
    57de:	9f a1       	ldd	r25, Y+39	; 0x27
    57e0:	a3 a5       	ldd	r26, Z+43	; 0x2b
    57e2:	a7 a9       	ldd	r26, Z+55	; 0x37
    57e4:	ab ad       	ldd	r26, Y+59	; 0x3b
    57e6:	af b1       	in	r26, 0x0f	; 15
    57e8:	b4 b6       	in	r11, 0x34	; 52
    57ea:	b8 ba       	out	0x18, r11	; 24
    57ec:	bd bf       	out	0x3d, r27	; 61
    57ee:	c1 c3       	rjmp	.+1922   	; 0x5f72 <LBGetJoyPadState+0x64>
    57f0:	c6 c8       	rjmp	.-3700   	; 0x497e <ProcessMusic+0xdc>
    57f2:	ca cc       	rjmp	.-1644   	; 0x5188 <waves+0x188>
    57f4:	ce d0       	rcall	.+412    	; 0x5992 <waves+0x992>
    57f6:	d2 d4       	rcall	.+2468   	; 0x619c <LBRotateSprites+0xba>
    57f8:	d6 d7       	rcall	.+4012   	; 0x67a6 <level_transition+0x36>
    57fa:	d7 d7       	rcall	.+4014   	; 0x67aa <level_transition+0x3a>
    57fc:	d4 fe       	sbrs	r13, 4
    57fe:	e5 e9       	ldi	r30, 0x95	; 149
    5800:	f9 f8       	.word	0xf8f9	; ????
    5802:	f9 f5       	brne	.+126    	; 0x5882 <waves+0x882>
    5804:	eb e1       	ldi	r30, 0x1B	; 27
    5806:	dd de       	rcall	.-582    	; 0x55c2 <waves+0x5c2>
    5808:	e0 e2       	ldi	r30, 0x20	; 32
    580a:	e4 e5       	ldi	r30, 0x54	; 84
    580c:	e6 e5       	ldi	r30, 0x56	; 86
    580e:	e4 e2       	ldi	r30, 0x24	; 36
    5810:	de d9       	rcall	.-3140   	; 0x4bce <ProcessMusic+0x32c>
    5812:	d2 ca       	rjmp	.-2652   	; 0x4db8 <esmw+0x6e>
    5814:	c1 b7       	in	r28, 0x31	; 49
    5816:	ac a2       	std	Y+36, r10	; 0x24
    5818:	99 91       	ld	r25, Y+
    581a:	8a 86       	std	Y+10, r8	; 0x0a
    581c:	83 81       	ldd	r24, Z+3	; 0x03
    581e:	80 80       	ld	r8, Z
    5820:	81 82       	std	Z+1, r8	; 0x01
    5822:	83 85       	ldd	r24, Z+11	; 0x0b
    5824:	86 88       	ldd	r8, Z+22	; 0x16
    5826:	8a 8c       	ldd	r8, Y+26	; 0x1a
    5828:	8d 8f       	std	Y+29, r24	; 0x1d
    582a:	90 92 93 95 	sts	0x9593, r9
    582e:	96 97       	sbiw	r26, 0x26	; 38
    5830:	98 99       	sbic	0x13, 0	; 19
    5832:	9a 9b       	sbis	0x13, 2	; 19
    5834:	9b 9c       	mul	r9, r11
    5836:	9d 9d       	mul	r25, r13
    5838:	9d 9e       	mul	r9, r29
    583a:	9e 9e       	mul	r9, r30
    583c:	9f 9f       	mul	r25, r31
    583e:	9f 9f       	mul	r25, r31
    5840:	9f 9f       	mul	r25, r31
    5842:	9f 9e       	mul	r9, r31
    5844:	9e 9e       	mul	r9, r30
    5846:	9d 9d       	mul	r25, r13
    5848:	9d 9c       	mul	r9, r13
    584a:	9b 9b       	sbis	0x13, 3	; 19
    584c:	9a 99       	sbic	0x13, 2	; 19
    584e:	98 97       	sbiw	r26, 0x28	; 40
    5850:	96 95       	lsr	r25
    5852:	93 92       	.word	0x9293	; ????
    5854:	90 8f       	std	Z+24, r25	; 0x18
    5856:	8d 8c       	ldd	r8, Y+29	; 0x1d
    5858:	8a 88       	ldd	r8, Y+18	; 0x12
    585a:	86 85       	ldd	r24, Z+14	; 0x0e
    585c:	83 82       	std	Z+3, r8	; 0x03
    585e:	81 80       	ldd	r8, Z+1	; 0x01
    5860:	80 81       	ld	r24, Z
    5862:	83 86       	std	Z+11, r8	; 0x0b
    5864:	8a 91       	ld	r24, -Y
    5866:	99 a2       	std	Y+33, r9	; 0x21
    5868:	ac b7       	in	r26, 0x3c	; 60
    586a:	c1 ca       	rjmp	.-2686   	; 0x4dee <esmw+0xa4>
    586c:	d2 d9       	rcall	.-3164   	; 0x4c12 <ProcessMusic+0x370>
    586e:	de e2       	ldi	r29, 0x2E	; 46
    5870:	e4 e5       	ldi	r30, 0x54	; 84
    5872:	e6 e5       	ldi	r30, 0x56	; 86
    5874:	e4 e2       	ldi	r30, 0x24	; 36
    5876:	e0 de       	rcall	.-576    	; 0x5638 <waves+0x638>
    5878:	dd e1       	ldi	r29, 0x1D	; 29
    587a:	eb f5       	brvc	.+122    	; 0x58f6 <waves+0x8f6>
    587c:	f9 f8       	.word	0xf8f9	; ????
    587e:	f9 00       	.word	0x00f9	; ????
    5880:	07 08       	sbc	r0, r7
    5882:	07 0b       	sbc	r16, r23
    5884:	15 1f       	adc	r17, r21
    5886:	23 22       	and	r2, r19
    5888:	20 1e       	adc	r2, r16
    588a:	1c 1b       	sub	r17, r28
    588c:	1a 1b       	sub	r17, r26
    588e:	1c 1e       	adc	r1, r28
    5890:	22 27       	eor	r18, r18
    5892:	2e 36       	cpi	r18, 0x6E	; 110
    5894:	3f 49       	sbci	r19, 0x9F	; 159
    5896:	54 5e       	subi	r21, 0xE4	; 228
    5898:	67 6f       	ori	r22, 0xF7	; 247
    589a:	76 7a       	andi	r23, 0xA6	; 166
    589c:	7e 7f       	andi	r23, 0xFE	; 254
    589e:	7f 7f       	andi	r23, 0xFF	; 255
    58a0:	7f 7e       	andi	r23, 0xEF	; 239
    58a2:	7d 7b       	andi	r23, 0xBD	; 189
    58a4:	7a 78       	andi	r23, 0x8A	; 138
    58a6:	76 74       	andi	r23, 0x46	; 70
    58a8:	73 71       	andi	r23, 0x13	; 19
    58aa:	70 6e       	ori	r23, 0xE0	; 224
    58ac:	6d 6b       	ori	r22, 0xBD	; 189
    58ae:	6a 69       	ori	r22, 0x9A	; 154
    58b0:	68 67       	ori	r22, 0x78	; 120
    58b2:	66 65       	ori	r22, 0x56	; 86
    58b4:	65 64       	ori	r22, 0x45	; 69
    58b6:	64 63       	ori	r22, 0x34	; 52
    58b8:	63 62       	ori	r22, 0x23	; 35
    58ba:	62 62       	ori	r22, 0x22	; 34
    58bc:	61 61       	ori	r22, 0x11	; 17
    58be:	61 61       	ori	r22, 0x11	; 17
    58c0:	61 61       	ori	r22, 0x11	; 17
    58c2:	61 62       	ori	r22, 0x21	; 33
    58c4:	62 62       	ori	r22, 0x22	; 34
    58c6:	63 63       	ori	r22, 0x33	; 51
    58c8:	63 64       	ori	r22, 0x43	; 67
    58ca:	65 65       	ori	r22, 0x55	; 85
    58cc:	66 67       	ori	r22, 0x76	; 118
    58ce:	68 69       	ori	r22, 0x98	; 152
    58d0:	6a 6b       	ori	r22, 0xBA	; 186
    58d2:	6d 6e       	ori	r22, 0xED	; 237
    58d4:	70 71       	andi	r23, 0x10	; 16
    58d6:	73 74       	andi	r23, 0x43	; 67
    58d8:	76 78       	andi	r23, 0x86	; 134
    58da:	7a 7b       	andi	r23, 0xBA	; 186
    58dc:	7d 7e       	andi	r23, 0xED	; 237
    58de:	7f 7f       	andi	r23, 0xFF	; 255
    58e0:	7f 7f       	andi	r23, 0xFF	; 255
    58e2:	7e 7a       	andi	r23, 0xAE	; 174
    58e4:	76 6f       	ori	r23, 0xF6	; 246
    58e6:	67 5e       	subi	r22, 0xE7	; 231
    58e8:	54 49       	sbci	r21, 0x94	; 148
    58ea:	3f 36       	cpi	r19, 0x6F	; 111
    58ec:	2e 27       	eor	r18, r30
    58ee:	22 1e       	adc	r2, r18
    58f0:	1c 1b       	sub	r17, r28
    58f2:	1a 1b       	sub	r17, r26
    58f4:	1c 1e       	adc	r1, r28
    58f6:	20 22       	and	r2, r16
    58f8:	23 1f       	adc	r18, r19
    58fa:	15 0b       	sbc	r17, r21
    58fc:	07 08       	sbc	r0, r7
    58fe:	07 00       	.word	0x0007	; ????
    5900:	1f 31       	cpi	r17, 0x1F	; 31
    5902:	3d 44       	sbci	r19, 0x4D	; 77
    5904:	4e 53       	subi	r20, 0x3E	; 62
    5906:	54 56       	subi	r21, 0x64	; 100
    5908:	5a 5f       	subi	r21, 0xFA	; 250
    590a:	64 69       	ori	r22, 0x94	; 148
    590c:	6e 74       	andi	r22, 0x4E	; 78
    590e:	76 79       	andi	r23, 0x96	; 150
    5910:	7c 7f       	andi	r23, 0xFC	; 252
    5912:	7f 7f       	andi	r23, 0xFF	; 255
    5914:	7f 7f       	andi	r23, 0xFF	; 255
    5916:	7f 7f       	andi	r23, 0xFF	; 255
    5918:	7f 7f       	andi	r23, 0xFF	; 255
    591a:	7f 7f       	andi	r23, 0xFF	; 255
    591c:	7f 7f       	andi	r23, 0xFF	; 255
    591e:	7f 7f       	andi	r23, 0xFF	; 255
    5920:	7f 7f       	andi	r23, 0xFF	; 255
    5922:	7f 7f       	andi	r23, 0xFF	; 255
    5924:	7f 7f       	andi	r23, 0xFF	; 255
    5926:	7f 7f       	andi	r23, 0xFF	; 255
    5928:	7f 7f       	andi	r23, 0xFF	; 255
    592a:	7f 7f       	andi	r23, 0xFF	; 255
    592c:	7f 7f       	andi	r23, 0xFF	; 255
    592e:	7f 7f       	andi	r23, 0xFF	; 255
    5930:	7f 7f       	andi	r23, 0xFF	; 255
    5932:	7f 7f       	andi	r23, 0xFF	; 255
    5934:	7f 7f       	andi	r23, 0xFF	; 255
    5936:	7f 7f       	andi	r23, 0xFF	; 255
    5938:	7f 7f       	andi	r23, 0xFF	; 255
    593a:	7f 7f       	andi	r23, 0xFF	; 255
    593c:	7f 7f       	andi	r23, 0xFF	; 255
    593e:	7f 7f       	andi	r23, 0xFF	; 255
    5940:	7f 7f       	andi	r23, 0xFF	; 255
    5942:	7f 7f       	andi	r23, 0xFF	; 255
    5944:	7f 7f       	andi	r23, 0xFF	; 255
    5946:	7f 7f       	andi	r23, 0xFF	; 255
    5948:	7f 7f       	andi	r23, 0xFF	; 255
    594a:	7f 7f       	andi	r23, 0xFF	; 255
    594c:	7f 7f       	andi	r23, 0xFF	; 255
    594e:	7f 7f       	andi	r23, 0xFF	; 255
    5950:	7f 7f       	andi	r23, 0xFF	; 255
    5952:	7f 7f       	andi	r23, 0xFF	; 255
    5954:	7f 7f       	andi	r23, 0xFF	; 255
    5956:	7f 7f       	andi	r23, 0xFF	; 255
    5958:	7f 7f       	andi	r23, 0xFF	; 255
    595a:	7f 7f       	andi	r23, 0xFF	; 255
    595c:	7f 7f       	andi	r23, 0xFF	; 255
    595e:	7f 7f       	andi	r23, 0xFF	; 255
    5960:	7f 7f       	andi	r23, 0xFF	; 255
    5962:	7f 7f       	andi	r23, 0xFF	; 255
    5964:	7f 7f       	andi	r23, 0xFF	; 255
    5966:	7f 7f       	andi	r23, 0xFF	; 255
    5968:	7f 7f       	andi	r23, 0xFF	; 255
    596a:	7f 7f       	andi	r23, 0xFF	; 255
    596c:	7f 7f       	andi	r23, 0xFF	; 255
    596e:	7f 7f       	andi	r23, 0xFF	; 255
    5970:	7f 7f       	andi	r23, 0xFF	; 255
    5972:	7f 7f       	andi	r23, 0xFF	; 255
    5974:	7f 7f       	andi	r23, 0xFF	; 255
    5976:	7f 7f       	andi	r23, 0xFF	; 255
    5978:	7f 7f       	andi	r23, 0xFF	; 255
    597a:	7f 7c       	andi	r23, 0xCF	; 207
    597c:	78 71       	andi	r23, 0x18	; 24
    597e:	68 4c       	sbci	r22, 0xC8	; 200
    5980:	2c 1c       	adc	r2, r12
    5982:	12 0c       	add	r1, r2
    5984:	0a 0b       	sbc	r16, r26
    5986:	0a 05       	cpc	r16, r10
    5988:	fd f3       	brhs	.-2      	; 0x5988 <waves+0x988>
    598a:	e9 df       	rcall	.-46     	; 0x595e <waves+0x95e>
    598c:	d4 ca       	rjmp	.-2648   	; 0x4f36 <steptable+0x12e>
    598e:	c0 b7       	in	r28, 0x30	; 48
    5990:	ae a6       	std	Y+46, r10	; 0x2e
    5992:	9e 97       	sbiw	r26, 0x2e	; 46
    5994:	91 8b       	std	Z+17, r25	; 0x11
    5996:	86 85       	ldd	r24, Z+14	; 0x0e
    5998:	82 80       	ldd	r8, Z+2	; 0x02
    599a:	80 80       	ld	r8, Z
    599c:	80 80       	ld	r8, Z
    599e:	80 80       	ld	r8, Z
    59a0:	80 80       	ld	r8, Z
    59a2:	80 80       	ld	r8, Z
    59a4:	80 80       	ld	r8, Z
    59a6:	80 80       	ld	r8, Z
    59a8:	80 80       	ld	r8, Z
    59aa:	80 80       	ld	r8, Z
    59ac:	80 80       	ld	r8, Z
    59ae:	80 80       	ld	r8, Z
    59b0:	80 80       	ld	r8, Z
    59b2:	80 80       	ld	r8, Z
    59b4:	80 80       	ld	r8, Z
    59b6:	80 80       	ld	r8, Z
    59b8:	80 80       	ld	r8, Z
    59ba:	80 80       	ld	r8, Z
    59bc:	80 80       	ld	r8, Z
    59be:	80 80       	ld	r8, Z
    59c0:	80 80       	ld	r8, Z
    59c2:	80 80       	ld	r8, Z
    59c4:	80 80       	ld	r8, Z
    59c6:	80 80       	ld	r8, Z
    59c8:	80 80       	ld	r8, Z
    59ca:	80 80       	ld	r8, Z
    59cc:	80 80       	ld	r8, Z
    59ce:	80 80       	ld	r8, Z
    59d0:	80 80       	ld	r8, Z
    59d2:	80 80       	ld	r8, Z
    59d4:	80 80       	ld	r8, Z
    59d6:	80 80       	ld	r8, Z
    59d8:	80 80       	ld	r8, Z
    59da:	80 80       	ld	r8, Z
    59dc:	80 80       	ld	r8, Z
    59de:	80 80       	ld	r8, Z
    59e0:	80 80       	ld	r8, Z
    59e2:	80 80       	ld	r8, Z
    59e4:	80 80       	ld	r8, Z
    59e6:	80 80       	ld	r8, Z
    59e8:	80 80       	ld	r8, Z
    59ea:	80 80       	ld	r8, Z
    59ec:	80 80       	ld	r8, Z
    59ee:	80 80       	ld	r8, Z
    59f0:	80 80       	ld	r8, Z
    59f2:	80 80       	ld	r8, Z
    59f4:	80 87       	std	Z+8, r24	; 0x08
    59f6:	91 9d       	mul	r25, r1
    59f8:	ac c4       	rjmp	.+2392   	; 0x6352 <get_hero_spawn_x+0x6>
    59fa:	cb d4       	rcall	.+2454   	; 0x6392 <get_level_tile+0x12>
    59fc:	dd f2       	brhs	.-74     	; 0x59b4 <waves+0x9b4>
    59fe:	fa fa       	.word	0xfafa	; ????

00005a00 <RestoreBackground>:
	unsigned char free_tile_index, userRamTilesCount=0,userRamTilesCount_tmp=0;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=userRamTilesCount;i<free_tile_index;i++){
    5a00:	80 91 db 0c 	lds	r24, 0x0CDB
    5a04:	90 91 6b 0d 	lds	r25, 0x0D6B
    5a08:	89 17       	cp	r24, r25
    5a0a:	78 f4       	brcc	.+30     	; 0x5a2a <RestoreBackground+0x2a>
			//vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
			*ram_tiles_restore[i].addr=ram_tiles_restore[i].tileIndex;
    5a0c:	e8 2f       	mov	r30, r24
    5a0e:	f0 e0       	ldi	r31, 0x00	; 0
    5a10:	9f 01       	movw	r18, r30
    5a12:	22 0f       	add	r18, r18
    5a14:	33 1f       	adc	r19, r19
    5a16:	e2 0f       	add	r30, r18
    5a18:	f3 1f       	adc	r31, r19
    5a1a:	e6 5c       	subi	r30, 0xC6	; 198
    5a1c:	f3 4f       	sbci	r31, 0xF3	; 243
    5a1e:	a0 81       	ld	r26, Z
    5a20:	b1 81       	ldd	r27, Z+1	; 0x01
    5a22:	92 81       	ldd	r25, Z+2	; 0x02
    5a24:	9c 93       	st	X, r25
	unsigned char free_tile_index, userRamTilesCount=0,userRamTilesCount_tmp=0;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=userRamTilesCount;i<free_tile_index;i++){
    5a26:	8f 5f       	subi	r24, 0xFF	; 255
    5a28:	ed cf       	rjmp	.-38     	; 0x5a04 <RestoreBackground+0x4>
			//vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
			*ram_tiles_restore[i].addr=ram_tiles_restore[i].tileIndex;
		}	
	}
    5a2a:	08 95       	ret

00005a2c <ProcessSprites>:
		}

	}
	*/

	void ProcessSprites(){
    5a2c:	2f 92       	push	r2
    5a2e:	3f 92       	push	r3
    5a30:	4f 92       	push	r4
    5a32:	5f 92       	push	r5
    5a34:	6f 92       	push	r6
    5a36:	7f 92       	push	r7
    5a38:	8f 92       	push	r8
    5a3a:	9f 92       	push	r9
    5a3c:	af 92       	push	r10
    5a3e:	bf 92       	push	r11
    5a40:	cf 92       	push	r12
    5a42:	df 92       	push	r13
    5a44:	ef 92       	push	r14
    5a46:	ff 92       	push	r15
    5a48:	0f 93       	push	r16
    5a4a:	1f 93       	push	r17
    5a4c:	cf 93       	push	r28
    5a4e:	df 93       	push	r29
    5a50:	00 d0       	rcall	.+0      	; 0x5a52 <ProcessSprites+0x26>
    5a52:	00 d0       	rcall	.+0      	; 0x5a54 <ProcessSprites+0x28>
    5a54:	cd b7       	in	r28, 0x3d	; 61
    5a56:	de b7       	in	r29, 0x3e	; 62
	
		unsigned char i,bx,by,dx,dy,bt,x,y,tx=1,ty=1,wx,wy;
		unsigned int ramPtr,ssx,ssy;

		if(!spritesOn) return;
    5a58:	80 91 00 05 	lds	r24, 0x0500
    5a5c:	88 23       	and	r24, r24
    5a5e:	09 f4       	brne	.+2      	; 0x5a62 <ProcessSprites+0x36>
    5a60:	e0 c0       	rjmp	.+448    	; 0x5c22 <ProcessSprites+0x1f6>

		userRamTilesCount=userRamTilesCount_tmp;
    5a62:	80 91 da 0c 	lds	r24, 0x0CDA
    5a66:	80 93 db 0c 	sts	0x0CDB, r24
		free_tile_index=userRamTilesCount;
    5a6a:	80 93 6b 0d 	sts	0x0D6B, r24
    5a6e:	e2 e0       	ldi	r30, 0x02	; 2
    5a70:	ce 2e       	mov	r12, r30
    5a72:	e5 e0       	ldi	r30, 0x05	; 5
    5a74:	de 2e       	mov	r13, r30
	
		for(i=0;i<MAX_SPRITES;i++){
    5a76:	71 2c       	mov	r7, r1
			bx=sprites[i].x;
    5a78:	f6 01       	movw	r30, r12
    5a7a:	20 81       	ld	r18, Z

			if(bx!=(SCREEN_TILES_H*TILE_WIDTH)){
    5a7c:	20 3e       	cpi	r18, 0xE0	; 224
    5a7e:	09 f4       	brne	.+2      	; 0x5a82 <ProcessSprites+0x56>
    5a80:	b1 c0       	rjmp	.+354    	; 0x5be4 <ProcessSprites+0x1b8>
				//get tile's screen section offsets
				
				#if SCROLLING == 1
					ssx=sprites[i].x+Screen.scrollX;
    5a82:	80 91 9c 0c 	lds	r24, 0x0C9C
    5a86:	90 e0       	ldi	r25, 0x00	; 0
    5a88:	82 0f       	add	r24, r18
    5a8a:	91 1d       	adc	r25, r1
					ssy=sprites[i].y+Screen.scrollY;
    5a8c:	41 81       	ldd	r20, Z+1	; 0x01
    5a8e:	20 91 9d 0c 	lds	r18, 0x0C9D
    5a92:	30 e0       	ldi	r19, 0x00	; 0
    5a94:	24 0f       	add	r18, r20
    5a96:	31 1d       	adc	r19, r1

				tx=1;
				ty=1;

				//get the BG tiles that are overlapped by the sprite
				bx=ssx>>3;
    5a98:	ac 01       	movw	r20, r24
    5a9a:	73 e0       	ldi	r23, 0x03	; 3
    5a9c:	56 95       	lsr	r21
    5a9e:	47 95       	ror	r20
    5aa0:	7a 95       	dec	r23
    5aa2:	e1 f7       	brne	.-8      	; 0x5a9c <ProcessSprites+0x70>
    5aa4:	64 2e       	mov	r6, r20
				dx=ssx&0x7;
    5aa6:	87 70       	andi	r24, 0x07	; 7
				if(dx>0) tx++;
    5aa8:	11 f0       	breq	.+4      	; 0x5aae <ProcessSprites+0x82>
    5aaa:	92 e0       	ldi	r25, 0x02	; 2
    5aac:	01 c0       	rjmp	.+2      	; 0x5ab0 <ProcessSprites+0x84>
   				#else
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
    5aae:	91 e0       	ldi	r25, 0x01	; 1
    5ab0:	99 83       	std	Y+1, r25	; 0x01
				dx=ssx&0x7;
				if(dx>0) tx++;

				//by=ssy>>3;
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
    5ab2:	a9 01       	movw	r20, r18
    5ab4:	63 e0       	ldi	r22, 0x03	; 3
    5ab6:	56 95       	lsr	r21
    5ab8:	47 95       	ror	r20
    5aba:	6a 95       	dec	r22
    5abc:	e1 f7       	brne	.-8      	; 0x5ab6 <ProcessSprites+0x8a>
    5abe:	54 2e       	mov	r5, r20
				dy=ssy%TILE_HEIGHT;
    5ac0:	27 70       	andi	r18, 0x07	; 7
				if(dy>0) ty++;			
    5ac2:	19 f0       	breq	.+6      	; 0x5aca <ProcessSprites+0x9e>
    5ac4:	52 e0       	ldi	r21, 0x02	; 2
    5ac6:	35 2e       	mov	r3, r21
    5ac8:	02 c0       	rjmp	.+4      	; 0x5ace <ProcessSprites+0xa2>
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
				ty=1;
    5aca:	33 24       	eor	r3, r3
    5acc:	33 94       	inc	r3
								bt=free_tile_index;
								free_tile_index++;
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    5ace:	30 e0       	ldi	r19, 0x00	; 0
    5ad0:	32 2f       	mov	r19, r18
    5ad2:	22 27       	eor	r18, r18
    5ad4:	f9 01       	movw	r30, r18
    5ad6:	e8 0f       	add	r30, r24
    5ad8:	f1 1d       	adc	r31, r1
    5ada:	fc 83       	std	Y+4, r31	; 0x04
    5adc:	eb 83       	std	Y+3, r30	; 0x03
    5ade:	e1 2c       	mov	r14, r1
    5ae0:	f1 2c       	mov	r15, r1
    5ae2:	be 2c       	mov	r11, r14
    5ae4:	aa 24       	eor	r10, r10
    5ae6:	26 2c       	mov	r2, r6
    5ae8:	45 2c       	mov	r4, r5
    5aea:	4e 0c       	add	r4, r14
								    wy-=(VRAM_TILES_V*2);
							    }else if(wy>=VRAM_TILES_V){
							    	wy-=VRAM_TILES_V;
							    }
                            #else
                                if(wy>=(Screen.scrollHeight*2)){
    5aec:	84 2c       	mov	r8, r4
    5aee:	91 2c       	mov	r9, r1
    5af0:	84 2d       	mov	r24, r4
    5af2:	20 91 9e 0c 	lds	r18, 0x0C9E
    5af6:	42 2f       	mov	r20, r18
    5af8:	50 e0       	ldi	r21, 0x00	; 0
    5afa:	44 0f       	add	r20, r20
    5afc:	55 1f       	adc	r21, r21
    5afe:	84 16       	cp	r8, r20
    5b00:	95 06       	cpc	r9, r21
    5b02:	14 f0       	brlt	.+4      	; 0x5b08 <ProcessSprites+0xdc>
								    wy-=(Screen.scrollHeight*2);
    5b04:	22 0f       	add	r18, r18
    5b06:	03 c0       	rjmp	.+6      	; 0x5b0e <ProcessSprites+0xe2>
							    }else if(wy>=Screen.scrollHeight){
    5b08:	42 16       	cp	r4, r18
    5b0a:	10 f0       	brcs	.+4      	; 0x5b10 <ProcessSprites+0xe4>
							    	wy-=Screen.scrollHeight;
    5b0c:	84 2d       	mov	r24, r4
    5b0e:	82 1b       	sub	r24, r18
							    }
                            #endif
							if(wx>=VRAM_TILES_H)wx-=VRAM_TILES_H; //should always be 32
    5b10:	ff e1       	ldi	r31, 0x1F	; 31
    5b12:	f2 15       	cp	r31, r2
    5b14:	18 f4       	brcc	.+6      	; 0x5b1c <ProcessSprites+0xf0>
    5b16:	00 ee       	ldi	r16, 0xE0	; 224
    5b18:	02 0d       	add	r16, r2
    5b1a:	01 c0       	rjmp	.+2      	; 0x5b1e <ProcessSprites+0xf2>
    5b1c:	02 2d       	mov	r16, r2

							#if SCROLLING == 0
								ramPtr=(wy*VRAM_TILES_H)+wx;
							#else

								ramPtr=((wy>>3)*256)+(wx*8)+(wy&7);	
    5b1e:	28 2f       	mov	r18, r24
    5b20:	26 95       	lsr	r18
    5b22:	26 95       	lsr	r18
    5b24:	26 95       	lsr	r18
    5b26:	10 e0       	ldi	r17, 0x00	; 0
    5b28:	40 e2       	ldi	r20, 0x20	; 32
    5b2a:	24 9f       	mul	r18, r20
    5b2c:	00 0d       	add	r16, r0
    5b2e:	11 1d       	adc	r17, r1
    5b30:	11 24       	eor	r1, r1
    5b32:	23 e0       	ldi	r18, 0x03	; 3
    5b34:	00 0f       	add	r16, r16
    5b36:	11 1f       	adc	r17, r17
    5b38:	2a 95       	dec	r18
    5b3a:	e1 f7       	brne	.-8      	; 0x5b34 <ProcessSprites+0x108>
    5b3c:	87 70       	andi	r24, 0x07	; 7
    5b3e:	08 0f       	add	r16, r24
    5b40:	11 1d       	adc	r17, r1

							#endif

							bt=vram[ramPtr];						
    5b42:	00 50       	subi	r16, 0x00	; 0
    5b44:	1f 4f       	sbci	r17, 0xFF	; 255
    5b46:	f8 01       	movw	r30, r16
    5b48:	70 81       	ld	r23, Z

							if( ((bt>=RAM_TILES_COUNT) | (bt<userRamTilesCount)) && (free_tile_index < RAM_TILES_COUNT) ){ //if no ram free ignore tile
    5b4a:	81 e0       	ldi	r24, 0x01	; 1
    5b4c:	7c 31       	cpi	r23, 0x1C	; 28
    5b4e:	08 f4       	brcc	.+2      	; 0x5b52 <ProcessSprites+0x126>
    5b50:	80 e0       	ldi	r24, 0x00	; 0
    5b52:	21 e0       	ldi	r18, 0x01	; 1
    5b54:	30 91 db 0c 	lds	r19, 0x0CDB
    5b58:	73 17       	cp	r23, r19
    5b5a:	18 f0       	brcs	.+6      	; 0x5b62 <ProcessSprites+0x136>
    5b5c:	20 e0       	ldi	r18, 0x00	; 0
    5b5e:	88 23       	and	r24, r24
    5b60:	51 f1       	breq	.+84     	; 0x5bb6 <ProcessSprites+0x18a>
    5b62:	60 91 6b 0d 	lds	r22, 0x0D6B
    5b66:	6c 31       	cpi	r22, 0x1C	; 28
    5b68:	20 f5       	brcc	.+72     	; 0x5bb2 <ProcessSprites+0x186>
								if( bt>=RAM_TILES_COUNT ){
    5b6a:	88 23       	and	r24, r24
    5b6c:	31 f0       	breq	.+12     	; 0x5b7a <ProcessSprites+0x14e>
									//tile is mapped to flash. Copy it to next free RAM tile.
									CopyFlashTile(bt-RAM_TILES_COUNT,free_tile_index);
    5b6e:	84 ee       	ldi	r24, 0xE4	; 228
    5b70:	87 0f       	add	r24, r23
    5b72:	7a 83       	std	Y+2, r23	; 0x02
    5b74:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <CopyFlashTile>
    5b78:	06 c0       	rjmp	.+12     	; 0x5b86 <ProcessSprites+0x15a>
								}else if(bt<userRamTilesCount){
    5b7a:	22 23       	and	r18, r18
    5b7c:	29 f0       	breq	.+10     	; 0x5b88 <ProcessSprites+0x15c>
									//tile is a user ram tile. Copy it to next free RAM tile.
									CopyRamTile(bt,free_tile_index);
    5b7e:	87 2f       	mov	r24, r23
    5b80:	7a 83       	std	Y+2, r23	; 0x02
    5b82:	0e 94 66 1e 	call	0x3ccc	; 0x3ccc <CopyRamTile>
    5b86:	7a 81       	ldd	r23, Y+2	; 0x02
								}
								ram_tiles_restore[free_tile_index].addr=(&vram[ramPtr]);
    5b88:	80 91 6b 0d 	lds	r24, 0x0D6B
    5b8c:	e8 2f       	mov	r30, r24
    5b8e:	f0 e0       	ldi	r31, 0x00	; 0
    5b90:	9f 01       	movw	r18, r30
    5b92:	22 0f       	add	r18, r18
    5b94:	33 1f       	adc	r19, r19
    5b96:	e2 0f       	add	r30, r18
    5b98:	f3 1f       	adc	r31, r19
    5b9a:	e6 5c       	subi	r30, 0xC6	; 198
    5b9c:	f3 4f       	sbci	r31, 0xF3	; 243
    5b9e:	11 83       	std	Z+1, r17	; 0x01
    5ba0:	00 83       	st	Z, r16
								ram_tiles_restore[free_tile_index].tileIndex=bt;
    5ba2:	72 83       	std	Z+2, r23	; 0x02
								vram[ramPtr]=free_tile_index;
    5ba4:	f8 01       	movw	r30, r16
    5ba6:	80 83       	st	Z, r24
								bt=free_tile_index;
								free_tile_index++;
    5ba8:	21 e0       	ldi	r18, 0x01	; 1
    5baa:	28 0f       	add	r18, r24
    5bac:	20 93 6b 0d 	sts	0x0D6B, r18
									CopyRamTile(bt,free_tile_index);
								}
								ram_tiles_restore[free_tile_index].addr=(&vram[ramPtr]);
								ram_tiles_restore[free_tile_index].tileIndex=bt;
								vram[ramPtr]=free_tile_index;
								bt=free_tile_index;
    5bb0:	78 2f       	mov	r23, r24
								free_tile_index++;
							}
				
							if(bt<RAM_TILES_COUNT){				
    5bb2:	7c 31       	cpi	r23, 0x1C	; 28
    5bb4:	38 f4       	brcc	.+14     	; 0x5bc4 <ProcessSprites+0x198>
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    5bb6:	2b 81       	ldd	r18, Y+3	; 0x03
    5bb8:	3c 81       	ldd	r19, Y+4	; 0x04
    5bba:	a5 01       	movw	r20, r10
    5bbc:	67 2f       	mov	r22, r23
    5bbe:	87 2d       	mov	r24, r7
    5bc0:	0e 94 f3 1e 	call	0x3de6	; 0x3de6 <BlitSprite>
    5bc4:	ff ef       	ldi	r31, 0xFF	; 255
    5bc6:	af 1a       	sub	r10, r31
    5bc8:	bf 0a       	sbc	r11, r31
    5bca:	23 94       	inc	r2
    5bcc:	82 2d       	mov	r24, r2
    5bce:	86 19       	sub	r24, r6
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){

					for(x=0;x<tx;x++){
    5bd0:	99 81       	ldd	r25, Y+1	; 0x01
    5bd2:	89 17       	cp	r24, r25
    5bd4:	08 f4       	brcc	.+2      	; 0x5bd8 <ProcessSprites+0x1ac>
    5bd6:	8c cf       	rjmp	.-232    	; 0x5af0 <ProcessSprites+0xc4>
    5bd8:	ef ef       	ldi	r30, 0xFF	; 255
    5bda:	ee 1a       	sub	r14, r30
    5bdc:	fe 0a       	sbc	r15, r30
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){
    5bde:	e3 14       	cp	r14, r3
    5be0:	08 f4       	brcc	.+2      	; 0x5be4 <ProcessSprites+0x1b8>
    5be2:	7f cf       	rjmp	.-258    	; 0x5ae2 <ProcessSprites+0xb6>
		if(!spritesOn) return;

		userRamTilesCount=userRamTilesCount_tmp;
		free_tile_index=userRamTilesCount;
	
		for(i=0;i<MAX_SPRITES;i++){
    5be4:	73 94       	inc	r7
    5be6:	f4 e0       	ldi	r31, 0x04	; 4
    5be8:	cf 0e       	add	r12, r31
    5bea:	d1 1c       	adc	r13, r1
    5bec:	4e e0       	ldi	r20, 0x0E	; 14
    5bee:	74 12       	cpse	r7, r20
    5bf0:	43 cf       	rjmp	.-378    	; 0x5a78 <ProcessSprites+0x4c>


		//restore BG tiles
		RestoreBackground();

	}
    5bf2:	0f 90       	pop	r0
    5bf4:	0f 90       	pop	r0
    5bf6:	0f 90       	pop	r0
    5bf8:	0f 90       	pop	r0
    5bfa:	df 91       	pop	r29
    5bfc:	cf 91       	pop	r28
    5bfe:	1f 91       	pop	r17
    5c00:	0f 91       	pop	r16
    5c02:	ff 90       	pop	r15
    5c04:	ef 90       	pop	r14
    5c06:	df 90       	pop	r13
    5c08:	cf 90       	pop	r12
    5c0a:	bf 90       	pop	r11
    5c0c:	af 90       	pop	r10
    5c0e:	9f 90       	pop	r9
    5c10:	8f 90       	pop	r8
    5c12:	7f 90       	pop	r7
    5c14:	6f 90       	pop	r6
    5c16:	5f 90       	pop	r5
    5c18:	4f 90       	pop	r4
    5c1a:	3f 90       	pop	r3
    5c1c:	2f 90       	pop	r2
			}//	if(bx<(SCREEN_TILES_H*TILE_WIDTH))		
		}


		//restore BG tiles
		RestoreBackground();
    5c1e:	0c 94 00 2d 	jmp	0x5a00	; 0x5a00 <RestoreBackground>

	}
    5c22:	0f 90       	pop	r0
    5c24:	0f 90       	pop	r0
    5c26:	0f 90       	pop	r0
    5c28:	0f 90       	pop	r0
    5c2a:	df 91       	pop	r29
    5c2c:	cf 91       	pop	r28
    5c2e:	1f 91       	pop	r17
    5c30:	0f 91       	pop	r16
    5c32:	ff 90       	pop	r15
    5c34:	ef 90       	pop	r14
    5c36:	df 90       	pop	r13
    5c38:	cf 90       	pop	r12
    5c3a:	bf 90       	pop	r11
    5c3c:	af 90       	pop	r10
    5c3e:	9f 90       	pop	r9
    5c40:	8f 90       	pop	r8
    5c42:	7f 90       	pop	r7
    5c44:	6f 90       	pop	r6
    5c46:	5f 90       	pop	r5
    5c48:	4f 90       	pop	r4
    5c4a:	3f 90       	pop	r3
    5c4c:	2f 90       	pop	r2
    5c4e:	08 95       	ret

00005c50 <Scroll>:

	#if SCROLLING == 1
		//Scroll the screen by the relative amount specified (+/-)
		//This function handles screen wrapping on the Y axis if VRAM_TILES_V is less than 32
		void Scroll(char dx,char dy){
		Screen.scrollY+=dy;
    5c50:	90 91 9d 0c 	lds	r25, 0x0C9D
    5c54:	96 0f       	add	r25, r22
    5c56:	90 93 9d 0c 	sts	0x0C9D, r25
		Screen.scrollX+=dx;
    5c5a:	20 91 9c 0c 	lds	r18, 0x0C9C
    5c5e:	82 0f       	add	r24, r18
    5c60:	80 93 9c 0c 	sts	0x0C9C, r24

		if(Screen.scrollHeight<32){
    5c64:	80 91 9e 0c 	lds	r24, 0x0C9E
    5c68:	80 32       	cpi	r24, 0x20	; 32
    5c6a:	b0 f4       	brcc	.+44     	; 0x5c98 <Scroll+0x48>

			if(Screen.scrollY>=(Screen.scrollHeight*TILE_HEIGHT)){
    5c6c:	29 2f       	mov	r18, r25
    5c6e:	30 e0       	ldi	r19, 0x00	; 0
    5c70:	78 e0       	ldi	r23, 0x08	; 8
    5c72:	87 9f       	mul	r24, r23
    5c74:	a0 01       	movw	r20, r0
    5c76:	11 24       	eor	r1, r1
    5c78:	24 17       	cp	r18, r20
    5c7a:	35 07       	cpc	r19, r21
    5c7c:	6c f0       	brlt	.+26     	; 0x5c98 <Scroll+0x48>
				if(dy>=0){	
    5c7e:	67 fd       	sbrc	r22, 7
    5c80:	05 c0       	rjmp	.+10     	; 0x5c8c <Scroll+0x3c>
					Screen.scrollY=(Screen.scrollY-(Screen.scrollHeight*TILE_HEIGHT));
    5c82:	28 ef       	ldi	r18, 0xF8	; 248
    5c84:	82 9f       	mul	r24, r18
    5c86:	90 0d       	add	r25, r0
    5c88:	11 24       	eor	r1, r1
    5c8a:	04 c0       	rjmp	.+8      	; 0x5c94 <Scroll+0x44>
				}else{
					Screen.scrollY=((Screen.scrollHeight*TILE_HEIGHT)-1)-(0xff-Screen.scrollY);
    5c8c:	78 e0       	ldi	r23, 0x08	; 8
    5c8e:	87 9f       	mul	r24, r23
    5c90:	90 0d       	add	r25, r0
    5c92:	11 24       	eor	r1, r1
    5c94:	90 93 9d 0c 	sts	0x0C9D, r25
    5c98:	08 95       	ret

00005c9a <InitializeVideoMode>:
		#endif	
	}


	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){
    5c9a:	e2 e0       	ldi	r30, 0x02	; 2
    5c9c:	f5 e0       	ldi	r31, 0x05	; 5

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
			sprites[i].x=(SCREEN_TILES_H*TILE_WIDTH);		
    5c9e:	80 ee       	ldi	r24, 0xE0	; 224
    5ca0:	80 83       	st	Z, r24
    5ca2:	34 96       	adiw	r30, 0x04	; 4

	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
    5ca4:	95 e0       	ldi	r25, 0x05	; 5
    5ca6:	ea 33       	cpi	r30, 0x3A	; 58
    5ca8:	f9 07       	cpc	r31, r25
    5caa:	d1 f7       	brne	.-12     	; 0x5ca0 <InitializeVideoMode+0x6>
		
		#if SCROLLING == 1
		//	for(int i=0;i<(OVERLAY_LINES*VRAM_TILES_H);i++){
		//		overlay_vram[i]=RAM_TILES_COUNT;
		//	}
			Screen.scrollHeight=VRAM_TILES_V;
    5cac:	80 e2       	ldi	r24, 0x20	; 32
    5cae:	80 93 9e 0c 	sts	0x0C9E, r24
			Screen.overlayHeight=0;
    5cb2:	10 92 99 0c 	sts	0x0C99, r1
    5cb6:	08 95       	ret

00005cb8 <DrawMap>:



//Draws a map of tile at the specified position
#if VRAM_ADDR_SIZE == 1
	void DrawMap(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
    5cb8:	4f 92       	push	r4
    5cba:	5f 92       	push	r5
    5cbc:	6f 92       	push	r6
    5cbe:	7f 92       	push	r7
    5cc0:	8f 92       	push	r8
    5cc2:	9f 92       	push	r9
    5cc4:	af 92       	push	r10
    5cc6:	bf 92       	push	r11
    5cc8:	cf 92       	push	r12
    5cca:	df 92       	push	r13
    5ccc:	ef 92       	push	r14
    5cce:	ff 92       	push	r15
    5cd0:	0f 93       	push	r16
    5cd2:	1f 93       	push	r17
    5cd4:	cf 93       	push	r28
    5cd6:	df 93       	push	r29
    5cd8:	68 2e       	mov	r6, r24
    5cda:	56 2e       	mov	r5, r22
    5cdc:	7a 01       	movw	r14, r20
		//unsigned char i;
		u8 mapWidth=pgm_read_byte(&(map[0]));
    5cde:	fa 01       	movw	r30, r20
    5ce0:	74 90       	lpm	r7, Z
		u8 mapHeight=pgm_read_byte(&(map[1]));
    5ce2:	31 96       	adiw	r30, 0x01	; 1
    5ce4:	84 90       	lpm	r8, Z
    5ce6:	c7 2c       	mov	r12, r7
    5ce8:	d1 2c       	mov	r13, r1
		
		for(u8 dy=0;dy<mapHeight;dy++){
    5cea:	00 e0       	ldi	r16, 0x00	; 0
    5cec:	10 e0       	ldi	r17, 0x00	; 0
    5cee:	91 2c       	mov	r9, r1
    5cf0:	98 14       	cp	r9, r8
    5cf2:	f1 f0       	breq	.+60     	; 0x5d30 <DrawMap+0x78>
    5cf4:	c0 e0       	ldi	r28, 0x00	; 0
    5cf6:	d0 e0       	ldi	r29, 0x00	; 0
    5cf8:	58 01       	movw	r10, r16
    5cfa:	f2 e0       	ldi	r31, 0x02	; 2
    5cfc:	af 0e       	add	r10, r31
    5cfe:	b1 1c       	adc	r11, r1
    5d00:	49 2c       	mov	r4, r9
    5d02:	45 0c       	add	r4, r5
			for(u8 dx=0;dx<mapWidth;dx++){			
    5d04:	c7 15       	cp	r28, r7
    5d06:	80 f4       	brcc	.+32     	; 0x5d28 <DrawMap+0x70>
    5d08:	95 01       	movw	r18, r10
    5d0a:	2c 0f       	add	r18, r28
    5d0c:	3d 1f       	adc	r19, r29
    5d0e:	f7 01       	movw	r30, r14
    5d10:	e2 0f       	add	r30, r18
    5d12:	f3 1f       	adc	r31, r19
				SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
    5d14:	24 91       	lpm	r18, Z
    5d16:	42 2f       	mov	r20, r18
    5d18:	50 e0       	ldi	r21, 0x00	; 0
    5d1a:	64 2d       	mov	r22, r4
    5d1c:	8c 2f       	mov	r24, r28
    5d1e:	86 0d       	add	r24, r6
    5d20:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetTile>
    5d24:	21 96       	adiw	r28, 0x01	; 1
    5d26:	ee cf       	rjmp	.-36     	; 0x5d04 <DrawMap+0x4c>
	void DrawMap(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
		//unsigned char i;
		u8 mapWidth=pgm_read_byte(&(map[0]));
		u8 mapHeight=pgm_read_byte(&(map[1]));
		
		for(u8 dy=0;dy<mapHeight;dy++){
    5d28:	93 94       	inc	r9
    5d2a:	0c 0d       	add	r16, r12
    5d2c:	1d 1d       	adc	r17, r13
    5d2e:	e0 cf       	rjmp	.-64     	; 0x5cf0 <DrawMap+0x38>
			for(u8 dx=0;dx<mapWidth;dx++){			
				SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
			}
		}

	}
    5d30:	df 91       	pop	r29
    5d32:	cf 91       	pop	r28
    5d34:	1f 91       	pop	r17
    5d36:	0f 91       	pop	r16
    5d38:	ff 90       	pop	r15
    5d3a:	ef 90       	pop	r14
    5d3c:	df 90       	pop	r13
    5d3e:	cf 90       	pop	r12
    5d40:	bf 90       	pop	r11
    5d42:	af 90       	pop	r10
    5d44:	9f 90       	pop	r9
    5d46:	8f 90       	pop	r8
    5d48:	7f 90       	pop	r7
    5d4a:	6f 90       	pop	r6
    5d4c:	5f 90       	pop	r5
    5d4e:	4f 90       	pop	r4
    5d50:	08 95       	ret

00005d52 <Print>:
	PrintHexByte(x+4,y, value>>8);
	PrintHexByte(x+6,y,value&0xff);
}

//Print a string from flash
void Print(int x,int y,const char *string){
    5d52:	0f 93       	push	r16
    5d54:	1f 93       	push	r17
    5d56:	cf 93       	push	r28
    5d58:	df 93       	push	r29
    5d5a:	06 2f       	mov	r16, r22
    5d5c:	c4 2f       	mov	r28, r20
    5d5e:	d5 2f       	mov	r29, r21
    5d60:	18 2f       	mov	r17, r24
    5d62:	14 1b       	sub	r17, r20

	int i=0;
	char c;

	while(1){
		c=pgm_read_byte(&(string[i++]));		
    5d64:	fe 01       	movw	r30, r28
    5d66:	44 91       	lpm	r20, Z
		if(c!=0){
    5d68:	44 23       	and	r20, r20
    5d6a:	49 f0       	breq	.+18     	; 0x5d7e <Print+0x2c>
			c=((c&127)-32);			
    5d6c:	4f 77       	andi	r20, 0x7F	; 127
    5d6e:	40 52       	subi	r20, 0x20	; 32
			SetFont(x++,y,c);
    5d70:	60 2f       	mov	r22, r16
    5d72:	8c 2f       	mov	r24, r28
    5d74:	81 0f       	add	r24, r17
    5d76:	0e 94 26 21 	call	0x424c	; 0x424c <SetFont>
    5d7a:	21 96       	adiw	r28, 0x01	; 1
		}else{
			break;
		}
	}
    5d7c:	f3 cf       	rjmp	.-26     	; 0x5d64 <Print+0x12>
	
}
    5d7e:	df 91       	pop	r29
    5d80:	cf 91       	pop	r28
    5d82:	1f 91       	pop	r17
    5d84:	0f 91       	pop	r16
    5d86:	08 95       	ret

00005d88 <WaitVsync>:
		}
	}
}

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
    5d88:	0f 93       	push	r16
    5d8a:	1f 93       	push	r17
    5d8c:	cf 93       	push	r28
    5d8e:	df 93       	push	r29
    5d90:	8c 01       	movw	r16, r24
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    5d92:	c0 e0       	ldi	r28, 0x00	; 0
    5d94:	d0 e0       	ldi	r29, 0x00	; 0
    5d96:	c0 17       	cp	r28, r16
    5d98:	d1 07       	cpc	r29, r17
    5d9a:	44 f4       	brge	.+16     	; 0x5dac <WaitVsync+0x24>
		while(!GetVsyncFlag());
    5d9c:	0e 94 43 21 	call	0x4286	; 0x4286 <GetVsyncFlag>
    5da0:	88 23       	and	r24, r24
    5da2:	e1 f3       	breq	.-8      	; 0x5d9c <WaitVsync+0x14>
		ClearVsyncFlag();		
    5da4:	0e 94 47 21 	call	0x428e	; 0x428e <ClearVsyncFlag>

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    5da8:	21 96       	adiw	r28, 0x01	; 1
    5daa:	f5 cf       	rjmp	.-22     	; 0x5d96 <WaitVsync+0xe>
		while(!GetVsyncFlag());
		ClearVsyncFlag();		
	}
}
    5dac:	df 91       	pop	r29
    5dae:	cf 91       	pop	r28
    5db0:	1f 91       	pop	r17
    5db2:	0f 91       	pop	r16
    5db4:	08 95       	ret

00005db6 <DisplayLogo>:
	void DisplayLogo(){
	
		#if INTRO_LOGO !=0
			#define LOGO_X_POS 12
			
			InitMusicPlayer(logoInitPatches);
    5db6:	8d e1       	ldi	r24, 0x1D	; 29
    5db8:	99 e0       	ldi	r25, 0x09	; 9
    5dba:	0e 94 f3 22 	call	0x45e6	; 0x45e6 <InitMusicPlayer>
			SetTileTable(logo_tileset);
    5dbe:	8d e1       	ldi	r24, 0x1D	; 29
    5dc0:	91 e0       	ldi	r25, 0x01	; 1
    5dc2:	0e 94 3e 21 	call	0x427c	; 0x427c <SetTileTable>
			
			//draw logo
			ClearVram();
    5dc6:	0e 94 1c 21 	call	0x4238	; 0x4238 <ClearVram>
			WaitVsync(15);		
    5dca:	8f e0       	ldi	r24, 0x0F	; 15
    5dcc:	90 e0       	ldi	r25, 0x00	; 0
    5dce:	0e 94 c4 2e 	call	0x5d88	; 0x5d88 <WaitVsync>


			#if INTRO_LOGO == 1 
				TriggerFx(0,0xff,true);
    5dd2:	41 e0       	ldi	r20, 0x01	; 1
    5dd4:	6f ef       	ldi	r22, 0xFF	; 255
    5dd6:	80 e0       	ldi	r24, 0x00	; 0
    5dd8:	0e 94 c9 23 	call	0x4792	; 0x4792 <TriggerFx>
			#endif

			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo);
    5ddc:	47 e0       	ldi	r20, 0x07	; 7
    5dde:	51 e0       	ldi	r21, 0x01	; 1
    5de0:	6c e0       	ldi	r22, 0x0C	; 12
    5de2:	8c e0       	ldi	r24, 0x0C	; 12
    5de4:	0e 94 5c 2e 	call	0x5cb8	; 0x5cb8 <DrawMap>
			WaitVsync(3);
    5de8:	83 e0       	ldi	r24, 0x03	; 3
    5dea:	90 e0       	ldi	r25, 0x00	; 0
    5dec:	0e 94 c4 2e 	call	0x5d88	; 0x5d88 <WaitVsync>
			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo2);
    5df0:	46 ef       	ldi	r20, 0xF6	; 246
    5df2:	50 e0       	ldi	r21, 0x00	; 0
    5df4:	6c e0       	ldi	r22, 0x0C	; 12
    5df6:	8c e0       	ldi	r24, 0x0C	; 12
    5df8:	0e 94 5c 2e 	call	0x5cb8	; 0x5cb8 <DrawMap>
			WaitVsync(2);
    5dfc:	82 e0       	ldi	r24, 0x02	; 2
    5dfe:	90 e0       	ldi	r25, 0x00	; 0
    5e00:	0e 94 c4 2e 	call	0x5d88	; 0x5d88 <WaitVsync>
			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo);
    5e04:	47 e0       	ldi	r20, 0x07	; 7
    5e06:	51 e0       	ldi	r21, 0x01	; 1
    5e08:	6c e0       	ldi	r22, 0x0C	; 12
    5e0a:	8c e0       	ldi	r24, 0x0C	; 12
    5e0c:	0e 94 5c 2e 	call	0x5cb8	; 0x5cb8 <DrawMap>
			#if INTRO_LOGO == 2
				SetMasterVolume(0xc0);
				TriggerNote(3,0,16,0xff);
			#endif 
		
			WaitVsync(65);
    5e10:	81 e4       	ldi	r24, 0x41	; 65
    5e12:	90 e0       	ldi	r25, 0x00	; 0
    5e14:	0e 94 c4 2e 	call	0x5d88	; 0x5d88 <WaitVsync>
			ClearVram();
    5e18:	0e 94 1c 21 	call	0x4238	; 0x4238 <ClearVram>
			WaitVsync(20);
    5e1c:	84 e1       	ldi	r24, 0x14	; 20
    5e1e:	90 e0       	ldi	r25, 0x00	; 0
    5e20:	0c 94 c4 2e 	jmp	0x5d88	; 0x5d88 <WaitVsync>

00005e24 <doFade>:
char fadeDir;
bool volatile fadeActive;


void doFade(unsigned char speed,bool blocking){
	fadeSpeed=speed;
    5e24:	80 93 69 0d 	sts	0x0D69, r24
	currFadeFrame=0;
    5e28:	10 92 6d 0d 	sts	0x0D6D, r1
	fadeActive=true;
    5e2c:	81 e0       	ldi	r24, 0x01	; 1
    5e2e:	80 93 6c 0d 	sts	0x0D6C, r24
		
	if(blocking){
    5e32:	66 23       	and	r22, r22
    5e34:	21 f0       	breq	.+8      	; 0x5e3e <doFade+0x1a>
		while(fadeActive==true);
    5e36:	80 91 6c 0d 	lds	r24, 0x0D6C
    5e3a:	81 11       	cpse	r24, r1
    5e3c:	fc cf       	rjmp	.-8      	; 0x5e36 <doFade+0x12>
    5e3e:	08 95       	ret

00005e40 <FadeIn>:
	
	
}

void FadeIn(unsigned char speed,bool blocking){
	if(speed==0){
    5e40:	81 11       	cpse	r24, r1
    5e42:	03 c0       	rjmp	.+6      	; 0x5e4a <FadeIn+0xa>
		DDRC=0xff;
    5e44:	8f ef       	ldi	r24, 0xFF	; 255
    5e46:	87 b9       	out	0x07, r24	; 7
		return;
    5e48:	08 95       	ret
	}
	fadeStep=1;
    5e4a:	91 e0       	ldi	r25, 0x01	; 1
    5e4c:	90 93 6e 0d 	sts	0x0D6E, r25
	fadeDir=1;
    5e50:	90 93 6a 0d 	sts	0x0D6A, r25
	doFade(speed,blocking);
    5e54:	0c 94 12 2f 	jmp	0x5e24	; 0x5e24 <doFade>

00005e58 <FadeOut>:
}

void FadeOut(unsigned char speed,bool blocking){
	if(speed==0){
    5e58:	81 11       	cpse	r24, r1
    5e5a:	02 c0       	rjmp	.+4      	; 0x5e60 <FadeOut+0x8>
		DDRC=0;
    5e5c:	17 b8       	out	0x07, r1	; 7
		return;
    5e5e:	08 95       	ret
	}
	
	fadeStep=FADER_STEPS;
    5e60:	9c e0       	ldi	r25, 0x0C	; 12
    5e62:	90 93 6e 0d 	sts	0x0D6E, r25
	fadeDir=-1;
    5e66:	9f ef       	ldi	r25, 0xFF	; 255
    5e68:	90 93 6a 0d 	sts	0x0D6A, r25
	doFade(speed,blocking);
    5e6c:	0c 94 12 2f 	jmp	0x5e24	; 0x5e24 <doFade>

00005e70 <ProcessFading>:
}


//called by the kernel at each field end
void ProcessFading(){
	if(fadeActive==true){
    5e70:	80 91 6c 0d 	lds	r24, 0x0D6C
    5e74:	88 23       	and	r24, r24
    5e76:	01 f1       	breq	.+64     	; 0x5eb8 <ProcessFading+0x48>
		if(currFadeFrame==0){
    5e78:	80 91 6d 0d 	lds	r24, 0x0D6D
    5e7c:	81 11       	cpse	r24, r1
    5e7e:	19 c0       	rjmp	.+50     	; 0x5eb2 <ProcessFading+0x42>
			currFadeFrame=fadeSpeed;
    5e80:	80 91 69 0d 	lds	r24, 0x0D69
    5e84:	80 93 6d 0d 	sts	0x0D6D, r24
			DDRC = pgm_read_byte(&(fader[fadeStep-1]));
    5e88:	e0 91 6e 0d 	lds	r30, 0x0D6E
    5e8c:	f0 e0       	ldi	r31, 0x00	; 0
    5e8e:	e7 51       	subi	r30, 0x17	; 23
    5e90:	ff 4f       	sbci	r31, 0xFF	; 255
    5e92:	e4 91       	lpm	r30, Z
    5e94:	e7 b9       	out	0x07, r30	; 7
			fadeStep+=fadeDir;
    5e96:	90 91 6a 0d 	lds	r25, 0x0D6A
    5e9a:	80 91 6e 0d 	lds	r24, 0x0D6E
    5e9e:	89 0f       	add	r24, r25
    5ea0:	80 93 6e 0d 	sts	0x0D6E, r24
			if(fadeStep==0 || fadeStep==(FADER_STEPS+1)){
    5ea4:	88 23       	and	r24, r24
    5ea6:	11 f0       	breq	.+4      	; 0x5eac <ProcessFading+0x3c>
    5ea8:	8d 30       	cpi	r24, 0x0D	; 13
    5eaa:	31 f4       	brne	.+12     	; 0x5eb8 <ProcessFading+0x48>
				fadeActive=false;
    5eac:	10 92 6c 0d 	sts	0x0D6C, r1
    5eb0:	08 95       	ret
			}
		}else{
			currFadeFrame--;
    5eb2:	81 50       	subi	r24, 0x01	; 1
    5eb4:	80 93 6d 0d 	sts	0x0D6D, r24
    5eb8:	08 95       	ret

00005eba <VideoModeVsync>:
	}

	//Callback invoked during hsync
	void VideoModeVsync(){
		
		ProcessFading();
    5eba:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <ProcessFading>
		ProcessSprites();
    5ebe:	0c 94 16 2d 	jmp	0x5a2c	; 0x5a2c <ProcessSprites>

00005ec2 <LBGetNextFrame>:
	u8 reversing;
	char** anims;
} Animation;

char* LBGetNextFrame(Animation* anim)
{
    5ec2:	fc 01       	movw	r30, r24
	anim->looped = 0;
    5ec4:	14 82       	std	Z+4, r1	; 0x04
	anim->frame_count += 1;
    5ec6:	93 81       	ldd	r25, Z+3	; 0x03
    5ec8:	9f 5f       	subi	r25, 0xFF	; 255
    5eca:	93 83       	std	Z+3, r25	; 0x03
	if (anim->frame_count < anim->frames_per_anim)
    5ecc:	42 81       	ldd	r20, Z+2	; 0x02
    5ece:	80 81       	ld	r24, Z
    5ed0:	26 81       	ldd	r18, Z+6	; 0x06
    5ed2:	37 81       	ldd	r19, Z+7	; 0x07
    5ed4:	94 17       	cp	r25, r20
    5ed6:	30 f4       	brcc	.+12     	; 0x5ee4 <LBGetNextFrame+0x22>
	{
		return anim->anims[anim->current_anim];
    5ed8:	f9 01       	movw	r30, r18
    5eda:	e8 0f       	add	r30, r24
    5edc:	f1 1d       	adc	r31, r1
    5ede:	e8 0f       	add	r30, r24
    5ee0:	f1 1d       	adc	r31, r1
    5ee2:	12 c0       	rjmp	.+36     	; 0x5f08 <LBGetNextFrame+0x46>
	}
	anim->frame_count = 0;
    5ee4:	13 82       	std	Z+3, r1	; 0x03
	anim->current_anim = (anim->current_anim + 1) % anim->anim_count;
    5ee6:	90 e0       	ldi	r25, 0x00	; 0
    5ee8:	01 96       	adiw	r24, 0x01	; 1
    5eea:	61 81       	ldd	r22, Z+1	; 0x01
    5eec:	70 e0       	ldi	r23, 0x00	; 0
    5eee:	0e 94 ab 34 	call	0x6956	; 0x6956 <__divmodhi4>
    5ef2:	80 83       	st	Z, r24
	if (anim->current_anim == 0) anim->looped = 1;
    5ef4:	81 11       	cpse	r24, r1
    5ef6:	02 c0       	rjmp	.+4      	; 0x5efc <LBGetNextFrame+0x3a>
    5ef8:	41 e0       	ldi	r20, 0x01	; 1
    5efa:	44 83       	std	Z+4, r20	; 0x04
    5efc:	99 27       	eor	r25, r25
	return anim->anims[anim->current_anim];
    5efe:	88 0f       	add	r24, r24
    5f00:	99 1f       	adc	r25, r25
    5f02:	f9 01       	movw	r30, r18
    5f04:	e8 0f       	add	r30, r24
    5f06:	f9 1f       	adc	r31, r25
    5f08:	80 81       	ld	r24, Z
    5f0a:	91 81       	ldd	r25, Z+1	; 0x01
}
    5f0c:	08 95       	ret

00005f0e <LBGetJoyPadState>:

void LBGetJoyPadState(JoyPadState* p, unsigned char index)
/*
 * Get the current joy pad button state for index controller
 */
{
    5f0e:	0f 93       	push	r16
    5f10:	1f 93       	push	r17
    5f12:	cf 93       	push	r28
    5f14:	df 93       	push	r29
    5f16:	1f 92       	push	r1
    5f18:	cd b7       	in	r28, 0x3d	; 61
    5f1a:	de b7       	in	r29, 0x3e	; 62
    5f1c:	8c 01       	movw	r16, r24
	static unsigned int p_prev[2] = {0,0};

	p->held = ReadJoypad(index);
    5f1e:	86 2f       	mov	r24, r22
    5f20:	69 83       	std	Y+1, r22	; 0x01
    5f22:	0e 94 4d 21 	call	0x429a	; 0x429a <ReadJoypad>
    5f26:	d8 01       	movw	r26, r16
    5f28:	15 96       	adiw	r26, 0x05	; 5
    5f2a:	9c 93       	st	X, r25
    5f2c:	8e 93       	st	-X, r24
    5f2e:	14 97       	sbiw	r26, 0x04	; 4
    5f30:	69 81       	ldd	r22, Y+1	; 0x01
    5f32:	e6 2f       	mov	r30, r22
    5f34:	f0 e0       	ldi	r31, 0x00	; 0

	// Count held cycles
	if (p->held == 0 || p->held != p_prev[index])
    5f36:	00 97       	sbiw	r24, 0x00	; 0
    5f38:	51 f0       	breq	.+20     	; 0x5f4e <LBGetJoyPadState+0x40>
    5f3a:	df 01       	movw	r26, r30
    5f3c:	aa 0f       	add	r26, r26
    5f3e:	bb 1f       	adc	r27, r27
    5f40:	af 51       	subi	r26, 0x1F	; 31
    5f42:	b3 4f       	sbci	r27, 0xF3	; 243
    5f44:	2d 91       	ld	r18, X+
    5f46:	3c 91       	ld	r19, X
    5f48:	82 17       	cp	r24, r18
    5f4a:	93 07       	cpc	r25, r19
    5f4c:	21 f0       	breq	.+8      	; 0x5f56 <LBGetJoyPadState+0x48>
	    p->held_cycles = 0;
    5f4e:	d8 01       	movw	r26, r16
    5f50:	16 96       	adiw	r26, 0x06	; 6
    5f52:	1c 92       	st	X, r1
    5f54:	07 c0       	rjmp	.+14     	; 0x5f64 <LBGetJoyPadState+0x56>
	else
	    p->held_cycles += 1;
    5f56:	d8 01       	movw	r26, r16
    5f58:	16 96       	adiw	r26, 0x06	; 6
    5f5a:	2c 91       	ld	r18, X
    5f5c:	16 97       	sbiw	r26, 0x06	; 6
    5f5e:	2f 5f       	subi	r18, 0xFF	; 255
    5f60:	16 96       	adiw	r26, 0x06	; 6
    5f62:	2c 93       	st	X, r18

	p->pressed = p->held & (p->held ^ p_prev[index]);
    5f64:	ee 0f       	add	r30, r30
    5f66:	ff 1f       	adc	r31, r31
    5f68:	ef 51       	subi	r30, 0x1F	; 31
    5f6a:	f3 4f       	sbci	r31, 0xF3	; 243
    5f6c:	20 81       	ld	r18, Z
    5f6e:	31 81       	ldd	r19, Z+1	; 0x01
    5f70:	a9 01       	movw	r20, r18
    5f72:	40 95       	com	r20
    5f74:	50 95       	com	r21
    5f76:	48 23       	and	r20, r24
    5f78:	59 23       	and	r21, r25
    5f7a:	d8 01       	movw	r26, r16
    5f7c:	11 96       	adiw	r26, 0x01	; 1
    5f7e:	5c 93       	st	X, r21
    5f80:	4e 93       	st	-X, r20
	p->released = p_prev[index] & (p->held ^ p_prev[index]);
    5f82:	ac 01       	movw	r20, r24
    5f84:	40 95       	com	r20
    5f86:	50 95       	com	r21
    5f88:	24 23       	and	r18, r20
    5f8a:	35 23       	and	r19, r21
    5f8c:	13 96       	adiw	r26, 0x03	; 3
    5f8e:	3c 93       	st	X, r19
    5f90:	2e 93       	st	-X, r18
    5f92:	12 97       	sbiw	r26, 0x02	; 2
	p_prev[index] = p->held;
    5f94:	91 83       	std	Z+1, r25	; 0x01
    5f96:	80 83       	st	Z, r24
}
    5f98:	0f 90       	pop	r0
    5f9a:	df 91       	pop	r29
    5f9c:	cf 91       	pop	r28
    5f9e:	1f 91       	pop	r17
    5fa0:	0f 91       	pop	r16
    5fa2:	08 95       	ret

00005fa4 <LBWaitSeconds>:

	return from + ((delta + shifted) % delta);
}

void LBWaitSeconds(u8 seconds)
{
    5fa4:	cf 93       	push	r28
    5fa6:	df 93       	push	r29
    5fa8:	d8 2f       	mov	r29, r24
	for(u8 i = 0; i < seconds; i++)
    5faa:	c0 e0       	ldi	r28, 0x00	; 0
    5fac:	cd 17       	cp	r28, r29
    5fae:	31 f0       	breq	.+12     	; 0x5fbc <LBWaitSeconds+0x18>
	{
		WaitUs(65535);
    5fb0:	8f ef       	ldi	r24, 0xFF	; 255
    5fb2:	9f ef       	ldi	r25, 0xFF	; 255
    5fb4:	0e 94 59 21 	call	0x42b2	; 0x42b2 <WaitUs>
	return from + ((delta + shifted) % delta);
}

void LBWaitSeconds(u8 seconds)
{
	for(u8 i = 0; i < seconds; i++)
    5fb8:	cf 5f       	subi	r28, 0xFF	; 255
    5fba:	f8 cf       	rjmp	.-16     	; 0x5fac <LBWaitSeconds+0x8>
	{
		WaitUs(65535);
	}
}
    5fbc:	df 91       	pop	r29
    5fbe:	cf 91       	pop	r28
    5fc0:	08 95       	ret

00005fc2 <LBMapSprite>:

void LBMapSprite(u8 startSprite,const char *map,u8 spriteFlags)
{
    5fc2:	df 92       	push	r13
    5fc4:	ef 92       	push	r14
    5fc6:	ff 92       	push	r15
    5fc8:	0f 93       	push	r16
    5fca:	1f 93       	push	r17
    5fcc:	cf 93       	push	r28
    5fce:	df 93       	push	r29
    5fd0:	db 01       	movw	r26, r22
	unsigned char mapWidth=pgm_read_byte(&(map[0]));
    5fd2:	fb 01       	movw	r30, r22
    5fd4:	14 91       	lpm	r17, Z
	unsigned char mapHeight=pgm_read_byte(&(map[1]));
    5fd6:	31 96       	adiw	r30, 0x01	; 1
    5fd8:	64 91       	lpm	r22, Z
    5fda:	5f ef       	ldi	r21, 0xFF	; 255
    5fdc:	51 0f       	add	r21, r17
	s8 x,y,dx,dy,t; 

	if(spriteFlags & SPRITE_FLIP_X)
    5fde:	24 2f       	mov	r18, r20
    5fe0:	21 70       	andi	r18, 0x01	; 1
    5fe2:	40 ff       	sbrs	r20, 0
    5fe4:	04 c0       	rjmp	.+8      	; 0x5fee <LBMapSprite+0x2c>
	{
		x=(mapWidth-1);
    5fe6:	95 2f       	mov	r25, r21
		dx=-1;
    5fe8:	ff 24       	eor	r15, r15
    5fea:	fa 94       	dec	r15
    5fec:	03 c0       	rjmp	.+6      	; 0x5ff4 <LBMapSprite+0x32>
	}
	else
	{
		x=0;
		dx=1;
    5fee:	ff 24       	eor	r15, r15
    5ff0:	f3 94       	inc	r15
		x=(mapWidth-1);
		dx=-1;
	}
	else
	{
		x=0;
    5ff2:	90 e0       	ldi	r25, 0x00	; 0
		dx=1;
	}

	if(spriteFlags & SPRITE_FLIP_Y)
    5ff4:	41 ff       	sbrs	r20, 1
    5ff6:	05 c0       	rjmp	.+10     	; 0x6002 <LBMapSprite+0x40>
	{
		y=(mapHeight-1);
    5ff8:	7f ef       	ldi	r23, 0xFF	; 255
    5ffa:	76 0f       	add	r23, r22
		dy=-1;
    5ffc:	ee 24       	eor	r14, r14
    5ffe:	ea 94       	dec	r14
    6000:	03 c0       	rjmp	.+6      	; 0x6008 <LBMapSprite+0x46>
	}
	else
	{
		y=0;
		dy=1;
    6002:	ee 24       	eor	r14, r14
    6004:	e3 94       	inc	r14
		y=(mapHeight-1);
		dy=-1;
	}
	else
	{
		y=0;
    6006:	70 e0       	ldi	r23, 0x00	; 0
    6008:	21 11       	cpse	r18, r1
    600a:	01 c0       	rjmp	.+2      	; 0x600e <LBMapSprite+0x4c>
    600c:	50 e0       	ldi	r21, 0x00	; 0
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
    600e:	00 e0       	ldi	r16, 0x00	; 0
    6010:	06 17       	cp	r16, r22
    6012:	09 f1       	breq	.+66     	; 0x6056 <LBMapSprite+0x94>
	{
		for(u8 cx=0;cx<mapWidth;cx++)
		{
			t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    6014:	71 03       	mulsu	r23, r17
    6016:	e0 01       	movw	r28, r0
    6018:	11 24       	eor	r1, r1
    601a:	d8 2e       	mov	r13, r24
    601c:	d1 0e       	add	r13, r17
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
	{
		for(u8 cx=0;cx<mapWidth;cx++)
    601e:	8d 15       	cp	r24, r13
    6020:	b1 f0       	breq	.+44     	; 0x604e <LBMapSprite+0x8c>
		{
			t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    6022:	9e 01       	movw	r18, r28
    6024:	29 0f       	add	r18, r25
    6026:	31 1d       	adc	r19, r1
    6028:	97 fd       	sbrc	r25, 7
    602a:	3a 95       	dec	r19
    602c:	2e 5f       	subi	r18, 0xFE	; 254
    602e:	3f 4f       	sbci	r19, 0xFF	; 255
    6030:	fd 01       	movw	r30, r26
    6032:	e2 0f       	add	r30, r18
    6034:	f3 1f       	adc	r31, r19
    6036:	24 91       	lpm	r18, Z
			extendedSprites[startSprite].tileIndex=t;
    6038:	34 e0       	ldi	r19, 0x04	; 4
    603a:	83 9f       	mul	r24, r19
    603c:	f0 01       	movw	r30, r0
    603e:	11 24       	eor	r1, r1
    6040:	ed 5d       	subi	r30, 0xDD	; 221
    6042:	f1 4f       	sbci	r31, 0xF1	; 241
    6044:	22 83       	std	Z+2, r18	; 0x02
			extendedSprites[startSprite++].flags=spriteFlags;
    6046:	8f 5f       	subi	r24, 0xFF	; 255
    6048:	43 83       	std	Z+3, r20	; 0x03
    604a:	9f 0d       	add	r25, r15
    604c:	e8 cf       	rjmp	.-48     	; 0x601e <LBMapSprite+0x5c>
    604e:	7e 0d       	add	r23, r14
	{
		y=0;
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
    6050:	0f 5f       	subi	r16, 0xFF	; 255
			extendedSprites[startSprite].tileIndex=t;
			extendedSprites[startSprite++].flags=spriteFlags;
			x+=dx;
		}
		y+=dy;
		x=(spriteFlags & SPRITE_FLIP_X)?(mapWidth-1):0;
    6052:	95 2f       	mov	r25, r21
    6054:	dd cf       	rjmp	.-70     	; 0x6010 <LBMapSprite+0x4e>
	}
}
    6056:	df 91       	pop	r29
    6058:	cf 91       	pop	r28
    605a:	1f 91       	pop	r17
    605c:	0f 91       	pop	r16
    605e:	ff 90       	pop	r15
    6060:	ef 90       	pop	r14
    6062:	df 90       	pop	r13
    6064:	08 95       	ret

00006066 <LBMoveSprite>:

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
    6066:	df 92       	push	r13
    6068:	ef 92       	push	r14
    606a:	ff 92       	push	r15
    606c:	0f 93       	push	r16
    606e:	1f 93       	push	r17
    6070:	cf 93       	push	r28
    6072:	df 93       	push	r29
		{
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
    6074:	a0 91 9e 0c 	lds	r26, 0x0C9E
    6078:	98 e0       	ldi	r25, 0x08	; 8
    607a:	a9 9f       	mul	r26, r25
    607c:	70 01       	movw	r14, r0
    607e:	11 24       	eor	r1, r1
    6080:	50 e0       	ldi	r21, 0x00	; 0
    6082:	38 ef       	ldi	r19, 0xF8	; 248
    6084:	a3 9f       	mul	r26, r19
    6086:	30 2d       	mov	r19, r0
    6088:	11 24       	eor	r1, r1
	}
}

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
	for(u8 dy=0;dy<height;dy++)
    608a:	70 e0       	ldi	r23, 0x00	; 0
    608c:	70 17       	cp	r23, r16
    608e:	09 f1       	breq	.+66     	; 0x60d2 <LBMoveSprite+0x6c>
    6090:	d4 2e       	mov	r13, r20
    6092:	13 2f       	mov	r17, r19
    6094:	14 0f       	add	r17, r20
    6096:	b8 2f       	mov	r27, r24
    6098:	b2 0f       	add	r27, r18
    609a:	96 2f       	mov	r25, r22
	{
		for(u8 dx=0;dx<width;dx++)
    609c:	8b 17       	cp	r24, r27
    609e:	a9 f0       	breq	.+42     	; 0x60ca <LBMoveSprite+0x64>
		{
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
    60a0:	c4 e0       	ldi	r28, 0x04	; 4
    60a2:	8c 9f       	mul	r24, r28
    60a4:	f0 01       	movw	r30, r0
    60a6:	11 24       	eor	r1, r1
    60a8:	ef 01       	movw	r28, r30
    60aa:	cd 5d       	subi	r28, 0xDD	; 221
    60ac:	d1 4f       	sbci	r29, 0xF1	; 241
    60ae:	98 83       	st	Y, r25
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
    60b0:	a0 32       	cpi	r26, 0x20	; 32
    60b2:	28 f4       	brcc	.+10     	; 0x60be <LBMoveSprite+0x58>
    60b4:	e4 16       	cp	r14, r20
    60b6:	f5 06       	cpc	r15, r21
    60b8:	14 f4       	brge	.+4      	; 0x60be <LBMoveSprite+0x58>
				{
					u8 tmp=(y+(TILE_HEIGHT*dy))-(Screen.scrollHeight*TILE_HEIGHT);
					extendedSprites[startSprite].y=tmp;
    60ba:	19 83       	std	Y+1, r17	; 0x01
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
				{
    60bc:	03 c0       	rjmp	.+6      	; 0x60c4 <LBMoveSprite+0x5e>
					u8 tmp=(y+(TILE_HEIGHT*dy))-(Screen.scrollHeight*TILE_HEIGHT);
					extendedSprites[startSprite].y=tmp;
				}
				else
				{
					extendedSprites[startSprite].y=y+(TILE_HEIGHT*dy);
    60be:	ed 5d       	subi	r30, 0xDD	; 221
    60c0:	f1 4f       	sbci	r31, 0xF1	; 241
    60c2:	d1 82       	std	Z+1, r13	; 0x01
				{
					extendedSprites[startSprite].y=y+(TILE_HEIGHT*dy);
				}
			#endif

			startSprite++;
    60c4:	8f 5f       	subi	r24, 0xFF	; 255
    60c6:	98 5f       	subi	r25, 0xF8	; 248
    60c8:	e9 cf       	rjmp	.-46     	; 0x609c <LBMoveSprite+0x36>
	}
}

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
	for(u8 dy=0;dy<height;dy++)
    60ca:	7f 5f       	subi	r23, 0xFF	; 255
    60cc:	48 5f       	subi	r20, 0xF8	; 248
    60ce:	5f 4f       	sbci	r21, 0xFF	; 255
    60d0:	dd cf       	rjmp	.-70     	; 0x608c <LBMoveSprite+0x26>
			#endif

			startSprite++;
		}
	}	
}
    60d2:	df 91       	pop	r29
    60d4:	cf 91       	pop	r28
    60d6:	1f 91       	pop	r17
    60d8:	0f 91       	pop	r16
    60da:	ff 90       	pop	r15
    60dc:	ef 90       	pop	r14
    60de:	df 90       	pop	r13
    60e0:	08 95       	ret

000060e2 <LBRotateSprites>:

void LBRotateSprites(u8 mappedSpriteCount)
{
    60e2:	cf 93       	push	r28
    60e4:	df 93       	push	r29
	static u8 swapped = 0;
	u8 counter = 0;
	
	if (swapped)
    60e6:	90 91 dd 0c 	lds	r25, 0x0CDD
    60ea:	99 23       	and	r25, r25
    60ec:	e9 f1       	breq	.+122    	; 0x6168 <LBRotateSprites+0x86>
    60ee:	e5 e0       	ldi	r30, 0x05	; 5
    60f0:	f5 e0       	ldi	r31, 0x05	; 5
    60f2:	28 ec       	ldi	r18, 0xC8	; 200
    60f4:	28 0f       	add	r18, r24
	{
		while (counter < MAX_SPRITES && mappedSpriteCount > 0)
    60f6:	88 23       	and	r24, r24
    60f8:	89 f1       	breq	.+98     	; 0x615c <LBRotateSprites+0x7a>
		{
			sprites[counter].flags = extendedSprites[--mappedSpriteCount].flags;
    60fa:	af ef       	ldi	r26, 0xFF	; 255
    60fc:	a8 0f       	add	r26, r24
    60fe:	34 e0       	ldi	r19, 0x04	; 4
    6100:	a3 9f       	mul	r26, r19
    6102:	d0 01       	movw	r26, r0
    6104:	11 24       	eor	r1, r1
    6106:	ad 5d       	subi	r26, 0xDD	; 221
    6108:	b1 4f       	sbci	r27, 0xF1	; 241
    610a:	13 96       	adiw	r26, 0x03	; 3
    610c:	3c 91       	ld	r19, X
    610e:	30 83       	st	Z, r19
    6110:	ef 01       	movw	r28, r30
    6112:	21 97       	sbiw	r28, 0x01	; 1
			sprites[counter].tileIndex = extendedSprites[--mappedSpriteCount].tileIndex;
    6114:	ae ef       	ldi	r26, 0xFE	; 254
    6116:	a8 0f       	add	r26, r24
    6118:	34 e0       	ldi	r19, 0x04	; 4
    611a:	a3 9f       	mul	r26, r19
    611c:	d0 01       	movw	r26, r0
    611e:	11 24       	eor	r1, r1
    6120:	ad 5d       	subi	r26, 0xDD	; 221
    6122:	b1 4f       	sbci	r27, 0xF1	; 241
    6124:	12 96       	adiw	r26, 0x02	; 2
    6126:	3c 91       	ld	r19, X
    6128:	38 83       	st	Y, r19
    612a:	22 97       	sbiw	r28, 0x02	; 2
			sprites[counter].x = extendedSprites[--mappedSpriteCount].x;
    612c:	ad ef       	ldi	r26, 0xFD	; 253
    612e:	a8 0f       	add	r26, r24
    6130:	34 e0       	ldi	r19, 0x04	; 4
    6132:	a3 9f       	mul	r26, r19
    6134:	d0 01       	movw	r26, r0
    6136:	11 24       	eor	r1, r1
    6138:	ad 5d       	subi	r26, 0xDD	; 221
    613a:	b1 4f       	sbci	r27, 0xF1	; 241
    613c:	3c 91       	ld	r19, X
    613e:	38 83       	st	Y, r19
			sprites[counter].y = extendedSprites[--mappedSpriteCount].y;
    6140:	84 50       	subi	r24, 0x04	; 4
    6142:	21 96       	adiw	r28, 0x01	; 1
    6144:	34 e0       	ldi	r19, 0x04	; 4
    6146:	83 9f       	mul	r24, r19
    6148:	d0 01       	movw	r26, r0
    614a:	11 24       	eor	r1, r1
    614c:	ad 5d       	subi	r26, 0xDD	; 221
    614e:	b1 4f       	sbci	r27, 0xF1	; 241
    6150:	11 96       	adiw	r26, 0x01	; 1
    6152:	3c 91       	ld	r19, X
    6154:	38 83       	st	Y, r19
    6156:	34 96       	adiw	r30, 0x04	; 4
	static u8 swapped = 0;
	u8 counter = 0;
	
	if (swapped)
	{
		while (counter < MAX_SPRITES && mappedSpriteCount > 0)
    6158:	82 13       	cpse	r24, r18
    615a:	cd cf       	rjmp	.-102    	; 0x60f6 <LBRotateSprites+0x14>
			sprites[counter].x = extendedSprites[counter].x;
			sprites[counter].y = extendedSprites[counter].y;
			counter++;
		}
	}
	swapped = swapped & 1;
    615c:	91 70       	andi	r25, 0x01	; 1
    615e:	90 93 dd 0c 	sts	0x0CDD, r25
}
    6162:	df 91       	pop	r29
    6164:	cf 91       	pop	r28
    6166:	08 95       	ret
    6168:	40 e0       	ldi	r20, 0x00	; 0
    616a:	50 e0       	ldi	r21, 0x00	; 0
    616c:	20 e0       	ldi	r18, 0x00	; 0
			counter++;
		}
	}
	else
	{
		while (counter < MAX_SPRITES && counter < mappedSpriteCount)
    616e:	28 17       	cp	r18, r24
    6170:	a9 f3       	breq	.-22     	; 0x615c <LBRotateSprites+0x7a>
    6172:	da 01       	movw	r26, r20
    6174:	ad 5d       	subi	r26, 0xDD	; 221
    6176:	b1 4f       	sbci	r27, 0xF1	; 241
    6178:	fa 01       	movw	r30, r20
    617a:	ee 5f       	subi	r30, 0xFE	; 254
    617c:	fa 4f       	sbci	r31, 0xFA	; 250
		{
			sprites[counter].flags = extendedSprites[counter].flags;
    617e:	13 96       	adiw	r26, 0x03	; 3
    6180:	3c 91       	ld	r19, X
    6182:	13 97       	sbiw	r26, 0x03	; 3
    6184:	33 83       	std	Z+3, r19	; 0x03
			sprites[counter].tileIndex = extendedSprites[counter].tileIndex;
    6186:	12 96       	adiw	r26, 0x02	; 2
    6188:	3c 91       	ld	r19, X
    618a:	12 97       	sbiw	r26, 0x02	; 2
    618c:	32 83       	std	Z+2, r19	; 0x02
			sprites[counter].x = extendedSprites[counter].x;
    618e:	3c 91       	ld	r19, X
    6190:	30 83       	st	Z, r19
			sprites[counter].y = extendedSprites[counter].y;
    6192:	11 96       	adiw	r26, 0x01	; 1
    6194:	3c 91       	ld	r19, X
    6196:	31 83       	std	Z+1, r19	; 0x01
			counter++;
    6198:	2f 5f       	subi	r18, 0xFF	; 255
    619a:	4c 5f       	subi	r20, 0xFC	; 252
    619c:	5f 4f       	sbci	r21, 0xFF	; 255
			counter++;
		}
	}
	else
	{
		while (counter < MAX_SPRITES && counter < mappedSpriteCount)
    619e:	2e 30       	cpi	r18, 0x0E	; 14
    61a0:	31 f7       	brne	.-52     	; 0x616e <LBRotateSprites+0x8c>
    61a2:	dc cf       	rjmp	.-72     	; 0x615c <LBRotateSprites+0x7a>

000061a4 <LBDrawTile>:

/*
 * A more efficient map draw for single tile maps 
 */ 
void LBDrawTile(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
	SetTile(x,y,pgm_read_byte(&(map[2])));					
    61a4:	fa 01       	movw	r30, r20
    61a6:	32 96       	adiw	r30, 0x02	; 2
    61a8:	44 91       	lpm	r20, Z
    61aa:	50 e0       	ldi	r21, 0x00	; 0
    61ac:	0c 94 2a 21 	jmp	0x4254	; 0x4254 <SetTile>

000061b0 <init_game_state>:
char* prone_anim[1];
char* run_anim[4];

void init_game_state()
{
	game.camera_x = 0;
    61b0:	e1 e9       	ldi	r30, 0x91	; 145
    61b2:	fd e0       	ldi	r31, 0x0D	; 13
    61b4:	10 86       	std	Z+8, r1	; 0x08
    61b6:	17 82       	std	Z+7, r1	; 0x07
	game.camera_y = 0;
    61b8:	12 86       	std	Z+10, r1	; 0x0a
    61ba:	11 86       	std	Z+9, r1	; 0x09
	game.current_level = 0;
    61bc:	11 82       	std	Z+1, r1	; 0x01
	game.current_screen = 0;
    61be:	10 82       	st	Z, r1
	game.paused = 0;
    61c0:	12 82       	std	Z+2, r1	; 0x02
	game.selection = 0;
    61c2:	13 82       	std	Z+3, r1	; 0x03
	game.scroll_src_x=29;
    61c4:	8d e1       	ldi	r24, 0x1D	; 29
    61c6:	90 e0       	ldi	r25, 0x00	; 0
    61c8:	95 83       	std	Z+5, r25	; 0x05
    61ca:	84 83       	std	Z+4, r24	; 0x04
    game.scroll_dest_x=29;
    61cc:	86 83       	std	Z+6, r24	; 0x06
	game.player.active_shots = 0;
    61ce:	12 8a       	std	Z+18, r1	; 0x12
	game.player.flags = IDLE;
    61d0:	88 e0       	ldi	r24, 0x08	; 8
    61d2:	83 8b       	std	Z+19, r24	; 0x13
	game.player.grace_frame = 0;
    61d4:	14 8a       	std	Z+20, r1	; 0x14
	game.player.shared.gravity = GRAVITY;
    61d6:	80 e5       	ldi	r24, 0x50	; 80
    61d8:	85 87       	std	Z+13, r24	; 0x0d
	game.player.shared.vx = 0;
    61da:	13 86       	std	Z+11, r1	; 0x0b
	game.player.shared.vy = 0;
    61dc:	14 86       	std	Z+12, r1	; 0x0c
	
	game.player.idle.anim_count = 1;
    61de:	81 e0       	ldi	r24, 0x01	; 1
    61e0:	80 93 f3 0d 	sts	0x0DF3, r24
	game.player.idle.current_anim = 0;
    61e4:	10 92 f2 0d 	sts	0x0DF2, r1
	game.player.idle.frame_count = 0;
    61e8:	10 92 f5 0d 	sts	0x0DF5, r1
	game.player.idle.frames_per_anim = 1;
    61ec:	80 93 f4 0d 	sts	0x0DF4, r24
	game.player.idle.looped = 0;
    61f0:	10 92 f6 0d 	sts	0x0DF6, r1
	game.player.idle.reversing = 0;
    61f4:	10 92 f7 0d 	sts	0x0DF7, r1
	game.player.idle.anims = idle_anim;
    61f8:	eb e9       	ldi	r30, 0x9B	; 155
    61fa:	fe e0       	ldi	r31, 0x0E	; 14
    61fc:	f0 93 f9 0d 	sts	0x0DF9, r31
    6200:	e0 93 f8 0d 	sts	0x0DF8, r30
	game.player.idle.anims[0] = (char*) map_hero_idle;
    6204:	2a e1       	ldi	r18, 0x1A	; 26
    6206:	3e e1       	ldi	r19, 0x1E	; 30
    6208:	31 83       	std	Z+1, r19	; 0x01
    620a:	20 83       	st	Z, r18
	
	game.player.jump.anim_count = 1;
    620c:	80 93 03 0e 	sts	0x0E03, r24
	game.player.jump.current_anim = 0;
    6210:	10 92 02 0e 	sts	0x0E02, r1
	game.player.jump.frame_count = 0;
    6214:	10 92 05 0e 	sts	0x0E05, r1
	game.player.jump.frames_per_anim = 1;
    6218:	80 93 04 0e 	sts	0x0E04, r24
	game.player.jump.looped = 0;
    621c:	10 92 06 0e 	sts	0x0E06, r1
	game.player.jump.reversing = 0;
    6220:	10 92 07 0e 	sts	0x0E07, r1
	game.player.jump.anims = jump_anim;
    6224:	ef e6       	ldi	r30, 0x6F	; 111
    6226:	fd e0       	ldi	r31, 0x0D	; 13
    6228:	f0 93 09 0e 	sts	0x0E09, r31
    622c:	e0 93 08 0e 	sts	0x0E08, r30
	game.player.jump.anims[0] = (char*) map_hero_jump;
    6230:	22 ef       	ldi	r18, 0xF2	; 242
    6232:	3d e1       	ldi	r19, 0x1D	; 29
    6234:	31 83       	std	Z+1, r19	; 0x01
    6236:	20 83       	st	Z, r18
	
	game.player.prone.anim_count = 1;
    6238:	80 93 0b 0e 	sts	0x0E0B, r24
	game.player.prone.current_anim = 0;
    623c:	10 92 0a 0e 	sts	0x0E0A, r1
	game.player.prone.frame_count = 0;
    6240:	10 92 0d 0e 	sts	0x0E0D, r1
	game.player.prone.frames_per_anim = 1;
    6244:	80 93 0c 0e 	sts	0x0E0C, r24
	game.player.prone.looped = 0;
    6248:	10 92 0e 0e 	sts	0x0E0E, r1
	game.player.prone.reversing = 0;
    624c:	10 92 0f 0e 	sts	0x0E0F, r1
	game.player.prone.anims = prone_anim;
    6250:	e1 e2       	ldi	r30, 0x21	; 33
    6252:	fe e0       	ldi	r31, 0x0E	; 14
    6254:	f0 93 11 0e 	sts	0x0E11, r31
    6258:	e0 93 10 0e 	sts	0x0E10, r30
	game.player.prone.anims[0] = (char*) map_hero_prone;
    625c:	8d ee       	ldi	r24, 0xED	; 237
    625e:	9d e1       	ldi	r25, 0x1D	; 29
    6260:	91 83       	std	Z+1, r25	; 0x01
    6262:	80 83       	st	Z, r24
	
	game.player.run.anim_count = 4;
    6264:	84 e0       	ldi	r24, 0x04	; 4
    6266:	80 93 fb 0d 	sts	0x0DFB, r24
	game.player.run.current_anim = 0;
    626a:	10 92 fa 0d 	sts	0x0DFA, r1
	game.player.run.frame_count = 0;
    626e:	10 92 fd 0d 	sts	0x0DFD, r1
	game.player.run.frames_per_anim = FRAMES_PER_RUN_CYCLE;
    6272:	8c e0       	ldi	r24, 0x0C	; 12
    6274:	80 93 fc 0d 	sts	0x0DFC, r24
	game.player.run.looped = 0;
    6278:	10 92 fe 0d 	sts	0x0DFE, r1
	game.player.run.reversing = 0;
    627c:	10 92 ff 0d 	sts	0x0DFF, r1
	game.player.run.anims = run_anim;
    6280:	e3 e9       	ldi	r30, 0x93	; 147
    6282:	fe e0       	ldi	r31, 0x0E	; 14
    6284:	f0 93 01 0e 	sts	0x0E01, r31
    6288:	e0 93 00 0e 	sts	0x0E00, r30
	game.player.run.anims[0] = (char*) map_hero_step_0;
    628c:	82 e1       	ldi	r24, 0x12	; 18
    628e:	9e e1       	ldi	r25, 0x1E	; 30
    6290:	91 83       	std	Z+1, r25	; 0x01
    6292:	80 83       	st	Z, r24
	game.player.run.anims[1] = (char*) map_hero_step_1;
    6294:	8a e0       	ldi	r24, 0x0A	; 10
    6296:	9e e1       	ldi	r25, 0x1E	; 30
    6298:	93 83       	std	Z+3, r25	; 0x03
    629a:	82 83       	std	Z+2, r24	; 0x02
	game.player.run.anims[2] = (char*) map_hero_step_2;
    629c:	82 e0       	ldi	r24, 0x02	; 2
    629e:	9e e1       	ldi	r25, 0x1E	; 30
    62a0:	95 83       	std	Z+5, r25	; 0x05
    62a2:	84 83       	std	Z+4, r24	; 0x04
	game.player.run.anims[3] = (char*) map_hero_step_3;
    62a4:	8a ef       	ldi	r24, 0xFA	; 250
    62a6:	9d e1       	ldi	r25, 0x1D	; 29
    62a8:	97 83       	std	Z+7, r25	; 0x07
    62aa:	86 83       	std	Z+6, r24	; 0x06
    62ac:	08 95       	ret

000062ae <render_level_tile>:
	ClearVram();
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
    62ae:	0f 93       	push	r16
    62b0:	1f 93       	push	r17
    62b2:	e8 2f       	mov	r30, r24
    62b4:	86 2f       	mov	r24, r22
    62b6:	64 2f       	mov	r22, r20
	switch (level_tile)
    62b8:	0e 2f       	mov	r16, r30
    62ba:	10 e0       	ldi	r17, 0x00	; 0
    62bc:	07 30       	cpi	r16, 0x07	; 7
    62be:	11 05       	cpc	r17, r1
    62c0:	e8 f4       	brcc	.+58     	; 0x62fc <render_level_tile+0x4e>
    62c2:	f8 01       	movw	r30, r16
    62c4:	e8 5c       	subi	r30, 0xC8	; 200
    62c6:	ff 4f       	sbci	r31, 0xFF	; 255
    62c8:	0c 94 bf 34 	jmp	0x697e	; 0x697e <__tablejump2__>
	{
		case L_ICE_SKY : LBDrawTile(x, y, map_ice_sky); break;
    62cc:	4e e0       	ldi	r20, 0x0E	; 14
    62ce:	57 e3       	ldi	r21, 0x37	; 55
    62d0:	11 c0       	rjmp	.+34     	; 0x62f4 <render_level_tile+0x46>
		case L_ICE_MIDDLE : LBDrawTile(x, y, map_ice_middle); break;
    62d2:	4a e1       	ldi	r20, 0x1A	; 26
    62d4:	57 e3       	ldi	r21, 0x37	; 55
    62d6:	0e c0       	rjmp	.+28     	; 0x62f4 <render_level_tile+0x46>
		case L_ICE_LEFT : LBDrawTile(x, y, map_ice_left); break;
    62d8:	4d e1       	ldi	r20, 0x1D	; 29
    62da:	57 e3       	ldi	r21, 0x37	; 55
    62dc:	0b c0       	rjmp	.+22     	; 0x62f4 <render_level_tile+0x46>
		case L_ICE_RIGHT : LBDrawTile(x, y, map_ice_right); break;
    62de:	47 e1       	ldi	r20, 0x17	; 23
    62e0:	57 e3       	ldi	r21, 0x37	; 55
    62e2:	08 c0       	rjmp	.+16     	; 0x62f4 <render_level_tile+0x46>
		case L_ICE_BOTTOM : LBDrawTile(x, y, map_ice_bottom); break;
    62e4:	44 e1       	ldi	r20, 0x14	; 20
    62e6:	57 e3       	ldi	r21, 0x37	; 55
    62e8:	05 c0       	rjmp	.+10     	; 0x62f4 <render_level_tile+0x46>
		case L_ICE_FAR : LBDrawTile(x, y, map_ice_far); break;
    62ea:	4b e0       	ldi	r20, 0x0B	; 11
    62ec:	57 e3       	ldi	r21, 0x37	; 55
    62ee:	02 c0       	rjmp	.+4      	; 0x62f4 <render_level_tile+0x46>
		case L_ICE_HORIZON : LBDrawTile(x, y, map_ice_horizon); break;
    62f0:	41 e1       	ldi	r20, 0x11	; 17
    62f2:	57 e3       	ldi	r21, 0x37	; 55
	}
}
    62f4:	1f 91       	pop	r17
    62f6:	0f 91       	pop	r16
		case L_ICE_MIDDLE : LBDrawTile(x, y, map_ice_middle); break;
		case L_ICE_LEFT : LBDrawTile(x, y, map_ice_left); break;
		case L_ICE_RIGHT : LBDrawTile(x, y, map_ice_right); break;
		case L_ICE_BOTTOM : LBDrawTile(x, y, map_ice_bottom); break;
		case L_ICE_FAR : LBDrawTile(x, y, map_ice_far); break;
		case L_ICE_HORIZON : LBDrawTile(x, y, map_ice_horizon); break;
    62f8:	0c 94 d2 30 	jmp	0x61a4	; 0x61a4 <LBDrawTile>
	}
}
    62fc:	1f 91       	pop	r17
    62fe:	0f 91       	pop	r16
    6300:	08 95       	ret

00006302 <clear_overlay>:

void clear_overlay(u8 overlayHeight)
{
    6302:	1f 93       	push	r17
    6304:	cf 93       	push	r28
    6306:	df 93       	push	r29
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
    6308:	d0 e0       	ldi	r29, 0x00	; 0
    630a:	10 e2       	ldi	r17, 0x20	; 32
    630c:	18 0f       	add	r17, r24
		case L_ICE_HORIZON : LBDrawTile(x, y, map_ice_horizon); break;
	}
}

void clear_overlay(u8 overlayHeight)
{
    630e:	c0 e2       	ldi	r28, 0x20	; 32
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
	{
		for(u8 y = 0; y < overlayHeight; y++)
    6310:	c1 17       	cp	r28, r17
    6312:	41 f0       	breq	.+16     	; 0x6324 <clear_overlay+0x22>
		{
			SetTile(x, VRAM_TILES_V+y, 0);
    6314:	40 e0       	ldi	r20, 0x00	; 0
    6316:	50 e0       	ldi	r21, 0x00	; 0
    6318:	6c 2f       	mov	r22, r28
    631a:	8d 2f       	mov	r24, r29
    631c:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetTile>
    6320:	cf 5f       	subi	r28, 0xFF	; 255
    6322:	f6 cf       	rjmp	.-20     	; 0x6310 <clear_overlay+0xe>
	}
}

void clear_overlay(u8 overlayHeight)
{
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
    6324:	df 5f       	subi	r29, 0xFF	; 255
    6326:	dc 31       	cpi	r29, 0x1C	; 28
    6328:	91 f7       	brne	.-28     	; 0x630e <clear_overlay+0xc>
		for(u8 y = 0; y < overlayHeight; y++)
		{
			SetTile(x, VRAM_TILES_V+y, 0);
		}
	}
}
    632a:	df 91       	pop	r29
    632c:	cf 91       	pop	r28
    632e:	1f 91       	pop	r17
    6330:	08 95       	ret

00006332 <get_camera_y>:
	return pgm_read_byte(&level_data[level_index*LEVEL_WIDTH*LEVEL_HEIGHT + level_index*4 + 0]);
}

u8 get_camera_y(u8 level_index)
{
	return pgm_read_byte(&level_data[level_index*LEVEL_WIDTH*LEVEL_HEIGHT + level_index*4 + 1]);
    6332:	28 e5       	ldi	r18, 0x58	; 88
    6334:	36 e0       	ldi	r19, 0x06	; 6
    6336:	48 2f       	mov	r20, r24
    6338:	42 9f       	mul	r20, r18
    633a:	c0 01       	movw	r24, r0
    633c:	43 9f       	mul	r20, r19
    633e:	90 0d       	add	r25, r0
    6340:	11 24       	eor	r1, r1
    6342:	fc 01       	movw	r30, r24
    6344:	ed 50       	subi	r30, 0x0D	; 13
    6346:	f5 4f       	sbci	r31, 0xF5	; 245
    6348:	84 91       	lpm	r24, Z
}
    634a:	08 95       	ret

0000634c <get_hero_spawn_x>:

u8 get_hero_spawn_x(u8 level_index)
{
	return pgm_read_byte(&level_data[level_index*LEVEL_WIDTH*LEVEL_HEIGHT + level_index*4 + 2]);
    634c:	28 e5       	ldi	r18, 0x58	; 88
    634e:	36 e0       	ldi	r19, 0x06	; 6
    6350:	48 2f       	mov	r20, r24
    6352:	42 9f       	mul	r20, r18
    6354:	c0 01       	movw	r24, r0
    6356:	43 9f       	mul	r20, r19
    6358:	90 0d       	add	r25, r0
    635a:	11 24       	eor	r1, r1
    635c:	fc 01       	movw	r30, r24
    635e:	ec 50       	subi	r30, 0x0C	; 12
    6360:	f5 4f       	sbci	r31, 0xF5	; 245
    6362:	84 91       	lpm	r24, Z
}
    6364:	08 95       	ret

00006366 <get_hero_spawn_y>:

u8 get_hero_spawn_y(u8 level_index)
{
	return pgm_read_byte(&level_data[level_index*LEVEL_WIDTH*LEVEL_HEIGHT + level_index*4 + 3]);
    6366:	28 e5       	ldi	r18, 0x58	; 88
    6368:	36 e0       	ldi	r19, 0x06	; 6
    636a:	48 2f       	mov	r20, r24
    636c:	42 9f       	mul	r20, r18
    636e:	c0 01       	movw	r24, r0
    6370:	43 9f       	mul	r20, r19
    6372:	90 0d       	add	r25, r0
    6374:	11 24       	eor	r1, r1
    6376:	fc 01       	movw	r30, r24
    6378:	eb 50       	subi	r30, 0x0B	; 11
    637a:	f5 4f       	sbci	r31, 0xF5	; 245
    637c:	84 91       	lpm	r24, Z
}
    637e:	08 95       	ret

00006380 <get_level_tile>:

u8 get_level_tile(u8 level_index, u16 x, u16 y)
{
    6380:	fb 01       	movw	r30, r22
    6382:	34 96       	adiw	r30, 0x04	; 4
	return pgm_read_byte(&level_data[level_index*LEVEL_WIDTH*LEVEL_HEIGHT + level_index*4 + 4 + (y*LEVEL_WIDTH+x)]);
    6384:	9c e3       	ldi	r25, 0x3C	; 60
    6386:	94 9f       	mul	r25, r20
    6388:	90 01       	movw	r18, r0
    638a:	95 9f       	mul	r25, r21
    638c:	30 0d       	add	r19, r0
    638e:	11 24       	eor	r1, r1
    6390:	e2 0f       	add	r30, r18
    6392:	f3 1f       	adc	r31, r19
    6394:	28 e5       	ldi	r18, 0x58	; 88
    6396:	36 e0       	ldi	r19, 0x06	; 6
    6398:	48 2f       	mov	r20, r24
    639a:	42 9f       	mul	r20, r18
    639c:	c0 01       	movw	r24, r0
    639e:	43 9f       	mul	r20, r19
    63a0:	90 0d       	add	r25, r0
    63a2:	11 24       	eor	r1, r1
    63a4:	e8 0f       	add	r30, r24
    63a6:	f9 1f       	adc	r31, r25
    63a8:	ee 50       	subi	r30, 0x0E	; 14
    63aa:	f5 4f       	sbci	r31, 0xF5	; 245
    63ac:	84 91       	lpm	r24, Z
}
    63ae:	08 95       	ret

000063b0 <render_camera_view>:
#else

#endif

void render_camera_view()
{
    63b0:	7f 92       	push	r7
    63b2:	8f 92       	push	r8
    63b4:	9f 92       	push	r9
    63b6:	af 92       	push	r10
    63b8:	bf 92       	push	r11
    63ba:	cf 92       	push	r12
    63bc:	df 92       	push	r13
    63be:	ef 92       	push	r14
    63c0:	ff 92       	push	r15
    63c2:	0f 93       	push	r16
    63c4:	1f 93       	push	r17
    63c6:	cf 93       	push	r28
    63c8:	df 93       	push	r29
	u8 level_tile;
	u16 camara_x_tile = game.camera_x/8;
    63ca:	c0 91 98 0d 	lds	r28, 0x0D98
    63ce:	d0 91 99 0d 	lds	r29, 0x0D99
    63d2:	83 e0       	ldi	r24, 0x03	; 3
    63d4:	d6 95       	lsr	r29
    63d6:	c7 95       	ror	r28
    63d8:	8a 95       	dec	r24
    63da:	e1 f7       	brne	.-8      	; 0x63d4 <render_camera_view+0x24>
	u16 camera_y_tile = game.camera_y/8;
    63dc:	c0 90 9a 0d 	lds	r12, 0x0D9A
    63e0:	d0 90 9b 0d 	lds	r13, 0x0D9B
    63e4:	93 e0       	ldi	r25, 0x03	; 3
    63e6:	d6 94       	lsr	r13
    63e8:	c7 94       	ror	r12
    63ea:	9a 95       	dec	r25
    63ec:	e1 f7       	brne	.-8      	; 0x63e6 <render_camera_view+0x36>
	
	for (u16 x = camara_x_tile; x < camara_x_tile + CAMERA_WIDTH + 1; x++)
    63ee:	8e 01       	movw	r16, r28
    63f0:	5e 01       	movw	r10, r28
    63f2:	8d e1       	ldi	r24, 0x1D	; 29
    63f4:	a8 0e       	add	r10, r24
    63f6:	b1 1c       	adc	r11, r1
	{
		for (u16 y = camera_y_tile; y < camera_y_tile + CAMERA_HEIGHT + 1; y++)
    63f8:	46 01       	movw	r8, r12
    63fa:	8b e1       	ldi	r24, 0x1B	; 27
    63fc:	88 0e       	add	r8, r24
    63fe:	91 1c       	adc	r9, r1
{
	u8 level_tile;
	u16 camara_x_tile = game.camera_x/8;
	u16 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x < camara_x_tile + CAMERA_WIDTH + 1; x++)
    6400:	0a 15       	cp	r16, r10
    6402:	1b 05       	cpc	r17, r11
    6404:	c0 f4       	brcc	.+48     	; 0x6436 <render_camera_view+0x86>
    6406:	76 01       	movw	r14, r12
    6408:	70 2e       	mov	r7, r16
    640a:	7c 1a       	sub	r7, r28
	{
		for (u16 y = camera_y_tile; y < camera_y_tile + CAMERA_HEIGHT + 1; y++)
    640c:	e8 14       	cp	r14, r8
    640e:	f9 04       	cpc	r15, r9
    6410:	78 f4       	brcc	.+30     	; 0x6430 <render_camera_view+0x80>
		{
			level_tile = get_level_tile(game.current_level, x, y);
    6412:	a7 01       	movw	r20, r14
    6414:	b8 01       	movw	r22, r16
    6416:	80 91 92 0d 	lds	r24, 0x0D92
    641a:	0e 94 c0 31 	call	0x6380	; 0x6380 <get_level_tile>
    641e:	4e 2d       	mov	r20, r14
    6420:	4c 19       	sub	r20, r12
			render_level_tile(level_tile, x - camara_x_tile, y - camera_y_tile);
    6422:	67 2d       	mov	r22, r7
    6424:	0e 94 57 31 	call	0x62ae	; 0x62ae <render_level_tile>
	u16 camara_x_tile = game.camera_x/8;
	u16 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x < camara_x_tile + CAMERA_WIDTH + 1; x++)
	{
		for (u16 y = camera_y_tile; y < camera_y_tile + CAMERA_HEIGHT + 1; y++)
    6428:	8f ef       	ldi	r24, 0xFF	; 255
    642a:	e8 1a       	sub	r14, r24
    642c:	f8 0a       	sbc	r15, r24
    642e:	ee cf       	rjmp	.-36     	; 0x640c <render_camera_view+0x5c>
{
	u8 level_tile;
	u16 camara_x_tile = game.camera_x/8;
	u16 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x < camara_x_tile + CAMERA_WIDTH + 1; x++)
    6430:	0f 5f       	subi	r16, 0xFF	; 255
    6432:	1f 4f       	sbci	r17, 0xFF	; 255
    6434:	e5 cf       	rjmp	.-54     	; 0x6400 <render_camera_view+0x50>
		{
			level_tile = get_level_tile(game.current_level, x, y);
			render_level_tile(level_tile, x - camara_x_tile, y - camera_y_tile);
		}
	}
}
    6436:	df 91       	pop	r29
    6438:	cf 91       	pop	r28
    643a:	1f 91       	pop	r17
    643c:	0f 91       	pop	r16
    643e:	ff 90       	pop	r15
    6440:	ef 90       	pop	r14
    6442:	df 90       	pop	r13
    6444:	cf 90       	pop	r12
    6446:	bf 90       	pop	r11
    6448:	af 90       	pop	r10
    644a:	9f 90       	pop	r9
    644c:	8f 90       	pop	r8
    644e:	7f 90       	pop	r7
    6450:	08 95       	ret

00006452 <append_tile_column>:

void append_tile_column()
{
    6452:	cf 93       	push	r28
    6454:	df 93       	push	r29
    6456:	c0 e0       	ldi	r28, 0x00	; 0
    6458:	d0 e0       	ldi	r29, 0x00	; 0
	u8 level_tile;

    for (u8 y = 0; y < CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y);
    645a:	60 91 95 0d 	lds	r22, 0x0D95
    645e:	70 91 96 0d 	lds	r23, 0x0D96
    6462:	ae 01       	movw	r20, r28
    6464:	80 91 92 0d 	lds	r24, 0x0D92
    6468:	0e 94 c0 31 	call	0x6380	; 0x6380 <get_level_tile>
		render_level_tile(level_tile, game.scroll_dest_x, y);
    646c:	4c 2f       	mov	r20, r28
    646e:	60 91 97 0d 	lds	r22, 0x0D97
    6472:	0e 94 57 31 	call	0x62ae	; 0x62ae <render_level_tile>
    6476:	21 96       	adiw	r28, 0x01	; 1

void append_tile_column()
{
	u8 level_tile;

    for (u8 y = 0; y < CAMERA_HEIGHT; y++)
    6478:	ca 31       	cpi	r28, 0x1A	; 26
    647a:	d1 05       	cpc	r29, r1
    647c:	71 f7       	brne	.-36     	; 0x645a <append_tile_column+0x8>
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y);
		render_level_tile(level_tile, game.scroll_dest_x, y);
    }
	
    game.scroll_src_x++;
    647e:	80 91 95 0d 	lds	r24, 0x0D95
    6482:	90 91 96 0d 	lds	r25, 0x0D96
    6486:	01 96       	adiw	r24, 0x01	; 1
    6488:	90 93 96 0d 	sts	0x0D96, r25
    648c:	80 93 95 0d 	sts	0x0D95, r24
	game.scroll_dest_x++;
    6490:	80 91 97 0d 	lds	r24, 0x0D97
    6494:	8f 5f       	subi	r24, 0xFF	; 255
    if(game.scroll_dest_x>=32)game.scroll_dest_x=0;
    6496:	80 32       	cpi	r24, 0x20	; 32
    6498:	18 f4       	brcc	.+6      	; 0x64a0 <append_tile_column+0x4e>
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y);
		render_level_tile(level_tile, game.scroll_dest_x, y);
    }
	
    game.scroll_src_x++;
	game.scroll_dest_x++;
    649a:	80 93 97 0d 	sts	0x0D97, r24
    649e:	02 c0       	rjmp	.+4      	; 0x64a4 <append_tile_column+0x52>
    if(game.scroll_dest_x>=32)game.scroll_dest_x=0;
    64a0:	10 92 97 0d 	sts	0x0D97, r1
}
    64a4:	df 91       	pop	r29
    64a6:	cf 91       	pop	r28
    64a8:	08 95       	ret

000064aa <move_camera_x>:

void move_camera_x()
{	
	static u8 scroll = 0;
	
	game.camera_x++;
    64aa:	80 91 98 0d 	lds	r24, 0x0D98
    64ae:	90 91 99 0d 	lds	r25, 0x0D99
    64b2:	01 96       	adiw	r24, 0x01	; 1
    64b4:	90 93 99 0d 	sts	0x0D99, r25
    64b8:	80 93 98 0d 	sts	0x0D98, r24
	Scroll(1,0);
    64bc:	60 e0       	ldi	r22, 0x00	; 0
    64be:	81 e0       	ldi	r24, 0x01	; 1
    64c0:	0e 94 28 2e 	call	0x5c50	; 0x5c50 <Scroll>
	if (++scroll == 8)
    64c4:	80 91 dc 0c 	lds	r24, 0x0CDC
    64c8:	8f 5f       	subi	r24, 0xFF	; 255
    64ca:	88 30       	cpi	r24, 0x08	; 8
    64cc:	19 f0       	breq	.+6      	; 0x64d4 <move_camera_x+0x2a>
    64ce:	80 93 dc 0c 	sts	0x0CDC, r24
    64d2:	08 95       	ret
	{
		scroll = 0;
    64d4:	10 92 dc 0c 	sts	0x0CDC, r1
		append_tile_column();
    64d8:	0c 94 29 32 	jmp	0x6452	; 0x6452 <append_tile_column>

000064dc <load_level>:
	}
}

void load_level(u8 index)
{	
    64dc:	1f 93       	push	r17
    64de:	cf 93       	push	r28
    64e0:	df 93       	push	r29
    64e2:	18 2f       	mov	r17, r24
	Screen.scrollX = 0;
    64e4:	e9 e9       	ldi	r30, 0x99	; 153
    64e6:	fc e0       	ldi	r31, 0x0C	; 12
    64e8:	13 82       	std	Z+3, r1	; 0x03
	Screen.scrollY = 0;
    64ea:	14 82       	std	Z+4, r1	; 0x04
	Screen.scrollHeight = 30;
    64ec:	8e e1       	ldi	r24, 0x1E	; 30
    64ee:	85 83       	std	Z+5, r24	; 0x05
	Screen.overlayTileTable = tiles_data;
    64f0:	8a e3       	ldi	r24, 0x3A	; 58
    64f2:	9e e1       	ldi	r25, 0x1E	; 30
    64f4:	92 83       	std	Z+2, r25	; 0x02
    64f6:	81 83       	std	Z+1, r24	; 0x01
	Screen.overlayHeight = 2;
    64f8:	82 e0       	ldi	r24, 0x02	; 2
    64fa:	80 83       	st	Z, r24
	clear_overlay(2);
    64fc:	0e 94 81 31 	call	0x6302	; 0x6302 <clear_overlay>
	game.current_level = index;
    6500:	c1 e9       	ldi	r28, 0x91	; 145
    6502:	dd e0       	ldi	r29, 0x0D	; 13
    6504:	19 83       	std	Y+1, r17	; 0x01

#if RLE == 0

u8 get_camera_x(u8 level_index)
{
	return pgm_read_byte(&level_data[level_index*LEVEL_WIDTH*LEVEL_HEIGHT + level_index*4 + 0]);
    6506:	88 e5       	ldi	r24, 0x58	; 88
    6508:	96 e0       	ldi	r25, 0x06	; 6
    650a:	18 9f       	mul	r17, r24
    650c:	f0 01       	movw	r30, r0
    650e:	19 9f       	mul	r17, r25
    6510:	f0 0d       	add	r31, r0
    6512:	11 24       	eor	r1, r1
    6514:	ee 50       	subi	r30, 0x0E	; 14
    6516:	f5 4f       	sbci	r31, 0xF5	; 245
    6518:	e4 91       	lpm	r30, Z
	Screen.scrollHeight = 30;
	Screen.overlayTileTable = tiles_data;
	Screen.overlayHeight = 2;
	clear_overlay(2);
	game.current_level = index;
	game.camera_x = get_camera_x(index);
    651a:	f0 e0       	ldi	r31, 0x00	; 0
    651c:	f8 87       	std	Y+8, r31	; 0x08
    651e:	ef 83       	std	Y+7, r30	; 0x07
	game.camera_y = get_camera_y(index);
    6520:	81 2f       	mov	r24, r17
    6522:	0e 94 99 31 	call	0x6332	; 0x6332 <get_camera_y>
    6526:	90 e0       	ldi	r25, 0x00	; 0
    6528:	9a 87       	std	Y+10, r25	; 0x0a
    652a:	89 87       	std	Y+9, r24	; 0x09
	game.player.shared.x = get_hero_spawn_x(index)*8;
    652c:	81 2f       	mov	r24, r17
    652e:	0e 94 a6 31 	call	0x634c	; 0x634c <get_hero_spawn_x>
    6532:	28 e0       	ldi	r18, 0x08	; 8
    6534:	82 9f       	mul	r24, r18
    6536:	c0 01       	movw	r24, r0
    6538:	11 24       	eor	r1, r1
    653a:	9f 87       	std	Y+15, r25	; 0x0f
    653c:	8e 87       	std	Y+14, r24	; 0x0e
	game.player.shared.y = get_hero_spawn_y(index)*8;
    653e:	81 2f       	mov	r24, r17
    6540:	0e 94 b3 31 	call	0x6366	; 0x6366 <get_hero_spawn_y>
    6544:	28 e0       	ldi	r18, 0x08	; 8
    6546:	82 9f       	mul	r24, r18
    6548:	c0 01       	movw	r24, r0
    654a:	11 24       	eor	r1, r1
    654c:	99 8b       	std	Y+17, r25	; 0x11
    654e:	88 8b       	std	Y+16, r24	; 0x10
	game.camera_x *= 8;
    6550:	8f 81       	ldd	r24, Y+7	; 0x07
    6552:	98 85       	ldd	r25, Y+8	; 0x08
    6554:	23 e0       	ldi	r18, 0x03	; 3
    6556:	88 0f       	add	r24, r24
    6558:	99 1f       	adc	r25, r25
    655a:	2a 95       	dec	r18
    655c:	e1 f7       	brne	.-8      	; 0x6556 <load_level+0x7a>
    655e:	98 87       	std	Y+8, r25	; 0x08
    6560:	8f 83       	std	Y+7, r24	; 0x07
	game.camera_y *= 8;
    6562:	89 85       	ldd	r24, Y+9	; 0x09
    6564:	9a 85       	ldd	r25, Y+10	; 0x0a
    6566:	33 e0       	ldi	r19, 0x03	; 3
    6568:	88 0f       	add	r24, r24
    656a:	99 1f       	adc	r25, r25
    656c:	3a 95       	dec	r19
    656e:	e1 f7       	brne	.-8      	; 0x6568 <load_level+0x8c>
    6570:	9a 87       	std	Y+10, r25	; 0x0a
    6572:	89 87       	std	Y+9, r24	; 0x09
	render_camera_view();
    6574:	0e 94 d8 31 	call	0x63b0	; 0x63b0 <render_camera_view>
	LBMapSprite(0, LBGetNextFrame(&game.player.idle), 0);
    6578:	82 ef       	ldi	r24, 0xF2	; 242
    657a:	9d e0       	ldi	r25, 0x0D	; 13
    657c:	0e 94 61 2f 	call	0x5ec2	; 0x5ec2 <LBGetNextFrame>
    6580:	40 e0       	ldi	r20, 0x00	; 0
    6582:	bc 01       	movw	r22, r24
    6584:	80 e0       	ldi	r24, 0x00	; 0
}
    6586:	df 91       	pop	r29
    6588:	cf 91       	pop	r28
    658a:	1f 91       	pop	r17
	game.player.shared.x = get_hero_spawn_x(index)*8;
	game.player.shared.y = get_hero_spawn_y(index)*8;
	game.camera_x *= 8;
	game.camera_y *= 8;
	render_camera_view();
	LBMapSprite(0, LBGetNextFrame(&game.player.idle), 0);
    658c:	0c 94 e1 2f 	jmp	0x5fc2	; 0x5fc2 <LBMapSprite>

00006590 <update_player>:
	FadeIn(FRAMES_PER_FADE, false);
	load_level(index);
}

void update_player()
{
    6590:	cf 93       	push	r28
    6592:	df 93       	push	r29
    6594:	1f 92       	push	r1
    6596:	cd b7       	in	r28, 0x3d	; 61
    6598:	de b7       	in	r29, 0x3e	; 62
	if ((game.joypadState.held & BTN_RIGHT) && (game.player.flags & (IDLE|RUNNING)) && (game.player.shared.x/8 + 2 < LEVEL_WIDTH))
    659a:	20 91 1e 0e 	lds	r18, 0x0E1E
    659e:	27 ff       	sbrs	r18, 7
    65a0:	1c c0       	rjmp	.+56     	; 0x65da <update_player+0x4a>
    65a2:	80 91 a4 0d 	lds	r24, 0x0DA4
    65a6:	8a 70       	andi	r24, 0x0A	; 10
    65a8:	c1 f0       	breq	.+48     	; 0x65da <update_player+0x4a>
    65aa:	80 91 9f 0d 	lds	r24, 0x0D9F
    65ae:	90 91 a0 0d 	lds	r25, 0x0DA0
    65b2:	33 e0       	ldi	r19, 0x03	; 3
    65b4:	96 95       	lsr	r25
    65b6:	87 95       	ror	r24
    65b8:	3a 95       	dec	r19
    65ba:	e1 f7       	brne	.-8      	; 0x65b4 <update_player+0x24>
    65bc:	02 96       	adiw	r24, 0x02	; 2
    65be:	cc 97       	sbiw	r24, 0x3c	; 60
    65c0:	60 f4       	brcc	.+24     	; 0x65da <update_player+0x4a>
	{
		game.player.shared.vx = RUN_SPEED;
    65c2:	8c e3       	ldi	r24, 0x3C	; 60
    65c4:	80 93 9c 0d 	sts	0x0D9C, r24
		game.player.flags = RUNNING;
    65c8:	82 e0       	ldi	r24, 0x02	; 2
    65ca:	80 93 a4 0d 	sts	0x0DA4, r24
		LBMapSprite(0, LBGetNextFrame(&game.player.run), 0);
    65ce:	8a ef       	ldi	r24, 0xFA	; 250
    65d0:	9d e0       	ldi	r25, 0x0D	; 13
    65d2:	0e 94 61 2f 	call	0x5ec2	; 0x5ec2 <LBGetNextFrame>
    65d6:	40 e0       	ldi	r20, 0x00	; 0
    65d8:	2a c0       	rjmp	.+84     	; 0x662e <update_player+0x9e>
	}
	else if ((game.joypadState.held & BTN_LEFT) && (game.player.flags & (IDLE|RUNNING)) && (game.player.shared.x > game.camera_x))
    65da:	26 ff       	sbrs	r18, 6
    65dc:	1b c0       	rjmp	.+54     	; 0x6614 <update_player+0x84>
    65de:	80 91 a4 0d 	lds	r24, 0x0DA4
    65e2:	8a 70       	andi	r24, 0x0A	; 10
    65e4:	b9 f0       	breq	.+46     	; 0x6614 <update_player+0x84>
    65e6:	20 91 9f 0d 	lds	r18, 0x0D9F
    65ea:	30 91 a0 0d 	lds	r19, 0x0DA0
    65ee:	80 91 98 0d 	lds	r24, 0x0D98
    65f2:	90 91 99 0d 	lds	r25, 0x0D99
    65f6:	82 17       	cp	r24, r18
    65f8:	93 07       	cpc	r25, r19
    65fa:	60 f4       	brcc	.+24     	; 0x6614 <update_player+0x84>
	{
		game.player.shared.vx = -RUN_SPEED;
    65fc:	84 ec       	ldi	r24, 0xC4	; 196
    65fe:	80 93 9c 0d 	sts	0x0D9C, r24
		game.player.flags = RUNNING;
    6602:	82 e0       	ldi	r24, 0x02	; 2
    6604:	80 93 a4 0d 	sts	0x0DA4, r24
		LBMapSprite(0, LBGetNextFrame(&game.player.run), SPRITE_FLIP_X);
    6608:	8a ef       	ldi	r24, 0xFA	; 250
    660a:	9d e0       	ldi	r25, 0x0D	; 13
    660c:	0e 94 61 2f 	call	0x5ec2	; 0x5ec2 <LBGetNextFrame>
    6610:	41 e0       	ldi	r20, 0x01	; 1
    6612:	0d c0       	rjmp	.+26     	; 0x662e <update_player+0x9e>
	}
	else
	{
		game.player.shared.vx = 0;
    6614:	10 92 9c 0d 	sts	0x0D9C, r1
		game.player.flags = IDLE;
    6618:	88 e0       	ldi	r24, 0x08	; 8
    661a:	80 93 a4 0d 	sts	0x0DA4, r24
		LBMapSprite(0, LBGetNextFrame(&game.player.idle), sprites[0].flags);
    661e:	40 91 05 05 	lds	r20, 0x0505
    6622:	82 ef       	ldi	r24, 0xF2	; 242
    6624:	9d e0       	ldi	r25, 0x0D	; 13
    6626:	49 83       	std	Y+1, r20	; 0x01
    6628:	0e 94 61 2f 	call	0x5ec2	; 0x5ec2 <LBGetNextFrame>
    662c:	49 81       	ldd	r20, Y+1	; 0x01
    662e:	bc 01       	movw	r22, r24
    6630:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    6632:	0f 90       	pop	r0
    6634:	df 91       	pop	r29
    6636:	cf 91       	pop	r28
	}
	else
	{
		game.player.shared.vx = 0;
		game.player.flags = IDLE;
		LBMapSprite(0, LBGetNextFrame(&game.player.idle), sprites[0].flags);
    6638:	0c 94 e1 2f 	jmp	0x5fc2	; 0x5fc2 <LBMapSprite>

0000663c <update_player_position>:
	}
}

void update_player_position()
{
    663c:	cf 92       	push	r12
    663e:	df 92       	push	r13
    6640:	ef 92       	push	r14
    6642:	ff 92       	push	r15
    6644:	0f 93       	push	r16
    6646:	1f 93       	push	r17
    6648:	cf 93       	push	r28
    664a:	df 93       	push	r29
	game.player.shared.x += game.player.shared.vx*FRAME_TIME;
    664c:	c1 e9       	ldi	r28, 0x91	; 145
    664e:	dd e0       	ldi	r29, 0x0D	; 13
    6650:	6e 85       	ldd	r22, Y+14	; 0x0e
    6652:	7f 85       	ldd	r23, Y+15	; 0x0f
    6654:	80 e0       	ldi	r24, 0x00	; 0
    6656:	90 e0       	ldi	r25, 0x00	; 0
    6658:	0e 94 56 35 	call	0x6aac	; 0x6aac <__floatunsisf>
    665c:	6b 01       	movw	r12, r22
    665e:	7c 01       	movw	r14, r24
    6660:	8b 85       	ldd	r24, Y+11	; 0x0b
    6662:	68 2f       	mov	r22, r24
    6664:	77 27       	eor	r23, r23
    6666:	67 fd       	sbrc	r22, 7
    6668:	70 95       	com	r23
    666a:	87 2f       	mov	r24, r23
    666c:	97 2f       	mov	r25, r23
    666e:	0e 94 58 35 	call	0x6ab0	; 0x6ab0 <__floatsisf>
    6672:	29 e8       	ldi	r18, 0x89	; 137
    6674:	38 e8       	ldi	r19, 0x88	; 136
    6676:	48 e8       	ldi	r20, 0x88	; 136
    6678:	5c e3       	ldi	r21, 0x3C	; 60
    667a:	0e 94 e4 35 	call	0x6bc8	; 0x6bc8 <__mulsf3>
    667e:	9b 01       	movw	r18, r22
    6680:	ac 01       	movw	r20, r24
    6682:	c7 01       	movw	r24, r14
    6684:	b6 01       	movw	r22, r12
    6686:	0e 94 c6 34 	call	0x698c	; 0x698c <__addsf3>
    668a:	0e 94 2a 35 	call	0x6a54	; 0x6a54 <__fixunssfsi>
    668e:	16 2f       	mov	r17, r22
    6690:	6e 87       	std	Y+14, r22	; 0x0e
    6692:	7f 87       	std	Y+15, r23	; 0x0f
	game.player.shared.y += game.player.shared.vy*FRAME_TIME;
    6694:	68 89       	ldd	r22, Y+16	; 0x10
    6696:	79 89       	ldd	r23, Y+17	; 0x11
    6698:	80 e0       	ldi	r24, 0x00	; 0
    669a:	90 e0       	ldi	r25, 0x00	; 0
    669c:	0e 94 56 35 	call	0x6aac	; 0x6aac <__floatunsisf>
    66a0:	6b 01       	movw	r12, r22
    66a2:	7c 01       	movw	r14, r24
    66a4:	8c 85       	ldd	r24, Y+12	; 0x0c
    66a6:	68 2f       	mov	r22, r24
    66a8:	77 27       	eor	r23, r23
    66aa:	67 fd       	sbrc	r22, 7
    66ac:	70 95       	com	r23
    66ae:	87 2f       	mov	r24, r23
    66b0:	97 2f       	mov	r25, r23
    66b2:	0e 94 58 35 	call	0x6ab0	; 0x6ab0 <__floatsisf>
    66b6:	29 e8       	ldi	r18, 0x89	; 137
    66b8:	38 e8       	ldi	r19, 0x88	; 136
    66ba:	48 e8       	ldi	r20, 0x88	; 136
    66bc:	5c e3       	ldi	r21, 0x3C	; 60
    66be:	0e 94 e4 35 	call	0x6bc8	; 0x6bc8 <__mulsf3>
    66c2:	9b 01       	movw	r18, r22
    66c4:	ac 01       	movw	r20, r24
    66c6:	c7 01       	movw	r24, r14
    66c8:	b6 01       	movw	r22, r12
    66ca:	0e 94 c6 34 	call	0x698c	; 0x698c <__addsf3>
    66ce:	0e 94 2a 35 	call	0x6a54	; 0x6a54 <__fixunssfsi>
    66d2:	68 8b       	std	Y+16, r22	; 0x10
    66d4:	79 8b       	std	Y+17, r23	; 0x11
	LBMoveSprite(0, game.player.shared.x - game.camera_x, game.player.shared.y - game.camera_y, 2, 3);
    66d6:	89 85       	ldd	r24, Y+9	; 0x09
    66d8:	46 2f       	mov	r20, r22
    66da:	48 1b       	sub	r20, r24
    66dc:	8f 81       	ldd	r24, Y+7	; 0x07
    66de:	61 2f       	mov	r22, r17
    66e0:	68 1b       	sub	r22, r24
    66e2:	03 e0       	ldi	r16, 0x03	; 3
    66e4:	22 e0       	ldi	r18, 0x02	; 2
    66e6:	80 e0       	ldi	r24, 0x00	; 0
    66e8:	0e 94 33 30 	call	0x6066	; 0x6066 <LBMoveSprite>
}
    66ec:	df 91       	pop	r29
    66ee:	cf 91       	pop	r28
    66f0:	1f 91       	pop	r17
    66f2:	0f 91       	pop	r16
    66f4:	ff 90       	pop	r15
    66f6:	ef 90       	pop	r14
    66f8:	df 90       	pop	r13
    66fa:	cf 90       	pop	r12
    66fc:	08 95       	ret

000066fe <update_level>:

void update_level()
{
	if (game.player.shared.vx > 0 &&
    66fe:	80 91 9c 0d 	lds	r24, 0x0D9C
    6702:	18 16       	cp	r1, r24
    6704:	14 f5       	brge	.+68     	; 0x674a <update_level+0x4c>
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
    6706:	80 91 98 0d 	lds	r24, 0x0D98
    670a:	90 91 99 0d 	lds	r25, 0x0D99
    670e:	20 91 9f 0d 	lds	r18, 0x0D9F
    6712:	30 91 a0 0d 	lds	r19, 0x0DA0
    6716:	28 1b       	sub	r18, r24
    6718:	39 0b       	sbc	r19, r25
	LBMoveSprite(0, game.player.shared.x - game.camera_x, game.player.shared.y - game.camera_y, 2, 3);
}

void update_level()
{
	if (game.player.shared.vx > 0 &&
    671a:	20 37       	cpi	r18, 0x70	; 112
    671c:	31 05       	cpc	r19, r1
    671e:	a8 f0       	brcs	.+42     	; 0x674a <update_level+0x4c>
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
		(game.camera_x/8 + CAMERA_WIDTH < LEVEL_WIDTH) &&
    6720:	33 e0       	ldi	r19, 0x03	; 3
    6722:	96 95       	lsr	r25
    6724:	87 95       	ror	r24
    6726:	3a 95       	dec	r19
    6728:	e1 f7       	brne	.-8      	; 0x6722 <update_level+0x24>
    672a:	4c 96       	adiw	r24, 0x1c	; 28
}

void update_level()
{
	if (game.player.shared.vx > 0 &&
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
    672c:	cc 97       	sbiw	r24, 0x3c	; 60
    672e:	68 f4       	brcc	.+26     	; 0x674a <update_level+0x4c>
		(game.camera_x/8 + CAMERA_WIDTH < LEVEL_WIDTH) &&
		(game.camera_y/8 + CAMERA_HEIGHT < LEVEL_HEIGHT))
    6730:	80 91 9a 0d 	lds	r24, 0x0D9A
    6734:	90 91 9b 0d 	lds	r25, 0x0D9B
    6738:	23 e0       	ldi	r18, 0x03	; 3
    673a:	96 95       	lsr	r25
    673c:	87 95       	ror	r24
    673e:	2a 95       	dec	r18
    6740:	e1 f7       	brne	.-8      	; 0x673a <update_level+0x3c>

void update_level()
{
	if (game.player.shared.vx > 0 &&
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
		(game.camera_x/8 + CAMERA_WIDTH < LEVEL_WIDTH) &&
    6742:	89 2b       	or	r24, r25
    6744:	11 f4       	brne	.+4      	; 0x674a <update_level+0x4c>
		(game.camera_y/8 + CAMERA_HEIGHT < LEVEL_HEIGHT))
	{
		move_camera_x();
    6746:	0c 94 55 32 	jmp	0x64aa	; 0x64aa <move_camera_x>
    674a:	08 95       	ret

0000674c <clear_sprites>:
	}
}

void clear_sprites()
{
    674c:	0f 93       	push	r16
    674e:	cf 93       	push	r28
	for(char i = 0; i < MAX_EXTENDED_SPRITES; i++)
    6750:	c0 e0       	ldi	r28, 0x00	; 0
	{
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
    6752:	01 e0       	ldi	r16, 0x01	; 1
    6754:	21 e0       	ldi	r18, 0x01	; 1
    6756:	40 e0       	ldi	r20, 0x00	; 0
    6758:	60 ee       	ldi	r22, 0xE0	; 224
    675a:	8c 2f       	mov	r24, r28
    675c:	0e 94 33 30 	call	0x6066	; 0x6066 <LBMoveSprite>
    6760:	cf 5f       	subi	r28, 0xFF	; 255
	}
}

void clear_sprites()
{
	for(char i = 0; i < MAX_EXTENDED_SPRITES; i++)
    6762:	cc 31       	cpi	r28, 0x1C	; 28
    6764:	b1 f7       	brne	.-20     	; 0x6752 <clear_sprites+0x6>
	{
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
	}
	LBRotateSprites(MAX_SPRITES);
    6766:	8e e0       	ldi	r24, 0x0E	; 14
}
    6768:	cf 91       	pop	r28
    676a:	0f 91       	pop	r16
{
	for(char i = 0; i < MAX_EXTENDED_SPRITES; i++)
	{
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
	}
	LBRotateSprites(MAX_SPRITES);
    676c:	0c 94 71 30 	jmp	0x60e2	; 0x60e2 <LBRotateSprites>

00006770 <level_transition>:
	render_camera_view();
	LBMapSprite(0, LBGetNextFrame(&game.player.idle), 0);
}

void level_transition(u8 index)
{
    6770:	cf 93       	push	r28
    6772:	c8 2f       	mov	r28, r24
	FadeOut(FRAMES_PER_FADE, true);
    6774:	61 e0       	ldi	r22, 0x01	; 1
    6776:	83 e0       	ldi	r24, 0x03	; 3
    6778:	0e 94 2c 2f 	call	0x5e58	; 0x5e58 <FadeOut>
	ClearVram();
    677c:	0e 94 1c 21 	call	0x4238	; 0x4238 <ClearVram>
	clear_sprites();
    6780:	0e 94 a6 33 	call	0x674c	; 0x674c <clear_sprites>
	Print(8, 12, (char*) strLevels+index*16);
    6784:	80 e1       	ldi	r24, 0x10	; 16
    6786:	c8 9f       	mul	r28, r24
    6788:	a0 01       	movw	r20, r0
    678a:	11 24       	eor	r1, r1
    678c:	45 5a       	subi	r20, 0xA5	; 165
    678e:	56 4f       	sbci	r21, 0xF6	; 246
    6790:	6c e0       	ldi	r22, 0x0C	; 12
    6792:	70 e0       	ldi	r23, 0x00	; 0
    6794:	88 e0       	ldi	r24, 0x08	; 8
    6796:	90 e0       	ldi	r25, 0x00	; 0
    6798:	0e 94 a9 2e 	call	0x5d52	; 0x5d52 <Print>
	FadeIn(1, true);
    679c:	61 e0       	ldi	r22, 0x01	; 1
    679e:	81 e0       	ldi	r24, 0x01	; 1
    67a0:	0e 94 20 2f 	call	0x5e40	; 0x5e40 <FadeIn>
	LBWaitSeconds(TEXT_LINGER);
    67a4:	83 e0       	ldi	r24, 0x03	; 3
    67a6:	0e 94 d2 2f 	call	0x5fa4	; 0x5fa4 <LBWaitSeconds>
	FadeOut(1, true);
    67aa:	61 e0       	ldi	r22, 0x01	; 1
    67ac:	81 e0       	ldi	r24, 0x01	; 1
    67ae:	0e 94 2c 2f 	call	0x5e58	; 0x5e58 <FadeOut>
	ClearVram();
    67b2:	0e 94 1c 21 	call	0x4238	; 0x4238 <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    67b6:	60 e0       	ldi	r22, 0x00	; 0
    67b8:	83 e0       	ldi	r24, 0x03	; 3
    67ba:	0e 94 20 2f 	call	0x5e40	; 0x5e40 <FadeIn>
	load_level(index);
    67be:	8c 2f       	mov	r24, r28
}
    67c0:	cf 91       	pop	r28
	FadeIn(1, true);
	LBWaitSeconds(TEXT_LINGER);
	FadeOut(1, true);
	ClearVram();
	FadeIn(FRAMES_PER_FADE, false);
	load_level(index);
    67c2:	0c 94 6e 32 	jmp	0x64dc	; 0x64dc <load_level>

000067c6 <load_splash>:
	init_game_state();
	load_splash();
}

void load_splash()
{
    67c6:	0f 93       	push	r16
	game.current_screen = SPLASH;
    67c8:	e1 e9       	ldi	r30, 0x91	; 145
    67ca:	fd e0       	ldi	r31, 0x0D	; 13
    67cc:	10 82       	st	Z, r1
	game.selection = START_SELECTED;
    67ce:	13 82       	std	Z+3, r1	; 0x03
	clear_sprites();
    67d0:	0e 94 a6 33 	call	0x674c	; 0x674c <clear_sprites>
	Print(8, 15, (char*) str1Player);
    67d4:	4c ea       	ldi	r20, 0xAC	; 172
    67d6:	59 e0       	ldi	r21, 0x09	; 9
    67d8:	6f e0       	ldi	r22, 0x0F	; 15
    67da:	70 e0       	ldi	r23, 0x00	; 0
    67dc:	88 e0       	ldi	r24, 0x08	; 8
    67de:	90 e0       	ldi	r25, 0x00	; 0
    67e0:	0e 94 a9 2e 	call	0x5d52	; 0x5d52 <Print>
	Print(8, 16, (char*) strHighscores);
    67e4:	40 ea       	ldi	r20, 0xA0	; 160
    67e6:	59 e0       	ldi	r21, 0x09	; 9
    67e8:	60 e1       	ldi	r22, 0x10	; 16
    67ea:	70 e0       	ldi	r23, 0x00	; 0
    67ec:	88 e0       	ldi	r24, 0x08	; 8
    67ee:	90 e0       	ldi	r25, 0x00	; 0
    67f0:	0e 94 a9 2e 	call	0x5d52	; 0x5d52 <Print>
	Print(6, 21, (char*) strSelectHandle);
    67f4:	4f e8       	ldi	r20, 0x8F	; 143
    67f6:	59 e0       	ldi	r21, 0x09	; 9
    67f8:	65 e1       	ldi	r22, 0x15	; 21
    67fa:	70 e0       	ldi	r23, 0x00	; 0
    67fc:	86 e0       	ldi	r24, 0x06	; 6
    67fe:	90 e0       	ldi	r25, 0x00	; 0
    6800:	0e 94 a9 2e 	call	0x5d52	; 0x5d52 <Print>
	Print(4, 26, (char*) strCopyright);
    6804:	42 eb       	ldi	r20, 0xB2	; 178
    6806:	59 e0       	ldi	r21, 0x09	; 9
    6808:	6a e1       	ldi	r22, 0x1A	; 26
    680a:	70 e0       	ldi	r23, 0x00	; 0
    680c:	84 e0       	ldi	r24, 0x04	; 4
    680e:	90 e0       	ldi	r25, 0x00	; 0
    6810:	0e 94 a9 2e 	call	0x5d52	; 0x5d52 <Print>
	DrawMap2(6, 5, (const char*) map_splash);
    6814:	40 e2       	ldi	r20, 0x20	; 32
    6816:	57 e3       	ldi	r21, 0x37	; 55
    6818:	65 e0       	ldi	r22, 0x05	; 5
    681a:	86 e0       	ldi	r24, 0x06	; 6
    681c:	0e 94 5c 2e 	call	0x5cb8	; 0x5cb8 <DrawMap>
	LBMapSprite(0, map_right_arrow, 0);
    6820:	40 e0       	ldi	r20, 0x00	; 0
    6822:	64 e3       	ldi	r22, 0x34	; 52
    6824:	7e e1       	ldi	r23, 0x1E	; 30
    6826:	80 e0       	ldi	r24, 0x00	; 0
    6828:	0e 94 e1 2f 	call	0x5fc2	; 0x5fc2 <LBMapSprite>
	LBMoveSprite(0, 7*8, 15*8, 1, 1);
    682c:	01 e0       	ldi	r16, 0x01	; 1
    682e:	21 e0       	ldi	r18, 0x01	; 1
    6830:	48 e7       	ldi	r20, 0x78	; 120
    6832:	68 e3       	ldi	r22, 0x38	; 56
    6834:	80 e0       	ldi	r24, 0x00	; 0
    6836:	0e 94 33 30 	call	0x6066	; 0x6066 <LBMoveSprite>
	LBRotateSprites(1);
    683a:	81 e0       	ldi	r24, 0x01	; 1
}
    683c:	0f 91       	pop	r16
	Print(6, 21, (char*) strSelectHandle);
	Print(4, 26, (char*) strCopyright);
	DrawMap2(6, 5, (const char*) map_splash);
	LBMapSprite(0, map_right_arrow, 0);
	LBMoveSprite(0, 7*8, 15*8, 1, 1);
	LBRotateSprites(1);
    683e:	0c 94 71 30 	jmp	0x60e2	; 0x60e2 <LBRotateSprites>

00006842 <select_pressed>:
}

char select_pressed(JoyPadState* p)
{
    6842:	fc 01       	movw	r30, r24
    6844:	20 81       	ld	r18, Z
    6846:	31 81       	ldd	r19, Z+1	; 0x01
    6848:	28 70       	andi	r18, 0x08	; 8
    684a:	31 70       	andi	r19, 0x01	; 1
	return (p->pressed & BTN_A) || (p->pressed & BTN_START);
    684c:	81 e0       	ldi	r24, 0x01	; 1
    684e:	23 2b       	or	r18, r19
    6850:	09 f4       	brne	.+2      	; 0x6854 <select_pressed+0x12>
    6852:	80 e0       	ldi	r24, 0x00	; 0
}
    6854:	08 95       	ret

00006856 <update_splash>:

void update_splash()
{
    6856:	0f 93       	push	r16
	if (game.joypadState.pressed & BTN_DOWN && game.selection == START_SELECTED)
    6858:	80 91 1a 0e 	lds	r24, 0x0E1A
    685c:	85 ff       	sbrs	r24, 5
    685e:	0b c0       	rjmp	.+22     	; 0x6876 <update_splash+0x20>
    6860:	90 91 94 0d 	lds	r25, 0x0D94
    6864:	91 11       	cpse	r25, r1
    6866:	07 c0       	rjmp	.+14     	; 0x6876 <update_splash+0x20>
	{
		game.selection = HIGH_SCORES_SELECTED;
    6868:	81 e0       	ldi	r24, 0x01	; 1
    686a:	80 93 94 0d 	sts	0x0D94, r24
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
    686e:	01 e0       	ldi	r16, 0x01	; 1
    6870:	21 e0       	ldi	r18, 0x01	; 1
    6872:	40 e8       	ldi	r20, 0x80	; 128
    6874:	0b c0       	rjmp	.+22     	; 0x688c <update_splash+0x36>
	}
	else if (game.joypadState.pressed & BTN_UP && game.selection == HIGH_SCORES_SELECTED)
    6876:	84 ff       	sbrs	r24, 4
    6878:	0e c0       	rjmp	.+28     	; 0x6896 <update_splash+0x40>
    687a:	80 91 94 0d 	lds	r24, 0x0D94
    687e:	81 30       	cpi	r24, 0x01	; 1
    6880:	51 f4       	brne	.+20     	; 0x6896 <update_splash+0x40>
	{
		game.selection = START_SELECTED;
    6882:	10 92 94 0d 	sts	0x0D94, r1
		LBMoveSprite(0, 7*8, 15*8, 1, 1);
    6886:	01 e0       	ldi	r16, 0x01	; 1
    6888:	21 e0       	ldi	r18, 0x01	; 1
    688a:	48 e7       	ldi	r20, 0x78	; 120
    688c:	68 e3       	ldi	r22, 0x38	; 56
    688e:	80 e0       	ldi	r24, 0x00	; 0
    6890:	0e 94 33 30 	call	0x6066	; 0x6066 <LBMoveSprite>
    6894:	11 c0       	rjmp	.+34     	; 0x68b8 <update_splash+0x62>
	}
	else if (select_pressed(&game.joypadState) && game.selection == START_SELECTED)
    6896:	8a e1       	ldi	r24, 0x1A	; 26
    6898:	9e e0       	ldi	r25, 0x0E	; 14
    689a:	0e 94 21 34 	call	0x6842	; 0x6842 <select_pressed>
    689e:	88 23       	and	r24, r24
    68a0:	59 f0       	breq	.+22     	; 0x68b8 <update_splash+0x62>
    68a2:	80 91 94 0d 	lds	r24, 0x0D94
    68a6:	81 11       	cpse	r24, r1
    68a8:	07 c0       	rjmp	.+14     	; 0x68b8 <update_splash+0x62>
	{
		game.current_screen = LEVEL;
    68aa:	82 e0       	ldi	r24, 0x02	; 2
    68ac:	80 93 91 0d 	sts	0x0D91, r24
		level_transition(0);
    68b0:	80 e0       	ldi	r24, 0x00	; 0
		return;
	}
}
    68b2:	0f 91       	pop	r16
		LBMoveSprite(0, 7*8, 15*8, 1, 1);
	}
	else if (select_pressed(&game.joypadState) && game.selection == START_SELECTED)
	{
		game.current_screen = LEVEL;
		level_transition(0);
    68b4:	0c 94 b8 33 	jmp	0x6770	; 0x6770 <level_transition>
		return;
	}
}
    68b8:	0f 91       	pop	r16
    68ba:	08 95       	ret

000068bc <main>:

int main()
{
	// Initialize
	InitMusicPlayer(my_patches);
    68bc:	87 ec       	ldi	r24, 0xC7	; 199
    68be:	99 e0       	ldi	r25, 0x09	; 9
    68c0:	0e 94 f3 22 	call	0x45e6	; 0x45e6 <InitMusicPlayer>
	ClearVram();
    68c4:	0e 94 1c 21 	call	0x4238	; 0x4238 <ClearVram>
	SetMasterVolume(0xff);
    68c8:	8f ef       	ldi	r24, 0xFF	; 255
    68ca:	0e 94 70 26 	call	0x4ce0	; 0x4ce0 <SetMasterVolume>
	SetTileTable(tiles_data);
    68ce:	8a e3       	ldi	r24, 0x3A	; 58
    68d0:	9e e1       	ldi	r25, 0x1E	; 30
    68d2:	0e 94 3e 21 	call	0x427c	; 0x427c <SetTileTable>
	SetSpritesTileTable(sprites_data);
    68d6:	8a e4       	ldi	r24, 0x4A	; 74
    68d8:	91 e1       	ldi	r25, 0x11	; 17
    68da:	0e 94 17 21 	call	0x422e	; 0x422e <SetSpritesTileTable>
	SetFontTilesIndex(TILES_DATA_SIZE);
    68de:	83 e2       	ldi	r24, 0x23	; 35
    68e0:	0e 94 3b 21 	call	0x4276	; 0x4276 <SetFontTilesIndex>
	FadeIn(FRAMES_PER_FADE, false);
    68e4:	60 e0       	ldi	r22, 0x00	; 0
    68e6:	83 e0       	ldi	r24, 0x03	; 3
    68e8:	0e 94 20 2f 	call	0x5e40	; 0x5e40 <FadeIn>
	init_game_state();
    68ec:	0e 94 d8 30 	call	0x61b0	; 0x61b0 <init_game_state>
	load_splash();
    68f0:	0e 94 e3 33 	call	0x67c6	; 0x67c6 <load_splash>
	while (1)
	{
		WaitVsync(1);
    68f4:	81 e0       	ldi	r24, 0x01	; 1
    68f6:	90 e0       	ldi	r25, 0x00	; 0
    68f8:	0e 94 c4 2e 	call	0x5d88	; 0x5d88 <WaitVsync>
		LBGetJoyPadState(&game.joypadState, 0);
    68fc:	60 e0       	ldi	r22, 0x00	; 0
    68fe:	8a e1       	ldi	r24, 0x1A	; 26
    6900:	9e e0       	ldi	r25, 0x0E	; 14
    6902:	0e 94 87 2f 	call	0x5f0e	; 0x5f0e <LBGetJoyPadState>
		switch (game.current_screen)
    6906:	80 91 91 0d 	lds	r24, 0x0D91
    690a:	88 23       	and	r24, r24
    690c:	51 f0       	breq	.+20     	; 0x6922 <main+0x66>
    690e:	82 30       	cpi	r24, 0x02	; 2
    6910:	89 f7       	brne	.-30     	; 0x68f4 <main+0x38>
			case SPLASH:
				update_splash();
				LBRotateSprites(1);
				break;
			case LEVEL:
				update_level();
    6912:	0e 94 7f 33 	call	0x66fe	; 0x66fe <update_level>
				update_player();
    6916:	0e 94 c8 32 	call	0x6590	; 0x6590 <update_player>
				update_player_position();
    691a:	0e 94 1e 33 	call	0x663c	; 0x663c <update_player_position>
				LBRotateSprites(6);
    691e:	86 e0       	ldi	r24, 0x06	; 6
    6920:	03 c0       	rjmp	.+6      	; 0x6928 <main+0x6c>
		WaitVsync(1);
		LBGetJoyPadState(&game.joypadState, 0);
		switch (game.current_screen)
		{
			case SPLASH:
				update_splash();
    6922:	0e 94 2b 34 	call	0x6856	; 0x6856 <update_splash>
				LBRotateSprites(1);
    6926:	81 e0       	ldi	r24, 0x01	; 1
				break;
			case LEVEL:
				update_level();
				update_player();
				update_player_position();
				LBRotateSprites(6);
    6928:	0e 94 71 30 	call	0x60e2	; 0x60e2 <LBRotateSprites>
				break;
    692c:	e3 cf       	rjmp	.-58     	; 0x68f4 <main+0x38>

0000692e <__udivmodhi4>:
    692e:	aa 1b       	sub	r26, r26
    6930:	bb 1b       	sub	r27, r27
    6932:	51 e1       	ldi	r21, 0x11	; 17
    6934:	07 c0       	rjmp	.+14     	; 0x6944 <__udivmodhi4_ep>

00006936 <__udivmodhi4_loop>:
    6936:	aa 1f       	adc	r26, r26
    6938:	bb 1f       	adc	r27, r27
    693a:	a6 17       	cp	r26, r22
    693c:	b7 07       	cpc	r27, r23
    693e:	10 f0       	brcs	.+4      	; 0x6944 <__udivmodhi4_ep>
    6940:	a6 1b       	sub	r26, r22
    6942:	b7 0b       	sbc	r27, r23

00006944 <__udivmodhi4_ep>:
    6944:	88 1f       	adc	r24, r24
    6946:	99 1f       	adc	r25, r25
    6948:	5a 95       	dec	r21
    694a:	a9 f7       	brne	.-22     	; 0x6936 <__udivmodhi4_loop>
    694c:	80 95       	com	r24
    694e:	90 95       	com	r25
    6950:	bc 01       	movw	r22, r24
    6952:	cd 01       	movw	r24, r26
    6954:	08 95       	ret

00006956 <__divmodhi4>:
    6956:	97 fb       	bst	r25, 7
    6958:	07 2e       	mov	r0, r23
    695a:	16 f4       	brtc	.+4      	; 0x6960 <__divmodhi4+0xa>
    695c:	00 94       	com	r0
    695e:	07 d0       	rcall	.+14     	; 0x696e <__divmodhi4_neg1>
    6960:	77 fd       	sbrc	r23, 7
    6962:	09 d0       	rcall	.+18     	; 0x6976 <__divmodhi4_neg2>
    6964:	0e 94 97 34 	call	0x692e	; 0x692e <__udivmodhi4>
    6968:	07 fc       	sbrc	r0, 7
    696a:	05 d0       	rcall	.+10     	; 0x6976 <__divmodhi4_neg2>
    696c:	3e f4       	brtc	.+14     	; 0x697c <__divmodhi4_exit>

0000696e <__divmodhi4_neg1>:
    696e:	90 95       	com	r25
    6970:	81 95       	neg	r24
    6972:	9f 4f       	sbci	r25, 0xFF	; 255
    6974:	08 95       	ret

00006976 <__divmodhi4_neg2>:
    6976:	70 95       	com	r23
    6978:	61 95       	neg	r22
    697a:	7f 4f       	sbci	r23, 0xFF	; 255

0000697c <__divmodhi4_exit>:
    697c:	08 95       	ret

0000697e <__tablejump2__>:
    697e:	ee 0f       	add	r30, r30
    6980:	ff 1f       	adc	r31, r31
    6982:	05 90       	lpm	r0, Z+
    6984:	f4 91       	lpm	r31, Z
    6986:	e0 2d       	mov	r30, r0
    6988:	09 94       	ijmp

0000698a <__subsf3>:
    698a:	50 58       	subi	r21, 0x80	; 128

0000698c <__addsf3>:
    698c:	bb 27       	eor	r27, r27
    698e:	aa 27       	eor	r26, r26
    6990:	0e d0       	rcall	.+28     	; 0x69ae <__addsf3x>
    6992:	e0 c0       	rjmp	.+448    	; 0x6b54 <__fp_round>
    6994:	d1 d0       	rcall	.+418    	; 0x6b38 <__fp_pscA>
    6996:	30 f0       	brcs	.+12     	; 0x69a4 <__addsf3+0x18>
    6998:	d6 d0       	rcall	.+428    	; 0x6b46 <__fp_pscB>
    699a:	20 f0       	brcs	.+8      	; 0x69a4 <__addsf3+0x18>
    699c:	31 f4       	brne	.+12     	; 0x69aa <__addsf3+0x1e>
    699e:	9f 3f       	cpi	r25, 0xFF	; 255
    69a0:	11 f4       	brne	.+4      	; 0x69a6 <__addsf3+0x1a>
    69a2:	1e f4       	brtc	.+6      	; 0x69aa <__addsf3+0x1e>
    69a4:	c6 c0       	rjmp	.+396    	; 0x6b32 <__fp_nan>
    69a6:	0e f4       	brtc	.+2      	; 0x69aa <__addsf3+0x1e>
    69a8:	e0 95       	com	r30
    69aa:	e7 fb       	bst	r30, 7
    69ac:	bc c0       	rjmp	.+376    	; 0x6b26 <__fp_inf>

000069ae <__addsf3x>:
    69ae:	e9 2f       	mov	r30, r25
    69b0:	e2 d0       	rcall	.+452    	; 0x6b76 <__fp_split3>
    69b2:	80 f3       	brcs	.-32     	; 0x6994 <__addsf3+0x8>
    69b4:	ba 17       	cp	r27, r26
    69b6:	62 07       	cpc	r22, r18
    69b8:	73 07       	cpc	r23, r19
    69ba:	84 07       	cpc	r24, r20
    69bc:	95 07       	cpc	r25, r21
    69be:	18 f0       	brcs	.+6      	; 0x69c6 <__addsf3x+0x18>
    69c0:	71 f4       	brne	.+28     	; 0x69de <__addsf3x+0x30>
    69c2:	9e f5       	brtc	.+102    	; 0x6a2a <__addsf3x+0x7c>
    69c4:	fa c0       	rjmp	.+500    	; 0x6bba <__fp_zero>
    69c6:	0e f4       	brtc	.+2      	; 0x69ca <__addsf3x+0x1c>
    69c8:	e0 95       	com	r30
    69ca:	0b 2e       	mov	r0, r27
    69cc:	ba 2f       	mov	r27, r26
    69ce:	a0 2d       	mov	r26, r0
    69d0:	0b 01       	movw	r0, r22
    69d2:	b9 01       	movw	r22, r18
    69d4:	90 01       	movw	r18, r0
    69d6:	0c 01       	movw	r0, r24
    69d8:	ca 01       	movw	r24, r20
    69da:	a0 01       	movw	r20, r0
    69dc:	11 24       	eor	r1, r1
    69de:	ff 27       	eor	r31, r31
    69e0:	59 1b       	sub	r21, r25
    69e2:	99 f0       	breq	.+38     	; 0x6a0a <__addsf3x+0x5c>
    69e4:	59 3f       	cpi	r21, 0xF9	; 249
    69e6:	50 f4       	brcc	.+20     	; 0x69fc <__addsf3x+0x4e>
    69e8:	50 3e       	cpi	r21, 0xE0	; 224
    69ea:	68 f1       	brcs	.+90     	; 0x6a46 <__addsf3x+0x98>
    69ec:	1a 16       	cp	r1, r26
    69ee:	f0 40       	sbci	r31, 0x00	; 0
    69f0:	a2 2f       	mov	r26, r18
    69f2:	23 2f       	mov	r18, r19
    69f4:	34 2f       	mov	r19, r20
    69f6:	44 27       	eor	r20, r20
    69f8:	58 5f       	subi	r21, 0xF8	; 248
    69fa:	f3 cf       	rjmp	.-26     	; 0x69e2 <__addsf3x+0x34>
    69fc:	46 95       	lsr	r20
    69fe:	37 95       	ror	r19
    6a00:	27 95       	ror	r18
    6a02:	a7 95       	ror	r26
    6a04:	f0 40       	sbci	r31, 0x00	; 0
    6a06:	53 95       	inc	r21
    6a08:	c9 f7       	brne	.-14     	; 0x69fc <__addsf3x+0x4e>
    6a0a:	7e f4       	brtc	.+30     	; 0x6a2a <__addsf3x+0x7c>
    6a0c:	1f 16       	cp	r1, r31
    6a0e:	ba 0b       	sbc	r27, r26
    6a10:	62 0b       	sbc	r22, r18
    6a12:	73 0b       	sbc	r23, r19
    6a14:	84 0b       	sbc	r24, r20
    6a16:	ba f0       	brmi	.+46     	; 0x6a46 <__addsf3x+0x98>
    6a18:	91 50       	subi	r25, 0x01	; 1
    6a1a:	a1 f0       	breq	.+40     	; 0x6a44 <__addsf3x+0x96>
    6a1c:	ff 0f       	add	r31, r31
    6a1e:	bb 1f       	adc	r27, r27
    6a20:	66 1f       	adc	r22, r22
    6a22:	77 1f       	adc	r23, r23
    6a24:	88 1f       	adc	r24, r24
    6a26:	c2 f7       	brpl	.-16     	; 0x6a18 <__addsf3x+0x6a>
    6a28:	0e c0       	rjmp	.+28     	; 0x6a46 <__addsf3x+0x98>
    6a2a:	ba 0f       	add	r27, r26
    6a2c:	62 1f       	adc	r22, r18
    6a2e:	73 1f       	adc	r23, r19
    6a30:	84 1f       	adc	r24, r20
    6a32:	48 f4       	brcc	.+18     	; 0x6a46 <__addsf3x+0x98>
    6a34:	87 95       	ror	r24
    6a36:	77 95       	ror	r23
    6a38:	67 95       	ror	r22
    6a3a:	b7 95       	ror	r27
    6a3c:	f7 95       	ror	r31
    6a3e:	9e 3f       	cpi	r25, 0xFE	; 254
    6a40:	08 f0       	brcs	.+2      	; 0x6a44 <__addsf3x+0x96>
    6a42:	b3 cf       	rjmp	.-154    	; 0x69aa <__addsf3+0x1e>
    6a44:	93 95       	inc	r25
    6a46:	88 0f       	add	r24, r24
    6a48:	08 f0       	brcs	.+2      	; 0x6a4c <__addsf3x+0x9e>
    6a4a:	99 27       	eor	r25, r25
    6a4c:	ee 0f       	add	r30, r30
    6a4e:	97 95       	ror	r25
    6a50:	87 95       	ror	r24
    6a52:	08 95       	ret

00006a54 <__fixunssfsi>:
    6a54:	98 d0       	rcall	.+304    	; 0x6b86 <__fp_splitA>
    6a56:	88 f0       	brcs	.+34     	; 0x6a7a <__fixunssfsi+0x26>
    6a58:	9f 57       	subi	r25, 0x7F	; 127
    6a5a:	90 f0       	brcs	.+36     	; 0x6a80 <__fixunssfsi+0x2c>
    6a5c:	b9 2f       	mov	r27, r25
    6a5e:	99 27       	eor	r25, r25
    6a60:	b7 51       	subi	r27, 0x17	; 23
    6a62:	a0 f0       	brcs	.+40     	; 0x6a8c <__fixunssfsi+0x38>
    6a64:	d1 f0       	breq	.+52     	; 0x6a9a <__fixunssfsi+0x46>
    6a66:	66 0f       	add	r22, r22
    6a68:	77 1f       	adc	r23, r23
    6a6a:	88 1f       	adc	r24, r24
    6a6c:	99 1f       	adc	r25, r25
    6a6e:	1a f0       	brmi	.+6      	; 0x6a76 <__fixunssfsi+0x22>
    6a70:	ba 95       	dec	r27
    6a72:	c9 f7       	brne	.-14     	; 0x6a66 <__fixunssfsi+0x12>
    6a74:	12 c0       	rjmp	.+36     	; 0x6a9a <__fixunssfsi+0x46>
    6a76:	b1 30       	cpi	r27, 0x01	; 1
    6a78:	81 f0       	breq	.+32     	; 0x6a9a <__fixunssfsi+0x46>
    6a7a:	9f d0       	rcall	.+318    	; 0x6bba <__fp_zero>
    6a7c:	b1 e0       	ldi	r27, 0x01	; 1
    6a7e:	08 95       	ret
    6a80:	9c c0       	rjmp	.+312    	; 0x6bba <__fp_zero>
    6a82:	67 2f       	mov	r22, r23
    6a84:	78 2f       	mov	r23, r24
    6a86:	88 27       	eor	r24, r24
    6a88:	b8 5f       	subi	r27, 0xF8	; 248
    6a8a:	39 f0       	breq	.+14     	; 0x6a9a <__fixunssfsi+0x46>
    6a8c:	b9 3f       	cpi	r27, 0xF9	; 249
    6a8e:	cc f3       	brlt	.-14     	; 0x6a82 <__fixunssfsi+0x2e>
    6a90:	86 95       	lsr	r24
    6a92:	77 95       	ror	r23
    6a94:	67 95       	ror	r22
    6a96:	b3 95       	inc	r27
    6a98:	d9 f7       	brne	.-10     	; 0x6a90 <__fixunssfsi+0x3c>
    6a9a:	3e f4       	brtc	.+14     	; 0x6aaa <__fixunssfsi+0x56>
    6a9c:	90 95       	com	r25
    6a9e:	80 95       	com	r24
    6aa0:	70 95       	com	r23
    6aa2:	61 95       	neg	r22
    6aa4:	7f 4f       	sbci	r23, 0xFF	; 255
    6aa6:	8f 4f       	sbci	r24, 0xFF	; 255
    6aa8:	9f 4f       	sbci	r25, 0xFF	; 255
    6aaa:	08 95       	ret

00006aac <__floatunsisf>:
    6aac:	e8 94       	clt
    6aae:	09 c0       	rjmp	.+18     	; 0x6ac2 <__floatsisf+0x12>

00006ab0 <__floatsisf>:
    6ab0:	97 fb       	bst	r25, 7
    6ab2:	3e f4       	brtc	.+14     	; 0x6ac2 <__floatsisf+0x12>
    6ab4:	90 95       	com	r25
    6ab6:	80 95       	com	r24
    6ab8:	70 95       	com	r23
    6aba:	61 95       	neg	r22
    6abc:	7f 4f       	sbci	r23, 0xFF	; 255
    6abe:	8f 4f       	sbci	r24, 0xFF	; 255
    6ac0:	9f 4f       	sbci	r25, 0xFF	; 255
    6ac2:	99 23       	and	r25, r25
    6ac4:	a9 f0       	breq	.+42     	; 0x6af0 <__floatsisf+0x40>
    6ac6:	f9 2f       	mov	r31, r25
    6ac8:	96 e9       	ldi	r25, 0x96	; 150
    6aca:	bb 27       	eor	r27, r27
    6acc:	93 95       	inc	r25
    6ace:	f6 95       	lsr	r31
    6ad0:	87 95       	ror	r24
    6ad2:	77 95       	ror	r23
    6ad4:	67 95       	ror	r22
    6ad6:	b7 95       	ror	r27
    6ad8:	f1 11       	cpse	r31, r1
    6ada:	f8 cf       	rjmp	.-16     	; 0x6acc <__floatsisf+0x1c>
    6adc:	fa f4       	brpl	.+62     	; 0x6b1c <__floatsisf+0x6c>
    6ade:	bb 0f       	add	r27, r27
    6ae0:	11 f4       	brne	.+4      	; 0x6ae6 <__floatsisf+0x36>
    6ae2:	60 ff       	sbrs	r22, 0
    6ae4:	1b c0       	rjmp	.+54     	; 0x6b1c <__floatsisf+0x6c>
    6ae6:	6f 5f       	subi	r22, 0xFF	; 255
    6ae8:	7f 4f       	sbci	r23, 0xFF	; 255
    6aea:	8f 4f       	sbci	r24, 0xFF	; 255
    6aec:	9f 4f       	sbci	r25, 0xFF	; 255
    6aee:	16 c0       	rjmp	.+44     	; 0x6b1c <__floatsisf+0x6c>
    6af0:	88 23       	and	r24, r24
    6af2:	11 f0       	breq	.+4      	; 0x6af8 <__floatsisf+0x48>
    6af4:	96 e9       	ldi	r25, 0x96	; 150
    6af6:	11 c0       	rjmp	.+34     	; 0x6b1a <__floatsisf+0x6a>
    6af8:	77 23       	and	r23, r23
    6afa:	21 f0       	breq	.+8      	; 0x6b04 <__floatsisf+0x54>
    6afc:	9e e8       	ldi	r25, 0x8E	; 142
    6afe:	87 2f       	mov	r24, r23
    6b00:	76 2f       	mov	r23, r22
    6b02:	05 c0       	rjmp	.+10     	; 0x6b0e <__floatsisf+0x5e>
    6b04:	66 23       	and	r22, r22
    6b06:	71 f0       	breq	.+28     	; 0x6b24 <__floatsisf+0x74>
    6b08:	96 e8       	ldi	r25, 0x86	; 134
    6b0a:	86 2f       	mov	r24, r22
    6b0c:	70 e0       	ldi	r23, 0x00	; 0
    6b0e:	60 e0       	ldi	r22, 0x00	; 0
    6b10:	2a f0       	brmi	.+10     	; 0x6b1c <__floatsisf+0x6c>
    6b12:	9a 95       	dec	r25
    6b14:	66 0f       	add	r22, r22
    6b16:	77 1f       	adc	r23, r23
    6b18:	88 1f       	adc	r24, r24
    6b1a:	da f7       	brpl	.-10     	; 0x6b12 <__floatsisf+0x62>
    6b1c:	88 0f       	add	r24, r24
    6b1e:	96 95       	lsr	r25
    6b20:	87 95       	ror	r24
    6b22:	97 f9       	bld	r25, 7
    6b24:	08 95       	ret

00006b26 <__fp_inf>:
    6b26:	97 f9       	bld	r25, 7
    6b28:	9f 67       	ori	r25, 0x7F	; 127
    6b2a:	80 e8       	ldi	r24, 0x80	; 128
    6b2c:	70 e0       	ldi	r23, 0x00	; 0
    6b2e:	60 e0       	ldi	r22, 0x00	; 0
    6b30:	08 95       	ret

00006b32 <__fp_nan>:
    6b32:	9f ef       	ldi	r25, 0xFF	; 255
    6b34:	80 ec       	ldi	r24, 0xC0	; 192
    6b36:	08 95       	ret

00006b38 <__fp_pscA>:
    6b38:	00 24       	eor	r0, r0
    6b3a:	0a 94       	dec	r0
    6b3c:	16 16       	cp	r1, r22
    6b3e:	17 06       	cpc	r1, r23
    6b40:	18 06       	cpc	r1, r24
    6b42:	09 06       	cpc	r0, r25
    6b44:	08 95       	ret

00006b46 <__fp_pscB>:
    6b46:	00 24       	eor	r0, r0
    6b48:	0a 94       	dec	r0
    6b4a:	12 16       	cp	r1, r18
    6b4c:	13 06       	cpc	r1, r19
    6b4e:	14 06       	cpc	r1, r20
    6b50:	05 06       	cpc	r0, r21
    6b52:	08 95       	ret

00006b54 <__fp_round>:
    6b54:	09 2e       	mov	r0, r25
    6b56:	03 94       	inc	r0
    6b58:	00 0c       	add	r0, r0
    6b5a:	11 f4       	brne	.+4      	; 0x6b60 <__fp_round+0xc>
    6b5c:	88 23       	and	r24, r24
    6b5e:	52 f0       	brmi	.+20     	; 0x6b74 <__fp_round+0x20>
    6b60:	bb 0f       	add	r27, r27
    6b62:	40 f4       	brcc	.+16     	; 0x6b74 <__fp_round+0x20>
    6b64:	bf 2b       	or	r27, r31
    6b66:	11 f4       	brne	.+4      	; 0x6b6c <__fp_round+0x18>
    6b68:	60 ff       	sbrs	r22, 0
    6b6a:	04 c0       	rjmp	.+8      	; 0x6b74 <__fp_round+0x20>
    6b6c:	6f 5f       	subi	r22, 0xFF	; 255
    6b6e:	7f 4f       	sbci	r23, 0xFF	; 255
    6b70:	8f 4f       	sbci	r24, 0xFF	; 255
    6b72:	9f 4f       	sbci	r25, 0xFF	; 255
    6b74:	08 95       	ret

00006b76 <__fp_split3>:
    6b76:	57 fd       	sbrc	r21, 7
    6b78:	90 58       	subi	r25, 0x80	; 128
    6b7a:	44 0f       	add	r20, r20
    6b7c:	55 1f       	adc	r21, r21
    6b7e:	59 f0       	breq	.+22     	; 0x6b96 <__fp_splitA+0x10>
    6b80:	5f 3f       	cpi	r21, 0xFF	; 255
    6b82:	71 f0       	breq	.+28     	; 0x6ba0 <__fp_splitA+0x1a>
    6b84:	47 95       	ror	r20

00006b86 <__fp_splitA>:
    6b86:	88 0f       	add	r24, r24
    6b88:	97 fb       	bst	r25, 7
    6b8a:	99 1f       	adc	r25, r25
    6b8c:	61 f0       	breq	.+24     	; 0x6ba6 <__fp_splitA+0x20>
    6b8e:	9f 3f       	cpi	r25, 0xFF	; 255
    6b90:	79 f0       	breq	.+30     	; 0x6bb0 <__fp_splitA+0x2a>
    6b92:	87 95       	ror	r24
    6b94:	08 95       	ret
    6b96:	12 16       	cp	r1, r18
    6b98:	13 06       	cpc	r1, r19
    6b9a:	14 06       	cpc	r1, r20
    6b9c:	55 1f       	adc	r21, r21
    6b9e:	f2 cf       	rjmp	.-28     	; 0x6b84 <__fp_split3+0xe>
    6ba0:	46 95       	lsr	r20
    6ba2:	f1 df       	rcall	.-30     	; 0x6b86 <__fp_splitA>
    6ba4:	08 c0       	rjmp	.+16     	; 0x6bb6 <__fp_splitA+0x30>
    6ba6:	16 16       	cp	r1, r22
    6ba8:	17 06       	cpc	r1, r23
    6baa:	18 06       	cpc	r1, r24
    6bac:	99 1f       	adc	r25, r25
    6bae:	f1 cf       	rjmp	.-30     	; 0x6b92 <__fp_splitA+0xc>
    6bb0:	86 95       	lsr	r24
    6bb2:	71 05       	cpc	r23, r1
    6bb4:	61 05       	cpc	r22, r1
    6bb6:	08 94       	sec
    6bb8:	08 95       	ret

00006bba <__fp_zero>:
    6bba:	e8 94       	clt

00006bbc <__fp_szero>:
    6bbc:	bb 27       	eor	r27, r27
    6bbe:	66 27       	eor	r22, r22
    6bc0:	77 27       	eor	r23, r23
    6bc2:	cb 01       	movw	r24, r22
    6bc4:	97 f9       	bld	r25, 7
    6bc6:	08 95       	ret

00006bc8 <__mulsf3>:
    6bc8:	0b d0       	rcall	.+22     	; 0x6be0 <__mulsf3x>
    6bca:	c4 cf       	rjmp	.-120    	; 0x6b54 <__fp_round>
    6bcc:	b5 df       	rcall	.-150    	; 0x6b38 <__fp_pscA>
    6bce:	28 f0       	brcs	.+10     	; 0x6bda <__mulsf3+0x12>
    6bd0:	ba df       	rcall	.-140    	; 0x6b46 <__fp_pscB>
    6bd2:	18 f0       	brcs	.+6      	; 0x6bda <__mulsf3+0x12>
    6bd4:	95 23       	and	r25, r21
    6bd6:	09 f0       	breq	.+2      	; 0x6bda <__mulsf3+0x12>
    6bd8:	a6 cf       	rjmp	.-180    	; 0x6b26 <__fp_inf>
    6bda:	ab cf       	rjmp	.-170    	; 0x6b32 <__fp_nan>
    6bdc:	11 24       	eor	r1, r1
    6bde:	ee cf       	rjmp	.-36     	; 0x6bbc <__fp_szero>

00006be0 <__mulsf3x>:
    6be0:	ca df       	rcall	.-108    	; 0x6b76 <__fp_split3>
    6be2:	a0 f3       	brcs	.-24     	; 0x6bcc <__mulsf3+0x4>

00006be4 <__mulsf3_pse>:
    6be4:	95 9f       	mul	r25, r21
    6be6:	d1 f3       	breq	.-12     	; 0x6bdc <__mulsf3+0x14>
    6be8:	95 0f       	add	r25, r21
    6bea:	50 e0       	ldi	r21, 0x00	; 0
    6bec:	55 1f       	adc	r21, r21
    6bee:	62 9f       	mul	r22, r18
    6bf0:	f0 01       	movw	r30, r0
    6bf2:	72 9f       	mul	r23, r18
    6bf4:	bb 27       	eor	r27, r27
    6bf6:	f0 0d       	add	r31, r0
    6bf8:	b1 1d       	adc	r27, r1
    6bfa:	63 9f       	mul	r22, r19
    6bfc:	aa 27       	eor	r26, r26
    6bfe:	f0 0d       	add	r31, r0
    6c00:	b1 1d       	adc	r27, r1
    6c02:	aa 1f       	adc	r26, r26
    6c04:	64 9f       	mul	r22, r20
    6c06:	66 27       	eor	r22, r22
    6c08:	b0 0d       	add	r27, r0
    6c0a:	a1 1d       	adc	r26, r1
    6c0c:	66 1f       	adc	r22, r22
    6c0e:	82 9f       	mul	r24, r18
    6c10:	22 27       	eor	r18, r18
    6c12:	b0 0d       	add	r27, r0
    6c14:	a1 1d       	adc	r26, r1
    6c16:	62 1f       	adc	r22, r18
    6c18:	73 9f       	mul	r23, r19
    6c1a:	b0 0d       	add	r27, r0
    6c1c:	a1 1d       	adc	r26, r1
    6c1e:	62 1f       	adc	r22, r18
    6c20:	83 9f       	mul	r24, r19
    6c22:	a0 0d       	add	r26, r0
    6c24:	61 1d       	adc	r22, r1
    6c26:	22 1f       	adc	r18, r18
    6c28:	74 9f       	mul	r23, r20
    6c2a:	33 27       	eor	r19, r19
    6c2c:	a0 0d       	add	r26, r0
    6c2e:	61 1d       	adc	r22, r1
    6c30:	23 1f       	adc	r18, r19
    6c32:	84 9f       	mul	r24, r20
    6c34:	60 0d       	add	r22, r0
    6c36:	21 1d       	adc	r18, r1
    6c38:	82 2f       	mov	r24, r18
    6c3a:	76 2f       	mov	r23, r22
    6c3c:	6a 2f       	mov	r22, r26
    6c3e:	11 24       	eor	r1, r1
    6c40:	9f 57       	subi	r25, 0x7F	; 127
    6c42:	50 40       	sbci	r21, 0x00	; 0
    6c44:	8a f0       	brmi	.+34     	; 0x6c68 <__mulsf3_pse+0x84>
    6c46:	e1 f0       	breq	.+56     	; 0x6c80 <__mulsf3_pse+0x9c>
    6c48:	88 23       	and	r24, r24
    6c4a:	4a f0       	brmi	.+18     	; 0x6c5e <__mulsf3_pse+0x7a>
    6c4c:	ee 0f       	add	r30, r30
    6c4e:	ff 1f       	adc	r31, r31
    6c50:	bb 1f       	adc	r27, r27
    6c52:	66 1f       	adc	r22, r22
    6c54:	77 1f       	adc	r23, r23
    6c56:	88 1f       	adc	r24, r24
    6c58:	91 50       	subi	r25, 0x01	; 1
    6c5a:	50 40       	sbci	r21, 0x00	; 0
    6c5c:	a9 f7       	brne	.-22     	; 0x6c48 <__mulsf3_pse+0x64>
    6c5e:	9e 3f       	cpi	r25, 0xFE	; 254
    6c60:	51 05       	cpc	r21, r1
    6c62:	70 f0       	brcs	.+28     	; 0x6c80 <__mulsf3_pse+0x9c>
    6c64:	60 cf       	rjmp	.-320    	; 0x6b26 <__fp_inf>
    6c66:	aa cf       	rjmp	.-172    	; 0x6bbc <__fp_szero>
    6c68:	5f 3f       	cpi	r21, 0xFF	; 255
    6c6a:	ec f3       	brlt	.-6      	; 0x6c66 <__mulsf3_pse+0x82>
    6c6c:	98 3e       	cpi	r25, 0xE8	; 232
    6c6e:	dc f3       	brlt	.-10     	; 0x6c66 <__mulsf3_pse+0x82>
    6c70:	86 95       	lsr	r24
    6c72:	77 95       	ror	r23
    6c74:	67 95       	ror	r22
    6c76:	b7 95       	ror	r27
    6c78:	f7 95       	ror	r31
    6c7a:	e7 95       	ror	r30
    6c7c:	9f 5f       	subi	r25, 0xFF	; 255
    6c7e:	c1 f7       	brne	.-16     	; 0x6c70 <__mulsf3_pse+0x8c>
    6c80:	fe 2b       	or	r31, r30
    6c82:	88 0f       	add	r24, r24
    6c84:	91 1d       	adc	r25, r1
    6c86:	96 95       	lsr	r25
    6c88:	87 95       	ror	r24
    6c8a:	97 f9       	bld	r25, 7
    6c8c:	08 95       	ret

00006c8e <_exit>:
    6c8e:	f8 94       	cli

00006c90 <__stop_program>:
    6c90:	ff cf       	rjmp	.-2      	; 0x6c90 <__stop_program>
