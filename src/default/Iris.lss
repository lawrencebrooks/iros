
Iris.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800500  0000d406  0000d506  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .noinit       00000400  00800100  00800100  0000d520  2**5
                  CONTENTS, READONLY
  2 .text         0000d406  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .bss          00000b04  00800510  00800510  0000d516  2**1
                  ALLOC
  4 .stab         00000708  00000000  00000000  0000d920  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000002f1  00000000  00000000  0000e028  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  0000e319  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000688  00000000  00000000  0000e330  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000090fe  00000000  00000000  0000e9b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000016a1  00000000  00000000  00017ab6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000022a1  00000000  00000000  00019157  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  0000162c  00000000  00000000  0001b3f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00001cc2  00000000  00000000  0001ca24  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00007aa3  00000000  00000000  0001e6e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000808  00000000  00000000  00026190  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 59 35 	jmp	0x6ab2	; 0x6ab2 <__ctors_end>
       4:	0c 94 c2 35 	jmp	0x6b84	; 0x6b84 <__bad_interrupt>
       8:	0c 94 c2 35 	jmp	0x6b84	; 0x6b84 <__bad_interrupt>
       c:	0c 94 c2 35 	jmp	0x6b84	; 0x6b84 <__bad_interrupt>
      10:	0c 94 c2 35 	jmp	0x6b84	; 0x6b84 <__bad_interrupt>
      14:	0c 94 c2 35 	jmp	0x6b84	; 0x6b84 <__bad_interrupt>
      18:	0c 94 c2 35 	jmp	0x6b84	; 0x6b84 <__bad_interrupt>
      1c:	0c 94 c2 35 	jmp	0x6b84	; 0x6b84 <__bad_interrupt>
      20:	0c 94 3a 3b 	jmp	0x7674	; 0x7674 <__vector_8>
      24:	0c 94 c2 35 	jmp	0x6b84	; 0x6b84 <__bad_interrupt>
      28:	0c 94 c2 35 	jmp	0x6b84	; 0x6b84 <__bad_interrupt>
      2c:	0c 94 c2 35 	jmp	0x6b84	; 0x6b84 <__bad_interrupt>
      30:	0c 94 c2 35 	jmp	0x6b84	; 0x6b84 <__bad_interrupt>
      34:	0c 94 06 39 	jmp	0x720c	; 0x720c <__vector_13>
      38:	0c 94 46 39 	jmp	0x728c	; 0x728c <__vector_14>
      3c:	0c 94 c2 35 	jmp	0x6b84	; 0x6b84 <__bad_interrupt>
      40:	0c 94 c2 35 	jmp	0x6b84	; 0x6b84 <__bad_interrupt>
      44:	0c 94 c2 35 	jmp	0x6b84	; 0x6b84 <__bad_interrupt>
      48:	0c 94 c2 35 	jmp	0x6b84	; 0x6b84 <__bad_interrupt>
      4c:	0c 94 c2 35 	jmp	0x6b84	; 0x6b84 <__bad_interrupt>
      50:	0c 94 c2 35 	jmp	0x6b84	; 0x6b84 <__bad_interrupt>
      54:	0c 94 c2 35 	jmp	0x6b84	; 0x6b84 <__bad_interrupt>
      58:	0c 94 c2 35 	jmp	0x6b84	; 0x6b84 <__bad_interrupt>
      5c:	0c 94 c2 35 	jmp	0x6b84	; 0x6b84 <__bad_interrupt>
      60:	0c 94 c2 35 	jmp	0x6b84	; 0x6b84 <__bad_interrupt>
      64:	0c 94 c2 35 	jmp	0x6b84	; 0x6b84 <__bad_interrupt>
      68:	0c 94 c2 35 	jmp	0x6b84	; 0x6b84 <__bad_interrupt>
      6c:	0c 94 c2 35 	jmp	0x6b84	; 0x6b84 <__bad_interrupt>
      70:	81 4f       	sbci	r24, 0xF1	; 241
      72:	81 4f       	sbci	r24, 0xF1	; 241
      74:	81 4f       	sbci	r24, 0xF1	; 241
      76:	81 4f       	sbci	r24, 0xF1	; 241
      78:	7f 4f       	sbci	r23, 0xFF	; 255
      7a:	7f 4f       	sbci	r23, 0xFF	; 255
      7c:	7f 4f       	sbci	r23, 0xFF	; 255
      7e:	7f 4f       	sbci	r23, 0xFF	; 255
      80:	81 4f       	sbci	r24, 0xF1	; 241
      82:	81 4f       	sbci	r24, 0xF1	; 241
      84:	7f 4f       	sbci	r23, 0xFF	; 255
      86:	81 4f       	sbci	r24, 0xF1	; 241
      88:	81 4f       	sbci	r24, 0xF1	; 241
      8a:	81 4f       	sbci	r24, 0xF1	; 241
      8c:	81 4f       	sbci	r24, 0xF1	; 241
      8e:	81 4f       	sbci	r24, 0xF1	; 241
      90:	7f 4f       	sbci	r23, 0xFF	; 255
      92:	81 4f       	sbci	r24, 0xF1	; 241
      94:	81 4f       	sbci	r24, 0xF1	; 241
      96:	81 4f       	sbci	r24, 0xF1	; 241
      98:	7f 4f       	sbci	r23, 0xFF	; 255
      9a:	81 4f       	sbci	r24, 0xF1	; 241
      9c:	81 4f       	sbci	r24, 0xF1	; 241
      9e:	81 4f       	sbci	r24, 0xF1	; 241
      a0:	81 4f       	sbci	r24, 0xF1	; 241
      a2:	b0 5c       	subi	r27, 0xC0	; 192
      a4:	bf 5c       	subi	r27, 0xCF	; 207
      a6:	b3 5c       	subi	r27, 0xC3	; 195
      a8:	bf 5c       	subi	r27, 0xCF	; 207
      aa:	b6 5c       	subi	r27, 0xC6	; 198
      ac:	bf 5c       	subi	r27, 0xCF	; 207
      ae:	b9 5c       	subi	r27, 0xC9	; 201
      b0:	bf 5c       	subi	r27, 0xCF	; 207
      b2:	bc 5c       	subi	r27, 0xCC	; 204
      b4:	bf 5c       	subi	r27, 0xCF	; 207

000000b6 <__trampolines_end>:
      b6:	81 00       	.word	0x0081	; ????
      b8:	45 00       	.word	0x0045	; ????
      ba:	27 ff       	sbrs	r18, 7
      bc:	24 ff       	sbrs	r18, 4
      be:	2a 90       	ld	r2, -Y
      c0:	2b 1c       	adc	r2, r11
      c2:	21 0c       	add	r2, r1
      c4:	22 fb       	bst	r18, 2
      c6:	85 00       	.word	0x0085	; ????
      c8:	84 00       	.word	0x0084	; ????
      ca:	89 03       	fmulsu	r16, r17
      cc:	88 8d       	ldd	r24, Y+24	; 0x18
      ce:	81 09       	sbc	r24, r1
      d0:	6f 02       	muls	r22, r31
      d2:	44 42       	sbci	r20, 0x24	; 36
      d4:	47 00       	.word	0x0047	; ????
      d6:	45 01       	movw	r8, r10
      d8:	b0 83       	st	Z, r27
      da:	b3 00       	.word	0x00b3	; ????
      dc:	b1 01       	movw	r22, r2
      de:	25 11       	cpse	r18, r5
      e0:	8a 4f       	sbci	r24, 0xFA	; 250
      e2:	8b 03       	fmulsu	r16, r19

000000e4 <eeprom_format_table>:
      e4:	5a 55 01 20 01 01 00 38 08 00 00 00 00 00 00 00     ZU. ...8........
	...

00000104 <patchCommands>:
     104:	e3 3c e6 3c 42 3d 46 3d 4d 3d ee 3c f3 3c f8 3c     .<.<B=F=M=.<.<.<
     114:	55 3d fb 3c fe 3c 01 3d 3c 3d 3f 3d 65 3d           U=.<.<.=<=?=e=

00000122 <fader>:
     122:	00 40 88 91 d2 e4 ad b5 b6 be bf ff                 .@..........

0000012e <map_uzeboxlogo2>:
     12e:	05 03 00 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f     ................
	...

0000013f <map_uzeboxlogo>:
     13f:	05 04 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d     ................
     14f:	00 0e 0f 10 11 12                                   ......

00000155 <logo_tileset>:
	...
     1b1:	00 00 00 49 00 00 00 00 00 49 52 52 00 00 00 49     ...I.....IRR...I
     1c1:	52 53 1c 25 00 49 52 52 24 25 25 1b 52 52 5c 2d     RS.%.IRR$%%.RR\-
     1d1:	2d 1c 12 12 00 00 00 00 00 00 00 00 00 00 00 00     -...............
     1e1:	40 49 49 49 00 40 49 49 52 5b 5b 5b 4a 52 52 5b     @III.@IIR[[[JRR[
     1f1:	1c 1c 13 12 5b 1c 24 1c 12 09 09 09 24 1b 12 09     ....[.$.....$...
     201:	09 09 09 0a 0a 0a 0a 0a 0a 0a 0a 13 0a 0a 12 0a     ................
     211:	0a 12 13 0a 00 00 00 00 00 00 00 00 92 52 52 52     .............RRR
     221:	52 52 52 49 13 12 13 09 00 1c 1b 13 0a 12 12 40     RRRI...........@
     231:	1b 65 64 1c 09 0a 00 09 24 1b 1c 65 12 00 00 25     .ed.....$..e...%
     241:	1c 1c 1c 1c 01 00 25 24 1c 1c 1c 1c 00 24 25 24     ......%$.....$%$
     251:	24 24 1c 1c 00 00 00 00 00 00 00 00 49 40 00 00     $$..........I@..
     261:	00 00 00 00 52 49 49 00 00 00 00 00 1c 5b 4a 48     ....RII......[JH
     271:	00 00 00 00 1c 25 52 49 00 00 00 00 65 24 64 49     .....%RI....e$dI
     281:	00 00 00 00 65 25 64 49 00 00 00 00 6d 2e 5c 49     ....e%dI....m.\I
	...
     299:	00 00 40 52 00 00 00 00 00 49 52 5c 00 00 00 00     ..@R.....IR\....
     2a9:	53 52 24 25 00 00 00 53 52 25 25 25 00 00 4a 52     SR$%...SR%%%..JR
     2b9:	25 25 1b 00 00 00 5b 25 13 00 00 1b 00 5b 53 00     %%....[%.....[S.
     2c9:	0a 1c 37 37 09 5b 1c 65 7f 37 2e 2e 52 2e 2e 1c     ..77.[.e.7..R...
     2d9:	13 13 12 00 2e 25 1b 13 12 00 00 12 1c 1c 12 00     .....%..........
     2e9:	00 12 25 1c 12 00 00 12 2e 37 1c 13 00 13 2e 37     ..%......7.....7
     2f9:	36 1c 13 1b 37 37 2e 2e 25 13 1c 1c 2e 2e 2e 2e     6...77..%.......
     309:	1b 1c 1c 1c 6e 6e 6e 1c 1c 1c 1c 1c 09 13 13 12     ....nnn.........
     319:	12 13 13 00 13 13 13 13 13 1c 00 09 13 13 13 13     ................
     329:	1c 01 00 37 13 13 13 1c 13 00 2e 2e 1b 1b 1c 1c     ...7............
     339:	00 1c 77 2e 1b 1b 25 00 13 7f 25 1c 1c 1c 01 0a     ..w...%...%.....
     349:	37 24 1c 1c 1c 13 0a 2e 25 25 09 00 13 2e 24 25     7$......%%....$%
     359:	25 25 25 25 2e 25 25 25 25 25 25 25 25 25 2d 2e     %%%%.%%%%%%%%%-.
     369:	25 1b 1c 1c 2e 2e 25 1c 13 25 1b 13 25 1c 1c 1c     %.....%..%..%...
     379:	1c 01 09 52 1c 1c 13 00 01 1c 5b 5c 0a 00 01 65     ...R......[\...e
     389:	77 5c 1b 00 01 6e 7f 6e 52 1b 00 00 6d 1c 52 49     w\...n.nR...m.RI
     399:	00 00 00 00 1c 13 53 00 00 00 00 00 1c 52 4a 00     ......S......RJ.
     3a9:	00 00 00 00 5b 5b 00 00 00 00 00 00 5c 00 00 00     ....[[......\...
	...
     3d5:	13 5b 7f 77 6e 6e 6e 6e 13 65 77 76 6e 6e 6e 6e     .[.wnnnn.ewvnnnn
     3e5:	1b 65 77 76 76 76 6e 77 1b 5b bf 76 b6 76 76 76     .ewvvvnw.[.v.vvv
     3f5:	09 13 6d bf b7 b6 b7 65 00 1b 12 5c 76 bf 76 6d     ..m....e...\v.vm
     405:	00 00 12 1b 12 5b 5b 5c 00 00 00 00 09 0a 12 13     .....[[\........
     415:	6e 77 24 1c 1c 1c 1c 1c 77 25 1c 1c 1c 1c 24 25     nw$.....w%....$%
     425:	6e 1c 1c 1c 24 25 25 1b 1c 1c 24 25 25 13 00 00     n...$%%...$%%...
     435:	64 6d 6d 1b 00 09 6e bf 6d 5b 09 12 6e bf 6d 5b     dmm...n.m[..n.m[
     445:	5b 12 5b 64 5b 12 13 12 13 1b 12 12 09 01 00 00     [.[d[...........
     455:	1c 24 2e 1c 09 00 09 6e 25 24 01 00 09 76 7f 7f     .$.....n%$...v..
     465:	00 00 12 77 7f 7f 64 12 64 bf bf 77 5b 12 1b 09     ...w..d.d..w[...
     475:	bf 6d 5b 12 1b 09 00 00 12 13 1b 09 00 00 00 00     .m[.............
     485:	09 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     495:	7f 7f 53 13 13 00 00 00 64 12 1b 01 00 00 00 00     ..S.....d.......
     4a5:	1b 12 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     4dd:	26 00 00 00 26 00 26 26 2f 00 00 00 2f 00 00 00     &...&.&&/.../...
     4ed:	37 00 00 00 37 00 00 00 ff 00 00 00 ff 00 00 00     7...7...........
     4fd:	bf 00 00 00 bf 00 00 bf 37 00 00 37 00 00 37 00     ........7..7..7.
     50d:	00 26 26 00 00 00 26 26 00 00 00 00 00 00 00 00     .&&...&&........
     51d:	26 26 26 00 26 26 26 26 00 00 2f 00 2f 00 00 00     &&&.&&&&.././...
     52d:	00 37 00 00 37 00 00 00 ff 00 00 00 ff ff ff ff     .7..7...........
     53d:	00 00 00 00 bf 00 00 00 00 00 00 00 37 00 00 00     ............7...
     54d:	26 26 26 00 26 26 26 26 00 00 00 00 00 00 00 00     &&&.&&&&........
     55d:	26 00 26 26 26 26 00 00 00 00 2f 00 00 00 2f 00     &.&&&&..../.../.
     56d:	00 00 37 00 00 00 37 00 00 00 ff ff ff ff 00 00     ..7...7.........
     57d:	00 00 bf 00 00 00 bf 00 00 00 37 00 00 00 37 00     ..........7...7.
     58d:	26 00 26 26 26 26 00 00 00 00 00 00 00 00 00 00     &.&&&&..........
     59d:	00 00 26 26 26 00 26 00 00 2f 00 00 2f 00 2f 00     ..&&&.&../.././.
     5ad:	37 00 00 00 37 00 00 37 ff 00 00 00 ff 00 00 00     7...7..7........
     5bd:	bf 00 00 00 bf 00 00 bf 37 00 00 37 00 00 37 00     ........7..7..7.
     5cd:	26 26 26 00 00 00 26 00 00 00 00 00 00 00 00 00     &&&...&.........
     5dd:	00 00 26 00 00 00 00 00 00 00 2f 00 00 00 00 00     ..&......./.....
     5ed:	00 37 00 00 00 00 00 00 ff 00 00 00 00 00 00 00     .7..............
     5fd:	00 bf 00 00 00 00 00 00 00 00 37 00 00 00 00 00     ..........7.....
     60d:	00 00 26 00 00 00 00 00 00 00 00 00 00 00 00 00     ..&.............
	...
     631:	00 00 00 e4 00 00 00 00 09 9b ed f6 00 00 00 9b     ................
     641:	a4 ad bf bf 00 52 9b a4 76 7f 7f b7 5b 9b 6d 77     .....R..v...[.mw
     651:	7f 76 6e b7 00 00 00 00 00 00 00 00 00 00 00 00     .vn.............
     661:	5b b6 f6 f6 00 5b f6 ff ff ff ff bf f6 ff ff ff     [....[..........
     671:	ff bf bf ae ff bf ff ff ff b7 ad 65 bf bf ff ff     ...........e....
     681:	b7 b6 ad 65 b7 bf ff ff bf b7 ae 6e b7 bf ff ff     ...e.......n....
     691:	bf b7 b7 65 00 00 00 00 00 00 00 00 f6 f6 ed ed     ...e............
     6a1:	ad a4 a4 9b b6 6d 6d 5c 52 6e 65 64 65 65 65 52     .....mm\RnedeeeR
     6b1:	65 76 6d 25 5c 5c 52 53 6e 24 65 6e 65 52 52 6e     evm%\\RSn$eneRRn
     6c1:	25 25 24 25 5b 52 77 2d 25 25 25 24 52 6e 6e 2d     %%$%[Rw-%%%$Rnn-
     6d1:	25 25 25 25 00 00 00 00 00 00 00 00 9b 49 00 00     %%%%.........I..
     6e1:	00 00 00 00 a4 9b 92 00 00 00 00 00 25 64 93 49     ............%d.I
     6f1:	00 00 00 00 65 2e 9b 52 00 00 00 00 6d 25 65 52     ....e..R....m%eR
     701:	00 00 00 00 6d 2d 65 52 00 00 00 00 6e 2e 64 52     ....m-eR....n.dR
	...
     719:	00 00 49 5b 00 00 00 00 00 4a 5b 65 00 00 00 00     ..I[.....J[e....
     729:	5b 9b 6d 2d 00 00 00 5b 5b 2d 2e 25 00 00 52 5b     [.m-...[[-.%..R[
     739:	2e 2e 1c 09 00 01 5b 2d 1c 01 09 1c 00 5c 5b 01     ......[-.....\[.
     749:	4a 65 77 7f 4a 5b 1c 6e 7f 77 77 76 9b 77 77 6d     Jew.J[.n.wwv.wwm
     759:	65 6e 6e a4 77 6e 65 65 65 5b a4 b7 25 25 5c 52     enn.wneee[..%%\R
     769:	52 6d bf bf 13 09 49 64 7f bf bf bf 09 5c 7f 7f     Rm....Id.....\..
     779:	bf bf b7 bf 7f 7f 77 7f 7f b7 bf bf 77 77 7f 7f     ......w.....ww..
     789:	6e b7 bf bf 77 7f 7f 6e 77 bf bf bf b6 ff ff ff     n...w..nw.......
     799:	bf bf b7 5b bf ff ff ff bf bf a4 64 bf ff ff ff     ...[.......d....
     7a9:	bf ad a4 7f bf ff ff ff bf a4 bf 7f ff ff ff bf     ................
     7b9:	ad bf bf bf ff ff ff b6 bf bf bf 77 ff ff f7 bf     ...........w....
     7c9:	bf bf 77 77 ff ff ff bf bf bf 64 52 6d 7f 6e 2e     ..ww......dRm.n.
     7d9:	2d 2d 25 6e 7f 76 6e 6e 6e 2e 25 65 77 77 77 76     --%n.vnnn.%ewwwv
     7e9:	2e 1c 25 24 7f 77 6e 25 1c 25 1c 1b 77 65 25 25     ..%$.wn%.%..we%%
     7f9:	1c 09 0a 5b 6e 6e 1c 09 49 25 64 64 5b 49 4a 6e     ...[nn..I%dd[IJn
     809:	7f 64 5c 00 53 77 bf 77 5b 5c 00 00 6e 25 5b 4a     .d\.Sw.w[\..n%[J
     819:	00 00 00 00 1c 1b 5b 00 00 00 00 00 24 5b 53 00     ......[.....$[S.
     829:	00 00 00 00 5b 5c 00 00 00 00 00 00 64 00 00 00     ....[\......d...
	...
     855:	5b 5c 7f bf 77 76 77 77 5c 6d 7f b7 77 77 77 77     [\..wvww\m..wwww
     865:	5c 6d 7f bf 77 77 77 bf 5c 64 bf bf bf bf bf 7f     \m..www.\d......
     875:	0a 5c 6e bf bf bf bf 76 00 65 64 6d bf bf bf bf     .\n....v.edm....
     885:	00 00 5b 6d 64 6d ad b6 00 00 00 00 12 5b 64 6d     ..[mdm.......[dm
     895:	77 7f 6e 6e 77 bf bf bf 7f 76 6d 76 77 bf bf bf     w.nnw....vmvw...
     8a5:	77 6d 6e 76 7f bf bf bf 6d 6e 76 7f bf b7 ad f6     wmnv....mnv.....
     8b5:	76 bf bf 76 a4 ad ff ff bf b6 64 ad ff ff ff ff     v..v......d.....
     8c5:	b6 ad bf ff ff ff ff f6 ad b6 ad 64 5b 52 00 00     ...........d[R..
     8d5:	ff ff bf bf ad 5b 64 bf ff ff b6 ad ad bf ff bf     .....[d.........
     8e5:	ff f6 ff ff ff ff bf 64 ff ff ff ff bf b6 76 5b     .......d......v[
     8f5:	ff ff ff bf bf 5b 00 00 ff ff ff 5c 00 00 00 00     .....[.....\....
     905:	a4 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     915:	bf bf 64 5c 5c 00 00 00 6e 5c 65 49 00 00 00 00     ..d\\...n\eI....
     925:	6d 5b 00 00 00 00 00 00 00 00 00 00 00 00 00 00     m[..............
	...

00000955 <logoInitPatches>:
     955:	00 00 00 5e 09 00 00 00 00                          ...^.....

0000095e <initPatch>:
     95e:	00 02 08 00 08 55 04 08 5a 00 00 f8 00 09 90 00     .....U..Z.......
     96e:	0a 1e 32 05 00 00 ff                                ..2....

00000975 <strTwist>:
     975:	49 52 49 53 20 57 41 53 20 41 20 46 4f 4f 4c 00     IRIS WAS A FOOL.
     985:	00 41 4e 44 20 53 4f 20 41 52 45 20 59 4f 55 00     .AND SO ARE YOU.
     995:	57 49 54 48 20 54 48 45 20 45 4d 45 52 41 4c 44     WITH THE EMERALD
     9a5:	53 20 52 45 54 55 52 4e 45 44 00 54 48 45 52 45     S RETURNED.THERE
     9b5:	20 49 53 20 4e 4f 20 53 54 4f 50 50 49 4e 47 20      IS NO STOPPING 
     9c5:	4f 55 52 00 44 4f 4d 49 4e 49 4f 4e 20 4f 56 45     OUR.DOMINION OVE
     9d5:	52 20 54 48 45 20 47 41 4c 41 58 59 00 00 4e 4f     R THE GALAXY..NO
     9e5:	57 20 59 4f 55 20 57 49 4c 4c 20 44 49 45 00 23     W YOU WILL DIE.#
	...

000009f6 <strReveal4>:
     9f6:	59 4f 55 20 44 4f 4e 54 20 4b 4e 4f 57 00 57 48     YOU DONT KNOW.WH
     a06:	41 54 20 59 4f 55 20 41 52 45 20 44 4f 49 4e 47     AT YOU ARE DOING
     a16:	00 23 00                                            .#.

00000a19 <strReveal3>:
     a19:	59 4f 55 20 41 52 45 20 4d 41 4b 49 4e 47 20 41     YOU ARE MAKING A
     a29:	20 4d 49 53 54 41 4b 45 00 23 00                     MISTAKE.#.

00000a34 <strReveal2>:
     a34:	59 4f 55 20 43 41 4e 54 20 48 41 56 45 20 54 48     YOU CANT HAVE TH
     a44:	45 4d 20 41 4c 4c 00 23 00                          EM ALL.#.

00000a4d <strReveal1>:
     a4d:	59 4f 55 20 41 52 45 20 50 45 52 53 49 53 54 45     YOU ARE PERSISTE
     a5d:	4e 54 00 23 00                                      NT.#.

00000a62 <strReveal0>:
     a62:	49 20 4b 4e 45 57 20 54 48 45 59 20 57 4f 55 4c     I KNEW THEY WOUL
     a72:	44 20 53 45 4e 44 20 59 4f 55 00 23 00              D SEND YOU.#.

00000a7f <strIntro>:
     a7f:	49 52 49 53 20 48 41 53 20 42 45 54 52 41 59 45     IRIS HAS BETRAYE
     a8f:	44 20 55 53 00 00 48 45 20 48 41 53 20 53 54 4f     D US..HE HAS STO
     a9f:	4c 45 4e 20 54 48 45 20 35 20 45 4d 45 52 41 4c     LEN THE 5 EMERAL
     aaf:	44 53 00 4f 46 20 50 4f 57 45 52 20 41 4e 44 20     DS.OF POWER AND 
     abf:	57 49 4c 4c 20 53 55 52 45 4c 59 00 42 52 49 4e     WILL SURELY.BRIN
     acf:	47 20 52 55 49 4e 20 54 4f 20 55 53 20 41 4c 4c     G RUIN TO US ALL
     adf:	00 00 44 45 53 54 52 4f 59 20 48 49 4d 20 41 4e     ..DESTROY HIM AN
     aef:	44 20 52 45 54 55 52 4e 20 54 48 45 00 45 4d 45     D RETURN THE.EME
     aff:	52 41 4c 44 53 20 54 4f 20 42 52 49 4e 47 20 50     RALDS TO BRING P
     b0f:	45 41 43 45 20 54 4f 00 54 48 45 20 47 41 4c 41     EACE TO.THE GALA
     b1f:	58 59 00 23 00                                      XY.#.

00000b24 <default_scores>:
     b24:	55 5a 45 00 00 4c 4a 42 00 00 41 41 41 00 00 42     UZE..LJB..AAA..B
     b34:	42 42 00 00 43 43 43 00 00 44 44 44 00 00           BB..CCC..DDD..

00000b42 <strTally>:
     b42:	54 41 4c 4c 59 20 00                                TALLY .

00000b49 <strGameOver>:
     b49:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

00000b53 <strLevelBonus>:
     b53:	42 4f 4e 55 53 00                                   BONUS.

00000b59 <strLevelClear>:
     b59:	4c 45 56 45 4c 20 43 4c 45 41 52 00                 LEVEL CLEAR.

00000b65 <strPaused>:
     b65:	50 41 55 53 45 00                                   PAUSE.

00000b6b <strExitGame>:
     b6b:	58 20 45 58 49 54 20 47 41 4d 45 00                 X EXIT GAME.

00000b77 <strMainMenu>:
     b77:	58 20 4d 41 49 4e 20 4d 45 4e 55 00                 X MAIN MENU.

00000b83 <strTime>:
     b83:	54 49 4d 45 20 00                                   TIME .

00000b89 <strLives>:
     b89:	4c 49 56 45 53 20 00                                LIVES .

00000b90 <strShield>:
     b90:	53 48 49 45 4c 44 20 00                             SHIELD .

00000b98 <strScore>:
     b98:	53 43 4f 52 45 20 00                                SCORE .

00000b9f <strSelectHandle>:
	...

00000ba0 <strHighScores>:
     ba0:	48 49 47 48 20 53 43 4f 52 45 53 00                 HIGH SCORES.

00000bac <str1Player>:
     bac:	53 54 41 52 54 00                                   START.

00000bb2 <strMusic>:
     bb2:	4d 55 53 49 43 20 42 59 20 54 41 4e 4e 45 52 20     MUSIC BY TANNER 
     bc2:	48 45 4c 4c 41 4e 44 00                             HELLAND.

00000bca <strCopyright>:
     bca:	32 30 31 36 20 4c 41 57 52 45 4e 43 45 20 42 52     2016 LAWRENCE BR
     bda:	4f 4f 4b 53 00                                      OOKS.

00000bdf <spacesong>:
     bdf:	00 c0 00 00 c1 01 00 b0 07 7f 00 07 7f 00 90 43     ...............C
     bef:	64 00 46 64 00 4b 64 00 4f 64 00 b1 07 74 00 91     d.Fd.Kd.Od...t..
     bff:	33 64 00 ff 06 01 53 1d 91 33 64 0a 33 64 14 90     3d....S..3d.3d..
     c0f:	4b 64 00 46 64 00 43 64 00 91 33 64 27 33 64 14     Kd.Fd.Cd..3d'3d.
     c1f:	90 46 64 00 43 64 00 4b 64 00 4f 64 00 91 33 64     .Fd.Cd.Kd.Od..3d
     c2f:	14 33 64 0a 90 41 64 00 4d 64 0a 41 64 00 46 64     .3d..Ad.Md.Ad.Fd
     c3f:	00 4a 64 00 4d 64 00 91 2e 64 1e 2e 64 09 2e 64     .Jd.Md...d..d..d
     c4f:	14 90 41 64 00 46 64 00 4a 64 00 91 2e 64 28 2e     ..Ad.Fd.Jd...d(.
     c5f:	64 14 90 41 64 00 46 64 00 4a 64 00 4d 64 00 91     d..Ad.Fd.Jd.Md..
     c6f:	2e 64 13 2e 64 0a 90 3f 64 00 4b 64 0a 3f 64 00     .d..d..?d.Kd.?d.
     c7f:	44 64 00 48 64 00 4b 64 00 91 2c 64 1e 2c 64 0a     Dd.Hd.Kd..,d.,d.
     c8f:	2c 64 14 90 41 64 00 46 64 00 4a 64 00 91 2c 64     ,d..Ad.Fd.Jd..,d
     c9f:	13 2e 64 14 90 46 64 00 91 2c 64 14 90 3f 64 00     ..d..Fd..,d..?d.
     caf:	43 64 00 48 64 00 91 2e 64 14 30 64 14 90 43 64     Cd.Hd...d.0d..Cd
     cbf:	00 48 64 00 4b 64 00 4f 64 00 91 30 64 1d 30 64     .Hd.Kd.Od..0d.0d
     ccf:	0a 30 64 14 90 4b 64 00 48 64 00 43 64 00 91 30     .0d..Kd.Hd.Cd..0
     cdf:	64 28 30 64 13 90 43 64 00 48 64 00 4b 64 00 4f     d(0d..Cd.Hd.Kd.O
     cef:	64 00 91 30 64 14 30 64 0a 90 41 64 00 4d 64 0a     d..0d.0d..Ad.Md.
     cff:	43 64 00 46 64 00 4b 64 00 4f 64 00 91 33 64 1e     Cd.Fd.Kd.Od..3d.
     d0f:	33 64 09 33 64 14 90 4b 64 00 46 64 00 43 64 00     3d.3d..Kd.Fd.Cd.
     d1f:	91 33 64 28 33 64 14 90 46 64 00 43 64 00 4b 64     .3d(3d..Fd.Cd.Kd
     d2f:	00 4f 64 00 91 33 64 13 33 64 0a 90 41 64 00 4d     .Od..3d.3d..Ad.M
     d3f:	64 0a 41 64 00 46 64 00 4a 64 00 4d 64 00 91 2e     d.Ad.Fd.Jd.Md...
     d4f:	64 1e 2e 64 0a 2e 64 14 90 41 64 00 46 64 00 4a     d..d..d..Ad.Fd.J
     d5f:	64 00 91 2e 64 27 2e 64 14 90 41 64 00 46 64 00     d...d'.d..Ad.Fd.
     d6f:	4a 64 00 4d 64 00 91 2e 64 14 2e 64 0a 90 3f 64     Jd.Md...d..d..?d
     d7f:	00 4b 64 0a 3f 64 00 44 64 00 48 64 00 4b 64 00     .Kd.?d.Dd.Hd.Kd.
     d8f:	91 2c 64 1d 2c 64 0a 2c 64 14 90 41 64 00 46 64     .,d.,d.,d..Ad.Fd
     d9f:	00 4a 64 00 91 2c 64 14 2e 64 14 90 46 64 00 91     .Jd..,d..d..Fd..
     daf:	2c 64 13 90 3f 64 00 43 64 00 48 64 00 91 30 64     ,d..?d.Cd.Hd..0d
     dbf:	14 30 64 14 90 48 64 00 91 2c 6e 14 2c 4b 06 90     .0d..Hd..,n.,K..
     dcf:	4a 64 0e 91 2c 4b 0d 90 4b 64 06 91 2c 6e 14 90     Jd..,K..Kd..,n..
     ddf:	4d 64 00 91 2c 4b 14 2c 4b 07 90 4b 64 0d 91 2c     Md..,K.,K..Kd..,
     def:	6e 0d 90 4a 64 07 91 2c 4b 13 90 48 64 00 91 30     n..Jd..,K..Hd..0
     dff:	6e 14 30 4b 07 90 4a 64 0d 91 30 4b 0d 90 46 64     n.0K..Jd..0K..Fd
     e0f:	07 91 30 6e 13 90 43 64 00 91 30 4b 14 30 4b 07     ..0n..Cd..0K.0K.
     e1f:	90 46 64 0d 91 30 6e 0d 90 48 64 07 91 30 4b 14     .Fd..0n..Hd..0K.
     e2f:	90 48 64 00 91 2c 6e 13 2c 4b 07 90 4a 64 0d 91     .Hd..,n.,K..Jd..
     e3f:	2c 4b 0d 90 4b 64 07 91 2c 6e 14 90 4d 64 00 91     ,K..Kd..,n..Md..
     e4f:	2c 4b 14 2c 4b 06 90 4b 64 0d 91 2c 6e 0e 90 4d     ,K.,K..Kd..,n..M
     e5f:	64 06 91 2c 4b 14 90 4f 64 00 91 30 6e 14 30 4b     d..,K..Od..0n.0K
     e6f:	07 90 50 64 0d 91 30 4b 0e 90 4d 64 05 91 30 6e     ..Pd..0K..Md..0n
     e7f:	14 90 4f 64 00 91 30 4b 14 30 4b 07 90 4d 64 0d     ..Od..0K.0K..Md.
     e8f:	91 30 6e 0d 90 4b 64 07 91 30 4b 13 90 4d 64 00     .0n..Kd..0K..Md.
     e9f:	91 2b 6e 14 2b 4b 07 90 4f 64 0d 91 2b 4b 0d 90     .+n.+K..Od..+K..
     eaf:	4d 64 07 91 2b 6e 14 90 4b 64 00 91 2b 4b 13 2b     Md..+n..Kd..+K.+
     ebf:	4b 07 90 46 64 0d 91 2b 6e 0d 90 4b 64 07 91 2b     K..Fd..+n..Kd..+
     ecf:	4b 14 90 4d 64 00 91 2c 6e 13 2c 4b 07 90 50 64     K..Md..,n.,K..Pd
     edf:	0d 91 2c 4b 0d 90 4f 64 07 91 2c 6e 14 90 4d 64     ..,K..Od..,n..Md
     eef:	00 91 2c 4b 14 2c 4b 06 90 48 64 0d 91 2c 6e 0e     ..,K.,K..Hd..,n.
     eff:	90 4d 64 06 91 2c 4b 14 90 52 64 00 91 27 6e 0d     .Md..,K..Rd..'n.
     f0f:	90 50 64 07 91 27 4b 06 90 4f 64 0e 50 64 00 91     .Pd..'K..Od.Pd..
     f1f:	27 4b 0d 90 4f 64 06 91 27 6e 07 90 4d 64 0d 4b     'K..Od..'n..Md.K
     f2f:	64 00 91 27 4b 14 27 4b 07 90 46 64 0d 91 27 6e     d..'K.'K..Fd..'n
     f3f:	0d 90 4b 64 07 91 27 4b 13 90 47 64 00 91 26 6e     ..Kd..'K..Gd..&n
     f4f:	14 26 4b 07 90 4a 64 0d 91 26 4b 0d 90 4f 64 07     .&K..Jd..&K..Od.
     f5f:	91 26 6e 14 90 53 64 00 91 26 4b 13 26 4b 07 90     .&n..Sd..&K.&K..
     f6f:	56 64 0d 91 26 6e 0d 90 5b 64 07 91 26 4b 14 90     Vd..&n..[d..&K..
     f7f:	3d 64 00 91 31 64 06 90 41 64 07 44 64 07 49 64     =d..1d..Ad.Dd.Id
     f8f:	06 4d 64 07 50 64 06 55 64 07 59 64 07 5c 64 06     .Md.Pd.Ud.Yd.\d.
     f9f:	59 64 07 55 64 06 50 64 07 4d 64 07 49 64 06 44     Yd.Ud.Pd.Md.Id.D
     faf:	64 07 41 64 06 3d 64 07 38 64 07 3d 64 06 41 64     d.Ad.=d.8d.=d.Ad
     fbf:	07 44 64 06 49 64 07 44 64 07 41 64 06 43 64 00     .Dd.Id.Dd.Ad.Cd.
     fcf:	91 37 64 07 90 47 64 06 4a 64 07 4f 64 06 53 64     .7d..Gd.Jd.Od.Sd
     fdf:	07 56 64 07 5b 64 06 5f 64 07 62 64 06 5f 64 07     .Vd.[d._d.bd._d.
     fef:	5b 64 07 56 64 06 53 64 07 4f 64 06 4a 64 07 47     [d.Vd.Sd.Od.Jd.G
     fff:	64 07 43 64 06 3e 64 07 43 64 06 47 64 07 4a 64     d.Cd.>d.Cd.Gd.Jd
    100f:	07 4f 64 06 4a 64 07 47 64 06 46 64 00 91 3a 64     .Od.Jd.Gd.Fd..:d
    101f:	07 90 4a 64 07 4d 64 06 52 64 07 56 64 06 59 64     ..Jd.Md.Rd.Vd.Yd
    102f:	07 5e 64 07 62 64 06 65 64 07 62 64 06 5e 64 07     .^d.bd.ed.bd.^d.
    103f:	59 64 07 56 64 06 52 64 07 4d 64 06 4a 64 07 46     Yd.Vd.Rd.Md.Jd.F
    104f:	64 07 41 64 06 46 64 07 4a 64 06 4d 64 07 52 64     d.Ad.Fd.Jd.Md.Rd
    105f:	07 4d 64 06 4a 64 07 54 7f 00 43 64 00 48 64 00     .Md.Jd.T..Cd.Hd.
    106f:	4b 64 00 4f 64 00 91 30 64 1d 30 64 0a 30 64 14     Kd.Od..0d.0d.0d.
    107f:	90 4b 64 00 48 64 00 43 64 00 91 30 64 28 30 64     .Kd.Hd.Cd..0d(0d
    108f:	14 90 43 64 00 48 64 00 4b 64 00 4f 64 00 91 30     ..Cd.Hd.Kd.Od..0
    109f:	64 13 30 64 0a 90 41 64 00 4d 64 0a 43 64 00 46     d.0d..Ad.Md.Cd.F
    10af:	64 00 4b 64 00 4f 64 00 91 33 64 1e 33 64 0a 33     d.Kd.Od..3d.3d.3
    10bf:	64 14 90 4b 64 00 46 64 00 43 64 00 91 33 64 27     d..Kd.Fd.Cd..3d'
    10cf:	33 64 14 90 46 64 00 43 64 00 4b 64 00 4f 64 00     3d..Fd.Cd.Kd.Od.
    10df:	91 33 64 14 33 64 0a 90 41 64 00 4d 64 0a 41 64     .3d.3d..Ad.Md.Ad
    10ef:	00 46 64 00 4a 64 00 4d 64 00 91 2e 64 1d 2e 64     .Fd.Jd.Md...d..d
    10ff:	0a 2e 64 14 90 41 64 00 46 64 00 4a 64 00 91 2e     ..d..Ad.Fd.Jd...
    110f:	64 27 2e 64 14 90 41 64 00 46 64 00 4a 64 00 4d     d'.d..Ad.Fd.Jd.M
    111f:	64 00 91 2e 64 14 2e 64 0a 90 3f 64 00 4b 64 0a     d...d..d..?d.Kd.
    112f:	3f 64 00 44 64 00 48 64 00 4b 64 00 91 2c 64 1e     ?d.Dd.Hd.Kd..,d.
    113f:	2c 64 09 2c 64 14 90 41 64 00 46 64 00 4a 64 00     ,d.,d..Ad.Fd.Jd.
    114f:	91 2c 64 14 2e 64 14 90 46 64 00 91 2c 64 14 90     .,d..d..Fd..,d..
    115f:	3f 64 00 43 64 00 48 64 00 91 2e 64 13 30 64 14     ?d.Cd.Hd...d.0d.
    116f:	90 43 64 00 48 64 00 4b 64 00 4f 64 00 91 30 64     .Cd.Hd.Kd.Od..0d
    117f:	1e 30 64 0a 30 64 14 90 4b 64 00 48 64 00 43 64     .0d.0d..Kd.Hd.Cd
    118f:	00 91 30 64 27 30 64 14 90 43 64 00 48 64 00 4b     ..0d'0d..Cd.Hd.K
    119f:	64 00 4f 64 00 91 30 64 14 30 64 0a 90 41 64 00     d.Od..0d.0d..Ad.
    11af:	4d 64 0a 43 64 00 46 64 00 4b 64 00 4f 64 00 91     Md.Cd.Fd.Kd.Od..
    11bf:	33 64 1d 33 64 0a 33 64 14 90 4b 64 00 46 64 00     3d.3d.3d..Kd.Fd.
    11cf:	43 64 00 91 33 64 28 33 64 13 90 46 64 00 43 64     Cd..3d(3d..Fd.Cd
    11df:	00 4b 64 00 4f 64 00 91 33 64 14 33 64 0a 90 41     .Kd.Od..3d.3d..A
    11ef:	64 00 4d 64 0a 41 64 00 46 64 00 4a 64 00 4d 64     d.Md.Ad.Fd.Jd.Md
    11ff:	00 91 2e 64 1e 2e 64 09 2e 64 14 90 41 64 00 46     ...d..d..d..Ad.F
    120f:	64 00 4a 64 00 91 2e 64 28 2e 64 14 90 41 64 00     d.Jd...d(.d..Ad.
    121f:	46 64 00 4a 64 00 4d 64 00 91 2e 64 13 2e 64 0a     Fd.Jd.Md...d..d.
    122f:	90 3f 64 00 4b 64 0a 3f 64 00 44 64 00 48 64 00     .?d.Kd.?d.Dd.Hd.
    123f:	4b 64 00 91 2c 64 1e 2c 64 0a 2c 64 14 90 41 64     Kd..,d.,d.,d..Ad
    124f:	00 46 64 00 4a 64 00 91 2c 64 13 2e 64 14 90 46     .Fd.Jd..,d..d..F
    125f:	64 00 91 2c 64 0f ff 06 01 45 05 90 3f 64 00 43     d..,d....E..?d.C
    126f:	64 00 48 64 00 91 30 64 14 30 64 81 0a ff 2f 00     d.Hd..0d.0d.../.

0000127f <planetsong>:
    127f:	00 c0 00 00 c1 01 00 b0 07 7f 00 b1 07 74 00 ff     .............t..
    128f:	06 01 53 1b 90 48 78 00 91 30 6e 07 90 43 55 00     ..S..Hx..0n..CU.
    129f:	91 30 50 07 90 48 55 00 91 30 50 07 90 4a 78 00     .0P..HU..0P..Jx.
    12af:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 48 55 00     .0n..KU..0P..HU.
    12bf:	91 30 50 07 90 4a 78 00 91 30 6e 07 90 4b 55 00     .0P..Jx..0n..KU.
    12cf:	91 30 50 07 90 4d 55 00 91 30 50 07 90 4a 78 00     .0P..MU..0P..Jx.
    12df:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 4d 55 00     .0n..KU..0P..MU.
    12ef:	91 30 50 07 90 4f 78 00 91 30 6e 07 90 4b 55 00     .0P..Ox..0n..KU.
    12ff:	91 30 50 07 90 4d 78 00 91 2e 6e 07 90 4f 55 07     .0P..Mx...n..OU.
    130f:	50 78 00 91 30 6e 06 90 4d 55 00 91 30 50 07 90     Px..0n..MU..0P..
    131f:	4f 55 00 91 30 50 07 90 4b 78 00 91 30 6e 07 90     OU..0P..Kx..0n..
    132f:	4d 55 00 91 30 50 07 90 4a 55 00 91 30 50 07 30     MU..0P..JU..0P.0
    133f:	6e 03 90 4b 78 04 48 55 00 91 30 50 07 90 4a 55     n..Kx.HU..0P..JU
    134f:	00 91 30 50 07 90 46 78 00 91 30 6e 07 90 4d 55     ..0P..Fx..0n..MU
    135f:	00 91 30 50 07 90 46 78 00 91 30 50 07 90 4f 55     ..0P..Fx..0P..OU
    136f:	00 91 30 6e 07 90 46 78 00 91 30 50 07 90 4d 55     ..0n..Fx..0P..MU
    137f:	00 91 2e 6e 07 90 46 78 07 48 55 00 91 30 6e 07     ...n..Fx.HU..0n.
    138f:	90 43 55 00 91 30 50 07 90 48 55 00 91 30 50 07     .CU..0P..HU..0P.
    139f:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    13af:	90 48 55 00 91 30 50 06 90 4a 55 00 91 30 6e 07     .HU..0P..JU..0n.
    13bf:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 30 50 07     .KU..0P..MU..0P.
    13cf:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    13df:	90 4d 55 00 91 30 50 07 90 4f 55 00 91 30 6e 07     .MU..0P..OU..0n.
    13ef:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 2e 6e 07     .KU..0P..MU...n.
    13ff:	90 4f 55 07 50 55 00 91 30 6e 07 90 4d 55 00 91     .OU.PU..0n..MU..
    140f:	30 50 07 90 4f 55 00 91 30 50 07 90 4b 55 00 91     0P..OU..0P..KU..
    141f:	30 6e 07 90 4d 55 00 91 30 50 07 90 4a 55 00 91     0n..MU..0P..JU..
    142f:	30 50 07 30 6e 02 90 4b 55 05 48 55 00 91 30 50     0P.0n..KU.HU..0P
    143f:	07 90 4a 55 00 91 30 50 07 90 46 55 00 91 30 6e     ..JU..0P..FU..0n
    144f:	06 90 4d 55 00 91 30 50 07 90 46 55 00 91 30 50     ..MU..0P..FU..0P
    145f:	07 90 4f 55 00 91 30 6e 07 90 46 55 00 91 30 50     ..OU..0n..FU..0P
    146f:	07 90 4d 55 00 91 2e 6e 07 90 46 55 07 48 78 00     ..MU...n..FU.Hx.
    147f:	91 2c 6e 07 90 43 55 00 91 2c 50 07 90 48 55 00     .,n..CU..,P..HU.
    148f:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
    149f:	91 2c 50 07 90 48 55 00 91 2c 50 07 90 4a 78 00     .,P..HU..,P..Jx.
    14af:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 55 00     .,n..KU..,P..MU.
    14bf:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
    14cf:	91 2c 50 07 90 4d 55 00 91 2c 50 07 90 4f 78 00     .,P..MU..,P..Ox.
    14df:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 78 00     .,n..KU..,P..Mx.
    14ef:	91 2b 6e 06 90 4f 55 07 50 78 00 91 2c 6e 07 90     .+n..OU.Px..,n..
    14ff:	4d 55 00 91 2c 50 07 90 4f 55 00 91 2c 50 07 90     MU..,P..OU..,P..
    150f:	4b 78 00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90     Kx..,n..MU..,P..
    151f:	4a 55 00 91 2c 50 07 2c 6e 02 90 4b 78 05 48 55     JU..,P.,n..Kx.HU
    152f:	00 91 2c 50 07 90 4a 55 00 91 2c 50 07 90 46 78     ..,P..JU..,P..Fx
    153f:	00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90 46 78     ..,n..MU..,P..Fx
    154f:	00 91 2c 50 07 90 4f 55 00 91 2c 6e 07 90 46 78     ..,P..OU..,n..Fx
    155f:	00 91 2c 50 07 90 4d 55 00 91 2b 6e 07 90 46 78     ..,P..MU..+n..Fx
    156f:	07 48 55 00 91 29 6e 07 90 43 55 00 91 29 50 07     .HU..)n..CU..)P.
    157f:	90 48 55 00 91 29 50 06 90 4a 55 00 91 29 6e 07     .HU..)P..JU..)n.
    158f:	90 4b 55 00 91 29 50 07 90 48 55 00 91 29 50 07     .KU..)P..HU..)P.
    159f:	90 4a 55 00 91 2b 6e 07 90 4b 55 00 91 2b 50 07     .JU..+n..KU..+P.
    15af:	90 4d 55 00 91 2b 50 07 90 4a 55 00 91 2b 6e 07     .MU..+P..JU..+n.
    15bf:	90 4b 55 00 91 2b 50 07 90 4d 55 00 91 2b 50 07     .KU..+P..MU..+P.
    15cf:	90 4f 55 00 91 2c 6e 07 90 4b 55 00 91 2c 50 07     .OU..,n..KU..,P.
    15df:	90 4d 55 00 91 2c 6e 07 90 4f 55 07 50 55 00 91     .MU..,n..OU.PU..
    15ef:	2e 6e 07 90 4d 55 00 91 2e 50 07 90 4f 55 00 91     .n..MU...P..OU..
    15ff:	2e 50 07 90 4b 55 00 91 2e 6e 07 90 4d 55 00 91     .P..KU...n..MU..
    160f:	2e 50 07 90 4a 55 00 91 2e 50 07 2e 6e 02 90 4b     .P..JU...P..n..K
    161f:	55 05 48 55 00 91 2e 50 06 90 4a 55 00 91 2e 50     U.HU...P..JU...P
    162f:	07 90 46 55 00 91 2e 6e 07 90 4d 55 00 91 2e 50     ..FU...n..MU...P
    163f:	07 90 46 55 00 91 2e 50 07 90 4f 55 00 91 2e 6e     ..FU...P..OU...n
    164f:	07 90 46 55 00 91 2e 50 07 90 4d 55 00 91 2e 6e     ..FU...P..MU...n
    165f:	07 90 46 55 07 48 55 00 91 30 6e 07 90 43 55 00     ..FU.HU..0n..CU.
    166f:	91 30 50 07 90 48 55 00 91 30 50 07 90 4a 55 00     .0P..HU..0P..JU.
    167f:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 48 55 00     .0n..KU..0P..HU.
    168f:	91 30 50 07 90 4a 55 00 91 30 6e 07 90 4b 55 00     .0P..JU..0n..KU.
    169f:	91 30 50 07 90 4d 55 00 91 30 50 07 90 4a 55 00     .0P..MU..0P..JU.
    16af:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 4d 55 00     .0n..KU..0P..MU.
    16bf:	91 30 50 07 90 4f 55 00 91 30 6e 06 90 4b 55 00     .0P..OU..0n..KU.
    16cf:	91 30 50 07 90 4d 55 00 91 2e 6e 07 90 4f 55 07     .0P..MU...n..OU.
    16df:	50 55 00 91 30 6e 07 90 4d 55 00 91 30 50 07 90     PU..0n..MU..0P..
    16ef:	4f 55 00 91 30 50 07 90 4b 55 00 91 30 6e 07 90     OU..0P..KU..0n..
    16ff:	4d 55 00 91 30 50 07 90 4a 55 00 91 30 50 07 30     MU..0P..JU..0P.0
    170f:	6e 02 90 4b 55 05 48 55 00 91 30 50 07 90 4a 55     n..KU.HU..0P..JU
    171f:	00 91 30 50 07 90 46 55 00 91 30 6e 07 90 4d 55     ..0P..FU..0n..MU
    172f:	00 91 30 50 07 90 46 55 00 91 30 50 07 90 4f 55     ..0P..FU..0P..OU
    173f:	00 91 30 6e 07 90 46 55 00 91 30 50 07 90 4d 55     ..0n..FU..0P..MU
    174f:	00 91 2e 6e 07 90 46 55 07 48 55 00 91 30 6e 06     ...n..FU.HU..0n.
    175f:	90 43 55 00 91 30 50 07 90 48 55 00 91 30 50 07     .CU..0P..HU..0P.
    176f:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    177f:	90 48 55 00 91 30 50 07 90 4a 55 00 91 30 6e 07     .HU..0P..JU..0n.
    178f:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 30 50 07     .KU..0P..MU..0P.
    179f:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    17af:	90 4d 55 00 91 30 50 07 90 4f 55 00 91 30 6e 07     .MU..0P..OU..0n.
    17bf:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 2e 6e 07     .KU..0P..MU...n.
    17cf:	90 4f 55 07 50 55 00 91 30 6e 07 90 4d 55 00 91     .OU.PU..0n..MU..
    17df:	30 50 07 90 4f 55 00 91 30 50 07 90 4b 55 00 91     0P..OU..0P..KU..
    17ef:	30 6e 07 90 4d 55 00 91 30 50 07 90 4a 55 00 91     0n..MU..0P..JU..
    17ff:	30 50 06 30 6e 03 90 4b 55 04 48 55 00 91 30 50     0P.0n..KU.HU..0P
    180f:	07 90 4a 55 00 91 30 50 07 90 46 55 00 91 30 6e     ..JU..0P..FU..0n
    181f:	07 90 4d 55 00 91 30 50 07 90 46 55 00 91 30 50     ..MU..0P..FU..0P
    182f:	07 90 4f 55 00 91 30 6e 07 90 46 55 00 91 30 50     ..OU..0n..FU..0P
    183f:	07 90 4d 55 00 91 2e 6e 07 90 46 55 07 48 78 00     ..MU...n..FU.Hx.
    184f:	91 2c 6e 07 90 43 55 00 91 2c 50 07 90 48 55 00     .,n..CU..,P..HU.
    185f:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
    186f:	91 2c 50 07 90 48 55 00 91 2c 50 07 90 4a 78 00     .,P..HU..,P..Jx.
    187f:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 55 00     .,n..KU..,P..MU.
    188f:	91 2c 50 07 90 4a 78 00 91 2c 6e 06 90 4b 55 00     .,P..Jx..,n..KU.
    189f:	91 2c 50 07 90 4d 55 00 91 2c 50 07 90 4f 78 00     .,P..MU..,P..Ox.
    18af:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 78 00     .,n..KU..,P..Mx.
    18bf:	91 2b 6e 07 90 4f 55 07 50 78 00 91 2c 6e 07 90     .+n..OU.Px..,n..
    18cf:	4d 55 00 91 2c 50 07 90 4f 55 00 91 2c 50 07 90     MU..,P..OU..,P..
    18df:	4b 78 00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90     Kx..,n..MU..,P..
    18ef:	4a 55 00 91 2c 50 07 2c 6e 02 90 4b 78 05 48 55     JU..,P.,n..Kx.HU
    18ff:	00 91 2c 50 07 90 4a 55 00 91 2c 50 07 90 46 78     ..,P..JU..,P..Fx
    190f:	00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90 46 78     ..,n..MU..,P..Fx
    191f:	00 91 2c 50 07 90 4f 55 00 91 2c 6e 07 90 46 78     ..,P..OU..,n..Fx
    192f:	00 91 2c 50 07 90 4d 55 00 91 2b 6e 06 90 46 78     ..,P..MU..+n..Fx
    193f:	07 48 55 00 91 29 6e 07 90 43 55 00 91 29 50 07     .HU..)n..CU..)P.
    194f:	90 48 55 00 91 29 50 07 90 4a 55 00 91 29 6e 07     .HU..)P..JU..)n.
    195f:	90 4b 55 00 91 29 50 07 90 48 55 00 91 29 50 07     .KU..)P..HU..)P.
    196f:	90 4a 55 00 91 2b 6e 07 90 4b 55 00 91 2b 50 07     .JU..+n..KU..+P.
    197f:	90 4d 55 00 91 2b 50 07 90 4a 55 00 91 2b 6e 07     .MU..+P..JU..+n.
    198f:	90 4b 55 00 91 2b 50 07 90 4d 55 00 91 2b 50 07     .KU..+P..MU..+P.
    199f:	90 4f 55 00 91 2c 6e 07 90 4b 55 00 91 2c 50 07     .OU..,n..KU..,P.
    19af:	90 4d 55 00 91 2c 6e 07 90 4f 55 07 50 55 00 91     .MU..,n..OU.PU..
    19bf:	2e 6e 07 90 4d 55 00 91 2e 50 07 90 4f 55 00 91     .n..MU...P..OU..
    19cf:	2e 50 07 90 4b 55 00 91 2e 6e 06 90 4d 55 00 91     .P..KU...n..MU..
    19df:	2e 50 07 90 4a 55 00 91 2e 50 07 2e 6e 03 90 4b     .P..JU...P..n..K
    19ef:	55 04 48 55 00 91 2e 50 07 90 4a 55 00 91 2e 50     U.HU...P..JU...P
    19ff:	07 90 46 55 00 91 2e 6e 07 90 4d 55 00 91 2e 50     ..FU...n..MU...P
    1a0f:	07 90 46 55 00 91 2e 50 07 90 4f 55 00 91 30 6e     ..FU...P..OU..0n
    1a1f:	07 90 46 55 00 91 30 50 07 90 4d 55 00 91 2e 6e     ..FU..0P..MU...n
    1a2f:	07 90 46 55 07 54 64 00 48 64 00 91 30 6e 07 30     ..FU.Td.Hd..0n.0
    1a3f:	50 07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e     P.0P.0n.0P.0P.0n
    1a4f:	07 30 50 06 30 50 07 30 6e 07 30 50 07 30 50 07     .0P.0P.0n.0P.0P.
    1a5f:	30 6e 07 30 50 07 2e 6e 0e 30 6e 07 30 50 07 30     0n.0P..n.0n.0P.0
    1a6f:	50 07 30 6e 07 30 50 07 30 50 07 30 6e 07 30 50     P.0n.0P.0P.0n.0P
    1a7f:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 06     .0P.0n.0P.0P.0n.
    1a8f:	30 50 07 2e 6e 0e 90 33 64 00 37 64 00 3c 64 00     0P..n..3d.7d.<d.
    1a9f:	91 30 6e 07 30 50 07 30 50 07 90 32 64 00 37 64     .0n.0P.0P..2d.7d
    1aaf:	00 3a 64 00 91 30 6e 07 30 50 07 30 50 07 90 33     .:d..0n.0P.0P..3
    1abf:	64 00 37 64 00 3c 64 00 91 30 6e 07 30 50 07 30     d.7d.<d..0n.0P.0
    1acf:	50 07 90 37 64 00 3a 64 00 3e 64 00 91 30 6e 07     P..7d.:d.>d..0n.
    1adf:	30 50 07 30 50 07 90 37 64 00 3c 64 00 3f 64 00     0P.0P..7d.<d.?d.
    1aef:	91 30 6e 07 30 50 07 90 37 64 00 3a 64 00 3e 64     .0n.0P..7d.:d.>d
    1aff:	00 91 30 6e 07 30 6e 07 90 3a 64 00 43 64 00 3f     ..0n.0n..:d.Cd.?
    1b0f:	64 00 91 33 6e 06 33 50 07 33 50 07 33 6e 07 33     d..3n.3P.3P.3n.3
    1b1f:	50 07 33 50 07 90 37 64 00 3a 64 00 3f 64 00 91     P.3P..7d.:d.?d..
    1b2f:	33 6e 07 33 50 07 33 50 07 33 6e 07 33 50 07 33     3n.3P.3P.3n.3P.3
    1b3f:	50 07 90 3a 64 00 3f 64 00 43 64 00 91 33 6e 07     P..:d.?d.Cd..3n.
    1b4f:	33 50 07 33 6e 07 33 6e 07 90 41 64 00 3e 64 00     3P.3n.3n..Ad.>d.
    1b5f:	3a 64 00 91 2e 6e 07 2e 50 07 2e 50 07 2e 6e 07     :d...n..P..P..n.
    1b6f:	2e 50 07 2e 50 06 90 35 64 00 3a 64 00 3e 64 00     .P..P..5d.:d.>d.
    1b7f:	91 2e 6e 07 2e 50 07 2e 50 07 2e 6e 07 2e 50 07     ..n..P..P..n..P.
    1b8f:	2e 50 07 90 3a 64 00 3e 64 00 41 64 00 91 2e 6e     .P..:d.>d.Ad...n
    1b9f:	07 2e 50 07 2e 6e 07 2e 6e 07 90 37 64 00 3c 64     ..P..n..n..7d.<d
    1baf:	00 3f 64 00 91 30 6e 07 30 50 07 30 50 07 30 6e     .?d..0n.0P.0P.0n
    1bbf:	07 30 50 07 30 50 07 30 6e 07 30 50 07 30 50 07     .0P.0P.0n.0P.0P.
    1bcf:	30 6e 06 30 50 07 30 50 07 30 6e 07 30 50 07 2e     0n.0P.0P.0n.0P..
    1bdf:	6e 0e 30 6e 07 30 50 07 30 50 07 30 6e 07 30 50     n.0n.0P.0P.0n.0P
    1bef:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 07     .0P.0n.0P.0P.0n.
    1bff:	30 50 07 30 50 07 30 6e 07 30 50 07 2e 6e 0d 90     0P.0P.0n.0P..n..
    1c0f:	33 64 00 37 64 00 3c 64 00 91 30 6e 07 30 50 07     3d.7d.<d..0n.0P.
    1c1f:	30 50 07 90 32 64 00 37 64 00 3a 64 00 91 30 6e     0P..2d.7d.:d..0n
    1c2f:	07 30 50 07 30 50 07 90 33 64 00 37 64 00 3c 64     .0P.0P..3d.7d.<d
    1c3f:	00 91 30 6e 07 30 50 07 30 50 07 90 37 64 00 3a     ..0n.0P.0P..7d.:
    1c4f:	64 00 3e 64 00 91 30 6e 07 30 50 07 30 50 07 90     d.>d..0n.0P.0P..
    1c5f:	37 64 00 3c 64 00 3f 64 00 91 30 6e 07 30 50 07     7d.<d.?d..0n.0P.
    1c6f:	90 37 64 00 3a 64 00 3e 64 00 91 2e 6e 0e 90 3a     .7d.:d.>d...n..:
    1c7f:	64 00 43 64 00 3f 64 00 91 33 6e 07 33 50 07 33     d.Cd.?d..3n.3P.3
    1c8f:	50 07 33 6e 06 33 50 07 33 50 07 90 37 64 00 3a     P.3n.3P.3P..7d.:
    1c9f:	64 00 3f 64 00 91 33 6e 07 33 50 07 33 50 07 33     d.?d..3n.3P.3P.3
    1caf:	6e 07 33 50 07 33 50 07 90 3a 64 00 3f 64 00 43     n.3P.3P..:d.?d.C
    1cbf:	64 00 91 33 6e 07 33 50 07 32 6e 0e 90 41 64 00     d..3n.3P.2n..Ad.
    1ccf:	3e 64 00 3a 64 00 91 2e 6e 07 2e 50 07 2e 50 07     >d.:d...n..P..P.
    1cdf:	2e 6e 07 2e 50 07 2e 50 07 90 35 64 00 3a 64 00     .n..P..P..5d.:d.
    1cef:	3e 64 00 91 2e 6e 07 2e 50 06 2e 50 07 2e 6e 07     >d...n..P..P..n.
    1cff:	2e 50 07 2e 50 07 90 3a 64 00 3e 64 00 41 64 00     .P..P..:d.>d.Ad.
    1d0f:	91 2e 6e 05 ff 06 01 45 02 91 2e 50 07 2c 6e 0e     ..n....E...P.,n.
    1d1f:	90 37 64 00 3c 64 00 3f 64 00 91 30 6e 07 30 50     .7d.<d.?d..0n.0P
    1d2f:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 07     .0P.0n.0P.0P.0n.
    1d3f:	30 50 07 30 50 07 30 6e 07 30 50 07 30 50 07 ff     0P.0P.0n.0P.0P..
    1d4f:	2f 00                                               /.

00001d51 <my_patches>:
    1d51:	00 00 00 c8 1e 00 00 00 00 00 00 00 c8 1e 00 00     ................
    1d61:	00 00 00 00 00 b7 1e 00 00 00 00 00 00 00 61 1e     ..............a.
    1d71:	00 00 00 00 00 00 00 b7 1e 00 00 00 00 00 00 00     ................
    1d81:	90 1d 00 00 00 00 00 00 00 90 1d 00 00 00 00        ...............

00001d90 <explode>:
    1d90:	00 07 7f 00 02 03 00 00 ff 00 08 41 01 04 04 01     ...........A....
    1da0:	04 04 01 04 04 01 04 04 01 04 04 01 04 04 01 04     ................
    1db0:	04 01 04 04 01 04 04 03 07 64 00 08 3c 01 04 04     .........d..<...
    1dc0:	01 04 04 01 04 04 01 04 04 01 04 04 01 04 04 01     ................
    1dd0:	04 04 01 04 04 01 04 04 03 07 50 00 08 37 01 04     ..........P..7..
    1de0:	04 01 04 04 01 04 04 01 04 04 01 04 04 01 04 04     ................
    1df0:	01 04 04 01 04 04 01 04 04 03 07 32 00 08 32 01     ...........2..2.
    1e00:	04 04 01 04 04 01 04 04 01 04 04 01 04 04 01 04     ................
    1e10:	04 01 04 04 01 04 04 01 04 04 03 07 28 00 08 2d     ............(..-
    1e20:	01 04 04 01 04 04 01 04 04 01 04 04 01 04 04 01     ................
    1e30:	04 04 01 04 04 01 04 04 01 04 04 03 07 14 00 08     ................
    1e40:	28 01 04 04 01 04 04 01 04 04 01 04 04 01 04 04     (...............
    1e50:	01 04 04 01 04 04 01 04 04 01 04 04 01 05 00 00     ................
    1e60:	ff                                                  .

00001e61 <pshoot>:
    1e61:	00 02 03 00 07 7f 00 08 50 01 04 06 01 04 06 01     ........P.......
    1e71:	04 06 01 07 00 03 07 7f 00 08 50 01 04 06 01 04     ..........P.....
    1e81:	06 01 04 06 01 07 00 03 08 50 00 07 20 01 04 06     .........P.. ...
    1e91:	01 04 06 01 04 06 01 04 06 01 07 00 03 08 50 00     ..............P.
    1ea1:	07 0f 01 04 06 01 04 06 01 04 06 01 04 06 01 07     ................
    1eb1:	00 01 05 00 00 ff                                   ......

00001eb7 <navigate>:
    1eb7:	00 02 04 00 07 70 00 00 d8 00 08 3c 01 05 00 00     .....p.....<....
    1ec7:	ff                                                  .

00001ec8 <instrument>:
    1ec8:	00 02 04 00 00 dd 00 ff                             ........

00001ed0 <sprites_data>:
    1ed0:	fe fe fe fe fe fe fe 87 fe fe fe fe fe fe 87 87     ................
    1ee0:	fe fe fe fe fe fe 87 87 fe fe fe fe 85 85 85 87     ................
    1ef0:	fe fe fe 85 87 87 87 85 fe fe 85 87 87 87 87 85     ................
    1f00:	fe 85 87 87 87 85 85 87 85 87 87 85 85 87 87 87     ................
    1f10:	87 87 87 fe fe fe fe fe d2 d2 eb d2 fe fe fe fe     ................
    1f20:	87 d2 fd eb fe fe fe fe 87 87 eb d2 fe fe fe fe     ................
    1f30:	85 87 87 d2 fe fe fe fe 87 85 85 87 85 fe fe fe     ................
    1f40:	87 ef 87 87 87 85 fe fe ef ff ef 87 87 85 fe fe     ................
    1f50:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 87     ................
    1f60:	fe fe fe fe fe fe 87 87 fe fe fe fe fe fe 87 87     ................
    1f70:	fe fe fe fe 85 85 85 87 fe fe fe 85 87 87 87 85     ................
    1f80:	fe fe 85 87 87 87 87 85 fe 85 87 87 87 85 85 87     ................
    1f90:	fe fe fe fe fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    1fa0:	d2 d2 eb d2 fe fe fe fe 87 d2 fd eb fe fe fe fe     ................
    1fb0:	87 87 eb d2 fe fe fe fe 85 87 87 d2 fe fe fe fe     ................
    1fc0:	87 85 85 87 85 fe fe fe 87 ef 87 87 87 85 fe fe     ................
    1fd0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1fe0:	fe fe fe fe fe fe fe fe fe ba ba ba ba ba ba fe     ................
    1ff0:	ba bd bd bd bd bd bd ba fe ba ba ba ba ba ba fe     ................
    2000:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2010:	fe fe 46 46 46 46 46 46 fe a5 a5 a5 47 47 46 fe     ..FFFFFF....GGF.
    2020:	fe 46 46 47 47 46 3f 3f 46 46 47 47 46 fe fe fe     .FFGGF??FFGGF...
    2030:	46 46 47 47 46 fe fe fe fe 46 46 47 47 3f 3f fe     FFGGF....FFGG??.
    2040:	fe a5 a5 a5 47 fe fe fe fe fe 46 46 46 46 fe fe     ....G.....FFFF..
    2050:	fe fe fe ff fe fe fe fe fe fe ff ff ff fe fe fe     ................
    2060:	fe ff ff fd ff ff fe fe ff ff fd f8 fd ff ff fe     ................
    2070:	fe ff ff fd ff ff fe fe fe fe ff ff ff fe fe fe     ................
    2080:	fe fe fe ff fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2090:	fe fe fe 07 fe fe fe fe fe fe 07 07 07 fe fe fe     ................
    20a0:	fe 07 07 27 07 07 fe fe 07 07 27 77 27 07 07 fe     ...'......'w'...
    20b0:	fe 07 07 27 07 07 fe fe fe fe 07 07 07 fe fe fe     ...'............
    20c0:	fe fe fe 07 fe fe fe fe fe fe fe fe fe fe fe fe     ................
    20d0:	fe fe fe 38 fe fe fe fe fe fe 38 38 38 fe fe fe     ...8......888...
    20e0:	fe 38 38 bc 38 38 fe fe 38 38 bc be bc 38 38 fe     .88.88..88...88.
    20f0:	fe 38 38 bc 38 38 fe fe fe fe 38 38 38 fe fe fe     .88.88....888...
    2100:	fe fe fe 38 fe fe fe fe fe fe fe fe fe fe fe fe     ...8............
    2110:	fe fe fe a2 fe fe fe fe fe fe a2 a2 a2 fe fe fe     ................
    2120:	fe a2 a2 aa a2 a2 fe fe a2 a2 aa ad aa a2 a2 fe     ................
    2130:	fe a2 a2 aa a2 a2 fe fe fe fe a2 a2 a2 fe fe fe     ................
    2140:	fe fe fe a2 fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2150:	fe fe fe 6e fe fe fe fe fe fe 6e 6e 6e fe fe fe     ...n......nnn...
    2160:	fe 6e 6e 6f 6e 6e fe fe 6e 6e 6f 77 6f 6e 6e fe     .nnonn..nnowonn.
    2170:	fe 6e 6e 6f 6e 6e fe fe fe fe 6e 6e 6e fe fe fe     .nnonn....nnn...
    2180:	fe fe fe 6e fe fe fe fe fe fe fe fe fe fe fe fe     ...n............
    2190:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    21a0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    21b0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    21c0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    21d0:	85 87 87 85 fe 85 87 87 fe 85 87 85 fe 85 87 87     ................
    21e0:	fe 85 87 87 ad ad ad ad fe fe 85 87 ad ad ad ad     ................
    21f0:	fe fe 85 87 ad ad ad ad fe fe fe 85 a4 ad 87 87     ................
    2200:	fe fe fe fe a4 a4 85 87 fe fe fe fe a4 a4 85 87     ................
    2210:	87 ef 87 85 87 85 fe fe 87 87 87 85 87 87 85 fe     ................
    2220:	ad ad ad ad ad 87 85 fe ad ad ad ad ad ad a4 ad     ................
    2230:	ad ad ad ad ad a4 a4 a4 87 87 87 85 fe fe fe fe     ................
    2240:	87 87 87 85 fe fe fe fe 87 87 87 85 fe fe fe fe     ................
    2250:	87 ef 87 85 87 85 fe fe 87 87 87 85 87 87 85 fe     ................
    2260:	ad ad ad ad ad 87 85 fe ad ad ad ad ad ad a4 ad     ................
    2270:	ad ad ad ad ad a4 a4 a4 87 87 87 85 fe fe fe fe     ................
    2280:	87 87 87 85 fe fe fe fe 87 87 85 fe fe fe fe fe     ................
    2290:	85 87 87 85 85 87 87 87 85 87 87 85 fe 85 87 87     ................
    22a0:	fe 85 87 85 fe 85 87 87 fe 85 87 87 ad ad ad ad     ................
    22b0:	fe fe 85 87 ad ad ad ad fe fe 85 87 ad ad ad ad     ................
    22c0:	fe fe fe 85 a4 ad 87 87 fe fe fe fe a4 a4 85 87     ................
    22d0:	ef ff ef 87 87 85 fe fe 87 ef 87 85 87 85 fe fe     ................
    22e0:	87 87 87 85 87 87 85 fe ad ad ad ad ad 87 85 fe     ................
    22f0:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    2300:	87 87 87 87 fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    2310:	87 ef 87 85 87 85 fe fe 87 87 87 85 87 87 85 fe     ................
    2320:	ad ad ad ad ad 87 85 fe ad ad ad ad ad ad a4 ad     ................
    2330:	ad ad ad ad ad a4 a4 a4 87 87 87 87 fe fe fe fe     ................
    2340:	87 87 87 87 fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    2350:	ef ff ef 87 87 85 fe fe 87 ef 87 85 87 85 fe fe     ................
    2360:	87 87 87 85 87 87 85 fe ad ad ad ad ad 87 85 fe     ................
    2370:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    2380:	87 87 87 87 fe fe fe fe 87 87 87 87 87 fe fe fe     ................
    2390:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    23a0:	fe fe fe 27 07 fe fe fe fe fe 27 77 27 07 fe fe     ...'......'w'...
    23b0:	fe fe 07 27 07 07 fe fe fe fe fe 07 07 fe fe fe     ...'............
    23c0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    23d0:	fe fe a3 a0 a0 a3 3f 3f fe a3 a3 a3 a3 a3 a3 fe     ......??........
    23e0:	a3 a3 a3 78 78 a3 a3 a3 a0 a3 78 7d 7d 78 a3 a0     ...xx.....x}}x..
    23f0:	a0 a3 78 7d 7d 78 a3 a0 a3 a3 a3 78 78 a3 a3 a3     ..x}}x.....xx...
    2400:	fe a3 a3 a3 a3 a3 a3 fe fe fe a3 a0 a0 a3 3f 3f     ..............??
    2410:	fe fe fe fe fe fe fe fe fe fe fe fe ff ff fe fe     ................
    2420:	fe fe ff ff ff fd ff fe ff ff ff fd fd f8 fd ff     ................
    2430:	fe ff ff ff ff fd ff ff fe fe fe ff ff ff ff fe     ................
    2440:	fe fe fe fe ff ff fe fe fe fe fe fe fe fe fe fe     ................
    2450:	fe fe fe fe fe fe fe fe fe fe fe fe 07 07 fe fe     ................
    2460:	fe fe 07 07 07 27 07 fe 07 07 07 27 27 77 27 07     .....'.....''w'.
    2470:	fe 07 07 07 07 27 07 07 fe fe fe 07 07 07 07 fe     .....'..........
    2480:	fe fe fe fe 07 07 fe fe fe fe fe fe fe fe fe fe     ................
    2490:	fe fe fe fe fe fe fe fe fe fe fe fe 38 38 fe fe     ............88..
    24a0:	fe fe 38 38 38 bc 38 fe 38 38 38 bc bc be bc 38     ..888.8.888....8
    24b0:	fe 38 38 38 38 bc 38 38 fe fe fe 38 38 38 38 fe     .8888.88...8888.
    24c0:	fe fe fe fe 38 38 fe fe fe fe fe fe fe fe fe fe     ....88..........
    24d0:	fe fe fe fe fe fe fe fe fe fe fe fe a2 a2 fe fe     ................
    24e0:	fe fe a2 a2 a2 aa a2 fe a2 a2 a2 aa aa ad aa a2     ................
    24f0:	fe a2 a2 a2 a2 aa a2 a2 fe fe fe a2 a2 a2 a2 fe     ................
    2500:	fe fe fe fe a2 a2 fe fe fe fe fe fe fe fe fe fe     ................
    2510:	fe fe fe fe fe fe fe fe fe fe fe fe 6e 6e fe fe     ............nn..
    2520:	fe fe 6e 6e 6e 6f 6e fe 6e 6e 6e 6f 6f 77 6f 6e     ..nnnon.nnnoowon
    2530:	fe 6e 6e 6e 6e 6f 6e 6e fe fe fe 6e 6e 6e 6e fe     .nnnnonn...nnnn.
    2540:	fe fe fe fe 6e 6e fe fe fe fe fe fe fe fe fe fe     ....nn..........
    2550:	fe fe fe fe fe fe 85 87 fe fe fe fe fe fe 85 87     ................
    2560:	fe fe fe fe fe 85 87 87 fe fe fe fe fe 85 87 87     ................
    2570:	fe fe fe fe 85 87 87 fe fe fe fe fe 85 87 87 fe     ................
    2580:	fe fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4     ................
    2590:	87 fe 85 85 fe fe fe fe 87 fe 85 85 85 fe fe fe     ................
    25a0:	fe fe 85 85 85 fe fe fe fe fe 85 85 85 fe fe fe     ................
    25b0:	fe fe 85 85 85 fe fe fe fe fe 85 85 85 fe fe fe     ................
    25c0:	fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe     ................
    25d0:	fe fe fe fe fe fe fe 85 fe fe fe fe fe fe fe 85     ................
    25e0:	fe fe fe fe fe 85 85 87 fe fe fe fe 85 87 87 87     ................
    25f0:	fe fe fe a4 87 87 87 87 fe fe fe a4 87 87 87 fe     ................
    2600:	fe fe fe a4 a4 fe fe fe fe fe fe a4 a4 a4 fe fe     ................
    2610:	87 87 87 fe fe fe fe fe 87 87 87 87 fe fe fe fe     ................
    2620:	87 87 87 87 fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    2630:	87 85 85 fe fe fe fe fe 85 85 85 fe fe fe fe fe     ................
    2640:	a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe fe fe     ................
    2650:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 85 85     ................
    2660:	fe fe fe fe 85 85 85 85 a4 a4 85 85 85 85 85 fe     ................
    2670:	a4 a4 85 85 85 85 85 fe a4 a4 85 85 85 85 fe fe     ................
    2680:	a4 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2690:	87 87 87 fe fe fe fe fe fe 85 87 87 fe fe fe fe     ................
    26a0:	fe 85 87 87 87 fe fe fe fe fe 85 87 87 fe fe fe     ................
    26b0:	fe fe 85 87 87 87 fe fe fe fe fe 85 87 87 fe fe     ................
    26c0:	fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe     ................
    26d0:	fe fe fe fe fe fe fe 85 fe fe fe fe fe fe fe 85     ................
    26e0:	fe fe fe fe fe 85 85 85 fe fe fe fe 85 85 85 85     ................
    26f0:	fe fe fe a4 85 85 85 85 fe fe fe a4 85 85 85 fe     ................
    2700:	fe fe fe a4 a4 fe fe fe fe fe fe a4 a4 a4 fe fe     ................
    2710:	87 87 87 fe fe fe fe fe 85 87 87 85 fe fe fe fe     ................
    2720:	85 87 87 85 fe fe fe fe 85 87 87 fe fe fe fe fe     ................
    2730:	85 87 87 fe fe fe fe fe 85 87 87 fe fe fe fe fe     ................
    2740:	a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe fe fe     ................
    2750:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 85 85     ................
    2760:	fe fe fe fe 85 85 85 85 a4 a4 85 85 85 85 a4 a4     ................
    2770:	a4 a4 85 85 85 85 a4 a4 a4 a4 85 85 85 85 a4 a4     ................
    2780:	a4 fe fe fe fe fe a4 fe fe fe fe fe fe fe fe fe     ................
    2790:	87 87 85 87 87 fe fe fe fe fe 85 87 87 87 fe fe     ................
    27a0:	fe fe 85 87 87 87 fe fe 85 85 85 87 87 fe fe fe     ................
    27b0:	87 87 87 87 87 fe fe fe 87 87 87 87 fe fe fe fe     ................
    27c0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    27d0:	fe fe fe fe fe fe fe fe fe fe 00 00 00 00 fe fe     ................
    27e0:	ad 00 0f 1f 1f 0f 00 ad ad 00 00 00 00 00 00 ad     ................
    27f0:	ad ad 00 00 00 00 ad ad ad 00 ad 00 00 ad 00 ad     ................
    2800:	ad fe 00 00 00 00 fe ad ad fe fe fe fe fe fe ad     ................
    2810:	fe fe fe 00 00 00 fe fe 00 00 00 0f 1f 00 00 fe     ................
    2820:	fe fe 00 00 00 00 00 fe fe fe fe fe 00 00 fe fe     ................
    2830:	fe 00 00 00 00 00 00 fe 00 ad ad ad ad ad ad 00     ................
    2840:	00 ad ad ad ad ad ad 00 fe 00 00 00 00 00 00 fe     ................
    2850:	ff ff ff ff ff ff ff a3 ff ff ff ff ff ff ff a3     ................
    2860:	a3 ff ff ff ff ff a3 fe a3 ff ff ff ff ff a3 fe     ................
    2870:	fe a3 ff ff ff a3 fe fe fe a3 ff ff ff a3 fe fe     ................
    2880:	fe fe a3 ff a3 fe fe fe fe fe a3 ff a3 fe fe fe     ................
    2890:	fe fe fe 07 07 fe fe fe fe fe 07 27 07 07 fe fe     ...........'....
    28a0:	fe 07 27 77 27 07 07 fe fe 07 07 27 07 07 07 fe     ..'w'......'....
    28b0:	fe fe 07 27 07 07 fe fe fe fe 07 07 07 fe fe fe     ...'............
    28c0:	fe fe fe 07 07 fe fe fe fe fe fe 07 fe fe fe fe     ................
    28d0:	fe fe fe 14 fe fe fe fe fe fe 14 14 14 fe fe fe     ................
    28e0:	fe 14 14 0f 14 14 fe fe 14 14 0f 06 0f 14 14 fe     ................
    28f0:	fe 14 14 0f 14 14 fe fe fe fe 14 14 14 fe fe fe     ................
    2900:	fe fe fe 14 fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2910:	fe fe fe 7f fe fe fe fe fe fe 7f 7f 7f fe fe fe     ................
    2920:	fe 7f 7f bf 7f 7f fe fe 7f 7f bf ff bf 7f 7f fe     ................
    2930:	fe 7f 7f bf 7f 7f fe fe fe fe 7f 7f 7f fe fe fe     ................
    2940:	fe fe fe 7f fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2950:	13 13 13 13 13 13 13 2f 13 13 13 13 13 13 13 2f     ......./......./
    2960:	2f 13 13 13 13 13 2f fe 2f 13 13 13 13 13 2f fe     /....././...../.
    2970:	fe 2f 13 13 13 2f fe fe fe 2f 13 13 13 2f fe fe     ./.../.../.../..
    2980:	fe fe 2f 13 2f fe fe fe fe fe 2f 13 2f fe fe fe     .././....././...
    2990:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 7f     ................
    29a0:	fe fe fe fe fe 7f 7f 7f fe fe fe fe 7f 7f 7f 7f     ................
    29b0:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe fe fe     ................
    29c0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    29d0:	a4 fe fe fe fe fe fe fe a4 ad fe fe ff ff a4 ad     ................
    29e0:	a4 ad f6 ff ff a4 ad f6 a4 ad f6 ff a4 ad f6 ff     ................
    29f0:	a4 ad fe fe a4 ad f6 ff a4 fe fe a4 a4 ad f6 fe     ................
    2a00:	fe fe fe a4 a4 ad f6 f6 fe fe fe fe fe fe fe fe     ................
    2a10:	fe fe fe fe fe fe fe fe f6 ff ff ff d2 fe fe fe     ................
    2a20:	ff ff ff ff d2 eb fe fe ff fe ff ff eb fd d2 fe     ................
    2a30:	fe fe fe ff d2 eb d2 d2 fe fe fe fe fe fe fe fe     ................
    2a40:	f6 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2a50:	fe fe bf 7f 7f bf fe fe fe 7f 7f 7f 7f 7f 7f fe     ................
    2a60:	bf 7f 7f 7f 7f 7f 7f bf 7f 7f 7f 7f 7f 7f 7f 7f     ................
    2a70:	7f 7f 7f 7f 7f 7f 7f 7f bf 7f 7f 7f 7f 7f 7f bf     ................
    2a80:	fe 7f 7f 7f 7f 7f 7f fe fe fe bf 7f 7f bf fe fe     ................
    2a90:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2aa0:	fe fe fe 7f 7f fe fe fe fe fe 7f 7f 7f 7f fe fe     ................
    2ab0:	fe fe 7f 7f 7f 7f fe fe fe fe fe 7f 7f fe fe fe     ................
    2ac0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2ad0:	fe fe bf 7f 7f bf fe fe fe 7f 7f 7f 7f 7f 7f fe     ................
    2ae0:	bf 7f fe fe 7f 7f 7f bf 7f fe fe fe fe 7f 7f 7f     ................
    2af0:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe 7f bf     ................
    2b00:	fe fe fe fe fe fe 7f fe fe fe fe fe fe bf fe fe     ................
    2b10:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2b20:	fe fe fe fe fe fe fe fe fe fe fe e3 fe fe fe fe     ................
    2b30:	fe fe fe ff fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2b40:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2b50:	fe fe fe fe fe fe fe fe fe fe fe fe ff fe fe fe     ................
    2b60:	fe fe fe fe 7f ff fe fe fe fe fe fe 7f 7f ff fe     ................
    2b70:	fe fe fe fe 7f 7f 7f ff fe fe fe fe 7f 7f 7f fe     ................
    2b80:	fe fe fe fe 7f 7f fe fe fe fe fe fe 7f fe fe fe     ................
    2b90:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2ba0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2bb0:	7f 7f 7f 7f 7f 7f ff fe fe 7f 7f 7f 7f ff fe fe     ................
    2bc0:	fe fe 7f 7f ff fe fe fe fe fe fe fe fe fe fe fe     ................
    2bd0:	fe fe fe ff fe fe fe fe fe fe ff 7f 7f fe fe fe     ................
    2be0:	fe ff 7f 7f 7f 7f fe fe ff 7f 7f 7f 7f 7f 7f fe     ................
    2bf0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2c00:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2c10:	fe fe 00 00 00 00 fe fe fe 00 0f 1f 1f 0f 00 fe     ................
    2c20:	ad 00 00 00 00 00 00 ad ad 00 ad 00 00 ad 00 ad     ................
    2c30:	ad ad 00 00 00 00 ad ad ad fe 00 00 00 00 fe ad     ................
    2c40:	ad fe fe fe fe fe fe ad ad fe fe fe fe fe fe ad     ................
    2c50:	fe fe fe 00 00 fe fe fe fe fe 00 00 00 00 fe fe     ................
    2c60:	fe 00 00 0f 0f 00 00 fe 00 00 0f 1f 1f 0f 00 00     ................
    2c70:	00 00 fe fe fe fe 00 00 00 fe fe fe fe fe fe 00     ................
    2c80:	00 fe fe fe fe fe fe 00 fe fe fe fe fe fe fe fe     ................
    2c90:	fe ff ff ff ff ff ff fe a3 a3 ad ad ad ad a3 a3     ................
    2ca0:	fe a3 ad 07 07 ad a3 fe fe ad 07 77 27 07 ad fe     ...........w'...
    2cb0:	fe ad 07 27 07 07 ad fe fe a3 ad 07 07 ad a3 fe     ...'............
    2cc0:	a3 a3 ad ad ad ad a3 a3 fe ff ff ff ff ff ff fe     ................
    2cd0:	fe fe fe bf bf fe fe fe fe bf bf bf bf bf bf fe     ................
    2ce0:	fe bf bf bf bf bf bf fe bf bf bf bf bf bf bf bf     ................
    2cf0:	bf bf bf bf bf bf bf bf fe bf bf bf bf bf bf fe     ................
    2d00:	fe bf bf bf bf bf bf fe fe fe fe bf bf fe fe fe     ................
    2d10:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2d20:	fe fe fe fe fe fe fe fe fe 07 07 07 07 07 07 fe     ................
    2d30:	07 27 27 27 27 27 27 07 fe 07 07 07 07 07 07 fe     .''''''.........
    2d40:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2d50:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 7f     ................
    2d60:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe fe 7f     ................
    2d70:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2d80:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2d90:	a4 fe fe fe fe fe fe fe a4 a4 fe fe fe fe fe fe     ................
    2da0:	a4 a4 ad fe fe fe fe fe a4 a4 ad ad fe fe fe fe     ................
    2db0:	a4 a4 ad ad f6 fe fe fe a4 a4 ad ad f6 f6 ff ff     ................
    2dc0:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    2dd0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2de0:	fe fe ff ff ff ff a4 a4 fe ff ff ff ff a4 a4 a4     ................
    2df0:	ff ff ff ff ff a4 a4 a4 ff ff ff ff a4 a4 a4 ad     ................
    2e00:	ff ff ff ff a4 a4 ad ad ff ff ff a4 a4 ad ad f6     ................
    2e10:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2e20:	a4 ad ad f6 f6 ff ff ff a4 ad ad f6 f6 ff ff ff     ................
    2e30:	ad ad f6 f6 ff ff ff ff ad f6 f6 ff ff ff ff ff     ................
    2e40:	f6 f6 ff ff ff ff ff ff f6 ff ff 7f 7f ff ff ff     ................
    2e50:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2e60:	d2 fe fe fe fe fe fe fe d2 d2 fe fe fe fe fe fe     ................
    2e70:	d2 d2 d2 fe fe fe fe fe d2 d3 eb d3 fe fe fe fe     ................
    2e80:	d2 eb fd eb d2 fe fe fe d2 d3 eb d3 d2 d2 fe fe     ................
    2e90:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    2ea0:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 7f 7f fe     ................
    2eb0:	a4 a4 ad ad 7f 7f 7f fe a4 a4 ad fe fe 7f fe fe     ................
    2ec0:	a4 a4 fe fe fe fe fe fe a4 fe fe fe fe fe fe fe     ................
    2ed0:	ff ff fe a4 ad ad f6 f6 ff fe a4 a4 ad ad f6 f6     ................
    2ee0:	fe fe a4 a4 ad ad f6 f6 fe a4 a4 a4 ad ad f6 f6     ................
    2ef0:	fe a4 a4 a4 a4 ad ad f6 a4 a4 a4 a4 a4 a4 ad ad     ................
    2f00:	a4 a4 a4 a4 a4 a4 a4 ad a4 a4 a4 a4 a4 a4 a4 a4     ................
    2f10:	ff ff 7f 7f 7f 7f ff ff ff fe 7f 7f 7f 7f fe ff     ................
    2f20:	fe fe 7f 7f 7f fe fe fe fe fe fe 7f fe fe fe fe     ................
    2f30:	f6 fe fe fe fe fe fe fe f6 f6 fe fe fe fe fe fe     ................
    2f40:	ad f6 f6 fe fe fe fe fe ad ad f6 f6 fe fe fe fe     ................
    2f50:	d2 d2 d2 d2 d2 d2 d2 fe ff ff ff ff ff ff ff ff     ................
    2f60:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2f70:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2f80:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2f90:	ef ff ef 87 87 85 fe fe 87 ef 87 85 87 85 fe fe     ................
    2fa0:	87 87 87 85 87 87 85 fe ad ad ad ad ad 87 85 fe     ................
    2fb0:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    2fc0:	87 87 87 85 fe fe fe fe 87 87 85 fe fe fe fe fe     ................
    2fd0:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 87 87     ................
    2fe0:	fe fe fe fe 85 87 87 87 a4 a4 85 85 85 87 87 fe     ................
    2ff0:	a4 a4 87 87 87 87 87 fe a4 a4 87 87 87 87 fe fe     ................
    3000:	a4 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3010:	87 87 85 fe fe fe fe fe fe 85 85 85 fe fe fe fe     ................
    3020:	fe 85 85 85 85 fe fe fe fe fe 85 85 85 fe fe fe     ................
    3030:	fe fe 85 85 85 85 fe fe fe fe fe 85 85 85 fe fe     ................
    3040:	fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe     ................
    3050:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3060:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3070:	fe fe fe fe fe fe fe fe fe fe fe fe fe 85 85 85     ................
    3080:	fe a4 87 87 87 87 87 87 a4 a4 87 87 87 87 87 87     ................
    3090:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 87     ................
    30a0:	fe fe fe fe 85 85 85 87 fe fe fe 85 87 87 87 85     ................
    30b0:	fe fe 85 85 87 87 87 87 85 85 85 85 85 87 87 ad     ................
    30c0:	87 87 87 87 ad 85 87 87 87 87 87 87 ad ad a4 a4     ................
    30d0:	87 87 87 87 fe fe fe fe 87 d2 d2 eb d2 fe fe fe     ................
    30e0:	87 87 d2 fd eb fe fe fe 87 87 87 eb d2 fe fe fe     ................
    30f0:	85 85 87 87 d2 fe fe fe ad ad ad ad ad 87 ef fe     ................
    3100:	ad ad ad ad ad ad a4 ad a4 ad ad ad ad a4 a4 a4     ................
    3110:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    3120:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 7f 7f 7f     ................
    3130:	a4 a4 ad ad 7f 7f 7f fe a4 a4 ad fe 7f 7f 7f fe     ................
    3140:	a4 a4 fe fe fe 7f fe fe a4 fe fe fe fe fe fe fe     ................
    3150:	ff ff 7f 7f 7f 7f ff ff ff 7f 7f 7f 7f 7f 7f ff     ................
    3160:	fe fe 7f 7f 7f 7f fe fe fe fe 7f 7f 7f fe fe fe     ................
    3170:	f6 fe fe 7f fe fe fe fe f6 f6 fe fe fe fe fe fe     ................
    3180:	ad f6 f6 fe fe fe fe fe ad ad f6 f6 fe fe fe fe     ................
    3190:	fe fe fe fe fe fe fe 9c fe fe fe fe fe fe 9c 9c     ................
    31a0:	fe fe fe fe fe fe 9c 9c fe fe fe fe 9a 9a 9a 9c     ................
    31b0:	fe fe fe 9a 9c 9c 9c 9a fe fe 9a 9c 9c 9c 9c 9a     ................
    31c0:	fe 9a 9c 9c 9c 9a 9a 9c 9a 9c 9c 9a 9a 9c 9c 9c     ................
    31d0:	9c 9c 9c fe fe fe fe fe 07 07 27 07 fe fe fe fe     ..........'.....
    31e0:	9c 07 77 27 fe fe fe fe 9c 9c 27 07 fe fe fe fe     ..w'......'.....
    31f0:	9a 9c 9c 07 fe fe fe fe 9c 9a 9a 9c 9a fe fe fe     ................
    3200:	9c ad 9c 9c 9c 9a fe fe ad ff ad 9c 9c 9a fe fe     ................
    3210:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 9c     ................
    3220:	fe fe fe fe fe fe 9c 9c fe fe fe fe fe fe 9c 9c     ................
    3230:	fe fe fe fe 9a 9a 9a 9c fe fe fe 9a 9c 9c 9c 9a     ................
    3240:	fe fe 9a 9c 9c 9c 9c 9a fe 9a 9c 9c 9c 9a 9a 9c     ................
    3250:	fe fe fe fe fe fe fe fe 9c 9c 9c fe fe fe fe fe     ................
    3260:	07 07 27 07 fe fe fe fe 9c 07 77 27 fe fe fe fe     ..'.......w'....
    3270:	9c 9c 27 07 fe fe fe fe 9a 9c 9c 07 fe fe fe fe     ..'.............
    3280:	9c 9a 9a 9c 9a fe fe fe 9c ad 9c 9c 9c 9a fe fe     ................
    3290:	9a 9c 9c 9a fe 9a 9c 9c fe 9a 9c 9a fe 9a 9c 9c     ................
    32a0:	fe 9a 9c 9c ad ad ad ad fe fe 9a 9c ad ad ad ad     ................
    32b0:	fe fe 9a 9c ad ad ad ad fe fe fe 9a 00 ad 9c 9c     ................
    32c0:	fe fe fe fe 00 00 9a 9c fe fe fe fe 00 00 9a 9c     ................
    32d0:	9c ad 9c 9a 9c 9a fe fe 9c 9c 9c 9a 9c 9c 9a fe     ................
    32e0:	ad ad ad ad ad 9c 9a fe ad ad ad ad ad ad 00 ad     ................
    32f0:	ad ad ad ad ad 00 00 00 9c 9c 9c 9a fe fe fe fe     ................
    3300:	9c 9c 9c 9a fe fe fe fe 9c 9c 9c 9a fe fe fe fe     ................
    3310:	9c ad 9c 9a 9c 9a fe fe 9c 9c 9c 9a 9c 9c 9a fe     ................
    3320:	ad ad ad ad ad 9c 9a fe ad ad ad ad ad ad 00 ad     ................
    3330:	ad ad ad ad ad 00 00 00 9c 9c 9c 9a fe fe fe fe     ................
    3340:	9c 9c 9c 9a fe fe fe fe 9c 9c 9a fe fe fe fe fe     ................
    3350:	9a 9c 9c 9a 9a 9c 9c 9c 9a 9c 9c 9a fe 9a 9c 9c     ................
    3360:	fe 9a 9c 9a fe 9a 9c 9c fe 9a 9c 9c ad ad ad ad     ................
    3370:	fe fe 9a 9c ad ad ad ad fe fe 9a 9c ad ad ad ad     ................
    3380:	fe fe fe 9a 00 ad 9c 9c fe fe fe fe 00 00 9a 9c     ................
    3390:	ad ff ad 9c 9c 9a fe fe 9c ad 9c 9a 9c 9a fe fe     ................
    33a0:	9c 9c 9c 9a 9c 9c 9a fe ad ad ad ad ad 9c 9a fe     ................
    33b0:	ad ad ad ad ad ad 00 ad ad ad ad ad ad 00 00 00     ................
    33c0:	9c 9c 9c 9c fe fe fe fe 9c 9c 9c fe fe fe fe fe     ................
    33d0:	9c ad 9c 9a 9c 9a fe fe 9c 9c 9c 9a 9c 9c 9a fe     ................
    33e0:	ad ad ad ad ad 9c 9a fe ad ad ad ad ad ad 00 ad     ................
    33f0:	ad ad ad ad ad 00 00 00 9c 9c 9c 9c fe fe fe fe     ................
    3400:	9c 9c 9c 9c fe fe fe fe 9c 9c 9c fe fe fe fe fe     ................
    3410:	ad ff ad 9c 9c 9a fe fe 9c ad 9c 9a 9c 9a fe fe     ................
    3420:	9c 9c 9c 9a 9c 9c 9a fe ad ad ad ad ad 9c 9a fe     ................
    3430:	ad ad ad ad ad ad 00 ad ad ad ad ad ad 00 00 00     ................
    3440:	9c 9c 9c 9c fe fe fe fe 9c 9c 9c 9c 9c fe fe fe     ................
    3450:	fe fe fe fe fe fe 9a 9c fe fe fe fe fe fe 9a 9c     ................
    3460:	fe fe fe fe fe 9a 9c 9c fe fe fe fe fe 9a 9c 9c     ................
    3470:	fe fe fe fe 9a 9c 9c fe fe fe fe fe 9a 9c 9c fe     ................
    3480:	fe fe fe fe 00 00 00 fe fe fe fe fe 00 00 00 00     ................
    3490:	9c fe 9a 9a fe fe fe fe 9c fe 9a 9a 9a fe fe fe     ................
    34a0:	fe fe 9a 9a 9a fe fe fe fe fe 9a 9a 9a fe fe fe     ................
    34b0:	fe fe 9a 9a 9a fe fe fe fe fe 9a 9a 9a fe fe fe     ................
    34c0:	fe fe 00 00 00 fe fe fe fe fe 00 00 00 00 fe fe     ................
    34d0:	fe fe fe fe fe fe fe 9a fe fe fe fe fe fe fe 9a     ................
    34e0:	fe fe fe fe fe 9a 9a 9c fe fe fe fe 9a 9c 9c 9c     ................
    34f0:	fe fe fe 00 9c 9c 9c 9c fe fe fe 00 9c 9c 9c fe     ................
    3500:	fe fe fe 00 00 fe fe fe fe fe fe 00 00 00 fe fe     ................
    3510:	9c 9c 9c fe fe fe fe fe 9c 9c 9c 9c fe fe fe fe     ................
    3520:	9c 9c 9c 9c fe fe fe fe 9c 9c 9c fe fe fe fe fe     ................
    3530:	9c 9a 9a fe fe fe fe fe 9a 9a 9a fe fe fe fe fe     ................
    3540:	00 00 00 fe fe fe fe fe 00 00 00 00 fe fe fe fe     ................
    3550:	fe fe fe fe 00 00 9a 9c fe fe fe fe 9a 9a 9a 9a     ................
    3560:	fe fe fe fe 9a 9a 9a 9a 00 00 9a 9a 9a 9a 9a fe     ................
    3570:	00 00 9a 9a 9a 9a 9a fe 00 00 9a 9a 9a 9a fe fe     ................
    3580:	00 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3590:	9c 9c 9c fe fe fe fe fe fe 9a 9c 9c fe fe fe fe     ................
    35a0:	fe 9a 9c 9c 9c fe fe fe fe fe 9a 9c 9c fe fe fe     ................
    35b0:	fe fe 9a 9c 9c 9c fe fe fe fe fe 9a 9c 9c fe fe     ................
    35c0:	fe fe fe 00 00 00 fe fe fe fe fe 00 00 00 00 fe     ................
    35d0:	fe fe fe fe fe fe fe 9a fe fe fe fe fe fe fe 9a     ................
    35e0:	fe fe fe fe fe 9a 9a 9a fe fe fe fe 9a 9a 9a 9a     ................
    35f0:	fe fe fe 00 9a 9a 9a 9a fe fe fe 00 9a 9a 9a fe     ................
    3600:	fe fe fe 00 00 fe fe fe fe fe fe 00 00 00 fe fe     ................
    3610:	9c 9c 9c fe fe fe fe fe 9a 9c 9c 9a fe fe fe fe     ................
    3620:	9a 9c 9c 9a fe fe fe fe 9a 9c 9c fe fe fe fe fe     ................
    3630:	9a 9c 9c fe fe fe fe fe 9a 9c 9c fe fe fe fe fe     ................
    3640:	00 00 00 fe fe fe fe fe 00 00 00 00 fe fe fe fe     ................
    3650:	fe fe fe fe 00 00 9a 9c fe fe fe fe 9a 9a 9a 9a     ................
    3660:	fe fe fe fe 9a 9a 9a 9a 00 00 9a 9a 9a 9a 00 00     ................
    3670:	00 00 9a 9a 9a 9a 00 00 00 00 9a 9a 9a 9a 00 00     ................
    3680:	00 fe fe fe fe fe 00 fe fe fe fe fe fe fe fe fe     ................
    3690:	9c 9c 9a 9c 9c fe fe fe fe fe 9a 9c 9c 9c fe fe     ................
    36a0:	fe fe 9a 9c 9c 9c fe fe 9a 9a 9a 9c 9c fe fe fe     ................
    36b0:	9c 9c 9c 9c 9c fe fe fe 9c 9c 9c 9c fe fe fe fe     ................
    36c0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    36d0:	fe fe fe fe 00 00 9a 9c fe fe fe fe 9a 9a 9c 9c     ................
    36e0:	fe fe fe fe 9a 9c 9c 9c 00 00 9a 9a 9a 9c 9c fe     ................
    36f0:	00 00 9c 9c 9c 9c 9c fe 00 00 9c 9c 9c 9c fe fe     ................
    3700:	00 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3710:	9c 9c 9a fe fe fe fe fe fe 9a 9a 9a fe fe fe fe     ................
    3720:	fe 9a 9a 9a 9a fe fe fe fe fe 9a 9a 9a fe fe fe     ................
    3730:	fe fe 9a 9a 9a 9a fe fe fe fe fe 9a 9a 9a fe fe     ................
    3740:	fe fe fe 00 00 00 fe fe fe fe fe 00 00 00 00 fe     ................

00003750 <map_hazard_desert>:
    3750:	01 01 2a                                            ..*

00003753 <map_hazard_city>:
    3753:	01 01 29                                            ..)

00003756 <map_hazard_jungle>:
    3756:	01 01 28                                            ..(

00003759 <map_hazard_fire>:
    3759:	01 01 27                                            ..'

0000375c <map_hazard_ice>:
    375c:	01 01 26                                            ..&

0000375f <map_special_desert>:
    375f:	01 01 19                                            ...

00003762 <map_special_city>:
    3762:	01 01 18                                            ...

00003765 <map_special_jungle>:
    3765:	01 01 17                                            ...

00003768 <map_special_fire>:
    3768:	01 01 16                                            ...

0000376b <map_special_ice>:
    376b:	01 01 15                                            ...

0000376e <map_enemy_elevator>:
    376e:	01 01 37                                            ..7

00003771 <map_enemy_drone>:
    3771:	01 01 36                                            ..6

00003774 <map_enemy_tank>:
    3774:	01 01 25                                            ..%

00003777 <map_enemy_ball>:
    3777:	01 01 14                                            ...

0000377a <map_enemy_spider_1>:
    377a:	01 01 35                                            ..5

0000377d <map_enemy_spider_0>:
    377d:	01 01 24                                            ..$

00003780 <map_enemy_shark>:
    3780:	01 01 05                                            ...

00003783 <map_enemy_shot>:
    3783:	01 01 13                                            ...

00003786 <map_ahero_shot>:
    3786:	01 01 39                                            ..9

00003789 <map_ahero_jump>:
    3789:	02 03 4d 4e 52 55 5e 5f                             ..MNRU^_

00003791 <map_ahero_step_3>:
    3791:	02 03 4d 4e 52 53 60 61                             ..MNRS`a

00003799 <map_ahero_step_2>:
    3799:	02 03 4b 4c 4f 54 5c 5d                             ..KLOT\]

000037a1 <map_ahero_step_1>:
    37a1:	02 03 4d 4e 52 53 5a 5b                             ..MNRSZ[

000037a9 <map_ahero_step_0>:
    37a9:	02 03 4b 4c 4f 51 58 59                             ..KLOQXY

000037b1 <map_ahero_idle>:
    37b1:	02 03 4b 4c 4f 50 56 57                             ..KLOPVW

000037b9 <map_hero_shot>:
    37b9:	01 01 04                                            ...

000037bc <map_hero_ship_large_1>:
    37bc:	04 02 3b 3c 3d 3e 49 40 4a 42                       ..;<=>I@JB

000037c6 <map_hero_ship_large_0>:
    37c6:	04 02 3b 3c 3d 3e 3f 40 41 42                       ..;<=>?@AB

000037d0 <map_hero_ship_1>:
    37d0:	03 01 3a 2c 2d                                      ..:,-

000037d5 <map_hero_ship_0>:
    37d5:	03 01 2b 2c 2d                                      ..+,-

000037da <map_hero_prone>:
    37da:	03 01 46 47 48                                      ..FGH

000037df <map_hero_jump>:
    37df:	02 03 02 03 0f 12 22 23                             ......"#

000037e7 <map_hero_step_3>:
    37e7:	02 03 02 03 0f 43 44 45                             .....CDE

000037ef <map_hero_step_2>:
    37ef:	02 03 00 01 0c 11 20 21                             ...... !

000037f7 <map_hero_step_1>:
    37f7:	02 03 02 03 0f 10 1e 1f                             ........

000037ff <map_hero_step_0>:
    37ff:	02 03 00 01 0c 0e 1c 1d                             ........

00003807 <map_hero_idle>:
    3807:	02 03 00 01 0c 0d 1a 1b                             ........

0000380f <map_glowing_eye>:
    380f:	01 01 38                                            ..8

00003812 <map_emerald_4>:
    3812:	01 01 0a                                            ...

00003815 <map_emerald_3>:
    3815:	01 01 09                                            ...

00003818 <map_emerald_2>:
    3818:	01 01 08                                            ...

0000381b <map_emerald_1>:
    381b:	01 01 07                                            ...

0000381e <map_emerald_0>:
    381e:	01 01 06                                            ...

00003821 <map_explosion_2>:
    3821:	01 01 30                                            ..0

00003824 <map_explosion_1>:
    3824:	01 01 2f                                            ../

00003827 <map_explosion_0>:
    3827:	01 01 2e                                            ...

0000382a <map_particle>:
    382a:	01 01 31                                            ..1

0000382d <map_up_arrow>:
    382d:	01 01 34                                            ..4

00003830 <map_down_arrow>:
    3830:	01 01 33                                            ..3

00003833 <map_right_arrow>:
    3833:	01 01 32                                            ..2

00003836 <map_none>:
    3836:	01 01 14                                            ...

00003839 <tiles_data>:
	...
    3879:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3889:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    3899:	ff f8 fb f8 fb f8 f8 fd ff fb f8 f8 fb f8 f8 f8     ................
    38a9:	ff f8 f8 fb f8 f8 f8 f8 ff f8 f8 f8 f8 f8 f8 f8     ................
    38b9:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    38c9:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    38d9:	fd f8 fb f8 fb f8 f8 fd f8 fb f8 f8 fb f8 f8 f8     ................
    38e9:	f8 f8 f8 fb f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    38f9:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3909:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    3919:	fd f8 fb f8 fb f8 f8 ff f8 fb f8 f8 fb f8 f8 ff     ................
    3929:	f8 f8 f8 fb f8 f8 f8 ff f8 f8 f8 f8 f8 f8 f8 ff     ................
    3939:	fa f8 f8 f8 f8 f8 f8 f8 f8 f8 fb f8 f8 f8 fb f8     ................
    3949:	f8 f8 fb f8 fb fb f8 f8 f8 f8 f8 fb f8 f8 f8 f8     ................
    3959:	f8 f8 fb f8 fb f8 f8 f8 f8 fb f8 f8 fb f8 f8 f8     ................
    3969:	f8 f8 f8 fb f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    3979:	ac ac ac ac ac ac ac ac ac ac ac ac ac ac ac ac     ................
    3989:	ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad     ................
    3999:	ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae     ................
    39a9:	af af af af af af af af af af af af af af af af     ................
    39b9:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    39c9:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    39d9:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    39e9:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    39f9:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    3a09:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    3a19:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    3a29:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    3a39:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    3a49:	ab ab ab ab ab ab ab ab ab ad ad ad ad ad ad ab     ................
    3a59:	ae ae ae ae ae ae ae ae ab ae ae ae ae ae ae ab     ................
    3a69:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    3a79:	ff ff ff ff ff ff ff a3 ff ff ff ff ff ff ff a3     ................
    3a89:	a3 ff ff ff ff ff a3 a0 a3 ff ff ff ff ff a3 a0     ................
    3a99:	a0 a3 ff ff ff a3 a0 a0 a0 a3 ff ff ff a3 a0 a0     ................
    3aa9:	a0 a0 a3 ff a3 a0 a0 a0 a0 a0 a3 ff a3 a0 a0 a0     ................
    3ab9:	a0 a0 a0 a3 ff a3 a0 a0 a0 a0 a0 a3 ff a3 a0 a0     ................
    3ac9:	a0 a0 a3 ff ff ff a3 a0 a0 a0 a3 ff ff ff a3 a0     ................
    3ad9:	a0 a3 ff ff ff ff ff a3 a0 a3 ff ff ff ff ff a3     ................
    3ae9:	a3 ff ff ff ff ff ff ff a3 ff ff ff ff ff ff ff     ................
    3af9:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    3b09:	06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    3b19:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3b29:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    3b39:	02 02 02 02 02 02 02 02 02 02 0b 02 02 02 0b 02     ................
    3b49:	02 0b 02 0b 02 0b 02 0b 02 02 0b 02 0b 02 0b 02     ................
    3b59:	02 0b 02 02 02 0b 02 02 02 02 0b 02 0b 02 0b 02     ................
    3b69:	02 0b 02 0b 02 0b 02 02 02 02 0b 02 02 02 0b 02     ................
    3b79:	5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c     \\\\\\\\\\\\\\\\
    3b89:	02 5c 02 5c 02 5c 02 5c 02 02 0b 02 0b 02 0b 02     .\.\.\.\........
    3b99:	02 0b 02 02 02 0b 02 02 02 02 0b 02 0b 02 0b 02     ................
    3ba9:	02 0b 02 0b 02 0b 02 02 02 02 0b 02 02 02 0b 02     ................
    3bb9:	27 1f 27 1f 1f 1f 27 1f 1f 1f 1f 27 1f 27 1f 1f     '.'...'....'.'..
    3bc9:	27 1f 27 1f 1f 2f 27 1f 1f 27 2f 1f 27 1f 1f 1f     '.'../'..'/.'...
    3bd9:	1f 1f 27 1f 2f 1f 27 1f 1f 27 1f 27 1f 1f 2f 1f     ..'./.'..'.'../.
    3be9:	1f 1f 2f 1f 1f 27 1f 27 1f 1f 1f 27 1f 1f 1f 1f     ../..'.'...'....
    3bf9:	6e 65 6e 65 6e 65 6e 65 65 6e 65 6e 65 6e 65 6e     neneneneenenenen
    3c09:	6e 65 6e 65 6e 65 6e 65 65 6e 65 6e 65 6e 65 6e     neneneneenenenen
    3c19:	6e 65 6e 65 6e 65 6e 65 65 6e 65 6e 65 6e 65 6e     neneneneenenenen
    3c29:	6e 65 6e 65 6e 65 6e 65 65 6e 65 6e 65 6e 65 6e     neneneneenenenen
    3c39:	2b 28 2b 28 2b 28 2b 28 28 2b 28 2b 28 2b 28 2b     +(+(+(+((+(+(+(+
    3c49:	28 2b 28 2b 28 2b 28 2b 28 2b 65 6e 65 6e 28 2b     (+(+(+(+(+enen(+
    3c59:	28 65 6e 65 6e 65 6e 2b 65 6e 65 6e 65 6e 65 6e     (enenen+enenenen
    3c69:	6e 65 6e 65 6e 65 6e 65 65 6e 65 6e 65 6e 65 6e     neneneneenenenen
    3c79:	b5 23 23 b5 b5 23 23 b5 b5 b5 b5 23 23 b5 b5 b5     .##..##....##...
    3c89:	b5 06 06 06 06 06 06 b5 06 06 06 06 06 06 06 06     ................
    3c99:	b5 06 06 06 06 06 06 b5 b5 b5 06 06 06 06 b5 b5     ................
    3ca9:	b5 06 06 77 77 06 06 b5 06 06 77 02 02 77 06 06     ...ww.....w..w..
    3cb9:	23 64 63 62 23 64 63 62 23 64 63 62 23 64 63 62     #dcb#dcb#dcb#dcb
    3cc9:	23 65 65 65 23 65 65 65 23 65 65 65 23 65 65 65     #eee#eee#eee#eee
    3cd9:	23 b5 23 b5 23 b5 23 b5 23 b5 23 b5 23 b5 23 b5     #.#.#.#.#.#.#.#.
    3ce9:	23 23 23 b5 23 b5 23 b5 b5 23 23 b5 b5 23 23 b5     ###.#.#..##..##.
    3cf9:	50 50 50 50 50 50 50 50 ad ad ad 50 ad ad ad ad     PPPPPPPP...P....
    3d09:	ad a4 ad 50 ad a4 ad ad ad ad ad 50 ad ad ad ad     ...P.......P....
    3d19:	50 50 50 50 50 50 50 50 ad ad ad ad ad ad ad 50     PPPPPPPP.......P
    3d29:	ad a4 ad ad ad a4 ad 50 ad ad ad ad ad ad ad 50     .......P.......P
    3d39:	a5 a5 a5 a5 a5 a5 a5 a5 a4 a4 a4 a4 a4 a4 a4 a4     ................
    3d49:	a4 a4 a4 a4 a4 a4 a4 a4 ad ad ad 50 ad ad ad ad     ...........P....
    3d59:	50 50 50 50 50 50 50 50 ad ad ad ad ad ad ad 50     PPPPPPPP.......P
    3d69:	ad a4 ad ad ad a4 ad 50 ad ad ad ad ad ad ad 50     .......P.......P
    3d79:	80 80 80 00 80 80 80 80 80 80 80 00 80 80 80 80     ................
    3d89:	80 00 00 00 80 80 80 80 80 00 80 80 80 80 80 80     ................
    3d99:	80 00 00 00 80 80 80 80 80 80 80 00 00 00 80 80     ................
    3da9:	80 80 80 80 80 7f 80 80 80 80 80 80 7f 80 7f 80     ................
    3db9:	65 65 65 65 65 65 65 65 5d 66 65 5d 65 66 66 65     eeeeeeee]fe]effe
    3dc9:	65 65 65 66 5d 65 65 5d 65 5c 65 65 65 65 65 65     eeef]ee]e\eeeeee
    3dd9:	65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 5c     eeeeeeeeeeeeeee\
    3de9:	5c 5c 65 65 65 5c 65 65 5c 5c 5c 5c 5c 5c 5c 5c     \\eee\ee\\\\\\\\
    3df9:	5c 1c 65 65 5d 5c 5c 65 13 13 13 14 13 65 5d 65     \.ee]\\e.....e]e
    3e09:	5c 65 13 14 65 65 1c 65 13 13 5c 13 13 65 13 65     \e..ee.e..\..e.e
    3e19:	14 14 5c 13 5d 5c 13 13 1c 13 13 5c 5c 5c 5c 5c     ..\.]\.....\\\\\
    3e29:	1c 14 5c 13 13 13 13 13 13 5c 65 5c 13 13 5c 13     ..\......\e\..\.
    3e39:	13 13 13 13 13 13 13 2f 13 13 13 13 13 13 13 2f     ......./......./
    3e49:	2f 13 13 13 13 13 2f 77 2f 13 13 13 13 13 2f 77     /...../w/...../w
    3e59:	77 2f 13 13 13 2f 77 77 77 2f 13 13 13 2f 77 77     w/.../www/.../ww
    3e69:	77 77 2f 13 2f 77 77 77 77 77 2f 13 2f 77 77 77     ww/./wwwww/./www
    3e79:	77 77 77 2f 13 2f 77 77 77 77 77 2f 13 2f 77 77     www/./wwwww/./ww
    3e89:	77 77 2f 13 13 13 2f 77 77 77 2f 13 13 13 2f 77     ww/.../www/.../w
    3e99:	77 2f 13 13 13 13 13 2f 77 2f 13 13 13 13 13 2f     w/...../w/...../
    3ea9:	2f 13 13 13 13 13 13 13 2f 13 13 13 13 13 13 13     /......./.......
    3eb9:	02 02 14 14 14 14 14 14 14 02 02 02 02 02 02 02     ................
    3ec9:	14 14 14 02 1d 14 14 02 14 14 02 1d 1d 14 14 02     ................
    3ed9:	14 14 02 14 14 14 02 1d 14 14 02 02 14 14 02 1d     ................
    3ee9:	14 02 02 02 02 02 02 1d 14 02 1d 14 02 14 14 1d     ................
    3ef9:	14 02 02 02 02 02 02 14 02 02 1d 1d 14 14 02 02     ................
    3f09:	14 1d 1d 1d 14 02 02 14 14 14 14 14 02 02 1d 1d     ................
    3f19:	02 02 02 02 02 1d 1d 14 14 14 14 02 14 14 14 14     ................
    3f29:	1d 14 14 02 14 14 14 14 1d 14 02 02 02 02 02 14     ................
    3f39:	02 02 14 14 14 02 14 14 14 02 02 02 14 02 02 02     ................
    3f49:	14 02 14 02 14 14 02 14 02 02 14 02 02 02 02 14     ................
    3f59:	02 02 14 14 14 02 14 14 1d 02 14 14 02 02 02 02     ................
    3f69:	1d 14 02 02 02 1d 1d 14 14 14 02 14 1d 1d 1d 14     ................
    3f79:	14 14 02 1d 1d 14 02 02 02 14 02 1d 14 14 02 02     ................
    3f89:	02 02 02 02 14 02 02 1d 14 14 14 02 02 1d 1d 1d     ................
    3f99:	14 14 02 02 14 14 14 14 02 02 02 02 14 14 02 02     ................
    3fa9:	14 14 14 02 02 02 02 1d 14 14 14 14 14 02 14 14     ................
	...
    3fc1:	c7 c7 c7 c7 c7 c7 c7 c7 c7 c7 c7 c7 c7 c7 c7 c7     ................
    3fd1:	df df df df df df df df ef ef ef ef ef ef ef ef     ................
    3fe1:	df df df df df df df df c7 c7 c7 c7 c7 c7 c7 c7     ................
	...
    3ff9:	ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad     ................
    4009:	ad ad ad ad ad ad ad ad ad ad ad ff ff ad ad ad     ................
    4019:	ad ad ad ff ff ad ad ad ad ad ad ad ad ad ad ad     ................
    4029:	ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad     ................
    4039:	ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad a3     ................
    4049:	ad ad ad ad ad ad a3 a3 ad ad ad ad ad a3 a3 a3     ................
    4059:	ad ad ad ad a3 a3 a3 a3 ad ad ad a3 a3 a3 a3 a3     ................
    4069:	ad ad a3 a3 a3 a3 a3 a3 ad a3 a3 a3 a3 a3 a3 a3     ................
    4079:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4089:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4099:	a3 a3 a3 ad ad a3 a3 a3 a3 a3 a3 ad ad a3 a3 a3     ................
    40a9:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    40b9:	00 00 00 00 00 06 06 1f 00 00 06 06 06 1f 1f bf     ................
    40c9:	00 06 06 06 06 1f 1f bf 06 06 06 06 1f 1f bf bf     ................
    40d9:	06 06 06 06 1f 1f bf bf 00 06 06 06 06 1f 1f bf     ................
    40e9:	00 00 06 06 06 1f 1f bf 00 00 00 00 00 06 06 1f     ................
    40f9:	1f 06 06 00 00 00 00 00 bf 1f 1f 06 06 06 00 00     ................
    4109:	bf 1f 1f 06 06 06 06 00 bf bf 1f 1f 06 06 06 06     ................
    4119:	bf bf 1f 1f 06 06 06 06 bf 1f 1f 06 06 06 06 00     ................
    4129:	bf 1f 1f 06 06 06 00 00 1f 06 06 00 00 00 00 00     ................
    4139:	00 00 bf ff bf bf 00 00 00 00 bf ff bf bf 00 00     ................
    4149:	00 00 bf ff bf bf 00 00 00 00 bf ff bf bf 00 00     ................
    4159:	00 00 bf ff bf bf 00 00 00 00 bf ff bf bf 00 00     ................
    4169:	00 00 bf ff bf bf 00 00 00 00 bf ff bf bf 00 00     ................
    4179:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    4189:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    4199:	bf bf bf bf 00 00 00 00 bf bf bf bf 00 00 00 00     ................
    41a9:	bf bf bf bf 00 00 00 00 bf bf bf bf 00 00 00 00     ................
    41b9:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    41c9:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
	...
    41f9:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    4209:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    4219:	00 00 00 00 bf bf bf bf 00 00 00 00 bf bf bf bf     ................
    4229:	00 00 00 00 bf bf bf bf 00 00 00 00 bf bf bf bf     ................
	...
    4251:	00 00 00 e3 00 00 00 00 00 00 e3 ff e3 00 00 00     ................
    4261:	00 00 00 e3 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4291:	00 00 00 d2 00 00 00 00 00 00 d2 e3 d2 00 00 00     ................
    42a1:	00 00 00 d2 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    42b9:	bf bf bf bf 00 00 00 00 bf bf bf bf 00 00 00 00     ................
    42c9:	bf bf bf bf 00 00 00 00 bf bf bf bf 00 00 00 00     ................
    42d9:	bf bf bf bf 00 00 00 00 bf bf bf bf 00 00 00 00     ................
    42e9:	bf bf bf bf 00 00 00 00 bf bf bf bf 00 00 00 00     ................
    42f9:	00 00 00 00 bf bf bf bf 00 00 00 00 bf bf bf bf     ................
    4309:	00 00 00 00 bf bf bf bf 00 00 00 00 bf bf bf bf     ................
    4319:	00 00 00 00 bf bf bf bf 00 00 00 00 bf bf bf bf     ................
    4329:	00 00 00 00 bf bf bf bf 00 00 00 00 bf bf bf bf     ................
    4339:	bf bf bf bf 00 00 00 00 bf bf bf bf 00 00 00 00     ................
    4349:	bf bf bf bf 00 00 00 00 bf bf bf bf 00 00 00 00     ................
    4359:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    4369:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
	...
    4399:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    43a9:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    43b9:	00 00 00 00 bf bf bf bf 00 00 00 00 bf bf bf bf     ................
    43c9:	00 00 00 00 bf bf bf bf 00 00 00 00 bf bf bf bf     ................
    43d9:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    43e9:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    43f9:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    4409:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    4419:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    4429:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
	...
    4445:	00 00 96 96 00 00 00 00 00 96 96 96 00 00 00 00     ................
    4455:	96 96 96 96 00 00 00 96 96 96 96 96 00 00 96 96     ................
    4465:	96 96 96 96 00 00 96 96 96 96 96 96 00 96 96 96     ................
    4475:	96 96 96 96 00 96 96 96 96 96 96 00 96 96 96 96     ................
    4485:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    4495:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    44a5:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    44b5:	96 96 96 96 00 00 00 00 00 00 00 00 96 96 00 00     ................
    44c5:	00 00 00 00 96 96 96 00 00 00 00 00 96 96 96 96     ................
    44d5:	00 00 00 00 96 96 96 96 96 00 00 00 96 96 96 96     ................
    44e5:	96 96 00 00 96 96 96 96 96 96 00 00 96 96 96 96     ................
    44f5:	96 96 96 00 00 96 96 96 95 96 96 96 00 96 96 96     ................
    4505:	95 96 96 96 96 96 96 96 96 95 96 96 96 96 96 96     ................
    4515:	96 95 96 96 96 96 96 96 96 96 95 96 96 96 96 96     ................
    4525:	96 bf 95 96 95 84 96 96 96 bf 96 95 8c 83 83 8c     ................
    4535:	96 bf 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    4545:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    4555:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    4565:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    4575:	96 96 96 96 96 96 96 95 96 96 96 00 96 96 96 95     ................
    4585:	96 96 96 00 96 96 95 96 96 96 96 96 96 96 95 96     ................
    4595:	96 96 96 96 96 95 96 96 96 96 96 96 96 95 96 96     ................
    45a5:	96 96 95 96 95 96 96 96 96 95 95 95 96 96 96 96     ................
    45b5:	94 8c 8c 95 82 82 82 82 82 bf 96 96 00 d8 d8 d8     ................
    45c5:	bf ff bf 82 00 d8 d8 bf ff ff ff bf 00 d8 bf ff     ................
    45d5:	ff ff ff ff bf bf ff ff ff ff ff ff 00 00 bf ff     ................
    45e5:	ff ff ff ff 00 00 94 bf ff ff ff bf 00 00 00 8c     ................
    45f5:	bf ff bf d8 96 96 96 96 96 96 96 96 83 83 8c 8c     ................
    4605:	8c 8c 8c 83 d8 d8 d8 d8 d8 d8 d8 d8 bf d8 d8 d8     ................
    4615:	d8 d8 d8 d8 ff bf bf d8 d8 d8 d8 d8 bf d8 d8 d8     ................
    4625:	d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8     ................
    4635:	d8 d8 82 82 96 96 8c 83 83 8c 8c 8c 83 82 83 83     ................
    4645:	83 83 8c 00 82 82 82 83 83 83 83 00 82 82 82 83     ................
    4655:	83 83 83 00 d8 82 82 83 83 83 83 00 82 82 82 83     ................
    4665:	83 83 00 00 82 82 83 83 83 95 00 00 82 82 83 83     ................
    4675:	95 00 00 00 40 40 40 40 40 40 40 40 40 40 40 40     ....@@@@@@@@@@@@
    4685:	40 40 40 40 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     @@@@............
    4695:	c0 c0 c0 c0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0     ................
    46a5:	e0 e0 e0 e0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0     ................
    46b5:	f0 f0 f0 f0 00 00 00 96 95 ff d8 d8 00 00 00 00     ................
    46c5:	96 ff 83 82 00 00 00 00 00 ff 96 96 00 00 00 00     ................
    46d5:	00 bf 96 96 00 00 00 00 00 bf 96 96 00 00 00 00     ................
    46e5:	00 bf 96 96 00 00 00 00 00 bf 00 00 00 00 00 00     ................
    46f5:	00 77 00 00 d8 d8 d8 82 82 82 82 82 82 82 82 82     .w..............
    4705:	82 83 83 83 8c 8c 83 83 83 83 8c 95 96 96 96 96     ................
    4715:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    4725:	96 96 96 96 96 96 96 96 96 96 96 96 00 96 96 96     ................
    4735:	96 96 96 00 83 83 8c 95 96 00 00 00 83 8c 96 96     ................
    4745:	00 00 00 00 96 96 96 00 00 00 00 00 96 96 96 00     ................
    4755:	00 00 00 00 96 96 00 00 00 00 00 00 96 96 00 00     ................
	...
    4779:	f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    4789:	f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9     ................
    4799:	fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa     ................
    47a9:	fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb     ................
    47b9:	00 00 00 00 00 77 00 00 00 00 00 00 00 77 00 00     .....w.......w..
    47c9:	00 00 00 00 00 77 00 00 00 00 00 00 00 77 00 00     .....w.......w..
    47d9:	00 00 00 00 00 77 00 00 00 00 00 00 00 77 00 00     .....w.......w..
	...
    4801:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    4811:	00 3f 3f 2f 3f 3f 3f 2f 00 3f 3f 3f 2f 3f 3f 2f     .??/???/.???/??/
    4821:	00 3f 3f 2f 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??/.??/..????/.
	...
    4841:	00 00 00 3f 3f 2f 00 00 00 00 3f 3f 3f 2f 00 00     ...??/....???/..
    4851:	00 00 00 3f 3f 2f 00 00 00 00 00 3f 3f 2f 00 00     ...??/.....??/..
    4861:	00 00 00 3f 3f 2f 00 00 00 3f 3f 3f 3f 3f 3f 2f     ...??/...??????/
	...
    4881:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 00 00 3f 3f 2f     ..????/..??..??/
    4891:	00 00 00 00 3f 3f 2f 00 00 00 00 3f 3f 2f 00 00     ....??/....??/..
    48a1:	00 00 3f 3f 2f 00 00 00 00 3f 3f 3f 3f 3f 3f 2f     ..??/....??????/
	...
    48c1:	00 3f 3f 3f 3f 3f 3f 2f 00 00 00 00 3f 3f 2f 00     .??????/....??/.
    48d1:	00 00 00 3f 3f 2f 00 00 00 00 00 00 3f 3f 2f 00     ...??/......??/.
    48e1:	00 3f 3f 00 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??..??/..????/.
	...
    4905:	3f 3f 2f 00 00 00 00 3f 3f 3f 2f 00 00 00 3f 3f     ??/....???/...??
    4915:	3f 3f 2f 00 00 3f 3f 00 3f 3f 2f 00 00 3f 3f 3f     ??/..??.??/..???
    4925:	3f 3f 3f 2f 00 00 00 00 3f 3f 2f 00 00 00 00 00     ???/....??/.....
	...
    4941:	00 3f 3f 3f 3f 3f 3f 2f 00 3f 3f 2f 00 00 00 00     .??????/.??/....
    4951:	00 3f 3f 3f 3f 3f 2f 00 00 00 00 00 00 3f 3f 2f     .?????/......??/
    4961:	00 3f 3f 00 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??..??/..????/.
	...
    4981:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 00 00 00     ..????/..??/....
    4991:	00 3f 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     .?????/..??/.??/
    49a1:	00 3f 3f 2f 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??/.??/..????/.
	...
    49c1:	00 3f 3f 3f 3f 3f 3f 2f 00 00 00 00 00 3f 3f 2f     .??????/.....??/
    49d1:	00 00 00 00 3f 3f 2f 00 00 00 00 3f 3f 2f 00 00     ....??/....??/..
    49e1:	00 00 3f 3f 2f 00 00 00 00 00 3f 3f 2f 00 00 00     ..??/.....??/...
	...
    4a01:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    4a11:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    4a21:	00 3f 3f 2f 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??/.??/..????/.
	...
    4a41:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    4a51:	00 00 3f 3f 3f 3f 3f 2f 00 00 00 00 00 3f 3f 2f     ..?????/.....??/
    4a61:	00 00 00 00 3f 3f 2f 00 00 00 3f 3f 3f 2f 00 00     ....??/...???/..
	...
    4a81:	00 00 00 ff ff e3 00 00 00 00 ff ff ff ff e3 00     ................
    4a91:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4aa1:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    4ac1:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    4ad1:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    4ae1:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff e3 00     ................
	...
    4b01:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    4b11:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    4b21:	00 ff ff e3 00 ff ff e3 00 00 ff ff ff ff e3 00     ................
	...
    4b41:	00 ff ff ff ff e3 00 00 00 ff ff e3 ff ff e3 00     ................
    4b51:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4b61:	00 ff ff e3 ff ff e3 00 00 ff ff ff ff e3 00 00     ................
	...
    4b81:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 00 00 00     ................
    4b91:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 00 00 00     ................
    4ba1:	00 ff ff e3 00 00 00 00 00 ff ff ff ff ff ff e3     ................
	...
    4bc1:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 00 00 00     ................
    4bd1:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 00 00 00     ................
    4be1:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
	...
    4c01:	00 00 ff ff ff ff ff e3 00 ff ff e3 00 00 00 00     ................
    4c11:	00 ff ff e3 00 00 00 00 00 ff ff e3 ff ff ff e3     ................
    4c21:	00 ff ff e3 00 ff ff e3 00 00 ff ff ff ff ff e3     ................
	...
    4c41:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4c51:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4c61:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    4c81:	00 ff ff ff ff ff ff e3 00 00 00 ff ff e3 00 00     ................
    4c91:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
    4ca1:	00 00 00 ff ff e3 00 00 00 ff ff ff ff ff ff e3     ................
	...
    4cc5:	ff ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    4cd5:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 ff ff 00     ................
    4ce5:	00 ff ff e3 00 00 ff ff ff ff e3 00 00 00 00 00     ................
	...
    4d01:	00 ff ff e3 00 ff ff e3 00 ff ff e3 ff ff e3 00     ................
    4d11:	00 ff ff ff ff e3 00 00 00 ff ff ff ff e3 00 00     ................
    4d21:	00 ff ff e3 ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
	...
    4d41:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    4d51:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    4d61:	00 ff ff e3 00 00 00 00 00 ff ff ff ff ff ff e3     ................
	...
    4d81:	ff ff e3 00 00 ff ff e3 ff ff ff e3 ff ff ff e3     ................
    4d91:	ff ff ff ff ff ff ff e3 ff ff e3 ff e3 ff ff e3     ................
    4da1:	ff ff e3 00 00 ff ff e3 ff ff e3 00 00 ff ff e3     ................
	...
    4dc1:	00 ff ff e3 00 ff ff e3 00 ff ff ff e3 ff ff e3     ................
    4dd1:	00 ff ff ff ff ff ff e3 00 ff ff ff ff ff ff e3     ................
    4de1:	00 ff ff e3 ff ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    4e01:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    4e11:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4e21:	00 ff ff e3 00 ff ff e3 00 00 ff ff ff ff e3 00     ................
	...
    4e41:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    4e51:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff e3 00     ................
    4e61:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
	...
    4e81:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    4e91:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4ea1:	00 ff ff e3 ff ff e3 00 00 00 ff ff e3 ff ff e3     ................
	...
    4ec1:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    4ed1:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff e3 00     ................
    4ee1:	00 ff ff e3 ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
	...
    4f01:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 00 00 00     ................
    4f11:	00 00 ff ff ff ff e3 00 00 00 00 00 00 ff ff e3     ................
    4f21:	00 00 00 00 00 ff ff e3 00 00 ff ff ff ff e3 00     ................
	...
    4f41:	00 ff ff ff ff ff ff e3 00 00 00 ff ff e3 00 00     ................
    4f51:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
    4f61:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
	...
    4f81:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4f91:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4fa1:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff ff e3     ................
	...
    4fc1:	00 ff ff 00 00 ff ff e3 00 ff ff 00 00 ff ff e3     ................
    4fd1:	00 ff ff 00 00 ff ff e3 00 ff ff 00 00 ff ff e3     ................
    4fe1:	00 00 ff ff ff ff e3 00 00 00 00 ff ff e3 00 00     ................
	...
    5001:	ff ff e3 00 00 ff ff e3 ff ff e3 00 00 ff ff e3     ................
    5011:	ff ff e3 ff e3 ff ff e3 ff ff ff ff ff ff ff e3     ................
    5021:	ff ff ff e3 ff ff ff e3 ff ff e3 00 00 ff ff e3     ................
	...
    5041:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    5051:	00 00 ff ff ff ff e3 00 00 00 ff ff ff ff e3 00     ................
    5061:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    5081:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    5091:	00 00 ff ff ff ff e3 00 00 00 00 ff ff e3 00 00     ................
    50a1:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
	...
    50c1:	00 ff ff ff ff ff ff e3 00 00 00 00 ff ff e3 00     ................
    50d1:	00 00 00 ff ff e3 00 00 00 00 ff ff e3 00 00 00     ................
    50e1:	00 ff ff e3 00 00 00 00 00 ff ff ff ff ff ff e3     ................
	...
    50f9:	a0 a0 a0 a0 a0 a0 a0 ff a0 a0 a0 a0 a0 a0 ff ff     ................
    5109:	a0 a0 a0 a0 a0 ff ff 02 a0 a0 a0 a0 ff ff 02 02     ................
    5119:	a0 a0 a0 ff ff 02 02 02 a0 a0 ff ff 02 02 02 02     ................
    5129:	a0 ff ff 02 02 02 02 02 ff ff 02 02 02 02 02 02     ................
    5139:	ff 02 02 02 02 02 02 02 ff 02 02 02 02 02 02 02     ................
    5149:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    5159:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    5169:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    5179:	ff ff ff ff ff ff ff ff 02 02 02 02 02 02 02 02     ................
    5189:	02 02 02 02 02 02 02 02 a0 a0 a0 a0 a0 a0 a0 a0     ................
    5199:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    51a9:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    51b9:	ff ff ff ff ff ff ff ff 02 02 ff ff ff ff 02 02     ................
    51c9:	02 02 02 ff ff 02 02 02 a0 a0 a0 ff a0 a0 a0 a0     ................
    51d9:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    51e9:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    51f9:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    5209:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    5219:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    5229:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    5239:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    5249:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    5259:	02 02 02 ff ff 02 02 02 02 02 ff ff ff ff 02 02     ................
    5269:	02 ff ff ff ff ff ff 02 ff ff ff ff ff ff ff ff     ................
    5279:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    52b9:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    52c9:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    52d9:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    52e9:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    52f9:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    5309:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    5319:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    5329:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    5339:	03 03 03 03 03 03 03 1f 03 03 03 03 03 03 0f 06     ................
    5349:	03 03 03 03 03 02 02 06 03 03 03 03 02 02 02 06     ................
    5359:	03 03 03 02 02 02 02 06 03 03 02 02 02 02 06 02     ................
    5369:	03 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    5379:	1f 2f 2f 2f 2f 2f 2f 1f 06 06 06 1f 1f 1f 06 02     .//////.........
    5389:	02 02 06 1f 06 1f 06 02 02 02 06 02 06 1f 06 02     ................
    5399:	02 02 06 02 06 06 02 06 02 06 06 02 02 06 02 06     ................
    53a9:	02 06 02 02 02 06 02 06 06 02 02 02 02 06 02 02     ................
    53b9:	1f 03 03 03 03 03 03 03 06 0f 03 03 03 03 03 03     ................
    53c9:	06 02 02 03 03 03 03 03 06 02 02 02 03 03 03 03     ................
    53d9:	06 06 02 02 02 03 03 03 02 02 02 02 02 02 03 03     ................
    53e9:	02 02 02 02 02 02 02 03 06 02 02 02 02 02 02 02     ................
    53f9:	03 03 03 03 03 03 03 02 03 03 03 03 03 03 02 02     ................
    5409:	03 03 03 03 03 02 02 02 03 03 03 03 02 02 02 02     ................
    5419:	03 03 03 02 02 02 02 02 03 03 02 02 02 02 02 02     ................
    5429:	03 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    5439:	02 03 03 03 03 03 03 03 02 02 03 03 03 03 03 03     ................
    5449:	02 02 02 03 03 03 03 03 02 02 02 02 03 03 03 03     ................
    5459:	02 02 02 02 02 03 03 03 02 02 02 02 02 02 03 03     ................
    5469:	02 02 02 02 02 02 02 03 02 02 02 02 02 02 02 02     ................
    5479:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    5489:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    5499:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    54a9:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    54b9:	fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc     ................
    54c9:	fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc     ................
    54d9:	b7 b7 b7 b7 b7 b7 b7 b7 b7 b7 b7 b7 b7 b7 b7 b7     ................
    54e9:	b6 b6 b6 b6 b6 b6 b6 b6 b6 b6 b6 b6 b6 b6 b6 b6     ................
    54f9:	b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5     ................
    5509:	b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5     ................
    5519:	b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5     ................
    5529:	b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5     ................
    5539:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    5549:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    5559:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    5569:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    5579:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    5589:	80 80 80 80 80 80 80 80 80 80 80 e3 80 80 80 80     ................
    5599:	80 80 e3 ff e3 80 80 80 80 80 80 e3 80 80 80 80     ................
    55a9:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    55b9:	80 80 80 80 80 80 80 ab 80 80 80 80 80 80 ab ab     ................
    55c9:	80 80 80 80 80 ab ab ab 80 80 80 80 ab ab ab ab     ................
    55d9:	80 80 80 ab ab ab ab ab 80 80 ab ab ab ab ab ab     ................
    55e9:	80 ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    55f9:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    5609:	ab ab ab 7f 7f ab ab ab ab ab ab 7f 7f ab ab ab     ................
    5619:	ab ab ab 7f 7f ab ab ab ab ab ab 7f 7f ab ab ab     ................
    5629:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    5639:	80 80 80 80 80 80 80 9b 80 80 80 80 80 80 9b 9b     ................
    5649:	80 80 80 80 80 9b 9b 9b 80 80 80 80 9b 9b 9b 9b     ................
    5659:	80 80 80 9b 9b 9b 9b 9b 80 80 9b 9b 9b 9b 9b 9b     ................
    5669:	80 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    5679:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    5689:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    5699:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    56a9:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    56b9:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    56c9:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 7f 9b 9b 9b 9b     ................
    56d9:	9b 9b 9b 7f 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    56e9:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    56f9:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    5709:	be be be be be be be be be be be be be be be be     ................
    5719:	b7 b7 b7 b7 b7 b7 b7 b7 b7 b7 b7 b7 b7 b7 b7 b7     ................
    5729:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5739:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5749:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5759:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5769:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5779:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5789:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5799:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    57a9:	77 77 77 77 77 6d 64 65 77 77 77 77 6e 5b 5b 51     wwwwwmdewwwwn[[Q
    57b9:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    57c9:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    57d9:	77 77 77 77 77 77 77 77 77 77 77 5b 5b 5b 5b 5b     wwwwwwwwwww[[[[[
    57e9:	1c 25 51 00 00 09 09 09 09 08 09 09 09 09 09 09     .%Q.............
    57f9:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5809:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5819:	6e 52 52 5a 6e 6e 77 77 00 00 00 5a 09 5b 64 77     nRRZnnww...Z.[dw
    5829:	09 11 09 08 09 09 12 12 09 09 09 09 5b 5b 52 09     ............[[R.
    5839:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5849:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5859:	77 77 77 77 77 77 77 77 77 6d 64 77 77 77 77 77     wwwwwwwwwmdwwwww
    5869:	09 52 12 12 1c 6d 6d 6d 00 00 09 09 0a 5a 5b 09     .R...mmm.....Z[.
    5879:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5889:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5899:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    58a9:	77 77 77 77 77 77 77 77 5a 5b 5b 6e 77 77 77 77     wwwwwwwwZ[[nwwww
    58b9:	77 64 0a 09 09 00 08 00 5a 52 09 08 00 00 00 10     wd......ZR......
    58c9:	77 77 59 64 6e 09 6d 25 77 77 77 77 77 77 1c 09     wwYdn.m%wwwwww..
    58d9:	77 77 77 77 77 77 77 64 77 77 77 77 77 77 77 77     wwwwwwwdwwwwwwww
    58e9:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    58f9:	00 08 09 5a 09 51 51 50 00 09 09 1b 51 00 7f 1c     ...Z.QQP....Q...
    5909:	09 51 09 13 6e 00 1c 77 64 09 12 65 1c 00 11 1c     .Q..n..wd..e....
    5919:	00 6e 77 6d 5b 6e 1c 6e 77 65 65 1c 0a 65 6e 00     .nwm[n.nwee..en.
    5929:	77 77 77 77 77 12 1c 77 77 77 77 77 77 77 1c 0a     wwwww..wwwwwww..
    5939:	50 09 09 48 51 51 00 09 13 65 77 6d 09 6d 6e 77     P..HQQ...ewm.mnw
    5949:	77 0a 09 00 76 09 12 77 77 09 77 09 1c 64 77 1c     w...v..ww.w..dw.
    5959:	09 13 13 09 01 09 00 77 6e 1c 09 09 00 25 6e 09     .......wn....%n.
    5969:	00 12 00 77 1b 08 1b 7f 09 7f 12 77 09 1c 12 77     ...w.......w...w
    5979:	09 08 09 09 08 09 09 09 13 00 09 09 09 11 5a 09     ..............Z.
    5989:	12 1c 6e 76 13 11 09 08 00 00 1b 77 6e 25 00 77     ..nv.......wn%.w
    5999:	6e 6d 77 77 00 09 09 77 65 77 77 65 77 09 0a 09     nmww...wewwew...
    59a9:	77 77 00 52 01 1c 77 7f 7f 00 77 77 77 77 77 77     ww.R..w...wwwwww
    59b9:	09 00 09 5b 11 5a 09 5c 11 1b 13 12 5c 13 64 63     ...[.Z.\....\.dc
    59c9:	09 5a 00 77 77 77 77 77 7f 13 77 77 77 77 77 77     .Z.wwwww..wwwwww
    59d9:	13 7f 77 77 77 77 77 77 77 77 77 77 77 77 77 77     ..wwwwwwwwwwwwww
    59e9:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    59f9:	77 77 77 77 77 77 77 6e 77 77 77 77 77 77 77 77     wwwwwwwnwwwwwwww
    5a09:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5a19:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5a29:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5a39:	1c 6d 13 00 77 13 7f 6d 0a 64 00 64 77 13 6e 00     .m..w..m.d.dw.n.
    5a49:	77 0a 00 77 7f 00 0a 77 77 7f 00 77 08 6e 77 77     w..w...ww..w.nww
    5a59:	77 77 48 00 6e 77 77 77 77 77 65 00 77 77 77 77     wwH.nwwwwwe.wwww
    5a69:	77 77 01 01 77 77 77 77 77 0b 00 01 77 77 77 77     ww..wwwww...wwww
    5a79:	09 7f 77 77 77 77 77 77 6e 77 77 77 77 77 77 77     ..wwwwwwnwwwwwww
    5a89:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5a99:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5aa9:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww

00005ab9 <map_font>:
    5ab9:	25 01 00 3f 40 41 42 43 44 45 46 47 48 49 4a 4b     %..?@ABCDEFGHIJK
    5ac9:	4c 4d 4e 4f 50 51 52 53 54 55 56 57 58 59 5a 5b     LMNOPQRSTUVWXYZ[
    5ad9:	5c 5d 5e 5f 60 61 62                                \]^_`ab

00005ae0 <map_atmosphere>:
    5ae0:	1c 02 39 39 39 39 39 39 39 39 39 39 39 39 39 39     ..99999999999999
    5af0:	39 39 39 39 39 39 39 39 39 39 39 39 39 39 3d 3d     99999999999999==
    5b00:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
    5b10:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d                       ==========

00005b1a <map_dialog>:
    5b1a:	0f 04 25 26 26 26 26 26 26 26 26 26 26 26 26 26     ..%&&&&&&&&&&&&&
    5b2a:	27 2a 00 00 00 00 00 00 00 00 00 00 00 00 00 2b     '*.............+
    5b3a:	2a 00 00 00 00 00 00 00 00 00 00 00 00 00 2b 2c     *.............+,
    5b4a:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2e           -------------.

00005b58 <map_canvas>:
    5b58:	0f 09 25 26 26 26 26 26 26 26 26 26 26 26 26 26     ..%&&&&&&&&&&&&&
    5b68:	27 2a 00 00 00 00 00 00 00 00 00 00 00 00 00 2b     '*.............+
    5b78:	2a 00 00 00 00 00 00 00 00 00 00 00 00 00 2b 2a     *.............+*
	...
    5b94:	00 2b 2a 00 00 00 00 00 00 00 00 00 00 00 00 00     .+*.............
    5ba4:	2b 2a 00 00 00 00 00 00 00 00 00 00 00 00 00 2b     +*.............+
    5bb4:	2a 00 00 00 00 00 00 00 00 00 00 00 00 00 2b 2a     *.............+*
	...
    5bd0:	00 2b 2c 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     .+,-------------
    5be0:	2e                                                  .

00005be1 <map_splash>:
    5be1:	0f 05 2f 2f 2f 00 2f 2f 2f 00 30 31 32 28 2f 2f     ..///.///.012(//
    5bf1:	2f 00 2f 00 00 2f 29 00 00 33 34 35 00 2f 00 28     /./../)..345./.(
    5c01:	29 2f 00 28 2f 00 00 00 36 37 38 00 2f 2f 2f 00     )/.(/...678.///.
    5c11:	2f 00 00 2f 00 28 00 3a 3b 3c 00 00 00 2f 2f 2f     /../.(.:;<...///
    5c21:	2f 00 2f 00 00 00 3e 00 29 00 2f 2f 2f              /./...>.).///

00005c2e <map_tile_none>:
    5c2e:	01 01 00                                            ...

00005c31 <map_space_mega_tiles>:
	...
    5c3d:	00 00 28 00 00 00 00 00 00 00 00 00 00 00 00 28     ..(............(
	...
    5c61:	00 00 00 28 00 29 00 00 00 00 00 00 00 00 00 28     ...(.).........(
    5c71:	00 00 29 00 00 00 00 00 00 00 00 00 00 00 28 00     ..)...........(.
	...
    5c89:	28 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00     (.......(.......
    5c99:	00 00 00 29 00 00 00 00 00 28 00 00 00 00 00 00     ...).....(......
	...
    5cb5:	00 00 00 28 00 00 00 00 00 00 00 29 00 00 00 00     ...(.......)....
	...
    5ccd:	00 00 29 00 1a 1b 1a 1b 1c 1d 1c 1d 1a 1b 1a 1b     ..).............
    5cdd:	1c 1d 1c 1d 1a 1b 1a 1b 00 00 00 00 00 00 00 00     ................
    5ced:	00 00 29 00 00 00 00 00 00 00 00 00 00 00 00 28     ..)............(
	...
    5d05:	00 00 00 28 00 00 00 00 00 00 00 00 00 00 00 00     ...(............
	...
    5d25:	00 00 00 29 28 00 00 00 00 00 00 00 00 00 00 28     ...)(..........(
    5d35:	28 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     (...............
	...
    5d51:	00 28 00 00 00 00 00 00 00 00 00 00 00 24 00 00     .(...........$..
    5d61:	00 24 00 00 00 24 00 00 00 24 00 00 00 24 00 00     .$...$...$...$..
    5d71:	00 00 28 00 00 00 00 00 00 00 00 00 00 29 00 00     ..(..........)..
	...
    5d8d:	00 00 28 00 00 00 00 00 28 00 00 00 00 00 00 00     ..(.....(.......
    5d9d:	00 29 00 00 00 00 00 28 00 00 00 00 00 28 00 00     .).....(.....(..
    5dad:	00 00 00 29 29 00 00 00 00 00 00 00 00 00 00 00     ...))...........
    5dbd:	00 29 00 00 00 00 00 00 00 00 00 00 28 00 00 00     .)..........(...
	...
    5ddd:	00 00 00 28 28 00 00 00 00 00 00 00 00 00 00 00     ...((...........
    5ded:	00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 00     .......(........
    5dfd:	1f 20 1f 20 20 21 20 21 00 22 23 00 1f 20 1f 20     . .  ! !."#.. . 
    5e0d:	20 21 20 21 00 00 00 00 00 00 00 00 00 00 00 00      ! !............
    5e1d:	00 28 00 00 00 00 00 00 00 00 00 00 00 29 00 00     .(...........)..
    5e2d:	00 00 00 28 00 00 00 00 28 00 00 00 00 00 00 00     ...(....(.......
    5e3d:	00 00 29 00 00 00 00 00 00 00 00 00 00 00 28 00     ..)...........(.
    5e4d:	00 00 00 29 00 00 00 00 28 00 00 00 00 00 00 00     ...)....(.......
	...
    5e69:	00 00 28 00 00 00 00 00 00 00 29 00 00 28 00 00     ..(.......)..(..
	...
    5e81:	00 00 00 29 00 00 00 00 00 00 00 00 00 00 28 00     ...)..........(.
	...
    5e9d:	69 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     i...............
	...
    5ec1:	00 29 00 00 00 28 00 00 00 00 00 00 00 00 00 00     .)...(..........
	...
    5edd:	00 00 28 29 00 00 00 00 00 00 00 00 00 00 00 00     ..()............
	...
    5ef5:	00 00 00 28 00 00 00 00 00 28 00 00                 ...(.....(..

00005f01 <map_level_space>:
    5f01:	1f 05 00 01 02 03 04 05 06 07 08 08 08 08 08 08     ................
    5f11:	08 08 08 08 08 08 08 08 08 08 08 08 08 08 08 08     ................
    5f21:	08 09 06 0a 0b 0c 06 0d 0e 0f 0f 0f 08 08 08 08     ................
    5f31:	08 08 08 08 08 08 08 08 08 0b 0b 0b 0b 0b 0b 08     ................
    5f41:	10 11 12 13 14 15 06 16 0f 0f 0f 17 0b 17 0b 17     ................
    5f51:	0b 17 0b 17 0b 17 0b 17 0b 0b 0b 0b 0b 0b 08 0b     ................
    5f61:	18 19 1a 1b 1c 1d 1e 0f 0f 0f 08 08 08 08 08 08     ................
    5f71:	08 08 08 08 08 08 08 1f 0b 0b 0b 0b 0b 08 09 0e     ................
    5f81:	20 21 22 00 21 23 08 08 08 08 08 08 08 08 08 08      !".!#..........
    5f91:	08 08 08 08 08 08 08 08 08 08 08 08 08              .............

00005f9e <map_level_mega_tiles>:
    5f9e:	06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    5fae:	06 06 06 06 06 06 06 06 06 06 06 06 06 06 08 06     ................
    5fbe:	06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    5fce:	06 06 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    5fde:	04 04 04 04 04 04 04 04 04 04 04 06 06 06 06 06     ................
    5fee:	06 06 06 06 06 06 06 06 06 06 05 05 05 05 05 07     ................
    5ffe:	07 07 07 07 06 06 06 06 06 06 06 08 06 06 06 06     ................
    600e:	06 06 06 05 05 05 05 05 07 07 07 07 07 07 07 07     ................
    601e:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    602e:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    603e:	07 07 07 07 07 07 07 07 07 07 02 02 02 02 02 09     ................
    604e:	09 09 09 09 07 07 07 07 07 07 07 07 07 07 07 07     ................
    605e:	07 07 07 07 07 07 07 07 07 07 07 07 07 02 02 02     ................
    606e:	02 02 09 09 09 09 09 07 07 07 07 07 07 07 07 07     ................
    607e:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    608e:	07 07 63 07 07 07 07 64 65 66 07 07 07 07 07 07     ..c....def......
    609e:	07 02 02 02 07 02 04 04 04 02 04 04 04 04 04 04     ................
    60ae:	04 04 04 07 07 07 07 07 02 02 02 07 07 04 04 04     ................
    60be:	02 07 04 04 04 04 02 04 04 04 04 04 66 65 67 07     ............feg.
    60ce:	07 07 07 67 66 65 65 66 67 07 07 07 07 68 07 07     ...gfeefg....h..
    60de:	02 02 02 02 02 07 07 07 07 07 07 07 07 07 07 07     ................
    60ee:	07 07 07 07 07 07 07 07 07 0a 0a 0a 0a 0a 07 07     ................
    60fe:	07 07 02 07 07 07 02 04 07 07 02 04 04 07 02 04     ................
    610e:	04 04 02 04 04 04 04 02 02 02 02 02 04 04 04 04     ................
    611e:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    612e:	0a 0a 0a 0a 0a 04 04 04 04 04 04 04 04 04 04 04     ................
    613e:	04 04 04 04 04 04 04 04 04 02 07 07 07 07 04 02     ................
    614e:	07 07 07 04 04 02 07 07 04 04 04 02 07 04 04 04     ................
    615e:	04 02 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a     ..jjjjjjjjjjjjjj
    616e:	6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a     jjjjjjjjjjjjjjjj
    617e:	6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 0b 0b 0b 0b 0b 6b     jjjjjjjjjj.....k
    618e:	6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b     kkkkkkkkkkkkkkkk
    619e:	6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6c 6d     kkkkkkkkkkkkkklm
    61ae:	6e 6b 6f 67 67 67 70 6b 6b 6b 6b 6b 6b 6b 6b 6b     nkogggpkkkkkkkkk
    61be:	6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b     kkkkkkkkkkkkkkkk
    61ce:	6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 0d 0d 0d 0d 0d 6b     kkkkkkkkkk.....k
    61de:	6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b     kkkkkkkkkkkkkkkk
    61ee:	6b 6b 6b 0c 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b     kkk.kkkkkkkkkkkk
    61fe:	6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 0c     kkkkkkkkkkkkkkk.
    620e:	6b 6b 6b 6b 6b 0c 6b 6b 6b 0c 0c 6b 6b 0c 0c 0c     kkkkk.kkk..kk...
    621e:	6b 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0e 0e 0e 0e 0c     k...............
    622e:	0c 0e 0e 0e 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ................
    623e:	0c 0c 0c 0e 0e 0e 0c 0c 0e 0e 0c 0c 0c 0c 0c 0c     ................
    624e:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 6b 6b 6b 6b     ............kkkk
    625e:	6b 0c 6b 6b 6b 6b 0c 0c 6b 6b 6b 0c 0c 0c 6b 6b     k.kkkk..kkk...kk
    626e:	0c 0c 0c 0c 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b     ....kkkkkkkkkkkk
    627e:	6b 6b 6b 6b 0d 0d 6b 6b 6b 0c 0c 0e 0e 0e 6b 6b     kkkk..kkk.....kk
    628e:	6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b     kkkkkkkkkkkkkkkk
    629e:	6b 6b 0e 0e 0e 0e 0e 6b 6b 6b 6b 6b 6b 6b 6b 6b     kk.....kkkkkkkkk
    62ae:	6b 6b 6b 6b 6b 6b 0d 0d 6b 6b 6b 0c 0c 0d 0d 0d     kkkkkk..kkk.....
    62be:	6b 6b 6b 6b 0d 6b 6b 6b 0d 0c 6b 6b 0d 0c 0c 6b     kkkk.kkk..kk...k
    62ce:	0d 0c 0c 0c 0d 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ................
    62de:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ................
    62ee:	0c 0c 0c 0c 0c 0c 0d 0c 0c 0c 0c 0c 0c 0c 0c 0c     ................
    62fe:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 6b 6b 6b 6b 6b     ...........kkkkk
    630e:	0d 6b 6b 6b 6b 0c 0d 6b 6b 6b 0c 0c 0d 6b 6b 0c     .kkkk..kkk...kk.
    631e:	0c 0c 0e 0e 6b 6b 6b 6b 6b 0d 6b 6b 6b 6b 0c 0d     ....kkkkk.kkkk..
    632e:	6b 6b 6b 0c 0c 0d 6b 6b 0c 0c 0c 0c 0c 6b 6b 6b     kkk...kk.....kkk
    633e:	6b 0d 6b 6b 6b 0d 0c 6b 6b 0d 0c 0c 6b 0d 0c 0c     k.kkk..kk...k...
    634e:	0c 0c 0c 0c 0c 0c 71 71 71 71 71 71 71 71 71 71     ......qqqqqqqqqq
    635e:	71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71     qqqqqqqqqqqqqqqq
    636e:	71 71 71 71 71 71 71 71 71 71 71 71 71 71 72 72     qqqqqqqqqqqqqqrr
    637e:	72 72 72 73 73 73 73 73 73 73 73 73 73 73 73 73     rrrsssssssssssss
    638e:	73 73 73 73 73 73 73 73 73 73 73 73 73 73 73 73     ssssssssssssssss
    639e:	73 12 12 12 12 12 73 73 11 73 73 73 73 73 73 73     s.....ss.sssssss
    63ae:	73 73 73 73 73 73 73 73 73 73 73 73 73 73 73 73     ssssssssssssssss
    63be:	73 73 73 73 73 73 73 73 73 73 73 73 73 73 10 10     ssssssssssssss..
    63ce:	10 10 10 12 12 12 12 12 73 73 73 73 73 73 73 73     ........ssssssss
    63de:	73 73 73 73 73 73 73 10 10 10 10 10 73 73 73 73     sssssss.....ssss
    63ee:	73 73 73 73 73 73 73 73 73 73 73 73 73 73 73 73     ssssssssssssssss
    63fe:	04 04 04 04 04 73 73 73 73 73 73 73 73 73 73 73     .....sssssssssss
    640e:	73 73 73 73 73 73 73 73 73 04 10 10 10 04 74 74     sssssssss.....tt
    641e:	74 74 74 74 74 74 74 74 74 74 74 74 74 74 74 74     tttttttttttttttt
    642e:	74 74 74 74 74 74 74 74 74 74 74 74 74 74 74 74     tttttttttttttttt
    643e:	74 74 74 74 74 74 74 74 75 74 74 74 74 74 74 74     ttttttttuttttttt
    644e:	74 74 74 74 74 74 74 74 74 74 74 74 76 74 74 74     ttttttttttttvttt
    645e:	76 06 74 74 76 06 06 74 74 74 74 74 74 74 74 74     v.ttv..ttttttttt
    646e:	74 74 74 74 74 74 74 74 74 74 74 74 74 14 14 14     ttttttttttttt...
    647e:	14 14 77 77 77 74 74 77 77 77 74 78 77 77 77 78     ..wwwttwwwtxwwwx
    648e:	79 77 77 77 7a 7a 77 77 77 7a 7a 77 77 77 77 74     ywwwzzwwwzzwwwwt
    649e:	77 77 77 77 74 77 77 77 77 74 77 77 77 77 74 77     wwwwtwwwwtwwwwtw
    64ae:	77 77 77 74 74 74 74 74 74 74 74 74 74 74 74 74     wwwttttttttttttt
    64be:	74 74 74 74 74 7a 7a 7a 74 74 7a 7a 7a 74 74 74     tttttzzzttzzzttt
    64ce:	74 74 74 77 77 74 74 74 77 77 7a 74 74 06 06 7a     tttwwtttwwztt..z
    64de:	74 14 14 14 14 14 74 74 15 74 74 74 74 74 74 74     t.....tt.ttttttt
    64ee:	74 74 74 74 74 74 74 74 74 74 14 14 14 14 14 77     tttttttttt.....w
    64fe:	77 77 7a 7a 77 77 77 7a 7a 77 77 77 7a 7a 06 06     wwzzwwwzzwwwzz..
    650e:	06 7a 7a 14 14 14 14 14 77 77 77 77 74 77 77 77     .zz.....wwwwtwww
    651e:	77 74 77 77 77 77 74 06 06 06 06 74 14 14 14 14     wtwwwwt....t....
    652e:	14 74 74 7a 7a 7a 74 74 7a 7a 7a 74 74 7a 7a 7a     .ttzzzttzzzttzzz
    653e:	74 74 7a 7a 7a 14 14 14 14 14 71 71 71 71 71 71     ttzzz.....qqqqqq
    654e:	71 71 71 71 71 71 71 71 71 7b 7b 7b 7b 7b 7c 7c     qqqqqqqqq{{{{{||
    655e:	7c 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c     ||||||||||||||||
    656e:	7c 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c     ||||||||||||||||
    657e:	7c 7d 7e 7f 80 81 82 83 84 85 86 7c 87 88 89 7c     |}~........|...|
    658e:	7c 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c     ||||||||||||||||
    659e:	7c 7c 7c 7c 7c 7c 7c 7c 7c 16 16 16 16 16           |||||||||.....

000065ac <map_level_desert>:
    65ac:	33 05 26 26 26 26 26 26 26 26 26 26 26 26 26 26     3.&&&&&&&&&&&&&&
    65bc:	26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26     &&&&&&&&&&&&&&&&
    65cc:	26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26     &&&&&&&&&&&&&&&&
    65dc:	26 26 26 26 26 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a     &&&&&:::::::::::
    65ec:	3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a     ::::::::::::::::
    65fc:	3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a     ::::::::::::::::
    660c:	3a 3a 3a 3a 3a 3a 3a 3a 3b 3b 3b 3b 3b 3c 3b 3b     ::::::::;;;;;<;;
    661c:	3b 3b 3b 3b 3b 3b 3b 3b 3b 3b 3b 3b 3b 3b 3b 3b     ;;;;;;;;;;;;;;;;
    662c:	3b 3b 3b 3b 3b 3b 3b 3b 3b 3b 3b 3b 3b 3b 3b 3b     ;;;;;;;;;;;;;;;;
    663c:	3b 3b 3b 3b 3b 3b 3b 3b 3b 3b 3b 3b 3c 3b 3b 3b     ;;;;;;;;;;;;<;;;
    664c:	3b 3b 3c 3b 3b 3b 3b 3b 3b 3b 3b 3b 3b 3b 3b 3b     ;;<;;;;;;;;;;;;;
    665c:	3b 3b 3b 3b 3b 3b 3b 3b 3b 3b 3b 3b 3b 3b 3b 3b     ;;;;;;;;;;;;;;;;
    666c:	3b 3b 3b 3b 3b 3b 3b 3b 3b 3b 3b 3b 3b 3b 3d 3d     ;;;;;;;;;;;;;;==
    667c:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
    668c:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
    669c:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
    66ac:	3d                                                  =

000066ad <map_level_city>:
    66ad:	33 05 2e 2f 2e 2f 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e     3.././..........
    66bd:	2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e     ................
    66cd:	2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e     ................
    66dd:	2e 2e 2e 2e 2e 2f 2e 2f 2e 2e 2e 2e 2e 2e 2e 2e     ....././........
    66ed:	2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e     ................
    66fd:	2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e     ................
    670d:	2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 30 2e 2e     .............0..
    671d:	2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e     ................
    672d:	2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e     ................
    673d:	2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 31 2e 31 2e     ............1.1.
    674d:	32 2e 2e 2e 2e 2e 33 2e 2e 34 2e 2e 2e 2e 2e 2e     2.....3..4......
    675d:	2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e     ................
    676d:	2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 31 31     ..............11
    677d:	35 36 31 37 31 31 31 31 31 38 31 31 39 31 31 31     5617111118119111
    678d:	31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31     1111111111111111
    679d:	31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31     1111111111111111
    67ad:	31                                                  1

000067ae <map_level_forest>:
    67ae:	33 05 26 26 26 26 26 26 26 26 26 26 26 26 26 26     3.&&&&&&&&&&&&&&
    67be:	26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26     &&&&&&&&&&&&&&&&
    67ce:	26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26     &&&&&&&&&&&&&&&&
    67de:	26 26 26 26 26 27 27 27 27 27 27 27 27 27 27 27     &&&&&'''''''''''
    67ee:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    67fe:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    680e:	27 27 27 27 27 27 27 27 28 28 28 28 28 28 28 28     ''''''''((((((((
    681e:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    682e:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    683e:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    684e:	29 28 28 28 28 28 28 28 28 29 28 28 28 28 29 28     )(((((((()(((()(
    685e:	28 28 28 29 28 28 28 29 28 28 28 28 29 28 28 28     ((()((()(((()(((
    686e:	28 29 28 28 28 28 29 28 28 28 28 28 28 28 2a 2a     ()(((()(((((((**
    687e:	2a 2a 2b 2a 2b 2a 2a 2a 2c 2d 2c 2b 2a 2b 2a 2a     **+*+***,-,+*+**
    688e:	2b 2a 2b 2a 2a 2b 2a 2b 2a 2b 2a 2b 2a 2a 2b 2a     +*+**+*+*+*+**+*
    689e:	2b 2a 2a 2b 2a 2b 2a 2a 2b 2a 2b 2a 2a 2a 2a 2a     +**+*+**+*+*****
    68ae:	2a                                                  *

000068af <map_level_fire>:
    68af:	33 05 12 12 12 12 12 12 12 12 12 12 12 12 12 12     3...............
    68bf:	12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12     ................
    68cf:	12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12     ................
    68df:	12 12 12 12 12 13 13 13 13 13 13 13 13 13 13 13     ................
    68ef:	13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13     ................
    68ff:	13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13     ................
    690f:	13 13 13 13 13 13 13 13 14 15 14 14 14 14 15 14     ................
    691f:	14 14 14 15 14 14 14 14 14 16 14 15 14 14 14 14     ................
    692f:	14 14 14 14 17 18 15 14 14 14 14 15 14 14 14 14     ................
    693f:	14 14 14 14 14 14 14 15 14 14 14 14 14 14 14 14     ................
    694f:	14 14 14 14 14 14 14 16 14 14 16 14 14 14 16 14     ................
    695f:	14 14 14 14 14 14 19 1a 1b 1c 14 14 14 14 14 14     ................
    696f:	14 17 18 14 14 17 18 14 14 14 14 14 14 14 16 16     ................
    697f:	16 1d 1e 1d 1e 1d 1e 1d 1e 1f 16 16 16 16 16 16     ................
    698f:	16 16 16 16 1d 1e 1d 1e 20 21 21 21 22 23 1e 1d     ........ !!!"#..
    699f:	1e 1f 16 20 1a 1b 24 25 1a 1b 24 16 16 16 16 16     ... ..$%..$.....
    69af:	16                                                  .

000069b0 <map_level_ice>:
    69b0:	33 05 00 01 00 00 00 01 00 00 00 01 00 00 01 00     3...............
    69c0:	00 01 00 00 00 00 01 00 00 00 02 02 02 02 02 02     ................
    69d0:	02 02 00 00 00 00 01 00 00 00 01 00 00 00 00 00     ................
    69e0:	00 01 00 00 00 03 03 04 03 03 03 03 04 03 03 03     ................
    69f0:	04 03 04 03 03 03 04 03 03 03 03 04 03 02 02 02     ................
    6a00:	02 02 02 02 02 03 03 03 03 03 03 04 03 03 03 03     ................
    6a10:	04 03 03 03 03 03 04 03 05 05 05 05 05 05 05 05     ................
    6a20:	05 06 06 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    6a30:	07 07 07 07 07 07 07 07 05 05 05 05 05 08 08 05     ................
    6a40:	05 05 05 05 05 05 05 05 05 05 05 05 05 09 05 05     ................
    6a50:	05 05 05 0a 02 02 0b 05 05 05 05 09 05 05 05 05     ................
    6a60:	05 05 05 05 05 05 05 05 05 05 05 05 05 08 08 05     ................
    6a70:	05 05 08 05 09 05 05 05 05 05 05 05 05 05 06 06     ................
    6a80:	0c 06 06 06 06 0a 02 02 02 02 0b 06 06 06 0c 0d     ................
    6a90:	06 0d 06 0d 06 0e 0f 0f 0f 10 0f 10 0f 10 11 06     ................
    6aa0:	06 06 06 06 06 06 06 0c 06 06 06 06 06 06 06 06     ................
    6ab0:	06 00                                               ..

00006ab2 <__ctors_end>:
    6ab2:	11 24       	eor	r1, r1
    6ab4:	1f be       	out	0x3f, r1	; 63
    6ab6:	cf ef       	ldi	r28, 0xFF	; 255
    6ab8:	d0 e1       	ldi	r29, 0x10	; 16
    6aba:	de bf       	out	0x3e, r29	; 62
    6abc:	cd bf       	out	0x3d, r28	; 61

00006abe <__do_copy_data>:
    6abe:	15 e0       	ldi	r17, 0x05	; 5
    6ac0:	a0 e0       	ldi	r26, 0x00	; 0
    6ac2:	b5 e0       	ldi	r27, 0x05	; 5
    6ac4:	e6 e0       	ldi	r30, 0x06	; 6
    6ac6:	f4 ed       	ldi	r31, 0xD4	; 212
    6ac8:	02 c0       	rjmp	.+4      	; 0x6ace <__do_copy_data+0x10>
    6aca:	05 90       	lpm	r0, Z+
    6acc:	0d 92       	st	X+, r0
    6ace:	a0 31       	cpi	r26, 0x10	; 16
    6ad0:	b1 07       	cpc	r27, r17
    6ad2:	d9 f7       	brne	.-10     	; 0x6aca <__do_copy_data+0xc>

00006ad4 <__do_clear_bss>:
    6ad4:	10 e1       	ldi	r17, 0x10	; 16
    6ad6:	a0 e1       	ldi	r26, 0x10	; 16
    6ad8:	b5 e0       	ldi	r27, 0x05	; 5
    6ada:	01 c0       	rjmp	.+2      	; 0x6ade <.do_clear_bss_start>

00006adc <.do_clear_bss_loop>:
    6adc:	1d 92       	st	X+, r1

00006ade <.do_clear_bss_start>:
    6ade:	a4 31       	cpi	r26, 0x14	; 20
    6ae0:	b1 07       	cpc	r27, r17
    6ae2:	e1 f7       	brne	.-8      	; 0x6adc <.do_clear_bss_loop>

00006ae4 <wdt_init>:

void wdt_init(void)
{

#if TRUE_RANDOM_GEN == 1	
	wdt_randomize();
    6ae4:	0e 94 0d 3b 	call	0x761a	; 0x761a <wdt_randomize>
#endif

    MCUSR = 0;
    6ae8:	14 be       	out	0x34, r1	; 52
    wdt_disable();
    6aea:	88 e1       	ldi	r24, 0x18	; 24
    6aec:	0f b6       	in	r0, 0x3f	; 63
    6aee:	f8 94       	cli
    6af0:	80 93 60 00 	sts	0x0060, r24
    6af4:	10 92 60 00 	sts	0x0060, r1
    6af8:	0f be       	out	0x3f, r0	; 63

00006afa <Initialize>:


void Initialize(void){
	int i;

	if(!isEepromFormatted()) FormatEeprom();
    6afa:	0e 94 cf 3b 	call	0x779e	; 0x779e <isEepromFormatted>
    6afe:	81 11       	cpse	r24, r1
    6b00:	02 c0       	rjmp	.+4      	; 0x6b06 <Initialize+0xc>
    6b02:	0e 94 ad 3b 	call	0x775a	; 0x775a <FormatEeprom>

	cli();
    6b06:	f8 94       	cli
		mix_bank=0;
	#endif
	
	#if MIXER_CHAN4_TYPE == 0
		//initialize LFSR		
		tr4_barrel_lo=1;
    6b08:	81 e0       	ldi	r24, 0x01	; 1
    6b0a:	80 93 e4 0c 	sts	0x0CE4, r24
		tr4_barrel_hi=1;		
    6b0e:	80 93 e5 0c 	sts	0x0CE5, r24
		tr4_params=0b00000001; //15 bits no divider (1)
    6b12:	80 93 e3 0c 	sts	0x0CE3, r24
		snesMouseEnabled=false;
	#endif

	//silence all sound channels
	for(i=0;i<CHANNELS;i++){
		mixer.channels.all[i].volume=0;
    6b16:	10 92 d0 0c 	sts	0x0CD0, r1
    6b1a:	10 92 d6 0c 	sts	0x0CD6, r1
    6b1e:	10 92 dc 0c 	sts	0x0CDC, r1
    6b22:	10 92 e2 0c 	sts	0x0CE2, r1
    6b26:	10 92 e8 0c 	sts	0x0CE8, r1
	}
	
	//set sync parameters. starts at odd field, in pre-eq pulses, line 1, vsync flag cleared
	sync_phase=0;
    6b2a:	10 92 b6 0c 	sts	0x0CB6, r1
	sync_flags=0;
    6b2e:	10 92 b8 0c 	sts	0x0CB8, r1
	sync_pulse=SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES;
    6b32:	92 e1       	ldi	r25, 0x12	; 18
    6b34:	90 93 b7 0c 	sts	0x0CB7, r25

	//set rendering parameters
	render_lines_count=FRAME_LINES;
    6b38:	90 ee       	ldi	r25, 0xE0	; 224
    6b3a:	90 93 be 0c 	sts	0x0CBE, r25
	first_render_line=FIRST_RENDER_LINE;
    6b3e:	94 e1       	ldi	r25, 0x14	; 20
    6b40:	90 93 bd 0c 	sts	0x0CBD, r25

	joypad1_status_hi=0;
    6b44:	10 92 c2 0c 	sts	0x0CC2, r1
    6b48:	10 92 c1 0c 	sts	0x0CC1, r1
	joypad2_status_hi=0;
    6b4c:	10 92 c6 0c 	sts	0x0CC6, r1
    6b50:	10 92 c5 0c 	sts	0x0CC5, r1
	sound_enabled=1;
    6b54:	80 93 cf 0c 	sts	0x0CCF, r24

	InitializeVideoMode();
    6b58:	0e 94 cd 48 	call	0x919a	; 0x919a <InitializeVideoMode>
    6b5c:	86 eb       	ldi	r24, 0xB6	; 182
    6b5e:	90 e0       	ldi	r25, 0x00	; 0
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
		val=pgm_read_word(&io_table[j]);
    6b60:	fc 01       	movw	r30, r24
    6b62:	25 91       	lpm	r18, Z+
    6b64:	34 91       	lpm	r19, Z
		ptr=(u8*)(val&0xff);
    6b66:	f9 01       	movw	r30, r18
    6b68:	ff 27       	eor	r31, r31
		*ptr=val>>8;	
    6b6a:	30 83       	st	Z, r19
    6b6c:	02 96       	adiw	r24, 0x02	; 2
	InitializeVideoMode();
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
    6b6e:	20 e0       	ldi	r18, 0x00	; 0
    6b70:	84 3e       	cpi	r24, 0xE4	; 228
    6b72:	92 07       	cpc	r25, r18
    6b74:	a9 f7       	brne	.-22     	; 0x6b60 <Initialize+0x66>
		val=pgm_read_word(&io_table[j]);
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;	
	}

	sei();
    6b76:	78 94       	sei
	
	DisplayLogo();
    6b78:	0e 94 5c 49 	call	0x92b8	; 0x92b8 <DisplayLogo>
    6b7c:	0e 94 b1 67 	call	0xcf62	; 0xcf62 <main>
    6b80:	0c 94 01 6a 	jmp	0xd402	; 0xd402 <_exit>

00006b84 <__bad_interrupt>:
    6b84:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00006b88 <sub_video_mode3>:
	;***************************************************

	sub_video_mode3:
		;de-activate sync timer interrupts
		;we will need to use the I flag to branch in a critical loop
		ldi ZL,(0<<OCIE1A)
    6b88:	e0 e0       	ldi	r30, 0x00	; 0
		sts _SFR_MEM_ADDR(TIMSK1),ZL
    6b8a:	e0 93 6f 00 	sts	0x006F, r30

		;wait cycles to align with next hsync
		WAIT r26,183+241
    6b8e:	ad e8       	ldi	r26, 0x8D	; 141
    6b90:	aa 95       	dec	r26
    6b92:	f1 f7       	brne	.-4      	; 0x6b90 <sub_video_mode3+0x8>
    6b94:	00 00       	nop

		;Refresh ramtiles indexes in VRAM
		;This has to be done because the main
		;program may have altered the VRAM
		;after vsync and the rendering interrupt.
		lds r16,userRamTilesCount
    6b96:	00 91 f3 0c 	lds	r16, 0x0CF3

		ldi ZL,lo8(ram_tiles_restore);
    6b9a:	e0 e5       	ldi	r30, 0x50	; 80
		ldi ZH,hi8(ram_tiles_restore);
    6b9c:	fc e0       	ldi	r31, 0x0C	; 12
		ldi r18,3
    6b9e:	23 e0       	ldi	r18, 0x03	; 3
		mul r16,r18
    6ba0:	02 9f       	mul	r16, r18
		add ZL,r0
    6ba2:	e0 0d       	add	r30, r0
		adc ZH,r1
    6ba4:	f1 1d       	adc	r31, r1

		ldi YL,lo8(vram)
    6ba6:	c0 e0       	ldi	r28, 0x00	; 0
		ldi YH,hi8(vram)
    6ba8:	d1 e0       	ldi	r29, 0x01	; 1

		lds r18,free_tile_index
    6baa:	20 91 7e 0d 	lds	r18, 0x0D7E
		ldi r19,MAX_RAMTILES		;maximum possible ramtiles
    6bae:	3c e3       	ldi	r19, 0x3C	; 60
		sub r19,r18					;sub free tile
    6bb0:	32 1b       	sub	r19, r18
		add r19,r16					;add user tiles
    6bb2:	30 0f       	add	r19, r16

		cp r18,r16
    6bb4:	20 17       	cp	r18, r16
		breq no_ramtiles
    6bb6:	51 f0       	breq	.+20     	; 0x6bcc <no_ramtiles>
		nop
    6bb8:	00 00       	nop
	...

00006bbc <upd_loop>:
		nop
upd_loop:
		ld XL,Z+	;load vram offset of ramtile
    6bbc:	a1 91       	ld	r26, Z+
		ld XH,Z+
    6bbe:	b1 91       	ld	r27, Z+

		ld r17,X	;get latest VRAM tile that may have been modified my
    6bc0:	1c 91       	ld	r17, X
		st Z+,r17	;the main program and store it in the restore buffer
    6bc2:	11 93       	st	Z+, r17
		st X,r16	;write the ramtile index back to vram
    6bc4:	0c 93       	st	X, r16

		inc r16
    6bc6:	03 95       	inc	r16
		cp r16,r18
    6bc8:	02 17       	cp	r16, r18
		brlo upd_loop ;loop is 14 cycles
    6bca:	c0 f3       	brcs	.-16     	; 0x6bbc <upd_loop>

00006bcc <no_ramtiles>:

no_ramtiles:
		;wait for remaining maximum possible ramtiles
1:
		ldi r17,3
    6bcc:	13 e0       	ldi	r17, 0x03	; 3
		dec r17
    6bce:	1a 95       	dec	r17
		brne .-4
    6bd0:	f1 f7       	brne	.-4      	; 0x6bce <no_ramtiles+0x2>
		rjmp .
    6bd2:	00 c0       	rjmp	.+0      	; 0x6bd4 <no_ramtiles+0x8>
		dec r19
    6bd4:	3a 95       	dec	r19
		brne 1b
    6bd6:	d1 f7       	brne	.-12     	; 0x6bcc <no_ramtiles>

		;**********************
		; setup scroll stuff
		;**********************
	
		ldi YL,lo8(vram)
    6bd8:	c0 e0       	ldi	r28, 0x00	; 0
		ldi YH,hi8(vram)
    6bda:	d1 e0       	ldi	r29, 0x01	; 1

		//add X scroll (coarse)
		lds r18,screen_scrollX ;ScreenScrollX
    6bdc:	20 91 b2 0c 	lds	r18, 0x0CB2
		mov r25,r18
    6be0:	92 2f       	mov	r25, r18
		andi r18,0xf8	;(x>>3) * 8 interleave
    6be2:	28 7f       	andi	r18, 0xF8	; 248
		add YL,r18
    6be4:	c2 0f       	add	r28, r18

		;save Y wrap adress 
		movw r12,YL
    6be6:	6e 01       	movw	r12, r28
	

		//add Y scroll (coarse)
		lds r16,screen_scrollY ;ScreenScrollY
    6be8:	00 91 b3 0c 	lds	r16, 0x0CB3
		mov r22,r16
    6bec:	60 2f       	mov	r22, r16
		lsr r16
    6bee:	06 95       	lsr	r16
		lsr r16
    6bf0:	06 95       	lsr	r16
		lsr r16 ;/8
    6bf2:	06 95       	lsr	r16

        lds r17,screen_scrollHeight
    6bf4:	10 91 b4 0c 	lds	r17, 0x0CB4
        sub r17,r16
    6bf8:	10 1b       	sub	r17, r16
        mov r15,r17 ;Y tiles to draw before wrapping
    6bfa:	f1 2e       	mov	r15, r17

        mov r17,r16
    6bfc:	10 2f       	mov	r17, r16
        lsr r16
    6bfe:	06 95       	lsr	r16
        lsr r16
    6c00:	06 95       	lsr	r16
        lsr r16 ;/8
    6c02:	06 95       	lsr	r16
		add YH,r16      ; (bits 6-7)
    6c04:	d0 0f       	add	r29, r16
		andi r17,0x7
    6c06:	17 70       	andi	r17, 0x07	; 7
        add YL,r17      ;interleave (bits 3-5)
    6c08:	c1 0f       	add	r28, r17
        andi r22,0x7    ;fine Y scrolling (bits 0-2)
    6c0a:	67 70       	andi	r22, 0x07	; 7
		;lds r20,tile_table_lo
		;lds r21,tile_table_hi
		;out _SFR_IO_ADDR(GPIOR1),r20 ;store for later
		;out _SFR_IO_ADDR(GPIOR2),r21

		lds r20,overlay_tile_table
    6c0c:	40 91 b0 0c 	lds	r20, 0x0CB0
		lds r21,overlay_tile_table+1
    6c10:	50 91 b1 0c 	lds	r21, 0x0CB1
		lds r6,tile_table_lo
    6c14:	60 90 ac 0c 	lds	r6, 0x0CAC
		lds r7,tile_table_hi
    6c18:	70 90 ad 0c 	lds	r7, 0x0CAD
		out _SFR_IO_ADDR(GPIOR1),r6 ;store for later
    6c1c:	6a bc       	out	0x2a, r6	; 42
		out _SFR_IO_ADDR(GPIOR2),r7
    6c1e:	7b bc       	out	0x2b, r7	; 43


		;save main section value	
		movw r10,YL
    6c20:	5e 01       	movw	r10, r28
		mov r23,r22
    6c22:	76 2f       	mov	r23, r22
		mov r24,r15
    6c24:	8f 2d       	mov	r24, r15
		mov r9,r25
    6c26:	99 2e       	mov	r9, r25

		;load values for overlay if it's activated (overlay_height>0)
		
		;compute beginning of overlay in vram 
		lds r16,screen_scrollHeight
    6c28:	00 91 b4 0c 	lds	r16, 0x0CB4
		mov r18,r16
    6c2c:	20 2f       	mov	r18, r16
		lsr r16
    6c2e:	06 95       	lsr	r16
		lsr r16
    6c30:	06 95       	lsr	r16
		lsr r16			;hi8
    6c32:	06 95       	lsr	r16
		inc r16			;add 0x100 ram offset
    6c34:	03 95       	inc	r16
		andi r18,7		;lo8
    6c36:	27 70       	andi	r18, 0x07	; 7
		
		lds r19,overlay_height	
    6c38:	30 91 af 0c 	lds	r19, 0x0CAF
		cpi r19,0
    6c3c:	30 30       	cpi	r19, 0x00	; 0
		in r0, _SFR_IO_ADDR(SREG)
    6c3e:	0f b6       	in	r0, 0x3f	; 63

		sbrs r0,SREG_Z
    6c40:	01 fe       	sbrs	r0, 1
		clr r22
    6c42:	66 27       	eor	r22, r22
		sbrs r0,SREG_Z
    6c44:	01 fe       	sbrs	r0, 1
		mov YL,r18		;lo8(overlay_vram)
    6c46:	c2 2f       	mov	r28, r18
		sbrs r0,SREG_Z
    6c48:	01 fe       	sbrs	r0, 1
		mov YH,r16		;hi8(overlay_vram)
    6c4a:	d0 2f       	mov	r29, r16
		sbrs r0,SREG_Z
    6c4c:	01 fe       	sbrs	r0, 1
		ser r24
    6c4e:	8f ef       	ldi	r24, 0xFF	; 255
		sbrs r0,SREG_Z
    6c50:	01 fe       	sbrs	r0, 1
		clr r9
    6c52:	99 24       	eor	r9, r9

		sbrs r0,SREG_Z
    6c54:	01 fe       	sbrs	r0, 1
		out _SFR_IO_ADDR(GPIOR1),r20
    6c56:	4a bd       	out	0x2a, r20	; 42
		sbrs r0,SREG_Z
    6c58:	01 fe       	sbrs	r0, 1
		out _SFR_IO_ADDR(GPIOR2),r21
    6c5a:	5b bd       	out	0x2b, r21	; 43


		//ldi r16,SCREEN_TILES_V*TILE_HEIGHT; total scanlines to draw
		//mov r8,r16
		lds r8,render_lines_count ;total scanlines to draw
    6c5c:	80 90 be 0c 	lds	r8, 0x0CBE

00006c60 <next_tile_line>:
	;r23 = Main section tile row
	;r24 = Current Y tiles to draw before wrapping
	;r25 = Main section scrollX

	next_tile_line:
		rcall hsync_pulse
    6c60:	bc d3       	rcall	.+1912   	; 0x73da <hsync_pulse>

		WAIT r18,HSYNC_USABLE_CYCLES - AUDIO_OUT_HSYNC_CYCLES
    6c62:	24 e0       	ldi	r18, 0x04	; 4
    6c64:	2a 95       	dec	r18
    6c66:	f1 f7       	brne	.-4      	; 0x6c64 <next_tile_line+0x4>
    6c68:	00 00       	nop
				
		call render_tile_line
    6c6a:	0e 94 76 36 	call	0x6cec	; 0x6cec <render_tile_line>

		WAIT r18,58
    6c6e:	23 e1       	ldi	r18, 0x13	; 19
    6c70:	2a 95       	dec	r18
    6c72:	f1 f7       	brne	.-4      	; 0x6c70 <next_tile_line+0x10>
    6c74:	00 00       	nop

		inc r22
    6c76:	63 95       	inc	r22
		dec r8
    6c78:	8a 94       	dec	r8
		breq text_frame_end
    6c7a:	09 f1       	breq	.+66     	; 0x6cbe <text_frame_end>

		cpi r22,TILE_HEIGHT ;last char line? 1
    6c7c:	68 30       	cpi	r22, 0x08	; 8
		breq next_tile_row
    6c7e:	29 f0       	breq	.+10     	; 0x6c8a <next_tile_row>

		;wait to align with next_tile_row instructions (+1 cycle for the breq)
		WAIT r16,25
    6c80:	08 e0       	ldi	r16, 0x08	; 8
    6c82:	0a 95       	dec	r16
    6c84:	f1 f7       	brne	.-4      	; 0x6c82 <next_tile_line+0x22>
    6c86:	00 00       	nop
		rjmp next_tile_line
    6c88:	eb cf       	rjmp	.-42     	; 0x6c60 <next_tile_line>

00006c8a <next_tile_row>:

	next_tile_row:

		clr r22		;clear current char line
    6c8a:	66 27       	eor	r22, r22

		;increment vram pointer next row
		mov r16,YL
    6c8c:	0c 2f       	mov	r16, r28
		andi r16,0x7
    6c8e:	07 70       	andi	r16, 0x07	; 7
		cpi r16,7
    6c90:	07 30       	cpi	r16, 0x07	; 7
		breq 1f
    6c92:	11 f0       	breq	.+4      	; 0x6c98 <next_tile_row+0xe>
		inc YL
    6c94:	c3 95       	inc	r28
		rjmp 2f
    6c96:	02 c0       	rjmp	.+4      	; 0x6c9c <next_tile_row+0x12>
	1:
		andi YL,0xf8
    6c98:	c8 7f       	andi	r28, 0xF8	; 248
		inc YH
    6c9a:	d3 95       	inc	r29
	2:

		dec r24		;wrap section?
    6c9c:	8a 95       	dec	r24
		brne .+2
    6c9e:	09 f4       	brne	.+2      	; 0x6ca2 <next_tile_row+0x18>
		movw YL,r12
    6ca0:	e6 01       	movw	r28, r12

		dec r19
    6ca2:	3a 95       	dec	r19
		brne .+2
    6ca4:	09 f4       	brne	.+2      	; 0x6ca8 <next_tile_row+0x1e>
		mov r22,r23	;section tile row
    6ca6:	67 2f       	mov	r22, r23
		brne .+2
    6ca8:	09 f4       	brne	.+2      	; 0x6cac <next_tile_row+0x22>
		movw YL,r10 ;vram adress
    6caa:	e5 01       	movw	r28, r10
		brne .+2
    6cac:	09 f4       	brne	.+2      	; 0x6cb0 <next_tile_row+0x26>
		mov r24,r15 ;Y wrapping
    6cae:	8f 2d       	mov	r24, r15
		brne .+2
    6cb0:	09 f4       	brne	.+2      	; 0x6cb4 <next_tile_row+0x2a>
		mov r9,r25  ;scrollX
    6cb2:	99 2e       	mov	r9, r25

		brne .+2
    6cb4:	09 f4       	brne	.+2      	; 0x6cb8 <next_tile_row+0x2e>
		out _SFR_IO_ADDR(GPIOR1),r6  ;tileset
    6cb6:	6a bc       	out	0x2a, r6	; 42
		brne .+2
    6cb8:	09 f4       	brne	.+2      	; 0x6cbc <next_tile_row+0x32>
		out _SFR_IO_ADDR(GPIOR2),r7  ;tilset
    6cba:	7b bc       	out	0x2b, r7	; 43

		rjmp next_tile_line
    6cbc:	d1 cf       	rjmp	.-94     	; 0x6c60 <next_tile_line>

00006cbe <text_frame_end>:

	text_frame_end:

		WAIT r18,28
    6cbe:	29 e0       	ldi	r18, 0x09	; 9
    6cc0:	2a 95       	dec	r18
    6cc2:	f1 f7       	brne	.-4      	; 0x6cc0 <text_frame_end+0x2>
    6cc4:	00 00       	nop

		rcall hsync_pulse ;145
    6cc6:	89 d3       	rcall	.+1810   	; 0x73da <hsync_pulse>
	
		clr r1
    6cc8:	11 24       	eor	r1, r1
		call RestoreBackground
    6cca:	0e 94 80 47 	call	0x8f00	; 0x8f00 <RestoreBackground>

		;set vsync flag & flip field
		lds ZL,sync_flags
    6cce:	e0 91 b8 0c 	lds	r30, 0x0CB8
		ldi r20,SYNC_FLAG_FIELD
    6cd2:	42 e0       	ldi	r20, 0x02	; 2
		ori ZL,SYNC_FLAG_VSYNC
    6cd4:	e1 60       	ori	r30, 0x01	; 1
		eor ZL,r20
    6cd6:	e4 27       	eor	r30, r20
		sts sync_flags,ZL
    6cd8:	e0 93 b8 0c 	sts	0x0CB8, r30
	
		cli 
    6cdc:	f8 94       	cli

		;re-activate sync timer interrupts
		ldi ZL,(1<<OCIE1A)
    6cde:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIMSK1),ZL
    6ce0:	e0 93 6f 00 	sts	0x006F, r30
			
		;clear any pending timer int
		ldi ZL,(1<<OCF1A)
    6ce4:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIFR1),ZL
    6ce6:	e0 93 36 00 	sts	0x0036, r30

		ret
    6cea:	08 95       	ret

00006cec <render_tile_line>:
	; Can destroy: r0,r1,r2,r3,r4,r5,r6,r7,r13,r16,r17,r18,r19,r20,r21,Z
	; 
	; cycles  = 1495
	;*************************************************
	render_tile_line:
		push YL
    6cec:	cf 93       	push	r28
		push YH
    6cee:	df 93       	push	r29
		push r23
    6cf0:	7f 93       	push	r23
		push r22
    6cf2:	6f 93       	push	r22
		push r19
    6cf4:	3f 93       	push	r19
		push r13
    6cf6:	df 92       	push	r13
		push r12
    6cf8:	cf 92       	push	r12
		push r9
    6cfa:	9f 92       	push	r9
		push r7
    6cfc:	7f 92       	push	r7
		push r6
    6cfe:	6f 92       	push	r6
		;--------------------------
		; Rendering 
		;---------------------------

		;get tile row offset
		ldi r23,TILE_WIDTH ;tile width in pixels
    6d00:	78 e0       	ldi	r23, 0x08	; 8
		mul r22,r23
    6d02:	67 9f       	mul	r22, r23

		;compute base adresses for ROM and RAM tiles
		in r16,_SFR_IO_ADDR(GPIOR1) ;tile_table_lo
    6d04:	0a b5       	in	r16, 0x2a	; 42
		in r17,_SFR_IO_ADDR(GPIOR2) ;tile_table_hi
    6d06:	1b b5       	in	r17, 0x2b	; 43
		subi r16,lo8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    6d08:	00 50       	subi	r16, 0x00	; 0
		sbci r17,hi8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    6d0a:	17 40       	sbci	r17, 0x07	; 7

		add r16,r0
    6d0c:	00 0d       	add	r16, r0
		adc r17,r1
    6d0e:	11 1d       	adc	r17, r1
		movw r2,r16			;rom tiles adress
    6d10:	18 01       	movw	r2, r16

		ldi r16,lo8(ram_tiles)
    6d12:	00 e5       	ldi	r16, 0x50	; 80
		ldi r17,hi8(ram_tiles)
    6d14:	15 e0       	ldi	r17, 0x05	; 5
		add r16,r0
    6d16:	00 0d       	add	r16, r0
		adc r17,r1
    6d18:	11 1d       	adc	r17, r1
		movw r4,r16			;ram tiles adress
    6d1a:	28 01       	movw	r4, r16

		ldi r19,TILE_HEIGHT*TILE_WIDTH
    6d1c:	30 e4       	ldi	r19, 0x40	; 64
		ldi r17,SCREEN_TILES_H-1	;main loop counter
    6d1e:	1b e1       	ldi	r17, 0x1B	; 27


		;handle fine scroll offset
		;lds r22,screenSections+scrollX
		mov r22,r9
    6d20:	69 2d       	mov	r22, r9
		andi r22,0x7		
    6d22:	67 70       	andi	r22, 0x07	; 7
		mov r14,r22	;pixels to draw on last tile	
    6d24:	e6 2e       	mov	r14, r22
		cli			;no trailing pixel to draw (hack, see end: )
    6d26:	f8 94       	cli
		breq .+2
    6d28:	09 f0       	breq	.+2      	; 0x6d2c <render_tile_line+0x40>
		sei			;some trailing pixel to draw (hack, see end: )
    6d2a:	78 94       	sei

		;get first pixel of last tile in ROM (for ROM tiles fine scroll)
		;and adress of next pixel
		movw ZL,YL
    6d2c:	fe 01       	movw	r30, r28
		subi ZL,-(SCREEN_TILES_H*8)
    6d2e:	e0 52       	subi	r30, 0x20	; 32
		ld r18,Z
    6d30:	20 81       	ld	r18, Z
		mul r18,r19 	;tile*width*height
    6d32:	23 9f       	mul	r18, r19
	    add r0,r2    ;add ROM title table address +row offset
    6d34:	02 0c       	add	r0, r2
	    adc r1,r3
    6d36:	13 1c       	adc	r1, r3
		movw ZL,r0
    6d38:	f0 01       	movw	r30, r0
		lpm r9,Z+	;hold first pixel until end 
    6d3a:	95 90       	lpm	r9, Z+
		movw r12,ZL ;hold second pixel adress until end
    6d3c:	6f 01       	movw	r12, r30


		;compute first tile adress
	    ld r18,Y     	;load next tile # from VRAM
    6d3e:	28 81       	ld	r18, Y
		subi YL,-8
    6d40:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT
    6d42:	2c 31       	cpi	r18, 0x1C	; 28
		in r16,_SFR_IO_ADDR(SREG)	;save the carry flag for later	
    6d44:	0f b7       	in	r16, 0x3f	; 63
		mul r18,r19 	;tile*width*height
    6d46:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles	
    6d48:	a1 01       	movw	r20, r2
		sbrc r16,SREG_C
    6d4a:	00 fd       	sbrc	r16, 0
		movw r20,r4		;ram tiles
    6d4c:	a2 01       	movw	r20, r4
	    add r0,r20    ;add title table address +row offset
    6d4e:	04 0e       	add	r0, r20
	    adc r1,r21
    6d50:	15 1e       	adc	r1, r21
		movw XL,r0
    6d52:	d0 01       	movw	r26, r0


		;compute second tile adress
	    ld r18,Y     	;load next tile # from VRAM
    6d54:	28 81       	ld	r18, Y
		subi YL,-8
    6d56:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT
    6d58:	2c 31       	cpi	r18, 0x1C	; 28
		in r7,_SFR_IO_ADDR(SREG)	;save the carry flag for later
    6d5a:	7f b6       	in	r7, 0x3f	; 63
		bst r7,SREG_C
    6d5c:	70 fa       	bst	r7, 0
		mul r18,r19 	;tile*width*height
    6d5e:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles
    6d60:	a1 01       	movw	r20, r2
		brtc .+2
    6d62:	0e f4       	brtc	.+2      	; 0x6d66 <render_tile_line+0x7a>
		movw r20,r4		;ram tiles
    6d64:	a2 01       	movw	r20, r4
	    add r0,r20      ;add title table address +row offset
    6d66:	04 0e       	add	r0, r20
	    adc r1,r21
    6d68:	15 1e       	adc	r1, r21
		movw ZL,r0
    6d6a:	f0 01       	movw	r30, r0
		movw r6,ZL		;push Z
    6d6c:	3f 01       	movw	r6, r30

00006d6e <do_fine_scroll>:


	do_fine_scroll:
		;output 1st tile with fine scroll offset 
		clr r0
    6d6e:	00 24       	eor	r0, r0
		add XL,r22	;add fine offset
    6d70:	a6 0f       	add	r26, r22
		adc XH,r0
    6d72:	b0 1d       	adc	r27, r0

		;compute jump offset
		ldi r23,3
    6d74:	73 e0       	ldi	r23, 0x03	; 3
		mul r22,r23 ;3 instructions
    6d76:	67 9f       	mul	r22, r23
	
		sbrs r16,SREG_C
    6d78:	00 ff       	sbrs	r16, 0
		rjmp rom_fine_scroll
    6d7a:	22 c0       	rjmp	.+68     	; 0x6dc0 <rom_fine_scroll>

00006d7c <ram_fine_scroll>:

	/***FINE SCROLL RAM LOOP***/
	ram_fine_scroll:
		rjmp .
    6d7c:	00 c0       	rjmp	.+0      	; 0x6d7e <ram_fine_scroll+0x2>
		ldi r22,lo8(pm(ram_fine_scroll_loop))
    6d7e:	66 ec       	ldi	r22, 0xC6	; 198
		ldi r23,hi8(pm(ram_fine_scroll_loop))
    6d80:	76 e3       	ldi	r23, 0x36	; 54
		add r22,r0
    6d82:	60 0d       	add	r22, r0
		adc r23,r1
    6d84:	71 1d       	adc	r23, r1
		push r22
    6d86:	6f 93       	push	r22
		push r23	
    6d88:	7f 93       	push	r23
		ret ;jump into ram_fine_scroll_loop
    6d8a:	08 95       	ret

00006d8c <ram_fine_scroll_loop>:
	ram_fine_scroll_loop:
		.rept 8
			ld r16,X+
			lpm
			out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		.endr
    6d8c:	0d 91       	ld	r16, X+
    6d8e:	c8 95       	lpm
    6d90:	08 b9       	out	0x08, r16	; 8
    6d92:	0d 91       	ld	r16, X+
    6d94:	c8 95       	lpm
    6d96:	08 b9       	out	0x08, r16	; 8
    6d98:	0d 91       	ld	r16, X+
    6d9a:	c8 95       	lpm
    6d9c:	08 b9       	out	0x08, r16	; 8
    6d9e:	0d 91       	ld	r16, X+
    6da0:	c8 95       	lpm
    6da2:	08 b9       	out	0x08, r16	; 8
    6da4:	0d 91       	ld	r16, X+
    6da6:	c8 95       	lpm
    6da8:	08 b9       	out	0x08, r16	; 8
    6daa:	0d 91       	ld	r16, X+
    6dac:	c8 95       	lpm
    6dae:	08 b9       	out	0x08, r16	; 8
    6db0:	0d 91       	ld	r16, X+
    6db2:	c8 95       	lpm
    6db4:	08 b9       	out	0x08, r16	; 8
    6db6:	0d 91       	ld	r16, X+
    6db8:	c8 95       	lpm
    6dba:	08 b9       	out	0x08, r16	; 8

		;branch to tile #2
		brtc romloop
    6dbc:	1e f5       	brtc	.+70     	; 0x6e04 <romloop>
		rjmp ramloop
    6dbe:	40 c0       	rjmp	.+128    	; 0x6e40 <ramloop>

00006dc0 <rom_fine_scroll>:

	/***FINE SCROLL ROM LOOP***/
	rom_fine_scroll:
		movw ZL,XL
    6dc0:	fd 01       	movw	r30, r26
		ldi r22,lo8(pm(rom_fine_scroll_loop))	
    6dc2:	68 ee       	ldi	r22, 0xE8	; 232
		ldi r23,hi8(pm(rom_fine_scroll_loop))
    6dc4:	76 e3       	ldi	r23, 0x36	; 54
		add r22,r0
    6dc6:	60 0d       	add	r22, r0
		adc r23,r1
    6dc8:	71 1d       	adc	r23, r1
		push r22
    6dca:	6f 93       	push	r22
		push r23	
    6dcc:	7f 93       	push	r23
		ret
    6dce:	08 95       	ret

00006dd0 <rom_fine_scroll_loop>:
	rom_fine_scroll_loop:
		.rept 8
			lpm r16,Z+
			rjmp .
			out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		.endr 
    6dd0:	05 91       	lpm	r16, Z+
    6dd2:	00 c0       	rjmp	.+0      	; 0x6dd4 <rom_fine_scroll_loop+0x4>
    6dd4:	08 b9       	out	0x08, r16	; 8
    6dd6:	05 91       	lpm	r16, Z+
    6dd8:	00 c0       	rjmp	.+0      	; 0x6dda <rom_fine_scroll_loop+0xa>
    6dda:	08 b9       	out	0x08, r16	; 8
    6ddc:	05 91       	lpm	r16, Z+
    6dde:	00 c0       	rjmp	.+0      	; 0x6de0 <rom_fine_scroll_loop+0x10>
    6de0:	08 b9       	out	0x08, r16	; 8
    6de2:	05 91       	lpm	r16, Z+
    6de4:	00 c0       	rjmp	.+0      	; 0x6de6 <rom_fine_scroll_loop+0x16>
    6de6:	08 b9       	out	0x08, r16	; 8
    6de8:	05 91       	lpm	r16, Z+
    6dea:	00 c0       	rjmp	.+0      	; 0x6dec <rom_fine_scroll_loop+0x1c>
    6dec:	08 b9       	out	0x08, r16	; 8
    6dee:	05 91       	lpm	r16, Z+
    6df0:	00 c0       	rjmp	.+0      	; 0x6df2 <rom_fine_scroll_loop+0x22>
    6df2:	08 b9       	out	0x08, r16	; 8
    6df4:	05 91       	lpm	r16, Z+
    6df6:	00 c0       	rjmp	.+0      	; 0x6df8 <rom_fine_scroll_loop+0x28>
    6df8:	08 b9       	out	0x08, r16	; 8
    6dfa:	05 91       	lpm	r16, Z+
    6dfc:	00 c0       	rjmp	.+0      	; 0x6dfe <rom_fine_scroll_loop+0x2e>
    6dfe:	08 b9       	out	0x08, r16	; 8
	
		movw ZL,r6		;restore Z for tile #2
    6e00:	f3 01       	movw	r30, r6

		;branch to tile #2
		brts ramloop
    6e02:	f6 f0       	brts	.+60     	; 0x6e40 <ramloop>

00006e04 <romloop>:

	
	romloop:
	    lpm r16,Z+
    6e04:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    6e06:	08 b9       	out	0x08, r16	; 8
	    ld r18,Y     ;load next tile # from VRAM
    6e08:	28 81       	ld	r18, Y

	    lpm r16,Z+
    6e0a:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 2
    6e0c:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    6e0e:	23 9f       	mul	r18, r19

	    lpm r16,Z+
    6e10:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 3
    6e12:	08 b9       	out	0x08, r16	; 8
		subi YL,-8
    6e14:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT		;is tile in RAM or ROM? (RAM tiles have indexes<RAM_TILES_COUNT)
    6e16:	2c 31       	cpi	r18, 0x1C	; 28
		
	    lpm r16,Z+
    6e18:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    6e1a:	08 b9       	out	0x08, r16	; 8
		brsh .+2		;skip if next tile is in ROM	
    6e1c:	08 f4       	brcc	.+2      	; 0x6e20 <romloop+0x1c>
		movw r20,r4 	;load RAM title table address +row offset	
    6e1e:	a2 01       	movw	r20, r4
   
	    lpm r16,Z+
    6e20:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 5
    6e22:	08 b9       	out	0x08, r16	; 8
		add r0,r20		;add tile table address +row offset lsb
    6e24:	04 0e       	add	r0, r20
	    adc r1,r21		;add title table address +row offset msb
    6e26:	15 1e       	adc	r1, r21

	    lpm r16,Z+
    6e28:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 6
    6e2a:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT	
    6e2c:	2c 31       	cpi	r18, 0x1C	; 28
		dec r17			;decrement tiles to draw on line (does not affect carry)
    6e2e:	1a 95       	dec	r17
   
	    lpm r16,Z+
    6e30:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 7   
    6e32:	08 b9       	out	0x08, r16	; 8
	    lpm r16,Z+
    6e34:	05 91       	lpm	r16, Z+

		breq end	
    6e36:	39 f1       	breq	.+78     	; 0x6e86 <end>
	    movw ZL,r0   	;copy next tile adress
    6e38:	f0 01       	movw	r30, r0

	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    6e3a:	08 b9       	out	0x08, r16	; 8
	    brcc romloop
    6e3c:	18 f7       	brcc	.-58     	; 0x6e04 <romloop>
	
		rjmp .
    6e3e:	00 c0       	rjmp	.+0      	; 0x6e40 <ramloop>

00006e40 <ramloop>:

	ramloop:

	    ld r16,Z+
    6e40:	01 91       	ld	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    6e42:	08 b9       	out	0x08, r16	; 8
	    ld r18,Y     ;load next tile # from VRAM
    6e44:	28 81       	ld	r18, Y

	    ld r16,Z+ 
    6e46:	01 91       	ld	r16, Z+
		subi YL,-8   		
    6e48:	c8 5f       	subi	r28, 0xF8	; 248
		out _SFR_IO_ADDR(DATA_PORT),r16 		;pixel 2
    6e4a:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    6e4c:	23 9f       	mul	r18, r19

	    ld r16,Z+
    6e4e:	01 91       	ld	r16, Z+
		nop
    6e50:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16         ;pixel 3
    6e52:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    6e54:	2c 31       	cpi	r18, 0x1C	; 28
		rjmp .
    6e56:	00 c0       	rjmp	.+0      	; 0x6e58 <ramloop+0x18>
   
	    ld r16,Z+
    6e58:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    6e5a:	08 b9       	out	0x08, r16	; 8
		brcs .+2 
    6e5c:	08 f0       	brcs	.+2      	; 0x6e60 <ramloop+0x20>
		movw r20,r2 	;ROM title table address +row offset	
    6e5e:	a1 01       	movw	r20, r2
   
   
	    ld r16,Z+
    6e60:	01 91       	ld	r16, Z+
	    add r0,r20    ;add title table address +row offset
    6e62:	04 0e       	add	r0, r20
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 5
    6e64:	08 b9       	out	0x08, r16	; 8
	    adc r1,r21
    6e66:	15 1e       	adc	r1, r21
		rjmp .
    6e68:	00 c0       	rjmp	.+0      	; 0x6e6a <ramloop+0x2a>
    
		ld r16,Z+		
    6e6a:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 6
    6e6c:	08 b9       	out	0x08, r16	; 8
		ld r7,Z+
    6e6e:	71 90       	ld	r7, Z+
	    ld r16,Z+	
    6e70:	01 91       	ld	r16, Z+
	
		movw ZL,r0
    6e72:	f0 01       	movw	r30, r0
		out _SFR_IO_ADDR(DATA_PORT),r7      ;pixel 7   
    6e74:	78 b8       	out	0x08, r7	; 8
		nop
    6e76:	00 00       	nop
		cpi r18,RAM_TILES_COUNT	
    6e78:	2c 31       	cpi	r18, 0x1C	; 28
	    dec r17
    6e7a:	1a 95       	dec	r17
	    breq end
    6e7c:	21 f0       	breq	.+8      	; 0x6e86 <end>
	
		nop
    6e7e:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    6e80:	08 b9       	out	0x08, r16	; 8
	
	    brcc romloop
    6e82:	00 f6       	brcc	.-128    	; 0x6e04 <romloop>
		rjmp ramloop
    6e84:	dd cf       	rjmp	.-70     	; 0x6e40 <ramloop>

00006e86 <end>:
	
	end:
		out _SFR_IO_ADDR(DATA_PORT),r16  	;pixel 8
    6e86:	08 b9       	out	0x08, r16	; 8
		brid end_fine_scroll				;hack: interrupt flag=0 => no fine offset pixel to draw
    6e88:	27 f5       	brid	.+72     	; 0x6ed2 <end_fine_scroll>
		brcc end_rom_fine_scroll_loop
    6e8a:	30 f4       	brcc	.+12     	; 0x6e98 <end_rom_fine_scroll_loop>

	/***END RAM LOOP***/
		movw ZL,r0
    6e8c:	f0 01       	movw	r30, r0

00006e8e <end_ram_fine_scroll_loop>:
	end_ram_fine_scroll_loop:
		ld r16,Z+
    6e8e:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
    6e90:	08 b9       	out	0x08, r16	; 8
		dec r14
    6e92:	ea 94       	dec	r14
		brne end_ram_fine_scroll_loop
    6e94:	e1 f7       	brne	.-8      	; 0x6e8e <end_ram_fine_scroll_loop>
		rjmp end_fine_scroll_ram
    6e96:	1f c0       	rjmp	.+62     	; 0x6ed6 <end_fine_scroll_ram>

00006e98 <end_rom_fine_scroll_loop>:

	/***END ROM LOOP***/
	end_rom_fine_scroll_loop:
		movw ZL,r12
    6e98:	f6 01       	movw	r30, r12
		nop
    6e9a:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r9        ;output saved 1st pixel
    6e9c:	98 b8       	out	0x08, r9	; 8
		dec r14
    6e9e:	ea 94       	dec	r14
		breq end_fine_scroll_rom
    6ea0:	c9 f0       	breq	.+50     	; 0x6ed4 <end_fine_scroll_rom>
	.rept 6
		lpm r16,Z+		
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		dec r14
		breq end_fine_scroll_rom
	.endr
    6ea2:	05 91       	lpm	r16, Z+
    6ea4:	08 b9       	out	0x08, r16	; 8
    6ea6:	ea 94       	dec	r14
    6ea8:	a9 f0       	breq	.+42     	; 0x6ed4 <end_fine_scroll_rom>
    6eaa:	05 91       	lpm	r16, Z+
    6eac:	08 b9       	out	0x08, r16	; 8
    6eae:	ea 94       	dec	r14
    6eb0:	89 f0       	breq	.+34     	; 0x6ed4 <end_fine_scroll_rom>
    6eb2:	05 91       	lpm	r16, Z+
    6eb4:	08 b9       	out	0x08, r16	; 8
    6eb6:	ea 94       	dec	r14
    6eb8:	69 f0       	breq	.+26     	; 0x6ed4 <end_fine_scroll_rom>
    6eba:	05 91       	lpm	r16, Z+
    6ebc:	08 b9       	out	0x08, r16	; 8
    6ebe:	ea 94       	dec	r14
    6ec0:	49 f0       	breq	.+18     	; 0x6ed4 <end_fine_scroll_rom>
    6ec2:	05 91       	lpm	r16, Z+
    6ec4:	08 b9       	out	0x08, r16	; 8
    6ec6:	ea 94       	dec	r14
    6ec8:	29 f0       	breq	.+10     	; 0x6ed4 <end_fine_scroll_rom>
    6eca:	05 91       	lpm	r16, Z+
    6ecc:	08 b9       	out	0x08, r16	; 8
    6ece:	ea 94       	dec	r14
    6ed0:	09 f0       	breq	.+2      	; 0x6ed4 <end_fine_scroll_rom>

00006ed2 <end_fine_scroll>:
	...

00006ed4 <end_fine_scroll_rom>:
	...

00006ed6 <end_fine_scroll_ram>:
	end_fine_scroll:	
		nop
	end_fine_scroll_rom:
		nop
	end_fine_scroll_ram:
		clr r16	
    6ed6:	00 27       	eor	r16, r16
		out _SFR_IO_ADDR(DATA_PORT),r16   
    6ed8:	08 b9       	out	0x08, r16	; 8

		pop r6
    6eda:	6f 90       	pop	r6
		pop r7
    6edc:	7f 90       	pop	r7
		pop r9
    6ede:	9f 90       	pop	r9
		pop r12
    6ee0:	cf 90       	pop	r12
		pop r13
    6ee2:	df 90       	pop	r13
		pop r19
    6ee4:	3f 91       	pop	r19
		pop r22
    6ee6:	6f 91       	pop	r22
		pop r23
    6ee8:	7f 91       	pop	r23
		pop YH
    6eea:	df 91       	pop	r29
		pop YL
    6eec:	cf 91       	pop	r28

		ret
    6eee:	08 95       	ret

00006ef0 <CopyFlashTile>:
; C-callable
; r24=Source ROM tile index
; r22=Dest RAM tile index
;************************************
CopyFlashTile:
	ldi r18,TILE_HEIGHT*TILE_WIDTH
    6ef0:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	lds ZL,tile_table_lo
    6ef2:	e0 91 ac 0c 	lds	r30, 0x0CAC
	lds ZH,tile_table_hi
    6ef6:	f0 91 ad 0c 	lds	r31, 0x0CAD
	mul r24,r18
    6efa:	82 9f       	mul	r24, r18
	add ZL,r0
    6efc:	e0 0d       	add	r30, r0
	adc ZH,r1
    6efe:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    6f00:	a0 e5       	ldi	r26, 0x50	; 80
	ldi XH,hi8(ram_tiles)
    6f02:	b5 e0       	ldi	r27, 0x05	; 5
	mul r22,r18
    6f04:	62 9f       	mul	r22, r18
	add XL,r0
    6f06:	a0 0d       	add	r26, r0
	adc XH,r1
    6f08:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	lpm r1,Z+
	st X+,r1
.endr
    6f0a:	15 90       	lpm	r1, Z+
    6f0c:	1d 92       	st	X+, r1
    6f0e:	15 90       	lpm	r1, Z+
    6f10:	1d 92       	st	X+, r1
    6f12:	15 90       	lpm	r1, Z+
    6f14:	1d 92       	st	X+, r1
    6f16:	15 90       	lpm	r1, Z+
    6f18:	1d 92       	st	X+, r1
    6f1a:	15 90       	lpm	r1, Z+
    6f1c:	1d 92       	st	X+, r1
    6f1e:	15 90       	lpm	r1, Z+
    6f20:	1d 92       	st	X+, r1
    6f22:	15 90       	lpm	r1, Z+
    6f24:	1d 92       	st	X+, r1
    6f26:	15 90       	lpm	r1, Z+
    6f28:	1d 92       	st	X+, r1
    6f2a:	15 90       	lpm	r1, Z+
    6f2c:	1d 92       	st	X+, r1
    6f2e:	15 90       	lpm	r1, Z+
    6f30:	1d 92       	st	X+, r1
    6f32:	15 90       	lpm	r1, Z+
    6f34:	1d 92       	st	X+, r1
    6f36:	15 90       	lpm	r1, Z+
    6f38:	1d 92       	st	X+, r1
    6f3a:	15 90       	lpm	r1, Z+
    6f3c:	1d 92       	st	X+, r1
    6f3e:	15 90       	lpm	r1, Z+
    6f40:	1d 92       	st	X+, r1
    6f42:	15 90       	lpm	r1, Z+
    6f44:	1d 92       	st	X+, r1
    6f46:	15 90       	lpm	r1, Z+
    6f48:	1d 92       	st	X+, r1
    6f4a:	15 90       	lpm	r1, Z+
    6f4c:	1d 92       	st	X+, r1
    6f4e:	15 90       	lpm	r1, Z+
    6f50:	1d 92       	st	X+, r1
    6f52:	15 90       	lpm	r1, Z+
    6f54:	1d 92       	st	X+, r1
    6f56:	15 90       	lpm	r1, Z+
    6f58:	1d 92       	st	X+, r1
    6f5a:	15 90       	lpm	r1, Z+
    6f5c:	1d 92       	st	X+, r1
    6f5e:	15 90       	lpm	r1, Z+
    6f60:	1d 92       	st	X+, r1
    6f62:	15 90       	lpm	r1, Z+
    6f64:	1d 92       	st	X+, r1
    6f66:	15 90       	lpm	r1, Z+
    6f68:	1d 92       	st	X+, r1
    6f6a:	15 90       	lpm	r1, Z+
    6f6c:	1d 92       	st	X+, r1
    6f6e:	15 90       	lpm	r1, Z+
    6f70:	1d 92       	st	X+, r1
    6f72:	15 90       	lpm	r1, Z+
    6f74:	1d 92       	st	X+, r1
    6f76:	15 90       	lpm	r1, Z+
    6f78:	1d 92       	st	X+, r1
    6f7a:	15 90       	lpm	r1, Z+
    6f7c:	1d 92       	st	X+, r1
    6f7e:	15 90       	lpm	r1, Z+
    6f80:	1d 92       	st	X+, r1
    6f82:	15 90       	lpm	r1, Z+
    6f84:	1d 92       	st	X+, r1
    6f86:	15 90       	lpm	r1, Z+
    6f88:	1d 92       	st	X+, r1
    6f8a:	15 90       	lpm	r1, Z+
    6f8c:	1d 92       	st	X+, r1
    6f8e:	15 90       	lpm	r1, Z+
    6f90:	1d 92       	st	X+, r1
    6f92:	15 90       	lpm	r1, Z+
    6f94:	1d 92       	st	X+, r1
    6f96:	15 90       	lpm	r1, Z+
    6f98:	1d 92       	st	X+, r1
    6f9a:	15 90       	lpm	r1, Z+
    6f9c:	1d 92       	st	X+, r1
    6f9e:	15 90       	lpm	r1, Z+
    6fa0:	1d 92       	st	X+, r1
    6fa2:	15 90       	lpm	r1, Z+
    6fa4:	1d 92       	st	X+, r1
    6fa6:	15 90       	lpm	r1, Z+
    6fa8:	1d 92       	st	X+, r1
    6faa:	15 90       	lpm	r1, Z+
    6fac:	1d 92       	st	X+, r1
    6fae:	15 90       	lpm	r1, Z+
    6fb0:	1d 92       	st	X+, r1
    6fb2:	15 90       	lpm	r1, Z+
    6fb4:	1d 92       	st	X+, r1
    6fb6:	15 90       	lpm	r1, Z+
    6fb8:	1d 92       	st	X+, r1
    6fba:	15 90       	lpm	r1, Z+
    6fbc:	1d 92       	st	X+, r1
    6fbe:	15 90       	lpm	r1, Z+
    6fc0:	1d 92       	st	X+, r1
    6fc2:	15 90       	lpm	r1, Z+
    6fc4:	1d 92       	st	X+, r1
    6fc6:	15 90       	lpm	r1, Z+
    6fc8:	1d 92       	st	X+, r1
    6fca:	15 90       	lpm	r1, Z+
    6fcc:	1d 92       	st	X+, r1
    6fce:	15 90       	lpm	r1, Z+
    6fd0:	1d 92       	st	X+, r1
    6fd2:	15 90       	lpm	r1, Z+
    6fd4:	1d 92       	st	X+, r1
    6fd6:	15 90       	lpm	r1, Z+
    6fd8:	1d 92       	st	X+, r1
    6fda:	15 90       	lpm	r1, Z+
    6fdc:	1d 92       	st	X+, r1
    6fde:	15 90       	lpm	r1, Z+
    6fe0:	1d 92       	st	X+, r1
    6fe2:	15 90       	lpm	r1, Z+
    6fe4:	1d 92       	st	X+, r1
    6fe6:	15 90       	lpm	r1, Z+
    6fe8:	1d 92       	st	X+, r1
    6fea:	15 90       	lpm	r1, Z+
    6fec:	1d 92       	st	X+, r1
    6fee:	15 90       	lpm	r1, Z+
    6ff0:	1d 92       	st	X+, r1
    6ff2:	15 90       	lpm	r1, Z+
    6ff4:	1d 92       	st	X+, r1
    6ff6:	15 90       	lpm	r1, Z+
    6ff8:	1d 92       	st	X+, r1
    6ffa:	15 90       	lpm	r1, Z+
    6ffc:	1d 92       	st	X+, r1
    6ffe:	15 90       	lpm	r1, Z+
    7000:	1d 92       	st	X+, r1
    7002:	15 90       	lpm	r1, Z+
    7004:	1d 92       	st	X+, r1
    7006:	15 90       	lpm	r1, Z+
    7008:	1d 92       	st	X+, r1
	clr r1
    700a:	11 24       	eor	r1, r1
	ret
    700c:	08 95       	ret

0000700e <CopyRamTile>:
; r24=Source RAM tile index
; r22=Dest RAM tile index
;************************************
CopyRamTile:

	ldi r18,TILE_HEIGHT*TILE_WIDTH
    700e:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	ldi ZL,lo8(ram_tiles)
    7010:	e0 e5       	ldi	r30, 0x50	; 80
	ldi ZH,hi8(ram_tiles)
    7012:	f5 e0       	ldi	r31, 0x05	; 5
	mul r24,r18
    7014:	82 9f       	mul	r24, r18
	add ZL,r0
    7016:	e0 0d       	add	r30, r0
	adc ZH,r1
    7018:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    701a:	a0 e5       	ldi	r26, 0x50	; 80
	ldi XH,hi8(ram_tiles)
    701c:	b5 e0       	ldi	r27, 0x05	; 5
	mul r22,r18
    701e:	62 9f       	mul	r22, r18
	add XL,r0
    7020:	a0 0d       	add	r26, r0
	adc XH,r1
    7022:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	ld r1,Z+
	st X+,r1
.endr
    7024:	11 90       	ld	r1, Z+
    7026:	1d 92       	st	X+, r1
    7028:	11 90       	ld	r1, Z+
    702a:	1d 92       	st	X+, r1
    702c:	11 90       	ld	r1, Z+
    702e:	1d 92       	st	X+, r1
    7030:	11 90       	ld	r1, Z+
    7032:	1d 92       	st	X+, r1
    7034:	11 90       	ld	r1, Z+
    7036:	1d 92       	st	X+, r1
    7038:	11 90       	ld	r1, Z+
    703a:	1d 92       	st	X+, r1
    703c:	11 90       	ld	r1, Z+
    703e:	1d 92       	st	X+, r1
    7040:	11 90       	ld	r1, Z+
    7042:	1d 92       	st	X+, r1
    7044:	11 90       	ld	r1, Z+
    7046:	1d 92       	st	X+, r1
    7048:	11 90       	ld	r1, Z+
    704a:	1d 92       	st	X+, r1
    704c:	11 90       	ld	r1, Z+
    704e:	1d 92       	st	X+, r1
    7050:	11 90       	ld	r1, Z+
    7052:	1d 92       	st	X+, r1
    7054:	11 90       	ld	r1, Z+
    7056:	1d 92       	st	X+, r1
    7058:	11 90       	ld	r1, Z+
    705a:	1d 92       	st	X+, r1
    705c:	11 90       	ld	r1, Z+
    705e:	1d 92       	st	X+, r1
    7060:	11 90       	ld	r1, Z+
    7062:	1d 92       	st	X+, r1
    7064:	11 90       	ld	r1, Z+
    7066:	1d 92       	st	X+, r1
    7068:	11 90       	ld	r1, Z+
    706a:	1d 92       	st	X+, r1
    706c:	11 90       	ld	r1, Z+
    706e:	1d 92       	st	X+, r1
    7070:	11 90       	ld	r1, Z+
    7072:	1d 92       	st	X+, r1
    7074:	11 90       	ld	r1, Z+
    7076:	1d 92       	st	X+, r1
    7078:	11 90       	ld	r1, Z+
    707a:	1d 92       	st	X+, r1
    707c:	11 90       	ld	r1, Z+
    707e:	1d 92       	st	X+, r1
    7080:	11 90       	ld	r1, Z+
    7082:	1d 92       	st	X+, r1
    7084:	11 90       	ld	r1, Z+
    7086:	1d 92       	st	X+, r1
    7088:	11 90       	ld	r1, Z+
    708a:	1d 92       	st	X+, r1
    708c:	11 90       	ld	r1, Z+
    708e:	1d 92       	st	X+, r1
    7090:	11 90       	ld	r1, Z+
    7092:	1d 92       	st	X+, r1
    7094:	11 90       	ld	r1, Z+
    7096:	1d 92       	st	X+, r1
    7098:	11 90       	ld	r1, Z+
    709a:	1d 92       	st	X+, r1
    709c:	11 90       	ld	r1, Z+
    709e:	1d 92       	st	X+, r1
    70a0:	11 90       	ld	r1, Z+
    70a2:	1d 92       	st	X+, r1
    70a4:	11 90       	ld	r1, Z+
    70a6:	1d 92       	st	X+, r1
    70a8:	11 90       	ld	r1, Z+
    70aa:	1d 92       	st	X+, r1
    70ac:	11 90       	ld	r1, Z+
    70ae:	1d 92       	st	X+, r1
    70b0:	11 90       	ld	r1, Z+
    70b2:	1d 92       	st	X+, r1
    70b4:	11 90       	ld	r1, Z+
    70b6:	1d 92       	st	X+, r1
    70b8:	11 90       	ld	r1, Z+
    70ba:	1d 92       	st	X+, r1
    70bc:	11 90       	ld	r1, Z+
    70be:	1d 92       	st	X+, r1
    70c0:	11 90       	ld	r1, Z+
    70c2:	1d 92       	st	X+, r1
    70c4:	11 90       	ld	r1, Z+
    70c6:	1d 92       	st	X+, r1
    70c8:	11 90       	ld	r1, Z+
    70ca:	1d 92       	st	X+, r1
    70cc:	11 90       	ld	r1, Z+
    70ce:	1d 92       	st	X+, r1
    70d0:	11 90       	ld	r1, Z+
    70d2:	1d 92       	st	X+, r1
    70d4:	11 90       	ld	r1, Z+
    70d6:	1d 92       	st	X+, r1
    70d8:	11 90       	ld	r1, Z+
    70da:	1d 92       	st	X+, r1
    70dc:	11 90       	ld	r1, Z+
    70de:	1d 92       	st	X+, r1
    70e0:	11 90       	ld	r1, Z+
    70e2:	1d 92       	st	X+, r1
    70e4:	11 90       	ld	r1, Z+
    70e6:	1d 92       	st	X+, r1
    70e8:	11 90       	ld	r1, Z+
    70ea:	1d 92       	st	X+, r1
    70ec:	11 90       	ld	r1, Z+
    70ee:	1d 92       	st	X+, r1
    70f0:	11 90       	ld	r1, Z+
    70f2:	1d 92       	st	X+, r1
    70f4:	11 90       	ld	r1, Z+
    70f6:	1d 92       	st	X+, r1
    70f8:	11 90       	ld	r1, Z+
    70fa:	1d 92       	st	X+, r1
    70fc:	11 90       	ld	r1, Z+
    70fe:	1d 92       	st	X+, r1
    7100:	11 90       	ld	r1, Z+
    7102:	1d 92       	st	X+, r1
    7104:	11 90       	ld	r1, Z+
    7106:	1d 92       	st	X+, r1
    7108:	11 90       	ld	r1, Z+
    710a:	1d 92       	st	X+, r1
    710c:	11 90       	ld	r1, Z+
    710e:	1d 92       	st	X+, r1
    7110:	11 90       	ld	r1, Z+
    7112:	1d 92       	st	X+, r1
    7114:	11 90       	ld	r1, Z+
    7116:	1d 92       	st	X+, r1
    7118:	11 90       	ld	r1, Z+
    711a:	1d 92       	st	X+, r1
    711c:	11 90       	ld	r1, Z+
    711e:	1d 92       	st	X+, r1
    7120:	11 90       	ld	r1, Z+
    7122:	1d 92       	st	X+, r1
	clr r1
    7124:	11 24       	eor	r1, r1
	ret
    7126:	08 95       	ret

00007128 <BlitSprite>:
; r22=RAM tile index (bt)
; r21:r20=Y:X
; r19:r18=DY:DX
;************************************
BlitSprite:
	push r16
    7128:	0f 93       	push	r16
	push r17
    712a:	1f 93       	push	r17
	push YL
    712c:	cf 93       	push	r28
	push YH
    712e:	df 93       	push	r29

	;src=sprites_tiletable_lo+(sprites[i].tileIndex*TILE_HEIGHT*TILE_WIDTH)
	ldi r25,SPRITE_STRUCT_SIZE
    7130:	94 e0       	ldi	r25, 0x04	; 4
	mul r24,r25
    7132:	89 9f       	mul	r24, r25

	ldi ZL,lo8(sprites)	
    7134:	e0 e1       	ldi	r30, 0x10	; 16
	ldi ZH,hi8(sprites)	
    7136:	f5 e0       	ldi	r31, 0x05	; 5
	add ZL,r0
    7138:	e0 0d       	add	r30, r0
	adc ZH,r1
    713a:	f1 1d       	adc	r31, r1

	ldd r16,Z+sprFlags
    713c:	03 81       	ldd	r16, Z+3	; 0x03

	;8x16 multiply
	ldd r24,Z+sprTileIndex
    713e:	82 81       	ldd	r24, Z+2	; 0x02
	ldi r30,TILE_WIDTH*TILE_HEIGHT
    7140:	e0 e4       	ldi	r30, 0x40	; 64
	mul r24,r30
    7142:	8e 9f       	mul	r24, r30
	movw r26,r0
    7144:	d0 01       	movw	r26, r0
	
	;get tile bank addr
	ldi r25,4*2
    7146:	98 e0       	ldi	r25, 0x08	; 8
	mul r16,r25
    7148:	09 9f       	mul	r16, r25
	ldi YL,lo8(sprites_tile_banks)	
    714a:	c4 ea       	ldi	r28, 0xA4	; 164
	ldi YH,hi8(sprites_tile_banks)	
    714c:	dc e0       	ldi	r29, 0x0C	; 12
	clr r0
    714e:	00 24       	eor	r0, r0
	add YL,r1
    7150:	c1 0d       	add	r28, r1
	adc YH,r0		
    7152:	d0 1d       	adc	r29, r0
	ldd ZL,Y+0
    7154:	e8 81       	ld	r30, Y
	ldd ZH,Y+1
    7156:	f9 81       	ldd	r31, Y+1	; 0x01
	add ZL,r26	;tile data src
    7158:	ea 0f       	add	r30, r26
	adc ZH,r27
    715a:	fb 1f       	adc	r31, r27
	
	;dest=ram_tiles+(bt*TILE_HEIGHT*TILE_WIDTH)
	ldi XL,lo8(ram_tiles)	
    715c:	a0 e5       	ldi	r26, 0x50	; 80
	ldi XH,hi8(ram_tiles)
    715e:	b5 e0       	ldi	r27, 0x05	; 5
	ldi r25,TILE_WIDTH*TILE_HEIGHT
    7160:	90 e4       	ldi	r25, 0x40	; 64
	mul r22,r25
    7162:	69 9f       	mul	r22, r25
	add XL,r0
    7164:	a0 0d       	add	r26, r0
	adc XH,r1
    7166:	b1 1d       	adc	r27, r1
			srcXdiff=destXdiff;
			src+=destXdiff;
		}
	}
	*/
	clr r1
    7168:	11 24       	eor	r1, r1
	clr YH		;hi8(srcXdiff)
    716a:	dd 27       	eor	r29, r29

	cpi r20,0	
    716c:	40 30       	cpi	r20, 0x00	; 0
	brne x_2nd_tile
    716e:	51 f4       	brne	.+20     	; 0x7184 <x_2nd_tile>
	
	add XL,r18	;dest+=dx
    7170:	a2 0f       	add	r26, r18
	adc XH,r1
    7172:	b1 1d       	adc	r27, r1
	mov r24,r18	;destXdiff=dx
    7174:	82 2f       	mov	r24, r18
	mov YL,r18	;srcXdiff=dx
    7176:	c2 2f       	mov	r28, r18

	sbrs r16,SPRITE_FLIP_X_BIT
    7178:	00 ff       	sbrs	r16, 0
	rjmp x_check_end
    717a:	11 c0       	rjmp	.+34     	; 0x719e <x_check_end>

	adiw ZL,(TILE_WIDTH-1)	;src+=7
    717c:	37 96       	adiw	r30, 0x07	; 7
	ldi YL,TILE_WIDTH*2		;srcXdiff=((TILE_WIDTH*2)-dx);
    717e:	c0 e1       	ldi	r28, 0x10	; 16
	sub YL,r18	
    7180:	c2 1b       	sub	r28, r18
	rjmp x_check_end
    7182:	0d c0       	rjmp	.+26     	; 0x719e <x_check_end>

00007184 <x_2nd_tile>:

x_2nd_tile:
	ldi r24,TILE_WIDTH
    7184:	88 e0       	ldi	r24, 0x08	; 8
	sub r24,r18		;8-DX = xdiff for dest
    7186:	82 1b       	sub	r24, r18

	sbrc r16,SPRITE_FLIP_X_BIT
    7188:	00 fd       	sbrc	r16, 0
	rjmp x2_flip_x
    718a:	04 c0       	rjmp	.+8      	; 0x7194 <x2_flip_x>

	mov YL,r24		;srcXdiff=destXdiff;
    718c:	c8 2f       	mov	r28, r24
	add ZL,r24		;src+=destXdiff;
    718e:	e8 0f       	add	r30, r24
	adc ZH,r1	
    7190:	f1 1d       	adc	r31, r1
	rjmp x_check_end
    7192:	05 c0       	rjmp	.+10     	; 0x719e <x_check_end>

00007194 <x2_flip_x>:

x2_flip_x:
	ldi YL,TILE_WIDTH
    7194:	c8 e0       	ldi	r28, 0x08	; 8
	add YL,r18		;srcXdiff=TILE_WIDTH+dx;	
    7196:	c2 0f       	add	r28, r18
	add ZL,r18		;src+=dx;
    7198:	e2 0f       	add	r30, r18
	adc ZH,r1
    719a:	f1 1d       	adc	r31, r1
	sbiw ZL,1		;src--;
    719c:	31 97       	sbiw	r30, 0x01	; 1

0000719e <x_check_end>:
		}else{
			src+=(ydiff*TILE_WIDTH);
		}
	}
	*/
	cpi r21,0
    719e:	50 30       	cpi	r21, 0x00	; 0
	brne y_2nd_tile
    71a0:	51 f4       	brne	.+20     	; 0x71b6 <y_2nd_tile>

	ldi r25,TILE_WIDTH	;dest+=(dy*TILE_WIDTH)
    71a2:	98 e0       	ldi	r25, 0x08	; 8
	mul r25,r19			
    71a4:	93 9f       	mul	r25, r19
	add XL,r0
    71a6:	a0 0d       	add	r26, r0
	adc XH,r1
    71a8:	b1 1d       	adc	r27, r1

	mov r25,r19			;ydiff=dy
    71aa:	93 2f       	mov	r25, r19

	//sbrc r16,SPRITE_FLIP_Y_BIT
	//adiw ZL,(TILE_WIDTH*(TILE_HEIGHT-1))

	sbrc r16,SPRITE_FLIP_Y_BIT
    71ac:	01 fd       	sbrc	r16, 1
	subi ZL,lo8(-(TILE_WIDTH*(TILE_HEIGHT-1)));src+=(TILE_WIDTH*(TILE_HEIGHT-1));
    71ae:	e8 5c       	subi	r30, 0xC8	; 200
	sbrc r16,SPRITE_FLIP_Y_BIT
    71b0:	01 fd       	sbrc	r16, 1
	sbci ZH,hi8(-(TILE_WIDTH*(TILE_HEIGHT-1)))
    71b2:	ff 4f       	sbci	r31, 0xFF	; 255


	rjmp y_check_end
    71b4:	0a c0       	rjmp	.+20     	; 0x71ca <y_check_end>

000071b6 <y_2nd_tile>:

y_2nd_tile:
	ldi r25,TILE_HEIGHT	;ydiff=(TILE_HEIGHT-dy)
    71b6:	98 e0       	ldi	r25, 0x08	; 8
	sub r25,r19	
    71b8:	93 1b       	sub	r25, r19
	
	mov r22,r19			;temp=dy-1
    71ba:	63 2f       	mov	r22, r19
	dec r22
    71bc:	6a 95       	dec	r22
	sbrs r16,SPRITE_FLIP_Y_BIT
    71be:	01 ff       	sbrs	r16, 1
	mov r22,r25			;temp=ydiff
    71c0:	69 2f       	mov	r22, r25

	ldi r21,TILE_WIDTH	;src+=(temp*TILE_WIDTH);
    71c2:	58 e0       	ldi	r21, 0x08	; 8
	mul r21,r22
    71c4:	56 9f       	mul	r21, r22
	add ZL,r0
    71c6:	e0 0d       	add	r30, r0
	adc ZH,r1	
    71c8:	f1 1d       	adc	r31, r1

000071ca <y_check_end>:
y_check_end:	
	
	//if(flags&SPRITE_FLIP_X){
	//	step=-1;
	//}
	ser r22		;step=-1
    71ca:	6f ef       	ldi	r22, 0xFF	; 255
	ser r23
    71cc:	7f ef       	ldi	r23, 0xFF	; 255
	sbrs r16,SPRITE_FLIP_X_BIT
    71ce:	00 ff       	sbrs	r16, 0
	ldi r22,1	;step=1
    71d0:	61 e0       	ldi	r22, 0x01	; 1
	sbrs r16,SPRITE_FLIP_X_BIT
    71d2:	00 ff       	sbrs	r16, 0
	clr r23
    71d4:	77 27       	eor	r23, r23

	//if(flags&SPRITE_FLIP_Y){
	//	srcXdiff-=(TILE_WIDTH*2);
	//}
	sbrc r16,SPRITE_FLIP_Y_BIT
    71d6:	01 fd       	sbrc	r16, 1
	sbiw YL,(TILE_WIDTH*2)
    71d8:	60 97       	sbiw	r28, 0x10	; 16
	;r24	= destXdiff
	;r25	= ydiff
	;X		= dest
	;Y		= srcXdiff
	;Z		= src
	clr r1
    71da:	11 24       	eor	r1, r1
	ldi r19,TRANSLUCENT_COLOR
    71dc:	3e ef       	ldi	r19, 0xFE	; 254

	ldi r21,TILE_HEIGHT
    71de:	58 e0       	ldi	r21, 0x08	; 8
	sub r21,r25 	;yspan=(TILE_HEIGHT-ydiff)
    71e0:	59 1b       	sub	r21, r25

000071e2 <y_loop>:

y_loop:
	ldi r20,TILE_WIDTH
    71e2:	48 e0       	ldi	r20, 0x08	; 8
	sub r20,r24 	;xspan=(TILE_WIDTH-destXdiff)
    71e4:	48 1b       	sub	r20, r24

000071e6 <x_loop>:

x_loop:
	lpm r18,Z		;px=pgm_read_byte(src);
    71e6:	24 91       	lpm	r18, Z
	cpse r18,r19	;if(px!=TRANSLUCENT_COLOR)
    71e8:	23 13       	cpse	r18, r19
	st X,r18		;*dest=px;
    71ea:	2c 93       	st	X, r18
	adiw XL,1
    71ec:	11 96       	adiw	r26, 0x01	; 1
	add ZL,r22		;src+=step;
    71ee:	e6 0f       	add	r30, r22
	adc ZH,r23
    71f0:	f7 1f       	adc	r31, r23
	dec r20
    71f2:	4a 95       	dec	r20
	brne x_loop
    71f4:	c1 f7       	brne	.-16     	; 0x71e6 <x_loop>

	add ZL,YL		;src+=srcXdiff
    71f6:	ec 0f       	add	r30, r28
	adc ZH,YH
    71f8:	fd 1f       	adc	r31, r29
	add XL,r24		;dest+=destXdiff
    71fa:	a8 0f       	add	r26, r24
	adc XH,r1
    71fc:	b1 1d       	adc	r27, r1
	dec r21
    71fe:	5a 95       	dec	r21
	brne y_loop
    7200:	81 f7       	brne	.-32     	; 0x71e2 <y_loop>


	pop YH
    7202:	df 91       	pop	r29
	pop YL
    7204:	cf 91       	pop	r28
	pop r17
    7206:	1f 91       	pop	r17
	pop r16
    7208:	0f 91       	pop	r16
	ret
    720a:	08 95       	ret

0000720c <__vector_13>:

;***************************************************************************
; Main Video sync interrupt
;***************************************************************************
TIMER1_COMPA_vect:
	push r0
    720c:	0f 92       	push	r0
	push r1
    720e:	1f 92       	push	r1
	push ZL;2
    7210:	ef 93       	push	r30
	push ZH;2
    7212:	ff 93       	push	r31
	
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    7214:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    7216:	ef 93       	push	r30

	;Read timer offset since rollover to remove cycles 
	;and conpensate for interrupt latency.
	;This is nessesary to eliminate frame jitter.
	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    7218:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,0x12 ;MIN_INT_LATENCY
    721c:	e2 51       	subi	r30, 0x12	; 18

	ldi ZH,1
    721e:	f1 e0       	ldi	r31, 0x01	; 1

00007220 <latency_loop>:
latency_loop:
	cp ZL,ZH
    7220:	ef 17       	cp	r30, r31
	brlo .		;advance PC to next instruction	
    7222:	00 f0       	brcs	.+0      	; 0x7224 <latency_loop+0x4>
	inc ZH
    7224:	f3 95       	inc	r31
	cpi ZH,10
    7226:	fa 30       	cpi	r31, 0x0A	; 10
	brlo latency_loop
    7228:	d8 f3       	brcs	.-10     	; 0x7220 <latency_loop>
	jmp .
    722a:	0c 94 17 39 	jmp	0x722e	; 0x722e <latency_loop+0xe>
	
	;decrement sync pulse counter
	lds ZL,sync_pulse
    722e:	e0 91 b7 0c 	lds	r30, 0x0CB7
	dec ZL
    7232:	ea 95       	dec	r30
	sts sync_pulse,ZL
    7234:	e0 93 b7 0c 	sts	0x0CB7, r30

	;process sync phases
	lds ZH,sync_phase
    7238:	f0 91 b6 0c 	lds	r31, 0x0CB6
	sbrc ZH,0
    723c:	f0 fd       	sbrc	r31, 0
	rjmp sync_hsync
    723e:	57 c0       	rjmp	.+174    	; 0x72ee <sync_hsync>
; Note: TCNT1 should be equal to 
; 0x68 on the cbi
; 0xAC on the sbi
; pulse duration: 68 clocks
;***************************************************		
	cpi ZL,SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    7240:	ec 30       	cpi	r30, 0x0C	; 12
	brlo sync_eq
    7242:	98 f0       	brcs	.+38     	; 0x726a <sync_eq>

	;Set HDRIVE to double rate during VSYNC
	ldi ZH,hi8(HDRIVE_CL_TWICE)
    7244:	f3 e0       	ldi	r31, 0x03	; 3
	sts _SFR_MEM_ADDR(OCR1AH),ZH	
    7246:	f0 93 89 00 	sts	0x0089, r31
	ldi ZH,lo8(HDRIVE_CL_TWICE)
    724a:	fd e8       	ldi	r31, 0x8D	; 141
	sts _SFR_MEM_ADDR(OCR1AL),ZH
    724c:	f0 93 88 00 	sts	0x0088, r31

	bst ZL,0
    7250:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0x68
    7252:	28 98       	cbi	0x05, 0	; 5
	brtc sync_pre_eq_no_sound_update
    7254:	26 f4       	brtc	.+8      	; 0x725e <sync_pre_eq_no_sound_update>
	ldi ZL,1	;indicate update_sound to generate the SBI for pre-eq
    7256:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    7258:	0e 94 fe 39 	call	0x73fc	; 0x73fc <update_sound>
	rjmp sync_end
    725c:	b7 c0       	rjmp	.+366    	; 0x73cc <sync_end>

0000725e <sync_pre_eq_no_sound_update>:

sync_pre_eq_no_sound_update:
	WAIT ZL,64
    725e:	e5 e1       	ldi	r30, 0x15	; 21
    7260:	ea 95       	dec	r30
    7262:	f1 f7       	brne	.-4      	; 0x7260 <sync_pre_eq_no_sound_update+0x2>
    7264:	00 00       	nop
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    7266:	28 9a       	sbi	0x05, 0	; 5
		
	rjmp sync_end
    7268:	b1 c0       	rjmp	.+354    	; 0x73cc <sync_end>

0000726a <sync_eq>:
; 0x68  on the cbi
; 0x36E on the sbi
; low pulse duration: 774 clocks
;***************************************************	
sync_eq:
	cpi ZL,SYNC_POST_EQ_PULSES
    726a:	e6 30       	cpi	r30, 0x06	; 6
	brlo sync_post_eq
    726c:	38 f1       	brcs	.+78     	; 0x72bc <sync_post_eq>

	rjmp .
    726e:	00 c0       	rjmp	.+0      	; 0x7270 <sync_eq+0x6>
	rjmp .
    7270:	00 c0       	rjmp	.+0      	; 0x7272 <sync_eq+0x8>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    7272:	28 98       	cbi	0x05, 0	; 5

	bst ZL,0
    7274:	e0 fb       	bst	r30, 0
	ldi ZL,4
    7276:	e4 e0       	ldi	r30, 0x04	; 4
	brtc sync_eq_skip
    7278:	16 f4       	brtc	.+4      	; 0x727e <sync_eq_skip>
	
	call update_sound
    727a:	0e 94 fe 39 	call	0x73fc	; 0x73fc <update_sound>

0000727e <sync_eq_skip>:
	;enable interupt to bring back sync 
	;level instead of wasting cycles
	;in a big wait loop

 	;clear interrupt flag
	ldi ZL,(1<<OCF1B)
    727e:	e4 e0       	ldi	r30, 0x04	; 4
	sts _SFR_MEM_ADDR(TIFR1),ZL 
    7280:	e0 93 36 00 	sts	0x0036, r30
	
	;generate interrupt on match
	;for timer1 compare unit b
	ldi ZL,(1<<OCIE1A)+(1<<OCIE1B)
    7284:	e6 e0       	ldi	r30, 0x06	; 6
	sts _SFR_MEM_ADDR(TIMSK1),ZL
    7286:	e0 93 6f 00 	sts	0x006F, r30

	rjmp sync_end
    728a:	a0 c0       	rjmp	.+320    	; 0x73cc <sync_end>

0000728c <__vector_14>:
; during VSYNC EQ pulses to recover ~5000 cycles per field
; with interrupt latency conpensation
; 37 cycles
;**********************************************************	
TIMER1_COMPB_vect:
	push ZL
    728c:	ef 93       	push	r30
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    728e:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    7290:	ef 93       	push	r30

	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    7292:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,62+31 ;0x5D ;MIN_INT_LATENCY
    7296:	ed 55       	subi	r30, 0x5D	; 93

	cpi ZL,1
    7298:	e1 30       	cpi	r30, 0x01	; 1
	brlo .		;advance PC to next instruction
    729a:	00 f0       	brcs	.+0      	; 0x729c <__vector_14+0x10>

	cpi ZL,2
    729c:	e2 30       	cpi	r30, 0x02	; 2
	brlo .		;advance PC to next instruction
    729e:	00 f0       	brcs	.+0      	; 0x72a0 <__vector_14+0x14>

	cpi ZL,3
    72a0:	e3 30       	cpi	r30, 0x03	; 3
	brlo .		;advance PC to next instruction
    72a2:	00 f0       	brcs	.+0      	; 0x72a4 <__vector_14+0x18>

	cpi ZL,4
    72a4:	e4 30       	cpi	r30, 0x04	; 4
	brlo .		;advance PC to next instruction
    72a6:	00 f0       	brcs	.+0      	; 0x72a8 <__vector_14+0x1c>

	cpi ZL,5
    72a8:	e5 30       	cpi	r30, 0x05	; 5
	brlo .		;advance PC to next instruction
    72aa:	00 f0       	brcs	.+0      	; 0x72ac <__vector_14+0x20>

 	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;68
    72ac:	28 9a       	sbi	0x05, 0	; 5
	ldi ZL,(1<<OCIE1A) ; disable OCIE1B 
    72ae:	e2 e0       	ldi	r30, 0x02	; 2
	sts _SFR_MEM_ADDR(TIMSK1),ZL ;stop generate interrupt on match
    72b0:	e0 93 6f 00 	sts	0x006F, r30
	
	;restore flags
	pop ZL
    72b4:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL	
    72b6:	ef bf       	out	0x3f, r30	; 63
	pop ZL
    72b8:	ef 91       	pop	r30
	reti
    72ba:	18 95       	reti

000072bc <sync_post_eq>:
; 0x68 on the cbi
; 0xAC on the sbi
; pulse cycles: 68 clocks
;***************************************************	
sync_post_eq:	
	rjmp .
    72bc:	00 c0       	rjmp	.+0      	; 0x72be <sync_post_eq+0x2>

	bst ZL,0
    72be:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    72c0:	28 98       	cbi	0x05, 0	; 5
	brtc sync_post_eq_no_sound_update
    72c2:	26 f4       	brtc	.+8      	; 0x72cc <sync_post_eq_no_sound_update>
	ldi ZL,1	
    72c4:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    72c6:	0e 94 fe 39 	call	0x73fc	; 0x73fc <update_sound>
	rjmp sync_pre_eq_cont
    72ca:	05 c0       	rjmp	.+10     	; 0x72d6 <sync_pre_eq_cont>

000072cc <sync_post_eq_no_sound_update>:

sync_post_eq_no_sound_update:
	WAIT ZL,64
    72cc:	e5 e1       	ldi	r30, 0x15	; 21
    72ce:	ea 95       	dec	r30
    72d0:	f1 f7       	brne	.-4      	; 0x72ce <sync_post_eq_no_sound_update+0x2>
    72d2:	00 00       	nop

	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN 
    72d4:	28 9a       	sbi	0x05, 0	; 5

000072d6 <sync_pre_eq_cont>:

sync_pre_eq_cont:	
	;check if it's the last vsync pulse
	lds ZL,sync_pulse
    72d6:	e0 91 b7 0c 	lds	r30, 0x0CB7
	cpi ZL,0
    72da:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2 ;skip rjmp
    72dc:	09 f0       	breq	.+2      	; 0x72e0 <sync_pre_eq_cont+0xa>
	rjmp sync_end
    72de:	76 c0       	rjmp	.+236    	; 0x73cc <sync_end>
	
	;update sync flags
	ldi ZL,SYNC_HSYNC_PULSES
    72e0:	ed ef       	ldi	r30, 0xFD	; 253
	sts sync_pulse,ZL
    72e2:	e0 93 b7 0c 	sts	0x0CB7, r30
	ldi ZL,1
    72e6:	e1 e0       	ldi	r30, 0x01	; 1
	sts sync_phase,ZL
    72e8:	e0 93 b6 0c 	sts	0x0CB6, r30
	
	rjmp sync_end
    72ec:	6f c0       	rjmp	.+222    	; 0x73cc <sync_end>

000072ee <sync_hsync>:
; 0xF0 on the sbi
; pulse duration: 136 clocks
;***************************************************	

	; Set HDRIVE to normal rate
	ldi ZL,hi8(HDRIVE_CL)
    72ee:	e7 e0       	ldi	r30, 0x07	; 7
	sts _SFR_MEM_ADDR(OCR1AH),ZL	
    72f0:	e0 93 89 00 	sts	0x0089, r30
	ldi ZL,lo8(HDRIVE_CL)
    72f4:	eb e1       	ldi	r30, 0x1B	; 27
	sts _SFR_MEM_ADDR(OCR1AL),ZL
    72f6:	e0 93 88 00 	sts	0x0088, r30
	rjmp .
    72fa:	00 c0       	rjmp	.+0      	; 0x72fc <sync_hsync+0xe>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    72fc:	28 98       	cbi	0x05, 0	; 5
	
	ldi ZL,2	;indicate update_sound to generate the SBI for pre-eq
    72fe:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    7300:	00 c0       	rjmp	.+0      	; 0x7302 <sync_hsync+0x14>
	call update_sound
    7302:	0e 94 fe 39 	call	0x73fc	; 0x73fc <update_sound>

	;check if we have reached the first line to render
	ldi ZH,SYNC_HSYNC_PULSES
    7306:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    7308:	00 90 bd 0c 	lds	r0, 0x0CBD
	sub ZH,r0				
    730c:	f0 19       	sub	r31, r0
	lds ZL,sync_pulse
    730e:	e0 91 b7 0c 	lds	r30, 0x0CB7
	cp ZL,ZH
    7312:	ef 17       	cp	r30, r31
	brsh no_render
    7314:	d0 f4       	brcc	.+52     	; 0x734a <no_render>

	ldi ZH,SYNC_HSYNC_PULSES
    7316:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    7318:	00 90 bd 0c 	lds	r0, 0x0CBD
	sub ZH,r0				
    731c:	f0 19       	sub	r31, r0
	lds r0,render_lines_count
    731e:	00 90 be 0c 	lds	r0, 0x0CBE
	sub ZH,r0			
    7322:	f0 19       	sub	r31, r0
	cp ZL,ZH
    7324:	ef 17       	cp	r30, r31
	brlo no_render
    7326:	88 f0       	brcs	.+34     	; 0x734a <no_render>

	;push r1-r29
	ldi ZL,29
    7328:	ed e1       	ldi	r30, 0x1D	; 29
	clr ZH
    732a:	ff 27       	eor	r31, r31

0000732c <push_loop>:
push_loop:
	ld r0,Z	;load value from register file
    732c:	00 80       	ld	r0, Z
	push r0
    732e:	0f 92       	push	r0
	dec ZL
    7330:	ea 95       	dec	r30
	brne push_loop	
    7332:	e1 f7       	brne	.-8      	; 0x732c <push_loop>

	;timing compensation
	;to insure we always call the video mode 
	;routine at the same cycle	
	WAIT r16,230-(AUDIO_OUT_HSYNC_CYCLES)
    7334:	06 e0       	ldi	r16, 0x06	; 6
    7336:	0a 95       	dec	r16
    7338:	f1 f7       	brne	.-4      	; 0x7336 <push_loop+0xa>

	call VMODE_FUNC		;TCNT1=0x234
    733a:	0e 94 c4 35 	call	0x6b88	; 0x6b88 <sub_video_mode3>

	;pop r1-r29
	ldi ZL,1
    733e:	e1 e0       	ldi	r30, 0x01	; 1
	clr ZH
    7340:	ff 27       	eor	r31, r31

00007342 <pop_loop>:
pop_loop:
	pop r0
    7342:	0f 90       	pop	r0
	st Z+,r0 ;store value to register file
    7344:	01 92       	st	Z+, r0
	cpi ZL,30
    7346:	ee 31       	cpi	r30, 0x1E	; 30
	brlo pop_loop	
    7348:	e0 f3       	brcs	.-8      	; 0x7342 <pop_loop>

0000734a <no_render>:

no_render:

	;check if it's the last hsync pulse and we are 
	;ready for VSYNC
	lds ZL,sync_pulse
    734a:	e0 91 b7 0c 	lds	r30, 0x0CB7
	cpi ZL,0
    734e:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2
    7350:	09 f0       	breq	.+2      	; 0x7354 <no_render+0xa>
	rjmp sync_end
    7352:	3c c0       	rjmp	.+120    	; 0x73cc <sync_end>
;***************************************************
; Process VSYNC stuff
;***************************************************
	
	;push C-call registers
	push r18
    7354:	2f 93       	push	r18
	push r19
    7356:	3f 93       	push	r19
	push r20
    7358:	4f 93       	push	r20
	push r21
    735a:	5f 93       	push	r21
	push r22
    735c:	6f 93       	push	r22
	push r23
    735e:	7f 93       	push	r23
	push r24
    7360:	8f 93       	push	r24
	push r25
    7362:	9f 93       	push	r25
	push r26
    7364:	af 93       	push	r26
	push r27
    7366:	bf 93       	push	r27

	sei ;must enable ints for re-entrant sync pulses
    7368:	78 94       	sei
	clr r1
    736a:	11 24       	eor	r1, r1

	;set vsync flags
	clr ZL
    736c:	ee 27       	eor	r30, r30
	sts sync_phase,ZL
    736e:	e0 93 b6 0c 	sts	0x0CB6, r30
	ldi ZL,SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    7372:	e2 e1       	ldi	r30, 0x12	; 18
	sts sync_pulse,ZL
    7374:	e0 93 b7 0c 	sts	0x0CB7, r30



	;increment the vsync counter
	lds r24,vsync_counter
    7378:	80 91 c7 0c 	lds	r24, 0x0CC7
	lds r25,vsync_counter+1
    737c:	90 91 c8 0c 	lds	r25, 0x0CC8
	adiw r24,1
    7380:	01 96       	adiw	r24, 0x01	; 1
	sts vsync_counter,r24
    7382:	80 93 c7 0c 	sts	0x0CC7, r24
	sts vsync_counter+1,r25
    7386:	90 93 c8 0c 	sts	0x0CC8, r25


	;process user pre callback
	lds ZL,pre_vsync_user_callback+0
    738a:	e0 91 b9 0c 	lds	r30, 0x0CB9
	lds ZH,pre_vsync_user_callback+1
    738e:	f0 91 ba 0c 	lds	r31, 0x0CBA
	cp  ZL,r1
    7392:	e1 15       	cp	r30, r1
	cpc ZH,r1
    7394:	f1 05       	cpc	r31, r1
	breq .+2 
    7396:	09 f0       	breq	.+2      	; 0x739a <no_render+0x50>
	icall
    7398:	09 95       	icall

	;refresh buttons states
	#if CONTROLLERS_VSYNC_READ == 1
		call ReadControllers
    739a:	0e 94 9d 3b 	call	0x773a	; 0x773a <ReadControllers>
	#endif 
	
	;invoke stuff the video mode may have to do
	call VideoModeVsync	
    739e:	0e 94 de 49 	call	0x93bc	; 0x93bc <VideoModeVsync>

	;process music (music, envelopes, etc)
	call process_music
    73a2:	0e 94 f8 39 	call	0x73f0	; 0x73f0 <process_music>
	clr r1
    73a6:	11 24       	eor	r1, r1

	;process user post callback
	lds ZL,post_vsync_user_callback+0
    73a8:	e0 91 bb 0c 	lds	r30, 0x0CBB
	lds ZH,post_vsync_user_callback+1
    73ac:	f0 91 bc 0c 	lds	r31, 0x0CBC
	cp  ZL,r1
    73b0:	e1 15       	cp	r30, r1
	cpc ZH,r1
    73b2:	f1 05       	cpc	r31, r1
	breq .+2 
    73b4:	09 f0       	breq	.+2      	; 0x73b8 <no_render+0x6e>
	icall
    73b6:	09 95       	icall
	#if SNES_MOUSE == 1
		call ReadMouseExtendedData
		call ProcessMouseMovement
	#endif

	pop r27
    73b8:	bf 91       	pop	r27
	pop r26
    73ba:	af 91       	pop	r26
	pop r25
    73bc:	9f 91       	pop	r25
	pop r24
    73be:	8f 91       	pop	r24
	pop r23
    73c0:	7f 91       	pop	r23
	pop r22
    73c2:	6f 91       	pop	r22
	pop r21
    73c4:	5f 91       	pop	r21
	pop r20
    73c6:	4f 91       	pop	r20
	pop r19
    73c8:	3f 91       	pop	r19
	pop r18
    73ca:	2f 91       	pop	r18

000073cc <sync_end>:
	
sync_end:	
	;restore flags
	pop ZL
    73cc:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL
    73ce:	ef bf       	out	0x3f, r30	; 63
	
	pop ZH
    73d0:	ff 91       	pop	r31
	pop ZL
    73d2:	ef 91       	pop	r30
	pop r1
    73d4:	1f 90       	pop	r1
	pop r0
    73d6:	0f 90       	pop	r0
	reti
    73d8:	18 95       	reti

000073da <hsync_pulse>:
; 0xf0 on the sbi 
;	
; Destroys: ZL (r30)
;*************************************************
hsync_pulse:
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    73da:	28 98       	cbi	0x05, 0	; 5
	ldi ZL,2
    73dc:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    73de:	00 c0       	rjmp	.+0      	; 0x73e0 <hsync_pulse+0x6>
	call update_sound
    73e0:	0e 94 fe 39 	call	0x73fc	; 0x73fc <update_sound>

	lds ZL,sync_pulse
    73e4:	e0 91 b7 0c 	lds	r30, 0x0CB7
	dec ZL
    73e8:	ea 95       	dec	r30
	sts sync_pulse,ZL
    73ea:	e0 93 b7 0c 	sts	0x0CB7, r30

	ret
    73ee:	08 95       	ret

000073f0 <process_music>:
; NOTE: registers r18-r27 are already saved by the caller
;***********************
process_music:
	
#if ENABLE_MIXER==1
	lds ZL,sound_enabled
    73f0:	e0 91 cf 0c 	lds	r30, 0x0CCF
	sbrc ZL,0
    73f4:	e0 fd       	sbrc	r30, 0
 	call ProcessMusic
    73f6:	0e 94 24 3f 	call	0x7e48	; 0x7e48 <ProcessMusic>
#endif

	ret
    73fa:	08 95       	ret

000073fc <update_sound>:

; Destroys: Z,r0,r1
; cycles: 212+
;****************************
update_sound:
	push r16
    73fc:	0f 93       	push	r16
	push r17
    73fe:	1f 93       	push	r17
	push r18
    7400:	2f 93       	push	r18
	push r28
    7402:	cf 93       	push	r28
	push r29
    7404:	df 93       	push	r29

	mov r18,ZL
    7406:	2e 2f       	mov	r18, r30

	;channel 1 
	lds r16,tr1_step_lo
    7408:	00 91 d1 0c 	lds	r16, 0x0CD1
	lds r17,tr1_pos_frac
    740c:	10 91 d3 0c 	lds	r17, 0x0CD3
	add	r17,r16	;add step to fractional part of sample pos
    7410:	10 0f       	add	r17, r16
	lds r16,tr1_step_hi	
    7412:	00 91 d2 0c 	lds	r16, 0x0CD2
	lds ZL,tr1_pos_lo
    7416:	e0 91 d4 0c 	lds	r30, 0x0CD4
	lds ZH,tr1_pos_hi 
    741a:	f0 91 d5 0c 	lds	r31, 0x0CD5
	adc ZL,r16	;add step to low byte of sample pos
    741e:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    7420:	04 91       	lpm	r16, Z
	sts tr1_pos_lo,ZL
    7422:	e0 93 d4 0c 	sts	0x0CD4, r30
	sts tr1_pos_frac,r17
    7426:	10 93 d3 0c 	sts	0x0CD3, r17
	lds r17,tr1_vol
    742a:	10 91 d0 0c 	lds	r17, 0x0CD0
	mulsu r16,r17;(sample*mixing vol)
    742e:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend	
    7430:	00 08       	sbc	r0, r0
	mov r28,r1	;set (sample*vol>>8) to mix buffer lsb
    7432:	c1 2d       	mov	r28, r1
	mov r29,r0	;set mix buffer msb	
    7434:	d0 2d       	mov	r29, r0
	nop
    7436:	00 00       	nop

;38
	
	;channel 2
	lds r16,tr2_step_lo
    7438:	00 91 d7 0c 	lds	r16, 0x0CD7
	lds r17,tr2_pos_frac
    743c:	10 91 d9 0c 	lds	r17, 0x0CD9
	add	r17,r16	;add step to fractional part of sample pos
    7440:	10 0f       	add	r17, r16
	lds r16,tr2_step_hi	
    7442:	00 91 d8 0c 	lds	r16, 0x0CD8
	lds ZL,tr2_pos_lo
    7446:	e0 91 da 0c 	lds	r30, 0x0CDA
	lds ZH,tr2_pos_hi 
    744a:	f0 91 db 0c 	lds	r31, 0x0CDB
	adc ZL,r16	;add step to low byte of sample pos
    744e:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    7450:	04 91       	lpm	r16, Z
	sts tr2_pos_lo,ZL
    7452:	e0 93 da 0c 	sts	0x0CDA, r30
	sts tr2_pos_frac,r17
    7456:	10 93 d9 0c 	sts	0x0CD9, r17
	lds r17,tr2_vol
    745a:	10 91 d6 0c 	lds	r17, 0x0CD6

	;*** Video sync update ***
	sbrc r18,0								;pre-eq/post-eq sync
    745e:	20 fd       	sbrc	r18, 0
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    7460:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,0								
    7462:	20 ff       	sbrs	r18, 0
	rjmp .
    7464:	00 c0       	rjmp	.+0      	; 0x7466 <update_sound+0x6a>
	;*************************

	mulsu r16,r17;(sample*mixing vol)
    7466:	01 03       	mulsu	r16, r17
	clr r0
    7468:	00 24       	eor	r0, r0
	sbc r0,r0	;sign extend
    746a:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    746c:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb		
    746e:	d0 1d       	adc	r29, r0
;70
	
	;channel 3
	lds r16,tr3_step_lo
    7470:	00 91 dd 0c 	lds	r16, 0x0CDD
	lds r17,tr3_pos_frac
    7474:	10 91 df 0c 	lds	r17, 0x0CDF
	add	r17,r16				;add step to fractional part of sample pos
    7478:	10 0f       	add	r17, r16
	lds r16,tr3_step_hi	
    747a:	00 91 de 0c 	lds	r16, 0x0CDE
	lds ZL,tr3_pos_lo
    747e:	e0 91 e0 0c 	lds	r30, 0x0CE0
	lds ZH,tr3_pos_hi 
    7482:	f0 91 e1 0c 	lds	r31, 0x0CE1
	adc ZL,r16				;add step to low byte of sample pos
    7486:	e0 1f       	adc	r30, r16
	lpm	r16,Z				;load sample
    7488:	04 91       	lpm	r16, Z
	sts tr3_pos_lo,ZL
    748a:	e0 93 e0 0c 	sts	0x0CE0, r30
	sts tr3_pos_frac,r17
    748e:	10 93 df 0c 	sts	0x0CDF, r17
	lds r17,tr3_vol
    7492:	10 91 dc 0c 	lds	r17, 0x0CDC
	mulsu r16,r17			;(sample*mixing vol)
    7496:	01 03       	mulsu	r16, r17
	sbc r0,r0				;sign extend
    7498:	00 08       	sbc	r0, r0
	add r28,r1				;add (sample*vol>>8) to mix buffer lsb
    749a:	c1 0d       	add	r28, r1
	adc r29,r0				;ajust mix buffer msb
    749c:	d0 1d       	adc	r29, r0
;97	

	;channel 4 - 7/15 bit LFSR 
	lds r16,tr4_barrel_lo
    749e:	00 91 e4 0c 	lds	r16, 0x0CE4
	lds r17,tr4_barrel_hi
    74a2:	10 91 e5 0c 	lds	r17, 0x0CE5
	lds ZL,tr4_divider
    74a6:	e0 91 e6 0c 	lds	r30, 0x0CE6
	dec ZL	
    74aa:	ea 95       	dec	r30
	brpl ch4_no_shift	
    74ac:	92 f4       	brpl	.+36     	; 0x74d2 <ch4_no_shift>

	lds ZH,tr4_params
    74ae:	f0 91 e3 0c 	lds	r31, 0x0CE3
	mov ZL,ZH
    74b2:	ef 2f       	mov	r30, r31
	lsr ZL 			;keep bits7:1
    74b4:	e6 95       	lsr	r30

	mov r0,r16  ;copy barrel shifter
    74b6:	00 2e       	mov	r0, r16
	lsr r0
    74b8:	06 94       	lsr	r0
	eor r0,r16  ;xor bit0 and bit1
    74ba:	00 26       	eor	r0, r16
	bst r0,0
    74bc:	00 fa       	bst	r0, 0
	lsr r17
    74be:	16 95       	lsr	r17
	ror r16
    74c0:	07 95       	ror	r16
	bld r17,6	;15 bits mode
    74c2:	16 f9       	bld	r17, 6
	sbrs ZH,0
    74c4:	f0 ff       	sbrs	r31, 0
	bld r16,6	;7 bits mode
    74c6:	06 f9       	bld	r16, 6

	sts tr4_barrel_lo,r16
    74c8:	00 93 e4 0c 	sts	0x0CE4, r16
	sts tr4_barrel_hi,r17
    74cc:	10 93 e5 0c 	sts	0x0CE5, r17

	rjmp ch4_end
    74d0:	03 c0       	rjmp	.+6      	; 0x74d8 <ch4_end>

000074d2 <ch4_no_shift>:
ch4_no_shift:
	;wait loop 21 cycles
	ldi r17,6
    74d2:	16 e0       	ldi	r17, 0x06	; 6
	dec r17
    74d4:	1a 95       	dec	r17
	brne .-4
    74d6:	f1 f7       	brne	.-4      	; 0x74d4 <ch4_no_shift+0x2>

000074d8 <ch4_end>:
	;rjmp .
ch4_end:

	sts tr4_divider,ZL
    74d8:	e0 93 e6 0c 	sts	0x0CE6, r30
	ldi r17,0x80 ;-128
    74dc:	10 e8       	ldi	r17, 0x80	; 128
	
	;*** Video sync update ***
	sbrc r18,1								;hsync
    74de:	21 fd       	sbrc	r18, 1
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xF0
    74e0:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,1								
    74e2:	21 ff       	sbrs	r18, 1
	rjmp .
    74e4:	00 c0       	rjmp	.+0      	; 0x74e6 <ch4_end+0xe>
	;*************************
	
	sbrc r16,0
    74e6:	00 fd       	sbrc	r16, 0
	ldi r17,0x7f ;+127
    74e8:	1f e7       	ldi	r17, 0x7F	; 127
	
	lds r16,tr4_vol
    74ea:	00 91 e2 0c 	lds	r16, 0x0CE2

	mulsu r17,r16;(sample*mixing vol)
    74ee:	10 03       	mulsu	r17, r16
	sbc r0,r0	;sign extend
    74f0:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    74f2:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb
    74f4:	d0 1d       	adc	r29, r0
;142
#if SOUND_CHANNEL_5_ENABLE==1
	;channel 5 PCM -- 45 cycles

	;add fractional part
	lds r16,tr5_pos_frac
    74f6:	00 91 eb 0c 	lds	r16, 0x0CEB
	lds r17,tr5_step_lo 
    74fa:	10 91 e9 0c 	lds	r17, 0x0CE9
	add r16,r17
    74fe:	01 0f       	add	r16, r17
	sts tr5_pos_frac,r16
    7500:	00 93 eb 0c 	sts	0x0CEB, r16

	;add lo
	lds ZL,tr5_pos_lo
    7504:	e0 91 ec 0c 	lds	r30, 0x0CEC
	lds r17,tr5_step_hi 
    7508:	10 91 ea 0c 	lds	r17, 0x0CEA
	adc ZL,r17
    750c:	e1 1f       	adc	r30, r17

	;add hi
	lds ZH,tr5_pos_hi
    750e:	f0 91 ed 0c 	lds	r31, 0x0CED
	ldi r16,0
    7512:	00 e0       	ldi	r16, 0x00	; 0
	adc ZH,r16
    7514:	f0 1f       	adc	r31, r16

	movw r16,ZL
    7516:	8f 01       	movw	r16, r30
	lds r0,tr5_loop_len_lo
    7518:	00 90 ee 0c 	lds	r0, 0x0CEE
	lds r1,tr5_loop_len_hi	
    751c:	10 90 ef 0c 	lds	r1, 0x0CEF
	sub r16,r0
    7520:	00 19       	sub	r16, r0
	sbc r17,r1
    7522:	11 09       	sbc	r17, r1
	lds r0,tr5_loop_end_lo
    7524:	00 90 f0 0c 	lds	r0, 0x0CF0
	lds r1,tr5_loop_end_hi
    7528:	10 90 f1 0c 	lds	r1, 0x0CF1

	cp ZL,r0
    752c:	e0 15       	cp	r30, r0
	cpc ZH,r1
    752e:	f1 05       	cpc	r31, r1
	brlo .+2
    7530:	08 f0       	brcs	.+2      	; 0x7534 <ch4_end+0x5c>
	movw ZL,r16
    7532:	f8 01       	movw	r30, r16

	sts tr5_pos_lo,ZL
    7534:	e0 93 ec 0c 	sts	0x0CEC, r30
	sts tr5_pos_hi,ZH
    7538:	f0 93 ed 0c 	sts	0x0CED, r31

	lpm	r16,Z	;load sample
    753c:	04 91       	lpm	r16, Z
	lds r17,tr5_vol
    753e:	10 91 e8 0c 	lds	r17, 0x0CE8

	mulsu r16,r17;(sample*mixing vol)
    7542:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend
    7544:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    7546:	c1 0d       	add	r28, r1
	adc r29,r0	;adjust mix buffer msb	
    7548:	d0 1d       	adc	r29, r0
#endif
	
	;final processing

	;clip
	clr r0
    754a:	00 24       	eor	r0, r0
	cpi r28,128	;> 127?
    754c:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0	
    754e:	d0 05       	cpc	r29, r0
	brlt .+2
    7550:	0c f0       	brlt	.+2      	; 0x7554 <ch4_end+0x7c>
	ldi r28,127
    7552:	cf e7       	ldi	r28, 0x7F	; 127
	
	dec r0
    7554:	0a 94       	dec	r0
	cpi r28,-128; <-128?
    7556:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0xff
    7558:	d0 05       	cpc	r29, r0
	brge .+2
    755a:	0c f4       	brge	.+2      	; 0x755e <ch4_end+0x86>
	ldi r28,-128
    755c:	c0 e8       	ldi	r28, 0x80	; 128

	subi r28,128	;convert to unsigned		
    755e:	c0 58       	subi	r28, 0x80	; 128
	sts _SFR_MEM_ADDR(OCR2A),r28 ;output sound byte
    7560:	c0 93 b3 00 	sts	0x00B3, r28

00007564 <update_sound_end>:
#endif


update_sound_end:

	pop r29
    7564:	df 91       	pop	r29
	pop r28
    7566:	cf 91       	pop	r28
	pop r18
    7568:	2f 91       	pop	r18
	pop r17
    756a:	1f 91       	pop	r17
	pop r16
    756c:	0f 91       	pop	r16
	
	ret
    756e:	08 95       	ret

00007570 <SetSpritesTileTable>:
; C-callable
; r25:r24=pointer to sprites pixel data.
;*****************************
.section .text.SetSpritesTileTable
SetSpritesTileTable:
	sts sprites_tile_banks,r24
    7570:	80 93 a4 0c 	sts	0x0CA4, r24
	sts sprites_tile_banks+1,r25
    7574:	90 93 a5 0c 	sts	0x0CA5, r25
	ret
    7578:	08 95       	ret

0000757a <ClearVram>:
; C-callable
;************************************
.section .text.ClearVram
ClearVram:
	//init vram		
	ldi r30,lo8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    757a:	e0 e0       	ldi	r30, 0x00	; 0
	ldi r31,hi8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    757c:	f4 e0       	ldi	r31, 0x04	; 4

	ldi XL,lo8(vram)
    757e:	a0 e0       	ldi	r26, 0x00	; 0
	ldi XH,hi8(vram)
    7580:	b1 e0       	ldi	r27, 0x01	; 1

	ldi r22,RAM_TILES_COUNT
    7582:	6c e1       	ldi	r22, 0x1C	; 28

00007584 <fill_vram_loop>:

fill_vram_loop:
	st X+,r22
    7584:	6d 93       	st	X+, r22
	sbiw r30,1
    7586:	31 97       	sbiw	r30, 0x01	; 1
	brne fill_vram_loop
    7588:	e9 f7       	brne	.-6      	; 0x7584 <fill_vram_loop>

	clr r1
    758a:	11 24       	eor	r1, r1

	ret
    758c:	08 95       	ret

0000758e <SetTile>:
.section .text.SetTile
SetTile:
#if SCROLLING == 1
	;index formula is vram[((y>>3)*256)+8x+(y&7)]
	
	andi r24,0x1f
    758e:	8f 71       	andi	r24, 0x1F	; 31
	mov r23,r22
    7590:	76 2f       	mov	r23, r22
	lsr r22
    7592:	66 95       	lsr	r22
	lsr r22
    7594:	66 95       	lsr	r22
	lsr r22			;y>>3
    7596:	66 95       	lsr	r22
	ldi r18,8		
    7598:	28 e0       	ldi	r18, 0x08	; 8
	mul r24,r18		;x*8
    759a:	82 9f       	mul	r24, r18
	movw XL,r0
    759c:	d0 01       	movw	r26, r0
	subi XL,lo8(-(vram))
    759e:	a0 50       	subi	r26, 0x00	; 0
	sbci XH,hi8(-(vram))
    75a0:	bf 4f       	sbci	r27, 0xFF	; 255
	add XH,r22		;vram+((y>>3)*256)
    75a2:	b6 0f       	add	r27, r22
	andi r23,7		;y&7	
    75a4:	77 70       	andi	r23, 0x07	; 7
	add XL,r23
    75a6:	a7 0f       	add	r26, r23
						
	subi r20,~(RAM_TILES_COUNT-1)	
    75a8:	44 5e       	subi	r20, 0xE4	; 228
	st X,r20
    75aa:	4c 93       	st	X, r20

	clr r1
    75ac:	11 24       	eor	r1, r1

	ret
    75ae:	08 95       	ret

000075b0 <SetTileTable>:
; C-callable
; r25:r24=pointer to tiles data
;************************************
.section .text.SetTileTable
SetTileTable:
	sts tile_table_lo,r24
    75b0:	80 93 ac 0c 	sts	0x0CAC, r24
	sts tile_table_hi,r25	
    75b4:	90 93 ad 0c 	sts	0x0CAD, r25
	ret
    75b8:	08 95       	ret

000075ba <GetVsyncFlag>:
;
; C-callable
;************************************
.section .text.GetVsyncFlag
GetVsyncFlag:
	lds r24,sync_flags
    75ba:	80 91 b8 0c 	lds	r24, 0x0CB8
	andi r24,SYNC_FLAG_VSYNC
    75be:	81 70       	andi	r24, 0x01	; 1
	ret
    75c0:	08 95       	ret

000075c2 <ClearVsyncFlag>:
; 
; C-callable
;*****************************
.section .text.ClearVsyncFlag
ClearVsyncFlag:
	lds r18,sync_flags
    75c2:	20 91 b8 0c 	lds	r18, 0x0CB8
	andi r18,~SYNC_FLAG_VSYNC
    75c6:	2e 7f       	andi	r18, 0xFE	; 254
	sts sync_flags,r18
    75c8:	20 93 b8 0c 	sts	0x0CB8, r18
	ret
    75cc:	08 95       	ret

000075ce <ReadJoypad>:
; r24=joypad No (0 or 1)
; returns: (int) r25:r24
;*****************************
.section .text.ReadJoypad
ReadJoypad:	
	tst r24
    75ce:	88 23       	and	r24, r24
	brne rj_p2
    75d0:	29 f4       	brne	.+10     	; 0x75dc <rj_p2>
		
	lds r24,joypad1_status_lo
    75d2:	80 91 bf 0c 	lds	r24, 0x0CBF
	lds r25,joypad1_status_lo+1
    75d6:	90 91 c0 0c 	lds	r25, 0x0CC0
	ret
    75da:	08 95       	ret

000075dc <rj_p2>:
rj_p2:
	lds r24,joypad2_status_lo
    75dc:	80 91 c3 0c 	lds	r24, 0x0CC3
	lds r25,joypad2_status_lo+1	
    75e0:	90 91 c4 0c 	lds	r25, 0x0CC4

	ret
    75e4:	08 95       	ret

000075e6 <WaitUs>:
; r25:r24 - us to wait
; returns: void
;****************************
.section .text.WaitUs
WaitUs:	
	ldi r23,8
    75e6:	78 e0       	ldi	r23, 0x08	; 8
	dec 23
    75e8:	7a 95       	dec	r23
	brne .-4 ;~1 us
    75ea:	f1 f7       	brne	.-4      	; 0x75e8 <WaitUs+0x2>
	nop
    75ec:	00 00       	nop
	sbiw r24,1
    75ee:	01 97       	sbiw	r24, 0x01	; 1
	brne WaitUs
    75f0:	d1 f7       	brne	.-12     	; 0x75e6 <WaitUs>

	ret
    75f2:	08 95       	ret

000075f4 <WriteEeprom>:
;****************************

.section .text.WriteEeprom
WriteEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    75f4:	f9 99       	sbic	0x1f, 1	; 31
   rjmp WriteEeprom
    75f6:	fe cf       	rjmp	.-4      	; 0x75f4 <WriteEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    75f8:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    75fa:	81 bd       	out	0x21, r24	; 33
   ; Write data (r22) to Data Register
   out _SFR_IO_ADDR(EEDR),r22
    75fc:	60 bd       	out	0x20, r22	; 32
   cli
    75fe:	f8 94       	cli
   ; Write logical one to EEMPE
   sbi _SFR_IO_ADDR(EECR),EEMPE
    7600:	fa 9a       	sbi	0x1f, 2	; 31
   ; Start eeprom write by setting EEPE
   sbi _SFR_IO_ADDR(EECR),EEPE
    7602:	f9 9a       	sbi	0x1f, 1	; 31
   sei
    7604:	78 94       	sei
   ret
    7606:	08 95       	ret

00007608 <ReadEeprom>:
; r24 - value read
;****************************
.section .text.ReadEeprom
ReadEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    7608:	f9 99       	sbic	0x1f, 1	; 31
   rjmp ReadEeprom
    760a:	fe cf       	rjmp	.-4      	; 0x7608 <ReadEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    760c:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    760e:	81 bd       	out	0x21, r24	; 33
   ; Start eeprom read by writing EERE
   cli
    7610:	f8 94       	cli
   sbi _SFR_IO_ADDR(EECR),EERE
    7612:	f8 9a       	sbi	0x1f, 0	; 31
   ; Read data from Data Register
   in r24,_SFR_IO_ADDR(EEDR)
    7614:	80 b5       	in	r24, 0x20	; 32
   sei
    7616:	78 94       	sei
   ret
    7618:	08 95       	ret

0000761a <wdt_randomize>:
	.global wdt_randomize
	.section .text.wdt_randomize
	wdt_randomize:

		;set timer 1 full speed count to 0xffff
		ldi r24,0
    761a:	80 e0       	ldi	r24, 0x00	; 0
		sts sync_pulse,r24
    761c:	80 93 b7 0c 	sts	0x0CB7, r24


		sts _SFR_MEM_ADDR(TIMSK1),r24
    7620:	80 93 6f 00 	sts	0x006F, r24
		sts _SFR_MEM_ADDR(OCR1AL),r24
    7624:	80 93 88 00 	sts	0x0088, r24
		sts _SFR_MEM_ADDR(OCR1AH),r24
    7628:	80 93 89 00 	sts	0x0089, r24
		sts _SFR_MEM_ADDR(OCR1BL),r24
    762c:	80 93 8a 00 	sts	0x008A, r24
		sts _SFR_MEM_ADDR(OCR1BH),r24
    7630:	80 93 8b 00 	sts	0x008B, r24
		sts _SFR_MEM_ADDR(TCNT1H),r24
    7634:	80 93 85 00 	sts	0x0085, r24
		sts _SFR_MEM_ADDR(TCNT1L),r24
    7638:	80 93 84 00 	sts	0x0084, r24
		
		sts _SFR_MEM_ADDR(TCCR1A),r24	
    763c:	80 93 80 00 	sts	0x0080, r24
		ldi 24,(1<<CS10)
    7640:	81 e0       	ldi	r24, 0x01	; 1
		sts _SFR_MEM_ADDR(TCCR1B),r24
    7642:	80 93 81 00 	sts	0x0081, r24

		cli
    7646:	f8 94       	cli

		;enable watchdog at fastest speed and generate interrupts
		ldi r24,0
    7648:	80 e0       	ldi	r24, 0x00	; 0
		sts _SFR_MEM_ADDR(MCUSR),r24	
    764a:	80 93 54 00 	sts	0x0054, r24
		ldi r25,(1<<WDIE)+(1<<WDE)+(0<<WDP3)+(0<<WDP2)+(0<<WDP1)+(0<<WDP0)
    764e:	98 e4       	ldi	r25, 0x48	; 72
		lds r24,_SFR_MEM_ADDR(WDTCSR)
    7650:	80 91 60 00 	lds	r24, 0x0060
		ori r24,(1<<WDCE)+(1<<WDE)
    7654:	88 61       	ori	r24, 0x18	; 24
		sts _SFR_MEM_ADDR(WDTCSR),r24
    7656:	80 93 60 00 	sts	0x0060, r24
		sts _SFR_MEM_ADDR(WDTCSR),r25
    765a:	90 93 60 00 	sts	0x0060, r25
	
		sei
    765e:	78 94       	sei

00007660 <wait>:

		;generate 8 random cycles
	wait:
		lds r24,sync_pulse ;using the yet unalocated "sync_pulse" as a temp variable
    7660:	80 91 b7 0c 	lds	r24, 0x0CB7
		cpi r24,8
    7664:	88 30       	cpi	r24, 0x08	; 8
		brlo wait
    7666:	e0 f3       	brcs	.-8      	; 0x7660 <wait>

		ret
    7668:	08 95       	ret

0000766a <GetTrueRandomSeed>:
	;********************************

	.global GetTrueRandomSeed
	.section .text.GetTrueRandomSeed
	GetTrueRandomSeed:
		lds r24,random_value
    766a:	80 91 c9 0c 	lds	r24, 0x0CC9
		lds r25,random_value+1
    766e:	90 91 ca 0c 	lds	r25, 0x0CCA
		ret
    7672:	08 95       	ret

00007674 <__vector_8>:
	;*************************************
	; Watchdog timer interrupt
	;*************************************
	WDT_vect:
		;save flags & status register
		push r16
    7674:	0f 93       	push	r16
		push r17
    7676:	1f 93       	push	r17

		in r16,_SFR_IO_ADDR(SREG)
    7678:	0f b7       	in	r16, 0x3f	; 63
		push r16
    767a:	0f 93       	push	r16

		lds r16,sync_pulse
    767c:	00 91 b7 0c 	lds	r16, 0x0CB7
		inc r16
    7680:	03 95       	inc	r16
		sts sync_pulse,r16
    7682:	00 93 b7 0c 	sts	0x0CB7, r16

		;XOR succesive timer1 LSB into a int
		sbrc r16,0
    7686:	00 fd       	sbrc	r16, 0
		rjmp 1f
    7688:	08 c0       	rjmp	.+16     	; 0x769a <__vector_8+0x26>
		lds r17,random_value
    768a:	10 91 c9 0c 	lds	r17, 0x0CC9
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    768e:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    7692:	10 27       	eor	r17, r16
		sts random_value,r17
    7694:	10 93 c9 0c 	sts	0x0CC9, r17
		rjmp 2f
    7698:	07 c0       	rjmp	.+14     	; 0x76a8 <__vector_8+0x34>
	1:
		lds r17,random_value+1
    769a:	10 91 ca 0c 	lds	r17, 0x0CCA
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    769e:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    76a2:	10 27       	eor	r17, r16
		sts random_value+1,r17
    76a4:	10 93 ca 0c 	sts	0x0CCA, r17
	2:

		ldi r16,(1<<WDIE)+(1<<WDE)
    76a8:	08 e4       	ldi	r16, 0x48	; 72
		sts _SFR_MEM_ADDR(WDTCSR),r16
    76aa:	00 93 60 00 	sts	0x0060, r16

		;restore flags
		pop r16
    76ae:	0f 91       	pop	r16
		out _SFR_IO_ADDR(SREG),r16
    76b0:	0f bf       	out	0x3f, r16	; 63
	
		pop r17
    76b2:	1f 91       	pop	r17
		pop r16
    76b4:	0f 91       	pop	r16
		reti
    76b6:	18 95       	reti

000076b8 <SoftReset>:

/**
 * Performs a software reset
 */
void SoftReset(void){        
	wdt_enable(WDTO_15MS);  
    76b8:	98 e0       	ldi	r25, 0x08	; 8
    76ba:	88 e1       	ldi	r24, 0x18	; 24
    76bc:	0f b6       	in	r0, 0x3f	; 63
    76be:	f8 94       	cli
    76c0:	a8 95       	wdr
    76c2:	80 93 60 00 	sts	0x0060, r24
    76c6:	0f be       	out	0x3f, r0	; 63
    76c8:	90 93 60 00 	sts	0x0060, r25
	while(1);
    76cc:	ff cf       	rjmp	.-2      	; 0x76cc <SoftReset+0x14>

000076ce <ReadButtons>:
void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
	unsigned char i;

	//latch controllers
	JOYPAD_OUT_PORT|=_BV(JOYPAD_LATCH_PIN);
    76ce:	12 9a       	sbi	0x02, 2	; 2
		}else{
			Wait200ns();
			Wait200ns();
		}	
	#else
		Wait200ns();
    76d0:	c8 95       	lpm
    76d2:	c8 95       	lpm
		Wait200ns();
    76d4:	c8 95       	lpm
    76d6:	c8 95       	lpm
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));
    76d8:	12 98       	cbi	0x02, 2	; 2
    76da:	40 e1       	ldi	r20, 0x10	; 16
	DisplayLogo();
	
}

void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
    76dc:	80 e0       	ldi	r24, 0x00	; 0
    76de:	90 e0       	ldi	r25, 0x00	; 0
    76e0:	20 e0       	ldi	r18, 0x00	; 0
    76e2:	30 e0       	ldi	r19, 0x00	; 0


	//read button states
	for(i=0;i<16;i++){

		p1ButtonsLo>>=1;
    76e4:	36 95       	lsr	r19
    76e6:	27 95       	ror	r18
		p2ButtonsLo>>=1;
    76e8:	96 95       	lsr	r25
    76ea:	87 95       	ror	r24
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    76ec:	c8 95       	lpm
    76ee:	c8 95       	lpm
			Wait200ns();
    76f0:	c8 95       	lpm
    76f2:	c8 95       	lpm
		#endif
			
		//pulse clock pin		
		JOYPAD_OUT_PORT&=~(_BV(JOYPAD_CLOCK_PIN));
    76f4:	13 98       	cbi	0x02, 3	; 2
		
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) p1ButtonsLo|=(1<<15);
    76f6:	00 9b       	sbis	0x00, 0	; 0
    76f8:	30 68       	ori	r19, 0x80	; 128
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) p2ButtonsLo|=(1<<15);
    76fa:	01 9b       	sbis	0x00, 1	; 0
    76fc:	90 68       	ori	r25, 0x80	; 128
		
		JOYPAD_OUT_PORT|=_BV(JOYPAD_CLOCK_PIN);
    76fe:	13 9a       	sbi	0x02, 3	; 2
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    7700:	c8 95       	lpm
    7702:	c8 95       	lpm
			Wait200ns();
    7704:	c8 95       	lpm
    7706:	c8 95       	lpm
    7708:	41 50       	subi	r20, 0x01	; 1
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));


	//read button states
	for(i=0;i<16;i++){
    770a:	61 f7       	brne	.-40     	; 0x76e4 <ReadButtons+0x16>
		#endif

	}

	#if JOYSTICK==TYPE_SNES
		joypad1_status_lo=p1ButtonsLo;
    770c:	30 93 c0 0c 	sts	0x0CC0, r19
    7710:	20 93 bf 0c 	sts	0x0CBF, r18
		joypad2_status_lo=p2ButtonsLo;
    7714:	90 93 c4 0c 	sts	0x0CC4, r25
    7718:	80 93 c3 0c 	sts	0x0CC3, r24
	#else
		joypad1_status_lo=p1ButtonsLo&0xff;
		joypad2_status_lo=p2ButtonsLo&0xff;	
	#endif

	if(joypad1_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B) || joypad2_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B)){
    771c:	80 91 bf 0c 	lds	r24, 0x0CBF
    7720:	90 91 c0 0c 	lds	r25, 0x0CC0
    7724:	0f 97       	sbiw	r24, 0x0f	; 15
    7726:	31 f0       	breq	.+12     	; 0x7734 <ReadButtons+0x66>
    7728:	80 91 c3 0c 	lds	r24, 0x0CC3
    772c:	90 91 c4 0c 	lds	r25, 0x0CC4
    7730:	0f 97       	sbiw	r24, 0x0f	; 15
    7732:	11 f4       	brne	.+4      	; 0x7738 <ReadButtons+0x6a>
		SoftReset();
    7734:	0e 94 5c 3b 	call	0x76b8	; 0x76b8 <SoftReset>
    7738:	08 95       	ret

0000773a <ReadControllers>:
 * program when CONTROLLERS_VSYNC_READ==0.
*/
void ReadControllers(){

	//Detect if devices are connected.
	joypadsConnectionStatus=0;
    773a:	10 92 f8 0c 	sts	0x0CF8, r1
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) joypadsConnectionStatus|=1;
    773e:	00 99       	sbic	0x00, 0	; 0
    7740:	03 c0       	rjmp	.+6      	; 0x7748 <ReadControllers+0xe>
    7742:	81 e0       	ldi	r24, 0x01	; 1
    7744:	80 93 f8 0c 	sts	0x0CF8, r24
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) joypadsConnectionStatus|=2;
    7748:	01 99       	sbic	0x00, 1	; 0
    774a:	05 c0       	rjmp	.+10     	; 0x7756 <ReadControllers+0x1c>
    774c:	80 91 f8 0c 	lds	r24, 0x0CF8
    7750:	82 60       	ori	r24, 0x02	; 2
    7752:	80 93 f8 0c 	sts	0x0CF8, r24
			
	//read the standard buttons
	ReadButtons();
    7756:	0c 94 67 3b 	jmp	0x76ce	; 0x76ce <ReadButtons>

0000775a <FormatEeprom>:
	return resp;
}

	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {
    775a:	cf 93       	push	r28
    775c:	df 93       	push	r29
    775e:	c0 e0       	ldi	r28, 0x00	; 0
    7760:	d0 e0       	ldi	r29, 0x00	; 0
    7762:	fe 01       	movw	r30, r28
    7764:	ec 51       	subi	r30, 0x1C	; 28
    7766:	ff 4f       	sbci	r31, 0xFF	; 255

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
    7768:	64 91       	lpm	r22, Z
    776a:	ce 01       	movw	r24, r28
    776c:	0e 94 fa 3a 	call	0x75f4	; 0x75f4 <WriteEeprom>
    7770:	21 96       	adiw	r28, 0x01	; 1
	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
    7772:	c0 32       	cpi	r28, 0x20	; 32
    7774:	d1 05       	cpc	r29, r1
    7776:	a9 f7       	brne	.-22     	; 0x7762 <FormatEeprom+0x8>
    7778:	c0 e2       	ldi	r28, 0x20	; 32
    777a:	d0 e0       	ldi	r29, 0x00	; 0
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
    777c:	6f ef       	ldi	r22, 0xFF	; 255
    777e:	ce 01       	movw	r24, r28
    7780:	0e 94 fa 3a 	call	0x75f4	; 0x75f4 <WriteEeprom>
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
    7784:	6f ef       	ldi	r22, 0xFF	; 255
    7786:	ce 01       	movw	r24, r28
    7788:	01 96       	adiw	r24, 0x01	; 1
    778a:	0e 94 fa 3a 	call	0x75f4	; 0x75f4 <WriteEeprom>
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
    778e:	a0 96       	adiw	r28, 0x20	; 32
    7790:	c1 15       	cp	r28, r1
    7792:	88 e0       	ldi	r24, 0x08	; 8
    7794:	d8 07       	cpc	r29, r24
    7796:	91 f7       	brne	.-28     	; 0x777c <FormatEeprom+0x22>
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
   }
   
}
    7798:	df 91       	pop	r29
    779a:	cf 91       	pop	r28
    779c:	08 95       	ret

0000779e <isEepromFormatted>:
	  }
   }
}
	
//returns true if the EEPROM has been setup to work with the kernel.
bool isEepromFormatted(){
    779e:	cf 93       	push	r28
	unsigned id;
	id=ReadEeprom(0)+(ReadEeprom(1)<<8);
    77a0:	80 e0       	ldi	r24, 0x00	; 0
    77a2:	90 e0       	ldi	r25, 0x00	; 0
    77a4:	0e 94 04 3b 	call	0x7608	; 0x7608 <ReadEeprom>
    77a8:	c8 2f       	mov	r28, r24
    77aa:	81 e0       	ldi	r24, 0x01	; 1
    77ac:	90 e0       	ldi	r25, 0x00	; 0
    77ae:	0e 94 04 3b 	call	0x7608	; 0x7608 <ReadEeprom>
    77b2:	28 2f       	mov	r18, r24
    77b4:	30 e0       	ldi	r19, 0x00	; 0
    77b6:	32 2f       	mov	r19, r18
    77b8:	22 27       	eor	r18, r18
    77ba:	2c 0f       	add	r18, r28
    77bc:	31 1d       	adc	r19, r1
	return (id==EEPROM_SIGNATURE);
    77be:	81 e0       	ldi	r24, 0x01	; 1
    77c0:	2a 35       	cpi	r18, 0x5A	; 90
    77c2:	35 45       	sbci	r19, 0x55	; 85
    77c4:	09 f0       	breq	.+2      	; 0x77c8 <isEepromFormatted+0x2a>
    77c6:	80 e0       	ldi	r24, 0x00	; 0
}
    77c8:	cf 91       	pop	r28
    77ca:	08 95       	ret

000077cc <EepromBlockExists>:
 * @return
 *  0x00 = Success, Block exists.
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK.
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND.
 */
char EepromBlockExists(unsigned int blockId, u16* eepromAddr, u8* nextFreeBlockId){
    77cc:	8f 92       	push	r8
    77ce:	9f 92       	push	r9
    77d0:	af 92       	push	r10
    77d2:	bf 92       	push	r11
    77d4:	cf 92       	push	r12
    77d6:	df 92       	push	r13
    77d8:	ef 92       	push	r14
    77da:	ff 92       	push	r15
    77dc:	0f 93       	push	r16
    77de:	1f 93       	push	r17
    77e0:	cf 93       	push	r28
    77e2:	df 93       	push	r29
	u8 nextFreeBlock=0;
	u8 result=EEPROM_ERROR_BLOCK_NOT_FOUND;
	u16 id;
	*eepromAddr=0;
    77e4:	fb 01       	movw	r30, r22
    77e6:	11 82       	std	Z+1, r1	; 0x01
    77e8:	10 82       	st	Z, r1

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    77ea:	8f 3f       	cpi	r24, 0xFF	; 255
    77ec:	ff ef       	ldi	r31, 0xFF	; 255
    77ee:	9f 07       	cpc	r25, r31
    77f0:	89 f1       	breq	.+98     	; 0x7854 <EepromBlockExists+0x88>
    77f2:	6a 01       	movw	r12, r20
    77f4:	8b 01       	movw	r16, r22
    77f6:	7c 01       	movw	r14, r24
    77f8:	a1 2c       	mov	r10, r1
    77fa:	b1 2c       	mov	r11, r1
    77fc:	c0 e0       	ldi	r28, 0x00	; 0
    77fe:	d3 e0       	ldi	r29, 0x03	; 3
    7800:	91 2c       	mov	r9, r1
		
	//scan all blocks and get the memory adress of that block and the next free block
	for(u8 i=0;i<EEPROM_MAX_BLOCKS;i++){
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
    7802:	c5 01       	movw	r24, r10
    7804:	0e 94 04 3b 	call	0x7608	; 0x7608 <ReadEeprom>
    7808:	88 2e       	mov	r8, r24
    780a:	c5 01       	movw	r24, r10
    780c:	01 96       	adiw	r24, 0x01	; 1
    780e:	0e 94 04 3b 	call	0x7608	; 0x7608 <ReadEeprom>
    7812:	28 2f       	mov	r18, r24
    7814:	30 e0       	ldi	r19, 0x00	; 0
    7816:	32 2f       	mov	r19, r18
    7818:	22 27       	eor	r18, r18
    781a:	28 0d       	add	r18, r8
    781c:	31 1d       	adc	r19, r1
		
		if(id==blockId){
    781e:	2e 15       	cp	r18, r14
    7820:	3f 05       	cpc	r19, r15
    7822:	29 f4       	brne	.+10     	; 0x782e <EepromBlockExists+0x62>
			*eepromAddr=(i*EEPROM_BLOCK_SIZE);
    7824:	f8 01       	movw	r30, r16
    7826:	b1 82       	std	Z+1, r11	; 0x01
    7828:	a0 82       	st	Z, r10
			result=EEPROM_OK;
    782a:	d0 e0       	ldi	r29, 0x00	; 0
    782c:	0b c0       	rjmp	.+22     	; 0x7844 <EepromBlockExists+0x78>
		}
		
		if(id==0xffff && nextFreeBlock==0){
    782e:	2f 3f       	cpi	r18, 0xFF	; 255
    7830:	3f 4f       	sbci	r19, 0xFF	; 255
    7832:	41 f4       	brne	.+16     	; 0x7844 <EepromBlockExists+0x78>
    7834:	91 10       	cpse	r9, r1
    7836:	06 c0       	rjmp	.+12     	; 0x7844 <EepromBlockExists+0x78>
			nextFreeBlock=i;
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
    7838:	c1 14       	cp	r12, r1
    783a:	d1 04       	cpc	r13, r1
    783c:	11 f0       	breq	.+4      	; 0x7842 <EepromBlockExists+0x76>
    783e:	f6 01       	movw	r30, r12
    7840:	c0 83       	st	Z, r28
    7842:	9c 2e       	mov	r9, r28
	*eepromAddr=0;

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
		
	//scan all blocks and get the memory adress of that block and the next free block
	for(u8 i=0;i<EEPROM_MAX_BLOCKS;i++){
    7844:	cf 5f       	subi	r28, 0xFF	; 255
    7846:	f0 e2       	ldi	r31, 0x20	; 32
    7848:	af 0e       	add	r10, r31
    784a:	b1 1c       	adc	r11, r1
    784c:	c0 34       	cpi	r28, 0x40	; 64
    784e:	c9 f6       	brne	.-78     	; 0x7802 <EepromBlockExists+0x36>
			nextFreeBlock=i;
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
		}
	}

	return result;
    7850:	8d 2f       	mov	r24, r29
    7852:	01 c0       	rjmp	.+2      	; 0x7856 <EepromBlockExists+0x8a>
	u8 nextFreeBlock=0;
	u8 result=EEPROM_ERROR_BLOCK_NOT_FOUND;
	u16 id;
	*eepromAddr=0;

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    7854:	81 e0       	ldi	r24, 0x01	; 1
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
		}
	}

	return result;
}
    7856:	df 91       	pop	r29
    7858:	cf 91       	pop	r28
    785a:	1f 91       	pop	r17
    785c:	0f 91       	pop	r16
    785e:	ff 90       	pop	r15
    7860:	ef 90       	pop	r14
    7862:	df 90       	pop	r13
    7864:	cf 90       	pop	r12
    7866:	bf 90       	pop	r11
    7868:	af 90       	pop	r10
    786a:	9f 90       	pop	r9
    786c:	8f 90       	pop	r8
    786e:	08 95       	ret

00007870 <EepromWriteBlock>:
 * Returns:
 *  0x00 = Success
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x02 = EEPROM_ERROR_FULL
 */
char EepromWriteBlock(struct EepromBlockStruct *block){
    7870:	ef 92       	push	r14
    7872:	ff 92       	push	r15
    7874:	0f 93       	push	r16
    7876:	1f 93       	push	r17
    7878:	cf 93       	push	r28
    787a:	df 93       	push	r29
    787c:	00 d0       	rcall	.+0      	; 0x787e <EepromWriteBlock+0xe>
    787e:	1f 92       	push	r1
    7880:	cd b7       	in	r28, 0x3d	; 61
    7882:	de b7       	in	r29, 0x3e	; 62
    7884:	8c 01       	movw	r16, r24
	u16 eepromAddr=0;
    7886:	1a 82       	std	Y+2, r1	; 0x02
    7888:	19 82       	std	Y+1, r1	; 0x01
	u8 *srcPtr=(unsigned char *)block,res,nextFreeBlock=0;
    788a:	1b 82       	std	Y+3, r1	; 0x03

	res=EepromBlockExists(block->id,&eepromAddr,&nextFreeBlock);
    788c:	ae 01       	movw	r20, r28
    788e:	4d 5f       	subi	r20, 0xFD	; 253
    7890:	5f 4f       	sbci	r21, 0xFF	; 255
    7892:	be 01       	movw	r22, r28
    7894:	6f 5f       	subi	r22, 0xFF	; 255
    7896:	7f 4f       	sbci	r23, 0xFF	; 255
    7898:	fc 01       	movw	r30, r24
    789a:	80 81       	ld	r24, Z
    789c:	91 81       	ldd	r25, Z+1	; 0x01
    789e:	0e 94 e6 3b 	call	0x77cc	; 0x77cc <EepromBlockExists>
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;
    78a2:	88 23       	and	r24, r24
    78a4:	11 f0       	breq	.+4      	; 0x78aa <EepromWriteBlock+0x3a>
    78a6:	83 30       	cpi	r24, 0x03	; 3
    78a8:	19 f5       	brne	.+70     	; 0x78f0 <EepromWriteBlock+0x80>

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    78aa:	89 81       	ldd	r24, Y+1	; 0x01
    78ac:	9a 81       	ldd	r25, Y+2	; 0x02
    78ae:	89 2b       	or	r24, r25
    78b0:	49 f4       	brne	.+18     	; 0x78c4 <EepromWriteBlock+0x54>
    78b2:	8b 81       	ldd	r24, Y+3	; 0x03
    78b4:	88 23       	and	r24, r24
    78b6:	d9 f0       	breq	.+54     	; 0x78ee <EepromWriteBlock+0x7e>
	if(eepromAddr==0 && nextFreeBlock!=0) eepromAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;
    78b8:	f0 e2       	ldi	r31, 0x20	; 32
    78ba:	8f 9f       	mul	r24, r31
    78bc:	c0 01       	movw	r24, r0
    78be:	11 24       	eor	r1, r1
    78c0:	9a 83       	std	Y+2, r25	; 0x02
    78c2:	89 83       	std	Y+1, r24	; 0x01
    78c4:	78 01       	movw	r14, r16
    78c6:	20 e2       	ldi	r18, 0x20	; 32
    78c8:	e2 0e       	add	r14, r18
    78ca:	f1 1c       	adc	r15, r1

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
		WriteEeprom(eepromAddr++,*srcPtr);
    78cc:	f8 01       	movw	r30, r16
    78ce:	61 91       	ld	r22, Z+
    78d0:	8f 01       	movw	r16, r30
    78d2:	89 81       	ldd	r24, Y+1	; 0x01
    78d4:	9a 81       	ldd	r25, Y+2	; 0x02
    78d6:	9c 01       	movw	r18, r24
    78d8:	2f 5f       	subi	r18, 0xFF	; 255
    78da:	3f 4f       	sbci	r19, 0xFF	; 255
    78dc:	3a 83       	std	Y+2, r19	; 0x02
    78de:	29 83       	std	Y+1, r18	; 0x01
    78e0:	0e 94 fa 3a 	call	0x75f4	; 0x75f4 <WriteEeprom>
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(eepromAddr==0 && nextFreeBlock!=0) eepromAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
    78e4:	0e 15       	cp	r16, r14
    78e6:	1f 05       	cpc	r17, r15
    78e8:	89 f7       	brne	.-30     	; 0x78cc <EepromWriteBlock+0x5c>
		WriteEeprom(eepromAddr++,*srcPtr);
		srcPtr++;	
	}
	
	return 0;
    78ea:	80 e0       	ldi	r24, 0x00	; 0
    78ec:	01 c0       	rjmp	.+2      	; 0x78f0 <EepromWriteBlock+0x80>
	u8 *srcPtr=(unsigned char *)block,res,nextFreeBlock=0;

	res=EepromBlockExists(block->id,&eepromAddr,&nextFreeBlock);
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    78ee:	82 e0       	ldi	r24, 0x02	; 2
		WriteEeprom(eepromAddr++,*srcPtr);
		srcPtr++;	
	}
	
	return 0;
}
    78f0:	0f 90       	pop	r0
    78f2:	0f 90       	pop	r0
    78f4:	0f 90       	pop	r0
    78f6:	df 91       	pop	r29
    78f8:	cf 91       	pop	r28
    78fa:	1f 91       	pop	r17
    78fc:	0f 91       	pop	r16
    78fe:	ff 90       	pop	r15
    7900:	ef 90       	pop	r14
    7902:	08 95       	ret

00007904 <EepromReadBlock>:
 * Returns: 
 *  0x00 = Success
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 */
char EepromReadBlock(unsigned int blockId,struct EepromBlockStruct *block){	
    7904:	cf 92       	push	r12
    7906:	df 92       	push	r13
    7908:	ff 92       	push	r15
    790a:	0f 93       	push	r16
    790c:	1f 93       	push	r17
    790e:	cf 93       	push	r28
    7910:	df 93       	push	r29
    7912:	00 d0       	rcall	.+0      	; 0x7914 <EepromReadBlock+0x10>
    7914:	cd b7       	in	r28, 0x3d	; 61
    7916:	de b7       	in	r29, 0x3e	; 62
    7918:	8b 01       	movw	r16, r22
	u16 eepromAddr;
	u8 *blockPtr=(unsigned char *)block;

	u8 res=EepromBlockExists(blockId,&eepromAddr,NULL);
    791a:	40 e0       	ldi	r20, 0x00	; 0
    791c:	50 e0       	ldi	r21, 0x00	; 0
    791e:	be 01       	movw	r22, r28
    7920:	6f 5f       	subi	r22, 0xFF	; 255
    7922:	7f 4f       	sbci	r23, 0xFF	; 255
    7924:	0e 94 e6 3b 	call	0x77cc	; 0x77cc <EepromBlockExists>
    7928:	f8 2e       	mov	r15, r24
	if(res!=0) return res;
    792a:	81 11       	cpse	r24, r1
    792c:	13 c0       	rjmp	.+38     	; 0x7954 <EepromReadBlock+0x50>
    792e:	68 01       	movw	r12, r16
    7930:	80 e2       	ldi	r24, 0x20	; 32
    7932:	c8 0e       	add	r12, r24
    7934:	d1 1c       	adc	r13, r1

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
		*blockPtr=ReadEeprom(eepromAddr++);
    7936:	89 81       	ldd	r24, Y+1	; 0x01
    7938:	9a 81       	ldd	r25, Y+2	; 0x02
    793a:	9c 01       	movw	r18, r24
    793c:	2f 5f       	subi	r18, 0xFF	; 255
    793e:	3f 4f       	sbci	r19, 0xFF	; 255
    7940:	3a 83       	std	Y+2, r19	; 0x02
    7942:	29 83       	std	Y+1, r18	; 0x01
    7944:	0e 94 04 3b 	call	0x7608	; 0x7608 <ReadEeprom>
    7948:	f8 01       	movw	r30, r16
    794a:	81 93       	st	Z+, r24
    794c:	8f 01       	movw	r16, r30
	u8 *blockPtr=(unsigned char *)block;

	u8 res=EepromBlockExists(blockId,&eepromAddr,NULL);
	if(res!=0) return res;

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
    794e:	ec 15       	cp	r30, r12
    7950:	fd 05       	cpc	r31, r13
    7952:	89 f7       	brne	.-30     	; 0x7936 <EepromReadBlock+0x32>
		*blockPtr=ReadEeprom(eepromAddr++);
		blockPtr++;	
	}
	
	return EEPROM_OK;
}
    7954:	8f 2d       	mov	r24, r15
    7956:	0f 90       	pop	r0
    7958:	0f 90       	pop	r0
    795a:	df 91       	pop	r29
    795c:	cf 91       	pop	r28
    795e:	1f 91       	pop	r17
    7960:	0f 91       	pop	r16
    7962:	ff 90       	pop	r15
    7964:	df 90       	pop	r13
    7966:	cf 90       	pop	r12
    7968:	08 95       	ret

0000796a <GetPrngNumber>:
 * Input: Zero=return the next random value. Non-zero=Sets the seed value.
 */
u16 GetPrngNumber(u16 seed){
	static u16 prng_state;
  	
	if(seed!=0) prng_state=seed;
    796a:	00 97       	sbiw	r24, 0x00	; 0
    796c:	21 f0       	breq	.+8      	; 0x7976 <GetPrngNumber+0xc>
    796e:	90 93 cd 0c 	sts	0x0CCD, r25
    7972:	80 93 cc 0c 	sts	0x0CCC, r24
	
	u16 bit  = ((prng_state >> 0) ^ (prng_state >> 2) ^ (prng_state >> 3) ^ (prng_state >> 5) ) & 1;
    7976:	20 91 cc 0c 	lds	r18, 0x0CCC
    797a:	30 91 cd 0c 	lds	r19, 0x0CCD
    797e:	a9 01       	movw	r20, r18
    7980:	56 95       	lsr	r21
    7982:	47 95       	ror	r20
    7984:	56 95       	lsr	r21
    7986:	47 95       	ror	r20
    7988:	c9 01       	movw	r24, r18
    798a:	63 e0       	ldi	r22, 0x03	; 3
    798c:	96 95       	lsr	r25
    798e:	87 95       	ror	r24
    7990:	6a 95       	dec	r22
    7992:	e1 f7       	brne	.-8      	; 0x798c <GetPrngNumber+0x22>
    7994:	84 27       	eor	r24, r20
    7996:	95 27       	eor	r25, r21
    7998:	82 27       	eor	r24, r18
    799a:	93 27       	eor	r25, r19
    799c:	a9 01       	movw	r20, r18
    799e:	75 e0       	ldi	r23, 0x05	; 5
    79a0:	56 95       	lsr	r21
    79a2:	47 95       	ror	r20
    79a4:	7a 95       	dec	r23
    79a6:	e1 f7       	brne	.-8      	; 0x79a0 <GetPrngNumber+0x36>
    79a8:	84 27       	eor	r24, r20
    79aa:	95 27       	eor	r25, r21
	prng_state =  (prng_state >> 1) | (bit << 15);
    79ac:	99 27       	eor	r25, r25
    79ae:	86 95       	lsr	r24
    79b0:	97 95       	ror	r25
    79b2:	88 27       	eor	r24, r24
    79b4:	36 95       	lsr	r19
    79b6:	27 95       	ror	r18
    79b8:	82 2b       	or	r24, r18
    79ba:	93 2b       	or	r25, r19
    79bc:	90 93 cd 0c 	sts	0x0CCD, r25
    79c0:	80 93 cc 0c 	sts	0x0CCC, r24
	return prng_state;   
}
    79c4:	08 95       	ret

000079c6 <PatchCommand00>:
/*
 * Command 00: Set envelope speed per frame +127/-128, 0=no enveloppe
 * Param:
 */
void PatchCommand00(Track* track, char param){
	track->envelopeStep=param;
    79c6:	fc 01       	movw	r30, r24
    79c8:	67 87       	std	Z+15, r22	; 0x0f
    79ca:	08 95       	ret

000079cc <PatchCommand01>:
 * Param:
 */
void PatchCommand01(Track* track, char param){
	(void)track; //to remove unused warning
	#if MIXER_CHAN4_TYPE == 0
		mixer.channels.type.noise.barrel=0x0101;
    79cc:	e0 ed       	ldi	r30, 0xD0	; 208
    79ce:	fc e0       	ldi	r31, 0x0C	; 12
    79d0:	81 e0       	ldi	r24, 0x01	; 1
    79d2:	91 e0       	ldi	r25, 0x01	; 1
    79d4:	95 8b       	std	Z+21, r25	; 0x15
    79d6:	84 8b       	std	Z+20, r24	; 0x14
		mixer.channels.type.noise.params=param;
    79d8:	63 8b       	std	Z+19, r22	; 0x13
    79da:	08 95       	ret

000079dc <PatchCommand05>:
}
/*
 * Command 05: End of note/fx
 * Param:
 */
void PatchCommand05(Track* track, char param){
    79dc:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags&=~(TRACK_FLAGS_PLAYING+TRACK_FLAGS_PRIORITY);	//patchPlaying=false,priority=0	
    79de:	90 81       	ld	r25, Z
    79e0:	9f 75       	andi	r25, 0x5F	; 95
    79e2:	90 83       	st	Z, r25
    79e4:	08 95       	ret

000079e6 <PatchCommand06>:

/*
 * Command 06: Note hold
 * Param:
 */
void PatchCommand06(Track* track, char param){
    79e6:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags|=TRACK_FLAGS_HOLD_ENV; //patchEnvelopeHold=true;
    79e8:	90 81       	ld	r25, Z
    79ea:	90 64       	ori	r25, 0x40	; 64
    79ec:	90 83       	st	Z, r25
    79ee:	08 95       	ret

000079f0 <PatchCommand07>:
 * Command 07: Set envelope volume
 * Param:
 */

void PatchCommand07(Track* track, char param){
	track->envelopeVol=param;
    79f0:	fc 01       	movw	r30, r24
    79f2:	66 87       	std	Z+14, r22	; 0x0e
    79f4:	08 95       	ret

000079f6 <PatchCommand09>:
 * Command 09: Set tremolo level
 * Param:
*/

void PatchCommand09(Track* track, char param){
	track->tremoloLevel=param;
    79f6:	fc 01       	movw	r30, r24
    79f8:	62 87       	std	Z+10, r22	; 0x0a
    79fa:	08 95       	ret

000079fc <PatchCommand10>:
/*
 * Command 10: Set tremolo rate
 * Param:
*/
void PatchCommand10(Track* track, char param){
	track->tremoloRate=param;
    79fc:	fc 01       	movw	r30, r24
    79fe:	63 87       	std	Z+11, r22	; 0x0b
    7a00:	08 95       	ret

00007a02 <PatchCommand11>:
/*
 * Command 11: Pitch slide (linear) 
 * Param: (+/-) half steps to slide to
*/

void PatchCommand11(Track* track, char param){
    7a02:	cf 93       	push	r28
    7a04:	df 93       	push	r29
    7a06:	ec 01       	movw	r28, r24
    7a08:	46 2f       	mov	r20, r22
	//slide to note from current note
	s16 currentStep,targetStep,delta;	
	
	currentStep=pgm_read_word(&(steptable[track->note]));
    7a0a:	29 81       	ldd	r18, Y+1	; 0x01
    7a0c:	30 e0       	ldi	r19, 0x00	; 0
    7a0e:	f9 01       	movw	r30, r18
    7a10:	ee 0f       	add	r30, r30
    7a12:	ff 1f       	adc	r31, r31
    7a14:	e8 5f       	subi	r30, 0xF8	; 248
    7a16:	fc 47       	sbci	r31, 0x7C	; 124
    7a18:	65 91       	lpm	r22, Z+
    7a1a:	74 91       	lpm	r23, Z
	targetStep=pgm_read_word(&(steptable[track->note+param]));	
    7a1c:	f9 01       	movw	r30, r18
    7a1e:	e4 0f       	add	r30, r20
    7a20:	f1 1d       	adc	r31, r1
    7a22:	47 fd       	sbrc	r20, 7
    7a24:	fa 95       	dec	r31
    7a26:	ee 0f       	add	r30, r30
    7a28:	ff 1f       	adc	r31, r31
    7a2a:	e8 5f       	subi	r30, 0xF8	; 248
    7a2c:	fc 47       	sbci	r31, 0x7C	; 124
    7a2e:	85 91       	lpm	r24, Z+
    7a30:	94 91       	lpm	r25, Z
	delta=((targetStep-currentStep)/track->slideSpeed);
    7a32:	86 1b       	sub	r24, r22
    7a34:	97 0b       	sbc	r25, r23
    7a36:	68 85       	ldd	r22, Y+8	; 0x08
    7a38:	70 e0       	ldi	r23, 0x00	; 0
    7a3a:	0e 94 2e 68 	call	0xd05c	; 0xd05c <__divmodhi4>
	if(delta==0)delta++;
    7a3e:	61 15       	cp	r22, r1
    7a40:	71 05       	cpc	r23, r1
    7a42:	11 f4       	brne	.+4      	; 0x7a48 <PatchCommand11+0x46>
    7a44:	61 e0       	ldi	r22, 0x01	; 1
    7a46:	70 e0       	ldi	r23, 0x00	; 0

	mixer.channels.all[track->channel].step+=delta;
    7a48:	ea 81       	ldd	r30, Y+2	; 0x02
    7a4a:	86 e0       	ldi	r24, 0x06	; 6
    7a4c:	e8 9f       	mul	r30, r24
    7a4e:	f0 01       	movw	r30, r0
    7a50:	11 24       	eor	r1, r1
    7a52:	e0 53       	subi	r30, 0x30	; 48
    7a54:	f3 4f       	sbci	r31, 0xF3	; 243
    7a56:	81 81       	ldd	r24, Z+1	; 0x01
    7a58:	92 81       	ldd	r25, Z+2	; 0x02
    7a5a:	86 0f       	add	r24, r22
    7a5c:	97 1f       	adc	r25, r23
    7a5e:	92 83       	std	Z+2, r25	; 0x02
    7a60:	81 83       	std	Z+1, r24	; 0x01
	
	track->slideStep=delta;
    7a62:	7e 83       	std	Y+6, r23	; 0x06
    7a64:	6d 83       	std	Y+5, r22	; 0x05
	track->flags|=TRACK_FLAGS_SLIDING;
    7a66:	88 81       	ld	r24, Y
    7a68:	88 60       	ori	r24, 0x08	; 8
    7a6a:	88 83       	st	Y, r24
	track->slideNote=track->note+param;
    7a6c:	89 81       	ldd	r24, Y+1	; 0x01
    7a6e:	48 0f       	add	r20, r24
    7a70:	4f 83       	std	Y+7, r20	; 0x07
}
    7a72:	df 91       	pop	r29
    7a74:	cf 91       	pop	r28
    7a76:	08 95       	ret

00007a78 <PatchCommand12>:
/*
 * Command 12: Pitch slide speed 
 * Param: slide speed (fixed 4:4)
 */
void PatchCommand12(Track* track, char param){
	track->slideSpeed=param;
    7a78:	fc 01       	movw	r30, r24
    7a7a:	60 87       	std	Z+8, r22	; 0x08
    7a7c:	08 95       	ret

00007a7e <PatchCommand13>:
 *  Command 13: Loop start
 * Description: Defines the start of a loop. Works in conjunction with command 14 (PC_LOOP_END).
 *		 Param: loop count
 */
void PatchCommand13(Track* track, char param){
	track->loopCount=(u8)param;
    7a7e:	fc 01       	movw	r30, r24
    7a80:	64 83       	std	Z+4, r22	; 0x04
    7a82:	08 95       	ret

00007a84 <PatchCommand02>:
/*
 * Command 02: Set wave
 * Param:
 */
void PatchCommand02(Track* track, char param){
	SetMixerWave(track->channel,param);
    7a84:	fc 01       	movw	r30, r24
    7a86:	82 81       	ldd	r24, Z+2	; 0x02
    7a88:	0c 94 5d 41 	jmp	0x82ba	; 0x82ba <SetMixerWave>

00007a8c <PatchCommand03>:
}
/*
 * Command 03: Note up * param
 * Param:
 */
void PatchCommand03(Track* track, char param){
    7a8c:	fc 01       	movw	r30, r24
	track->note+=param;
    7a8e:	91 81       	ldd	r25, Z+1	; 0x01
    7a90:	69 0f       	add	r22, r25
    7a92:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(track->channel,track->note);
    7a94:	82 81       	ldd	r24, Z+2	; 0x02
    7a96:	0c 94 46 41 	jmp	0x828c	; 0x828c <SetMixerNote>

00007a9a <PatchCommand04>:
}
/*
 * Command 04: Note down * param
 * Param:
 */
void PatchCommand04(Track* track, char param){
    7a9a:	fc 01       	movw	r30, r24
	track->note-=param;
    7a9c:	91 81       	ldd	r25, Z+1	; 0x01
    7a9e:	96 1b       	sub	r25, r22
    7aa0:	69 2f       	mov	r22, r25
    7aa2:	91 83       	std	Z+1, r25	; 0x01
	SetMixerNote(track->channel,track->note);
    7aa4:	82 81       	ldd	r24, Z+2	; 0x02
    7aa6:	0c 94 46 41 	jmp	0x828c	; 0x828c <SetMixerNote>

00007aaa <PatchCommand08>:
/*
 * Command 08: Set Note/Pitch
 * Param:
 */

void PatchCommand08(Track* track, char param){
    7aaa:	1f 93       	push	r17
    7aac:	cf 93       	push	r28
    7aae:	df 93       	push	r29
    7ab0:	ec 01       	movw	r28, r24
    7ab2:	16 2f       	mov	r17, r22
	SetMixerNote(track->channel,param);
    7ab4:	8a 81       	ldd	r24, Y+2	; 0x02
    7ab6:	0e 94 46 41 	call	0x828c	; 0x828c <SetMixerNote>
	track->note=param;
    7aba:	19 83       	std	Y+1, r17	; 0x01
	track->flags &= ~(TRACK_FLAGS_SLIDING);	
    7abc:	88 81       	ld	r24, Y
    7abe:	87 7f       	andi	r24, 0xF7	; 247
    7ac0:	88 83       	st	Y, r24
}
    7ac2:	df 91       	pop	r29
    7ac4:	cf 91       	pop	r28
    7ac6:	1f 91       	pop	r17
    7ac8:	08 95       	ret

00007aca <PatchCommand14>:
 *					1,PC_NOTE_DOWN,3,
 *					0,PC_LOOP_END,2,
 *					0,PATCH_END  
 *				};
 */
void PatchCommand14(Track* track, char param){
    7aca:	dc 01       	movw	r26, r24
	if(track->loopCount>0){
    7acc:	14 96       	adiw	r26, 0x04	; 4
    7ace:	8c 91       	ld	r24, X
    7ad0:	14 97       	sbiw	r26, 0x04	; 4
    7ad2:	88 23       	and	r24, r24
    7ad4:	19 f1       	breq	.+70     	; 0x7b1c <PatchCommand14+0x52>
    7ad6:	55 96       	adiw	r26, 0x15	; 21
    7ad8:	2d 91       	ld	r18, X+
    7ada:	3c 91       	ld	r19, X
    7adc:	56 97       	sbiw	r26, 0x16	; 22
		//track->patchCommandStreamPos=track->loopStart;
		if(param!=0){
    7ade:	66 23       	and	r22, r22
    7ae0:	79 f0       	breq	.+30     	; 0x7b00 <PatchCommand14+0x36>
			track->patchCommandStreamPos-=((param+1)*3);
    7ae2:	77 27       	eor	r23, r23
    7ae4:	67 fd       	sbrc	r22, 7
    7ae6:	70 95       	com	r23
    7ae8:	6f 5f       	subi	r22, 0xFF	; 255
    7aea:	7f 4f       	sbci	r23, 0xFF	; 255
    7aec:	ab 01       	movw	r20, r22
    7aee:	44 0f       	add	r20, r20
    7af0:	55 1f       	adc	r21, r21
    7af2:	64 0f       	add	r22, r20
    7af4:	75 1f       	adc	r23, r21
    7af6:	26 1b       	sub	r18, r22
    7af8:	37 0b       	sbc	r19, r23
    7afa:	09 c0       	rjmp	.+18     	; 0x7b0e <PatchCommand14+0x44>
			while(1){
				track->patchCommandStreamPos-=3;
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    7afc:	ef 3f       	cpi	r30, 0xFF	; 255
    7afe:	39 f0       	breq	.+14     	; 0x7b0e <PatchCommand14+0x44>
		if(param!=0){
			track->patchCommandStreamPos-=((param+1)*3);
		}else{
			u8 command;
			while(1){
				track->patchCommandStreamPos-=3;
    7b00:	23 50       	subi	r18, 0x03	; 3
    7b02:	31 09       	sbc	r19, r1
    7b04:	f9 01       	movw	r30, r18
    7b06:	32 97       	sbiw	r30, 0x02	; 2
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
    7b08:	e4 91       	lpm	r30, Z
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    7b0a:	ed 30       	cpi	r30, 0x0D	; 13
    7b0c:	b9 f7       	brne	.-18     	; 0x7afc <PatchCommand14+0x32>
    7b0e:	56 96       	adiw	r26, 0x16	; 22
    7b10:	3c 93       	st	X, r19
    7b12:	2e 93       	st	-X, r18
    7b14:	55 97       	sbiw	r26, 0x15	; 21
			}
		}
		track->loopCount--;
    7b16:	81 50       	subi	r24, 0x01	; 1
    7b18:	14 96       	adiw	r26, 0x04	; 4
    7b1a:	8c 93       	st	X, r24
    7b1c:	08 95       	ret

00007b1e <InitMusicPlayer>:

const Patch *patchPointers;

void InitMusicPlayer(const Patch *patchPointersParam){

	patchPointers=patchPointersParam;
    7b1e:	90 93 71 0d 	sts	0x0D71, r25
    7b22:	80 93 70 0d 	sts	0x0D70, r24

	masterVolume=DEFAULT_MASTER_VOL;
    7b26:	8f e6       	ldi	r24, 0x6F	; 111
    7b28:	80 93 73 0d 	sts	0x0D73, r24
#if MIDI_IN == ENABLED
	InitUartRxBuffer();
	lastMidiInStatus=0;
#endif

	playSong=false;
    7b2c:	10 92 ce 0c 	sts	0x0CCE, r1
    7b30:	eb e0       	ldi	r30, 0x0B	; 11
    7b32:	fd e0       	ldi	r31, 0x0D	; 13

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    7b34:	80 e0       	ldi	r24, 0x00	; 0
		tracks[t].channel=t;
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    7b36:	90 e1       	ldi	r25, 0x10	; 16
		tracks[t].noteVol=0;
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    7b38:	3f ef       	ldi	r19, 0xFF	; 255
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
    7b3a:	28 e1       	ldi	r18, 0x18	; 24
    7b3c:	df 01       	movw	r26, r30
    7b3e:	1e 97       	sbiw	r26, 0x0e	; 14

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].channel=t;
    7b40:	8c 93       	st	X, r24
    7b42:	12 97       	sbiw	r26, 0x02	; 2
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    7b44:	9c 93       	st	X, r25
    7b46:	1d 96       	adiw	r26, 0x0d	; 13
		tracks[t].noteVol=0;
    7b48:	1c 92       	st	X, r1
    7b4a:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    7b4c:	3c 93       	st	X, r19
		tracks[t].patchNo=DEFAULT_PATCH;
    7b4e:	10 82       	st	Z, r1
    7b50:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].tremoloRate=24; //~6hz
    7b52:	2c 93       	st	X, r18
    7b54:	13 97       	sbiw	r26, 0x03	; 3
		tracks[t].slideSpeed=0x10;
    7b56:	9c 93       	st	X, r25
#endif

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    7b58:	8f 5f       	subi	r24, 0xFF	; 255
    7b5a:	77 96       	adiw	r30, 0x17	; 23
    7b5c:	85 30       	cpi	r24, 0x05	; 5
    7b5e:	71 f7       	brne	.-36     	; 0x7b3c <InitMusicPlayer+0x1e>
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
		tracks[t].slideSpeed=0x10;
	}

}
    7b60:	08 95       	ret

00007b62 <StartSong>:

#if MUSIC_ENGINE == MIDI

	void StartSong(const char *song){
    7b62:	eb ef       	ldi	r30, 0xFB	; 251
    7b64:	fc e0       	ldi	r31, 0x0C	; 12
		for(unsigned char t=0;t<CHANNELS;t++){
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    7b66:	3f ef       	ldi	r19, 0xFF	; 255

#if MUSIC_ENGINE == MIDI

	void StartSong(const char *song){
		for(unsigned char t=0;t<CHANNELS;t++){
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    7b68:	20 81       	ld	r18, Z
    7b6a:	2f 77       	andi	r18, 0x7F	; 127
    7b6c:	20 83       	st	Z, r18
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    7b6e:	33 83       	std	Z+3, r19	; 0x03
    7b70:	77 96       	adiw	r30, 0x17	; 23
}

#if MUSIC_ENGINE == MIDI

	void StartSong(const char *song){
		for(unsigned char t=0;t<CHANNELS;t++){
    7b72:	2d e0       	ldi	r18, 0x0D	; 13
    7b74:	ee 36       	cpi	r30, 0x6E	; 110
    7b76:	f2 07       	cpc	r31, r18
    7b78:	b9 f7       	brne	.-18     	; 0x7b68 <StartSong+0x6>
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
		}

		songPos=song+1; //skip first delta-time
    7b7a:	01 96       	adiw	r24, 0x01	; 1
    7b7c:	90 93 78 0d 	sts	0x0D78, r25
    7b80:	80 93 77 0d 	sts	0x0D77, r24
		songStart=song+1;//skip first delta-time
    7b84:	90 93 fa 0c 	sts	0x0CFA, r25
    7b88:	80 93 f9 0c 	sts	0x0CF9, r24
		loopStart=song+1;
    7b8c:	90 93 7a 0d 	sts	0x0D7A, r25
    7b90:	80 93 79 0d 	sts	0x0D79, r24
		nextDeltaTime=0;
    7b94:	10 92 75 0d 	sts	0x0D75, r1
    7b98:	10 92 74 0d 	sts	0x0D74, r1
		currDeltaTime=0;
    7b9c:	10 92 6f 0d 	sts	0x0D6F, r1
    7ba0:	10 92 6e 0d 	sts	0x0D6E, r1
		songSpeed=0;
    7ba4:	10 92 76 0d 	sts	0x0D76, r1

		lastStatus=0;
    7ba8:	10 92 72 0d 	sts	0x0D72, r1
		playSong=true;
    7bac:	81 e0       	ldi	r24, 0x01	; 1
    7bae:	80 93 ce 0c 	sts	0x0CCE, r24
    7bb2:	08 95       	ret

00007bb4 <StopSong>:


void StopSong(){

	for(u8 i=0;i<CHANNELS;i++){
		tracks[i].envelopeStep=-6;
    7bb4:	eb ef       	ldi	r30, 0xFB	; 251
    7bb6:	fc e0       	ldi	r31, 0x0C	; 12
    7bb8:	8a ef       	ldi	r24, 0xFA	; 250
    7bba:	87 87       	std	Z+15, r24	; 0x0f
    7bbc:	86 a3       	std	Z+38, r24	; 0x26
    7bbe:	80 93 38 0d 	sts	0x0D38, r24
    7bc2:	80 93 4f 0d 	sts	0x0D4F, r24
    7bc6:	80 93 66 0d 	sts	0x0D66, r24
	}

	playSong=false;
    7bca:	10 92 ce 0c 	sts	0x0CCE, r1
    7bce:	08 95       	ret

00007bd0 <ReadVarLen>:
}



unsigned int ReadVarLen(const char **songPos)
{
    7bd0:	dc 01       	movw	r26, r24
    unsigned int value;
    unsigned char c;


    if ( (value = pgm_read_byte((*songPos)++)) & 0x80 )
    7bd2:	ed 91       	ld	r30, X+
    7bd4:	fc 91       	ld	r31, X
    7bd6:	11 97       	sbiw	r26, 0x01	; 1
    7bd8:	9f 01       	movw	r18, r30
    7bda:	2f 5f       	subi	r18, 0xFF	; 255
    7bdc:	3f 4f       	sbci	r19, 0xFF	; 255
    7bde:	11 96       	adiw	r26, 0x01	; 1
    7be0:	3c 93       	st	X, r19
    7be2:	2e 93       	st	-X, r18
    7be4:	e4 91       	lpm	r30, Z
    7be6:	e7 fd       	sbrc	r30, 7
    7be8:	03 c0       	rjmp	.+6      	; 0x7bf0 <ReadVarLen+0x20>
    7bea:	8e 2f       	mov	r24, r30
    7bec:	90 e0       	ldi	r25, 0x00	; 0
    7bee:	08 95       	ret
    {
       value &= 0x7F;
    7bf0:	ef 77       	andi	r30, 0x7F	; 127
    7bf2:	8e 2f       	mov	r24, r30
    7bf4:	90 e0       	ldi	r25, 0x00	; 0
       do
       {
         value = (value << 7) + ((c = pgm_read_byte((*songPos)++)) & 0x7F);
    7bf6:	96 95       	lsr	r25
    7bf8:	98 2f       	mov	r25, r24
    7bfa:	88 27       	eor	r24, r24
    7bfc:	97 95       	ror	r25
    7bfe:	87 95       	ror	r24
    7c00:	2f 5f       	subi	r18, 0xFF	; 255
    7c02:	3f 4f       	sbci	r19, 0xFF	; 255
    7c04:	f9 01       	movw	r30, r18
    7c06:	31 97       	sbiw	r30, 0x01	; 1
    7c08:	e4 91       	lpm	r30, Z
    7c0a:	4e 2f       	mov	r20, r30
    7c0c:	4f 77       	andi	r20, 0x7F	; 127
    7c0e:	84 0f       	add	r24, r20
    7c10:	91 1d       	adc	r25, r1
       } while (c & 0x80);
    7c12:	e7 fd       	sbrc	r30, 7
    7c14:	f0 cf       	rjmp	.-32     	; 0x7bf6 <ReadVarLen+0x26>
    7c16:	2d 93       	st	X+, r18
    7c18:	3c 93       	st	X, r19
    }


    return value;
}
    7c1a:	08 95       	ret

00007c1c <TriggerCommon>:




void TriggerCommon(Track* track,u8 patch,u8 volume,u8 note){
    7c1c:	ef 92       	push	r14
    7c1e:	ff 92       	push	r15
    7c20:	0f 93       	push	r16
    7c22:	1f 93       	push	r17
    7c24:	cf 93       	push	r28
    7c26:	df 93       	push	r29
    7c28:	1f 92       	push	r1
    7c2a:	cd b7       	in	r28, 0x3d	; 61
    7c2c:	de b7       	in	r29, 0x3e	; 62
    7c2e:	7c 01       	movw	r14, r24
    7c30:	16 2f       	mov	r17, r22
		
	bool isFx = (track->flags&TRACK_FLAGS_PRIORITY);
    7c32:	fc 01       	movw	r30, r24
    7c34:	80 81       	ld	r24, Z
    7c36:	08 2f       	mov	r16, r24
    7c38:	00 1f       	adc	r16, r16
    7c3a:	00 27       	eor	r16, r16
    7c3c:	00 1f       	adc	r16, r16

	track->envelopeStep=0; 
    7c3e:	17 86       	std	Z+15, r1	; 0x0f
	track->envelopeVol=0xff; 
    7c40:	9f ef       	ldi	r25, 0xFF	; 255
    7c42:	96 87       	std	Z+14, r25	; 0x0e
	track->noteVol=volume;
    7c44:	45 87       	std	Z+13, r20	; 0x0d
	track->patchPlayingTime=0;
    7c46:	14 8a       	std	Z+20, r1	; 0x14
	track->flags&=(~(TRACK_FLAGS_HOLD_ENV|TRACK_FLAGS_SLIDING));
    7c48:	87 7b       	andi	r24, 0xB7	; 183
    7c4a:	80 83       	st	Z, r24
	track->tremoloLevel=0;
    7c4c:	12 86       	std	Z+10, r1	; 0x0a
	track->tremoloPos=0;
    7c4e:	11 86       	std	Z+9, r1	; 0x09
	track->note=note;
    7c50:	21 83       	std	Z+1, r18	; 0x01
	track->loopCount=0;
    7c52:	14 82       	std	Z+4, r1	; 0x04

#if MUSIC_ENGINE == MIDI
	track->expressionVol=DEFAULT_EXPRESSION_VOL;
    7c54:	93 83       	std	Z+3, r25	; 0x03
#endif

	#if SOUND_MIXER == MIXER_TYPE_INLINE

		if(track->channel==3){
    7c56:	82 81       	ldd	r24, Z+2	; 0x02
    7c58:	83 30       	cpi	r24, 0x03	; 3
    7c5a:	69 f4       	brne	.+26     	; 0x7c76 <TriggerCommon+0x5a>
			//noise channel		
			if(!isFx) patch=note;			
    7c5c:	01 11       	cpse	r16, r1
    7c5e:	01 c0       	rjmp	.+2      	; 0x7c62 <TriggerCommon+0x46>
    7c60:	12 2f       	mov	r17, r18
			mixer.channels.type.noise.barrel=0x0101;				
    7c62:	81 e0       	ldi	r24, 0x01	; 1
    7c64:	91 e0       	ldi	r25, 0x01	; 1
    7c66:	90 93 e5 0c 	sts	0x0CE5, r25
    7c6a:	80 93 e4 0c 	sts	0x0CE4, r24
			mixer.channels.type.noise.params=1; //default (15bits,no divider)
    7c6e:	81 e0       	ldi	r24, 0x01	; 1
    7c70:	80 93 e3 0c 	sts	0x0CE3, r24
    7c74:	39 c0       	rjmp	.+114    	; 0x7ce8 <TriggerCommon+0xcc>

		#if SOUND_CHANNEL_5_ENABLE==1		

		}else if(track->channel==4){
    7c76:	84 30       	cpi	r24, 0x04	; 4
    7c78:	69 f5       	brne	.+90     	; 0x7cd4 <TriggerCommon+0xb8>
				//PCM channel					
				mixer.channels.type.pcm.positionFrac=0;
    7c7a:	10 92 eb 0c 	sts	0x0CEB, r1
				const char *pos=(const char*)pgm_read_word(&(patchPointers[patch].pcmData));
    7c7e:	80 91 70 0d 	lds	r24, 0x0D70
    7c82:	90 91 71 0d 	lds	r25, 0x0D71
    7c86:	f9 e0       	ldi	r31, 0x09	; 9
    7c88:	6f 9f       	mul	r22, r31
    7c8a:	80 0d       	add	r24, r0
    7c8c:	91 1d       	adc	r25, r1
    7c8e:	11 24       	eor	r1, r1
    7c90:	fc 01       	movw	r30, r24
    7c92:	31 96       	adiw	r30, 0x01	; 1
    7c94:	a5 91       	lpm	r26, Z+
    7c96:	b4 91       	lpm	r27, Z
				mixer.channels.type.pcm.position=pos;				
    7c98:	b0 93 ed 0c 	sts	0x0CED, r27
    7c9c:	a0 93 ec 0c 	sts	0x0CEC, r26
				mixer.pcmLoopLenght=pgm_read_word(&(patchPointers[patch].loopEnd))-pgm_read_word(&(patchPointers[patch].loopStart));
    7ca0:	ac 01       	movw	r20, r24
    7ca2:	49 5f       	subi	r20, 0xF9	; 249
    7ca4:	5f 4f       	sbci	r21, 0xFF	; 255
    7ca6:	fa 01       	movw	r30, r20
    7ca8:	65 91       	lpm	r22, Z+
    7caa:	74 91       	lpm	r23, Z
    7cac:	05 96       	adiw	r24, 0x05	; 5
    7cae:	fc 01       	movw	r30, r24
    7cb0:	85 91       	lpm	r24, Z+
    7cb2:	94 91       	lpm	r25, Z
    7cb4:	68 1b       	sub	r22, r24
    7cb6:	79 0b       	sbc	r23, r25
    7cb8:	70 93 ef 0c 	sts	0x0CEF, r23
    7cbc:	60 93 ee 0c 	sts	0x0CEE, r22
				mixer.pcmLoopEnd=pos+pgm_read_word(&(patchPointers[patch].loopEnd));
    7cc0:	fa 01       	movw	r30, r20
    7cc2:	85 91       	lpm	r24, Z+
    7cc4:	94 91       	lpm	r25, Z
    7cc6:	a8 0f       	add	r26, r24
    7cc8:	b9 1f       	adc	r27, r25
    7cca:	b0 93 f1 0c 	sts	0x0CF1, r27
    7cce:	a0 93 f0 0c 	sts	0x0CF0, r26
    7cd2:	05 c0       	rjmp	.+10     	; 0x7cde <TriggerCommon+0xc2>
				SetMixerNote(track->channel,note);
		#endif	

		}else{					
			//wave channels					
			SetMixerWave(track->channel,0);//default wave
    7cd4:	60 e0       	ldi	r22, 0x00	; 0
    7cd6:	29 83       	std	Y+1, r18	; 0x01
    7cd8:	0e 94 5d 41 	call	0x82ba	; 0x82ba <SetMixerWave>
			SetMixerNote(track->channel,note);
    7cdc:	29 81       	ldd	r18, Y+1	; 0x01
    7cde:	62 2f       	mov	r22, r18
    7ce0:	f7 01       	movw	r30, r14
    7ce2:	82 81       	ldd	r24, Z+2	; 0x02
    7ce4:	0e 94 46 41 	call	0x828c	; 0x828c <SetMixerNote>
		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
		track->fxPatchNo=patch;
    7ce8:	f7 01       	movw	r30, r14

		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
    7cea:	00 23       	and	r16, r16
    7cec:	11 f0       	breq	.+4      	; 0x7cf2 <TriggerCommon+0xd6>
		track->fxPatchNo=patch;
    7cee:	11 8b       	std	Z+17, r17	; 0x11
    7cf0:	01 c0       	rjmp	.+2      	; 0x7cf4 <TriggerCommon+0xd8>
	}else{
		track->patchNo=patch;	
    7cf2:	10 8b       	std	Z+16, r17	; 0x10
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
    7cf4:	e0 91 70 0d 	lds	r30, 0x0D70
    7cf8:	f0 91 71 0d 	lds	r31, 0x0D71
    7cfc:	39 e0       	ldi	r19, 0x09	; 9
    7cfe:	13 9f       	mul	r17, r19
    7d00:	e0 0d       	add	r30, r0
    7d02:	f1 1d       	adc	r31, r1
    7d04:	11 24       	eor	r1, r1
    7d06:	33 96       	adiw	r30, 0x03	; 3
    7d08:	85 91       	lpm	r24, Z+
    7d0a:	94 91       	lpm	r25, Z
	if(pos==NULL){
		track->patchCommandStreamPos=NULL;
    7d0c:	f7 01       	movw	r30, r14
	}else{
		track->patchNo=patch;	
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
	if(pos==NULL){
    7d0e:	00 97       	sbiw	r24, 0x00	; 0
    7d10:	19 f4       	brne	.+6      	; 0x7d18 <TriggerCommon+0xfc>
		track->patchCommandStreamPos=NULL;
    7d12:	16 8a       	std	Z+22, r1	; 0x16
    7d14:	15 8a       	std	Z+21, r1	; 0x15
    7d16:	08 c0       	rjmp	.+16     	; 0x7d28 <TriggerCommon+0x10c>
	}else{
		track->patchCurrDeltaTime=0;
    7d18:	13 8a       	std	Z+19, r1	; 0x13
		track->patchNextDeltaTime=pgm_read_byte(pos++);
    7d1a:	fc 01       	movw	r30, r24
    7d1c:	24 91       	lpm	r18, Z
    7d1e:	f7 01       	movw	r30, r14
    7d20:	22 8b       	std	Z+18, r18	; 0x12
    7d22:	01 96       	adiw	r24, 0x01	; 1
		track->patchCommandStreamPos=pos;
    7d24:	96 8b       	std	Z+22, r25	; 0x16
    7d26:	85 8b       	std	Z+21, r24	; 0x15
	}

}
    7d28:	0f 90       	pop	r0
    7d2a:	df 91       	pop	r29
    7d2c:	cf 91       	pop	r28
    7d2e:	1f 91       	pop	r17
    7d30:	0f 91       	pop	r16
    7d32:	ff 90       	pop	r15
    7d34:	ef 90       	pop	r14
    7d36:	08 95       	ret

00007d38 <TriggerFx>:

/* Trigger a sound effect.
 * Method allocates the channel based on priority.
 * Retrig: if this fx if already playing on a track, reuse same track.
 */
void TriggerFx(unsigned char patch,unsigned char volume,bool retrig){
    7d38:	cf 93       	push	r28
    7d3a:	df 93       	push	r29
	unsigned char channel;
	
	unsigned char type=(unsigned char)pgm_read_byte(&(patchPointers[patch].type));
    7d3c:	e0 91 70 0d 	lds	r30, 0x0D70
    7d40:	f0 91 71 0d 	lds	r31, 0x0D71
    7d44:	99 e0       	ldi	r25, 0x09	; 9
    7d46:	89 9f       	mul	r24, r25
    7d48:	e0 0d       	add	r30, r0
    7d4a:	f1 1d       	adc	r31, r1
    7d4c:	11 24       	eor	r1, r1
    7d4e:	e4 91       	lpm	r30, Z

	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
    7d50:	e1 30       	cpi	r30, 0x01	; 1
    7d52:	e9 f0       	breq	.+58     	; 0x7d8e <TriggerFx+0x56>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
    7d54:	e2 30       	cpi	r30, 0x02	; 2
    7d56:	e9 f0       	breq	.+58     	; 0x7d92 <TriggerFx+0x5a>
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
    7d58:	20 91 12 0d 	lds	r18, 0x0D12
    7d5c:	27 ff       	sbrs	r18, 7
    7d5e:	1d c0       	rjmp	.+58     	; 0x7d9a <TriggerFx+0x62>
    7d60:	20 91 23 0d 	lds	r18, 0x0D23
    7d64:	28 13       	cpse	r18, r24
    7d66:	02 c0       	rjmp	.+4      	; 0x7d6c <TriggerFx+0x34>
    7d68:	41 11       	cpse	r20, r1
    7d6a:	17 c0       	rjmp	.+46     	; 0x7d9a <TriggerFx+0x62>
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
    7d6c:	20 91 29 0d 	lds	r18, 0x0D29
    7d70:	27 ff       	sbrs	r18, 7
    7d72:	11 c0       	rjmp	.+34     	; 0x7d96 <TriggerFx+0x5e>
    7d74:	20 91 3a 0d 	lds	r18, 0x0D3A
    7d78:	28 13       	cpse	r18, r24
    7d7a:	02 c0       	rjmp	.+4      	; 0x7d80 <TriggerFx+0x48>
    7d7c:	41 11       	cpse	r20, r1
    7d7e:	0b c0       	rjmp	.+22     	; 0x7d96 <TriggerFx+0x5e>
		channel=2;
	}else{
		//both channels have fx playing, use the oldest one
		if(tracks[1].patchPlayingTime>tracks[2].patchPlayingTime){
    7d80:	20 91 26 0d 	lds	r18, 0x0D26
    7d84:	90 91 3d 0d 	lds	r25, 0x0D3D
    7d88:	92 17       	cp	r25, r18
    7d8a:	28 f4       	brcc	.+10     	; 0x7d96 <TriggerFx+0x5e>
    7d8c:	06 c0       	rjmp	.+12     	; 0x7d9a <TriggerFx+0x62>
	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
		//noise or PCM channel fx		
		channel=3;
    7d8e:	c3 e0       	ldi	r28, 0x03	; 3
    7d90:	05 c0       	rjmp	.+10     	; 0x7d9c <TriggerFx+0x64>
	}else if(type==2){
		channel=4;
    7d92:	c4 e0       	ldi	r28, 0x04	; 4
    7d94:	03 c0       	rjmp	.+6      	; 0x7d9c <TriggerFx+0x64>
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
		channel=2;
    7d96:	c2 e0       	ldi	r28, 0x02	; 2
    7d98:	01 c0       	rjmp	.+2      	; 0x7d9c <TriggerFx+0x64>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
    7d9a:	c1 e0       	ldi	r28, 0x01	; 1
			channel=2;
		}
	}				

	Track* track=&tracks[channel];
	track->flags=TRACK_FLAGS_PRIORITY; //priority=1;
    7d9c:	97 e1       	ldi	r25, 0x17	; 23
    7d9e:	c9 9f       	mul	r28, r25
    7da0:	e0 01       	movw	r28, r0
    7da2:	11 24       	eor	r1, r1
    7da4:	c5 50       	subi	r28, 0x05	; 5
    7da6:	d3 4f       	sbci	r29, 0xF3	; 243
    7da8:	90 e8       	ldi	r25, 0x80	; 128
    7daa:	98 83       	st	Y, r25
	track->patchCommandStreamPos = NULL;
    7dac:	1e 8a       	std	Y+22, r1	; 0x16
    7dae:	1d 8a       	std	Y+21, r1	; 0x15
	TriggerCommon(track,patch,volume,80);
    7db0:	20 e5       	ldi	r18, 0x50	; 80
    7db2:	46 2f       	mov	r20, r22
    7db4:	68 2f       	mov	r22, r24
    7db6:	ce 01       	movw	r24, r28
    7db8:	0e 94 0e 3e 	call	0x7c1c	; 0x7c1c <TriggerCommon>
	track->flags|=TRACK_FLAGS_PLAYING;
    7dbc:	88 81       	ld	r24, Y
    7dbe:	80 62       	ori	r24, 0x20	; 32
    7dc0:	88 83       	st	Y, r24
}
    7dc2:	df 91       	pop	r29
    7dc4:	cf 91       	pop	r28
    7dc6:	08 95       	ret

00007dc8 <TriggerNote>:


void TriggerNote(unsigned char channel,unsigned char patch,unsigned char note,unsigned char volume){
    7dc8:	cf 93       	push	r28
    7dca:	df 93       	push	r29
	Track* track=&tracks[channel];

	//allow only other music notes 
	if((track->flags&TRACK_FLAGS_PLAYING)==0 || (track->flags&TRACK_FLAGS_PRIORITY)==0){
    7dcc:	a8 2f       	mov	r26, r24
    7dce:	b0 e0       	ldi	r27, 0x00	; 0
    7dd0:	97 e1       	ldi	r25, 0x17	; 23
    7dd2:	89 9f       	mul	r24, r25
    7dd4:	f0 01       	movw	r30, r0
    7dd6:	11 24       	eor	r1, r1
    7dd8:	e5 50       	subi	r30, 0x05	; 5
    7dda:	f3 4f       	sbci	r31, 0xF3	; 243
    7ddc:	80 81       	ld	r24, Z
    7dde:	85 ff       	sbrs	r24, 5
    7de0:	02 c0       	rjmp	.+4      	; 0x7de6 <TriggerNote+0x1e>
    7de2:	87 fd       	sbrc	r24, 7
    7de4:	2e c0       	rjmp	.+92     	; 0x7e42 <TriggerNote+0x7a>
			
		if(volume==0){ //note-off received
    7de6:	21 11       	cpse	r18, r1
    7de8:	18 c0       	rjmp	.+48     	; 0x7e1a <TriggerNote+0x52>

			
			//cut note if there's no envelope & no note hold
			if(track->envelopeStep==0 && !(track->flags&TRACK_FLAGS_HOLD_ENV)){
    7dea:	97 e1       	ldi	r25, 0x17	; 23
    7dec:	9a 9f       	mul	r25, r26
    7dee:	f0 01       	movw	r30, r0
    7df0:	9b 9f       	mul	r25, r27
    7df2:	f0 0d       	add	r31, r0
    7df4:	11 24       	eor	r1, r1
    7df6:	e5 50       	subi	r30, 0x05	; 5
    7df8:	f3 4f       	sbci	r31, 0xF3	; 243
    7dfa:	97 85       	ldd	r25, Z+15	; 0x0f
    7dfc:	91 11       	cpse	r25, r1
    7dfe:	02 c0       	rjmp	.+4      	; 0x7e04 <TriggerNote+0x3c>
    7e00:	86 ff       	sbrs	r24, 6
				track->noteVol=0;
    7e02:	15 86       	std	Z+13, r1	; 0x0d
			}

			track->flags&=(~TRACK_FLAGS_HOLD_ENV);//patchEnvelopeHold=false;
    7e04:	97 e1       	ldi	r25, 0x17	; 23
    7e06:	9a 9f       	mul	r25, r26
    7e08:	f0 01       	movw	r30, r0
    7e0a:	9b 9f       	mul	r25, r27
    7e0c:	f0 0d       	add	r31, r0
    7e0e:	11 24       	eor	r1, r1
    7e10:	e5 50       	subi	r30, 0x05	; 5
    7e12:	f3 4f       	sbci	r31, 0xF3	; 243
    7e14:	8f 7b       	andi	r24, 0xBF	; 191
    7e16:	80 83       	st	Z, r24
    7e18:	14 c0       	rjmp	.+40     	; 0x7e42 <TriggerNote+0x7a>
    7e1a:	82 2f       	mov	r24, r18
    7e1c:	24 2f       	mov	r18, r20
		}else{
		
			track->flags=0;//&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    7e1e:	97 e1       	ldi	r25, 0x17	; 23
    7e20:	9a 9f       	mul	r25, r26
    7e22:	e0 01       	movw	r28, r0
    7e24:	9b 9f       	mul	r25, r27
    7e26:	d0 0d       	add	r29, r0
    7e28:	11 24       	eor	r1, r1
    7e2a:	c5 50       	subi	r28, 0x05	; 5
    7e2c:	d3 4f       	sbci	r29, 0xF3	; 243
    7e2e:	18 82       	st	Y, r1
			track->patchCommandStreamPos = NULL;
    7e30:	1e 8a       	std	Y+22, r1	; 0x16
    7e32:	1d 8a       	std	Y+21, r1	; 0x15
			TriggerCommon(track,patch,volume,note);
    7e34:	48 2f       	mov	r20, r24
    7e36:	ce 01       	movw	r24, r28
    7e38:	0e 94 0e 3e 	call	0x7c1c	; 0x7c1c <TriggerCommon>
			track->flags|=TRACK_FLAGS_PLAYING;
    7e3c:	88 81       	ld	r24, Y
    7e3e:	80 62       	ori	r24, 0x20	; 32
    7e40:	88 83       	st	Y, r24
		}

	}
}
    7e42:	df 91       	pop	r29
    7e44:	cf 91       	pop	r28
    7e46:	08 95       	ret

00007e48 <ProcessMusic>:
	}

#endif


void ProcessMusic(void){
    7e48:	6f 92       	push	r6
    7e4a:	7f 92       	push	r7
    7e4c:	8f 92       	push	r8
    7e4e:	9f 92       	push	r9
    7e50:	af 92       	push	r10
    7e52:	bf 92       	push	r11
    7e54:	cf 92       	push	r12
    7e56:	df 92       	push	r13
    7e58:	ef 92       	push	r14
    7e5a:	ff 92       	push	r15
    7e5c:	0f 93       	push	r16
    7e5e:	1f 93       	push	r17
    7e60:	cf 93       	push	r28
    7e62:	df 93       	push	r29
    7e64:	cb ef       	ldi	r28, 0xFB	; 251
    7e66:	dc e0       	ldi	r29, 0x0C	; 12
    7e68:	00 ed       	ldi	r16, 0xD0	; 208
    7e6a:	1c e0       	ldi	r17, 0x0C	; 12
    7e6c:	d8 01       	movw	r26, r16
    7e6e:	9e 01       	movw	r18, r28
    7e70:	40 e0       	ldi	r20, 0x00	; 0
    7e72:	50 e0       	ldi	r21, 0x00	; 0
    7e74:	ca 01       	movw	r24, r20
    7e76:	85 50       	subi	r24, 0x05	; 5
    7e78:	93 4f       	sbci	r25, 0xF3	; 243
    7e7a:	6c 01       	movw	r12, r24
	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//update envelope
		if(track->envelopeStep!=0){
    7e7c:	fc 01       	movw	r30, r24
    7e7e:	87 85       	ldd	r24, Z+15	; 0x0f
    7e80:	88 23       	and	r24, r24
    7e82:	91 f0       	breq	.+36     	; 0x7ea8 <ProcessMusic+0x60>
			vol=track->envelopeVol+track->envelopeStep;		
    7e84:	66 85       	ldd	r22, Z+14	; 0x0e
    7e86:	99 27       	eor	r25, r25
    7e88:	87 fd       	sbrc	r24, 7
    7e8a:	90 95       	com	r25
    7e8c:	86 0f       	add	r24, r22
    7e8e:	91 1d       	adc	r25, r1
    7e90:	8f 3f       	cpi	r24, 0xFF	; 255
    7e92:	91 05       	cpc	r25, r1
    7e94:	19 f0       	breq	.+6      	; 0x7e9c <ProcessMusic+0x54>
    7e96:	14 f0       	brlt	.+4      	; 0x7e9c <ProcessMusic+0x54>
    7e98:	8f ef       	ldi	r24, 0xFF	; 255
    7e9a:	90 e0       	ldi	r25, 0x00	; 0
    7e9c:	97 ff       	sbrs	r25, 7
    7e9e:	02 c0       	rjmp	.+4      	; 0x7ea4 <ProcessMusic+0x5c>
    7ea0:	80 e0       	ldi	r24, 0x00	; 0
    7ea2:	90 e0       	ldi	r25, 0x00	; 0
			if(vol<0){
				vol=0;			
			}else if(vol>0xff){
				vol=0xff;						
			}
			track->envelopeVol=vol;
    7ea4:	f6 01       	movw	r30, r12
    7ea6:	86 87       	std	Z+14, r24	; 0x0e
		}

		//if volumes reaches zero and no more patch command, explicitly end playing on track
		//if(vol==0 && track->patchCommandStreamPos==NULL) track->flags&=~(TRACK_FLAGS_PLAYING);

		if(track->flags & TRACK_FLAGS_SLIDING){
    7ea8:	f9 01       	movw	r30, r18
    7eaa:	f0 80       	ld	r15, Z
    7eac:	f3 fe       	sbrs	r15, 3
    7eae:	2a c0       	rjmp	.+84     	; 0x7f04 <ProcessMusic+0xbc>

			mixer.channels.all[trackNo].step+=track->slideStep;
    7eb0:	65 81       	ldd	r22, Z+5	; 0x05
    7eb2:	76 81       	ldd	r23, Z+6	; 0x06
    7eb4:	11 96       	adiw	r26, 0x01	; 1
    7eb6:	8d 91       	ld	r24, X+
    7eb8:	9c 91       	ld	r25, X
    7eba:	12 97       	sbiw	r26, 0x02	; 2
    7ebc:	86 0f       	add	r24, r22
    7ebe:	97 1f       	adc	r25, r23
    7ec0:	12 96       	adiw	r26, 0x02	; 2
    7ec2:	9c 93       	st	X, r25
    7ec4:	8e 93       	st	-X, r24
    7ec6:	11 97       	sbiw	r26, 0x01	; 1
			u16 tStep=pgm_read_word(&(steptable[track->slideNote]));
    7ec8:	f6 01       	movw	r30, r12
    7eca:	e7 80       	ldd	r14, Z+7	; 0x07
    7ecc:	ee 2d       	mov	r30, r14
    7ece:	f0 e0       	ldi	r31, 0x00	; 0
    7ed0:	ee 0f       	add	r30, r30
    7ed2:	ff 1f       	adc	r31, r31
    7ed4:	e8 5f       	subi	r30, 0xF8	; 248
    7ed6:	fc 47       	sbci	r31, 0x7C	; 124
    7ed8:	c5 90       	lpm	r12, Z+
    7eda:	d4 90       	lpm	r13, Z

			if((track->slideStep>0 && mixer.channels.all[trackNo].step>=tStep) || 
    7edc:	16 16       	cp	r1, r22
    7ede:	17 06       	cpc	r1, r23
    7ee0:	24 f4       	brge	.+8      	; 0x7eea <ProcessMusic+0xa2>
    7ee2:	8c 15       	cp	r24, r12
    7ee4:	9d 05       	cpc	r25, r13
    7ee6:	30 f4       	brcc	.+12     	; 0x7ef4 <ProcessMusic+0xac>
    7ee8:	0d c0       	rjmp	.+26     	; 0x7f04 <ProcessMusic+0xbc>
    7eea:	67 2b       	or	r22, r23
    7eec:	59 f0       	breq	.+22     	; 0x7f04 <ProcessMusic+0xbc>
				(track->slideStep<0 && mixer.channels.all[trackNo].step<=tStep))
    7eee:	c8 16       	cp	r12, r24
    7ef0:	d9 06       	cpc	r13, r25
    7ef2:	40 f0       	brcs	.+16     	; 0x7f04 <ProcessMusic+0xbc>
			{					
				mixer.channels.all[trackNo].step = tStep;					
    7ef4:	12 96       	adiw	r26, 0x02	; 2
    7ef6:	dc 92       	st	X, r13
    7ef8:	ce 92       	st	-X, r12
    7efa:	11 97       	sbiw	r26, 0x01	; 1
				track->flags &= ~(TRACK_FLAGS_SLIDING);	
    7efc:	8f 2d       	mov	r24, r15
    7efe:	87 7f       	andi	r24, 0xF7	; 247
    7f00:	f9 01       	movw	r30, r18
    7f02:	80 83       	st	Z, r24
    7f04:	49 5e       	subi	r20, 0xE9	; 233
    7f06:	5f 4f       	sbci	r21, 0xFF	; 255
    7f08:	29 5e       	subi	r18, 0xE9	; 233
    7f0a:	3f 4f       	sbci	r19, 0xFF	; 255
    7f0c:	16 96       	adiw	r26, 0x06	; 6
	u8 channel;
	Track* track;


	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    7f0e:	43 37       	cpi	r20, 0x73	; 115
    7f10:	51 05       	cpc	r21, r1
    7f12:	09 f0       	breq	.+2      	; 0x7f16 <ProcessMusic+0xce>
    7f14:	af cf       	rjmp	.-162    	; 0x7e74 <ProcessMusic+0x2c>
	}



	//Process song MIDI notes
	if(playSong){
    7f16:	80 91 ce 0c 	lds	r24, 0x0CCE
    7f1a:	88 23       	and	r24, r24
    7f1c:	09 f4       	brne	.+2      	; 0x7f20 <ProcessMusic+0xd8>
    7f1e:	cc c0       	rjmp	.+408    	; 0x80b8 <ProcessMusic+0x270>
							}else if(c1==CONTROLER_EXPRESSION){
								tracks[channel].expressionVol=c2<<1;
							}else if(c1==CONTROLER_TREMOLO){
								tracks[channel].tremoloLevel=c2<<1;
							}else if(c1==CONTROLER_TREMOLO_RATE){
								tracks[channel].tremoloRate=c2<<1;
    7f20:	57 e1       	ldi	r21, 0x17	; 23
    7f22:	f5 2e       	mov	r15, r21
	if(playSong){
	
		#if MUSIC_ENGINE == MIDI
			
			//process all simultaneous events
			while(currDeltaTime==nextDeltaTime){
    7f24:	80 91 6e 0d 	lds	r24, 0x0D6E
    7f28:	90 91 6f 0d 	lds	r25, 0x0D6F
    7f2c:	20 91 74 0d 	lds	r18, 0x0D74
    7f30:	30 91 75 0d 	lds	r19, 0x0D75
    7f34:	82 17       	cp	r24, r18
    7f36:	93 07       	cpc	r25, r19
    7f38:	09 f0       	breq	.+2      	; 0x7f3c <ProcessMusic+0xf4>
    7f3a:	b9 c0       	rjmp	.+370    	; 0x80ae <ProcessMusic+0x266>

				c1=pgm_read_byte(songPos++);
    7f3c:	20 91 77 0d 	lds	r18, 0x0D77
    7f40:	30 91 78 0d 	lds	r19, 0x0D78
    7f44:	b9 01       	movw	r22, r18
    7f46:	6f 5f       	subi	r22, 0xFF	; 255
    7f48:	7f 4f       	sbci	r23, 0xFF	; 255
    7f4a:	70 93 78 0d 	sts	0x0D78, r23
    7f4e:	60 93 77 0d 	sts	0x0D77, r22
    7f52:	f9 01       	movw	r30, r18
    7f54:	44 91       	lpm	r20, Z
			
				if(c1==0xff){
    7f56:	4f 3f       	cpi	r20, 0xFF	; 255
    7f58:	79 f5       	brne	.+94     	; 0x7fb8 <ProcessMusic+0x170>
					//META data type event
					c1=pgm_read_byte(songPos++);
    7f5a:	a9 01       	movw	r20, r18
    7f5c:	4e 5f       	subi	r20, 0xFE	; 254
    7f5e:	5f 4f       	sbci	r21, 0xFF	; 255
    7f60:	50 93 78 0d 	sts	0x0D78, r21
    7f64:	40 93 77 0d 	sts	0x0D77, r20
    7f68:	fb 01       	movw	r30, r22
    7f6a:	64 91       	lpm	r22, Z

				
					if(c1==0x2f){ //end of song
    7f6c:	6f 32       	cpi	r22, 0x2F	; 47
    7f6e:	19 f4       	brne	.+6      	; 0x7f76 <ProcessMusic+0x12e>
						playSong=false;
    7f70:	10 92 ce 0c 	sts	0x0CCE, r1
						break;	
    7f74:	9c c0       	rjmp	.+312    	; 0x80ae <ProcessMusic+0x266>
					}else if(c1==0x6){ //marker
    7f76:	66 30       	cpi	r22, 0x06	; 6
    7f78:	09 f0       	breq	.+2      	; 0x7f7c <ProcessMusic+0x134>
    7f7a:	8c c0       	rjmp	.+280    	; 0x8094 <ProcessMusic+0x24c>
						c1=pgm_read_byte(songPos++); //read len
    7f7c:	fa 01       	movw	r30, r20
    7f7e:	44 91       	lpm	r20, Z
						c2=pgm_read_byte(songPos++); //read data
    7f80:	c9 01       	movw	r24, r18
    7f82:	04 96       	adiw	r24, 0x04	; 4
    7f84:	90 93 78 0d 	sts	0x0D78, r25
    7f88:	80 93 77 0d 	sts	0x0D77, r24
				
					if(c1==0x2f){ //end of song
						playSong=false;
						break;	
					}else if(c1==0x6){ //marker
						c1=pgm_read_byte(songPos++); //read len
    7f8c:	f9 01       	movw	r30, r18
    7f8e:	33 96       	adiw	r30, 0x03	; 3
						c2=pgm_read_byte(songPos++); //read data
    7f90:	e4 91       	lpm	r30, Z
						if(c2=='S'){ //loop start
    7f92:	e3 35       	cpi	r30, 0x53	; 83
    7f94:	29 f4       	brne	.+10     	; 0x7fa0 <ProcessMusic+0x158>
							loopStart=songPos;
    7f96:	90 93 7a 0d 	sts	0x0D7A, r25
    7f9a:	80 93 79 0d 	sts	0x0D79, r24
    7f9e:	7a c0       	rjmp	.+244    	; 0x8094 <ProcessMusic+0x24c>
						}else if(c2=='E'){//loop end
    7fa0:	e5 34       	cpi	r30, 0x45	; 69
    7fa2:	09 f0       	breq	.+2      	; 0x7fa6 <ProcessMusic+0x15e>
    7fa4:	77 c0       	rjmp	.+238    	; 0x8094 <ProcessMusic+0x24c>
							songPos=loopStart;
    7fa6:	80 91 79 0d 	lds	r24, 0x0D79
    7faa:	90 91 7a 0d 	lds	r25, 0x0D7A
    7fae:	90 93 78 0d 	sts	0x0D78, r25
    7fb2:	80 93 77 0d 	sts	0x0D77, r24
    7fb6:	6e c0       	rjmp	.+220    	; 0x8094 <ProcessMusic+0x24c>
					}
				

				}else{

					if(c1&0x80) lastStatus=c1;					
    7fb8:	47 fd       	sbrc	r20, 7
    7fba:	40 93 72 0d 	sts	0x0D72, r20
					channel=lastStatus&0x0f;
    7fbe:	90 91 72 0d 	lds	r25, 0x0D72
    7fc2:	89 2f       	mov	r24, r25
    7fc4:	8f 70       	andi	r24, 0x0F	; 15
				
					//get next data byte
					//Note: maybe we should not advance the cursor
					//in case we receive an unsupported command				
					if(c1&0x80) c1=pgm_read_byte(songPos++); 
    7fc6:	47 ff       	sbrs	r20, 7
    7fc8:	08 c0       	rjmp	.+16     	; 0x7fda <ProcessMusic+0x192>
    7fca:	2e 5f       	subi	r18, 0xFE	; 254
    7fcc:	3f 4f       	sbci	r19, 0xFF	; 255
    7fce:	30 93 78 0d 	sts	0x0D78, r19
    7fd2:	20 93 77 0d 	sts	0x0D77, r18
    7fd6:	fb 01       	movw	r30, r22
    7fd8:	44 91       	lpm	r20, Z

					switch(lastStatus&0xf0){
    7fda:	90 7f       	andi	r25, 0xF0	; 240
    7fdc:	90 3b       	cpi	r25, 0xB0	; 176
    7fde:	e1 f0       	breq	.+56     	; 0x8018 <ProcessMusic+0x1d0>
    7fe0:	90 3c       	cpi	r25, 0xC0	; 192
    7fe2:	09 f4       	brne	.+2      	; 0x7fe6 <ProcessMusic+0x19e>
    7fe4:	51 c0       	rjmp	.+162    	; 0x8088 <ProcessMusic+0x240>
    7fe6:	90 39       	cpi	r25, 0x90	; 144
    7fe8:	09 f0       	breq	.+2      	; 0x7fec <ProcessMusic+0x1a4>
    7fea:	54 c0       	rjmp	.+168    	; 0x8094 <ProcessMusic+0x24c>

						//note-on
						case 0x90:
							//c1 = note						
							c2=pgm_read_byte(songPos++)<<1; //get volume
    7fec:	e0 91 77 0d 	lds	r30, 0x0D77
    7ff0:	f0 91 78 0d 	lds	r31, 0x0D78
    7ff4:	9f 01       	movw	r18, r30
    7ff6:	2f 5f       	subi	r18, 0xFF	; 255
    7ff8:	3f 4f       	sbci	r19, 0xFF	; 255
    7ffa:	30 93 78 0d 	sts	0x0D78, r19
    7ffe:	20 93 77 0d 	sts	0x0D77, r18
    8002:	24 91       	lpm	r18, Z
    8004:	22 0f       	add	r18, r18
						
							if(tracks[channel].flags|TRACK_FLAGS_ALLOCATED){ //allocated==true
								TriggerNote(channel,tracks[channel].patchNo,c1,c2);
    8006:	f8 9e       	mul	r15, r24
    8008:	f0 01       	movw	r30, r0
    800a:	11 24       	eor	r1, r1
    800c:	e5 50       	subi	r30, 0x05	; 5
    800e:	f3 4f       	sbci	r31, 0xF3	; 243
    8010:	60 89       	ldd	r22, Z+16	; 0x10
    8012:	0e 94 e4 3e 	call	0x7dc8	; 0x7dc8 <TriggerNote>
    8016:	3e c0       	rjmp	.+124    	; 0x8094 <ProcessMusic+0x24c>
							break;

						//controllers
						case 0xb0:
							///c1 = controller #
							c2=pgm_read_byte(songPos++); //get controller value
    8018:	e0 91 77 0d 	lds	r30, 0x0D77
    801c:	f0 91 78 0d 	lds	r31, 0x0D78
    8020:	9f 01       	movw	r18, r30
    8022:	2f 5f       	subi	r18, 0xFF	; 255
    8024:	3f 4f       	sbci	r19, 0xFF	; 255
    8026:	30 93 78 0d 	sts	0x0D78, r19
    802a:	20 93 77 0d 	sts	0x0D77, r18
    802e:	e4 91       	lpm	r30, Z
						
							if(c1==CONTROLER_VOL){
    8030:	47 30       	cpi	r20, 0x07	; 7
    8032:	49 f4       	brne	.+18     	; 0x8046 <ProcessMusic+0x1fe>
								tracks[channel].trackVol=c2<<1;
    8034:	f8 9e       	mul	r15, r24
    8036:	d0 01       	movw	r26, r0
    8038:	11 24       	eor	r1, r1
    803a:	a5 50       	subi	r26, 0x05	; 5
    803c:	b3 4f       	sbci	r27, 0xF3	; 243
    803e:	ee 0f       	add	r30, r30
    8040:	1c 96       	adiw	r26, 0x0c	; 12
    8042:	ec 93       	st	X, r30
    8044:	27 c0       	rjmp	.+78     	; 0x8094 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_EXPRESSION){
    8046:	4b 30       	cpi	r20, 0x0B	; 11
    8048:	49 f4       	brne	.+18     	; 0x805c <ProcessMusic+0x214>
								tracks[channel].expressionVol=c2<<1;
    804a:	f8 9e       	mul	r15, r24
    804c:	d0 01       	movw	r26, r0
    804e:	11 24       	eor	r1, r1
    8050:	a5 50       	subi	r26, 0x05	; 5
    8052:	b3 4f       	sbci	r27, 0xF3	; 243
    8054:	ee 0f       	add	r30, r30
    8056:	13 96       	adiw	r26, 0x03	; 3
    8058:	ec 93       	st	X, r30
    805a:	1c c0       	rjmp	.+56     	; 0x8094 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO){
    805c:	4c 35       	cpi	r20, 0x5C	; 92
    805e:	49 f4       	brne	.+18     	; 0x8072 <ProcessMusic+0x22a>
								tracks[channel].tremoloLevel=c2<<1;
    8060:	f8 9e       	mul	r15, r24
    8062:	d0 01       	movw	r26, r0
    8064:	11 24       	eor	r1, r1
    8066:	a5 50       	subi	r26, 0x05	; 5
    8068:	b3 4f       	sbci	r27, 0xF3	; 243
    806a:	ee 0f       	add	r30, r30
    806c:	1a 96       	adiw	r26, 0x0a	; 10
    806e:	ec 93       	st	X, r30
    8070:	11 c0       	rjmp	.+34     	; 0x8094 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO_RATE){
    8072:	44 36       	cpi	r20, 0x64	; 100
    8074:	79 f4       	brne	.+30     	; 0x8094 <ProcessMusic+0x24c>
								tracks[channel].tremoloRate=c2<<1;
    8076:	f8 9e       	mul	r15, r24
    8078:	d0 01       	movw	r26, r0
    807a:	11 24       	eor	r1, r1
    807c:	a5 50       	subi	r26, 0x05	; 5
    807e:	b3 4f       	sbci	r27, 0xF3	; 243
    8080:	ee 0f       	add	r30, r30
    8082:	1b 96       	adiw	r26, 0x0b	; 11
    8084:	ec 93       	st	X, r30
    8086:	06 c0       	rjmp	.+12     	; 0x8094 <ProcessMusic+0x24c>
							break;

						//program change
						case 0xc0:
							// c1 = patch #						
							tracks[channel].patchNo=c1;
    8088:	f8 9e       	mul	r15, r24
    808a:	f0 01       	movw	r30, r0
    808c:	11 24       	eor	r1, r1
    808e:	e5 50       	subi	r30, 0x05	; 5
    8090:	f3 4f       	sbci	r31, 0xF3	; 243
    8092:	40 8b       	std	Z+16, r20	; 0x10


				}//end if(c1==0xff)

				//read next delta time
				nextDeltaTime=ReadVarLen(&songPos);			
    8094:	87 e7       	ldi	r24, 0x77	; 119
    8096:	9d e0       	ldi	r25, 0x0D	; 13
    8098:	0e 94 e8 3d 	call	0x7bd0	; 0x7bd0 <ReadVarLen>
    809c:	90 93 75 0d 	sts	0x0D75, r25
    80a0:	80 93 74 0d 	sts	0x0D74, r24
				currDeltaTime=0;
    80a4:	10 92 6f 0d 	sts	0x0D6F, r1
    80a8:	10 92 6e 0d 	sts	0x0D6E, r1
    80ac:	3b cf       	rjmp	.-394    	; 0x7f24 <ProcessMusic+0xdc>
					}
				#endif

			}//end while
		
			currDeltaTime++;
    80ae:	01 96       	adiw	r24, 0x01	; 1
    80b0:	90 93 6f 0d 	sts	0x0D6F, r25
    80b4:	80 93 6e 0d 	sts	0x0D6E, r24
    80b8:	94 e0       	ldi	r25, 0x04	; 4
    80ba:	a9 2e       	mov	r10, r25
    80bc:	9d e0       	ldi	r25, 0x0D	; 13
    80be:	b9 2e       	mov	r11, r25
    80c0:	2e e0       	ldi	r18, 0x0E	; 14
    80c2:	c2 2e       	mov	r12, r18
    80c4:	2d e0       	ldi	r18, 0x0D	; 13
    80c6:	d2 2e       	mov	r13, r18
    80c8:	3f e0       	ldi	r19, 0x0F	; 15
    80ca:	e3 2e       	mov	r14, r19
    80cc:	3d e0       	ldi	r19, 0x0D	; 13
    80ce:	f3 2e       	mov	r15, r19
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    80d0:	66 24       	eor	r6, r6
    80d2:	6a 94       	dec	r6
    80d4:	71 2c       	mov	r7, r1
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//process patch command stream
		if((track->flags & TRACK_FLAGS_PLAYING) && (track->patchCommandStreamPos!=NULL) && ((track->flags & TRACK_FLAGS_HOLD_ENV)==0)){
    80d6:	88 81       	ld	r24, Y
    80d8:	85 ff       	sbrs	r24, 5
    80da:	42 c0       	rjmp	.+132    	; 0x8160 <ProcessMusic+0x318>
    80dc:	2d 89       	ldd	r18, Y+21	; 0x15
    80de:	3e 89       	ldd	r19, Y+22	; 0x16
    80e0:	23 2b       	or	r18, r19
    80e2:	09 f4       	brne	.+2      	; 0x80e6 <ProcessMusic+0x29e>
    80e4:	3d c0       	rjmp	.+122    	; 0x8160 <ProcessMusic+0x318>
    80e6:	86 fd       	sbrc	r24, 6
    80e8:	3b c0       	rjmp	.+118    	; 0x8160 <ProcessMusic+0x318>
    80ea:	47 01       	movw	r8, r14
    80ec:	f2 e0       	ldi	r31, 0x02	; 2
    80ee:	8f 1a       	sub	r8, r31
    80f0:	91 08       	sbc	r9, r1

			//process all simultaneous events
			while(track->patchCurrDeltaTime==track->patchNextDeltaTime){
    80f2:	d6 01       	movw	r26, r12
    80f4:	9c 91       	ld	r25, X
    80f6:	f4 01       	movw	r30, r8
    80f8:	80 81       	ld	r24, Z
    80fa:	98 13       	cpse	r25, r24
    80fc:	2e c0       	rjmp	.+92     	; 0x815a <ProcessMusic+0x312>

				c1=pgm_read_byte(track->patchCommandStreamPos++);
    80fe:	ed 89       	ldd	r30, Y+21	; 0x15
    8100:	fe 89       	ldd	r31, Y+22	; 0x16
    8102:	bf 01       	movw	r22, r30
    8104:	6f 5f       	subi	r22, 0xFF	; 255
    8106:	7f 4f       	sbci	r23, 0xFF	; 255
    8108:	7e 8b       	std	Y+22, r23	; 0x16
    810a:	6d 8b       	std	Y+21, r22	; 0x15
    810c:	84 91       	lpm	r24, Z
				if(c1==PATCH_END){
    810e:	8f 3f       	cpi	r24, 0xFF	; 255
    8110:	31 f4       	brne	.+12     	; 0x811e <ProcessMusic+0x2d6>
					//end of stream!
					track->flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    8112:	88 81       	ld	r24, Y
    8114:	8f 77       	andi	r24, 0x7F	; 127
    8116:	88 83       	st	Y, r24
					track->patchCommandStreamPos=NULL;
    8118:	1e 8a       	std	Y+22, r1	; 0x16
    811a:	1d 8a       	std	Y+21, r1	; 0x15
					break;
    811c:	1e c0       	rjmp	.+60     	; 0x815a <ProcessMusic+0x312>

				}else{
					c2=pgm_read_byte(track->patchCommandStreamPos++);
    811e:	9f 01       	movw	r18, r30
    8120:	2e 5f       	subi	r18, 0xFE	; 254
    8122:	3f 4f       	sbci	r19, 0xFF	; 255
    8124:	3e 8b       	std	Y+22, r19	; 0x16
    8126:	2d 8b       	std	Y+21, r18	; 0x15
    8128:	fb 01       	movw	r30, r22
    812a:	64 91       	lpm	r22, Z
					//invoke patch command function
					((PatchCommand)pgm_read_word(&patchCommands[c1]))(track,c2);
    812c:	e8 2f       	mov	r30, r24
    812e:	f0 e0       	ldi	r31, 0x00	; 0
    8130:	ee 0f       	add	r30, r30
    8132:	ff 1f       	adc	r31, r31
    8134:	ec 5f       	subi	r30, 0xFC	; 252
    8136:	fe 4f       	sbci	r31, 0xFE	; 254
    8138:	25 91       	lpm	r18, Z+
    813a:	34 91       	lpm	r19, Z
    813c:	ce 01       	movw	r24, r28
    813e:	f9 01       	movw	r30, r18
    8140:	09 95       	icall
				}

				//read next delta time
				track->patchNextDeltaTime=pgm_read_byte(track->patchCommandStreamPos++);
    8142:	ed 89       	ldd	r30, Y+21	; 0x15
    8144:	fe 89       	ldd	r31, Y+22	; 0x16
    8146:	cf 01       	movw	r24, r30
    8148:	01 96       	adiw	r24, 0x01	; 1
    814a:	9e 8b       	std	Y+22, r25	; 0x16
    814c:	8d 8b       	std	Y+21, r24	; 0x15
    814e:	e4 91       	lpm	r30, Z
    8150:	d4 01       	movw	r26, r8
    8152:	ec 93       	st	X, r30
				track->patchCurrDeltaTime=0;
    8154:	f6 01       	movw	r30, r12
    8156:	10 82       	st	Z, r1
    8158:	cc cf       	rjmp	.-104    	; 0x80f2 <ProcessMusic+0x2aa>
			}

			track->patchCurrDeltaTime++;
    815a:	9f 5f       	subi	r25, 0xFF	; 255
    815c:	d6 01       	movw	r26, r12
    815e:	9c 93       	st	X, r25
		}

		if(track->flags & TRACK_FLAGS_PLAYING){
    8160:	98 81       	ld	r25, Y
    8162:	95 ff       	sbrs	r25, 5
    8164:	6c c0       	rjmp	.+216    	; 0x823e <ProcessMusic+0x3f6>

			if(track->patchPlayingTime<0xff){
    8166:	f7 01       	movw	r30, r14
    8168:	80 81       	ld	r24, Z
    816a:	8f 3f       	cpi	r24, 0xFF	; 255
    816c:	11 f0       	breq	.+4      	; 0x8172 <ProcessMusic+0x32a>
				track->patchPlayingTime++;
    816e:	8f 5f       	subi	r24, 0xFF	; 255
    8170:	80 83       	st	Z, r24
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
    8172:	97 fd       	sbrc	r25, 7
    8174:	04 c0       	rjmp	.+8      	; 0x817e <ProcessMusic+0x336>
    8176:	f7 01       	movw	r30, r14
    8178:	38 97       	sbiw	r30, 0x08	; 8
				//if an FX, use full track volume.
				trackVol=0xff;
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
    817a:	90 81       	ld	r25, Z
    817c:	01 c0       	rjmp	.+2      	; 0x8180 <ProcessMusic+0x338>
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
				//if an FX, use full track volume.
				trackVol=0xff;
    817e:	9f ef       	ldi	r25, 0xFF	; 255
    8180:	f7 01       	movw	r30, r14
    8182:	37 97       	sbiw	r30, 0x07	; 7
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
			}
			if(track->noteVol!=0 && track->envelopeVol!=0 && trackVol!=0 && masterVolume!=0){
    8184:	80 81       	ld	r24, Z
    8186:	88 23       	and	r24, r24
    8188:	09 f4       	brne	.+2      	; 0x818c <ProcessMusic+0x344>
    818a:	4e c0       	rjmp	.+156    	; 0x8228 <ProcessMusic+0x3e0>
    818c:	31 96       	adiw	r30, 0x01	; 1
    818e:	50 81       	ld	r21, Z
    8190:	55 23       	and	r21, r21
    8192:	09 f4       	brne	.+2      	; 0x8196 <ProcessMusic+0x34e>
    8194:	49 c0       	rjmp	.+146    	; 0x8228 <ProcessMusic+0x3e0>
    8196:	99 23       	and	r25, r25
    8198:	09 f4       	brne	.+2      	; 0x819c <ProcessMusic+0x354>
    819a:	46 c0       	rjmp	.+140    	; 0x8228 <ProcessMusic+0x3e0>
    819c:	40 91 73 0d 	lds	r20, 0x0D73
    81a0:	44 23       	and	r20, r20
    81a2:	09 f4       	brne	.+2      	; 0x81a6 <ProcessMusic+0x35e>
    81a4:	41 c0       	rjmp	.+130    	; 0x8228 <ProcessMusic+0x3e0>

				uVol=(track->noteVol*trackVol)+0x100;
    81a6:	89 9f       	mul	r24, r25
    81a8:	c0 01       	movw	r24, r0
    81aa:	11 24       	eor	r1, r1
    81ac:	93 95       	inc	r25
				uVol>>=8;
    81ae:	89 2f       	mov	r24, r25
    81b0:	99 27       	eor	r25, r25
				
				uVol=(uVol*track->envelopeVol)+0x100;
    81b2:	58 9f       	mul	r21, r24
    81b4:	90 01       	movw	r18, r0
    81b6:	59 9f       	mul	r21, r25
    81b8:	30 0d       	add	r19, r0
    81ba:	11 24       	eor	r1, r1
    81bc:	c9 01       	movw	r24, r18
    81be:	93 95       	inc	r25
				uVol>>=8;
    81c0:	89 2f       	mov	r24, r25
    81c2:	99 27       	eor	r25, r25
    81c4:	3b 97       	sbiw	r30, 0x0b	; 11
				
				#if MUSIC_ENGINE == MIDI
					uVol=(uVol*track->expressionVol)+0x100;
    81c6:	50 81       	ld	r21, Z
    81c8:	58 9f       	mul	r21, r24
    81ca:	90 01       	movw	r18, r0
    81cc:	59 9f       	mul	r21, r25
    81ce:	30 0d       	add	r19, r0
    81d0:	11 24       	eor	r1, r1
    81d2:	33 95       	inc	r19
					uVol>>=8;
    81d4:	23 2f       	mov	r18, r19
    81d6:	33 27       	eor	r19, r19
				#endif
				
				uVol=(uVol*masterVolume)+0x100;
    81d8:	42 9f       	mul	r20, r18
    81da:	c0 01       	movw	r24, r0
    81dc:	43 9f       	mul	r20, r19
    81de:	90 0d       	add	r25, r0
    81e0:	11 24       	eor	r1, r1
    81e2:	93 95       	inc	r25
				uVol>>=8;
    81e4:	89 2f       	mov	r24, r25
    81e6:	99 27       	eor	r25, r25
    81e8:	37 96       	adiw	r30, 0x07	; 7

				if(track->tremoloLevel>0){					
    81ea:	20 81       	ld	r18, Z
    81ec:	22 23       	and	r18, r18
    81ee:	f1 f0       	breq	.+60     	; 0x822c <ProcessMusic+0x3e4>
					tmp=pgm_read_byte(&(waves[track->tremoloPos]));
    81f0:	d5 01       	movw	r26, r10
    81f2:	ec 91       	ld	r30, X
    81f4:	f0 e0       	ldi	r31, 0x00	; 0
    81f6:	e0 50       	subi	r30, 0x00	; 0
    81f8:	fb 47       	sbci	r31, 0x7B	; 123
    81fa:	e4 91       	lpm	r30, Z
					tmp-=128; //convert to unsigned
    81fc:	e0 58       	subi	r30, 0x80	; 128

					tVol=(track->tremoloLevel*tmp)+0x100;
    81fe:	2e 9f       	mul	r18, r30
    8200:	f0 01       	movw	r30, r0
    8202:	11 24       	eor	r1, r1
    8204:	f3 95       	inc	r31
					tVol>>=8;
    8206:	ef 2f       	mov	r30, r31
    8208:	ff 27       	eor	r31, r31
					
					uVol=(uVol*(0xff-tVol))+0x100;
    820a:	a3 01       	movw	r20, r6
    820c:	4e 1b       	sub	r20, r30
    820e:	5f 0b       	sbc	r21, r31
    8210:	48 9f       	mul	r20, r24
    8212:	90 01       	movw	r18, r0
    8214:	49 9f       	mul	r20, r25
    8216:	30 0d       	add	r19, r0
    8218:	58 9f       	mul	r21, r24
    821a:	30 0d       	add	r19, r0
    821c:	11 24       	eor	r1, r1
    821e:	c9 01       	movw	r24, r18
    8220:	93 95       	inc	r25
					uVol>>=8;
    8222:	89 2f       	mov	r24, r25
    8224:	99 27       	eor	r25, r25
    8226:	02 c0       	rjmp	.+4      	; 0x822c <ProcessMusic+0x3e4>
				}

			
			}else{
				uVol=0;
    8228:	80 e0       	ldi	r24, 0x00	; 0
    822a:	90 e0       	ldi	r25, 0x00	; 0
			}	

			track->tremoloPos+=track->tremoloRate;	
    822c:	f5 01       	movw	r30, r10
    822e:	30 81       	ld	r19, Z
    8230:	f7 01       	movw	r30, r14
    8232:	39 97       	sbiw	r30, 0x09	; 9
    8234:	20 81       	ld	r18, Z
    8236:	23 0f       	add	r18, r19
    8238:	d5 01       	movw	r26, r10
    823a:	2c 93       	st	X, r18
    823c:	02 c0       	rjmp	.+4      	; 0x8242 <ProcessMusic+0x3fa>

		}else{
			uVol=0;
    823e:	80 e0       	ldi	r24, 0x00	; 0
    8240:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
    8242:	f8 01       	movw	r30, r16
    8244:	80 83       	st	Z, r24
    8246:	67 96       	adiw	r28, 0x17	; 23
    8248:	0a 5f       	subi	r16, 0xFA	; 250
    824a:	1f 4f       	sbci	r17, 0xFF	; 255
    824c:	f7 e1       	ldi	r31, 0x17	; 23
    824e:	af 0e       	add	r10, r31
    8250:	b1 1c       	adc	r11, r1
    8252:	87 e1       	ldi	r24, 0x17	; 23
    8254:	c8 0e       	add	r12, r24
    8256:	d1 1c       	adc	r13, r1
    8258:	97 e1       	ldi	r25, 0x17	; 23
    825a:	e9 0e       	add	r14, r25
    825c:	f1 1c       	adc	r15, r1


	//
	// Process patches command streams & final volume
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    825e:	ad e0       	ldi	r26, 0x0D	; 13
    8260:	ce 36       	cpi	r28, 0x6E	; 110
    8262:	da 07       	cpc	r29, r26
    8264:	09 f0       	breq	.+2      	; 0x8268 <ProcessMusic+0x420>
    8266:	37 cf       	rjmp	.-402    	; 0x80d6 <ProcessMusic+0x28e>
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
	}
	
}
    8268:	df 91       	pop	r29
    826a:	cf 91       	pop	r28
    826c:	1f 91       	pop	r17
    826e:	0f 91       	pop	r16
    8270:	ff 90       	pop	r15
    8272:	ef 90       	pop	r14
    8274:	df 90       	pop	r13
    8276:	cf 90       	pop	r12
    8278:	bf 90       	pop	r11
    827a:	af 90       	pop	r10
    827c:	9f 90       	pop	r9
    827e:	8f 90       	pop	r8
    8280:	7f 90       	pop	r7
    8282:	6f 90       	pop	r6
    8284:	08 95       	ret

00008286 <SetMasterVolume>:
}



void SetMasterVolume(unsigned char vol){
	masterVolume=vol;
    8286:	80 93 73 0d 	sts	0x0D73, r24
    828a:	08 95       	ret

0000828c <SetMixerNote>:
; r22: -MIDI note, 69=A5(440) for waves channels (0,1,2)
;      -Noise params for channel 3
;***********************
.section .text.SetMixerNote
SetMixerNote:
	clr r25
    828c:	99 27       	eor	r25, r25
	clr r23
    828e:	77 27       	eor	r23, r23
	#if SOUND_MIXER == MIXER_TYPE_VSYNC
		cpi r24,3
		brlo set_note_waves
		ret		
	#else
		cpi r24,3
    8290:	83 30       	cpi	r24, 0x03	; 3
		brne set_note_waves		
    8292:	09 f4       	brne	.+2      	; 0x8296 <set_note_waves>
		ret
    8294:	08 95       	ret

00008296 <set_note_waves>:
	#endif
#endif

set_note_waves:
	;get step for note
	ldi ZL,lo8(steptable)
    8296:	e8 e0       	ldi	r30, 0x08	; 8
	ldi ZH,hi8(steptable)
    8298:	f3 e8       	ldi	r31, 0x83	; 131
	lsl r22
    829a:	66 0f       	add	r22, r22
	rol r23
    829c:	77 1f       	adc	r23, r23
	add ZL,r22
    829e:	e6 0f       	add	r30, r22
	adc ZH,r23	
    82a0:	f7 1f       	adc	r31, r23

	lpm r26,Z+
    82a2:	a5 91       	lpm	r26, Z+
	lpm r27,Z
    82a4:	b4 91       	lpm	r27, Z

	ldi ZL,lo8(mixerStruct)
    82a6:	e0 ed       	ldi	r30, 0xD0	; 208
	ldi ZH,hi8(mixerStruct)
    82a8:	fc e0       	ldi	r31, 0x0C	; 12
	ldi r18,CHANNEL_STRUCT_SIZE
    82aa:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24
    82ac:	28 9f       	mul	r18, r24
	add ZL,r0
    82ae:	e0 0d       	add	r30, r0
	adc ZH,r1
    82b0:	f1 1d       	adc	r31, r1
	
	std Z+step_lo,r26
    82b2:	a1 83       	std	Z+1, r26	; 0x01
	std Z+step_hi,r27
    82b4:	b2 83       	std	Z+2, r27	; 0x02
	
	clr r1
    82b6:	11 24       	eor	r1, r1
	

	ret
    82b8:	08 95       	ret

000082ba <SetMixerWave>:
;         Noise channel: 0xfe=7 bit lfsr, 0xff=15 bit lfsr
;                 
;***********************
.section .text.SetMixerWave
SetMixerWave:
	clr r25
    82ba:	99 27       	eor	r25, r25
	clr r23
    82bc:	77 27       	eor	r23, r23

	ldi ZL,lo8(mixerStruct)
    82be:	e0 ed       	ldi	r30, 0xD0	; 208
	ldi ZH,hi8(mixerStruct)
    82c0:	fc e0       	ldi	r31, 0x0C	; 12
	ldi r18,CHANNEL_STRUCT_SIZE
    82c2:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24	
    82c4:	28 9f       	mul	r18, r24
	add ZL,r0
    82c6:	e0 0d       	add	r30, r0
	adc ZH,r1
    82c8:	f1 1d       	adc	r31, r1

#if MIXER_CHAN4_TYPE == 0
	cpi r22,0xfe	;7bit lfsr
    82ca:	6e 3f       	cpi	r22, 0xFE	; 254
	brne smw1
    82cc:	31 f4       	brne	.+12     	; 0x82da <smw1>
	lds r22,tr4_params
    82ce:	60 91 e3 0c 	lds	r22, 0x0CE3
	andi r22,0xfe;
    82d2:	6e 7f       	andi	r22, 0xFE	; 254
	sts tr4_params,r22
    82d4:	60 93 e3 0c 	sts	0x0CE3, r22
	rjmp esmw	
    82d8:	0b c0       	rjmp	.+22     	; 0x82f0 <esmw>

000082da <smw1>:
smw1:
	cpi r22,0xff	;15bit lfsr
    82da:	6f 3f       	cpi	r22, 0xFF	; 255
	brne smw2
    82dc:	31 f4       	brne	.+12     	; 0x82ea <smw2>
	lds r22,tr4_params
    82de:	60 91 e3 0c 	lds	r22, 0x0CE3
	ori r22,0xfe;
    82e2:	6e 6f       	ori	r22, 0xFE	; 254
	sts tr4_params,r22	
    82e4:	60 93 e3 0c 	sts	0x0CE3, r22
	rjmp esmw
    82e8:	03 c0       	rjmp	.+6      	; 0x82f0 <esmw>

000082ea <smw2>:
smw2:
#endif

	ldi r23,hi8(waves)
    82ea:	75 e8       	ldi	r23, 0x85	; 133
	add r23,r22
    82ec:	76 0f       	add	r23, r22
	std Z+samplepos_hi,r23 ;store path No
    82ee:	75 83       	std	Z+5, r23	; 0x05

000082f0 <esmw>:

esmw:
	clr r1	
    82f0:	11 24       	eor	r1, r1
	ret
    82f2:	08 95       	ret
	...

00008300 <DisableSoundEngine>:
; no CPU cycles are consumed.
; C-callable
;*****************************
.section .text.DisableSoundEngine
DisableSoundEngine:	
	ldi r24,0
    8300:	80 e0       	ldi	r24, 0x00	; 0
	sts sound_enabled,r24
    8302:	80 93 cf 0c 	sts	0x0CCF, r24
	ret
    8306:	08 95       	ret

00008308 <steptable>:
    8308:	22 00       	.word	0x0022	; ????
    830a:	24 00       	.word	0x0024	; ????
    830c:	26 00       	.word	0x0026	; ????
    830e:	28 00       	.word	0x0028	; ????
    8310:	2b 00       	.word	0x002b	; ????
    8312:	2d 00       	.word	0x002d	; ????
    8314:	30 00       	.word	0x0030	; ????
    8316:	33 00       	.word	0x0033	; ????
    8318:	36 00       	.word	0x0036	; ????
    831a:	39 00       	.word	0x0039	; ????
    831c:	3d 00       	.word	0x003d	; ????
    831e:	40 00       	.word	0x0040	; ????
    8320:	44 00       	.word	0x0044	; ????
    8322:	48 00       	.word	0x0048	; ????
    8324:	4c 00       	.word	0x004c	; ????
    8326:	51 00       	.word	0x0051	; ????
    8328:	56 00       	.word	0x0056	; ????
    832a:	5b 00       	.word	0x005b	; ????
    832c:	60 00       	.word	0x0060	; ????
    832e:	66 00       	.word	0x0066	; ????
    8330:	6c 00       	.word	0x006c	; ????
    8332:	73 00       	.word	0x0073	; ????
    8334:	79 00       	.word	0x0079	; ????
    8336:	81 00       	.word	0x0081	; ????
    8338:	88 00       	.word	0x0088	; ????
    833a:	90 00       	.word	0x0090	; ????
    833c:	99 00       	.word	0x0099	; ????
    833e:	a2 00       	.word	0x00a2	; ????
    8340:	ac 00       	.word	0x00ac	; ????
    8342:	b6 00       	.word	0x00b6	; ????
    8344:	c1 00       	.word	0x00c1	; ????
    8346:	cc 00       	.word	0x00cc	; ????
    8348:	d8 00       	.word	0x00d8	; ????
    834a:	e5 00       	.word	0x00e5	; ????
    834c:	f3 00       	.word	0x00f3	; ????
    834e:	01 01       	movw	r0, r2
    8350:	10 01       	movw	r2, r0
    8352:	21 01       	movw	r4, r2
    8354:	32 01       	movw	r6, r4
    8356:	44 01       	movw	r8, r8
    8358:	57 01       	movw	r10, r14
    835a:	6c 01       	movw	r12, r24
    835c:	81 01       	movw	r16, r2
    835e:	98 01       	movw	r18, r16
    8360:	b0 01       	movw	r22, r0
    8362:	ca 01       	movw	r24, r20
    8364:	e5 01       	movw	r28, r10
    8366:	02 02       	muls	r16, r18
    8368:	21 02       	muls	r18, r17
    836a:	41 02       	muls	r20, r17
    836c:	64 02       	muls	r22, r20
    836e:	88 02       	muls	r24, r24
    8370:	ae 02       	muls	r26, r30
    8372:	d7 02       	muls	r29, r23
    8374:	03 03       	mulsu	r16, r19
    8376:	30 03       	mulsu	r19, r16
    8378:	61 03       	mulsu	r22, r17
    837a:	94 03       	fmuls	r17, r20
    837c:	cb 03       	fmulsu	r20, r19
    837e:	05 04       	cpc	r0, r5
    8380:	42 04       	cpc	r4, r2
    8382:	83 04       	cpc	r8, r3
    8384:	c7 04       	cpc	r12, r7
    8386:	10 05       	cpc	r17, r0
    8388:	5d 05       	cpc	r21, r13
    838a:	af 05       	cpc	r26, r15
    838c:	05 06       	cpc	r0, r21
    838e:	61 06       	cpc	r6, r17
    8390:	c2 06       	cpc	r12, r18
    8392:	29 07       	cpc	r18, r25
    8394:	96 07       	cpc	r25, r22
    8396:	09 08       	sbc	r0, r9
    8398:	83 08       	sbc	r8, r3
    839a:	05 09       	sbc	r16, r5
    839c:	8e 09       	sbc	r24, r14
    839e:	20 0a       	sbc	r2, r16
    83a0:	ba 0a       	sbc	r11, r26
    83a2:	5d 0b       	sbc	r21, r29
    83a4:	0a 0c       	add	r0, r10
    83a6:	c1 0c       	add	r12, r1
    83a8:	84 0d       	add	r24, r4
    83aa:	51 0e       	add	r5, r17
    83ac:	2b 0f       	add	r18, r27
    83ae:	12 10       	cpse	r1, r2
    83b0:	07 11       	cpse	r16, r7
    83b2:	0a 12       	cpse	r0, r26
    83b4:	1d 13       	cpse	r17, r29
    83b6:	40 14       	cp	r4, r0
    83b8:	74 15       	cp	r23, r4
    83ba:	ba 16       	cp	r11, r26
    83bc:	14 18       	sub	r1, r4
    83be:	83 19       	sub	r24, r3
    83c0:	07 1b       	sub	r16, r23
    83c2:	a3 1c       	adc	r10, r3
    83c4:	57 1e       	adc	r5, r23
    83c6:	24 20       	and	r2, r4
    83c8:	0e 22       	and	r0, r30
    83ca:	14 24       	eor	r1, r4
    83cc:	39 26       	eor	r3, r25
    83ce:	7f 28       	or	r7, r15
    83d0:	e8 2a       	or	r14, r24
    83d2:	75 2d       	mov	r23, r5
    83d4:	29 30       	cpi	r18, 0x09	; 9
    83d6:	06 33       	cpi	r16, 0x36	; 54
    83d8:	0f 36       	cpi	r16, 0x6F	; 111
    83da:	45 39       	cpi	r20, 0x95	; 149
    83dc:	ad 3c       	cpi	r26, 0xCD	; 205
    83de:	49 40       	sbci	r20, 0x09	; 9
    83e0:	1b 44       	sbci	r17, 0x4B	; 75
    83e2:	28 48       	sbci	r18, 0x88	; 136
    83e4:	73 4c       	sbci	r23, 0xC3	; 195
    83e6:	fe 50       	subi	r31, 0x0E	; 14
    83e8:	cf 55       	subi	r28, 0x5F	; 95
    83ea:	ea 5a       	subi	r30, 0xAA	; 170
    83ec:	51 60       	ori	r21, 0x01	; 1
    83ee:	0c 66       	ori	r16, 0x6C	; 108
    83f0:	1d 6c       	ori	r17, 0xCD	; 205
    83f2:	8b 72       	andi	r24, 0x2B	; 43
    83f4:	5a 79       	andi	r21, 0x9A	; 154
    83f6:	92 80       	ldd	r9, Z+2	; 0x02
    83f8:	37 88       	ldd	r3, Z+23	; 0x17
    83fa:	50 90 e5 98 	lds	r5, 0x98E5
    83fe:	fd a1       	ldd	r31, Y+37	; 0x25
    8400:	9f ab       	std	Y+55, r25	; 0x37
    8402:	d3 b5       	in	r29, 0x23	; 35
    8404:	a3 c0       	rjmp	.+326    	; 0x854c <waves+0x4c>
	...

00008500 <waves>:
    8500:	00 03       	mulsu	r16, r16
    8502:	06 09       	sbc	r16, r6
    8504:	0c 10       	cpse	r0, r12
    8506:	13 16       	cp	r1, r19
    8508:	19 1c       	adc	r1, r9
    850a:	1f 22       	and	r1, r31
    850c:	25 28       	or	r2, r5
    850e:	2b 2e       	mov	r2, r27
    8510:	31 33       	cpi	r19, 0x31	; 49
    8512:	36 39       	cpi	r19, 0x96	; 150
    8514:	3c 3f       	cpi	r19, 0xFC	; 252
    8516:	41 44       	sbci	r20, 0x41	; 65
    8518:	47 49       	sbci	r20, 0x97	; 151
    851a:	4c 4e       	sbci	r20, 0xEC	; 236
    851c:	51 53       	subi	r21, 0x31	; 49
    851e:	55 58       	subi	r21, 0x85	; 133
    8520:	5a 5c       	subi	r21, 0xCA	; 202
    8522:	5e 60       	ori	r21, 0x0E	; 14
    8524:	62 64       	ori	r22, 0x42	; 66
    8526:	66 68       	ori	r22, 0x86	; 134
    8528:	6a 6b       	ori	r22, 0xBA	; 186
    852a:	6d 6f       	ori	r22, 0xFD	; 253
    852c:	70 71       	andi	r23, 0x10	; 16
    852e:	73 74       	andi	r23, 0x43	; 67
    8530:	75 76       	andi	r23, 0x65	; 101
    8532:	78 79       	andi	r23, 0x98	; 152
    8534:	7a 7a       	andi	r23, 0xAA	; 170
    8536:	7b 7c       	andi	r23, 0xCB	; 203
    8538:	7d 7d       	andi	r23, 0xDD	; 221
    853a:	7e 7e       	andi	r23, 0xEE	; 238
    853c:	7e 7f       	andi	r23, 0xFE	; 254
    853e:	7f 7f       	andi	r23, 0xFF	; 255
    8540:	7f 7f       	andi	r23, 0xFF	; 255
    8542:	7f 7f       	andi	r23, 0xFF	; 255
    8544:	7e 7e       	andi	r23, 0xEE	; 238
    8546:	7e 7d       	andi	r23, 0xDE	; 222
    8548:	7d 7c       	andi	r23, 0xCD	; 205
    854a:	7b 7a       	andi	r23, 0xAB	; 171
    854c:	7a 79       	andi	r23, 0x9A	; 154
    854e:	78 76       	andi	r23, 0x68	; 104
    8550:	75 74       	andi	r23, 0x45	; 69
    8552:	73 71       	andi	r23, 0x13	; 19
    8554:	70 6f       	ori	r23, 0xF0	; 240
    8556:	6d 6b       	ori	r22, 0xBD	; 189
    8558:	6a 68       	ori	r22, 0x8A	; 138
    855a:	66 64       	ori	r22, 0x46	; 70
    855c:	62 60       	ori	r22, 0x02	; 2
    855e:	5e 5c       	subi	r21, 0xCE	; 206
    8560:	5a 58       	subi	r21, 0x8A	; 138
    8562:	55 53       	subi	r21, 0x35	; 53
    8564:	51 4e       	sbci	r21, 0xE1	; 225
    8566:	4c 49       	sbci	r20, 0x9C	; 156
    8568:	47 44       	sbci	r20, 0x47	; 71
    856a:	41 3f       	cpi	r20, 0xF1	; 241
    856c:	3c 39       	cpi	r19, 0x9C	; 156
    856e:	36 33       	cpi	r19, 0x36	; 54
    8570:	31 2e       	mov	r3, r17
    8572:	2b 28       	or	r2, r11
    8574:	25 22       	and	r2, r21
    8576:	1f 1c       	adc	r1, r15
    8578:	19 16       	cp	r1, r25
    857a:	13 10       	cpse	r1, r3
    857c:	0c 09       	sbc	r16, r12
    857e:	06 03       	mulsu	r16, r22
    8580:	00 fd       	sbrc	r16, 0
    8582:	fa f7       	brpl	.-2      	; 0x8582 <waves+0x82>
    8584:	f4 f0       	brlt	.+60     	; 0x85c2 <waves+0xc2>
    8586:	ed ea       	ldi	r30, 0xAD	; 173
    8588:	e7 e4       	ldi	r30, 0x47	; 71
    858a:	e1 de       	rcall	.-574    	; 0x834e <steptable+0x46>
    858c:	db d8       	rcall	.-3658   	; 0x7744 <ReadControllers+0xa>
    858e:	d5 d2       	rcall	.+1450   	; 0x8b3a <waves+0x63a>
    8590:	cf cd       	rjmp	.-1122   	; 0x8130 <ProcessMusic+0x2e8>
    8592:	ca c7       	rjmp	.+3988   	; 0x9528 <LBPrintByte+0xa>
    8594:	c4 c1       	rjmp	.+904    	; 0x891e <waves+0x41e>
    8596:	bf bc       	out	0x2f, r11	; 47
    8598:	b9 b7       	in	r27, 0x39	; 57
    859a:	b4 b2       	in	r11, 0x14	; 20
    859c:	af ad       	ldd	r26, Y+63	; 0x3f
    859e:	ab a8       	ldd	r10, Y+51	; 0x33
    85a0:	a6 a4       	ldd	r10, Z+46	; 0x2e
    85a2:	a2 a0       	ldd	r10, Z+34	; 0x22
    85a4:	9e 9c       	mul	r9, r14
    85a6:	9a 98       	cbi	0x13, 2	; 19
    85a8:	96 95       	lsr	r25
    85aa:	93 91       	.word	0x9193	; ????
    85ac:	90 8f       	std	Z+24, r25	; 0x18
    85ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    85b0:	8b 8a       	std	Y+19, r8	; 0x13
    85b2:	88 87       	std	Y+8, r24	; 0x08
    85b4:	86 86       	std	Z+14, r8	; 0x0e
    85b6:	85 84       	ldd	r8, Z+13	; 0x0d
    85b8:	83 83       	std	Z+3, r24	; 0x03
    85ba:	82 82       	std	Z+2, r8	; 0x02
    85bc:	82 81       	ldd	r24, Z+2	; 0x02
    85be:	81 81       	ldd	r24, Z+1	; 0x01
    85c0:	81 81       	ldd	r24, Z+1	; 0x01
    85c2:	81 81       	ldd	r24, Z+1	; 0x01
    85c4:	82 82       	std	Z+2, r8	; 0x02
    85c6:	82 83       	std	Z+2, r24	; 0x02
    85c8:	83 84       	ldd	r8, Z+11	; 0x0b
    85ca:	85 86       	std	Z+13, r8	; 0x0d
    85cc:	86 87       	std	Z+14, r24	; 0x0e
    85ce:	88 8a       	std	Y+16, r8	; 0x10
    85d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    85d2:	8d 8f       	std	Y+29, r24	; 0x1d
    85d4:	90 91 93 95 	lds	r25, 0x9593
    85d8:	96 98       	cbi	0x12, 6	; 18
    85da:	9a 9c       	mul	r9, r10
    85dc:	9e a0       	ldd	r9, Y+38	; 0x26
    85de:	a2 a4       	ldd	r10, Z+42	; 0x2a
    85e0:	a6 a8       	ldd	r10, Z+54	; 0x36
    85e2:	ab ad       	ldd	r26, Y+59	; 0x3b
    85e4:	af b2       	in	r10, 0x1f	; 31
    85e6:	b4 b7       	in	r27, 0x34	; 52
    85e8:	b9 bc       	out	0x29, r11	; 41
    85ea:	bf c1       	rjmp	.+894    	; 0x896a <waves+0x46a>
    85ec:	c4 c7       	rjmp	.+3976   	; 0x9576 <LBPrintByte+0x58>
    85ee:	ca cd       	rjmp	.-1132   	; 0x8184 <ProcessMusic+0x33c>
    85f0:	cf d2       	rcall	.+1438   	; 0x8b90 <waves+0x690>
    85f2:	d5 d8       	rcall	.-3670   	; 0x779e <isEepromFormatted>
    85f4:	db de       	rcall	.-586    	; 0x83ac <steptable+0xa4>
    85f6:	e1 e4       	ldi	r30, 0x41	; 65
    85f8:	e7 ea       	ldi	r30, 0xA7	; 167
    85fa:	ed f0       	brhs	.+58     	; 0x8636 <waves+0x136>
    85fc:	f4 f7       	brge	.-4      	; 0x85fa <waves+0xfa>
    85fe:	fa fd       	.word	0xfdfa	; ????
    8600:	80 81       	ld	r24, Z
    8602:	82 83       	std	Z+2, r24	; 0x02
    8604:	84 85       	ldd	r24, Z+12	; 0x0c
    8606:	86 87       	std	Z+14, r24	; 0x0e
    8608:	88 89       	ldd	r24, Y+16	; 0x10
    860a:	8a 8b       	std	Y+18, r24	; 0x12
    860c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    860e:	8e 8f       	std	Y+30, r24	; 0x1e
    8610:	90 91 92 93 	lds	r25, 0x9392
    8614:	94 95       	.word	0x9594	; ????
    8616:	96 97       	sbiw	r26, 0x26	; 38
    8618:	98 99       	sbic	0x13, 0	; 19
    861a:	9a 9b       	sbis	0x13, 2	; 19
    861c:	9c 9d       	mul	r25, r12
    861e:	9e 9f       	mul	r25, r30
    8620:	a0 a1       	ldd	r26, Z+32	; 0x20
    8622:	a2 a3       	std	Z+34, r26	; 0x22
    8624:	a4 a5       	ldd	r26, Z+44	; 0x2c
    8626:	a6 a7       	std	Z+46, r26	; 0x2e
    8628:	a8 a9       	ldd	r26, Y+48	; 0x30
    862a:	aa ab       	std	Y+50, r26	; 0x32
    862c:	ac ad       	ldd	r26, Y+60	; 0x3c
    862e:	ae af       	std	Y+62, r26	; 0x3e
    8630:	b0 b1       	in	r27, 0x00	; 0
    8632:	b2 b3       	in	r27, 0x12	; 18
    8634:	b4 b5       	in	r27, 0x24	; 36
    8636:	b6 b7       	in	r27, 0x36	; 54
    8638:	b8 b9       	out	0x08, r27	; 8
    863a:	ba bb       	out	0x1a, r27	; 26
    863c:	bc bd       	out	0x2c, r27	; 44
    863e:	be bf       	out	0x3e, r27	; 62
    8640:	c0 c1       	rjmp	.+896    	; 0x89c2 <waves+0x4c2>
    8642:	c2 c3       	rjmp	.+1924   	; 0x8dc8 <waves+0x8c8>
    8644:	c4 c5       	rjmp	.+2952   	; 0x91ce <DrawMap+0x16>
    8646:	c6 c7       	rjmp	.+3980   	; 0x95d4 <LBPrintInt+0x54>
    8648:	c8 c9       	rjmp	.-3184   	; 0x79da <PatchCommand01+0xe>
    864a:	ca cb       	rjmp	.-2156   	; 0x7de0 <TriggerNote+0x18>
    864c:	cc cd       	rjmp	.-1128   	; 0x81e6 <ProcessMusic+0x39e>
    864e:	ce cf       	rjmp	.-100    	; 0x85ec <waves+0xec>
    8650:	d0 d1       	rcall	.+928    	; 0x89f2 <waves+0x4f2>
    8652:	d2 d3       	rcall	.+1956   	; 0x8df8 <waves+0x8f8>
    8654:	d4 d5       	rcall	.+2984   	; 0x91fe <DrawMap+0x46>
    8656:	d6 d7       	rcall	.+4012   	; 0x9604 <LBCollides+0x12>
    8658:	d8 d9       	rcall	.-3152   	; 0x7a0a <PatchCommand11+0x8>
    865a:	da db       	rcall	.-2124   	; 0x7e10 <TriggerNote+0x48>
    865c:	dc dd       	rcall	.-1096   	; 0x8216 <ProcessMusic+0x3ce>
    865e:	de df       	rcall	.-68     	; 0x861c <waves+0x11c>
    8660:	e0 e1       	ldi	r30, 0x10	; 16
    8662:	e2 e3       	ldi	r30, 0x32	; 50
    8664:	e4 e5       	ldi	r30, 0x54	; 84
    8666:	e6 e7       	ldi	r30, 0x76	; 118
    8668:	e8 e9       	ldi	r30, 0x98	; 152
    866a:	ea eb       	ldi	r30, 0xBA	; 186
    866c:	ec ed       	ldi	r30, 0xDC	; 220
    866e:	ee ef       	ldi	r30, 0xFE	; 254
    8670:	f0 f1       	brcs	.+124    	; 0x86ee <waves+0x1ee>
    8672:	f2 f3       	brmi	.-4      	; 0x8670 <waves+0x170>
    8674:	f4 f5       	brge	.+124    	; 0x86f2 <waves+0x1f2>
    8676:	f6 f7       	brtc	.-4      	; 0x8674 <waves+0x174>
    8678:	f8 f9       	.word	0xf9f8	; ????
    867a:	fa fb       	.word	0xfbfa	; ????
    867c:	fc fd       	.word	0xfdfc	; ????
    867e:	fe ff       	.word	0xfffe	; ????
    8680:	00 01       	movw	r0, r0
    8682:	02 03       	mulsu	r16, r18
    8684:	04 05       	cpc	r16, r4
    8686:	06 07       	cpc	r16, r22
    8688:	08 09       	sbc	r16, r8
    868a:	0a 0b       	sbc	r16, r26
    868c:	0c 0d       	add	r16, r12
    868e:	0e 0f       	add	r16, r30
    8690:	10 11       	cpse	r17, r0
    8692:	12 13       	cpse	r17, r18
    8694:	14 15       	cp	r17, r4
    8696:	16 17       	cp	r17, r22
    8698:	18 19       	sub	r17, r8
    869a:	1a 1b       	sub	r17, r26
    869c:	1c 1d       	adc	r17, r12
    869e:	1e 1f       	adc	r17, r30
    86a0:	20 21       	and	r18, r0
    86a2:	22 23       	and	r18, r18
    86a4:	24 25       	eor	r18, r4
    86a6:	26 27       	eor	r18, r22
    86a8:	28 29       	or	r18, r8
    86aa:	2a 2b       	or	r18, r26
    86ac:	2c 2d       	mov	r18, r12
    86ae:	2e 2f       	mov	r18, r30
    86b0:	30 31       	cpi	r19, 0x10	; 16
    86b2:	32 33       	cpi	r19, 0x32	; 50
    86b4:	34 35       	cpi	r19, 0x54	; 84
    86b6:	36 37       	cpi	r19, 0x76	; 118
    86b8:	38 39       	cpi	r19, 0x98	; 152
    86ba:	3a 3b       	cpi	r19, 0xBA	; 186
    86bc:	3c 3d       	cpi	r19, 0xDC	; 220
    86be:	3e 3f       	cpi	r19, 0xFE	; 254
    86c0:	40 41       	sbci	r20, 0x10	; 16
    86c2:	42 43       	sbci	r20, 0x32	; 50
    86c4:	44 45       	sbci	r20, 0x54	; 84
    86c6:	46 47       	sbci	r20, 0x76	; 118
    86c8:	48 49       	sbci	r20, 0x98	; 152
    86ca:	4a 4b       	sbci	r20, 0xBA	; 186
    86cc:	4c 4d       	sbci	r20, 0xDC	; 220
    86ce:	4e 4f       	sbci	r20, 0xFE	; 254
    86d0:	50 51       	subi	r21, 0x10	; 16
    86d2:	52 53       	subi	r21, 0x32	; 50
    86d4:	54 55       	subi	r21, 0x54	; 84
    86d6:	56 57       	subi	r21, 0x76	; 118
    86d8:	58 59       	subi	r21, 0x98	; 152
    86da:	5a 5b       	subi	r21, 0xBA	; 186
    86dc:	5c 5d       	subi	r21, 0xDC	; 220
    86de:	5e 5f       	subi	r21, 0xFE	; 254
    86e0:	60 61       	ori	r22, 0x10	; 16
    86e2:	62 63       	ori	r22, 0x32	; 50
    86e4:	64 65       	ori	r22, 0x54	; 84
    86e6:	66 67       	ori	r22, 0x76	; 118
    86e8:	68 69       	ori	r22, 0x98	; 152
    86ea:	6a 6b       	ori	r22, 0xBA	; 186
    86ec:	6c 6d       	ori	r22, 0xDC	; 220
    86ee:	6e 6f       	ori	r22, 0xFE	; 254
    86f0:	70 71       	andi	r23, 0x10	; 16
    86f2:	72 73       	andi	r23, 0x32	; 50
    86f4:	74 75       	andi	r23, 0x54	; 84
    86f6:	76 77       	andi	r23, 0x76	; 118
    86f8:	78 79       	andi	r23, 0x98	; 152
    86fa:	7a 7b       	andi	r23, 0xBA	; 186
    86fc:	7c 7d       	andi	r23, 0xDC	; 220
    86fe:	7e 7f       	andi	r23, 0xFE	; 254
    8700:	00 02       	muls	r16, r16
    8702:	04 06       	cpc	r0, r20
    8704:	08 0a       	sbc	r0, r24
    8706:	0c 0e       	add	r0, r28
    8708:	10 12       	cpse	r1, r16
    870a:	14 16       	cp	r1, r20
    870c:	18 1a       	sub	r1, r24
    870e:	1c 1e       	adc	r1, r28
    8710:	20 22       	and	r2, r16
    8712:	24 26       	eor	r2, r20
    8714:	28 2a       	or	r2, r24
    8716:	2c 2e       	mov	r2, r28
    8718:	30 32       	cpi	r19, 0x20	; 32
    871a:	34 36       	cpi	r19, 0x64	; 100
    871c:	38 3a       	cpi	r19, 0xA8	; 168
    871e:	3c 3e       	cpi	r19, 0xEC	; 236
    8720:	40 42       	sbci	r20, 0x20	; 32
    8722:	44 46       	sbci	r20, 0x64	; 100
    8724:	48 4a       	sbci	r20, 0xA8	; 168
    8726:	4c 4e       	sbci	r20, 0xEC	; 236
    8728:	50 52       	subi	r21, 0x20	; 32
    872a:	54 56       	subi	r21, 0x64	; 100
    872c:	58 5a       	subi	r21, 0xA8	; 168
    872e:	5c 5e       	subi	r21, 0xEC	; 236
    8730:	60 62       	ori	r22, 0x20	; 32
    8732:	64 66       	ori	r22, 0x64	; 100
    8734:	68 6a       	ori	r22, 0xA8	; 168
    8736:	6c 6e       	ori	r22, 0xEC	; 236
    8738:	70 72       	andi	r23, 0x20	; 32
    873a:	74 76       	andi	r23, 0x64	; 100
    873c:	78 7a       	andi	r23, 0xA8	; 168
    873e:	7c 7e       	andi	r23, 0xEC	; 236
    8740:	7f 7d       	andi	r23, 0xDF	; 223
    8742:	7b 79       	andi	r23, 0x9B	; 155
    8744:	77 75       	andi	r23, 0x57	; 87
    8746:	73 71       	andi	r23, 0x13	; 19
    8748:	6f 6d       	ori	r22, 0xDF	; 223
    874a:	6b 69       	ori	r22, 0x9B	; 155
    874c:	67 65       	ori	r22, 0x57	; 87
    874e:	63 61       	ori	r22, 0x13	; 19
    8750:	5f 5d       	subi	r21, 0xDF	; 223
    8752:	5b 59       	subi	r21, 0x9B	; 155
    8754:	57 55       	subi	r21, 0x57	; 87
    8756:	53 51       	subi	r21, 0x13	; 19
    8758:	4f 4d       	sbci	r20, 0xDF	; 223
    875a:	4b 49       	sbci	r20, 0x9B	; 155
    875c:	47 45       	sbci	r20, 0x57	; 87
    875e:	43 41       	sbci	r20, 0x13	; 19
    8760:	3f 3d       	cpi	r19, 0xDF	; 223
    8762:	3b 39       	cpi	r19, 0x9B	; 155
    8764:	37 35       	cpi	r19, 0x57	; 87
    8766:	33 31       	cpi	r19, 0x13	; 19
    8768:	2f 2d       	mov	r18, r15
    876a:	2b 29       	or	r18, r11
    876c:	27 25       	eor	r18, r7
    876e:	23 21       	and	r18, r3
    8770:	1f 1d       	adc	r17, r15
    8772:	1b 19       	sub	r17, r11
    8774:	17 15       	cp	r17, r7
    8776:	13 11       	cpse	r17, r3
    8778:	0f 0d       	add	r16, r15
    877a:	0b 09       	sbc	r16, r11
    877c:	07 05       	cpc	r16, r7
    877e:	03 01       	movw	r0, r6
    8780:	ff fd       	.word	0xfdff	; ????
    8782:	fb f9       	.word	0xf9fb	; ????
    8784:	f7 f5       	brid	.+124    	; 0x8802 <waves+0x302>
    8786:	f3 f1       	brvs	.+124    	; 0x8804 <waves+0x304>
    8788:	ef ed       	ldi	r30, 0xDF	; 223
    878a:	eb e9       	ldi	r30, 0x9B	; 155
    878c:	e7 e5       	ldi	r30, 0x57	; 87
    878e:	e3 e1       	ldi	r30, 0x13	; 19
    8790:	df dd       	rcall	.-1090   	; 0x8350 <steptable+0x48>
    8792:	db d9       	rcall	.-3146   	; 0x7b4a <InitMusicPlayer+0x2c>
    8794:	d7 d5       	rcall	.+2990   	; 0x9344 <FadeIn+0x2>
    8796:	d3 d1       	rcall	.+934    	; 0x8b3e <waves+0x63e>
    8798:	cf cd       	rjmp	.-1122   	; 0x8338 <steptable+0x30>
    879a:	cb c9       	rjmp	.-3178   	; 0x7b32 <InitMusicPlayer+0x14>
    879c:	c7 c5       	rjmp	.+2958   	; 0x932c <doFade+0x6>
    879e:	c3 c1       	rjmp	.+902    	; 0x8b26 <waves+0x626>
    87a0:	bf bd       	out	0x2f, r27	; 47
    87a2:	bb b9       	out	0x0b, r27	; 11
    87a4:	b7 b5       	in	r27, 0x27	; 39
    87a6:	b3 b1       	in	r27, 0x03	; 3
    87a8:	af ad       	ldd	r26, Y+63	; 0x3f
    87aa:	ab a9       	ldd	r26, Y+51	; 0x33
    87ac:	a7 a5       	ldd	r26, Z+47	; 0x2f
    87ae:	a3 a1       	ldd	r26, Z+35	; 0x23
    87b0:	9f 9d       	mul	r25, r15
    87b2:	9b 99       	sbic	0x13, 3	; 19
    87b4:	97 95       	ror	r25
    87b6:	93 91       	.word	0x9193	; ????
    87b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    87ba:	8b 89       	ldd	r24, Y+19	; 0x13
    87bc:	87 85       	ldd	r24, Z+15	; 0x0f
    87be:	83 81       	ldd	r24, Z+3	; 0x03
    87c0:	80 82       	st	Z, r8
    87c2:	84 86       	std	Z+12, r8	; 0x0c
    87c4:	88 8a       	std	Y+16, r8	; 0x10
    87c6:	8c 8e       	std	Y+28, r8	; 0x1c
    87c8:	90 92 94 96 	sts	0x9694, r9
    87cc:	98 9a       	sbi	0x13, 0	; 19
    87ce:	9c 9e       	mul	r9, r28
    87d0:	a0 a2       	std	Z+32, r10	; 0x20
    87d2:	a4 a6       	std	Z+44, r10	; 0x2c
    87d4:	a8 aa       	std	Y+48, r10	; 0x30
    87d6:	ac ae       	std	Y+60, r10	; 0x3c
    87d8:	b0 b2       	in	r11, 0x10	; 16
    87da:	b4 b6       	in	r11, 0x34	; 52
    87dc:	b8 ba       	out	0x18, r11	; 24
    87de:	bc be       	out	0x3c, r11	; 60
    87e0:	c0 c2       	rjmp	.+1408   	; 0x8d62 <waves+0x862>
    87e2:	c4 c6       	rjmp	.+3464   	; 0x956c <LBPrintByte+0x4e>
    87e4:	c8 ca       	rjmp	.-2672   	; 0x7d76 <TriggerFx+0x3e>
    87e6:	cc ce       	rjmp	.-616    	; 0x8580 <waves+0x80>
    87e8:	d0 d2       	rcall	.+1440   	; 0x8d8a <waves+0x88a>
    87ea:	d4 d6       	rcall	.+3496   	; 0x9594 <LBPrintInt+0x14>
    87ec:	d8 da       	rcall	.-2640   	; 0x7d9e <TriggerFx+0x66>
    87ee:	dc de       	rcall	.-584    	; 0x85a8 <waves+0xa8>
    87f0:	e0 e2       	ldi	r30, 0x20	; 32
    87f2:	e4 e6       	ldi	r30, 0x64	; 100
    87f4:	e8 ea       	ldi	r30, 0xA8	; 168
    87f6:	ec ee       	ldi	r30, 0xEC	; 236
    87f8:	f0 f2       	brcs	.-68     	; 0x87b6 <waves+0x2b6>
    87fa:	f4 f6       	brge	.-68     	; 0x87b8 <waves+0x2b8>
    87fc:	f8 fa       	.word	0xfaf8	; ????
    87fe:	fc fe       	.word	0xfefc	; ????
    8800:	7f 7f       	andi	r23, 0xFF	; 255
    8802:	7f 7f       	andi	r23, 0xFF	; 255
    8804:	7f 7f       	andi	r23, 0xFF	; 255
    8806:	7f 7f       	andi	r23, 0xFF	; 255
    8808:	7f 7f       	andi	r23, 0xFF	; 255
    880a:	7f 7f       	andi	r23, 0xFF	; 255
    880c:	7f 7f       	andi	r23, 0xFF	; 255
    880e:	7f 7f       	andi	r23, 0xFF	; 255
    8810:	7f 7f       	andi	r23, 0xFF	; 255
    8812:	7f 7f       	andi	r23, 0xFF	; 255
    8814:	7f 7f       	andi	r23, 0xFF	; 255
    8816:	7f 7f       	andi	r23, 0xFF	; 255
    8818:	7f 7f       	andi	r23, 0xFF	; 255
    881a:	7f 7f       	andi	r23, 0xFF	; 255
    881c:	7f 7f       	andi	r23, 0xFF	; 255
    881e:	7f 7f       	andi	r23, 0xFF	; 255
    8820:	7f 7f       	andi	r23, 0xFF	; 255
    8822:	7f 7f       	andi	r23, 0xFF	; 255
    8824:	7f 7f       	andi	r23, 0xFF	; 255
    8826:	7f 7f       	andi	r23, 0xFF	; 255
    8828:	7f 7f       	andi	r23, 0xFF	; 255
    882a:	7f 7f       	andi	r23, 0xFF	; 255
    882c:	7f 7f       	andi	r23, 0xFF	; 255
    882e:	7f 7f       	andi	r23, 0xFF	; 255
    8830:	7f 7f       	andi	r23, 0xFF	; 255
    8832:	7f 7f       	andi	r23, 0xFF	; 255
    8834:	7f 7f       	andi	r23, 0xFF	; 255
    8836:	7f 7f       	andi	r23, 0xFF	; 255
    8838:	7f 7f       	andi	r23, 0xFF	; 255
    883a:	7f 7f       	andi	r23, 0xFF	; 255
    883c:	7f 7f       	andi	r23, 0xFF	; 255
    883e:	7f 7f       	andi	r23, 0xFF	; 255
    8840:	80 80       	ld	r8, Z
    8842:	80 80       	ld	r8, Z
    8844:	80 80       	ld	r8, Z
    8846:	80 80       	ld	r8, Z
    8848:	80 80       	ld	r8, Z
    884a:	80 80       	ld	r8, Z
    884c:	80 80       	ld	r8, Z
    884e:	80 80       	ld	r8, Z
    8850:	80 80       	ld	r8, Z
    8852:	80 80       	ld	r8, Z
    8854:	80 80       	ld	r8, Z
    8856:	80 80       	ld	r8, Z
    8858:	80 80       	ld	r8, Z
    885a:	80 80       	ld	r8, Z
    885c:	80 80       	ld	r8, Z
    885e:	80 80       	ld	r8, Z
    8860:	80 80       	ld	r8, Z
    8862:	80 80       	ld	r8, Z
    8864:	80 80       	ld	r8, Z
    8866:	80 80       	ld	r8, Z
    8868:	80 80       	ld	r8, Z
    886a:	80 80       	ld	r8, Z
    886c:	80 80       	ld	r8, Z
    886e:	80 80       	ld	r8, Z
    8870:	80 80       	ld	r8, Z
    8872:	80 80       	ld	r8, Z
    8874:	80 80       	ld	r8, Z
    8876:	80 80       	ld	r8, Z
    8878:	80 80       	ld	r8, Z
    887a:	80 80       	ld	r8, Z
    887c:	80 80       	ld	r8, Z
    887e:	80 80       	ld	r8, Z
    8880:	80 80       	ld	r8, Z
    8882:	80 80       	ld	r8, Z
    8884:	80 80       	ld	r8, Z
    8886:	80 80       	ld	r8, Z
    8888:	80 80       	ld	r8, Z
    888a:	80 80       	ld	r8, Z
    888c:	80 80       	ld	r8, Z
    888e:	80 80       	ld	r8, Z
    8890:	80 80       	ld	r8, Z
    8892:	80 80       	ld	r8, Z
    8894:	80 80       	ld	r8, Z
    8896:	80 80       	ld	r8, Z
    8898:	80 80       	ld	r8, Z
    889a:	80 80       	ld	r8, Z
    889c:	80 80       	ld	r8, Z
    889e:	80 80       	ld	r8, Z
    88a0:	80 80       	ld	r8, Z
    88a2:	80 80       	ld	r8, Z
    88a4:	80 80       	ld	r8, Z
    88a6:	80 80       	ld	r8, Z
    88a8:	80 80       	ld	r8, Z
    88aa:	80 80       	ld	r8, Z
    88ac:	80 80       	ld	r8, Z
    88ae:	80 80       	ld	r8, Z
    88b0:	80 80       	ld	r8, Z
    88b2:	80 80       	ld	r8, Z
    88b4:	80 80       	ld	r8, Z
    88b6:	80 80       	ld	r8, Z
    88b8:	80 80       	ld	r8, Z
    88ba:	80 80       	ld	r8, Z
    88bc:	80 80       	ld	r8, Z
    88be:	80 80       	ld	r8, Z
    88c0:	80 80       	ld	r8, Z
    88c2:	80 80       	ld	r8, Z
    88c4:	80 80       	ld	r8, Z
    88c6:	80 80       	ld	r8, Z
    88c8:	80 80       	ld	r8, Z
    88ca:	80 80       	ld	r8, Z
    88cc:	80 80       	ld	r8, Z
    88ce:	80 80       	ld	r8, Z
    88d0:	80 80       	ld	r8, Z
    88d2:	80 80       	ld	r8, Z
    88d4:	80 80       	ld	r8, Z
    88d6:	80 80       	ld	r8, Z
    88d8:	80 80       	ld	r8, Z
    88da:	80 80       	ld	r8, Z
    88dc:	80 80       	ld	r8, Z
    88de:	80 80       	ld	r8, Z
    88e0:	80 80       	ld	r8, Z
    88e2:	80 80       	ld	r8, Z
    88e4:	80 80       	ld	r8, Z
    88e6:	80 80       	ld	r8, Z
    88e8:	80 80       	ld	r8, Z
    88ea:	80 80       	ld	r8, Z
    88ec:	80 80       	ld	r8, Z
    88ee:	80 80       	ld	r8, Z
    88f0:	80 80       	ld	r8, Z
    88f2:	80 80       	ld	r8, Z
    88f4:	80 80       	ld	r8, Z
    88f6:	80 80       	ld	r8, Z
    88f8:	80 80       	ld	r8, Z
    88fa:	80 80       	ld	r8, Z
    88fc:	80 80       	ld	r8, Z
    88fe:	80 80       	ld	r8, Z
    8900:	7f 7f       	andi	r23, 0xFF	; 255
    8902:	7f 7f       	andi	r23, 0xFF	; 255
    8904:	7f 7f       	andi	r23, 0xFF	; 255
    8906:	7f 7f       	andi	r23, 0xFF	; 255
    8908:	7f 7f       	andi	r23, 0xFF	; 255
    890a:	7f 7f       	andi	r23, 0xFF	; 255
    890c:	7f 7f       	andi	r23, 0xFF	; 255
    890e:	7f 7f       	andi	r23, 0xFF	; 255
    8910:	7f 7f       	andi	r23, 0xFF	; 255
    8912:	7f 7f       	andi	r23, 0xFF	; 255
    8914:	7f 7f       	andi	r23, 0xFF	; 255
    8916:	7f 7f       	andi	r23, 0xFF	; 255
    8918:	7f 7f       	andi	r23, 0xFF	; 255
    891a:	7f 7f       	andi	r23, 0xFF	; 255
    891c:	7f 7f       	andi	r23, 0xFF	; 255
    891e:	7f 7f       	andi	r23, 0xFF	; 255
    8920:	7f 7f       	andi	r23, 0xFF	; 255
    8922:	7f 7f       	andi	r23, 0xFF	; 255
    8924:	7f 7f       	andi	r23, 0xFF	; 255
    8926:	7f 7f       	andi	r23, 0xFF	; 255
    8928:	7f 7f       	andi	r23, 0xFF	; 255
    892a:	7f 7f       	andi	r23, 0xFF	; 255
    892c:	7f 7f       	andi	r23, 0xFF	; 255
    892e:	7f 7f       	andi	r23, 0xFF	; 255
    8930:	7f 7f       	andi	r23, 0xFF	; 255
    8932:	7f 7f       	andi	r23, 0xFF	; 255
    8934:	7f 7f       	andi	r23, 0xFF	; 255
    8936:	7f 7f       	andi	r23, 0xFF	; 255
    8938:	7f 7f       	andi	r23, 0xFF	; 255
    893a:	7f 7f       	andi	r23, 0xFF	; 255
    893c:	7f 7f       	andi	r23, 0xFF	; 255
    893e:	7f 7f       	andi	r23, 0xFF	; 255
    8940:	7f 7f       	andi	r23, 0xFF	; 255
    8942:	7f 7f       	andi	r23, 0xFF	; 255
    8944:	7f 7f       	andi	r23, 0xFF	; 255
    8946:	7f 7f       	andi	r23, 0xFF	; 255
    8948:	7f 7f       	andi	r23, 0xFF	; 255
    894a:	7f 7f       	andi	r23, 0xFF	; 255
    894c:	7f 7f       	andi	r23, 0xFF	; 255
    894e:	7f 7f       	andi	r23, 0xFF	; 255
    8950:	7f 7f       	andi	r23, 0xFF	; 255
    8952:	7f 7f       	andi	r23, 0xFF	; 255
    8954:	7f 7f       	andi	r23, 0xFF	; 255
    8956:	7f 7f       	andi	r23, 0xFF	; 255
    8958:	7f 7f       	andi	r23, 0xFF	; 255
    895a:	7f 7f       	andi	r23, 0xFF	; 255
    895c:	7f 7f       	andi	r23, 0xFF	; 255
    895e:	7f 7f       	andi	r23, 0xFF	; 255
    8960:	7f 7f       	andi	r23, 0xFF	; 255
    8962:	7f 7f       	andi	r23, 0xFF	; 255
    8964:	7f 7f       	andi	r23, 0xFF	; 255
    8966:	7f 7f       	andi	r23, 0xFF	; 255
    8968:	7f 7f       	andi	r23, 0xFF	; 255
    896a:	7f 7f       	andi	r23, 0xFF	; 255
    896c:	7f 7f       	andi	r23, 0xFF	; 255
    896e:	7f 7f       	andi	r23, 0xFF	; 255
    8970:	7f 7f       	andi	r23, 0xFF	; 255
    8972:	7f 7f       	andi	r23, 0xFF	; 255
    8974:	7f 7f       	andi	r23, 0xFF	; 255
    8976:	7f 7f       	andi	r23, 0xFF	; 255
    8978:	7f 7f       	andi	r23, 0xFF	; 255
    897a:	7f 7f       	andi	r23, 0xFF	; 255
    897c:	7f 7f       	andi	r23, 0xFF	; 255
    897e:	7f 7f       	andi	r23, 0xFF	; 255
    8980:	80 80       	ld	r8, Z
    8982:	80 80       	ld	r8, Z
    8984:	80 80       	ld	r8, Z
    8986:	80 80       	ld	r8, Z
    8988:	80 80       	ld	r8, Z
    898a:	80 80       	ld	r8, Z
    898c:	80 80       	ld	r8, Z
    898e:	80 80       	ld	r8, Z
    8990:	80 80       	ld	r8, Z
    8992:	80 80       	ld	r8, Z
    8994:	80 80       	ld	r8, Z
    8996:	80 80       	ld	r8, Z
    8998:	80 80       	ld	r8, Z
    899a:	80 80       	ld	r8, Z
    899c:	80 80       	ld	r8, Z
    899e:	80 80       	ld	r8, Z
    89a0:	80 80       	ld	r8, Z
    89a2:	80 80       	ld	r8, Z
    89a4:	80 80       	ld	r8, Z
    89a6:	80 80       	ld	r8, Z
    89a8:	80 80       	ld	r8, Z
    89aa:	80 80       	ld	r8, Z
    89ac:	80 80       	ld	r8, Z
    89ae:	80 80       	ld	r8, Z
    89b0:	80 80       	ld	r8, Z
    89b2:	80 80       	ld	r8, Z
    89b4:	80 80       	ld	r8, Z
    89b6:	80 80       	ld	r8, Z
    89b8:	80 80       	ld	r8, Z
    89ba:	80 80       	ld	r8, Z
    89bc:	80 80       	ld	r8, Z
    89be:	80 80       	ld	r8, Z
    89c0:	80 80       	ld	r8, Z
    89c2:	80 80       	ld	r8, Z
    89c4:	80 80       	ld	r8, Z
    89c6:	80 80       	ld	r8, Z
    89c8:	80 80       	ld	r8, Z
    89ca:	80 80       	ld	r8, Z
    89cc:	80 80       	ld	r8, Z
    89ce:	80 80       	ld	r8, Z
    89d0:	80 80       	ld	r8, Z
    89d2:	80 80       	ld	r8, Z
    89d4:	80 80       	ld	r8, Z
    89d6:	80 80       	ld	r8, Z
    89d8:	80 80       	ld	r8, Z
    89da:	80 80       	ld	r8, Z
    89dc:	80 80       	ld	r8, Z
    89de:	80 80       	ld	r8, Z
    89e0:	80 80       	ld	r8, Z
    89e2:	80 80       	ld	r8, Z
    89e4:	80 80       	ld	r8, Z
    89e6:	80 80       	ld	r8, Z
    89e8:	80 80       	ld	r8, Z
    89ea:	80 80       	ld	r8, Z
    89ec:	80 80       	ld	r8, Z
    89ee:	80 80       	ld	r8, Z
    89f0:	80 80       	ld	r8, Z
    89f2:	80 80       	ld	r8, Z
    89f4:	80 80       	ld	r8, Z
    89f6:	80 80       	ld	r8, Z
    89f8:	80 80       	ld	r8, Z
    89fa:	80 80       	ld	r8, Z
    89fc:	80 80       	ld	r8, Z
    89fe:	80 80       	ld	r8, Z
    8a00:	7f 7f       	andi	r23, 0xFF	; 255
    8a02:	7f 7f       	andi	r23, 0xFF	; 255
    8a04:	7f 7f       	andi	r23, 0xFF	; 255
    8a06:	7f 7f       	andi	r23, 0xFF	; 255
    8a08:	7f 7f       	andi	r23, 0xFF	; 255
    8a0a:	7f 7f       	andi	r23, 0xFF	; 255
    8a0c:	7f 7f       	andi	r23, 0xFF	; 255
    8a0e:	7f 7f       	andi	r23, 0xFF	; 255
    8a10:	7f 7f       	andi	r23, 0xFF	; 255
    8a12:	7f 7f       	andi	r23, 0xFF	; 255
    8a14:	7f 7f       	andi	r23, 0xFF	; 255
    8a16:	7f 7f       	andi	r23, 0xFF	; 255
    8a18:	7f 7f       	andi	r23, 0xFF	; 255
    8a1a:	7f 7f       	andi	r23, 0xFF	; 255
    8a1c:	7f 7f       	andi	r23, 0xFF	; 255
    8a1e:	7f 7f       	andi	r23, 0xFF	; 255
    8a20:	7f 7f       	andi	r23, 0xFF	; 255
    8a22:	7f 7f       	andi	r23, 0xFF	; 255
    8a24:	7f 7f       	andi	r23, 0xFF	; 255
    8a26:	7f 7f       	andi	r23, 0xFF	; 255
    8a28:	7f 7f       	andi	r23, 0xFF	; 255
    8a2a:	7f 7f       	andi	r23, 0xFF	; 255
    8a2c:	7f 7f       	andi	r23, 0xFF	; 255
    8a2e:	7f 7f       	andi	r23, 0xFF	; 255
    8a30:	7f 7f       	andi	r23, 0xFF	; 255
    8a32:	7f 7f       	andi	r23, 0xFF	; 255
    8a34:	7f 7f       	andi	r23, 0xFF	; 255
    8a36:	7f 7f       	andi	r23, 0xFF	; 255
    8a38:	7f 7f       	andi	r23, 0xFF	; 255
    8a3a:	7f 7f       	andi	r23, 0xFF	; 255
    8a3c:	7f 7f       	andi	r23, 0xFF	; 255
    8a3e:	7f 7f       	andi	r23, 0xFF	; 255
    8a40:	7f 7f       	andi	r23, 0xFF	; 255
    8a42:	7f 7f       	andi	r23, 0xFF	; 255
    8a44:	7f 7f       	andi	r23, 0xFF	; 255
    8a46:	7f 7f       	andi	r23, 0xFF	; 255
    8a48:	7f 7f       	andi	r23, 0xFF	; 255
    8a4a:	7f 7f       	andi	r23, 0xFF	; 255
    8a4c:	7f 7f       	andi	r23, 0xFF	; 255
    8a4e:	7f 7f       	andi	r23, 0xFF	; 255
    8a50:	7f 7f       	andi	r23, 0xFF	; 255
    8a52:	7f 7f       	andi	r23, 0xFF	; 255
    8a54:	7f 7f       	andi	r23, 0xFF	; 255
    8a56:	7f 7f       	andi	r23, 0xFF	; 255
    8a58:	7f 7f       	andi	r23, 0xFF	; 255
    8a5a:	7f 7f       	andi	r23, 0xFF	; 255
    8a5c:	7f 7f       	andi	r23, 0xFF	; 255
    8a5e:	7f 7f       	andi	r23, 0xFF	; 255
    8a60:	7f 7f       	andi	r23, 0xFF	; 255
    8a62:	7f 7f       	andi	r23, 0xFF	; 255
    8a64:	7f 7f       	andi	r23, 0xFF	; 255
    8a66:	7f 7f       	andi	r23, 0xFF	; 255
    8a68:	7f 7f       	andi	r23, 0xFF	; 255
    8a6a:	7f 7f       	andi	r23, 0xFF	; 255
    8a6c:	7f 7f       	andi	r23, 0xFF	; 255
    8a6e:	7f 7f       	andi	r23, 0xFF	; 255
    8a70:	7f 7f       	andi	r23, 0xFF	; 255
    8a72:	7f 7f       	andi	r23, 0xFF	; 255
    8a74:	7f 7f       	andi	r23, 0xFF	; 255
    8a76:	7f 7f       	andi	r23, 0xFF	; 255
    8a78:	7f 7f       	andi	r23, 0xFF	; 255
    8a7a:	7f 7f       	andi	r23, 0xFF	; 255
    8a7c:	7f 7f       	andi	r23, 0xFF	; 255
    8a7e:	7f 7f       	andi	r23, 0xFF	; 255
    8a80:	7f 7f       	andi	r23, 0xFF	; 255
    8a82:	7f 7f       	andi	r23, 0xFF	; 255
    8a84:	7f 7f       	andi	r23, 0xFF	; 255
    8a86:	7f 7f       	andi	r23, 0xFF	; 255
    8a88:	7f 7f       	andi	r23, 0xFF	; 255
    8a8a:	7f 7f       	andi	r23, 0xFF	; 255
    8a8c:	7f 7f       	andi	r23, 0xFF	; 255
    8a8e:	7f 7f       	andi	r23, 0xFF	; 255
    8a90:	7f 7f       	andi	r23, 0xFF	; 255
    8a92:	7f 7f       	andi	r23, 0xFF	; 255
    8a94:	7f 7f       	andi	r23, 0xFF	; 255
    8a96:	7f 7f       	andi	r23, 0xFF	; 255
    8a98:	7f 7f       	andi	r23, 0xFF	; 255
    8a9a:	7f 7f       	andi	r23, 0xFF	; 255
    8a9c:	7f 7f       	andi	r23, 0xFF	; 255
    8a9e:	7f 7f       	andi	r23, 0xFF	; 255
    8aa0:	7f 7f       	andi	r23, 0xFF	; 255
    8aa2:	7f 7f       	andi	r23, 0xFF	; 255
    8aa4:	7f 7f       	andi	r23, 0xFF	; 255
    8aa6:	7f 7f       	andi	r23, 0xFF	; 255
    8aa8:	7f 7f       	andi	r23, 0xFF	; 255
    8aaa:	7f 7f       	andi	r23, 0xFF	; 255
    8aac:	7f 7f       	andi	r23, 0xFF	; 255
    8aae:	7f 7f       	andi	r23, 0xFF	; 255
    8ab0:	7f 7f       	andi	r23, 0xFF	; 255
    8ab2:	7f 7f       	andi	r23, 0xFF	; 255
    8ab4:	7f 7f       	andi	r23, 0xFF	; 255
    8ab6:	7f 7f       	andi	r23, 0xFF	; 255
    8ab8:	7f 7f       	andi	r23, 0xFF	; 255
    8aba:	7f 7f       	andi	r23, 0xFF	; 255
    8abc:	7f 7f       	andi	r23, 0xFF	; 255
    8abe:	7f 7f       	andi	r23, 0xFF	; 255
    8ac0:	80 80       	ld	r8, Z
    8ac2:	80 80       	ld	r8, Z
    8ac4:	80 80       	ld	r8, Z
    8ac6:	80 80       	ld	r8, Z
    8ac8:	80 80       	ld	r8, Z
    8aca:	80 80       	ld	r8, Z
    8acc:	80 80       	ld	r8, Z
    8ace:	80 80       	ld	r8, Z
    8ad0:	80 80       	ld	r8, Z
    8ad2:	80 80       	ld	r8, Z
    8ad4:	80 80       	ld	r8, Z
    8ad6:	80 80       	ld	r8, Z
    8ad8:	80 80       	ld	r8, Z
    8ada:	80 80       	ld	r8, Z
    8adc:	80 80       	ld	r8, Z
    8ade:	80 80       	ld	r8, Z
    8ae0:	80 80       	ld	r8, Z
    8ae2:	80 80       	ld	r8, Z
    8ae4:	80 80       	ld	r8, Z
    8ae6:	80 80       	ld	r8, Z
    8ae8:	80 80       	ld	r8, Z
    8aea:	80 80       	ld	r8, Z
    8aec:	80 80       	ld	r8, Z
    8aee:	80 80       	ld	r8, Z
    8af0:	80 80       	ld	r8, Z
    8af2:	80 80       	ld	r8, Z
    8af4:	80 80       	ld	r8, Z
    8af6:	80 80       	ld	r8, Z
    8af8:	80 80       	ld	r8, Z
    8afa:	80 80       	ld	r8, Z
    8afc:	80 80       	ld	r8, Z
    8afe:	80 80       	ld	r8, Z
    8b00:	03 09       	sbc	r16, r3
    8b02:	13 1e       	adc	r1, r19
    8b04:	28 31       	cpi	r18, 0x18	; 24
    8b06:	3a 40       	sbci	r19, 0x0A	; 10
    8b08:	46 4c       	sbci	r20, 0xC6	; 198
    8b0a:	50 54       	subi	r21, 0x40	; 64
    8b0c:	58 5b       	subi	r21, 0xB8	; 184
    8b0e:	5e 61       	ori	r21, 0x1E	; 30
    8b10:	63 65       	ori	r22, 0x53	; 83
    8b12:	67 69       	ori	r22, 0x97	; 151
    8b14:	6b 6c       	ori	r22, 0xCB	; 203
    8b16:	6e 6f       	ori	r22, 0xFE	; 254
    8b18:	70 71       	andi	r23, 0x10	; 16
    8b1a:	72 73       	andi	r23, 0x32	; 50
    8b1c:	74 75       	andi	r23, 0x54	; 84
    8b1e:	76 77       	andi	r23, 0x76	; 118
    8b20:	77 78       	andi	r23, 0x87	; 135
    8b22:	79 79       	andi	r23, 0x99	; 153
    8b24:	7a 7a       	andi	r23, 0xAA	; 170
    8b26:	7b 7b       	andi	r23, 0xBB	; 187
    8b28:	7c 7c       	andi	r23, 0xCC	; 204
    8b2a:	7c 7d       	andi	r23, 0xDC	; 220
    8b2c:	7d 7d       	andi	r23, 0xDD	; 221
    8b2e:	7e 7e       	andi	r23, 0xEE	; 238
    8b30:	7e 7e       	andi	r23, 0xEE	; 238
    8b32:	7f 7f       	andi	r23, 0xFF	; 255
    8b34:	7f 7f       	andi	r23, 0xFF	; 255
    8b36:	7f 7f       	andi	r23, 0xFF	; 255
    8b38:	7f 7f       	andi	r23, 0xFF	; 255
    8b3a:	7f 7f       	andi	r23, 0xFF	; 255
    8b3c:	7f 7f       	andi	r23, 0xFF	; 255
    8b3e:	7f 7f       	andi	r23, 0xFF	; 255
    8b40:	7f 7f       	andi	r23, 0xFF	; 255
    8b42:	7f 7f       	andi	r23, 0xFF	; 255
    8b44:	7f 7f       	andi	r23, 0xFF	; 255
    8b46:	7f 7f       	andi	r23, 0xFF	; 255
    8b48:	7f 7f       	andi	r23, 0xFF	; 255
    8b4a:	7f 7f       	andi	r23, 0xFF	; 255
    8b4c:	7f 7e       	andi	r23, 0xEF	; 239
    8b4e:	7e 7e       	andi	r23, 0xEE	; 238
    8b50:	7e 7d       	andi	r23, 0xDE	; 222
    8b52:	7d 7d       	andi	r23, 0xDD	; 221
    8b54:	7c 7c       	andi	r23, 0xCC	; 204
    8b56:	7c 7b       	andi	r23, 0xBC	; 188
    8b58:	7b 7a       	andi	r23, 0xAB	; 171
    8b5a:	7a 79       	andi	r23, 0x9A	; 154
    8b5c:	79 78       	andi	r23, 0x89	; 137
    8b5e:	77 77       	andi	r23, 0x77	; 119
    8b60:	76 75       	andi	r23, 0x56	; 86
    8b62:	74 73       	andi	r23, 0x34	; 52
    8b64:	72 71       	andi	r23, 0x12	; 18
    8b66:	70 6f       	ori	r23, 0xF0	; 240
    8b68:	6e 6c       	ori	r22, 0xCE	; 206
    8b6a:	6b 69       	ori	r22, 0x9B	; 155
    8b6c:	67 65       	ori	r22, 0x57	; 87
    8b6e:	63 61       	ori	r22, 0x13	; 19
    8b70:	5e 5b       	subi	r21, 0xBE	; 190
    8b72:	58 54       	subi	r21, 0x48	; 72
    8b74:	50 4c       	sbci	r21, 0xC0	; 192
    8b76:	46 40       	sbci	r20, 0x06	; 6
    8b78:	3a 31       	cpi	r19, 0x1A	; 26
    8b7a:	28 1e       	adc	r2, r24
    8b7c:	13 09       	sbc	r17, r3
    8b7e:	03 00       	.word	0x0003	; ????
    8b80:	c6 cc       	rjmp	.-1652   	; 0x850e <waves+0xe>
    8b82:	d5 db       	rcall	.-2134   	; 0x832e <steptable+0x26>
    8b84:	df e3       	ldi	r29, 0x3F	; 63
    8b86:	e5 e7       	ldi	r30, 0x75	; 117
    8b88:	e9 ea       	ldi	r30, 0xA9	; 169
    8b8a:	eb ec       	ldi	r30, 0xCB	; 203
    8b8c:	ed ee       	ldi	r30, 0xED	; 237
    8b8e:	ef ef       	ldi	r30, 0xFF	; 255
    8b90:	f0 f0       	brcs	.+60     	; 0x8bce <waves+0x6ce>
    8b92:	f0 f1       	brcs	.+124    	; 0x8c10 <waves+0x710>
    8b94:	f1 f1       	breq	.+124    	; 0x8c12 <waves+0x712>
    8b96:	f1 f2       	breq	.-68     	; 0x8b54 <waves+0x654>
    8b98:	f2 f2       	brmi	.-68     	; 0x8b56 <waves+0x656>
    8b9a:	f2 f2       	brmi	.-68     	; 0x8b58 <waves+0x658>
    8b9c:	f2 f2       	brmi	.-68     	; 0x8b5a <waves+0x65a>
    8b9e:	f2 f3       	brmi	.-4      	; 0x8b9c <waves+0x69c>
    8ba0:	f3 f3       	brvs	.-4      	; 0x8b9e <waves+0x69e>
    8ba2:	f3 f3       	brvs	.-4      	; 0x8ba0 <waves+0x6a0>
    8ba4:	f3 f3       	brvs	.-4      	; 0x8ba2 <waves+0x6a2>
    8ba6:	f3 f3       	brvs	.-4      	; 0x8ba4 <waves+0x6a4>
    8ba8:	f3 f3       	brvs	.-4      	; 0x8ba6 <waves+0x6a6>
    8baa:	f3 f3       	brvs	.-4      	; 0x8ba8 <waves+0x6a8>
    8bac:	f3 f3       	brvs	.-4      	; 0x8baa <waves+0x6aa>
    8bae:	f3 f3       	brvs	.-4      	; 0x8bac <waves+0x6ac>
    8bb0:	f3 f3       	brvs	.-4      	; 0x8bae <waves+0x6ae>
    8bb2:	f3 f3       	brvs	.-4      	; 0x8bb0 <waves+0x6b0>
    8bb4:	f3 f3       	brvs	.-4      	; 0x8bb2 <waves+0x6b2>
    8bb6:	f3 f3       	brvs	.-4      	; 0x8bb4 <waves+0x6b4>
    8bb8:	f3 f3       	brvs	.-4      	; 0x8bb6 <waves+0x6b6>
    8bba:	f3 f3       	brvs	.-4      	; 0x8bb8 <waves+0x6b8>
    8bbc:	f3 f3       	brvs	.-4      	; 0x8bba <waves+0x6ba>
    8bbe:	f3 f3       	brvs	.-4      	; 0x8bbc <waves+0x6bc>
    8bc0:	f3 f3       	brvs	.-4      	; 0x8bbe <waves+0x6be>
    8bc2:	f3 f3       	brvs	.-4      	; 0x8bc0 <waves+0x6c0>
    8bc4:	f3 f3       	brvs	.-4      	; 0x8bc2 <waves+0x6c2>
    8bc6:	f3 f3       	brvs	.-4      	; 0x8bc4 <waves+0x6c4>
    8bc8:	f3 f3       	brvs	.-4      	; 0x8bc6 <waves+0x6c6>
    8bca:	f3 f3       	brvs	.-4      	; 0x8bc8 <waves+0x6c8>
    8bcc:	f3 f3       	brvs	.-4      	; 0x8bca <waves+0x6ca>
    8bce:	f3 f3       	brvs	.-4      	; 0x8bcc <waves+0x6cc>
    8bd0:	f3 f3       	brvs	.-4      	; 0x8bce <waves+0x6ce>
    8bd2:	f3 f3       	brvs	.-4      	; 0x8bd0 <waves+0x6d0>
    8bd4:	f3 f3       	brvs	.-4      	; 0x8bd2 <waves+0x6d2>
    8bd6:	f3 f3       	brvs	.-4      	; 0x8bd4 <waves+0x6d4>
    8bd8:	f3 f3       	brvs	.-4      	; 0x8bd6 <waves+0x6d6>
    8bda:	f3 f3       	brvs	.-4      	; 0x8bd8 <waves+0x6d8>
    8bdc:	f3 f3       	brvs	.-4      	; 0x8bda <waves+0x6da>
    8bde:	f3 f3       	brvs	.-4      	; 0x8bdc <waves+0x6dc>
    8be0:	f2 f2       	brmi	.-68     	; 0x8b9e <waves+0x69e>
    8be2:	f2 f2       	brmi	.-68     	; 0x8ba0 <waves+0x6a0>
    8be4:	f2 f2       	brmi	.-68     	; 0x8ba2 <waves+0x6a2>
    8be6:	f2 f2       	brmi	.-68     	; 0x8ba4 <waves+0x6a4>
    8be8:	f1 f1       	breq	.+124    	; 0x8c66 <waves+0x766>
    8bea:	f1 f1       	breq	.+124    	; 0x8c68 <waves+0x768>
    8bec:	f0 f0       	brcs	.+60     	; 0x8c2a <waves+0x72a>
    8bee:	f0 ef       	ldi	r31, 0xF0	; 240
    8bf0:	ef ee       	ldi	r30, 0xEF	; 239
    8bf2:	ed ec       	ldi	r30, 0xCD	; 205
    8bf4:	eb ea       	ldi	r30, 0xAB	; 171
    8bf6:	e9 e7       	ldi	r30, 0x79	; 121
    8bf8:	e5 e3       	ldi	r30, 0x35	; 53
    8bfa:	df db       	rcall	.-2114   	; 0x83ba <steptable+0xb2>
    8bfc:	d5 cc       	rjmp	.-1622   	; 0x85a8 <waves+0xa8>
    8bfe:	c6 00       	.word	0x00c6	; ????
    8c00:	00 28       	or	r0, r0
    8c02:	3d 42       	sbci	r19, 0x2D	; 45
    8c04:	30 2d       	mov	r19, r0
    8c06:	2c 2b       	or	r18, r28
    8c08:	2c 2d       	mov	r18, r12
    8c0a:	2e 2f       	mov	r18, r30
    8c0c:	30 32       	cpi	r19, 0x20	; 32
    8c0e:	33 35       	cpi	r19, 0x53	; 83
    8c10:	37 39       	cpi	r19, 0x97	; 151
    8c12:	3b 3d       	cpi	r19, 0xDB	; 219
    8c14:	3f 41       	sbci	r19, 0x1F	; 31
    8c16:	43 45       	sbci	r20, 0x53	; 83
    8c18:	48 4a       	sbci	r20, 0xA8	; 168
    8c1a:	4c 4e       	sbci	r20, 0xEC	; 236
    8c1c:	50 53       	subi	r21, 0x30	; 48
    8c1e:	55 57       	subi	r21, 0x75	; 117
    8c20:	59 5b       	subi	r21, 0xB9	; 185
    8c22:	5d 5f       	subi	r21, 0xFD	; 253
    8c24:	61 63       	ori	r22, 0x31	; 49
    8c26:	65 67       	ori	r22, 0x75	; 117
    8c28:	69 6b       	ori	r22, 0xB9	; 185
    8c2a:	6c 6e       	ori	r22, 0xEC	; 236
    8c2c:	70 71       	andi	r23, 0x10	; 16
    8c2e:	73 74       	andi	r23, 0x43	; 67
    8c30:	75 77       	andi	r23, 0x75	; 117
    8c32:	78 79       	andi	r23, 0x98	; 152
    8c34:	7a 7b       	andi	r23, 0xBA	; 186
    8c36:	7c 7d       	andi	r23, 0xDC	; 220
    8c38:	7d 7e       	andi	r23, 0xED	; 237
    8c3a:	7e 7f       	andi	r23, 0xFE	; 254
    8c3c:	7f 7f       	andi	r23, 0xFF	; 255
    8c3e:	7f 7f       	andi	r23, 0xFF	; 255
    8c40:	7f 7f       	andi	r23, 0xFF	; 255
    8c42:	7f 7f       	andi	r23, 0xFF	; 255
    8c44:	7f 7f       	andi	r23, 0xFF	; 255
    8c46:	7e 7e       	andi	r23, 0xEE	; 238
    8c48:	7d 7d       	andi	r23, 0xDD	; 221
    8c4a:	7c 7b       	andi	r23, 0xBC	; 188
    8c4c:	7a 79       	andi	r23, 0x9A	; 154
    8c4e:	78 77       	andi	r23, 0x78	; 120
    8c50:	75 74       	andi	r23, 0x45	; 69
    8c52:	73 71       	andi	r23, 0x13	; 19
    8c54:	70 6e       	ori	r23, 0xE0	; 224
    8c56:	6c 6b       	ori	r22, 0xBC	; 188
    8c58:	69 67       	ori	r22, 0x79	; 121
    8c5a:	65 63       	ori	r22, 0x35	; 53
    8c5c:	61 5f       	subi	r22, 0xF1	; 241
    8c5e:	5d 5b       	subi	r21, 0xBD	; 189
    8c60:	59 57       	subi	r21, 0x79	; 121
    8c62:	55 53       	subi	r21, 0x35	; 53
    8c64:	50 4e       	sbci	r21, 0xE0	; 224
    8c66:	4c 4a       	sbci	r20, 0xAC	; 172
    8c68:	48 45       	sbci	r20, 0x58	; 88
    8c6a:	43 41       	sbci	r20, 0x13	; 19
    8c6c:	3f 3d       	cpi	r19, 0xDF	; 223
    8c6e:	3b 39       	cpi	r19, 0x9B	; 155
    8c70:	37 35       	cpi	r19, 0x57	; 87
    8c72:	33 32       	cpi	r19, 0x23	; 35
    8c74:	30 2f       	mov	r19, r16
    8c76:	2e 2d       	mov	r18, r14
    8c78:	2c 2b       	or	r18, r28
    8c7a:	2c 2d       	mov	r18, r12
    8c7c:	30 42       	sbci	r19, 0x20	; 32
    8c7e:	3d 28       	or	r3, r13
    8c80:	00 e9       	ldi	r16, 0x90	; 144
    8c82:	e5 fe       	sbrs	r14, 5
    8c84:	d4 d7       	rcall	.+4008   	; 0x9c2e <init_enemy_shark+0x7e>
    8c86:	d7 d7       	rcall	.+4014   	; 0x9c36 <init_enemy_shark+0x86>
    8c88:	d6 d4       	rcall	.+2476   	; 0x9636 <LBCollides+0x44>
    8c8a:	d2 d0       	rcall	.+420    	; 0x8e30 <waves+0x930>
    8c8c:	ce cc       	rjmp	.-1636   	; 0x862a <waves+0x12a>
    8c8e:	ca c8       	rjmp	.-3692   	; 0x7e24 <TriggerNote+0x5c>
    8c90:	c6 c3       	rjmp	.+1932   	; 0x941e <LBGetJoyPadState+0xe>
    8c92:	c1 bf       	out	0x31, r28	; 49
    8c94:	bd ba       	out	0x1d, r11	; 29
    8c96:	b8 b6       	in	r11, 0x38	; 56
    8c98:	b4 b1       	in	r27, 0x04	; 4
    8c9a:	af ad       	ldd	r26, Y+63	; 0x3f
    8c9c:	ab a9       	ldd	r26, Y+51	; 0x33
    8c9e:	a7 a5       	ldd	r26, Z+47	; 0x2f
    8ca0:	a3 a1       	ldd	r26, Z+35	; 0x23
    8ca2:	9f 9e       	mul	r9, r31
    8ca4:	9c 9a       	sbi	0x13, 4	; 19
    8ca6:	99 97       	sbiw	r26, 0x29	; 41
    8ca8:	95 94       	asr	r9
    8caa:	93 91       	.word	0x9193	; ????
    8cac:	90 8f       	std	Z+24, r25	; 0x18
    8cae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    8cb0:	8b 8a       	std	Y+19, r8	; 0x13
    8cb2:	89 88       	ldd	r8, Y+17	; 0x11
    8cb4:	88 87       	std	Y+8, r24	; 0x08
    8cb6:	86 85       	ldd	r24, Z+14	; 0x0e
    8cb8:	85 84       	ldd	r8, Z+13	; 0x0d
    8cba:	84 84       	ldd	r8, Z+12	; 0x0c
    8cbc:	83 83       	std	Z+3, r24	; 0x03
    8cbe:	83 83       	std	Z+3, r24	; 0x03
    8cc0:	83 83       	std	Z+3, r24	; 0x03
    8cc2:	83 83       	std	Z+3, r24	; 0x03
    8cc4:	83 84       	ldd	r8, Z+11	; 0x0b
    8cc6:	84 84       	ldd	r8, Z+12	; 0x0c
    8cc8:	85 85       	ldd	r24, Z+13	; 0x0d
    8cca:	86 87       	std	Z+14, r24	; 0x0e
    8ccc:	88 88       	ldd	r8, Y+16	; 0x10
    8cce:	89 8a       	std	Y+17, r8	; 0x11
    8cd0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    8cd2:	8d 8f       	std	Y+29, r24	; 0x1d
    8cd4:	90 91 93 94 	lds	r25, 0x9493
    8cd8:	95 97       	sbiw	r26, 0x25	; 37
    8cda:	99 9a       	sbi	0x13, 1	; 19
    8cdc:	9c 9e       	mul	r9, r28
    8cde:	9f a1       	ldd	r25, Y+39	; 0x27
    8ce0:	a3 a5       	ldd	r26, Z+43	; 0x2b
    8ce2:	a7 a9       	ldd	r26, Z+55	; 0x37
    8ce4:	ab ad       	ldd	r26, Y+59	; 0x3b
    8ce6:	af b1       	in	r26, 0x0f	; 15
    8ce8:	b4 b6       	in	r11, 0x34	; 52
    8cea:	b8 ba       	out	0x18, r11	; 24
    8cec:	bd bf       	out	0x3d, r27	; 61
    8cee:	c1 c3       	rjmp	.+1922   	; 0x9472 <LBGetJoyPadState+0x62>
    8cf0:	c6 c8       	rjmp	.-3700   	; 0x7e7e <ProcessMusic+0x36>
    8cf2:	ca cc       	rjmp	.-1644   	; 0x8688 <waves+0x188>
    8cf4:	ce d0       	rcall	.+412    	; 0x8e92 <waves+0x992>
    8cf6:	d2 d4       	rcall	.+2468   	; 0x969c <LBMapSprite+0x14>
    8cf8:	d6 d7       	rcall	.+4012   	; 0x9ca6 <clear_overlay+0x4>
    8cfa:	d7 d7       	rcall	.+4014   	; 0x9caa <clear_overlay+0x8>
    8cfc:	d4 fe       	sbrs	r13, 4
    8cfe:	e5 e9       	ldi	r30, 0x95	; 149
    8d00:	f9 f8       	.word	0xf8f9	; ????
    8d02:	f9 f5       	brne	.+126    	; 0x8d82 <waves+0x882>
    8d04:	eb e1       	ldi	r30, 0x1B	; 27
    8d06:	dd de       	rcall	.-582    	; 0x8ac2 <waves+0x5c2>
    8d08:	e0 e2       	ldi	r30, 0x20	; 32
    8d0a:	e4 e5       	ldi	r30, 0x54	; 84
    8d0c:	e6 e5       	ldi	r30, 0x56	; 86
    8d0e:	e4 e2       	ldi	r30, 0x24	; 36
    8d10:	de d9       	rcall	.-3140   	; 0x80ce <ProcessMusic+0x286>
    8d12:	d2 ca       	rjmp	.-2652   	; 0x82b8 <set_note_waves+0x22>
    8d14:	c1 b7       	in	r28, 0x31	; 49
    8d16:	ac a2       	std	Y+36, r10	; 0x24
    8d18:	99 91       	ld	r25, Y+
    8d1a:	8a 86       	std	Y+10, r8	; 0x0a
    8d1c:	83 81       	ldd	r24, Z+3	; 0x03
    8d1e:	80 80       	ld	r8, Z
    8d20:	81 82       	std	Z+1, r8	; 0x01
    8d22:	83 85       	ldd	r24, Z+11	; 0x0b
    8d24:	86 88       	ldd	r8, Z+22	; 0x16
    8d26:	8a 8c       	ldd	r8, Y+26	; 0x1a
    8d28:	8d 8f       	std	Y+29, r24	; 0x1d
    8d2a:	90 92 93 95 	sts	0x9593, r9
    8d2e:	96 97       	sbiw	r26, 0x26	; 38
    8d30:	98 99       	sbic	0x13, 0	; 19
    8d32:	9a 9b       	sbis	0x13, 2	; 19
    8d34:	9b 9c       	mul	r9, r11
    8d36:	9d 9d       	mul	r25, r13
    8d38:	9d 9e       	mul	r9, r29
    8d3a:	9e 9e       	mul	r9, r30
    8d3c:	9f 9f       	mul	r25, r31
    8d3e:	9f 9f       	mul	r25, r31
    8d40:	9f 9f       	mul	r25, r31
    8d42:	9f 9e       	mul	r9, r31
    8d44:	9e 9e       	mul	r9, r30
    8d46:	9d 9d       	mul	r25, r13
    8d48:	9d 9c       	mul	r9, r13
    8d4a:	9b 9b       	sbis	0x13, 3	; 19
    8d4c:	9a 99       	sbic	0x13, 2	; 19
    8d4e:	98 97       	sbiw	r26, 0x28	; 40
    8d50:	96 95       	lsr	r25
    8d52:	93 92       	.word	0x9293	; ????
    8d54:	90 8f       	std	Z+24, r25	; 0x18
    8d56:	8d 8c       	ldd	r8, Y+29	; 0x1d
    8d58:	8a 88       	ldd	r8, Y+18	; 0x12
    8d5a:	86 85       	ldd	r24, Z+14	; 0x0e
    8d5c:	83 82       	std	Z+3, r8	; 0x03
    8d5e:	81 80       	ldd	r8, Z+1	; 0x01
    8d60:	80 81       	ld	r24, Z
    8d62:	83 86       	std	Z+11, r8	; 0x0b
    8d64:	8a 91       	ld	r24, -Y
    8d66:	99 a2       	std	Y+33, r9	; 0x21
    8d68:	ac b7       	in	r26, 0x3c	; 60
    8d6a:	c1 ca       	rjmp	.-2686   	; 0x82ee <smw2+0x4>
    8d6c:	d2 d9       	rcall	.-3164   	; 0x8112 <ProcessMusic+0x2ca>
    8d6e:	de e2       	ldi	r29, 0x2E	; 46
    8d70:	e4 e5       	ldi	r30, 0x54	; 84
    8d72:	e6 e5       	ldi	r30, 0x56	; 86
    8d74:	e4 e2       	ldi	r30, 0x24	; 36
    8d76:	e0 de       	rcall	.-576    	; 0x8b38 <waves+0x638>
    8d78:	dd e1       	ldi	r29, 0x1D	; 29
    8d7a:	eb f5       	brvc	.+122    	; 0x8df6 <waves+0x8f6>
    8d7c:	f9 f8       	.word	0xf8f9	; ????
    8d7e:	f9 00       	.word	0x00f9	; ????
    8d80:	07 08       	sbc	r0, r7
    8d82:	07 0b       	sbc	r16, r23
    8d84:	15 1f       	adc	r17, r21
    8d86:	23 22       	and	r2, r19
    8d88:	20 1e       	adc	r2, r16
    8d8a:	1c 1b       	sub	r17, r28
    8d8c:	1a 1b       	sub	r17, r26
    8d8e:	1c 1e       	adc	r1, r28
    8d90:	22 27       	eor	r18, r18
    8d92:	2e 36       	cpi	r18, 0x6E	; 110
    8d94:	3f 49       	sbci	r19, 0x9F	; 159
    8d96:	54 5e       	subi	r21, 0xE4	; 228
    8d98:	67 6f       	ori	r22, 0xF7	; 247
    8d9a:	76 7a       	andi	r23, 0xA6	; 166
    8d9c:	7e 7f       	andi	r23, 0xFE	; 254
    8d9e:	7f 7f       	andi	r23, 0xFF	; 255
    8da0:	7f 7e       	andi	r23, 0xEF	; 239
    8da2:	7d 7b       	andi	r23, 0xBD	; 189
    8da4:	7a 78       	andi	r23, 0x8A	; 138
    8da6:	76 74       	andi	r23, 0x46	; 70
    8da8:	73 71       	andi	r23, 0x13	; 19
    8daa:	70 6e       	ori	r23, 0xE0	; 224
    8dac:	6d 6b       	ori	r22, 0xBD	; 189
    8dae:	6a 69       	ori	r22, 0x9A	; 154
    8db0:	68 67       	ori	r22, 0x78	; 120
    8db2:	66 65       	ori	r22, 0x56	; 86
    8db4:	65 64       	ori	r22, 0x45	; 69
    8db6:	64 63       	ori	r22, 0x34	; 52
    8db8:	63 62       	ori	r22, 0x23	; 35
    8dba:	62 62       	ori	r22, 0x22	; 34
    8dbc:	61 61       	ori	r22, 0x11	; 17
    8dbe:	61 61       	ori	r22, 0x11	; 17
    8dc0:	61 61       	ori	r22, 0x11	; 17
    8dc2:	61 62       	ori	r22, 0x21	; 33
    8dc4:	62 62       	ori	r22, 0x22	; 34
    8dc6:	63 63       	ori	r22, 0x33	; 51
    8dc8:	63 64       	ori	r22, 0x43	; 67
    8dca:	65 65       	ori	r22, 0x55	; 85
    8dcc:	66 67       	ori	r22, 0x76	; 118
    8dce:	68 69       	ori	r22, 0x98	; 152
    8dd0:	6a 6b       	ori	r22, 0xBA	; 186
    8dd2:	6d 6e       	ori	r22, 0xED	; 237
    8dd4:	70 71       	andi	r23, 0x10	; 16
    8dd6:	73 74       	andi	r23, 0x43	; 67
    8dd8:	76 78       	andi	r23, 0x86	; 134
    8dda:	7a 7b       	andi	r23, 0xBA	; 186
    8ddc:	7d 7e       	andi	r23, 0xED	; 237
    8dde:	7f 7f       	andi	r23, 0xFF	; 255
    8de0:	7f 7f       	andi	r23, 0xFF	; 255
    8de2:	7e 7a       	andi	r23, 0xAE	; 174
    8de4:	76 6f       	ori	r23, 0xF6	; 246
    8de6:	67 5e       	subi	r22, 0xE7	; 231
    8de8:	54 49       	sbci	r21, 0x94	; 148
    8dea:	3f 36       	cpi	r19, 0x6F	; 111
    8dec:	2e 27       	eor	r18, r30
    8dee:	22 1e       	adc	r2, r18
    8df0:	1c 1b       	sub	r17, r28
    8df2:	1a 1b       	sub	r17, r26
    8df4:	1c 1e       	adc	r1, r28
    8df6:	20 22       	and	r2, r16
    8df8:	23 1f       	adc	r18, r19
    8dfa:	15 0b       	sbc	r17, r21
    8dfc:	07 08       	sbc	r0, r7
    8dfe:	07 00       	.word	0x0007	; ????
    8e00:	1f 31       	cpi	r17, 0x1F	; 31
    8e02:	3d 44       	sbci	r19, 0x4D	; 77
    8e04:	4e 53       	subi	r20, 0x3E	; 62
    8e06:	54 56       	subi	r21, 0x64	; 100
    8e08:	5a 5f       	subi	r21, 0xFA	; 250
    8e0a:	64 69       	ori	r22, 0x94	; 148
    8e0c:	6e 74       	andi	r22, 0x4E	; 78
    8e0e:	76 79       	andi	r23, 0x96	; 150
    8e10:	7c 7f       	andi	r23, 0xFC	; 252
    8e12:	7f 7f       	andi	r23, 0xFF	; 255
    8e14:	7f 7f       	andi	r23, 0xFF	; 255
    8e16:	7f 7f       	andi	r23, 0xFF	; 255
    8e18:	7f 7f       	andi	r23, 0xFF	; 255
    8e1a:	7f 7f       	andi	r23, 0xFF	; 255
    8e1c:	7f 7f       	andi	r23, 0xFF	; 255
    8e1e:	7f 7f       	andi	r23, 0xFF	; 255
    8e20:	7f 7f       	andi	r23, 0xFF	; 255
    8e22:	7f 7f       	andi	r23, 0xFF	; 255
    8e24:	7f 7f       	andi	r23, 0xFF	; 255
    8e26:	7f 7f       	andi	r23, 0xFF	; 255
    8e28:	7f 7f       	andi	r23, 0xFF	; 255
    8e2a:	7f 7f       	andi	r23, 0xFF	; 255
    8e2c:	7f 7f       	andi	r23, 0xFF	; 255
    8e2e:	7f 7f       	andi	r23, 0xFF	; 255
    8e30:	7f 7f       	andi	r23, 0xFF	; 255
    8e32:	7f 7f       	andi	r23, 0xFF	; 255
    8e34:	7f 7f       	andi	r23, 0xFF	; 255
    8e36:	7f 7f       	andi	r23, 0xFF	; 255
    8e38:	7f 7f       	andi	r23, 0xFF	; 255
    8e3a:	7f 7f       	andi	r23, 0xFF	; 255
    8e3c:	7f 7f       	andi	r23, 0xFF	; 255
    8e3e:	7f 7f       	andi	r23, 0xFF	; 255
    8e40:	7f 7f       	andi	r23, 0xFF	; 255
    8e42:	7f 7f       	andi	r23, 0xFF	; 255
    8e44:	7f 7f       	andi	r23, 0xFF	; 255
    8e46:	7f 7f       	andi	r23, 0xFF	; 255
    8e48:	7f 7f       	andi	r23, 0xFF	; 255
    8e4a:	7f 7f       	andi	r23, 0xFF	; 255
    8e4c:	7f 7f       	andi	r23, 0xFF	; 255
    8e4e:	7f 7f       	andi	r23, 0xFF	; 255
    8e50:	7f 7f       	andi	r23, 0xFF	; 255
    8e52:	7f 7f       	andi	r23, 0xFF	; 255
    8e54:	7f 7f       	andi	r23, 0xFF	; 255
    8e56:	7f 7f       	andi	r23, 0xFF	; 255
    8e58:	7f 7f       	andi	r23, 0xFF	; 255
    8e5a:	7f 7f       	andi	r23, 0xFF	; 255
    8e5c:	7f 7f       	andi	r23, 0xFF	; 255
    8e5e:	7f 7f       	andi	r23, 0xFF	; 255
    8e60:	7f 7f       	andi	r23, 0xFF	; 255
    8e62:	7f 7f       	andi	r23, 0xFF	; 255
    8e64:	7f 7f       	andi	r23, 0xFF	; 255
    8e66:	7f 7f       	andi	r23, 0xFF	; 255
    8e68:	7f 7f       	andi	r23, 0xFF	; 255
    8e6a:	7f 7f       	andi	r23, 0xFF	; 255
    8e6c:	7f 7f       	andi	r23, 0xFF	; 255
    8e6e:	7f 7f       	andi	r23, 0xFF	; 255
    8e70:	7f 7f       	andi	r23, 0xFF	; 255
    8e72:	7f 7f       	andi	r23, 0xFF	; 255
    8e74:	7f 7f       	andi	r23, 0xFF	; 255
    8e76:	7f 7f       	andi	r23, 0xFF	; 255
    8e78:	7f 7f       	andi	r23, 0xFF	; 255
    8e7a:	7f 7c       	andi	r23, 0xCF	; 207
    8e7c:	78 71       	andi	r23, 0x18	; 24
    8e7e:	68 4c       	sbci	r22, 0xC8	; 200
    8e80:	2c 1c       	adc	r2, r12
    8e82:	12 0c       	add	r1, r2
    8e84:	0a 0b       	sbc	r16, r26
    8e86:	0a 05       	cpc	r16, r10
    8e88:	fd f3       	brhs	.-2      	; 0x8e88 <waves+0x988>
    8e8a:	e9 df       	rcall	.-46     	; 0x8e5e <waves+0x95e>
    8e8c:	d4 ca       	rjmp	.-2648   	; 0x8436 <steptable+0x12e>
    8e8e:	c0 b7       	in	r28, 0x30	; 48
    8e90:	ae a6       	std	Y+46, r10	; 0x2e
    8e92:	9e 97       	sbiw	r26, 0x2e	; 46
    8e94:	91 8b       	std	Z+17, r25	; 0x11
    8e96:	86 85       	ldd	r24, Z+14	; 0x0e
    8e98:	82 80       	ldd	r8, Z+2	; 0x02
    8e9a:	80 80       	ld	r8, Z
    8e9c:	80 80       	ld	r8, Z
    8e9e:	80 80       	ld	r8, Z
    8ea0:	80 80       	ld	r8, Z
    8ea2:	80 80       	ld	r8, Z
    8ea4:	80 80       	ld	r8, Z
    8ea6:	80 80       	ld	r8, Z
    8ea8:	80 80       	ld	r8, Z
    8eaa:	80 80       	ld	r8, Z
    8eac:	80 80       	ld	r8, Z
    8eae:	80 80       	ld	r8, Z
    8eb0:	80 80       	ld	r8, Z
    8eb2:	80 80       	ld	r8, Z
    8eb4:	80 80       	ld	r8, Z
    8eb6:	80 80       	ld	r8, Z
    8eb8:	80 80       	ld	r8, Z
    8eba:	80 80       	ld	r8, Z
    8ebc:	80 80       	ld	r8, Z
    8ebe:	80 80       	ld	r8, Z
    8ec0:	80 80       	ld	r8, Z
    8ec2:	80 80       	ld	r8, Z
    8ec4:	80 80       	ld	r8, Z
    8ec6:	80 80       	ld	r8, Z
    8ec8:	80 80       	ld	r8, Z
    8eca:	80 80       	ld	r8, Z
    8ecc:	80 80       	ld	r8, Z
    8ece:	80 80       	ld	r8, Z
    8ed0:	80 80       	ld	r8, Z
    8ed2:	80 80       	ld	r8, Z
    8ed4:	80 80       	ld	r8, Z
    8ed6:	80 80       	ld	r8, Z
    8ed8:	80 80       	ld	r8, Z
    8eda:	80 80       	ld	r8, Z
    8edc:	80 80       	ld	r8, Z
    8ede:	80 80       	ld	r8, Z
    8ee0:	80 80       	ld	r8, Z
    8ee2:	80 80       	ld	r8, Z
    8ee4:	80 80       	ld	r8, Z
    8ee6:	80 80       	ld	r8, Z
    8ee8:	80 80       	ld	r8, Z
    8eea:	80 80       	ld	r8, Z
    8eec:	80 80       	ld	r8, Z
    8eee:	80 80       	ld	r8, Z
    8ef0:	80 80       	ld	r8, Z
    8ef2:	80 80       	ld	r8, Z
    8ef4:	80 87       	std	Z+8, r24	; 0x08
    8ef6:	91 9d       	mul	r25, r1
    8ef8:	ac c4       	rjmp	.+2392   	; 0x9852 <init_default_high_scores+0x24>
    8efa:	cb d4       	rcall	.+2454   	; 0x9892 <init_player_state+0x10>
    8efc:	dd f2       	brhs	.-74     	; 0x8eb4 <waves+0x9b4>
    8efe:	fa fa       	.word	0xfafa	; ????

00008f00 <RestoreBackground>:
	unsigned char free_tile_index, userRamTilesCount=0,userRamTilesCount_tmp=0;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=userRamTilesCount;i<free_tile_index;i++){
    8f00:	80 91 f3 0c 	lds	r24, 0x0CF3
    8f04:	90 91 7e 0d 	lds	r25, 0x0D7E
    8f08:	89 17       	cp	r24, r25
    8f0a:	78 f4       	brcc	.+30     	; 0x8f2a <RestoreBackground+0x2a>
			//vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
			*ram_tiles_restore[i].addr=ram_tiles_restore[i].tileIndex;
    8f0c:	e8 2f       	mov	r30, r24
    8f0e:	f0 e0       	ldi	r31, 0x00	; 0
    8f10:	9f 01       	movw	r18, r30
    8f12:	22 0f       	add	r18, r18
    8f14:	33 1f       	adc	r19, r19
    8f16:	e2 0f       	add	r30, r18
    8f18:	f3 1f       	adc	r31, r19
    8f1a:	e0 5b       	subi	r30, 0xB0	; 176
    8f1c:	f3 4f       	sbci	r31, 0xF3	; 243
    8f1e:	a0 81       	ld	r26, Z
    8f20:	b1 81       	ldd	r27, Z+1	; 0x01
    8f22:	92 81       	ldd	r25, Z+2	; 0x02
    8f24:	9c 93       	st	X, r25
	unsigned char free_tile_index, userRamTilesCount=0,userRamTilesCount_tmp=0;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=userRamTilesCount;i<free_tile_index;i++){
    8f26:	8f 5f       	subi	r24, 0xFF	; 255
    8f28:	ed cf       	rjmp	.-38     	; 0x8f04 <RestoreBackground+0x4>
			//vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
			*ram_tiles_restore[i].addr=ram_tiles_restore[i].tileIndex;
		}	
	}
    8f2a:	08 95       	ret

00008f2c <ProcessSprites>:
		}

	}
	*/

	void ProcessSprites(){
    8f2c:	2f 92       	push	r2
    8f2e:	3f 92       	push	r3
    8f30:	4f 92       	push	r4
    8f32:	5f 92       	push	r5
    8f34:	6f 92       	push	r6
    8f36:	7f 92       	push	r7
    8f38:	8f 92       	push	r8
    8f3a:	9f 92       	push	r9
    8f3c:	af 92       	push	r10
    8f3e:	bf 92       	push	r11
    8f40:	cf 92       	push	r12
    8f42:	df 92       	push	r13
    8f44:	ef 92       	push	r14
    8f46:	ff 92       	push	r15
    8f48:	0f 93       	push	r16
    8f4a:	1f 93       	push	r17
    8f4c:	cf 93       	push	r28
    8f4e:	df 93       	push	r29
    8f50:	00 d0       	rcall	.+0      	; 0x8f52 <ProcessSprites+0x26>
    8f52:	00 d0       	rcall	.+0      	; 0x8f54 <ProcessSprites+0x28>
    8f54:	cd b7       	in	r28, 0x3d	; 61
    8f56:	de b7       	in	r29, 0x3e	; 62
	
		unsigned char i,bx,by,dx,dy,bt,x,y,tx=1,ty=1,wx,wy;
		unsigned int ramPtr,ssx,ssy;

		if(!spritesOn) return;
    8f58:	80 91 00 05 	lds	r24, 0x0500
    8f5c:	88 23       	and	r24, r24
    8f5e:	09 f4       	brne	.+2      	; 0x8f62 <ProcessSprites+0x36>
    8f60:	e0 c0       	rjmp	.+448    	; 0x9122 <ProcessSprites+0x1f6>

		userRamTilesCount=userRamTilesCount_tmp;
    8f62:	80 91 f2 0c 	lds	r24, 0x0CF2
    8f66:	80 93 f3 0c 	sts	0x0CF3, r24
		free_tile_index=userRamTilesCount;
    8f6a:	80 93 7e 0d 	sts	0x0D7E, r24
    8f6e:	e0 e1       	ldi	r30, 0x10	; 16
    8f70:	ce 2e       	mov	r12, r30
    8f72:	e5 e0       	ldi	r30, 0x05	; 5
    8f74:	de 2e       	mov	r13, r30
	
		for(i=0;i<MAX_SPRITES;i++){
    8f76:	71 2c       	mov	r7, r1
			bx=sprites[i].x;
    8f78:	f6 01       	movw	r30, r12
    8f7a:	20 81       	ld	r18, Z

			if(bx!=(SCREEN_TILES_H*TILE_WIDTH)){
    8f7c:	20 3e       	cpi	r18, 0xE0	; 224
    8f7e:	09 f4       	brne	.+2      	; 0x8f82 <ProcessSprites+0x56>
    8f80:	b1 c0       	rjmp	.+354    	; 0x90e4 <ProcessSprites+0x1b8>
				//get tile's screen section offsets
				
				#if SCROLLING == 1
					ssx=sprites[i].x+Screen.scrollX;
    8f82:	80 91 b2 0c 	lds	r24, 0x0CB2
    8f86:	90 e0       	ldi	r25, 0x00	; 0
    8f88:	82 0f       	add	r24, r18
    8f8a:	91 1d       	adc	r25, r1
					ssy=sprites[i].y+Screen.scrollY;
    8f8c:	41 81       	ldd	r20, Z+1	; 0x01
    8f8e:	20 91 b3 0c 	lds	r18, 0x0CB3
    8f92:	30 e0       	ldi	r19, 0x00	; 0
    8f94:	24 0f       	add	r18, r20
    8f96:	31 1d       	adc	r19, r1

				tx=1;
				ty=1;

				//get the BG tiles that are overlapped by the sprite
				bx=ssx>>3;
    8f98:	ac 01       	movw	r20, r24
    8f9a:	73 e0       	ldi	r23, 0x03	; 3
    8f9c:	56 95       	lsr	r21
    8f9e:	47 95       	ror	r20
    8fa0:	7a 95       	dec	r23
    8fa2:	e1 f7       	brne	.-8      	; 0x8f9c <ProcessSprites+0x70>
    8fa4:	64 2e       	mov	r6, r20
				dx=ssx&0x7;
    8fa6:	87 70       	andi	r24, 0x07	; 7
				if(dx>0) tx++;
    8fa8:	11 f0       	breq	.+4      	; 0x8fae <ProcessSprites+0x82>
    8faa:	92 e0       	ldi	r25, 0x02	; 2
    8fac:	01 c0       	rjmp	.+2      	; 0x8fb0 <ProcessSprites+0x84>
   				#else
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
    8fae:	91 e0       	ldi	r25, 0x01	; 1
    8fb0:	99 83       	std	Y+1, r25	; 0x01
				dx=ssx&0x7;
				if(dx>0) tx++;

				//by=ssy>>3;
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
    8fb2:	a9 01       	movw	r20, r18
    8fb4:	63 e0       	ldi	r22, 0x03	; 3
    8fb6:	56 95       	lsr	r21
    8fb8:	47 95       	ror	r20
    8fba:	6a 95       	dec	r22
    8fbc:	e1 f7       	brne	.-8      	; 0x8fb6 <ProcessSprites+0x8a>
    8fbe:	54 2e       	mov	r5, r20
				dy=ssy%TILE_HEIGHT;
    8fc0:	27 70       	andi	r18, 0x07	; 7
				if(dy>0) ty++;			
    8fc2:	19 f0       	breq	.+6      	; 0x8fca <ProcessSprites+0x9e>
    8fc4:	52 e0       	ldi	r21, 0x02	; 2
    8fc6:	35 2e       	mov	r3, r21
    8fc8:	02 c0       	rjmp	.+4      	; 0x8fce <ProcessSprites+0xa2>
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
				ty=1;
    8fca:	33 24       	eor	r3, r3
    8fcc:	33 94       	inc	r3
								bt=free_tile_index;
								free_tile_index++;
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    8fce:	30 e0       	ldi	r19, 0x00	; 0
    8fd0:	32 2f       	mov	r19, r18
    8fd2:	22 27       	eor	r18, r18
    8fd4:	f9 01       	movw	r30, r18
    8fd6:	e8 0f       	add	r30, r24
    8fd8:	f1 1d       	adc	r31, r1
    8fda:	fc 83       	std	Y+4, r31	; 0x04
    8fdc:	eb 83       	std	Y+3, r30	; 0x03
    8fde:	e1 2c       	mov	r14, r1
    8fe0:	f1 2c       	mov	r15, r1
    8fe2:	be 2c       	mov	r11, r14
    8fe4:	aa 24       	eor	r10, r10
    8fe6:	26 2c       	mov	r2, r6
    8fe8:	45 2c       	mov	r4, r5
    8fea:	4e 0c       	add	r4, r14
								    wy-=(VRAM_TILES_V*2);
							    }else if(wy>=VRAM_TILES_V){
							    	wy-=VRAM_TILES_V;
							    }
                            #else
                                if(wy>=(Screen.scrollHeight*2)){
    8fec:	84 2c       	mov	r8, r4
    8fee:	91 2c       	mov	r9, r1
    8ff0:	84 2d       	mov	r24, r4
    8ff2:	20 91 b4 0c 	lds	r18, 0x0CB4
    8ff6:	42 2f       	mov	r20, r18
    8ff8:	50 e0       	ldi	r21, 0x00	; 0
    8ffa:	44 0f       	add	r20, r20
    8ffc:	55 1f       	adc	r21, r21
    8ffe:	84 16       	cp	r8, r20
    9000:	95 06       	cpc	r9, r21
    9002:	14 f0       	brlt	.+4      	; 0x9008 <ProcessSprites+0xdc>
								    wy-=(Screen.scrollHeight*2);
    9004:	22 0f       	add	r18, r18
    9006:	03 c0       	rjmp	.+6      	; 0x900e <ProcessSprites+0xe2>
							    }else if(wy>=Screen.scrollHeight){
    9008:	42 16       	cp	r4, r18
    900a:	10 f0       	brcs	.+4      	; 0x9010 <ProcessSprites+0xe4>
							    	wy-=Screen.scrollHeight;
    900c:	84 2d       	mov	r24, r4
    900e:	82 1b       	sub	r24, r18
							    }
                            #endif
							if(wx>=VRAM_TILES_H)wx-=VRAM_TILES_H; //should always be 32
    9010:	ff e1       	ldi	r31, 0x1F	; 31
    9012:	f2 15       	cp	r31, r2
    9014:	18 f4       	brcc	.+6      	; 0x901c <ProcessSprites+0xf0>
    9016:	00 ee       	ldi	r16, 0xE0	; 224
    9018:	02 0d       	add	r16, r2
    901a:	01 c0       	rjmp	.+2      	; 0x901e <ProcessSprites+0xf2>
    901c:	02 2d       	mov	r16, r2

							#if SCROLLING == 0
								ramPtr=(wy*VRAM_TILES_H)+wx;
							#else

								ramPtr=((wy>>3)*256)+(wx*8)+(wy&7);	
    901e:	28 2f       	mov	r18, r24
    9020:	26 95       	lsr	r18
    9022:	26 95       	lsr	r18
    9024:	26 95       	lsr	r18
    9026:	10 e0       	ldi	r17, 0x00	; 0
    9028:	40 e2       	ldi	r20, 0x20	; 32
    902a:	24 9f       	mul	r18, r20
    902c:	00 0d       	add	r16, r0
    902e:	11 1d       	adc	r17, r1
    9030:	11 24       	eor	r1, r1
    9032:	23 e0       	ldi	r18, 0x03	; 3
    9034:	00 0f       	add	r16, r16
    9036:	11 1f       	adc	r17, r17
    9038:	2a 95       	dec	r18
    903a:	e1 f7       	brne	.-8      	; 0x9034 <ProcessSprites+0x108>
    903c:	87 70       	andi	r24, 0x07	; 7
    903e:	08 0f       	add	r16, r24
    9040:	11 1d       	adc	r17, r1

							#endif

							bt=vram[ramPtr];						
    9042:	00 50       	subi	r16, 0x00	; 0
    9044:	1f 4f       	sbci	r17, 0xFF	; 255
    9046:	f8 01       	movw	r30, r16
    9048:	70 81       	ld	r23, Z

							if( ((bt>=RAM_TILES_COUNT) | (bt<userRamTilesCount)) && (free_tile_index < RAM_TILES_COUNT) ){ //if no ram free ignore tile
    904a:	81 e0       	ldi	r24, 0x01	; 1
    904c:	7c 31       	cpi	r23, 0x1C	; 28
    904e:	08 f4       	brcc	.+2      	; 0x9052 <ProcessSprites+0x126>
    9050:	80 e0       	ldi	r24, 0x00	; 0
    9052:	21 e0       	ldi	r18, 0x01	; 1
    9054:	30 91 f3 0c 	lds	r19, 0x0CF3
    9058:	73 17       	cp	r23, r19
    905a:	18 f0       	brcs	.+6      	; 0x9062 <ProcessSprites+0x136>
    905c:	20 e0       	ldi	r18, 0x00	; 0
    905e:	88 23       	and	r24, r24
    9060:	51 f1       	breq	.+84     	; 0x90b6 <ProcessSprites+0x18a>
    9062:	60 91 7e 0d 	lds	r22, 0x0D7E
    9066:	6c 31       	cpi	r22, 0x1C	; 28
    9068:	20 f5       	brcc	.+72     	; 0x90b2 <ProcessSprites+0x186>
								if( bt>=RAM_TILES_COUNT ){
    906a:	88 23       	and	r24, r24
    906c:	31 f0       	breq	.+12     	; 0x907a <ProcessSprites+0x14e>
									//tile is mapped to flash. Copy it to next free RAM tile.
									CopyFlashTile(bt-RAM_TILES_COUNT,free_tile_index);
    906e:	84 ee       	ldi	r24, 0xE4	; 228
    9070:	87 0f       	add	r24, r23
    9072:	7a 83       	std	Y+2, r23	; 0x02
    9074:	0e 94 78 37 	call	0x6ef0	; 0x6ef0 <CopyFlashTile>
    9078:	06 c0       	rjmp	.+12     	; 0x9086 <ProcessSprites+0x15a>
								}else if(bt<userRamTilesCount){
    907a:	22 23       	and	r18, r18
    907c:	29 f0       	breq	.+10     	; 0x9088 <ProcessSprites+0x15c>
									//tile is a user ram tile. Copy it to next free RAM tile.
									CopyRamTile(bt,free_tile_index);
    907e:	87 2f       	mov	r24, r23
    9080:	7a 83       	std	Y+2, r23	; 0x02
    9082:	0e 94 07 38 	call	0x700e	; 0x700e <CopyRamTile>
    9086:	7a 81       	ldd	r23, Y+2	; 0x02
								}
								ram_tiles_restore[free_tile_index].addr=(&vram[ramPtr]);
    9088:	80 91 7e 0d 	lds	r24, 0x0D7E
    908c:	e8 2f       	mov	r30, r24
    908e:	f0 e0       	ldi	r31, 0x00	; 0
    9090:	9f 01       	movw	r18, r30
    9092:	22 0f       	add	r18, r18
    9094:	33 1f       	adc	r19, r19
    9096:	e2 0f       	add	r30, r18
    9098:	f3 1f       	adc	r31, r19
    909a:	e0 5b       	subi	r30, 0xB0	; 176
    909c:	f3 4f       	sbci	r31, 0xF3	; 243
    909e:	11 83       	std	Z+1, r17	; 0x01
    90a0:	00 83       	st	Z, r16
								ram_tiles_restore[free_tile_index].tileIndex=bt;
    90a2:	72 83       	std	Z+2, r23	; 0x02
								vram[ramPtr]=free_tile_index;
    90a4:	f8 01       	movw	r30, r16
    90a6:	80 83       	st	Z, r24
								bt=free_tile_index;
								free_tile_index++;
    90a8:	21 e0       	ldi	r18, 0x01	; 1
    90aa:	28 0f       	add	r18, r24
    90ac:	20 93 7e 0d 	sts	0x0D7E, r18
									CopyRamTile(bt,free_tile_index);
								}
								ram_tiles_restore[free_tile_index].addr=(&vram[ramPtr]);
								ram_tiles_restore[free_tile_index].tileIndex=bt;
								vram[ramPtr]=free_tile_index;
								bt=free_tile_index;
    90b0:	78 2f       	mov	r23, r24
								free_tile_index++;
							}
				
							if(bt<RAM_TILES_COUNT){				
    90b2:	7c 31       	cpi	r23, 0x1C	; 28
    90b4:	38 f4       	brcc	.+14     	; 0x90c4 <ProcessSprites+0x198>
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    90b6:	2b 81       	ldd	r18, Y+3	; 0x03
    90b8:	3c 81       	ldd	r19, Y+4	; 0x04
    90ba:	a5 01       	movw	r20, r10
    90bc:	67 2f       	mov	r22, r23
    90be:	87 2d       	mov	r24, r7
    90c0:	0e 94 94 38 	call	0x7128	; 0x7128 <BlitSprite>
    90c4:	ff ef       	ldi	r31, 0xFF	; 255
    90c6:	af 1a       	sub	r10, r31
    90c8:	bf 0a       	sbc	r11, r31
    90ca:	23 94       	inc	r2
    90cc:	82 2d       	mov	r24, r2
    90ce:	86 19       	sub	r24, r6
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){

					for(x=0;x<tx;x++){
    90d0:	99 81       	ldd	r25, Y+1	; 0x01
    90d2:	89 17       	cp	r24, r25
    90d4:	08 f4       	brcc	.+2      	; 0x90d8 <ProcessSprites+0x1ac>
    90d6:	8c cf       	rjmp	.-232    	; 0x8ff0 <ProcessSprites+0xc4>
    90d8:	ef ef       	ldi	r30, 0xFF	; 255
    90da:	ee 1a       	sub	r14, r30
    90dc:	fe 0a       	sbc	r15, r30
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){
    90de:	e3 14       	cp	r14, r3
    90e0:	08 f4       	brcc	.+2      	; 0x90e4 <ProcessSprites+0x1b8>
    90e2:	7f cf       	rjmp	.-258    	; 0x8fe2 <ProcessSprites+0xb6>
		if(!spritesOn) return;

		userRamTilesCount=userRamTilesCount_tmp;
		free_tile_index=userRamTilesCount;
	
		for(i=0;i<MAX_SPRITES;i++){
    90e4:	73 94       	inc	r7
    90e6:	f4 e0       	ldi	r31, 0x04	; 4
    90e8:	cf 0e       	add	r12, r31
    90ea:	d1 1c       	adc	r13, r1
    90ec:	40 e1       	ldi	r20, 0x10	; 16
    90ee:	74 12       	cpse	r7, r20
    90f0:	43 cf       	rjmp	.-378    	; 0x8f78 <ProcessSprites+0x4c>


		//restore BG tiles
		RestoreBackground();

	}
    90f2:	0f 90       	pop	r0
    90f4:	0f 90       	pop	r0
    90f6:	0f 90       	pop	r0
    90f8:	0f 90       	pop	r0
    90fa:	df 91       	pop	r29
    90fc:	cf 91       	pop	r28
    90fe:	1f 91       	pop	r17
    9100:	0f 91       	pop	r16
    9102:	ff 90       	pop	r15
    9104:	ef 90       	pop	r14
    9106:	df 90       	pop	r13
    9108:	cf 90       	pop	r12
    910a:	bf 90       	pop	r11
    910c:	af 90       	pop	r10
    910e:	9f 90       	pop	r9
    9110:	8f 90       	pop	r8
    9112:	7f 90       	pop	r7
    9114:	6f 90       	pop	r6
    9116:	5f 90       	pop	r5
    9118:	4f 90       	pop	r4
    911a:	3f 90       	pop	r3
    911c:	2f 90       	pop	r2
			}//	if(bx<(SCREEN_TILES_H*TILE_WIDTH))		
		}


		//restore BG tiles
		RestoreBackground();
    911e:	0c 94 80 47 	jmp	0x8f00	; 0x8f00 <RestoreBackground>

	}
    9122:	0f 90       	pop	r0
    9124:	0f 90       	pop	r0
    9126:	0f 90       	pop	r0
    9128:	0f 90       	pop	r0
    912a:	df 91       	pop	r29
    912c:	cf 91       	pop	r28
    912e:	1f 91       	pop	r17
    9130:	0f 91       	pop	r16
    9132:	ff 90       	pop	r15
    9134:	ef 90       	pop	r14
    9136:	df 90       	pop	r13
    9138:	cf 90       	pop	r12
    913a:	bf 90       	pop	r11
    913c:	af 90       	pop	r10
    913e:	9f 90       	pop	r9
    9140:	8f 90       	pop	r8
    9142:	7f 90       	pop	r7
    9144:	6f 90       	pop	r6
    9146:	5f 90       	pop	r5
    9148:	4f 90       	pop	r4
    914a:	3f 90       	pop	r3
    914c:	2f 90       	pop	r2
    914e:	08 95       	ret

00009150 <Scroll>:

	#if SCROLLING == 1
		//Scroll the screen by the relative amount specified (+/-)
		//This function handles screen wrapping on the Y axis if VRAM_TILES_V is less than 32
		void Scroll(char dx,char dy){
		Screen.scrollY+=dy;
    9150:	90 91 b3 0c 	lds	r25, 0x0CB3
    9154:	96 0f       	add	r25, r22
    9156:	90 93 b3 0c 	sts	0x0CB3, r25
		Screen.scrollX+=dx;
    915a:	20 91 b2 0c 	lds	r18, 0x0CB2
    915e:	82 0f       	add	r24, r18
    9160:	80 93 b2 0c 	sts	0x0CB2, r24

		if(Screen.scrollHeight<32){
    9164:	80 91 b4 0c 	lds	r24, 0x0CB4
    9168:	80 32       	cpi	r24, 0x20	; 32
    916a:	b0 f4       	brcc	.+44     	; 0x9198 <Scroll+0x48>

			if(Screen.scrollY>=(Screen.scrollHeight*TILE_HEIGHT)){
    916c:	29 2f       	mov	r18, r25
    916e:	30 e0       	ldi	r19, 0x00	; 0
    9170:	78 e0       	ldi	r23, 0x08	; 8
    9172:	87 9f       	mul	r24, r23
    9174:	a0 01       	movw	r20, r0
    9176:	11 24       	eor	r1, r1
    9178:	24 17       	cp	r18, r20
    917a:	35 07       	cpc	r19, r21
    917c:	6c f0       	brlt	.+26     	; 0x9198 <Scroll+0x48>
				if(dy>=0){	
    917e:	67 fd       	sbrc	r22, 7
    9180:	05 c0       	rjmp	.+10     	; 0x918c <Scroll+0x3c>
					Screen.scrollY=(Screen.scrollY-(Screen.scrollHeight*TILE_HEIGHT));
    9182:	28 ef       	ldi	r18, 0xF8	; 248
    9184:	82 9f       	mul	r24, r18
    9186:	90 0d       	add	r25, r0
    9188:	11 24       	eor	r1, r1
    918a:	04 c0       	rjmp	.+8      	; 0x9194 <Scroll+0x44>
				}else{
					Screen.scrollY=((Screen.scrollHeight*TILE_HEIGHT)-1)-(0xff-Screen.scrollY);
    918c:	78 e0       	ldi	r23, 0x08	; 8
    918e:	87 9f       	mul	r24, r23
    9190:	90 0d       	add	r25, r0
    9192:	11 24       	eor	r1, r1
    9194:	90 93 b3 0c 	sts	0x0CB3, r25
    9198:	08 95       	ret

0000919a <InitializeVideoMode>:
		#endif	
	}


	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){
    919a:	e0 e1       	ldi	r30, 0x10	; 16
    919c:	f5 e0       	ldi	r31, 0x05	; 5

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
			sprites[i].x=(SCREEN_TILES_H*TILE_WIDTH);		
    919e:	80 ee       	ldi	r24, 0xE0	; 224
    91a0:	80 83       	st	Z, r24
    91a2:	34 96       	adiw	r30, 0x04	; 4

	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
    91a4:	95 e0       	ldi	r25, 0x05	; 5
    91a6:	e0 35       	cpi	r30, 0x50	; 80
    91a8:	f9 07       	cpc	r31, r25
    91aa:	d1 f7       	brne	.-12     	; 0x91a0 <InitializeVideoMode+0x6>
		
		#if SCROLLING == 1
		//	for(int i=0;i<(OVERLAY_LINES*VRAM_TILES_H);i++){
		//		overlay_vram[i]=RAM_TILES_COUNT;
		//	}
			Screen.scrollHeight=VRAM_TILES_V;
    91ac:	80 e2       	ldi	r24, 0x20	; 32
    91ae:	80 93 b4 0c 	sts	0x0CB4, r24
			Screen.overlayHeight=0;
    91b2:	10 92 af 0c 	sts	0x0CAF, r1
    91b6:	08 95       	ret

000091b8 <DrawMap>:



//Draws a map of tile at the specified position
#if VRAM_ADDR_SIZE == 1
	void DrawMap(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
    91b8:	2f 92       	push	r2
    91ba:	3f 92       	push	r3
    91bc:	4f 92       	push	r4
    91be:	5f 92       	push	r5
    91c0:	6f 92       	push	r6
    91c2:	7f 92       	push	r7
    91c4:	8f 92       	push	r8
    91c6:	9f 92       	push	r9
    91c8:	af 92       	push	r10
    91ca:	bf 92       	push	r11
    91cc:	cf 92       	push	r12
    91ce:	df 92       	push	r13
    91d0:	ef 92       	push	r14
    91d2:	ff 92       	push	r15
    91d4:	0f 93       	push	r16
    91d6:	1f 93       	push	r17
    91d8:	cf 93       	push	r28
    91da:	df 93       	push	r29
    91dc:	00 d0       	rcall	.+0      	; 0x91de <DrawMap+0x26>
    91de:	1f 92       	push	r1
    91e0:	cd b7       	in	r28, 0x3d	; 61
    91e2:	de b7       	in	r29, 0x3e	; 62
    91e4:	28 2f       	mov	r18, r24
    91e6:	3a 01       	movw	r6, r20
		//unsigned char i;
		u8 mapWidth=pgm_read_byte(&(map[0]));
    91e8:	fa 01       	movw	r30, r20
    91ea:	24 90       	lpm	r2, Z
		u8 mapHeight=pgm_read_byte(&(map[1]));
    91ec:	31 96       	adiw	r30, 0x01	; 1
    91ee:	34 90       	lpm	r3, Z
    91f0:	42 2c       	mov	r4, r2
    91f2:	51 2c       	mov	r5, r1
		
		for(u8 dy=0;dy<mapHeight;dy++){
    91f4:	e1 2c       	mov	r14, r1
    91f6:	f1 2c       	mov	r15, r1
    91f8:	00 e0       	ldi	r16, 0x00	; 0
    91fa:	10 e0       	ldi	r17, 0x00	; 0
    91fc:	c6 2e       	mov	r12, r22
    91fe:	d1 2c       	mov	r13, r1
    9200:	03 15       	cp	r16, r3
    9202:	68 f5       	brcc	.+90     	; 0x925e <DrawMap+0xa6>
    9204:	1b 82       	std	Y+3, r1	; 0x03
    9206:	1a 82       	std	Y+2, r1	; 0x02
    9208:	57 01       	movw	r10, r14
    920a:	92 e0       	ldi	r25, 0x02	; 2
    920c:	a9 0e       	add	r10, r25
    920e:	b1 1c       	adc	r11, r1
    9210:	48 01       	movw	r8, r16
    9212:	8c 0c       	add	r8, r12
    9214:	9d 1c       	adc	r9, r13
			for(u8 dx=0;dx<mapWidth;dx++){			
    9216:	ea 81       	ldd	r30, Y+2	; 0x02
    9218:	e2 15       	cp	r30, r2
    921a:	e0 f4       	brcc	.+56     	; 0x9254 <DrawMap+0x9c>
    921c:	ea 81       	ldd	r30, Y+2	; 0x02
    921e:	fb 81       	ldd	r31, Y+3	; 0x03
    9220:	ea 0d       	add	r30, r10
    9222:	fb 1d       	adc	r31, r11
    9224:	e6 0d       	add	r30, r6
    9226:	f7 1d       	adc	r31, r7
				SetTile(x+dx,(y+dy)%Screen.scrollHeight,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
    9228:	e4 91       	lpm	r30, Z
    922a:	f0 e0       	ldi	r31, 0x00	; 0
    922c:	60 91 b4 0c 	lds	r22, 0x0CB4
    9230:	70 e0       	ldi	r23, 0x00	; 0
    9232:	c4 01       	movw	r24, r8
    9234:	0e 94 2e 68 	call	0xd05c	; 0xd05c <__divmodhi4>
    9238:	af 01       	movw	r20, r30
    923a:	68 2f       	mov	r22, r24
    923c:	8a 81       	ldd	r24, Y+2	; 0x02
    923e:	82 0f       	add	r24, r18
    9240:	29 83       	std	Y+1, r18	; 0x01
    9242:	0e 94 c7 3a 	call	0x758e	; 0x758e <SetTile>
    9246:	8a 81       	ldd	r24, Y+2	; 0x02
    9248:	9b 81       	ldd	r25, Y+3	; 0x03
    924a:	01 96       	adiw	r24, 0x01	; 1
    924c:	9b 83       	std	Y+3, r25	; 0x03
    924e:	8a 83       	std	Y+2, r24	; 0x02
    9250:	29 81       	ldd	r18, Y+1	; 0x01
    9252:	e1 cf       	rjmp	.-62     	; 0x9216 <DrawMap+0x5e>
    9254:	0f 5f       	subi	r16, 0xFF	; 255
    9256:	1f 4f       	sbci	r17, 0xFF	; 255
    9258:	e4 0c       	add	r14, r4
    925a:	f5 1c       	adc	r15, r5
    925c:	d1 cf       	rjmp	.-94     	; 0x9200 <DrawMap+0x48>
			}
		}

	}
    925e:	0f 90       	pop	r0
    9260:	0f 90       	pop	r0
    9262:	0f 90       	pop	r0
    9264:	df 91       	pop	r29
    9266:	cf 91       	pop	r28
    9268:	1f 91       	pop	r17
    926a:	0f 91       	pop	r16
    926c:	ff 90       	pop	r15
    926e:	ef 90       	pop	r14
    9270:	df 90       	pop	r13
    9272:	cf 90       	pop	r12
    9274:	bf 90       	pop	r11
    9276:	af 90       	pop	r10
    9278:	9f 90       	pop	r9
    927a:	8f 90       	pop	r8
    927c:	7f 90       	pop	r7
    927e:	6f 90       	pop	r6
    9280:	5f 90       	pop	r5
    9282:	4f 90       	pop	r4
    9284:	3f 90       	pop	r3
    9286:	2f 90       	pop	r2
    9288:	08 95       	ret

0000928a <WaitVsync>:
		}
	}
}

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
    928a:	0f 93       	push	r16
    928c:	1f 93       	push	r17
    928e:	cf 93       	push	r28
    9290:	df 93       	push	r29
    9292:	8c 01       	movw	r16, r24
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    9294:	c0 e0       	ldi	r28, 0x00	; 0
    9296:	d0 e0       	ldi	r29, 0x00	; 0
    9298:	c0 17       	cp	r28, r16
    929a:	d1 07       	cpc	r29, r17
    929c:	44 f4       	brge	.+16     	; 0x92ae <WaitVsync+0x24>
		while(!GetVsyncFlag());
    929e:	0e 94 dd 3a 	call	0x75ba	; 0x75ba <GetVsyncFlag>
    92a2:	88 23       	and	r24, r24
    92a4:	e1 f3       	breq	.-8      	; 0x929e <WaitVsync+0x14>
		ClearVsyncFlag();		
    92a6:	0e 94 e1 3a 	call	0x75c2	; 0x75c2 <ClearVsyncFlag>

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    92aa:	21 96       	adiw	r28, 0x01	; 1
    92ac:	f5 cf       	rjmp	.-22     	; 0x9298 <WaitVsync+0xe>
		while(!GetVsyncFlag());
		ClearVsyncFlag();		
	}
}
    92ae:	df 91       	pop	r29
    92b0:	cf 91       	pop	r28
    92b2:	1f 91       	pop	r17
    92b4:	0f 91       	pop	r16
    92b6:	08 95       	ret

000092b8 <DisplayLogo>:
	void DisplayLogo(){
	
		#if INTRO_LOGO !=0
			#define LOGO_X_POS 12
			
			InitMusicPlayer(logoInitPatches);
    92b8:	85 e5       	ldi	r24, 0x55	; 85
    92ba:	99 e0       	ldi	r25, 0x09	; 9
    92bc:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <InitMusicPlayer>
			SetTileTable(logo_tileset);
    92c0:	85 e5       	ldi	r24, 0x55	; 85
    92c2:	91 e0       	ldi	r25, 0x01	; 1
    92c4:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <SetTileTable>
			
			//draw logo
			ClearVram();
    92c8:	0e 94 bd 3a 	call	0x757a	; 0x757a <ClearVram>
			WaitVsync(15);		
    92cc:	8f e0       	ldi	r24, 0x0F	; 15
    92ce:	90 e0       	ldi	r25, 0x00	; 0
    92d0:	0e 94 45 49 	call	0x928a	; 0x928a <WaitVsync>


			#if INTRO_LOGO == 1 
				TriggerFx(0,0xff,true);
    92d4:	41 e0       	ldi	r20, 0x01	; 1
    92d6:	6f ef       	ldi	r22, 0xFF	; 255
    92d8:	80 e0       	ldi	r24, 0x00	; 0
    92da:	0e 94 9c 3e 	call	0x7d38	; 0x7d38 <TriggerFx>
			#endif

			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo);
    92de:	4f e3       	ldi	r20, 0x3F	; 63
    92e0:	51 e0       	ldi	r21, 0x01	; 1
    92e2:	6c e0       	ldi	r22, 0x0C	; 12
    92e4:	8c e0       	ldi	r24, 0x0C	; 12
    92e6:	0e 94 dc 48 	call	0x91b8	; 0x91b8 <DrawMap>
			WaitVsync(3);
    92ea:	83 e0       	ldi	r24, 0x03	; 3
    92ec:	90 e0       	ldi	r25, 0x00	; 0
    92ee:	0e 94 45 49 	call	0x928a	; 0x928a <WaitVsync>
			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo2);
    92f2:	4e e2       	ldi	r20, 0x2E	; 46
    92f4:	51 e0       	ldi	r21, 0x01	; 1
    92f6:	6c e0       	ldi	r22, 0x0C	; 12
    92f8:	8c e0       	ldi	r24, 0x0C	; 12
    92fa:	0e 94 dc 48 	call	0x91b8	; 0x91b8 <DrawMap>
			WaitVsync(2);
    92fe:	82 e0       	ldi	r24, 0x02	; 2
    9300:	90 e0       	ldi	r25, 0x00	; 0
    9302:	0e 94 45 49 	call	0x928a	; 0x928a <WaitVsync>
			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo);
    9306:	4f e3       	ldi	r20, 0x3F	; 63
    9308:	51 e0       	ldi	r21, 0x01	; 1
    930a:	6c e0       	ldi	r22, 0x0C	; 12
    930c:	8c e0       	ldi	r24, 0x0C	; 12
    930e:	0e 94 dc 48 	call	0x91b8	; 0x91b8 <DrawMap>
			#if INTRO_LOGO == 2
				SetMasterVolume(0xc0);
				TriggerNote(3,0,16,0xff);
			#endif 
		
			WaitVsync(65);
    9312:	81 e4       	ldi	r24, 0x41	; 65
    9314:	90 e0       	ldi	r25, 0x00	; 0
    9316:	0e 94 45 49 	call	0x928a	; 0x928a <WaitVsync>
			ClearVram();
    931a:	0e 94 bd 3a 	call	0x757a	; 0x757a <ClearVram>
			WaitVsync(20);
    931e:	84 e1       	ldi	r24, 0x14	; 20
    9320:	90 e0       	ldi	r25, 0x00	; 0
    9322:	0c 94 45 49 	jmp	0x928a	; 0x928a <WaitVsync>

00009326 <doFade>:
char fadeDir;
bool volatile fadeActive;


void doFade(unsigned char speed,bool blocking){
	fadeSpeed=speed;
    9326:	80 93 7c 0d 	sts	0x0D7C, r24
	currFadeFrame=0;
    932a:	10 92 80 0d 	sts	0x0D80, r1
	fadeActive=true;
    932e:	81 e0       	ldi	r24, 0x01	; 1
    9330:	80 93 7f 0d 	sts	0x0D7F, r24
		
	if(blocking){
    9334:	66 23       	and	r22, r22
    9336:	21 f0       	breq	.+8      	; 0x9340 <doFade+0x1a>
		while(fadeActive==true);
    9338:	80 91 7f 0d 	lds	r24, 0x0D7F
    933c:	81 11       	cpse	r24, r1
    933e:	fc cf       	rjmp	.-8      	; 0x9338 <doFade+0x12>
    9340:	08 95       	ret

00009342 <FadeIn>:
	
	
}

void FadeIn(unsigned char speed,bool blocking){
	if(speed==0){
    9342:	81 11       	cpse	r24, r1
    9344:	03 c0       	rjmp	.+6      	; 0x934c <FadeIn+0xa>
		DDRC=0xff;
    9346:	8f ef       	ldi	r24, 0xFF	; 255
    9348:	87 b9       	out	0x07, r24	; 7
		return;
    934a:	08 95       	ret
	}
	fadeStep=1;
    934c:	91 e0       	ldi	r25, 0x01	; 1
    934e:	90 93 81 0d 	sts	0x0D81, r25
	fadeDir=1;
    9352:	90 93 7d 0d 	sts	0x0D7D, r25
	doFade(speed,blocking);
    9356:	0c 94 93 49 	jmp	0x9326	; 0x9326 <doFade>

0000935a <FadeOut>:
}

void FadeOut(unsigned char speed,bool blocking){
	if(speed==0){
    935a:	81 11       	cpse	r24, r1
    935c:	02 c0       	rjmp	.+4      	; 0x9362 <FadeOut+0x8>
		DDRC=0;
    935e:	17 b8       	out	0x07, r1	; 7
		return;
    9360:	08 95       	ret
	}
	
	fadeStep=FADER_STEPS;
    9362:	9c e0       	ldi	r25, 0x0C	; 12
    9364:	90 93 81 0d 	sts	0x0D81, r25
	fadeDir=-1;
    9368:	9f ef       	ldi	r25, 0xFF	; 255
    936a:	90 93 7d 0d 	sts	0x0D7D, r25
	doFade(speed,blocking);
    936e:	0c 94 93 49 	jmp	0x9326	; 0x9326 <doFade>

00009372 <ProcessFading>:
}


//called by the kernel at each field end
void ProcessFading(){
	if(fadeActive==true){
    9372:	80 91 7f 0d 	lds	r24, 0x0D7F
    9376:	88 23       	and	r24, r24
    9378:	01 f1       	breq	.+64     	; 0x93ba <ProcessFading+0x48>
		if(currFadeFrame==0){
    937a:	80 91 80 0d 	lds	r24, 0x0D80
    937e:	81 11       	cpse	r24, r1
    9380:	19 c0       	rjmp	.+50     	; 0x93b4 <ProcessFading+0x42>
			currFadeFrame=fadeSpeed;
    9382:	80 91 7c 0d 	lds	r24, 0x0D7C
    9386:	80 93 80 0d 	sts	0x0D80, r24
			DDRC = pgm_read_byte(&(fader[fadeStep-1]));
    938a:	e0 91 81 0d 	lds	r30, 0x0D81
    938e:	f0 e0       	ldi	r31, 0x00	; 0
    9390:	ef 5d       	subi	r30, 0xDF	; 223
    9392:	fe 4f       	sbci	r31, 0xFE	; 254
    9394:	e4 91       	lpm	r30, Z
    9396:	e7 b9       	out	0x07, r30	; 7
			fadeStep+=fadeDir;
    9398:	90 91 7d 0d 	lds	r25, 0x0D7D
    939c:	80 91 81 0d 	lds	r24, 0x0D81
    93a0:	89 0f       	add	r24, r25
    93a2:	80 93 81 0d 	sts	0x0D81, r24
			if(fadeStep==0 || fadeStep==(FADER_STEPS+1)){
    93a6:	88 23       	and	r24, r24
    93a8:	11 f0       	breq	.+4      	; 0x93ae <ProcessFading+0x3c>
    93aa:	8d 30       	cpi	r24, 0x0D	; 13
    93ac:	31 f4       	brne	.+12     	; 0x93ba <ProcessFading+0x48>
				fadeActive=false;
    93ae:	10 92 7f 0d 	sts	0x0D7F, r1
    93b2:	08 95       	ret
			}
		}else{
			currFadeFrame--;
    93b4:	81 50       	subi	r24, 0x01	; 1
    93b6:	80 93 80 0d 	sts	0x0D80, r24
    93ba:	08 95       	ret

000093bc <VideoModeVsync>:
	}

	//Callback invoked during hsync
	void VideoModeVsync(){
		
		ProcessFading();
    93bc:	0e 94 b9 49 	call	0x9372	; 0x9372 <ProcessFading>
		ProcessSprites();
    93c0:	0c 94 96 47 	jmp	0x8f2c	; 0x8f2c <ProcessSprites>

000093c4 <LBGetNextFrame>:
	u8 reversing;
	char** anims;
} Animation;

char* LBGetNextFrame(Animation* anim)
{
    93c4:	fc 01       	movw	r30, r24
	anim->looped = 0;
    93c6:	14 82       	std	Z+4, r1	; 0x04
	anim->frame_count += 1;
    93c8:	93 81       	ldd	r25, Z+3	; 0x03
    93ca:	9f 5f       	subi	r25, 0xFF	; 255
    93cc:	93 83       	std	Z+3, r25	; 0x03
	if (anim->frame_count < anim->frames_per_anim)
    93ce:	42 81       	ldd	r20, Z+2	; 0x02
    93d0:	80 81       	ld	r24, Z
    93d2:	26 81       	ldd	r18, Z+6	; 0x06
    93d4:	37 81       	ldd	r19, Z+7	; 0x07
    93d6:	94 17       	cp	r25, r20
    93d8:	30 f4       	brcc	.+12     	; 0x93e6 <LBGetNextFrame+0x22>
	{
		return anim->anims[anim->current_anim];
    93da:	f9 01       	movw	r30, r18
    93dc:	e8 0f       	add	r30, r24
    93de:	f1 1d       	adc	r31, r1
    93e0:	e8 0f       	add	r30, r24
    93e2:	f1 1d       	adc	r31, r1
    93e4:	12 c0       	rjmp	.+36     	; 0x940a <LBGetNextFrame+0x46>
	}
	anim->frame_count = 0;
    93e6:	13 82       	std	Z+3, r1	; 0x03
	anim->current_anim = (anim->current_anim + 1) % anim->anim_count;
    93e8:	90 e0       	ldi	r25, 0x00	; 0
    93ea:	01 96       	adiw	r24, 0x01	; 1
    93ec:	61 81       	ldd	r22, Z+1	; 0x01
    93ee:	70 e0       	ldi	r23, 0x00	; 0
    93f0:	0e 94 2e 68 	call	0xd05c	; 0xd05c <__divmodhi4>
    93f4:	80 83       	st	Z, r24
	if (anim->current_anim == 0) anim->looped = 1;
    93f6:	81 11       	cpse	r24, r1
    93f8:	02 c0       	rjmp	.+4      	; 0x93fe <LBGetNextFrame+0x3a>
    93fa:	41 e0       	ldi	r20, 0x01	; 1
    93fc:	44 83       	std	Z+4, r20	; 0x04
    93fe:	99 27       	eor	r25, r25
	return anim->anims[anim->current_anim];
    9400:	88 0f       	add	r24, r24
    9402:	99 1f       	adc	r25, r25
    9404:	f9 01       	movw	r30, r18
    9406:	e8 0f       	add	r30, r24
    9408:	f9 1f       	adc	r31, r25
    940a:	80 81       	ld	r24, Z
    940c:	91 81       	ldd	r25, Z+1	; 0x01
}
    940e:	08 95       	ret

00009410 <LBGetJoyPadState>:

void LBGetJoyPadState(JoyPadState* p, unsigned char index)
/*
 * Get the current joy pad button state for index controller
 */
{
    9410:	0f 93       	push	r16
    9412:	1f 93       	push	r17
    9414:	cf 93       	push	r28
    9416:	df 93       	push	r29
    9418:	1f 92       	push	r1
    941a:	cd b7       	in	r28, 0x3d	; 61
    941c:	de b7       	in	r29, 0x3e	; 62
    941e:	8c 01       	movw	r16, r24
	static unsigned int p_prev[2];

	p->held = ReadJoypad(index);
    9420:	86 2f       	mov	r24, r22
    9422:	69 83       	std	Y+1, r22	; 0x01
    9424:	0e 94 e7 3a 	call	0x75ce	; 0x75ce <ReadJoypad>
    9428:	d8 01       	movw	r26, r16
    942a:	15 96       	adiw	r26, 0x05	; 5
    942c:	9c 93       	st	X, r25
    942e:	8e 93       	st	-X, r24
    9430:	14 97       	sbiw	r26, 0x04	; 4
    9432:	69 81       	ldd	r22, Y+1	; 0x01
    9434:	e6 2f       	mov	r30, r22
    9436:	f0 e0       	ldi	r31, 0x00	; 0

	// Count held cycles
	if (p->held == 0 || p->held != p_prev[index])
    9438:	00 97       	sbiw	r24, 0x00	; 0
    943a:	51 f0       	breq	.+20     	; 0x9450 <LBGetJoyPadState+0x40>
    943c:	df 01       	movw	r26, r30
    943e:	aa 0f       	add	r26, r26
    9440:	bb 1f       	adc	r27, r27
    9442:	ac 50       	subi	r26, 0x0C	; 12
    9444:	b3 4f       	sbci	r27, 0xF3	; 243
    9446:	2d 91       	ld	r18, X+
    9448:	3c 91       	ld	r19, X
    944a:	82 17       	cp	r24, r18
    944c:	93 07       	cpc	r25, r19
    944e:	21 f0       	breq	.+8      	; 0x9458 <LBGetJoyPadState+0x48>
	    p->held_cycles = 0;
    9450:	d8 01       	movw	r26, r16
    9452:	16 96       	adiw	r26, 0x06	; 6
    9454:	1c 92       	st	X, r1
    9456:	07 c0       	rjmp	.+14     	; 0x9466 <LBGetJoyPadState+0x56>
	else
	    p->held_cycles += 1;
    9458:	d8 01       	movw	r26, r16
    945a:	16 96       	adiw	r26, 0x06	; 6
    945c:	2c 91       	ld	r18, X
    945e:	16 97       	sbiw	r26, 0x06	; 6
    9460:	2f 5f       	subi	r18, 0xFF	; 255
    9462:	16 96       	adiw	r26, 0x06	; 6
    9464:	2c 93       	st	X, r18

	p->pressed = p->held & (p->held ^ p_prev[index]);
    9466:	ee 0f       	add	r30, r30
    9468:	ff 1f       	adc	r31, r31
    946a:	ec 50       	subi	r30, 0x0C	; 12
    946c:	f3 4f       	sbci	r31, 0xF3	; 243
    946e:	20 81       	ld	r18, Z
    9470:	31 81       	ldd	r19, Z+1	; 0x01
    9472:	a9 01       	movw	r20, r18
    9474:	40 95       	com	r20
    9476:	50 95       	com	r21
    9478:	48 23       	and	r20, r24
    947a:	59 23       	and	r21, r25
    947c:	d8 01       	movw	r26, r16
    947e:	11 96       	adiw	r26, 0x01	; 1
    9480:	5c 93       	st	X, r21
    9482:	4e 93       	st	-X, r20
	p->released = p_prev[index] & (p->held ^ p_prev[index]);
    9484:	ac 01       	movw	r20, r24
    9486:	40 95       	com	r20
    9488:	50 95       	com	r21
    948a:	24 23       	and	r18, r20
    948c:	35 23       	and	r19, r21
    948e:	13 96       	adiw	r26, 0x03	; 3
    9490:	3c 93       	st	X, r19
    9492:	2e 93       	st	-X, r18
    9494:	12 97       	sbiw	r26, 0x02	; 2
	p_prev[index] = p->held;
    9496:	91 83       	std	Z+1, r25	; 0x01
    9498:	80 83       	st	Z, r24
}
    949a:	0f 90       	pop	r0
    949c:	df 91       	pop	r29
    949e:	cf 91       	pop	r28
    94a0:	1f 91       	pop	r17
    94a2:	0f 91       	pop	r16
    94a4:	08 95       	ret

000094a6 <LBPrintChar>:
	font_tiles_map = tiles_map;
}

void LBPrintChar(u8 x, u8 y, u8 code)
{
	if (code >= 48 && code <= 57)
    94a6:	90 ed       	ldi	r25, 0xD0	; 208
    94a8:	94 0f       	add	r25, r20
    94aa:	e0 91 82 0d 	lds	r30, 0x0D82
    94ae:	f0 91 83 0d 	lds	r31, 0x0D83
    94b2:	9a 30       	cpi	r25, 0x0A	; 10
    94b4:	38 f4       	brcc	.+14     	; 0x94c4 <LBPrintChar+0x1e>
	{
		SetTile(x, y, pgm_read_byte(&font_tiles_map[3+code-48]));
    94b6:	24 2f       	mov	r18, r20
    94b8:	30 e0       	ldi	r19, 0x00	; 0
    94ba:	2d 52       	subi	r18, 0x2D	; 45
    94bc:	31 09       	sbc	r19, r1
    94be:	e2 0f       	add	r30, r18
    94c0:	f3 1f       	adc	r31, r19
    94c2:	0c c0       	rjmp	.+24     	; 0x94dc <LBPrintChar+0x36>
	}
	else if (code >= 65 && code <= 90)
    94c4:	9f eb       	ldi	r25, 0xBF	; 191
    94c6:	94 0f       	add	r25, r20
    94c8:	9a 31       	cpi	r25, 0x1A	; 26
    94ca:	38 f4       	brcc	.+14     	; 0x94da <LBPrintChar+0x34>
	{
		SetTile(x, y, pgm_read_byte(&font_tiles_map[13+code-65]));
    94cc:	50 e0       	ldi	r21, 0x00	; 0
    94ce:	44 53       	subi	r20, 0x34	; 52
    94d0:	51 09       	sbc	r21, r1
    94d2:	e4 0f       	add	r30, r20
    94d4:	f5 1f       	adc	r31, r21
    94d6:	44 91       	lpm	r20, Z
    94d8:	03 c0       	rjmp	.+6      	; 0x94e0 <LBPrintChar+0x3a>
	}
	else
	{
		SetTile(x, y, pgm_read_byte(&font_tiles_map[2]));
    94da:	32 96       	adiw	r30, 0x02	; 2
    94dc:	e4 91       	lpm	r30, Z
    94de:	4e 2f       	mov	r20, r30
    94e0:	50 e0       	ldi	r21, 0x00	; 0
    94e2:	0c 94 c7 3a 	jmp	0x758e	; 0x758e <SetTile>

000094e6 <LBPrint>:
	}
}

void LBPrint(u8 x, u8 y, char* value)
{
    94e6:	ff 92       	push	r15
    94e8:	0f 93       	push	r16
    94ea:	1f 93       	push	r17
    94ec:	cf 93       	push	r28
    94ee:	df 93       	push	r29
    94f0:	d8 2f       	mov	r29, r24
    94f2:	f6 2e       	mov	r15, r22
    94f4:	8a 01       	movw	r16, r20
	u8 i = 0;
    94f6:	c0 e0       	ldi	r28, 0x00	; 0
    94f8:	8c 2f       	mov	r24, r28
    94fa:	8d 0f       	add	r24, r29
	u8 code = 0;
	while ((code = pgm_read_byte(&value[i])))
    94fc:	f8 01       	movw	r30, r16
    94fe:	ec 0f       	add	r30, r28
    9500:	f1 1d       	adc	r31, r1
    9502:	44 91       	lpm	r20, Z
    9504:	44 23       	and	r20, r20
    9506:	29 f0       	breq	.+10     	; 0x9512 <LBPrint+0x2c>
	{
		LBPrintChar(x++, y, code);
    9508:	6f 2d       	mov	r22, r15
    950a:	0e 94 53 4a 	call	0x94a6	; 0x94a6 <LBPrintChar>
		i++;
    950e:	cf 5f       	subi	r28, 0xFF	; 255
    9510:	f3 cf       	rjmp	.-26     	; 0x94f8 <LBPrint+0x12>
	}
}
    9512:	df 91       	pop	r29
    9514:	cf 91       	pop	r28
    9516:	1f 91       	pop	r17
    9518:	0f 91       	pop	r16
    951a:	ff 90       	pop	r15
    951c:	08 95       	ret

0000951e <LBPrintByte>:

void LBPrintByte(u8 x, u8 y, u8 value, char pad)
{
    951e:	df 92       	push	r13
    9520:	ef 92       	push	r14
    9522:	ff 92       	push	r15
    9524:	0f 93       	push	r16
    9526:	1f 93       	push	r17
    9528:	cf 93       	push	r28
    952a:	df 93       	push	r29
    952c:	1f 92       	push	r1
    952e:	cd b7       	in	r28, 0x3d	; 61
    9530:	de b7       	in	r29, 0x3e	; 62
    9532:	38 2f       	mov	r19, r24
    9534:	06 2f       	mov	r16, r22
    9536:	84 2f       	mov	r24, r20
    9538:	9d ef       	ldi	r25, 0xFD	; 253
    953a:	e9 2e       	mov	r14, r25
    953c:	e3 0e       	add	r14, r19
	for (u8 i = 0; i < 3; i++)
	{
		LBPrintChar(x--, y, value % 10 + 48);
    953e:	4a e0       	ldi	r20, 0x0A	; 10
    9540:	f4 2e       	mov	r15, r20
    9542:	1f ef       	ldi	r17, 0xFF	; 255
    9544:	13 0f       	add	r17, r19
    9546:	6f 2d       	mov	r22, r15
    9548:	0e 94 00 68 	call	0xd000	; 0xd000 <__udivmodqi4>
    954c:	d8 2e       	mov	r13, r24
    954e:	40 e3       	ldi	r20, 0x30	; 48
    9550:	49 0f       	add	r20, r25
    9552:	60 2f       	mov	r22, r16
    9554:	83 2f       	mov	r24, r19
    9556:	29 83       	std	Y+1, r18	; 0x01
    9558:	0e 94 53 4a 	call	0x94a6	; 0x94a6 <LBPrintChar>
		value /= 10;
    955c:	8d 2d       	mov	r24, r13
		if (!pad && value == 0) break;
    955e:	29 81       	ldd	r18, Y+1	; 0x01
    9560:	21 11       	cpse	r18, r1
    9562:	02 c0       	rjmp	.+4      	; 0x9568 <LBPrintByte+0x4a>
    9564:	dd 20       	and	r13, r13
    9566:	19 f0       	breq	.+6      	; 0x956e <LBPrintByte+0x50>
    9568:	31 2f       	mov	r19, r17
	}
}

void LBPrintByte(u8 x, u8 y, u8 value, char pad)
{
	for (u8 i = 0; i < 3; i++)
    956a:	1e 11       	cpse	r17, r14
    956c:	ea cf       	rjmp	.-44     	; 0x9542 <LBPrintByte+0x24>
	{
		LBPrintChar(x--, y, value % 10 + 48);
		value /= 10;
		if (!pad && value == 0) break;
	}
}
    956e:	0f 90       	pop	r0
    9570:	df 91       	pop	r29
    9572:	cf 91       	pop	r28
    9574:	1f 91       	pop	r17
    9576:	0f 91       	pop	r16
    9578:	ff 90       	pop	r15
    957a:	ef 90       	pop	r14
    957c:	df 90       	pop	r13
    957e:	08 95       	ret

00009580 <LBPrintInt>:

void LBPrintInt(u8 x, u8 y, u16 value, char pad)
{
    9580:	cf 92       	push	r12
    9582:	df 92       	push	r13
    9584:	ef 92       	push	r14
    9586:	ff 92       	push	r15
    9588:	0f 93       	push	r16
    958a:	1f 93       	push	r17
    958c:	cf 93       	push	r28
    958e:	df 93       	push	r29
    9590:	00 d0       	rcall	.+0      	; 0x9592 <LBPrintInt+0x12>
    9592:	cd b7       	in	r28, 0x3d	; 61
    9594:	de b7       	in	r29, 0x3e	; 62
    9596:	38 2f       	mov	r19, r24
    9598:	16 2f       	mov	r17, r22
    959a:	ca 01       	movw	r24, r20
    959c:	4b ef       	ldi	r20, 0xFB	; 251
    959e:	d4 2e       	mov	r13, r20
    95a0:	d3 0e       	add	r13, r19
	for (u8 i = 0; i < 5; i++)
	{
		LBPrintChar(x--, y, value % 10 + 48);
    95a2:	5a e0       	ldi	r21, 0x0A	; 10
    95a4:	e5 2e       	mov	r14, r21
    95a6:	f1 2c       	mov	r15, r1
    95a8:	cc 24       	eor	r12, r12
    95aa:	ca 94       	dec	r12
    95ac:	c3 0e       	add	r12, r19
    95ae:	b7 01       	movw	r22, r14
    95b0:	0e 94 1a 68 	call	0xd034	; 0xd034 <__udivmodhi4>
    95b4:	06 2f       	mov	r16, r22
    95b6:	40 e3       	ldi	r20, 0x30	; 48
    95b8:	48 0f       	add	r20, r24
    95ba:	61 2f       	mov	r22, r17
    95bc:	83 2f       	mov	r24, r19
    95be:	29 83       	std	Y+1, r18	; 0x01
    95c0:	7a 83       	std	Y+2, r23	; 0x02
    95c2:	0e 94 53 4a 	call	0x94a6	; 0x94a6 <LBPrintChar>
		value /= 10;
    95c6:	80 2f       	mov	r24, r16
    95c8:	7a 81       	ldd	r23, Y+2	; 0x02
    95ca:	97 2f       	mov	r25, r23
		if (!pad && value == 0) break;
    95cc:	29 81       	ldd	r18, Y+1	; 0x01
    95ce:	21 11       	cpse	r18, r1
    95d0:	02 c0       	rjmp	.+4      	; 0x95d6 <LBPrintInt+0x56>
    95d2:	00 97       	sbiw	r24, 0x00	; 0
    95d4:	19 f0       	breq	.+6      	; 0x95dc <LBPrintInt+0x5c>
    95d6:	3c 2d       	mov	r19, r12
	}
}

void LBPrintInt(u8 x, u8 y, u16 value, char pad)
{
	for (u8 i = 0; i < 5; i++)
    95d8:	cd 10       	cpse	r12, r13
    95da:	e6 cf       	rjmp	.-52     	; 0x95a8 <LBPrintInt+0x28>
	{
		LBPrintChar(x--, y, value % 10 + 48);
		value /= 10;
		if (!pad && value == 0) break;
	}
}
    95dc:	0f 90       	pop	r0
    95de:	0f 90       	pop	r0
    95e0:	df 91       	pop	r29
    95e2:	cf 91       	pop	r28
    95e4:	1f 91       	pop	r17
    95e6:	0f 91       	pop	r16
    95e8:	ff 90       	pop	r15
    95ea:	ef 90       	pop	r14
    95ec:	df 90       	pop	r13
    95ee:	cf 90       	pop	r12
    95f0:	08 95       	ret

000095f2 <LBCollides>:
	}
}

u8 LBCollides(u16 x1, u16 y1, u8 width1, u8 height1,
						 u16 x2, u16 y2, u8 width2, u8 height2)
{
    95f2:	af 92       	push	r10
    95f4:	cf 92       	push	r12
    95f6:	ef 92       	push	r14
    95f8:	ff 92       	push	r15
    95fa:	0f 93       	push	r16
    95fc:	1f 93       	push	r17
    95fe:	fc 01       	movw	r30, r24
	if (y1 + height1 <= y2) return 0;
    9600:	cb 01       	movw	r24, r22
    9602:	82 0f       	add	r24, r18
    9604:	91 1d       	adc	r25, r1
    9606:	e8 16       	cp	r14, r24
    9608:	f9 06       	cpc	r15, r25
    960a:	88 f4       	brcc	.+34     	; 0x962e <LBCollides+0x3c>
	if (y1 >= y2 + height2) return 0;
    960c:	ea 0c       	add	r14, r10
    960e:	f1 1c       	adc	r15, r1
    9610:	6e 15       	cp	r22, r14
    9612:	7f 05       	cpc	r23, r15
    9614:	60 f4       	brcc	.+24     	; 0x962e <LBCollides+0x3c>
	if (x1 + width1 <= x2) return 0;
    9616:	cf 01       	movw	r24, r30
    9618:	84 0f       	add	r24, r20
    961a:	91 1d       	adc	r25, r1
    961c:	08 17       	cp	r16, r24
    961e:	19 07       	cpc	r17, r25
    9620:	30 f4       	brcc	.+12     	; 0x962e <LBCollides+0x3c>
	if (x1 >= x2 + width2) return 0;
    9622:	0c 0d       	add	r16, r12
    9624:	11 1d       	adc	r17, r1
    9626:	81 e0       	ldi	r24, 0x01	; 1
    9628:	e0 17       	cp	r30, r16
    962a:	f1 07       	cpc	r31, r17
    962c:	08 f0       	brcs	.+2      	; 0x9630 <LBCollides+0x3e>
}

u8 LBCollides(u16 x1, u16 y1, u8 width1, u8 height1,
						 u16 x2, u16 y2, u8 width2, u8 height2)
{
	if (y1 + height1 <= y2) return 0;
    962e:	80 e0       	ldi	r24, 0x00	; 0
	if (y1 >= y2 + height2) return 0;
	if (x1 + width1 <= x2) return 0;
	if (x1 >= x2 + width2) return 0;
	return 1;
}
    9630:	1f 91       	pop	r17
    9632:	0f 91       	pop	r16
    9634:	ff 90       	pop	r15
    9636:	ef 90       	pop	r14
    9638:	cf 90       	pop	r12
    963a:	af 90       	pop	r10
    963c:	08 95       	ret

0000963e <LBRandom>:

u8 LBRandom(u8 from, u8 to)
/*
 * Return a random number between 'from' and 'to'.
 */
{
    963e:	cf 93       	push	r28
    9640:	df 93       	push	r29
    9642:	d8 2f       	mov	r29, r24
    9644:	c6 2f       	mov	r28, r22
	u16 tmp = GetPrngNumber(0) % 255;
    9646:	80 e0       	ldi	r24, 0x00	; 0
    9648:	90 e0       	ldi	r25, 0x00	; 0
    964a:	0e 94 b5 3c 	call	0x796a	; 0x796a <GetPrngNumber>
    964e:	6f ef       	ldi	r22, 0xFF	; 255
    9650:	70 e0       	ldi	r23, 0x00	; 0
    9652:	0e 94 1a 68 	call	0xd034	; 0xd034 <__udivmodhi4>
	return (((u8)tmp) % (to - from)) + from;
    9656:	6c 2f       	mov	r22, r28
    9658:	70 e0       	ldi	r23, 0x00	; 0
    965a:	6d 1b       	sub	r22, r29
    965c:	71 09       	sbc	r23, r1
    965e:	0e 94 2e 68 	call	0xd05c	; 0xd05c <__divmodhi4>
}
    9662:	8d 0f       	add	r24, r29
    9664:	df 91       	pop	r29
    9666:	cf 91       	pop	r28
    9668:	08 95       	ret

0000966a <LBWaitSeconds>:

void LBWaitSeconds(u8 seconds)
{
    966a:	cf 93       	push	r28
    966c:	df 93       	push	r29
    966e:	d8 2f       	mov	r29, r24
	for(u8 i = 0; i < seconds; i++)
    9670:	c0 e0       	ldi	r28, 0x00	; 0
    9672:	cd 17       	cp	r28, r29
    9674:	31 f0       	breq	.+12     	; 0x9682 <LBWaitSeconds+0x18>
	{
		WaitUs(65535);
    9676:	8f ef       	ldi	r24, 0xFF	; 255
    9678:	9f ef       	ldi	r25, 0xFF	; 255
    967a:	0e 94 f3 3a 	call	0x75e6	; 0x75e6 <WaitUs>
	return (((u8)tmp) % (to - from)) + from;
}

void LBWaitSeconds(u8 seconds)
{
	for(u8 i = 0; i < seconds; i++)
    967e:	cf 5f       	subi	r28, 0xFF	; 255
    9680:	f8 cf       	rjmp	.-16     	; 0x9672 <LBWaitSeconds+0x8>
	{
		WaitUs(65535);
	}
}
    9682:	df 91       	pop	r29
    9684:	cf 91       	pop	r28
    9686:	08 95       	ret

00009688 <LBMapSprite>:

void LBMapSprite(u8 startSprite,const char *map,u8 spriteFlags)
{
    9688:	df 92       	push	r13
    968a:	ef 92       	push	r14
    968c:	ff 92       	push	r15
    968e:	0f 93       	push	r16
    9690:	1f 93       	push	r17
    9692:	cf 93       	push	r28
    9694:	df 93       	push	r29
    9696:	db 01       	movw	r26, r22
	u8 mapWidth=pgm_read_byte(&(map[0]));
    9698:	fb 01       	movw	r30, r22
    969a:	14 91       	lpm	r17, Z
	u8 mapHeight=pgm_read_byte(&(map[1]));
    969c:	31 96       	adiw	r30, 0x01	; 1
    969e:	64 91       	lpm	r22, Z
    96a0:	5f ef       	ldi	r21, 0xFF	; 255
    96a2:	51 0f       	add	r21, r17
	s8 x,y,dx,dy,t; 

	if(spriteFlags & SPRITE_FLIP_X)
    96a4:	24 2f       	mov	r18, r20
    96a6:	21 70       	andi	r18, 0x01	; 1
    96a8:	40 ff       	sbrs	r20, 0
    96aa:	04 c0       	rjmp	.+8      	; 0x96b4 <LBMapSprite+0x2c>
	{
		x=(mapWidth-1);
    96ac:	95 2f       	mov	r25, r21
		dx=-1;
    96ae:	ff 24       	eor	r15, r15
    96b0:	fa 94       	dec	r15
    96b2:	03 c0       	rjmp	.+6      	; 0x96ba <LBMapSprite+0x32>
	}
	else
	{
		x=0;
		dx=1;
    96b4:	ff 24       	eor	r15, r15
    96b6:	f3 94       	inc	r15
		x=(mapWidth-1);
		dx=-1;
	}
	else
	{
		x=0;
    96b8:	90 e0       	ldi	r25, 0x00	; 0
		dx=1;
	}

	if(spriteFlags & SPRITE_FLIP_Y)
    96ba:	41 ff       	sbrs	r20, 1
    96bc:	05 c0       	rjmp	.+10     	; 0x96c8 <LBMapSprite+0x40>
	{
		y=(mapHeight-1);
    96be:	7f ef       	ldi	r23, 0xFF	; 255
    96c0:	76 0f       	add	r23, r22
		dy=-1;
    96c2:	ee 24       	eor	r14, r14
    96c4:	ea 94       	dec	r14
    96c6:	03 c0       	rjmp	.+6      	; 0x96ce <LBMapSprite+0x46>
	}
	else
	{
		y=0;
		dy=1;
    96c8:	ee 24       	eor	r14, r14
    96ca:	e3 94       	inc	r14
		y=(mapHeight-1);
		dy=-1;
	}
	else
	{
		y=0;
    96cc:	70 e0       	ldi	r23, 0x00	; 0
    96ce:	21 11       	cpse	r18, r1
    96d0:	01 c0       	rjmp	.+2      	; 0x96d4 <LBMapSprite+0x4c>
    96d2:	50 e0       	ldi	r21, 0x00	; 0
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
    96d4:	00 e0       	ldi	r16, 0x00	; 0
    96d6:	06 17       	cp	r16, r22
    96d8:	09 f1       	breq	.+66     	; 0x971c <LBMapSprite+0x94>
	{
		for(u8 cx=0;cx<mapWidth;cx++)
		{
			t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    96da:	71 03       	mulsu	r23, r17
    96dc:	e0 01       	movw	r28, r0
    96de:	11 24       	eor	r1, r1
    96e0:	d8 2e       	mov	r13, r24
    96e2:	d1 0e       	add	r13, r17
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
	{
		for(u8 cx=0;cx<mapWidth;cx++)
    96e4:	8d 15       	cp	r24, r13
    96e6:	b1 f0       	breq	.+44     	; 0x9714 <LBMapSprite+0x8c>
		{
			t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    96e8:	9e 01       	movw	r18, r28
    96ea:	29 0f       	add	r18, r25
    96ec:	31 1d       	adc	r19, r1
    96ee:	97 fd       	sbrc	r25, 7
    96f0:	3a 95       	dec	r19
    96f2:	2e 5f       	subi	r18, 0xFE	; 254
    96f4:	3f 4f       	sbci	r19, 0xFF	; 255
    96f6:	fd 01       	movw	r30, r26
    96f8:	e2 0f       	add	r30, r18
    96fa:	f3 1f       	adc	r31, r19
    96fc:	24 91       	lpm	r18, Z
			extendedSprites[startSprite].tileIndex=t;
    96fe:	34 e0       	ldi	r19, 0x04	; 4
    9700:	83 9f       	mul	r24, r19
    9702:	f0 01       	movw	r30, r0
    9704:	11 24       	eor	r1, r1
    9706:	e0 55       	subi	r30, 0x50	; 80
    9708:	f0 4f       	sbci	r31, 0xF0	; 240
    970a:	22 83       	std	Z+2, r18	; 0x02
			extendedSprites[startSprite++].flags=spriteFlags;
    970c:	8f 5f       	subi	r24, 0xFF	; 255
    970e:	43 83       	std	Z+3, r20	; 0x03
    9710:	9f 0d       	add	r25, r15
    9712:	e8 cf       	rjmp	.-48     	; 0x96e4 <LBMapSprite+0x5c>
    9714:	7e 0d       	add	r23, r14
	{
		y=0;
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
    9716:	0f 5f       	subi	r16, 0xFF	; 255
			extendedSprites[startSprite].tileIndex=t;
			extendedSprites[startSprite++].flags=spriteFlags;
			x+=dx;
		}
		y+=dy;
		x=(spriteFlags & SPRITE_FLIP_X)?(mapWidth-1):0;
    9718:	95 2f       	mov	r25, r21
    971a:	dd cf       	rjmp	.-70     	; 0x96d6 <LBMapSprite+0x4e>
	}
}
    971c:	df 91       	pop	r29
    971e:	cf 91       	pop	r28
    9720:	1f 91       	pop	r17
    9722:	0f 91       	pop	r16
    9724:	ff 90       	pop	r15
    9726:	ef 90       	pop	r14
    9728:	df 90       	pop	r13
    972a:	08 95       	ret

0000972c <LBMoveSprite>:

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
    972c:	df 92       	push	r13
    972e:	ef 92       	push	r14
    9730:	ff 92       	push	r15
    9732:	0f 93       	push	r16
    9734:	1f 93       	push	r17
    9736:	cf 93       	push	r28
    9738:	df 93       	push	r29
		{
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
    973a:	a0 91 b4 0c 	lds	r26, 0x0CB4
    973e:	98 e0       	ldi	r25, 0x08	; 8
    9740:	a9 9f       	mul	r26, r25
    9742:	70 01       	movw	r14, r0
    9744:	11 24       	eor	r1, r1
    9746:	50 e0       	ldi	r21, 0x00	; 0
    9748:	38 ef       	ldi	r19, 0xF8	; 248
    974a:	a3 9f       	mul	r26, r19
    974c:	30 2d       	mov	r19, r0
    974e:	11 24       	eor	r1, r1
	}
}

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
	for(u8 dy=0;dy<height;dy++)
    9750:	70 e0       	ldi	r23, 0x00	; 0
    9752:	70 17       	cp	r23, r16
    9754:	09 f1       	breq	.+66     	; 0x9798 <LBMoveSprite+0x6c>
    9756:	d4 2e       	mov	r13, r20
    9758:	13 2f       	mov	r17, r19
    975a:	14 0f       	add	r17, r20
    975c:	b8 2f       	mov	r27, r24
    975e:	b2 0f       	add	r27, r18
    9760:	96 2f       	mov	r25, r22
	{
		for(u8 dx=0;dx<width;dx++)
    9762:	8b 17       	cp	r24, r27
    9764:	a9 f0       	breq	.+42     	; 0x9790 <LBMoveSprite+0x64>
		{
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
    9766:	c4 e0       	ldi	r28, 0x04	; 4
    9768:	8c 9f       	mul	r24, r28
    976a:	f0 01       	movw	r30, r0
    976c:	11 24       	eor	r1, r1
    976e:	ef 01       	movw	r28, r30
    9770:	c0 55       	subi	r28, 0x50	; 80
    9772:	d0 4f       	sbci	r29, 0xF0	; 240
    9774:	98 83       	st	Y, r25
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
    9776:	a0 32       	cpi	r26, 0x20	; 32
    9778:	28 f4       	brcc	.+10     	; 0x9784 <LBMoveSprite+0x58>
    977a:	e4 16       	cp	r14, r20
    977c:	f5 06       	cpc	r15, r21
    977e:	14 f4       	brge	.+4      	; 0x9784 <LBMoveSprite+0x58>
				{
					u8 tmp=(y+(TILE_HEIGHT*dy))-(Screen.scrollHeight*TILE_HEIGHT);
					extendedSprites[startSprite].y=tmp;
    9780:	19 83       	std	Y+1, r17	; 0x01
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
				{
    9782:	03 c0       	rjmp	.+6      	; 0x978a <LBMoveSprite+0x5e>
					u8 tmp=(y+(TILE_HEIGHT*dy))-(Screen.scrollHeight*TILE_HEIGHT);
					extendedSprites[startSprite].y=tmp;
				}
				else
				{
					extendedSprites[startSprite].y=y+(TILE_HEIGHT*dy);
    9784:	e0 55       	subi	r30, 0x50	; 80
    9786:	f0 4f       	sbci	r31, 0xF0	; 240
    9788:	d1 82       	std	Z+1, r13	; 0x01
				{
					extendedSprites[startSprite].y=y+(TILE_HEIGHT*dy);
				}
			#endif

			startSprite++;
    978a:	8f 5f       	subi	r24, 0xFF	; 255
    978c:	98 5f       	subi	r25, 0xF8	; 248
    978e:	e9 cf       	rjmp	.-46     	; 0x9762 <LBMoveSprite+0x36>
	}
}

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
	for(u8 dy=0;dy<height;dy++)
    9790:	7f 5f       	subi	r23, 0xFF	; 255
    9792:	48 5f       	subi	r20, 0xF8	; 248
    9794:	5f 4f       	sbci	r21, 0xFF	; 255
    9796:	dd cf       	rjmp	.-70     	; 0x9752 <LBMoveSprite+0x26>
			#endif

			startSprite++;
		}
	}	
}
    9798:	df 91       	pop	r29
    979a:	cf 91       	pop	r28
    979c:	1f 91       	pop	r17
    979e:	0f 91       	pop	r16
    97a0:	ff 90       	pop	r15
    97a2:	ef 90       	pop	r14
    97a4:	df 90       	pop	r13
    97a6:	08 95       	ret

000097a8 <LBRotateSprites>:

void LBRotateSprites()
{
    97a8:	80 e0       	ldi	r24, 0x00	; 0
    97aa:	90 e0       	ldi	r25, 0x00	; 0
    97ac:	dc 01       	movw	r26, r24
    97ae:	a0 55       	subi	r26, 0x50	; 80
    97b0:	b0 4f       	sbci	r27, 0xF0	; 240
    97b2:	fc 01       	movw	r30, r24
    97b4:	e0 5f       	subi	r30, 0xF0	; 240
    97b6:	fa 4f       	sbci	r31, 0xFA	; 250
	static u8 rotate_index = ROTATE_SPRITES_FROM;
	u8 mappedSpriteCount = MAX_EXTENDED_SPRITES;
	
	for (u8 i = 0; i < ROTATE_SPRITES_FROM; i++)
	{
		sprites[i].flags = extendedSprites[i].flags;
    97b8:	13 96       	adiw	r26, 0x03	; 3
    97ba:	2c 91       	ld	r18, X
    97bc:	13 97       	sbiw	r26, 0x03	; 3
    97be:	23 83       	std	Z+3, r18	; 0x03
		sprites[i].tileIndex = extendedSprites[i].tileIndex;
    97c0:	12 96       	adiw	r26, 0x02	; 2
    97c2:	2c 91       	ld	r18, X
    97c4:	12 97       	sbiw	r26, 0x02	; 2
    97c6:	22 83       	std	Z+2, r18	; 0x02
		sprites[i].x = extendedSprites[i].x;
    97c8:	2c 91       	ld	r18, X
    97ca:	20 83       	st	Z, r18
		sprites[i].y = extendedSprites[i].y;
    97cc:	11 96       	adiw	r26, 0x01	; 1
    97ce:	2c 91       	ld	r18, X
    97d0:	21 83       	std	Z+1, r18	; 0x01
    97d2:	04 96       	adiw	r24, 0x04	; 4
void LBRotateSprites()
{
	static u8 rotate_index = ROTATE_SPRITES_FROM;
	u8 mappedSpriteCount = MAX_EXTENDED_SPRITES;
	
	for (u8 i = 0; i < ROTATE_SPRITES_FROM; i++)
    97d4:	88 33       	cpi	r24, 0x38	; 56
    97d6:	91 05       	cpc	r25, r1
    97d8:	49 f7       	brne	.-46     	; 0x97ac <LBRotateSprites+0x4>
    97da:	80 91 01 05 	lds	r24, 0x0501
    97de:	20 e0       	ldi	r18, 0x00	; 0
    97e0:	30 e0       	ldi	r19, 0x00	; 0
		sprites[i].y = extendedSprites[i].y;
	}
	
	for (u8 i = ROTATE_SPRITES_FROM; i < MAX_SPRITES; i++)
	{
		sprites[i].flags = extendedSprites[rotate_index].flags;
    97e2:	94 e0       	ldi	r25, 0x04	; 4
    97e4:	89 9f       	mul	r24, r25
    97e6:	d0 01       	movw	r26, r0
    97e8:	11 24       	eor	r1, r1
    97ea:	a0 55       	subi	r26, 0x50	; 80
    97ec:	b0 4f       	sbci	r27, 0xF0	; 240
    97ee:	13 96       	adiw	r26, 0x03	; 3
    97f0:	9c 91       	ld	r25, X
    97f2:	13 97       	sbiw	r26, 0x03	; 3
    97f4:	f9 01       	movw	r30, r18
    97f6:	e0 5f       	subi	r30, 0xF0	; 240
    97f8:	fa 4f       	sbci	r31, 0xFA	; 250
    97fa:	93 af       	std	Z+59, r25	; 0x3b
		sprites[i].tileIndex = extendedSprites[rotate_index].tileIndex;
    97fc:	12 96       	adiw	r26, 0x02	; 2
    97fe:	9c 91       	ld	r25, X
    9800:	12 97       	sbiw	r26, 0x02	; 2
    9802:	92 af       	std	Z+58, r25	; 0x3a
		sprites[i].x = extendedSprites[rotate_index].x;
    9804:	9c 91       	ld	r25, X
    9806:	90 af       	std	Z+56, r25	; 0x38
		sprites[i].y = extendedSprites[rotate_index].y;
    9808:	11 96       	adiw	r26, 0x01	; 1
    980a:	9c 91       	ld	r25, X
    980c:	91 af       	std	Z+57, r25	; 0x39
		rotate_index += 1;
    980e:	8f 5f       	subi	r24, 0xFF	; 255
		if (rotate_index >= MAX_EXTENDED_SPRITES) rotate_index = ROTATE_SPRITES_FROM;
    9810:	84 31       	cpi	r24, 0x14	; 20
    9812:	08 f0       	brcs	.+2      	; 0x9816 <LBRotateSprites+0x6e>
    9814:	8e e0       	ldi	r24, 0x0E	; 14
    9816:	2c 5f       	subi	r18, 0xFC	; 252
    9818:	3f 4f       	sbci	r19, 0xFF	; 255
		sprites[i].tileIndex = extendedSprites[i].tileIndex;
		sprites[i].x = extendedSprites[i].x;
		sprites[i].y = extendedSprites[i].y;
	}
	
	for (u8 i = ROTATE_SPRITES_FROM; i < MAX_SPRITES; i++)
    981a:	28 30       	cpi	r18, 0x08	; 8
    981c:	31 05       	cpc	r19, r1
    981e:	09 f7       	brne	.-62     	; 0x97e2 <LBRotateSprites+0x3a>
    9820:	80 93 01 05 	sts	0x0501, r24
    9824:	08 95       	ret

00009826 <is_space>:
char* enemy_shot_anim[1];
char* expl_anim[3];

u8 is_space()
{
	return (game.current_level_index % 2 != 0);
    9826:	80 91 bb 0d 	lds	r24, 0x0DBB
}
    982a:	81 70       	andi	r24, 0x01	; 1
    982c:	08 95       	ret

0000982e <init_default_high_scores>:

void init_default_high_scores()
{
	scores.id = EEPROM_SCORES_ID;
    982e:	8c e8       	ldi	r24, 0x8C	; 140
    9830:	90 e0       	ldi	r25, 0x00	; 0
    9832:	90 93 87 0d 	sts	0x0D87, r25
    9836:	80 93 86 0d 	sts	0x0D86, r24
    983a:	80 e0       	ldi	r24, 0x00	; 0
    983c:	90 e0       	ldi	r25, 0x00	; 0
    983e:	fc 01       	movw	r30, r24
    9840:	ec 5d       	subi	r30, 0xDC	; 220
    9842:	f4 4f       	sbci	r31, 0xF4	; 244
	for (u8 i = 0; i < 30; i++)
	{
		scores.data[i] = pgm_read_byte(&default_scores[i]);
    9844:	e4 91       	lpm	r30, Z
    9846:	dc 01       	movw	r26, r24
    9848:	aa 57       	subi	r26, 0x7A	; 122
    984a:	b2 4f       	sbci	r27, 0xF2	; 242
    984c:	12 96       	adiw	r26, 0x02	; 2
    984e:	ec 93       	st	X, r30
    9850:	01 96       	adiw	r24, 0x01	; 1
}

void init_default_high_scores()
{
	scores.id = EEPROM_SCORES_ID;
	for (u8 i = 0; i < 30; i++)
    9852:	8e 31       	cpi	r24, 0x1E	; 30
    9854:	91 05       	cpc	r25, r1
    9856:	99 f7       	brne	.-26     	; 0x983e <init_default_high_scores+0x10>
	{
		scores.data[i] = pgm_read_byte(&default_scores[i]);
	}
}
    9858:	08 95       	ret

0000985a <init_enemy_state>:

void init_enemy_state()
{
    985a:	80 e0       	ldi	r24, 0x00	; 0
    985c:	90 e0       	ldi	r25, 0x00	; 0
    985e:	9c 01       	movw	r18, r24
    9860:	2a 55       	subi	r18, 0x5A	; 90
    9862:	32 4f       	sbci	r19, 0xF2	; 242
    9864:	f9 01       	movw	r30, r18
    9866:	e2 54       	subi	r30, 0x42	; 66
    9868:	ff 4f       	sbci	r31, 0xFF	; 255
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		game.enemies[i].active = 0;
    986a:	10 82       	st	Z, r1
    986c:	7a 96       	adiw	r30, 0x1a	; 26
		for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
		{
			game.enemies[i].shot[j].active = 0;
    986e:	10 82       	st	Z, r1
    9870:	8e 5b       	subi	r24, 0xBE	; 190
    9872:	9f 4f       	sbci	r25, 0xFF	; 255
	}
}

void init_enemy_state()
{
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    9874:	8a 34       	cpi	r24, 0x4A	; 74
    9876:	21 e0       	ldi	r18, 0x01	; 1
    9878:	92 07       	cpc	r25, r18
    987a:	89 f7       	brne	.-30     	; 0x985e <init_enemy_state+0x4>
		for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
		{
			game.enemies[i].shot[j].active = 0;
		}
	}
	game.active_enemies = 0;
    987c:	10 92 c6 0d 	sts	0x0DC6, r1
    9880:	08 95       	ret

00009882 <init_player_state>:
}

void init_player_state()
{
	if (is_space())
    9882:	0e 94 13 4c 	call	0x9826	; 0x9826 <is_space>
    9886:	88 23       	and	r24, r24
    9888:	f9 f0       	breq	.+62     	; 0x98c8 <init_player_state+0x46>
	{
		game.player.width = 3;
    988a:	83 e0       	ldi	r24, 0x03	; 3
    988c:	80 93 dc 0d 	sts	0x0DDC, r24
		game.player.height = 1;
    9890:	81 e0       	ldi	r24, 0x01	; 1
    9892:	80 93 dd 0d 	sts	0x0DDD, r24
		game.player.run.anim_count = 2;
    9896:	82 e0       	ldi	r24, 0x02	; 2
    9898:	80 93 36 0e 	sts	0x0E36, r24
		game.player.run.frames_per_anim = EXPLOSION_FRAME_COUNT;
    989c:	85 e0       	ldi	r24, 0x05	; 5
    989e:	80 93 37 0e 	sts	0x0E37, r24
		game.player.run.anims = run_anim;
    98a2:	80 e0       	ldi	r24, 0x00	; 0
    98a4:	90 e1       	ldi	r25, 0x10	; 16
    98a6:	90 93 3c 0e 	sts	0x0E3C, r25
    98aa:	80 93 3b 0e 	sts	0x0E3B, r24
		game.player.run.anims[0] = (char*) map_hero_ship_0;
    98ae:	85 ed       	ldi	r24, 0xD5	; 213
    98b0:	97 e3       	ldi	r25, 0x37	; 55
    98b2:	90 93 01 10 	sts	0x1001, r25
    98b6:	80 93 00 10 	sts	0x1000, r24
		game.player.run.anims[1] = (char*) map_hero_ship_1;
    98ba:	80 ed       	ldi	r24, 0xD0	; 208
    98bc:	97 e3       	ldi	r25, 0x37	; 55
    98be:	90 93 03 10 	sts	0x1003, r25
    98c2:	80 93 02 10 	sts	0x1002, r24
    98c6:	2a c0       	rjmp	.+84     	; 0x991c <init_player_state+0x9a>
	}
	else
	{
		game.player.width = 2;
    98c8:	82 e0       	ldi	r24, 0x02	; 2
    98ca:	80 93 dc 0d 	sts	0x0DDC, r24
		game.player.height = 3;
    98ce:	83 e0       	ldi	r24, 0x03	; 3
    98d0:	80 93 dd 0d 	sts	0x0DDD, r24
		game.player.run.anim_count = 4;
    98d4:	84 e0       	ldi	r24, 0x04	; 4
    98d6:	80 93 36 0e 	sts	0x0E36, r24
		game.player.run.frames_per_anim = FRAMES_PER_RUN_CYCLE;
    98da:	8c e0       	ldi	r24, 0x0C	; 12
    98dc:	80 93 37 0e 	sts	0x0E37, r24
		game.player.run.anims = run_anim;
    98e0:	80 e0       	ldi	r24, 0x00	; 0
    98e2:	90 e1       	ldi	r25, 0x10	; 16
    98e4:	90 93 3c 0e 	sts	0x0E3C, r25
    98e8:	80 93 3b 0e 	sts	0x0E3B, r24
		game.player.run.anims[0] = (char*) map_hero_step_0;
    98ec:	8f ef       	ldi	r24, 0xFF	; 255
    98ee:	97 e3       	ldi	r25, 0x37	; 55
    98f0:	90 93 01 10 	sts	0x1001, r25
    98f4:	80 93 00 10 	sts	0x1000, r24
		game.player.run.anims[1] = (char*) map_hero_step_1;
    98f8:	87 ef       	ldi	r24, 0xF7	; 247
    98fa:	97 e3       	ldi	r25, 0x37	; 55
    98fc:	90 93 03 10 	sts	0x1003, r25
    9900:	80 93 02 10 	sts	0x1002, r24
		game.player.run.anims[2] = (char*) map_hero_step_2;
    9904:	8f ee       	ldi	r24, 0xEF	; 239
    9906:	97 e3       	ldi	r25, 0x37	; 55
    9908:	90 93 05 10 	sts	0x1005, r25
    990c:	80 93 04 10 	sts	0x1004, r24
		game.player.run.anims[3] = (char*) map_hero_step_3;
    9910:	87 ee       	ldi	r24, 0xE7	; 231
    9912:	97 e3       	ldi	r25, 0x37	; 55
    9914:	90 93 07 10 	sts	0x1007, r25
    9918:	80 93 06 10 	sts	0x1006, r24
	}
	game.player.direction = D_RIGHT;
    991c:	81 e0       	ldi	r24, 0x01	; 1
    991e:	80 93 db 0d 	sts	0x0DDB, r24
	game.player.flags = IDLE;
    9922:	98 e0       	ldi	r25, 0x08	; 8
    9924:	90 93 d9 0d 	sts	0x0DD9, r25
	game.player.shield = PLAYER_SHIELD;
    9928:	9a e0       	ldi	r25, 0x0A	; 10
    992a:	90 93 de 0d 	sts	0x0DDE, r25
	game.player.idle.anim_count = 1;
    992e:	80 93 2e 0e 	sts	0x0E2E, r24
	game.player.idle.frames_per_anim = 1;
    9932:	80 93 2f 0e 	sts	0x0E2F, r24
	game.player.idle.anims = idle_anim;
    9936:	22 e1       	ldi	r18, 0x12	; 18
    9938:	30 e1       	ldi	r19, 0x10	; 16
    993a:	30 93 34 0e 	sts	0x0E34, r19
    993e:	20 93 33 0e 	sts	0x0E33, r18
	game.player.idle.anims[0] = (char*) map_hero_idle;
    9942:	27 e0       	ldi	r18, 0x07	; 7
    9944:	38 e3       	ldi	r19, 0x38	; 56
    9946:	30 93 13 10 	sts	0x1013, r19
    994a:	20 93 12 10 	sts	0x1012, r18
	
	game.player.jump.anim_count = 1;
    994e:	80 93 3e 0e 	sts	0x0E3E, r24
	game.player.jump.frames_per_anim = 1;
    9952:	80 93 3f 0e 	sts	0x0E3F, r24
	game.player.jump.anims = jump_anim;
    9956:	24 e8       	ldi	r18, 0x84	; 132
    9958:	3d e0       	ldi	r19, 0x0D	; 13
    995a:	30 93 44 0e 	sts	0x0E44, r19
    995e:	20 93 43 0e 	sts	0x0E43, r18
	game.player.jump.anims[0] = (char*) map_hero_jump;
    9962:	2f ed       	ldi	r18, 0xDF	; 223
    9964:	37 e3       	ldi	r19, 0x37	; 55
    9966:	30 93 85 0d 	sts	0x0D85, r19
    996a:	20 93 84 0d 	sts	0x0D84, r18
	
	game.player.prone.anim_count = 1;
    996e:	80 93 46 0e 	sts	0x0E46, r24
	game.player.prone.frames_per_anim = 1;
    9972:	80 93 47 0e 	sts	0x0E47, r24
	game.player.prone.anims = prone_anim;
    9976:	88 ea       	ldi	r24, 0xA8	; 168
    9978:	9f e0       	ldi	r25, 0x0F	; 15
    997a:	90 93 4c 0e 	sts	0x0E4C, r25
    997e:	80 93 4b 0e 	sts	0x0E4B, r24
	game.player.prone.anims[0] = (char*) map_hero_prone;
    9982:	8a ed       	ldi	r24, 0xDA	; 218
    9984:	97 e3       	ldi	r25, 0x37	; 55
    9986:	90 93 a9 0f 	sts	0x0FA9, r25
    998a:	80 93 a8 0f 	sts	0x0FA8, r24
	
	game.player.expl.anim_count = 3;
    998e:	83 e0       	ldi	r24, 0x03	; 3
    9990:	80 93 4e 0e 	sts	0x0E4E, r24
	game.player.expl.frames_per_anim = EXPLOSION_FRAME_COUNT;
    9994:	85 e0       	ldi	r24, 0x05	; 5
    9996:	80 93 4f 0e 	sts	0x0E4F, r24
	game.player.expl.anims = expl_anim;
    999a:	8c e0       	ldi	r24, 0x0C	; 12
    999c:	90 e1       	ldi	r25, 0x10	; 16
    999e:	90 93 54 0e 	sts	0x0E54, r25
    99a2:	80 93 53 0e 	sts	0x0E53, r24
	game.player.expl.anims[0] = (char*) map_explosion_0;
    99a6:	87 e2       	ldi	r24, 0x27	; 39
    99a8:	98 e3       	ldi	r25, 0x38	; 56
    99aa:	90 93 0d 10 	sts	0x100D, r25
    99ae:	80 93 0c 10 	sts	0x100C, r24
	game.player.expl.anims[1] = (char*) map_explosion_1;
    99b2:	84 e2       	ldi	r24, 0x24	; 36
    99b4:	98 e3       	ldi	r25, 0x38	; 56
    99b6:	90 93 0f 10 	sts	0x100F, r25
    99ba:	80 93 0e 10 	sts	0x100E, r24
	game.player.expl.anims[2] = (char*) map_explosion_2;
    99be:	81 e2       	ldi	r24, 0x21	; 33
    99c0:	98 e3       	ldi	r25, 0x38	; 56
    99c2:	90 93 11 10 	sts	0x1011, r25
    99c6:	80 93 10 10 	sts	0x1010, r24
    99ca:	e3 ef       	ldi	r30, 0xF3	; 243
    99cc:	fd e0       	ldi	r31, 0x0D	; 13
	
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
	{
		game.player.shot[i].hit_count = 1;
    99ce:	81 e0       	ldi	r24, 0x01	; 1
		game.player.shot[i].shot_type = BASIC_SHOT;
		game.player.shot[i].anim.anim_count = 1;
		game.player.shot[i].anim.frames_per_anim = 1;
		game.player.shot[i].anim.anims = shot_anim;
    99d0:	2a e0       	ldi	r18, 0x0A	; 10
    99d2:	30 e1       	ldi	r19, 0x10	; 16
    99d4:	df 01       	movw	r26, r30
    99d6:	14 97       	sbiw	r26, 0x04	; 4
	game.player.expl.anims[1] = (char*) map_explosion_1;
	game.player.expl.anims[2] = (char*) map_explosion_2;
	
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
	{
		game.player.shot[i].hit_count = 1;
    99d8:	8c 93       	st	X, r24
    99da:	11 97       	sbiw	r26, 0x01	; 1
		game.player.shot[i].shot_type = BASIC_SHOT;
    99dc:	1c 92       	st	X, r1
    99de:	14 96       	adiw	r26, 0x04	; 4
		game.player.shot[i].anim.anim_count = 1;
    99e0:	8c 93       	st	X, r24
		game.player.shot[i].anim.frames_per_anim = 1;
    99e2:	80 83       	st	Z, r24
		game.player.shot[i].anim.anims = shot_anim;
    99e4:	35 83       	std	Z+5, r19	; 0x05
    99e6:	24 83       	std	Z+4, r18	; 0x04
    99e8:	7a 96       	adiw	r30, 0x1a	; 26
	game.player.expl.anims = expl_anim;
	game.player.expl.anims[0] = (char*) map_explosion_0;
	game.player.expl.anims[1] = (char*) map_explosion_1;
	game.player.expl.anims[2] = (char*) map_explosion_2;
	
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
    99ea:	9e e0       	ldi	r25, 0x0E	; 14
    99ec:	e1 34       	cpi	r30, 0x41	; 65
    99ee:	f9 07       	cpc	r31, r25
    99f0:	89 f7       	brne	.-30     	; 0x99d4 <init_player_state+0x152>
    99f2:	89 eb       	ldi	r24, 0xB9	; 185
    99f4:	97 e3       	ldi	r25, 0x37	; 55
    99f6:	90 93 0b 10 	sts	0x100B, r25
    99fa:	80 93 0a 10 	sts	0x100A, r24
    99fe:	08 95       	ret

00009a00 <init_enemy_shot>:
		game.player.shot[i].anim.anims[0] = (char*) map_hero_shot;
	}
}

void init_enemy_shot(u8 i, u16 x, u16 y)
{
    9a00:	ef 92       	push	r14
    9a02:	ff 92       	push	r15
    9a04:	0f 93       	push	r16
    9a06:	1f 93       	push	r17
    9a08:	cf 93       	push	r28
    9a0a:	df 93       	push	r29
    9a0c:	8a 01       	movw	r16, r20
	game.enemies[i].expl.anim_count = 3;
    9a0e:	22 e4       	ldi	r18, 0x42	; 66
    9a10:	82 9f       	mul	r24, r18
    9a12:	c0 01       	movw	r24, r0
    9a14:	11 24       	eor	r1, r1
    9a16:	ec 01       	movw	r28, r24
    9a18:	ca 55       	subi	r28, 0x5A	; 90
    9a1a:	d2 4f       	sbci	r29, 0xF2	; 242
    9a1c:	fe 01       	movw	r30, r28
    9a1e:	e6 51       	subi	r30, 0x16	; 22
    9a20:	ff 4f       	sbci	r31, 0xFF	; 255
    9a22:	83 e0       	ldi	r24, 0x03	; 3
    9a24:	80 83       	st	Z, r24
	game.enemies[i].expl.frames_per_anim = EXPLOSION_FRAME_COUNT;
    9a26:	31 96       	adiw	r30, 0x01	; 1
    9a28:	85 e0       	ldi	r24, 0x05	; 5
    9a2a:	80 83       	st	Z, r24
	game.enemies[i].expl.anims = expl_anim;
    9a2c:	de 01       	movw	r26, r28
    9a2e:	a1 51       	subi	r26, 0x11	; 17
    9a30:	bf 4f       	sbci	r27, 0xFF	; 255
    9a32:	ec e0       	ldi	r30, 0x0C	; 12
    9a34:	f0 e1       	ldi	r31, 0x10	; 16
    9a36:	11 96       	adiw	r26, 0x01	; 1
    9a38:	fc 93       	st	X, r31
    9a3a:	ee 93       	st	-X, r30
	game.enemies[i].expl.anims[0] = (char*) map_explosion_0;
    9a3c:	87 e2       	ldi	r24, 0x27	; 39
    9a3e:	98 e3       	ldi	r25, 0x38	; 56
    9a40:	91 83       	std	Z+1, r25	; 0x01
    9a42:	80 83       	st	Z, r24
	game.enemies[i].expl.anims[1] = (char*) map_explosion_1;
    9a44:	84 e2       	ldi	r24, 0x24	; 36
    9a46:	98 e3       	ldi	r25, 0x38	; 56
    9a48:	93 83       	std	Z+3, r25	; 0x03
    9a4a:	82 83       	std	Z+2, r24	; 0x02
	game.enemies[i].expl.anims[2] = (char*) map_explosion_2;
    9a4c:	81 e2       	ldi	r24, 0x21	; 33
    9a4e:	98 e3       	ldi	r25, 0x38	; 56
    9a50:	95 83       	std	Z+5, r25	; 0x05
    9a52:	84 83       	std	Z+4, r24	; 0x04
		
	for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
	{
		game.enemies[i].shot[j].hit_count = 1;
    9a54:	fe 01       	movw	r30, r28
    9a56:	e9 52       	subi	r30, 0x29	; 41
    9a58:	ff 4f       	sbci	r31, 0xFF	; 255
    9a5a:	81 e0       	ldi	r24, 0x01	; 1
    9a5c:	80 83       	st	Z, r24
		game.enemies[i].shot[j].active = 0;
    9a5e:	31 96       	adiw	r30, 0x01	; 1
    9a60:	10 82       	st	Z, r1
		game.enemies[i].shot[j].shot_type = BASIC_ENEMY_SHOT;
    9a62:	32 97       	sbiw	r30, 0x02	; 2
    9a64:	80 83       	st	Z, r24
		game.enemies[i].shot[j].anim.anim_count = 1;
    9a66:	34 96       	adiw	r30, 0x04	; 4
    9a68:	80 83       	st	Z, r24
		game.enemies[i].shot[j].anim.frames_per_anim = 1;
    9a6a:	31 96       	adiw	r30, 0x01	; 1
    9a6c:	80 83       	st	Z, r24
		game.enemies[i].shot[j].anim.anims = enemy_shot_anim;
    9a6e:	50 97       	sbiw	r26, 0x10	; 16
    9a70:	e8 e0       	ldi	r30, 0x08	; 8
    9a72:	f0 e1       	ldi	r31, 0x10	; 16
    9a74:	ed 93       	st	X+, r30
    9a76:	fc 93       	st	X, r31
		game.enemies[i].shot[j].anim.anims[0] = (char*) map_enemy_shot;
    9a78:	83 e8       	ldi	r24, 0x83	; 131
    9a7a:	97 e3       	ldi	r25, 0x37	; 55
    9a7c:	91 83       	std	Z+1, r25	; 0x01
    9a7e:	80 83       	st	Z, r24
		game.enemies[i].shot[j].shared.vx = 0;
    9a80:	fe 01       	movw	r30, r28
    9a82:	ed 52       	subi	r30, 0x2D	; 45
    9a84:	ff 4f       	sbci	r31, 0xFF	; 255
    9a86:	11 82       	std	Z+1, r1	; 0x01
    9a88:	10 82       	st	Z, r1
		game.enemies[i].shot[j].shared.vy = 0;
    9a8a:	3c 97       	sbiw	r30, 0x0c	; 12
    9a8c:	10 82       	st	Z, r1
    9a8e:	11 82       	std	Z+1, r1	; 0x01
    9a90:	12 82       	std	Z+2, r1	; 0x02
    9a92:	13 82       	std	Z+3, r1	; 0x03
		game.enemies[i].shot[j].shared.x = x;
    9a94:	7e 01       	movw	r14, r28
    9a96:	8b ec       	ldi	r24, 0xCB	; 203
    9a98:	e8 0e       	add	r14, r24
    9a9a:	f1 1c       	adc	r15, r1
    9a9c:	80 e0       	ldi	r24, 0x00	; 0
    9a9e:	90 e0       	ldi	r25, 0x00	; 0
    9aa0:	0e 94 dd 68 	call	0xd1ba	; 0xd1ba <__floatunsisf>
    9aa4:	f7 01       	movw	r30, r14
    9aa6:	60 83       	st	Z, r22
    9aa8:	71 83       	std	Z+1, r23	; 0x01
    9aaa:	82 83       	std	Z+2, r24	; 0x02
    9aac:	93 83       	std	Z+3, r25	; 0x03
		game.enemies[i].shot[j].shared.y = y;
    9aae:	c1 53       	subi	r28, 0x31	; 49
    9ab0:	df 4f       	sbci	r29, 0xFF	; 255
    9ab2:	b8 01       	movw	r22, r16
    9ab4:	80 e0       	ldi	r24, 0x00	; 0
    9ab6:	90 e0       	ldi	r25, 0x00	; 0
    9ab8:	0e 94 dd 68 	call	0xd1ba	; 0xd1ba <__floatunsisf>
    9abc:	68 83       	st	Y, r22
    9abe:	79 83       	std	Y+1, r23	; 0x01
    9ac0:	8a 83       	std	Y+2, r24	; 0x02
    9ac2:	9b 83       	std	Y+3, r25	; 0x03
	}
}
    9ac4:	df 91       	pop	r29
    9ac6:	cf 91       	pop	r28
    9ac8:	1f 91       	pop	r17
    9aca:	0f 91       	pop	r16
    9acc:	ff 90       	pop	r15
    9ace:	ef 90       	pop	r14
    9ad0:	08 95       	ret

00009ad2 <init_enemy_spider>:

void init_enemy_spider(u8 i, u16 x, u16 y)
{
    9ad2:	af 92       	push	r10
    9ad4:	bf 92       	push	r11
    9ad6:	cf 92       	push	r12
    9ad8:	df 92       	push	r13
    9ada:	ef 92       	push	r14
    9adc:	ff 92       	push	r15
    9ade:	1f 93       	push	r17
    9ae0:	cf 93       	push	r28
    9ae2:	df 93       	push	r29
    9ae4:	18 2f       	mov	r17, r24
    9ae6:	7b 01       	movw	r14, r22
    9ae8:	6a 01       	movw	r12, r20
	game.enemies[i].active = 1;
    9aea:	82 e4       	ldi	r24, 0x42	; 66
    9aec:	18 9f       	mul	r17, r24
    9aee:	e0 01       	movw	r28, r0
    9af0:	11 24       	eor	r1, r1
    9af2:	ca 55       	subi	r28, 0x5A	; 90
    9af4:	d2 4f       	sbci	r29, 0xF2	; 242
    9af6:	fe 01       	movw	r30, r28
    9af8:	e2 54       	subi	r30, 0x42	; 66
    9afa:	ff 4f       	sbci	r31, 0xFF	; 255
    9afc:	91 e0       	ldi	r25, 0x01	; 1
    9afe:	90 83       	st	Z, r25
	game.enemies[i].direction = D_LEFT;
    9b00:	32 96       	adiw	r30, 0x02	; 2
    9b02:	10 82       	st	Z, r1
	game.enemies[i].flags = IDLE;
    9b04:	31 97       	sbiw	r30, 0x01	; 1
    9b06:	88 e0       	ldi	r24, 0x08	; 8
    9b08:	80 83       	st	Z, r24
	game.enemies[i].width = 1;
    9b0a:	32 96       	adiw	r30, 0x02	; 2
    9b0c:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    9b0e:	31 96       	adiw	r30, 0x01	; 1
    9b10:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_SPIDER;
    9b12:	31 96       	adiw	r30, 0x01	; 1
    9b14:	10 82       	st	Z, r1
	game.enemies[i].frame_count = 0;
    9b16:	31 96       	adiw	r30, 0x01	; 1
    9b18:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    9b1a:	31 96       	adiw	r30, 0x01	; 1
    9b1c:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_SPIDER_SHIELD;
    9b1e:	31 96       	adiw	r30, 0x01	; 1
    9b20:	82 e0       	ldi	r24, 0x02	; 2
    9b22:	80 83       	st	Z, r24
	
	game.enemies[i].anim.anim_count = 2;
    9b24:	7c 96       	adiw	r30, 0x1c	; 28
    9b26:	80 83       	st	Z, r24
	game.enemies[i].anim.frames_per_anim = SPIDER_FRAMES_PER_IDLE;
    9b28:	31 96       	adiw	r30, 0x01	; 1
    9b2a:	8a e0       	ldi	r24, 0x0A	; 10
    9b2c:	80 83       	st	Z, r24
	game.enemies[i].anim.anims = spider_anim;
    9b2e:	de 01       	movw	r26, r28
    9b30:	a9 51       	subi	r26, 0x19	; 25
    9b32:	bf 4f       	sbci	r27, 0xFF	; 255
    9b34:	ea ea       	ldi	r30, 0xAA	; 170
    9b36:	ff e0       	ldi	r31, 0x0F	; 15
    9b38:	ed 93       	st	X+, r30
    9b3a:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_spider_0;
    9b3c:	8d e7       	ldi	r24, 0x7D	; 125
    9b3e:	97 e3       	ldi	r25, 0x37	; 55
    9b40:	91 83       	std	Z+1, r25	; 0x01
    9b42:	80 83       	st	Z, r24
	game.enemies[i].anim.anims[1] = (char*) map_enemy_spider_1;
    9b44:	8a e7       	ldi	r24, 0x7A	; 122
    9b46:	97 e3       	ldi	r25, 0x37	; 55
    9b48:	93 83       	std	Z+3, r25	; 0x03
    9b4a:	82 83       	std	Z+2, r24	; 0x02
	game.enemies[i].shared.gravity = 0;
    9b4c:	fe 01       	movw	r30, r28
    9b4e:	e3 54       	subi	r30, 0x43	; 67
    9b50:	ff 4f       	sbci	r31, 0xFF	; 255
    9b52:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = 0;
    9b54:	32 97       	sbiw	r30, 0x02	; 2
    9b56:	11 82       	std	Z+1, r1	; 0x01
    9b58:	10 82       	st	Z, r1
	game.enemies[i].shared.vy = 0;
    9b5a:	3c 97       	sbiw	r30, 0x0c	; 12
    9b5c:	10 82       	st	Z, r1
    9b5e:	11 82       	std	Z+1, r1	; 0x01
    9b60:	12 82       	std	Z+2, r1	; 0x02
    9b62:	13 82       	std	Z+3, r1	; 0x03
	game.enemies[i].shared.x = x;
    9b64:	5e 01       	movw	r10, r28
    9b66:	e3 eb       	ldi	r30, 0xB3	; 179
    9b68:	ae 0e       	add	r10, r30
    9b6a:	b1 1c       	adc	r11, r1
    9b6c:	80 e0       	ldi	r24, 0x00	; 0
    9b6e:	90 e0       	ldi	r25, 0x00	; 0
    9b70:	0e 94 dd 68 	call	0xd1ba	; 0xd1ba <__floatunsisf>
    9b74:	f5 01       	movw	r30, r10
    9b76:	60 83       	st	Z, r22
    9b78:	71 83       	std	Z+1, r23	; 0x01
    9b7a:	82 83       	std	Z+2, r24	; 0x02
    9b7c:	93 83       	std	Z+3, r25	; 0x03
	game.enemies[i].shared.y = y;
    9b7e:	c9 54       	subi	r28, 0x49	; 73
    9b80:	df 4f       	sbci	r29, 0xFF	; 255
    9b82:	b6 01       	movw	r22, r12
    9b84:	80 e0       	ldi	r24, 0x00	; 0
    9b86:	90 e0       	ldi	r25, 0x00	; 0
    9b88:	0e 94 dd 68 	call	0xd1ba	; 0xd1ba <__floatunsisf>
    9b8c:	68 83       	st	Y, r22
    9b8e:	79 83       	std	Y+1, r23	; 0x01
    9b90:	8a 83       	std	Y+2, r24	; 0x02
    9b92:	9b 83       	std	Y+3, r25	; 0x03
	
	init_enemy_shot(i, x, y);
    9b94:	a6 01       	movw	r20, r12
    9b96:	b7 01       	movw	r22, r14
    9b98:	81 2f       	mov	r24, r17
}
    9b9a:	df 91       	pop	r29
    9b9c:	cf 91       	pop	r28
    9b9e:	1f 91       	pop	r17
    9ba0:	ff 90       	pop	r15
    9ba2:	ef 90       	pop	r14
    9ba4:	df 90       	pop	r13
    9ba6:	cf 90       	pop	r12
    9ba8:	bf 90       	pop	r11
    9baa:	af 90       	pop	r10
	game.enemies[i].shared.vx = 0;
	game.enemies[i].shared.vy = 0;
	game.enemies[i].shared.x = x;
	game.enemies[i].shared.y = y;
	
	init_enemy_shot(i, x, y);
    9bac:	0c 94 00 4d 	jmp	0x9a00	; 0x9a00 <init_enemy_shot>

00009bb0 <init_enemy_shark>:
}

void init_enemy_shark(u8 i, u16 x, u16 y)
{
    9bb0:	af 92       	push	r10
    9bb2:	bf 92       	push	r11
    9bb4:	cf 92       	push	r12
    9bb6:	df 92       	push	r13
    9bb8:	ef 92       	push	r14
    9bba:	ff 92       	push	r15
    9bbc:	1f 93       	push	r17
    9bbe:	cf 93       	push	r28
    9bc0:	df 93       	push	r29
    9bc2:	18 2f       	mov	r17, r24
    9bc4:	7b 01       	movw	r14, r22
    9bc6:	6a 01       	movw	r12, r20
	game.enemies[i].active = 1;
    9bc8:	82 e4       	ldi	r24, 0x42	; 66
    9bca:	18 9f       	mul	r17, r24
    9bcc:	e0 01       	movw	r28, r0
    9bce:	11 24       	eor	r1, r1
    9bd0:	ca 55       	subi	r28, 0x5A	; 90
    9bd2:	d2 4f       	sbci	r29, 0xF2	; 242
    9bd4:	fe 01       	movw	r30, r28
    9bd6:	e2 54       	subi	r30, 0x42	; 66
    9bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    9bda:	91 e0       	ldi	r25, 0x01	; 1
    9bdc:	90 83       	st	Z, r25
	game.enemies[i].width = 1;
    9bde:	33 96       	adiw	r30, 0x03	; 3
    9be0:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    9be2:	31 96       	adiw	r30, 0x01	; 1
    9be4:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_SHARK;
    9be6:	31 96       	adiw	r30, 0x01	; 1
    9be8:	90 83       	st	Z, r25
	game.enemies[i].frame_count = 0;
    9bea:	31 96       	adiw	r30, 0x01	; 1
    9bec:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    9bee:	31 96       	adiw	r30, 0x01	; 1
    9bf0:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_SHARK_SHIELD;
    9bf2:	31 96       	adiw	r30, 0x01	; 1
    9bf4:	84 e0       	ldi	r24, 0x04	; 4
    9bf6:	80 83       	st	Z, r24
	
	game.enemies[i].anim.anim_count = 1;
    9bf8:	7c 96       	adiw	r30, 0x1c	; 28
    9bfa:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = 1;
    9bfc:	31 96       	adiw	r30, 0x01	; 1
    9bfe:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = shark_anim;
    9c00:	de 01       	movw	r26, r28
    9c02:	a9 51       	subi	r26, 0x19	; 25
    9c04:	bf 4f       	sbci	r27, 0xFF	; 255
    9c06:	ee ea       	ldi	r30, 0xAE	; 174
    9c08:	ff e0       	ldi	r31, 0x0F	; 15
    9c0a:	ed 93       	st	X+, r30
    9c0c:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_shark;
    9c0e:	80 e8       	ldi	r24, 0x80	; 128
    9c10:	97 e3       	ldi	r25, 0x37	; 55
    9c12:	91 83       	std	Z+1, r25	; 0x01
    9c14:	80 83       	st	Z, r24
	game.enemies[i].shared.gravity = 0;
    9c16:	fe 01       	movw	r30, r28
    9c18:	e3 54       	subi	r30, 0x43	; 67
    9c1a:	ff 4f       	sbci	r31, 0xFF	; 255
    9c1c:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = SHARK_SPEED;
    9c1e:	32 97       	sbiw	r30, 0x02	; 2
    9c20:	84 e1       	ldi	r24, 0x14	; 20
    9c22:	90 e0       	ldi	r25, 0x00	; 0
    9c24:	91 83       	std	Z+1, r25	; 0x01
    9c26:	80 83       	st	Z, r24
	game.enemies[i].shared.vy = 0;
    9c28:	3c 97       	sbiw	r30, 0x0c	; 12
    9c2a:	10 82       	st	Z, r1
    9c2c:	11 82       	std	Z+1, r1	; 0x01
    9c2e:	12 82       	std	Z+2, r1	; 0x02
    9c30:	13 82       	std	Z+3, r1	; 0x03
	game.enemies[i].shared.x = x;
    9c32:	5e 01       	movw	r10, r28
    9c34:	e3 eb       	ldi	r30, 0xB3	; 179
    9c36:	ae 0e       	add	r10, r30
    9c38:	b1 1c       	adc	r11, r1
    9c3a:	80 e0       	ldi	r24, 0x00	; 0
    9c3c:	90 e0       	ldi	r25, 0x00	; 0
    9c3e:	0e 94 dd 68 	call	0xd1ba	; 0xd1ba <__floatunsisf>
    9c42:	f5 01       	movw	r30, r10
    9c44:	60 83       	st	Z, r22
    9c46:	71 83       	std	Z+1, r23	; 0x01
    9c48:	82 83       	std	Z+2, r24	; 0x02
    9c4a:	93 83       	std	Z+3, r25	; 0x03
	game.enemies[i].shared.y = y;
    9c4c:	c9 54       	subi	r28, 0x49	; 73
    9c4e:	df 4f       	sbci	r29, 0xFF	; 255
    9c50:	b6 01       	movw	r22, r12
    9c52:	80 e0       	ldi	r24, 0x00	; 0
    9c54:	90 e0       	ldi	r25, 0x00	; 0
    9c56:	0e 94 dd 68 	call	0xd1ba	; 0xd1ba <__floatunsisf>
    9c5a:	68 83       	st	Y, r22
    9c5c:	79 83       	std	Y+1, r23	; 0x01
    9c5e:	8a 83       	std	Y+2, r24	; 0x02
    9c60:	9b 83       	std	Y+3, r25	; 0x03
	
	init_enemy_shot(i, x, y);
    9c62:	a6 01       	movw	r20, r12
    9c64:	b7 01       	movw	r22, r14
    9c66:	81 2f       	mov	r24, r17
}
    9c68:	df 91       	pop	r29
    9c6a:	cf 91       	pop	r28
    9c6c:	1f 91       	pop	r17
    9c6e:	ff 90       	pop	r15
    9c70:	ef 90       	pop	r14
    9c72:	df 90       	pop	r13
    9c74:	cf 90       	pop	r12
    9c76:	bf 90       	pop	r11
    9c78:	af 90       	pop	r10
	game.enemies[i].shared.vx = SHARK_SPEED;
	game.enemies[i].shared.vy = 0;
	game.enemies[i].shared.x = x;
	game.enemies[i].shared.y = y;
	
	init_enemy_shot(i, x, y);
    9c7a:	0c 94 00 4d 	jmp	0x9a00	; 0x9a00 <init_enemy_shot>

00009c7e <load_eeprom>:
 *  0x01 = EEPROM_ERROR_INVALID_BLOCK
 *  0x02 = EEPROM_ERROR_FULL
 *  0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 *  0x04 = EEPROM_ERROR_NOT_FORMATTED
 */
{
    9c7e:	cf 93       	push	r28
    9c80:	df 93       	push	r29
    9c82:	ec 01       	movw	r28, r24
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
    9c84:	bc 01       	movw	r22, r24
    9c86:	88 81       	ld	r24, Y
    9c88:	99 81       	ldd	r25, Y+1	; 0x01
    9c8a:	0e 94 82 3c 	call	0x7904	; 0x7904 <EepromReadBlock>
	if (status == 0x03)
    9c8e:	83 30       	cpi	r24, 0x03	; 3
    9c90:	29 f4       	brne	.+10     	; 0x9c9c <load_eeprom+0x1e>
	{
		status = EepromWriteBlock(block);
    9c92:	ce 01       	movw	r24, r28
	}
}
    9c94:	df 91       	pop	r29
    9c96:	cf 91       	pop	r28
{
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
	if (status == 0x03)
	{
		status = EepromWriteBlock(block);
    9c98:	0c 94 38 3c 	jmp	0x7870	; 0x7870 <EepromWriteBlock>
	}
}
    9c9c:	df 91       	pop	r29
    9c9e:	cf 91       	pop	r28
    9ca0:	08 95       	ret

00009ca2 <clear_overlay>:
{
	SetTile(x, y, level_tile);
}

void clear_overlay(u8 overlayHeight)
{
    9ca2:	1f 93       	push	r17
    9ca4:	cf 93       	push	r28
    9ca6:	df 93       	push	r29
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
    9ca8:	d0 e0       	ldi	r29, 0x00	; 0
    9caa:	10 e2       	ldi	r17, 0x20	; 32
    9cac:	18 0f       	add	r17, r24
{
	SetTile(x, y, level_tile);
}

void clear_overlay(u8 overlayHeight)
{
    9cae:	c0 e2       	ldi	r28, 0x20	; 32
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
	{
		for(u8 y = 0; y < overlayHeight; y++)
    9cb0:	c1 17       	cp	r28, r17
    9cb2:	41 f0       	breq	.+16     	; 0x9cc4 <clear_overlay+0x22>
		{
			SetTile(x, VRAM_TILES_V+y, 0);
    9cb4:	40 e0       	ldi	r20, 0x00	; 0
    9cb6:	50 e0       	ldi	r21, 0x00	; 0
    9cb8:	6c 2f       	mov	r22, r28
    9cba:	8d 2f       	mov	r24, r29
    9cbc:	0e 94 c7 3a 	call	0x758e	; 0x758e <SetTile>
    9cc0:	cf 5f       	subi	r28, 0xFF	; 255
    9cc2:	f6 cf       	rjmp	.-20     	; 0x9cb0 <clear_overlay+0xe>
	SetTile(x, y, level_tile);
}

void clear_overlay(u8 overlayHeight)
{
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
    9cc4:	df 5f       	subi	r29, 0xFF	; 255
    9cc6:	dc 31       	cpi	r29, 0x1C	; 28
    9cc8:	91 f7       	brne	.-28     	; 0x9cae <clear_overlay+0xc>
		for(u8 y = 0; y < overlayHeight; y++)
		{
			SetTile(x, VRAM_TILES_V+y, 0);
		}
	}
}
    9cca:	df 91       	pop	r29
    9ccc:	cf 91       	pop	r28
    9cce:	1f 91       	pop	r17
    9cd0:	08 95       	ret

00009cd2 <get_level_tile>:
{
	return 21;
}

u8 get_level_tile(char* level_data, u16 x, u16 y)
{
    9cd2:	df 92       	push	r13
    9cd4:	ef 92       	push	r14
    9cd6:	ff 92       	push	r15
    9cd8:	0f 93       	push	r16
    9cda:	1f 93       	push	r17
    9cdc:	cf 93       	push	r28
    9cde:	df 93       	push	r29
    9ce0:	8c 01       	movw	r16, r24
    9ce2:	7b 01       	movw	r14, r22
    9ce4:	ea 01       	movw	r28, r20
	u16 mega_tile_index = 0;
	u16 mega_tile_offset = 0;
	u8 map_x = 0;
	u8 map_y = 0;

	if (is_space())
    9ce6:	0e 94 13 4c 	call	0x9826	; 0x9826 <is_space>
    9cea:	d0 90 bc 0d 	lds	r13, 0x0DBC
    9cee:	88 23       	and	r24, r24
    9cf0:	29 f1       	breq	.+74     	; 0x9d3c <get_level_tile+0x6a>
	{
		map_x = x / MAP_SPACE_MEGA_TILES_MEGA_TILE_WIDTH;
		map_y = y / MAP_SPACE_MEGA_TILES_MEGA_TILE_HEIGHT;
    9cf2:	ce 01       	movw	r24, r28
    9cf4:	65 e0       	ldi	r22, 0x05	; 5
    9cf6:	70 e0       	ldi	r23, 0x00	; 0
    9cf8:	0e 94 1a 68 	call	0xd034	; 0xd034 <__udivmodhi4>
	u8 map_x = 0;
	u8 map_y = 0;

	if (is_space())
	{
		map_x = x / MAP_SPACE_MEGA_TILES_MEGA_TILE_WIDTH;
    9cfc:	f7 01       	movw	r30, r14
    9cfe:	f6 95       	lsr	r31
    9d00:	e7 95       	ror	r30
    9d02:	f6 95       	lsr	r31
    9d04:	e7 95       	ror	r30
    9d06:	ff 27       	eor	r31, r31
		map_y = y / MAP_SPACE_MEGA_TILES_MEGA_TILE_HEIGHT;
		mega_tile_offset = (y % MAP_SPACE_MEGA_TILES_MEGA_TILE_HEIGHT)*MAP_SPACE_MEGA_TILES_MEGA_TILE_WIDTH + (x % MAP_SPACE_MEGA_TILES_MEGA_TILE_WIDTH);
		mega_tile_index = pgm_read_byte(2+(&level_data[map_y*game.raw_level_width + map_x]));
    9d08:	6d 9d       	mul	r22, r13
    9d0a:	e0 0d       	add	r30, r0
    9d0c:	f1 1d       	adc	r31, r1
    9d0e:	11 24       	eor	r1, r1
    9d10:	32 96       	adiw	r30, 0x02	; 2
    9d12:	e0 0f       	add	r30, r16
    9d14:	f1 1f       	adc	r31, r17
    9d16:	64 91       	lpm	r22, Z

	if (is_space())
	{
		map_x = x / MAP_SPACE_MEGA_TILES_MEGA_TILE_WIDTH;
		map_y = y / MAP_SPACE_MEGA_TILES_MEGA_TILE_HEIGHT;
		mega_tile_offset = (y % MAP_SPACE_MEGA_TILES_MEGA_TILE_HEIGHT)*MAP_SPACE_MEGA_TILES_MEGA_TILE_WIDTH + (x % MAP_SPACE_MEGA_TILES_MEGA_TILE_WIDTH);
    9d18:	f7 01       	movw	r30, r14
    9d1a:	e3 70       	andi	r30, 0x03	; 3
    9d1c:	ff 27       	eor	r31, r31
    9d1e:	9c 01       	movw	r18, r24
    9d20:	22 0f       	add	r18, r18
    9d22:	33 1f       	adc	r19, r19
    9d24:	22 0f       	add	r18, r18
    9d26:	33 1f       	adc	r19, r19
    9d28:	e2 0f       	add	r30, r18
    9d2a:	f3 1f       	adc	r31, r19
		mega_tile_index = pgm_read_byte(2+(&level_data[map_y*game.raw_level_width + map_x]));
		mega_tile_index *= MAP_SPACE_MEGA_TILES_MEGA_TILE_WIDTH*MAP_SPACE_MEGA_TILES_MEGA_TILE_HEIGHT;
		return pgm_read_byte(&map_space_mega_tiles[mega_tile_index+mega_tile_offset]);
    9d2c:	84 e1       	ldi	r24, 0x14	; 20
    9d2e:	68 9f       	mul	r22, r24
    9d30:	e0 0d       	add	r30, r0
    9d32:	f1 1d       	adc	r31, r1
    9d34:	11 24       	eor	r1, r1
    9d36:	ef 5c       	subi	r30, 0xCF	; 207
    9d38:	f3 4a       	sbci	r31, 0xA3	; 163
    9d3a:	27 c0       	rjmp	.+78     	; 0x9d8a <get_level_tile+0xb8>
	}
	else
	{
		map_x = x / MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH;
		map_y = y / MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
    9d3c:	25 e0       	ldi	r18, 0x05	; 5
    9d3e:	30 e0       	ldi	r19, 0x00	; 0
    9d40:	ce 01       	movw	r24, r28
    9d42:	b9 01       	movw	r22, r18
    9d44:	0e 94 1a 68 	call	0xd034	; 0xd034 <__udivmodhi4>
    9d48:	46 2f       	mov	r20, r22
    9d4a:	ec 01       	movw	r28, r24
		mega_tile_index *= MAP_SPACE_MEGA_TILES_MEGA_TILE_WIDTH*MAP_SPACE_MEGA_TILES_MEGA_TILE_HEIGHT;
		return pgm_read_byte(&map_space_mega_tiles[mega_tile_index+mega_tile_offset]);
	}
	else
	{
		map_x = x / MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH;
    9d4c:	c7 01       	movw	r24, r14
    9d4e:	b9 01       	movw	r22, r18
    9d50:	0e 94 1a 68 	call	0xd034	; 0xd034 <__udivmodhi4>
    9d54:	77 27       	eor	r23, r23
		map_y = y / MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
		mega_tile_offset = (y % MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT)*MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH + (x % MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH);
		mega_tile_index = pgm_read_byte(2+(&level_data[map_y*game.raw_level_width + map_x]));
    9d56:	4d 9d       	mul	r20, r13
    9d58:	60 0d       	add	r22, r0
    9d5a:	71 1d       	adc	r23, r1
    9d5c:	11 24       	eor	r1, r1
    9d5e:	6e 5f       	subi	r22, 0xFE	; 254
    9d60:	7f 4f       	sbci	r23, 0xFF	; 255
    9d62:	f8 01       	movw	r30, r16
    9d64:	e6 0f       	add	r30, r22
    9d66:	f7 1f       	adc	r31, r23
    9d68:	64 91       	lpm	r22, Z
	}
	else
	{
		map_x = x / MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH;
		map_y = y / MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
		mega_tile_offset = (y % MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT)*MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH + (x % MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH);
    9d6a:	45 e0       	ldi	r20, 0x05	; 5
    9d6c:	4c 9f       	mul	r20, r28
    9d6e:	90 01       	movw	r18, r0
    9d70:	4d 9f       	mul	r20, r29
    9d72:	30 0d       	add	r19, r0
    9d74:	11 24       	eor	r1, r1
    9d76:	fc 01       	movw	r30, r24
    9d78:	e2 0f       	add	r30, r18
    9d7a:	f3 1f       	adc	r31, r19
		mega_tile_index = pgm_read_byte(2+(&level_data[map_y*game.raw_level_width + map_x]));
		mega_tile_index *= MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH*MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
		return pgm_read_byte(&map_level_mega_tiles[mega_tile_index+mega_tile_offset]);
    9d7c:	89 e1       	ldi	r24, 0x19	; 25
    9d7e:	68 9f       	mul	r22, r24
    9d80:	e0 0d       	add	r30, r0
    9d82:	f1 1d       	adc	r31, r1
    9d84:	11 24       	eor	r1, r1
    9d86:	e2 56       	subi	r30, 0x62	; 98
    9d88:	f0 4a       	sbci	r31, 0xA0	; 160
    9d8a:	84 91       	lpm	r24, Z
	}
}
    9d8c:	df 91       	pop	r29
    9d8e:	cf 91       	pop	r28
    9d90:	1f 91       	pop	r17
    9d92:	0f 91       	pop	r16
    9d94:	ff 90       	pop	r15
    9d96:	ef 90       	pop	r14
    9d98:	df 90       	pop	r13
    9d9a:	08 95       	ret

00009d9c <render_camera_view>:

void render_camera_view()
{
    9d9c:	6f 92       	push	r6
    9d9e:	7f 92       	push	r7
    9da0:	8f 92       	push	r8
    9da2:	9f 92       	push	r9
    9da4:	af 92       	push	r10
    9da6:	bf 92       	push	r11
    9da8:	cf 92       	push	r12
    9daa:	df 92       	push	r13
    9dac:	ef 92       	push	r14
    9dae:	ff 92       	push	r15
    9db0:	0f 93       	push	r16
    9db2:	1f 93       	push	r17
    9db4:	cf 93       	push	r28
    9db6:	df 93       	push	r29
	u8 level_tile;
	u16 camara_x_tile = game.camera_x/8;
    9db8:	e0 90 aa 0d 	lds	r14, 0x0DAA
    9dbc:	f0 90 ab 0d 	lds	r15, 0x0DAB
    9dc0:	83 e0       	ldi	r24, 0x03	; 3
    9dc2:	f6 94       	lsr	r15
    9dc4:	e7 94       	ror	r14
    9dc6:	8a 95       	dec	r24
    9dc8:	e1 f7       	brne	.-8      	; 0x9dc2 <render_camera_view+0x26>
	u16 camera_y_tile = game.camera_y/8;
    9dca:	00 91 ac 0d 	lds	r16, 0x0DAC
    9dce:	10 91 ad 0d 	lds	r17, 0x0DAD
    9dd2:	93 e0       	ldi	r25, 0x03	; 3
    9dd4:	16 95       	lsr	r17
    9dd6:	07 95       	ror	r16
    9dd8:	9a 95       	dec	r25
    9dda:	e1 f7       	brne	.-8      	; 0x9dd4 <render_camera_view+0x38>
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    9ddc:	37 01       	movw	r6, r14
    9dde:	67 01       	movw	r12, r14
    9de0:	8c e1       	ldi	r24, 0x1C	; 28
    9de2:	c8 0e       	add	r12, r24
    9de4:	d1 1c       	adc	r13, r1
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    9de6:	58 01       	movw	r10, r16
    9de8:	89 e1       	ldi	r24, 0x19	; 25
    9dea:	a8 0e       	add	r10, r24
    9dec:	b1 1c       	adc	r11, r1
		{
			level_tile = get_level_tile(game.current_level, x, y);
			render_level_tile(level_tile, (Screen.scrollX / 8 + x - camara_x_tile) % 32, (Screen.scrollY / 8 + y - camera_y_tile) % 30);
    9dee:	2e e1       	ldi	r18, 0x1E	; 30
    9df0:	82 2e       	mov	r8, r18
    9df2:	91 2c       	mov	r9, r1
{
	u8 level_tile;
	u16 camara_x_tile = game.camera_x/8;
	u16 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    9df4:	c6 14       	cp	r12, r6
    9df6:	d7 04       	cpc	r13, r7
    9df8:	70 f1       	brcs	.+92     	; 0x9e56 <render_camera_view+0xba>
    9dfa:	e8 01       	movw	r28, r16
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    9dfc:	ac 16       	cp	r10, r28
    9dfe:	bd 06       	cpc	r11, r29
    9e00:	30 f1       	brcs	.+76     	; 0x9e4e <render_camera_view+0xb2>
		{
			level_tile = get_level_tile(game.current_level, x, y);
    9e02:	ae 01       	movw	r20, r28
    9e04:	b3 01       	movw	r22, r6
    9e06:	80 91 a6 0f 	lds	r24, 0x0FA6
    9e0a:	90 91 a7 0f 	lds	r25, 0x0FA7
    9e0e:	0e 94 69 4e 	call	0x9cd2	; 0x9cd2 <get_level_tile>
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    9e12:	28 2f       	mov	r18, r24
    9e14:	30 e0       	ldi	r19, 0x00	; 0
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
		{
			level_tile = get_level_tile(game.current_level, x, y);
			render_level_tile(level_tile, (Screen.scrollX / 8 + x - camara_x_tile) % 32, (Screen.scrollY / 8 + y - camera_y_tile) % 30);
    9e16:	80 91 b3 0c 	lds	r24, 0x0CB3
    9e1a:	86 95       	lsr	r24
    9e1c:	86 95       	lsr	r24
    9e1e:	86 95       	lsr	r24
    9e20:	90 e0       	ldi	r25, 0x00	; 0
    9e22:	80 1b       	sub	r24, r16
    9e24:	91 0b       	sbc	r25, r17
    9e26:	8c 0f       	add	r24, r28
    9e28:	9d 1f       	adc	r25, r29
    9e2a:	b4 01       	movw	r22, r8
    9e2c:	0e 94 1a 68 	call	0xd034	; 0xd034 <__udivmodhi4>
    9e30:	90 91 b2 0c 	lds	r25, 0x0CB2
    9e34:	96 95       	lsr	r25
    9e36:	96 95       	lsr	r25
    9e38:	96 95       	lsr	r25
    9e3a:	9e 19       	sub	r25, r14
    9e3c:	96 0d       	add	r25, r6
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    9e3e:	a9 01       	movw	r20, r18
    9e40:	68 2f       	mov	r22, r24
    9e42:	89 2f       	mov	r24, r25
    9e44:	8f 71       	andi	r24, 0x1F	; 31
    9e46:	0e 94 c7 3a 	call	0x758e	; 0x758e <SetTile>
	u16 camara_x_tile = game.camera_x/8;
	u16 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    9e4a:	21 96       	adiw	r28, 0x01	; 1
    9e4c:	d7 cf       	rjmp	.-82     	; 0x9dfc <render_camera_view+0x60>
{
	u8 level_tile;
	u16 camara_x_tile = game.camera_x/8;
	u16 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    9e4e:	8f ef       	ldi	r24, 0xFF	; 255
    9e50:	68 1a       	sub	r6, r24
    9e52:	78 0a       	sbc	r7, r24
    9e54:	cf cf       	rjmp	.-98     	; 0x9df4 <render_camera_view+0x58>
		{
			level_tile = get_level_tile(game.current_level, x, y);
			render_level_tile(level_tile, (Screen.scrollX / 8 + x - camara_x_tile) % 32, (Screen.scrollY / 8 + y - camera_y_tile) % 30);
		}
	}
}
    9e56:	df 91       	pop	r29
    9e58:	cf 91       	pop	r28
    9e5a:	1f 91       	pop	r17
    9e5c:	0f 91       	pop	r16
    9e5e:	ff 90       	pop	r15
    9e60:	ef 90       	pop	r14
    9e62:	df 90       	pop	r13
    9e64:	cf 90       	pop	r12
    9e66:	bf 90       	pop	r11
    9e68:	af 90       	pop	r10
    9e6a:	9f 90       	pop	r9
    9e6c:	8f 90       	pop	r8
    9e6e:	7f 90       	pop	r7
    9e70:	6f 90       	pop	r6
    9e72:	08 95       	ret

00009e74 <spawn_enemy>:

void spawn_enemy(u16 x, u16 y)
{
    9e74:	ff 92       	push	r15
    9e76:	0f 93       	push	r16
    9e78:	1f 93       	push	r17
    9e7a:	cf 93       	push	r28
    9e7c:	df 93       	push	r29
    9e7e:	00 d0       	rcall	.+0      	; 0x9e80 <spawn_enemy+0xc>
    9e80:	cd b7       	in	r28, 0x3d	; 61
    9e82:	de b7       	in	r29, 0x3e	; 62
    9e84:	26 ea       	ldi	r18, 0xA6	; 166
    9e86:	3d e0       	ldi	r19, 0x0D	; 13
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    9e88:	f1 2c       	mov	r15, r1
    9e8a:	f9 01       	movw	r30, r18
    9e8c:	e2 54       	subi	r30, 0x42	; 66
    9e8e:	ff 4f       	sbci	r31, 0xFF	; 255
	{
		if (!game.enemies[i].active)
    9e90:	40 81       	ld	r20, Z
    9e92:	41 11       	cpse	r20, r1
    9e94:	1c c0       	rjmp	.+56     	; 0x9ece <spawn_enemy+0x5a>
    9e96:	7a 96       	adiw	r30, 0x1a	; 26
		{
			for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
			{
				if (!game.enemies[i].shot[j].active)
    9e98:	40 81       	ld	r20, Z
    9e9a:	41 11       	cpse	r20, r1
    9e9c:	18 c0       	rjmp	.+48     	; 0x9ece <spawn_enemy+0x5a>
    9e9e:	ab 01       	movw	r20, r22
    9ea0:	8c 01       	movw	r16, r24
				{
					if (is_space())
    9ea2:	69 83       	std	Y+1, r22	; 0x01
    9ea4:	5a 83       	std	Y+2, r21	; 0x02
    9ea6:	0e 94 13 4c 	call	0x9826	; 0x9826 <is_space>
    9eaa:	49 81       	ldd	r20, Y+1	; 0x01
    9eac:	5a 81       	ldd	r21, Y+2	; 0x02
					{
						init_enemy_shark(i, x, y);
    9eae:	b8 01       	movw	r22, r16
		{
			for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
			{
				if (!game.enemies[i].shot[j].active)
				{
					if (is_space())
    9eb0:	88 23       	and	r24, r24
    9eb2:	21 f0       	breq	.+8      	; 0x9ebc <spawn_enemy+0x48>
					{
						init_enemy_shark(i, x, y);
    9eb4:	8f 2d       	mov	r24, r15
    9eb6:	0e 94 d8 4d 	call	0x9bb0	; 0x9bb0 <init_enemy_shark>
    9eba:	03 c0       	rjmp	.+6      	; 0x9ec2 <spawn_enemy+0x4e>
					}
					else
					{
						init_enemy_spider(i, x, y);
    9ebc:	8f 2d       	mov	r24, r15
    9ebe:	0e 94 69 4d 	call	0x9ad2	; 0x9ad2 <init_enemy_spider>
					}
					game.active_enemies++;
    9ec2:	80 91 c6 0d 	lds	r24, 0x0DC6
    9ec6:	8f 5f       	subi	r24, 0xFF	; 255
    9ec8:	80 93 c6 0d 	sts	0x0DC6, r24
    9ecc:	06 c0       	rjmp	.+12     	; 0x9eda <spawn_enemy+0x66>
	}
}

void spawn_enemy(u16 x, u16 y)
{
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    9ece:	f3 94       	inc	r15
    9ed0:	2e 5b       	subi	r18, 0xBE	; 190
    9ed2:	3f 4f       	sbci	r19, 0xFF	; 255
    9ed4:	45 e0       	ldi	r20, 0x05	; 5
    9ed6:	f4 12       	cpse	r15, r20
    9ed8:	d8 cf       	rjmp	.-80     	; 0x9e8a <spawn_enemy+0x16>
					return;
				}
			}
		}
	}
}
    9eda:	0f 90       	pop	r0
    9edc:	0f 90       	pop	r0
    9ede:	df 91       	pop	r29
    9ee0:	cf 91       	pop	r28
    9ee2:	1f 91       	pop	r17
    9ee4:	0f 91       	pop	r16
    9ee6:	ff 90       	pop	r15
    9ee8:	08 95       	ret

00009eea <solid_tile>:

u8 solid_tile(u8 level_tile)
{
	switch (level_tile)
    9eea:	90 e0       	ldi	r25, 0x00	; 0
    9eec:	fc 01       	movw	r30, r24
    9eee:	31 97       	sbiw	r30, 0x01	; 1
    9ef0:	e9 31       	cpi	r30, 0x19	; 25
    9ef2:	f1 05       	cpc	r31, r1
    9ef4:	20 f4       	brcc	.+8      	; 0x9efe <solid_tile+0x14>
    9ef6:	e8 5c       	subi	r30, 0xC8	; 200
    9ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    9efa:	0c 94 42 68 	jmp	0xd084	; 0xd084 <__tablejump2__>
		case L_DESERT_BOTTOM : return 1;
		case L_DESERT_TOP : return 1;
		case L_DESERT_SPIKE_UP : return 1;
		case L_DESERT_SPIKE_DOWN : return 1;
	}
	return 0;
    9efe:	80 e0       	ldi	r24, 0x00	; 0
    9f00:	08 95       	ret

u8 solid_tile(u8 level_tile)
{
	switch (level_tile)
	{
		case L_ICE_MIDDLE : return 1;
    9f02:	81 e0       	ldi	r24, 0x01	; 1
		case L_DESERT_TOP : return 1;
		case L_DESERT_SPIKE_UP : return 1;
		case L_DESERT_SPIKE_DOWN : return 1;
	}
	return 0;
}
    9f04:	08 95       	ret

00009f06 <append_tile_column>:
	}
	return 0;
}

void append_tile_column()
{
    9f06:	cf 92       	push	r12
    9f08:	df 92       	push	r13
    9f0a:	ef 92       	push	r14
    9f0c:	ff 92       	push	r15
    9f0e:	0f 93       	push	r16
    9f10:	1f 93       	push	r17
    9f12:	cf 93       	push	r28
    9f14:	df 93       	push	r29
	u8 enemy_spawned = 0;
	u8 level_tile;
	u8 rndom = LBRandom(0, CAMERA_HEIGHT-1)*8;
    9f16:	68 e1       	ldi	r22, 0x18	; 24
    9f18:	80 e0       	ldi	r24, 0x00	; 0
    9f1a:	0e 94 1f 4b 	call	0x963e	; 0x963e <LBRandom>
    9f1e:	88 0f       	add	r24, r24
    9f20:	88 0f       	add	r24, r24
    9f22:	88 0f       	add	r24, r24

	game.column_count++;
    9f24:	20 91 b4 0d 	lds	r18, 0x0DB4
    9f28:	30 91 b5 0d 	lds	r19, 0x0DB5
    9f2c:	2f 5f       	subi	r18, 0xFF	; 255
    9f2e:	3f 4f       	sbci	r19, 0xFF	; 255
    9f30:	30 93 b5 0d 	sts	0x0DB5, r19
    9f34:	20 93 b4 0d 	sts	0x0DB4, r18
    9f38:	c0 e0       	ldi	r28, 0x00	; 0
    9f3a:	d0 e0       	ldi	r29, 0x00	; 0
	return 0;
}

void append_tile_column()
{
	u8 enemy_spawned = 0;
    9f3c:	d1 2c       	mov	r13, r1

	game.column_count++;
    for (u8 y = 0; y <= CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
    9f3e:	3e e1       	ldi	r19, 0x1E	; 30
    9f40:	e3 2e       	mov	r14, r19
    9f42:	f1 2c       	mov	r15, r1
		if (game.column_count % game.spawn_rate == game.spawn_rate - 1 && game.active_enemies < MAX_ENEMIES && !enemy_spawned)
		{
			if (is_space())
			{
				spawn_enemy(game.camera_x+CAMERA_WIDTH*8, rndom);
    9f44:	08 2f       	mov	r16, r24
    9f46:	10 e0       	ldi	r17, 0x00	; 0
	u8 rndom = LBRandom(0, CAMERA_HEIGHT-1)*8;

	game.column_count++;
    for (u8 y = 0; y <= CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
    9f48:	40 91 ac 0d 	lds	r20, 0x0DAC
    9f4c:	50 91 ad 0d 	lds	r21, 0x0DAD
    9f50:	23 e0       	ldi	r18, 0x03	; 3
    9f52:	56 95       	lsr	r21
    9f54:	47 95       	ror	r20
    9f56:	2a 95       	dec	r18
    9f58:	e1 f7       	brne	.-8      	; 0x9f52 <append_tile_column+0x4c>
    9f5a:	4c 0f       	add	r20, r28
    9f5c:	5d 1f       	adc	r21, r29
    9f5e:	60 91 a6 0d 	lds	r22, 0x0DA6
    9f62:	70 91 a7 0d 	lds	r23, 0x0DA7
    9f66:	80 91 a6 0f 	lds	r24, 0x0FA6
    9f6a:	90 91 a7 0f 	lds	r25, 0x0FA7
    9f6e:	0e 94 69 4e 	call	0x9cd2	; 0x9cd2 <get_level_tile>
    9f72:	c8 2e       	mov	r12, r24
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    9f74:	28 2f       	mov	r18, r24
    9f76:	30 e0       	ldi	r19, 0x00	; 0

	game.column_count++;
    for (u8 y = 0; y <= CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
    9f78:	90 91 b3 0c 	lds	r25, 0x0CB3
    9f7c:	96 95       	lsr	r25
    9f7e:	96 95       	lsr	r25
    9f80:	96 95       	lsr	r25
    9f82:	ae 01       	movw	r20, r28
    9f84:	49 0f       	add	r20, r25
    9f86:	51 1d       	adc	r21, r1
    9f88:	ca 01       	movw	r24, r20
    9f8a:	b7 01       	movw	r22, r14
    9f8c:	0e 94 2e 68 	call	0xd05c	; 0xd05c <__divmodhi4>
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    9f90:	a9 01       	movw	r20, r18
    9f92:	68 2f       	mov	r22, r24
    9f94:	80 91 c4 0d 	lds	r24, 0x0DC4
    9f98:	0e 94 c7 3a 	call	0x758e	; 0x758e <SetTile>
	game.column_count++;
    for (u8 y = 0; y <= CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
		if (game.column_count % game.spawn_rate == game.spawn_rate - 1 && game.active_enemies < MAX_ENEMIES && !enemy_spawned)
    9f9c:	20 91 c7 0d 	lds	r18, 0x0DC7
    9fa0:	30 e0       	ldi	r19, 0x00	; 0
    9fa2:	80 91 b4 0d 	lds	r24, 0x0DB4
    9fa6:	90 91 b5 0d 	lds	r25, 0x0DB5
    9faa:	b9 01       	movw	r22, r18
    9fac:	0e 94 1a 68 	call	0xd034	; 0xd034 <__udivmodhi4>
    9fb0:	21 50       	subi	r18, 0x01	; 1
    9fb2:	31 09       	sbc	r19, r1
    9fb4:	82 17       	cp	r24, r18
    9fb6:	93 07       	cpc	r25, r19
    9fb8:	91 f5       	brne	.+100    	; 0xa01e <append_tile_column+0x118>
    9fba:	80 91 c6 0d 	lds	r24, 0x0DC6
    9fbe:	85 30       	cpi	r24, 0x05	; 5
    9fc0:	70 f5       	brcc	.+92     	; 0xa01e <append_tile_column+0x118>
    9fc2:	d1 10       	cpse	r13, r1
    9fc4:	2a c0       	rjmp	.+84     	; 0xa01a <append_tile_column+0x114>
		{
			if (is_space())
    9fc6:	0e 94 13 4c 	call	0x9826	; 0x9826 <is_space>
    9fca:	88 23       	and	r24, r24
    9fcc:	31 f0       	breq	.+12     	; 0x9fda <append_tile_column+0xd4>
			{
				spawn_enemy(game.camera_x+CAMERA_WIDTH*8, rndom);
    9fce:	80 91 aa 0d 	lds	r24, 0x0DAA
    9fd2:	90 91 ab 0d 	lds	r25, 0x0DAB
    9fd6:	b8 01       	movw	r22, r16
    9fd8:	1c c0       	rjmp	.+56     	; 0xa012 <append_tile_column+0x10c>
				enemy_spawned = 1;
			}
			else if (solid_tile(level_tile))
    9fda:	8c 2d       	mov	r24, r12
    9fdc:	0e 94 75 4f 	call	0x9eea	; 0x9eea <solid_tile>
    9fe0:	88 23       	and	r24, r24
    9fe2:	e9 f0       	breq	.+58     	; 0xa01e <append_tile_column+0x118>
			{
				spawn_enemy(game.camera_x+CAMERA_WIDTH*8, (game.camera_y / 8 + y - 1)*8);
    9fe4:	20 91 ac 0d 	lds	r18, 0x0DAC
    9fe8:	30 91 ad 0d 	lds	r19, 0x0DAD
    9fec:	83 e0       	ldi	r24, 0x03	; 3
    9fee:	36 95       	lsr	r19
    9ff0:	27 95       	ror	r18
    9ff2:	8a 95       	dec	r24
    9ff4:	e1 f7       	brne	.-8      	; 0x9fee <append_tile_column+0xe8>
    9ff6:	21 50       	subi	r18, 0x01	; 1
    9ff8:	30 4e       	sbci	r19, 0xE0	; 224
    9ffa:	2c 0f       	add	r18, r28
    9ffc:	3d 1f       	adc	r19, r29
    9ffe:	b9 01       	movw	r22, r18
    a000:	93 e0       	ldi	r25, 0x03	; 3
    a002:	66 0f       	add	r22, r22
    a004:	77 1f       	adc	r23, r23
    a006:	9a 95       	dec	r25
    a008:	e1 f7       	brne	.-8      	; 0xa002 <append_tile_column+0xfc>
    a00a:	80 91 aa 0d 	lds	r24, 0x0DAA
    a00e:	90 91 ab 0d 	lds	r25, 0x0DAB
    a012:	80 52       	subi	r24, 0x20	; 32
    a014:	9f 4f       	sbci	r25, 0xFF	; 255
    a016:	0e 94 3a 4f 	call	0x9e74	; 0x9e74 <spawn_enemy>
    a01a:	dd 24       	eor	r13, r13
    a01c:	d3 94       	inc	r13
    a01e:	21 96       	adiw	r28, 0x01	; 1
	u8 enemy_spawned = 0;
	u8 level_tile;
	u8 rndom = LBRandom(0, CAMERA_HEIGHT-1)*8;

	game.column_count++;
    for (u8 y = 0; y <= CAMERA_HEIGHT; y++)
    a020:	ca 31       	cpi	r28, 0x1A	; 26
    a022:	d1 05       	cpc	r29, r1
    a024:	09 f0       	breq	.+2      	; 0xa028 <append_tile_column+0x122>
    a026:	90 cf       	rjmp	.-224    	; 0x9f48 <append_tile_column+0x42>
				enemy_spawned = 1;
			}
		}
    }
	
    game.scroll_src_x++;
    a028:	c0 91 a6 0d 	lds	r28, 0x0DA6
    a02c:	d0 91 a7 0d 	lds	r29, 0x0DA7
    a030:	21 96       	adiw	r28, 0x01	; 1
    a032:	d0 93 a7 0d 	sts	0x0DA7, r29
    a036:	c0 93 a6 0d 	sts	0x0DA6, r28
	game.scroll_dest_x++;
    a03a:	80 91 c4 0d 	lds	r24, 0x0DC4
    a03e:	8f 5f       	subi	r24, 0xFF	; 255
    if(game.scroll_dest_x>=32)game.scroll_dest_x=0;
    a040:	80 32       	cpi	r24, 0x20	; 32
    a042:	18 f4       	brcc	.+6      	; 0xa04a <append_tile_column+0x144>
			}
		}
    }
	
    game.scroll_src_x++;
	game.scroll_dest_x++;
    a044:	80 93 c4 0d 	sts	0x0DC4, r24
    a048:	02 c0       	rjmp	.+4      	; 0xa04e <append_tile_column+0x148>
    if(game.scroll_dest_x>=32)game.scroll_dest_x=0;
    a04a:	10 92 c4 0d 	sts	0x0DC4, r1
	if(is_space() && game.scroll_src_x>=128)game.scroll_src_x=0;
    a04e:	0e 94 13 4c 	call	0x9826	; 0x9826 <is_space>
    a052:	88 23       	and	r24, r24
    a054:	39 f0       	breq	.+14     	; 0xa064 <append_tile_column+0x15e>
    a056:	c0 38       	cpi	r28, 0x80	; 128
    a058:	d1 05       	cpc	r29, r1
    a05a:	20 f0       	brcs	.+8      	; 0xa064 <append_tile_column+0x15e>
    a05c:	10 92 a7 0d 	sts	0x0DA7, r1
    a060:	10 92 a6 0d 	sts	0x0DA6, r1
}
    a064:	df 91       	pop	r29
    a066:	cf 91       	pop	r28
    a068:	1f 91       	pop	r17
    a06a:	0f 91       	pop	r16
    a06c:	ff 90       	pop	r15
    a06e:	ef 90       	pop	r14
    a070:	df 90       	pop	r13
    a072:	cf 90       	pop	r12
    a074:	08 95       	ret

0000a076 <append_tile_row>:

void append_tile_row()
{
    a076:	cf 93       	push	r28
    a078:	df 93       	push	r29
    a07a:	c0 e0       	ldi	r28, 0x00	; 0
    a07c:	d0 e0       	ldi	r29, 0x00	; 0
	u8 level_tile;

    for (u8 x = 0; x <= CAMERA_WIDTH; x++)
	{
		level_tile = get_level_tile(game.current_level, x + game.camera_x / 8, game.scroll_src_y);
    a07e:	40 91 a8 0d 	lds	r20, 0x0DA8
    a082:	50 91 a9 0d 	lds	r21, 0x0DA9
    a086:	60 91 aa 0d 	lds	r22, 0x0DAA
    a08a:	70 91 ab 0d 	lds	r23, 0x0DAB
    a08e:	83 e0       	ldi	r24, 0x03	; 3
    a090:	76 95       	lsr	r23
    a092:	67 95       	ror	r22
    a094:	8a 95       	dec	r24
    a096:	e1 f7       	brne	.-8      	; 0xa090 <append_tile_row+0x1a>
    a098:	6c 0f       	add	r22, r28
    a09a:	7d 1f       	adc	r23, r29
    a09c:	80 91 a6 0f 	lds	r24, 0x0FA6
    a0a0:	90 91 a7 0f 	lds	r25, 0x0FA7
    a0a4:	0e 94 69 4e 	call	0x9cd2	; 0x9cd2 <get_level_tile>
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    a0a8:	48 2f       	mov	r20, r24
    a0aa:	50 e0       	ldi	r21, 0x00	; 0
	u8 level_tile;

    for (u8 x = 0; x <= CAMERA_WIDTH; x++)
	{
		level_tile = get_level_tile(game.current_level, x + game.camera_x / 8, game.scroll_src_y);
		render_level_tile(level_tile, (x + Screen.scrollX / 8) % 32, game.scroll_dest_y);
    a0ac:	80 91 b2 0c 	lds	r24, 0x0CB2
    a0b0:	86 95       	lsr	r24
    a0b2:	86 95       	lsr	r24
    a0b4:	86 95       	lsr	r24
    a0b6:	8c 0f       	add	r24, r28
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    a0b8:	60 91 c5 0d 	lds	r22, 0x0DC5
    a0bc:	8f 71       	andi	r24, 0x1F	; 31
    a0be:	0e 94 c7 3a 	call	0x758e	; 0x758e <SetTile>
    a0c2:	21 96       	adiw	r28, 0x01	; 1

void append_tile_row()
{
	u8 level_tile;

    for (u8 x = 0; x <= CAMERA_WIDTH; x++)
    a0c4:	cd 31       	cpi	r28, 0x1D	; 29
    a0c6:	d1 05       	cpc	r29, r1
    a0c8:	d1 f6       	brne	.-76     	; 0xa07e <append_tile_row+0x8>
	{
		level_tile = get_level_tile(game.current_level, x + game.camera_x / 8, game.scroll_src_y);
		render_level_tile(level_tile, (x + Screen.scrollX / 8) % 32, game.scroll_dest_y);
    }
	
    game.scroll_src_y++;
    a0ca:	80 91 a8 0d 	lds	r24, 0x0DA8
    a0ce:	90 91 a9 0d 	lds	r25, 0x0DA9
    a0d2:	01 96       	adiw	r24, 0x01	; 1
    a0d4:	90 93 a9 0d 	sts	0x0DA9, r25
    a0d8:	80 93 a8 0d 	sts	0x0DA8, r24
	game.scroll_dest_y++;
    a0dc:	80 91 c5 0d 	lds	r24, 0x0DC5
    a0e0:	8f 5f       	subi	r24, 0xFF	; 255
    if(game.scroll_dest_y>=30)game.scroll_dest_y=0;
    a0e2:	8e 31       	cpi	r24, 0x1E	; 30
    a0e4:	18 f4       	brcc	.+6      	; 0xa0ec <append_tile_row+0x76>
		level_tile = get_level_tile(game.current_level, x + game.camera_x / 8, game.scroll_src_y);
		render_level_tile(level_tile, (x + Screen.scrollX / 8) % 32, game.scroll_dest_y);
    }
	
    game.scroll_src_y++;
	game.scroll_dest_y++;
    a0e6:	80 93 c5 0d 	sts	0x0DC5, r24
    a0ea:	02 c0       	rjmp	.+4      	; 0xa0f0 <append_tile_row+0x7a>
    if(game.scroll_dest_y>=30)game.scroll_dest_y=0;
    a0ec:	10 92 c5 0d 	sts	0x0DC5, r1
}
    a0f0:	df 91       	pop	r29
    a0f2:	cf 91       	pop	r28
    a0f4:	08 95       	ret

0000a0f6 <move_camera_x>:

void move_camera_x()
{	
	game.camera_x++;
    a0f6:	80 91 aa 0d 	lds	r24, 0x0DAA
    a0fa:	90 91 ab 0d 	lds	r25, 0x0DAB
    a0fe:	01 96       	adiw	r24, 0x01	; 1
    a100:	90 93 ab 0d 	sts	0x0DAB, r25
    a104:	80 93 aa 0d 	sts	0x0DAA, r24
	Scroll(1,0);
    a108:	60 e0       	ldi	r22, 0x00	; 0
    a10a:	81 e0       	ldi	r24, 0x01	; 1
    a10c:	0e 94 a8 48 	call	0x9150	; 0x9150 <Scroll>
	if (++game.scroll_x == 8)
    a110:	80 91 c2 0d 	lds	r24, 0x0DC2
    a114:	8f 5f       	subi	r24, 0xFF	; 255
    a116:	88 30       	cpi	r24, 0x08	; 8
    a118:	19 f0       	breq	.+6      	; 0xa120 <move_camera_x+0x2a>
    a11a:	80 93 c2 0d 	sts	0x0DC2, r24
    a11e:	08 95       	ret
	{
		game.scroll_x = 0;
    a120:	10 92 c2 0d 	sts	0x0DC2, r1
		append_tile_column();
    a124:	0c 94 83 4f 	jmp	0x9f06	; 0x9f06 <append_tile_column>

0000a128 <move_camera_y>:
	}
}

void move_camera_y()
{	
	game.camera_y+=2;
    a128:	80 91 ac 0d 	lds	r24, 0x0DAC
    a12c:	90 91 ad 0d 	lds	r25, 0x0DAD
    a130:	02 96       	adiw	r24, 0x02	; 2
    a132:	90 93 ad 0d 	sts	0x0DAD, r25
    a136:	80 93 ac 0d 	sts	0x0DAC, r24
	game.scroll_y+=2;
    a13a:	80 91 c3 0d 	lds	r24, 0x0DC3
    a13e:	8e 5f       	subi	r24, 0xFE	; 254
    a140:	80 93 c3 0d 	sts	0x0DC3, r24
	Scroll(0,2);
    a144:	62 e0       	ldi	r22, 0x02	; 2
    a146:	80 e0       	ldi	r24, 0x00	; 0
    a148:	0e 94 a8 48 	call	0x9150	; 0x9150 <Scroll>
	if (game.scroll_y == 8)
    a14c:	80 91 c3 0d 	lds	r24, 0x0DC3
    a150:	88 30       	cpi	r24, 0x08	; 8
    a152:	21 f4       	brne	.+8      	; 0xa15c <move_camera_y+0x34>
	{
		game.scroll_y = 0;
    a154:	10 92 c3 0d 	sts	0x0DC3, r1
		append_tile_row();
    a158:	0c 94 3b 50 	jmp	0xa076	; 0xa076 <append_tile_row>
    a15c:	08 95       	ret

0000a15e <map_ship>:
	}
}

void map_ship()
{
	game.player.run.anim_count = 2;
    a15e:	82 e0       	ldi	r24, 0x02	; 2
    a160:	80 93 36 0e 	sts	0x0E36, r24
	game.player.run.frames_per_anim = EXPLOSION_FRAME_COUNT;
    a164:	85 e0       	ldi	r24, 0x05	; 5
    a166:	80 93 37 0e 	sts	0x0E37, r24
	game.player.run.anims = run_anim;
    a16a:	e0 e0       	ldi	r30, 0x00	; 0
    a16c:	f0 e1       	ldi	r31, 0x10	; 16
    a16e:	f0 93 3c 0e 	sts	0x0E3C, r31
    a172:	e0 93 3b 0e 	sts	0x0E3B, r30
	game.player.run.anims[0] = (char*) map_hero_ship_large_0;
    a176:	86 ec       	ldi	r24, 0xC6	; 198
    a178:	97 e3       	ldi	r25, 0x37	; 55
    a17a:	91 83       	std	Z+1, r25	; 0x01
    a17c:	80 83       	st	Z, r24
	game.player.run.anims[1] = (char*) map_hero_ship_large_1;
    a17e:	8c eb       	ldi	r24, 0xBC	; 188
    a180:	97 e3       	ldi	r25, 0x37	; 55
    a182:	93 83       	std	Z+3, r25	; 0x03
    a184:	82 83       	std	Z+2, r24	; 0x02
    a186:	08 95       	ret

0000a188 <map_level_info>:
}

void map_level_info(char* level)
{
    a188:	0f 93       	push	r16
    a18a:	1f 93       	push	r17
    a18c:	cf 93       	push	r28
    a18e:	df 93       	push	r29
    a190:	ec 01       	movw	r28, r24
	game.current_level = level;
    a192:	90 93 a7 0f 	sts	0x0FA7, r25
    a196:	80 93 a6 0f 	sts	0x0FA6, r24
	
	game.raw_level_width = pgm_read_byte(&level[0]);
    a19a:	fc 01       	movw	r30, r24
    a19c:	84 91       	lpm	r24, Z
    a19e:	80 93 bc 0d 	sts	0x0DBC, r24
	game.raw_level_height = pgm_read_byte(&level[1]);
    a1a2:	8e 01       	movw	r16, r28
    a1a4:	0f 5f       	subi	r16, 0xFF	; 255
    a1a6:	1f 4f       	sbci	r17, 0xFF	; 255
    a1a8:	f8 01       	movw	r30, r16
    a1aa:	84 91       	lpm	r24, Z
    a1ac:	80 93 bd 0d 	sts	0x0DBD, r24
	if (!is_space())
    a1b0:	0e 94 13 4c 	call	0x9826	; 0x9826 <is_space>
    a1b4:	81 11       	cpse	r24, r1
    a1b6:	13 c0       	rjmp	.+38     	; 0xa1de <map_level_info+0x56>
	{
		game.level_width = pgm_read_byte(&level[0])*MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH;
    a1b8:	fe 01       	movw	r30, r28
    a1ba:	c4 91       	lpm	r28, Z
    a1bc:	f5 e0       	ldi	r31, 0x05	; 5
    a1be:	cf 9f       	mul	r28, r31
    a1c0:	e0 01       	movw	r28, r0
    a1c2:	11 24       	eor	r1, r1
    a1c4:	d0 93 b7 0d 	sts	0x0DB7, r29
    a1c8:	c0 93 b6 0d 	sts	0x0DB6, r28
		game.level_height = pgm_read_byte(&level[1])*MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
    a1cc:	f8 01       	movw	r30, r16
    a1ce:	04 91       	lpm	r16, Z
    a1d0:	80 2f       	mov	r24, r16
    a1d2:	88 0f       	add	r24, r24
    a1d4:	88 0f       	add	r24, r24
    a1d6:	08 0f       	add	r16, r24
    a1d8:	00 93 be 0d 	sts	0x0DBE, r16
    a1dc:	09 c0       	rjmp	.+18     	; 0xa1f0 <map_level_info+0x68>
		
	}
	else
	{
		game.level_width = 512;
    a1de:	80 e0       	ldi	r24, 0x00	; 0
    a1e0:	92 e0       	ldi	r25, 0x02	; 2
    a1e2:	90 93 b7 0d 	sts	0x0DB7, r25
    a1e6:	80 93 b6 0d 	sts	0x0DB6, r24
		game.level_height = 25;
    a1ea:	89 e1       	ldi	r24, 0x19	; 25
    a1ec:	80 93 be 0d 	sts	0x0DBE, r24
	}
}
    a1f0:	df 91       	pop	r29
    a1f2:	cf 91       	pop	r28
    a1f4:	1f 91       	pop	r17
    a1f6:	0f 91       	pop	r16
    a1f8:	08 95       	ret

0000a1fa <on_solid_ground>:
		}
	}
}

char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
    a1fa:	2f 92       	push	r2
    a1fc:	3f 92       	push	r3
    a1fe:	4f 92       	push	r4
    a200:	5f 92       	push	r5
    a202:	6f 92       	push	r6
    a204:	7f 92       	push	r7
    a206:	8f 92       	push	r8
    a208:	9f 92       	push	r9
    a20a:	af 92       	push	r10
    a20c:	bf 92       	push	r11
    a20e:	cf 92       	push	r12
    a210:	df 92       	push	r13
    a212:	ef 92       	push	r14
    a214:	ff 92       	push	r15
    a216:	0f 93       	push	r16
    a218:	1f 93       	push	r17
    a21a:	cf 93       	push	r28
    a21c:	df 93       	push	r29
    a21e:	00 d0       	rcall	.+0      	; 0xa220 <on_solid_ground+0x26>
    a220:	00 d0       	rcall	.+0      	; 0xa222 <on_solid_ground+0x28>
    a222:	00 d0       	rcall	.+0      	; 0xa224 <on_solid_ground+0x2a>
    a224:	cd b7       	in	r28, 0x3d	; 61
    a226:	de b7       	in	r29, 0x3e	; 62
    a228:	9e 83       	std	Y+6, r25	; 0x06
    a22a:	8d 83       	std	Y+5, r24	; 0x05
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
    a22c:	88 e0       	ldi	r24, 0x08	; 8
    a22e:	48 9f       	mul	r20, r24
    a230:	a0 01       	movw	r20, r0
    a232:	11 24       	eor	r1, r1
    a234:	26 2e       	mov	r2, r22
    a236:	31 2c       	mov	r3, r1
char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
    a238:	00 e0       	ldi	r16, 0x00	; 0
    a23a:	10 e0       	ldi	r17, 0x00	; 0
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
    a23c:	ca 01       	movw	r24, r20
    a23e:	aa 27       	eor	r26, r26
    a240:	97 fd       	sbrc	r25, 7
    a242:	a0 95       	com	r26
    a244:	ba 2f       	mov	r27, r26
    a246:	89 83       	std	Y+1, r24	; 0x01
    a248:	9a 83       	std	Y+2, r25	; 0x02
    a24a:	ab 83       	std	Y+3, r26	; 0x03
    a24c:	bc 83       	std	Y+4, r27	; 0x04
char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
    a24e:	02 15       	cp	r16, r2
    a250:	13 05       	cpc	r17, r3
    a252:	09 f4       	brne	.+2      	; 0xa256 <on_solid_ground+0x5c>
    a254:	85 c0       	rjmp	.+266    	; 0xa360 <on_solid_ground+0x166>
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
    a256:	69 81       	ldd	r22, Y+1	; 0x01
    a258:	7a 81       	ldd	r23, Y+2	; 0x02
    a25a:	8b 81       	ldd	r24, Y+3	; 0x03
    a25c:	9c 81       	ldd	r25, Y+4	; 0x04
    a25e:	0e 94 df 68 	call	0xd1be	; 0xd1be <__floatsisf>
    a262:	4b 01       	movw	r8, r22
    a264:	5c 01       	movw	r10, r24
    a266:	b8 01       	movw	r22, r16
    a268:	88 27       	eor	r24, r24
    a26a:	77 fd       	sbrc	r23, 7
    a26c:	80 95       	com	r24
    a26e:	98 2f       	mov	r25, r24
    a270:	0e 94 df 68 	call	0xd1be	; 0xd1be <__floatsisf>
    a274:	6b 01       	movw	r12, r22
    a276:	7c 01       	movw	r14, r24
    a278:	ad 81       	ldd	r26, Y+5	; 0x05
    a27a:	be 81       	ldd	r27, Y+6	; 0x06
    a27c:	18 96       	adiw	r26, 0x08	; 8
    a27e:	2d 91       	ld	r18, X+
    a280:	3d 91       	ld	r19, X+
    a282:	4d 91       	ld	r20, X+
    a284:	5c 91       	ld	r21, X
    a286:	1b 97       	sbiw	r26, 0x0b	; 11
    a288:	c5 01       	movw	r24, r10
    a28a:	b4 01       	movw	r22, r8
    a28c:	0e 94 49 68 	call	0xd092	; 0xd092 <__addsf3>
    a290:	20 e0       	ldi	r18, 0x00	; 0
    a292:	30 e0       	ldi	r19, 0x00	; 0
    a294:	40 e0       	ldi	r20, 0x00	; 0
    a296:	5e e3       	ldi	r21, 0x3E	; 62
    a298:	0e 94 93 69 	call	0xd326	; 0xd326 <__mulsf3>
    a29c:	0e 94 b1 68 	call	0xd162	; 0xd162 <__fixunssfsi>
    a2a0:	2b 01       	movw	r4, r22
    a2a2:	3c 01       	movw	r6, r24
    a2a4:	20 e0       	ldi	r18, 0x00	; 0
    a2a6:	30 e0       	ldi	r19, 0x00	; 0
    a2a8:	40 e0       	ldi	r20, 0x00	; 0
    a2aa:	5e e3       	ldi	r21, 0x3E	; 62
    a2ac:	ed 81       	ldd	r30, Y+5	; 0x05
    a2ae:	fe 81       	ldd	r31, Y+6	; 0x06
    a2b0:	64 81       	ldd	r22, Z+4	; 0x04
    a2b2:	75 81       	ldd	r23, Z+5	; 0x05
    a2b4:	86 81       	ldd	r24, Z+6	; 0x06
    a2b6:	97 81       	ldd	r25, Z+7	; 0x07
    a2b8:	0e 94 93 69 	call	0xd326	; 0xd326 <__mulsf3>
    a2bc:	a7 01       	movw	r20, r14
    a2be:	96 01       	movw	r18, r12
    a2c0:	0e 94 49 68 	call	0xd092	; 0xd092 <__addsf3>
    a2c4:	0e 94 b1 68 	call	0xd162	; 0xd162 <__fixunssfsi>
    a2c8:	a2 01       	movw	r20, r4
    a2ca:	80 91 a6 0f 	lds	r24, 0x0FA6
    a2ce:	90 91 a7 0f 	lds	r25, 0x0FA7
    a2d2:	0e 94 69 4e 	call	0x9cd2	; 0x9cd2 <get_level_tile>
    a2d6:	78 2e       	mov	r7, r24
		lt2 = get_level_tile(game.current_level, (s->x+7) / 8 + x, (s->y + tile_height*8) / 8);
    a2d8:	ad 81       	ldd	r26, Y+5	; 0x05
    a2da:	be 81       	ldd	r27, Y+6	; 0x06
    a2dc:	18 96       	adiw	r26, 0x08	; 8
    a2de:	2d 91       	ld	r18, X+
    a2e0:	3d 91       	ld	r19, X+
    a2e2:	4d 91       	ld	r20, X+
    a2e4:	5c 91       	ld	r21, X
    a2e6:	1b 97       	sbiw	r26, 0x0b	; 11
    a2e8:	c5 01       	movw	r24, r10
    a2ea:	b4 01       	movw	r22, r8
    a2ec:	0e 94 49 68 	call	0xd092	; 0xd092 <__addsf3>
    a2f0:	20 e0       	ldi	r18, 0x00	; 0
    a2f2:	30 e0       	ldi	r19, 0x00	; 0
    a2f4:	40 e0       	ldi	r20, 0x00	; 0
    a2f6:	5e e3       	ldi	r21, 0x3E	; 62
    a2f8:	0e 94 93 69 	call	0xd326	; 0xd326 <__mulsf3>
    a2fc:	0e 94 b1 68 	call	0xd162	; 0xd162 <__fixunssfsi>
    a300:	4b 01       	movw	r8, r22
    a302:	5c 01       	movw	r10, r24
    a304:	20 e0       	ldi	r18, 0x00	; 0
    a306:	30 e0       	ldi	r19, 0x00	; 0
    a308:	40 ee       	ldi	r20, 0xE0	; 224
    a30a:	50 e4       	ldi	r21, 0x40	; 64
    a30c:	ed 81       	ldd	r30, Y+5	; 0x05
    a30e:	fe 81       	ldd	r31, Y+6	; 0x06
    a310:	64 81       	ldd	r22, Z+4	; 0x04
    a312:	75 81       	ldd	r23, Z+5	; 0x05
    a314:	86 81       	ldd	r24, Z+6	; 0x06
    a316:	97 81       	ldd	r25, Z+7	; 0x07
    a318:	0e 94 49 68 	call	0xd092	; 0xd092 <__addsf3>
    a31c:	20 e0       	ldi	r18, 0x00	; 0
    a31e:	30 e0       	ldi	r19, 0x00	; 0
    a320:	40 e0       	ldi	r20, 0x00	; 0
    a322:	5e e3       	ldi	r21, 0x3E	; 62
    a324:	0e 94 93 69 	call	0xd326	; 0xd326 <__mulsf3>
    a328:	a7 01       	movw	r20, r14
    a32a:	96 01       	movw	r18, r12
    a32c:	0e 94 49 68 	call	0xd092	; 0xd092 <__addsf3>
    a330:	0e 94 b1 68 	call	0xd162	; 0xd162 <__fixunssfsi>
    a334:	a4 01       	movw	r20, r8
    a336:	80 91 a6 0f 	lds	r24, 0x0FA6
    a33a:	90 91 a7 0f 	lds	r25, 0x0FA7
    a33e:	0e 94 69 4e 	call	0x9cd2	; 0x9cd2 <get_level_tile>
    a342:	f8 2e       	mov	r15, r24
		if (solid_tile(lt1) || solid_tile(lt2))
    a344:	87 2d       	mov	r24, r7
    a346:	0e 94 75 4f 	call	0x9eea	; 0x9eea <solid_tile>
    a34a:	81 11       	cpse	r24, r1
    a34c:	0b c0       	rjmp	.+22     	; 0xa364 <on_solid_ground+0x16a>
    a34e:	8f 2d       	mov	r24, r15
    a350:	0e 94 75 4f 	call	0x9eea	; 0x9eea <solid_tile>
    a354:	0f 5f       	subi	r16, 0xFF	; 255
    a356:	1f 4f       	sbci	r17, 0xFF	; 255
    a358:	88 23       	and	r24, r24
    a35a:	09 f4       	brne	.+2      	; 0xa35e <on_solid_ground+0x164>
    a35c:	78 cf       	rjmp	.-272    	; 0xa24e <on_solid_ground+0x54>
    a35e:	02 c0       	rjmp	.+4      	; 0xa364 <on_solid_ground+0x16a>
		{
			return 1;
		}
	}
	return 0;
    a360:	80 e0       	ldi	r24, 0x00	; 0
    a362:	01 c0       	rjmp	.+2      	; 0xa366 <on_solid_ground+0x16c>
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
		lt2 = get_level_tile(game.current_level, (s->x+7) / 8 + x, (s->y + tile_height*8) / 8);
		if (solid_tile(lt1) || solid_tile(lt2))
		{
			return 1;
    a364:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return 0;
}
    a366:	26 96       	adiw	r28, 0x06	; 6
    a368:	0f b6       	in	r0, 0x3f	; 63
    a36a:	f8 94       	cli
    a36c:	de bf       	out	0x3e, r29	; 62
    a36e:	0f be       	out	0x3f, r0	; 63
    a370:	cd bf       	out	0x3d, r28	; 61
    a372:	df 91       	pop	r29
    a374:	cf 91       	pop	r28
    a376:	1f 91       	pop	r17
    a378:	0f 91       	pop	r16
    a37a:	ff 90       	pop	r15
    a37c:	ef 90       	pop	r14
    a37e:	df 90       	pop	r13
    a380:	cf 90       	pop	r12
    a382:	bf 90       	pop	r11
    a384:	af 90       	pop	r10
    a386:	9f 90       	pop	r9
    a388:	8f 90       	pop	r8
    a38a:	7f 90       	pop	r7
    a38c:	6f 90       	pop	r6
    a38e:	5f 90       	pop	r5
    a390:	4f 90       	pop	r4
    a392:	3f 90       	pop	r3
    a394:	2f 90       	pop	r2
    a396:	08 95       	ret

0000a398 <find_shot_slot>:

u8 find_shot_slot()
{
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
	{
		if (!game.player.shot[i].active) return i;
    a398:	80 91 f0 0d 	lds	r24, 0x0DF0
    a39c:	88 23       	and	r24, r24
    a39e:	61 f0       	breq	.+24     	; 0xa3b8 <find_shot_slot+0x20>
    a3a0:	80 91 0a 0e 	lds	r24, 0x0E0A
    a3a4:	88 23       	and	r24, r24
    a3a6:	31 f0       	breq	.+12     	; 0xa3b4 <find_shot_slot+0x1c>
    a3a8:	80 91 24 0e 	lds	r24, 0x0E24
    a3ac:	81 11       	cpse	r24, r1
    a3ae:	04 c0       	rjmp	.+8      	; 0xa3b8 <find_shot_slot+0x20>
	return 0;
}

u8 find_shot_slot()
{
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
    a3b0:	82 e0       	ldi	r24, 0x02	; 2
    a3b2:	08 95       	ret
    a3b4:	81 e0       	ldi	r24, 0x01	; 1
	{
		if (!game.player.shot[i].active) return i;
    a3b6:	08 95       	ret
	}
	return 0;
    a3b8:	80 e0       	ldi	r24, 0x00	; 0
}
    a3ba:	08 95       	ret

0000a3bc <update_shot>:

void update_shot()
{
    a3bc:	4f 92       	push	r4
    a3be:	5f 92       	push	r5
    a3c0:	6f 92       	push	r6
    a3c2:	7f 92       	push	r7
    a3c4:	af 92       	push	r10
    a3c6:	bf 92       	push	r11
    a3c8:	df 92       	push	r13
    a3ca:	ef 92       	push	r14
    a3cc:	ff 92       	push	r15
    a3ce:	0f 93       	push	r16
    a3d0:	1f 93       	push	r17
    a3d2:	cf 93       	push	r28
    a3d4:	df 93       	push	r29
	// Shot updates
	u8 idx;
	if (game.joypadState.pressed & BTN_A && game.player.active_shots < MAX_PLAYER_SHOTS)
    a3d6:	80 91 9f 0f 	lds	r24, 0x0F9F
    a3da:	90 91 a0 0f 	lds	r25, 0x0FA0
    a3de:	90 ff       	sbrs	r25, 0
    a3e0:	e5 c0       	rjmp	.+458    	; 0xa5ac <update_shot+0x1f0>
    a3e2:	80 91 d8 0d 	lds	r24, 0x0DD8
    a3e6:	83 30       	cpi	r24, 0x03	; 3
    a3e8:	08 f0       	brcs	.+2      	; 0xa3ec <update_shot+0x30>
    a3ea:	e0 c0       	rjmp	.+448    	; 0xa5ac <update_shot+0x1f0>
	{
		SFX_PLAYER_SHOOT;
    a3ec:	2f ef       	ldi	r18, 0xFF	; 255
    a3ee:	43 e2       	ldi	r20, 0x23	; 35
    a3f0:	63 e0       	ldi	r22, 0x03	; 3
    a3f2:	82 e0       	ldi	r24, 0x02	; 2
    a3f4:	0e 94 e4 3e 	call	0x7dc8	; 0x7dc8 <TriggerNote>
		idx = find_shot_slot();
    a3f8:	0e 94 cc 51 	call	0xa398	; 0xa398 <find_shot_slot>
    a3fc:	f8 2e       	mov	r15, r24
		LBMapSprite(PLAYER_SHOT_SLOT+idx, LBGetNextFrame(&game.player.shot[idx].anim), 0);
    a3fe:	08 2f       	mov	r16, r24
    a400:	10 e0       	ldi	r17, 0x00	; 0
    a402:	9a e1       	ldi	r25, 0x1A	; 26
    a404:	d9 2e       	mov	r13, r25
    a406:	d0 9e       	mul	r13, r16
    a408:	e0 01       	movw	r28, r0
    a40a:	d1 9e       	mul	r13, r17
    a40c:	d0 0d       	add	r29, r0
    a40e:	11 24       	eor	r1, r1
    a410:	ce 01       	movw	r24, r28
    a412:	8f 50       	subi	r24, 0x0F	; 15
    a414:	92 4f       	sbci	r25, 0xF2	; 242
    a416:	0e 94 e2 49 	call	0x93c4	; 0x93c4 <LBGetNextFrame>
    a41a:	40 e0       	ldi	r20, 0x00	; 0
    a41c:	bc 01       	movw	r22, r24
    a41e:	8b e0       	ldi	r24, 0x0B	; 11
    a420:	8f 0d       	add	r24, r15
    a422:	0e 94 44 4b 	call	0x9688	; 0x9688 <LBMapSprite>
		game.player.shot[idx].active = 1;
    a426:	ca 55       	subi	r28, 0x5A	; 90
    a428:	d2 4f       	sbci	r29, 0xF2	; 242
    a42a:	fe 01       	movw	r30, r28
    a42c:	e6 5b       	subi	r30, 0xB6	; 182
    a42e:	ff 4f       	sbci	r31, 0xFF	; 255
    a430:	81 e0       	ldi	r24, 0x01	; 1
    a432:	80 83       	st	Z, r24
		game.player.shot[idx].shared.y = (u16) game.player.shared.y / 8 * 8;
    a434:	60 91 d1 0d 	lds	r22, 0x0DD1
    a438:	70 91 d2 0d 	lds	r23, 0x0DD2
    a43c:	80 91 d3 0d 	lds	r24, 0x0DD3
    a440:	90 91 d4 0d 	lds	r25, 0x0DD4
    a444:	0e 94 b1 68 	call	0xd162	; 0xd162 <__fixunssfsi>
    a448:	23 e0       	ldi	r18, 0x03	; 3
    a44a:	76 95       	lsr	r23
    a44c:	67 95       	ror	r22
    a44e:	2a 95       	dec	r18
    a450:	e1 f7       	brne	.-8      	; 0xa44a <update_shot+0x8e>
    a452:	33 e0       	ldi	r19, 0x03	; 3
    a454:	66 0f       	add	r22, r22
    a456:	77 1f       	adc	r23, r23
    a458:	3a 95       	dec	r19
    a45a:	e1 f7       	brne	.-8      	; 0xa454 <update_shot+0x98>
    a45c:	80 e0       	ldi	r24, 0x00	; 0
    a45e:	90 e0       	ldi	r25, 0x00	; 0
    a460:	0e 94 dd 68 	call	0xd1ba	; 0xd1ba <__floatunsisf>
    a464:	2b 01       	movw	r4, r22
    a466:	3c 01       	movw	r6, r24
    a468:	5e 01       	movw	r10, r28
    a46a:	21 e4       	ldi	r18, 0x41	; 65
    a46c:	a2 0e       	add	r10, r18
    a46e:	b1 1c       	adc	r11, r1
    a470:	f5 01       	movw	r30, r10
    a472:	60 83       	st	Z, r22
    a474:	71 83       	std	Z+1, r23	; 0x01
    a476:	82 83       	std	Z+2, r24	; 0x02
    a478:	93 83       	std	Z+3, r25	; 0x03
		if (is_space())
    a47a:	0e 94 13 4c 	call	0x9826	; 0x9826 <is_space>
    a47e:	98 01       	movw	r18, r16
    a480:	2f 5f       	subi	r18, 0xFF	; 255
    a482:	3f 4f       	sbci	r19, 0xFF	; 255
    a484:	79 01       	movw	r14, r18
    a486:	88 23       	and	r24, r24
    a488:	59 f1       	breq	.+86     	; 0xa4e0 <update_shot+0x124>
		{
			game.player.shot[idx].shared.x = game.player.shared.x+game.player.width*8;
    a48a:	60 91 dc 0d 	lds	r22, 0x0DDC
    a48e:	d2 9e       	mul	r13, r18
    a490:	80 01       	movw	r16, r0
    a492:	d3 9e       	mul	r13, r19
    a494:	10 0d       	add	r17, r0
    a496:	11 24       	eor	r1, r1
    a498:	0a 55       	subi	r16, 0x5A	; 90
    a49a:	12 4f       	sbci	r17, 0xF2	; 242
    a49c:	38 e0       	ldi	r19, 0x08	; 8
    a49e:	63 9f       	mul	r22, r19
    a4a0:	b0 01       	movw	r22, r0
    a4a2:	11 24       	eor	r1, r1
    a4a4:	88 27       	eor	r24, r24
    a4a6:	77 fd       	sbrc	r23, 7
    a4a8:	80 95       	com	r24
    a4aa:	98 2f       	mov	r25, r24
    a4ac:	0e 94 df 68 	call	0xd1be	; 0xd1be <__floatsisf>
    a4b0:	9b 01       	movw	r18, r22
    a4b2:	ac 01       	movw	r20, r24
    a4b4:	60 91 cd 0d 	lds	r22, 0x0DCD
    a4b8:	70 91 ce 0d 	lds	r23, 0x0DCE
    a4bc:	80 91 cf 0d 	lds	r24, 0x0DCF
    a4c0:	90 91 d0 0d 	lds	r25, 0x0DD0
    a4c4:	0e 94 49 68 	call	0xd092	; 0xd092 <__addsf3>
    a4c8:	f8 01       	movw	r30, r16
    a4ca:	63 a3       	std	Z+35, r22	; 0x23
    a4cc:	74 a3       	std	Z+36, r23	; 0x24
    a4ce:	85 a3       	std	Z+37, r24	; 0x25
    a4d0:	96 a3       	std	Z+38, r25	; 0x26
			game.player.shot[idx].shared.vx = SHOT_SPEED;
    a4d2:	cb 5b       	subi	r28, 0xBB	; 187
    a4d4:	df 4f       	sbci	r29, 0xFF	; 255
    a4d6:	80 e9       	ldi	r24, 0x90	; 144
    a4d8:	91 e0       	ldi	r25, 0x01	; 1
    a4da:	99 83       	std	Y+1, r25	; 0x01
    a4dc:	88 83       	st	Y, r24
    a4de:	61 c0       	rjmp	.+194    	; 0xa5a2 <update_shot+0x1e6>
		}
		else
		{
			if (!(game.player.flags & PRONE))
    a4e0:	80 91 d9 0d 	lds	r24, 0x0DD9
    a4e4:	82 fd       	sbrc	r24, 2
    a4e6:	0d c0       	rjmp	.+26     	; 0xa502 <update_shot+0x146>
			{
				game.player.shot[idx].shared.y += 8;
    a4e8:	20 e0       	ldi	r18, 0x00	; 0
    a4ea:	30 e0       	ldi	r19, 0x00	; 0
    a4ec:	40 e0       	ldi	r20, 0x00	; 0
    a4ee:	51 e4       	ldi	r21, 0x41	; 65
    a4f0:	c3 01       	movw	r24, r6
    a4f2:	b2 01       	movw	r22, r4
    a4f4:	0e 94 49 68 	call	0xd092	; 0xd092 <__addsf3>
    a4f8:	f5 01       	movw	r30, r10
    a4fa:	60 83       	st	Z, r22
    a4fc:	71 83       	std	Z+1, r23	; 0x01
    a4fe:	82 83       	std	Z+2, r24	; 0x02
    a500:	93 83       	std	Z+3, r25	; 0x03
			}
			if (game.player.direction == D_RIGHT)
    a502:	80 91 db 0d 	lds	r24, 0x0DDB
    a506:	81 30       	cpi	r24, 0x01	; 1
    a508:	39 f5       	brne	.+78     	; 0xa558 <update_shot+0x19c>
			{
				game.player.shot[idx].shared.x = game.player.shared.x+2*8;
    a50a:	8a e1       	ldi	r24, 0x1A	; 26
    a50c:	d8 2e       	mov	r13, r24
    a50e:	de 9c       	mul	r13, r14
    a510:	e0 01       	movw	r28, r0
    a512:	df 9c       	mul	r13, r15
    a514:	d0 0d       	add	r29, r0
    a516:	11 24       	eor	r1, r1
    a518:	ca 55       	subi	r28, 0x5A	; 90
    a51a:	d2 4f       	sbci	r29, 0xF2	; 242
    a51c:	20 e0       	ldi	r18, 0x00	; 0
    a51e:	30 e0       	ldi	r19, 0x00	; 0
    a520:	40 e8       	ldi	r20, 0x80	; 128
    a522:	51 e4       	ldi	r21, 0x41	; 65
    a524:	60 91 cd 0d 	lds	r22, 0x0DCD
    a528:	70 91 ce 0d 	lds	r23, 0x0DCE
    a52c:	80 91 cf 0d 	lds	r24, 0x0DCF
    a530:	90 91 d0 0d 	lds	r25, 0x0DD0
    a534:	0e 94 49 68 	call	0xd092	; 0xd092 <__addsf3>
    a538:	6b a3       	std	Y+35, r22	; 0x23
    a53a:	7c a3       	std	Y+36, r23	; 0x24
    a53c:	8d a3       	std	Y+37, r24	; 0x25
    a53e:	9e a3       	std	Y+38, r25	; 0x26
				game.player.shot[idx].shared.vx = SHOT_SPEED;
    a540:	d0 9e       	mul	r13, r16
    a542:	f0 01       	movw	r30, r0
    a544:	d1 9e       	mul	r13, r17
    a546:	f0 0d       	add	r31, r0
    a548:	11 24       	eor	r1, r1
    a54a:	e5 51       	subi	r30, 0x15	; 21
    a54c:	f2 4f       	sbci	r31, 0xF2	; 242
    a54e:	80 e9       	ldi	r24, 0x90	; 144
    a550:	91 e0       	ldi	r25, 0x01	; 1
    a552:	91 83       	std	Z+1, r25	; 0x01
    a554:	80 83       	st	Z, r24
    a556:	25 c0       	rjmp	.+74     	; 0xa5a2 <update_shot+0x1e6>
			}
			else
			{
				game.player.shot[idx].shared.vx = -SHOT_SPEED;
    a558:	8a e1       	ldi	r24, 0x1A	; 26
    a55a:	80 9f       	mul	r24, r16
    a55c:	f0 01       	movw	r30, r0
    a55e:	81 9f       	mul	r24, r17
    a560:	f0 0d       	add	r31, r0
    a562:	11 24       	eor	r1, r1
    a564:	e5 51       	subi	r30, 0x15	; 21
    a566:	f2 4f       	sbci	r31, 0xF2	; 242
    a568:	20 e7       	ldi	r18, 0x70	; 112
    a56a:	3e ef       	ldi	r19, 0xFE	; 254
    a56c:	31 83       	std	Z+1, r19	; 0x01
    a56e:	20 83       	st	Z, r18
				game.player.shot[idx].shared.x = game.player.shared.x-1*8;
    a570:	8e 9d       	mul	r24, r14
    a572:	e0 01       	movw	r28, r0
    a574:	8f 9d       	mul	r24, r15
    a576:	d0 0d       	add	r29, r0
    a578:	11 24       	eor	r1, r1
    a57a:	ca 55       	subi	r28, 0x5A	; 90
    a57c:	d2 4f       	sbci	r29, 0xF2	; 242
    a57e:	20 e0       	ldi	r18, 0x00	; 0
    a580:	30 e0       	ldi	r19, 0x00	; 0
    a582:	40 e0       	ldi	r20, 0x00	; 0
    a584:	51 e4       	ldi	r21, 0x41	; 65
    a586:	60 91 cd 0d 	lds	r22, 0x0DCD
    a58a:	70 91 ce 0d 	lds	r23, 0x0DCE
    a58e:	80 91 cf 0d 	lds	r24, 0x0DCF
    a592:	90 91 d0 0d 	lds	r25, 0x0DD0
    a596:	0e 94 48 68 	call	0xd090	; 0xd090 <__subsf3>
    a59a:	6b a3       	std	Y+35, r22	; 0x23
    a59c:	7c a3       	std	Y+36, r23	; 0x24
    a59e:	8d a3       	std	Y+37, r24	; 0x25
    a5a0:	9e a3       	std	Y+38, r25	; 0x26
			}
		}
		game.player.active_shots++;
    a5a2:	80 91 d8 0d 	lds	r24, 0x0DD8
    a5a6:	8f 5f       	subi	r24, 0xFF	; 255
    a5a8:	80 93 d8 0d 	sts	0x0DD8, r24
	}
}
    a5ac:	df 91       	pop	r29
    a5ae:	cf 91       	pop	r28
    a5b0:	1f 91       	pop	r17
    a5b2:	0f 91       	pop	r16
    a5b4:	ff 90       	pop	r15
    a5b6:	ef 90       	pop	r14
    a5b8:	df 90       	pop	r13
    a5ba:	bf 90       	pop	r11
    a5bc:	af 90       	pop	r10
    a5be:	7f 90       	pop	r7
    a5c0:	6f 90       	pop	r6
    a5c2:	5f 90       	pop	r5
    a5c4:	4f 90       	pop	r4
    a5c6:	08 95       	ret

0000a5c8 <pixel_overlap>:
	}
	return 1;
}

u8 pixel_overlap(u16 s1, u16 s2, u8 w1, u8 w2)
{
    a5c8:	fc 01       	movw	r30, r24
	u8 result = w1;
	
	if (s2 > s1)
    a5ca:	86 17       	cp	r24, r22
    a5cc:	97 07       	cpc	r25, r23
    a5ce:	28 f4       	brcc	.+10     	; 0xa5da <pixel_overlap+0x12>
    a5d0:	94 2f       	mov	r25, r20
    a5d2:	9e 0f       	add	r25, r30
	{
		result -= s2 - s1;
    a5d4:	89 2f       	mov	r24, r25
    a5d6:	86 1b       	sub	r24, r22
    a5d8:	01 c0       	rjmp	.+2      	; 0xa5dc <pixel_overlap+0x14>
	return 1;
}

u8 pixel_overlap(u16 s1, u16 s2, u8 w1, u8 w2)
{
	u8 result = w1;
    a5da:	84 2f       	mov	r24, r20
	
	if (s2 > s1)
	{
		result -= s2 - s1;
	}
	s1 = s1 + w1;
    a5dc:	e4 0f       	add	r30, r20
    a5de:	f1 1d       	adc	r31, r1
	s2 = s2 + w2;
    a5e0:	62 0f       	add	r22, r18
    a5e2:	71 1d       	adc	r23, r1
	if (s2 < s1)
    a5e4:	6e 17       	cp	r22, r30
    a5e6:	7f 07       	cpc	r23, r31
    a5e8:	10 f4       	brcc	.+4      	; 0xa5ee <pixel_overlap+0x26>
	{
		result -= s1 - s2;
    a5ea:	6e 1b       	sub	r22, r30
    a5ec:	86 0f       	add	r24, r22
	}
	return result;
}
    a5ee:	08 95       	ret

0000a5f0 <collision_detect_level>:

u8 collision_detect_level(SpriteShared* s, u8 tile_width, u8 tile_height)
{
    a5f0:	2f 92       	push	r2
    a5f2:	3f 92       	push	r3
    a5f4:	4f 92       	push	r4
    a5f6:	5f 92       	push	r5
    a5f8:	6f 92       	push	r6
    a5fa:	7f 92       	push	r7
    a5fc:	8f 92       	push	r8
    a5fe:	9f 92       	push	r9
    a600:	af 92       	push	r10
    a602:	bf 92       	push	r11
    a604:	cf 92       	push	r12
    a606:	df 92       	push	r13
    a608:	ef 92       	push	r14
    a60a:	ff 92       	push	r15
    a60c:	0f 93       	push	r16
    a60e:	1f 93       	push	r17
    a610:	cf 93       	push	r28
    a612:	df 93       	push	r29
    a614:	cd b7       	in	r28, 0x3d	; 61
    a616:	de b7       	in	r29, 0x3e	; 62
    a618:	68 97       	sbiw	r28, 0x18	; 24
    a61a:	0f b6       	in	r0, 0x3f	; 63
    a61c:	f8 94       	cli
    a61e:	de bf       	out	0x3e, r29	; 62
    a620:	0f be       	out	0x3f, r0	; 63
    a622:	cd bf       	out	0x3d, r28	; 61
    a624:	98 8f       	std	Y+24, r25	; 0x18
    a626:	8f 8b       	std	Y+23, r24	; 0x17
    a628:	16 2f       	mov	r17, r22
    a62a:	49 8b       	std	Y+17, r20	; 0x11
	u16 x0_tile = s->x / 8;
    a62c:	dc 01       	movw	r26, r24
    a62e:	14 96       	adiw	r26, 0x04	; 4
    a630:	4d 90       	ld	r4, X+
    a632:	5d 90       	ld	r5, X+
    a634:	6d 90       	ld	r6, X+
    a636:	7c 90       	ld	r7, X
    a638:	17 97       	sbiw	r26, 0x07	; 7
	u16 y0_tile = s->y / 8;
    a63a:	18 96       	adiw	r26, 0x08	; 8
    a63c:	cd 90       	ld	r12, X+
    a63e:	dd 90       	ld	r13, X+
    a640:	ed 90       	ld	r14, X+
    a642:	fc 90       	ld	r15, X
    a644:	1b 97       	sbiw	r26, 0x0b	; 11
	u16 y1_tile = (s->y+7) / 8;
	u8 lt1, lt2;
	u8 result = 0;
	
	// Only if moving on planet
	if (is_space() || (s->vx == 0 && s->vy == 0)) return result;
    a646:	0e 94 13 4c 	call	0x9826	; 0x9826 <is_space>
    a64a:	81 11       	cpse	r24, r1
    a64c:	f2 c2       	rjmp	.+1508   	; 0xac32 <collision_detect_level+0x642>
    a64e:	ef 89       	ldd	r30, Y+23	; 0x17
    a650:	f8 8d       	ldd	r31, Y+24	; 0x18
    a652:	84 85       	ldd	r24, Z+12	; 0x0c
    a654:	95 85       	ldd	r25, Z+13	; 0x0d
    a656:	89 2b       	or	r24, r25
    a658:	61 f4       	brne	.+24     	; 0xa672 <collision_detect_level+0x82>
    a65a:	20 e0       	ldi	r18, 0x00	; 0
    a65c:	30 e0       	ldi	r19, 0x00	; 0
    a65e:	a9 01       	movw	r20, r18
    a660:	60 81       	ld	r22, Z
    a662:	71 81       	ldd	r23, Z+1	; 0x01
    a664:	82 81       	ldd	r24, Z+2	; 0x02
    a666:	93 81       	ldd	r25, Z+3	; 0x03
    a668:	0e 94 ad 68 	call	0xd15a	; 0xd15a <__cmpsf2>
    a66c:	88 23       	and	r24, r24
    a66e:	09 f4       	brne	.+2      	; 0xa672 <collision_detect_level+0x82>
    a670:	e0 c2       	rjmp	.+1472   	; 0xac32 <collision_detect_level+0x642>
	return result;
}

u8 collision_detect_level(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u16 x0_tile = s->x / 8;
    a672:	20 e0       	ldi	r18, 0x00	; 0
    a674:	30 e0       	ldi	r19, 0x00	; 0
    a676:	40 e0       	ldi	r20, 0x00	; 0
    a678:	5e e3       	ldi	r21, 0x3E	; 62
    a67a:	c3 01       	movw	r24, r6
    a67c:	b2 01       	movw	r22, r4
    a67e:	0e 94 93 69 	call	0xd326	; 0xd326 <__mulsf3>
    a682:	0e 94 b1 68 	call	0xd162	; 0xd162 <__fixunssfsi>
    a686:	4b 01       	movw	r8, r22
    a688:	5c 01       	movw	r10, r24
    a68a:	68 87       	std	Y+8, r22	; 0x08
    a68c:	9a 8a       	std	Y+18, r9	; 0x12
	
	// Only if moving on planet
	if (is_space() || (s->vx == 0 && s->vy == 0)) return result;
	
	// Top and Bottom
	if (s->vy != 0)
    a68e:	20 e0       	ldi	r18, 0x00	; 0
    a690:	30 e0       	ldi	r19, 0x00	; 0
    a692:	a9 01       	movw	r20, r18
    a694:	af 89       	ldd	r26, Y+23	; 0x17
    a696:	b8 8d       	ldd	r27, Y+24	; 0x18
    a698:	6d 91       	ld	r22, X+
    a69a:	7d 91       	ld	r23, X+
    a69c:	8d 91       	ld	r24, X+
    a69e:	9c 91       	ld	r25, X
    a6a0:	0e 94 ad 68 	call	0xd15a	; 0xd15a <__cmpsf2>
    a6a4:	88 23       	and	r24, r24
    a6a6:	09 f4       	brne	.+2      	; 0xa6aa <collision_detect_level+0xba>
    a6a8:	67 c1       	rjmp	.+718    	; 0xa978 <collision_detect_level+0x388>
}

u8 collision_detect_level(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u16 x0_tile = s->x / 8;
	u16 y0_tile = s->y / 8;
    a6aa:	20 e0       	ldi	r18, 0x00	; 0
    a6ac:	30 e0       	ldi	r19, 0x00	; 0
    a6ae:	40 e0       	ldi	r20, 0x00	; 0
    a6b0:	5e e3       	ldi	r21, 0x3E	; 62
    a6b2:	c7 01       	movw	r24, r14
    a6b4:	b6 01       	movw	r22, r12
    a6b6:	0e 94 93 69 	call	0xd326	; 0xd326 <__mulsf3>
    a6ba:	0e 94 b1 68 	call	0xd162	; 0xd162 <__fixunssfsi>
    a6be:	6b 01       	movw	r12, r22
    a6c0:	7c 01       	movw	r14, r24
    a6c2:	1b 01       	movw	r2, r22
	u16 x1_tile = (s->x+7) / 8;
    a6c4:	20 e0       	ldi	r18, 0x00	; 0
    a6c6:	30 e0       	ldi	r19, 0x00	; 0
    a6c8:	40 ee       	ldi	r20, 0xE0	; 224
    a6ca:	50 e4       	ldi	r21, 0x40	; 64
    a6cc:	c3 01       	movw	r24, r6
    a6ce:	b2 01       	movw	r22, r4
    a6d0:	0e 94 49 68 	call	0xd092	; 0xd092 <__addsf3>
    a6d4:	20 e0       	ldi	r18, 0x00	; 0
    a6d6:	30 e0       	ldi	r19, 0x00	; 0
    a6d8:	40 e0       	ldi	r20, 0x00	; 0
    a6da:	5e e3       	ldi	r21, 0x3E	; 62
    a6dc:	0e 94 93 69 	call	0xd326	; 0xd326 <__mulsf3>
    a6e0:	0e 94 b1 68 	call	0xd162	; 0xd162 <__fixunssfsi>
		{
			if (s->vy < 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, y0_tile);
				lt2 = get_level_tile(game.current_level, x1_tile + x, y0_tile);
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    a6e4:	f4 01       	movw	r30, r8
    a6e6:	53 e0       	ldi	r21, 0x03	; 3
    a6e8:	ee 0f       	add	r30, r30
    a6ea:	ff 1f       	adc	r31, r31
    a6ec:	5a 95       	dec	r21
    a6ee:	e1 f7       	brne	.-8      	; 0xa6e8 <collision_detect_level+0xf8>
    a6f0:	fb 83       	std	Y+3, r31	; 0x03
    a6f2:	ea 83       	std	Y+2, r30	; 0x02
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    a6f4:	9b 01       	movw	r18, r22
    a6f6:	e3 e0       	ldi	r30, 0x03	; 3
    a6f8:	22 0f       	add	r18, r18
    a6fa:	33 1f       	adc	r19, r19
    a6fc:	ea 95       	dec	r30
    a6fe:	e1 f7       	brne	.-8      	; 0xa6f8 <collision_detect_level+0x108>
    a700:	3d 83       	std	Y+5, r19	; 0x05
    a702:	2c 83       	std	Y+4, r18	; 0x04
				{
					s->vy =  0;
					s->y = (y0_tile + 1) * 8;
    a704:	3f ef       	ldi	r19, 0xFF	; 255
    a706:	c3 1a       	sub	r12, r19
    a708:	d3 0a       	sbc	r13, r19
    a70a:	f3 e0       	ldi	r31, 0x03	; 3
    a70c:	cc 0c       	add	r12, r12
    a70e:	dd 1c       	adc	r13, r13
    a710:	fa 95       	dec	r31
    a712:	e1 f7       	brne	.-8      	; 0xa70c <collision_detect_level+0x11c>
					result = 1;
				}
			}
			if (s->vy > 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, (s->y + tile_height*8 - 1) / 8);
    a714:	b9 89       	ldd	r27, Y+17	; 0x11
    a716:	a8 e0       	ldi	r26, 0x08	; 8
    a718:	ba 9f       	mul	r27, r26
    a71a:	a0 01       	movw	r20, r0
    a71c:	11 24       	eor	r1, r1
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) || 
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vy =  0;
					s->gravity = 0;
					s->y = y0_tile * 8;
    a71e:	96 01       	movw	r18, r12
    a720:	28 50       	subi	r18, 0x08	; 8
    a722:	31 09       	sbc	r19, r1
    a724:	2b 01       	movw	r4, r22
    a726:	34 01       	movw	r6, r8
    a728:	19 82       	std	Y+1, r1	; 0x01
				lt2 = get_level_tile(game.current_level, x1_tile + x, y0_tile);
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vy =  0;
					s->y = (y0_tile + 1) * 8;
    a72a:	b6 01       	movw	r22, r12
    a72c:	80 e0       	ldi	r24, 0x00	; 0
    a72e:	90 e0       	ldi	r25, 0x00	; 0
    a730:	69 87       	std	Y+9, r22	; 0x09
    a732:	7a 87       	std	Y+10, r23	; 0x0a
    a734:	8b 87       	std	Y+11, r24	; 0x0b
    a736:	9c 87       	std	Y+12, r25	; 0x0c
					result = 1;
				}
			}
			if (s->vy > 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, (s->y + tile_height*8 - 1) / 8);
    a738:	66 27       	eor	r22, r22
    a73a:	57 fd       	sbrc	r21, 7
    a73c:	60 95       	com	r22
    a73e:	76 2f       	mov	r23, r22
    a740:	4d 87       	std	Y+13, r20	; 0x0d
    a742:	5e 87       	std	Y+14, r21	; 0x0e
    a744:	6f 87       	std	Y+15, r22	; 0x0f
    a746:	78 8b       	std	Y+16, r23	; 0x10
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) || 
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vy =  0;
					s->gravity = 0;
					s->y = y0_tile * 8;
    a748:	b9 01       	movw	r22, r18
    a74a:	80 e0       	ldi	r24, 0x00	; 0
    a74c:	90 e0       	ldi	r25, 0x00	; 0
    a74e:	6b 8b       	std	Y+19, r22	; 0x13
    a750:	7c 8b       	std	Y+20, r23	; 0x14
    a752:	8d 8b       	std	Y+21, r24	; 0x15
    a754:	9e 8b       	std	Y+22, r25	; 0x16
    a756:	86 2d       	mov	r24, r6
    a758:	48 85       	ldd	r20, Y+8	; 0x08
    a75a:	84 1b       	sub	r24, r20
	if (is_space() || (s->vx == 0 && s->vy == 0)) return result;
	
	// Top and Bottom
	if (s->vy != 0)
	{
		for (u8 x = 0; x < tile_width; x++)
    a75c:	81 17       	cp	r24, r17
    a75e:	08 f0       	brcs	.+2      	; 0xa762 <collision_detect_level+0x172>
    a760:	0c c1       	rjmp	.+536    	; 0xa97a <collision_detect_level+0x38a>
		{
			if (s->vy < 0)
    a762:	20 e0       	ldi	r18, 0x00	; 0
    a764:	30 e0       	ldi	r19, 0x00	; 0
    a766:	a9 01       	movw	r20, r18
    a768:	af 89       	ldd	r26, Y+23	; 0x17
    a76a:	b8 8d       	ldd	r27, Y+24	; 0x18
    a76c:	6d 91       	ld	r22, X+
    a76e:	7d 91       	ld	r23, X+
    a770:	8d 91       	ld	r24, X+
    a772:	9c 91       	ld	r25, X
    a774:	0e 94 ad 68 	call	0xd15a	; 0xd15a <__cmpsf2>
    a778:	87 ff       	sbrs	r24, 7
    a77a:	58 c0       	rjmp	.+176    	; 0xa82c <collision_detect_level+0x23c>
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, y0_tile);
    a77c:	a1 01       	movw	r20, r2
    a77e:	b3 01       	movw	r22, r6
    a780:	80 91 a6 0f 	lds	r24, 0x0FA6
    a784:	90 91 a7 0f 	lds	r25, 0x0FA7
    a788:	0e 94 69 4e 	call	0x9cd2	; 0x9cd2 <get_level_tile>
    a78c:	f8 2e       	mov	r15, r24
				lt2 = get_level_tile(game.current_level, x1_tile + x, y0_tile);
    a78e:	a1 01       	movw	r20, r2
    a790:	b2 01       	movw	r22, r4
    a792:	80 91 a6 0f 	lds	r24, 0x0FA6
    a796:	90 91 a7 0f 	lds	r25, 0x0FA7
    a79a:	0e 94 69 4e 	call	0x9cd2	; 0x9cd2 <get_level_tile>
    a79e:	08 2f       	mov	r16, r24
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    a7a0:	8f 2d       	mov	r24, r15
    a7a2:	0e 94 75 4f 	call	0x9eea	; 0x9eea <solid_tile>
    a7a6:	88 23       	and	r24, r24
    a7a8:	91 f0       	breq	.+36     	; 0xa7ce <collision_detect_level+0x1de>
    a7aa:	ef 89       	ldd	r30, Y+23	; 0x17
    a7ac:	f8 8d       	ldd	r31, Y+24	; 0x18
    a7ae:	64 81       	ldd	r22, Z+4	; 0x04
    a7b0:	75 81       	ldd	r23, Z+5	; 0x05
    a7b2:	86 81       	ldd	r24, Z+6	; 0x06
    a7b4:	97 81       	ldd	r25, Z+7	; 0x07
    a7b6:	0e 94 b1 68 	call	0xd162	; 0xd162 <__fixunssfsi>
    a7ba:	dc 01       	movw	r26, r24
    a7bc:	cb 01       	movw	r24, r22
    a7be:	28 e0       	ldi	r18, 0x08	; 8
    a7c0:	48 e0       	ldi	r20, 0x08	; 8
    a7c2:	6a 81       	ldd	r22, Y+2	; 0x02
    a7c4:	7b 81       	ldd	r23, Y+3	; 0x03
    a7c6:	0e 94 e4 52 	call	0xa5c8	; 0xa5c8 <pixel_overlap>
    a7ca:	84 30       	cpi	r24, 0x04	; 4
    a7cc:	c8 f4       	brcc	.+50     	; 0xa800 <collision_detect_level+0x210>
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    a7ce:	80 2f       	mov	r24, r16
    a7d0:	0e 94 75 4f 	call	0x9eea	; 0x9eea <solid_tile>
		{
			if (s->vy < 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, y0_tile);
				lt2 = get_level_tile(game.current_level, x1_tile + x, y0_tile);
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    a7d4:	88 23       	and	r24, r24
    a7d6:	51 f1       	breq	.+84     	; 0xa82c <collision_detect_level+0x23c>
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    a7d8:	af 89       	ldd	r26, Y+23	; 0x17
    a7da:	b8 8d       	ldd	r27, Y+24	; 0x18
    a7dc:	14 96       	adiw	r26, 0x04	; 4
    a7de:	6d 91       	ld	r22, X+
    a7e0:	7d 91       	ld	r23, X+
    a7e2:	8d 91       	ld	r24, X+
    a7e4:	9c 91       	ld	r25, X
    a7e6:	17 97       	sbiw	r26, 0x07	; 7
    a7e8:	0e 94 b1 68 	call	0xd162	; 0xd162 <__fixunssfsi>
    a7ec:	dc 01       	movw	r26, r24
    a7ee:	cb 01       	movw	r24, r22
    a7f0:	28 e0       	ldi	r18, 0x08	; 8
    a7f2:	48 e0       	ldi	r20, 0x08	; 8
    a7f4:	6c 81       	ldd	r22, Y+4	; 0x04
    a7f6:	7d 81       	ldd	r23, Y+5	; 0x05
    a7f8:	0e 94 e4 52 	call	0xa5c8	; 0xa5c8 <pixel_overlap>
    a7fc:	84 30       	cpi	r24, 0x04	; 4
    a7fe:	b0 f0       	brcs	.+44     	; 0xa82c <collision_detect_level+0x23c>
				{
					s->vy =  0;
    a800:	ef 89       	ldd	r30, Y+23	; 0x17
    a802:	f8 8d       	ldd	r31, Y+24	; 0x18
    a804:	10 82       	st	Z, r1
    a806:	11 82       	std	Z+1, r1	; 0x01
    a808:	12 82       	std	Z+2, r1	; 0x02
    a80a:	13 82       	std	Z+3, r1	; 0x03
					s->y = (y0_tile + 1) * 8;
    a80c:	69 85       	ldd	r22, Y+9	; 0x09
    a80e:	7a 85       	ldd	r23, Y+10	; 0x0a
    a810:	8b 85       	ldd	r24, Y+11	; 0x0b
    a812:	9c 85       	ldd	r25, Y+12	; 0x0c
    a814:	0e 94 dd 68 	call	0xd1ba	; 0xd1ba <__floatunsisf>
    a818:	af 89       	ldd	r26, Y+23	; 0x17
    a81a:	b8 8d       	ldd	r27, Y+24	; 0x18
    a81c:	18 96       	adiw	r26, 0x08	; 8
    a81e:	6d 93       	st	X+, r22
    a820:	7d 93       	st	X+, r23
    a822:	8d 93       	st	X+, r24
    a824:	9c 93       	st	X, r25
    a826:	1b 97       	sbiw	r26, 0x0b	; 11
					result = 1;
    a828:	b1 e0       	ldi	r27, 0x01	; 1
    a82a:	b9 83       	std	Y+1, r27	; 0x01
				}
			}
			if (s->vy > 0)
    a82c:	20 e0       	ldi	r18, 0x00	; 0
    a82e:	30 e0       	ldi	r19, 0x00	; 0
    a830:	a9 01       	movw	r20, r18
    a832:	ef 89       	ldd	r30, Y+23	; 0x17
    a834:	f8 8d       	ldd	r31, Y+24	; 0x18
    a836:	60 81       	ld	r22, Z
    a838:	71 81       	ldd	r23, Z+1	; 0x01
    a83a:	82 81       	ldd	r24, Z+2	; 0x02
    a83c:	93 81       	ldd	r25, Z+3	; 0x03
    a83e:	0e 94 8f 69 	call	0xd31e	; 0xd31e <__gesf2>
    a842:	18 16       	cp	r1, r24
    a844:	0c f0       	brlt	.+2      	; 0xa848 <collision_detect_level+0x258>
    a846:	91 c0       	rjmp	.+290    	; 0xa96a <collision_detect_level+0x37a>
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, (s->y + tile_height*8 - 1) / 8);
    a848:	6d 85       	ldd	r22, Y+13	; 0x0d
    a84a:	7e 85       	ldd	r23, Y+14	; 0x0e
    a84c:	8f 85       	ldd	r24, Y+15	; 0x0f
    a84e:	98 89       	ldd	r25, Y+16	; 0x10
    a850:	0e 94 df 68 	call	0xd1be	; 0xd1be <__floatsisf>
    a854:	6b 01       	movw	r12, r22
    a856:	7c 01       	movw	r14, r24
    a858:	af 89       	ldd	r26, Y+23	; 0x17
    a85a:	b8 8d       	ldd	r27, Y+24	; 0x18
    a85c:	18 96       	adiw	r26, 0x08	; 8
    a85e:	2d 91       	ld	r18, X+
    a860:	3d 91       	ld	r19, X+
    a862:	4d 91       	ld	r20, X+
    a864:	5c 91       	ld	r21, X
    a866:	1b 97       	sbiw	r26, 0x0b	; 11
    a868:	0e 94 49 68 	call	0xd092	; 0xd092 <__addsf3>
    a86c:	20 e0       	ldi	r18, 0x00	; 0
    a86e:	30 e0       	ldi	r19, 0x00	; 0
    a870:	40 e8       	ldi	r20, 0x80	; 128
    a872:	5f e3       	ldi	r21, 0x3F	; 63
    a874:	0e 94 48 68 	call	0xd090	; 0xd090 <__subsf3>
    a878:	20 e0       	ldi	r18, 0x00	; 0
    a87a:	30 e0       	ldi	r19, 0x00	; 0
    a87c:	40 e0       	ldi	r20, 0x00	; 0
    a87e:	5e e3       	ldi	r21, 0x3E	; 62
    a880:	0e 94 93 69 	call	0xd326	; 0xd326 <__mulsf3>
    a884:	0e 94 b1 68 	call	0xd162	; 0xd162 <__fixunssfsi>
    a888:	ab 01       	movw	r20, r22
    a88a:	b3 01       	movw	r22, r6
    a88c:	80 91 a6 0f 	lds	r24, 0x0FA6
    a890:	90 91 a7 0f 	lds	r25, 0x0FA7
    a894:	0e 94 69 4e 	call	0x9cd2	; 0x9cd2 <get_level_tile>
    a898:	08 2f       	mov	r16, r24
				lt2 = get_level_tile(game.current_level, x1_tile + x, (s->y + tile_height*8 - 1) / 8);
    a89a:	ef 89       	ldd	r30, Y+23	; 0x17
    a89c:	f8 8d       	ldd	r31, Y+24	; 0x18
    a89e:	20 85       	ldd	r18, Z+8	; 0x08
    a8a0:	31 85       	ldd	r19, Z+9	; 0x09
    a8a2:	42 85       	ldd	r20, Z+10	; 0x0a
    a8a4:	53 85       	ldd	r21, Z+11	; 0x0b
    a8a6:	c7 01       	movw	r24, r14
    a8a8:	b6 01       	movw	r22, r12
    a8aa:	0e 94 49 68 	call	0xd092	; 0xd092 <__addsf3>
    a8ae:	20 e0       	ldi	r18, 0x00	; 0
    a8b0:	30 e0       	ldi	r19, 0x00	; 0
    a8b2:	40 e8       	ldi	r20, 0x80	; 128
    a8b4:	5f e3       	ldi	r21, 0x3F	; 63
    a8b6:	0e 94 48 68 	call	0xd090	; 0xd090 <__subsf3>
    a8ba:	20 e0       	ldi	r18, 0x00	; 0
    a8bc:	30 e0       	ldi	r19, 0x00	; 0
    a8be:	40 e0       	ldi	r20, 0x00	; 0
    a8c0:	5e e3       	ldi	r21, 0x3E	; 62
    a8c2:	0e 94 93 69 	call	0xd326	; 0xd326 <__mulsf3>
    a8c6:	0e 94 b1 68 	call	0xd162	; 0xd162 <__fixunssfsi>
    a8ca:	ab 01       	movw	r20, r22
    a8cc:	b2 01       	movw	r22, r4
    a8ce:	80 91 a6 0f 	lds	r24, 0x0FA6
    a8d2:	90 91 a7 0f 	lds	r25, 0x0FA7
    a8d6:	0e 94 69 4e 	call	0x9cd2	; 0x9cd2 <get_level_tile>
    a8da:	f8 2e       	mov	r15, r24
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) || 
    a8dc:	80 2f       	mov	r24, r16
    a8de:	0e 94 75 4f 	call	0x9eea	; 0x9eea <solid_tile>
    a8e2:	88 23       	and	r24, r24
    a8e4:	a1 f0       	breq	.+40     	; 0xa90e <collision_detect_level+0x31e>
    a8e6:	af 89       	ldd	r26, Y+23	; 0x17
    a8e8:	b8 8d       	ldd	r27, Y+24	; 0x18
    a8ea:	14 96       	adiw	r26, 0x04	; 4
    a8ec:	6d 91       	ld	r22, X+
    a8ee:	7d 91       	ld	r23, X+
    a8f0:	8d 91       	ld	r24, X+
    a8f2:	9c 91       	ld	r25, X
    a8f4:	17 97       	sbiw	r26, 0x07	; 7
    a8f6:	0e 94 b1 68 	call	0xd162	; 0xd162 <__fixunssfsi>
    a8fa:	dc 01       	movw	r26, r24
    a8fc:	cb 01       	movw	r24, r22
    a8fe:	28 e0       	ldi	r18, 0x08	; 8
    a900:	48 e0       	ldi	r20, 0x08	; 8
    a902:	6a 81       	ldd	r22, Y+2	; 0x02
    a904:	7b 81       	ldd	r23, Y+3	; 0x03
    a906:	0e 94 e4 52 	call	0xa5c8	; 0xa5c8 <pixel_overlap>
    a90a:	84 30       	cpi	r24, 0x04	; 4
    a90c:	b8 f4       	brcc	.+46     	; 0xa93c <collision_detect_level+0x34c>
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    a90e:	8f 2d       	mov	r24, r15
    a910:	0e 94 75 4f 	call	0x9eea	; 0x9eea <solid_tile>
			}
			if (s->vy > 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, (s->y + tile_height*8 - 1) / 8);
				lt2 = get_level_tile(game.current_level, x1_tile + x, (s->y + tile_height*8 - 1) / 8);
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) || 
    a914:	88 23       	and	r24, r24
    a916:	49 f1       	breq	.+82     	; 0xa96a <collision_detect_level+0x37a>
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    a918:	ef 89       	ldd	r30, Y+23	; 0x17
    a91a:	f8 8d       	ldd	r31, Y+24	; 0x18
    a91c:	64 81       	ldd	r22, Z+4	; 0x04
    a91e:	75 81       	ldd	r23, Z+5	; 0x05
    a920:	86 81       	ldd	r24, Z+6	; 0x06
    a922:	97 81       	ldd	r25, Z+7	; 0x07
    a924:	0e 94 b1 68 	call	0xd162	; 0xd162 <__fixunssfsi>
    a928:	dc 01       	movw	r26, r24
    a92a:	cb 01       	movw	r24, r22
    a92c:	28 e0       	ldi	r18, 0x08	; 8
    a92e:	48 e0       	ldi	r20, 0x08	; 8
    a930:	6c 81       	ldd	r22, Y+4	; 0x04
    a932:	7d 81       	ldd	r23, Y+5	; 0x05
    a934:	0e 94 e4 52 	call	0xa5c8	; 0xa5c8 <pixel_overlap>
    a938:	84 30       	cpi	r24, 0x04	; 4
    a93a:	b8 f0       	brcs	.+46     	; 0xa96a <collision_detect_level+0x37a>
				{
					s->vy =  0;
    a93c:	af 89       	ldd	r26, Y+23	; 0x17
    a93e:	b8 8d       	ldd	r27, Y+24	; 0x18
    a940:	1d 92       	st	X+, r1
    a942:	1d 92       	st	X+, r1
    a944:	1d 92       	st	X+, r1
    a946:	1c 92       	st	X, r1
    a948:	13 97       	sbiw	r26, 0x03	; 3
					s->gravity = 0;
    a94a:	1e 96       	adiw	r26, 0x0e	; 14
    a94c:	1c 92       	st	X, r1
					s->y = y0_tile * 8;
    a94e:	6b 89       	ldd	r22, Y+19	; 0x13
    a950:	7c 89       	ldd	r23, Y+20	; 0x14
    a952:	8d 89       	ldd	r24, Y+21	; 0x15
    a954:	9e 89       	ldd	r25, Y+22	; 0x16
    a956:	0e 94 dd 68 	call	0xd1ba	; 0xd1ba <__floatunsisf>
    a95a:	ef 89       	ldd	r30, Y+23	; 0x17
    a95c:	f8 8d       	ldd	r31, Y+24	; 0x18
    a95e:	60 87       	std	Z+8, r22	; 0x08
    a960:	71 87       	std	Z+9, r23	; 0x09
    a962:	82 87       	std	Z+10, r24	; 0x0a
    a964:	93 87       	std	Z+11, r25	; 0x0b
					result = 1;
    a966:	f1 e0       	ldi	r31, 0x01	; 1
    a968:	f9 83       	std	Y+1, r31	; 0x01
    a96a:	2f ef       	ldi	r18, 0xFF	; 255
    a96c:	62 1a       	sub	r6, r18
    a96e:	72 0a       	sbc	r7, r18
    a970:	3f ef       	ldi	r19, 0xFF	; 255
    a972:	43 1a       	sub	r4, r19
    a974:	53 0a       	sbc	r5, r19
    a976:	ef ce       	rjmp	.-546    	; 0xa756 <collision_detect_level+0x166>
	u16 x0_tile = s->x / 8;
	u16 y0_tile = s->y / 8;
	u16 x1_tile = (s->x+7) / 8;
	u16 y1_tile = (s->y+7) / 8;
	u8 lt1, lt2;
	u8 result = 0;
    a978:	19 82       	std	Y+1, r1	; 0x01
			}
		}
	}
	
	// Left and Right
	if (s->vx != 0)
    a97a:	af 89       	ldd	r26, Y+23	; 0x17
    a97c:	b8 8d       	ldd	r27, Y+24	; 0x18
    a97e:	1c 96       	adiw	r26, 0x0c	; 12
    a980:	8d 91       	ld	r24, X+
    a982:	9c 91       	ld	r25, X
    a984:	1d 97       	sbiw	r26, 0x0d	; 13
    a986:	89 2b       	or	r24, r25
    a988:	09 f4       	brne	.+2      	; 0xa98c <collision_detect_level+0x39c>
    a98a:	54 c1       	rjmp	.+680    	; 0xac34 <collision_detect_level+0x644>
	{
		y0_tile = s->y / 8;
    a98c:	18 96       	adiw	r26, 0x08	; 8
    a98e:	cd 90       	ld	r12, X+
    a990:	dd 90       	ld	r13, X+
    a992:	ed 90       	ld	r14, X+
    a994:	fc 90       	ld	r15, X
    a996:	1b 97       	sbiw	r26, 0x0b	; 11
    a998:	20 e0       	ldi	r18, 0x00	; 0
    a99a:	30 e0       	ldi	r19, 0x00	; 0
    a99c:	40 e0       	ldi	r20, 0x00	; 0
    a99e:	5e e3       	ldi	r21, 0x3E	; 62
    a9a0:	c7 01       	movw	r24, r14
    a9a2:	b6 01       	movw	r22, r12
    a9a4:	0e 94 93 69 	call	0xd326	; 0xd326 <__mulsf3>
    a9a8:	0e 94 b1 68 	call	0xd162	; 0xd162 <__fixunssfsi>
    a9ac:	2b 01       	movw	r4, r22
    a9ae:	3c 01       	movw	r6, r24
    a9b0:	6d 87       	std	Y+13, r22	; 0x0d
		y1_tile = (s->y+7) / 8;
    a9b2:	20 e0       	ldi	r18, 0x00	; 0
    a9b4:	30 e0       	ldi	r19, 0x00	; 0
    a9b6:	40 ee       	ldi	r20, 0xE0	; 224
    a9b8:	50 e4       	ldi	r21, 0x40	; 64
    a9ba:	c7 01       	movw	r24, r14
    a9bc:	b6 01       	movw	r22, r12
    a9be:	0e 94 49 68 	call	0xd092	; 0xd092 <__addsf3>
    a9c2:	20 e0       	ldi	r18, 0x00	; 0
    a9c4:	30 e0       	ldi	r19, 0x00	; 0
    a9c6:	40 e0       	ldi	r20, 0x00	; 0
    a9c8:	5e e3       	ldi	r21, 0x3E	; 62
    a9ca:	0e 94 93 69 	call	0xd326	; 0xd326 <__mulsf3>
    a9ce:	0e 94 b1 68 	call	0xd162	; 0xd162 <__fixunssfsi>
		{
			if (s->vx < 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile, y0_tile + y);
				lt2 = get_level_tile(game.current_level, x0_tile, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    a9d2:	12 01       	movw	r2, r4
    a9d4:	83 e0       	ldi	r24, 0x03	; 3
    a9d6:	22 0c       	add	r2, r2
    a9d8:	33 1c       	adc	r3, r3
    a9da:	8a 95       	dec	r24
    a9dc:	e1 f7       	brne	.-8      	; 0xa9d6 <collision_detect_level+0x3e6>
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    a9de:	fb 01       	movw	r30, r22
    a9e0:	93 e0       	ldi	r25, 0x03	; 3
    a9e2:	ee 0f       	add	r30, r30
    a9e4:	ff 1f       	adc	r31, r31
    a9e6:	9a 95       	dec	r25
    a9e8:	e1 f7       	brne	.-8      	; 0xa9e2 <collision_detect_level+0x3f2>
    a9ea:	fb 83       	std	Y+3, r31	; 0x03
    a9ec:	ea 83       	std	Y+2, r30	; 0x02
				{
					s->vx =  0;
					s->x = (x0_tile + 1) * 8;
    a9ee:	ff ef       	ldi	r31, 0xFF	; 255
    a9f0:	8f 1a       	sub	r8, r31
    a9f2:	9f 0a       	sbc	r9, r31
    a9f4:	94 01       	movw	r18, r8
    a9f6:	43 e0       	ldi	r20, 0x03	; 3
    a9f8:	22 0f       	add	r18, r18
    a9fa:	33 1f       	adc	r19, r19
    a9fc:	4a 95       	dec	r20
    a9fe:	e1 f7       	brne	.-8      	; 0xa9f8 <collision_detect_level+0x408>
				}
			}
			
			if (s->vx > 0)
			{
				lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y0_tile + y);
    aa00:	a8 e0       	ldi	r26, 0x08	; 8
    aa02:	1a 9f       	mul	r17, r26
    aa04:	a0 01       	movw	r20, r0
    aa06:	11 24       	eor	r1, r1
				lt2 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vx =  0;
					s->x = x0_tile * 8;
    aa08:	49 01       	movw	r8, r18
    aa0a:	b8 e0       	ldi	r27, 0x08	; 8
    aa0c:	8b 1a       	sub	r8, r27
    aa0e:	91 08       	sbc	r9, r1
	// Left and Right
	if (s->vx != 0)
	{
		y0_tile = s->y / 8;
		y1_tile = (s->y+7) / 8;
		for (u8 y = 0; y < tile_height; y++)
    aa10:	6b 01       	movw	r12, r22
    aa12:	82 01       	movw	r16, r4
				lt2 = get_level_tile(game.current_level, x0_tile, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vx =  0;
					s->x = (x0_tile + 1) * 8;
    aa14:	b9 01       	movw	r22, r18
    aa16:	80 e0       	ldi	r24, 0x00	; 0
    aa18:	90 e0       	ldi	r25, 0x00	; 0
    aa1a:	6c 83       	std	Y+4, r22	; 0x04
    aa1c:	7d 83       	std	Y+5, r23	; 0x05
    aa1e:	8e 83       	std	Y+6, r24	; 0x06
    aa20:	9f 83       	std	Y+7, r25	; 0x07
				}
			}
			
			if (s->vx > 0)
			{
				lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y0_tile + y);
    aa22:	ca 01       	movw	r24, r20
    aa24:	aa 27       	eor	r26, r26
    aa26:	97 fd       	sbrc	r25, 7
    aa28:	a0 95       	com	r26
    aa2a:	ba 2f       	mov	r27, r26
    aa2c:	89 87       	std	Y+9, r24	; 0x09
    aa2e:	9a 87       	std	Y+10, r25	; 0x0a
    aa30:	ab 87       	std	Y+11, r26	; 0x0b
    aa32:	bc 87       	std	Y+12, r27	; 0x0c
				lt2 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vx =  0;
					s->x = x0_tile * 8;
    aa34:	a1 2c       	mov	r10, r1
    aa36:	b1 2c       	mov	r11, r1
    aa38:	80 2f       	mov	r24, r16
    aa3a:	3d 85       	ldd	r19, Y+13	; 0x0d
    aa3c:	83 1b       	sub	r24, r19
	// Left and Right
	if (s->vx != 0)
	{
		y0_tile = s->y / 8;
		y1_tile = (s->y+7) / 8;
		for (u8 y = 0; y < tile_height; y++)
    aa3e:	49 89       	ldd	r20, Y+17	; 0x11
    aa40:	84 17       	cp	r24, r20
    aa42:	08 f0       	brcs	.+2      	; 0xaa46 <collision_detect_level+0x456>
    aa44:	f7 c0       	rjmp	.+494    	; 0xac34 <collision_detect_level+0x644>
		{
			if (s->vx < 0)
    aa46:	af 89       	ldd	r26, Y+23	; 0x17
    aa48:	b8 8d       	ldd	r27, Y+24	; 0x18
    aa4a:	1c 96       	adiw	r26, 0x0c	; 12
    aa4c:	8d 91       	ld	r24, X+
    aa4e:	9c 91       	ld	r25, X
    aa50:	1d 97       	sbiw	r26, 0x0d	; 13
    aa52:	97 ff       	sbrs	r25, 7
    aa54:	57 c0       	rjmp	.+174    	; 0xab04 <collision_detect_level+0x514>
			{
				lt1 = get_level_tile(game.current_level, x0_tile, y0_tile + y);
    aa56:	a8 01       	movw	r20, r16
    aa58:	68 85       	ldd	r22, Y+8	; 0x08
    aa5a:	7a 89       	ldd	r23, Y+18	; 0x12
    aa5c:	80 91 a6 0f 	lds	r24, 0x0FA6
    aa60:	90 91 a7 0f 	lds	r25, 0x0FA7
    aa64:	0e 94 69 4e 	call	0x9cd2	; 0x9cd2 <get_level_tile>
    aa68:	78 2e       	mov	r7, r24
				lt2 = get_level_tile(game.current_level, x0_tile, y1_tile + y);
    aa6a:	a6 01       	movw	r20, r12
    aa6c:	68 85       	ldd	r22, Y+8	; 0x08
    aa6e:	7a 89       	ldd	r23, Y+18	; 0x12
    aa70:	80 91 a6 0f 	lds	r24, 0x0FA6
    aa74:	90 91 a7 0f 	lds	r25, 0x0FA7
    aa78:	0e 94 69 4e 	call	0x9cd2	; 0x9cd2 <get_level_tile>
    aa7c:	e8 2e       	mov	r14, r24
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    aa7e:	87 2d       	mov	r24, r7
    aa80:	0e 94 75 4f 	call	0x9eea	; 0x9eea <solid_tile>
    aa84:	88 23       	and	r24, r24
    aa86:	89 f0       	breq	.+34     	; 0xaaaa <collision_detect_level+0x4ba>
    aa88:	ef 89       	ldd	r30, Y+23	; 0x17
    aa8a:	f8 8d       	ldd	r31, Y+24	; 0x18
    aa8c:	60 85       	ldd	r22, Z+8	; 0x08
    aa8e:	71 85       	ldd	r23, Z+9	; 0x09
    aa90:	82 85       	ldd	r24, Z+10	; 0x0a
    aa92:	93 85       	ldd	r25, Z+11	; 0x0b
    aa94:	0e 94 b1 68 	call	0xd162	; 0xd162 <__fixunssfsi>
    aa98:	dc 01       	movw	r26, r24
    aa9a:	cb 01       	movw	r24, r22
    aa9c:	28 e0       	ldi	r18, 0x08	; 8
    aa9e:	48 e0       	ldi	r20, 0x08	; 8
    aaa0:	b1 01       	movw	r22, r2
    aaa2:	0e 94 e4 52 	call	0xa5c8	; 0xa5c8 <pixel_overlap>
    aaa6:	84 30       	cpi	r24, 0x04	; 4
    aaa8:	c8 f4       	brcc	.+50     	; 0xaadc <collision_detect_level+0x4ec>
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    aaaa:	8e 2d       	mov	r24, r14
    aaac:	0e 94 75 4f 	call	0x9eea	; 0x9eea <solid_tile>
		{
			if (s->vx < 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile, y0_tile + y);
				lt2 = get_level_tile(game.current_level, x0_tile, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    aab0:	88 23       	and	r24, r24
    aab2:	41 f1       	breq	.+80     	; 0xab04 <collision_detect_level+0x514>
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    aab4:	af 89       	ldd	r26, Y+23	; 0x17
    aab6:	b8 8d       	ldd	r27, Y+24	; 0x18
    aab8:	18 96       	adiw	r26, 0x08	; 8
    aaba:	6d 91       	ld	r22, X+
    aabc:	7d 91       	ld	r23, X+
    aabe:	8d 91       	ld	r24, X+
    aac0:	9c 91       	ld	r25, X
    aac2:	1b 97       	sbiw	r26, 0x0b	; 11
    aac4:	0e 94 b1 68 	call	0xd162	; 0xd162 <__fixunssfsi>
    aac8:	dc 01       	movw	r26, r24
    aaca:	cb 01       	movw	r24, r22
    aacc:	28 e0       	ldi	r18, 0x08	; 8
    aace:	48 e0       	ldi	r20, 0x08	; 8
    aad0:	6a 81       	ldd	r22, Y+2	; 0x02
    aad2:	7b 81       	ldd	r23, Y+3	; 0x03
    aad4:	0e 94 e4 52 	call	0xa5c8	; 0xa5c8 <pixel_overlap>
    aad8:	84 30       	cpi	r24, 0x04	; 4
    aada:	a0 f0       	brcs	.+40     	; 0xab04 <collision_detect_level+0x514>
				{
					s->vx =  0;
    aadc:	ef 89       	ldd	r30, Y+23	; 0x17
    aade:	f8 8d       	ldd	r31, Y+24	; 0x18
    aae0:	15 86       	std	Z+13, r1	; 0x0d
    aae2:	14 86       	std	Z+12, r1	; 0x0c
					s->x = (x0_tile + 1) * 8;
    aae4:	6c 81       	ldd	r22, Y+4	; 0x04
    aae6:	7d 81       	ldd	r23, Y+5	; 0x05
    aae8:	8e 81       	ldd	r24, Y+6	; 0x06
    aaea:	9f 81       	ldd	r25, Y+7	; 0x07
    aaec:	0e 94 dd 68 	call	0xd1ba	; 0xd1ba <__floatunsisf>
    aaf0:	af 89       	ldd	r26, Y+23	; 0x17
    aaf2:	b8 8d       	ldd	r27, Y+24	; 0x18
    aaf4:	14 96       	adiw	r26, 0x04	; 4
    aaf6:	6d 93       	st	X+, r22
    aaf8:	7d 93       	st	X+, r23
    aafa:	8d 93       	st	X+, r24
    aafc:	9c 93       	st	X, r25
    aafe:	17 97       	sbiw	r26, 0x07	; 7
					result = 1;
    ab00:	b1 e0       	ldi	r27, 0x01	; 1
    ab02:	b9 83       	std	Y+1, r27	; 0x01
				}
			}
			
			if (s->vx > 0)
    ab04:	ef 89       	ldd	r30, Y+23	; 0x17
    ab06:	f8 8d       	ldd	r31, Y+24	; 0x18
    ab08:	84 85       	ldd	r24, Z+12	; 0x0c
    ab0a:	95 85       	ldd	r25, Z+13	; 0x0d
    ab0c:	18 16       	cp	r1, r24
    ab0e:	19 06       	cpc	r1, r25
    ab10:	0c f0       	brlt	.+2      	; 0xab14 <collision_detect_level+0x524>
    ab12:	89 c0       	rjmp	.+274    	; 0xac26 <collision_detect_level+0x636>
			{
				lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y0_tile + y);
    ab14:	69 85       	ldd	r22, Y+9	; 0x09
    ab16:	7a 85       	ldd	r23, Y+10	; 0x0a
    ab18:	8b 85       	ldd	r24, Y+11	; 0x0b
    ab1a:	9c 85       	ldd	r25, Y+12	; 0x0c
    ab1c:	0e 94 df 68 	call	0xd1be	; 0xd1be <__floatsisf>
    ab20:	2b 01       	movw	r4, r22
    ab22:	3c 01       	movw	r6, r24
    ab24:	af 89       	ldd	r26, Y+23	; 0x17
    ab26:	b8 8d       	ldd	r27, Y+24	; 0x18
    ab28:	14 96       	adiw	r26, 0x04	; 4
    ab2a:	2d 91       	ld	r18, X+
    ab2c:	3d 91       	ld	r19, X+
    ab2e:	4d 91       	ld	r20, X+
    ab30:	5c 91       	ld	r21, X
    ab32:	17 97       	sbiw	r26, 0x07	; 7
    ab34:	0e 94 49 68 	call	0xd092	; 0xd092 <__addsf3>
    ab38:	20 e0       	ldi	r18, 0x00	; 0
    ab3a:	30 e0       	ldi	r19, 0x00	; 0
    ab3c:	40 e8       	ldi	r20, 0x80	; 128
    ab3e:	5f e3       	ldi	r21, 0x3F	; 63
    ab40:	0e 94 48 68 	call	0xd090	; 0xd090 <__subsf3>
    ab44:	20 e0       	ldi	r18, 0x00	; 0
    ab46:	30 e0       	ldi	r19, 0x00	; 0
    ab48:	40 e0       	ldi	r20, 0x00	; 0
    ab4a:	5e e3       	ldi	r21, 0x3E	; 62
    ab4c:	0e 94 93 69 	call	0xd326	; 0xd326 <__mulsf3>
    ab50:	0e 94 b1 68 	call	0xd162	; 0xd162 <__fixunssfsi>
    ab54:	a8 01       	movw	r20, r16
    ab56:	80 91 a6 0f 	lds	r24, 0x0FA6
    ab5a:	90 91 a7 0f 	lds	r25, 0x0FA7
    ab5e:	0e 94 69 4e 	call	0x9cd2	; 0x9cd2 <get_level_tile>
    ab62:	e8 2e       	mov	r14, r24
				lt2 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y1_tile + y);
    ab64:	ef 89       	ldd	r30, Y+23	; 0x17
    ab66:	f8 8d       	ldd	r31, Y+24	; 0x18
    ab68:	24 81       	ldd	r18, Z+4	; 0x04
    ab6a:	35 81       	ldd	r19, Z+5	; 0x05
    ab6c:	46 81       	ldd	r20, Z+6	; 0x06
    ab6e:	57 81       	ldd	r21, Z+7	; 0x07
    ab70:	c3 01       	movw	r24, r6
    ab72:	b2 01       	movw	r22, r4
    ab74:	0e 94 49 68 	call	0xd092	; 0xd092 <__addsf3>
    ab78:	20 e0       	ldi	r18, 0x00	; 0
    ab7a:	30 e0       	ldi	r19, 0x00	; 0
    ab7c:	40 e8       	ldi	r20, 0x80	; 128
    ab7e:	5f e3       	ldi	r21, 0x3F	; 63
    ab80:	0e 94 48 68 	call	0xd090	; 0xd090 <__subsf3>
    ab84:	20 e0       	ldi	r18, 0x00	; 0
    ab86:	30 e0       	ldi	r19, 0x00	; 0
    ab88:	40 e0       	ldi	r20, 0x00	; 0
    ab8a:	5e e3       	ldi	r21, 0x3E	; 62
    ab8c:	0e 94 93 69 	call	0xd326	; 0xd326 <__mulsf3>
    ab90:	0e 94 b1 68 	call	0xd162	; 0xd162 <__fixunssfsi>
    ab94:	a6 01       	movw	r20, r12
    ab96:	80 91 a6 0f 	lds	r24, 0x0FA6
    ab9a:	90 91 a7 0f 	lds	r25, 0x0FA7
    ab9e:	0e 94 69 4e 	call	0x9cd2	; 0x9cd2 <get_level_tile>
    aba2:	78 2e       	mov	r7, r24
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    aba4:	8e 2d       	mov	r24, r14
    aba6:	0e 94 75 4f 	call	0x9eea	; 0x9eea <solid_tile>
    abaa:	88 23       	and	r24, r24
    abac:	99 f0       	breq	.+38     	; 0xabd4 <collision_detect_level+0x5e4>
    abae:	af 89       	ldd	r26, Y+23	; 0x17
    abb0:	b8 8d       	ldd	r27, Y+24	; 0x18
    abb2:	18 96       	adiw	r26, 0x08	; 8
    abb4:	6d 91       	ld	r22, X+
    abb6:	7d 91       	ld	r23, X+
    abb8:	8d 91       	ld	r24, X+
    abba:	9c 91       	ld	r25, X
    abbc:	1b 97       	sbiw	r26, 0x0b	; 11
    abbe:	0e 94 b1 68 	call	0xd162	; 0xd162 <__fixunssfsi>
    abc2:	dc 01       	movw	r26, r24
    abc4:	cb 01       	movw	r24, r22
    abc6:	28 e0       	ldi	r18, 0x08	; 8
    abc8:	48 e0       	ldi	r20, 0x08	; 8
    abca:	b1 01       	movw	r22, r2
    abcc:	0e 94 e4 52 	call	0xa5c8	; 0xa5c8 <pixel_overlap>
    abd0:	84 30       	cpi	r24, 0x04	; 4
    abd2:	b8 f4       	brcc	.+46     	; 0xac02 <collision_detect_level+0x612>
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    abd4:	87 2d       	mov	r24, r7
    abd6:	0e 94 75 4f 	call	0x9eea	; 0x9eea <solid_tile>
			
			if (s->vx > 0)
			{
				lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y0_tile + y);
				lt2 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    abda:	88 23       	and	r24, r24
    abdc:	21 f1       	breq	.+72     	; 0xac26 <collision_detect_level+0x636>
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    abde:	ef 89       	ldd	r30, Y+23	; 0x17
    abe0:	f8 8d       	ldd	r31, Y+24	; 0x18
    abe2:	60 85       	ldd	r22, Z+8	; 0x08
    abe4:	71 85       	ldd	r23, Z+9	; 0x09
    abe6:	82 85       	ldd	r24, Z+10	; 0x0a
    abe8:	93 85       	ldd	r25, Z+11	; 0x0b
    abea:	0e 94 b1 68 	call	0xd162	; 0xd162 <__fixunssfsi>
    abee:	dc 01       	movw	r26, r24
    abf0:	cb 01       	movw	r24, r22
    abf2:	28 e0       	ldi	r18, 0x08	; 8
    abf4:	48 e0       	ldi	r20, 0x08	; 8
    abf6:	6a 81       	ldd	r22, Y+2	; 0x02
    abf8:	7b 81       	ldd	r23, Y+3	; 0x03
    abfa:	0e 94 e4 52 	call	0xa5c8	; 0xa5c8 <pixel_overlap>
    abfe:	84 30       	cpi	r24, 0x04	; 4
    ac00:	90 f0       	brcs	.+36     	; 0xac26 <collision_detect_level+0x636>
				{
					s->vx =  0;
    ac02:	af 89       	ldd	r26, Y+23	; 0x17
    ac04:	b8 8d       	ldd	r27, Y+24	; 0x18
    ac06:	1d 96       	adiw	r26, 0x0d	; 13
    ac08:	1c 92       	st	X, r1
    ac0a:	1e 92       	st	-X, r1
    ac0c:	1c 97       	sbiw	r26, 0x0c	; 12
					s->x = x0_tile * 8;
    ac0e:	c5 01       	movw	r24, r10
    ac10:	b4 01       	movw	r22, r8
    ac12:	0e 94 dd 68 	call	0xd1ba	; 0xd1ba <__floatunsisf>
    ac16:	ef 89       	ldd	r30, Y+23	; 0x17
    ac18:	f8 8d       	ldd	r31, Y+24	; 0x18
    ac1a:	64 83       	std	Z+4, r22	; 0x04
    ac1c:	75 83       	std	Z+5, r23	; 0x05
    ac1e:	86 83       	std	Z+6, r24	; 0x06
    ac20:	97 83       	std	Z+7, r25	; 0x07
					result = 1;
    ac22:	f1 e0       	ldi	r31, 0x01	; 1
    ac24:	f9 83       	std	Y+1, r31	; 0x01
    ac26:	0f 5f       	subi	r16, 0xFF	; 255
    ac28:	1f 4f       	sbci	r17, 0xFF	; 255
    ac2a:	2f ef       	ldi	r18, 0xFF	; 255
    ac2c:	c2 1a       	sub	r12, r18
    ac2e:	d2 0a       	sbc	r13, r18
    ac30:	03 cf       	rjmp	.-506    	; 0xaa38 <collision_detect_level+0x448>
	u16 y1_tile = (s->y+7) / 8;
	u8 lt1, lt2;
	u8 result = 0;
	
	// Only if moving on planet
	if (is_space() || (s->vx == 0 && s->vy == 0)) return result;
    ac32:	19 82       	std	Y+1, r1	; 0x01
				}
			}
		}
	}
	return result;
}
    ac34:	89 81       	ldd	r24, Y+1	; 0x01
    ac36:	68 96       	adiw	r28, 0x18	; 24
    ac38:	0f b6       	in	r0, 0x3f	; 63
    ac3a:	f8 94       	cli
    ac3c:	de bf       	out	0x3e, r29	; 62
    ac3e:	0f be       	out	0x3f, r0	; 63
    ac40:	cd bf       	out	0x3d, r28	; 61
    ac42:	df 91       	pop	r29
    ac44:	cf 91       	pop	r28
    ac46:	1f 91       	pop	r17
    ac48:	0f 91       	pop	r16
    ac4a:	ff 90       	pop	r15
    ac4c:	ef 90       	pop	r14
    ac4e:	df 90       	pop	r13
    ac50:	cf 90       	pop	r12
    ac52:	bf 90       	pop	r11
    ac54:	af 90       	pop	r10
    ac56:	9f 90       	pop	r9
    ac58:	8f 90       	pop	r8
    ac5a:	7f 90       	pop	r7
    ac5c:	6f 90       	pop	r6
    ac5e:	5f 90       	pop	r5
    ac60:	4f 90       	pop	r4
    ac62:	3f 90       	pop	r3
    ac64:	2f 90       	pop	r2
    ac66:	08 95       	ret

0000ac68 <animate_shot>:
		game.player.active_shots++;
	}
}

void animate_shot()
{
    ac68:	2f 92       	push	r2
    ac6a:	3f 92       	push	r3
    ac6c:	4f 92       	push	r4
    ac6e:	5f 92       	push	r5
    ac70:	6f 92       	push	r6
    ac72:	7f 92       	push	r7
    ac74:	8f 92       	push	r8
    ac76:	9f 92       	push	r9
    ac78:	af 92       	push	r10
    ac7a:	bf 92       	push	r11
    ac7c:	cf 92       	push	r12
    ac7e:	df 92       	push	r13
    ac80:	ef 92       	push	r14
    ac82:	ff 92       	push	r15
    ac84:	0f 93       	push	r16
    ac86:	1f 93       	push	r17
    ac88:	cf 93       	push	r28
    ac8a:	df 93       	push	r29
    ac8c:	cd b7       	in	r28, 0x3d	; 61
    ac8e:	de b7       	in	r29, 0x3e	; 62
    ac90:	2f 97       	sbiw	r28, 0x0f	; 15
    ac92:	0f b6       	in	r0, 0x3f	; 63
    ac94:	f8 94       	cli
    ac96:	de bf       	out	0x3e, r29	; 62
    ac98:	0f be       	out	0x3f, r0	; 63
    ac9a:	cd bf       	out	0x3d, r28	; 61
    ac9c:	90 ef       	ldi	r25, 0xF0	; 240
    ac9e:	89 2e       	mov	r8, r25
    aca0:	9d e0       	ldi	r25, 0x0D	; 13
    aca2:	99 2e       	mov	r9, r25
    aca4:	8f ed       	ldi	r24, 0xDF	; 223
    aca6:	9d e0       	ldi	r25, 0x0D	; 13
    aca8:	9f 87       	std	Y+15, r25	; 0x0f
    acaa:	8e 87       	std	Y+14, r24	; 0x0e
    acac:	9b e0       	ldi	r25, 0x0B	; 11
    acae:	99 83       	std	Y+1, r25	; 0x01
						SFX_HIT;
						game.enemies[j].shield -= game.player.shot[i].hit_count;
						if (game.enemies[j].shield <= 0)
						{
							SFX_ENEMY_EXPLODE;
							game.enemies[j].flags = EXPLODING;
    acb0:	20 e1       	ldi	r18, 0x10	; 16
    acb2:	b2 2e       	mov	r11, r18
{
	// Animate shots
	u8 slot = ENEMY_SLOT;
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
	{
		if (game.player.shot[i].active)
    acb4:	f4 01       	movw	r30, r8
    acb6:	80 81       	ld	r24, Z
    acb8:	88 23       	and	r24, r24
    acba:	09 f4       	brne	.+2      	; 0xacbe <animate_shot+0x56>
    acbc:	46 c1       	rjmp	.+652    	; 0xaf4a <animate_shot+0x2e2>
		{
			game.player.shot[i].shared.x += game.player.shot[i].shared.vx*FRAME_TIME;
    acbe:	ee 85       	ldd	r30, Y+14	; 0x0e
    acc0:	ff 85       	ldd	r31, Y+15	; 0x0f
    acc2:	64 85       	ldd	r22, Z+12	; 0x0c
    acc4:	75 85       	ldd	r23, Z+13	; 0x0d
    acc6:	88 27       	eor	r24, r24
    acc8:	77 fd       	sbrc	r23, 7
    acca:	80 95       	com	r24
    accc:	98 2f       	mov	r25, r24
    acce:	0e 94 df 68 	call	0xd1be	; 0xd1be <__floatsisf>
    acd2:	29 e8       	ldi	r18, 0x89	; 137
    acd4:	38 e8       	ldi	r19, 0x88	; 136
    acd6:	48 e8       	ldi	r20, 0x88	; 136
    acd8:	5c e3       	ldi	r21, 0x3C	; 60
    acda:	0e 94 93 69 	call	0xd326	; 0xd326 <__mulsf3>
    acde:	ee 85       	ldd	r30, Y+14	; 0x0e
    ace0:	ff 85       	ldd	r31, Y+15	; 0x0f
    ace2:	24 81       	ldd	r18, Z+4	; 0x04
    ace4:	35 81       	ldd	r19, Z+5	; 0x05
    ace6:	46 81       	ldd	r20, Z+6	; 0x06
    ace8:	57 81       	ldd	r21, Z+7	; 0x07
    acea:	0e 94 49 68 	call	0xd092	; 0xd092 <__addsf3>
    acee:	2b 01       	movw	r4, r22
    acf0:	3c 01       	movw	r6, r24
    acf2:	ee 85       	ldd	r30, Y+14	; 0x0e
    acf4:	ff 85       	ldd	r31, Y+15	; 0x0f
    acf6:	64 83       	std	Z+4, r22	; 0x04
    acf8:	75 83       	std	Z+5, r23	; 0x05
    acfa:	86 83       	std	Z+6, r24	; 0x06
    acfc:	97 83       	std	Z+7, r25	; 0x07
			game.player.shot[i].shared.y += game.player.shot[i].shared.vy*FRAME_TIME;
    acfe:	29 e8       	ldi	r18, 0x89	; 137
    ad00:	38 e8       	ldi	r19, 0x88	; 136
    ad02:	48 e8       	ldi	r20, 0x88	; 136
    ad04:	5c e3       	ldi	r21, 0x3C	; 60
    ad06:	60 81       	ld	r22, Z
    ad08:	71 81       	ldd	r23, Z+1	; 0x01
    ad0a:	82 81       	ldd	r24, Z+2	; 0x02
    ad0c:	93 81       	ldd	r25, Z+3	; 0x03
    ad0e:	0e 94 93 69 	call	0xd326	; 0xd326 <__mulsf3>
    ad12:	ee 85       	ldd	r30, Y+14	; 0x0e
    ad14:	ff 85       	ldd	r31, Y+15	; 0x0f
    ad16:	20 85       	ldd	r18, Z+8	; 0x08
    ad18:	31 85       	ldd	r19, Z+9	; 0x09
    ad1a:	42 85       	ldd	r20, Z+10	; 0x0a
    ad1c:	53 85       	ldd	r21, Z+11	; 0x0b
    ad1e:	0e 94 49 68 	call	0xd092	; 0xd092 <__addsf3>
    ad22:	6b 01       	movw	r12, r22
    ad24:	7c 01       	movw	r14, r24
    ad26:	ee 85       	ldd	r30, Y+14	; 0x0e
    ad28:	ff 85       	ldd	r31, Y+15	; 0x0f
    ad2a:	60 87       	std	Z+8, r22	; 0x08
    ad2c:	71 87       	std	Z+9, r23	; 0x09
    ad2e:	82 87       	std	Z+10, r24	; 0x0a
    ad30:	93 87       	std	Z+11, r25	; 0x0b
			LBMoveSprite(PLAYER_SHOT_SLOT+i, game.player.shot[i].shared.x - game.camera_x, game.player.shot[i].shared.y - game.camera_y, 1, 1);
    ad32:	60 91 ac 0d 	lds	r22, 0x0DAC
    ad36:	70 91 ad 0d 	lds	r23, 0x0DAD
    ad3a:	80 e0       	ldi	r24, 0x00	; 0
    ad3c:	90 e0       	ldi	r25, 0x00	; 0
    ad3e:	0e 94 dd 68 	call	0xd1ba	; 0xd1ba <__floatunsisf>
    ad42:	9b 01       	movw	r18, r22
    ad44:	ac 01       	movw	r20, r24
    ad46:	c7 01       	movw	r24, r14
    ad48:	b6 01       	movw	r22, r12
    ad4a:	0e 94 48 68 	call	0xd090	; 0xd090 <__subsf3>
    ad4e:	0e 94 b1 68 	call	0xd162	; 0xd162 <__fixunssfsi>
    ad52:	c6 2e       	mov	r12, r22
    ad54:	80 91 aa 0d 	lds	r24, 0x0DAA
    ad58:	90 91 ab 0d 	lds	r25, 0x0DAB
    ad5c:	bc 01       	movw	r22, r24
    ad5e:	80 e0       	ldi	r24, 0x00	; 0
    ad60:	90 e0       	ldi	r25, 0x00	; 0
    ad62:	0e 94 dd 68 	call	0xd1ba	; 0xd1ba <__floatunsisf>
    ad66:	9b 01       	movw	r18, r22
    ad68:	ac 01       	movw	r20, r24
    ad6a:	c3 01       	movw	r24, r6
    ad6c:	b2 01       	movw	r22, r4
    ad6e:	0e 94 48 68 	call	0xd090	; 0xd090 <__subsf3>
    ad72:	0e 94 b1 68 	call	0xd162	; 0xd162 <__fixunssfsi>
    ad76:	01 e0       	ldi	r16, 0x01	; 1
    ad78:	21 e0       	ldi	r18, 0x01	; 1
    ad7a:	4c 2d       	mov	r20, r12
    ad7c:	89 81       	ldd	r24, Y+1	; 0x01
    ad7e:	0e 94 96 4b 	call	0x972c	; 0x972c <LBMoveSprite>
			if (game.player.shot[i].shared.x < game.camera_x || game.player.shot[i].shared.x+8 > game.camera_x + CAMERA_WIDTH*8 ||
    ad82:	ee 85       	ldd	r30, Y+14	; 0x0e
    ad84:	ff 85       	ldd	r31, Y+15	; 0x0f
    ad86:	c4 80       	ldd	r12, Z+4	; 0x04
    ad88:	d5 80       	ldd	r13, Z+5	; 0x05
    ad8a:	e6 80       	ldd	r14, Z+6	; 0x06
    ad8c:	f7 80       	ldd	r15, Z+7	; 0x07
    ad8e:	60 90 aa 0d 	lds	r6, 0x0DAA
    ad92:	70 90 ab 0d 	lds	r7, 0x0DAB
    ad96:	b3 01       	movw	r22, r6
    ad98:	80 e0       	ldi	r24, 0x00	; 0
    ad9a:	90 e0       	ldi	r25, 0x00	; 0
    ad9c:	0e 94 dd 68 	call	0xd1ba	; 0xd1ba <__floatunsisf>
    ada0:	9b 01       	movw	r18, r22
    ada2:	ac 01       	movw	r20, r24
    ada4:	c7 01       	movw	r24, r14
    ada6:	b6 01       	movw	r22, r12
    ada8:	0e 94 ad 68 	call	0xd15a	; 0xd15a <__cmpsf2>
    adac:	87 ff       	sbrs	r24, 7
    adae:	0f c0       	rjmp	.+30     	; 0xadce <animate_shot+0x166>
			    collision_detect_level(&game.player.shot[i].shared, 1, 1))
			{
				game.player.shot[i].active = 0;
    adb0:	f4 01       	movw	r30, r8
    adb2:	10 82       	st	Z, r1
				game.player.active_shots--;
    adb4:	80 91 d8 0d 	lds	r24, 0x0DD8
    adb8:	81 50       	subi	r24, 0x01	; 1
    adba:	80 93 d8 0d 	sts	0x0DD8, r24
				LBMoveSprite(PLAYER_SHOT_SLOT+i, OFF_SCREEN, 0, 1, 1);
    adbe:	01 e0       	ldi	r16, 0x01	; 1
    adc0:	21 e0       	ldi	r18, 0x01	; 1
    adc2:	40 e0       	ldi	r20, 0x00	; 0
    adc4:	60 ee       	ldi	r22, 0xE0	; 224
    adc6:	89 81       	ldd	r24, Y+1	; 0x01
    adc8:	0e 94 96 4b 	call	0x972c	; 0x972c <LBMoveSprite>
    adcc:	be c0       	rjmp	.+380    	; 0xaf4a <animate_shot+0x2e2>
		if (game.player.shot[i].active)
		{
			game.player.shot[i].shared.x += game.player.shot[i].shared.vx*FRAME_TIME;
			game.player.shot[i].shared.y += game.player.shot[i].shared.vy*FRAME_TIME;
			LBMoveSprite(PLAYER_SHOT_SLOT+i, game.player.shot[i].shared.x - game.camera_x, game.player.shot[i].shared.y - game.camera_y, 1, 1);
			if (game.player.shot[i].shared.x < game.camera_x || game.player.shot[i].shared.x+8 > game.camera_x + CAMERA_WIDTH*8 ||
    adce:	20 e0       	ldi	r18, 0x00	; 0
    add0:	30 e0       	ldi	r19, 0x00	; 0
    add2:	40 e0       	ldi	r20, 0x00	; 0
    add4:	51 e4       	ldi	r21, 0x41	; 65
    add6:	c7 01       	movw	r24, r14
    add8:	b6 01       	movw	r22, r12
    adda:	0e 94 49 68 	call	0xd092	; 0xd092 <__addsf3>
    adde:	1b 01       	movw	r2, r22
    ade0:	2c 01       	movw	r4, r24
    ade2:	b3 01       	movw	r22, r6
    ade4:	60 52       	subi	r22, 0x20	; 32
    ade6:	7f 4f       	sbci	r23, 0xFF	; 255
    ade8:	80 e0       	ldi	r24, 0x00	; 0
    adea:	90 e0       	ldi	r25, 0x00	; 0
    adec:	0e 94 dd 68 	call	0xd1ba	; 0xd1ba <__floatunsisf>
    adf0:	9b 01       	movw	r18, r22
    adf2:	ac 01       	movw	r20, r24
    adf4:	c2 01       	movw	r24, r4
    adf6:	b1 01       	movw	r22, r2
    adf8:	0e 94 8f 69 	call	0xd31e	; 0xd31e <__gesf2>
    adfc:	18 16       	cp	r1, r24
    adfe:	c4 f2       	brlt	.-80     	; 0xadb0 <animate_shot+0x148>
			    collision_detect_level(&game.player.shot[i].shared, 1, 1))
    ae00:	41 e0       	ldi	r20, 0x01	; 1
    ae02:	61 e0       	ldi	r22, 0x01	; 1
    ae04:	8e 85       	ldd	r24, Y+14	; 0x0e
    ae06:	9f 85       	ldd	r25, Y+15	; 0x0f
    ae08:	0e 94 f8 52 	call	0xa5f0	; 0xa5f0 <collision_detect_level>
		if (game.player.shot[i].active)
		{
			game.player.shot[i].shared.x += game.player.shot[i].shared.vx*FRAME_TIME;
			game.player.shot[i].shared.y += game.player.shot[i].shared.vy*FRAME_TIME;
			LBMoveSprite(PLAYER_SHOT_SLOT+i, game.player.shot[i].shared.x - game.camera_x, game.player.shot[i].shared.y - game.camera_y, 1, 1);
			if (game.player.shot[i].shared.x < game.camera_x || game.player.shot[i].shared.x+8 > game.camera_x + CAMERA_WIDTH*8 ||
    ae0c:	81 11       	cpse	r24, r1
    ae0e:	d0 cf       	rjmp	.-96     	; 0xadb0 <animate_shot+0x148>
    ae10:	8c e6       	ldi	r24, 0x6C	; 108
    ae12:	28 2e       	mov	r2, r24
    ae14:	8e e0       	ldi	r24, 0x0E	; 14
    ae16:	38 2e       	mov	r3, r24
    ae18:	61 2c       	mov	r6, r1
    ae1a:	71 2c       	mov	r7, r1
    ae1c:	24 01       	movw	r4, r8
    ae1e:	f1 e0       	ldi	r31, 0x01	; 1
    ae20:	4f 1a       	sub	r4, r31
    ae22:	51 08       	sbc	r5, r1
    ae24:	f1 01       	movw	r30, r2
    ae26:	38 97       	sbiw	r30, 0x08	; 8
			else
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
				{
					if (game.enemies[j].active &&
    ae28:	80 81       	ld	r24, Z
    ae2a:	88 23       	and	r24, r24
    ae2c:	09 f4       	brne	.+2      	; 0xae30 <animate_shot+0x1c8>
    ae2e:	82 c0       	rjmp	.+260    	; 0xaf34 <animate_shot+0x2cc>
    ae30:	34 96       	adiw	r30, 0x04	; 4
					    LBCollides(game.player.shot[i].shared.x,game.player.shot[i].shared.y, 8, 8,
    ae32:	a0 80       	ld	r10, Z
    ae34:	aa 0c       	add	r10, r10
    ae36:	aa 0c       	add	r10, r10
    ae38:	aa 0c       	add	r10, r10
    ae3a:	31 97       	sbiw	r30, 0x01	; 1
    ae3c:	c0 80       	ld	r12, Z
    ae3e:	cc 0c       	add	r12, r12
    ae40:	cc 0c       	add	r12, r12
    ae42:	cc 0c       	add	r12, r12
    ae44:	3a 97       	sbiw	r30, 0x0a	; 10
    ae46:	60 81       	ld	r22, Z
    ae48:	71 81       	ldd	r23, Z+1	; 0x01
    ae4a:	82 81       	ldd	r24, Z+2	; 0x02
    ae4c:	93 81       	ldd	r25, Z+3	; 0x03
    ae4e:	0e 94 b1 68 	call	0xd162	; 0xd162 <__fixunssfsi>
    ae52:	6a 83       	std	Y+2, r22	; 0x02
    ae54:	7b 83       	std	Y+3, r23	; 0x03
    ae56:	8c 83       	std	Y+4, r24	; 0x04
    ae58:	9d 83       	std	Y+5, r25	; 0x05
    ae5a:	f1 01       	movw	r30, r2
    ae5c:	73 97       	sbiw	r30, 0x13	; 19
    ae5e:	60 81       	ld	r22, Z
    ae60:	71 81       	ldd	r23, Z+1	; 0x01
    ae62:	82 81       	ldd	r24, Z+2	; 0x02
    ae64:	93 81       	ldd	r25, Z+3	; 0x03
    ae66:	0e 94 b1 68 	call	0xd162	; 0xd162 <__fixunssfsi>
    ae6a:	6e 83       	std	Y+6, r22	; 0x06
    ae6c:	7f 83       	std	Y+7, r23	; 0x07
    ae6e:	88 87       	std	Y+8, r24	; 0x08
    ae70:	99 87       	std	Y+9, r25	; 0x09
    ae72:	ee 85       	ldd	r30, Y+14	; 0x0e
    ae74:	ff 85       	ldd	r31, Y+15	; 0x0f
    ae76:	60 85       	ldd	r22, Z+8	; 0x08
    ae78:	71 85       	ldd	r23, Z+9	; 0x09
    ae7a:	82 85       	ldd	r24, Z+10	; 0x0a
    ae7c:	93 85       	ldd	r25, Z+11	; 0x0b
    ae7e:	0e 94 b1 68 	call	0xd162	; 0xd162 <__fixunssfsi>
    ae82:	6a 87       	std	Y+10, r22	; 0x0a
    ae84:	7b 87       	std	Y+11, r23	; 0x0b
    ae86:	8c 87       	std	Y+12, r24	; 0x0c
    ae88:	9d 87       	std	Y+13, r25	; 0x0d
    ae8a:	ee 85       	ldd	r30, Y+14	; 0x0e
    ae8c:	ff 85       	ldd	r31, Y+15	; 0x0f
    ae8e:	64 81       	ldd	r22, Z+4	; 0x04
    ae90:	75 81       	ldd	r23, Z+5	; 0x05
    ae92:	86 81       	ldd	r24, Z+6	; 0x06
    ae94:	97 81       	ldd	r25, Z+7	; 0x07
    ae96:	0e 94 b1 68 	call	0xd162	; 0xd162 <__fixunssfsi>
    ae9a:	dc 01       	movw	r26, r24
    ae9c:	cb 01       	movw	r24, r22
    ae9e:	ea 80       	ldd	r14, Y+2	; 0x02
    aea0:	fb 80       	ldd	r15, Y+3	; 0x03
    aea2:	0e 81       	ldd	r16, Y+6	; 0x06
    aea4:	1f 81       	ldd	r17, Y+7	; 0x07
    aea6:	28 e0       	ldi	r18, 0x08	; 8
    aea8:	48 e0       	ldi	r20, 0x08	; 8
    aeaa:	6a 85       	ldd	r22, Y+10	; 0x0a
    aeac:	7b 85       	ldd	r23, Y+11	; 0x0b
    aeae:	0e 94 f9 4a 	call	0x95f2	; 0x95f2 <LBCollides>
			else
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
				{
					if (game.enemies[j].active &&
    aeb2:	88 23       	and	r24, r24
    aeb4:	09 f4       	brne	.+2      	; 0xaeb8 <animate_shot+0x250>
    aeb6:	3e c0       	rjmp	.+124    	; 0xaf34 <animate_shot+0x2cc>
					    LBCollides(game.player.shot[i].shared.x,game.player.shot[i].shared.y, 8, 8,
							game.enemies[j].shared.x, game.enemies[j].shared.y, game.enemies[j].width*8, game.enemies[j].height*8
						)
					)
					{
						SFX_HIT;
    aeb8:	41 e0       	ldi	r20, 0x01	; 1
    aeba:	6f ef       	ldi	r22, 0xFF	; 255
    aebc:	84 e0       	ldi	r24, 0x04	; 4
    aebe:	0e 94 9c 3e 	call	0x7d38	; 0x7d38 <TriggerFx>
						game.enemies[j].shield -= game.player.shot[i].hit_count;
    aec2:	f1 01       	movw	r30, r2
    aec4:	80 81       	ld	r24, Z
    aec6:	f2 01       	movw	r30, r4
    aec8:	90 81       	ld	r25, Z
    aeca:	89 1b       	sub	r24, r25
    aecc:	f1 01       	movw	r30, r2
    aece:	80 83       	st	Z, r24
						if (game.enemies[j].shield <= 0)
    aed0:	18 16       	cp	r1, r24
    aed2:	14 f1       	brlt	.+68     	; 0xaf18 <animate_shot+0x2b0>
						{
							SFX_ENEMY_EXPLODE;
    aed4:	41 e0       	ldi	r20, 0x01	; 1
    aed6:	6f ef       	ldi	r22, 0xFF	; 255
    aed8:	86 e0       	ldi	r24, 0x06	; 6
    aeda:	0e 94 9c 3e 	call	0x7d38	; 0x7d38 <TriggerFx>
							game.enemies[j].flags = EXPLODING;
    aede:	f2 e4       	ldi	r31, 0x42	; 66
    aee0:	f6 9d       	mul	r31, r6
    aee2:	c0 01       	movw	r24, r0
    aee4:	f7 9d       	mul	r31, r7
    aee6:	90 0d       	add	r25, r0
    aee8:	11 24       	eor	r1, r1
    aeea:	8a 55       	subi	r24, 0x5A	; 90
    aeec:	92 4f       	sbci	r25, 0xF2	; 242
    aeee:	fc 01       	movw	r30, r24
    aef0:	e1 54       	subi	r30, 0x41	; 65
    aef2:	ff 4f       	sbci	r31, 0xFF	; 255
    aef4:	b0 82       	st	Z, r11
							game.enemies[j].active = 0;
    aef6:	31 97       	sbiw	r30, 0x01	; 1
    aef8:	10 82       	st	Z, r1
							game.active_enemies--;
    aefa:	80 91 c6 0d 	lds	r24, 0x0DC6
    aefe:	81 50       	subi	r24, 0x01	; 1
    af00:	80 93 c6 0d 	sts	0x0DC6, r24
							game.level_score += KILL_SCORE;
    af04:	80 91 b0 0d 	lds	r24, 0x0DB0
    af08:	90 91 b1 0d 	lds	r25, 0x0DB1
    af0c:	0a 96       	adiw	r24, 0x0a	; 10
    af0e:	90 93 b1 0d 	sts	0x0DB1, r25
    af12:	80 93 b0 0d 	sts	0x0DB0, r24
							break;
    af16:	19 c0       	rjmp	.+50     	; 0xaf4a <animate_shot+0x2e2>
						}
						game.player.shot[i].active = 0;
    af18:	f4 01       	movw	r30, r8
    af1a:	10 82       	st	Z, r1
						game.player.active_shots--;
    af1c:	80 91 d8 0d 	lds	r24, 0x0DD8
    af20:	81 50       	subi	r24, 0x01	; 1
    af22:	80 93 d8 0d 	sts	0x0DD8, r24
						LBMoveSprite(PLAYER_SHOT_SLOT+i, OFF_SCREEN, 0, 1, 1);
    af26:	01 e0       	ldi	r16, 0x01	; 1
    af28:	21 e0       	ldi	r18, 0x01	; 1
    af2a:	40 e0       	ldi	r20, 0x00	; 0
    af2c:	60 ee       	ldi	r22, 0xE0	; 224
    af2e:	89 81       	ldd	r24, Y+1	; 0x01
    af30:	0e 94 96 4b 	call	0x972c	; 0x972c <LBMoveSprite>
    af34:	ff ef       	ldi	r31, 0xFF	; 255
    af36:	6f 1a       	sub	r6, r31
    af38:	7f 0a       	sbc	r7, r31
    af3a:	22 e4       	ldi	r18, 0x42	; 66
    af3c:	22 0e       	add	r2, r18
    af3e:	31 1c       	adc	r3, r1
				LBMoveSprite(PLAYER_SHOT_SLOT+i, OFF_SCREEN, 0, 1, 1);
			}
			else
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
    af40:	85 e0       	ldi	r24, 0x05	; 5
    af42:	68 16       	cp	r6, r24
    af44:	71 04       	cpc	r7, r1
    af46:	09 f0       	breq	.+2      	; 0xaf4a <animate_shot+0x2e2>
    af48:	6d cf       	rjmp	.-294    	; 0xae24 <animate_shot+0x1bc>
    af4a:	9a e1       	ldi	r25, 0x1A	; 26
    af4c:	89 0e       	add	r8, r25
    af4e:	91 1c       	adc	r9, r1
    af50:	e9 81       	ldd	r30, Y+1	; 0x01
    af52:	ef 5f       	subi	r30, 0xFF	; 255
    af54:	e9 83       	std	Y+1, r30	; 0x01
    af56:	8e 85       	ldd	r24, Y+14	; 0x0e
    af58:	9f 85       	ldd	r25, Y+15	; 0x0f
    af5a:	4a 96       	adiw	r24, 0x1a	; 26
    af5c:	9f 87       	std	Y+15, r25	; 0x0f
    af5e:	8e 87       	std	Y+14, r24	; 0x0e

void animate_shot()
{
	// Animate shots
	u8 slot = ENEMY_SLOT;
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
    af60:	ee 30       	cpi	r30, 0x0E	; 14
    af62:	09 f0       	breq	.+2      	; 0xaf66 <animate_shot+0x2fe>
    af64:	a7 ce       	rjmp	.-690    	; 0xacb4 <animate_shot+0x4c>
					slot += game.enemies[j].width*game.enemies[j].height;
				}
			}
		}
	}
}
    af66:	2f 96       	adiw	r28, 0x0f	; 15
    af68:	0f b6       	in	r0, 0x3f	; 63
    af6a:	f8 94       	cli
    af6c:	de bf       	out	0x3e, r29	; 62
    af6e:	0f be       	out	0x3f, r0	; 63
    af70:	cd bf       	out	0x3d, r28	; 61
    af72:	df 91       	pop	r29
    af74:	cf 91       	pop	r28
    af76:	1f 91       	pop	r17
    af78:	0f 91       	pop	r16
    af7a:	ff 90       	pop	r15
    af7c:	ef 90       	pop	r14
    af7e:	df 90       	pop	r13
    af80:	cf 90       	pop	r12
    af82:	bf 90       	pop	r11
    af84:	af 90       	pop	r10
    af86:	9f 90       	pop	r9
    af88:	8f 90       	pop	r8
    af8a:	7f 90       	pop	r7
    af8c:	6f 90       	pop	r6
    af8e:	5f 90       	pop	r5
    af90:	4f 90       	pop	r4
    af92:	3f 90       	pop	r3
    af94:	2f 90       	pop	r2
    af96:	08 95       	ret

0000af98 <map_explosion>:
	}
	return result;
}

u8 map_explosion(u8* flags, Animation* anim, u8 slot, u8 width, u8 height)
{
    af98:	7f 92       	push	r7
    af9a:	8f 92       	push	r8
    af9c:	9f 92       	push	r9
    af9e:	af 92       	push	r10
    afa0:	bf 92       	push	r11
    afa2:	cf 92       	push	r12
    afa4:	df 92       	push	r13
    afa6:	ef 92       	push	r14
    afa8:	ff 92       	push	r15
    afaa:	0f 93       	push	r16
    afac:	1f 93       	push	r17
    afae:	cf 93       	push	r28
    afb0:	df 93       	push	r29
    afb2:	1f 92       	push	r1
    afb4:	cd b7       	in	r28, 0x3d	; 61
    afb6:	de b7       	in	r29, 0x3e	; 62
    afb8:	6c 01       	movw	r12, r24
    afba:	7b 01       	movw	r14, r22
    afbc:	74 2e       	mov	r7, r20
	char* frame;
	frame = LBGetNextFrame(anim);
    afbe:	cb 01       	movw	r24, r22
    afc0:	29 83       	std	Y+1, r18	; 0x01
    afc2:	0e 94 e2 49 	call	0x93c4	; 0x93c4 <LBGetNextFrame>
    afc6:	4c 01       	movw	r8, r24
	for (u8 i = 0; i < width*height; i++)
    afc8:	29 81       	ldd	r18, Y+1	; 0x01
    afca:	20 9f       	mul	r18, r16
    afcc:	50 01       	movw	r10, r0
    afce:	11 24       	eor	r1, r1
    afd0:	10 e0       	ldi	r17, 0x00	; 0
    afd2:	81 2f       	mov	r24, r17
    afd4:	90 e0       	ldi	r25, 0x00	; 0
    afd6:	8a 15       	cp	r24, r10
    afd8:	9b 05       	cpc	r25, r11
    afda:	54 f4       	brge	.+20     	; 0xaff0 <map_explosion+0x58>
	{
		LBMapSprite(slot+i, frame, 0);
    afdc:	40 e0       	ldi	r20, 0x00	; 0
    afde:	b4 01       	movw	r22, r8
    afe0:	81 2f       	mov	r24, r17
    afe2:	87 0d       	add	r24, r7
    afe4:	29 83       	std	Y+1, r18	; 0x01
    afe6:	0e 94 44 4b 	call	0x9688	; 0x9688 <LBMapSprite>

u8 map_explosion(u8* flags, Animation* anim, u8 slot, u8 width, u8 height)
{
	char* frame;
	frame = LBGetNextFrame(anim);
	for (u8 i = 0; i < width*height; i++)
    afea:	1f 5f       	subi	r17, 0xFF	; 255
    afec:	29 81       	ldd	r18, Y+1	; 0x01
    afee:	f1 cf       	rjmp	.-30     	; 0xafd2 <map_explosion+0x3a>
	{
		LBMapSprite(slot+i, frame, 0);
	}
	if (anim->looped)
    aff0:	f7 01       	movw	r30, r14
    aff2:	84 81       	ldd	r24, Z+4	; 0x04
    aff4:	88 23       	and	r24, r24
    aff6:	51 f0       	breq	.+20     	; 0xb00c <map_explosion+0x74>
	{
		*flags ^= EXPLODING;
    aff8:	f6 01       	movw	r30, r12
    affa:	80 81       	ld	r24, Z
    affc:	90 e1       	ldi	r25, 0x10	; 16
    affe:	98 27       	eor	r25, r24
    b000:	90 83       	st	Z, r25
		LBMoveSprite(slot, OFF_SCREEN, 0, width, height);
    b002:	40 e0       	ldi	r20, 0x00	; 0
    b004:	60 ee       	ldi	r22, 0xE0	; 224
    b006:	87 2d       	mov	r24, r7
    b008:	0e 94 96 4b 	call	0x972c	; 0x972c <LBMoveSprite>
	}
	return anim->looped;
}
    b00c:	f7 01       	movw	r30, r14
    b00e:	84 81       	ldd	r24, Z+4	; 0x04
    b010:	0f 90       	pop	r0
    b012:	df 91       	pop	r29
    b014:	cf 91       	pop	r28
    b016:	1f 91       	pop	r17
    b018:	0f 91       	pop	r16
    b01a:	ff 90       	pop	r15
    b01c:	ef 90       	pop	r14
    b01e:	df 90       	pop	r13
    b020:	cf 90       	pop	r12
    b022:	bf 90       	pop	r11
    b024:	af 90       	pop	r10
    b026:	9f 90       	pop	r9
    b028:	8f 90       	pop	r8
    b02a:	7f 90       	pop	r7
    b02c:	08 95       	ret

0000b02e <animate_sprite>:

void animate_sprite(SpriteShared* s, u8 slot, u8 width, u8 height)
{
    b02e:	8f 92       	push	r8
    b030:	9f 92       	push	r9
    b032:	af 92       	push	r10
    b034:	bf 92       	push	r11
    b036:	ff 92       	push	r15
    b038:	0f 93       	push	r16
    b03a:	1f 93       	push	r17
    b03c:	cf 93       	push	r28
    b03e:	df 93       	push	r29
    b040:	ec 01       	movw	r28, r24
    b042:	f6 2e       	mov	r15, r22
    b044:	14 2f       	mov	r17, r20
    b046:	02 2f       	mov	r16, r18
	s->vy = s->vy + s->gravity*FRAME_TIME;
    b048:	6e 85       	ldd	r22, Y+14	; 0x0e
    b04a:	70 e0       	ldi	r23, 0x00	; 0
    b04c:	80 e0       	ldi	r24, 0x00	; 0
    b04e:	90 e0       	ldi	r25, 0x00	; 0
    b050:	0e 94 df 68 	call	0xd1be	; 0xd1be <__floatsisf>
    b054:	29 e8       	ldi	r18, 0x89	; 137
    b056:	38 e8       	ldi	r19, 0x88	; 136
    b058:	48 e8       	ldi	r20, 0x88	; 136
    b05a:	5c e3       	ldi	r21, 0x3C	; 60
    b05c:	0e 94 93 69 	call	0xd326	; 0xd326 <__mulsf3>
    b060:	28 81       	ld	r18, Y
    b062:	39 81       	ldd	r19, Y+1	; 0x01
    b064:	4a 81       	ldd	r20, Y+2	; 0x02
    b066:	5b 81       	ldd	r21, Y+3	; 0x03
    b068:	0e 94 49 68 	call	0xd092	; 0xd092 <__addsf3>
    b06c:	4b 01       	movw	r8, r22
    b06e:	5c 01       	movw	r10, r24
	if (s->vy > MAX_SPEED) s->vy = MAX_SPEED;
    b070:	20 e0       	ldi	r18, 0x00	; 0
    b072:	30 e0       	ldi	r19, 0x00	; 0
    b074:	40 ef       	ldi	r20, 0xF0	; 240
    b076:	52 e4       	ldi	r21, 0x42	; 66
    b078:	0e 94 8f 69 	call	0xd31e	; 0xd31e <__gesf2>
    b07c:	18 16       	cp	r1, r24
    b07e:	2c f0       	brlt	.+10     	; 0xb08a <animate_sprite+0x5c>
	return anim->looped;
}

void animate_sprite(SpriteShared* s, u8 slot, u8 width, u8 height)
{
	s->vy = s->vy + s->gravity*FRAME_TIME;
    b080:	88 82       	st	Y, r8
    b082:	99 82       	std	Y+1, r9	; 0x01
    b084:	aa 82       	std	Y+2, r10	; 0x02
    b086:	bb 82       	std	Y+3, r11	; 0x03
    b088:	08 c0       	rjmp	.+16     	; 0xb09a <animate_sprite+0x6c>
	if (s->vy > MAX_SPEED) s->vy = MAX_SPEED;
    b08a:	80 e0       	ldi	r24, 0x00	; 0
    b08c:	90 e0       	ldi	r25, 0x00	; 0
    b08e:	a0 ef       	ldi	r26, 0xF0	; 240
    b090:	b2 e4       	ldi	r27, 0x42	; 66
    b092:	88 83       	st	Y, r24
    b094:	99 83       	std	Y+1, r25	; 0x01
    b096:	aa 83       	std	Y+2, r26	; 0x02
    b098:	bb 83       	std	Y+3, r27	; 0x03
	s->x += s->vx*FRAME_TIME;
    b09a:	6c 85       	ldd	r22, Y+12	; 0x0c
    b09c:	7d 85       	ldd	r23, Y+13	; 0x0d
    b09e:	88 27       	eor	r24, r24
    b0a0:	77 fd       	sbrc	r23, 7
    b0a2:	80 95       	com	r24
    b0a4:	98 2f       	mov	r25, r24
    b0a6:	0e 94 df 68 	call	0xd1be	; 0xd1be <__floatsisf>
    b0aa:	29 e8       	ldi	r18, 0x89	; 137
    b0ac:	38 e8       	ldi	r19, 0x88	; 136
    b0ae:	48 e8       	ldi	r20, 0x88	; 136
    b0b0:	5c e3       	ldi	r21, 0x3C	; 60
    b0b2:	0e 94 93 69 	call	0xd326	; 0xd326 <__mulsf3>
    b0b6:	9b 01       	movw	r18, r22
    b0b8:	ac 01       	movw	r20, r24
    b0ba:	6c 81       	ldd	r22, Y+4	; 0x04
    b0bc:	7d 81       	ldd	r23, Y+5	; 0x05
    b0be:	8e 81       	ldd	r24, Y+6	; 0x06
    b0c0:	9f 81       	ldd	r25, Y+7	; 0x07
    b0c2:	0e 94 49 68 	call	0xd092	; 0xd092 <__addsf3>
    b0c6:	6c 83       	std	Y+4, r22	; 0x04
    b0c8:	7d 83       	std	Y+5, r23	; 0x05
    b0ca:	8e 83       	std	Y+6, r24	; 0x06
    b0cc:	9f 83       	std	Y+7, r25	; 0x07
	s->y += s->vy*FRAME_TIME;
    b0ce:	29 e8       	ldi	r18, 0x89	; 137
    b0d0:	38 e8       	ldi	r19, 0x88	; 136
    b0d2:	48 e8       	ldi	r20, 0x88	; 136
    b0d4:	5c e3       	ldi	r21, 0x3C	; 60
    b0d6:	68 81       	ld	r22, Y
    b0d8:	79 81       	ldd	r23, Y+1	; 0x01
    b0da:	8a 81       	ldd	r24, Y+2	; 0x02
    b0dc:	9b 81       	ldd	r25, Y+3	; 0x03
    b0de:	0e 94 93 69 	call	0xd326	; 0xd326 <__mulsf3>
    b0e2:	9b 01       	movw	r18, r22
    b0e4:	ac 01       	movw	r20, r24
    b0e6:	68 85       	ldd	r22, Y+8	; 0x08
    b0e8:	79 85       	ldd	r23, Y+9	; 0x09
    b0ea:	8a 85       	ldd	r24, Y+10	; 0x0a
    b0ec:	9b 85       	ldd	r25, Y+11	; 0x0b
    b0ee:	0e 94 49 68 	call	0xd092	; 0xd092 <__addsf3>
    b0f2:	68 87       	std	Y+8, r22	; 0x08
    b0f4:	79 87       	std	Y+9, r23	; 0x09
    b0f6:	8a 87       	std	Y+10, r24	; 0x0a
    b0f8:	9b 87       	std	Y+11, r25	; 0x0b
	collision_detect_level(s, width, height);
    b0fa:	40 2f       	mov	r20, r16
    b0fc:	61 2f       	mov	r22, r17
    b0fe:	ce 01       	movw	r24, r28
    b100:	0e 94 f8 52 	call	0xa5f0	; 0xa5f0 <collision_detect_level>
	LBMoveSprite(slot, s->x - game.camera_x, s->y - game.camera_y, width, height);
    b104:	e0 91 ac 0d 	lds	r30, 0x0DAC
    b108:	f0 91 ad 0d 	lds	r31, 0x0DAD
    b10c:	bf 01       	movw	r22, r30
    b10e:	80 e0       	ldi	r24, 0x00	; 0
    b110:	90 e0       	ldi	r25, 0x00	; 0
    b112:	0e 94 dd 68 	call	0xd1ba	; 0xd1ba <__floatunsisf>
    b116:	9b 01       	movw	r18, r22
    b118:	ac 01       	movw	r20, r24
    b11a:	68 85       	ldd	r22, Y+8	; 0x08
    b11c:	79 85       	ldd	r23, Y+9	; 0x09
    b11e:	8a 85       	ldd	r24, Y+10	; 0x0a
    b120:	9b 85       	ldd	r25, Y+11	; 0x0b
    b122:	0e 94 48 68 	call	0xd090	; 0xd090 <__subsf3>
    b126:	0e 94 b1 68 	call	0xd162	; 0xd162 <__fixunssfsi>
    b12a:	b6 2e       	mov	r11, r22
    b12c:	e0 91 aa 0d 	lds	r30, 0x0DAA
    b130:	f0 91 ab 0d 	lds	r31, 0x0DAB
    b134:	bf 01       	movw	r22, r30
    b136:	80 e0       	ldi	r24, 0x00	; 0
    b138:	90 e0       	ldi	r25, 0x00	; 0
    b13a:	0e 94 dd 68 	call	0xd1ba	; 0xd1ba <__floatunsisf>
    b13e:	9b 01       	movw	r18, r22
    b140:	ac 01       	movw	r20, r24
    b142:	6c 81       	ldd	r22, Y+4	; 0x04
    b144:	7d 81       	ldd	r23, Y+5	; 0x05
    b146:	8e 81       	ldd	r24, Y+6	; 0x06
    b148:	9f 81       	ldd	r25, Y+7	; 0x07
    b14a:	0e 94 48 68 	call	0xd090	; 0xd090 <__subsf3>
    b14e:	0e 94 b1 68 	call	0xd162	; 0xd162 <__fixunssfsi>
    b152:	21 2f       	mov	r18, r17
    b154:	4b 2d       	mov	r20, r11
    b156:	8f 2d       	mov	r24, r15
    b158:	0e 94 96 4b 	call	0x972c	; 0x972c <LBMoveSprite>
}
    b15c:	df 91       	pop	r29
    b15e:	cf 91       	pop	r28
    b160:	1f 91       	pop	r17
    b162:	0f 91       	pop	r16
    b164:	ff 90       	pop	r15
    b166:	bf 90       	pop	r11
    b168:	af 90       	pop	r10
    b16a:	9f 90       	pop	r9
    b16c:	8f 90       	pop	r8
    b16e:	08 95       	ret

0000b170 <animate_player>:

void animate_player()
{
    b170:	0f 93       	push	r16
    b172:	cf 93       	push	r28
	if (game.player.flags & EXPLODING)
    b174:	80 91 d9 0d 	lds	r24, 0x0DD9
    b178:	84 ff       	sbrs	r24, 4
    b17a:	38 c0       	rjmp	.+112    	; 0xb1ec <animate_player+0x7c>
	{
		LBMoveSprite(PLAYER_SLOT, game.player.shared.x - game.camera_x, game.player.shared.y - game.camera_y, game.player.width, game.player.height);
    b17c:	60 91 ac 0d 	lds	r22, 0x0DAC
    b180:	70 91 ad 0d 	lds	r23, 0x0DAD
    b184:	80 e0       	ldi	r24, 0x00	; 0
    b186:	90 e0       	ldi	r25, 0x00	; 0
    b188:	0e 94 dd 68 	call	0xd1ba	; 0xd1ba <__floatunsisf>
    b18c:	9b 01       	movw	r18, r22
    b18e:	ac 01       	movw	r20, r24
    b190:	60 91 d1 0d 	lds	r22, 0x0DD1
    b194:	70 91 d2 0d 	lds	r23, 0x0DD2
    b198:	80 91 d3 0d 	lds	r24, 0x0DD3
    b19c:	90 91 d4 0d 	lds	r25, 0x0DD4
    b1a0:	0e 94 48 68 	call	0xd090	; 0xd090 <__subsf3>
    b1a4:	0e 94 b1 68 	call	0xd162	; 0xd162 <__fixunssfsi>
    b1a8:	c6 2f       	mov	r28, r22
    b1aa:	60 91 aa 0d 	lds	r22, 0x0DAA
    b1ae:	70 91 ab 0d 	lds	r23, 0x0DAB
    b1b2:	80 e0       	ldi	r24, 0x00	; 0
    b1b4:	90 e0       	ldi	r25, 0x00	; 0
    b1b6:	0e 94 dd 68 	call	0xd1ba	; 0xd1ba <__floatunsisf>
    b1ba:	9b 01       	movw	r18, r22
    b1bc:	ac 01       	movw	r20, r24
    b1be:	60 91 cd 0d 	lds	r22, 0x0DCD
    b1c2:	70 91 ce 0d 	lds	r23, 0x0DCE
    b1c6:	80 91 cf 0d 	lds	r24, 0x0DCF
    b1ca:	90 91 d0 0d 	lds	r25, 0x0DD0
    b1ce:	0e 94 48 68 	call	0xd090	; 0xd090 <__subsf3>
    b1d2:	0e 94 b1 68 	call	0xd162	; 0xd162 <__fixunssfsi>
    b1d6:	00 91 dd 0d 	lds	r16, 0x0DDD
    b1da:	20 91 dc 0d 	lds	r18, 0x0DDC
    b1de:	4c 2f       	mov	r20, r28
    b1e0:	80 e0       	ldi	r24, 0x00	; 0
    b1e2:	0e 94 96 4b 	call	0x972c	; 0x972c <LBMoveSprite>
	}
	else animate_sprite(&game.player.shared, PLAYER_SLOT, game.player.width, game.player.height);
}
    b1e6:	cf 91       	pop	r28
    b1e8:	0f 91       	pop	r16
    b1ea:	08 95       	ret
{
	if (game.player.flags & EXPLODING)
	{
		LBMoveSprite(PLAYER_SLOT, game.player.shared.x - game.camera_x, game.player.shared.y - game.camera_y, game.player.width, game.player.height);
	}
	else animate_sprite(&game.player.shared, PLAYER_SLOT, game.player.width, game.player.height);
    b1ec:	20 91 dd 0d 	lds	r18, 0x0DDD
    b1f0:	40 91 dc 0d 	lds	r20, 0x0DDC
    b1f4:	60 e0       	ldi	r22, 0x00	; 0
    b1f6:	89 ec       	ldi	r24, 0xC9	; 201
    b1f8:	9d e0       	ldi	r25, 0x0D	; 13
}
    b1fa:	cf 91       	pop	r28
    b1fc:	0f 91       	pop	r16
{
	if (game.player.flags & EXPLODING)
	{
		LBMoveSprite(PLAYER_SLOT, game.player.shared.x - game.camera_x, game.player.shared.y - game.camera_y, game.player.width, game.player.height);
	}
	else animate_sprite(&game.player.shared, PLAYER_SLOT, game.player.width, game.player.height);
    b1fe:	0c 94 17 58 	jmp	0xb02e	; 0xb02e <animate_sprite>

0000b202 <update_spider_enemy>:
}

void update_spider_enemy(Enemy* e, u8 slot)
{
    b202:	1f 93       	push	r17
    b204:	cf 93       	push	r28
    b206:	df 93       	push	r29
    b208:	ec 01       	movw	r28, r24
    b20a:	16 2f       	mov	r17, r22
	if (e->flags & IDLE && e->frame_count == SPIDER_IDLE_FRAMES)
    b20c:	98 89       	ldd	r25, Y+16	; 0x10
    b20e:	89 2f       	mov	r24, r25
    b210:	88 70       	andi	r24, 0x08	; 8
    b212:	93 ff       	sbrs	r25, 3
    b214:	1e c0       	rjmp	.+60     	; 0xb252 <update_spider_enemy+0x50>
    b216:	2d 89       	ldd	r18, Y+21	; 0x15
    b218:	20 38       	cpi	r18, 0x80	; 128
    b21a:	d9 f4       	brne	.+54     	; 0xb252 <update_spider_enemy+0x50>
	{
		e->flags = JUMPING;
    b21c:	81 e0       	ldi	r24, 0x01	; 1
    b21e:	88 8b       	std	Y+16, r24	; 0x10
		e->shared.vy = -SPIDER_JUMP_SPEED;
    b220:	80 e0       	ldi	r24, 0x00	; 0
    b222:	90 e0       	ldi	r25, 0x00	; 0
    b224:	a8 ec       	ldi	r26, 0xC8	; 200
    b226:	b2 ec       	ldi	r27, 0xC2	; 194
    b228:	88 83       	st	Y, r24
    b22a:	99 83       	std	Y+1, r25	; 0x01
    b22c:	aa 83       	std	Y+2, r26	; 0x02
    b22e:	bb 83       	std	Y+3, r27	; 0x03
		e->shared.gravity = GRAVITY;
    b230:	8f ef       	ldi	r24, 0xFF	; 255
    b232:	8e 87       	std	Y+14, r24	; 0x0e
		e->shared.vx = SPIDER_SIDE_SPEED;
    b234:	8c e3       	ldi	r24, 0x3C	; 60
    b236:	90 e0       	ldi	r25, 0x00	; 0
    b238:	9d 87       	std	Y+13, r25	; 0x0d
    b23a:	8c 87       	std	Y+12, r24	; 0x0c
		if (e->direction == D_LEFT)
    b23c:	89 89       	ldd	r24, Y+17	; 0x11
    b23e:	81 11       	cpse	r24, r1
    b240:	04 c0       	rjmp	.+8      	; 0xb24a <update_spider_enemy+0x48>
		{
			e->shared.vx = -SPIDER_SIDE_SPEED;
    b242:	84 ec       	ldi	r24, 0xC4	; 196
    b244:	9f ef       	ldi	r25, 0xFF	; 255
    b246:	9d 87       	std	Y+13, r25	; 0x0d
    b248:	8c 87       	std	Y+12, r24	; 0x0c
		}
		LBMapSprite(slot, map_enemy_spider_1, 0);
    b24a:	40 e0       	ldi	r20, 0x00	; 0
    b24c:	6a e7       	ldi	r22, 0x7A	; 122
    b24e:	77 e3       	ldi	r23, 0x37	; 55
    b250:	1a c0       	rjmp	.+52     	; 0xb286 <update_spider_enemy+0x84>
	}
	else if (e->flags & JUMPING && e->shared.gravity == 0)
    b252:	90 ff       	sbrs	r25, 0
    b254:	10 c0       	rjmp	.+32     	; 0xb276 <update_spider_enemy+0x74>
    b256:	9e 85       	ldd	r25, Y+14	; 0x0e
    b258:	91 11       	cpse	r25, r1
    b25a:	0d c0       	rjmp	.+26     	; 0xb276 <update_spider_enemy+0x74>
	{
		e->flags = IDLE;
    b25c:	88 e0       	ldi	r24, 0x08	; 8
    b25e:	88 8b       	std	Y+16, r24	; 0x10
		e->shared.vx = 0;
    b260:	1d 86       	std	Y+13, r1	; 0x0d
    b262:	1c 86       	std	Y+12, r1	; 0x0c
		e->frame_count = 0;
    b264:	1d 8a       	std	Y+21, r1	; 0x15
		if (e->direction == D_LEFT)
    b266:	89 89       	ldd	r24, Y+17	; 0x11
    b268:	81 11       	cpse	r24, r1
    b26a:	03 c0       	rjmp	.+6      	; 0xb272 <update_spider_enemy+0x70>
		{
			e->direction = D_RIGHT;
    b26c:	81 e0       	ldi	r24, 0x01	; 1
    b26e:	89 8b       	std	Y+17, r24	; 0x11
    b270:	0d c0       	rjmp	.+26     	; 0xb28c <update_spider_enemy+0x8a>
		}
		else
		{
			e->direction = D_LEFT;
    b272:	19 8a       	std	Y+17, r1	; 0x11
    b274:	0b c0       	rjmp	.+22     	; 0xb28c <update_spider_enemy+0x8a>
		}
	}
	else if (e->flags & IDLE)
    b276:	88 23       	and	r24, r24
    b278:	49 f0       	breq	.+18     	; 0xb28c <update_spider_enemy+0x8a>
	{
		LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    b27a:	ce 01       	movw	r24, r28
    b27c:	c2 96       	adiw	r24, 0x32	; 50
    b27e:	0e 94 e2 49 	call	0x93c4	; 0x93c4 <LBGetNextFrame>
    b282:	40 e0       	ldi	r20, 0x00	; 0
    b284:	bc 01       	movw	r22, r24
    b286:	81 2f       	mov	r24, r17
    b288:	0e 94 44 4b 	call	0x9688	; 0x9688 <LBMapSprite>
	}
	e->frame_count++;
    b28c:	8d 89       	ldd	r24, Y+21	; 0x15
    b28e:	8f 5f       	subi	r24, 0xFF	; 255
    b290:	8d 8b       	std	Y+21, r24	; 0x15
}
    b292:	df 91       	pop	r29
    b294:	cf 91       	pop	r28
    b296:	1f 91       	pop	r17
    b298:	08 95       	ret

0000b29a <update_shark_enemy>:

void update_shark_enemy(Enemy* e, u8 slot)
{
    b29a:	cf 93       	push	r28
    b29c:	fc 01       	movw	r30, r24
    b29e:	c6 2f       	mov	r28, r22
	e->shared.vx = SHARK_SPEED;
    b2a0:	84 e1       	ldi	r24, 0x14	; 20
    b2a2:	90 e0       	ldi	r25, 0x00	; 0
    b2a4:	95 87       	std	Z+13, r25	; 0x0d
    b2a6:	84 87       	std	Z+12, r24	; 0x0c
	e->shared.vy = 0;
    b2a8:	10 82       	st	Z, r1
    b2aa:	11 82       	std	Z+1, r1	; 0x01
    b2ac:	12 82       	std	Z+2, r1	; 0x02
    b2ae:	13 82       	std	Z+3, r1	; 0x03
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    b2b0:	cf 01       	movw	r24, r30
    b2b2:	c2 96       	adiw	r24, 0x32	; 50
    b2b4:	0e 94 e2 49 	call	0x93c4	; 0x93c4 <LBGetNextFrame>
    b2b8:	40 e0       	ldi	r20, 0x00	; 0
    b2ba:	bc 01       	movw	r22, r24
    b2bc:	8c 2f       	mov	r24, r28
}
    b2be:	cf 91       	pop	r28

void update_shark_enemy(Enemy* e, u8 slot)
{
	e->shared.vx = SHARK_SPEED;
	e->shared.vy = 0;
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    b2c0:	0c 94 44 4b 	jmp	0x9688	; 0x9688 <LBMapSprite>

0000b2c4 <update_basic_shot>:
}

void update_basic_shot(Shot* s, u8 slot)
{
    b2c4:	cf 93       	push	r28
    b2c6:	c6 2f       	mov	r28, r22
	LBMapSprite(slot, LBGetNextFrame(&s->anim), 0);
    b2c8:	42 96       	adiw	r24, 0x12	; 18
    b2ca:	0e 94 e2 49 	call	0x93c4	; 0x93c4 <LBGetNextFrame>
    b2ce:	40 e0       	ldi	r20, 0x00	; 0
    b2d0:	bc 01       	movw	r22, r24
    b2d2:	8c 2f       	mov	r24, r28
}
    b2d4:	cf 91       	pop	r28
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
}

void update_basic_shot(Shot* s, u8 slot)
{
	LBMapSprite(slot, LBGetNextFrame(&s->anim), 0);
    b2d6:	0c 94 44 4b 	jmp	0x9688	; 0x9688 <LBMapSprite>

0000b2da <update_enemies>:
}

void update_enemies()
{
    b2da:	ef 92       	push	r14
    b2dc:	ff 92       	push	r15
    b2de:	0f 93       	push	r16
    b2e0:	1f 93       	push	r17
    b2e2:	cf 93       	push	r28
    b2e4:	df 93       	push	r29
    b2e6:	c8 e6       	ldi	r28, 0x68	; 104
    b2e8:	de e0       	ldi	r29, 0x0E	; 14
	u8 slot = ENEMY_SLOT;
    b2ea:	16 e0       	ldi	r17, 0x06	; 6
    b2ec:	ce 01       	movw	r24, r28
    b2ee:	03 97       	sbiw	r24, 0x03	; 3
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].flags & EXPLODING)
    b2f0:	fc 01       	movw	r30, r24
    b2f2:	20 81       	ld	r18, Z
    b2f4:	ae 01       	movw	r20, r28
    b2f6:	41 50       	subi	r20, 0x01	; 1
    b2f8:	51 09       	sbc	r21, r1
    b2fa:	7a 01       	movw	r14, r20
    b2fc:	24 ff       	sbrs	r18, 4
    b2fe:	0a c0       	rjmp	.+20     	; 0xb314 <update_enemies+0x3a>
		{
			map_explosion(&game.enemies[i].flags, &game.enemies[i].expl, slot, game.enemies[i].width, game.enemies[i].height);
    b300:	08 81       	ld	r16, Y
    b302:	fa 01       	movw	r30, r20
    b304:	20 81       	ld	r18, Z
    b306:	41 2f       	mov	r20, r17
    b308:	be 01       	movw	r22, r28
    b30a:	69 5d       	subi	r22, 0xD9	; 217
    b30c:	7f 4f       	sbci	r23, 0xFF	; 255
    b30e:	0e 94 cc 57 	call	0xaf98	; 0xaf98 <map_explosion>
    b312:	15 c0       	rjmp	.+42     	; 0xb33e <update_enemies+0x64>
    b314:	fe 01       	movw	r30, r28
    b316:	34 97       	sbiw	r30, 0x04	; 4
		}
		else if (game.enemies[i].active)
    b318:	80 81       	ld	r24, Z
    b31a:	88 23       	and	r24, r24
    b31c:	81 f0       	breq	.+32     	; 0xb33e <update_enemies+0x64>
		{
			switch (game.enemies[i].enemy_type)
    b31e:	89 81       	ldd	r24, Y+1	; 0x01
    b320:	88 23       	and	r24, r24
    b322:	41 f0       	breq	.+16     	; 0xb334 <update_enemies+0x5a>
    b324:	81 30       	cpi	r24, 0x01	; 1
    b326:	59 f4       	brne	.+22     	; 0xb33e <update_enemies+0x64>
			{
				case ENEMY_SPIDER: update_spider_enemy(&game.enemies[i], slot); break;
				case ENEMY_SHARK: update_shark_enemy(&game.enemies[i], slot); break;
    b328:	61 2f       	mov	r22, r17
    b32a:	ce 01       	movw	r24, r28
    b32c:	43 97       	sbiw	r24, 0x13	; 19
    b32e:	0e 94 4d 59 	call	0xb29a	; 0xb29a <update_shark_enemy>
    b332:	05 c0       	rjmp	.+10     	; 0xb33e <update_enemies+0x64>
		}
		else if (game.enemies[i].active)
		{
			switch (game.enemies[i].enemy_type)
			{
				case ENEMY_SPIDER: update_spider_enemy(&game.enemies[i], slot); break;
    b334:	61 2f       	mov	r22, r17
    b336:	ce 01       	movw	r24, r28
    b338:	43 97       	sbiw	r24, 0x13	; 19
    b33a:	0e 94 01 59 	call	0xb202	; 0xb202 <update_spider_enemy>
				case ENEMY_SHARK: update_shark_enemy(&game.enemies[i], slot); break;
			}
		}
		slot += game.enemies[i].width * game.enemies[i].height;
    b33e:	f7 01       	movw	r30, r14
    b340:	90 81       	ld	r25, Z
    b342:	88 81       	ld	r24, Y
    b344:	98 9f       	mul	r25, r24
    b346:	10 0d       	add	r17, r0
    b348:	11 24       	eor	r1, r1
    b34a:	ce 5b       	subi	r28, 0xBE	; 190
    b34c:	df 4f       	sbci	r29, 0xFF	; 255

void update_enemies()
{
	u8 slot = ENEMY_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    b34e:	ff e0       	ldi	r31, 0x0F	; 15
    b350:	c2 3b       	cpi	r28, 0xB2	; 178
    b352:	df 07       	cpc	r29, r31
    b354:	59 f6       	brne	.-106    	; 0xb2ec <update_enemies+0x12>
				case ENEMY_SHARK: update_shark_enemy(&game.enemies[i], slot); break;
			}
		}
		slot += game.enemies[i].width * game.enemies[i].height;
	}
}
    b356:	df 91       	pop	r29
    b358:	cf 91       	pop	r28
    b35a:	1f 91       	pop	r17
    b35c:	0f 91       	pop	r16
    b35e:	ff 90       	pop	r15
    b360:	ef 90       	pop	r14
    b362:	08 95       	ret

0000b364 <update_enemy_shots>:

void update_enemy_shots()
{
    b364:	8f 92       	push	r8
    b366:	9f 92       	push	r9
    b368:	af 92       	push	r10
    b36a:	bf 92       	push	r11
    b36c:	cf 92       	push	r12
    b36e:	df 92       	push	r13
    b370:	ef 92       	push	r14
    b372:	ff 92       	push	r15
    b374:	0f 93       	push	r16
    b376:	1f 93       	push	r17
    b378:	cf 93       	push	r28
    b37a:	df 93       	push	r29
    b37c:	00 d0       	rcall	.+0      	; 0xb37e <update_enemy_shots+0x1a>
    b37e:	00 d0       	rcall	.+0      	; 0xb380 <update_enemy_shots+0x1c>
    b380:	cd b7       	in	r28, 0x3d	; 61
    b382:	de b7       	in	r29, 0x3e	; 62
    b384:	2b e6       	ldi	r18, 0x6B	; 107
    b386:	82 2e       	mov	r8, r18
    b388:	2e e0       	ldi	r18, 0x0E	; 14
    b38a:	92 2e       	mov	r9, r18
    b38c:	0e e7       	ldi	r16, 0x7E	; 126
    b38e:	1e e0       	ldi	r17, 0x0E	; 14
    b390:	3f e0       	ldi	r19, 0x0F	; 15
    b392:	b3 2e       	mov	r11, r19
					if (!game.enemies[i].shot[j].active)
					{
						game.enemies[i].shot[j].active = 1;
						game.enemies[i].shot[j].shared.x = game.enemies[i].shared.x;
						game.enemies[i].shot[j].shared.y = ((u16 ) game.enemies[i].shared.y / 8) * 8;
						game.enemies[i].shot[j].shared.vx = ENEMY_SHOT_SPEED;
    b394:	44 e6       	ldi	r20, 0x64	; 100
    b396:	e4 2e       	mov	r14, r20
    b398:	f1 2c       	mov	r15, r1
						if (game.player.shared.x <= game.enemies[i].shared.x)
						{
							game.enemies[i].shot[j].shared.vx = -ENEMY_SHOT_SPEED;
    b39a:	5c e9       	ldi	r21, 0x9C	; 156
    b39c:	c5 2e       	mov	r12, r21
    b39e:	dd 24       	eor	r13, r13
    b3a0:	da 94       	dec	r13
    b3a2:	aa 24       	eor	r10, r10
    b3a4:	aa 94       	dec	r10
    b3a6:	ab 0c       	add	r10, r11
    b3a8:	f4 01       	movw	r30, r8
    b3aa:	37 97       	sbiw	r30, 0x07	; 7
{
	u8 slot = ENEMY_SHOT_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].active && game.enemies[i].shot_frame_count >= ENEMY_SHOT_DELAY_FRAMES)
    b3ac:	80 81       	ld	r24, Z
    b3ae:	88 23       	and	r24, r24
    b3b0:	09 f4       	brne	.+2      	; 0xb3b4 <update_enemy_shots+0x50>
    b3b2:	58 c0       	rjmp	.+176    	; 0xb464 <update_enemy_shots+0x100>
    b3b4:	f4 01       	movw	r30, r8
    b3b6:	80 81       	ld	r24, Z
    b3b8:	8c 33       	cpi	r24, 0x3C	; 60
    b3ba:	08 f4       	brcc	.+2      	; 0xb3be <update_enemy_shots+0x5a>
    b3bc:	50 c0       	rjmp	.+160    	; 0xb45e <update_enemy_shots+0xfa>
		{
			game.enemies[i].shot_frame_count = 0;	
    b3be:	10 82       	st	Z, r1
    b3c0:	f8 01       	movw	r30, r16
    b3c2:	32 97       	sbiw	r30, 0x02	; 2
			for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
			{
				if (game.enemies[i].shot[j].shot_type == BASIC_ENEMY_SHOT)
    b3c4:	80 81       	ld	r24, Z
    b3c6:	81 30       	cpi	r24, 0x01	; 1
    b3c8:	09 f0       	breq	.+2      	; 0xb3cc <update_enemy_shots+0x68>
    b3ca:	4c c0       	rjmp	.+152    	; 0xb464 <update_enemy_shots+0x100>
				{
					if (!game.enemies[i].shot[j].active)
    b3cc:	f8 01       	movw	r30, r16
    b3ce:	90 81       	ld	r25, Z
    b3d0:	91 11       	cpse	r25, r1
    b3d2:	3f c0       	rjmp	.+126    	; 0xb452 <update_enemy_shots+0xee>
					{
						game.enemies[i].shot[j].active = 1;
    b3d4:	80 83       	st	Z, r24
    b3d6:	f4 01       	movw	r30, r8
    b3d8:	72 97       	sbiw	r30, 0x12	; 18
						game.enemies[i].shot[j].shared.x = game.enemies[i].shared.x;
    b3da:	20 81       	ld	r18, Z
    b3dc:	31 81       	ldd	r19, Z+1	; 0x01
    b3de:	42 81       	ldd	r20, Z+2	; 0x02
    b3e0:	53 81       	ldd	r21, Z+3	; 0x03
    b3e2:	f4 01       	movw	r30, r8
    b3e4:	26 83       	std	Z+6, r18	; 0x06
    b3e6:	37 83       	std	Z+7, r19	; 0x07
    b3e8:	40 87       	std	Z+8, r20	; 0x08
    b3ea:	51 87       	std	Z+9, r21	; 0x09
    b3ec:	3e 97       	sbiw	r30, 0x0e	; 14
						game.enemies[i].shot[j].shared.y = ((u16 ) game.enemies[i].shared.y / 8) * 8;
    b3ee:	60 81       	ld	r22, Z
    b3f0:	71 81       	ldd	r23, Z+1	; 0x01
    b3f2:	82 81       	ldd	r24, Z+2	; 0x02
    b3f4:	93 81       	ldd	r25, Z+3	; 0x03
    b3f6:	29 83       	std	Y+1, r18	; 0x01
    b3f8:	3a 83       	std	Y+2, r19	; 0x02
    b3fa:	4b 83       	std	Y+3, r20	; 0x03
    b3fc:	5c 83       	std	Y+4, r21	; 0x04
    b3fe:	0e 94 b1 68 	call	0xd162	; 0xd162 <__fixunssfsi>
    b402:	83 e0       	ldi	r24, 0x03	; 3
    b404:	76 95       	lsr	r23
    b406:	67 95       	ror	r22
    b408:	8a 95       	dec	r24
    b40a:	e1 f7       	brne	.-8      	; 0xb404 <update_enemy_shots+0xa0>
    b40c:	93 e0       	ldi	r25, 0x03	; 3
    b40e:	66 0f       	add	r22, r22
    b410:	77 1f       	adc	r23, r23
    b412:	9a 95       	dec	r25
    b414:	e1 f7       	brne	.-8      	; 0xb40e <update_enemy_shots+0xaa>
    b416:	80 e0       	ldi	r24, 0x00	; 0
    b418:	90 e0       	ldi	r25, 0x00	; 0
    b41a:	0e 94 dd 68 	call	0xd1ba	; 0xd1ba <__floatunsisf>
    b41e:	f4 01       	movw	r30, r8
    b420:	62 87       	std	Z+10, r22	; 0x0a
    b422:	73 87       	std	Z+11, r23	; 0x0b
    b424:	84 87       	std	Z+12, r24	; 0x0c
    b426:	95 87       	std	Z+13, r25	; 0x0d
						game.enemies[i].shot[j].shared.vx = ENEMY_SHOT_SPEED;
    b428:	f7 86       	std	Z+15, r15	; 0x0f
    b42a:	e6 86       	std	Z+14, r14	; 0x0e
						if (game.player.shared.x <= game.enemies[i].shared.x)
    b42c:	29 81       	ldd	r18, Y+1	; 0x01
    b42e:	3a 81       	ldd	r19, Y+2	; 0x02
    b430:	4b 81       	ldd	r20, Y+3	; 0x03
    b432:	5c 81       	ldd	r21, Y+4	; 0x04
    b434:	60 91 cd 0d 	lds	r22, 0x0DCD
    b438:	70 91 ce 0d 	lds	r23, 0x0DCE
    b43c:	80 91 cf 0d 	lds	r24, 0x0DCF
    b440:	90 91 d0 0d 	lds	r25, 0x0DD0
    b444:	0e 94 ad 68 	call	0xd15a	; 0xd15a <__cmpsf2>
    b448:	18 16       	cp	r1, r24
    b44a:	1c f0       	brlt	.+6      	; 0xb452 <update_enemy_shots+0xee>
						{
							game.enemies[i].shot[j].shared.vx = -ENEMY_SHOT_SPEED;
    b44c:	f4 01       	movw	r30, r8
    b44e:	d7 86       	std	Z+15, r13	; 0x0f
    b450:	c6 86       	std	Z+14, r12	; 0x0e
						}
					}
					update_basic_shot(&game.enemies[i].shot[j], slot);
    b452:	6a 2d       	mov	r22, r10
    b454:	c4 01       	movw	r24, r8
    b456:	02 96       	adiw	r24, 0x02	; 2
    b458:	0e 94 62 59 	call	0xb2c4	; 0xb2c4 <update_basic_shot>
    b45c:	03 c0       	rjmp	.+6      	; 0xb464 <update_enemy_shots+0x100>
				slot += 1;
			}
		}
		else if (game.enemies[i].active)
		{
			game.enemies[i].shot_frame_count++;
    b45e:	8f 5f       	subi	r24, 0xFF	; 255
    b460:	f4 01       	movw	r30, r8
    b462:	80 83       	st	Z, r24
    b464:	b3 94       	inc	r11
    b466:	f2 e4       	ldi	r31, 0x42	; 66
    b468:	8f 0e       	add	r8, r31
    b46a:	91 1c       	adc	r9, r1
    b46c:	0e 5b       	subi	r16, 0xBE	; 190
    b46e:	1f 4f       	sbci	r17, 0xFF	; 255

void update_enemy_shots()
{
	u8 slot = ENEMY_SHOT_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    b470:	84 e1       	ldi	r24, 0x14	; 20
    b472:	b8 12       	cpse	r11, r24
    b474:	96 cf       	rjmp	.-212    	; 0xb3a2 <update_enemy_shots+0x3e>
		else
		{
			slot += MAX_ENEMY_SHOTS;
		}
	}
}
    b476:	0f 90       	pop	r0
    b478:	0f 90       	pop	r0
    b47a:	0f 90       	pop	r0
    b47c:	0f 90       	pop	r0
    b47e:	df 91       	pop	r29
    b480:	cf 91       	pop	r28
    b482:	1f 91       	pop	r17
    b484:	0f 91       	pop	r16
    b486:	ff 90       	pop	r15
    b488:	ef 90       	pop	r14
    b48a:	df 90       	pop	r13
    b48c:	cf 90       	pop	r12
    b48e:	bf 90       	pop	r11
    b490:	af 90       	pop	r10
    b492:	9f 90       	pop	r9
    b494:	8f 90       	pop	r8
    b496:	08 95       	ret

0000b498 <animate_enemies>:

void animate_enemies()
{
    b498:	4f 92       	push	r4
    b49a:	5f 92       	push	r5
    b49c:	6f 92       	push	r6
    b49e:	7f 92       	push	r7
    b4a0:	8f 92       	push	r8
    b4a2:	9f 92       	push	r9
    b4a4:	bf 92       	push	r11
    b4a6:	cf 92       	push	r12
    b4a8:	df 92       	push	r13
    b4aa:	ef 92       	push	r14
    b4ac:	ff 92       	push	r15
    b4ae:	0f 93       	push	r16
    b4b0:	1f 93       	push	r17
    b4b2:	cf 93       	push	r28
    b4b4:	df 93       	push	r29
    b4b6:	87 e6       	ldi	r24, 0x67	; 103
    b4b8:	c8 2e       	mov	r12, r24
    b4ba:	8e e0       	ldi	r24, 0x0E	; 14
    b4bc:	d8 2e       	mov	r13, r24
    b4be:	c8 e6       	ldi	r28, 0x68	; 104
    b4c0:	de e0       	ldi	r29, 0x0E	; 14
    b4c2:	95 e5       	ldi	r25, 0x55	; 85
    b4c4:	e9 2e       	mov	r14, r25
    b4c6:	9e e0       	ldi	r25, 0x0E	; 14
    b4c8:	f9 2e       	mov	r15, r25
	u8 slot = ENEMY_SLOT;
    b4ca:	26 e0       	ldi	r18, 0x06	; 6
    b4cc:	b2 2e       	mov	r11, r18
    b4ce:	4e 01       	movw	r8, r28
    b4d0:	84 e0       	ldi	r24, 0x04	; 4
    b4d2:	88 1a       	sub	r8, r24
    b4d4:	91 08       	sbc	r9, r1
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].active && !(game.enemies[i].flags & EXPLODING))
    b4d6:	f4 01       	movw	r30, r8
    b4d8:	80 81       	ld	r24, Z
    b4da:	31 96       	adiw	r30, 0x01	; 1
    b4dc:	88 23       	and	r24, r24
    b4de:	09 f4       	brne	.+2      	; 0xb4e2 <animate_enemies+0x4a>
    b4e0:	50 c0       	rjmp	.+160    	; 0xb582 <animate_enemies+0xea>
    b4e2:	80 81       	ld	r24, Z
    b4e4:	84 fd       	sbrc	r24, 4
    b4e6:	4d c0       	rjmp	.+154    	; 0xb582 <animate_enemies+0xea>
		{
			if (game.enemies[i].shared.x < game.camera_x || game.enemies[i].shared.y < game.camera_y || game.enemies[i].shared.y > game.camera_y + CAMERA_HEIGHT*8)
    b4e8:	60 91 aa 0d 	lds	r22, 0x0DAA
    b4ec:	70 91 ab 0d 	lds	r23, 0x0DAB
    b4f0:	80 e0       	ldi	r24, 0x00	; 0
    b4f2:	90 e0       	ldi	r25, 0x00	; 0
    b4f4:	0e 94 dd 68 	call	0xd1ba	; 0xd1ba <__floatunsisf>
    b4f8:	9b 01       	movw	r18, r22
    b4fa:	ac 01       	movw	r20, r24
    b4fc:	f7 01       	movw	r30, r14
    b4fe:	64 81       	ldd	r22, Z+4	; 0x04
    b500:	75 81       	ldd	r23, Z+5	; 0x05
    b502:	86 81       	ldd	r24, Z+6	; 0x06
    b504:	97 81       	ldd	r25, Z+7	; 0x07
    b506:	0e 94 ad 68 	call	0xd15a	; 0xd15a <__cmpsf2>
    b50a:	87 fd       	sbrc	r24, 7
    b50c:	25 c0       	rjmp	.+74     	; 0xb558 <animate_enemies+0xc0>
    b50e:	f7 01       	movw	r30, r14
    b510:	40 84       	ldd	r4, Z+8	; 0x08
    b512:	51 84       	ldd	r5, Z+9	; 0x09
    b514:	62 84       	ldd	r6, Z+10	; 0x0a
    b516:	73 84       	ldd	r7, Z+11	; 0x0b
    b518:	00 91 ac 0d 	lds	r16, 0x0DAC
    b51c:	10 91 ad 0d 	lds	r17, 0x0DAD
    b520:	b8 01       	movw	r22, r16
    b522:	80 e0       	ldi	r24, 0x00	; 0
    b524:	90 e0       	ldi	r25, 0x00	; 0
    b526:	0e 94 dd 68 	call	0xd1ba	; 0xd1ba <__floatunsisf>
    b52a:	9b 01       	movw	r18, r22
    b52c:	ac 01       	movw	r20, r24
    b52e:	c3 01       	movw	r24, r6
    b530:	b2 01       	movw	r22, r4
    b532:	0e 94 ad 68 	call	0xd15a	; 0xd15a <__cmpsf2>
    b536:	87 fd       	sbrc	r24, 7
    b538:	0f c0       	rjmp	.+30     	; 0xb558 <animate_enemies+0xc0>
    b53a:	b8 01       	movw	r22, r16
    b53c:	68 53       	subi	r22, 0x38	; 56
    b53e:	7f 4f       	sbci	r23, 0xFF	; 255
    b540:	80 e0       	ldi	r24, 0x00	; 0
    b542:	90 e0       	ldi	r25, 0x00	; 0
    b544:	0e 94 dd 68 	call	0xd1ba	; 0xd1ba <__floatunsisf>
    b548:	9b 01       	movw	r18, r22
    b54a:	ac 01       	movw	r20, r24
    b54c:	c3 01       	movw	r24, r6
    b54e:	b2 01       	movw	r22, r4
    b550:	0e 94 8f 69 	call	0xd31e	; 0xd31e <__gesf2>
    b554:	18 16       	cp	r1, r24
    b556:	6c f4       	brge	.+26     	; 0xb572 <animate_enemies+0xda>
			{
				game.enemies[i].active = 0;
    b558:	f4 01       	movw	r30, r8
    b55a:	10 82       	st	Z, r1
				game.active_enemies--;
    b55c:	80 91 c6 0d 	lds	r24, 0x0DC6
    b560:	81 50       	subi	r24, 0x01	; 1
    b562:	80 93 c6 0d 	sts	0x0DC6, r24
				LBMoveSprite(slot, OFF_SCREEN, 0, game.enemies[i].width, game.enemies[i].height);
    b566:	08 81       	ld	r16, Y
    b568:	f6 01       	movw	r30, r12
    b56a:	20 81       	ld	r18, Z
    b56c:	40 e0       	ldi	r20, 0x00	; 0
    b56e:	60 ee       	ldi	r22, 0xE0	; 224
    b570:	36 c0       	rjmp	.+108    	; 0xb5de <animate_enemies+0x146>
				game.player.flags = EXPLODING;
				return;
			}
			else
			{
				animate_sprite(&game.enemies[i].shared, slot, game.enemies[i].width, game.enemies[i].height);
    b572:	28 81       	ld	r18, Y
    b574:	f6 01       	movw	r30, r12
    b576:	40 81       	ld	r20, Z
    b578:	6b 2d       	mov	r22, r11
    b57a:	c7 01       	movw	r24, r14
    b57c:	0e 94 17 58 	call	0xb02e	; 0xb02e <animate_sprite>
    b580:	31 c0       	rjmp	.+98     	; 0xb5e4 <animate_enemies+0x14c>
			}
		}
		else if (game.enemies[i].flags & EXPLODING)
    b582:	80 81       	ld	r24, Z
    b584:	84 ff       	sbrs	r24, 4
    b586:	2e c0       	rjmp	.+92     	; 0xb5e4 <animate_enemies+0x14c>
		{
			LBMoveSprite(slot, game.enemies[i].shared.x - game.camera_x, game.enemies[i].shared.y - game.camera_y, game.enemies[i].width, game.enemies[i].height);
    b588:	60 91 ac 0d 	lds	r22, 0x0DAC
    b58c:	70 91 ad 0d 	lds	r23, 0x0DAD
    b590:	80 e0       	ldi	r24, 0x00	; 0
    b592:	90 e0       	ldi	r25, 0x00	; 0
    b594:	0e 94 dd 68 	call	0xd1ba	; 0xd1ba <__floatunsisf>
    b598:	9b 01       	movw	r18, r22
    b59a:	ac 01       	movw	r20, r24
    b59c:	f7 01       	movw	r30, r14
    b59e:	60 85       	ldd	r22, Z+8	; 0x08
    b5a0:	71 85       	ldd	r23, Z+9	; 0x09
    b5a2:	82 85       	ldd	r24, Z+10	; 0x0a
    b5a4:	93 85       	ldd	r25, Z+11	; 0x0b
    b5a6:	0e 94 48 68 	call	0xd090	; 0xd090 <__subsf3>
    b5aa:	0e 94 b1 68 	call	0xd162	; 0xd162 <__fixunssfsi>
    b5ae:	16 2f       	mov	r17, r22
    b5b0:	60 91 aa 0d 	lds	r22, 0x0DAA
    b5b4:	70 91 ab 0d 	lds	r23, 0x0DAB
    b5b8:	80 e0       	ldi	r24, 0x00	; 0
    b5ba:	90 e0       	ldi	r25, 0x00	; 0
    b5bc:	0e 94 dd 68 	call	0xd1ba	; 0xd1ba <__floatunsisf>
    b5c0:	9b 01       	movw	r18, r22
    b5c2:	ac 01       	movw	r20, r24
    b5c4:	f7 01       	movw	r30, r14
    b5c6:	64 81       	ldd	r22, Z+4	; 0x04
    b5c8:	75 81       	ldd	r23, Z+5	; 0x05
    b5ca:	86 81       	ldd	r24, Z+6	; 0x06
    b5cc:	97 81       	ldd	r25, Z+7	; 0x07
    b5ce:	0e 94 48 68 	call	0xd090	; 0xd090 <__subsf3>
    b5d2:	0e 94 b1 68 	call	0xd162	; 0xd162 <__fixunssfsi>
    b5d6:	08 81       	ld	r16, Y
    b5d8:	f6 01       	movw	r30, r12
    b5da:	20 81       	ld	r18, Z
    b5dc:	41 2f       	mov	r20, r17
    b5de:	8b 2d       	mov	r24, r11
    b5e0:	0e 94 96 4b 	call	0x972c	; 0x972c <LBMoveSprite>
		}
		slot +=  game.enemies[i].width * game.enemies[i].height;
    b5e4:	98 81       	ld	r25, Y
    b5e6:	f6 01       	movw	r30, r12
    b5e8:	80 81       	ld	r24, Z
    b5ea:	98 9f       	mul	r25, r24
    b5ec:	b0 0c       	add	r11, r0
    b5ee:	11 24       	eor	r1, r1
    b5f0:	f2 e4       	ldi	r31, 0x42	; 66
    b5f2:	cf 0e       	add	r12, r31
    b5f4:	d1 1c       	adc	r13, r1
    b5f6:	ce 5b       	subi	r28, 0xBE	; 190
    b5f8:	df 4f       	sbci	r29, 0xFF	; 255
    b5fa:	82 e4       	ldi	r24, 0x42	; 66
    b5fc:	e8 0e       	add	r14, r24
    b5fe:	f1 1c       	adc	r15, r1

void animate_enemies()
{
	u8 slot = ENEMY_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    b600:	ef e0       	ldi	r30, 0x0F	; 15
    b602:	c2 3b       	cpi	r28, 0xB2	; 178
    b604:	de 07       	cpc	r29, r30
    b606:	09 f0       	breq	.+2      	; 0xb60a <animate_enemies+0x172>
    b608:	62 cf       	rjmp	.-316    	; 0xb4ce <animate_enemies+0x36>
		{
			LBMoveSprite(slot, game.enemies[i].shared.x - game.camera_x, game.enemies[i].shared.y - game.camera_y, game.enemies[i].width, game.enemies[i].height);
		}
		slot +=  game.enemies[i].width * game.enemies[i].height;
	}
}
    b60a:	df 91       	pop	r29
    b60c:	cf 91       	pop	r28
    b60e:	1f 91       	pop	r17
    b610:	0f 91       	pop	r16
    b612:	ff 90       	pop	r15
    b614:	ef 90       	pop	r14
    b616:	df 90       	pop	r13
    b618:	cf 90       	pop	r12
    b61a:	bf 90       	pop	r11
    b61c:	9f 90       	pop	r9
    b61e:	8f 90       	pop	r8
    b620:	7f 90       	pop	r7
    b622:	6f 90       	pop	r6
    b624:	5f 90       	pop	r5
    b626:	4f 90       	pop	r4
    b628:	08 95       	ret

0000b62a <animate_enemy_shots>:

void animate_enemy_shots()
{
    b62a:	2f 92       	push	r2
    b62c:	3f 92       	push	r3
    b62e:	4f 92       	push	r4
    b630:	5f 92       	push	r5
    b632:	6f 92       	push	r6
    b634:	7f 92       	push	r7
    b636:	8f 92       	push	r8
    b638:	9f 92       	push	r9
    b63a:	af 92       	push	r10
    b63c:	bf 92       	push	r11
    b63e:	cf 92       	push	r12
    b640:	df 92       	push	r13
    b642:	ef 92       	push	r14
    b644:	ff 92       	push	r15
    b646:	0f 93       	push	r16
    b648:	1f 93       	push	r17
    b64a:	cf 93       	push	r28
    b64c:	df 93       	push	r29
    b64e:	cd b7       	in	r28, 0x3d	; 61
    b650:	de b7       	in	r29, 0x3e	; 62
    b652:	62 97       	sbiw	r28, 0x12	; 18
    b654:	0f b6       	in	r0, 0x3f	; 63
    b656:	f8 94       	cli
    b658:	de bf       	out	0x3e, r29	; 62
    b65a:	0f be       	out	0x3f, r0	; 63
    b65c:	cd bf       	out	0x3d, r28	; 61
    b65e:	4e e7       	ldi	r20, 0x7E	; 126
    b660:	24 2e       	mov	r2, r20
    b662:	4e e0       	ldi	r20, 0x0E	; 14
    b664:	34 2e       	mov	r3, r20
    b666:	5d e6       	ldi	r21, 0x6D	; 109
    b668:	85 2e       	mov	r8, r21
    b66a:	5e e0       	ldi	r21, 0x0E	; 14
    b66c:	95 2e       	mov	r9, r21
	u8 slot = ENEMY_SHOT_SLOT;
    b66e:	6e e0       	ldi	r22, 0x0E	; 14
    b670:	b6 2e       	mov	r11, r22
    b672:	f1 01       	movw	r30, r2
    b674:	32 97       	sbiw	r30, 0x02	; 2
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
		{
			if (game.enemies[i].shot[j].shot_type == BASIC_ENEMY_SHOT)
    b676:	80 81       	ld	r24, Z
    b678:	81 30       	cpi	r24, 0x01	; 1
    b67a:	09 f0       	breq	.+2      	; 0xb67e <animate_enemy_shots+0x54>
    b67c:	ea c0       	rjmp	.+468    	; 0xb852 <animate_enemy_shots+0x228>
			{
				if (game.enemies[i].shot[j].active)
    b67e:	d1 01       	movw	r26, r2
    b680:	8c 91       	ld	r24, X
    b682:	88 23       	and	r24, r24
    b684:	09 f4       	brne	.+2      	; 0xb688 <animate_enemy_shots+0x5e>
    b686:	e5 c0       	rjmp	.+458    	; 0xb852 <animate_enemy_shots+0x228>
				{
					if (game.enemies[i].shot[j].shared.x < game.camera_x || game.enemies[i].shot[j].shared.x > game.camera_x + CAMERA_WIDTH*8 ||
    b688:	f4 01       	movw	r30, r8
    b68a:	c4 80       	ldd	r12, Z+4	; 0x04
    b68c:	d5 80       	ldd	r13, Z+5	; 0x05
    b68e:	e6 80       	ldd	r14, Z+6	; 0x06
    b690:	f7 80       	ldd	r15, Z+7	; 0x07
    b692:	60 90 aa 0d 	lds	r6, 0x0DAA
    b696:	70 90 ab 0d 	lds	r7, 0x0DAB
    b69a:	b3 01       	movw	r22, r6
    b69c:	80 e0       	ldi	r24, 0x00	; 0
    b69e:	90 e0       	ldi	r25, 0x00	; 0
    b6a0:	0e 94 dd 68 	call	0xd1ba	; 0xd1ba <__floatunsisf>
    b6a4:	9b 01       	movw	r18, r22
    b6a6:	ac 01       	movw	r20, r24
    b6a8:	c7 01       	movw	r24, r14
    b6aa:	b6 01       	movw	r22, r12
    b6ac:	0e 94 ad 68 	call	0xd15a	; 0xd15a <__cmpsf2>
    b6b0:	87 ff       	sbrs	r24, 7
    b6b2:	03 c0       	rjmp	.+6      	; 0xb6ba <animate_enemy_shots+0x90>
					   collision_detect_level(&game.enemies[i].shot[j].shared, 1, 1))
					{
						game.enemies[i].shot[j].active = 0;
    b6b4:	d1 01       	movw	r26, r2
    b6b6:	1c 92       	st	X, r1
    b6b8:	80 c0       	rjmp	.+256    	; 0xb7ba <animate_enemy_shots+0x190>
		{
			if (game.enemies[i].shot[j].shot_type == BASIC_ENEMY_SHOT)
			{
				if (game.enemies[i].shot[j].active)
				{
					if (game.enemies[i].shot[j].shared.x < game.camera_x || game.enemies[i].shot[j].shared.x > game.camera_x + CAMERA_WIDTH*8 ||
    b6ba:	b3 01       	movw	r22, r6
    b6bc:	60 52       	subi	r22, 0x20	; 32
    b6be:	7f 4f       	sbci	r23, 0xFF	; 255
    b6c0:	80 e0       	ldi	r24, 0x00	; 0
    b6c2:	90 e0       	ldi	r25, 0x00	; 0
    b6c4:	0e 94 dd 68 	call	0xd1ba	; 0xd1ba <__floatunsisf>
    b6c8:	9b 01       	movw	r18, r22
    b6ca:	ac 01       	movw	r20, r24
    b6cc:	c7 01       	movw	r24, r14
    b6ce:	b6 01       	movw	r22, r12
    b6d0:	0e 94 8f 69 	call	0xd31e	; 0xd31e <__gesf2>
    b6d4:	18 16       	cp	r1, r24
    b6d6:	74 f3       	brlt	.-36     	; 0xb6b4 <animate_enemy_shots+0x8a>
					   collision_detect_level(&game.enemies[i].shot[j].shared, 1, 1))
    b6d8:	41 e0       	ldi	r20, 0x01	; 1
    b6da:	61 e0       	ldi	r22, 0x01	; 1
    b6dc:	c4 01       	movw	r24, r8
    b6de:	0e 94 f8 52 	call	0xa5f0	; 0xa5f0 <collision_detect_level>
		{
			if (game.enemies[i].shot[j].shot_type == BASIC_ENEMY_SHOT)
			{
				if (game.enemies[i].shot[j].active)
				{
					if (game.enemies[i].shot[j].shared.x < game.camera_x || game.enemies[i].shot[j].shared.x > game.camera_x + CAMERA_WIDTH*8 ||
    b6e2:	81 11       	cpse	r24, r1
    b6e4:	e7 cf       	rjmp	.-50     	; 0xb6b4 <animate_enemy_shots+0x8a>
					{
						game.enemies[i].shot[j].active = 0;
						LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
					}
					else if (LBCollides(game.player.shared.x,game.player.shared.y, game.player.width*8, game.player.height*8,
							game.enemies[i].shot[j].shared.x, game.enemies[i].shot[j].shared.y, 8, 8
    b6e6:	f4 01       	movw	r30, r8
    b6e8:	40 84       	ldd	r4, Z+8	; 0x08
    b6ea:	51 84       	ldd	r5, Z+9	; 0x09
    b6ec:	62 84       	ldd	r6, Z+10	; 0x0a
    b6ee:	73 84       	ldd	r7, Z+11	; 0x0b
    b6f0:	84 81       	ldd	r24, Z+4	; 0x04
    b6f2:	95 81       	ldd	r25, Z+5	; 0x05
    b6f4:	a6 81       	ldd	r26, Z+6	; 0x06
    b6f6:	b7 81       	ldd	r27, Z+7	; 0x07
    b6f8:	89 83       	std	Y+1, r24	; 0x01
    b6fa:	9a 83       	std	Y+2, r25	; 0x02
    b6fc:	ab 83       	std	Y+3, r26	; 0x03
    b6fe:	bc 83       	std	Y+4, r27	; 0x04
					   collision_detect_level(&game.enemies[i].shot[j].shared, 1, 1))
					{
						game.enemies[i].shot[j].active = 0;
						LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
					}
					else if (LBCollides(game.player.shared.x,game.player.shared.y, game.player.width*8, game.player.height*8,
    b700:	c3 01       	movw	r24, r6
    b702:	b2 01       	movw	r22, r4
    b704:	0e 94 b1 68 	call	0xd162	; 0xd162 <__fixunssfsi>
    b708:	6d 83       	std	Y+5, r22	; 0x05
    b70a:	7e 83       	std	Y+6, r23	; 0x06
    b70c:	8f 83       	std	Y+7, r24	; 0x07
    b70e:	98 87       	std	Y+8, r25	; 0x08
    b710:	69 81       	ldd	r22, Y+1	; 0x01
    b712:	7a 81       	ldd	r23, Y+2	; 0x02
    b714:	8b 81       	ldd	r24, Y+3	; 0x03
    b716:	9c 81       	ldd	r25, Y+4	; 0x04
    b718:	0e 94 b1 68 	call	0xd162	; 0xd162 <__fixunssfsi>
    b71c:	69 87       	std	Y+9, r22	; 0x09
    b71e:	7a 87       	std	Y+10, r23	; 0x0a
    b720:	8b 87       	std	Y+11, r24	; 0x0b
    b722:	9c 87       	std	Y+12, r25	; 0x0c
    b724:	20 91 dd 0d 	lds	r18, 0x0DDD
    b728:	22 0f       	add	r18, r18
    b72a:	22 0f       	add	r18, r18
    b72c:	22 0f       	add	r18, r18
    b72e:	40 91 dc 0d 	lds	r20, 0x0DDC
    b732:	44 0f       	add	r20, r20
    b734:	44 0f       	add	r20, r20
    b736:	44 0f       	add	r20, r20
    b738:	60 91 d1 0d 	lds	r22, 0x0DD1
    b73c:	70 91 d2 0d 	lds	r23, 0x0DD2
    b740:	80 91 d3 0d 	lds	r24, 0x0DD3
    b744:	90 91 d4 0d 	lds	r25, 0x0DD4
    b748:	29 8b       	std	Y+17, r18	; 0x11
    b74a:	4a 8b       	std	Y+18, r20	; 0x12
    b74c:	0e 94 b1 68 	call	0xd162	; 0xd162 <__fixunssfsi>
    b750:	6d 87       	std	Y+13, r22	; 0x0d
    b752:	7e 87       	std	Y+14, r23	; 0x0e
    b754:	8f 87       	std	Y+15, r24	; 0x0f
    b756:	98 8b       	std	Y+16, r25	; 0x10
    b758:	60 91 cd 0d 	lds	r22, 0x0DCD
    b75c:	70 91 ce 0d 	lds	r23, 0x0DCE
    b760:	80 91 cf 0d 	lds	r24, 0x0DCF
    b764:	90 91 d0 0d 	lds	r25, 0x0DD0
    b768:	0e 94 b1 68 	call	0xd162	; 0xd162 <__fixunssfsi>
    b76c:	dc 01       	movw	r26, r24
    b76e:	cb 01       	movw	r24, r22
    b770:	28 e0       	ldi	r18, 0x08	; 8
    b772:	a2 2e       	mov	r10, r18
    b774:	38 e0       	ldi	r19, 0x08	; 8
    b776:	c3 2e       	mov	r12, r19
    b778:	ed 80       	ldd	r14, Y+5	; 0x05
    b77a:	fe 80       	ldd	r15, Y+6	; 0x06
    b77c:	09 85       	ldd	r16, Y+9	; 0x09
    b77e:	1a 85       	ldd	r17, Y+10	; 0x0a
    b780:	29 89       	ldd	r18, Y+17	; 0x11
    b782:	4a 89       	ldd	r20, Y+18	; 0x12
    b784:	6d 85       	ldd	r22, Y+13	; 0x0d
    b786:	7e 85       	ldd	r23, Y+14	; 0x0e
    b788:	0e 94 f9 4a 	call	0x95f2	; 0x95f2 <LBCollides>
    b78c:	88 23       	and	r24, r24
    b78e:	d1 f0       	breq	.+52     	; 0xb7c4 <animate_enemy_shots+0x19a>
							game.enemies[i].shot[j].shared.x, game.enemies[i].shot[j].shared.y, 8, 8
						)
					)
					{
						SFX_HIT;
    b790:	41 e0       	ldi	r20, 0x01	; 1
    b792:	6f ef       	ldi	r22, 0xFF	; 255
    b794:	84 e0       	ldi	r24, 0x04	; 4
    b796:	0e 94 9c 3e 	call	0x7d38	; 0x7d38 <TriggerFx>
						if(!GODMODE) game.player.shield -= game.enemies[i].shot[j].hit_count;
						if (game.player.shield <= 0)
    b79a:	80 91 de 0d 	lds	r24, 0x0DDE
    b79e:	18 16       	cp	r1, r24
    b7a0:	54 f0       	brlt	.+20     	; 0xb7b6 <animate_enemy_shots+0x18c>
						{
							SFX_PLAYER_EXPLODE;
    b7a2:	41 e0       	ldi	r20, 0x01	; 1
    b7a4:	6f ef       	ldi	r22, 0xFF	; 255
    b7a6:	85 e0       	ldi	r24, 0x05	; 5
    b7a8:	0e 94 9c 3e 	call	0x7d38	; 0x7d38 <TriggerFx>
							game.player.shield = 0;
    b7ac:	10 92 de 0d 	sts	0x0DDE, r1
							game.player.flags = EXPLODING;
    b7b0:	b0 e1       	ldi	r27, 0x10	; 16
    b7b2:	b0 93 d9 0d 	sts	0x0DD9, r27
						}
						game.enemies[i].shot[j].active = 0;
    b7b6:	f1 01       	movw	r30, r2
    b7b8:	10 82       	st	Z, r1
						LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
    b7ba:	01 e0       	ldi	r16, 0x01	; 1
    b7bc:	21 e0       	ldi	r18, 0x01	; 1
    b7be:	40 e0       	ldi	r20, 0x00	; 0
    b7c0:	60 ee       	ldi	r22, 0xE0	; 224
    b7c2:	44 c0       	rjmp	.+136    	; 0xb84c <animate_enemy_shots+0x222>
					}
					else
					{
						game.enemies[i].shot[j].shared.x += game.enemies[i].shot[j].shared.vx*FRAME_TIME;
    b7c4:	d4 01       	movw	r26, r8
    b7c6:	1c 96       	adiw	r26, 0x0c	; 12
    b7c8:	6d 91       	ld	r22, X+
    b7ca:	7c 91       	ld	r23, X
    b7cc:	1d 97       	sbiw	r26, 0x0d	; 13
    b7ce:	88 27       	eor	r24, r24
    b7d0:	77 fd       	sbrc	r23, 7
    b7d2:	80 95       	com	r24
    b7d4:	98 2f       	mov	r25, r24
    b7d6:	0e 94 df 68 	call	0xd1be	; 0xd1be <__floatsisf>
    b7da:	29 e8       	ldi	r18, 0x89	; 137
    b7dc:	38 e8       	ldi	r19, 0x88	; 136
    b7de:	48 e8       	ldi	r20, 0x88	; 136
    b7e0:	5c e3       	ldi	r21, 0x3C	; 60
    b7e2:	0e 94 93 69 	call	0xd326	; 0xd326 <__mulsf3>
    b7e6:	9b 01       	movw	r18, r22
    b7e8:	ac 01       	movw	r20, r24
    b7ea:	69 81       	ldd	r22, Y+1	; 0x01
    b7ec:	7a 81       	ldd	r23, Y+2	; 0x02
    b7ee:	8b 81       	ldd	r24, Y+3	; 0x03
    b7f0:	9c 81       	ldd	r25, Y+4	; 0x04
    b7f2:	0e 94 49 68 	call	0xd092	; 0xd092 <__addsf3>
    b7f6:	6b 01       	movw	r12, r22
    b7f8:	7c 01       	movw	r14, r24
    b7fa:	f4 01       	movw	r30, r8
    b7fc:	64 83       	std	Z+4, r22	; 0x04
    b7fe:	75 83       	std	Z+5, r23	; 0x05
    b800:	86 83       	std	Z+6, r24	; 0x06
    b802:	97 83       	std	Z+7, r25	; 0x07
						LBMoveSprite(slot, game.enemies[i].shot[j].shared.x - game.camera_x, game.enemies[i].shot[j].shared.y - game.camera_y, 1, 1);
    b804:	60 91 ac 0d 	lds	r22, 0x0DAC
    b808:	70 91 ad 0d 	lds	r23, 0x0DAD
    b80c:	80 e0       	ldi	r24, 0x00	; 0
    b80e:	90 e0       	ldi	r25, 0x00	; 0
    b810:	0e 94 dd 68 	call	0xd1ba	; 0xd1ba <__floatunsisf>
    b814:	9b 01       	movw	r18, r22
    b816:	ac 01       	movw	r20, r24
    b818:	c3 01       	movw	r24, r6
    b81a:	b2 01       	movw	r22, r4
    b81c:	0e 94 48 68 	call	0xd090	; 0xd090 <__subsf3>
    b820:	0e 94 b1 68 	call	0xd162	; 0xd162 <__fixunssfsi>
    b824:	76 2e       	mov	r7, r22
    b826:	60 91 aa 0d 	lds	r22, 0x0DAA
    b82a:	70 91 ab 0d 	lds	r23, 0x0DAB
    b82e:	80 e0       	ldi	r24, 0x00	; 0
    b830:	90 e0       	ldi	r25, 0x00	; 0
    b832:	0e 94 dd 68 	call	0xd1ba	; 0xd1ba <__floatunsisf>
    b836:	9b 01       	movw	r18, r22
    b838:	ac 01       	movw	r20, r24
    b83a:	c7 01       	movw	r24, r14
    b83c:	b6 01       	movw	r22, r12
    b83e:	0e 94 48 68 	call	0xd090	; 0xd090 <__subsf3>
    b842:	0e 94 b1 68 	call	0xd162	; 0xd162 <__fixunssfsi>
    b846:	01 e0       	ldi	r16, 0x01	; 1
    b848:	21 e0       	ldi	r18, 0x01	; 1
    b84a:	47 2d       	mov	r20, r7
    b84c:	8b 2d       	mov	r24, r11
    b84e:	0e 94 96 4b 	call	0x972c	; 0x972c <LBMoveSprite>
					}
				}
			}
			slot += 1;
    b852:	b3 94       	inc	r11
    b854:	f2 e4       	ldi	r31, 0x42	; 66
    b856:	2f 0e       	add	r2, r31
    b858:	31 1c       	adc	r3, r1
    b85a:	82 e4       	ldi	r24, 0x42	; 66
    b85c:	88 0e       	add	r8, r24
    b85e:	91 1c       	adc	r9, r1

void animate_enemy_shots()
{
	u8 slot = ENEMY_SHOT_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    b860:	93 e1       	ldi	r25, 0x13	; 19
    b862:	b9 12       	cpse	r11, r25
    b864:	06 cf       	rjmp	.-500    	; 0xb672 <animate_enemy_shots+0x48>
				}
			}
			slot += 1;
		}
	}
}
    b866:	62 96       	adiw	r28, 0x12	; 18
    b868:	0f b6       	in	r0, 0x3f	; 63
    b86a:	f8 94       	cli
    b86c:	de bf       	out	0x3e, r29	; 62
    b86e:	0f be       	out	0x3f, r0	; 63
    b870:	cd bf       	out	0x3d, r28	; 61
    b872:	df 91       	pop	r29
    b874:	cf 91       	pop	r28
    b876:	1f 91       	pop	r17
    b878:	0f 91       	pop	r16
    b87a:	ff 90       	pop	r15
    b87c:	ef 90       	pop	r14
    b87e:	df 90       	pop	r13
    b880:	cf 90       	pop	r12
    b882:	bf 90       	pop	r11
    b884:	af 90       	pop	r10
    b886:	9f 90       	pop	r9
    b888:	8f 90       	pop	r8
    b88a:	7f 90       	pop	r7
    b88c:	6f 90       	pop	r6
    b88e:	5f 90       	pop	r5
    b890:	4f 90       	pop	r4
    b892:	3f 90       	pop	r3
    b894:	2f 90       	pop	r2
    b896:	08 95       	ret

0000b898 <clear_sprites>:
	}
	
}

void clear_sprites(u8 from, u8 count)
{
    b898:	ef 92       	push	r14
    b89a:	ff 92       	push	r15
    b89c:	0f 93       	push	r16
    b89e:	cf 93       	push	r28
	for(u8 i = from; i < from+count; i++)
    b8a0:	c8 2f       	mov	r28, r24
    b8a2:	e6 2e       	mov	r14, r22
    b8a4:	f1 2c       	mov	r15, r1
    b8a6:	e8 0e       	add	r14, r24
    b8a8:	f1 1c       	adc	r15, r1
    b8aa:	8c 2f       	mov	r24, r28
    b8ac:	90 e0       	ldi	r25, 0x00	; 0
    b8ae:	8e 15       	cp	r24, r14
    b8b0:	9f 05       	cpc	r25, r15
    b8b2:	7c f4       	brge	.+30     	; 0xb8d2 <clear_sprites+0x3a>
	{
		LBMapSprite(i, map_none, 0);
    b8b4:	40 e0       	ldi	r20, 0x00	; 0
    b8b6:	66 e3       	ldi	r22, 0x36	; 54
    b8b8:	78 e3       	ldi	r23, 0x38	; 56
    b8ba:	8c 2f       	mov	r24, r28
    b8bc:	0e 94 44 4b 	call	0x9688	; 0x9688 <LBMapSprite>
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
    b8c0:	01 e0       	ldi	r16, 0x01	; 1
    b8c2:	21 e0       	ldi	r18, 0x01	; 1
    b8c4:	40 e0       	ldi	r20, 0x00	; 0
    b8c6:	60 ee       	ldi	r22, 0xE0	; 224
    b8c8:	8c 2f       	mov	r24, r28
    b8ca:	0e 94 96 4b 	call	0x972c	; 0x972c <LBMoveSprite>
	
}

void clear_sprites(u8 from, u8 count)
{
	for(u8 i = from; i < from+count; i++)
    b8ce:	cf 5f       	subi	r28, 0xFF	; 255
    b8d0:	ec cf       	rjmp	.-40     	; 0xb8aa <clear_sprites+0x12>
	{
		LBMapSprite(i, map_none, 0);
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
	}
}
    b8d2:	cf 91       	pop	r28
    b8d4:	0f 91       	pop	r16
    b8d6:	ff 90       	pop	r15
    b8d8:	ef 90       	pop	r14
    b8da:	08 95       	ret

0000b8dc <fade_through>:
	EepromWriteBlock(block);
}

void fade_through()
{
	FadeOut(FRAMES_PER_FADE, true);
    b8dc:	61 e0       	ldi	r22, 0x01	; 1
    b8de:	81 e0       	ldi	r24, 0x01	; 1
    b8e0:	0e 94 ad 49 	call	0x935a	; 0x935a <FadeOut>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    b8e4:	64 e1       	ldi	r22, 0x14	; 20
    b8e6:	80 e0       	ldi	r24, 0x00	; 0
    b8e8:	0e 94 4c 5c 	call	0xb898	; 0xb898 <clear_sprites>
	LBRotateSprites();
    b8ec:	0e 94 d4 4b 	call	0x97a8	; 0x97a8 <LBRotateSprites>
	ClearVram();
    b8f0:	0e 94 bd 3a 	call	0x757a	; 0x757a <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    b8f4:	60 e0       	ldi	r22, 0x00	; 0
    b8f6:	81 e0       	ldi	r24, 0x01	; 1
    b8f8:	0c 94 a1 49 	jmp	0x9342	; 0x9342 <FadeIn>

0000b8fc <load_level>:
		game.level_height = 25;
	}
}

void load_level(u8 index, u8 drop_ship)
{	
    b8fc:	0f 93       	push	r16
    b8fe:	cf 93       	push	r28
    b900:	df 93       	push	r29
    b902:	c8 2f       	mov	r28, r24
    b904:	d6 2f       	mov	r29, r22
	u8 ship_x = (get_hero_spawn_x(index) - 2) * 8;
	u8 ship_y = 0;
	char ship_increment = 3;
	
	Screen.scrollX = 0;
    b906:	10 92 b2 0c 	sts	0x0CB2, r1
	Screen.scrollY = 0;
    b90a:	10 92 b3 0c 	sts	0x0CB3, r1
	Screen.scrollHeight = 29;
    b90e:	8d e1       	ldi	r24, 0x1D	; 29
    b910:	80 93 b4 0c 	sts	0x0CB4, r24
	Screen.overlayTileTable = tiles_data;
    b914:	89 e3       	ldi	r24, 0x39	; 57
    b916:	98 e3       	ldi	r25, 0x38	; 56
    b918:	90 93 b1 0c 	sts	0x0CB1, r25
    b91c:	80 93 b0 0c 	sts	0x0CB0, r24
	Screen.overlayHeight = 3;
    b920:	83 e0       	ldi	r24, 0x03	; 3
    b922:	80 93 af 0c 	sts	0x0CAF, r24
	clear_overlay(2);
    b926:	82 e0       	ldi	r24, 0x02	; 2
    b928:	0e 94 51 4e 	call	0x9ca2	; 0x9ca2 <clear_overlay>
	game.current_level_index = index;
    b92c:	c0 93 bb 0d 	sts	0x0DBB, r28
	game.level_ended = 0;
    b930:	10 92 c8 0d 	sts	0x0DC8, r1
	game.joypadState.held = 0;
    b934:	10 92 a4 0f 	sts	0x0FA4, r1
    b938:	10 92 a3 0f 	sts	0x0FA3, r1
	game.joypadState.pressed = 0;
    b93c:	10 92 a0 0f 	sts	0x0FA0, r1
    b940:	10 92 9f 0f 	sts	0x0F9F, r1
	game.joypadState.released = 0;
    b944:	10 92 a2 0f 	sts	0x0FA2, r1
    b948:	10 92 a1 0f 	sts	0x0FA1, r1
	switch (index)
    b94c:	8c 2f       	mov	r24, r28
    b94e:	90 e0       	ldi	r25, 0x00	; 0
    b950:	8a 30       	cpi	r24, 0x0A	; 10
    b952:	91 05       	cpc	r25, r1
    b954:	c0 f4       	brcc	.+48     	; 0xb986 <load_level+0x8a>
    b956:	fc 01       	movw	r30, r24
    b958:	ef 5a       	subi	r30, 0xAF	; 175
    b95a:	ff 4f       	sbci	r31, 0xFF	; 255
    b95c:	0c 94 42 68 	jmp	0xd084	; 0xd084 <__tablejump2__>
	{
		case 0: map_level_info((char*) map_level_ice); break;
    b960:	80 eb       	ldi	r24, 0xB0	; 176
    b962:	99 e6       	ldi	r25, 0x69	; 105
    b964:	0e c0       	rjmp	.+28     	; 0xb982 <load_level+0x86>
		case 1: map_level_info((char*) map_level_space); break;
		case 2: map_level_info((char*) map_level_fire); break;
    b966:	8f ea       	ldi	r24, 0xAF	; 175
    b968:	98 e6       	ldi	r25, 0x68	; 104
    b96a:	0b c0       	rjmp	.+22     	; 0xb982 <load_level+0x86>
		case 3: map_level_info((char*) map_level_space); break;
		case 4: map_level_info((char*) map_level_forest); break;
    b96c:	8e ea       	ldi	r24, 0xAE	; 174
    b96e:	97 e6       	ldi	r25, 0x67	; 103
    b970:	08 c0       	rjmp	.+16     	; 0xb982 <load_level+0x86>
		case 5: map_level_info((char*) map_level_space); break;
		case 6: map_level_info((char*) map_level_city); break;
    b972:	8d ea       	ldi	r24, 0xAD	; 173
    b974:	96 e6       	ldi	r25, 0x66	; 102
    b976:	05 c0       	rjmp	.+10     	; 0xb982 <load_level+0x86>
		case 7: map_level_info((char*) map_level_space); break;
		case 8: map_level_info((char*) map_level_desert); break;
    b978:	8c ea       	ldi	r24, 0xAC	; 172
    b97a:	95 e6       	ldi	r25, 0x65	; 101
    b97c:	02 c0       	rjmp	.+4      	; 0xb982 <load_level+0x86>
		case 9: map_level_info((char*) map_level_space); break;
    b97e:	81 e0       	ldi	r24, 0x01	; 1
    b980:	9f e5       	ldi	r25, 0x5F	; 95
    b982:	0e 94 c4 50 	call	0xa188	; 0xa188 <map_level_info>
	}
	game.column_count = 0;
    b986:	10 92 b5 0d 	sts	0x0DB5, r1
    b98a:	10 92 b4 0d 	sts	0x0DB4, r1
	game.camera_x = get_camera_x(index);
    b98e:	10 92 ab 0d 	sts	0x0DAB, r1
    b992:	10 92 aa 0d 	sts	0x0DAA, r1
	game.camera_y = get_camera_y(index);
    b996:	10 92 ad 0d 	sts	0x0DAD, r1
    b99a:	10 92 ac 0d 	sts	0x0DAC, r1
	game.player.shared.x = get_hero_spawn_x(index)*8;
    b99e:	80 e0       	ldi	r24, 0x00	; 0
    b9a0:	90 e0       	ldi	r25, 0x00	; 0
    b9a2:	a0 ec       	ldi	r26, 0xC0	; 192
    b9a4:	b1 e4       	ldi	r27, 0x41	; 65
    b9a6:	80 93 cd 0d 	sts	0x0DCD, r24
    b9aa:	90 93 ce 0d 	sts	0x0DCE, r25
    b9ae:	a0 93 cf 0d 	sts	0x0DCF, r26
    b9b2:	b0 93 d0 0d 	sts	0x0DD0, r27
	game.player.shared.y = get_hero_spawn_y(index)*8;
    b9b6:	80 e0       	ldi	r24, 0x00	; 0
    b9b8:	90 e0       	ldi	r25, 0x00	; 0
    b9ba:	a8 e2       	ldi	r26, 0x28	; 40
    b9bc:	b3 e4       	ldi	r27, 0x43	; 67
    b9be:	80 93 d1 0d 	sts	0x0DD1, r24
    b9c2:	90 93 d2 0d 	sts	0x0DD2, r25
    b9c6:	a0 93 d3 0d 	sts	0x0DD3, r26
    b9ca:	b0 93 d4 0d 	sts	0x0DD4, r27
	game.camera_x *= 8;
	game.camera_y *= 8;
	game.scroll_src_x = game.camera_x / 8 + CAMERA_WIDTH + 1;
    b9ce:	8d e1       	ldi	r24, 0x1D	; 29
    b9d0:	90 e0       	ldi	r25, 0x00	; 0
    b9d2:	90 93 a7 0d 	sts	0x0DA7, r25
    b9d6:	80 93 a6 0d 	sts	0x0DA6, r24
    game.scroll_dest_x = game.camera_x / 8 + CAMERA_WIDTH + 1;
    b9da:	80 93 c4 0d 	sts	0x0DC4, r24
	game.scroll_src_y = game.camera_y / 8 + CAMERA_HEIGHT + 1;
    b9de:	8a e1       	ldi	r24, 0x1A	; 26
    b9e0:	90 e0       	ldi	r25, 0x00	; 0
    b9e2:	90 93 a9 0d 	sts	0x0DA9, r25
    b9e6:	80 93 a8 0d 	sts	0x0DA8, r24
    game.scroll_dest_y =  game.camera_y / 8 + CAMERA_HEIGHT + 1;
    b9ea:	80 93 c5 0d 	sts	0x0DC5, r24
	game.scroll_x = 0;
    b9ee:	10 92 c2 0d 	sts	0x0DC2, r1
	game.scroll_y = 0;
    b9f2:	10 92 c3 0d 	sts	0x0DC3, r1
	game.spawn_rate = BASE_SPAWN_RATE;
    b9f6:	8a e0       	ldi	r24, 0x0A	; 10
    b9f8:	80 93 c7 0d 	sts	0x0DC7, r24
	render_camera_view();
    b9fc:	0e 94 ce 4e 	call	0x9d9c	; 0x9d9c <render_camera_view>
	LBPrint(0, VRAM_TILES_V-3, (char*) strShield);
    ba00:	40 e9       	ldi	r20, 0x90	; 144
    ba02:	5b e0       	ldi	r21, 0x0B	; 11
    ba04:	6d e1       	ldi	r22, 0x1D	; 29
    ba06:	80 e0       	ldi	r24, 0x00	; 0
    ba08:	0e 94 73 4a 	call	0x94e6	; 0x94e6 <LBPrint>
	LBPrint(18, VRAM_TILES_V-3, (char*) strTime);
    ba0c:	43 e8       	ldi	r20, 0x83	; 131
    ba0e:	5b e0       	ldi	r21, 0x0B	; 11
    ba10:	6d e1       	ldi	r22, 0x1D	; 29
    ba12:	82 e1       	ldi	r24, 0x12	; 18
    ba14:	0e 94 73 4a 	call	0x94e6	; 0x94e6 <LBPrint>
	LBPrint(0, VRAM_TILES_V-2, (char*) strLives);
    ba18:	49 e8       	ldi	r20, 0x89	; 137
    ba1a:	5b e0       	ldi	r21, 0x0B	; 11
    ba1c:	6e e1       	ldi	r22, 0x1E	; 30
    ba1e:	80 e0       	ldi	r24, 0x00	; 0
    ba20:	0e 94 73 4a 	call	0x94e6	; 0x94e6 <LBPrint>
	LBPrint(17, VRAM_TILES_V-2, (char*) strScore);
    ba24:	48 e9       	ldi	r20, 0x98	; 152
    ba26:	5b e0       	ldi	r21, 0x0B	; 11
    ba28:	6e e1       	ldi	r22, 0x1E	; 30
    ba2a:	81 e1       	ldi	r24, 0x11	; 17
    ba2c:	0e 94 73 4a 	call	0x94e6	; 0x94e6 <LBPrint>
	LBPrint(17, VRAM_TILES_V-1, (char*) strTally);
    ba30:	42 e4       	ldi	r20, 0x42	; 66
    ba32:	5b e0       	ldi	r21, 0x0B	; 11
    ba34:	6f e1       	ldi	r22, 0x1F	; 31
    ba36:	81 e1       	ldi	r24, 0x11	; 17
    ba38:	0e 94 73 4a 	call	0x94e6	; 0x94e6 <LBPrint>
	
	LBPrintByte(9, VRAM_TILES_V-3, game.player.shield ,true);
    ba3c:	21 e0       	ldi	r18, 0x01	; 1
    ba3e:	40 91 de 0d 	lds	r20, 0x0DDE
    ba42:	6d e1       	ldi	r22, 0x1D	; 29
    ba44:	89 e0       	ldi	r24, 0x09	; 9
    ba46:	0e 94 8f 4a 	call	0x951e	; 0x951e <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-3, game.time ,true);
    ba4a:	40 91 b2 0d 	lds	r20, 0x0DB2
    ba4e:	50 91 b3 0d 	lds	r21, 0x0DB3
    ba52:	21 e0       	ldi	r18, 0x01	; 1
    ba54:	6d e1       	ldi	r22, 0x1D	; 29
    ba56:	8b e1       	ldi	r24, 0x1B	; 27
    ba58:	0e 94 c0 4a 	call	0x9580	; 0x9580 <LBPrintInt>
	LBPrintByte(9, VRAM_TILES_V-2, game.lives ,true);
    ba5c:	21 e0       	ldi	r18, 0x01	; 1
    ba5e:	40 91 b9 0d 	lds	r20, 0x0DB9
    ba62:	6e e1       	ldi	r22, 0x1E	; 30
    ba64:	89 e0       	ldi	r24, 0x09	; 9
    ba66:	0e 94 8f 4a 	call	0x951e	; 0x951e <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-2, game.level_score ,true);
    ba6a:	40 91 b0 0d 	lds	r20, 0x0DB0
    ba6e:	50 91 b1 0d 	lds	r21, 0x0DB1
    ba72:	21 e0       	ldi	r18, 0x01	; 1
    ba74:	6e e1       	ldi	r22, 0x1E	; 30
    ba76:	8b e1       	ldi	r24, 0x1B	; 27
    ba78:	0e 94 c0 4a 	call	0x9580	; 0x9580 <LBPrintInt>
	LBPrintInt(27, VRAM_TILES_V-1, game.score ,true);
    ba7c:	40 91 ae 0d 	lds	r20, 0x0DAE
    ba80:	50 91 af 0d 	lds	r21, 0x0DAF
    ba84:	21 e0       	ldi	r18, 0x01	; 1
    ba86:	6f e1       	ldi	r22, 0x1F	; 31
    ba88:	8b e1       	ldi	r24, 0x1B	; 27
    ba8a:	0e 94 c0 4a 	call	0x9580	; 0x9580 <LBPrintInt>
	
	
	if (!is_space() && drop_ship)
    ba8e:	0e 94 13 4c 	call	0x9826	; 0x9826 <is_space>
    ba92:	81 11       	cpse	r24, r1
    ba94:	39 c0       	rjmp	.+114    	; 0xbb08 <load_level+0x20c>
    ba96:	dd 23       	and	r29, r29
    ba98:	b9 f1       	breq	.+110    	; 0xbb08 <load_level+0x20c>
	{
		map_ship();
    ba9a:	0e 94 af 50 	call	0xa15e	; 0xa15e <map_ship>

void load_level(u8 index, u8 drop_ship)
{	
	u8 ship_x = (get_hero_spawn_x(index) - 2) * 8;
	u8 ship_y = 0;
	char ship_increment = 3;
    ba9e:	d3 e0       	ldi	r29, 0x03	; 3
}

void load_level(u8 index, u8 drop_ship)
{	
	u8 ship_x = (get_hero_spawn_x(index) - 2) * 8;
	u8 ship_y = 0;
    baa0:	c0 e0       	ldi	r28, 0x00	; 0
	if (!is_space() && drop_ship)
	{
		map_ship();
		while (1)
		{
			WaitVsync(1);
    baa2:	81 e0       	ldi	r24, 0x01	; 1
    baa4:	90 e0       	ldi	r25, 0x00	; 0
    baa6:	0e 94 45 49 	call	0x928a	; 0x928a <WaitVsync>
			if (ship_y >= get_hero_spawn_y(index)*8)
    baaa:	8c 2f       	mov	r24, r28
    baac:	90 e0       	ldi	r25, 0x00	; 0
    baae:	88 3a       	cpi	r24, 0xA8	; 168
    bab0:	91 05       	cpc	r25, r1
    bab2:	74 f0       	brlt	.+28     	; 0xbad0 <load_level+0x1d4>
			{
				LBMapSprite(0, map_hero_idle, 0);
    bab4:	40 e0       	ldi	r20, 0x00	; 0
    bab6:	67 e0       	ldi	r22, 0x07	; 7
    bab8:	78 e3       	ldi	r23, 0x38	; 56
    baba:	80 e0       	ldi	r24, 0x00	; 0
    babc:	0e 94 44 4b 	call	0x9688	; 0x9688 <LBMapSprite>
				LBMoveSprite(0, get_hero_spawn_x(index)*8, get_hero_spawn_y(index)*8, 2, 3);
    bac0:	03 e0       	ldi	r16, 0x03	; 3
    bac2:	22 e0       	ldi	r18, 0x02	; 2
    bac4:	48 ea       	ldi	r20, 0xA8	; 168
    bac6:	68 e1       	ldi	r22, 0x18	; 24
    bac8:	80 e0       	ldi	r24, 0x00	; 0
    baca:	0e 94 96 4b 	call	0x972c	; 0x972c <LBMoveSprite>
				ship_increment = -3;
    bace:	dd ef       	ldi	r29, 0xFD	; 253
			}
			LBMapSprite(6, LBGetNextFrame(&game.player.run), 0);
    bad0:	85 e3       	ldi	r24, 0x35	; 53
    bad2:	9e e0       	ldi	r25, 0x0E	; 14
    bad4:	0e 94 e2 49 	call	0x93c4	; 0x93c4 <LBGetNextFrame>
    bad8:	40 e0       	ldi	r20, 0x00	; 0
    bada:	bc 01       	movw	r22, r24
    badc:	86 e0       	ldi	r24, 0x06	; 6
    bade:	0e 94 44 4b 	call	0x9688	; 0x9688 <LBMapSprite>
			LBMoveSprite(6, ship_x, ship_y, 4, 2);
    bae2:	02 e0       	ldi	r16, 0x02	; 2
    bae4:	24 e0       	ldi	r18, 0x04	; 4
    bae6:	4c 2f       	mov	r20, r28
    bae8:	68 e0       	ldi	r22, 0x08	; 8
    baea:	86 e0       	ldi	r24, 0x06	; 6
    baec:	0e 94 96 4b 	call	0x972c	; 0x972c <LBMoveSprite>
			ship_y += ship_increment;
    baf0:	cd 0f       	add	r28, r29
			if (ship_y == 0)
    baf2:	39 f4       	brne	.+14     	; 0xbb02 <load_level+0x206>
			{
				clear_sprites(6, 8);
    baf4:	68 e0       	ldi	r22, 0x08	; 8
    baf6:	86 e0       	ldi	r24, 0x06	; 6
				break;
			}
			LBRotateSprites();
		}
	}
}
    baf8:	df 91       	pop	r29
    bafa:	cf 91       	pop	r28
    bafc:	0f 91       	pop	r16
			LBMapSprite(6, LBGetNextFrame(&game.player.run), 0);
			LBMoveSprite(6, ship_x, ship_y, 4, 2);
			ship_y += ship_increment;
			if (ship_y == 0)
			{
				clear_sprites(6, 8);
    bafe:	0c 94 4c 5c 	jmp	0xb898	; 0xb898 <clear_sprites>
				break;
			}
			LBRotateSprites();
    bb02:	0e 94 d4 4b 	call	0x97a8	; 0x97a8 <LBRotateSprites>
		}
    bb06:	cd cf       	rjmp	.-102    	; 0xbaa2 <load_level+0x1a6>
	}
}
    bb08:	df 91       	pop	r29
    bb0a:	cf 91       	pop	r28
    bb0c:	0f 91       	pop	r16
    bb0e:	08 95       	ret

0000bb10 <hide_sprites>:
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
	}
}

void hide_sprites(u8 from, u8 count)
{
    bb10:	0f 93       	push	r16
    bb12:	1f 93       	push	r17
    bb14:	cf 93       	push	r28
    bb16:	df 93       	push	r29
	for(u8 i = from; i < from+count; i++)
    bb18:	18 2f       	mov	r17, r24
    bb1a:	c6 2f       	mov	r28, r22
    bb1c:	d0 e0       	ldi	r29, 0x00	; 0
    bb1e:	c8 0f       	add	r28, r24
    bb20:	d1 1d       	adc	r29, r1
    bb22:	81 2f       	mov	r24, r17
    bb24:	90 e0       	ldi	r25, 0x00	; 0
    bb26:	8c 17       	cp	r24, r28
    bb28:	9d 07       	cpc	r25, r29
    bb2a:	4c f4       	brge	.+18     	; 0xbb3e <hide_sprites+0x2e>
	{
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
    bb2c:	01 e0       	ldi	r16, 0x01	; 1
    bb2e:	21 e0       	ldi	r18, 0x01	; 1
    bb30:	40 e0       	ldi	r20, 0x00	; 0
    bb32:	60 ee       	ldi	r22, 0xE0	; 224
    bb34:	81 2f       	mov	r24, r17
    bb36:	0e 94 96 4b 	call	0x972c	; 0x972c <LBMoveSprite>
	}
}

void hide_sprites(u8 from, u8 count)
{
	for(u8 i = from; i < from+count; i++)
    bb3a:	1f 5f       	subi	r17, 0xFF	; 255
    bb3c:	f2 cf       	rjmp	.-28     	; 0xbb22 <hide_sprites+0x12>
	{
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
	}
}
    bb3e:	df 91       	pop	r29
    bb40:	cf 91       	pop	r28
    bb42:	1f 91       	pop	r17
    bb44:	0f 91       	pop	r16
    bb46:	08 95       	ret

0000bb48 <select_pressed>:
	StopSong();
	load_high_scores();
}

char select_pressed(JoyPadState* p)
{
    bb48:	fc 01       	movw	r30, r24
    bb4a:	20 81       	ld	r18, Z
    bb4c:	31 81       	ldd	r19, Z+1	; 0x01
    bb4e:	28 70       	andi	r18, 0x08	; 8
    bb50:	31 70       	andi	r19, 0x01	; 1
	return (p->pressed & BTN_A) || (p->pressed & BTN_START);
    bb52:	81 e0       	ldi	r24, 0x01	; 1
    bb54:	23 2b       	or	r18, r19
    bb56:	09 f4       	brne	.+2      	; 0xbb5a <select_pressed+0x12>
    bb58:	80 e0       	ldi	r24, 0x00	; 0
}
    bb5a:	08 95       	ret

0000bb5c <stream_dialogue>:


void stream_dialogue(const char* dialogue, u8 y)
{
    bb5c:	ff 92       	push	r15
    bb5e:	0f 93       	push	r16
    bb60:	1f 93       	push	r17
    bb62:	cf 93       	push	r28
    bb64:	df 93       	push	r29
    bb66:	ec 01       	movw	r28, r24
    bb68:	16 2f       	mov	r17, r22
	u8 x, ln, c;
	
	while (pgm_read_byte(dialogue) != '#')
	{
		ln = strnlen_P(dialogue, 255);
		x = 14 - ln / 2;
    bb6a:	8e e0       	ldi	r24, 0x0E	; 14
    bb6c:	f8 2e       	mov	r15, r24

void stream_dialogue(const char* dialogue, u8 y)
{
	u8 x, ln, c;
	
	while (pgm_read_byte(dialogue) != '#')
    bb6e:	fe 01       	movw	r30, r28
    bb70:	84 91       	lpm	r24, Z
    bb72:	83 32       	cpi	r24, 0x23	; 35
    bb74:	21 f1       	breq	.+72     	; 0xbbbe <stream_dialogue+0x62>
	{
		ln = strnlen_P(dialogue, 255);
    bb76:	6f ef       	ldi	r22, 0xFF	; 255
    bb78:	70 e0       	ldi	r23, 0x00	; 0
    bb7a:	ce 01       	movw	r24, r28
    bb7c:	0e 94 f6 69 	call	0xd3ec	; 0xd3ec <strnlen_P>
		x = 14 - ln / 2;
    bb80:	86 95       	lsr	r24
    bb82:	0f 2d       	mov	r16, r15
    bb84:	08 1b       	sub	r16, r24
    bb86:	0c 1b       	sub	r16, r28
    bb88:	8c 2f       	mov	r24, r28
    bb8a:	80 0f       	add	r24, r16
		while ((c = pgm_read_byte(dialogue++)))
    bb8c:	21 96       	adiw	r28, 0x01	; 1
    bb8e:	fe 01       	movw	r30, r28
    bb90:	31 97       	sbiw	r30, 0x01	; 1
    bb92:	44 91       	lpm	r20, Z
    bb94:	44 23       	and	r20, r20
    bb96:	89 f0       	breq	.+34     	; 0xbbba <stream_dialogue+0x5e>
		{
			LBPrintChar(x++, y, c);
    bb98:	61 2f       	mov	r22, r17
    bb9a:	0e 94 53 4a 	call	0x94a6	; 0x94a6 <LBPrintChar>
			LBGetJoyPadState(&game.joypadState, 0);
    bb9e:	60 e0       	ldi	r22, 0x00	; 0
    bba0:	8f e9       	ldi	r24, 0x9F	; 159
    bba2:	9f e0       	ldi	r25, 0x0F	; 15
    bba4:	0e 94 08 4a 	call	0x9410	; 0x9410 <LBGetJoyPadState>
			if (!(game.joypadState.held & BTN_B)) WaitUs(CHARACTER_DELAY_US);
    bba8:	80 91 a3 0f 	lds	r24, 0x0FA3
    bbac:	80 fd       	sbrc	r24, 0
    bbae:	ec cf       	rjmp	.-40     	; 0xbb88 <stream_dialogue+0x2c>
    bbb0:	80 e7       	ldi	r24, 0x70	; 112
    bbb2:	97 e1       	ldi	r25, 0x17	; 23
    bbb4:	0e 94 f3 3a 	call	0x75e6	; 0x75e6 <WaitUs>
    bbb8:	e7 cf       	rjmp	.-50     	; 0xbb88 <stream_dialogue+0x2c>
		}
		y++;
    bbba:	1f 5f       	subi	r17, 0xFF	; 255
    bbbc:	d8 cf       	rjmp	.-80     	; 0xbb6e <stream_dialogue+0x12>
	}
}
    bbbe:	df 91       	pop	r29
    bbc0:	cf 91       	pop	r28
    bbc2:	1f 91       	pop	r17
    bbc4:	0f 91       	pop	r16
    bbc6:	ff 90       	pop	r15
    bbc8:	08 95       	ret

0000bbca <map_particles>:

void map_particles()
{
    bbca:	cf 93       	push	r28
	for (u8 i = 9; i < 20; i++)
    bbcc:	c9 e0       	ldi	r28, 0x09	; 9
	{
		LBMapSprite(i, map_particle, 0);
    bbce:	40 e0       	ldi	r20, 0x00	; 0
    bbd0:	6a e2       	ldi	r22, 0x2A	; 42
    bbd2:	78 e3       	ldi	r23, 0x38	; 56
    bbd4:	8c 2f       	mov	r24, r28
    bbd6:	0e 94 44 4b 	call	0x9688	; 0x9688 <LBMapSprite>
	}
}

void map_particles()
{
	for (u8 i = 9; i < 20; i++)
    bbda:	cf 5f       	subi	r28, 0xFF	; 255
    bbdc:	c4 31       	cpi	r28, 0x14	; 20
    bbde:	b9 f7       	brne	.-18     	; 0xbbce <map_particles+0x4>
	{
		LBMapSprite(i, map_particle, 0);
	}
}
    bbe0:	cf 91       	pop	r28
    bbe2:	08 95       	ret

0000bbe4 <place_particles>:

void place_particles()
{
    bbe4:	0f 93       	push	r16
    bbe6:	1f 93       	push	r17
    bbe8:	cf 93       	push	r28
    bbea:	df 93       	push	r29
    bbec:	1f 92       	push	r1
    bbee:	cd b7       	in	r28, 0x3d	; 61
    bbf0:	de b7       	in	r29, 0x3e	; 62
	for (u8 i = 9; i < 20; i++)
    bbf2:	19 e0       	ldi	r17, 0x09	; 9
	{
		LBMoveSprite(i, LBRandom(0, 224), LBRandom(0, 200), 1, 1);
    bbf4:	68 ec       	ldi	r22, 0xC8	; 200
    bbf6:	80 e0       	ldi	r24, 0x00	; 0
    bbf8:	0e 94 1f 4b 	call	0x963e	; 0x963e <LBRandom>
    bbfc:	48 2f       	mov	r20, r24
    bbfe:	60 ee       	ldi	r22, 0xE0	; 224
    bc00:	80 e0       	ldi	r24, 0x00	; 0
    bc02:	49 83       	std	Y+1, r20	; 0x01
    bc04:	0e 94 1f 4b 	call	0x963e	; 0x963e <LBRandom>
    bc08:	68 2f       	mov	r22, r24
    bc0a:	01 e0       	ldi	r16, 0x01	; 1
    bc0c:	21 e0       	ldi	r18, 0x01	; 1
    bc0e:	49 81       	ldd	r20, Y+1	; 0x01
    bc10:	81 2f       	mov	r24, r17
    bc12:	0e 94 96 4b 	call	0x972c	; 0x972c <LBMoveSprite>
	}
}

void place_particles()
{
	for (u8 i = 9; i < 20; i++)
    bc16:	1f 5f       	subi	r17, 0xFF	; 255
    bc18:	14 31       	cpi	r17, 0x14	; 20
    bc1a:	61 f7       	brne	.-40     	; 0xbbf4 <place_particles+0x10>
	{
		LBMoveSprite(i, LBRandom(0, 224), LBRandom(0, 200), 1, 1);
	}
}
    bc1c:	0f 90       	pop	r0
    bc1e:	df 91       	pop	r29
    bc20:	cf 91       	pop	r28
    bc22:	1f 91       	pop	r17
    bc24:	0f 91       	pop	r16
    bc26:	08 95       	ret

0000bc28 <animate_particles>:

void animate_particles(char dy, u8 oy)
{
    bc28:	ef 92       	push	r14
    bc2a:	ff 92       	push	r15
    bc2c:	0f 93       	push	r16
    bc2e:	1f 93       	push	r17
    bc30:	cf 93       	push	r28
    bc32:	df 93       	push	r29
    bc34:	d8 2f       	mov	r29, r24
    bc36:	16 2f       	mov	r17, r22
    bc38:	85 ed       	ldi	r24, 0xD5	; 213
    bc3a:	e8 2e       	mov	r14, r24
    bc3c:	8f e0       	ldi	r24, 0x0F	; 15
    bc3e:	f8 2e       	mov	r15, r24
	for (u8 i = 9; i < 20; i++)
    bc40:	c9 e0       	ldi	r28, 0x09	; 9
	{
		LBMoveSprite(i, extendedSprites[i].x, extendedSprites[i].y+dy, 1, 1);
    bc42:	f7 01       	movw	r30, r14
    bc44:	40 81       	ld	r20, Z
    bc46:	4d 0f       	add	r20, r29
    bc48:	01 e0       	ldi	r16, 0x01	; 1
    bc4a:	21 e0       	ldi	r18, 0x01	; 1
    bc4c:	31 97       	sbiw	r30, 0x01	; 1
    bc4e:	60 81       	ld	r22, Z
    bc50:	8c 2f       	mov	r24, r28
    bc52:	0e 94 96 4b 	call	0x972c	; 0x972c <LBMoveSprite>
		if (extendedSprites[i].y > 200)
    bc56:	f7 01       	movw	r30, r14
    bc58:	80 81       	ld	r24, Z
    bc5a:	89 3c       	cpi	r24, 0xC9	; 201
    bc5c:	50 f0       	brcs	.+20     	; 0xbc72 <animate_particles+0x4a>
		{
			LBMoveSprite(i, LBRandom(0, 224), oy, 1, 1);
    bc5e:	60 ee       	ldi	r22, 0xE0	; 224
    bc60:	80 e0       	ldi	r24, 0x00	; 0
    bc62:	0e 94 1f 4b 	call	0x963e	; 0x963e <LBRandom>
    bc66:	21 e0       	ldi	r18, 0x01	; 1
    bc68:	41 2f       	mov	r20, r17
    bc6a:	68 2f       	mov	r22, r24
    bc6c:	8c 2f       	mov	r24, r28
    bc6e:	0e 94 96 4b 	call	0x972c	; 0x972c <LBMoveSprite>
	}
}

void animate_particles(char dy, u8 oy)
{
	for (u8 i = 9; i < 20; i++)
    bc72:	cf 5f       	subi	r28, 0xFF	; 255
    bc74:	f4 e0       	ldi	r31, 0x04	; 4
    bc76:	ef 0e       	add	r14, r31
    bc78:	f1 1c       	adc	r15, r1
    bc7a:	c4 31       	cpi	r28, 0x14	; 20
    bc7c:	11 f7       	brne	.-60     	; 0xbc42 <animate_particles+0x1a>
		if (extendedSprites[i].y > 200)
		{
			LBMoveSprite(i, LBRandom(0, 224), oy, 1, 1);
		}
	}
}
    bc7e:	df 91       	pop	r29
    bc80:	cf 91       	pop	r28
    bc82:	1f 91       	pop	r17
    bc84:	0f 91       	pop	r16
    bc86:	ff 90       	pop	r15
    bc88:	ef 90       	pop	r14
    bc8a:	08 95       	ret

0000bc8c <get_emarald_map>:

const char* get_emarald_map(u8 index)
{
    bc8c:	82 50       	subi	r24, 0x02	; 2
    bc8e:	87 30       	cpi	r24, 0x07	; 7
    bc90:	48 f4       	brcc	.+18     	; 0xbca4 <get_emarald_map+0x18>
    bc92:	e8 2f       	mov	r30, r24
    bc94:	f0 e0       	ldi	r31, 0x00	; 0
    bc96:	ee 0f       	add	r30, r30
    bc98:	ff 1f       	adc	r31, r31
    bc9a:	ee 5f       	subi	r30, 0xFE	; 254
    bc9c:	fa 4f       	sbci	r31, 0xFA	; 250
    bc9e:	80 81       	ld	r24, Z
    bca0:	91 81       	ldd	r25, Z+1	; 0x01
    bca2:	08 95       	ret
    bca4:	8e e1       	ldi	r24, 0x1E	; 30
    bca6:	98 e3       	ldi	r25, 0x38	; 56
		case 4: return map_emerald_2;
		case 6: return map_emerald_3;
		case 8: return map_emerald_4;
		default: return map_emerald_0;
	}
}
    bca8:	08 95       	ret

0000bcaa <music_transition>:

void music_transition()
{
	if (is_space())
    bcaa:	0e 94 13 4c 	call	0x9826	; 0x9826 <is_space>
    bcae:	88 23       	and	r24, r24
    bcb0:	19 f0       	breq	.+6      	; 0xbcb8 <music_transition+0xe>
	{
		StartSong(spacesong);
    bcb2:	8f ed       	ldi	r24, 0xDF	; 223
    bcb4:	9b e0       	ldi	r25, 0x0B	; 11
    bcb6:	06 c0       	rjmp	.+12     	; 0xbcc4 <music_transition+0x1a>
	}
	else if (game.current_level_index != 0)
    bcb8:	80 91 bb 0d 	lds	r24, 0x0DBB
    bcbc:	88 23       	and	r24, r24
    bcbe:	21 f0       	breq	.+8      	; 0xbcc8 <music_transition+0x1e>
	{
		StartSong(planetsong);
    bcc0:	8f e7       	ldi	r24, 0x7F	; 127
    bcc2:	92 e1       	ldi	r25, 0x12	; 18
    bcc4:	0c 94 b1 3d 	jmp	0x7b62	; 0x7b62 <StartSong>
    bcc8:	08 95       	ret

0000bcca <planet_transition>:
	}
}

void planet_transition(u8 index, char scroll, char atmosphere_height, char dy, u8 oy)
{
    bcca:	cf 92       	push	r12
    bccc:	df 92       	push	r13
    bcce:	ef 92       	push	r14
    bcd0:	ff 92       	push	r15
    bcd2:	0f 93       	push	r16
    bcd4:	1f 93       	push	r17
    bcd6:	cf 93       	push	r28
    bcd8:	df 93       	push	r29
    bcda:	1f 92       	push	r1
    bcdc:	cd b7       	in	r28, 0x3d	; 61
    bcde:	de b7       	in	r29, 0x3e	; 62
    bce0:	c8 2e       	mov	r12, r24
    bce2:	e6 2e       	mov	r14, r22
    bce4:	12 2f       	mov	r17, r18
    bce6:	f0 2e       	mov	r15, r16
	u8 frame_counter = 0;
	
	fade_through();
    bce8:	49 83       	std	Y+1, r20	; 0x01
    bcea:	0e 94 6e 5c 	call	0xb8dc	; 0xb8dc <fade_through>
	Screen.scrollX = 0;
    bcee:	10 92 b2 0c 	sts	0x0CB2, r1
	Screen.scrollY = 0;
    bcf2:	10 92 b3 0c 	sts	0x0CB3, r1
	Screen.scrollHeight = 32;
    bcf6:	80 e2       	ldi	r24, 0x20	; 32
    bcf8:	80 93 b4 0c 	sts	0x0CB4, r24
	Screen.overlayHeight = 0;
    bcfc:	10 92 af 0c 	sts	0x0CAF, r1
	game.scroll_x = 0;
    bd00:	10 92 c2 0d 	sts	0x0DC2, r1
	game.scroll_y = 0;
    bd04:	10 92 c3 0d 	sts	0x0DC3, r1
	map_particles();
    bd08:	0e 94 e5 5d 	call	0xbbca	; 0xbbca <map_particles>
	map_ship();
    bd0c:	0e 94 af 50 	call	0xa15e	; 0xa15e <map_ship>
	place_particles();
    bd10:	0e 94 f2 5d 	call	0xbbe4	; 0xbbe4 <place_particles>
	DrawMap2(0, atmosphere_height, map_atmosphere);
    bd14:	40 ee       	ldi	r20, 0xE0	; 224
    bd16:	5a e5       	ldi	r21, 0x5A	; 90
    bd18:	69 81       	ldd	r22, Y+1	; 0x01
    bd1a:	80 e0       	ldi	r24, 0x00	; 0
    bd1c:	0e 94 dc 48 	call	0x91b8	; 0x91b8 <DrawMap>
	game.current_level_index = index;
    bd20:	c0 92 bb 0d 	sts	0x0DBB, r12
	music_transition();
    bd24:	0e 94 55 5e 	call	0xbcaa	; 0xbcaa <music_transition>
	if (!is_space())
    bd28:	0e 94 13 4c 	call	0x9826	; 0x9826 <is_space>
    bd2c:	81 11       	cpse	r24, r1
    bd2e:	0f c0       	rjmp	.+30     	; 0xbd4e <planet_transition+0x84>
	{
		LBMapSprite(8, get_emarald_map(index), 0);
    bd30:	8c 2d       	mov	r24, r12
    bd32:	0e 94 46 5e 	call	0xbc8c	; 0xbc8c <get_emarald_map>
    bd36:	40 e0       	ldi	r20, 0x00	; 0
    bd38:	bc 01       	movw	r22, r24
    bd3a:	88 e0       	ldi	r24, 0x08	; 8
    bd3c:	0e 94 44 4b 	call	0x9688	; 0x9688 <LBMapSprite>
		LBMoveSprite(8, 112, 48, 1, 1);
    bd40:	01 e0       	ldi	r16, 0x01	; 1
    bd42:	21 e0       	ldi	r18, 0x01	; 1
    bd44:	40 e3       	ldi	r20, 0x30	; 48
    bd46:	60 e7       	ldi	r22, 0x70	; 112
    bd48:	88 e0       	ldi	r24, 0x08	; 8
    bd4a:	0e 94 96 4b 	call	0x972c	; 0x972c <LBMoveSprite>
		StartSong(planetsong);
	}
}

void planet_transition(u8 index, char scroll, char atmosphere_height, char dy, u8 oy)
{
    bd4e:	d1 2c       	mov	r13, r1
		LBMoveSprite(8, 112, 48, 1, 1);
	}
	
	while (frame_counter < 255)
	{
		WaitVsync(1);
    bd50:	81 e0       	ldi	r24, 0x01	; 1
    bd52:	90 e0       	ldi	r25, 0x00	; 0
    bd54:	0e 94 45 49 	call	0x928a	; 0x928a <WaitVsync>
		LBMapSprite(0, LBGetNextFrame(&game.player.run), 0);
    bd58:	85 e3       	ldi	r24, 0x35	; 53
    bd5a:	9e e0       	ldi	r25, 0x0E	; 14
    bd5c:	0e 94 e2 49 	call	0x93c4	; 0x93c4 <LBGetNextFrame>
    bd60:	40 e0       	ldi	r20, 0x00	; 0
    bd62:	bc 01       	movw	r22, r24
    bd64:	80 e0       	ldi	r24, 0x00	; 0
    bd66:	0e 94 44 4b 	call	0x9688	; 0x9688 <LBMapSprite>
		LBMoveSprite(0, 104, 104, 4, 2);
    bd6a:	02 e0       	ldi	r16, 0x02	; 2
    bd6c:	24 e0       	ldi	r18, 0x04	; 4
    bd6e:	48 e6       	ldi	r20, 0x68	; 104
    bd70:	68 e6       	ldi	r22, 0x68	; 104
    bd72:	80 e0       	ldi	r24, 0x00	; 0
    bd74:	0e 94 96 4b 	call	0x972c	; 0x972c <LBMoveSprite>
		frame_counter++;
    bd78:	d3 94       	inc	r13
		if (frame_counter % 16 == 0) Screen.scrollY += scroll;
    bd7a:	8d 2d       	mov	r24, r13
    bd7c:	8f 70       	andi	r24, 0x0F	; 15
    bd7e:	29 f4       	brne	.+10     	; 0xbd8a <planet_transition+0xc0>
    bd80:	90 91 b3 0c 	lds	r25, 0x0CB3
    bd84:	9e 0d       	add	r25, r14
    bd86:	90 93 b3 0c 	sts	0x0CB3, r25
		animate_particles(dy, oy);
    bd8a:	6f 2d       	mov	r22, r15
    bd8c:	81 2f       	mov	r24, r17
    bd8e:	0e 94 14 5e 	call	0xbc28	; 0xbc28 <animate_particles>
		LBRotateSprites();
    bd92:	0e 94 d4 4b 	call	0x97a8	; 0x97a8 <LBRotateSprites>
	{
		LBMapSprite(8, get_emarald_map(index), 0);
		LBMoveSprite(8, 112, 48, 1, 1);
	}
	
	while (frame_counter < 255)
    bd96:	8f ef       	ldi	r24, 0xFF	; 255
    bd98:	d8 12       	cpse	r13, r24
    bd9a:	da cf       	rjmp	.-76     	; 0xbd50 <planet_transition+0x86>
		frame_counter++;
		if (frame_counter % 16 == 0) Screen.scrollY += scroll;
		animate_particles(dy, oy);
		LBRotateSprites();
	}
	game.current_screen = LEVEL;
    bd9c:	82 e0       	ldi	r24, 0x02	; 2
    bd9e:	80 93 ba 0d 	sts	0x0DBA, r24
	ClearVram();
    bda2:	0e 94 bd 3a 	call	0x757a	; 0x757a <ClearVram>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    bda6:	64 e1       	ldi	r22, 0x14	; 20
    bda8:	80 e0       	ldi	r24, 0x00	; 0
    bdaa:	0e 94 4c 5c 	call	0xb898	; 0xb898 <clear_sprites>
	LBRotateSprites();
    bdae:	0e 94 d4 4b 	call	0x97a8	; 0x97a8 <LBRotateSprites>
	fade_through();
    bdb2:	0e 94 6e 5c 	call	0xb8dc	; 0xb8dc <fade_through>
	game.level_score = 0;
    bdb6:	10 92 b1 0d 	sts	0x0DB1, r1
    bdba:	10 92 b0 0d 	sts	0x0DB0, r1
	load_level(index, true);
    bdbe:	61 e0       	ldi	r22, 0x01	; 1
    bdc0:	8c 2d       	mov	r24, r12
    bdc2:	0e 94 7e 5c 	call	0xb8fc	; 0xb8fc <load_level>
	init_player_state();
    bdc6:	0e 94 41 4c 	call	0x9882	; 0x9882 <init_player_state>
	init_enemy_state();
}
    bdca:	0f 90       	pop	r0
    bdcc:	df 91       	pop	r29
    bdce:	cf 91       	pop	r28
    bdd0:	1f 91       	pop	r17
    bdd2:	0f 91       	pop	r16
    bdd4:	ff 90       	pop	r15
    bdd6:	ef 90       	pop	r14
    bdd8:	df 90       	pop	r13
    bdda:	cf 90       	pop	r12
	LBRotateSprites();
	fade_through();
	game.level_score = 0;
	load_level(index, true);
	init_player_state();
	init_enemy_state();
    bddc:	0c 94 2d 4c 	jmp	0x985a	; 0x985a <init_enemy_state>

0000bde0 <intro>:
}


void intro()
{
    bde0:	0f 93       	push	r16
	fade_through();
    bde2:	0e 94 6e 5c 	call	0xb8dc	; 0xb8dc <fade_through>
	game.lives = LIVES;
    bde6:	e6 ea       	ldi	r30, 0xA6	; 166
    bde8:	fd e0       	ldi	r31, 0x0D	; 13
    bdea:	85 e0       	ldi	r24, 0x05	; 5
    bdec:	83 8b       	std	Z+19, r24	; 0x13
	game.score = 0;
    bdee:	11 86       	std	Z+9, r1	; 0x09
    bdf0:	10 86       	std	Z+8, r1	; 0x08
	game.level_score = 0;
    bdf2:	13 86       	std	Z+11, r1	; 0x0b
    bdf4:	12 86       	std	Z+10, r1	; 0x0a
	game.time = 0;
    bdf6:	15 86       	std	Z+13, r1	; 0x0d
    bdf8:	14 86       	std	Z+12, r1	; 0x0c
	StartSong(planetsong);
    bdfa:	8f e7       	ldi	r24, 0x7F	; 127
    bdfc:	92 e1       	ldi	r25, 0x12	; 18
    bdfe:	0e 94 b1 3d 	call	0x7b62	; 0x7b62 <StartSong>
	LBMapSprite(0, map_emerald_0, 0);
    be02:	40 e0       	ldi	r20, 0x00	; 0
    be04:	6e e1       	ldi	r22, 0x1E	; 30
    be06:	78 e3       	ldi	r23, 0x38	; 56
    be08:	80 e0       	ldi	r24, 0x00	; 0
    be0a:	0e 94 44 4b 	call	0x9688	; 0x9688 <LBMapSprite>
	LBMoveSprite(0, 80, 48, 1, 1);
    be0e:	01 e0       	ldi	r16, 0x01	; 1
    be10:	21 e0       	ldi	r18, 0x01	; 1
    be12:	40 e3       	ldi	r20, 0x30	; 48
    be14:	60 e5       	ldi	r22, 0x50	; 80
    be16:	80 e0       	ldi	r24, 0x00	; 0
    be18:	0e 94 96 4b 	call	0x972c	; 0x972c <LBMoveSprite>
	LBMapSprite(1, map_emerald_1, 0);
    be1c:	40 e0       	ldi	r20, 0x00	; 0
    be1e:	6b e1       	ldi	r22, 0x1B	; 27
    be20:	78 e3       	ldi	r23, 0x38	; 56
    be22:	81 e0       	ldi	r24, 0x01	; 1
    be24:	0e 94 44 4b 	call	0x9688	; 0x9688 <LBMapSprite>
	LBMoveSprite(1, 96, 48, 1, 1);
    be28:	21 e0       	ldi	r18, 0x01	; 1
    be2a:	40 e3       	ldi	r20, 0x30	; 48
    be2c:	60 e6       	ldi	r22, 0x60	; 96
    be2e:	81 e0       	ldi	r24, 0x01	; 1
    be30:	0e 94 96 4b 	call	0x972c	; 0x972c <LBMoveSprite>
	LBMapSprite(2, map_emerald_2, 0);
    be34:	40 e0       	ldi	r20, 0x00	; 0
    be36:	68 e1       	ldi	r22, 0x18	; 24
    be38:	78 e3       	ldi	r23, 0x38	; 56
    be3a:	82 e0       	ldi	r24, 0x02	; 2
    be3c:	0e 94 44 4b 	call	0x9688	; 0x9688 <LBMapSprite>
	LBMoveSprite(2, 112, 48, 1, 1);
    be40:	21 e0       	ldi	r18, 0x01	; 1
    be42:	40 e3       	ldi	r20, 0x30	; 48
    be44:	60 e7       	ldi	r22, 0x70	; 112
    be46:	82 e0       	ldi	r24, 0x02	; 2
    be48:	0e 94 96 4b 	call	0x972c	; 0x972c <LBMoveSprite>
	LBMapSprite(3, map_emerald_3, 0);
    be4c:	40 e0       	ldi	r20, 0x00	; 0
    be4e:	65 e1       	ldi	r22, 0x15	; 21
    be50:	78 e3       	ldi	r23, 0x38	; 56
    be52:	83 e0       	ldi	r24, 0x03	; 3
    be54:	0e 94 44 4b 	call	0x9688	; 0x9688 <LBMapSprite>
	LBMoveSprite(3, 128, 48, 1, 1);
    be58:	21 e0       	ldi	r18, 0x01	; 1
    be5a:	40 e3       	ldi	r20, 0x30	; 48
    be5c:	60 e8       	ldi	r22, 0x80	; 128
    be5e:	83 e0       	ldi	r24, 0x03	; 3
    be60:	0e 94 96 4b 	call	0x972c	; 0x972c <LBMoveSprite>
	LBMapSprite(4, map_emerald_4, 0);
    be64:	40 e0       	ldi	r20, 0x00	; 0
    be66:	62 e1       	ldi	r22, 0x12	; 18
    be68:	78 e3       	ldi	r23, 0x38	; 56
    be6a:	84 e0       	ldi	r24, 0x04	; 4
    be6c:	0e 94 44 4b 	call	0x9688	; 0x9688 <LBMapSprite>
	LBMoveSprite(4, 144, 48, 1, 1);
    be70:	21 e0       	ldi	r18, 0x01	; 1
    be72:	40 e3       	ldi	r20, 0x30	; 48
    be74:	60 e9       	ldi	r22, 0x90	; 144
    be76:	84 e0       	ldi	r24, 0x04	; 4
    be78:	0e 94 96 4b 	call	0x972c	; 0x972c <LBMoveSprite>
	LBRotateSprites();
    be7c:	0e 94 d4 4b 	call	0x97a8	; 0x97a8 <LBRotateSprites>
	stream_dialogue((const char*) strIntro, 12);
    be80:	6c e0       	ldi	r22, 0x0C	; 12
    be82:	8f e7       	ldi	r24, 0x7F	; 127
    be84:	9a e0       	ldi	r25, 0x0A	; 10
    be86:	0e 94 ae 5d 	call	0xbb5c	; 0xbb5c <stream_dialogue>
	LBWaitSeconds(1);
    be8a:	81 e0       	ldi	r24, 0x01	; 1
    be8c:	0e 94 35 4b 	call	0x966a	; 0x966a <LBWaitSeconds>
	planet_transition(0, 1, 28, -3, 199);
    be90:	07 ec       	ldi	r16, 0xC7	; 199
    be92:	2d ef       	ldi	r18, 0xFD	; 253
    be94:	4c e1       	ldi	r20, 0x1C	; 28
    be96:	61 e0       	ldi	r22, 0x01	; 1
    be98:	80 e0       	ldi	r24, 0x00	; 0
    be9a:	0e 94 65 5e 	call	0xbcca	; 0xbcca <planet_transition>
}
    be9e:	0f 91       	pop	r16
    bea0:	08 95       	ret

0000bea2 <load_splash>:

void load_splash()
{
	fade_through();
    bea2:	0e 94 6e 5c 	call	0xb8dc	; 0xb8dc <fade_through>
	Screen.scrollX = 0;
    bea6:	ef ea       	ldi	r30, 0xAF	; 175
    bea8:	fc e0       	ldi	r31, 0x0C	; 12
    beaa:	13 82       	std	Z+3, r1	; 0x03
	Screen.scrollY = 0;
    beac:	14 82       	std	Z+4, r1	; 0x04
	Screen.scrollHeight = 32;
    beae:	80 e2       	ldi	r24, 0x20	; 32
    beb0:	85 83       	std	Z+5, r24	; 0x05
	Screen.overlayHeight = 0;
    beb2:	10 82       	st	Z, r1
	game.current_screen = SPLASH;
    beb4:	e6 ea       	ldi	r30, 0xA6	; 166
    beb6:	fd e0       	ldi	r31, 0x0D	; 13
    beb8:	14 8a       	std	Z+20, r1	; 0x14
	game.selection = START_SELECTED;
    beba:	12 8e       	std	Z+26, r1	; 0x1a
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    bebc:	64 e1       	ldi	r22, 0x14	; 20
    bebe:	80 e0       	ldi	r24, 0x00	; 0
    bec0:	0e 94 4c 5c 	call	0xb898	; 0xb898 <clear_sprites>
	LBRotateSprites();
    bec4:	0e 94 d4 4b 	call	0x97a8	; 0x97a8 <LBRotateSprites>
	LBPrint(8, 15, (char*) str1Player);
    bec8:	4c ea       	ldi	r20, 0xAC	; 172
    beca:	5b e0       	ldi	r21, 0x0B	; 11
    becc:	6f e0       	ldi	r22, 0x0F	; 15
    bece:	88 e0       	ldi	r24, 0x08	; 8
    bed0:	0e 94 73 4a 	call	0x94e6	; 0x94e6 <LBPrint>
	LBPrint(8, 16, (char*) strHighScores);
    bed4:	40 ea       	ldi	r20, 0xA0	; 160
    bed6:	5b e0       	ldi	r21, 0x0B	; 11
    bed8:	60 e1       	ldi	r22, 0x10	; 16
    beda:	88 e0       	ldi	r24, 0x08	; 8
    bedc:	0e 94 73 4a 	call	0x94e6	; 0x94e6 <LBPrint>
	LBPrint(4, 21, (char*) strCopyright);
    bee0:	4a ec       	ldi	r20, 0xCA	; 202
    bee2:	5b e0       	ldi	r21, 0x0B	; 11
    bee4:	65 e1       	ldi	r22, 0x15	; 21
    bee6:	84 e0       	ldi	r24, 0x04	; 4
    bee8:	0e 94 73 4a 	call	0x94e6	; 0x94e6 <LBPrint>
	LBPrint(3, 26, (char*) strMusic);
    beec:	42 eb       	ldi	r20, 0xB2	; 178
    beee:	5b e0       	ldi	r21, 0x0B	; 11
    bef0:	6a e1       	ldi	r22, 0x1A	; 26
    bef2:	83 e0       	ldi	r24, 0x03	; 3
    bef4:	0e 94 73 4a 	call	0x94e6	; 0x94e6 <LBPrint>
	DrawMap2(6, 5, map_splash);
    bef8:	41 ee       	ldi	r20, 0xE1	; 225
    befa:	5b e5       	ldi	r21, 0x5B	; 91
    befc:	65 e0       	ldi	r22, 0x05	; 5
    befe:	86 e0       	ldi	r24, 0x06	; 6
    bf00:	0e 94 dc 48 	call	0x91b8	; 0x91b8 <DrawMap>
	LBMapSprite(0, map_right_arrow, 0);
    bf04:	40 e0       	ldi	r20, 0x00	; 0
    bf06:	63 e3       	ldi	r22, 0x33	; 51
    bf08:	78 e3       	ldi	r23, 0x38	; 56
    bf0a:	80 e0       	ldi	r24, 0x00	; 0
    bf0c:	0c 94 44 4b 	jmp	0x9688	; 0x9688 <LBMapSprite>

0000bf10 <load_high_scores>:
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
	}
}

void load_high_scores()
{
    bf10:	2f 92       	push	r2
    bf12:	3f 92       	push	r3
    bf14:	5f 92       	push	r5
    bf16:	6f 92       	push	r6
    bf18:	7f 92       	push	r7
    bf1a:	8f 92       	push	r8
    bf1c:	9f 92       	push	r9
    bf1e:	af 92       	push	r10
    bf20:	bf 92       	push	r11
    bf22:	cf 92       	push	r12
    bf24:	df 92       	push	r13
    bf26:	ef 92       	push	r14
    bf28:	ff 92       	push	r15
    bf2a:	0f 93       	push	r16
    bf2c:	1f 93       	push	r17
    bf2e:	cf 93       	push	r28
    bf30:	df 93       	push	r29
	u16 score = 0;
	u8 ypos = 7;
	
	game.current_screen = HIGH_SCORES;
    bf32:	81 e0       	ldi	r24, 0x01	; 1
    bf34:	80 93 ba 0d 	sts	0x0DBA, r24
	game.high_score_index = -1;
    bf38:	8f ef       	ldi	r24, 0xFF	; 255
    bf3a:	80 93 b8 0d 	sts	0x0DB8, r24
	fade_through();
    bf3e:	0e 94 6e 5c 	call	0xb8dc	; 0xb8dc <fade_through>
	Screen.scrollX = 0;
    bf42:	10 92 b2 0c 	sts	0x0CB2, r1
	Screen.scrollY = 0;
    bf46:	10 92 b3 0c 	sts	0x0CB3, r1
	Screen.scrollHeight = 32;
    bf4a:	80 e2       	ldi	r24, 0x20	; 32
    bf4c:	80 93 b4 0c 	sts	0x0CB4, r24
	Screen.overlayHeight = 0;
    bf50:	10 92 af 0c 	sts	0x0CAF, r1
	load_eeprom(&scores);
    bf54:	86 e8       	ldi	r24, 0x86	; 134
    bf56:	9d e0       	ldi	r25, 0x0D	; 13
    bf58:	0e 94 3f 4e 	call	0x9c7e	; 0x9c7e <load_eeprom>
	
	LBPrint(9, 3, (char*) strHighScores);
    bf5c:	40 ea       	ldi	r20, 0xA0	; 160
    bf5e:	5b e0       	ldi	r21, 0x0B	; 11
    bf60:	63 e0       	ldi	r22, 0x03	; 3
    bf62:	89 e0       	ldi	r24, 0x09	; 9
    bf64:	0e 94 73 4a 	call	0x94e6	; 0x94e6 <LBPrint>
	
	LBMapSprite(0, map_emerald_0, 0);
    bf68:	40 e0       	ldi	r20, 0x00	; 0
    bf6a:	6e e1       	ldi	r22, 0x1E	; 30
    bf6c:	78 e3       	ldi	r23, 0x38	; 56
    bf6e:	80 e0       	ldi	r24, 0x00	; 0
    bf70:	0e 94 44 4b 	call	0x9688	; 0x9688 <LBMapSprite>
	LBMapSprite(1, map_emerald_1, 0);
    bf74:	40 e0       	ldi	r20, 0x00	; 0
    bf76:	6b e1       	ldi	r22, 0x1B	; 27
    bf78:	78 e3       	ldi	r23, 0x38	; 56
    bf7a:	81 e0       	ldi	r24, 0x01	; 1
    bf7c:	0e 94 44 4b 	call	0x9688	; 0x9688 <LBMapSprite>
	LBMoveSprite(0, 7*8, 3*8, 1, 1);
    bf80:	01 e0       	ldi	r16, 0x01	; 1
    bf82:	21 e0       	ldi	r18, 0x01	; 1
    bf84:	48 e1       	ldi	r20, 0x18	; 24
    bf86:	68 e3       	ldi	r22, 0x38	; 56
    bf88:	80 e0       	ldi	r24, 0x00	; 0
    bf8a:	0e 94 96 4b 	call	0x972c	; 0x972c <LBMoveSprite>
	LBMoveSprite(1, 21*8, 3*8, 1, 1);
    bf8e:	21 e0       	ldi	r18, 0x01	; 1
    bf90:	48 e1       	ldi	r20, 0x18	; 24
    bf92:	68 ea       	ldi	r22, 0xA8	; 168
    bf94:	81 e0       	ldi	r24, 0x01	; 1
    bf96:	0e 94 96 4b 	call	0x972c	; 0x972c <LBMoveSprite>
    bf9a:	88 e8       	ldi	r24, 0x88	; 136
    bf9c:	a8 2e       	mov	r10, r24
    bf9e:	8d e0       	ldi	r24, 0x0D	; 13
    bfa0:	b8 2e       	mov	r11, r24
    bfa2:	99 e8       	ldi	r25, 0x89	; 137
    bfa4:	c9 2e       	mov	r12, r25
    bfa6:	9d e0       	ldi	r25, 0x0D	; 13
    bfa8:	d9 2e       	mov	r13, r25
    bfaa:	2a e8       	ldi	r18, 0x8A	; 138
    bfac:	82 2e       	mov	r8, r18
    bfae:	2d e0       	ldi	r18, 0x0D	; 13
    bfb0:	92 2e       	mov	r9, r18
    bfb2:	74 01       	movw	r14, r8
    bfb4:	d0 e3       	ldi	r29, 0x30	; 48
}

void load_high_scores()
{
	u16 score = 0;
	u8 ypos = 7;
    bfb6:	c7 e0       	ldi	r28, 0x07	; 7
	LBMoveSprite(0, 7*8, 3*8, 1, 1);
	LBMoveSprite(1, 21*8, 3*8, 1, 1);
	
	for (u8 i = 0; i < 30; i += 5)
	{
		LBPrintByte(9, ypos, i/5+1, false);
    bfb8:	35 e0       	ldi	r19, 0x05	; 5
    bfba:	53 2e       	mov	r5, r19
    bfbc:	41 ea       	ldi	r20, 0xA1	; 161
    bfbe:	64 2e       	mov	r6, r20
    bfc0:	4d e0       	ldi	r20, 0x0D	; 13
    bfc2:	74 2e       	mov	r7, r20
			// Shift scores down
			for (u8 j = 25; j > i; j -= 5)
			{
				memcpy(&(scores.data[j]), &(scores.data[j-5]), 5);
			}
			scores.data[i] = 'A';
    bfc4:	11 e4       	ldi	r17, 0x41	; 65
    bfc6:	0e 2d       	mov	r16, r14
    bfc8:	08 19       	sub	r16, r8
	LBMoveSprite(0, 7*8, 3*8, 1, 1);
	LBMoveSprite(1, 21*8, 3*8, 1, 1);
	
	for (u8 i = 0; i < 30; i += 5)
	{
		LBPrintByte(9, ypos, i/5+1, false);
    bfca:	80 2f       	mov	r24, r16
    bfcc:	65 2d       	mov	r22, r5
    bfce:	0e 94 00 68 	call	0xd000	; 0xd000 <__udivmodqi4>
    bfd2:	41 e0       	ldi	r20, 0x01	; 1
    bfd4:	48 0f       	add	r20, r24
    bfd6:	20 e0       	ldi	r18, 0x00	; 0
    bfd8:	6c 2f       	mov	r22, r28
    bfda:	89 e0       	ldi	r24, 0x09	; 9
    bfdc:	0e 94 8f 4a 	call	0x951e	; 0x951e <LBPrintByte>
		LBPrintChar(10, ypos, ' ');
    bfe0:	40 e2       	ldi	r20, 0x20	; 32
    bfe2:	6c 2f       	mov	r22, r28
    bfe4:	8a e0       	ldi	r24, 0x0A	; 10
    bfe6:	0e 94 53 4a 	call	0x94a6	; 0x94a6 <LBPrintChar>
		LBPrintChar(11, ypos, scores.data[i]);
    bfea:	f5 01       	movw	r30, r10
    bfec:	40 81       	ld	r20, Z
    bfee:	6c 2f       	mov	r22, r28
    bff0:	8b e0       	ldi	r24, 0x0B	; 11
    bff2:	0e 94 53 4a 	call	0x94a6	; 0x94a6 <LBPrintChar>
		LBPrintChar(12, ypos, scores.data[i+1]);
    bff6:	f6 01       	movw	r30, r12
    bff8:	40 81       	ld	r20, Z
    bffa:	6c 2f       	mov	r22, r28
    bffc:	8c e0       	ldi	r24, 0x0C	; 12
    bffe:	0e 94 53 4a 	call	0x94a6	; 0x94a6 <LBPrintChar>
		LBPrintChar(13, ypos, scores.data[i+2]);
    c002:	f7 01       	movw	r30, r14
    c004:	40 81       	ld	r20, Z
    c006:	6c 2f       	mov	r22, r28
    c008:	8d e0       	ldi	r24, 0x0D	; 13
    c00a:	0e 94 53 4a 	call	0x94a6	; 0x94a6 <LBPrintChar>
		LBPrintChar(14, ypos, ' ');
    c00e:	40 e2       	ldi	r20, 0x20	; 32
    c010:	6c 2f       	mov	r22, r28
    c012:	8e e0       	ldi	r24, 0x0E	; 14
    c014:	0e 94 53 4a 	call	0x94a6	; 0x94a6 <LBPrintChar>
		memcpy(&score, &(scores.data[i+3]), 2);
    c018:	f7 01       	movw	r30, r14
    c01a:	21 80       	ldd	r2, Z+1	; 0x01
    c01c:	32 80       	ldd	r3, Z+2	; 0x02
		LBPrintInt(19, ypos, score, true);
    c01e:	21 e0       	ldi	r18, 0x01	; 1
    c020:	a1 01       	movw	r20, r2
    c022:	6c 2f       	mov	r22, r28
    c024:	83 e1       	ldi	r24, 0x13	; 19
    c026:	0e 94 c0 4a 	call	0x9580	; 0x9580 <LBPrintInt>
		
		if (game.score > score && game.high_score_index == -1)
    c02a:	20 91 ae 0d 	lds	r18, 0x0DAE
    c02e:	30 91 af 0d 	lds	r19, 0x0DAF
    c032:	22 16       	cp	r2, r18
    c034:	33 06       	cpc	r3, r19
    c036:	08 f0       	brcs	.+2      	; 0xc03a <load_high_scores+0x12a>
    c038:	55 c0       	rjmp	.+170    	; 0xc0e4 <load_high_scores+0x1d4>
    c03a:	80 91 b8 0d 	lds	r24, 0x0DB8
    c03e:	8f 3f       	cpi	r24, 0xFF	; 255
    c040:	09 f0       	breq	.+2      	; 0xc044 <load_high_scores+0x134>
    c042:	50 c0       	rjmp	.+160    	; 0xc0e4 <load_high_scores+0x1d4>
    c044:	a1 ea       	ldi	r26, 0xA1	; 161
    c046:	bd e0       	ldi	r27, 0x0D	; 13
    c048:	cd 01       	movw	r24, r26
    c04a:	05 97       	sbiw	r24, 0x05	; 5
    c04c:	4e e1       	ldi	r20, 0x1E	; 30
    c04e:	48 0f       	add	r20, r24
    c050:	46 19       	sub	r20, r6
		{
			// Shift scores down
			for (u8 j = 25; j > i; j -= 5)
    c052:	04 17       	cp	r16, r20
    c054:	40 f4       	brcc	.+16     	; 0xc066 <load_high_scores+0x156>
			{
				memcpy(&(scores.data[j]), &(scores.data[j-5]), 5);
    c056:	fc 01       	movw	r30, r24
    c058:	45 2d       	mov	r20, r5
    c05a:	01 90       	ld	r0, Z+
    c05c:	0d 92       	st	X+, r0
    c05e:	4a 95       	dec	r20
    c060:	e1 f7       	brne	.-8      	; 0xc05a <load_high_scores+0x14a>
    c062:	dc 01       	movw	r26, r24
    c064:	f1 cf       	rjmp	.-30     	; 0xc048 <load_high_scores+0x138>
			}
			scores.data[i] = 'A';
    c066:	f5 01       	movw	r30, r10
    c068:	10 83       	st	Z, r17
			scores.data[i+1] = 'A';
    c06a:	f6 01       	movw	r30, r12
    c06c:	10 83       	st	Z, r17
			scores.data[i+2] = 'A';
    c06e:	f7 01       	movw	r30, r14
    c070:	10 83       	st	Z, r17
			memcpy(&(scores.data[i+3]), &game.score, 2);
    c072:	32 83       	std	Z+2, r19	; 0x02
    c074:	21 83       	std	Z+1, r18	; 0x01
			LBPrintChar(11, ypos, scores.data[i]);
    c076:	f5 01       	movw	r30, r10
    c078:	40 81       	ld	r20, Z
    c07a:	6c 2f       	mov	r22, r28
    c07c:	8b e0       	ldi	r24, 0x0B	; 11
    c07e:	0e 94 53 4a 	call	0x94a6	; 0x94a6 <LBPrintChar>
			LBPrintChar(12, ypos, scores.data[i+1]);
    c082:	f6 01       	movw	r30, r12
    c084:	40 81       	ld	r20, Z
    c086:	6c 2f       	mov	r22, r28
    c088:	8c e0       	ldi	r24, 0x0C	; 12
    c08a:	0e 94 53 4a 	call	0x94a6	; 0x94a6 <LBPrintChar>
			LBPrintChar(13, ypos, scores.data[i+2]);
    c08e:	f7 01       	movw	r30, r14
    c090:	40 81       	ld	r20, Z
    c092:	6c 2f       	mov	r22, r28
    c094:	8d e0       	ldi	r24, 0x0D	; 13
    c096:	0e 94 53 4a 	call	0x94a6	; 0x94a6 <LBPrintChar>
			LBPrintInt(19, ypos, game.score, true);
    c09a:	40 91 ae 0d 	lds	r20, 0x0DAE
    c09e:	50 91 af 0d 	lds	r21, 0x0DAF
    c0a2:	21 e0       	ldi	r18, 0x01	; 1
    c0a4:	6c 2f       	mov	r22, r28
    c0a6:	83 e1       	ldi	r24, 0x13	; 19
    c0a8:	0e 94 c0 4a 	call	0x9580	; 0x9580 <LBPrintInt>
			game.high_score_index = i;
    c0ac:	00 93 b8 0d 	sts	0x0DB8, r16
			LBMapSprite(2, map_down_arrow, 0);
    c0b0:	40 e0       	ldi	r20, 0x00	; 0
    c0b2:	60 e3       	ldi	r22, 0x30	; 48
    c0b4:	78 e3       	ldi	r23, 0x38	; 56
    c0b6:	82 e0       	ldi	r24, 0x02	; 2
    c0b8:	0e 94 44 4b 	call	0x9688	; 0x9688 <LBMapSprite>
			LBMapSprite(3, map_up_arrow, 0);
    c0bc:	40 e0       	ldi	r20, 0x00	; 0
    c0be:	6d e2       	ldi	r22, 0x2D	; 45
    c0c0:	78 e3       	ldi	r23, 0x38	; 56
    c0c2:	83 e0       	ldi	r24, 0x03	; 3
    c0c4:	0e 94 44 4b 	call	0x9688	; 0x9688 <LBMapSprite>
			LBMoveSprite(2, 11*8, (ypos-1)*8, 1, 1);
    c0c8:	01 e0       	ldi	r16, 0x01	; 1
    c0ca:	21 e0       	ldi	r18, 0x01	; 1
    c0cc:	4d 2f       	mov	r20, r29
    c0ce:	68 e5       	ldi	r22, 0x58	; 88
    c0d0:	82 e0       	ldi	r24, 0x02	; 2
    c0d2:	0e 94 96 4b 	call	0x972c	; 0x972c <LBMoveSprite>
			LBMoveSprite(3, 11*8, (ypos+1)*8, 1, 1);
    c0d6:	21 e0       	ldi	r18, 0x01	; 1
    c0d8:	40 e1       	ldi	r20, 0x10	; 16
    c0da:	4d 0f       	add	r20, r29
    c0dc:	68 e5       	ldi	r22, 0x58	; 88
    c0de:	83 e0       	ldi	r24, 0x03	; 3
    c0e0:	0e 94 96 4b 	call	0x972c	; 0x972c <LBMoveSprite>
		}
		
		ypos += 2;
    c0e4:	ce 5f       	subi	r28, 0xFE	; 254
    c0e6:	f5 e0       	ldi	r31, 0x05	; 5
    c0e8:	af 0e       	add	r10, r31
    c0ea:	b1 1c       	adc	r11, r1
    c0ec:	85 e0       	ldi	r24, 0x05	; 5
    c0ee:	c8 0e       	add	r12, r24
    c0f0:	d1 1c       	adc	r13, r1
    c0f2:	e5 e0       	ldi	r30, 0x05	; 5
    c0f4:	ee 0e       	add	r14, r30
    c0f6:	f1 1c       	adc	r15, r1
    c0f8:	d0 5f       	subi	r29, 0xF0	; 240
	LBMapSprite(0, map_emerald_0, 0);
	LBMapSprite(1, map_emerald_1, 0);
	LBMoveSprite(0, 7*8, 3*8, 1, 1);
	LBMoveSprite(1, 21*8, 3*8, 1, 1);
	
	for (u8 i = 0; i < 30; i += 5)
    c0fa:	c3 31       	cpi	r28, 0x13	; 19
    c0fc:	09 f0       	breq	.+2      	; 0xc100 <load_high_scores+0x1f0>
    c0fe:	63 cf       	rjmp	.-314    	; 0xbfc6 <load_high_scores+0xb6>
		}
		
		ypos += 2;
	}
	
	LBPrint(9, 22, (char*) strMainMenu);
    c100:	47 e7       	ldi	r20, 0x77	; 119
    c102:	5b e0       	ldi	r21, 0x0B	; 11
    c104:	66 e1       	ldi	r22, 0x16	; 22
    c106:	89 e0       	ldi	r24, 0x09	; 9
}
    c108:	df 91       	pop	r29
    c10a:	cf 91       	pop	r28
    c10c:	1f 91       	pop	r17
    c10e:	0f 91       	pop	r16
    c110:	ff 90       	pop	r15
    c112:	ef 90       	pop	r14
    c114:	df 90       	pop	r13
    c116:	cf 90       	pop	r12
    c118:	bf 90       	pop	r11
    c11a:	af 90       	pop	r10
    c11c:	9f 90       	pop	r9
    c11e:	8f 90       	pop	r8
    c120:	7f 90       	pop	r7
    c122:	6f 90       	pop	r6
    c124:	5f 90       	pop	r5
    c126:	3f 90       	pop	r3
    c128:	2f 90       	pop	r2
		}
		
		ypos += 2;
	}
	
	LBPrint(9, 22, (char*) strMainMenu);
    c12a:	0c 94 73 4a 	jmp	0x94e6	; 0x94e6 <LBPrint>

0000c12e <exit_game>:
	}
}

void exit_game()
{
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    c12e:	64 e1       	ldi	r22, 0x14	; 20
    c130:	80 e0       	ldi	r24, 0x00	; 0
    c132:	0e 94 4c 5c 	call	0xb898	; 0xb898 <clear_sprites>
	LBRotateSprites();
    c136:	0e 94 d4 4b 	call	0x97a8	; 0x97a8 <LBRotateSprites>
	init_player_state();
    c13a:	0e 94 41 4c 	call	0x9882	; 0x9882 <init_player_state>
	init_enemy_state();
    c13e:	0e 94 2d 4c 	call	0x985a	; 0x985a <init_enemy_state>
	StopSong();
    c142:	0e 94 da 3d 	call	0x7bb4	; 0x7bb4 <StopSong>
	load_high_scores();
    c146:	0c 94 88 5f 	jmp	0xbf10	; 0xbf10 <load_high_scores>

0000c14a <update_splash>:
	DrawMap2(6, 5, map_splash);
	LBMapSprite(0, map_right_arrow, 0);
}

void update_splash()
{
    c14a:	0f 93       	push	r16
    c14c:	cf 93       	push	r28
	if (game.joypadState.pressed & BTN_DOWN && game.selection == START_SELECTED)
    c14e:	80 91 9f 0f 	lds	r24, 0x0F9F
    c152:	c0 91 c0 0d 	lds	r28, 0x0DC0
    c156:	85 ff       	sbrs	r24, 5
    c158:	06 c0       	rjmp	.+12     	; 0xc166 <update_splash+0x1c>
    c15a:	c1 11       	cpse	r28, r1
    c15c:	04 c0       	rjmp	.+8      	; 0xc166 <update_splash+0x1c>
	{
		game.selection = HIGH_SCORES_SELECTED;
    c15e:	81 e0       	ldi	r24, 0x01	; 1
    c160:	80 93 c0 0d 	sts	0x0DC0, r24
    c164:	06 c0       	rjmp	.+12     	; 0xc172 <update_splash+0x28>
		SFX_NAVIGATE;
	}
	else if (game.joypadState.pressed & BTN_UP && game.selection == HIGH_SCORES_SELECTED)
    c166:	84 ff       	sbrs	r24, 4
    c168:	0a c0       	rjmp	.+20     	; 0xc17e <update_splash+0x34>
    c16a:	c1 30       	cpi	r28, 0x01	; 1
    c16c:	41 f4       	brne	.+16     	; 0xc17e <update_splash+0x34>
	{
		game.selection = START_SELECTED;
    c16e:	10 92 c0 0d 	sts	0x0DC0, r1
		SFX_NAVIGATE;
    c172:	41 e0       	ldi	r20, 0x01	; 1
    c174:	6f ef       	ldi	r22, 0xFF	; 255
    c176:	82 e0       	ldi	r24, 0x02	; 2
    c178:	0e 94 9c 3e 	call	0x7d38	; 0x7d38 <TriggerFx>
    c17c:	1c c0       	rjmp	.+56     	; 0xc1b6 <update_splash+0x6c>
	}
	else if (select_pressed(&game.joypadState) && game.selection == START_SELECTED)
    c17e:	8f e9       	ldi	r24, 0x9F	; 159
    c180:	9f e0       	ldi	r25, 0x0F	; 15
    c182:	0e 94 a4 5d 	call	0xbb48	; 0xbb48 <select_pressed>
    c186:	88 23       	and	r24, r24
    c188:	b1 f0       	breq	.+44     	; 0xc1b6 <update_splash+0x6c>
    c18a:	c1 11       	cpse	r28, r1
    c18c:	09 c0       	rjmp	.+18     	; 0xc1a0 <update_splash+0x56>
	{
		SFX_NAVIGATE;
    c18e:	41 e0       	ldi	r20, 0x01	; 1
    c190:	6f ef       	ldi	r22, 0xFF	; 255
    c192:	82 e0       	ldi	r24, 0x02	; 2
    c194:	0e 94 9c 3e 	call	0x7d38	; 0x7d38 <TriggerFx>
	}
	else
	{
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
	}
}
    c198:	cf 91       	pop	r28
    c19a:	0f 91       	pop	r16
		SFX_NAVIGATE;
	}
	else if (select_pressed(&game.joypadState) && game.selection == START_SELECTED)
	{
		SFX_NAVIGATE;
		intro();
    c19c:	0c 94 f0 5e 	jmp	0xbde0	; 0xbde0 <intro>
		return;
	}
	else if (select_pressed(&game.joypadState) && game.selection == HIGH_SCORES_SELECTED)
    c1a0:	c1 30       	cpi	r28, 0x01	; 1
    c1a2:	49 f4       	brne	.+18     	; 0xc1b6 <update_splash+0x6c>
	{
		SFX_NAVIGATE;
    c1a4:	41 e0       	ldi	r20, 0x01	; 1
    c1a6:	6f ef       	ldi	r22, 0xFF	; 255
    c1a8:	82 e0       	ldi	r24, 0x02	; 2
    c1aa:	0e 94 9c 3e 	call	0x7d38	; 0x7d38 <TriggerFx>
	}
	else
	{
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
	}
}
    c1ae:	cf 91       	pop	r28
    c1b0:	0f 91       	pop	r16
		return;
	}
	else if (select_pressed(&game.joypadState) && game.selection == HIGH_SCORES_SELECTED)
	{
		SFX_NAVIGATE;
		load_high_scores();
    c1b2:	0c 94 88 5f 	jmp	0xbf10	; 0xbf10 <load_high_scores>
		return;
	}
	
	if (game.selection == START_SELECTED)
    c1b6:	80 91 c0 0d 	lds	r24, 0x0DC0
	{
		LBMoveSprite(0, 7*8, 15*8, 1, 1);
    c1ba:	01 e0       	ldi	r16, 0x01	; 1
    c1bc:	21 e0       	ldi	r18, 0x01	; 1
		SFX_NAVIGATE;
		load_high_scores();
		return;
	}
	
	if (game.selection == START_SELECTED)
    c1be:	81 11       	cpse	r24, r1
    c1c0:	03 c0       	rjmp	.+6      	; 0xc1c8 <update_splash+0x7e>
	{
		LBMoveSprite(0, 7*8, 15*8, 1, 1);
    c1c2:	48 e7       	ldi	r20, 0x78	; 120
    c1c4:	68 e3       	ldi	r22, 0x38	; 56
    c1c6:	03 c0       	rjmp	.+6      	; 0xc1ce <update_splash+0x84>
	}
	else
	{
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
    c1c8:	40 e8       	ldi	r20, 0x80	; 128
    c1ca:	68 e3       	ldi	r22, 0x38	; 56
    c1cc:	80 e0       	ldi	r24, 0x00	; 0
    c1ce:	0e 94 96 4b 	call	0x972c	; 0x972c <LBMoveSprite>
	}
}
    c1d2:	cf 91       	pop	r28
    c1d4:	0f 91       	pop	r16
    c1d6:	08 95       	ret

0000c1d8 <update_high_scores>:
	
	LBPrint(9, 22, (char*) strMainMenu);
}

void update_high_scores()
{
    c1d8:	0f 93       	push	r16
	if (game.joypadState.pressed & BTN_X)
    c1da:	80 91 9f 0f 	lds	r24, 0x0F9F
    c1de:	90 91 a0 0f 	lds	r25, 0x0FA0
    c1e2:	91 ff       	sbrs	r25, 1
    c1e4:	12 c0       	rjmp	.+36     	; 0xc20a <update_high_scores+0x32>
	{
		SFX_NAVIGATE;
    c1e6:	41 e0       	ldi	r20, 0x01	; 1
    c1e8:	6f ef       	ldi	r22, 0xFF	; 255
    c1ea:	82 e0       	ldi	r24, 0x02	; 2
    c1ec:	0e 94 9c 3e 	call	0x7d38	; 0x7d38 <TriggerFx>
		game.high_score_index = -1;
    c1f0:	8f ef       	ldi	r24, 0xFF	; 255
    c1f2:	80 93 b8 0d 	sts	0x0DB8, r24
		game.score = 0;
    c1f6:	10 92 af 0d 	sts	0x0DAF, r1
    c1fa:	10 92 ae 0d 	sts	0x0DAE, r1
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    c1fe:	86 e8       	ldi	r24, 0x86	; 134
    c200:	9d e0       	ldi	r25, 0x0D	; 13
    c202:	0e 94 38 3c 	call	0x7870	; 0x7870 <EepromWriteBlock>
	{
		SFX_NAVIGATE;
		game.high_score_index = -1;
		game.score = 0;
		save_eeprom(&scores);
		load_splash();
    c206:	0e 94 51 5f 	call	0xbea2	; 0xbea2 <load_splash>
	}
	
	if (game.high_score_index != -1)
    c20a:	30 91 b8 0d 	lds	r19, 0x0DB8
    c20e:	3f 3f       	cpi	r19, 0xFF	; 255
    c210:	09 f4       	brne	.+2      	; 0xc214 <update_high_scores+0x3c>
    c212:	7e c0       	rjmp	.+252    	; 0xc310 <update_high_scores+0x138>
	{
		if (game.joypadState.pressed & BTN_RIGHT && game.high_score_index % 5 != 2)
    c214:	20 91 9f 0f 	lds	r18, 0x0F9F
    c218:	27 ff       	sbrs	r18, 7
    c21a:	1e c0       	rjmp	.+60     	; 0xc258 <update_high_scores+0x80>
    c21c:	83 2f       	mov	r24, r19
    c21e:	65 e0       	ldi	r22, 0x05	; 5
    c220:	0e 94 0c 68 	call	0xd018	; 0xd018 <__divmodqi4>
    c224:	92 30       	cpi	r25, 0x02	; 2
    c226:	c1 f0       	breq	.+48     	; 0xc258 <update_high_scores+0x80>
		{
			SFX_NAVIGATE;
    c228:	41 e0       	ldi	r20, 0x01	; 1
    c22a:	6f ef       	ldi	r22, 0xFF	; 255
    c22c:	82 e0       	ldi	r24, 0x02	; 2
    c22e:	0e 94 9c 3e 	call	0x7d38	; 0x7d38 <TriggerFx>
			game.high_score_index++;
    c232:	80 91 b8 0d 	lds	r24, 0x0DB8
    c236:	8f 5f       	subi	r24, 0xFF	; 255
    c238:	80 93 b8 0d 	sts	0x0DB8, r24
			LBMoveSprite(2, extendedSprites[2].x+8, extendedSprites[2].y, 1, 1);
    c23c:	60 91 b8 0f 	lds	r22, 0x0FB8
    c240:	68 5f       	subi	r22, 0xF8	; 248
    c242:	01 e0       	ldi	r16, 0x01	; 1
    c244:	21 e0       	ldi	r18, 0x01	; 1
    c246:	40 91 b9 0f 	lds	r20, 0x0FB9
    c24a:	82 e0       	ldi	r24, 0x02	; 2
    c24c:	0e 94 96 4b 	call	0x972c	; 0x972c <LBMoveSprite>
			LBMoveSprite(3, extendedSprites[3].x+8, extendedSprites[3].y, 1, 1);
    c250:	60 91 bc 0f 	lds	r22, 0x0FBC
    c254:	68 5f       	subi	r22, 0xF8	; 248
    c256:	1f c0       	rjmp	.+62     	; 0xc296 <update_high_scores+0xbe>
		}
		else if (game.joypadState.pressed & BTN_LEFT && game.high_score_index % 5 != 0)
    c258:	26 ff       	sbrs	r18, 6
    c25a:	24 c0       	rjmp	.+72     	; 0xc2a4 <update_high_scores+0xcc>
    c25c:	83 2f       	mov	r24, r19
    c25e:	65 e0       	ldi	r22, 0x05	; 5
    c260:	0e 94 0c 68 	call	0xd018	; 0xd018 <__divmodqi4>
    c264:	99 23       	and	r25, r25
    c266:	f1 f0       	breq	.+60     	; 0xc2a4 <update_high_scores+0xcc>
		{
			SFX_NAVIGATE;
    c268:	41 e0       	ldi	r20, 0x01	; 1
    c26a:	6f ef       	ldi	r22, 0xFF	; 255
    c26c:	82 e0       	ldi	r24, 0x02	; 2
    c26e:	0e 94 9c 3e 	call	0x7d38	; 0x7d38 <TriggerFx>
			game.high_score_index--;
    c272:	80 91 b8 0d 	lds	r24, 0x0DB8
    c276:	81 50       	subi	r24, 0x01	; 1
    c278:	80 93 b8 0d 	sts	0x0DB8, r24
			LBMoveSprite(2, extendedSprites[2].x-8, extendedSprites[2].y, 1, 1);
    c27c:	60 91 b8 0f 	lds	r22, 0x0FB8
    c280:	68 50       	subi	r22, 0x08	; 8
    c282:	01 e0       	ldi	r16, 0x01	; 1
    c284:	21 e0       	ldi	r18, 0x01	; 1
    c286:	40 91 b9 0f 	lds	r20, 0x0FB9
    c28a:	82 e0       	ldi	r24, 0x02	; 2
    c28c:	0e 94 96 4b 	call	0x972c	; 0x972c <LBMoveSprite>
			LBMoveSprite(3, extendedSprites[3].x-8, extendedSprites[3].y, 1, 1);
    c290:	60 91 bc 0f 	lds	r22, 0x0FBC
    c294:	68 50       	subi	r22, 0x08	; 8
    c296:	21 e0       	ldi	r18, 0x01	; 1
    c298:	40 91 bd 0f 	lds	r20, 0x0FBD
    c29c:	83 e0       	ldi	r24, 0x03	; 3
    c29e:	0e 94 96 4b 	call	0x972c	; 0x972c <LBMoveSprite>
    c2a2:	36 c0       	rjmp	.+108    	; 0xc310 <update_high_scores+0x138>
		}
		else if (game.joypadState.pressed & BTN_UP)
    c2a4:	24 ff       	sbrs	r18, 4
    c2a6:	13 c0       	rjmp	.+38     	; 0xc2ce <update_high_scores+0xf6>
		{
			SFX_NAVIGATE;
    c2a8:	41 e0       	ldi	r20, 0x01	; 1
    c2aa:	6f ef       	ldi	r22, 0xFF	; 255
    c2ac:	82 e0       	ldi	r24, 0x02	; 2
    c2ae:	0e 94 9c 3e 	call	0x7d38	; 0x7d38 <TriggerFx>
			scores.data[game.high_score_index] = scores.data[game.high_score_index]-1;
    c2b2:	80 91 b8 0d 	lds	r24, 0x0DB8
    c2b6:	e8 2f       	mov	r30, r24
    c2b8:	ff 27       	eor	r31, r31
    c2ba:	e7 fd       	sbrc	r30, 7
    c2bc:	f0 95       	com	r31
    c2be:	ea 57       	subi	r30, 0x7A	; 122
    c2c0:	f2 4f       	sbci	r31, 0xF2	; 242
    c2c2:	92 81       	ldd	r25, Z+2	; 0x02
    c2c4:	91 50       	subi	r25, 0x01	; 1
			if (scores.data[game.high_score_index] < 'A') scores.data[game.high_score_index] = 'A';
    c2c6:	91 34       	cpi	r25, 0x41	; 65
    c2c8:	b0 f4       	brcc	.+44     	; 0xc2f6 <update_high_scores+0x11e>
    c2ca:	91 e4       	ldi	r25, 0x41	; 65
    c2cc:	14 c0       	rjmp	.+40     	; 0xc2f6 <update_high_scores+0x11e>
			LBPrintChar(11+(game.high_score_index % 5), 7+(game.high_score_index/5)*2, scores.data[game.high_score_index]);
		}
		else if (game.joypadState.pressed & BTN_DOWN)
    c2ce:	25 ff       	sbrs	r18, 5
    c2d0:	1f c0       	rjmp	.+62     	; 0xc310 <update_high_scores+0x138>
		{
			SFX_NAVIGATE;
    c2d2:	41 e0       	ldi	r20, 0x01	; 1
    c2d4:	6f ef       	ldi	r22, 0xFF	; 255
    c2d6:	82 e0       	ldi	r24, 0x02	; 2
    c2d8:	0e 94 9c 3e 	call	0x7d38	; 0x7d38 <TriggerFx>
			scores.data[game.high_score_index] = scores.data[game.high_score_index]+1;
    c2dc:	80 91 b8 0d 	lds	r24, 0x0DB8
    c2e0:	e8 2f       	mov	r30, r24
    c2e2:	ff 27       	eor	r31, r31
    c2e4:	e7 fd       	sbrc	r30, 7
    c2e6:	f0 95       	com	r31
    c2e8:	ea 57       	subi	r30, 0x7A	; 122
    c2ea:	f2 4f       	sbci	r31, 0xF2	; 242
    c2ec:	92 81       	ldd	r25, Z+2	; 0x02
    c2ee:	9f 5f       	subi	r25, 0xFF	; 255
			if (scores.data[game.high_score_index] > 'Z') scores.data[game.high_score_index] = 'Z';
    c2f0:	9b 35       	cpi	r25, 0x5B	; 91
    c2f2:	08 f0       	brcs	.+2      	; 0xc2f6 <update_high_scores+0x11e>
    c2f4:	9a e5       	ldi	r25, 0x5A	; 90
    c2f6:	92 83       	std	Z+2, r25	; 0x02
			LBPrintChar(11+(game.high_score_index % 5), 7+(game.high_score_index/5)*2, scores.data[game.high_score_index]);
    c2f8:	65 e0       	ldi	r22, 0x05	; 5
    c2fa:	0e 94 0c 68 	call	0xd018	; 0xd018 <__divmodqi4>
    c2fe:	68 2f       	mov	r22, r24
    c300:	66 0f       	add	r22, r22
    c302:	69 5f       	subi	r22, 0xF9	; 249
    c304:	42 81       	ldd	r20, Z+2	; 0x02
    c306:	8b e0       	ldi	r24, 0x0B	; 11
    c308:	89 0f       	add	r24, r25
		}
	}
}
    c30a:	0f 91       	pop	r16
		else if (game.joypadState.pressed & BTN_DOWN)
		{
			SFX_NAVIGATE;
			scores.data[game.high_score_index] = scores.data[game.high_score_index]+1;
			if (scores.data[game.high_score_index] > 'Z') scores.data[game.high_score_index] = 'Z';
			LBPrintChar(11+(game.high_score_index % 5), 7+(game.high_score_index/5)*2, scores.data[game.high_score_index]);
    c30c:	0c 94 53 4a 	jmp	0x94a6	; 0x94a6 <LBPrintChar>
		}
	}
}
    c310:	0f 91       	pop	r16
    c312:	08 95       	ret

0000c314 <tally_score>:
		}
	}
}

void tally_score(char* title, u16 bonus)
{
    c314:	2f 92       	push	r2
    c316:	3f 92       	push	r3
    c318:	4f 92       	push	r4
    c31a:	5f 92       	push	r5
    c31c:	6f 92       	push	r6
    c31e:	7f 92       	push	r7
    c320:	8f 92       	push	r8
    c322:	9f 92       	push	r9
    c324:	af 92       	push	r10
    c326:	bf 92       	push	r11
    c328:	cf 92       	push	r12
    c32a:	df 92       	push	r13
    c32c:	ef 92       	push	r14
    c32e:	ff 92       	push	r15
    c330:	0f 93       	push	r16
    c332:	1f 93       	push	r17
    c334:	cf 93       	push	r28
    c336:	df 93       	push	r29
    c338:	7c 01       	movw	r14, r24
    c33a:	6b 01       	movw	r12, r22
	u8 x = Screen.scrollX / 8;
    c33c:	c0 91 b2 0c 	lds	r28, 0x0CB2
    c340:	c6 95       	lsr	r28
    c342:	c6 95       	lsr	r28
    c344:	c6 95       	lsr	r28
	u8 y = Screen.scrollY / 8;
    c346:	00 91 b3 0c 	lds	r16, 0x0CB3
    c34a:	06 95       	lsr	r16
    c34c:	06 95       	lsr	r16
    c34e:	06 95       	lsr	r16
	u16 tally = game.score;
    c350:	a0 90 ae 0d 	lds	r10, 0x0DAE
    c354:	b0 90 af 0d 	lds	r11, 0x0DAF
	u16 counter = 0;
	
	hide_sprites(0, MAX_EXTENDED_SPRITES);
    c358:	64 e1       	ldi	r22, 0x14	; 20
    c35a:	80 e0       	ldi	r24, 0x00	; 0
    c35c:	0e 94 88 5d 	call	0xbb10	; 0xbb10 <hide_sprites>
	LBRotateSprites();
    c360:	0e 94 d4 4b 	call	0x97a8	; 0x97a8 <LBRotateSprites>
	
	StopSong();
    c364:	0e 94 da 3d 	call	0x7bb4	; 0x7bb4 <StopSong>
	DrawMap2((x+8)%32, (y+6)%30, map_canvas);
    c368:	10 e0       	ldi	r17, 0x00	; 0
    c36a:	d0 e0       	ldi	r29, 0x00	; 0
    c36c:	c8 01       	movw	r24, r16
    c36e:	06 96       	adiw	r24, 0x06	; 6
    c370:	2e e1       	ldi	r18, 0x1E	; 30
    c372:	82 2e       	mov	r8, r18
    c374:	91 2c       	mov	r9, r1
    c376:	b4 01       	movw	r22, r8
    c378:	0e 94 2e 68 	call	0xd05c	; 0xd05c <__divmodhi4>
    c37c:	9e 01       	movw	r18, r28
    c37e:	28 5f       	subi	r18, 0xF8	; 248
    c380:	3f 4f       	sbci	r19, 0xFF	; 255
    c382:	48 e5       	ldi	r20, 0x58	; 88
    c384:	5b e5       	ldi	r21, 0x5B	; 91
    c386:	68 2f       	mov	r22, r24
    c388:	82 2f       	mov	r24, r18
    c38a:	8f 71       	andi	r24, 0x1F	; 31
    c38c:	0e 94 dc 48 	call	0x91b8	; 0x91b8 <DrawMap>
	LBPrint((x+10)%32, (y+7)%30, title);
    c390:	c8 01       	movw	r24, r16
    c392:	07 96       	adiw	r24, 0x07	; 7
    c394:	b4 01       	movw	r22, r8
    c396:	0e 94 2e 68 	call	0xd05c	; 0xd05c <__divmodhi4>
    c39a:	9e 01       	movw	r18, r28
    c39c:	26 5f       	subi	r18, 0xF6	; 246
    c39e:	3f 4f       	sbci	r19, 0xFF	; 255
    c3a0:	a7 01       	movw	r20, r14
    c3a2:	68 2f       	mov	r22, r24
    c3a4:	82 2f       	mov	r24, r18
    c3a6:	8f 71       	andi	r24, 0x1F	; 31
    c3a8:	0e 94 73 4a 	call	0x94e6	; 0x94e6 <LBPrint>
	LBPrint((x+9)%32, (y+9)%30, (char*) strTally);
    c3ac:	c8 01       	movw	r24, r16
    c3ae:	09 96       	adiw	r24, 0x09	; 9
    c3b0:	b4 01       	movw	r22, r8
    c3b2:	0e 94 2e 68 	call	0xd05c	; 0xd05c <__divmodhi4>
    c3b6:	48 2e       	mov	r4, r24
    c3b8:	78 2e       	mov	r7, r24
    c3ba:	7e 01       	movw	r14, r28
    c3bc:	29 e0       	ldi	r18, 0x09	; 9
    c3be:	e2 0e       	add	r14, r18
    c3c0:	f1 1c       	adc	r15, r1
    c3c2:	8f e1       	ldi	r24, 0x1F	; 31
    c3c4:	e8 22       	and	r14, r24
    c3c6:	ff 24       	eor	r15, r15
    c3c8:	42 e4       	ldi	r20, 0x42	; 66
    c3ca:	5b e0       	ldi	r21, 0x0B	; 11
    c3cc:	64 2d       	mov	r22, r4
    c3ce:	8e 2d       	mov	r24, r14
    c3d0:	0e 94 73 4a 	call	0x94e6	; 0x94e6 <LBPrint>
	LBPrint((x+9)%32, (y+11)%30, (char*) strScore);
    c3d4:	c8 01       	movw	r24, r16
    c3d6:	0b 96       	adiw	r24, 0x0b	; 11
    c3d8:	b4 01       	movw	r22, r8
    c3da:	0e 94 2e 68 	call	0xd05c	; 0xd05c <__divmodhi4>
    c3de:	38 2e       	mov	r3, r24
    c3e0:	68 2e       	mov	r6, r24
    c3e2:	48 e9       	ldi	r20, 0x98	; 152
    c3e4:	5b e0       	ldi	r21, 0x0B	; 11
    c3e6:	68 2f       	mov	r22, r24
    c3e8:	8e 2d       	mov	r24, r14
    c3ea:	0e 94 73 4a 	call	0x94e6	; 0x94e6 <LBPrint>
	LBPrint((x+9)%32, (y+12)%30, (char*) strTime);
    c3ee:	c8 01       	movw	r24, r16
    c3f0:	0c 96       	adiw	r24, 0x0c	; 12
    c3f2:	b4 01       	movw	r22, r8
    c3f4:	0e 94 2e 68 	call	0xd05c	; 0xd05c <__divmodhi4>
    c3f8:	58 2e       	mov	r5, r24
    c3fa:	f8 2e       	mov	r15, r24
    c3fc:	43 e8       	ldi	r20, 0x83	; 131
    c3fe:	5b e0       	ldi	r21, 0x0B	; 11
    c400:	68 2f       	mov	r22, r24
    c402:	8e 2d       	mov	r24, r14
    c404:	0e 94 73 4a 	call	0x94e6	; 0x94e6 <LBPrint>
	LBPrint((x+9)%32, (y+13)%30, (char*) strLevelBonus);
    c408:	c8 01       	movw	r24, r16
    c40a:	0d 96       	adiw	r24, 0x0d	; 13
    c40c:	b4 01       	movw	r22, r8
    c40e:	0e 94 2e 68 	call	0xd05c	; 0xd05c <__divmodhi4>
    c412:	18 2f       	mov	r17, r24
    c414:	28 2e       	mov	r2, r24
    c416:	43 e5       	ldi	r20, 0x53	; 83
    c418:	5b e0       	ldi	r21, 0x0B	; 11
    c41a:	68 2f       	mov	r22, r24
    c41c:	8e 2d       	mov	r24, r14
    c41e:	0e 94 73 4a 	call	0x94e6	; 0x94e6 <LBPrint>
	
	LBPrintInt((x+20)%32, (y+9)%30, tally, true);
    c422:	64 96       	adiw	r28, 0x14	; 20
    c424:	cf 71       	andi	r28, 0x1F	; 31
    c426:	dd 27       	eor	r29, r29
    c428:	ec 2e       	mov	r14, r28
    c42a:	21 e0       	ldi	r18, 0x01	; 1
    c42c:	a5 01       	movw	r20, r10
    c42e:	64 2d       	mov	r22, r4
    c430:	8c 2f       	mov	r24, r28
    c432:	0e 94 c0 4a 	call	0x9580	; 0x9580 <LBPrintInt>
	LBPrintInt((x+20)%32, (y+11)%30, game.level_score, true);
    c436:	40 91 b0 0d 	lds	r20, 0x0DB0
    c43a:	50 91 b1 0d 	lds	r21, 0x0DB1
    c43e:	21 e0       	ldi	r18, 0x01	; 1
    c440:	63 2d       	mov	r22, r3
    c442:	8c 2f       	mov	r24, r28
    c444:	0e 94 c0 4a 	call	0x9580	; 0x9580 <LBPrintInt>
	LBPrintInt((x+20)%32, (y+12)%30, game.time, true);
    c448:	40 91 b2 0d 	lds	r20, 0x0DB2
    c44c:	50 91 b3 0d 	lds	r21, 0x0DB3
    c450:	21 e0       	ldi	r18, 0x01	; 1
    c452:	65 2d       	mov	r22, r5
    c454:	8c 2f       	mov	r24, r28
    c456:	0e 94 c0 4a 	call	0x9580	; 0x9580 <LBPrintInt>
	LBPrintInt((x+20)%32, (y+13)%30, bonus, true);
    c45a:	21 e0       	ldi	r18, 0x01	; 1
    c45c:	a6 01       	movw	r20, r12
    c45e:	61 2f       	mov	r22, r17
    c460:	8c 2f       	mov	r24, r28
    c462:	0e 94 c0 4a 	call	0x9580	; 0x9580 <LBPrintInt>
	
	LBWaitSeconds(2);
    c466:	82 e0       	ldi	r24, 0x02	; 2
    c468:	0e 94 35 4b 	call	0x966a	; 0x966a <LBWaitSeconds>
	
	// Tally Score
	counter = game.level_score;
    c46c:	80 90 b0 0d 	lds	r8, 0x0DB0
    c470:	90 90 b1 0d 	lds	r9, 0x0DB1
    c474:	e4 01       	movw	r28, r8

void tally_score(char* title, u16 bonus)
{
	u8 x = Screen.scrollX / 8;
	u8 y = Screen.scrollY / 8;
	u16 tally = game.score;
    c476:	85 01       	movw	r16, r10
	
	LBWaitSeconds(2);
	
	// Tally Score
	counter = game.level_score;
	while (counter > 0)
    c478:	20 97       	sbiw	r28, 0x00	; 0
    c47a:	e9 f0       	breq	.+58     	; 0xc4b6 <tally_score+0x1a2>
	{
		WaitVsync(1);
    c47c:	81 e0       	ldi	r24, 0x01	; 1
    c47e:	90 e0       	ldi	r25, 0x00	; 0
    c480:	0e 94 45 49 	call	0x928a	; 0x928a <WaitVsync>
		SFX_HIT;
    c484:	41 e0       	ldi	r20, 0x01	; 1
    c486:	6f ef       	ldi	r22, 0xFF	; 255
    c488:	84 e0       	ldi	r24, 0x04	; 4
    c48a:	0e 94 9c 3e 	call	0x7d38	; 0x7d38 <TriggerFx>
		tally += 1;
    c48e:	0f 5f       	subi	r16, 0xFF	; 255
    c490:	1f 4f       	sbci	r17, 0xFF	; 255
		counter -= 1;
    c492:	21 97       	sbiw	r28, 0x01	; 1
		LBPrintInt((x+20)%32, (y+9)%30, tally, true);
    c494:	21 e0       	ldi	r18, 0x01	; 1
    c496:	a8 01       	movw	r20, r16
    c498:	67 2d       	mov	r22, r7
    c49a:	8e 2d       	mov	r24, r14
    c49c:	0e 94 c0 4a 	call	0x9580	; 0x9580 <LBPrintInt>
		LBPrintInt((x+20)%32, (y+11)%30, counter, true);
    c4a0:	21 e0       	ldi	r18, 0x01	; 1
    c4a2:	ae 01       	movw	r20, r28
    c4a4:	66 2d       	mov	r22, r6
    c4a6:	8e 2d       	mov	r24, r14
    c4a8:	0e 94 c0 4a 	call	0x9580	; 0x9580 <LBPrintInt>
		WaitUs(TALLY_DELAY);
    c4ac:	8c ed       	ldi	r24, 0xDC	; 220
    c4ae:	95 e0       	ldi	r25, 0x05	; 5
    c4b0:	0e 94 f3 3a 	call	0x75e6	; 0x75e6 <WaitUs>
    c4b4:	e1 cf       	rjmp	.-62     	; 0xc478 <tally_score+0x164>
    c4b6:	a8 0c       	add	r10, r8
    c4b8:	b9 1c       	adc	r11, r9
	}
	
	// Tally Time
	counter = game.time;
    c4ba:	c0 91 b2 0d 	lds	r28, 0x0DB2
    c4be:	d0 91 b3 0d 	lds	r29, 0x0DB3
	while (counter > 0)
    c4c2:	20 97       	sbiw	r28, 0x00	; 0
    c4c4:	31 f1       	breq	.+76     	; 0xc512 <tally_score+0x1fe>
	{
		WaitVsync(1);
    c4c6:	81 e0       	ldi	r24, 0x01	; 1
    c4c8:	90 e0       	ldi	r25, 0x00	; 0
    c4ca:	0e 94 45 49 	call	0x928a	; 0x928a <WaitVsync>
		SFX_HIT;
    c4ce:	41 e0       	ldi	r20, 0x01	; 1
    c4d0:	6f ef       	ldi	r22, 0xFF	; 255
    c4d2:	84 e0       	ldi	r24, 0x04	; 4
    c4d4:	0e 94 9c 3e 	call	0x7d38	; 0x7d38 <TriggerFx>
		tally -= 1;
		if (tally == 0 || tally == 65535) tally = 0;
    c4d8:	c5 01       	movw	r24, r10
    c4da:	02 97       	sbiw	r24, 0x02	; 2
    c4dc:	8e 3f       	cpi	r24, 0xFE	; 254
    c4de:	9f 4f       	sbci	r25, 0xFF	; 255
    c4e0:	20 f4       	brcc	.+8      	; 0xc4ea <tally_score+0x1d6>
	counter = game.time;
	while (counter > 0)
	{
		WaitVsync(1);
		SFX_HIT;
		tally -= 1;
    c4e2:	81 e0       	ldi	r24, 0x01	; 1
    c4e4:	a8 1a       	sub	r10, r24
    c4e6:	b1 08       	sbc	r11, r1
    c4e8:	02 c0       	rjmp	.+4      	; 0xc4ee <tally_score+0x1da>
		if (tally == 0 || tally == 65535) tally = 0;
    c4ea:	a1 2c       	mov	r10, r1
    c4ec:	b1 2c       	mov	r11, r1
		counter -= 1;
    c4ee:	21 97       	sbiw	r28, 0x01	; 1
		LBPrintInt((x+20)%32, (y+9)%30, tally, true);
    c4f0:	21 e0       	ldi	r18, 0x01	; 1
    c4f2:	a5 01       	movw	r20, r10
    c4f4:	67 2d       	mov	r22, r7
    c4f6:	8e 2d       	mov	r24, r14
    c4f8:	0e 94 c0 4a 	call	0x9580	; 0x9580 <LBPrintInt>
		LBPrintInt((x+20)%32, (y+12)%30, counter, true);
    c4fc:	21 e0       	ldi	r18, 0x01	; 1
    c4fe:	ae 01       	movw	r20, r28
    c500:	6f 2d       	mov	r22, r15
    c502:	8e 2d       	mov	r24, r14
    c504:	0e 94 c0 4a 	call	0x9580	; 0x9580 <LBPrintInt>
		WaitUs(TALLY_DELAY);
    c508:	8c ed       	ldi	r24, 0xDC	; 220
    c50a:	95 e0       	ldi	r25, 0x05	; 5
    c50c:	0e 94 f3 3a 	call	0x75e6	; 0x75e6 <WaitUs>
    c510:	d8 cf       	rjmp	.-80     	; 0xc4c2 <tally_score+0x1ae>
    c512:	85 01       	movw	r16, r10
		WaitUs(TALLY_DELAY);
	}
	
	// Tally Time
	counter = game.time;
	while (counter > 0)
    c514:	e6 01       	movw	r28, r12
		WaitUs(TALLY_DELAY);
	}
	
	// Tally Level Bonus
	counter = bonus;
	while (counter > 0)
    c516:	20 97       	sbiw	r28, 0x00	; 0
    c518:	e9 f0       	breq	.+58     	; 0xc554 <tally_score+0x240>
	{
		WaitVsync(1);
    c51a:	81 e0       	ldi	r24, 0x01	; 1
    c51c:	90 e0       	ldi	r25, 0x00	; 0
    c51e:	0e 94 45 49 	call	0x928a	; 0x928a <WaitVsync>
		SFX_HIT;
    c522:	41 e0       	ldi	r20, 0x01	; 1
    c524:	6f ef       	ldi	r22, 0xFF	; 255
    c526:	84 e0       	ldi	r24, 0x04	; 4
    c528:	0e 94 9c 3e 	call	0x7d38	; 0x7d38 <TriggerFx>
		tally += 1;
    c52c:	0f 5f       	subi	r16, 0xFF	; 255
    c52e:	1f 4f       	sbci	r17, 0xFF	; 255
		counter -= 1;
    c530:	21 97       	sbiw	r28, 0x01	; 1
		LBPrintInt((x+20)%32, (y+9)%30, tally, true);
    c532:	21 e0       	ldi	r18, 0x01	; 1
    c534:	a8 01       	movw	r20, r16
    c536:	67 2d       	mov	r22, r7
    c538:	8e 2d       	mov	r24, r14
    c53a:	0e 94 c0 4a 	call	0x9580	; 0x9580 <LBPrintInt>
		LBPrintInt((x+20)%32, (y+13)%30, counter, true);
    c53e:	21 e0       	ldi	r18, 0x01	; 1
    c540:	ae 01       	movw	r20, r28
    c542:	62 2d       	mov	r22, r2
    c544:	8e 2d       	mov	r24, r14
    c546:	0e 94 c0 4a 	call	0x9580	; 0x9580 <LBPrintInt>
		WaitUs(TALLY_DELAY);
    c54a:	8c ed       	ldi	r24, 0xDC	; 220
    c54c:	95 e0       	ldi	r25, 0x05	; 5
    c54e:	0e 94 f3 3a 	call	0x75e6	; 0x75e6 <WaitUs>
    c552:	e1 cf       	rjmp	.-62     	; 0xc516 <tally_score+0x202>
    c554:	ac 0c       	add	r10, r12
    c556:	bd 1c       	adc	r11, r13
	}
	
	game.score = tally;
    c558:	b0 92 af 0d 	sts	0x0DAF, r11
    c55c:	a0 92 ae 0d 	sts	0x0DAE, r10
	game.time = 0;
    c560:	10 92 b3 0d 	sts	0x0DB3, r1
    c564:	10 92 b2 0d 	sts	0x0DB2, r1
	LBWaitSeconds(2);
    c568:	82 e0       	ldi	r24, 0x02	; 2
    c56a:	0e 94 35 4b 	call	0x966a	; 0x966a <LBWaitSeconds>
	render_camera_view();
}
    c56e:	df 91       	pop	r29
    c570:	cf 91       	pop	r28
    c572:	1f 91       	pop	r17
    c574:	0f 91       	pop	r16
    c576:	ff 90       	pop	r15
    c578:	ef 90       	pop	r14
    c57a:	df 90       	pop	r13
    c57c:	cf 90       	pop	r12
    c57e:	bf 90       	pop	r11
    c580:	af 90       	pop	r10
    c582:	9f 90       	pop	r9
    c584:	8f 90       	pop	r8
    c586:	7f 90       	pop	r7
    c588:	6f 90       	pop	r6
    c58a:	5f 90       	pop	r5
    c58c:	4f 90       	pop	r4
    c58e:	3f 90       	pop	r3
    c590:	2f 90       	pop	r2
	}
	
	game.score = tally;
	game.time = 0;
	LBWaitSeconds(2);
	render_camera_view();
    c592:	0c 94 ce 4e 	jmp	0x9d9c	; 0x9d9c <render_camera_view>

0000c596 <handle_player_death>:
	}
}

void handle_player_death()
{
	game.lives--;
    c596:	80 91 b9 0d 	lds	r24, 0x0DB9
    c59a:	81 50       	subi	r24, 0x01	; 1
    c59c:	80 93 b9 0d 	sts	0x0DB9, r24
	clear_sprites(0, 6);
    c5a0:	66 e0       	ldi	r22, 0x06	; 6
    c5a2:	80 e0       	ldi	r24, 0x00	; 0
    c5a4:	0e 94 4c 5c 	call	0xb898	; 0xb898 <clear_sprites>
	LBRotateSprites();
    c5a8:	0e 94 d4 4b 	call	0x97a8	; 0x97a8 <LBRotateSprites>
	if (game.lives == 0)
    c5ac:	80 91 b9 0d 	lds	r24, 0x0DB9
    c5b0:	81 11       	cpse	r24, r1
    c5b2:	08 c0       	rjmp	.+16     	; 0xc5c4 <handle_player_death+0x2e>
	{
		tally_score((char*) strGameOver, 0);
    c5b4:	60 e0       	ldi	r22, 0x00	; 0
    c5b6:	70 e0       	ldi	r23, 0x00	; 0
    c5b8:	89 e4       	ldi	r24, 0x49	; 73
    c5ba:	9b e0       	ldi	r25, 0x0B	; 11
    c5bc:	0e 94 8a 61 	call	0xc314	; 0xc314 <tally_score>
		exit_game();
    c5c0:	0c 94 97 60 	jmp	0xc12e	; 0xc12e <exit_game>
		return;
	}
	FadeOut(FRAMES_PER_FADE, true);
    c5c4:	61 e0       	ldi	r22, 0x01	; 1
    c5c6:	81 e0       	ldi	r24, 0x01	; 1
    c5c8:	0e 94 ad 49 	call	0x935a	; 0x935a <FadeOut>
	ClearVram();
    c5cc:	0e 94 bd 3a 	call	0x757a	; 0x757a <ClearVram>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    c5d0:	64 e1       	ldi	r22, 0x14	; 20
    c5d2:	80 e0       	ldi	r24, 0x00	; 0
    c5d4:	0e 94 4c 5c 	call	0xb898	; 0xb898 <clear_sprites>
	LBRotateSprites();
    c5d8:	0e 94 d4 4b 	call	0x97a8	; 0x97a8 <LBRotateSprites>
	FadeIn(FRAMES_PER_FADE, false);
    c5dc:	60 e0       	ldi	r22, 0x00	; 0
    c5de:	81 e0       	ldi	r24, 0x01	; 1
    c5e0:	0e 94 a1 49 	call	0x9342	; 0x9342 <FadeIn>
	init_player_state();
    c5e4:	0e 94 41 4c 	call	0x9882	; 0x9882 <init_player_state>
	init_enemy_state();
    c5e8:	0e 94 2d 4c 	call	0x985a	; 0x985a <init_enemy_state>
	load_level(game.current_level_index, false);
    c5ec:	60 e0       	ldi	r22, 0x00	; 0
    c5ee:	80 91 bb 0d 	lds	r24, 0x0DBB
    c5f2:	0c 94 7e 5c 	jmp	0xb8fc	; 0xb8fc <load_level>

0000c5f6 <update_player>:
}

u8 update_player()
{
    c5f6:	cf 92       	push	r12
    c5f8:	df 92       	push	r13
    c5fa:	ef 92       	push	r14
    c5fc:	ff 92       	push	r15
    c5fe:	0f 93       	push	r16
    c600:	1f 93       	push	r17
    c602:	cf 93       	push	r28
    c604:	df 93       	push	r29
    c606:	1f 92       	push	r1
    c608:	cd b7       	in	r28, 0x3d	; 61
    c60a:	de b7       	in	r29, 0x3e	; 62
	
	if (game.player.flags & EXPLODING)
    c60c:	10 91 d9 0d 	lds	r17, 0x0DD9
    c610:	14 ff       	sbrs	r17, 4
    c612:	12 c0       	rjmp	.+36     	; 0xc638 <update_player+0x42>
	{
		if (map_explosion(&game.player.flags, &game.player.expl, PLAYER_SLOT, game.player.width, game.player.height))
    c614:	00 91 dd 0d 	lds	r16, 0x0DDD
    c618:	20 91 dc 0d 	lds	r18, 0x0DDC
    c61c:	40 e0       	ldi	r20, 0x00	; 0
    c61e:	6d e4       	ldi	r22, 0x4D	; 77
    c620:	7e e0       	ldi	r23, 0x0E	; 14
    c622:	89 ed       	ldi	r24, 0xD9	; 217
    c624:	9d e0       	ldi	r25, 0x0D	; 13
    c626:	0e 94 cc 57 	call	0xaf98	; 0xaf98 <map_explosion>
    c62a:	88 23       	and	r24, r24
    c62c:	09 f4       	brne	.+2      	; 0xc630 <update_player+0x3a>
    c62e:	ca c2       	rjmp	.+1428   	; 0xcbc4 <update_player+0x5ce>
		{
			handle_player_death();
    c630:	0e 94 cb 62 	call	0xc596	; 0xc596 <handle_player_death>
			return 0;
    c634:	80 e0       	ldi	r24, 0x00	; 0
    c636:	c7 c2       	rjmp	.+1422   	; 0xcbc6 <update_player+0x5d0>
		}
	}
	else if (is_space())
    c638:	0e 94 13 4c 	call	0x9826	; 0x9826 <is_space>
    c63c:	88 23       	and	r24, r24
    c63e:	09 f4       	brne	.+2      	; 0xc642 <update_player+0x4c>
    c640:	ab c0       	rjmp	.+342    	; 0xc798 <update_player+0x1a2>
	{
		game.player.shared.vy = 0;
    c642:	10 92 c9 0d 	sts	0x0DC9, r1
    c646:	10 92 ca 0d 	sts	0x0DCA, r1
    c64a:	10 92 cb 0d 	sts	0x0DCB, r1
    c64e:	10 92 cc 0d 	sts	0x0DCC, r1
		game.player.shared.vx = SPACE_SHIP_SPEED;
    c652:	8c e3       	ldi	r24, 0x3C	; 60
    c654:	90 e0       	ldi	r25, 0x00	; 0
    c656:	90 93 d6 0d 	sts	0x0DD6, r25
    c65a:	80 93 d5 0d 	sts	0x0DD5, r24
		
		if ((game.joypadState.held & BTN_DOWN) && (game.player.shared.y/8 + 1 < game.level_height))
    c65e:	10 91 a3 0f 	lds	r17, 0x0FA3
    c662:	15 ff       	sbrs	r17, 5
    c664:	32 c0       	rjmp	.+100    	; 0xc6ca <update_player+0xd4>
    c666:	20 e0       	ldi	r18, 0x00	; 0
    c668:	30 e0       	ldi	r19, 0x00	; 0
    c66a:	40 e0       	ldi	r20, 0x00	; 0
    c66c:	5e e3       	ldi	r21, 0x3E	; 62
    c66e:	60 91 d1 0d 	lds	r22, 0x0DD1
    c672:	70 91 d2 0d 	lds	r23, 0x0DD2
    c676:	80 91 d3 0d 	lds	r24, 0x0DD3
    c67a:	90 91 d4 0d 	lds	r25, 0x0DD4
    c67e:	0e 94 93 69 	call	0xd326	; 0xd326 <__mulsf3>
    c682:	20 e0       	ldi	r18, 0x00	; 0
    c684:	30 e0       	ldi	r19, 0x00	; 0
    c686:	40 e8       	ldi	r20, 0x80	; 128
    c688:	5f e3       	ldi	r21, 0x3F	; 63
    c68a:	0e 94 49 68 	call	0xd092	; 0xd092 <__addsf3>
    c68e:	6b 01       	movw	r12, r22
    c690:	7c 01       	movw	r14, r24
    c692:	80 91 be 0d 	lds	r24, 0x0DBE
    c696:	68 2f       	mov	r22, r24
    c698:	70 e0       	ldi	r23, 0x00	; 0
    c69a:	80 e0       	ldi	r24, 0x00	; 0
    c69c:	90 e0       	ldi	r25, 0x00	; 0
    c69e:	0e 94 df 68 	call	0xd1be	; 0xd1be <__floatsisf>
    c6a2:	9b 01       	movw	r18, r22
    c6a4:	ac 01       	movw	r20, r24
    c6a6:	c7 01       	movw	r24, r14
    c6a8:	b6 01       	movw	r22, r12
    c6aa:	0e 94 ad 68 	call	0xd15a	; 0xd15a <__cmpsf2>
    c6ae:	87 ff       	sbrs	r24, 7
    c6b0:	0c c0       	rjmp	.+24     	; 0xc6ca <update_player+0xd4>
		{
			game.player.shared.vy = SPACE_SHIP_SPEED;
    c6b2:	80 e0       	ldi	r24, 0x00	; 0
    c6b4:	90 e0       	ldi	r25, 0x00	; 0
    c6b6:	a0 e7       	ldi	r26, 0x70	; 112
    c6b8:	b2 e4       	ldi	r27, 0x42	; 66
    c6ba:	80 93 c9 0d 	sts	0x0DC9, r24
    c6be:	90 93 ca 0d 	sts	0x0DCA, r25
    c6c2:	a0 93 cb 0d 	sts	0x0DCB, r26
    c6c6:	b0 93 cc 0d 	sts	0x0DCC, r27
		}
		if ((game.joypadState.held & BTN_RIGHT) && (game.player.shared.x + 24 < game.camera_x + CAMERA_WIDTH*8))
    c6ca:	17 ff       	sbrs	r17, 7
    c6cc:	29 c0       	rjmp	.+82     	; 0xc720 <update_player+0x12a>
    c6ce:	20 e0       	ldi	r18, 0x00	; 0
    c6d0:	30 e0       	ldi	r19, 0x00	; 0
    c6d2:	40 ec       	ldi	r20, 0xC0	; 192
    c6d4:	51 e4       	ldi	r21, 0x41	; 65
    c6d6:	60 91 cd 0d 	lds	r22, 0x0DCD
    c6da:	70 91 ce 0d 	lds	r23, 0x0DCE
    c6de:	80 91 cf 0d 	lds	r24, 0x0DCF
    c6e2:	90 91 d0 0d 	lds	r25, 0x0DD0
    c6e6:	0e 94 49 68 	call	0xd092	; 0xd092 <__addsf3>
    c6ea:	6b 01       	movw	r12, r22
    c6ec:	7c 01       	movw	r14, r24
    c6ee:	80 91 aa 0d 	lds	r24, 0x0DAA
    c6f2:	90 91 ab 0d 	lds	r25, 0x0DAB
    c6f6:	80 52       	subi	r24, 0x20	; 32
    c6f8:	9f 4f       	sbci	r25, 0xFF	; 255
    c6fa:	bc 01       	movw	r22, r24
    c6fc:	80 e0       	ldi	r24, 0x00	; 0
    c6fe:	90 e0       	ldi	r25, 0x00	; 0
    c700:	0e 94 dd 68 	call	0xd1ba	; 0xd1ba <__floatunsisf>
    c704:	9b 01       	movw	r18, r22
    c706:	ac 01       	movw	r20, r24
    c708:	c7 01       	movw	r24, r14
    c70a:	b6 01       	movw	r22, r12
    c70c:	0e 94 ad 68 	call	0xd15a	; 0xd15a <__cmpsf2>
    c710:	87 ff       	sbrs	r24, 7
    c712:	06 c0       	rjmp	.+12     	; 0xc720 <update_player+0x12a>
		{
			game.player.shared.vx = SPACE_SHIP_SPEED*2;
    c714:	88 e7       	ldi	r24, 0x78	; 120
    c716:	90 e0       	ldi	r25, 0x00	; 0
    c718:	90 93 d6 0d 	sts	0x0DD6, r25
    c71c:	80 93 d5 0d 	sts	0x0DD5, r24
		}
		if ((game.joypadState.held & BTN_LEFT) && (game.player.shared.x > game.camera_x))
    c720:	16 ff       	sbrs	r17, 6
    c722:	1a c0       	rjmp	.+52     	; 0xc758 <update_player+0x162>
    c724:	60 91 aa 0d 	lds	r22, 0x0DAA
    c728:	70 91 ab 0d 	lds	r23, 0x0DAB
    c72c:	80 e0       	ldi	r24, 0x00	; 0
    c72e:	90 e0       	ldi	r25, 0x00	; 0
    c730:	0e 94 dd 68 	call	0xd1ba	; 0xd1ba <__floatunsisf>
    c734:	9b 01       	movw	r18, r22
    c736:	ac 01       	movw	r20, r24
    c738:	60 91 cd 0d 	lds	r22, 0x0DCD
    c73c:	70 91 ce 0d 	lds	r23, 0x0DCE
    c740:	80 91 cf 0d 	lds	r24, 0x0DCF
    c744:	90 91 d0 0d 	lds	r25, 0x0DD0
    c748:	0e 94 8f 69 	call	0xd31e	; 0xd31e <__gesf2>
    c74c:	18 16       	cp	r1, r24
    c74e:	24 f4       	brge	.+8      	; 0xc758 <update_player+0x162>
		{
			game.player.shared.vx = 0;
    c750:	10 92 d6 0d 	sts	0x0DD6, r1
    c754:	10 92 d5 0d 	sts	0x0DD5, r1
		}
		if ((game.joypadState.held & BTN_UP) && (game.player.shared.y > 0))
    c758:	14 ff       	sbrs	r17, 4
    c75a:	1b c0       	rjmp	.+54     	; 0xc792 <update_player+0x19c>
    c75c:	20 e0       	ldi	r18, 0x00	; 0
    c75e:	30 e0       	ldi	r19, 0x00	; 0
    c760:	a9 01       	movw	r20, r18
    c762:	60 91 d1 0d 	lds	r22, 0x0DD1
    c766:	70 91 d2 0d 	lds	r23, 0x0DD2
    c76a:	80 91 d3 0d 	lds	r24, 0x0DD3
    c76e:	90 91 d4 0d 	lds	r25, 0x0DD4
    c772:	0e 94 8f 69 	call	0xd31e	; 0xd31e <__gesf2>
    c776:	18 16       	cp	r1, r24
    c778:	64 f4       	brge	.+24     	; 0xc792 <update_player+0x19c>
		{
			game.player.shared.vy = -SPACE_SHIP_SPEED;
    c77a:	80 e0       	ldi	r24, 0x00	; 0
    c77c:	90 e0       	ldi	r25, 0x00	; 0
    c77e:	a0 e7       	ldi	r26, 0x70	; 112
    c780:	b2 ec       	ldi	r27, 0xC2	; 194
    c782:	80 93 c9 0d 	sts	0x0DC9, r24
    c786:	90 93 ca 0d 	sts	0x0DCA, r25
    c78a:	a0 93 cb 0d 	sts	0x0DCB, r26
    c78e:	b0 93 cc 0d 	sts	0x0DCC, r27
		}
		LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.run), 0);
    c792:	85 e3       	ldi	r24, 0x35	; 53
    c794:	9e e0       	ldi	r25, 0x0E	; 14
    c796:	0f c2       	rjmp	.+1054   	; 0xcbb6 <update_player+0x5c0>
	}
	else if (game.player.flags & (IDLE|RUNNING))
    c798:	81 2f       	mov	r24, r17
    c79a:	8a 70       	andi	r24, 0x0A	; 10
    c79c:	09 f4       	brne	.+2      	; 0xc7a0 <update_player+0x1aa>
    c79e:	ed c0       	rjmp	.+474    	; 0xc97a <update_player+0x384>
	{
		if (!on_solid_ground(&game.player.shared, game.player.width, game.player.height))
    c7a0:	40 91 dd 0d 	lds	r20, 0x0DDD
    c7a4:	60 91 dc 0d 	lds	r22, 0x0DDC
    c7a8:	89 ec       	ldi	r24, 0xC9	; 201
    c7aa:	9d e0       	ldi	r25, 0x0D	; 13
    c7ac:	0e 94 fd 50 	call	0xa1fa	; 0xa1fa <on_solid_ground>
    c7b0:	81 11       	cpse	r24, r1
    c7b2:	07 c0       	rjmp	.+14     	; 0xc7c2 <update_player+0x1cc>
		{
			game.player.shared.gravity = GRAVITY;
    c7b4:	8f ef       	ldi	r24, 0xFF	; 255
    c7b6:	80 93 d7 0d 	sts	0x0DD7, r24
			game.player.flags = JUMPING;
    c7ba:	81 e0       	ldi	r24, 0x01	; 1
    c7bc:	80 93 d9 0d 	sts	0x0DD9, r24
    c7c0:	e0 c1       	rjmp	.+960    	; 0xcb82 <update_player+0x58c>
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), extendedSprites[PLAYER_SLOT].flags);
		}
		else
		{
			if (game.joypadState.held & BTN_DOWN)
    c7c2:	10 91 a3 0f 	lds	r17, 0x0FA3
    c7c6:	15 ff       	sbrs	r17, 5
    c7c8:	46 c0       	rjmp	.+140    	; 0xc856 <update_player+0x260>
			{
				game.player.shared.y += 16;
    c7ca:	20 e0       	ldi	r18, 0x00	; 0
    c7cc:	30 e0       	ldi	r19, 0x00	; 0
    c7ce:	40 e8       	ldi	r20, 0x80	; 128
    c7d0:	51 e4       	ldi	r21, 0x41	; 65
    c7d2:	60 91 d1 0d 	lds	r22, 0x0DD1
    c7d6:	70 91 d2 0d 	lds	r23, 0x0DD2
    c7da:	80 91 d3 0d 	lds	r24, 0x0DD3
    c7de:	90 91 d4 0d 	lds	r25, 0x0DD4
    c7e2:	0e 94 49 68 	call	0xd092	; 0xd092 <__addsf3>
    c7e6:	60 93 d1 0d 	sts	0x0DD1, r22
    c7ea:	70 93 d2 0d 	sts	0x0DD2, r23
    c7ee:	80 93 d3 0d 	sts	0x0DD3, r24
    c7f2:	90 93 d4 0d 	sts	0x0DD4, r25
				if(game.player.direction == D_RIGHT)
    c7f6:	80 91 db 0d 	lds	r24, 0x0DDB
    c7fa:	81 30       	cpi	r24, 0x01	; 1
    c7fc:	b1 f4       	brne	.+44     	; 0xc82a <update_player+0x234>
				{
					game.player.shared.x -= 8;
    c7fe:	20 e0       	ldi	r18, 0x00	; 0
    c800:	30 e0       	ldi	r19, 0x00	; 0
    c802:	40 e0       	ldi	r20, 0x00	; 0
    c804:	51 e4       	ldi	r21, 0x41	; 65
    c806:	60 91 cd 0d 	lds	r22, 0x0DCD
    c80a:	70 91 ce 0d 	lds	r23, 0x0DCE
    c80e:	80 91 cf 0d 	lds	r24, 0x0DCF
    c812:	90 91 d0 0d 	lds	r25, 0x0DD0
    c816:	0e 94 48 68 	call	0xd090	; 0xd090 <__subsf3>
    c81a:	60 93 cd 0d 	sts	0x0DCD, r22
    c81e:	70 93 ce 0d 	sts	0x0DCE, r23
    c822:	80 93 cf 0d 	sts	0x0DCF, r24
    c826:	90 93 d0 0d 	sts	0x0DD0, r25
				}
				game.player.shared.vx = 0;
    c82a:	10 92 d6 0d 	sts	0x0DD6, r1
    c82e:	10 92 d5 0d 	sts	0x0DD5, r1
				game.player.flags = PRONE;
    c832:	84 e0       	ldi	r24, 0x04	; 4
    c834:	80 93 d9 0d 	sts	0x0DD9, r24
				game.player.width = 3;
    c838:	83 e0       	ldi	r24, 0x03	; 3
    c83a:	80 93 dc 0d 	sts	0x0DDC, r24
				game.player.height = 1;
    c83e:	81 e0       	ldi	r24, 0x01	; 1
    c840:	80 93 dd 0d 	sts	0x0DDD, r24
				clear_sprites(3, 3);
    c844:	63 e0       	ldi	r22, 0x03	; 3
    c846:	83 e0       	ldi	r24, 0x03	; 3
    c848:	0e 94 4c 5c 	call	0xb898	; 0xb898 <clear_sprites>
				LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.prone), extendedSprites[PLAYER_SLOT].flags);
    c84c:	40 91 b3 0f 	lds	r20, 0x0FB3
    c850:	85 e4       	ldi	r24, 0x45	; 69
    c852:	9e e0       	ldi	r25, 0x0E	; 14
    c854:	6f c0       	rjmp	.+222    	; 0xc934 <update_player+0x33e>
			}
			else if ((game.joypadState.held & BTN_RIGHT) && (game.player.shared.x/8 + 2 < game.level_width))
    c856:	17 ff       	sbrs	r17, 7
    c858:	39 c0       	rjmp	.+114    	; 0xc8cc <update_player+0x2d6>
    c85a:	20 e0       	ldi	r18, 0x00	; 0
    c85c:	30 e0       	ldi	r19, 0x00	; 0
    c85e:	40 e0       	ldi	r20, 0x00	; 0
    c860:	5e e3       	ldi	r21, 0x3E	; 62
    c862:	60 91 cd 0d 	lds	r22, 0x0DCD
    c866:	70 91 ce 0d 	lds	r23, 0x0DCE
    c86a:	80 91 cf 0d 	lds	r24, 0x0DCF
    c86e:	90 91 d0 0d 	lds	r25, 0x0DD0
    c872:	0e 94 93 69 	call	0xd326	; 0xd326 <__mulsf3>
    c876:	20 e0       	ldi	r18, 0x00	; 0
    c878:	30 e0       	ldi	r19, 0x00	; 0
    c87a:	40 e0       	ldi	r20, 0x00	; 0
    c87c:	50 e4       	ldi	r21, 0x40	; 64
    c87e:	0e 94 49 68 	call	0xd092	; 0xd092 <__addsf3>
    c882:	6b 01       	movw	r12, r22
    c884:	7c 01       	movw	r14, r24
    c886:	80 91 b6 0d 	lds	r24, 0x0DB6
    c88a:	90 91 b7 0d 	lds	r25, 0x0DB7
    c88e:	bc 01       	movw	r22, r24
    c890:	80 e0       	ldi	r24, 0x00	; 0
    c892:	90 e0       	ldi	r25, 0x00	; 0
    c894:	0e 94 dd 68 	call	0xd1ba	; 0xd1ba <__floatunsisf>
    c898:	9b 01       	movw	r18, r22
    c89a:	ac 01       	movw	r20, r24
    c89c:	c7 01       	movw	r24, r14
    c89e:	b6 01       	movw	r22, r12
    c8a0:	0e 94 ad 68 	call	0xd15a	; 0xd15a <__cmpsf2>
    c8a4:	87 ff       	sbrs	r24, 7
    c8a6:	12 c0       	rjmp	.+36     	; 0xc8cc <update_player+0x2d6>
			{
				game.player.shared.vx = RUN_SPEED;
    c8a8:	8c e3       	ldi	r24, 0x3C	; 60
    c8aa:	90 e0       	ldi	r25, 0x00	; 0
    c8ac:	90 93 d6 0d 	sts	0x0DD6, r25
    c8b0:	80 93 d5 0d 	sts	0x0DD5, r24
				game.player.flags = RUNNING;
    c8b4:	82 e0       	ldi	r24, 0x02	; 2
    c8b6:	80 93 d9 0d 	sts	0x0DD9, r24
				game.player.direction = D_RIGHT;
    c8ba:	81 e0       	ldi	r24, 0x01	; 1
    c8bc:	80 93 db 0d 	sts	0x0DDB, r24
				LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.run), 0);
    c8c0:	85 e3       	ldi	r24, 0x35	; 53
    c8c2:	9e e0       	ldi	r25, 0x0E	; 14
    c8c4:	0e 94 e2 49 	call	0x93c4	; 0x93c4 <LBGetNextFrame>
    c8c8:	40 e0       	ldi	r20, 0x00	; 0
    c8ca:	38 c0       	rjmp	.+112    	; 0xc93c <update_player+0x346>
			}
			else if ((game.joypadState.held & BTN_LEFT) && (game.player.shared.x > game.camera_x))
    c8cc:	16 ff       	sbrs	r17, 6
    c8ce:	27 c0       	rjmp	.+78     	; 0xc91e <update_player+0x328>
    c8d0:	60 91 aa 0d 	lds	r22, 0x0DAA
    c8d4:	70 91 ab 0d 	lds	r23, 0x0DAB
    c8d8:	80 e0       	ldi	r24, 0x00	; 0
    c8da:	90 e0       	ldi	r25, 0x00	; 0
    c8dc:	0e 94 dd 68 	call	0xd1ba	; 0xd1ba <__floatunsisf>
    c8e0:	9b 01       	movw	r18, r22
    c8e2:	ac 01       	movw	r20, r24
    c8e4:	60 91 cd 0d 	lds	r22, 0x0DCD
    c8e8:	70 91 ce 0d 	lds	r23, 0x0DCE
    c8ec:	80 91 cf 0d 	lds	r24, 0x0DCF
    c8f0:	90 91 d0 0d 	lds	r25, 0x0DD0
    c8f4:	0e 94 8f 69 	call	0xd31e	; 0xd31e <__gesf2>
    c8f8:	18 16       	cp	r1, r24
    c8fa:	8c f4       	brge	.+34     	; 0xc91e <update_player+0x328>
			{
				game.player.shared.vx = -RUN_SPEED;
    c8fc:	84 ec       	ldi	r24, 0xC4	; 196
    c8fe:	9f ef       	ldi	r25, 0xFF	; 255
    c900:	90 93 d6 0d 	sts	0x0DD6, r25
    c904:	80 93 d5 0d 	sts	0x0DD5, r24
				game.player.flags = RUNNING;
    c908:	82 e0       	ldi	r24, 0x02	; 2
    c90a:	80 93 d9 0d 	sts	0x0DD9, r24
				game.player.direction = D_LEFT;
    c90e:	10 92 db 0d 	sts	0x0DDB, r1
				LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.run), SPRITE_FLIP_X);
    c912:	85 e3       	ldi	r24, 0x35	; 53
    c914:	9e e0       	ldi	r25, 0x0E	; 14
    c916:	0e 94 e2 49 	call	0x93c4	; 0x93c4 <LBGetNextFrame>
    c91a:	41 e0       	ldi	r20, 0x01	; 1
    c91c:	0f c0       	rjmp	.+30     	; 0xc93c <update_player+0x346>
			}
			else
			{
				game.player.flags = IDLE;
    c91e:	88 e0       	ldi	r24, 0x08	; 8
    c920:	80 93 d9 0d 	sts	0x0DD9, r24
				game.player.shared.vx = 0;
    c924:	10 92 d6 0d 	sts	0x0DD6, r1
    c928:	10 92 d5 0d 	sts	0x0DD5, r1
				LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.idle), extendedSprites[PLAYER_SLOT].flags);
    c92c:	40 91 b3 0f 	lds	r20, 0x0FB3
    c930:	8d e2       	ldi	r24, 0x2D	; 45
    c932:	9e e0       	ldi	r25, 0x0E	; 14
    c934:	49 83       	std	Y+1, r20	; 0x01
    c936:	0e 94 e2 49 	call	0x93c4	; 0x93c4 <LBGetNextFrame>
    c93a:	49 81       	ldd	r20, Y+1	; 0x01
    c93c:	bc 01       	movw	r22, r24
    c93e:	80 e0       	ldi	r24, 0x00	; 0
    c940:	0e 94 44 4b 	call	0x9688	; 0x9688 <LBMapSprite>
			}
			if (game.joypadState.pressed & BTN_B && !(game.player.flags & PRONE))
    c944:	80 91 9f 0f 	lds	r24, 0x0F9F
    c948:	80 ff       	sbrs	r24, 0
    c94a:	3c c1       	rjmp	.+632    	; 0xcbc4 <update_player+0x5ce>
    c94c:	80 91 d9 0d 	lds	r24, 0x0DD9
    c950:	82 fd       	sbrc	r24, 2
    c952:	38 c1       	rjmp	.+624    	; 0xcbc4 <update_player+0x5ce>
			{
				game.player.shared.vy = -JUMP_SPEED;
    c954:	80 e0       	ldi	r24, 0x00	; 0
    c956:	90 e0       	ldi	r25, 0x00	; 0
    c958:	a6 e1       	ldi	r26, 0x16	; 22
    c95a:	b3 ec       	ldi	r27, 0xC3	; 195
    c95c:	80 93 c9 0d 	sts	0x0DC9, r24
    c960:	90 93 ca 0d 	sts	0x0DCA, r25
    c964:	a0 93 cb 0d 	sts	0x0DCB, r26
    c968:	b0 93 cc 0d 	sts	0x0DCC, r27
				game.player.shared.gravity = GRAVITY;
    c96c:	8f ef       	ldi	r24, 0xFF	; 255
    c96e:	80 93 d7 0d 	sts	0x0DD7, r24
				game.player.flags = JUMPING;
    c972:	81 e0       	ldi	r24, 0x01	; 1
    c974:	80 93 d9 0d 	sts	0x0DD9, r24
    c978:	fe c0       	rjmp	.+508    	; 0xcb76 <update_player+0x580>
				game.player.height = 3;
				LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), extendedSprites[PLAYER_SLOT].flags);
			}
		}
	}
	else if (game.player.flags & JUMPING)
    c97a:	10 ff       	sbrs	r17, 0
    c97c:	78 c0       	rjmp	.+240    	; 0xca6e <update_player+0x478>
	{
		if ((game.joypadState.held & BTN_RIGHT) && (game.player.shared.x/8 + 2 < game.level_width))
    c97e:	10 91 a3 0f 	lds	r17, 0x0FA3
    c982:	17 ff       	sbrs	r17, 7
    c984:	36 c0       	rjmp	.+108    	; 0xc9f2 <update_player+0x3fc>
    c986:	20 e0       	ldi	r18, 0x00	; 0
    c988:	30 e0       	ldi	r19, 0x00	; 0
    c98a:	40 e0       	ldi	r20, 0x00	; 0
    c98c:	5e e3       	ldi	r21, 0x3E	; 62
    c98e:	60 91 cd 0d 	lds	r22, 0x0DCD
    c992:	70 91 ce 0d 	lds	r23, 0x0DCE
    c996:	80 91 cf 0d 	lds	r24, 0x0DCF
    c99a:	90 91 d0 0d 	lds	r25, 0x0DD0
    c99e:	0e 94 93 69 	call	0xd326	; 0xd326 <__mulsf3>
    c9a2:	20 e0       	ldi	r18, 0x00	; 0
    c9a4:	30 e0       	ldi	r19, 0x00	; 0
    c9a6:	40 e0       	ldi	r20, 0x00	; 0
    c9a8:	50 e4       	ldi	r21, 0x40	; 64
    c9aa:	0e 94 49 68 	call	0xd092	; 0xd092 <__addsf3>
    c9ae:	6b 01       	movw	r12, r22
    c9b0:	7c 01       	movw	r14, r24
    c9b2:	80 91 b6 0d 	lds	r24, 0x0DB6
    c9b6:	90 91 b7 0d 	lds	r25, 0x0DB7
    c9ba:	bc 01       	movw	r22, r24
    c9bc:	80 e0       	ldi	r24, 0x00	; 0
    c9be:	90 e0       	ldi	r25, 0x00	; 0
    c9c0:	0e 94 dd 68 	call	0xd1ba	; 0xd1ba <__floatunsisf>
    c9c4:	9b 01       	movw	r18, r22
    c9c6:	ac 01       	movw	r20, r24
    c9c8:	c7 01       	movw	r24, r14
    c9ca:	b6 01       	movw	r22, r12
    c9cc:	0e 94 ad 68 	call	0xd15a	; 0xd15a <__cmpsf2>
    c9d0:	87 ff       	sbrs	r24, 7
    c9d2:	0f c0       	rjmp	.+30     	; 0xc9f2 <update_player+0x3fc>
		{
			game.player.shared.vx = RUN_SPEED;
    c9d4:	8c e3       	ldi	r24, 0x3C	; 60
    c9d6:	90 e0       	ldi	r25, 0x00	; 0
    c9d8:	90 93 d6 0d 	sts	0x0DD6, r25
    c9dc:	80 93 d5 0d 	sts	0x0DD5, r24
			game.player.direction = D_RIGHT;
    c9e0:	81 e0       	ldi	r24, 0x01	; 1
    c9e2:	80 93 db 0d 	sts	0x0DDB, r24
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), 0);
    c9e6:	8d e3       	ldi	r24, 0x3D	; 61
    c9e8:	9e e0       	ldi	r25, 0x0E	; 14
    c9ea:	0e 94 e2 49 	call	0x93c4	; 0x93c4 <LBGetNextFrame>
    c9ee:	40 e0       	ldi	r20, 0x00	; 0
    c9f0:	32 c0       	rjmp	.+100    	; 0xca56 <update_player+0x460>
		}
		else if ((game.joypadState.held & BTN_LEFT) && (game.player.shared.x > game.camera_x))
    c9f2:	16 ff       	sbrs	r17, 6
    c9f4:	24 c0       	rjmp	.+72     	; 0xca3e <update_player+0x448>
    c9f6:	60 91 aa 0d 	lds	r22, 0x0DAA
    c9fa:	70 91 ab 0d 	lds	r23, 0x0DAB
    c9fe:	80 e0       	ldi	r24, 0x00	; 0
    ca00:	90 e0       	ldi	r25, 0x00	; 0
    ca02:	0e 94 dd 68 	call	0xd1ba	; 0xd1ba <__floatunsisf>
    ca06:	9b 01       	movw	r18, r22
    ca08:	ac 01       	movw	r20, r24
    ca0a:	60 91 cd 0d 	lds	r22, 0x0DCD
    ca0e:	70 91 ce 0d 	lds	r23, 0x0DCE
    ca12:	80 91 cf 0d 	lds	r24, 0x0DCF
    ca16:	90 91 d0 0d 	lds	r25, 0x0DD0
    ca1a:	0e 94 8f 69 	call	0xd31e	; 0xd31e <__gesf2>
    ca1e:	18 16       	cp	r1, r24
    ca20:	74 f4       	brge	.+28     	; 0xca3e <update_player+0x448>
		{
			game.player.shared.vx = -RUN_SPEED;
    ca22:	84 ec       	ldi	r24, 0xC4	; 196
    ca24:	9f ef       	ldi	r25, 0xFF	; 255
    ca26:	90 93 d6 0d 	sts	0x0DD6, r25
    ca2a:	80 93 d5 0d 	sts	0x0DD5, r24
			game.player.direction = D_LEFT;
    ca2e:	10 92 db 0d 	sts	0x0DDB, r1
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), SPRITE_FLIP_X);
    ca32:	8d e3       	ldi	r24, 0x3D	; 61
    ca34:	9e e0       	ldi	r25, 0x0E	; 14
    ca36:	0e 94 e2 49 	call	0x93c4	; 0x93c4 <LBGetNextFrame>
    ca3a:	41 e0       	ldi	r20, 0x01	; 1
    ca3c:	0c c0       	rjmp	.+24     	; 0xca56 <update_player+0x460>
		}
		else
		{
			game.player.shared.vx = 0;
    ca3e:	10 92 d6 0d 	sts	0x0DD6, r1
    ca42:	10 92 d5 0d 	sts	0x0DD5, r1
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), extendedSprites[PLAYER_SLOT].flags);
    ca46:	40 91 b3 0f 	lds	r20, 0x0FB3
    ca4a:	8d e3       	ldi	r24, 0x3D	; 61
    ca4c:	9e e0       	ldi	r25, 0x0E	; 14
    ca4e:	49 83       	std	Y+1, r20	; 0x01
    ca50:	0e 94 e2 49 	call	0x93c4	; 0x93c4 <LBGetNextFrame>
    ca54:	49 81       	ldd	r20, Y+1	; 0x01
    ca56:	bc 01       	movw	r22, r24
    ca58:	80 e0       	ldi	r24, 0x00	; 0
    ca5a:	0e 94 44 4b 	call	0x9688	; 0x9688 <LBMapSprite>
		}
		
		if (game.player.shared.gravity == 0)
    ca5e:	80 91 d7 0d 	lds	r24, 0x0DD7
    ca62:	81 11       	cpse	r24, r1
    ca64:	af c0       	rjmp	.+350    	; 0xcbc4 <update_player+0x5ce>
		{
			game.player.flags = IDLE;
    ca66:	88 e0       	ldi	r24, 0x08	; 8
    ca68:	80 93 d9 0d 	sts	0x0DD9, r24
    ca6c:	ab c0       	rjmp	.+342    	; 0xcbc4 <update_player+0x5ce>
		}
	}
	else if (game.player.flags & PRONE)
    ca6e:	12 ff       	sbrs	r17, 2
    ca70:	a9 c0       	rjmp	.+338    	; 0xcbc4 <update_player+0x5ce>
	{
		if (game.joypadState.pressed & BTN_UP)
    ca72:	80 91 9f 0f 	lds	r24, 0x0F9F
    ca76:	84 ff       	sbrs	r24, 4
    ca78:	3a c0       	rjmp	.+116    	; 0xcaee <update_player+0x4f8>
		{
			game.player.flags = IDLE;	
    ca7a:	88 e0       	ldi	r24, 0x08	; 8
    ca7c:	80 93 d9 0d 	sts	0x0DD9, r24
			game.player.shared.y -= 16;
    ca80:	20 e0       	ldi	r18, 0x00	; 0
    ca82:	30 e0       	ldi	r19, 0x00	; 0
    ca84:	40 e8       	ldi	r20, 0x80	; 128
    ca86:	51 e4       	ldi	r21, 0x41	; 65
    ca88:	60 91 d1 0d 	lds	r22, 0x0DD1
    ca8c:	70 91 d2 0d 	lds	r23, 0x0DD2
    ca90:	80 91 d3 0d 	lds	r24, 0x0DD3
    ca94:	90 91 d4 0d 	lds	r25, 0x0DD4
    ca98:	0e 94 48 68 	call	0xd090	; 0xd090 <__subsf3>
    ca9c:	60 93 d1 0d 	sts	0x0DD1, r22
    caa0:	70 93 d2 0d 	sts	0x0DD2, r23
    caa4:	80 93 d3 0d 	sts	0x0DD3, r24
    caa8:	90 93 d4 0d 	sts	0x0DD4, r25
			if(game.player.direction == D_RIGHT)
    caac:	80 91 db 0d 	lds	r24, 0x0DDB
    cab0:	81 30       	cpi	r24, 0x01	; 1
    cab2:	b1 f4       	brne	.+44     	; 0xcae0 <update_player+0x4ea>
			{
				game.player.shared.x += 8;
    cab4:	20 e0       	ldi	r18, 0x00	; 0
    cab6:	30 e0       	ldi	r19, 0x00	; 0
    cab8:	40 e0       	ldi	r20, 0x00	; 0
    caba:	51 e4       	ldi	r21, 0x41	; 65
    cabc:	60 91 cd 0d 	lds	r22, 0x0DCD
    cac0:	70 91 ce 0d 	lds	r23, 0x0DCE
    cac4:	80 91 cf 0d 	lds	r24, 0x0DCF
    cac8:	90 91 d0 0d 	lds	r25, 0x0DD0
    cacc:	0e 94 49 68 	call	0xd092	; 0xd092 <__addsf3>
    cad0:	60 93 cd 0d 	sts	0x0DCD, r22
    cad4:	70 93 ce 0d 	sts	0x0DCE, r23
    cad8:	80 93 cf 0d 	sts	0x0DCF, r24
    cadc:	90 93 d0 0d 	sts	0x0DD0, r25
			}
			game.player.width = 2;
    cae0:	82 e0       	ldi	r24, 0x02	; 2
    cae2:	80 93 dc 0d 	sts	0x0DDC, r24
			game.player.height = 3;
    cae6:	83 e0       	ldi	r24, 0x03	; 3
    cae8:	80 93 dd 0d 	sts	0x0DDD, r24
    caec:	6b c0       	rjmp	.+214    	; 0xcbc4 <update_player+0x5ce>
		}
		else if (game.joypadState.pressed & BTN_B)
    caee:	80 ff       	sbrs	r24, 0
    caf0:	51 c0       	rjmp	.+162    	; 0xcb94 <update_player+0x59e>
		{
			game.player.flags = JUMPING;
    caf2:	81 e0       	ldi	r24, 0x01	; 1
    caf4:	80 93 d9 0d 	sts	0x0DD9, r24
			game.player.shared.y -= 16;
    caf8:	20 e0       	ldi	r18, 0x00	; 0
    cafa:	30 e0       	ldi	r19, 0x00	; 0
    cafc:	40 e8       	ldi	r20, 0x80	; 128
    cafe:	51 e4       	ldi	r21, 0x41	; 65
    cb00:	60 91 d1 0d 	lds	r22, 0x0DD1
    cb04:	70 91 d2 0d 	lds	r23, 0x0DD2
    cb08:	80 91 d3 0d 	lds	r24, 0x0DD3
    cb0c:	90 91 d4 0d 	lds	r25, 0x0DD4
    cb10:	0e 94 48 68 	call	0xd090	; 0xd090 <__subsf3>
    cb14:	60 93 d1 0d 	sts	0x0DD1, r22
    cb18:	70 93 d2 0d 	sts	0x0DD2, r23
    cb1c:	80 93 d3 0d 	sts	0x0DD3, r24
    cb20:	90 93 d4 0d 	sts	0x0DD4, r25
			if(game.player.direction == D_RIGHT)
    cb24:	80 91 db 0d 	lds	r24, 0x0DDB
    cb28:	81 30       	cpi	r24, 0x01	; 1
    cb2a:	b1 f4       	brne	.+44     	; 0xcb58 <update_player+0x562>
			{
				game.player.shared.x += 8;
    cb2c:	20 e0       	ldi	r18, 0x00	; 0
    cb2e:	30 e0       	ldi	r19, 0x00	; 0
    cb30:	40 e0       	ldi	r20, 0x00	; 0
    cb32:	51 e4       	ldi	r21, 0x41	; 65
    cb34:	60 91 cd 0d 	lds	r22, 0x0DCD
    cb38:	70 91 ce 0d 	lds	r23, 0x0DCE
    cb3c:	80 91 cf 0d 	lds	r24, 0x0DCF
    cb40:	90 91 d0 0d 	lds	r25, 0x0DD0
    cb44:	0e 94 49 68 	call	0xd092	; 0xd092 <__addsf3>
    cb48:	60 93 cd 0d 	sts	0x0DCD, r22
    cb4c:	70 93 ce 0d 	sts	0x0DCE, r23
    cb50:	80 93 cf 0d 	sts	0x0DCF, r24
    cb54:	90 93 d0 0d 	sts	0x0DD0, r25
			}
			game.player.shared.vy = -JUMP_SPEED;
    cb58:	80 e0       	ldi	r24, 0x00	; 0
    cb5a:	90 e0       	ldi	r25, 0x00	; 0
    cb5c:	a6 e1       	ldi	r26, 0x16	; 22
    cb5e:	b3 ec       	ldi	r27, 0xC3	; 195
    cb60:	80 93 c9 0d 	sts	0x0DC9, r24
    cb64:	90 93 ca 0d 	sts	0x0DCA, r25
    cb68:	a0 93 cb 0d 	sts	0x0DCB, r26
    cb6c:	b0 93 cc 0d 	sts	0x0DCC, r27
			game.player.shared.gravity = GRAVITY;
    cb70:	8f ef       	ldi	r24, 0xFF	; 255
    cb72:	80 93 d7 0d 	sts	0x0DD7, r24
			game.player.width = 2;
    cb76:	82 e0       	ldi	r24, 0x02	; 2
    cb78:	80 93 dc 0d 	sts	0x0DDC, r24
			game.player.height = 3;
    cb7c:	83 e0       	ldi	r24, 0x03	; 3
    cb7e:	80 93 dd 0d 	sts	0x0DDD, r24
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), extendedSprites[PLAYER_SLOT].flags);
    cb82:	40 91 b3 0f 	lds	r20, 0x0FB3
    cb86:	8d e3       	ldi	r24, 0x3D	; 61
    cb88:	9e e0       	ldi	r25, 0x0E	; 14
    cb8a:	49 83       	std	Y+1, r20	; 0x01
    cb8c:	0e 94 e2 49 	call	0x93c4	; 0x93c4 <LBGetNextFrame>
    cb90:	49 81       	ldd	r20, Y+1	; 0x01
    cb92:	14 c0       	rjmp	.+40     	; 0xcbbc <update_player+0x5c6>
		}
		else if (game.joypadState.pressed & BTN_LEFT)
    cb94:	86 ff       	sbrs	r24, 6
    cb96:	08 c0       	rjmp	.+16     	; 0xcba8 <update_player+0x5b2>
		{
			game.player.direction = D_LEFT;
    cb98:	10 92 db 0d 	sts	0x0DDB, r1
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.prone), SPRITE_FLIP_X);
    cb9c:	85 e4       	ldi	r24, 0x45	; 69
    cb9e:	9e e0       	ldi	r25, 0x0E	; 14
    cba0:	0e 94 e2 49 	call	0x93c4	; 0x93c4 <LBGetNextFrame>
    cba4:	41 e0       	ldi	r20, 0x01	; 1
    cba6:	0a c0       	rjmp	.+20     	; 0xcbbc <update_player+0x5c6>
		}
		else if (game.joypadState.pressed & BTN_RIGHT)
    cba8:	87 ff       	sbrs	r24, 7
    cbaa:	0c c0       	rjmp	.+24     	; 0xcbc4 <update_player+0x5ce>
		{
			game.player.direction = D_RIGHT;
    cbac:	81 e0       	ldi	r24, 0x01	; 1
    cbae:	80 93 db 0d 	sts	0x0DDB, r24
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.prone), 0);
    cbb2:	85 e4       	ldi	r24, 0x45	; 69
    cbb4:	9e e0       	ldi	r25, 0x0E	; 14
    cbb6:	0e 94 e2 49 	call	0x93c4	; 0x93c4 <LBGetNextFrame>
    cbba:	40 e0       	ldi	r20, 0x00	; 0
    cbbc:	bc 01       	movw	r22, r24
    cbbe:	80 e0       	ldi	r24, 0x00	; 0
    cbc0:	0e 94 44 4b 	call	0x9688	; 0x9688 <LBMapSprite>
		}
	}
	return 1;
    cbc4:	81 e0       	ldi	r24, 0x01	; 1
}
    cbc6:	0f 90       	pop	r0
    cbc8:	df 91       	pop	r29
    cbca:	cf 91       	pop	r28
    cbcc:	1f 91       	pop	r17
    cbce:	0f 91       	pop	r16
    cbd0:	ff 90       	pop	r15
    cbd2:	ef 90       	pop	r14
    cbd4:	df 90       	pop	r13
    cbd6:	cf 90       	pop	r12
    cbd8:	08 95       	ret

0000cbda <update_level>:
		}
	}
}

void update_level()
{
    cbda:	cf 92       	push	r12
    cbdc:	df 92       	push	r13
    cbde:	ef 92       	push	r14
    cbe0:	ff 92       	push	r15
    cbe2:	0f 93       	push	r16
    cbe4:	1f 93       	push	r17
    cbe6:	cf 93       	push	r28
    cbe8:	df 93       	push	r29
	u8 ship_x = game.player.shared.x - game.camera_x;
    cbea:	c0 91 aa 0d 	lds	r28, 0x0DAA
    cbee:	d0 91 ab 0d 	lds	r29, 0x0DAB
    cbf2:	be 01       	movw	r22, r28
    cbf4:	80 e0       	ldi	r24, 0x00	; 0
    cbf6:	90 e0       	ldi	r25, 0x00	; 0
    cbf8:	0e 94 dd 68 	call	0xd1ba	; 0xd1ba <__floatunsisf>
    cbfc:	9b 01       	movw	r18, r22
    cbfe:	ac 01       	movw	r20, r24
    cc00:	60 91 cd 0d 	lds	r22, 0x0DCD
    cc04:	70 91 ce 0d 	lds	r23, 0x0DCE
    cc08:	80 91 cf 0d 	lds	r24, 0x0DCF
    cc0c:	90 91 d0 0d 	lds	r25, 0x0DD0
    cc10:	0e 94 48 68 	call	0xd090	; 0xd090 <__subsf3>
    cc14:	6b 01       	movw	r12, r22
    cc16:	7c 01       	movw	r14, r24
	u8 ship_y = 0;
	char ship_increment = 3;
	
	game.frame_counter++;
    cc18:	80 91 c1 0d 	lds	r24, 0x0DC1
    cc1c:	8f 5f       	subi	r24, 0xFF	; 255
	if (game.frame_counter == 60)
    cc1e:	8c 33       	cpi	r24, 0x3C	; 60
    cc20:	19 f0       	breq	.+6      	; 0xcc28 <update_level+0x4e>
{
	u8 ship_x = game.player.shared.x - game.camera_x;
	u8 ship_y = 0;
	char ship_increment = 3;
	
	game.frame_counter++;
    cc22:	80 93 c1 0d 	sts	0x0DC1, r24
    cc26:	0f c0       	rjmp	.+30     	; 0xcc46 <update_level+0x6c>
	if (game.frame_counter == 60)
	{
		game.frame_counter = 0;
    cc28:	10 92 c1 0d 	sts	0x0DC1, r1
		if (game.time != 65535) game.time++;
    cc2c:	80 91 b2 0d 	lds	r24, 0x0DB2
    cc30:	90 91 b3 0d 	lds	r25, 0x0DB3
    cc34:	8f 3f       	cpi	r24, 0xFF	; 255
    cc36:	2f ef       	ldi	r18, 0xFF	; 255
    cc38:	92 07       	cpc	r25, r18
    cc3a:	29 f0       	breq	.+10     	; 0xcc46 <update_level+0x6c>
    cc3c:	01 96       	adiw	r24, 0x01	; 1
    cc3e:	90 93 b3 0d 	sts	0x0DB3, r25
    cc42:	80 93 b2 0d 	sts	0x0DB2, r24
	}
	
	if (is_space() && game.camera_x/8 + CAMERA_WIDTH < game.level_width)
    cc46:	0e 94 13 4c 	call	0x9826	; 0x9826 <is_space>
    cc4a:	93 e0       	ldi	r25, 0x03	; 3
    cc4c:	d6 95       	lsr	r29
    cc4e:	c7 95       	ror	r28
    cc50:	9a 95       	dec	r25
    cc52:	e1 f7       	brne	.-8      	; 0xcc4c <update_level+0x72>
    cc54:	00 91 b6 0d 	lds	r16, 0x0DB6
    cc58:	10 91 b7 0d 	lds	r17, 0x0DB7
    cc5c:	88 23       	and	r24, r24
    cc5e:	41 f0       	breq	.+16     	; 0xcc70 <update_level+0x96>
    cc60:	ce 01       	movw	r24, r28
    cc62:	4c 96       	adiw	r24, 0x1c	; 28
    cc64:	80 17       	cp	r24, r16
    cc66:	91 07       	cpc	r25, r17
    cc68:	18 f4       	brcc	.+6      	; 0xcc70 <update_level+0x96>
	{
		move_camera_x();
    cc6a:	0e 94 7b 50 	call	0xa0f6	; 0xa0f6 <move_camera_x>
    cc6e:	1d c0       	rjmp	.+58     	; 0xccaa <update_level+0xd0>
	}
	else if (game.player.shared.vx > 0 &&
    cc70:	80 91 d5 0d 	lds	r24, 0x0DD5
    cc74:	90 91 d6 0d 	lds	r25, 0x0DD6
    cc78:	18 16       	cp	r1, r24
    cc7a:	19 06       	cpc	r1, r25
    cc7c:	7c f4       	brge	.+30     	; 0xcc9c <update_level+0xc2>
    cc7e:	20 e0       	ldi	r18, 0x00	; 0
    cc80:	30 e0       	ldi	r19, 0x00	; 0
    cc82:	40 ee       	ldi	r20, 0xE0	; 224
    cc84:	52 e4       	ldi	r21, 0x42	; 66
    cc86:	c7 01       	movw	r24, r14
    cc88:	b6 01       	movw	r22, r12
    cc8a:	0e 94 8f 69 	call	0xd31e	; 0xd31e <__gesf2>
    cc8e:	87 fd       	sbrc	r24, 7
    cc90:	05 c0       	rjmp	.+10     	; 0xcc9c <update_level+0xc2>
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
		(game.camera_x/8 + CAMERA_WIDTH < game.level_width))
    cc92:	ce 01       	movw	r24, r28
    cc94:	4c 96       	adiw	r24, 0x1c	; 28
	if (is_space() && game.camera_x/8 + CAMERA_WIDTH < game.level_width)
	{
		move_camera_x();
	}
	else if (game.player.shared.vx > 0 &&
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
    cc96:	80 17       	cp	r24, r16
    cc98:	91 07       	cpc	r25, r17
    cc9a:	38 f3       	brcs	.-50     	; 0xcc6a <update_level+0x90>
		(game.camera_x/8 + CAMERA_WIDTH < game.level_width))
	{
		move_camera_x();
	}
	else if (game.camera_x/8 + CAMERA_WIDTH >= game.level_width)
    cc9c:	6c 96       	adiw	r28, 0x1c	; 28
    cc9e:	c0 17       	cp	r28, r16
    cca0:	d1 07       	cpc	r29, r17
    cca2:	18 f0       	brcs	.+6      	; 0xccaa <update_level+0xd0>
	{
		game.level_ended = 1;
    cca4:	81 e0       	ldi	r24, 0x01	; 1
    cca6:	80 93 c8 0d 	sts	0x0DC8, r24
	}
	
	if (!is_space() && game.player.shared.vy > 0 &&
    ccaa:	0e 94 13 4c 	call	0x9826	; 0x9826 <is_space>
    ccae:	81 11       	cpse	r24, r1
    ccb0:	40 c0       	rjmp	.+128    	; 0xcd32 <update_level+0x158>
    ccb2:	20 e0       	ldi	r18, 0x00	; 0
    ccb4:	30 e0       	ldi	r19, 0x00	; 0
    ccb6:	a9 01       	movw	r20, r18
    ccb8:	60 91 c9 0d 	lds	r22, 0x0DC9
    ccbc:	70 91 ca 0d 	lds	r23, 0x0DCA
    ccc0:	80 91 cb 0d 	lds	r24, 0x0DCB
    ccc4:	90 91 cc 0d 	lds	r25, 0x0DCC
    ccc8:	0e 94 8f 69 	call	0xd31e	; 0xd31e <__gesf2>
    cccc:	18 16       	cp	r1, r24
    ccce:	8c f5       	brge	.+98     	; 0xcd32 <update_level+0x158>
	    (game.player.shared.y - game.camera_y + 24) >= ((CAMERA_HEIGHT - 2) * 8) &&
    ccd0:	c0 91 ac 0d 	lds	r28, 0x0DAC
    ccd4:	d0 91 ad 0d 	lds	r29, 0x0DAD
    ccd8:	be 01       	movw	r22, r28
    ccda:	80 e0       	ldi	r24, 0x00	; 0
    ccdc:	90 e0       	ldi	r25, 0x00	; 0
    ccde:	0e 94 dd 68 	call	0xd1ba	; 0xd1ba <__floatunsisf>
    cce2:	9b 01       	movw	r18, r22
    cce4:	ac 01       	movw	r20, r24
    cce6:	60 91 d1 0d 	lds	r22, 0x0DD1
    ccea:	70 91 d2 0d 	lds	r23, 0x0DD2
    ccee:	80 91 d3 0d 	lds	r24, 0x0DD3
    ccf2:	90 91 d4 0d 	lds	r25, 0x0DD4
    ccf6:	0e 94 48 68 	call	0xd090	; 0xd090 <__subsf3>
    ccfa:	20 e0       	ldi	r18, 0x00	; 0
    ccfc:	30 e0       	ldi	r19, 0x00	; 0
    ccfe:	40 ec       	ldi	r20, 0xC0	; 192
    cd00:	51 e4       	ldi	r21, 0x41	; 65
    cd02:	0e 94 49 68 	call	0xd092	; 0xd092 <__addsf3>
	else if (game.camera_x/8 + CAMERA_WIDTH >= game.level_width)
	{
		game.level_ended = 1;
	}
	
	if (!is_space() && game.player.shared.vy > 0 &&
    cd06:	20 e0       	ldi	r18, 0x00	; 0
    cd08:	30 e0       	ldi	r19, 0x00	; 0
    cd0a:	48 e3       	ldi	r20, 0x38	; 56
    cd0c:	53 e4       	ldi	r21, 0x43	; 67
    cd0e:	0e 94 8f 69 	call	0xd31e	; 0xd31e <__gesf2>
    cd12:	87 fd       	sbrc	r24, 7
    cd14:	0e c0       	rjmp	.+28     	; 0xcd32 <update_level+0x158>
	    (game.player.shared.y - game.camera_y + 24) >= ((CAMERA_HEIGHT - 2) * 8) &&
		(game.camera_y/8 + CAMERA_HEIGHT < game.level_height))
    cd16:	83 e0       	ldi	r24, 0x03	; 3
    cd18:	d6 95       	lsr	r29
    cd1a:	c7 95       	ror	r28
    cd1c:	8a 95       	dec	r24
    cd1e:	e1 f7       	brne	.-8      	; 0xcd18 <update_level+0x13e>
    cd20:	69 96       	adiw	r28, 0x19	; 25
    cd22:	80 91 be 0d 	lds	r24, 0x0DBE
    cd26:	90 e0       	ldi	r25, 0x00	; 0
	{
		game.level_ended = 1;
	}
	
	if (!is_space() && game.player.shared.vy > 0 &&
	    (game.player.shared.y - game.camera_y + 24) >= ((CAMERA_HEIGHT - 2) * 8) &&
    cd28:	c8 17       	cp	r28, r24
    cd2a:	d9 07       	cpc	r29, r25
    cd2c:	10 f4       	brcc	.+4      	; 0xcd32 <update_level+0x158>
		(game.camera_y/8 + CAMERA_HEIGHT < game.level_height))
	{
		move_camera_y();
    cd2e:	0e 94 94 50 	call	0xa128	; 0xa128 <move_camera_y>
	}
	
	// Score
	LBPrintByte(9, VRAM_TILES_V-3, game.player.shield ,true);
    cd32:	21 e0       	ldi	r18, 0x01	; 1
    cd34:	40 91 de 0d 	lds	r20, 0x0DDE
    cd38:	6d e1       	ldi	r22, 0x1D	; 29
    cd3a:	89 e0       	ldi	r24, 0x09	; 9
    cd3c:	0e 94 8f 4a 	call	0x951e	; 0x951e <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-3, game.time ,true);
    cd40:	40 91 b2 0d 	lds	r20, 0x0DB2
    cd44:	50 91 b3 0d 	lds	r21, 0x0DB3
    cd48:	21 e0       	ldi	r18, 0x01	; 1
    cd4a:	6d e1       	ldi	r22, 0x1D	; 29
    cd4c:	8b e1       	ldi	r24, 0x1B	; 27
    cd4e:	0e 94 c0 4a 	call	0x9580	; 0x9580 <LBPrintInt>
	LBPrintByte(9, VRAM_TILES_V-2, game.lives ,true);
    cd52:	21 e0       	ldi	r18, 0x01	; 1
    cd54:	40 91 b9 0d 	lds	r20, 0x0DB9
    cd58:	6e e1       	ldi	r22, 0x1E	; 30
    cd5a:	89 e0       	ldi	r24, 0x09	; 9
    cd5c:	0e 94 8f 4a 	call	0x951e	; 0x951e <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-2, game.level_score ,true);
    cd60:	40 91 b0 0d 	lds	r20, 0x0DB0
    cd64:	50 91 b1 0d 	lds	r21, 0x0DB1
    cd68:	21 e0       	ldi	r18, 0x01	; 1
    cd6a:	6e e1       	ldi	r22, 0x1E	; 30
    cd6c:	8b e1       	ldi	r24, 0x1B	; 27
    cd6e:	0e 94 c0 4a 	call	0x9580	; 0x9580 <LBPrintInt>
	LBPrintInt(27, VRAM_TILES_V-1, game.score ,true);
    cd72:	40 91 ae 0d 	lds	r20, 0x0DAE
    cd76:	50 91 af 0d 	lds	r21, 0x0DAF
    cd7a:	21 e0       	ldi	r18, 0x01	; 1
    cd7c:	6f e1       	ldi	r22, 0x1F	; 31
    cd7e:	8b e1       	ldi	r24, 0x1B	; 27
    cd80:	0e 94 c0 4a 	call	0x9580	; 0x9580 <LBPrintInt>
	
	if (game.level_ended && !is_space() && game.player.flags & (IDLE|RUNNING|PRONE))
    cd84:	80 91 c8 0d 	lds	r24, 0x0DC8
    cd88:	88 23       	and	r24, r24
    cd8a:	09 f4       	brne	.+2      	; 0xcd8e <update_level+0x1b4>
    cd8c:	69 c0       	rjmp	.+210    	; 0xce60 <update_level+0x286>
    cd8e:	0e 94 13 4c 	call	0x9826	; 0x9826 <is_space>
    cd92:	81 11       	cpse	r24, r1
    cd94:	56 c0       	rjmp	.+172    	; 0xce42 <update_level+0x268>
    cd96:	80 91 d9 0d 	lds	r24, 0x0DD9
    cd9a:	8e 70       	andi	r24, 0x0E	; 14
    cd9c:	09 f4       	brne	.+2      	; 0xcda0 <update_level+0x1c6>
    cd9e:	60 c0       	rjmp	.+192    	; 0xce60 <update_level+0x286>
	{
		LBMapSprite(PLAYER_SLOT, map_hero_idle, 0);
    cda0:	40 e0       	ldi	r20, 0x00	; 0
    cda2:	67 e0       	ldi	r22, 0x07	; 7
    cda4:	78 e3       	ldi	r23, 0x38	; 56
    cda6:	80 e0       	ldi	r24, 0x00	; 0
    cda8:	0e 94 44 4b 	call	0x9688	; 0x9688 <LBMapSprite>
		clear_sprites(ENEMY_SHOT_SLOT, MAX_ENEMY_SHOTS);
    cdac:	61 e0       	ldi	r22, 0x01	; 1
    cdae:	8e e0       	ldi	r24, 0x0E	; 14
    cdb0:	0e 94 4c 5c 	call	0xb898	; 0xb898 <clear_sprites>
		LBRotateSprites();
    cdb4:	0e 94 d4 4b 	call	0x97a8	; 0x97a8 <LBRotateSprites>
		map_ship();
    cdb8:	0e 94 af 50 	call	0xa15e	; 0xa15e <map_ship>

void update_level()
{
	u8 ship_x = game.player.shared.x - game.camera_x;
	u8 ship_y = 0;
	char ship_increment = 3;
    cdbc:	d3 e0       	ldi	r29, 0x03	; 3
}

void update_level()
{
	u8 ship_x = game.player.shared.x - game.camera_x;
	u8 ship_y = 0;
    cdbe:	c0 e0       	ldi	r28, 0x00	; 0
		clear_sprites(ENEMY_SHOT_SLOT, MAX_ENEMY_SHOTS);
		LBRotateSprites();
		map_ship();
		while (1)
		{
			WaitVsync(1);
    cdc0:	81 e0       	ldi	r24, 0x01	; 1
    cdc2:	90 e0       	ldi	r25, 0x00	; 0
    cdc4:	0e 94 45 49 	call	0x928a	; 0x928a <WaitVsync>
			if (ship_y >= get_hero_spawn_y(game.current_level_index)*8)
    cdc8:	8c 2f       	mov	r24, r28
    cdca:	90 e0       	ldi	r25, 0x00	; 0
    cdcc:	88 3a       	cpi	r24, 0xA8	; 168
    cdce:	91 05       	cpc	r25, r1
    cdd0:	6c f0       	brlt	.+26     	; 0xcdec <update_level+0x212>
			{
				clear_sprites(0, game.player.width*game.player.height);
    cdd2:	80 91 dd 0d 	lds	r24, 0x0DDD
    cdd6:	60 91 dc 0d 	lds	r22, 0x0DDC
    cdda:	86 9f       	mul	r24, r22
    cddc:	60 2d       	mov	r22, r0
    cdde:	11 24       	eor	r1, r1
    cde0:	80 e0       	ldi	r24, 0x00	; 0
    cde2:	0e 94 4c 5c 	call	0xb898	; 0xb898 <clear_sprites>
				LBRotateSprites();
    cde6:	0e 94 d4 4b 	call	0x97a8	; 0x97a8 <LBRotateSprites>
				ship_increment = -3;
    cdea:	dd ef       	ldi	r29, 0xFD	; 253
			}
			LBMapSprite(6, LBGetNextFrame(&game.player.run), 0);
    cdec:	85 e3       	ldi	r24, 0x35	; 53
    cdee:	9e e0       	ldi	r25, 0x0E	; 14
    cdf0:	0e 94 e2 49 	call	0x93c4	; 0x93c4 <LBGetNextFrame>
    cdf4:	40 e0       	ldi	r20, 0x00	; 0
    cdf6:	bc 01       	movw	r22, r24
    cdf8:	86 e0       	ldi	r24, 0x06	; 6
    cdfa:	0e 94 44 4b 	call	0x9688	; 0x9688 <LBMapSprite>
	}
}

void update_level()
{
	u8 ship_x = game.player.shared.x - game.camera_x;
    cdfe:	c7 01       	movw	r24, r14
    ce00:	b6 01       	movw	r22, r12
    ce02:	0e 94 b1 68 	call	0xd162	; 0xd162 <__fixunssfsi>
				clear_sprites(0, game.player.width*game.player.height);
				LBRotateSprites();
				ship_increment = -3;
			}
			LBMapSprite(6, LBGetNextFrame(&game.player.run), 0);
			LBMoveSprite(6, ship_x, ship_y, 4, 2);
    ce06:	02 e0       	ldi	r16, 0x02	; 2
    ce08:	24 e0       	ldi	r18, 0x04	; 4
    ce0a:	4c 2f       	mov	r20, r28
    ce0c:	86 e0       	ldi	r24, 0x06	; 6
    ce0e:	0e 94 96 4b 	call	0x972c	; 0x972c <LBMoveSprite>
			ship_y += ship_increment;
    ce12:	cd 0f       	add	r28, r29
			if (ship_y == 0)
    ce14:	99 f4       	brne	.+38     	; 0xce3c <update_level+0x262>
			{
				clear_sprites(6, 8);
    ce16:	68 e0       	ldi	r22, 0x08	; 8
    ce18:	86 e0       	ldi	r24, 0x06	; 6
    ce1a:	0e 94 4c 5c 	call	0xb898	; 0xb898 <clear_sprites>
				LBRotateSprites();
    ce1e:	0e 94 d4 4b 	call	0x97a8	; 0x97a8 <LBRotateSprites>
				tally_score((char*) strLevelClear, 100);
    ce22:	64 e6       	ldi	r22, 0x64	; 100
    ce24:	70 e0       	ldi	r23, 0x00	; 0
    ce26:	89 e5       	ldi	r24, 0x59	; 89
    ce28:	9b e0       	ldi	r25, 0x0B	; 11
    ce2a:	0e 94 8a 61 	call	0xc314	; 0xc314 <tally_score>
				planet_transition(game.current_level_index+1, -1, 26, 3, 0);
    ce2e:	80 91 bb 0d 	lds	r24, 0x0DBB
    ce32:	00 e0       	ldi	r16, 0x00	; 0
    ce34:	23 e0       	ldi	r18, 0x03	; 3
    ce36:	4a e1       	ldi	r20, 0x1A	; 26
    ce38:	6f ef       	ldi	r22, 0xFF	; 255
    ce3a:	0f c0       	rjmp	.+30     	; 0xce5a <update_level+0x280>
				break;
			}
			LBRotateSprites();
    ce3c:	0e 94 d4 4b 	call	0x97a8	; 0x97a8 <LBRotateSprites>
		}
    ce40:	bf cf       	rjmp	.-130    	; 0xcdc0 <update_level+0x1e6>
	}
	else if (game.level_ended && is_space())
	{
		tally_score((char*) strLevelClear, 100);
    ce42:	64 e6       	ldi	r22, 0x64	; 100
    ce44:	70 e0       	ldi	r23, 0x00	; 0
    ce46:	89 e5       	ldi	r24, 0x59	; 89
    ce48:	9b e0       	ldi	r25, 0x0B	; 11
    ce4a:	0e 94 8a 61 	call	0xc314	; 0xc314 <tally_score>
		planet_transition(game.current_level_index+1, 1, 28, -3, 199);
    ce4e:	80 91 bb 0d 	lds	r24, 0x0DBB
    ce52:	07 ec       	ldi	r16, 0xC7	; 199
    ce54:	2d ef       	ldi	r18, 0xFD	; 253
    ce56:	4c e1       	ldi	r20, 0x1C	; 28
    ce58:	61 e0       	ldi	r22, 0x01	; 1
    ce5a:	8f 5f       	subi	r24, 0xFF	; 255
    ce5c:	0e 94 65 5e 	call	0xbcca	; 0xbcca <planet_transition>
	}
	
}
    ce60:	df 91       	pop	r29
    ce62:	cf 91       	pop	r28
    ce64:	1f 91       	pop	r17
    ce66:	0f 91       	pop	r16
    ce68:	ff 90       	pop	r15
    ce6a:	ef 90       	pop	r14
    ce6c:	df 90       	pop	r13
    ce6e:	cf 90       	pop	r12
    ce70:	08 95       	ret

0000ce72 <update_pause>:
		}
	}
}

void update_pause()
{
    ce72:	ef 92       	push	r14
    ce74:	ff 92       	push	r15
    ce76:	0f 93       	push	r16
    ce78:	1f 93       	push	r17
    ce7a:	cf 93       	push	r28
    ce7c:	df 93       	push	r29
	u8 x = Screen.scrollX / 8;
    ce7e:	c0 91 b2 0c 	lds	r28, 0x0CB2
	u8 y = Screen.scrollY / 8;
    ce82:	00 91 b3 0c 	lds	r16, 0x0CB3
	
	if (game.joypadState.pressed & BTN_START)
    ce86:	80 91 9f 0f 	lds	r24, 0x0F9F
    ce8a:	83 ff       	sbrs	r24, 3
    ce8c:	63 c0       	rjmp	.+198    	; 0xcf54 <update_pause+0xe2>
}

void update_pause()
{
	u8 x = Screen.scrollX / 8;
	u8 y = Screen.scrollY / 8;
    ce8e:	06 95       	lsr	r16
    ce90:	06 95       	lsr	r16
    ce92:	06 95       	lsr	r16
	
	if (game.joypadState.pressed & BTN_START)
	{
		DrawMap2((x+8)%32, (y+6)%30, map_canvas);
    ce94:	10 e0       	ldi	r17, 0x00	; 0
	}
}

void update_pause()
{
	u8 x = Screen.scrollX / 8;
    ce96:	c6 95       	lsr	r28
    ce98:	c6 95       	lsr	r28
    ce9a:	c6 95       	lsr	r28
	u8 y = Screen.scrollY / 8;
	
	if (game.joypadState.pressed & BTN_START)
	{
		DrawMap2((x+8)%32, (y+6)%30, map_canvas);
    ce9c:	d0 e0       	ldi	r29, 0x00	; 0
    ce9e:	c8 01       	movw	r24, r16
    cea0:	06 96       	adiw	r24, 0x06	; 6
    cea2:	2e e1       	ldi	r18, 0x1E	; 30
    cea4:	e2 2e       	mov	r14, r18
    cea6:	f1 2c       	mov	r15, r1
    cea8:	b7 01       	movw	r22, r14
    ceaa:	0e 94 2e 68 	call	0xd05c	; 0xd05c <__divmodhi4>
    ceae:	9e 01       	movw	r18, r28
    ceb0:	28 5f       	subi	r18, 0xF8	; 248
    ceb2:	3f 4f       	sbci	r19, 0xFF	; 255
    ceb4:	48 e5       	ldi	r20, 0x58	; 88
    ceb6:	5b e5       	ldi	r21, 0x5B	; 91
    ceb8:	68 2f       	mov	r22, r24
    ceba:	82 2f       	mov	r24, r18
    cebc:	8f 71       	andi	r24, 0x1F	; 31
    cebe:	0e 94 dc 48 	call	0x91b8	; 0x91b8 <DrawMap>
		LBPrint((x+13)%32, (y+9)%30, (char*) strPaused);
    cec2:	c8 01       	movw	r24, r16
    cec4:	09 96       	adiw	r24, 0x09	; 9
    cec6:	b7 01       	movw	r22, r14
    cec8:	0e 94 2e 68 	call	0xd05c	; 0xd05c <__divmodhi4>
    cecc:	9e 01       	movw	r18, r28
    cece:	23 5f       	subi	r18, 0xF3	; 243
    ced0:	3f 4f       	sbci	r19, 0xFF	; 255
    ced2:	45 e6       	ldi	r20, 0x65	; 101
    ced4:	5b e0       	ldi	r21, 0x0B	; 11
    ced6:	68 2f       	mov	r22, r24
    ced8:	82 2f       	mov	r24, r18
    ceda:	8f 71       	andi	r24, 0x1F	; 31
    cedc:	0e 94 73 4a 	call	0x94e6	; 0x94e6 <LBPrint>
		LBPrint((x+10)%32, (y+12)%30, (char*) strExitGame);
    cee0:	c8 01       	movw	r24, r16
    cee2:	0c 96       	adiw	r24, 0x0c	; 12
    cee4:	b7 01       	movw	r22, r14
    cee6:	0e 94 2e 68 	call	0xd05c	; 0xd05c <__divmodhi4>
    ceea:	2a 96       	adiw	r28, 0x0a	; 10
    ceec:	4b e6       	ldi	r20, 0x6B	; 107
    ceee:	5b e0       	ldi	r21, 0x0B	; 11
    cef0:	68 2f       	mov	r22, r24
    cef2:	8c 2f       	mov	r24, r28
    cef4:	8f 71       	andi	r24, 0x1F	; 31
    cef6:	0e 94 73 4a 	call	0x94e6	; 0x94e6 <LBPrint>
		hide_sprites(0, MAX_EXTENDED_SPRITES);
    cefa:	64 e1       	ldi	r22, 0x14	; 20
    cefc:	80 e0       	ldi	r24, 0x00	; 0
    cefe:	0e 94 88 5d 	call	0xbb10	; 0xbb10 <hide_sprites>
		LBRotateSprites();
    cf02:	0e 94 d4 4b 	call	0x97a8	; 0x97a8 <LBRotateSprites>
		while (1)
		{
			WaitVsync(1);
    cf06:	81 e0       	ldi	r24, 0x01	; 1
    cf08:	90 e0       	ldi	r25, 0x00	; 0
    cf0a:	0e 94 45 49 	call	0x928a	; 0x928a <WaitVsync>
			LBGetJoyPadState(&game.joypadState, 0);
    cf0e:	60 e0       	ldi	r22, 0x00	; 0
    cf10:	8f e9       	ldi	r24, 0x9F	; 159
    cf12:	9f e0       	ldi	r25, 0x0F	; 15
    cf14:	0e 94 08 4a 	call	0x9410	; 0x9410 <LBGetJoyPadState>
			if (game.joypadState.pressed & BTN_START)
    cf18:	80 91 9f 0f 	lds	r24, 0x0F9F
    cf1c:	90 91 a0 0f 	lds	r25, 0x0FA0
    cf20:	83 ff       	sbrs	r24, 3
    cf22:	08 c0       	rjmp	.+16     	; 0xcf34 <update_pause+0xc2>
				exit_game();
				break;
			}
		}
	}
}
    cf24:	df 91       	pop	r29
    cf26:	cf 91       	pop	r28
    cf28:	1f 91       	pop	r17
    cf2a:	0f 91       	pop	r16
    cf2c:	ff 90       	pop	r15
    cf2e:	ef 90       	pop	r14
		{
			WaitVsync(1);
			LBGetJoyPadState(&game.joypadState, 0);
			if (game.joypadState.pressed & BTN_START)
			{
				render_camera_view();
    cf30:	0c 94 ce 4e 	jmp	0x9d9c	; 0x9d9c <render_camera_view>
				break;
			}
			else if (game.joypadState.pressed & BTN_X)
    cf34:	91 ff       	sbrs	r25, 1
    cf36:	e7 cf       	rjmp	.-50     	; 0xcf06 <update_pause+0x94>
			{
				tally_score((char*)strGameOver, 0);
    cf38:	60 e0       	ldi	r22, 0x00	; 0
    cf3a:	70 e0       	ldi	r23, 0x00	; 0
    cf3c:	89 e4       	ldi	r24, 0x49	; 73
    cf3e:	9b e0       	ldi	r25, 0x0B	; 11
    cf40:	0e 94 8a 61 	call	0xc314	; 0xc314 <tally_score>
				exit_game();
				break;
			}
		}
	}
}
    cf44:	df 91       	pop	r29
    cf46:	cf 91       	pop	r28
    cf48:	1f 91       	pop	r17
    cf4a:	0f 91       	pop	r16
    cf4c:	ff 90       	pop	r15
    cf4e:	ef 90       	pop	r14
				break;
			}
			else if (game.joypadState.pressed & BTN_X)
			{
				tally_score((char*)strGameOver, 0);
				exit_game();
    cf50:	0c 94 97 60 	jmp	0xc12e	; 0xc12e <exit_game>
				break;
			}
		}
	}
}
    cf54:	df 91       	pop	r29
    cf56:	cf 91       	pop	r28
    cf58:	1f 91       	pop	r17
    cf5a:	0f 91       	pop	r16
    cf5c:	ff 90       	pop	r15
    cf5e:	ef 90       	pop	r14
    cf60:	08 95       	ret

0000cf62 <main>:
}

int main()
{
	// Initialize
	GetPrngNumber(GetTrueRandomSeed());
    cf62:	0e 94 35 3b 	call	0x766a	; 0x766a <GetTrueRandomSeed>
    cf66:	0e 94 b5 3c 	call	0x796a	; 0x796a <GetPrngNumber>
	InitMusicPlayer(my_patches);
    cf6a:	81 e5       	ldi	r24, 0x51	; 81
    cf6c:	9d e1       	ldi	r25, 0x1D	; 29
    cf6e:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <InitMusicPlayer>
	ClearVram();
    cf72:	0e 94 bd 3a 	call	0x757a	; 0x757a <ClearVram>
	SetMasterVolume(0x05);
    cf76:	85 e0       	ldi	r24, 0x05	; 5
    cf78:	0e 94 43 41 	call	0x8286	; 0x8286 <SetMasterVolume>
	SetTileTable(tiles_data);
    cf7c:	89 e3       	ldi	r24, 0x39	; 57
    cf7e:	98 e3       	ldi	r25, 0x38	; 56
    cf80:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <SetTileTable>
	SetSpritesTileTable(sprites_data);
    cf84:	80 ed       	ldi	r24, 0xD0	; 208
    cf86:	9e e1       	ldi	r25, 0x1E	; 30
    cf88:	0e 94 b8 3a 	call	0x7570	; 0x7570 <SetSpritesTileTable>
	}
}

void LBSetFontTilesMap(char* tiles_map)
{
	font_tiles_map = tiles_map;
    cf8c:	89 eb       	ldi	r24, 0xB9	; 185
    cf8e:	9a e5       	ldi	r25, 0x5A	; 90
    cf90:	90 93 83 0d 	sts	0x0D83, r25
    cf94:	80 93 82 0d 	sts	0x0D82, r24
	LBSetFontTilesMap((char*) map_font);
	init_default_high_scores();
    cf98:	0e 94 17 4c 	call	0x982e	; 0x982e <init_default_high_scores>
	load_splash();
    cf9c:	0e 94 51 5f 	call	0xbea2	; 0xbea2 <load_splash>
	while (1)
	{
		WaitVsync(1);
    cfa0:	81 e0       	ldi	r24, 0x01	; 1
    cfa2:	90 e0       	ldi	r25, 0x00	; 0
    cfa4:	0e 94 45 49 	call	0x928a	; 0x928a <WaitVsync>
		LBGetJoyPadState(&game.joypadState, 0);
    cfa8:	60 e0       	ldi	r22, 0x00	; 0
    cfaa:	8f e9       	ldi	r24, 0x9F	; 159
    cfac:	9f e0       	ldi	r25, 0x0F	; 15
    cfae:	0e 94 08 4a 	call	0x9410	; 0x9410 <LBGetJoyPadState>
		if (game.current_screen == LEVEL)
    cfb2:	80 91 ba 0d 	lds	r24, 0x0DBA
    cfb6:	82 30       	cpi	r24, 0x02	; 2
    cfb8:	b9 f4       	brne	.+46     	; 0xcfe8 <main+0x86>
		{
			update_level();
    cfba:	0e 94 ed 65 	call	0xcbda	; 0xcbda <update_level>
			if (update_player())
    cfbe:	0e 94 fb 62 	call	0xc5f6	; 0xc5f6 <update_player>
    cfc2:	88 23       	and	r24, r24
    cfc4:	d1 f0       	breq	.+52     	; 0xcffa <main+0x98>
			{
				update_shot();
    cfc6:	0e 94 de 51 	call	0xa3bc	; 0xa3bc <update_shot>
				update_enemies();
    cfca:	0e 94 6d 59 	call	0xb2da	; 0xb2da <update_enemies>
				update_enemy_shots();
    cfce:	0e 94 b2 59 	call	0xb364	; 0xb364 <update_enemy_shots>
				animate_player();
    cfd2:	0e 94 b8 58 	call	0xb170	; 0xb170 <animate_player>
				animate_shot();
    cfd6:	0e 94 34 56 	call	0xac68	; 0xac68 <animate_shot>
				animate_enemies();
    cfda:	0e 94 4c 5a 	call	0xb498	; 0xb498 <animate_enemies>
				animate_enemy_shots();
    cfde:	0e 94 15 5b 	call	0xb62a	; 0xb62a <animate_enemy_shots>
				update_pause();
    cfe2:	0e 94 39 67 	call	0xce72	; 0xce72 <update_pause>
    cfe6:	09 c0       	rjmp	.+18     	; 0xcffa <main+0x98>
			}
		}
		else if (game.current_screen == SPLASH)
    cfe8:	81 11       	cpse	r24, r1
    cfea:	03 c0       	rjmp	.+6      	; 0xcff2 <main+0x90>
		{
			update_splash();
    cfec:	0e 94 a5 60 	call	0xc14a	; 0xc14a <update_splash>
    cff0:	04 c0       	rjmp	.+8      	; 0xcffa <main+0x98>
			
		}
		else if (game.current_screen == HIGH_SCORES)
    cff2:	81 30       	cpi	r24, 0x01	; 1
    cff4:	11 f4       	brne	.+4      	; 0xcffa <main+0x98>
		{
			update_high_scores();
    cff6:	0e 94 ec 60 	call	0xc1d8	; 0xc1d8 <update_high_scores>
			
		}
		LBRotateSprites();
    cffa:	0e 94 d4 4b 	call	0x97a8	; 0x97a8 <LBRotateSprites>
	}
    cffe:	d0 cf       	rjmp	.-96     	; 0xcfa0 <main+0x3e>

0000d000 <__udivmodqi4>:
    d000:	99 1b       	sub	r25, r25
    d002:	79 e0       	ldi	r23, 0x09	; 9
    d004:	04 c0       	rjmp	.+8      	; 0xd00e <__udivmodqi4_ep>

0000d006 <__udivmodqi4_loop>:
    d006:	99 1f       	adc	r25, r25
    d008:	96 17       	cp	r25, r22
    d00a:	08 f0       	brcs	.+2      	; 0xd00e <__udivmodqi4_ep>
    d00c:	96 1b       	sub	r25, r22

0000d00e <__udivmodqi4_ep>:
    d00e:	88 1f       	adc	r24, r24
    d010:	7a 95       	dec	r23
    d012:	c9 f7       	brne	.-14     	; 0xd006 <__udivmodqi4_loop>
    d014:	80 95       	com	r24
    d016:	08 95       	ret

0000d018 <__divmodqi4>:
    d018:	87 fb       	bst	r24, 7
    d01a:	08 2e       	mov	r0, r24
    d01c:	06 26       	eor	r0, r22
    d01e:	87 fd       	sbrc	r24, 7
    d020:	81 95       	neg	r24
    d022:	67 fd       	sbrc	r22, 7
    d024:	61 95       	neg	r22
    d026:	0e 94 00 68 	call	0xd000	; 0xd000 <__udivmodqi4>
    d02a:	0e f4       	brtc	.+2      	; 0xd02e <__divmodqi4_1>
    d02c:	91 95       	neg	r25

0000d02e <__divmodqi4_1>:
    d02e:	07 fc       	sbrc	r0, 7
    d030:	81 95       	neg	r24

0000d032 <__divmodqi4_exit>:
    d032:	08 95       	ret

0000d034 <__udivmodhi4>:
    d034:	aa 1b       	sub	r26, r26
    d036:	bb 1b       	sub	r27, r27
    d038:	51 e1       	ldi	r21, 0x11	; 17
    d03a:	07 c0       	rjmp	.+14     	; 0xd04a <__udivmodhi4_ep>

0000d03c <__udivmodhi4_loop>:
    d03c:	aa 1f       	adc	r26, r26
    d03e:	bb 1f       	adc	r27, r27
    d040:	a6 17       	cp	r26, r22
    d042:	b7 07       	cpc	r27, r23
    d044:	10 f0       	brcs	.+4      	; 0xd04a <__udivmodhi4_ep>
    d046:	a6 1b       	sub	r26, r22
    d048:	b7 0b       	sbc	r27, r23

0000d04a <__udivmodhi4_ep>:
    d04a:	88 1f       	adc	r24, r24
    d04c:	99 1f       	adc	r25, r25
    d04e:	5a 95       	dec	r21
    d050:	a9 f7       	brne	.-22     	; 0xd03c <__udivmodhi4_loop>
    d052:	80 95       	com	r24
    d054:	90 95       	com	r25
    d056:	bc 01       	movw	r22, r24
    d058:	cd 01       	movw	r24, r26
    d05a:	08 95       	ret

0000d05c <__divmodhi4>:
    d05c:	97 fb       	bst	r25, 7
    d05e:	07 2e       	mov	r0, r23
    d060:	16 f4       	brtc	.+4      	; 0xd066 <__divmodhi4+0xa>
    d062:	00 94       	com	r0
    d064:	07 d0       	rcall	.+14     	; 0xd074 <__divmodhi4_neg1>
    d066:	77 fd       	sbrc	r23, 7
    d068:	09 d0       	rcall	.+18     	; 0xd07c <__divmodhi4_neg2>
    d06a:	0e 94 1a 68 	call	0xd034	; 0xd034 <__udivmodhi4>
    d06e:	07 fc       	sbrc	r0, 7
    d070:	05 d0       	rcall	.+10     	; 0xd07c <__divmodhi4_neg2>
    d072:	3e f4       	brtc	.+14     	; 0xd082 <__divmodhi4_exit>

0000d074 <__divmodhi4_neg1>:
    d074:	90 95       	com	r25
    d076:	81 95       	neg	r24
    d078:	9f 4f       	sbci	r25, 0xFF	; 255
    d07a:	08 95       	ret

0000d07c <__divmodhi4_neg2>:
    d07c:	70 95       	com	r23
    d07e:	61 95       	neg	r22
    d080:	7f 4f       	sbci	r23, 0xFF	; 255

0000d082 <__divmodhi4_exit>:
    d082:	08 95       	ret

0000d084 <__tablejump2__>:
    d084:	ee 0f       	add	r30, r30
    d086:	ff 1f       	adc	r31, r31
    d088:	05 90       	lpm	r0, Z+
    d08a:	f4 91       	lpm	r31, Z
    d08c:	e0 2d       	mov	r30, r0
    d08e:	09 94       	ijmp

0000d090 <__subsf3>:
    d090:	50 58       	subi	r21, 0x80	; 128

0000d092 <__addsf3>:
    d092:	bb 27       	eor	r27, r27
    d094:	aa 27       	eor	r26, r26
    d096:	0e d0       	rcall	.+28     	; 0xd0b4 <__addsf3x>
    d098:	08 c1       	rjmp	.+528    	; 0xd2aa <__fp_round>
    d09a:	f9 d0       	rcall	.+498    	; 0xd28e <__fp_pscA>
    d09c:	30 f0       	brcs	.+12     	; 0xd0aa <__addsf3+0x18>
    d09e:	fe d0       	rcall	.+508    	; 0xd29c <__fp_pscB>
    d0a0:	20 f0       	brcs	.+8      	; 0xd0aa <__addsf3+0x18>
    d0a2:	31 f4       	brne	.+12     	; 0xd0b0 <__addsf3+0x1e>
    d0a4:	9f 3f       	cpi	r25, 0xFF	; 255
    d0a6:	11 f4       	brne	.+4      	; 0xd0ac <__addsf3+0x1a>
    d0a8:	1e f4       	brtc	.+6      	; 0xd0b0 <__addsf3+0x1e>
    d0aa:	ee c0       	rjmp	.+476    	; 0xd288 <__fp_nan>
    d0ac:	0e f4       	brtc	.+2      	; 0xd0b0 <__addsf3+0x1e>
    d0ae:	e0 95       	com	r30
    d0b0:	e7 fb       	bst	r30, 7
    d0b2:	e4 c0       	rjmp	.+456    	; 0xd27c <__fp_inf>

0000d0b4 <__addsf3x>:
    d0b4:	e9 2f       	mov	r30, r25
    d0b6:	0a d1       	rcall	.+532    	; 0xd2cc <__fp_split3>
    d0b8:	80 f3       	brcs	.-32     	; 0xd09a <__addsf3+0x8>
    d0ba:	ba 17       	cp	r27, r26
    d0bc:	62 07       	cpc	r22, r18
    d0be:	73 07       	cpc	r23, r19
    d0c0:	84 07       	cpc	r24, r20
    d0c2:	95 07       	cpc	r25, r21
    d0c4:	18 f0       	brcs	.+6      	; 0xd0cc <__addsf3x+0x18>
    d0c6:	71 f4       	brne	.+28     	; 0xd0e4 <__addsf3x+0x30>
    d0c8:	9e f5       	brtc	.+102    	; 0xd130 <__addsf3x+0x7c>
    d0ca:	22 c1       	rjmp	.+580    	; 0xd310 <__fp_zero>
    d0cc:	0e f4       	brtc	.+2      	; 0xd0d0 <__addsf3x+0x1c>
    d0ce:	e0 95       	com	r30
    d0d0:	0b 2e       	mov	r0, r27
    d0d2:	ba 2f       	mov	r27, r26
    d0d4:	a0 2d       	mov	r26, r0
    d0d6:	0b 01       	movw	r0, r22
    d0d8:	b9 01       	movw	r22, r18
    d0da:	90 01       	movw	r18, r0
    d0dc:	0c 01       	movw	r0, r24
    d0de:	ca 01       	movw	r24, r20
    d0e0:	a0 01       	movw	r20, r0
    d0e2:	11 24       	eor	r1, r1
    d0e4:	ff 27       	eor	r31, r31
    d0e6:	59 1b       	sub	r21, r25
    d0e8:	99 f0       	breq	.+38     	; 0xd110 <__addsf3x+0x5c>
    d0ea:	59 3f       	cpi	r21, 0xF9	; 249
    d0ec:	50 f4       	brcc	.+20     	; 0xd102 <__addsf3x+0x4e>
    d0ee:	50 3e       	cpi	r21, 0xE0	; 224
    d0f0:	68 f1       	brcs	.+90     	; 0xd14c <__addsf3x+0x98>
    d0f2:	1a 16       	cp	r1, r26
    d0f4:	f0 40       	sbci	r31, 0x00	; 0
    d0f6:	a2 2f       	mov	r26, r18
    d0f8:	23 2f       	mov	r18, r19
    d0fa:	34 2f       	mov	r19, r20
    d0fc:	44 27       	eor	r20, r20
    d0fe:	58 5f       	subi	r21, 0xF8	; 248
    d100:	f3 cf       	rjmp	.-26     	; 0xd0e8 <__addsf3x+0x34>
    d102:	46 95       	lsr	r20
    d104:	37 95       	ror	r19
    d106:	27 95       	ror	r18
    d108:	a7 95       	ror	r26
    d10a:	f0 40       	sbci	r31, 0x00	; 0
    d10c:	53 95       	inc	r21
    d10e:	c9 f7       	brne	.-14     	; 0xd102 <__addsf3x+0x4e>
    d110:	7e f4       	brtc	.+30     	; 0xd130 <__addsf3x+0x7c>
    d112:	1f 16       	cp	r1, r31
    d114:	ba 0b       	sbc	r27, r26
    d116:	62 0b       	sbc	r22, r18
    d118:	73 0b       	sbc	r23, r19
    d11a:	84 0b       	sbc	r24, r20
    d11c:	ba f0       	brmi	.+46     	; 0xd14c <__addsf3x+0x98>
    d11e:	91 50       	subi	r25, 0x01	; 1
    d120:	a1 f0       	breq	.+40     	; 0xd14a <__addsf3x+0x96>
    d122:	ff 0f       	add	r31, r31
    d124:	bb 1f       	adc	r27, r27
    d126:	66 1f       	adc	r22, r22
    d128:	77 1f       	adc	r23, r23
    d12a:	88 1f       	adc	r24, r24
    d12c:	c2 f7       	brpl	.-16     	; 0xd11e <__addsf3x+0x6a>
    d12e:	0e c0       	rjmp	.+28     	; 0xd14c <__addsf3x+0x98>
    d130:	ba 0f       	add	r27, r26
    d132:	62 1f       	adc	r22, r18
    d134:	73 1f       	adc	r23, r19
    d136:	84 1f       	adc	r24, r20
    d138:	48 f4       	brcc	.+18     	; 0xd14c <__addsf3x+0x98>
    d13a:	87 95       	ror	r24
    d13c:	77 95       	ror	r23
    d13e:	67 95       	ror	r22
    d140:	b7 95       	ror	r27
    d142:	f7 95       	ror	r31
    d144:	9e 3f       	cpi	r25, 0xFE	; 254
    d146:	08 f0       	brcs	.+2      	; 0xd14a <__addsf3x+0x96>
    d148:	b3 cf       	rjmp	.-154    	; 0xd0b0 <__addsf3+0x1e>
    d14a:	93 95       	inc	r25
    d14c:	88 0f       	add	r24, r24
    d14e:	08 f0       	brcs	.+2      	; 0xd152 <__addsf3x+0x9e>
    d150:	99 27       	eor	r25, r25
    d152:	ee 0f       	add	r30, r30
    d154:	97 95       	ror	r25
    d156:	87 95       	ror	r24
    d158:	08 95       	ret

0000d15a <__cmpsf2>:
    d15a:	6c d0       	rcall	.+216    	; 0xd234 <__fp_cmp>
    d15c:	08 f4       	brcc	.+2      	; 0xd160 <__cmpsf2+0x6>
    d15e:	81 e0       	ldi	r24, 0x01	; 1
    d160:	08 95       	ret

0000d162 <__fixunssfsi>:
    d162:	bc d0       	rcall	.+376    	; 0xd2dc <__fp_splitA>
    d164:	88 f0       	brcs	.+34     	; 0xd188 <__fixunssfsi+0x26>
    d166:	9f 57       	subi	r25, 0x7F	; 127
    d168:	90 f0       	brcs	.+36     	; 0xd18e <__fixunssfsi+0x2c>
    d16a:	b9 2f       	mov	r27, r25
    d16c:	99 27       	eor	r25, r25
    d16e:	b7 51       	subi	r27, 0x17	; 23
    d170:	a0 f0       	brcs	.+40     	; 0xd19a <__fixunssfsi+0x38>
    d172:	d1 f0       	breq	.+52     	; 0xd1a8 <__fixunssfsi+0x46>
    d174:	66 0f       	add	r22, r22
    d176:	77 1f       	adc	r23, r23
    d178:	88 1f       	adc	r24, r24
    d17a:	99 1f       	adc	r25, r25
    d17c:	1a f0       	brmi	.+6      	; 0xd184 <__fixunssfsi+0x22>
    d17e:	ba 95       	dec	r27
    d180:	c9 f7       	brne	.-14     	; 0xd174 <__fixunssfsi+0x12>
    d182:	12 c0       	rjmp	.+36     	; 0xd1a8 <__fixunssfsi+0x46>
    d184:	b1 30       	cpi	r27, 0x01	; 1
    d186:	81 f0       	breq	.+32     	; 0xd1a8 <__fixunssfsi+0x46>
    d188:	c3 d0       	rcall	.+390    	; 0xd310 <__fp_zero>
    d18a:	b1 e0       	ldi	r27, 0x01	; 1
    d18c:	08 95       	ret
    d18e:	c0 c0       	rjmp	.+384    	; 0xd310 <__fp_zero>
    d190:	67 2f       	mov	r22, r23
    d192:	78 2f       	mov	r23, r24
    d194:	88 27       	eor	r24, r24
    d196:	b8 5f       	subi	r27, 0xF8	; 248
    d198:	39 f0       	breq	.+14     	; 0xd1a8 <__fixunssfsi+0x46>
    d19a:	b9 3f       	cpi	r27, 0xF9	; 249
    d19c:	cc f3       	brlt	.-14     	; 0xd190 <__fixunssfsi+0x2e>
    d19e:	86 95       	lsr	r24
    d1a0:	77 95       	ror	r23
    d1a2:	67 95       	ror	r22
    d1a4:	b3 95       	inc	r27
    d1a6:	d9 f7       	brne	.-10     	; 0xd19e <__fixunssfsi+0x3c>
    d1a8:	3e f4       	brtc	.+14     	; 0xd1b8 <__fixunssfsi+0x56>
    d1aa:	90 95       	com	r25
    d1ac:	80 95       	com	r24
    d1ae:	70 95       	com	r23
    d1b0:	61 95       	neg	r22
    d1b2:	7f 4f       	sbci	r23, 0xFF	; 255
    d1b4:	8f 4f       	sbci	r24, 0xFF	; 255
    d1b6:	9f 4f       	sbci	r25, 0xFF	; 255
    d1b8:	08 95       	ret

0000d1ba <__floatunsisf>:
    d1ba:	e8 94       	clt
    d1bc:	09 c0       	rjmp	.+18     	; 0xd1d0 <__floatsisf+0x12>

0000d1be <__floatsisf>:
    d1be:	97 fb       	bst	r25, 7
    d1c0:	3e f4       	brtc	.+14     	; 0xd1d0 <__floatsisf+0x12>
    d1c2:	90 95       	com	r25
    d1c4:	80 95       	com	r24
    d1c6:	70 95       	com	r23
    d1c8:	61 95       	neg	r22
    d1ca:	7f 4f       	sbci	r23, 0xFF	; 255
    d1cc:	8f 4f       	sbci	r24, 0xFF	; 255
    d1ce:	9f 4f       	sbci	r25, 0xFF	; 255
    d1d0:	99 23       	and	r25, r25
    d1d2:	a9 f0       	breq	.+42     	; 0xd1fe <__floatsisf+0x40>
    d1d4:	f9 2f       	mov	r31, r25
    d1d6:	96 e9       	ldi	r25, 0x96	; 150
    d1d8:	bb 27       	eor	r27, r27
    d1da:	93 95       	inc	r25
    d1dc:	f6 95       	lsr	r31
    d1de:	87 95       	ror	r24
    d1e0:	77 95       	ror	r23
    d1e2:	67 95       	ror	r22
    d1e4:	b7 95       	ror	r27
    d1e6:	f1 11       	cpse	r31, r1
    d1e8:	f8 cf       	rjmp	.-16     	; 0xd1da <__floatsisf+0x1c>
    d1ea:	fa f4       	brpl	.+62     	; 0xd22a <__floatsisf+0x6c>
    d1ec:	bb 0f       	add	r27, r27
    d1ee:	11 f4       	brne	.+4      	; 0xd1f4 <__floatsisf+0x36>
    d1f0:	60 ff       	sbrs	r22, 0
    d1f2:	1b c0       	rjmp	.+54     	; 0xd22a <__floatsisf+0x6c>
    d1f4:	6f 5f       	subi	r22, 0xFF	; 255
    d1f6:	7f 4f       	sbci	r23, 0xFF	; 255
    d1f8:	8f 4f       	sbci	r24, 0xFF	; 255
    d1fa:	9f 4f       	sbci	r25, 0xFF	; 255
    d1fc:	16 c0       	rjmp	.+44     	; 0xd22a <__floatsisf+0x6c>
    d1fe:	88 23       	and	r24, r24
    d200:	11 f0       	breq	.+4      	; 0xd206 <__floatsisf+0x48>
    d202:	96 e9       	ldi	r25, 0x96	; 150
    d204:	11 c0       	rjmp	.+34     	; 0xd228 <__floatsisf+0x6a>
    d206:	77 23       	and	r23, r23
    d208:	21 f0       	breq	.+8      	; 0xd212 <__floatsisf+0x54>
    d20a:	9e e8       	ldi	r25, 0x8E	; 142
    d20c:	87 2f       	mov	r24, r23
    d20e:	76 2f       	mov	r23, r22
    d210:	05 c0       	rjmp	.+10     	; 0xd21c <__floatsisf+0x5e>
    d212:	66 23       	and	r22, r22
    d214:	71 f0       	breq	.+28     	; 0xd232 <__floatsisf+0x74>
    d216:	96 e8       	ldi	r25, 0x86	; 134
    d218:	86 2f       	mov	r24, r22
    d21a:	70 e0       	ldi	r23, 0x00	; 0
    d21c:	60 e0       	ldi	r22, 0x00	; 0
    d21e:	2a f0       	brmi	.+10     	; 0xd22a <__floatsisf+0x6c>
    d220:	9a 95       	dec	r25
    d222:	66 0f       	add	r22, r22
    d224:	77 1f       	adc	r23, r23
    d226:	88 1f       	adc	r24, r24
    d228:	da f7       	brpl	.-10     	; 0xd220 <__floatsisf+0x62>
    d22a:	88 0f       	add	r24, r24
    d22c:	96 95       	lsr	r25
    d22e:	87 95       	ror	r24
    d230:	97 f9       	bld	r25, 7
    d232:	08 95       	ret

0000d234 <__fp_cmp>:
    d234:	99 0f       	add	r25, r25
    d236:	00 08       	sbc	r0, r0
    d238:	55 0f       	add	r21, r21
    d23a:	aa 0b       	sbc	r26, r26
    d23c:	e0 e8       	ldi	r30, 0x80	; 128
    d23e:	fe ef       	ldi	r31, 0xFE	; 254
    d240:	16 16       	cp	r1, r22
    d242:	17 06       	cpc	r1, r23
    d244:	e8 07       	cpc	r30, r24
    d246:	f9 07       	cpc	r31, r25
    d248:	c0 f0       	brcs	.+48     	; 0xd27a <__fp_cmp+0x46>
    d24a:	12 16       	cp	r1, r18
    d24c:	13 06       	cpc	r1, r19
    d24e:	e4 07       	cpc	r30, r20
    d250:	f5 07       	cpc	r31, r21
    d252:	98 f0       	brcs	.+38     	; 0xd27a <__fp_cmp+0x46>
    d254:	62 1b       	sub	r22, r18
    d256:	73 0b       	sbc	r23, r19
    d258:	84 0b       	sbc	r24, r20
    d25a:	95 0b       	sbc	r25, r21
    d25c:	39 f4       	brne	.+14     	; 0xd26c <__fp_cmp+0x38>
    d25e:	0a 26       	eor	r0, r26
    d260:	61 f0       	breq	.+24     	; 0xd27a <__fp_cmp+0x46>
    d262:	23 2b       	or	r18, r19
    d264:	24 2b       	or	r18, r20
    d266:	25 2b       	or	r18, r21
    d268:	21 f4       	brne	.+8      	; 0xd272 <__fp_cmp+0x3e>
    d26a:	08 95       	ret
    d26c:	0a 26       	eor	r0, r26
    d26e:	09 f4       	brne	.+2      	; 0xd272 <__fp_cmp+0x3e>
    d270:	a1 40       	sbci	r26, 0x01	; 1
    d272:	a6 95       	lsr	r26
    d274:	8f ef       	ldi	r24, 0xFF	; 255
    d276:	81 1d       	adc	r24, r1
    d278:	81 1d       	adc	r24, r1
    d27a:	08 95       	ret

0000d27c <__fp_inf>:
    d27c:	97 f9       	bld	r25, 7
    d27e:	9f 67       	ori	r25, 0x7F	; 127
    d280:	80 e8       	ldi	r24, 0x80	; 128
    d282:	70 e0       	ldi	r23, 0x00	; 0
    d284:	60 e0       	ldi	r22, 0x00	; 0
    d286:	08 95       	ret

0000d288 <__fp_nan>:
    d288:	9f ef       	ldi	r25, 0xFF	; 255
    d28a:	80 ec       	ldi	r24, 0xC0	; 192
    d28c:	08 95       	ret

0000d28e <__fp_pscA>:
    d28e:	00 24       	eor	r0, r0
    d290:	0a 94       	dec	r0
    d292:	16 16       	cp	r1, r22
    d294:	17 06       	cpc	r1, r23
    d296:	18 06       	cpc	r1, r24
    d298:	09 06       	cpc	r0, r25
    d29a:	08 95       	ret

0000d29c <__fp_pscB>:
    d29c:	00 24       	eor	r0, r0
    d29e:	0a 94       	dec	r0
    d2a0:	12 16       	cp	r1, r18
    d2a2:	13 06       	cpc	r1, r19
    d2a4:	14 06       	cpc	r1, r20
    d2a6:	05 06       	cpc	r0, r21
    d2a8:	08 95       	ret

0000d2aa <__fp_round>:
    d2aa:	09 2e       	mov	r0, r25
    d2ac:	03 94       	inc	r0
    d2ae:	00 0c       	add	r0, r0
    d2b0:	11 f4       	brne	.+4      	; 0xd2b6 <__fp_round+0xc>
    d2b2:	88 23       	and	r24, r24
    d2b4:	52 f0       	brmi	.+20     	; 0xd2ca <__fp_round+0x20>
    d2b6:	bb 0f       	add	r27, r27
    d2b8:	40 f4       	brcc	.+16     	; 0xd2ca <__fp_round+0x20>
    d2ba:	bf 2b       	or	r27, r31
    d2bc:	11 f4       	brne	.+4      	; 0xd2c2 <__fp_round+0x18>
    d2be:	60 ff       	sbrs	r22, 0
    d2c0:	04 c0       	rjmp	.+8      	; 0xd2ca <__fp_round+0x20>
    d2c2:	6f 5f       	subi	r22, 0xFF	; 255
    d2c4:	7f 4f       	sbci	r23, 0xFF	; 255
    d2c6:	8f 4f       	sbci	r24, 0xFF	; 255
    d2c8:	9f 4f       	sbci	r25, 0xFF	; 255
    d2ca:	08 95       	ret

0000d2cc <__fp_split3>:
    d2cc:	57 fd       	sbrc	r21, 7
    d2ce:	90 58       	subi	r25, 0x80	; 128
    d2d0:	44 0f       	add	r20, r20
    d2d2:	55 1f       	adc	r21, r21
    d2d4:	59 f0       	breq	.+22     	; 0xd2ec <__fp_splitA+0x10>
    d2d6:	5f 3f       	cpi	r21, 0xFF	; 255
    d2d8:	71 f0       	breq	.+28     	; 0xd2f6 <__fp_splitA+0x1a>
    d2da:	47 95       	ror	r20

0000d2dc <__fp_splitA>:
    d2dc:	88 0f       	add	r24, r24
    d2de:	97 fb       	bst	r25, 7
    d2e0:	99 1f       	adc	r25, r25
    d2e2:	61 f0       	breq	.+24     	; 0xd2fc <__fp_splitA+0x20>
    d2e4:	9f 3f       	cpi	r25, 0xFF	; 255
    d2e6:	79 f0       	breq	.+30     	; 0xd306 <__fp_splitA+0x2a>
    d2e8:	87 95       	ror	r24
    d2ea:	08 95       	ret
    d2ec:	12 16       	cp	r1, r18
    d2ee:	13 06       	cpc	r1, r19
    d2f0:	14 06       	cpc	r1, r20
    d2f2:	55 1f       	adc	r21, r21
    d2f4:	f2 cf       	rjmp	.-28     	; 0xd2da <__fp_split3+0xe>
    d2f6:	46 95       	lsr	r20
    d2f8:	f1 df       	rcall	.-30     	; 0xd2dc <__fp_splitA>
    d2fa:	08 c0       	rjmp	.+16     	; 0xd30c <__fp_splitA+0x30>
    d2fc:	16 16       	cp	r1, r22
    d2fe:	17 06       	cpc	r1, r23
    d300:	18 06       	cpc	r1, r24
    d302:	99 1f       	adc	r25, r25
    d304:	f1 cf       	rjmp	.-30     	; 0xd2e8 <__fp_splitA+0xc>
    d306:	86 95       	lsr	r24
    d308:	71 05       	cpc	r23, r1
    d30a:	61 05       	cpc	r22, r1
    d30c:	08 94       	sec
    d30e:	08 95       	ret

0000d310 <__fp_zero>:
    d310:	e8 94       	clt

0000d312 <__fp_szero>:
    d312:	bb 27       	eor	r27, r27
    d314:	66 27       	eor	r22, r22
    d316:	77 27       	eor	r23, r23
    d318:	cb 01       	movw	r24, r22
    d31a:	97 f9       	bld	r25, 7
    d31c:	08 95       	ret

0000d31e <__gesf2>:
    d31e:	8a df       	rcall	.-236    	; 0xd234 <__fp_cmp>
    d320:	08 f4       	brcc	.+2      	; 0xd324 <__gesf2+0x6>
    d322:	8f ef       	ldi	r24, 0xFF	; 255
    d324:	08 95       	ret

0000d326 <__mulsf3>:
    d326:	0b d0       	rcall	.+22     	; 0xd33e <__mulsf3x>
    d328:	c0 cf       	rjmp	.-128    	; 0xd2aa <__fp_round>
    d32a:	b1 df       	rcall	.-158    	; 0xd28e <__fp_pscA>
    d32c:	28 f0       	brcs	.+10     	; 0xd338 <__mulsf3+0x12>
    d32e:	b6 df       	rcall	.-148    	; 0xd29c <__fp_pscB>
    d330:	18 f0       	brcs	.+6      	; 0xd338 <__mulsf3+0x12>
    d332:	95 23       	and	r25, r21
    d334:	09 f0       	breq	.+2      	; 0xd338 <__mulsf3+0x12>
    d336:	a2 cf       	rjmp	.-188    	; 0xd27c <__fp_inf>
    d338:	a7 cf       	rjmp	.-178    	; 0xd288 <__fp_nan>
    d33a:	11 24       	eor	r1, r1
    d33c:	ea cf       	rjmp	.-44     	; 0xd312 <__fp_szero>

0000d33e <__mulsf3x>:
    d33e:	c6 df       	rcall	.-116    	; 0xd2cc <__fp_split3>
    d340:	a0 f3       	brcs	.-24     	; 0xd32a <__mulsf3+0x4>

0000d342 <__mulsf3_pse>:
    d342:	95 9f       	mul	r25, r21
    d344:	d1 f3       	breq	.-12     	; 0xd33a <__mulsf3+0x14>
    d346:	95 0f       	add	r25, r21
    d348:	50 e0       	ldi	r21, 0x00	; 0
    d34a:	55 1f       	adc	r21, r21
    d34c:	62 9f       	mul	r22, r18
    d34e:	f0 01       	movw	r30, r0
    d350:	72 9f       	mul	r23, r18
    d352:	bb 27       	eor	r27, r27
    d354:	f0 0d       	add	r31, r0
    d356:	b1 1d       	adc	r27, r1
    d358:	63 9f       	mul	r22, r19
    d35a:	aa 27       	eor	r26, r26
    d35c:	f0 0d       	add	r31, r0
    d35e:	b1 1d       	adc	r27, r1
    d360:	aa 1f       	adc	r26, r26
    d362:	64 9f       	mul	r22, r20
    d364:	66 27       	eor	r22, r22
    d366:	b0 0d       	add	r27, r0
    d368:	a1 1d       	adc	r26, r1
    d36a:	66 1f       	adc	r22, r22
    d36c:	82 9f       	mul	r24, r18
    d36e:	22 27       	eor	r18, r18
    d370:	b0 0d       	add	r27, r0
    d372:	a1 1d       	adc	r26, r1
    d374:	62 1f       	adc	r22, r18
    d376:	73 9f       	mul	r23, r19
    d378:	b0 0d       	add	r27, r0
    d37a:	a1 1d       	adc	r26, r1
    d37c:	62 1f       	adc	r22, r18
    d37e:	83 9f       	mul	r24, r19
    d380:	a0 0d       	add	r26, r0
    d382:	61 1d       	adc	r22, r1
    d384:	22 1f       	adc	r18, r18
    d386:	74 9f       	mul	r23, r20
    d388:	33 27       	eor	r19, r19
    d38a:	a0 0d       	add	r26, r0
    d38c:	61 1d       	adc	r22, r1
    d38e:	23 1f       	adc	r18, r19
    d390:	84 9f       	mul	r24, r20
    d392:	60 0d       	add	r22, r0
    d394:	21 1d       	adc	r18, r1
    d396:	82 2f       	mov	r24, r18
    d398:	76 2f       	mov	r23, r22
    d39a:	6a 2f       	mov	r22, r26
    d39c:	11 24       	eor	r1, r1
    d39e:	9f 57       	subi	r25, 0x7F	; 127
    d3a0:	50 40       	sbci	r21, 0x00	; 0
    d3a2:	8a f0       	brmi	.+34     	; 0xd3c6 <__mulsf3_pse+0x84>
    d3a4:	e1 f0       	breq	.+56     	; 0xd3de <__mulsf3_pse+0x9c>
    d3a6:	88 23       	and	r24, r24
    d3a8:	4a f0       	brmi	.+18     	; 0xd3bc <__mulsf3_pse+0x7a>
    d3aa:	ee 0f       	add	r30, r30
    d3ac:	ff 1f       	adc	r31, r31
    d3ae:	bb 1f       	adc	r27, r27
    d3b0:	66 1f       	adc	r22, r22
    d3b2:	77 1f       	adc	r23, r23
    d3b4:	88 1f       	adc	r24, r24
    d3b6:	91 50       	subi	r25, 0x01	; 1
    d3b8:	50 40       	sbci	r21, 0x00	; 0
    d3ba:	a9 f7       	brne	.-22     	; 0xd3a6 <__mulsf3_pse+0x64>
    d3bc:	9e 3f       	cpi	r25, 0xFE	; 254
    d3be:	51 05       	cpc	r21, r1
    d3c0:	70 f0       	brcs	.+28     	; 0xd3de <__mulsf3_pse+0x9c>
    d3c2:	5c cf       	rjmp	.-328    	; 0xd27c <__fp_inf>
    d3c4:	a6 cf       	rjmp	.-180    	; 0xd312 <__fp_szero>
    d3c6:	5f 3f       	cpi	r21, 0xFF	; 255
    d3c8:	ec f3       	brlt	.-6      	; 0xd3c4 <__mulsf3_pse+0x82>
    d3ca:	98 3e       	cpi	r25, 0xE8	; 232
    d3cc:	dc f3       	brlt	.-10     	; 0xd3c4 <__mulsf3_pse+0x82>
    d3ce:	86 95       	lsr	r24
    d3d0:	77 95       	ror	r23
    d3d2:	67 95       	ror	r22
    d3d4:	b7 95       	ror	r27
    d3d6:	f7 95       	ror	r31
    d3d8:	e7 95       	ror	r30
    d3da:	9f 5f       	subi	r25, 0xFF	; 255
    d3dc:	c1 f7       	brne	.-16     	; 0xd3ce <__mulsf3_pse+0x8c>
    d3de:	fe 2b       	or	r31, r30
    d3e0:	88 0f       	add	r24, r24
    d3e2:	91 1d       	adc	r25, r1
    d3e4:	96 95       	lsr	r25
    d3e6:	87 95       	ror	r24
    d3e8:	97 f9       	bld	r25, 7
    d3ea:	08 95       	ret

0000d3ec <strnlen_P>:
    d3ec:	fc 01       	movw	r30, r24
    d3ee:	05 90       	lpm	r0, Z+
    d3f0:	61 50       	subi	r22, 0x01	; 1
    d3f2:	70 40       	sbci	r23, 0x00	; 0
    d3f4:	01 10       	cpse	r0, r1
    d3f6:	d8 f7       	brcc	.-10     	; 0xd3ee <strnlen_P+0x2>
    d3f8:	80 95       	com	r24
    d3fa:	90 95       	com	r25
    d3fc:	8e 0f       	add	r24, r30
    d3fe:	9f 1f       	adc	r25, r31
    d400:	08 95       	ret

0000d402 <_exit>:
    d402:	f8 94       	cli

0000d404 <__stop_program>:
    d404:	ff cf       	rjmp	.-2      	; 0xd404 <__stop_program>
