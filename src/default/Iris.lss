
Iris.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800500  0000d69a  0000d79a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .noinit       00000400  00800100  00800100  0000d7c0  2**5
                  CONTENTS, READONLY
  2 .text         0000d69a  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .bss          00000b1a  00800510  00800510  0000d7aa  2**1
                  ALLOC
  4 .stab         00000708  00000000  00000000  0000dbc0  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000002f1  00000000  00000000  0000e2c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  0000e5b9  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000006d0  00000000  00000000  0000e5d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000973d  00000000  00000000  0000eca0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001645  00000000  00000000  000183dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000023e0  00000000  00000000  00019a22  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000015d0  00000000  00000000  0001be04  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00001da3  00000000  00000000  0001d3d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000801e  00000000  00000000  0001f177  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000898  00000000  00000000  00027198  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 1a 3a 	jmp	0x7434	; 0x7434 <__ctors_end>
       4:	0c 94 83 3a 	jmp	0x7506	; 0x7506 <__bad_interrupt>
       8:	0c 94 83 3a 	jmp	0x7506	; 0x7506 <__bad_interrupt>
       c:	0c 94 83 3a 	jmp	0x7506	; 0x7506 <__bad_interrupt>
      10:	0c 94 83 3a 	jmp	0x7506	; 0x7506 <__bad_interrupt>
      14:	0c 94 83 3a 	jmp	0x7506	; 0x7506 <__bad_interrupt>
      18:	0c 94 83 3a 	jmp	0x7506	; 0x7506 <__bad_interrupt>
      1c:	0c 94 83 3a 	jmp	0x7506	; 0x7506 <__bad_interrupt>
      20:	0c 94 fb 3f 	jmp	0x7ff6	; 0x7ff6 <__vector_8>
      24:	0c 94 83 3a 	jmp	0x7506	; 0x7506 <__bad_interrupt>
      28:	0c 94 83 3a 	jmp	0x7506	; 0x7506 <__bad_interrupt>
      2c:	0c 94 83 3a 	jmp	0x7506	; 0x7506 <__bad_interrupt>
      30:	0c 94 83 3a 	jmp	0x7506	; 0x7506 <__bad_interrupt>
      34:	0c 94 c7 3d 	jmp	0x7b8e	; 0x7b8e <__vector_13>
      38:	0c 94 07 3e 	jmp	0x7c0e	; 0x7c0e <__vector_14>
      3c:	0c 94 83 3a 	jmp	0x7506	; 0x7506 <__bad_interrupt>
      40:	0c 94 83 3a 	jmp	0x7506	; 0x7506 <__bad_interrupt>
      44:	0c 94 83 3a 	jmp	0x7506	; 0x7506 <__bad_interrupt>
      48:	0c 94 83 3a 	jmp	0x7506	; 0x7506 <__bad_interrupt>
      4c:	0c 94 83 3a 	jmp	0x7506	; 0x7506 <__bad_interrupt>
      50:	0c 94 83 3a 	jmp	0x7506	; 0x7506 <__bad_interrupt>
      54:	0c 94 83 3a 	jmp	0x7506	; 0x7506 <__bad_interrupt>
      58:	0c 94 83 3a 	jmp	0x7506	; 0x7506 <__bad_interrupt>
      5c:	0c 94 83 3a 	jmp	0x7506	; 0x7506 <__bad_interrupt>
      60:	0c 94 83 3a 	jmp	0x7506	; 0x7506 <__bad_interrupt>
      64:	0c 94 83 3a 	jmp	0x7506	; 0x7506 <__bad_interrupt>
      68:	0c 94 83 3a 	jmp	0x7506	; 0x7506 <__bad_interrupt>
      6c:	0c 94 83 3a 	jmp	0x7506	; 0x7506 <__bad_interrupt>
      70:	52 5e       	subi	r21, 0xE2	; 226
      72:	61 5e       	subi	r22, 0xE1	; 225
      74:	55 5e       	subi	r21, 0xE5	; 229
      76:	61 5e       	subi	r22, 0xE1	; 225
      78:	58 5e       	subi	r21, 0xE8	; 232
      7a:	61 5e       	subi	r22, 0xE1	; 225
      7c:	5b 5e       	subi	r21, 0xEB	; 235
      7e:	61 5e       	subi	r22, 0xE1	; 225
      80:	5e 5e       	subi	r21, 0xEE	; 238
      82:	61 5e       	subi	r22, 0xE1	; 225

00000084 <__trampolines_end>:
      84:	81 00       	.word	0x0081	; ????
      86:	45 00       	.word	0x0045	; ????
      88:	27 ff       	sbrs	r18, 7
      8a:	24 ff       	sbrs	r18, 4
      8c:	2a 90       	ld	r2, -Y
      8e:	2b 1c       	adc	r2, r11
      90:	21 0c       	add	r2, r1
      92:	22 fb       	bst	r18, 2
      94:	85 00       	.word	0x0085	; ????
      96:	84 00       	.word	0x0084	; ????
      98:	89 03       	fmulsu	r16, r17
      9a:	88 8d       	ldd	r24, Y+24	; 0x18
      9c:	81 09       	sbc	r24, r1
      9e:	6f 02       	muls	r22, r31
      a0:	44 42       	sbci	r20, 0x24	; 36
      a2:	47 00       	.word	0x0047	; ????
      a4:	45 01       	movw	r8, r10
      a6:	b0 83       	st	Z, r27
      a8:	b3 00       	.word	0x00b3	; ????
      aa:	b1 01       	movw	r22, r2
      ac:	25 11       	cpse	r18, r5
      ae:	8a 4f       	sbci	r24, 0xFA	; 250
      b0:	8b 03       	fmulsu	r16, r19

000000b2 <eeprom_format_table>:
      b2:	5a 55 01 20 01 01 00 38 08 00 00 00 00 00 00 00     ZU. ...8........
	...

000000d2 <patchCommands>:
      d2:	a4 41 a7 41 03 42 07 42 0e 42 af 41 b4 41 b9 41     .A.A.B.B.B.A.A.A
      e2:	16 42 bc 41 bf 41 c2 41 fd 41 00 42 26 42           .B.A.A.A.A.B&B

000000f0 <fader>:
      f0:	00 40 88 91 d2 e4 ad b5 b6 be bf ff                 .@..........

000000fc <map_uzeboxlogo2>:
      fc:	05 03 00 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f     ................
	...

0000010d <map_uzeboxlogo>:
     10d:	05 04 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d     ................
     11d:	00 0e 0f 10 11 12                                   ......

00000123 <logo_tileset>:
	...
     17f:	00 00 00 49 00 00 00 00 00 49 52 52 00 00 00 49     ...I.....IRR...I
     18f:	52 53 1c 25 00 49 52 52 24 25 25 1b 52 52 5c 2d     RS.%.IRR$%%.RR\-
     19f:	2d 1c 12 12 00 00 00 00 00 00 00 00 00 00 00 00     -...............
     1af:	40 49 49 49 00 40 49 49 52 5b 5b 5b 4a 52 52 5b     @III.@IIR[[[JRR[
     1bf:	1c 1c 13 12 5b 1c 24 1c 12 09 09 09 24 1b 12 09     ....[.$.....$...
     1cf:	09 09 09 0a 0a 0a 0a 0a 0a 0a 0a 13 0a 0a 12 0a     ................
     1df:	0a 12 13 0a 00 00 00 00 00 00 00 00 92 52 52 52     .............RRR
     1ef:	52 52 52 49 13 12 13 09 00 1c 1b 13 0a 12 12 40     RRRI...........@
     1ff:	1b 65 64 1c 09 0a 00 09 24 1b 1c 65 12 00 00 25     .ed.....$..e...%
     20f:	1c 1c 1c 1c 01 00 25 24 1c 1c 1c 1c 00 24 25 24     ......%$.....$%$
     21f:	24 24 1c 1c 00 00 00 00 00 00 00 00 49 40 00 00     $$..........I@..
     22f:	00 00 00 00 52 49 49 00 00 00 00 00 1c 5b 4a 48     ....RII......[JH
     23f:	00 00 00 00 1c 25 52 49 00 00 00 00 65 24 64 49     .....%RI....e$dI
     24f:	00 00 00 00 65 25 64 49 00 00 00 00 6d 2e 5c 49     ....e%dI....m.\I
	...
     267:	00 00 40 52 00 00 00 00 00 49 52 5c 00 00 00 00     ..@R.....IR\....
     277:	53 52 24 25 00 00 00 53 52 25 25 25 00 00 4a 52     SR$%...SR%%%..JR
     287:	25 25 1b 00 00 00 5b 25 13 00 00 1b 00 5b 53 00     %%....[%.....[S.
     297:	0a 1c 37 37 09 5b 1c 65 7f 37 2e 2e 52 2e 2e 1c     ..77.[.e.7..R...
     2a7:	13 13 12 00 2e 25 1b 13 12 00 00 12 1c 1c 12 00     .....%..........
     2b7:	00 12 25 1c 12 00 00 12 2e 37 1c 13 00 13 2e 37     ..%......7.....7
     2c7:	36 1c 13 1b 37 37 2e 2e 25 13 1c 1c 2e 2e 2e 2e     6...77..%.......
     2d7:	1b 1c 1c 1c 6e 6e 6e 1c 1c 1c 1c 1c 09 13 13 12     ....nnn.........
     2e7:	12 13 13 00 13 13 13 13 13 1c 00 09 13 13 13 13     ................
     2f7:	1c 01 00 37 13 13 13 1c 13 00 2e 2e 1b 1b 1c 1c     ...7............
     307:	00 1c 77 2e 1b 1b 25 00 13 7f 25 1c 1c 1c 01 0a     ..w...%...%.....
     317:	37 24 1c 1c 1c 13 0a 2e 25 25 09 00 13 2e 24 25     7$......%%....$%
     327:	25 25 25 25 2e 25 25 25 25 25 25 25 25 25 2d 2e     %%%%.%%%%%%%%%-.
     337:	25 1b 1c 1c 2e 2e 25 1c 13 25 1b 13 25 1c 1c 1c     %.....%..%..%...
     347:	1c 01 09 52 1c 1c 13 00 01 1c 5b 5c 0a 00 01 65     ...R......[\...e
     357:	77 5c 1b 00 01 6e 7f 6e 52 1b 00 00 6d 1c 52 49     w\...n.nR...m.RI
     367:	00 00 00 00 1c 13 53 00 00 00 00 00 1c 52 4a 00     ......S......RJ.
     377:	00 00 00 00 5b 5b 00 00 00 00 00 00 5c 00 00 00     ....[[......\...
	...
     3a3:	13 5b 7f 77 6e 6e 6e 6e 13 65 77 76 6e 6e 6e 6e     .[.wnnnn.ewvnnnn
     3b3:	1b 65 77 76 76 76 6e 77 1b 5b bf 76 b6 76 76 76     .ewvvvnw.[.v.vvv
     3c3:	09 13 6d bf b7 b6 b7 65 00 1b 12 5c 76 bf 76 6d     ..m....e...\v.vm
     3d3:	00 00 12 1b 12 5b 5b 5c 00 00 00 00 09 0a 12 13     .....[[\........
     3e3:	6e 77 24 1c 1c 1c 1c 1c 77 25 1c 1c 1c 1c 24 25     nw$.....w%....$%
     3f3:	6e 1c 1c 1c 24 25 25 1b 1c 1c 24 25 25 13 00 00     n...$%%...$%%...
     403:	64 6d 6d 1b 00 09 6e bf 6d 5b 09 12 6e bf 6d 5b     dmm...n.m[..n.m[
     413:	5b 12 5b 64 5b 12 13 12 13 1b 12 12 09 01 00 00     [.[d[...........
     423:	1c 24 2e 1c 09 00 09 6e 25 24 01 00 09 76 7f 7f     .$.....n%$...v..
     433:	00 00 12 77 7f 7f 64 12 64 bf bf 77 5b 12 1b 09     ...w..d.d..w[...
     443:	bf 6d 5b 12 1b 09 00 00 12 13 1b 09 00 00 00 00     .m[.............
     453:	09 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     463:	7f 7f 53 13 13 00 00 00 64 12 1b 01 00 00 00 00     ..S.....d.......
     473:	1b 12 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     4ab:	26 00 00 00 26 00 26 26 2f 00 00 00 2f 00 00 00     &...&.&&/.../...
     4bb:	37 00 00 00 37 00 00 00 ff 00 00 00 ff 00 00 00     7...7...........
     4cb:	bf 00 00 00 bf 00 00 bf 37 00 00 37 00 00 37 00     ........7..7..7.
     4db:	00 26 26 00 00 00 26 26 00 00 00 00 00 00 00 00     .&&...&&........
     4eb:	26 26 26 00 26 26 26 26 00 00 2f 00 2f 00 00 00     &&&.&&&&.././...
     4fb:	00 37 00 00 37 00 00 00 ff 00 00 00 ff ff ff ff     .7..7...........
     50b:	00 00 00 00 bf 00 00 00 00 00 00 00 37 00 00 00     ............7...
     51b:	26 26 26 00 26 26 26 26 00 00 00 00 00 00 00 00     &&&.&&&&........
     52b:	26 00 26 26 26 26 00 00 00 00 2f 00 00 00 2f 00     &.&&&&..../.../.
     53b:	00 00 37 00 00 00 37 00 00 00 ff ff ff ff 00 00     ..7...7.........
     54b:	00 00 bf 00 00 00 bf 00 00 00 37 00 00 00 37 00     ..........7...7.
     55b:	26 00 26 26 26 26 00 00 00 00 00 00 00 00 00 00     &.&&&&..........
     56b:	00 00 26 26 26 00 26 00 00 2f 00 00 2f 00 2f 00     ..&&&.&../.././.
     57b:	37 00 00 00 37 00 00 37 ff 00 00 00 ff 00 00 00     7...7..7........
     58b:	bf 00 00 00 bf 00 00 bf 37 00 00 37 00 00 37 00     ........7..7..7.
     59b:	26 26 26 00 00 00 26 00 00 00 00 00 00 00 00 00     &&&...&.........
     5ab:	00 00 26 00 00 00 00 00 00 00 2f 00 00 00 00 00     ..&......./.....
     5bb:	00 37 00 00 00 00 00 00 ff 00 00 00 00 00 00 00     .7..............
     5cb:	00 bf 00 00 00 00 00 00 00 00 37 00 00 00 00 00     ..........7.....
     5db:	00 00 26 00 00 00 00 00 00 00 00 00 00 00 00 00     ..&.............
	...
     5ff:	00 00 00 e4 00 00 00 00 09 9b ed f6 00 00 00 9b     ................
     60f:	a4 ad bf bf 00 52 9b a4 76 7f 7f b7 5b 9b 6d 77     .....R..v...[.mw
     61f:	7f 76 6e b7 00 00 00 00 00 00 00 00 00 00 00 00     .vn.............
     62f:	5b b6 f6 f6 00 5b f6 ff ff ff ff bf f6 ff ff ff     [....[..........
     63f:	ff bf bf ae ff bf ff ff ff b7 ad 65 bf bf ff ff     ...........e....
     64f:	b7 b6 ad 65 b7 bf ff ff bf b7 ae 6e b7 bf ff ff     ...e.......n....
     65f:	bf b7 b7 65 00 00 00 00 00 00 00 00 f6 f6 ed ed     ...e............
     66f:	ad a4 a4 9b b6 6d 6d 5c 52 6e 65 64 65 65 65 52     .....mm\RnedeeeR
     67f:	65 76 6d 25 5c 5c 52 53 6e 24 65 6e 65 52 52 6e     evm%\\RSn$eneRRn
     68f:	25 25 24 25 5b 52 77 2d 25 25 25 24 52 6e 6e 2d     %%$%[Rw-%%%$Rnn-
     69f:	25 25 25 25 00 00 00 00 00 00 00 00 9b 49 00 00     %%%%.........I..
     6af:	00 00 00 00 a4 9b 92 00 00 00 00 00 25 64 93 49     ............%d.I
     6bf:	00 00 00 00 65 2e 9b 52 00 00 00 00 6d 25 65 52     ....e..R....m%eR
     6cf:	00 00 00 00 6d 2d 65 52 00 00 00 00 6e 2e 64 52     ....m-eR....n.dR
	...
     6e7:	00 00 49 5b 00 00 00 00 00 4a 5b 65 00 00 00 00     ..I[.....J[e....
     6f7:	5b 9b 6d 2d 00 00 00 5b 5b 2d 2e 25 00 00 52 5b     [.m-...[[-.%..R[
     707:	2e 2e 1c 09 00 01 5b 2d 1c 01 09 1c 00 5c 5b 01     ......[-.....\[.
     717:	4a 65 77 7f 4a 5b 1c 6e 7f 77 77 76 9b 77 77 6d     Jew.J[.n.wwv.wwm
     727:	65 6e 6e a4 77 6e 65 65 65 5b a4 b7 25 25 5c 52     enn.wneee[..%%\R
     737:	52 6d bf bf 13 09 49 64 7f bf bf bf 09 5c 7f 7f     Rm....Id.....\..
     747:	bf bf b7 bf 7f 7f 77 7f 7f b7 bf bf 77 77 7f 7f     ......w.....ww..
     757:	6e b7 bf bf 77 7f 7f 6e 77 bf bf bf b6 ff ff ff     n...w..nw.......
     767:	bf bf b7 5b bf ff ff ff bf bf a4 64 bf ff ff ff     ...[.......d....
     777:	bf ad a4 7f bf ff ff ff bf a4 bf 7f ff ff ff bf     ................
     787:	ad bf bf bf ff ff ff b6 bf bf bf 77 ff ff f7 bf     ...........w....
     797:	bf bf 77 77 ff ff ff bf bf bf 64 52 6d 7f 6e 2e     ..ww......dRm.n.
     7a7:	2d 2d 25 6e 7f 76 6e 6e 6e 2e 25 65 77 77 77 76     --%n.vnnn.%ewwwv
     7b7:	2e 1c 25 24 7f 77 6e 25 1c 25 1c 1b 77 65 25 25     ..%$.wn%.%..we%%
     7c7:	1c 09 0a 5b 6e 6e 1c 09 49 25 64 64 5b 49 4a 6e     ...[nn..I%dd[IJn
     7d7:	7f 64 5c 00 53 77 bf 77 5b 5c 00 00 6e 25 5b 4a     .d\.Sw.w[\..n%[J
     7e7:	00 00 00 00 1c 1b 5b 00 00 00 00 00 24 5b 53 00     ......[.....$[S.
     7f7:	00 00 00 00 5b 5c 00 00 00 00 00 00 64 00 00 00     ....[\......d...
	...
     823:	5b 5c 7f bf 77 76 77 77 5c 6d 7f b7 77 77 77 77     [\..wvww\m..wwww
     833:	5c 6d 7f bf 77 77 77 bf 5c 64 bf bf bf bf bf 7f     \m..www.\d......
     843:	0a 5c 6e bf bf bf bf 76 00 65 64 6d bf bf bf bf     .\n....v.edm....
     853:	00 00 5b 6d 64 6d ad b6 00 00 00 00 12 5b 64 6d     ..[mdm.......[dm
     863:	77 7f 6e 6e 77 bf bf bf 7f 76 6d 76 77 bf bf bf     w.nnw....vmvw...
     873:	77 6d 6e 76 7f bf bf bf 6d 6e 76 7f bf b7 ad f6     wmnv....mnv.....
     883:	76 bf bf 76 a4 ad ff ff bf b6 64 ad ff ff ff ff     v..v......d.....
     893:	b6 ad bf ff ff ff ff f6 ad b6 ad 64 5b 52 00 00     ...........d[R..
     8a3:	ff ff bf bf ad 5b 64 bf ff ff b6 ad ad bf ff bf     .....[d.........
     8b3:	ff f6 ff ff ff ff bf 64 ff ff ff ff bf b6 76 5b     .......d......v[
     8c3:	ff ff ff bf bf 5b 00 00 ff ff ff 5c 00 00 00 00     .....[.....\....
     8d3:	a4 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     8e3:	bf bf 64 5c 5c 00 00 00 6e 5c 65 49 00 00 00 00     ..d\\...n\eI....
     8f3:	6d 5b 00 00 00 00 00 00 00 00 00 00 00 00 00 00     m[..............
	...

00000923 <logoInitPatches>:
     923:	00 00 00 2c 09 00 00 00 00                          ...,.....

0000092c <initPatch>:
     92c:	00 02 08 00 08 55 04 08 5a 00 00 f8 00 09 90 00     .....U..Z.......
     93c:	0a 1e 32 05 00 00 ff                                ..2....

00000943 <strChallenge>:
     943:	49 20 4b 4e 45 57 20 54 48 45 59 00 57 4f 55 4c     I KNEW THEY.WOUL
     953:	44 20 53 45 4e 44 20 59 4f 55 00 23 20 20 20 20     D SEND YOU.#    
     963:	20 20 20 59 4f 55 20 41 52 45 00 50 45 52 53 49        YOU ARE.PERSI
     973:	53 54 45 4e 54 00 23 20 20 20 20 20 20 20 20 20     STENT.#         
     983:	20 20 20 20 20 20 59 4f 55 20 43 41 4e 54 00 48           YOU CANT.H
     993:	41 56 45 20 54 48 45 4d 20 41 4c 4c 00 23 20 20     AVE THEM ALL.#  
     9a3:	20 20 20 20 20 20 20 20 20 59 4f 55 20 41 52 45              YOU ARE
     9b3:	20 4d 41 4b 49 4e 47 00 41 20 4d 49 53 54 41 4b      MAKING.A MISTAK
     9c3:	45 00 23 20 20 20 20 20 20 20 20 20 54 48 49 53     E.#         THIS
     9d3:	20 44 4f 45 53 20 4e 4f 54 00 45 4e 44 20 48 45      DOES NOT.END HE
     9e3:	52 45 00 23 20 20 20 20 20 20 20 20 20 20 20 00     RE.#           .

000009f3 <strIntro>:
     9f3:	49 52 49 53 20 48 41 53 20 42 45 54 52 41 59 45     IRIS HAS BETRAYE
     a03:	44 20 55 53 00 00 48 45 20 48 41 53 20 53 54 4f     D US..HE HAS STO
     a13:	4c 45 4e 20 54 48 45 20 35 20 45 4d 45 52 41 4c     LEN THE 5 EMERAL
     a23:	44 53 00 4f 46 20 50 4f 57 45 52 20 41 4e 44 20     DS.OF POWER AND 
     a33:	57 49 4c 4c 20 53 55 52 45 4c 59 00 42 52 49 4e     WILL SURELY.BRIN
     a43:	47 20 52 55 49 4e 20 54 4f 20 55 53 20 41 4c 4c     G RUIN TO US ALL
     a53:	00 00 44 45 53 54 52 4f 59 20 48 49 4d 20 41 4e     ..DESTROY HIM AN
     a63:	44 20 52 45 54 55 52 4e 20 54 48 45 00 45 4d 45     D RETURN THE.EME
     a73:	52 41 4c 44 53 20 54 4f 20 42 52 49 4e 47 20 50     RALDS TO BRING P
     a83:	45 41 43 45 20 54 4f 00 54 48 45 20 47 41 4c 41     EACE TO.THE GALA
     a93:	58 59 00 23 00                                      XY.#.

00000a98 <default_scores>:
     a98:	55 5a 45 00 00 4c 4a 42 00 00 41 41 41 00 00 42     UZE..LJB..AAA..B
     aa8:	42 42 00 00 43 43 43 00 00 44 44 44 00 00           BB..CCC..DDD..

00000ab6 <strTally>:
     ab6:	54 41 4c 4c 59 20 00                                TALLY .

00000abd <strGameOver>:
     abd:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

00000ac7 <strLevelBonus>:
     ac7:	42 4f 4e 55 53 00                                   BONUS.

00000acd <strLevelClear>:
     acd:	4c 45 56 45 4c 20 43 4c 45 41 52 00                 LEVEL CLEAR.

00000ad9 <strPaused>:
     ad9:	50 41 55 53 45 00                                   PAUSE.

00000adf <strExitGame>:
     adf:	58 20 45 58 49 54 20 47 41 4d 45 00                 X EXIT GAME.

00000aeb <strMainMenu>:
     aeb:	58 20 4d 41 49 4e 20 4d 45 4e 55 00                 X MAIN MENU.

00000af7 <strTime>:
     af7:	54 49 4d 45 20 00                                   TIME .

00000afd <strLives>:
     afd:	4c 49 56 45 53 20 00                                LIVES .

00000b04 <strShield>:
     b04:	53 48 49 45 4c 44 20 00                             SHIELD .

00000b0c <strScore>:
     b0c:	53 43 4f 52 45 20 00                                SCORE .

00000b13 <strSelectHandle>:
	...

00000b14 <strHighScores>:
     b14:	48 49 47 48 20 53 43 4f 52 45 53 00                 HIGH SCORES.

00000b20 <str1Player>:
     b20:	53 54 41 52 54 00                                   START.

00000b26 <strMusic>:
     b26:	4d 55 53 49 43 20 42 59 20 54 41 4e 4e 45 52 20     MUSIC BY TANNER 
     b36:	48 45 4c 4c 41 4e 44 00                             HELLAND.

00000b3e <strCopyright>:
     b3e:	32 30 31 36 20 4c 41 57 52 45 4e 43 45 20 42 52     2016 LAWRENCE BR
     b4e:	4f 4f 4b 53 00                                      OOKS.

00000b53 <spacesong>:
     b53:	00 c0 00 00 c1 01 00 b0 07 7f 00 07 7f 00 90 43     ...............C
     b63:	64 00 46 64 00 4b 64 00 4f 64 00 b1 07 74 00 91     d.Fd.Kd.Od...t..
     b73:	33 64 00 ff 06 01 53 1d 91 33 64 0a 33 64 14 90     3d....S..3d.3d..
     b83:	4b 64 00 46 64 00 43 64 00 91 33 64 27 33 64 14     Kd.Fd.Cd..3d'3d.
     b93:	90 46 64 00 43 64 00 4b 64 00 4f 64 00 91 33 64     .Fd.Cd.Kd.Od..3d
     ba3:	14 33 64 0a 90 41 64 00 4d 64 0a 41 64 00 46 64     .3d..Ad.Md.Ad.Fd
     bb3:	00 4a 64 00 4d 64 00 91 2e 64 1e 2e 64 09 2e 64     .Jd.Md...d..d..d
     bc3:	14 90 41 64 00 46 64 00 4a 64 00 91 2e 64 28 2e     ..Ad.Fd.Jd...d(.
     bd3:	64 14 90 41 64 00 46 64 00 4a 64 00 4d 64 00 91     d..Ad.Fd.Jd.Md..
     be3:	2e 64 13 2e 64 0a 90 3f 64 00 4b 64 0a 3f 64 00     .d..d..?d.Kd.?d.
     bf3:	44 64 00 48 64 00 4b 64 00 91 2c 64 1e 2c 64 0a     Dd.Hd.Kd..,d.,d.
     c03:	2c 64 14 90 41 64 00 46 64 00 4a 64 00 91 2c 64     ,d..Ad.Fd.Jd..,d
     c13:	13 2e 64 14 90 46 64 00 91 2c 64 14 90 3f 64 00     ..d..Fd..,d..?d.
     c23:	43 64 00 48 64 00 91 2e 64 14 30 64 14 90 43 64     Cd.Hd...d.0d..Cd
     c33:	00 48 64 00 4b 64 00 4f 64 00 91 30 64 1d 30 64     .Hd.Kd.Od..0d.0d
     c43:	0a 30 64 14 90 4b 64 00 48 64 00 43 64 00 91 30     .0d..Kd.Hd.Cd..0
     c53:	64 28 30 64 13 90 43 64 00 48 64 00 4b 64 00 4f     d(0d..Cd.Hd.Kd.O
     c63:	64 00 91 30 64 14 30 64 0a 90 41 64 00 4d 64 0a     d..0d.0d..Ad.Md.
     c73:	43 64 00 46 64 00 4b 64 00 4f 64 00 91 33 64 1e     Cd.Fd.Kd.Od..3d.
     c83:	33 64 09 33 64 14 90 4b 64 00 46 64 00 43 64 00     3d.3d..Kd.Fd.Cd.
     c93:	91 33 64 28 33 64 14 90 46 64 00 43 64 00 4b 64     .3d(3d..Fd.Cd.Kd
     ca3:	00 4f 64 00 91 33 64 13 33 64 0a 90 41 64 00 4d     .Od..3d.3d..Ad.M
     cb3:	64 0a 41 64 00 46 64 00 4a 64 00 4d 64 00 91 2e     d.Ad.Fd.Jd.Md...
     cc3:	64 1e 2e 64 0a 2e 64 14 90 41 64 00 46 64 00 4a     d..d..d..Ad.Fd.J
     cd3:	64 00 91 2e 64 27 2e 64 14 90 41 64 00 46 64 00     d...d'.d..Ad.Fd.
     ce3:	4a 64 00 4d 64 00 91 2e 64 14 2e 64 0a 90 3f 64     Jd.Md...d..d..?d
     cf3:	00 4b 64 0a 3f 64 00 44 64 00 48 64 00 4b 64 00     .Kd.?d.Dd.Hd.Kd.
     d03:	91 2c 64 1d 2c 64 0a 2c 64 14 90 41 64 00 46 64     .,d.,d.,d..Ad.Fd
     d13:	00 4a 64 00 91 2c 64 14 2e 64 14 90 46 64 00 91     .Jd..,d..d..Fd..
     d23:	2c 64 13 90 3f 64 00 43 64 00 48 64 00 91 30 64     ,d..?d.Cd.Hd..0d
     d33:	14 30 64 14 90 48 64 00 91 2c 6e 14 2c 4b 06 90     .0d..Hd..,n.,K..
     d43:	4a 64 0e 91 2c 4b 0d 90 4b 64 06 91 2c 6e 14 90     Jd..,K..Kd..,n..
     d53:	4d 64 00 91 2c 4b 14 2c 4b 07 90 4b 64 0d 91 2c     Md..,K.,K..Kd..,
     d63:	6e 0d 90 4a 64 07 91 2c 4b 13 90 48 64 00 91 30     n..Jd..,K..Hd..0
     d73:	6e 14 30 4b 07 90 4a 64 0d 91 30 4b 0d 90 46 64     n.0K..Jd..0K..Fd
     d83:	07 91 30 6e 13 90 43 64 00 91 30 4b 14 30 4b 07     ..0n..Cd..0K.0K.
     d93:	90 46 64 0d 91 30 6e 0d 90 48 64 07 91 30 4b 14     .Fd..0n..Hd..0K.
     da3:	90 48 64 00 91 2c 6e 13 2c 4b 07 90 4a 64 0d 91     .Hd..,n.,K..Jd..
     db3:	2c 4b 0d 90 4b 64 07 91 2c 6e 14 90 4d 64 00 91     ,K..Kd..,n..Md..
     dc3:	2c 4b 14 2c 4b 06 90 4b 64 0d 91 2c 6e 0e 90 4d     ,K.,K..Kd..,n..M
     dd3:	64 06 91 2c 4b 14 90 4f 64 00 91 30 6e 14 30 4b     d..,K..Od..0n.0K
     de3:	07 90 50 64 0d 91 30 4b 0e 90 4d 64 05 91 30 6e     ..Pd..0K..Md..0n
     df3:	14 90 4f 64 00 91 30 4b 14 30 4b 07 90 4d 64 0d     ..Od..0K.0K..Md.
     e03:	91 30 6e 0d 90 4b 64 07 91 30 4b 13 90 4d 64 00     .0n..Kd..0K..Md.
     e13:	91 2b 6e 14 2b 4b 07 90 4f 64 0d 91 2b 4b 0d 90     .+n.+K..Od..+K..
     e23:	4d 64 07 91 2b 6e 14 90 4b 64 00 91 2b 4b 13 2b     Md..+n..Kd..+K.+
     e33:	4b 07 90 46 64 0d 91 2b 6e 0d 90 4b 64 07 91 2b     K..Fd..+n..Kd..+
     e43:	4b 14 90 4d 64 00 91 2c 6e 13 2c 4b 07 90 50 64     K..Md..,n.,K..Pd
     e53:	0d 91 2c 4b 0d 90 4f 64 07 91 2c 6e 14 90 4d 64     ..,K..Od..,n..Md
     e63:	00 91 2c 4b 14 2c 4b 06 90 48 64 0d 91 2c 6e 0e     ..,K.,K..Hd..,n.
     e73:	90 4d 64 06 91 2c 4b 14 90 52 64 00 91 27 6e 0d     .Md..,K..Rd..'n.
     e83:	90 50 64 07 91 27 4b 06 90 4f 64 0e 50 64 00 91     .Pd..'K..Od.Pd..
     e93:	27 4b 0d 90 4f 64 06 91 27 6e 07 90 4d 64 0d 4b     'K..Od..'n..Md.K
     ea3:	64 00 91 27 4b 14 27 4b 07 90 46 64 0d 91 27 6e     d..'K.'K..Fd..'n
     eb3:	0d 90 4b 64 07 91 27 4b 13 90 47 64 00 91 26 6e     ..Kd..'K..Gd..&n
     ec3:	14 26 4b 07 90 4a 64 0d 91 26 4b 0d 90 4f 64 07     .&K..Jd..&K..Od.
     ed3:	91 26 6e 14 90 53 64 00 91 26 4b 13 26 4b 07 90     .&n..Sd..&K.&K..
     ee3:	56 64 0d 91 26 6e 0d 90 5b 64 07 91 26 4b 14 90     Vd..&n..[d..&K..
     ef3:	3d 64 00 91 31 64 06 90 41 64 07 44 64 07 49 64     =d..1d..Ad.Dd.Id
     f03:	06 4d 64 07 50 64 06 55 64 07 59 64 07 5c 64 06     .Md.Pd.Ud.Yd.\d.
     f13:	59 64 07 55 64 06 50 64 07 4d 64 07 49 64 06 44     Yd.Ud.Pd.Md.Id.D
     f23:	64 07 41 64 06 3d 64 07 38 64 07 3d 64 06 41 64     d.Ad.=d.8d.=d.Ad
     f33:	07 44 64 06 49 64 07 44 64 07 41 64 06 43 64 00     .Dd.Id.Dd.Ad.Cd.
     f43:	91 37 64 07 90 47 64 06 4a 64 07 4f 64 06 53 64     .7d..Gd.Jd.Od.Sd
     f53:	07 56 64 07 5b 64 06 5f 64 07 62 64 06 5f 64 07     .Vd.[d._d.bd._d.
     f63:	5b 64 07 56 64 06 53 64 07 4f 64 06 4a 64 07 47     [d.Vd.Sd.Od.Jd.G
     f73:	64 07 43 64 06 3e 64 07 43 64 06 47 64 07 4a 64     d.Cd.>d.Cd.Gd.Jd
     f83:	07 4f 64 06 4a 64 07 47 64 06 46 64 00 91 3a 64     .Od.Jd.Gd.Fd..:d
     f93:	07 90 4a 64 07 4d 64 06 52 64 07 56 64 06 59 64     ..Jd.Md.Rd.Vd.Yd
     fa3:	07 5e 64 07 62 64 06 65 64 07 62 64 06 5e 64 07     .^d.bd.ed.bd.^d.
     fb3:	59 64 07 56 64 06 52 64 07 4d 64 06 4a 64 07 46     Yd.Vd.Rd.Md.Jd.F
     fc3:	64 07 41 64 06 46 64 07 4a 64 06 4d 64 07 52 64     d.Ad.Fd.Jd.Md.Rd
     fd3:	07 4d 64 06 4a 64 07 54 7f 00 43 64 00 48 64 00     .Md.Jd.T..Cd.Hd.
     fe3:	4b 64 00 4f 64 00 91 30 64 1d 30 64 0a 30 64 14     Kd.Od..0d.0d.0d.
     ff3:	90 4b 64 00 48 64 00 43 64 00 91 30 64 28 30 64     .Kd.Hd.Cd..0d(0d
    1003:	14 90 43 64 00 48 64 00 4b 64 00 4f 64 00 91 30     ..Cd.Hd.Kd.Od..0
    1013:	64 13 30 64 0a 90 41 64 00 4d 64 0a 43 64 00 46     d.0d..Ad.Md.Cd.F
    1023:	64 00 4b 64 00 4f 64 00 91 33 64 1e 33 64 0a 33     d.Kd.Od..3d.3d.3
    1033:	64 14 90 4b 64 00 46 64 00 43 64 00 91 33 64 27     d..Kd.Fd.Cd..3d'
    1043:	33 64 14 90 46 64 00 43 64 00 4b 64 00 4f 64 00     3d..Fd.Cd.Kd.Od.
    1053:	91 33 64 14 33 64 0a 90 41 64 00 4d 64 0a 41 64     .3d.3d..Ad.Md.Ad
    1063:	00 46 64 00 4a 64 00 4d 64 00 91 2e 64 1d 2e 64     .Fd.Jd.Md...d..d
    1073:	0a 2e 64 14 90 41 64 00 46 64 00 4a 64 00 91 2e     ..d..Ad.Fd.Jd...
    1083:	64 27 2e 64 14 90 41 64 00 46 64 00 4a 64 00 4d     d'.d..Ad.Fd.Jd.M
    1093:	64 00 91 2e 64 14 2e 64 0a 90 3f 64 00 4b 64 0a     d...d..d..?d.Kd.
    10a3:	3f 64 00 44 64 00 48 64 00 4b 64 00 91 2c 64 1e     ?d.Dd.Hd.Kd..,d.
    10b3:	2c 64 09 2c 64 14 90 41 64 00 46 64 00 4a 64 00     ,d.,d..Ad.Fd.Jd.
    10c3:	91 2c 64 14 2e 64 14 90 46 64 00 91 2c 64 14 90     .,d..d..Fd..,d..
    10d3:	3f 64 00 43 64 00 48 64 00 91 2e 64 13 30 64 14     ?d.Cd.Hd...d.0d.
    10e3:	90 43 64 00 48 64 00 4b 64 00 4f 64 00 91 30 64     .Cd.Hd.Kd.Od..0d
    10f3:	1e 30 64 0a 30 64 14 90 4b 64 00 48 64 00 43 64     .0d.0d..Kd.Hd.Cd
    1103:	00 91 30 64 27 30 64 14 90 43 64 00 48 64 00 4b     ..0d'0d..Cd.Hd.K
    1113:	64 00 4f 64 00 91 30 64 14 30 64 0a 90 41 64 00     d.Od..0d.0d..Ad.
    1123:	4d 64 0a 43 64 00 46 64 00 4b 64 00 4f 64 00 91     Md.Cd.Fd.Kd.Od..
    1133:	33 64 1d 33 64 0a 33 64 14 90 4b 64 00 46 64 00     3d.3d.3d..Kd.Fd.
    1143:	43 64 00 91 33 64 28 33 64 13 90 46 64 00 43 64     Cd..3d(3d..Fd.Cd
    1153:	00 4b 64 00 4f 64 00 91 33 64 14 33 64 0a 90 41     .Kd.Od..3d.3d..A
    1163:	64 00 4d 64 0a 41 64 00 46 64 00 4a 64 00 4d 64     d.Md.Ad.Fd.Jd.Md
    1173:	00 91 2e 64 1e 2e 64 09 2e 64 14 90 41 64 00 46     ...d..d..d..Ad.F
    1183:	64 00 4a 64 00 91 2e 64 28 2e 64 14 90 41 64 00     d.Jd...d(.d..Ad.
    1193:	46 64 00 4a 64 00 4d 64 00 91 2e 64 13 2e 64 0a     Fd.Jd.Md...d..d.
    11a3:	90 3f 64 00 4b 64 0a 3f 64 00 44 64 00 48 64 00     .?d.Kd.?d.Dd.Hd.
    11b3:	4b 64 00 91 2c 64 1e 2c 64 0a 2c 64 14 90 41 64     Kd..,d.,d.,d..Ad
    11c3:	00 46 64 00 4a 64 00 91 2c 64 13 2e 64 14 90 46     .Fd.Jd..,d..d..F
    11d3:	64 00 91 2c 64 0f ff 06 01 45 05 90 3f 64 00 43     d..,d....E..?d.C
    11e3:	64 00 48 64 00 91 30 64 14 30 64 81 0a ff 2f 00     d.Hd..0d.0d.../.

000011f3 <planetsong>:
    11f3:	00 c0 00 00 c1 01 00 b0 07 7f 00 b1 07 74 00 ff     .............t..
    1203:	06 01 53 1b 90 48 78 00 91 30 6e 07 90 43 55 00     ..S..Hx..0n..CU.
    1213:	91 30 50 07 90 48 55 00 91 30 50 07 90 4a 78 00     .0P..HU..0P..Jx.
    1223:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 48 55 00     .0n..KU..0P..HU.
    1233:	91 30 50 07 90 4a 78 00 91 30 6e 07 90 4b 55 00     .0P..Jx..0n..KU.
    1243:	91 30 50 07 90 4d 55 00 91 30 50 07 90 4a 78 00     .0P..MU..0P..Jx.
    1253:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 4d 55 00     .0n..KU..0P..MU.
    1263:	91 30 50 07 90 4f 78 00 91 30 6e 07 90 4b 55 00     .0P..Ox..0n..KU.
    1273:	91 30 50 07 90 4d 78 00 91 2e 6e 07 90 4f 55 07     .0P..Mx...n..OU.
    1283:	50 78 00 91 30 6e 06 90 4d 55 00 91 30 50 07 90     Px..0n..MU..0P..
    1293:	4f 55 00 91 30 50 07 90 4b 78 00 91 30 6e 07 90     OU..0P..Kx..0n..
    12a3:	4d 55 00 91 30 50 07 90 4a 55 00 91 30 50 07 30     MU..0P..JU..0P.0
    12b3:	6e 03 90 4b 78 04 48 55 00 91 30 50 07 90 4a 55     n..Kx.HU..0P..JU
    12c3:	00 91 30 50 07 90 46 78 00 91 30 6e 07 90 4d 55     ..0P..Fx..0n..MU
    12d3:	00 91 30 50 07 90 46 78 00 91 30 50 07 90 4f 55     ..0P..Fx..0P..OU
    12e3:	00 91 30 6e 07 90 46 78 00 91 30 50 07 90 4d 55     ..0n..Fx..0P..MU
    12f3:	00 91 2e 6e 07 90 46 78 07 48 55 00 91 30 6e 07     ...n..Fx.HU..0n.
    1303:	90 43 55 00 91 30 50 07 90 48 55 00 91 30 50 07     .CU..0P..HU..0P.
    1313:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    1323:	90 48 55 00 91 30 50 06 90 4a 55 00 91 30 6e 07     .HU..0P..JU..0n.
    1333:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 30 50 07     .KU..0P..MU..0P.
    1343:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    1353:	90 4d 55 00 91 30 50 07 90 4f 55 00 91 30 6e 07     .MU..0P..OU..0n.
    1363:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 2e 6e 07     .KU..0P..MU...n.
    1373:	90 4f 55 07 50 55 00 91 30 6e 07 90 4d 55 00 91     .OU.PU..0n..MU..
    1383:	30 50 07 90 4f 55 00 91 30 50 07 90 4b 55 00 91     0P..OU..0P..KU..
    1393:	30 6e 07 90 4d 55 00 91 30 50 07 90 4a 55 00 91     0n..MU..0P..JU..
    13a3:	30 50 07 30 6e 02 90 4b 55 05 48 55 00 91 30 50     0P.0n..KU.HU..0P
    13b3:	07 90 4a 55 00 91 30 50 07 90 46 55 00 91 30 6e     ..JU..0P..FU..0n
    13c3:	06 90 4d 55 00 91 30 50 07 90 46 55 00 91 30 50     ..MU..0P..FU..0P
    13d3:	07 90 4f 55 00 91 30 6e 07 90 46 55 00 91 30 50     ..OU..0n..FU..0P
    13e3:	07 90 4d 55 00 91 2e 6e 07 90 46 55 07 48 78 00     ..MU...n..FU.Hx.
    13f3:	91 2c 6e 07 90 43 55 00 91 2c 50 07 90 48 55 00     .,n..CU..,P..HU.
    1403:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
    1413:	91 2c 50 07 90 48 55 00 91 2c 50 07 90 4a 78 00     .,P..HU..,P..Jx.
    1423:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 55 00     .,n..KU..,P..MU.
    1433:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
    1443:	91 2c 50 07 90 4d 55 00 91 2c 50 07 90 4f 78 00     .,P..MU..,P..Ox.
    1453:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 78 00     .,n..KU..,P..Mx.
    1463:	91 2b 6e 06 90 4f 55 07 50 78 00 91 2c 6e 07 90     .+n..OU.Px..,n..
    1473:	4d 55 00 91 2c 50 07 90 4f 55 00 91 2c 50 07 90     MU..,P..OU..,P..
    1483:	4b 78 00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90     Kx..,n..MU..,P..
    1493:	4a 55 00 91 2c 50 07 2c 6e 02 90 4b 78 05 48 55     JU..,P.,n..Kx.HU
    14a3:	00 91 2c 50 07 90 4a 55 00 91 2c 50 07 90 46 78     ..,P..JU..,P..Fx
    14b3:	00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90 46 78     ..,n..MU..,P..Fx
    14c3:	00 91 2c 50 07 90 4f 55 00 91 2c 6e 07 90 46 78     ..,P..OU..,n..Fx
    14d3:	00 91 2c 50 07 90 4d 55 00 91 2b 6e 07 90 46 78     ..,P..MU..+n..Fx
    14e3:	07 48 55 00 91 29 6e 07 90 43 55 00 91 29 50 07     .HU..)n..CU..)P.
    14f3:	90 48 55 00 91 29 50 06 90 4a 55 00 91 29 6e 07     .HU..)P..JU..)n.
    1503:	90 4b 55 00 91 29 50 07 90 48 55 00 91 29 50 07     .KU..)P..HU..)P.
    1513:	90 4a 55 00 91 2b 6e 07 90 4b 55 00 91 2b 50 07     .JU..+n..KU..+P.
    1523:	90 4d 55 00 91 2b 50 07 90 4a 55 00 91 2b 6e 07     .MU..+P..JU..+n.
    1533:	90 4b 55 00 91 2b 50 07 90 4d 55 00 91 2b 50 07     .KU..+P..MU..+P.
    1543:	90 4f 55 00 91 2c 6e 07 90 4b 55 00 91 2c 50 07     .OU..,n..KU..,P.
    1553:	90 4d 55 00 91 2c 6e 07 90 4f 55 07 50 55 00 91     .MU..,n..OU.PU..
    1563:	2e 6e 07 90 4d 55 00 91 2e 50 07 90 4f 55 00 91     .n..MU...P..OU..
    1573:	2e 50 07 90 4b 55 00 91 2e 6e 07 90 4d 55 00 91     .P..KU...n..MU..
    1583:	2e 50 07 90 4a 55 00 91 2e 50 07 2e 6e 02 90 4b     .P..JU...P..n..K
    1593:	55 05 48 55 00 91 2e 50 06 90 4a 55 00 91 2e 50     U.HU...P..JU...P
    15a3:	07 90 46 55 00 91 2e 6e 07 90 4d 55 00 91 2e 50     ..FU...n..MU...P
    15b3:	07 90 46 55 00 91 2e 50 07 90 4f 55 00 91 2e 6e     ..FU...P..OU...n
    15c3:	07 90 46 55 00 91 2e 50 07 90 4d 55 00 91 2e 6e     ..FU...P..MU...n
    15d3:	07 90 46 55 07 48 55 00 91 30 6e 07 90 43 55 00     ..FU.HU..0n..CU.
    15e3:	91 30 50 07 90 48 55 00 91 30 50 07 90 4a 55 00     .0P..HU..0P..JU.
    15f3:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 48 55 00     .0n..KU..0P..HU.
    1603:	91 30 50 07 90 4a 55 00 91 30 6e 07 90 4b 55 00     .0P..JU..0n..KU.
    1613:	91 30 50 07 90 4d 55 00 91 30 50 07 90 4a 55 00     .0P..MU..0P..JU.
    1623:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 4d 55 00     .0n..KU..0P..MU.
    1633:	91 30 50 07 90 4f 55 00 91 30 6e 06 90 4b 55 00     .0P..OU..0n..KU.
    1643:	91 30 50 07 90 4d 55 00 91 2e 6e 07 90 4f 55 07     .0P..MU...n..OU.
    1653:	50 55 00 91 30 6e 07 90 4d 55 00 91 30 50 07 90     PU..0n..MU..0P..
    1663:	4f 55 00 91 30 50 07 90 4b 55 00 91 30 6e 07 90     OU..0P..KU..0n..
    1673:	4d 55 00 91 30 50 07 90 4a 55 00 91 30 50 07 30     MU..0P..JU..0P.0
    1683:	6e 02 90 4b 55 05 48 55 00 91 30 50 07 90 4a 55     n..KU.HU..0P..JU
    1693:	00 91 30 50 07 90 46 55 00 91 30 6e 07 90 4d 55     ..0P..FU..0n..MU
    16a3:	00 91 30 50 07 90 46 55 00 91 30 50 07 90 4f 55     ..0P..FU..0P..OU
    16b3:	00 91 30 6e 07 90 46 55 00 91 30 50 07 90 4d 55     ..0n..FU..0P..MU
    16c3:	00 91 2e 6e 07 90 46 55 07 48 55 00 91 30 6e 06     ...n..FU.HU..0n.
    16d3:	90 43 55 00 91 30 50 07 90 48 55 00 91 30 50 07     .CU..0P..HU..0P.
    16e3:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    16f3:	90 48 55 00 91 30 50 07 90 4a 55 00 91 30 6e 07     .HU..0P..JU..0n.
    1703:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 30 50 07     .KU..0P..MU..0P.
    1713:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    1723:	90 4d 55 00 91 30 50 07 90 4f 55 00 91 30 6e 07     .MU..0P..OU..0n.
    1733:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 2e 6e 07     .KU..0P..MU...n.
    1743:	90 4f 55 07 50 55 00 91 30 6e 07 90 4d 55 00 91     .OU.PU..0n..MU..
    1753:	30 50 07 90 4f 55 00 91 30 50 07 90 4b 55 00 91     0P..OU..0P..KU..
    1763:	30 6e 07 90 4d 55 00 91 30 50 07 90 4a 55 00 91     0n..MU..0P..JU..
    1773:	30 50 06 30 6e 03 90 4b 55 04 48 55 00 91 30 50     0P.0n..KU.HU..0P
    1783:	07 90 4a 55 00 91 30 50 07 90 46 55 00 91 30 6e     ..JU..0P..FU..0n
    1793:	07 90 4d 55 00 91 30 50 07 90 46 55 00 91 30 50     ..MU..0P..FU..0P
    17a3:	07 90 4f 55 00 91 30 6e 07 90 46 55 00 91 30 50     ..OU..0n..FU..0P
    17b3:	07 90 4d 55 00 91 2e 6e 07 90 46 55 07 48 78 00     ..MU...n..FU.Hx.
    17c3:	91 2c 6e 07 90 43 55 00 91 2c 50 07 90 48 55 00     .,n..CU..,P..HU.
    17d3:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
    17e3:	91 2c 50 07 90 48 55 00 91 2c 50 07 90 4a 78 00     .,P..HU..,P..Jx.
    17f3:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 55 00     .,n..KU..,P..MU.
    1803:	91 2c 50 07 90 4a 78 00 91 2c 6e 06 90 4b 55 00     .,P..Jx..,n..KU.
    1813:	91 2c 50 07 90 4d 55 00 91 2c 50 07 90 4f 78 00     .,P..MU..,P..Ox.
    1823:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 78 00     .,n..KU..,P..Mx.
    1833:	91 2b 6e 07 90 4f 55 07 50 78 00 91 2c 6e 07 90     .+n..OU.Px..,n..
    1843:	4d 55 00 91 2c 50 07 90 4f 55 00 91 2c 50 07 90     MU..,P..OU..,P..
    1853:	4b 78 00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90     Kx..,n..MU..,P..
    1863:	4a 55 00 91 2c 50 07 2c 6e 02 90 4b 78 05 48 55     JU..,P.,n..Kx.HU
    1873:	00 91 2c 50 07 90 4a 55 00 91 2c 50 07 90 46 78     ..,P..JU..,P..Fx
    1883:	00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90 46 78     ..,n..MU..,P..Fx
    1893:	00 91 2c 50 07 90 4f 55 00 91 2c 6e 07 90 46 78     ..,P..OU..,n..Fx
    18a3:	00 91 2c 50 07 90 4d 55 00 91 2b 6e 06 90 46 78     ..,P..MU..+n..Fx
    18b3:	07 48 55 00 91 29 6e 07 90 43 55 00 91 29 50 07     .HU..)n..CU..)P.
    18c3:	90 48 55 00 91 29 50 07 90 4a 55 00 91 29 6e 07     .HU..)P..JU..)n.
    18d3:	90 4b 55 00 91 29 50 07 90 48 55 00 91 29 50 07     .KU..)P..HU..)P.
    18e3:	90 4a 55 00 91 2b 6e 07 90 4b 55 00 91 2b 50 07     .JU..+n..KU..+P.
    18f3:	90 4d 55 00 91 2b 50 07 90 4a 55 00 91 2b 6e 07     .MU..+P..JU..+n.
    1903:	90 4b 55 00 91 2b 50 07 90 4d 55 00 91 2b 50 07     .KU..+P..MU..+P.
    1913:	90 4f 55 00 91 2c 6e 07 90 4b 55 00 91 2c 50 07     .OU..,n..KU..,P.
    1923:	90 4d 55 00 91 2c 6e 07 90 4f 55 07 50 55 00 91     .MU..,n..OU.PU..
    1933:	2e 6e 07 90 4d 55 00 91 2e 50 07 90 4f 55 00 91     .n..MU...P..OU..
    1943:	2e 50 07 90 4b 55 00 91 2e 6e 06 90 4d 55 00 91     .P..KU...n..MU..
    1953:	2e 50 07 90 4a 55 00 91 2e 50 07 2e 6e 03 90 4b     .P..JU...P..n..K
    1963:	55 04 48 55 00 91 2e 50 07 90 4a 55 00 91 2e 50     U.HU...P..JU...P
    1973:	07 90 46 55 00 91 2e 6e 07 90 4d 55 00 91 2e 50     ..FU...n..MU...P
    1983:	07 90 46 55 00 91 2e 50 07 90 4f 55 00 91 30 6e     ..FU...P..OU..0n
    1993:	07 90 46 55 00 91 30 50 07 90 4d 55 00 91 2e 6e     ..FU..0P..MU...n
    19a3:	07 90 46 55 07 54 64 00 48 64 00 91 30 6e 07 30     ..FU.Td.Hd..0n.0
    19b3:	50 07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e     P.0P.0n.0P.0P.0n
    19c3:	07 30 50 06 30 50 07 30 6e 07 30 50 07 30 50 07     .0P.0P.0n.0P.0P.
    19d3:	30 6e 07 30 50 07 2e 6e 0e 30 6e 07 30 50 07 30     0n.0P..n.0n.0P.0
    19e3:	50 07 30 6e 07 30 50 07 30 50 07 30 6e 07 30 50     P.0n.0P.0P.0n.0P
    19f3:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 06     .0P.0n.0P.0P.0n.
    1a03:	30 50 07 2e 6e 0e 90 33 64 00 37 64 00 3c 64 00     0P..n..3d.7d.<d.
    1a13:	91 30 6e 07 30 50 07 30 50 07 90 32 64 00 37 64     .0n.0P.0P..2d.7d
    1a23:	00 3a 64 00 91 30 6e 07 30 50 07 30 50 07 90 33     .:d..0n.0P.0P..3
    1a33:	64 00 37 64 00 3c 64 00 91 30 6e 07 30 50 07 30     d.7d.<d..0n.0P.0
    1a43:	50 07 90 37 64 00 3a 64 00 3e 64 00 91 30 6e 07     P..7d.:d.>d..0n.
    1a53:	30 50 07 30 50 07 90 37 64 00 3c 64 00 3f 64 00     0P.0P..7d.<d.?d.
    1a63:	91 30 6e 07 30 50 07 90 37 64 00 3a 64 00 3e 64     .0n.0P..7d.:d.>d
    1a73:	00 91 30 6e 07 30 6e 07 90 3a 64 00 43 64 00 3f     ..0n.0n..:d.Cd.?
    1a83:	64 00 91 33 6e 06 33 50 07 33 50 07 33 6e 07 33     d..3n.3P.3P.3n.3
    1a93:	50 07 33 50 07 90 37 64 00 3a 64 00 3f 64 00 91     P.3P..7d.:d.?d..
    1aa3:	33 6e 07 33 50 07 33 50 07 33 6e 07 33 50 07 33     3n.3P.3P.3n.3P.3
    1ab3:	50 07 90 3a 64 00 3f 64 00 43 64 00 91 33 6e 07     P..:d.?d.Cd..3n.
    1ac3:	33 50 07 33 6e 07 33 6e 07 90 41 64 00 3e 64 00     3P.3n.3n..Ad.>d.
    1ad3:	3a 64 00 91 2e 6e 07 2e 50 07 2e 50 07 2e 6e 07     :d...n..P..P..n.
    1ae3:	2e 50 07 2e 50 06 90 35 64 00 3a 64 00 3e 64 00     .P..P..5d.:d.>d.
    1af3:	91 2e 6e 07 2e 50 07 2e 50 07 2e 6e 07 2e 50 07     ..n..P..P..n..P.
    1b03:	2e 50 07 90 3a 64 00 3e 64 00 41 64 00 91 2e 6e     .P..:d.>d.Ad...n
    1b13:	07 2e 50 07 2e 6e 07 2e 6e 07 90 37 64 00 3c 64     ..P..n..n..7d.<d
    1b23:	00 3f 64 00 91 30 6e 07 30 50 07 30 50 07 30 6e     .?d..0n.0P.0P.0n
    1b33:	07 30 50 07 30 50 07 30 6e 07 30 50 07 30 50 07     .0P.0P.0n.0P.0P.
    1b43:	30 6e 06 30 50 07 30 50 07 30 6e 07 30 50 07 2e     0n.0P.0P.0n.0P..
    1b53:	6e 0e 30 6e 07 30 50 07 30 50 07 30 6e 07 30 50     n.0n.0P.0P.0n.0P
    1b63:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 07     .0P.0n.0P.0P.0n.
    1b73:	30 50 07 30 50 07 30 6e 07 30 50 07 2e 6e 0d 90     0P.0P.0n.0P..n..
    1b83:	33 64 00 37 64 00 3c 64 00 91 30 6e 07 30 50 07     3d.7d.<d..0n.0P.
    1b93:	30 50 07 90 32 64 00 37 64 00 3a 64 00 91 30 6e     0P..2d.7d.:d..0n
    1ba3:	07 30 50 07 30 50 07 90 33 64 00 37 64 00 3c 64     .0P.0P..3d.7d.<d
    1bb3:	00 91 30 6e 07 30 50 07 30 50 07 90 37 64 00 3a     ..0n.0P.0P..7d.:
    1bc3:	64 00 3e 64 00 91 30 6e 07 30 50 07 30 50 07 90     d.>d..0n.0P.0P..
    1bd3:	37 64 00 3c 64 00 3f 64 00 91 30 6e 07 30 50 07     7d.<d.?d..0n.0P.
    1be3:	90 37 64 00 3a 64 00 3e 64 00 91 2e 6e 0e 90 3a     .7d.:d.>d...n..:
    1bf3:	64 00 43 64 00 3f 64 00 91 33 6e 07 33 50 07 33     d.Cd.?d..3n.3P.3
    1c03:	50 07 33 6e 06 33 50 07 33 50 07 90 37 64 00 3a     P.3n.3P.3P..7d.:
    1c13:	64 00 3f 64 00 91 33 6e 07 33 50 07 33 50 07 33     d.?d..3n.3P.3P.3
    1c23:	6e 07 33 50 07 33 50 07 90 3a 64 00 3f 64 00 43     n.3P.3P..:d.?d.C
    1c33:	64 00 91 33 6e 07 33 50 07 32 6e 0e 90 41 64 00     d..3n.3P.2n..Ad.
    1c43:	3e 64 00 3a 64 00 91 2e 6e 07 2e 50 07 2e 50 07     >d.:d...n..P..P.
    1c53:	2e 6e 07 2e 50 07 2e 50 07 90 35 64 00 3a 64 00     .n..P..P..5d.:d.
    1c63:	3e 64 00 91 2e 6e 07 2e 50 06 2e 50 07 2e 6e 07     >d...n..P..P..n.
    1c73:	2e 50 07 2e 50 07 90 3a 64 00 3e 64 00 41 64 00     .P..P..:d.>d.Ad.
    1c83:	91 2e 6e 05 ff 06 01 45 02 91 2e 50 07 2c 6e 0e     ..n....E...P.,n.
    1c93:	90 37 64 00 3c 64 00 3f 64 00 91 30 6e 07 30 50     .7d.<d.?d..0n.0P
    1ca3:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 07     .0P.0n.0P.0P.0n.
    1cb3:	30 50 07 30 50 07 30 6e 07 30 50 07 30 50 07 ff     0P.0P.0n.0P.0P..
    1cc3:	2f 00                                               /.

00001cc5 <my_patches>:
    1cc5:	00 00 00 3c 1e 00 00 00 00 00 00 00 3c 1e 00 00     ...<........<...
    1cd5:	00 00 00 00 00 2b 1e 00 00 00 00 00 00 00 d5 1d     .....+..........
    1ce5:	00 00 00 00 00 00 00 2b 1e 00 00 00 00 00 00 00     .......+........
    1cf5:	04 1d 00 00 00 00 00 00 00 04 1d 00 00 00 00        ...............

00001d04 <explode>:
    1d04:	00 07 7f 00 02 03 00 00 ff 00 08 41 01 04 04 01     ...........A....
    1d14:	04 04 01 04 04 01 04 04 01 04 04 01 04 04 01 04     ................
    1d24:	04 01 04 04 01 04 04 03 07 64 00 08 3c 01 04 04     .........d..<...
    1d34:	01 04 04 01 04 04 01 04 04 01 04 04 01 04 04 01     ................
    1d44:	04 04 01 04 04 01 04 04 03 07 50 00 08 37 01 04     ..........P..7..
    1d54:	04 01 04 04 01 04 04 01 04 04 01 04 04 01 04 04     ................
    1d64:	01 04 04 01 04 04 01 04 04 03 07 32 00 08 32 01     ...........2..2.
    1d74:	04 04 01 04 04 01 04 04 01 04 04 01 04 04 01 04     ................
    1d84:	04 01 04 04 01 04 04 01 04 04 03 07 28 00 08 2d     ............(..-
    1d94:	01 04 04 01 04 04 01 04 04 01 04 04 01 04 04 01     ................
    1da4:	04 04 01 04 04 01 04 04 01 04 04 03 07 14 00 08     ................
    1db4:	28 01 04 04 01 04 04 01 04 04 01 04 04 01 04 04     (...............
    1dc4:	01 04 04 01 04 04 01 04 04 01 04 04 01 05 00 00     ................
    1dd4:	ff                                                  .

00001dd5 <pshoot>:
    1dd5:	00 02 03 00 07 7f 00 08 50 01 04 06 01 04 06 01     ........P.......
    1de5:	04 06 01 07 00 03 07 7f 00 08 50 01 04 06 01 04     ..........P.....
    1df5:	06 01 04 06 01 07 00 03 08 50 00 07 20 01 04 06     .........P.. ...
    1e05:	01 04 06 01 04 06 01 04 06 01 07 00 03 08 50 00     ..............P.
    1e15:	07 0f 01 04 06 01 04 06 01 04 06 01 04 06 01 07     ................
    1e25:	00 01 05 00 00 ff                                   ......

00001e2b <navigate>:
    1e2b:	00 02 04 00 07 70 00 00 d8 00 08 3c 01 05 00 00     .....p.....<....
    1e3b:	ff                                                  .

00001e3c <instrument>:
    1e3c:	00 02 04 00 00 dd 00 ff                             ........

00001e44 <sprites_data>:
    1e44:	fe fe fe fe fe fe fe 87 fe fe fe fe fe fe 87 87     ................
    1e54:	fe fe fe fe fe fe 87 87 fe fe fe fe 85 85 85 87     ................
    1e64:	fe fe fe 85 87 87 87 85 fe fe 85 87 87 87 87 85     ................
    1e74:	fe 85 87 87 87 85 85 87 85 87 87 85 85 87 87 87     ................
    1e84:	87 87 87 fe fe fe fe fe d2 d2 eb d2 fe fe fe fe     ................
    1e94:	87 d2 fd eb fe fe fe fe 87 87 eb d2 fe fe fe fe     ................
    1ea4:	85 87 87 d2 fe fe fe fe 87 85 85 87 85 fe fe fe     ................
    1eb4:	87 ef 87 87 87 85 fe fe ef ff ef 87 87 85 fe fe     ................
    1ec4:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 87     ................
    1ed4:	fe fe fe fe fe fe 87 87 fe fe fe fe fe fe 87 87     ................
    1ee4:	fe fe fe fe 85 85 85 87 fe fe fe 85 87 87 87 85     ................
    1ef4:	fe fe 85 87 87 87 87 85 fe 85 87 87 87 85 85 87     ................
    1f04:	fe fe fe fe fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    1f14:	d2 d2 eb d2 fe fe fe fe 87 d2 fd eb fe fe fe fe     ................
    1f24:	87 87 eb d2 fe fe fe fe 85 87 87 d2 fe fe fe fe     ................
    1f34:	87 85 85 87 85 fe fe fe 87 ef 87 87 87 85 fe fe     ................
    1f44:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1f54:	fe fe fe fe fe fe fe fe fe ba ba ba ba ba ba fe     ................
    1f64:	ba bd bd bd bd bd bd ba fe ba ba ba ba ba ba fe     ................
    1f74:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1f84:	fe fe 46 46 46 46 46 46 fe a5 a5 a5 47 47 46 fe     ..FFFFFF....GGF.
    1f94:	fe 46 46 47 47 46 3f 3f 46 46 47 47 46 fe fe fe     .FFGGF??FFGGF...
    1fa4:	46 46 47 47 46 fe fe fe fe 46 46 47 47 3f 3f fe     FFGGF....FFGG??.
    1fb4:	fe a5 a5 a5 47 fe fe fe fe fe 46 46 46 46 fe fe     ....G.....FFFF..
    1fc4:	fe fe fe ff fe fe fe fe fe fe ff ff ff fe fe fe     ................
    1fd4:	fe ff ff fd ff ff fe fe ff ff fd f8 fd ff ff fe     ................
    1fe4:	fe ff ff fd ff ff fe fe fe fe ff ff ff fe fe fe     ................
    1ff4:	fe fe fe ff fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2004:	fe fe fe 07 fe fe fe fe fe fe 07 07 07 fe fe fe     ................
    2014:	fe 07 07 27 07 07 fe fe 07 07 27 77 27 07 07 fe     ...'......'w'...
    2024:	fe 07 07 27 07 07 fe fe fe fe 07 07 07 fe fe fe     ...'............
    2034:	fe fe fe 07 fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2044:	fe fe fe 38 fe fe fe fe fe fe 38 38 38 fe fe fe     ...8......888...
    2054:	fe 38 38 bc 38 38 fe fe 38 38 bc be bc 38 38 fe     .88.88..88...88.
    2064:	fe 38 38 bc 38 38 fe fe fe fe 38 38 38 fe fe fe     .88.88....888...
    2074:	fe fe fe 38 fe fe fe fe fe fe fe fe fe fe fe fe     ...8............
    2084:	fe fe fe a2 fe fe fe fe fe fe a2 a2 a2 fe fe fe     ................
    2094:	fe a2 a2 aa a2 a2 fe fe a2 a2 aa ad aa a2 a2 fe     ................
    20a4:	fe a2 a2 aa a2 a2 fe fe fe fe a2 a2 a2 fe fe fe     ................
    20b4:	fe fe fe a2 fe fe fe fe fe fe fe fe fe fe fe fe     ................
    20c4:	fe fe fe 6e fe fe fe fe fe fe 6e 6e 6e fe fe fe     ...n......nnn...
    20d4:	fe 6e 6e 6f 6e 6e fe fe 6e 6e 6f 77 6f 6e 6e fe     .nnonn..nnowonn.
    20e4:	fe 6e 6e 6f 6e 6e fe fe fe fe 6e 6e 6e fe fe fe     .nnonn....nnn...
    20f4:	fe fe fe 6e fe fe fe fe fe fe fe fe fe fe fe fe     ...n............
    2104:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2114:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2124:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2134:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2144:	85 87 87 85 fe 85 87 87 fe 85 87 85 fe 85 87 87     ................
    2154:	fe 85 87 87 ad ad ad ad fe fe 85 87 ad ad ad ad     ................
    2164:	fe fe 85 87 ad ad ad ad fe fe fe 85 a4 ad 87 87     ................
    2174:	fe fe fe fe a4 a4 85 87 fe fe fe fe a4 a4 85 87     ................
    2184:	87 ef 87 85 87 85 fe fe 87 87 87 85 87 87 85 fe     ................
    2194:	ad ad ad ad ad 87 85 fe ad ad ad ad ad ad a4 ad     ................
    21a4:	ad ad ad ad ad a4 a4 a4 87 87 87 85 fe fe fe fe     ................
    21b4:	87 87 87 85 fe fe fe fe 87 87 87 85 fe fe fe fe     ................
    21c4:	87 ef 87 85 87 85 fe fe 87 87 87 85 87 87 85 fe     ................
    21d4:	ad ad ad ad ad 87 85 fe ad ad ad ad ad ad a4 ad     ................
    21e4:	ad ad ad ad ad a4 a4 a4 87 87 87 85 fe fe fe fe     ................
    21f4:	87 87 87 85 fe fe fe fe 87 87 85 fe fe fe fe fe     ................
    2204:	85 87 87 85 85 87 87 87 85 87 87 85 fe 85 87 87     ................
    2214:	fe 85 87 85 fe 85 87 87 fe 85 87 87 ad ad ad ad     ................
    2224:	fe fe 85 87 ad ad ad ad fe fe 85 87 ad ad ad ad     ................
    2234:	fe fe fe 85 a4 ad 87 87 fe fe fe fe a4 a4 85 87     ................
    2244:	ef ff ef 87 87 85 fe fe 87 ef 87 85 87 85 fe fe     ................
    2254:	87 87 87 85 87 87 85 fe ad ad ad ad ad 87 85 fe     ................
    2264:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    2274:	87 87 87 87 fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    2284:	87 ef 87 85 87 85 fe fe 87 87 87 85 87 87 85 fe     ................
    2294:	ad ad ad ad ad 87 85 fe ad ad ad ad ad ad a4 ad     ................
    22a4:	ad ad ad ad ad a4 a4 a4 87 87 87 87 fe fe fe fe     ................
    22b4:	87 87 87 87 fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    22c4:	ef ff ef 87 87 85 fe fe 87 ef 87 85 87 85 fe fe     ................
    22d4:	87 87 87 85 87 87 85 fe ad ad ad ad ad 87 85 fe     ................
    22e4:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    22f4:	87 87 87 87 fe fe fe fe 87 87 87 87 87 fe fe fe     ................
    2304:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2314:	fe fe fe 27 07 fe fe fe fe fe 27 77 27 07 fe fe     ...'......'w'...
    2324:	fe fe 07 27 07 07 fe fe fe fe fe 07 07 fe fe fe     ...'............
    2334:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2344:	fe fe a3 a0 a0 a3 3f 3f fe a3 a3 a3 a3 a3 a3 fe     ......??........
    2354:	a3 a3 a3 78 78 a3 a3 a3 a0 a3 78 7d 7d 78 a3 a0     ...xx.....x}}x..
    2364:	a0 a3 78 7d 7d 78 a3 a0 a3 a3 a3 78 78 a3 a3 a3     ..x}}x.....xx...
    2374:	fe a3 a3 a3 a3 a3 a3 fe fe fe a3 a0 a0 a3 3f 3f     ..............??
    2384:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2394:	fe fe fe eb d2 fe fe fe fe fe eb 77 eb d2 fe fe     ...........w....
    23a4:	fe fe d2 eb d2 d2 fe fe fe fe fe d2 d2 fe fe fe     ................
    23b4:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    23c4:	fe c7 c7 c7 c7 c7 c7 c7 fe fe ef ef ef ef ef fe     ................
    23d4:	fe fe ff 99 99 99 ff fe fe fe ff 99 ff 99 ff fe     ................
    23e4:	fe fe ff 99 99 99 ff fe fe fe ff 99 ff ff ff fe     ................
    23f4:	fe fe ef ef ef ef ef fe fe c7 c7 c7 c7 c7 c7 c7     ................
    2404:	fe 47 47 47 47 47 47 47 fe fe af af af af af fe     .GGGGGGG........
    2414:	fe fe ff 99 ff ff ff fe fe fe ff 99 99 99 ff fe     ................
    2424:	fe fe ff 99 ff 99 ff fe fe fe ff 99 99 99 ff fe     ................
    2434:	fe fe af af af af af fe fe 47 47 47 47 47 47 47     .........GGGGGGG
    2444:	fe fe fe fe fe fe 85 87 fe fe fe fe fe fe 85 87     ................
    2454:	fe fe fe fe fe 85 87 87 fe fe fe fe fe 85 87 87     ................
    2464:	fe fe fe fe 85 87 87 fe fe fe fe fe 85 87 87 fe     ................
    2474:	fe fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4     ................
    2484:	87 fe 85 85 fe fe fe fe 87 fe 85 85 85 fe fe fe     ................
    2494:	fe fe 85 85 85 fe fe fe fe fe 85 85 85 fe fe fe     ................
    24a4:	fe fe 85 85 85 fe fe fe fe fe 85 85 85 fe fe fe     ................
    24b4:	fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe     ................
    24c4:	fe fe fe fe fe fe fe 85 fe fe fe fe fe fe fe 85     ................
    24d4:	fe fe fe fe fe 85 85 87 fe fe fe fe 85 87 87 87     ................
    24e4:	fe fe fe a4 87 87 87 87 fe fe fe a4 87 87 87 fe     ................
    24f4:	fe fe fe a4 a4 fe fe fe fe fe fe a4 a4 a4 fe fe     ................
    2504:	87 87 87 fe fe fe fe fe 87 87 87 87 fe fe fe fe     ................
    2514:	87 87 87 87 fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    2524:	87 85 85 fe fe fe fe fe 85 85 85 fe fe fe fe fe     ................
    2534:	a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe fe fe     ................
    2544:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 85 85     ................
    2554:	fe fe fe fe 85 85 85 85 a4 a4 85 85 85 85 85 fe     ................
    2564:	a4 a4 85 85 85 85 85 fe a4 a4 85 85 85 85 fe fe     ................
    2574:	a4 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2584:	87 87 87 fe fe fe fe fe fe 85 87 87 fe fe fe fe     ................
    2594:	fe 85 87 87 87 fe fe fe fe fe 85 87 87 fe fe fe     ................
    25a4:	fe fe 85 87 87 87 fe fe fe fe fe 85 87 87 fe fe     ................
    25b4:	fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe     ................
    25c4:	fe fe fe fe fe fe fe 85 fe fe fe fe fe fe fe 85     ................
    25d4:	fe fe fe fe fe 85 85 85 fe fe fe fe 85 85 85 85     ................
    25e4:	fe fe fe a4 85 85 85 85 fe fe fe a4 85 85 85 fe     ................
    25f4:	fe fe fe a4 a4 fe fe fe fe fe fe a4 a4 a4 fe fe     ................
    2604:	87 87 87 fe fe fe fe fe 85 87 87 85 fe fe fe fe     ................
    2614:	85 87 87 85 fe fe fe fe 85 87 87 fe fe fe fe fe     ................
    2624:	85 87 87 fe fe fe fe fe 85 87 87 fe fe fe fe fe     ................
    2634:	a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe fe fe     ................
    2644:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 85 85     ................
    2654:	fe fe fe fe 85 85 85 85 a4 a4 85 85 85 85 a4 a4     ................
    2664:	a4 a4 85 85 85 85 a4 a4 a4 a4 85 85 85 85 a4 a4     ................
    2674:	a4 fe fe fe fe fe a4 fe fe fe fe fe fe fe fe fe     ................
    2684:	87 87 85 87 87 fe fe fe fe fe 85 87 87 87 fe fe     ................
    2694:	fe fe 85 87 87 87 fe fe 85 85 85 87 87 fe fe fe     ................
    26a4:	87 87 87 87 87 fe fe fe 87 87 87 87 fe fe fe fe     ................
    26b4:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    26c4:	fe fe fe fe fe fe fe fe fe fe 00 00 00 00 fe fe     ................
    26d4:	ad 00 0f 1f 1f 0f 00 ad ad 00 00 00 00 00 00 ad     ................
    26e4:	ad ad 00 00 00 00 ad ad ad 00 ad 00 00 ad 00 ad     ................
    26f4:	ad fe 00 00 00 00 fe ad ad fe fe fe fe fe fe ad     ................
    2704:	fe fe fe 00 00 00 fe fe 00 00 00 0f 1f 00 00 fe     ................
    2714:	fe fe 00 00 00 00 00 fe fe fe fe fe 00 00 fe fe     ................
    2724:	fe 00 00 00 00 00 00 fe 00 ad ad ad ad ad ad 00     ................
    2734:	00 ad ad ad ad ad ad 00 fe 00 00 00 00 00 00 fe     ................
    2744:	ff ff ff ff ff ff ff a3 ff ff ff ff ff ff ff a3     ................
    2754:	a3 ff ff ff ff ff a3 fe a3 ff ff ff ff ff a3 fe     ................
    2764:	fe a3 ff ff ff a3 fe fe fe a3 ff ff ff a3 fe fe     ................
    2774:	fe fe a3 ff a3 fe fe fe fe fe a3 ff a3 fe fe fe     ................
    2784:	fe fe fe 07 07 fe fe fe fe fe 07 27 07 07 fe fe     ...........'....
    2794:	fe 07 27 77 27 07 07 fe fe 07 07 27 07 07 07 fe     ..'w'......'....
    27a4:	fe fe 07 27 07 07 fe fe fe fe 07 07 07 fe fe fe     ...'............
    27b4:	fe fe fe 07 07 fe fe fe fe fe fe 07 fe fe fe fe     ................
    27c4:	fe fe fe 14 fe fe fe fe fe fe 14 14 14 fe fe fe     ................
    27d4:	fe 14 14 0f 14 14 fe fe 14 14 0f 06 0f 14 14 fe     ................
    27e4:	fe 14 14 0f 14 14 fe fe fe fe 14 14 14 fe fe fe     ................
    27f4:	fe fe fe 14 fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2804:	fe fe fe 7f fe fe fe fe fe fe 7f 7f 7f fe fe fe     ................
    2814:	fe 7f 7f 07 7f 7f fe fe 7f 7f 07 00 07 7f 7f fe     ................
    2824:	fe 7f 7f 07 7f 7f fe fe fe fe 7f 7f 7f fe fe fe     ................
    2834:	fe fe fe 7f fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2844:	fe fe fe fe 38 fe fe fe fe fe fe 38 38 fe fe fe     ....8......88...
    2854:	fe fe fe 38 38 38 fe fe fe fe 38 38 bc 38 fe fe     ...888....88.8..
    2864:	fe 38 38 38 bc 38 38 fe fe 38 38 bc be bc 38 fe     .888.88..88...8.
    2874:	fe fe 38 38 bc 38 fe fe fe fe fe 38 38 fe fe fe     ..88.8.....88...
    2884:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 7f     ................
    2894:	fe fe fe fe fe 7f 7f 7f fe fe fe fe 7f 7f 7f 7f     ................
    28a4:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe fe fe     ................
    28b4:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    28c4:	a4 fe fe fe fe fe fe fe a4 ad fe fe ff ff a4 ad     ................
    28d4:	a4 ad f6 ff ff a4 ad f6 a4 ad f6 ff a4 ad f6 ff     ................
    28e4:	a4 ad fe fe a4 ad f6 ff a4 fe fe a4 a4 ad f6 fe     ................
    28f4:	fe fe fe a4 a4 ad f6 f6 fe fe fe fe fe fe fe fe     ................
    2904:	fe fe fe fe fe fe fe fe f6 ff ff ff d2 fe fe fe     ................
    2914:	ff ff ff ff d2 eb fe fe ff fe ff ff eb fd d2 fe     ................
    2924:	fe fe fe ff d2 eb d2 d2 fe fe fe fe fe fe fe fe     ................
    2934:	f6 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2944:	fe fe bf 7f 7f bf fe fe fe 7f 7f 7f 7f 7f 7f fe     ................
    2954:	bf 7f 7f 7f 7f 7f 7f bf 7f 7f 7f 7f 7f 7f 7f 7f     ................
    2964:	7f 7f 7f 7f 7f 7f 7f 7f bf 7f 7f 7f 7f 7f 7f bf     ................
    2974:	fe 7f 7f 7f 7f 7f 7f fe fe fe bf 7f 7f bf fe fe     ................
    2984:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2994:	fe fe fe 7f 7f fe fe fe fe fe 7f 7f 7f 7f fe fe     ................
    29a4:	fe fe 7f 7f 7f 7f fe fe fe fe fe 7f 7f fe fe fe     ................
    29b4:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    29c4:	fe fe bf 7f 7f bf fe fe fe 7f 7f 7f 7f 7f 7f fe     ................
    29d4:	bf 7f fe fe 7f 7f 7f bf 7f fe fe fe fe 7f 7f 7f     ................
    29e4:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe 7f bf     ................
    29f4:	fe fe fe fe fe fe 7f fe fe fe fe fe fe bf fe fe     ................
    2a04:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2a14:	fe fe fe fe fe fe fe fe fe fe fe e3 fe fe fe fe     ................
    2a24:	fe fe fe ff fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2a34:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2a44:	fe fe fe fe fe fe fe fe fe fe fe fe ff fe fe fe     ................
    2a54:	fe fe fe fe 7f ff fe fe fe fe fe fe 7f 7f ff fe     ................
    2a64:	fe fe fe fe 7f 7f 7f ff fe fe fe fe 7f 7f 7f fe     ................
    2a74:	fe fe fe fe 7f 7f fe fe fe fe fe fe 7f fe fe fe     ................
    2a84:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2a94:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2aa4:	7f 7f 7f 7f 7f 7f ff fe fe 7f 7f 7f 7f ff fe fe     ................
    2ab4:	fe fe 7f 7f ff fe fe fe fe fe fe fe fe fe fe fe     ................
    2ac4:	fe fe fe ff fe fe fe fe fe fe ff 7f 7f fe fe fe     ................
    2ad4:	fe ff 7f 7f 7f 7f fe fe ff 7f 7f 7f 7f 7f 7f fe     ................
    2ae4:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2af4:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2b04:	fe fe 00 00 00 00 fe fe fe 00 0f 1f 1f 0f 00 fe     ................
    2b14:	ad 00 00 00 00 00 00 ad ad 00 ad 00 00 ad 00 ad     ................
    2b24:	ad ad 00 00 00 00 ad ad ad fe 00 00 00 00 fe ad     ................
    2b34:	ad fe fe fe fe fe fe ad ad fe fe fe fe fe fe ad     ................
    2b44:	fe fe fe 00 00 fe fe fe fe fe 00 00 00 00 fe fe     ................
    2b54:	fe 00 00 0f 0f 00 00 fe 00 00 0f 1f 1f 0f 00 00     ................
    2b64:	00 00 fe fe fe fe 00 00 00 fe fe fe fe fe fe 00     ................
    2b74:	00 fe fe fe fe fe fe 00 fe fe fe fe fe fe fe fe     ................
    2b84:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2b94:	fe fe fe fe fe fe fe fe fe 07 07 07 07 07 07 fe     ................
    2ba4:	07 27 27 27 27 27 27 07 fe 07 07 07 07 07 07 fe     .''''''.........
    2bb4:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2bc4:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 7f     ................
    2bd4:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe fe 7f     ................
    2be4:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2bf4:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2c04:	a4 fe fe fe fe fe fe fe a4 a4 fe fe fe fe fe fe     ................
    2c14:	a4 a4 ad fe fe fe fe fe a4 a4 ad ad fe fe fe fe     ................
    2c24:	a4 a4 ad ad f6 fe fe fe a4 a4 ad ad f6 f6 ff ff     ................
    2c34:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    2c44:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2c54:	fe fe ff ff ff ff a4 a4 fe ff ff ff ff a4 a4 a4     ................
    2c64:	ff ff ff ff ff a4 a4 a4 ff ff ff ff a4 a4 a4 ad     ................
    2c74:	ff ff ff ff a4 a4 ad ad ff ff ff a4 a4 ad ad f6     ................
    2c84:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2c94:	a4 ad ad f6 f6 ff ff ff a4 ad ad f6 f6 ff ff ff     ................
    2ca4:	ad ad f6 f6 ff ff ff ff ad f6 f6 ff ff ff ff ff     ................
    2cb4:	f6 f6 ff ff ff ff ff ff f6 ff ff 7f 7f ff ff ff     ................
    2cc4:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2cd4:	d2 fe fe fe fe fe fe fe d2 d2 fe fe fe fe fe fe     ................
    2ce4:	d2 d2 d2 fe fe fe fe fe d2 d3 eb d3 fe fe fe fe     ................
    2cf4:	d2 eb fd eb d2 fe fe fe d2 d3 eb d3 d2 d2 fe fe     ................
    2d04:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    2d14:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 7f 7f fe     ................
    2d24:	a4 a4 ad ad 7f 7f 7f fe a4 a4 ad fe fe 7f fe fe     ................
    2d34:	a4 a4 fe fe fe fe fe fe a4 fe fe fe fe fe fe fe     ................
    2d44:	ff ff fe a4 ad ad f6 f6 ff fe a4 a4 ad ad f6 f6     ................
    2d54:	fe fe a4 a4 ad ad f6 f6 fe a4 a4 a4 ad ad f6 f6     ................
    2d64:	fe a4 a4 a4 a4 ad ad f6 a4 a4 a4 a4 a4 a4 ad ad     ................
    2d74:	a4 a4 a4 a4 a4 a4 a4 ad a4 a4 a4 a4 a4 a4 a4 a4     ................
    2d84:	ff ff 7f 7f 7f 7f ff ff ff fe 7f 7f 7f 7f fe ff     ................
    2d94:	fe fe 7f 7f 7f fe fe fe fe fe fe 7f fe fe fe fe     ................
    2da4:	f6 fe fe fe fe fe fe fe f6 f6 fe fe fe fe fe fe     ................
    2db4:	ad f6 f6 fe fe fe fe fe ad ad f6 f6 fe fe fe fe     ................
    2dc4:	d2 d2 d2 d2 d2 d2 d2 fe ff ff ff ff ff ff ff ff     ................
    2dd4:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2de4:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2df4:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2e04:	ef ff ef 87 87 85 fe fe 87 ef 87 85 87 85 fe fe     ................
    2e14:	87 87 87 85 87 87 85 fe ad ad ad ad ad 87 85 fe     ................
    2e24:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    2e34:	87 87 87 85 fe fe fe fe 87 87 85 fe fe fe fe fe     ................
    2e44:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 87 87     ................
    2e54:	fe fe fe fe 85 87 87 87 a4 a4 85 85 85 87 87 fe     ................
    2e64:	a4 a4 87 87 87 87 87 fe a4 a4 87 87 87 87 fe fe     ................
    2e74:	a4 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2e84:	87 87 85 fe fe fe fe fe fe 85 85 85 fe fe fe fe     ................
    2e94:	fe 85 85 85 85 fe fe fe fe fe 85 85 85 fe fe fe     ................
    2ea4:	fe fe 85 85 85 85 fe fe fe fe fe 85 85 85 fe fe     ................
    2eb4:	fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe     ................
    2ec4:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2ed4:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2ee4:	fe fe fe fe fe fe fe fe fe fe fe fe fe 85 85 85     ................
    2ef4:	fe a4 87 87 87 87 87 87 a4 a4 87 87 87 87 87 87     ................
    2f04:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 87     ................
    2f14:	fe fe fe fe 85 85 85 87 fe fe fe 85 87 87 87 85     ................
    2f24:	fe fe 85 85 87 87 87 87 85 85 85 85 85 87 87 ad     ................
    2f34:	87 87 87 87 ad 85 87 87 87 87 87 87 ad ad a4 a4     ................
    2f44:	87 87 87 87 fe fe fe fe 87 d2 d2 eb d2 fe fe fe     ................
    2f54:	87 87 d2 fd eb fe fe fe 87 87 87 eb d2 fe fe fe     ................
    2f64:	85 85 87 87 d2 fe fe fe ad ad ad ad ad 87 ef fe     ................
    2f74:	ad ad ad ad ad ad a4 ad a4 ad ad ad ad a4 a4 a4     ................
    2f84:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    2f94:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 7f 7f 7f     ................
    2fa4:	a4 a4 ad ad 7f 7f 7f fe a4 a4 ad fe 7f 7f 7f fe     ................
    2fb4:	a4 a4 fe fe fe 7f fe fe a4 fe fe fe fe fe fe fe     ................
    2fc4:	ff ff 7f 7f 7f 7f ff ff ff 7f 7f 7f 7f 7f 7f ff     ................
    2fd4:	fe fe 7f 7f 7f 7f fe fe fe fe 7f 7f 7f fe fe fe     ................
    2fe4:	f6 fe fe 7f fe fe fe fe f6 f6 fe fe fe fe fe fe     ................
    2ff4:	ad f6 f6 fe fe fe fe fe ad ad f6 f6 fe fe fe fe     ................
    3004:	fe fe fe fe fe fe fe 9c fe fe fe fe fe fe 9c 9c     ................
    3014:	fe fe fe fe fe fe 9c 9c fe fe fe fe 9a 9a 9a 9c     ................
    3024:	fe fe fe 9a 9c 9c 9c 9a fe fe 9a 9c 9c 9c 9c 9a     ................
    3034:	fe 9a 9c 9c 9c 9a 9a 9c 9a 9c 9c 9a 9a 9c 9c 9c     ................
    3044:	9c 9c 9c fe fe fe fe fe 07 07 27 07 fe fe fe fe     ..........'.....
    3054:	9c 07 77 27 fe fe fe fe 9c 9c 27 07 fe fe fe fe     ..w'......'.....
    3064:	9a 9c 9c 07 fe fe fe fe 9c 9a 9a 9c 9a fe fe fe     ................
    3074:	9c ad 9c 9c 9c 9a fe fe ad ff ad 9c 9c 9a fe fe     ................
    3084:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 9c     ................
    3094:	fe fe fe fe fe fe 9c 9c fe fe fe fe fe fe 9c 9c     ................
    30a4:	fe fe fe fe 9a 9a 9a 9c fe fe fe 9a 9c 9c 9c 9a     ................
    30b4:	fe fe 9a 9c 9c 9c 9c 9a fe 9a 9c 9c 9c 9a 9a 9c     ................
    30c4:	fe fe fe fe fe fe fe fe 9c 9c 9c fe fe fe fe fe     ................
    30d4:	07 07 27 07 fe fe fe fe 9c 07 77 27 fe fe fe fe     ..'.......w'....
    30e4:	9c 9c 27 07 fe fe fe fe 9a 9c 9c 07 fe fe fe fe     ..'.............
    30f4:	9c 9a 9a 9c 9a fe fe fe 9c ad 9c 9c 9c 9a fe fe     ................
    3104:	9a 9c 9c 9a fe 9a 9c 9c fe 9a 9c 9a fe 9a 9c 9c     ................
    3114:	fe 9a 9c 9c ad ad ad ad fe fe 9a 9c ad ad ad ad     ................
    3124:	fe fe 9a 9c ad ad ad ad fe fe fe 9a 00 ad 9c 9c     ................
    3134:	fe fe fe fe 00 00 9a 9c fe fe fe fe 00 00 9a 9c     ................
    3144:	9c ad 9c 9a 9c 9a fe fe 9c 9c 9c 9a 9c 9c 9a fe     ................
    3154:	ad ad ad ad ad 9c 9a fe ad ad ad ad ad ad 00 ad     ................
    3164:	ad ad ad ad ad 00 00 00 9c 9c 9c 9a fe fe fe fe     ................
    3174:	9c 9c 9c 9a fe fe fe fe 9c 9c 9c 9a fe fe fe fe     ................
    3184:	9c ad 9c 9a 9c 9a fe fe 9c 9c 9c 9a 9c 9c 9a fe     ................
    3194:	ad ad ad ad ad 9c 9a fe ad ad ad ad ad ad 00 ad     ................
    31a4:	ad ad ad ad ad 00 00 00 9c 9c 9c 9a fe fe fe fe     ................
    31b4:	9c 9c 9c 9a fe fe fe fe 9c 9c 9a fe fe fe fe fe     ................
    31c4:	9a 9c 9c 9a 9a 9c 9c 9c 9a 9c 9c 9a fe 9a 9c 9c     ................
    31d4:	fe 9a 9c 9a fe 9a 9c 9c fe 9a 9c 9c ad ad ad ad     ................
    31e4:	fe fe 9a 9c ad ad ad ad fe fe 9a 9c ad ad ad ad     ................
    31f4:	fe fe fe 9a 00 ad 9c 9c fe fe fe fe 00 00 9a 9c     ................
    3204:	ad ff ad 9c 9c 9a fe fe 9c ad 9c 9a 9c 9a fe fe     ................
    3214:	9c 9c 9c 9a 9c 9c 9a fe ad ad ad ad ad 9c 9a fe     ................
    3224:	ad ad ad ad ad ad 00 ad ad ad ad ad ad 00 00 00     ................
    3234:	9c 9c 9c 9c fe fe fe fe 9c 9c 9c fe fe fe fe fe     ................
    3244:	9c ad 9c 9a 9c 9a fe fe 9c 9c 9c 9a 9c 9c 9a fe     ................
    3254:	ad ad ad ad ad 9c 9a fe ad ad ad ad ad ad 00 ad     ................
    3264:	ad ad ad ad ad 00 00 00 9c 9c 9c 9c fe fe fe fe     ................
    3274:	9c 9c 9c 9c fe fe fe fe 9c 9c 9c fe fe fe fe fe     ................
    3284:	ad ff ad 9c 9c 9a fe fe 9c ad 9c 9a 9c 9a fe fe     ................
    3294:	9c 9c 9c 9a 9c 9c 9a fe ad ad ad ad ad 9c 9a fe     ................
    32a4:	ad ad ad ad ad ad 00 ad ad ad ad ad ad 00 00 00     ................
    32b4:	9c 9c 9c 9c fe fe fe fe 9c 9c 9c 9c 9c fe fe fe     ................
    32c4:	fe fe fe fe fe fe 9a 9c fe fe fe fe fe fe 9a 9c     ................
    32d4:	fe fe fe fe fe 9a 9c 9c fe fe fe fe fe 9a 9c 9c     ................
    32e4:	fe fe fe fe 9a 9c 9c fe fe fe fe fe 9a 9c 9c fe     ................
    32f4:	fe fe fe fe 00 00 00 fe fe fe fe fe 00 00 00 00     ................
    3304:	9c fe 9a 9a fe fe fe fe 9c fe 9a 9a 9a fe fe fe     ................
    3314:	fe fe 9a 9a 9a fe fe fe fe fe 9a 9a 9a fe fe fe     ................
    3324:	fe fe 9a 9a 9a fe fe fe fe fe 9a 9a 9a fe fe fe     ................
    3334:	fe fe 00 00 00 fe fe fe fe fe 00 00 00 00 fe fe     ................
    3344:	fe fe fe fe fe fe fe 9a fe fe fe fe fe fe fe 9a     ................
    3354:	fe fe fe fe fe 9a 9a 9c fe fe fe fe 9a 9c 9c 9c     ................
    3364:	fe fe fe 00 9c 9c 9c 9c fe fe fe 00 9c 9c 9c fe     ................
    3374:	fe fe fe 00 00 fe fe fe fe fe fe 00 00 00 fe fe     ................
    3384:	9c 9c 9c fe fe fe fe fe 9c 9c 9c 9c fe fe fe fe     ................
    3394:	9c 9c 9c 9c fe fe fe fe 9c 9c 9c fe fe fe fe fe     ................
    33a4:	9c 9a 9a fe fe fe fe fe 9a 9a 9a fe fe fe fe fe     ................
    33b4:	00 00 00 fe fe fe fe fe 00 00 00 00 fe fe fe fe     ................
    33c4:	fe fe fe fe 00 00 9a 9c fe fe fe fe 9a 9a 9a 9a     ................
    33d4:	fe fe fe fe 9a 9a 9a 9a 00 00 9a 9a 9a 9a 9a fe     ................
    33e4:	00 00 9a 9a 9a 9a 9a fe 00 00 9a 9a 9a 9a fe fe     ................
    33f4:	00 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3404:	9c 9c 9c fe fe fe fe fe fe 9a 9c 9c fe fe fe fe     ................
    3414:	fe 9a 9c 9c 9c fe fe fe fe fe 9a 9c 9c fe fe fe     ................
    3424:	fe fe 9a 9c 9c 9c fe fe fe fe fe 9a 9c 9c fe fe     ................
    3434:	fe fe fe 00 00 00 fe fe fe fe fe 00 00 00 00 fe     ................
    3444:	fe fe fe fe fe fe fe 9a fe fe fe fe fe fe fe 9a     ................
    3454:	fe fe fe fe fe 9a 9a 9a fe fe fe fe 9a 9a 9a 9a     ................
    3464:	fe fe fe 00 9a 9a 9a 9a fe fe fe 00 9a 9a 9a fe     ................
    3474:	fe fe fe 00 00 fe fe fe fe fe fe 00 00 00 fe fe     ................
    3484:	9c 9c 9c fe fe fe fe fe 9a 9c 9c 9a fe fe fe fe     ................
    3494:	9a 9c 9c 9a fe fe fe fe 9a 9c 9c fe fe fe fe fe     ................
    34a4:	9a 9c 9c fe fe fe fe fe 9a 9c 9c fe fe fe fe fe     ................
    34b4:	00 00 00 fe fe fe fe fe 00 00 00 00 fe fe fe fe     ................
    34c4:	fe fe fe fe 00 00 9a 9c fe fe fe fe 9a 9a 9a 9a     ................
    34d4:	fe fe fe fe 9a 9a 9a 9a 00 00 9a 9a 9a 9a 00 00     ................
    34e4:	00 00 9a 9a 9a 9a 00 00 00 00 9a 9a 9a 9a 00 00     ................
    34f4:	00 fe fe fe fe fe 00 fe fe fe fe fe fe fe fe fe     ................
    3504:	9c 9c 9a 9c 9c fe fe fe fe fe 9a 9c 9c 9c fe fe     ................
    3514:	fe fe 9a 9c 9c 9c fe fe 9a 9a 9a 9c 9c fe fe fe     ................
    3524:	9c 9c 9c 9c 9c fe fe fe 9c 9c 9c 9c fe fe fe fe     ................
    3534:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3544:	fe fe fe fe 00 00 9a 9c fe fe fe fe 9a 9a 9c 9c     ................
    3554:	fe fe fe fe 9a 9c 9c 9c 00 00 9a 9a 9a 9c 9c fe     ................
    3564:	00 00 9c 9c 9c 9c 9c fe 00 00 9c 9c 9c 9c fe fe     ................
    3574:	00 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3584:	9c 9c 9a fe fe fe fe fe fe 9a 9a 9a fe fe fe fe     ................
    3594:	fe 9a 9a 9a 9a fe fe fe fe fe 9a 9a 9a fe fe fe     ................
    35a4:	fe fe 9a 9a 9a 9a fe fe fe fe fe 9a 9a 9a fe fe     ................
    35b4:	fe fe fe 00 00 00 fe fe fe fe fe 00 00 00 00 fe     ................

000035c4 <map_hazard_desert>:
    35c4:	01 01 27                                            ..'

000035c7 <map_hazard_city>:
    35c7:	01 01 28                                            ..(

000035ca <map_hazard_jungle>:
    35ca:	01 01 26                                            ..&

000035cd <map_hazard_fire>:
    35cd:	01 01 25                                            ..%

000035d0 <map_hazard_ice>:
    35d0:	01 01 24                                            ..$

000035d3 <map_enemy_drone>:
    35d3:	01 01 34                                            ..4

000035d6 <map_enemy_tank>:
    35d6:	01 01 23                                            ..#

000035d9 <map_enemy_ball>:
    35d9:	01 01 14                                            ...

000035dc <map_enemy_spider_1>:
    35dc:	01 01 33                                            ..3

000035df <map_enemy_spider_0>:
    35df:	01 01 22                                            .."

000035e2 <map_enemy_shark>:
    35e2:	01 01 05                                            ...

000035e5 <map_enemy_shot>:
    35e5:	01 01 13                                            ...

000035e8 <map_ahero_shot>:
    35e8:	01 01 35                                            ..5

000035eb <map_ahero_jump>:
    35eb:	02 03 49 4a 4e 51 5a 5b                             ..IJNQZ[

000035f3 <map_ahero_step_3>:
    35f3:	02 03 49 4a 4e 4f 5c 5d                             ..IJNO\]

000035fb <map_ahero_step_2>:
    35fb:	02 03 47 48 4b 50 58 59                             ..GHKPXY

00003603 <map_ahero_step_1>:
    3603:	02 03 49 4a 4e 4f 56 57                             ..IJNOVW

0000360b <map_ahero_step_0>:
    360b:	02 03 47 48 4b 4d 54 55                             ..GHKMTU

00003613 <map_ahero_idle>:
    3613:	02 03 47 48 4b 4c 52 53                             ..GHKLRS

0000361b <map_hero_bomb>:
    361b:	01 01 17                                            ...

0000361e <map_hero_powerup>:
    361e:	01 01 16                                            ...

00003621 <map_hero_shot_ball>:
    3621:	01 01 15                                            ...

00003624 <map_hero_shot>:
    3624:	01 01 04                                            ...

00003627 <map_hero_ship_large_1>:
    3627:	04 02 37 38 39 3a 45 3c 46 3e                       ..789:E<F>

00003631 <map_hero_ship_large_0>:
    3631:	04 02 37 38 39 3a 3b 3c 3d 3e                       ..789:;<=>

0000363b <map_hero_ship_1>:
    363b:	03 01 36 2a 2b                                      ..6*+

00003640 <map_hero_ship_0>:
    3640:	03 01 29 2a 2b                                      ..)*+

00003645 <map_hero_prone>:
    3645:	03 01 42 43 44                                      ..BCD

0000364a <map_hero_jump>:
    364a:	02 03 02 03 0f 12 20 21                             ...... !

00003652 <map_hero_step_3>:
    3652:	02 03 02 03 0f 3f 40 41                             .....?@A

0000365a <map_hero_step_2>:
    365a:	02 03 00 01 0c 11 1e 1f                             ........

00003662 <map_hero_step_1>:
    3662:	02 03 02 03 0f 10 1c 1d                             ........

0000366a <map_hero_step_0>:
    366a:	02 03 00 01 0c 0e 1a 1b                             ........

00003672 <map_hero_idle>:
    3672:	02 03 00 01 0c 0d 18 19                             ........

0000367a <map_emerald_4>:
    367a:	01 01 0a                                            ...

0000367d <map_emerald_3>:
    367d:	01 01 09                                            ...

00003680 <map_emerald_2>:
    3680:	01 01 08                                            ...

00003683 <map_emerald_1>:
    3683:	01 01 07                                            ...

00003686 <map_emerald_0>:
    3686:	01 01 06                                            ...

00003689 <map_explosion_2>:
    3689:	01 01 2e                                            ...

0000368c <map_explosion_1>:
    368c:	01 01 2d                                            ..-

0000368f <map_explosion_0>:
    368f:	01 01 2c                                            ..,

00003692 <map_particle>:
    3692:	01 01 2f                                            ../

00003695 <map_up_arrow>:
    3695:	01 01 32                                            ..2

00003698 <map_down_arrow>:
    3698:	01 01 31                                            ..1

0000369b <map_right_arrow>:
    369b:	01 01 30                                            ..0

0000369e <map_none>:
    369e:	01 01 14                                            ...

000036a1 <tiles_data>:
	...
    36e1:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    36f1:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    3701:	ff f8 fb f8 fb f8 f8 fd ff fb f8 f8 fb f8 f8 f8     ................
    3711:	ff f8 f8 fb f8 f8 f8 f8 ff f8 f8 f8 f8 f8 f8 f8     ................
    3721:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3731:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    3741:	fd f8 fb f8 fb f8 f8 fd f8 fb f8 f8 fb f8 f8 f8     ................
    3751:	f8 f8 f8 fb f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    3761:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3771:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    3781:	fd f8 fb f8 fb f8 f8 ff f8 fb f8 f8 fb f8 f8 ff     ................
    3791:	f8 f8 f8 fb f8 f8 f8 ff f8 f8 f8 f8 f8 f8 f8 ff     ................
    37a1:	fa f8 f8 f8 f8 f8 f8 f8 f8 f8 fb f8 f8 f8 fb f8     ................
    37b1:	f8 f8 fb f8 fb fb f8 f8 f8 f8 f8 fb f8 f8 f8 f8     ................
    37c1:	f8 f8 fb f8 fb f8 f8 f8 f8 fb f8 f8 fb f8 f8 f8     ................
    37d1:	f8 f8 f8 fb f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    37e1:	02 02 02 02 02 02 02 02 02 02 0b 02 02 02 0b 02     ................
    37f1:	02 0b 02 0b 02 0b 02 0b 02 02 0b 02 0b 02 0b 02     ................
    3801:	02 0b 02 02 02 0b 02 02 02 02 0b 02 0b 02 0b 02     ................
    3811:	02 0b 02 0b 02 0b 02 02 02 02 0b 02 02 02 0b 02     ................
    3821:	5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c     \\\\\\\\\\\\\\\\
    3831:	02 5c 02 5c 02 5c 02 5c 02 02 0b 02 0b 02 0b 02     .\.\.\.\........
    3841:	02 0b 02 02 02 0b 02 02 02 02 0b 02 0b 02 0b 02     ................
    3851:	02 0b 02 0b 02 0b 02 02 02 02 0b 02 02 02 0b 02     ................
    3861:	18 28 18 28 18 28 18 28 28 18 28 18 28 18 28 18     .(.(.(.((.(.(.(.
    3871:	28 18 28 18 28 18 28 18 28 18 0b 02 0b 02 28 18     (.(.(.(.(.....(.
    3881:	28 0b 02 02 02 0b 02 18 02 02 0b 02 0b 02 0b 02     (...............
    3891:	02 0b 02 0b 02 0b 02 02 02 02 0b 02 02 02 0b 02     ................
    38a1:	50 50 50 50 50 50 50 50 ad ad ad 50 ad ad ad ad     PPPPPPPP...P....
    38b1:	ad a4 ad 50 ad a4 ad ad ad ad ad 50 ad ad ad ad     ...P.......P....
    38c1:	50 50 50 50 50 50 50 50 ad ad ad ad ad ad ad 50     PPPPPPPP.......P
    38d1:	ad a4 ad ad ad a4 ad 50 ad ad ad ad ad ad ad 50     .......P.......P
    38e1:	a5 a5 a5 a5 a5 a5 a5 a5 a4 a4 a4 a4 a4 a4 a4 a4     ................
    38f1:	a4 a4 a4 a4 a4 a4 a4 a4 ad ad ad 50 ad ad ad ad     ...........P....
    3901:	50 50 50 50 50 50 50 50 ad ad ad ad ad ad ad 50     PPPPPPPP.......P
    3911:	ad a4 ad ad ad a4 ad 50 ad ad ad ad ad ad ad 50     .......P.......P
    3921:	65 65 65 65 65 65 65 65 5d 66 65 5d 65 66 66 65     eeeeeeee]fe]effe
    3931:	65 65 65 66 5d 65 65 5d 65 5c 65 65 65 65 65 65     eeef]ee]e\eeeeee
    3941:	65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 5c     eeeeeeeeeeeeeee\
    3951:	5c 5c 65 65 65 5c 65 65 5c 5c 5c 5c 5c 5c 5c 5c     \\eee\ee\\\\\\\\
    3961:	5c 1c 65 65 5d 5c 5c 65 13 13 13 14 13 65 5d 65     \.ee]\\e.....e]e
    3971:	5c 65 13 14 65 65 1c 65 13 13 5c 13 13 65 13 65     \e..ee.e..\..e.e
    3981:	14 14 5c 13 5d 5c 13 13 1c 13 13 5c 5c 5c 5c 5c     ..\.]\.....\\\\\
    3991:	1c 14 5c 13 13 13 13 13 13 5c 65 5c 13 13 5c 13     ..\......\e\..\.
    39a1:	02 02 14 14 14 14 14 14 14 02 02 02 02 02 02 02     ................
    39b1:	14 14 14 02 1d 14 14 02 14 14 02 1d 1d 14 14 02     ................
    39c1:	14 14 02 14 14 14 02 1d 14 14 02 02 14 14 02 1d     ................
    39d1:	14 02 02 02 02 02 02 1d 14 02 1d 14 02 14 14 1d     ................
    39e1:	14 02 02 02 02 02 02 14 02 02 1d 1d 14 14 02 02     ................
    39f1:	14 1d 1d 1d 14 02 02 14 14 14 14 14 02 02 1d 1d     ................
    3a01:	02 02 02 02 02 1d 1d 14 14 14 14 02 14 14 14 14     ................
    3a11:	1d 14 14 02 14 14 14 14 1d 14 02 02 02 02 02 14     ................
    3a21:	02 02 14 14 14 02 14 14 14 02 02 02 14 02 02 02     ................
    3a31:	14 02 14 02 14 14 02 14 02 02 14 02 02 02 02 14     ................
    3a41:	02 02 14 14 14 02 14 14 1d 02 14 14 02 02 02 02     ................
    3a51:	1d 14 02 02 02 1d 1d 14 14 14 02 14 1d 1d 1d 14     ................
    3a61:	14 14 02 1d 1d 14 02 02 02 14 02 1d 14 14 02 02     ................
    3a71:	02 02 02 02 14 02 02 1d 14 14 14 02 02 1d 1d 1d     ................
    3a81:	14 14 02 02 14 14 14 14 02 02 02 02 14 14 02 02     ................
    3a91:	14 14 14 02 02 02 02 1d 14 14 14 14 14 02 14 14     ................
    3aa1:	14 14 14 1d 1d 1d 1d 1d 02 02 02 02 02 02 02 14     ................
    3ab1:	14 1d 1d 1d 1d 14 02 02 14 14 02 02 02 02 02 14     ................
    3ac1:	02 02 02 1d 1d 14 02 02 14 14 14 02 02 02 1d 1d     ................
    3ad1:	02 02 02 02 14 02 14 14 14 1d 1d 14 14 02 02 02     ................
    3ae1:	1d 1d 1d 14 14 14 14 14 14 14 14 02 02 02 02 02     ................
    3af1:	02 02 02 02 14 14 14 14 1d 1d 1d 14 02 02 02 02     ................
    3b01:	02 02 02 02 02 1d 1d 02 14 14 14 02 02 02 14 14     ................
    3b11:	02 02 02 02 14 02 02 02 14 14 1d 1d 1d 1d 14 14     ................
    3b21:	64 64 64 64 64 64 64 80 64 64 64 64 64 64 64 80     ddddddd.ddddddd.
    3b31:	64 64 64 64 64 64 64 80 64 64 64 64 64 64 80 80     ddddddd.dddddd..
    3b41:	64 64 64 64 64 64 80 80 64 64 64 64 64 80 80 80     dddddd..ddddd...
    3b51:	64 64 64 64 80 80 80 80 64 64 80 80 80 80 80 80     dddd....dd......
    3b61:	0f 0f 02 02 02 02 0f 0f 3f 0f 02 02 02 02 0f 3f     ........?......?
    3b71:	3f 0f 0f 02 02 0f 0f 3f 2f 3f 3f 02 02 3f 3f 2f     ?......?/??..??/
    3b81:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    3b91:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    3ba1:	ff ff ff ff ff ff ff a3 ff ff ff ff ff ff ff a3     ................
    3bb1:	a3 ff ff ff ff ff a3 a0 a3 ff ff ff ff ff a3 a0     ................
    3bc1:	a0 a3 ff ff ff a3 a0 a0 a0 a3 ff ff ff a3 a0 a0     ................
    3bd1:	a0 a0 a3 ff a3 a0 a0 a0 a0 a0 a3 ff a3 a0 a0 a0     ................
    3be1:	09 23 23 09 09 23 23 09 09 09 09 23 23 09 09 09     .##..##....##...
    3bf1:	09 06 06 06 06 06 06 09 06 06 06 06 06 06 06 06     ................
    3c01:	09 06 06 06 06 06 06 09 09 09 06 06 06 06 09 09     ................
    3c11:	09 06 06 77 77 06 06 09 06 06 77 02 02 77 06 06     ...ww.....w..w..
    3c21:	27 1f 27 1f 1f 1f 27 1f 1f 1f 1f 27 1f 27 1f 1f     '.'...'....'.'..
    3c31:	27 1f 27 1f 1f 2f 27 1f 1f 27 2f 1f 27 1f 1f 1f     '.'../'..'/.'...
    3c41:	1f 1f 27 1f 2f 1f 27 1f 1f 27 1f 27 1f 1f 2f 1f     ..'./.'..'.'../.
    3c51:	1f 1f 2f 1f 1f 27 1f 27 1f 1f 1f 27 1f 1f 1f 1f     ../..'.'...'....
    3c61:	d9 c9 d9 c9 c9 c9 d9 c9 c9 c9 c9 d9 c9 d9 c9 c9     ................
    3c71:	d9 c9 d9 c9 c9 db d9 c9 c9 d9 db c9 d9 c9 c9 c9     ................
    3c81:	c9 c9 d9 c9 db c9 d9 c9 c9 d9 c9 d9 c9 c9 db c9     ................
    3c91:	c9 c9 db c9 c9 d9 c9 d9 c9 c9 c9 d9 c9 c9 c9 c9     ................
    3ca1:	2b 29 2b 29 29 29 2b 29 29 29 29 2b 29 2b 29 29     +)+)))+))))+)+))
    3cb1:	2b 29 2b 29 29 2c 2b 29 29 2b 2c 29 2b 29 29 29     +)+)),+))+,)+)))
    3cc1:	29 29 2b 29 2c 29 2b 29 29 2b 29 2b 29 29 2c 29     ))+),)+))+)+)),)
    3cd1:	29 29 2c 29 29 2b 29 2b 29 29 29 2b 29 29 29 29     )),))+)+)))+))))
    3ce1:	13 13 13 13 13 13 13 2f 13 13 13 13 13 13 13 2f     ......./......./
    3cf1:	2f 13 13 13 13 13 2f 77 2f 13 13 13 13 13 2f 77     /...../w/...../w
    3d01:	77 2f 13 13 13 2f 77 77 77 2f 13 13 13 2f 77 77     w/.../www/.../ww
    3d11:	77 77 2f 13 2f 77 77 77 77 77 2f 13 2f 77 77 77     ww/./wwwww/./www
    3d21:	77 77 77 2f 13 2f 77 77 77 77 77 2f 13 2f 77 77     www/./wwwww/./ww
    3d31:	77 77 2f 13 13 13 2f 77 77 77 2f 13 13 13 2f 77     ww/.../www/.../w
    3d41:	77 2f 13 13 13 13 13 2f 77 2f 13 13 13 13 13 2f     w/...../w/...../
    3d51:	2f 13 13 13 13 13 13 13 2f 13 13 13 13 13 13 13     /......./.......
    3d61:	a0 a0 a0 a3 ff a3 a0 a0 a0 a0 a0 a3 ff a3 a0 a0     ................
    3d71:	a0 a0 a3 ff ff ff a3 a0 a0 a0 a3 ff ff ff a3 a0     ................
    3d81:	a0 a3 ff ff ff ff ff a3 a0 a3 ff ff ff ff ff a3     ................
    3d91:	a3 ff ff ff ff ff ff ff a3 ff ff ff ff ff ff ff     ................
    3da1:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3db1:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    3dc1:	bf bf bf 00 00 00 00 00 bf bf bf 00 00 00 00 00     ................
    3dd1:	bf bf bf 00 00 00 00 00 bf bf bf 00 00 00 00 00     ................
    3de1:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3df1:	bf bf bf bf bf bf bf bf 00 00 00 00 00 00 00 00     ................
	...
    3e21:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3e31:	bf bf bf bf bf bf bf bf 00 00 00 00 00 bf bf bf     ................
    3e41:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    3e51:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    3e61:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3e71:	bf bf bf bf bf bf bf bf 00 00 00 00 00 00 9c 9c     ................
    3e81:	00 00 00 9c 9c 9c 9c 9c 00 00 00 9c 9c 9c 9c 9c     ................
    3e91:	00 9c 9c 9c 9c 9c 9c 9c 00 9c 9c 9c 9c 9c 9c 9c     ................
    3ea1:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3eb1:	bf bf bf bf bf bf bf bf 9c 9c 00 00 00 00 00 00     ................
    3ec1:	9c 9c 9c 9c 9c 00 00 00 9c 9c 9c 9c 9c 00 00 00     ................
    3ed1:	9c 9c 9c 9c 9c 9c 9c 00 9c 9c 9c 9c 9c 9c 9c 00     ................
	...
    3ef9:	00 00 00 e3 00 00 00 00 00 00 e3 ff e3 00 00 00     ................
    3f09:	00 00 00 e3 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3f39:	00 00 00 d2 00 00 00 00 00 00 d2 e3 d2 00 00 00     ................
    3f49:	00 00 00 d2 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3f61:	bf bf bf 00 00 00 00 00 bf bf bf 00 00 00 00 00     ................
    3f71:	bf bf bf 00 00 00 00 00 bf bf bf 00 00 00 00 00     ................
    3f81:	bf bf bf 00 00 00 00 00 bf bf bf 00 00 00 00 00     ................
    3f91:	bf bf bf 00 00 00 00 00 bf bf bf 00 00 00 00 00     ................
    3fa1:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    3fb1:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    3fc1:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    3fd1:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    3fe1:	00 9c 9c 9c 9c 9c 9c 9c 00 9c 9c 9c 9c 9c 9c 9c     ................
    3ff1:	9c 9c 9c 9a 9c 9c 9c 9c 9c 9c 9c 9c 9a 9c 9c 9c     ................
    4001:	27 9c 9c 77 9c 9c 9c 9c 27 27 27 77 9c 9c 9c 9c     '..w....'''w....
    4011:	00 27 27 77 77 07 07 07 00 77 77 77 77 77 27 27     .''ww....wwwww''
    4021:	9c 9c 9c 9c 9c 9c 9c 00 9c 9c 9c 9c 9c 9c 9c 00     ................
    4031:	9c 9c 9c 9c 9a 9c 9c 9c 9c 9c 9c 9a 9c 9c 9c 9c     ................
    4041:	9c 9c 9c 9c 9c 9c 07 07 9c 9c 9c 9c 9c 07 07 07     ................
    4051:	07 07 07 07 07 07 07 00 27 27 27 07 07 07 07 00     ........'''.....
    4061:	77 77 77 77 77 77 77 27 00 9c 77 77 77 27 27 27     wwwwwww'..www'''
    4071:	00 00 9c 77 77 27 27 27 00 00 00 77 9c 07 07 07     ...ww'''...w....
    4081:	00 00 00 77 9c 9c 9c 07 00 00 00 77 9c 9c 9c 9c     ...w.......w....
    4091:	00 00 00 77 9c 9c 9c 9c 00 00 00 77 00 00 9c 9c     ...w.......w....
    40a1:	27 27 27 07 07 07 07 00 27 27 27 07 07 07 95 00     '''.....'''.....
    40b1:	27 07 07 07 07 95 00 00 07 07 07 9c 9c 00 00 00     '...............
    40c1:	07 9c 9c 9c 9c 00 00 00 9c 9c 9c 9c 00 00 00 00     ................
    40d1:	9c 9c 9c 9c 00 00 00 00 9c 9c 00 00 00 00 00 00     ................
    40e1:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    40f1:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    4101:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    4111:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
	...
    412d:	00 00 96 96 00 00 00 00 00 96 96 96 00 00 00 00     ................
    413d:	96 96 96 96 00 00 00 96 96 96 96 96 00 00 96 96     ................
    414d:	96 96 96 96 00 00 96 96 96 96 96 96 00 96 96 96     ................
    415d:	96 96 96 96 00 96 96 96 96 96 96 00 96 96 96 96     ................
    416d:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    417d:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    418d:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    419d:	96 96 96 96 00 00 00 00 00 00 00 00 96 96 00 00     ................
    41ad:	00 00 00 00 96 96 96 00 00 00 00 00 96 96 96 96     ................
    41bd:	00 00 00 00 96 96 96 96 96 00 00 00 96 96 96 96     ................
    41cd:	96 96 00 00 96 96 96 96 96 96 00 00 96 96 96 96     ................
    41dd:	96 96 96 00 00 96 96 96 95 96 96 96 00 96 96 96     ................
    41ed:	95 96 96 96 96 96 96 96 96 95 96 96 96 96 96 96     ................
    41fd:	96 95 96 96 96 96 96 96 96 96 95 96 96 96 96 96     ................
    420d:	96 bf 95 96 95 84 96 96 96 bf 96 95 8c 83 83 8c     ................
    421d:	96 bf 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    422d:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    423d:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    424d:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    425d:	96 96 96 96 96 96 96 95 96 96 96 00 96 96 96 95     ................
    426d:	96 96 96 00 96 96 95 96 96 96 96 96 96 96 95 96     ................
    427d:	96 96 96 96 96 95 96 96 96 96 96 96 96 95 96 96     ................
    428d:	96 96 95 96 95 96 96 96 96 95 95 95 96 96 96 96     ................
    429d:	94 8c 8c 95 bf bf bf 00 00 00 00 00 bf bf bf 00     ................
    42ad:	00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf 00     ................
    42bd:	00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf bf     ................
    42cd:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    42dd:	bf bf bf bf 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4309:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    4319:	bf bf bf bf bf bf bf bf 00 00 00 00 00 bf bf bf     ................
    4329:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    4339:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    4349:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    4359:	bf bf bf bf bf bf bf bf 82 82 82 82 82 bf 96 96     ................
    4369:	00 d8 d8 d8 bf ff bf 82 00 d8 d8 bf ff ff ff bf     ................
    4379:	00 d8 bf ff ff ff ff ff bf bf ff ff ff ff ff ff     ................
    4389:	00 00 bf ff ff ff ff ff 00 00 94 bf ff ff ff bf     ................
    4399:	00 00 00 8c bf ff bf d8 96 96 96 96 96 96 96 96     ................
    43a9:	83 83 8c 8c 8c 8c 8c 83 d8 d8 d8 d8 d8 d8 d8 d8     ................
    43b9:	bf d8 d8 d8 d8 d8 d8 d8 ff bf bf d8 d8 d8 d8 d8     ................
    43c9:	bf d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8     ................
    43d9:	d8 d8 d8 d8 d8 d8 82 82 96 96 8c 83 83 8c 8c 8c     ................
    43e9:	83 82 83 83 83 83 8c 00 82 82 82 83 83 83 83 00     ................
    43f9:	82 82 82 83 83 83 83 00 d8 82 82 83 83 83 83 00     ................
    4409:	82 82 82 83 83 83 00 00 82 82 83 83 83 95 00 00     ................
    4419:	82 82 83 83 95 00 00 00 40 40 40 40 40 40 40 40     ........@@@@@@@@
    4429:	40 40 40 40 40 40 40 40 c0 c0 c0 c0 c0 c0 c0 c0     @@@@@@@@........
    4439:	c0 c0 c0 c0 c0 c0 c0 c0 e0 e0 e0 e0 e0 e0 e0 e0     ................
    4449:	e0 e0 e0 e0 e0 e0 e0 e0 f0 f0 f0 f0 f0 f0 f0 f0     ................
    4459:	f0 f0 f0 f0 f0 f0 f0 f0 00 00 00 96 95 ff d8 d8     ................
    4469:	00 00 00 00 96 ff 83 82 00 00 00 00 00 ff 96 96     ................
    4479:	00 00 00 00 00 bf 96 96 00 00 00 00 00 bf 96 96     ................
    4489:	00 00 00 00 00 bf 96 96 00 00 00 00 00 bf 00 00     ................
    4499:	00 00 00 00 00 77 00 00 d8 d8 d8 82 82 82 82 82     .....w..........
    44a9:	82 82 82 82 82 83 83 83 8c 8c 83 83 83 83 8c 95     ................
    44b9:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    44c9:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    44d9:	00 96 96 96 96 96 96 00 83 83 8c 95 96 00 00 00     ................
    44e9:	83 8c 96 96 00 00 00 00 96 96 96 00 00 00 00 00     ................
    44f9:	96 96 96 00 00 00 00 00 96 96 00 00 00 00 00 00     ................
    4509:	96 96 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4521:	f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    4531:	f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9     ................
    4541:	fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa     ................
    4551:	fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb     ................
    4561:	00 00 00 00 00 77 00 00 00 00 00 00 00 77 00 00     .....w.......w..
    4571:	00 00 00 00 00 77 00 00 00 00 00 00 00 77 00 00     .....w.......w..
    4581:	00 00 00 00 00 77 00 00 00 00 00 00 00 77 00 00     .....w.......w..
	...
    45a9:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    45b9:	00 3f 3f 2f 3f 3f 3f 2f 00 3f 3f 3f 2f 3f 3f 2f     .??/???/.???/??/
    45c9:	00 3f 3f 2f 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??/.??/..????/.
	...
    45e9:	00 00 00 3f 3f 2f 00 00 00 00 3f 3f 3f 2f 00 00     ...??/....???/..
    45f9:	00 00 00 3f 3f 2f 00 00 00 00 00 3f 3f 2f 00 00     ...??/.....??/..
    4609:	00 00 00 3f 3f 2f 00 00 00 3f 3f 3f 3f 3f 3f 2f     ...??/...??????/
	...
    4629:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 00 00 3f 3f 2f     ..????/..??..??/
    4639:	00 00 00 00 3f 3f 2f 00 00 00 00 3f 3f 2f 00 00     ....??/....??/..
    4649:	00 00 3f 3f 2f 00 00 00 00 3f 3f 3f 3f 3f 3f 2f     ..??/....??????/
	...
    4669:	00 3f 3f 3f 3f 3f 3f 2f 00 00 00 00 3f 3f 2f 00     .??????/....??/.
    4679:	00 00 00 3f 3f 2f 00 00 00 00 00 00 3f 3f 2f 00     ...??/......??/.
    4689:	00 3f 3f 00 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??..??/..????/.
	...
    46ad:	3f 3f 2f 00 00 00 00 3f 3f 3f 2f 00 00 00 3f 3f     ??/....???/...??
    46bd:	3f 3f 2f 00 00 3f 3f 00 3f 3f 2f 00 00 3f 3f 3f     ??/..??.??/..???
    46cd:	3f 3f 3f 2f 00 00 00 00 3f 3f 2f 00 00 00 00 00     ???/....??/.....
	...
    46e9:	00 3f 3f 3f 3f 3f 3f 2f 00 3f 3f 2f 00 00 00 00     .??????/.??/....
    46f9:	00 3f 3f 3f 3f 3f 2f 00 00 00 00 00 00 3f 3f 2f     .?????/......??/
    4709:	00 3f 3f 00 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??..??/..????/.
	...
    4729:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 00 00 00     ..????/..??/....
    4739:	00 3f 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     .?????/..??/.??/
    4749:	00 3f 3f 2f 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??/.??/..????/.
	...
    4769:	00 3f 3f 3f 3f 3f 3f 2f 00 00 00 00 00 3f 3f 2f     .??????/.....??/
    4779:	00 00 00 00 3f 3f 2f 00 00 00 00 3f 3f 2f 00 00     ....??/....??/..
    4789:	00 00 3f 3f 2f 00 00 00 00 00 3f 3f 2f 00 00 00     ..??/.....??/...
	...
    47a9:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    47b9:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    47c9:	00 3f 3f 2f 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??/.??/..????/.
	...
    47e9:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    47f9:	00 00 3f 3f 3f 3f 3f 2f 00 00 00 00 00 3f 3f 2f     ..?????/.....??/
    4809:	00 00 00 00 3f 3f 2f 00 00 00 3f 3f 3f 2f 00 00     ....??/...???/..
	...
    4829:	00 00 00 ff ff e3 00 00 00 00 ff ff ff ff e3 00     ................
    4839:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4849:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    4869:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    4879:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    4889:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff e3 00     ................
	...
    48a9:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    48b9:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    48c9:	00 ff ff e3 00 ff ff e3 00 00 ff ff ff ff e3 00     ................
	...
    48e9:	00 ff ff ff ff e3 00 00 00 ff ff e3 ff ff e3 00     ................
    48f9:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4909:	00 ff ff e3 ff ff e3 00 00 ff ff ff ff e3 00 00     ................
	...
    4929:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 00 00 00     ................
    4939:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 00 00 00     ................
    4949:	00 ff ff e3 00 00 00 00 00 ff ff ff ff ff ff e3     ................
	...
    4969:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 00 00 00     ................
    4979:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 00 00 00     ................
    4989:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
	...
    49a9:	00 00 ff ff ff ff ff e3 00 ff ff e3 00 00 00 00     ................
    49b9:	00 ff ff e3 00 00 00 00 00 ff ff e3 ff ff ff e3     ................
    49c9:	00 ff ff e3 00 ff ff e3 00 00 ff ff ff ff ff e3     ................
	...
    49e9:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    49f9:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4a09:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    4a29:	00 ff ff ff ff ff ff e3 00 00 00 ff ff e3 00 00     ................
    4a39:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
    4a49:	00 00 00 ff ff e3 00 00 00 ff ff ff ff ff ff e3     ................
	...
    4a6d:	ff ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    4a7d:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 ff ff 00     ................
    4a8d:	00 ff ff e3 00 00 ff ff ff ff e3 00 00 00 00 00     ................
	...
    4aa9:	00 ff ff e3 00 ff ff e3 00 ff ff e3 ff ff e3 00     ................
    4ab9:	00 ff ff ff ff e3 00 00 00 ff ff ff ff e3 00 00     ................
    4ac9:	00 ff ff e3 ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
	...
    4ae9:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    4af9:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    4b09:	00 ff ff e3 00 00 00 00 00 ff ff ff ff ff ff e3     ................
	...
    4b29:	ff ff e3 00 00 ff ff e3 ff ff ff e3 ff ff ff e3     ................
    4b39:	ff ff ff ff ff ff ff e3 ff ff e3 ff e3 ff ff e3     ................
    4b49:	ff ff e3 00 00 ff ff e3 ff ff e3 00 00 ff ff e3     ................
	...
    4b69:	00 ff ff e3 00 ff ff e3 00 ff ff ff e3 ff ff e3     ................
    4b79:	00 ff ff ff ff ff ff e3 00 ff ff ff ff ff ff e3     ................
    4b89:	00 ff ff e3 ff ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    4ba9:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    4bb9:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4bc9:	00 ff ff e3 00 ff ff e3 00 00 ff ff ff ff e3 00     ................
	...
    4be9:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    4bf9:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff e3 00     ................
    4c09:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
	...
    4c29:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    4c39:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4c49:	00 ff ff e3 ff ff e3 00 00 00 ff ff e3 ff ff e3     ................
	...
    4c69:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    4c79:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff e3 00     ................
    4c89:	00 ff ff e3 ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
	...
    4ca9:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 00 00 00     ................
    4cb9:	00 00 ff ff ff ff e3 00 00 00 00 00 00 ff ff e3     ................
    4cc9:	00 00 00 00 00 ff ff e3 00 00 ff ff ff ff e3 00     ................
	...
    4ce9:	00 ff ff ff ff ff ff e3 00 00 00 ff ff e3 00 00     ................
    4cf9:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
    4d09:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
	...
    4d29:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4d39:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4d49:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff ff e3     ................
	...
    4d69:	00 ff ff 00 00 ff ff e3 00 ff ff 00 00 ff ff e3     ................
    4d79:	00 ff ff 00 00 ff ff e3 00 ff ff 00 00 ff ff e3     ................
    4d89:	00 00 ff ff ff ff e3 00 00 00 00 ff ff e3 00 00     ................
	...
    4da9:	ff ff e3 00 00 ff ff e3 ff ff e3 00 00 ff ff e3     ................
    4db9:	ff ff e3 ff e3 ff ff e3 ff ff ff ff ff ff ff e3     ................
    4dc9:	ff ff ff e3 ff ff ff e3 ff ff e3 00 00 ff ff e3     ................
	...
    4de9:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4df9:	00 00 ff ff ff ff e3 00 00 00 ff ff ff ff e3 00     ................
    4e09:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    4e29:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4e39:	00 00 ff ff ff ff e3 00 00 00 00 ff ff e3 00 00     ................
    4e49:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
	...
    4e69:	00 ff ff ff ff ff ff e3 00 00 00 00 ff ff e3 00     ................
    4e79:	00 00 00 ff ff e3 00 00 00 00 ff ff e3 00 00 00     ................
    4e89:	00 ff ff e3 00 00 00 00 00 ff ff ff ff ff ff e3     ................
	...
    4ea1:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    4eb1:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    4ec1:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    4ed1:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    4ee1:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    4ef1:	ab ab ab ab ab ab ab ab ab ad ad ad ad ad ad ab     ................
    4f01:	ae ae ae ae ae ae ae ae ab ae ae ae ae ae ae ab     ................
    4f11:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    4f21:	ac ac ac ac ac ac ac ac ac ac ac ac ac ac ac ac     ................
    4f31:	ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad     ................
    4f41:	ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae     ................
    4f51:	af af af af af af af af af af af af af af af af     ................
    4f61:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    4f71:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    4f81:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    4f91:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    4fa1:	a0 a0 a0 a0 a0 a0 a0 ff a0 a0 a0 a0 a0 a0 ff ff     ................
    4fb1:	a0 a0 a0 a0 a0 ff ff 02 a0 a0 a0 a0 ff ff 02 02     ................
    4fc1:	a0 a0 a0 ff ff 02 02 02 a0 a0 ff ff 02 02 02 02     ................
    4fd1:	a0 ff ff 02 02 02 02 02 ff ff 02 02 02 02 02 02     ................
    4fe1:	ff 02 02 02 02 02 02 02 ff 02 02 02 02 02 02 02     ................
    4ff1:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    5001:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    5011:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    5021:	ff ff ff ff ff ff ff ff 02 02 02 02 02 02 02 02     ................
    5031:	02 02 02 02 02 02 02 02 a0 a0 a0 a0 a0 a0 a0 a0     ................
    5041:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    5051:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    5061:	ff ff ff ff ff ff ff ff 02 02 ff ff ff ff 02 02     ................
    5071:	02 02 02 ff ff 02 02 02 a0 a0 a0 ff a0 a0 a0 a0     ................
    5081:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    5091:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    50a1:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    50b1:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    50c1:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    50d1:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    50e1:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    50f1:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    5101:	02 02 02 ff ff 02 02 02 02 02 ff ff ff ff 02 02     ................
    5111:	02 ff ff ff ff ff ff 02 ff ff ff ff ff ff ff ff     ................
    5121:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    5131:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    5141:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    5151:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    5161:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    5171:	06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    5181:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5191:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    51a1:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    51b1:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    51c1:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    51d1:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    51e1:	03 03 03 03 03 03 03 1f 03 03 03 03 03 03 0f 06     ................
    51f1:	03 03 03 03 03 02 02 06 03 03 03 03 02 02 02 06     ................
    5201:	03 03 03 02 02 02 02 06 03 03 02 02 02 02 06 02     ................
    5211:	03 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    5221:	1f 2f 2f 2f 2f 2f 2f 1f 06 06 06 1f 1f 1f 06 02     .//////.........
    5231:	02 02 06 1f 06 1f 06 02 02 02 06 02 06 1f 06 02     ................
    5241:	02 02 06 02 06 06 02 06 02 06 06 02 02 06 02 06     ................
    5251:	02 06 02 02 02 06 02 06 06 02 02 02 02 06 02 02     ................
    5261:	1f 03 03 03 03 03 03 03 06 0f 03 03 03 03 03 03     ................
    5271:	06 02 02 03 03 03 03 03 06 02 02 02 03 03 03 03     ................
    5281:	06 06 02 02 02 03 03 03 02 02 02 02 02 02 03 03     ................
    5291:	02 02 02 02 02 02 02 03 06 02 02 02 02 02 02 02     ................
    52a1:	03 03 03 03 03 03 03 02 03 03 03 03 03 03 02 02     ................
    52b1:	03 03 03 03 03 02 02 02 03 03 03 03 02 02 02 02     ................
    52c1:	03 03 03 02 02 02 02 02 03 03 02 02 02 02 02 02     ................
    52d1:	03 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    52e1:	02 03 03 03 03 03 03 03 02 02 03 03 03 03 03 03     ................
    52f1:	02 02 02 03 03 03 03 03 02 02 02 02 03 03 03 03     ................
    5301:	02 02 02 02 02 03 03 03 02 02 02 02 02 02 03 03     ................
    5311:	02 02 02 02 02 02 02 03 02 02 02 02 02 02 02 02     ................
    5321:	09 09 09 08 08 08 18 18 08 09 09 18 08 18 08 08     ................
    5331:	09 09 18 18 08 18 18 18 08 08 18 08 08 08 08 18     ................
    5341:	18 08 08 18 08 08 08 08 08 18 18 18 18 08 18 08     ................
    5351:	08 08 08 08 08 08 18 08 18 18 18 18 18 08 18 18     ................
    5361:	18 18 18 08 08 18 18 18 08 08 08 18 08 08 18 18     ................
    5371:	18 08 18 18 18 08 08 08 18 08 08 18 18 08 18 18     ................
    5381:	18 08 18 18 18 08 08 18 08 18 08 08 08 08 08 18     ................
    5391:	08 18 18 08 18 18 08 18 18 18 18 08 08 08 08 18     ................
    53a1:	18 08 08 08 08 08 18 18 08 08 18 18 08 18 08 08     ................
    53b1:	08 18 18 18 08 18 18 18 08 08 18 08 08 08 08 18     ................
    53c1:	18 08 08 18 08 08 08 08 08 18 18 18 18 08 18 08     ................
    53d1:	08 08 08 08 08 08 18 08 18 18 18 18 18 08 18 18     ................
    53e1:	18 18 18 08 08 09 09 09 08 08 08 18 08 09 09 09     ................
    53f1:	18 08 18 18 18 08 09 09 18 08 08 18 18 08 18 18     ................
    5401:	18 08 18 18 18 08 08 18 08 18 08 08 08 08 08 18     ................
    5411:	08 18 18 08 18 18 08 18 18 18 18 08 08 08 08 18     ................
    5421:	18 08 08 08 08 08 18 18 09 08 18 18 08 18 08 08     ................
    5431:	09 18 09 18 08 18 18 18 09 09 18 08 08 08 08 18     ................
    5441:	09 09 09 18 08 08 08 08 09 09 09 09 09 18 18 08     ................
    5451:	08 09 09 09 09 09 09 18 09 09 09 09 09 09 09 09     ................
    5461:	18 18 18 08 08 18 18 09 08 08 08 18 08 09 09 09     ................
    5471:	18 08 18 18 18 09 09 09 18 08 08 18 09 08 09 09     ................
    5481:	18 08 18 09 09 09 09 09 08 18 09 09 08 09 08 09     ................
    5491:	08 09 09 08 09 09 09 09 09 09 09 09 09 09 09 09     ................
    54a1:	09 09 09 09 09 09 09 09 09 09 09 09 09 09 09 09     ................
    54b1:	09 09 09 09 09 09 09 09 09 09 09 09 09 09 09 09     ................
    54c1:	09 09 09 09 09 09 09 09 09 09 09 09 09 09 09 09     ................
    54d1:	09 09 09 09 09 09 09 09 09 09 09 09 09 09 09 09     ................
    54e1:	14 02 14 14 02 1d 14 02 14 02 02 14 02 1d 14 02     ................
    54f1:	14 1d 02 14 02 1d 02 02 1d 1d 02 1d 02 1d 1d 02     ................
    5501:	1d 02 02 1d 02 14 1d 02 1d 02 14 1d 02 02 1d 14     ................
    5511:	1d 02 14 1d 14 02 1d 14 1d 02 14 1d 14 02 1d 14     ................
    5521:	14 1d 14 02 1d 14 02 14 14 1d 14 02 1d 14 02 14     ................
    5531:	1d 1d 02 14 1d 14 02 14 1d 1d 02 14 1d 02 14 1d     ................
    5541:	02 1d 02 02 1d 02 14 1d 02 1d 14 02 1d 02 14 1d     ................
    5551:	02 1d 14 02 1d 14 02 1d 02 1d 02 14 1d 14 02 14     ................
    5561:	1d 02 02 1d 02 02 1d 02 1d 14 02 1d 02 14 1d 02     ................
    5571:	1d 14 02 1d 02 1d 1d 02 1d 14 02 14 02 1d 14 02     ................
    5581:	1d 14 02 14 02 1d 1d 02 1d 14 02 14 02 02 1d 14     ................
    5591:	14 14 02 14 02 02 1d 1d 02 02 02 14 02 14 14 1d     ................
    55a1:	02 1d 02 1d 1d 14 02 14 14 1d 02 14 1d 14 02 14     ................
    55b1:	1d 1d 02 14 1d 1d 02 14 14 1d 02 14 1d 1d 02 14     ................
    55c1:	02 1d 02 02 1d 14 02 14 02 1d 02 02 1d 02 02 14     ................
    55d1:	02 1d 02 14 1d 02 1d 14 02 14 02 14 1d 02 1d 14     ................
    55e1:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     dddddddddddddddd
    55f1:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     dddddddddddddddd
    5601:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     dddddddddddddddd
    5611:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     dddddddddddddddd
    5621:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     dddddddddddddddd
    5631:	64 64 64 64 64 64 64 2d 64 64 64 64 64 64 64 2d     ddddddd-ddddddd-
    5641:	64 64 64 64 64 64 2d 2d 64 64 64 64 64 2d 2d 2d     dddddd--ddddd---
    5651:	64 64 64 64 2d 2d 2d 2d 64 64 64 64 2d 2d 2d 2d     dddd----dddd----
    5661:	64 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     d---------------
    5671:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    5681:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    5691:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    56a1:	2d 2d 2d 64 64 64 64 64 2d 2d 2d 2d 64 64 64 64     ---ddddd----dddd
    56b1:	2d 2d 2d 2d 64 64 64 64 2d 2d 2d 2d 64 64 64 64     ----dddd----dddd
    56c1:	2d 2d 2d 2d 64 64 64 64 2d 2d 2d 2d 64 64 64 64     ----dddd----dddd
    56d1:	2d 2d 2d 2d 64 64 64 64 2d 2d 2d 2d 64 64 64 64     ----dddd----dddd
    56e1:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     dddddddddddddddd
    56f1:	80 64 64 64 64 64 64 64 80 80 64 64 64 64 64 64     .ddddddd..dddddd
    5701:	80 80 64 64 64 64 64 64 80 80 80 64 64 64 64 64     ..dddddd...ddddd
    5711:	80 80 80 80 64 64 64 64 80 80 80 80 80 80 64 64     ....dddd......dd
    5721:	64 64 64 64 2d 2d 2d 2d 64 64 64 64 2d 2d 2d 2d     dddd----dddd----
    5731:	80 64 64 64 2d 2d 2d 2d 80 80 64 64 2d 2d 2d 2d     .ddd----..dd----
    5741:	80 80 64 64 64 2d 2d 2d 80 80 80 64 64 2d 2d 2d     ..ddd---...dd---
    5751:	80 80 80 80 64 64 2d 2d 80 80 80 80 80 80 64 64     ....dd--......dd
    5761:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    5771:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    5781:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    5791:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    57a1:	2d 2d 2d 2d 64 64 64 80 2d 2d 2d 2d 64 64 64 80     ----ddd.----ddd.
    57b1:	2d 2d 2d 64 64 64 64 80 2d 2d 2d 64 64 64 80 80     ---dddd.---ddd..
    57c1:	2d 2d 2d 64 64 64 80 80 2d 2d 64 64 64 80 80 80     ---ddd..--ddd...
    57d1:	2d 2d 64 64 80 80 80 80 2d 64 80 80 80 80 80 80     --dd....-d......
    57e1:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    57f1:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    5801:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    5811:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    5821:	80 80 80 80 80 80 64 64 80 80 80 80 64 64 64 64     ......dd....dddd
    5831:	80 80 80 64 64 64 64 2e 80 80 64 64 64 64 64 2e     ...dddd...ddddd.
    5841:	80 80 64 64 64 64 2d 2e 80 64 64 64 64 2d 2e 2e     ..dddd-..dddd-..
    5851:	64 64 64 64 2d 2e 2e 2e 64 64 64 64 2d 2e 2e 2e     dddd-...dddd-...
    5861:	64 2e 2e 2e 2e 2d 2d 2d 2e 2e 2e 2e 2e 2e 2d 2d     d....---......--
    5871:	2e 2e 2e 2e 2e 2e 2d 2d 2e 2e 2e 2e 2e 2d 2d 2d     ......--.....---
    5881:	2e 2e 2e 2e 2e 2d 2d 2d 2e 2e 2e 2e 2e 2d 2d 2d     .....---.....---
    5891:	2e 2e 2e 2e 2d 2d 2d 2d 2e 2e 2e 2e 2e 2d 2d 2d     ....----.....---
    58a1:	2d 2d 2d 80 80 80 80 80 2d 2d 2d 2d 80 80 80 80     ---.....----....
    58b1:	2d 2d 2d 2d 64 80 80 80 2d 2d 2d 2d 64 64 80 80     ----d...----dd..
    58c1:	2d 2d 2d 2d 64 64 64 80 2d 2d 2d 2d 64 64 64 80     ----ddd.----ddd.
    58d1:	2d 2d 2d 2d 64 64 64 64 2d 2d 2d 2d 64 64 64 64     ----dddd----dddd
    58e1:	64 64 64 64 2d 2e 2e 2e 64 64 64 64 2d 2e 2e 2e     dddd-...dddd-...
    58f1:	80 64 64 64 2d 2e 2e 2e 80 80 64 64 2d 2e 2e 2e     .ddd-.....dd-...
    5901:	80 80 64 64 64 2e 2e 2e 80 80 80 64 64 2d 2d 2e     ..ddd......dd--.
    5911:	80 80 80 80 64 64 2d 2d 80 80 80 80 80 80 64 64     ....dd--......dd
    5921:	2e 2e 2e 2e 2e 2d 2d 2d 2e 2e 2e 2e 2e 2d 2d 2d     .....---.....---
    5931:	2e 2e 2e 2e 2e 2d 2d 2d 2e 2e 2e 2e 2d 2d 2d 2d     .....---....----
    5941:	2e 2e 2e 2e 2d 2d 2d 2d 2e 2e 2e 2e 2d 2d 2d 2d     ....----....----
    5951:	2e 2e 2e 2e 2e 2d 2d 2d 2d 2e 2e 2e 2e 2e 2d 2d     .....----.....--
    5961:	80 80 80 80 80 80 80 ab 80 80 80 80 80 80 ab ab     ................
    5971:	80 80 80 80 80 ab ab ab 80 80 80 80 ab ab ab ab     ................
    5981:	80 80 80 ab ab ab ab ab 80 80 ab ab ab ab ab ab     ................
    5991:	80 ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    59a1:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    59b1:	ab ab ab 7f 7f ab ab ab ab ab ab 7f 7f ab ab ab     ................
    59c1:	ab ab ab 7f 7f ab ab ab ab ab ab 7f 7f ab ab ab     ................
    59d1:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    59e1:	80 80 80 80 80 80 80 9b 80 80 80 80 80 80 9b 9b     ................
    59f1:	80 80 80 80 80 9b 9b 9b 80 80 80 80 9b 9b 9b 9b     ................
    5a01:	80 80 80 9b 9b 9b 9b 9b 80 80 9b 9b 9b 9b 9b 9b     ................
    5a11:	80 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    5a21:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    5a31:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    5a41:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    5a51:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    5a61:	80 80 80 80 80 80 80 80 00 00 00 00 00 00 00 00     ................
	...
    5a79:	80 80 a4 a4 a4 a4 80 80 80 80 a4 a4 a4 a4 80 80     ................
    5a89:	80 80 a4 a4 a4 a4 80 80 80 80 a4 a4 a4 a4 80 80     ................
    5a99:	80 80 a4 a4 a4 a4 80 80 9b 9b 9b 9b 9b 9b 9b 9b     ................
    5aa9:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    5ab9:	9b 9b 9b 7f 9b 9b 9b 9b 9b 9b 9b 7f 9b 9b 9b 9b     ................
    5ac9:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    5ad9:	9b 9b 9b 9b 9b 9b 9b 9b fd fd fd fd fd fd fd fd     ................
    5ae9:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    5af9:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    5b09:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    5b19:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    5b29:	fd fd fd fd fd fd fd fd be be be be be be be be     ................
    5b39:	be be be be be be be be b7 b7 b7 b7 b7 b7 b7 b7     ................
    5b49:	b7 b7 b7 b7 b7 b7 b7 b7 77 77 77 77 77 77 77 77     ........wwwwwwww
    5b59:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5b69:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5b79:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5b89:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5b99:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5ba9:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5bb9:	77 77 77 77 77 77 77 77 77 77 77 2f 2f 77 77 77     wwwwwwwwwww//www
    5bc9:	77 77 2f 2f 2f 2f 77 77 77 2f 2f 2f 2f 2f 2f 77     ww////www//////w
    5bd9:	2f 2f 2f 2f 2f 2f 2f 2f 77 77 77 77 77 77 77 2f     ////////wwwwwww/
    5be9:	77 77 77 77 77 77 2f 2f 77 77 77 77 77 2f 2f 2f     wwwwww//wwwww///
    5bf9:	77 77 77 77 2f 2f 2f 2f 77 77 77 2f 2f 2f 2f 2f     wwww////www/////
    5c09:	77 77 2f 2f 2f 3f 3f 3f 77 2f 2f 2f 3f 3f 3f 3f     ww///???w///????
    5c19:	2f 2f 2f 3f 3f 3f 3f 3f 2f 2f 2f 2f 2f 2f 2f 2f     ///?????////////
    5c29:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5c39:	2f 2f 2f 2f 2f 2f 2f 2f 2f 3f 3f 02 02 3f 3f 2f     /////////??..??/
    5c49:	3f 0f 0f 02 02 0f 0f 3f 3f 0f 02 02 02 02 0f 3f     ?......??......?
    5c59:	0f 0f 02 02 02 02 0f 0f 2f 77 77 77 77 77 77 77     ......../wwwwwww
    5c69:	2f 2f 77 77 77 77 77 77 2f 2f 2f 77 77 77 77 77     //wwwwww///wwwww
    5c79:	2f 2f 2f 2f 77 77 77 77 2f 2f 2f 2f 2f 77 77 77     ////wwww/////www
    5c89:	3f 3f 3f 2f 2f 2f 77 77 3f 3f 3f 3f 2f 2f 2f 77     ???///ww????///w
    5c99:	3f 3f 3f 3f 3f 2f 2f 2f 77 77 77 77 77 77 77 2f     ?????///wwwwwww/
    5ca9:	77 77 77 77 77 77 2f 2f 77 77 77 77 77 2f 2f 2f     wwwwww//wwwww///
    5cb9:	77 77 77 77 2f 2f 2f 2f 77 77 77 2f 2f 2f 2f 2f     wwww////www/////
    5cc9:	77 77 2f 2f 2f 2f 2f 2f 77 2f 2f 2f 2f 2f 2f 2f     ww//////w///////
    5cd9:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5ce9:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5cf9:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5d09:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5d19:	2f 2f 2f 2f 2f 2f 2f 2f 2f 77 77 77 77 77 77 77     /////////wwwwwww
    5d29:	2f 2f 77 77 77 77 77 77 2f 2f 2f 77 77 77 77 77     //wwwwww///wwwww
    5d39:	2f 2f 2f 2f 77 77 77 77 2f 2f 2f 2f 2f 77 77 77     ////wwww/////www
    5d49:	2f 2f 2f 2f 2f 2f 77 77 2f 2f 2f 2f 2f 2f 2f 77     //////ww///////w
    5d59:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 3f 3f 3f 3f 3f     ///////////?????
    5d69:	2f 2f 2f 2f 3f 3f 3f 3f 2f 2f 2f 2f 2f 3f 3f 3f     ////????/////???
    5d79:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5d89:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5d99:	2f 2f 2f 2f 2f 2f 2f 2f 3f 3f 3f 3f 3f 2f 2f 2f     ////////?????///
    5da9:	3f 3f 3f 3f 2f 2f 2f 2f 3f 3f 3f 2f 2f 2f 2f 2f     ????////???/////
    5db9:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5dc9:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5dd9:	2f 2f 2f 2f 2f 2f 2f 2f 65 65 65 65 65 65 65 65     ////////eeeeeeee
    5de9:	5d 66 65 5d 65 66 66 5d 65 65 65 66 5d 65 65 65     ]fe]eff]eeef]eee
    5df9:	65 5c 65 65 65 65 65 65 65 65 65 65 65 65 65 65     e\eeeeeeeeeeeeee
    5e09:	65 65 65 65 65 65 65 65 5c 5c 65 65 65 5c 65 5c     eeeeeeee\\eee\e\
    5e19:	5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c     \\\\\\\\\\\\\\\\
    5e29:	13 13 13 14 13 65 5d 65 5c 65 13 14 65 65 1c 65     .....e]e\e..ee.e
    5e39:	13 13 5c 13 13 65 13 65 14 14 5c 13 5d 5c 13 13     ..\..e.e..\.]\..
    5e49:	1c 13 13 5c 5c 5c 5c 5c 1c 14 5c 13 13 13 13 13     ...\\\\\..\.....
    5e59:	13 5c 65 5c 13 13 5c 13                             .\e\..\.

00005e61 <map_font>:
    5e61:	25 01 00 3c 3d 3e 3f 40 41 42 43 44 45 46 47 48     %..<=>?@ABCDEFGH
    5e71:	49 4a 4b 4c 4d 4e 4f 50 51 52 53 54 55 56 57 58     IJKLMNOPQRSTUVWX
    5e81:	59 5a 5b 5c 5d 5e 5f                                YZ[\]^_

00005e88 <map_atmosphere>:
    5e88:	1c 02 36 36 36 36 36 36 36 36 36 36 36 36 36 36     ..66666666666666
    5e98:	36 36 36 36 36 36 36 36 36 36 36 36 36 36 3a 3a     66666666666666::
    5ea8:	3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a     ::::::::::::::::
    5eb8:	3a 3a 3a 3a 3a 3a 3a 3a 3a 3a                       ::::::::::

00005ec2 <map_dialog>:
    5ec2:	10 06 1c 1d 1d 1d 1d 1d 1d 1f 20 1d 1d 1d 1d 1d     .......... .....
    5ed2:	1d 1e 23 00 00 00 00 00 00 25 26 00 00 00 00 00     ..#......%&.....
    5ee2:	00 24 23 00 00 00 00 00 00 27 28 00 00 00 00 00     .$#......'(.....
    5ef2:	00 24 23 00 00 00 00 00 00 00 00 00 00 00 00 00     .$#.............
    5f02:	00 24 23 00 00 00 00 00 00 00 00 00 00 00 00 00     .$#.............
    5f12:	00 24 30 31 31 31 31 31 31 31 31 31 31 31 31 31     .$01111111111111
    5f22:	31 32                                               12

00005f24 <map_canvas>:
    5f24:	0f 09 1c 1d 1d 1d 1d 1d 1d 1d 1d 1d 1d 1d 1d 1d     ................
    5f34:	1e 23 00 00 00 00 00 00 00 00 00 00 00 00 00 24     .#.............$
    5f44:	23 00 00 00 00 00 00 00 00 00 00 00 00 00 24 23     #.............$#
	...
    5f60:	00 24 23 00 00 00 00 00 00 00 00 00 00 00 00 00     .$#.............
    5f70:	24 23 00 00 00 00 00 00 00 00 00 00 00 00 00 24     $#.............$
    5f80:	23 00 00 00 00 00 00 00 00 00 00 00 00 00 24 23     #.............$#
	...
    5f9c:	00 24 30 31 31 31 31 31 31 31 31 31 31 31 31 31     .$01111111111111
    5fac:	32                                                  2

00005fad <map_splash>:
    5fad:	0f 05 29 29 29 00 29 29 29 00 2a 2b 2c 21 29 29     ..))).))).*+,!))
    5fbd:	29 00 29 00 00 29 22 00 00 2d 2e 2f 00 29 00 21     ).)..)"..-./.).!
    5fcd:	22 29 00 21 29 00 00 00 33 34 35 00 29 29 29 00     ").!)...345.))).
    5fdd:	29 00 00 29 00 21 00 37 38 39 00 00 00 29 29 29     )..).!.789...)))
    5fed:	29 00 29 00 00 00 3b 00 22 00 29 29 29              ).)...;.".)))

00005ffa <map_tile_none>:
    5ffa:	01 01 00                                            ...

00005ffd <map_level_mega_tiles>:
    5ffd:	60 60 60 60 60 60 60 60 60 60 60 60 60 60 60 60     ````````````````
    600d:	60 60 60 60 60 60 60 60 60 60 60 60 60 60 61 60     ``````````````a`
    601d:	60 60 60 60 60 60 60 60 60 60 60 60 60 60 60 60     ````````````````
    602d:	60 60 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ``..............
    603d:	04 04 04 04 04 04 04 04 04 04 04 60 60 60 60 60     ...........`````
    604d:	60 60 60 60 60 60 60 60 60 60 62 62 62 62 62 63     ``````````bbbbbc
    605d:	63 63 63 63 60 60 60 60 60 60 60 61 60 60 60 60     cccc```````a````
    606d:	60 60 60 62 62 62 62 62 63 63 63 63 63 04 04 04     ```bbbbbccccc...
    607d:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    608d:	04 14 14 14 14 14 63 63 63 63 63 63 63 63 63 63     ......cccccccccc
    609d:	63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63     cccccccccccccccc
    60ad:	63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63     cccccccccccccccc
    60bd:	63 63 63 02 02 02 02 02 63 63 63 63 63 02 02 02     ccc.....ccccc...
    60cd:	02 02 14 14 14 14 14 63 63 63 63 63 63 63 63 63     .......ccccccccc
    60dd:	63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63     cccccccccccccccc
    60ed:	63 63 64 63 63 63 63 65 66 67 63 63 63 63 63 63     ccdccccefgcccccc
    60fd:	63 02 02 02 63 02 04 04 04 02 04 04 04 04 04 04     c...c...........
    610d:	04 04 04 63 63 63 63 63 02 02 02 63 63 04 04 04     ...ccccc...cc...
    611d:	02 63 04 04 04 04 02 04 04 04 04 04 67 66 68 63     .c..........gfhc
    612d:	63 63 63 68 67 66 66 67 68 63 63 63 63 69 63 63     ccchgffghccccicc
    613d:	02 02 02 02 02 63 63 63 63 63 63 63 63 63 63 63     .....ccccccccccc
    614d:	63 63 63 63 63 63 63 63 63 1b 1b 1b 1b 1b 63 63     ccccccccc.....cc
    615d:	63 63 02 63 63 63 02 04 63 63 02 04 04 63 02 04     cc.ccc..cc...c..
    616d:	04 04 02 04 04 04 04 02 02 02 02 02 04 04 04 04     ................
    617d:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    618d:	1b 1b 1b 1b 1b 04 04 04 04 04 04 04 04 04 04 04     ................
    619d:	04 04 04 04 04 04 04 04 04 02 63 63 63 63 04 02     ..........cccc..
    61ad:	63 63 63 04 04 02 63 63 04 04 04 02 63 04 04 04     ccc...cc....c...
    61bd:	04 02 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a     ..jjjjjjjjjjjjjj
    61cd:	6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a     jjjjjjjjjjjjjjjj
    61dd:	6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6b 6b 6b 6b 6b 6c     jjjjjjjjjjkkkkkl
    61ed:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    61fd:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6d 6e     llllllllllllllmn
    620d:	6f 6c 70 68 68 68 71 6c 6c 6c 6c 6c 6c 6c 6c 6c     olphhhqlllllllll
    621d:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    622d:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 06 06 06 06 06 6c     llllllllll.....l
    623d:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    624d:	6c 6c 6c 05 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     lll.llllllllllll
    625d:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 05     lllllllllllllll.
    626d:	6c 6c 6c 6c 6c 05 6c 6c 6c 05 05 6c 6c 05 05 05     lllll.lll..ll...
    627d:	6c 05 05 05 05 05 05 05 05 05 05 16 16 16 16 05     l...............
    628d:	05 16 16 16 05 05 05 05 05 05 05 05 05 05 05 05     ................
    629d:	05 05 05 16 16 16 05 05 16 16 05 05 05 05 05 05     ................
    62ad:	05 05 05 05 05 05 05 05 05 05 05 05 6c 6c 6c 6c     ............llll
    62bd:	6c 05 6c 6c 6c 6c 05 05 6c 6c 6c 05 05 05 6c 6c     l.llll..lll...ll
    62cd:	05 05 05 05 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     ....llllllllllll
    62dd:	6c 6c 6c 6c 06 06 6c 6c 6c 05 05 16 16 16 6c 6c     llll..lll.....ll
    62ed:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    62fd:	6c 6c 16 16 16 16 16 6c 6c 6c 6c 6c 6c 6c 6c 6c     ll.....lllllllll
    630d:	6c 6c 6c 6c 6c 6c 06 06 6c 6c 6c 05 05 06 06 06     llllll..lll.....
    631d:	6c 6c 6c 6c 06 6c 6c 6c 06 05 6c 6c 06 05 05 6c     llll.lll..ll...l
    632d:	06 05 05 05 06 05 05 05 05 05 05 05 05 05 05 05     ................
    633d:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    634d:	05 05 05 05 05 05 06 05 05 05 05 05 05 05 05 05     ................
    635d:	05 05 05 05 05 05 05 05 05 05 05 6c 6c 6c 6c 6c     ...........lllll
    636d:	06 6c 6c 6c 6c 05 06 6c 6c 6c 05 05 06 6c 6c 05     .llll..lll...ll.
    637d:	05 05 16 16 6c 6c 6c 6c 6c 06 6c 6c 6c 6c 05 06     ....lllll.llll..
    638d:	6c 6c 6c 05 05 06 6c 6c 05 05 05 05 05 6c 6c 6c     lll...ll.....lll
    639d:	6c 06 6c 6c 6c 06 05 6c 6c 06 05 05 6c 06 05 05     l.lll..ll...l...
    63ad:	05 05 05 05 05 05 72 73 74 74 73 74 73 74 74 73     ......rsttststts
    63bd:	74 73 74 74 73 74 73 74 74 73 74 73 74 74 73 74     tsttststtststtst
    63cd:	73 74 74 73 74 73 74 74 73 74 73 74 74 73 74 73     sttststtststtsts
    63dd:	74 74 73 74 73 74 74 73 74 73 74 74 75 74 73 74     ttststtststtutst
    63ed:	74 73 74 73 74 74 73 74 73 74 74 73 74 73 74 74     tststtststtststt
    63fd:	73 76 73 74 74 73 78 78 78 78 78 78 78 78 78 78     svsttsxxxxxxxxxx
    640d:	78 78 78 78 78 78 78 78 78 78 74 73 74 74 73 79     xxxxxxxxxxtsttsy
    641d:	7a 79 79 7a 7b 7c 7b 7b 7c 79 7a 79 79 7a 7b 7c     zyyz{|{{|yzyyz{|
    642d:	7b 7b 7c 74 73 74 74 77 78 78 78 78 78 78 78 78     {{|tsttwxxxxxxxx
    643d:	78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78     xxxxxxxxxxxxxxxx
    644d:	78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78     xxxxxxxxxxxxxxxx
    645d:	78 78 78 78 78 79 7a 79 79 7a 7b 7c 7b 7b 7c 79     xxxxxyzyyz{|{{|y
    646d:	7a 79 79 7a 7b 7c 7b 7b 7c 79 7a 79 79 7a 78 78     zyyz{|{{|yzyyzxx
    647d:	78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78     xxxxxxxxxxxxxxxx
    648d:	78 78 10 11 11 10 11 7b 7c 7b 7b 7c 79 7a 79 79     xx.....{|{{|yzyy
    649d:	7a 7b 7c 7b 7b 7c 79 7a 79 79 7a 7b 7c 7b 7b 7c     z{|{{|yzyyz{|{{|
    64ad:	78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78     xxxxxxxxxxxxxxxx
    64bd:	78 78 78 78 78 78 07 07 07 78 78 78 78 78 78 78     xxxxxx...xxxxxxx
    64cd:	78 78 78 78 78 78 78 78 78 78 78 78 78 07 07 07     xxxxxxxxxxxxx...
    64dd:	78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78     xxxxxxxxxxxxxxxx
    64ed:	78 78 78 07 07 07 78 78 05 05 05 78 78 78 78 78     xxx...xx...xxxxx
    64fd:	78 78 78 78 78 78 78 78 78 78 07 07 07 78 78 05     xxxxxxxxxx...xx.
    650d:	05 05 78 78 78 78 15 78 78 78 78 78 78 78 78 78     ..xxxx.xxxxxxxxx
    651d:	78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78     xxxxxxxxxxxxxxxx
    652d:	78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78     xxxxxxxxxxxxxxxx
    653d:	78 07 07 07 07 07 79 7a 79 79 7a 7b 7c 7b 7b 7c     x.....yzyyz{|{{|
    654d:	79 7a 79 79 7a 7b 7c 7b 7b 7c 07 07 07 07 07 78     yzyyz{|{{|.....x
    655d:	78 05 05 05 78 07 05 05 05 78 05 05 05 05 07 05     x...x....x......
    656d:	05 05 05 05 05 05 05 05 05 05 05 78 78 05 05 05     ...........xx...
    657d:	07 78 05 05 05 05 78 05 05 05 05 07 05 05 05 05     .x....x.........
    658d:	05 78 07 05 05 05 78 05 05 05 05 07 05 05 05 05     .x....x.........
    659d:	05 05 05 05 05 05 05 05 05 05 05 05 05 07 78 05     ..............x.
    65ad:	05 05 05 78 05 05 05 05 07 05 05 05 05 05 05 05     ...x............
    65bd:	05 05 05 78 78 78 78 78 78 78 78 78 78 78 78 78     ...xxxxxxxxxxxxx
    65cd:	78 78 07 78 78 78 78 05 17 17 17 17 78 78 78 78     xx.xxxx.....xxxx
    65dd:	78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 07     xxxxxxxxxxxxxxx.
    65ed:	17 17 17 17 05 7d 7d 7d 7d 7d 7d 7d 7d 7d 7d 7d     .....}}}}}}}}}}}
    65fd:	12 81 7d 12 85 85 85 85 85 85 85 85 85 85 7d 7d     ..}...........}}
    660d:	7d 7d 7d 7d 7d 7d 7e 7f 81 7d 12 82 83 85 85 85     }}}}}}~..}......
    661d:	86 87 85 85 85 89 8a 7d 7d 7d 7d 7d 80 7d 7d 7d     .......}}}}}.}}}
    662d:	7d 84 81 7d 12 81 88 85 85 85 85 84 85 85 85 85     }..}............
    663d:	7d 7d 7d 7d 7d 7d 7d 7d 7d 7d 81 7d 12 81 7d 85     }}}}}}}}}}.}..}.
    664d:	85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85     ................
    665d:	85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85     ................
    666d:	85 85 85 85 85 86 87 85 85 85 89 8a 85 85 85 86     ................
    667d:	87 85 85 85 89 8a 85 85 85 86 87 88 85 85 85 85     ................
    668d:	84 85 85 85 85 88 85 85 85 85 84 85 85 85 85 88     ................
    669d:	85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85     ................
    66ad:	85 85 8b 85 85 85 8b 60 85 85 8b 60 60 85 85 85     .......`...``...
    66bd:	89 8a 85 85 85 86 87 85 85 85 89 8a 85 85 85 86     ................
    66cd:	87 85 85 85 89 8a 84 85 85 85 85 88 85 85 85 85     ................
    66dd:	84 85 85 85 85 88 85 85 85 85 84 85 85 85 85 85     ................
    66ed:	85 85 89 8a 85 85 85 86 87 85 85 85 89 8a 85 85     ................
    66fd:	85 86 87 85 09 09 09 09 84 85 85 85 85 88 85 85     ................
    670d:	85 85 84 85 85 85 85 88 85 85 85 85 09 85 85 85     ................
    671d:	85 85 85 8c 8c 8c 85 85 8c 8c 8c 85 85 8c 8c 8c     ................
    672d:	85 85 8c 8c 8c 85 85 8c 8c 8c 85 85 85 86 87 85     ................
    673d:	8d 85 89 8a 8d 8e 85 85 8f 90 90 90 90 90 90 90     ................
    674d:	90 90 90 88 85 85 85 85 84 85 85 85 85 85 85 85     ................
    675d:	85 85 85 85 85 85 85 85 85 85 85 85 85 8c 8c 8c     ................
    676d:	8c 85 8c 8c 8c 8c 85 8c 8c 8c 8c 85 8c 8c 8c 8c     ................
    677d:	85 8c 8c 8c 8c 85 85 85 85 85 85 85 85 85 85 85     ................
    678d:	85 85 85 85 85 85 90 90 90 85 85 90 90 90 85 85     ................
    679d:	8c 8c 8c 85 85 8c 8c 8c 85 85 8c 8c 8c 85 85 8c     ................
    67ad:	8c 8c 85 09 09 09 09 85 85 85 86 87 85 8d 85 89     ................
    67bd:	8a 8d 8e 85 85 8f 90 90 90 90 90 09 90 90 90 90     ................
    67cd:	88 85 85 85 85 84 85 85 85 85 85 85 85 85 85 85     ................
    67dd:	85 85 85 85 85 09 09 09 09 85 8c 8c 8c 8c 85 8c     ................
    67ed:	8c 8c 8c 85 8c 8c 8c 8c 85 8c 8c 8c 8c 09 8c 8c     ................
    67fd:	8c 8c 88 85 85 85 09 84 85 85 09 08 85 85 09 08     ................
    680d:	08 85 09 08 08 08 09 08 08 08 08 85 85 85 85 85     ................
    681d:	18 18 18 18 18 08 08 08 08 08 08 08 08 08 08 08     ................
    682d:	08 08 08 08 09 09 85 85 85 08 08 18 18 18 08 08     ................
    683d:	08 08 08 08 08 08 08 08 08 08 08 08 08 85 85 09     ................
    684d:	8c 8c 18 18 08 09 8c 08 08 08 08 09 08 08 08 08     ................
    685d:	08 08 08 08 08 08 85 85 85 86 87 85 8d 85 89 8a     ................
    686d:	8d 8e 85 85 8f 09 90 90 90 90 08 09 90 90 90 85     ................
    687d:	85 8c 8c 8c 85 85 8c 8c 8c 85 85 8c 8c 8c 85 85     ................
    688d:	60 60 60 09 09 09 09 09 90 90 90 90 90 90 90 90     ```.............
    689d:	90 90 90 90 90 90 90 90 90 90 90 90 09 09 09 09     ................
    68ad:	09 85 85 85 85 85 85 8c 8c 85 85 85 8c 8c 90 85     ................
    68bd:	85 60 60 90 85 09 09 09 09 09 85 8c 8c 8c 8c 85     .``.............
    68cd:	8c 8c 8c 8c 85 8c 8c 8c 8c 85 60 60 60 60 09 09     ..........````..
    68dd:	09 09 09 85 85 90 90 90 85 85 90 90 90 85 85 90     ................
    68ed:	90 90 85 85 90 90 90 09 09 09 09 09 85 85 90 90     ................
    68fd:	90 85 85 90 90 90 85 85 90 90 90 85 09 90 90 90     ................
    690d:	09 08 18 18 18 85 85 8c 8c 8c 85 85 8c 8c 8c 85     ................
    691d:	85 8c 8c 8c 85 85 09 60 60 18 18 08 09 09 90 90     .......``.......
    692d:	90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90     ................
    693d:	09 90 09 09 09 08 18 85 85 85 85 85 85 85 85 85     ................
    694d:	85 85 85 85 85 85 85 85 85 85 09 18 18 18 18 08     ................
    695d:	90 90 90 90 09 90 90 90 09 08 90 90 09 08 08 90     ................
    696d:	09 08 08 08 09 08 08 08 08 08 08 08 08 08 08 08     ................
    697d:	08 08 08 08 08 08 08 08 08 08 08 08 08 08 08 08     ................
    698d:	08 08 08 08 09 90 90 08 08 08 09 90 08 08 08 08     ................
    699d:	09 08 08 08 08 08 08 08 08 08 08 85 85 85 85 85     ................
    69ad:	85 8c 8c 85 85 85 8c 8c 90 85 09 60 60 90 85 08     ...........``...
    69bd:	09 09 09 09 85 85 85 85 85 85 85 85 85 09 85 85     ................
    69cd:	85 09 08 85 85 09 08 08 09 09 08 08 08 85 8c 8c     ................
    69dd:	8c 8c 85 8c 8c 8c 8c 18 18 18 18 18 08 08 08 08     ................
    69ed:	08 08 08 08 08 08 85 85 90 90 90 09 09 90 90 90     ................
    69fd:	08 08 18 18 18 08 08 08 08 08 08 08 08 08 08 85     ................
    6a0d:	85 8c 8c 8c 85 85 09 8c 8c 18 18 08 09 8c 08 08     ................
    6a1d:	08 08 09 08 08 08 08 08 91 91 91 91 91 91 91 91     ................
    6a2d:	91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91     ................
    6a3d:	91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91     ................
    6a4d:	92 92 92 92 92 93 93 93 93 93 93 93 93 93 93 93     ................
    6a5d:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    6a6d:	93 93 93 93 93 93 93 93 93 93 94 93 93 93 95 96     ................
    6a7d:	97 93 98 9b 13 9c 9a 93 93 93 93 93 93 93 93 93     ................
    6a8d:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    6a9d:	93 93 94 93 93 93 93 93 93 93 93 93 94 93 93 93     ................
    6aad:	98 99 9a 93 98 99 99 99 9a 93 93 93 93 93 93 98     ................
    6abd:	99 9a 93 98 99 99 99 9a 93 93 93 93 93 93 93 93     ................
    6acd:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    6add:	93 93 93 93 93 93 93 93 93 93 93 0a 0a 0a 0a 0a     ................
    6aed:	93 95 96 97 93 98 9b 13 9c 9a 93 93 93 93 93 93     ................
    6afd:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    6b0d:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    6b1d:	93 0a 93 98 99 9a 93 98 99 99 99 9a 93 93 93 93     ................
    6b2d:	93 93 93 93 93 93 9d 0a 93 93 93 93 95 96 97 93     ................
    6b3d:	98 9b 13 9c 9a 93 93 93 93 93 0a 0a 0a 9d 0a 19     ................
    6b4d:	19 19 19 19 93 93 93 93 93 93 93 93 93 93 0a 0a     ................
    6b5d:	0a 0a 0a 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    6b6d:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    6b7d:	93 0a 0a 0a 9d 0a 93 93 93 0a 0b 93 93 0a 0b 0b     ................
    6b8d:	93 0a 0b 0b 0b 0a 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b     ................
    6b9d:	0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b     ................
    6bad:	0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 9e 0b 0b 0b     ................
    6bbd:	0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b     ................
    6bcd:	0b 0b 0b 0a 93 93 0b 0b 0b 0a 93 0b 0b 0b 0b 0a     ................
    6bdd:	0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 93 93 93 93 93 93     ................
    6bed:	93 93 93 93 93 93 93 93 93 0a 93 93 93 93 0b 0a     ................
    6bfd:	0a 0a 0a 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    6c0d:	93 93 93 93 93 93 0a 0a 0a 0a 0a 0b 93 93 93 93     ................
    6c1d:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    6c2d:	1a 1a 1a 1a 1a 93 93 93 93 93 93 93 93 93 93 93     ................
    6c3d:	93 93 93 93 0a 0a 93 93 93 0b 0b 1a 1a 1a 93 93     ................
    6c4d:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 0a     ................
    6c5d:	0a 93 1a 1a 0b 0b 1a 93 93 93 93 93 93 93 93 93     ................
    6c6d:	93 93 93 93 93 93 93 93 93 93 0a 1a 1a 1a 1a 0b     ................
    6c7d:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 0a     ................
    6c8d:	93 93 93 93 0b 1a 1a 1a 1a 93 93 93 93 93 93 93     ................
    6c9d:	93 93 93 93 93 93 93 93 93 0a 93 93 93 1a 0b 0a     ................
    6cad:	0a 0a 19 19 19 19 19 93 93 93 93 93 93 93 93 93     ................
    6cbd:	93 93 93 93 93 93 0a 0a 0a 0a 0a 00 21 00 00 00     ............!...
	...
    6cd5:	00 00 00 21 00 00 00 00 00 00 00 00 00 00 00 00     ...!............
    6ce5:	00 00 00 00 00 22 00 21 00 00 00 00 00 00 00 00     .....".!........
    6cf5:	00 00 00 00 21 00 00 00 00 00 00 00 22 00 00 00     ....!......."...
    6d05:	21 00 00 00 00 00 00 00 00 00 00 00 22 00 22 00     !...........".".
	...
    6d1d:	00 21 00 00 00 00 00 00 00 00 00 00 00 00 00        .!.............

00006d2c <map_level_space_final>:
    6d2c:	33 05 83 84 83 84 83 84 83 84 83 84 83 84 83 84     3...............
    6d3c:	83 84 83 84 83 84 83 84 83 84 83 84 83 84 83 84     ................
    6d4c:	83 84 83 84 83 84 83 84 83 84 83 84 83 84 83 84     ................
    6d5c:	83 84 83 84 83 85 86 85 86 85 86 85 86 85 86 85     ................
    6d6c:	86 85 86 85 86 85 86 85 86 85 86 85 86 85 86 85     ................
    6d7c:	86 85 86 85 86 85 86 85 86 85 86 85 86 85 86 85     ................
    6d8c:	86 85 86 85 86 85 86 85 83 84 83 84 83 84 83 84     ................
    6d9c:	83 84 83 84 83 84 83 84 83 84 83 84 83 84 83 84     ................
    6dac:	83 84 83 84 83 84 83 84 83 84 83 84 83 84 83 84     ................
    6dbc:	83 84 83 84 83 84 83 84 83 84 83 85 86 85 86 85     ................
    6dcc:	86 85 86 85 86 85 86 85 86 85 86 85 86 85 86 85     ................
    6ddc:	86 85 86 85 86 85 86 85 86 85 86 85 86 85 86 85     ................
    6dec:	86 85 86 85 86 85 86 85 86 85 86 85 86 85 83 84     ................
    6dfc:	83 84 83 84 83 84 83 84 83 84 83 84 83 84 83 84     ................
    6e0c:	83 84 83 84 83 84 83 84 83 84 83 84 83 84 83 84     ................
    6e1c:	83 84 83 84 83 84 83 84 83 84 83 84 83 84 83 84     ................
    6e2c:	83                                                  .

00006e2d <map_level_space>:
    6e2d:	33 05 83 84 83 84 83 84 83 84 83 84 83 84 83 84     3...............
    6e3d:	83 84 83 84 83 84 83 84 83 84 83 84 83 84 83 84     ................
    6e4d:	83 84 83 84 83 84 83 84 83 84 83 84 83 84 83 84     ................
    6e5d:	83 84 83 84 83 85 86 85 86 85 86 85 86 85 86 85     ................
    6e6d:	86 85 86 85 86 85 86 85 86 85 86 85 86 85 86 85     ................
    6e7d:	86 85 86 85 86 85 86 85 86 85 86 85 86 85 86 85     ................
    6e8d:	86 85 86 85 86 85 86 85 83 84 83 84 83 84 83 84     ................
    6e9d:	83 84 83 84 83 84 83 84 83 84 83 84 83 84 83 84     ................
    6ead:	83 84 83 84 83 84 83 84 83 84 83 84 83 84 83 84     ................
    6ebd:	83 84 83 84 83 84 83 84 83 84 83 85 86 85 86 85     ................
    6ecd:	86 85 86 85 86 85 86 85 86 85 86 85 86 85 86 85     ................
    6edd:	86 85 86 85 86 85 86 85 86 85 86 85 86 85 86 85     ................
    6eed:	86 85 86 85 86 85 86 85 86 85 86 85 86 85 83 84     ................
    6efd:	83 84 83 84 83 84 83 84 83 84 83 84 83 84 83 84     ................
    6f0d:	83 84 83 84 83 84 83 84 83 84 83 84 83 84 83 84     ................
    6f1d:	83 84 83 84 83 84 83 84 83 84 83 84 83 84 83 84     ................
    6f2d:	83                                                  .

00006f2e <map_level_desert>:
    6f2e:	33 05 68 68 68 68 68 68 68 68 68 68 68 68 68 68     3.hhhhhhhhhhhhhh
    6f3e:	68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68     hhhhhhhhhhhhhhhh
    6f4e:	68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68     hhhhhhhhhhhhhhhh
    6f5e:	68 68 68 68 68 69 69 69 69 69 69 69 69 69 69 69     hhhhhiiiiiiiiiii
    6f6e:	69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69     iiiiiiiiiiiiiiii
    6f7e:	69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69     iiiiiiiiiiiiiiii
    6f8e:	69 69 69 69 69 69 69 69 6a 6b 6a 6c 6a 6c 6a 6d     iiiiiiiijkjljljm
    6f9e:	6a 6b 6a 6c 6a 6c 6a 6d 6a 6b 6a 6c 6a 6c 6a 6d     jkjljljmjkjljljm
    6fae:	6a 6b 6a 6c 6a 6c 6a 6d 6a 6b 6a 6c 6a 6c 6a 6d     jkjljljmjkjljljm
    6fbe:	6a 6b 6a 6c 6a 6c 6a 6d 6a 6d 6a 6a 6a 6a 6e 6f     jkjljljmjmjjjjno
    6fce:	70 6f 6a 71 6f 6f 72 6a 73 6a 6a 6a 6a 6a 6e 6a     pojqoorjsjjjjjnj
    6fde:	70 6a 6a 6f 6a 74 6e 75 70 6a 6a 71 6f 6f 72 6a     pjjojtnupjjqoorj
    6fee:	70 6a 6a 6a 6a 6a 6e 6a 6e 6a 6a 6a 6a 6a 6f 6f     pjjjjjnjnjjjjjoo
    6ffe:	6f 6f 6f 6f 6f 6f 76 77 78 79 7a 6f 6f 6f 7b 7c     oooooovwxyzooo{|
    700e:	7d 7e 7f 80 81 6f 6f 6f 6f 6f 82 6f 6f 6f 76 77     }~...ooooo.ooovw
    701e:	78 79 7a 6f 6f 6f 6f 80 81 6f 6f 6f 6f 6f 6f 6f     xyzoooo..ooooooo
    702e:	6f                                                  o

0000702f <map_level_city>:
    702f:	33 05 3d 3e 3f 3d 40 3d 3e 3f 3d 40 3d 3e 3f 3d     3.=>?=@=>?=@=>?=
    703f:	40 3d 3e 3f 3d 40 3d 3e 3f 3d 40 3d 3e 3f 3d 40     @=>?=@=>?=@=>?=@
    704f:	3d 3e 3f 3d 40 3d 3e 3f 3d 40 3d 3e 3f 3d 40 3d     =>?=@=>?=@=>?=@=
    705f:	3e 3f 3d 40 3d 41 42 43 41 41 41 42 43 41 41 41     >?=@=ABCAAABCAAA
    706f:	42 43 41 41 41 42 43 41 41 41 42 43 41 41 41 42     BCAAABCAAABCAAAB
    707f:	43 41 41 41 42 43 41 41 41 42 43 41 41 41 42 43     CAAABCAAABCAAABC
    708f:	41 41 41 42 43 41 41 41 44 45 46 41 41 44 47 48     AAABCAAADEFAADGH
    709f:	41 41 44 45 46 41 41 44 47 48 41 41 44 45 46 41     AADEFAADGHAADEFA
    70af:	41 44 45 46 41 41 44 45 46 41 41 44 45 46 41 41     ADEFAADEFAADEFAA
    70bf:	44 47 48 41 41 44 45 46 41 41 44 49 4a 4b 4c 4d     DGHAADEFAADIJKLM
    70cf:	4e 4f 50 51 4d 49 4a 4b 4c 4d 4e 4f 50 51 4d 49     NOPQMIJKLMNOPQMI
    70df:	4a 52 53 54 55 56 4b 4c 4d 49 4a 4b 4c 4d 49 4a     JRSTUVKLMIJKLMIJ
    70ef:	4b 4c 4d 4e 4f 4b 4c 4d 49 4a 4b 4c 4d 49 57 58     KLMNOKLMIJKLMIWX
    70ff:	59 5a 5b 57 58 59 5a 5c 5d 5e 5f 5a 5b 57 58 59     YZ[WXYZ\]^_Z[WXY
    710f:	5a 5b 57 60 61 61 61 61 62 63 5a 5b 57 58 64 65     Z[W`aaaabcZ[WXde
    711f:	66 67 58 59 5a 5b 57 58 59 5a 5b 57 58 59 5a 5b     fgXYZ[WXYZ[WXYZ[
    712f:	57                                                  W

00007130 <map_level_forest>:
    7130:	33 05 26 27 28 26 27 28 26 27 28 26 27 28 26 27     3.&'(&'(&'(&'(&'
    7140:	28 26 27 28 26 27 28 26 27 28 26 27 28 26 27 28     (&'(&'(&'(&'(&'(
    7150:	26 27 28 26 27 28 26 27 28 26 27 28 26 27 28 26     &'(&'(&'(&'(&'(&
    7160:	27 28 26 27 28 29 2a 2b 29 2a 2b 29 2a 2b 29 2a     '(&'()*+)*+)*+)*
    7170:	2b 29 2a 2b 29 2a 2b 29 2a 2b 29 2a 2b 29 2a 2b     +)*+)*+)*+)*+)*+
    7180:	29 2a 2b 29 2a 2b 29 2a 2b 29 2a 2b 29 2a 2b 29     )*+)*+)*+)*+)*+)
    7190:	2a 2b 29 2a 2b 29 2a 2b 2c 2d 2c 2c 2d 2c 2c 2d     *+)*+)*+,-,,-,,-
    71a0:	2e 2c 2d 2c 2e 2d 2c 2c 2d 2c 2c 2d 2c 2c 2d 2c     .,-,.-,,-,,-,,-,
    71b0:	2c 2d 2c 2c 2d 2c 2c 2d 2c 2c 2d 2e 2c 2d 2e 2c     ,-,,-,,-,,-.,-.,
    71c0:	2d 2c 2c 2d 2e 2c 2d 2c 2c 2d 2c 2c 2f 2c 2c 2f     -,,-.,-,,-,,/,,/
    71d0:	2c 2e 2f 2c 2e 2f 2e 2c 2f 2c 2c 2f 30 31 2f 30     ,./,./.,/,,/01/0
    71e0:	31 2f 32 33 2f 2c 2c 2f 2c 2c 2f 2e 2c 2f 34 2c     1/23/,,/,,/.,/4,
    71f0:	2f 34 2c 2f 2c 2c 2f 34 2c 2f 2c 2c 2f 2c 35 36     /4,/,,/4,/,,/,56
    7200:	35 35 36 35 35 36 35 35 36 35 35 36 35 35 36 37     5565565565565567
    7210:	38 36 37 38 36 39 3a 36 3b 3c 36 3b 3c 36 35 35     867869:6;<6;<655
    7220:	36 35 35 36 35 35 36 3b 3c 36 35 35 36 35 35 36     6556556;<6556556
    7230:	35                                                  5

00007231 <map_level_fire>:
    7231:	33 05 12 12 12 12 12 12 12 12 12 12 12 12 12 12     3...............
    7241:	12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12     ................
    7251:	12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12     ................
    7261:	12 12 12 12 12 13 13 13 13 13 13 13 13 13 13 13     ................
    7271:	13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13     ................
    7281:	13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13     ................
    7291:	13 13 13 13 13 13 13 13 14 15 14 14 14 14 15 14     ................
    72a1:	14 14 14 15 14 14 14 14 14 16 14 15 14 14 14 14     ................
    72b1:	14 14 14 14 17 18 15 14 14 14 14 15 14 14 14 14     ................
    72c1:	14 14 14 14 14 14 14 15 14 14 14 14 14 14 14 14     ................
    72d1:	14 14 14 14 14 14 14 16 14 14 16 14 14 14 16 14     ................
    72e1:	14 14 14 14 14 14 19 1a 1b 1c 14 14 14 14 14 14     ................
    72f1:	14 17 18 14 14 17 18 14 14 14 14 14 14 14 16 16     ................
    7301:	16 1d 1e 1d 1e 1d 1e 1d 1e 1f 16 16 16 16 16 16     ................
    7311:	16 16 16 16 1d 1e 1d 1e 20 21 21 21 22 23 1e 1d     ........ !!!"#..
    7321:	1e 1f 16 20 1a 1b 24 25 1a 1b 24 16 16 16 16 16     ... ..$%..$.....
    7331:	16                                                  .

00007332 <map_level_ice>:
    7332:	33 05 00 01 00 00 00 01 00 00 00 01 00 00 01 00     3...............
    7342:	00 01 00 00 00 00 01 00 00 00 02 02 02 02 02 02     ................
    7352:	02 02 00 00 00 00 01 00 00 00 01 00 00 00 00 00     ................
    7362:	00 01 00 00 00 03 03 04 03 03 03 03 04 03 03 03     ................
    7372:	04 03 04 03 03 03 04 03 03 03 03 04 03 05 05 05     ................
    7382:	05 05 05 05 05 03 03 03 03 03 03 04 03 03 03 03     ................
    7392:	04 03 03 03 03 03 04 03 06 06 06 06 06 06 06 06     ................
    73a2:	06 07 07 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    73b2:	06 06 06 06 06 06 06 06 06 06 06 06 06 08 08 06     ................
    73c2:	06 06 06 06 06 06 06 06 06 06 06 06 06 09 06 06     ................
    73d2:	06 06 06 0a 02 02 0b 06 06 06 06 09 06 06 06 06     ................
    73e2:	06 06 06 06 06 06 06 06 06 06 06 06 06 08 08 06     ................
    73f2:	06 06 08 06 09 06 06 06 06 06 06 06 06 06 07 07     ................
    7402:	0c 07 07 07 07 0a 02 02 02 02 0b 07 07 07 0c 0d     ................
    7412:	07 0d 07 0d 07 0e 0f 0f 0f 10 0f 10 0f 10 11 07     ................
    7422:	07 07 07 07 07 07 07 0c 07 07 07 07 07 07 07 07     ................
    7432:	07 00                                               ..

00007434 <__ctors_end>:
    7434:	11 24       	eor	r1, r1
    7436:	1f be       	out	0x3f, r1	; 63
    7438:	cf ef       	ldi	r28, 0xFF	; 255
    743a:	d0 e1       	ldi	r29, 0x10	; 16
    743c:	de bf       	out	0x3e, r29	; 62
    743e:	cd bf       	out	0x3d, r28	; 61

00007440 <__do_copy_data>:
    7440:	15 e0       	ldi	r17, 0x05	; 5
    7442:	a0 e0       	ldi	r26, 0x00	; 0
    7444:	b5 e0       	ldi	r27, 0x05	; 5
    7446:	ea e9       	ldi	r30, 0x9A	; 154
    7448:	f6 ed       	ldi	r31, 0xD6	; 214
    744a:	02 c0       	rjmp	.+4      	; 0x7450 <__do_copy_data+0x10>
    744c:	05 90       	lpm	r0, Z+
    744e:	0d 92       	st	X+, r0
    7450:	a0 31       	cpi	r26, 0x10	; 16
    7452:	b1 07       	cpc	r27, r17
    7454:	d9 f7       	brne	.-10     	; 0x744c <__do_copy_data+0xc>

00007456 <__do_clear_bss>:
    7456:	10 e1       	ldi	r17, 0x10	; 16
    7458:	a0 e1       	ldi	r26, 0x10	; 16
    745a:	b5 e0       	ldi	r27, 0x05	; 5
    745c:	01 c0       	rjmp	.+2      	; 0x7460 <.do_clear_bss_start>

0000745e <.do_clear_bss_loop>:
    745e:	1d 92       	st	X+, r1

00007460 <.do_clear_bss_start>:
    7460:	aa 32       	cpi	r26, 0x2A	; 42
    7462:	b1 07       	cpc	r27, r17
    7464:	e1 f7       	brne	.-8      	; 0x745e <.do_clear_bss_loop>

00007466 <wdt_init>:

void wdt_init(void)
{

#if TRUE_RANDOM_GEN == 1	
	wdt_randomize();
    7466:	0e 94 ce 3f 	call	0x7f9c	; 0x7f9c <wdt_randomize>
#endif

    MCUSR = 0;
    746a:	14 be       	out	0x34, r1	; 52
    wdt_disable();
    746c:	88 e1       	ldi	r24, 0x18	; 24
    746e:	0f b6       	in	r0, 0x3f	; 63
    7470:	f8 94       	cli
    7472:	80 93 60 00 	sts	0x0060, r24
    7476:	10 92 60 00 	sts	0x0060, r1
    747a:	0f be       	out	0x3f, r0	; 63

0000747c <Initialize>:


void Initialize(void){
	int i;

	if(!isEepromFormatted()) FormatEeprom();
    747c:	0e 94 90 40 	call	0x8120	; 0x8120 <isEepromFormatted>
    7480:	81 11       	cpse	r24, r1
    7482:	02 c0       	rjmp	.+4      	; 0x7488 <Initialize+0xc>
    7484:	0e 94 6e 40 	call	0x80dc	; 0x80dc <FormatEeprom>

	cli();
    7488:	f8 94       	cli
		mix_bank=0;
	#endif
	
	#if MIXER_CHAN4_TYPE == 0
		//initialize LFSR		
		tr4_barrel_lo=1;
    748a:	81 e0       	ldi	r24, 0x01	; 1
    748c:	80 93 e4 0c 	sts	0x0CE4, r24
		tr4_barrel_hi=1;		
    7490:	80 93 e5 0c 	sts	0x0CE5, r24
		tr4_params=0b00000001; //15 bits no divider (1)
    7494:	80 93 e3 0c 	sts	0x0CE3, r24
		snesMouseEnabled=false;
	#endif

	//silence all sound channels
	for(i=0;i<CHANNELS;i++){
		mixer.channels.all[i].volume=0;
    7498:	10 92 d0 0c 	sts	0x0CD0, r1
    749c:	10 92 d6 0c 	sts	0x0CD6, r1
    74a0:	10 92 dc 0c 	sts	0x0CDC, r1
    74a4:	10 92 e2 0c 	sts	0x0CE2, r1
    74a8:	10 92 e8 0c 	sts	0x0CE8, r1
	}
	
	//set sync parameters. starts at odd field, in pre-eq pulses, line 1, vsync flag cleared
	sync_phase=0;
    74ac:	10 92 b6 0c 	sts	0x0CB6, r1
	sync_flags=0;
    74b0:	10 92 b8 0c 	sts	0x0CB8, r1
	sync_pulse=SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES;
    74b4:	92 e1       	ldi	r25, 0x12	; 18
    74b6:	90 93 b7 0c 	sts	0x0CB7, r25

	//set rendering parameters
	render_lines_count=FRAME_LINES;
    74ba:	90 ee       	ldi	r25, 0xE0	; 224
    74bc:	90 93 be 0c 	sts	0x0CBE, r25
	first_render_line=FIRST_RENDER_LINE;
    74c0:	94 e1       	ldi	r25, 0x14	; 20
    74c2:	90 93 bd 0c 	sts	0x0CBD, r25

	joypad1_status_hi=0;
    74c6:	10 92 c2 0c 	sts	0x0CC2, r1
    74ca:	10 92 c1 0c 	sts	0x0CC1, r1
	joypad2_status_hi=0;
    74ce:	10 92 c6 0c 	sts	0x0CC6, r1
    74d2:	10 92 c5 0c 	sts	0x0CC5, r1
	sound_enabled=1;
    74d6:	80 93 cf 0c 	sts	0x0CCF, r24

	InitializeVideoMode();
    74da:	0e 94 cd 4d 	call	0x9b9a	; 0x9b9a <InitializeVideoMode>
    74de:	84 e8       	ldi	r24, 0x84	; 132
    74e0:	90 e0       	ldi	r25, 0x00	; 0
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
		val=pgm_read_word(&io_table[j]);
    74e2:	fc 01       	movw	r30, r24
    74e4:	25 91       	lpm	r18, Z+
    74e6:	34 91       	lpm	r19, Z
		ptr=(u8*)(val&0xff);
    74e8:	f9 01       	movw	r30, r18
    74ea:	ff 27       	eor	r31, r31
		*ptr=val>>8;	
    74ec:	30 83       	st	Z, r19
    74ee:	02 96       	adiw	r24, 0x02	; 2
	InitializeVideoMode();
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
    74f0:	20 e0       	ldi	r18, 0x00	; 0
    74f2:	82 3b       	cpi	r24, 0xB2	; 178
    74f4:	92 07       	cpc	r25, r18
    74f6:	a9 f7       	brne	.-22     	; 0x74e2 <Initialize+0x66>
		val=pgm_read_word(&io_table[j]);
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;	
	}

	sei();
    74f8:	78 94       	sei
	
	DisplayLogo();
    74fa:	0e 94 5c 4e 	call	0x9cb8	; 0x9cb8 <DisplayLogo>
    74fe:	0e 94 e8 68 	call	0xd1d0	; 0xd1d0 <main>
    7502:	0c 94 4b 6b 	jmp	0xd696	; 0xd696 <_exit>

00007506 <__bad_interrupt>:
    7506:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000750a <sub_video_mode3>:
	;***************************************************

	sub_video_mode3:
		;de-activate sync timer interrupts
		;we will need to use the I flag to branch in a critical loop
		ldi ZL,(0<<OCIE1A)
    750a:	e0 e0       	ldi	r30, 0x00	; 0
		sts _SFR_MEM_ADDR(TIMSK1),ZL
    750c:	e0 93 6f 00 	sts	0x006F, r30

		;wait cycles to align with next hsync
		WAIT r26,183+241
    7510:	ad e8       	ldi	r26, 0x8D	; 141
    7512:	aa 95       	dec	r26
    7514:	f1 f7       	brne	.-4      	; 0x7512 <sub_video_mode3+0x8>
    7516:	00 00       	nop

		;Refresh ramtiles indexes in VRAM
		;This has to be done because the main
		;program may have altered the VRAM
		;after vsync and the rendering interrupt.
		lds r16,userRamTilesCount
    7518:	00 91 f3 0c 	lds	r16, 0x0CF3

		ldi ZL,lo8(ram_tiles_restore);
    751c:	e0 e5       	ldi	r30, 0x50	; 80
		ldi ZH,hi8(ram_tiles_restore);
    751e:	fc e0       	ldi	r31, 0x0C	; 12
		ldi r18,3
    7520:	23 e0       	ldi	r18, 0x03	; 3
		mul r16,r18
    7522:	02 9f       	mul	r16, r18
		add ZL,r0
    7524:	e0 0d       	add	r30, r0
		adc ZH,r1
    7526:	f1 1d       	adc	r31, r1

		ldi YL,lo8(vram)
    7528:	c0 e0       	ldi	r28, 0x00	; 0
		ldi YH,hi8(vram)
    752a:	d1 e0       	ldi	r29, 0x01	; 1

		lds r18,free_tile_index
    752c:	20 91 7f 0d 	lds	r18, 0x0D7F
		ldi r19,MAX_RAMTILES		;maximum possible ramtiles
    7530:	3c e3       	ldi	r19, 0x3C	; 60
		sub r19,r18					;sub free tile
    7532:	32 1b       	sub	r19, r18
		add r19,r16					;add user tiles
    7534:	30 0f       	add	r19, r16

		cp r18,r16
    7536:	20 17       	cp	r18, r16
		breq no_ramtiles
    7538:	51 f0       	breq	.+20     	; 0x754e <no_ramtiles>
		nop
    753a:	00 00       	nop
	...

0000753e <upd_loop>:
		nop
upd_loop:
		ld XL,Z+	;load vram offset of ramtile
    753e:	a1 91       	ld	r26, Z+
		ld XH,Z+
    7540:	b1 91       	ld	r27, Z+

		ld r17,X	;get latest VRAM tile that may have been modified my
    7542:	1c 91       	ld	r17, X
		st Z+,r17	;the main program and store it in the restore buffer
    7544:	11 93       	st	Z+, r17
		st X,r16	;write the ramtile index back to vram
    7546:	0c 93       	st	X, r16

		inc r16
    7548:	03 95       	inc	r16
		cp r16,r18
    754a:	02 17       	cp	r16, r18
		brlo upd_loop ;loop is 14 cycles
    754c:	c0 f3       	brcs	.-16     	; 0x753e <upd_loop>

0000754e <no_ramtiles>:

no_ramtiles:
		;wait for remaining maximum possible ramtiles
1:
		ldi r17,3
    754e:	13 e0       	ldi	r17, 0x03	; 3
		dec r17
    7550:	1a 95       	dec	r17
		brne .-4
    7552:	f1 f7       	brne	.-4      	; 0x7550 <no_ramtiles+0x2>
		rjmp .
    7554:	00 c0       	rjmp	.+0      	; 0x7556 <no_ramtiles+0x8>
		dec r19
    7556:	3a 95       	dec	r19
		brne 1b
    7558:	d1 f7       	brne	.-12     	; 0x754e <no_ramtiles>

		;**********************
		; setup scroll stuff
		;**********************
	
		ldi YL,lo8(vram)
    755a:	c0 e0       	ldi	r28, 0x00	; 0
		ldi YH,hi8(vram)
    755c:	d1 e0       	ldi	r29, 0x01	; 1

		//add X scroll (coarse)
		lds r18,screen_scrollX ;ScreenScrollX
    755e:	20 91 b2 0c 	lds	r18, 0x0CB2
		mov r25,r18
    7562:	92 2f       	mov	r25, r18
		andi r18,0xf8	;(x>>3) * 8 interleave
    7564:	28 7f       	andi	r18, 0xF8	; 248
		add YL,r18
    7566:	c2 0f       	add	r28, r18

		;save Y wrap adress 
		movw r12,YL
    7568:	6e 01       	movw	r12, r28
	

		//add Y scroll (coarse)
		lds r16,screen_scrollY ;ScreenScrollY
    756a:	00 91 b3 0c 	lds	r16, 0x0CB3
		mov r22,r16
    756e:	60 2f       	mov	r22, r16
		lsr r16
    7570:	06 95       	lsr	r16
		lsr r16
    7572:	06 95       	lsr	r16
		lsr r16 ;/8
    7574:	06 95       	lsr	r16

        lds r17,screen_scrollHeight
    7576:	10 91 b4 0c 	lds	r17, 0x0CB4
        sub r17,r16
    757a:	10 1b       	sub	r17, r16
        mov r15,r17 ;Y tiles to draw before wrapping
    757c:	f1 2e       	mov	r15, r17

        mov r17,r16
    757e:	10 2f       	mov	r17, r16
        lsr r16
    7580:	06 95       	lsr	r16
        lsr r16
    7582:	06 95       	lsr	r16
        lsr r16 ;/8
    7584:	06 95       	lsr	r16
		add YH,r16      ; (bits 6-7)
    7586:	d0 0f       	add	r29, r16
		andi r17,0x7
    7588:	17 70       	andi	r17, 0x07	; 7
        add YL,r17      ;interleave (bits 3-5)
    758a:	c1 0f       	add	r28, r17
        andi r22,0x7    ;fine Y scrolling (bits 0-2)
    758c:	67 70       	andi	r22, 0x07	; 7
		;lds r20,tile_table_lo
		;lds r21,tile_table_hi
		;out _SFR_IO_ADDR(GPIOR1),r20 ;store for later
		;out _SFR_IO_ADDR(GPIOR2),r21

		lds r20,overlay_tile_table
    758e:	40 91 b0 0c 	lds	r20, 0x0CB0
		lds r21,overlay_tile_table+1
    7592:	50 91 b1 0c 	lds	r21, 0x0CB1
		lds r6,tile_table_lo
    7596:	60 90 ac 0c 	lds	r6, 0x0CAC
		lds r7,tile_table_hi
    759a:	70 90 ad 0c 	lds	r7, 0x0CAD
		out _SFR_IO_ADDR(GPIOR1),r6 ;store for later
    759e:	6a bc       	out	0x2a, r6	; 42
		out _SFR_IO_ADDR(GPIOR2),r7
    75a0:	7b bc       	out	0x2b, r7	; 43


		;save main section value	
		movw r10,YL
    75a2:	5e 01       	movw	r10, r28
		mov r23,r22
    75a4:	76 2f       	mov	r23, r22
		mov r24,r15
    75a6:	8f 2d       	mov	r24, r15
		mov r9,r25
    75a8:	99 2e       	mov	r9, r25

		;load values for overlay if it's activated (overlay_height>0)
		
		;compute beginning of overlay in vram 
		lds r16,screen_scrollHeight
    75aa:	00 91 b4 0c 	lds	r16, 0x0CB4
		mov r18,r16
    75ae:	20 2f       	mov	r18, r16
		lsr r16
    75b0:	06 95       	lsr	r16
		lsr r16
    75b2:	06 95       	lsr	r16
		lsr r16			;hi8
    75b4:	06 95       	lsr	r16
		inc r16			;add 0x100 ram offset
    75b6:	03 95       	inc	r16
		andi r18,7		;lo8
    75b8:	27 70       	andi	r18, 0x07	; 7
		
		lds r19,overlay_height	
    75ba:	30 91 af 0c 	lds	r19, 0x0CAF
		cpi r19,0
    75be:	30 30       	cpi	r19, 0x00	; 0
		in r0, _SFR_IO_ADDR(SREG)
    75c0:	0f b6       	in	r0, 0x3f	; 63

		sbrs r0,SREG_Z
    75c2:	01 fe       	sbrs	r0, 1
		clr r22
    75c4:	66 27       	eor	r22, r22
		sbrs r0,SREG_Z
    75c6:	01 fe       	sbrs	r0, 1
		mov YL,r18		;lo8(overlay_vram)
    75c8:	c2 2f       	mov	r28, r18
		sbrs r0,SREG_Z
    75ca:	01 fe       	sbrs	r0, 1
		mov YH,r16		;hi8(overlay_vram)
    75cc:	d0 2f       	mov	r29, r16
		sbrs r0,SREG_Z
    75ce:	01 fe       	sbrs	r0, 1
		ser r24
    75d0:	8f ef       	ldi	r24, 0xFF	; 255
		sbrs r0,SREG_Z
    75d2:	01 fe       	sbrs	r0, 1
		clr r9
    75d4:	99 24       	eor	r9, r9

		sbrs r0,SREG_Z
    75d6:	01 fe       	sbrs	r0, 1
		out _SFR_IO_ADDR(GPIOR1),r20
    75d8:	4a bd       	out	0x2a, r20	; 42
		sbrs r0,SREG_Z
    75da:	01 fe       	sbrs	r0, 1
		out _SFR_IO_ADDR(GPIOR2),r21
    75dc:	5b bd       	out	0x2b, r21	; 43


		//ldi r16,SCREEN_TILES_V*TILE_HEIGHT; total scanlines to draw
		//mov r8,r16
		lds r8,render_lines_count ;total scanlines to draw
    75de:	80 90 be 0c 	lds	r8, 0x0CBE

000075e2 <next_tile_line>:
	;r23 = Main section tile row
	;r24 = Current Y tiles to draw before wrapping
	;r25 = Main section scrollX

	next_tile_line:
		rcall hsync_pulse
    75e2:	bc d3       	rcall	.+1912   	; 0x7d5c <hsync_pulse>

		WAIT r18,HSYNC_USABLE_CYCLES - AUDIO_OUT_HSYNC_CYCLES
    75e4:	24 e0       	ldi	r18, 0x04	; 4
    75e6:	2a 95       	dec	r18
    75e8:	f1 f7       	brne	.-4      	; 0x75e6 <next_tile_line+0x4>
    75ea:	00 00       	nop
				
		call render_tile_line
    75ec:	0e 94 37 3b 	call	0x766e	; 0x766e <render_tile_line>

		WAIT r18,58
    75f0:	23 e1       	ldi	r18, 0x13	; 19
    75f2:	2a 95       	dec	r18
    75f4:	f1 f7       	brne	.-4      	; 0x75f2 <next_tile_line+0x10>
    75f6:	00 00       	nop

		inc r22
    75f8:	63 95       	inc	r22
		dec r8
    75fa:	8a 94       	dec	r8
		breq text_frame_end
    75fc:	09 f1       	breq	.+66     	; 0x7640 <text_frame_end>

		cpi r22,TILE_HEIGHT ;last char line? 1
    75fe:	68 30       	cpi	r22, 0x08	; 8
		breq next_tile_row
    7600:	29 f0       	breq	.+10     	; 0x760c <next_tile_row>

		;wait to align with next_tile_row instructions (+1 cycle for the breq)
		WAIT r16,25
    7602:	08 e0       	ldi	r16, 0x08	; 8
    7604:	0a 95       	dec	r16
    7606:	f1 f7       	brne	.-4      	; 0x7604 <next_tile_line+0x22>
    7608:	00 00       	nop
		rjmp next_tile_line
    760a:	eb cf       	rjmp	.-42     	; 0x75e2 <next_tile_line>

0000760c <next_tile_row>:

	next_tile_row:

		clr r22		;clear current char line
    760c:	66 27       	eor	r22, r22

		;increment vram pointer next row
		mov r16,YL
    760e:	0c 2f       	mov	r16, r28
		andi r16,0x7
    7610:	07 70       	andi	r16, 0x07	; 7
		cpi r16,7
    7612:	07 30       	cpi	r16, 0x07	; 7
		breq 1f
    7614:	11 f0       	breq	.+4      	; 0x761a <next_tile_row+0xe>
		inc YL
    7616:	c3 95       	inc	r28
		rjmp 2f
    7618:	02 c0       	rjmp	.+4      	; 0x761e <next_tile_row+0x12>
	1:
		andi YL,0xf8
    761a:	c8 7f       	andi	r28, 0xF8	; 248
		inc YH
    761c:	d3 95       	inc	r29
	2:

		dec r24		;wrap section?
    761e:	8a 95       	dec	r24
		brne .+2
    7620:	09 f4       	brne	.+2      	; 0x7624 <next_tile_row+0x18>
		movw YL,r12
    7622:	e6 01       	movw	r28, r12

		dec r19
    7624:	3a 95       	dec	r19
		brne .+2
    7626:	09 f4       	brne	.+2      	; 0x762a <next_tile_row+0x1e>
		mov r22,r23	;section tile row
    7628:	67 2f       	mov	r22, r23
		brne .+2
    762a:	09 f4       	brne	.+2      	; 0x762e <next_tile_row+0x22>
		movw YL,r10 ;vram adress
    762c:	e5 01       	movw	r28, r10
		brne .+2
    762e:	09 f4       	brne	.+2      	; 0x7632 <next_tile_row+0x26>
		mov r24,r15 ;Y wrapping
    7630:	8f 2d       	mov	r24, r15
		brne .+2
    7632:	09 f4       	brne	.+2      	; 0x7636 <next_tile_row+0x2a>
		mov r9,r25  ;scrollX
    7634:	99 2e       	mov	r9, r25

		brne .+2
    7636:	09 f4       	brne	.+2      	; 0x763a <next_tile_row+0x2e>
		out _SFR_IO_ADDR(GPIOR1),r6  ;tileset
    7638:	6a bc       	out	0x2a, r6	; 42
		brne .+2
    763a:	09 f4       	brne	.+2      	; 0x763e <next_tile_row+0x32>
		out _SFR_IO_ADDR(GPIOR2),r7  ;tilset
    763c:	7b bc       	out	0x2b, r7	; 43

		rjmp next_tile_line
    763e:	d1 cf       	rjmp	.-94     	; 0x75e2 <next_tile_line>

00007640 <text_frame_end>:

	text_frame_end:

		WAIT r18,28
    7640:	29 e0       	ldi	r18, 0x09	; 9
    7642:	2a 95       	dec	r18
    7644:	f1 f7       	brne	.-4      	; 0x7642 <text_frame_end+0x2>
    7646:	00 00       	nop

		rcall hsync_pulse ;145
    7648:	89 d3       	rcall	.+1810   	; 0x7d5c <hsync_pulse>
	
		clr r1
    764a:	11 24       	eor	r1, r1
		call RestoreBackground
    764c:	0e 94 80 4c 	call	0x9900	; 0x9900 <RestoreBackground>

		;set vsync flag & flip field
		lds ZL,sync_flags
    7650:	e0 91 b8 0c 	lds	r30, 0x0CB8
		ldi r20,SYNC_FLAG_FIELD
    7654:	42 e0       	ldi	r20, 0x02	; 2
		ori ZL,SYNC_FLAG_VSYNC
    7656:	e1 60       	ori	r30, 0x01	; 1
		eor ZL,r20
    7658:	e4 27       	eor	r30, r20
		sts sync_flags,ZL
    765a:	e0 93 b8 0c 	sts	0x0CB8, r30
	
		cli 
    765e:	f8 94       	cli

		;re-activate sync timer interrupts
		ldi ZL,(1<<OCIE1A)
    7660:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIMSK1),ZL
    7662:	e0 93 6f 00 	sts	0x006F, r30
			
		;clear any pending timer int
		ldi ZL,(1<<OCF1A)
    7666:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIFR1),ZL
    7668:	e0 93 36 00 	sts	0x0036, r30

		ret
    766c:	08 95       	ret

0000766e <render_tile_line>:
	; Can destroy: r0,r1,r2,r3,r4,r5,r6,r7,r13,r16,r17,r18,r19,r20,r21,Z
	; 
	; cycles  = 1495
	;*************************************************
	render_tile_line:
		push YL
    766e:	cf 93       	push	r28
		push YH
    7670:	df 93       	push	r29
		push r23
    7672:	7f 93       	push	r23
		push r22
    7674:	6f 93       	push	r22
		push r19
    7676:	3f 93       	push	r19
		push r13
    7678:	df 92       	push	r13
		push r12
    767a:	cf 92       	push	r12
		push r9
    767c:	9f 92       	push	r9
		push r7
    767e:	7f 92       	push	r7
		push r6
    7680:	6f 92       	push	r6
		;--------------------------
		; Rendering 
		;---------------------------

		;get tile row offset
		ldi r23,TILE_WIDTH ;tile width in pixels
    7682:	78 e0       	ldi	r23, 0x08	; 8
		mul r22,r23
    7684:	67 9f       	mul	r22, r23

		;compute base adresses for ROM and RAM tiles
		in r16,_SFR_IO_ADDR(GPIOR1) ;tile_table_lo
    7686:	0a b5       	in	r16, 0x2a	; 42
		in r17,_SFR_IO_ADDR(GPIOR2) ;tile_table_hi
    7688:	1b b5       	in	r17, 0x2b	; 43
		subi r16,lo8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    768a:	00 50       	subi	r16, 0x00	; 0
		sbci r17,hi8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    768c:	17 40       	sbci	r17, 0x07	; 7

		add r16,r0
    768e:	00 0d       	add	r16, r0
		adc r17,r1
    7690:	11 1d       	adc	r17, r1
		movw r2,r16			;rom tiles adress
    7692:	18 01       	movw	r2, r16

		ldi r16,lo8(ram_tiles)
    7694:	00 e5       	ldi	r16, 0x50	; 80
		ldi r17,hi8(ram_tiles)
    7696:	15 e0       	ldi	r17, 0x05	; 5
		add r16,r0
    7698:	00 0d       	add	r16, r0
		adc r17,r1
    769a:	11 1d       	adc	r17, r1
		movw r4,r16			;ram tiles adress
    769c:	28 01       	movw	r4, r16

		ldi r19,TILE_HEIGHT*TILE_WIDTH
    769e:	30 e4       	ldi	r19, 0x40	; 64
		ldi r17,SCREEN_TILES_H-1	;main loop counter
    76a0:	1b e1       	ldi	r17, 0x1B	; 27


		;handle fine scroll offset
		;lds r22,screenSections+scrollX
		mov r22,r9
    76a2:	69 2d       	mov	r22, r9
		andi r22,0x7		
    76a4:	67 70       	andi	r22, 0x07	; 7
		mov r14,r22	;pixels to draw on last tile	
    76a6:	e6 2e       	mov	r14, r22
		cli			;no trailing pixel to draw (hack, see end: )
    76a8:	f8 94       	cli
		breq .+2
    76aa:	09 f0       	breq	.+2      	; 0x76ae <render_tile_line+0x40>
		sei			;some trailing pixel to draw (hack, see end: )
    76ac:	78 94       	sei

		;get first pixel of last tile in ROM (for ROM tiles fine scroll)
		;and adress of next pixel
		movw ZL,YL
    76ae:	fe 01       	movw	r30, r28
		subi ZL,-(SCREEN_TILES_H*8)
    76b0:	e0 52       	subi	r30, 0x20	; 32
		ld r18,Z
    76b2:	20 81       	ld	r18, Z
		mul r18,r19 	;tile*width*height
    76b4:	23 9f       	mul	r18, r19
	    add r0,r2    ;add ROM title table address +row offset
    76b6:	02 0c       	add	r0, r2
	    adc r1,r3
    76b8:	13 1c       	adc	r1, r3
		movw ZL,r0
    76ba:	f0 01       	movw	r30, r0
		lpm r9,Z+	;hold first pixel until end 
    76bc:	95 90       	lpm	r9, Z+
		movw r12,ZL ;hold second pixel adress until end
    76be:	6f 01       	movw	r12, r30


		;compute first tile adress
	    ld r18,Y     	;load next tile # from VRAM
    76c0:	28 81       	ld	r18, Y
		subi YL,-8
    76c2:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT
    76c4:	2c 31       	cpi	r18, 0x1C	; 28
		in r16,_SFR_IO_ADDR(SREG)	;save the carry flag for later	
    76c6:	0f b7       	in	r16, 0x3f	; 63
		mul r18,r19 	;tile*width*height
    76c8:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles	
    76ca:	a1 01       	movw	r20, r2
		sbrc r16,SREG_C
    76cc:	00 fd       	sbrc	r16, 0
		movw r20,r4		;ram tiles
    76ce:	a2 01       	movw	r20, r4
	    add r0,r20    ;add title table address +row offset
    76d0:	04 0e       	add	r0, r20
	    adc r1,r21
    76d2:	15 1e       	adc	r1, r21
		movw XL,r0
    76d4:	d0 01       	movw	r26, r0


		;compute second tile adress
	    ld r18,Y     	;load next tile # from VRAM
    76d6:	28 81       	ld	r18, Y
		subi YL,-8
    76d8:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT
    76da:	2c 31       	cpi	r18, 0x1C	; 28
		in r7,_SFR_IO_ADDR(SREG)	;save the carry flag for later
    76dc:	7f b6       	in	r7, 0x3f	; 63
		bst r7,SREG_C
    76de:	70 fa       	bst	r7, 0
		mul r18,r19 	;tile*width*height
    76e0:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles
    76e2:	a1 01       	movw	r20, r2
		brtc .+2
    76e4:	0e f4       	brtc	.+2      	; 0x76e8 <render_tile_line+0x7a>
		movw r20,r4		;ram tiles
    76e6:	a2 01       	movw	r20, r4
	    add r0,r20      ;add title table address +row offset
    76e8:	04 0e       	add	r0, r20
	    adc r1,r21
    76ea:	15 1e       	adc	r1, r21
		movw ZL,r0
    76ec:	f0 01       	movw	r30, r0
		movw r6,ZL		;push Z
    76ee:	3f 01       	movw	r6, r30

000076f0 <do_fine_scroll>:


	do_fine_scroll:
		;output 1st tile with fine scroll offset 
		clr r0
    76f0:	00 24       	eor	r0, r0
		add XL,r22	;add fine offset
    76f2:	a6 0f       	add	r26, r22
		adc XH,r0
    76f4:	b0 1d       	adc	r27, r0

		;compute jump offset
		ldi r23,3
    76f6:	73 e0       	ldi	r23, 0x03	; 3
		mul r22,r23 ;3 instructions
    76f8:	67 9f       	mul	r22, r23
	
		sbrs r16,SREG_C
    76fa:	00 ff       	sbrs	r16, 0
		rjmp rom_fine_scroll
    76fc:	22 c0       	rjmp	.+68     	; 0x7742 <rom_fine_scroll>

000076fe <ram_fine_scroll>:

	/***FINE SCROLL RAM LOOP***/
	ram_fine_scroll:
		rjmp .
    76fe:	00 c0       	rjmp	.+0      	; 0x7700 <ram_fine_scroll+0x2>
		ldi r22,lo8(pm(ram_fine_scroll_loop))
    7700:	67 e8       	ldi	r22, 0x87	; 135
		ldi r23,hi8(pm(ram_fine_scroll_loop))
    7702:	7b e3       	ldi	r23, 0x3B	; 59
		add r22,r0
    7704:	60 0d       	add	r22, r0
		adc r23,r1
    7706:	71 1d       	adc	r23, r1
		push r22
    7708:	6f 93       	push	r22
		push r23	
    770a:	7f 93       	push	r23
		ret ;jump into ram_fine_scroll_loop
    770c:	08 95       	ret

0000770e <ram_fine_scroll_loop>:
	ram_fine_scroll_loop:
		.rept 8
			ld r16,X+
			lpm
			out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		.endr
    770e:	0d 91       	ld	r16, X+
    7710:	c8 95       	lpm
    7712:	08 b9       	out	0x08, r16	; 8
    7714:	0d 91       	ld	r16, X+
    7716:	c8 95       	lpm
    7718:	08 b9       	out	0x08, r16	; 8
    771a:	0d 91       	ld	r16, X+
    771c:	c8 95       	lpm
    771e:	08 b9       	out	0x08, r16	; 8
    7720:	0d 91       	ld	r16, X+
    7722:	c8 95       	lpm
    7724:	08 b9       	out	0x08, r16	; 8
    7726:	0d 91       	ld	r16, X+
    7728:	c8 95       	lpm
    772a:	08 b9       	out	0x08, r16	; 8
    772c:	0d 91       	ld	r16, X+
    772e:	c8 95       	lpm
    7730:	08 b9       	out	0x08, r16	; 8
    7732:	0d 91       	ld	r16, X+
    7734:	c8 95       	lpm
    7736:	08 b9       	out	0x08, r16	; 8
    7738:	0d 91       	ld	r16, X+
    773a:	c8 95       	lpm
    773c:	08 b9       	out	0x08, r16	; 8

		;branch to tile #2
		brtc romloop
    773e:	1e f5       	brtc	.+70     	; 0x7786 <romloop>
		rjmp ramloop
    7740:	40 c0       	rjmp	.+128    	; 0x77c2 <ramloop>

00007742 <rom_fine_scroll>:

	/***FINE SCROLL ROM LOOP***/
	rom_fine_scroll:
		movw ZL,XL
    7742:	fd 01       	movw	r30, r26
		ldi r22,lo8(pm(rom_fine_scroll_loop))	
    7744:	69 ea       	ldi	r22, 0xA9	; 169
		ldi r23,hi8(pm(rom_fine_scroll_loop))
    7746:	7b e3       	ldi	r23, 0x3B	; 59
		add r22,r0
    7748:	60 0d       	add	r22, r0
		adc r23,r1
    774a:	71 1d       	adc	r23, r1
		push r22
    774c:	6f 93       	push	r22
		push r23	
    774e:	7f 93       	push	r23
		ret
    7750:	08 95       	ret

00007752 <rom_fine_scroll_loop>:
	rom_fine_scroll_loop:
		.rept 8
			lpm r16,Z+
			rjmp .
			out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		.endr 
    7752:	05 91       	lpm	r16, Z+
    7754:	00 c0       	rjmp	.+0      	; 0x7756 <rom_fine_scroll_loop+0x4>
    7756:	08 b9       	out	0x08, r16	; 8
    7758:	05 91       	lpm	r16, Z+
    775a:	00 c0       	rjmp	.+0      	; 0x775c <rom_fine_scroll_loop+0xa>
    775c:	08 b9       	out	0x08, r16	; 8
    775e:	05 91       	lpm	r16, Z+
    7760:	00 c0       	rjmp	.+0      	; 0x7762 <rom_fine_scroll_loop+0x10>
    7762:	08 b9       	out	0x08, r16	; 8
    7764:	05 91       	lpm	r16, Z+
    7766:	00 c0       	rjmp	.+0      	; 0x7768 <rom_fine_scroll_loop+0x16>
    7768:	08 b9       	out	0x08, r16	; 8
    776a:	05 91       	lpm	r16, Z+
    776c:	00 c0       	rjmp	.+0      	; 0x776e <rom_fine_scroll_loop+0x1c>
    776e:	08 b9       	out	0x08, r16	; 8
    7770:	05 91       	lpm	r16, Z+
    7772:	00 c0       	rjmp	.+0      	; 0x7774 <rom_fine_scroll_loop+0x22>
    7774:	08 b9       	out	0x08, r16	; 8
    7776:	05 91       	lpm	r16, Z+
    7778:	00 c0       	rjmp	.+0      	; 0x777a <rom_fine_scroll_loop+0x28>
    777a:	08 b9       	out	0x08, r16	; 8
    777c:	05 91       	lpm	r16, Z+
    777e:	00 c0       	rjmp	.+0      	; 0x7780 <rom_fine_scroll_loop+0x2e>
    7780:	08 b9       	out	0x08, r16	; 8
	
		movw ZL,r6		;restore Z for tile #2
    7782:	f3 01       	movw	r30, r6

		;branch to tile #2
		brts ramloop
    7784:	f6 f0       	brts	.+60     	; 0x77c2 <ramloop>

00007786 <romloop>:

	
	romloop:
	    lpm r16,Z+
    7786:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    7788:	08 b9       	out	0x08, r16	; 8
	    ld r18,Y     ;load next tile # from VRAM
    778a:	28 81       	ld	r18, Y

	    lpm r16,Z+
    778c:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 2
    778e:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    7790:	23 9f       	mul	r18, r19

	    lpm r16,Z+
    7792:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 3
    7794:	08 b9       	out	0x08, r16	; 8
		subi YL,-8
    7796:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT		;is tile in RAM or ROM? (RAM tiles have indexes<RAM_TILES_COUNT)
    7798:	2c 31       	cpi	r18, 0x1C	; 28
		
	    lpm r16,Z+
    779a:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    779c:	08 b9       	out	0x08, r16	; 8
		brsh .+2		;skip if next tile is in ROM	
    779e:	08 f4       	brcc	.+2      	; 0x77a2 <romloop+0x1c>
		movw r20,r4 	;load RAM title table address +row offset	
    77a0:	a2 01       	movw	r20, r4
   
	    lpm r16,Z+
    77a2:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 5
    77a4:	08 b9       	out	0x08, r16	; 8
		add r0,r20		;add tile table address +row offset lsb
    77a6:	04 0e       	add	r0, r20
	    adc r1,r21		;add title table address +row offset msb
    77a8:	15 1e       	adc	r1, r21

	    lpm r16,Z+
    77aa:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 6
    77ac:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT	
    77ae:	2c 31       	cpi	r18, 0x1C	; 28
		dec r17			;decrement tiles to draw on line (does not affect carry)
    77b0:	1a 95       	dec	r17
   
	    lpm r16,Z+
    77b2:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 7   
    77b4:	08 b9       	out	0x08, r16	; 8
	    lpm r16,Z+
    77b6:	05 91       	lpm	r16, Z+

		breq end	
    77b8:	39 f1       	breq	.+78     	; 0x7808 <end>
	    movw ZL,r0   	;copy next tile adress
    77ba:	f0 01       	movw	r30, r0

	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    77bc:	08 b9       	out	0x08, r16	; 8
	    brcc romloop
    77be:	18 f7       	brcc	.-58     	; 0x7786 <romloop>
	
		rjmp .
    77c0:	00 c0       	rjmp	.+0      	; 0x77c2 <ramloop>

000077c2 <ramloop>:

	ramloop:

	    ld r16,Z+
    77c2:	01 91       	ld	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    77c4:	08 b9       	out	0x08, r16	; 8
	    ld r18,Y     ;load next tile # from VRAM
    77c6:	28 81       	ld	r18, Y

	    ld r16,Z+ 
    77c8:	01 91       	ld	r16, Z+
		subi YL,-8   		
    77ca:	c8 5f       	subi	r28, 0xF8	; 248
		out _SFR_IO_ADDR(DATA_PORT),r16 		;pixel 2
    77cc:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    77ce:	23 9f       	mul	r18, r19

	    ld r16,Z+
    77d0:	01 91       	ld	r16, Z+
		nop
    77d2:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16         ;pixel 3
    77d4:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    77d6:	2c 31       	cpi	r18, 0x1C	; 28
		rjmp .
    77d8:	00 c0       	rjmp	.+0      	; 0x77da <ramloop+0x18>
   
	    ld r16,Z+
    77da:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    77dc:	08 b9       	out	0x08, r16	; 8
		brcs .+2 
    77de:	08 f0       	brcs	.+2      	; 0x77e2 <ramloop+0x20>
		movw r20,r2 	;ROM title table address +row offset	
    77e0:	a1 01       	movw	r20, r2
   
   
	    ld r16,Z+
    77e2:	01 91       	ld	r16, Z+
	    add r0,r20    ;add title table address +row offset
    77e4:	04 0e       	add	r0, r20
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 5
    77e6:	08 b9       	out	0x08, r16	; 8
	    adc r1,r21
    77e8:	15 1e       	adc	r1, r21
		rjmp .
    77ea:	00 c0       	rjmp	.+0      	; 0x77ec <ramloop+0x2a>
    
		ld r16,Z+		
    77ec:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 6
    77ee:	08 b9       	out	0x08, r16	; 8
		ld r7,Z+
    77f0:	71 90       	ld	r7, Z+
	    ld r16,Z+	
    77f2:	01 91       	ld	r16, Z+
	
		movw ZL,r0
    77f4:	f0 01       	movw	r30, r0
		out _SFR_IO_ADDR(DATA_PORT),r7      ;pixel 7   
    77f6:	78 b8       	out	0x08, r7	; 8
		nop
    77f8:	00 00       	nop
		cpi r18,RAM_TILES_COUNT	
    77fa:	2c 31       	cpi	r18, 0x1C	; 28
	    dec r17
    77fc:	1a 95       	dec	r17
	    breq end
    77fe:	21 f0       	breq	.+8      	; 0x7808 <end>
	
		nop
    7800:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    7802:	08 b9       	out	0x08, r16	; 8
	
	    brcc romloop
    7804:	00 f6       	brcc	.-128    	; 0x7786 <romloop>
		rjmp ramloop
    7806:	dd cf       	rjmp	.-70     	; 0x77c2 <ramloop>

00007808 <end>:
	
	end:
		out _SFR_IO_ADDR(DATA_PORT),r16  	;pixel 8
    7808:	08 b9       	out	0x08, r16	; 8
		brid end_fine_scroll				;hack: interrupt flag=0 => no fine offset pixel to draw
    780a:	27 f5       	brid	.+72     	; 0x7854 <end_fine_scroll>
		brcc end_rom_fine_scroll_loop
    780c:	30 f4       	brcc	.+12     	; 0x781a <end_rom_fine_scroll_loop>

	/***END RAM LOOP***/
		movw ZL,r0
    780e:	f0 01       	movw	r30, r0

00007810 <end_ram_fine_scroll_loop>:
	end_ram_fine_scroll_loop:
		ld r16,Z+
    7810:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
    7812:	08 b9       	out	0x08, r16	; 8
		dec r14
    7814:	ea 94       	dec	r14
		brne end_ram_fine_scroll_loop
    7816:	e1 f7       	brne	.-8      	; 0x7810 <end_ram_fine_scroll_loop>
		rjmp end_fine_scroll_ram
    7818:	1f c0       	rjmp	.+62     	; 0x7858 <end_fine_scroll_ram>

0000781a <end_rom_fine_scroll_loop>:

	/***END ROM LOOP***/
	end_rom_fine_scroll_loop:
		movw ZL,r12
    781a:	f6 01       	movw	r30, r12
		nop
    781c:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r9        ;output saved 1st pixel
    781e:	98 b8       	out	0x08, r9	; 8
		dec r14
    7820:	ea 94       	dec	r14
		breq end_fine_scroll_rom
    7822:	c9 f0       	breq	.+50     	; 0x7856 <end_fine_scroll_rom>
	.rept 6
		lpm r16,Z+		
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		dec r14
		breq end_fine_scroll_rom
	.endr
    7824:	05 91       	lpm	r16, Z+
    7826:	08 b9       	out	0x08, r16	; 8
    7828:	ea 94       	dec	r14
    782a:	a9 f0       	breq	.+42     	; 0x7856 <end_fine_scroll_rom>
    782c:	05 91       	lpm	r16, Z+
    782e:	08 b9       	out	0x08, r16	; 8
    7830:	ea 94       	dec	r14
    7832:	89 f0       	breq	.+34     	; 0x7856 <end_fine_scroll_rom>
    7834:	05 91       	lpm	r16, Z+
    7836:	08 b9       	out	0x08, r16	; 8
    7838:	ea 94       	dec	r14
    783a:	69 f0       	breq	.+26     	; 0x7856 <end_fine_scroll_rom>
    783c:	05 91       	lpm	r16, Z+
    783e:	08 b9       	out	0x08, r16	; 8
    7840:	ea 94       	dec	r14
    7842:	49 f0       	breq	.+18     	; 0x7856 <end_fine_scroll_rom>
    7844:	05 91       	lpm	r16, Z+
    7846:	08 b9       	out	0x08, r16	; 8
    7848:	ea 94       	dec	r14
    784a:	29 f0       	breq	.+10     	; 0x7856 <end_fine_scroll_rom>
    784c:	05 91       	lpm	r16, Z+
    784e:	08 b9       	out	0x08, r16	; 8
    7850:	ea 94       	dec	r14
    7852:	09 f0       	breq	.+2      	; 0x7856 <end_fine_scroll_rom>

00007854 <end_fine_scroll>:
	...

00007856 <end_fine_scroll_rom>:
	...

00007858 <end_fine_scroll_ram>:
	end_fine_scroll:	
		nop
	end_fine_scroll_rom:
		nop
	end_fine_scroll_ram:
		clr r16	
    7858:	00 27       	eor	r16, r16
		out _SFR_IO_ADDR(DATA_PORT),r16   
    785a:	08 b9       	out	0x08, r16	; 8

		pop r6
    785c:	6f 90       	pop	r6
		pop r7
    785e:	7f 90       	pop	r7
		pop r9
    7860:	9f 90       	pop	r9
		pop r12
    7862:	cf 90       	pop	r12
		pop r13
    7864:	df 90       	pop	r13
		pop r19
    7866:	3f 91       	pop	r19
		pop r22
    7868:	6f 91       	pop	r22
		pop r23
    786a:	7f 91       	pop	r23
		pop YH
    786c:	df 91       	pop	r29
		pop YL
    786e:	cf 91       	pop	r28

		ret
    7870:	08 95       	ret

00007872 <CopyFlashTile>:
; C-callable
; r24=Source ROM tile index
; r22=Dest RAM tile index
;************************************
CopyFlashTile:
	ldi r18,TILE_HEIGHT*TILE_WIDTH
    7872:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	lds ZL,tile_table_lo
    7874:	e0 91 ac 0c 	lds	r30, 0x0CAC
	lds ZH,tile_table_hi
    7878:	f0 91 ad 0c 	lds	r31, 0x0CAD
	mul r24,r18
    787c:	82 9f       	mul	r24, r18
	add ZL,r0
    787e:	e0 0d       	add	r30, r0
	adc ZH,r1
    7880:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    7882:	a0 e5       	ldi	r26, 0x50	; 80
	ldi XH,hi8(ram_tiles)
    7884:	b5 e0       	ldi	r27, 0x05	; 5
	mul r22,r18
    7886:	62 9f       	mul	r22, r18
	add XL,r0
    7888:	a0 0d       	add	r26, r0
	adc XH,r1
    788a:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	lpm r1,Z+
	st X+,r1
.endr
    788c:	15 90       	lpm	r1, Z+
    788e:	1d 92       	st	X+, r1
    7890:	15 90       	lpm	r1, Z+
    7892:	1d 92       	st	X+, r1
    7894:	15 90       	lpm	r1, Z+
    7896:	1d 92       	st	X+, r1
    7898:	15 90       	lpm	r1, Z+
    789a:	1d 92       	st	X+, r1
    789c:	15 90       	lpm	r1, Z+
    789e:	1d 92       	st	X+, r1
    78a0:	15 90       	lpm	r1, Z+
    78a2:	1d 92       	st	X+, r1
    78a4:	15 90       	lpm	r1, Z+
    78a6:	1d 92       	st	X+, r1
    78a8:	15 90       	lpm	r1, Z+
    78aa:	1d 92       	st	X+, r1
    78ac:	15 90       	lpm	r1, Z+
    78ae:	1d 92       	st	X+, r1
    78b0:	15 90       	lpm	r1, Z+
    78b2:	1d 92       	st	X+, r1
    78b4:	15 90       	lpm	r1, Z+
    78b6:	1d 92       	st	X+, r1
    78b8:	15 90       	lpm	r1, Z+
    78ba:	1d 92       	st	X+, r1
    78bc:	15 90       	lpm	r1, Z+
    78be:	1d 92       	st	X+, r1
    78c0:	15 90       	lpm	r1, Z+
    78c2:	1d 92       	st	X+, r1
    78c4:	15 90       	lpm	r1, Z+
    78c6:	1d 92       	st	X+, r1
    78c8:	15 90       	lpm	r1, Z+
    78ca:	1d 92       	st	X+, r1
    78cc:	15 90       	lpm	r1, Z+
    78ce:	1d 92       	st	X+, r1
    78d0:	15 90       	lpm	r1, Z+
    78d2:	1d 92       	st	X+, r1
    78d4:	15 90       	lpm	r1, Z+
    78d6:	1d 92       	st	X+, r1
    78d8:	15 90       	lpm	r1, Z+
    78da:	1d 92       	st	X+, r1
    78dc:	15 90       	lpm	r1, Z+
    78de:	1d 92       	st	X+, r1
    78e0:	15 90       	lpm	r1, Z+
    78e2:	1d 92       	st	X+, r1
    78e4:	15 90       	lpm	r1, Z+
    78e6:	1d 92       	st	X+, r1
    78e8:	15 90       	lpm	r1, Z+
    78ea:	1d 92       	st	X+, r1
    78ec:	15 90       	lpm	r1, Z+
    78ee:	1d 92       	st	X+, r1
    78f0:	15 90       	lpm	r1, Z+
    78f2:	1d 92       	st	X+, r1
    78f4:	15 90       	lpm	r1, Z+
    78f6:	1d 92       	st	X+, r1
    78f8:	15 90       	lpm	r1, Z+
    78fa:	1d 92       	st	X+, r1
    78fc:	15 90       	lpm	r1, Z+
    78fe:	1d 92       	st	X+, r1
    7900:	15 90       	lpm	r1, Z+
    7902:	1d 92       	st	X+, r1
    7904:	15 90       	lpm	r1, Z+
    7906:	1d 92       	st	X+, r1
    7908:	15 90       	lpm	r1, Z+
    790a:	1d 92       	st	X+, r1
    790c:	15 90       	lpm	r1, Z+
    790e:	1d 92       	st	X+, r1
    7910:	15 90       	lpm	r1, Z+
    7912:	1d 92       	st	X+, r1
    7914:	15 90       	lpm	r1, Z+
    7916:	1d 92       	st	X+, r1
    7918:	15 90       	lpm	r1, Z+
    791a:	1d 92       	st	X+, r1
    791c:	15 90       	lpm	r1, Z+
    791e:	1d 92       	st	X+, r1
    7920:	15 90       	lpm	r1, Z+
    7922:	1d 92       	st	X+, r1
    7924:	15 90       	lpm	r1, Z+
    7926:	1d 92       	st	X+, r1
    7928:	15 90       	lpm	r1, Z+
    792a:	1d 92       	st	X+, r1
    792c:	15 90       	lpm	r1, Z+
    792e:	1d 92       	st	X+, r1
    7930:	15 90       	lpm	r1, Z+
    7932:	1d 92       	st	X+, r1
    7934:	15 90       	lpm	r1, Z+
    7936:	1d 92       	st	X+, r1
    7938:	15 90       	lpm	r1, Z+
    793a:	1d 92       	st	X+, r1
    793c:	15 90       	lpm	r1, Z+
    793e:	1d 92       	st	X+, r1
    7940:	15 90       	lpm	r1, Z+
    7942:	1d 92       	st	X+, r1
    7944:	15 90       	lpm	r1, Z+
    7946:	1d 92       	st	X+, r1
    7948:	15 90       	lpm	r1, Z+
    794a:	1d 92       	st	X+, r1
    794c:	15 90       	lpm	r1, Z+
    794e:	1d 92       	st	X+, r1
    7950:	15 90       	lpm	r1, Z+
    7952:	1d 92       	st	X+, r1
    7954:	15 90       	lpm	r1, Z+
    7956:	1d 92       	st	X+, r1
    7958:	15 90       	lpm	r1, Z+
    795a:	1d 92       	st	X+, r1
    795c:	15 90       	lpm	r1, Z+
    795e:	1d 92       	st	X+, r1
    7960:	15 90       	lpm	r1, Z+
    7962:	1d 92       	st	X+, r1
    7964:	15 90       	lpm	r1, Z+
    7966:	1d 92       	st	X+, r1
    7968:	15 90       	lpm	r1, Z+
    796a:	1d 92       	st	X+, r1
    796c:	15 90       	lpm	r1, Z+
    796e:	1d 92       	st	X+, r1
    7970:	15 90       	lpm	r1, Z+
    7972:	1d 92       	st	X+, r1
    7974:	15 90       	lpm	r1, Z+
    7976:	1d 92       	st	X+, r1
    7978:	15 90       	lpm	r1, Z+
    797a:	1d 92       	st	X+, r1
    797c:	15 90       	lpm	r1, Z+
    797e:	1d 92       	st	X+, r1
    7980:	15 90       	lpm	r1, Z+
    7982:	1d 92       	st	X+, r1
    7984:	15 90       	lpm	r1, Z+
    7986:	1d 92       	st	X+, r1
    7988:	15 90       	lpm	r1, Z+
    798a:	1d 92       	st	X+, r1
	clr r1
    798c:	11 24       	eor	r1, r1
	ret
    798e:	08 95       	ret

00007990 <CopyRamTile>:
; r24=Source RAM tile index
; r22=Dest RAM tile index
;************************************
CopyRamTile:

	ldi r18,TILE_HEIGHT*TILE_WIDTH
    7990:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	ldi ZL,lo8(ram_tiles)
    7992:	e0 e5       	ldi	r30, 0x50	; 80
	ldi ZH,hi8(ram_tiles)
    7994:	f5 e0       	ldi	r31, 0x05	; 5
	mul r24,r18
    7996:	82 9f       	mul	r24, r18
	add ZL,r0
    7998:	e0 0d       	add	r30, r0
	adc ZH,r1
    799a:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    799c:	a0 e5       	ldi	r26, 0x50	; 80
	ldi XH,hi8(ram_tiles)
    799e:	b5 e0       	ldi	r27, 0x05	; 5
	mul r22,r18
    79a0:	62 9f       	mul	r22, r18
	add XL,r0
    79a2:	a0 0d       	add	r26, r0
	adc XH,r1
    79a4:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	ld r1,Z+
	st X+,r1
.endr
    79a6:	11 90       	ld	r1, Z+
    79a8:	1d 92       	st	X+, r1
    79aa:	11 90       	ld	r1, Z+
    79ac:	1d 92       	st	X+, r1
    79ae:	11 90       	ld	r1, Z+
    79b0:	1d 92       	st	X+, r1
    79b2:	11 90       	ld	r1, Z+
    79b4:	1d 92       	st	X+, r1
    79b6:	11 90       	ld	r1, Z+
    79b8:	1d 92       	st	X+, r1
    79ba:	11 90       	ld	r1, Z+
    79bc:	1d 92       	st	X+, r1
    79be:	11 90       	ld	r1, Z+
    79c0:	1d 92       	st	X+, r1
    79c2:	11 90       	ld	r1, Z+
    79c4:	1d 92       	st	X+, r1
    79c6:	11 90       	ld	r1, Z+
    79c8:	1d 92       	st	X+, r1
    79ca:	11 90       	ld	r1, Z+
    79cc:	1d 92       	st	X+, r1
    79ce:	11 90       	ld	r1, Z+
    79d0:	1d 92       	st	X+, r1
    79d2:	11 90       	ld	r1, Z+
    79d4:	1d 92       	st	X+, r1
    79d6:	11 90       	ld	r1, Z+
    79d8:	1d 92       	st	X+, r1
    79da:	11 90       	ld	r1, Z+
    79dc:	1d 92       	st	X+, r1
    79de:	11 90       	ld	r1, Z+
    79e0:	1d 92       	st	X+, r1
    79e2:	11 90       	ld	r1, Z+
    79e4:	1d 92       	st	X+, r1
    79e6:	11 90       	ld	r1, Z+
    79e8:	1d 92       	st	X+, r1
    79ea:	11 90       	ld	r1, Z+
    79ec:	1d 92       	st	X+, r1
    79ee:	11 90       	ld	r1, Z+
    79f0:	1d 92       	st	X+, r1
    79f2:	11 90       	ld	r1, Z+
    79f4:	1d 92       	st	X+, r1
    79f6:	11 90       	ld	r1, Z+
    79f8:	1d 92       	st	X+, r1
    79fa:	11 90       	ld	r1, Z+
    79fc:	1d 92       	st	X+, r1
    79fe:	11 90       	ld	r1, Z+
    7a00:	1d 92       	st	X+, r1
    7a02:	11 90       	ld	r1, Z+
    7a04:	1d 92       	st	X+, r1
    7a06:	11 90       	ld	r1, Z+
    7a08:	1d 92       	st	X+, r1
    7a0a:	11 90       	ld	r1, Z+
    7a0c:	1d 92       	st	X+, r1
    7a0e:	11 90       	ld	r1, Z+
    7a10:	1d 92       	st	X+, r1
    7a12:	11 90       	ld	r1, Z+
    7a14:	1d 92       	st	X+, r1
    7a16:	11 90       	ld	r1, Z+
    7a18:	1d 92       	st	X+, r1
    7a1a:	11 90       	ld	r1, Z+
    7a1c:	1d 92       	st	X+, r1
    7a1e:	11 90       	ld	r1, Z+
    7a20:	1d 92       	st	X+, r1
    7a22:	11 90       	ld	r1, Z+
    7a24:	1d 92       	st	X+, r1
    7a26:	11 90       	ld	r1, Z+
    7a28:	1d 92       	st	X+, r1
    7a2a:	11 90       	ld	r1, Z+
    7a2c:	1d 92       	st	X+, r1
    7a2e:	11 90       	ld	r1, Z+
    7a30:	1d 92       	st	X+, r1
    7a32:	11 90       	ld	r1, Z+
    7a34:	1d 92       	st	X+, r1
    7a36:	11 90       	ld	r1, Z+
    7a38:	1d 92       	st	X+, r1
    7a3a:	11 90       	ld	r1, Z+
    7a3c:	1d 92       	st	X+, r1
    7a3e:	11 90       	ld	r1, Z+
    7a40:	1d 92       	st	X+, r1
    7a42:	11 90       	ld	r1, Z+
    7a44:	1d 92       	st	X+, r1
    7a46:	11 90       	ld	r1, Z+
    7a48:	1d 92       	st	X+, r1
    7a4a:	11 90       	ld	r1, Z+
    7a4c:	1d 92       	st	X+, r1
    7a4e:	11 90       	ld	r1, Z+
    7a50:	1d 92       	st	X+, r1
    7a52:	11 90       	ld	r1, Z+
    7a54:	1d 92       	st	X+, r1
    7a56:	11 90       	ld	r1, Z+
    7a58:	1d 92       	st	X+, r1
    7a5a:	11 90       	ld	r1, Z+
    7a5c:	1d 92       	st	X+, r1
    7a5e:	11 90       	ld	r1, Z+
    7a60:	1d 92       	st	X+, r1
    7a62:	11 90       	ld	r1, Z+
    7a64:	1d 92       	st	X+, r1
    7a66:	11 90       	ld	r1, Z+
    7a68:	1d 92       	st	X+, r1
    7a6a:	11 90       	ld	r1, Z+
    7a6c:	1d 92       	st	X+, r1
    7a6e:	11 90       	ld	r1, Z+
    7a70:	1d 92       	st	X+, r1
    7a72:	11 90       	ld	r1, Z+
    7a74:	1d 92       	st	X+, r1
    7a76:	11 90       	ld	r1, Z+
    7a78:	1d 92       	st	X+, r1
    7a7a:	11 90       	ld	r1, Z+
    7a7c:	1d 92       	st	X+, r1
    7a7e:	11 90       	ld	r1, Z+
    7a80:	1d 92       	st	X+, r1
    7a82:	11 90       	ld	r1, Z+
    7a84:	1d 92       	st	X+, r1
    7a86:	11 90       	ld	r1, Z+
    7a88:	1d 92       	st	X+, r1
    7a8a:	11 90       	ld	r1, Z+
    7a8c:	1d 92       	st	X+, r1
    7a8e:	11 90       	ld	r1, Z+
    7a90:	1d 92       	st	X+, r1
    7a92:	11 90       	ld	r1, Z+
    7a94:	1d 92       	st	X+, r1
    7a96:	11 90       	ld	r1, Z+
    7a98:	1d 92       	st	X+, r1
    7a9a:	11 90       	ld	r1, Z+
    7a9c:	1d 92       	st	X+, r1
    7a9e:	11 90       	ld	r1, Z+
    7aa0:	1d 92       	st	X+, r1
    7aa2:	11 90       	ld	r1, Z+
    7aa4:	1d 92       	st	X+, r1
	clr r1
    7aa6:	11 24       	eor	r1, r1
	ret
    7aa8:	08 95       	ret

00007aaa <BlitSprite>:
; r22=RAM tile index (bt)
; r21:r20=Y:X
; r19:r18=DY:DX
;************************************
BlitSprite:
	push r16
    7aaa:	0f 93       	push	r16
	push r17
    7aac:	1f 93       	push	r17
	push YL
    7aae:	cf 93       	push	r28
	push YH
    7ab0:	df 93       	push	r29

	;src=sprites_tiletable_lo+(sprites[i].tileIndex*TILE_HEIGHT*TILE_WIDTH)
	ldi r25,SPRITE_STRUCT_SIZE
    7ab2:	94 e0       	ldi	r25, 0x04	; 4
	mul r24,r25
    7ab4:	89 9f       	mul	r24, r25

	ldi ZL,lo8(sprites)	
    7ab6:	e0 e1       	ldi	r30, 0x10	; 16
	ldi ZH,hi8(sprites)	
    7ab8:	f5 e0       	ldi	r31, 0x05	; 5
	add ZL,r0
    7aba:	e0 0d       	add	r30, r0
	adc ZH,r1
    7abc:	f1 1d       	adc	r31, r1

	ldd r16,Z+sprFlags
    7abe:	03 81       	ldd	r16, Z+3	; 0x03

	;8x16 multiply
	ldd r24,Z+sprTileIndex
    7ac0:	82 81       	ldd	r24, Z+2	; 0x02
	ldi r30,TILE_WIDTH*TILE_HEIGHT
    7ac2:	e0 e4       	ldi	r30, 0x40	; 64
	mul r24,r30
    7ac4:	8e 9f       	mul	r24, r30
	movw r26,r0
    7ac6:	d0 01       	movw	r26, r0
	
	;get tile bank addr
	ldi r25,4*2
    7ac8:	98 e0       	ldi	r25, 0x08	; 8
	mul r16,r25
    7aca:	09 9f       	mul	r16, r25
	ldi YL,lo8(sprites_tile_banks)	
    7acc:	c4 ea       	ldi	r28, 0xA4	; 164
	ldi YH,hi8(sprites_tile_banks)	
    7ace:	dc e0       	ldi	r29, 0x0C	; 12
	clr r0
    7ad0:	00 24       	eor	r0, r0
	add YL,r1
    7ad2:	c1 0d       	add	r28, r1
	adc YH,r0		
    7ad4:	d0 1d       	adc	r29, r0
	ldd ZL,Y+0
    7ad6:	e8 81       	ld	r30, Y
	ldd ZH,Y+1
    7ad8:	f9 81       	ldd	r31, Y+1	; 0x01
	add ZL,r26	;tile data src
    7ada:	ea 0f       	add	r30, r26
	adc ZH,r27
    7adc:	fb 1f       	adc	r31, r27
	
	;dest=ram_tiles+(bt*TILE_HEIGHT*TILE_WIDTH)
	ldi XL,lo8(ram_tiles)	
    7ade:	a0 e5       	ldi	r26, 0x50	; 80
	ldi XH,hi8(ram_tiles)
    7ae0:	b5 e0       	ldi	r27, 0x05	; 5
	ldi r25,TILE_WIDTH*TILE_HEIGHT
    7ae2:	90 e4       	ldi	r25, 0x40	; 64
	mul r22,r25
    7ae4:	69 9f       	mul	r22, r25
	add XL,r0
    7ae6:	a0 0d       	add	r26, r0
	adc XH,r1
    7ae8:	b1 1d       	adc	r27, r1
			srcXdiff=destXdiff;
			src+=destXdiff;
		}
	}
	*/
	clr r1
    7aea:	11 24       	eor	r1, r1
	clr YH		;hi8(srcXdiff)
    7aec:	dd 27       	eor	r29, r29

	cpi r20,0	
    7aee:	40 30       	cpi	r20, 0x00	; 0
	brne x_2nd_tile
    7af0:	51 f4       	brne	.+20     	; 0x7b06 <x_2nd_tile>
	
	add XL,r18	;dest+=dx
    7af2:	a2 0f       	add	r26, r18
	adc XH,r1
    7af4:	b1 1d       	adc	r27, r1
	mov r24,r18	;destXdiff=dx
    7af6:	82 2f       	mov	r24, r18
	mov YL,r18	;srcXdiff=dx
    7af8:	c2 2f       	mov	r28, r18

	sbrs r16,SPRITE_FLIP_X_BIT
    7afa:	00 ff       	sbrs	r16, 0
	rjmp x_check_end
    7afc:	11 c0       	rjmp	.+34     	; 0x7b20 <x_check_end>

	adiw ZL,(TILE_WIDTH-1)	;src+=7
    7afe:	37 96       	adiw	r30, 0x07	; 7
	ldi YL,TILE_WIDTH*2		;srcXdiff=((TILE_WIDTH*2)-dx);
    7b00:	c0 e1       	ldi	r28, 0x10	; 16
	sub YL,r18	
    7b02:	c2 1b       	sub	r28, r18
	rjmp x_check_end
    7b04:	0d c0       	rjmp	.+26     	; 0x7b20 <x_check_end>

00007b06 <x_2nd_tile>:

x_2nd_tile:
	ldi r24,TILE_WIDTH
    7b06:	88 e0       	ldi	r24, 0x08	; 8
	sub r24,r18		;8-DX = xdiff for dest
    7b08:	82 1b       	sub	r24, r18

	sbrc r16,SPRITE_FLIP_X_BIT
    7b0a:	00 fd       	sbrc	r16, 0
	rjmp x2_flip_x
    7b0c:	04 c0       	rjmp	.+8      	; 0x7b16 <x2_flip_x>

	mov YL,r24		;srcXdiff=destXdiff;
    7b0e:	c8 2f       	mov	r28, r24
	add ZL,r24		;src+=destXdiff;
    7b10:	e8 0f       	add	r30, r24
	adc ZH,r1	
    7b12:	f1 1d       	adc	r31, r1
	rjmp x_check_end
    7b14:	05 c0       	rjmp	.+10     	; 0x7b20 <x_check_end>

00007b16 <x2_flip_x>:

x2_flip_x:
	ldi YL,TILE_WIDTH
    7b16:	c8 e0       	ldi	r28, 0x08	; 8
	add YL,r18		;srcXdiff=TILE_WIDTH+dx;	
    7b18:	c2 0f       	add	r28, r18
	add ZL,r18		;src+=dx;
    7b1a:	e2 0f       	add	r30, r18
	adc ZH,r1
    7b1c:	f1 1d       	adc	r31, r1
	sbiw ZL,1		;src--;
    7b1e:	31 97       	sbiw	r30, 0x01	; 1

00007b20 <x_check_end>:
		}else{
			src+=(ydiff*TILE_WIDTH);
		}
	}
	*/
	cpi r21,0
    7b20:	50 30       	cpi	r21, 0x00	; 0
	brne y_2nd_tile
    7b22:	51 f4       	brne	.+20     	; 0x7b38 <y_2nd_tile>

	ldi r25,TILE_WIDTH	;dest+=(dy*TILE_WIDTH)
    7b24:	98 e0       	ldi	r25, 0x08	; 8
	mul r25,r19			
    7b26:	93 9f       	mul	r25, r19
	add XL,r0
    7b28:	a0 0d       	add	r26, r0
	adc XH,r1
    7b2a:	b1 1d       	adc	r27, r1

	mov r25,r19			;ydiff=dy
    7b2c:	93 2f       	mov	r25, r19

	//sbrc r16,SPRITE_FLIP_Y_BIT
	//adiw ZL,(TILE_WIDTH*(TILE_HEIGHT-1))

	sbrc r16,SPRITE_FLIP_Y_BIT
    7b2e:	01 fd       	sbrc	r16, 1
	subi ZL,lo8(-(TILE_WIDTH*(TILE_HEIGHT-1)));src+=(TILE_WIDTH*(TILE_HEIGHT-1));
    7b30:	e8 5c       	subi	r30, 0xC8	; 200
	sbrc r16,SPRITE_FLIP_Y_BIT
    7b32:	01 fd       	sbrc	r16, 1
	sbci ZH,hi8(-(TILE_WIDTH*(TILE_HEIGHT-1)))
    7b34:	ff 4f       	sbci	r31, 0xFF	; 255


	rjmp y_check_end
    7b36:	0a c0       	rjmp	.+20     	; 0x7b4c <y_check_end>

00007b38 <y_2nd_tile>:

y_2nd_tile:
	ldi r25,TILE_HEIGHT	;ydiff=(TILE_HEIGHT-dy)
    7b38:	98 e0       	ldi	r25, 0x08	; 8
	sub r25,r19	
    7b3a:	93 1b       	sub	r25, r19
	
	mov r22,r19			;temp=dy-1
    7b3c:	63 2f       	mov	r22, r19
	dec r22
    7b3e:	6a 95       	dec	r22
	sbrs r16,SPRITE_FLIP_Y_BIT
    7b40:	01 ff       	sbrs	r16, 1
	mov r22,r25			;temp=ydiff
    7b42:	69 2f       	mov	r22, r25

	ldi r21,TILE_WIDTH	;src+=(temp*TILE_WIDTH);
    7b44:	58 e0       	ldi	r21, 0x08	; 8
	mul r21,r22
    7b46:	56 9f       	mul	r21, r22
	add ZL,r0
    7b48:	e0 0d       	add	r30, r0
	adc ZH,r1	
    7b4a:	f1 1d       	adc	r31, r1

00007b4c <y_check_end>:
y_check_end:	
	
	//if(flags&SPRITE_FLIP_X){
	//	step=-1;
	//}
	ser r22		;step=-1
    7b4c:	6f ef       	ldi	r22, 0xFF	; 255
	ser r23
    7b4e:	7f ef       	ldi	r23, 0xFF	; 255
	sbrs r16,SPRITE_FLIP_X_BIT
    7b50:	00 ff       	sbrs	r16, 0
	ldi r22,1	;step=1
    7b52:	61 e0       	ldi	r22, 0x01	; 1
	sbrs r16,SPRITE_FLIP_X_BIT
    7b54:	00 ff       	sbrs	r16, 0
	clr r23
    7b56:	77 27       	eor	r23, r23

	//if(flags&SPRITE_FLIP_Y){
	//	srcXdiff-=(TILE_WIDTH*2);
	//}
	sbrc r16,SPRITE_FLIP_Y_BIT
    7b58:	01 fd       	sbrc	r16, 1
	sbiw YL,(TILE_WIDTH*2)
    7b5a:	60 97       	sbiw	r28, 0x10	; 16
	;r24	= destXdiff
	;r25	= ydiff
	;X		= dest
	;Y		= srcXdiff
	;Z		= src
	clr r1
    7b5c:	11 24       	eor	r1, r1
	ldi r19,TRANSLUCENT_COLOR
    7b5e:	3e ef       	ldi	r19, 0xFE	; 254

	ldi r21,TILE_HEIGHT
    7b60:	58 e0       	ldi	r21, 0x08	; 8
	sub r21,r25 	;yspan=(TILE_HEIGHT-ydiff)
    7b62:	59 1b       	sub	r21, r25

00007b64 <y_loop>:

y_loop:
	ldi r20,TILE_WIDTH
    7b64:	48 e0       	ldi	r20, 0x08	; 8
	sub r20,r24 	;xspan=(TILE_WIDTH-destXdiff)
    7b66:	48 1b       	sub	r20, r24

00007b68 <x_loop>:

x_loop:
	lpm r18,Z		;px=pgm_read_byte(src);
    7b68:	24 91       	lpm	r18, Z
	cpse r18,r19	;if(px!=TRANSLUCENT_COLOR)
    7b6a:	23 13       	cpse	r18, r19
	st X,r18		;*dest=px;
    7b6c:	2c 93       	st	X, r18
	adiw XL,1
    7b6e:	11 96       	adiw	r26, 0x01	; 1
	add ZL,r22		;src+=step;
    7b70:	e6 0f       	add	r30, r22
	adc ZH,r23
    7b72:	f7 1f       	adc	r31, r23
	dec r20
    7b74:	4a 95       	dec	r20
	brne x_loop
    7b76:	c1 f7       	brne	.-16     	; 0x7b68 <x_loop>

	add ZL,YL		;src+=srcXdiff
    7b78:	ec 0f       	add	r30, r28
	adc ZH,YH
    7b7a:	fd 1f       	adc	r31, r29
	add XL,r24		;dest+=destXdiff
    7b7c:	a8 0f       	add	r26, r24
	adc XH,r1
    7b7e:	b1 1d       	adc	r27, r1
	dec r21
    7b80:	5a 95       	dec	r21
	brne y_loop
    7b82:	81 f7       	brne	.-32     	; 0x7b64 <y_loop>


	pop YH
    7b84:	df 91       	pop	r29
	pop YL
    7b86:	cf 91       	pop	r28
	pop r17
    7b88:	1f 91       	pop	r17
	pop r16
    7b8a:	0f 91       	pop	r16
	ret
    7b8c:	08 95       	ret

00007b8e <__vector_13>:

;***************************************************************************
; Main Video sync interrupt
;***************************************************************************
TIMER1_COMPA_vect:
	push r0
    7b8e:	0f 92       	push	r0
	push r1
    7b90:	1f 92       	push	r1
	push ZL;2
    7b92:	ef 93       	push	r30
	push ZH;2
    7b94:	ff 93       	push	r31
	
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    7b96:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    7b98:	ef 93       	push	r30

	;Read timer offset since rollover to remove cycles 
	;and conpensate for interrupt latency.
	;This is nessesary to eliminate frame jitter.
	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    7b9a:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,0x12 ;MIN_INT_LATENCY
    7b9e:	e2 51       	subi	r30, 0x12	; 18

	ldi ZH,1
    7ba0:	f1 e0       	ldi	r31, 0x01	; 1

00007ba2 <latency_loop>:
latency_loop:
	cp ZL,ZH
    7ba2:	ef 17       	cp	r30, r31
	brlo .		;advance PC to next instruction	
    7ba4:	00 f0       	brcs	.+0      	; 0x7ba6 <latency_loop+0x4>
	inc ZH
    7ba6:	f3 95       	inc	r31
	cpi ZH,10
    7ba8:	fa 30       	cpi	r31, 0x0A	; 10
	brlo latency_loop
    7baa:	d8 f3       	brcs	.-10     	; 0x7ba2 <latency_loop>
	jmp .
    7bac:	0c 94 d8 3d 	jmp	0x7bb0	; 0x7bb0 <latency_loop+0xe>
	
	;decrement sync pulse counter
	lds ZL,sync_pulse
    7bb0:	e0 91 b7 0c 	lds	r30, 0x0CB7
	dec ZL
    7bb4:	ea 95       	dec	r30
	sts sync_pulse,ZL
    7bb6:	e0 93 b7 0c 	sts	0x0CB7, r30

	;process sync phases
	lds ZH,sync_phase
    7bba:	f0 91 b6 0c 	lds	r31, 0x0CB6
	sbrc ZH,0
    7bbe:	f0 fd       	sbrc	r31, 0
	rjmp sync_hsync
    7bc0:	57 c0       	rjmp	.+174    	; 0x7c70 <sync_hsync>
; Note: TCNT1 should be equal to 
; 0x68 on the cbi
; 0xAC on the sbi
; pulse duration: 68 clocks
;***************************************************		
	cpi ZL,SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    7bc2:	ec 30       	cpi	r30, 0x0C	; 12
	brlo sync_eq
    7bc4:	98 f0       	brcs	.+38     	; 0x7bec <sync_eq>

	;Set HDRIVE to double rate during VSYNC
	ldi ZH,hi8(HDRIVE_CL_TWICE)
    7bc6:	f3 e0       	ldi	r31, 0x03	; 3
	sts _SFR_MEM_ADDR(OCR1AH),ZH	
    7bc8:	f0 93 89 00 	sts	0x0089, r31
	ldi ZH,lo8(HDRIVE_CL_TWICE)
    7bcc:	fd e8       	ldi	r31, 0x8D	; 141
	sts _SFR_MEM_ADDR(OCR1AL),ZH
    7bce:	f0 93 88 00 	sts	0x0088, r31

	bst ZL,0
    7bd2:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0x68
    7bd4:	28 98       	cbi	0x05, 0	; 5
	brtc sync_pre_eq_no_sound_update
    7bd6:	26 f4       	brtc	.+8      	; 0x7be0 <sync_pre_eq_no_sound_update>
	ldi ZL,1	;indicate update_sound to generate the SBI for pre-eq
    7bd8:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    7bda:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <update_sound>
	rjmp sync_end
    7bde:	b7 c0       	rjmp	.+366    	; 0x7d4e <sync_end>

00007be0 <sync_pre_eq_no_sound_update>:

sync_pre_eq_no_sound_update:
	WAIT ZL,64
    7be0:	e5 e1       	ldi	r30, 0x15	; 21
    7be2:	ea 95       	dec	r30
    7be4:	f1 f7       	brne	.-4      	; 0x7be2 <sync_pre_eq_no_sound_update+0x2>
    7be6:	00 00       	nop
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    7be8:	28 9a       	sbi	0x05, 0	; 5
		
	rjmp sync_end
    7bea:	b1 c0       	rjmp	.+354    	; 0x7d4e <sync_end>

00007bec <sync_eq>:
; 0x68  on the cbi
; 0x36E on the sbi
; low pulse duration: 774 clocks
;***************************************************	
sync_eq:
	cpi ZL,SYNC_POST_EQ_PULSES
    7bec:	e6 30       	cpi	r30, 0x06	; 6
	brlo sync_post_eq
    7bee:	38 f1       	brcs	.+78     	; 0x7c3e <sync_post_eq>

	rjmp .
    7bf0:	00 c0       	rjmp	.+0      	; 0x7bf2 <sync_eq+0x6>
	rjmp .
    7bf2:	00 c0       	rjmp	.+0      	; 0x7bf4 <sync_eq+0x8>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    7bf4:	28 98       	cbi	0x05, 0	; 5

	bst ZL,0
    7bf6:	e0 fb       	bst	r30, 0
	ldi ZL,4
    7bf8:	e4 e0       	ldi	r30, 0x04	; 4
	brtc sync_eq_skip
    7bfa:	16 f4       	brtc	.+4      	; 0x7c00 <sync_eq_skip>
	
	call update_sound
    7bfc:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <update_sound>

00007c00 <sync_eq_skip>:
	;enable interupt to bring back sync 
	;level instead of wasting cycles
	;in a big wait loop

 	;clear interrupt flag
	ldi ZL,(1<<OCF1B)
    7c00:	e4 e0       	ldi	r30, 0x04	; 4
	sts _SFR_MEM_ADDR(TIFR1),ZL 
    7c02:	e0 93 36 00 	sts	0x0036, r30
	
	;generate interrupt on match
	;for timer1 compare unit b
	ldi ZL,(1<<OCIE1A)+(1<<OCIE1B)
    7c06:	e6 e0       	ldi	r30, 0x06	; 6
	sts _SFR_MEM_ADDR(TIMSK1),ZL
    7c08:	e0 93 6f 00 	sts	0x006F, r30

	rjmp sync_end
    7c0c:	a0 c0       	rjmp	.+320    	; 0x7d4e <sync_end>

00007c0e <__vector_14>:
; during VSYNC EQ pulses to recover ~5000 cycles per field
; with interrupt latency conpensation
; 37 cycles
;**********************************************************	
TIMER1_COMPB_vect:
	push ZL
    7c0e:	ef 93       	push	r30
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    7c10:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    7c12:	ef 93       	push	r30

	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    7c14:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,62+31 ;0x5D ;MIN_INT_LATENCY
    7c18:	ed 55       	subi	r30, 0x5D	; 93

	cpi ZL,1
    7c1a:	e1 30       	cpi	r30, 0x01	; 1
	brlo .		;advance PC to next instruction
    7c1c:	00 f0       	brcs	.+0      	; 0x7c1e <__vector_14+0x10>

	cpi ZL,2
    7c1e:	e2 30       	cpi	r30, 0x02	; 2
	brlo .		;advance PC to next instruction
    7c20:	00 f0       	brcs	.+0      	; 0x7c22 <__vector_14+0x14>

	cpi ZL,3
    7c22:	e3 30       	cpi	r30, 0x03	; 3
	brlo .		;advance PC to next instruction
    7c24:	00 f0       	brcs	.+0      	; 0x7c26 <__vector_14+0x18>

	cpi ZL,4
    7c26:	e4 30       	cpi	r30, 0x04	; 4
	brlo .		;advance PC to next instruction
    7c28:	00 f0       	brcs	.+0      	; 0x7c2a <__vector_14+0x1c>

	cpi ZL,5
    7c2a:	e5 30       	cpi	r30, 0x05	; 5
	brlo .		;advance PC to next instruction
    7c2c:	00 f0       	brcs	.+0      	; 0x7c2e <__vector_14+0x20>

 	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;68
    7c2e:	28 9a       	sbi	0x05, 0	; 5
	ldi ZL,(1<<OCIE1A) ; disable OCIE1B 
    7c30:	e2 e0       	ldi	r30, 0x02	; 2
	sts _SFR_MEM_ADDR(TIMSK1),ZL ;stop generate interrupt on match
    7c32:	e0 93 6f 00 	sts	0x006F, r30
	
	;restore flags
	pop ZL
    7c36:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL	
    7c38:	ef bf       	out	0x3f, r30	; 63
	pop ZL
    7c3a:	ef 91       	pop	r30
	reti
    7c3c:	18 95       	reti

00007c3e <sync_post_eq>:
; 0x68 on the cbi
; 0xAC on the sbi
; pulse cycles: 68 clocks
;***************************************************	
sync_post_eq:	
	rjmp .
    7c3e:	00 c0       	rjmp	.+0      	; 0x7c40 <sync_post_eq+0x2>

	bst ZL,0
    7c40:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    7c42:	28 98       	cbi	0x05, 0	; 5
	brtc sync_post_eq_no_sound_update
    7c44:	26 f4       	brtc	.+8      	; 0x7c4e <sync_post_eq_no_sound_update>
	ldi ZL,1	
    7c46:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    7c48:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <update_sound>
	rjmp sync_pre_eq_cont
    7c4c:	05 c0       	rjmp	.+10     	; 0x7c58 <sync_pre_eq_cont>

00007c4e <sync_post_eq_no_sound_update>:

sync_post_eq_no_sound_update:
	WAIT ZL,64
    7c4e:	e5 e1       	ldi	r30, 0x15	; 21
    7c50:	ea 95       	dec	r30
    7c52:	f1 f7       	brne	.-4      	; 0x7c50 <sync_post_eq_no_sound_update+0x2>
    7c54:	00 00       	nop

	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN 
    7c56:	28 9a       	sbi	0x05, 0	; 5

00007c58 <sync_pre_eq_cont>:

sync_pre_eq_cont:	
	;check if it's the last vsync pulse
	lds ZL,sync_pulse
    7c58:	e0 91 b7 0c 	lds	r30, 0x0CB7
	cpi ZL,0
    7c5c:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2 ;skip rjmp
    7c5e:	09 f0       	breq	.+2      	; 0x7c62 <sync_pre_eq_cont+0xa>
	rjmp sync_end
    7c60:	76 c0       	rjmp	.+236    	; 0x7d4e <sync_end>
	
	;update sync flags
	ldi ZL,SYNC_HSYNC_PULSES
    7c62:	ed ef       	ldi	r30, 0xFD	; 253
	sts sync_pulse,ZL
    7c64:	e0 93 b7 0c 	sts	0x0CB7, r30
	ldi ZL,1
    7c68:	e1 e0       	ldi	r30, 0x01	; 1
	sts sync_phase,ZL
    7c6a:	e0 93 b6 0c 	sts	0x0CB6, r30
	
	rjmp sync_end
    7c6e:	6f c0       	rjmp	.+222    	; 0x7d4e <sync_end>

00007c70 <sync_hsync>:
; 0xF0 on the sbi
; pulse duration: 136 clocks
;***************************************************	

	; Set HDRIVE to normal rate
	ldi ZL,hi8(HDRIVE_CL)
    7c70:	e7 e0       	ldi	r30, 0x07	; 7
	sts _SFR_MEM_ADDR(OCR1AH),ZL	
    7c72:	e0 93 89 00 	sts	0x0089, r30
	ldi ZL,lo8(HDRIVE_CL)
    7c76:	eb e1       	ldi	r30, 0x1B	; 27
	sts _SFR_MEM_ADDR(OCR1AL),ZL
    7c78:	e0 93 88 00 	sts	0x0088, r30
	rjmp .
    7c7c:	00 c0       	rjmp	.+0      	; 0x7c7e <sync_hsync+0xe>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    7c7e:	28 98       	cbi	0x05, 0	; 5
	
	ldi ZL,2	;indicate update_sound to generate the SBI for pre-eq
    7c80:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    7c82:	00 c0       	rjmp	.+0      	; 0x7c84 <sync_hsync+0x14>
	call update_sound
    7c84:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <update_sound>

	;check if we have reached the first line to render
	ldi ZH,SYNC_HSYNC_PULSES
    7c88:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    7c8a:	00 90 bd 0c 	lds	r0, 0x0CBD
	sub ZH,r0				
    7c8e:	f0 19       	sub	r31, r0
	lds ZL,sync_pulse
    7c90:	e0 91 b7 0c 	lds	r30, 0x0CB7
	cp ZL,ZH
    7c94:	ef 17       	cp	r30, r31
	brsh no_render
    7c96:	d0 f4       	brcc	.+52     	; 0x7ccc <no_render>

	ldi ZH,SYNC_HSYNC_PULSES
    7c98:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    7c9a:	00 90 bd 0c 	lds	r0, 0x0CBD
	sub ZH,r0				
    7c9e:	f0 19       	sub	r31, r0
	lds r0,render_lines_count
    7ca0:	00 90 be 0c 	lds	r0, 0x0CBE
	sub ZH,r0			
    7ca4:	f0 19       	sub	r31, r0
	cp ZL,ZH
    7ca6:	ef 17       	cp	r30, r31
	brlo no_render
    7ca8:	88 f0       	brcs	.+34     	; 0x7ccc <no_render>

	;push r1-r29
	ldi ZL,29
    7caa:	ed e1       	ldi	r30, 0x1D	; 29
	clr ZH
    7cac:	ff 27       	eor	r31, r31

00007cae <push_loop>:
push_loop:
	ld r0,Z	;load value from register file
    7cae:	00 80       	ld	r0, Z
	push r0
    7cb0:	0f 92       	push	r0
	dec ZL
    7cb2:	ea 95       	dec	r30
	brne push_loop	
    7cb4:	e1 f7       	brne	.-8      	; 0x7cae <push_loop>

	;timing compensation
	;to insure we always call the video mode 
	;routine at the same cycle	
	WAIT r16,230-(AUDIO_OUT_HSYNC_CYCLES)
    7cb6:	06 e0       	ldi	r16, 0x06	; 6
    7cb8:	0a 95       	dec	r16
    7cba:	f1 f7       	brne	.-4      	; 0x7cb8 <push_loop+0xa>

	call VMODE_FUNC		;TCNT1=0x234
    7cbc:	0e 94 85 3a 	call	0x750a	; 0x750a <sub_video_mode3>

	;pop r1-r29
	ldi ZL,1
    7cc0:	e1 e0       	ldi	r30, 0x01	; 1
	clr ZH
    7cc2:	ff 27       	eor	r31, r31

00007cc4 <pop_loop>:
pop_loop:
	pop r0
    7cc4:	0f 90       	pop	r0
	st Z+,r0 ;store value to register file
    7cc6:	01 92       	st	Z+, r0
	cpi ZL,30
    7cc8:	ee 31       	cpi	r30, 0x1E	; 30
	brlo pop_loop	
    7cca:	e0 f3       	brcs	.-8      	; 0x7cc4 <pop_loop>

00007ccc <no_render>:

no_render:

	;check if it's the last hsync pulse and we are 
	;ready for VSYNC
	lds ZL,sync_pulse
    7ccc:	e0 91 b7 0c 	lds	r30, 0x0CB7
	cpi ZL,0
    7cd0:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2
    7cd2:	09 f0       	breq	.+2      	; 0x7cd6 <no_render+0xa>
	rjmp sync_end
    7cd4:	3c c0       	rjmp	.+120    	; 0x7d4e <sync_end>
;***************************************************
; Process VSYNC stuff
;***************************************************
	
	;push C-call registers
	push r18
    7cd6:	2f 93       	push	r18
	push r19
    7cd8:	3f 93       	push	r19
	push r20
    7cda:	4f 93       	push	r20
	push r21
    7cdc:	5f 93       	push	r21
	push r22
    7cde:	6f 93       	push	r22
	push r23
    7ce0:	7f 93       	push	r23
	push r24
    7ce2:	8f 93       	push	r24
	push r25
    7ce4:	9f 93       	push	r25
	push r26
    7ce6:	af 93       	push	r26
	push r27
    7ce8:	bf 93       	push	r27

	sei ;must enable ints for re-entrant sync pulses
    7cea:	78 94       	sei
	clr r1
    7cec:	11 24       	eor	r1, r1

	;set vsync flags
	clr ZL
    7cee:	ee 27       	eor	r30, r30
	sts sync_phase,ZL
    7cf0:	e0 93 b6 0c 	sts	0x0CB6, r30
	ldi ZL,SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    7cf4:	e2 e1       	ldi	r30, 0x12	; 18
	sts sync_pulse,ZL
    7cf6:	e0 93 b7 0c 	sts	0x0CB7, r30



	;increment the vsync counter
	lds r24,vsync_counter
    7cfa:	80 91 c7 0c 	lds	r24, 0x0CC7
	lds r25,vsync_counter+1
    7cfe:	90 91 c8 0c 	lds	r25, 0x0CC8
	adiw r24,1
    7d02:	01 96       	adiw	r24, 0x01	; 1
	sts vsync_counter,r24
    7d04:	80 93 c7 0c 	sts	0x0CC7, r24
	sts vsync_counter+1,r25
    7d08:	90 93 c8 0c 	sts	0x0CC8, r25


	;process user pre callback
	lds ZL,pre_vsync_user_callback+0
    7d0c:	e0 91 b9 0c 	lds	r30, 0x0CB9
	lds ZH,pre_vsync_user_callback+1
    7d10:	f0 91 ba 0c 	lds	r31, 0x0CBA
	cp  ZL,r1
    7d14:	e1 15       	cp	r30, r1
	cpc ZH,r1
    7d16:	f1 05       	cpc	r31, r1
	breq .+2 
    7d18:	09 f0       	breq	.+2      	; 0x7d1c <no_render+0x50>
	icall
    7d1a:	09 95       	icall

	;refresh buttons states
	#if CONTROLLERS_VSYNC_READ == 1
		call ReadControllers
    7d1c:	0e 94 5e 40 	call	0x80bc	; 0x80bc <ReadControllers>
	#endif 
	
	;invoke stuff the video mode may have to do
	call VideoModeVsync	
    7d20:	0e 94 de 4e 	call	0x9dbc	; 0x9dbc <VideoModeVsync>

	;process music (music, envelopes, etc)
	call process_music
    7d24:	0e 94 b9 3e 	call	0x7d72	; 0x7d72 <process_music>
	clr r1
    7d28:	11 24       	eor	r1, r1

	;process user post callback
	lds ZL,post_vsync_user_callback+0
    7d2a:	e0 91 bb 0c 	lds	r30, 0x0CBB
	lds ZH,post_vsync_user_callback+1
    7d2e:	f0 91 bc 0c 	lds	r31, 0x0CBC
	cp  ZL,r1
    7d32:	e1 15       	cp	r30, r1
	cpc ZH,r1
    7d34:	f1 05       	cpc	r31, r1
	breq .+2 
    7d36:	09 f0       	breq	.+2      	; 0x7d3a <no_render+0x6e>
	icall
    7d38:	09 95       	icall
	#if SNES_MOUSE == 1
		call ReadMouseExtendedData
		call ProcessMouseMovement
	#endif

	pop r27
    7d3a:	bf 91       	pop	r27
	pop r26
    7d3c:	af 91       	pop	r26
	pop r25
    7d3e:	9f 91       	pop	r25
	pop r24
    7d40:	8f 91       	pop	r24
	pop r23
    7d42:	7f 91       	pop	r23
	pop r22
    7d44:	6f 91       	pop	r22
	pop r21
    7d46:	5f 91       	pop	r21
	pop r20
    7d48:	4f 91       	pop	r20
	pop r19
    7d4a:	3f 91       	pop	r19
	pop r18
    7d4c:	2f 91       	pop	r18

00007d4e <sync_end>:
	
sync_end:	
	;restore flags
	pop ZL
    7d4e:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL
    7d50:	ef bf       	out	0x3f, r30	; 63
	
	pop ZH
    7d52:	ff 91       	pop	r31
	pop ZL
    7d54:	ef 91       	pop	r30
	pop r1
    7d56:	1f 90       	pop	r1
	pop r0
    7d58:	0f 90       	pop	r0
	reti
    7d5a:	18 95       	reti

00007d5c <hsync_pulse>:
; 0xf0 on the sbi 
;	
; Destroys: ZL (r30)
;*************************************************
hsync_pulse:
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    7d5c:	28 98       	cbi	0x05, 0	; 5
	ldi ZL,2
    7d5e:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    7d60:	00 c0       	rjmp	.+0      	; 0x7d62 <hsync_pulse+0x6>
	call update_sound
    7d62:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <update_sound>

	lds ZL,sync_pulse
    7d66:	e0 91 b7 0c 	lds	r30, 0x0CB7
	dec ZL
    7d6a:	ea 95       	dec	r30
	sts sync_pulse,ZL
    7d6c:	e0 93 b7 0c 	sts	0x0CB7, r30

	ret
    7d70:	08 95       	ret

00007d72 <process_music>:
; NOTE: registers r18-r27 are already saved by the caller
;***********************
process_music:
	
#if ENABLE_MIXER==1
	lds ZL,sound_enabled
    7d72:	e0 91 cf 0c 	lds	r30, 0x0CCF
	sbrc ZL,0
    7d76:	e0 fd       	sbrc	r30, 0
 	call ProcessMusic
    7d78:	0e 94 e5 43 	call	0x87ca	; 0x87ca <ProcessMusic>
#endif

	ret
    7d7c:	08 95       	ret

00007d7e <update_sound>:

; Destroys: Z,r0,r1
; cycles: 212+
;****************************
update_sound:
	push r16
    7d7e:	0f 93       	push	r16
	push r17
    7d80:	1f 93       	push	r17
	push r18
    7d82:	2f 93       	push	r18
	push r28
    7d84:	cf 93       	push	r28
	push r29
    7d86:	df 93       	push	r29

	mov r18,ZL
    7d88:	2e 2f       	mov	r18, r30

	;channel 1 
	lds r16,tr1_step_lo
    7d8a:	00 91 d1 0c 	lds	r16, 0x0CD1
	lds r17,tr1_pos_frac
    7d8e:	10 91 d3 0c 	lds	r17, 0x0CD3
	add	r17,r16	;add step to fractional part of sample pos
    7d92:	10 0f       	add	r17, r16
	lds r16,tr1_step_hi	
    7d94:	00 91 d2 0c 	lds	r16, 0x0CD2
	lds ZL,tr1_pos_lo
    7d98:	e0 91 d4 0c 	lds	r30, 0x0CD4
	lds ZH,tr1_pos_hi 
    7d9c:	f0 91 d5 0c 	lds	r31, 0x0CD5
	adc ZL,r16	;add step to low byte of sample pos
    7da0:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    7da2:	04 91       	lpm	r16, Z
	sts tr1_pos_lo,ZL
    7da4:	e0 93 d4 0c 	sts	0x0CD4, r30
	sts tr1_pos_frac,r17
    7da8:	10 93 d3 0c 	sts	0x0CD3, r17
	lds r17,tr1_vol
    7dac:	10 91 d0 0c 	lds	r17, 0x0CD0
	mulsu r16,r17;(sample*mixing vol)
    7db0:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend	
    7db2:	00 08       	sbc	r0, r0
	mov r28,r1	;set (sample*vol>>8) to mix buffer lsb
    7db4:	c1 2d       	mov	r28, r1
	mov r29,r0	;set mix buffer msb	
    7db6:	d0 2d       	mov	r29, r0
	nop
    7db8:	00 00       	nop

;38
	
	;channel 2
	lds r16,tr2_step_lo
    7dba:	00 91 d7 0c 	lds	r16, 0x0CD7
	lds r17,tr2_pos_frac
    7dbe:	10 91 d9 0c 	lds	r17, 0x0CD9
	add	r17,r16	;add step to fractional part of sample pos
    7dc2:	10 0f       	add	r17, r16
	lds r16,tr2_step_hi	
    7dc4:	00 91 d8 0c 	lds	r16, 0x0CD8
	lds ZL,tr2_pos_lo
    7dc8:	e0 91 da 0c 	lds	r30, 0x0CDA
	lds ZH,tr2_pos_hi 
    7dcc:	f0 91 db 0c 	lds	r31, 0x0CDB
	adc ZL,r16	;add step to low byte of sample pos
    7dd0:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    7dd2:	04 91       	lpm	r16, Z
	sts tr2_pos_lo,ZL
    7dd4:	e0 93 da 0c 	sts	0x0CDA, r30
	sts tr2_pos_frac,r17
    7dd8:	10 93 d9 0c 	sts	0x0CD9, r17
	lds r17,tr2_vol
    7ddc:	10 91 d6 0c 	lds	r17, 0x0CD6

	;*** Video sync update ***
	sbrc r18,0								;pre-eq/post-eq sync
    7de0:	20 fd       	sbrc	r18, 0
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    7de2:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,0								
    7de4:	20 ff       	sbrs	r18, 0
	rjmp .
    7de6:	00 c0       	rjmp	.+0      	; 0x7de8 <update_sound+0x6a>
	;*************************

	mulsu r16,r17;(sample*mixing vol)
    7de8:	01 03       	mulsu	r16, r17
	clr r0
    7dea:	00 24       	eor	r0, r0
	sbc r0,r0	;sign extend
    7dec:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    7dee:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb		
    7df0:	d0 1d       	adc	r29, r0
;70
	
	;channel 3
	lds r16,tr3_step_lo
    7df2:	00 91 dd 0c 	lds	r16, 0x0CDD
	lds r17,tr3_pos_frac
    7df6:	10 91 df 0c 	lds	r17, 0x0CDF
	add	r17,r16				;add step to fractional part of sample pos
    7dfa:	10 0f       	add	r17, r16
	lds r16,tr3_step_hi	
    7dfc:	00 91 de 0c 	lds	r16, 0x0CDE
	lds ZL,tr3_pos_lo
    7e00:	e0 91 e0 0c 	lds	r30, 0x0CE0
	lds ZH,tr3_pos_hi 
    7e04:	f0 91 e1 0c 	lds	r31, 0x0CE1
	adc ZL,r16				;add step to low byte of sample pos
    7e08:	e0 1f       	adc	r30, r16
	lpm	r16,Z				;load sample
    7e0a:	04 91       	lpm	r16, Z
	sts tr3_pos_lo,ZL
    7e0c:	e0 93 e0 0c 	sts	0x0CE0, r30
	sts tr3_pos_frac,r17
    7e10:	10 93 df 0c 	sts	0x0CDF, r17
	lds r17,tr3_vol
    7e14:	10 91 dc 0c 	lds	r17, 0x0CDC
	mulsu r16,r17			;(sample*mixing vol)
    7e18:	01 03       	mulsu	r16, r17
	sbc r0,r0				;sign extend
    7e1a:	00 08       	sbc	r0, r0
	add r28,r1				;add (sample*vol>>8) to mix buffer lsb
    7e1c:	c1 0d       	add	r28, r1
	adc r29,r0				;ajust mix buffer msb
    7e1e:	d0 1d       	adc	r29, r0
;97	

	;channel 4 - 7/15 bit LFSR 
	lds r16,tr4_barrel_lo
    7e20:	00 91 e4 0c 	lds	r16, 0x0CE4
	lds r17,tr4_barrel_hi
    7e24:	10 91 e5 0c 	lds	r17, 0x0CE5
	lds ZL,tr4_divider
    7e28:	e0 91 e6 0c 	lds	r30, 0x0CE6
	dec ZL	
    7e2c:	ea 95       	dec	r30
	brpl ch4_no_shift	
    7e2e:	92 f4       	brpl	.+36     	; 0x7e54 <ch4_no_shift>

	lds ZH,tr4_params
    7e30:	f0 91 e3 0c 	lds	r31, 0x0CE3
	mov ZL,ZH
    7e34:	ef 2f       	mov	r30, r31
	lsr ZL 			;keep bits7:1
    7e36:	e6 95       	lsr	r30

	mov r0,r16  ;copy barrel shifter
    7e38:	00 2e       	mov	r0, r16
	lsr r0
    7e3a:	06 94       	lsr	r0
	eor r0,r16  ;xor bit0 and bit1
    7e3c:	00 26       	eor	r0, r16
	bst r0,0
    7e3e:	00 fa       	bst	r0, 0
	lsr r17
    7e40:	16 95       	lsr	r17
	ror r16
    7e42:	07 95       	ror	r16
	bld r17,6	;15 bits mode
    7e44:	16 f9       	bld	r17, 6
	sbrs ZH,0
    7e46:	f0 ff       	sbrs	r31, 0
	bld r16,6	;7 bits mode
    7e48:	06 f9       	bld	r16, 6

	sts tr4_barrel_lo,r16
    7e4a:	00 93 e4 0c 	sts	0x0CE4, r16
	sts tr4_barrel_hi,r17
    7e4e:	10 93 e5 0c 	sts	0x0CE5, r17

	rjmp ch4_end
    7e52:	03 c0       	rjmp	.+6      	; 0x7e5a <ch4_end>

00007e54 <ch4_no_shift>:
ch4_no_shift:
	;wait loop 21 cycles
	ldi r17,6
    7e54:	16 e0       	ldi	r17, 0x06	; 6
	dec r17
    7e56:	1a 95       	dec	r17
	brne .-4
    7e58:	f1 f7       	brne	.-4      	; 0x7e56 <ch4_no_shift+0x2>

00007e5a <ch4_end>:
	;rjmp .
ch4_end:

	sts tr4_divider,ZL
    7e5a:	e0 93 e6 0c 	sts	0x0CE6, r30
	ldi r17,0x80 ;-128
    7e5e:	10 e8       	ldi	r17, 0x80	; 128
	
	;*** Video sync update ***
	sbrc r18,1								;hsync
    7e60:	21 fd       	sbrc	r18, 1
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xF0
    7e62:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,1								
    7e64:	21 ff       	sbrs	r18, 1
	rjmp .
    7e66:	00 c0       	rjmp	.+0      	; 0x7e68 <ch4_end+0xe>
	;*************************
	
	sbrc r16,0
    7e68:	00 fd       	sbrc	r16, 0
	ldi r17,0x7f ;+127
    7e6a:	1f e7       	ldi	r17, 0x7F	; 127
	
	lds r16,tr4_vol
    7e6c:	00 91 e2 0c 	lds	r16, 0x0CE2

	mulsu r17,r16;(sample*mixing vol)
    7e70:	10 03       	mulsu	r17, r16
	sbc r0,r0	;sign extend
    7e72:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    7e74:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb
    7e76:	d0 1d       	adc	r29, r0
;142
#if SOUND_CHANNEL_5_ENABLE==1
	;channel 5 PCM -- 45 cycles

	;add fractional part
	lds r16,tr5_pos_frac
    7e78:	00 91 eb 0c 	lds	r16, 0x0CEB
	lds r17,tr5_step_lo 
    7e7c:	10 91 e9 0c 	lds	r17, 0x0CE9
	add r16,r17
    7e80:	01 0f       	add	r16, r17
	sts tr5_pos_frac,r16
    7e82:	00 93 eb 0c 	sts	0x0CEB, r16

	;add lo
	lds ZL,tr5_pos_lo
    7e86:	e0 91 ec 0c 	lds	r30, 0x0CEC
	lds r17,tr5_step_hi 
    7e8a:	10 91 ea 0c 	lds	r17, 0x0CEA
	adc ZL,r17
    7e8e:	e1 1f       	adc	r30, r17

	;add hi
	lds ZH,tr5_pos_hi
    7e90:	f0 91 ed 0c 	lds	r31, 0x0CED
	ldi r16,0
    7e94:	00 e0       	ldi	r16, 0x00	; 0
	adc ZH,r16
    7e96:	f0 1f       	adc	r31, r16

	movw r16,ZL
    7e98:	8f 01       	movw	r16, r30
	lds r0,tr5_loop_len_lo
    7e9a:	00 90 ee 0c 	lds	r0, 0x0CEE
	lds r1,tr5_loop_len_hi	
    7e9e:	10 90 ef 0c 	lds	r1, 0x0CEF
	sub r16,r0
    7ea2:	00 19       	sub	r16, r0
	sbc r17,r1
    7ea4:	11 09       	sbc	r17, r1
	lds r0,tr5_loop_end_lo
    7ea6:	00 90 f0 0c 	lds	r0, 0x0CF0
	lds r1,tr5_loop_end_hi
    7eaa:	10 90 f1 0c 	lds	r1, 0x0CF1

	cp ZL,r0
    7eae:	e0 15       	cp	r30, r0
	cpc ZH,r1
    7eb0:	f1 05       	cpc	r31, r1
	brlo .+2
    7eb2:	08 f0       	brcs	.+2      	; 0x7eb6 <ch4_end+0x5c>
	movw ZL,r16
    7eb4:	f8 01       	movw	r30, r16

	sts tr5_pos_lo,ZL
    7eb6:	e0 93 ec 0c 	sts	0x0CEC, r30
	sts tr5_pos_hi,ZH
    7eba:	f0 93 ed 0c 	sts	0x0CED, r31

	lpm	r16,Z	;load sample
    7ebe:	04 91       	lpm	r16, Z
	lds r17,tr5_vol
    7ec0:	10 91 e8 0c 	lds	r17, 0x0CE8

	mulsu r16,r17;(sample*mixing vol)
    7ec4:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend
    7ec6:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    7ec8:	c1 0d       	add	r28, r1
	adc r29,r0	;adjust mix buffer msb	
    7eca:	d0 1d       	adc	r29, r0
#endif
	
	;final processing

	;clip
	clr r0
    7ecc:	00 24       	eor	r0, r0
	cpi r28,128	;> 127?
    7ece:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0	
    7ed0:	d0 05       	cpc	r29, r0
	brlt .+2
    7ed2:	0c f0       	brlt	.+2      	; 0x7ed6 <ch4_end+0x7c>
	ldi r28,127
    7ed4:	cf e7       	ldi	r28, 0x7F	; 127
	
	dec r0
    7ed6:	0a 94       	dec	r0
	cpi r28,-128; <-128?
    7ed8:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0xff
    7eda:	d0 05       	cpc	r29, r0
	brge .+2
    7edc:	0c f4       	brge	.+2      	; 0x7ee0 <ch4_end+0x86>
	ldi r28,-128
    7ede:	c0 e8       	ldi	r28, 0x80	; 128

	subi r28,128	;convert to unsigned		
    7ee0:	c0 58       	subi	r28, 0x80	; 128
	sts _SFR_MEM_ADDR(OCR2A),r28 ;output sound byte
    7ee2:	c0 93 b3 00 	sts	0x00B3, r28

00007ee6 <update_sound_end>:
#endif


update_sound_end:

	pop r29
    7ee6:	df 91       	pop	r29
	pop r28
    7ee8:	cf 91       	pop	r28
	pop r18
    7eea:	2f 91       	pop	r18
	pop r17
    7eec:	1f 91       	pop	r17
	pop r16
    7eee:	0f 91       	pop	r16
	
	ret
    7ef0:	08 95       	ret

00007ef2 <SetSpritesTileTable>:
; C-callable
; r25:r24=pointer to sprites pixel data.
;*****************************
.section .text.SetSpritesTileTable
SetSpritesTileTable:
	sts sprites_tile_banks,r24
    7ef2:	80 93 a4 0c 	sts	0x0CA4, r24
	sts sprites_tile_banks+1,r25
    7ef6:	90 93 a5 0c 	sts	0x0CA5, r25
	ret
    7efa:	08 95       	ret

00007efc <ClearVram>:
; C-callable
;************************************
.section .text.ClearVram
ClearVram:
	//init vram		
	ldi r30,lo8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    7efc:	e0 e0       	ldi	r30, 0x00	; 0
	ldi r31,hi8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    7efe:	f4 e0       	ldi	r31, 0x04	; 4

	ldi XL,lo8(vram)
    7f00:	a0 e0       	ldi	r26, 0x00	; 0
	ldi XH,hi8(vram)
    7f02:	b1 e0       	ldi	r27, 0x01	; 1

	ldi r22,RAM_TILES_COUNT
    7f04:	6c e1       	ldi	r22, 0x1C	; 28

00007f06 <fill_vram_loop>:

fill_vram_loop:
	st X+,r22
    7f06:	6d 93       	st	X+, r22
	sbiw r30,1
    7f08:	31 97       	sbiw	r30, 0x01	; 1
	brne fill_vram_loop
    7f0a:	e9 f7       	brne	.-6      	; 0x7f06 <fill_vram_loop>

	clr r1
    7f0c:	11 24       	eor	r1, r1

	ret
    7f0e:	08 95       	ret

00007f10 <SetTile>:
.section .text.SetTile
SetTile:
#if SCROLLING == 1
	;index formula is vram[((y>>3)*256)+8x+(y&7)]
	
	andi r24,0x1f
    7f10:	8f 71       	andi	r24, 0x1F	; 31
	mov r23,r22
    7f12:	76 2f       	mov	r23, r22
	lsr r22
    7f14:	66 95       	lsr	r22
	lsr r22
    7f16:	66 95       	lsr	r22
	lsr r22			;y>>3
    7f18:	66 95       	lsr	r22
	ldi r18,8		
    7f1a:	28 e0       	ldi	r18, 0x08	; 8
	mul r24,r18		;x*8
    7f1c:	82 9f       	mul	r24, r18
	movw XL,r0
    7f1e:	d0 01       	movw	r26, r0
	subi XL,lo8(-(vram))
    7f20:	a0 50       	subi	r26, 0x00	; 0
	sbci XH,hi8(-(vram))
    7f22:	bf 4f       	sbci	r27, 0xFF	; 255
	add XH,r22		;vram+((y>>3)*256)
    7f24:	b6 0f       	add	r27, r22
	andi r23,7		;y&7	
    7f26:	77 70       	andi	r23, 0x07	; 7
	add XL,r23
    7f28:	a7 0f       	add	r26, r23
						
	subi r20,~(RAM_TILES_COUNT-1)	
    7f2a:	44 5e       	subi	r20, 0xE4	; 228
	st X,r20
    7f2c:	4c 93       	st	X, r20

	clr r1
    7f2e:	11 24       	eor	r1, r1

	ret
    7f30:	08 95       	ret

00007f32 <SetTileTable>:
; C-callable
; r25:r24=pointer to tiles data
;************************************
.section .text.SetTileTable
SetTileTable:
	sts tile_table_lo,r24
    7f32:	80 93 ac 0c 	sts	0x0CAC, r24
	sts tile_table_hi,r25	
    7f36:	90 93 ad 0c 	sts	0x0CAD, r25
	ret
    7f3a:	08 95       	ret

00007f3c <GetVsyncFlag>:
;
; C-callable
;************************************
.section .text.GetVsyncFlag
GetVsyncFlag:
	lds r24,sync_flags
    7f3c:	80 91 b8 0c 	lds	r24, 0x0CB8
	andi r24,SYNC_FLAG_VSYNC
    7f40:	81 70       	andi	r24, 0x01	; 1
	ret
    7f42:	08 95       	ret

00007f44 <ClearVsyncFlag>:
; 
; C-callable
;*****************************
.section .text.ClearVsyncFlag
ClearVsyncFlag:
	lds r18,sync_flags
    7f44:	20 91 b8 0c 	lds	r18, 0x0CB8
	andi r18,~SYNC_FLAG_VSYNC
    7f48:	2e 7f       	andi	r18, 0xFE	; 254
	sts sync_flags,r18
    7f4a:	20 93 b8 0c 	sts	0x0CB8, r18
	ret
    7f4e:	08 95       	ret

00007f50 <ReadJoypad>:
; r24=joypad No (0 or 1)
; returns: (int) r25:r24
;*****************************
.section .text.ReadJoypad
ReadJoypad:	
	tst r24
    7f50:	88 23       	and	r24, r24
	brne rj_p2
    7f52:	29 f4       	brne	.+10     	; 0x7f5e <rj_p2>
		
	lds r24,joypad1_status_lo
    7f54:	80 91 bf 0c 	lds	r24, 0x0CBF
	lds r25,joypad1_status_lo+1
    7f58:	90 91 c0 0c 	lds	r25, 0x0CC0
	ret
    7f5c:	08 95       	ret

00007f5e <rj_p2>:
rj_p2:
	lds r24,joypad2_status_lo
    7f5e:	80 91 c3 0c 	lds	r24, 0x0CC3
	lds r25,joypad2_status_lo+1	
    7f62:	90 91 c4 0c 	lds	r25, 0x0CC4

	ret
    7f66:	08 95       	ret

00007f68 <WaitUs>:
; r25:r24 - us to wait
; returns: void
;****************************
.section .text.WaitUs
WaitUs:	
	ldi r23,8
    7f68:	78 e0       	ldi	r23, 0x08	; 8
	dec 23
    7f6a:	7a 95       	dec	r23
	brne .-4 ;~1 us
    7f6c:	f1 f7       	brne	.-4      	; 0x7f6a <WaitUs+0x2>
	nop
    7f6e:	00 00       	nop
	sbiw r24,1
    7f70:	01 97       	sbiw	r24, 0x01	; 1
	brne WaitUs
    7f72:	d1 f7       	brne	.-12     	; 0x7f68 <WaitUs>

	ret
    7f74:	08 95       	ret

00007f76 <WriteEeprom>:
;****************************

.section .text.WriteEeprom
WriteEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    7f76:	f9 99       	sbic	0x1f, 1	; 31
   rjmp WriteEeprom
    7f78:	fe cf       	rjmp	.-4      	; 0x7f76 <WriteEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    7f7a:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    7f7c:	81 bd       	out	0x21, r24	; 33
   ; Write data (r22) to Data Register
   out _SFR_IO_ADDR(EEDR),r22
    7f7e:	60 bd       	out	0x20, r22	; 32
   cli
    7f80:	f8 94       	cli
   ; Write logical one to EEMPE
   sbi _SFR_IO_ADDR(EECR),EEMPE
    7f82:	fa 9a       	sbi	0x1f, 2	; 31
   ; Start eeprom write by setting EEPE
   sbi _SFR_IO_ADDR(EECR),EEPE
    7f84:	f9 9a       	sbi	0x1f, 1	; 31
   sei
    7f86:	78 94       	sei
   ret
    7f88:	08 95       	ret

00007f8a <ReadEeprom>:
; r24 - value read
;****************************
.section .text.ReadEeprom
ReadEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    7f8a:	f9 99       	sbic	0x1f, 1	; 31
   rjmp ReadEeprom
    7f8c:	fe cf       	rjmp	.-4      	; 0x7f8a <ReadEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    7f8e:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    7f90:	81 bd       	out	0x21, r24	; 33
   ; Start eeprom read by writing EERE
   cli
    7f92:	f8 94       	cli
   sbi _SFR_IO_ADDR(EECR),EERE
    7f94:	f8 9a       	sbi	0x1f, 0	; 31
   ; Read data from Data Register
   in r24,_SFR_IO_ADDR(EEDR)
    7f96:	80 b5       	in	r24, 0x20	; 32
   sei
    7f98:	78 94       	sei
   ret
    7f9a:	08 95       	ret

00007f9c <wdt_randomize>:
	.global wdt_randomize
	.section .text.wdt_randomize
	wdt_randomize:

		;set timer 1 full speed count to 0xffff
		ldi r24,0
    7f9c:	80 e0       	ldi	r24, 0x00	; 0
		sts sync_pulse,r24
    7f9e:	80 93 b7 0c 	sts	0x0CB7, r24


		sts _SFR_MEM_ADDR(TIMSK1),r24
    7fa2:	80 93 6f 00 	sts	0x006F, r24
		sts _SFR_MEM_ADDR(OCR1AL),r24
    7fa6:	80 93 88 00 	sts	0x0088, r24
		sts _SFR_MEM_ADDR(OCR1AH),r24
    7faa:	80 93 89 00 	sts	0x0089, r24
		sts _SFR_MEM_ADDR(OCR1BL),r24
    7fae:	80 93 8a 00 	sts	0x008A, r24
		sts _SFR_MEM_ADDR(OCR1BH),r24
    7fb2:	80 93 8b 00 	sts	0x008B, r24
		sts _SFR_MEM_ADDR(TCNT1H),r24
    7fb6:	80 93 85 00 	sts	0x0085, r24
		sts _SFR_MEM_ADDR(TCNT1L),r24
    7fba:	80 93 84 00 	sts	0x0084, r24
		
		sts _SFR_MEM_ADDR(TCCR1A),r24	
    7fbe:	80 93 80 00 	sts	0x0080, r24
		ldi 24,(1<<CS10)
    7fc2:	81 e0       	ldi	r24, 0x01	; 1
		sts _SFR_MEM_ADDR(TCCR1B),r24
    7fc4:	80 93 81 00 	sts	0x0081, r24

		cli
    7fc8:	f8 94       	cli

		;enable watchdog at fastest speed and generate interrupts
		ldi r24,0
    7fca:	80 e0       	ldi	r24, 0x00	; 0
		sts _SFR_MEM_ADDR(MCUSR),r24	
    7fcc:	80 93 54 00 	sts	0x0054, r24
		ldi r25,(1<<WDIE)+(1<<WDE)+(0<<WDP3)+(0<<WDP2)+(0<<WDP1)+(0<<WDP0)
    7fd0:	98 e4       	ldi	r25, 0x48	; 72
		lds r24,_SFR_MEM_ADDR(WDTCSR)
    7fd2:	80 91 60 00 	lds	r24, 0x0060
		ori r24,(1<<WDCE)+(1<<WDE)
    7fd6:	88 61       	ori	r24, 0x18	; 24
		sts _SFR_MEM_ADDR(WDTCSR),r24
    7fd8:	80 93 60 00 	sts	0x0060, r24
		sts _SFR_MEM_ADDR(WDTCSR),r25
    7fdc:	90 93 60 00 	sts	0x0060, r25
	
		sei
    7fe0:	78 94       	sei

00007fe2 <wait>:

		;generate 8 random cycles
	wait:
		lds r24,sync_pulse ;using the yet unalocated "sync_pulse" as a temp variable
    7fe2:	80 91 b7 0c 	lds	r24, 0x0CB7
		cpi r24,8
    7fe6:	88 30       	cpi	r24, 0x08	; 8
		brlo wait
    7fe8:	e0 f3       	brcs	.-8      	; 0x7fe2 <wait>

		ret
    7fea:	08 95       	ret

00007fec <GetTrueRandomSeed>:
	;********************************

	.global GetTrueRandomSeed
	.section .text.GetTrueRandomSeed
	GetTrueRandomSeed:
		lds r24,random_value
    7fec:	80 91 c9 0c 	lds	r24, 0x0CC9
		lds r25,random_value+1
    7ff0:	90 91 ca 0c 	lds	r25, 0x0CCA
		ret
    7ff4:	08 95       	ret

00007ff6 <__vector_8>:
	;*************************************
	; Watchdog timer interrupt
	;*************************************
	WDT_vect:
		;save flags & status register
		push r16
    7ff6:	0f 93       	push	r16
		push r17
    7ff8:	1f 93       	push	r17

		in r16,_SFR_IO_ADDR(SREG)
    7ffa:	0f b7       	in	r16, 0x3f	; 63
		push r16
    7ffc:	0f 93       	push	r16

		lds r16,sync_pulse
    7ffe:	00 91 b7 0c 	lds	r16, 0x0CB7
		inc r16
    8002:	03 95       	inc	r16
		sts sync_pulse,r16
    8004:	00 93 b7 0c 	sts	0x0CB7, r16

		;XOR succesive timer1 LSB into a int
		sbrc r16,0
    8008:	00 fd       	sbrc	r16, 0
		rjmp 1f
    800a:	08 c0       	rjmp	.+16     	; 0x801c <__vector_8+0x26>
		lds r17,random_value
    800c:	10 91 c9 0c 	lds	r17, 0x0CC9
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    8010:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    8014:	10 27       	eor	r17, r16
		sts random_value,r17
    8016:	10 93 c9 0c 	sts	0x0CC9, r17
		rjmp 2f
    801a:	07 c0       	rjmp	.+14     	; 0x802a <__vector_8+0x34>
	1:
		lds r17,random_value+1
    801c:	10 91 ca 0c 	lds	r17, 0x0CCA
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    8020:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    8024:	10 27       	eor	r17, r16
		sts random_value+1,r17
    8026:	10 93 ca 0c 	sts	0x0CCA, r17
	2:

		ldi r16,(1<<WDIE)+(1<<WDE)
    802a:	08 e4       	ldi	r16, 0x48	; 72
		sts _SFR_MEM_ADDR(WDTCSR),r16
    802c:	00 93 60 00 	sts	0x0060, r16

		;restore flags
		pop r16
    8030:	0f 91       	pop	r16
		out _SFR_IO_ADDR(SREG),r16
    8032:	0f bf       	out	0x3f, r16	; 63
	
		pop r17
    8034:	1f 91       	pop	r17
		pop r16
    8036:	0f 91       	pop	r16
		reti
    8038:	18 95       	reti

0000803a <SoftReset>:

/**
 * Performs a software reset
 */
void SoftReset(void){        
	wdt_enable(WDTO_15MS);  
    803a:	98 e0       	ldi	r25, 0x08	; 8
    803c:	88 e1       	ldi	r24, 0x18	; 24
    803e:	0f b6       	in	r0, 0x3f	; 63
    8040:	f8 94       	cli
    8042:	a8 95       	wdr
    8044:	80 93 60 00 	sts	0x0060, r24
    8048:	0f be       	out	0x3f, r0	; 63
    804a:	90 93 60 00 	sts	0x0060, r25
	while(1);
    804e:	ff cf       	rjmp	.-2      	; 0x804e <SoftReset+0x14>

00008050 <ReadButtons>:
void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
	unsigned char i;

	//latch controllers
	JOYPAD_OUT_PORT|=_BV(JOYPAD_LATCH_PIN);
    8050:	12 9a       	sbi	0x02, 2	; 2
		}else{
			Wait200ns();
			Wait200ns();
		}	
	#else
		Wait200ns();
    8052:	c8 95       	lpm
    8054:	c8 95       	lpm
		Wait200ns();
    8056:	c8 95       	lpm
    8058:	c8 95       	lpm
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));
    805a:	12 98       	cbi	0x02, 2	; 2
    805c:	40 e1       	ldi	r20, 0x10	; 16
	DisplayLogo();
	
}

void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
    805e:	80 e0       	ldi	r24, 0x00	; 0
    8060:	90 e0       	ldi	r25, 0x00	; 0
    8062:	20 e0       	ldi	r18, 0x00	; 0
    8064:	30 e0       	ldi	r19, 0x00	; 0


	//read button states
	for(i=0;i<16;i++){

		p1ButtonsLo>>=1;
    8066:	36 95       	lsr	r19
    8068:	27 95       	ror	r18
		p2ButtonsLo>>=1;
    806a:	96 95       	lsr	r25
    806c:	87 95       	ror	r24
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    806e:	c8 95       	lpm
    8070:	c8 95       	lpm
			Wait200ns();
    8072:	c8 95       	lpm
    8074:	c8 95       	lpm
		#endif
			
		//pulse clock pin		
		JOYPAD_OUT_PORT&=~(_BV(JOYPAD_CLOCK_PIN));
    8076:	13 98       	cbi	0x02, 3	; 2
		
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) p1ButtonsLo|=(1<<15);
    8078:	00 9b       	sbis	0x00, 0	; 0
    807a:	30 68       	ori	r19, 0x80	; 128
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) p2ButtonsLo|=(1<<15);
    807c:	01 9b       	sbis	0x00, 1	; 0
    807e:	90 68       	ori	r25, 0x80	; 128
		
		JOYPAD_OUT_PORT|=_BV(JOYPAD_CLOCK_PIN);
    8080:	13 9a       	sbi	0x02, 3	; 2
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    8082:	c8 95       	lpm
    8084:	c8 95       	lpm
			Wait200ns();
    8086:	c8 95       	lpm
    8088:	c8 95       	lpm
    808a:	41 50       	subi	r20, 0x01	; 1
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));


	//read button states
	for(i=0;i<16;i++){
    808c:	61 f7       	brne	.-40     	; 0x8066 <ReadButtons+0x16>
		#endif

	}

	#if JOYSTICK==TYPE_SNES
		joypad1_status_lo=p1ButtonsLo;
    808e:	30 93 c0 0c 	sts	0x0CC0, r19
    8092:	20 93 bf 0c 	sts	0x0CBF, r18
		joypad2_status_lo=p2ButtonsLo;
    8096:	90 93 c4 0c 	sts	0x0CC4, r25
    809a:	80 93 c3 0c 	sts	0x0CC3, r24
	#else
		joypad1_status_lo=p1ButtonsLo&0xff;
		joypad2_status_lo=p2ButtonsLo&0xff;	
	#endif

	if(joypad1_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B) || joypad2_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B)){
    809e:	80 91 bf 0c 	lds	r24, 0x0CBF
    80a2:	90 91 c0 0c 	lds	r25, 0x0CC0
    80a6:	0f 97       	sbiw	r24, 0x0f	; 15
    80a8:	31 f0       	breq	.+12     	; 0x80b6 <ReadButtons+0x66>
    80aa:	80 91 c3 0c 	lds	r24, 0x0CC3
    80ae:	90 91 c4 0c 	lds	r25, 0x0CC4
    80b2:	0f 97       	sbiw	r24, 0x0f	; 15
    80b4:	11 f4       	brne	.+4      	; 0x80ba <ReadButtons+0x6a>
		SoftReset();
    80b6:	0e 94 1d 40 	call	0x803a	; 0x803a <SoftReset>
    80ba:	08 95       	ret

000080bc <ReadControllers>:
 * program when CONTROLLERS_VSYNC_READ==0.
*/
void ReadControllers(){

	//Detect if devices are connected.
	joypadsConnectionStatus=0;
    80bc:	10 92 f9 0c 	sts	0x0CF9, r1
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) joypadsConnectionStatus|=1;
    80c0:	00 99       	sbic	0x00, 0	; 0
    80c2:	03 c0       	rjmp	.+6      	; 0x80ca <ReadControllers+0xe>
    80c4:	81 e0       	ldi	r24, 0x01	; 1
    80c6:	80 93 f9 0c 	sts	0x0CF9, r24
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) joypadsConnectionStatus|=2;
    80ca:	01 99       	sbic	0x00, 1	; 0
    80cc:	05 c0       	rjmp	.+10     	; 0x80d8 <ReadControllers+0x1c>
    80ce:	80 91 f9 0c 	lds	r24, 0x0CF9
    80d2:	82 60       	ori	r24, 0x02	; 2
    80d4:	80 93 f9 0c 	sts	0x0CF9, r24
			
	//read the standard buttons
	ReadButtons();
    80d8:	0c 94 28 40 	jmp	0x8050	; 0x8050 <ReadButtons>

000080dc <FormatEeprom>:
	return resp;
}

	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {
    80dc:	cf 93       	push	r28
    80de:	df 93       	push	r29
    80e0:	c0 e0       	ldi	r28, 0x00	; 0
    80e2:	d0 e0       	ldi	r29, 0x00	; 0
    80e4:	fe 01       	movw	r30, r28
    80e6:	ee 54       	subi	r30, 0x4E	; 78
    80e8:	ff 4f       	sbci	r31, 0xFF	; 255

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
    80ea:	64 91       	lpm	r22, Z
    80ec:	ce 01       	movw	r24, r28
    80ee:	0e 94 bb 3f 	call	0x7f76	; 0x7f76 <WriteEeprom>
    80f2:	21 96       	adiw	r28, 0x01	; 1
	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
    80f4:	c0 32       	cpi	r28, 0x20	; 32
    80f6:	d1 05       	cpc	r29, r1
    80f8:	a9 f7       	brne	.-22     	; 0x80e4 <FormatEeprom+0x8>
    80fa:	c0 e2       	ldi	r28, 0x20	; 32
    80fc:	d0 e0       	ldi	r29, 0x00	; 0
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
    80fe:	6f ef       	ldi	r22, 0xFF	; 255
    8100:	ce 01       	movw	r24, r28
    8102:	0e 94 bb 3f 	call	0x7f76	; 0x7f76 <WriteEeprom>
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
    8106:	6f ef       	ldi	r22, 0xFF	; 255
    8108:	ce 01       	movw	r24, r28
    810a:	01 96       	adiw	r24, 0x01	; 1
    810c:	0e 94 bb 3f 	call	0x7f76	; 0x7f76 <WriteEeprom>
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
    8110:	a0 96       	adiw	r28, 0x20	; 32
    8112:	c1 15       	cp	r28, r1
    8114:	88 e0       	ldi	r24, 0x08	; 8
    8116:	d8 07       	cpc	r29, r24
    8118:	91 f7       	brne	.-28     	; 0x80fe <FormatEeprom+0x22>
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
   }
   
}
    811a:	df 91       	pop	r29
    811c:	cf 91       	pop	r28
    811e:	08 95       	ret

00008120 <isEepromFormatted>:
	  }
   }
}
	
//returns true if the EEPROM has been setup to work with the kernel.
bool isEepromFormatted(){
    8120:	cf 93       	push	r28
	unsigned id;
	id=ReadEeprom(0)+(ReadEeprom(1)<<8);
    8122:	80 e0       	ldi	r24, 0x00	; 0
    8124:	90 e0       	ldi	r25, 0x00	; 0
    8126:	0e 94 c5 3f 	call	0x7f8a	; 0x7f8a <ReadEeprom>
    812a:	c8 2f       	mov	r28, r24
    812c:	81 e0       	ldi	r24, 0x01	; 1
    812e:	90 e0       	ldi	r25, 0x00	; 0
    8130:	0e 94 c5 3f 	call	0x7f8a	; 0x7f8a <ReadEeprom>
    8134:	28 2f       	mov	r18, r24
    8136:	30 e0       	ldi	r19, 0x00	; 0
    8138:	32 2f       	mov	r19, r18
    813a:	22 27       	eor	r18, r18
    813c:	2c 0f       	add	r18, r28
    813e:	31 1d       	adc	r19, r1
	return (id==EEPROM_SIGNATURE);
    8140:	81 e0       	ldi	r24, 0x01	; 1
    8142:	2a 35       	cpi	r18, 0x5A	; 90
    8144:	35 45       	sbci	r19, 0x55	; 85
    8146:	09 f0       	breq	.+2      	; 0x814a <isEepromFormatted+0x2a>
    8148:	80 e0       	ldi	r24, 0x00	; 0
}
    814a:	cf 91       	pop	r28
    814c:	08 95       	ret

0000814e <EepromBlockExists>:
 * @return
 *  0x00 = Success, Block exists.
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK.
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND.
 */
char EepromBlockExists(unsigned int blockId, u16* eepromAddr, u8* nextFreeBlockId){
    814e:	8f 92       	push	r8
    8150:	9f 92       	push	r9
    8152:	af 92       	push	r10
    8154:	bf 92       	push	r11
    8156:	cf 92       	push	r12
    8158:	df 92       	push	r13
    815a:	ef 92       	push	r14
    815c:	ff 92       	push	r15
    815e:	0f 93       	push	r16
    8160:	1f 93       	push	r17
    8162:	cf 93       	push	r28
    8164:	df 93       	push	r29
	u8 nextFreeBlock=0;
	u8 result=EEPROM_ERROR_BLOCK_NOT_FOUND;
	u16 id;
	*eepromAddr=0;
    8166:	fb 01       	movw	r30, r22
    8168:	11 82       	std	Z+1, r1	; 0x01
    816a:	10 82       	st	Z, r1

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    816c:	8f 3f       	cpi	r24, 0xFF	; 255
    816e:	ff ef       	ldi	r31, 0xFF	; 255
    8170:	9f 07       	cpc	r25, r31
    8172:	89 f1       	breq	.+98     	; 0x81d6 <EepromBlockExists+0x88>
    8174:	6a 01       	movw	r12, r20
    8176:	8b 01       	movw	r16, r22
    8178:	7c 01       	movw	r14, r24
    817a:	a1 2c       	mov	r10, r1
    817c:	b1 2c       	mov	r11, r1
    817e:	c0 e0       	ldi	r28, 0x00	; 0
    8180:	d3 e0       	ldi	r29, 0x03	; 3
    8182:	91 2c       	mov	r9, r1
		
	//scan all blocks and get the memory adress of that block and the next free block
	for(u8 i=0;i<EEPROM_MAX_BLOCKS;i++){
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
    8184:	c5 01       	movw	r24, r10
    8186:	0e 94 c5 3f 	call	0x7f8a	; 0x7f8a <ReadEeprom>
    818a:	88 2e       	mov	r8, r24
    818c:	c5 01       	movw	r24, r10
    818e:	01 96       	adiw	r24, 0x01	; 1
    8190:	0e 94 c5 3f 	call	0x7f8a	; 0x7f8a <ReadEeprom>
    8194:	28 2f       	mov	r18, r24
    8196:	30 e0       	ldi	r19, 0x00	; 0
    8198:	32 2f       	mov	r19, r18
    819a:	22 27       	eor	r18, r18
    819c:	28 0d       	add	r18, r8
    819e:	31 1d       	adc	r19, r1
		
		if(id==blockId){
    81a0:	2e 15       	cp	r18, r14
    81a2:	3f 05       	cpc	r19, r15
    81a4:	29 f4       	brne	.+10     	; 0x81b0 <EepromBlockExists+0x62>
			*eepromAddr=(i*EEPROM_BLOCK_SIZE);
    81a6:	f8 01       	movw	r30, r16
    81a8:	b1 82       	std	Z+1, r11	; 0x01
    81aa:	a0 82       	st	Z, r10
			result=EEPROM_OK;
    81ac:	d0 e0       	ldi	r29, 0x00	; 0
    81ae:	0b c0       	rjmp	.+22     	; 0x81c6 <EepromBlockExists+0x78>
		}
		
		if(id==0xffff && nextFreeBlock==0){
    81b0:	2f 3f       	cpi	r18, 0xFF	; 255
    81b2:	3f 4f       	sbci	r19, 0xFF	; 255
    81b4:	41 f4       	brne	.+16     	; 0x81c6 <EepromBlockExists+0x78>
    81b6:	91 10       	cpse	r9, r1
    81b8:	06 c0       	rjmp	.+12     	; 0x81c6 <EepromBlockExists+0x78>
			nextFreeBlock=i;
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
    81ba:	c1 14       	cp	r12, r1
    81bc:	d1 04       	cpc	r13, r1
    81be:	11 f0       	breq	.+4      	; 0x81c4 <EepromBlockExists+0x76>
    81c0:	f6 01       	movw	r30, r12
    81c2:	c0 83       	st	Z, r28
    81c4:	9c 2e       	mov	r9, r28
	*eepromAddr=0;

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
		
	//scan all blocks and get the memory adress of that block and the next free block
	for(u8 i=0;i<EEPROM_MAX_BLOCKS;i++){
    81c6:	cf 5f       	subi	r28, 0xFF	; 255
    81c8:	f0 e2       	ldi	r31, 0x20	; 32
    81ca:	af 0e       	add	r10, r31
    81cc:	b1 1c       	adc	r11, r1
    81ce:	c0 34       	cpi	r28, 0x40	; 64
    81d0:	c9 f6       	brne	.-78     	; 0x8184 <EepromBlockExists+0x36>
			nextFreeBlock=i;
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
		}
	}

	return result;
    81d2:	8d 2f       	mov	r24, r29
    81d4:	01 c0       	rjmp	.+2      	; 0x81d8 <EepromBlockExists+0x8a>
	u8 nextFreeBlock=0;
	u8 result=EEPROM_ERROR_BLOCK_NOT_FOUND;
	u16 id;
	*eepromAddr=0;

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    81d6:	81 e0       	ldi	r24, 0x01	; 1
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
		}
	}

	return result;
}
    81d8:	df 91       	pop	r29
    81da:	cf 91       	pop	r28
    81dc:	1f 91       	pop	r17
    81de:	0f 91       	pop	r16
    81e0:	ff 90       	pop	r15
    81e2:	ef 90       	pop	r14
    81e4:	df 90       	pop	r13
    81e6:	cf 90       	pop	r12
    81e8:	bf 90       	pop	r11
    81ea:	af 90       	pop	r10
    81ec:	9f 90       	pop	r9
    81ee:	8f 90       	pop	r8
    81f0:	08 95       	ret

000081f2 <EepromWriteBlock>:
 * Returns:
 *  0x00 = Success
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x02 = EEPROM_ERROR_FULL
 */
char EepromWriteBlock(struct EepromBlockStruct *block){
    81f2:	ef 92       	push	r14
    81f4:	ff 92       	push	r15
    81f6:	0f 93       	push	r16
    81f8:	1f 93       	push	r17
    81fa:	cf 93       	push	r28
    81fc:	df 93       	push	r29
    81fe:	00 d0       	rcall	.+0      	; 0x8200 <EepromWriteBlock+0xe>
    8200:	1f 92       	push	r1
    8202:	cd b7       	in	r28, 0x3d	; 61
    8204:	de b7       	in	r29, 0x3e	; 62
    8206:	8c 01       	movw	r16, r24
	u16 eepromAddr=0;
    8208:	1a 82       	std	Y+2, r1	; 0x02
    820a:	19 82       	std	Y+1, r1	; 0x01
	u8 *srcPtr=(unsigned char *)block,res,nextFreeBlock=0;
    820c:	1b 82       	std	Y+3, r1	; 0x03

	res=EepromBlockExists(block->id,&eepromAddr,&nextFreeBlock);
    820e:	ae 01       	movw	r20, r28
    8210:	4d 5f       	subi	r20, 0xFD	; 253
    8212:	5f 4f       	sbci	r21, 0xFF	; 255
    8214:	be 01       	movw	r22, r28
    8216:	6f 5f       	subi	r22, 0xFF	; 255
    8218:	7f 4f       	sbci	r23, 0xFF	; 255
    821a:	fc 01       	movw	r30, r24
    821c:	80 81       	ld	r24, Z
    821e:	91 81       	ldd	r25, Z+1	; 0x01
    8220:	0e 94 a7 40 	call	0x814e	; 0x814e <EepromBlockExists>
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;
    8224:	88 23       	and	r24, r24
    8226:	11 f0       	breq	.+4      	; 0x822c <EepromWriteBlock+0x3a>
    8228:	83 30       	cpi	r24, 0x03	; 3
    822a:	19 f5       	brne	.+70     	; 0x8272 <EepromWriteBlock+0x80>

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    822c:	89 81       	ldd	r24, Y+1	; 0x01
    822e:	9a 81       	ldd	r25, Y+2	; 0x02
    8230:	89 2b       	or	r24, r25
    8232:	49 f4       	brne	.+18     	; 0x8246 <EepromWriteBlock+0x54>
    8234:	8b 81       	ldd	r24, Y+3	; 0x03
    8236:	88 23       	and	r24, r24
    8238:	d9 f0       	breq	.+54     	; 0x8270 <EepromWriteBlock+0x7e>
	if(eepromAddr==0 && nextFreeBlock!=0) eepromAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;
    823a:	f0 e2       	ldi	r31, 0x20	; 32
    823c:	8f 9f       	mul	r24, r31
    823e:	c0 01       	movw	r24, r0
    8240:	11 24       	eor	r1, r1
    8242:	9a 83       	std	Y+2, r25	; 0x02
    8244:	89 83       	std	Y+1, r24	; 0x01
    8246:	78 01       	movw	r14, r16
    8248:	20 e2       	ldi	r18, 0x20	; 32
    824a:	e2 0e       	add	r14, r18
    824c:	f1 1c       	adc	r15, r1

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
		WriteEeprom(eepromAddr++,*srcPtr);
    824e:	f8 01       	movw	r30, r16
    8250:	61 91       	ld	r22, Z+
    8252:	8f 01       	movw	r16, r30
    8254:	89 81       	ldd	r24, Y+1	; 0x01
    8256:	9a 81       	ldd	r25, Y+2	; 0x02
    8258:	9c 01       	movw	r18, r24
    825a:	2f 5f       	subi	r18, 0xFF	; 255
    825c:	3f 4f       	sbci	r19, 0xFF	; 255
    825e:	3a 83       	std	Y+2, r19	; 0x02
    8260:	29 83       	std	Y+1, r18	; 0x01
    8262:	0e 94 bb 3f 	call	0x7f76	; 0x7f76 <WriteEeprom>
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(eepromAddr==0 && nextFreeBlock!=0) eepromAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
    8266:	0e 15       	cp	r16, r14
    8268:	1f 05       	cpc	r17, r15
    826a:	89 f7       	brne	.-30     	; 0x824e <EepromWriteBlock+0x5c>
		WriteEeprom(eepromAddr++,*srcPtr);
		srcPtr++;	
	}
	
	return 0;
    826c:	80 e0       	ldi	r24, 0x00	; 0
    826e:	01 c0       	rjmp	.+2      	; 0x8272 <EepromWriteBlock+0x80>
	u8 *srcPtr=(unsigned char *)block,res,nextFreeBlock=0;

	res=EepromBlockExists(block->id,&eepromAddr,&nextFreeBlock);
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    8270:	82 e0       	ldi	r24, 0x02	; 2
		WriteEeprom(eepromAddr++,*srcPtr);
		srcPtr++;	
	}
	
	return 0;
}
    8272:	0f 90       	pop	r0
    8274:	0f 90       	pop	r0
    8276:	0f 90       	pop	r0
    8278:	df 91       	pop	r29
    827a:	cf 91       	pop	r28
    827c:	1f 91       	pop	r17
    827e:	0f 91       	pop	r16
    8280:	ff 90       	pop	r15
    8282:	ef 90       	pop	r14
    8284:	08 95       	ret

00008286 <EepromReadBlock>:
 * Returns: 
 *  0x00 = Success
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 */
char EepromReadBlock(unsigned int blockId,struct EepromBlockStruct *block){	
    8286:	cf 92       	push	r12
    8288:	df 92       	push	r13
    828a:	ff 92       	push	r15
    828c:	0f 93       	push	r16
    828e:	1f 93       	push	r17
    8290:	cf 93       	push	r28
    8292:	df 93       	push	r29
    8294:	00 d0       	rcall	.+0      	; 0x8296 <EepromReadBlock+0x10>
    8296:	cd b7       	in	r28, 0x3d	; 61
    8298:	de b7       	in	r29, 0x3e	; 62
    829a:	8b 01       	movw	r16, r22
	u16 eepromAddr;
	u8 *blockPtr=(unsigned char *)block;

	u8 res=EepromBlockExists(blockId,&eepromAddr,NULL);
    829c:	40 e0       	ldi	r20, 0x00	; 0
    829e:	50 e0       	ldi	r21, 0x00	; 0
    82a0:	be 01       	movw	r22, r28
    82a2:	6f 5f       	subi	r22, 0xFF	; 255
    82a4:	7f 4f       	sbci	r23, 0xFF	; 255
    82a6:	0e 94 a7 40 	call	0x814e	; 0x814e <EepromBlockExists>
    82aa:	f8 2e       	mov	r15, r24
	if(res!=0) return res;
    82ac:	81 11       	cpse	r24, r1
    82ae:	13 c0       	rjmp	.+38     	; 0x82d6 <EepromReadBlock+0x50>
    82b0:	68 01       	movw	r12, r16
    82b2:	80 e2       	ldi	r24, 0x20	; 32
    82b4:	c8 0e       	add	r12, r24
    82b6:	d1 1c       	adc	r13, r1

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
		*blockPtr=ReadEeprom(eepromAddr++);
    82b8:	89 81       	ldd	r24, Y+1	; 0x01
    82ba:	9a 81       	ldd	r25, Y+2	; 0x02
    82bc:	9c 01       	movw	r18, r24
    82be:	2f 5f       	subi	r18, 0xFF	; 255
    82c0:	3f 4f       	sbci	r19, 0xFF	; 255
    82c2:	3a 83       	std	Y+2, r19	; 0x02
    82c4:	29 83       	std	Y+1, r18	; 0x01
    82c6:	0e 94 c5 3f 	call	0x7f8a	; 0x7f8a <ReadEeprom>
    82ca:	f8 01       	movw	r30, r16
    82cc:	81 93       	st	Z+, r24
    82ce:	8f 01       	movw	r16, r30
	u8 *blockPtr=(unsigned char *)block;

	u8 res=EepromBlockExists(blockId,&eepromAddr,NULL);
	if(res!=0) return res;

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
    82d0:	ec 15       	cp	r30, r12
    82d2:	fd 05       	cpc	r31, r13
    82d4:	89 f7       	brne	.-30     	; 0x82b8 <EepromReadBlock+0x32>
		*blockPtr=ReadEeprom(eepromAddr++);
		blockPtr++;	
	}
	
	return EEPROM_OK;
}
    82d6:	8f 2d       	mov	r24, r15
    82d8:	0f 90       	pop	r0
    82da:	0f 90       	pop	r0
    82dc:	df 91       	pop	r29
    82de:	cf 91       	pop	r28
    82e0:	1f 91       	pop	r17
    82e2:	0f 91       	pop	r16
    82e4:	ff 90       	pop	r15
    82e6:	df 90       	pop	r13
    82e8:	cf 90       	pop	r12
    82ea:	08 95       	ret

000082ec <GetPrngNumber>:
 * Input: Zero=return the next random value. Non-zero=Sets the seed value.
 */
u16 GetPrngNumber(u16 seed){
	static u16 prng_state;
  	
	if(seed!=0) prng_state=seed;
    82ec:	00 97       	sbiw	r24, 0x00	; 0
    82ee:	21 f0       	breq	.+8      	; 0x82f8 <GetPrngNumber+0xc>
    82f0:	90 93 cd 0c 	sts	0x0CCD, r25
    82f4:	80 93 cc 0c 	sts	0x0CCC, r24
	
	u16 bit  = ((prng_state >> 0) ^ (prng_state >> 2) ^ (prng_state >> 3) ^ (prng_state >> 5) ) & 1;
    82f8:	20 91 cc 0c 	lds	r18, 0x0CCC
    82fc:	30 91 cd 0c 	lds	r19, 0x0CCD
    8300:	a9 01       	movw	r20, r18
    8302:	56 95       	lsr	r21
    8304:	47 95       	ror	r20
    8306:	56 95       	lsr	r21
    8308:	47 95       	ror	r20
    830a:	c9 01       	movw	r24, r18
    830c:	63 e0       	ldi	r22, 0x03	; 3
    830e:	96 95       	lsr	r25
    8310:	87 95       	ror	r24
    8312:	6a 95       	dec	r22
    8314:	e1 f7       	brne	.-8      	; 0x830e <GetPrngNumber+0x22>
    8316:	84 27       	eor	r24, r20
    8318:	95 27       	eor	r25, r21
    831a:	82 27       	eor	r24, r18
    831c:	93 27       	eor	r25, r19
    831e:	a9 01       	movw	r20, r18
    8320:	75 e0       	ldi	r23, 0x05	; 5
    8322:	56 95       	lsr	r21
    8324:	47 95       	ror	r20
    8326:	7a 95       	dec	r23
    8328:	e1 f7       	brne	.-8      	; 0x8322 <GetPrngNumber+0x36>
    832a:	84 27       	eor	r24, r20
    832c:	95 27       	eor	r25, r21
	prng_state =  (prng_state >> 1) | (bit << 15);
    832e:	99 27       	eor	r25, r25
    8330:	86 95       	lsr	r24
    8332:	97 95       	ror	r25
    8334:	88 27       	eor	r24, r24
    8336:	36 95       	lsr	r19
    8338:	27 95       	ror	r18
    833a:	82 2b       	or	r24, r18
    833c:	93 2b       	or	r25, r19
    833e:	90 93 cd 0c 	sts	0x0CCD, r25
    8342:	80 93 cc 0c 	sts	0x0CCC, r24
	return prng_state;   
}
    8346:	08 95       	ret

00008348 <PatchCommand00>:
/*
 * Command 00: Set envelope speed per frame +127/-128, 0=no enveloppe
 * Param:
 */
void PatchCommand00(Track* track, char param){
	track->envelopeStep=param;
    8348:	fc 01       	movw	r30, r24
    834a:	67 87       	std	Z+15, r22	; 0x0f
    834c:	08 95       	ret

0000834e <PatchCommand01>:
 * Param:
 */
void PatchCommand01(Track* track, char param){
	(void)track; //to remove unused warning
	#if MIXER_CHAN4_TYPE == 0
		mixer.channels.type.noise.barrel=0x0101;
    834e:	e0 ed       	ldi	r30, 0xD0	; 208
    8350:	fc e0       	ldi	r31, 0x0C	; 12
    8352:	81 e0       	ldi	r24, 0x01	; 1
    8354:	91 e0       	ldi	r25, 0x01	; 1
    8356:	95 8b       	std	Z+21, r25	; 0x15
    8358:	84 8b       	std	Z+20, r24	; 0x14
		mixer.channels.type.noise.params=param;
    835a:	63 8b       	std	Z+19, r22	; 0x13
    835c:	08 95       	ret

0000835e <PatchCommand05>:
}
/*
 * Command 05: End of note/fx
 * Param:
 */
void PatchCommand05(Track* track, char param){
    835e:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags&=~(TRACK_FLAGS_PLAYING+TRACK_FLAGS_PRIORITY);	//patchPlaying=false,priority=0	
    8360:	90 81       	ld	r25, Z
    8362:	9f 75       	andi	r25, 0x5F	; 95
    8364:	90 83       	st	Z, r25
    8366:	08 95       	ret

00008368 <PatchCommand06>:

/*
 * Command 06: Note hold
 * Param:
 */
void PatchCommand06(Track* track, char param){
    8368:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags|=TRACK_FLAGS_HOLD_ENV; //patchEnvelopeHold=true;
    836a:	90 81       	ld	r25, Z
    836c:	90 64       	ori	r25, 0x40	; 64
    836e:	90 83       	st	Z, r25
    8370:	08 95       	ret

00008372 <PatchCommand07>:
 * Command 07: Set envelope volume
 * Param:
 */

void PatchCommand07(Track* track, char param){
	track->envelopeVol=param;
    8372:	fc 01       	movw	r30, r24
    8374:	66 87       	std	Z+14, r22	; 0x0e
    8376:	08 95       	ret

00008378 <PatchCommand09>:
 * Command 09: Set tremolo level
 * Param:
*/

void PatchCommand09(Track* track, char param){
	track->tremoloLevel=param;
    8378:	fc 01       	movw	r30, r24
    837a:	62 87       	std	Z+10, r22	; 0x0a
    837c:	08 95       	ret

0000837e <PatchCommand10>:
/*
 * Command 10: Set tremolo rate
 * Param:
*/
void PatchCommand10(Track* track, char param){
	track->tremoloRate=param;
    837e:	fc 01       	movw	r30, r24
    8380:	63 87       	std	Z+11, r22	; 0x0b
    8382:	08 95       	ret

00008384 <PatchCommand11>:
/*
 * Command 11: Pitch slide (linear) 
 * Param: (+/-) half steps to slide to
*/

void PatchCommand11(Track* track, char param){
    8384:	cf 93       	push	r28
    8386:	df 93       	push	r29
    8388:	ec 01       	movw	r28, r24
    838a:	46 2f       	mov	r20, r22
	//slide to note from current note
	s16 currentStep,targetStep,delta;	
	
	currentStep=pgm_read_word(&(steptable[track->note]));
    838c:	29 81       	ldd	r18, Y+1	; 0x01
    838e:	30 e0       	ldi	r19, 0x00	; 0
    8390:	f9 01       	movw	r30, r18
    8392:	ee 0f       	add	r30, r30
    8394:	ff 1f       	adc	r31, r31
    8396:	e8 5f       	subi	r30, 0xF8	; 248
    8398:	f2 47       	sbci	r31, 0x72	; 114
    839a:	65 91       	lpm	r22, Z+
    839c:	74 91       	lpm	r23, Z
	targetStep=pgm_read_word(&(steptable[track->note+param]));	
    839e:	f9 01       	movw	r30, r18
    83a0:	e4 0f       	add	r30, r20
    83a2:	f1 1d       	adc	r31, r1
    83a4:	47 fd       	sbrc	r20, 7
    83a6:	fa 95       	dec	r31
    83a8:	ee 0f       	add	r30, r30
    83aa:	ff 1f       	adc	r31, r31
    83ac:	e8 5f       	subi	r30, 0xF8	; 248
    83ae:	f2 47       	sbci	r31, 0x72	; 114
    83b0:	85 91       	lpm	r24, Z+
    83b2:	94 91       	lpm	r25, Z
	delta=((targetStep-currentStep)/track->slideSpeed);
    83b4:	86 1b       	sub	r24, r22
    83b6:	97 0b       	sbc	r25, r23
    83b8:	68 85       	ldd	r22, Y+8	; 0x08
    83ba:	70 e0       	ldi	r23, 0x00	; 0
    83bc:	0e 94 9f 69 	call	0xd33e	; 0xd33e <__divmodhi4>
	if(delta==0)delta++;
    83c0:	61 15       	cp	r22, r1
    83c2:	71 05       	cpc	r23, r1
    83c4:	11 f4       	brne	.+4      	; 0x83ca <PatchCommand11+0x46>
    83c6:	61 e0       	ldi	r22, 0x01	; 1
    83c8:	70 e0       	ldi	r23, 0x00	; 0

	mixer.channels.all[track->channel].step+=delta;
    83ca:	ea 81       	ldd	r30, Y+2	; 0x02
    83cc:	86 e0       	ldi	r24, 0x06	; 6
    83ce:	e8 9f       	mul	r30, r24
    83d0:	f0 01       	movw	r30, r0
    83d2:	11 24       	eor	r1, r1
    83d4:	e0 53       	subi	r30, 0x30	; 48
    83d6:	f3 4f       	sbci	r31, 0xF3	; 243
    83d8:	81 81       	ldd	r24, Z+1	; 0x01
    83da:	92 81       	ldd	r25, Z+2	; 0x02
    83dc:	86 0f       	add	r24, r22
    83de:	97 1f       	adc	r25, r23
    83e0:	92 83       	std	Z+2, r25	; 0x02
    83e2:	81 83       	std	Z+1, r24	; 0x01
	
	track->slideStep=delta;
    83e4:	7e 83       	std	Y+6, r23	; 0x06
    83e6:	6d 83       	std	Y+5, r22	; 0x05
	track->flags|=TRACK_FLAGS_SLIDING;
    83e8:	88 81       	ld	r24, Y
    83ea:	88 60       	ori	r24, 0x08	; 8
    83ec:	88 83       	st	Y, r24
	track->slideNote=track->note+param;
    83ee:	89 81       	ldd	r24, Y+1	; 0x01
    83f0:	48 0f       	add	r20, r24
    83f2:	4f 83       	std	Y+7, r20	; 0x07
}
    83f4:	df 91       	pop	r29
    83f6:	cf 91       	pop	r28
    83f8:	08 95       	ret

000083fa <PatchCommand12>:
/*
 * Command 12: Pitch slide speed 
 * Param: slide speed (fixed 4:4)
 */
void PatchCommand12(Track* track, char param){
	track->slideSpeed=param;
    83fa:	fc 01       	movw	r30, r24
    83fc:	60 87       	std	Z+8, r22	; 0x08
    83fe:	08 95       	ret

00008400 <PatchCommand13>:
 *  Command 13: Loop start
 * Description: Defines the start of a loop. Works in conjunction with command 14 (PC_LOOP_END).
 *		 Param: loop count
 */
void PatchCommand13(Track* track, char param){
	track->loopCount=(u8)param;
    8400:	fc 01       	movw	r30, r24
    8402:	64 83       	std	Z+4, r22	; 0x04
    8404:	08 95       	ret

00008406 <PatchCommand02>:
/*
 * Command 02: Set wave
 * Param:
 */
void PatchCommand02(Track* track, char param){
	SetMixerWave(track->channel,param);
    8406:	fc 01       	movw	r30, r24
    8408:	82 81       	ldd	r24, Z+2	; 0x02
    840a:	0c 94 1e 46 	jmp	0x8c3c	; 0x8c3c <SetMixerWave>

0000840e <PatchCommand03>:
}
/*
 * Command 03: Note up * param
 * Param:
 */
void PatchCommand03(Track* track, char param){
    840e:	fc 01       	movw	r30, r24
	track->note+=param;
    8410:	91 81       	ldd	r25, Z+1	; 0x01
    8412:	69 0f       	add	r22, r25
    8414:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(track->channel,track->note);
    8416:	82 81       	ldd	r24, Z+2	; 0x02
    8418:	0c 94 07 46 	jmp	0x8c0e	; 0x8c0e <SetMixerNote>

0000841c <PatchCommand04>:
}
/*
 * Command 04: Note down * param
 * Param:
 */
void PatchCommand04(Track* track, char param){
    841c:	fc 01       	movw	r30, r24
	track->note-=param;
    841e:	91 81       	ldd	r25, Z+1	; 0x01
    8420:	96 1b       	sub	r25, r22
    8422:	69 2f       	mov	r22, r25
    8424:	91 83       	std	Z+1, r25	; 0x01
	SetMixerNote(track->channel,track->note);
    8426:	82 81       	ldd	r24, Z+2	; 0x02
    8428:	0c 94 07 46 	jmp	0x8c0e	; 0x8c0e <SetMixerNote>

0000842c <PatchCommand08>:
/*
 * Command 08: Set Note/Pitch
 * Param:
 */

void PatchCommand08(Track* track, char param){
    842c:	1f 93       	push	r17
    842e:	cf 93       	push	r28
    8430:	df 93       	push	r29
    8432:	ec 01       	movw	r28, r24
    8434:	16 2f       	mov	r17, r22
	SetMixerNote(track->channel,param);
    8436:	8a 81       	ldd	r24, Y+2	; 0x02
    8438:	0e 94 07 46 	call	0x8c0e	; 0x8c0e <SetMixerNote>
	track->note=param;
    843c:	19 83       	std	Y+1, r17	; 0x01
	track->flags &= ~(TRACK_FLAGS_SLIDING);	
    843e:	88 81       	ld	r24, Y
    8440:	87 7f       	andi	r24, 0xF7	; 247
    8442:	88 83       	st	Y, r24
}
    8444:	df 91       	pop	r29
    8446:	cf 91       	pop	r28
    8448:	1f 91       	pop	r17
    844a:	08 95       	ret

0000844c <PatchCommand14>:
 *					1,PC_NOTE_DOWN,3,
 *					0,PC_LOOP_END,2,
 *					0,PATCH_END  
 *				};
 */
void PatchCommand14(Track* track, char param){
    844c:	dc 01       	movw	r26, r24
	if(track->loopCount>0){
    844e:	14 96       	adiw	r26, 0x04	; 4
    8450:	8c 91       	ld	r24, X
    8452:	14 97       	sbiw	r26, 0x04	; 4
    8454:	88 23       	and	r24, r24
    8456:	19 f1       	breq	.+70     	; 0x849e <PatchCommand14+0x52>
    8458:	55 96       	adiw	r26, 0x15	; 21
    845a:	2d 91       	ld	r18, X+
    845c:	3c 91       	ld	r19, X
    845e:	56 97       	sbiw	r26, 0x16	; 22
		//track->patchCommandStreamPos=track->loopStart;
		if(param!=0){
    8460:	66 23       	and	r22, r22
    8462:	79 f0       	breq	.+30     	; 0x8482 <PatchCommand14+0x36>
			track->patchCommandStreamPos-=((param+1)*3);
    8464:	77 27       	eor	r23, r23
    8466:	67 fd       	sbrc	r22, 7
    8468:	70 95       	com	r23
    846a:	6f 5f       	subi	r22, 0xFF	; 255
    846c:	7f 4f       	sbci	r23, 0xFF	; 255
    846e:	ab 01       	movw	r20, r22
    8470:	44 0f       	add	r20, r20
    8472:	55 1f       	adc	r21, r21
    8474:	64 0f       	add	r22, r20
    8476:	75 1f       	adc	r23, r21
    8478:	26 1b       	sub	r18, r22
    847a:	37 0b       	sbc	r19, r23
    847c:	09 c0       	rjmp	.+18     	; 0x8490 <PatchCommand14+0x44>
			while(1){
				track->patchCommandStreamPos-=3;
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    847e:	ef 3f       	cpi	r30, 0xFF	; 255
    8480:	39 f0       	breq	.+14     	; 0x8490 <PatchCommand14+0x44>
		if(param!=0){
			track->patchCommandStreamPos-=((param+1)*3);
		}else{
			u8 command;
			while(1){
				track->patchCommandStreamPos-=3;
    8482:	23 50       	subi	r18, 0x03	; 3
    8484:	31 09       	sbc	r19, r1
    8486:	f9 01       	movw	r30, r18
    8488:	32 97       	sbiw	r30, 0x02	; 2
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
    848a:	e4 91       	lpm	r30, Z
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    848c:	ed 30       	cpi	r30, 0x0D	; 13
    848e:	b9 f7       	brne	.-18     	; 0x847e <PatchCommand14+0x32>
    8490:	56 96       	adiw	r26, 0x16	; 22
    8492:	3c 93       	st	X, r19
    8494:	2e 93       	st	-X, r18
    8496:	55 97       	sbiw	r26, 0x15	; 21
			}
		}
		track->loopCount--;
    8498:	81 50       	subi	r24, 0x01	; 1
    849a:	14 96       	adiw	r26, 0x04	; 4
    849c:	8c 93       	st	X, r24
    849e:	08 95       	ret

000084a0 <InitMusicPlayer>:

const Patch *patchPointers;

void InitMusicPlayer(const Patch *patchPointersParam){

	patchPointers=patchPointersParam;
    84a0:	90 93 72 0d 	sts	0x0D72, r25
    84a4:	80 93 71 0d 	sts	0x0D71, r24

	masterVolume=DEFAULT_MASTER_VOL;
    84a8:	8f e6       	ldi	r24, 0x6F	; 111
    84aa:	80 93 74 0d 	sts	0x0D74, r24
#if MIDI_IN == ENABLED
	InitUartRxBuffer();
	lastMidiInStatus=0;
#endif

	playSong=false;
    84ae:	10 92 ce 0c 	sts	0x0CCE, r1
    84b2:	ec e0       	ldi	r30, 0x0C	; 12
    84b4:	fd e0       	ldi	r31, 0x0D	; 13

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    84b6:	80 e0       	ldi	r24, 0x00	; 0
		tracks[t].channel=t;
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    84b8:	90 e1       	ldi	r25, 0x10	; 16
		tracks[t].noteVol=0;
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    84ba:	3f ef       	ldi	r19, 0xFF	; 255
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
    84bc:	28 e1       	ldi	r18, 0x18	; 24
    84be:	df 01       	movw	r26, r30
    84c0:	1e 97       	sbiw	r26, 0x0e	; 14

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].channel=t;
    84c2:	8c 93       	st	X, r24
    84c4:	12 97       	sbiw	r26, 0x02	; 2
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    84c6:	9c 93       	st	X, r25
    84c8:	1d 96       	adiw	r26, 0x0d	; 13
		tracks[t].noteVol=0;
    84ca:	1c 92       	st	X, r1
    84cc:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    84ce:	3c 93       	st	X, r19
		tracks[t].patchNo=DEFAULT_PATCH;
    84d0:	10 82       	st	Z, r1
    84d2:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].tremoloRate=24; //~6hz
    84d4:	2c 93       	st	X, r18
    84d6:	13 97       	sbiw	r26, 0x03	; 3
		tracks[t].slideSpeed=0x10;
    84d8:	9c 93       	st	X, r25
#endif

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    84da:	8f 5f       	subi	r24, 0xFF	; 255
    84dc:	77 96       	adiw	r30, 0x17	; 23
    84de:	85 30       	cpi	r24, 0x05	; 5
    84e0:	71 f7       	brne	.-36     	; 0x84be <InitMusicPlayer+0x1e>
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
		tracks[t].slideSpeed=0x10;
	}

}
    84e2:	08 95       	ret

000084e4 <StartSong>:

#if MUSIC_ENGINE == MIDI

	void StartSong(const char *song){
    84e4:	ec ef       	ldi	r30, 0xFC	; 252
    84e6:	fc e0       	ldi	r31, 0x0C	; 12
		for(unsigned char t=0;t<CHANNELS;t++){
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    84e8:	3f ef       	ldi	r19, 0xFF	; 255

#if MUSIC_ENGINE == MIDI

	void StartSong(const char *song){
		for(unsigned char t=0;t<CHANNELS;t++){
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    84ea:	20 81       	ld	r18, Z
    84ec:	2f 77       	andi	r18, 0x7F	; 127
    84ee:	20 83       	st	Z, r18
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    84f0:	33 83       	std	Z+3, r19	; 0x03
    84f2:	77 96       	adiw	r30, 0x17	; 23
}

#if MUSIC_ENGINE == MIDI

	void StartSong(const char *song){
		for(unsigned char t=0;t<CHANNELS;t++){
    84f4:	2d e0       	ldi	r18, 0x0D	; 13
    84f6:	ef 36       	cpi	r30, 0x6F	; 111
    84f8:	f2 07       	cpc	r31, r18
    84fa:	b9 f7       	brne	.-18     	; 0x84ea <StartSong+0x6>
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
		}

		songPos=song+1; //skip first delta-time
    84fc:	01 96       	adiw	r24, 0x01	; 1
    84fe:	90 93 79 0d 	sts	0x0D79, r25
    8502:	80 93 78 0d 	sts	0x0D78, r24
		songStart=song+1;//skip first delta-time
    8506:	90 93 fb 0c 	sts	0x0CFB, r25
    850a:	80 93 fa 0c 	sts	0x0CFA, r24
		loopStart=song+1;
    850e:	90 93 7b 0d 	sts	0x0D7B, r25
    8512:	80 93 7a 0d 	sts	0x0D7A, r24
		nextDeltaTime=0;
    8516:	10 92 76 0d 	sts	0x0D76, r1
    851a:	10 92 75 0d 	sts	0x0D75, r1
		currDeltaTime=0;
    851e:	10 92 70 0d 	sts	0x0D70, r1
    8522:	10 92 6f 0d 	sts	0x0D6F, r1
		songSpeed=0;
    8526:	10 92 77 0d 	sts	0x0D77, r1

		lastStatus=0;
    852a:	10 92 73 0d 	sts	0x0D73, r1
		playSong=true;
    852e:	81 e0       	ldi	r24, 0x01	; 1
    8530:	80 93 ce 0c 	sts	0x0CCE, r24
    8534:	08 95       	ret

00008536 <StopSong>:


void StopSong(){

	for(u8 i=0;i<CHANNELS;i++){
		tracks[i].envelopeStep=-6;
    8536:	ec ef       	ldi	r30, 0xFC	; 252
    8538:	fc e0       	ldi	r31, 0x0C	; 12
    853a:	8a ef       	ldi	r24, 0xFA	; 250
    853c:	87 87       	std	Z+15, r24	; 0x0f
    853e:	86 a3       	std	Z+38, r24	; 0x26
    8540:	80 93 39 0d 	sts	0x0D39, r24
    8544:	80 93 50 0d 	sts	0x0D50, r24
    8548:	80 93 67 0d 	sts	0x0D67, r24
	}

	playSong=false;
    854c:	10 92 ce 0c 	sts	0x0CCE, r1
    8550:	08 95       	ret

00008552 <ReadVarLen>:
}



unsigned int ReadVarLen(const char **songPos)
{
    8552:	dc 01       	movw	r26, r24
    unsigned int value;
    unsigned char c;


    if ( (value = pgm_read_byte((*songPos)++)) & 0x80 )
    8554:	ed 91       	ld	r30, X+
    8556:	fc 91       	ld	r31, X
    8558:	11 97       	sbiw	r26, 0x01	; 1
    855a:	9f 01       	movw	r18, r30
    855c:	2f 5f       	subi	r18, 0xFF	; 255
    855e:	3f 4f       	sbci	r19, 0xFF	; 255
    8560:	11 96       	adiw	r26, 0x01	; 1
    8562:	3c 93       	st	X, r19
    8564:	2e 93       	st	-X, r18
    8566:	e4 91       	lpm	r30, Z
    8568:	e7 fd       	sbrc	r30, 7
    856a:	03 c0       	rjmp	.+6      	; 0x8572 <ReadVarLen+0x20>
    856c:	8e 2f       	mov	r24, r30
    856e:	90 e0       	ldi	r25, 0x00	; 0
    8570:	08 95       	ret
    {
       value &= 0x7F;
    8572:	ef 77       	andi	r30, 0x7F	; 127
    8574:	8e 2f       	mov	r24, r30
    8576:	90 e0       	ldi	r25, 0x00	; 0
       do
       {
         value = (value << 7) + ((c = pgm_read_byte((*songPos)++)) & 0x7F);
    8578:	96 95       	lsr	r25
    857a:	98 2f       	mov	r25, r24
    857c:	88 27       	eor	r24, r24
    857e:	97 95       	ror	r25
    8580:	87 95       	ror	r24
    8582:	2f 5f       	subi	r18, 0xFF	; 255
    8584:	3f 4f       	sbci	r19, 0xFF	; 255
    8586:	f9 01       	movw	r30, r18
    8588:	31 97       	sbiw	r30, 0x01	; 1
    858a:	e4 91       	lpm	r30, Z
    858c:	4e 2f       	mov	r20, r30
    858e:	4f 77       	andi	r20, 0x7F	; 127
    8590:	84 0f       	add	r24, r20
    8592:	91 1d       	adc	r25, r1
       } while (c & 0x80);
    8594:	e7 fd       	sbrc	r30, 7
    8596:	f0 cf       	rjmp	.-32     	; 0x8578 <ReadVarLen+0x26>
    8598:	2d 93       	st	X+, r18
    859a:	3c 93       	st	X, r19
    }


    return value;
}
    859c:	08 95       	ret

0000859e <TriggerCommon>:




void TriggerCommon(Track* track,u8 patch,u8 volume,u8 note){
    859e:	ef 92       	push	r14
    85a0:	ff 92       	push	r15
    85a2:	0f 93       	push	r16
    85a4:	1f 93       	push	r17
    85a6:	cf 93       	push	r28
    85a8:	df 93       	push	r29
    85aa:	1f 92       	push	r1
    85ac:	cd b7       	in	r28, 0x3d	; 61
    85ae:	de b7       	in	r29, 0x3e	; 62
    85b0:	7c 01       	movw	r14, r24
    85b2:	16 2f       	mov	r17, r22
		
	bool isFx = (track->flags&TRACK_FLAGS_PRIORITY);
    85b4:	fc 01       	movw	r30, r24
    85b6:	80 81       	ld	r24, Z
    85b8:	08 2f       	mov	r16, r24
    85ba:	00 1f       	adc	r16, r16
    85bc:	00 27       	eor	r16, r16
    85be:	00 1f       	adc	r16, r16

	track->envelopeStep=0; 
    85c0:	17 86       	std	Z+15, r1	; 0x0f
	track->envelopeVol=0xff; 
    85c2:	9f ef       	ldi	r25, 0xFF	; 255
    85c4:	96 87       	std	Z+14, r25	; 0x0e
	track->noteVol=volume;
    85c6:	45 87       	std	Z+13, r20	; 0x0d
	track->patchPlayingTime=0;
    85c8:	14 8a       	std	Z+20, r1	; 0x14
	track->flags&=(~(TRACK_FLAGS_HOLD_ENV|TRACK_FLAGS_SLIDING));
    85ca:	87 7b       	andi	r24, 0xB7	; 183
    85cc:	80 83       	st	Z, r24
	track->tremoloLevel=0;
    85ce:	12 86       	std	Z+10, r1	; 0x0a
	track->tremoloPos=0;
    85d0:	11 86       	std	Z+9, r1	; 0x09
	track->note=note;
    85d2:	21 83       	std	Z+1, r18	; 0x01
	track->loopCount=0;
    85d4:	14 82       	std	Z+4, r1	; 0x04

#if MUSIC_ENGINE == MIDI
	track->expressionVol=DEFAULT_EXPRESSION_VOL;
    85d6:	93 83       	std	Z+3, r25	; 0x03
#endif

	#if SOUND_MIXER == MIXER_TYPE_INLINE

		if(track->channel==3){
    85d8:	82 81       	ldd	r24, Z+2	; 0x02
    85da:	83 30       	cpi	r24, 0x03	; 3
    85dc:	69 f4       	brne	.+26     	; 0x85f8 <TriggerCommon+0x5a>
			//noise channel		
			if(!isFx) patch=note;			
    85de:	01 11       	cpse	r16, r1
    85e0:	01 c0       	rjmp	.+2      	; 0x85e4 <TriggerCommon+0x46>
    85e2:	12 2f       	mov	r17, r18
			mixer.channels.type.noise.barrel=0x0101;				
    85e4:	81 e0       	ldi	r24, 0x01	; 1
    85e6:	91 e0       	ldi	r25, 0x01	; 1
    85e8:	90 93 e5 0c 	sts	0x0CE5, r25
    85ec:	80 93 e4 0c 	sts	0x0CE4, r24
			mixer.channels.type.noise.params=1; //default (15bits,no divider)
    85f0:	81 e0       	ldi	r24, 0x01	; 1
    85f2:	80 93 e3 0c 	sts	0x0CE3, r24
    85f6:	39 c0       	rjmp	.+114    	; 0x866a <TriggerCommon+0xcc>

		#if SOUND_CHANNEL_5_ENABLE==1		

		}else if(track->channel==4){
    85f8:	84 30       	cpi	r24, 0x04	; 4
    85fa:	69 f5       	brne	.+90     	; 0x8656 <TriggerCommon+0xb8>
				//PCM channel					
				mixer.channels.type.pcm.positionFrac=0;
    85fc:	10 92 eb 0c 	sts	0x0CEB, r1
				const char *pos=(const char*)pgm_read_word(&(patchPointers[patch].pcmData));
    8600:	80 91 71 0d 	lds	r24, 0x0D71
    8604:	90 91 72 0d 	lds	r25, 0x0D72
    8608:	f9 e0       	ldi	r31, 0x09	; 9
    860a:	6f 9f       	mul	r22, r31
    860c:	80 0d       	add	r24, r0
    860e:	91 1d       	adc	r25, r1
    8610:	11 24       	eor	r1, r1
    8612:	fc 01       	movw	r30, r24
    8614:	31 96       	adiw	r30, 0x01	; 1
    8616:	a5 91       	lpm	r26, Z+
    8618:	b4 91       	lpm	r27, Z
				mixer.channels.type.pcm.position=pos;				
    861a:	b0 93 ed 0c 	sts	0x0CED, r27
    861e:	a0 93 ec 0c 	sts	0x0CEC, r26
				mixer.pcmLoopLenght=pgm_read_word(&(patchPointers[patch].loopEnd))-pgm_read_word(&(patchPointers[patch].loopStart));
    8622:	ac 01       	movw	r20, r24
    8624:	49 5f       	subi	r20, 0xF9	; 249
    8626:	5f 4f       	sbci	r21, 0xFF	; 255
    8628:	fa 01       	movw	r30, r20
    862a:	65 91       	lpm	r22, Z+
    862c:	74 91       	lpm	r23, Z
    862e:	05 96       	adiw	r24, 0x05	; 5
    8630:	fc 01       	movw	r30, r24
    8632:	85 91       	lpm	r24, Z+
    8634:	94 91       	lpm	r25, Z
    8636:	68 1b       	sub	r22, r24
    8638:	79 0b       	sbc	r23, r25
    863a:	70 93 ef 0c 	sts	0x0CEF, r23
    863e:	60 93 ee 0c 	sts	0x0CEE, r22
				mixer.pcmLoopEnd=pos+pgm_read_word(&(patchPointers[patch].loopEnd));
    8642:	fa 01       	movw	r30, r20
    8644:	85 91       	lpm	r24, Z+
    8646:	94 91       	lpm	r25, Z
    8648:	a8 0f       	add	r26, r24
    864a:	b9 1f       	adc	r27, r25
    864c:	b0 93 f1 0c 	sts	0x0CF1, r27
    8650:	a0 93 f0 0c 	sts	0x0CF0, r26
    8654:	05 c0       	rjmp	.+10     	; 0x8660 <TriggerCommon+0xc2>
				SetMixerNote(track->channel,note);
		#endif	

		}else{					
			//wave channels					
			SetMixerWave(track->channel,0);//default wave
    8656:	60 e0       	ldi	r22, 0x00	; 0
    8658:	29 83       	std	Y+1, r18	; 0x01
    865a:	0e 94 1e 46 	call	0x8c3c	; 0x8c3c <SetMixerWave>
			SetMixerNote(track->channel,note);
    865e:	29 81       	ldd	r18, Y+1	; 0x01
    8660:	62 2f       	mov	r22, r18
    8662:	f7 01       	movw	r30, r14
    8664:	82 81       	ldd	r24, Z+2	; 0x02
    8666:	0e 94 07 46 	call	0x8c0e	; 0x8c0e <SetMixerNote>
		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
		track->fxPatchNo=patch;
    866a:	f7 01       	movw	r30, r14

		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
    866c:	00 23       	and	r16, r16
    866e:	11 f0       	breq	.+4      	; 0x8674 <TriggerCommon+0xd6>
		track->fxPatchNo=patch;
    8670:	11 8b       	std	Z+17, r17	; 0x11
    8672:	01 c0       	rjmp	.+2      	; 0x8676 <TriggerCommon+0xd8>
	}else{
		track->patchNo=patch;	
    8674:	10 8b       	std	Z+16, r17	; 0x10
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
    8676:	e0 91 71 0d 	lds	r30, 0x0D71
    867a:	f0 91 72 0d 	lds	r31, 0x0D72
    867e:	39 e0       	ldi	r19, 0x09	; 9
    8680:	13 9f       	mul	r17, r19
    8682:	e0 0d       	add	r30, r0
    8684:	f1 1d       	adc	r31, r1
    8686:	11 24       	eor	r1, r1
    8688:	33 96       	adiw	r30, 0x03	; 3
    868a:	85 91       	lpm	r24, Z+
    868c:	94 91       	lpm	r25, Z
	if(pos==NULL){
		track->patchCommandStreamPos=NULL;
    868e:	f7 01       	movw	r30, r14
	}else{
		track->patchNo=patch;	
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
	if(pos==NULL){
    8690:	00 97       	sbiw	r24, 0x00	; 0
    8692:	19 f4       	brne	.+6      	; 0x869a <TriggerCommon+0xfc>
		track->patchCommandStreamPos=NULL;
    8694:	16 8a       	std	Z+22, r1	; 0x16
    8696:	15 8a       	std	Z+21, r1	; 0x15
    8698:	08 c0       	rjmp	.+16     	; 0x86aa <TriggerCommon+0x10c>
	}else{
		track->patchCurrDeltaTime=0;
    869a:	13 8a       	std	Z+19, r1	; 0x13
		track->patchNextDeltaTime=pgm_read_byte(pos++);
    869c:	fc 01       	movw	r30, r24
    869e:	24 91       	lpm	r18, Z
    86a0:	f7 01       	movw	r30, r14
    86a2:	22 8b       	std	Z+18, r18	; 0x12
    86a4:	01 96       	adiw	r24, 0x01	; 1
		track->patchCommandStreamPos=pos;
    86a6:	96 8b       	std	Z+22, r25	; 0x16
    86a8:	85 8b       	std	Z+21, r24	; 0x15
	}

}
    86aa:	0f 90       	pop	r0
    86ac:	df 91       	pop	r29
    86ae:	cf 91       	pop	r28
    86b0:	1f 91       	pop	r17
    86b2:	0f 91       	pop	r16
    86b4:	ff 90       	pop	r15
    86b6:	ef 90       	pop	r14
    86b8:	08 95       	ret

000086ba <TriggerFx>:

/* Trigger a sound effect.
 * Method allocates the channel based on priority.
 * Retrig: if this fx if already playing on a track, reuse same track.
 */
void TriggerFx(unsigned char patch,unsigned char volume,bool retrig){
    86ba:	cf 93       	push	r28
    86bc:	df 93       	push	r29
	unsigned char channel;
	
	unsigned char type=(unsigned char)pgm_read_byte(&(patchPointers[patch].type));
    86be:	e0 91 71 0d 	lds	r30, 0x0D71
    86c2:	f0 91 72 0d 	lds	r31, 0x0D72
    86c6:	99 e0       	ldi	r25, 0x09	; 9
    86c8:	89 9f       	mul	r24, r25
    86ca:	e0 0d       	add	r30, r0
    86cc:	f1 1d       	adc	r31, r1
    86ce:	11 24       	eor	r1, r1
    86d0:	e4 91       	lpm	r30, Z

	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
    86d2:	e1 30       	cpi	r30, 0x01	; 1
    86d4:	e9 f0       	breq	.+58     	; 0x8710 <TriggerFx+0x56>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
    86d6:	e2 30       	cpi	r30, 0x02	; 2
    86d8:	e9 f0       	breq	.+58     	; 0x8714 <TriggerFx+0x5a>
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
    86da:	20 91 13 0d 	lds	r18, 0x0D13
    86de:	27 ff       	sbrs	r18, 7
    86e0:	1d c0       	rjmp	.+58     	; 0x871c <TriggerFx+0x62>
    86e2:	20 91 24 0d 	lds	r18, 0x0D24
    86e6:	28 13       	cpse	r18, r24
    86e8:	02 c0       	rjmp	.+4      	; 0x86ee <TriggerFx+0x34>
    86ea:	41 11       	cpse	r20, r1
    86ec:	17 c0       	rjmp	.+46     	; 0x871c <TriggerFx+0x62>
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
    86ee:	20 91 2a 0d 	lds	r18, 0x0D2A
    86f2:	27 ff       	sbrs	r18, 7
    86f4:	11 c0       	rjmp	.+34     	; 0x8718 <TriggerFx+0x5e>
    86f6:	20 91 3b 0d 	lds	r18, 0x0D3B
    86fa:	28 13       	cpse	r18, r24
    86fc:	02 c0       	rjmp	.+4      	; 0x8702 <TriggerFx+0x48>
    86fe:	41 11       	cpse	r20, r1
    8700:	0b c0       	rjmp	.+22     	; 0x8718 <TriggerFx+0x5e>
		channel=2;
	}else{
		//both channels have fx playing, use the oldest one
		if(tracks[1].patchPlayingTime>tracks[2].patchPlayingTime){
    8702:	20 91 27 0d 	lds	r18, 0x0D27
    8706:	90 91 3e 0d 	lds	r25, 0x0D3E
    870a:	92 17       	cp	r25, r18
    870c:	28 f4       	brcc	.+10     	; 0x8718 <TriggerFx+0x5e>
    870e:	06 c0       	rjmp	.+12     	; 0x871c <TriggerFx+0x62>
	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
		//noise or PCM channel fx		
		channel=3;
    8710:	c3 e0       	ldi	r28, 0x03	; 3
    8712:	05 c0       	rjmp	.+10     	; 0x871e <TriggerFx+0x64>
	}else if(type==2){
		channel=4;
    8714:	c4 e0       	ldi	r28, 0x04	; 4
    8716:	03 c0       	rjmp	.+6      	; 0x871e <TriggerFx+0x64>
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
		channel=2;
    8718:	c2 e0       	ldi	r28, 0x02	; 2
    871a:	01 c0       	rjmp	.+2      	; 0x871e <TriggerFx+0x64>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
    871c:	c1 e0       	ldi	r28, 0x01	; 1
			channel=2;
		}
	}				

	Track* track=&tracks[channel];
	track->flags=TRACK_FLAGS_PRIORITY; //priority=1;
    871e:	97 e1       	ldi	r25, 0x17	; 23
    8720:	c9 9f       	mul	r28, r25
    8722:	e0 01       	movw	r28, r0
    8724:	11 24       	eor	r1, r1
    8726:	c4 50       	subi	r28, 0x04	; 4
    8728:	d3 4f       	sbci	r29, 0xF3	; 243
    872a:	90 e8       	ldi	r25, 0x80	; 128
    872c:	98 83       	st	Y, r25
	track->patchCommandStreamPos = NULL;
    872e:	1e 8a       	std	Y+22, r1	; 0x16
    8730:	1d 8a       	std	Y+21, r1	; 0x15
	TriggerCommon(track,patch,volume,80);
    8732:	20 e5       	ldi	r18, 0x50	; 80
    8734:	46 2f       	mov	r20, r22
    8736:	68 2f       	mov	r22, r24
    8738:	ce 01       	movw	r24, r28
    873a:	0e 94 cf 42 	call	0x859e	; 0x859e <TriggerCommon>
	track->flags|=TRACK_FLAGS_PLAYING;
    873e:	88 81       	ld	r24, Y
    8740:	80 62       	ori	r24, 0x20	; 32
    8742:	88 83       	st	Y, r24
}
    8744:	df 91       	pop	r29
    8746:	cf 91       	pop	r28
    8748:	08 95       	ret

0000874a <TriggerNote>:


void TriggerNote(unsigned char channel,unsigned char patch,unsigned char note,unsigned char volume){
    874a:	cf 93       	push	r28
    874c:	df 93       	push	r29
	Track* track=&tracks[channel];

	//allow only other music notes 
	if((track->flags&TRACK_FLAGS_PLAYING)==0 || (track->flags&TRACK_FLAGS_PRIORITY)==0){
    874e:	a8 2f       	mov	r26, r24
    8750:	b0 e0       	ldi	r27, 0x00	; 0
    8752:	97 e1       	ldi	r25, 0x17	; 23
    8754:	89 9f       	mul	r24, r25
    8756:	f0 01       	movw	r30, r0
    8758:	11 24       	eor	r1, r1
    875a:	e4 50       	subi	r30, 0x04	; 4
    875c:	f3 4f       	sbci	r31, 0xF3	; 243
    875e:	80 81       	ld	r24, Z
    8760:	85 ff       	sbrs	r24, 5
    8762:	02 c0       	rjmp	.+4      	; 0x8768 <TriggerNote+0x1e>
    8764:	87 fd       	sbrc	r24, 7
    8766:	2e c0       	rjmp	.+92     	; 0x87c4 <TriggerNote+0x7a>
			
		if(volume==0){ //note-off received
    8768:	21 11       	cpse	r18, r1
    876a:	18 c0       	rjmp	.+48     	; 0x879c <TriggerNote+0x52>

			
			//cut note if there's no envelope & no note hold
			if(track->envelopeStep==0 && !(track->flags&TRACK_FLAGS_HOLD_ENV)){
    876c:	97 e1       	ldi	r25, 0x17	; 23
    876e:	9a 9f       	mul	r25, r26
    8770:	f0 01       	movw	r30, r0
    8772:	9b 9f       	mul	r25, r27
    8774:	f0 0d       	add	r31, r0
    8776:	11 24       	eor	r1, r1
    8778:	e4 50       	subi	r30, 0x04	; 4
    877a:	f3 4f       	sbci	r31, 0xF3	; 243
    877c:	97 85       	ldd	r25, Z+15	; 0x0f
    877e:	91 11       	cpse	r25, r1
    8780:	02 c0       	rjmp	.+4      	; 0x8786 <TriggerNote+0x3c>
    8782:	86 ff       	sbrs	r24, 6
				track->noteVol=0;
    8784:	15 86       	std	Z+13, r1	; 0x0d
			}

			track->flags&=(~TRACK_FLAGS_HOLD_ENV);//patchEnvelopeHold=false;
    8786:	97 e1       	ldi	r25, 0x17	; 23
    8788:	9a 9f       	mul	r25, r26
    878a:	f0 01       	movw	r30, r0
    878c:	9b 9f       	mul	r25, r27
    878e:	f0 0d       	add	r31, r0
    8790:	11 24       	eor	r1, r1
    8792:	e4 50       	subi	r30, 0x04	; 4
    8794:	f3 4f       	sbci	r31, 0xF3	; 243
    8796:	8f 7b       	andi	r24, 0xBF	; 191
    8798:	80 83       	st	Z, r24
    879a:	14 c0       	rjmp	.+40     	; 0x87c4 <TriggerNote+0x7a>
    879c:	82 2f       	mov	r24, r18
    879e:	24 2f       	mov	r18, r20
		}else{
		
			track->flags=0;//&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    87a0:	97 e1       	ldi	r25, 0x17	; 23
    87a2:	9a 9f       	mul	r25, r26
    87a4:	e0 01       	movw	r28, r0
    87a6:	9b 9f       	mul	r25, r27
    87a8:	d0 0d       	add	r29, r0
    87aa:	11 24       	eor	r1, r1
    87ac:	c4 50       	subi	r28, 0x04	; 4
    87ae:	d3 4f       	sbci	r29, 0xF3	; 243
    87b0:	18 82       	st	Y, r1
			track->patchCommandStreamPos = NULL;
    87b2:	1e 8a       	std	Y+22, r1	; 0x16
    87b4:	1d 8a       	std	Y+21, r1	; 0x15
			TriggerCommon(track,patch,volume,note);
    87b6:	48 2f       	mov	r20, r24
    87b8:	ce 01       	movw	r24, r28
    87ba:	0e 94 cf 42 	call	0x859e	; 0x859e <TriggerCommon>
			track->flags|=TRACK_FLAGS_PLAYING;
    87be:	88 81       	ld	r24, Y
    87c0:	80 62       	ori	r24, 0x20	; 32
    87c2:	88 83       	st	Y, r24
		}

	}
}
    87c4:	df 91       	pop	r29
    87c6:	cf 91       	pop	r28
    87c8:	08 95       	ret

000087ca <ProcessMusic>:
	}

#endif


void ProcessMusic(void){
    87ca:	6f 92       	push	r6
    87cc:	7f 92       	push	r7
    87ce:	8f 92       	push	r8
    87d0:	9f 92       	push	r9
    87d2:	af 92       	push	r10
    87d4:	bf 92       	push	r11
    87d6:	cf 92       	push	r12
    87d8:	df 92       	push	r13
    87da:	ef 92       	push	r14
    87dc:	ff 92       	push	r15
    87de:	0f 93       	push	r16
    87e0:	1f 93       	push	r17
    87e2:	cf 93       	push	r28
    87e4:	df 93       	push	r29
    87e6:	cc ef       	ldi	r28, 0xFC	; 252
    87e8:	dc e0       	ldi	r29, 0x0C	; 12
    87ea:	00 ed       	ldi	r16, 0xD0	; 208
    87ec:	1c e0       	ldi	r17, 0x0C	; 12
    87ee:	d8 01       	movw	r26, r16
    87f0:	9e 01       	movw	r18, r28
    87f2:	40 e0       	ldi	r20, 0x00	; 0
    87f4:	50 e0       	ldi	r21, 0x00	; 0
    87f6:	ca 01       	movw	r24, r20
    87f8:	84 50       	subi	r24, 0x04	; 4
    87fa:	93 4f       	sbci	r25, 0xF3	; 243
    87fc:	6c 01       	movw	r12, r24
	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//update envelope
		if(track->envelopeStep!=0){
    87fe:	fc 01       	movw	r30, r24
    8800:	87 85       	ldd	r24, Z+15	; 0x0f
    8802:	88 23       	and	r24, r24
    8804:	91 f0       	breq	.+36     	; 0x882a <ProcessMusic+0x60>
			vol=track->envelopeVol+track->envelopeStep;		
    8806:	66 85       	ldd	r22, Z+14	; 0x0e
    8808:	99 27       	eor	r25, r25
    880a:	87 fd       	sbrc	r24, 7
    880c:	90 95       	com	r25
    880e:	86 0f       	add	r24, r22
    8810:	91 1d       	adc	r25, r1
    8812:	8f 3f       	cpi	r24, 0xFF	; 255
    8814:	91 05       	cpc	r25, r1
    8816:	19 f0       	breq	.+6      	; 0x881e <ProcessMusic+0x54>
    8818:	14 f0       	brlt	.+4      	; 0x881e <ProcessMusic+0x54>
    881a:	8f ef       	ldi	r24, 0xFF	; 255
    881c:	90 e0       	ldi	r25, 0x00	; 0
    881e:	97 ff       	sbrs	r25, 7
    8820:	02 c0       	rjmp	.+4      	; 0x8826 <ProcessMusic+0x5c>
    8822:	80 e0       	ldi	r24, 0x00	; 0
    8824:	90 e0       	ldi	r25, 0x00	; 0
			if(vol<0){
				vol=0;			
			}else if(vol>0xff){
				vol=0xff;						
			}
			track->envelopeVol=vol;
    8826:	f6 01       	movw	r30, r12
    8828:	86 87       	std	Z+14, r24	; 0x0e
		}

		//if volumes reaches zero and no more patch command, explicitly end playing on track
		//if(vol==0 && track->patchCommandStreamPos==NULL) track->flags&=~(TRACK_FLAGS_PLAYING);

		if(track->flags & TRACK_FLAGS_SLIDING){
    882a:	f9 01       	movw	r30, r18
    882c:	f0 80       	ld	r15, Z
    882e:	f3 fe       	sbrs	r15, 3
    8830:	2a c0       	rjmp	.+84     	; 0x8886 <ProcessMusic+0xbc>

			mixer.channels.all[trackNo].step+=track->slideStep;
    8832:	65 81       	ldd	r22, Z+5	; 0x05
    8834:	76 81       	ldd	r23, Z+6	; 0x06
    8836:	11 96       	adiw	r26, 0x01	; 1
    8838:	8d 91       	ld	r24, X+
    883a:	9c 91       	ld	r25, X
    883c:	12 97       	sbiw	r26, 0x02	; 2
    883e:	86 0f       	add	r24, r22
    8840:	97 1f       	adc	r25, r23
    8842:	12 96       	adiw	r26, 0x02	; 2
    8844:	9c 93       	st	X, r25
    8846:	8e 93       	st	-X, r24
    8848:	11 97       	sbiw	r26, 0x01	; 1
			u16 tStep=pgm_read_word(&(steptable[track->slideNote]));
    884a:	f6 01       	movw	r30, r12
    884c:	e7 80       	ldd	r14, Z+7	; 0x07
    884e:	ee 2d       	mov	r30, r14
    8850:	f0 e0       	ldi	r31, 0x00	; 0
    8852:	ee 0f       	add	r30, r30
    8854:	ff 1f       	adc	r31, r31
    8856:	e8 5f       	subi	r30, 0xF8	; 248
    8858:	f2 47       	sbci	r31, 0x72	; 114
    885a:	c5 90       	lpm	r12, Z+
    885c:	d4 90       	lpm	r13, Z

			if((track->slideStep>0 && mixer.channels.all[trackNo].step>=tStep) || 
    885e:	16 16       	cp	r1, r22
    8860:	17 06       	cpc	r1, r23
    8862:	24 f4       	brge	.+8      	; 0x886c <ProcessMusic+0xa2>
    8864:	8c 15       	cp	r24, r12
    8866:	9d 05       	cpc	r25, r13
    8868:	30 f4       	brcc	.+12     	; 0x8876 <ProcessMusic+0xac>
    886a:	0d c0       	rjmp	.+26     	; 0x8886 <ProcessMusic+0xbc>
    886c:	67 2b       	or	r22, r23
    886e:	59 f0       	breq	.+22     	; 0x8886 <ProcessMusic+0xbc>
				(track->slideStep<0 && mixer.channels.all[trackNo].step<=tStep))
    8870:	c8 16       	cp	r12, r24
    8872:	d9 06       	cpc	r13, r25
    8874:	40 f0       	brcs	.+16     	; 0x8886 <ProcessMusic+0xbc>
			{					
				mixer.channels.all[trackNo].step = tStep;					
    8876:	12 96       	adiw	r26, 0x02	; 2
    8878:	dc 92       	st	X, r13
    887a:	ce 92       	st	-X, r12
    887c:	11 97       	sbiw	r26, 0x01	; 1
				track->flags &= ~(TRACK_FLAGS_SLIDING);	
    887e:	8f 2d       	mov	r24, r15
    8880:	87 7f       	andi	r24, 0xF7	; 247
    8882:	f9 01       	movw	r30, r18
    8884:	80 83       	st	Z, r24
    8886:	49 5e       	subi	r20, 0xE9	; 233
    8888:	5f 4f       	sbci	r21, 0xFF	; 255
    888a:	29 5e       	subi	r18, 0xE9	; 233
    888c:	3f 4f       	sbci	r19, 0xFF	; 255
    888e:	16 96       	adiw	r26, 0x06	; 6
	u8 channel;
	Track* track;


	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    8890:	43 37       	cpi	r20, 0x73	; 115
    8892:	51 05       	cpc	r21, r1
    8894:	09 f0       	breq	.+2      	; 0x8898 <ProcessMusic+0xce>
    8896:	af cf       	rjmp	.-162    	; 0x87f6 <ProcessMusic+0x2c>
	}



	//Process song MIDI notes
	if(playSong){
    8898:	80 91 ce 0c 	lds	r24, 0x0CCE
    889c:	88 23       	and	r24, r24
    889e:	09 f4       	brne	.+2      	; 0x88a2 <ProcessMusic+0xd8>
    88a0:	cc c0       	rjmp	.+408    	; 0x8a3a <ProcessMusic+0x270>
							}else if(c1==CONTROLER_EXPRESSION){
								tracks[channel].expressionVol=c2<<1;
							}else if(c1==CONTROLER_TREMOLO){
								tracks[channel].tremoloLevel=c2<<1;
							}else if(c1==CONTROLER_TREMOLO_RATE){
								tracks[channel].tremoloRate=c2<<1;
    88a2:	57 e1       	ldi	r21, 0x17	; 23
    88a4:	f5 2e       	mov	r15, r21
	if(playSong){
	
		#if MUSIC_ENGINE == MIDI
			
			//process all simultaneous events
			while(currDeltaTime==nextDeltaTime){
    88a6:	80 91 6f 0d 	lds	r24, 0x0D6F
    88aa:	90 91 70 0d 	lds	r25, 0x0D70
    88ae:	20 91 75 0d 	lds	r18, 0x0D75
    88b2:	30 91 76 0d 	lds	r19, 0x0D76
    88b6:	82 17       	cp	r24, r18
    88b8:	93 07       	cpc	r25, r19
    88ba:	09 f0       	breq	.+2      	; 0x88be <ProcessMusic+0xf4>
    88bc:	b9 c0       	rjmp	.+370    	; 0x8a30 <ProcessMusic+0x266>

				c1=pgm_read_byte(songPos++);
    88be:	20 91 78 0d 	lds	r18, 0x0D78
    88c2:	30 91 79 0d 	lds	r19, 0x0D79
    88c6:	b9 01       	movw	r22, r18
    88c8:	6f 5f       	subi	r22, 0xFF	; 255
    88ca:	7f 4f       	sbci	r23, 0xFF	; 255
    88cc:	70 93 79 0d 	sts	0x0D79, r23
    88d0:	60 93 78 0d 	sts	0x0D78, r22
    88d4:	f9 01       	movw	r30, r18
    88d6:	44 91       	lpm	r20, Z
			
				if(c1==0xff){
    88d8:	4f 3f       	cpi	r20, 0xFF	; 255
    88da:	79 f5       	brne	.+94     	; 0x893a <ProcessMusic+0x170>
					//META data type event
					c1=pgm_read_byte(songPos++);
    88dc:	a9 01       	movw	r20, r18
    88de:	4e 5f       	subi	r20, 0xFE	; 254
    88e0:	5f 4f       	sbci	r21, 0xFF	; 255
    88e2:	50 93 79 0d 	sts	0x0D79, r21
    88e6:	40 93 78 0d 	sts	0x0D78, r20
    88ea:	fb 01       	movw	r30, r22
    88ec:	64 91       	lpm	r22, Z

				
					if(c1==0x2f){ //end of song
    88ee:	6f 32       	cpi	r22, 0x2F	; 47
    88f0:	19 f4       	brne	.+6      	; 0x88f8 <ProcessMusic+0x12e>
						playSong=false;
    88f2:	10 92 ce 0c 	sts	0x0CCE, r1
						break;	
    88f6:	9c c0       	rjmp	.+312    	; 0x8a30 <ProcessMusic+0x266>
					}else if(c1==0x6){ //marker
    88f8:	66 30       	cpi	r22, 0x06	; 6
    88fa:	09 f0       	breq	.+2      	; 0x88fe <ProcessMusic+0x134>
    88fc:	8c c0       	rjmp	.+280    	; 0x8a16 <ProcessMusic+0x24c>
						c1=pgm_read_byte(songPos++); //read len
    88fe:	fa 01       	movw	r30, r20
    8900:	44 91       	lpm	r20, Z
						c2=pgm_read_byte(songPos++); //read data
    8902:	c9 01       	movw	r24, r18
    8904:	04 96       	adiw	r24, 0x04	; 4
    8906:	90 93 79 0d 	sts	0x0D79, r25
    890a:	80 93 78 0d 	sts	0x0D78, r24
				
					if(c1==0x2f){ //end of song
						playSong=false;
						break;	
					}else if(c1==0x6){ //marker
						c1=pgm_read_byte(songPos++); //read len
    890e:	f9 01       	movw	r30, r18
    8910:	33 96       	adiw	r30, 0x03	; 3
						c2=pgm_read_byte(songPos++); //read data
    8912:	e4 91       	lpm	r30, Z
						if(c2=='S'){ //loop start
    8914:	e3 35       	cpi	r30, 0x53	; 83
    8916:	29 f4       	brne	.+10     	; 0x8922 <ProcessMusic+0x158>
							loopStart=songPos;
    8918:	90 93 7b 0d 	sts	0x0D7B, r25
    891c:	80 93 7a 0d 	sts	0x0D7A, r24
    8920:	7a c0       	rjmp	.+244    	; 0x8a16 <ProcessMusic+0x24c>
						}else if(c2=='E'){//loop end
    8922:	e5 34       	cpi	r30, 0x45	; 69
    8924:	09 f0       	breq	.+2      	; 0x8928 <ProcessMusic+0x15e>
    8926:	77 c0       	rjmp	.+238    	; 0x8a16 <ProcessMusic+0x24c>
							songPos=loopStart;
    8928:	80 91 7a 0d 	lds	r24, 0x0D7A
    892c:	90 91 7b 0d 	lds	r25, 0x0D7B
    8930:	90 93 79 0d 	sts	0x0D79, r25
    8934:	80 93 78 0d 	sts	0x0D78, r24
    8938:	6e c0       	rjmp	.+220    	; 0x8a16 <ProcessMusic+0x24c>
					}
				

				}else{

					if(c1&0x80) lastStatus=c1;					
    893a:	47 fd       	sbrc	r20, 7
    893c:	40 93 73 0d 	sts	0x0D73, r20
					channel=lastStatus&0x0f;
    8940:	90 91 73 0d 	lds	r25, 0x0D73
    8944:	89 2f       	mov	r24, r25
    8946:	8f 70       	andi	r24, 0x0F	; 15
				
					//get next data byte
					//Note: maybe we should not advance the cursor
					//in case we receive an unsupported command				
					if(c1&0x80) c1=pgm_read_byte(songPos++); 
    8948:	47 ff       	sbrs	r20, 7
    894a:	08 c0       	rjmp	.+16     	; 0x895c <ProcessMusic+0x192>
    894c:	2e 5f       	subi	r18, 0xFE	; 254
    894e:	3f 4f       	sbci	r19, 0xFF	; 255
    8950:	30 93 79 0d 	sts	0x0D79, r19
    8954:	20 93 78 0d 	sts	0x0D78, r18
    8958:	fb 01       	movw	r30, r22
    895a:	44 91       	lpm	r20, Z

					switch(lastStatus&0xf0){
    895c:	90 7f       	andi	r25, 0xF0	; 240
    895e:	90 3b       	cpi	r25, 0xB0	; 176
    8960:	e1 f0       	breq	.+56     	; 0x899a <ProcessMusic+0x1d0>
    8962:	90 3c       	cpi	r25, 0xC0	; 192
    8964:	09 f4       	brne	.+2      	; 0x8968 <ProcessMusic+0x19e>
    8966:	51 c0       	rjmp	.+162    	; 0x8a0a <ProcessMusic+0x240>
    8968:	90 39       	cpi	r25, 0x90	; 144
    896a:	09 f0       	breq	.+2      	; 0x896e <ProcessMusic+0x1a4>
    896c:	54 c0       	rjmp	.+168    	; 0x8a16 <ProcessMusic+0x24c>

						//note-on
						case 0x90:
							//c1 = note						
							c2=pgm_read_byte(songPos++)<<1; //get volume
    896e:	e0 91 78 0d 	lds	r30, 0x0D78
    8972:	f0 91 79 0d 	lds	r31, 0x0D79
    8976:	9f 01       	movw	r18, r30
    8978:	2f 5f       	subi	r18, 0xFF	; 255
    897a:	3f 4f       	sbci	r19, 0xFF	; 255
    897c:	30 93 79 0d 	sts	0x0D79, r19
    8980:	20 93 78 0d 	sts	0x0D78, r18
    8984:	24 91       	lpm	r18, Z
    8986:	22 0f       	add	r18, r18
						
							if(tracks[channel].flags|TRACK_FLAGS_ALLOCATED){ //allocated==true
								TriggerNote(channel,tracks[channel].patchNo,c1,c2);
    8988:	f8 9e       	mul	r15, r24
    898a:	f0 01       	movw	r30, r0
    898c:	11 24       	eor	r1, r1
    898e:	e4 50       	subi	r30, 0x04	; 4
    8990:	f3 4f       	sbci	r31, 0xF3	; 243
    8992:	60 89       	ldd	r22, Z+16	; 0x10
    8994:	0e 94 a5 43 	call	0x874a	; 0x874a <TriggerNote>
    8998:	3e c0       	rjmp	.+124    	; 0x8a16 <ProcessMusic+0x24c>
							break;

						//controllers
						case 0xb0:
							///c1 = controller #
							c2=pgm_read_byte(songPos++); //get controller value
    899a:	e0 91 78 0d 	lds	r30, 0x0D78
    899e:	f0 91 79 0d 	lds	r31, 0x0D79
    89a2:	9f 01       	movw	r18, r30
    89a4:	2f 5f       	subi	r18, 0xFF	; 255
    89a6:	3f 4f       	sbci	r19, 0xFF	; 255
    89a8:	30 93 79 0d 	sts	0x0D79, r19
    89ac:	20 93 78 0d 	sts	0x0D78, r18
    89b0:	e4 91       	lpm	r30, Z
						
							if(c1==CONTROLER_VOL){
    89b2:	47 30       	cpi	r20, 0x07	; 7
    89b4:	49 f4       	brne	.+18     	; 0x89c8 <ProcessMusic+0x1fe>
								tracks[channel].trackVol=c2<<1;
    89b6:	f8 9e       	mul	r15, r24
    89b8:	d0 01       	movw	r26, r0
    89ba:	11 24       	eor	r1, r1
    89bc:	a4 50       	subi	r26, 0x04	; 4
    89be:	b3 4f       	sbci	r27, 0xF3	; 243
    89c0:	ee 0f       	add	r30, r30
    89c2:	1c 96       	adiw	r26, 0x0c	; 12
    89c4:	ec 93       	st	X, r30
    89c6:	27 c0       	rjmp	.+78     	; 0x8a16 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_EXPRESSION){
    89c8:	4b 30       	cpi	r20, 0x0B	; 11
    89ca:	49 f4       	brne	.+18     	; 0x89de <ProcessMusic+0x214>
								tracks[channel].expressionVol=c2<<1;
    89cc:	f8 9e       	mul	r15, r24
    89ce:	d0 01       	movw	r26, r0
    89d0:	11 24       	eor	r1, r1
    89d2:	a4 50       	subi	r26, 0x04	; 4
    89d4:	b3 4f       	sbci	r27, 0xF3	; 243
    89d6:	ee 0f       	add	r30, r30
    89d8:	13 96       	adiw	r26, 0x03	; 3
    89da:	ec 93       	st	X, r30
    89dc:	1c c0       	rjmp	.+56     	; 0x8a16 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO){
    89de:	4c 35       	cpi	r20, 0x5C	; 92
    89e0:	49 f4       	brne	.+18     	; 0x89f4 <ProcessMusic+0x22a>
								tracks[channel].tremoloLevel=c2<<1;
    89e2:	f8 9e       	mul	r15, r24
    89e4:	d0 01       	movw	r26, r0
    89e6:	11 24       	eor	r1, r1
    89e8:	a4 50       	subi	r26, 0x04	; 4
    89ea:	b3 4f       	sbci	r27, 0xF3	; 243
    89ec:	ee 0f       	add	r30, r30
    89ee:	1a 96       	adiw	r26, 0x0a	; 10
    89f0:	ec 93       	st	X, r30
    89f2:	11 c0       	rjmp	.+34     	; 0x8a16 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO_RATE){
    89f4:	44 36       	cpi	r20, 0x64	; 100
    89f6:	79 f4       	brne	.+30     	; 0x8a16 <ProcessMusic+0x24c>
								tracks[channel].tremoloRate=c2<<1;
    89f8:	f8 9e       	mul	r15, r24
    89fa:	d0 01       	movw	r26, r0
    89fc:	11 24       	eor	r1, r1
    89fe:	a4 50       	subi	r26, 0x04	; 4
    8a00:	b3 4f       	sbci	r27, 0xF3	; 243
    8a02:	ee 0f       	add	r30, r30
    8a04:	1b 96       	adiw	r26, 0x0b	; 11
    8a06:	ec 93       	st	X, r30
    8a08:	06 c0       	rjmp	.+12     	; 0x8a16 <ProcessMusic+0x24c>
							break;

						//program change
						case 0xc0:
							// c1 = patch #						
							tracks[channel].patchNo=c1;
    8a0a:	f8 9e       	mul	r15, r24
    8a0c:	f0 01       	movw	r30, r0
    8a0e:	11 24       	eor	r1, r1
    8a10:	e4 50       	subi	r30, 0x04	; 4
    8a12:	f3 4f       	sbci	r31, 0xF3	; 243
    8a14:	40 8b       	std	Z+16, r20	; 0x10


				}//end if(c1==0xff)

				//read next delta time
				nextDeltaTime=ReadVarLen(&songPos);			
    8a16:	88 e7       	ldi	r24, 0x78	; 120
    8a18:	9d e0       	ldi	r25, 0x0D	; 13
    8a1a:	0e 94 a9 42 	call	0x8552	; 0x8552 <ReadVarLen>
    8a1e:	90 93 76 0d 	sts	0x0D76, r25
    8a22:	80 93 75 0d 	sts	0x0D75, r24
				currDeltaTime=0;
    8a26:	10 92 70 0d 	sts	0x0D70, r1
    8a2a:	10 92 6f 0d 	sts	0x0D6F, r1
    8a2e:	3b cf       	rjmp	.-394    	; 0x88a6 <ProcessMusic+0xdc>
					}
				#endif

			}//end while
		
			currDeltaTime++;
    8a30:	01 96       	adiw	r24, 0x01	; 1
    8a32:	90 93 70 0d 	sts	0x0D70, r25
    8a36:	80 93 6f 0d 	sts	0x0D6F, r24
    8a3a:	95 e0       	ldi	r25, 0x05	; 5
    8a3c:	a9 2e       	mov	r10, r25
    8a3e:	9d e0       	ldi	r25, 0x0D	; 13
    8a40:	b9 2e       	mov	r11, r25
    8a42:	2f e0       	ldi	r18, 0x0F	; 15
    8a44:	c2 2e       	mov	r12, r18
    8a46:	2d e0       	ldi	r18, 0x0D	; 13
    8a48:	d2 2e       	mov	r13, r18
    8a4a:	30 e1       	ldi	r19, 0x10	; 16
    8a4c:	e3 2e       	mov	r14, r19
    8a4e:	3d e0       	ldi	r19, 0x0D	; 13
    8a50:	f3 2e       	mov	r15, r19
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    8a52:	66 24       	eor	r6, r6
    8a54:	6a 94       	dec	r6
    8a56:	71 2c       	mov	r7, r1
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//process patch command stream
		if((track->flags & TRACK_FLAGS_PLAYING) && (track->patchCommandStreamPos!=NULL) && ((track->flags & TRACK_FLAGS_HOLD_ENV)==0)){
    8a58:	88 81       	ld	r24, Y
    8a5a:	85 ff       	sbrs	r24, 5
    8a5c:	42 c0       	rjmp	.+132    	; 0x8ae2 <ProcessMusic+0x318>
    8a5e:	2d 89       	ldd	r18, Y+21	; 0x15
    8a60:	3e 89       	ldd	r19, Y+22	; 0x16
    8a62:	23 2b       	or	r18, r19
    8a64:	09 f4       	brne	.+2      	; 0x8a68 <ProcessMusic+0x29e>
    8a66:	3d c0       	rjmp	.+122    	; 0x8ae2 <ProcessMusic+0x318>
    8a68:	86 fd       	sbrc	r24, 6
    8a6a:	3b c0       	rjmp	.+118    	; 0x8ae2 <ProcessMusic+0x318>
    8a6c:	47 01       	movw	r8, r14
    8a6e:	f2 e0       	ldi	r31, 0x02	; 2
    8a70:	8f 1a       	sub	r8, r31
    8a72:	91 08       	sbc	r9, r1

			//process all simultaneous events
			while(track->patchCurrDeltaTime==track->patchNextDeltaTime){
    8a74:	d6 01       	movw	r26, r12
    8a76:	9c 91       	ld	r25, X
    8a78:	f4 01       	movw	r30, r8
    8a7a:	80 81       	ld	r24, Z
    8a7c:	98 13       	cpse	r25, r24
    8a7e:	2e c0       	rjmp	.+92     	; 0x8adc <ProcessMusic+0x312>

				c1=pgm_read_byte(track->patchCommandStreamPos++);
    8a80:	ed 89       	ldd	r30, Y+21	; 0x15
    8a82:	fe 89       	ldd	r31, Y+22	; 0x16
    8a84:	bf 01       	movw	r22, r30
    8a86:	6f 5f       	subi	r22, 0xFF	; 255
    8a88:	7f 4f       	sbci	r23, 0xFF	; 255
    8a8a:	7e 8b       	std	Y+22, r23	; 0x16
    8a8c:	6d 8b       	std	Y+21, r22	; 0x15
    8a8e:	84 91       	lpm	r24, Z
				if(c1==PATCH_END){
    8a90:	8f 3f       	cpi	r24, 0xFF	; 255
    8a92:	31 f4       	brne	.+12     	; 0x8aa0 <ProcessMusic+0x2d6>
					//end of stream!
					track->flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    8a94:	88 81       	ld	r24, Y
    8a96:	8f 77       	andi	r24, 0x7F	; 127
    8a98:	88 83       	st	Y, r24
					track->patchCommandStreamPos=NULL;
    8a9a:	1e 8a       	std	Y+22, r1	; 0x16
    8a9c:	1d 8a       	std	Y+21, r1	; 0x15
					break;
    8a9e:	1e c0       	rjmp	.+60     	; 0x8adc <ProcessMusic+0x312>

				}else{
					c2=pgm_read_byte(track->patchCommandStreamPos++);
    8aa0:	9f 01       	movw	r18, r30
    8aa2:	2e 5f       	subi	r18, 0xFE	; 254
    8aa4:	3f 4f       	sbci	r19, 0xFF	; 255
    8aa6:	3e 8b       	std	Y+22, r19	; 0x16
    8aa8:	2d 8b       	std	Y+21, r18	; 0x15
    8aaa:	fb 01       	movw	r30, r22
    8aac:	64 91       	lpm	r22, Z
					//invoke patch command function
					((PatchCommand)pgm_read_word(&patchCommands[c1]))(track,c2);
    8aae:	e8 2f       	mov	r30, r24
    8ab0:	f0 e0       	ldi	r31, 0x00	; 0
    8ab2:	ee 0f       	add	r30, r30
    8ab4:	ff 1f       	adc	r31, r31
    8ab6:	ee 52       	subi	r30, 0x2E	; 46
    8ab8:	ff 4f       	sbci	r31, 0xFF	; 255
    8aba:	25 91       	lpm	r18, Z+
    8abc:	34 91       	lpm	r19, Z
    8abe:	ce 01       	movw	r24, r28
    8ac0:	f9 01       	movw	r30, r18
    8ac2:	09 95       	icall
				}

				//read next delta time
				track->patchNextDeltaTime=pgm_read_byte(track->patchCommandStreamPos++);
    8ac4:	ed 89       	ldd	r30, Y+21	; 0x15
    8ac6:	fe 89       	ldd	r31, Y+22	; 0x16
    8ac8:	cf 01       	movw	r24, r30
    8aca:	01 96       	adiw	r24, 0x01	; 1
    8acc:	9e 8b       	std	Y+22, r25	; 0x16
    8ace:	8d 8b       	std	Y+21, r24	; 0x15
    8ad0:	e4 91       	lpm	r30, Z
    8ad2:	d4 01       	movw	r26, r8
    8ad4:	ec 93       	st	X, r30
				track->patchCurrDeltaTime=0;
    8ad6:	f6 01       	movw	r30, r12
    8ad8:	10 82       	st	Z, r1
    8ada:	cc cf       	rjmp	.-104    	; 0x8a74 <ProcessMusic+0x2aa>
			}

			track->patchCurrDeltaTime++;
    8adc:	9f 5f       	subi	r25, 0xFF	; 255
    8ade:	d6 01       	movw	r26, r12
    8ae0:	9c 93       	st	X, r25
		}

		if(track->flags & TRACK_FLAGS_PLAYING){
    8ae2:	98 81       	ld	r25, Y
    8ae4:	95 ff       	sbrs	r25, 5
    8ae6:	6c c0       	rjmp	.+216    	; 0x8bc0 <ProcessMusic+0x3f6>

			if(track->patchPlayingTime<0xff){
    8ae8:	f7 01       	movw	r30, r14
    8aea:	80 81       	ld	r24, Z
    8aec:	8f 3f       	cpi	r24, 0xFF	; 255
    8aee:	11 f0       	breq	.+4      	; 0x8af4 <ProcessMusic+0x32a>
				track->patchPlayingTime++;
    8af0:	8f 5f       	subi	r24, 0xFF	; 255
    8af2:	80 83       	st	Z, r24
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
    8af4:	97 fd       	sbrc	r25, 7
    8af6:	04 c0       	rjmp	.+8      	; 0x8b00 <ProcessMusic+0x336>
    8af8:	f7 01       	movw	r30, r14
    8afa:	38 97       	sbiw	r30, 0x08	; 8
				//if an FX, use full track volume.
				trackVol=0xff;
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
    8afc:	90 81       	ld	r25, Z
    8afe:	01 c0       	rjmp	.+2      	; 0x8b02 <ProcessMusic+0x338>
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
				//if an FX, use full track volume.
				trackVol=0xff;
    8b00:	9f ef       	ldi	r25, 0xFF	; 255
    8b02:	f7 01       	movw	r30, r14
    8b04:	37 97       	sbiw	r30, 0x07	; 7
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
			}
			if(track->noteVol!=0 && track->envelopeVol!=0 && trackVol!=0 && masterVolume!=0){
    8b06:	80 81       	ld	r24, Z
    8b08:	88 23       	and	r24, r24
    8b0a:	09 f4       	brne	.+2      	; 0x8b0e <ProcessMusic+0x344>
    8b0c:	4e c0       	rjmp	.+156    	; 0x8baa <ProcessMusic+0x3e0>
    8b0e:	31 96       	adiw	r30, 0x01	; 1
    8b10:	50 81       	ld	r21, Z
    8b12:	55 23       	and	r21, r21
    8b14:	09 f4       	brne	.+2      	; 0x8b18 <ProcessMusic+0x34e>
    8b16:	49 c0       	rjmp	.+146    	; 0x8baa <ProcessMusic+0x3e0>
    8b18:	99 23       	and	r25, r25
    8b1a:	09 f4       	brne	.+2      	; 0x8b1e <ProcessMusic+0x354>
    8b1c:	46 c0       	rjmp	.+140    	; 0x8baa <ProcessMusic+0x3e0>
    8b1e:	40 91 74 0d 	lds	r20, 0x0D74
    8b22:	44 23       	and	r20, r20
    8b24:	09 f4       	brne	.+2      	; 0x8b28 <ProcessMusic+0x35e>
    8b26:	41 c0       	rjmp	.+130    	; 0x8baa <ProcessMusic+0x3e0>

				uVol=(track->noteVol*trackVol)+0x100;
    8b28:	89 9f       	mul	r24, r25
    8b2a:	c0 01       	movw	r24, r0
    8b2c:	11 24       	eor	r1, r1
    8b2e:	93 95       	inc	r25
				uVol>>=8;
    8b30:	89 2f       	mov	r24, r25
    8b32:	99 27       	eor	r25, r25
				
				uVol=(uVol*track->envelopeVol)+0x100;
    8b34:	58 9f       	mul	r21, r24
    8b36:	90 01       	movw	r18, r0
    8b38:	59 9f       	mul	r21, r25
    8b3a:	30 0d       	add	r19, r0
    8b3c:	11 24       	eor	r1, r1
    8b3e:	c9 01       	movw	r24, r18
    8b40:	93 95       	inc	r25
				uVol>>=8;
    8b42:	89 2f       	mov	r24, r25
    8b44:	99 27       	eor	r25, r25
    8b46:	3b 97       	sbiw	r30, 0x0b	; 11
				
				#if MUSIC_ENGINE == MIDI
					uVol=(uVol*track->expressionVol)+0x100;
    8b48:	50 81       	ld	r21, Z
    8b4a:	58 9f       	mul	r21, r24
    8b4c:	90 01       	movw	r18, r0
    8b4e:	59 9f       	mul	r21, r25
    8b50:	30 0d       	add	r19, r0
    8b52:	11 24       	eor	r1, r1
    8b54:	33 95       	inc	r19
					uVol>>=8;
    8b56:	23 2f       	mov	r18, r19
    8b58:	33 27       	eor	r19, r19
				#endif
				
				uVol=(uVol*masterVolume)+0x100;
    8b5a:	42 9f       	mul	r20, r18
    8b5c:	c0 01       	movw	r24, r0
    8b5e:	43 9f       	mul	r20, r19
    8b60:	90 0d       	add	r25, r0
    8b62:	11 24       	eor	r1, r1
    8b64:	93 95       	inc	r25
				uVol>>=8;
    8b66:	89 2f       	mov	r24, r25
    8b68:	99 27       	eor	r25, r25
    8b6a:	37 96       	adiw	r30, 0x07	; 7

				if(track->tremoloLevel>0){					
    8b6c:	20 81       	ld	r18, Z
    8b6e:	22 23       	and	r18, r18
    8b70:	f1 f0       	breq	.+60     	; 0x8bae <ProcessMusic+0x3e4>
					tmp=pgm_read_byte(&(waves[track->tremoloPos]));
    8b72:	d5 01       	movw	r26, r10
    8b74:	ec 91       	ld	r30, X
    8b76:	f0 e0       	ldi	r31, 0x00	; 0
    8b78:	e0 50       	subi	r30, 0x00	; 0
    8b7a:	f1 47       	sbci	r31, 0x71	; 113
    8b7c:	e4 91       	lpm	r30, Z
					tmp-=128; //convert to unsigned
    8b7e:	e0 58       	subi	r30, 0x80	; 128

					tVol=(track->tremoloLevel*tmp)+0x100;
    8b80:	2e 9f       	mul	r18, r30
    8b82:	f0 01       	movw	r30, r0
    8b84:	11 24       	eor	r1, r1
    8b86:	f3 95       	inc	r31
					tVol>>=8;
    8b88:	ef 2f       	mov	r30, r31
    8b8a:	ff 27       	eor	r31, r31
					
					uVol=(uVol*(0xff-tVol))+0x100;
    8b8c:	a3 01       	movw	r20, r6
    8b8e:	4e 1b       	sub	r20, r30
    8b90:	5f 0b       	sbc	r21, r31
    8b92:	48 9f       	mul	r20, r24
    8b94:	90 01       	movw	r18, r0
    8b96:	49 9f       	mul	r20, r25
    8b98:	30 0d       	add	r19, r0
    8b9a:	58 9f       	mul	r21, r24
    8b9c:	30 0d       	add	r19, r0
    8b9e:	11 24       	eor	r1, r1
    8ba0:	c9 01       	movw	r24, r18
    8ba2:	93 95       	inc	r25
					uVol>>=8;
    8ba4:	89 2f       	mov	r24, r25
    8ba6:	99 27       	eor	r25, r25
    8ba8:	02 c0       	rjmp	.+4      	; 0x8bae <ProcessMusic+0x3e4>
				}

			
			}else{
				uVol=0;
    8baa:	80 e0       	ldi	r24, 0x00	; 0
    8bac:	90 e0       	ldi	r25, 0x00	; 0
			}	

			track->tremoloPos+=track->tremoloRate;	
    8bae:	f5 01       	movw	r30, r10
    8bb0:	30 81       	ld	r19, Z
    8bb2:	f7 01       	movw	r30, r14
    8bb4:	39 97       	sbiw	r30, 0x09	; 9
    8bb6:	20 81       	ld	r18, Z
    8bb8:	23 0f       	add	r18, r19
    8bba:	d5 01       	movw	r26, r10
    8bbc:	2c 93       	st	X, r18
    8bbe:	02 c0       	rjmp	.+4      	; 0x8bc4 <ProcessMusic+0x3fa>

		}else{
			uVol=0;
    8bc0:	80 e0       	ldi	r24, 0x00	; 0
    8bc2:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
    8bc4:	f8 01       	movw	r30, r16
    8bc6:	80 83       	st	Z, r24
    8bc8:	67 96       	adiw	r28, 0x17	; 23
    8bca:	0a 5f       	subi	r16, 0xFA	; 250
    8bcc:	1f 4f       	sbci	r17, 0xFF	; 255
    8bce:	f7 e1       	ldi	r31, 0x17	; 23
    8bd0:	af 0e       	add	r10, r31
    8bd2:	b1 1c       	adc	r11, r1
    8bd4:	87 e1       	ldi	r24, 0x17	; 23
    8bd6:	c8 0e       	add	r12, r24
    8bd8:	d1 1c       	adc	r13, r1
    8bda:	97 e1       	ldi	r25, 0x17	; 23
    8bdc:	e9 0e       	add	r14, r25
    8bde:	f1 1c       	adc	r15, r1


	//
	// Process patches command streams & final volume
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    8be0:	ad e0       	ldi	r26, 0x0D	; 13
    8be2:	cf 36       	cpi	r28, 0x6F	; 111
    8be4:	da 07       	cpc	r29, r26
    8be6:	09 f0       	breq	.+2      	; 0x8bea <ProcessMusic+0x420>
    8be8:	37 cf       	rjmp	.-402    	; 0x8a58 <ProcessMusic+0x28e>
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
	}
	
}
    8bea:	df 91       	pop	r29
    8bec:	cf 91       	pop	r28
    8bee:	1f 91       	pop	r17
    8bf0:	0f 91       	pop	r16
    8bf2:	ff 90       	pop	r15
    8bf4:	ef 90       	pop	r14
    8bf6:	df 90       	pop	r13
    8bf8:	cf 90       	pop	r12
    8bfa:	bf 90       	pop	r11
    8bfc:	af 90       	pop	r10
    8bfe:	9f 90       	pop	r9
    8c00:	8f 90       	pop	r8
    8c02:	7f 90       	pop	r7
    8c04:	6f 90       	pop	r6
    8c06:	08 95       	ret

00008c08 <SetMasterVolume>:
}



void SetMasterVolume(unsigned char vol){
	masterVolume=vol;
    8c08:	80 93 74 0d 	sts	0x0D74, r24
    8c0c:	08 95       	ret

00008c0e <SetMixerNote>:
; r22: -MIDI note, 69=A5(440) for waves channels (0,1,2)
;      -Noise params for channel 3
;***********************
.section .text.SetMixerNote
SetMixerNote:
	clr r25
    8c0e:	99 27       	eor	r25, r25
	clr r23
    8c10:	77 27       	eor	r23, r23
	#if SOUND_MIXER == MIXER_TYPE_VSYNC
		cpi r24,3
		brlo set_note_waves
		ret		
	#else
		cpi r24,3
    8c12:	83 30       	cpi	r24, 0x03	; 3
		brne set_note_waves		
    8c14:	09 f4       	brne	.+2      	; 0x8c18 <set_note_waves>
		ret
    8c16:	08 95       	ret

00008c18 <set_note_waves>:
	#endif
#endif

set_note_waves:
	;get step for note
	ldi ZL,lo8(steptable)
    8c18:	e8 e0       	ldi	r30, 0x08	; 8
	ldi ZH,hi8(steptable)
    8c1a:	fd e8       	ldi	r31, 0x8D	; 141
	lsl r22
    8c1c:	66 0f       	add	r22, r22
	rol r23
    8c1e:	77 1f       	adc	r23, r23
	add ZL,r22
    8c20:	e6 0f       	add	r30, r22
	adc ZH,r23	
    8c22:	f7 1f       	adc	r31, r23

	lpm r26,Z+
    8c24:	a5 91       	lpm	r26, Z+
	lpm r27,Z
    8c26:	b4 91       	lpm	r27, Z

	ldi ZL,lo8(mixerStruct)
    8c28:	e0 ed       	ldi	r30, 0xD0	; 208
	ldi ZH,hi8(mixerStruct)
    8c2a:	fc e0       	ldi	r31, 0x0C	; 12
	ldi r18,CHANNEL_STRUCT_SIZE
    8c2c:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24
    8c2e:	28 9f       	mul	r18, r24
	add ZL,r0
    8c30:	e0 0d       	add	r30, r0
	adc ZH,r1
    8c32:	f1 1d       	adc	r31, r1
	
	std Z+step_lo,r26
    8c34:	a1 83       	std	Z+1, r26	; 0x01
	std Z+step_hi,r27
    8c36:	b2 83       	std	Z+2, r27	; 0x02
	
	clr r1
    8c38:	11 24       	eor	r1, r1
	

	ret
    8c3a:	08 95       	ret

00008c3c <SetMixerWave>:
;         Noise channel: 0xfe=7 bit lfsr, 0xff=15 bit lfsr
;                 
;***********************
.section .text.SetMixerWave
SetMixerWave:
	clr r25
    8c3c:	99 27       	eor	r25, r25
	clr r23
    8c3e:	77 27       	eor	r23, r23

	ldi ZL,lo8(mixerStruct)
    8c40:	e0 ed       	ldi	r30, 0xD0	; 208
	ldi ZH,hi8(mixerStruct)
    8c42:	fc e0       	ldi	r31, 0x0C	; 12
	ldi r18,CHANNEL_STRUCT_SIZE
    8c44:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24	
    8c46:	28 9f       	mul	r18, r24
	add ZL,r0
    8c48:	e0 0d       	add	r30, r0
	adc ZH,r1
    8c4a:	f1 1d       	adc	r31, r1

#if MIXER_CHAN4_TYPE == 0
	cpi r22,0xfe	;7bit lfsr
    8c4c:	6e 3f       	cpi	r22, 0xFE	; 254
	brne smw1
    8c4e:	31 f4       	brne	.+12     	; 0x8c5c <smw1>
	lds r22,tr4_params
    8c50:	60 91 e3 0c 	lds	r22, 0x0CE3
	andi r22,0xfe;
    8c54:	6e 7f       	andi	r22, 0xFE	; 254
	sts tr4_params,r22
    8c56:	60 93 e3 0c 	sts	0x0CE3, r22
	rjmp esmw	
    8c5a:	0b c0       	rjmp	.+22     	; 0x8c72 <esmw>

00008c5c <smw1>:
smw1:
	cpi r22,0xff	;15bit lfsr
    8c5c:	6f 3f       	cpi	r22, 0xFF	; 255
	brne smw2
    8c5e:	31 f4       	brne	.+12     	; 0x8c6c <smw2>
	lds r22,tr4_params
    8c60:	60 91 e3 0c 	lds	r22, 0x0CE3
	ori r22,0xfe;
    8c64:	6e 6f       	ori	r22, 0xFE	; 254
	sts tr4_params,r22	
    8c66:	60 93 e3 0c 	sts	0x0CE3, r22
	rjmp esmw
    8c6a:	03 c0       	rjmp	.+6      	; 0x8c72 <esmw>

00008c6c <smw2>:
smw2:
#endif

	ldi r23,hi8(waves)
    8c6c:	7f e8       	ldi	r23, 0x8F	; 143
	add r23,r22
    8c6e:	76 0f       	add	r23, r22
	std Z+samplepos_hi,r23 ;store path No
    8c70:	75 83       	std	Z+5, r23	; 0x05

00008c72 <esmw>:

esmw:
	clr r1	
    8c72:	11 24       	eor	r1, r1
	ret
    8c74:	08 95       	ret
	...

00008d00 <DisableSoundEngine>:
; no CPU cycles are consumed.
; C-callable
;*****************************
.section .text.DisableSoundEngine
DisableSoundEngine:	
	ldi r24,0
    8d00:	80 e0       	ldi	r24, 0x00	; 0
	sts sound_enabled,r24
    8d02:	80 93 cf 0c 	sts	0x0CCF, r24
	ret
    8d06:	08 95       	ret

00008d08 <steptable>:
    8d08:	22 00       	.word	0x0022	; ????
    8d0a:	24 00       	.word	0x0024	; ????
    8d0c:	26 00       	.word	0x0026	; ????
    8d0e:	28 00       	.word	0x0028	; ????
    8d10:	2b 00       	.word	0x002b	; ????
    8d12:	2d 00       	.word	0x002d	; ????
    8d14:	30 00       	.word	0x0030	; ????
    8d16:	33 00       	.word	0x0033	; ????
    8d18:	36 00       	.word	0x0036	; ????
    8d1a:	39 00       	.word	0x0039	; ????
    8d1c:	3d 00       	.word	0x003d	; ????
    8d1e:	40 00       	.word	0x0040	; ????
    8d20:	44 00       	.word	0x0044	; ????
    8d22:	48 00       	.word	0x0048	; ????
    8d24:	4c 00       	.word	0x004c	; ????
    8d26:	51 00       	.word	0x0051	; ????
    8d28:	56 00       	.word	0x0056	; ????
    8d2a:	5b 00       	.word	0x005b	; ????
    8d2c:	60 00       	.word	0x0060	; ????
    8d2e:	66 00       	.word	0x0066	; ????
    8d30:	6c 00       	.word	0x006c	; ????
    8d32:	73 00       	.word	0x0073	; ????
    8d34:	79 00       	.word	0x0079	; ????
    8d36:	81 00       	.word	0x0081	; ????
    8d38:	88 00       	.word	0x0088	; ????
    8d3a:	90 00       	.word	0x0090	; ????
    8d3c:	99 00       	.word	0x0099	; ????
    8d3e:	a2 00       	.word	0x00a2	; ????
    8d40:	ac 00       	.word	0x00ac	; ????
    8d42:	b6 00       	.word	0x00b6	; ????
    8d44:	c1 00       	.word	0x00c1	; ????
    8d46:	cc 00       	.word	0x00cc	; ????
    8d48:	d8 00       	.word	0x00d8	; ????
    8d4a:	e5 00       	.word	0x00e5	; ????
    8d4c:	f3 00       	.word	0x00f3	; ????
    8d4e:	01 01       	movw	r0, r2
    8d50:	10 01       	movw	r2, r0
    8d52:	21 01       	movw	r4, r2
    8d54:	32 01       	movw	r6, r4
    8d56:	44 01       	movw	r8, r8
    8d58:	57 01       	movw	r10, r14
    8d5a:	6c 01       	movw	r12, r24
    8d5c:	81 01       	movw	r16, r2
    8d5e:	98 01       	movw	r18, r16
    8d60:	b0 01       	movw	r22, r0
    8d62:	ca 01       	movw	r24, r20
    8d64:	e5 01       	movw	r28, r10
    8d66:	02 02       	muls	r16, r18
    8d68:	21 02       	muls	r18, r17
    8d6a:	41 02       	muls	r20, r17
    8d6c:	64 02       	muls	r22, r20
    8d6e:	88 02       	muls	r24, r24
    8d70:	ae 02       	muls	r26, r30
    8d72:	d7 02       	muls	r29, r23
    8d74:	03 03       	mulsu	r16, r19
    8d76:	30 03       	mulsu	r19, r16
    8d78:	61 03       	mulsu	r22, r17
    8d7a:	94 03       	fmuls	r17, r20
    8d7c:	cb 03       	fmulsu	r20, r19
    8d7e:	05 04       	cpc	r0, r5
    8d80:	42 04       	cpc	r4, r2
    8d82:	83 04       	cpc	r8, r3
    8d84:	c7 04       	cpc	r12, r7
    8d86:	10 05       	cpc	r17, r0
    8d88:	5d 05       	cpc	r21, r13
    8d8a:	af 05       	cpc	r26, r15
    8d8c:	05 06       	cpc	r0, r21
    8d8e:	61 06       	cpc	r6, r17
    8d90:	c2 06       	cpc	r12, r18
    8d92:	29 07       	cpc	r18, r25
    8d94:	96 07       	cpc	r25, r22
    8d96:	09 08       	sbc	r0, r9
    8d98:	83 08       	sbc	r8, r3
    8d9a:	05 09       	sbc	r16, r5
    8d9c:	8e 09       	sbc	r24, r14
    8d9e:	20 0a       	sbc	r2, r16
    8da0:	ba 0a       	sbc	r11, r26
    8da2:	5d 0b       	sbc	r21, r29
    8da4:	0a 0c       	add	r0, r10
    8da6:	c1 0c       	add	r12, r1
    8da8:	84 0d       	add	r24, r4
    8daa:	51 0e       	add	r5, r17
    8dac:	2b 0f       	add	r18, r27
    8dae:	12 10       	cpse	r1, r2
    8db0:	07 11       	cpse	r16, r7
    8db2:	0a 12       	cpse	r0, r26
    8db4:	1d 13       	cpse	r17, r29
    8db6:	40 14       	cp	r4, r0
    8db8:	74 15       	cp	r23, r4
    8dba:	ba 16       	cp	r11, r26
    8dbc:	14 18       	sub	r1, r4
    8dbe:	83 19       	sub	r24, r3
    8dc0:	07 1b       	sub	r16, r23
    8dc2:	a3 1c       	adc	r10, r3
    8dc4:	57 1e       	adc	r5, r23
    8dc6:	24 20       	and	r2, r4
    8dc8:	0e 22       	and	r0, r30
    8dca:	14 24       	eor	r1, r4
    8dcc:	39 26       	eor	r3, r25
    8dce:	7f 28       	or	r7, r15
    8dd0:	e8 2a       	or	r14, r24
    8dd2:	75 2d       	mov	r23, r5
    8dd4:	29 30       	cpi	r18, 0x09	; 9
    8dd6:	06 33       	cpi	r16, 0x36	; 54
    8dd8:	0f 36       	cpi	r16, 0x6F	; 111
    8dda:	45 39       	cpi	r20, 0x95	; 149
    8ddc:	ad 3c       	cpi	r26, 0xCD	; 205
    8dde:	49 40       	sbci	r20, 0x09	; 9
    8de0:	1b 44       	sbci	r17, 0x4B	; 75
    8de2:	28 48       	sbci	r18, 0x88	; 136
    8de4:	73 4c       	sbci	r23, 0xC3	; 195
    8de6:	fe 50       	subi	r31, 0x0E	; 14
    8de8:	cf 55       	subi	r28, 0x5F	; 95
    8dea:	ea 5a       	subi	r30, 0xAA	; 170
    8dec:	51 60       	ori	r21, 0x01	; 1
    8dee:	0c 66       	ori	r16, 0x6C	; 108
    8df0:	1d 6c       	ori	r17, 0xCD	; 205
    8df2:	8b 72       	andi	r24, 0x2B	; 43
    8df4:	5a 79       	andi	r21, 0x9A	; 154
    8df6:	92 80       	ldd	r9, Z+2	; 0x02
    8df8:	37 88       	ldd	r3, Z+23	; 0x17
    8dfa:	50 90 e5 98 	lds	r5, 0x98E5
    8dfe:	fd a1       	ldd	r31, Y+37	; 0x25
    8e00:	9f ab       	std	Y+55, r25	; 0x37
    8e02:	d3 b5       	in	r29, 0x23	; 35
    8e04:	a3 c0       	rjmp	.+326    	; 0x8f4c <waves+0x4c>
	...

00008f00 <waves>:
    8f00:	00 03       	mulsu	r16, r16
    8f02:	06 09       	sbc	r16, r6
    8f04:	0c 10       	cpse	r0, r12
    8f06:	13 16       	cp	r1, r19
    8f08:	19 1c       	adc	r1, r9
    8f0a:	1f 22       	and	r1, r31
    8f0c:	25 28       	or	r2, r5
    8f0e:	2b 2e       	mov	r2, r27
    8f10:	31 33       	cpi	r19, 0x31	; 49
    8f12:	36 39       	cpi	r19, 0x96	; 150
    8f14:	3c 3f       	cpi	r19, 0xFC	; 252
    8f16:	41 44       	sbci	r20, 0x41	; 65
    8f18:	47 49       	sbci	r20, 0x97	; 151
    8f1a:	4c 4e       	sbci	r20, 0xEC	; 236
    8f1c:	51 53       	subi	r21, 0x31	; 49
    8f1e:	55 58       	subi	r21, 0x85	; 133
    8f20:	5a 5c       	subi	r21, 0xCA	; 202
    8f22:	5e 60       	ori	r21, 0x0E	; 14
    8f24:	62 64       	ori	r22, 0x42	; 66
    8f26:	66 68       	ori	r22, 0x86	; 134
    8f28:	6a 6b       	ori	r22, 0xBA	; 186
    8f2a:	6d 6f       	ori	r22, 0xFD	; 253
    8f2c:	70 71       	andi	r23, 0x10	; 16
    8f2e:	73 74       	andi	r23, 0x43	; 67
    8f30:	75 76       	andi	r23, 0x65	; 101
    8f32:	78 79       	andi	r23, 0x98	; 152
    8f34:	7a 7a       	andi	r23, 0xAA	; 170
    8f36:	7b 7c       	andi	r23, 0xCB	; 203
    8f38:	7d 7d       	andi	r23, 0xDD	; 221
    8f3a:	7e 7e       	andi	r23, 0xEE	; 238
    8f3c:	7e 7f       	andi	r23, 0xFE	; 254
    8f3e:	7f 7f       	andi	r23, 0xFF	; 255
    8f40:	7f 7f       	andi	r23, 0xFF	; 255
    8f42:	7f 7f       	andi	r23, 0xFF	; 255
    8f44:	7e 7e       	andi	r23, 0xEE	; 238
    8f46:	7e 7d       	andi	r23, 0xDE	; 222
    8f48:	7d 7c       	andi	r23, 0xCD	; 205
    8f4a:	7b 7a       	andi	r23, 0xAB	; 171
    8f4c:	7a 79       	andi	r23, 0x9A	; 154
    8f4e:	78 76       	andi	r23, 0x68	; 104
    8f50:	75 74       	andi	r23, 0x45	; 69
    8f52:	73 71       	andi	r23, 0x13	; 19
    8f54:	70 6f       	ori	r23, 0xF0	; 240
    8f56:	6d 6b       	ori	r22, 0xBD	; 189
    8f58:	6a 68       	ori	r22, 0x8A	; 138
    8f5a:	66 64       	ori	r22, 0x46	; 70
    8f5c:	62 60       	ori	r22, 0x02	; 2
    8f5e:	5e 5c       	subi	r21, 0xCE	; 206
    8f60:	5a 58       	subi	r21, 0x8A	; 138
    8f62:	55 53       	subi	r21, 0x35	; 53
    8f64:	51 4e       	sbci	r21, 0xE1	; 225
    8f66:	4c 49       	sbci	r20, 0x9C	; 156
    8f68:	47 44       	sbci	r20, 0x47	; 71
    8f6a:	41 3f       	cpi	r20, 0xF1	; 241
    8f6c:	3c 39       	cpi	r19, 0x9C	; 156
    8f6e:	36 33       	cpi	r19, 0x36	; 54
    8f70:	31 2e       	mov	r3, r17
    8f72:	2b 28       	or	r2, r11
    8f74:	25 22       	and	r2, r21
    8f76:	1f 1c       	adc	r1, r15
    8f78:	19 16       	cp	r1, r25
    8f7a:	13 10       	cpse	r1, r3
    8f7c:	0c 09       	sbc	r16, r12
    8f7e:	06 03       	mulsu	r16, r22
    8f80:	00 fd       	sbrc	r16, 0
    8f82:	fa f7       	brpl	.-2      	; 0x8f82 <waves+0x82>
    8f84:	f4 f0       	brlt	.+60     	; 0x8fc2 <waves+0xc2>
    8f86:	ed ea       	ldi	r30, 0xAD	; 173
    8f88:	e7 e4       	ldi	r30, 0x47	; 71
    8f8a:	e1 de       	rcall	.-574    	; 0x8d4e <steptable+0x46>
    8f8c:	db d8       	rcall	.-3658   	; 0x8144 <isEepromFormatted+0x24>
    8f8e:	d5 d2       	rcall	.+1450   	; 0x953a <waves+0x63a>
    8f90:	cf cd       	rjmp	.-1122   	; 0x8b30 <ProcessMusic+0x366>
    8f92:	ca c7       	rjmp	.+3988   	; 0x9f28 <LBPrintChar+0x2c>
    8f94:	c4 c1       	rjmp	.+904    	; 0x931e <waves+0x41e>
    8f96:	bf bc       	out	0x2f, r11	; 47
    8f98:	b9 b7       	in	r27, 0x39	; 57
    8f9a:	b4 b2       	in	r11, 0x14	; 20
    8f9c:	af ad       	ldd	r26, Y+63	; 0x3f
    8f9e:	ab a8       	ldd	r10, Y+51	; 0x33
    8fa0:	a6 a4       	ldd	r10, Z+46	; 0x2e
    8fa2:	a2 a0       	ldd	r10, Z+34	; 0x22
    8fa4:	9e 9c       	mul	r9, r14
    8fa6:	9a 98       	cbi	0x13, 2	; 19
    8fa8:	96 95       	lsr	r25
    8faa:	93 91       	.word	0x9193	; ????
    8fac:	90 8f       	std	Z+24, r25	; 0x18
    8fae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    8fb0:	8b 8a       	std	Y+19, r8	; 0x13
    8fb2:	88 87       	std	Y+8, r24	; 0x08
    8fb4:	86 86       	std	Z+14, r8	; 0x0e
    8fb6:	85 84       	ldd	r8, Z+13	; 0x0d
    8fb8:	83 83       	std	Z+3, r24	; 0x03
    8fba:	82 82       	std	Z+2, r8	; 0x02
    8fbc:	82 81       	ldd	r24, Z+2	; 0x02
    8fbe:	81 81       	ldd	r24, Z+1	; 0x01
    8fc0:	81 81       	ldd	r24, Z+1	; 0x01
    8fc2:	81 81       	ldd	r24, Z+1	; 0x01
    8fc4:	82 82       	std	Z+2, r8	; 0x02
    8fc6:	82 83       	std	Z+2, r24	; 0x02
    8fc8:	83 84       	ldd	r8, Z+11	; 0x0b
    8fca:	85 86       	std	Z+13, r8	; 0x0d
    8fcc:	86 87       	std	Z+14, r24	; 0x0e
    8fce:	88 8a       	std	Y+16, r8	; 0x10
    8fd0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    8fd2:	8d 8f       	std	Y+29, r24	; 0x1d
    8fd4:	90 91 93 95 	lds	r25, 0x9593
    8fd8:	96 98       	cbi	0x12, 6	; 18
    8fda:	9a 9c       	mul	r9, r10
    8fdc:	9e a0       	ldd	r9, Y+38	; 0x26
    8fde:	a2 a4       	ldd	r10, Z+42	; 0x2a
    8fe0:	a6 a8       	ldd	r10, Z+54	; 0x36
    8fe2:	ab ad       	ldd	r26, Y+59	; 0x3b
    8fe4:	af b2       	in	r10, 0x1f	; 31
    8fe6:	b4 b7       	in	r27, 0x34	; 52
    8fe8:	b9 bc       	out	0x29, r11	; 41
    8fea:	bf c1       	rjmp	.+894    	; 0x936a <waves+0x46a>
    8fec:	c4 c7       	rjmp	.+3976   	; 0x9f76 <LBPrintByte+0x2>
    8fee:	ca cd       	rjmp	.-1132   	; 0x8b84 <ProcessMusic+0x3ba>
    8ff0:	cf d2       	rcall	.+1438   	; 0x9590 <waves+0x690>
    8ff2:	d5 d8       	rcall	.-3670   	; 0x819e <EepromBlockExists+0x50>
    8ff4:	db de       	rcall	.-586    	; 0x8dac <steptable+0xa4>
    8ff6:	e1 e4       	ldi	r30, 0x41	; 65
    8ff8:	e7 ea       	ldi	r30, 0xA7	; 167
    8ffa:	ed f0       	brhs	.+58     	; 0x9036 <waves+0x136>
    8ffc:	f4 f7       	brge	.-4      	; 0x8ffa <waves+0xfa>
    8ffe:	fa fd       	.word	0xfdfa	; ????
    9000:	80 81       	ld	r24, Z
    9002:	82 83       	std	Z+2, r24	; 0x02
    9004:	84 85       	ldd	r24, Z+12	; 0x0c
    9006:	86 87       	std	Z+14, r24	; 0x0e
    9008:	88 89       	ldd	r24, Y+16	; 0x10
    900a:	8a 8b       	std	Y+18, r24	; 0x12
    900c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    900e:	8e 8f       	std	Y+30, r24	; 0x1e
    9010:	90 91 92 93 	lds	r25, 0x9392
    9014:	94 95       	.word	0x9594	; ????
    9016:	96 97       	sbiw	r26, 0x26	; 38
    9018:	98 99       	sbic	0x13, 0	; 19
    901a:	9a 9b       	sbis	0x13, 2	; 19
    901c:	9c 9d       	mul	r25, r12
    901e:	9e 9f       	mul	r25, r30
    9020:	a0 a1       	ldd	r26, Z+32	; 0x20
    9022:	a2 a3       	std	Z+34, r26	; 0x22
    9024:	a4 a5       	ldd	r26, Z+44	; 0x2c
    9026:	a6 a7       	std	Z+46, r26	; 0x2e
    9028:	a8 a9       	ldd	r26, Y+48	; 0x30
    902a:	aa ab       	std	Y+50, r26	; 0x32
    902c:	ac ad       	ldd	r26, Y+60	; 0x3c
    902e:	ae af       	std	Y+62, r26	; 0x3e
    9030:	b0 b1       	in	r27, 0x00	; 0
    9032:	b2 b3       	in	r27, 0x12	; 18
    9034:	b4 b5       	in	r27, 0x24	; 36
    9036:	b6 b7       	in	r27, 0x36	; 54
    9038:	b8 b9       	out	0x08, r27	; 8
    903a:	ba bb       	out	0x1a, r27	; 26
    903c:	bc bd       	out	0x2c, r27	; 44
    903e:	be bf       	out	0x3e, r27	; 62
    9040:	c0 c1       	rjmp	.+896    	; 0x93c2 <waves+0x4c2>
    9042:	c2 c3       	rjmp	.+1924   	; 0x97c8 <waves+0x8c8>
    9044:	c4 c5       	rjmp	.+2952   	; 0x9bce <DrawMap+0x16>
    9046:	c6 c7       	rjmp	.+3980   	; 0x9fd4 <LBPrintByte+0x60>
    9048:	c8 c9       	rjmp	.-3184   	; 0x83da <PatchCommand11+0x56>
    904a:	ca cb       	rjmp	.-2156   	; 0x87e0 <ProcessMusic+0x16>
    904c:	cc cd       	rjmp	.-1128   	; 0x8be6 <ProcessMusic+0x41c>
    904e:	ce cf       	rjmp	.-100    	; 0x8fec <waves+0xec>
    9050:	d0 d1       	rcall	.+928    	; 0x93f2 <waves+0x4f2>
    9052:	d2 d3       	rcall	.+1956   	; 0x97f8 <waves+0x8f8>
    9054:	d4 d5       	rcall	.+2984   	; 0x9bfe <DrawMap+0x46>
    9056:	d6 d7       	rcall	.+4012   	; 0xa004 <LBPrintInt+0x2e>
    9058:	d8 d9       	rcall	.-3152   	; 0x840a <PatchCommand02+0x4>
    905a:	da db       	rcall	.-2124   	; 0x8810 <ProcessMusic+0x46>
    905c:	dc dd       	rcall	.-1096   	; 0x8c16 <SetMixerNote+0x8>
    905e:	de df       	rcall	.-68     	; 0x901c <waves+0x11c>
    9060:	e0 e1       	ldi	r30, 0x10	; 16
    9062:	e2 e3       	ldi	r30, 0x32	; 50
    9064:	e4 e5       	ldi	r30, 0x54	; 84
    9066:	e6 e7       	ldi	r30, 0x76	; 118
    9068:	e8 e9       	ldi	r30, 0x98	; 152
    906a:	ea eb       	ldi	r30, 0xBA	; 186
    906c:	ec ed       	ldi	r30, 0xDC	; 220
    906e:	ee ef       	ldi	r30, 0xFE	; 254
    9070:	f0 f1       	brcs	.+124    	; 0x90ee <waves+0x1ee>
    9072:	f2 f3       	brmi	.-4      	; 0x9070 <waves+0x170>
    9074:	f4 f5       	brge	.+124    	; 0x90f2 <waves+0x1f2>
    9076:	f6 f7       	brtc	.-4      	; 0x9074 <waves+0x174>
    9078:	f8 f9       	.word	0xf9f8	; ????
    907a:	fa fb       	.word	0xfbfa	; ????
    907c:	fc fd       	.word	0xfdfc	; ????
    907e:	fe ff       	.word	0xfffe	; ????
    9080:	00 01       	movw	r0, r0
    9082:	02 03       	mulsu	r16, r18
    9084:	04 05       	cpc	r16, r4
    9086:	06 07       	cpc	r16, r22
    9088:	08 09       	sbc	r16, r8
    908a:	0a 0b       	sbc	r16, r26
    908c:	0c 0d       	add	r16, r12
    908e:	0e 0f       	add	r16, r30
    9090:	10 11       	cpse	r17, r0
    9092:	12 13       	cpse	r17, r18
    9094:	14 15       	cp	r17, r4
    9096:	16 17       	cp	r17, r22
    9098:	18 19       	sub	r17, r8
    909a:	1a 1b       	sub	r17, r26
    909c:	1c 1d       	adc	r17, r12
    909e:	1e 1f       	adc	r17, r30
    90a0:	20 21       	and	r18, r0
    90a2:	22 23       	and	r18, r18
    90a4:	24 25       	eor	r18, r4
    90a6:	26 27       	eor	r18, r22
    90a8:	28 29       	or	r18, r8
    90aa:	2a 2b       	or	r18, r26
    90ac:	2c 2d       	mov	r18, r12
    90ae:	2e 2f       	mov	r18, r30
    90b0:	30 31       	cpi	r19, 0x10	; 16
    90b2:	32 33       	cpi	r19, 0x32	; 50
    90b4:	34 35       	cpi	r19, 0x54	; 84
    90b6:	36 37       	cpi	r19, 0x76	; 118
    90b8:	38 39       	cpi	r19, 0x98	; 152
    90ba:	3a 3b       	cpi	r19, 0xBA	; 186
    90bc:	3c 3d       	cpi	r19, 0xDC	; 220
    90be:	3e 3f       	cpi	r19, 0xFE	; 254
    90c0:	40 41       	sbci	r20, 0x10	; 16
    90c2:	42 43       	sbci	r20, 0x32	; 50
    90c4:	44 45       	sbci	r20, 0x54	; 84
    90c6:	46 47       	sbci	r20, 0x76	; 118
    90c8:	48 49       	sbci	r20, 0x98	; 152
    90ca:	4a 4b       	sbci	r20, 0xBA	; 186
    90cc:	4c 4d       	sbci	r20, 0xDC	; 220
    90ce:	4e 4f       	sbci	r20, 0xFE	; 254
    90d0:	50 51       	subi	r21, 0x10	; 16
    90d2:	52 53       	subi	r21, 0x32	; 50
    90d4:	54 55       	subi	r21, 0x54	; 84
    90d6:	56 57       	subi	r21, 0x76	; 118
    90d8:	58 59       	subi	r21, 0x98	; 152
    90da:	5a 5b       	subi	r21, 0xBA	; 186
    90dc:	5c 5d       	subi	r21, 0xDC	; 220
    90de:	5e 5f       	subi	r21, 0xFE	; 254
    90e0:	60 61       	ori	r22, 0x10	; 16
    90e2:	62 63       	ori	r22, 0x32	; 50
    90e4:	64 65       	ori	r22, 0x54	; 84
    90e6:	66 67       	ori	r22, 0x76	; 118
    90e8:	68 69       	ori	r22, 0x98	; 152
    90ea:	6a 6b       	ori	r22, 0xBA	; 186
    90ec:	6c 6d       	ori	r22, 0xDC	; 220
    90ee:	6e 6f       	ori	r22, 0xFE	; 254
    90f0:	70 71       	andi	r23, 0x10	; 16
    90f2:	72 73       	andi	r23, 0x32	; 50
    90f4:	74 75       	andi	r23, 0x54	; 84
    90f6:	76 77       	andi	r23, 0x76	; 118
    90f8:	78 79       	andi	r23, 0x98	; 152
    90fa:	7a 7b       	andi	r23, 0xBA	; 186
    90fc:	7c 7d       	andi	r23, 0xDC	; 220
    90fe:	7e 7f       	andi	r23, 0xFE	; 254
    9100:	00 02       	muls	r16, r16
    9102:	04 06       	cpc	r0, r20
    9104:	08 0a       	sbc	r0, r24
    9106:	0c 0e       	add	r0, r28
    9108:	10 12       	cpse	r1, r16
    910a:	14 16       	cp	r1, r20
    910c:	18 1a       	sub	r1, r24
    910e:	1c 1e       	adc	r1, r28
    9110:	20 22       	and	r2, r16
    9112:	24 26       	eor	r2, r20
    9114:	28 2a       	or	r2, r24
    9116:	2c 2e       	mov	r2, r28
    9118:	30 32       	cpi	r19, 0x20	; 32
    911a:	34 36       	cpi	r19, 0x64	; 100
    911c:	38 3a       	cpi	r19, 0xA8	; 168
    911e:	3c 3e       	cpi	r19, 0xEC	; 236
    9120:	40 42       	sbci	r20, 0x20	; 32
    9122:	44 46       	sbci	r20, 0x64	; 100
    9124:	48 4a       	sbci	r20, 0xA8	; 168
    9126:	4c 4e       	sbci	r20, 0xEC	; 236
    9128:	50 52       	subi	r21, 0x20	; 32
    912a:	54 56       	subi	r21, 0x64	; 100
    912c:	58 5a       	subi	r21, 0xA8	; 168
    912e:	5c 5e       	subi	r21, 0xEC	; 236
    9130:	60 62       	ori	r22, 0x20	; 32
    9132:	64 66       	ori	r22, 0x64	; 100
    9134:	68 6a       	ori	r22, 0xA8	; 168
    9136:	6c 6e       	ori	r22, 0xEC	; 236
    9138:	70 72       	andi	r23, 0x20	; 32
    913a:	74 76       	andi	r23, 0x64	; 100
    913c:	78 7a       	andi	r23, 0xA8	; 168
    913e:	7c 7e       	andi	r23, 0xEC	; 236
    9140:	7f 7d       	andi	r23, 0xDF	; 223
    9142:	7b 79       	andi	r23, 0x9B	; 155
    9144:	77 75       	andi	r23, 0x57	; 87
    9146:	73 71       	andi	r23, 0x13	; 19
    9148:	6f 6d       	ori	r22, 0xDF	; 223
    914a:	6b 69       	ori	r22, 0x9B	; 155
    914c:	67 65       	ori	r22, 0x57	; 87
    914e:	63 61       	ori	r22, 0x13	; 19
    9150:	5f 5d       	subi	r21, 0xDF	; 223
    9152:	5b 59       	subi	r21, 0x9B	; 155
    9154:	57 55       	subi	r21, 0x57	; 87
    9156:	53 51       	subi	r21, 0x13	; 19
    9158:	4f 4d       	sbci	r20, 0xDF	; 223
    915a:	4b 49       	sbci	r20, 0x9B	; 155
    915c:	47 45       	sbci	r20, 0x57	; 87
    915e:	43 41       	sbci	r20, 0x13	; 19
    9160:	3f 3d       	cpi	r19, 0xDF	; 223
    9162:	3b 39       	cpi	r19, 0x9B	; 155
    9164:	37 35       	cpi	r19, 0x57	; 87
    9166:	33 31       	cpi	r19, 0x13	; 19
    9168:	2f 2d       	mov	r18, r15
    916a:	2b 29       	or	r18, r11
    916c:	27 25       	eor	r18, r7
    916e:	23 21       	and	r18, r3
    9170:	1f 1d       	adc	r17, r15
    9172:	1b 19       	sub	r17, r11
    9174:	17 15       	cp	r17, r7
    9176:	13 11       	cpse	r17, r3
    9178:	0f 0d       	add	r16, r15
    917a:	0b 09       	sbc	r16, r11
    917c:	07 05       	cpc	r16, r7
    917e:	03 01       	movw	r0, r6
    9180:	ff fd       	.word	0xfdff	; ????
    9182:	fb f9       	.word	0xf9fb	; ????
    9184:	f7 f5       	brid	.+124    	; 0x9202 <waves+0x302>
    9186:	f3 f1       	brvs	.+124    	; 0x9204 <waves+0x304>
    9188:	ef ed       	ldi	r30, 0xDF	; 223
    918a:	eb e9       	ldi	r30, 0x9B	; 155
    918c:	e7 e5       	ldi	r30, 0x57	; 87
    918e:	e3 e1       	ldi	r30, 0x13	; 19
    9190:	df dd       	rcall	.-1090   	; 0x8d50 <steptable+0x48>
    9192:	db d9       	rcall	.-3146   	; 0x854a <StopSong+0x14>
    9194:	d7 d5       	rcall	.+2990   	; 0x9d44 <FadeIn+0x2>
    9196:	d3 d1       	rcall	.+934    	; 0x953e <waves+0x63e>
    9198:	cf cd       	rjmp	.-1122   	; 0x8d38 <steptable+0x30>
    919a:	cb c9       	rjmp	.-3178   	; 0x8532 <StartSong+0x4e>
    919c:	c7 c5       	rjmp	.+2958   	; 0x9d2c <doFade+0x6>
    919e:	c3 c1       	rjmp	.+902    	; 0x9526 <waves+0x626>
    91a0:	bf bd       	out	0x2f, r27	; 47
    91a2:	bb b9       	out	0x0b, r27	; 11
    91a4:	b7 b5       	in	r27, 0x27	; 39
    91a6:	b3 b1       	in	r27, 0x03	; 3
    91a8:	af ad       	ldd	r26, Y+63	; 0x3f
    91aa:	ab a9       	ldd	r26, Y+51	; 0x33
    91ac:	a7 a5       	ldd	r26, Z+47	; 0x2f
    91ae:	a3 a1       	ldd	r26, Z+35	; 0x23
    91b0:	9f 9d       	mul	r25, r15
    91b2:	9b 99       	sbic	0x13, 3	; 19
    91b4:	97 95       	ror	r25
    91b6:	93 91       	.word	0x9193	; ????
    91b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    91ba:	8b 89       	ldd	r24, Y+19	; 0x13
    91bc:	87 85       	ldd	r24, Z+15	; 0x0f
    91be:	83 81       	ldd	r24, Z+3	; 0x03
    91c0:	80 82       	st	Z, r8
    91c2:	84 86       	std	Z+12, r8	; 0x0c
    91c4:	88 8a       	std	Y+16, r8	; 0x10
    91c6:	8c 8e       	std	Y+28, r8	; 0x1c
    91c8:	90 92 94 96 	sts	0x9694, r9
    91cc:	98 9a       	sbi	0x13, 0	; 19
    91ce:	9c 9e       	mul	r9, r28
    91d0:	a0 a2       	std	Z+32, r10	; 0x20
    91d2:	a4 a6       	std	Z+44, r10	; 0x2c
    91d4:	a8 aa       	std	Y+48, r10	; 0x30
    91d6:	ac ae       	std	Y+60, r10	; 0x3c
    91d8:	b0 b2       	in	r11, 0x10	; 16
    91da:	b4 b6       	in	r11, 0x34	; 52
    91dc:	b8 ba       	out	0x18, r11	; 24
    91de:	bc be       	out	0x3c, r11	; 60
    91e0:	c0 c2       	rjmp	.+1408   	; 0x9762 <waves+0x862>
    91e2:	c4 c6       	rjmp	.+3464   	; 0x9f6c <LBPrint+0x30>
    91e4:	c8 ca       	rjmp	.-2672   	; 0x8776 <TriggerNote+0x2c>
    91e6:	cc ce       	rjmp	.-616    	; 0x8f80 <waves+0x80>
    91e8:	d0 d2       	rcall	.+1440   	; 0x978a <waves+0x88a>
    91ea:	d4 d6       	rcall	.+3496   	; 0x9f94 <LBPrintByte+0x20>
    91ec:	d8 da       	rcall	.-2640   	; 0x879e <TriggerNote+0x54>
    91ee:	dc de       	rcall	.-584    	; 0x8fa8 <waves+0xa8>
    91f0:	e0 e2       	ldi	r30, 0x20	; 32
    91f2:	e4 e6       	ldi	r30, 0x64	; 100
    91f4:	e8 ea       	ldi	r30, 0xA8	; 168
    91f6:	ec ee       	ldi	r30, 0xEC	; 236
    91f8:	f0 f2       	brcs	.-68     	; 0x91b6 <waves+0x2b6>
    91fa:	f4 f6       	brge	.-68     	; 0x91b8 <waves+0x2b8>
    91fc:	f8 fa       	.word	0xfaf8	; ????
    91fe:	fc fe       	.word	0xfefc	; ????
    9200:	7f 7f       	andi	r23, 0xFF	; 255
    9202:	7f 7f       	andi	r23, 0xFF	; 255
    9204:	7f 7f       	andi	r23, 0xFF	; 255
    9206:	7f 7f       	andi	r23, 0xFF	; 255
    9208:	7f 7f       	andi	r23, 0xFF	; 255
    920a:	7f 7f       	andi	r23, 0xFF	; 255
    920c:	7f 7f       	andi	r23, 0xFF	; 255
    920e:	7f 7f       	andi	r23, 0xFF	; 255
    9210:	7f 7f       	andi	r23, 0xFF	; 255
    9212:	7f 7f       	andi	r23, 0xFF	; 255
    9214:	7f 7f       	andi	r23, 0xFF	; 255
    9216:	7f 7f       	andi	r23, 0xFF	; 255
    9218:	7f 7f       	andi	r23, 0xFF	; 255
    921a:	7f 7f       	andi	r23, 0xFF	; 255
    921c:	7f 7f       	andi	r23, 0xFF	; 255
    921e:	7f 7f       	andi	r23, 0xFF	; 255
    9220:	7f 7f       	andi	r23, 0xFF	; 255
    9222:	7f 7f       	andi	r23, 0xFF	; 255
    9224:	7f 7f       	andi	r23, 0xFF	; 255
    9226:	7f 7f       	andi	r23, 0xFF	; 255
    9228:	7f 7f       	andi	r23, 0xFF	; 255
    922a:	7f 7f       	andi	r23, 0xFF	; 255
    922c:	7f 7f       	andi	r23, 0xFF	; 255
    922e:	7f 7f       	andi	r23, 0xFF	; 255
    9230:	7f 7f       	andi	r23, 0xFF	; 255
    9232:	7f 7f       	andi	r23, 0xFF	; 255
    9234:	7f 7f       	andi	r23, 0xFF	; 255
    9236:	7f 7f       	andi	r23, 0xFF	; 255
    9238:	7f 7f       	andi	r23, 0xFF	; 255
    923a:	7f 7f       	andi	r23, 0xFF	; 255
    923c:	7f 7f       	andi	r23, 0xFF	; 255
    923e:	7f 7f       	andi	r23, 0xFF	; 255
    9240:	80 80       	ld	r8, Z
    9242:	80 80       	ld	r8, Z
    9244:	80 80       	ld	r8, Z
    9246:	80 80       	ld	r8, Z
    9248:	80 80       	ld	r8, Z
    924a:	80 80       	ld	r8, Z
    924c:	80 80       	ld	r8, Z
    924e:	80 80       	ld	r8, Z
    9250:	80 80       	ld	r8, Z
    9252:	80 80       	ld	r8, Z
    9254:	80 80       	ld	r8, Z
    9256:	80 80       	ld	r8, Z
    9258:	80 80       	ld	r8, Z
    925a:	80 80       	ld	r8, Z
    925c:	80 80       	ld	r8, Z
    925e:	80 80       	ld	r8, Z
    9260:	80 80       	ld	r8, Z
    9262:	80 80       	ld	r8, Z
    9264:	80 80       	ld	r8, Z
    9266:	80 80       	ld	r8, Z
    9268:	80 80       	ld	r8, Z
    926a:	80 80       	ld	r8, Z
    926c:	80 80       	ld	r8, Z
    926e:	80 80       	ld	r8, Z
    9270:	80 80       	ld	r8, Z
    9272:	80 80       	ld	r8, Z
    9274:	80 80       	ld	r8, Z
    9276:	80 80       	ld	r8, Z
    9278:	80 80       	ld	r8, Z
    927a:	80 80       	ld	r8, Z
    927c:	80 80       	ld	r8, Z
    927e:	80 80       	ld	r8, Z
    9280:	80 80       	ld	r8, Z
    9282:	80 80       	ld	r8, Z
    9284:	80 80       	ld	r8, Z
    9286:	80 80       	ld	r8, Z
    9288:	80 80       	ld	r8, Z
    928a:	80 80       	ld	r8, Z
    928c:	80 80       	ld	r8, Z
    928e:	80 80       	ld	r8, Z
    9290:	80 80       	ld	r8, Z
    9292:	80 80       	ld	r8, Z
    9294:	80 80       	ld	r8, Z
    9296:	80 80       	ld	r8, Z
    9298:	80 80       	ld	r8, Z
    929a:	80 80       	ld	r8, Z
    929c:	80 80       	ld	r8, Z
    929e:	80 80       	ld	r8, Z
    92a0:	80 80       	ld	r8, Z
    92a2:	80 80       	ld	r8, Z
    92a4:	80 80       	ld	r8, Z
    92a6:	80 80       	ld	r8, Z
    92a8:	80 80       	ld	r8, Z
    92aa:	80 80       	ld	r8, Z
    92ac:	80 80       	ld	r8, Z
    92ae:	80 80       	ld	r8, Z
    92b0:	80 80       	ld	r8, Z
    92b2:	80 80       	ld	r8, Z
    92b4:	80 80       	ld	r8, Z
    92b6:	80 80       	ld	r8, Z
    92b8:	80 80       	ld	r8, Z
    92ba:	80 80       	ld	r8, Z
    92bc:	80 80       	ld	r8, Z
    92be:	80 80       	ld	r8, Z
    92c0:	80 80       	ld	r8, Z
    92c2:	80 80       	ld	r8, Z
    92c4:	80 80       	ld	r8, Z
    92c6:	80 80       	ld	r8, Z
    92c8:	80 80       	ld	r8, Z
    92ca:	80 80       	ld	r8, Z
    92cc:	80 80       	ld	r8, Z
    92ce:	80 80       	ld	r8, Z
    92d0:	80 80       	ld	r8, Z
    92d2:	80 80       	ld	r8, Z
    92d4:	80 80       	ld	r8, Z
    92d6:	80 80       	ld	r8, Z
    92d8:	80 80       	ld	r8, Z
    92da:	80 80       	ld	r8, Z
    92dc:	80 80       	ld	r8, Z
    92de:	80 80       	ld	r8, Z
    92e0:	80 80       	ld	r8, Z
    92e2:	80 80       	ld	r8, Z
    92e4:	80 80       	ld	r8, Z
    92e6:	80 80       	ld	r8, Z
    92e8:	80 80       	ld	r8, Z
    92ea:	80 80       	ld	r8, Z
    92ec:	80 80       	ld	r8, Z
    92ee:	80 80       	ld	r8, Z
    92f0:	80 80       	ld	r8, Z
    92f2:	80 80       	ld	r8, Z
    92f4:	80 80       	ld	r8, Z
    92f6:	80 80       	ld	r8, Z
    92f8:	80 80       	ld	r8, Z
    92fa:	80 80       	ld	r8, Z
    92fc:	80 80       	ld	r8, Z
    92fe:	80 80       	ld	r8, Z
    9300:	7f 7f       	andi	r23, 0xFF	; 255
    9302:	7f 7f       	andi	r23, 0xFF	; 255
    9304:	7f 7f       	andi	r23, 0xFF	; 255
    9306:	7f 7f       	andi	r23, 0xFF	; 255
    9308:	7f 7f       	andi	r23, 0xFF	; 255
    930a:	7f 7f       	andi	r23, 0xFF	; 255
    930c:	7f 7f       	andi	r23, 0xFF	; 255
    930e:	7f 7f       	andi	r23, 0xFF	; 255
    9310:	7f 7f       	andi	r23, 0xFF	; 255
    9312:	7f 7f       	andi	r23, 0xFF	; 255
    9314:	7f 7f       	andi	r23, 0xFF	; 255
    9316:	7f 7f       	andi	r23, 0xFF	; 255
    9318:	7f 7f       	andi	r23, 0xFF	; 255
    931a:	7f 7f       	andi	r23, 0xFF	; 255
    931c:	7f 7f       	andi	r23, 0xFF	; 255
    931e:	7f 7f       	andi	r23, 0xFF	; 255
    9320:	7f 7f       	andi	r23, 0xFF	; 255
    9322:	7f 7f       	andi	r23, 0xFF	; 255
    9324:	7f 7f       	andi	r23, 0xFF	; 255
    9326:	7f 7f       	andi	r23, 0xFF	; 255
    9328:	7f 7f       	andi	r23, 0xFF	; 255
    932a:	7f 7f       	andi	r23, 0xFF	; 255
    932c:	7f 7f       	andi	r23, 0xFF	; 255
    932e:	7f 7f       	andi	r23, 0xFF	; 255
    9330:	7f 7f       	andi	r23, 0xFF	; 255
    9332:	7f 7f       	andi	r23, 0xFF	; 255
    9334:	7f 7f       	andi	r23, 0xFF	; 255
    9336:	7f 7f       	andi	r23, 0xFF	; 255
    9338:	7f 7f       	andi	r23, 0xFF	; 255
    933a:	7f 7f       	andi	r23, 0xFF	; 255
    933c:	7f 7f       	andi	r23, 0xFF	; 255
    933e:	7f 7f       	andi	r23, 0xFF	; 255
    9340:	7f 7f       	andi	r23, 0xFF	; 255
    9342:	7f 7f       	andi	r23, 0xFF	; 255
    9344:	7f 7f       	andi	r23, 0xFF	; 255
    9346:	7f 7f       	andi	r23, 0xFF	; 255
    9348:	7f 7f       	andi	r23, 0xFF	; 255
    934a:	7f 7f       	andi	r23, 0xFF	; 255
    934c:	7f 7f       	andi	r23, 0xFF	; 255
    934e:	7f 7f       	andi	r23, 0xFF	; 255
    9350:	7f 7f       	andi	r23, 0xFF	; 255
    9352:	7f 7f       	andi	r23, 0xFF	; 255
    9354:	7f 7f       	andi	r23, 0xFF	; 255
    9356:	7f 7f       	andi	r23, 0xFF	; 255
    9358:	7f 7f       	andi	r23, 0xFF	; 255
    935a:	7f 7f       	andi	r23, 0xFF	; 255
    935c:	7f 7f       	andi	r23, 0xFF	; 255
    935e:	7f 7f       	andi	r23, 0xFF	; 255
    9360:	7f 7f       	andi	r23, 0xFF	; 255
    9362:	7f 7f       	andi	r23, 0xFF	; 255
    9364:	7f 7f       	andi	r23, 0xFF	; 255
    9366:	7f 7f       	andi	r23, 0xFF	; 255
    9368:	7f 7f       	andi	r23, 0xFF	; 255
    936a:	7f 7f       	andi	r23, 0xFF	; 255
    936c:	7f 7f       	andi	r23, 0xFF	; 255
    936e:	7f 7f       	andi	r23, 0xFF	; 255
    9370:	7f 7f       	andi	r23, 0xFF	; 255
    9372:	7f 7f       	andi	r23, 0xFF	; 255
    9374:	7f 7f       	andi	r23, 0xFF	; 255
    9376:	7f 7f       	andi	r23, 0xFF	; 255
    9378:	7f 7f       	andi	r23, 0xFF	; 255
    937a:	7f 7f       	andi	r23, 0xFF	; 255
    937c:	7f 7f       	andi	r23, 0xFF	; 255
    937e:	7f 7f       	andi	r23, 0xFF	; 255
    9380:	80 80       	ld	r8, Z
    9382:	80 80       	ld	r8, Z
    9384:	80 80       	ld	r8, Z
    9386:	80 80       	ld	r8, Z
    9388:	80 80       	ld	r8, Z
    938a:	80 80       	ld	r8, Z
    938c:	80 80       	ld	r8, Z
    938e:	80 80       	ld	r8, Z
    9390:	80 80       	ld	r8, Z
    9392:	80 80       	ld	r8, Z
    9394:	80 80       	ld	r8, Z
    9396:	80 80       	ld	r8, Z
    9398:	80 80       	ld	r8, Z
    939a:	80 80       	ld	r8, Z
    939c:	80 80       	ld	r8, Z
    939e:	80 80       	ld	r8, Z
    93a0:	80 80       	ld	r8, Z
    93a2:	80 80       	ld	r8, Z
    93a4:	80 80       	ld	r8, Z
    93a6:	80 80       	ld	r8, Z
    93a8:	80 80       	ld	r8, Z
    93aa:	80 80       	ld	r8, Z
    93ac:	80 80       	ld	r8, Z
    93ae:	80 80       	ld	r8, Z
    93b0:	80 80       	ld	r8, Z
    93b2:	80 80       	ld	r8, Z
    93b4:	80 80       	ld	r8, Z
    93b6:	80 80       	ld	r8, Z
    93b8:	80 80       	ld	r8, Z
    93ba:	80 80       	ld	r8, Z
    93bc:	80 80       	ld	r8, Z
    93be:	80 80       	ld	r8, Z
    93c0:	80 80       	ld	r8, Z
    93c2:	80 80       	ld	r8, Z
    93c4:	80 80       	ld	r8, Z
    93c6:	80 80       	ld	r8, Z
    93c8:	80 80       	ld	r8, Z
    93ca:	80 80       	ld	r8, Z
    93cc:	80 80       	ld	r8, Z
    93ce:	80 80       	ld	r8, Z
    93d0:	80 80       	ld	r8, Z
    93d2:	80 80       	ld	r8, Z
    93d4:	80 80       	ld	r8, Z
    93d6:	80 80       	ld	r8, Z
    93d8:	80 80       	ld	r8, Z
    93da:	80 80       	ld	r8, Z
    93dc:	80 80       	ld	r8, Z
    93de:	80 80       	ld	r8, Z
    93e0:	80 80       	ld	r8, Z
    93e2:	80 80       	ld	r8, Z
    93e4:	80 80       	ld	r8, Z
    93e6:	80 80       	ld	r8, Z
    93e8:	80 80       	ld	r8, Z
    93ea:	80 80       	ld	r8, Z
    93ec:	80 80       	ld	r8, Z
    93ee:	80 80       	ld	r8, Z
    93f0:	80 80       	ld	r8, Z
    93f2:	80 80       	ld	r8, Z
    93f4:	80 80       	ld	r8, Z
    93f6:	80 80       	ld	r8, Z
    93f8:	80 80       	ld	r8, Z
    93fa:	80 80       	ld	r8, Z
    93fc:	80 80       	ld	r8, Z
    93fe:	80 80       	ld	r8, Z
    9400:	7f 7f       	andi	r23, 0xFF	; 255
    9402:	7f 7f       	andi	r23, 0xFF	; 255
    9404:	7f 7f       	andi	r23, 0xFF	; 255
    9406:	7f 7f       	andi	r23, 0xFF	; 255
    9408:	7f 7f       	andi	r23, 0xFF	; 255
    940a:	7f 7f       	andi	r23, 0xFF	; 255
    940c:	7f 7f       	andi	r23, 0xFF	; 255
    940e:	7f 7f       	andi	r23, 0xFF	; 255
    9410:	7f 7f       	andi	r23, 0xFF	; 255
    9412:	7f 7f       	andi	r23, 0xFF	; 255
    9414:	7f 7f       	andi	r23, 0xFF	; 255
    9416:	7f 7f       	andi	r23, 0xFF	; 255
    9418:	7f 7f       	andi	r23, 0xFF	; 255
    941a:	7f 7f       	andi	r23, 0xFF	; 255
    941c:	7f 7f       	andi	r23, 0xFF	; 255
    941e:	7f 7f       	andi	r23, 0xFF	; 255
    9420:	7f 7f       	andi	r23, 0xFF	; 255
    9422:	7f 7f       	andi	r23, 0xFF	; 255
    9424:	7f 7f       	andi	r23, 0xFF	; 255
    9426:	7f 7f       	andi	r23, 0xFF	; 255
    9428:	7f 7f       	andi	r23, 0xFF	; 255
    942a:	7f 7f       	andi	r23, 0xFF	; 255
    942c:	7f 7f       	andi	r23, 0xFF	; 255
    942e:	7f 7f       	andi	r23, 0xFF	; 255
    9430:	7f 7f       	andi	r23, 0xFF	; 255
    9432:	7f 7f       	andi	r23, 0xFF	; 255
    9434:	7f 7f       	andi	r23, 0xFF	; 255
    9436:	7f 7f       	andi	r23, 0xFF	; 255
    9438:	7f 7f       	andi	r23, 0xFF	; 255
    943a:	7f 7f       	andi	r23, 0xFF	; 255
    943c:	7f 7f       	andi	r23, 0xFF	; 255
    943e:	7f 7f       	andi	r23, 0xFF	; 255
    9440:	7f 7f       	andi	r23, 0xFF	; 255
    9442:	7f 7f       	andi	r23, 0xFF	; 255
    9444:	7f 7f       	andi	r23, 0xFF	; 255
    9446:	7f 7f       	andi	r23, 0xFF	; 255
    9448:	7f 7f       	andi	r23, 0xFF	; 255
    944a:	7f 7f       	andi	r23, 0xFF	; 255
    944c:	7f 7f       	andi	r23, 0xFF	; 255
    944e:	7f 7f       	andi	r23, 0xFF	; 255
    9450:	7f 7f       	andi	r23, 0xFF	; 255
    9452:	7f 7f       	andi	r23, 0xFF	; 255
    9454:	7f 7f       	andi	r23, 0xFF	; 255
    9456:	7f 7f       	andi	r23, 0xFF	; 255
    9458:	7f 7f       	andi	r23, 0xFF	; 255
    945a:	7f 7f       	andi	r23, 0xFF	; 255
    945c:	7f 7f       	andi	r23, 0xFF	; 255
    945e:	7f 7f       	andi	r23, 0xFF	; 255
    9460:	7f 7f       	andi	r23, 0xFF	; 255
    9462:	7f 7f       	andi	r23, 0xFF	; 255
    9464:	7f 7f       	andi	r23, 0xFF	; 255
    9466:	7f 7f       	andi	r23, 0xFF	; 255
    9468:	7f 7f       	andi	r23, 0xFF	; 255
    946a:	7f 7f       	andi	r23, 0xFF	; 255
    946c:	7f 7f       	andi	r23, 0xFF	; 255
    946e:	7f 7f       	andi	r23, 0xFF	; 255
    9470:	7f 7f       	andi	r23, 0xFF	; 255
    9472:	7f 7f       	andi	r23, 0xFF	; 255
    9474:	7f 7f       	andi	r23, 0xFF	; 255
    9476:	7f 7f       	andi	r23, 0xFF	; 255
    9478:	7f 7f       	andi	r23, 0xFF	; 255
    947a:	7f 7f       	andi	r23, 0xFF	; 255
    947c:	7f 7f       	andi	r23, 0xFF	; 255
    947e:	7f 7f       	andi	r23, 0xFF	; 255
    9480:	7f 7f       	andi	r23, 0xFF	; 255
    9482:	7f 7f       	andi	r23, 0xFF	; 255
    9484:	7f 7f       	andi	r23, 0xFF	; 255
    9486:	7f 7f       	andi	r23, 0xFF	; 255
    9488:	7f 7f       	andi	r23, 0xFF	; 255
    948a:	7f 7f       	andi	r23, 0xFF	; 255
    948c:	7f 7f       	andi	r23, 0xFF	; 255
    948e:	7f 7f       	andi	r23, 0xFF	; 255
    9490:	7f 7f       	andi	r23, 0xFF	; 255
    9492:	7f 7f       	andi	r23, 0xFF	; 255
    9494:	7f 7f       	andi	r23, 0xFF	; 255
    9496:	7f 7f       	andi	r23, 0xFF	; 255
    9498:	7f 7f       	andi	r23, 0xFF	; 255
    949a:	7f 7f       	andi	r23, 0xFF	; 255
    949c:	7f 7f       	andi	r23, 0xFF	; 255
    949e:	7f 7f       	andi	r23, 0xFF	; 255
    94a0:	7f 7f       	andi	r23, 0xFF	; 255
    94a2:	7f 7f       	andi	r23, 0xFF	; 255
    94a4:	7f 7f       	andi	r23, 0xFF	; 255
    94a6:	7f 7f       	andi	r23, 0xFF	; 255
    94a8:	7f 7f       	andi	r23, 0xFF	; 255
    94aa:	7f 7f       	andi	r23, 0xFF	; 255
    94ac:	7f 7f       	andi	r23, 0xFF	; 255
    94ae:	7f 7f       	andi	r23, 0xFF	; 255
    94b0:	7f 7f       	andi	r23, 0xFF	; 255
    94b2:	7f 7f       	andi	r23, 0xFF	; 255
    94b4:	7f 7f       	andi	r23, 0xFF	; 255
    94b6:	7f 7f       	andi	r23, 0xFF	; 255
    94b8:	7f 7f       	andi	r23, 0xFF	; 255
    94ba:	7f 7f       	andi	r23, 0xFF	; 255
    94bc:	7f 7f       	andi	r23, 0xFF	; 255
    94be:	7f 7f       	andi	r23, 0xFF	; 255
    94c0:	80 80       	ld	r8, Z
    94c2:	80 80       	ld	r8, Z
    94c4:	80 80       	ld	r8, Z
    94c6:	80 80       	ld	r8, Z
    94c8:	80 80       	ld	r8, Z
    94ca:	80 80       	ld	r8, Z
    94cc:	80 80       	ld	r8, Z
    94ce:	80 80       	ld	r8, Z
    94d0:	80 80       	ld	r8, Z
    94d2:	80 80       	ld	r8, Z
    94d4:	80 80       	ld	r8, Z
    94d6:	80 80       	ld	r8, Z
    94d8:	80 80       	ld	r8, Z
    94da:	80 80       	ld	r8, Z
    94dc:	80 80       	ld	r8, Z
    94de:	80 80       	ld	r8, Z
    94e0:	80 80       	ld	r8, Z
    94e2:	80 80       	ld	r8, Z
    94e4:	80 80       	ld	r8, Z
    94e6:	80 80       	ld	r8, Z
    94e8:	80 80       	ld	r8, Z
    94ea:	80 80       	ld	r8, Z
    94ec:	80 80       	ld	r8, Z
    94ee:	80 80       	ld	r8, Z
    94f0:	80 80       	ld	r8, Z
    94f2:	80 80       	ld	r8, Z
    94f4:	80 80       	ld	r8, Z
    94f6:	80 80       	ld	r8, Z
    94f8:	80 80       	ld	r8, Z
    94fa:	80 80       	ld	r8, Z
    94fc:	80 80       	ld	r8, Z
    94fe:	80 80       	ld	r8, Z
    9500:	03 09       	sbc	r16, r3
    9502:	13 1e       	adc	r1, r19
    9504:	28 31       	cpi	r18, 0x18	; 24
    9506:	3a 40       	sbci	r19, 0x0A	; 10
    9508:	46 4c       	sbci	r20, 0xC6	; 198
    950a:	50 54       	subi	r21, 0x40	; 64
    950c:	58 5b       	subi	r21, 0xB8	; 184
    950e:	5e 61       	ori	r21, 0x1E	; 30
    9510:	63 65       	ori	r22, 0x53	; 83
    9512:	67 69       	ori	r22, 0x97	; 151
    9514:	6b 6c       	ori	r22, 0xCB	; 203
    9516:	6e 6f       	ori	r22, 0xFE	; 254
    9518:	70 71       	andi	r23, 0x10	; 16
    951a:	72 73       	andi	r23, 0x32	; 50
    951c:	74 75       	andi	r23, 0x54	; 84
    951e:	76 77       	andi	r23, 0x76	; 118
    9520:	77 78       	andi	r23, 0x87	; 135
    9522:	79 79       	andi	r23, 0x99	; 153
    9524:	7a 7a       	andi	r23, 0xAA	; 170
    9526:	7b 7b       	andi	r23, 0xBB	; 187
    9528:	7c 7c       	andi	r23, 0xCC	; 204
    952a:	7c 7d       	andi	r23, 0xDC	; 220
    952c:	7d 7d       	andi	r23, 0xDD	; 221
    952e:	7e 7e       	andi	r23, 0xEE	; 238
    9530:	7e 7e       	andi	r23, 0xEE	; 238
    9532:	7f 7f       	andi	r23, 0xFF	; 255
    9534:	7f 7f       	andi	r23, 0xFF	; 255
    9536:	7f 7f       	andi	r23, 0xFF	; 255
    9538:	7f 7f       	andi	r23, 0xFF	; 255
    953a:	7f 7f       	andi	r23, 0xFF	; 255
    953c:	7f 7f       	andi	r23, 0xFF	; 255
    953e:	7f 7f       	andi	r23, 0xFF	; 255
    9540:	7f 7f       	andi	r23, 0xFF	; 255
    9542:	7f 7f       	andi	r23, 0xFF	; 255
    9544:	7f 7f       	andi	r23, 0xFF	; 255
    9546:	7f 7f       	andi	r23, 0xFF	; 255
    9548:	7f 7f       	andi	r23, 0xFF	; 255
    954a:	7f 7f       	andi	r23, 0xFF	; 255
    954c:	7f 7e       	andi	r23, 0xEF	; 239
    954e:	7e 7e       	andi	r23, 0xEE	; 238
    9550:	7e 7d       	andi	r23, 0xDE	; 222
    9552:	7d 7d       	andi	r23, 0xDD	; 221
    9554:	7c 7c       	andi	r23, 0xCC	; 204
    9556:	7c 7b       	andi	r23, 0xBC	; 188
    9558:	7b 7a       	andi	r23, 0xAB	; 171
    955a:	7a 79       	andi	r23, 0x9A	; 154
    955c:	79 78       	andi	r23, 0x89	; 137
    955e:	77 77       	andi	r23, 0x77	; 119
    9560:	76 75       	andi	r23, 0x56	; 86
    9562:	74 73       	andi	r23, 0x34	; 52
    9564:	72 71       	andi	r23, 0x12	; 18
    9566:	70 6f       	ori	r23, 0xF0	; 240
    9568:	6e 6c       	ori	r22, 0xCE	; 206
    956a:	6b 69       	ori	r22, 0x9B	; 155
    956c:	67 65       	ori	r22, 0x57	; 87
    956e:	63 61       	ori	r22, 0x13	; 19
    9570:	5e 5b       	subi	r21, 0xBE	; 190
    9572:	58 54       	subi	r21, 0x48	; 72
    9574:	50 4c       	sbci	r21, 0xC0	; 192
    9576:	46 40       	sbci	r20, 0x06	; 6
    9578:	3a 31       	cpi	r19, 0x1A	; 26
    957a:	28 1e       	adc	r2, r24
    957c:	13 09       	sbc	r17, r3
    957e:	03 00       	.word	0x0003	; ????
    9580:	c6 cc       	rjmp	.-1652   	; 0x8f0e <waves+0xe>
    9582:	d5 db       	rcall	.-2134   	; 0x8d2e <steptable+0x26>
    9584:	df e3       	ldi	r29, 0x3F	; 63
    9586:	e5 e7       	ldi	r30, 0x75	; 117
    9588:	e9 ea       	ldi	r30, 0xA9	; 169
    958a:	eb ec       	ldi	r30, 0xCB	; 203
    958c:	ed ee       	ldi	r30, 0xED	; 237
    958e:	ef ef       	ldi	r30, 0xFF	; 255
    9590:	f0 f0       	brcs	.+60     	; 0x95ce <waves+0x6ce>
    9592:	f0 f1       	brcs	.+124    	; 0x9610 <waves+0x710>
    9594:	f1 f1       	breq	.+124    	; 0x9612 <waves+0x712>
    9596:	f1 f2       	breq	.-68     	; 0x9554 <waves+0x654>
    9598:	f2 f2       	brmi	.-68     	; 0x9556 <waves+0x656>
    959a:	f2 f2       	brmi	.-68     	; 0x9558 <waves+0x658>
    959c:	f2 f2       	brmi	.-68     	; 0x955a <waves+0x65a>
    959e:	f2 f3       	brmi	.-4      	; 0x959c <waves+0x69c>
    95a0:	f3 f3       	brvs	.-4      	; 0x959e <waves+0x69e>
    95a2:	f3 f3       	brvs	.-4      	; 0x95a0 <waves+0x6a0>
    95a4:	f3 f3       	brvs	.-4      	; 0x95a2 <waves+0x6a2>
    95a6:	f3 f3       	brvs	.-4      	; 0x95a4 <waves+0x6a4>
    95a8:	f3 f3       	brvs	.-4      	; 0x95a6 <waves+0x6a6>
    95aa:	f3 f3       	brvs	.-4      	; 0x95a8 <waves+0x6a8>
    95ac:	f3 f3       	brvs	.-4      	; 0x95aa <waves+0x6aa>
    95ae:	f3 f3       	brvs	.-4      	; 0x95ac <waves+0x6ac>
    95b0:	f3 f3       	brvs	.-4      	; 0x95ae <waves+0x6ae>
    95b2:	f3 f3       	brvs	.-4      	; 0x95b0 <waves+0x6b0>
    95b4:	f3 f3       	brvs	.-4      	; 0x95b2 <waves+0x6b2>
    95b6:	f3 f3       	brvs	.-4      	; 0x95b4 <waves+0x6b4>
    95b8:	f3 f3       	brvs	.-4      	; 0x95b6 <waves+0x6b6>
    95ba:	f3 f3       	brvs	.-4      	; 0x95b8 <waves+0x6b8>
    95bc:	f3 f3       	brvs	.-4      	; 0x95ba <waves+0x6ba>
    95be:	f3 f3       	brvs	.-4      	; 0x95bc <waves+0x6bc>
    95c0:	f3 f3       	brvs	.-4      	; 0x95be <waves+0x6be>
    95c2:	f3 f3       	brvs	.-4      	; 0x95c0 <waves+0x6c0>
    95c4:	f3 f3       	brvs	.-4      	; 0x95c2 <waves+0x6c2>
    95c6:	f3 f3       	brvs	.-4      	; 0x95c4 <waves+0x6c4>
    95c8:	f3 f3       	brvs	.-4      	; 0x95c6 <waves+0x6c6>
    95ca:	f3 f3       	brvs	.-4      	; 0x95c8 <waves+0x6c8>
    95cc:	f3 f3       	brvs	.-4      	; 0x95ca <waves+0x6ca>
    95ce:	f3 f3       	brvs	.-4      	; 0x95cc <waves+0x6cc>
    95d0:	f3 f3       	brvs	.-4      	; 0x95ce <waves+0x6ce>
    95d2:	f3 f3       	brvs	.-4      	; 0x95d0 <waves+0x6d0>
    95d4:	f3 f3       	brvs	.-4      	; 0x95d2 <waves+0x6d2>
    95d6:	f3 f3       	brvs	.-4      	; 0x95d4 <waves+0x6d4>
    95d8:	f3 f3       	brvs	.-4      	; 0x95d6 <waves+0x6d6>
    95da:	f3 f3       	brvs	.-4      	; 0x95d8 <waves+0x6d8>
    95dc:	f3 f3       	brvs	.-4      	; 0x95da <waves+0x6da>
    95de:	f3 f3       	brvs	.-4      	; 0x95dc <waves+0x6dc>
    95e0:	f2 f2       	brmi	.-68     	; 0x959e <waves+0x69e>
    95e2:	f2 f2       	brmi	.-68     	; 0x95a0 <waves+0x6a0>
    95e4:	f2 f2       	brmi	.-68     	; 0x95a2 <waves+0x6a2>
    95e6:	f2 f2       	brmi	.-68     	; 0x95a4 <waves+0x6a4>
    95e8:	f1 f1       	breq	.+124    	; 0x9666 <waves+0x766>
    95ea:	f1 f1       	breq	.+124    	; 0x9668 <waves+0x768>
    95ec:	f0 f0       	brcs	.+60     	; 0x962a <waves+0x72a>
    95ee:	f0 ef       	ldi	r31, 0xF0	; 240
    95f0:	ef ee       	ldi	r30, 0xEF	; 239
    95f2:	ed ec       	ldi	r30, 0xCD	; 205
    95f4:	eb ea       	ldi	r30, 0xAB	; 171
    95f6:	e9 e7       	ldi	r30, 0x79	; 121
    95f8:	e5 e3       	ldi	r30, 0x35	; 53
    95fa:	df db       	rcall	.-2114   	; 0x8dba <steptable+0xb2>
    95fc:	d5 cc       	rjmp	.-1622   	; 0x8fa8 <waves+0xa8>
    95fe:	c6 00       	.word	0x00c6	; ????
    9600:	00 28       	or	r0, r0
    9602:	3d 42       	sbci	r19, 0x2D	; 45
    9604:	30 2d       	mov	r19, r0
    9606:	2c 2b       	or	r18, r28
    9608:	2c 2d       	mov	r18, r12
    960a:	2e 2f       	mov	r18, r30
    960c:	30 32       	cpi	r19, 0x20	; 32
    960e:	33 35       	cpi	r19, 0x53	; 83
    9610:	37 39       	cpi	r19, 0x97	; 151
    9612:	3b 3d       	cpi	r19, 0xDB	; 219
    9614:	3f 41       	sbci	r19, 0x1F	; 31
    9616:	43 45       	sbci	r20, 0x53	; 83
    9618:	48 4a       	sbci	r20, 0xA8	; 168
    961a:	4c 4e       	sbci	r20, 0xEC	; 236
    961c:	50 53       	subi	r21, 0x30	; 48
    961e:	55 57       	subi	r21, 0x75	; 117
    9620:	59 5b       	subi	r21, 0xB9	; 185
    9622:	5d 5f       	subi	r21, 0xFD	; 253
    9624:	61 63       	ori	r22, 0x31	; 49
    9626:	65 67       	ori	r22, 0x75	; 117
    9628:	69 6b       	ori	r22, 0xB9	; 185
    962a:	6c 6e       	ori	r22, 0xEC	; 236
    962c:	70 71       	andi	r23, 0x10	; 16
    962e:	73 74       	andi	r23, 0x43	; 67
    9630:	75 77       	andi	r23, 0x75	; 117
    9632:	78 79       	andi	r23, 0x98	; 152
    9634:	7a 7b       	andi	r23, 0xBA	; 186
    9636:	7c 7d       	andi	r23, 0xDC	; 220
    9638:	7d 7e       	andi	r23, 0xED	; 237
    963a:	7e 7f       	andi	r23, 0xFE	; 254
    963c:	7f 7f       	andi	r23, 0xFF	; 255
    963e:	7f 7f       	andi	r23, 0xFF	; 255
    9640:	7f 7f       	andi	r23, 0xFF	; 255
    9642:	7f 7f       	andi	r23, 0xFF	; 255
    9644:	7f 7f       	andi	r23, 0xFF	; 255
    9646:	7e 7e       	andi	r23, 0xEE	; 238
    9648:	7d 7d       	andi	r23, 0xDD	; 221
    964a:	7c 7b       	andi	r23, 0xBC	; 188
    964c:	7a 79       	andi	r23, 0x9A	; 154
    964e:	78 77       	andi	r23, 0x78	; 120
    9650:	75 74       	andi	r23, 0x45	; 69
    9652:	73 71       	andi	r23, 0x13	; 19
    9654:	70 6e       	ori	r23, 0xE0	; 224
    9656:	6c 6b       	ori	r22, 0xBC	; 188
    9658:	69 67       	ori	r22, 0x79	; 121
    965a:	65 63       	ori	r22, 0x35	; 53
    965c:	61 5f       	subi	r22, 0xF1	; 241
    965e:	5d 5b       	subi	r21, 0xBD	; 189
    9660:	59 57       	subi	r21, 0x79	; 121
    9662:	55 53       	subi	r21, 0x35	; 53
    9664:	50 4e       	sbci	r21, 0xE0	; 224
    9666:	4c 4a       	sbci	r20, 0xAC	; 172
    9668:	48 45       	sbci	r20, 0x58	; 88
    966a:	43 41       	sbci	r20, 0x13	; 19
    966c:	3f 3d       	cpi	r19, 0xDF	; 223
    966e:	3b 39       	cpi	r19, 0x9B	; 155
    9670:	37 35       	cpi	r19, 0x57	; 87
    9672:	33 32       	cpi	r19, 0x23	; 35
    9674:	30 2f       	mov	r19, r16
    9676:	2e 2d       	mov	r18, r14
    9678:	2c 2b       	or	r18, r28
    967a:	2c 2d       	mov	r18, r12
    967c:	30 42       	sbci	r19, 0x20	; 32
    967e:	3d 28       	or	r3, r13
    9680:	00 e9       	ldi	r16, 0x90	; 144
    9682:	e5 fe       	sbrs	r14, 5
    9684:	d4 d7       	rcall	.+4008   	; 0xa62e <init_enemy_shot+0x60>
    9686:	d7 d7       	rcall	.+4014   	; 0xa636 <init_enemy_shot+0x68>
    9688:	d6 d4       	rcall	.+2476   	; 0xa036 <LBPrintInt+0x60>
    968a:	d2 d0       	rcall	.+420    	; 0x9830 <waves+0x930>
    968c:	ce cc       	rjmp	.-1636   	; 0x902a <waves+0x12a>
    968e:	ca c8       	rjmp	.-3692   	; 0x8824 <ProcessMusic+0x5a>
    9690:	c6 c3       	rjmp	.+1932   	; 0x9e1e <LBGetNextFrame+0x4>
    9692:	c1 bf       	out	0x31, r28	; 49
    9694:	bd ba       	out	0x1d, r11	; 29
    9696:	b8 b6       	in	r11, 0x38	; 56
    9698:	b4 b1       	in	r27, 0x04	; 4
    969a:	af ad       	ldd	r26, Y+63	; 0x3f
    969c:	ab a9       	ldd	r26, Y+51	; 0x33
    969e:	a7 a5       	ldd	r26, Z+47	; 0x2f
    96a0:	a3 a1       	ldd	r26, Z+35	; 0x23
    96a2:	9f 9e       	mul	r9, r31
    96a4:	9c 9a       	sbi	0x13, 4	; 19
    96a6:	99 97       	sbiw	r26, 0x29	; 41
    96a8:	95 94       	asr	r9
    96aa:	93 91       	.word	0x9193	; ????
    96ac:	90 8f       	std	Z+24, r25	; 0x18
    96ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    96b0:	8b 8a       	std	Y+19, r8	; 0x13
    96b2:	89 88       	ldd	r8, Y+17	; 0x11
    96b4:	88 87       	std	Y+8, r24	; 0x08
    96b6:	86 85       	ldd	r24, Z+14	; 0x0e
    96b8:	85 84       	ldd	r8, Z+13	; 0x0d
    96ba:	84 84       	ldd	r8, Z+12	; 0x0c
    96bc:	83 83       	std	Z+3, r24	; 0x03
    96be:	83 83       	std	Z+3, r24	; 0x03
    96c0:	83 83       	std	Z+3, r24	; 0x03
    96c2:	83 83       	std	Z+3, r24	; 0x03
    96c4:	83 84       	ldd	r8, Z+11	; 0x0b
    96c6:	84 84       	ldd	r8, Z+12	; 0x0c
    96c8:	85 85       	ldd	r24, Z+13	; 0x0d
    96ca:	86 87       	std	Z+14, r24	; 0x0e
    96cc:	88 88       	ldd	r8, Y+16	; 0x10
    96ce:	89 8a       	std	Y+17, r8	; 0x11
    96d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    96d2:	8d 8f       	std	Y+29, r24	; 0x1d
    96d4:	90 91 93 94 	lds	r25, 0x9493
    96d8:	95 97       	sbiw	r26, 0x25	; 37
    96da:	99 9a       	sbi	0x13, 1	; 19
    96dc:	9c 9e       	mul	r9, r28
    96de:	9f a1       	ldd	r25, Y+39	; 0x27
    96e0:	a3 a5       	ldd	r26, Z+43	; 0x2b
    96e2:	a7 a9       	ldd	r26, Z+55	; 0x37
    96e4:	ab ad       	ldd	r26, Y+59	; 0x3b
    96e6:	af b1       	in	r26, 0x0f	; 15
    96e8:	b4 b6       	in	r11, 0x34	; 52
    96ea:	b8 ba       	out	0x18, r11	; 24
    96ec:	bd bf       	out	0x3d, r27	; 61
    96ee:	c1 c3       	rjmp	.+1922   	; 0x9e72 <LBGetJoyPadState+0xc>
    96f0:	c6 c8       	rjmp	.-3700   	; 0x887e <ProcessMusic+0xb4>
    96f2:	ca cc       	rjmp	.-1644   	; 0x9088 <waves+0x188>
    96f4:	ce d0       	rcall	.+412    	; 0x9892 <waves+0x992>
    96f6:	d2 d4       	rcall	.+2468   	; 0xa09c <LBRandom>
    96f8:	d6 d7       	rcall	.+4012   	; 0xa6a6 <init_enemy_spider+0x4e>
    96fa:	d7 d7       	rcall	.+4014   	; 0xa6aa <init_enemy_spider+0x52>
    96fc:	d4 fe       	sbrs	r13, 4
    96fe:	e5 e9       	ldi	r30, 0x95	; 149
    9700:	f9 f8       	.word	0xf8f9	; ????
    9702:	f9 f5       	brne	.+126    	; 0x9782 <waves+0x882>
    9704:	eb e1       	ldi	r30, 0x1B	; 27
    9706:	dd de       	rcall	.-582    	; 0x94c2 <waves+0x5c2>
    9708:	e0 e2       	ldi	r30, 0x20	; 32
    970a:	e4 e5       	ldi	r30, 0x54	; 84
    970c:	e6 e5       	ldi	r30, 0x56	; 86
    970e:	e4 e2       	ldi	r30, 0x24	; 36
    9710:	de d9       	rcall	.-3140   	; 0x8ace <ProcessMusic+0x304>
    9712:	d2 ca       	rjmp	.-2652   	; 0x8cb8 <esmw+0x46>
    9714:	c1 b7       	in	r28, 0x31	; 49
    9716:	ac a2       	std	Y+36, r10	; 0x24
    9718:	99 91       	ld	r25, Y+
    971a:	8a 86       	std	Y+10, r8	; 0x0a
    971c:	83 81       	ldd	r24, Z+3	; 0x03
    971e:	80 80       	ld	r8, Z
    9720:	81 82       	std	Z+1, r8	; 0x01
    9722:	83 85       	ldd	r24, Z+11	; 0x0b
    9724:	86 88       	ldd	r8, Z+22	; 0x16
    9726:	8a 8c       	ldd	r8, Y+26	; 0x1a
    9728:	8d 8f       	std	Y+29, r24	; 0x1d
    972a:	90 92 93 95 	sts	0x9593, r9
    972e:	96 97       	sbiw	r26, 0x26	; 38
    9730:	98 99       	sbic	0x13, 0	; 19
    9732:	9a 9b       	sbis	0x13, 2	; 19
    9734:	9b 9c       	mul	r9, r11
    9736:	9d 9d       	mul	r25, r13
    9738:	9d 9e       	mul	r9, r29
    973a:	9e 9e       	mul	r9, r30
    973c:	9f 9f       	mul	r25, r31
    973e:	9f 9f       	mul	r25, r31
    9740:	9f 9f       	mul	r25, r31
    9742:	9f 9e       	mul	r9, r31
    9744:	9e 9e       	mul	r9, r30
    9746:	9d 9d       	mul	r25, r13
    9748:	9d 9c       	mul	r9, r13
    974a:	9b 9b       	sbis	0x13, 3	; 19
    974c:	9a 99       	sbic	0x13, 2	; 19
    974e:	98 97       	sbiw	r26, 0x28	; 40
    9750:	96 95       	lsr	r25
    9752:	93 92       	.word	0x9293	; ????
    9754:	90 8f       	std	Z+24, r25	; 0x18
    9756:	8d 8c       	ldd	r8, Y+29	; 0x1d
    9758:	8a 88       	ldd	r8, Y+18	; 0x12
    975a:	86 85       	ldd	r24, Z+14	; 0x0e
    975c:	83 82       	std	Z+3, r8	; 0x03
    975e:	81 80       	ldd	r8, Z+1	; 0x01
    9760:	80 81       	ld	r24, Z
    9762:	83 86       	std	Z+11, r8	; 0x0b
    9764:	8a 91       	ld	r24, -Y
    9766:	99 a2       	std	Y+33, r9	; 0x21
    9768:	ac b7       	in	r26, 0x3c	; 60
    976a:	c1 ca       	rjmp	.-2686   	; 0x8cee <esmw+0x7c>
    976c:	d2 d9       	rcall	.-3164   	; 0x8b12 <ProcessMusic+0x348>
    976e:	de e2       	ldi	r29, 0x2E	; 46
    9770:	e4 e5       	ldi	r30, 0x54	; 84
    9772:	e6 e5       	ldi	r30, 0x56	; 86
    9774:	e4 e2       	ldi	r30, 0x24	; 36
    9776:	e0 de       	rcall	.-576    	; 0x9538 <waves+0x638>
    9778:	dd e1       	ldi	r29, 0x1D	; 29
    977a:	eb f5       	brvc	.+122    	; 0x97f6 <waves+0x8f6>
    977c:	f9 f8       	.word	0xf8f9	; ????
    977e:	f9 00       	.word	0x00f9	; ????
    9780:	07 08       	sbc	r0, r7
    9782:	07 0b       	sbc	r16, r23
    9784:	15 1f       	adc	r17, r21
    9786:	23 22       	and	r2, r19
    9788:	20 1e       	adc	r2, r16
    978a:	1c 1b       	sub	r17, r28
    978c:	1a 1b       	sub	r17, r26
    978e:	1c 1e       	adc	r1, r28
    9790:	22 27       	eor	r18, r18
    9792:	2e 36       	cpi	r18, 0x6E	; 110
    9794:	3f 49       	sbci	r19, 0x9F	; 159
    9796:	54 5e       	subi	r21, 0xE4	; 228
    9798:	67 6f       	ori	r22, 0xF7	; 247
    979a:	76 7a       	andi	r23, 0xA6	; 166
    979c:	7e 7f       	andi	r23, 0xFE	; 254
    979e:	7f 7f       	andi	r23, 0xFF	; 255
    97a0:	7f 7e       	andi	r23, 0xEF	; 239
    97a2:	7d 7b       	andi	r23, 0xBD	; 189
    97a4:	7a 78       	andi	r23, 0x8A	; 138
    97a6:	76 74       	andi	r23, 0x46	; 70
    97a8:	73 71       	andi	r23, 0x13	; 19
    97aa:	70 6e       	ori	r23, 0xE0	; 224
    97ac:	6d 6b       	ori	r22, 0xBD	; 189
    97ae:	6a 69       	ori	r22, 0x9A	; 154
    97b0:	68 67       	ori	r22, 0x78	; 120
    97b2:	66 65       	ori	r22, 0x56	; 86
    97b4:	65 64       	ori	r22, 0x45	; 69
    97b6:	64 63       	ori	r22, 0x34	; 52
    97b8:	63 62       	ori	r22, 0x23	; 35
    97ba:	62 62       	ori	r22, 0x22	; 34
    97bc:	61 61       	ori	r22, 0x11	; 17
    97be:	61 61       	ori	r22, 0x11	; 17
    97c0:	61 61       	ori	r22, 0x11	; 17
    97c2:	61 62       	ori	r22, 0x21	; 33
    97c4:	62 62       	ori	r22, 0x22	; 34
    97c6:	63 63       	ori	r22, 0x33	; 51
    97c8:	63 64       	ori	r22, 0x43	; 67
    97ca:	65 65       	ori	r22, 0x55	; 85
    97cc:	66 67       	ori	r22, 0x76	; 118
    97ce:	68 69       	ori	r22, 0x98	; 152
    97d0:	6a 6b       	ori	r22, 0xBA	; 186
    97d2:	6d 6e       	ori	r22, 0xED	; 237
    97d4:	70 71       	andi	r23, 0x10	; 16
    97d6:	73 74       	andi	r23, 0x43	; 67
    97d8:	76 78       	andi	r23, 0x86	; 134
    97da:	7a 7b       	andi	r23, 0xBA	; 186
    97dc:	7d 7e       	andi	r23, 0xED	; 237
    97de:	7f 7f       	andi	r23, 0xFF	; 255
    97e0:	7f 7f       	andi	r23, 0xFF	; 255
    97e2:	7e 7a       	andi	r23, 0xAE	; 174
    97e4:	76 6f       	ori	r23, 0xF6	; 246
    97e6:	67 5e       	subi	r22, 0xE7	; 231
    97e8:	54 49       	sbci	r21, 0x94	; 148
    97ea:	3f 36       	cpi	r19, 0x6F	; 111
    97ec:	2e 27       	eor	r18, r30
    97ee:	22 1e       	adc	r2, r18
    97f0:	1c 1b       	sub	r17, r28
    97f2:	1a 1b       	sub	r17, r26
    97f4:	1c 1e       	adc	r1, r28
    97f6:	20 22       	and	r2, r16
    97f8:	23 1f       	adc	r18, r19
    97fa:	15 0b       	sbc	r17, r21
    97fc:	07 08       	sbc	r0, r7
    97fe:	07 00       	.word	0x0007	; ????
    9800:	1f 31       	cpi	r17, 0x1F	; 31
    9802:	3d 44       	sbci	r19, 0x4D	; 77
    9804:	4e 53       	subi	r20, 0x3E	; 62
    9806:	54 56       	subi	r21, 0x64	; 100
    9808:	5a 5f       	subi	r21, 0xFA	; 250
    980a:	64 69       	ori	r22, 0x94	; 148
    980c:	6e 74       	andi	r22, 0x4E	; 78
    980e:	76 79       	andi	r23, 0x96	; 150
    9810:	7c 7f       	andi	r23, 0xFC	; 252
    9812:	7f 7f       	andi	r23, 0xFF	; 255
    9814:	7f 7f       	andi	r23, 0xFF	; 255
    9816:	7f 7f       	andi	r23, 0xFF	; 255
    9818:	7f 7f       	andi	r23, 0xFF	; 255
    981a:	7f 7f       	andi	r23, 0xFF	; 255
    981c:	7f 7f       	andi	r23, 0xFF	; 255
    981e:	7f 7f       	andi	r23, 0xFF	; 255
    9820:	7f 7f       	andi	r23, 0xFF	; 255
    9822:	7f 7f       	andi	r23, 0xFF	; 255
    9824:	7f 7f       	andi	r23, 0xFF	; 255
    9826:	7f 7f       	andi	r23, 0xFF	; 255
    9828:	7f 7f       	andi	r23, 0xFF	; 255
    982a:	7f 7f       	andi	r23, 0xFF	; 255
    982c:	7f 7f       	andi	r23, 0xFF	; 255
    982e:	7f 7f       	andi	r23, 0xFF	; 255
    9830:	7f 7f       	andi	r23, 0xFF	; 255
    9832:	7f 7f       	andi	r23, 0xFF	; 255
    9834:	7f 7f       	andi	r23, 0xFF	; 255
    9836:	7f 7f       	andi	r23, 0xFF	; 255
    9838:	7f 7f       	andi	r23, 0xFF	; 255
    983a:	7f 7f       	andi	r23, 0xFF	; 255
    983c:	7f 7f       	andi	r23, 0xFF	; 255
    983e:	7f 7f       	andi	r23, 0xFF	; 255
    9840:	7f 7f       	andi	r23, 0xFF	; 255
    9842:	7f 7f       	andi	r23, 0xFF	; 255
    9844:	7f 7f       	andi	r23, 0xFF	; 255
    9846:	7f 7f       	andi	r23, 0xFF	; 255
    9848:	7f 7f       	andi	r23, 0xFF	; 255
    984a:	7f 7f       	andi	r23, 0xFF	; 255
    984c:	7f 7f       	andi	r23, 0xFF	; 255
    984e:	7f 7f       	andi	r23, 0xFF	; 255
    9850:	7f 7f       	andi	r23, 0xFF	; 255
    9852:	7f 7f       	andi	r23, 0xFF	; 255
    9854:	7f 7f       	andi	r23, 0xFF	; 255
    9856:	7f 7f       	andi	r23, 0xFF	; 255
    9858:	7f 7f       	andi	r23, 0xFF	; 255
    985a:	7f 7f       	andi	r23, 0xFF	; 255
    985c:	7f 7f       	andi	r23, 0xFF	; 255
    985e:	7f 7f       	andi	r23, 0xFF	; 255
    9860:	7f 7f       	andi	r23, 0xFF	; 255
    9862:	7f 7f       	andi	r23, 0xFF	; 255
    9864:	7f 7f       	andi	r23, 0xFF	; 255
    9866:	7f 7f       	andi	r23, 0xFF	; 255
    9868:	7f 7f       	andi	r23, 0xFF	; 255
    986a:	7f 7f       	andi	r23, 0xFF	; 255
    986c:	7f 7f       	andi	r23, 0xFF	; 255
    986e:	7f 7f       	andi	r23, 0xFF	; 255
    9870:	7f 7f       	andi	r23, 0xFF	; 255
    9872:	7f 7f       	andi	r23, 0xFF	; 255
    9874:	7f 7f       	andi	r23, 0xFF	; 255
    9876:	7f 7f       	andi	r23, 0xFF	; 255
    9878:	7f 7f       	andi	r23, 0xFF	; 255
    987a:	7f 7c       	andi	r23, 0xCF	; 207
    987c:	78 71       	andi	r23, 0x18	; 24
    987e:	68 4c       	sbci	r22, 0xC8	; 200
    9880:	2c 1c       	adc	r2, r12
    9882:	12 0c       	add	r1, r2
    9884:	0a 0b       	sbc	r16, r26
    9886:	0a 05       	cpc	r16, r10
    9888:	fd f3       	brhs	.-2      	; 0x9888 <waves+0x988>
    988a:	e9 df       	rcall	.-46     	; 0x985e <waves+0x95e>
    988c:	d4 ca       	rjmp	.-2648   	; 0x8e36 <steptable+0x12e>
    988e:	c0 b7       	in	r28, 0x30	; 48
    9890:	ae a6       	std	Y+46, r10	; 0x2e
    9892:	9e 97       	sbiw	r26, 0x2e	; 46
    9894:	91 8b       	std	Z+17, r25	; 0x11
    9896:	86 85       	ldd	r24, Z+14	; 0x0e
    9898:	82 80       	ldd	r8, Z+2	; 0x02
    989a:	80 80       	ld	r8, Z
    989c:	80 80       	ld	r8, Z
    989e:	80 80       	ld	r8, Z
    98a0:	80 80       	ld	r8, Z
    98a2:	80 80       	ld	r8, Z
    98a4:	80 80       	ld	r8, Z
    98a6:	80 80       	ld	r8, Z
    98a8:	80 80       	ld	r8, Z
    98aa:	80 80       	ld	r8, Z
    98ac:	80 80       	ld	r8, Z
    98ae:	80 80       	ld	r8, Z
    98b0:	80 80       	ld	r8, Z
    98b2:	80 80       	ld	r8, Z
    98b4:	80 80       	ld	r8, Z
    98b6:	80 80       	ld	r8, Z
    98b8:	80 80       	ld	r8, Z
    98ba:	80 80       	ld	r8, Z
    98bc:	80 80       	ld	r8, Z
    98be:	80 80       	ld	r8, Z
    98c0:	80 80       	ld	r8, Z
    98c2:	80 80       	ld	r8, Z
    98c4:	80 80       	ld	r8, Z
    98c6:	80 80       	ld	r8, Z
    98c8:	80 80       	ld	r8, Z
    98ca:	80 80       	ld	r8, Z
    98cc:	80 80       	ld	r8, Z
    98ce:	80 80       	ld	r8, Z
    98d0:	80 80       	ld	r8, Z
    98d2:	80 80       	ld	r8, Z
    98d4:	80 80       	ld	r8, Z
    98d6:	80 80       	ld	r8, Z
    98d8:	80 80       	ld	r8, Z
    98da:	80 80       	ld	r8, Z
    98dc:	80 80       	ld	r8, Z
    98de:	80 80       	ld	r8, Z
    98e0:	80 80       	ld	r8, Z
    98e2:	80 80       	ld	r8, Z
    98e4:	80 80       	ld	r8, Z
    98e6:	80 80       	ld	r8, Z
    98e8:	80 80       	ld	r8, Z
    98ea:	80 80       	ld	r8, Z
    98ec:	80 80       	ld	r8, Z
    98ee:	80 80       	ld	r8, Z
    98f0:	80 80       	ld	r8, Z
    98f2:	80 80       	ld	r8, Z
    98f4:	80 87       	std	Z+8, r24	; 0x08
    98f6:	91 9d       	mul	r25, r1
    98f8:	ac c4       	rjmp	.+2392   	; 0xa252 <LBRotateSprites+0x4c>
    98fa:	cb d4       	rcall	.+2454   	; 0xa292 <init_default_high_scores+0x1c>
    98fc:	dd f2       	brhs	.-74     	; 0x98b4 <waves+0x9b4>
    98fe:	fa fa       	.word	0xfafa	; ????

00009900 <RestoreBackground>:
	unsigned char free_tile_index, userRamTilesCount=0,userRamTilesCount_tmp=0;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=userRamTilesCount;i<free_tile_index;i++){
    9900:	80 91 f3 0c 	lds	r24, 0x0CF3
    9904:	90 91 7f 0d 	lds	r25, 0x0D7F
    9908:	89 17       	cp	r24, r25
    990a:	78 f4       	brcc	.+30     	; 0x992a <RestoreBackground+0x2a>
			//vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
			*ram_tiles_restore[i].addr=ram_tiles_restore[i].tileIndex;
    990c:	e8 2f       	mov	r30, r24
    990e:	f0 e0       	ldi	r31, 0x00	; 0
    9910:	9f 01       	movw	r18, r30
    9912:	22 0f       	add	r18, r18
    9914:	33 1f       	adc	r19, r19
    9916:	e2 0f       	add	r30, r18
    9918:	f3 1f       	adc	r31, r19
    991a:	e0 5b       	subi	r30, 0xB0	; 176
    991c:	f3 4f       	sbci	r31, 0xF3	; 243
    991e:	a0 81       	ld	r26, Z
    9920:	b1 81       	ldd	r27, Z+1	; 0x01
    9922:	92 81       	ldd	r25, Z+2	; 0x02
    9924:	9c 93       	st	X, r25
	unsigned char free_tile_index, userRamTilesCount=0,userRamTilesCount_tmp=0;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=userRamTilesCount;i<free_tile_index;i++){
    9926:	8f 5f       	subi	r24, 0xFF	; 255
    9928:	ed cf       	rjmp	.-38     	; 0x9904 <RestoreBackground+0x4>
			//vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
			*ram_tiles_restore[i].addr=ram_tiles_restore[i].tileIndex;
		}	
	}
    992a:	08 95       	ret

0000992c <ProcessSprites>:
		}

	}
	*/

	void ProcessSprites(){
    992c:	2f 92       	push	r2
    992e:	3f 92       	push	r3
    9930:	4f 92       	push	r4
    9932:	5f 92       	push	r5
    9934:	6f 92       	push	r6
    9936:	7f 92       	push	r7
    9938:	8f 92       	push	r8
    993a:	9f 92       	push	r9
    993c:	af 92       	push	r10
    993e:	bf 92       	push	r11
    9940:	cf 92       	push	r12
    9942:	df 92       	push	r13
    9944:	ef 92       	push	r14
    9946:	ff 92       	push	r15
    9948:	0f 93       	push	r16
    994a:	1f 93       	push	r17
    994c:	cf 93       	push	r28
    994e:	df 93       	push	r29
    9950:	00 d0       	rcall	.+0      	; 0x9952 <ProcessSprites+0x26>
    9952:	00 d0       	rcall	.+0      	; 0x9954 <ProcessSprites+0x28>
    9954:	cd b7       	in	r28, 0x3d	; 61
    9956:	de b7       	in	r29, 0x3e	; 62
	
		unsigned char i,bx,by,dx,dy,bt,x,y,tx=1,ty=1,wx,wy;
		unsigned int ramPtr,ssx,ssy;

		if(!spritesOn) return;
    9958:	80 91 00 05 	lds	r24, 0x0500
    995c:	88 23       	and	r24, r24
    995e:	09 f4       	brne	.+2      	; 0x9962 <ProcessSprites+0x36>
    9960:	e0 c0       	rjmp	.+448    	; 0x9b22 <ProcessSprites+0x1f6>

		userRamTilesCount=userRamTilesCount_tmp;
    9962:	80 91 f2 0c 	lds	r24, 0x0CF2
    9966:	80 93 f3 0c 	sts	0x0CF3, r24
		free_tile_index=userRamTilesCount;
    996a:	80 93 7f 0d 	sts	0x0D7F, r24
    996e:	e0 e1       	ldi	r30, 0x10	; 16
    9970:	ce 2e       	mov	r12, r30
    9972:	e5 e0       	ldi	r30, 0x05	; 5
    9974:	de 2e       	mov	r13, r30
	
		for(i=0;i<MAX_SPRITES;i++){
    9976:	71 2c       	mov	r7, r1
			bx=sprites[i].x;
    9978:	f6 01       	movw	r30, r12
    997a:	20 81       	ld	r18, Z

			if(bx!=(SCREEN_TILES_H*TILE_WIDTH)){
    997c:	20 3e       	cpi	r18, 0xE0	; 224
    997e:	09 f4       	brne	.+2      	; 0x9982 <ProcessSprites+0x56>
    9980:	b1 c0       	rjmp	.+354    	; 0x9ae4 <ProcessSprites+0x1b8>
				//get tile's screen section offsets
				
				#if SCROLLING == 1
					ssx=sprites[i].x+Screen.scrollX;
    9982:	80 91 b2 0c 	lds	r24, 0x0CB2
    9986:	90 e0       	ldi	r25, 0x00	; 0
    9988:	82 0f       	add	r24, r18
    998a:	91 1d       	adc	r25, r1
					ssy=sprites[i].y+Screen.scrollY;
    998c:	41 81       	ldd	r20, Z+1	; 0x01
    998e:	20 91 b3 0c 	lds	r18, 0x0CB3
    9992:	30 e0       	ldi	r19, 0x00	; 0
    9994:	24 0f       	add	r18, r20
    9996:	31 1d       	adc	r19, r1

				tx=1;
				ty=1;

				//get the BG tiles that are overlapped by the sprite
				bx=ssx>>3;
    9998:	ac 01       	movw	r20, r24
    999a:	73 e0       	ldi	r23, 0x03	; 3
    999c:	56 95       	lsr	r21
    999e:	47 95       	ror	r20
    99a0:	7a 95       	dec	r23
    99a2:	e1 f7       	brne	.-8      	; 0x999c <ProcessSprites+0x70>
    99a4:	64 2e       	mov	r6, r20
				dx=ssx&0x7;
    99a6:	87 70       	andi	r24, 0x07	; 7
				if(dx>0) tx++;
    99a8:	11 f0       	breq	.+4      	; 0x99ae <ProcessSprites+0x82>
    99aa:	92 e0       	ldi	r25, 0x02	; 2
    99ac:	01 c0       	rjmp	.+2      	; 0x99b0 <ProcessSprites+0x84>
   				#else
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
    99ae:	91 e0       	ldi	r25, 0x01	; 1
    99b0:	99 83       	std	Y+1, r25	; 0x01
				dx=ssx&0x7;
				if(dx>0) tx++;

				//by=ssy>>3;
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
    99b2:	a9 01       	movw	r20, r18
    99b4:	63 e0       	ldi	r22, 0x03	; 3
    99b6:	56 95       	lsr	r21
    99b8:	47 95       	ror	r20
    99ba:	6a 95       	dec	r22
    99bc:	e1 f7       	brne	.-8      	; 0x99b6 <ProcessSprites+0x8a>
    99be:	54 2e       	mov	r5, r20
				dy=ssy%TILE_HEIGHT;
    99c0:	27 70       	andi	r18, 0x07	; 7
				if(dy>0) ty++;			
    99c2:	19 f0       	breq	.+6      	; 0x99ca <ProcessSprites+0x9e>
    99c4:	52 e0       	ldi	r21, 0x02	; 2
    99c6:	35 2e       	mov	r3, r21
    99c8:	02 c0       	rjmp	.+4      	; 0x99ce <ProcessSprites+0xa2>
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
				ty=1;
    99ca:	33 24       	eor	r3, r3
    99cc:	33 94       	inc	r3
								bt=free_tile_index;
								free_tile_index++;
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    99ce:	30 e0       	ldi	r19, 0x00	; 0
    99d0:	32 2f       	mov	r19, r18
    99d2:	22 27       	eor	r18, r18
    99d4:	f9 01       	movw	r30, r18
    99d6:	e8 0f       	add	r30, r24
    99d8:	f1 1d       	adc	r31, r1
    99da:	fc 83       	std	Y+4, r31	; 0x04
    99dc:	eb 83       	std	Y+3, r30	; 0x03
    99de:	e1 2c       	mov	r14, r1
    99e0:	f1 2c       	mov	r15, r1
    99e2:	be 2c       	mov	r11, r14
    99e4:	aa 24       	eor	r10, r10
    99e6:	26 2c       	mov	r2, r6
    99e8:	45 2c       	mov	r4, r5
    99ea:	4e 0c       	add	r4, r14
								    wy-=(VRAM_TILES_V*2);
							    }else if(wy>=VRAM_TILES_V){
							    	wy-=VRAM_TILES_V;
							    }
                            #else
                                if(wy>=(Screen.scrollHeight*2)){
    99ec:	84 2c       	mov	r8, r4
    99ee:	91 2c       	mov	r9, r1
    99f0:	84 2d       	mov	r24, r4
    99f2:	20 91 b4 0c 	lds	r18, 0x0CB4
    99f6:	42 2f       	mov	r20, r18
    99f8:	50 e0       	ldi	r21, 0x00	; 0
    99fa:	44 0f       	add	r20, r20
    99fc:	55 1f       	adc	r21, r21
    99fe:	84 16       	cp	r8, r20
    9a00:	95 06       	cpc	r9, r21
    9a02:	14 f0       	brlt	.+4      	; 0x9a08 <ProcessSprites+0xdc>
								    wy-=(Screen.scrollHeight*2);
    9a04:	22 0f       	add	r18, r18
    9a06:	03 c0       	rjmp	.+6      	; 0x9a0e <ProcessSprites+0xe2>
							    }else if(wy>=Screen.scrollHeight){
    9a08:	42 16       	cp	r4, r18
    9a0a:	10 f0       	brcs	.+4      	; 0x9a10 <ProcessSprites+0xe4>
							    	wy-=Screen.scrollHeight;
    9a0c:	84 2d       	mov	r24, r4
    9a0e:	82 1b       	sub	r24, r18
							    }
                            #endif
							if(wx>=VRAM_TILES_H)wx-=VRAM_TILES_H; //should always be 32
    9a10:	ff e1       	ldi	r31, 0x1F	; 31
    9a12:	f2 15       	cp	r31, r2
    9a14:	18 f4       	brcc	.+6      	; 0x9a1c <ProcessSprites+0xf0>
    9a16:	00 ee       	ldi	r16, 0xE0	; 224
    9a18:	02 0d       	add	r16, r2
    9a1a:	01 c0       	rjmp	.+2      	; 0x9a1e <ProcessSprites+0xf2>
    9a1c:	02 2d       	mov	r16, r2

							#if SCROLLING == 0
								ramPtr=(wy*VRAM_TILES_H)+wx;
							#else

								ramPtr=((wy>>3)*256)+(wx*8)+(wy&7);	
    9a1e:	28 2f       	mov	r18, r24
    9a20:	26 95       	lsr	r18
    9a22:	26 95       	lsr	r18
    9a24:	26 95       	lsr	r18
    9a26:	10 e0       	ldi	r17, 0x00	; 0
    9a28:	40 e2       	ldi	r20, 0x20	; 32
    9a2a:	24 9f       	mul	r18, r20
    9a2c:	00 0d       	add	r16, r0
    9a2e:	11 1d       	adc	r17, r1
    9a30:	11 24       	eor	r1, r1
    9a32:	23 e0       	ldi	r18, 0x03	; 3
    9a34:	00 0f       	add	r16, r16
    9a36:	11 1f       	adc	r17, r17
    9a38:	2a 95       	dec	r18
    9a3a:	e1 f7       	brne	.-8      	; 0x9a34 <ProcessSprites+0x108>
    9a3c:	87 70       	andi	r24, 0x07	; 7
    9a3e:	08 0f       	add	r16, r24
    9a40:	11 1d       	adc	r17, r1

							#endif

							bt=vram[ramPtr];						
    9a42:	00 50       	subi	r16, 0x00	; 0
    9a44:	1f 4f       	sbci	r17, 0xFF	; 255
    9a46:	f8 01       	movw	r30, r16
    9a48:	70 81       	ld	r23, Z

							if( ((bt>=RAM_TILES_COUNT) | (bt<userRamTilesCount)) && (free_tile_index < RAM_TILES_COUNT) ){ //if no ram free ignore tile
    9a4a:	81 e0       	ldi	r24, 0x01	; 1
    9a4c:	7c 31       	cpi	r23, 0x1C	; 28
    9a4e:	08 f4       	brcc	.+2      	; 0x9a52 <ProcessSprites+0x126>
    9a50:	80 e0       	ldi	r24, 0x00	; 0
    9a52:	21 e0       	ldi	r18, 0x01	; 1
    9a54:	30 91 f3 0c 	lds	r19, 0x0CF3
    9a58:	73 17       	cp	r23, r19
    9a5a:	18 f0       	brcs	.+6      	; 0x9a62 <ProcessSprites+0x136>
    9a5c:	20 e0       	ldi	r18, 0x00	; 0
    9a5e:	88 23       	and	r24, r24
    9a60:	51 f1       	breq	.+84     	; 0x9ab6 <ProcessSprites+0x18a>
    9a62:	60 91 7f 0d 	lds	r22, 0x0D7F
    9a66:	6c 31       	cpi	r22, 0x1C	; 28
    9a68:	20 f5       	brcc	.+72     	; 0x9ab2 <ProcessSprites+0x186>
								if( bt>=RAM_TILES_COUNT ){
    9a6a:	88 23       	and	r24, r24
    9a6c:	31 f0       	breq	.+12     	; 0x9a7a <ProcessSprites+0x14e>
									//tile is mapped to flash. Copy it to next free RAM tile.
									CopyFlashTile(bt-RAM_TILES_COUNT,free_tile_index);
    9a6e:	84 ee       	ldi	r24, 0xE4	; 228
    9a70:	87 0f       	add	r24, r23
    9a72:	7a 83       	std	Y+2, r23	; 0x02
    9a74:	0e 94 39 3c 	call	0x7872	; 0x7872 <CopyFlashTile>
    9a78:	06 c0       	rjmp	.+12     	; 0x9a86 <ProcessSprites+0x15a>
								}else if(bt<userRamTilesCount){
    9a7a:	22 23       	and	r18, r18
    9a7c:	29 f0       	breq	.+10     	; 0x9a88 <ProcessSprites+0x15c>
									//tile is a user ram tile. Copy it to next free RAM tile.
									CopyRamTile(bt,free_tile_index);
    9a7e:	87 2f       	mov	r24, r23
    9a80:	7a 83       	std	Y+2, r23	; 0x02
    9a82:	0e 94 c8 3c 	call	0x7990	; 0x7990 <CopyRamTile>
    9a86:	7a 81       	ldd	r23, Y+2	; 0x02
								}
								ram_tiles_restore[free_tile_index].addr=(&vram[ramPtr]);
    9a88:	80 91 7f 0d 	lds	r24, 0x0D7F
    9a8c:	e8 2f       	mov	r30, r24
    9a8e:	f0 e0       	ldi	r31, 0x00	; 0
    9a90:	9f 01       	movw	r18, r30
    9a92:	22 0f       	add	r18, r18
    9a94:	33 1f       	adc	r19, r19
    9a96:	e2 0f       	add	r30, r18
    9a98:	f3 1f       	adc	r31, r19
    9a9a:	e0 5b       	subi	r30, 0xB0	; 176
    9a9c:	f3 4f       	sbci	r31, 0xF3	; 243
    9a9e:	11 83       	std	Z+1, r17	; 0x01
    9aa0:	00 83       	st	Z, r16
								ram_tiles_restore[free_tile_index].tileIndex=bt;
    9aa2:	72 83       	std	Z+2, r23	; 0x02
								vram[ramPtr]=free_tile_index;
    9aa4:	f8 01       	movw	r30, r16
    9aa6:	80 83       	st	Z, r24
								bt=free_tile_index;
								free_tile_index++;
    9aa8:	21 e0       	ldi	r18, 0x01	; 1
    9aaa:	28 0f       	add	r18, r24
    9aac:	20 93 7f 0d 	sts	0x0D7F, r18
									CopyRamTile(bt,free_tile_index);
								}
								ram_tiles_restore[free_tile_index].addr=(&vram[ramPtr]);
								ram_tiles_restore[free_tile_index].tileIndex=bt;
								vram[ramPtr]=free_tile_index;
								bt=free_tile_index;
    9ab0:	78 2f       	mov	r23, r24
								free_tile_index++;
							}
				
							if(bt<RAM_TILES_COUNT){				
    9ab2:	7c 31       	cpi	r23, 0x1C	; 28
    9ab4:	38 f4       	brcc	.+14     	; 0x9ac4 <ProcessSprites+0x198>
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    9ab6:	2b 81       	ldd	r18, Y+3	; 0x03
    9ab8:	3c 81       	ldd	r19, Y+4	; 0x04
    9aba:	a5 01       	movw	r20, r10
    9abc:	67 2f       	mov	r22, r23
    9abe:	87 2d       	mov	r24, r7
    9ac0:	0e 94 55 3d 	call	0x7aaa	; 0x7aaa <BlitSprite>
    9ac4:	ff ef       	ldi	r31, 0xFF	; 255
    9ac6:	af 1a       	sub	r10, r31
    9ac8:	bf 0a       	sbc	r11, r31
    9aca:	23 94       	inc	r2
    9acc:	82 2d       	mov	r24, r2
    9ace:	86 19       	sub	r24, r6
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){

					for(x=0;x<tx;x++){
    9ad0:	99 81       	ldd	r25, Y+1	; 0x01
    9ad2:	89 17       	cp	r24, r25
    9ad4:	08 f4       	brcc	.+2      	; 0x9ad8 <ProcessSprites+0x1ac>
    9ad6:	8c cf       	rjmp	.-232    	; 0x99f0 <ProcessSprites+0xc4>
    9ad8:	ef ef       	ldi	r30, 0xFF	; 255
    9ada:	ee 1a       	sub	r14, r30
    9adc:	fe 0a       	sbc	r15, r30
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){
    9ade:	e3 14       	cp	r14, r3
    9ae0:	08 f4       	brcc	.+2      	; 0x9ae4 <ProcessSprites+0x1b8>
    9ae2:	7f cf       	rjmp	.-258    	; 0x99e2 <ProcessSprites+0xb6>
		if(!spritesOn) return;

		userRamTilesCount=userRamTilesCount_tmp;
		free_tile_index=userRamTilesCount;
	
		for(i=0;i<MAX_SPRITES;i++){
    9ae4:	73 94       	inc	r7
    9ae6:	f4 e0       	ldi	r31, 0x04	; 4
    9ae8:	cf 0e       	add	r12, r31
    9aea:	d1 1c       	adc	r13, r1
    9aec:	40 e1       	ldi	r20, 0x10	; 16
    9aee:	74 12       	cpse	r7, r20
    9af0:	43 cf       	rjmp	.-378    	; 0x9978 <ProcessSprites+0x4c>


		//restore BG tiles
		RestoreBackground();

	}
    9af2:	0f 90       	pop	r0
    9af4:	0f 90       	pop	r0
    9af6:	0f 90       	pop	r0
    9af8:	0f 90       	pop	r0
    9afa:	df 91       	pop	r29
    9afc:	cf 91       	pop	r28
    9afe:	1f 91       	pop	r17
    9b00:	0f 91       	pop	r16
    9b02:	ff 90       	pop	r15
    9b04:	ef 90       	pop	r14
    9b06:	df 90       	pop	r13
    9b08:	cf 90       	pop	r12
    9b0a:	bf 90       	pop	r11
    9b0c:	af 90       	pop	r10
    9b0e:	9f 90       	pop	r9
    9b10:	8f 90       	pop	r8
    9b12:	7f 90       	pop	r7
    9b14:	6f 90       	pop	r6
    9b16:	5f 90       	pop	r5
    9b18:	4f 90       	pop	r4
    9b1a:	3f 90       	pop	r3
    9b1c:	2f 90       	pop	r2
			}//	if(bx<(SCREEN_TILES_H*TILE_WIDTH))		
		}


		//restore BG tiles
		RestoreBackground();
    9b1e:	0c 94 80 4c 	jmp	0x9900	; 0x9900 <RestoreBackground>

	}
    9b22:	0f 90       	pop	r0
    9b24:	0f 90       	pop	r0
    9b26:	0f 90       	pop	r0
    9b28:	0f 90       	pop	r0
    9b2a:	df 91       	pop	r29
    9b2c:	cf 91       	pop	r28
    9b2e:	1f 91       	pop	r17
    9b30:	0f 91       	pop	r16
    9b32:	ff 90       	pop	r15
    9b34:	ef 90       	pop	r14
    9b36:	df 90       	pop	r13
    9b38:	cf 90       	pop	r12
    9b3a:	bf 90       	pop	r11
    9b3c:	af 90       	pop	r10
    9b3e:	9f 90       	pop	r9
    9b40:	8f 90       	pop	r8
    9b42:	7f 90       	pop	r7
    9b44:	6f 90       	pop	r6
    9b46:	5f 90       	pop	r5
    9b48:	4f 90       	pop	r4
    9b4a:	3f 90       	pop	r3
    9b4c:	2f 90       	pop	r2
    9b4e:	08 95       	ret

00009b50 <Scroll>:

	#if SCROLLING == 1
		//Scroll the screen by the relative amount specified (+/-)
		//This function handles screen wrapping on the Y axis if VRAM_TILES_V is less than 32
		void Scroll(char dx,char dy){
		Screen.scrollY+=dy;
    9b50:	90 91 b3 0c 	lds	r25, 0x0CB3
    9b54:	96 0f       	add	r25, r22
    9b56:	90 93 b3 0c 	sts	0x0CB3, r25
		Screen.scrollX+=dx;
    9b5a:	20 91 b2 0c 	lds	r18, 0x0CB2
    9b5e:	82 0f       	add	r24, r18
    9b60:	80 93 b2 0c 	sts	0x0CB2, r24

		if(Screen.scrollHeight<32){
    9b64:	80 91 b4 0c 	lds	r24, 0x0CB4
    9b68:	80 32       	cpi	r24, 0x20	; 32
    9b6a:	b0 f4       	brcc	.+44     	; 0x9b98 <Scroll+0x48>

			if(Screen.scrollY>=(Screen.scrollHeight*TILE_HEIGHT)){
    9b6c:	29 2f       	mov	r18, r25
    9b6e:	30 e0       	ldi	r19, 0x00	; 0
    9b70:	78 e0       	ldi	r23, 0x08	; 8
    9b72:	87 9f       	mul	r24, r23
    9b74:	a0 01       	movw	r20, r0
    9b76:	11 24       	eor	r1, r1
    9b78:	24 17       	cp	r18, r20
    9b7a:	35 07       	cpc	r19, r21
    9b7c:	6c f0       	brlt	.+26     	; 0x9b98 <Scroll+0x48>
				if(dy>=0){	
    9b7e:	67 fd       	sbrc	r22, 7
    9b80:	05 c0       	rjmp	.+10     	; 0x9b8c <Scroll+0x3c>
					Screen.scrollY=(Screen.scrollY-(Screen.scrollHeight*TILE_HEIGHT));
    9b82:	28 ef       	ldi	r18, 0xF8	; 248
    9b84:	82 9f       	mul	r24, r18
    9b86:	90 0d       	add	r25, r0
    9b88:	11 24       	eor	r1, r1
    9b8a:	04 c0       	rjmp	.+8      	; 0x9b94 <Scroll+0x44>
				}else{
					Screen.scrollY=((Screen.scrollHeight*TILE_HEIGHT)-1)-(0xff-Screen.scrollY);
    9b8c:	78 e0       	ldi	r23, 0x08	; 8
    9b8e:	87 9f       	mul	r24, r23
    9b90:	90 0d       	add	r25, r0
    9b92:	11 24       	eor	r1, r1
    9b94:	90 93 b3 0c 	sts	0x0CB3, r25
    9b98:	08 95       	ret

00009b9a <InitializeVideoMode>:
		#endif	
	}


	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){
    9b9a:	e0 e1       	ldi	r30, 0x10	; 16
    9b9c:	f5 e0       	ldi	r31, 0x05	; 5

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
			sprites[i].x=(SCREEN_TILES_H*TILE_WIDTH);		
    9b9e:	80 ee       	ldi	r24, 0xE0	; 224
    9ba0:	80 83       	st	Z, r24
    9ba2:	34 96       	adiw	r30, 0x04	; 4

	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
    9ba4:	95 e0       	ldi	r25, 0x05	; 5
    9ba6:	e0 35       	cpi	r30, 0x50	; 80
    9ba8:	f9 07       	cpc	r31, r25
    9baa:	d1 f7       	brne	.-12     	; 0x9ba0 <InitializeVideoMode+0x6>
		
		#if SCROLLING == 1
		//	for(int i=0;i<(OVERLAY_LINES*VRAM_TILES_H);i++){
		//		overlay_vram[i]=RAM_TILES_COUNT;
		//	}
			Screen.scrollHeight=VRAM_TILES_V;
    9bac:	80 e2       	ldi	r24, 0x20	; 32
    9bae:	80 93 b4 0c 	sts	0x0CB4, r24
			Screen.overlayHeight=0;
    9bb2:	10 92 af 0c 	sts	0x0CAF, r1
    9bb6:	08 95       	ret

00009bb8 <DrawMap>:



//Draws a map of tile at the specified position
#if VRAM_ADDR_SIZE == 1
	void DrawMap(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
    9bb8:	2f 92       	push	r2
    9bba:	3f 92       	push	r3
    9bbc:	4f 92       	push	r4
    9bbe:	5f 92       	push	r5
    9bc0:	6f 92       	push	r6
    9bc2:	7f 92       	push	r7
    9bc4:	8f 92       	push	r8
    9bc6:	9f 92       	push	r9
    9bc8:	af 92       	push	r10
    9bca:	bf 92       	push	r11
    9bcc:	cf 92       	push	r12
    9bce:	df 92       	push	r13
    9bd0:	ef 92       	push	r14
    9bd2:	ff 92       	push	r15
    9bd4:	0f 93       	push	r16
    9bd6:	1f 93       	push	r17
    9bd8:	cf 93       	push	r28
    9bda:	df 93       	push	r29
    9bdc:	00 d0       	rcall	.+0      	; 0x9bde <DrawMap+0x26>
    9bde:	1f 92       	push	r1
    9be0:	cd b7       	in	r28, 0x3d	; 61
    9be2:	de b7       	in	r29, 0x3e	; 62
    9be4:	28 2f       	mov	r18, r24
    9be6:	3a 01       	movw	r6, r20
		//unsigned char i;
		u8 mapWidth=pgm_read_byte(&(map[0]));
    9be8:	fa 01       	movw	r30, r20
    9bea:	24 90       	lpm	r2, Z
		u8 mapHeight=pgm_read_byte(&(map[1]));
    9bec:	31 96       	adiw	r30, 0x01	; 1
    9bee:	34 90       	lpm	r3, Z
    9bf0:	42 2c       	mov	r4, r2
    9bf2:	51 2c       	mov	r5, r1
		
		for(u8 dy=0;dy<mapHeight;dy++){
    9bf4:	e1 2c       	mov	r14, r1
    9bf6:	f1 2c       	mov	r15, r1
    9bf8:	00 e0       	ldi	r16, 0x00	; 0
    9bfa:	10 e0       	ldi	r17, 0x00	; 0
    9bfc:	c6 2e       	mov	r12, r22
    9bfe:	d1 2c       	mov	r13, r1
    9c00:	03 15       	cp	r16, r3
    9c02:	68 f5       	brcc	.+90     	; 0x9c5e <DrawMap+0xa6>
    9c04:	1b 82       	std	Y+3, r1	; 0x03
    9c06:	1a 82       	std	Y+2, r1	; 0x02
    9c08:	57 01       	movw	r10, r14
    9c0a:	92 e0       	ldi	r25, 0x02	; 2
    9c0c:	a9 0e       	add	r10, r25
    9c0e:	b1 1c       	adc	r11, r1
    9c10:	48 01       	movw	r8, r16
    9c12:	8c 0c       	add	r8, r12
    9c14:	9d 1c       	adc	r9, r13
			for(u8 dx=0;dx<mapWidth;dx++){			
    9c16:	ea 81       	ldd	r30, Y+2	; 0x02
    9c18:	e2 15       	cp	r30, r2
    9c1a:	e0 f4       	brcc	.+56     	; 0x9c54 <DrawMap+0x9c>
    9c1c:	ea 81       	ldd	r30, Y+2	; 0x02
    9c1e:	fb 81       	ldd	r31, Y+3	; 0x03
    9c20:	ea 0d       	add	r30, r10
    9c22:	fb 1d       	adc	r31, r11
    9c24:	e6 0d       	add	r30, r6
    9c26:	f7 1d       	adc	r31, r7
				SetTile(x+dx,(y+dy)%Screen.scrollHeight,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
    9c28:	e4 91       	lpm	r30, Z
    9c2a:	f0 e0       	ldi	r31, 0x00	; 0
    9c2c:	60 91 b4 0c 	lds	r22, 0x0CB4
    9c30:	70 e0       	ldi	r23, 0x00	; 0
    9c32:	c4 01       	movw	r24, r8
    9c34:	0e 94 9f 69 	call	0xd33e	; 0xd33e <__divmodhi4>
    9c38:	af 01       	movw	r20, r30
    9c3a:	68 2f       	mov	r22, r24
    9c3c:	8a 81       	ldd	r24, Y+2	; 0x02
    9c3e:	82 0f       	add	r24, r18
    9c40:	29 83       	std	Y+1, r18	; 0x01
    9c42:	0e 94 88 3f 	call	0x7f10	; 0x7f10 <SetTile>
    9c46:	8a 81       	ldd	r24, Y+2	; 0x02
    9c48:	9b 81       	ldd	r25, Y+3	; 0x03
    9c4a:	01 96       	adiw	r24, 0x01	; 1
    9c4c:	9b 83       	std	Y+3, r25	; 0x03
    9c4e:	8a 83       	std	Y+2, r24	; 0x02
    9c50:	29 81       	ldd	r18, Y+1	; 0x01
    9c52:	e1 cf       	rjmp	.-62     	; 0x9c16 <DrawMap+0x5e>
    9c54:	0f 5f       	subi	r16, 0xFF	; 255
    9c56:	1f 4f       	sbci	r17, 0xFF	; 255
    9c58:	e4 0c       	add	r14, r4
    9c5a:	f5 1c       	adc	r15, r5
    9c5c:	d1 cf       	rjmp	.-94     	; 0x9c00 <DrawMap+0x48>
			}
		}

	}
    9c5e:	0f 90       	pop	r0
    9c60:	0f 90       	pop	r0
    9c62:	0f 90       	pop	r0
    9c64:	df 91       	pop	r29
    9c66:	cf 91       	pop	r28
    9c68:	1f 91       	pop	r17
    9c6a:	0f 91       	pop	r16
    9c6c:	ff 90       	pop	r15
    9c6e:	ef 90       	pop	r14
    9c70:	df 90       	pop	r13
    9c72:	cf 90       	pop	r12
    9c74:	bf 90       	pop	r11
    9c76:	af 90       	pop	r10
    9c78:	9f 90       	pop	r9
    9c7a:	8f 90       	pop	r8
    9c7c:	7f 90       	pop	r7
    9c7e:	6f 90       	pop	r6
    9c80:	5f 90       	pop	r5
    9c82:	4f 90       	pop	r4
    9c84:	3f 90       	pop	r3
    9c86:	2f 90       	pop	r2
    9c88:	08 95       	ret

00009c8a <WaitVsync>:
		}
	}
}

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
    9c8a:	0f 93       	push	r16
    9c8c:	1f 93       	push	r17
    9c8e:	cf 93       	push	r28
    9c90:	df 93       	push	r29
    9c92:	8c 01       	movw	r16, r24
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    9c94:	c0 e0       	ldi	r28, 0x00	; 0
    9c96:	d0 e0       	ldi	r29, 0x00	; 0
    9c98:	c0 17       	cp	r28, r16
    9c9a:	d1 07       	cpc	r29, r17
    9c9c:	44 f4       	brge	.+16     	; 0x9cae <WaitVsync+0x24>
		while(!GetVsyncFlag());
    9c9e:	0e 94 9e 3f 	call	0x7f3c	; 0x7f3c <GetVsyncFlag>
    9ca2:	88 23       	and	r24, r24
    9ca4:	e1 f3       	breq	.-8      	; 0x9c9e <WaitVsync+0x14>
		ClearVsyncFlag();		
    9ca6:	0e 94 a2 3f 	call	0x7f44	; 0x7f44 <ClearVsyncFlag>

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    9caa:	21 96       	adiw	r28, 0x01	; 1
    9cac:	f5 cf       	rjmp	.-22     	; 0x9c98 <WaitVsync+0xe>
		while(!GetVsyncFlag());
		ClearVsyncFlag();		
	}
}
    9cae:	df 91       	pop	r29
    9cb0:	cf 91       	pop	r28
    9cb2:	1f 91       	pop	r17
    9cb4:	0f 91       	pop	r16
    9cb6:	08 95       	ret

00009cb8 <DisplayLogo>:
	void DisplayLogo(){
	
		#if INTRO_LOGO !=0
			#define LOGO_X_POS 12
			
			InitMusicPlayer(logoInitPatches);
    9cb8:	83 e2       	ldi	r24, 0x23	; 35
    9cba:	99 e0       	ldi	r25, 0x09	; 9
    9cbc:	0e 94 50 42 	call	0x84a0	; 0x84a0 <InitMusicPlayer>
			SetTileTable(logo_tileset);
    9cc0:	83 e2       	ldi	r24, 0x23	; 35
    9cc2:	91 e0       	ldi	r25, 0x01	; 1
    9cc4:	0e 94 99 3f 	call	0x7f32	; 0x7f32 <SetTileTable>
			
			//draw logo
			ClearVram();
    9cc8:	0e 94 7e 3f 	call	0x7efc	; 0x7efc <ClearVram>
			WaitVsync(15);		
    9ccc:	8f e0       	ldi	r24, 0x0F	; 15
    9cce:	90 e0       	ldi	r25, 0x00	; 0
    9cd0:	0e 94 45 4e 	call	0x9c8a	; 0x9c8a <WaitVsync>


			#if INTRO_LOGO == 1 
				TriggerFx(0,0xff,true);
    9cd4:	41 e0       	ldi	r20, 0x01	; 1
    9cd6:	6f ef       	ldi	r22, 0xFF	; 255
    9cd8:	80 e0       	ldi	r24, 0x00	; 0
    9cda:	0e 94 5d 43 	call	0x86ba	; 0x86ba <TriggerFx>
			#endif

			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo);
    9cde:	4d e0       	ldi	r20, 0x0D	; 13
    9ce0:	51 e0       	ldi	r21, 0x01	; 1
    9ce2:	6c e0       	ldi	r22, 0x0C	; 12
    9ce4:	8c e0       	ldi	r24, 0x0C	; 12
    9ce6:	0e 94 dc 4d 	call	0x9bb8	; 0x9bb8 <DrawMap>
			WaitVsync(3);
    9cea:	83 e0       	ldi	r24, 0x03	; 3
    9cec:	90 e0       	ldi	r25, 0x00	; 0
    9cee:	0e 94 45 4e 	call	0x9c8a	; 0x9c8a <WaitVsync>
			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo2);
    9cf2:	4c ef       	ldi	r20, 0xFC	; 252
    9cf4:	50 e0       	ldi	r21, 0x00	; 0
    9cf6:	6c e0       	ldi	r22, 0x0C	; 12
    9cf8:	8c e0       	ldi	r24, 0x0C	; 12
    9cfa:	0e 94 dc 4d 	call	0x9bb8	; 0x9bb8 <DrawMap>
			WaitVsync(2);
    9cfe:	82 e0       	ldi	r24, 0x02	; 2
    9d00:	90 e0       	ldi	r25, 0x00	; 0
    9d02:	0e 94 45 4e 	call	0x9c8a	; 0x9c8a <WaitVsync>
			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo);
    9d06:	4d e0       	ldi	r20, 0x0D	; 13
    9d08:	51 e0       	ldi	r21, 0x01	; 1
    9d0a:	6c e0       	ldi	r22, 0x0C	; 12
    9d0c:	8c e0       	ldi	r24, 0x0C	; 12
    9d0e:	0e 94 dc 4d 	call	0x9bb8	; 0x9bb8 <DrawMap>
			#if INTRO_LOGO == 2
				SetMasterVolume(0xc0);
				TriggerNote(3,0,16,0xff);
			#endif 
		
			WaitVsync(65);
    9d12:	81 e4       	ldi	r24, 0x41	; 65
    9d14:	90 e0       	ldi	r25, 0x00	; 0
    9d16:	0e 94 45 4e 	call	0x9c8a	; 0x9c8a <WaitVsync>
			ClearVram();
    9d1a:	0e 94 7e 3f 	call	0x7efc	; 0x7efc <ClearVram>
			WaitVsync(20);
    9d1e:	84 e1       	ldi	r24, 0x14	; 20
    9d20:	90 e0       	ldi	r25, 0x00	; 0
    9d22:	0c 94 45 4e 	jmp	0x9c8a	; 0x9c8a <WaitVsync>

00009d26 <doFade>:
char fadeDir;
bool volatile fadeActive;


void doFade(unsigned char speed,bool blocking){
	fadeSpeed=speed;
    9d26:	80 93 7d 0d 	sts	0x0D7D, r24
	currFadeFrame=0;
    9d2a:	10 92 81 0d 	sts	0x0D81, r1
	fadeActive=true;
    9d2e:	81 e0       	ldi	r24, 0x01	; 1
    9d30:	80 93 80 0d 	sts	0x0D80, r24
		
	if(blocking){
    9d34:	66 23       	and	r22, r22
    9d36:	21 f0       	breq	.+8      	; 0x9d40 <doFade+0x1a>
		while(fadeActive==true);
    9d38:	80 91 80 0d 	lds	r24, 0x0D80
    9d3c:	81 11       	cpse	r24, r1
    9d3e:	fc cf       	rjmp	.-8      	; 0x9d38 <doFade+0x12>
    9d40:	08 95       	ret

00009d42 <FadeIn>:
	
	
}

void FadeIn(unsigned char speed,bool blocking){
	if(speed==0){
    9d42:	81 11       	cpse	r24, r1
    9d44:	03 c0       	rjmp	.+6      	; 0x9d4c <FadeIn+0xa>
		DDRC=0xff;
    9d46:	8f ef       	ldi	r24, 0xFF	; 255
    9d48:	87 b9       	out	0x07, r24	; 7
		return;
    9d4a:	08 95       	ret
	}
	fadeStep=1;
    9d4c:	91 e0       	ldi	r25, 0x01	; 1
    9d4e:	90 93 82 0d 	sts	0x0D82, r25
	fadeDir=1;
    9d52:	90 93 7e 0d 	sts	0x0D7E, r25
	doFade(speed,blocking);
    9d56:	0c 94 93 4e 	jmp	0x9d26	; 0x9d26 <doFade>

00009d5a <FadeOut>:
}

void FadeOut(unsigned char speed,bool blocking){
	if(speed==0){
    9d5a:	81 11       	cpse	r24, r1
    9d5c:	02 c0       	rjmp	.+4      	; 0x9d62 <FadeOut+0x8>
		DDRC=0;
    9d5e:	17 b8       	out	0x07, r1	; 7
		return;
    9d60:	08 95       	ret
	}
	
	fadeStep=FADER_STEPS;
    9d62:	9c e0       	ldi	r25, 0x0C	; 12
    9d64:	90 93 82 0d 	sts	0x0D82, r25
	fadeDir=-1;
    9d68:	9f ef       	ldi	r25, 0xFF	; 255
    9d6a:	90 93 7e 0d 	sts	0x0D7E, r25
	doFade(speed,blocking);
    9d6e:	0c 94 93 4e 	jmp	0x9d26	; 0x9d26 <doFade>

00009d72 <ProcessFading>:
}


//called by the kernel at each field end
void ProcessFading(){
	if(fadeActive==true){
    9d72:	80 91 80 0d 	lds	r24, 0x0D80
    9d76:	88 23       	and	r24, r24
    9d78:	01 f1       	breq	.+64     	; 0x9dba <ProcessFading+0x48>
		if(currFadeFrame==0){
    9d7a:	80 91 81 0d 	lds	r24, 0x0D81
    9d7e:	81 11       	cpse	r24, r1
    9d80:	19 c0       	rjmp	.+50     	; 0x9db4 <ProcessFading+0x42>
			currFadeFrame=fadeSpeed;
    9d82:	80 91 7d 0d 	lds	r24, 0x0D7D
    9d86:	80 93 81 0d 	sts	0x0D81, r24
			DDRC = pgm_read_byte(&(fader[fadeStep-1]));
    9d8a:	e0 91 82 0d 	lds	r30, 0x0D82
    9d8e:	f0 e0       	ldi	r31, 0x00	; 0
    9d90:	e1 51       	subi	r30, 0x11	; 17
    9d92:	ff 4f       	sbci	r31, 0xFF	; 255
    9d94:	e4 91       	lpm	r30, Z
    9d96:	e7 b9       	out	0x07, r30	; 7
			fadeStep+=fadeDir;
    9d98:	90 91 7e 0d 	lds	r25, 0x0D7E
    9d9c:	80 91 82 0d 	lds	r24, 0x0D82
    9da0:	89 0f       	add	r24, r25
    9da2:	80 93 82 0d 	sts	0x0D82, r24
			if(fadeStep==0 || fadeStep==(FADER_STEPS+1)){
    9da6:	88 23       	and	r24, r24
    9da8:	11 f0       	breq	.+4      	; 0x9dae <ProcessFading+0x3c>
    9daa:	8d 30       	cpi	r24, 0x0D	; 13
    9dac:	31 f4       	brne	.+12     	; 0x9dba <ProcessFading+0x48>
				fadeActive=false;
    9dae:	10 92 80 0d 	sts	0x0D80, r1
    9db2:	08 95       	ret
			}
		}else{
			currFadeFrame--;
    9db4:	81 50       	subi	r24, 0x01	; 1
    9db6:	80 93 81 0d 	sts	0x0D81, r24
    9dba:	08 95       	ret

00009dbc <VideoModeVsync>:
	}

	//Callback invoked during hsync
	void VideoModeVsync(){
		
		ProcessFading();
    9dbc:	0e 94 b9 4e 	call	0x9d72	; 0x9d72 <ProcessFading>
		ProcessSprites();
    9dc0:	0c 94 96 4c 	jmp	0x992c	; 0x992c <ProcessSprites>

00009dc4 <LBMoveDelta>:
 * Calculate distance travelled, given speed (unitsPerSecond), by counting frames instead of
 * multiplying by a time fraction.
 * This allows for fairly accurate movement without resorting to slow and memory intensive floating
 * point numbers. This function assumes a game loop speed of 60 frames per second
 */
{
    9dc4:	e6 2f       	mov	r30, r22
	s8 direction = 1;
	u8 mod_factor;
	u8 base_delta;
	u8 remainder_delta;
	
	if (unitsPerSecond == 0) return 0;
    9dc6:	88 23       	and	r24, r24
    9dc8:	29 f1       	breq	.+74     	; 0x9e14 <LBMoveDelta+0x50>
	if (unitsPerSecond < 0)
    9dca:	87 ff       	sbrs	r24, 7
    9dcc:	03 c0       	rjmp	.+6      	; 0x9dd4 <LBMoveDelta+0x10>
	{
		direction = -1;
		unitsPerSecond = -unitsPerSecond;
    9dce:	81 95       	neg	r24
	u8 remainder_delta;
	
	if (unitsPerSecond == 0) return 0;
	if (unitsPerSecond < 0)
	{
		direction = -1;
    9dd0:	3f ef       	ldi	r19, 0xFF	; 255
    9dd2:	01 c0       	rjmp	.+2      	; 0x9dd6 <LBMoveDelta+0x12>
 * multiplying by a time fraction.
 * This allows for fairly accurate movement without resorting to slow and memory intensive floating
 * point numbers. This function assumes a game loop speed of 60 frames per second
 */
{
	s8 direction = 1;
    9dd4:	31 e0       	ldi	r19, 0x01	; 1
	if (unitsPerSecond < 0)
	{
		direction = -1;
		unitsPerSecond = -unitsPerSecond;
	}
	base_delta = unitsPerSecond / 60;
    9dd6:	6c e3       	ldi	r22, 0x3C	; 60
    9dd8:	0e 94 7d 69 	call	0xd2fa	; 0xd2fa <__divmodqi4>
    9ddc:	28 2f       	mov	r18, r24
	remainder_delta = unitsPerSecond % 60;
	if (remainder_delta == 0) return direction*base_delta;
    9dde:	99 23       	and	r25, r25
    9de0:	a9 f0       	breq	.+42     	; 0x9e0c <LBMoveDelta+0x48>
	mod_factor = 60 / remainder_delta;
    9de2:	69 2f       	mov	r22, r25
    9de4:	70 e0       	ldi	r23, 0x00	; 0
    9de6:	8c e3       	ldi	r24, 0x3C	; 60
    9de8:	90 e0       	ldi	r25, 0x00	; 0
    9dea:	0e 94 9f 69 	call	0xd33e	; 0xd33e <__divmodhi4>
	if (frame_counter % mod_factor == 0) {
    9dee:	8e 2f       	mov	r24, r30
    9df0:	0e 94 71 69 	call	0xd2e2	; 0xd2e2 <__udivmodqi4>
    9df4:	91 11       	cpse	r25, r1
    9df6:	0a c0       	rjmp	.+20     	; 0x9e0c <LBMoveDelta+0x48>
		return direction*(base_delta + 1);
    9df8:	42 2f       	mov	r20, r18
    9dfa:	50 e0       	ldi	r21, 0x00	; 0
    9dfc:	4f 5f       	subi	r20, 0xFF	; 255
    9dfe:	5f 4f       	sbci	r21, 0xFF	; 255
    9e00:	34 03       	mulsu	r19, r20
    9e02:	c0 01       	movw	r24, r0
    9e04:	35 9f       	mul	r19, r21
    9e06:	90 0d       	add	r25, r0
    9e08:	11 24       	eor	r1, r1
    9e0a:	08 95       	ret
	}
	return direction*base_delta;
    9e0c:	32 03       	mulsu	r19, r18
    9e0e:	c0 01       	movw	r24, r0
    9e10:	11 24       	eor	r1, r1
    9e12:	08 95       	ret
	s8 direction = 1;
	u8 mod_factor;
	u8 base_delta;
	u8 remainder_delta;
	
	if (unitsPerSecond == 0) return 0;
    9e14:	80 e0       	ldi	r24, 0x00	; 0
    9e16:	90 e0       	ldi	r25, 0x00	; 0
	mod_factor = 60 / remainder_delta;
	if (frame_counter % mod_factor == 0) {
		return direction*(base_delta + 1);
	}
	return direction*base_delta;
}
    9e18:	08 95       	ret

00009e1a <LBGetNextFrame>:

char* LBGetNextFrame(Animation* anim)
{
    9e1a:	fc 01       	movw	r30, r24
	anim->looped = 0;
    9e1c:	14 82       	std	Z+4, r1	; 0x04
	anim->frame_count += 1;
    9e1e:	93 81       	ldd	r25, Z+3	; 0x03
    9e20:	9f 5f       	subi	r25, 0xFF	; 255
    9e22:	93 83       	std	Z+3, r25	; 0x03
	if (anim->frame_count < anim->frames_per_anim)
    9e24:	42 81       	ldd	r20, Z+2	; 0x02
    9e26:	80 81       	ld	r24, Z
    9e28:	26 81       	ldd	r18, Z+6	; 0x06
    9e2a:	37 81       	ldd	r19, Z+7	; 0x07
    9e2c:	94 17       	cp	r25, r20
    9e2e:	30 f4       	brcc	.+12     	; 0x9e3c <LBGetNextFrame+0x22>
	{
		return anim->anims[anim->current_anim];
    9e30:	f9 01       	movw	r30, r18
    9e32:	e8 0f       	add	r30, r24
    9e34:	f1 1d       	adc	r31, r1
    9e36:	e8 0f       	add	r30, r24
    9e38:	f1 1d       	adc	r31, r1
    9e3a:	12 c0       	rjmp	.+36     	; 0x9e60 <LBGetNextFrame+0x46>
	}
	anim->frame_count = 0;
    9e3c:	13 82       	std	Z+3, r1	; 0x03
	anim->current_anim = (anim->current_anim + 1) % anim->anim_count;
    9e3e:	90 e0       	ldi	r25, 0x00	; 0
    9e40:	01 96       	adiw	r24, 0x01	; 1
    9e42:	61 81       	ldd	r22, Z+1	; 0x01
    9e44:	70 e0       	ldi	r23, 0x00	; 0
    9e46:	0e 94 9f 69 	call	0xd33e	; 0xd33e <__divmodhi4>
    9e4a:	80 83       	st	Z, r24
	if (anim->current_anim == 0) anim->looped = 1;
    9e4c:	81 11       	cpse	r24, r1
    9e4e:	02 c0       	rjmp	.+4      	; 0x9e54 <LBGetNextFrame+0x3a>
    9e50:	41 e0       	ldi	r20, 0x01	; 1
    9e52:	44 83       	std	Z+4, r20	; 0x04
    9e54:	99 27       	eor	r25, r25
	return anim->anims[anim->current_anim];
    9e56:	88 0f       	add	r24, r24
    9e58:	99 1f       	adc	r25, r25
    9e5a:	f9 01       	movw	r30, r18
    9e5c:	e8 0f       	add	r30, r24
    9e5e:	f9 1f       	adc	r31, r25
    9e60:	80 81       	ld	r24, Z
    9e62:	91 81       	ldd	r25, Z+1	; 0x01
}
    9e64:	08 95       	ret

00009e66 <LBGetJoyPadState>:

void LBGetJoyPadState(JoyPadState* p, unsigned char index)
/*
 * Get the current joy pad button state for index controller
 */
{
    9e66:	0f 93       	push	r16
    9e68:	1f 93       	push	r17
    9e6a:	cf 93       	push	r28
    9e6c:	df 93       	push	r29
    9e6e:	1f 92       	push	r1
    9e70:	cd b7       	in	r28, 0x3d	; 61
    9e72:	de b7       	in	r29, 0x3e	; 62
    9e74:	8c 01       	movw	r16, r24
	static unsigned int p_prev[2];

	p->held = ReadJoypad(index);
    9e76:	86 2f       	mov	r24, r22
    9e78:	69 83       	std	Y+1, r22	; 0x01
    9e7a:	0e 94 a8 3f 	call	0x7f50	; 0x7f50 <ReadJoypad>
    9e7e:	d8 01       	movw	r26, r16
    9e80:	15 96       	adiw	r26, 0x05	; 5
    9e82:	9c 93       	st	X, r25
    9e84:	8e 93       	st	-X, r24
    9e86:	14 97       	sbiw	r26, 0x04	; 4
    9e88:	69 81       	ldd	r22, Y+1	; 0x01
    9e8a:	e6 2f       	mov	r30, r22
    9e8c:	f0 e0       	ldi	r31, 0x00	; 0

	// Count held cycles
	if (p->held == 0 || p->held != p_prev[index])
    9e8e:	00 97       	sbiw	r24, 0x00	; 0
    9e90:	51 f0       	breq	.+20     	; 0x9ea6 <LBGetJoyPadState+0x40>
    9e92:	df 01       	movw	r26, r30
    9e94:	aa 0f       	add	r26, r26
    9e96:	bb 1f       	adc	r27, r27
    9e98:	ab 50       	subi	r26, 0x0B	; 11
    9e9a:	b3 4f       	sbci	r27, 0xF3	; 243
    9e9c:	2d 91       	ld	r18, X+
    9e9e:	3c 91       	ld	r19, X
    9ea0:	82 17       	cp	r24, r18
    9ea2:	93 07       	cpc	r25, r19
    9ea4:	21 f0       	breq	.+8      	; 0x9eae <LBGetJoyPadState+0x48>
	    p->held_cycles = 0;
    9ea6:	d8 01       	movw	r26, r16
    9ea8:	16 96       	adiw	r26, 0x06	; 6
    9eaa:	1c 92       	st	X, r1
    9eac:	07 c0       	rjmp	.+14     	; 0x9ebc <LBGetJoyPadState+0x56>
	else
	    p->held_cycles += 1;
    9eae:	d8 01       	movw	r26, r16
    9eb0:	16 96       	adiw	r26, 0x06	; 6
    9eb2:	2c 91       	ld	r18, X
    9eb4:	16 97       	sbiw	r26, 0x06	; 6
    9eb6:	2f 5f       	subi	r18, 0xFF	; 255
    9eb8:	16 96       	adiw	r26, 0x06	; 6
    9eba:	2c 93       	st	X, r18

	p->pressed = p->held & (p->held ^ p_prev[index]);
    9ebc:	ee 0f       	add	r30, r30
    9ebe:	ff 1f       	adc	r31, r31
    9ec0:	eb 50       	subi	r30, 0x0B	; 11
    9ec2:	f3 4f       	sbci	r31, 0xF3	; 243
    9ec4:	20 81       	ld	r18, Z
    9ec6:	31 81       	ldd	r19, Z+1	; 0x01
    9ec8:	a9 01       	movw	r20, r18
    9eca:	40 95       	com	r20
    9ecc:	50 95       	com	r21
    9ece:	48 23       	and	r20, r24
    9ed0:	59 23       	and	r21, r25
    9ed2:	d8 01       	movw	r26, r16
    9ed4:	11 96       	adiw	r26, 0x01	; 1
    9ed6:	5c 93       	st	X, r21
    9ed8:	4e 93       	st	-X, r20
	p->released = p_prev[index] & (p->held ^ p_prev[index]);
    9eda:	ac 01       	movw	r20, r24
    9edc:	40 95       	com	r20
    9ede:	50 95       	com	r21
    9ee0:	24 23       	and	r18, r20
    9ee2:	35 23       	and	r19, r21
    9ee4:	13 96       	adiw	r26, 0x03	; 3
    9ee6:	3c 93       	st	X, r19
    9ee8:	2e 93       	st	-X, r18
    9eea:	12 97       	sbiw	r26, 0x02	; 2
	p_prev[index] = p->held;
    9eec:	91 83       	std	Z+1, r25	; 0x01
    9eee:	80 83       	st	Z, r24
}
    9ef0:	0f 90       	pop	r0
    9ef2:	df 91       	pop	r29
    9ef4:	cf 91       	pop	r28
    9ef6:	1f 91       	pop	r17
    9ef8:	0f 91       	pop	r16
    9efa:	08 95       	ret

00009efc <LBPrintChar>:
	font_tiles_map = tiles_map;
}

void LBPrintChar(u8 x, u8 y, u8 code)
{
	if (code >= 48 && code <= 57)
    9efc:	90 ed       	ldi	r25, 0xD0	; 208
    9efe:	94 0f       	add	r25, r20
    9f00:	e0 91 83 0d 	lds	r30, 0x0D83
    9f04:	f0 91 84 0d 	lds	r31, 0x0D84
    9f08:	9a 30       	cpi	r25, 0x0A	; 10
    9f0a:	38 f4       	brcc	.+14     	; 0x9f1a <LBPrintChar+0x1e>
	{
		SetTile(x, y, pgm_read_byte(&font_tiles_map[3+code-48]));
    9f0c:	24 2f       	mov	r18, r20
    9f0e:	30 e0       	ldi	r19, 0x00	; 0
    9f10:	2d 52       	subi	r18, 0x2D	; 45
    9f12:	31 09       	sbc	r19, r1
    9f14:	e2 0f       	add	r30, r18
    9f16:	f3 1f       	adc	r31, r19
    9f18:	0c c0       	rjmp	.+24     	; 0x9f32 <LBPrintChar+0x36>
	}
	else if (code >= 65 && code <= 90)
    9f1a:	9f eb       	ldi	r25, 0xBF	; 191
    9f1c:	94 0f       	add	r25, r20
    9f1e:	9a 31       	cpi	r25, 0x1A	; 26
    9f20:	38 f4       	brcc	.+14     	; 0x9f30 <LBPrintChar+0x34>
	{
		SetTile(x, y, pgm_read_byte(&font_tiles_map[13+code-65]));
    9f22:	50 e0       	ldi	r21, 0x00	; 0
    9f24:	44 53       	subi	r20, 0x34	; 52
    9f26:	51 09       	sbc	r21, r1
    9f28:	e4 0f       	add	r30, r20
    9f2a:	f5 1f       	adc	r31, r21
    9f2c:	44 91       	lpm	r20, Z
    9f2e:	03 c0       	rjmp	.+6      	; 0x9f36 <LBPrintChar+0x3a>
	}
	else
	{
		SetTile(x, y, pgm_read_byte(&font_tiles_map[2]));
    9f30:	32 96       	adiw	r30, 0x02	; 2
    9f32:	e4 91       	lpm	r30, Z
    9f34:	4e 2f       	mov	r20, r30
    9f36:	50 e0       	ldi	r21, 0x00	; 0
    9f38:	0c 94 88 3f 	jmp	0x7f10	; 0x7f10 <SetTile>

00009f3c <LBPrint>:
	}
}

void LBPrint(u8 x, u8 y, char* value)
{
    9f3c:	ff 92       	push	r15
    9f3e:	0f 93       	push	r16
    9f40:	1f 93       	push	r17
    9f42:	cf 93       	push	r28
    9f44:	df 93       	push	r29
    9f46:	d8 2f       	mov	r29, r24
    9f48:	f6 2e       	mov	r15, r22
    9f4a:	8a 01       	movw	r16, r20
	u8 i = 0;
    9f4c:	c0 e0       	ldi	r28, 0x00	; 0
    9f4e:	8c 2f       	mov	r24, r28
    9f50:	8d 0f       	add	r24, r29
	u8 code = 0;
	while ((code = pgm_read_byte(&value[i])))
    9f52:	f8 01       	movw	r30, r16
    9f54:	ec 0f       	add	r30, r28
    9f56:	f1 1d       	adc	r31, r1
    9f58:	44 91       	lpm	r20, Z
    9f5a:	44 23       	and	r20, r20
    9f5c:	29 f0       	breq	.+10     	; 0x9f68 <LBPrint+0x2c>
	{
		LBPrintChar(x++, y, code);
    9f5e:	6f 2d       	mov	r22, r15
    9f60:	0e 94 7e 4f 	call	0x9efc	; 0x9efc <LBPrintChar>
		i++;
    9f64:	cf 5f       	subi	r28, 0xFF	; 255
    9f66:	f3 cf       	rjmp	.-26     	; 0x9f4e <LBPrint+0x12>
	}
}
    9f68:	df 91       	pop	r29
    9f6a:	cf 91       	pop	r28
    9f6c:	1f 91       	pop	r17
    9f6e:	0f 91       	pop	r16
    9f70:	ff 90       	pop	r15
    9f72:	08 95       	ret

00009f74 <LBPrintByte>:

void LBPrintByte(u8 x, u8 y, u8 value, char pad)
{
    9f74:	df 92       	push	r13
    9f76:	ef 92       	push	r14
    9f78:	ff 92       	push	r15
    9f7a:	0f 93       	push	r16
    9f7c:	1f 93       	push	r17
    9f7e:	cf 93       	push	r28
    9f80:	df 93       	push	r29
    9f82:	1f 92       	push	r1
    9f84:	cd b7       	in	r28, 0x3d	; 61
    9f86:	de b7       	in	r29, 0x3e	; 62
    9f88:	38 2f       	mov	r19, r24
    9f8a:	06 2f       	mov	r16, r22
    9f8c:	84 2f       	mov	r24, r20
    9f8e:	9d ef       	ldi	r25, 0xFD	; 253
    9f90:	e9 2e       	mov	r14, r25
    9f92:	e3 0e       	add	r14, r19
	for (u8 i = 0; i < 3; i++)
	{
		LBPrintChar(x--, y, value % 10 + 48);
    9f94:	4a e0       	ldi	r20, 0x0A	; 10
    9f96:	f4 2e       	mov	r15, r20
    9f98:	1f ef       	ldi	r17, 0xFF	; 255
    9f9a:	13 0f       	add	r17, r19
    9f9c:	6f 2d       	mov	r22, r15
    9f9e:	0e 94 71 69 	call	0xd2e2	; 0xd2e2 <__udivmodqi4>
    9fa2:	d8 2e       	mov	r13, r24
    9fa4:	40 e3       	ldi	r20, 0x30	; 48
    9fa6:	49 0f       	add	r20, r25
    9fa8:	60 2f       	mov	r22, r16
    9faa:	83 2f       	mov	r24, r19
    9fac:	29 83       	std	Y+1, r18	; 0x01
    9fae:	0e 94 7e 4f 	call	0x9efc	; 0x9efc <LBPrintChar>
		value /= 10;
    9fb2:	8d 2d       	mov	r24, r13
		if (!pad && value == 0) break;
    9fb4:	29 81       	ldd	r18, Y+1	; 0x01
    9fb6:	21 11       	cpse	r18, r1
    9fb8:	02 c0       	rjmp	.+4      	; 0x9fbe <LBPrintByte+0x4a>
    9fba:	dd 20       	and	r13, r13
    9fbc:	19 f0       	breq	.+6      	; 0x9fc4 <LBPrintByte+0x50>
    9fbe:	31 2f       	mov	r19, r17
	}
}

void LBPrintByte(u8 x, u8 y, u8 value, char pad)
{
	for (u8 i = 0; i < 3; i++)
    9fc0:	1e 11       	cpse	r17, r14
    9fc2:	ea cf       	rjmp	.-44     	; 0x9f98 <LBPrintByte+0x24>
	{
		LBPrintChar(x--, y, value % 10 + 48);
		value /= 10;
		if (!pad && value == 0) break;
	}
}
    9fc4:	0f 90       	pop	r0
    9fc6:	df 91       	pop	r29
    9fc8:	cf 91       	pop	r28
    9fca:	1f 91       	pop	r17
    9fcc:	0f 91       	pop	r16
    9fce:	ff 90       	pop	r15
    9fd0:	ef 90       	pop	r14
    9fd2:	df 90       	pop	r13
    9fd4:	08 95       	ret

00009fd6 <LBPrintInt>:

void LBPrintInt(u8 x, u8 y, u16 value, char pad)
{
    9fd6:	cf 92       	push	r12
    9fd8:	df 92       	push	r13
    9fda:	ef 92       	push	r14
    9fdc:	ff 92       	push	r15
    9fde:	0f 93       	push	r16
    9fe0:	1f 93       	push	r17
    9fe2:	cf 93       	push	r28
    9fe4:	df 93       	push	r29
    9fe6:	00 d0       	rcall	.+0      	; 0x9fe8 <LBPrintInt+0x12>
    9fe8:	cd b7       	in	r28, 0x3d	; 61
    9fea:	de b7       	in	r29, 0x3e	; 62
    9fec:	38 2f       	mov	r19, r24
    9fee:	16 2f       	mov	r17, r22
    9ff0:	ca 01       	movw	r24, r20
    9ff2:	4b ef       	ldi	r20, 0xFB	; 251
    9ff4:	d4 2e       	mov	r13, r20
    9ff6:	d3 0e       	add	r13, r19
	for (u8 i = 0; i < 5; i++)
	{
		LBPrintChar(x--, y, value % 10 + 48);
    9ff8:	5a e0       	ldi	r21, 0x0A	; 10
    9ffa:	e5 2e       	mov	r14, r21
    9ffc:	f1 2c       	mov	r15, r1
    9ffe:	cc 24       	eor	r12, r12
    a000:	ca 94       	dec	r12
    a002:	c3 0e       	add	r12, r19
    a004:	b7 01       	movw	r22, r14
    a006:	0e 94 8b 69 	call	0xd316	; 0xd316 <__udivmodhi4>
    a00a:	06 2f       	mov	r16, r22
    a00c:	40 e3       	ldi	r20, 0x30	; 48
    a00e:	48 0f       	add	r20, r24
    a010:	61 2f       	mov	r22, r17
    a012:	83 2f       	mov	r24, r19
    a014:	29 83       	std	Y+1, r18	; 0x01
    a016:	7a 83       	std	Y+2, r23	; 0x02
    a018:	0e 94 7e 4f 	call	0x9efc	; 0x9efc <LBPrintChar>
		value /= 10;
    a01c:	80 2f       	mov	r24, r16
    a01e:	7a 81       	ldd	r23, Y+2	; 0x02
    a020:	97 2f       	mov	r25, r23
		if (!pad && value == 0) break;
    a022:	29 81       	ldd	r18, Y+1	; 0x01
    a024:	21 11       	cpse	r18, r1
    a026:	02 c0       	rjmp	.+4      	; 0xa02c <LBPrintInt+0x56>
    a028:	00 97       	sbiw	r24, 0x00	; 0
    a02a:	19 f0       	breq	.+6      	; 0xa032 <LBPrintInt+0x5c>
    a02c:	3c 2d       	mov	r19, r12
	}
}

void LBPrintInt(u8 x, u8 y, u16 value, char pad)
{
	for (u8 i = 0; i < 5; i++)
    a02e:	cd 10       	cpse	r12, r13
    a030:	e6 cf       	rjmp	.-52     	; 0x9ffe <LBPrintInt+0x28>
	{
		LBPrintChar(x--, y, value % 10 + 48);
		value /= 10;
		if (!pad && value == 0) break;
	}
}
    a032:	0f 90       	pop	r0
    a034:	0f 90       	pop	r0
    a036:	df 91       	pop	r29
    a038:	cf 91       	pop	r28
    a03a:	1f 91       	pop	r17
    a03c:	0f 91       	pop	r16
    a03e:	ff 90       	pop	r15
    a040:	ef 90       	pop	r14
    a042:	df 90       	pop	r13
    a044:	cf 90       	pop	r12
    a046:	08 95       	ret

0000a048 <LBCollides>:
	}
}

u8 LBCollides(u8 x1, u8 y1, u8 width1, u8 height1,
						 u8 x2, u8 y2, u8 width2, u8 height2)
{
    a048:	af 92       	push	r10
    a04a:	cf 92       	push	r12
    a04c:	ef 92       	push	r14
    a04e:	ff 92       	push	r15
    a050:	0f 93       	push	r16
    a052:	1f 93       	push	r17
	if (y1 + height1 <= y2) return 0;
    a054:	70 e0       	ldi	r23, 0x00	; 0
    a056:	f1 2c       	mov	r15, r1
    a058:	fb 01       	movw	r30, r22
    a05a:	e2 0f       	add	r30, r18
    a05c:	f1 1d       	adc	r31, r1
    a05e:	ee 16       	cp	r14, r30
    a060:	ff 06       	cpc	r15, r31
    a062:	a4 f4       	brge	.+40     	; 0xa08c <LBCollides+0x44>
	if (y1 >= y2 + height2) return 0;
    a064:	ea 0c       	add	r14, r10
    a066:	f1 1c       	adc	r15, r1
    a068:	6e 15       	cp	r22, r14
    a06a:	7f 05       	cpc	r23, r15
    a06c:	7c f4       	brge	.+30     	; 0xa08c <LBCollides+0x44>
	if (x1 + width1 <= x2) return 0;
    a06e:	28 2f       	mov	r18, r24
    a070:	30 e0       	ldi	r19, 0x00	; 0
    a072:	10 e0       	ldi	r17, 0x00	; 0
    a074:	c9 01       	movw	r24, r18
    a076:	84 0f       	add	r24, r20
    a078:	91 1d       	adc	r25, r1
    a07a:	08 17       	cp	r16, r24
    a07c:	19 07       	cpc	r17, r25
    a07e:	34 f4       	brge	.+12     	; 0xa08c <LBCollides+0x44>
	if (x1 >= x2 + width2) return 0;
    a080:	0c 0d       	add	r16, r12
    a082:	11 1d       	adc	r17, r1
    a084:	81 e0       	ldi	r24, 0x01	; 1
    a086:	20 17       	cp	r18, r16
    a088:	31 07       	cpc	r19, r17
    a08a:	0c f0       	brlt	.+2      	; 0xa08e <LBCollides+0x46>
}

u8 LBCollides(u8 x1, u8 y1, u8 width1, u8 height1,
						 u8 x2, u8 y2, u8 width2, u8 height2)
{
	if (y1 + height1 <= y2) return 0;
    a08c:	80 e0       	ldi	r24, 0x00	; 0
	if (y1 >= y2 + height2) return 0;
	if (x1 + width1 <= x2) return 0;
	if (x1 >= x2 + width2) return 0;
	return 1;
}
    a08e:	1f 91       	pop	r17
    a090:	0f 91       	pop	r16
    a092:	ff 90       	pop	r15
    a094:	ef 90       	pop	r14
    a096:	cf 90       	pop	r12
    a098:	af 90       	pop	r10
    a09a:	08 95       	ret

0000a09c <LBRandom>:

u8 LBRandom(u8 from, u8 to)
/*
 * Return a random number between 'from' and 'to'.
 */
{
    a09c:	cf 93       	push	r28
    a09e:	df 93       	push	r29
    a0a0:	d8 2f       	mov	r29, r24
    a0a2:	c6 2f       	mov	r28, r22
	u16 tmp = GetPrngNumber(0) % 255;
    a0a4:	80 e0       	ldi	r24, 0x00	; 0
    a0a6:	90 e0       	ldi	r25, 0x00	; 0
    a0a8:	0e 94 76 41 	call	0x82ec	; 0x82ec <GetPrngNumber>
    a0ac:	6f ef       	ldi	r22, 0xFF	; 255
    a0ae:	70 e0       	ldi	r23, 0x00	; 0
    a0b0:	0e 94 8b 69 	call	0xd316	; 0xd316 <__udivmodhi4>
	return (((u8)tmp) % (to - from)) + from;
    a0b4:	6c 2f       	mov	r22, r28
    a0b6:	70 e0       	ldi	r23, 0x00	; 0
    a0b8:	6d 1b       	sub	r22, r29
    a0ba:	71 09       	sbc	r23, r1
    a0bc:	0e 94 9f 69 	call	0xd33e	; 0xd33e <__divmodhi4>
}
    a0c0:	8d 0f       	add	r24, r29
    a0c2:	df 91       	pop	r29
    a0c4:	cf 91       	pop	r28
    a0c6:	08 95       	ret

0000a0c8 <LBWaitSeconds>:

void LBWaitSeconds(u8 seconds)
{
    a0c8:	cf 93       	push	r28
    a0ca:	df 93       	push	r29
    a0cc:	d8 2f       	mov	r29, r24
	for(u8 i = 0; i < seconds; i++)
    a0ce:	c0 e0       	ldi	r28, 0x00	; 0
    a0d0:	cd 17       	cp	r28, r29
    a0d2:	31 f0       	breq	.+12     	; 0xa0e0 <LBWaitSeconds+0x18>
	{
		WaitUs(65535);
    a0d4:	8f ef       	ldi	r24, 0xFF	; 255
    a0d6:	9f ef       	ldi	r25, 0xFF	; 255
    a0d8:	0e 94 b4 3f 	call	0x7f68	; 0x7f68 <WaitUs>
	return (((u8)tmp) % (to - from)) + from;
}

void LBWaitSeconds(u8 seconds)
{
	for(u8 i = 0; i < seconds; i++)
    a0dc:	cf 5f       	subi	r28, 0xFF	; 255
    a0de:	f8 cf       	rjmp	.-16     	; 0xa0d0 <LBWaitSeconds+0x8>
	{
		WaitUs(65535);
	}
}
    a0e0:	df 91       	pop	r29
    a0e2:	cf 91       	pop	r28
    a0e4:	08 95       	ret

0000a0e6 <LBMapSprite>:

void LBMapSprite(u8 startSprite,const char *map,u8 spriteFlags)
{
    a0e6:	df 92       	push	r13
    a0e8:	ef 92       	push	r14
    a0ea:	ff 92       	push	r15
    a0ec:	0f 93       	push	r16
    a0ee:	1f 93       	push	r17
    a0f0:	cf 93       	push	r28
    a0f2:	df 93       	push	r29
    a0f4:	db 01       	movw	r26, r22
	u8 mapWidth=pgm_read_byte(&(map[0]));
    a0f6:	fb 01       	movw	r30, r22
    a0f8:	14 91       	lpm	r17, Z
	u8 mapHeight=pgm_read_byte(&(map[1]));
    a0fa:	31 96       	adiw	r30, 0x01	; 1
    a0fc:	64 91       	lpm	r22, Z
    a0fe:	5f ef       	ldi	r21, 0xFF	; 255
    a100:	51 0f       	add	r21, r17
	s8 x,y,dx,dy,t; 

	if(spriteFlags & SPRITE_FLIP_X)
    a102:	24 2f       	mov	r18, r20
    a104:	21 70       	andi	r18, 0x01	; 1
    a106:	40 ff       	sbrs	r20, 0
    a108:	04 c0       	rjmp	.+8      	; 0xa112 <LBMapSprite+0x2c>
	{
		x=(mapWidth-1);
    a10a:	95 2f       	mov	r25, r21
		dx=-1;
    a10c:	ff 24       	eor	r15, r15
    a10e:	fa 94       	dec	r15
    a110:	03 c0       	rjmp	.+6      	; 0xa118 <LBMapSprite+0x32>
	}
	else
	{
		x=0;
		dx=1;
    a112:	ff 24       	eor	r15, r15
    a114:	f3 94       	inc	r15
		x=(mapWidth-1);
		dx=-1;
	}
	else
	{
		x=0;
    a116:	90 e0       	ldi	r25, 0x00	; 0
		dx=1;
	}

	if(spriteFlags & SPRITE_FLIP_Y)
    a118:	41 ff       	sbrs	r20, 1
    a11a:	05 c0       	rjmp	.+10     	; 0xa126 <LBMapSprite+0x40>
	{
		y=(mapHeight-1);
    a11c:	7f ef       	ldi	r23, 0xFF	; 255
    a11e:	76 0f       	add	r23, r22
		dy=-1;
    a120:	ee 24       	eor	r14, r14
    a122:	ea 94       	dec	r14
    a124:	03 c0       	rjmp	.+6      	; 0xa12c <LBMapSprite+0x46>
	}
	else
	{
		y=0;
		dy=1;
    a126:	ee 24       	eor	r14, r14
    a128:	e3 94       	inc	r14
		y=(mapHeight-1);
		dy=-1;
	}
	else
	{
		y=0;
    a12a:	70 e0       	ldi	r23, 0x00	; 0
    a12c:	21 11       	cpse	r18, r1
    a12e:	01 c0       	rjmp	.+2      	; 0xa132 <LBMapSprite+0x4c>
    a130:	50 e0       	ldi	r21, 0x00	; 0
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
    a132:	00 e0       	ldi	r16, 0x00	; 0
    a134:	06 17       	cp	r16, r22
    a136:	09 f1       	breq	.+66     	; 0xa17a <LBMapSprite+0x94>
	{
		for(u8 cx=0;cx<mapWidth;cx++)
		{
			t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    a138:	71 03       	mulsu	r23, r17
    a13a:	e0 01       	movw	r28, r0
    a13c:	11 24       	eor	r1, r1
    a13e:	d8 2e       	mov	r13, r24
    a140:	d1 0e       	add	r13, r17
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
	{
		for(u8 cx=0;cx<mapWidth;cx++)
    a142:	8d 15       	cp	r24, r13
    a144:	b1 f0       	breq	.+44     	; 0xa172 <LBMapSprite+0x8c>
		{
			t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    a146:	9e 01       	movw	r18, r28
    a148:	29 0f       	add	r18, r25
    a14a:	31 1d       	adc	r19, r1
    a14c:	97 fd       	sbrc	r25, 7
    a14e:	3a 95       	dec	r19
    a150:	2e 5f       	subi	r18, 0xFE	; 254
    a152:	3f 4f       	sbci	r19, 0xFF	; 255
    a154:	fd 01       	movw	r30, r26
    a156:	e2 0f       	add	r30, r18
    a158:	f3 1f       	adc	r31, r19
    a15a:	24 91       	lpm	r18, Z
			extendedSprites[startSprite].tileIndex=t;
    a15c:	34 e0       	ldi	r19, 0x04	; 4
    a15e:	83 9f       	mul	r24, r19
    a160:	f0 01       	movw	r30, r0
    a162:	11 24       	eor	r1, r1
    a164:	e2 54       	subi	r30, 0x42	; 66
    a166:	f0 4f       	sbci	r31, 0xF0	; 240
    a168:	22 83       	std	Z+2, r18	; 0x02
			extendedSprites[startSprite++].flags=spriteFlags;
    a16a:	8f 5f       	subi	r24, 0xFF	; 255
    a16c:	43 83       	std	Z+3, r20	; 0x03
    a16e:	9f 0d       	add	r25, r15
    a170:	e8 cf       	rjmp	.-48     	; 0xa142 <LBMapSprite+0x5c>
    a172:	7e 0d       	add	r23, r14
	{
		y=0;
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
    a174:	0f 5f       	subi	r16, 0xFF	; 255
			extendedSprites[startSprite].tileIndex=t;
			extendedSprites[startSprite++].flags=spriteFlags;
			x+=dx;
		}
		y+=dy;
		x=(spriteFlags & SPRITE_FLIP_X)?(mapWidth-1):0;
    a176:	95 2f       	mov	r25, r21
    a178:	dd cf       	rjmp	.-70     	; 0xa134 <LBMapSprite+0x4e>
	}
}
    a17a:	df 91       	pop	r29
    a17c:	cf 91       	pop	r28
    a17e:	1f 91       	pop	r17
    a180:	0f 91       	pop	r16
    a182:	ff 90       	pop	r15
    a184:	ef 90       	pop	r14
    a186:	df 90       	pop	r13
    a188:	08 95       	ret

0000a18a <LBMoveSprite>:

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
    a18a:	df 92       	push	r13
    a18c:	ef 92       	push	r14
    a18e:	ff 92       	push	r15
    a190:	0f 93       	push	r16
    a192:	1f 93       	push	r17
    a194:	cf 93       	push	r28
    a196:	df 93       	push	r29
		{
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
    a198:	a0 91 b4 0c 	lds	r26, 0x0CB4
    a19c:	98 e0       	ldi	r25, 0x08	; 8
    a19e:	a9 9f       	mul	r26, r25
    a1a0:	70 01       	movw	r14, r0
    a1a2:	11 24       	eor	r1, r1
    a1a4:	50 e0       	ldi	r21, 0x00	; 0
    a1a6:	38 ef       	ldi	r19, 0xF8	; 248
    a1a8:	a3 9f       	mul	r26, r19
    a1aa:	30 2d       	mov	r19, r0
    a1ac:	11 24       	eor	r1, r1
	}
}

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
	for(u8 dy=0;dy<height;dy++)
    a1ae:	70 e0       	ldi	r23, 0x00	; 0
    a1b0:	70 17       	cp	r23, r16
    a1b2:	09 f1       	breq	.+66     	; 0xa1f6 <LBMoveSprite+0x6c>
    a1b4:	d4 2e       	mov	r13, r20
    a1b6:	13 2f       	mov	r17, r19
    a1b8:	14 0f       	add	r17, r20
    a1ba:	b8 2f       	mov	r27, r24
    a1bc:	b2 0f       	add	r27, r18
    a1be:	96 2f       	mov	r25, r22
	{
		for(u8 dx=0;dx<width;dx++)
    a1c0:	8b 17       	cp	r24, r27
    a1c2:	a9 f0       	breq	.+42     	; 0xa1ee <LBMoveSprite+0x64>
		{
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
    a1c4:	c4 e0       	ldi	r28, 0x04	; 4
    a1c6:	8c 9f       	mul	r24, r28
    a1c8:	f0 01       	movw	r30, r0
    a1ca:	11 24       	eor	r1, r1
    a1cc:	ef 01       	movw	r28, r30
    a1ce:	c2 54       	subi	r28, 0x42	; 66
    a1d0:	d0 4f       	sbci	r29, 0xF0	; 240
    a1d2:	98 83       	st	Y, r25
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
    a1d4:	a0 32       	cpi	r26, 0x20	; 32
    a1d6:	28 f4       	brcc	.+10     	; 0xa1e2 <LBMoveSprite+0x58>
    a1d8:	e4 16       	cp	r14, r20
    a1da:	f5 06       	cpc	r15, r21
    a1dc:	14 f4       	brge	.+4      	; 0xa1e2 <LBMoveSprite+0x58>
				{
					u8 tmp=(y+(TILE_HEIGHT*dy))-(Screen.scrollHeight*TILE_HEIGHT);
					extendedSprites[startSprite].y=tmp;
    a1de:	19 83       	std	Y+1, r17	; 0x01
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
				{
    a1e0:	03 c0       	rjmp	.+6      	; 0xa1e8 <LBMoveSprite+0x5e>
					u8 tmp=(y+(TILE_HEIGHT*dy))-(Screen.scrollHeight*TILE_HEIGHT);
					extendedSprites[startSprite].y=tmp;
				}
				else
				{
					extendedSprites[startSprite].y=y+(TILE_HEIGHT*dy);
    a1e2:	e2 54       	subi	r30, 0x42	; 66
    a1e4:	f0 4f       	sbci	r31, 0xF0	; 240
    a1e6:	d1 82       	std	Z+1, r13	; 0x01
				{
					extendedSprites[startSprite].y=y+(TILE_HEIGHT*dy);
				}
			#endif

			startSprite++;
    a1e8:	8f 5f       	subi	r24, 0xFF	; 255
    a1ea:	98 5f       	subi	r25, 0xF8	; 248
    a1ec:	e9 cf       	rjmp	.-46     	; 0xa1c0 <LBMoveSprite+0x36>
	}
}

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
	for(u8 dy=0;dy<height;dy++)
    a1ee:	7f 5f       	subi	r23, 0xFF	; 255
    a1f0:	48 5f       	subi	r20, 0xF8	; 248
    a1f2:	5f 4f       	sbci	r21, 0xFF	; 255
    a1f4:	dd cf       	rjmp	.-70     	; 0xa1b0 <LBMoveSprite+0x26>
			#endif

			startSprite++;
		}
	}	
}
    a1f6:	df 91       	pop	r29
    a1f8:	cf 91       	pop	r28
    a1fa:	1f 91       	pop	r17
    a1fc:	0f 91       	pop	r16
    a1fe:	ff 90       	pop	r15
    a200:	ef 90       	pop	r14
    a202:	df 90       	pop	r13
    a204:	08 95       	ret

0000a206 <LBRotateSprites>:

void LBRotateSprites()
{
    a206:	80 e0       	ldi	r24, 0x00	; 0
    a208:	90 e0       	ldi	r25, 0x00	; 0
    a20a:	dc 01       	movw	r26, r24
    a20c:	a2 54       	subi	r26, 0x42	; 66
    a20e:	b0 4f       	sbci	r27, 0xF0	; 240
    a210:	fc 01       	movw	r30, r24
    a212:	e0 5f       	subi	r30, 0xF0	; 240
    a214:	fa 4f       	sbci	r31, 0xFA	; 250
	static u8 rotate_index = ROTATE_SPRITES_FROM;
	u8 mappedSpriteCount = MAX_EXTENDED_SPRITES;
	
	for (u8 i = 0; i < ROTATE_SPRITES_FROM; i++)
	{
		sprites[i].flags = extendedSprites[i].flags;
    a216:	13 96       	adiw	r26, 0x03	; 3
    a218:	2c 91       	ld	r18, X
    a21a:	13 97       	sbiw	r26, 0x03	; 3
    a21c:	23 83       	std	Z+3, r18	; 0x03
		sprites[i].tileIndex = extendedSprites[i].tileIndex;
    a21e:	12 96       	adiw	r26, 0x02	; 2
    a220:	2c 91       	ld	r18, X
    a222:	12 97       	sbiw	r26, 0x02	; 2
    a224:	22 83       	std	Z+2, r18	; 0x02
		sprites[i].x = extendedSprites[i].x;
    a226:	2c 91       	ld	r18, X
    a228:	20 83       	st	Z, r18
		sprites[i].y = extendedSprites[i].y;
    a22a:	11 96       	adiw	r26, 0x01	; 1
    a22c:	2c 91       	ld	r18, X
    a22e:	21 83       	std	Z+1, r18	; 0x01
    a230:	04 96       	adiw	r24, 0x04	; 4
void LBRotateSprites()
{
	static u8 rotate_index = ROTATE_SPRITES_FROM;
	u8 mappedSpriteCount = MAX_EXTENDED_SPRITES;
	
	for (u8 i = 0; i < ROTATE_SPRITES_FROM; i++)
    a232:	8c 33       	cpi	r24, 0x3C	; 60
    a234:	91 05       	cpc	r25, r1
    a236:	49 f7       	brne	.-46     	; 0xa20a <LBRotateSprites+0x4>
		sprites[i].y = extendedSprites[i].y;
	}
	
	for (u8 i = ROTATE_SPRITES_FROM; i < MAX_SPRITES; i++)
	{
		sprites[i].flags = extendedSprites[rotate_index].flags;
    a238:	80 91 01 05 	lds	r24, 0x0501
    a23c:	94 e0       	ldi	r25, 0x04	; 4
    a23e:	89 9f       	mul	r24, r25
    a240:	f0 01       	movw	r30, r0
    a242:	11 24       	eor	r1, r1
    a244:	e2 54       	subi	r30, 0x42	; 66
    a246:	f0 4f       	sbci	r31, 0xF0	; 240
    a248:	93 81       	ldd	r25, Z+3	; 0x03
    a24a:	90 93 4f 05 	sts	0x054F, r25
		sprites[i].tileIndex = extendedSprites[rotate_index].tileIndex;
    a24e:	92 81       	ldd	r25, Z+2	; 0x02
    a250:	90 93 4e 05 	sts	0x054E, r25
		sprites[i].x = extendedSprites[rotate_index].x;
    a254:	90 81       	ld	r25, Z
    a256:	90 93 4c 05 	sts	0x054C, r25
		sprites[i].y = extendedSprites[rotate_index].y;
    a25a:	91 81       	ldd	r25, Z+1	; 0x01
    a25c:	90 93 4d 05 	sts	0x054D, r25
		rotate_index += 1;
    a260:	8f 5f       	subi	r24, 0xFF	; 255
		if (rotate_index >= MAX_EXTENDED_SPRITES) rotate_index = ROTATE_SPRITES_FROM;
    a262:	84 31       	cpi	r24, 0x14	; 20
    a264:	08 f0       	brcs	.+2      	; 0xa268 <LBRotateSprites+0x62>
    a266:	8f e0       	ldi	r24, 0x0F	; 15
    a268:	80 93 01 05 	sts	0x0501, r24
    a26c:	08 95       	ret

0000a26e <is_space>:
char* boss_run_anim[4];
char* boss_shot_anim[1];

u8 is_space()
{
	return (game.current_level_index % 2 != 0);
    a26e:	80 91 c4 0d 	lds	r24, 0x0DC4
}
    a272:	81 70       	andi	r24, 0x01	; 1
    a274:	08 95       	ret

0000a276 <init_default_high_scores>:

void init_default_high_scores()
{
	scores.id = EEPROM_SCORES_ID;
    a276:	8c e8       	ldi	r24, 0x8C	; 140
    a278:	90 e0       	ldi	r25, 0x00	; 0
    a27a:	90 93 90 0d 	sts	0x0D90, r25
    a27e:	80 93 8f 0d 	sts	0x0D8F, r24
    a282:	80 e0       	ldi	r24, 0x00	; 0
    a284:	90 e0       	ldi	r25, 0x00	; 0
    a286:	fc 01       	movw	r30, r24
    a288:	e8 56       	subi	r30, 0x68	; 104
    a28a:	f5 4f       	sbci	r31, 0xF5	; 245
	for (u8 i = 0; i < 30; i++)
	{
		scores.data[i] = pgm_read_byte(&default_scores[i]);
    a28c:	e4 91       	lpm	r30, Z
    a28e:	dc 01       	movw	r26, r24
    a290:	a1 57       	subi	r26, 0x71	; 113
    a292:	b2 4f       	sbci	r27, 0xF2	; 242
    a294:	12 96       	adiw	r26, 0x02	; 2
    a296:	ec 93       	st	X, r30
    a298:	01 96       	adiw	r24, 0x01	; 1
}

void init_default_high_scores()
{
	scores.id = EEPROM_SCORES_ID;
	for (u8 i = 0; i < 30; i++)
    a29a:	8e 31       	cpi	r24, 0x1E	; 30
    a29c:	91 05       	cpc	r25, r1
    a29e:	99 f7       	brne	.-26     	; 0xa286 <init_default_high_scores+0x10>
	{
		scores.data[i] = pgm_read_byte(&default_scores[i]);
	}
}
    a2a0:	08 95       	ret

0000a2a2 <init_enemy_state>:

void init_enemy_state()
{
    a2a2:	80 e0       	ldi	r24, 0x00	; 0
    a2a4:	90 e0       	ldi	r25, 0x00	; 0
    a2a6:	9c 01       	movw	r18, r24
    a2a8:	21 55       	subi	r18, 0x51	; 81
    a2aa:	32 4f       	sbci	r19, 0xF2	; 242
    a2ac:	f9 01       	movw	r30, r18
    a2ae:	e3 5f       	subi	r30, 0xF3	; 243
    a2b0:	fe 4f       	sbci	r31, 0xFE	; 254
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		game.enemies[i].active = 0;
    a2b2:	10 82       	st	Z, r1
    a2b4:	73 96       	adiw	r30, 0x13	; 19
		for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
		{
			game.enemies[i].shot[j].active = 0;
    a2b6:	10 82       	st	Z, r1
    a2b8:	c3 96       	adiw	r24, 0x33	; 51
	}
}

void init_enemy_state()
{
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    a2ba:	8f 3f       	cpi	r24, 0xFF	; 255
    a2bc:	91 05       	cpc	r25, r1
    a2be:	99 f7       	brne	.-26     	; 0xa2a6 <init_enemy_state+0x4>
		for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
		{
			game.enemies[i].shot[j].active = 0;
		}
	}
	game.active_enemies = 0;
    a2c0:	10 92 ca 0d 	sts	0x0DCA, r1
    a2c4:	08 95       	ret

0000a2c6 <init_boss_state>:
void LBResetJoyPadState(JoyPadState* p)
/*
 * Get the current joy pad button state for index controller
 */
{
	p->held = 0;
    a2c6:	10 92 b3 0e 	sts	0x0EB3, r1
    a2ca:	10 92 b2 0e 	sts	0x0EB2, r1
	p->pressed = 0;
    a2ce:	10 92 af 0e 	sts	0x0EAF, r1
    a2d2:	10 92 ae 0e 	sts	0x0EAE, r1
	p->released = 0;
    a2d6:	10 92 b1 0e 	sts	0x0EB1, r1
    a2da:	10 92 b0 0e 	sts	0x0EB0, r1
	p->held_cycles = 0;
    a2de:	10 92 b4 0e 	sts	0x0EB4, r1
}

void init_boss_state()
{
	LBResetJoyPadState(&game.boss.controls);
	if (is_space())
    a2e2:	0e 94 37 51 	call	0xa26e	; 0xa26e <is_space>
    a2e6:	88 23       	and	r24, r24
    a2e8:	f9 f0       	breq	.+62     	; 0xa328 <init_boss_state+0x62>
	{
		game.boss.width = 3;
    a2ea:	83 e0       	ldi	r24, 0x03	; 3
    a2ec:	80 93 4c 0e 	sts	0x0E4C, r24
		game.boss.height = 1;
    a2f0:	81 e0       	ldi	r24, 0x01	; 1
    a2f2:	80 93 4d 0e 	sts	0x0E4D, r24
		game.boss.run.anim_count = 2;
    a2f6:	82 e0       	ldi	r24, 0x02	; 2
    a2f8:	80 93 8f 0e 	sts	0x0E8F, r24
		game.boss.run.frames_per_anim = EXPLOSION_FRAME_COUNT;
    a2fc:	85 e0       	ldi	r24, 0x05	; 5
    a2fe:	80 93 90 0e 	sts	0x0E90, r24
		game.boss.run.anims = boss_run_anim;
    a302:	85 e8       	ldi	r24, 0x85	; 133
    a304:	9d e0       	ldi	r25, 0x0D	; 13
    a306:	90 93 95 0e 	sts	0x0E95, r25
    a30a:	80 93 94 0e 	sts	0x0E94, r24
		game.boss.run.anims[0] = (char*) map_hero_ship_0;
    a30e:	80 e4       	ldi	r24, 0x40	; 64
    a310:	96 e3       	ldi	r25, 0x36	; 54
    a312:	90 93 86 0d 	sts	0x0D86, r25
    a316:	80 93 85 0d 	sts	0x0D85, r24
		game.boss.run.anims[1] = (char*) map_hero_ship_1;
    a31a:	8b e3       	ldi	r24, 0x3B	; 59
    a31c:	96 e3       	ldi	r25, 0x36	; 54
    a31e:	90 93 88 0d 	sts	0x0D88, r25
    a322:	80 93 87 0d 	sts	0x0D87, r24
    a326:	2a c0       	rjmp	.+84     	; 0xa37c <init_boss_state+0xb6>
	}
	else
	{
		game.boss.width = 2;
    a328:	82 e0       	ldi	r24, 0x02	; 2
    a32a:	80 93 4c 0e 	sts	0x0E4C, r24
		game.boss.height = 3;
    a32e:	83 e0       	ldi	r24, 0x03	; 3
    a330:	80 93 4d 0e 	sts	0x0E4D, r24
		game.boss.run.anim_count = 4;
    a334:	84 e0       	ldi	r24, 0x04	; 4
    a336:	80 93 8f 0e 	sts	0x0E8F, r24
		game.boss.run.frames_per_anim = FRAMES_PER_RUN_CYCLE;
    a33a:	8c e0       	ldi	r24, 0x0C	; 12
    a33c:	80 93 90 0e 	sts	0x0E90, r24
		game.boss.run.anims = boss_run_anim;
    a340:	85 e8       	ldi	r24, 0x85	; 133
    a342:	9d e0       	ldi	r25, 0x0D	; 13
    a344:	90 93 95 0e 	sts	0x0E95, r25
    a348:	80 93 94 0e 	sts	0x0E94, r24
		game.boss.run.anims[0] = (char*) map_ahero_step_0;
    a34c:	8b e0       	ldi	r24, 0x0B	; 11
    a34e:	96 e3       	ldi	r25, 0x36	; 54
    a350:	90 93 86 0d 	sts	0x0D86, r25
    a354:	80 93 85 0d 	sts	0x0D85, r24
		game.boss.run.anims[1] = (char*) map_ahero_step_1;
    a358:	83 e0       	ldi	r24, 0x03	; 3
    a35a:	96 e3       	ldi	r25, 0x36	; 54
    a35c:	90 93 88 0d 	sts	0x0D88, r25
    a360:	80 93 87 0d 	sts	0x0D87, r24
		game.boss.run.anims[2] = (char*) map_ahero_step_2;
    a364:	8b ef       	ldi	r24, 0xFB	; 251
    a366:	95 e3       	ldi	r25, 0x35	; 53
    a368:	90 93 8a 0d 	sts	0x0D8A, r25
    a36c:	80 93 89 0d 	sts	0x0D89, r24
		game.boss.run.anims[3] = (char*) map_ahero_step_3;
    a370:	83 ef       	ldi	r24, 0xF3	; 243
    a372:	95 e3       	ldi	r25, 0x35	; 53
    a374:	90 93 8c 0d 	sts	0x0D8C, r25
    a378:	80 93 8b 0d 	sts	0x0D8B, r24
	}
	game.boss.active = 0;
    a37c:	10 92 4e 0e 	sts	0x0E4E, r1
	game.boss.direction = D_RIGHT;
    a380:	81 e0       	ldi	r24, 0x01	; 1
    a382:	80 93 4b 0e 	sts	0x0E4B, r24
	game.boss.flags = IDLE;
    a386:	98 e0       	ldi	r25, 0x08	; 8
    a388:	90 93 49 0e 	sts	0x0E49, r25
	game.boss.ai_flags = AI_NOT_READY;
    a38c:	10 92 4a 0e 	sts	0x0E4A, r1
	game.boss.shield = BOSS_SHIELD;
    a390:	9a e0       	ldi	r25, 0x0A	; 10
    a392:	90 93 4f 0e 	sts	0x0E4F, r25
	game.boss.idle.anim_count = 1;
    a396:	80 93 87 0e 	sts	0x0E87, r24
	game.boss.idle.frames_per_anim = 1;
    a39a:	80 93 88 0e 	sts	0x0E88, r24
	game.boss.idle.anims = boss_idle_anim;
    a39e:	24 e2       	ldi	r18, 0x24	; 36
    a3a0:	30 e1       	ldi	r19, 0x10	; 16
    a3a2:	30 93 8d 0e 	sts	0x0E8D, r19
    a3a6:	20 93 8c 0e 	sts	0x0E8C, r18
	game.boss.idle.anims[0] = (char*) map_ahero_idle;
    a3aa:	23 e1       	ldi	r18, 0x13	; 19
    a3ac:	36 e3       	ldi	r19, 0x36	; 54
    a3ae:	30 93 25 10 	sts	0x1025, r19
    a3b2:	20 93 24 10 	sts	0x1024, r18
	
	game.boss.jump.anim_count = 1;
    a3b6:	80 93 97 0e 	sts	0x0E97, r24
	game.boss.jump.frames_per_anim = 1;
    a3ba:	80 93 98 0e 	sts	0x0E98, r24
	game.boss.jump.anims = boss_jump_anim;
    a3be:	86 e1       	ldi	r24, 0x16	; 22
    a3c0:	90 e1       	ldi	r25, 0x10	; 16
    a3c2:	90 93 9d 0e 	sts	0x0E9D, r25
    a3c6:	80 93 9c 0e 	sts	0x0E9C, r24
	game.boss.jump.anims[0] = (char*) map_ahero_jump;
    a3ca:	8b ee       	ldi	r24, 0xEB	; 235
    a3cc:	95 e3       	ldi	r25, 0x35	; 53
    a3ce:	90 93 17 10 	sts	0x1017, r25
    a3d2:	80 93 16 10 	sts	0x1016, r24
	
	game.boss.expl.anim_count = 3;
    a3d6:	83 e0       	ldi	r24, 0x03	; 3
    a3d8:	80 93 a7 0e 	sts	0x0EA7, r24
	game.boss.expl.frames_per_anim = EXPLOSION_FRAME_COUNT;
    a3dc:	85 e0       	ldi	r24, 0x05	; 5
    a3de:	80 93 a8 0e 	sts	0x0EA8, r24
	game.boss.expl.anims = expl_anim;
    a3e2:	8e e1       	ldi	r24, 0x1E	; 30
    a3e4:	90 e1       	ldi	r25, 0x10	; 16
    a3e6:	90 93 ad 0e 	sts	0x0EAD, r25
    a3ea:	80 93 ac 0e 	sts	0x0EAC, r24
	game.boss.expl.anims[0] = (char*) map_explosion_0;
    a3ee:	8f e8       	ldi	r24, 0x8F	; 143
    a3f0:	96 e3       	ldi	r25, 0x36	; 54
    a3f2:	90 93 1f 10 	sts	0x101F, r25
    a3f6:	80 93 1e 10 	sts	0x101E, r24
	game.boss.expl.anims[1] = (char*) map_explosion_1;
    a3fa:	8c e8       	ldi	r24, 0x8C	; 140
    a3fc:	96 e3       	ldi	r25, 0x36	; 54
    a3fe:	90 93 21 10 	sts	0x1021, r25
    a402:	80 93 20 10 	sts	0x1020, r24
	game.boss.expl.anims[2] = (char*) map_explosion_2;
    a406:	89 e8       	ldi	r24, 0x89	; 137
    a408:	96 e3       	ldi	r25, 0x36	; 54
    a40a:	90 93 23 10 	sts	0x1023, r25
    a40e:	80 93 22 10 	sts	0x1022, r24
    a412:	ec e5       	ldi	r30, 0x5C	; 92
    a414:	fe e0       	ldi	r31, 0x0E	; 14
	
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
	{
		game.boss.shot[i].hit_count = 1;
    a416:	81 e0       	ldi	r24, 0x01	; 1
		game.boss.shot[i].shot_type = BASIC_SHOT;
		game.boss.shot[i].anim.anim_count = 1;
		game.boss.shot[i].anim.frames_per_anim = 1;
		game.boss.shot[i].anim.anims = boss_shot_anim;
    a418:	2a e1       	ldi	r18, 0x1A	; 26
    a41a:	30 e1       	ldi	r19, 0x10	; 16
    a41c:	df 01       	movw	r26, r30
    a41e:	14 97       	sbiw	r26, 0x04	; 4
	game.boss.expl.anims[1] = (char*) map_explosion_1;
	game.boss.expl.anims[2] = (char*) map_explosion_2;
	
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
	{
		game.boss.shot[i].hit_count = 1;
    a420:	8c 93       	st	X, r24
    a422:	11 97       	sbiw	r26, 0x01	; 1
		game.boss.shot[i].shot_type = BASIC_SHOT;
    a424:	1c 92       	st	X, r1
    a426:	14 96       	adiw	r26, 0x04	; 4
		game.boss.shot[i].anim.anim_count = 1;
    a428:	8c 93       	st	X, r24
		game.boss.shot[i].anim.frames_per_anim = 1;
    a42a:	80 83       	st	Z, r24
		game.boss.shot[i].anim.anims = boss_shot_anim;
    a42c:	35 83       	std	Z+5, r19	; 0x05
    a42e:	24 83       	std	Z+4, r18	; 0x04
    a430:	72 96       	adiw	r30, 0x12	; 18
	game.boss.expl.anims = expl_anim;
	game.boss.expl.anims[0] = (char*) map_explosion_0;
	game.boss.expl.anims[1] = (char*) map_explosion_1;
	game.boss.expl.anims[2] = (char*) map_explosion_2;
	
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
    a432:	9e e0       	ldi	r25, 0x0E	; 14
    a434:	e2 39       	cpi	r30, 0x92	; 146
    a436:	f9 07       	cpc	r31, r25
    a438:	89 f7       	brne	.-30     	; 0xa41c <init_boss_state+0x156>
    a43a:	88 ee       	ldi	r24, 0xE8	; 232
    a43c:	95 e3       	ldi	r25, 0x35	; 53
    a43e:	90 93 1b 10 	sts	0x101B, r25
    a442:	80 93 1a 10 	sts	0x101A, r24
    a446:	08 95       	ret

0000a448 <init_player_state>:
	}
}

void init_player_state()
{
	if (is_space())
    a448:	0e 94 37 51 	call	0xa26e	; 0xa26e <is_space>
    a44c:	88 23       	and	r24, r24
    a44e:	f9 f0       	breq	.+62     	; 0xa48e <init_player_state+0x46>
	{
		game.player.width = 3;
    a450:	83 e0       	ldi	r24, 0x03	; 3
    a452:	80 93 d8 0d 	sts	0x0DD8, r24
		game.player.height = 1;
    a456:	81 e0       	ldi	r24, 0x01	; 1
    a458:	80 93 d9 0d 	sts	0x0DD9, r24
		game.player.run.anim_count = 2;
    a45c:	82 e0       	ldi	r24, 0x02	; 2
    a45e:	80 93 1b 0e 	sts	0x0E1B, r24
		game.player.run.frames_per_anim = EXPLOSION_FRAME_COUNT;
    a462:	85 e0       	ldi	r24, 0x05	; 5
    a464:	80 93 1c 0e 	sts	0x0E1C, r24
		game.player.run.anims = run_anim;
    a468:	8e e0       	ldi	r24, 0x0E	; 14
    a46a:	90 e1       	ldi	r25, 0x10	; 16
    a46c:	90 93 21 0e 	sts	0x0E21, r25
    a470:	80 93 20 0e 	sts	0x0E20, r24
		game.player.run.anims[0] = (char*) map_hero_ship_0;
    a474:	80 e4       	ldi	r24, 0x40	; 64
    a476:	96 e3       	ldi	r25, 0x36	; 54
    a478:	90 93 0f 10 	sts	0x100F, r25
    a47c:	80 93 0e 10 	sts	0x100E, r24
		game.player.run.anims[1] = (char*) map_hero_ship_1;
    a480:	8b e3       	ldi	r24, 0x3B	; 59
    a482:	96 e3       	ldi	r25, 0x36	; 54
    a484:	90 93 11 10 	sts	0x1011, r25
    a488:	80 93 10 10 	sts	0x1010, r24
    a48c:	2a c0       	rjmp	.+84     	; 0xa4e2 <init_player_state+0x9a>
	}
	else
	{
		game.player.width = 2;
    a48e:	82 e0       	ldi	r24, 0x02	; 2
    a490:	80 93 d8 0d 	sts	0x0DD8, r24
		game.player.height = 3;
    a494:	83 e0       	ldi	r24, 0x03	; 3
    a496:	80 93 d9 0d 	sts	0x0DD9, r24
		game.player.run.anim_count = 4;
    a49a:	84 e0       	ldi	r24, 0x04	; 4
    a49c:	80 93 1b 0e 	sts	0x0E1B, r24
		game.player.run.frames_per_anim = FRAMES_PER_RUN_CYCLE;
    a4a0:	8c e0       	ldi	r24, 0x0C	; 12
    a4a2:	80 93 1c 0e 	sts	0x0E1C, r24
		game.player.run.anims = run_anim;
    a4a6:	8e e0       	ldi	r24, 0x0E	; 14
    a4a8:	90 e1       	ldi	r25, 0x10	; 16
    a4aa:	90 93 21 0e 	sts	0x0E21, r25
    a4ae:	80 93 20 0e 	sts	0x0E20, r24
		game.player.run.anims[0] = (char*) map_hero_step_0;
    a4b2:	8a e6       	ldi	r24, 0x6A	; 106
    a4b4:	96 e3       	ldi	r25, 0x36	; 54
    a4b6:	90 93 0f 10 	sts	0x100F, r25
    a4ba:	80 93 0e 10 	sts	0x100E, r24
		game.player.run.anims[1] = (char*) map_hero_step_1;
    a4be:	82 e6       	ldi	r24, 0x62	; 98
    a4c0:	96 e3       	ldi	r25, 0x36	; 54
    a4c2:	90 93 11 10 	sts	0x1011, r25
    a4c6:	80 93 10 10 	sts	0x1010, r24
		game.player.run.anims[2] = (char*) map_hero_step_2;
    a4ca:	8a e5       	ldi	r24, 0x5A	; 90
    a4cc:	96 e3       	ldi	r25, 0x36	; 54
    a4ce:	90 93 13 10 	sts	0x1013, r25
    a4d2:	80 93 12 10 	sts	0x1012, r24
		game.player.run.anims[3] = (char*) map_hero_step_3;
    a4d6:	82 e5       	ldi	r24, 0x52	; 82
    a4d8:	96 e3       	ldi	r25, 0x36	; 54
    a4da:	90 93 15 10 	sts	0x1015, r25
    a4de:	80 93 14 10 	sts	0x1014, r24
	}
	game.player.active = 1;
    a4e2:	81 e0       	ldi	r24, 0x01	; 1
    a4e4:	80 93 da 0d 	sts	0x0DDA, r24
	game.player.direction = D_RIGHT;
    a4e8:	80 93 d7 0d 	sts	0x0DD7, r24
	game.player.flags = IDLE;
    a4ec:	98 e0       	ldi	r25, 0x08	; 8
    a4ee:	90 93 d5 0d 	sts	0x0DD5, r25
	game.player.ai_flags = AI_NOT_READY;
    a4f2:	10 92 d6 0d 	sts	0x0DD6, r1
	game.player.shield = PLAYER_SHIELD;
    a4f6:	9a e0       	ldi	r25, 0x0A	; 10
    a4f8:	90 93 db 0d 	sts	0x0DDB, r25
	game.player.idle.anim_count = 1;
    a4fc:	80 93 13 0e 	sts	0x0E13, r24
	game.player.idle.frames_per_anim = 1;
    a500:	80 93 14 0e 	sts	0x0E14, r24
	game.player.idle.anims = idle_anim;
    a504:	28 e2       	ldi	r18, 0x28	; 40
    a506:	30 e1       	ldi	r19, 0x10	; 16
    a508:	30 93 19 0e 	sts	0x0E19, r19
    a50c:	20 93 18 0e 	sts	0x0E18, r18
	game.player.idle.anims[0] = (char*) map_hero_idle;
    a510:	22 e7       	ldi	r18, 0x72	; 114
    a512:	36 e3       	ldi	r19, 0x36	; 54
    a514:	30 93 29 10 	sts	0x1029, r19
    a518:	20 93 28 10 	sts	0x1028, r18
	
	game.player.jump.anim_count = 1;
    a51c:	80 93 23 0e 	sts	0x0E23, r24
	game.player.jump.frames_per_anim = 1;
    a520:	80 93 24 0e 	sts	0x0E24, r24
	game.player.jump.anims = jump_anim;
    a524:	2d e8       	ldi	r18, 0x8D	; 141
    a526:	3d e0       	ldi	r19, 0x0D	; 13
    a528:	30 93 29 0e 	sts	0x0E29, r19
    a52c:	20 93 28 0e 	sts	0x0E28, r18
	game.player.jump.anims[0] = (char*) map_hero_jump;
    a530:	2a e4       	ldi	r18, 0x4A	; 74
    a532:	36 e3       	ldi	r19, 0x36	; 54
    a534:	30 93 8e 0d 	sts	0x0D8E, r19
    a538:	20 93 8d 0d 	sts	0x0D8D, r18
	
	game.player.prone.anim_count = 1;
    a53c:	80 93 2b 0e 	sts	0x0E2B, r24
	game.player.prone.frames_per_anim = 1;
    a540:	80 93 2c 0e 	sts	0x0E2C, r24
	game.player.prone.anims = prone_anim;
    a544:	86 eb       	ldi	r24, 0xB6	; 182
    a546:	9f e0       	ldi	r25, 0x0F	; 15
    a548:	90 93 31 0e 	sts	0x0E31, r25
    a54c:	80 93 30 0e 	sts	0x0E30, r24
	game.player.prone.anims[0] = (char*) map_hero_prone;
    a550:	85 e4       	ldi	r24, 0x45	; 69
    a552:	96 e3       	ldi	r25, 0x36	; 54
    a554:	90 93 b7 0f 	sts	0x0FB7, r25
    a558:	80 93 b6 0f 	sts	0x0FB6, r24
	
	game.player.expl.anim_count = 3;
    a55c:	83 e0       	ldi	r24, 0x03	; 3
    a55e:	80 93 33 0e 	sts	0x0E33, r24
	game.player.expl.frames_per_anim = EXPLOSION_FRAME_COUNT;
    a562:	85 e0       	ldi	r24, 0x05	; 5
    a564:	80 93 34 0e 	sts	0x0E34, r24
	game.player.expl.anims = expl_anim;
    a568:	8e e1       	ldi	r24, 0x1E	; 30
    a56a:	90 e1       	ldi	r25, 0x10	; 16
    a56c:	90 93 39 0e 	sts	0x0E39, r25
    a570:	80 93 38 0e 	sts	0x0E38, r24
	game.player.expl.anims[0] = (char*) map_explosion_0;
    a574:	8f e8       	ldi	r24, 0x8F	; 143
    a576:	96 e3       	ldi	r25, 0x36	; 54
    a578:	90 93 1f 10 	sts	0x101F, r25
    a57c:	80 93 1e 10 	sts	0x101E, r24
	game.player.expl.anims[1] = (char*) map_explosion_1;
    a580:	8c e8       	ldi	r24, 0x8C	; 140
    a582:	96 e3       	ldi	r25, 0x36	; 54
    a584:	90 93 21 10 	sts	0x1021, r25
    a588:	80 93 20 10 	sts	0x1020, r24
	game.player.expl.anims[2] = (char*) map_explosion_2;
    a58c:	89 e8       	ldi	r24, 0x89	; 137
    a58e:	96 e3       	ldi	r25, 0x36	; 54
    a590:	90 93 23 10 	sts	0x1023, r25
    a594:	80 93 22 10 	sts	0x1022, r24
    a598:	e8 ee       	ldi	r30, 0xE8	; 232
    a59a:	fd e0       	ldi	r31, 0x0D	; 13
	
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
	{
		game.player.shot[i].hit_count = 1;
    a59c:	81 e0       	ldi	r24, 0x01	; 1
		game.player.shot[i].shot_type = BASIC_SHOT;
		game.player.shot[i].anim.anim_count = 1;
		game.player.shot[i].anim.frames_per_anim = 1;
		game.player.shot[i].anim.anims = shot_anim;
    a59e:	2c e1       	ldi	r18, 0x1C	; 28
    a5a0:	30 e1       	ldi	r19, 0x10	; 16
    a5a2:	df 01       	movw	r26, r30
    a5a4:	14 97       	sbiw	r26, 0x04	; 4
	game.player.expl.anims[1] = (char*) map_explosion_1;
	game.player.expl.anims[2] = (char*) map_explosion_2;
	
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
	{
		game.player.shot[i].hit_count = 1;
    a5a6:	8c 93       	st	X, r24
    a5a8:	11 97       	sbiw	r26, 0x01	; 1
		game.player.shot[i].shot_type = BASIC_SHOT;
    a5aa:	1c 92       	st	X, r1
    a5ac:	14 96       	adiw	r26, 0x04	; 4
		game.player.shot[i].anim.anim_count = 1;
    a5ae:	8c 93       	st	X, r24
		game.player.shot[i].anim.frames_per_anim = 1;
    a5b0:	80 83       	st	Z, r24
		game.player.shot[i].anim.anims = shot_anim;
    a5b2:	35 83       	std	Z+5, r19	; 0x05
    a5b4:	24 83       	std	Z+4, r18	; 0x04
    a5b6:	72 96       	adiw	r30, 0x12	; 18
	game.player.expl.anims = expl_anim;
	game.player.expl.anims[0] = (char*) map_explosion_0;
	game.player.expl.anims[1] = (char*) map_explosion_1;
	game.player.expl.anims[2] = (char*) map_explosion_2;
	
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
    a5b8:	9e e0       	ldi	r25, 0x0E	; 14
    a5ba:	ee 31       	cpi	r30, 0x1E	; 30
    a5bc:	f9 07       	cpc	r31, r25
    a5be:	89 f7       	brne	.-30     	; 0xa5a2 <init_player_state+0x15a>
    a5c0:	84 e2       	ldi	r24, 0x24	; 36
    a5c2:	96 e3       	ldi	r25, 0x36	; 54
    a5c4:	90 93 1d 10 	sts	0x101D, r25
    a5c8:	80 93 1c 10 	sts	0x101C, r24
    a5cc:	08 95       	ret

0000a5ce <init_enemy_shot>:
	}
}

void init_enemy_shot(u8 i, u16 x, u16 y)
{
	game.enemies[i].expl.anim_count = 3;
    a5ce:	23 e3       	ldi	r18, 0x33	; 51
    a5d0:	82 9f       	mul	r24, r18
    a5d2:	c0 01       	movw	r24, r0
    a5d4:	11 24       	eor	r1, r1
    a5d6:	81 55       	subi	r24, 0x51	; 81
    a5d8:	92 4f       	sbci	r25, 0xF2	; 242
    a5da:	fc 01       	movw	r30, r24
    a5dc:	ee 5c       	subi	r30, 0xCE	; 206
    a5de:	fe 4f       	sbci	r31, 0xFE	; 254
    a5e0:	23 e0       	ldi	r18, 0x03	; 3
    a5e2:	20 83       	st	Z, r18
	game.enemies[i].expl.frames_per_anim = EXPLOSION_FRAME_COUNT;
    a5e4:	31 96       	adiw	r30, 0x01	; 1
    a5e6:	25 e0       	ldi	r18, 0x05	; 5
    a5e8:	20 83       	st	Z, r18
	game.enemies[i].expl.anims = expl_anim;
    a5ea:	dc 01       	movw	r26, r24
    a5ec:	a9 5c       	subi	r26, 0xC9	; 201
    a5ee:	be 4f       	sbci	r27, 0xFE	; 254
    a5f0:	ee e1       	ldi	r30, 0x1E	; 30
    a5f2:	f0 e1       	ldi	r31, 0x10	; 16
    a5f4:	11 96       	adiw	r26, 0x01	; 1
    a5f6:	fc 93       	st	X, r31
    a5f8:	ee 93       	st	-X, r30
	game.enemies[i].expl.anims[0] = (char*) map_explosion_0;
    a5fa:	2f e8       	ldi	r18, 0x8F	; 143
    a5fc:	36 e3       	ldi	r19, 0x36	; 54
    a5fe:	31 83       	std	Z+1, r19	; 0x01
    a600:	20 83       	st	Z, r18
	game.enemies[i].expl.anims[1] = (char*) map_explosion_1;
    a602:	2c e8       	ldi	r18, 0x8C	; 140
    a604:	36 e3       	ldi	r19, 0x36	; 54
    a606:	33 83       	std	Z+3, r19	; 0x03
    a608:	22 83       	std	Z+2, r18	; 0x02
	game.enemies[i].expl.anims[2] = (char*) map_explosion_2;
    a60a:	29 e8       	ldi	r18, 0x89	; 137
    a60c:	36 e3       	ldi	r19, 0x36	; 54
    a60e:	35 83       	std	Z+5, r19	; 0x05
    a610:	24 83       	std	Z+4, r18	; 0x04
		
	for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
	{
		game.enemies[i].shot[j].hit_count = 1;
    a612:	fc 01       	movw	r30, r24
    a614:	e1 5e       	subi	r30, 0xE1	; 225
    a616:	fe 4f       	sbci	r31, 0xFE	; 254
    a618:	21 e0       	ldi	r18, 0x01	; 1
    a61a:	20 83       	st	Z, r18
		game.enemies[i].shot[j].active = 0;
    a61c:	31 96       	adiw	r30, 0x01	; 1
    a61e:	10 82       	st	Z, r1
		game.enemies[i].shot[j].shot_type = BASIC_ENEMY_SHOT;
    a620:	32 97       	sbiw	r30, 0x02	; 2
    a622:	20 83       	st	Z, r18
		game.enemies[i].shot[j].anim.anim_count = 1;
    a624:	34 96       	adiw	r30, 0x04	; 4
    a626:	20 83       	st	Z, r18
		game.enemies[i].shot[j].anim.frames_per_anim = 1;
    a628:	31 96       	adiw	r30, 0x01	; 1
    a62a:	20 83       	st	Z, r18
		game.enemies[i].shot[j].anim.anims = enemy_shot_anim;
    a62c:	50 97       	sbiw	r26, 0x10	; 16
    a62e:	e8 e1       	ldi	r30, 0x18	; 24
    a630:	f0 e1       	ldi	r31, 0x10	; 16
    a632:	ed 93       	st	X+, r30
    a634:	fc 93       	st	X, r31
		game.enemies[i].shot[j].anim.anims[0] = (char*) map_enemy_shot;
    a636:	25 ee       	ldi	r18, 0xE5	; 229
    a638:	35 e3       	ldi	r19, 0x35	; 53
    a63a:	31 83       	std	Z+1, r19	; 0x01
    a63c:	20 83       	st	Z, r18
		game.enemies[i].shot[j].shared.vx = 0;
    a63e:	fc 01       	movw	r30, r24
    a640:	e4 5e       	subi	r30, 0xE4	; 228
    a642:	fe 4f       	sbci	r31, 0xFE	; 254
    a644:	10 82       	st	Z, r1
		game.enemies[i].shot[j].shared.vy = 0;
    a646:	31 97       	sbiw	r30, 0x01	; 1
    a648:	10 82       	st	Z, r1
		game.enemies[i].shot[j].shared.x = x;
    a64a:	34 97       	sbiw	r30, 0x04	; 4
    a64c:	71 83       	std	Z+1, r23	; 0x01
    a64e:	60 83       	st	Z, r22
		game.enemies[i].shot[j].shared.y = y;
    a650:	32 96       	adiw	r30, 0x02	; 2
    a652:	51 83       	std	Z+1, r21	; 0x01
    a654:	40 83       	st	Z, r20
    a656:	08 95       	ret

0000a658 <init_enemy_spider>:
	}
}

void init_enemy_spider(u8 i, u16 x, u16 y)
{
	game.enemies[i].active = 1;
    a658:	93 e3       	ldi	r25, 0x33	; 51
    a65a:	89 9f       	mul	r24, r25
    a65c:	90 01       	movw	r18, r0
    a65e:	11 24       	eor	r1, r1
    a660:	21 55       	subi	r18, 0x51	; 81
    a662:	32 4f       	sbci	r19, 0xF2	; 242
    a664:	f9 01       	movw	r30, r18
    a666:	e3 5f       	subi	r30, 0xF3	; 243
    a668:	fe 4f       	sbci	r31, 0xFE	; 254
    a66a:	91 e0       	ldi	r25, 0x01	; 1
    a66c:	90 83       	st	Z, r25
	game.enemies[i].direction = D_LEFT;
    a66e:	32 96       	adiw	r30, 0x02	; 2
    a670:	10 82       	st	Z, r1
	game.enemies[i].flags = IDLE;
    a672:	31 97       	sbiw	r30, 0x01	; 1
    a674:	a8 e0       	ldi	r26, 0x08	; 8
    a676:	a0 83       	st	Z, r26
	game.enemies[i].width = 1;
    a678:	32 96       	adiw	r30, 0x02	; 2
    a67a:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    a67c:	31 96       	adiw	r30, 0x01	; 1
    a67e:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_SPIDER;
    a680:	31 96       	adiw	r30, 0x01	; 1
    a682:	10 82       	st	Z, r1
	game.enemies[i].frame_count = 0;
    a684:	31 96       	adiw	r30, 0x01	; 1
    a686:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    a688:	31 96       	adiw	r30, 0x01	; 1
    a68a:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_SPIDER_SHIELD;
    a68c:	32 96       	adiw	r30, 0x02	; 2
    a68e:	92 e0       	ldi	r25, 0x02	; 2
    a690:	90 83       	st	Z, r25
	
	game.enemies[i].anim.anim_count = 2;
    a692:	74 96       	adiw	r30, 0x14	; 20
    a694:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = SPIDER_FRAMES_PER_IDLE;
    a696:	31 96       	adiw	r30, 0x01	; 1
    a698:	9a e0       	ldi	r25, 0x0A	; 10
    a69a:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = spider_anim;
    a69c:	d9 01       	movw	r26, r18
    a69e:	a1 5d       	subi	r26, 0xD1	; 209
    a6a0:	be 4f       	sbci	r27, 0xFE	; 254
    a6a2:	e8 eb       	ldi	r30, 0xB8	; 184
    a6a4:	ff e0       	ldi	r31, 0x0F	; 15
    a6a6:	ed 93       	st	X+, r30
    a6a8:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_spider_0;
    a6aa:	af ed       	ldi	r26, 0xDF	; 223
    a6ac:	b5 e3       	ldi	r27, 0x35	; 53
    a6ae:	b1 83       	std	Z+1, r27	; 0x01
    a6b0:	a0 83       	st	Z, r26
	game.enemies[i].anim.anims[1] = (char*) map_enemy_spider_1;
    a6b2:	ac ed       	ldi	r26, 0xDC	; 220
    a6b4:	b5 e3       	ldi	r27, 0x35	; 53
    a6b6:	b3 83       	std	Z+3, r27	; 0x03
    a6b8:	a2 83       	std	Z+2, r26	; 0x02
	game.enemies[i].shared.gravity = 0;
    a6ba:	f9 01       	movw	r30, r18
    a6bc:	e4 5f       	subi	r30, 0xF4	; 244
    a6be:	fe 4f       	sbci	r31, 0xFE	; 254
    a6c0:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = 0;
    a6c2:	31 97       	sbiw	r30, 0x01	; 1
    a6c4:	10 82       	st	Z, r1
	game.enemies[i].shared.vy = 0;
    a6c6:	31 97       	sbiw	r30, 0x01	; 1
    a6c8:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    a6ca:	34 97       	sbiw	r30, 0x04	; 4
    a6cc:	71 83       	std	Z+1, r23	; 0x01
    a6ce:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    a6d0:	32 96       	adiw	r30, 0x02	; 2
    a6d2:	51 83       	std	Z+1, r21	; 0x01
    a6d4:	40 83       	st	Z, r20
	
	init_enemy_shot(i, x, y);
    a6d6:	0c 94 e7 52 	jmp	0xa5ce	; 0xa5ce <init_enemy_shot>

0000a6da <init_enemy_shark>:
}

void init_enemy_shark(u8 i, u16 x, u16 y)
{
	game.enemies[i].active = 1;
    a6da:	93 e3       	ldi	r25, 0x33	; 51
    a6dc:	89 9f       	mul	r24, r25
    a6de:	90 01       	movw	r18, r0
    a6e0:	11 24       	eor	r1, r1
    a6e2:	21 55       	subi	r18, 0x51	; 81
    a6e4:	32 4f       	sbci	r19, 0xF2	; 242
    a6e6:	f9 01       	movw	r30, r18
    a6e8:	e3 5f       	subi	r30, 0xF3	; 243
    a6ea:	fe 4f       	sbci	r31, 0xFE	; 254
    a6ec:	91 e0       	ldi	r25, 0x01	; 1
    a6ee:	90 83       	st	Z, r25
	game.enemies[i].width = 1;
    a6f0:	33 96       	adiw	r30, 0x03	; 3
    a6f2:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    a6f4:	31 96       	adiw	r30, 0x01	; 1
    a6f6:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_SHARK;
    a6f8:	31 96       	adiw	r30, 0x01	; 1
    a6fa:	90 83       	st	Z, r25
	game.enemies[i].frame_count = 0;
    a6fc:	31 96       	adiw	r30, 0x01	; 1
    a6fe:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    a700:	31 96       	adiw	r30, 0x01	; 1
    a702:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_SHARK_SHIELD;
    a704:	32 96       	adiw	r30, 0x02	; 2
    a706:	a4 e0       	ldi	r26, 0x04	; 4
    a708:	a0 83       	st	Z, r26
	
	game.enemies[i].anim.anim_count = 1;
    a70a:	74 96       	adiw	r30, 0x14	; 20
    a70c:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = 1;
    a70e:	31 96       	adiw	r30, 0x01	; 1
    a710:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = shark_anim;
    a712:	d9 01       	movw	r26, r18
    a714:	a1 5d       	subi	r26, 0xD1	; 209
    a716:	be 4f       	sbci	r27, 0xFE	; 254
    a718:	ec eb       	ldi	r30, 0xBC	; 188
    a71a:	ff e0       	ldi	r31, 0x0F	; 15
    a71c:	ed 93       	st	X+, r30
    a71e:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_shark;
    a720:	a2 ee       	ldi	r26, 0xE2	; 226
    a722:	b5 e3       	ldi	r27, 0x35	; 53
    a724:	b1 83       	std	Z+1, r27	; 0x01
    a726:	a0 83       	st	Z, r26
	game.enemies[i].shared.gravity = 0;
    a728:	f9 01       	movw	r30, r18
    a72a:	e4 5f       	subi	r30, 0xF4	; 244
    a72c:	fe 4f       	sbci	r31, 0xFE	; 254
    a72e:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = SHARK_SPEED;
    a730:	31 97       	sbiw	r30, 0x01	; 1
    a732:	9e e1       	ldi	r25, 0x1E	; 30
    a734:	90 83       	st	Z, r25
	game.enemies[i].shared.vy = 0;
    a736:	31 97       	sbiw	r30, 0x01	; 1
    a738:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    a73a:	34 97       	sbiw	r30, 0x04	; 4
    a73c:	71 83       	std	Z+1, r23	; 0x01
    a73e:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    a740:	32 96       	adiw	r30, 0x02	; 2
    a742:	51 83       	std	Z+1, r21	; 0x01
    a744:	40 83       	st	Z, r20
	
	init_enemy_shot(i, x, y);
    a746:	0c 94 e7 52 	jmp	0xa5ce	; 0xa5ce <init_enemy_shot>

0000a74a <init_enemy_level_hazard>:
}

void init_enemy_level_hazard(u8 i, u16 x, u16 y)
{
	game.enemies[i].active = 1;
    a74a:	a8 2f       	mov	r26, r24
    a74c:	b0 e0       	ldi	r27, 0x00	; 0
    a74e:	23 e3       	ldi	r18, 0x33	; 51
    a750:	82 9f       	mul	r24, r18
    a752:	c0 01       	movw	r24, r0
    a754:	11 24       	eor	r1, r1
    a756:	81 55       	subi	r24, 0x51	; 81
    a758:	92 4f       	sbci	r25, 0xF2	; 242
    a75a:	fc 01       	movw	r30, r24
    a75c:	e3 5f       	subi	r30, 0xF3	; 243
    a75e:	fe 4f       	sbci	r31, 0xFE	; 254
    a760:	21 e0       	ldi	r18, 0x01	; 1
    a762:	20 83       	st	Z, r18
	game.enemies[i].width = 1;
    a764:	33 96       	adiw	r30, 0x03	; 3
    a766:	20 83       	st	Z, r18
	game.enemies[i].height = 1;
    a768:	31 96       	adiw	r30, 0x01	; 1
    a76a:	20 83       	st	Z, r18
	game.enemies[i].enemy_type = ENEMY_PROJECTILE_HAZARD;
    a76c:	31 96       	adiw	r30, 0x01	; 1
    a76e:	32 e0       	ldi	r19, 0x02	; 2
    a770:	30 83       	st	Z, r19
	game.enemies[i].frame_count = 0;
    a772:	31 96       	adiw	r30, 0x01	; 1
    a774:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    a776:	31 96       	adiw	r30, 0x01	; 1
    a778:	10 82       	st	Z, r1
	
	game.enemies[i].anim.anim_count = 1;
    a77a:	76 96       	adiw	r30, 0x16	; 22
    a77c:	20 83       	st	Z, r18
	game.enemies[i].anim.frames_per_anim = 1;
    a77e:	31 96       	adiw	r30, 0x01	; 1
    a780:	20 83       	st	Z, r18
	game.enemies[i].anim.anims = hazard_anim;
    a782:	34 96       	adiw	r30, 0x04	; 4
    a784:	86 e2       	ldi	r24, 0x26	; 38
    a786:	90 e1       	ldi	r25, 0x10	; 16
    a788:	91 83       	std	Z+1, r25	; 0x01
    a78a:	80 83       	st	Z, r24
	switch (game.current_level_index) {
    a78c:	80 91 c4 0d 	lds	r24, 0x0DC4
    a790:	84 30       	cpi	r24, 0x04	; 4
    a792:	79 f0       	breq	.+30     	; 0xa7b2 <init_enemy_level_hazard+0x68>
    a794:	38 f4       	brcc	.+14     	; 0xa7a4 <init_enemy_level_hazard+0x5a>
    a796:	88 23       	and	r24, r24
    a798:	91 f0       	breq	.+36     	; 0xa7be <init_enemy_level_hazard+0x74>
    a79a:	82 30       	cpi	r24, 0x02	; 2
    a79c:	81 f4       	brne	.+32     	; 0xa7be <init_enemy_level_hazard+0x74>
		case 0: game.enemies[i].anim.anims[0] = (char*) map_hazard_ice; break;
		case 2: game.enemies[i].anim.anims[0] = (char*)  map_hazard_fire; break;
    a79e:	8d ec       	ldi	r24, 0xCD	; 205
    a7a0:	95 e3       	ldi	r25, 0x35	; 53
    a7a2:	0f c0       	rjmp	.+30     	; 0xa7c2 <init_enemy_level_hazard+0x78>
	game.enemies[i].shot_frame_count = 0;
	
	game.enemies[i].anim.anim_count = 1;
	game.enemies[i].anim.frames_per_anim = 1;
	game.enemies[i].anim.anims = hazard_anim;
	switch (game.current_level_index) {
    a7a4:	86 30       	cpi	r24, 0x06	; 6
    a7a6:	41 f0       	breq	.+16     	; 0xa7b8 <init_enemy_level_hazard+0x6e>
    a7a8:	88 30       	cpi	r24, 0x08	; 8
    a7aa:	49 f4       	brne	.+18     	; 0xa7be <init_enemy_level_hazard+0x74>
		case 0: game.enemies[i].anim.anims[0] = (char*) map_hazard_ice; break;
		case 2: game.enemies[i].anim.anims[0] = (char*)  map_hazard_fire; break;
		case 4: game.enemies[i].anim.anims[0] = (char*) map_hazard_jungle; break;
		case 6: game.enemies[i].anim.anims[0] = (char*) map_hazard_city; break;
		case 8: game.enemies[i].anim.anims[0] = (char*) map_hazard_desert; break;
    a7ac:	84 ec       	ldi	r24, 0xC4	; 196
    a7ae:	95 e3       	ldi	r25, 0x35	; 53
    a7b0:	08 c0       	rjmp	.+16     	; 0xa7c2 <init_enemy_level_hazard+0x78>
	game.enemies[i].anim.frames_per_anim = 1;
	game.enemies[i].anim.anims = hazard_anim;
	switch (game.current_level_index) {
		case 0: game.enemies[i].anim.anims[0] = (char*) map_hazard_ice; break;
		case 2: game.enemies[i].anim.anims[0] = (char*)  map_hazard_fire; break;
		case 4: game.enemies[i].anim.anims[0] = (char*) map_hazard_jungle; break;
    a7b2:	8a ec       	ldi	r24, 0xCA	; 202
    a7b4:	95 e3       	ldi	r25, 0x35	; 53
    a7b6:	05 c0       	rjmp	.+10     	; 0xa7c2 <init_enemy_level_hazard+0x78>
		case 6: game.enemies[i].anim.anims[0] = (char*) map_hazard_city; break;
    a7b8:	87 ec       	ldi	r24, 0xC7	; 199
    a7ba:	95 e3       	ldi	r25, 0x35	; 53
    a7bc:	02 c0       	rjmp	.+4      	; 0xa7c2 <init_enemy_level_hazard+0x78>
		case 8: game.enemies[i].anim.anims[0] = (char*) map_hazard_desert; break;
		default: game.enemies[i].anim.anims[0] = (char*) map_hazard_ice; break;
    a7be:	80 ed       	ldi	r24, 0xD0	; 208
    a7c0:	95 e3       	ldi	r25, 0x35	; 53
    a7c2:	90 93 27 10 	sts	0x1027, r25
    a7c6:	80 93 26 10 	sts	0x1026, r24
	}
	game.enemies[i].shared.gravity = 0;
    a7ca:	23 e3       	ldi	r18, 0x33	; 51
    a7cc:	2a 9f       	mul	r18, r26
    a7ce:	c0 01       	movw	r24, r0
    a7d0:	2b 9f       	mul	r18, r27
    a7d2:	90 0d       	add	r25, r0
    a7d4:	11 24       	eor	r1, r1
    a7d6:	81 55       	subi	r24, 0x51	; 81
    a7d8:	92 4f       	sbci	r25, 0xF2	; 242
    a7da:	fc 01       	movw	r30, r24
    a7dc:	e4 5f       	subi	r30, 0xF4	; 244
    a7de:	fe 4f       	sbci	r31, 0xFE	; 254
    a7e0:	10 82       	st	Z, r1
	game.enemies[i].shared.vy = HAZARD_SPEED;
    a7e2:	32 97       	sbiw	r30, 0x02	; 2
    a7e4:	2e e1       	ldi	r18, 0x1E	; 30
    a7e6:	20 83       	st	Z, r18
	game.enemies[i].shared.vx = 0;
    a7e8:	31 96       	adiw	r30, 0x01	; 1
    a7ea:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    a7ec:	35 97       	sbiw	r30, 0x05	; 5
    a7ee:	71 83       	std	Z+1, r23	; 0x01
    a7f0:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    a7f2:	32 96       	adiw	r30, 0x02	; 2
    a7f4:	51 83       	std	Z+1, r21	; 0x01
    a7f6:	40 83       	st	Z, r20
	
	game.enemies[i].origin_tile = y / 8;
    a7f8:	3d 96       	adiw	r30, 0x0d	; 13
    a7fa:	83 e0       	ldi	r24, 0x03	; 3
    a7fc:	56 95       	lsr	r21
    a7fe:	47 95       	ror	r20
    a800:	8a 95       	dec	r24
    a802:	e1 f7       	brne	.-8      	; 0xa7fc <init_enemy_level_hazard+0xb2>
    a804:	40 83       	st	Z, r20
    a806:	08 95       	ret

0000a808 <load_eeprom>:
 *  0x01 = EEPROM_ERROR_INVALID_BLOCK
 *  0x02 = EEPROM_ERROR_FULL
 *  0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 *  0x04 = EEPROM_ERROR_NOT_FORMATTED
 */
{
    a808:	cf 93       	push	r28
    a80a:	df 93       	push	r29
    a80c:	ec 01       	movw	r28, r24
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
    a80e:	bc 01       	movw	r22, r24
    a810:	88 81       	ld	r24, Y
    a812:	99 81       	ldd	r25, Y+1	; 0x01
    a814:	0e 94 43 41 	call	0x8286	; 0x8286 <EepromReadBlock>
	if (status == 0x03)
    a818:	83 30       	cpi	r24, 0x03	; 3
    a81a:	29 f4       	brne	.+10     	; 0xa826 <load_eeprom+0x1e>
	{
		status = EepromWriteBlock(block);
    a81c:	ce 01       	movw	r24, r28
	}
}
    a81e:	df 91       	pop	r29
    a820:	cf 91       	pop	r28
{
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
	if (status == 0x03)
	{
		status = EepromWriteBlock(block);
    a822:	0c 94 f9 40 	jmp	0x81f2	; 0x81f2 <EepromWriteBlock>
	}
}
    a826:	df 91       	pop	r29
    a828:	cf 91       	pop	r28
    a82a:	08 95       	ret

0000a82c <clear_overlay>:
{
	SetTile(x, y, level_tile);
}

void clear_overlay(u8 overlayHeight)
{
    a82c:	1f 93       	push	r17
    a82e:	cf 93       	push	r28
    a830:	df 93       	push	r29
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
    a832:	d0 e0       	ldi	r29, 0x00	; 0
    a834:	10 e2       	ldi	r17, 0x20	; 32
    a836:	18 0f       	add	r17, r24
{
	SetTile(x, y, level_tile);
}

void clear_overlay(u8 overlayHeight)
{
    a838:	c0 e2       	ldi	r28, 0x20	; 32
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
	{
		for(u8 y = 0; y < overlayHeight; y++)
    a83a:	c1 17       	cp	r28, r17
    a83c:	41 f0       	breq	.+16     	; 0xa84e <clear_overlay+0x22>
		{
			SetTile(x, VRAM_TILES_V+y, 0);
    a83e:	40 e0       	ldi	r20, 0x00	; 0
    a840:	50 e0       	ldi	r21, 0x00	; 0
    a842:	6c 2f       	mov	r22, r28
    a844:	8d 2f       	mov	r24, r29
    a846:	0e 94 88 3f 	call	0x7f10	; 0x7f10 <SetTile>
    a84a:	cf 5f       	subi	r28, 0xFF	; 255
    a84c:	f6 cf       	rjmp	.-20     	; 0xa83a <clear_overlay+0xe>
	SetTile(x, y, level_tile);
}

void clear_overlay(u8 overlayHeight)
{
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
    a84e:	df 5f       	subi	r29, 0xFF	; 255
    a850:	dc 31       	cpi	r29, 0x1C	; 28
    a852:	91 f7       	brne	.-28     	; 0xa838 <clear_overlay+0xc>
		for(u8 y = 0; y < overlayHeight; y++)
		{
			SetTile(x, VRAM_TILES_V+y, 0);
		}
	}
}
    a854:	df 91       	pop	r29
    a856:	cf 91       	pop	r28
    a858:	1f 91       	pop	r17
    a85a:	08 95       	ret

0000a85c <get_level_tile>:
{
	return 21;
}

u8 get_level_tile(char* level_data, u8 x, u8 y)
{
    a85c:	dc 01       	movw	r26, r24
    a85e:	e6 2f       	mov	r30, r22
    a860:	84 2f       	mov	r24, r20
	u16 mega_tile_offset = 0;
	u8 map_x = 0;
	u8 map_y = 0;
	
	map_x = x / MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH;
	map_y = y / MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
    a862:	25 e0       	ldi	r18, 0x05	; 5
    a864:	62 2f       	mov	r22, r18
    a866:	0e 94 71 69 	call	0xd2e2	; 0xd2e2 <__udivmodqi4>
    a86a:	58 2f       	mov	r21, r24
    a86c:	39 2f       	mov	r19, r25
	mega_tile_offset = (y % MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT)*MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH + (x % MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH);
	mega_tile_index = pgm_read_byte(2+(&level_data[map_y*game.raw_level_width + map_x]));
    a86e:	40 91 c5 0d 	lds	r20, 0x0DC5
	u16 mega_tile_index = 0;
	u16 mega_tile_offset = 0;
	u8 map_x = 0;
	u8 map_y = 0;
	
	map_x = x / MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH;
    a872:	8e 2f       	mov	r24, r30
    a874:	0e 94 71 69 	call	0xd2e2	; 0xd2e2 <__udivmodqi4>
	map_y = y / MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
	mega_tile_offset = (y % MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT)*MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH + (x % MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH);
	mega_tile_index = pgm_read_byte(2+(&level_data[map_y*game.raw_level_width + map_x]));
    a878:	e8 2f       	mov	r30, r24
    a87a:	f0 e0       	ldi	r31, 0x00	; 0
    a87c:	54 9f       	mul	r21, r20
    a87e:	e0 0d       	add	r30, r0
    a880:	f1 1d       	adc	r31, r1
    a882:	11 24       	eor	r1, r1
    a884:	32 96       	adiw	r30, 0x02	; 2
    a886:	ea 0f       	add	r30, r26
    a888:	fb 1f       	adc	r31, r27
    a88a:	84 91       	lpm	r24, Z
	u8 map_x = 0;
	u8 map_y = 0;
	
	map_x = x / MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH;
	map_y = y / MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
	mega_tile_offset = (y % MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT)*MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH + (x % MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH);
    a88c:	e9 2f       	mov	r30, r25
    a88e:	f0 e0       	ldi	r31, 0x00	; 0
    a890:	95 e0       	ldi	r25, 0x05	; 5
    a892:	39 9f       	mul	r19, r25
    a894:	e0 0d       	add	r30, r0
    a896:	f1 1d       	adc	r31, r1
    a898:	11 24       	eor	r1, r1
	mega_tile_index = pgm_read_byte(2+(&level_data[map_y*game.raw_level_width + map_x]));
	mega_tile_index *= MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH*MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
	return pgm_read_byte(&map_level_mega_tiles[mega_tile_index+mega_tile_offset]);
    a89a:	99 e1       	ldi	r25, 0x19	; 25
    a89c:	89 9f       	mul	r24, r25
    a89e:	e0 0d       	add	r30, r0
    a8a0:	f1 1d       	adc	r31, r1
    a8a2:	11 24       	eor	r1, r1
    a8a4:	e3 50       	subi	r30, 0x03	; 3
    a8a6:	f0 4a       	sbci	r31, 0xA0	; 160
    a8a8:	84 91       	lpm	r24, Z
}
    a8aa:	08 95       	ret

0000a8ac <render_camera_view>:

void render_camera_view()
{
    a8ac:	7f 92       	push	r7
    a8ae:	8f 92       	push	r8
    a8b0:	9f 92       	push	r9
    a8b2:	af 92       	push	r10
    a8b4:	bf 92       	push	r11
    a8b6:	cf 92       	push	r12
    a8b8:	df 92       	push	r13
    a8ba:	ef 92       	push	r14
    a8bc:	ff 92       	push	r15
    a8be:	0f 93       	push	r16
    a8c0:	1f 93       	push	r17
    a8c2:	cf 93       	push	r28
    a8c4:	df 93       	push	r29
	u8 level_tile;
	u8 camara_x_tile = game.camera_x/8;
    a8c6:	c0 91 af 0d 	lds	r28, 0x0DAF
    a8ca:	d0 91 b0 0d 	lds	r29, 0x0DB0
    a8ce:	83 e0       	ldi	r24, 0x03	; 3
    a8d0:	d6 95       	lsr	r29
    a8d2:	c7 95       	ror	r28
    a8d4:	8a 95       	dec	r24
    a8d6:	e1 f7       	brne	.-8      	; 0xa8d0 <render_camera_view+0x24>
    a8d8:	7c 2e       	mov	r7, r28
	u8 camera_y_tile = game.camera_y/8;
    a8da:	00 91 b7 0d 	lds	r16, 0x0DB7
    a8de:	06 95       	lsr	r16
    a8e0:	06 95       	lsr	r16
    a8e2:	06 95       	lsr	r16
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    a8e4:	dd 27       	eor	r29, r29
    a8e6:	7e 01       	movw	r14, r28
    a8e8:	4c e1       	ldi	r20, 0x1C	; 28
    a8ea:	e4 0e       	add	r14, r20
    a8ec:	f1 1c       	adc	r15, r1
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    a8ee:	10 e0       	ldi	r17, 0x00	; 0
    a8f0:	68 01       	movw	r12, r16
    a8f2:	89 e1       	ldi	r24, 0x19	; 25
    a8f4:	c8 0e       	add	r12, r24
    a8f6:	d1 1c       	adc	r13, r1
		{
			level_tile = get_level_tile(game.current_level, x, y);
			render_level_tile(level_tile, (Screen.scrollX / 8 + x - camara_x_tile) % 32, (Screen.scrollY / 8 + y - camera_y_tile) % 30);
    a8f8:	9e e1       	ldi	r25, 0x1E	; 30
    a8fa:	a9 2e       	mov	r10, r25
    a8fc:	b1 2c       	mov	r11, r1
{
	u8 level_tile;
	u8 camara_x_tile = game.camera_x/8;
	u8 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    a8fe:	ec 16       	cp	r14, r28
    a900:	fd 06       	cpc	r15, r29
    a902:	70 f1       	brcs	.+92     	; 0xa960 <render_camera_view+0xb4>
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    a904:	48 01       	movw	r8, r16
    a906:	c8 14       	cp	r12, r8
    a908:	d9 04       	cpc	r13, r9
    a90a:	40 f1       	brcs	.+80     	; 0xa95c <render_camera_view+0xb0>
		{
			level_tile = get_level_tile(game.current_level, x, y);
    a90c:	48 2d       	mov	r20, r8
    a90e:	6c 2f       	mov	r22, r28
    a910:	80 91 b4 0f 	lds	r24, 0x0FB4
    a914:	90 91 b5 0f 	lds	r25, 0x0FB5
    a918:	0e 94 2e 54 	call	0xa85c	; 0xa85c <get_level_tile>
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    a91c:	28 2f       	mov	r18, r24
    a91e:	30 e0       	ldi	r19, 0x00	; 0
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
		{
			level_tile = get_level_tile(game.current_level, x, y);
			render_level_tile(level_tile, (Screen.scrollX / 8 + x - camara_x_tile) % 32, (Screen.scrollY / 8 + y - camera_y_tile) % 30);
    a920:	80 91 b3 0c 	lds	r24, 0x0CB3
    a924:	86 95       	lsr	r24
    a926:	86 95       	lsr	r24
    a928:	86 95       	lsr	r24
    a92a:	90 e0       	ldi	r25, 0x00	; 0
    a92c:	80 1b       	sub	r24, r16
    a92e:	91 0b       	sbc	r25, r17
    a930:	88 0d       	add	r24, r8
    a932:	99 1d       	adc	r25, r9
    a934:	b5 01       	movw	r22, r10
    a936:	0e 94 8b 69 	call	0xd316	; 0xd316 <__udivmodhi4>
    a93a:	90 91 b2 0c 	lds	r25, 0x0CB2
    a93e:	96 95       	lsr	r25
    a940:	96 95       	lsr	r25
    a942:	96 95       	lsr	r25
    a944:	97 19       	sub	r25, r7
    a946:	9c 0f       	add	r25, r28
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    a948:	a9 01       	movw	r20, r18
    a94a:	68 2f       	mov	r22, r24
    a94c:	89 2f       	mov	r24, r25
    a94e:	8f 71       	andi	r24, 0x1F	; 31
    a950:	0e 94 88 3f 	call	0x7f10	; 0x7f10 <SetTile>
	u8 camara_x_tile = game.camera_x/8;
	u8 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    a954:	8f ef       	ldi	r24, 0xFF	; 255
    a956:	88 1a       	sub	r8, r24
    a958:	98 0a       	sbc	r9, r24
    a95a:	d5 cf       	rjmp	.-86     	; 0xa906 <render_camera_view+0x5a>
{
	u8 level_tile;
	u8 camara_x_tile = game.camera_x/8;
	u8 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    a95c:	21 96       	adiw	r28, 0x01	; 1
    a95e:	cf cf       	rjmp	.-98     	; 0xa8fe <render_camera_view+0x52>
		{
			level_tile = get_level_tile(game.current_level, x, y);
			render_level_tile(level_tile, (Screen.scrollX / 8 + x - camara_x_tile) % 32, (Screen.scrollY / 8 + y - camera_y_tile) % 30);
		}
	}
}
    a960:	df 91       	pop	r29
    a962:	cf 91       	pop	r28
    a964:	1f 91       	pop	r17
    a966:	0f 91       	pop	r16
    a968:	ff 90       	pop	r15
    a96a:	ef 90       	pop	r14
    a96c:	df 90       	pop	r13
    a96e:	cf 90       	pop	r12
    a970:	bf 90       	pop	r11
    a972:	af 90       	pop	r10
    a974:	9f 90       	pop	r9
    a976:	8f 90       	pop	r8
    a978:	7f 90       	pop	r7
    a97a:	08 95       	ret

0000a97c <spawn_enemy>:

void spawn_enemy(u16 x, u16 y, u8 level_hazard)
{
    a97c:	0f 93       	push	r16
    a97e:	1f 93       	push	r17
    a980:	cf 93       	push	r28
    a982:	df 93       	push	r29
    a984:	00 d0       	rcall	.+0      	; 0xa986 <spawn_enemy+0xa>
    a986:	00 d0       	rcall	.+0      	; 0xa988 <spawn_enemy+0xc>
    a988:	cd b7       	in	r28, 0x3d	; 61
    a98a:	de b7       	in	r29, 0x3e	; 62
	if (game.camera_x < ENEMY_SPAWN_CUTOFF)
    a98c:	20 91 af 0d 	lds	r18, 0x0DAF
    a990:	30 91 b0 0d 	lds	r19, 0x0DB0
    a994:	28 3c       	cpi	r18, 0xC8	; 200
    a996:	35 40       	sbci	r19, 0x05	; 5
    a998:	98 f5       	brcc	.+102    	; 0xaa00 <spawn_enemy+0x84>
    a99a:	2f ea       	ldi	r18, 0xAF	; 175
    a99c:	3d e0       	ldi	r19, 0x0D	; 13
    a99e:	10 e0       	ldi	r17, 0x00	; 0
    a9a0:	f9 01       	movw	r30, r18
    a9a2:	e3 5f       	subi	r30, 0xF3	; 243
    a9a4:	fe 4f       	sbci	r31, 0xFE	; 254
	{
		for (u8 i = 0; i < MAX_ENEMIES; i++)
		{
			if (!game.enemies[i].active)
    a9a6:	50 81       	ld	r21, Z
    a9a8:	51 11       	cpse	r21, r1
    a9aa:	25 c0       	rjmp	.+74     	; 0xa9f6 <spawn_enemy+0x7a>
    a9ac:	73 96       	adiw	r30, 0x13	; 19
			{
				for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
				{
					if (!game.enemies[i].shot[j].active)
    a9ae:	50 81       	ld	r21, Z
    a9b0:	51 11       	cpse	r21, r1
    a9b2:	21 c0       	rjmp	.+66     	; 0xa9f6 <spawn_enemy+0x7a>
    a9b4:	04 2f       	mov	r16, r20
    a9b6:	ab 01       	movw	r20, r22
    a9b8:	bc 01       	movw	r22, r24
					{
						if (is_space())
    a9ba:	4b 83       	std	Y+3, r20	; 0x03
    a9bc:	5c 83       	std	Y+4, r21	; 0x04
    a9be:	89 83       	std	Y+1, r24	; 0x01
    a9c0:	7a 83       	std	Y+2, r23	; 0x02
    a9c2:	0e 94 37 51 	call	0xa26e	; 0xa26e <is_space>
    a9c6:	4b 81       	ldd	r20, Y+3	; 0x03
    a9c8:	5c 81       	ldd	r21, Y+4	; 0x04
    a9ca:	69 81       	ldd	r22, Y+1	; 0x01
    a9cc:	7a 81       	ldd	r23, Y+2	; 0x02
    a9ce:	88 23       	and	r24, r24
    a9d0:	21 f0       	breq	.+8      	; 0xa9da <spawn_enemy+0x5e>
						{
							init_enemy_shark(i, x, y);
    a9d2:	81 2f       	mov	r24, r17
    a9d4:	0e 94 6d 53 	call	0xa6da	; 0xa6da <init_enemy_shark>
    a9d8:	08 c0       	rjmp	.+16     	; 0xa9ea <spawn_enemy+0x6e>
						}
						else if (!level_hazard)
						{
							init_enemy_spider(i, x, y);
    a9da:	81 2f       	mov	r24, r17
					{
						if (is_space())
						{
							init_enemy_shark(i, x, y);
						}
						else if (!level_hazard)
    a9dc:	01 11       	cpse	r16, r1
    a9de:	03 c0       	rjmp	.+6      	; 0xa9e6 <spawn_enemy+0x6a>
						{
							init_enemy_spider(i, x, y);
    a9e0:	0e 94 2c 53 	call	0xa658	; 0xa658 <init_enemy_spider>
    a9e4:	02 c0       	rjmp	.+4      	; 0xa9ea <spawn_enemy+0x6e>
						}
						else
						{
							init_enemy_level_hazard(i, x, y);
    a9e6:	0e 94 a5 53 	call	0xa74a	; 0xa74a <init_enemy_level_hazard>
						}
						game.active_enemies++;
    a9ea:	80 91 ca 0d 	lds	r24, 0x0DCA
    a9ee:	8f 5f       	subi	r24, 0xFF	; 255
    a9f0:	80 93 ca 0d 	sts	0x0DCA, r24
    a9f4:	05 c0       	rjmp	.+10     	; 0xaa00 <spawn_enemy+0x84>

void spawn_enemy(u16 x, u16 y, u8 level_hazard)
{
	if (game.camera_x < ENEMY_SPAWN_CUTOFF)
	{
		for (u8 i = 0; i < MAX_ENEMIES; i++)
    a9f6:	1f 5f       	subi	r17, 0xFF	; 255
    a9f8:	2d 5c       	subi	r18, 0xCD	; 205
    a9fa:	3f 4f       	sbci	r19, 0xFF	; 255
    a9fc:	15 30       	cpi	r17, 0x05	; 5
    a9fe:	81 f6       	brne	.-96     	; 0xa9a0 <spawn_enemy+0x24>
					}
				}
			}
		}
	}
}
    aa00:	0f 90       	pop	r0
    aa02:	0f 90       	pop	r0
    aa04:	0f 90       	pop	r0
    aa06:	0f 90       	pop	r0
    aa08:	df 91       	pop	r29
    aa0a:	cf 91       	pop	r28
    aa0c:	1f 91       	pop	r17
    aa0e:	0f 91       	pop	r16
    aa10:	08 95       	ret

0000aa12 <append_tile_column>:
	}
	return 0;
}

void append_tile_column()
{
    aa12:	af 92       	push	r10
    aa14:	bf 92       	push	r11
    aa16:	cf 92       	push	r12
    aa18:	df 92       	push	r13
    aa1a:	ef 92       	push	r14
    aa1c:	ff 92       	push	r15
    aa1e:	0f 93       	push	r16
    aa20:	1f 93       	push	r17
    aa22:	cf 93       	push	r28
    aa24:	df 93       	push	r29
	u8 level_tile;
	u8 rndom = LBRandom(0, CAMERA_HEIGHT-1)*8;
    aa26:	68 e1       	ldi	r22, 0x18	; 24
    aa28:	80 e0       	ldi	r24, 0x00	; 0
    aa2a:	0e 94 4e 50 	call	0xa09c	; 0xa09c <LBRandom>
    aa2e:	88 0f       	add	r24, r24
    aa30:	88 0f       	add	r24, r24
    aa32:	88 0f       	add	r24, r24
	u8 hazard_tile_index = 0;
	u8 solid_tile_index = 0;

	game.column_count++;
    aa34:	90 91 c0 0d 	lds	r25, 0x0DC0
    aa38:	9f 5f       	subi	r25, 0xFF	; 255
    aa3a:	90 93 c0 0d 	sts	0x0DC0, r25
    aa3e:	00 e0       	ldi	r16, 0x00	; 0
    aa40:	10 e0       	ldi	r17, 0x00	; 0
void append_tile_column()
{
	u8 level_tile;
	u8 rndom = LBRandom(0, CAMERA_HEIGHT-1)*8;
	u8 hazard_tile_index = 0;
	u8 solid_tile_index = 0;
    aa42:	d0 e0       	ldi	r29, 0x00	; 0

void append_tile_column()
{
	u8 level_tile;
	u8 rndom = LBRandom(0, CAMERA_HEIGHT-1)*8;
	u8 hazard_tile_index = 0;
    aa44:	c0 e0       	ldi	r28, 0x00	; 0

	game.column_count++;
    for (u8 y = 0; y <= CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
    aa46:	2e e1       	ldi	r18, 0x1E	; 30
    aa48:	c2 2e       	mov	r12, r18
    aa4a:	d1 2c       	mov	r13, r1
		if (game.column_count % game.spawn_rate == game.spawn_rate - 1 && game.active_enemies < MAX_ENEMIES && y > 0)
		{
			if (is_space())
			{
				spawn_enemy(game.camera_x+CAMERA_WIDTH*8, rndom, 0);
    aa4c:	e8 2e       	mov	r14, r24
    aa4e:	f1 2c       	mov	r15, r1
    aa50:	a0 2e       	mov	r10, r16
	u8 solid_tile_index = 0;

	game.column_count++;
    for (u8 y = 0; y <= CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
    aa52:	40 91 b7 0d 	lds	r20, 0x0DB7
    aa56:	46 95       	lsr	r20
    aa58:	46 95       	lsr	r20
    aa5a:	46 95       	lsr	r20
    aa5c:	40 0f       	add	r20, r16
    aa5e:	60 91 b8 0d 	lds	r22, 0x0DB8
    aa62:	80 91 b4 0f 	lds	r24, 0x0FB4
    aa66:	90 91 b5 0f 	lds	r25, 0x0FB5
    aa6a:	0e 94 2e 54 	call	0xa85c	; 0xa85c <get_level_tile>
    aa6e:	b8 2e       	mov	r11, r24
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    aa70:	28 2f       	mov	r18, r24
    aa72:	30 e0       	ldi	r19, 0x00	; 0

	game.column_count++;
    for (u8 y = 0; y <= CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
    aa74:	80 91 b3 0c 	lds	r24, 0x0CB3
    aa78:	86 95       	lsr	r24
    aa7a:	86 95       	lsr	r24
    aa7c:	86 95       	lsr	r24
    aa7e:	a8 01       	movw	r20, r16
    aa80:	48 0f       	add	r20, r24
    aa82:	51 1d       	adc	r21, r1
    aa84:	ca 01       	movw	r24, r20
    aa86:	b6 01       	movw	r22, r12
    aa88:	0e 94 9f 69 	call	0xd33e	; 0xd33e <__divmodhi4>
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    aa8c:	a9 01       	movw	r20, r18
    aa8e:	68 2f       	mov	r22, r24
    aa90:	80 91 bc 0d 	lds	r24, 0x0DBC
    aa94:	0e 94 88 3f 	call	0x7f10	; 0x7f10 <SetTile>
	game.column_count++;
    for (u8 y = 0; y <= CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
		if (game.column_count % game.spawn_rate == game.spawn_rate - 1 && game.active_enemies < MAX_ENEMIES && y > 0)
    aa98:	20 91 cb 0d 	lds	r18, 0x0DCB
    aa9c:	80 91 c0 0d 	lds	r24, 0x0DC0
    aaa0:	62 2f       	mov	r22, r18
    aaa2:	0e 94 71 69 	call	0xd2e2	; 0xd2e2 <__udivmodqi4>
    aaa6:	89 2f       	mov	r24, r25
    aaa8:	90 e0       	ldi	r25, 0x00	; 0
    aaaa:	30 e0       	ldi	r19, 0x00	; 0
    aaac:	21 50       	subi	r18, 0x01	; 1
    aaae:	31 09       	sbc	r19, r1
    aab0:	82 17       	cp	r24, r18
    aab2:	93 07       	cpc	r25, r19
    aab4:	19 f5       	brne	.+70     	; 0xaafc <append_tile_column+0xea>
    aab6:	80 91 ca 0d 	lds	r24, 0x0DCA
    aaba:	85 30       	cpi	r24, 0x05	; 5
    aabc:	f8 f4       	brcc	.+62     	; 0xaafc <append_tile_column+0xea>
    aabe:	01 15       	cp	r16, r1
    aac0:	11 05       	cpc	r17, r1
    aac2:	e1 f0       	breq	.+56     	; 0xaafc <append_tile_column+0xea>
		{
			if (is_space())
    aac4:	0e 94 37 51 	call	0xa26e	; 0xa26e <is_space>
    aac8:	88 23       	and	r24, r24
    aaca:	59 f0       	breq	.+22     	; 0xaae2 <append_tile_column+0xd0>
			{
				spawn_enemy(game.camera_x+CAMERA_WIDTH*8, rndom, 0);
    aacc:	80 91 af 0d 	lds	r24, 0x0DAF
    aad0:	90 91 b0 0d 	lds	r25, 0x0DB0
    aad4:	40 e0       	ldi	r20, 0x00	; 0
    aad6:	b7 01       	movw	r22, r14
    aad8:	80 52       	subi	r24, 0x20	; 32
    aada:	9f 4f       	sbci	r25, 0xFF	; 255
    aadc:	0e 94 be 54 	call	0xa97c	; 0xa97c <spawn_enemy>
    aae0:	0d c0       	rjmp	.+26     	; 0xaafc <append_tile_column+0xea>
	return 0;
}

u8 hazard_projectile_tile(u8 level_tile)
{
	if (level_tile >= 18 && level_tile <= 22)
    aae2:	8e ee       	ldi	r24, 0xEE	; 238
    aae4:	8b 0d       	add	r24, r11
    aae6:	85 30       	cpi	r24, 0x05	; 5
    aae8:	30 f0       	brcs	.+12     	; 0xaaf6 <append_tile_column+0xe4>
	}
}

u8 solid_tile(u8 level_tile)
{
	if (level_tile >= 1 && level_tile <= 17)
    aaea:	8f ef       	ldi	r24, 0xFF	; 255
    aaec:	8b 0d       	add	r24, r11
    aaee:	81 31       	cpi	r24, 0x11	; 17
    aaf0:	08 f4       	brcc	.+2      	; 0xaaf4 <append_tile_column+0xe2>
    aaf2:	55 c0       	rjmp	.+170    	; 0xab9e <append_tile_column+0x18c>
    aaf4:	03 c0       	rjmp	.+6      	; 0xaafc <append_tile_column+0xea>
		{
			if (is_space())
			{
				spawn_enemy(game.camera_x+CAMERA_WIDTH*8, rndom, 0);
			}
			else if (hazard_projectile_tile(level_tile) && hazard_tile_index == 0)
    aaf6:	c1 11       	cpse	r28, r1
    aaf8:	f8 cf       	rjmp	.-16     	; 0xaaea <append_tile_column+0xd8>
    aafa:	c0 2f       	mov	r28, r16
    aafc:	0f 5f       	subi	r16, 0xFF	; 255
    aafe:	1f 4f       	sbci	r17, 0xFF	; 255
	u8 rndom = LBRandom(0, CAMERA_HEIGHT-1)*8;
	u8 hazard_tile_index = 0;
	u8 solid_tile_index = 0;

	game.column_count++;
    for (u8 y = 0; y <= CAMERA_HEIGHT; y++)
    ab00:	0a 31       	cpi	r16, 0x1A	; 26
    ab02:	11 05       	cpc	r17, r1
    ab04:	09 f0       	breq	.+2      	; 0xab08 <append_tile_column+0xf6>
    ab06:	a4 cf       	rjmp	.-184    	; 0xaa50 <append_tile_column+0x3e>
			{
				solid_tile_index = y;
			}
		}
    }
	if (hazard_tile_index > 0 && game.current_level_index == 2)
    ab08:	cc 23       	and	r28, r28
    ab0a:	f1 f0       	breq	.+60     	; 0xab48 <append_tile_column+0x136>
    ab0c:	80 91 c4 0d 	lds	r24, 0x0DC4
    ab10:	90 91 b7 0d 	lds	r25, 0x0DB7
    ab14:	20 91 af 0d 	lds	r18, 0x0DAF
    ab18:	30 91 b0 0d 	lds	r19, 0x0DB0
    ab1c:	6c 2f       	mov	r22, r28
    ab1e:	70 e0       	ldi	r23, 0x00	; 0
	{
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, (game.camera_y / 8 + hazard_tile_index - 1)*8, 1);
    ab20:	96 95       	lsr	r25
    ab22:	96 95       	lsr	r25
    ab24:	96 95       	lsr	r25
    ab26:	69 0f       	add	r22, r25
    ab28:	71 1d       	adc	r23, r1
			{
				solid_tile_index = y;
			}
		}
    }
	if (hazard_tile_index > 0 && game.current_level_index == 2)
    ab2a:	82 30       	cpi	r24, 0x02	; 2
    ab2c:	19 f4       	brne	.+6      	; 0xab34 <append_tile_column+0x122>
	{
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, (game.camera_y / 8 + hazard_tile_index - 1)*8, 1);
    ab2e:	61 50       	subi	r22, 0x01	; 1
    ab30:	71 09       	sbc	r23, r1
    ab32:	02 c0       	rjmp	.+4      	; 0xab38 <append_tile_column+0x126>
	}
	else if (hazard_tile_index > 0)
	{
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, (game.camera_y / 8 + hazard_tile_index + 1)*8, 1);
    ab34:	6f 5f       	subi	r22, 0xFF	; 255
    ab36:	7f 4f       	sbci	r23, 0xFF	; 255
    ab38:	93 e0       	ldi	r25, 0x03	; 3
    ab3a:	66 0f       	add	r22, r22
    ab3c:	77 1f       	adc	r23, r23
    ab3e:	9a 95       	dec	r25
    ab40:	e1 f7       	brne	.-8      	; 0xab3a <append_tile_column+0x128>
    ab42:	41 e0       	ldi	r20, 0x01	; 1
    ab44:	c9 01       	movw	r24, r18
    ab46:	17 c0       	rjmp	.+46     	; 0xab76 <append_tile_column+0x164>
	}
	else if (solid_tile_index > 0) {
    ab48:	dd 23       	and	r29, r29
    ab4a:	c9 f0       	breq	.+50     	; 0xab7e <append_tile_column+0x16c>
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, (game.camera_y / 8 + solid_tile_index - 1)*8, 0);
    ab4c:	80 91 b7 0d 	lds	r24, 0x0DB7
    ab50:	86 95       	lsr	r24
    ab52:	86 95       	lsr	r24
    ab54:	86 95       	lsr	r24
    ab56:	6d 2f       	mov	r22, r29
    ab58:	70 e0       	ldi	r23, 0x00	; 0
    ab5a:	68 0f       	add	r22, r24
    ab5c:	71 1d       	adc	r23, r1
    ab5e:	61 50       	subi	r22, 0x01	; 1
    ab60:	71 09       	sbc	r23, r1
    ab62:	83 e0       	ldi	r24, 0x03	; 3
    ab64:	66 0f       	add	r22, r22
    ab66:	77 1f       	adc	r23, r23
    ab68:	8a 95       	dec	r24
    ab6a:	e1 f7       	brne	.-8      	; 0xab64 <append_tile_column+0x152>
    ab6c:	80 91 af 0d 	lds	r24, 0x0DAF
    ab70:	90 91 b0 0d 	lds	r25, 0x0DB0
    ab74:	40 e0       	ldi	r20, 0x00	; 0
    ab76:	80 52       	subi	r24, 0x20	; 32
    ab78:	9f 4f       	sbci	r25, 0xFF	; 255
    ab7a:	0e 94 be 54 	call	0xa97c	; 0xa97c <spawn_enemy>
	}
	
    game.scroll_src_x++;
    ab7e:	80 91 b8 0d 	lds	r24, 0x0DB8
    ab82:	8f 5f       	subi	r24, 0xFF	; 255
    ab84:	80 93 b8 0d 	sts	0x0DB8, r24
	game.scroll_dest_x++;
    ab88:	80 91 bc 0d 	lds	r24, 0x0DBC
    ab8c:	8f 5f       	subi	r24, 0xFF	; 255
    if(game.scroll_dest_x>=32)game.scroll_dest_x=0;
    ab8e:	80 32       	cpi	r24, 0x20	; 32
    ab90:	18 f4       	brcc	.+6      	; 0xab98 <append_tile_column+0x186>
	else if (solid_tile_index > 0) {
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, (game.camera_y / 8 + solid_tile_index - 1)*8, 0);
	}
	
    game.scroll_src_x++;
	game.scroll_dest_x++;
    ab92:	80 93 bc 0d 	sts	0x0DBC, r24
    ab96:	07 c0       	rjmp	.+14     	; 0xaba6 <append_tile_column+0x194>
    if(game.scroll_dest_x>=32)game.scroll_dest_x=0;
    ab98:	10 92 bc 0d 	sts	0x0DBC, r1
    ab9c:	04 c0       	rjmp	.+8      	; 0xaba6 <append_tile_column+0x194>
			}
			else if (hazard_projectile_tile(level_tile) && hazard_tile_index == 0)
			{
				hazard_tile_index = y;
			}
			else if (solid_tile(level_tile) && solid_tile_index == 0)
    ab9e:	d1 11       	cpse	r29, r1
    aba0:	ad cf       	rjmp	.-166    	; 0xaafc <append_tile_column+0xea>
    aba2:	da 2d       	mov	r29, r10
    aba4:	ab cf       	rjmp	.-170    	; 0xaafc <append_tile_column+0xea>
	}
	
    game.scroll_src_x++;
	game.scroll_dest_x++;
    if(game.scroll_dest_x>=32)game.scroll_dest_x=0;
}
    aba6:	df 91       	pop	r29
    aba8:	cf 91       	pop	r28
    abaa:	1f 91       	pop	r17
    abac:	0f 91       	pop	r16
    abae:	ff 90       	pop	r15
    abb0:	ef 90       	pop	r14
    abb2:	df 90       	pop	r13
    abb4:	cf 90       	pop	r12
    abb6:	bf 90       	pop	r11
    abb8:	af 90       	pop	r10
    abba:	08 95       	ret

0000abbc <move_camera_x>:

void move_camera_x()
{	
	game.camera_x++;
    abbc:	80 91 af 0d 	lds	r24, 0x0DAF
    abc0:	90 91 b0 0d 	lds	r25, 0x0DB0
    abc4:	01 96       	adiw	r24, 0x01	; 1
    abc6:	90 93 b0 0d 	sts	0x0DB0, r25
    abca:	80 93 af 0d 	sts	0x0DAF, r24
	Scroll(1,0);
    abce:	60 e0       	ldi	r22, 0x00	; 0
    abd0:	81 e0       	ldi	r24, 0x01	; 1
    abd2:	0e 94 a8 4d 	call	0x9b50	; 0x9b50 <Scroll>
	if (++game.scroll_x == 8)
    abd6:	80 91 ba 0d 	lds	r24, 0x0DBA
    abda:	8f 5f       	subi	r24, 0xFF	; 255
    abdc:	88 30       	cpi	r24, 0x08	; 8
    abde:	19 f0       	breq	.+6      	; 0xabe6 <move_camera_x+0x2a>
    abe0:	80 93 ba 0d 	sts	0x0DBA, r24
    abe4:	08 95       	ret
	{
		game.scroll_x = 0;
    abe6:	10 92 ba 0d 	sts	0x0DBA, r1
		append_tile_column();
    abea:	0c 94 09 55 	jmp	0xaa12	; 0xaa12 <append_tile_column>

0000abee <map_ship>:
	}
}

void map_ship()
{
	game.player.run.anim_count = 2;
    abee:	82 e0       	ldi	r24, 0x02	; 2
    abf0:	80 93 1b 0e 	sts	0x0E1B, r24
	game.player.run.frames_per_anim = EXPLOSION_FRAME_COUNT;
    abf4:	85 e0       	ldi	r24, 0x05	; 5
    abf6:	80 93 1c 0e 	sts	0x0E1C, r24
	game.player.run.anims = run_anim;
    abfa:	ee e0       	ldi	r30, 0x0E	; 14
    abfc:	f0 e1       	ldi	r31, 0x10	; 16
    abfe:	f0 93 21 0e 	sts	0x0E21, r31
    ac02:	e0 93 20 0e 	sts	0x0E20, r30
	game.player.run.anims[0] = (char*) map_hero_ship_large_0;
    ac06:	81 e3       	ldi	r24, 0x31	; 49
    ac08:	96 e3       	ldi	r25, 0x36	; 54
    ac0a:	91 83       	std	Z+1, r25	; 0x01
    ac0c:	80 83       	st	Z, r24
	game.player.run.anims[1] = (char*) map_hero_ship_large_1;
    ac0e:	87 e2       	ldi	r24, 0x27	; 39
    ac10:	96 e3       	ldi	r25, 0x36	; 54
    ac12:	93 83       	std	Z+3, r25	; 0x03
    ac14:	82 83       	std	Z+2, r24	; 0x02
    ac16:	08 95       	ret

0000ac18 <map_level_info>:
}

void map_level_info(char* level)
{
	game.current_level = level;
    ac18:	af ea       	ldi	r26, 0xAF	; 175
    ac1a:	bd e0       	ldi	r27, 0x0D	; 13
    ac1c:	90 93 b5 0f 	sts	0x0FB5, r25
    ac20:	80 93 b4 0f 	sts	0x0FB4, r24
	
	game.raw_level_width = pgm_read_byte(&level[0]);
    ac24:	fc 01       	movw	r30, r24
    ac26:	24 91       	lpm	r18, Z
    ac28:	56 96       	adiw	r26, 0x16	; 22
    ac2a:	2c 93       	st	X, r18
    ac2c:	56 97       	sbiw	r26, 0x16	; 22
	game.raw_level_height = pgm_read_byte(&level[1]);
    ac2e:	9c 01       	movw	r18, r24
    ac30:	2f 5f       	subi	r18, 0xFF	; 255
    ac32:	3f 4f       	sbci	r19, 0xFF	; 255
    ac34:	f9 01       	movw	r30, r18
    ac36:	44 91       	lpm	r20, Z
    ac38:	57 96       	adiw	r26, 0x17	; 23
    ac3a:	4c 93       	st	X, r20
    ac3c:	57 97       	sbiw	r26, 0x17	; 23
	game.level_width = pgm_read_byte(&level[0])*MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH;
    ac3e:	fc 01       	movw	r30, r24
    ac40:	84 91       	lpm	r24, Z
    ac42:	98 2f       	mov	r25, r24
    ac44:	99 0f       	add	r25, r25
    ac46:	99 0f       	add	r25, r25
    ac48:	89 0f       	add	r24, r25
    ac4a:	1f 96       	adiw	r26, 0x0f	; 15
    ac4c:	8c 93       	st	X, r24
    ac4e:	1f 97       	sbiw	r26, 0x0f	; 15
	game.level_height = pgm_read_byte(&level[1])*MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
    ac50:	f9 01       	movw	r30, r18
    ac52:	24 91       	lpm	r18, Z
    ac54:	82 2f       	mov	r24, r18
    ac56:	88 0f       	add	r24, r24
    ac58:	88 0f       	add	r24, r24
    ac5a:	28 0f       	add	r18, r24
    ac5c:	50 96       	adiw	r26, 0x10	; 16
    ac5e:	2c 93       	st	X, r18
    ac60:	08 95       	ret

0000ac62 <on_solid_ground>:
		}
	}
}

char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
    ac62:	df 92       	push	r13
    ac64:	ef 92       	push	r14
    ac66:	ff 92       	push	r15
    ac68:	0f 93       	push	r16
    ac6a:	1f 93       	push	r17
    ac6c:	cf 93       	push	r28
    ac6e:	df 93       	push	r29
    ac70:	7c 01       	movw	r14, r24
    ac72:	d6 2f       	mov	r29, r22
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
    ac74:	88 e0       	ldi	r24, 0x08	; 8
    ac76:	48 9f       	mul	r20, r24
    ac78:	80 01       	movw	r16, r0
    ac7a:	11 24       	eor	r1, r1
char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
    ac7c:	c0 e0       	ldi	r28, 0x00	; 0
    ac7e:	cd 17       	cp	r28, r29
    ac80:	d1 f1       	breq	.+116    	; 0xacf6 <on_solid_ground+0x94>
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
    ac82:	f7 01       	movw	r30, r14
    ac84:	42 81       	ldd	r20, Z+2	; 0x02
    ac86:	53 81       	ldd	r21, Z+3	; 0x03
    ac88:	40 0f       	add	r20, r16
    ac8a:	51 1f       	adc	r21, r17
    ac8c:	83 e0       	ldi	r24, 0x03	; 3
    ac8e:	56 95       	lsr	r21
    ac90:	47 95       	ror	r20
    ac92:	8a 95       	dec	r24
    ac94:	e1 f7       	brne	.-8      	; 0xac8e <on_solid_ground+0x2c>
    ac96:	80 81       	ld	r24, Z
    ac98:	91 81       	ldd	r25, Z+1	; 0x01
    ac9a:	23 e0       	ldi	r18, 0x03	; 3
    ac9c:	96 95       	lsr	r25
    ac9e:	87 95       	ror	r24
    aca0:	2a 95       	dec	r18
    aca2:	e1 f7       	brne	.-8      	; 0xac9c <on_solid_ground+0x3a>
    aca4:	6c 2f       	mov	r22, r28
    aca6:	68 0f       	add	r22, r24
    aca8:	80 91 b4 0f 	lds	r24, 0x0FB4
    acac:	90 91 b5 0f 	lds	r25, 0x0FB5
    acb0:	0e 94 2e 54 	call	0xa85c	; 0xa85c <get_level_tile>
    acb4:	d8 2e       	mov	r13, r24
		lt2 = get_level_tile(game.current_level, (s->x+7) / 8 + x, (s->y + tile_height*8) / 8);
    acb6:	f7 01       	movw	r30, r14
    acb8:	42 81       	ldd	r20, Z+2	; 0x02
    acba:	53 81       	ldd	r21, Z+3	; 0x03
    acbc:	40 0f       	add	r20, r16
    acbe:	51 1f       	adc	r21, r17
    acc0:	33 e0       	ldi	r19, 0x03	; 3
    acc2:	56 95       	lsr	r21
    acc4:	47 95       	ror	r20
    acc6:	3a 95       	dec	r19
    acc8:	e1 f7       	brne	.-8      	; 0xacc2 <on_solid_ground+0x60>
    acca:	20 81       	ld	r18, Z
    accc:	31 81       	ldd	r19, Z+1	; 0x01
    acce:	29 5f       	subi	r18, 0xF9	; 249
    acd0:	3f 4f       	sbci	r19, 0xFF	; 255
    acd2:	53 e0       	ldi	r21, 0x03	; 3
    acd4:	36 95       	lsr	r19
    acd6:	27 95       	ror	r18
    acd8:	5a 95       	dec	r21
    acda:	e1 f7       	brne	.-8      	; 0xacd4 <on_solid_ground+0x72>
    acdc:	6c 2f       	mov	r22, r28
    acde:	62 0f       	add	r22, r18
    ace0:	80 91 b4 0f 	lds	r24, 0x0FB4
    ace4:	90 91 b5 0f 	lds	r25, 0x0FB5
    ace8:	0e 94 2e 54 	call	0xa85c	; 0xa85c <get_level_tile>
	}
}

u8 solid_tile(u8 level_tile)
{
	if (level_tile >= 1 && level_tile <= 17)
    acec:	9f ef       	ldi	r25, 0xFF	; 255
    acee:	9d 0d       	add	r25, r13
    acf0:	91 31       	cpi	r25, 0x11	; 17
    acf2:	28 f4       	brcc	.+10     	; 0xacfe <on_solid_ground+0x9c>
    acf4:	02 c0       	rjmp	.+4      	; 0xacfa <on_solid_ground+0x98>
		if (solid_tile(lt1) || solid_tile(lt2))
		{
			return 1;
		}
	}
	return 0;
    acf6:	80 e0       	ldi	r24, 0x00	; 0
    acf8:	07 c0       	rjmp	.+14     	; 0xad08 <on_solid_ground+0xa6>
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
		lt2 = get_level_tile(game.current_level, (s->x+7) / 8 + x, (s->y + tile_height*8) / 8);
		if (solid_tile(lt1) || solid_tile(lt2))
		{
			return 1;
    acfa:	81 e0       	ldi	r24, 0x01	; 1
    acfc:	05 c0       	rjmp	.+10     	; 0xad08 <on_solid_ground+0xa6>
	}
}

u8 solid_tile(u8 level_tile)
{
	if (level_tile >= 1 && level_tile <= 17)
    acfe:	81 50       	subi	r24, 0x01	; 1
    ad00:	81 31       	cpi	r24, 0x11	; 17
    ad02:	d8 f3       	brcs	.-10     	; 0xacfa <on_solid_ground+0x98>
char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
    ad04:	cf 5f       	subi	r28, 0xFF	; 255
    ad06:	bb cf       	rjmp	.-138    	; 0xac7e <on_solid_ground+0x1c>
		{
			return 1;
		}
	}
	return 0;
}
    ad08:	df 91       	pop	r29
    ad0a:	cf 91       	pop	r28
    ad0c:	1f 91       	pop	r17
    ad0e:	0f 91       	pop	r16
    ad10:	ff 90       	pop	r15
    ad12:	ef 90       	pop	r14
    ad14:	df 90       	pop	r13
    ad16:	08 95       	ret

0000ad18 <find_shot_slot>:

u8 find_shot_slot(Player* player)
{
    ad18:	fc 01       	movw	r30, r24
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
	{
		if (!player->shot[i].active) return i;
    ad1a:	80 8d       	ldd	r24, Z+24	; 0x18
    ad1c:	88 23       	and	r24, r24
    ad1e:	51 f0       	breq	.+20     	; 0xad34 <find_shot_slot+0x1c>
    ad20:	82 a5       	ldd	r24, Z+42	; 0x2a
    ad22:	88 23       	and	r24, r24
    ad24:	29 f0       	breq	.+10     	; 0xad30 <find_shot_slot+0x18>
    ad26:	84 ad       	ldd	r24, Z+60	; 0x3c
    ad28:	81 11       	cpse	r24, r1
    ad2a:	04 c0       	rjmp	.+8      	; 0xad34 <find_shot_slot+0x1c>
	return 0;
}

u8 find_shot_slot(Player* player)
{
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
    ad2c:	82 e0       	ldi	r24, 0x02	; 2
    ad2e:	08 95       	ret
    ad30:	81 e0       	ldi	r24, 0x01	; 1
	{
		if (!player->shot[i].active) return i;
    ad32:	08 95       	ret
	}
	return 0;
    ad34:	80 e0       	ldi	r24, 0x00	; 0
}
    ad36:	08 95       	ret

0000ad38 <update_shot>:

void update_shot(Player* player, u8 shot_slot)
{
    ad38:	af 92       	push	r10
    ad3a:	bf 92       	push	r11
    ad3c:	cf 92       	push	r12
    ad3e:	df 92       	push	r13
    ad40:	ef 92       	push	r14
    ad42:	ff 92       	push	r15
    ad44:	0f 93       	push	r16
    ad46:	1f 93       	push	r17
    ad48:	cf 93       	push	r28
    ad4a:	df 93       	push	r29
	// Shot updates
	u8 idx;
	if (player->controls.pressed & BTN_A && player->active_shots < MAX_PLAYER_SHOTS)
    ad4c:	fc 01       	movw	r30, r24
    ad4e:	e3 59       	subi	r30, 0x93	; 147
    ad50:	ff 4f       	sbci	r31, 0xFF	; 255
    ad52:	20 81       	ld	r18, Z
    ad54:	31 81       	ldd	r19, Z+1	; 0x01
    ad56:	30 ff       	sbrs	r19, 0
    ad58:	6a c0       	rjmp	.+212    	; 0xae2e <update_shot+0xf6>
    ad5a:	fc 01       	movw	r30, r24
    ad5c:	27 81       	ldd	r18, Z+7	; 0x07
    ad5e:	23 30       	cpi	r18, 0x03	; 3
    ad60:	08 f0       	brcs	.+2      	; 0xad64 <update_shot+0x2c>
    ad62:	65 c0       	rjmp	.+202    	; 0xae2e <update_shot+0xf6>
    ad64:	16 2f       	mov	r17, r22
    ad66:	ec 01       	movw	r28, r24
	{
		SFX_PLAYER_SHOOT;
    ad68:	2f ef       	ldi	r18, 0xFF	; 255
    ad6a:	43 e2       	ldi	r20, 0x23	; 35
    ad6c:	63 e0       	ldi	r22, 0x03	; 3
    ad6e:	82 e0       	ldi	r24, 0x02	; 2
    ad70:	0e 94 a5 43 	call	0x874a	; 0x874a <TriggerNote>
		idx = find_shot_slot(player);
    ad74:	ce 01       	movw	r24, r28
    ad76:	0e 94 8c 56 	call	0xad18	; 0xad18 <find_shot_slot>
    ad7a:	f8 2e       	mov	r15, r24
		LBMapSprite(shot_slot+idx, LBGetNextFrame(&player->shot[idx].anim), 0);
    ad7c:	c8 2e       	mov	r12, r24
    ad7e:	d1 2c       	mov	r13, r1
    ad80:	f2 e1       	ldi	r31, 0x12	; 18
    ad82:	8f 9f       	mul	r24, r31
    ad84:	50 01       	movw	r10, r0
    ad86:	11 24       	eor	r1, r1
    ad88:	c5 01       	movw	r24, r10
    ad8a:	49 96       	adiw	r24, 0x19	; 25
    ad8c:	8c 0f       	add	r24, r28
    ad8e:	9d 1f       	adc	r25, r29
    ad90:	0e 94 0d 4f 	call	0x9e1a	; 0x9e1a <LBGetNextFrame>
    ad94:	40 e0       	ldi	r20, 0x00	; 0
    ad96:	bc 01       	movw	r22, r24
    ad98:	8f 2d       	mov	r24, r15
    ad9a:	81 0f       	add	r24, r17
    ad9c:	0e 94 73 50 	call	0xa0e6	; 0xa0e6 <LBMapSprite>
		player->shot[idx].active = 1;
    ada0:	8e 01       	movw	r16, r28
    ada2:	0a 0d       	add	r16, r10
    ada4:	1b 1d       	adc	r17, r11
    ada6:	81 e0       	ldi	r24, 0x01	; 1
    ada8:	f8 01       	movw	r30, r16
    adaa:	80 8f       	std	Z+24, r24	; 0x18
		player->shot[idx].shared.y = (u16) player->shared.y / 8 * 8;
    adac:	ea 80       	ldd	r14, Y+2	; 0x02
    adae:	fb 80       	ldd	r15, Y+3	; 0x03
    adb0:	f8 ef       	ldi	r31, 0xF8	; 248
    adb2:	ef 22       	and	r14, r31
    adb4:	f8 01       	movw	r30, r16
    adb6:	f2 8a       	std	Z+18, r15	; 0x12
    adb8:	e1 8a       	std	Z+17, r14	; 0x11
		if (is_space())
    adba:	0e 94 37 51 	call	0xa26e	; 0xa26e <is_space>
    adbe:	28 81       	ld	r18, Y
    adc0:	39 81       	ldd	r19, Y+1	; 0x01
    adc2:	88 23       	and	r24, r24
    adc4:	41 f0       	breq	.+16     	; 0xadd6 <update_shot+0x9e>
		{
			player->shot[idx].shared.x = player->shared.x+player->width*8;
    adc6:	8b 85       	ldd	r24, Y+11	; 0x0b
    adc8:	f8 e0       	ldi	r31, 0x08	; 8
    adca:	8f 9f       	mul	r24, r31
    adcc:	20 0d       	add	r18, r0
    adce:	31 1d       	adc	r19, r1
    add0:	11 24       	eor	r1, r1
    add2:	f8 01       	movw	r30, r16
    add4:	16 c0       	rjmp	.+44     	; 0xae02 <update_shot+0xca>
			player->shot[idx].shared.vx = SHOT_SPEED;
		}
		else
		{
			if (!(player->flags & PRONE))
    add6:	88 85       	ldd	r24, Y+8	; 0x08
    add8:	82 fd       	sbrc	r24, 2
    adda:	06 c0       	rjmp	.+12     	; 0xade8 <update_shot+0xb0>
			{
				player->shot[idx].shared.y += 8;
    addc:	f8 e0       	ldi	r31, 0x08	; 8
    adde:	ef 0e       	add	r14, r31
    ade0:	f1 1c       	adc	r15, r1
    ade2:	f8 01       	movw	r30, r16
    ade4:	f2 8a       	std	Z+18, r15	; 0x12
    ade6:	e1 8a       	std	Z+17, r14	; 0x11
			}
			if (player->direction == D_RIGHT)
    ade8:	8a 85       	ldd	r24, Y+10	; 0x0a
    adea:	81 30       	cpi	r24, 0x01	; 1
    adec:	79 f4       	brne	.+30     	; 0xae0c <update_shot+0xd4>
			{
				player->shot[idx].shared.x = player->shared.x+2*8;
    adee:	82 e1       	ldi	r24, 0x12	; 18
    adf0:	8c 9d       	mul	r24, r12
    adf2:	f0 01       	movw	r30, r0
    adf4:	8d 9d       	mul	r24, r13
    adf6:	f0 0d       	add	r31, r0
    adf8:	11 24       	eor	r1, r1
    adfa:	ec 0f       	add	r30, r28
    adfc:	fd 1f       	adc	r31, r29
    adfe:	20 5f       	subi	r18, 0xF0	; 240
    ae00:	3f 4f       	sbci	r19, 0xFF	; 255
    ae02:	30 8b       	std	Z+16, r19	; 0x10
    ae04:	27 87       	std	Z+15, r18	; 0x0f
				player->shot[idx].shared.vx = SHOT_SPEED;
    ae06:	8f e7       	ldi	r24, 0x7F	; 127
    ae08:	84 8b       	std	Z+20, r24	; 0x14
    ae0a:	0e c0       	rjmp	.+28     	; 0xae28 <update_shot+0xf0>
			}
			else
			{
				player->shot[idx].shared.vx = -SHOT_SPEED;
    ae0c:	82 e1       	ldi	r24, 0x12	; 18
    ae0e:	8c 9d       	mul	r24, r12
    ae10:	f0 01       	movw	r30, r0
    ae12:	8d 9d       	mul	r24, r13
    ae14:	f0 0d       	add	r31, r0
    ae16:	11 24       	eor	r1, r1
    ae18:	ec 0f       	add	r30, r28
    ae1a:	fd 1f       	adc	r31, r29
    ae1c:	81 e8       	ldi	r24, 0x81	; 129
    ae1e:	84 8b       	std	Z+20, r24	; 0x14
				player->shot[idx].shared.x = player->shared.x-1*8;
    ae20:	28 50       	subi	r18, 0x08	; 8
    ae22:	31 09       	sbc	r19, r1
    ae24:	30 8b       	std	Z+16, r19	; 0x10
    ae26:	27 87       	std	Z+15, r18	; 0x0f
			}
		}
		player->active_shots++;
    ae28:	8f 81       	ldd	r24, Y+7	; 0x07
    ae2a:	8f 5f       	subi	r24, 0xFF	; 255
    ae2c:	8f 83       	std	Y+7, r24	; 0x07
	}
}
    ae2e:	df 91       	pop	r29
    ae30:	cf 91       	pop	r28
    ae32:	1f 91       	pop	r17
    ae34:	0f 91       	pop	r16
    ae36:	ff 90       	pop	r15
    ae38:	ef 90       	pop	r14
    ae3a:	df 90       	pop	r13
    ae3c:	cf 90       	pop	r12
    ae3e:	bf 90       	pop	r11
    ae40:	af 90       	pop	r10
    ae42:	08 95       	ret

0000ae44 <pixel_overlap>:
	}
	return 1;
}

u8 pixel_overlap(u8 s1, u8 s2, u8 w1, u8 w2)
{
    ae44:	94 2f       	mov	r25, r20
	u8 result = w1;
	
	if (s2 > s1)
    ae46:	86 17       	cp	r24, r22
    ae48:	10 f4       	brcc	.+4      	; 0xae4e <pixel_overlap+0xa>
    ae4a:	96 1b       	sub	r25, r22
	{
		result -= s2 - s1;
    ae4c:	98 0f       	add	r25, r24
	}
	s1 = s1 + w1;
    ae4e:	84 0f       	add	r24, r20
	s2 = s2 + w2;
    ae50:	26 0f       	add	r18, r22
	if (s2 < s1)
    ae52:	28 17       	cp	r18, r24
    ae54:	10 f4       	brcc	.+4      	; 0xae5a <pixel_overlap+0x16>
	{
		result -= s1 - s2;
    ae56:	28 1b       	sub	r18, r24
    ae58:	92 0f       	add	r25, r18
	}
	return result;
}
    ae5a:	89 2f       	mov	r24, r25
    ae5c:	08 95       	ret

0000ae5e <collision_detect_level>:

u8 collision_detect_level(SpriteShared* s, u8 tile_width, u8 tile_height)
{
    ae5e:	2f 92       	push	r2
    ae60:	3f 92       	push	r3
    ae62:	4f 92       	push	r4
    ae64:	5f 92       	push	r5
    ae66:	6f 92       	push	r6
    ae68:	7f 92       	push	r7
    ae6a:	8f 92       	push	r8
    ae6c:	9f 92       	push	r9
    ae6e:	af 92       	push	r10
    ae70:	bf 92       	push	r11
    ae72:	cf 92       	push	r12
    ae74:	df 92       	push	r13
    ae76:	ef 92       	push	r14
    ae78:	ff 92       	push	r15
    ae7a:	0f 93       	push	r16
    ae7c:	1f 93       	push	r17
    ae7e:	cf 93       	push	r28
    ae80:	df 93       	push	r29
    ae82:	00 d0       	rcall	.+0      	; 0xae84 <collision_detect_level+0x26>
    ae84:	00 d0       	rcall	.+0      	; 0xae86 <collision_detect_level+0x28>
    ae86:	1f 92       	push	r1
    ae88:	cd b7       	in	r28, 0x3d	; 61
    ae8a:	de b7       	in	r29, 0x3e	; 62
    ae8c:	9d 83       	std	Y+5, r25	; 0x05
    ae8e:	8c 83       	std	Y+4, r24	; 0x04
    ae90:	56 2e       	mov	r5, r22
    ae92:	a4 2e       	mov	r10, r20
	u8 x0_tile = s->x >> 3;
    ae94:	fc 01       	movw	r30, r24
    ae96:	c0 80       	ld	r12, Z
    ae98:	d1 80       	ldd	r13, Z+1	; 0x01
    ae9a:	86 01       	movw	r16, r12
    ae9c:	83 e0       	ldi	r24, 0x03	; 3
    ae9e:	16 95       	lsr	r17
    aea0:	07 95       	ror	r16
    aea2:	8a 95       	dec	r24
    aea4:	e1 f7       	brne	.-8      	; 0xae9e <collision_detect_level+0x40>
    aea6:	0a 83       	std	Y+2, r16	; 0x02
	u8 y0_tile = s->y >> 3;
    aea8:	e2 80       	ldd	r14, Z+2	; 0x02
    aeaa:	f3 80       	ldd	r15, Z+3	; 0x03
	u8 y1_tile = (s->y+7) >> 3;
	u8 lt1, lt2;
	u8 result = 0;
	
	// Top and Bottom
	if (s->vy != 0)
    aeac:	84 81       	ldd	r24, Z+4	; 0x04
    aeae:	88 23       	and	r24, r24
    aeb0:	09 f4       	brne	.+2      	; 0xaeb4 <collision_detect_level+0x56>
    aeb2:	ba c0       	rjmp	.+372    	; 0xb028 <collision_detect_level+0x1ca>
}

u8 collision_detect_level(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u8 x0_tile = s->x >> 3;
	u8 y0_tile = s->y >> 3;
    aeb4:	e3 e0       	ldi	r30, 0x03	; 3
    aeb6:	f6 94       	lsr	r15
    aeb8:	e7 94       	ror	r14
    aeba:	ea 95       	dec	r30
    aebc:	e1 f7       	brne	.-8      	; 0xaeb6 <collision_detect_level+0x58>
    aebe:	e9 82       	std	Y+1, r14	; 0x01
	u8 x1_tile = (s->x+7) >> 3;
    aec0:	f7 e0       	ldi	r31, 0x07	; 7
    aec2:	cf 0e       	add	r12, r31
    aec4:	d1 1c       	adc	r13, r1
    aec6:	f3 e0       	ldi	r31, 0x03	; 3
    aec8:	d6 94       	lsr	r13
    aeca:	c7 94       	ror	r12
    aecc:	fa 95       	dec	r31
    aece:	e1 f7       	brne	.-8      	; 0xaec8 <collision_detect_level+0x6a>
		{
			if (s->vy < 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, y0_tile);
				lt2 = get_level_tile(game.current_level, x1_tile + x, y0_tile);
				if ((solid_tile(lt1) && pixel_overlap(s->x-game.camera_x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    aed0:	30 2e       	mov	r3, r16
    aed2:	33 0c       	add	r3, r3
    aed4:	33 0c       	add	r3, r3
    aed6:	33 0c       	add	r3, r3
					(solid_tile(lt2) && pixel_overlap(s->x-game.camera_x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    aed8:	2c 2c       	mov	r2, r12
    aeda:	22 0c       	add	r2, r2
    aedc:	22 0c       	add	r2, r2
    aede:	22 0c       	add	r2, r2
    aee0:	ff 24       	eor	r15, r15
				{
					s->vy =  0;
					s->y = (y0_tile + 1) * 8;
    aee2:	47 01       	movw	r8, r14
    aee4:	8f ef       	ldi	r24, 0xFF	; 255
    aee6:	88 1a       	sub	r8, r24
    aee8:	98 0a       	sbc	r9, r24
    aeea:	a3 e0       	ldi	r26, 0x03	; 3
    aeec:	88 0c       	add	r8, r8
    aeee:	99 1c       	adc	r9, r9
    aef0:	aa 95       	dec	r26
    aef2:	e1 f7       	brne	.-8      	; 0xaeec <collision_detect_level+0x8e>
					result = 1;
				}
			}
			if (s->vy > 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, (s->y + tile_height*8 - 1) / 8);
    aef4:	e8 e0       	ldi	r30, 0x08	; 8
    aef6:	4e 9f       	mul	r20, r30
    aef8:	30 01       	movw	r6, r0
    aefa:	11 24       	eor	r1, r1
				if ((solid_tile(lt1) && pixel_overlap(s->x-game.camera_x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) || 
					(solid_tile(lt2) && pixel_overlap(s->x-game.camera_x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vy =  0;
					s->gravity = 0;
					s->y = y0_tile * 8;
    aefc:	b3 e0       	ldi	r27, 0x03	; 3
    aefe:	ee 0c       	add	r14, r14
    af00:	ff 1c       	adc	r15, r15
    af02:	ba 95       	dec	r27
    af04:	e1 f7       	brne	.-8      	; 0xaefe <collision_detect_level+0xa0>
    af06:	41 2c       	mov	r4, r1
    af08:	b1 2c       	mov	r11, r1
	u8 result = 0;
	
	// Top and Bottom
	if (s->vy != 0)
	{
		for (u8 x = 0; x < tile_width; x++)
    af0a:	45 14       	cp	r4, r5
    af0c:	09 f4       	brne	.+2      	; 0xaf10 <collision_detect_level+0xb2>
    af0e:	8d c0       	rjmp	.+282    	; 0xb02a <collision_detect_level+0x1cc>
		{
			if (s->vy < 0)
    af10:	ec 81       	ldd	r30, Y+4	; 0x04
    af12:	fd 81       	ldd	r31, Y+5	; 0x05
    af14:	84 81       	ldd	r24, Z+4	; 0x04
    af16:	87 ff       	sbrs	r24, 7
    af18:	34 c0       	rjmp	.+104    	; 0xaf82 <collision_detect_level+0x124>
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, y0_tile);
    af1a:	49 81       	ldd	r20, Y+1	; 0x01
    af1c:	64 2d       	mov	r22, r4
    af1e:	60 0f       	add	r22, r16
    af20:	80 91 b4 0f 	lds	r24, 0x0FB4
    af24:	90 91 b5 0f 	lds	r25, 0x0FB5
    af28:	0e 94 2e 54 	call	0xa85c	; 0xa85c <get_level_tile>
    af2c:	28 2f       	mov	r18, r24
				lt2 = get_level_tile(game.current_level, x1_tile + x, y0_tile);
    af2e:	49 81       	ldd	r20, Y+1	; 0x01
    af30:	64 2d       	mov	r22, r4
    af32:	6c 0d       	add	r22, r12
    af34:	80 91 b4 0f 	lds	r24, 0x0FB4
    af38:	90 91 b5 0f 	lds	r25, 0x0FB5
    af3c:	2b 83       	std	Y+3, r18	; 0x03
    af3e:	0e 94 2e 54 	call	0xa85c	; 0xa85c <get_level_tile>
    af42:	98 2f       	mov	r25, r24
	}
}

u8 solid_tile(u8 level_tile)
{
	if (level_tile >= 1 && level_tile <= 17)
    af44:	2b 81       	ldd	r18, Y+3	; 0x03
    af46:	21 50       	subi	r18, 0x01	; 1
    af48:	21 31       	cpi	r18, 0x11	; 17
    af4a:	28 f0       	brcs	.+10     	; 0xaf56 <collision_detect_level+0xf8>
    af4c:	91 50       	subi	r25, 0x01	; 1
    af4e:	91 31       	cpi	r25, 0x11	; 17
    af50:	08 f4       	brcc	.+2      	; 0xaf54 <collision_detect_level+0xf6>
    af52:	23 c1       	rjmp	.+582    	; 0xb19a <collision_detect_level+0x33c>
    af54:	16 c0       	rjmp	.+44     	; 0xaf82 <collision_detect_level+0x124>
		{
			if (s->vy < 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, y0_tile);
				lt2 = get_level_tile(game.current_level, x1_tile + x, y0_tile);
				if ((solid_tile(lt1) && pixel_overlap(s->x-game.camera_x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    af56:	ec 81       	ldd	r30, Y+4	; 0x04
    af58:	fd 81       	ldd	r31, Y+5	; 0x05
    af5a:	80 81       	ld	r24, Z
    af5c:	30 91 af 0d 	lds	r19, 0x0DAF
    af60:	28 e0       	ldi	r18, 0x08	; 8
    af62:	48 e0       	ldi	r20, 0x08	; 8
    af64:	63 2d       	mov	r22, r3
    af66:	83 1b       	sub	r24, r19
    af68:	9b 83       	std	Y+3, r25	; 0x03
    af6a:	0e 94 22 57 	call	0xae44	; 0xae44 <pixel_overlap>
    af6e:	9b 81       	ldd	r25, Y+3	; 0x03
    af70:	84 30       	cpi	r24, 0x04	; 4
    af72:	60 f3       	brcs	.-40     	; 0xaf4c <collision_detect_level+0xee>
					(solid_tile(lt2) && pixel_overlap(s->x-game.camera_x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vy =  0;
    af74:	ec 81       	ldd	r30, Y+4	; 0x04
    af76:	fd 81       	ldd	r31, Y+5	; 0x05
    af78:	14 82       	std	Z+4, r1	; 0x04
					s->y = (y0_tile + 1) * 8;
    af7a:	93 82       	std	Z+3, r9	; 0x03
    af7c:	82 82       	std	Z+2, r8	; 0x02
					result = 1;
    af7e:	bb 24       	eor	r11, r11
    af80:	b3 94       	inc	r11
				}
			}
			if (s->vy > 0)
    af82:	ec 81       	ldd	r30, Y+4	; 0x04
    af84:	fd 81       	ldd	r31, Y+5	; 0x05
    af86:	84 81       	ldd	r24, Z+4	; 0x04
    af88:	18 16       	cp	r1, r24
    af8a:	0c f0       	brlt	.+2      	; 0xaf8e <collision_detect_level+0x130>
    af8c:	4b c0       	rjmp	.+150    	; 0xb024 <collision_detect_level+0x1c6>
    af8e:	42 81       	ldd	r20, Z+2	; 0x02
    af90:	53 81       	ldd	r21, Z+3	; 0x03
    af92:	41 50       	subi	r20, 0x01	; 1
    af94:	51 09       	sbc	r21, r1
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, (s->y + tile_height*8 - 1) / 8);
    af96:	46 0d       	add	r20, r6
    af98:	57 1d       	adc	r21, r7
    af9a:	63 e0       	ldi	r22, 0x03	; 3
    af9c:	56 95       	lsr	r21
    af9e:	47 95       	ror	r20
    afa0:	6a 95       	dec	r22
    afa2:	e1 f7       	brne	.-8      	; 0xaf9c <collision_detect_level+0x13e>
    afa4:	64 2d       	mov	r22, r4
    afa6:	60 0f       	add	r22, r16
    afa8:	80 91 b4 0f 	lds	r24, 0x0FB4
    afac:	90 91 b5 0f 	lds	r25, 0x0FB5
    afb0:	0e 94 2e 54 	call	0xa85c	; 0xa85c <get_level_tile>
    afb4:	28 2f       	mov	r18, r24
    afb6:	ec 81       	ldd	r30, Y+4	; 0x04
    afb8:	fd 81       	ldd	r31, Y+5	; 0x05
    afba:	42 81       	ldd	r20, Z+2	; 0x02
    afbc:	53 81       	ldd	r21, Z+3	; 0x03
    afbe:	41 50       	subi	r20, 0x01	; 1
    afc0:	51 09       	sbc	r21, r1
				lt2 = get_level_tile(game.current_level, x1_tile + x, (s->y + tile_height*8 - 1) / 8);
    afc2:	46 0d       	add	r20, r6
    afc4:	57 1d       	adc	r21, r7
    afc6:	73 e0       	ldi	r23, 0x03	; 3
    afc8:	56 95       	lsr	r21
    afca:	47 95       	ror	r20
    afcc:	7a 95       	dec	r23
    afce:	e1 f7       	brne	.-8      	; 0xafc8 <collision_detect_level+0x16a>
    afd0:	64 2d       	mov	r22, r4
    afd2:	6c 0d       	add	r22, r12
    afd4:	80 91 b4 0f 	lds	r24, 0x0FB4
    afd8:	90 91 b5 0f 	lds	r25, 0x0FB5
    afdc:	2b 83       	std	Y+3, r18	; 0x03
    afde:	0e 94 2e 54 	call	0xa85c	; 0xa85c <get_level_tile>
    afe2:	98 2f       	mov	r25, r24
	}
}

u8 solid_tile(u8 level_tile)
{
	if (level_tile >= 1 && level_tile <= 17)
    afe4:	2b 81       	ldd	r18, Y+3	; 0x03
    afe6:	21 50       	subi	r18, 0x01	; 1
    afe8:	21 31       	cpi	r18, 0x11	; 17
    afea:	28 f0       	brcs	.+10     	; 0xaff6 <collision_detect_level+0x198>
    afec:	91 50       	subi	r25, 0x01	; 1
    afee:	91 31       	cpi	r25, 0x11	; 17
    aff0:	08 f4       	brcc	.+2      	; 0xaff4 <collision_detect_level+0x196>
    aff2:	e2 c0       	rjmp	.+452    	; 0xb1b8 <collision_detect_level+0x35a>
    aff4:	17 c0       	rjmp	.+46     	; 0xb024 <collision_detect_level+0x1c6>
			}
			if (s->vy > 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, (s->y + tile_height*8 - 1) / 8);
				lt2 = get_level_tile(game.current_level, x1_tile + x, (s->y + tile_height*8 - 1) / 8);
				if ((solid_tile(lt1) && pixel_overlap(s->x-game.camera_x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) || 
    aff6:	ec 81       	ldd	r30, Y+4	; 0x04
    aff8:	fd 81       	ldd	r31, Y+5	; 0x05
    affa:	80 81       	ld	r24, Z
    affc:	30 91 af 0d 	lds	r19, 0x0DAF
    b000:	28 e0       	ldi	r18, 0x08	; 8
    b002:	48 e0       	ldi	r20, 0x08	; 8
    b004:	63 2d       	mov	r22, r3
    b006:	83 1b       	sub	r24, r19
    b008:	9b 83       	std	Y+3, r25	; 0x03
    b00a:	0e 94 22 57 	call	0xae44	; 0xae44 <pixel_overlap>
    b00e:	9b 81       	ldd	r25, Y+3	; 0x03
    b010:	84 30       	cpi	r24, 0x04	; 4
    b012:	60 f3       	brcs	.-40     	; 0xafec <collision_detect_level+0x18e>
					(solid_tile(lt2) && pixel_overlap(s->x-game.camera_x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vy =  0;
    b014:	ec 81       	ldd	r30, Y+4	; 0x04
    b016:	fd 81       	ldd	r31, Y+5	; 0x05
    b018:	14 82       	std	Z+4, r1	; 0x04
					s->gravity = 0;
    b01a:	16 82       	std	Z+6, r1	; 0x06
					s->y = y0_tile * 8;
    b01c:	f3 82       	std	Z+3, r15	; 0x03
    b01e:	e2 82       	std	Z+2, r14	; 0x02
					result = 1;
    b020:	bb 24       	eor	r11, r11
    b022:	b3 94       	inc	r11
	u8 result = 0;
	
	// Top and Bottom
	if (s->vy != 0)
	{
		for (u8 x = 0; x < tile_width; x++)
    b024:	43 94       	inc	r4
    b026:	71 cf       	rjmp	.-286    	; 0xaf0a <collision_detect_level+0xac>
	u8 x0_tile = s->x >> 3;
	u8 y0_tile = s->y >> 3;
	u8 x1_tile = (s->x+7) >> 3;
	u8 y1_tile = (s->y+7) >> 3;
	u8 lt1, lt2;
	u8 result = 0;
    b028:	b1 2c       	mov	r11, r1
			}
		}
	}
	
	// Left and Right
	if (s->vx != 0)
    b02a:	ec 81       	ldd	r30, Y+4	; 0x04
    b02c:	fd 81       	ldd	r31, Y+5	; 0x05
    b02e:	85 81       	ldd	r24, Z+5	; 0x05
    b030:	88 23       	and	r24, r24
    b032:	09 f4       	brne	.+2      	; 0xb036 <collision_detect_level+0x1d8>
    b034:	e7 c0       	rjmp	.+462    	; 0xb204 <collision_detect_level+0x3a6>
	{
		y0_tile = s->y / 8;
    b036:	e2 80       	ldd	r14, Z+2	; 0x02
    b038:	f3 80       	ldd	r15, Z+3	; 0x03
    b03a:	47 01       	movw	r8, r14
    b03c:	23 e0       	ldi	r18, 0x03	; 3
    b03e:	96 94       	lsr	r9
    b040:	87 94       	ror	r8
    b042:	2a 95       	dec	r18
    b044:	e1 f7       	brne	.-8      	; 0xb03e <collision_detect_level+0x1e0>
		y1_tile = (s->y+7) / 8;
    b046:	f7 e0       	ldi	r31, 0x07	; 7
    b048:	ef 0e       	add	r14, r31
    b04a:	f1 1c       	adc	r15, r1
    b04c:	33 e0       	ldi	r19, 0x03	; 3
    b04e:	f6 94       	lsr	r15
    b050:	e7 94       	ror	r14
    b052:	3a 95       	dec	r19
    b054:	e1 f7       	brne	.-8      	; 0xb04e <collision_detect_level+0x1f0>
		{
			if (s->vx < 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile, y0_tile + y);
				lt2 = get_level_tile(game.current_level, x0_tile, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    b056:	38 2c       	mov	r3, r8
    b058:	33 0c       	add	r3, r3
    b05a:	33 0c       	add	r3, r3
    b05c:	33 0c       	add	r3, r3
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    b05e:	4e 2c       	mov	r4, r14
    b060:	44 0c       	add	r4, r4
    b062:	44 0c       	add	r4, r4
    b064:	44 0c       	add	r4, r4
    b066:	11 27       	eor	r17, r17
				{
					s->vx =  0;
					s->x = (x0_tile + 1) * 8;
    b068:	38 01       	movw	r6, r16
    b06a:	8f ef       	ldi	r24, 0xFF	; 255
    b06c:	68 1a       	sub	r6, r24
    b06e:	78 0a       	sbc	r7, r24
    b070:	43 e0       	ldi	r20, 0x03	; 3
    b072:	66 0c       	add	r6, r6
    b074:	77 1c       	adc	r7, r7
    b076:	4a 95       	dec	r20
    b078:	e1 f7       	brne	.-8      	; 0xb072 <collision_detect_level+0x214>
				}
			}
			
			if (s->vx > 0)
			{
				lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y0_tile + y);
    b07a:	e8 e0       	ldi	r30, 0x08	; 8
    b07c:	5e 9e       	mul	r5, r30
    b07e:	60 01       	movw	r12, r0
    b080:	11 24       	eor	r1, r1
				lt2 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vx =  0;
					s->x = x0_tile * 8;
    b082:	53 e0       	ldi	r21, 0x03	; 3
    b084:	00 0f       	add	r16, r16
    b086:	11 1f       	adc	r17, r17
    b088:	5a 95       	dec	r21
    b08a:	e1 f7       	brne	.-8      	; 0xb084 <collision_detect_level+0x226>
	// Left and Right
	if (s->vx != 0)
	{
		y0_tile = s->y / 8;
		y1_tile = (s->y+7) / 8;
		for (u8 y = 0; y < tile_height; y++)
    b08c:	51 2c       	mov	r5, r1
    b08e:	5a 14       	cp	r5, r10
    b090:	09 f4       	brne	.+2      	; 0xb094 <collision_detect_level+0x236>
    b092:	b8 c0       	rjmp	.+368    	; 0xb204 <collision_detect_level+0x3a6>
		{
			if (s->vx < 0)
    b094:	ec 81       	ldd	r30, Y+4	; 0x04
    b096:	fd 81       	ldd	r31, Y+5	; 0x05
    b098:	85 81       	ldd	r24, Z+5	; 0x05
    b09a:	87 ff       	sbrs	r24, 7
    b09c:	30 c0       	rjmp	.+96     	; 0xb0fe <collision_detect_level+0x2a0>
    b09e:	45 2d       	mov	r20, r5
    b0a0:	48 0d       	add	r20, r8
			{
				lt1 = get_level_tile(game.current_level, x0_tile, y0_tile + y);
    b0a2:	6a 81       	ldd	r22, Y+2	; 0x02
    b0a4:	80 91 b4 0f 	lds	r24, 0x0FB4
    b0a8:	90 91 b5 0f 	lds	r25, 0x0FB5
    b0ac:	0e 94 2e 54 	call	0xa85c	; 0xa85c <get_level_tile>
    b0b0:	28 2f       	mov	r18, r24
    b0b2:	45 2d       	mov	r20, r5
    b0b4:	4e 0d       	add	r20, r14
				lt2 = get_level_tile(game.current_level, x0_tile, y1_tile + y);
    b0b6:	6a 81       	ldd	r22, Y+2	; 0x02
    b0b8:	80 91 b4 0f 	lds	r24, 0x0FB4
    b0bc:	90 91 b5 0f 	lds	r25, 0x0FB5
    b0c0:	2b 83       	std	Y+3, r18	; 0x03
    b0c2:	0e 94 2e 54 	call	0xa85c	; 0xa85c <get_level_tile>
    b0c6:	28 2e       	mov	r2, r24
	}
}

u8 solid_tile(u8 level_tile)
{
	if (level_tile >= 1 && level_tile <= 17)
    b0c8:	2b 81       	ldd	r18, Y+3	; 0x03
    b0ca:	21 50       	subi	r18, 0x01	; 1
    b0cc:	21 31       	cpi	r18, 0x11	; 17
    b0ce:	30 f0       	brcs	.+12     	; 0xb0dc <collision_detect_level+0x27e>
    b0d0:	8f ef       	ldi	r24, 0xFF	; 255
    b0d2:	82 0d       	add	r24, r2
    b0d4:	81 31       	cpi	r24, 0x11	; 17
    b0d6:	08 f4       	brcc	.+2      	; 0xb0da <collision_detect_level+0x27c>
    b0d8:	7e c0       	rjmp	.+252    	; 0xb1d6 <collision_detect_level+0x378>
    b0da:	11 c0       	rjmp	.+34     	; 0xb0fe <collision_detect_level+0x2a0>
		{
			if (s->vx < 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile, y0_tile + y);
				lt2 = get_level_tile(game.current_level, x0_tile, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    b0dc:	28 e0       	ldi	r18, 0x08	; 8
    b0de:	48 e0       	ldi	r20, 0x08	; 8
    b0e0:	63 2d       	mov	r22, r3
    b0e2:	ec 81       	ldd	r30, Y+4	; 0x04
    b0e4:	fd 81       	ldd	r31, Y+5	; 0x05
    b0e6:	82 81       	ldd	r24, Z+2	; 0x02
    b0e8:	0e 94 22 57 	call	0xae44	; 0xae44 <pixel_overlap>
    b0ec:	84 30       	cpi	r24, 0x04	; 4
    b0ee:	80 f3       	brcs	.-32     	; 0xb0d0 <collision_detect_level+0x272>
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vx =  0;
    b0f0:	ec 81       	ldd	r30, Y+4	; 0x04
    b0f2:	fd 81       	ldd	r31, Y+5	; 0x05
    b0f4:	15 82       	std	Z+5, r1	; 0x05
					s->x = (x0_tile + 1) * 8;
    b0f6:	71 82       	std	Z+1, r7	; 0x01
    b0f8:	60 82       	st	Z, r6
					result = 1;
    b0fa:	bb 24       	eor	r11, r11
    b0fc:	b3 94       	inc	r11
				}
			}
			
			if (s->vx > 0)
    b0fe:	ec 81       	ldd	r30, Y+4	; 0x04
    b100:	fd 81       	ldd	r31, Y+5	; 0x05
    b102:	85 81       	ldd	r24, Z+5	; 0x05
    b104:	18 16       	cp	r1, r24
    b106:	0c f0       	brlt	.+2      	; 0xb10a <collision_detect_level+0x2ac>
    b108:	46 c0       	rjmp	.+140    	; 0xb196 <collision_detect_level+0x338>
    b10a:	60 81       	ld	r22, Z
    b10c:	71 81       	ldd	r23, Z+1	; 0x01
    b10e:	61 50       	subi	r22, 0x01	; 1
    b110:	71 09       	sbc	r23, r1
			{
				lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y0_tile + y);
    b112:	6c 0d       	add	r22, r12
    b114:	7d 1d       	adc	r23, r13
    b116:	83 e0       	ldi	r24, 0x03	; 3
    b118:	76 95       	lsr	r23
    b11a:	67 95       	ror	r22
    b11c:	8a 95       	dec	r24
    b11e:	e1 f7       	brne	.-8      	; 0xb118 <collision_detect_level+0x2ba>
    b120:	45 2d       	mov	r20, r5
    b122:	48 0d       	add	r20, r8
    b124:	80 91 b4 0f 	lds	r24, 0x0FB4
    b128:	90 91 b5 0f 	lds	r25, 0x0FB5
    b12c:	0e 94 2e 54 	call	0xa85c	; 0xa85c <get_level_tile>
    b130:	28 2e       	mov	r2, r24
    b132:	ec 81       	ldd	r30, Y+4	; 0x04
    b134:	fd 81       	ldd	r31, Y+5	; 0x05
    b136:	60 81       	ld	r22, Z
    b138:	71 81       	ldd	r23, Z+1	; 0x01
    b13a:	61 50       	subi	r22, 0x01	; 1
    b13c:	71 09       	sbc	r23, r1
				lt2 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y1_tile + y);
    b13e:	6c 0d       	add	r22, r12
    b140:	7d 1d       	adc	r23, r13
    b142:	93 e0       	ldi	r25, 0x03	; 3
    b144:	76 95       	lsr	r23
    b146:	67 95       	ror	r22
    b148:	9a 95       	dec	r25
    b14a:	e1 f7       	brne	.-8      	; 0xb144 <collision_detect_level+0x2e6>
    b14c:	45 2d       	mov	r20, r5
    b14e:	4e 0d       	add	r20, r14
    b150:	80 91 b4 0f 	lds	r24, 0x0FB4
    b154:	90 91 b5 0f 	lds	r25, 0x0FB5
    b158:	0e 94 2e 54 	call	0xa85c	; 0xa85c <get_level_tile>
    b15c:	98 2f       	mov	r25, r24
	}
}

u8 solid_tile(u8 level_tile)
{
	if (level_tile >= 1 && level_tile <= 17)
    b15e:	8f ef       	ldi	r24, 0xFF	; 255
    b160:	82 0d       	add	r24, r2
    b162:	81 31       	cpi	r24, 0x11	; 17
    b164:	28 f0       	brcs	.+10     	; 0xb170 <collision_detect_level+0x312>
    b166:	91 50       	subi	r25, 0x01	; 1
    b168:	91 31       	cpi	r25, 0x11	; 17
    b16a:	08 f4       	brcc	.+2      	; 0xb16e <collision_detect_level+0x310>
    b16c:	40 c0       	rjmp	.+128    	; 0xb1ee <collision_detect_level+0x390>
    b16e:	13 c0       	rjmp	.+38     	; 0xb196 <collision_detect_level+0x338>
			
			if (s->vx > 0)
			{
				lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y0_tile + y);
				lt2 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    b170:	28 e0       	ldi	r18, 0x08	; 8
    b172:	48 e0       	ldi	r20, 0x08	; 8
    b174:	63 2d       	mov	r22, r3
    b176:	ec 81       	ldd	r30, Y+4	; 0x04
    b178:	fd 81       	ldd	r31, Y+5	; 0x05
    b17a:	82 81       	ldd	r24, Z+2	; 0x02
    b17c:	9b 83       	std	Y+3, r25	; 0x03
    b17e:	0e 94 22 57 	call	0xae44	; 0xae44 <pixel_overlap>
    b182:	9b 81       	ldd	r25, Y+3	; 0x03
    b184:	84 30       	cpi	r24, 0x04	; 4
    b186:	78 f3       	brcs	.-34     	; 0xb166 <collision_detect_level+0x308>
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vx =  0;
    b188:	ec 81       	ldd	r30, Y+4	; 0x04
    b18a:	fd 81       	ldd	r31, Y+5	; 0x05
    b18c:	15 82       	std	Z+5, r1	; 0x05
					s->x = x0_tile * 8;
    b18e:	11 83       	std	Z+1, r17	; 0x01
    b190:	00 83       	st	Z, r16
					result = 1;
    b192:	bb 24       	eor	r11, r11
    b194:	b3 94       	inc	r11
	// Left and Right
	if (s->vx != 0)
	{
		y0_tile = s->y / 8;
		y1_tile = (s->y+7) / 8;
		for (u8 y = 0; y < tile_height; y++)
    b196:	53 94       	inc	r5
    b198:	7a cf       	rjmp	.-268    	; 0xb08e <collision_detect_level+0x230>
			if (s->vy < 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, y0_tile);
				lt2 = get_level_tile(game.current_level, x1_tile + x, y0_tile);
				if ((solid_tile(lt1) && pixel_overlap(s->x-game.camera_x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
					(solid_tile(lt2) && pixel_overlap(s->x-game.camera_x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    b19a:	ec 81       	ldd	r30, Y+4	; 0x04
    b19c:	fd 81       	ldd	r31, Y+5	; 0x05
    b19e:	80 81       	ld	r24, Z
    b1a0:	90 91 af 0d 	lds	r25, 0x0DAF
    b1a4:	28 e0       	ldi	r18, 0x08	; 8
    b1a6:	48 e0       	ldi	r20, 0x08	; 8
    b1a8:	62 2d       	mov	r22, r2
    b1aa:	89 1b       	sub	r24, r25
    b1ac:	0e 94 22 57 	call	0xae44	; 0xae44 <pixel_overlap>
    b1b0:	84 30       	cpi	r24, 0x04	; 4
    b1b2:	08 f0       	brcs	.+2      	; 0xb1b6 <collision_detect_level+0x358>
    b1b4:	df ce       	rjmp	.-578    	; 0xaf74 <collision_detect_level+0x116>
    b1b6:	e5 ce       	rjmp	.-566    	; 0xaf82 <collision_detect_level+0x124>
			if (s->vy > 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, (s->y + tile_height*8 - 1) / 8);
				lt2 = get_level_tile(game.current_level, x1_tile + x, (s->y + tile_height*8 - 1) / 8);
				if ((solid_tile(lt1) && pixel_overlap(s->x-game.camera_x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) || 
					(solid_tile(lt2) && pixel_overlap(s->x-game.camera_x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    b1b8:	ec 81       	ldd	r30, Y+4	; 0x04
    b1ba:	fd 81       	ldd	r31, Y+5	; 0x05
    b1bc:	80 81       	ld	r24, Z
    b1be:	90 91 af 0d 	lds	r25, 0x0DAF
    b1c2:	28 e0       	ldi	r18, 0x08	; 8
    b1c4:	48 e0       	ldi	r20, 0x08	; 8
    b1c6:	62 2d       	mov	r22, r2
    b1c8:	89 1b       	sub	r24, r25
    b1ca:	0e 94 22 57 	call	0xae44	; 0xae44 <pixel_overlap>
    b1ce:	84 30       	cpi	r24, 0x04	; 4
    b1d0:	08 f0       	brcs	.+2      	; 0xb1d4 <collision_detect_level+0x376>
    b1d2:	20 cf       	rjmp	.-448    	; 0xb014 <collision_detect_level+0x1b6>
    b1d4:	27 cf       	rjmp	.-434    	; 0xb024 <collision_detect_level+0x1c6>
			if (s->vx < 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile, y0_tile + y);
				lt2 = get_level_tile(game.current_level, x0_tile, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    b1d6:	28 e0       	ldi	r18, 0x08	; 8
    b1d8:	48 e0       	ldi	r20, 0x08	; 8
    b1da:	64 2d       	mov	r22, r4
    b1dc:	ec 81       	ldd	r30, Y+4	; 0x04
    b1de:	fd 81       	ldd	r31, Y+5	; 0x05
    b1e0:	82 81       	ldd	r24, Z+2	; 0x02
    b1e2:	0e 94 22 57 	call	0xae44	; 0xae44 <pixel_overlap>
    b1e6:	84 30       	cpi	r24, 0x04	; 4
    b1e8:	08 f0       	brcs	.+2      	; 0xb1ec <collision_detect_level+0x38e>
    b1ea:	82 cf       	rjmp	.-252    	; 0xb0f0 <collision_detect_level+0x292>
    b1ec:	88 cf       	rjmp	.-240    	; 0xb0fe <collision_detect_level+0x2a0>
			if (s->vx > 0)
			{
				lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y0_tile + y);
				lt2 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    b1ee:	28 e0       	ldi	r18, 0x08	; 8
    b1f0:	48 e0       	ldi	r20, 0x08	; 8
    b1f2:	64 2d       	mov	r22, r4
    b1f4:	ec 81       	ldd	r30, Y+4	; 0x04
    b1f6:	fd 81       	ldd	r31, Y+5	; 0x05
    b1f8:	82 81       	ldd	r24, Z+2	; 0x02
    b1fa:	0e 94 22 57 	call	0xae44	; 0xae44 <pixel_overlap>
    b1fe:	84 30       	cpi	r24, 0x04	; 4
    b200:	18 f6       	brcc	.-122    	; 0xb188 <collision_detect_level+0x32a>
    b202:	c9 cf       	rjmp	.-110    	; 0xb196 <collision_detect_level+0x338>
				}
			}
		}
	}
	return result;
}
    b204:	8b 2d       	mov	r24, r11
    b206:	0f 90       	pop	r0
    b208:	0f 90       	pop	r0
    b20a:	0f 90       	pop	r0
    b20c:	0f 90       	pop	r0
    b20e:	0f 90       	pop	r0
    b210:	df 91       	pop	r29
    b212:	cf 91       	pop	r28
    b214:	1f 91       	pop	r17
    b216:	0f 91       	pop	r16
    b218:	ff 90       	pop	r15
    b21a:	ef 90       	pop	r14
    b21c:	df 90       	pop	r13
    b21e:	cf 90       	pop	r12
    b220:	bf 90       	pop	r11
    b222:	af 90       	pop	r10
    b224:	9f 90       	pop	r9
    b226:	8f 90       	pop	r8
    b228:	7f 90       	pop	r7
    b22a:	6f 90       	pop	r6
    b22c:	5f 90       	pop	r5
    b22e:	4f 90       	pop	r4
    b230:	3f 90       	pop	r3
    b232:	2f 90       	pop	r2
    b234:	08 95       	ret

0000b236 <animate_shot>:
		player->active_shots++;
	}
}

void animate_shot(Player* player, Player* other_player, u8 shot_slot)
{
    b236:	2f 92       	push	r2
    b238:	3f 92       	push	r3
    b23a:	4f 92       	push	r4
    b23c:	5f 92       	push	r5
    b23e:	6f 92       	push	r6
    b240:	7f 92       	push	r7
    b242:	8f 92       	push	r8
    b244:	9f 92       	push	r9
    b246:	af 92       	push	r10
    b248:	bf 92       	push	r11
    b24a:	cf 92       	push	r12
    b24c:	df 92       	push	r13
    b24e:	ef 92       	push	r14
    b250:	ff 92       	push	r15
    b252:	0f 93       	push	r16
    b254:	1f 93       	push	r17
    b256:	cf 93       	push	r28
    b258:	df 93       	push	r29
    b25a:	00 d0       	rcall	.+0      	; 0xb25c <animate_shot+0x26>
    b25c:	00 d0       	rcall	.+0      	; 0xb25e <animate_shot+0x28>
    b25e:	00 d0       	rcall	.+0      	; 0xb260 <animate_shot+0x2a>
    b260:	cd b7       	in	r28, 0x3d	; 61
    b262:	de b7       	in	r29, 0x3e	; 62
    b264:	2c 01       	movw	r4, r24
    b266:	4b 01       	movw	r8, r22
    b268:	d4 2e       	mov	r13, r20
    b26a:	3c 01       	movw	r6, r24
    b26c:	28 e1       	ldi	r18, 0x18	; 24
    b26e:	62 0e       	add	r6, r18
    b270:	71 1c       	adc	r7, r1
    b272:	0f 96       	adiw	r24, 0x0f	; 15
    b274:	9e 83       	std	Y+6, r25	; 0x06
    b276:	8d 83       	std	Y+5, r24	; 0x05
	// Animate shots
	u8 slot = ENEMY_SLOT;
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
    b278:	10 e0       	ldi	r17, 0x00	; 0
							other_player->shield -= player->shot[i].hit_count;
							if (other_player->shield <= 0)
							{
								SFX_PLAYER_EXPLODE;
								other_player->shield = 0;
								other_player->flags = EXPLODING;
    b27a:	30 e1       	ldi	r19, 0x10	; 16
    b27c:	b3 2e       	mov	r11, r19
{
	// Animate shots
	u8 slot = ENEMY_SLOT;
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
	{
		if (player->shot[i].active)
    b27e:	f3 01       	movw	r30, r6
    b280:	80 81       	ld	r24, Z
    b282:	88 23       	and	r24, r24
    b284:	09 f4       	brne	.+2      	; 0xb288 <animate_shot+0x52>
    b286:	27 c1       	rjmp	.+590    	; 0xb4d6 <animate_shot+0x2a0>
		{
			player->shot[i].shared.x += LBMoveDelta(player->shot[i].shared.vx, game.frame_counter)*2;
    b288:	60 91 c9 0d 	lds	r22, 0x0DC9
    b28c:	34 97       	sbiw	r30, 0x04	; 4
    b28e:	80 81       	ld	r24, Z
    b290:	0e 94 e2 4e 	call	0x9dc4	; 0x9dc4 <LBMoveDelta>
    b294:	88 0f       	add	r24, r24
    b296:	99 1f       	adc	r25, r25
    b298:	ed 81       	ldd	r30, Y+5	; 0x05
    b29a:	fe 81       	ldd	r31, Y+6	; 0x06
    b29c:	20 81       	ld	r18, Z
    b29e:	31 81       	ldd	r19, Z+1	; 0x01
    b2a0:	82 0f       	add	r24, r18
    b2a2:	93 1f       	adc	r25, r19
    b2a4:	91 83       	std	Z+1, r25	; 0x01
    b2a6:	80 83       	st	Z, r24
			player->shot[i].shared.y += LBMoveDelta(player->shot[i].shared.vy, game.frame_counter);
    b2a8:	60 91 c9 0d 	lds	r22, 0x0DC9
    b2ac:	f3 01       	movw	r30, r6
    b2ae:	35 97       	sbiw	r30, 0x05	; 5
    b2b0:	80 81       	ld	r24, Z
    b2b2:	0e 94 e2 4e 	call	0x9dc4	; 0x9dc4 <LBMoveDelta>
    b2b6:	ed 81       	ldd	r30, Y+5	; 0x05
    b2b8:	fe 81       	ldd	r31, Y+6	; 0x06
    b2ba:	42 81       	ldd	r20, Z+2	; 0x02
    b2bc:	53 81       	ldd	r21, Z+3	; 0x03
    b2be:	84 0f       	add	r24, r20
    b2c0:	95 1f       	adc	r25, r21
    b2c2:	93 83       	std	Z+3, r25	; 0x03
    b2c4:	82 83       	std	Z+2, r24	; 0x02
    b2c6:	f1 2e       	mov	r15, r17
    b2c8:	fd 0c       	add	r15, r13
			LBMoveSprite(shot_slot+i, player->shot[i].shared.x - game.camera_x, player->shot[i].shared.y - game.camera_y, 1, 1);
    b2ca:	90 91 b7 0d 	lds	r25, 0x0DB7
    b2ce:	48 2f       	mov	r20, r24
    b2d0:	49 1b       	sub	r20, r25
    b2d2:	60 81       	ld	r22, Z
    b2d4:	80 91 af 0d 	lds	r24, 0x0DAF
    b2d8:	68 1b       	sub	r22, r24
    b2da:	01 e0       	ldi	r16, 0x01	; 1
    b2dc:	21 e0       	ldi	r18, 0x01	; 1
    b2de:	8f 2d       	mov	r24, r15
    b2e0:	0e 94 c5 50 	call	0xa18a	; 0xa18a <LBMoveSprite>
			if (player->shot[i].shared.x < game.camera_x || player->shot[i].shared.x+8 > game.camera_x + CAMERA_WIDTH*8 ||
    b2e4:	ed 81       	ldd	r30, Y+5	; 0x05
    b2e6:	fe 81       	ldd	r31, Y+6	; 0x06
    b2e8:	20 81       	ld	r18, Z
    b2ea:	31 81       	ldd	r19, Z+1	; 0x01
    b2ec:	80 91 af 0d 	lds	r24, 0x0DAF
    b2f0:	90 91 b0 0d 	lds	r25, 0x0DB0
    b2f4:	28 17       	cp	r18, r24
    b2f6:	39 07       	cpc	r19, r25
    b2f8:	08 f4       	brcc	.+2      	; 0xb2fc <animate_shot+0xc6>
    b2fa:	e0 c0       	rjmp	.+448    	; 0xb4bc <animate_shot+0x286>
    b2fc:	28 5f       	subi	r18, 0xF8	; 248
    b2fe:	3f 4f       	sbci	r19, 0xFF	; 255
    b300:	80 52       	subi	r24, 0x20	; 32
    b302:	9f 4f       	sbci	r25, 0xFF	; 255
    b304:	82 17       	cp	r24, r18
    b306:	93 07       	cpc	r25, r19
    b308:	08 f4       	brcc	.+2      	; 0xb30c <animate_shot+0xd6>
    b30a:	d8 c0       	rjmp	.+432    	; 0xb4bc <animate_shot+0x286>
			    collision_detect_level(&player->shot[i].shared, 1, 1))
    b30c:	41 e0       	ldi	r20, 0x01	; 1
    b30e:	61 e0       	ldi	r22, 0x01	; 1
    b310:	8d 81       	ldd	r24, Y+5	; 0x05
    b312:	9e 81       	ldd	r25, Y+6	; 0x06
    b314:	0e 94 2f 57 	call	0xae5e	; 0xae5e <collision_detect_level>
		if (player->shot[i].active)
		{
			player->shot[i].shared.x += LBMoveDelta(player->shot[i].shared.vx, game.frame_counter)*2;
			player->shot[i].shared.y += LBMoveDelta(player->shot[i].shared.vy, game.frame_counter);
			LBMoveSprite(shot_slot+i, player->shot[i].shared.x - game.camera_x, player->shot[i].shared.y - game.camera_y, 1, 1);
			if (player->shot[i].shared.x < game.camera_x || player->shot[i].shared.x+8 > game.camera_x + CAMERA_WIDTH*8 ||
    b318:	81 11       	cpse	r24, r1
    b31a:	d0 c0       	rjmp	.+416    	; 0xb4bc <animate_shot+0x286>
    b31c:	85 ec       	ldi	r24, 0xC5	; 197
    b31e:	28 2e       	mov	r2, r24
    b320:	8e e0       	ldi	r24, 0x0E	; 14
    b322:	38 2e       	mov	r3, r24
    b324:	1a 82       	std	Y+2, r1	; 0x02
    b326:	19 82       	std	Y+1, r1	; 0x01
    b328:	93 01       	movw	r18, r6
    b32a:	21 50       	subi	r18, 0x01	; 1
    b32c:	31 09       	sbc	r19, r1
    b32e:	3c 83       	std	Y+4, r19	; 0x04
    b330:	2b 83       	std	Y+3, r18	; 0x03
    b332:	f1 01       	movw	r30, r2
    b334:	34 97       	sbiw	r30, 0x04	; 4
			else
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
				{
					if (game.enemies[j].enemy_type != ENEMY_PROJECTILE_HAZARD && game.enemies[j].active &&
    b336:	80 81       	ld	r24, Z
    b338:	82 30       	cpi	r24, 0x02	; 2
    b33a:	09 f4       	brne	.+2      	; 0xb33e <animate_shot+0x108>
    b33c:	65 c0       	rjmp	.+202    	; 0xb408 <animate_shot+0x1d2>
    b33e:	35 97       	sbiw	r30, 0x05	; 5
    b340:	80 81       	ld	r24, Z
    b342:	88 23       	and	r24, r24
    b344:	09 f4       	brne	.+2      	; 0xb348 <animate_shot+0x112>
    b346:	60 c0       	rjmp	.+192    	; 0xb408 <animate_shot+0x1d2>
					    LBCollides(player->shot[i].shared.x-game.camera_x,player->shot[i].shared.y, 8, 8,
    b348:	90 91 af 0d 	lds	r25, 0x0DAF
    b34c:	34 96       	adiw	r30, 0x04	; 4
    b34e:	a0 80       	ld	r10, Z
    b350:	aa 0c       	add	r10, r10
    b352:	aa 0c       	add	r10, r10
    b354:	aa 0c       	add	r10, r10
    b356:	31 97       	sbiw	r30, 0x01	; 1
    b358:	c0 80       	ld	r12, Z
    b35a:	cc 0c       	add	r12, r12
    b35c:	cc 0c       	add	r12, r12
    b35e:	cc 0c       	add	r12, r12
    b360:	3a 97       	sbiw	r30, 0x0a	; 10
    b362:	00 81       	ld	r16, Z
    b364:	09 1b       	sub	r16, r25
    b366:	ed 81       	ldd	r30, Y+5	; 0x05
    b368:	fe 81       	ldd	r31, Y+6	; 0x06
    b36a:	80 81       	ld	r24, Z
    b36c:	f1 01       	movw	r30, r2
    b36e:	3e 97       	sbiw	r30, 0x0e	; 14
    b370:	e0 80       	ld	r14, Z
    b372:	28 e0       	ldi	r18, 0x08	; 8
    b374:	48 e0       	ldi	r20, 0x08	; 8
    b376:	ed 81       	ldd	r30, Y+5	; 0x05
    b378:	fe 81       	ldd	r31, Y+6	; 0x06
    b37a:	62 81       	ldd	r22, Z+2	; 0x02
    b37c:	89 1b       	sub	r24, r25
    b37e:	0e 94 24 50 	call	0xa048	; 0xa048 <LBCollides>
			else
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
				{
					if (game.enemies[j].enemy_type != ENEMY_PROJECTILE_HAZARD && game.enemies[j].active &&
    b382:	88 23       	and	r24, r24
    b384:	09 f4       	brne	.+2      	; 0xb388 <animate_shot+0x152>
    b386:	40 c0       	rjmp	.+128    	; 0xb408 <animate_shot+0x1d2>
					    LBCollides(player->shot[i].shared.x-game.camera_x,player->shot[i].shared.y, 8, 8,
							game.enemies[j].shared.x-game.camera_x, game.enemies[j].shared.y, game.enemies[j].width*8, game.enemies[j].height*8
						)
					)
					{
						SFX_HIT;
    b388:	41 e0       	ldi	r20, 0x01	; 1
    b38a:	6f ef       	ldi	r22, 0xFF	; 255
    b38c:	84 e0       	ldi	r24, 0x04	; 4
    b38e:	0e 94 5d 43 	call	0x86ba	; 0x86ba <TriggerFx>
						game.enemies[j].shield -= player->shot[i].hit_count;
    b392:	f1 01       	movw	r30, r2
    b394:	80 81       	ld	r24, Z
    b396:	eb 81       	ldd	r30, Y+3	; 0x03
    b398:	fc 81       	ldd	r31, Y+4	; 0x04
    b39a:	90 81       	ld	r25, Z
    b39c:	89 1b       	sub	r24, r25
    b39e:	f1 01       	movw	r30, r2
    b3a0:	80 83       	st	Z, r24
						if (game.enemies[j].shield <= 0)
    b3a2:	18 16       	cp	r1, r24
    b3a4:	24 f1       	brlt	.+72     	; 0xb3ee <animate_shot+0x1b8>
						{
							SFX_ENEMY_EXPLODE;
    b3a6:	41 e0       	ldi	r20, 0x01	; 1
    b3a8:	6f ef       	ldi	r22, 0xFF	; 255
    b3aa:	86 e0       	ldi	r24, 0x06	; 6
    b3ac:	0e 94 5d 43 	call	0x86ba	; 0x86ba <TriggerFx>
							game.enemies[j].flags = EXPLODING;
    b3b0:	43 e3       	ldi	r20, 0x33	; 51
    b3b2:	29 81       	ldd	r18, Y+1	; 0x01
    b3b4:	3a 81       	ldd	r19, Y+2	; 0x02
    b3b6:	42 9f       	mul	r20, r18
    b3b8:	c0 01       	movw	r24, r0
    b3ba:	43 9f       	mul	r20, r19
    b3bc:	90 0d       	add	r25, r0
    b3be:	11 24       	eor	r1, r1
    b3c0:	81 55       	subi	r24, 0x51	; 81
    b3c2:	92 4f       	sbci	r25, 0xF2	; 242
    b3c4:	fc 01       	movw	r30, r24
    b3c6:	e2 5f       	subi	r30, 0xF2	; 242
    b3c8:	fe 4f       	sbci	r31, 0xFE	; 254
    b3ca:	b0 82       	st	Z, r11
							game.enemies[j].active = 0;
    b3cc:	31 97       	sbiw	r30, 0x01	; 1
    b3ce:	10 82       	st	Z, r1
							game.active_enemies--;
    b3d0:	80 91 ca 0d 	lds	r24, 0x0DCA
    b3d4:	81 50       	subi	r24, 0x01	; 1
    b3d6:	80 93 ca 0d 	sts	0x0DCA, r24
							game.level_score += KILL_SCORE;
    b3da:	80 91 b3 0d 	lds	r24, 0x0DB3
    b3de:	90 91 b4 0d 	lds	r25, 0x0DB4
    b3e2:	0a 96       	adiw	r24, 0x0a	; 10
    b3e4:	90 93 b4 0d 	sts	0x0DB4, r25
    b3e8:	80 93 b3 0d 	sts	0x0DB3, r24
							break;
    b3ec:	1b c0       	rjmp	.+54     	; 0xb424 <animate_shot+0x1ee>
						}
						player->shot[i].active = 0;
    b3ee:	f3 01       	movw	r30, r6
    b3f0:	10 82       	st	Z, r1
						player->active_shots--;
    b3f2:	f2 01       	movw	r30, r4
    b3f4:	87 81       	ldd	r24, Z+7	; 0x07
    b3f6:	81 50       	subi	r24, 0x01	; 1
    b3f8:	87 83       	std	Z+7, r24	; 0x07
						LBMoveSprite(shot_slot+i, OFF_SCREEN, 0, 1, 1);
    b3fa:	01 e0       	ldi	r16, 0x01	; 1
    b3fc:	21 e0       	ldi	r18, 0x01	; 1
    b3fe:	40 e0       	ldi	r20, 0x00	; 0
    b400:	60 ee       	ldi	r22, 0xE0	; 224
    b402:	8f 2d       	mov	r24, r15
    b404:	0e 94 c5 50 	call	0xa18a	; 0xa18a <LBMoveSprite>
    b408:	29 81       	ldd	r18, Y+1	; 0x01
    b40a:	3a 81       	ldd	r19, Y+2	; 0x02
    b40c:	2f 5f       	subi	r18, 0xFF	; 255
    b40e:	3f 4f       	sbci	r19, 0xFF	; 255
    b410:	3a 83       	std	Y+2, r19	; 0x02
    b412:	29 83       	std	Y+1, r18	; 0x01
    b414:	33 e3       	ldi	r19, 0x33	; 51
    b416:	23 0e       	add	r2, r19
    b418:	31 1c       	adc	r3, r1
				LBMoveSprite(shot_slot+i, OFF_SCREEN, 0, 1, 1);
			}
			else
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
    b41a:	89 81       	ldd	r24, Y+1	; 0x01
    b41c:	9a 81       	ldd	r25, Y+2	; 0x02
    b41e:	05 97       	sbiw	r24, 0x05	; 5
    b420:	09 f0       	breq	.+2      	; 0xb424 <animate_shot+0x1ee>
    b422:	87 cf       	rjmp	.-242    	; 0xb332 <animate_shot+0xfc>
					}
					slot += game.enemies[j].width*game.enemies[j].height;
				}
				
				// Boss interaction
				if (!(other_player == &game.player && DEBUG_GODMODE) && other_player->active)
    b424:	9d ec       	ldi	r25, 0xCD	; 205
    b426:	89 16       	cp	r8, r25
    b428:	9d e0       	ldi	r25, 0x0D	; 13
    b42a:	99 06       	cpc	r9, r25
    b42c:	09 f4       	brne	.+2      	; 0xb430 <animate_shot+0x1fa>
    b42e:	53 c0       	rjmp	.+166    	; 0xb4d6 <animate_shot+0x2a0>
    b430:	f4 01       	movw	r30, r8
    b432:	85 85       	ldd	r24, Z+13	; 0x0d
    b434:	88 23       	and	r24, r24
    b436:	09 f4       	brne	.+2      	; 0xb43a <animate_shot+0x204>
    b438:	4e c0       	rjmp	.+156    	; 0xb4d6 <animate_shot+0x2a0>
				{
					if (LBCollides(player->shot[i].shared.x-game.camera_x,player->shot[i].shared.y, 8, 8,
    b43a:	90 91 af 0d 	lds	r25, 0x0DAF
    b43e:	a4 84       	ldd	r10, Z+12	; 0x0c
    b440:	aa 0c       	add	r10, r10
    b442:	aa 0c       	add	r10, r10
    b444:	aa 0c       	add	r10, r10
    b446:	c3 84       	ldd	r12, Z+11	; 0x0b
    b448:	cc 0c       	add	r12, r12
    b44a:	cc 0c       	add	r12, r12
    b44c:	cc 0c       	add	r12, r12
    b44e:	00 81       	ld	r16, Z
    b450:	09 1b       	sub	r16, r25
    b452:	ed 81       	ldd	r30, Y+5	; 0x05
    b454:	fe 81       	ldd	r31, Y+6	; 0x06
    b456:	80 81       	ld	r24, Z
    b458:	f4 01       	movw	r30, r8
    b45a:	e2 80       	ldd	r14, Z+2	; 0x02
    b45c:	28 e0       	ldi	r18, 0x08	; 8
    b45e:	48 e0       	ldi	r20, 0x08	; 8
    b460:	ed 81       	ldd	r30, Y+5	; 0x05
    b462:	fe 81       	ldd	r31, Y+6	; 0x06
    b464:	62 81       	ldd	r22, Z+2	; 0x02
    b466:	89 1b       	sub	r24, r25
    b468:	0e 94 24 50 	call	0xa048	; 0xa048 <LBCollides>
    b46c:	88 23       	and	r24, r24
    b46e:	99 f1       	breq	.+102    	; 0xb4d6 <animate_shot+0x2a0>
								other_player->shared.x-game.camera_x, other_player->shared.y, other_player->width*8, other_player->height*8
							)
						)
						{
							SFX_HIT;
    b470:	41 e0       	ldi	r20, 0x01	; 1
    b472:	6f ef       	ldi	r22, 0xFF	; 255
    b474:	84 e0       	ldi	r24, 0x04	; 4
    b476:	0e 94 5d 43 	call	0x86ba	; 0x86ba <TriggerFx>
							other_player->shield -= player->shot[i].hit_count;
    b47a:	f4 01       	movw	r30, r8
    b47c:	86 85       	ldd	r24, Z+14	; 0x0e
    b47e:	f3 01       	movw	r30, r6
    b480:	31 97       	sbiw	r30, 0x01	; 1
    b482:	90 81       	ld	r25, Z
    b484:	89 1b       	sub	r24, r25
    b486:	f4 01       	movw	r30, r8
    b488:	86 87       	std	Z+14, r24	; 0x0e
							if (other_player->shield <= 0)
    b48a:	18 16       	cp	r1, r24
    b48c:	bc f0       	brlt	.+46     	; 0xb4bc <animate_shot+0x286>
							{
								SFX_PLAYER_EXPLODE;
    b48e:	41 e0       	ldi	r20, 0x01	; 1
    b490:	6f ef       	ldi	r22, 0xFF	; 255
    b492:	85 e0       	ldi	r24, 0x05	; 5
    b494:	0e 94 5d 43 	call	0x86ba	; 0x86ba <TriggerFx>
								other_player->shield = 0;
    b498:	f4 01       	movw	r30, r8
    b49a:	16 86       	std	Z+14, r1	; 0x0e
								other_player->flags = EXPLODING;
    b49c:	b0 86       	std	Z+8, r11	; 0x08
								if (other_player == &game.boss) game.level_score += BOSS_KILL_SCORE;
    b49e:	f1 e4       	ldi	r31, 0x41	; 65
    b4a0:	8f 16       	cp	r8, r31
    b4a2:	fe e0       	ldi	r31, 0x0E	; 14
    b4a4:	9f 06       	cpc	r9, r31
    b4a6:	51 f4       	brne	.+20     	; 0xb4bc <animate_shot+0x286>
    b4a8:	80 91 b3 0d 	lds	r24, 0x0DB3
    b4ac:	90 91 b4 0d 	lds	r25, 0x0DB4
    b4b0:	8c 59       	subi	r24, 0x9C	; 156
    b4b2:	9f 4f       	sbci	r25, 0xFF	; 255
    b4b4:	90 93 b4 0d 	sts	0x0DB4, r25
    b4b8:	80 93 b3 0d 	sts	0x0DB3, r24
							}
							player->shot[i].active = 0;
    b4bc:	f3 01       	movw	r30, r6
    b4be:	10 82       	st	Z, r1
							player->active_shots--;
    b4c0:	f2 01       	movw	r30, r4
    b4c2:	87 81       	ldd	r24, Z+7	; 0x07
    b4c4:	81 50       	subi	r24, 0x01	; 1
    b4c6:	87 83       	std	Z+7, r24	; 0x07
							LBMoveSprite(shot_slot+i, OFF_SCREEN, 0, 1, 1);
    b4c8:	01 e0       	ldi	r16, 0x01	; 1
    b4ca:	21 e0       	ldi	r18, 0x01	; 1
    b4cc:	40 e0       	ldi	r20, 0x00	; 0
    b4ce:	60 ee       	ldi	r22, 0xE0	; 224
    b4d0:	8f 2d       	mov	r24, r15
    b4d2:	0e 94 c5 50 	call	0xa18a	; 0xa18a <LBMoveSprite>

void animate_shot(Player* player, Player* other_player, u8 shot_slot)
{
	// Animate shots
	u8 slot = ENEMY_SLOT;
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
    b4d6:	1f 5f       	subi	r17, 0xFF	; 255
    b4d8:	f2 e1       	ldi	r31, 0x12	; 18
    b4da:	6f 0e       	add	r6, r31
    b4dc:	71 1c       	adc	r7, r1
    b4de:	2d 81       	ldd	r18, Y+5	; 0x05
    b4e0:	3e 81       	ldd	r19, Y+6	; 0x06
    b4e2:	2e 5e       	subi	r18, 0xEE	; 238
    b4e4:	3f 4f       	sbci	r19, 0xFF	; 255
    b4e6:	3e 83       	std	Y+6, r19	; 0x06
    b4e8:	2d 83       	std	Y+5, r18	; 0x05
    b4ea:	13 30       	cpi	r17, 0x03	; 3
    b4ec:	09 f0       	breq	.+2      	; 0xb4f0 <animate_shot+0x2ba>
    b4ee:	c7 ce       	rjmp	.-626    	; 0xb27e <animate_shot+0x48>
						}
				}
			}
		}
	}
}
    b4f0:	26 96       	adiw	r28, 0x06	; 6
    b4f2:	0f b6       	in	r0, 0x3f	; 63
    b4f4:	f8 94       	cli
    b4f6:	de bf       	out	0x3e, r29	; 62
    b4f8:	0f be       	out	0x3f, r0	; 63
    b4fa:	cd bf       	out	0x3d, r28	; 61
    b4fc:	df 91       	pop	r29
    b4fe:	cf 91       	pop	r28
    b500:	1f 91       	pop	r17
    b502:	0f 91       	pop	r16
    b504:	ff 90       	pop	r15
    b506:	ef 90       	pop	r14
    b508:	df 90       	pop	r13
    b50a:	cf 90       	pop	r12
    b50c:	bf 90       	pop	r11
    b50e:	af 90       	pop	r10
    b510:	9f 90       	pop	r9
    b512:	8f 90       	pop	r8
    b514:	7f 90       	pop	r7
    b516:	6f 90       	pop	r6
    b518:	5f 90       	pop	r5
    b51a:	4f 90       	pop	r4
    b51c:	3f 90       	pop	r3
    b51e:	2f 90       	pop	r2
    b520:	08 95       	ret

0000b522 <map_explosion>:
	}
	return result;
}

u8 map_explosion(u8* flags, Animation* anim, u8 slot, u8 width, u8 height)
{
    b522:	7f 92       	push	r7
    b524:	8f 92       	push	r8
    b526:	9f 92       	push	r9
    b528:	af 92       	push	r10
    b52a:	bf 92       	push	r11
    b52c:	cf 92       	push	r12
    b52e:	df 92       	push	r13
    b530:	ef 92       	push	r14
    b532:	ff 92       	push	r15
    b534:	0f 93       	push	r16
    b536:	1f 93       	push	r17
    b538:	cf 93       	push	r28
    b53a:	df 93       	push	r29
    b53c:	1f 92       	push	r1
    b53e:	cd b7       	in	r28, 0x3d	; 61
    b540:	de b7       	in	r29, 0x3e	; 62
    b542:	6c 01       	movw	r12, r24
    b544:	7b 01       	movw	r14, r22
    b546:	74 2e       	mov	r7, r20
	char* frame;
	frame = LBGetNextFrame(anim);
    b548:	cb 01       	movw	r24, r22
    b54a:	29 83       	std	Y+1, r18	; 0x01
    b54c:	0e 94 0d 4f 	call	0x9e1a	; 0x9e1a <LBGetNextFrame>
    b550:	4c 01       	movw	r8, r24
	for (u8 i = 0; i < width*height; i++)
    b552:	29 81       	ldd	r18, Y+1	; 0x01
    b554:	20 9f       	mul	r18, r16
    b556:	50 01       	movw	r10, r0
    b558:	11 24       	eor	r1, r1
    b55a:	10 e0       	ldi	r17, 0x00	; 0
    b55c:	81 2f       	mov	r24, r17
    b55e:	90 e0       	ldi	r25, 0x00	; 0
    b560:	8a 15       	cp	r24, r10
    b562:	9b 05       	cpc	r25, r11
    b564:	54 f4       	brge	.+20     	; 0xb57a <map_explosion+0x58>
	{
		LBMapSprite(slot+i, frame, 0);
    b566:	40 e0       	ldi	r20, 0x00	; 0
    b568:	b4 01       	movw	r22, r8
    b56a:	81 2f       	mov	r24, r17
    b56c:	87 0d       	add	r24, r7
    b56e:	29 83       	std	Y+1, r18	; 0x01
    b570:	0e 94 73 50 	call	0xa0e6	; 0xa0e6 <LBMapSprite>

u8 map_explosion(u8* flags, Animation* anim, u8 slot, u8 width, u8 height)
{
	char* frame;
	frame = LBGetNextFrame(anim);
	for (u8 i = 0; i < width*height; i++)
    b574:	1f 5f       	subi	r17, 0xFF	; 255
    b576:	29 81       	ldd	r18, Y+1	; 0x01
    b578:	f1 cf       	rjmp	.-30     	; 0xb55c <map_explosion+0x3a>
	{
		LBMapSprite(slot+i, frame, 0);
	}
	if (anim->looped)
    b57a:	f7 01       	movw	r30, r14
    b57c:	84 81       	ldd	r24, Z+4	; 0x04
    b57e:	88 23       	and	r24, r24
    b580:	51 f0       	breq	.+20     	; 0xb596 <map_explosion+0x74>
	{
		*flags ^= EXPLODING;
    b582:	f6 01       	movw	r30, r12
    b584:	80 81       	ld	r24, Z
    b586:	90 e1       	ldi	r25, 0x10	; 16
    b588:	98 27       	eor	r25, r24
    b58a:	90 83       	st	Z, r25
		LBMoveSprite(slot, OFF_SCREEN, 0, width, height);
    b58c:	40 e0       	ldi	r20, 0x00	; 0
    b58e:	60 ee       	ldi	r22, 0xE0	; 224
    b590:	87 2d       	mov	r24, r7
    b592:	0e 94 c5 50 	call	0xa18a	; 0xa18a <LBMoveSprite>
	}
	return anim->looped;
}
    b596:	f7 01       	movw	r30, r14
    b598:	84 81       	ldd	r24, Z+4	; 0x04
    b59a:	0f 90       	pop	r0
    b59c:	df 91       	pop	r29
    b59e:	cf 91       	pop	r28
    b5a0:	1f 91       	pop	r17
    b5a2:	0f 91       	pop	r16
    b5a4:	ff 90       	pop	r15
    b5a6:	ef 90       	pop	r14
    b5a8:	df 90       	pop	r13
    b5aa:	cf 90       	pop	r12
    b5ac:	bf 90       	pop	r11
    b5ae:	af 90       	pop	r10
    b5b0:	9f 90       	pop	r9
    b5b2:	8f 90       	pop	r8
    b5b4:	7f 90       	pop	r7
    b5b6:	08 95       	ret

0000b5b8 <animate_sprite>:

void animate_sprite(SpriteShared* s, u8 slot, u8 width, u8 height, u8 level_hazard, u8 origin_tile)
{
    b5b8:	8f 92       	push	r8
    b5ba:	9f 92       	push	r9
    b5bc:	af 92       	push	r10
    b5be:	bf 92       	push	r11
    b5c0:	cf 92       	push	r12
    b5c2:	df 92       	push	r13
    b5c4:	ef 92       	push	r14
    b5c6:	ff 92       	push	r15
    b5c8:	0f 93       	push	r16
    b5ca:	1f 93       	push	r17
    b5cc:	cf 93       	push	r28
    b5ce:	df 93       	push	r29
    b5d0:	ec 01       	movw	r28, r24
    b5d2:	c6 2e       	mov	r12, r22
    b5d4:	14 2f       	mov	r17, r20
    b5d6:	d2 2e       	mov	r13, r18
	s->vy = s->vy + s->gravity*FRAME_TIME;
    b5d8:	6c 81       	ldd	r22, Y+4	; 0x04
    b5da:	77 27       	eor	r23, r23
    b5dc:	67 fd       	sbrc	r22, 7
    b5de:	70 95       	com	r23
    b5e0:	87 2f       	mov	r24, r23
    b5e2:	97 2f       	mov	r25, r23
    b5e4:	0e 94 51 6a 	call	0xd4a2	; 0xd4a2 <__floatsisf>
    b5e8:	4b 01       	movw	r8, r22
    b5ea:	5c 01       	movw	r10, r24
    b5ec:	8e 81       	ldd	r24, Y+6	; 0x06
    b5ee:	68 2f       	mov	r22, r24
    b5f0:	70 e0       	ldi	r23, 0x00	; 0
    b5f2:	80 e0       	ldi	r24, 0x00	; 0
    b5f4:	90 e0       	ldi	r25, 0x00	; 0
    b5f6:	0e 94 51 6a 	call	0xd4a2	; 0xd4a2 <__floatsisf>
    b5fa:	29 e8       	ldi	r18, 0x89	; 137
    b5fc:	38 e8       	ldi	r19, 0x88	; 136
    b5fe:	48 e8       	ldi	r20, 0x88	; 136
    b600:	5c e3       	ldi	r21, 0x3C	; 60
    b602:	0e 94 dd 6a 	call	0xd5ba	; 0xd5ba <__mulsf3>
    b606:	9b 01       	movw	r18, r22
    b608:	ac 01       	movw	r20, r24
    b60a:	c5 01       	movw	r24, r10
    b60c:	b4 01       	movw	r22, r8
    b60e:	0e 94 ba 69 	call	0xd374	; 0xd374 <__addsf3>
    b612:	0e 94 1e 6a 	call	0xd43c	; 0xd43c <__fixsfsi>
	if (s->vy > MAX_SPEED) s->vy = MAX_SPEED;
    b616:	69 37       	cpi	r22, 0x79	; 121
    b618:	14 f4       	brge	.+4      	; 0xb61e <animate_sprite+0x66>
	return anim->looped;
}

void animate_sprite(SpriteShared* s, u8 slot, u8 width, u8 height, u8 level_hazard, u8 origin_tile)
{
	s->vy = s->vy + s->gravity*FRAME_TIME;
    b61a:	6c 83       	std	Y+4, r22	; 0x04
    b61c:	02 c0       	rjmp	.+4      	; 0xb622 <animate_sprite+0x6a>
	if (s->vy > MAX_SPEED) s->vy = MAX_SPEED;
    b61e:	88 e7       	ldi	r24, 0x78	; 120
    b620:	8c 83       	std	Y+4, r24	; 0x04
	s->x += LBMoveDelta(s->vx, game.frame_counter);
    b622:	60 91 c9 0d 	lds	r22, 0x0DC9
    b626:	8d 81       	ldd	r24, Y+5	; 0x05
    b628:	0e 94 e2 4e 	call	0x9dc4	; 0x9dc4 <LBMoveDelta>
    b62c:	28 81       	ld	r18, Y
    b62e:	39 81       	ldd	r19, Y+1	; 0x01
    b630:	82 0f       	add	r24, r18
    b632:	93 1f       	adc	r25, r19
    b634:	99 83       	std	Y+1, r25	; 0x01
    b636:	88 83       	st	Y, r24
	s->y += LBMoveDelta(s->vy, game.frame_counter);
    b638:	60 91 c9 0d 	lds	r22, 0x0DC9
    b63c:	8c 81       	ldd	r24, Y+4	; 0x04
    b63e:	0e 94 e2 4e 	call	0x9dc4	; 0x9dc4 <LBMoveDelta>
    b642:	ea 81       	ldd	r30, Y+2	; 0x02
    b644:	fb 81       	ldd	r31, Y+3	; 0x03
    b646:	8e 0f       	add	r24, r30
    b648:	9f 1f       	adc	r25, r31
    b64a:	9b 83       	std	Y+3, r25	; 0x03
    b64c:	8a 83       	std	Y+2, r24	; 0x02
	if(collision_detect_level(s, width, height) && level_hazard)
    b64e:	4d 2d       	mov	r20, r13
    b650:	61 2f       	mov	r22, r17
    b652:	ce 01       	movw	r24, r28
    b654:	0e 94 2f 57 	call	0xae5e	; 0xae5e <collision_detect_level>
    b658:	88 23       	and	r24, r24
    b65a:	41 f0       	breq	.+16     	; 0xb66c <animate_sprite+0xb4>
    b65c:	00 23       	and	r16, r16
    b65e:	31 f0       	breq	.+12     	; 0xb66c <animate_sprite+0xb4>
	{
		s->y = origin_tile*8;
    b660:	88 e0       	ldi	r24, 0x08	; 8
    b662:	e8 9e       	mul	r14, r24
    b664:	70 01       	movw	r14, r0
    b666:	11 24       	eor	r1, r1
    b668:	fb 82       	std	Y+3, r15	; 0x03
    b66a:	ea 82       	std	Y+2, r14	; 0x02
	}
	LBMoveSprite(slot, s->x - game.camera_x, s->y - game.camera_y, width, height);
    b66c:	3a 81       	ldd	r19, Y+2	; 0x02
    b66e:	80 91 b7 0d 	lds	r24, 0x0DB7
    b672:	43 2f       	mov	r20, r19
    b674:	48 1b       	sub	r20, r24
    b676:	98 81       	ld	r25, Y
    b678:	80 91 af 0d 	lds	r24, 0x0DAF
    b67c:	69 2f       	mov	r22, r25
    b67e:	68 1b       	sub	r22, r24
    b680:	0d 2d       	mov	r16, r13
    b682:	21 2f       	mov	r18, r17
    b684:	8c 2d       	mov	r24, r12
    b686:	0e 94 c5 50 	call	0xa18a	; 0xa18a <LBMoveSprite>
}
    b68a:	df 91       	pop	r29
    b68c:	cf 91       	pop	r28
    b68e:	1f 91       	pop	r17
    b690:	0f 91       	pop	r16
    b692:	ff 90       	pop	r15
    b694:	ef 90       	pop	r14
    b696:	df 90       	pop	r13
    b698:	cf 90       	pop	r12
    b69a:	bf 90       	pop	r11
    b69c:	af 90       	pop	r10
    b69e:	9f 90       	pop	r9
    b6a0:	8f 90       	pop	r8
    b6a2:	08 95       	ret

0000b6a4 <animate_player>:

void animate_player(Player* player, Player* other_player, u8 slot)
{
    b6a4:	ef 92       	push	r14
    b6a6:	0f 93       	push	r16
    b6a8:	fc 01       	movw	r30, r24
    b6aa:	84 2f       	mov	r24, r20
	if (player->flags & EXPLODING)
    b6ac:	90 85       	ldd	r25, Z+8	; 0x08
    b6ae:	94 ff       	sbrs	r25, 4
    b6b0:	0f c0       	rjmp	.+30     	; 0xb6d0 <animate_player+0x2c>
	{
		LBMoveSprite(slot, player->shared.x - game.camera_x, player->shared.y - game.camera_y, player->width, player->height);
    b6b2:	92 81       	ldd	r25, Z+2	; 0x02
    b6b4:	20 91 b7 0d 	lds	r18, 0x0DB7
    b6b8:	49 2f       	mov	r20, r25
    b6ba:	42 1b       	sub	r20, r18
    b6bc:	90 81       	ld	r25, Z
    b6be:	20 91 af 0d 	lds	r18, 0x0DAF
    b6c2:	69 2f       	mov	r22, r25
    b6c4:	62 1b       	sub	r22, r18
    b6c6:	04 85       	ldd	r16, Z+12	; 0x0c
    b6c8:	23 85       	ldd	r18, Z+11	; 0x0b
    b6ca:	0e 94 c5 50 	call	0xa18a	; 0xa18a <LBMoveSprite>
    b6ce:	08 c0       	rjmp	.+16     	; 0xb6e0 <animate_player+0x3c>
	{
		SFX_PLAYER_EXPLODE;
		other_player->shield = 0;
		other_player->flags = EXPLODING;
	}
	else animate_sprite(&player->shared, slot, player->width, player->height, 0, 0);
    b6d0:	e1 2c       	mov	r14, r1
    b6d2:	00 e0       	ldi	r16, 0x00	; 0
    b6d4:	24 85       	ldd	r18, Z+12	; 0x0c
    b6d6:	43 85       	ldd	r20, Z+11	; 0x0b
    b6d8:	68 2f       	mov	r22, r24
    b6da:	cf 01       	movw	r24, r30
    b6dc:	0e 94 dc 5a 	call	0xb5b8	; 0xb5b8 <animate_sprite>
}
    b6e0:	0f 91       	pop	r16
    b6e2:	ef 90       	pop	r14
    b6e4:	08 95       	ret

0000b6e6 <update_spider_enemy>:

void update_spider_enemy(Enemy* e, u8 slot)
{
    b6e6:	1f 93       	push	r17
    b6e8:	cf 93       	push	r28
    b6ea:	df 93       	push	r29
    b6ec:	ec 01       	movw	r28, r24
    b6ee:	16 2f       	mov	r17, r22
	if (e->flags & IDLE && e->frame_count == SPIDER_IDLE_FRAMES)
    b6f0:	98 85       	ldd	r25, Y+8	; 0x08
    b6f2:	89 2f       	mov	r24, r25
    b6f4:	88 70       	andi	r24, 0x08	; 8
    b6f6:	93 ff       	sbrs	r25, 3
    b6f8:	14 c0       	rjmp	.+40     	; 0xb722 <update_spider_enemy+0x3c>
    b6fa:	2d 85       	ldd	r18, Y+13	; 0x0d
    b6fc:	20 38       	cpi	r18, 0x80	; 128
    b6fe:	89 f4       	brne	.+34     	; 0xb722 <update_spider_enemy+0x3c>
	{
		e->flags = JUMPING;
    b700:	81 e0       	ldi	r24, 0x01	; 1
    b702:	88 87       	std	Y+8, r24	; 0x08
		e->shared.vy = -SPIDER_JUMP_SPEED;
    b704:	8c e9       	ldi	r24, 0x9C	; 156
    b706:	8c 83       	std	Y+4, r24	; 0x04
		e->shared.gravity = GRAVITY;
    b708:	88 ec       	ldi	r24, 0xC8	; 200
    b70a:	8e 83       	std	Y+6, r24	; 0x06
		e->shared.vx = SPIDER_SIDE_SPEED;
    b70c:	8c e3       	ldi	r24, 0x3C	; 60
    b70e:	8d 83       	std	Y+5, r24	; 0x05
		if (e->direction == D_LEFT)
    b710:	89 85       	ldd	r24, Y+9	; 0x09
    b712:	81 11       	cpse	r24, r1
    b714:	02 c0       	rjmp	.+4      	; 0xb71a <update_spider_enemy+0x34>
		{
			e->shared.vx = -SPIDER_SIDE_SPEED;
    b716:	84 ec       	ldi	r24, 0xC4	; 196
    b718:	8d 83       	std	Y+5, r24	; 0x05
		}
		LBMapSprite(slot, map_enemy_spider_1, 0);
    b71a:	40 e0       	ldi	r20, 0x00	; 0
    b71c:	6c ed       	ldi	r22, 0xDC	; 220
    b71e:	75 e3       	ldi	r23, 0x35	; 53
    b720:	19 c0       	rjmp	.+50     	; 0xb754 <update_spider_enemy+0x6e>
	}
	else if (e->flags & JUMPING && e->shared.gravity == 0)
    b722:	90 ff       	sbrs	r25, 0
    b724:	0f c0       	rjmp	.+30     	; 0xb744 <update_spider_enemy+0x5e>
    b726:	9e 81       	ldd	r25, Y+6	; 0x06
    b728:	91 11       	cpse	r25, r1
    b72a:	0c c0       	rjmp	.+24     	; 0xb744 <update_spider_enemy+0x5e>
	{
		e->flags = IDLE;
    b72c:	88 e0       	ldi	r24, 0x08	; 8
    b72e:	88 87       	std	Y+8, r24	; 0x08
		e->shared.vx = 0;
    b730:	1d 82       	std	Y+5, r1	; 0x05
		e->frame_count = 0;
    b732:	1d 86       	std	Y+13, r1	; 0x0d
		if (e->direction == D_LEFT)
    b734:	89 85       	ldd	r24, Y+9	; 0x09
    b736:	81 11       	cpse	r24, r1
    b738:	03 c0       	rjmp	.+6      	; 0xb740 <update_spider_enemy+0x5a>
		{
			e->direction = D_RIGHT;
    b73a:	81 e0       	ldi	r24, 0x01	; 1
    b73c:	89 87       	std	Y+9, r24	; 0x09
    b73e:	0d c0       	rjmp	.+26     	; 0xb75a <update_spider_enemy+0x74>
		}
		else
		{
			e->direction = D_LEFT;
    b740:	19 86       	std	Y+9, r1	; 0x09
    b742:	0b c0       	rjmp	.+22     	; 0xb75a <update_spider_enemy+0x74>
		}
	}
	else if (e->flags & IDLE)
    b744:	88 23       	and	r24, r24
    b746:	49 f0       	breq	.+18     	; 0xb75a <update_spider_enemy+0x74>
	{
		LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    b748:	ce 01       	movw	r24, r28
    b74a:	83 96       	adiw	r24, 0x23	; 35
    b74c:	0e 94 0d 4f 	call	0x9e1a	; 0x9e1a <LBGetNextFrame>
    b750:	40 e0       	ldi	r20, 0x00	; 0
    b752:	bc 01       	movw	r22, r24
    b754:	81 2f       	mov	r24, r17
    b756:	0e 94 73 50 	call	0xa0e6	; 0xa0e6 <LBMapSprite>
	}
	e->frame_count++;
    b75a:	8d 85       	ldd	r24, Y+13	; 0x0d
    b75c:	8f 5f       	subi	r24, 0xFF	; 255
    b75e:	8d 87       	std	Y+13, r24	; 0x0d
}
    b760:	df 91       	pop	r29
    b762:	cf 91       	pop	r28
    b764:	1f 91       	pop	r17
    b766:	08 95       	ret

0000b768 <update_shark_enemy>:

void update_shark_enemy(Enemy* e, u8 slot)
{
    b768:	cf 93       	push	r28
    b76a:	fc 01       	movw	r30, r24
    b76c:	c6 2f       	mov	r28, r22
	e->shared.vx = SHARK_SPEED;
    b76e:	8e e1       	ldi	r24, 0x1E	; 30
    b770:	85 83       	std	Z+5, r24	; 0x05
	e->shared.vy = 0;
    b772:	14 82       	std	Z+4, r1	; 0x04
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    b774:	cf 01       	movw	r24, r30
    b776:	83 96       	adiw	r24, 0x23	; 35
    b778:	0e 94 0d 4f 	call	0x9e1a	; 0x9e1a <LBGetNextFrame>
    b77c:	40 e0       	ldi	r20, 0x00	; 0
    b77e:	bc 01       	movw	r22, r24
    b780:	8c 2f       	mov	r24, r28
}
    b782:	cf 91       	pop	r28

void update_shark_enemy(Enemy* e, u8 slot)
{
	e->shared.vx = SHARK_SPEED;
	e->shared.vy = 0;
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    b784:	0c 94 73 50 	jmp	0xa0e6	; 0xa0e6 <LBMapSprite>

0000b788 <update_level_hazard>:
}

void update_level_hazard(Enemy* e, u8 slot)
{
    b788:	cf 93       	push	r28
    b78a:	fc 01       	movw	r30, r24
    b78c:	c6 2f       	mov	r28, r22
	e->shared.vx = 0;
    b78e:	15 82       	std	Z+5, r1	; 0x05
	e->shared.vy = HAZARD_SPEED;
    b790:	8e e1       	ldi	r24, 0x1E	; 30
    b792:	84 83       	std	Z+4, r24	; 0x04
	if (game.current_level_index == 2)
    b794:	80 91 c4 0d 	lds	r24, 0x0DC4
    b798:	82 30       	cpi	r24, 0x02	; 2
    b79a:	11 f4       	brne	.+4      	; 0xb7a0 <update_level_hazard+0x18>
	{
		e->shared.vy = -HAZARD_SPEED;
    b79c:	82 ee       	ldi	r24, 0xE2	; 226
    b79e:	84 83       	std	Z+4, r24	; 0x04
	}
	if (e->shared.y < 4 || e->shared.y > 24*8) e->shared.y = e->origin_tile*8;
    b7a0:	22 81       	ldd	r18, Z+2	; 0x02
    b7a2:	33 81       	ldd	r19, Z+3	; 0x03
    b7a4:	24 50       	subi	r18, 0x04	; 4
    b7a6:	31 09       	sbc	r19, r1
    b7a8:	2d 3b       	cpi	r18, 0xBD	; 189
    b7aa:	31 05       	cpc	r19, r1
    b7ac:	38 f0       	brcs	.+14     	; 0xb7bc <update_level_hazard+0x34>
    b7ae:	27 85       	ldd	r18, Z+15	; 0x0f
    b7b0:	88 e0       	ldi	r24, 0x08	; 8
    b7b2:	28 9f       	mul	r18, r24
    b7b4:	90 01       	movw	r18, r0
    b7b6:	11 24       	eor	r1, r1
    b7b8:	33 83       	std	Z+3, r19	; 0x03
    b7ba:	22 83       	std	Z+2, r18	; 0x02
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    b7bc:	cf 01       	movw	r24, r30
    b7be:	83 96       	adiw	r24, 0x23	; 35
    b7c0:	0e 94 0d 4f 	call	0x9e1a	; 0x9e1a <LBGetNextFrame>
    b7c4:	40 e0       	ldi	r20, 0x00	; 0
    b7c6:	bc 01       	movw	r22, r24
    b7c8:	8c 2f       	mov	r24, r28
}
    b7ca:	cf 91       	pop	r28
	if (game.current_level_index == 2)
	{
		e->shared.vy = -HAZARD_SPEED;
	}
	if (e->shared.y < 4 || e->shared.y > 24*8) e->shared.y = e->origin_tile*8;
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    b7cc:	0c 94 73 50 	jmp	0xa0e6	; 0xa0e6 <LBMapSprite>

0000b7d0 <update_basic_shot>:
}

void update_basic_shot(Shot* s, u8 slot)
{
    b7d0:	cf 93       	push	r28
    b7d2:	c6 2f       	mov	r28, r22
	LBMapSprite(slot, LBGetNextFrame(&s->anim), 0);
    b7d4:	0a 96       	adiw	r24, 0x0a	; 10
    b7d6:	0e 94 0d 4f 	call	0x9e1a	; 0x9e1a <LBGetNextFrame>
    b7da:	40 e0       	ldi	r20, 0x00	; 0
    b7dc:	bc 01       	movw	r22, r24
    b7de:	8c 2f       	mov	r24, r28
}
    b7e0:	cf 91       	pop	r28
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
}

void update_basic_shot(Shot* s, u8 slot)
{
	LBMapSprite(slot, LBGetNextFrame(&s->anim), 0);
    b7e2:	0c 94 73 50 	jmp	0xa0e6	; 0xa0e6 <LBMapSprite>

0000b7e6 <update_enemies>:
}

void update_enemies()
{
    b7e6:	cf 92       	push	r12
    b7e8:	df 92       	push	r13
    b7ea:	ef 92       	push	r14
    b7ec:	ff 92       	push	r15
    b7ee:	0f 93       	push	r16
    b7f0:	1f 93       	push	r17
    b7f2:	cf 93       	push	r28
    b7f4:	df 93       	push	r29
    b7f6:	c0 ec       	ldi	r28, 0xC0	; 192
    b7f8:	de e0       	ldi	r29, 0x0E	; 14
    b7fa:	85 eb       	ldi	r24, 0xB5	; 181
    b7fc:	e8 2e       	mov	r14, r24
    b7fe:	8e e0       	ldi	r24, 0x0E	; 14
    b800:	f8 2e       	mov	r15, r24
	u8 slot = ENEMY_SLOT;
    b802:	19 e0       	ldi	r17, 0x09	; 9
    b804:	fe 01       	movw	r30, r28
    b806:	33 97       	sbiw	r30, 0x03	; 3
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].flags & EXPLODING)
    b808:	80 81       	ld	r24, Z
    b80a:	9e 01       	movw	r18, r28
    b80c:	21 50       	subi	r18, 0x01	; 1
    b80e:	31 09       	sbc	r19, r1
    b810:	69 01       	movw	r12, r18
    b812:	84 ff       	sbrs	r24, 4
    b814:	0c c0       	rjmp	.+24     	; 0xb82e <update_enemies+0x48>
		{
			map_explosion(&game.enemies[i].flags, &game.enemies[i].expl, slot, game.enemies[i].width, game.enemies[i].height);
    b816:	08 81       	ld	r16, Y
    b818:	f9 01       	movw	r30, r18
    b81a:	20 81       	ld	r18, Z
    b81c:	41 2f       	mov	r20, r17
    b81e:	b7 01       	movw	r22, r14
    b820:	65 5d       	subi	r22, 0xD5	; 213
    b822:	7f 4f       	sbci	r23, 0xFF	; 255
    b824:	c7 01       	movw	r24, r14
    b826:	08 96       	adiw	r24, 0x08	; 8
    b828:	0e 94 91 5a 	call	0xb522	; 0xb522 <map_explosion>
    b82c:	18 c0       	rjmp	.+48     	; 0xb85e <update_enemies+0x78>
    b82e:	fe 01       	movw	r30, r28
    b830:	34 97       	sbiw	r30, 0x04	; 4
		}
		else if (game.enemies[i].active)
    b832:	80 81       	ld	r24, Z
    b834:	88 23       	and	r24, r24
    b836:	99 f0       	breq	.+38     	; 0xb85e <update_enemies+0x78>
		{
			switch (game.enemies[i].enemy_type)
    b838:	89 81       	ldd	r24, Y+1	; 0x01
    b83a:	88 23       	and	r24, r24
    b83c:	39 f0       	breq	.+14     	; 0xb84c <update_enemies+0x66>
    b83e:	81 30       	cpi	r24, 0x01	; 1
    b840:	51 f4       	brne	.+20     	; 0xb856 <update_enemies+0x70>
			{
				case ENEMY_SPIDER: update_spider_enemy(&game.enemies[i], slot); break;
				case ENEMY_SHARK: update_shark_enemy(&game.enemies[i], slot); break;
    b842:	61 2f       	mov	r22, r17
    b844:	c7 01       	movw	r24, r14
    b846:	0e 94 b4 5b 	call	0xb768	; 0xb768 <update_shark_enemy>
    b84a:	09 c0       	rjmp	.+18     	; 0xb85e <update_enemies+0x78>
		}
		else if (game.enemies[i].active)
		{
			switch (game.enemies[i].enemy_type)
			{
				case ENEMY_SPIDER: update_spider_enemy(&game.enemies[i], slot); break;
    b84c:	61 2f       	mov	r22, r17
    b84e:	c7 01       	movw	r24, r14
    b850:	0e 94 73 5b 	call	0xb6e6	; 0xb6e6 <update_spider_enemy>
    b854:	04 c0       	rjmp	.+8      	; 0xb85e <update_enemies+0x78>
				case ENEMY_SHARK: update_shark_enemy(&game.enemies[i], slot); break;
				default: update_level_hazard(&game.enemies[i], slot); break;
    b856:	61 2f       	mov	r22, r17
    b858:	c7 01       	movw	r24, r14
    b85a:	0e 94 c4 5b 	call	0xb788	; 0xb788 <update_level_hazard>
			}
		}
		slot += game.enemies[i].width * game.enemies[i].height;
    b85e:	f6 01       	movw	r30, r12
    b860:	90 81       	ld	r25, Z
    b862:	88 81       	ld	r24, Y
    b864:	98 9f       	mul	r25, r24
    b866:	10 0d       	add	r17, r0
    b868:	11 24       	eor	r1, r1
    b86a:	e3 96       	adiw	r28, 0x33	; 51
    b86c:	f3 e3       	ldi	r31, 0x33	; 51
    b86e:	ef 0e       	add	r14, r31
    b870:	f1 1c       	adc	r15, r1

void update_enemies()
{
	u8 slot = ENEMY_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    b872:	2f e0       	ldi	r18, 0x0F	; 15
    b874:	cf 3b       	cpi	r28, 0xBF	; 191
    b876:	d2 07       	cpc	r29, r18
    b878:	29 f6       	brne	.-118    	; 0xb804 <update_enemies+0x1e>
				default: update_level_hazard(&game.enemies[i], slot); break;
			}
		}
		slot += game.enemies[i].width * game.enemies[i].height;
	}
}
    b87a:	df 91       	pop	r29
    b87c:	cf 91       	pop	r28
    b87e:	1f 91       	pop	r17
    b880:	0f 91       	pop	r16
    b882:	ff 90       	pop	r15
    b884:	ef 90       	pop	r14
    b886:	df 90       	pop	r13
    b888:	cf 90       	pop	r12
    b88a:	08 95       	ret

0000b88c <update_enemy_shots>:

void update_enemy_shots()
{
    b88c:	cf 92       	push	r12
    b88e:	df 92       	push	r13
    b890:	ef 92       	push	r14
    b892:	ff 92       	push	r15
    b894:	0f 93       	push	r16
    b896:	1f 93       	push	r17
    b898:	cf 93       	push	r28
    b89a:	df 93       	push	r29
    b89c:	1f 92       	push	r1
    b89e:	cd b7       	in	r28, 0x3d	; 61
    b8a0:	de b7       	in	r29, 0x3e	; 62
    b8a2:	83 ec       	ldi	r24, 0xC3	; 195
    b8a4:	c8 2e       	mov	r12, r24
    b8a6:	8e e0       	ldi	r24, 0x0E	; 14
    b8a8:	d8 2e       	mov	r13, r24
    b8aa:	0f ec       	ldi	r16, 0xCF	; 207
    b8ac:	1e e0       	ldi	r17, 0x0E	; 14
    b8ae:	20 e1       	ldi	r18, 0x10	; 16
					if (!game.enemies[i].shot[j].active)
					{
						game.enemies[i].shot[j].active = 1;
						game.enemies[i].shot[j].shared.x = game.enemies[i].shared.x;
						game.enemies[i].shot[j].shared.y = ((u16 ) game.enemies[i].shared.y / 8) * 8;
						game.enemies[i].shot[j].shared.vx = ENEMY_SHOT_SPEED;
    b8b0:	94 e6       	ldi	r25, 0x64	; 100
    b8b2:	f9 2e       	mov	r15, r25
						if (game.player.shared.x <= game.enemies[i].shared.x)
						{
							game.enemies[i].shot[j].shared.vx = -ENEMY_SHOT_SPEED;
    b8b4:	3c e9       	ldi	r19, 0x9C	; 156
    b8b6:	e3 2e       	mov	r14, r19
    b8b8:	6f ef       	ldi	r22, 0xFF	; 255
    b8ba:	62 0f       	add	r22, r18
    b8bc:	f6 01       	movw	r30, r12
    b8be:	32 97       	sbiw	r30, 0x02	; 2
{
	u8 slot = ENEMY_SHOT_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (!(game.enemies[i].enemy_type == ENEMY_PROJECTILE_HAZARD) && game.enemies[i].active && game.enemies[i].shot_frame_count >= ENEMY_SHOT_DELAY_FRAMES)
    b8c0:	80 81       	ld	r24, Z
    b8c2:	35 97       	sbiw	r30, 0x05	; 5
    b8c4:	82 30       	cpi	r24, 0x02	; 2
    b8c6:	99 f1       	breq	.+102    	; 0xb92e <update_enemy_shots+0xa2>
    b8c8:	80 81       	ld	r24, Z
    b8ca:	88 23       	and	r24, r24
    b8cc:	81 f1       	breq	.+96     	; 0xb92e <update_enemy_shots+0xa2>
    b8ce:	d6 01       	movw	r26, r12
    b8d0:	8c 91       	ld	r24, X
    b8d2:	8c 33       	cpi	r24, 0x3C	; 60
    b8d4:	60 f1       	brcs	.+88     	; 0xb92e <update_enemy_shots+0xa2>
		{
			game.enemies[i].shot_frame_count = 0;	
    b8d6:	1c 92       	st	X, r1
    b8d8:	f8 01       	movw	r30, r16
    b8da:	32 97       	sbiw	r30, 0x02	; 2
			for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
			{
				if (game.enemies[i].shot[j].shot_type == BASIC_ENEMY_SHOT)
    b8dc:	80 81       	ld	r24, Z
    b8de:	81 30       	cpi	r24, 0x01	; 1
    b8e0:	69 f5       	brne	.+90     	; 0xb93c <update_enemy_shots+0xb0>
				{
					if (!game.enemies[i].shot[j].active)
    b8e2:	f8 01       	movw	r30, r16
    b8e4:	90 81       	ld	r25, Z
    b8e6:	91 11       	cpse	r25, r1
    b8e8:	1b c0       	rjmp	.+54     	; 0xb920 <update_enemy_shots+0x94>
					{
						game.enemies[i].shot[j].active = 1;
    b8ea:	80 83       	st	Z, r24
    b8ec:	f6 01       	movw	r30, r12
    b8ee:	3e 97       	sbiw	r30, 0x0e	; 14
						game.enemies[i].shot[j].shared.x = game.enemies[i].shared.x;
    b8f0:	40 81       	ld	r20, Z
    b8f2:	51 81       	ldd	r21, Z+1	; 0x01
    b8f4:	14 96       	adiw	r26, 0x04	; 4
    b8f6:	5c 93       	st	X, r21
    b8f8:	4e 93       	st	-X, r20
    b8fa:	13 97       	sbiw	r26, 0x03	; 3
    b8fc:	32 96       	adiw	r30, 0x02	; 2
						game.enemies[i].shot[j].shared.y = ((u16 ) game.enemies[i].shared.y / 8) * 8;
    b8fe:	80 81       	ld	r24, Z
    b900:	91 81       	ldd	r25, Z+1	; 0x01
    b902:	88 7f       	andi	r24, 0xF8	; 248
    b904:	f6 01       	movw	r30, r12
    b906:	96 83       	std	Z+6, r25	; 0x06
    b908:	85 83       	std	Z+5, r24	; 0x05
    b90a:	f8 01       	movw	r30, r16
    b90c:	34 97       	sbiw	r30, 0x04	; 4
						game.enemies[i].shot[j].shared.vx = ENEMY_SHOT_SPEED;
    b90e:	f0 82       	st	Z, r15
						if (game.player.shared.x <= game.enemies[i].shared.x)
    b910:	80 91 cd 0d 	lds	r24, 0x0DCD
    b914:	90 91 ce 0d 	lds	r25, 0x0DCE
    b918:	48 17       	cp	r20, r24
    b91a:	59 07       	cpc	r21, r25
    b91c:	08 f0       	brcs	.+2      	; 0xb920 <update_enemy_shots+0x94>
						{
							game.enemies[i].shot[j].shared.vx = -ENEMY_SHOT_SPEED;
    b91e:	e0 82       	st	Z, r14
						}
					}
					update_basic_shot(&game.enemies[i].shot[j], slot);
    b920:	c6 01       	movw	r24, r12
    b922:	03 96       	adiw	r24, 0x03	; 3
    b924:	29 83       	std	Y+1, r18	; 0x01
    b926:	0e 94 e8 5b 	call	0xb7d0	; 0xb7d0 <update_basic_shot>
    b92a:	29 81       	ldd	r18, Y+1	; 0x01
    b92c:	07 c0       	rjmp	.+14     	; 0xb93c <update_enemy_shots+0xb0>
				}
				slot += 1;
			}
		}
		else if (game.enemies[i].active)
    b92e:	80 81       	ld	r24, Z
    b930:	88 23       	and	r24, r24
    b932:	21 f0       	breq	.+8      	; 0xb93c <update_enemy_shots+0xb0>
		{
			game.enemies[i].shot_frame_count++;
    b934:	d6 01       	movw	r26, r12
    b936:	8c 91       	ld	r24, X
    b938:	8f 5f       	subi	r24, 0xFF	; 255
    b93a:	8c 93       	st	X, r24
    b93c:	2f 5f       	subi	r18, 0xFF	; 255
    b93e:	b3 e3       	ldi	r27, 0x33	; 51
    b940:	cb 0e       	add	r12, r27
    b942:	d1 1c       	adc	r13, r1
    b944:	0d 5c       	subi	r16, 0xCD	; 205
    b946:	1f 4f       	sbci	r17, 0xFF	; 255

void update_enemy_shots()
{
	u8 slot = ENEMY_SHOT_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    b948:	25 31       	cpi	r18, 0x15	; 21
    b94a:	09 f0       	breq	.+2      	; 0xb94e <update_enemy_shots+0xc2>
    b94c:	b5 cf       	rjmp	.-150    	; 0xb8b8 <update_enemy_shots+0x2c>
		else
		{
			slot += MAX_ENEMY_SHOTS;
		}
	}
}
    b94e:	0f 90       	pop	r0
    b950:	df 91       	pop	r29
    b952:	cf 91       	pop	r28
    b954:	1f 91       	pop	r17
    b956:	0f 91       	pop	r16
    b958:	ff 90       	pop	r15
    b95a:	ef 90       	pop	r14
    b95c:	df 90       	pop	r13
    b95e:	cf 90       	pop	r12
    b960:	08 95       	ret

0000b962 <animate_enemies>:

void animate_enemies()
{
    b962:	8f 92       	push	r8
    b964:	9f 92       	push	r9
    b966:	af 92       	push	r10
    b968:	bf 92       	push	r11
    b96a:	cf 92       	push	r12
    b96c:	df 92       	push	r13
    b96e:	ef 92       	push	r14
    b970:	0f 93       	push	r16
    b972:	1f 93       	push	r17
    b974:	cf 93       	push	r28
    b976:	df 93       	push	r29
    b978:	8f eb       	ldi	r24, 0xBF	; 191
    b97a:	a8 2e       	mov	r10, r24
    b97c:	8e e0       	ldi	r24, 0x0E	; 14
    b97e:	b8 2e       	mov	r11, r24
    b980:	c0 ec       	ldi	r28, 0xC0	; 192
    b982:	de e0       	ldi	r29, 0x0E	; 14
    b984:	95 eb       	ldi	r25, 0xB5	; 181
    b986:	c9 2e       	mov	r12, r25
    b988:	9e e0       	ldi	r25, 0x0E	; 14
    b98a:	d9 2e       	mov	r13, r25
    b98c:	81 2c       	mov	r8, r1
    b98e:	91 2c       	mov	r9, r1
	u8 slot = ENEMY_SLOT;
    b990:	19 e0       	ldi	r17, 0x09	; 9
    b992:	de 01       	movw	r26, r28
    b994:	14 97       	sbiw	r26, 0x04	; 4
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].active && !(game.enemies[i].flags & EXPLODING))
    b996:	8c 91       	ld	r24, X
    b998:	fe 01       	movw	r30, r28
    b99a:	33 97       	sbiw	r30, 0x03	; 3
    b99c:	88 23       	and	r24, r24
    b99e:	e9 f1       	breq	.+122    	; 0xba1a <animate_enemies+0xb8>
    b9a0:	80 81       	ld	r24, Z
    b9a2:	84 fd       	sbrc	r24, 4
    b9a4:	3a c0       	rjmp	.+116    	; 0xba1a <animate_enemies+0xb8>
		{
			if (game.enemies[i].shared.x < game.camera_x || game.enemies[i].shared.y < game.camera_y || game.enemies[i].shared.y > game.camera_y + CAMERA_HEIGHT*8)
    b9a6:	f6 01       	movw	r30, r12
    b9a8:	20 81       	ld	r18, Z
    b9aa:	31 81       	ldd	r19, Z+1	; 0x01
    b9ac:	80 91 af 0d 	lds	r24, 0x0DAF
    b9b0:	90 91 b0 0d 	lds	r25, 0x0DB0
    b9b4:	28 17       	cp	r18, r24
    b9b6:	39 07       	cpc	r19, r25
    b9b8:	68 f0       	brcs	.+26     	; 0xb9d4 <animate_enemies+0x72>
    b9ba:	22 81       	ldd	r18, Z+2	; 0x02
    b9bc:	33 81       	ldd	r19, Z+3	; 0x03
    b9be:	80 91 b7 0d 	lds	r24, 0x0DB7
    b9c2:	90 e0       	ldi	r25, 0x00	; 0
    b9c4:	28 17       	cp	r18, r24
    b9c6:	39 07       	cpc	r19, r25
    b9c8:	28 f0       	brcs	.+10     	; 0xb9d4 <animate_enemies+0x72>
    b9ca:	88 53       	subi	r24, 0x38	; 56
    b9cc:	9f 4f       	sbci	r25, 0xFF	; 255
    b9ce:	82 17       	cp	r24, r18
    b9d0:	93 07       	cpc	r25, r19
    b9d2:	60 f4       	brcc	.+24     	; 0xb9ec <animate_enemies+0x8a>
			{
				game.enemies[i].active = 0;
    b9d4:	1c 92       	st	X, r1
				game.active_enemies--;
    b9d6:	80 91 ca 0d 	lds	r24, 0x0DCA
    b9da:	81 50       	subi	r24, 0x01	; 1
    b9dc:	80 93 ca 0d 	sts	0x0DCA, r24
				LBMoveSprite(slot, OFF_SCREEN, 0, game.enemies[i].width, game.enemies[i].height);
    b9e0:	08 81       	ld	r16, Y
    b9e2:	f5 01       	movw	r30, r10
    b9e4:	20 81       	ld	r18, Z
    b9e6:	40 e0       	ldi	r20, 0x00	; 0
    b9e8:	60 ee       	ldi	r22, 0xE0	; 224
    b9ea:	26 c0       	rjmp	.+76     	; 0xba38 <animate_enemies+0xd6>
    b9ec:	c4 01       	movw	r24, r8
    b9ee:	81 55       	subi	r24, 0x51	; 81
    b9f0:	92 4f       	sbci	r25, 0xF2	; 242
    b9f2:	fc 01       	movw	r30, r24
    b9f4:	ee 5e       	subi	r30, 0xEE	; 238
    b9f6:	fe 4f       	sbci	r31, 0xFE	; 254
				game.player.shield = 0;
				game.player.flags = EXPLODING;
				return;
			}
#endif
			else if (game.enemies[i].enemy_type == ENEMY_PROJECTILE_HAZARD)
    b9f8:	20 81       	ld	r18, Z
    b9fa:	22 30       	cpi	r18, 0x02	; 2
    b9fc:	21 f4       	brne	.+8      	; 0xba06 <animate_enemies+0xa4>
    b9fe:	33 96       	adiw	r30, 0x03	; 3
			{
				animate_sprite(&game.enemies[i].shared, slot, game.enemies[i].width, game.enemies[i].height, 1, game.enemies[i].origin_tile);
    ba00:	e0 80       	ld	r14, Z
    ba02:	01 e0       	ldi	r16, 0x01	; 1
    ba04:	02 c0       	rjmp	.+4      	; 0xba0a <animate_enemies+0xa8>
			}
			else
			{
				animate_sprite(&game.enemies[i].shared, slot, game.enemies[i].width, game.enemies[i].height, 0, 0);
    ba06:	e1 2c       	mov	r14, r1
    ba08:	00 e0       	ldi	r16, 0x00	; 0
    ba0a:	28 81       	ld	r18, Y
    ba0c:	f5 01       	movw	r30, r10
    ba0e:	40 81       	ld	r20, Z
    ba10:	61 2f       	mov	r22, r17
    ba12:	c6 01       	movw	r24, r12
    ba14:	0e 94 dc 5a 	call	0xb5b8	; 0xb5b8 <animate_sprite>
    ba18:	12 c0       	rjmp	.+36     	; 0xba3e <animate_enemies+0xdc>
			}
		}
		else if (game.enemies[i].flags & EXPLODING)
    ba1a:	80 81       	ld	r24, Z
    ba1c:	84 ff       	sbrs	r24, 4
    ba1e:	0f c0       	rjmp	.+30     	; 0xba3e <animate_enemies+0xdc>
		{
			LBMoveSprite(slot, game.enemies[i].shared.x - game.camera_x, game.enemies[i].shared.y - game.camera_y, game.enemies[i].width, game.enemies[i].height);
    ba20:	f6 01       	movw	r30, r12
    ba22:	42 81       	ldd	r20, Z+2	; 0x02
    ba24:	80 91 b7 0d 	lds	r24, 0x0DB7
    ba28:	48 1b       	sub	r20, r24
    ba2a:	60 81       	ld	r22, Z
    ba2c:	80 91 af 0d 	lds	r24, 0x0DAF
    ba30:	68 1b       	sub	r22, r24
    ba32:	08 81       	ld	r16, Y
    ba34:	f5 01       	movw	r30, r10
    ba36:	20 81       	ld	r18, Z
    ba38:	81 2f       	mov	r24, r17
    ba3a:	0e 94 c5 50 	call	0xa18a	; 0xa18a <LBMoveSprite>
		}
		slot +=  game.enemies[i].width * game.enemies[i].height;
    ba3e:	98 81       	ld	r25, Y
    ba40:	f5 01       	movw	r30, r10
    ba42:	80 81       	ld	r24, Z
    ba44:	98 9f       	mul	r25, r24
    ba46:	10 0d       	add	r17, r0
    ba48:	11 24       	eor	r1, r1
    ba4a:	f3 e3       	ldi	r31, 0x33	; 51
    ba4c:	8f 0e       	add	r8, r31
    ba4e:	91 1c       	adc	r9, r1
    ba50:	83 e3       	ldi	r24, 0x33	; 51
    ba52:	a8 0e       	add	r10, r24
    ba54:	b1 1c       	adc	r11, r1
    ba56:	e3 96       	adiw	r28, 0x33	; 51
    ba58:	e3 e3       	ldi	r30, 0x33	; 51
    ba5a:	ce 0e       	add	r12, r30
    ba5c:	d1 1c       	adc	r13, r1

void animate_enemies()
{
	u8 slot = ENEMY_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    ba5e:	ff ef       	ldi	r31, 0xFF	; 255
    ba60:	8f 16       	cp	r8, r31
    ba62:	91 04       	cpc	r9, r1
    ba64:	09 f0       	breq	.+2      	; 0xba68 <animate_enemies+0x106>
    ba66:	95 cf       	rjmp	.-214    	; 0xb992 <animate_enemies+0x30>
		{
			LBMoveSprite(slot, game.enemies[i].shared.x - game.camera_x, game.enemies[i].shared.y - game.camera_y, game.enemies[i].width, game.enemies[i].height);
		}
		slot +=  game.enemies[i].width * game.enemies[i].height;
	}
}
    ba68:	df 91       	pop	r29
    ba6a:	cf 91       	pop	r28
    ba6c:	1f 91       	pop	r17
    ba6e:	0f 91       	pop	r16
    ba70:	ef 90       	pop	r14
    ba72:	df 90       	pop	r13
    ba74:	cf 90       	pop	r12
    ba76:	bf 90       	pop	r11
    ba78:	af 90       	pop	r10
    ba7a:	9f 90       	pop	r9
    ba7c:	8f 90       	pop	r8
    ba7e:	08 95       	ret

0000ba80 <animate_enemy_shots>:

void animate_enemy_shots()
{
    ba80:	6f 92       	push	r6
    ba82:	7f 92       	push	r7
    ba84:	8f 92       	push	r8
    ba86:	9f 92       	push	r9
    ba88:	af 92       	push	r10
    ba8a:	bf 92       	push	r11
    ba8c:	cf 92       	push	r12
    ba8e:	df 92       	push	r13
    ba90:	ef 92       	push	r14
    ba92:	ff 92       	push	r15
    ba94:	0f 93       	push	r16
    ba96:	1f 93       	push	r17
    ba98:	cf 93       	push	r28
    ba9a:	df 93       	push	r29
    ba9c:	46 ec       	ldi	r20, 0xC6	; 198
    ba9e:	84 2e       	mov	r8, r20
    baa0:	4e e0       	ldi	r20, 0x0E	; 14
    baa2:	94 2e       	mov	r9, r20
    baa4:	cf ec       	ldi	r28, 0xCF	; 207
    baa6:	de e0       	ldi	r29, 0x0E	; 14
	u8 slot = ENEMY_SHOT_SLOT;
    baa8:	1f e0       	ldi	r17, 0x0F	; 15
#endif
						if (game.player.shield <= 0)
						{
							SFX_PLAYER_EXPLODE;
							game.player.shield = 0;
							game.player.flags = EXPLODING;
    baaa:	50 e1       	ldi	r21, 0x10	; 16
    baac:	d5 2e       	mov	r13, r21
    baae:	fe 01       	movw	r30, r28
    bab0:	32 97       	sbiw	r30, 0x02	; 2
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
		{
			if (game.enemies[i].shot[j].shot_type == BASIC_ENEMY_SHOT)
    bab2:	80 81       	ld	r24, Z
    bab4:	81 30       	cpi	r24, 0x01	; 1
    bab6:	09 f0       	breq	.+2      	; 0xbaba <animate_enemy_shots+0x3a>
    bab8:	6a c0       	rjmp	.+212    	; 0xbb8e <animate_enemy_shots+0x10e>
			{
				if (game.enemies[i].shot[j].active)
    baba:	88 81       	ld	r24, Y
    babc:	88 23       	and	r24, r24
    babe:	09 f4       	brne	.+2      	; 0xbac2 <animate_enemy_shots+0x42>
    bac0:	66 c0       	rjmp	.+204    	; 0xbb8e <animate_enemy_shots+0x10e>
				{
					if (game.enemies[i].shot[j].shared.x < game.camera_x || game.enemies[i].shot[j].shared.x > game.camera_x + CAMERA_WIDTH*8 ||
    bac2:	f4 01       	movw	r30, r8
    bac4:	20 81       	ld	r18, Z
    bac6:	31 81       	ldd	r19, Z+1	; 0x01
    bac8:	80 91 af 0d 	lds	r24, 0x0DAF
    bacc:	90 91 b0 0d 	lds	r25, 0x0DB0
    bad0:	28 17       	cp	r18, r24
    bad2:	39 07       	cpc	r19, r25
    bad4:	08 f4       	brcc	.+2      	; 0xbad8 <animate_enemy_shots+0x58>
    bad6:	3e c0       	rjmp	.+124    	; 0xbb54 <animate_enemy_shots+0xd4>
    bad8:	80 52       	subi	r24, 0x20	; 32
    bada:	9f 4f       	sbci	r25, 0xFF	; 255
    badc:	82 17       	cp	r24, r18
    bade:	93 07       	cpc	r25, r19
    bae0:	c8 f1       	brcs	.+114    	; 0xbb54 <animate_enemy_shots+0xd4>
					   collision_detect_level(&game.enemies[i].shot[j].shared, 1, 1))
    bae2:	41 e0       	ldi	r20, 0x01	; 1
    bae4:	61 e0       	ldi	r22, 0x01	; 1
    bae6:	c4 01       	movw	r24, r8
    bae8:	0e 94 2f 57 	call	0xae5e	; 0xae5e <collision_detect_level>
		{
			if (game.enemies[i].shot[j].shot_type == BASIC_ENEMY_SHOT)
			{
				if (game.enemies[i].shot[j].active)
				{
					if (game.enemies[i].shot[j].shared.x < game.camera_x || game.enemies[i].shot[j].shared.x > game.camera_x + CAMERA_WIDTH*8 ||
    baec:	81 11       	cpse	r24, r1
    baee:	32 c0       	rjmp	.+100    	; 0xbb54 <animate_enemy_shots+0xd4>
					   collision_detect_level(&game.enemies[i].shot[j].shared, 1, 1))
					{
						game.enemies[i].shot[j].active = 0;
						LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
					}
					else if (LBCollides(game.player.shared.x-game.camera_x,game.player.shared.y, game.player.width*8, game.player.height*8,
    baf0:	f4 01       	movw	r30, r8
    baf2:	f2 80       	ldd	r15, Z+2	; 0x02
							game.enemies[i].shot[j].shared.x-game.camera_x, game.enemies[i].shot[j].shared.y, 8, 8
    baf4:	60 80       	ld	r6, Z
    baf6:	71 80       	ldd	r7, Z+1	; 0x01
					   collision_detect_level(&game.enemies[i].shot[j].shared, 1, 1))
					{
						game.enemies[i].shot[j].active = 0;
						LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
					}
					else if (LBCollides(game.player.shared.x-game.camera_x,game.player.shared.y, game.player.width*8, game.player.height*8,
    baf8:	b0 90 af 0d 	lds	r11, 0x0DAF
    bafc:	06 2d       	mov	r16, r6
    bafe:	0b 19       	sub	r16, r11
    bb00:	20 91 d9 0d 	lds	r18, 0x0DD9
    bb04:	22 0f       	add	r18, r18
    bb06:	22 0f       	add	r18, r18
    bb08:	22 0f       	add	r18, r18
    bb0a:	40 91 d8 0d 	lds	r20, 0x0DD8
    bb0e:	44 0f       	add	r20, r20
    bb10:	44 0f       	add	r20, r20
    bb12:	44 0f       	add	r20, r20
    bb14:	80 91 cd 0d 	lds	r24, 0x0DCD
    bb18:	98 e0       	ldi	r25, 0x08	; 8
    bb1a:	a9 2e       	mov	r10, r25
    bb1c:	38 e0       	ldi	r19, 0x08	; 8
    bb1e:	c3 2e       	mov	r12, r19
    bb20:	ef 2c       	mov	r14, r15
    bb22:	60 91 cf 0d 	lds	r22, 0x0DCF
    bb26:	8b 19       	sub	r24, r11
    bb28:	0e 94 24 50 	call	0xa048	; 0xa048 <LBCollides>
    bb2c:	88 23       	and	r24, r24
    bb2e:	c1 f0       	breq	.+48     	; 0xbb60 <animate_enemy_shots+0xe0>
							game.enemies[i].shot[j].shared.x-game.camera_x, game.enemies[i].shot[j].shared.y, 8, 8
						)
					)
					{
						SFX_HIT;
    bb30:	41 e0       	ldi	r20, 0x01	; 1
    bb32:	6f ef       	ldi	r22, 0xFF	; 255
    bb34:	84 e0       	ldi	r24, 0x04	; 4
    bb36:	0e 94 5d 43 	call	0x86ba	; 0x86ba <TriggerFx>
#if DEBUG_GODMODE
#else
						game.player.shield -= game.enemies[i].shot[j].hit_count;
#endif
						if (game.player.shield <= 0)
    bb3a:	80 91 db 0d 	lds	r24, 0x0DDB
    bb3e:	18 16       	cp	r1, r24
    bb40:	4c f0       	brlt	.+18     	; 0xbb54 <animate_enemy_shots+0xd4>
						{
							SFX_PLAYER_EXPLODE;
    bb42:	41 e0       	ldi	r20, 0x01	; 1
    bb44:	6f ef       	ldi	r22, 0xFF	; 255
    bb46:	85 e0       	ldi	r24, 0x05	; 5
    bb48:	0e 94 5d 43 	call	0x86ba	; 0x86ba <TriggerFx>
							game.player.shield = 0;
    bb4c:	10 92 db 0d 	sts	0x0DDB, r1
							game.player.flags = EXPLODING;
    bb50:	d0 92 d5 0d 	sts	0x0DD5, r13
						}
						game.enemies[i].shot[j].active = 0;
    bb54:	18 82       	st	Y, r1
						LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
    bb56:	01 e0       	ldi	r16, 0x01	; 1
    bb58:	21 e0       	ldi	r18, 0x01	; 1
    bb5a:	40 e0       	ldi	r20, 0x00	; 0
    bb5c:	60 ee       	ldi	r22, 0xE0	; 224
    bb5e:	14 c0       	rjmp	.+40     	; 0xbb88 <animate_enemy_shots+0x108>
					}
					else
					{
						game.enemies[i].shot[j].shared.x += LBMoveDelta(game.enemies[i].shot[j].shared.vx, game.frame_counter);
    bb60:	60 91 c9 0d 	lds	r22, 0x0DC9
    bb64:	fe 01       	movw	r30, r28
    bb66:	34 97       	sbiw	r30, 0x04	; 4
    bb68:	80 81       	ld	r24, Z
    bb6a:	0e 94 e2 4e 	call	0x9dc4	; 0x9dc4 <LBMoveDelta>
    bb6e:	68 0e       	add	r6, r24
    bb70:	79 1e       	adc	r7, r25
    bb72:	f4 01       	movw	r30, r8
    bb74:	71 82       	std	Z+1, r7	; 0x01
    bb76:	60 82       	st	Z, r6
						LBMoveSprite(slot, game.enemies[i].shot[j].shared.x - game.camera_x, game.enemies[i].shot[j].shared.y - game.camera_y, 1, 1);
    bb78:	80 91 b7 0d 	lds	r24, 0x0DB7
    bb7c:	4f 2d       	mov	r20, r15
    bb7e:	48 1b       	sub	r20, r24
    bb80:	66 2d       	mov	r22, r6
    bb82:	6b 19       	sub	r22, r11
    bb84:	01 e0       	ldi	r16, 0x01	; 1
    bb86:	21 e0       	ldi	r18, 0x01	; 1
    bb88:	81 2f       	mov	r24, r17
    bb8a:	0e 94 c5 50 	call	0xa18a	; 0xa18a <LBMoveSprite>
					}
				}
			}
			slot += 1;
    bb8e:	1f 5f       	subi	r17, 0xFF	; 255
    bb90:	f3 e3       	ldi	r31, 0x33	; 51
    bb92:	8f 0e       	add	r8, r31
    bb94:	91 1c       	adc	r9, r1
    bb96:	e3 96       	adiw	r28, 0x33	; 51

void animate_enemy_shots()
{
	u8 slot = ENEMY_SHOT_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    bb98:	14 31       	cpi	r17, 0x14	; 20
    bb9a:	09 f0       	breq	.+2      	; 0xbb9e <animate_enemy_shots+0x11e>
    bb9c:	88 cf       	rjmp	.-240    	; 0xbaae <animate_enemy_shots+0x2e>
				}
			}
			slot += 1;
		}
	}
}
    bb9e:	df 91       	pop	r29
    bba0:	cf 91       	pop	r28
    bba2:	1f 91       	pop	r17
    bba4:	0f 91       	pop	r16
    bba6:	ff 90       	pop	r15
    bba8:	ef 90       	pop	r14
    bbaa:	df 90       	pop	r13
    bbac:	cf 90       	pop	r12
    bbae:	bf 90       	pop	r11
    bbb0:	af 90       	pop	r10
    bbb2:	9f 90       	pop	r9
    bbb4:	8f 90       	pop	r8
    bbb6:	7f 90       	pop	r7
    bbb8:	6f 90       	pop	r6
    bbba:	08 95       	ret

0000bbbc <clear_sprites>:
	}
	
}

void clear_sprites(u8 from, u8 count)
{
    bbbc:	ef 92       	push	r14
    bbbe:	ff 92       	push	r15
    bbc0:	0f 93       	push	r16
    bbc2:	cf 93       	push	r28
	for(u8 i = from; i < from+count; i++)
    bbc4:	c8 2f       	mov	r28, r24
    bbc6:	e6 2e       	mov	r14, r22
    bbc8:	f1 2c       	mov	r15, r1
    bbca:	e8 0e       	add	r14, r24
    bbcc:	f1 1c       	adc	r15, r1
    bbce:	8c 2f       	mov	r24, r28
    bbd0:	90 e0       	ldi	r25, 0x00	; 0
    bbd2:	8e 15       	cp	r24, r14
    bbd4:	9f 05       	cpc	r25, r15
    bbd6:	7c f4       	brge	.+30     	; 0xbbf6 <clear_sprites+0x3a>
	{
		LBMapSprite(i, map_none, 0);
    bbd8:	40 e0       	ldi	r20, 0x00	; 0
    bbda:	6e e9       	ldi	r22, 0x9E	; 158
    bbdc:	76 e3       	ldi	r23, 0x36	; 54
    bbde:	8c 2f       	mov	r24, r28
    bbe0:	0e 94 73 50 	call	0xa0e6	; 0xa0e6 <LBMapSprite>
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
    bbe4:	01 e0       	ldi	r16, 0x01	; 1
    bbe6:	21 e0       	ldi	r18, 0x01	; 1
    bbe8:	40 e0       	ldi	r20, 0x00	; 0
    bbea:	60 ee       	ldi	r22, 0xE0	; 224
    bbec:	8c 2f       	mov	r24, r28
    bbee:	0e 94 c5 50 	call	0xa18a	; 0xa18a <LBMoveSprite>
	
}

void clear_sprites(u8 from, u8 count)
{
	for(u8 i = from; i < from+count; i++)
    bbf2:	cf 5f       	subi	r28, 0xFF	; 255
    bbf4:	ec cf       	rjmp	.-40     	; 0xbbce <clear_sprites+0x12>
	{
		LBMapSprite(i, map_none, 0);
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
	}
}
    bbf6:	cf 91       	pop	r28
    bbf8:	0f 91       	pop	r16
    bbfa:	ff 90       	pop	r15
    bbfc:	ef 90       	pop	r14
    bbfe:	08 95       	ret

0000bc00 <fade_through>:
	EepromWriteBlock(block);
}

void fade_through()
{
	FadeOut(FRAMES_PER_FADE, true);
    bc00:	61 e0       	ldi	r22, 0x01	; 1
    bc02:	81 e0       	ldi	r24, 0x01	; 1
    bc04:	0e 94 ad 4e 	call	0x9d5a	; 0x9d5a <FadeOut>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    bc08:	64 e1       	ldi	r22, 0x14	; 20
    bc0a:	80 e0       	ldi	r24, 0x00	; 0
    bc0c:	0e 94 de 5d 	call	0xbbbc	; 0xbbbc <clear_sprites>
	LBRotateSprites();
    bc10:	0e 94 03 51 	call	0xa206	; 0xa206 <LBRotateSprites>
	ClearVram();
    bc14:	0e 94 7e 3f 	call	0x7efc	; 0x7efc <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    bc18:	60 e0       	ldi	r22, 0x00	; 0
    bc1a:	81 e0       	ldi	r24, 0x01	; 1
    bc1c:	0c 94 a1 4e 	jmp	0x9d42	; 0x9d42 <FadeIn>

0000bc20 <load_level>:
	game.level_width = pgm_read_byte(&level[0])*MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH;
	game.level_height = pgm_read_byte(&level[1])*MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
}

void load_level(u8 index, u8 drop_ship)
{	
    bc20:	0f 93       	push	r16
    bc22:	cf 93       	push	r28
    bc24:	df 93       	push	r29
    bc26:	c8 2f       	mov	r28, r24
    bc28:	d6 2f       	mov	r29, r22
	u8 ship_x = (get_hero_spawn_x(index) - 2) * 8;
	u8 ship_y = 0;
	char ship_increment = 3;
	
	Screen.scrollX = 0;
    bc2a:	10 92 b2 0c 	sts	0x0CB2, r1
	Screen.scrollY = 0;
    bc2e:	10 92 b3 0c 	sts	0x0CB3, r1
	Screen.scrollHeight = 29;
    bc32:	8d e1       	ldi	r24, 0x1D	; 29
    bc34:	80 93 b4 0c 	sts	0x0CB4, r24
	Screen.overlayTileTable = tiles_data;
    bc38:	81 ea       	ldi	r24, 0xA1	; 161
    bc3a:	96 e3       	ldi	r25, 0x36	; 54
    bc3c:	90 93 b1 0c 	sts	0x0CB1, r25
    bc40:	80 93 b0 0c 	sts	0x0CB0, r24
	Screen.overlayHeight = 3;
    bc44:	83 e0       	ldi	r24, 0x03	; 3
    bc46:	80 93 af 0c 	sts	0x0CAF, r24
	clear_overlay(2);
    bc4a:	82 e0       	ldi	r24, 0x02	; 2
    bc4c:	0e 94 16 54 	call	0xa82c	; 0xa82c <clear_overlay>
	game.current_level_index = index;
    bc50:	c0 93 c4 0d 	sts	0x0DC4, r28
	game.level_ended = 0;
    bc54:	10 92 cc 0d 	sts	0x0DCC, r1
void LBResetJoyPadState(JoyPadState* p)
/*
 * Get the current joy pad button state for index controller
 */
{
	p->held = 0;
    bc58:	10 92 3f 0e 	sts	0x0E3F, r1
    bc5c:	10 92 3e 0e 	sts	0x0E3E, r1
	p->pressed = 0;
    bc60:	10 92 3b 0e 	sts	0x0E3B, r1
    bc64:	10 92 3a 0e 	sts	0x0E3A, r1
	p->released = 0;
    bc68:	10 92 3d 0e 	sts	0x0E3D, r1
    bc6c:	10 92 3c 0e 	sts	0x0E3C, r1
	p->held_cycles = 0;
    bc70:	10 92 40 0e 	sts	0x0E40, r1
void LBResetJoyPadState(JoyPadState* p)
/*
 * Get the current joy pad button state for index controller
 */
{
	p->held = 0;
    bc74:	10 92 b3 0e 	sts	0x0EB3, r1
    bc78:	10 92 b2 0e 	sts	0x0EB2, r1
	p->pressed = 0;
    bc7c:	10 92 af 0e 	sts	0x0EAF, r1
    bc80:	10 92 ae 0e 	sts	0x0EAE, r1
	p->released = 0;
    bc84:	10 92 b1 0e 	sts	0x0EB1, r1
    bc88:	10 92 b0 0e 	sts	0x0EB0, r1
	p->held_cycles = 0;
    bc8c:	10 92 b4 0e 	sts	0x0EB4, r1
	LBResetJoyPadState(&game.player.controls);
	LBResetJoyPadState(&game.boss.controls);
	switch (index)
    bc90:	8c 2f       	mov	r24, r28
    bc92:	90 e0       	ldi	r25, 0x00	; 0
    bc94:	8a 30       	cpi	r24, 0x0A	; 10
    bc96:	91 05       	cpc	r25, r1
    bc98:	c0 f4       	brcc	.+48     	; 0xbcca <load_level+0xaa>
    bc9a:	fc 01       	movw	r30, r24
    bc9c:	e8 5c       	subi	r30, 0xC8	; 200
    bc9e:	ff 4f       	sbci	r31, 0xFF	; 255
    bca0:	0c 94 b3 69 	jmp	0xd366	; 0xd366 <__tablejump2__>
	{
		case 0: map_level_info((char*) map_level_ice); break;
    bca4:	82 e3       	ldi	r24, 0x32	; 50
    bca6:	93 e7       	ldi	r25, 0x73	; 115
    bca8:	0e c0       	rjmp	.+28     	; 0xbcc6 <load_level+0xa6>
		case 1: map_level_info((char*) map_level_space); break;
		case 2: map_level_info((char*) map_level_fire); break;
    bcaa:	81 e3       	ldi	r24, 0x31	; 49
    bcac:	92 e7       	ldi	r25, 0x72	; 114
    bcae:	0b c0       	rjmp	.+22     	; 0xbcc6 <load_level+0xa6>
		case 3: map_level_info((char*) map_level_space); break;
		case 4: map_level_info((char*) map_level_forest); break;
    bcb0:	80 e3       	ldi	r24, 0x30	; 48
    bcb2:	91 e7       	ldi	r25, 0x71	; 113
    bcb4:	08 c0       	rjmp	.+16     	; 0xbcc6 <load_level+0xa6>
		case 5: map_level_info((char*) map_level_space); break;
		case 6: map_level_info((char*) map_level_city); break;
    bcb6:	8f e2       	ldi	r24, 0x2F	; 47
    bcb8:	90 e7       	ldi	r25, 0x70	; 112
    bcba:	05 c0       	rjmp	.+10     	; 0xbcc6 <load_level+0xa6>
		case 7: map_level_info((char*) map_level_space); break;
		case 8: map_level_info((char*) map_level_desert); break;
    bcbc:	8e e2       	ldi	r24, 0x2E	; 46
    bcbe:	9f e6       	ldi	r25, 0x6F	; 111
    bcc0:	02 c0       	rjmp	.+4      	; 0xbcc6 <load_level+0xa6>
		case 9: map_level_info((char*) map_level_space); break;
    bcc2:	8d e2       	ldi	r24, 0x2D	; 45
    bcc4:	9e e6       	ldi	r25, 0x6E	; 110
    bcc6:	0e 94 0c 56 	call	0xac18	; 0xac18 <map_level_info>
	}
	game.column_count = 0;
    bcca:	10 92 c0 0d 	sts	0x0DC0, r1
	game.camera_x = get_camera_x(index);
    bcce:	10 92 b0 0d 	sts	0x0DB0, r1
    bcd2:	10 92 af 0d 	sts	0x0DAF, r1
	game.camera_y = get_camera_y(index);
    bcd6:	10 92 b7 0d 	sts	0x0DB7, r1
	game.player.shared.x = get_hero_spawn_x(index)*8;
    bcda:	88 e1       	ldi	r24, 0x18	; 24
    bcdc:	90 e0       	ldi	r25, 0x00	; 0
    bcde:	90 93 ce 0d 	sts	0x0DCE, r25
    bce2:	80 93 cd 0d 	sts	0x0DCD, r24
	game.player.shared.y = get_hero_spawn_y(index)*8;
    bce6:	88 ea       	ldi	r24, 0xA8	; 168
    bce8:	90 e0       	ldi	r25, 0x00	; 0
    bcea:	90 93 d0 0d 	sts	0x0DD0, r25
    bcee:	80 93 cf 0d 	sts	0x0DCF, r24
	game.boss.shared.x = get_boss_spawn_x(index)*8;
    bcf2:	28 ed       	ldi	r18, 0xD8	; 216
    bcf4:	37 e0       	ldi	r19, 0x07	; 7
    bcf6:	30 93 42 0e 	sts	0x0E42, r19
    bcfa:	20 93 41 0e 	sts	0x0E41, r18
	game.boss.shared.y = get_boss_spawn_y(index)*8;
    bcfe:	90 93 44 0e 	sts	0x0E44, r25
    bd02:	80 93 43 0e 	sts	0x0E43, r24
	game.camera_x *= 8;
	game.camera_y *= 8;
	game.scroll_src_x = game.camera_x / 8 + CAMERA_WIDTH + 1;
    bd06:	8d e1       	ldi	r24, 0x1D	; 29
    bd08:	80 93 b8 0d 	sts	0x0DB8, r24
    game.scroll_dest_x = game.camera_x / 8 + CAMERA_WIDTH + 1;
    bd0c:	80 93 bc 0d 	sts	0x0DBC, r24
	game.scroll_src_y = game.camera_y / 8 + CAMERA_HEIGHT + 1;
    bd10:	8a e1       	ldi	r24, 0x1A	; 26
    bd12:	80 93 b9 0d 	sts	0x0DB9, r24
    game.scroll_dest_y =  game.camera_y / 8 + CAMERA_HEIGHT + 1;
    bd16:	80 93 bd 0d 	sts	0x0DBD, r24
	game.scroll_x = 0;
    bd1a:	10 92 ba 0d 	sts	0x0DBA, r1
	game.scroll_y = 0;
    bd1e:	10 92 bb 0d 	sts	0x0DBB, r1
	game.spawn_rate = BASE_SPAWN_RATE;
    bd22:	8a e0       	ldi	r24, 0x0A	; 10
    bd24:	80 93 cb 0d 	sts	0x0DCB, r24
	render_camera_view();
    bd28:	0e 94 56 54 	call	0xa8ac	; 0xa8ac <render_camera_view>
	LBPrint(0, VRAM_TILES_V-3, (char*) strShield);
    bd2c:	44 e0       	ldi	r20, 0x04	; 4
    bd2e:	5b e0       	ldi	r21, 0x0B	; 11
    bd30:	6d e1       	ldi	r22, 0x1D	; 29
    bd32:	80 e0       	ldi	r24, 0x00	; 0
    bd34:	0e 94 9e 4f 	call	0x9f3c	; 0x9f3c <LBPrint>
	LBPrint(18, VRAM_TILES_V-3, (char*) strTime);
    bd38:	47 ef       	ldi	r20, 0xF7	; 247
    bd3a:	5a e0       	ldi	r21, 0x0A	; 10
    bd3c:	6d e1       	ldi	r22, 0x1D	; 29
    bd3e:	82 e1       	ldi	r24, 0x12	; 18
    bd40:	0e 94 9e 4f 	call	0x9f3c	; 0x9f3c <LBPrint>
	LBPrint(0, VRAM_TILES_V-2, (char*) strLives);
    bd44:	4d ef       	ldi	r20, 0xFD	; 253
    bd46:	5a e0       	ldi	r21, 0x0A	; 10
    bd48:	6e e1       	ldi	r22, 0x1E	; 30
    bd4a:	80 e0       	ldi	r24, 0x00	; 0
    bd4c:	0e 94 9e 4f 	call	0x9f3c	; 0x9f3c <LBPrint>
	LBPrint(17, VRAM_TILES_V-2, (char*) strScore);
    bd50:	4c e0       	ldi	r20, 0x0C	; 12
    bd52:	5b e0       	ldi	r21, 0x0B	; 11
    bd54:	6e e1       	ldi	r22, 0x1E	; 30
    bd56:	81 e1       	ldi	r24, 0x11	; 17
    bd58:	0e 94 9e 4f 	call	0x9f3c	; 0x9f3c <LBPrint>
	LBPrint(17, VRAM_TILES_V-1, (char*) strTally);
    bd5c:	46 eb       	ldi	r20, 0xB6	; 182
    bd5e:	5a e0       	ldi	r21, 0x0A	; 10
    bd60:	6f e1       	ldi	r22, 0x1F	; 31
    bd62:	81 e1       	ldi	r24, 0x11	; 17
    bd64:	0e 94 9e 4f 	call	0x9f3c	; 0x9f3c <LBPrint>
	
	LBPrintByte(9, VRAM_TILES_V-3, game.player.shield ,true);
    bd68:	21 e0       	ldi	r18, 0x01	; 1
    bd6a:	40 91 db 0d 	lds	r20, 0x0DDB
    bd6e:	6d e1       	ldi	r22, 0x1D	; 29
    bd70:	89 e0       	ldi	r24, 0x09	; 9
    bd72:	0e 94 ba 4f 	call	0x9f74	; 0x9f74 <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-3, game.time ,true);
    bd76:	40 91 b5 0d 	lds	r20, 0x0DB5
    bd7a:	50 91 b6 0d 	lds	r21, 0x0DB6
    bd7e:	21 e0       	ldi	r18, 0x01	; 1
    bd80:	6d e1       	ldi	r22, 0x1D	; 29
    bd82:	8b e1       	ldi	r24, 0x1B	; 27
    bd84:	0e 94 eb 4f 	call	0x9fd6	; 0x9fd6 <LBPrintInt>
	LBPrintByte(9, VRAM_TILES_V-2, game.lives ,true);
    bd88:	21 e0       	ldi	r18, 0x01	; 1
    bd8a:	40 91 c2 0d 	lds	r20, 0x0DC2
    bd8e:	6e e1       	ldi	r22, 0x1E	; 30
    bd90:	89 e0       	ldi	r24, 0x09	; 9
    bd92:	0e 94 ba 4f 	call	0x9f74	; 0x9f74 <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-2, game.level_score ,true);
    bd96:	40 91 b3 0d 	lds	r20, 0x0DB3
    bd9a:	50 91 b4 0d 	lds	r21, 0x0DB4
    bd9e:	21 e0       	ldi	r18, 0x01	; 1
    bda0:	6e e1       	ldi	r22, 0x1E	; 30
    bda2:	8b e1       	ldi	r24, 0x1B	; 27
    bda4:	0e 94 eb 4f 	call	0x9fd6	; 0x9fd6 <LBPrintInt>
	LBPrintInt(27, VRAM_TILES_V-1, game.score ,true);
    bda8:	40 91 b1 0d 	lds	r20, 0x0DB1
    bdac:	50 91 b2 0d 	lds	r21, 0x0DB2
    bdb0:	21 e0       	ldi	r18, 0x01	; 1
    bdb2:	6f e1       	ldi	r22, 0x1F	; 31
    bdb4:	8b e1       	ldi	r24, 0x1B	; 27
    bdb6:	0e 94 eb 4f 	call	0x9fd6	; 0x9fd6 <LBPrintInt>
	
	
	if (!is_space() && drop_ship)
    bdba:	0e 94 37 51 	call	0xa26e	; 0xa26e <is_space>
    bdbe:	81 11       	cpse	r24, r1
    bdc0:	39 c0       	rjmp	.+114    	; 0xbe34 <load_level+0x214>
    bdc2:	dd 23       	and	r29, r29
    bdc4:	b9 f1       	breq	.+110    	; 0xbe34 <load_level+0x214>
	{
		map_ship();
    bdc6:	0e 94 f7 55 	call	0xabee	; 0xabee <map_ship>

void load_level(u8 index, u8 drop_ship)
{	
	u8 ship_x = (get_hero_spawn_x(index) - 2) * 8;
	u8 ship_y = 0;
	char ship_increment = 3;
    bdca:	d3 e0       	ldi	r29, 0x03	; 3
}

void load_level(u8 index, u8 drop_ship)
{	
	u8 ship_x = (get_hero_spawn_x(index) - 2) * 8;
	u8 ship_y = 0;
    bdcc:	c0 e0       	ldi	r28, 0x00	; 0
	if (!is_space() && drop_ship)
	{
		map_ship();
		while (1)
		{
			WaitVsync(1);
    bdce:	81 e0       	ldi	r24, 0x01	; 1
    bdd0:	90 e0       	ldi	r25, 0x00	; 0
    bdd2:	0e 94 45 4e 	call	0x9c8a	; 0x9c8a <WaitVsync>
			if (ship_y >= get_hero_spawn_y(index)*8)
    bdd6:	8c 2f       	mov	r24, r28
    bdd8:	90 e0       	ldi	r25, 0x00	; 0
    bdda:	88 3a       	cpi	r24, 0xA8	; 168
    bddc:	91 05       	cpc	r25, r1
    bdde:	74 f0       	brlt	.+28     	; 0xbdfc <load_level+0x1dc>
			{
				LBMapSprite(0, map_hero_idle, 0);
    bde0:	40 e0       	ldi	r20, 0x00	; 0
    bde2:	62 e7       	ldi	r22, 0x72	; 114
    bde4:	76 e3       	ldi	r23, 0x36	; 54
    bde6:	80 e0       	ldi	r24, 0x00	; 0
    bde8:	0e 94 73 50 	call	0xa0e6	; 0xa0e6 <LBMapSprite>
				LBMoveSprite(0, get_hero_spawn_x(index)*8, get_hero_spawn_y(index)*8, 2, 3);
    bdec:	03 e0       	ldi	r16, 0x03	; 3
    bdee:	22 e0       	ldi	r18, 0x02	; 2
    bdf0:	48 ea       	ldi	r20, 0xA8	; 168
    bdf2:	68 e1       	ldi	r22, 0x18	; 24
    bdf4:	80 e0       	ldi	r24, 0x00	; 0
    bdf6:	0e 94 c5 50 	call	0xa18a	; 0xa18a <LBMoveSprite>
				ship_increment = -3;
    bdfa:	dd ef       	ldi	r29, 0xFD	; 253
			}
			LBMapSprite(6, LBGetNextFrame(&game.player.run), 0);
    bdfc:	8a e1       	ldi	r24, 0x1A	; 26
    bdfe:	9e e0       	ldi	r25, 0x0E	; 14
    be00:	0e 94 0d 4f 	call	0x9e1a	; 0x9e1a <LBGetNextFrame>
    be04:	40 e0       	ldi	r20, 0x00	; 0
    be06:	bc 01       	movw	r22, r24
    be08:	86 e0       	ldi	r24, 0x06	; 6
    be0a:	0e 94 73 50 	call	0xa0e6	; 0xa0e6 <LBMapSprite>
			LBMoveSprite(6, ship_x, ship_y, 4, 2);
    be0e:	02 e0       	ldi	r16, 0x02	; 2
    be10:	24 e0       	ldi	r18, 0x04	; 4
    be12:	4c 2f       	mov	r20, r28
    be14:	68 e0       	ldi	r22, 0x08	; 8
    be16:	86 e0       	ldi	r24, 0x06	; 6
    be18:	0e 94 c5 50 	call	0xa18a	; 0xa18a <LBMoveSprite>
			ship_y += ship_increment;
    be1c:	cd 0f       	add	r28, r29
			if (ship_y == 0)
    be1e:	39 f4       	brne	.+14     	; 0xbe2e <load_level+0x20e>
			{
				clear_sprites(6, 8);
    be20:	68 e0       	ldi	r22, 0x08	; 8
    be22:	86 e0       	ldi	r24, 0x06	; 6
				break;
			}
			LBRotateSprites();
		}
	}
}
    be24:	df 91       	pop	r29
    be26:	cf 91       	pop	r28
    be28:	0f 91       	pop	r16
			LBMapSprite(6, LBGetNextFrame(&game.player.run), 0);
			LBMoveSprite(6, ship_x, ship_y, 4, 2);
			ship_y += ship_increment;
			if (ship_y == 0)
			{
				clear_sprites(6, 8);
    be2a:	0c 94 de 5d 	jmp	0xbbbc	; 0xbbbc <clear_sprites>
				break;
			}
			LBRotateSprites();
    be2e:	0e 94 03 51 	call	0xa206	; 0xa206 <LBRotateSprites>
		}
    be32:	cd cf       	rjmp	.-102    	; 0xbdce <load_level+0x1ae>
	}
}
    be34:	df 91       	pop	r29
    be36:	cf 91       	pop	r28
    be38:	0f 91       	pop	r16
    be3a:	08 95       	ret

0000be3c <hide_sprites>:
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
	}
}

void hide_sprites(u8 from, u8 count)
{
    be3c:	0f 93       	push	r16
    be3e:	1f 93       	push	r17
    be40:	cf 93       	push	r28
    be42:	df 93       	push	r29
	for(u8 i = from; i < from+count; i++)
    be44:	18 2f       	mov	r17, r24
    be46:	c6 2f       	mov	r28, r22
    be48:	d0 e0       	ldi	r29, 0x00	; 0
    be4a:	c8 0f       	add	r28, r24
    be4c:	d1 1d       	adc	r29, r1
    be4e:	81 2f       	mov	r24, r17
    be50:	90 e0       	ldi	r25, 0x00	; 0
    be52:	8c 17       	cp	r24, r28
    be54:	9d 07       	cpc	r25, r29
    be56:	4c f4       	brge	.+18     	; 0xbe6a <hide_sprites+0x2e>
	{
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
    be58:	01 e0       	ldi	r16, 0x01	; 1
    be5a:	21 e0       	ldi	r18, 0x01	; 1
    be5c:	40 e0       	ldi	r20, 0x00	; 0
    be5e:	60 ee       	ldi	r22, 0xE0	; 224
    be60:	81 2f       	mov	r24, r17
    be62:	0e 94 c5 50 	call	0xa18a	; 0xa18a <LBMoveSprite>
	}
}

void hide_sprites(u8 from, u8 count)
{
	for(u8 i = from; i < from+count; i++)
    be66:	1f 5f       	subi	r17, 0xFF	; 255
    be68:	f2 cf       	rjmp	.-28     	; 0xbe4e <hide_sprites+0x12>
	{
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
	}
}
    be6a:	df 91       	pop	r29
    be6c:	cf 91       	pop	r28
    be6e:	1f 91       	pop	r17
    be70:	0f 91       	pop	r16
    be72:	08 95       	ret

0000be74 <select_pressed>:
	StopSong();
	load_high_scores();
}

char select_pressed(JoyPadState* p)
{
    be74:	fc 01       	movw	r30, r24
    be76:	20 81       	ld	r18, Z
    be78:	31 81       	ldd	r19, Z+1	; 0x01
    be7a:	28 70       	andi	r18, 0x08	; 8
    be7c:	31 70       	andi	r19, 0x01	; 1
	return (p->pressed & BTN_A) || (p->pressed & BTN_START);
    be7e:	81 e0       	ldi	r24, 0x01	; 1
    be80:	23 2b       	or	r18, r19
    be82:	09 f4       	brne	.+2      	; 0xbe86 <select_pressed+0x12>
    be84:	80 e0       	ldi	r24, 0x00	; 0
}
    be86:	08 95       	ret

0000be88 <stream_text_middle>:


void stream_text_middle(const char* dialogue, u8 y)
{
    be88:	ff 92       	push	r15
    be8a:	0f 93       	push	r16
    be8c:	1f 93       	push	r17
    be8e:	cf 93       	push	r28
    be90:	df 93       	push	r29
    be92:	ec 01       	movw	r28, r24
    be94:	16 2f       	mov	r17, r22
	u8 x, ln, c;
	
	while (pgm_read_byte(dialogue) != '#')
	{
		ln = strnlen_P(dialogue, 255);
		x = 14 - ln / 2;
    be96:	8e e0       	ldi	r24, 0x0E	; 14
    be98:	f8 2e       	mov	r15, r24

void stream_text_middle(const char* dialogue, u8 y)
{
	u8 x, ln, c;
	
	while (pgm_read_byte(dialogue) != '#')
    be9a:	fe 01       	movw	r30, r28
    be9c:	84 91       	lpm	r24, Z
    be9e:	83 32       	cpi	r24, 0x23	; 35
    bea0:	21 f1       	breq	.+72     	; 0xbeea <stream_text_middle+0x62>
	{
		ln = strnlen_P(dialogue, 255);
    bea2:	6f ef       	ldi	r22, 0xFF	; 255
    bea4:	70 e0       	ldi	r23, 0x00	; 0
    bea6:	ce 01       	movw	r24, r28
    bea8:	0e 94 40 6b 	call	0xd680	; 0xd680 <strnlen_P>
		x = 14 - ln / 2;
    beac:	86 95       	lsr	r24
    beae:	0f 2d       	mov	r16, r15
    beb0:	08 1b       	sub	r16, r24
    beb2:	0c 1b       	sub	r16, r28
    beb4:	8c 2f       	mov	r24, r28
    beb6:	80 0f       	add	r24, r16
		while ((c = pgm_read_byte(dialogue++)))
    beb8:	21 96       	adiw	r28, 0x01	; 1
    beba:	fe 01       	movw	r30, r28
    bebc:	31 97       	sbiw	r30, 0x01	; 1
    bebe:	44 91       	lpm	r20, Z
    bec0:	44 23       	and	r20, r20
    bec2:	89 f0       	breq	.+34     	; 0xbee6 <stream_text_middle+0x5e>
		{
			LBPrintChar(x++, y, c);
    bec4:	61 2f       	mov	r22, r17
    bec6:	0e 94 7e 4f 	call	0x9efc	; 0x9efc <LBPrintChar>
			LBGetJoyPadState(&game.player.controls, 0);
    beca:	60 e0       	ldi	r22, 0x00	; 0
    becc:	8a e3       	ldi	r24, 0x3A	; 58
    bece:	9e e0       	ldi	r25, 0x0E	; 14
    bed0:	0e 94 33 4f 	call	0x9e66	; 0x9e66 <LBGetJoyPadState>
			if (!(game.player.controls.held & BTN_B)) WaitUs(CHARACTER_DELAY_US);
    bed4:	80 91 3e 0e 	lds	r24, 0x0E3E
    bed8:	80 fd       	sbrc	r24, 0
    beda:	ec cf       	rjmp	.-40     	; 0xbeb4 <stream_text_middle+0x2c>
    bedc:	80 e7       	ldi	r24, 0x70	; 112
    bede:	97 e1       	ldi	r25, 0x17	; 23
    bee0:	0e 94 b4 3f 	call	0x7f68	; 0x7f68 <WaitUs>
    bee4:	e7 cf       	rjmp	.-50     	; 0xbeb4 <stream_text_middle+0x2c>
		}
		y++;
    bee6:	1f 5f       	subi	r17, 0xFF	; 255
    bee8:	d8 cf       	rjmp	.-80     	; 0xbe9a <stream_text_middle+0x12>
	}
}
    beea:	df 91       	pop	r29
    beec:	cf 91       	pop	r28
    beee:	1f 91       	pop	r17
    bef0:	0f 91       	pop	r16
    bef2:	ff 90       	pop	r15
    bef4:	08 95       	ret

0000bef6 <stream_text_anywhere>:

void stream_text_anywhere(const char* dialogue, u8 x, u8 y)
{
    bef6:	ff 92       	push	r15
    bef8:	0f 93       	push	r16
    befa:	1f 93       	push	r17
    befc:	cf 93       	push	r28
    befe:	df 93       	push	r29
    bf00:	f6 2e       	mov	r15, r22
    bf02:	14 2f       	mov	r17, r20
	u8 ln, c;
	u8 cursor = x; 
	
	while (pgm_read_byte(dialogue) != '#')
    bf04:	fc 01       	movw	r30, r24
    bf06:	24 91       	lpm	r18, Z
    bf08:	23 32       	cpi	r18, 0x23	; 35
    bf0a:	b1 f0       	breq	.+44     	; 0xbf38 <stream_text_anywhere+0x42>
    bf0c:	ec 01       	movw	r28, r24
    bf0e:	0f 2d       	mov	r16, r15
    bf10:	08 1b       	sub	r16, r24
    bf12:	8c 2f       	mov	r24, r28
    bf14:	80 0f       	add	r24, r16
	{
		ln = strnlen_P(dialogue, 255);
		while ((c = pgm_read_byte(dialogue++)))
    bf16:	21 96       	adiw	r28, 0x01	; 1
    bf18:	fe 01       	movw	r30, r28
    bf1a:	31 97       	sbiw	r30, 0x01	; 1
    bf1c:	44 91       	lpm	r20, Z
    bf1e:	44 23       	and	r20, r20
    bf20:	41 f0       	breq	.+16     	; 0xbf32 <stream_text_anywhere+0x3c>
		{
			LBPrintChar(cursor++, y, c);
    bf22:	61 2f       	mov	r22, r17
    bf24:	0e 94 7e 4f 	call	0x9efc	; 0x9efc <LBPrintChar>
			WaitUs(CHARACTER_DELAY_US);
    bf28:	80 e7       	ldi	r24, 0x70	; 112
    bf2a:	97 e1       	ldi	r25, 0x17	; 23
    bf2c:	0e 94 b4 3f 	call	0x7f68	; 0x7f68 <WaitUs>
    bf30:	f0 cf       	rjmp	.-32     	; 0xbf12 <stream_text_anywhere+0x1c>
		}
		y++;
    bf32:	1f 5f       	subi	r17, 0xFF	; 255
	u8 cursor = x; 
	
	while (pgm_read_byte(dialogue) != '#')
	{
		ln = strnlen_P(dialogue, 255);
		while ((c = pgm_read_byte(dialogue++)))
    bf34:	ce 01       	movw	r24, r28
    bf36:	e6 cf       	rjmp	.-52     	; 0xbf04 <stream_text_anywhere+0xe>
			WaitUs(CHARACTER_DELAY_US);
		}
		y++;
		cursor = x;
	}
}
    bf38:	df 91       	pop	r29
    bf3a:	cf 91       	pop	r28
    bf3c:	1f 91       	pop	r17
    bf3e:	0f 91       	pop	r16
    bf40:	ff 90       	pop	r15
    bf42:	08 95       	ret

0000bf44 <map_particles>:

void map_particles()
{
    bf44:	cf 93       	push	r28
	for (u8 i = 9; i < 20; i++)
    bf46:	c9 e0       	ldi	r28, 0x09	; 9
	{
		LBMapSprite(i, map_particle, 0);
    bf48:	40 e0       	ldi	r20, 0x00	; 0
    bf4a:	62 e9       	ldi	r22, 0x92	; 146
    bf4c:	76 e3       	ldi	r23, 0x36	; 54
    bf4e:	8c 2f       	mov	r24, r28
    bf50:	0e 94 73 50 	call	0xa0e6	; 0xa0e6 <LBMapSprite>
	}
}

void map_particles()
{
	for (u8 i = 9; i < 20; i++)
    bf54:	cf 5f       	subi	r28, 0xFF	; 255
    bf56:	c4 31       	cpi	r28, 0x14	; 20
    bf58:	b9 f7       	brne	.-18     	; 0xbf48 <map_particles+0x4>
	{
		LBMapSprite(i, map_particle, 0);
	}
}
    bf5a:	cf 91       	pop	r28
    bf5c:	08 95       	ret

0000bf5e <place_particles>:

void place_particles()
{
    bf5e:	0f 93       	push	r16
    bf60:	1f 93       	push	r17
    bf62:	cf 93       	push	r28
    bf64:	df 93       	push	r29
    bf66:	1f 92       	push	r1
    bf68:	cd b7       	in	r28, 0x3d	; 61
    bf6a:	de b7       	in	r29, 0x3e	; 62
	for (u8 i = 9; i < 20; i++)
    bf6c:	19 e0       	ldi	r17, 0x09	; 9
	{
		LBMoveSprite(i, LBRandom(0, 224), LBRandom(0, 200), 1, 1);
    bf6e:	68 ec       	ldi	r22, 0xC8	; 200
    bf70:	80 e0       	ldi	r24, 0x00	; 0
    bf72:	0e 94 4e 50 	call	0xa09c	; 0xa09c <LBRandom>
    bf76:	48 2f       	mov	r20, r24
    bf78:	60 ee       	ldi	r22, 0xE0	; 224
    bf7a:	80 e0       	ldi	r24, 0x00	; 0
    bf7c:	49 83       	std	Y+1, r20	; 0x01
    bf7e:	0e 94 4e 50 	call	0xa09c	; 0xa09c <LBRandom>
    bf82:	68 2f       	mov	r22, r24
    bf84:	01 e0       	ldi	r16, 0x01	; 1
    bf86:	21 e0       	ldi	r18, 0x01	; 1
    bf88:	49 81       	ldd	r20, Y+1	; 0x01
    bf8a:	81 2f       	mov	r24, r17
    bf8c:	0e 94 c5 50 	call	0xa18a	; 0xa18a <LBMoveSprite>
	}
}

void place_particles()
{
	for (u8 i = 9; i < 20; i++)
    bf90:	1f 5f       	subi	r17, 0xFF	; 255
    bf92:	14 31       	cpi	r17, 0x14	; 20
    bf94:	61 f7       	brne	.-40     	; 0xbf6e <place_particles+0x10>
	{
		LBMoveSprite(i, LBRandom(0, 224), LBRandom(0, 200), 1, 1);
	}
}
    bf96:	0f 90       	pop	r0
    bf98:	df 91       	pop	r29
    bf9a:	cf 91       	pop	r28
    bf9c:	1f 91       	pop	r17
    bf9e:	0f 91       	pop	r16
    bfa0:	08 95       	ret

0000bfa2 <animate_particles>:

void animate_particles(char dy, u8 oy)
{
    bfa2:	ef 92       	push	r14
    bfa4:	ff 92       	push	r15
    bfa6:	0f 93       	push	r16
    bfa8:	1f 93       	push	r17
    bfaa:	cf 93       	push	r28
    bfac:	df 93       	push	r29
    bfae:	d8 2f       	mov	r29, r24
    bfb0:	16 2f       	mov	r17, r22
    bfb2:	83 ee       	ldi	r24, 0xE3	; 227
    bfb4:	e8 2e       	mov	r14, r24
    bfb6:	8f e0       	ldi	r24, 0x0F	; 15
    bfb8:	f8 2e       	mov	r15, r24
	for (u8 i = 9; i < 20; i++)
    bfba:	c9 e0       	ldi	r28, 0x09	; 9
	{
		LBMoveSprite(i, extendedSprites[i].x, extendedSprites[i].y+dy, 1, 1);
    bfbc:	f7 01       	movw	r30, r14
    bfbe:	40 81       	ld	r20, Z
    bfc0:	4d 0f       	add	r20, r29
    bfc2:	01 e0       	ldi	r16, 0x01	; 1
    bfc4:	21 e0       	ldi	r18, 0x01	; 1
    bfc6:	31 97       	sbiw	r30, 0x01	; 1
    bfc8:	60 81       	ld	r22, Z
    bfca:	8c 2f       	mov	r24, r28
    bfcc:	0e 94 c5 50 	call	0xa18a	; 0xa18a <LBMoveSprite>
		if (extendedSprites[i].y > 200)
    bfd0:	f7 01       	movw	r30, r14
    bfd2:	80 81       	ld	r24, Z
    bfd4:	89 3c       	cpi	r24, 0xC9	; 201
    bfd6:	50 f0       	brcs	.+20     	; 0xbfec <animate_particles+0x4a>
		{
			LBMoveSprite(i, LBRandom(0, 224), oy, 1, 1);
    bfd8:	60 ee       	ldi	r22, 0xE0	; 224
    bfda:	80 e0       	ldi	r24, 0x00	; 0
    bfdc:	0e 94 4e 50 	call	0xa09c	; 0xa09c <LBRandom>
    bfe0:	21 e0       	ldi	r18, 0x01	; 1
    bfe2:	41 2f       	mov	r20, r17
    bfe4:	68 2f       	mov	r22, r24
    bfe6:	8c 2f       	mov	r24, r28
    bfe8:	0e 94 c5 50 	call	0xa18a	; 0xa18a <LBMoveSprite>
	}
}

void animate_particles(char dy, u8 oy)
{
	for (u8 i = 9; i < 20; i++)
    bfec:	cf 5f       	subi	r28, 0xFF	; 255
    bfee:	f4 e0       	ldi	r31, 0x04	; 4
    bff0:	ef 0e       	add	r14, r31
    bff2:	f1 1c       	adc	r15, r1
    bff4:	c4 31       	cpi	r28, 0x14	; 20
    bff6:	11 f7       	brne	.-60     	; 0xbfbc <animate_particles+0x1a>
		if (extendedSprites[i].y > 200)
		{
			LBMoveSprite(i, LBRandom(0, 224), oy, 1, 1);
		}
	}
}
    bff8:	df 91       	pop	r29
    bffa:	cf 91       	pop	r28
    bffc:	1f 91       	pop	r17
    bffe:	0f 91       	pop	r16
    c000:	ff 90       	pop	r15
    c002:	ef 90       	pop	r14
    c004:	08 95       	ret

0000c006 <get_emarald_map>:

const char* get_emarald_map(u8 index)
{
    c006:	82 50       	subi	r24, 0x02	; 2
    c008:	87 30       	cpi	r24, 0x07	; 7
    c00a:	48 f4       	brcc	.+18     	; 0xc01e <get_emarald_map+0x18>
    c00c:	e8 2f       	mov	r30, r24
    c00e:	f0 e0       	ldi	r31, 0x00	; 0
    c010:	ee 0f       	add	r30, r30
    c012:	ff 1f       	adc	r31, r31
    c014:	ee 5f       	subi	r30, 0xFE	; 254
    c016:	fa 4f       	sbci	r31, 0xFA	; 250
    c018:	80 81       	ld	r24, Z
    c01a:	91 81       	ldd	r25, Z+1	; 0x01
    c01c:	08 95       	ret
    c01e:	86 e8       	ldi	r24, 0x86	; 134
    c020:	96 e3       	ldi	r25, 0x36	; 54
		case 4: return map_emerald_2;
		case 6: return map_emerald_3;
		case 8: return map_emerald_4;
		default: return map_emerald_0;
	}
}
    c022:	08 95       	ret

0000c024 <music_transition>:

void music_transition()
{
	if (is_space())
    c024:	0e 94 37 51 	call	0xa26e	; 0xa26e <is_space>
    c028:	88 23       	and	r24, r24
    c02a:	19 f0       	breq	.+6      	; 0xc032 <music_transition+0xe>
	{
		StartSong(spacesong);
    c02c:	83 e5       	ldi	r24, 0x53	; 83
    c02e:	9b e0       	ldi	r25, 0x0B	; 11
    c030:	06 c0       	rjmp	.+12     	; 0xc03e <music_transition+0x1a>
	}
	else if (game.current_level_index != 0)
    c032:	80 91 c4 0d 	lds	r24, 0x0DC4
    c036:	88 23       	and	r24, r24
    c038:	21 f0       	breq	.+8      	; 0xc042 <music_transition+0x1e>
	{
		StartSong(planetsong);
    c03a:	83 ef       	ldi	r24, 0xF3	; 243
    c03c:	91 e1       	ldi	r25, 0x11	; 17
    c03e:	0c 94 72 42 	jmp	0x84e4	; 0x84e4 <StartSong>
    c042:	08 95       	ret

0000c044 <planet_transition>:
	}
}

void planet_transition(u8 index, char scroll, char atmosphere_height, char dy, u8 oy)
{
    c044:	cf 92       	push	r12
    c046:	df 92       	push	r13
    c048:	ef 92       	push	r14
    c04a:	ff 92       	push	r15
    c04c:	0f 93       	push	r16
    c04e:	1f 93       	push	r17
    c050:	cf 93       	push	r28
    c052:	df 93       	push	r29
    c054:	1f 92       	push	r1
    c056:	cd b7       	in	r28, 0x3d	; 61
    c058:	de b7       	in	r29, 0x3e	; 62
    c05a:	c8 2e       	mov	r12, r24
    c05c:	e6 2e       	mov	r14, r22
    c05e:	12 2f       	mov	r17, r18
    c060:	f0 2e       	mov	r15, r16
	u8 frame_counter = 0;
	
	fade_through();
    c062:	49 83       	std	Y+1, r20	; 0x01
    c064:	0e 94 00 5e 	call	0xbc00	; 0xbc00 <fade_through>
	Screen.scrollX = 0;
    c068:	10 92 b2 0c 	sts	0x0CB2, r1
	Screen.scrollY = 0;
    c06c:	10 92 b3 0c 	sts	0x0CB3, r1
	Screen.scrollHeight = 32;
    c070:	80 e2       	ldi	r24, 0x20	; 32
    c072:	80 93 b4 0c 	sts	0x0CB4, r24
	Screen.overlayHeight = 0;
    c076:	10 92 af 0c 	sts	0x0CAF, r1
	game.scroll_x = 0;
    c07a:	10 92 ba 0d 	sts	0x0DBA, r1
	game.scroll_y = 0;
    c07e:	10 92 bb 0d 	sts	0x0DBB, r1
	map_particles();
    c082:	0e 94 a2 5f 	call	0xbf44	; 0xbf44 <map_particles>
	map_ship();
    c086:	0e 94 f7 55 	call	0xabee	; 0xabee <map_ship>
	place_particles();
    c08a:	0e 94 af 5f 	call	0xbf5e	; 0xbf5e <place_particles>
	DrawMap2(0, atmosphere_height, map_atmosphere);
    c08e:	48 e8       	ldi	r20, 0x88	; 136
    c090:	5e e5       	ldi	r21, 0x5E	; 94
    c092:	69 81       	ldd	r22, Y+1	; 0x01
    c094:	80 e0       	ldi	r24, 0x00	; 0
    c096:	0e 94 dc 4d 	call	0x9bb8	; 0x9bb8 <DrawMap>
	game.current_level_index = index;
    c09a:	c0 92 c4 0d 	sts	0x0DC4, r12
	music_transition();
    c09e:	0e 94 12 60 	call	0xc024	; 0xc024 <music_transition>
	if (!is_space())
    c0a2:	0e 94 37 51 	call	0xa26e	; 0xa26e <is_space>
    c0a6:	81 11       	cpse	r24, r1
    c0a8:	0f c0       	rjmp	.+30     	; 0xc0c8 <planet_transition+0x84>
	{
		LBMapSprite(8, get_emarald_map(index), 0);
    c0aa:	8c 2d       	mov	r24, r12
    c0ac:	0e 94 03 60 	call	0xc006	; 0xc006 <get_emarald_map>
    c0b0:	40 e0       	ldi	r20, 0x00	; 0
    c0b2:	bc 01       	movw	r22, r24
    c0b4:	88 e0       	ldi	r24, 0x08	; 8
    c0b6:	0e 94 73 50 	call	0xa0e6	; 0xa0e6 <LBMapSprite>
		LBMoveSprite(8, 112, 48, 1, 1);
    c0ba:	01 e0       	ldi	r16, 0x01	; 1
    c0bc:	21 e0       	ldi	r18, 0x01	; 1
    c0be:	40 e3       	ldi	r20, 0x30	; 48
    c0c0:	60 e7       	ldi	r22, 0x70	; 112
    c0c2:	88 e0       	ldi	r24, 0x08	; 8
    c0c4:	0e 94 c5 50 	call	0xa18a	; 0xa18a <LBMoveSprite>
		StartSong(planetsong);
	}
}

void planet_transition(u8 index, char scroll, char atmosphere_height, char dy, u8 oy)
{
    c0c8:	d1 2c       	mov	r13, r1
		LBMoveSprite(8, 112, 48, 1, 1);
	}
	
	while (frame_counter < 255)
	{
		WaitVsync(1);
    c0ca:	81 e0       	ldi	r24, 0x01	; 1
    c0cc:	90 e0       	ldi	r25, 0x00	; 0
    c0ce:	0e 94 45 4e 	call	0x9c8a	; 0x9c8a <WaitVsync>
		LBMapSprite(0, LBGetNextFrame(&game.player.run), 0);
    c0d2:	8a e1       	ldi	r24, 0x1A	; 26
    c0d4:	9e e0       	ldi	r25, 0x0E	; 14
    c0d6:	0e 94 0d 4f 	call	0x9e1a	; 0x9e1a <LBGetNextFrame>
    c0da:	40 e0       	ldi	r20, 0x00	; 0
    c0dc:	bc 01       	movw	r22, r24
    c0de:	80 e0       	ldi	r24, 0x00	; 0
    c0e0:	0e 94 73 50 	call	0xa0e6	; 0xa0e6 <LBMapSprite>
		LBMoveSprite(0, 104, 104, 4, 2);
    c0e4:	02 e0       	ldi	r16, 0x02	; 2
    c0e6:	24 e0       	ldi	r18, 0x04	; 4
    c0e8:	48 e6       	ldi	r20, 0x68	; 104
    c0ea:	68 e6       	ldi	r22, 0x68	; 104
    c0ec:	80 e0       	ldi	r24, 0x00	; 0
    c0ee:	0e 94 c5 50 	call	0xa18a	; 0xa18a <LBMoveSprite>
		frame_counter++;
    c0f2:	d3 94       	inc	r13
		if (frame_counter % 16 == 0) Screen.scrollY += scroll;
    c0f4:	8d 2d       	mov	r24, r13
    c0f6:	8f 70       	andi	r24, 0x0F	; 15
    c0f8:	29 f4       	brne	.+10     	; 0xc104 <planet_transition+0xc0>
    c0fa:	90 91 b3 0c 	lds	r25, 0x0CB3
    c0fe:	9e 0d       	add	r25, r14
    c100:	90 93 b3 0c 	sts	0x0CB3, r25
		animate_particles(dy, oy);
    c104:	6f 2d       	mov	r22, r15
    c106:	81 2f       	mov	r24, r17
    c108:	0e 94 d1 5f 	call	0xbfa2	; 0xbfa2 <animate_particles>
		LBRotateSprites();
    c10c:	0e 94 03 51 	call	0xa206	; 0xa206 <LBRotateSprites>
	{
		LBMapSprite(8, get_emarald_map(index), 0);
		LBMoveSprite(8, 112, 48, 1, 1);
	}
	
	while (frame_counter < 255)
    c110:	8f ef       	ldi	r24, 0xFF	; 255
    c112:	d8 12       	cpse	r13, r24
    c114:	da cf       	rjmp	.-76     	; 0xc0ca <planet_transition+0x86>
		frame_counter++;
		if (frame_counter % 16 == 0) Screen.scrollY += scroll;
		animate_particles(dy, oy);
		LBRotateSprites();
	}
	game.current_screen = LEVEL;
    c116:	82 e0       	ldi	r24, 0x02	; 2
    c118:	80 93 c3 0d 	sts	0x0DC3, r24
	ClearVram();
    c11c:	0e 94 7e 3f 	call	0x7efc	; 0x7efc <ClearVram>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    c120:	64 e1       	ldi	r22, 0x14	; 20
    c122:	80 e0       	ldi	r24, 0x00	; 0
    c124:	0e 94 de 5d 	call	0xbbbc	; 0xbbbc <clear_sprites>
	LBRotateSprites();
    c128:	0e 94 03 51 	call	0xa206	; 0xa206 <LBRotateSprites>
	fade_through();
    c12c:	0e 94 00 5e 	call	0xbc00	; 0xbc00 <fade_through>
	game.level_score = 0;
    c130:	10 92 b4 0d 	sts	0x0DB4, r1
    c134:	10 92 b3 0d 	sts	0x0DB3, r1
	load_level(index, true);
    c138:	61 e0       	ldi	r22, 0x01	; 1
    c13a:	8c 2d       	mov	r24, r12
    c13c:	0e 94 10 5e 	call	0xbc20	; 0xbc20 <load_level>
	init_player_state();
    c140:	0e 94 24 52 	call	0xa448	; 0xa448 <init_player_state>
	init_boss_state();
    c144:	0e 94 63 51 	call	0xa2c6	; 0xa2c6 <init_boss_state>
	init_enemy_state();
}
    c148:	0f 90       	pop	r0
    c14a:	df 91       	pop	r29
    c14c:	cf 91       	pop	r28
    c14e:	1f 91       	pop	r17
    c150:	0f 91       	pop	r16
    c152:	ff 90       	pop	r15
    c154:	ef 90       	pop	r14
    c156:	df 90       	pop	r13
    c158:	cf 90       	pop	r12
	fade_through();
	game.level_score = 0;
	load_level(index, true);
	init_player_state();
	init_boss_state();
	init_enemy_state();
    c15a:	0c 94 51 51 	jmp	0xa2a2	; 0xa2a2 <init_enemy_state>

0000c15e <intro>:
}


void intro()
{
    c15e:	0f 93       	push	r16
	fade_through();
    c160:	0e 94 00 5e 	call	0xbc00	; 0xbc00 <fade_through>
	game.lives = LIVES;
    c164:	ef ea       	ldi	r30, 0xAF	; 175
    c166:	fd e0       	ldi	r31, 0x0D	; 13
    c168:	85 e0       	ldi	r24, 0x05	; 5
    c16a:	83 8b       	std	Z+19, r24	; 0x13
	game.score = 0;
    c16c:	13 82       	std	Z+3, r1	; 0x03
    c16e:	12 82       	std	Z+2, r1	; 0x02
	game.level_score = 0;
    c170:	15 82       	std	Z+5, r1	; 0x05
    c172:	14 82       	std	Z+4, r1	; 0x04
	game.time = 0;
    c174:	17 82       	std	Z+7, r1	; 0x07
    c176:	16 82       	std	Z+6, r1	; 0x06
	StartSong(planetsong);
    c178:	83 ef       	ldi	r24, 0xF3	; 243
    c17a:	91 e1       	ldi	r25, 0x11	; 17
    c17c:	0e 94 72 42 	call	0x84e4	; 0x84e4 <StartSong>
	LBMapSprite(0, map_emerald_0, 0);
    c180:	40 e0       	ldi	r20, 0x00	; 0
    c182:	66 e8       	ldi	r22, 0x86	; 134
    c184:	76 e3       	ldi	r23, 0x36	; 54
    c186:	80 e0       	ldi	r24, 0x00	; 0
    c188:	0e 94 73 50 	call	0xa0e6	; 0xa0e6 <LBMapSprite>
	LBMoveSprite(0, 80, 48, 1, 1);
    c18c:	01 e0       	ldi	r16, 0x01	; 1
    c18e:	21 e0       	ldi	r18, 0x01	; 1
    c190:	40 e3       	ldi	r20, 0x30	; 48
    c192:	60 e5       	ldi	r22, 0x50	; 80
    c194:	80 e0       	ldi	r24, 0x00	; 0
    c196:	0e 94 c5 50 	call	0xa18a	; 0xa18a <LBMoveSprite>
	LBMapSprite(1, map_emerald_1, 0);
    c19a:	40 e0       	ldi	r20, 0x00	; 0
    c19c:	63 e8       	ldi	r22, 0x83	; 131
    c19e:	76 e3       	ldi	r23, 0x36	; 54
    c1a0:	81 e0       	ldi	r24, 0x01	; 1
    c1a2:	0e 94 73 50 	call	0xa0e6	; 0xa0e6 <LBMapSprite>
	LBMoveSprite(1, 96, 48, 1, 1);
    c1a6:	21 e0       	ldi	r18, 0x01	; 1
    c1a8:	40 e3       	ldi	r20, 0x30	; 48
    c1aa:	60 e6       	ldi	r22, 0x60	; 96
    c1ac:	81 e0       	ldi	r24, 0x01	; 1
    c1ae:	0e 94 c5 50 	call	0xa18a	; 0xa18a <LBMoveSprite>
	LBMapSprite(2, map_emerald_2, 0);
    c1b2:	40 e0       	ldi	r20, 0x00	; 0
    c1b4:	60 e8       	ldi	r22, 0x80	; 128
    c1b6:	76 e3       	ldi	r23, 0x36	; 54
    c1b8:	82 e0       	ldi	r24, 0x02	; 2
    c1ba:	0e 94 73 50 	call	0xa0e6	; 0xa0e6 <LBMapSprite>
	LBMoveSprite(2, 112, 48, 1, 1);
    c1be:	21 e0       	ldi	r18, 0x01	; 1
    c1c0:	40 e3       	ldi	r20, 0x30	; 48
    c1c2:	60 e7       	ldi	r22, 0x70	; 112
    c1c4:	82 e0       	ldi	r24, 0x02	; 2
    c1c6:	0e 94 c5 50 	call	0xa18a	; 0xa18a <LBMoveSprite>
	LBMapSprite(3, map_emerald_3, 0);
    c1ca:	40 e0       	ldi	r20, 0x00	; 0
    c1cc:	6d e7       	ldi	r22, 0x7D	; 125
    c1ce:	76 e3       	ldi	r23, 0x36	; 54
    c1d0:	83 e0       	ldi	r24, 0x03	; 3
    c1d2:	0e 94 73 50 	call	0xa0e6	; 0xa0e6 <LBMapSprite>
	LBMoveSprite(3, 128, 48, 1, 1);
    c1d6:	21 e0       	ldi	r18, 0x01	; 1
    c1d8:	40 e3       	ldi	r20, 0x30	; 48
    c1da:	60 e8       	ldi	r22, 0x80	; 128
    c1dc:	83 e0       	ldi	r24, 0x03	; 3
    c1de:	0e 94 c5 50 	call	0xa18a	; 0xa18a <LBMoveSprite>
	LBMapSprite(4, map_emerald_4, 0);
    c1e2:	40 e0       	ldi	r20, 0x00	; 0
    c1e4:	6a e7       	ldi	r22, 0x7A	; 122
    c1e6:	76 e3       	ldi	r23, 0x36	; 54
    c1e8:	84 e0       	ldi	r24, 0x04	; 4
    c1ea:	0e 94 73 50 	call	0xa0e6	; 0xa0e6 <LBMapSprite>
	LBMoveSprite(4, 144, 48, 1, 1);
    c1ee:	21 e0       	ldi	r18, 0x01	; 1
    c1f0:	40 e3       	ldi	r20, 0x30	; 48
    c1f2:	60 e9       	ldi	r22, 0x90	; 144
    c1f4:	84 e0       	ldi	r24, 0x04	; 4
    c1f6:	0e 94 c5 50 	call	0xa18a	; 0xa18a <LBMoveSprite>
	LBRotateSprites();
    c1fa:	0e 94 03 51 	call	0xa206	; 0xa206 <LBRotateSprites>
	stream_text_middle((const char*) strIntro, 12);
    c1fe:	6c e0       	ldi	r22, 0x0C	; 12
    c200:	83 ef       	ldi	r24, 0xF3	; 243
    c202:	99 e0       	ldi	r25, 0x09	; 9
    c204:	0e 94 44 5f 	call	0xbe88	; 0xbe88 <stream_text_middle>
	LBWaitSeconds(1);
    c208:	81 e0       	ldi	r24, 0x01	; 1
    c20a:	0e 94 64 50 	call	0xa0c8	; 0xa0c8 <LBWaitSeconds>
	planet_transition(0, 1, 28, -3, 199);
    c20e:	07 ec       	ldi	r16, 0xC7	; 199
    c210:	2d ef       	ldi	r18, 0xFD	; 253
    c212:	4c e1       	ldi	r20, 0x1C	; 28
    c214:	61 e0       	ldi	r22, 0x01	; 1
    c216:	80 e0       	ldi	r24, 0x00	; 0
    c218:	0e 94 22 60 	call	0xc044	; 0xc044 <planet_transition>
}
    c21c:	0f 91       	pop	r16
    c21e:	08 95       	ret

0000c220 <load_splash>:

void load_splash()
{
	fade_through();
    c220:	0e 94 00 5e 	call	0xbc00	; 0xbc00 <fade_through>
	Screen.scrollX = 0;
    c224:	ef ea       	ldi	r30, 0xAF	; 175
    c226:	fc e0       	ldi	r31, 0x0C	; 12
    c228:	13 82       	std	Z+3, r1	; 0x03
	Screen.scrollY = 0;
    c22a:	14 82       	std	Z+4, r1	; 0x04
	Screen.scrollHeight = 32;
    c22c:	80 e2       	ldi	r24, 0x20	; 32
    c22e:	85 83       	std	Z+5, r24	; 0x05
	Screen.overlayHeight = 0;
    c230:	10 82       	st	Z, r1
	game.current_screen = SPLASH;
    c232:	ef ea       	ldi	r30, 0xAF	; 175
    c234:	fd e0       	ldi	r31, 0x0D	; 13
    c236:	14 8a       	std	Z+20, r1	; 0x14
	game.selection = START_SELECTED;
    c238:	11 8e       	std	Z+25, r1	; 0x19
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    c23a:	64 e1       	ldi	r22, 0x14	; 20
    c23c:	80 e0       	ldi	r24, 0x00	; 0
    c23e:	0e 94 de 5d 	call	0xbbbc	; 0xbbbc <clear_sprites>
	LBRotateSprites();
    c242:	0e 94 03 51 	call	0xa206	; 0xa206 <LBRotateSprites>
	LBPrint(8, 15, (char*) str1Player);
    c246:	40 e2       	ldi	r20, 0x20	; 32
    c248:	5b e0       	ldi	r21, 0x0B	; 11
    c24a:	6f e0       	ldi	r22, 0x0F	; 15
    c24c:	88 e0       	ldi	r24, 0x08	; 8
    c24e:	0e 94 9e 4f 	call	0x9f3c	; 0x9f3c <LBPrint>
	LBPrint(8, 16, (char*) strHighScores);
    c252:	44 e1       	ldi	r20, 0x14	; 20
    c254:	5b e0       	ldi	r21, 0x0B	; 11
    c256:	60 e1       	ldi	r22, 0x10	; 16
    c258:	88 e0       	ldi	r24, 0x08	; 8
    c25a:	0e 94 9e 4f 	call	0x9f3c	; 0x9f3c <LBPrint>
	LBPrint(4, 21, (char*) strCopyright);
    c25e:	4e e3       	ldi	r20, 0x3E	; 62
    c260:	5b e0       	ldi	r21, 0x0B	; 11
    c262:	65 e1       	ldi	r22, 0x15	; 21
    c264:	84 e0       	ldi	r24, 0x04	; 4
    c266:	0e 94 9e 4f 	call	0x9f3c	; 0x9f3c <LBPrint>
	LBPrint(3, 26, (char*) strMusic);
    c26a:	46 e2       	ldi	r20, 0x26	; 38
    c26c:	5b e0       	ldi	r21, 0x0B	; 11
    c26e:	6a e1       	ldi	r22, 0x1A	; 26
    c270:	83 e0       	ldi	r24, 0x03	; 3
    c272:	0e 94 9e 4f 	call	0x9f3c	; 0x9f3c <LBPrint>
	DrawMap2(6, 5, map_splash);
    c276:	4d ea       	ldi	r20, 0xAD	; 173
    c278:	5f e5       	ldi	r21, 0x5F	; 95
    c27a:	65 e0       	ldi	r22, 0x05	; 5
    c27c:	86 e0       	ldi	r24, 0x06	; 6
    c27e:	0e 94 dc 4d 	call	0x9bb8	; 0x9bb8 <DrawMap>
	LBMapSprite(0, map_right_arrow, 0);
    c282:	40 e0       	ldi	r20, 0x00	; 0
    c284:	6b e9       	ldi	r22, 0x9B	; 155
    c286:	76 e3       	ldi	r23, 0x36	; 54
    c288:	80 e0       	ldi	r24, 0x00	; 0
    c28a:	0c 94 73 50 	jmp	0xa0e6	; 0xa0e6 <LBMapSprite>

0000c28e <load_high_scores>:
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
	}
}

void load_high_scores()
{
    c28e:	2f 92       	push	r2
    c290:	3f 92       	push	r3
    c292:	5f 92       	push	r5
    c294:	6f 92       	push	r6
    c296:	7f 92       	push	r7
    c298:	8f 92       	push	r8
    c29a:	9f 92       	push	r9
    c29c:	af 92       	push	r10
    c29e:	bf 92       	push	r11
    c2a0:	cf 92       	push	r12
    c2a2:	df 92       	push	r13
    c2a4:	ef 92       	push	r14
    c2a6:	ff 92       	push	r15
    c2a8:	0f 93       	push	r16
    c2aa:	1f 93       	push	r17
    c2ac:	cf 93       	push	r28
    c2ae:	df 93       	push	r29
	u16 score = 0;
	u8 ypos = 7;
	
	game.current_screen = HIGH_SCORES;
    c2b0:	81 e0       	ldi	r24, 0x01	; 1
    c2b2:	80 93 c3 0d 	sts	0x0DC3, r24
	game.high_score_index = -1;
    c2b6:	8f ef       	ldi	r24, 0xFF	; 255
    c2b8:	80 93 c1 0d 	sts	0x0DC1, r24
	fade_through();
    c2bc:	0e 94 00 5e 	call	0xbc00	; 0xbc00 <fade_through>
	Screen.scrollX = 0;
    c2c0:	10 92 b2 0c 	sts	0x0CB2, r1
	Screen.scrollY = 0;
    c2c4:	10 92 b3 0c 	sts	0x0CB3, r1
	Screen.scrollHeight = 32;
    c2c8:	80 e2       	ldi	r24, 0x20	; 32
    c2ca:	80 93 b4 0c 	sts	0x0CB4, r24
	Screen.overlayHeight = 0;
    c2ce:	10 92 af 0c 	sts	0x0CAF, r1
	load_eeprom(&scores);
    c2d2:	8f e8       	ldi	r24, 0x8F	; 143
    c2d4:	9d e0       	ldi	r25, 0x0D	; 13
    c2d6:	0e 94 04 54 	call	0xa808	; 0xa808 <load_eeprom>
	
	LBPrint(9, 3, (char*) strHighScores);
    c2da:	44 e1       	ldi	r20, 0x14	; 20
    c2dc:	5b e0       	ldi	r21, 0x0B	; 11
    c2de:	63 e0       	ldi	r22, 0x03	; 3
    c2e0:	89 e0       	ldi	r24, 0x09	; 9
    c2e2:	0e 94 9e 4f 	call	0x9f3c	; 0x9f3c <LBPrint>
	
	LBMapSprite(0, map_emerald_0, 0);
    c2e6:	40 e0       	ldi	r20, 0x00	; 0
    c2e8:	66 e8       	ldi	r22, 0x86	; 134
    c2ea:	76 e3       	ldi	r23, 0x36	; 54
    c2ec:	80 e0       	ldi	r24, 0x00	; 0
    c2ee:	0e 94 73 50 	call	0xa0e6	; 0xa0e6 <LBMapSprite>
	LBMapSprite(1, map_emerald_1, 0);
    c2f2:	40 e0       	ldi	r20, 0x00	; 0
    c2f4:	63 e8       	ldi	r22, 0x83	; 131
    c2f6:	76 e3       	ldi	r23, 0x36	; 54
    c2f8:	81 e0       	ldi	r24, 0x01	; 1
    c2fa:	0e 94 73 50 	call	0xa0e6	; 0xa0e6 <LBMapSprite>
	LBMoveSprite(0, 7*8, 3*8, 1, 1);
    c2fe:	01 e0       	ldi	r16, 0x01	; 1
    c300:	21 e0       	ldi	r18, 0x01	; 1
    c302:	48 e1       	ldi	r20, 0x18	; 24
    c304:	68 e3       	ldi	r22, 0x38	; 56
    c306:	80 e0       	ldi	r24, 0x00	; 0
    c308:	0e 94 c5 50 	call	0xa18a	; 0xa18a <LBMoveSprite>
	LBMoveSprite(1, 21*8, 3*8, 1, 1);
    c30c:	21 e0       	ldi	r18, 0x01	; 1
    c30e:	48 e1       	ldi	r20, 0x18	; 24
    c310:	68 ea       	ldi	r22, 0xA8	; 168
    c312:	81 e0       	ldi	r24, 0x01	; 1
    c314:	0e 94 c5 50 	call	0xa18a	; 0xa18a <LBMoveSprite>
    c318:	81 e9       	ldi	r24, 0x91	; 145
    c31a:	a8 2e       	mov	r10, r24
    c31c:	8d e0       	ldi	r24, 0x0D	; 13
    c31e:	b8 2e       	mov	r11, r24
    c320:	92 e9       	ldi	r25, 0x92	; 146
    c322:	c9 2e       	mov	r12, r25
    c324:	9d e0       	ldi	r25, 0x0D	; 13
    c326:	d9 2e       	mov	r13, r25
    c328:	23 e9       	ldi	r18, 0x93	; 147
    c32a:	82 2e       	mov	r8, r18
    c32c:	2d e0       	ldi	r18, 0x0D	; 13
    c32e:	92 2e       	mov	r9, r18
    c330:	74 01       	movw	r14, r8
    c332:	d0 e3       	ldi	r29, 0x30	; 48
}

void load_high_scores()
{
	u16 score = 0;
	u8 ypos = 7;
    c334:	c7 e0       	ldi	r28, 0x07	; 7
	LBMoveSprite(0, 7*8, 3*8, 1, 1);
	LBMoveSprite(1, 21*8, 3*8, 1, 1);
	
	for (u8 i = 0; i < 30; i += 5)
	{
		LBPrintByte(9, ypos, i/5+1, false);
    c336:	35 e0       	ldi	r19, 0x05	; 5
    c338:	53 2e       	mov	r5, r19
    c33a:	4a ea       	ldi	r20, 0xAA	; 170
    c33c:	64 2e       	mov	r6, r20
    c33e:	4d e0       	ldi	r20, 0x0D	; 13
    c340:	74 2e       	mov	r7, r20
			// Shift scores down
			for (u8 j = 25; j > i; j -= 5)
			{
				memcpy(&(scores.data[j]), &(scores.data[j-5]), 5);
			}
			scores.data[i] = 'A';
    c342:	11 e4       	ldi	r17, 0x41	; 65
    c344:	0e 2d       	mov	r16, r14
    c346:	08 19       	sub	r16, r8
	LBMoveSprite(0, 7*8, 3*8, 1, 1);
	LBMoveSprite(1, 21*8, 3*8, 1, 1);
	
	for (u8 i = 0; i < 30; i += 5)
	{
		LBPrintByte(9, ypos, i/5+1, false);
    c348:	80 2f       	mov	r24, r16
    c34a:	65 2d       	mov	r22, r5
    c34c:	0e 94 71 69 	call	0xd2e2	; 0xd2e2 <__udivmodqi4>
    c350:	41 e0       	ldi	r20, 0x01	; 1
    c352:	48 0f       	add	r20, r24
    c354:	20 e0       	ldi	r18, 0x00	; 0
    c356:	6c 2f       	mov	r22, r28
    c358:	89 e0       	ldi	r24, 0x09	; 9
    c35a:	0e 94 ba 4f 	call	0x9f74	; 0x9f74 <LBPrintByte>
		LBPrintChar(10, ypos, ' ');
    c35e:	40 e2       	ldi	r20, 0x20	; 32
    c360:	6c 2f       	mov	r22, r28
    c362:	8a e0       	ldi	r24, 0x0A	; 10
    c364:	0e 94 7e 4f 	call	0x9efc	; 0x9efc <LBPrintChar>
		LBPrintChar(11, ypos, scores.data[i]);
    c368:	f5 01       	movw	r30, r10
    c36a:	40 81       	ld	r20, Z
    c36c:	6c 2f       	mov	r22, r28
    c36e:	8b e0       	ldi	r24, 0x0B	; 11
    c370:	0e 94 7e 4f 	call	0x9efc	; 0x9efc <LBPrintChar>
		LBPrintChar(12, ypos, scores.data[i+1]);
    c374:	f6 01       	movw	r30, r12
    c376:	40 81       	ld	r20, Z
    c378:	6c 2f       	mov	r22, r28
    c37a:	8c e0       	ldi	r24, 0x0C	; 12
    c37c:	0e 94 7e 4f 	call	0x9efc	; 0x9efc <LBPrintChar>
		LBPrintChar(13, ypos, scores.data[i+2]);
    c380:	f7 01       	movw	r30, r14
    c382:	40 81       	ld	r20, Z
    c384:	6c 2f       	mov	r22, r28
    c386:	8d e0       	ldi	r24, 0x0D	; 13
    c388:	0e 94 7e 4f 	call	0x9efc	; 0x9efc <LBPrintChar>
		LBPrintChar(14, ypos, ' ');
    c38c:	40 e2       	ldi	r20, 0x20	; 32
    c38e:	6c 2f       	mov	r22, r28
    c390:	8e e0       	ldi	r24, 0x0E	; 14
    c392:	0e 94 7e 4f 	call	0x9efc	; 0x9efc <LBPrintChar>
		memcpy(&score, &(scores.data[i+3]), 2);
    c396:	f7 01       	movw	r30, r14
    c398:	21 80       	ldd	r2, Z+1	; 0x01
    c39a:	32 80       	ldd	r3, Z+2	; 0x02
		LBPrintInt(19, ypos, score, true);
    c39c:	21 e0       	ldi	r18, 0x01	; 1
    c39e:	a1 01       	movw	r20, r2
    c3a0:	6c 2f       	mov	r22, r28
    c3a2:	83 e1       	ldi	r24, 0x13	; 19
    c3a4:	0e 94 eb 4f 	call	0x9fd6	; 0x9fd6 <LBPrintInt>
		
		if (game.score > score && game.high_score_index == -1)
    c3a8:	20 91 b1 0d 	lds	r18, 0x0DB1
    c3ac:	30 91 b2 0d 	lds	r19, 0x0DB2
    c3b0:	22 16       	cp	r2, r18
    c3b2:	33 06       	cpc	r3, r19
    c3b4:	08 f0       	brcs	.+2      	; 0xc3b8 <load_high_scores+0x12a>
    c3b6:	55 c0       	rjmp	.+170    	; 0xc462 <load_high_scores+0x1d4>
    c3b8:	80 91 c1 0d 	lds	r24, 0x0DC1
    c3bc:	8f 3f       	cpi	r24, 0xFF	; 255
    c3be:	09 f0       	breq	.+2      	; 0xc3c2 <load_high_scores+0x134>
    c3c0:	50 c0       	rjmp	.+160    	; 0xc462 <load_high_scores+0x1d4>
    c3c2:	aa ea       	ldi	r26, 0xAA	; 170
    c3c4:	bd e0       	ldi	r27, 0x0D	; 13
    c3c6:	cd 01       	movw	r24, r26
    c3c8:	05 97       	sbiw	r24, 0x05	; 5
    c3ca:	4e e1       	ldi	r20, 0x1E	; 30
    c3cc:	48 0f       	add	r20, r24
    c3ce:	46 19       	sub	r20, r6
		{
			// Shift scores down
			for (u8 j = 25; j > i; j -= 5)
    c3d0:	04 17       	cp	r16, r20
    c3d2:	40 f4       	brcc	.+16     	; 0xc3e4 <load_high_scores+0x156>
			{
				memcpy(&(scores.data[j]), &(scores.data[j-5]), 5);
    c3d4:	fc 01       	movw	r30, r24
    c3d6:	45 2d       	mov	r20, r5
    c3d8:	01 90       	ld	r0, Z+
    c3da:	0d 92       	st	X+, r0
    c3dc:	4a 95       	dec	r20
    c3de:	e1 f7       	brne	.-8      	; 0xc3d8 <load_high_scores+0x14a>
    c3e0:	dc 01       	movw	r26, r24
    c3e2:	f1 cf       	rjmp	.-30     	; 0xc3c6 <load_high_scores+0x138>
			}
			scores.data[i] = 'A';
    c3e4:	f5 01       	movw	r30, r10
    c3e6:	10 83       	st	Z, r17
			scores.data[i+1] = 'A';
    c3e8:	f6 01       	movw	r30, r12
    c3ea:	10 83       	st	Z, r17
			scores.data[i+2] = 'A';
    c3ec:	f7 01       	movw	r30, r14
    c3ee:	10 83       	st	Z, r17
			memcpy(&(scores.data[i+3]), &game.score, 2);
    c3f0:	32 83       	std	Z+2, r19	; 0x02
    c3f2:	21 83       	std	Z+1, r18	; 0x01
			LBPrintChar(11, ypos, scores.data[i]);
    c3f4:	f5 01       	movw	r30, r10
    c3f6:	40 81       	ld	r20, Z
    c3f8:	6c 2f       	mov	r22, r28
    c3fa:	8b e0       	ldi	r24, 0x0B	; 11
    c3fc:	0e 94 7e 4f 	call	0x9efc	; 0x9efc <LBPrintChar>
			LBPrintChar(12, ypos, scores.data[i+1]);
    c400:	f6 01       	movw	r30, r12
    c402:	40 81       	ld	r20, Z
    c404:	6c 2f       	mov	r22, r28
    c406:	8c e0       	ldi	r24, 0x0C	; 12
    c408:	0e 94 7e 4f 	call	0x9efc	; 0x9efc <LBPrintChar>
			LBPrintChar(13, ypos, scores.data[i+2]);
    c40c:	f7 01       	movw	r30, r14
    c40e:	40 81       	ld	r20, Z
    c410:	6c 2f       	mov	r22, r28
    c412:	8d e0       	ldi	r24, 0x0D	; 13
    c414:	0e 94 7e 4f 	call	0x9efc	; 0x9efc <LBPrintChar>
			LBPrintInt(19, ypos, game.score, true);
    c418:	40 91 b1 0d 	lds	r20, 0x0DB1
    c41c:	50 91 b2 0d 	lds	r21, 0x0DB2
    c420:	21 e0       	ldi	r18, 0x01	; 1
    c422:	6c 2f       	mov	r22, r28
    c424:	83 e1       	ldi	r24, 0x13	; 19
    c426:	0e 94 eb 4f 	call	0x9fd6	; 0x9fd6 <LBPrintInt>
			game.high_score_index = i;
    c42a:	00 93 c1 0d 	sts	0x0DC1, r16
			LBMapSprite(2, map_down_arrow, 0);
    c42e:	40 e0       	ldi	r20, 0x00	; 0
    c430:	68 e9       	ldi	r22, 0x98	; 152
    c432:	76 e3       	ldi	r23, 0x36	; 54
    c434:	82 e0       	ldi	r24, 0x02	; 2
    c436:	0e 94 73 50 	call	0xa0e6	; 0xa0e6 <LBMapSprite>
			LBMapSprite(3, map_up_arrow, 0);
    c43a:	40 e0       	ldi	r20, 0x00	; 0
    c43c:	65 e9       	ldi	r22, 0x95	; 149
    c43e:	76 e3       	ldi	r23, 0x36	; 54
    c440:	83 e0       	ldi	r24, 0x03	; 3
    c442:	0e 94 73 50 	call	0xa0e6	; 0xa0e6 <LBMapSprite>
			LBMoveSprite(2, 11*8, (ypos-1)*8, 1, 1);
    c446:	01 e0       	ldi	r16, 0x01	; 1
    c448:	21 e0       	ldi	r18, 0x01	; 1
    c44a:	4d 2f       	mov	r20, r29
    c44c:	68 e5       	ldi	r22, 0x58	; 88
    c44e:	82 e0       	ldi	r24, 0x02	; 2
    c450:	0e 94 c5 50 	call	0xa18a	; 0xa18a <LBMoveSprite>
			LBMoveSprite(3, 11*8, (ypos+1)*8, 1, 1);
    c454:	21 e0       	ldi	r18, 0x01	; 1
    c456:	40 e1       	ldi	r20, 0x10	; 16
    c458:	4d 0f       	add	r20, r29
    c45a:	68 e5       	ldi	r22, 0x58	; 88
    c45c:	83 e0       	ldi	r24, 0x03	; 3
    c45e:	0e 94 c5 50 	call	0xa18a	; 0xa18a <LBMoveSprite>
		}
		
		ypos += 2;
    c462:	ce 5f       	subi	r28, 0xFE	; 254
    c464:	f5 e0       	ldi	r31, 0x05	; 5
    c466:	af 0e       	add	r10, r31
    c468:	b1 1c       	adc	r11, r1
    c46a:	85 e0       	ldi	r24, 0x05	; 5
    c46c:	c8 0e       	add	r12, r24
    c46e:	d1 1c       	adc	r13, r1
    c470:	e5 e0       	ldi	r30, 0x05	; 5
    c472:	ee 0e       	add	r14, r30
    c474:	f1 1c       	adc	r15, r1
    c476:	d0 5f       	subi	r29, 0xF0	; 240
	LBMapSprite(0, map_emerald_0, 0);
	LBMapSprite(1, map_emerald_1, 0);
	LBMoveSprite(0, 7*8, 3*8, 1, 1);
	LBMoveSprite(1, 21*8, 3*8, 1, 1);
	
	for (u8 i = 0; i < 30; i += 5)
    c478:	c3 31       	cpi	r28, 0x13	; 19
    c47a:	09 f0       	breq	.+2      	; 0xc47e <load_high_scores+0x1f0>
    c47c:	63 cf       	rjmp	.-314    	; 0xc344 <load_high_scores+0xb6>
		}
		
		ypos += 2;
	}
	
	LBPrint(9, 22, (char*) strMainMenu);
    c47e:	4b ee       	ldi	r20, 0xEB	; 235
    c480:	5a e0       	ldi	r21, 0x0A	; 10
    c482:	66 e1       	ldi	r22, 0x16	; 22
    c484:	89 e0       	ldi	r24, 0x09	; 9
}
    c486:	df 91       	pop	r29
    c488:	cf 91       	pop	r28
    c48a:	1f 91       	pop	r17
    c48c:	0f 91       	pop	r16
    c48e:	ff 90       	pop	r15
    c490:	ef 90       	pop	r14
    c492:	df 90       	pop	r13
    c494:	cf 90       	pop	r12
    c496:	bf 90       	pop	r11
    c498:	af 90       	pop	r10
    c49a:	9f 90       	pop	r9
    c49c:	8f 90       	pop	r8
    c49e:	7f 90       	pop	r7
    c4a0:	6f 90       	pop	r6
    c4a2:	5f 90       	pop	r5
    c4a4:	3f 90       	pop	r3
    c4a6:	2f 90       	pop	r2
		}
		
		ypos += 2;
	}
	
	LBPrint(9, 22, (char*) strMainMenu);
    c4a8:	0c 94 9e 4f 	jmp	0x9f3c	; 0x9f3c <LBPrint>

0000c4ac <exit_game>:
	}
}

void exit_game()
{
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    c4ac:	64 e1       	ldi	r22, 0x14	; 20
    c4ae:	80 e0       	ldi	r24, 0x00	; 0
    c4b0:	0e 94 de 5d 	call	0xbbbc	; 0xbbbc <clear_sprites>
	LBRotateSprites();
    c4b4:	0e 94 03 51 	call	0xa206	; 0xa206 <LBRotateSprites>
	init_player_state();
    c4b8:	0e 94 24 52 	call	0xa448	; 0xa448 <init_player_state>
	init_boss_state();
    c4bc:	0e 94 63 51 	call	0xa2c6	; 0xa2c6 <init_boss_state>
	init_enemy_state();
    c4c0:	0e 94 51 51 	call	0xa2a2	; 0xa2a2 <init_enemy_state>
	StopSong();
    c4c4:	0e 94 9b 42 	call	0x8536	; 0x8536 <StopSong>
	load_high_scores();
    c4c8:	0c 94 47 61 	jmp	0xc28e	; 0xc28e <load_high_scores>

0000c4cc <update_splash>:
	DrawMap2(6, 5, map_splash);
	LBMapSprite(0, map_right_arrow, 0);
}

void update_splash()
{
    c4cc:	0f 93       	push	r16
    c4ce:	cf 93       	push	r28
	if (game.player.controls.pressed & BTN_DOWN && game.selection == START_SELECTED)
    c4d0:	80 91 3a 0e 	lds	r24, 0x0E3A
    c4d4:	c0 91 c8 0d 	lds	r28, 0x0DC8
    c4d8:	85 ff       	sbrs	r24, 5
    c4da:	06 c0       	rjmp	.+12     	; 0xc4e8 <update_splash+0x1c>
    c4dc:	c1 11       	cpse	r28, r1
    c4de:	04 c0       	rjmp	.+8      	; 0xc4e8 <update_splash+0x1c>
	{
		game.selection = HIGH_SCORES_SELECTED;
    c4e0:	81 e0       	ldi	r24, 0x01	; 1
    c4e2:	80 93 c8 0d 	sts	0x0DC8, r24
    c4e6:	06 c0       	rjmp	.+12     	; 0xc4f4 <update_splash+0x28>
		SFX_NAVIGATE;
	}
	else if (game.player.controls.pressed & BTN_UP && game.selection == HIGH_SCORES_SELECTED)
    c4e8:	84 ff       	sbrs	r24, 4
    c4ea:	0a c0       	rjmp	.+20     	; 0xc500 <update_splash+0x34>
    c4ec:	c1 30       	cpi	r28, 0x01	; 1
    c4ee:	41 f4       	brne	.+16     	; 0xc500 <update_splash+0x34>
	{
		game.selection = START_SELECTED;
    c4f0:	10 92 c8 0d 	sts	0x0DC8, r1
		SFX_NAVIGATE;
    c4f4:	41 e0       	ldi	r20, 0x01	; 1
    c4f6:	6f ef       	ldi	r22, 0xFF	; 255
    c4f8:	82 e0       	ldi	r24, 0x02	; 2
    c4fa:	0e 94 5d 43 	call	0x86ba	; 0x86ba <TriggerFx>
    c4fe:	1c c0       	rjmp	.+56     	; 0xc538 <update_splash+0x6c>
	}
	else if (select_pressed(&game.player.controls) && game.selection == START_SELECTED)
    c500:	8a e3       	ldi	r24, 0x3A	; 58
    c502:	9e e0       	ldi	r25, 0x0E	; 14
    c504:	0e 94 3a 5f 	call	0xbe74	; 0xbe74 <select_pressed>
    c508:	88 23       	and	r24, r24
    c50a:	b1 f0       	breq	.+44     	; 0xc538 <update_splash+0x6c>
    c50c:	c1 11       	cpse	r28, r1
    c50e:	09 c0       	rjmp	.+18     	; 0xc522 <update_splash+0x56>
	{
		SFX_NAVIGATE;
    c510:	41 e0       	ldi	r20, 0x01	; 1
    c512:	6f ef       	ldi	r22, 0xFF	; 255
    c514:	82 e0       	ldi	r24, 0x02	; 2
    c516:	0e 94 5d 43 	call	0x86ba	; 0x86ba <TriggerFx>
	}
	else
	{
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
	}
}
    c51a:	cf 91       	pop	r28
    c51c:	0f 91       	pop	r16
		SFX_NAVIGATE;
	}
	else if (select_pressed(&game.player.controls) && game.selection == START_SELECTED)
	{
		SFX_NAVIGATE;
		intro();
    c51e:	0c 94 af 60 	jmp	0xc15e	; 0xc15e <intro>
		return;
	}
	else if (select_pressed(&game.player.controls) && game.selection == HIGH_SCORES_SELECTED)
    c522:	c1 30       	cpi	r28, 0x01	; 1
    c524:	49 f4       	brne	.+18     	; 0xc538 <update_splash+0x6c>
	{
		SFX_NAVIGATE;
    c526:	41 e0       	ldi	r20, 0x01	; 1
    c528:	6f ef       	ldi	r22, 0xFF	; 255
    c52a:	82 e0       	ldi	r24, 0x02	; 2
    c52c:	0e 94 5d 43 	call	0x86ba	; 0x86ba <TriggerFx>
	}
	else
	{
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
	}
}
    c530:	cf 91       	pop	r28
    c532:	0f 91       	pop	r16
		return;
	}
	else if (select_pressed(&game.player.controls) && game.selection == HIGH_SCORES_SELECTED)
	{
		SFX_NAVIGATE;
		load_high_scores();
    c534:	0c 94 47 61 	jmp	0xc28e	; 0xc28e <load_high_scores>
		return;
	}
	
	if (game.selection == START_SELECTED)
    c538:	80 91 c8 0d 	lds	r24, 0x0DC8
	{
		LBMoveSprite(0, 7*8, 15*8, 1, 1);
    c53c:	01 e0       	ldi	r16, 0x01	; 1
    c53e:	21 e0       	ldi	r18, 0x01	; 1
		SFX_NAVIGATE;
		load_high_scores();
		return;
	}
	
	if (game.selection == START_SELECTED)
    c540:	81 11       	cpse	r24, r1
    c542:	03 c0       	rjmp	.+6      	; 0xc54a <update_splash+0x7e>
	{
		LBMoveSprite(0, 7*8, 15*8, 1, 1);
    c544:	48 e7       	ldi	r20, 0x78	; 120
    c546:	68 e3       	ldi	r22, 0x38	; 56
    c548:	03 c0       	rjmp	.+6      	; 0xc550 <update_splash+0x84>
	}
	else
	{
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
    c54a:	40 e8       	ldi	r20, 0x80	; 128
    c54c:	68 e3       	ldi	r22, 0x38	; 56
    c54e:	80 e0       	ldi	r24, 0x00	; 0
    c550:	0e 94 c5 50 	call	0xa18a	; 0xa18a <LBMoveSprite>
	}
}
    c554:	cf 91       	pop	r28
    c556:	0f 91       	pop	r16
    c558:	08 95       	ret

0000c55a <update_high_scores>:
	
	LBPrint(9, 22, (char*) strMainMenu);
}

void update_high_scores()
{
    c55a:	0f 93       	push	r16
	if (game.player.controls.pressed & BTN_X)
    c55c:	80 91 3a 0e 	lds	r24, 0x0E3A
    c560:	90 91 3b 0e 	lds	r25, 0x0E3B
    c564:	91 ff       	sbrs	r25, 1
    c566:	12 c0       	rjmp	.+36     	; 0xc58c <update_high_scores+0x32>
	{
		SFX_NAVIGATE;
    c568:	41 e0       	ldi	r20, 0x01	; 1
    c56a:	6f ef       	ldi	r22, 0xFF	; 255
    c56c:	82 e0       	ldi	r24, 0x02	; 2
    c56e:	0e 94 5d 43 	call	0x86ba	; 0x86ba <TriggerFx>
		game.high_score_index = -1;
    c572:	8f ef       	ldi	r24, 0xFF	; 255
    c574:	80 93 c1 0d 	sts	0x0DC1, r24
		game.score = 0;
    c578:	10 92 b2 0d 	sts	0x0DB2, r1
    c57c:	10 92 b1 0d 	sts	0x0DB1, r1
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    c580:	8f e8       	ldi	r24, 0x8F	; 143
    c582:	9d e0       	ldi	r25, 0x0D	; 13
    c584:	0e 94 f9 40 	call	0x81f2	; 0x81f2 <EepromWriteBlock>
	{
		SFX_NAVIGATE;
		game.high_score_index = -1;
		game.score = 0;
		save_eeprom(&scores);
		load_splash();
    c588:	0e 94 10 61 	call	0xc220	; 0xc220 <load_splash>
	}
	
	if (game.high_score_index != -1)
    c58c:	30 91 c1 0d 	lds	r19, 0x0DC1
    c590:	3f 3f       	cpi	r19, 0xFF	; 255
    c592:	09 f4       	brne	.+2      	; 0xc596 <update_high_scores+0x3c>
    c594:	7e c0       	rjmp	.+252    	; 0xc692 <update_high_scores+0x138>
	{
		if (game.player.controls.pressed & BTN_RIGHT && game.high_score_index % 5 != 2)
    c596:	20 91 3a 0e 	lds	r18, 0x0E3A
    c59a:	27 ff       	sbrs	r18, 7
    c59c:	1e c0       	rjmp	.+60     	; 0xc5da <update_high_scores+0x80>
    c59e:	83 2f       	mov	r24, r19
    c5a0:	65 e0       	ldi	r22, 0x05	; 5
    c5a2:	0e 94 7d 69 	call	0xd2fa	; 0xd2fa <__divmodqi4>
    c5a6:	92 30       	cpi	r25, 0x02	; 2
    c5a8:	c1 f0       	breq	.+48     	; 0xc5da <update_high_scores+0x80>
		{
			SFX_NAVIGATE;
    c5aa:	41 e0       	ldi	r20, 0x01	; 1
    c5ac:	6f ef       	ldi	r22, 0xFF	; 255
    c5ae:	82 e0       	ldi	r24, 0x02	; 2
    c5b0:	0e 94 5d 43 	call	0x86ba	; 0x86ba <TriggerFx>
			game.high_score_index++;
    c5b4:	80 91 c1 0d 	lds	r24, 0x0DC1
    c5b8:	8f 5f       	subi	r24, 0xFF	; 255
    c5ba:	80 93 c1 0d 	sts	0x0DC1, r24
			LBMoveSprite(2, extendedSprites[2].x+8, extendedSprites[2].y, 1, 1);
    c5be:	60 91 c6 0f 	lds	r22, 0x0FC6
    c5c2:	68 5f       	subi	r22, 0xF8	; 248
    c5c4:	01 e0       	ldi	r16, 0x01	; 1
    c5c6:	21 e0       	ldi	r18, 0x01	; 1
    c5c8:	40 91 c7 0f 	lds	r20, 0x0FC7
    c5cc:	82 e0       	ldi	r24, 0x02	; 2
    c5ce:	0e 94 c5 50 	call	0xa18a	; 0xa18a <LBMoveSprite>
			LBMoveSprite(3, extendedSprites[3].x+8, extendedSprites[3].y, 1, 1);
    c5d2:	60 91 ca 0f 	lds	r22, 0x0FCA
    c5d6:	68 5f       	subi	r22, 0xF8	; 248
    c5d8:	1f c0       	rjmp	.+62     	; 0xc618 <update_high_scores+0xbe>
		}
		else if (game.player.controls.pressed & BTN_LEFT && game.high_score_index % 5 != 0)
    c5da:	26 ff       	sbrs	r18, 6
    c5dc:	24 c0       	rjmp	.+72     	; 0xc626 <update_high_scores+0xcc>
    c5de:	83 2f       	mov	r24, r19
    c5e0:	65 e0       	ldi	r22, 0x05	; 5
    c5e2:	0e 94 7d 69 	call	0xd2fa	; 0xd2fa <__divmodqi4>
    c5e6:	99 23       	and	r25, r25
    c5e8:	f1 f0       	breq	.+60     	; 0xc626 <update_high_scores+0xcc>
		{
			SFX_NAVIGATE;
    c5ea:	41 e0       	ldi	r20, 0x01	; 1
    c5ec:	6f ef       	ldi	r22, 0xFF	; 255
    c5ee:	82 e0       	ldi	r24, 0x02	; 2
    c5f0:	0e 94 5d 43 	call	0x86ba	; 0x86ba <TriggerFx>
			game.high_score_index--;
    c5f4:	80 91 c1 0d 	lds	r24, 0x0DC1
    c5f8:	81 50       	subi	r24, 0x01	; 1
    c5fa:	80 93 c1 0d 	sts	0x0DC1, r24
			LBMoveSprite(2, extendedSprites[2].x-8, extendedSprites[2].y, 1, 1);
    c5fe:	60 91 c6 0f 	lds	r22, 0x0FC6
    c602:	68 50       	subi	r22, 0x08	; 8
    c604:	01 e0       	ldi	r16, 0x01	; 1
    c606:	21 e0       	ldi	r18, 0x01	; 1
    c608:	40 91 c7 0f 	lds	r20, 0x0FC7
    c60c:	82 e0       	ldi	r24, 0x02	; 2
    c60e:	0e 94 c5 50 	call	0xa18a	; 0xa18a <LBMoveSprite>
			LBMoveSprite(3, extendedSprites[3].x-8, extendedSprites[3].y, 1, 1);
    c612:	60 91 ca 0f 	lds	r22, 0x0FCA
    c616:	68 50       	subi	r22, 0x08	; 8
    c618:	21 e0       	ldi	r18, 0x01	; 1
    c61a:	40 91 cb 0f 	lds	r20, 0x0FCB
    c61e:	83 e0       	ldi	r24, 0x03	; 3
    c620:	0e 94 c5 50 	call	0xa18a	; 0xa18a <LBMoveSprite>
    c624:	36 c0       	rjmp	.+108    	; 0xc692 <update_high_scores+0x138>
		}
		else if (game.player.controls.pressed & BTN_UP)
    c626:	24 ff       	sbrs	r18, 4
    c628:	13 c0       	rjmp	.+38     	; 0xc650 <update_high_scores+0xf6>
		{
			SFX_NAVIGATE;
    c62a:	41 e0       	ldi	r20, 0x01	; 1
    c62c:	6f ef       	ldi	r22, 0xFF	; 255
    c62e:	82 e0       	ldi	r24, 0x02	; 2
    c630:	0e 94 5d 43 	call	0x86ba	; 0x86ba <TriggerFx>
			scores.data[game.high_score_index] = scores.data[game.high_score_index]-1;
    c634:	80 91 c1 0d 	lds	r24, 0x0DC1
    c638:	e8 2f       	mov	r30, r24
    c63a:	ff 27       	eor	r31, r31
    c63c:	e7 fd       	sbrc	r30, 7
    c63e:	f0 95       	com	r31
    c640:	e1 57       	subi	r30, 0x71	; 113
    c642:	f2 4f       	sbci	r31, 0xF2	; 242
    c644:	92 81       	ldd	r25, Z+2	; 0x02
    c646:	91 50       	subi	r25, 0x01	; 1
			if (scores.data[game.high_score_index] < 'A') scores.data[game.high_score_index] = 'A';
    c648:	91 34       	cpi	r25, 0x41	; 65
    c64a:	b0 f4       	brcc	.+44     	; 0xc678 <update_high_scores+0x11e>
    c64c:	91 e4       	ldi	r25, 0x41	; 65
    c64e:	14 c0       	rjmp	.+40     	; 0xc678 <update_high_scores+0x11e>
			LBPrintChar(11+(game.high_score_index % 5), 7+(game.high_score_index/5)*2, scores.data[game.high_score_index]);
		}
		else if (game.player.controls.pressed & BTN_DOWN)
    c650:	25 ff       	sbrs	r18, 5
    c652:	1f c0       	rjmp	.+62     	; 0xc692 <update_high_scores+0x138>
		{
			SFX_NAVIGATE;
    c654:	41 e0       	ldi	r20, 0x01	; 1
    c656:	6f ef       	ldi	r22, 0xFF	; 255
    c658:	82 e0       	ldi	r24, 0x02	; 2
    c65a:	0e 94 5d 43 	call	0x86ba	; 0x86ba <TriggerFx>
			scores.data[game.high_score_index] = scores.data[game.high_score_index]+1;
    c65e:	80 91 c1 0d 	lds	r24, 0x0DC1
    c662:	e8 2f       	mov	r30, r24
    c664:	ff 27       	eor	r31, r31
    c666:	e7 fd       	sbrc	r30, 7
    c668:	f0 95       	com	r31
    c66a:	e1 57       	subi	r30, 0x71	; 113
    c66c:	f2 4f       	sbci	r31, 0xF2	; 242
    c66e:	92 81       	ldd	r25, Z+2	; 0x02
    c670:	9f 5f       	subi	r25, 0xFF	; 255
			if (scores.data[game.high_score_index] > 'Z') scores.data[game.high_score_index] = 'Z';
    c672:	9b 35       	cpi	r25, 0x5B	; 91
    c674:	08 f0       	brcs	.+2      	; 0xc678 <update_high_scores+0x11e>
    c676:	9a e5       	ldi	r25, 0x5A	; 90
    c678:	92 83       	std	Z+2, r25	; 0x02
			LBPrintChar(11+(game.high_score_index % 5), 7+(game.high_score_index/5)*2, scores.data[game.high_score_index]);
    c67a:	65 e0       	ldi	r22, 0x05	; 5
    c67c:	0e 94 7d 69 	call	0xd2fa	; 0xd2fa <__divmodqi4>
    c680:	68 2f       	mov	r22, r24
    c682:	66 0f       	add	r22, r22
    c684:	69 5f       	subi	r22, 0xF9	; 249
    c686:	42 81       	ldd	r20, Z+2	; 0x02
    c688:	8b e0       	ldi	r24, 0x0B	; 11
    c68a:	89 0f       	add	r24, r25
		}
	}
}
    c68c:	0f 91       	pop	r16
		else if (game.player.controls.pressed & BTN_DOWN)
		{
			SFX_NAVIGATE;
			scores.data[game.high_score_index] = scores.data[game.high_score_index]+1;
			if (scores.data[game.high_score_index] > 'Z') scores.data[game.high_score_index] = 'Z';
			LBPrintChar(11+(game.high_score_index % 5), 7+(game.high_score_index/5)*2, scores.data[game.high_score_index]);
    c68e:	0c 94 7e 4f 	jmp	0x9efc	; 0x9efc <LBPrintChar>
		}
	}
}
    c692:	0f 91       	pop	r16
    c694:	08 95       	ret

0000c696 <tally_score>:
		}
	}
}

void tally_score(char* title, u16 bonus)
{
    c696:	2f 92       	push	r2
    c698:	3f 92       	push	r3
    c69a:	4f 92       	push	r4
    c69c:	5f 92       	push	r5
    c69e:	6f 92       	push	r6
    c6a0:	7f 92       	push	r7
    c6a2:	8f 92       	push	r8
    c6a4:	9f 92       	push	r9
    c6a6:	af 92       	push	r10
    c6a8:	bf 92       	push	r11
    c6aa:	cf 92       	push	r12
    c6ac:	df 92       	push	r13
    c6ae:	ef 92       	push	r14
    c6b0:	ff 92       	push	r15
    c6b2:	0f 93       	push	r16
    c6b4:	1f 93       	push	r17
    c6b6:	cf 93       	push	r28
    c6b8:	df 93       	push	r29
    c6ba:	7c 01       	movw	r14, r24
    c6bc:	6b 01       	movw	r12, r22
	u8 x = Screen.scrollX / 8;
    c6be:	c0 91 b2 0c 	lds	r28, 0x0CB2
    c6c2:	c6 95       	lsr	r28
    c6c4:	c6 95       	lsr	r28
    c6c6:	c6 95       	lsr	r28
	u8 y = Screen.scrollY / 8;
    c6c8:	00 91 b3 0c 	lds	r16, 0x0CB3
    c6cc:	06 95       	lsr	r16
    c6ce:	06 95       	lsr	r16
    c6d0:	06 95       	lsr	r16
	u16 tally = game.score;
    c6d2:	a0 90 b1 0d 	lds	r10, 0x0DB1
    c6d6:	b0 90 b2 0d 	lds	r11, 0x0DB2
	u16 counter = 0;
	
	hide_sprites(0, MAX_EXTENDED_SPRITES);
    c6da:	64 e1       	ldi	r22, 0x14	; 20
    c6dc:	80 e0       	ldi	r24, 0x00	; 0
    c6de:	0e 94 1e 5f 	call	0xbe3c	; 0xbe3c <hide_sprites>
	LBRotateSprites();
    c6e2:	0e 94 03 51 	call	0xa206	; 0xa206 <LBRotateSprites>
	
	StopSong();
    c6e6:	0e 94 9b 42 	call	0x8536	; 0x8536 <StopSong>
	DrawMap2((x+8)%32, (y+6)%30, map_canvas);
    c6ea:	10 e0       	ldi	r17, 0x00	; 0
    c6ec:	d0 e0       	ldi	r29, 0x00	; 0
    c6ee:	c8 01       	movw	r24, r16
    c6f0:	06 96       	adiw	r24, 0x06	; 6
    c6f2:	2e e1       	ldi	r18, 0x1E	; 30
    c6f4:	82 2e       	mov	r8, r18
    c6f6:	91 2c       	mov	r9, r1
    c6f8:	b4 01       	movw	r22, r8
    c6fa:	0e 94 9f 69 	call	0xd33e	; 0xd33e <__divmodhi4>
    c6fe:	9e 01       	movw	r18, r28
    c700:	28 5f       	subi	r18, 0xF8	; 248
    c702:	3f 4f       	sbci	r19, 0xFF	; 255
    c704:	44 e2       	ldi	r20, 0x24	; 36
    c706:	5f e5       	ldi	r21, 0x5F	; 95
    c708:	68 2f       	mov	r22, r24
    c70a:	82 2f       	mov	r24, r18
    c70c:	8f 71       	andi	r24, 0x1F	; 31
    c70e:	0e 94 dc 4d 	call	0x9bb8	; 0x9bb8 <DrawMap>
	LBPrint((x+10)%32, (y+7)%30, title);
    c712:	c8 01       	movw	r24, r16
    c714:	07 96       	adiw	r24, 0x07	; 7
    c716:	b4 01       	movw	r22, r8
    c718:	0e 94 9f 69 	call	0xd33e	; 0xd33e <__divmodhi4>
    c71c:	9e 01       	movw	r18, r28
    c71e:	26 5f       	subi	r18, 0xF6	; 246
    c720:	3f 4f       	sbci	r19, 0xFF	; 255
    c722:	a7 01       	movw	r20, r14
    c724:	68 2f       	mov	r22, r24
    c726:	82 2f       	mov	r24, r18
    c728:	8f 71       	andi	r24, 0x1F	; 31
    c72a:	0e 94 9e 4f 	call	0x9f3c	; 0x9f3c <LBPrint>
	LBPrint((x+9)%32, (y+9)%30, (char*) strTally);
    c72e:	c8 01       	movw	r24, r16
    c730:	09 96       	adiw	r24, 0x09	; 9
    c732:	b4 01       	movw	r22, r8
    c734:	0e 94 9f 69 	call	0xd33e	; 0xd33e <__divmodhi4>
    c738:	48 2e       	mov	r4, r24
    c73a:	78 2e       	mov	r7, r24
    c73c:	7e 01       	movw	r14, r28
    c73e:	29 e0       	ldi	r18, 0x09	; 9
    c740:	e2 0e       	add	r14, r18
    c742:	f1 1c       	adc	r15, r1
    c744:	8f e1       	ldi	r24, 0x1F	; 31
    c746:	e8 22       	and	r14, r24
    c748:	ff 24       	eor	r15, r15
    c74a:	46 eb       	ldi	r20, 0xB6	; 182
    c74c:	5a e0       	ldi	r21, 0x0A	; 10
    c74e:	64 2d       	mov	r22, r4
    c750:	8e 2d       	mov	r24, r14
    c752:	0e 94 9e 4f 	call	0x9f3c	; 0x9f3c <LBPrint>
	LBPrint((x+9)%32, (y+11)%30, (char*) strScore);
    c756:	c8 01       	movw	r24, r16
    c758:	0b 96       	adiw	r24, 0x0b	; 11
    c75a:	b4 01       	movw	r22, r8
    c75c:	0e 94 9f 69 	call	0xd33e	; 0xd33e <__divmodhi4>
    c760:	38 2e       	mov	r3, r24
    c762:	68 2e       	mov	r6, r24
    c764:	4c e0       	ldi	r20, 0x0C	; 12
    c766:	5b e0       	ldi	r21, 0x0B	; 11
    c768:	68 2f       	mov	r22, r24
    c76a:	8e 2d       	mov	r24, r14
    c76c:	0e 94 9e 4f 	call	0x9f3c	; 0x9f3c <LBPrint>
	LBPrint((x+9)%32, (y+12)%30, (char*) strTime);
    c770:	c8 01       	movw	r24, r16
    c772:	0c 96       	adiw	r24, 0x0c	; 12
    c774:	b4 01       	movw	r22, r8
    c776:	0e 94 9f 69 	call	0xd33e	; 0xd33e <__divmodhi4>
    c77a:	58 2e       	mov	r5, r24
    c77c:	f8 2e       	mov	r15, r24
    c77e:	47 ef       	ldi	r20, 0xF7	; 247
    c780:	5a e0       	ldi	r21, 0x0A	; 10
    c782:	68 2f       	mov	r22, r24
    c784:	8e 2d       	mov	r24, r14
    c786:	0e 94 9e 4f 	call	0x9f3c	; 0x9f3c <LBPrint>
	LBPrint((x+9)%32, (y+13)%30, (char*) strLevelBonus);
    c78a:	c8 01       	movw	r24, r16
    c78c:	0d 96       	adiw	r24, 0x0d	; 13
    c78e:	b4 01       	movw	r22, r8
    c790:	0e 94 9f 69 	call	0xd33e	; 0xd33e <__divmodhi4>
    c794:	18 2f       	mov	r17, r24
    c796:	28 2e       	mov	r2, r24
    c798:	47 ec       	ldi	r20, 0xC7	; 199
    c79a:	5a e0       	ldi	r21, 0x0A	; 10
    c79c:	68 2f       	mov	r22, r24
    c79e:	8e 2d       	mov	r24, r14
    c7a0:	0e 94 9e 4f 	call	0x9f3c	; 0x9f3c <LBPrint>
	
	LBPrintInt((x+20)%32, (y+9)%30, tally, true);
    c7a4:	64 96       	adiw	r28, 0x14	; 20
    c7a6:	cf 71       	andi	r28, 0x1F	; 31
    c7a8:	dd 27       	eor	r29, r29
    c7aa:	ec 2e       	mov	r14, r28
    c7ac:	21 e0       	ldi	r18, 0x01	; 1
    c7ae:	a5 01       	movw	r20, r10
    c7b0:	64 2d       	mov	r22, r4
    c7b2:	8c 2f       	mov	r24, r28
    c7b4:	0e 94 eb 4f 	call	0x9fd6	; 0x9fd6 <LBPrintInt>
	LBPrintInt((x+20)%32, (y+11)%30, game.level_score, true);
    c7b8:	40 91 b3 0d 	lds	r20, 0x0DB3
    c7bc:	50 91 b4 0d 	lds	r21, 0x0DB4
    c7c0:	21 e0       	ldi	r18, 0x01	; 1
    c7c2:	63 2d       	mov	r22, r3
    c7c4:	8c 2f       	mov	r24, r28
    c7c6:	0e 94 eb 4f 	call	0x9fd6	; 0x9fd6 <LBPrintInt>
	LBPrintInt((x+20)%32, (y+12)%30, game.time, true);
    c7ca:	40 91 b5 0d 	lds	r20, 0x0DB5
    c7ce:	50 91 b6 0d 	lds	r21, 0x0DB6
    c7d2:	21 e0       	ldi	r18, 0x01	; 1
    c7d4:	65 2d       	mov	r22, r5
    c7d6:	8c 2f       	mov	r24, r28
    c7d8:	0e 94 eb 4f 	call	0x9fd6	; 0x9fd6 <LBPrintInt>
	LBPrintInt((x+20)%32, (y+13)%30, bonus, true);
    c7dc:	21 e0       	ldi	r18, 0x01	; 1
    c7de:	a6 01       	movw	r20, r12
    c7e0:	61 2f       	mov	r22, r17
    c7e2:	8c 2f       	mov	r24, r28
    c7e4:	0e 94 eb 4f 	call	0x9fd6	; 0x9fd6 <LBPrintInt>
	
	LBWaitSeconds(2);
    c7e8:	82 e0       	ldi	r24, 0x02	; 2
    c7ea:	0e 94 64 50 	call	0xa0c8	; 0xa0c8 <LBWaitSeconds>
	
	// Tally Score
	counter = game.level_score;
    c7ee:	80 90 b3 0d 	lds	r8, 0x0DB3
    c7f2:	90 90 b4 0d 	lds	r9, 0x0DB4
    c7f6:	e4 01       	movw	r28, r8

void tally_score(char* title, u16 bonus)
{
	u8 x = Screen.scrollX / 8;
	u8 y = Screen.scrollY / 8;
	u16 tally = game.score;
    c7f8:	85 01       	movw	r16, r10
	
	LBWaitSeconds(2);
	
	// Tally Score
	counter = game.level_score;
	while (counter > 0)
    c7fa:	20 97       	sbiw	r28, 0x00	; 0
    c7fc:	e9 f0       	breq	.+58     	; 0xc838 <tally_score+0x1a2>
	{
		WaitVsync(1);
    c7fe:	81 e0       	ldi	r24, 0x01	; 1
    c800:	90 e0       	ldi	r25, 0x00	; 0
    c802:	0e 94 45 4e 	call	0x9c8a	; 0x9c8a <WaitVsync>
		SFX_HIT;
    c806:	41 e0       	ldi	r20, 0x01	; 1
    c808:	6f ef       	ldi	r22, 0xFF	; 255
    c80a:	84 e0       	ldi	r24, 0x04	; 4
    c80c:	0e 94 5d 43 	call	0x86ba	; 0x86ba <TriggerFx>
		tally += 1;
    c810:	0f 5f       	subi	r16, 0xFF	; 255
    c812:	1f 4f       	sbci	r17, 0xFF	; 255
		counter -= 1;
    c814:	21 97       	sbiw	r28, 0x01	; 1
		LBPrintInt((x+20)%32, (y+9)%30, tally, true);
    c816:	21 e0       	ldi	r18, 0x01	; 1
    c818:	a8 01       	movw	r20, r16
    c81a:	67 2d       	mov	r22, r7
    c81c:	8e 2d       	mov	r24, r14
    c81e:	0e 94 eb 4f 	call	0x9fd6	; 0x9fd6 <LBPrintInt>
		LBPrintInt((x+20)%32, (y+11)%30, counter, true);
    c822:	21 e0       	ldi	r18, 0x01	; 1
    c824:	ae 01       	movw	r20, r28
    c826:	66 2d       	mov	r22, r6
    c828:	8e 2d       	mov	r24, r14
    c82a:	0e 94 eb 4f 	call	0x9fd6	; 0x9fd6 <LBPrintInt>
		WaitUs(TALLY_DELAY);
    c82e:	8c ed       	ldi	r24, 0xDC	; 220
    c830:	95 e0       	ldi	r25, 0x05	; 5
    c832:	0e 94 b4 3f 	call	0x7f68	; 0x7f68 <WaitUs>
    c836:	e1 cf       	rjmp	.-62     	; 0xc7fa <tally_score+0x164>
    c838:	a8 0c       	add	r10, r8
    c83a:	b9 1c       	adc	r11, r9
	}
	
	// Tally Time
	counter = game.time;
    c83c:	c0 91 b5 0d 	lds	r28, 0x0DB5
    c840:	d0 91 b6 0d 	lds	r29, 0x0DB6
	while (counter > 0)
    c844:	20 97       	sbiw	r28, 0x00	; 0
    c846:	31 f1       	breq	.+76     	; 0xc894 <tally_score+0x1fe>
	{
		WaitVsync(1);
    c848:	81 e0       	ldi	r24, 0x01	; 1
    c84a:	90 e0       	ldi	r25, 0x00	; 0
    c84c:	0e 94 45 4e 	call	0x9c8a	; 0x9c8a <WaitVsync>
		SFX_HIT;
    c850:	41 e0       	ldi	r20, 0x01	; 1
    c852:	6f ef       	ldi	r22, 0xFF	; 255
    c854:	84 e0       	ldi	r24, 0x04	; 4
    c856:	0e 94 5d 43 	call	0x86ba	; 0x86ba <TriggerFx>
		tally -= 1;
		if (tally == 0 || tally == 65535) tally = 0;
    c85a:	c5 01       	movw	r24, r10
    c85c:	02 97       	sbiw	r24, 0x02	; 2
    c85e:	8e 3f       	cpi	r24, 0xFE	; 254
    c860:	9f 4f       	sbci	r25, 0xFF	; 255
    c862:	20 f4       	brcc	.+8      	; 0xc86c <tally_score+0x1d6>
	counter = game.time;
	while (counter > 0)
	{
		WaitVsync(1);
		SFX_HIT;
		tally -= 1;
    c864:	81 e0       	ldi	r24, 0x01	; 1
    c866:	a8 1a       	sub	r10, r24
    c868:	b1 08       	sbc	r11, r1
    c86a:	02 c0       	rjmp	.+4      	; 0xc870 <tally_score+0x1da>
		if (tally == 0 || tally == 65535) tally = 0;
    c86c:	a1 2c       	mov	r10, r1
    c86e:	b1 2c       	mov	r11, r1
		counter -= 1;
    c870:	21 97       	sbiw	r28, 0x01	; 1
		LBPrintInt((x+20)%32, (y+9)%30, tally, true);
    c872:	21 e0       	ldi	r18, 0x01	; 1
    c874:	a5 01       	movw	r20, r10
    c876:	67 2d       	mov	r22, r7
    c878:	8e 2d       	mov	r24, r14
    c87a:	0e 94 eb 4f 	call	0x9fd6	; 0x9fd6 <LBPrintInt>
		LBPrintInt((x+20)%32, (y+12)%30, counter, true);
    c87e:	21 e0       	ldi	r18, 0x01	; 1
    c880:	ae 01       	movw	r20, r28
    c882:	6f 2d       	mov	r22, r15
    c884:	8e 2d       	mov	r24, r14
    c886:	0e 94 eb 4f 	call	0x9fd6	; 0x9fd6 <LBPrintInt>
		WaitUs(TALLY_DELAY);
    c88a:	8c ed       	ldi	r24, 0xDC	; 220
    c88c:	95 e0       	ldi	r25, 0x05	; 5
    c88e:	0e 94 b4 3f 	call	0x7f68	; 0x7f68 <WaitUs>
    c892:	d8 cf       	rjmp	.-80     	; 0xc844 <tally_score+0x1ae>
    c894:	85 01       	movw	r16, r10
		WaitUs(TALLY_DELAY);
	}
	
	// Tally Time
	counter = game.time;
	while (counter > 0)
    c896:	e6 01       	movw	r28, r12
		WaitUs(TALLY_DELAY);
	}
	
	// Tally Level Bonus
	counter = bonus;
	while (counter > 0)
    c898:	20 97       	sbiw	r28, 0x00	; 0
    c89a:	e9 f0       	breq	.+58     	; 0xc8d6 <tally_score+0x240>
	{
		WaitVsync(1);
    c89c:	81 e0       	ldi	r24, 0x01	; 1
    c89e:	90 e0       	ldi	r25, 0x00	; 0
    c8a0:	0e 94 45 4e 	call	0x9c8a	; 0x9c8a <WaitVsync>
		SFX_HIT;
    c8a4:	41 e0       	ldi	r20, 0x01	; 1
    c8a6:	6f ef       	ldi	r22, 0xFF	; 255
    c8a8:	84 e0       	ldi	r24, 0x04	; 4
    c8aa:	0e 94 5d 43 	call	0x86ba	; 0x86ba <TriggerFx>
		tally += 1;
    c8ae:	0f 5f       	subi	r16, 0xFF	; 255
    c8b0:	1f 4f       	sbci	r17, 0xFF	; 255
		counter -= 1;
    c8b2:	21 97       	sbiw	r28, 0x01	; 1
		LBPrintInt((x+20)%32, (y+9)%30, tally, true);
    c8b4:	21 e0       	ldi	r18, 0x01	; 1
    c8b6:	a8 01       	movw	r20, r16
    c8b8:	67 2d       	mov	r22, r7
    c8ba:	8e 2d       	mov	r24, r14
    c8bc:	0e 94 eb 4f 	call	0x9fd6	; 0x9fd6 <LBPrintInt>
		LBPrintInt((x+20)%32, (y+13)%30, counter, true);
    c8c0:	21 e0       	ldi	r18, 0x01	; 1
    c8c2:	ae 01       	movw	r20, r28
    c8c4:	62 2d       	mov	r22, r2
    c8c6:	8e 2d       	mov	r24, r14
    c8c8:	0e 94 eb 4f 	call	0x9fd6	; 0x9fd6 <LBPrintInt>
		WaitUs(TALLY_DELAY);
    c8cc:	8c ed       	ldi	r24, 0xDC	; 220
    c8ce:	95 e0       	ldi	r25, 0x05	; 5
    c8d0:	0e 94 b4 3f 	call	0x7f68	; 0x7f68 <WaitUs>
    c8d4:	e1 cf       	rjmp	.-62     	; 0xc898 <tally_score+0x202>
    c8d6:	ac 0c       	add	r10, r12
    c8d8:	bd 1c       	adc	r11, r13
	}
	
	game.score = tally;
    c8da:	b0 92 b2 0d 	sts	0x0DB2, r11
    c8de:	a0 92 b1 0d 	sts	0x0DB1, r10
	game.time = 0;
    c8e2:	10 92 b6 0d 	sts	0x0DB6, r1
    c8e6:	10 92 b5 0d 	sts	0x0DB5, r1
	LBWaitSeconds(2);
    c8ea:	82 e0       	ldi	r24, 0x02	; 2
}
    c8ec:	df 91       	pop	r29
    c8ee:	cf 91       	pop	r28
    c8f0:	1f 91       	pop	r17
    c8f2:	0f 91       	pop	r16
    c8f4:	ff 90       	pop	r15
    c8f6:	ef 90       	pop	r14
    c8f8:	df 90       	pop	r13
    c8fa:	cf 90       	pop	r12
    c8fc:	bf 90       	pop	r11
    c8fe:	af 90       	pop	r10
    c900:	9f 90       	pop	r9
    c902:	8f 90       	pop	r8
    c904:	7f 90       	pop	r7
    c906:	6f 90       	pop	r6
    c908:	5f 90       	pop	r5
    c90a:	4f 90       	pop	r4
    c90c:	3f 90       	pop	r3
    c90e:	2f 90       	pop	r2
		WaitUs(TALLY_DELAY);
	}
	
	game.score = tally;
	game.time = 0;
	LBWaitSeconds(2);
    c910:	0c 94 64 50 	jmp	0xa0c8	; 0xa0c8 <LBWaitSeconds>

0000c914 <handle_player_death>:
		}
	}
}

u8 handle_player_death(Player* player)
{
    c914:	cf 93       	push	r28
	if (player == &game.boss) {
    c916:	81 54       	subi	r24, 0x41	; 65
    c918:	9e 40       	sbci	r25, 0x0E	; 14
    c91a:	29 f4       	brne	.+10     	; 0xc926 <handle_player_death+0x12>
		game.level_ended = 1;
    c91c:	81 e0       	ldi	r24, 0x01	; 1
    c91e:	80 93 cc 0d 	sts	0x0DCC, r24
		return 1;
    c922:	c1 e0       	ldi	r28, 0x01	; 1
    c924:	34 c0       	rjmp	.+104    	; 0xc98e <handle_player_death+0x7a>
	}
	game.lives--;
    c926:	80 91 c2 0d 	lds	r24, 0x0DC2
    c92a:	81 50       	subi	r24, 0x01	; 1
    c92c:	80 93 c2 0d 	sts	0x0DC2, r24
	clear_sprites(0, 6);
    c930:	66 e0       	ldi	r22, 0x06	; 6
    c932:	80 e0       	ldi	r24, 0x00	; 0
    c934:	0e 94 de 5d 	call	0xbbbc	; 0xbbbc <clear_sprites>
	LBRotateSprites();
    c938:	0e 94 03 51 	call	0xa206	; 0xa206 <LBRotateSprites>
	if (game.lives == 0)
    c93c:	c0 91 c2 0d 	lds	r28, 0x0DC2
    c940:	c1 11       	cpse	r28, r1
    c942:	09 c0       	rjmp	.+18     	; 0xc956 <handle_player_death+0x42>
	{
		tally_score((char*) strGameOver, 0);
    c944:	60 e0       	ldi	r22, 0x00	; 0
    c946:	70 e0       	ldi	r23, 0x00	; 0
    c948:	8d eb       	ldi	r24, 0xBD	; 189
    c94a:	9a e0       	ldi	r25, 0x0A	; 10
    c94c:	0e 94 4b 63 	call	0xc696	; 0xc696 <tally_score>
		exit_game();
    c950:	0e 94 56 62 	call	0xc4ac	; 0xc4ac <exit_game>
    c954:	1c c0       	rjmp	.+56     	; 0xc98e <handle_player_death+0x7a>
		return 0;
	}
	FadeOut(FRAMES_PER_FADE, true);
    c956:	61 e0       	ldi	r22, 0x01	; 1
    c958:	81 e0       	ldi	r24, 0x01	; 1
    c95a:	0e 94 ad 4e 	call	0x9d5a	; 0x9d5a <FadeOut>
	ClearVram();
    c95e:	0e 94 7e 3f 	call	0x7efc	; 0x7efc <ClearVram>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    c962:	64 e1       	ldi	r22, 0x14	; 20
    c964:	80 e0       	ldi	r24, 0x00	; 0
    c966:	0e 94 de 5d 	call	0xbbbc	; 0xbbbc <clear_sprites>
	LBRotateSprites();
    c96a:	0e 94 03 51 	call	0xa206	; 0xa206 <LBRotateSprites>
	FadeIn(FRAMES_PER_FADE, false);
    c96e:	60 e0       	ldi	r22, 0x00	; 0
    c970:	81 e0       	ldi	r24, 0x01	; 1
    c972:	0e 94 a1 4e 	call	0x9d42	; 0x9d42 <FadeIn>
	init_player_state();
    c976:	0e 94 24 52 	call	0xa448	; 0xa448 <init_player_state>
	init_boss_state();
    c97a:	0e 94 63 51 	call	0xa2c6	; 0xa2c6 <init_boss_state>
	init_enemy_state();
    c97e:	0e 94 51 51 	call	0xa2a2	; 0xa2a2 <init_enemy_state>
	load_level(game.current_level_index, false);
    c982:	60 e0       	ldi	r22, 0x00	; 0
    c984:	80 91 c4 0d 	lds	r24, 0x0DC4
    c988:	0e 94 10 5e 	call	0xbc20	; 0xbc20 <load_level>
	return 0;
    c98c:	c0 e0       	ldi	r28, 0x00	; 0
}
    c98e:	8c 2f       	mov	r24, r28
    c990:	cf 91       	pop	r28
    c992:	08 95       	ret

0000c994 <update_player>:

u8 update_player(Player* player, u8 slot)
{
    c994:	ef 92       	push	r14
    c996:	ff 92       	push	r15
    c998:	0f 93       	push	r16
    c99a:	1f 93       	push	r17
    c99c:	cf 93       	push	r28
    c99e:	df 93       	push	r29
    c9a0:	1f 92       	push	r1
    c9a2:	cd b7       	in	r28, 0x3d	; 61
    c9a4:	de b7       	in	r29, 0x3e	; 62
    c9a6:	7c 01       	movw	r14, r24
    c9a8:	16 2f       	mov	r17, r22
	
	if (player->flags & EXPLODING)
    c9aa:	fc 01       	movw	r30, r24
    c9ac:	00 85       	ldd	r16, Z+8	; 0x08
    c9ae:	04 ff       	sbrs	r16, 4
    c9b0:	16 c0       	rjmp	.+44     	; 0xc9de <update_player+0x4a>
	{
		if (map_explosion(&player->flags, &player->expl, slot, player->width, player->height))
    c9b2:	04 85       	ldd	r16, Z+12	; 0x0c
    c9b4:	23 85       	ldd	r18, Z+11	; 0x0b
    c9b6:	46 2f       	mov	r20, r22
    c9b8:	bc 01       	movw	r22, r24
    c9ba:	6b 59       	subi	r22, 0x9B	; 155
    c9bc:	7f 4f       	sbci	r23, 0xFF	; 255
    c9be:	08 96       	adiw	r24, 0x08	; 8
    c9c0:	0e 94 91 5a 	call	0xb522	; 0xb522 <map_explosion>
    c9c4:	88 23       	and	r24, r24
    c9c6:	09 f4       	brne	.+2      	; 0xc9ca <update_player+0x36>
    c9c8:	a5 c1       	rjmp	.+842    	; 0xcd14 <update_player+0x380>
		{
			return handle_player_death(player);
    c9ca:	c7 01       	movw	r24, r14
			player->direction = D_RIGHT;
			LBMapSprite(slot, LBGetNextFrame(&player->prone), 0);
		}
	}
	return 1;
}
    c9cc:	0f 90       	pop	r0
    c9ce:	df 91       	pop	r29
    c9d0:	cf 91       	pop	r28
    c9d2:	1f 91       	pop	r17
    c9d4:	0f 91       	pop	r16
    c9d6:	ff 90       	pop	r15
    c9d8:	ef 90       	pop	r14
	
	if (player->flags & EXPLODING)
	{
		if (map_explosion(&player->flags, &player->expl, slot, player->width, player->height))
		{
			return handle_player_death(player);
    c9da:	0c 94 8a 64 	jmp	0xc914	; 0xc914 <handle_player_death>
		}
	}
	else if (is_space())
    c9de:	0e 94 37 51 	call	0xa26e	; 0xa26e <is_space>
    c9e2:	88 23       	and	r24, r24
    c9e4:	09 f4       	brne	.+2      	; 0xc9e8 <update_player+0x54>
    c9e6:	4c c0       	rjmp	.+152    	; 0xca80 <update_player+0xec>
	{
		if (player->flags & END_OF_SPACE) {
    c9e8:	05 ff       	sbrs	r16, 5
    c9ea:	05 c0       	rjmp	.+10     	; 0xc9f6 <update_player+0x62>
			player->shared.vx = SPACE_SHIP_SPEED*2;
    c9ec:	88 e7       	ldi	r24, 0x78	; 120
    c9ee:	f7 01       	movw	r30, r14
    c9f0:	85 83       	std	Z+5, r24	; 0x05
			player->shared.vy = 0;
    c9f2:	14 82       	std	Z+4, r1	; 0x04
    c9f4:	41 c0       	rjmp	.+130    	; 0xca78 <update_player+0xe4>
		} else {
			player->shared.vy = 0;
    c9f6:	f7 01       	movw	r30, r14
    c9f8:	14 82       	std	Z+4, r1	; 0x04
			player->shared.vx = SPACE_SHIP_SPEED;
    c9fa:	3c e3       	ldi	r19, 0x3C	; 60
    c9fc:	35 83       	std	Z+5, r19	; 0x05
			
			if ((player->controls.held & BTN_DOWN) && (player->shared.y/8 + 1 < game.level_height))
    c9fe:	ef 58       	subi	r30, 0x8F	; 143
    ca00:	ff 4f       	sbci	r31, 0xFF	; 255
    ca02:	20 81       	ld	r18, Z
    ca04:	25 ff       	sbrs	r18, 5
    ca06:	10 c0       	rjmp	.+32     	; 0xca28 <update_player+0x94>
    ca08:	f7 01       	movw	r30, r14
    ca0a:	82 81       	ldd	r24, Z+2	; 0x02
    ca0c:	93 81       	ldd	r25, Z+3	; 0x03
    ca0e:	63 e0       	ldi	r22, 0x03	; 3
    ca10:	96 95       	lsr	r25
    ca12:	87 95       	ror	r24
    ca14:	6a 95       	dec	r22
    ca16:	e1 f7       	brne	.-8      	; 0xca10 <update_player+0x7c>
    ca18:	01 96       	adiw	r24, 0x01	; 1
    ca1a:	40 91 bf 0d 	lds	r20, 0x0DBF
    ca1e:	50 e0       	ldi	r21, 0x00	; 0
    ca20:	84 17       	cp	r24, r20
    ca22:	95 07       	cpc	r25, r21
    ca24:	08 f4       	brcc	.+2      	; 0xca28 <update_player+0x94>
			{
				player->shared.vy = SPACE_SHIP_SPEED;
    ca26:	34 83       	std	Z+4, r19	; 0x04
			}
			if ((player->controls.held & BTN_RIGHT) && (player->shared.x + 24 < game.camera_x + CAMERA_WIDTH*8))
    ca28:	27 ff       	sbrs	r18, 7
    ca2a:	10 c0       	rjmp	.+32     	; 0xca4c <update_player+0xb8>
    ca2c:	f7 01       	movw	r30, r14
    ca2e:	40 81       	ld	r20, Z
    ca30:	51 81       	ldd	r21, Z+1	; 0x01
    ca32:	48 5e       	subi	r20, 0xE8	; 232
    ca34:	5f 4f       	sbci	r21, 0xFF	; 255
    ca36:	80 91 af 0d 	lds	r24, 0x0DAF
    ca3a:	90 91 b0 0d 	lds	r25, 0x0DB0
    ca3e:	80 52       	subi	r24, 0x20	; 32
    ca40:	9f 4f       	sbci	r25, 0xFF	; 255
    ca42:	48 17       	cp	r20, r24
    ca44:	59 07       	cpc	r21, r25
    ca46:	10 f4       	brcc	.+4      	; 0xca4c <update_player+0xb8>
			{
				player->shared.vx = SPACE_SHIP_SPEED*2;
    ca48:	88 e7       	ldi	r24, 0x78	; 120
    ca4a:	85 83       	std	Z+5, r24	; 0x05
			}
			if ((player->controls.held & BTN_LEFT) && (player->shared.x > game.camera_x))
    ca4c:	26 ff       	sbrs	r18, 6
    ca4e:	0b c0       	rjmp	.+22     	; 0xca66 <update_player+0xd2>
    ca50:	f7 01       	movw	r30, r14
    ca52:	40 81       	ld	r20, Z
    ca54:	51 81       	ldd	r21, Z+1	; 0x01
    ca56:	80 91 af 0d 	lds	r24, 0x0DAF
    ca5a:	90 91 b0 0d 	lds	r25, 0x0DB0
    ca5e:	84 17       	cp	r24, r20
    ca60:	95 07       	cpc	r25, r21
    ca62:	08 f4       	brcc	.+2      	; 0xca66 <update_player+0xd2>
			{
				player->shared.vx = 0;
    ca64:	15 82       	std	Z+5, r1	; 0x05
			}
			if ((player->controls.held & BTN_UP) && (player->shared.y > 0))
    ca66:	24 ff       	sbrs	r18, 4
    ca68:	07 c0       	rjmp	.+14     	; 0xca78 <update_player+0xe4>
    ca6a:	f7 01       	movw	r30, r14
    ca6c:	82 81       	ldd	r24, Z+2	; 0x02
    ca6e:	93 81       	ldd	r25, Z+3	; 0x03
    ca70:	89 2b       	or	r24, r25
    ca72:	11 f0       	breq	.+4      	; 0xca78 <update_player+0xe4>
			{
				player->shared.vy = -SPACE_SHIP_SPEED;
    ca74:	84 ec       	ldi	r24, 0xC4	; 196
    ca76:	84 83       	std	Z+4, r24	; 0x04
			}
		}
		LBMapSprite(slot, LBGetNextFrame(&player->run), 0);
    ca78:	c7 01       	movw	r24, r14
    ca7a:	83 5b       	subi	r24, 0xB3	; 179
    ca7c:	9f 4f       	sbci	r25, 0xFF	; 255
    ca7e:	43 c1       	rjmp	.+646    	; 0xcd06 <update_player+0x372>
	}
	else if (player->flags & (IDLE|RUNNING))
    ca80:	80 2f       	mov	r24, r16
    ca82:	8a 70       	andi	r24, 0x0A	; 10
    ca84:	09 f4       	brne	.+2      	; 0xca88 <update_player+0xf4>
    ca86:	96 c0       	rjmp	.+300    	; 0xcbb4 <update_player+0x220>
	{
		if (!on_solid_ground(&player->shared, player->width, player->height))
    ca88:	f7 01       	movw	r30, r14
    ca8a:	44 85       	ldd	r20, Z+12	; 0x0c
    ca8c:	63 85       	ldd	r22, Z+11	; 0x0b
    ca8e:	c7 01       	movw	r24, r14
    ca90:	0e 94 31 56 	call	0xac62	; 0xac62 <on_solid_ground>
    ca94:	81 11       	cpse	r24, r1
    ca96:	06 c0       	rjmp	.+12     	; 0xcaa4 <update_player+0x110>
		{
			player->shared.gravity = GRAVITY;
    ca98:	88 ec       	ldi	r24, 0xC8	; 200
    ca9a:	f7 01       	movw	r30, r14
    ca9c:	86 83       	std	Z+6, r24	; 0x06
			player->flags = JUMPING;
    ca9e:	81 e0       	ldi	r24, 0x01	; 1
    caa0:	80 87       	std	Z+8, r24	; 0x08
    caa2:	0f c1       	rjmp	.+542    	; 0xccc2 <update_player+0x32e>
			LBMapSprite(slot, LBGetNextFrame(&player->jump), extendedSprites[slot].flags);
		}
		else
		{
			if (player->controls.held & BTN_DOWN)
    caa4:	f7 01       	movw	r30, r14
    caa6:	ef 58       	subi	r30, 0x8F	; 143
    caa8:	ff 4f       	sbci	r31, 0xFF	; 255
    caaa:	20 81       	ld	r18, Z
    caac:	25 ff       	sbrs	r18, 5
    caae:	25 c0       	rjmp	.+74     	; 0xcafa <update_player+0x166>
			{
				player->shared.y += 16;
    cab0:	f7 01       	movw	r30, r14
    cab2:	82 81       	ldd	r24, Z+2	; 0x02
    cab4:	93 81       	ldd	r25, Z+3	; 0x03
    cab6:	40 96       	adiw	r24, 0x10	; 16
    cab8:	93 83       	std	Z+3, r25	; 0x03
    caba:	82 83       	std	Z+2, r24	; 0x02
				if(player->direction == D_RIGHT)
    cabc:	82 85       	ldd	r24, Z+10	; 0x0a
    cabe:	81 30       	cpi	r24, 0x01	; 1
    cac0:	29 f4       	brne	.+10     	; 0xcacc <update_player+0x138>
				{
					player->shared.x -= 8;
    cac2:	80 81       	ld	r24, Z
    cac4:	91 81       	ldd	r25, Z+1	; 0x01
    cac6:	08 97       	sbiw	r24, 0x08	; 8
    cac8:	91 83       	std	Z+1, r25	; 0x01
    caca:	80 83       	st	Z, r24
				}
				player->shared.vx = 0;
    cacc:	f7 01       	movw	r30, r14
    cace:	15 82       	std	Z+5, r1	; 0x05
				player->flags = PRONE;
    cad0:	84 e0       	ldi	r24, 0x04	; 4
    cad2:	80 87       	std	Z+8, r24	; 0x08
				player->width = 3;
    cad4:	83 e0       	ldi	r24, 0x03	; 3
    cad6:	83 87       	std	Z+11, r24	; 0x0b
				player->height = 1;
    cad8:	81 e0       	ldi	r24, 0x01	; 1
    cada:	84 87       	std	Z+12, r24	; 0x0c
				clear_sprites(3, 3);
    cadc:	63 e0       	ldi	r22, 0x03	; 3
    cade:	83 e0       	ldi	r24, 0x03	; 3
    cae0:	0e 94 de 5d 	call	0xbbbc	; 0xbbbc <clear_sprites>
				LBMapSprite(slot, LBGetNextFrame(&player->prone), extendedSprites[slot].flags);
    cae4:	24 e0       	ldi	r18, 0x04	; 4
    cae6:	12 9f       	mul	r17, r18
    cae8:	f0 01       	movw	r30, r0
    caea:	11 24       	eor	r1, r1
    caec:	e2 54       	subi	r30, 0x42	; 66
    caee:	f0 4f       	sbci	r31, 0xF0	; 240
    caf0:	43 81       	ldd	r20, Z+3	; 0x03
    caf2:	c7 01       	movw	r24, r14
    caf4:	83 5a       	subi	r24, 0xA3	; 163
    caf6:	9f 4f       	sbci	r25, 0xFF	; 255
    caf8:	44 c0       	rjmp	.+136    	; 0xcb82 <update_player+0x1ee>
			}
			else if ((player->controls.held & BTN_RIGHT) && (player->shared.x/8 + 2 < game.level_width))
    cafa:	27 ff       	sbrs	r18, 7
    cafc:	1c c0       	rjmp	.+56     	; 0xcb36 <update_player+0x1a2>
    cafe:	f7 01       	movw	r30, r14
    cb00:	80 81       	ld	r24, Z
    cb02:	91 81       	ldd	r25, Z+1	; 0x01
    cb04:	53 e0       	ldi	r21, 0x03	; 3
    cb06:	96 95       	lsr	r25
    cb08:	87 95       	ror	r24
    cb0a:	5a 95       	dec	r21
    cb0c:	e1 f7       	brne	.-8      	; 0xcb06 <update_player+0x172>
    cb0e:	02 96       	adiw	r24, 0x02	; 2
    cb10:	40 91 be 0d 	lds	r20, 0x0DBE
    cb14:	50 e0       	ldi	r21, 0x00	; 0
    cb16:	84 17       	cp	r24, r20
    cb18:	95 07       	cpc	r25, r21
    cb1a:	68 f4       	brcc	.+26     	; 0xcb36 <update_player+0x1a2>
			{
				player->shared.vx = RUN_SPEED;
    cb1c:	8c e3       	ldi	r24, 0x3C	; 60
    cb1e:	85 83       	std	Z+5, r24	; 0x05
				player->flags = RUNNING;
    cb20:	82 e0       	ldi	r24, 0x02	; 2
    cb22:	80 87       	std	Z+8, r24	; 0x08
				player->direction = D_RIGHT;
    cb24:	81 e0       	ldi	r24, 0x01	; 1
    cb26:	82 87       	std	Z+10, r24	; 0x0a
				LBMapSprite(slot, LBGetNextFrame(&player->run), 0);
    cb28:	c7 01       	movw	r24, r14
    cb2a:	83 5b       	subi	r24, 0xB3	; 179
    cb2c:	9f 4f       	sbci	r25, 0xFF	; 255
    cb2e:	0e 94 0d 4f 	call	0x9e1a	; 0x9e1a <LBGetNextFrame>
    cb32:	40 e0       	ldi	r20, 0x00	; 0
    cb34:	2a c0       	rjmp	.+84     	; 0xcb8a <update_player+0x1f6>
			}
			else if ((player->controls.held & BTN_LEFT) && (player->shared.x > game.camera_x))
    cb36:	26 ff       	sbrs	r18, 6
    cb38:	16 c0       	rjmp	.+44     	; 0xcb66 <update_player+0x1d2>
    cb3a:	f7 01       	movw	r30, r14
    cb3c:	20 81       	ld	r18, Z
    cb3e:	31 81       	ldd	r19, Z+1	; 0x01
    cb40:	80 91 af 0d 	lds	r24, 0x0DAF
    cb44:	90 91 b0 0d 	lds	r25, 0x0DB0
    cb48:	82 17       	cp	r24, r18
    cb4a:	93 07       	cpc	r25, r19
    cb4c:	60 f4       	brcc	.+24     	; 0xcb66 <update_player+0x1d2>
			{
				player->shared.vx = -RUN_SPEED;
    cb4e:	84 ec       	ldi	r24, 0xC4	; 196
    cb50:	85 83       	std	Z+5, r24	; 0x05
				player->flags = RUNNING;
    cb52:	82 e0       	ldi	r24, 0x02	; 2
    cb54:	80 87       	std	Z+8, r24	; 0x08
				player->direction = D_LEFT;
    cb56:	12 86       	std	Z+10, r1	; 0x0a
				LBMapSprite(slot, LBGetNextFrame(&player->run), SPRITE_FLIP_X);
    cb58:	c7 01       	movw	r24, r14
    cb5a:	83 5b       	subi	r24, 0xB3	; 179
    cb5c:	9f 4f       	sbci	r25, 0xFF	; 255
    cb5e:	0e 94 0d 4f 	call	0x9e1a	; 0x9e1a <LBGetNextFrame>
    cb62:	41 e0       	ldi	r20, 0x01	; 1
    cb64:	12 c0       	rjmp	.+36     	; 0xcb8a <update_player+0x1f6>
			}
			else
			{
				player->flags = IDLE;
    cb66:	88 e0       	ldi	r24, 0x08	; 8
    cb68:	f7 01       	movw	r30, r14
    cb6a:	80 87       	std	Z+8, r24	; 0x08
				player->shared.vx = 0;
    cb6c:	15 82       	std	Z+5, r1	; 0x05
				LBMapSprite(slot, LBGetNextFrame(&player->idle), extendedSprites[slot].flags);
    cb6e:	24 e0       	ldi	r18, 0x04	; 4
    cb70:	12 9f       	mul	r17, r18
    cb72:	f0 01       	movw	r30, r0
    cb74:	11 24       	eor	r1, r1
    cb76:	e2 54       	subi	r30, 0x42	; 66
    cb78:	f0 4f       	sbci	r31, 0xF0	; 240
    cb7a:	43 81       	ldd	r20, Z+3	; 0x03
    cb7c:	c7 01       	movw	r24, r14
    cb7e:	8b 5b       	subi	r24, 0xBB	; 187
    cb80:	9f 4f       	sbci	r25, 0xFF	; 255
    cb82:	49 83       	std	Y+1, r20	; 0x01
    cb84:	0e 94 0d 4f 	call	0x9e1a	; 0x9e1a <LBGetNextFrame>
    cb88:	49 81       	ldd	r20, Y+1	; 0x01
    cb8a:	bc 01       	movw	r22, r24
    cb8c:	81 2f       	mov	r24, r17
    cb8e:	0e 94 73 50 	call	0xa0e6	; 0xa0e6 <LBMapSprite>
			}
			if (player->controls.pressed & BTN_B && !(player->flags & PRONE))
    cb92:	f7 01       	movw	r30, r14
    cb94:	e3 59       	subi	r30, 0x93	; 147
    cb96:	ff 4f       	sbci	r31, 0xFF	; 255
    cb98:	80 81       	ld	r24, Z
    cb9a:	80 ff       	sbrs	r24, 0
    cb9c:	bb c0       	rjmp	.+374    	; 0xcd14 <update_player+0x380>
    cb9e:	f7 01       	movw	r30, r14
    cba0:	80 85       	ldd	r24, Z+8	; 0x08
    cba2:	82 fd       	sbrc	r24, 2
    cba4:	b7 c0       	rjmp	.+366    	; 0xcd14 <update_player+0x380>
			{
				player->shared.vy = -JUMP_SPEED;
    cba6:	81 e8       	ldi	r24, 0x81	; 129
    cba8:	84 83       	std	Z+4, r24	; 0x04
				player->shared.gravity = GRAVITY;
    cbaa:	88 ec       	ldi	r24, 0xC8	; 200
    cbac:	86 83       	std	Z+6, r24	; 0x06
				player->flags = JUMPING;
    cbae:	81 e0       	ldi	r24, 0x01	; 1
    cbb0:	80 87       	std	Z+8, r24	; 0x08
    cbb2:	83 c0       	rjmp	.+262    	; 0xccba <update_player+0x326>
				player->height = 3;
				LBMapSprite(slot, LBGetNextFrame(&player->jump), extendedSprites[slot].flags);
			}
		}
	}
	else if (player->flags & JUMPING)
    cbb4:	00 ff       	sbrs	r16, 0
    cbb6:	4c c0       	rjmp	.+152    	; 0xcc50 <update_player+0x2bc>
	{
		if ((player->controls.held & BTN_RIGHT) && (player->shared.x/8 + 2 < game.level_width))
    cbb8:	f7 01       	movw	r30, r14
    cbba:	ef 58       	subi	r30, 0x8F	; 143
    cbbc:	ff 4f       	sbci	r31, 0xFF	; 255
    cbbe:	60 81       	ld	r22, Z
    cbc0:	c7 01       	movw	r24, r14
    cbc2:	8b 5a       	subi	r24, 0xAB	; 171
    cbc4:	9f 4f       	sbci	r25, 0xFF	; 255
    cbc6:	67 ff       	sbrs	r22, 7
    cbc8:	18 c0       	rjmp	.+48     	; 0xcbfa <update_player+0x266>
    cbca:	f7 01       	movw	r30, r14
    cbcc:	20 81       	ld	r18, Z
    cbce:	31 81       	ldd	r19, Z+1	; 0x01
    cbd0:	43 e0       	ldi	r20, 0x03	; 3
    cbd2:	36 95       	lsr	r19
    cbd4:	27 95       	ror	r18
    cbd6:	4a 95       	dec	r20
    cbd8:	e1 f7       	brne	.-8      	; 0xcbd2 <update_player+0x23e>
    cbda:	2e 5f       	subi	r18, 0xFE	; 254
    cbdc:	3f 4f       	sbci	r19, 0xFF	; 255
    cbde:	40 91 be 0d 	lds	r20, 0x0DBE
    cbe2:	50 e0       	ldi	r21, 0x00	; 0
    cbe4:	24 17       	cp	r18, r20
    cbe6:	35 07       	cpc	r19, r21
    cbe8:	40 f4       	brcc	.+16     	; 0xcbfa <update_player+0x266>
		{
			player->shared.vx = RUN_SPEED;
    cbea:	2c e3       	ldi	r18, 0x3C	; 60
    cbec:	25 83       	std	Z+5, r18	; 0x05
			player->direction = D_RIGHT;
    cbee:	21 e0       	ldi	r18, 0x01	; 1
    cbf0:	22 87       	std	Z+10, r18	; 0x0a
			LBMapSprite(slot, LBGetNextFrame(&player->jump), 0);
    cbf2:	0e 94 0d 4f 	call	0x9e1a	; 0x9e1a <LBGetNextFrame>
    cbf6:	40 e0       	ldi	r20, 0x00	; 0
    cbf8:	20 c0       	rjmp	.+64     	; 0xcc3a <update_player+0x2a6>
		}
		else if ((player->controls.held & BTN_LEFT) && (player->shared.x > game.camera_x))
    cbfa:	66 ff       	sbrs	r22, 6
    cbfc:	11 c0       	rjmp	.+34     	; 0xcc20 <update_player+0x28c>
    cbfe:	f7 01       	movw	r30, r14
    cc00:	40 81       	ld	r20, Z
    cc02:	51 81       	ldd	r21, Z+1	; 0x01
    cc04:	20 91 af 0d 	lds	r18, 0x0DAF
    cc08:	30 91 b0 0d 	lds	r19, 0x0DB0
    cc0c:	24 17       	cp	r18, r20
    cc0e:	35 07       	cpc	r19, r21
    cc10:	38 f4       	brcc	.+14     	; 0xcc20 <update_player+0x28c>
		{
			player->shared.vx = -RUN_SPEED;
    cc12:	24 ec       	ldi	r18, 0xC4	; 196
    cc14:	25 83       	std	Z+5, r18	; 0x05
			player->direction = D_LEFT;
    cc16:	12 86       	std	Z+10, r1	; 0x0a
			LBMapSprite(slot, LBGetNextFrame(&player->jump), SPRITE_FLIP_X);
    cc18:	0e 94 0d 4f 	call	0x9e1a	; 0x9e1a <LBGetNextFrame>
    cc1c:	41 e0       	ldi	r20, 0x01	; 1
    cc1e:	0d c0       	rjmp	.+26     	; 0xcc3a <update_player+0x2a6>
		}
		else
		{
			player->shared.vx = 0;
    cc20:	f7 01       	movw	r30, r14
    cc22:	15 82       	std	Z+5, r1	; 0x05
			LBMapSprite(slot, LBGetNextFrame(&player->jump), extendedSprites[slot].flags);
    cc24:	24 e0       	ldi	r18, 0x04	; 4
    cc26:	12 9f       	mul	r17, r18
    cc28:	f0 01       	movw	r30, r0
    cc2a:	11 24       	eor	r1, r1
    cc2c:	e2 54       	subi	r30, 0x42	; 66
    cc2e:	f0 4f       	sbci	r31, 0xF0	; 240
    cc30:	43 81       	ldd	r20, Z+3	; 0x03
    cc32:	49 83       	std	Y+1, r20	; 0x01
    cc34:	0e 94 0d 4f 	call	0x9e1a	; 0x9e1a <LBGetNextFrame>
    cc38:	49 81       	ldd	r20, Y+1	; 0x01
    cc3a:	bc 01       	movw	r22, r24
    cc3c:	81 2f       	mov	r24, r17
    cc3e:	0e 94 73 50 	call	0xa0e6	; 0xa0e6 <LBMapSprite>
		}
		
		if (player->shared.gravity == 0)
    cc42:	f7 01       	movw	r30, r14
    cc44:	86 81       	ldd	r24, Z+6	; 0x06
    cc46:	81 11       	cpse	r24, r1
    cc48:	65 c0       	rjmp	.+202    	; 0xcd14 <update_player+0x380>
		{
			player->flags = IDLE;
    cc4a:	88 e0       	ldi	r24, 0x08	; 8
    cc4c:	80 87       	std	Z+8, r24	; 0x08
    cc4e:	62 c0       	rjmp	.+196    	; 0xcd14 <update_player+0x380>
		}
	}
	else if (player->flags & PRONE)
    cc50:	02 ff       	sbrs	r16, 2
    cc52:	60 c0       	rjmp	.+192    	; 0xcd14 <update_player+0x380>
	{
		if (player->controls.pressed & BTN_UP)
    cc54:	f7 01       	movw	r30, r14
    cc56:	e3 59       	subi	r30, 0x93	; 147
    cc58:	ff 4f       	sbci	r31, 0xFF	; 255
    cc5a:	80 81       	ld	r24, Z
    cc5c:	84 ff       	sbrs	r24, 4
    cc5e:	16 c0       	rjmp	.+44     	; 0xcc8c <update_player+0x2f8>
		{
			player->flags = IDLE;	
    cc60:	88 e0       	ldi	r24, 0x08	; 8
    cc62:	f7 01       	movw	r30, r14
    cc64:	80 87       	std	Z+8, r24	; 0x08
			player->shared.y -= 16;
    cc66:	82 81       	ldd	r24, Z+2	; 0x02
    cc68:	93 81       	ldd	r25, Z+3	; 0x03
    cc6a:	40 97       	sbiw	r24, 0x10	; 16
    cc6c:	93 83       	std	Z+3, r25	; 0x03
    cc6e:	82 83       	std	Z+2, r24	; 0x02
			if(player->direction == D_RIGHT)
    cc70:	82 85       	ldd	r24, Z+10	; 0x0a
    cc72:	81 30       	cpi	r24, 0x01	; 1
    cc74:	29 f4       	brne	.+10     	; 0xcc80 <update_player+0x2ec>
			{
				player->shared.x += 8;
    cc76:	80 81       	ld	r24, Z
    cc78:	91 81       	ldd	r25, Z+1	; 0x01
    cc7a:	08 96       	adiw	r24, 0x08	; 8
    cc7c:	91 83       	std	Z+1, r25	; 0x01
    cc7e:	80 83       	st	Z, r24
			}
			player->width = 2;
    cc80:	82 e0       	ldi	r24, 0x02	; 2
    cc82:	f7 01       	movw	r30, r14
    cc84:	83 87       	std	Z+11, r24	; 0x0b
			player->height = 3;
    cc86:	83 e0       	ldi	r24, 0x03	; 3
    cc88:	84 87       	std	Z+12, r24	; 0x0c
    cc8a:	44 c0       	rjmp	.+136    	; 0xcd14 <update_player+0x380>
		}
		else if (player->controls.pressed & BTN_B)
    cc8c:	80 ff       	sbrs	r24, 0
    cc8e:	28 c0       	rjmp	.+80     	; 0xcce0 <update_player+0x34c>
		{
			player->flags = JUMPING;
    cc90:	81 e0       	ldi	r24, 0x01	; 1
    cc92:	f7 01       	movw	r30, r14
    cc94:	80 87       	std	Z+8, r24	; 0x08
			player->shared.y -= 16;
    cc96:	82 81       	ldd	r24, Z+2	; 0x02
    cc98:	93 81       	ldd	r25, Z+3	; 0x03
    cc9a:	40 97       	sbiw	r24, 0x10	; 16
    cc9c:	93 83       	std	Z+3, r25	; 0x03
    cc9e:	82 83       	std	Z+2, r24	; 0x02
			if(player->direction == D_RIGHT)
    cca0:	82 85       	ldd	r24, Z+10	; 0x0a
    cca2:	81 30       	cpi	r24, 0x01	; 1
    cca4:	29 f4       	brne	.+10     	; 0xccb0 <update_player+0x31c>
			{
				player->shared.x += 8;
    cca6:	80 81       	ld	r24, Z
    cca8:	91 81       	ldd	r25, Z+1	; 0x01
    ccaa:	08 96       	adiw	r24, 0x08	; 8
    ccac:	91 83       	std	Z+1, r25	; 0x01
    ccae:	80 83       	st	Z, r24
			}
			player->shared.vy = -JUMP_SPEED;
    ccb0:	81 e8       	ldi	r24, 0x81	; 129
    ccb2:	f7 01       	movw	r30, r14
    ccb4:	84 83       	std	Z+4, r24	; 0x04
			player->shared.gravity = GRAVITY;
    ccb6:	88 ec       	ldi	r24, 0xC8	; 200
    ccb8:	86 83       	std	Z+6, r24	; 0x06
			player->width = 2;
    ccba:	82 e0       	ldi	r24, 0x02	; 2
    ccbc:	83 87       	std	Z+11, r24	; 0x0b
			player->height = 3;
    ccbe:	83 e0       	ldi	r24, 0x03	; 3
    ccc0:	84 87       	std	Z+12, r24	; 0x0c
			LBMapSprite(slot, LBGetNextFrame(&player->jump), extendedSprites[slot].flags);
    ccc2:	24 e0       	ldi	r18, 0x04	; 4
    ccc4:	12 9f       	mul	r17, r18
    ccc6:	f0 01       	movw	r30, r0
    ccc8:	11 24       	eor	r1, r1
    ccca:	e2 54       	subi	r30, 0x42	; 66
    cccc:	f0 4f       	sbci	r31, 0xF0	; 240
    ccce:	43 81       	ldd	r20, Z+3	; 0x03
    ccd0:	c7 01       	movw	r24, r14
    ccd2:	8b 5a       	subi	r24, 0xAB	; 171
    ccd4:	9f 4f       	sbci	r25, 0xFF	; 255
    ccd6:	49 83       	std	Y+1, r20	; 0x01
    ccd8:	0e 94 0d 4f 	call	0x9e1a	; 0x9e1a <LBGetNextFrame>
    ccdc:	49 81       	ldd	r20, Y+1	; 0x01
    ccde:	16 c0       	rjmp	.+44     	; 0xcd0c <update_player+0x378>
		}
		else if (player->controls.pressed & BTN_LEFT)
    cce0:	86 ff       	sbrs	r24, 6
    cce2:	09 c0       	rjmp	.+18     	; 0xccf6 <update_player+0x362>
		{
			player->direction = D_LEFT;
    cce4:	f7 01       	movw	r30, r14
    cce6:	12 86       	std	Z+10, r1	; 0x0a
			LBMapSprite(slot, LBGetNextFrame(&player->prone), SPRITE_FLIP_X);
    cce8:	c7 01       	movw	r24, r14
    ccea:	83 5a       	subi	r24, 0xA3	; 163
    ccec:	9f 4f       	sbci	r25, 0xFF	; 255
    ccee:	0e 94 0d 4f 	call	0x9e1a	; 0x9e1a <LBGetNextFrame>
    ccf2:	41 e0       	ldi	r20, 0x01	; 1
    ccf4:	0b c0       	rjmp	.+22     	; 0xcd0c <update_player+0x378>
		}
		else if (player->controls.pressed & BTN_RIGHT)
    ccf6:	87 ff       	sbrs	r24, 7
    ccf8:	0d c0       	rjmp	.+26     	; 0xcd14 <update_player+0x380>
		{
			player->direction = D_RIGHT;
    ccfa:	81 e0       	ldi	r24, 0x01	; 1
    ccfc:	f7 01       	movw	r30, r14
    ccfe:	82 87       	std	Z+10, r24	; 0x0a
			LBMapSprite(slot, LBGetNextFrame(&player->prone), 0);
    cd00:	c7 01       	movw	r24, r14
    cd02:	83 5a       	subi	r24, 0xA3	; 163
    cd04:	9f 4f       	sbci	r25, 0xFF	; 255
    cd06:	0e 94 0d 4f 	call	0x9e1a	; 0x9e1a <LBGetNextFrame>
    cd0a:	40 e0       	ldi	r20, 0x00	; 0
    cd0c:	bc 01       	movw	r22, r24
    cd0e:	81 2f       	mov	r24, r17
    cd10:	0e 94 73 50 	call	0xa0e6	; 0xa0e6 <LBMapSprite>
		}
	}
	return 1;
}
    cd14:	81 e0       	ldi	r24, 0x01	; 1
    cd16:	0f 90       	pop	r0
    cd18:	df 91       	pop	r29
    cd1a:	cf 91       	pop	r28
    cd1c:	1f 91       	pop	r17
    cd1e:	0f 91       	pop	r16
    cd20:	ff 90       	pop	r15
    cd22:	ef 90       	pop	r14
    cd24:	08 95       	ret

0000cd26 <update_level>:
		}
	}
}

void update_level()
{
    cd26:	cf 92       	push	r12
    cd28:	df 92       	push	r13
    cd2a:	ef 92       	push	r14
    cd2c:	ff 92       	push	r15
    cd2e:	0f 93       	push	r16
    cd30:	cf 93       	push	r28
    cd32:	df 93       	push	r29
	u8 ship_x = game.player.shared.x - game.camera_x;
    cd34:	e0 90 cd 0d 	lds	r14, 0x0DCD
    cd38:	f0 90 ce 0d 	lds	r15, 0x0DCE
    cd3c:	c0 90 af 0d 	lds	r12, 0x0DAF
    cd40:	d0 90 b0 0d 	lds	r13, 0x0DB0
	u8 ship_y = 0;
	char ship_increment = 3;
	
	game.frame_counter++;
    cd44:	80 91 c9 0d 	lds	r24, 0x0DC9
    cd48:	8f 5f       	subi	r24, 0xFF	; 255
	if (game.frame_counter == 60)
    cd4a:	8c 33       	cpi	r24, 0x3C	; 60
    cd4c:	19 f0       	breq	.+6      	; 0xcd54 <update_level+0x2e>
{
	u8 ship_x = game.player.shared.x - game.camera_x;
	u8 ship_y = 0;
	char ship_increment = 3;
	
	game.frame_counter++;
    cd4e:	80 93 c9 0d 	sts	0x0DC9, r24
    cd52:	0f c0       	rjmp	.+30     	; 0xcd72 <update_level+0x4c>
	if (game.frame_counter == 60)
	{
		game.frame_counter = 0;
    cd54:	10 92 c9 0d 	sts	0x0DC9, r1
		if (game.time != 65535) game.time++;
    cd58:	80 91 b5 0d 	lds	r24, 0x0DB5
    cd5c:	90 91 b6 0d 	lds	r25, 0x0DB6
    cd60:	8f 3f       	cpi	r24, 0xFF	; 255
    cd62:	2f ef       	ldi	r18, 0xFF	; 255
    cd64:	92 07       	cpc	r25, r18
    cd66:	29 f0       	breq	.+10     	; 0xcd72 <update_level+0x4c>
    cd68:	01 96       	adiw	r24, 0x01	; 1
    cd6a:	90 93 b6 0d 	sts	0x0DB6, r25
    cd6e:	80 93 b5 0d 	sts	0x0DB5, r24
	}
	
	if (is_space())
    cd72:	0e 94 37 51 	call	0xa26e	; 0xa26e <is_space>
    cd76:	88 23       	and	r24, r24
    cd78:	19 f1       	breq	.+70     	; 0xcdc0 <update_level+0x9a>
	{
		if (game.camera_x/8 + CAMERA_WIDTH < game.level_width)
    cd7a:	96 01       	movw	r18, r12
    cd7c:	93 e0       	ldi	r25, 0x03	; 3
    cd7e:	36 95       	lsr	r19
    cd80:	27 95       	ror	r18
    cd82:	9a 95       	dec	r25
    cd84:	e1 f7       	brne	.-8      	; 0xcd7e <update_level+0x58>
    cd86:	24 5e       	subi	r18, 0xE4	; 228
    cd88:	3f 4f       	sbci	r19, 0xFF	; 255
    cd8a:	80 91 be 0d 	lds	r24, 0x0DBE
    cd8e:	90 e0       	ldi	r25, 0x00	; 0
    cd90:	28 17       	cp	r18, r24
    cd92:	39 07       	cpc	r19, r25
    cd94:	18 f4       	brcc	.+6      	; 0xcd9c <update_level+0x76>
		{
			move_camera_x();
    cd96:	0e 94 de 55 	call	0xabbc	; 0xabbc <move_camera_x>
    cd9a:	2a c0       	rjmp	.+84     	; 0xcdf0 <update_level+0xca>
    cd9c:	80 91 d5 0d 	lds	r24, 0x0DD5
		}
		else if (game.player.shared.x >= game.camera_x+CAMERA_WIDTH*8)
    cda0:	96 01       	movw	r18, r12
    cda2:	20 52       	subi	r18, 0x20	; 32
    cda4:	3f 4f       	sbci	r19, 0xFF	; 255
    cda6:	e2 16       	cp	r14, r18
    cda8:	f3 06       	cpc	r15, r19
    cdaa:	30 f0       	brcs	.+12     	; 0xcdb8 <update_level+0x92>
		{
			game.level_ended = 1;
    cdac:	91 e0       	ldi	r25, 0x01	; 1
    cdae:	90 93 cc 0d 	sts	0x0DCC, r25
			game.player.flags ^= END_OF_SPACE;
    cdb2:	90 e2       	ldi	r25, 0x20	; 32
    cdb4:	89 27       	eor	r24, r25
    cdb6:	01 c0       	rjmp	.+2      	; 0xcdba <update_level+0x94>
		} else {
			game.player.flags |= END_OF_SPACE;
    cdb8:	80 62       	ori	r24, 0x20	; 32
    cdba:	80 93 d5 0d 	sts	0x0DD5, r24
    cdbe:	18 c0       	rjmp	.+48     	; 0xcdf0 <update_level+0xca>
		}
	}
	else if (game.player.shared.vx > 0 &&
    cdc0:	80 91 d2 0d 	lds	r24, 0x0DD2
    cdc4:	18 16       	cp	r1, r24
    cdc6:	a4 f4       	brge	.+40     	; 0xcdf0 <update_level+0xca>
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
    cdc8:	c7 01       	movw	r24, r14
    cdca:	8c 19       	sub	r24, r12
    cdcc:	9d 09       	sbc	r25, r13
			game.player.flags ^= END_OF_SPACE;
		} else {
			game.player.flags |= END_OF_SPACE;
		}
	}
	else if (game.player.shared.vx > 0 &&
    cdce:	80 37       	cpi	r24, 0x70	; 112
    cdd0:	91 05       	cpc	r25, r1
    cdd2:	70 f0       	brcs	.+28     	; 0xcdf0 <update_level+0xca>
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
		(game.camera_x/8 + CAMERA_WIDTH < game.level_width))
    cdd4:	96 01       	movw	r18, r12
    cdd6:	83 e0       	ldi	r24, 0x03	; 3
    cdd8:	36 95       	lsr	r19
    cdda:	27 95       	ror	r18
    cddc:	8a 95       	dec	r24
    cdde:	e1 f7       	brne	.-8      	; 0xcdd8 <update_level+0xb2>
    cde0:	24 5e       	subi	r18, 0xE4	; 228
    cde2:	3f 4f       	sbci	r19, 0xFF	; 255
    cde4:	80 91 be 0d 	lds	r24, 0x0DBE
    cde8:	90 e0       	ldi	r25, 0x00	; 0
		} else {
			game.player.flags |= END_OF_SPACE;
		}
	}
	else if (game.player.shared.vx > 0 &&
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
    cdea:	28 17       	cp	r18, r24
    cdec:	39 07       	cpc	r19, r25
    cdee:	98 f2       	brcs	.-90     	; 0xcd96 <update_level+0x70>
	{
		move_camera_x();
	}
	
	// Score
	LBPrintByte(9, VRAM_TILES_V-3, game.player.shield ,true);
    cdf0:	21 e0       	ldi	r18, 0x01	; 1
    cdf2:	40 91 db 0d 	lds	r20, 0x0DDB
    cdf6:	6d e1       	ldi	r22, 0x1D	; 29
    cdf8:	89 e0       	ldi	r24, 0x09	; 9
    cdfa:	0e 94 ba 4f 	call	0x9f74	; 0x9f74 <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-3, game.time ,true);
    cdfe:	40 91 b5 0d 	lds	r20, 0x0DB5
    ce02:	50 91 b6 0d 	lds	r21, 0x0DB6
    ce06:	21 e0       	ldi	r18, 0x01	; 1
    ce08:	6d e1       	ldi	r22, 0x1D	; 29
    ce0a:	8b e1       	ldi	r24, 0x1B	; 27
    ce0c:	0e 94 eb 4f 	call	0x9fd6	; 0x9fd6 <LBPrintInt>
	LBPrintByte(9, VRAM_TILES_V-2, game.lives ,true);
    ce10:	21 e0       	ldi	r18, 0x01	; 1
    ce12:	40 91 c2 0d 	lds	r20, 0x0DC2
    ce16:	6e e1       	ldi	r22, 0x1E	; 30
    ce18:	89 e0       	ldi	r24, 0x09	; 9
    ce1a:	0e 94 ba 4f 	call	0x9f74	; 0x9f74 <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-2, game.level_score ,true);
    ce1e:	40 91 b3 0d 	lds	r20, 0x0DB3
    ce22:	50 91 b4 0d 	lds	r21, 0x0DB4
    ce26:	21 e0       	ldi	r18, 0x01	; 1
    ce28:	6e e1       	ldi	r22, 0x1E	; 30
    ce2a:	8b e1       	ldi	r24, 0x1B	; 27
    ce2c:	0e 94 eb 4f 	call	0x9fd6	; 0x9fd6 <LBPrintInt>
	LBPrintInt(27, VRAM_TILES_V-1, game.score ,true);
    ce30:	40 91 b1 0d 	lds	r20, 0x0DB1
    ce34:	50 91 b2 0d 	lds	r21, 0x0DB2
    ce38:	21 e0       	ldi	r18, 0x01	; 1
    ce3a:	6f e1       	ldi	r22, 0x1F	; 31
    ce3c:	8b e1       	ldi	r24, 0x1B	; 27
    ce3e:	0e 94 eb 4f 	call	0x9fd6	; 0x9fd6 <LBPrintInt>
	
	if (game.level_ended && !is_space() && game.player.flags & (IDLE|RUNNING|PRONE))
    ce42:	80 91 cc 0d 	lds	r24, 0x0DCC
    ce46:	88 23       	and	r24, r24
    ce48:	09 f4       	brne	.+2      	; 0xce4c <update_level+0x126>
    ce4a:	8a c0       	rjmp	.+276    	; 0xcf60 <update_level+0x23a>
    ce4c:	0e 94 37 51 	call	0xa26e	; 0xa26e <is_space>
    ce50:	81 11       	cpse	r24, r1
    ce52:	6c c0       	rjmp	.+216    	; 0xcf2c <update_level+0x206>
    ce54:	80 91 d5 0d 	lds	r24, 0x0DD5
    ce58:	8e 70       	andi	r24, 0x0E	; 14
    ce5a:	09 f4       	brne	.+2      	; 0xce5e <update_level+0x138>
    ce5c:	81 c0       	rjmp	.+258    	; 0xcf60 <update_level+0x23a>
	{
		LBMapSprite(PLAYER_SLOT, map_hero_idle, 0);
    ce5e:	40 e0       	ldi	r20, 0x00	; 0
    ce60:	62 e7       	ldi	r22, 0x72	; 114
    ce62:	76 e3       	ldi	r23, 0x36	; 54
    ce64:	80 e0       	ldi	r24, 0x00	; 0
    ce66:	0e 94 73 50 	call	0xa0e6	; 0xa0e6 <LBMapSprite>
		if (game.player.flags & PRONE) {
    ce6a:	80 91 d5 0d 	lds	r24, 0x0DD5
    ce6e:	82 ff       	sbrs	r24, 2
    ce70:	1a c0       	rjmp	.+52     	; 0xcea6 <update_level+0x180>
			game.player.shared.y -= 16;
    ce72:	40 91 cf 0d 	lds	r20, 0x0DCF
    ce76:	50 91 d0 0d 	lds	r21, 0x0DD0
    ce7a:	40 51       	subi	r20, 0x10	; 16
    ce7c:	51 09       	sbc	r21, r1
    ce7e:	50 93 d0 0d 	sts	0x0DD0, r21
    ce82:	40 93 cf 0d 	sts	0x0DCF, r20
			game.player.width = 2;
    ce86:	82 e0       	ldi	r24, 0x02	; 2
    ce88:	80 93 d8 0d 	sts	0x0DD8, r24
			game.player.height = 3;
    ce8c:	83 e0       	ldi	r24, 0x03	; 3
    ce8e:	80 93 d9 0d 	sts	0x0DD9, r24
			LBMoveSprite(PLAYER_SLOT, game.player.shared.x-game.camera_x, game.player.shared.y, game.player.width, game.player.height);
    ce92:	60 91 cd 0d 	lds	r22, 0x0DCD
    ce96:	80 91 af 0d 	lds	r24, 0x0DAF
    ce9a:	68 1b       	sub	r22, r24
    ce9c:	03 e0       	ldi	r16, 0x03	; 3
    ce9e:	22 e0       	ldi	r18, 0x02	; 2
    cea0:	80 e0       	ldi	r24, 0x00	; 0
    cea2:	0e 94 c5 50 	call	0xa18a	; 0xa18a <LBMoveSprite>
		}
		clear_sprites(ENEMY_SLOT, 11);
    cea6:	6b e0       	ldi	r22, 0x0B	; 11
    cea8:	89 e0       	ldi	r24, 0x09	; 9
    ceaa:	0e 94 de 5d 	call	0xbbbc	; 0xbbbc <clear_sprites>
		LBRotateSprites();
    ceae:	0e 94 03 51 	call	0xa206	; 0xa206 <LBRotateSprites>
		map_ship();
    ceb2:	0e 94 f7 55 	call	0xabee	; 0xabee <map_ship>

void update_level()
{
	u8 ship_x = game.player.shared.x - game.camera_x;
	u8 ship_y = 0;
	char ship_increment = 3;
    ceb6:	d3 e0       	ldi	r29, 0x03	; 3
}

void update_level()
{
	u8 ship_x = game.player.shared.x - game.camera_x;
	u8 ship_y = 0;
    ceb8:	c0 e0       	ldi	r28, 0x00	; 0
	}
}

void update_level()
{
	u8 ship_x = game.player.shared.x - game.camera_x;
    ceba:	ec 18       	sub	r14, r12
		clear_sprites(ENEMY_SLOT, 11);
		LBRotateSprites();
		map_ship();
		while (1)
		{
			WaitVsync(1);
    cebc:	81 e0       	ldi	r24, 0x01	; 1
    cebe:	90 e0       	ldi	r25, 0x00	; 0
    cec0:	0e 94 45 4e 	call	0x9c8a	; 0x9c8a <WaitVsync>
			if (ship_y >= get_hero_spawn_y(game.current_level_index)*8)
    cec4:	8c 2f       	mov	r24, r28
    cec6:	90 e0       	ldi	r25, 0x00	; 0
    cec8:	88 3a       	cpi	r24, 0xA8	; 168
    ceca:	91 05       	cpc	r25, r1
    cecc:	3c f0       	brlt	.+14     	; 0xcedc <update_level+0x1b6>
			{
				clear_sprites(0, 6);
    cece:	66 e0       	ldi	r22, 0x06	; 6
    ced0:	80 e0       	ldi	r24, 0x00	; 0
    ced2:	0e 94 de 5d 	call	0xbbbc	; 0xbbbc <clear_sprites>
				LBRotateSprites();
    ced6:	0e 94 03 51 	call	0xa206	; 0xa206 <LBRotateSprites>
				ship_increment = -3;
    ceda:	dd ef       	ldi	r29, 0xFD	; 253
			}
			LBMapSprite(PLAYER_SHOT_SLOT, LBGetNextFrame(&game.player.run), 0);
    cedc:	8a e1       	ldi	r24, 0x1A	; 26
    cede:	9e e0       	ldi	r25, 0x0E	; 14
    cee0:	0e 94 0d 4f 	call	0x9e1a	; 0x9e1a <LBGetNextFrame>
    cee4:	40 e0       	ldi	r20, 0x00	; 0
    cee6:	bc 01       	movw	r22, r24
    cee8:	86 e0       	ldi	r24, 0x06	; 6
    ceea:	0e 94 73 50 	call	0xa0e6	; 0xa0e6 <LBMapSprite>
			LBMoveSprite(PLAYER_SHOT_SLOT, ship_x, ship_y, 4, 2);
    ceee:	02 e0       	ldi	r16, 0x02	; 2
    cef0:	24 e0       	ldi	r18, 0x04	; 4
    cef2:	4c 2f       	mov	r20, r28
    cef4:	6e 2d       	mov	r22, r14
    cef6:	86 e0       	ldi	r24, 0x06	; 6
    cef8:	0e 94 c5 50 	call	0xa18a	; 0xa18a <LBMoveSprite>
			ship_y += ship_increment;
    cefc:	cd 0f       	add	r28, r29
			if (ship_y == 0)
    cefe:	99 f4       	brne	.+38     	; 0xcf26 <update_level+0x200>
			{
				clear_sprites(6, 8);
    cf00:	68 e0       	ldi	r22, 0x08	; 8
    cf02:	86 e0       	ldi	r24, 0x06	; 6
    cf04:	0e 94 de 5d 	call	0xbbbc	; 0xbbbc <clear_sprites>
				LBRotateSprites();
    cf08:	0e 94 03 51 	call	0xa206	; 0xa206 <LBRotateSprites>
				tally_score((char*) strLevelClear, 100);
    cf0c:	64 e6       	ldi	r22, 0x64	; 100
    cf0e:	70 e0       	ldi	r23, 0x00	; 0
    cf10:	8d ec       	ldi	r24, 0xCD	; 205
    cf12:	9a e0       	ldi	r25, 0x0A	; 10
    cf14:	0e 94 4b 63 	call	0xc696	; 0xc696 <tally_score>
				planet_transition(game.current_level_index+1, -1, 26, 3, 0);
    cf18:	80 91 c4 0d 	lds	r24, 0x0DC4
    cf1c:	00 e0       	ldi	r16, 0x00	; 0
    cf1e:	23 e0       	ldi	r18, 0x03	; 3
    cf20:	4a e1       	ldi	r20, 0x1A	; 26
    cf22:	6f ef       	ldi	r22, 0xFF	; 255
    cf24:	1a c0       	rjmp	.+52     	; 0xcf5a <update_level+0x234>
				break;
			}
			LBRotateSprites();
    cf26:	0e 94 03 51 	call	0xa206	; 0xa206 <LBRotateSprites>
		}
    cf2a:	c8 cf       	rjmp	.-112    	; 0xcebc <update_level+0x196>
	}
	else if (game.level_ended && is_space())
	{
		tally_score((char*) strLevelClear, 100);
    cf2c:	64 e6       	ldi	r22, 0x64	; 100
    cf2e:	70 e0       	ldi	r23, 0x00	; 0
    cf30:	8d ec       	ldi	r24, 0xCD	; 205
    cf32:	9a e0       	ldi	r25, 0x0A	; 10
    cf34:	0e 94 4b 63 	call	0xc696	; 0xc696 <tally_score>
		if (game.current_level_index == 9) {
    cf38:	80 91 c4 0d 	lds	r24, 0x0DC4
    cf3c:	89 30       	cpi	r24, 0x09	; 9
    cf3e:	49 f4       	brne	.+18     	; 0xcf52 <update_level+0x22c>
		} else {
			planet_transition(game.current_level_index+1, 1, 28, -3, 199);
		}
	}
	
}
    cf40:	df 91       	pop	r29
    cf42:	cf 91       	pop	r28
    cf44:	0f 91       	pop	r16
    cf46:	ff 90       	pop	r15
    cf48:	ef 90       	pop	r14
    cf4a:	df 90       	pop	r13
    cf4c:	cf 90       	pop	r12
	}
	else if (game.level_ended && is_space())
	{
		tally_score((char*) strLevelClear, 100);
		if (game.current_level_index == 9) {
			exit_game();
    cf4e:	0c 94 56 62 	jmp	0xc4ac	; 0xc4ac <exit_game>
		} else {
			planet_transition(game.current_level_index+1, 1, 28, -3, 199);
    cf52:	07 ec       	ldi	r16, 0xC7	; 199
    cf54:	2d ef       	ldi	r18, 0xFD	; 253
    cf56:	4c e1       	ldi	r20, 0x1C	; 28
    cf58:	61 e0       	ldi	r22, 0x01	; 1
    cf5a:	8f 5f       	subi	r24, 0xFF	; 255
    cf5c:	0e 94 22 60 	call	0xc044	; 0xc044 <planet_transition>
		}
	}
	
}
    cf60:	df 91       	pop	r29
    cf62:	cf 91       	pop	r28
    cf64:	0f 91       	pop	r16
    cf66:	ff 90       	pop	r15
    cf68:	ef 90       	pop	r14
    cf6a:	df 90       	pop	r13
    cf6c:	cf 90       	pop	r12
    cf6e:	08 95       	ret

0000cf70 <update_pause>:
		}
	}
}

void update_pause()
{
    cf70:	ef 92       	push	r14
    cf72:	ff 92       	push	r15
    cf74:	0f 93       	push	r16
    cf76:	1f 93       	push	r17
    cf78:	cf 93       	push	r28
    cf7a:	df 93       	push	r29
	u8 x = Screen.scrollX / 8;
    cf7c:	c0 91 b2 0c 	lds	r28, 0x0CB2
	u8 y = Screen.scrollY / 8;
    cf80:	00 91 b3 0c 	lds	r16, 0x0CB3
	
	if (game.player.controls.pressed & BTN_START)
    cf84:	80 91 3a 0e 	lds	r24, 0x0E3A
    cf88:	83 ff       	sbrs	r24, 3
    cf8a:	63 c0       	rjmp	.+198    	; 0xd052 <update_pause+0xe2>
}

void update_pause()
{
	u8 x = Screen.scrollX / 8;
	u8 y = Screen.scrollY / 8;
    cf8c:	06 95       	lsr	r16
    cf8e:	06 95       	lsr	r16
    cf90:	06 95       	lsr	r16
	
	if (game.player.controls.pressed & BTN_START)
	{
		DrawMap2((x+8)%32, (y+6)%30, map_canvas);
    cf92:	10 e0       	ldi	r17, 0x00	; 0
	}
}

void update_pause()
{
	u8 x = Screen.scrollX / 8;
    cf94:	c6 95       	lsr	r28
    cf96:	c6 95       	lsr	r28
    cf98:	c6 95       	lsr	r28
	u8 y = Screen.scrollY / 8;
	
	if (game.player.controls.pressed & BTN_START)
	{
		DrawMap2((x+8)%32, (y+6)%30, map_canvas);
    cf9a:	d0 e0       	ldi	r29, 0x00	; 0
    cf9c:	c8 01       	movw	r24, r16
    cf9e:	06 96       	adiw	r24, 0x06	; 6
    cfa0:	2e e1       	ldi	r18, 0x1E	; 30
    cfa2:	e2 2e       	mov	r14, r18
    cfa4:	f1 2c       	mov	r15, r1
    cfa6:	b7 01       	movw	r22, r14
    cfa8:	0e 94 9f 69 	call	0xd33e	; 0xd33e <__divmodhi4>
    cfac:	9e 01       	movw	r18, r28
    cfae:	28 5f       	subi	r18, 0xF8	; 248
    cfb0:	3f 4f       	sbci	r19, 0xFF	; 255
    cfb2:	44 e2       	ldi	r20, 0x24	; 36
    cfb4:	5f e5       	ldi	r21, 0x5F	; 95
    cfb6:	68 2f       	mov	r22, r24
    cfb8:	82 2f       	mov	r24, r18
    cfba:	8f 71       	andi	r24, 0x1F	; 31
    cfbc:	0e 94 dc 4d 	call	0x9bb8	; 0x9bb8 <DrawMap>
		LBPrint((x+13)%32, (y+9)%30, (char*) strPaused);
    cfc0:	c8 01       	movw	r24, r16
    cfc2:	09 96       	adiw	r24, 0x09	; 9
    cfc4:	b7 01       	movw	r22, r14
    cfc6:	0e 94 9f 69 	call	0xd33e	; 0xd33e <__divmodhi4>
    cfca:	9e 01       	movw	r18, r28
    cfcc:	23 5f       	subi	r18, 0xF3	; 243
    cfce:	3f 4f       	sbci	r19, 0xFF	; 255
    cfd0:	49 ed       	ldi	r20, 0xD9	; 217
    cfd2:	5a e0       	ldi	r21, 0x0A	; 10
    cfd4:	68 2f       	mov	r22, r24
    cfd6:	82 2f       	mov	r24, r18
    cfd8:	8f 71       	andi	r24, 0x1F	; 31
    cfda:	0e 94 9e 4f 	call	0x9f3c	; 0x9f3c <LBPrint>
		LBPrint((x+10)%32, (y+12)%30, (char*) strExitGame);
    cfde:	c8 01       	movw	r24, r16
    cfe0:	0c 96       	adiw	r24, 0x0c	; 12
    cfe2:	b7 01       	movw	r22, r14
    cfe4:	0e 94 9f 69 	call	0xd33e	; 0xd33e <__divmodhi4>
    cfe8:	2a 96       	adiw	r28, 0x0a	; 10
    cfea:	4f ed       	ldi	r20, 0xDF	; 223
    cfec:	5a e0       	ldi	r21, 0x0A	; 10
    cfee:	68 2f       	mov	r22, r24
    cff0:	8c 2f       	mov	r24, r28
    cff2:	8f 71       	andi	r24, 0x1F	; 31
    cff4:	0e 94 9e 4f 	call	0x9f3c	; 0x9f3c <LBPrint>
		hide_sprites(0, MAX_EXTENDED_SPRITES);
    cff8:	64 e1       	ldi	r22, 0x14	; 20
    cffa:	80 e0       	ldi	r24, 0x00	; 0
    cffc:	0e 94 1e 5f 	call	0xbe3c	; 0xbe3c <hide_sprites>
		LBRotateSprites();
    d000:	0e 94 03 51 	call	0xa206	; 0xa206 <LBRotateSprites>
		while (1)
		{
			WaitVsync(1);
    d004:	81 e0       	ldi	r24, 0x01	; 1
    d006:	90 e0       	ldi	r25, 0x00	; 0
    d008:	0e 94 45 4e 	call	0x9c8a	; 0x9c8a <WaitVsync>
			LBGetJoyPadState(&game.player.controls, 0);
    d00c:	60 e0       	ldi	r22, 0x00	; 0
    d00e:	8a e3       	ldi	r24, 0x3A	; 58
    d010:	9e e0       	ldi	r25, 0x0E	; 14
    d012:	0e 94 33 4f 	call	0x9e66	; 0x9e66 <LBGetJoyPadState>
			if (game.player.controls.pressed & BTN_START)
    d016:	80 91 3a 0e 	lds	r24, 0x0E3A
    d01a:	90 91 3b 0e 	lds	r25, 0x0E3B
    d01e:	83 ff       	sbrs	r24, 3
    d020:	08 c0       	rjmp	.+16     	; 0xd032 <update_pause+0xc2>
				exit_game();
				break;
			}
		}
	}
}
    d022:	df 91       	pop	r29
    d024:	cf 91       	pop	r28
    d026:	1f 91       	pop	r17
    d028:	0f 91       	pop	r16
    d02a:	ff 90       	pop	r15
    d02c:	ef 90       	pop	r14
		{
			WaitVsync(1);
			LBGetJoyPadState(&game.player.controls, 0);
			if (game.player.controls.pressed & BTN_START)
			{
				render_camera_view();
    d02e:	0c 94 56 54 	jmp	0xa8ac	; 0xa8ac <render_camera_view>
				break;
			}
			else if (game.player.controls.pressed & BTN_X)
    d032:	91 ff       	sbrs	r25, 1
    d034:	e7 cf       	rjmp	.-50     	; 0xd004 <update_pause+0x94>
			{
				tally_score((char*)strGameOver, 0);
    d036:	60 e0       	ldi	r22, 0x00	; 0
    d038:	70 e0       	ldi	r23, 0x00	; 0
    d03a:	8d eb       	ldi	r24, 0xBD	; 189
    d03c:	9a e0       	ldi	r25, 0x0A	; 10
    d03e:	0e 94 4b 63 	call	0xc696	; 0xc696 <tally_score>
				exit_game();
				break;
			}
		}
	}
}
    d042:	df 91       	pop	r29
    d044:	cf 91       	pop	r28
    d046:	1f 91       	pop	r17
    d048:	0f 91       	pop	r16
    d04a:	ff 90       	pop	r15
    d04c:	ef 90       	pop	r14
				break;
			}
			else if (game.player.controls.pressed & BTN_X)
			{
				tally_score((char*)strGameOver, 0);
				exit_game();
    d04e:	0c 94 56 62 	jmp	0xc4ac	; 0xc4ac <exit_game>
				break;
			}
		}
	}
}
    d052:	df 91       	pop	r29
    d054:	cf 91       	pop	r28
    d056:	1f 91       	pop	r17
    d058:	0f 91       	pop	r16
    d05a:	ff 90       	pop	r15
    d05c:	ef 90       	pop	r14
    d05e:	08 95       	ret

0000d060 <challenge>:
	game.time = 0;
	LBWaitSeconds(2);
}

void challenge()
{
    d060:	cf 92       	push	r12
    d062:	df 92       	push	r13
    d064:	ff 92       	push	r15
    d066:	0f 93       	push	r16
    d068:	1f 93       	push	r17
    d06a:	cf 93       	push	r28
    d06c:	df 93       	push	r29
	u8 x = Screen.scrollX / 8;
	u8 y = Screen.scrollY / 8;
	u16 counter = 0;
	char* challenge_pointer = (char*)strChallenge + (game.current_level_index/2)*CHALLENGE_LENGTH;
    d06e:	20 91 c4 0d 	lds	r18, 0x0DC4
    d072:	f2 2e       	mov	r15, r18
    d074:	f6 94       	lsr	r15
}

void challenge()
{
	u8 x = Screen.scrollX / 8;
	u8 y = Screen.scrollY / 8;
    d076:	ef ea       	ldi	r30, 0xAF	; 175
    d078:	fc e0       	ldi	r31, 0x0C	; 12
    d07a:	84 81       	ldd	r24, Z+4	; 0x04
    d07c:	86 95       	lsr	r24
    d07e:	86 95       	lsr	r24
    d080:	86 95       	lsr	r24
	u16 counter = 0;
	char* challenge_pointer = (char*)strChallenge + (game.current_level_index/2)*CHALLENGE_LENGTH;
	DrawMap2((x+7)%32, (y+6)%30, map_dialog);
    d082:	08 2f       	mov	r16, r24
    d084:	10 e0       	ldi	r17, 0x00	; 0
	LBWaitSeconds(2);
}

void challenge()
{
	u8 x = Screen.scrollX / 8;
    d086:	c3 81       	ldd	r28, Z+3	; 0x03
    d088:	c6 95       	lsr	r28
    d08a:	c6 95       	lsr	r28
    d08c:	c6 95       	lsr	r28
	u8 y = Screen.scrollY / 8;
	u16 counter = 0;
	char* challenge_pointer = (char*)strChallenge + (game.current_level_index/2)*CHALLENGE_LENGTH;
	DrawMap2((x+7)%32, (y+6)%30, map_dialog);
    d08e:	d0 e0       	ldi	r29, 0x00	; 0
    d090:	c8 01       	movw	r24, r16
    d092:	06 96       	adiw	r24, 0x06	; 6
    d094:	2e e1       	ldi	r18, 0x1E	; 30
    d096:	c2 2e       	mov	r12, r18
    d098:	d1 2c       	mov	r13, r1
    d09a:	b6 01       	movw	r22, r12
    d09c:	0e 94 9f 69 	call	0xd33e	; 0xd33e <__divmodhi4>
    d0a0:	9e 01       	movw	r18, r28
    d0a2:	29 5f       	subi	r18, 0xF9	; 249
    d0a4:	3f 4f       	sbci	r19, 0xFF	; 255
    d0a6:	42 ec       	ldi	r20, 0xC2	; 194
    d0a8:	5e e5       	ldi	r21, 0x5E	; 94
    d0aa:	68 2f       	mov	r22, r24
    d0ac:	82 2f       	mov	r24, r18
    d0ae:	8f 71       	andi	r24, 0x1F	; 31
    d0b0:	0e 94 dc 4d 	call	0x9bb8	; 0x9bb8 <DrawMap>
	stream_text_anywhere((const char*)challenge_pointer, (x+8)%32, (y+9)%30);
    d0b4:	c8 01       	movw	r24, r16
    d0b6:	09 96       	adiw	r24, 0x09	; 9
    d0b8:	b6 01       	movw	r22, r12
    d0ba:	0e 94 9f 69 	call	0xd33e	; 0xd33e <__divmodhi4>
    d0be:	be 01       	movw	r22, r28
    d0c0:	68 5f       	subi	r22, 0xF8	; 248
    d0c2:	7f 4f       	sbci	r23, 0xFF	; 255
    d0c4:	6f 71       	andi	r22, 0x1F	; 31
    d0c6:	77 27       	eor	r23, r23
void challenge()
{
	u8 x = Screen.scrollX / 8;
	u8 y = Screen.scrollY / 8;
	u16 counter = 0;
	char* challenge_pointer = (char*)strChallenge + (game.current_level_index/2)*CHALLENGE_LENGTH;
    d0c8:	93 e2       	ldi	r25, 0x23	; 35
    d0ca:	f9 9e       	mul	r15, r25
    d0cc:	90 01       	movw	r18, r0
    d0ce:	11 24       	eor	r1, r1
	DrawMap2((x+7)%32, (y+6)%30, map_dialog);
	stream_text_anywhere((const char*)challenge_pointer, (x+8)%32, (y+9)%30);
    d0d0:	48 2f       	mov	r20, r24
    d0d2:	c9 01       	movw	r24, r18
    d0d4:	8d 5b       	subi	r24, 0xBD	; 189
    d0d6:	96 4f       	sbci	r25, 0xF6	; 246
    d0d8:	0e 94 7b 5f 	call	0xbef6	; 0xbef6 <stream_text_anywhere>
	LBWaitSeconds(3);
    d0dc:	83 e0       	ldi	r24, 0x03	; 3
    d0de:	0e 94 64 50 	call	0xa0c8	; 0xa0c8 <LBWaitSeconds>
	game.boss.active = 1;
    d0e2:	81 e0       	ldi	r24, 0x01	; 1
    d0e4:	80 93 4e 0e 	sts	0x0E4E, r24
	render_camera_view();
}
    d0e8:	df 91       	pop	r29
    d0ea:	cf 91       	pop	r28
    d0ec:	1f 91       	pop	r17
    d0ee:	0f 91       	pop	r16
    d0f0:	ff 90       	pop	r15
    d0f2:	df 90       	pop	r13
    d0f4:	cf 90       	pop	r12
	char* challenge_pointer = (char*)strChallenge + (game.current_level_index/2)*CHALLENGE_LENGTH;
	DrawMap2((x+7)%32, (y+6)%30, map_dialog);
	stream_text_anywhere((const char*)challenge_pointer, (x+8)%32, (y+9)%30);
	LBWaitSeconds(3);
	game.boss.active = 1;
	render_camera_view();
    d0f6:	0c 94 56 54 	jmp	0xa8ac	; 0xa8ac <render_camera_view>

0000d0fa <update_player_ai>:
}

void update_player_ai(Player* player) 
{
    d0fa:	cf 93       	push	r28
    d0fc:	df 93       	push	r29
    d0fe:	ec 01       	movw	r28, r24
	 static s8 last_shield_value;
	 
	 if (player->ai_flags == AI_NOT_READY) {
    d100:	89 85       	ldd	r24, Y+9	; 0x09
    d102:	81 11       	cpse	r24, r1
    d104:	0a c0       	rjmp	.+20     	; 0xd11a <update_player_ai+0x20>
		 player->controls.held = BTN_LEFT;
    d106:	80 e4       	ldi	r24, 0x40	; 64
    d108:	90 e0       	ldi	r25, 0x00	; 0
    d10a:	fe 01       	movw	r30, r28
    d10c:	ef 58       	subi	r30, 0x8F	; 143
    d10e:	ff 4f       	sbci	r31, 0xFF	; 255
    d110:	91 83       	std	Z+1, r25	; 0x01
    d112:	80 83       	st	Z, r24
		 player->ai_flags = AI_READY;
    d114:	81 e0       	ldi	r24, 0x01	; 1
    d116:	89 87       	std	Y+9, r24	; 0x09
    d118:	55 c0       	rjmp	.+170    	; 0xd1c4 <update_player_ai+0xca>
	 }
	 else if (player->ai_flags & AI_READY) {
    d11a:	80 ff       	sbrs	r24, 0
    d11c:	1f c0       	rjmp	.+62     	; 0xd15c <update_player_ai+0x62>
void LBResetJoyPadState(JoyPadState* p)
/*
 * Get the current joy pad button state for index controller
 */
{
	p->held = 0;
    d11e:	fe 01       	movw	r30, r28
    d120:	e3 59       	subi	r30, 0x93	; 147
    d122:	ff 4f       	sbci	r31, 0xFF	; 255
    d124:	15 82       	std	Z+5, r1	; 0x05
    d126:	14 82       	std	Z+4, r1	; 0x04
	p->pressed = 0;
    d128:	11 82       	std	Z+1, r1	; 0x01
    d12a:	10 82       	st	Z, r1
	p->released = 0;
    d12c:	13 82       	std	Z+3, r1	; 0x03
    d12e:	12 82       	std	Z+2, r1	; 0x02
	p->held_cycles = 0;
    d130:	16 82       	std	Z+6, r1	; 0x06
		 LBResetJoyPadState(&player->controls);
		 if (game.camera_x/8 + CAMERA_WIDTH >= game.level_width) {
    d132:	80 91 af 0d 	lds	r24, 0x0DAF
    d136:	90 91 b0 0d 	lds	r25, 0x0DB0
    d13a:	23 e0       	ldi	r18, 0x03	; 3
    d13c:	96 95       	lsr	r25
    d13e:	87 95       	ror	r24
    d140:	2a 95       	dec	r18
    d142:	e1 f7       	brne	.-8      	; 0xd13c <update_player_ai+0x42>
    d144:	4c 96       	adiw	r24, 0x1c	; 28
    d146:	20 91 be 0d 	lds	r18, 0x0DBE
    d14a:	30 e0       	ldi	r19, 0x00	; 0
    d14c:	82 17       	cp	r24, r18
    d14e:	93 07       	cpc	r25, r19
    d150:	c8 f1       	brcs	.+114    	; 0xd1c4 <update_player_ai+0xca>
			 challenge();
    d152:	0e 94 30 68 	call	0xd060	; 0xd060 <challenge>
			 player->ai_flags = AI_WALKING;
    d156:	82 e0       	ldi	r24, 0x02	; 2
    d158:	89 87       	std	Y+9, r24	; 0x09
    d15a:	2d c0       	rjmp	.+90     	; 0xd1b6 <update_player_ai+0xbc>
			 player->controls.held = BTN_LEFT;
		 }
	 } else if (player->ai_flags & AI_WALKING) {
    d15c:	81 ff       	sbrs	r24, 1
    d15e:	32 c0       	rjmp	.+100    	; 0xd1c4 <update_player_ai+0xca>
		 player->controls.pressed = 0;
    d160:	fe 01       	movw	r30, r28
    d162:	e3 59       	subi	r30, 0x93	; 147
    d164:	ff 4f       	sbci	r31, 0xFF	; 255
    d166:	11 82       	std	Z+1, r1	; 0x01
    d168:	10 82       	st	Z, r1
		 if (game.frame_counter % 15 == 0) {
    d16a:	80 91 c9 0d 	lds	r24, 0x0DC9
    d16e:	6f e0       	ldi	r22, 0x0F	; 15
    d170:	0e 94 71 69 	call	0xd2e2	; 0xd2e2 <__udivmodqi4>
    d174:	91 11       	cpse	r25, r1
    d176:	04 c0       	rjmp	.+8      	; 0xd180 <update_player_ai+0x86>
			 player->controls.pressed = BTN_A;
    d178:	80 e0       	ldi	r24, 0x00	; 0
    d17a:	91 e0       	ldi	r25, 0x01	; 1
    d17c:	91 83       	std	Z+1, r25	; 0x01
    d17e:	80 83       	st	Z, r24
		 }
		 if (last_shield_value > player->shield) {
    d180:	90 91 f4 0c 	lds	r25, 0x0CF4
    d184:	8e 85       	ldd	r24, Y+14	; 0x0e
    d186:	89 17       	cp	r24, r25
    d188:	2c f4       	brge	.+10     	; 0xd194 <update_player_ai+0x9a>
			 player->controls.pressed |= BTN_B;
    d18a:	80 81       	ld	r24, Z
    d18c:	91 81       	ldd	r25, Z+1	; 0x01
    d18e:	81 60       	ori	r24, 0x01	; 1
    d190:	91 83       	std	Z+1, r25	; 0x01
    d192:	80 83       	st	Z, r24
		 }
		 if (player->shared.x <= game.camera_x) {
    d194:	28 81       	ld	r18, Y
    d196:	39 81       	ldd	r19, Y+1	; 0x01
    d198:	80 91 af 0d 	lds	r24, 0x0DAF
    d19c:	90 91 b0 0d 	lds	r25, 0x0DB0
    d1a0:	82 17       	cp	r24, r18
    d1a2:	93 07       	cpc	r25, r19
    d1a4:	18 f0       	brcs	.+6      	; 0xd1ac <update_player_ai+0xb2>
			 player->controls.held = BTN_RIGHT;
    d1a6:	80 e8       	ldi	r24, 0x80	; 128
    d1a8:	90 e0       	ldi	r25, 0x00	; 0
    d1aa:	07 c0       	rjmp	.+14     	; 0xd1ba <update_player_ai+0xc0>
		 } else if (player->shared.x >= game.camera_x+(CAMERA_WIDTH-2)*8) {
    d1ac:	80 53       	subi	r24, 0x30	; 48
    d1ae:	9f 4f       	sbci	r25, 0xFF	; 255
    d1b0:	28 17       	cp	r18, r24
    d1b2:	39 07       	cpc	r19, r25
    d1b4:	38 f0       	brcs	.+14     	; 0xd1c4 <update_player_ai+0xca>
			 player->controls.held = BTN_LEFT;
    d1b6:	80 e4       	ldi	r24, 0x40	; 64
    d1b8:	90 e0       	ldi	r25, 0x00	; 0
    d1ba:	fe 01       	movw	r30, r28
    d1bc:	ef 58       	subi	r30, 0x8F	; 143
    d1be:	ff 4f       	sbci	r31, 0xFF	; 255
    d1c0:	91 83       	std	Z+1, r25	; 0x01
    d1c2:	80 83       	st	Z, r24
		 }
	 }
	 last_shield_value = player->shield;
    d1c4:	8e 85       	ldd	r24, Y+14	; 0x0e
    d1c6:	80 93 f4 0c 	sts	0x0CF4, r24
}
    d1ca:	df 91       	pop	r29
    d1cc:	cf 91       	pop	r28
    d1ce:	08 95       	ret

0000d1d0 <main>:
#endif

int main()
{
	// Initialize
	GetPrngNumber(GetTrueRandomSeed());
    d1d0:	0e 94 f6 3f 	call	0x7fec	; 0x7fec <GetTrueRandomSeed>
    d1d4:	0e 94 76 41 	call	0x82ec	; 0x82ec <GetPrngNumber>
	InitMusicPlayer(my_patches);
    d1d8:	85 ec       	ldi	r24, 0xC5	; 197
    d1da:	9c e1       	ldi	r25, 0x1C	; 28
    d1dc:	0e 94 50 42 	call	0x84a0	; 0x84a0 <InitMusicPlayer>
	ClearVram();
    d1e0:	0e 94 7e 3f 	call	0x7efc	; 0x7efc <ClearVram>
	SetMasterVolume(0x05);
    d1e4:	85 e0       	ldi	r24, 0x05	; 5
    d1e6:	0e 94 04 46 	call	0x8c08	; 0x8c08 <SetMasterVolume>
	SetTileTable(tiles_data);
    d1ea:	81 ea       	ldi	r24, 0xA1	; 161
    d1ec:	96 e3       	ldi	r25, 0x36	; 54
    d1ee:	0e 94 99 3f 	call	0x7f32	; 0x7f32 <SetTileTable>
	SetSpritesTileTable(sprites_data);
    d1f2:	84 e4       	ldi	r24, 0x44	; 68
    d1f4:	9e e1       	ldi	r25, 0x1E	; 30
    d1f6:	0e 94 79 3f 	call	0x7ef2	; 0x7ef2 <SetSpritesTileTable>
	}
}

void LBSetFontTilesMap(char* tiles_map)
{
	font_tiles_map = tiles_map;
    d1fa:	81 e6       	ldi	r24, 0x61	; 97
    d1fc:	9e e5       	ldi	r25, 0x5E	; 94
    d1fe:	90 93 84 0d 	sts	0x0D84, r25
    d202:	80 93 83 0d 	sts	0x0D83, r24
	LBSetFontTilesMap((char*) map_font);
	init_default_high_scores();
    d206:	0e 94 3b 51 	call	0xa276	; 0xa276 <init_default_high_scores>
#if DEBUG_MODE
	prepare_debugging();
#else
	load_splash();
    d20a:	0e 94 10 61 	call	0xc220	; 0xc220 <load_splash>
#endif
	while (1)
	{
		WaitVsync(1);
    d20e:	81 e0       	ldi	r24, 0x01	; 1
    d210:	90 e0       	ldi	r25, 0x00	; 0
    d212:	0e 94 45 4e 	call	0x9c8a	; 0x9c8a <WaitVsync>
		LBGetJoyPadState(&game.player.controls, 0);
    d216:	60 e0       	ldi	r22, 0x00	; 0
    d218:	8a e3       	ldi	r24, 0x3A	; 58
    d21a:	9e e0       	ldi	r25, 0x0E	; 14
    d21c:	0e 94 33 4f 	call	0x9e66	; 0x9e66 <LBGetJoyPadState>
		if (game.current_screen == LEVEL)
    d220:	80 91 c3 0d 	lds	r24, 0x0DC3
    d224:	82 30       	cpi	r24, 0x02	; 2
    d226:	09 f0       	breq	.+2      	; 0xd22a <main+0x5a>
    d228:	50 c0       	rjmp	.+160    	; 0xd2ca <main+0xfa>
		{
			update_level();
    d22a:	0e 94 93 66 	call	0xcd26	; 0xcd26 <update_level>
			if (update_player(&game.player, PLAYER_SLOT))
    d22e:	60 e0       	ldi	r22, 0x00	; 0
    d230:	8d ec       	ldi	r24, 0xCD	; 205
    d232:	9d e0       	ldi	r25, 0x0D	; 13
    d234:	0e 94 ca 64 	call	0xc994	; 0xc994 <update_player>
    d238:	88 23       	and	r24, r24
    d23a:	e9 f0       	breq	.+58     	; 0xd276 <main+0xa6>
			{
				update_shot(&game.player, PLAYER_SHOT_SLOT);
    d23c:	66 e0       	ldi	r22, 0x06	; 6
    d23e:	8d ec       	ldi	r24, 0xCD	; 205
    d240:	9d e0       	ldi	r25, 0x0D	; 13
    d242:	0e 94 9c 56 	call	0xad38	; 0xad38 <update_shot>
				update_enemies();
    d246:	0e 94 f3 5b 	call	0xb7e6	; 0xb7e6 <update_enemies>
				update_enemy_shots();
    d24a:	0e 94 46 5c 	call	0xb88c	; 0xb88c <update_enemy_shots>
				animate_enemies();
    d24e:	0e 94 b1 5c 	call	0xb962	; 0xb962 <animate_enemies>
				animate_enemy_shots();
    d252:	0e 94 40 5d 	call	0xba80	; 0xba80 <animate_enemy_shots>
				animate_player(&game.player, &game.boss, PLAYER_SLOT);
    d256:	40 e0       	ldi	r20, 0x00	; 0
    d258:	61 e4       	ldi	r22, 0x41	; 65
    d25a:	7e e0       	ldi	r23, 0x0E	; 14
    d25c:	8d ec       	ldi	r24, 0xCD	; 205
    d25e:	9d e0       	ldi	r25, 0x0D	; 13
    d260:	0e 94 52 5b 	call	0xb6a4	; 0xb6a4 <animate_player>
				animate_shot(&game.player, &game.boss, PLAYER_SHOT_SLOT);
    d264:	46 e0       	ldi	r20, 0x06	; 6
    d266:	61 e4       	ldi	r22, 0x41	; 65
    d268:	7e e0       	ldi	r23, 0x0E	; 14
    d26a:	8d ec       	ldi	r24, 0xCD	; 205
    d26c:	9d e0       	ldi	r25, 0x0D	; 13
    d26e:	0e 94 1b 59 	call	0xb236	; 0xb236 <animate_shot>
				update_pause();
    d272:	0e 94 b8 67 	call	0xcf70	; 0xcf70 <update_pause>
			}
			if (!is_space() && (game.camera_x >= BOSS_UPDATE_THRESHOLD) && update_player(&game.boss, BOSS_SLOT))
    d276:	0e 94 37 51 	call	0xa26e	; 0xa26e <is_space>
    d27a:	81 11       	cpse	r24, r1
    d27c:	2f c0       	rjmp	.+94     	; 0xd2dc <main+0x10c>
    d27e:	80 91 af 0d 	lds	r24, 0x0DAF
    d282:	90 91 b0 0d 	lds	r25, 0x0DB0
    d286:	88 3f       	cpi	r24, 0xF8	; 248
    d288:	96 40       	sbci	r25, 0x06	; 6
    d28a:	40 f1       	brcs	.+80     	; 0xd2dc <main+0x10c>
    d28c:	69 e0       	ldi	r22, 0x09	; 9
    d28e:	81 e4       	ldi	r24, 0x41	; 65
    d290:	9e e0       	ldi	r25, 0x0E	; 14
    d292:	0e 94 ca 64 	call	0xc994	; 0xc994 <update_player>
    d296:	88 23       	and	r24, r24
    d298:	09 f1       	breq	.+66     	; 0xd2dc <main+0x10c>
			{
				update_shot(&game.boss, BOSS_SHOT_SLOT);
    d29a:	6f e0       	ldi	r22, 0x0F	; 15
    d29c:	81 e4       	ldi	r24, 0x41	; 65
    d29e:	9e e0       	ldi	r25, 0x0E	; 14
    d2a0:	0e 94 9c 56 	call	0xad38	; 0xad38 <update_shot>
				animate_player(&game.boss, &game.player, BOSS_SLOT);
    d2a4:	49 e0       	ldi	r20, 0x09	; 9
    d2a6:	6d ec       	ldi	r22, 0xCD	; 205
    d2a8:	7d e0       	ldi	r23, 0x0D	; 13
    d2aa:	81 e4       	ldi	r24, 0x41	; 65
    d2ac:	9e e0       	ldi	r25, 0x0E	; 14
    d2ae:	0e 94 52 5b 	call	0xb6a4	; 0xb6a4 <animate_player>
				animate_shot(&game.boss, &game.player, BOSS_SHOT_SLOT);
    d2b2:	4f e0       	ldi	r20, 0x0F	; 15
    d2b4:	6d ec       	ldi	r22, 0xCD	; 205
    d2b6:	7d e0       	ldi	r23, 0x0D	; 13
    d2b8:	81 e4       	ldi	r24, 0x41	; 65
    d2ba:	9e e0       	ldi	r25, 0x0E	; 14
    d2bc:	0e 94 1b 59 	call	0xb236	; 0xb236 <animate_shot>
				update_player_ai(&game.boss);
    d2c0:	81 e4       	ldi	r24, 0x41	; 65
    d2c2:	9e e0       	ldi	r25, 0x0E	; 14
    d2c4:	0e 94 7d 68 	call	0xd0fa	; 0xd0fa <update_player_ai>
    d2c8:	09 c0       	rjmp	.+18     	; 0xd2dc <main+0x10c>
			}
		}
		else if (game.current_screen == SPLASH)
    d2ca:	81 11       	cpse	r24, r1
    d2cc:	03 c0       	rjmp	.+6      	; 0xd2d4 <main+0x104>
		{
			update_splash();
    d2ce:	0e 94 66 62 	call	0xc4cc	; 0xc4cc <update_splash>
    d2d2:	04 c0       	rjmp	.+8      	; 0xd2dc <main+0x10c>
			
		}
		else if (game.current_screen == HIGH_SCORES)
    d2d4:	81 30       	cpi	r24, 0x01	; 1
    d2d6:	11 f4       	brne	.+4      	; 0xd2dc <main+0x10c>
		{
			update_high_scores();
    d2d8:	0e 94 ad 62 	call	0xc55a	; 0xc55a <update_high_scores>
			
		}
		LBRotateSprites();
    d2dc:	0e 94 03 51 	call	0xa206	; 0xa206 <LBRotateSprites>
	}
    d2e0:	96 cf       	rjmp	.-212    	; 0xd20e <main+0x3e>

0000d2e2 <__udivmodqi4>:
    d2e2:	99 1b       	sub	r25, r25
    d2e4:	79 e0       	ldi	r23, 0x09	; 9
    d2e6:	04 c0       	rjmp	.+8      	; 0xd2f0 <__udivmodqi4_ep>

0000d2e8 <__udivmodqi4_loop>:
    d2e8:	99 1f       	adc	r25, r25
    d2ea:	96 17       	cp	r25, r22
    d2ec:	08 f0       	brcs	.+2      	; 0xd2f0 <__udivmodqi4_ep>
    d2ee:	96 1b       	sub	r25, r22

0000d2f0 <__udivmodqi4_ep>:
    d2f0:	88 1f       	adc	r24, r24
    d2f2:	7a 95       	dec	r23
    d2f4:	c9 f7       	brne	.-14     	; 0xd2e8 <__udivmodqi4_loop>
    d2f6:	80 95       	com	r24
    d2f8:	08 95       	ret

0000d2fa <__divmodqi4>:
    d2fa:	87 fb       	bst	r24, 7
    d2fc:	08 2e       	mov	r0, r24
    d2fe:	06 26       	eor	r0, r22
    d300:	87 fd       	sbrc	r24, 7
    d302:	81 95       	neg	r24
    d304:	67 fd       	sbrc	r22, 7
    d306:	61 95       	neg	r22
    d308:	0e 94 71 69 	call	0xd2e2	; 0xd2e2 <__udivmodqi4>
    d30c:	0e f4       	brtc	.+2      	; 0xd310 <__divmodqi4_1>
    d30e:	91 95       	neg	r25

0000d310 <__divmodqi4_1>:
    d310:	07 fc       	sbrc	r0, 7
    d312:	81 95       	neg	r24

0000d314 <__divmodqi4_exit>:
    d314:	08 95       	ret

0000d316 <__udivmodhi4>:
    d316:	aa 1b       	sub	r26, r26
    d318:	bb 1b       	sub	r27, r27
    d31a:	51 e1       	ldi	r21, 0x11	; 17
    d31c:	07 c0       	rjmp	.+14     	; 0xd32c <__udivmodhi4_ep>

0000d31e <__udivmodhi4_loop>:
    d31e:	aa 1f       	adc	r26, r26
    d320:	bb 1f       	adc	r27, r27
    d322:	a6 17       	cp	r26, r22
    d324:	b7 07       	cpc	r27, r23
    d326:	10 f0       	brcs	.+4      	; 0xd32c <__udivmodhi4_ep>
    d328:	a6 1b       	sub	r26, r22
    d32a:	b7 0b       	sbc	r27, r23

0000d32c <__udivmodhi4_ep>:
    d32c:	88 1f       	adc	r24, r24
    d32e:	99 1f       	adc	r25, r25
    d330:	5a 95       	dec	r21
    d332:	a9 f7       	brne	.-22     	; 0xd31e <__udivmodhi4_loop>
    d334:	80 95       	com	r24
    d336:	90 95       	com	r25
    d338:	bc 01       	movw	r22, r24
    d33a:	cd 01       	movw	r24, r26
    d33c:	08 95       	ret

0000d33e <__divmodhi4>:
    d33e:	97 fb       	bst	r25, 7
    d340:	07 2e       	mov	r0, r23
    d342:	16 f4       	brtc	.+4      	; 0xd348 <__divmodhi4+0xa>
    d344:	00 94       	com	r0
    d346:	07 d0       	rcall	.+14     	; 0xd356 <__divmodhi4_neg1>
    d348:	77 fd       	sbrc	r23, 7
    d34a:	09 d0       	rcall	.+18     	; 0xd35e <__divmodhi4_neg2>
    d34c:	0e 94 8b 69 	call	0xd316	; 0xd316 <__udivmodhi4>
    d350:	07 fc       	sbrc	r0, 7
    d352:	05 d0       	rcall	.+10     	; 0xd35e <__divmodhi4_neg2>
    d354:	3e f4       	brtc	.+14     	; 0xd364 <__divmodhi4_exit>

0000d356 <__divmodhi4_neg1>:
    d356:	90 95       	com	r25
    d358:	81 95       	neg	r24
    d35a:	9f 4f       	sbci	r25, 0xFF	; 255
    d35c:	08 95       	ret

0000d35e <__divmodhi4_neg2>:
    d35e:	70 95       	com	r23
    d360:	61 95       	neg	r22
    d362:	7f 4f       	sbci	r23, 0xFF	; 255

0000d364 <__divmodhi4_exit>:
    d364:	08 95       	ret

0000d366 <__tablejump2__>:
    d366:	ee 0f       	add	r30, r30
    d368:	ff 1f       	adc	r31, r31
    d36a:	05 90       	lpm	r0, Z+
    d36c:	f4 91       	lpm	r31, Z
    d36e:	e0 2d       	mov	r30, r0
    d370:	09 94       	ijmp

0000d372 <__subsf3>:
    d372:	50 58       	subi	r21, 0x80	; 128

0000d374 <__addsf3>:
    d374:	bb 27       	eor	r27, r27
    d376:	aa 27       	eor	r26, r26
    d378:	0e d0       	rcall	.+28     	; 0xd396 <__addsf3x>
    d37a:	e5 c0       	rjmp	.+458    	; 0xd546 <__fp_round>
    d37c:	d6 d0       	rcall	.+428    	; 0xd52a <__fp_pscA>
    d37e:	30 f0       	brcs	.+12     	; 0xd38c <__addsf3+0x18>
    d380:	db d0       	rcall	.+438    	; 0xd538 <__fp_pscB>
    d382:	20 f0       	brcs	.+8      	; 0xd38c <__addsf3+0x18>
    d384:	31 f4       	brne	.+12     	; 0xd392 <__addsf3+0x1e>
    d386:	9f 3f       	cpi	r25, 0xFF	; 255
    d388:	11 f4       	brne	.+4      	; 0xd38e <__addsf3+0x1a>
    d38a:	1e f4       	brtc	.+6      	; 0xd392 <__addsf3+0x1e>
    d38c:	cb c0       	rjmp	.+406    	; 0xd524 <__fp_nan>
    d38e:	0e f4       	brtc	.+2      	; 0xd392 <__addsf3+0x1e>
    d390:	e0 95       	com	r30
    d392:	e7 fb       	bst	r30, 7
    d394:	c1 c0       	rjmp	.+386    	; 0xd518 <__fp_inf>

0000d396 <__addsf3x>:
    d396:	e9 2f       	mov	r30, r25
    d398:	e7 d0       	rcall	.+462    	; 0xd568 <__fp_split3>
    d39a:	80 f3       	brcs	.-32     	; 0xd37c <__addsf3+0x8>
    d39c:	ba 17       	cp	r27, r26
    d39e:	62 07       	cpc	r22, r18
    d3a0:	73 07       	cpc	r23, r19
    d3a2:	84 07       	cpc	r24, r20
    d3a4:	95 07       	cpc	r25, r21
    d3a6:	18 f0       	brcs	.+6      	; 0xd3ae <__addsf3x+0x18>
    d3a8:	71 f4       	brne	.+28     	; 0xd3c6 <__addsf3x+0x30>
    d3aa:	9e f5       	brtc	.+102    	; 0xd412 <__addsf3x+0x7c>
    d3ac:	ff c0       	rjmp	.+510    	; 0xd5ac <__fp_zero>
    d3ae:	0e f4       	brtc	.+2      	; 0xd3b2 <__addsf3x+0x1c>
    d3b0:	e0 95       	com	r30
    d3b2:	0b 2e       	mov	r0, r27
    d3b4:	ba 2f       	mov	r27, r26
    d3b6:	a0 2d       	mov	r26, r0
    d3b8:	0b 01       	movw	r0, r22
    d3ba:	b9 01       	movw	r22, r18
    d3bc:	90 01       	movw	r18, r0
    d3be:	0c 01       	movw	r0, r24
    d3c0:	ca 01       	movw	r24, r20
    d3c2:	a0 01       	movw	r20, r0
    d3c4:	11 24       	eor	r1, r1
    d3c6:	ff 27       	eor	r31, r31
    d3c8:	59 1b       	sub	r21, r25
    d3ca:	99 f0       	breq	.+38     	; 0xd3f2 <__addsf3x+0x5c>
    d3cc:	59 3f       	cpi	r21, 0xF9	; 249
    d3ce:	50 f4       	brcc	.+20     	; 0xd3e4 <__addsf3x+0x4e>
    d3d0:	50 3e       	cpi	r21, 0xE0	; 224
    d3d2:	68 f1       	brcs	.+90     	; 0xd42e <__addsf3x+0x98>
    d3d4:	1a 16       	cp	r1, r26
    d3d6:	f0 40       	sbci	r31, 0x00	; 0
    d3d8:	a2 2f       	mov	r26, r18
    d3da:	23 2f       	mov	r18, r19
    d3dc:	34 2f       	mov	r19, r20
    d3de:	44 27       	eor	r20, r20
    d3e0:	58 5f       	subi	r21, 0xF8	; 248
    d3e2:	f3 cf       	rjmp	.-26     	; 0xd3ca <__addsf3x+0x34>
    d3e4:	46 95       	lsr	r20
    d3e6:	37 95       	ror	r19
    d3e8:	27 95       	ror	r18
    d3ea:	a7 95       	ror	r26
    d3ec:	f0 40       	sbci	r31, 0x00	; 0
    d3ee:	53 95       	inc	r21
    d3f0:	c9 f7       	brne	.-14     	; 0xd3e4 <__addsf3x+0x4e>
    d3f2:	7e f4       	brtc	.+30     	; 0xd412 <__addsf3x+0x7c>
    d3f4:	1f 16       	cp	r1, r31
    d3f6:	ba 0b       	sbc	r27, r26
    d3f8:	62 0b       	sbc	r22, r18
    d3fa:	73 0b       	sbc	r23, r19
    d3fc:	84 0b       	sbc	r24, r20
    d3fe:	ba f0       	brmi	.+46     	; 0xd42e <__addsf3x+0x98>
    d400:	91 50       	subi	r25, 0x01	; 1
    d402:	a1 f0       	breq	.+40     	; 0xd42c <__addsf3x+0x96>
    d404:	ff 0f       	add	r31, r31
    d406:	bb 1f       	adc	r27, r27
    d408:	66 1f       	adc	r22, r22
    d40a:	77 1f       	adc	r23, r23
    d40c:	88 1f       	adc	r24, r24
    d40e:	c2 f7       	brpl	.-16     	; 0xd400 <__addsf3x+0x6a>
    d410:	0e c0       	rjmp	.+28     	; 0xd42e <__addsf3x+0x98>
    d412:	ba 0f       	add	r27, r26
    d414:	62 1f       	adc	r22, r18
    d416:	73 1f       	adc	r23, r19
    d418:	84 1f       	adc	r24, r20
    d41a:	48 f4       	brcc	.+18     	; 0xd42e <__addsf3x+0x98>
    d41c:	87 95       	ror	r24
    d41e:	77 95       	ror	r23
    d420:	67 95       	ror	r22
    d422:	b7 95       	ror	r27
    d424:	f7 95       	ror	r31
    d426:	9e 3f       	cpi	r25, 0xFE	; 254
    d428:	08 f0       	brcs	.+2      	; 0xd42c <__addsf3x+0x96>
    d42a:	b3 cf       	rjmp	.-154    	; 0xd392 <__addsf3+0x1e>
    d42c:	93 95       	inc	r25
    d42e:	88 0f       	add	r24, r24
    d430:	08 f0       	brcs	.+2      	; 0xd434 <__addsf3x+0x9e>
    d432:	99 27       	eor	r25, r25
    d434:	ee 0f       	add	r30, r30
    d436:	97 95       	ror	r25
    d438:	87 95       	ror	r24
    d43a:	08 95       	ret

0000d43c <__fixsfsi>:
    d43c:	04 d0       	rcall	.+8      	; 0xd446 <__fixunssfsi>
    d43e:	68 94       	set
    d440:	b1 11       	cpse	r27, r1
    d442:	b5 c0       	rjmp	.+362    	; 0xd5ae <__fp_szero>
    d444:	08 95       	ret

0000d446 <__fixunssfsi>:
    d446:	98 d0       	rcall	.+304    	; 0xd578 <__fp_splitA>
    d448:	88 f0       	brcs	.+34     	; 0xd46c <__fixunssfsi+0x26>
    d44a:	9f 57       	subi	r25, 0x7F	; 127
    d44c:	90 f0       	brcs	.+36     	; 0xd472 <__fixunssfsi+0x2c>
    d44e:	b9 2f       	mov	r27, r25
    d450:	99 27       	eor	r25, r25
    d452:	b7 51       	subi	r27, 0x17	; 23
    d454:	a0 f0       	brcs	.+40     	; 0xd47e <__fixunssfsi+0x38>
    d456:	d1 f0       	breq	.+52     	; 0xd48c <__fixunssfsi+0x46>
    d458:	66 0f       	add	r22, r22
    d45a:	77 1f       	adc	r23, r23
    d45c:	88 1f       	adc	r24, r24
    d45e:	99 1f       	adc	r25, r25
    d460:	1a f0       	brmi	.+6      	; 0xd468 <__fixunssfsi+0x22>
    d462:	ba 95       	dec	r27
    d464:	c9 f7       	brne	.-14     	; 0xd458 <__fixunssfsi+0x12>
    d466:	12 c0       	rjmp	.+36     	; 0xd48c <__fixunssfsi+0x46>
    d468:	b1 30       	cpi	r27, 0x01	; 1
    d46a:	81 f0       	breq	.+32     	; 0xd48c <__fixunssfsi+0x46>
    d46c:	9f d0       	rcall	.+318    	; 0xd5ac <__fp_zero>
    d46e:	b1 e0       	ldi	r27, 0x01	; 1
    d470:	08 95       	ret
    d472:	9c c0       	rjmp	.+312    	; 0xd5ac <__fp_zero>
    d474:	67 2f       	mov	r22, r23
    d476:	78 2f       	mov	r23, r24
    d478:	88 27       	eor	r24, r24
    d47a:	b8 5f       	subi	r27, 0xF8	; 248
    d47c:	39 f0       	breq	.+14     	; 0xd48c <__fixunssfsi+0x46>
    d47e:	b9 3f       	cpi	r27, 0xF9	; 249
    d480:	cc f3       	brlt	.-14     	; 0xd474 <__fixunssfsi+0x2e>
    d482:	86 95       	lsr	r24
    d484:	77 95       	ror	r23
    d486:	67 95       	ror	r22
    d488:	b3 95       	inc	r27
    d48a:	d9 f7       	brne	.-10     	; 0xd482 <__fixunssfsi+0x3c>
    d48c:	3e f4       	brtc	.+14     	; 0xd49c <__fixunssfsi+0x56>
    d48e:	90 95       	com	r25
    d490:	80 95       	com	r24
    d492:	70 95       	com	r23
    d494:	61 95       	neg	r22
    d496:	7f 4f       	sbci	r23, 0xFF	; 255
    d498:	8f 4f       	sbci	r24, 0xFF	; 255
    d49a:	9f 4f       	sbci	r25, 0xFF	; 255
    d49c:	08 95       	ret

0000d49e <__floatunsisf>:
    d49e:	e8 94       	clt
    d4a0:	09 c0       	rjmp	.+18     	; 0xd4b4 <__floatsisf+0x12>

0000d4a2 <__floatsisf>:
    d4a2:	97 fb       	bst	r25, 7
    d4a4:	3e f4       	brtc	.+14     	; 0xd4b4 <__floatsisf+0x12>
    d4a6:	90 95       	com	r25
    d4a8:	80 95       	com	r24
    d4aa:	70 95       	com	r23
    d4ac:	61 95       	neg	r22
    d4ae:	7f 4f       	sbci	r23, 0xFF	; 255
    d4b0:	8f 4f       	sbci	r24, 0xFF	; 255
    d4b2:	9f 4f       	sbci	r25, 0xFF	; 255
    d4b4:	99 23       	and	r25, r25
    d4b6:	a9 f0       	breq	.+42     	; 0xd4e2 <__floatsisf+0x40>
    d4b8:	f9 2f       	mov	r31, r25
    d4ba:	96 e9       	ldi	r25, 0x96	; 150
    d4bc:	bb 27       	eor	r27, r27
    d4be:	93 95       	inc	r25
    d4c0:	f6 95       	lsr	r31
    d4c2:	87 95       	ror	r24
    d4c4:	77 95       	ror	r23
    d4c6:	67 95       	ror	r22
    d4c8:	b7 95       	ror	r27
    d4ca:	f1 11       	cpse	r31, r1
    d4cc:	f8 cf       	rjmp	.-16     	; 0xd4be <__floatsisf+0x1c>
    d4ce:	fa f4       	brpl	.+62     	; 0xd50e <__floatsisf+0x6c>
    d4d0:	bb 0f       	add	r27, r27
    d4d2:	11 f4       	brne	.+4      	; 0xd4d8 <__floatsisf+0x36>
    d4d4:	60 ff       	sbrs	r22, 0
    d4d6:	1b c0       	rjmp	.+54     	; 0xd50e <__floatsisf+0x6c>
    d4d8:	6f 5f       	subi	r22, 0xFF	; 255
    d4da:	7f 4f       	sbci	r23, 0xFF	; 255
    d4dc:	8f 4f       	sbci	r24, 0xFF	; 255
    d4de:	9f 4f       	sbci	r25, 0xFF	; 255
    d4e0:	16 c0       	rjmp	.+44     	; 0xd50e <__floatsisf+0x6c>
    d4e2:	88 23       	and	r24, r24
    d4e4:	11 f0       	breq	.+4      	; 0xd4ea <__floatsisf+0x48>
    d4e6:	96 e9       	ldi	r25, 0x96	; 150
    d4e8:	11 c0       	rjmp	.+34     	; 0xd50c <__floatsisf+0x6a>
    d4ea:	77 23       	and	r23, r23
    d4ec:	21 f0       	breq	.+8      	; 0xd4f6 <__floatsisf+0x54>
    d4ee:	9e e8       	ldi	r25, 0x8E	; 142
    d4f0:	87 2f       	mov	r24, r23
    d4f2:	76 2f       	mov	r23, r22
    d4f4:	05 c0       	rjmp	.+10     	; 0xd500 <__floatsisf+0x5e>
    d4f6:	66 23       	and	r22, r22
    d4f8:	71 f0       	breq	.+28     	; 0xd516 <__floatsisf+0x74>
    d4fa:	96 e8       	ldi	r25, 0x86	; 134
    d4fc:	86 2f       	mov	r24, r22
    d4fe:	70 e0       	ldi	r23, 0x00	; 0
    d500:	60 e0       	ldi	r22, 0x00	; 0
    d502:	2a f0       	brmi	.+10     	; 0xd50e <__floatsisf+0x6c>
    d504:	9a 95       	dec	r25
    d506:	66 0f       	add	r22, r22
    d508:	77 1f       	adc	r23, r23
    d50a:	88 1f       	adc	r24, r24
    d50c:	da f7       	brpl	.-10     	; 0xd504 <__floatsisf+0x62>
    d50e:	88 0f       	add	r24, r24
    d510:	96 95       	lsr	r25
    d512:	87 95       	ror	r24
    d514:	97 f9       	bld	r25, 7
    d516:	08 95       	ret

0000d518 <__fp_inf>:
    d518:	97 f9       	bld	r25, 7
    d51a:	9f 67       	ori	r25, 0x7F	; 127
    d51c:	80 e8       	ldi	r24, 0x80	; 128
    d51e:	70 e0       	ldi	r23, 0x00	; 0
    d520:	60 e0       	ldi	r22, 0x00	; 0
    d522:	08 95       	ret

0000d524 <__fp_nan>:
    d524:	9f ef       	ldi	r25, 0xFF	; 255
    d526:	80 ec       	ldi	r24, 0xC0	; 192
    d528:	08 95       	ret

0000d52a <__fp_pscA>:
    d52a:	00 24       	eor	r0, r0
    d52c:	0a 94       	dec	r0
    d52e:	16 16       	cp	r1, r22
    d530:	17 06       	cpc	r1, r23
    d532:	18 06       	cpc	r1, r24
    d534:	09 06       	cpc	r0, r25
    d536:	08 95       	ret

0000d538 <__fp_pscB>:
    d538:	00 24       	eor	r0, r0
    d53a:	0a 94       	dec	r0
    d53c:	12 16       	cp	r1, r18
    d53e:	13 06       	cpc	r1, r19
    d540:	14 06       	cpc	r1, r20
    d542:	05 06       	cpc	r0, r21
    d544:	08 95       	ret

0000d546 <__fp_round>:
    d546:	09 2e       	mov	r0, r25
    d548:	03 94       	inc	r0
    d54a:	00 0c       	add	r0, r0
    d54c:	11 f4       	brne	.+4      	; 0xd552 <__fp_round+0xc>
    d54e:	88 23       	and	r24, r24
    d550:	52 f0       	brmi	.+20     	; 0xd566 <__fp_round+0x20>
    d552:	bb 0f       	add	r27, r27
    d554:	40 f4       	brcc	.+16     	; 0xd566 <__fp_round+0x20>
    d556:	bf 2b       	or	r27, r31
    d558:	11 f4       	brne	.+4      	; 0xd55e <__fp_round+0x18>
    d55a:	60 ff       	sbrs	r22, 0
    d55c:	04 c0       	rjmp	.+8      	; 0xd566 <__fp_round+0x20>
    d55e:	6f 5f       	subi	r22, 0xFF	; 255
    d560:	7f 4f       	sbci	r23, 0xFF	; 255
    d562:	8f 4f       	sbci	r24, 0xFF	; 255
    d564:	9f 4f       	sbci	r25, 0xFF	; 255
    d566:	08 95       	ret

0000d568 <__fp_split3>:
    d568:	57 fd       	sbrc	r21, 7
    d56a:	90 58       	subi	r25, 0x80	; 128
    d56c:	44 0f       	add	r20, r20
    d56e:	55 1f       	adc	r21, r21
    d570:	59 f0       	breq	.+22     	; 0xd588 <__fp_splitA+0x10>
    d572:	5f 3f       	cpi	r21, 0xFF	; 255
    d574:	71 f0       	breq	.+28     	; 0xd592 <__fp_splitA+0x1a>
    d576:	47 95       	ror	r20

0000d578 <__fp_splitA>:
    d578:	88 0f       	add	r24, r24
    d57a:	97 fb       	bst	r25, 7
    d57c:	99 1f       	adc	r25, r25
    d57e:	61 f0       	breq	.+24     	; 0xd598 <__fp_splitA+0x20>
    d580:	9f 3f       	cpi	r25, 0xFF	; 255
    d582:	79 f0       	breq	.+30     	; 0xd5a2 <__fp_splitA+0x2a>
    d584:	87 95       	ror	r24
    d586:	08 95       	ret
    d588:	12 16       	cp	r1, r18
    d58a:	13 06       	cpc	r1, r19
    d58c:	14 06       	cpc	r1, r20
    d58e:	55 1f       	adc	r21, r21
    d590:	f2 cf       	rjmp	.-28     	; 0xd576 <__fp_split3+0xe>
    d592:	46 95       	lsr	r20
    d594:	f1 df       	rcall	.-30     	; 0xd578 <__fp_splitA>
    d596:	08 c0       	rjmp	.+16     	; 0xd5a8 <__fp_splitA+0x30>
    d598:	16 16       	cp	r1, r22
    d59a:	17 06       	cpc	r1, r23
    d59c:	18 06       	cpc	r1, r24
    d59e:	99 1f       	adc	r25, r25
    d5a0:	f1 cf       	rjmp	.-30     	; 0xd584 <__fp_splitA+0xc>
    d5a2:	86 95       	lsr	r24
    d5a4:	71 05       	cpc	r23, r1
    d5a6:	61 05       	cpc	r22, r1
    d5a8:	08 94       	sec
    d5aa:	08 95       	ret

0000d5ac <__fp_zero>:
    d5ac:	e8 94       	clt

0000d5ae <__fp_szero>:
    d5ae:	bb 27       	eor	r27, r27
    d5b0:	66 27       	eor	r22, r22
    d5b2:	77 27       	eor	r23, r23
    d5b4:	cb 01       	movw	r24, r22
    d5b6:	97 f9       	bld	r25, 7
    d5b8:	08 95       	ret

0000d5ba <__mulsf3>:
    d5ba:	0b d0       	rcall	.+22     	; 0xd5d2 <__mulsf3x>
    d5bc:	c4 cf       	rjmp	.-120    	; 0xd546 <__fp_round>
    d5be:	b5 df       	rcall	.-150    	; 0xd52a <__fp_pscA>
    d5c0:	28 f0       	brcs	.+10     	; 0xd5cc <__mulsf3+0x12>
    d5c2:	ba df       	rcall	.-140    	; 0xd538 <__fp_pscB>
    d5c4:	18 f0       	brcs	.+6      	; 0xd5cc <__mulsf3+0x12>
    d5c6:	95 23       	and	r25, r21
    d5c8:	09 f0       	breq	.+2      	; 0xd5cc <__mulsf3+0x12>
    d5ca:	a6 cf       	rjmp	.-180    	; 0xd518 <__fp_inf>
    d5cc:	ab cf       	rjmp	.-170    	; 0xd524 <__fp_nan>
    d5ce:	11 24       	eor	r1, r1
    d5d0:	ee cf       	rjmp	.-36     	; 0xd5ae <__fp_szero>

0000d5d2 <__mulsf3x>:
    d5d2:	ca df       	rcall	.-108    	; 0xd568 <__fp_split3>
    d5d4:	a0 f3       	brcs	.-24     	; 0xd5be <__mulsf3+0x4>

0000d5d6 <__mulsf3_pse>:
    d5d6:	95 9f       	mul	r25, r21
    d5d8:	d1 f3       	breq	.-12     	; 0xd5ce <__mulsf3+0x14>
    d5da:	95 0f       	add	r25, r21
    d5dc:	50 e0       	ldi	r21, 0x00	; 0
    d5de:	55 1f       	adc	r21, r21
    d5e0:	62 9f       	mul	r22, r18
    d5e2:	f0 01       	movw	r30, r0
    d5e4:	72 9f       	mul	r23, r18
    d5e6:	bb 27       	eor	r27, r27
    d5e8:	f0 0d       	add	r31, r0
    d5ea:	b1 1d       	adc	r27, r1
    d5ec:	63 9f       	mul	r22, r19
    d5ee:	aa 27       	eor	r26, r26
    d5f0:	f0 0d       	add	r31, r0
    d5f2:	b1 1d       	adc	r27, r1
    d5f4:	aa 1f       	adc	r26, r26
    d5f6:	64 9f       	mul	r22, r20
    d5f8:	66 27       	eor	r22, r22
    d5fa:	b0 0d       	add	r27, r0
    d5fc:	a1 1d       	adc	r26, r1
    d5fe:	66 1f       	adc	r22, r22
    d600:	82 9f       	mul	r24, r18
    d602:	22 27       	eor	r18, r18
    d604:	b0 0d       	add	r27, r0
    d606:	a1 1d       	adc	r26, r1
    d608:	62 1f       	adc	r22, r18
    d60a:	73 9f       	mul	r23, r19
    d60c:	b0 0d       	add	r27, r0
    d60e:	a1 1d       	adc	r26, r1
    d610:	62 1f       	adc	r22, r18
    d612:	83 9f       	mul	r24, r19
    d614:	a0 0d       	add	r26, r0
    d616:	61 1d       	adc	r22, r1
    d618:	22 1f       	adc	r18, r18
    d61a:	74 9f       	mul	r23, r20
    d61c:	33 27       	eor	r19, r19
    d61e:	a0 0d       	add	r26, r0
    d620:	61 1d       	adc	r22, r1
    d622:	23 1f       	adc	r18, r19
    d624:	84 9f       	mul	r24, r20
    d626:	60 0d       	add	r22, r0
    d628:	21 1d       	adc	r18, r1
    d62a:	82 2f       	mov	r24, r18
    d62c:	76 2f       	mov	r23, r22
    d62e:	6a 2f       	mov	r22, r26
    d630:	11 24       	eor	r1, r1
    d632:	9f 57       	subi	r25, 0x7F	; 127
    d634:	50 40       	sbci	r21, 0x00	; 0
    d636:	8a f0       	brmi	.+34     	; 0xd65a <__mulsf3_pse+0x84>
    d638:	e1 f0       	breq	.+56     	; 0xd672 <__mulsf3_pse+0x9c>
    d63a:	88 23       	and	r24, r24
    d63c:	4a f0       	brmi	.+18     	; 0xd650 <__mulsf3_pse+0x7a>
    d63e:	ee 0f       	add	r30, r30
    d640:	ff 1f       	adc	r31, r31
    d642:	bb 1f       	adc	r27, r27
    d644:	66 1f       	adc	r22, r22
    d646:	77 1f       	adc	r23, r23
    d648:	88 1f       	adc	r24, r24
    d64a:	91 50       	subi	r25, 0x01	; 1
    d64c:	50 40       	sbci	r21, 0x00	; 0
    d64e:	a9 f7       	brne	.-22     	; 0xd63a <__mulsf3_pse+0x64>
    d650:	9e 3f       	cpi	r25, 0xFE	; 254
    d652:	51 05       	cpc	r21, r1
    d654:	70 f0       	brcs	.+28     	; 0xd672 <__mulsf3_pse+0x9c>
    d656:	60 cf       	rjmp	.-320    	; 0xd518 <__fp_inf>
    d658:	aa cf       	rjmp	.-172    	; 0xd5ae <__fp_szero>
    d65a:	5f 3f       	cpi	r21, 0xFF	; 255
    d65c:	ec f3       	brlt	.-6      	; 0xd658 <__mulsf3_pse+0x82>
    d65e:	98 3e       	cpi	r25, 0xE8	; 232
    d660:	dc f3       	brlt	.-10     	; 0xd658 <__mulsf3_pse+0x82>
    d662:	86 95       	lsr	r24
    d664:	77 95       	ror	r23
    d666:	67 95       	ror	r22
    d668:	b7 95       	ror	r27
    d66a:	f7 95       	ror	r31
    d66c:	e7 95       	ror	r30
    d66e:	9f 5f       	subi	r25, 0xFF	; 255
    d670:	c1 f7       	brne	.-16     	; 0xd662 <__mulsf3_pse+0x8c>
    d672:	fe 2b       	or	r31, r30
    d674:	88 0f       	add	r24, r24
    d676:	91 1d       	adc	r25, r1
    d678:	96 95       	lsr	r25
    d67a:	87 95       	ror	r24
    d67c:	97 f9       	bld	r25, 7
    d67e:	08 95       	ret

0000d680 <strnlen_P>:
    d680:	fc 01       	movw	r30, r24
    d682:	05 90       	lpm	r0, Z+
    d684:	61 50       	subi	r22, 0x01	; 1
    d686:	70 40       	sbci	r23, 0x00	; 0
    d688:	01 10       	cpse	r0, r1
    d68a:	d8 f7       	brcc	.-10     	; 0xd682 <strnlen_P+0x2>
    d68c:	80 95       	com	r24
    d68e:	90 95       	com	r25
    d690:	8e 0f       	add	r24, r30
    d692:	9f 1f       	adc	r25, r31
    d694:	08 95       	ret

0000d696 <_exit>:
    d696:	f8 94       	cli

0000d698 <__stop_program>:
    d698:	ff cf       	rjmp	.-2      	; 0xd698 <__stop_program>
