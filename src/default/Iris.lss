
Iris.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00007810  00007910  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00007810  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000091a  00800102  00800102  00007912  2**1
                  ALLOC
  3 .noinit       00000400  00800a20  00800a20  00007920  2**5
                  CONTENTS, READONLY
  4 .stab         0000048c  00000000  00000000  00007d20  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000256  00000000  00000000  000081ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  00008402  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000498  00000000  00000000  00008418  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00004e8e  00000000  00000000  000088b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000139b  00000000  00000000  0000d73e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000015c4  00000000  00000000  0000ead9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000b08  00000000  00000000  000100a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00001446  00000000  00000000  00010ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00003e7d  00000000  00000000  00011fee  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000004f0  00000000  00000000  00015e70  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 dc 27 	jmp	0x4fb8	; 0x4fb8 <__ctors_end>
       4:	0c 94 45 28 	jmp	0x508a	; 0x508a <__bad_interrupt>
       8:	0c 94 45 28 	jmp	0x508a	; 0x508a <__bad_interrupt>
       c:	0c 94 45 28 	jmp	0x508a	; 0x508a <__bad_interrupt>
      10:	0c 94 45 28 	jmp	0x508a	; 0x508a <__bad_interrupt>
      14:	0c 94 45 28 	jmp	0x508a	; 0x508a <__bad_interrupt>
      18:	0c 94 45 28 	jmp	0x508a	; 0x508a <__bad_interrupt>
      1c:	0c 94 45 28 	jmp	0x508a	; 0x508a <__bad_interrupt>
      20:	0c 94 ac 2d 	jmp	0x5b58	; 0x5b58 <__vector_8>
      24:	0c 94 45 28 	jmp	0x508a	; 0x508a <__bad_interrupt>
      28:	0c 94 45 28 	jmp	0x508a	; 0x508a <__bad_interrupt>
      2c:	0c 94 45 28 	jmp	0x508a	; 0x508a <__bad_interrupt>
      30:	0c 94 45 28 	jmp	0x508a	; 0x508a <__bad_interrupt>
      34:	0c 94 89 2b 	jmp	0x5712	; 0x5712 <__vector_13>
      38:	0c 94 c9 2b 	jmp	0x5792	; 0x5792 <__vector_14>
      3c:	0c 94 45 28 	jmp	0x508a	; 0x508a <__bad_interrupt>
      40:	0c 94 45 28 	jmp	0x508a	; 0x508a <__bad_interrupt>
      44:	0c 94 45 28 	jmp	0x508a	; 0x508a <__bad_interrupt>
      48:	0c 94 45 28 	jmp	0x508a	; 0x508a <__bad_interrupt>
      4c:	0c 94 45 28 	jmp	0x508a	; 0x508a <__bad_interrupt>
      50:	0c 94 45 28 	jmp	0x508a	; 0x508a <__bad_interrupt>
      54:	0c 94 45 28 	jmp	0x508a	; 0x508a <__bad_interrupt>
      58:	0c 94 45 28 	jmp	0x508a	; 0x508a <__bad_interrupt>
      5c:	0c 94 45 28 	jmp	0x508a	; 0x508a <__bad_interrupt>
      60:	0c 94 45 28 	jmp	0x508a	; 0x508a <__bad_interrupt>
      64:	0c 94 45 28 	jmp	0x508a	; 0x508a <__bad_interrupt>
      68:	0c 94 45 28 	jmp	0x508a	; 0x508a <__bad_interrupt>
      6c:	0c 94 45 28 	jmp	0x508a	; 0x508a <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	81 00       	.word	0x0081	; ????
      72:	45 00       	.word	0x0045	; ????
      74:	27 ff       	sbrs	r18, 7
      76:	24 ff       	sbrs	r18, 4
      78:	2a 90       	ld	r2, -Y
      7a:	2b 1c       	adc	r2, r11
      7c:	21 0c       	add	r2, r1
      7e:	22 fb       	bst	r18, 2
      80:	85 00       	.word	0x0085	; ????
      82:	84 00       	.word	0x0084	; ????
      84:	89 03       	fmulsu	r16, r17
      86:	88 8d       	ldd	r24, Y+24	; 0x18
      88:	81 09       	sbc	r24, r1
      8a:	6f 02       	muls	r22, r31
      8c:	44 42       	sbci	r20, 0x24	; 36
      8e:	47 00       	.word	0x0047	; ????
      90:	45 01       	movw	r8, r10
      92:	b0 83       	st	Z, r27
      94:	b3 00       	.word	0x00b3	; ????
      96:	b1 01       	movw	r22, r2
      98:	25 11       	cpse	r18, r5
      9a:	8a 4f       	sbci	r24, 0xFA	; 250
      9c:	8b 03       	fmulsu	r16, r19

0000009e <eeprom_format_table>:
      9e:	5a 55 01 20 01 01 00 38 08 00 00 00 00 00 00 00     ZU. ...8........
	...

000000be <patchCommands>:
      be:	58 2e 5b 2e b7 2e bb 2e c2 2e 63 2e 68 2e 6d 2e     X.[.......c.h.m.
      ce:	ca 2e 70 2e 73 2e 76 2e b1 2e b4 2e da 2e           ..p.s.v.......

000000dc <fader>:
      dc:	00 40 88 91 d2 e4 ad b5 b6 be bf ff                 .@..........

000000e8 <map_uzeboxlogo2>:
      e8:	05 03 00 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f     ................
	...

000000f9 <map_uzeboxlogo>:
      f9:	05 04 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d     ................
     109:	00 0e 0f 10 11 12                                   ......

0000010f <logo_tileset>:
	...
     16b:	00 00 00 49 00 00 00 00 00 49 52 52 00 00 00 49     ...I.....IRR...I
     17b:	52 53 1c 25 00 49 52 52 24 25 25 1b 52 52 5c 2d     RS.%.IRR$%%.RR\-
     18b:	2d 1c 12 12 00 00 00 00 00 00 00 00 00 00 00 00     -...............
     19b:	40 49 49 49 00 40 49 49 52 5b 5b 5b 4a 52 52 5b     @III.@IIR[[[JRR[
     1ab:	1c 1c 13 12 5b 1c 24 1c 12 09 09 09 24 1b 12 09     ....[.$.....$...
     1bb:	09 09 09 0a 0a 0a 0a 0a 0a 0a 0a 13 0a 0a 12 0a     ................
     1cb:	0a 12 13 0a 00 00 00 00 00 00 00 00 92 52 52 52     .............RRR
     1db:	52 52 52 49 13 12 13 09 00 1c 1b 13 0a 12 12 40     RRRI...........@
     1eb:	1b 65 64 1c 09 0a 00 09 24 1b 1c 65 12 00 00 25     .ed.....$..e...%
     1fb:	1c 1c 1c 1c 01 00 25 24 1c 1c 1c 1c 00 24 25 24     ......%$.....$%$
     20b:	24 24 1c 1c 00 00 00 00 00 00 00 00 49 40 00 00     $$..........I@..
     21b:	00 00 00 00 52 49 49 00 00 00 00 00 1c 5b 4a 48     ....RII......[JH
     22b:	00 00 00 00 1c 25 52 49 00 00 00 00 65 24 64 49     .....%RI....e$dI
     23b:	00 00 00 00 65 25 64 49 00 00 00 00 6d 2e 5c 49     ....e%dI....m.\I
	...
     253:	00 00 40 52 00 00 00 00 00 49 52 5c 00 00 00 00     ..@R.....IR\....
     263:	53 52 24 25 00 00 00 53 52 25 25 25 00 00 4a 52     SR$%...SR%%%..JR
     273:	25 25 1b 00 00 00 5b 25 13 00 00 1b 00 5b 53 00     %%....[%.....[S.
     283:	0a 1c 37 37 09 5b 1c 65 7f 37 2e 2e 52 2e 2e 1c     ..77.[.e.7..R...
     293:	13 13 12 00 2e 25 1b 13 12 00 00 12 1c 1c 12 00     .....%..........
     2a3:	00 12 25 1c 12 00 00 12 2e 37 1c 13 00 13 2e 37     ..%......7.....7
     2b3:	36 1c 13 1b 37 37 2e 2e 25 13 1c 1c 2e 2e 2e 2e     6...77..%.......
     2c3:	1b 1c 1c 1c 6e 6e 6e 1c 1c 1c 1c 1c 09 13 13 12     ....nnn.........
     2d3:	12 13 13 00 13 13 13 13 13 1c 00 09 13 13 13 13     ................
     2e3:	1c 01 00 37 13 13 13 1c 13 00 2e 2e 1b 1b 1c 1c     ...7............
     2f3:	00 1c 77 2e 1b 1b 25 00 13 7f 25 1c 1c 1c 01 0a     ..w...%...%.....
     303:	37 24 1c 1c 1c 13 0a 2e 25 25 09 00 13 2e 24 25     7$......%%....$%
     313:	25 25 25 25 2e 25 25 25 25 25 25 25 25 25 2d 2e     %%%%.%%%%%%%%%-.
     323:	25 1b 1c 1c 2e 2e 25 1c 13 25 1b 13 25 1c 1c 1c     %.....%..%..%...
     333:	1c 01 09 52 1c 1c 13 00 01 1c 5b 5c 0a 00 01 65     ...R......[\...e
     343:	77 5c 1b 00 01 6e 7f 6e 52 1b 00 00 6d 1c 52 49     w\...n.nR...m.RI
     353:	00 00 00 00 1c 13 53 00 00 00 00 00 1c 52 4a 00     ......S......RJ.
     363:	00 00 00 00 5b 5b 00 00 00 00 00 00 5c 00 00 00     ....[[......\...
	...
     38f:	13 5b 7f 77 6e 6e 6e 6e 13 65 77 76 6e 6e 6e 6e     .[.wnnnn.ewvnnnn
     39f:	1b 65 77 76 76 76 6e 77 1b 5b bf 76 b6 76 76 76     .ewvvvnw.[.v.vvv
     3af:	09 13 6d bf b7 b6 b7 65 00 1b 12 5c 76 bf 76 6d     ..m....e...\v.vm
     3bf:	00 00 12 1b 12 5b 5b 5c 00 00 00 00 09 0a 12 13     .....[[\........
     3cf:	6e 77 24 1c 1c 1c 1c 1c 77 25 1c 1c 1c 1c 24 25     nw$.....w%....$%
     3df:	6e 1c 1c 1c 24 25 25 1b 1c 1c 24 25 25 13 00 00     n...$%%...$%%...
     3ef:	64 6d 6d 1b 00 09 6e bf 6d 5b 09 12 6e bf 6d 5b     dmm...n.m[..n.m[
     3ff:	5b 12 5b 64 5b 12 13 12 13 1b 12 12 09 01 00 00     [.[d[...........
     40f:	1c 24 2e 1c 09 00 09 6e 25 24 01 00 09 76 7f 7f     .$.....n%$...v..
     41f:	00 00 12 77 7f 7f 64 12 64 bf bf 77 5b 12 1b 09     ...w..d.d..w[...
     42f:	bf 6d 5b 12 1b 09 00 00 12 13 1b 09 00 00 00 00     .m[.............
     43f:	09 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     44f:	7f 7f 53 13 13 00 00 00 64 12 1b 01 00 00 00 00     ..S.....d.......
     45f:	1b 12 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     497:	26 00 00 00 26 00 26 26 2f 00 00 00 2f 00 00 00     &...&.&&/.../...
     4a7:	37 00 00 00 37 00 00 00 ff 00 00 00 ff 00 00 00     7...7...........
     4b7:	bf 00 00 00 bf 00 00 bf 37 00 00 37 00 00 37 00     ........7..7..7.
     4c7:	00 26 26 00 00 00 26 26 00 00 00 00 00 00 00 00     .&&...&&........
     4d7:	26 26 26 00 26 26 26 26 00 00 2f 00 2f 00 00 00     &&&.&&&&.././...
     4e7:	00 37 00 00 37 00 00 00 ff 00 00 00 ff ff ff ff     .7..7...........
     4f7:	00 00 00 00 bf 00 00 00 00 00 00 00 37 00 00 00     ............7...
     507:	26 26 26 00 26 26 26 26 00 00 00 00 00 00 00 00     &&&.&&&&........
     517:	26 00 26 26 26 26 00 00 00 00 2f 00 00 00 2f 00     &.&&&&..../.../.
     527:	00 00 37 00 00 00 37 00 00 00 ff ff ff ff 00 00     ..7...7.........
     537:	00 00 bf 00 00 00 bf 00 00 00 37 00 00 00 37 00     ..........7...7.
     547:	26 00 26 26 26 26 00 00 00 00 00 00 00 00 00 00     &.&&&&..........
     557:	00 00 26 26 26 00 26 00 00 2f 00 00 2f 00 2f 00     ..&&&.&../.././.
     567:	37 00 00 00 37 00 00 37 ff 00 00 00 ff 00 00 00     7...7..7........
     577:	bf 00 00 00 bf 00 00 bf 37 00 00 37 00 00 37 00     ........7..7..7.
     587:	26 26 26 00 00 00 26 00 00 00 00 00 00 00 00 00     &&&...&.........
     597:	00 00 26 00 00 00 00 00 00 00 2f 00 00 00 00 00     ..&......./.....
     5a7:	00 37 00 00 00 00 00 00 ff 00 00 00 00 00 00 00     .7..............
     5b7:	00 bf 00 00 00 00 00 00 00 00 37 00 00 00 00 00     ..........7.....
     5c7:	00 00 26 00 00 00 00 00 00 00 00 00 00 00 00 00     ..&.............
	...
     5eb:	00 00 00 e4 00 00 00 00 09 9b ed f6 00 00 00 9b     ................
     5fb:	a4 ad bf bf 00 52 9b a4 76 7f 7f b7 5b 9b 6d 77     .....R..v...[.mw
     60b:	7f 76 6e b7 00 00 00 00 00 00 00 00 00 00 00 00     .vn.............
     61b:	5b b6 f6 f6 00 5b f6 ff ff ff ff bf f6 ff ff ff     [....[..........
     62b:	ff bf bf ae ff bf ff ff ff b7 ad 65 bf bf ff ff     ...........e....
     63b:	b7 b6 ad 65 b7 bf ff ff bf b7 ae 6e b7 bf ff ff     ...e.......n....
     64b:	bf b7 b7 65 00 00 00 00 00 00 00 00 f6 f6 ed ed     ...e............
     65b:	ad a4 a4 9b b6 6d 6d 5c 52 6e 65 64 65 65 65 52     .....mm\RnedeeeR
     66b:	65 76 6d 25 5c 5c 52 53 6e 24 65 6e 65 52 52 6e     evm%\\RSn$eneRRn
     67b:	25 25 24 25 5b 52 77 2d 25 25 25 24 52 6e 6e 2d     %%$%[Rw-%%%$Rnn-
     68b:	25 25 25 25 00 00 00 00 00 00 00 00 9b 49 00 00     %%%%.........I..
     69b:	00 00 00 00 a4 9b 92 00 00 00 00 00 25 64 93 49     ............%d.I
     6ab:	00 00 00 00 65 2e 9b 52 00 00 00 00 6d 25 65 52     ....e..R....m%eR
     6bb:	00 00 00 00 6d 2d 65 52 00 00 00 00 6e 2e 64 52     ....m-eR....n.dR
	...
     6d3:	00 00 49 5b 00 00 00 00 00 4a 5b 65 00 00 00 00     ..I[.....J[e....
     6e3:	5b 9b 6d 2d 00 00 00 5b 5b 2d 2e 25 00 00 52 5b     [.m-...[[-.%..R[
     6f3:	2e 2e 1c 09 00 01 5b 2d 1c 01 09 1c 00 5c 5b 01     ......[-.....\[.
     703:	4a 65 77 7f 4a 5b 1c 6e 7f 77 77 76 9b 77 77 6d     Jew.J[.n.wwv.wwm
     713:	65 6e 6e a4 77 6e 65 65 65 5b a4 b7 25 25 5c 52     enn.wneee[..%%\R
     723:	52 6d bf bf 13 09 49 64 7f bf bf bf 09 5c 7f 7f     Rm....Id.....\..
     733:	bf bf b7 bf 7f 7f 77 7f 7f b7 bf bf 77 77 7f 7f     ......w.....ww..
     743:	6e b7 bf bf 77 7f 7f 6e 77 bf bf bf b6 ff ff ff     n...w..nw.......
     753:	bf bf b7 5b bf ff ff ff bf bf a4 64 bf ff ff ff     ...[.......d....
     763:	bf ad a4 7f bf ff ff ff bf a4 bf 7f ff ff ff bf     ................
     773:	ad bf bf bf ff ff ff b6 bf bf bf 77 ff ff f7 bf     ...........w....
     783:	bf bf 77 77 ff ff ff bf bf bf 64 52 6d 7f 6e 2e     ..ww......dRm.n.
     793:	2d 2d 25 6e 7f 76 6e 6e 6e 2e 25 65 77 77 77 76     --%n.vnnn.%ewwwv
     7a3:	2e 1c 25 24 7f 77 6e 25 1c 25 1c 1b 77 65 25 25     ..%$.wn%.%..we%%
     7b3:	1c 09 0a 5b 6e 6e 1c 09 49 25 64 64 5b 49 4a 6e     ...[nn..I%dd[IJn
     7c3:	7f 64 5c 00 53 77 bf 77 5b 5c 00 00 6e 25 5b 4a     .d\.Sw.w[\..n%[J
     7d3:	00 00 00 00 1c 1b 5b 00 00 00 00 00 24 5b 53 00     ......[.....$[S.
     7e3:	00 00 00 00 5b 5c 00 00 00 00 00 00 64 00 00 00     ....[\......d...
	...
     80f:	5b 5c 7f bf 77 76 77 77 5c 6d 7f b7 77 77 77 77     [\..wvww\m..wwww
     81f:	5c 6d 7f bf 77 77 77 bf 5c 64 bf bf bf bf bf 7f     \m..www.\d......
     82f:	0a 5c 6e bf bf bf bf 76 00 65 64 6d bf bf bf bf     .\n....v.edm....
     83f:	00 00 5b 6d 64 6d ad b6 00 00 00 00 12 5b 64 6d     ..[mdm.......[dm
     84f:	77 7f 6e 6e 77 bf bf bf 7f 76 6d 76 77 bf bf bf     w.nnw....vmvw...
     85f:	77 6d 6e 76 7f bf bf bf 6d 6e 76 7f bf b7 ad f6     wmnv....mnv.....
     86f:	76 bf bf 76 a4 ad ff ff bf b6 64 ad ff ff ff ff     v..v......d.....
     87f:	b6 ad bf ff ff ff ff f6 ad b6 ad 64 5b 52 00 00     ...........d[R..
     88f:	ff ff bf bf ad 5b 64 bf ff ff b6 ad ad bf ff bf     .....[d.........
     89f:	ff f6 ff ff ff ff bf 64 ff ff ff ff bf b6 76 5b     .......d......v[
     8af:	ff ff ff bf bf 5b 00 00 ff ff ff 5c 00 00 00 00     .....[.....\....
     8bf:	a4 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     8cf:	bf bf 64 5c 5c 00 00 00 6e 5c 65 49 00 00 00 00     ..d\\...n\eI....
     8df:	6d 5b 00 00 00 00 00 00 00 00 00 00 00 00 00 00     m[..............
	...

0000090f <logoInitPatches>:
     90f:	00 00 00 18 09 00 00 00 00                          .........

00000918 <initPatch>:
     918:	00 02 08 00 08 55 04 08 5a 00 00 f8 00 09 90 00     .....U..Z.......
     928:	0a 1e 32 05 00 00 ff                                ..2....

0000092f <default_scores>:
     92f:	55 5a 45 00 00 4c 4a 42 00 00 41 41 41 00 00 42     UZE..LJB..AAA..B
     93f:	42 42 00 00 43 43 43 00 00 44 44 44 00 00           BB..CCC..DDD..

0000094d <strLevels>:
     94d:	20 20 20 47 4c 41 43 49 45 53 20 20 20 00              GLACIES   .

0000095b <strPaused>:
     95b:	50 41 55 53 45 44 00                                PAUSED.

00000962 <strExit>:
     962:	45 58 49 54 20 2d 20 58 00                          EXIT - X.

0000096b <strLives>:
     96b:	4c 49 56 45 53 3a 00                                LIVES:.

00000972 <strShield>:
     972:	53 48 49 45 4c 44 3a 00                             SHIELD:.

0000097a <strScore>:
     97a:	53 43 4f 52 45 3a 00                                SCORE:.

00000981 <strSelectHandle>:
     981:	53 45 4c 45 43 54 20 2d 20 41 2f 53 54 41 52 54     SELECT - A/START
	...

00000992 <strHighscores>:
     992:	48 49 47 48 20 53 43 4f 52 45 53 00                 HIGH SCORES.

0000099e <str1Player>:
     99e:	53 54 41 52 54 00                                   START.

000009a4 <strCopyright>:
     9a4:	32 30 31 36 20 4c 41 57 52 45 4e 43 45 20 42 52     2016 LAWRENCE BR
     9b4:	4f 4f 4b 53 00                                      OOKS.

000009b9 <my_patches>:
     9b9:	00 00 00 c2 09 00 00 00 00                          .........

000009c2 <ad_navigate>:
     9c2:	00 02 02 00 04 32 01 03 01 01 03 01 01 03 01 01     .....2..........
     9d2:	03 01 01 03 01 01 03 01 01 03 01 01 03 01 01 03     ................
     9e2:	01 01 03 01 01 03 01 01 03 01 01 03 01 01 03 01     ................
     9f2:	01 03 01 01 03 01 01 04 01 01 04 01 01 04 01 01     ................
     a02:	04 01 01 04 01 01 04 01 01 04 01 01 04 01 01 04     ................
     a12:	01 01 04 01 01 04 01 01 04 01 01 04 01 01 04 01     ................
     a22:	01 04 01 01 03 01 01 03 01 01 03 01 01 03 01 01     ................
     a32:	03 01 01 03 01 01 03 01 01 03 01 01 03 01 01 03     ................
     a42:	01 01 03 01 01 03 01 01 03 01 01 03 01 01 03 01     ................
     a52:	01 03 01 01 04 01 01 04 01 01 04 01 01 04 01 01     ................
     a62:	04 01 01 04 01 01 04 01 01 04 01 01 04 01 01 04     ................
     a72:	01 01 04 01 01 04 01 01 04 01 01 04 01 01 04 01     ................
     a82:	01 03 01 01 03 01 01 03 01 01 03 01 01 03 01 01     ................
     a92:	03 01 01 03 01 01 03 01 01 03 01 01 03 01 01 03     ................
     aa2:	01 01 03 01 01 03 01 01 03 01 01 03 01 01 03 01     ................
     ab2:	01 04 01 01 04 01 01 04 01 01 04 01 01 04 01 01     ................
     ac2:	04 01 01 04 01 01 04 01 01 04 01 01 04 01 01 04     ................
     ad2:	01 01 04 01 01 04 01 01 04 01 01 04 01 01 05 00     ................
     ae2:	00 ff                                               ..

00000ae4 <level_data>:
     ae4:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     af4:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 00     ................
	...
     b1c:	00 00 00 02 02 00 00 00 06 05 00 00 00 00 00 00     ................
	...
     b34:	00 00 42 42 42 42 42 42 00 02 02 00 00 06 02 02     ..BBBBBB........
     b44:	05 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     b54:	42 4d 4d 4d 4d 42 00 02 02 00 06 02 02 02 02 05     BMMMMB..........
	...
     b70:	00 00 42 4d 4d 4d 4d 42 00 02 02 00 04 02 02 02     ..BMMMMB........
     b80:	02 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     b90:	42 4d 4d 4d 4d 42 00 02 02 00 00 04 02 02 03 00     BMMMMB..........
	...
     bac:	00 00 42 4d 4d 4d 4d 42 00 02 02 00 00 00 04 03     ..BMMMMB........
	...
     bcc:	42 42 42 42 42 42 00 02 02 00 00 00 00 00 00 00     BBBBBB..........
     bdc:	00 00 00 00 00 00 02 02 00 00 00 00 00 00 00 00     ................
     bec:	00 00 00 00 00 02 02 00 00 00 00 00 00 00 00 00     ................
     bfc:	00 00 00 00 02 02 00 00 00 00 00 00 00 00 00 00     ................
     c0c:	00 00 00 02 02 00 00 00 00 00 00 00 01 01 01 01     ................
     c1c:	01 00 02 02 00 01 01 01 01 01 00 00 00 00 00 00     ................
     c2c:	00 02 02 00 00 00 00 00 00 00 01 01 01 01 01 00     ................
     c3c:	02 02 00 01 01 01 01 01 00 00 00 00 00 00 00 02     ................
     c4c:	02 00 00 58 00 00 00 00 01 01 01 01 01 00 02 02     ...X............
     c5c:	00 01 01 01 01 01 00 00 00 63 00 00 00 02 02 00     .........c......
     c6c:	00 00 00 00 00 00 01 01 01 01 01 00 02 02 00 01     ................
     c7c:	01 01 01 01 00 00 00 00 00 00 00 02 02 00 00 00     ................
     c8c:	00 00 00 00 01 01 01 01 01 00 02 02 00 01 01 01     ................
     c9c:	01 01 00 00 00 00 00 00 00 02 02 00 00 00 00 00     ................
	...
     cb4:	02 02 00 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
     cc4:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 02 02     ................
	...
     ce0:	00 02 02 00 42 42 42 42 42 42 00 00 00 00 00 00     ....BBBBBB......
	...
     cf8:	00 00 06 05 00 00 00 02 02 00 42 4d 4d 4d 4d 42     ..........BMMMMB
	...
     d14:	00 00 00 06 02 02 05 00 00 02 02 00 42 4d 4d 4d     ............BMMM
     d24:	4d 42 00 00 00 00 00 00 00 00 00 00 00 00 00 00     MB..............
     d34:	06 02 02 02 02 05 00 02 02 00 42 4d 2c 4d 4d 42     ..........BM,MMB
	...
     d50:	00 00 04 02 02 02 02 03 00 02 02 00 42 4d 4d 4d     ............BMMM
     d60:	4d 42 00 00 00 00 00 00 00 00 00 00 00 00 00 00     MB..............
     d70:	00 04 02 02 03 00 00 02 02 00 42 42 42 42 42 42     ..........BBBBBB
	...
     d90:	04 03 00 00 00 02 02 00 00 00 00 00 00 00 00 00     ................
	...
     db0:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     dc0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     dd0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     de0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     df0:	02 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     e0c:	00 02 02 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     e28:	00 00 00 02 02 01 01 01 01 01 01 01 01 00 00 01     ................
     e38:	01 01 01 01 01 01 01 00 00 01 01 01 01 01 01 01     ................
     e48:	01 02 02 01 01 01 01 01 01 01 01 00 00 01 01 01     ................
     e58:	01 01 01 01 01 00 00 01 01 01 01 01 01 01 01 02     ................
     e68:	02 01 01 01 01 01 01 01 01 00 00 01 01 42 42 42     .............BBB
     e78:	42 01 01 00 00 01 01 01 01 01 01 01 01 02 02 01     B...............
     e88:	00 00 00 00 01 01 01 00 00 01 01 42 4d 4d 42 01     ...........BMMB.
     e98:	01 00 00 01 01 01 00 00 00 00 01 02 02 01 00 00     ................
     ea8:	00 00 01 01 01 00 00 01 01 42 2c 4d 42 01 01 00     .........B,MB...
     eb8:	00 01 01 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
     ec8:	01 01 01 00 00 01 01 42 4d 4d 42 01 01 00 00 01     .......BMMB.....
     ed8:	01 01 00 00 00 00 01 02 02 01 00 00 00 00 01 01     ................
     ee8:	01 00 00 01 01 42 42 42 42 01 01 00 00 01 01 01     .....BBBB.......
     ef8:	00 00 00 00 01 02 02 01 00 00 00 00 00 00 01 00     ................
     f08:	00 01 01 01 01 01 01 01 01 00 00 01 00 00 00 00     ................
     f18:	00 00 01 02 02 01 00 58 00 00 09 00 01 00 00 01     .......X........
     f28:	01 01 01 01 01 01 01 00 00 01 00 09 00 00 00 00     ................
     f38:	01 02 02 01 00 00 00 00 00 00 01 00 00 00 00 00     ................
     f48:	00 00 00 00 00 00 00 01 00 00 00 63 00 00 01 02     ...........c....
     f58:	02 01 00 00 00 00 01 01 01 00 00 01 01 01 01 01     ................
     f68:	01 01 01 00 00 01 01 01 00 00 00 00 01 02 02 01     ................
     f78:	00 00 00 00 01 01 01 00 00 01 01 01 01 01 01 01     ................
     f88:	01 00 00 01 01 01 00 00 00 00 01 02 02 01 00 00     ................
     f98:	00 00 01 01 01 00 00 01 01 42 42 42 42 01 01 00     .........BBBB...
     fa8:	00 01 01 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
     fb8:	01 01 01 00 00 01 01 42 4d 4d 42 01 01 00 00 01     .......BMMB.....
     fc8:	01 01 00 00 00 00 01 02 02 01 01 01 01 01 01 01     ................
     fd8:	01 00 00 01 01 42 4d 4d 42 01 01 00 00 01 01 01     .....BMMB.......
     fe8:	01 01 01 01 01 02 02 01 01 01 01 01 01 01 01 00     ................
     ff8:	00 01 01 42 4d 4d 42 01 01 00 00 01 01 01 01 01     ...BMMB.........
    1008:	01 01 01 02 02 01 01 01 01 01 01 01 01 00 00 01     ................
    1018:	01 42 42 42 42 01 01 00 00 01 01 01 01 01 01 01     .BBBB...........
    1028:	01 02 02 01 01 01 01 01 01 01 01 00 00 01 01 01     ................
    1038:	01 01 01 01 01 00 00 01 01 01 01 01 01 01 01 02     ................
    1048:	02 01 01 01 01 01 01 01 01 00 00 01 01 01 01 01     ................
    1058:	01 01 01 00 00 01 01 01 01 01 01 01 01 02 02 01     ................
    1068:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1080:	01 01 01 02 02 01 01 01 00 00 00 00 00 00 00 00     ................
	...
    109c:	00 00 01 01 01 02 02 02 02 02 02 02 02 02 02 02     ................
    10ac:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    10bc:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    10cc:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    10dc:	02 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    10f8:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1118:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1134:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1154:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1170:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1190:	00 02 02 01 01 01 01 01 01 00 00 00 00 00 00 00     ................
	...
    11a8:	00 01 00 00 00 00 01 02 02 01 00 00 00 00 01 00     ................
	...
    11c4:	00 00 00 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
    11d4:	01 00 00 00 00 02 00 00 00 00 00 00 02 00 00 00     ................
    11e4:	00 01 00 07 00 00 01 02 02 01 00 58 00 00 01 00     ...........X....
    11f4:	00 00 00 02 00 00 00 00 00 00 02 00 00 00 00 01     ................
    1204:	00 00 00 00 01 02 02 01 00 00 00 00 01 00 00 00     ................
    1214:	00 02 00 00 00 00 00 00 02 00 00 00 00 01 00 00     ................
    1224:	00 00 01 02 02 01 00 00 00 00 01 00 00 00 00 02     ................
    1234:	02 02 02 02 02 02 02 00 00 00 00 01 00 00 00 00     ................
    1244:	01 02 02 01 00 00 00 00 01 00 00 00 00 02 00 00     ................
    1254:	00 00 00 00 02 00 00 00 00 01 00 00 00 00 01 02     ................
    1264:	02 01 00 00 00 00 01 00 00 00 00 02 00 00 00 00     ................
    1274:	00 00 02 00 00 00 00 01 00 00 00 00 01 02 02 01     ................
    1284:	00 00 00 00 01 00 00 00 00 02 00 00 00 00 00 00     ................
    1294:	02 00 00 00 00 01 00 63 00 00 01 02 02 01 00 00     .......c........
    12a4:	07 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    12b4:	00 00 00 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
    12c4:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    12d4:	00 01 00 00 00 00 01 02 02 01 00 00 00 00 01 00     ................
	...
    12f0:	00 00 00 01 01 01 01 01 01 02 02 00 00 00 00 00     ................
	...
    1314:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1334:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1350:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1370:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    138c:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    139c:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    13ac:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    13bc:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    13cc:	02 00 00 00 42 4d 4d 4d 42 00 00 00 00 00 00 00     ....BMMMB.......
    13dc:	00 00 00 00 00 42 4d 4d 4d 42 00 00 00 02 02 00     .....BMMMB......
    13ec:	08 00 42 4d 4d 4d 42 00 00 00 00 00 00 00 00 00     ..BMMMB.........
    13fc:	00 00 00 42 4d 4d 4d 42 00 08 00 02 02 00 00 00     ...BMMMB........
    140c:	42 4d 4d 4d 42 00 01 01 01 00 00 00 00 01 01 01     BMMMB...........
    141c:	00 42 4d 4d 4d 42 00 00 00 02 02 02 02 02 02 42     .BMMMB.........B
    142c:	42 42 02 00 01 01 01 00 02 02 00 01 01 01 00 02     BB..............
    143c:	42 42 42 02 02 02 02 02 02 00 00 00 00 00 00 00     BBB.............
    144c:	02 00 01 01 01 00 02 02 00 01 01 01 00 02 00 00     ................
    145c:	00 00 00 00 00 02 02 00 01 01 01 01 01 00 02 00     ................
    146c:	00 00 00 00 02 02 00 00 00 00 00 02 00 01 01 01     ................
    147c:	01 01 00 02 02 00 01 01 01 01 01 00 02 00 00 00     ................
    148c:	02 02 02 02 02 02 00 00 00 02 00 01 01 01 01 01     ................
    149c:	00 02 02 00 01 01 01 01 01 00 02 00 00 00 00 00     ................
    14ac:	00 00 00 00 00 00 00 02 00 01 01 01 01 01 00 02     ................
    14bc:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    14d8:	00 02 02 02 02 02 02 00 00 00 00 00 00 00 00 00     ................
	...
    14f0:	00 00 00 02 02 02 02 02 00 00 00 00 02 00 00 00     ................
    1500:	00 00 58 00 02 00 00 00 00 02 00 00 00 00 00 00     ..X.............
    1510:	00 02 00 00 00 00 00 00 00 00 02 00 00 00 02 00     ................
    1520:	00 00 02 00 00 00 00 02 63 00 00 02 00 00 00 02     ........c.......
	...
    1538:	02 00 00 00 02 00 00 00 02 02 02 02 02 02 00 00     ................
    1548:	00 02 00 00 00 02 00 00 00 00 02 02 02 02 02 00     ................
    1558:	00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    1568:	00 00 00 02 02 02 02 02 02 4d 4d 4d 42 00 00 00     .........MMMB...
    1578:	02 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00     ................
    1588:	00 42 4d 4d 4d 02 02 4d 4d 4d 42 00 00 00 02 00     .BMMM..MMMB.....
	...
    15a0:	00 00 00 02 00 00 00 42 4d 4d 4d 02 02 4d 2c 4d     .......BMMM..M,M
    15b0:	42 00 00 00 02 00 00 00 02 02 02 02 02 02 00 00     B...............
    15c0:	00 02 00 00 00 42 4d 4d 4d 02 02 4d 4d 4d 02 00     .....BMMM..MMM..
	...
    15d8:	02 02 00 00 00 00 00 00 00 00 00 02 4d 4d 4d 02     ............MMM.
    15e8:	02 4d 4d 4d 02 00 00 01 01 01 00 00 00 00 02 02     .MMM............
    15f8:	00 00 00 00 01 01 01 00 00 02 4d 4d 4d 02 02 42     ..........MMM..B
    1608:	42 42 02 00 00 01 01 01 00 00 00 00 02 02 00 00     BB..............
    1618:	00 00 01 01 01 00 00 02 42 42 42 02 02 00 00 00     ........BBB.....
    1628:	02 00 00 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
    1638:	01 01 01 00 00 02 00 00 00 02 02 00 08 00 02 00     ................
	...
    1650:	09 00 00 00 00 00 00 00 00 00 00 02 00 08 00 02     ................
    1660:	02 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1678:	00 02 00 00 00 02 02 02 02 02 02 02 02 02 02 02     ................
    1688:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1698:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    16a8:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    16b8:	02 02 02 02 02 03 00 00 00 00 00 00 00 00 00 00     ................
	...
    16d4:	04 02 02 02 02 02 03 00 00 00 00 00 00 00 00 00     ................
	...
    16f0:	00 00 00 04 02 02 02 03 00 00 00 00 00 00 00 00     ................
	...
    1710:	00 00 04 02 02 00 00 00 00 00 00 06 05 00 00 00     ................
    1720:	00 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1730:	00 02 02 00 00 00 00 00 06 02 02 05 00 00 00 00     ................
	...
    174c:	00 00 00 02 02 00 00 00 00 06 02 4d 4d 02 05 00     ...........MM...
	...
    176c:	00 02 02 00 00 00 00 04 02 4d 4d 02 03 00 00 00     .........MM.....
	...
    1788:	00 00 00 02 02 00 00 00 00 00 04 02 02 03 00 00     ................
	...
    17a8:	00 02 02 00 00 00 00 00 00 04 03 00 00 00 00 00     ................
    17b8:	06 05 00 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    17c8:	02 00 00 00 00 00 00 00 00 00 00 00 00 06 02 02     ................
    17d8:	05 00 00 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    17f0:	00 00 06 02 01 01 02 05 00 00 00 00 00 00 00 00     ................
    1800:	00 00 00 02 02 00 00 58 00 00 00 00 00 00 00 00     .......X........
    1810:	04 02 01 01 02 03 00 00 00 00 00 00 00 63 00 00     .............c..
    1820:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 04     ................
    1830:	02 02 03 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    1840:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 04 03     ................
	...
    185c:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    186c:	00 00 00 00 00 00 00 06 05 00 00 00 00 00 00 02     ................
    187c:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    188c:	00 00 00 00 06 02 02 05 00 00 00 00 00 02 02 00     ................
	...
    18ac:	00 06 02 4d 4d 02 05 00 00 00 00 02 02 00 00 00     ...MM...........
	...
    18c8:	00 00 00 04 02 4d 4d 02 03 00 00 00 00 02 02 00     .....MM.........
	...
    18e8:	00 00 04 02 02 03 00 00 00 00 00 02 02 00 00 00     ................
	...
    1900:	00 00 07 00 00 00 00 00 00 04 03 00 00 00 00 00     ................
    1910:	00 02 02 05 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    192c:	00 00 06 02 02 02 05 00 00 00 00 00 00 00 00 00     ................
	...
    1948:	00 00 00 06 02 02 02 02 02 05 00 00 00 00 00 00     ................
	...
    1968:	06 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1978:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1988:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1998:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    19a8:	02 00 00 00 00 00 00 00 00 00 00 04 02 02 02 02     ................
    19b8:	02 02 03 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    19d0:	00 00 04 02 02 02 02 03 00 00 00 00 00 00 00 00     ................
    19e0:	00 00 00 02 02 00 00 01 01 01 01 00 00 00 00 00     ................
    19f0:	00 04 02 02 03 00 00 00 00 00 00 01 01 01 01 00     ................
    1a00:	00 02 02 00 00 01 01 01 01 00 00 00 00 00 00 00     ................
    1a10:	04 03 00 00 00 00 00 00 00 01 01 01 01 00 00 02     ................
    1a20:	02 00 00 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
    1a30:	00 00 00 00 00 00 00 01 01 01 01 00 00 02 02 00     ................
    1a40:	00 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00     ................
    1a50:	00 00 00 00 00 01 01 01 01 00 00 02 02 00 00 00     ................
	...
    1a78:	00 02 02 00 00 00 00 00 00 00 00 00 00 02 00 00     ................
    1a88:	00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 02     ................
    1a98:	02 00 00 00 00 00 00 00 00 00 00 02 42 42 42 42     ............BBBB
    1aa8:	42 42 02 00 00 00 00 00 00 00 00 00 00 02 02 00     BB..............
	...
    1ac0:	00 02 4d 4d 4d 4d 4d 4d 02 00 00 00 00 00 00 00     ..MMMMMM........
    1ad0:	00 00 00 02 02 00 58 00 00 00 00 00 00 00 00 02     ......X.........
    1ae0:	4d 4d 4d 4d 4d 4d 02 00 00 00 00 00 00 00 63 00     MMMMMM........c.
    1af0:	00 02 02 00 00 00 00 00 00 00 00 00 00 02 4d 4d     ..............MM
    1b00:	2c 4d 4d 4d 02 00 00 00 00 00 00 00 00 00 00 02     ,MMM............
    1b10:	02 00 00 00 00 00 00 00 00 00 00 02 4d 4d 4d 4d     ............MMMM
    1b20:	4d 4d 02 00 00 00 00 00 00 00 00 00 00 02 02 00     MM..............
	...
    1b38:	00 02 42 42 42 42 42 42 02 00 00 00 00 00 00 00     ..BBBBBB........
    1b48:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 02     ................
    1b58:	00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00     ................
    1b68:	00 02 02 00 00 00 00 00 00 00 00 00 00 02 00 07     ................
    1b78:	00 00 09 00 02 00 00 00 00 00 00 00 00 00 00 02     ................
    1b88:	02 00 00 00 00 00 00 00 00 00 00 02 05 00 00 00     ................
    1b98:	00 06 02 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
    1ba8:	00 00 00 01 01 01 01 01 00 02 02 05 00 00 06 02     ................
    1bb8:	02 00 01 01 01 01 01 00 00 00 00 02 02 00 00 00     ................
    1bc8:	00 01 01 01 01 01 00 02 02 02 02 02 02 02 02 00     ................
    1bd8:	01 01 01 01 01 00 00 00 00 02 02 00 00 00 00 01     ................
    1be8:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1bf8:	00 01 01 00 00 00 00 02 02 00 00 00 00 01 01 00     ................
    1c08:	08 00 00 00 00 00 00 00 00 00 00 00 00 08 00 01     ................
    1c18:	01 00 00 00 00 02 02 00 00 00 00 01 01 00 00 00     ................
	...
    1c34:	00 01 01 00 00 00 00 02 02 00 00 00 00 00 00 00     ................
	...
    1c58:	00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1c68:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1c78:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1c88:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1c98:	03 00 00 00 00 00 00 00 00 04 02 02 02 02 02 02     ................
    1ca8:	03 00 00 00 00 00 00 00 00 04 02 02 02 03 00 00     ................
	...
    1cc0:	04 02 02 02 02 03 00 00 00 00 00 00 00 00 00 00     ................
    1cd0:	04 02 02 00 00 00 01 01 01 01 01 00 00 00 00 04     ................
    1ce0:	02 02 03 00 00 00 00 01 01 01 01 01 00 00 00 02     ................
    1cf0:	02 00 00 00 01 00 00 00 01 00 00 00 00 00 04 03     ................
    1d00:	00 00 00 00 00 01 00 00 00 01 00 00 00 02 02 00     ................
    1d10:	00 00 01 00 09 00 01 00 00 00 00 00 00 00 00 00     ................
    1d20:	00 00 00 01 00 07 00 01 00 00 00 02 02 00 00 00     ................
    1d30:	01 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00     ................
    1d40:	00 01 00 00 00 01 00 00 00 02 02 00 00 00 01 01     ................
    1d50:	01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
    1d60:	01 01 01 01 00 00 00 02 02 00 00 00 00 00 00 00     ................
	...
    1d84:	00 02 02 05 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1da0:	00 00 06 02 02 02 05 00 00 00 00 00 00 00 00 00     ................
    1db0:	01 01 01 01 01 01 01 00 00 00 00 00 00 00 00 06     ................
    1dc0:	02 02 02 02 02 05 00 58 00 00 00 00 00 00 01 00     .......X........
    1dd0:	00 00 00 00 01 00 00 00 00 63 00 00 06 02 02 02     .........c......
    1de0:	02 02 02 03 00 00 00 00 00 00 00 00 01 00 00 08     ................
    1df0:	00 00 01 00 00 00 00 00 00 00 04 02 02 02 02 02     ................
    1e00:	03 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00     ................
    1e10:	01 00 00 00 00 00 00 00 00 04 02 02 02 03 00 00     ................
	...
    1e28:	01 01 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
    1e38:	04 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1e54:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1e74:	00 02 02 00 00 00 01 01 01 01 01 00 00 00 00 00     ................
    1e84:	00 00 00 00 00 00 00 01 01 01 01 01 00 00 00 02     ................
    1e94:	02 00 00 00 01 00 00 00 01 00 00 00 00 00 00 00     ................
    1ea4:	00 00 00 00 00 01 00 00 00 01 00 00 00 02 02 00     ................
    1eb4:	00 00 01 00 07 00 01 00 00 00 00 00 00 00 00 00     ................
    1ec4:	00 00 00 01 00 09 00 01 00 00 00 02 02 00 00 00     ................
    1ed4:	01 00 00 00 01 00 00 00 00 00 06 05 00 00 00 00     ................
    1ee4:	00 01 00 00 00 01 00 00 00 02 02 00 00 00 01 01     ................
    1ef4:	01 01 01 00 00 00 00 06 02 02 05 00 00 00 00 01     ................
    1f04:	01 01 01 01 00 00 00 02 02 05 00 00 00 00 00 00     ................
    1f14:	00 00 00 00 06 02 02 02 02 05 00 00 00 00 00 00     ................
    1f24:	00 00 00 00 06 02 02 02 05 00 00 00 00 00 00 00     ................
    1f34:	00 06 02 02 02 02 02 02 05 00 00 00 00 00 00 00     ................
    1f44:	00 06 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1f54:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1f64:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1f74:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1f84:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1fa0:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1fbc:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1fdc:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1ff8:	00 00 00 02 02 00 00 00 00 00 00 00 02 02 02 02     ................
    2008:	02 02 02 02 02 02 02 02 02 02 00 00 00 00 00 00     ................
    2018:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2034:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    204c:	01 01 01 01 01 01 01 01 01 02 02 00 00 07 00 00     ................
    205c:	09 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01     ................
    206c:	01 01 01 01 01 01 01 02 02 00 00 00 00 00 00 00     ................
    207c:	00 00 00 00 00 42 42 42 42 00 00 00 01 01 01 01     .....BBBB.......
    208c:	01 01 01 01 01 02 02 00 00 00 00 00 00 00 00 00     ................
    209c:	00 00 00 42 4d 4d 42 00 00 00 01 01 01 00 00 00     ...BMMB.........
    20ac:	00 01 01 02 02 00 00 00 58 00 00 00 00 00 00 00     ........X.......
    20bc:	00 42 4d 4d 42 00 00 00 01 01 01 00 63 00 00 01     .BMMB.......c...
    20cc:	01 02 02 00 00 00 00 00 00 00 00 00 00 00 00 42     ...............B
    20dc:	4d 4d 42 00 00 00 01 01 01 00 00 00 00 01 01 02     MMB.............
    20ec:	02 00 00 00 00 00 00 00 00 00 00 00 00 42 2c 4d     .............B,M
    20fc:	42 00 00 00 01 01 01 00 00 00 00 01 01 02 02 00     B...............
	...
    2114:	00 00 00 42 4d 4d 42 00 00 00 01 01 01 01 01 01     ...BMMB.........
    2124:	01 01 01 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
    2134:	00 42 42 42 42 00 00 00 01 01 01 01 01 01 01 01     .BBBB...........
    2144:	01 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2154:	00 00 00 00 00 00 01 01 01 01 01 01 01 01 01 02     ................
    2164:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2180:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    219c:	00 00 00 02 02 00 00 00 00 00 00 00 02 02 02 02     ................
    21ac:	02 02 02 02 02 02 02 02 02 02 00 00 00 00 00 00     ................
    21bc:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    21d8:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    21f8:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2214:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2234:	00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2244:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2254:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2264:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 00     ................
	...
    228c:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    22ac:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    22c8:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    22e8:	00 02 02 00 00 00 00 00 00 00 02 02 02 02 02 02     ................
    22f8:	02 02 02 02 02 02 02 02 00 00 00 00 00 00 00 02     ................
    2308:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2324:	00 02 02 01 01 01 01 01 01 01 01 01 00 00 00 00     ................
	...
    2340:	00 00 00 02 02 01 01 01 01 01 01 01 01 01 00 00     ................
	...
    2358:	00 00 00 07 00 00 09 00 00 02 02 01 01 01 01 01     ................
    2368:	01 01 01 01 00 00 00 42 42 42 42 00 00 00 00 00     .......BBBB.....
    2378:	00 00 00 00 00 00 00 02 02 01 01 00 00 00 00 01     ................
    2388:	01 01 00 00 00 42 4d 4d 42 00 00 00 00 00 00 00     .....BMMB.......
    2398:	00 00 00 00 00 02 02 01 01 00 58 00 00 01 01 01     ..........X.....
    23a8:	00 00 00 42 4d 4d 42 00 00 00 00 00 00 00 63 00     ...BMMB.......c.
    23b8:	00 00 00 02 02 01 01 00 00 00 00 01 01 01 00 00     ................
    23c8:	00 42 4d 2c 42 00 00 00 00 00 00 00 00 00 00 00     .BM,B...........
    23d8:	00 02 02 01 01 00 00 00 00 01 01 01 00 00 00 42     ...............B
    23e8:	4d 4d 42 00 00 00 00 00 00 00 00 00 00 00 00 02     MMB.............
    23f8:	02 01 01 01 01 01 01 01 01 01 00 00 00 42 4d 4d     .............BMM
    2408:	42 00 00 00 00 00 00 00 00 00 00 00 00 02 02 01     B...............
    2418:	01 01 01 01 01 01 01 01 00 00 00 42 42 42 42 00     ...........BBBB.
	...
    2430:	00 00 00 02 02 01 01 01 01 01 01 01 01 01 00 00     ................
	...
    2450:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    246c:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    248c:	00 02 02 00 00 00 00 00 00 00 02 02 02 02 02 02     ................
    249c:	02 02 02 02 02 02 02 02 00 00 00 00 00 00 00 02     ................
    24ac:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    24c8:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    24e4:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2504:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2520:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2530:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2540:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2550:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2560:	02 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00     ................
    2570:	00 00 01 01 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    2588:	01 01 00 00 00 00 00 00 01 01 00 00 00 00 00 00     ................
    2598:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 01 01     ................
    25a8:	00 00 00 00 00 00 01 01 00 00 00 00 00 00 00 00     ................
    25b8:	00 02 02 00 58 00 00 00 00 00 00 00 01 01 00 00     ....X...........
    25c8:	00 00 00 00 01 01 00 00 00 00 00 00 00 00 00 02     ................
    25d8:	02 00 00 00 00 00 00 00 00 00 01 01 00 07 00 00     ................
    25e8:	09 00 01 01 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    2600:	01 01 00 00 00 00 00 00 01 01 00 00 00 00 00 00     ................
    2610:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 01 01     ................
    2620:	01 01 01 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
    2630:	00 02 02 00 00 00 00 00 00 00 00 00 01 01 01 01     ................
    2640:	01 01 01 01 01 01 00 00 00 00 00 00 00 00 00 02     ................
    2650:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    266c:	00 02 02 37 37 37 37 37 37 37 37 37 37 37 37 37     ...7777777777777
    267c:	37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 02     777777777777777.
    268c:	02 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     .MMMMMMMMMMMMMMM
    269c:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d     MMMMMMMMMMMMM..M
    26ac:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 2c 4d 4d 4d 4d     MMMMMMMMMMM,MMMM
    26bc:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d     MMMMMMMMMMM..MMM
    26cc:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    26dc:	4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 37 37 37 37 37     MMMMMMMMM..77777
    26ec:	37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37     7777777777777777
    26fc:	37 37 37 37 37 37 37 02 02 00 00 00 00 00 00 00     7777777.........
	...
    2720:	00 02 02 00 00 00 00 00 00 00 00 00 01 01 01 01     ................
    2730:	01 01 01 01 01 01 00 00 00 00 00 00 00 00 00 02     ................
    2740:	02 00 00 00 00 00 00 00 00 00 01 01 01 01 01 01     ................
    2750:	01 01 01 01 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    2768:	01 01 00 00 00 00 00 00 01 01 00 00 00 00 00 00     ................
    2778:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 01 01     ................
    2788:	00 09 00 00 07 00 01 01 00 00 00 00 00 00 00 00     ................
    2798:	00 02 02 00 00 00 00 00 00 00 00 00 01 01 00 00     ................
    27a8:	00 00 00 00 01 01 00 00 00 00 00 00 63 00 00 02     ............c...
    27b8:	02 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00     ................
    27c8:	00 00 01 01 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    27e0:	01 01 00 00 00 00 00 00 01 01 00 00 00 00 00 00     ................
    27f0:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 01 01     ................
    2800:	00 00 00 00 00 00 01 01 00 00 00 00 00 00 00 00     ................
    2810:	00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2820:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2830:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2840:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 4d     ...............M
    2850:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    2860:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d     MMMMMMMMMMM..MMM
    2870:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    2880:	4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d 4d 4d     MMMMMMMMM..MMMMM
    2890:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    28a0:	4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d 4d 4d 4d 4d     MMMMMMM..MMMMMMM
    28b0:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    28c0:	4d 4d 4d 4d 4d 02 02 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMM..MMMMMMMMM
    28d0:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    28e0:	4d 4d 4d 02 02 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMM..MMMMMMMMMMM
    28f0:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    2900:	4d 02 02 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     M..MMMMMMMMMMMMM
    2910:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02     MMMMMMMMMMMMMMM.
    2920:	02 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     .MMMMMMMMMMMMMMM
    2930:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d     MMMMMMMMMMMMM..M
    2940:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    2950:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d     MMMMMMMMMMM..MMM
    2960:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    2970:	4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d 4d 4d     MMMMMMMMM..MMMMM
    2980:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    2990:	4d 4d 4d 4d 4d 4d 4d 02 02 37 37 37 37 37 37 37     MMMMMMM..7777777
    29a0:	37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37     7777777777777777
    29b0:	37 37 37 37 37 02 02 00 00 00 00 00 00 00 00 00     77777...........
	...
    29d0:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    29f0:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2a0c:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2a2c:	00 02 02 00 00 00 58 00 00 00 00 00 00 00 00 00     ......X.........
	...
    2a44:	00 00 00 63 00 00 00 02 02 00 00 00 00 00 00 00     ...c............
	...
    2a68:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2a84:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2aa4:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2ac0:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
    2ad0:	00 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2ae0:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2afc:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2b0c:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2b1c:	02 02                                               ..

00002b1e <sprites_data>:
    2b1e:	fe fe fe fe fe fe fe 87 fe fe fe fe fe fe 87 87     ................
    2b2e:	fe fe fe fe fe fe 87 87 fe fe fe fe 85 85 85 87     ................
    2b3e:	fe fe fe 85 87 87 87 85 fe fe 85 87 87 87 87 85     ................
    2b4e:	fe 85 87 87 87 85 85 87 85 87 87 85 85 87 87 87     ................
    2b5e:	87 87 87 fe fe fe fe fe d2 d2 eb d2 fe fe fe fe     ................
    2b6e:	87 d2 fd eb fe fe fe fe 87 87 eb d2 fe fe fe fe     ................
    2b7e:	85 87 87 d2 fe fe fe fe 87 85 85 87 ef fe fe fe     ................
    2b8e:	87 ef 87 87 87 ef fe fe ef ff ef 87 87 ef fe fe     ................
    2b9e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 87     ................
    2bae:	fe fe fe fe fe fe 87 87 fe fe fe fe fe fe 87 87     ................
    2bbe:	fe fe fe fe 85 85 85 87 fe fe fe 85 87 87 87 85     ................
    2bce:	fe fe 85 87 87 87 87 85 fe 85 87 87 87 85 85 87     ................
    2bde:	fe fe fe fe fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    2bee:	d2 d2 eb d2 fe fe fe fe 87 d2 fd eb fe fe fe fe     ................
    2bfe:	87 87 eb d2 fe fe fe fe 85 87 87 d2 fe fe fe fe     ................
    2c0e:	87 85 85 87 ef fe fe fe 87 ef 87 87 87 ef fe fe     ................
    2c1e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2c2e:	fe fe fe fe fe fe fe fe fe ba ba ba ba ba ba fe     ................
    2c3e:	ba bd bd bd bd bd bd ba fe ba ba ba ba ba ba fe     ................
    2c4e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2c5e:	fe fe 46 46 46 46 46 46 fe a5 a5 a5 47 47 46 fe     ..FFFFFF....GGF.
    2c6e:	fe 46 46 47 47 46 3f 3f 46 46 47 47 46 fe fe fe     .FFGGF??FFGGF...
    2c7e:	46 46 47 47 46 fe fe fe fe 46 46 47 47 3f 3f fe     FFGGF....FFGG??.
    2c8e:	fe a5 a5 a5 47 fe fe fe fe fe 46 46 46 46 fe fe     ....G.....FFFF..
    2c9e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2cae:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2cbe:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2cce:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2cde:	85 87 87 85 fe 85 87 87 fe 85 87 85 fe 85 87 87     ................
    2cee:	fe 85 87 87 ad ad ad ad fe fe 85 87 ad ad ad ad     ................
    2cfe:	fe fe 85 87 ad ad ad ad fe fe fe 85 a4 ad 87 87     ................
    2d0e:	fe fe fe fe a4 a4 85 87 fe fe fe fe a4 a4 85 87     ................
    2d1e:	87 ef 87 85 87 ef fe fe 87 87 87 85 87 87 ef fe     ................
    2d2e:	ad ad ad ad ad 87 ef fe ad ad ad ad ad ad a4 ad     ................
    2d3e:	ad ad ad ad ad a4 a4 a4 87 87 87 ef fe fe fe fe     ................
    2d4e:	87 87 87 ef fe fe fe fe 87 87 87 ef fe fe fe fe     ................
    2d5e:	87 ef 87 85 87 ef fe fe 87 87 87 85 87 87 ef fe     ................
    2d6e:	ad ad ad ad ad 87 ef fe ad ad ad ad ad ad a4 ad     ................
    2d7e:	ad ad ad ad ad a4 a4 a4 87 87 87 ef fe fe fe fe     ................
    2d8e:	87 87 87 ef fe fe fe fe 87 87 ef fe fe fe fe fe     ................
    2d9e:	85 87 87 85 85 87 87 87 85 87 87 85 fe 85 87 87     ................
    2dae:	fe 85 87 85 fe 85 87 87 fe 85 87 87 ad ad ad ad     ................
    2dbe:	fe fe 85 87 ad ad ad ad fe fe 85 87 ad ad ad ad     ................
    2dce:	fe fe fe 85 a4 ad 87 87 fe fe fe fe a4 a4 85 87     ................
    2dde:	ef ff ef 87 87 ef fe fe 87 ef 87 85 87 ef fe fe     ................
    2dee:	87 87 87 85 87 87 ef fe ad ad ad ad ad 87 ef fe     ................
    2dfe:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    2e0e:	87 87 87 ef fe fe fe fe 87 87 ef fe fe fe fe fe     ................
    2e1e:	ef ff ef 87 87 ef fe fe 87 ef 87 85 87 ef fe fe     ................
    2e2e:	87 87 87 85 87 87 ef fe ad ad ad ad ad 87 ef fe     ................
    2e3e:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    2e4e:	87 87 87 ef fe fe fe fe 87 87 87 87 ef fe fe fe     ................
    2e5e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2e6e:	fe fe fe 27 07 fe fe fe fe fe 27 77 27 07 fe fe     ...'......'w'...
    2e7e:	fe fe 07 27 07 07 fe fe fe fe fe 07 07 fe fe fe     ...'............
    2e8e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2e9e:	fe fe fe fe fe fe 85 87 fe fe fe fe fe fe 85 87     ................
    2eae:	fe fe fe fe fe 85 87 ef fe fe fe fe fe 85 87 ef     ................
    2ebe:	fe fe fe fe 85 87 ef fe fe fe fe fe 85 87 ef fe     ................
    2ece:	fe fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4     ................
    2ede:	ef fe 87 ef fe fe fe fe ef fe 87 87 ef fe fe fe     ................
    2eee:	fe fe 85 87 ef fe fe fe fe fe 85 87 ef fe fe fe     ................
    2efe:	fe fe 85 87 ef fe fe fe fe fe 85 87 ef fe fe fe     ................
    2f0e:	fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe     ................
    2f1e:	fe fe fe fe fe fe fe 85 fe fe fe fe fe fe fe 85     ................
    2f2e:	fe fe fe fe fe 85 85 87 fe fe fe fe 85 87 87 87     ................
    2f3e:	fe fe fe a4 87 87 87 ef fe fe fe a4 ef ef ef fe     ................
    2f4e:	fe fe fe a4 a4 fe fe fe fe fe fe a4 a4 a4 fe fe     ................
    2f5e:	87 87 85 fe fe fe fe fe 87 87 87 85 fe fe fe fe     ................
    2f6e:	87 87 87 ef fe fe fe fe 87 ef ef fe fe fe fe fe     ................
    2f7e:	ef 87 ef fe fe fe fe fe 85 87 ef fe fe fe fe fe     ................
    2f8e:	a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe fe fe     ................
    2f9e:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 87 87 ef     ................
    2fae:	fe fe fe fe 85 87 87 ef a4 a4 85 85 85 87 ef fe     ................
    2fbe:	a4 a4 87 87 87 87 ef fe a4 a4 ef ef ef ef fe fe     ................
    2fce:	a4 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2fde:	87 87 ef fe fe fe fe fe fe 85 87 ef fe fe fe fe     ................
    2fee:	fe 85 87 87 ef fe fe fe fe fe 85 87 ef fe fe fe     ................
    2ffe:	fe fe 85 87 87 ef fe fe fe fe fe 85 87 ef fe fe     ................
    300e:	fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe     ................
    301e:	87 87 ef fe fe fe fe fe 85 87 ef 85 fe fe fe fe     ................
    302e:	85 87 ef ef fe fe fe fe 85 87 ef fe fe fe fe fe     ................
    303e:	85 87 ef fe fe fe fe fe 85 87 ef fe fe fe fe fe     ................
    304e:	a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe fe fe     ................
    305e:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 87 87 ef     ................
    306e:	fe fe fe fe 85 87 87 ef a4 a4 85 85 85 87 a4 a4     ................
    307e:	a4 a4 87 87 87 87 a4 a4 a4 a4 ef ef ef ef a4 a4     ................
    308e:	a4 fe fe fe fe fe a4 fe fe fe fe fe fe fe fe fe     ................
    309e:	87 87 85 87 ef fe fe fe fe fe 85 87 87 ef fe fe     ................
    30ae:	fe fe 85 87 87 ef fe fe 85 85 85 87 ef fe fe fe     ................
    30be:	87 87 87 87 ef fe fe fe ef ef ef ef fe fe fe fe     ................
    30ce:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    30de:	fe fe fe fe fe fe fe fe fe fe 12 12 12 12 fe fe     ................
    30ee:	ad 12 0f 1f 1f 0f 12 ad ad 12 12 12 12 12 12 ad     ................
    30fe:	ad ad 12 12 12 12 ad ad ad 12 ad 12 12 ad 12 ad     ................
    310e:	ad fe 12 12 12 12 fe ad ad fe fe fe fe fe fe ad     ................
    311e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 7f     ................
    312e:	fe fe fe fe fe 7f 7f 7f fe fe fe fe 7f 7f 7f 7f     ................
    313e:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe fe fe     ................
    314e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    315e:	a4 fe fe fe fe fe fe fe a4 ad fe fe ff ff a4 ad     ................
    316e:	a4 ad f6 ff ff a4 ad f6 a4 ad f6 ff a4 ad f6 ff     ................
    317e:	a4 ad fe fe a4 ad f6 ff a4 fe fe a4 a4 ad f6 fe     ................
    318e:	fe fe fe a4 a4 ad f6 f6 fe fe fe fe fe fe fe fe     ................
    319e:	fe fe fe fe fe fe fe fe f6 ff ff ff d2 fe fe fe     ................
    31ae:	ff ff ff ff d2 eb fe fe ff fe ff ff eb fd d2 fe     ................
    31be:	fe fe fe ff d2 eb d2 d2 fe fe fe fe fe fe fe fe     ................
    31ce:	f6 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    31de:	fe fe bf 7f 7f bf fe fe fe 7f 7f 7f 7f 7f 7f fe     ................
    31ee:	bf 7f 7f 7f 7f 7f 7f bf 7f 7f 7f 7f 7f 7f 7f 7f     ................
    31fe:	7f 7f 7f 7f 7f 7f 7f 7f bf 7f 7f 7f 7f 7f 7f bf     ................
    320e:	fe 7f 7f 7f 7f 7f 7f fe fe fe bf 7f 7f bf fe fe     ................
    321e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    322e:	fe fe fe 7f 7f fe fe fe fe fe 7f 7f 7f 7f fe fe     ................
    323e:	fe fe 7f 7f 7f 7f fe fe fe fe fe 7f 7f fe fe fe     ................
    324e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    325e:	fe fe bf 7f 7f bf fe fe fe 7f 7f 7f 7f 7f 7f fe     ................
    326e:	bf 7f fe fe 7f 7f 7f bf 7f fe fe fe fe 7f 7f 7f     ................
    327e:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe 7f bf     ................
    328e:	fe fe fe fe fe fe 7f fe fe fe fe fe fe bf fe fe     ................
    329e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    32ae:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    32be:	fe fe fe bf e3 fe fe fe fe fe fe fe fe fe fe fe     ................
    32ce:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    32de:	fe fe fe fe fe fe fe fe fe fe fe fe ff fe fe fe     ................
    32ee:	fe fe fe fe 7f ff fe fe fe fe fe fe 7f 7f ff fe     ................
    32fe:	fe fe fe fe 7f 7f 7f ff fe fe fe fe 7f 7f 7f fe     ................
    330e:	fe fe fe fe 7f 7f fe fe fe fe fe fe 7f fe fe fe     ................
    331e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    332e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    333e:	7f 7f 7f 7f 7f 7f ff fe fe 7f 7f 7f 7f ff fe fe     ................
    334e:	fe fe 7f 7f ff fe fe fe fe fe fe fe fe fe fe fe     ................
    335e:	fe fe fe ff fe fe fe fe fe fe ff 7f 7f fe fe fe     ................
    336e:	fe ff 7f 7f 7f 7f fe fe ff 7f 7f 7f 7f 7f 7f fe     ................
    337e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    338e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    339e:	fe fe 12 12 12 12 fe fe fe 12 0f 1f 1f 0f 12 fe     ................
    33ae:	ad 12 12 12 12 12 12 ad ad 12 ad 12 12 ad 12 ad     ................
    33be:	ad ad 12 12 12 12 ad ad ad fe 12 12 12 12 fe ad     ................
    33ce:	ad fe fe fe fe fe fe ad ad fe fe fe fe fe fe ad     ................
    33de:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 7f     ................
    33ee:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe fe 7f     ................
    33fe:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    340e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    341e:	a4 fe fe fe fe fe fe fe a4 a4 fe fe fe fe fe fe     ................
    342e:	a4 a4 ad fe fe fe fe fe a4 a4 ad ad fe fe fe fe     ................
    343e:	a4 a4 ad ad f6 fe fe fe a4 a4 ad ad f6 f6 ff ff     ................
    344e:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    345e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    346e:	fe fe ff ff ff ff a4 a4 fe ff ff ff ff a4 a4 a4     ................
    347e:	ff ff ff ff ff a4 a4 a4 ff ff ff ff a4 a4 a4 ad     ................
    348e:	ff ff ff ff a4 a4 ad ad ff ff ff a4 a4 ad ad f6     ................
    349e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    34ae:	a4 ad ad f6 f6 ff ff ff a4 ad ad f6 f6 ff ff ff     ................
    34be:	ad ad f6 f6 ff ff ff ff ad f6 f6 ff ff ff ff ff     ................
    34ce:	f6 f6 ff ff ff ff ff ff f6 ff ff fe fe ff ff ff     ................
    34de:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    34ee:	d2 fe fe fe fe fe fe fe d2 d2 fe fe fe fe fe fe     ................
    34fe:	d2 d2 d2 fe fe fe fe fe d2 d3 eb d3 fe fe fe fe     ................
    350e:	d2 eb fd eb d2 fe fe fe d2 d3 eb d3 d2 d2 fe fe     ................
    351e:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    352e:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 fe fe fe     ................
    353e:	a4 a4 ad ad fe fe fe fe a4 a4 ad fe fe fe fe fe     ................
    354e:	a4 a4 fe fe fe fe fe fe a4 fe fe fe fe fe fe fe     ................
    355e:	ff ff fe a4 ad ad f6 f6 ff fe a4 a4 ad ad f6 f6     ................
    356e:	fe fe a4 a4 ad ad f6 f6 fe a4 a4 a4 ad ad f6 f6     ................
    357e:	fe a4 a4 a4 a4 ad ad f6 a4 a4 a4 a4 a4 a4 ad ad     ................
    358e:	a4 a4 a4 a4 a4 a4 a4 ad a4 a4 a4 a4 a4 a4 a4 a4     ................
    359e:	ff ff fe fe fe fe ff ff ff fe fe fe fe fe fe ff     ................
    35ae:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    35be:	f6 fe fe fe fe fe fe fe f6 f6 fe fe fe fe fe fe     ................
    35ce:	ad f6 f6 fe fe fe fe fe ad ad f6 f6 fe fe fe fe     ................
    35de:	d2 d2 d2 d2 d2 d2 d2 fe ff ff ff ff ff ff ff ff     ................
    35ee:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    35fe:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    360e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................

0000361e <map_enemy_spider_1>:
    361e:	01 01 22                                            .."

00003621 <map_enemy_spider_0>:
    3621:	01 01 17                                            ...

00003624 <map_enemy_shark>:
    3624:	01 01 05                                            ...

00003627 <map_enemy_shot>:
    3627:	01 01 0d                                            ...

0000362a <map_hero_shot>:
    362a:	01 01 04                                            ...

0000362d <map_hero_ship_large>:
    362d:	04 02 24 25 26 27 28 29 2a 2b                       ..$%&'()*+

00003637 <map_hero_ship_1>:
    3637:	03 01 23 19 1a                                      ..#..

0000363c <map_hero_ship_0>:
    363c:	03 01 18 19 1a                                      .....

00003641 <map_hero_jump>:
    3641:	02 03 02 03 0a 0c 15 16                             ........

00003649 <map_hero_step_2>:
    3649:	02 03 00 01 07 09 10 14                             ........

00003651 <map_hero_step_1>:
    3651:	02 03 02 03 0a 0b 12 13                             ........

00003659 <map_hero_step_0>:
    3659:	02 03 00 01 07 09 10 11                             ........

00003661 <map_hero_idle>:
    3661:	02 03 00 01 07 08 0e 0f                             ........

00003669 <map_explosion_2>:
    3669:	01 01 1d                                            ...

0000366c <map_explosion_1>:
    366c:	01 01 1c                                            ...

0000366f <map_explosion_0>:
    366f:	01 01 1b                                            ...

00003672 <map_meteor>:
    3672:	01 01 1e                                            ...

00003675 <map_up_arrow>:
    3675:	01 01 21                                            ..!

00003678 <map_down_arrow>:
    3678:	01 01 20                                            .. 

0000367b <map_right_arrow>:
    367b:	01 01 1f                                            ...

0000367e <map_none>:
    367e:	01 01 06                                            ...

00003681 <tiles_data>:
    3681:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    3691:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    36a1:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    36b1:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    36c1:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    36d1:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    36e1:	ff f8 fb f8 fb f8 f8 fd ff fb f8 f8 fb f8 f8 f8     ................
    36f1:	ff f8 f8 fb f8 f8 f8 f8 ff f8 f8 f8 f8 f8 f8 f8     ................
    3701:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3711:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    3721:	fd f8 fb f8 fb f8 f8 fd f8 fb f8 f8 fb f8 f8 f8     ................
    3731:	f8 f8 f8 fb f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    3741:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3751:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    3761:	fd f8 fb f8 fb f8 f8 ff f8 fb f8 f8 fb f8 f8 ff     ................
    3771:	f8 f8 f8 fb f8 f8 f8 ff f8 f8 f8 f8 f8 f8 f8 ff     ................
    3781:	fa f8 f8 f8 f8 f8 f8 f8 f8 f8 fb f8 f8 f8 fb f8     ................
    3791:	f8 f8 fb f8 fb fb f8 f8 f8 f8 f8 fb f8 f8 f8 f8     ................
    37a1:	f8 f8 fb f8 fb f8 f8 f8 f8 fb f8 f8 fb f8 f8 f8     ................
    37b1:	f8 f8 f8 fb f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    37c1:	ac ac ac ac ac ac ac ac ac ac ac ac ac ac ac ac     ................
    37d1:	ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad     ................
    37e1:	ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae     ................
    37f1:	af af af af af af af af af af af af af af af af     ................
    3801:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    3811:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    3821:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    3831:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    3841:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    3851:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    3861:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    3871:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    3881:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    3891:	ab ab ab ab ab ab ab ab ab ad ad ad ad ad ad ab     ................
    38a1:	ae ae ae ae ae ae ae ae ab ae ae ae ae ae ae ab     ................
    38b1:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    38c1:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab a0     ................
    38d1:	ab ab ab ab ab a0 a0 a0 ab ab ab ab a0 a0 a0 a0     ................
    38e1:	ab ab ab a0 a0 a0 a0 a0 ab ab a0 a0 a0 a0 a0 a0     ................
    38f1:	ab ab a0 a0 a0 a0 a0 a0 ab a0 a0 a0 a0 a0 a0 a0     ................
    3901:	ab a4 ff ff ff ff ff ab a0 a0 a4 ff ff ff ff ff     ................
    3911:	a0 a0 a0 a4 ff ff ff ff a0 a0 a0 a0 a4 ff ff ff     ................
    3921:	a0 a0 a0 a0 a0 a4 ff ff a0 a0 a0 a0 a0 a0 a4 ff     ................
    3931:	a0 a0 a0 a0 a0 a0 a4 ff a0 a0 a0 a0 a0 a0 a0 a4     ................
    3941:	ab ab ab ab ab ab ab ab ff ab ab ab ab ab ab ab     ................
    3951:	ff ff ff ab ab ab ab ab ff ff ff ff ab ab ab ab     ................
    3961:	ff ff ff ff ff ab ab ab ff ff ff ff ff ff ab ab     ................
    3971:	ff ff ff ff ff ff ab ab ff ff ff ff ff ff ff ab     ................
    3981:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    3991:	40 40 40 40 40 40 40 40 40 40 40 e3 40 40 40 40     @@@@@@@@@@@.@@@@
    39a1:	40 40 e3 ff e3 40 40 40 40 40 40 e3 40 40 40 40     @@...@@@@@@.@@@@
    39b1:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    39c1:	ab a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    39d1:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    39e1:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    39f1:	a0 a0 a0 a0 a0 a0 a0 a0 ab a0 a0 a0 a0 a0 a0 a0     ................
    3a01:	a0 a0 a0 a0 a0 a0 a0 a4 a0 a0 a0 a0 a0 a0 a0 a0     ................
    3a11:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    3a21:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    3a31:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a4     ................
    3a41:	ff ff ff ff ff ff ff ab a4 ff ff ff ff ff ff ff     ................
    3a51:	a4 ff ff ff ff ff ff ff a4 ff ff ff ff ff ff ff     ................
    3a61:	a4 ff ff ff ff ff ff ff a4 ff ff ff ff ff ff ff     ................
    3a71:	a4 ff ff ff ff ff ff ff ff ff ff ff ff ff ff ab     ................
    3a81:	ab a0 a0 a0 a0 a0 a0 a0 ab ab a0 a0 a0 a0 a0 a0     ................
    3a91:	ab ab a0 a0 a0 a0 a0 a0 ab ab ab a0 a0 a0 a0 a0     ................
    3aa1:	ab ab ab ab a0 a0 a0 a0 ab ab ab ab ab a0 a0 a0     ................
    3ab1:	ab ab ab ab ab ab ab a0 ab ab ab ab ab ab ab ab     ................
    3ac1:	a0 a0 a0 a0 a0 a0 a0 a4 a0 a0 a0 a0 a0 a0 a4 ff     ................
    3ad1:	a0 a0 a0 a0 a0 a0 a4 ff a0 a0 a0 a0 a0 a4 ff ff     ................
    3ae1:	a0 a0 a0 a0 a4 ff ff ff a0 a0 a0 a4 ff ff ff ff     ................
    3af1:	a0 a0 a4 ff ff ff ff ff ab a4 ff ff ff ff ff ab     ................
    3b01:	ff ff ff ff ff ff ff ab ff ff ff ff ff ff ab ab     ................
    3b11:	ff ff ff ff ff ff ab ab ff ff ff ff ff ab ab ab     ................
    3b21:	ff ff ff ff ab ab ab ab ff ff ff ab ab ab ab ab     ................
    3b31:	ff ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    3b41:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3b51:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3b61:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3b71:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3b81:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 96 96     @@@@@@@@@@@@@@..
    3b91:	40 40 40 40 40 96 96 96 40 40 40 40 96 96 96 96     @@@@@...@@@@....
    3ba1:	40 40 40 96 96 96 96 96 40 40 96 96 96 96 96 96     @@@.....@@......
    3bb1:	40 40 96 96 96 96 96 96 40 96 96 96 96 96 96 96     @@......@.......
    3bc1:	40 96 96 96 96 96 96 40 96 96 96 96 96 96 96 96     @......@........
    3bd1:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3be1:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3bf1:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3c01:	40 40 40 40 40 40 40 40 96 96 40 40 40 40 40 40     @@@@@@@@..@@@@@@
    3c11:	96 96 96 40 40 40 40 40 96 96 96 96 40 40 40 40     ...@@@@@....@@@@
    3c21:	96 96 96 96 96 40 40 40 96 96 96 96 96 96 40 40     .....@@@......@@
    3c31:	96 96 96 96 96 96 40 40 96 96 96 96 96 96 96 40     ......@@.......@
    3c41:	bf bf bf bf bf bf bf bf 40 40 40 40 40 40 40 40     ........@@@@@@@@
    3c51:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    3c61:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    3c71:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    3c81:	40 96 96 96 95 96 96 96 40 96 96 96 95 96 96 96     @.......@.......
    3c91:	96 96 96 96 96 95 96 96 96 96 96 96 96 95 96 96     ................
    3ca1:	96 96 96 96 96 96 95 96 96 96 96 96 96 bf 95 96     ................
    3cb1:	95 84 96 96 96 bf 96 95 8c 83 83 8c 96 bf 96 96     ................
    3cc1:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3cd1:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3ce1:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3cf1:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3d01:	96 96 96 95 96 96 96 40 96 96 96 95 96 96 96 40     .......@.......@
    3d11:	96 96 95 96 96 96 96 96 96 96 95 96 96 96 96 96     ................
    3d21:	96 95 96 96 96 96 96 96 96 95 96 96 96 96 95 96     ................
    3d31:	95 96 96 96 96 95 95 95 96 96 96 96 94 8c 8c 95     ................
    3d41:	82 82 82 82 82 bf 96 96 40 d8 d8 d8 bf ff bf 82     ........@.......
    3d51:	40 d8 d8 bf ff ff ff bf 40 d8 bf ff ff ff ff ff     @.......@.......
    3d61:	bf bf ff ff ff ff ff ff 40 40 bf ff ff ff ff ff     ........@@......
    3d71:	40 40 94 bf ff ff ff bf 40 40 40 8c bf ff bf d8     @@......@@@.....
    3d81:	96 96 96 96 96 96 96 96 83 83 8c 8c 8c 8c 8c 83     ................
    3d91:	d8 d8 d8 d8 d8 d8 d8 d8 bf d8 d8 d8 d8 d8 d8 d8     ................
    3da1:	ff bf bf d8 d8 d8 d8 d8 bf d8 d8 d8 d8 d8 d8 d8     ................
    3db1:	d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 82 82     ................
    3dc1:	96 96 8c 83 83 8c 8c 8c 83 82 83 83 83 83 8c 40     ...............@
    3dd1:	82 82 82 83 83 83 83 40 82 82 82 83 83 83 83 40     .......@.......@
    3de1:	d8 82 82 83 83 83 83 40 82 82 82 83 83 83 40 40     .......@......@@
    3df1:	82 82 83 83 83 95 40 40 82 82 83 83 95 40 40 40     ......@@.....@@@
    3e01:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    3e11:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    3e21:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    3e31:	40 40 40 40 40 40 40 40 bf bf bf bf bf bf bf bf     @@@@@@@@........
    3e41:	40 40 40 96 95 ff d8 d8 40 40 40 40 96 ff 83 82     @@@.....@@@@....
    3e51:	40 40 40 40 40 ff 96 96 40 40 40 40 40 bf 96 96     @@@@@...@@@@@...
    3e61:	40 40 40 40 40 bf 96 96 40 40 40 40 40 bf 96 96     @@@@@...@@@@@...
    3e71:	40 40 40 40 40 bf 40 40 40 40 40 40 40 77 40 40     @@@@@.@@@@@@@w@@
    3e81:	d8 d8 d8 82 82 82 82 82 82 82 82 82 82 83 83 83     ................
    3e91:	8c 8c 83 83 83 83 8c 95 96 96 96 96 96 96 96 96     ................
    3ea1:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3eb1:	96 96 96 96 96 96 96 96 40 96 96 96 96 96 96 40     ........@......@
    3ec1:	83 83 8c 95 96 40 40 40 83 8c 96 96 40 40 40 40     .....@@@....@@@@
    3ed1:	96 96 96 40 40 40 40 40 96 96 96 40 40 40 40 40     ...@@@@@...@@@@@
    3ee1:	96 96 40 40 40 40 40 40 96 96 40 40 40 40 40 40     ..@@@@@@..@@@@@@
    3ef1:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    3f01:	40 40 40 40 40 77 40 40 40 40 40 40 40 77 40 40     @@@@@w@@@@@@@w@@
    3f11:	40 40 40 40 40 77 40 40 40 40 40 40 40 77 40 40     @@@@@w@@@@@@@w@@
    3f21:	40 40 40 40 40 77 40 40 40 40 40 40 40 77 40 40     @@@@@w@@@@@@@w@@
    3f31:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    3f41:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    3f51:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    3f61:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    3f71:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    3f81:	40 40 40 40 40 40 40 40 40 40 40 ff ff 40 40 40     @@@@@@@@@@@..@@@
    3f91:	40 40 40 ff ff 40 40 40 40 40 40 ff ff 40 40 40     @@@..@@@@@@..@@@
    3fa1:	40 40 40 ff ff 40 40 40 40 40 40 40 40 40 40 40     @@@..@@@@@@@@@@@
    3fb1:	40 40 40 ff ff 40 40 40 40 40 40 40 40 40 40 40     @@@..@@@@@@@@@@@
    3fc1:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    3fd1:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    3fe1:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    3ff1:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4001:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4011:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4021:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4031:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4041:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4051:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4061:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4071:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4081:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4091:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    40a1:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    40b1:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    40c1:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    40d1:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    40e1:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    40f1:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4101:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4111:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4121:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4131:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4141:	40 40 40 40 40 40 40 40 40 40 40 40 ff ff ff 40     @@@@@@@@@@@@...@
    4151:	40 40 40 ff ff ff 40 40 40 40 40 ff ff 40 40 40     @@@...@@@@@..@@@
    4161:	40 40 40 ff ff 40 40 40 40 40 40 ff ff ff 40 40     @@@..@@@@@@...@@
    4171:	40 40 40 40 ff ff ff 40 40 40 40 40 40 40 40 40     @@@@...@@@@@@@@@
    4181:	40 40 40 40 40 40 40 40 40 ff ff ff 40 40 40 40     @@@@@@@@@...@@@@
    4191:	40 40 ff ff ff 40 40 40 40 40 40 ff ff 40 40 40     @@...@@@@@@..@@@
    41a1:	40 40 40 ff ff 40 40 40 40 40 ff ff ff 40 40 40     @@@..@@@@@...@@@
    41b1:	40 ff ff ff 40 40 40 40 40 40 40 40 40 40 40 40     @...@@@@@@@@@@@@
    41c1:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    41d1:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    41e1:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    41f1:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4201:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4211:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4221:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4231:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4241:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4251:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4261:	40 40 40 40 40 40 40 40 40 40 40 ff ff 40 40 40     @@@@@@@@@@@..@@@
    4271:	40 40 40 ff ff 40 40 40 40 40 ff ff 40 40 40 40     @@@..@@@@@..@@@@
    4281:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4291:	40 40 40 40 40 40 40 40 40 ff ff ff ff ff ff 40     @@@@@@@@@......@
    42a1:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    42b1:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    42c1:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    42d1:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    42e1:	40 40 40 40 40 40 40 40 40 40 40 ff ff 40 40 40     @@@@@@@@@@@..@@@
    42f1:	40 40 40 ff ff 40 40 40 40 40 40 40 40 40 40 40     @@@..@@@@@@@@@@@
    4301:	40 40 40 40 40 40 40 40 40 40 40 40 40 ff ff 40     @@@@@@@@@@@@@..@
    4311:	40 40 40 40 ff ff 40 40 40 40 40 ff ff 40 40 40     @@@@..@@@@@..@@@
    4321:	40 40 ff ff 40 40 40 40 40 ff ff 40 40 40 40 40     @@..@@@@@..@@@@@
    4331:	40 ff 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @.@@@@@@@@@@@@@@
    4341:	40 40 40 40 40 40 40 40 40 40 6f 6f 6f 6f 40 40     @@@@@@@@@@oooo@@
    4351:	40 6f 6f 00 00 6f 6f 40 40 6f 6f 00 6f 6f 6f 40     @oo..oo@@oo.ooo@
    4361:	40 6f 6f 6f 00 6f 6f 40 40 6f 6f 00 00 6f 6f 40     @ooo.oo@@oo..oo@
    4371:	40 40 6f 6f 6f 6f 40 40 40 40 40 40 40 40 40 40     @@oooo@@@@@@@@@@
    4381:	40 40 40 40 40 40 40 40 40 40 40 6f 6f 40 40 40     @@@@@@@@@@@oo@@@
    4391:	40 40 6f 6f 6f 40 40 40 40 40 40 6f 6f 40 40 40     @@ooo@@@@@@oo@@@
    43a1:	40 40 40 6f 6f 40 40 40 40 40 40 6f 6f 40 40 40     @@@oo@@@@@@oo@@@
    43b1:	40 6f 6f 6f 6f 6f 6f 40 40 40 40 40 40 40 40 40     @oooooo@@@@@@@@@
    43c1:	40 40 40 40 40 40 40 40 40 40 6f 6f 6f 6f 40 40     @@@@@@@@@@oooo@@
    43d1:	40 6f 6f 40 40 6f 6f 40 40 40 40 40 6f 6f 40 40     @oo@@oo@@@@@oo@@
    43e1:	40 40 40 6f 6f 40 40 40 40 40 6f 6f 40 40 40 40     @@@oo@@@@@oo@@@@
    43f1:	40 6f 6f 6f 6f 6f 6f 40 40 40 40 40 40 40 40 40     @oooooo@@@@@@@@@
    4401:	40 40 40 40 40 40 40 40 40 6f 6f 6f 6f 6f 6f 40     @@@@@@@@@oooooo@
    4411:	40 40 40 40 6f 6f 40 40 40 40 40 6f 6f 40 40 40     @@@@oo@@@@@oo@@@
    4421:	40 40 40 40 6f 6f 40 40 40 6f 6f 40 40 6f 6f 40     @@@@oo@@@oo@@oo@
    4431:	40 40 6f 6f 6f 6f 40 40 40 40 40 40 40 40 40 40     @@oooo@@@@@@@@@@
    4441:	40 40 40 40 40 40 40 40 40 40 40 40 6f 6f 40 40     @@@@@@@@@@@@oo@@
    4451:	40 40 40 6f 6f 6f 40 40 40 40 6f 6f 6f 6f 40 40     @@@ooo@@@@oooo@@
    4461:	40 6f 6f 00 6f 6f 40 40 40 6f 6f 6f 6f 6f 6f 40     @oo.oo@@@oooooo@
    4471:	40 40 40 40 6f 6f 40 40 40 40 40 40 40 40 40 40     @@@@oo@@@@@@@@@@
    4481:	40 40 40 40 40 40 40 40 40 6f 6f 6f 6f 6f 6f 40     @@@@@@@@@oooooo@
    4491:	40 6f 6f 40 40 40 40 40 40 6f 6f 6f 6f 6f 40 40     @oo@@@@@@ooooo@@
    44a1:	40 40 40 40 40 6f 6f 40 40 6f 6f 40 40 6f 6f 40     @@@@@oo@@oo@@oo@
    44b1:	40 40 6f 6f 6f 6f 40 40 40 40 40 40 40 40 40 40     @@oooo@@@@@@@@@@
    44c1:	40 40 40 40 40 40 40 40 40 40 6f 6f 6f 6f 40 40     @@@@@@@@@@oooo@@
    44d1:	40 6f 6f 40 40 40 40 40 40 6f 6f 6f 6f 6f 40 40     @oo@@@@@@ooooo@@
    44e1:	40 6f 6f 00 00 6f 6f 40 40 6f 6f 00 00 6f 6f 40     @oo..oo@@oo..oo@
    44f1:	40 40 6f 6f 6f 6f 40 40 40 40 40 40 40 40 40 40     @@oooo@@@@@@@@@@
    4501:	40 40 40 40 40 40 40 40 40 6f 6f 6f 6f 6f 6f 40     @@@@@@@@@oooooo@
    4511:	40 40 40 40 40 6f 6f 40 40 40 40 40 6f 6f 40 40     @@@@@oo@@@@@oo@@
    4521:	40 40 40 6f 6f 40 40 40 40 40 6f 6f 40 40 40 40     @@@oo@@@@@oo@@@@
    4531:	40 40 6f 6f 40 40 40 40 40 40 40 40 40 40 40 40     @@oo@@@@@@@@@@@@
    4541:	40 40 40 40 40 40 40 40 40 40 6f 6f 6f 6f 40 40     @@@@@@@@@@oooo@@
    4551:	40 6f 6f 00 00 6f 6f 40 40 40 6f 6f 6f 6f 40 40     @oo..oo@@@oooo@@
    4561:	40 6f 6f 00 00 6f 6f 40 40 6f 6f 00 00 6f 6f 40     @oo..oo@@oo..oo@
    4571:	40 40 6f 6f 6f 6f 40 40 40 40 40 40 40 40 40 40     @@oooo@@@@@@@@@@
    4581:	40 40 40 40 40 40 40 40 40 40 6f 6f 6f 6f 40 40     @@@@@@@@@@oooo@@
    4591:	40 6f 6f 00 00 6f 6f 40 40 40 6f 6f 6f 6f 6f 40     @oo..oo@@@ooooo@
    45a1:	40 40 40 40 40 6f 6f 40 40 40 40 40 6f 6f 40 40     @@@@@oo@@@@@oo@@
    45b1:	40 40 6f 6f 6f 40 40 40 40 40 40 40 40 40 40 40     @@ooo@@@@@@@@@@@
    45c1:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    45d1:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    45e1:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    45f1:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4601:	40 40 40 ff ff 40 40 40 40 40 40 ff ff 40 40 40     @@@..@@@@@@..@@@
    4611:	40 40 40 ff ff 40 40 40 40 40 40 ff ff 40 40 40     @@@..@@@@@@..@@@
    4621:	40 40 40 ff ff 40 40 40 40 40 40 ff ff 40 40 40     @@@..@@@@@@..@@@
    4631:	40 40 40 ff ff 40 40 40 40 40 40 ff ff 40 40 40     @@@..@@@@@@..@@@
    4641:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4651:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4661:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4671:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4681:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4691:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    46a1:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    46b1:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    46c1:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    46d1:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    46e1:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    46f1:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4701:	40 40 40 40 40 40 40 40 40 40 ff ff ff ff 40 40     @@@@@@@@@@....@@
    4711:	40 ff ff 40 40 ff ff 40 40 40 40 40 ff ff 40 40     @..@@..@@@@@..@@
    4721:	40 40 40 ff ff 40 40 40 40 40 40 40 40 40 40 40     @@@..@@@@@@@@@@@
    4731:	40 40 40 ff ff 40 40 40 40 40 40 40 40 40 40 40     @@@..@@@@@@@@@@@
    4741:	40 40 40 40 40 40 40 40 40 40 ff ff ff ff 40 40     @@@@@@@@@@....@@
    4751:	40 ff ff 40 40 ff ff 40 40 ff ff 40 ff ff ff 40     @..@@..@@..@...@
    4761:	40 ff ff 40 ff ff ff 40 40 ff ff 40 40 40 40 40     @..@...@@..@@@@@
    4771:	40 40 ff ff ff ff ff 40 40 40 40 40 40 40 40 40     @@.....@@@@@@@@@
    4781:	40 40 40 40 40 40 40 40 40 40 40 ff ff 40 40 40     @@@@@@@@@@@..@@@
    4791:	40 40 ff ff ff ff 40 40 40 ff ff 40 40 ff ff 40     @@....@@@..@@..@
    47a1:	40 ff ff 40 40 ff ff 40 40 ff ff ff ff ff ff 40     @..@@..@@......@
    47b1:	40 ff ff 40 40 ff ff 40 40 40 40 40 40 40 40 40     @..@@..@@@@@@@@@
    47c1:	40 40 40 40 40 40 40 40 40 ff ff ff ff ff 40 40     @@@@@@@@@.....@@
    47d1:	40 ff ff 40 40 ff ff 40 40 ff ff ff ff ff 40 40     @..@@..@@.....@@
    47e1:	40 ff ff 40 40 ff ff 40 40 ff ff 40 40 ff ff 40     @..@@..@@..@@..@
    47f1:	40 ff ff ff ff ff 40 40 40 40 40 40 40 40 40 40     @.....@@@@@@@@@@
    4801:	40 40 40 40 40 40 40 40 40 40 ff ff ff ff 40 40     @@@@@@@@@@....@@
    4811:	40 ff ff 40 40 ff ff 40 40 ff ff 40 40 40 40 40     @..@@..@@..@@@@@
    4821:	40 ff ff 40 40 40 40 40 40 ff ff 40 40 ff ff 40     @..@@@@@@..@@..@
    4831:	40 40 ff ff ff ff 40 40 40 40 40 40 40 40 40 40     @@....@@@@@@@@@@
    4841:	40 40 40 40 40 40 40 40 40 ff ff ff ff 40 40 40     @@@@@@@@@....@@@
    4851:	40 ff ff 40 ff ff 40 40 40 ff ff 40 40 ff ff 40     @..@..@@@..@@..@
    4861:	40 ff ff 40 40 ff ff 40 40 ff ff 40 ff ff 40 40     @..@@..@@..@..@@
    4871:	40 ff ff ff ff 40 40 40 40 40 40 40 40 40 40 40     @....@@@@@@@@@@@
    4881:	40 40 40 40 40 40 40 40 40 ff ff ff ff ff ff 40     @@@@@@@@@......@
    4891:	40 ff ff 40 40 40 40 40 40 ff ff ff ff ff 40 40     @..@@@@@@.....@@
    48a1:	40 ff ff 40 40 40 40 40 40 ff ff 40 40 40 40 40     @..@@@@@@..@@@@@
    48b1:	40 ff ff ff ff ff ff 40 40 40 40 40 40 40 40 40     @......@@@@@@@@@
    48c1:	40 40 40 40 40 40 40 40 40 ff ff ff ff ff ff 40     @@@@@@@@@......@
    48d1:	40 ff ff 40 40 40 40 40 40 ff ff ff ff ff 40 40     @..@@@@@@.....@@
    48e1:	40 ff ff 40 40 40 40 40 40 ff ff 40 40 40 40 40     @..@@@@@@..@@@@@
    48f1:	40 ff ff 40 40 40 40 40 40 40 40 40 40 40 40 40     @..@@@@@@@@@@@@@
    4901:	40 40 40 40 40 40 40 40 40 40 ff ff ff ff ff 40     @@@@@@@@@@.....@
    4911:	40 ff ff 40 40 40 40 40 40 ff ff 40 40 40 40 40     @..@@@@@@..@@@@@
    4921:	40 ff ff 40 ff ff ff 40 40 ff ff 40 40 ff ff 40     @..@...@@..@@..@
    4931:	40 40 ff ff ff ff ff 40 40 40 40 40 40 40 40 40     @@.....@@@@@@@@@
    4941:	40 40 40 40 40 40 40 40 40 ff ff 40 40 ff ff 40     @@@@@@@@@..@@..@
    4951:	40 ff ff 40 40 ff ff 40 40 ff ff ff ff ff ff 40     @..@@..@@......@
    4961:	40 ff ff 40 40 ff ff 40 40 ff ff 40 40 ff ff 40     @..@@..@@..@@..@
    4971:	40 ff ff 40 40 ff ff 40 40 40 40 40 40 40 40 40     @..@@..@@@@@@@@@
    4981:	40 40 40 40 40 40 40 40 40 ff ff ff ff ff ff 40     @@@@@@@@@......@
    4991:	40 40 40 ff ff 40 40 40 40 40 40 ff ff 40 40 40     @@@..@@@@@@..@@@
    49a1:	40 40 40 ff ff 40 40 40 40 40 40 ff ff 40 40 40     @@@..@@@@@@..@@@
    49b1:	40 ff ff ff ff ff ff 40 40 40 40 40 40 40 40 40     @......@@@@@@@@@
    49c1:	40 40 40 40 40 40 40 40 40 40 40 40 ff ff ff 40     @@@@@@@@@@@@...@
    49d1:	40 40 40 40 40 ff ff 40 40 40 40 40 40 ff ff 40     @@@@@..@@@@@@..@
    49e1:	40 40 40 40 40 ff ff 40 40 ff ff 40 40 ff ff 40     @@@@@..@@..@@..@
    49f1:	40 40 ff ff ff ff 40 40 40 40 40 40 40 40 40 40     @@....@@@@@@@@@@
    4a01:	40 40 40 40 40 40 40 40 40 ff ff 40 40 ff ff 40     @@@@@@@@@..@@..@
    4a11:	40 ff ff 40 ff ff 40 40 40 ff ff ff ff 40 40 40     @..@..@@@....@@@
    4a21:	40 ff ff ff ff 40 40 40 40 ff ff 40 ff ff 40 40     @....@@@@..@..@@
    4a31:	40 ff ff 40 40 ff ff 40 40 40 40 40 40 40 40 40     @..@@..@@@@@@@@@
    4a41:	40 40 40 40 40 40 40 40 40 ff ff 40 40 40 40 40     @@@@@@@@@..@@@@@
    4a51:	40 ff ff 40 40 40 40 40 40 ff ff 40 40 40 40 40     @..@@@@@@..@@@@@
    4a61:	40 ff ff 40 40 40 40 40 40 ff ff 40 40 40 40 40     @..@@@@@@..@@@@@
    4a71:	40 ff ff ff ff ff ff 40 40 40 40 40 40 40 40 40     @......@@@@@@@@@
    4a81:	40 40 40 40 40 40 40 40 40 ff ff 40 40 40 ff ff     @@@@@@@@@..@@@..
    4a91:	40 ff ff ff 40 ff ff ff 40 ff ff ff ff ff ff ff     @...@...@.......
    4aa1:	40 ff ff 40 ff 40 ff ff 40 ff ff 40 40 40 ff ff     @..@.@..@..@@@..
    4ab1:	40 ff ff 40 40 40 ff ff 40 40 40 40 40 40 40 40     @..@@@..@@@@@@@@
    4ac1:	40 40 40 40 40 40 40 40 40 ff ff 40 40 ff ff 40     @@@@@@@@@..@@..@
    4ad1:	40 ff ff ff 40 ff ff 40 40 ff ff ff ff ff ff 40     @...@..@@......@
    4ae1:	40 ff ff ff ff ff ff 40 40 ff ff 40 ff ff ff 40     @......@@..@...@
    4af1:	40 ff ff 40 40 ff ff 40 40 40 40 40 40 40 40 40     @..@@..@@@@@@@@@
    4b01:	40 40 40 40 40 40 40 40 40 40 ff ff ff ff 40 40     @@@@@@@@@@....@@
    4b11:	40 ff ff 40 40 ff ff 40 40 ff ff 40 40 ff ff 40     @..@@..@@..@@..@
    4b21:	40 ff ff 40 40 ff ff 40 40 ff ff 40 40 ff ff 40     @..@@..@@..@@..@
    4b31:	40 40 ff ff ff ff 40 40 40 40 40 40 40 40 40 40     @@....@@@@@@@@@@
    4b41:	40 40 40 40 40 40 40 40 40 ff ff ff ff ff 40 40     @@@@@@@@@.....@@
    4b51:	40 ff ff 40 40 ff ff 40 40 ff ff 40 40 ff ff 40     @..@@..@@..@@..@
    4b61:	40 ff ff ff ff ff 40 40 40 ff ff 40 40 40 40 40     @.....@@@..@@@@@
    4b71:	40 ff ff 40 40 40 40 40 40 40 40 40 40 40 40 40     @..@@@@@@@@@@@@@
    4b81:	40 40 40 40 40 40 40 40 40 40 ff ff ff ff 40 40     @@@@@@@@@@....@@
    4b91:	40 ff ff 40 40 ff ff 40 40 ff ff 40 40 ff ff 40     @..@@..@@..@@..@
    4ba1:	40 ff ff 40 40 ff ff 40 40 ff ff 40 ff ff 40 40     @..@@..@@..@..@@
    4bb1:	40 40 ff ff 40 ff ff 40 40 40 40 40 40 40 40 40     @@..@..@@@@@@@@@
    4bc1:	40 40 40 40 40 40 40 40 40 ff ff ff ff ff 40 40     @@@@@@@@@.....@@
    4bd1:	40 ff ff 40 40 ff ff 40 40 ff ff 40 40 ff ff 40     @..@@..@@..@@..@
    4be1:	40 ff ff ff ff ff 40 40 40 ff ff 40 ff ff 40 40     @.....@@@..@..@@
    4bf1:	40 ff ff 40 40 ff ff 40 40 40 40 40 40 40 40 40     @..@@..@@@@@@@@@
    4c01:	40 40 40 40 40 40 40 40 40 40 ff ff ff ff 40 40     @@@@@@@@@@....@@
    4c11:	40 ff ff 40 40 40 40 40 40 40 ff ff ff ff 40 40     @..@@@@@@@....@@
    4c21:	40 40 40 40 40 ff ff 40 40 40 40 40 40 ff ff 40     @@@@@..@@@@@@..@
    4c31:	40 40 ff ff ff ff 40 40 40 40 40 40 40 40 40 40     @@....@@@@@@@@@@
    4c41:	40 40 40 40 40 40 40 40 40 ff ff ff ff ff ff 40     @@@@@@@@@......@
    4c51:	40 40 40 ff ff 40 40 40 40 40 40 ff ff 40 40 40     @@@..@@@@@@..@@@
    4c61:	40 40 40 ff ff 40 40 40 40 40 40 ff ff 40 40 40     @@@..@@@@@@..@@@
    4c71:	40 40 40 ff ff 40 40 40 40 40 40 40 40 40 40 40     @@@..@@@@@@@@@@@
    4c81:	40 40 40 40 40 40 40 40 40 ff ff 40 40 ff ff 40     @@@@@@@@@..@@..@
    4c91:	40 ff ff 40 40 ff ff 40 40 ff ff 40 40 ff ff 40     @..@@..@@..@@..@
    4ca1:	40 ff ff 40 40 ff ff 40 40 ff ff 40 40 ff ff 40     @..@@..@@..@@..@
    4cb1:	40 ff ff ff ff ff ff 40 40 40 40 40 40 40 40 40     @......@@@@@@@@@
    4cc1:	40 40 40 40 40 40 40 40 40 ff ff 40 40 ff ff 40     @@@@@@@@@..@@..@
    4cd1:	40 ff ff 40 40 ff ff 40 40 ff ff 40 40 ff ff 40     @..@@..@@..@@..@
    4ce1:	40 ff ff 40 40 ff ff 40 40 40 ff ff ff ff 40 40     @..@@..@@@....@@
    4cf1:	40 40 40 ff ff 40 40 40 40 40 40 40 40 40 40 40     @@@..@@@@@@@@@@@
    4d01:	40 40 40 40 40 40 40 40 40 ff ff 40 40 40 ff ff     @@@@@@@@@..@@@..
    4d11:	40 ff ff 40 40 40 ff ff 40 ff ff 40 ff 40 ff ff     @..@@@..@..@.@..
    4d21:	40 ff ff ff ff ff ff ff 40 ff ff ff 40 ff ff ff     @.......@...@...
    4d31:	40 ff ff 40 40 40 ff ff 40 40 40 40 40 40 40 40     @..@@@..@@@@@@@@
    4d41:	40 40 40 40 40 40 40 40 40 ff ff 40 40 ff ff 40     @@@@@@@@@..@@..@
    4d51:	40 ff ff 40 40 ff ff 40 40 40 ff ff ff ff 40 40     @..@@..@@@....@@
    4d61:	40 40 ff ff ff ff 40 40 40 ff ff 40 40 ff ff 40     @@....@@@..@@..@
    4d71:	40 ff ff 40 40 ff ff 40 40 40 40 40 40 40 40 40     @..@@..@@@@@@@@@
    4d81:	40 40 40 40 40 40 40 40 40 ff ff 40 40 ff ff 40     @@@@@@@@@..@@..@
    4d91:	40 ff ff 40 40 ff ff 40 40 40 ff ff ff ff 40 40     @..@@..@@@....@@
    4da1:	40 40 40 ff ff 40 40 40 40 40 40 ff ff 40 40 40     @@@..@@@@@@..@@@
    4db1:	40 40 40 ff ff 40 40 40 40 40 40 40 40 40 40 40     @@@..@@@@@@@@@@@
    4dc1:	40 40 40 40 40 40 40 40 40 ff ff ff ff ff ff 40     @@@@@@@@@......@
    4dd1:	40 40 40 40 ff ff 40 40 40 40 40 ff ff 40 40 40     @@@@..@@@@@..@@@
    4de1:	40 40 ff ff 40 40 40 40 40 ff ff 40 40 40 40 40     @@..@@@@@..@@@@@
    4df1:	40 ff ff ff ff ff ff 40 40 40 40 40 40 40 40 40     @......@@@@@@@@@
    4e01:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4e11:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4e21:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4e31:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4e41:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4e51:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4e61:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4e71:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4e81:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4e91:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4ea1:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4eb1:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4ec1:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4ed1:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4ee1:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4ef1:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4f01:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4f11:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4f21:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4f31:	ff ff ff ff ff ff ff ff 40 40 40 40 40 40 40 40     ........@@@@@@@@

00004f41 <map_star>:
    4f41:	01 01 0c                                            ...

00004f44 <map_ice_moon>:
    4f44:	03 03 09 0a 0b 0d 0e 0f 10 11 12                    ...........

00004f4f <map_ice_cloud>:
    4f4f:	01 01 08                                            ...

00004f52 <map_ice_far>:
    4f52:	01 01 07                                            ...

00004f55 <map_ice_sky>:
    4f55:	01 01 06                                            ...

00004f58 <map_ice_horizon>:
    4f58:	01 01 05                                            ...

00004f5b <map_ice_bottom>:
    4f5b:	01 01 04                                            ...

00004f5e <map_ice_right>:
    4f5e:	01 01 03                                            ...

00004f61 <map_ice_middle>:
    4f61:	01 01 02                                            ...

00004f64 <map_ice_left>:
    4f64:	01 01 01                                            ...

00004f67 <map_splash>:
    4f67:	0f 05 13 13 13 00 13 13 13 00 14 15 16 00 13 13     ................
    4f77:	13 17 13 17 00 13 17 17 00 18 19 1a 00 13 17 17     ................
    4f87:	00 13 00 00 13 00 00 00 1b 1c 1d 00 13 13 13 1e     ................
    4f97:	13 1e 00 13 00 00 00 1f 20 21 00 1e 1e 13 13 13     ........ !......
    4fa7:	13 00 13 00 00 00 22 00 00 00 13 13 13              ......"......

00004fb4 <map_tile_none>:
    4fb4:	01 01 00 00                                         ....

00004fb8 <__ctors_end>:
    4fb8:	11 24       	eor	r1, r1
    4fba:	1f be       	out	0x3f, r1	; 63
    4fbc:	cf ef       	ldi	r28, 0xFF	; 255
    4fbe:	d0 e1       	ldi	r29, 0x10	; 16
    4fc0:	de bf       	out	0x3e, r29	; 62
    4fc2:	cd bf       	out	0x3d, r28	; 61

00004fc4 <__do_copy_data>:
    4fc4:	11 e0       	ldi	r17, 0x01	; 1
    4fc6:	a0 e0       	ldi	r26, 0x00	; 0
    4fc8:	b1 e0       	ldi	r27, 0x01	; 1
    4fca:	e0 e1       	ldi	r30, 0x10	; 16
    4fcc:	f8 e7       	ldi	r31, 0x78	; 120
    4fce:	02 c0       	rjmp	.+4      	; 0x4fd4 <__do_copy_data+0x10>
    4fd0:	05 90       	lpm	r0, Z+
    4fd2:	0d 92       	st	X+, r0
    4fd4:	a2 30       	cpi	r26, 0x02	; 2
    4fd6:	b1 07       	cpc	r27, r17
    4fd8:	d9 f7       	brne	.-10     	; 0x4fd0 <__do_copy_data+0xc>

00004fda <__do_clear_bss>:
    4fda:	1a e0       	ldi	r17, 0x0A	; 10
    4fdc:	a2 e0       	ldi	r26, 0x02	; 2
    4fde:	b1 e0       	ldi	r27, 0x01	; 1
    4fe0:	01 c0       	rjmp	.+2      	; 0x4fe4 <.do_clear_bss_start>

00004fe2 <.do_clear_bss_loop>:
    4fe2:	1d 92       	st	X+, r1

00004fe4 <.do_clear_bss_start>:
    4fe4:	ac 31       	cpi	r26, 0x1C	; 28
    4fe6:	b1 07       	cpc	r27, r17
    4fe8:	e1 f7       	brne	.-8      	; 0x4fe2 <.do_clear_bss_loop>

00004fea <wdt_init>:

void wdt_init(void)
{

#if TRUE_RANDOM_GEN == 1	
	wdt_randomize();
    4fea:	0e 94 84 2d 	call	0x5b08	; 0x5b08 <wdt_randomize>
#endif

    MCUSR = 0;
    4fee:	14 be       	out	0x34, r1	; 52
    wdt_disable();
    4ff0:	88 e1       	ldi	r24, 0x18	; 24
    4ff2:	0f b6       	in	r0, 0x3f	; 63
    4ff4:	f8 94       	cli
    4ff6:	80 93 60 00 	sts	0x0060, r24
    4ffa:	10 92 60 00 	sts	0x0060, r1
    4ffe:	0f be       	out	0x3f, r0	; 63

00005000 <Initialize>:


void Initialize(void){
	int i;

	if(!isEepromFormatted()) FormatEeprom();
    5000:	0e 94 41 2e 	call	0x5c82	; 0x5c82 <isEepromFormatted>
    5004:	81 11       	cpse	r24, r1
    5006:	02 c0       	rjmp	.+4      	; 0x500c <Initialize+0xc>
    5008:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <FormatEeprom>

	cli();
    500c:	f8 94       	cli
		mix_bank=0;
	#endif
	
	#if MIXER_CHAN4_TYPE == 0
		//initialize LFSR		
		tr4_barrel_lo=1;
    500e:	81 e0       	ldi	r24, 0x01	; 1
    5010:	80 93 cc 08 	sts	0x08CC, r24
		tr4_barrel_hi=1;		
    5014:	80 93 cd 08 	sts	0x08CD, r24
		tr4_params=0b00000001; //15 bits no divider (1)
    5018:	80 93 cb 08 	sts	0x08CB, r24
		snesMouseEnabled=false;
	#endif

	//silence all sound channels
	for(i=0;i<CHANNELS;i++){
		mixer.channels.all[i].volume=0;
    501c:	10 92 b8 08 	sts	0x08B8, r1
    5020:	10 92 be 08 	sts	0x08BE, r1
    5024:	10 92 c4 08 	sts	0x08C4, r1
    5028:	10 92 ca 08 	sts	0x08CA, r1
    502c:	10 92 d0 08 	sts	0x08D0, r1
	}
	
	//set sync parameters. starts at odd field, in pre-eq pulses, line 1, vsync flag cleared
	sync_phase=0;
    5030:	10 92 a0 08 	sts	0x08A0, r1
	sync_flags=0;
    5034:	10 92 a2 08 	sts	0x08A2, r1
	sync_pulse=SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES;
    5038:	92 e1       	ldi	r25, 0x12	; 18
    503a:	90 93 a1 08 	sts	0x08A1, r25

	//set rendering parameters
	render_lines_count=FRAME_LINES;
    503e:	90 ee       	ldi	r25, 0xE0	; 224
    5040:	90 93 a8 08 	sts	0x08A8, r25
	first_render_line=FIRST_RENDER_LINE;
    5044:	94 e1       	ldi	r25, 0x14	; 20
    5046:	90 93 a7 08 	sts	0x08A7, r25

	joypad1_status_hi=0;
    504a:	10 92 ac 08 	sts	0x08AC, r1
    504e:	10 92 ab 08 	sts	0x08AB, r1
	joypad2_status_hi=0;
    5052:	10 92 b0 08 	sts	0x08B0, r1
    5056:	10 92 af 08 	sts	0x08AF, r1
	sound_enabled=1;
    505a:	80 93 b7 08 	sts	0x08B7, r24

	InitializeVideoMode();
    505e:	0e 94 7a 3a 	call	0x74f4	; 0x74f4 <InitializeVideoMode>
    5062:	80 e7       	ldi	r24, 0x70	; 112
    5064:	90 e0       	ldi	r25, 0x00	; 0
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
		val=pgm_read_word(&io_table[j]);
    5066:	fc 01       	movw	r30, r24
    5068:	25 91       	lpm	r18, Z+
    506a:	34 91       	lpm	r19, Z
		ptr=(u8*)(val&0xff);
    506c:	f9 01       	movw	r30, r18
    506e:	ff 27       	eor	r31, r31
		*ptr=val>>8;	
    5070:	30 83       	st	Z, r19
    5072:	02 96       	adiw	r24, 0x02	; 2
	InitializeVideoMode();
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
    5074:	20 e0       	ldi	r18, 0x00	; 0
    5076:	8e 39       	cpi	r24, 0x9E	; 158
    5078:	92 07       	cpc	r25, r18
    507a:	a9 f7       	brne	.-22     	; 0x5066 <Initialize+0x66>
		val=pgm_read_word(&io_table[j]);
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;	
	}

	sei();
    507c:	78 94       	sei
	
	DisplayLogo();
    507e:	0e 94 08 3b 	call	0x7610	; 0x7610 <DisplayLogo>
    5082:	0e 94 bf 3b 	call	0x777e	; 0x777e <main>
    5086:	0c 94 06 3c 	jmp	0x780c	; 0x780c <_exit>

0000508a <__bad_interrupt>:
    508a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000508e <sub_video_mode3>:
	;***************************************************

	sub_video_mode3:
		;de-activate sync timer interrupts
		;we will need to use the I flag to branch in a critical loop
		ldi ZL,(0<<OCIE1A)
    508e:	e0 e0       	ldi	r30, 0x00	; 0
		sts _SFR_MEM_ADDR(TIMSK1),ZL
    5090:	e0 93 6f 00 	sts	0x006F, r30

		;wait cycles to align with next hsync
		WAIT r26,183+241
    5094:	ad e8       	ldi	r26, 0x8D	; 141
    5096:	aa 95       	dec	r26
    5098:	f1 f7       	brne	.-4      	; 0x5096 <sub_video_mode3+0x8>
    509a:	00 00       	nop

		;Refresh ramtiles indexes in VRAM
		;This has to be done because the main
		;program may have altered the VRAM
		;after vsync and the rendering interrupt.
		lds r16,userRamTilesCount
    509c:	00 91 db 08 	lds	r16, 0x08DB

		ldi ZL,lo8(ram_tiles_restore);
    50a0:	ea e3       	ldi	r30, 0x3A	; 58
		ldi ZH,hi8(ram_tiles_restore);
    50a2:	f8 e0       	ldi	r31, 0x08	; 8
		ldi r18,3
    50a4:	23 e0       	ldi	r18, 0x03	; 3
		mul r16,r18
    50a6:	02 9f       	mul	r16, r18
		add ZL,r0
    50a8:	e0 0d       	add	r30, r0
		adc ZH,r1
    50aa:	f1 1d       	adc	r31, r1

		ldi YL,lo8(vram)
    50ac:	c0 e2       	ldi	r28, 0x20	; 32
		ldi YH,hi8(vram)
    50ae:	da e0       	ldi	r29, 0x0A	; 10

		lds r18,free_tile_index
    50b0:	20 91 62 09 	lds	r18, 0x0962
		ldi r19,MAX_RAMTILES		;maximum possible ramtiles
    50b4:	3c e3       	ldi	r19, 0x3C	; 60
		sub r19,r18					;sub free tile
    50b6:	32 1b       	sub	r19, r18
		add r19,r16					;add user tiles
    50b8:	30 0f       	add	r19, r16

		cp r18,r16
    50ba:	20 17       	cp	r18, r16
		breq no_ramtiles
    50bc:	51 f0       	breq	.+20     	; 0x50d2 <no_ramtiles>
		nop
    50be:	00 00       	nop
	...

000050c2 <upd_loop>:
		nop
upd_loop:
		ld XL,Z+	;load vram offset of ramtile
    50c2:	a1 91       	ld	r26, Z+
		ld XH,Z+
    50c4:	b1 91       	ld	r27, Z+

		ld r17,X	;get latest VRAM tile that may have been modified my
    50c6:	1c 91       	ld	r17, X
		st Z+,r17	;the main program and store it in the restore buffer
    50c8:	11 93       	st	Z+, r17
		st X,r16	;write the ramtile index back to vram
    50ca:	0c 93       	st	X, r16

		inc r16
    50cc:	03 95       	inc	r16
		cp r16,r18
    50ce:	02 17       	cp	r16, r18
		brlo upd_loop ;loop is 14 cycles
    50d0:	c0 f3       	brcs	.-16     	; 0x50c2 <upd_loop>

000050d2 <no_ramtiles>:

no_ramtiles:
		;wait for remaining maximum possible ramtiles
1:
		ldi r17,3
    50d2:	13 e0       	ldi	r17, 0x03	; 3
		dec r17
    50d4:	1a 95       	dec	r17
		brne .-4
    50d6:	f1 f7       	brne	.-4      	; 0x50d4 <no_ramtiles+0x2>
		rjmp .
    50d8:	00 c0       	rjmp	.+0      	; 0x50da <no_ramtiles+0x8>
		dec r19
    50da:	3a 95       	dec	r19
		brne 1b
    50dc:	d1 f7       	brne	.-12     	; 0x50d2 <no_ramtiles>

		;**********************
		; setup scroll stuff
		;**********************
	
		ldi YL,lo8(vram)
    50de:	c0 e2       	ldi	r28, 0x20	; 32
		ldi YH,hi8(vram)
    50e0:	da e0       	ldi	r29, 0x0A	; 10

		//add X scroll (coarse)
		lds r18,screen_scrollX ;ScreenScrollX
    50e2:	20 91 9c 08 	lds	r18, 0x089C
		mov r25,r18
    50e6:	92 2f       	mov	r25, r18
		andi r18,0xf8	;(x>>3) * 8 interleave
    50e8:	28 7f       	andi	r18, 0xF8	; 248
		add YL,r18
    50ea:	c2 0f       	add	r28, r18

		;save Y wrap adress 
		movw r12,YL
    50ec:	6e 01       	movw	r12, r28
	

		//add Y scroll (coarse)
		lds r16,screen_scrollY ;ScreenScrollY
    50ee:	00 91 9d 08 	lds	r16, 0x089D
		mov r22,r16
    50f2:	60 2f       	mov	r22, r16
		lsr r16
    50f4:	06 95       	lsr	r16
		lsr r16
    50f6:	06 95       	lsr	r16
		lsr r16 ;/8
    50f8:	06 95       	lsr	r16

        lds r17,screen_scrollHeight
    50fa:	10 91 9e 08 	lds	r17, 0x089E
        sub r17,r16
    50fe:	10 1b       	sub	r17, r16
        mov r15,r17 ;Y tiles to draw before wrapping
    5100:	f1 2e       	mov	r15, r17

        mov r17,r16
    5102:	10 2f       	mov	r17, r16
        lsr r16
    5104:	06 95       	lsr	r16
        lsr r16
    5106:	06 95       	lsr	r16
        lsr r16 ;/8
    5108:	06 95       	lsr	r16
		add YH,r16      ; (bits 6-7)
    510a:	d0 0f       	add	r29, r16
		andi r17,0x7
    510c:	17 70       	andi	r17, 0x07	; 7
        add YL,r17      ;interleave (bits 3-5)
    510e:	c1 0f       	add	r28, r17
        andi r22,0x7    ;fine Y scrolling (bits 0-2)
    5110:	67 70       	andi	r22, 0x07	; 7
		;lds r20,tile_table_lo
		;lds r21,tile_table_hi
		;out _SFR_IO_ADDR(GPIOR1),r20 ;store for later
		;out _SFR_IO_ADDR(GPIOR2),r21

		lds r20,overlay_tile_table
    5112:	40 91 9a 08 	lds	r20, 0x089A
		lds r21,overlay_tile_table+1
    5116:	50 91 9b 08 	lds	r21, 0x089B
		lds r6,tile_table_lo
    511a:	60 90 96 08 	lds	r6, 0x0896
		lds r7,tile_table_hi
    511e:	70 90 97 08 	lds	r7, 0x0897
		out _SFR_IO_ADDR(GPIOR1),r6 ;store for later
    5122:	6a bc       	out	0x2a, r6	; 42
		out _SFR_IO_ADDR(GPIOR2),r7
    5124:	7b bc       	out	0x2b, r7	; 43


		;save main section value	
		movw r10,YL
    5126:	5e 01       	movw	r10, r28
		mov r23,r22
    5128:	76 2f       	mov	r23, r22
		mov r24,r15
    512a:	8f 2d       	mov	r24, r15
		mov r9,r25
    512c:	99 2e       	mov	r9, r25

		;load values for overlay if it's activated (overlay_height>0)
		
		;compute beginning of overlay in vram 
		lds r16,screen_scrollHeight
    512e:	00 91 9e 08 	lds	r16, 0x089E
		mov r18,r16
    5132:	20 2f       	mov	r18, r16
		lsr r16
    5134:	06 95       	lsr	r16
		lsr r16
    5136:	06 95       	lsr	r16
		lsr r16			;hi8
    5138:	06 95       	lsr	r16
		inc r16			;add 0x100 ram offset
    513a:	03 95       	inc	r16
		andi r18,7		;lo8
    513c:	27 70       	andi	r18, 0x07	; 7
		
		lds r19,overlay_height	
    513e:	30 91 99 08 	lds	r19, 0x0899
		cpi r19,0
    5142:	30 30       	cpi	r19, 0x00	; 0
		in r0, _SFR_IO_ADDR(SREG)
    5144:	0f b6       	in	r0, 0x3f	; 63

		sbrs r0,SREG_Z
    5146:	01 fe       	sbrs	r0, 1
		clr r22
    5148:	66 27       	eor	r22, r22
		sbrs r0,SREG_Z
    514a:	01 fe       	sbrs	r0, 1
		mov YL,r18		;lo8(overlay_vram)
    514c:	c2 2f       	mov	r28, r18
		sbrs r0,SREG_Z
    514e:	01 fe       	sbrs	r0, 1
		mov YH,r16		;hi8(overlay_vram)
    5150:	d0 2f       	mov	r29, r16
		sbrs r0,SREG_Z
    5152:	01 fe       	sbrs	r0, 1
		ser r24
    5154:	8f ef       	ldi	r24, 0xFF	; 255
		sbrs r0,SREG_Z
    5156:	01 fe       	sbrs	r0, 1
		clr r9
    5158:	99 24       	eor	r9, r9

		sbrs r0,SREG_Z
    515a:	01 fe       	sbrs	r0, 1
		out _SFR_IO_ADDR(GPIOR1),r20
    515c:	4a bd       	out	0x2a, r20	; 42
		sbrs r0,SREG_Z
    515e:	01 fe       	sbrs	r0, 1
		out _SFR_IO_ADDR(GPIOR2),r21
    5160:	5b bd       	out	0x2b, r21	; 43


		//ldi r16,SCREEN_TILES_V*TILE_HEIGHT; total scanlines to draw
		//mov r8,r16
		lds r8,render_lines_count ;total scanlines to draw
    5162:	80 90 a8 08 	lds	r8, 0x08A8

00005166 <next_tile_line>:
	;r23 = Main section tile row
	;r24 = Current Y tiles to draw before wrapping
	;r25 = Main section scrollX

	next_tile_line:
		rcall hsync_pulse
    5166:	bc d3       	rcall	.+1912   	; 0x58e0 <hsync_pulse>

		WAIT r18,HSYNC_USABLE_CYCLES - AUDIO_OUT_HSYNC_CYCLES
    5168:	24 e0       	ldi	r18, 0x04	; 4
    516a:	2a 95       	dec	r18
    516c:	f1 f7       	brne	.-4      	; 0x516a <next_tile_line+0x4>
    516e:	00 00       	nop
				
		call render_tile_line
    5170:	0e 94 f9 28 	call	0x51f2	; 0x51f2 <render_tile_line>

		WAIT r18,58
    5174:	23 e1       	ldi	r18, 0x13	; 19
    5176:	2a 95       	dec	r18
    5178:	f1 f7       	brne	.-4      	; 0x5176 <next_tile_line+0x10>
    517a:	00 00       	nop

		inc r22
    517c:	63 95       	inc	r22
		dec r8
    517e:	8a 94       	dec	r8
		breq text_frame_end
    5180:	09 f1       	breq	.+66     	; 0x51c4 <text_frame_end>

		cpi r22,TILE_HEIGHT ;last char line? 1
    5182:	68 30       	cpi	r22, 0x08	; 8
		breq next_tile_row
    5184:	29 f0       	breq	.+10     	; 0x5190 <next_tile_row>

		;wait to align with next_tile_row instructions (+1 cycle for the breq)
		WAIT r16,25
    5186:	08 e0       	ldi	r16, 0x08	; 8
    5188:	0a 95       	dec	r16
    518a:	f1 f7       	brne	.-4      	; 0x5188 <next_tile_line+0x22>
    518c:	00 00       	nop
		rjmp next_tile_line
    518e:	eb cf       	rjmp	.-42     	; 0x5166 <next_tile_line>

00005190 <next_tile_row>:

	next_tile_row:

		clr r22		;clear current char line
    5190:	66 27       	eor	r22, r22

		;increment vram pointer next row
		mov r16,YL
    5192:	0c 2f       	mov	r16, r28
		andi r16,0x7
    5194:	07 70       	andi	r16, 0x07	; 7
		cpi r16,7
    5196:	07 30       	cpi	r16, 0x07	; 7
		breq 1f
    5198:	11 f0       	breq	.+4      	; 0x519e <next_tile_row+0xe>
		inc YL
    519a:	c3 95       	inc	r28
		rjmp 2f
    519c:	02 c0       	rjmp	.+4      	; 0x51a2 <next_tile_row+0x12>
	1:
		andi YL,0xf8
    519e:	c8 7f       	andi	r28, 0xF8	; 248
		inc YH
    51a0:	d3 95       	inc	r29
	2:

		dec r24		;wrap section?
    51a2:	8a 95       	dec	r24
		brne .+2
    51a4:	09 f4       	brne	.+2      	; 0x51a8 <next_tile_row+0x18>
		movw YL,r12
    51a6:	e6 01       	movw	r28, r12

		dec r19
    51a8:	3a 95       	dec	r19
		brne .+2
    51aa:	09 f4       	brne	.+2      	; 0x51ae <next_tile_row+0x1e>
		mov r22,r23	;section tile row
    51ac:	67 2f       	mov	r22, r23
		brne .+2
    51ae:	09 f4       	brne	.+2      	; 0x51b2 <next_tile_row+0x22>
		movw YL,r10 ;vram adress
    51b0:	e5 01       	movw	r28, r10
		brne .+2
    51b2:	09 f4       	brne	.+2      	; 0x51b6 <next_tile_row+0x26>
		mov r24,r15 ;Y wrapping
    51b4:	8f 2d       	mov	r24, r15
		brne .+2
    51b6:	09 f4       	brne	.+2      	; 0x51ba <next_tile_row+0x2a>
		mov r9,r25  ;scrollX
    51b8:	99 2e       	mov	r9, r25

		brne .+2
    51ba:	09 f4       	brne	.+2      	; 0x51be <next_tile_row+0x2e>
		out _SFR_IO_ADDR(GPIOR1),r6  ;tileset
    51bc:	6a bc       	out	0x2a, r6	; 42
		brne .+2
    51be:	09 f4       	brne	.+2      	; 0x51c2 <next_tile_row+0x32>
		out _SFR_IO_ADDR(GPIOR2),r7  ;tilset
    51c0:	7b bc       	out	0x2b, r7	; 43

		rjmp next_tile_line
    51c2:	d1 cf       	rjmp	.-94     	; 0x5166 <next_tile_line>

000051c4 <text_frame_end>:

	text_frame_end:

		WAIT r18,28
    51c4:	29 e0       	ldi	r18, 0x09	; 9
    51c6:	2a 95       	dec	r18
    51c8:	f1 f7       	brne	.-4      	; 0x51c6 <text_frame_end+0x2>
    51ca:	00 00       	nop

		rcall hsync_pulse ;145
    51cc:	89 d3       	rcall	.+1810   	; 0x58e0 <hsync_pulse>
	
		clr r1
    51ce:	11 24       	eor	r1, r1
		call RestoreBackground
    51d0:	0e 94 00 39 	call	0x7200	; 0x7200 <RestoreBackground>

		;set vsync flag & flip field
		lds ZL,sync_flags
    51d4:	e0 91 a2 08 	lds	r30, 0x08A2
		ldi r20,SYNC_FLAG_FIELD
    51d8:	42 e0       	ldi	r20, 0x02	; 2
		ori ZL,SYNC_FLAG_VSYNC
    51da:	e1 60       	ori	r30, 0x01	; 1
		eor ZL,r20
    51dc:	e4 27       	eor	r30, r20
		sts sync_flags,ZL
    51de:	e0 93 a2 08 	sts	0x08A2, r30
	
		cli 
    51e2:	f8 94       	cli

		;re-activate sync timer interrupts
		ldi ZL,(1<<OCIE1A)
    51e4:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIMSK1),ZL
    51e6:	e0 93 6f 00 	sts	0x006F, r30
			
		;clear any pending timer int
		ldi ZL,(1<<OCF1A)
    51ea:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIFR1),ZL
    51ec:	e0 93 36 00 	sts	0x0036, r30

		ret
    51f0:	08 95       	ret

000051f2 <render_tile_line>:
	; Can destroy: r0,r1,r2,r3,r4,r5,r6,r7,r13,r16,r17,r18,r19,r20,r21,Z
	; 
	; cycles  = 1495
	;*************************************************
	render_tile_line:
		push YL
    51f2:	cf 93       	push	r28
		push YH
    51f4:	df 93       	push	r29
		push r23
    51f6:	7f 93       	push	r23
		push r22
    51f8:	6f 93       	push	r22
		push r19
    51fa:	3f 93       	push	r19
		push r13
    51fc:	df 92       	push	r13
		push r12
    51fe:	cf 92       	push	r12
		push r9
    5200:	9f 92       	push	r9
		push r7
    5202:	7f 92       	push	r7
		push r6
    5204:	6f 92       	push	r6
		;--------------------------
		; Rendering 
		;---------------------------

		;get tile row offset
		ldi r23,TILE_WIDTH ;tile width in pixels
    5206:	78 e0       	ldi	r23, 0x08	; 8
		mul r22,r23
    5208:	67 9f       	mul	r22, r23

		;compute base adresses for ROM and RAM tiles
		in r16,_SFR_IO_ADDR(GPIOR1) ;tile_table_lo
    520a:	0a b5       	in	r16, 0x2a	; 42
		in r17,_SFR_IO_ADDR(GPIOR2) ;tile_table_hi
    520c:	1b b5       	in	r17, 0x2b	; 43
		subi r16,lo8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    520e:	00 50       	subi	r16, 0x00	; 0
		sbci r17,hi8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    5210:	17 40       	sbci	r17, 0x07	; 7

		add r16,r0
    5212:	00 0d       	add	r16, r0
		adc r17,r1
    5214:	11 1d       	adc	r17, r1
		movw r2,r16			;rom tiles adress
    5216:	18 01       	movw	r2, r16

		ldi r16,lo8(ram_tiles)
    5218:	0a e3       	ldi	r16, 0x3A	; 58
		ldi r17,hi8(ram_tiles)
    521a:	11 e0       	ldi	r17, 0x01	; 1
		add r16,r0
    521c:	00 0d       	add	r16, r0
		adc r17,r1
    521e:	11 1d       	adc	r17, r1
		movw r4,r16			;ram tiles adress
    5220:	28 01       	movw	r4, r16

		ldi r19,TILE_HEIGHT*TILE_WIDTH
    5222:	30 e4       	ldi	r19, 0x40	; 64
		ldi r17,SCREEN_TILES_H-1	;main loop counter
    5224:	1b e1       	ldi	r17, 0x1B	; 27


		;handle fine scroll offset
		;lds r22,screenSections+scrollX
		mov r22,r9
    5226:	69 2d       	mov	r22, r9
		andi r22,0x7		
    5228:	67 70       	andi	r22, 0x07	; 7
		mov r14,r22	;pixels to draw on last tile	
    522a:	e6 2e       	mov	r14, r22
		cli			;no trailing pixel to draw (hack, see end: )
    522c:	f8 94       	cli
		breq .+2
    522e:	09 f0       	breq	.+2      	; 0x5232 <render_tile_line+0x40>
		sei			;some trailing pixel to draw (hack, see end: )
    5230:	78 94       	sei

		;get first pixel of last tile in ROM (for ROM tiles fine scroll)
		;and adress of next pixel
		movw ZL,YL
    5232:	fe 01       	movw	r30, r28
		subi ZL,-(SCREEN_TILES_H*8)
    5234:	e0 52       	subi	r30, 0x20	; 32
		ld r18,Z
    5236:	20 81       	ld	r18, Z
		mul r18,r19 	;tile*width*height
    5238:	23 9f       	mul	r18, r19
	    add r0,r2    ;add ROM title table address +row offset
    523a:	02 0c       	add	r0, r2
	    adc r1,r3
    523c:	13 1c       	adc	r1, r3
		movw ZL,r0
    523e:	f0 01       	movw	r30, r0
		lpm r9,Z+	;hold first pixel until end 
    5240:	95 90       	lpm	r9, Z+
		movw r12,ZL ;hold second pixel adress until end
    5242:	6f 01       	movw	r12, r30


		;compute first tile adress
	    ld r18,Y     	;load next tile # from VRAM
    5244:	28 81       	ld	r18, Y
		subi YL,-8
    5246:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT
    5248:	2c 31       	cpi	r18, 0x1C	; 28
		in r16,_SFR_IO_ADDR(SREG)	;save the carry flag for later	
    524a:	0f b7       	in	r16, 0x3f	; 63
		mul r18,r19 	;tile*width*height
    524c:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles	
    524e:	a1 01       	movw	r20, r2
		sbrc r16,SREG_C
    5250:	00 fd       	sbrc	r16, 0
		movw r20,r4		;ram tiles
    5252:	a2 01       	movw	r20, r4
	    add r0,r20    ;add title table address +row offset
    5254:	04 0e       	add	r0, r20
	    adc r1,r21
    5256:	15 1e       	adc	r1, r21
		movw XL,r0
    5258:	d0 01       	movw	r26, r0


		;compute second tile adress
	    ld r18,Y     	;load next tile # from VRAM
    525a:	28 81       	ld	r18, Y
		subi YL,-8
    525c:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT
    525e:	2c 31       	cpi	r18, 0x1C	; 28
		in r7,_SFR_IO_ADDR(SREG)	;save the carry flag for later
    5260:	7f b6       	in	r7, 0x3f	; 63
		bst r7,SREG_C
    5262:	70 fa       	bst	r7, 0
		mul r18,r19 	;tile*width*height
    5264:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles
    5266:	a1 01       	movw	r20, r2
		brtc .+2
    5268:	0e f4       	brtc	.+2      	; 0x526c <render_tile_line+0x7a>
		movw r20,r4		;ram tiles
    526a:	a2 01       	movw	r20, r4
	    add r0,r20      ;add title table address +row offset
    526c:	04 0e       	add	r0, r20
	    adc r1,r21
    526e:	15 1e       	adc	r1, r21
		movw ZL,r0
    5270:	f0 01       	movw	r30, r0
		movw r6,ZL		;push Z
    5272:	3f 01       	movw	r6, r30

00005274 <do_fine_scroll>:


	do_fine_scroll:
		;output 1st tile with fine scroll offset 
		clr r0
    5274:	00 24       	eor	r0, r0
		add XL,r22	;add fine offset
    5276:	a6 0f       	add	r26, r22
		adc XH,r0
    5278:	b0 1d       	adc	r27, r0

		;compute jump offset
		ldi r23,3
    527a:	73 e0       	ldi	r23, 0x03	; 3
		mul r22,r23 ;3 instructions
    527c:	67 9f       	mul	r22, r23
	
		sbrs r16,SREG_C
    527e:	00 ff       	sbrs	r16, 0
		rjmp rom_fine_scroll
    5280:	22 c0       	rjmp	.+68     	; 0x52c6 <rom_fine_scroll>

00005282 <ram_fine_scroll>:

	/***FINE SCROLL RAM LOOP***/
	ram_fine_scroll:
		rjmp .
    5282:	00 c0       	rjmp	.+0      	; 0x5284 <ram_fine_scroll+0x2>
		ldi r22,lo8(pm(ram_fine_scroll_loop))
    5284:	69 e4       	ldi	r22, 0x49	; 73
		ldi r23,hi8(pm(ram_fine_scroll_loop))
    5286:	79 e2       	ldi	r23, 0x29	; 41
		add r22,r0
    5288:	60 0d       	add	r22, r0
		adc r23,r1
    528a:	71 1d       	adc	r23, r1
		push r22
    528c:	6f 93       	push	r22
		push r23	
    528e:	7f 93       	push	r23
		ret ;jump into ram_fine_scroll_loop
    5290:	08 95       	ret

00005292 <ram_fine_scroll_loop>:
	ram_fine_scroll_loop:
		.rept 8
			ld r16,X+
			lpm
			out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		.endr
    5292:	0d 91       	ld	r16, X+
    5294:	c8 95       	lpm
    5296:	08 b9       	out	0x08, r16	; 8
    5298:	0d 91       	ld	r16, X+
    529a:	c8 95       	lpm
    529c:	08 b9       	out	0x08, r16	; 8
    529e:	0d 91       	ld	r16, X+
    52a0:	c8 95       	lpm
    52a2:	08 b9       	out	0x08, r16	; 8
    52a4:	0d 91       	ld	r16, X+
    52a6:	c8 95       	lpm
    52a8:	08 b9       	out	0x08, r16	; 8
    52aa:	0d 91       	ld	r16, X+
    52ac:	c8 95       	lpm
    52ae:	08 b9       	out	0x08, r16	; 8
    52b0:	0d 91       	ld	r16, X+
    52b2:	c8 95       	lpm
    52b4:	08 b9       	out	0x08, r16	; 8
    52b6:	0d 91       	ld	r16, X+
    52b8:	c8 95       	lpm
    52ba:	08 b9       	out	0x08, r16	; 8
    52bc:	0d 91       	ld	r16, X+
    52be:	c8 95       	lpm
    52c0:	08 b9       	out	0x08, r16	; 8

		;branch to tile #2
		brtc romloop
    52c2:	1e f5       	brtc	.+70     	; 0x530a <romloop>
		rjmp ramloop
    52c4:	40 c0       	rjmp	.+128    	; 0x5346 <ramloop>

000052c6 <rom_fine_scroll>:

	/***FINE SCROLL ROM LOOP***/
	rom_fine_scroll:
		movw ZL,XL
    52c6:	fd 01       	movw	r30, r26
		ldi r22,lo8(pm(rom_fine_scroll_loop))	
    52c8:	6b e6       	ldi	r22, 0x6B	; 107
		ldi r23,hi8(pm(rom_fine_scroll_loop))
    52ca:	79 e2       	ldi	r23, 0x29	; 41
		add r22,r0
    52cc:	60 0d       	add	r22, r0
		adc r23,r1
    52ce:	71 1d       	adc	r23, r1
		push r22
    52d0:	6f 93       	push	r22
		push r23	
    52d2:	7f 93       	push	r23
		ret
    52d4:	08 95       	ret

000052d6 <rom_fine_scroll_loop>:
	rom_fine_scroll_loop:
		.rept 8
			lpm r16,Z+
			rjmp .
			out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		.endr 
    52d6:	05 91       	lpm	r16, Z+
    52d8:	00 c0       	rjmp	.+0      	; 0x52da <rom_fine_scroll_loop+0x4>
    52da:	08 b9       	out	0x08, r16	; 8
    52dc:	05 91       	lpm	r16, Z+
    52de:	00 c0       	rjmp	.+0      	; 0x52e0 <rom_fine_scroll_loop+0xa>
    52e0:	08 b9       	out	0x08, r16	; 8
    52e2:	05 91       	lpm	r16, Z+
    52e4:	00 c0       	rjmp	.+0      	; 0x52e6 <rom_fine_scroll_loop+0x10>
    52e6:	08 b9       	out	0x08, r16	; 8
    52e8:	05 91       	lpm	r16, Z+
    52ea:	00 c0       	rjmp	.+0      	; 0x52ec <rom_fine_scroll_loop+0x16>
    52ec:	08 b9       	out	0x08, r16	; 8
    52ee:	05 91       	lpm	r16, Z+
    52f0:	00 c0       	rjmp	.+0      	; 0x52f2 <rom_fine_scroll_loop+0x1c>
    52f2:	08 b9       	out	0x08, r16	; 8
    52f4:	05 91       	lpm	r16, Z+
    52f6:	00 c0       	rjmp	.+0      	; 0x52f8 <rom_fine_scroll_loop+0x22>
    52f8:	08 b9       	out	0x08, r16	; 8
    52fa:	05 91       	lpm	r16, Z+
    52fc:	00 c0       	rjmp	.+0      	; 0x52fe <rom_fine_scroll_loop+0x28>
    52fe:	08 b9       	out	0x08, r16	; 8
    5300:	05 91       	lpm	r16, Z+
    5302:	00 c0       	rjmp	.+0      	; 0x5304 <rom_fine_scroll_loop+0x2e>
    5304:	08 b9       	out	0x08, r16	; 8
	
		movw ZL,r6		;restore Z for tile #2
    5306:	f3 01       	movw	r30, r6

		;branch to tile #2
		brts ramloop
    5308:	f6 f0       	brts	.+60     	; 0x5346 <ramloop>

0000530a <romloop>:

	
	romloop:
	    lpm r16,Z+
    530a:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    530c:	08 b9       	out	0x08, r16	; 8
	    ld r18,Y     ;load next tile # from VRAM
    530e:	28 81       	ld	r18, Y

	    lpm r16,Z+
    5310:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 2
    5312:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    5314:	23 9f       	mul	r18, r19

	    lpm r16,Z+
    5316:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 3
    5318:	08 b9       	out	0x08, r16	; 8
		subi YL,-8
    531a:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT		;is tile in RAM or ROM? (RAM tiles have indexes<RAM_TILES_COUNT)
    531c:	2c 31       	cpi	r18, 0x1C	; 28
		
	    lpm r16,Z+
    531e:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    5320:	08 b9       	out	0x08, r16	; 8
		brsh .+2		;skip if next tile is in ROM	
    5322:	08 f4       	brcc	.+2      	; 0x5326 <romloop+0x1c>
		movw r20,r4 	;load RAM title table address +row offset	
    5324:	a2 01       	movw	r20, r4
   
	    lpm r16,Z+
    5326:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 5
    5328:	08 b9       	out	0x08, r16	; 8
		add r0,r20		;add tile table address +row offset lsb
    532a:	04 0e       	add	r0, r20
	    adc r1,r21		;add title table address +row offset msb
    532c:	15 1e       	adc	r1, r21

	    lpm r16,Z+
    532e:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 6
    5330:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT	
    5332:	2c 31       	cpi	r18, 0x1C	; 28
		dec r17			;decrement tiles to draw on line (does not affect carry)
    5334:	1a 95       	dec	r17
   
	    lpm r16,Z+
    5336:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 7   
    5338:	08 b9       	out	0x08, r16	; 8
	    lpm r16,Z+
    533a:	05 91       	lpm	r16, Z+

		breq end	
    533c:	39 f1       	breq	.+78     	; 0x538c <end>
	    movw ZL,r0   	;copy next tile adress
    533e:	f0 01       	movw	r30, r0

	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    5340:	08 b9       	out	0x08, r16	; 8
	    brcc romloop
    5342:	18 f7       	brcc	.-58     	; 0x530a <romloop>
	
		rjmp .
    5344:	00 c0       	rjmp	.+0      	; 0x5346 <ramloop>

00005346 <ramloop>:

	ramloop:

	    ld r16,Z+
    5346:	01 91       	ld	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    5348:	08 b9       	out	0x08, r16	; 8
	    ld r18,Y     ;load next tile # from VRAM
    534a:	28 81       	ld	r18, Y

	    ld r16,Z+ 
    534c:	01 91       	ld	r16, Z+
		subi YL,-8   		
    534e:	c8 5f       	subi	r28, 0xF8	; 248
		out _SFR_IO_ADDR(DATA_PORT),r16 		;pixel 2
    5350:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    5352:	23 9f       	mul	r18, r19

	    ld r16,Z+
    5354:	01 91       	ld	r16, Z+
		nop
    5356:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16         ;pixel 3
    5358:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    535a:	2c 31       	cpi	r18, 0x1C	; 28
		rjmp .
    535c:	00 c0       	rjmp	.+0      	; 0x535e <ramloop+0x18>
   
	    ld r16,Z+
    535e:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    5360:	08 b9       	out	0x08, r16	; 8
		brcs .+2 
    5362:	08 f0       	brcs	.+2      	; 0x5366 <ramloop+0x20>
		movw r20,r2 	;ROM title table address +row offset	
    5364:	a1 01       	movw	r20, r2
   
   
	    ld r16,Z+
    5366:	01 91       	ld	r16, Z+
	    add r0,r20    ;add title table address +row offset
    5368:	04 0e       	add	r0, r20
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 5
    536a:	08 b9       	out	0x08, r16	; 8
	    adc r1,r21
    536c:	15 1e       	adc	r1, r21
		rjmp .
    536e:	00 c0       	rjmp	.+0      	; 0x5370 <ramloop+0x2a>
    
		ld r16,Z+		
    5370:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 6
    5372:	08 b9       	out	0x08, r16	; 8
		ld r7,Z+
    5374:	71 90       	ld	r7, Z+
	    ld r16,Z+	
    5376:	01 91       	ld	r16, Z+
	
		movw ZL,r0
    5378:	f0 01       	movw	r30, r0
		out _SFR_IO_ADDR(DATA_PORT),r7      ;pixel 7   
    537a:	78 b8       	out	0x08, r7	; 8
		nop
    537c:	00 00       	nop
		cpi r18,RAM_TILES_COUNT	
    537e:	2c 31       	cpi	r18, 0x1C	; 28
	    dec r17
    5380:	1a 95       	dec	r17
	    breq end
    5382:	21 f0       	breq	.+8      	; 0x538c <end>
	
		nop
    5384:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    5386:	08 b9       	out	0x08, r16	; 8
	
	    brcc romloop
    5388:	00 f6       	brcc	.-128    	; 0x530a <romloop>
		rjmp ramloop
    538a:	dd cf       	rjmp	.-70     	; 0x5346 <ramloop>

0000538c <end>:
	
	end:
		out _SFR_IO_ADDR(DATA_PORT),r16  	;pixel 8
    538c:	08 b9       	out	0x08, r16	; 8
		brid end_fine_scroll				;hack: interrupt flag=0 => no fine offset pixel to draw
    538e:	27 f5       	brid	.+72     	; 0x53d8 <end_fine_scroll>
		brcc end_rom_fine_scroll_loop
    5390:	30 f4       	brcc	.+12     	; 0x539e <end_rom_fine_scroll_loop>

	/***END RAM LOOP***/
		movw ZL,r0
    5392:	f0 01       	movw	r30, r0

00005394 <end_ram_fine_scroll_loop>:
	end_ram_fine_scroll_loop:
		ld r16,Z+
    5394:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
    5396:	08 b9       	out	0x08, r16	; 8
		dec r14
    5398:	ea 94       	dec	r14
		brne end_ram_fine_scroll_loop
    539a:	e1 f7       	brne	.-8      	; 0x5394 <end_ram_fine_scroll_loop>
		rjmp end_fine_scroll_ram
    539c:	1f c0       	rjmp	.+62     	; 0x53dc <end_fine_scroll_ram>

0000539e <end_rom_fine_scroll_loop>:

	/***END ROM LOOP***/
	end_rom_fine_scroll_loop:
		movw ZL,r12
    539e:	f6 01       	movw	r30, r12
		nop
    53a0:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r9        ;output saved 1st pixel
    53a2:	98 b8       	out	0x08, r9	; 8
		dec r14
    53a4:	ea 94       	dec	r14
		breq end_fine_scroll_rom
    53a6:	c9 f0       	breq	.+50     	; 0x53da <end_fine_scroll_rom>
	.rept 6
		lpm r16,Z+		
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		dec r14
		breq end_fine_scroll_rom
	.endr
    53a8:	05 91       	lpm	r16, Z+
    53aa:	08 b9       	out	0x08, r16	; 8
    53ac:	ea 94       	dec	r14
    53ae:	a9 f0       	breq	.+42     	; 0x53da <end_fine_scroll_rom>
    53b0:	05 91       	lpm	r16, Z+
    53b2:	08 b9       	out	0x08, r16	; 8
    53b4:	ea 94       	dec	r14
    53b6:	89 f0       	breq	.+34     	; 0x53da <end_fine_scroll_rom>
    53b8:	05 91       	lpm	r16, Z+
    53ba:	08 b9       	out	0x08, r16	; 8
    53bc:	ea 94       	dec	r14
    53be:	69 f0       	breq	.+26     	; 0x53da <end_fine_scroll_rom>
    53c0:	05 91       	lpm	r16, Z+
    53c2:	08 b9       	out	0x08, r16	; 8
    53c4:	ea 94       	dec	r14
    53c6:	49 f0       	breq	.+18     	; 0x53da <end_fine_scroll_rom>
    53c8:	05 91       	lpm	r16, Z+
    53ca:	08 b9       	out	0x08, r16	; 8
    53cc:	ea 94       	dec	r14
    53ce:	29 f0       	breq	.+10     	; 0x53da <end_fine_scroll_rom>
    53d0:	05 91       	lpm	r16, Z+
    53d2:	08 b9       	out	0x08, r16	; 8
    53d4:	ea 94       	dec	r14
    53d6:	09 f0       	breq	.+2      	; 0x53da <end_fine_scroll_rom>

000053d8 <end_fine_scroll>:
	...

000053da <end_fine_scroll_rom>:
	...

000053dc <end_fine_scroll_ram>:
	end_fine_scroll:	
		nop
	end_fine_scroll_rom:
		nop
	end_fine_scroll_ram:
		clr r16	
    53dc:	00 27       	eor	r16, r16
		out _SFR_IO_ADDR(DATA_PORT),r16   
    53de:	08 b9       	out	0x08, r16	; 8

		pop r6
    53e0:	6f 90       	pop	r6
		pop r7
    53e2:	7f 90       	pop	r7
		pop r9
    53e4:	9f 90       	pop	r9
		pop r12
    53e6:	cf 90       	pop	r12
		pop r13
    53e8:	df 90       	pop	r13
		pop r19
    53ea:	3f 91       	pop	r19
		pop r22
    53ec:	6f 91       	pop	r22
		pop r23
    53ee:	7f 91       	pop	r23
		pop YH
    53f0:	df 91       	pop	r29
		pop YL
    53f2:	cf 91       	pop	r28

		ret
    53f4:	08 95       	ret

000053f6 <CopyFlashTile>:
; C-callable
; r24=Source ROM tile index
; r22=Dest RAM tile index
;************************************
CopyFlashTile:
	ldi r18,TILE_HEIGHT*TILE_WIDTH
    53f6:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	lds ZL,tile_table_lo
    53f8:	e0 91 96 08 	lds	r30, 0x0896
	lds ZH,tile_table_hi
    53fc:	f0 91 97 08 	lds	r31, 0x0897
	mul r24,r18
    5400:	82 9f       	mul	r24, r18
	add ZL,r0
    5402:	e0 0d       	add	r30, r0
	adc ZH,r1
    5404:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    5406:	aa e3       	ldi	r26, 0x3A	; 58
	ldi XH,hi8(ram_tiles)
    5408:	b1 e0       	ldi	r27, 0x01	; 1
	mul r22,r18
    540a:	62 9f       	mul	r22, r18
	add XL,r0
    540c:	a0 0d       	add	r26, r0
	adc XH,r1
    540e:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	lpm r1,Z+
	st X+,r1
.endr
    5410:	15 90       	lpm	r1, Z+
    5412:	1d 92       	st	X+, r1
    5414:	15 90       	lpm	r1, Z+
    5416:	1d 92       	st	X+, r1
    5418:	15 90       	lpm	r1, Z+
    541a:	1d 92       	st	X+, r1
    541c:	15 90       	lpm	r1, Z+
    541e:	1d 92       	st	X+, r1
    5420:	15 90       	lpm	r1, Z+
    5422:	1d 92       	st	X+, r1
    5424:	15 90       	lpm	r1, Z+
    5426:	1d 92       	st	X+, r1
    5428:	15 90       	lpm	r1, Z+
    542a:	1d 92       	st	X+, r1
    542c:	15 90       	lpm	r1, Z+
    542e:	1d 92       	st	X+, r1
    5430:	15 90       	lpm	r1, Z+
    5432:	1d 92       	st	X+, r1
    5434:	15 90       	lpm	r1, Z+
    5436:	1d 92       	st	X+, r1
    5438:	15 90       	lpm	r1, Z+
    543a:	1d 92       	st	X+, r1
    543c:	15 90       	lpm	r1, Z+
    543e:	1d 92       	st	X+, r1
    5440:	15 90       	lpm	r1, Z+
    5442:	1d 92       	st	X+, r1
    5444:	15 90       	lpm	r1, Z+
    5446:	1d 92       	st	X+, r1
    5448:	15 90       	lpm	r1, Z+
    544a:	1d 92       	st	X+, r1
    544c:	15 90       	lpm	r1, Z+
    544e:	1d 92       	st	X+, r1
    5450:	15 90       	lpm	r1, Z+
    5452:	1d 92       	st	X+, r1
    5454:	15 90       	lpm	r1, Z+
    5456:	1d 92       	st	X+, r1
    5458:	15 90       	lpm	r1, Z+
    545a:	1d 92       	st	X+, r1
    545c:	15 90       	lpm	r1, Z+
    545e:	1d 92       	st	X+, r1
    5460:	15 90       	lpm	r1, Z+
    5462:	1d 92       	st	X+, r1
    5464:	15 90       	lpm	r1, Z+
    5466:	1d 92       	st	X+, r1
    5468:	15 90       	lpm	r1, Z+
    546a:	1d 92       	st	X+, r1
    546c:	15 90       	lpm	r1, Z+
    546e:	1d 92       	st	X+, r1
    5470:	15 90       	lpm	r1, Z+
    5472:	1d 92       	st	X+, r1
    5474:	15 90       	lpm	r1, Z+
    5476:	1d 92       	st	X+, r1
    5478:	15 90       	lpm	r1, Z+
    547a:	1d 92       	st	X+, r1
    547c:	15 90       	lpm	r1, Z+
    547e:	1d 92       	st	X+, r1
    5480:	15 90       	lpm	r1, Z+
    5482:	1d 92       	st	X+, r1
    5484:	15 90       	lpm	r1, Z+
    5486:	1d 92       	st	X+, r1
    5488:	15 90       	lpm	r1, Z+
    548a:	1d 92       	st	X+, r1
    548c:	15 90       	lpm	r1, Z+
    548e:	1d 92       	st	X+, r1
    5490:	15 90       	lpm	r1, Z+
    5492:	1d 92       	st	X+, r1
    5494:	15 90       	lpm	r1, Z+
    5496:	1d 92       	st	X+, r1
    5498:	15 90       	lpm	r1, Z+
    549a:	1d 92       	st	X+, r1
    549c:	15 90       	lpm	r1, Z+
    549e:	1d 92       	st	X+, r1
    54a0:	15 90       	lpm	r1, Z+
    54a2:	1d 92       	st	X+, r1
    54a4:	15 90       	lpm	r1, Z+
    54a6:	1d 92       	st	X+, r1
    54a8:	15 90       	lpm	r1, Z+
    54aa:	1d 92       	st	X+, r1
    54ac:	15 90       	lpm	r1, Z+
    54ae:	1d 92       	st	X+, r1
    54b0:	15 90       	lpm	r1, Z+
    54b2:	1d 92       	st	X+, r1
    54b4:	15 90       	lpm	r1, Z+
    54b6:	1d 92       	st	X+, r1
    54b8:	15 90       	lpm	r1, Z+
    54ba:	1d 92       	st	X+, r1
    54bc:	15 90       	lpm	r1, Z+
    54be:	1d 92       	st	X+, r1
    54c0:	15 90       	lpm	r1, Z+
    54c2:	1d 92       	st	X+, r1
    54c4:	15 90       	lpm	r1, Z+
    54c6:	1d 92       	st	X+, r1
    54c8:	15 90       	lpm	r1, Z+
    54ca:	1d 92       	st	X+, r1
    54cc:	15 90       	lpm	r1, Z+
    54ce:	1d 92       	st	X+, r1
    54d0:	15 90       	lpm	r1, Z+
    54d2:	1d 92       	st	X+, r1
    54d4:	15 90       	lpm	r1, Z+
    54d6:	1d 92       	st	X+, r1
    54d8:	15 90       	lpm	r1, Z+
    54da:	1d 92       	st	X+, r1
    54dc:	15 90       	lpm	r1, Z+
    54de:	1d 92       	st	X+, r1
    54e0:	15 90       	lpm	r1, Z+
    54e2:	1d 92       	st	X+, r1
    54e4:	15 90       	lpm	r1, Z+
    54e6:	1d 92       	st	X+, r1
    54e8:	15 90       	lpm	r1, Z+
    54ea:	1d 92       	st	X+, r1
    54ec:	15 90       	lpm	r1, Z+
    54ee:	1d 92       	st	X+, r1
    54f0:	15 90       	lpm	r1, Z+
    54f2:	1d 92       	st	X+, r1
    54f4:	15 90       	lpm	r1, Z+
    54f6:	1d 92       	st	X+, r1
    54f8:	15 90       	lpm	r1, Z+
    54fa:	1d 92       	st	X+, r1
    54fc:	15 90       	lpm	r1, Z+
    54fe:	1d 92       	st	X+, r1
    5500:	15 90       	lpm	r1, Z+
    5502:	1d 92       	st	X+, r1
    5504:	15 90       	lpm	r1, Z+
    5506:	1d 92       	st	X+, r1
    5508:	15 90       	lpm	r1, Z+
    550a:	1d 92       	st	X+, r1
    550c:	15 90       	lpm	r1, Z+
    550e:	1d 92       	st	X+, r1
	clr r1
    5510:	11 24       	eor	r1, r1
	ret
    5512:	08 95       	ret

00005514 <CopyRamTile>:
; r24=Source RAM tile index
; r22=Dest RAM tile index
;************************************
CopyRamTile:

	ldi r18,TILE_HEIGHT*TILE_WIDTH
    5514:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	ldi ZL,lo8(ram_tiles)
    5516:	ea e3       	ldi	r30, 0x3A	; 58
	ldi ZH,hi8(ram_tiles)
    5518:	f1 e0       	ldi	r31, 0x01	; 1
	mul r24,r18
    551a:	82 9f       	mul	r24, r18
	add ZL,r0
    551c:	e0 0d       	add	r30, r0
	adc ZH,r1
    551e:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    5520:	aa e3       	ldi	r26, 0x3A	; 58
	ldi XH,hi8(ram_tiles)
    5522:	b1 e0       	ldi	r27, 0x01	; 1
	mul r22,r18
    5524:	62 9f       	mul	r22, r18
	add XL,r0
    5526:	a0 0d       	add	r26, r0
	adc XH,r1
    5528:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	ld r1,Z+
	st X+,r1
.endr
    552a:	11 90       	ld	r1, Z+
    552c:	1d 92       	st	X+, r1
    552e:	11 90       	ld	r1, Z+
    5530:	1d 92       	st	X+, r1
    5532:	11 90       	ld	r1, Z+
    5534:	1d 92       	st	X+, r1
    5536:	11 90       	ld	r1, Z+
    5538:	1d 92       	st	X+, r1
    553a:	11 90       	ld	r1, Z+
    553c:	1d 92       	st	X+, r1
    553e:	11 90       	ld	r1, Z+
    5540:	1d 92       	st	X+, r1
    5542:	11 90       	ld	r1, Z+
    5544:	1d 92       	st	X+, r1
    5546:	11 90       	ld	r1, Z+
    5548:	1d 92       	st	X+, r1
    554a:	11 90       	ld	r1, Z+
    554c:	1d 92       	st	X+, r1
    554e:	11 90       	ld	r1, Z+
    5550:	1d 92       	st	X+, r1
    5552:	11 90       	ld	r1, Z+
    5554:	1d 92       	st	X+, r1
    5556:	11 90       	ld	r1, Z+
    5558:	1d 92       	st	X+, r1
    555a:	11 90       	ld	r1, Z+
    555c:	1d 92       	st	X+, r1
    555e:	11 90       	ld	r1, Z+
    5560:	1d 92       	st	X+, r1
    5562:	11 90       	ld	r1, Z+
    5564:	1d 92       	st	X+, r1
    5566:	11 90       	ld	r1, Z+
    5568:	1d 92       	st	X+, r1
    556a:	11 90       	ld	r1, Z+
    556c:	1d 92       	st	X+, r1
    556e:	11 90       	ld	r1, Z+
    5570:	1d 92       	st	X+, r1
    5572:	11 90       	ld	r1, Z+
    5574:	1d 92       	st	X+, r1
    5576:	11 90       	ld	r1, Z+
    5578:	1d 92       	st	X+, r1
    557a:	11 90       	ld	r1, Z+
    557c:	1d 92       	st	X+, r1
    557e:	11 90       	ld	r1, Z+
    5580:	1d 92       	st	X+, r1
    5582:	11 90       	ld	r1, Z+
    5584:	1d 92       	st	X+, r1
    5586:	11 90       	ld	r1, Z+
    5588:	1d 92       	st	X+, r1
    558a:	11 90       	ld	r1, Z+
    558c:	1d 92       	st	X+, r1
    558e:	11 90       	ld	r1, Z+
    5590:	1d 92       	st	X+, r1
    5592:	11 90       	ld	r1, Z+
    5594:	1d 92       	st	X+, r1
    5596:	11 90       	ld	r1, Z+
    5598:	1d 92       	st	X+, r1
    559a:	11 90       	ld	r1, Z+
    559c:	1d 92       	st	X+, r1
    559e:	11 90       	ld	r1, Z+
    55a0:	1d 92       	st	X+, r1
    55a2:	11 90       	ld	r1, Z+
    55a4:	1d 92       	st	X+, r1
    55a6:	11 90       	ld	r1, Z+
    55a8:	1d 92       	st	X+, r1
    55aa:	11 90       	ld	r1, Z+
    55ac:	1d 92       	st	X+, r1
    55ae:	11 90       	ld	r1, Z+
    55b0:	1d 92       	st	X+, r1
    55b2:	11 90       	ld	r1, Z+
    55b4:	1d 92       	st	X+, r1
    55b6:	11 90       	ld	r1, Z+
    55b8:	1d 92       	st	X+, r1
    55ba:	11 90       	ld	r1, Z+
    55bc:	1d 92       	st	X+, r1
    55be:	11 90       	ld	r1, Z+
    55c0:	1d 92       	st	X+, r1
    55c2:	11 90       	ld	r1, Z+
    55c4:	1d 92       	st	X+, r1
    55c6:	11 90       	ld	r1, Z+
    55c8:	1d 92       	st	X+, r1
    55ca:	11 90       	ld	r1, Z+
    55cc:	1d 92       	st	X+, r1
    55ce:	11 90       	ld	r1, Z+
    55d0:	1d 92       	st	X+, r1
    55d2:	11 90       	ld	r1, Z+
    55d4:	1d 92       	st	X+, r1
    55d6:	11 90       	ld	r1, Z+
    55d8:	1d 92       	st	X+, r1
    55da:	11 90       	ld	r1, Z+
    55dc:	1d 92       	st	X+, r1
    55de:	11 90       	ld	r1, Z+
    55e0:	1d 92       	st	X+, r1
    55e2:	11 90       	ld	r1, Z+
    55e4:	1d 92       	st	X+, r1
    55e6:	11 90       	ld	r1, Z+
    55e8:	1d 92       	st	X+, r1
    55ea:	11 90       	ld	r1, Z+
    55ec:	1d 92       	st	X+, r1
    55ee:	11 90       	ld	r1, Z+
    55f0:	1d 92       	st	X+, r1
    55f2:	11 90       	ld	r1, Z+
    55f4:	1d 92       	st	X+, r1
    55f6:	11 90       	ld	r1, Z+
    55f8:	1d 92       	st	X+, r1
    55fa:	11 90       	ld	r1, Z+
    55fc:	1d 92       	st	X+, r1
    55fe:	11 90       	ld	r1, Z+
    5600:	1d 92       	st	X+, r1
    5602:	11 90       	ld	r1, Z+
    5604:	1d 92       	st	X+, r1
    5606:	11 90       	ld	r1, Z+
    5608:	1d 92       	st	X+, r1
    560a:	11 90       	ld	r1, Z+
    560c:	1d 92       	st	X+, r1
    560e:	11 90       	ld	r1, Z+
    5610:	1d 92       	st	X+, r1
    5612:	11 90       	ld	r1, Z+
    5614:	1d 92       	st	X+, r1
    5616:	11 90       	ld	r1, Z+
    5618:	1d 92       	st	X+, r1
    561a:	11 90       	ld	r1, Z+
    561c:	1d 92       	st	X+, r1
    561e:	11 90       	ld	r1, Z+
    5620:	1d 92       	st	X+, r1
    5622:	11 90       	ld	r1, Z+
    5624:	1d 92       	st	X+, r1
    5626:	11 90       	ld	r1, Z+
    5628:	1d 92       	st	X+, r1
	clr r1
    562a:	11 24       	eor	r1, r1
	ret
    562c:	08 95       	ret

0000562e <BlitSprite>:
; r22=RAM tile index (bt)
; r21:r20=Y:X
; r19:r18=DY:DX
;************************************
BlitSprite:
	push r16
    562e:	0f 93       	push	r16
	push r17
    5630:	1f 93       	push	r17
	push YL
    5632:	cf 93       	push	r28
	push YH
    5634:	df 93       	push	r29

	;src=sprites_tiletable_lo+(sprites[i].tileIndex*TILE_HEIGHT*TILE_WIDTH)
	ldi r25,SPRITE_STRUCT_SIZE
    5636:	94 e0       	ldi	r25, 0x04	; 4
	mul r24,r25
    5638:	89 9f       	mul	r24, r25

	ldi ZL,lo8(sprites)	
    563a:	e2 e0       	ldi	r30, 0x02	; 2
	ldi ZH,hi8(sprites)	
    563c:	f1 e0       	ldi	r31, 0x01	; 1
	add ZL,r0
    563e:	e0 0d       	add	r30, r0
	adc ZH,r1
    5640:	f1 1d       	adc	r31, r1

	ldd r16,Z+sprFlags
    5642:	03 81       	ldd	r16, Z+3	; 0x03

	;8x16 multiply
	ldd r24,Z+sprTileIndex
    5644:	82 81       	ldd	r24, Z+2	; 0x02
	ldi r30,TILE_WIDTH*TILE_HEIGHT
    5646:	e0 e4       	ldi	r30, 0x40	; 64
	mul r24,r30
    5648:	8e 9f       	mul	r24, r30
	movw r26,r0
    564a:	d0 01       	movw	r26, r0
	
	;get tile bank addr
	ldi r25,4*2
    564c:	98 e0       	ldi	r25, 0x08	; 8
	mul r16,r25
    564e:	09 9f       	mul	r16, r25
	ldi YL,lo8(sprites_tile_banks)	
    5650:	ce e8       	ldi	r28, 0x8E	; 142
	ldi YH,hi8(sprites_tile_banks)	
    5652:	d8 e0       	ldi	r29, 0x08	; 8
	clr r0
    5654:	00 24       	eor	r0, r0
	add YL,r1
    5656:	c1 0d       	add	r28, r1
	adc YH,r0		
    5658:	d0 1d       	adc	r29, r0
	ldd ZL,Y+0
    565a:	e8 81       	ld	r30, Y
	ldd ZH,Y+1
    565c:	f9 81       	ldd	r31, Y+1	; 0x01
	add ZL,r26	;tile data src
    565e:	ea 0f       	add	r30, r26
	adc ZH,r27
    5660:	fb 1f       	adc	r31, r27
	
	;dest=ram_tiles+(bt*TILE_HEIGHT*TILE_WIDTH)
	ldi XL,lo8(ram_tiles)	
    5662:	aa e3       	ldi	r26, 0x3A	; 58
	ldi XH,hi8(ram_tiles)
    5664:	b1 e0       	ldi	r27, 0x01	; 1
	ldi r25,TILE_WIDTH*TILE_HEIGHT
    5666:	90 e4       	ldi	r25, 0x40	; 64
	mul r22,r25
    5668:	69 9f       	mul	r22, r25
	add XL,r0
    566a:	a0 0d       	add	r26, r0
	adc XH,r1
    566c:	b1 1d       	adc	r27, r1
			srcXdiff=destXdiff;
			src+=destXdiff;
		}
	}
	*/
	clr r1
    566e:	11 24       	eor	r1, r1
	clr YH		;hi8(srcXdiff)
    5670:	dd 27       	eor	r29, r29

	cpi r20,0	
    5672:	40 30       	cpi	r20, 0x00	; 0
	brne x_2nd_tile
    5674:	51 f4       	brne	.+20     	; 0x568a <x_2nd_tile>
	
	add XL,r18	;dest+=dx
    5676:	a2 0f       	add	r26, r18
	adc XH,r1
    5678:	b1 1d       	adc	r27, r1
	mov r24,r18	;destXdiff=dx
    567a:	82 2f       	mov	r24, r18
	mov YL,r18	;srcXdiff=dx
    567c:	c2 2f       	mov	r28, r18

	sbrs r16,SPRITE_FLIP_X_BIT
    567e:	00 ff       	sbrs	r16, 0
	rjmp x_check_end
    5680:	11 c0       	rjmp	.+34     	; 0x56a4 <x_check_end>

	adiw ZL,(TILE_WIDTH-1)	;src+=7
    5682:	37 96       	adiw	r30, 0x07	; 7
	ldi YL,TILE_WIDTH*2		;srcXdiff=((TILE_WIDTH*2)-dx);
    5684:	c0 e1       	ldi	r28, 0x10	; 16
	sub YL,r18	
    5686:	c2 1b       	sub	r28, r18
	rjmp x_check_end
    5688:	0d c0       	rjmp	.+26     	; 0x56a4 <x_check_end>

0000568a <x_2nd_tile>:

x_2nd_tile:
	ldi r24,TILE_WIDTH
    568a:	88 e0       	ldi	r24, 0x08	; 8
	sub r24,r18		;8-DX = xdiff for dest
    568c:	82 1b       	sub	r24, r18

	sbrc r16,SPRITE_FLIP_X_BIT
    568e:	00 fd       	sbrc	r16, 0
	rjmp x2_flip_x
    5690:	04 c0       	rjmp	.+8      	; 0x569a <x2_flip_x>

	mov YL,r24		;srcXdiff=destXdiff;
    5692:	c8 2f       	mov	r28, r24
	add ZL,r24		;src+=destXdiff;
    5694:	e8 0f       	add	r30, r24
	adc ZH,r1	
    5696:	f1 1d       	adc	r31, r1
	rjmp x_check_end
    5698:	05 c0       	rjmp	.+10     	; 0x56a4 <x_check_end>

0000569a <x2_flip_x>:

x2_flip_x:
	ldi YL,TILE_WIDTH
    569a:	c8 e0       	ldi	r28, 0x08	; 8
	add YL,r18		;srcXdiff=TILE_WIDTH+dx;	
    569c:	c2 0f       	add	r28, r18
	add ZL,r18		;src+=dx;
    569e:	e2 0f       	add	r30, r18
	adc ZH,r1
    56a0:	f1 1d       	adc	r31, r1
	sbiw ZL,1		;src--;
    56a2:	31 97       	sbiw	r30, 0x01	; 1

000056a4 <x_check_end>:
		}else{
			src+=(ydiff*TILE_WIDTH);
		}
	}
	*/
	cpi r21,0
    56a4:	50 30       	cpi	r21, 0x00	; 0
	brne y_2nd_tile
    56a6:	51 f4       	brne	.+20     	; 0x56bc <y_2nd_tile>

	ldi r25,TILE_WIDTH	;dest+=(dy*TILE_WIDTH)
    56a8:	98 e0       	ldi	r25, 0x08	; 8
	mul r25,r19			
    56aa:	93 9f       	mul	r25, r19
	add XL,r0
    56ac:	a0 0d       	add	r26, r0
	adc XH,r1
    56ae:	b1 1d       	adc	r27, r1

	mov r25,r19			;ydiff=dy
    56b0:	93 2f       	mov	r25, r19

	//sbrc r16,SPRITE_FLIP_Y_BIT
	//adiw ZL,(TILE_WIDTH*(TILE_HEIGHT-1))

	sbrc r16,SPRITE_FLIP_Y_BIT
    56b2:	01 fd       	sbrc	r16, 1
	subi ZL,lo8(-(TILE_WIDTH*(TILE_HEIGHT-1)));src+=(TILE_WIDTH*(TILE_HEIGHT-1));
    56b4:	e8 5c       	subi	r30, 0xC8	; 200
	sbrc r16,SPRITE_FLIP_Y_BIT
    56b6:	01 fd       	sbrc	r16, 1
	sbci ZH,hi8(-(TILE_WIDTH*(TILE_HEIGHT-1)))
    56b8:	ff 4f       	sbci	r31, 0xFF	; 255


	rjmp y_check_end
    56ba:	0a c0       	rjmp	.+20     	; 0x56d0 <y_check_end>

000056bc <y_2nd_tile>:

y_2nd_tile:
	ldi r25,TILE_HEIGHT	;ydiff=(TILE_HEIGHT-dy)
    56bc:	98 e0       	ldi	r25, 0x08	; 8
	sub r25,r19	
    56be:	93 1b       	sub	r25, r19
	
	mov r22,r19			;temp=dy-1
    56c0:	63 2f       	mov	r22, r19
	dec r22
    56c2:	6a 95       	dec	r22
	sbrs r16,SPRITE_FLIP_Y_BIT
    56c4:	01 ff       	sbrs	r16, 1
	mov r22,r25			;temp=ydiff
    56c6:	69 2f       	mov	r22, r25

	ldi r21,TILE_WIDTH	;src+=(temp*TILE_WIDTH);
    56c8:	58 e0       	ldi	r21, 0x08	; 8
	mul r21,r22
    56ca:	56 9f       	mul	r21, r22
	add ZL,r0
    56cc:	e0 0d       	add	r30, r0
	adc ZH,r1	
    56ce:	f1 1d       	adc	r31, r1

000056d0 <y_check_end>:
y_check_end:	
	
	//if(flags&SPRITE_FLIP_X){
	//	step=-1;
	//}
	ser r22		;step=-1
    56d0:	6f ef       	ldi	r22, 0xFF	; 255
	ser r23
    56d2:	7f ef       	ldi	r23, 0xFF	; 255
	sbrs r16,SPRITE_FLIP_X_BIT
    56d4:	00 ff       	sbrs	r16, 0
	ldi r22,1	;step=1
    56d6:	61 e0       	ldi	r22, 0x01	; 1
	sbrs r16,SPRITE_FLIP_X_BIT
    56d8:	00 ff       	sbrs	r16, 0
	clr r23
    56da:	77 27       	eor	r23, r23

	//if(flags&SPRITE_FLIP_Y){
	//	srcXdiff-=(TILE_WIDTH*2);
	//}
	sbrc r16,SPRITE_FLIP_Y_BIT
    56dc:	01 fd       	sbrc	r16, 1
	sbiw YL,(TILE_WIDTH*2)
    56de:	60 97       	sbiw	r28, 0x10	; 16
	;r24	= destXdiff
	;r25	= ydiff
	;X		= dest
	;Y		= srcXdiff
	;Z		= src
	clr r1
    56e0:	11 24       	eor	r1, r1
	ldi r19,TRANSLUCENT_COLOR
    56e2:	3e ef       	ldi	r19, 0xFE	; 254

	ldi r21,TILE_HEIGHT
    56e4:	58 e0       	ldi	r21, 0x08	; 8
	sub r21,r25 	;yspan=(TILE_HEIGHT-ydiff)
    56e6:	59 1b       	sub	r21, r25

000056e8 <y_loop>:

y_loop:
	ldi r20,TILE_WIDTH
    56e8:	48 e0       	ldi	r20, 0x08	; 8
	sub r20,r24 	;xspan=(TILE_WIDTH-destXdiff)
    56ea:	48 1b       	sub	r20, r24

000056ec <x_loop>:

x_loop:
	lpm r18,Z		;px=pgm_read_byte(src);
    56ec:	24 91       	lpm	r18, Z
	cpse r18,r19	;if(px!=TRANSLUCENT_COLOR)
    56ee:	23 13       	cpse	r18, r19
	st X,r18		;*dest=px;
    56f0:	2c 93       	st	X, r18
	adiw XL,1
    56f2:	11 96       	adiw	r26, 0x01	; 1
	add ZL,r22		;src+=step;
    56f4:	e6 0f       	add	r30, r22
	adc ZH,r23
    56f6:	f7 1f       	adc	r31, r23
	dec r20
    56f8:	4a 95       	dec	r20
	brne x_loop
    56fa:	c1 f7       	brne	.-16     	; 0x56ec <x_loop>

	add ZL,YL		;src+=srcXdiff
    56fc:	ec 0f       	add	r30, r28
	adc ZH,YH
    56fe:	fd 1f       	adc	r31, r29
	add XL,r24		;dest+=destXdiff
    5700:	a8 0f       	add	r26, r24
	adc XH,r1
    5702:	b1 1d       	adc	r27, r1
	dec r21
    5704:	5a 95       	dec	r21
	brne y_loop
    5706:	81 f7       	brne	.-32     	; 0x56e8 <y_loop>


	pop YH
    5708:	df 91       	pop	r29
	pop YL
    570a:	cf 91       	pop	r28
	pop r17
    570c:	1f 91       	pop	r17
	pop r16
    570e:	0f 91       	pop	r16
	ret
    5710:	08 95       	ret

00005712 <__vector_13>:

;***************************************************************************
; Main Video sync interrupt
;***************************************************************************
TIMER1_COMPA_vect:
	push r0
    5712:	0f 92       	push	r0
	push r1
    5714:	1f 92       	push	r1
	push ZL;2
    5716:	ef 93       	push	r30
	push ZH;2
    5718:	ff 93       	push	r31
	
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    571a:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    571c:	ef 93       	push	r30

	;Read timer offset since rollover to remove cycles 
	;and conpensate for interrupt latency.
	;This is nessesary to eliminate frame jitter.
	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    571e:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,0x12 ;MIN_INT_LATENCY
    5722:	e2 51       	subi	r30, 0x12	; 18

	ldi ZH,1
    5724:	f1 e0       	ldi	r31, 0x01	; 1

00005726 <latency_loop>:
latency_loop:
	cp ZL,ZH
    5726:	ef 17       	cp	r30, r31
	brlo .		;advance PC to next instruction	
    5728:	00 f0       	brcs	.+0      	; 0x572a <latency_loop+0x4>
	inc ZH
    572a:	f3 95       	inc	r31
	cpi ZH,10
    572c:	fa 30       	cpi	r31, 0x0A	; 10
	brlo latency_loop
    572e:	d8 f3       	brcs	.-10     	; 0x5726 <latency_loop>
	jmp .
    5730:	0c 94 9a 2b 	jmp	0x5734	; 0x5734 <latency_loop+0xe>
	
	;decrement sync pulse counter
	lds ZL,sync_pulse
    5734:	e0 91 a1 08 	lds	r30, 0x08A1
	dec ZL
    5738:	ea 95       	dec	r30
	sts sync_pulse,ZL
    573a:	e0 93 a1 08 	sts	0x08A1, r30

	;process sync phases
	lds ZH,sync_phase
    573e:	f0 91 a0 08 	lds	r31, 0x08A0
	sbrc ZH,0
    5742:	f0 fd       	sbrc	r31, 0
	rjmp sync_hsync
    5744:	57 c0       	rjmp	.+174    	; 0x57f4 <sync_hsync>
; Note: TCNT1 should be equal to 
; 0x68 on the cbi
; 0xAC on the sbi
; pulse duration: 68 clocks
;***************************************************		
	cpi ZL,SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    5746:	ec 30       	cpi	r30, 0x0C	; 12
	brlo sync_eq
    5748:	98 f0       	brcs	.+38     	; 0x5770 <sync_eq>

	;Set HDRIVE to double rate during VSYNC
	ldi ZH,hi8(HDRIVE_CL_TWICE)
    574a:	f3 e0       	ldi	r31, 0x03	; 3
	sts _SFR_MEM_ADDR(OCR1AH),ZH	
    574c:	f0 93 89 00 	sts	0x0089, r31
	ldi ZH,lo8(HDRIVE_CL_TWICE)
    5750:	fd e8       	ldi	r31, 0x8D	; 141
	sts _SFR_MEM_ADDR(OCR1AL),ZH
    5752:	f0 93 88 00 	sts	0x0088, r31

	bst ZL,0
    5756:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0x68
    5758:	28 98       	cbi	0x05, 0	; 5
	brtc sync_pre_eq_no_sound_update
    575a:	26 f4       	brtc	.+8      	; 0x5764 <sync_pre_eq_no_sound_update>
	ldi ZL,1	;indicate update_sound to generate the SBI for pre-eq
    575c:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    575e:	0e 94 81 2c 	call	0x5902	; 0x5902 <update_sound>
	rjmp sync_end
    5762:	b7 c0       	rjmp	.+366    	; 0x58d2 <sync_end>

00005764 <sync_pre_eq_no_sound_update>:

sync_pre_eq_no_sound_update:
	WAIT ZL,64
    5764:	e5 e1       	ldi	r30, 0x15	; 21
    5766:	ea 95       	dec	r30
    5768:	f1 f7       	brne	.-4      	; 0x5766 <sync_pre_eq_no_sound_update+0x2>
    576a:	00 00       	nop
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    576c:	28 9a       	sbi	0x05, 0	; 5
		
	rjmp sync_end
    576e:	b1 c0       	rjmp	.+354    	; 0x58d2 <sync_end>

00005770 <sync_eq>:
; 0x68  on the cbi
; 0x36E on the sbi
; low pulse duration: 774 clocks
;***************************************************	
sync_eq:
	cpi ZL,SYNC_POST_EQ_PULSES
    5770:	e6 30       	cpi	r30, 0x06	; 6
	brlo sync_post_eq
    5772:	38 f1       	brcs	.+78     	; 0x57c2 <sync_post_eq>

	rjmp .
    5774:	00 c0       	rjmp	.+0      	; 0x5776 <sync_eq+0x6>
	rjmp .
    5776:	00 c0       	rjmp	.+0      	; 0x5778 <sync_eq+0x8>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    5778:	28 98       	cbi	0x05, 0	; 5

	bst ZL,0
    577a:	e0 fb       	bst	r30, 0
	ldi ZL,4
    577c:	e4 e0       	ldi	r30, 0x04	; 4
	brtc sync_eq_skip
    577e:	16 f4       	brtc	.+4      	; 0x5784 <sync_eq_skip>
	
	call update_sound
    5780:	0e 94 81 2c 	call	0x5902	; 0x5902 <update_sound>

00005784 <sync_eq_skip>:
	;enable interupt to bring back sync 
	;level instead of wasting cycles
	;in a big wait loop

 	;clear interrupt flag
	ldi ZL,(1<<OCF1B)
    5784:	e4 e0       	ldi	r30, 0x04	; 4
	sts _SFR_MEM_ADDR(TIFR1),ZL 
    5786:	e0 93 36 00 	sts	0x0036, r30
	
	;generate interrupt on match
	;for timer1 compare unit b
	ldi ZL,(1<<OCIE1A)+(1<<OCIE1B)
    578a:	e6 e0       	ldi	r30, 0x06	; 6
	sts _SFR_MEM_ADDR(TIMSK1),ZL
    578c:	e0 93 6f 00 	sts	0x006F, r30

	rjmp sync_end
    5790:	a0 c0       	rjmp	.+320    	; 0x58d2 <sync_end>

00005792 <__vector_14>:
; during VSYNC EQ pulses to recover ~5000 cycles per field
; with interrupt latency conpensation
; 37 cycles
;**********************************************************	
TIMER1_COMPB_vect:
	push ZL
    5792:	ef 93       	push	r30
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    5794:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    5796:	ef 93       	push	r30

	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    5798:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,62+31 ;0x5D ;MIN_INT_LATENCY
    579c:	ed 55       	subi	r30, 0x5D	; 93

	cpi ZL,1
    579e:	e1 30       	cpi	r30, 0x01	; 1
	brlo .		;advance PC to next instruction
    57a0:	00 f0       	brcs	.+0      	; 0x57a2 <__vector_14+0x10>

	cpi ZL,2
    57a2:	e2 30       	cpi	r30, 0x02	; 2
	brlo .		;advance PC to next instruction
    57a4:	00 f0       	brcs	.+0      	; 0x57a6 <__vector_14+0x14>

	cpi ZL,3
    57a6:	e3 30       	cpi	r30, 0x03	; 3
	brlo .		;advance PC to next instruction
    57a8:	00 f0       	brcs	.+0      	; 0x57aa <__vector_14+0x18>

	cpi ZL,4
    57aa:	e4 30       	cpi	r30, 0x04	; 4
	brlo .		;advance PC to next instruction
    57ac:	00 f0       	brcs	.+0      	; 0x57ae <__vector_14+0x1c>

	cpi ZL,5
    57ae:	e5 30       	cpi	r30, 0x05	; 5
	brlo .		;advance PC to next instruction
    57b0:	00 f0       	brcs	.+0      	; 0x57b2 <__vector_14+0x20>

 	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;68
    57b2:	28 9a       	sbi	0x05, 0	; 5
	ldi ZL,(1<<OCIE1A) ; disable OCIE1B 
    57b4:	e2 e0       	ldi	r30, 0x02	; 2
	sts _SFR_MEM_ADDR(TIMSK1),ZL ;stop generate interrupt on match
    57b6:	e0 93 6f 00 	sts	0x006F, r30
	
	;restore flags
	pop ZL
    57ba:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL	
    57bc:	ef bf       	out	0x3f, r30	; 63
	pop ZL
    57be:	ef 91       	pop	r30
	reti
    57c0:	18 95       	reti

000057c2 <sync_post_eq>:
; 0x68 on the cbi
; 0xAC on the sbi
; pulse cycles: 68 clocks
;***************************************************	
sync_post_eq:	
	rjmp .
    57c2:	00 c0       	rjmp	.+0      	; 0x57c4 <sync_post_eq+0x2>

	bst ZL,0
    57c4:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    57c6:	28 98       	cbi	0x05, 0	; 5
	brtc sync_post_eq_no_sound_update
    57c8:	26 f4       	brtc	.+8      	; 0x57d2 <sync_post_eq_no_sound_update>
	ldi ZL,1	
    57ca:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    57cc:	0e 94 81 2c 	call	0x5902	; 0x5902 <update_sound>
	rjmp sync_pre_eq_cont
    57d0:	05 c0       	rjmp	.+10     	; 0x57dc <sync_pre_eq_cont>

000057d2 <sync_post_eq_no_sound_update>:

sync_post_eq_no_sound_update:
	WAIT ZL,64
    57d2:	e5 e1       	ldi	r30, 0x15	; 21
    57d4:	ea 95       	dec	r30
    57d6:	f1 f7       	brne	.-4      	; 0x57d4 <sync_post_eq_no_sound_update+0x2>
    57d8:	00 00       	nop

	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN 
    57da:	28 9a       	sbi	0x05, 0	; 5

000057dc <sync_pre_eq_cont>:

sync_pre_eq_cont:	
	;check if it's the last vsync pulse
	lds ZL,sync_pulse
    57dc:	e0 91 a1 08 	lds	r30, 0x08A1
	cpi ZL,0
    57e0:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2 ;skip rjmp
    57e2:	09 f0       	breq	.+2      	; 0x57e6 <sync_pre_eq_cont+0xa>
	rjmp sync_end
    57e4:	76 c0       	rjmp	.+236    	; 0x58d2 <sync_end>
	
	;update sync flags
	ldi ZL,SYNC_HSYNC_PULSES
    57e6:	ed ef       	ldi	r30, 0xFD	; 253
	sts sync_pulse,ZL
    57e8:	e0 93 a1 08 	sts	0x08A1, r30
	ldi ZL,1
    57ec:	e1 e0       	ldi	r30, 0x01	; 1
	sts sync_phase,ZL
    57ee:	e0 93 a0 08 	sts	0x08A0, r30
	
	rjmp sync_end
    57f2:	6f c0       	rjmp	.+222    	; 0x58d2 <sync_end>

000057f4 <sync_hsync>:
; 0xF0 on the sbi
; pulse duration: 136 clocks
;***************************************************	

	; Set HDRIVE to normal rate
	ldi ZL,hi8(HDRIVE_CL)
    57f4:	e7 e0       	ldi	r30, 0x07	; 7
	sts _SFR_MEM_ADDR(OCR1AH),ZL	
    57f6:	e0 93 89 00 	sts	0x0089, r30
	ldi ZL,lo8(HDRIVE_CL)
    57fa:	eb e1       	ldi	r30, 0x1B	; 27
	sts _SFR_MEM_ADDR(OCR1AL),ZL
    57fc:	e0 93 88 00 	sts	0x0088, r30
	rjmp .
    5800:	00 c0       	rjmp	.+0      	; 0x5802 <sync_hsync+0xe>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    5802:	28 98       	cbi	0x05, 0	; 5
	
	ldi ZL,2	;indicate update_sound to generate the SBI for pre-eq
    5804:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    5806:	00 c0       	rjmp	.+0      	; 0x5808 <sync_hsync+0x14>
	call update_sound
    5808:	0e 94 81 2c 	call	0x5902	; 0x5902 <update_sound>

	;check if we have reached the first line to render
	ldi ZH,SYNC_HSYNC_PULSES
    580c:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    580e:	00 90 a7 08 	lds	r0, 0x08A7
	sub ZH,r0				
    5812:	f0 19       	sub	r31, r0
	lds ZL,sync_pulse
    5814:	e0 91 a1 08 	lds	r30, 0x08A1
	cp ZL,ZH
    5818:	ef 17       	cp	r30, r31
	brsh no_render
    581a:	d0 f4       	brcc	.+52     	; 0x5850 <no_render>

	ldi ZH,SYNC_HSYNC_PULSES
    581c:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    581e:	00 90 a7 08 	lds	r0, 0x08A7
	sub ZH,r0				
    5822:	f0 19       	sub	r31, r0
	lds r0,render_lines_count
    5824:	00 90 a8 08 	lds	r0, 0x08A8
	sub ZH,r0			
    5828:	f0 19       	sub	r31, r0
	cp ZL,ZH
    582a:	ef 17       	cp	r30, r31
	brlo no_render
    582c:	88 f0       	brcs	.+34     	; 0x5850 <no_render>

	;push r1-r29
	ldi ZL,29
    582e:	ed e1       	ldi	r30, 0x1D	; 29
	clr ZH
    5830:	ff 27       	eor	r31, r31

00005832 <push_loop>:
push_loop:
	ld r0,Z	;load value from register file
    5832:	00 80       	ld	r0, Z
	push r0
    5834:	0f 92       	push	r0
	dec ZL
    5836:	ea 95       	dec	r30
	brne push_loop	
    5838:	e1 f7       	brne	.-8      	; 0x5832 <push_loop>

	;timing compensation
	;to insure we always call the video mode 
	;routine at the same cycle	
	WAIT r16,230-(AUDIO_OUT_HSYNC_CYCLES)
    583a:	06 e0       	ldi	r16, 0x06	; 6
    583c:	0a 95       	dec	r16
    583e:	f1 f7       	brne	.-4      	; 0x583c <push_loop+0xa>

	call VMODE_FUNC		;TCNT1=0x234
    5840:	0e 94 47 28 	call	0x508e	; 0x508e <sub_video_mode3>

	;pop r1-r29
	ldi ZL,1
    5844:	e1 e0       	ldi	r30, 0x01	; 1
	clr ZH
    5846:	ff 27       	eor	r31, r31

00005848 <pop_loop>:
pop_loop:
	pop r0
    5848:	0f 90       	pop	r0
	st Z+,r0 ;store value to register file
    584a:	01 92       	st	Z+, r0
	cpi ZL,30
    584c:	ee 31       	cpi	r30, 0x1E	; 30
	brlo pop_loop	
    584e:	e0 f3       	brcs	.-8      	; 0x5848 <pop_loop>

00005850 <no_render>:

no_render:

	;check if it's the last hsync pulse and we are 
	;ready for VSYNC
	lds ZL,sync_pulse
    5850:	e0 91 a1 08 	lds	r30, 0x08A1
	cpi ZL,0
    5854:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2
    5856:	09 f0       	breq	.+2      	; 0x585a <no_render+0xa>
	rjmp sync_end
    5858:	3c c0       	rjmp	.+120    	; 0x58d2 <sync_end>
;***************************************************
; Process VSYNC stuff
;***************************************************
	
	;push C-call registers
	push r18
    585a:	2f 93       	push	r18
	push r19
    585c:	3f 93       	push	r19
	push r20
    585e:	4f 93       	push	r20
	push r21
    5860:	5f 93       	push	r21
	push r22
    5862:	6f 93       	push	r22
	push r23
    5864:	7f 93       	push	r23
	push r24
    5866:	8f 93       	push	r24
	push r25
    5868:	9f 93       	push	r25
	push r26
    586a:	af 93       	push	r26
	push r27
    586c:	bf 93       	push	r27

	sei ;must enable ints for re-entrant sync pulses
    586e:	78 94       	sei
	clr r1
    5870:	11 24       	eor	r1, r1

	;set vsync flags
	clr ZL
    5872:	ee 27       	eor	r30, r30
	sts sync_phase,ZL
    5874:	e0 93 a0 08 	sts	0x08A0, r30
	ldi ZL,SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    5878:	e2 e1       	ldi	r30, 0x12	; 18
	sts sync_pulse,ZL
    587a:	e0 93 a1 08 	sts	0x08A1, r30



	;increment the vsync counter
	lds r24,vsync_counter
    587e:	80 91 b1 08 	lds	r24, 0x08B1
	lds r25,vsync_counter+1
    5882:	90 91 b2 08 	lds	r25, 0x08B2
	adiw r24,1
    5886:	01 96       	adiw	r24, 0x01	; 1
	sts vsync_counter,r24
    5888:	80 93 b1 08 	sts	0x08B1, r24
	sts vsync_counter+1,r25
    588c:	90 93 b2 08 	sts	0x08B2, r25


	;process user pre callback
	lds ZL,pre_vsync_user_callback+0
    5890:	e0 91 a3 08 	lds	r30, 0x08A3
	lds ZH,pre_vsync_user_callback+1
    5894:	f0 91 a4 08 	lds	r31, 0x08A4
	cp  ZL,r1
    5898:	e1 15       	cp	r30, r1
	cpc ZH,r1
    589a:	f1 05       	cpc	r31, r1
	breq .+2 
    589c:	09 f0       	breq	.+2      	; 0x58a0 <no_render+0x50>
	icall
    589e:	09 95       	icall

	;refresh buttons states
	#if CONTROLLERS_VSYNC_READ == 1
		call ReadControllers
    58a0:	0e 94 0f 2e 	call	0x5c1e	; 0x5c1e <ReadControllers>
	#endif 
	
	;invoke stuff the video mode may have to do
	call VideoModeVsync	
    58a4:	0e 94 7e 3b 	call	0x76fc	; 0x76fc <VideoModeVsync>

	;process music (music, envelopes, etc)
	call process_music
    58a8:	0e 94 7b 2c 	call	0x58f6	; 0x58f6 <process_music>
	clr r1
    58ac:	11 24       	eor	r1, r1

	;process user post callback
	lds ZL,post_vsync_user_callback+0
    58ae:	e0 91 a5 08 	lds	r30, 0x08A5
	lds ZH,post_vsync_user_callback+1
    58b2:	f0 91 a6 08 	lds	r31, 0x08A6
	cp  ZL,r1
    58b6:	e1 15       	cp	r30, r1
	cpc ZH,r1
    58b8:	f1 05       	cpc	r31, r1
	breq .+2 
    58ba:	09 f0       	breq	.+2      	; 0x58be <no_render+0x6e>
	icall
    58bc:	09 95       	icall
	#if SNES_MOUSE == 1
		call ReadMouseExtendedData
		call ProcessMouseMovement
	#endif

	pop r27
    58be:	bf 91       	pop	r27
	pop r26
    58c0:	af 91       	pop	r26
	pop r25
    58c2:	9f 91       	pop	r25
	pop r24
    58c4:	8f 91       	pop	r24
	pop r23
    58c6:	7f 91       	pop	r23
	pop r22
    58c8:	6f 91       	pop	r22
	pop r21
    58ca:	5f 91       	pop	r21
	pop r20
    58cc:	4f 91       	pop	r20
	pop r19
    58ce:	3f 91       	pop	r19
	pop r18
    58d0:	2f 91       	pop	r18

000058d2 <sync_end>:
	
sync_end:	
	;restore flags
	pop ZL
    58d2:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL
    58d4:	ef bf       	out	0x3f, r30	; 63
	
	pop ZH
    58d6:	ff 91       	pop	r31
	pop ZL
    58d8:	ef 91       	pop	r30
	pop r1
    58da:	1f 90       	pop	r1
	pop r0
    58dc:	0f 90       	pop	r0
	reti
    58de:	18 95       	reti

000058e0 <hsync_pulse>:
; 0xf0 on the sbi 
;	
; Destroys: ZL (r30)
;*************************************************
hsync_pulse:
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    58e0:	28 98       	cbi	0x05, 0	; 5
	ldi ZL,2
    58e2:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    58e4:	00 c0       	rjmp	.+0      	; 0x58e6 <hsync_pulse+0x6>
	call update_sound
    58e6:	0e 94 81 2c 	call	0x5902	; 0x5902 <update_sound>

	lds ZL,sync_pulse
    58ea:	e0 91 a1 08 	lds	r30, 0x08A1
	dec ZL
    58ee:	ea 95       	dec	r30
	sts sync_pulse,ZL
    58f0:	e0 93 a1 08 	sts	0x08A1, r30

	ret
    58f4:	08 95       	ret

000058f6 <process_music>:
; NOTE: registers r18-r27 are already saved by the caller
;***********************
process_music:
	
#if ENABLE_MIXER==1
	lds ZL,sound_enabled
    58f6:	e0 91 b7 08 	lds	r30, 0x08B7
	sbrc ZL,0
    58fa:	e0 fd       	sbrc	r30, 0
 	call ProcessMusic
    58fc:	0e 94 62 30 	call	0x60c4	; 0x60c4 <ProcessMusic>
#endif

	ret
    5900:	08 95       	ret

00005902 <update_sound>:

; Destroys: Z,r0,r1
; cycles: 212+
;****************************
update_sound:
	push r16
    5902:	0f 93       	push	r16
	push r17
    5904:	1f 93       	push	r17
	push r18
    5906:	2f 93       	push	r18
	push r28
    5908:	cf 93       	push	r28
	push r29
    590a:	df 93       	push	r29

	mov r18,ZL
    590c:	2e 2f       	mov	r18, r30

	;channel 1 
	lds r16,tr1_step_lo
    590e:	00 91 b9 08 	lds	r16, 0x08B9
	lds r17,tr1_pos_frac
    5912:	10 91 bb 08 	lds	r17, 0x08BB
	add	r17,r16	;add step to fractional part of sample pos
    5916:	10 0f       	add	r17, r16
	lds r16,tr1_step_hi	
    5918:	00 91 ba 08 	lds	r16, 0x08BA
	lds ZL,tr1_pos_lo
    591c:	e0 91 bc 08 	lds	r30, 0x08BC
	lds ZH,tr1_pos_hi 
    5920:	f0 91 bd 08 	lds	r31, 0x08BD
	adc ZL,r16	;add step to low byte of sample pos
    5924:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    5926:	04 91       	lpm	r16, Z
	sts tr1_pos_lo,ZL
    5928:	e0 93 bc 08 	sts	0x08BC, r30
	sts tr1_pos_frac,r17
    592c:	10 93 bb 08 	sts	0x08BB, r17
	lds r17,tr1_vol
    5930:	10 91 b8 08 	lds	r17, 0x08B8
	mulsu r16,r17;(sample*mixing vol)
    5934:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend	
    5936:	00 08       	sbc	r0, r0
	mov r28,r1	;set (sample*vol>>8) to mix buffer lsb
    5938:	c1 2d       	mov	r28, r1
	mov r29,r0	;set mix buffer msb	
    593a:	d0 2d       	mov	r29, r0
	nop
    593c:	00 00       	nop

;38
	
	;channel 2
	lds r16,tr2_step_lo
    593e:	00 91 bf 08 	lds	r16, 0x08BF
	lds r17,tr2_pos_frac
    5942:	10 91 c1 08 	lds	r17, 0x08C1
	add	r17,r16	;add step to fractional part of sample pos
    5946:	10 0f       	add	r17, r16
	lds r16,tr2_step_hi	
    5948:	00 91 c0 08 	lds	r16, 0x08C0
	lds ZL,tr2_pos_lo
    594c:	e0 91 c2 08 	lds	r30, 0x08C2
	lds ZH,tr2_pos_hi 
    5950:	f0 91 c3 08 	lds	r31, 0x08C3
	adc ZL,r16	;add step to low byte of sample pos
    5954:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    5956:	04 91       	lpm	r16, Z
	sts tr2_pos_lo,ZL
    5958:	e0 93 c2 08 	sts	0x08C2, r30
	sts tr2_pos_frac,r17
    595c:	10 93 c1 08 	sts	0x08C1, r17
	lds r17,tr2_vol
    5960:	10 91 be 08 	lds	r17, 0x08BE

	;*** Video sync update ***
	sbrc r18,0								;pre-eq/post-eq sync
    5964:	20 fd       	sbrc	r18, 0
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    5966:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,0								
    5968:	20 ff       	sbrs	r18, 0
	rjmp .
    596a:	00 c0       	rjmp	.+0      	; 0x596c <update_sound+0x6a>
	;*************************

	mulsu r16,r17;(sample*mixing vol)
    596c:	01 03       	mulsu	r16, r17
	clr r0
    596e:	00 24       	eor	r0, r0
	sbc r0,r0	;sign extend
    5970:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    5972:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb		
    5974:	d0 1d       	adc	r29, r0
;70
	
	;channel 3
	lds r16,tr3_step_lo
    5976:	00 91 c5 08 	lds	r16, 0x08C5
	lds r17,tr3_pos_frac
    597a:	10 91 c7 08 	lds	r17, 0x08C7
	add	r17,r16				;add step to fractional part of sample pos
    597e:	10 0f       	add	r17, r16
	lds r16,tr3_step_hi	
    5980:	00 91 c6 08 	lds	r16, 0x08C6
	lds ZL,tr3_pos_lo
    5984:	e0 91 c8 08 	lds	r30, 0x08C8
	lds ZH,tr3_pos_hi 
    5988:	f0 91 c9 08 	lds	r31, 0x08C9
	adc ZL,r16				;add step to low byte of sample pos
    598c:	e0 1f       	adc	r30, r16
	lpm	r16,Z				;load sample
    598e:	04 91       	lpm	r16, Z
	sts tr3_pos_lo,ZL
    5990:	e0 93 c8 08 	sts	0x08C8, r30
	sts tr3_pos_frac,r17
    5994:	10 93 c7 08 	sts	0x08C7, r17
	lds r17,tr3_vol
    5998:	10 91 c4 08 	lds	r17, 0x08C4
	mulsu r16,r17			;(sample*mixing vol)
    599c:	01 03       	mulsu	r16, r17
	sbc r0,r0				;sign extend
    599e:	00 08       	sbc	r0, r0
	add r28,r1				;add (sample*vol>>8) to mix buffer lsb
    59a0:	c1 0d       	add	r28, r1
	adc r29,r0				;ajust mix buffer msb
    59a2:	d0 1d       	adc	r29, r0
;97	

	;channel 4 - 7/15 bit LFSR 
	lds r16,tr4_barrel_lo
    59a4:	00 91 cc 08 	lds	r16, 0x08CC
	lds r17,tr4_barrel_hi
    59a8:	10 91 cd 08 	lds	r17, 0x08CD
	lds ZL,tr4_divider
    59ac:	e0 91 ce 08 	lds	r30, 0x08CE
	dec ZL	
    59b0:	ea 95       	dec	r30
	brpl ch4_no_shift	
    59b2:	92 f4       	brpl	.+36     	; 0x59d8 <ch4_no_shift>

	lds ZH,tr4_params
    59b4:	f0 91 cb 08 	lds	r31, 0x08CB
	mov ZL,ZH
    59b8:	ef 2f       	mov	r30, r31
	lsr ZL 			;keep bits7:1
    59ba:	e6 95       	lsr	r30

	mov r0,r16  ;copy barrel shifter
    59bc:	00 2e       	mov	r0, r16
	lsr r0
    59be:	06 94       	lsr	r0
	eor r0,r16  ;xor bit0 and bit1
    59c0:	00 26       	eor	r0, r16
	bst r0,0
    59c2:	00 fa       	bst	r0, 0
	lsr r17
    59c4:	16 95       	lsr	r17
	ror r16
    59c6:	07 95       	ror	r16
	bld r17,6	;15 bits mode
    59c8:	16 f9       	bld	r17, 6
	sbrs ZH,0
    59ca:	f0 ff       	sbrs	r31, 0
	bld r16,6	;7 bits mode
    59cc:	06 f9       	bld	r16, 6

	sts tr4_barrel_lo,r16
    59ce:	00 93 cc 08 	sts	0x08CC, r16
	sts tr4_barrel_hi,r17
    59d2:	10 93 cd 08 	sts	0x08CD, r17

	rjmp ch4_end
    59d6:	03 c0       	rjmp	.+6      	; 0x59de <ch4_end>

000059d8 <ch4_no_shift>:
ch4_no_shift:
	;wait loop 21 cycles
	ldi r17,6
    59d8:	16 e0       	ldi	r17, 0x06	; 6
	dec r17
    59da:	1a 95       	dec	r17
	brne .-4
    59dc:	f1 f7       	brne	.-4      	; 0x59da <ch4_no_shift+0x2>

000059de <ch4_end>:
	;rjmp .
ch4_end:

	sts tr4_divider,ZL
    59de:	e0 93 ce 08 	sts	0x08CE, r30
	ldi r17,0x80 ;-128
    59e2:	10 e8       	ldi	r17, 0x80	; 128
	
	;*** Video sync update ***
	sbrc r18,1								;hsync
    59e4:	21 fd       	sbrc	r18, 1
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xF0
    59e6:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,1								
    59e8:	21 ff       	sbrs	r18, 1
	rjmp .
    59ea:	00 c0       	rjmp	.+0      	; 0x59ec <ch4_end+0xe>
	;*************************
	
	sbrc r16,0
    59ec:	00 fd       	sbrc	r16, 0
	ldi r17,0x7f ;+127
    59ee:	1f e7       	ldi	r17, 0x7F	; 127
	
	lds r16,tr4_vol
    59f0:	00 91 ca 08 	lds	r16, 0x08CA

	mulsu r17,r16;(sample*mixing vol)
    59f4:	10 03       	mulsu	r17, r16
	sbc r0,r0	;sign extend
    59f6:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    59f8:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb
    59fa:	d0 1d       	adc	r29, r0
;142
#if SOUND_CHANNEL_5_ENABLE==1
	;channel 5 PCM -- 45 cycles

	;add fractional part
	lds r16,tr5_pos_frac
    59fc:	00 91 d3 08 	lds	r16, 0x08D3
	lds r17,tr5_step_lo 
    5a00:	10 91 d1 08 	lds	r17, 0x08D1
	add r16,r17
    5a04:	01 0f       	add	r16, r17
	sts tr5_pos_frac,r16
    5a06:	00 93 d3 08 	sts	0x08D3, r16

	;add lo
	lds ZL,tr5_pos_lo
    5a0a:	e0 91 d4 08 	lds	r30, 0x08D4
	lds r17,tr5_step_hi 
    5a0e:	10 91 d2 08 	lds	r17, 0x08D2
	adc ZL,r17
    5a12:	e1 1f       	adc	r30, r17

	;add hi
	lds ZH,tr5_pos_hi
    5a14:	f0 91 d5 08 	lds	r31, 0x08D5
	ldi r16,0
    5a18:	00 e0       	ldi	r16, 0x00	; 0
	adc ZH,r16
    5a1a:	f0 1f       	adc	r31, r16

	movw r16,ZL
    5a1c:	8f 01       	movw	r16, r30
	lds r0,tr5_loop_len_lo
    5a1e:	00 90 d6 08 	lds	r0, 0x08D6
	lds r1,tr5_loop_len_hi	
    5a22:	10 90 d7 08 	lds	r1, 0x08D7
	sub r16,r0
    5a26:	00 19       	sub	r16, r0
	sbc r17,r1
    5a28:	11 09       	sbc	r17, r1
	lds r0,tr5_loop_end_lo
    5a2a:	00 90 d8 08 	lds	r0, 0x08D8
	lds r1,tr5_loop_end_hi
    5a2e:	10 90 d9 08 	lds	r1, 0x08D9

	cp ZL,r0
    5a32:	e0 15       	cp	r30, r0
	cpc ZH,r1
    5a34:	f1 05       	cpc	r31, r1
	brlo .+2
    5a36:	08 f0       	brcs	.+2      	; 0x5a3a <ch4_end+0x5c>
	movw ZL,r16
    5a38:	f8 01       	movw	r30, r16

	sts tr5_pos_lo,ZL
    5a3a:	e0 93 d4 08 	sts	0x08D4, r30
	sts tr5_pos_hi,ZH
    5a3e:	f0 93 d5 08 	sts	0x08D5, r31

	lpm	r16,Z	;load sample
    5a42:	04 91       	lpm	r16, Z
	lds r17,tr5_vol
    5a44:	10 91 d0 08 	lds	r17, 0x08D0

	mulsu r16,r17;(sample*mixing vol)
    5a48:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend
    5a4a:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    5a4c:	c1 0d       	add	r28, r1
	adc r29,r0	;adjust mix buffer msb	
    5a4e:	d0 1d       	adc	r29, r0
#endif
	
	;final processing

	;clip
	clr r0
    5a50:	00 24       	eor	r0, r0
	cpi r28,128	;> 127?
    5a52:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0	
    5a54:	d0 05       	cpc	r29, r0
	brlt .+2
    5a56:	0c f0       	brlt	.+2      	; 0x5a5a <ch4_end+0x7c>
	ldi r28,127
    5a58:	cf e7       	ldi	r28, 0x7F	; 127
	
	dec r0
    5a5a:	0a 94       	dec	r0
	cpi r28,-128; <-128?
    5a5c:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0xff
    5a5e:	d0 05       	cpc	r29, r0
	brge .+2
    5a60:	0c f4       	brge	.+2      	; 0x5a64 <ch4_end+0x86>
	ldi r28,-128
    5a62:	c0 e8       	ldi	r28, 0x80	; 128

	subi r28,128	;convert to unsigned		
    5a64:	c0 58       	subi	r28, 0x80	; 128
	sts _SFR_MEM_ADDR(OCR2A),r28 ;output sound byte
    5a66:	c0 93 b3 00 	sts	0x00B3, r28

00005a6a <update_sound_end>:
#endif


update_sound_end:

	pop r29
    5a6a:	df 91       	pop	r29
	pop r28
    5a6c:	cf 91       	pop	r28
	pop r18
    5a6e:	2f 91       	pop	r18
	pop r17
    5a70:	1f 91       	pop	r17
	pop r16
    5a72:	0f 91       	pop	r16
	
	ret
    5a74:	08 95       	ret

00005a76 <SetSpritesTileTable>:
; C-callable
; r25:r24=pointer to sprites pixel data.
;*****************************
.section .text.SetSpritesTileTable
SetSpritesTileTable:
	sts sprites_tile_banks,r24
    5a76:	80 93 8e 08 	sts	0x088E, r24
	sts sprites_tile_banks+1,r25
    5a7a:	90 93 8f 08 	sts	0x088F, r25
	ret
    5a7e:	08 95       	ret

00005a80 <ClearVram>:
; C-callable
;************************************
.section .text.ClearVram
ClearVram:
	//init vram		
	ldi r30,lo8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    5a80:	e0 e0       	ldi	r30, 0x00	; 0
	ldi r31,hi8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    5a82:	f4 e0       	ldi	r31, 0x04	; 4

	ldi XL,lo8(vram)
    5a84:	a0 e2       	ldi	r26, 0x20	; 32
	ldi XH,hi8(vram)
    5a86:	ba e0       	ldi	r27, 0x0A	; 10

	ldi r22,RAM_TILES_COUNT
    5a88:	6c e1       	ldi	r22, 0x1C	; 28

00005a8a <fill_vram_loop>:

fill_vram_loop:
	st X+,r22
    5a8a:	6d 93       	st	X+, r22
	sbiw r30,1
    5a8c:	31 97       	sbiw	r30, 0x01	; 1
	brne fill_vram_loop
    5a8e:	e9 f7       	brne	.-6      	; 0x5a8a <fill_vram_loop>

	clr r1
    5a90:	11 24       	eor	r1, r1

	ret
    5a92:	08 95       	ret

00005a94 <SetFont>:
; r22=Y pos (8 bit)
; r20=Font tile No (8 bit)
;************************************
.section .text.SetFont
SetFont:
	lds r21,font_tile_index
    5a94:	50 91 98 08 	lds	r21, 0x0898
	add r20,21
    5a98:	45 0f       	add	r20, r21
	rjmp SetTile	
    5a9a:	00 c0       	rjmp	.+0      	; 0x5a9c <SetTile>

00005a9c <SetTile>:
.section .text.SetTile
SetTile:
#if SCROLLING == 1
	;index formula is vram[((y>>3)*256)+8x+(y&7)]
	
	andi r24,0x1f
    5a9c:	8f 71       	andi	r24, 0x1F	; 31
	mov r23,r22
    5a9e:	76 2f       	mov	r23, r22
	lsr r22
    5aa0:	66 95       	lsr	r22
	lsr r22
    5aa2:	66 95       	lsr	r22
	lsr r22			;y>>3
    5aa4:	66 95       	lsr	r22
	ldi r18,8		
    5aa6:	28 e0       	ldi	r18, 0x08	; 8
	mul r24,r18		;x*8
    5aa8:	82 9f       	mul	r24, r18
	movw XL,r0
    5aaa:	d0 01       	movw	r26, r0
	subi XL,lo8(-(vram))
    5aac:	a0 5e       	subi	r26, 0xE0	; 224
	sbci XH,hi8(-(vram))
    5aae:	b5 4f       	sbci	r27, 0xF5	; 245
	add XH,r22		;vram+((y>>3)*256)
    5ab0:	b6 0f       	add	r27, r22
	andi r23,7		;y&7	
    5ab2:	77 70       	andi	r23, 0x07	; 7
	add XL,r23
    5ab4:	a7 0f       	add	r26, r23
						
	subi r20,~(RAM_TILES_COUNT-1)	
    5ab6:	44 5e       	subi	r20, 0xE4	; 228
	st X,r20
    5ab8:	4c 93       	st	X, r20

	clr r1
    5aba:	11 24       	eor	r1, r1

	ret
    5abc:	08 95       	ret

00005abe <SetFontTilesIndex>:
; C-callable
; r24=First font tile index in tile table (8 bit)
;************************************
.section .text.SetFontTilesIndex
	SetFontTilesIndex:
	sts font_tile_index,r24
    5abe:	80 93 98 08 	sts	0x0898, r24
	ret
    5ac2:	08 95       	ret

00005ac4 <SetTileTable>:
; C-callable
; r25:r24=pointer to tiles data
;************************************
.section .text.SetTileTable
SetTileTable:
	sts tile_table_lo,r24
    5ac4:	80 93 96 08 	sts	0x0896, r24
	sts tile_table_hi,r25	
    5ac8:	90 93 97 08 	sts	0x0897, r25
	ret
    5acc:	08 95       	ret

00005ace <GetVsyncFlag>:
;
; C-callable
;************************************
.section .text.GetVsyncFlag
GetVsyncFlag:
	lds r24,sync_flags
    5ace:	80 91 a2 08 	lds	r24, 0x08A2
	andi r24,SYNC_FLAG_VSYNC
    5ad2:	81 70       	andi	r24, 0x01	; 1
	ret
    5ad4:	08 95       	ret

00005ad6 <ClearVsyncFlag>:
; 
; C-callable
;*****************************
.section .text.ClearVsyncFlag
ClearVsyncFlag:
	lds r18,sync_flags
    5ad6:	20 91 a2 08 	lds	r18, 0x08A2
	andi r18,~SYNC_FLAG_VSYNC
    5ada:	2e 7f       	andi	r18, 0xFE	; 254
	sts sync_flags,r18
    5adc:	20 93 a2 08 	sts	0x08A2, r18
	ret
    5ae0:	08 95       	ret

00005ae2 <WriteEeprom>:
;****************************

.section .text.WriteEeprom
WriteEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    5ae2:	f9 99       	sbic	0x1f, 1	; 31
   rjmp WriteEeprom
    5ae4:	fe cf       	rjmp	.-4      	; 0x5ae2 <WriteEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    5ae6:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    5ae8:	81 bd       	out	0x21, r24	; 33
   ; Write data (r22) to Data Register
   out _SFR_IO_ADDR(EEDR),r22
    5aea:	60 bd       	out	0x20, r22	; 32
   cli
    5aec:	f8 94       	cli
   ; Write logical one to EEMPE
   sbi _SFR_IO_ADDR(EECR),EEMPE
    5aee:	fa 9a       	sbi	0x1f, 2	; 31
   ; Start eeprom write by setting EEPE
   sbi _SFR_IO_ADDR(EECR),EEPE
    5af0:	f9 9a       	sbi	0x1f, 1	; 31
   sei
    5af2:	78 94       	sei
   ret
    5af4:	08 95       	ret

00005af6 <ReadEeprom>:
; r24 - value read
;****************************
.section .text.ReadEeprom
ReadEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    5af6:	f9 99       	sbic	0x1f, 1	; 31
   rjmp ReadEeprom
    5af8:	fe cf       	rjmp	.-4      	; 0x5af6 <ReadEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    5afa:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    5afc:	81 bd       	out	0x21, r24	; 33
   ; Start eeprom read by writing EERE
   cli
    5afe:	f8 94       	cli
   sbi _SFR_IO_ADDR(EECR),EERE
    5b00:	f8 9a       	sbi	0x1f, 0	; 31
   ; Read data from Data Register
   in r24,_SFR_IO_ADDR(EEDR)
    5b02:	80 b5       	in	r24, 0x20	; 32
   sei
    5b04:	78 94       	sei
   ret
    5b06:	08 95       	ret

00005b08 <wdt_randomize>:
	.global wdt_randomize
	.section .text.wdt_randomize
	wdt_randomize:

		;set timer 1 full speed count to 0xffff
		ldi r24,0
    5b08:	80 e0       	ldi	r24, 0x00	; 0
		sts sync_pulse,r24
    5b0a:	80 93 a1 08 	sts	0x08A1, r24


		sts _SFR_MEM_ADDR(TIMSK1),r24
    5b0e:	80 93 6f 00 	sts	0x006F, r24
		sts _SFR_MEM_ADDR(OCR1AL),r24
    5b12:	80 93 88 00 	sts	0x0088, r24
		sts _SFR_MEM_ADDR(OCR1AH),r24
    5b16:	80 93 89 00 	sts	0x0089, r24
		sts _SFR_MEM_ADDR(OCR1BL),r24
    5b1a:	80 93 8a 00 	sts	0x008A, r24
		sts _SFR_MEM_ADDR(OCR1BH),r24
    5b1e:	80 93 8b 00 	sts	0x008B, r24
		sts _SFR_MEM_ADDR(TCNT1H),r24
    5b22:	80 93 85 00 	sts	0x0085, r24
		sts _SFR_MEM_ADDR(TCNT1L),r24
    5b26:	80 93 84 00 	sts	0x0084, r24
		
		sts _SFR_MEM_ADDR(TCCR1A),r24	
    5b2a:	80 93 80 00 	sts	0x0080, r24
		ldi 24,(1<<CS10)
    5b2e:	81 e0       	ldi	r24, 0x01	; 1
		sts _SFR_MEM_ADDR(TCCR1B),r24
    5b30:	80 93 81 00 	sts	0x0081, r24

		cli
    5b34:	f8 94       	cli

		;enable watchdog at fastest speed and generate interrupts
		ldi r24,0
    5b36:	80 e0       	ldi	r24, 0x00	; 0
		sts _SFR_MEM_ADDR(MCUSR),r24	
    5b38:	80 93 54 00 	sts	0x0054, r24
		ldi r25,(1<<WDIE)+(1<<WDE)+(0<<WDP3)+(0<<WDP2)+(0<<WDP1)+(0<<WDP0)
    5b3c:	98 e4       	ldi	r25, 0x48	; 72
		lds r24,_SFR_MEM_ADDR(WDTCSR)
    5b3e:	80 91 60 00 	lds	r24, 0x0060
		ori r24,(1<<WDCE)+(1<<WDE)
    5b42:	88 61       	ori	r24, 0x18	; 24
		sts _SFR_MEM_ADDR(WDTCSR),r24
    5b44:	80 93 60 00 	sts	0x0060, r24
		sts _SFR_MEM_ADDR(WDTCSR),r25
    5b48:	90 93 60 00 	sts	0x0060, r25
	
		sei
    5b4c:	78 94       	sei

00005b4e <wait>:

		;generate 8 random cycles
	wait:
		lds r24,sync_pulse ;using the yet unalocated "sync_pulse" as a temp variable
    5b4e:	80 91 a1 08 	lds	r24, 0x08A1
		cpi r24,8
    5b52:	88 30       	cpi	r24, 0x08	; 8
		brlo wait
    5b54:	e0 f3       	brcs	.-8      	; 0x5b4e <wait>

		ret
    5b56:	08 95       	ret

00005b58 <__vector_8>:
	;*************************************
	; Watchdog timer interrupt
	;*************************************
	WDT_vect:
		;save flags & status register
		push r16
    5b58:	0f 93       	push	r16
		push r17
    5b5a:	1f 93       	push	r17

		in r16,_SFR_IO_ADDR(SREG)
    5b5c:	0f b7       	in	r16, 0x3f	; 63
		push r16
    5b5e:	0f 93       	push	r16

		lds r16,sync_pulse
    5b60:	00 91 a1 08 	lds	r16, 0x08A1
		inc r16
    5b64:	03 95       	inc	r16
		sts sync_pulse,r16
    5b66:	00 93 a1 08 	sts	0x08A1, r16

		;XOR succesive timer1 LSB into a int
		sbrc r16,0
    5b6a:	00 fd       	sbrc	r16, 0
		rjmp 1f
    5b6c:	08 c0       	rjmp	.+16     	; 0x5b7e <__vector_8+0x26>
		lds r17,random_value
    5b6e:	10 91 b3 08 	lds	r17, 0x08B3
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    5b72:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    5b76:	10 27       	eor	r17, r16
		sts random_value,r17
    5b78:	10 93 b3 08 	sts	0x08B3, r17
		rjmp 2f
    5b7c:	07 c0       	rjmp	.+14     	; 0x5b8c <__vector_8+0x34>
	1:
		lds r17,random_value+1
    5b7e:	10 91 b4 08 	lds	r17, 0x08B4
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    5b82:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    5b86:	10 27       	eor	r17, r16
		sts random_value+1,r17
    5b88:	10 93 b4 08 	sts	0x08B4, r17
	2:

		ldi r16,(1<<WDIE)+(1<<WDE)
    5b8c:	08 e4       	ldi	r16, 0x48	; 72
		sts _SFR_MEM_ADDR(WDTCSR),r16
    5b8e:	00 93 60 00 	sts	0x0060, r16

		;restore flags
		pop r16
    5b92:	0f 91       	pop	r16
		out _SFR_IO_ADDR(SREG),r16
    5b94:	0f bf       	out	0x3f, r16	; 63
	
		pop r17
    5b96:	1f 91       	pop	r17
		pop r16
    5b98:	0f 91       	pop	r16
		reti
    5b9a:	18 95       	reti

00005b9c <SoftReset>:

/**
 * Performs a software reset
 */
void SoftReset(void){        
	wdt_enable(WDTO_15MS);  
    5b9c:	98 e0       	ldi	r25, 0x08	; 8
    5b9e:	88 e1       	ldi	r24, 0x18	; 24
    5ba0:	0f b6       	in	r0, 0x3f	; 63
    5ba2:	f8 94       	cli
    5ba4:	a8 95       	wdr
    5ba6:	80 93 60 00 	sts	0x0060, r24
    5baa:	0f be       	out	0x3f, r0	; 63
    5bac:	90 93 60 00 	sts	0x0060, r25
	while(1);
    5bb0:	ff cf       	rjmp	.-2      	; 0x5bb0 <SoftReset+0x14>

00005bb2 <ReadButtons>:
void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
	unsigned char i;

	//latch controllers
	JOYPAD_OUT_PORT|=_BV(JOYPAD_LATCH_PIN);
    5bb2:	12 9a       	sbi	0x02, 2	; 2
		}else{
			Wait200ns();
			Wait200ns();
		}	
	#else
		Wait200ns();
    5bb4:	c8 95       	lpm
    5bb6:	c8 95       	lpm
		Wait200ns();
    5bb8:	c8 95       	lpm
    5bba:	c8 95       	lpm
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));
    5bbc:	12 98       	cbi	0x02, 2	; 2
    5bbe:	40 e1       	ldi	r20, 0x10	; 16
	DisplayLogo();
	
}

void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
    5bc0:	80 e0       	ldi	r24, 0x00	; 0
    5bc2:	90 e0       	ldi	r25, 0x00	; 0
    5bc4:	20 e0       	ldi	r18, 0x00	; 0
    5bc6:	30 e0       	ldi	r19, 0x00	; 0


	//read button states
	for(i=0;i<16;i++){

		p1ButtonsLo>>=1;
    5bc8:	36 95       	lsr	r19
    5bca:	27 95       	ror	r18
		p2ButtonsLo>>=1;
    5bcc:	96 95       	lsr	r25
    5bce:	87 95       	ror	r24
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    5bd0:	c8 95       	lpm
    5bd2:	c8 95       	lpm
			Wait200ns();
    5bd4:	c8 95       	lpm
    5bd6:	c8 95       	lpm
		#endif
			
		//pulse clock pin		
		JOYPAD_OUT_PORT&=~(_BV(JOYPAD_CLOCK_PIN));
    5bd8:	13 98       	cbi	0x02, 3	; 2
		
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) p1ButtonsLo|=(1<<15);
    5bda:	00 9b       	sbis	0x00, 0	; 0
    5bdc:	30 68       	ori	r19, 0x80	; 128
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) p2ButtonsLo|=(1<<15);
    5bde:	01 9b       	sbis	0x00, 1	; 0
    5be0:	90 68       	ori	r25, 0x80	; 128
		
		JOYPAD_OUT_PORT|=_BV(JOYPAD_CLOCK_PIN);
    5be2:	13 9a       	sbi	0x02, 3	; 2
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    5be4:	c8 95       	lpm
    5be6:	c8 95       	lpm
			Wait200ns();
    5be8:	c8 95       	lpm
    5bea:	c8 95       	lpm
    5bec:	41 50       	subi	r20, 0x01	; 1
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));


	//read button states
	for(i=0;i<16;i++){
    5bee:	61 f7       	brne	.-40     	; 0x5bc8 <ReadButtons+0x16>
		#endif

	}

	#if JOYSTICK==TYPE_SNES
		joypad1_status_lo=p1ButtonsLo;
    5bf0:	30 93 aa 08 	sts	0x08AA, r19
    5bf4:	20 93 a9 08 	sts	0x08A9, r18
		joypad2_status_lo=p2ButtonsLo;
    5bf8:	90 93 ae 08 	sts	0x08AE, r25
    5bfc:	80 93 ad 08 	sts	0x08AD, r24
	#else
		joypad1_status_lo=p1ButtonsLo&0xff;
		joypad2_status_lo=p2ButtonsLo&0xff;	
	#endif

	if(joypad1_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B) || joypad2_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B)){
    5c00:	80 91 a9 08 	lds	r24, 0x08A9
    5c04:	90 91 aa 08 	lds	r25, 0x08AA
    5c08:	0f 97       	sbiw	r24, 0x0f	; 15
    5c0a:	31 f0       	breq	.+12     	; 0x5c18 <ReadButtons+0x66>
    5c0c:	80 91 ad 08 	lds	r24, 0x08AD
    5c10:	90 91 ae 08 	lds	r25, 0x08AE
    5c14:	0f 97       	sbiw	r24, 0x0f	; 15
    5c16:	11 f4       	brne	.+4      	; 0x5c1c <ReadButtons+0x6a>
		SoftReset();
    5c18:	0e 94 ce 2d 	call	0x5b9c	; 0x5b9c <SoftReset>
    5c1c:	08 95       	ret

00005c1e <ReadControllers>:
 * program when CONTROLLERS_VSYNC_READ==0.
*/
void ReadControllers(){

	//Detect if devices are connected.
	joypadsConnectionStatus=0;
    5c1e:	10 92 dc 08 	sts	0x08DC, r1
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) joypadsConnectionStatus|=1;
    5c22:	00 99       	sbic	0x00, 0	; 0
    5c24:	03 c0       	rjmp	.+6      	; 0x5c2c <ReadControllers+0xe>
    5c26:	81 e0       	ldi	r24, 0x01	; 1
    5c28:	80 93 dc 08 	sts	0x08DC, r24
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) joypadsConnectionStatus|=2;
    5c2c:	01 99       	sbic	0x00, 1	; 0
    5c2e:	05 c0       	rjmp	.+10     	; 0x5c3a <ReadControllers+0x1c>
    5c30:	80 91 dc 08 	lds	r24, 0x08DC
    5c34:	82 60       	ori	r24, 0x02	; 2
    5c36:	80 93 dc 08 	sts	0x08DC, r24
			
	//read the standard buttons
	ReadButtons();
    5c3a:	0c 94 d9 2d 	jmp	0x5bb2	; 0x5bb2 <ReadButtons>

00005c3e <FormatEeprom>:
	return resp;
}

	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {
    5c3e:	cf 93       	push	r28
    5c40:	df 93       	push	r29
    5c42:	c0 e0       	ldi	r28, 0x00	; 0
    5c44:	d0 e0       	ldi	r29, 0x00	; 0
    5c46:	fe 01       	movw	r30, r28
    5c48:	e2 56       	subi	r30, 0x62	; 98
    5c4a:	ff 4f       	sbci	r31, 0xFF	; 255

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
    5c4c:	64 91       	lpm	r22, Z
    5c4e:	ce 01       	movw	r24, r28
    5c50:	0e 94 71 2d 	call	0x5ae2	; 0x5ae2 <WriteEeprom>
    5c54:	21 96       	adiw	r28, 0x01	; 1
	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
    5c56:	c0 32       	cpi	r28, 0x20	; 32
    5c58:	d1 05       	cpc	r29, r1
    5c5a:	a9 f7       	brne	.-22     	; 0x5c46 <FormatEeprom+0x8>
    5c5c:	c0 e2       	ldi	r28, 0x20	; 32
    5c5e:	d0 e0       	ldi	r29, 0x00	; 0
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
    5c60:	6f ef       	ldi	r22, 0xFF	; 255
    5c62:	ce 01       	movw	r24, r28
    5c64:	0e 94 71 2d 	call	0x5ae2	; 0x5ae2 <WriteEeprom>
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
    5c68:	6f ef       	ldi	r22, 0xFF	; 255
    5c6a:	ce 01       	movw	r24, r28
    5c6c:	01 96       	adiw	r24, 0x01	; 1
    5c6e:	0e 94 71 2d 	call	0x5ae2	; 0x5ae2 <WriteEeprom>
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
    5c72:	a0 96       	adiw	r28, 0x20	; 32
    5c74:	c1 15       	cp	r28, r1
    5c76:	88 e0       	ldi	r24, 0x08	; 8
    5c78:	d8 07       	cpc	r29, r24
    5c7a:	91 f7       	brne	.-28     	; 0x5c60 <FormatEeprom+0x22>
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
   }
   
}
    5c7c:	df 91       	pop	r29
    5c7e:	cf 91       	pop	r28
    5c80:	08 95       	ret

00005c82 <isEepromFormatted>:
	  }
   }
}
	
//returns true if the EEPROM has been setup to work with the kernel.
bool isEepromFormatted(){
    5c82:	cf 93       	push	r28
	unsigned id;
	id=ReadEeprom(0)+(ReadEeprom(1)<<8);
    5c84:	80 e0       	ldi	r24, 0x00	; 0
    5c86:	90 e0       	ldi	r25, 0x00	; 0
    5c88:	0e 94 7b 2d 	call	0x5af6	; 0x5af6 <ReadEeprom>
    5c8c:	c8 2f       	mov	r28, r24
    5c8e:	81 e0       	ldi	r24, 0x01	; 1
    5c90:	90 e0       	ldi	r25, 0x00	; 0
    5c92:	0e 94 7b 2d 	call	0x5af6	; 0x5af6 <ReadEeprom>
    5c96:	28 2f       	mov	r18, r24
    5c98:	30 e0       	ldi	r19, 0x00	; 0
    5c9a:	32 2f       	mov	r19, r18
    5c9c:	22 27       	eor	r18, r18
    5c9e:	2c 0f       	add	r18, r28
    5ca0:	31 1d       	adc	r19, r1
	return (id==EEPROM_SIGNATURE);
    5ca2:	81 e0       	ldi	r24, 0x01	; 1
    5ca4:	2a 35       	cpi	r18, 0x5A	; 90
    5ca6:	35 45       	sbci	r19, 0x55	; 85
    5ca8:	09 f0       	breq	.+2      	; 0x5cac <isEepromFormatted+0x2a>
    5caa:	80 e0       	ldi	r24, 0x00	; 0
}
    5cac:	cf 91       	pop	r28
    5cae:	08 95       	ret

00005cb0 <PatchCommand00>:
/*
 * Command 00: Set envelope speed per frame +127/-128, 0=no enveloppe
 * Param:
 */
void PatchCommand00(Track* track, char param){
	track->envelopeStep=param;
    5cb0:	fc 01       	movw	r30, r24
    5cb2:	67 87       	std	Z+15, r22	; 0x0f
    5cb4:	08 95       	ret

00005cb6 <PatchCommand01>:
 * Param:
 */
void PatchCommand01(Track* track, char param){
	(void)track; //to remove unused warning
	#if MIXER_CHAN4_TYPE == 0
		mixer.channels.type.noise.barrel=0x0101;
    5cb6:	e8 eb       	ldi	r30, 0xB8	; 184
    5cb8:	f8 e0       	ldi	r31, 0x08	; 8
    5cba:	81 e0       	ldi	r24, 0x01	; 1
    5cbc:	91 e0       	ldi	r25, 0x01	; 1
    5cbe:	95 8b       	std	Z+21, r25	; 0x15
    5cc0:	84 8b       	std	Z+20, r24	; 0x14
		mixer.channels.type.noise.params=param;
    5cc2:	63 8b       	std	Z+19, r22	; 0x13
    5cc4:	08 95       	ret

00005cc6 <PatchCommand05>:
}
/*
 * Command 05: End of note/fx
 * Param:
 */
void PatchCommand05(Track* track, char param){
    5cc6:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags&=~(TRACK_FLAGS_PLAYING+TRACK_FLAGS_PRIORITY);	//patchPlaying=false,priority=0	
    5cc8:	90 81       	ld	r25, Z
    5cca:	9f 75       	andi	r25, 0x5F	; 95
    5ccc:	90 83       	st	Z, r25
    5cce:	08 95       	ret

00005cd0 <PatchCommand06>:

/*
 * Command 06: Note hold
 * Param:
 */
void PatchCommand06(Track* track, char param){
    5cd0:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags|=TRACK_FLAGS_HOLD_ENV; //patchEnvelopeHold=true;
    5cd2:	90 81       	ld	r25, Z
    5cd4:	90 64       	ori	r25, 0x40	; 64
    5cd6:	90 83       	st	Z, r25
    5cd8:	08 95       	ret

00005cda <PatchCommand07>:
 * Command 07: Set envelope volume
 * Param:
 */

void PatchCommand07(Track* track, char param){
	track->envelopeVol=param;
    5cda:	fc 01       	movw	r30, r24
    5cdc:	66 87       	std	Z+14, r22	; 0x0e
    5cde:	08 95       	ret

00005ce0 <PatchCommand09>:
 * Command 09: Set tremolo level
 * Param:
*/

void PatchCommand09(Track* track, char param){
	track->tremoloLevel=param;
    5ce0:	fc 01       	movw	r30, r24
    5ce2:	62 87       	std	Z+10, r22	; 0x0a
    5ce4:	08 95       	ret

00005ce6 <PatchCommand10>:
/*
 * Command 10: Set tremolo rate
 * Param:
*/
void PatchCommand10(Track* track, char param){
	track->tremoloRate=param;
    5ce6:	fc 01       	movw	r30, r24
    5ce8:	63 87       	std	Z+11, r22	; 0x0b
    5cea:	08 95       	ret

00005cec <PatchCommand11>:
/*
 * Command 11: Pitch slide (linear) 
 * Param: (+/-) half steps to slide to
*/

void PatchCommand11(Track* track, char param){
    5cec:	cf 93       	push	r28
    5cee:	df 93       	push	r29
    5cf0:	ec 01       	movw	r28, r24
    5cf2:	46 2f       	mov	r20, r22
	//slide to note from current note
	s16 currentStep,targetStep,delta;	
	
	currentStep=pgm_read_word(&(steptable[track->note]));
    5cf4:	29 81       	ldd	r18, Y+1	; 0x01
    5cf6:	30 e0       	ldi	r19, 0x00	; 0
    5cf8:	f9 01       	movw	r30, r18
    5cfa:	ee 0f       	add	r30, r30
    5cfc:	ff 1f       	adc	r31, r31
    5cfe:	e8 5f       	subi	r30, 0xF8	; 248
    5d00:	f9 49       	sbci	r31, 0x99	; 153
    5d02:	65 91       	lpm	r22, Z+
    5d04:	74 91       	lpm	r23, Z
	targetStep=pgm_read_word(&(steptable[track->note+param]));	
    5d06:	f9 01       	movw	r30, r18
    5d08:	e4 0f       	add	r30, r20
    5d0a:	f1 1d       	adc	r31, r1
    5d0c:	47 fd       	sbrc	r20, 7
    5d0e:	fa 95       	dec	r31
    5d10:	ee 0f       	add	r30, r30
    5d12:	ff 1f       	adc	r31, r31
    5d14:	e8 5f       	subi	r30, 0xF8	; 248
    5d16:	f9 49       	sbci	r31, 0x99	; 153
    5d18:	85 91       	lpm	r24, Z+
    5d1a:	94 91       	lpm	r25, Z
	delta=((targetStep-currentStep)/track->slideSpeed);
    5d1c:	86 1b       	sub	r24, r22
    5d1e:	97 0b       	sbc	r25, r23
    5d20:	68 85       	ldd	r22, Y+8	; 0x08
    5d22:	70 e0       	ldi	r23, 0x00	; 0
    5d24:	0e 94 f2 3b 	call	0x77e4	; 0x77e4 <__divmodhi4>
	if(delta==0)delta++;
    5d28:	61 15       	cp	r22, r1
    5d2a:	71 05       	cpc	r23, r1
    5d2c:	11 f4       	brne	.+4      	; 0x5d32 <PatchCommand11+0x46>
    5d2e:	61 e0       	ldi	r22, 0x01	; 1
    5d30:	70 e0       	ldi	r23, 0x00	; 0

	mixer.channels.all[track->channel].step+=delta;
    5d32:	ea 81       	ldd	r30, Y+2	; 0x02
    5d34:	86 e0       	ldi	r24, 0x06	; 6
    5d36:	e8 9f       	mul	r30, r24
    5d38:	f0 01       	movw	r30, r0
    5d3a:	11 24       	eor	r1, r1
    5d3c:	e8 54       	subi	r30, 0x48	; 72
    5d3e:	f7 4f       	sbci	r31, 0xF7	; 247
    5d40:	81 81       	ldd	r24, Z+1	; 0x01
    5d42:	92 81       	ldd	r25, Z+2	; 0x02
    5d44:	86 0f       	add	r24, r22
    5d46:	97 1f       	adc	r25, r23
    5d48:	92 83       	std	Z+2, r25	; 0x02
    5d4a:	81 83       	std	Z+1, r24	; 0x01
	
	track->slideStep=delta;
    5d4c:	7e 83       	std	Y+6, r23	; 0x06
    5d4e:	6d 83       	std	Y+5, r22	; 0x05
	track->flags|=TRACK_FLAGS_SLIDING;
    5d50:	88 81       	ld	r24, Y
    5d52:	88 60       	ori	r24, 0x08	; 8
    5d54:	88 83       	st	Y, r24
	track->slideNote=track->note+param;
    5d56:	89 81       	ldd	r24, Y+1	; 0x01
    5d58:	48 0f       	add	r20, r24
    5d5a:	4f 83       	std	Y+7, r20	; 0x07
}
    5d5c:	df 91       	pop	r29
    5d5e:	cf 91       	pop	r28
    5d60:	08 95       	ret

00005d62 <PatchCommand12>:
/*
 * Command 12: Pitch slide speed 
 * Param: slide speed (fixed 4:4)
 */
void PatchCommand12(Track* track, char param){
	track->slideSpeed=param;
    5d62:	fc 01       	movw	r30, r24
    5d64:	60 87       	std	Z+8, r22	; 0x08
    5d66:	08 95       	ret

00005d68 <PatchCommand13>:
 *  Command 13: Loop start
 * Description: Defines the start of a loop. Works in conjunction with command 14 (PC_LOOP_END).
 *		 Param: loop count
 */
void PatchCommand13(Track* track, char param){
	track->loopCount=(u8)param;
    5d68:	fc 01       	movw	r30, r24
    5d6a:	64 83       	std	Z+4, r22	; 0x04
    5d6c:	08 95       	ret

00005d6e <PatchCommand02>:
/*
 * Command 02: Set wave
 * Param:
 */
void PatchCommand02(Track* track, char param){
	SetMixerWave(track->channel,param);
    5d6e:	fc 01       	movw	r30, r24
    5d70:	82 81       	ldd	r24, Z+2	; 0x02
    5d72:	0c 94 9b 32 	jmp	0x6536	; 0x6536 <SetMixerWave>

00005d76 <PatchCommand03>:
}
/*
 * Command 03: Note up * param
 * Param:
 */
void PatchCommand03(Track* track, char param){
    5d76:	fc 01       	movw	r30, r24
	track->note+=param;
    5d78:	91 81       	ldd	r25, Z+1	; 0x01
    5d7a:	69 0f       	add	r22, r25
    5d7c:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(track->channel,track->note);
    5d7e:	82 81       	ldd	r24, Z+2	; 0x02
    5d80:	0c 94 84 32 	jmp	0x6508	; 0x6508 <SetMixerNote>

00005d84 <PatchCommand04>:
}
/*
 * Command 04: Note down * param
 * Param:
 */
void PatchCommand04(Track* track, char param){
    5d84:	fc 01       	movw	r30, r24
	track->note-=param;
    5d86:	91 81       	ldd	r25, Z+1	; 0x01
    5d88:	96 1b       	sub	r25, r22
    5d8a:	69 2f       	mov	r22, r25
    5d8c:	91 83       	std	Z+1, r25	; 0x01
	SetMixerNote(track->channel,track->note);
    5d8e:	82 81       	ldd	r24, Z+2	; 0x02
    5d90:	0c 94 84 32 	jmp	0x6508	; 0x6508 <SetMixerNote>

00005d94 <PatchCommand08>:
/*
 * Command 08: Set Note/Pitch
 * Param:
 */

void PatchCommand08(Track* track, char param){
    5d94:	1f 93       	push	r17
    5d96:	cf 93       	push	r28
    5d98:	df 93       	push	r29
    5d9a:	ec 01       	movw	r28, r24
    5d9c:	16 2f       	mov	r17, r22
	SetMixerNote(track->channel,param);
    5d9e:	8a 81       	ldd	r24, Y+2	; 0x02
    5da0:	0e 94 84 32 	call	0x6508	; 0x6508 <SetMixerNote>
	track->note=param;
    5da4:	19 83       	std	Y+1, r17	; 0x01
	track->flags &= ~(TRACK_FLAGS_SLIDING);	
    5da6:	88 81       	ld	r24, Y
    5da8:	87 7f       	andi	r24, 0xF7	; 247
    5daa:	88 83       	st	Y, r24
}
    5dac:	df 91       	pop	r29
    5dae:	cf 91       	pop	r28
    5db0:	1f 91       	pop	r17
    5db2:	08 95       	ret

00005db4 <PatchCommand14>:
 *					1,PC_NOTE_DOWN,3,
 *					0,PC_LOOP_END,2,
 *					0,PATCH_END  
 *				};
 */
void PatchCommand14(Track* track, char param){
    5db4:	dc 01       	movw	r26, r24
	if(track->loopCount>0){
    5db6:	14 96       	adiw	r26, 0x04	; 4
    5db8:	8c 91       	ld	r24, X
    5dba:	14 97       	sbiw	r26, 0x04	; 4
    5dbc:	88 23       	and	r24, r24
    5dbe:	19 f1       	breq	.+70     	; 0x5e06 <PatchCommand14+0x52>
    5dc0:	55 96       	adiw	r26, 0x15	; 21
    5dc2:	2d 91       	ld	r18, X+
    5dc4:	3c 91       	ld	r19, X
    5dc6:	56 97       	sbiw	r26, 0x16	; 22
		//track->patchCommandStreamPos=track->loopStart;
		if(param!=0){
    5dc8:	66 23       	and	r22, r22
    5dca:	79 f0       	breq	.+30     	; 0x5dea <PatchCommand14+0x36>
			track->patchCommandStreamPos-=((param+1)*3);
    5dcc:	77 27       	eor	r23, r23
    5dce:	67 fd       	sbrc	r22, 7
    5dd0:	70 95       	com	r23
    5dd2:	6f 5f       	subi	r22, 0xFF	; 255
    5dd4:	7f 4f       	sbci	r23, 0xFF	; 255
    5dd6:	ab 01       	movw	r20, r22
    5dd8:	44 0f       	add	r20, r20
    5dda:	55 1f       	adc	r21, r21
    5ddc:	64 0f       	add	r22, r20
    5dde:	75 1f       	adc	r23, r21
    5de0:	26 1b       	sub	r18, r22
    5de2:	37 0b       	sbc	r19, r23
    5de4:	09 c0       	rjmp	.+18     	; 0x5df8 <PatchCommand14+0x44>
			while(1){
				track->patchCommandStreamPos-=3;
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    5de6:	ef 3f       	cpi	r30, 0xFF	; 255
    5de8:	39 f0       	breq	.+14     	; 0x5df8 <PatchCommand14+0x44>
		if(param!=0){
			track->patchCommandStreamPos-=((param+1)*3);
		}else{
			u8 command;
			while(1){
				track->patchCommandStreamPos-=3;
    5dea:	23 50       	subi	r18, 0x03	; 3
    5dec:	31 09       	sbc	r19, r1
    5dee:	f9 01       	movw	r30, r18
    5df0:	32 97       	sbiw	r30, 0x02	; 2
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
    5df2:	e4 91       	lpm	r30, Z
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    5df4:	ed 30       	cpi	r30, 0x0D	; 13
    5df6:	b9 f7       	brne	.-18     	; 0x5de6 <PatchCommand14+0x32>
    5df8:	56 96       	adiw	r26, 0x16	; 22
    5dfa:	3c 93       	st	X, r19
    5dfc:	2e 93       	st	-X, r18
    5dfe:	55 97       	sbiw	r26, 0x15	; 21
			}
		}
		track->loopCount--;
    5e00:	81 50       	subi	r24, 0x01	; 1
    5e02:	14 96       	adiw	r26, 0x04	; 4
    5e04:	8c 93       	st	X, r24
    5e06:	08 95       	ret

00005e08 <InitMusicPlayer>:

const Patch *patchPointers;

void InitMusicPlayer(const Patch *patchPointersParam){

	patchPointers=patchPointersParam;
    5e08:	90 93 55 09 	sts	0x0955, r25
    5e0c:	80 93 54 09 	sts	0x0954, r24

	masterVolume=DEFAULT_MASTER_VOL;
    5e10:	8f e6       	ldi	r24, 0x6F	; 111
    5e12:	80 93 57 09 	sts	0x0957, r24
#if MIDI_IN == ENABLED
	InitUartRxBuffer();
	lastMidiInStatus=0;
#endif

	playSong=false;
    5e16:	10 92 b6 08 	sts	0x08B6, r1
    5e1a:	ef ee       	ldi	r30, 0xEF	; 239
    5e1c:	f8 e0       	ldi	r31, 0x08	; 8

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    5e1e:	80 e0       	ldi	r24, 0x00	; 0
		tracks[t].channel=t;
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    5e20:	90 e1       	ldi	r25, 0x10	; 16
		tracks[t].noteVol=0;
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    5e22:	3f ef       	ldi	r19, 0xFF	; 255
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
    5e24:	28 e1       	ldi	r18, 0x18	; 24
    5e26:	df 01       	movw	r26, r30
    5e28:	1e 97       	sbiw	r26, 0x0e	; 14

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].channel=t;
    5e2a:	8c 93       	st	X, r24
    5e2c:	12 97       	sbiw	r26, 0x02	; 2
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    5e2e:	9c 93       	st	X, r25
    5e30:	1d 96       	adiw	r26, 0x0d	; 13
		tracks[t].noteVol=0;
    5e32:	1c 92       	st	X, r1
    5e34:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    5e36:	3c 93       	st	X, r19
		tracks[t].patchNo=DEFAULT_PATCH;
    5e38:	10 82       	st	Z, r1
    5e3a:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].tremoloRate=24; //~6hz
    5e3c:	2c 93       	st	X, r18
    5e3e:	13 97       	sbiw	r26, 0x03	; 3
		tracks[t].slideSpeed=0x10;
    5e40:	9c 93       	st	X, r25
#endif

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    5e42:	8f 5f       	subi	r24, 0xFF	; 255
    5e44:	77 96       	adiw	r30, 0x17	; 23
    5e46:	85 30       	cpi	r24, 0x05	; 5
    5e48:	71 f7       	brne	.-36     	; 0x5e26 <InitMusicPlayer+0x1e>
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
		tracks[t].slideSpeed=0x10;
	}

}
    5e4a:	08 95       	ret

00005e4c <ReadVarLen>:
}



unsigned int ReadVarLen(const char **songPos)
{
    5e4c:	dc 01       	movw	r26, r24
    unsigned int value;
    unsigned char c;


    if ( (value = pgm_read_byte((*songPos)++)) & 0x80 )
    5e4e:	ed 91       	ld	r30, X+
    5e50:	fc 91       	ld	r31, X
    5e52:	11 97       	sbiw	r26, 0x01	; 1
    5e54:	9f 01       	movw	r18, r30
    5e56:	2f 5f       	subi	r18, 0xFF	; 255
    5e58:	3f 4f       	sbci	r19, 0xFF	; 255
    5e5a:	11 96       	adiw	r26, 0x01	; 1
    5e5c:	3c 93       	st	X, r19
    5e5e:	2e 93       	st	-X, r18
    5e60:	e4 91       	lpm	r30, Z
    5e62:	e7 fd       	sbrc	r30, 7
    5e64:	03 c0       	rjmp	.+6      	; 0x5e6c <ReadVarLen+0x20>
    5e66:	8e 2f       	mov	r24, r30
    5e68:	90 e0       	ldi	r25, 0x00	; 0
    5e6a:	08 95       	ret
    {
       value &= 0x7F;
    5e6c:	ef 77       	andi	r30, 0x7F	; 127
    5e6e:	8e 2f       	mov	r24, r30
    5e70:	90 e0       	ldi	r25, 0x00	; 0
       do
       {
         value = (value << 7) + ((c = pgm_read_byte((*songPos)++)) & 0x7F);
    5e72:	96 95       	lsr	r25
    5e74:	98 2f       	mov	r25, r24
    5e76:	88 27       	eor	r24, r24
    5e78:	97 95       	ror	r25
    5e7a:	87 95       	ror	r24
    5e7c:	2f 5f       	subi	r18, 0xFF	; 255
    5e7e:	3f 4f       	sbci	r19, 0xFF	; 255
    5e80:	f9 01       	movw	r30, r18
    5e82:	31 97       	sbiw	r30, 0x01	; 1
    5e84:	e4 91       	lpm	r30, Z
    5e86:	4e 2f       	mov	r20, r30
    5e88:	4f 77       	andi	r20, 0x7F	; 127
    5e8a:	84 0f       	add	r24, r20
    5e8c:	91 1d       	adc	r25, r1
       } while (c & 0x80);
    5e8e:	e7 fd       	sbrc	r30, 7
    5e90:	f0 cf       	rjmp	.-32     	; 0x5e72 <ReadVarLen+0x26>
    5e92:	2d 93       	st	X+, r18
    5e94:	3c 93       	st	X, r19
    }


    return value;
}
    5e96:	08 95       	ret

00005e98 <TriggerCommon>:




void TriggerCommon(Track* track,u8 patch,u8 volume,u8 note){
    5e98:	ef 92       	push	r14
    5e9a:	ff 92       	push	r15
    5e9c:	0f 93       	push	r16
    5e9e:	1f 93       	push	r17
    5ea0:	cf 93       	push	r28
    5ea2:	df 93       	push	r29
    5ea4:	1f 92       	push	r1
    5ea6:	cd b7       	in	r28, 0x3d	; 61
    5ea8:	de b7       	in	r29, 0x3e	; 62
    5eaa:	7c 01       	movw	r14, r24
    5eac:	16 2f       	mov	r17, r22
		
	bool isFx = (track->flags&TRACK_FLAGS_PRIORITY);
    5eae:	fc 01       	movw	r30, r24
    5eb0:	80 81       	ld	r24, Z
    5eb2:	08 2f       	mov	r16, r24
    5eb4:	00 1f       	adc	r16, r16
    5eb6:	00 27       	eor	r16, r16
    5eb8:	00 1f       	adc	r16, r16

	track->envelopeStep=0; 
    5eba:	17 86       	std	Z+15, r1	; 0x0f
	track->envelopeVol=0xff; 
    5ebc:	9f ef       	ldi	r25, 0xFF	; 255
    5ebe:	96 87       	std	Z+14, r25	; 0x0e
	track->noteVol=volume;
    5ec0:	45 87       	std	Z+13, r20	; 0x0d
	track->patchPlayingTime=0;
    5ec2:	14 8a       	std	Z+20, r1	; 0x14
	track->flags&=(~(TRACK_FLAGS_HOLD_ENV|TRACK_FLAGS_SLIDING));
    5ec4:	87 7b       	andi	r24, 0xB7	; 183
    5ec6:	80 83       	st	Z, r24
	track->tremoloLevel=0;
    5ec8:	12 86       	std	Z+10, r1	; 0x0a
	track->tremoloPos=0;
    5eca:	11 86       	std	Z+9, r1	; 0x09
	track->note=note;
    5ecc:	21 83       	std	Z+1, r18	; 0x01
	track->loopCount=0;
    5ece:	14 82       	std	Z+4, r1	; 0x04

#if MUSIC_ENGINE == MIDI
	track->expressionVol=DEFAULT_EXPRESSION_VOL;
    5ed0:	93 83       	std	Z+3, r25	; 0x03
#endif

	#if SOUND_MIXER == MIXER_TYPE_INLINE

		if(track->channel==3){
    5ed2:	82 81       	ldd	r24, Z+2	; 0x02
    5ed4:	83 30       	cpi	r24, 0x03	; 3
    5ed6:	69 f4       	brne	.+26     	; 0x5ef2 <TriggerCommon+0x5a>
			//noise channel		
			if(!isFx) patch=note;			
    5ed8:	01 11       	cpse	r16, r1
    5eda:	01 c0       	rjmp	.+2      	; 0x5ede <TriggerCommon+0x46>
    5edc:	12 2f       	mov	r17, r18
			mixer.channels.type.noise.barrel=0x0101;				
    5ede:	81 e0       	ldi	r24, 0x01	; 1
    5ee0:	91 e0       	ldi	r25, 0x01	; 1
    5ee2:	90 93 cd 08 	sts	0x08CD, r25
    5ee6:	80 93 cc 08 	sts	0x08CC, r24
			mixer.channels.type.noise.params=1; //default (15bits,no divider)
    5eea:	81 e0       	ldi	r24, 0x01	; 1
    5eec:	80 93 cb 08 	sts	0x08CB, r24
    5ef0:	39 c0       	rjmp	.+114    	; 0x5f64 <TriggerCommon+0xcc>

		#if SOUND_CHANNEL_5_ENABLE==1		

		}else if(track->channel==4){
    5ef2:	84 30       	cpi	r24, 0x04	; 4
    5ef4:	69 f5       	brne	.+90     	; 0x5f50 <TriggerCommon+0xb8>
				//PCM channel					
				mixer.channels.type.pcm.positionFrac=0;
    5ef6:	10 92 d3 08 	sts	0x08D3, r1
				const char *pos=(const char*)pgm_read_word(&(patchPointers[patch].pcmData));
    5efa:	80 91 54 09 	lds	r24, 0x0954
    5efe:	90 91 55 09 	lds	r25, 0x0955
    5f02:	f9 e0       	ldi	r31, 0x09	; 9
    5f04:	6f 9f       	mul	r22, r31
    5f06:	80 0d       	add	r24, r0
    5f08:	91 1d       	adc	r25, r1
    5f0a:	11 24       	eor	r1, r1
    5f0c:	fc 01       	movw	r30, r24
    5f0e:	31 96       	adiw	r30, 0x01	; 1
    5f10:	a5 91       	lpm	r26, Z+
    5f12:	b4 91       	lpm	r27, Z
				mixer.channels.type.pcm.position=pos;				
    5f14:	b0 93 d5 08 	sts	0x08D5, r27
    5f18:	a0 93 d4 08 	sts	0x08D4, r26
				mixer.pcmLoopLenght=pgm_read_word(&(patchPointers[patch].loopEnd))-pgm_read_word(&(patchPointers[patch].loopStart));
    5f1c:	ac 01       	movw	r20, r24
    5f1e:	49 5f       	subi	r20, 0xF9	; 249
    5f20:	5f 4f       	sbci	r21, 0xFF	; 255
    5f22:	fa 01       	movw	r30, r20
    5f24:	65 91       	lpm	r22, Z+
    5f26:	74 91       	lpm	r23, Z
    5f28:	05 96       	adiw	r24, 0x05	; 5
    5f2a:	fc 01       	movw	r30, r24
    5f2c:	85 91       	lpm	r24, Z+
    5f2e:	94 91       	lpm	r25, Z
    5f30:	68 1b       	sub	r22, r24
    5f32:	79 0b       	sbc	r23, r25
    5f34:	70 93 d7 08 	sts	0x08D7, r23
    5f38:	60 93 d6 08 	sts	0x08D6, r22
				mixer.pcmLoopEnd=pos+pgm_read_word(&(patchPointers[patch].loopEnd));
    5f3c:	fa 01       	movw	r30, r20
    5f3e:	85 91       	lpm	r24, Z+
    5f40:	94 91       	lpm	r25, Z
    5f42:	a8 0f       	add	r26, r24
    5f44:	b9 1f       	adc	r27, r25
    5f46:	b0 93 d9 08 	sts	0x08D9, r27
    5f4a:	a0 93 d8 08 	sts	0x08D8, r26
    5f4e:	05 c0       	rjmp	.+10     	; 0x5f5a <TriggerCommon+0xc2>
				SetMixerNote(track->channel,note);
		#endif	

		}else{					
			//wave channels					
			SetMixerWave(track->channel,0);//default wave
    5f50:	60 e0       	ldi	r22, 0x00	; 0
    5f52:	29 83       	std	Y+1, r18	; 0x01
    5f54:	0e 94 9b 32 	call	0x6536	; 0x6536 <SetMixerWave>
			SetMixerNote(track->channel,note);
    5f58:	29 81       	ldd	r18, Y+1	; 0x01
    5f5a:	62 2f       	mov	r22, r18
    5f5c:	f7 01       	movw	r30, r14
    5f5e:	82 81       	ldd	r24, Z+2	; 0x02
    5f60:	0e 94 84 32 	call	0x6508	; 0x6508 <SetMixerNote>
		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
		track->fxPatchNo=patch;
    5f64:	f7 01       	movw	r30, r14

		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
    5f66:	00 23       	and	r16, r16
    5f68:	11 f0       	breq	.+4      	; 0x5f6e <TriggerCommon+0xd6>
		track->fxPatchNo=patch;
    5f6a:	11 8b       	std	Z+17, r17	; 0x11
    5f6c:	01 c0       	rjmp	.+2      	; 0x5f70 <TriggerCommon+0xd8>
	}else{
		track->patchNo=patch;	
    5f6e:	10 8b       	std	Z+16, r17	; 0x10
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
    5f70:	e0 91 54 09 	lds	r30, 0x0954
    5f74:	f0 91 55 09 	lds	r31, 0x0955
    5f78:	39 e0       	ldi	r19, 0x09	; 9
    5f7a:	13 9f       	mul	r17, r19
    5f7c:	e0 0d       	add	r30, r0
    5f7e:	f1 1d       	adc	r31, r1
    5f80:	11 24       	eor	r1, r1
    5f82:	33 96       	adiw	r30, 0x03	; 3
    5f84:	85 91       	lpm	r24, Z+
    5f86:	94 91       	lpm	r25, Z
	if(pos==NULL){
		track->patchCommandStreamPos=NULL;
    5f88:	f7 01       	movw	r30, r14
	}else{
		track->patchNo=patch;	
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
	if(pos==NULL){
    5f8a:	00 97       	sbiw	r24, 0x00	; 0
    5f8c:	19 f4       	brne	.+6      	; 0x5f94 <TriggerCommon+0xfc>
		track->patchCommandStreamPos=NULL;
    5f8e:	16 8a       	std	Z+22, r1	; 0x16
    5f90:	15 8a       	std	Z+21, r1	; 0x15
    5f92:	08 c0       	rjmp	.+16     	; 0x5fa4 <TriggerCommon+0x10c>
	}else{
		track->patchCurrDeltaTime=0;
    5f94:	13 8a       	std	Z+19, r1	; 0x13
		track->patchNextDeltaTime=pgm_read_byte(pos++);
    5f96:	fc 01       	movw	r30, r24
    5f98:	24 91       	lpm	r18, Z
    5f9a:	f7 01       	movw	r30, r14
    5f9c:	22 8b       	std	Z+18, r18	; 0x12
    5f9e:	01 96       	adiw	r24, 0x01	; 1
		track->patchCommandStreamPos=pos;
    5fa0:	96 8b       	std	Z+22, r25	; 0x16
    5fa2:	85 8b       	std	Z+21, r24	; 0x15
	}

}
    5fa4:	0f 90       	pop	r0
    5fa6:	df 91       	pop	r29
    5fa8:	cf 91       	pop	r28
    5faa:	1f 91       	pop	r17
    5fac:	0f 91       	pop	r16
    5fae:	ff 90       	pop	r15
    5fb0:	ef 90       	pop	r14
    5fb2:	08 95       	ret

00005fb4 <TriggerFx>:

/* Trigger a sound effect.
 * Method allocates the channel based on priority.
 * Retrig: if this fx if already playing on a track, reuse same track.
 */
void TriggerFx(unsigned char patch,unsigned char volume,bool retrig){
    5fb4:	cf 93       	push	r28
    5fb6:	df 93       	push	r29
	unsigned char channel;
	
	unsigned char type=(unsigned char)pgm_read_byte(&(patchPointers[patch].type));
    5fb8:	e0 91 54 09 	lds	r30, 0x0954
    5fbc:	f0 91 55 09 	lds	r31, 0x0955
    5fc0:	99 e0       	ldi	r25, 0x09	; 9
    5fc2:	89 9f       	mul	r24, r25
    5fc4:	e0 0d       	add	r30, r0
    5fc6:	f1 1d       	adc	r31, r1
    5fc8:	11 24       	eor	r1, r1
    5fca:	e4 91       	lpm	r30, Z

	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
    5fcc:	e1 30       	cpi	r30, 0x01	; 1
    5fce:	e9 f0       	breq	.+58     	; 0x600a <TriggerFx+0x56>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
    5fd0:	e2 30       	cpi	r30, 0x02	; 2
    5fd2:	e9 f0       	breq	.+58     	; 0x600e <TriggerFx+0x5a>
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
    5fd4:	20 91 f6 08 	lds	r18, 0x08F6
    5fd8:	27 ff       	sbrs	r18, 7
    5fda:	1d c0       	rjmp	.+58     	; 0x6016 <TriggerFx+0x62>
    5fdc:	20 91 07 09 	lds	r18, 0x0907
    5fe0:	28 13       	cpse	r18, r24
    5fe2:	02 c0       	rjmp	.+4      	; 0x5fe8 <TriggerFx+0x34>
    5fe4:	41 11       	cpse	r20, r1
    5fe6:	17 c0       	rjmp	.+46     	; 0x6016 <TriggerFx+0x62>
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
    5fe8:	20 91 0d 09 	lds	r18, 0x090D
    5fec:	27 ff       	sbrs	r18, 7
    5fee:	11 c0       	rjmp	.+34     	; 0x6012 <TriggerFx+0x5e>
    5ff0:	20 91 1e 09 	lds	r18, 0x091E
    5ff4:	28 13       	cpse	r18, r24
    5ff6:	02 c0       	rjmp	.+4      	; 0x5ffc <TriggerFx+0x48>
    5ff8:	41 11       	cpse	r20, r1
    5ffa:	0b c0       	rjmp	.+22     	; 0x6012 <TriggerFx+0x5e>
		channel=2;
	}else{
		//both channels have fx playing, use the oldest one
		if(tracks[1].patchPlayingTime>tracks[2].patchPlayingTime){
    5ffc:	20 91 0a 09 	lds	r18, 0x090A
    6000:	90 91 21 09 	lds	r25, 0x0921
    6004:	92 17       	cp	r25, r18
    6006:	28 f4       	brcc	.+10     	; 0x6012 <TriggerFx+0x5e>
    6008:	06 c0       	rjmp	.+12     	; 0x6016 <TriggerFx+0x62>
	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
		//noise or PCM channel fx		
		channel=3;
    600a:	c3 e0       	ldi	r28, 0x03	; 3
    600c:	05 c0       	rjmp	.+10     	; 0x6018 <TriggerFx+0x64>
	}else if(type==2){
		channel=4;
    600e:	c4 e0       	ldi	r28, 0x04	; 4
    6010:	03 c0       	rjmp	.+6      	; 0x6018 <TriggerFx+0x64>
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
		channel=2;
    6012:	c2 e0       	ldi	r28, 0x02	; 2
    6014:	01 c0       	rjmp	.+2      	; 0x6018 <TriggerFx+0x64>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
    6016:	c1 e0       	ldi	r28, 0x01	; 1
			channel=2;
		}
	}				

	Track* track=&tracks[channel];
	track->flags=TRACK_FLAGS_PRIORITY; //priority=1;
    6018:	97 e1       	ldi	r25, 0x17	; 23
    601a:	c9 9f       	mul	r28, r25
    601c:	e0 01       	movw	r28, r0
    601e:	11 24       	eor	r1, r1
    6020:	c1 52       	subi	r28, 0x21	; 33
    6022:	d7 4f       	sbci	r29, 0xF7	; 247
    6024:	90 e8       	ldi	r25, 0x80	; 128
    6026:	98 83       	st	Y, r25
	track->patchCommandStreamPos = NULL;
    6028:	1e 8a       	std	Y+22, r1	; 0x16
    602a:	1d 8a       	std	Y+21, r1	; 0x15
	TriggerCommon(track,patch,volume,80);
    602c:	20 e5       	ldi	r18, 0x50	; 80
    602e:	46 2f       	mov	r20, r22
    6030:	68 2f       	mov	r22, r24
    6032:	ce 01       	movw	r24, r28
    6034:	0e 94 4c 2f 	call	0x5e98	; 0x5e98 <TriggerCommon>
	track->flags|=TRACK_FLAGS_PLAYING;
    6038:	88 81       	ld	r24, Y
    603a:	80 62       	ori	r24, 0x20	; 32
    603c:	88 83       	st	Y, r24
}
    603e:	df 91       	pop	r29
    6040:	cf 91       	pop	r28
    6042:	08 95       	ret

00006044 <TriggerNote>:


void TriggerNote(unsigned char channel,unsigned char patch,unsigned char note,unsigned char volume){
    6044:	cf 93       	push	r28
    6046:	df 93       	push	r29
	Track* track=&tracks[channel];

	//allow only other music notes 
	if((track->flags&TRACK_FLAGS_PLAYING)==0 || (track->flags&TRACK_FLAGS_PRIORITY)==0){
    6048:	a8 2f       	mov	r26, r24
    604a:	b0 e0       	ldi	r27, 0x00	; 0
    604c:	97 e1       	ldi	r25, 0x17	; 23
    604e:	89 9f       	mul	r24, r25
    6050:	f0 01       	movw	r30, r0
    6052:	11 24       	eor	r1, r1
    6054:	e1 52       	subi	r30, 0x21	; 33
    6056:	f7 4f       	sbci	r31, 0xF7	; 247
    6058:	80 81       	ld	r24, Z
    605a:	85 ff       	sbrs	r24, 5
    605c:	02 c0       	rjmp	.+4      	; 0x6062 <TriggerNote+0x1e>
    605e:	87 fd       	sbrc	r24, 7
    6060:	2e c0       	rjmp	.+92     	; 0x60be <TriggerNote+0x7a>
			
		if(volume==0){ //note-off received
    6062:	21 11       	cpse	r18, r1
    6064:	18 c0       	rjmp	.+48     	; 0x6096 <TriggerNote+0x52>

			
			//cut note if there's no envelope & no note hold
			if(track->envelopeStep==0 && !(track->flags&TRACK_FLAGS_HOLD_ENV)){
    6066:	97 e1       	ldi	r25, 0x17	; 23
    6068:	9a 9f       	mul	r25, r26
    606a:	f0 01       	movw	r30, r0
    606c:	9b 9f       	mul	r25, r27
    606e:	f0 0d       	add	r31, r0
    6070:	11 24       	eor	r1, r1
    6072:	e1 52       	subi	r30, 0x21	; 33
    6074:	f7 4f       	sbci	r31, 0xF7	; 247
    6076:	97 85       	ldd	r25, Z+15	; 0x0f
    6078:	91 11       	cpse	r25, r1
    607a:	02 c0       	rjmp	.+4      	; 0x6080 <TriggerNote+0x3c>
    607c:	86 ff       	sbrs	r24, 6
				track->noteVol=0;
    607e:	15 86       	std	Z+13, r1	; 0x0d
			}

			track->flags&=(~TRACK_FLAGS_HOLD_ENV);//patchEnvelopeHold=false;
    6080:	97 e1       	ldi	r25, 0x17	; 23
    6082:	9a 9f       	mul	r25, r26
    6084:	f0 01       	movw	r30, r0
    6086:	9b 9f       	mul	r25, r27
    6088:	f0 0d       	add	r31, r0
    608a:	11 24       	eor	r1, r1
    608c:	e1 52       	subi	r30, 0x21	; 33
    608e:	f7 4f       	sbci	r31, 0xF7	; 247
    6090:	8f 7b       	andi	r24, 0xBF	; 191
    6092:	80 83       	st	Z, r24
    6094:	14 c0       	rjmp	.+40     	; 0x60be <TriggerNote+0x7a>
    6096:	82 2f       	mov	r24, r18
    6098:	24 2f       	mov	r18, r20
		}else{
		
			track->flags=0;//&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    609a:	97 e1       	ldi	r25, 0x17	; 23
    609c:	9a 9f       	mul	r25, r26
    609e:	e0 01       	movw	r28, r0
    60a0:	9b 9f       	mul	r25, r27
    60a2:	d0 0d       	add	r29, r0
    60a4:	11 24       	eor	r1, r1
    60a6:	c1 52       	subi	r28, 0x21	; 33
    60a8:	d7 4f       	sbci	r29, 0xF7	; 247
    60aa:	18 82       	st	Y, r1
			track->patchCommandStreamPos = NULL;
    60ac:	1e 8a       	std	Y+22, r1	; 0x16
    60ae:	1d 8a       	std	Y+21, r1	; 0x15
			TriggerCommon(track,patch,volume,note);
    60b0:	48 2f       	mov	r20, r24
    60b2:	ce 01       	movw	r24, r28
    60b4:	0e 94 4c 2f 	call	0x5e98	; 0x5e98 <TriggerCommon>
			track->flags|=TRACK_FLAGS_PLAYING;
    60b8:	88 81       	ld	r24, Y
    60ba:	80 62       	ori	r24, 0x20	; 32
    60bc:	88 83       	st	Y, r24
		}

	}
}
    60be:	df 91       	pop	r29
    60c0:	cf 91       	pop	r28
    60c2:	08 95       	ret

000060c4 <ProcessMusic>:
	}

#endif


void ProcessMusic(void){
    60c4:	6f 92       	push	r6
    60c6:	7f 92       	push	r7
    60c8:	8f 92       	push	r8
    60ca:	9f 92       	push	r9
    60cc:	af 92       	push	r10
    60ce:	bf 92       	push	r11
    60d0:	cf 92       	push	r12
    60d2:	df 92       	push	r13
    60d4:	ef 92       	push	r14
    60d6:	ff 92       	push	r15
    60d8:	0f 93       	push	r16
    60da:	1f 93       	push	r17
    60dc:	cf 93       	push	r28
    60de:	df 93       	push	r29
    60e0:	cf ed       	ldi	r28, 0xDF	; 223
    60e2:	d8 e0       	ldi	r29, 0x08	; 8
    60e4:	08 eb       	ldi	r16, 0xB8	; 184
    60e6:	18 e0       	ldi	r17, 0x08	; 8
    60e8:	d8 01       	movw	r26, r16
    60ea:	9e 01       	movw	r18, r28
    60ec:	40 e0       	ldi	r20, 0x00	; 0
    60ee:	50 e0       	ldi	r21, 0x00	; 0
    60f0:	ca 01       	movw	r24, r20
    60f2:	81 52       	subi	r24, 0x21	; 33
    60f4:	97 4f       	sbci	r25, 0xF7	; 247
    60f6:	6c 01       	movw	r12, r24
	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//update envelope
		if(track->envelopeStep!=0){
    60f8:	fc 01       	movw	r30, r24
    60fa:	87 85       	ldd	r24, Z+15	; 0x0f
    60fc:	88 23       	and	r24, r24
    60fe:	91 f0       	breq	.+36     	; 0x6124 <ProcessMusic+0x60>
			vol=track->envelopeVol+track->envelopeStep;		
    6100:	66 85       	ldd	r22, Z+14	; 0x0e
    6102:	99 27       	eor	r25, r25
    6104:	87 fd       	sbrc	r24, 7
    6106:	90 95       	com	r25
    6108:	86 0f       	add	r24, r22
    610a:	91 1d       	adc	r25, r1
    610c:	8f 3f       	cpi	r24, 0xFF	; 255
    610e:	91 05       	cpc	r25, r1
    6110:	19 f0       	breq	.+6      	; 0x6118 <ProcessMusic+0x54>
    6112:	14 f0       	brlt	.+4      	; 0x6118 <ProcessMusic+0x54>
    6114:	8f ef       	ldi	r24, 0xFF	; 255
    6116:	90 e0       	ldi	r25, 0x00	; 0
    6118:	97 ff       	sbrs	r25, 7
    611a:	02 c0       	rjmp	.+4      	; 0x6120 <ProcessMusic+0x5c>
    611c:	80 e0       	ldi	r24, 0x00	; 0
    611e:	90 e0       	ldi	r25, 0x00	; 0
			if(vol<0){
				vol=0;			
			}else if(vol>0xff){
				vol=0xff;						
			}
			track->envelopeVol=vol;
    6120:	f6 01       	movw	r30, r12
    6122:	86 87       	std	Z+14, r24	; 0x0e
		}

		//if volumes reaches zero and no more patch command, explicitly end playing on track
		//if(vol==0 && track->patchCommandStreamPos==NULL) track->flags&=~(TRACK_FLAGS_PLAYING);

		if(track->flags & TRACK_FLAGS_SLIDING){
    6124:	f9 01       	movw	r30, r18
    6126:	f0 80       	ld	r15, Z
    6128:	f3 fe       	sbrs	r15, 3
    612a:	2a c0       	rjmp	.+84     	; 0x6180 <ProcessMusic+0xbc>

			mixer.channels.all[trackNo].step+=track->slideStep;
    612c:	65 81       	ldd	r22, Z+5	; 0x05
    612e:	76 81       	ldd	r23, Z+6	; 0x06
    6130:	11 96       	adiw	r26, 0x01	; 1
    6132:	8d 91       	ld	r24, X+
    6134:	9c 91       	ld	r25, X
    6136:	12 97       	sbiw	r26, 0x02	; 2
    6138:	86 0f       	add	r24, r22
    613a:	97 1f       	adc	r25, r23
    613c:	12 96       	adiw	r26, 0x02	; 2
    613e:	9c 93       	st	X, r25
    6140:	8e 93       	st	-X, r24
    6142:	11 97       	sbiw	r26, 0x01	; 1
			u16 tStep=pgm_read_word(&(steptable[track->slideNote]));
    6144:	f6 01       	movw	r30, r12
    6146:	e7 80       	ldd	r14, Z+7	; 0x07
    6148:	ee 2d       	mov	r30, r14
    614a:	f0 e0       	ldi	r31, 0x00	; 0
    614c:	ee 0f       	add	r30, r30
    614e:	ff 1f       	adc	r31, r31
    6150:	e8 5f       	subi	r30, 0xF8	; 248
    6152:	f9 49       	sbci	r31, 0x99	; 153
    6154:	c5 90       	lpm	r12, Z+
    6156:	d4 90       	lpm	r13, Z

			if((track->slideStep>0 && mixer.channels.all[trackNo].step>=tStep) || 
    6158:	16 16       	cp	r1, r22
    615a:	17 06       	cpc	r1, r23
    615c:	24 f4       	brge	.+8      	; 0x6166 <ProcessMusic+0xa2>
    615e:	8c 15       	cp	r24, r12
    6160:	9d 05       	cpc	r25, r13
    6162:	30 f4       	brcc	.+12     	; 0x6170 <ProcessMusic+0xac>
    6164:	0d c0       	rjmp	.+26     	; 0x6180 <ProcessMusic+0xbc>
    6166:	67 2b       	or	r22, r23
    6168:	59 f0       	breq	.+22     	; 0x6180 <ProcessMusic+0xbc>
				(track->slideStep<0 && mixer.channels.all[trackNo].step<=tStep))
    616a:	c8 16       	cp	r12, r24
    616c:	d9 06       	cpc	r13, r25
    616e:	40 f0       	brcs	.+16     	; 0x6180 <ProcessMusic+0xbc>
			{					
				mixer.channels.all[trackNo].step = tStep;					
    6170:	12 96       	adiw	r26, 0x02	; 2
    6172:	dc 92       	st	X, r13
    6174:	ce 92       	st	-X, r12
    6176:	11 97       	sbiw	r26, 0x01	; 1
				track->flags &= ~(TRACK_FLAGS_SLIDING);	
    6178:	8f 2d       	mov	r24, r15
    617a:	87 7f       	andi	r24, 0xF7	; 247
    617c:	f9 01       	movw	r30, r18
    617e:	80 83       	st	Z, r24
    6180:	49 5e       	subi	r20, 0xE9	; 233
    6182:	5f 4f       	sbci	r21, 0xFF	; 255
    6184:	29 5e       	subi	r18, 0xE9	; 233
    6186:	3f 4f       	sbci	r19, 0xFF	; 255
    6188:	16 96       	adiw	r26, 0x06	; 6
	u8 channel;
	Track* track;


	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    618a:	43 37       	cpi	r20, 0x73	; 115
    618c:	51 05       	cpc	r21, r1
    618e:	09 f0       	breq	.+2      	; 0x6192 <ProcessMusic+0xce>
    6190:	af cf       	rjmp	.-162    	; 0x60f0 <ProcessMusic+0x2c>
	}



	//Process song MIDI notes
	if(playSong){
    6192:	80 91 b6 08 	lds	r24, 0x08B6
    6196:	88 23       	and	r24, r24
    6198:	09 f4       	brne	.+2      	; 0x619c <ProcessMusic+0xd8>
    619a:	cc c0       	rjmp	.+408    	; 0x6334 <ProcessMusic+0x270>
							}else if(c1==CONTROLER_EXPRESSION){
								tracks[channel].expressionVol=c2<<1;
							}else if(c1==CONTROLER_TREMOLO){
								tracks[channel].tremoloLevel=c2<<1;
							}else if(c1==CONTROLER_TREMOLO_RATE){
								tracks[channel].tremoloRate=c2<<1;
    619c:	57 e1       	ldi	r21, 0x17	; 23
    619e:	f5 2e       	mov	r15, r21
	if(playSong){
	
		#if MUSIC_ENGINE == MIDI
			
			//process all simultaneous events
			while(currDeltaTime==nextDeltaTime){
    61a0:	80 91 52 09 	lds	r24, 0x0952
    61a4:	90 91 53 09 	lds	r25, 0x0953
    61a8:	20 91 58 09 	lds	r18, 0x0958
    61ac:	30 91 59 09 	lds	r19, 0x0959
    61b0:	82 17       	cp	r24, r18
    61b2:	93 07       	cpc	r25, r19
    61b4:	09 f0       	breq	.+2      	; 0x61b8 <ProcessMusic+0xf4>
    61b6:	b9 c0       	rjmp	.+370    	; 0x632a <ProcessMusic+0x266>

				c1=pgm_read_byte(songPos++);
    61b8:	20 91 5b 09 	lds	r18, 0x095B
    61bc:	30 91 5c 09 	lds	r19, 0x095C
    61c0:	b9 01       	movw	r22, r18
    61c2:	6f 5f       	subi	r22, 0xFF	; 255
    61c4:	7f 4f       	sbci	r23, 0xFF	; 255
    61c6:	70 93 5c 09 	sts	0x095C, r23
    61ca:	60 93 5b 09 	sts	0x095B, r22
    61ce:	f9 01       	movw	r30, r18
    61d0:	44 91       	lpm	r20, Z
			
				if(c1==0xff){
    61d2:	4f 3f       	cpi	r20, 0xFF	; 255
    61d4:	79 f5       	brne	.+94     	; 0x6234 <ProcessMusic+0x170>
					//META data type event
					c1=pgm_read_byte(songPos++);
    61d6:	a9 01       	movw	r20, r18
    61d8:	4e 5f       	subi	r20, 0xFE	; 254
    61da:	5f 4f       	sbci	r21, 0xFF	; 255
    61dc:	50 93 5c 09 	sts	0x095C, r21
    61e0:	40 93 5b 09 	sts	0x095B, r20
    61e4:	fb 01       	movw	r30, r22
    61e6:	64 91       	lpm	r22, Z

				
					if(c1==0x2f){ //end of song
    61e8:	6f 32       	cpi	r22, 0x2F	; 47
    61ea:	19 f4       	brne	.+6      	; 0x61f2 <ProcessMusic+0x12e>
						playSong=false;
    61ec:	10 92 b6 08 	sts	0x08B6, r1
						break;	
    61f0:	9c c0       	rjmp	.+312    	; 0x632a <ProcessMusic+0x266>
					}else if(c1==0x6){ //marker
    61f2:	66 30       	cpi	r22, 0x06	; 6
    61f4:	09 f0       	breq	.+2      	; 0x61f8 <ProcessMusic+0x134>
    61f6:	8c c0       	rjmp	.+280    	; 0x6310 <ProcessMusic+0x24c>
						c1=pgm_read_byte(songPos++); //read len
    61f8:	fa 01       	movw	r30, r20
    61fa:	44 91       	lpm	r20, Z
						c2=pgm_read_byte(songPos++); //read data
    61fc:	c9 01       	movw	r24, r18
    61fe:	04 96       	adiw	r24, 0x04	; 4
    6200:	90 93 5c 09 	sts	0x095C, r25
    6204:	80 93 5b 09 	sts	0x095B, r24
				
					if(c1==0x2f){ //end of song
						playSong=false;
						break;	
					}else if(c1==0x6){ //marker
						c1=pgm_read_byte(songPos++); //read len
    6208:	f9 01       	movw	r30, r18
    620a:	33 96       	adiw	r30, 0x03	; 3
						c2=pgm_read_byte(songPos++); //read data
    620c:	e4 91       	lpm	r30, Z
						if(c2=='S'){ //loop start
    620e:	e3 35       	cpi	r30, 0x53	; 83
    6210:	29 f4       	brne	.+10     	; 0x621c <ProcessMusic+0x158>
							loopStart=songPos;
    6212:	90 93 5e 09 	sts	0x095E, r25
    6216:	80 93 5d 09 	sts	0x095D, r24
    621a:	7a c0       	rjmp	.+244    	; 0x6310 <ProcessMusic+0x24c>
						}else if(c2=='E'){//loop end
    621c:	e5 34       	cpi	r30, 0x45	; 69
    621e:	09 f0       	breq	.+2      	; 0x6222 <ProcessMusic+0x15e>
    6220:	77 c0       	rjmp	.+238    	; 0x6310 <ProcessMusic+0x24c>
							songPos=loopStart;
    6222:	80 91 5d 09 	lds	r24, 0x095D
    6226:	90 91 5e 09 	lds	r25, 0x095E
    622a:	90 93 5c 09 	sts	0x095C, r25
    622e:	80 93 5b 09 	sts	0x095B, r24
    6232:	6e c0       	rjmp	.+220    	; 0x6310 <ProcessMusic+0x24c>
					}
				

				}else{

					if(c1&0x80) lastStatus=c1;					
    6234:	47 fd       	sbrc	r20, 7
    6236:	40 93 56 09 	sts	0x0956, r20
					channel=lastStatus&0x0f;
    623a:	90 91 56 09 	lds	r25, 0x0956
    623e:	89 2f       	mov	r24, r25
    6240:	8f 70       	andi	r24, 0x0F	; 15
				
					//get next data byte
					//Note: maybe we should not advance the cursor
					//in case we receive an unsupported command				
					if(c1&0x80) c1=pgm_read_byte(songPos++); 
    6242:	47 ff       	sbrs	r20, 7
    6244:	08 c0       	rjmp	.+16     	; 0x6256 <ProcessMusic+0x192>
    6246:	2e 5f       	subi	r18, 0xFE	; 254
    6248:	3f 4f       	sbci	r19, 0xFF	; 255
    624a:	30 93 5c 09 	sts	0x095C, r19
    624e:	20 93 5b 09 	sts	0x095B, r18
    6252:	fb 01       	movw	r30, r22
    6254:	44 91       	lpm	r20, Z

					switch(lastStatus&0xf0){
    6256:	90 7f       	andi	r25, 0xF0	; 240
    6258:	90 3b       	cpi	r25, 0xB0	; 176
    625a:	e1 f0       	breq	.+56     	; 0x6294 <ProcessMusic+0x1d0>
    625c:	90 3c       	cpi	r25, 0xC0	; 192
    625e:	09 f4       	brne	.+2      	; 0x6262 <ProcessMusic+0x19e>
    6260:	51 c0       	rjmp	.+162    	; 0x6304 <ProcessMusic+0x240>
    6262:	90 39       	cpi	r25, 0x90	; 144
    6264:	09 f0       	breq	.+2      	; 0x6268 <ProcessMusic+0x1a4>
    6266:	54 c0       	rjmp	.+168    	; 0x6310 <ProcessMusic+0x24c>

						//note-on
						case 0x90:
							//c1 = note						
							c2=pgm_read_byte(songPos++)<<1; //get volume
    6268:	e0 91 5b 09 	lds	r30, 0x095B
    626c:	f0 91 5c 09 	lds	r31, 0x095C
    6270:	9f 01       	movw	r18, r30
    6272:	2f 5f       	subi	r18, 0xFF	; 255
    6274:	3f 4f       	sbci	r19, 0xFF	; 255
    6276:	30 93 5c 09 	sts	0x095C, r19
    627a:	20 93 5b 09 	sts	0x095B, r18
    627e:	24 91       	lpm	r18, Z
    6280:	22 0f       	add	r18, r18
						
							if(tracks[channel].flags|TRACK_FLAGS_ALLOCATED){ //allocated==true
								TriggerNote(channel,tracks[channel].patchNo,c1,c2);
    6282:	f8 9e       	mul	r15, r24
    6284:	f0 01       	movw	r30, r0
    6286:	11 24       	eor	r1, r1
    6288:	e1 52       	subi	r30, 0x21	; 33
    628a:	f7 4f       	sbci	r31, 0xF7	; 247
    628c:	60 89       	ldd	r22, Z+16	; 0x10
    628e:	0e 94 22 30 	call	0x6044	; 0x6044 <TriggerNote>
    6292:	3e c0       	rjmp	.+124    	; 0x6310 <ProcessMusic+0x24c>
							break;

						//controllers
						case 0xb0:
							///c1 = controller #
							c2=pgm_read_byte(songPos++); //get controller value
    6294:	e0 91 5b 09 	lds	r30, 0x095B
    6298:	f0 91 5c 09 	lds	r31, 0x095C
    629c:	9f 01       	movw	r18, r30
    629e:	2f 5f       	subi	r18, 0xFF	; 255
    62a0:	3f 4f       	sbci	r19, 0xFF	; 255
    62a2:	30 93 5c 09 	sts	0x095C, r19
    62a6:	20 93 5b 09 	sts	0x095B, r18
    62aa:	e4 91       	lpm	r30, Z
						
							if(c1==CONTROLER_VOL){
    62ac:	47 30       	cpi	r20, 0x07	; 7
    62ae:	49 f4       	brne	.+18     	; 0x62c2 <ProcessMusic+0x1fe>
								tracks[channel].trackVol=c2<<1;
    62b0:	f8 9e       	mul	r15, r24
    62b2:	d0 01       	movw	r26, r0
    62b4:	11 24       	eor	r1, r1
    62b6:	a1 52       	subi	r26, 0x21	; 33
    62b8:	b7 4f       	sbci	r27, 0xF7	; 247
    62ba:	ee 0f       	add	r30, r30
    62bc:	1c 96       	adiw	r26, 0x0c	; 12
    62be:	ec 93       	st	X, r30
    62c0:	27 c0       	rjmp	.+78     	; 0x6310 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_EXPRESSION){
    62c2:	4b 30       	cpi	r20, 0x0B	; 11
    62c4:	49 f4       	brne	.+18     	; 0x62d8 <ProcessMusic+0x214>
								tracks[channel].expressionVol=c2<<1;
    62c6:	f8 9e       	mul	r15, r24
    62c8:	d0 01       	movw	r26, r0
    62ca:	11 24       	eor	r1, r1
    62cc:	a1 52       	subi	r26, 0x21	; 33
    62ce:	b7 4f       	sbci	r27, 0xF7	; 247
    62d0:	ee 0f       	add	r30, r30
    62d2:	13 96       	adiw	r26, 0x03	; 3
    62d4:	ec 93       	st	X, r30
    62d6:	1c c0       	rjmp	.+56     	; 0x6310 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO){
    62d8:	4c 35       	cpi	r20, 0x5C	; 92
    62da:	49 f4       	brne	.+18     	; 0x62ee <ProcessMusic+0x22a>
								tracks[channel].tremoloLevel=c2<<1;
    62dc:	f8 9e       	mul	r15, r24
    62de:	d0 01       	movw	r26, r0
    62e0:	11 24       	eor	r1, r1
    62e2:	a1 52       	subi	r26, 0x21	; 33
    62e4:	b7 4f       	sbci	r27, 0xF7	; 247
    62e6:	ee 0f       	add	r30, r30
    62e8:	1a 96       	adiw	r26, 0x0a	; 10
    62ea:	ec 93       	st	X, r30
    62ec:	11 c0       	rjmp	.+34     	; 0x6310 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO_RATE){
    62ee:	44 36       	cpi	r20, 0x64	; 100
    62f0:	79 f4       	brne	.+30     	; 0x6310 <ProcessMusic+0x24c>
								tracks[channel].tremoloRate=c2<<1;
    62f2:	f8 9e       	mul	r15, r24
    62f4:	d0 01       	movw	r26, r0
    62f6:	11 24       	eor	r1, r1
    62f8:	a1 52       	subi	r26, 0x21	; 33
    62fa:	b7 4f       	sbci	r27, 0xF7	; 247
    62fc:	ee 0f       	add	r30, r30
    62fe:	1b 96       	adiw	r26, 0x0b	; 11
    6300:	ec 93       	st	X, r30
    6302:	06 c0       	rjmp	.+12     	; 0x6310 <ProcessMusic+0x24c>
							break;

						//program change
						case 0xc0:
							// c1 = patch #						
							tracks[channel].patchNo=c1;
    6304:	f8 9e       	mul	r15, r24
    6306:	f0 01       	movw	r30, r0
    6308:	11 24       	eor	r1, r1
    630a:	e1 52       	subi	r30, 0x21	; 33
    630c:	f7 4f       	sbci	r31, 0xF7	; 247
    630e:	40 8b       	std	Z+16, r20	; 0x10


				}//end if(c1==0xff)

				//read next delta time
				nextDeltaTime=ReadVarLen(&songPos);			
    6310:	8b e5       	ldi	r24, 0x5B	; 91
    6312:	99 e0       	ldi	r25, 0x09	; 9
    6314:	0e 94 26 2f 	call	0x5e4c	; 0x5e4c <ReadVarLen>
    6318:	90 93 59 09 	sts	0x0959, r25
    631c:	80 93 58 09 	sts	0x0958, r24
				currDeltaTime=0;
    6320:	10 92 53 09 	sts	0x0953, r1
    6324:	10 92 52 09 	sts	0x0952, r1
    6328:	3b cf       	rjmp	.-394    	; 0x61a0 <ProcessMusic+0xdc>
					}
				#endif

			}//end while
		
			currDeltaTime++;
    632a:	01 96       	adiw	r24, 0x01	; 1
    632c:	90 93 53 09 	sts	0x0953, r25
    6330:	80 93 52 09 	sts	0x0952, r24
    6334:	98 ee       	ldi	r25, 0xE8	; 232
    6336:	a9 2e       	mov	r10, r25
    6338:	98 e0       	ldi	r25, 0x08	; 8
    633a:	b9 2e       	mov	r11, r25
    633c:	22 ef       	ldi	r18, 0xF2	; 242
    633e:	c2 2e       	mov	r12, r18
    6340:	28 e0       	ldi	r18, 0x08	; 8
    6342:	d2 2e       	mov	r13, r18
    6344:	33 ef       	ldi	r19, 0xF3	; 243
    6346:	e3 2e       	mov	r14, r19
    6348:	38 e0       	ldi	r19, 0x08	; 8
    634a:	f3 2e       	mov	r15, r19
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    634c:	66 24       	eor	r6, r6
    634e:	6a 94       	dec	r6
    6350:	71 2c       	mov	r7, r1
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//process patch command stream
		if((track->flags & TRACK_FLAGS_PLAYING) && (track->patchCommandStreamPos!=NULL) && ((track->flags & TRACK_FLAGS_HOLD_ENV)==0)){
    6352:	88 81       	ld	r24, Y
    6354:	85 ff       	sbrs	r24, 5
    6356:	42 c0       	rjmp	.+132    	; 0x63dc <ProcessMusic+0x318>
    6358:	2d 89       	ldd	r18, Y+21	; 0x15
    635a:	3e 89       	ldd	r19, Y+22	; 0x16
    635c:	23 2b       	or	r18, r19
    635e:	09 f4       	brne	.+2      	; 0x6362 <ProcessMusic+0x29e>
    6360:	3d c0       	rjmp	.+122    	; 0x63dc <ProcessMusic+0x318>
    6362:	86 fd       	sbrc	r24, 6
    6364:	3b c0       	rjmp	.+118    	; 0x63dc <ProcessMusic+0x318>
    6366:	47 01       	movw	r8, r14
    6368:	f2 e0       	ldi	r31, 0x02	; 2
    636a:	8f 1a       	sub	r8, r31
    636c:	91 08       	sbc	r9, r1

			//process all simultaneous events
			while(track->patchCurrDeltaTime==track->patchNextDeltaTime){
    636e:	d6 01       	movw	r26, r12
    6370:	9c 91       	ld	r25, X
    6372:	f4 01       	movw	r30, r8
    6374:	80 81       	ld	r24, Z
    6376:	98 13       	cpse	r25, r24
    6378:	2e c0       	rjmp	.+92     	; 0x63d6 <ProcessMusic+0x312>

				c1=pgm_read_byte(track->patchCommandStreamPos++);
    637a:	ed 89       	ldd	r30, Y+21	; 0x15
    637c:	fe 89       	ldd	r31, Y+22	; 0x16
    637e:	bf 01       	movw	r22, r30
    6380:	6f 5f       	subi	r22, 0xFF	; 255
    6382:	7f 4f       	sbci	r23, 0xFF	; 255
    6384:	7e 8b       	std	Y+22, r23	; 0x16
    6386:	6d 8b       	std	Y+21, r22	; 0x15
    6388:	84 91       	lpm	r24, Z
				if(c1==PATCH_END){
    638a:	8f 3f       	cpi	r24, 0xFF	; 255
    638c:	31 f4       	brne	.+12     	; 0x639a <ProcessMusic+0x2d6>
					//end of stream!
					track->flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    638e:	88 81       	ld	r24, Y
    6390:	8f 77       	andi	r24, 0x7F	; 127
    6392:	88 83       	st	Y, r24
					track->patchCommandStreamPos=NULL;
    6394:	1e 8a       	std	Y+22, r1	; 0x16
    6396:	1d 8a       	std	Y+21, r1	; 0x15
					break;
    6398:	1e c0       	rjmp	.+60     	; 0x63d6 <ProcessMusic+0x312>

				}else{
					c2=pgm_read_byte(track->patchCommandStreamPos++);
    639a:	9f 01       	movw	r18, r30
    639c:	2e 5f       	subi	r18, 0xFE	; 254
    639e:	3f 4f       	sbci	r19, 0xFF	; 255
    63a0:	3e 8b       	std	Y+22, r19	; 0x16
    63a2:	2d 8b       	std	Y+21, r18	; 0x15
    63a4:	fb 01       	movw	r30, r22
    63a6:	64 91       	lpm	r22, Z
					//invoke patch command function
					((PatchCommand)pgm_read_word(&patchCommands[c1]))(track,c2);
    63a8:	e8 2f       	mov	r30, r24
    63aa:	f0 e0       	ldi	r31, 0x00	; 0
    63ac:	ee 0f       	add	r30, r30
    63ae:	ff 1f       	adc	r31, r31
    63b0:	e2 54       	subi	r30, 0x42	; 66
    63b2:	ff 4f       	sbci	r31, 0xFF	; 255
    63b4:	25 91       	lpm	r18, Z+
    63b6:	34 91       	lpm	r19, Z
    63b8:	ce 01       	movw	r24, r28
    63ba:	f9 01       	movw	r30, r18
    63bc:	09 95       	icall
				}

				//read next delta time
				track->patchNextDeltaTime=pgm_read_byte(track->patchCommandStreamPos++);
    63be:	ed 89       	ldd	r30, Y+21	; 0x15
    63c0:	fe 89       	ldd	r31, Y+22	; 0x16
    63c2:	cf 01       	movw	r24, r30
    63c4:	01 96       	adiw	r24, 0x01	; 1
    63c6:	9e 8b       	std	Y+22, r25	; 0x16
    63c8:	8d 8b       	std	Y+21, r24	; 0x15
    63ca:	e4 91       	lpm	r30, Z
    63cc:	d4 01       	movw	r26, r8
    63ce:	ec 93       	st	X, r30
				track->patchCurrDeltaTime=0;
    63d0:	f6 01       	movw	r30, r12
    63d2:	10 82       	st	Z, r1
    63d4:	cc cf       	rjmp	.-104    	; 0x636e <ProcessMusic+0x2aa>
			}

			track->patchCurrDeltaTime++;
    63d6:	9f 5f       	subi	r25, 0xFF	; 255
    63d8:	d6 01       	movw	r26, r12
    63da:	9c 93       	st	X, r25
		}

		if(track->flags & TRACK_FLAGS_PLAYING){
    63dc:	98 81       	ld	r25, Y
    63de:	95 ff       	sbrs	r25, 5
    63e0:	6c c0       	rjmp	.+216    	; 0x64ba <ProcessMusic+0x3f6>

			if(track->patchPlayingTime<0xff){
    63e2:	f7 01       	movw	r30, r14
    63e4:	80 81       	ld	r24, Z
    63e6:	8f 3f       	cpi	r24, 0xFF	; 255
    63e8:	11 f0       	breq	.+4      	; 0x63ee <ProcessMusic+0x32a>
				track->patchPlayingTime++;
    63ea:	8f 5f       	subi	r24, 0xFF	; 255
    63ec:	80 83       	st	Z, r24
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
    63ee:	97 fd       	sbrc	r25, 7
    63f0:	04 c0       	rjmp	.+8      	; 0x63fa <ProcessMusic+0x336>
    63f2:	f7 01       	movw	r30, r14
    63f4:	38 97       	sbiw	r30, 0x08	; 8
				//if an FX, use full track volume.
				trackVol=0xff;
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
    63f6:	90 81       	ld	r25, Z
    63f8:	01 c0       	rjmp	.+2      	; 0x63fc <ProcessMusic+0x338>
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
				//if an FX, use full track volume.
				trackVol=0xff;
    63fa:	9f ef       	ldi	r25, 0xFF	; 255
    63fc:	f7 01       	movw	r30, r14
    63fe:	37 97       	sbiw	r30, 0x07	; 7
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
			}
			if(track->noteVol!=0 && track->envelopeVol!=0 && trackVol!=0 && masterVolume!=0){
    6400:	80 81       	ld	r24, Z
    6402:	88 23       	and	r24, r24
    6404:	09 f4       	brne	.+2      	; 0x6408 <ProcessMusic+0x344>
    6406:	4e c0       	rjmp	.+156    	; 0x64a4 <ProcessMusic+0x3e0>
    6408:	31 96       	adiw	r30, 0x01	; 1
    640a:	50 81       	ld	r21, Z
    640c:	55 23       	and	r21, r21
    640e:	09 f4       	brne	.+2      	; 0x6412 <ProcessMusic+0x34e>
    6410:	49 c0       	rjmp	.+146    	; 0x64a4 <ProcessMusic+0x3e0>
    6412:	99 23       	and	r25, r25
    6414:	09 f4       	brne	.+2      	; 0x6418 <ProcessMusic+0x354>
    6416:	46 c0       	rjmp	.+140    	; 0x64a4 <ProcessMusic+0x3e0>
    6418:	40 91 57 09 	lds	r20, 0x0957
    641c:	44 23       	and	r20, r20
    641e:	09 f4       	brne	.+2      	; 0x6422 <ProcessMusic+0x35e>
    6420:	41 c0       	rjmp	.+130    	; 0x64a4 <ProcessMusic+0x3e0>

				uVol=(track->noteVol*trackVol)+0x100;
    6422:	89 9f       	mul	r24, r25
    6424:	c0 01       	movw	r24, r0
    6426:	11 24       	eor	r1, r1
    6428:	93 95       	inc	r25
				uVol>>=8;
    642a:	89 2f       	mov	r24, r25
    642c:	99 27       	eor	r25, r25
				
				uVol=(uVol*track->envelopeVol)+0x100;
    642e:	58 9f       	mul	r21, r24
    6430:	90 01       	movw	r18, r0
    6432:	59 9f       	mul	r21, r25
    6434:	30 0d       	add	r19, r0
    6436:	11 24       	eor	r1, r1
    6438:	c9 01       	movw	r24, r18
    643a:	93 95       	inc	r25
				uVol>>=8;
    643c:	89 2f       	mov	r24, r25
    643e:	99 27       	eor	r25, r25
    6440:	3b 97       	sbiw	r30, 0x0b	; 11
				
				#if MUSIC_ENGINE == MIDI
					uVol=(uVol*track->expressionVol)+0x100;
    6442:	50 81       	ld	r21, Z
    6444:	58 9f       	mul	r21, r24
    6446:	90 01       	movw	r18, r0
    6448:	59 9f       	mul	r21, r25
    644a:	30 0d       	add	r19, r0
    644c:	11 24       	eor	r1, r1
    644e:	33 95       	inc	r19
					uVol>>=8;
    6450:	23 2f       	mov	r18, r19
    6452:	33 27       	eor	r19, r19
				#endif
				
				uVol=(uVol*masterVolume)+0x100;
    6454:	42 9f       	mul	r20, r18
    6456:	c0 01       	movw	r24, r0
    6458:	43 9f       	mul	r20, r19
    645a:	90 0d       	add	r25, r0
    645c:	11 24       	eor	r1, r1
    645e:	93 95       	inc	r25
				uVol>>=8;
    6460:	89 2f       	mov	r24, r25
    6462:	99 27       	eor	r25, r25
    6464:	37 96       	adiw	r30, 0x07	; 7

				if(track->tremoloLevel>0){					
    6466:	20 81       	ld	r18, Z
    6468:	22 23       	and	r18, r18
    646a:	f1 f0       	breq	.+60     	; 0x64a8 <ProcessMusic+0x3e4>
					tmp=pgm_read_byte(&(waves[track->tremoloPos]));
    646c:	d5 01       	movw	r26, r10
    646e:	ec 91       	ld	r30, X
    6470:	f0 e0       	ldi	r31, 0x00	; 0
    6472:	e0 50       	subi	r30, 0x00	; 0
    6474:	f8 49       	sbci	r31, 0x98	; 152
    6476:	e4 91       	lpm	r30, Z
					tmp-=128; //convert to unsigned
    6478:	e0 58       	subi	r30, 0x80	; 128

					tVol=(track->tremoloLevel*tmp)+0x100;
    647a:	2e 9f       	mul	r18, r30
    647c:	f0 01       	movw	r30, r0
    647e:	11 24       	eor	r1, r1
    6480:	f3 95       	inc	r31
					tVol>>=8;
    6482:	ef 2f       	mov	r30, r31
    6484:	ff 27       	eor	r31, r31
					
					uVol=(uVol*(0xff-tVol))+0x100;
    6486:	a3 01       	movw	r20, r6
    6488:	4e 1b       	sub	r20, r30
    648a:	5f 0b       	sbc	r21, r31
    648c:	48 9f       	mul	r20, r24
    648e:	90 01       	movw	r18, r0
    6490:	49 9f       	mul	r20, r25
    6492:	30 0d       	add	r19, r0
    6494:	58 9f       	mul	r21, r24
    6496:	30 0d       	add	r19, r0
    6498:	11 24       	eor	r1, r1
    649a:	c9 01       	movw	r24, r18
    649c:	93 95       	inc	r25
					uVol>>=8;
    649e:	89 2f       	mov	r24, r25
    64a0:	99 27       	eor	r25, r25
    64a2:	02 c0       	rjmp	.+4      	; 0x64a8 <ProcessMusic+0x3e4>
				}

			
			}else{
				uVol=0;
    64a4:	80 e0       	ldi	r24, 0x00	; 0
    64a6:	90 e0       	ldi	r25, 0x00	; 0
			}	

			track->tremoloPos+=track->tremoloRate;	
    64a8:	f5 01       	movw	r30, r10
    64aa:	30 81       	ld	r19, Z
    64ac:	f7 01       	movw	r30, r14
    64ae:	39 97       	sbiw	r30, 0x09	; 9
    64b0:	20 81       	ld	r18, Z
    64b2:	23 0f       	add	r18, r19
    64b4:	d5 01       	movw	r26, r10
    64b6:	2c 93       	st	X, r18
    64b8:	02 c0       	rjmp	.+4      	; 0x64be <ProcessMusic+0x3fa>

		}else{
			uVol=0;
    64ba:	80 e0       	ldi	r24, 0x00	; 0
    64bc:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
    64be:	f8 01       	movw	r30, r16
    64c0:	80 83       	st	Z, r24
    64c2:	67 96       	adiw	r28, 0x17	; 23
    64c4:	0a 5f       	subi	r16, 0xFA	; 250
    64c6:	1f 4f       	sbci	r17, 0xFF	; 255
    64c8:	f7 e1       	ldi	r31, 0x17	; 23
    64ca:	af 0e       	add	r10, r31
    64cc:	b1 1c       	adc	r11, r1
    64ce:	87 e1       	ldi	r24, 0x17	; 23
    64d0:	c8 0e       	add	r12, r24
    64d2:	d1 1c       	adc	r13, r1
    64d4:	97 e1       	ldi	r25, 0x17	; 23
    64d6:	e9 0e       	add	r14, r25
    64d8:	f1 1c       	adc	r15, r1


	//
	// Process patches command streams & final volume
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    64da:	a9 e0       	ldi	r26, 0x09	; 9
    64dc:	c2 35       	cpi	r28, 0x52	; 82
    64de:	da 07       	cpc	r29, r26
    64e0:	09 f0       	breq	.+2      	; 0x64e4 <ProcessMusic+0x420>
    64e2:	37 cf       	rjmp	.-402    	; 0x6352 <ProcessMusic+0x28e>
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
	}
	
}
    64e4:	df 91       	pop	r29
    64e6:	cf 91       	pop	r28
    64e8:	1f 91       	pop	r17
    64ea:	0f 91       	pop	r16
    64ec:	ff 90       	pop	r15
    64ee:	ef 90       	pop	r14
    64f0:	df 90       	pop	r13
    64f2:	cf 90       	pop	r12
    64f4:	bf 90       	pop	r11
    64f6:	af 90       	pop	r10
    64f8:	9f 90       	pop	r9
    64fa:	8f 90       	pop	r8
    64fc:	7f 90       	pop	r7
    64fe:	6f 90       	pop	r6
    6500:	08 95       	ret

00006502 <SetMasterVolume>:
}



void SetMasterVolume(unsigned char vol){
	masterVolume=vol;
    6502:	80 93 57 09 	sts	0x0957, r24
    6506:	08 95       	ret

00006508 <SetMixerNote>:
; r22: -MIDI note, 69=A5(440) for waves channels (0,1,2)
;      -Noise params for channel 3
;***********************
.section .text.SetMixerNote
SetMixerNote:
	clr r25
    6508:	99 27       	eor	r25, r25
	clr r23
    650a:	77 27       	eor	r23, r23
	#if SOUND_MIXER == MIXER_TYPE_VSYNC
		cpi r24,3
		brlo set_note_waves
		ret		
	#else
		cpi r24,3
    650c:	83 30       	cpi	r24, 0x03	; 3
		brne set_note_waves		
    650e:	09 f4       	brne	.+2      	; 0x6512 <set_note_waves>
		ret
    6510:	08 95       	ret

00006512 <set_note_waves>:
	#endif
#endif

set_note_waves:
	;get step for note
	ldi ZL,lo8(steptable)
    6512:	e8 e0       	ldi	r30, 0x08	; 8
	ldi ZH,hi8(steptable)
    6514:	f6 e6       	ldi	r31, 0x66	; 102
	lsl r22
    6516:	66 0f       	add	r22, r22
	rol r23
    6518:	77 1f       	adc	r23, r23
	add ZL,r22
    651a:	e6 0f       	add	r30, r22
	adc ZH,r23	
    651c:	f7 1f       	adc	r31, r23

	lpm r26,Z+
    651e:	a5 91       	lpm	r26, Z+
	lpm r27,Z
    6520:	b4 91       	lpm	r27, Z

	ldi ZL,lo8(mixerStruct)
    6522:	e8 eb       	ldi	r30, 0xB8	; 184
	ldi ZH,hi8(mixerStruct)
    6524:	f8 e0       	ldi	r31, 0x08	; 8
	ldi r18,CHANNEL_STRUCT_SIZE
    6526:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24
    6528:	28 9f       	mul	r18, r24
	add ZL,r0
    652a:	e0 0d       	add	r30, r0
	adc ZH,r1
    652c:	f1 1d       	adc	r31, r1
	
	std Z+step_lo,r26
    652e:	a1 83       	std	Z+1, r26	; 0x01
	std Z+step_hi,r27
    6530:	b2 83       	std	Z+2, r27	; 0x02
	
	clr r1
    6532:	11 24       	eor	r1, r1
	

	ret
    6534:	08 95       	ret

00006536 <SetMixerWave>:
;         Noise channel: 0xfe=7 bit lfsr, 0xff=15 bit lfsr
;                 
;***********************
.section .text.SetMixerWave
SetMixerWave:
	clr r25
    6536:	99 27       	eor	r25, r25
	clr r23
    6538:	77 27       	eor	r23, r23

	ldi ZL,lo8(mixerStruct)
    653a:	e8 eb       	ldi	r30, 0xB8	; 184
	ldi ZH,hi8(mixerStruct)
    653c:	f8 e0       	ldi	r31, 0x08	; 8
	ldi r18,CHANNEL_STRUCT_SIZE
    653e:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24	
    6540:	28 9f       	mul	r18, r24
	add ZL,r0
    6542:	e0 0d       	add	r30, r0
	adc ZH,r1
    6544:	f1 1d       	adc	r31, r1

#if MIXER_CHAN4_TYPE == 0
	cpi r22,0xfe	;7bit lfsr
    6546:	6e 3f       	cpi	r22, 0xFE	; 254
	brne smw1
    6548:	31 f4       	brne	.+12     	; 0x6556 <smw1>
	lds r22,tr4_params
    654a:	60 91 cb 08 	lds	r22, 0x08CB
	andi r22,0xfe;
    654e:	6e 7f       	andi	r22, 0xFE	; 254
	sts tr4_params,r22
    6550:	60 93 cb 08 	sts	0x08CB, r22
	rjmp esmw	
    6554:	0b c0       	rjmp	.+22     	; 0x656c <esmw>

00006556 <smw1>:
smw1:
	cpi r22,0xff	;15bit lfsr
    6556:	6f 3f       	cpi	r22, 0xFF	; 255
	brne smw2
    6558:	31 f4       	brne	.+12     	; 0x6566 <smw2>
	lds r22,tr4_params
    655a:	60 91 cb 08 	lds	r22, 0x08CB
	ori r22,0xfe;
    655e:	6e 6f       	ori	r22, 0xFE	; 254
	sts tr4_params,r22	
    6560:	60 93 cb 08 	sts	0x08CB, r22
	rjmp esmw
    6564:	03 c0       	rjmp	.+6      	; 0x656c <esmw>

00006566 <smw2>:
smw2:
#endif

	ldi r23,hi8(waves)
    6566:	78 e6       	ldi	r23, 0x68	; 104
	add r23,r22
    6568:	76 0f       	add	r23, r22
	std Z+samplepos_hi,r23 ;store path No
    656a:	75 83       	std	Z+5, r23	; 0x05

0000656c <esmw>:

esmw:
	clr r1	
    656c:	11 24       	eor	r1, r1
	ret
    656e:	08 95       	ret
	...

00006600 <DisableSoundEngine>:
; no CPU cycles are consumed.
; C-callable
;*****************************
.section .text.DisableSoundEngine
DisableSoundEngine:	
	ldi r24,0
    6600:	80 e0       	ldi	r24, 0x00	; 0
	sts sound_enabled,r24
    6602:	80 93 b7 08 	sts	0x08B7, r24
	ret
    6606:	08 95       	ret

00006608 <steptable>:
    6608:	22 00       	.word	0x0022	; ????
    660a:	24 00       	.word	0x0024	; ????
    660c:	26 00       	.word	0x0026	; ????
    660e:	28 00       	.word	0x0028	; ????
    6610:	2b 00       	.word	0x002b	; ????
    6612:	2d 00       	.word	0x002d	; ????
    6614:	30 00       	.word	0x0030	; ????
    6616:	33 00       	.word	0x0033	; ????
    6618:	36 00       	.word	0x0036	; ????
    661a:	39 00       	.word	0x0039	; ????
    661c:	3d 00       	.word	0x003d	; ????
    661e:	40 00       	.word	0x0040	; ????
    6620:	44 00       	.word	0x0044	; ????
    6622:	48 00       	.word	0x0048	; ????
    6624:	4c 00       	.word	0x004c	; ????
    6626:	51 00       	.word	0x0051	; ????
    6628:	56 00       	.word	0x0056	; ????
    662a:	5b 00       	.word	0x005b	; ????
    662c:	60 00       	.word	0x0060	; ????
    662e:	66 00       	.word	0x0066	; ????
    6630:	6c 00       	.word	0x006c	; ????
    6632:	73 00       	.word	0x0073	; ????
    6634:	79 00       	.word	0x0079	; ????
    6636:	81 00       	.word	0x0081	; ????
    6638:	88 00       	.word	0x0088	; ????
    663a:	90 00       	.word	0x0090	; ????
    663c:	99 00       	.word	0x0099	; ????
    663e:	a2 00       	.word	0x00a2	; ????
    6640:	ac 00       	.word	0x00ac	; ????
    6642:	b6 00       	.word	0x00b6	; ????
    6644:	c1 00       	.word	0x00c1	; ????
    6646:	cc 00       	.word	0x00cc	; ????
    6648:	d8 00       	.word	0x00d8	; ????
    664a:	e5 00       	.word	0x00e5	; ????
    664c:	f3 00       	.word	0x00f3	; ????
    664e:	01 01       	movw	r0, r2
    6650:	10 01       	movw	r2, r0
    6652:	21 01       	movw	r4, r2
    6654:	32 01       	movw	r6, r4
    6656:	44 01       	movw	r8, r8
    6658:	57 01       	movw	r10, r14
    665a:	6c 01       	movw	r12, r24
    665c:	81 01       	movw	r16, r2
    665e:	98 01       	movw	r18, r16
    6660:	b0 01       	movw	r22, r0
    6662:	ca 01       	movw	r24, r20
    6664:	e5 01       	movw	r28, r10
    6666:	02 02       	muls	r16, r18
    6668:	21 02       	muls	r18, r17
    666a:	41 02       	muls	r20, r17
    666c:	64 02       	muls	r22, r20
    666e:	88 02       	muls	r24, r24
    6670:	ae 02       	muls	r26, r30
    6672:	d7 02       	muls	r29, r23
    6674:	03 03       	mulsu	r16, r19
    6676:	30 03       	mulsu	r19, r16
    6678:	61 03       	mulsu	r22, r17
    667a:	94 03       	fmuls	r17, r20
    667c:	cb 03       	fmulsu	r20, r19
    667e:	05 04       	cpc	r0, r5
    6680:	42 04       	cpc	r4, r2
    6682:	83 04       	cpc	r8, r3
    6684:	c7 04       	cpc	r12, r7
    6686:	10 05       	cpc	r17, r0
    6688:	5d 05       	cpc	r21, r13
    668a:	af 05       	cpc	r26, r15
    668c:	05 06       	cpc	r0, r21
    668e:	61 06       	cpc	r6, r17
    6690:	c2 06       	cpc	r12, r18
    6692:	29 07       	cpc	r18, r25
    6694:	96 07       	cpc	r25, r22
    6696:	09 08       	sbc	r0, r9
    6698:	83 08       	sbc	r8, r3
    669a:	05 09       	sbc	r16, r5
    669c:	8e 09       	sbc	r24, r14
    669e:	20 0a       	sbc	r2, r16
    66a0:	ba 0a       	sbc	r11, r26
    66a2:	5d 0b       	sbc	r21, r29
    66a4:	0a 0c       	add	r0, r10
    66a6:	c1 0c       	add	r12, r1
    66a8:	84 0d       	add	r24, r4
    66aa:	51 0e       	add	r5, r17
    66ac:	2b 0f       	add	r18, r27
    66ae:	12 10       	cpse	r1, r2
    66b0:	07 11       	cpse	r16, r7
    66b2:	0a 12       	cpse	r0, r26
    66b4:	1d 13       	cpse	r17, r29
    66b6:	40 14       	cp	r4, r0
    66b8:	74 15       	cp	r23, r4
    66ba:	ba 16       	cp	r11, r26
    66bc:	14 18       	sub	r1, r4
    66be:	83 19       	sub	r24, r3
    66c0:	07 1b       	sub	r16, r23
    66c2:	a3 1c       	adc	r10, r3
    66c4:	57 1e       	adc	r5, r23
    66c6:	24 20       	and	r2, r4
    66c8:	0e 22       	and	r0, r30
    66ca:	14 24       	eor	r1, r4
    66cc:	39 26       	eor	r3, r25
    66ce:	7f 28       	or	r7, r15
    66d0:	e8 2a       	or	r14, r24
    66d2:	75 2d       	mov	r23, r5
    66d4:	29 30       	cpi	r18, 0x09	; 9
    66d6:	06 33       	cpi	r16, 0x36	; 54
    66d8:	0f 36       	cpi	r16, 0x6F	; 111
    66da:	45 39       	cpi	r20, 0x95	; 149
    66dc:	ad 3c       	cpi	r26, 0xCD	; 205
    66de:	49 40       	sbci	r20, 0x09	; 9
    66e0:	1b 44       	sbci	r17, 0x4B	; 75
    66e2:	28 48       	sbci	r18, 0x88	; 136
    66e4:	73 4c       	sbci	r23, 0xC3	; 195
    66e6:	fe 50       	subi	r31, 0x0E	; 14
    66e8:	cf 55       	subi	r28, 0x5F	; 95
    66ea:	ea 5a       	subi	r30, 0xAA	; 170
    66ec:	51 60       	ori	r21, 0x01	; 1
    66ee:	0c 66       	ori	r16, 0x6C	; 108
    66f0:	1d 6c       	ori	r17, 0xCD	; 205
    66f2:	8b 72       	andi	r24, 0x2B	; 43
    66f4:	5a 79       	andi	r21, 0x9A	; 154
    66f6:	92 80       	ldd	r9, Z+2	; 0x02
    66f8:	37 88       	ldd	r3, Z+23	; 0x17
    66fa:	50 90 e5 98 	lds	r5, 0x98E5
    66fe:	fd a1       	ldd	r31, Y+37	; 0x25
    6700:	9f ab       	std	Y+55, r25	; 0x37
    6702:	d3 b5       	in	r29, 0x23	; 35
    6704:	a3 c0       	rjmp	.+326    	; 0x684c <waves+0x4c>
	...

00006800 <waves>:
    6800:	00 03       	mulsu	r16, r16
    6802:	06 09       	sbc	r16, r6
    6804:	0c 10       	cpse	r0, r12
    6806:	13 16       	cp	r1, r19
    6808:	19 1c       	adc	r1, r9
    680a:	1f 22       	and	r1, r31
    680c:	25 28       	or	r2, r5
    680e:	2b 2e       	mov	r2, r27
    6810:	31 33       	cpi	r19, 0x31	; 49
    6812:	36 39       	cpi	r19, 0x96	; 150
    6814:	3c 3f       	cpi	r19, 0xFC	; 252
    6816:	41 44       	sbci	r20, 0x41	; 65
    6818:	47 49       	sbci	r20, 0x97	; 151
    681a:	4c 4e       	sbci	r20, 0xEC	; 236
    681c:	51 53       	subi	r21, 0x31	; 49
    681e:	55 58       	subi	r21, 0x85	; 133
    6820:	5a 5c       	subi	r21, 0xCA	; 202
    6822:	5e 60       	ori	r21, 0x0E	; 14
    6824:	62 64       	ori	r22, 0x42	; 66
    6826:	66 68       	ori	r22, 0x86	; 134
    6828:	6a 6b       	ori	r22, 0xBA	; 186
    682a:	6d 6f       	ori	r22, 0xFD	; 253
    682c:	70 71       	andi	r23, 0x10	; 16
    682e:	73 74       	andi	r23, 0x43	; 67
    6830:	75 76       	andi	r23, 0x65	; 101
    6832:	78 79       	andi	r23, 0x98	; 152
    6834:	7a 7a       	andi	r23, 0xAA	; 170
    6836:	7b 7c       	andi	r23, 0xCB	; 203
    6838:	7d 7d       	andi	r23, 0xDD	; 221
    683a:	7e 7e       	andi	r23, 0xEE	; 238
    683c:	7e 7f       	andi	r23, 0xFE	; 254
    683e:	7f 7f       	andi	r23, 0xFF	; 255
    6840:	7f 7f       	andi	r23, 0xFF	; 255
    6842:	7f 7f       	andi	r23, 0xFF	; 255
    6844:	7e 7e       	andi	r23, 0xEE	; 238
    6846:	7e 7d       	andi	r23, 0xDE	; 222
    6848:	7d 7c       	andi	r23, 0xCD	; 205
    684a:	7b 7a       	andi	r23, 0xAB	; 171
    684c:	7a 79       	andi	r23, 0x9A	; 154
    684e:	78 76       	andi	r23, 0x68	; 104
    6850:	75 74       	andi	r23, 0x45	; 69
    6852:	73 71       	andi	r23, 0x13	; 19
    6854:	70 6f       	ori	r23, 0xF0	; 240
    6856:	6d 6b       	ori	r22, 0xBD	; 189
    6858:	6a 68       	ori	r22, 0x8A	; 138
    685a:	66 64       	ori	r22, 0x46	; 70
    685c:	62 60       	ori	r22, 0x02	; 2
    685e:	5e 5c       	subi	r21, 0xCE	; 206
    6860:	5a 58       	subi	r21, 0x8A	; 138
    6862:	55 53       	subi	r21, 0x35	; 53
    6864:	51 4e       	sbci	r21, 0xE1	; 225
    6866:	4c 49       	sbci	r20, 0x9C	; 156
    6868:	47 44       	sbci	r20, 0x47	; 71
    686a:	41 3f       	cpi	r20, 0xF1	; 241
    686c:	3c 39       	cpi	r19, 0x9C	; 156
    686e:	36 33       	cpi	r19, 0x36	; 54
    6870:	31 2e       	mov	r3, r17
    6872:	2b 28       	or	r2, r11
    6874:	25 22       	and	r2, r21
    6876:	1f 1c       	adc	r1, r15
    6878:	19 16       	cp	r1, r25
    687a:	13 10       	cpse	r1, r3
    687c:	0c 09       	sbc	r16, r12
    687e:	06 03       	mulsu	r16, r22
    6880:	00 fd       	sbrc	r16, 0
    6882:	fa f7       	brpl	.-2      	; 0x6882 <waves+0x82>
    6884:	f4 f0       	brlt	.+60     	; 0x68c2 <waves+0xc2>
    6886:	ed ea       	ldi	r30, 0xAD	; 173
    6888:	e7 e4       	ldi	r30, 0x47	; 71
    688a:	e1 de       	rcall	.-574    	; 0x664e <steptable+0x46>
    688c:	db d8       	rcall	.-3658   	; 0x5a44 <ch4_end+0x66>
    688e:	d5 d2       	rcall	.+1450   	; 0x6e3a <waves+0x63a>
    6890:	cf cd       	rjmp	.-1122   	; 0x6430 <ProcessMusic+0x36c>
    6892:	ca c7       	rjmp	.+3988   	; 0x7828 <__data_load_end+0x16>
    6894:	c4 c1       	rjmp	.+904    	; 0x6c1e <waves+0x41e>
    6896:	bf bc       	out	0x2f, r11	; 47
    6898:	b9 b7       	in	r27, 0x39	; 57
    689a:	b4 b2       	in	r11, 0x14	; 20
    689c:	af ad       	ldd	r26, Y+63	; 0x3f
    689e:	ab a8       	ldd	r10, Y+51	; 0x33
    68a0:	a6 a4       	ldd	r10, Z+46	; 0x2e
    68a2:	a2 a0       	ldd	r10, Z+34	; 0x22
    68a4:	9e 9c       	mul	r9, r14
    68a6:	9a 98       	cbi	0x13, 2	; 19
    68a8:	96 95       	lsr	r25
    68aa:	93 91       	.word	0x9193	; ????
    68ac:	90 8f       	std	Z+24, r25	; 0x18
    68ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    68b0:	8b 8a       	std	Y+19, r8	; 0x13
    68b2:	88 87       	std	Y+8, r24	; 0x08
    68b4:	86 86       	std	Z+14, r8	; 0x0e
    68b6:	85 84       	ldd	r8, Z+13	; 0x0d
    68b8:	83 83       	std	Z+3, r24	; 0x03
    68ba:	82 82       	std	Z+2, r8	; 0x02
    68bc:	82 81       	ldd	r24, Z+2	; 0x02
    68be:	81 81       	ldd	r24, Z+1	; 0x01
    68c0:	81 81       	ldd	r24, Z+1	; 0x01
    68c2:	81 81       	ldd	r24, Z+1	; 0x01
    68c4:	82 82       	std	Z+2, r8	; 0x02
    68c6:	82 83       	std	Z+2, r24	; 0x02
    68c8:	83 84       	ldd	r8, Z+11	; 0x0b
    68ca:	85 86       	std	Z+13, r8	; 0x0d
    68cc:	86 87       	std	Z+14, r24	; 0x0e
    68ce:	88 8a       	std	Y+16, r8	; 0x10
    68d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    68d2:	8d 8f       	std	Y+29, r24	; 0x1d
    68d4:	90 91 93 95 	lds	r25, 0x9593
    68d8:	96 98       	cbi	0x12, 6	; 18
    68da:	9a 9c       	mul	r9, r10
    68dc:	9e a0       	ldd	r9, Y+38	; 0x26
    68de:	a2 a4       	ldd	r10, Z+42	; 0x2a
    68e0:	a6 a8       	ldd	r10, Z+54	; 0x36
    68e2:	ab ad       	ldd	r26, Y+59	; 0x3b
    68e4:	af b2       	in	r10, 0x1f	; 31
    68e6:	b4 b7       	in	r27, 0x34	; 52
    68e8:	b9 bc       	out	0x29, r11	; 41
    68ea:	bf c1       	rjmp	.+894    	; 0x6c6a <waves+0x46a>
    68ec:	c4 c7       	rjmp	.+3976   	; 0x7876 <__data_load_end+0x64>
    68ee:	ca cd       	rjmp	.-1132   	; 0x6484 <ProcessMusic+0x3c0>
    68f0:	cf d2       	rcall	.+1438   	; 0x6e90 <waves+0x690>
    68f2:	d5 d8       	rcall	.-3670   	; 0x5a9e <SetTile+0x2>
    68f4:	db de       	rcall	.-586    	; 0x66ac <steptable+0xa4>
    68f6:	e1 e4       	ldi	r30, 0x41	; 65
    68f8:	e7 ea       	ldi	r30, 0xA7	; 167
    68fa:	ed f0       	brhs	.+58     	; 0x6936 <waves+0x136>
    68fc:	f4 f7       	brge	.-4      	; 0x68fa <waves+0xfa>
    68fe:	fa fd       	.word	0xfdfa	; ????
    6900:	80 81       	ld	r24, Z
    6902:	82 83       	std	Z+2, r24	; 0x02
    6904:	84 85       	ldd	r24, Z+12	; 0x0c
    6906:	86 87       	std	Z+14, r24	; 0x0e
    6908:	88 89       	ldd	r24, Y+16	; 0x10
    690a:	8a 8b       	std	Y+18, r24	; 0x12
    690c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    690e:	8e 8f       	std	Y+30, r24	; 0x1e
    6910:	90 91 92 93 	lds	r25, 0x9392
    6914:	94 95       	.word	0x9594	; ????
    6916:	96 97       	sbiw	r26, 0x26	; 38
    6918:	98 99       	sbic	0x13, 0	; 19
    691a:	9a 9b       	sbis	0x13, 2	; 19
    691c:	9c 9d       	mul	r25, r12
    691e:	9e 9f       	mul	r25, r30
    6920:	a0 a1       	ldd	r26, Z+32	; 0x20
    6922:	a2 a3       	std	Z+34, r26	; 0x22
    6924:	a4 a5       	ldd	r26, Z+44	; 0x2c
    6926:	a6 a7       	std	Z+46, r26	; 0x2e
    6928:	a8 a9       	ldd	r26, Y+48	; 0x30
    692a:	aa ab       	std	Y+50, r26	; 0x32
    692c:	ac ad       	ldd	r26, Y+60	; 0x3c
    692e:	ae af       	std	Y+62, r26	; 0x3e
    6930:	b0 b1       	in	r27, 0x00	; 0
    6932:	b2 b3       	in	r27, 0x12	; 18
    6934:	b4 b5       	in	r27, 0x24	; 36
    6936:	b6 b7       	in	r27, 0x36	; 54
    6938:	b8 b9       	out	0x08, r27	; 8
    693a:	ba bb       	out	0x1a, r27	; 26
    693c:	bc bd       	out	0x2c, r27	; 44
    693e:	be bf       	out	0x3e, r27	; 62
    6940:	c0 c1       	rjmp	.+896    	; 0x6cc2 <waves+0x4c2>
    6942:	c2 c3       	rjmp	.+1924   	; 0x70c8 <waves+0x8c8>
    6944:	c4 c5       	rjmp	.+2952   	; 0x74ce <MapSprite2+0x7e>
    6946:	c6 c7       	rjmp	.+3980   	; 0x78d4 <__data_load_end+0xc2>
    6948:	c8 c9       	rjmp	.-3184   	; 0x5cda <PatchCommand07>
    694a:	ca cb       	rjmp	.-2156   	; 0x60e0 <ProcessMusic+0x1c>
    694c:	cc cd       	rjmp	.-1128   	; 0x64e6 <ProcessMusic+0x422>
    694e:	ce cf       	rjmp	.-100    	; 0x68ec <waves+0xec>
    6950:	d0 d1       	rcall	.+928    	; 0x6cf2 <waves+0x4f2>
    6952:	d2 d3       	rcall	.+1956   	; 0x70f8 <waves+0x8f8>
    6954:	d4 d5       	rcall	.+2984   	; 0x74fe <InitializeVideoMode+0xa>
    6956:	d6 d7       	rcall	.+4012   	; 0x7904 <__data_load_end+0xf2>
    6958:	d8 d9       	rcall	.-3152   	; 0x5d0a <PatchCommand11+0x1e>
    695a:	da db       	rcall	.-2124   	; 0x6110 <ProcessMusic+0x4c>
    695c:	dc dd       	rcall	.-1096   	; 0x6516 <set_note_waves+0x4>
    695e:	de df       	rcall	.-68     	; 0x691c <waves+0x11c>
    6960:	e0 e1       	ldi	r30, 0x10	; 16
    6962:	e2 e3       	ldi	r30, 0x32	; 50
    6964:	e4 e5       	ldi	r30, 0x54	; 84
    6966:	e6 e7       	ldi	r30, 0x76	; 118
    6968:	e8 e9       	ldi	r30, 0x98	; 152
    696a:	ea eb       	ldi	r30, 0xBA	; 186
    696c:	ec ed       	ldi	r30, 0xDC	; 220
    696e:	ee ef       	ldi	r30, 0xFE	; 254
    6970:	f0 f1       	brcs	.+124    	; 0x69ee <waves+0x1ee>
    6972:	f2 f3       	brmi	.-4      	; 0x6970 <waves+0x170>
    6974:	f4 f5       	brge	.+124    	; 0x69f2 <waves+0x1f2>
    6976:	f6 f7       	brtc	.-4      	; 0x6974 <waves+0x174>
    6978:	f8 f9       	.word	0xf9f8	; ????
    697a:	fa fb       	.word	0xfbfa	; ????
    697c:	fc fd       	.word	0xfdfc	; ????
    697e:	fe ff       	.word	0xfffe	; ????
    6980:	00 01       	movw	r0, r0
    6982:	02 03       	mulsu	r16, r18
    6984:	04 05       	cpc	r16, r4
    6986:	06 07       	cpc	r16, r22
    6988:	08 09       	sbc	r16, r8
    698a:	0a 0b       	sbc	r16, r26
    698c:	0c 0d       	add	r16, r12
    698e:	0e 0f       	add	r16, r30
    6990:	10 11       	cpse	r17, r0
    6992:	12 13       	cpse	r17, r18
    6994:	14 15       	cp	r17, r4
    6996:	16 17       	cp	r17, r22
    6998:	18 19       	sub	r17, r8
    699a:	1a 1b       	sub	r17, r26
    699c:	1c 1d       	adc	r17, r12
    699e:	1e 1f       	adc	r17, r30
    69a0:	20 21       	and	r18, r0
    69a2:	22 23       	and	r18, r18
    69a4:	24 25       	eor	r18, r4
    69a6:	26 27       	eor	r18, r22
    69a8:	28 29       	or	r18, r8
    69aa:	2a 2b       	or	r18, r26
    69ac:	2c 2d       	mov	r18, r12
    69ae:	2e 2f       	mov	r18, r30
    69b0:	30 31       	cpi	r19, 0x10	; 16
    69b2:	32 33       	cpi	r19, 0x32	; 50
    69b4:	34 35       	cpi	r19, 0x54	; 84
    69b6:	36 37       	cpi	r19, 0x76	; 118
    69b8:	38 39       	cpi	r19, 0x98	; 152
    69ba:	3a 3b       	cpi	r19, 0xBA	; 186
    69bc:	3c 3d       	cpi	r19, 0xDC	; 220
    69be:	3e 3f       	cpi	r19, 0xFE	; 254
    69c0:	40 41       	sbci	r20, 0x10	; 16
    69c2:	42 43       	sbci	r20, 0x32	; 50
    69c4:	44 45       	sbci	r20, 0x54	; 84
    69c6:	46 47       	sbci	r20, 0x76	; 118
    69c8:	48 49       	sbci	r20, 0x98	; 152
    69ca:	4a 4b       	sbci	r20, 0xBA	; 186
    69cc:	4c 4d       	sbci	r20, 0xDC	; 220
    69ce:	4e 4f       	sbci	r20, 0xFE	; 254
    69d0:	50 51       	subi	r21, 0x10	; 16
    69d2:	52 53       	subi	r21, 0x32	; 50
    69d4:	54 55       	subi	r21, 0x54	; 84
    69d6:	56 57       	subi	r21, 0x76	; 118
    69d8:	58 59       	subi	r21, 0x98	; 152
    69da:	5a 5b       	subi	r21, 0xBA	; 186
    69dc:	5c 5d       	subi	r21, 0xDC	; 220
    69de:	5e 5f       	subi	r21, 0xFE	; 254
    69e0:	60 61       	ori	r22, 0x10	; 16
    69e2:	62 63       	ori	r22, 0x32	; 50
    69e4:	64 65       	ori	r22, 0x54	; 84
    69e6:	66 67       	ori	r22, 0x76	; 118
    69e8:	68 69       	ori	r22, 0x98	; 152
    69ea:	6a 6b       	ori	r22, 0xBA	; 186
    69ec:	6c 6d       	ori	r22, 0xDC	; 220
    69ee:	6e 6f       	ori	r22, 0xFE	; 254
    69f0:	70 71       	andi	r23, 0x10	; 16
    69f2:	72 73       	andi	r23, 0x32	; 50
    69f4:	74 75       	andi	r23, 0x54	; 84
    69f6:	76 77       	andi	r23, 0x76	; 118
    69f8:	78 79       	andi	r23, 0x98	; 152
    69fa:	7a 7b       	andi	r23, 0xBA	; 186
    69fc:	7c 7d       	andi	r23, 0xDC	; 220
    69fe:	7e 7f       	andi	r23, 0xFE	; 254
    6a00:	00 02       	muls	r16, r16
    6a02:	04 06       	cpc	r0, r20
    6a04:	08 0a       	sbc	r0, r24
    6a06:	0c 0e       	add	r0, r28
    6a08:	10 12       	cpse	r1, r16
    6a0a:	14 16       	cp	r1, r20
    6a0c:	18 1a       	sub	r1, r24
    6a0e:	1c 1e       	adc	r1, r28
    6a10:	20 22       	and	r2, r16
    6a12:	24 26       	eor	r2, r20
    6a14:	28 2a       	or	r2, r24
    6a16:	2c 2e       	mov	r2, r28
    6a18:	30 32       	cpi	r19, 0x20	; 32
    6a1a:	34 36       	cpi	r19, 0x64	; 100
    6a1c:	38 3a       	cpi	r19, 0xA8	; 168
    6a1e:	3c 3e       	cpi	r19, 0xEC	; 236
    6a20:	40 42       	sbci	r20, 0x20	; 32
    6a22:	44 46       	sbci	r20, 0x64	; 100
    6a24:	48 4a       	sbci	r20, 0xA8	; 168
    6a26:	4c 4e       	sbci	r20, 0xEC	; 236
    6a28:	50 52       	subi	r21, 0x20	; 32
    6a2a:	54 56       	subi	r21, 0x64	; 100
    6a2c:	58 5a       	subi	r21, 0xA8	; 168
    6a2e:	5c 5e       	subi	r21, 0xEC	; 236
    6a30:	60 62       	ori	r22, 0x20	; 32
    6a32:	64 66       	ori	r22, 0x64	; 100
    6a34:	68 6a       	ori	r22, 0xA8	; 168
    6a36:	6c 6e       	ori	r22, 0xEC	; 236
    6a38:	70 72       	andi	r23, 0x20	; 32
    6a3a:	74 76       	andi	r23, 0x64	; 100
    6a3c:	78 7a       	andi	r23, 0xA8	; 168
    6a3e:	7c 7e       	andi	r23, 0xEC	; 236
    6a40:	7f 7d       	andi	r23, 0xDF	; 223
    6a42:	7b 79       	andi	r23, 0x9B	; 155
    6a44:	77 75       	andi	r23, 0x57	; 87
    6a46:	73 71       	andi	r23, 0x13	; 19
    6a48:	6f 6d       	ori	r22, 0xDF	; 223
    6a4a:	6b 69       	ori	r22, 0x9B	; 155
    6a4c:	67 65       	ori	r22, 0x57	; 87
    6a4e:	63 61       	ori	r22, 0x13	; 19
    6a50:	5f 5d       	subi	r21, 0xDF	; 223
    6a52:	5b 59       	subi	r21, 0x9B	; 155
    6a54:	57 55       	subi	r21, 0x57	; 87
    6a56:	53 51       	subi	r21, 0x13	; 19
    6a58:	4f 4d       	sbci	r20, 0xDF	; 223
    6a5a:	4b 49       	sbci	r20, 0x9B	; 155
    6a5c:	47 45       	sbci	r20, 0x57	; 87
    6a5e:	43 41       	sbci	r20, 0x13	; 19
    6a60:	3f 3d       	cpi	r19, 0xDF	; 223
    6a62:	3b 39       	cpi	r19, 0x9B	; 155
    6a64:	37 35       	cpi	r19, 0x57	; 87
    6a66:	33 31       	cpi	r19, 0x13	; 19
    6a68:	2f 2d       	mov	r18, r15
    6a6a:	2b 29       	or	r18, r11
    6a6c:	27 25       	eor	r18, r7
    6a6e:	23 21       	and	r18, r3
    6a70:	1f 1d       	adc	r17, r15
    6a72:	1b 19       	sub	r17, r11
    6a74:	17 15       	cp	r17, r7
    6a76:	13 11       	cpse	r17, r3
    6a78:	0f 0d       	add	r16, r15
    6a7a:	0b 09       	sbc	r16, r11
    6a7c:	07 05       	cpc	r16, r7
    6a7e:	03 01       	movw	r0, r6
    6a80:	ff fd       	.word	0xfdff	; ????
    6a82:	fb f9       	.word	0xf9fb	; ????
    6a84:	f7 f5       	brid	.+124    	; 0x6b02 <waves+0x302>
    6a86:	f3 f1       	brvs	.+124    	; 0x6b04 <waves+0x304>
    6a88:	ef ed       	ldi	r30, 0xDF	; 223
    6a8a:	eb e9       	ldi	r30, 0x9B	; 155
    6a8c:	e7 e5       	ldi	r30, 0x57	; 87
    6a8e:	e3 e1       	ldi	r30, 0x13	; 19
    6a90:	df dd       	rcall	.-1090   	; 0x6650 <steptable+0x48>
    6a92:	db d9       	rcall	.-3146   	; 0x5e4a <InitMusicPlayer+0x42>
    6a94:	d7 d5       	rcall	.+2990   	; 0x7644 <DisplayLogo+0x34>
    6a96:	d3 d1       	rcall	.+934    	; 0x6e3e <waves+0x63e>
    6a98:	cf cd       	rjmp	.-1122   	; 0x6638 <steptable+0x30>
    6a9a:	cb c9       	rjmp	.-3178   	; 0x5e32 <InitMusicPlayer+0x2a>
    6a9c:	c7 c5       	rjmp	.+2958   	; 0x762c <DisplayLogo+0x1c>
    6a9e:	c3 c1       	rjmp	.+902    	; 0x6e26 <waves+0x626>
    6aa0:	bf bd       	out	0x2f, r27	; 47
    6aa2:	bb b9       	out	0x0b, r27	; 11
    6aa4:	b7 b5       	in	r27, 0x27	; 39
    6aa6:	b3 b1       	in	r27, 0x03	; 3
    6aa8:	af ad       	ldd	r26, Y+63	; 0x3f
    6aaa:	ab a9       	ldd	r26, Y+51	; 0x33
    6aac:	a7 a5       	ldd	r26, Z+47	; 0x2f
    6aae:	a3 a1       	ldd	r26, Z+35	; 0x23
    6ab0:	9f 9d       	mul	r25, r15
    6ab2:	9b 99       	sbic	0x13, 3	; 19
    6ab4:	97 95       	ror	r25
    6ab6:	93 91       	.word	0x9193	; ????
    6ab8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    6aba:	8b 89       	ldd	r24, Y+19	; 0x13
    6abc:	87 85       	ldd	r24, Z+15	; 0x0f
    6abe:	83 81       	ldd	r24, Z+3	; 0x03
    6ac0:	80 82       	st	Z, r8
    6ac2:	84 86       	std	Z+12, r8	; 0x0c
    6ac4:	88 8a       	std	Y+16, r8	; 0x10
    6ac6:	8c 8e       	std	Y+28, r8	; 0x1c
    6ac8:	90 92 94 96 	sts	0x9694, r9
    6acc:	98 9a       	sbi	0x13, 0	; 19
    6ace:	9c 9e       	mul	r9, r28
    6ad0:	a0 a2       	std	Z+32, r10	; 0x20
    6ad2:	a4 a6       	std	Z+44, r10	; 0x2c
    6ad4:	a8 aa       	std	Y+48, r10	; 0x30
    6ad6:	ac ae       	std	Y+60, r10	; 0x3c
    6ad8:	b0 b2       	in	r11, 0x10	; 16
    6ada:	b4 b6       	in	r11, 0x34	; 52
    6adc:	b8 ba       	out	0x18, r11	; 24
    6ade:	bc be       	out	0x3c, r11	; 60
    6ae0:	c0 c2       	rjmp	.+1408   	; 0x7062 <waves+0x862>
    6ae2:	c4 c6       	rjmp	.+3464   	; 0x786c <__data_load_end+0x5a>
    6ae4:	c8 ca       	rjmp	.-2672   	; 0x6076 <TriggerNote+0x32>
    6ae6:	cc ce       	rjmp	.-616    	; 0x6880 <waves+0x80>
    6ae8:	d0 d2       	rcall	.+1440   	; 0x708a <waves+0x88a>
    6aea:	d4 d6       	rcall	.+3496   	; 0x7894 <__data_load_end+0x82>
    6aec:	d8 da       	rcall	.-2640   	; 0x609e <TriggerNote+0x5a>
    6aee:	dc de       	rcall	.-584    	; 0x68a8 <waves+0xa8>
    6af0:	e0 e2       	ldi	r30, 0x20	; 32
    6af2:	e4 e6       	ldi	r30, 0x64	; 100
    6af4:	e8 ea       	ldi	r30, 0xA8	; 168
    6af6:	ec ee       	ldi	r30, 0xEC	; 236
    6af8:	f0 f2       	brcs	.-68     	; 0x6ab6 <waves+0x2b6>
    6afa:	f4 f6       	brge	.-68     	; 0x6ab8 <waves+0x2b8>
    6afc:	f8 fa       	.word	0xfaf8	; ????
    6afe:	fc fe       	.word	0xfefc	; ????
    6b00:	7f 7f       	andi	r23, 0xFF	; 255
    6b02:	7f 7f       	andi	r23, 0xFF	; 255
    6b04:	7f 7f       	andi	r23, 0xFF	; 255
    6b06:	7f 7f       	andi	r23, 0xFF	; 255
    6b08:	7f 7f       	andi	r23, 0xFF	; 255
    6b0a:	7f 7f       	andi	r23, 0xFF	; 255
    6b0c:	7f 7f       	andi	r23, 0xFF	; 255
    6b0e:	7f 7f       	andi	r23, 0xFF	; 255
    6b10:	7f 7f       	andi	r23, 0xFF	; 255
    6b12:	7f 7f       	andi	r23, 0xFF	; 255
    6b14:	7f 7f       	andi	r23, 0xFF	; 255
    6b16:	7f 7f       	andi	r23, 0xFF	; 255
    6b18:	7f 7f       	andi	r23, 0xFF	; 255
    6b1a:	7f 7f       	andi	r23, 0xFF	; 255
    6b1c:	7f 7f       	andi	r23, 0xFF	; 255
    6b1e:	7f 7f       	andi	r23, 0xFF	; 255
    6b20:	7f 7f       	andi	r23, 0xFF	; 255
    6b22:	7f 7f       	andi	r23, 0xFF	; 255
    6b24:	7f 7f       	andi	r23, 0xFF	; 255
    6b26:	7f 7f       	andi	r23, 0xFF	; 255
    6b28:	7f 7f       	andi	r23, 0xFF	; 255
    6b2a:	7f 7f       	andi	r23, 0xFF	; 255
    6b2c:	7f 7f       	andi	r23, 0xFF	; 255
    6b2e:	7f 7f       	andi	r23, 0xFF	; 255
    6b30:	7f 7f       	andi	r23, 0xFF	; 255
    6b32:	7f 7f       	andi	r23, 0xFF	; 255
    6b34:	7f 7f       	andi	r23, 0xFF	; 255
    6b36:	7f 7f       	andi	r23, 0xFF	; 255
    6b38:	7f 7f       	andi	r23, 0xFF	; 255
    6b3a:	7f 7f       	andi	r23, 0xFF	; 255
    6b3c:	7f 7f       	andi	r23, 0xFF	; 255
    6b3e:	7f 7f       	andi	r23, 0xFF	; 255
    6b40:	80 80       	ld	r8, Z
    6b42:	80 80       	ld	r8, Z
    6b44:	80 80       	ld	r8, Z
    6b46:	80 80       	ld	r8, Z
    6b48:	80 80       	ld	r8, Z
    6b4a:	80 80       	ld	r8, Z
    6b4c:	80 80       	ld	r8, Z
    6b4e:	80 80       	ld	r8, Z
    6b50:	80 80       	ld	r8, Z
    6b52:	80 80       	ld	r8, Z
    6b54:	80 80       	ld	r8, Z
    6b56:	80 80       	ld	r8, Z
    6b58:	80 80       	ld	r8, Z
    6b5a:	80 80       	ld	r8, Z
    6b5c:	80 80       	ld	r8, Z
    6b5e:	80 80       	ld	r8, Z
    6b60:	80 80       	ld	r8, Z
    6b62:	80 80       	ld	r8, Z
    6b64:	80 80       	ld	r8, Z
    6b66:	80 80       	ld	r8, Z
    6b68:	80 80       	ld	r8, Z
    6b6a:	80 80       	ld	r8, Z
    6b6c:	80 80       	ld	r8, Z
    6b6e:	80 80       	ld	r8, Z
    6b70:	80 80       	ld	r8, Z
    6b72:	80 80       	ld	r8, Z
    6b74:	80 80       	ld	r8, Z
    6b76:	80 80       	ld	r8, Z
    6b78:	80 80       	ld	r8, Z
    6b7a:	80 80       	ld	r8, Z
    6b7c:	80 80       	ld	r8, Z
    6b7e:	80 80       	ld	r8, Z
    6b80:	80 80       	ld	r8, Z
    6b82:	80 80       	ld	r8, Z
    6b84:	80 80       	ld	r8, Z
    6b86:	80 80       	ld	r8, Z
    6b88:	80 80       	ld	r8, Z
    6b8a:	80 80       	ld	r8, Z
    6b8c:	80 80       	ld	r8, Z
    6b8e:	80 80       	ld	r8, Z
    6b90:	80 80       	ld	r8, Z
    6b92:	80 80       	ld	r8, Z
    6b94:	80 80       	ld	r8, Z
    6b96:	80 80       	ld	r8, Z
    6b98:	80 80       	ld	r8, Z
    6b9a:	80 80       	ld	r8, Z
    6b9c:	80 80       	ld	r8, Z
    6b9e:	80 80       	ld	r8, Z
    6ba0:	80 80       	ld	r8, Z
    6ba2:	80 80       	ld	r8, Z
    6ba4:	80 80       	ld	r8, Z
    6ba6:	80 80       	ld	r8, Z
    6ba8:	80 80       	ld	r8, Z
    6baa:	80 80       	ld	r8, Z
    6bac:	80 80       	ld	r8, Z
    6bae:	80 80       	ld	r8, Z
    6bb0:	80 80       	ld	r8, Z
    6bb2:	80 80       	ld	r8, Z
    6bb4:	80 80       	ld	r8, Z
    6bb6:	80 80       	ld	r8, Z
    6bb8:	80 80       	ld	r8, Z
    6bba:	80 80       	ld	r8, Z
    6bbc:	80 80       	ld	r8, Z
    6bbe:	80 80       	ld	r8, Z
    6bc0:	80 80       	ld	r8, Z
    6bc2:	80 80       	ld	r8, Z
    6bc4:	80 80       	ld	r8, Z
    6bc6:	80 80       	ld	r8, Z
    6bc8:	80 80       	ld	r8, Z
    6bca:	80 80       	ld	r8, Z
    6bcc:	80 80       	ld	r8, Z
    6bce:	80 80       	ld	r8, Z
    6bd0:	80 80       	ld	r8, Z
    6bd2:	80 80       	ld	r8, Z
    6bd4:	80 80       	ld	r8, Z
    6bd6:	80 80       	ld	r8, Z
    6bd8:	80 80       	ld	r8, Z
    6bda:	80 80       	ld	r8, Z
    6bdc:	80 80       	ld	r8, Z
    6bde:	80 80       	ld	r8, Z
    6be0:	80 80       	ld	r8, Z
    6be2:	80 80       	ld	r8, Z
    6be4:	80 80       	ld	r8, Z
    6be6:	80 80       	ld	r8, Z
    6be8:	80 80       	ld	r8, Z
    6bea:	80 80       	ld	r8, Z
    6bec:	80 80       	ld	r8, Z
    6bee:	80 80       	ld	r8, Z
    6bf0:	80 80       	ld	r8, Z
    6bf2:	80 80       	ld	r8, Z
    6bf4:	80 80       	ld	r8, Z
    6bf6:	80 80       	ld	r8, Z
    6bf8:	80 80       	ld	r8, Z
    6bfa:	80 80       	ld	r8, Z
    6bfc:	80 80       	ld	r8, Z
    6bfe:	80 80       	ld	r8, Z
    6c00:	7f 7f       	andi	r23, 0xFF	; 255
    6c02:	7f 7f       	andi	r23, 0xFF	; 255
    6c04:	7f 7f       	andi	r23, 0xFF	; 255
    6c06:	7f 7f       	andi	r23, 0xFF	; 255
    6c08:	7f 7f       	andi	r23, 0xFF	; 255
    6c0a:	7f 7f       	andi	r23, 0xFF	; 255
    6c0c:	7f 7f       	andi	r23, 0xFF	; 255
    6c0e:	7f 7f       	andi	r23, 0xFF	; 255
    6c10:	7f 7f       	andi	r23, 0xFF	; 255
    6c12:	7f 7f       	andi	r23, 0xFF	; 255
    6c14:	7f 7f       	andi	r23, 0xFF	; 255
    6c16:	7f 7f       	andi	r23, 0xFF	; 255
    6c18:	7f 7f       	andi	r23, 0xFF	; 255
    6c1a:	7f 7f       	andi	r23, 0xFF	; 255
    6c1c:	7f 7f       	andi	r23, 0xFF	; 255
    6c1e:	7f 7f       	andi	r23, 0xFF	; 255
    6c20:	7f 7f       	andi	r23, 0xFF	; 255
    6c22:	7f 7f       	andi	r23, 0xFF	; 255
    6c24:	7f 7f       	andi	r23, 0xFF	; 255
    6c26:	7f 7f       	andi	r23, 0xFF	; 255
    6c28:	7f 7f       	andi	r23, 0xFF	; 255
    6c2a:	7f 7f       	andi	r23, 0xFF	; 255
    6c2c:	7f 7f       	andi	r23, 0xFF	; 255
    6c2e:	7f 7f       	andi	r23, 0xFF	; 255
    6c30:	7f 7f       	andi	r23, 0xFF	; 255
    6c32:	7f 7f       	andi	r23, 0xFF	; 255
    6c34:	7f 7f       	andi	r23, 0xFF	; 255
    6c36:	7f 7f       	andi	r23, 0xFF	; 255
    6c38:	7f 7f       	andi	r23, 0xFF	; 255
    6c3a:	7f 7f       	andi	r23, 0xFF	; 255
    6c3c:	7f 7f       	andi	r23, 0xFF	; 255
    6c3e:	7f 7f       	andi	r23, 0xFF	; 255
    6c40:	7f 7f       	andi	r23, 0xFF	; 255
    6c42:	7f 7f       	andi	r23, 0xFF	; 255
    6c44:	7f 7f       	andi	r23, 0xFF	; 255
    6c46:	7f 7f       	andi	r23, 0xFF	; 255
    6c48:	7f 7f       	andi	r23, 0xFF	; 255
    6c4a:	7f 7f       	andi	r23, 0xFF	; 255
    6c4c:	7f 7f       	andi	r23, 0xFF	; 255
    6c4e:	7f 7f       	andi	r23, 0xFF	; 255
    6c50:	7f 7f       	andi	r23, 0xFF	; 255
    6c52:	7f 7f       	andi	r23, 0xFF	; 255
    6c54:	7f 7f       	andi	r23, 0xFF	; 255
    6c56:	7f 7f       	andi	r23, 0xFF	; 255
    6c58:	7f 7f       	andi	r23, 0xFF	; 255
    6c5a:	7f 7f       	andi	r23, 0xFF	; 255
    6c5c:	7f 7f       	andi	r23, 0xFF	; 255
    6c5e:	7f 7f       	andi	r23, 0xFF	; 255
    6c60:	7f 7f       	andi	r23, 0xFF	; 255
    6c62:	7f 7f       	andi	r23, 0xFF	; 255
    6c64:	7f 7f       	andi	r23, 0xFF	; 255
    6c66:	7f 7f       	andi	r23, 0xFF	; 255
    6c68:	7f 7f       	andi	r23, 0xFF	; 255
    6c6a:	7f 7f       	andi	r23, 0xFF	; 255
    6c6c:	7f 7f       	andi	r23, 0xFF	; 255
    6c6e:	7f 7f       	andi	r23, 0xFF	; 255
    6c70:	7f 7f       	andi	r23, 0xFF	; 255
    6c72:	7f 7f       	andi	r23, 0xFF	; 255
    6c74:	7f 7f       	andi	r23, 0xFF	; 255
    6c76:	7f 7f       	andi	r23, 0xFF	; 255
    6c78:	7f 7f       	andi	r23, 0xFF	; 255
    6c7a:	7f 7f       	andi	r23, 0xFF	; 255
    6c7c:	7f 7f       	andi	r23, 0xFF	; 255
    6c7e:	7f 7f       	andi	r23, 0xFF	; 255
    6c80:	80 80       	ld	r8, Z
    6c82:	80 80       	ld	r8, Z
    6c84:	80 80       	ld	r8, Z
    6c86:	80 80       	ld	r8, Z
    6c88:	80 80       	ld	r8, Z
    6c8a:	80 80       	ld	r8, Z
    6c8c:	80 80       	ld	r8, Z
    6c8e:	80 80       	ld	r8, Z
    6c90:	80 80       	ld	r8, Z
    6c92:	80 80       	ld	r8, Z
    6c94:	80 80       	ld	r8, Z
    6c96:	80 80       	ld	r8, Z
    6c98:	80 80       	ld	r8, Z
    6c9a:	80 80       	ld	r8, Z
    6c9c:	80 80       	ld	r8, Z
    6c9e:	80 80       	ld	r8, Z
    6ca0:	80 80       	ld	r8, Z
    6ca2:	80 80       	ld	r8, Z
    6ca4:	80 80       	ld	r8, Z
    6ca6:	80 80       	ld	r8, Z
    6ca8:	80 80       	ld	r8, Z
    6caa:	80 80       	ld	r8, Z
    6cac:	80 80       	ld	r8, Z
    6cae:	80 80       	ld	r8, Z
    6cb0:	80 80       	ld	r8, Z
    6cb2:	80 80       	ld	r8, Z
    6cb4:	80 80       	ld	r8, Z
    6cb6:	80 80       	ld	r8, Z
    6cb8:	80 80       	ld	r8, Z
    6cba:	80 80       	ld	r8, Z
    6cbc:	80 80       	ld	r8, Z
    6cbe:	80 80       	ld	r8, Z
    6cc0:	80 80       	ld	r8, Z
    6cc2:	80 80       	ld	r8, Z
    6cc4:	80 80       	ld	r8, Z
    6cc6:	80 80       	ld	r8, Z
    6cc8:	80 80       	ld	r8, Z
    6cca:	80 80       	ld	r8, Z
    6ccc:	80 80       	ld	r8, Z
    6cce:	80 80       	ld	r8, Z
    6cd0:	80 80       	ld	r8, Z
    6cd2:	80 80       	ld	r8, Z
    6cd4:	80 80       	ld	r8, Z
    6cd6:	80 80       	ld	r8, Z
    6cd8:	80 80       	ld	r8, Z
    6cda:	80 80       	ld	r8, Z
    6cdc:	80 80       	ld	r8, Z
    6cde:	80 80       	ld	r8, Z
    6ce0:	80 80       	ld	r8, Z
    6ce2:	80 80       	ld	r8, Z
    6ce4:	80 80       	ld	r8, Z
    6ce6:	80 80       	ld	r8, Z
    6ce8:	80 80       	ld	r8, Z
    6cea:	80 80       	ld	r8, Z
    6cec:	80 80       	ld	r8, Z
    6cee:	80 80       	ld	r8, Z
    6cf0:	80 80       	ld	r8, Z
    6cf2:	80 80       	ld	r8, Z
    6cf4:	80 80       	ld	r8, Z
    6cf6:	80 80       	ld	r8, Z
    6cf8:	80 80       	ld	r8, Z
    6cfa:	80 80       	ld	r8, Z
    6cfc:	80 80       	ld	r8, Z
    6cfe:	80 80       	ld	r8, Z
    6d00:	7f 7f       	andi	r23, 0xFF	; 255
    6d02:	7f 7f       	andi	r23, 0xFF	; 255
    6d04:	7f 7f       	andi	r23, 0xFF	; 255
    6d06:	7f 7f       	andi	r23, 0xFF	; 255
    6d08:	7f 7f       	andi	r23, 0xFF	; 255
    6d0a:	7f 7f       	andi	r23, 0xFF	; 255
    6d0c:	7f 7f       	andi	r23, 0xFF	; 255
    6d0e:	7f 7f       	andi	r23, 0xFF	; 255
    6d10:	7f 7f       	andi	r23, 0xFF	; 255
    6d12:	7f 7f       	andi	r23, 0xFF	; 255
    6d14:	7f 7f       	andi	r23, 0xFF	; 255
    6d16:	7f 7f       	andi	r23, 0xFF	; 255
    6d18:	7f 7f       	andi	r23, 0xFF	; 255
    6d1a:	7f 7f       	andi	r23, 0xFF	; 255
    6d1c:	7f 7f       	andi	r23, 0xFF	; 255
    6d1e:	7f 7f       	andi	r23, 0xFF	; 255
    6d20:	7f 7f       	andi	r23, 0xFF	; 255
    6d22:	7f 7f       	andi	r23, 0xFF	; 255
    6d24:	7f 7f       	andi	r23, 0xFF	; 255
    6d26:	7f 7f       	andi	r23, 0xFF	; 255
    6d28:	7f 7f       	andi	r23, 0xFF	; 255
    6d2a:	7f 7f       	andi	r23, 0xFF	; 255
    6d2c:	7f 7f       	andi	r23, 0xFF	; 255
    6d2e:	7f 7f       	andi	r23, 0xFF	; 255
    6d30:	7f 7f       	andi	r23, 0xFF	; 255
    6d32:	7f 7f       	andi	r23, 0xFF	; 255
    6d34:	7f 7f       	andi	r23, 0xFF	; 255
    6d36:	7f 7f       	andi	r23, 0xFF	; 255
    6d38:	7f 7f       	andi	r23, 0xFF	; 255
    6d3a:	7f 7f       	andi	r23, 0xFF	; 255
    6d3c:	7f 7f       	andi	r23, 0xFF	; 255
    6d3e:	7f 7f       	andi	r23, 0xFF	; 255
    6d40:	7f 7f       	andi	r23, 0xFF	; 255
    6d42:	7f 7f       	andi	r23, 0xFF	; 255
    6d44:	7f 7f       	andi	r23, 0xFF	; 255
    6d46:	7f 7f       	andi	r23, 0xFF	; 255
    6d48:	7f 7f       	andi	r23, 0xFF	; 255
    6d4a:	7f 7f       	andi	r23, 0xFF	; 255
    6d4c:	7f 7f       	andi	r23, 0xFF	; 255
    6d4e:	7f 7f       	andi	r23, 0xFF	; 255
    6d50:	7f 7f       	andi	r23, 0xFF	; 255
    6d52:	7f 7f       	andi	r23, 0xFF	; 255
    6d54:	7f 7f       	andi	r23, 0xFF	; 255
    6d56:	7f 7f       	andi	r23, 0xFF	; 255
    6d58:	7f 7f       	andi	r23, 0xFF	; 255
    6d5a:	7f 7f       	andi	r23, 0xFF	; 255
    6d5c:	7f 7f       	andi	r23, 0xFF	; 255
    6d5e:	7f 7f       	andi	r23, 0xFF	; 255
    6d60:	7f 7f       	andi	r23, 0xFF	; 255
    6d62:	7f 7f       	andi	r23, 0xFF	; 255
    6d64:	7f 7f       	andi	r23, 0xFF	; 255
    6d66:	7f 7f       	andi	r23, 0xFF	; 255
    6d68:	7f 7f       	andi	r23, 0xFF	; 255
    6d6a:	7f 7f       	andi	r23, 0xFF	; 255
    6d6c:	7f 7f       	andi	r23, 0xFF	; 255
    6d6e:	7f 7f       	andi	r23, 0xFF	; 255
    6d70:	7f 7f       	andi	r23, 0xFF	; 255
    6d72:	7f 7f       	andi	r23, 0xFF	; 255
    6d74:	7f 7f       	andi	r23, 0xFF	; 255
    6d76:	7f 7f       	andi	r23, 0xFF	; 255
    6d78:	7f 7f       	andi	r23, 0xFF	; 255
    6d7a:	7f 7f       	andi	r23, 0xFF	; 255
    6d7c:	7f 7f       	andi	r23, 0xFF	; 255
    6d7e:	7f 7f       	andi	r23, 0xFF	; 255
    6d80:	7f 7f       	andi	r23, 0xFF	; 255
    6d82:	7f 7f       	andi	r23, 0xFF	; 255
    6d84:	7f 7f       	andi	r23, 0xFF	; 255
    6d86:	7f 7f       	andi	r23, 0xFF	; 255
    6d88:	7f 7f       	andi	r23, 0xFF	; 255
    6d8a:	7f 7f       	andi	r23, 0xFF	; 255
    6d8c:	7f 7f       	andi	r23, 0xFF	; 255
    6d8e:	7f 7f       	andi	r23, 0xFF	; 255
    6d90:	7f 7f       	andi	r23, 0xFF	; 255
    6d92:	7f 7f       	andi	r23, 0xFF	; 255
    6d94:	7f 7f       	andi	r23, 0xFF	; 255
    6d96:	7f 7f       	andi	r23, 0xFF	; 255
    6d98:	7f 7f       	andi	r23, 0xFF	; 255
    6d9a:	7f 7f       	andi	r23, 0xFF	; 255
    6d9c:	7f 7f       	andi	r23, 0xFF	; 255
    6d9e:	7f 7f       	andi	r23, 0xFF	; 255
    6da0:	7f 7f       	andi	r23, 0xFF	; 255
    6da2:	7f 7f       	andi	r23, 0xFF	; 255
    6da4:	7f 7f       	andi	r23, 0xFF	; 255
    6da6:	7f 7f       	andi	r23, 0xFF	; 255
    6da8:	7f 7f       	andi	r23, 0xFF	; 255
    6daa:	7f 7f       	andi	r23, 0xFF	; 255
    6dac:	7f 7f       	andi	r23, 0xFF	; 255
    6dae:	7f 7f       	andi	r23, 0xFF	; 255
    6db0:	7f 7f       	andi	r23, 0xFF	; 255
    6db2:	7f 7f       	andi	r23, 0xFF	; 255
    6db4:	7f 7f       	andi	r23, 0xFF	; 255
    6db6:	7f 7f       	andi	r23, 0xFF	; 255
    6db8:	7f 7f       	andi	r23, 0xFF	; 255
    6dba:	7f 7f       	andi	r23, 0xFF	; 255
    6dbc:	7f 7f       	andi	r23, 0xFF	; 255
    6dbe:	7f 7f       	andi	r23, 0xFF	; 255
    6dc0:	80 80       	ld	r8, Z
    6dc2:	80 80       	ld	r8, Z
    6dc4:	80 80       	ld	r8, Z
    6dc6:	80 80       	ld	r8, Z
    6dc8:	80 80       	ld	r8, Z
    6dca:	80 80       	ld	r8, Z
    6dcc:	80 80       	ld	r8, Z
    6dce:	80 80       	ld	r8, Z
    6dd0:	80 80       	ld	r8, Z
    6dd2:	80 80       	ld	r8, Z
    6dd4:	80 80       	ld	r8, Z
    6dd6:	80 80       	ld	r8, Z
    6dd8:	80 80       	ld	r8, Z
    6dda:	80 80       	ld	r8, Z
    6ddc:	80 80       	ld	r8, Z
    6dde:	80 80       	ld	r8, Z
    6de0:	80 80       	ld	r8, Z
    6de2:	80 80       	ld	r8, Z
    6de4:	80 80       	ld	r8, Z
    6de6:	80 80       	ld	r8, Z
    6de8:	80 80       	ld	r8, Z
    6dea:	80 80       	ld	r8, Z
    6dec:	80 80       	ld	r8, Z
    6dee:	80 80       	ld	r8, Z
    6df0:	80 80       	ld	r8, Z
    6df2:	80 80       	ld	r8, Z
    6df4:	80 80       	ld	r8, Z
    6df6:	80 80       	ld	r8, Z
    6df8:	80 80       	ld	r8, Z
    6dfa:	80 80       	ld	r8, Z
    6dfc:	80 80       	ld	r8, Z
    6dfe:	80 80       	ld	r8, Z
    6e00:	03 09       	sbc	r16, r3
    6e02:	13 1e       	adc	r1, r19
    6e04:	28 31       	cpi	r18, 0x18	; 24
    6e06:	3a 40       	sbci	r19, 0x0A	; 10
    6e08:	46 4c       	sbci	r20, 0xC6	; 198
    6e0a:	50 54       	subi	r21, 0x40	; 64
    6e0c:	58 5b       	subi	r21, 0xB8	; 184
    6e0e:	5e 61       	ori	r21, 0x1E	; 30
    6e10:	63 65       	ori	r22, 0x53	; 83
    6e12:	67 69       	ori	r22, 0x97	; 151
    6e14:	6b 6c       	ori	r22, 0xCB	; 203
    6e16:	6e 6f       	ori	r22, 0xFE	; 254
    6e18:	70 71       	andi	r23, 0x10	; 16
    6e1a:	72 73       	andi	r23, 0x32	; 50
    6e1c:	74 75       	andi	r23, 0x54	; 84
    6e1e:	76 77       	andi	r23, 0x76	; 118
    6e20:	77 78       	andi	r23, 0x87	; 135
    6e22:	79 79       	andi	r23, 0x99	; 153
    6e24:	7a 7a       	andi	r23, 0xAA	; 170
    6e26:	7b 7b       	andi	r23, 0xBB	; 187
    6e28:	7c 7c       	andi	r23, 0xCC	; 204
    6e2a:	7c 7d       	andi	r23, 0xDC	; 220
    6e2c:	7d 7d       	andi	r23, 0xDD	; 221
    6e2e:	7e 7e       	andi	r23, 0xEE	; 238
    6e30:	7e 7e       	andi	r23, 0xEE	; 238
    6e32:	7f 7f       	andi	r23, 0xFF	; 255
    6e34:	7f 7f       	andi	r23, 0xFF	; 255
    6e36:	7f 7f       	andi	r23, 0xFF	; 255
    6e38:	7f 7f       	andi	r23, 0xFF	; 255
    6e3a:	7f 7f       	andi	r23, 0xFF	; 255
    6e3c:	7f 7f       	andi	r23, 0xFF	; 255
    6e3e:	7f 7f       	andi	r23, 0xFF	; 255
    6e40:	7f 7f       	andi	r23, 0xFF	; 255
    6e42:	7f 7f       	andi	r23, 0xFF	; 255
    6e44:	7f 7f       	andi	r23, 0xFF	; 255
    6e46:	7f 7f       	andi	r23, 0xFF	; 255
    6e48:	7f 7f       	andi	r23, 0xFF	; 255
    6e4a:	7f 7f       	andi	r23, 0xFF	; 255
    6e4c:	7f 7e       	andi	r23, 0xEF	; 239
    6e4e:	7e 7e       	andi	r23, 0xEE	; 238
    6e50:	7e 7d       	andi	r23, 0xDE	; 222
    6e52:	7d 7d       	andi	r23, 0xDD	; 221
    6e54:	7c 7c       	andi	r23, 0xCC	; 204
    6e56:	7c 7b       	andi	r23, 0xBC	; 188
    6e58:	7b 7a       	andi	r23, 0xAB	; 171
    6e5a:	7a 79       	andi	r23, 0x9A	; 154
    6e5c:	79 78       	andi	r23, 0x89	; 137
    6e5e:	77 77       	andi	r23, 0x77	; 119
    6e60:	76 75       	andi	r23, 0x56	; 86
    6e62:	74 73       	andi	r23, 0x34	; 52
    6e64:	72 71       	andi	r23, 0x12	; 18
    6e66:	70 6f       	ori	r23, 0xF0	; 240
    6e68:	6e 6c       	ori	r22, 0xCE	; 206
    6e6a:	6b 69       	ori	r22, 0x9B	; 155
    6e6c:	67 65       	ori	r22, 0x57	; 87
    6e6e:	63 61       	ori	r22, 0x13	; 19
    6e70:	5e 5b       	subi	r21, 0xBE	; 190
    6e72:	58 54       	subi	r21, 0x48	; 72
    6e74:	50 4c       	sbci	r21, 0xC0	; 192
    6e76:	46 40       	sbci	r20, 0x06	; 6
    6e78:	3a 31       	cpi	r19, 0x1A	; 26
    6e7a:	28 1e       	adc	r2, r24
    6e7c:	13 09       	sbc	r17, r3
    6e7e:	03 00       	.word	0x0003	; ????
    6e80:	c6 cc       	rjmp	.-1652   	; 0x680e <waves+0xe>
    6e82:	d5 db       	rcall	.-2134   	; 0x662e <steptable+0x26>
    6e84:	df e3       	ldi	r29, 0x3F	; 63
    6e86:	e5 e7       	ldi	r30, 0x75	; 117
    6e88:	e9 ea       	ldi	r30, 0xA9	; 169
    6e8a:	eb ec       	ldi	r30, 0xCB	; 203
    6e8c:	ed ee       	ldi	r30, 0xED	; 237
    6e8e:	ef ef       	ldi	r30, 0xFF	; 255
    6e90:	f0 f0       	brcs	.+60     	; 0x6ece <waves+0x6ce>
    6e92:	f0 f1       	brcs	.+124    	; 0x6f10 <waves+0x710>
    6e94:	f1 f1       	breq	.+124    	; 0x6f12 <waves+0x712>
    6e96:	f1 f2       	breq	.-68     	; 0x6e54 <waves+0x654>
    6e98:	f2 f2       	brmi	.-68     	; 0x6e56 <waves+0x656>
    6e9a:	f2 f2       	brmi	.-68     	; 0x6e58 <waves+0x658>
    6e9c:	f2 f2       	brmi	.-68     	; 0x6e5a <waves+0x65a>
    6e9e:	f2 f3       	brmi	.-4      	; 0x6e9c <waves+0x69c>
    6ea0:	f3 f3       	brvs	.-4      	; 0x6e9e <waves+0x69e>
    6ea2:	f3 f3       	brvs	.-4      	; 0x6ea0 <waves+0x6a0>
    6ea4:	f3 f3       	brvs	.-4      	; 0x6ea2 <waves+0x6a2>
    6ea6:	f3 f3       	brvs	.-4      	; 0x6ea4 <waves+0x6a4>
    6ea8:	f3 f3       	brvs	.-4      	; 0x6ea6 <waves+0x6a6>
    6eaa:	f3 f3       	brvs	.-4      	; 0x6ea8 <waves+0x6a8>
    6eac:	f3 f3       	brvs	.-4      	; 0x6eaa <waves+0x6aa>
    6eae:	f3 f3       	brvs	.-4      	; 0x6eac <waves+0x6ac>
    6eb0:	f3 f3       	brvs	.-4      	; 0x6eae <waves+0x6ae>
    6eb2:	f3 f3       	brvs	.-4      	; 0x6eb0 <waves+0x6b0>
    6eb4:	f3 f3       	brvs	.-4      	; 0x6eb2 <waves+0x6b2>
    6eb6:	f3 f3       	brvs	.-4      	; 0x6eb4 <waves+0x6b4>
    6eb8:	f3 f3       	brvs	.-4      	; 0x6eb6 <waves+0x6b6>
    6eba:	f3 f3       	brvs	.-4      	; 0x6eb8 <waves+0x6b8>
    6ebc:	f3 f3       	brvs	.-4      	; 0x6eba <waves+0x6ba>
    6ebe:	f3 f3       	brvs	.-4      	; 0x6ebc <waves+0x6bc>
    6ec0:	f3 f3       	brvs	.-4      	; 0x6ebe <waves+0x6be>
    6ec2:	f3 f3       	brvs	.-4      	; 0x6ec0 <waves+0x6c0>
    6ec4:	f3 f3       	brvs	.-4      	; 0x6ec2 <waves+0x6c2>
    6ec6:	f3 f3       	brvs	.-4      	; 0x6ec4 <waves+0x6c4>
    6ec8:	f3 f3       	brvs	.-4      	; 0x6ec6 <waves+0x6c6>
    6eca:	f3 f3       	brvs	.-4      	; 0x6ec8 <waves+0x6c8>
    6ecc:	f3 f3       	brvs	.-4      	; 0x6eca <waves+0x6ca>
    6ece:	f3 f3       	brvs	.-4      	; 0x6ecc <waves+0x6cc>
    6ed0:	f3 f3       	brvs	.-4      	; 0x6ece <waves+0x6ce>
    6ed2:	f3 f3       	brvs	.-4      	; 0x6ed0 <waves+0x6d0>
    6ed4:	f3 f3       	brvs	.-4      	; 0x6ed2 <waves+0x6d2>
    6ed6:	f3 f3       	brvs	.-4      	; 0x6ed4 <waves+0x6d4>
    6ed8:	f3 f3       	brvs	.-4      	; 0x6ed6 <waves+0x6d6>
    6eda:	f3 f3       	brvs	.-4      	; 0x6ed8 <waves+0x6d8>
    6edc:	f3 f3       	brvs	.-4      	; 0x6eda <waves+0x6da>
    6ede:	f3 f3       	brvs	.-4      	; 0x6edc <waves+0x6dc>
    6ee0:	f2 f2       	brmi	.-68     	; 0x6e9e <waves+0x69e>
    6ee2:	f2 f2       	brmi	.-68     	; 0x6ea0 <waves+0x6a0>
    6ee4:	f2 f2       	brmi	.-68     	; 0x6ea2 <waves+0x6a2>
    6ee6:	f2 f2       	brmi	.-68     	; 0x6ea4 <waves+0x6a4>
    6ee8:	f1 f1       	breq	.+124    	; 0x6f66 <waves+0x766>
    6eea:	f1 f1       	breq	.+124    	; 0x6f68 <waves+0x768>
    6eec:	f0 f0       	brcs	.+60     	; 0x6f2a <waves+0x72a>
    6eee:	f0 ef       	ldi	r31, 0xF0	; 240
    6ef0:	ef ee       	ldi	r30, 0xEF	; 239
    6ef2:	ed ec       	ldi	r30, 0xCD	; 205
    6ef4:	eb ea       	ldi	r30, 0xAB	; 171
    6ef6:	e9 e7       	ldi	r30, 0x79	; 121
    6ef8:	e5 e3       	ldi	r30, 0x35	; 53
    6efa:	df db       	rcall	.-2114   	; 0x66ba <steptable+0xb2>
    6efc:	d5 cc       	rjmp	.-1622   	; 0x68a8 <waves+0xa8>
    6efe:	c6 00       	.word	0x00c6	; ????
    6f00:	00 28       	or	r0, r0
    6f02:	3d 42       	sbci	r19, 0x2D	; 45
    6f04:	30 2d       	mov	r19, r0
    6f06:	2c 2b       	or	r18, r28
    6f08:	2c 2d       	mov	r18, r12
    6f0a:	2e 2f       	mov	r18, r30
    6f0c:	30 32       	cpi	r19, 0x20	; 32
    6f0e:	33 35       	cpi	r19, 0x53	; 83
    6f10:	37 39       	cpi	r19, 0x97	; 151
    6f12:	3b 3d       	cpi	r19, 0xDB	; 219
    6f14:	3f 41       	sbci	r19, 0x1F	; 31
    6f16:	43 45       	sbci	r20, 0x53	; 83
    6f18:	48 4a       	sbci	r20, 0xA8	; 168
    6f1a:	4c 4e       	sbci	r20, 0xEC	; 236
    6f1c:	50 53       	subi	r21, 0x30	; 48
    6f1e:	55 57       	subi	r21, 0x75	; 117
    6f20:	59 5b       	subi	r21, 0xB9	; 185
    6f22:	5d 5f       	subi	r21, 0xFD	; 253
    6f24:	61 63       	ori	r22, 0x31	; 49
    6f26:	65 67       	ori	r22, 0x75	; 117
    6f28:	69 6b       	ori	r22, 0xB9	; 185
    6f2a:	6c 6e       	ori	r22, 0xEC	; 236
    6f2c:	70 71       	andi	r23, 0x10	; 16
    6f2e:	73 74       	andi	r23, 0x43	; 67
    6f30:	75 77       	andi	r23, 0x75	; 117
    6f32:	78 79       	andi	r23, 0x98	; 152
    6f34:	7a 7b       	andi	r23, 0xBA	; 186
    6f36:	7c 7d       	andi	r23, 0xDC	; 220
    6f38:	7d 7e       	andi	r23, 0xED	; 237
    6f3a:	7e 7f       	andi	r23, 0xFE	; 254
    6f3c:	7f 7f       	andi	r23, 0xFF	; 255
    6f3e:	7f 7f       	andi	r23, 0xFF	; 255
    6f40:	7f 7f       	andi	r23, 0xFF	; 255
    6f42:	7f 7f       	andi	r23, 0xFF	; 255
    6f44:	7f 7f       	andi	r23, 0xFF	; 255
    6f46:	7e 7e       	andi	r23, 0xEE	; 238
    6f48:	7d 7d       	andi	r23, 0xDD	; 221
    6f4a:	7c 7b       	andi	r23, 0xBC	; 188
    6f4c:	7a 79       	andi	r23, 0x9A	; 154
    6f4e:	78 77       	andi	r23, 0x78	; 120
    6f50:	75 74       	andi	r23, 0x45	; 69
    6f52:	73 71       	andi	r23, 0x13	; 19
    6f54:	70 6e       	ori	r23, 0xE0	; 224
    6f56:	6c 6b       	ori	r22, 0xBC	; 188
    6f58:	69 67       	ori	r22, 0x79	; 121
    6f5a:	65 63       	ori	r22, 0x35	; 53
    6f5c:	61 5f       	subi	r22, 0xF1	; 241
    6f5e:	5d 5b       	subi	r21, 0xBD	; 189
    6f60:	59 57       	subi	r21, 0x79	; 121
    6f62:	55 53       	subi	r21, 0x35	; 53
    6f64:	50 4e       	sbci	r21, 0xE0	; 224
    6f66:	4c 4a       	sbci	r20, 0xAC	; 172
    6f68:	48 45       	sbci	r20, 0x58	; 88
    6f6a:	43 41       	sbci	r20, 0x13	; 19
    6f6c:	3f 3d       	cpi	r19, 0xDF	; 223
    6f6e:	3b 39       	cpi	r19, 0x9B	; 155
    6f70:	37 35       	cpi	r19, 0x57	; 87
    6f72:	33 32       	cpi	r19, 0x23	; 35
    6f74:	30 2f       	mov	r19, r16
    6f76:	2e 2d       	mov	r18, r14
    6f78:	2c 2b       	or	r18, r28
    6f7a:	2c 2d       	mov	r18, r12
    6f7c:	30 42       	sbci	r19, 0x20	; 32
    6f7e:	3d 28       	or	r3, r13
    6f80:	00 e9       	ldi	r16, 0x90	; 144
    6f82:	e5 fe       	sbrs	r14, 5
    6f84:	d4 d7       	rcall	.+4008   	; 0x7f2e <__data_load_end+0x71c>
    6f86:	d7 d7       	rcall	.+4014   	; 0x7f36 <__data_load_end+0x724>
    6f88:	d6 d4       	rcall	.+2476   	; 0x7936 <__data_load_end+0x124>
    6f8a:	d2 d0       	rcall	.+420    	; 0x7130 <waves+0x930>
    6f8c:	ce cc       	rjmp	.-1636   	; 0x692a <waves+0x12a>
    6f8e:	ca c8       	rjmp	.-3692   	; 0x6124 <ProcessMusic+0x60>
    6f90:	c6 c3       	rjmp	.+1932   	; 0x771e <load_splash>
    6f92:	c1 bf       	out	0x31, r28	; 49
    6f94:	bd ba       	out	0x1d, r11	; 29
    6f96:	b8 b6       	in	r11, 0x38	; 56
    6f98:	b4 b1       	in	r27, 0x04	; 4
    6f9a:	af ad       	ldd	r26, Y+63	; 0x3f
    6f9c:	ab a9       	ldd	r26, Y+51	; 0x33
    6f9e:	a7 a5       	ldd	r26, Z+47	; 0x2f
    6fa0:	a3 a1       	ldd	r26, Z+35	; 0x23
    6fa2:	9f 9e       	mul	r9, r31
    6fa4:	9c 9a       	sbi	0x13, 4	; 19
    6fa6:	99 97       	sbiw	r26, 0x29	; 41
    6fa8:	95 94       	asr	r9
    6faa:	93 91       	.word	0x9193	; ????
    6fac:	90 8f       	std	Z+24, r25	; 0x18
    6fae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    6fb0:	8b 8a       	std	Y+19, r8	; 0x13
    6fb2:	89 88       	ldd	r8, Y+17	; 0x11
    6fb4:	88 87       	std	Y+8, r24	; 0x08
    6fb6:	86 85       	ldd	r24, Z+14	; 0x0e
    6fb8:	85 84       	ldd	r8, Z+13	; 0x0d
    6fba:	84 84       	ldd	r8, Z+12	; 0x0c
    6fbc:	83 83       	std	Z+3, r24	; 0x03
    6fbe:	83 83       	std	Z+3, r24	; 0x03
    6fc0:	83 83       	std	Z+3, r24	; 0x03
    6fc2:	83 83       	std	Z+3, r24	; 0x03
    6fc4:	83 84       	ldd	r8, Z+11	; 0x0b
    6fc6:	84 84       	ldd	r8, Z+12	; 0x0c
    6fc8:	85 85       	ldd	r24, Z+13	; 0x0d
    6fca:	86 87       	std	Z+14, r24	; 0x0e
    6fcc:	88 88       	ldd	r8, Y+16	; 0x10
    6fce:	89 8a       	std	Y+17, r8	; 0x11
    6fd0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    6fd2:	8d 8f       	std	Y+29, r24	; 0x1d
    6fd4:	90 91 93 94 	lds	r25, 0x9493
    6fd8:	95 97       	sbiw	r26, 0x25	; 37
    6fda:	99 9a       	sbi	0x13, 1	; 19
    6fdc:	9c 9e       	mul	r9, r28
    6fde:	9f a1       	ldd	r25, Y+39	; 0x27
    6fe0:	a3 a5       	ldd	r26, Z+43	; 0x2b
    6fe2:	a7 a9       	ldd	r26, Z+55	; 0x37
    6fe4:	ab ad       	ldd	r26, Y+59	; 0x3b
    6fe6:	af b1       	in	r26, 0x0f	; 15
    6fe8:	b4 b6       	in	r11, 0x34	; 52
    6fea:	b8 ba       	out	0x18, r11	; 24
    6fec:	bd bf       	out	0x3d, r27	; 61
    6fee:	c1 c3       	rjmp	.+1922   	; 0x7772 <load_splash+0x54>
    6ff0:	c6 c8       	rjmp	.-3700   	; 0x617e <ProcessMusic+0xba>
    6ff2:	ca cc       	rjmp	.-1644   	; 0x6988 <waves+0x188>
    6ff4:	ce d0       	rcall	.+412    	; 0x7192 <waves+0x992>
    6ff6:	d2 d4       	rcall	.+2468   	; 0x799c <__data_load_end+0x18a>
    6ff8:	d6 d7       	rcall	.+4012   	; 0x7fa6 <__data_load_end+0x794>
    6ffa:	d7 d7       	rcall	.+4014   	; 0x7faa <__data_load_end+0x798>
    6ffc:	d4 fe       	sbrs	r13, 4
    6ffe:	e5 e9       	ldi	r30, 0x95	; 149
    7000:	f9 f8       	.word	0xf8f9	; ????
    7002:	f9 f5       	brne	.+126    	; 0x7082 <waves+0x882>
    7004:	eb e1       	ldi	r30, 0x1B	; 27
    7006:	dd de       	rcall	.-582    	; 0x6dc2 <waves+0x5c2>
    7008:	e0 e2       	ldi	r30, 0x20	; 32
    700a:	e4 e5       	ldi	r30, 0x54	; 84
    700c:	e6 e5       	ldi	r30, 0x56	; 86
    700e:	e4 e2       	ldi	r30, 0x24	; 36
    7010:	de d9       	rcall	.-3140   	; 0x63ce <ProcessMusic+0x30a>
    7012:	d2 ca       	rjmp	.-2652   	; 0x65b8 <esmw+0x4c>
    7014:	c1 b7       	in	r28, 0x31	; 49
    7016:	ac a2       	std	Y+36, r10	; 0x24
    7018:	99 91       	ld	r25, Y+
    701a:	8a 86       	std	Y+10, r8	; 0x0a
    701c:	83 81       	ldd	r24, Z+3	; 0x03
    701e:	80 80       	ld	r8, Z
    7020:	81 82       	std	Z+1, r8	; 0x01
    7022:	83 85       	ldd	r24, Z+11	; 0x0b
    7024:	86 88       	ldd	r8, Z+22	; 0x16
    7026:	8a 8c       	ldd	r8, Y+26	; 0x1a
    7028:	8d 8f       	std	Y+29, r24	; 0x1d
    702a:	90 92 93 95 	sts	0x9593, r9
    702e:	96 97       	sbiw	r26, 0x26	; 38
    7030:	98 99       	sbic	0x13, 0	; 19
    7032:	9a 9b       	sbis	0x13, 2	; 19
    7034:	9b 9c       	mul	r9, r11
    7036:	9d 9d       	mul	r25, r13
    7038:	9d 9e       	mul	r9, r29
    703a:	9e 9e       	mul	r9, r30
    703c:	9f 9f       	mul	r25, r31
    703e:	9f 9f       	mul	r25, r31
    7040:	9f 9f       	mul	r25, r31
    7042:	9f 9e       	mul	r9, r31
    7044:	9e 9e       	mul	r9, r30
    7046:	9d 9d       	mul	r25, r13
    7048:	9d 9c       	mul	r9, r13
    704a:	9b 9b       	sbis	0x13, 3	; 19
    704c:	9a 99       	sbic	0x13, 2	; 19
    704e:	98 97       	sbiw	r26, 0x28	; 40
    7050:	96 95       	lsr	r25
    7052:	93 92       	.word	0x9293	; ????
    7054:	90 8f       	std	Z+24, r25	; 0x18
    7056:	8d 8c       	ldd	r8, Y+29	; 0x1d
    7058:	8a 88       	ldd	r8, Y+18	; 0x12
    705a:	86 85       	ldd	r24, Z+14	; 0x0e
    705c:	83 82       	std	Z+3, r8	; 0x03
    705e:	81 80       	ldd	r8, Z+1	; 0x01
    7060:	80 81       	ld	r24, Z
    7062:	83 86       	std	Z+11, r8	; 0x0b
    7064:	8a 91       	ld	r24, -Y
    7066:	99 a2       	std	Y+33, r9	; 0x21
    7068:	ac b7       	in	r26, 0x3c	; 60
    706a:	c1 ca       	rjmp	.-2686   	; 0x65ee <esmw+0x82>
    706c:	d2 d9       	rcall	.-3164   	; 0x6412 <ProcessMusic+0x34e>
    706e:	de e2       	ldi	r29, 0x2E	; 46
    7070:	e4 e5       	ldi	r30, 0x54	; 84
    7072:	e6 e5       	ldi	r30, 0x56	; 86
    7074:	e4 e2       	ldi	r30, 0x24	; 36
    7076:	e0 de       	rcall	.-576    	; 0x6e38 <waves+0x638>
    7078:	dd e1       	ldi	r29, 0x1D	; 29
    707a:	eb f5       	brvc	.+122    	; 0x70f6 <waves+0x8f6>
    707c:	f9 f8       	.word	0xf8f9	; ????
    707e:	f9 00       	.word	0x00f9	; ????
    7080:	07 08       	sbc	r0, r7
    7082:	07 0b       	sbc	r16, r23
    7084:	15 1f       	adc	r17, r21
    7086:	23 22       	and	r2, r19
    7088:	20 1e       	adc	r2, r16
    708a:	1c 1b       	sub	r17, r28
    708c:	1a 1b       	sub	r17, r26
    708e:	1c 1e       	adc	r1, r28
    7090:	22 27       	eor	r18, r18
    7092:	2e 36       	cpi	r18, 0x6E	; 110
    7094:	3f 49       	sbci	r19, 0x9F	; 159
    7096:	54 5e       	subi	r21, 0xE4	; 228
    7098:	67 6f       	ori	r22, 0xF7	; 247
    709a:	76 7a       	andi	r23, 0xA6	; 166
    709c:	7e 7f       	andi	r23, 0xFE	; 254
    709e:	7f 7f       	andi	r23, 0xFF	; 255
    70a0:	7f 7e       	andi	r23, 0xEF	; 239
    70a2:	7d 7b       	andi	r23, 0xBD	; 189
    70a4:	7a 78       	andi	r23, 0x8A	; 138
    70a6:	76 74       	andi	r23, 0x46	; 70
    70a8:	73 71       	andi	r23, 0x13	; 19
    70aa:	70 6e       	ori	r23, 0xE0	; 224
    70ac:	6d 6b       	ori	r22, 0xBD	; 189
    70ae:	6a 69       	ori	r22, 0x9A	; 154
    70b0:	68 67       	ori	r22, 0x78	; 120
    70b2:	66 65       	ori	r22, 0x56	; 86
    70b4:	65 64       	ori	r22, 0x45	; 69
    70b6:	64 63       	ori	r22, 0x34	; 52
    70b8:	63 62       	ori	r22, 0x23	; 35
    70ba:	62 62       	ori	r22, 0x22	; 34
    70bc:	61 61       	ori	r22, 0x11	; 17
    70be:	61 61       	ori	r22, 0x11	; 17
    70c0:	61 61       	ori	r22, 0x11	; 17
    70c2:	61 62       	ori	r22, 0x21	; 33
    70c4:	62 62       	ori	r22, 0x22	; 34
    70c6:	63 63       	ori	r22, 0x33	; 51
    70c8:	63 64       	ori	r22, 0x43	; 67
    70ca:	65 65       	ori	r22, 0x55	; 85
    70cc:	66 67       	ori	r22, 0x76	; 118
    70ce:	68 69       	ori	r22, 0x98	; 152
    70d0:	6a 6b       	ori	r22, 0xBA	; 186
    70d2:	6d 6e       	ori	r22, 0xED	; 237
    70d4:	70 71       	andi	r23, 0x10	; 16
    70d6:	73 74       	andi	r23, 0x43	; 67
    70d8:	76 78       	andi	r23, 0x86	; 134
    70da:	7a 7b       	andi	r23, 0xBA	; 186
    70dc:	7d 7e       	andi	r23, 0xED	; 237
    70de:	7f 7f       	andi	r23, 0xFF	; 255
    70e0:	7f 7f       	andi	r23, 0xFF	; 255
    70e2:	7e 7a       	andi	r23, 0xAE	; 174
    70e4:	76 6f       	ori	r23, 0xF6	; 246
    70e6:	67 5e       	subi	r22, 0xE7	; 231
    70e8:	54 49       	sbci	r21, 0x94	; 148
    70ea:	3f 36       	cpi	r19, 0x6F	; 111
    70ec:	2e 27       	eor	r18, r30
    70ee:	22 1e       	adc	r2, r18
    70f0:	1c 1b       	sub	r17, r28
    70f2:	1a 1b       	sub	r17, r26
    70f4:	1c 1e       	adc	r1, r28
    70f6:	20 22       	and	r2, r16
    70f8:	23 1f       	adc	r18, r19
    70fa:	15 0b       	sbc	r17, r21
    70fc:	07 08       	sbc	r0, r7
    70fe:	07 00       	.word	0x0007	; ????
    7100:	1f 31       	cpi	r17, 0x1F	; 31
    7102:	3d 44       	sbci	r19, 0x4D	; 77
    7104:	4e 53       	subi	r20, 0x3E	; 62
    7106:	54 56       	subi	r21, 0x64	; 100
    7108:	5a 5f       	subi	r21, 0xFA	; 250
    710a:	64 69       	ori	r22, 0x94	; 148
    710c:	6e 74       	andi	r22, 0x4E	; 78
    710e:	76 79       	andi	r23, 0x96	; 150
    7110:	7c 7f       	andi	r23, 0xFC	; 252
    7112:	7f 7f       	andi	r23, 0xFF	; 255
    7114:	7f 7f       	andi	r23, 0xFF	; 255
    7116:	7f 7f       	andi	r23, 0xFF	; 255
    7118:	7f 7f       	andi	r23, 0xFF	; 255
    711a:	7f 7f       	andi	r23, 0xFF	; 255
    711c:	7f 7f       	andi	r23, 0xFF	; 255
    711e:	7f 7f       	andi	r23, 0xFF	; 255
    7120:	7f 7f       	andi	r23, 0xFF	; 255
    7122:	7f 7f       	andi	r23, 0xFF	; 255
    7124:	7f 7f       	andi	r23, 0xFF	; 255
    7126:	7f 7f       	andi	r23, 0xFF	; 255
    7128:	7f 7f       	andi	r23, 0xFF	; 255
    712a:	7f 7f       	andi	r23, 0xFF	; 255
    712c:	7f 7f       	andi	r23, 0xFF	; 255
    712e:	7f 7f       	andi	r23, 0xFF	; 255
    7130:	7f 7f       	andi	r23, 0xFF	; 255
    7132:	7f 7f       	andi	r23, 0xFF	; 255
    7134:	7f 7f       	andi	r23, 0xFF	; 255
    7136:	7f 7f       	andi	r23, 0xFF	; 255
    7138:	7f 7f       	andi	r23, 0xFF	; 255
    713a:	7f 7f       	andi	r23, 0xFF	; 255
    713c:	7f 7f       	andi	r23, 0xFF	; 255
    713e:	7f 7f       	andi	r23, 0xFF	; 255
    7140:	7f 7f       	andi	r23, 0xFF	; 255
    7142:	7f 7f       	andi	r23, 0xFF	; 255
    7144:	7f 7f       	andi	r23, 0xFF	; 255
    7146:	7f 7f       	andi	r23, 0xFF	; 255
    7148:	7f 7f       	andi	r23, 0xFF	; 255
    714a:	7f 7f       	andi	r23, 0xFF	; 255
    714c:	7f 7f       	andi	r23, 0xFF	; 255
    714e:	7f 7f       	andi	r23, 0xFF	; 255
    7150:	7f 7f       	andi	r23, 0xFF	; 255
    7152:	7f 7f       	andi	r23, 0xFF	; 255
    7154:	7f 7f       	andi	r23, 0xFF	; 255
    7156:	7f 7f       	andi	r23, 0xFF	; 255
    7158:	7f 7f       	andi	r23, 0xFF	; 255
    715a:	7f 7f       	andi	r23, 0xFF	; 255
    715c:	7f 7f       	andi	r23, 0xFF	; 255
    715e:	7f 7f       	andi	r23, 0xFF	; 255
    7160:	7f 7f       	andi	r23, 0xFF	; 255
    7162:	7f 7f       	andi	r23, 0xFF	; 255
    7164:	7f 7f       	andi	r23, 0xFF	; 255
    7166:	7f 7f       	andi	r23, 0xFF	; 255
    7168:	7f 7f       	andi	r23, 0xFF	; 255
    716a:	7f 7f       	andi	r23, 0xFF	; 255
    716c:	7f 7f       	andi	r23, 0xFF	; 255
    716e:	7f 7f       	andi	r23, 0xFF	; 255
    7170:	7f 7f       	andi	r23, 0xFF	; 255
    7172:	7f 7f       	andi	r23, 0xFF	; 255
    7174:	7f 7f       	andi	r23, 0xFF	; 255
    7176:	7f 7f       	andi	r23, 0xFF	; 255
    7178:	7f 7f       	andi	r23, 0xFF	; 255
    717a:	7f 7c       	andi	r23, 0xCF	; 207
    717c:	78 71       	andi	r23, 0x18	; 24
    717e:	68 4c       	sbci	r22, 0xC8	; 200
    7180:	2c 1c       	adc	r2, r12
    7182:	12 0c       	add	r1, r2
    7184:	0a 0b       	sbc	r16, r26
    7186:	0a 05       	cpc	r16, r10
    7188:	fd f3       	brhs	.-2      	; 0x7188 <waves+0x988>
    718a:	e9 df       	rcall	.-46     	; 0x715e <waves+0x95e>
    718c:	d4 ca       	rjmp	.-2648   	; 0x6736 <steptable+0x12e>
    718e:	c0 b7       	in	r28, 0x30	; 48
    7190:	ae a6       	std	Y+46, r10	; 0x2e
    7192:	9e 97       	sbiw	r26, 0x2e	; 46
    7194:	91 8b       	std	Z+17, r25	; 0x11
    7196:	86 85       	ldd	r24, Z+14	; 0x0e
    7198:	82 80       	ldd	r8, Z+2	; 0x02
    719a:	80 80       	ld	r8, Z
    719c:	80 80       	ld	r8, Z
    719e:	80 80       	ld	r8, Z
    71a0:	80 80       	ld	r8, Z
    71a2:	80 80       	ld	r8, Z
    71a4:	80 80       	ld	r8, Z
    71a6:	80 80       	ld	r8, Z
    71a8:	80 80       	ld	r8, Z
    71aa:	80 80       	ld	r8, Z
    71ac:	80 80       	ld	r8, Z
    71ae:	80 80       	ld	r8, Z
    71b0:	80 80       	ld	r8, Z
    71b2:	80 80       	ld	r8, Z
    71b4:	80 80       	ld	r8, Z
    71b6:	80 80       	ld	r8, Z
    71b8:	80 80       	ld	r8, Z
    71ba:	80 80       	ld	r8, Z
    71bc:	80 80       	ld	r8, Z
    71be:	80 80       	ld	r8, Z
    71c0:	80 80       	ld	r8, Z
    71c2:	80 80       	ld	r8, Z
    71c4:	80 80       	ld	r8, Z
    71c6:	80 80       	ld	r8, Z
    71c8:	80 80       	ld	r8, Z
    71ca:	80 80       	ld	r8, Z
    71cc:	80 80       	ld	r8, Z
    71ce:	80 80       	ld	r8, Z
    71d0:	80 80       	ld	r8, Z
    71d2:	80 80       	ld	r8, Z
    71d4:	80 80       	ld	r8, Z
    71d6:	80 80       	ld	r8, Z
    71d8:	80 80       	ld	r8, Z
    71da:	80 80       	ld	r8, Z
    71dc:	80 80       	ld	r8, Z
    71de:	80 80       	ld	r8, Z
    71e0:	80 80       	ld	r8, Z
    71e2:	80 80       	ld	r8, Z
    71e4:	80 80       	ld	r8, Z
    71e6:	80 80       	ld	r8, Z
    71e8:	80 80       	ld	r8, Z
    71ea:	80 80       	ld	r8, Z
    71ec:	80 80       	ld	r8, Z
    71ee:	80 80       	ld	r8, Z
    71f0:	80 80       	ld	r8, Z
    71f2:	80 80       	ld	r8, Z
    71f4:	80 87       	std	Z+8, r24	; 0x08
    71f6:	91 9d       	mul	r25, r1
    71f8:	ac c4       	rjmp	.+2392   	; 0x7b52 <__data_load_end+0x340>
    71fa:	cb d4       	rcall	.+2454   	; 0x7b92 <__data_load_end+0x380>
    71fc:	dd f2       	brhs	.-74     	; 0x71b4 <waves+0x9b4>
    71fe:	fa fa       	.word	0xfafa	; ????

00007200 <RestoreBackground>:
	unsigned char free_tile_index, userRamTilesCount=0,userRamTilesCount_tmp=0;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=userRamTilesCount;i<free_tile_index;i++){
    7200:	80 91 db 08 	lds	r24, 0x08DB
    7204:	90 91 62 09 	lds	r25, 0x0962
    7208:	89 17       	cp	r24, r25
    720a:	78 f4       	brcc	.+30     	; 0x722a <RestoreBackground+0x2a>
			//vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
			*ram_tiles_restore[i].addr=ram_tiles_restore[i].tileIndex;
    720c:	e8 2f       	mov	r30, r24
    720e:	f0 e0       	ldi	r31, 0x00	; 0
    7210:	9f 01       	movw	r18, r30
    7212:	22 0f       	add	r18, r18
    7214:	33 1f       	adc	r19, r19
    7216:	e2 0f       	add	r30, r18
    7218:	f3 1f       	adc	r31, r19
    721a:	e6 5c       	subi	r30, 0xC6	; 198
    721c:	f7 4f       	sbci	r31, 0xF7	; 247
    721e:	a0 81       	ld	r26, Z
    7220:	b1 81       	ldd	r27, Z+1	; 0x01
    7222:	92 81       	ldd	r25, Z+2	; 0x02
    7224:	9c 93       	st	X, r25
	unsigned char free_tile_index, userRamTilesCount=0,userRamTilesCount_tmp=0;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=userRamTilesCount;i<free_tile_index;i++){
    7226:	8f 5f       	subi	r24, 0xFF	; 255
    7228:	ed cf       	rjmp	.-38     	; 0x7204 <RestoreBackground+0x4>
			//vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
			*ram_tiles_restore[i].addr=ram_tiles_restore[i].tileIndex;
		}	
	}
    722a:	08 95       	ret

0000722c <ProcessSprites>:
		}

	}
	*/

	void ProcessSprites(){
    722c:	2f 92       	push	r2
    722e:	3f 92       	push	r3
    7230:	4f 92       	push	r4
    7232:	5f 92       	push	r5
    7234:	6f 92       	push	r6
    7236:	7f 92       	push	r7
    7238:	8f 92       	push	r8
    723a:	9f 92       	push	r9
    723c:	af 92       	push	r10
    723e:	bf 92       	push	r11
    7240:	cf 92       	push	r12
    7242:	df 92       	push	r13
    7244:	ef 92       	push	r14
    7246:	ff 92       	push	r15
    7248:	0f 93       	push	r16
    724a:	1f 93       	push	r17
    724c:	cf 93       	push	r28
    724e:	df 93       	push	r29
    7250:	00 d0       	rcall	.+0      	; 0x7252 <ProcessSprites+0x26>
    7252:	00 d0       	rcall	.+0      	; 0x7254 <ProcessSprites+0x28>
    7254:	cd b7       	in	r28, 0x3d	; 61
    7256:	de b7       	in	r29, 0x3e	; 62
	
		unsigned char i,bx,by,dx,dy,bt,x,y,tx=1,ty=1,wx,wy;
		unsigned int ramPtr,ssx,ssy;

		if(!spritesOn) return;
    7258:	80 91 00 01 	lds	r24, 0x0100
    725c:	88 23       	and	r24, r24
    725e:	09 f4       	brne	.+2      	; 0x7262 <ProcessSprites+0x36>
    7260:	e0 c0       	rjmp	.+448    	; 0x7422 <ProcessSprites+0x1f6>

		userRamTilesCount=userRamTilesCount_tmp;
    7262:	80 91 da 08 	lds	r24, 0x08DA
    7266:	80 93 db 08 	sts	0x08DB, r24
		free_tile_index=userRamTilesCount;
    726a:	80 93 62 09 	sts	0x0962, r24
    726e:	e2 e0       	ldi	r30, 0x02	; 2
    7270:	ce 2e       	mov	r12, r30
    7272:	e1 e0       	ldi	r30, 0x01	; 1
    7274:	de 2e       	mov	r13, r30
	
		for(i=0;i<MAX_SPRITES;i++){
    7276:	71 2c       	mov	r7, r1
			bx=sprites[i].x;
    7278:	f6 01       	movw	r30, r12
    727a:	20 81       	ld	r18, Z

			if(bx!=(SCREEN_TILES_H*TILE_WIDTH)){
    727c:	20 3e       	cpi	r18, 0xE0	; 224
    727e:	09 f4       	brne	.+2      	; 0x7282 <ProcessSprites+0x56>
    7280:	b1 c0       	rjmp	.+354    	; 0x73e4 <ProcessSprites+0x1b8>
				//get tile's screen section offsets
				
				#if SCROLLING == 1
					ssx=sprites[i].x+Screen.scrollX;
    7282:	80 91 9c 08 	lds	r24, 0x089C
    7286:	90 e0       	ldi	r25, 0x00	; 0
    7288:	82 0f       	add	r24, r18
    728a:	91 1d       	adc	r25, r1
					ssy=sprites[i].y+Screen.scrollY;
    728c:	41 81       	ldd	r20, Z+1	; 0x01
    728e:	20 91 9d 08 	lds	r18, 0x089D
    7292:	30 e0       	ldi	r19, 0x00	; 0
    7294:	24 0f       	add	r18, r20
    7296:	31 1d       	adc	r19, r1

				tx=1;
				ty=1;

				//get the BG tiles that are overlapped by the sprite
				bx=ssx>>3;
    7298:	ac 01       	movw	r20, r24
    729a:	73 e0       	ldi	r23, 0x03	; 3
    729c:	56 95       	lsr	r21
    729e:	47 95       	ror	r20
    72a0:	7a 95       	dec	r23
    72a2:	e1 f7       	brne	.-8      	; 0x729c <ProcessSprites+0x70>
    72a4:	64 2e       	mov	r6, r20
				dx=ssx&0x7;
    72a6:	87 70       	andi	r24, 0x07	; 7
				if(dx>0) tx++;
    72a8:	11 f0       	breq	.+4      	; 0x72ae <ProcessSprites+0x82>
    72aa:	92 e0       	ldi	r25, 0x02	; 2
    72ac:	01 c0       	rjmp	.+2      	; 0x72b0 <ProcessSprites+0x84>
   				#else
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
    72ae:	91 e0       	ldi	r25, 0x01	; 1
    72b0:	99 83       	std	Y+1, r25	; 0x01
				dx=ssx&0x7;
				if(dx>0) tx++;

				//by=ssy>>3;
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
    72b2:	a9 01       	movw	r20, r18
    72b4:	63 e0       	ldi	r22, 0x03	; 3
    72b6:	56 95       	lsr	r21
    72b8:	47 95       	ror	r20
    72ba:	6a 95       	dec	r22
    72bc:	e1 f7       	brne	.-8      	; 0x72b6 <ProcessSprites+0x8a>
    72be:	54 2e       	mov	r5, r20
				dy=ssy%TILE_HEIGHT;
    72c0:	27 70       	andi	r18, 0x07	; 7
				if(dy>0) ty++;			
    72c2:	19 f0       	breq	.+6      	; 0x72ca <ProcessSprites+0x9e>
    72c4:	52 e0       	ldi	r21, 0x02	; 2
    72c6:	35 2e       	mov	r3, r21
    72c8:	02 c0       	rjmp	.+4      	; 0x72ce <ProcessSprites+0xa2>
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
				ty=1;
    72ca:	33 24       	eor	r3, r3
    72cc:	33 94       	inc	r3
								bt=free_tile_index;
								free_tile_index++;
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    72ce:	30 e0       	ldi	r19, 0x00	; 0
    72d0:	32 2f       	mov	r19, r18
    72d2:	22 27       	eor	r18, r18
    72d4:	f9 01       	movw	r30, r18
    72d6:	e8 0f       	add	r30, r24
    72d8:	f1 1d       	adc	r31, r1
    72da:	fc 83       	std	Y+4, r31	; 0x04
    72dc:	eb 83       	std	Y+3, r30	; 0x03
    72de:	e1 2c       	mov	r14, r1
    72e0:	f1 2c       	mov	r15, r1
    72e2:	be 2c       	mov	r11, r14
    72e4:	aa 24       	eor	r10, r10
    72e6:	26 2c       	mov	r2, r6
    72e8:	45 2c       	mov	r4, r5
    72ea:	4e 0c       	add	r4, r14
								    wy-=(VRAM_TILES_V*2);
							    }else if(wy>=VRAM_TILES_V){
							    	wy-=VRAM_TILES_V;
							    }
                            #else
                                if(wy>=(Screen.scrollHeight*2)){
    72ec:	84 2c       	mov	r8, r4
    72ee:	91 2c       	mov	r9, r1
    72f0:	84 2d       	mov	r24, r4
    72f2:	20 91 9e 08 	lds	r18, 0x089E
    72f6:	42 2f       	mov	r20, r18
    72f8:	50 e0       	ldi	r21, 0x00	; 0
    72fa:	44 0f       	add	r20, r20
    72fc:	55 1f       	adc	r21, r21
    72fe:	84 16       	cp	r8, r20
    7300:	95 06       	cpc	r9, r21
    7302:	14 f0       	brlt	.+4      	; 0x7308 <ProcessSprites+0xdc>
								    wy-=(Screen.scrollHeight*2);
    7304:	22 0f       	add	r18, r18
    7306:	03 c0       	rjmp	.+6      	; 0x730e <ProcessSprites+0xe2>
							    }else if(wy>=Screen.scrollHeight){
    7308:	42 16       	cp	r4, r18
    730a:	10 f0       	brcs	.+4      	; 0x7310 <ProcessSprites+0xe4>
							    	wy-=Screen.scrollHeight;
    730c:	84 2d       	mov	r24, r4
    730e:	82 1b       	sub	r24, r18
							    }
                            #endif
							if(wx>=VRAM_TILES_H)wx-=VRAM_TILES_H; //should always be 32
    7310:	ff e1       	ldi	r31, 0x1F	; 31
    7312:	f2 15       	cp	r31, r2
    7314:	18 f4       	brcc	.+6      	; 0x731c <ProcessSprites+0xf0>
    7316:	00 ee       	ldi	r16, 0xE0	; 224
    7318:	02 0d       	add	r16, r2
    731a:	01 c0       	rjmp	.+2      	; 0x731e <ProcessSprites+0xf2>
    731c:	02 2d       	mov	r16, r2

							#if SCROLLING == 0
								ramPtr=(wy*VRAM_TILES_H)+wx;
							#else

								ramPtr=((wy>>3)*256)+(wx*8)+(wy&7);	
    731e:	28 2f       	mov	r18, r24
    7320:	26 95       	lsr	r18
    7322:	26 95       	lsr	r18
    7324:	26 95       	lsr	r18
    7326:	10 e0       	ldi	r17, 0x00	; 0
    7328:	40 e2       	ldi	r20, 0x20	; 32
    732a:	24 9f       	mul	r18, r20
    732c:	00 0d       	add	r16, r0
    732e:	11 1d       	adc	r17, r1
    7330:	11 24       	eor	r1, r1
    7332:	23 e0       	ldi	r18, 0x03	; 3
    7334:	00 0f       	add	r16, r16
    7336:	11 1f       	adc	r17, r17
    7338:	2a 95       	dec	r18
    733a:	e1 f7       	brne	.-8      	; 0x7334 <ProcessSprites+0x108>
    733c:	87 70       	andi	r24, 0x07	; 7
    733e:	08 0f       	add	r16, r24
    7340:	11 1d       	adc	r17, r1

							#endif

							bt=vram[ramPtr];						
    7342:	00 5e       	subi	r16, 0xE0	; 224
    7344:	15 4f       	sbci	r17, 0xF5	; 245
    7346:	f8 01       	movw	r30, r16
    7348:	70 81       	ld	r23, Z

							if( ((bt>=RAM_TILES_COUNT) | (bt<userRamTilesCount)) && (free_tile_index < RAM_TILES_COUNT) ){ //if no ram free ignore tile
    734a:	81 e0       	ldi	r24, 0x01	; 1
    734c:	7c 31       	cpi	r23, 0x1C	; 28
    734e:	08 f4       	brcc	.+2      	; 0x7352 <ProcessSprites+0x126>
    7350:	80 e0       	ldi	r24, 0x00	; 0
    7352:	21 e0       	ldi	r18, 0x01	; 1
    7354:	30 91 db 08 	lds	r19, 0x08DB
    7358:	73 17       	cp	r23, r19
    735a:	18 f0       	brcs	.+6      	; 0x7362 <ProcessSprites+0x136>
    735c:	20 e0       	ldi	r18, 0x00	; 0
    735e:	88 23       	and	r24, r24
    7360:	51 f1       	breq	.+84     	; 0x73b6 <ProcessSprites+0x18a>
    7362:	60 91 62 09 	lds	r22, 0x0962
    7366:	6c 31       	cpi	r22, 0x1C	; 28
    7368:	20 f5       	brcc	.+72     	; 0x73b2 <ProcessSprites+0x186>
								if( bt>=RAM_TILES_COUNT ){
    736a:	88 23       	and	r24, r24
    736c:	31 f0       	breq	.+12     	; 0x737a <ProcessSprites+0x14e>
									//tile is mapped to flash. Copy it to next free RAM tile.
									CopyFlashTile(bt-RAM_TILES_COUNT,free_tile_index);
    736e:	84 ee       	ldi	r24, 0xE4	; 228
    7370:	87 0f       	add	r24, r23
    7372:	7a 83       	std	Y+2, r23	; 0x02
    7374:	0e 94 fb 29 	call	0x53f6	; 0x53f6 <CopyFlashTile>
    7378:	06 c0       	rjmp	.+12     	; 0x7386 <ProcessSprites+0x15a>
								}else if(bt<userRamTilesCount){
    737a:	22 23       	and	r18, r18
    737c:	29 f0       	breq	.+10     	; 0x7388 <ProcessSprites+0x15c>
									//tile is a user ram tile. Copy it to next free RAM tile.
									CopyRamTile(bt,free_tile_index);
    737e:	87 2f       	mov	r24, r23
    7380:	7a 83       	std	Y+2, r23	; 0x02
    7382:	0e 94 8a 2a 	call	0x5514	; 0x5514 <CopyRamTile>
    7386:	7a 81       	ldd	r23, Y+2	; 0x02
								}
								ram_tiles_restore[free_tile_index].addr=(&vram[ramPtr]);
    7388:	80 91 62 09 	lds	r24, 0x0962
    738c:	e8 2f       	mov	r30, r24
    738e:	f0 e0       	ldi	r31, 0x00	; 0
    7390:	9f 01       	movw	r18, r30
    7392:	22 0f       	add	r18, r18
    7394:	33 1f       	adc	r19, r19
    7396:	e2 0f       	add	r30, r18
    7398:	f3 1f       	adc	r31, r19
    739a:	e6 5c       	subi	r30, 0xC6	; 198
    739c:	f7 4f       	sbci	r31, 0xF7	; 247
    739e:	11 83       	std	Z+1, r17	; 0x01
    73a0:	00 83       	st	Z, r16
								ram_tiles_restore[free_tile_index].tileIndex=bt;
    73a2:	72 83       	std	Z+2, r23	; 0x02
								vram[ramPtr]=free_tile_index;
    73a4:	f8 01       	movw	r30, r16
    73a6:	80 83       	st	Z, r24
								bt=free_tile_index;
								free_tile_index++;
    73a8:	21 e0       	ldi	r18, 0x01	; 1
    73aa:	28 0f       	add	r18, r24
    73ac:	20 93 62 09 	sts	0x0962, r18
									CopyRamTile(bt,free_tile_index);
								}
								ram_tiles_restore[free_tile_index].addr=(&vram[ramPtr]);
								ram_tiles_restore[free_tile_index].tileIndex=bt;
								vram[ramPtr]=free_tile_index;
								bt=free_tile_index;
    73b0:	78 2f       	mov	r23, r24
								free_tile_index++;
							}
				
							if(bt<RAM_TILES_COUNT){				
    73b2:	7c 31       	cpi	r23, 0x1C	; 28
    73b4:	38 f4       	brcc	.+14     	; 0x73c4 <ProcessSprites+0x198>
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    73b6:	2b 81       	ldd	r18, Y+3	; 0x03
    73b8:	3c 81       	ldd	r19, Y+4	; 0x04
    73ba:	a5 01       	movw	r20, r10
    73bc:	67 2f       	mov	r22, r23
    73be:	87 2d       	mov	r24, r7
    73c0:	0e 94 17 2b 	call	0x562e	; 0x562e <BlitSprite>
    73c4:	ff ef       	ldi	r31, 0xFF	; 255
    73c6:	af 1a       	sub	r10, r31
    73c8:	bf 0a       	sbc	r11, r31
    73ca:	23 94       	inc	r2
    73cc:	82 2d       	mov	r24, r2
    73ce:	86 19       	sub	r24, r6
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){

					for(x=0;x<tx;x++){
    73d0:	99 81       	ldd	r25, Y+1	; 0x01
    73d2:	89 17       	cp	r24, r25
    73d4:	08 f4       	brcc	.+2      	; 0x73d8 <ProcessSprites+0x1ac>
    73d6:	8c cf       	rjmp	.-232    	; 0x72f0 <ProcessSprites+0xc4>
    73d8:	ef ef       	ldi	r30, 0xFF	; 255
    73da:	ee 1a       	sub	r14, r30
    73dc:	fe 0a       	sbc	r15, r30
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){
    73de:	e3 14       	cp	r14, r3
    73e0:	08 f4       	brcc	.+2      	; 0x73e4 <ProcessSprites+0x1b8>
    73e2:	7f cf       	rjmp	.-258    	; 0x72e2 <ProcessSprites+0xb6>
		if(!spritesOn) return;

		userRamTilesCount=userRamTilesCount_tmp;
		free_tile_index=userRamTilesCount;
	
		for(i=0;i<MAX_SPRITES;i++){
    73e4:	73 94       	inc	r7
    73e6:	f4 e0       	ldi	r31, 0x04	; 4
    73e8:	cf 0e       	add	r12, r31
    73ea:	d1 1c       	adc	r13, r1
    73ec:	4e e0       	ldi	r20, 0x0E	; 14
    73ee:	74 12       	cpse	r7, r20
    73f0:	43 cf       	rjmp	.-378    	; 0x7278 <ProcessSprites+0x4c>


		//restore BG tiles
		RestoreBackground();

	}
    73f2:	0f 90       	pop	r0
    73f4:	0f 90       	pop	r0
    73f6:	0f 90       	pop	r0
    73f8:	0f 90       	pop	r0
    73fa:	df 91       	pop	r29
    73fc:	cf 91       	pop	r28
    73fe:	1f 91       	pop	r17
    7400:	0f 91       	pop	r16
    7402:	ff 90       	pop	r15
    7404:	ef 90       	pop	r14
    7406:	df 90       	pop	r13
    7408:	cf 90       	pop	r12
    740a:	bf 90       	pop	r11
    740c:	af 90       	pop	r10
    740e:	9f 90       	pop	r9
    7410:	8f 90       	pop	r8
    7412:	7f 90       	pop	r7
    7414:	6f 90       	pop	r6
    7416:	5f 90       	pop	r5
    7418:	4f 90       	pop	r4
    741a:	3f 90       	pop	r3
    741c:	2f 90       	pop	r2
			}//	if(bx<(SCREEN_TILES_H*TILE_WIDTH))		
		}


		//restore BG tiles
		RestoreBackground();
    741e:	0c 94 00 39 	jmp	0x7200	; 0x7200 <RestoreBackground>

	}
    7422:	0f 90       	pop	r0
    7424:	0f 90       	pop	r0
    7426:	0f 90       	pop	r0
    7428:	0f 90       	pop	r0
    742a:	df 91       	pop	r29
    742c:	cf 91       	pop	r28
    742e:	1f 91       	pop	r17
    7430:	0f 91       	pop	r16
    7432:	ff 90       	pop	r15
    7434:	ef 90       	pop	r14
    7436:	df 90       	pop	r13
    7438:	cf 90       	pop	r12
    743a:	bf 90       	pop	r11
    743c:	af 90       	pop	r10
    743e:	9f 90       	pop	r9
    7440:	8f 90       	pop	r8
    7442:	7f 90       	pop	r7
    7444:	6f 90       	pop	r6
    7446:	5f 90       	pop	r5
    7448:	4f 90       	pop	r4
    744a:	3f 90       	pop	r3
    744c:	2f 90       	pop	r2
    744e:	08 95       	ret

00007450 <MapSprite2>:
		}

	}


	void MapSprite2(unsigned char startSprite,const char *map,u8 spriteFlags){      
    7450:	df 92       	push	r13
    7452:	ef 92       	push	r14
    7454:	ff 92       	push	r15
    7456:	0f 93       	push	r16
    7458:	1f 93       	push	r17
    745a:	cf 93       	push	r28
    745c:	df 93       	push	r29
    745e:	db 01       	movw	r26, r22
    
		unsigned char mapWidth=pgm_read_byte(&(map[0]));
    7460:	fb 01       	movw	r30, r22
    7462:	14 91       	lpm	r17, Z
		unsigned char mapHeight=pgm_read_byte(&(map[1]));
    7464:	31 96       	adiw	r30, 0x01	; 1
    7466:	64 91       	lpm	r22, Z
    7468:	5f ef       	ldi	r21, 0xFF	; 255
    746a:	51 0f       	add	r21, r17
		s8 x,y,dx,dy,t; 

		if(spriteFlags & SPRITE_FLIP_X){
    746c:	24 2f       	mov	r18, r20
    746e:	21 70       	andi	r18, 0x01	; 1
    7470:	40 ff       	sbrs	r20, 0
    7472:	04 c0       	rjmp	.+8      	; 0x747c <MapSprite2+0x2c>
			x=(mapWidth-1);
    7474:	95 2f       	mov	r25, r21
			dx=-1;
    7476:	ff 24       	eor	r15, r15
    7478:	fa 94       	dec	r15
    747a:	03 c0       	rjmp	.+6      	; 0x7482 <MapSprite2+0x32>
		}else{
			x=0;
			dx=1;
    747c:	ff 24       	eor	r15, r15
    747e:	f3 94       	inc	r15

		if(spriteFlags & SPRITE_FLIP_X){
			x=(mapWidth-1);
			dx=-1;
		}else{
			x=0;
    7480:	90 e0       	ldi	r25, 0x00	; 0
			dx=1;
		}

		if(spriteFlags & SPRITE_FLIP_Y){
    7482:	41 ff       	sbrs	r20, 1
    7484:	05 c0       	rjmp	.+10     	; 0x7490 <MapSprite2+0x40>
			y=(mapHeight-1);
    7486:	7f ef       	ldi	r23, 0xFF	; 255
    7488:	76 0f       	add	r23, r22
			dy=-1;
    748a:	ee 24       	eor	r14, r14
    748c:	ea 94       	dec	r14
    748e:	03 c0       	rjmp	.+6      	; 0x7496 <MapSprite2+0x46>
		}else{
			y=0;
			dy=1;
    7490:	ee 24       	eor	r14, r14
    7492:	e3 94       	inc	r14

		if(spriteFlags & SPRITE_FLIP_Y){
			y=(mapHeight-1);
			dy=-1;
		}else{
			y=0;
    7494:	70 e0       	ldi	r23, 0x00	; 0
    7496:	21 11       	cpse	r18, r1
    7498:	01 c0       	rjmp	.+2      	; 0x749c <MapSprite2+0x4c>
    749a:	50 e0       	ldi	r21, 0x00	; 0
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
    749c:	00 e0       	ldi	r16, 0x00	; 0
    749e:	06 17       	cp	r16, r22
    74a0:	09 f1       	breq	.+66     	; 0x74e4 <MapSprite2+0x94>
			for(u8 cx=0;cx<mapWidth;cx++){
				t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    74a2:	71 03       	mulsu	r23, r17
    74a4:	e0 01       	movw	r28, r0
    74a6:	11 24       	eor	r1, r1
    74a8:	d8 2e       	mov	r13, r24
    74aa:	d1 0e       	add	r13, r17
			y=0;
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
			for(u8 cx=0;cx<mapWidth;cx++){
    74ac:	8d 15       	cp	r24, r13
    74ae:	b1 f0       	breq	.+44     	; 0x74dc <MapSprite2+0x8c>
				t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    74b0:	9e 01       	movw	r18, r28
    74b2:	29 0f       	add	r18, r25
    74b4:	31 1d       	adc	r19, r1
    74b6:	97 fd       	sbrc	r25, 7
    74b8:	3a 95       	dec	r19
    74ba:	2e 5f       	subi	r18, 0xFE	; 254
    74bc:	3f 4f       	sbci	r19, 0xFF	; 255
    74be:	fd 01       	movw	r30, r26
    74c0:	e2 0f       	add	r30, r18
    74c2:	f3 1f       	adc	r31, r19
    74c4:	24 91       	lpm	r18, Z
				sprites[startSprite].tileIndex=t;
    74c6:	34 e0       	ldi	r19, 0x04	; 4
    74c8:	83 9f       	mul	r24, r19
    74ca:	f0 01       	movw	r30, r0
    74cc:	11 24       	eor	r1, r1
    74ce:	ee 5f       	subi	r30, 0xFE	; 254
    74d0:	fe 4f       	sbci	r31, 0xFE	; 254
    74d2:	22 83       	std	Z+2, r18	; 0x02
				sprites[startSprite++].flags=spriteFlags;
    74d4:	8f 5f       	subi	r24, 0xFF	; 255
    74d6:	43 83       	std	Z+3, r20	; 0x03
    74d8:	9f 0d       	add	r25, r15
    74da:	e8 cf       	rjmp	.-48     	; 0x74ac <MapSprite2+0x5c>
    74dc:	7e 0d       	add	r23, r14
		}else{
			y=0;
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
    74de:	0f 5f       	subi	r16, 0xFF	; 255
				sprites[startSprite].tileIndex=t;
				sprites[startSprite++].flags=spriteFlags;
				x+=dx;
			}
			y+=dy;
			x=(spriteFlags & SPRITE_FLIP_X)?(mapWidth-1):0;
    74e0:	95 2f       	mov	r25, r21
    74e2:	dd cf       	rjmp	.-70     	; 0x749e <MapSprite2+0x4e>
	    }
	}
    74e4:	df 91       	pop	r29
    74e6:	cf 91       	pop	r28
    74e8:	1f 91       	pop	r17
    74ea:	0f 91       	pop	r16
    74ec:	ff 90       	pop	r15
    74ee:	ef 90       	pop	r14
    74f0:	df 90       	pop	r13
    74f2:	08 95       	ret

000074f4 <InitializeVideoMode>:
		#endif	
	}


	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){
    74f4:	e2 e0       	ldi	r30, 0x02	; 2
    74f6:	f1 e0       	ldi	r31, 0x01	; 1

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
			sprites[i].x=(SCREEN_TILES_H*TILE_WIDTH);		
    74f8:	80 ee       	ldi	r24, 0xE0	; 224
    74fa:	80 83       	st	Z, r24
    74fc:	34 96       	adiw	r30, 0x04	; 4

	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
    74fe:	91 e0       	ldi	r25, 0x01	; 1
    7500:	ea 33       	cpi	r30, 0x3A	; 58
    7502:	f9 07       	cpc	r31, r25
    7504:	d1 f7       	brne	.-12     	; 0x74fa <InitializeVideoMode+0x6>
		
		#if SCROLLING == 1
		//	for(int i=0;i<(OVERLAY_LINES*VRAM_TILES_H);i++){
		//		overlay_vram[i]=RAM_TILES_COUNT;
		//	}
			Screen.scrollHeight=VRAM_TILES_V;
    7506:	80 e2       	ldi	r24, 0x20	; 32
    7508:	80 93 9e 08 	sts	0x089E, r24
			Screen.overlayHeight=0;
    750c:	10 92 99 08 	sts	0x0899, r1
    7510:	08 95       	ret

00007512 <DrawMap>:



//Draws a map of tile at the specified position
#if VRAM_ADDR_SIZE == 1
	void DrawMap(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
    7512:	4f 92       	push	r4
    7514:	5f 92       	push	r5
    7516:	6f 92       	push	r6
    7518:	7f 92       	push	r7
    751a:	8f 92       	push	r8
    751c:	9f 92       	push	r9
    751e:	af 92       	push	r10
    7520:	bf 92       	push	r11
    7522:	cf 92       	push	r12
    7524:	df 92       	push	r13
    7526:	ef 92       	push	r14
    7528:	ff 92       	push	r15
    752a:	0f 93       	push	r16
    752c:	1f 93       	push	r17
    752e:	cf 93       	push	r28
    7530:	df 93       	push	r29
    7532:	68 2e       	mov	r6, r24
    7534:	56 2e       	mov	r5, r22
    7536:	7a 01       	movw	r14, r20
		//unsigned char i;
		u8 mapWidth=pgm_read_byte(&(map[0]));
    7538:	fa 01       	movw	r30, r20
    753a:	74 90       	lpm	r7, Z
		u8 mapHeight=pgm_read_byte(&(map[1]));
    753c:	31 96       	adiw	r30, 0x01	; 1
    753e:	84 90       	lpm	r8, Z
    7540:	c7 2c       	mov	r12, r7
    7542:	d1 2c       	mov	r13, r1
		
		for(u8 dy=0;dy<mapHeight;dy++){
    7544:	00 e0       	ldi	r16, 0x00	; 0
    7546:	10 e0       	ldi	r17, 0x00	; 0
    7548:	91 2c       	mov	r9, r1
    754a:	98 14       	cp	r9, r8
    754c:	f1 f0       	breq	.+60     	; 0x758a <DrawMap+0x78>
    754e:	c0 e0       	ldi	r28, 0x00	; 0
    7550:	d0 e0       	ldi	r29, 0x00	; 0
    7552:	58 01       	movw	r10, r16
    7554:	f2 e0       	ldi	r31, 0x02	; 2
    7556:	af 0e       	add	r10, r31
    7558:	b1 1c       	adc	r11, r1
    755a:	49 2c       	mov	r4, r9
    755c:	45 0c       	add	r4, r5
			for(u8 dx=0;dx<mapWidth;dx++){			
    755e:	c7 15       	cp	r28, r7
    7560:	80 f4       	brcc	.+32     	; 0x7582 <DrawMap+0x70>
    7562:	95 01       	movw	r18, r10
    7564:	2c 0f       	add	r18, r28
    7566:	3d 1f       	adc	r19, r29
    7568:	f7 01       	movw	r30, r14
    756a:	e2 0f       	add	r30, r18
    756c:	f3 1f       	adc	r31, r19
				SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
    756e:	24 91       	lpm	r18, Z
    7570:	42 2f       	mov	r20, r18
    7572:	50 e0       	ldi	r21, 0x00	; 0
    7574:	64 2d       	mov	r22, r4
    7576:	8c 2f       	mov	r24, r28
    7578:	86 0d       	add	r24, r6
    757a:	0e 94 4e 2d 	call	0x5a9c	; 0x5a9c <SetTile>
    757e:	21 96       	adiw	r28, 0x01	; 1
    7580:	ee cf       	rjmp	.-36     	; 0x755e <DrawMap+0x4c>
	void DrawMap(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
		//unsigned char i;
		u8 mapWidth=pgm_read_byte(&(map[0]));
		u8 mapHeight=pgm_read_byte(&(map[1]));
		
		for(u8 dy=0;dy<mapHeight;dy++){
    7582:	93 94       	inc	r9
    7584:	0c 0d       	add	r16, r12
    7586:	1d 1d       	adc	r17, r13
    7588:	e0 cf       	rjmp	.-64     	; 0x754a <DrawMap+0x38>
			for(u8 dx=0;dx<mapWidth;dx++){			
				SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
			}
		}

	}
    758a:	df 91       	pop	r29
    758c:	cf 91       	pop	r28
    758e:	1f 91       	pop	r17
    7590:	0f 91       	pop	r16
    7592:	ff 90       	pop	r15
    7594:	ef 90       	pop	r14
    7596:	df 90       	pop	r13
    7598:	cf 90       	pop	r12
    759a:	bf 90       	pop	r11
    759c:	af 90       	pop	r10
    759e:	9f 90       	pop	r9
    75a0:	8f 90       	pop	r8
    75a2:	7f 90       	pop	r7
    75a4:	6f 90       	pop	r6
    75a6:	5f 90       	pop	r5
    75a8:	4f 90       	pop	r4
    75aa:	08 95       	ret

000075ac <Print>:
	PrintHexByte(x+4,y, value>>8);
	PrintHexByte(x+6,y,value&0xff);
}

//Print a string from flash
void Print(int x,int y,const char *string){
    75ac:	0f 93       	push	r16
    75ae:	1f 93       	push	r17
    75b0:	cf 93       	push	r28
    75b2:	df 93       	push	r29
    75b4:	06 2f       	mov	r16, r22
    75b6:	c4 2f       	mov	r28, r20
    75b8:	d5 2f       	mov	r29, r21
    75ba:	18 2f       	mov	r17, r24
    75bc:	14 1b       	sub	r17, r20

	int i=0;
	char c;

	while(1){
		c=pgm_read_byte(&(string[i++]));		
    75be:	fe 01       	movw	r30, r28
    75c0:	44 91       	lpm	r20, Z
		if(c!=0){
    75c2:	44 23       	and	r20, r20
    75c4:	49 f0       	breq	.+18     	; 0x75d8 <Print+0x2c>
			c=((c&127)-32);			
    75c6:	4f 77       	andi	r20, 0x7F	; 127
    75c8:	40 52       	subi	r20, 0x20	; 32
			SetFont(x++,y,c);
    75ca:	60 2f       	mov	r22, r16
    75cc:	8c 2f       	mov	r24, r28
    75ce:	81 0f       	add	r24, r17
    75d0:	0e 94 4a 2d 	call	0x5a94	; 0x5a94 <SetFont>
    75d4:	21 96       	adiw	r28, 0x01	; 1
		}else{
			break;
		}
	}
    75d6:	f3 cf       	rjmp	.-26     	; 0x75be <Print+0x12>
	
}
    75d8:	df 91       	pop	r29
    75da:	cf 91       	pop	r28
    75dc:	1f 91       	pop	r17
    75de:	0f 91       	pop	r16
    75e0:	08 95       	ret

000075e2 <WaitVsync>:
		}
	}
}

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
    75e2:	0f 93       	push	r16
    75e4:	1f 93       	push	r17
    75e6:	cf 93       	push	r28
    75e8:	df 93       	push	r29
    75ea:	8c 01       	movw	r16, r24
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    75ec:	c0 e0       	ldi	r28, 0x00	; 0
    75ee:	d0 e0       	ldi	r29, 0x00	; 0
    75f0:	c0 17       	cp	r28, r16
    75f2:	d1 07       	cpc	r29, r17
    75f4:	44 f4       	brge	.+16     	; 0x7606 <WaitVsync+0x24>
		while(!GetVsyncFlag());
    75f6:	0e 94 67 2d 	call	0x5ace	; 0x5ace <GetVsyncFlag>
    75fa:	88 23       	and	r24, r24
    75fc:	e1 f3       	breq	.-8      	; 0x75f6 <WaitVsync+0x14>
		ClearVsyncFlag();		
    75fe:	0e 94 6b 2d 	call	0x5ad6	; 0x5ad6 <ClearVsyncFlag>

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    7602:	21 96       	adiw	r28, 0x01	; 1
    7604:	f5 cf       	rjmp	.-22     	; 0x75f0 <WaitVsync+0xe>
		while(!GetVsyncFlag());
		ClearVsyncFlag();		
	}
}
    7606:	df 91       	pop	r29
    7608:	cf 91       	pop	r28
    760a:	1f 91       	pop	r17
    760c:	0f 91       	pop	r16
    760e:	08 95       	ret

00007610 <DisplayLogo>:
	void DisplayLogo(){
	
		#if INTRO_LOGO !=0
			#define LOGO_X_POS 12
			
			InitMusicPlayer(logoInitPatches);
    7610:	8f e0       	ldi	r24, 0x0F	; 15
    7612:	99 e0       	ldi	r25, 0x09	; 9
    7614:	0e 94 04 2f 	call	0x5e08	; 0x5e08 <InitMusicPlayer>
			SetTileTable(logo_tileset);
    7618:	8f e0       	ldi	r24, 0x0F	; 15
    761a:	91 e0       	ldi	r25, 0x01	; 1
    761c:	0e 94 62 2d 	call	0x5ac4	; 0x5ac4 <SetTileTable>
			
			//draw logo
			ClearVram();
    7620:	0e 94 40 2d 	call	0x5a80	; 0x5a80 <ClearVram>
			WaitVsync(15);		
    7624:	8f e0       	ldi	r24, 0x0F	; 15
    7626:	90 e0       	ldi	r25, 0x00	; 0
    7628:	0e 94 f1 3a 	call	0x75e2	; 0x75e2 <WaitVsync>


			#if INTRO_LOGO == 1 
				TriggerFx(0,0xff,true);
    762c:	41 e0       	ldi	r20, 0x01	; 1
    762e:	6f ef       	ldi	r22, 0xFF	; 255
    7630:	80 e0       	ldi	r24, 0x00	; 0
    7632:	0e 94 da 2f 	call	0x5fb4	; 0x5fb4 <TriggerFx>
			#endif

			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo);
    7636:	49 ef       	ldi	r20, 0xF9	; 249
    7638:	50 e0       	ldi	r21, 0x00	; 0
    763a:	6c e0       	ldi	r22, 0x0C	; 12
    763c:	8c e0       	ldi	r24, 0x0C	; 12
    763e:	0e 94 89 3a 	call	0x7512	; 0x7512 <DrawMap>
			WaitVsync(3);
    7642:	83 e0       	ldi	r24, 0x03	; 3
    7644:	90 e0       	ldi	r25, 0x00	; 0
    7646:	0e 94 f1 3a 	call	0x75e2	; 0x75e2 <WaitVsync>
			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo2);
    764a:	48 ee       	ldi	r20, 0xE8	; 232
    764c:	50 e0       	ldi	r21, 0x00	; 0
    764e:	6c e0       	ldi	r22, 0x0C	; 12
    7650:	8c e0       	ldi	r24, 0x0C	; 12
    7652:	0e 94 89 3a 	call	0x7512	; 0x7512 <DrawMap>
			WaitVsync(2);
    7656:	82 e0       	ldi	r24, 0x02	; 2
    7658:	90 e0       	ldi	r25, 0x00	; 0
    765a:	0e 94 f1 3a 	call	0x75e2	; 0x75e2 <WaitVsync>
			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo);
    765e:	49 ef       	ldi	r20, 0xF9	; 249
    7660:	50 e0       	ldi	r21, 0x00	; 0
    7662:	6c e0       	ldi	r22, 0x0C	; 12
    7664:	8c e0       	ldi	r24, 0x0C	; 12
    7666:	0e 94 89 3a 	call	0x7512	; 0x7512 <DrawMap>
			#if INTRO_LOGO == 2
				SetMasterVolume(0xc0);
				TriggerNote(3,0,16,0xff);
			#endif 
		
			WaitVsync(65);
    766a:	81 e4       	ldi	r24, 0x41	; 65
    766c:	90 e0       	ldi	r25, 0x00	; 0
    766e:	0e 94 f1 3a 	call	0x75e2	; 0x75e2 <WaitVsync>
			ClearVram();
    7672:	0e 94 40 2d 	call	0x5a80	; 0x5a80 <ClearVram>
			WaitVsync(20);
    7676:	84 e1       	ldi	r24, 0x14	; 20
    7678:	90 e0       	ldi	r25, 0x00	; 0
    767a:	0c 94 f1 3a 	jmp	0x75e2	; 0x75e2 <WaitVsync>

0000767e <doFade>:
char fadeDir;
bool volatile fadeActive;


void doFade(unsigned char speed,bool blocking){
	fadeSpeed=speed;
    767e:	80 93 60 09 	sts	0x0960, r24
	currFadeFrame=0;
    7682:	10 92 64 09 	sts	0x0964, r1
	fadeActive=true;
    7686:	81 e0       	ldi	r24, 0x01	; 1
    7688:	80 93 63 09 	sts	0x0963, r24
		
	if(blocking){
    768c:	66 23       	and	r22, r22
    768e:	21 f0       	breq	.+8      	; 0x7698 <doFade+0x1a>
		while(fadeActive==true);
    7690:	80 91 63 09 	lds	r24, 0x0963
    7694:	81 11       	cpse	r24, r1
    7696:	fc cf       	rjmp	.-8      	; 0x7690 <doFade+0x12>
    7698:	08 95       	ret

0000769a <FadeIn>:
	
	
}

void FadeIn(unsigned char speed,bool blocking){
	if(speed==0){
    769a:	81 11       	cpse	r24, r1
    769c:	03 c0       	rjmp	.+6      	; 0x76a4 <FadeIn+0xa>
		DDRC=0xff;
    769e:	8f ef       	ldi	r24, 0xFF	; 255
    76a0:	87 b9       	out	0x07, r24	; 7
		return;
    76a2:	08 95       	ret
	}
	fadeStep=1;
    76a4:	91 e0       	ldi	r25, 0x01	; 1
    76a6:	90 93 65 09 	sts	0x0965, r25
	fadeDir=1;
    76aa:	90 93 61 09 	sts	0x0961, r25
	doFade(speed,blocking);
    76ae:	0c 94 3f 3b 	jmp	0x767e	; 0x767e <doFade>

000076b2 <ProcessFading>:
}


//called by the kernel at each field end
void ProcessFading(){
	if(fadeActive==true){
    76b2:	80 91 63 09 	lds	r24, 0x0963
    76b6:	88 23       	and	r24, r24
    76b8:	01 f1       	breq	.+64     	; 0x76fa <ProcessFading+0x48>
		if(currFadeFrame==0){
    76ba:	80 91 64 09 	lds	r24, 0x0964
    76be:	81 11       	cpse	r24, r1
    76c0:	19 c0       	rjmp	.+50     	; 0x76f4 <ProcessFading+0x42>
			currFadeFrame=fadeSpeed;
    76c2:	80 91 60 09 	lds	r24, 0x0960
    76c6:	80 93 64 09 	sts	0x0964, r24
			DDRC = pgm_read_byte(&(fader[fadeStep-1]));
    76ca:	e0 91 65 09 	lds	r30, 0x0965
    76ce:	f0 e0       	ldi	r31, 0x00	; 0
    76d0:	e5 52       	subi	r30, 0x25	; 37
    76d2:	ff 4f       	sbci	r31, 0xFF	; 255
    76d4:	e4 91       	lpm	r30, Z
    76d6:	e7 b9       	out	0x07, r30	; 7
			fadeStep+=fadeDir;
    76d8:	90 91 61 09 	lds	r25, 0x0961
    76dc:	80 91 65 09 	lds	r24, 0x0965
    76e0:	89 0f       	add	r24, r25
    76e2:	80 93 65 09 	sts	0x0965, r24
			if(fadeStep==0 || fadeStep==(FADER_STEPS+1)){
    76e6:	88 23       	and	r24, r24
    76e8:	11 f0       	breq	.+4      	; 0x76ee <ProcessFading+0x3c>
    76ea:	8d 30       	cpi	r24, 0x0D	; 13
    76ec:	31 f4       	brne	.+12     	; 0x76fa <ProcessFading+0x48>
				fadeActive=false;
    76ee:	10 92 63 09 	sts	0x0963, r1
    76f2:	08 95       	ret
			}
		}else{
			currFadeFrame--;
    76f4:	81 50       	subi	r24, 0x01	; 1
    76f6:	80 93 64 09 	sts	0x0964, r24
    76fa:	08 95       	ret

000076fc <VideoModeVsync>:
	}

	//Callback invoked during hsync
	void VideoModeVsync(){
		
		ProcessFading();
    76fc:	0e 94 59 3b 	call	0x76b2	; 0x76b2 <ProcessFading>
		ProcessSprites();
    7700:	0c 94 16 39 	jmp	0x722c	; 0x722c <ProcessSprites>

00007704 <clear_sprites>:
	ClearVram();
	FadeIn(FRAMES_PER_FADE, false);
}

void clear_sprites()
{
    7704:	cf 93       	push	r28
	for(char i = 0; i < MAX_SPRITES; i++)
    7706:	c0 e0       	ldi	r28, 0x00	; 0
	{
		MapSprite2(i, map_none, 0);
    7708:	40 e0       	ldi	r20, 0x00	; 0
    770a:	6e e7       	ldi	r22, 0x7E	; 126
    770c:	76 e3       	ldi	r23, 0x36	; 54
    770e:	8c 2f       	mov	r24, r28
    7710:	0e 94 28 3a 	call	0x7450	; 0x7450 <MapSprite2>
    7714:	cf 5f       	subi	r28, 0xFF	; 255
	FadeIn(FRAMES_PER_FADE, false);
}

void clear_sprites()
{
	for(char i = 0; i < MAX_SPRITES; i++)
    7716:	ce 30       	cpi	r28, 0x0E	; 14
    7718:	b9 f7       	brne	.-18     	; 0x7708 <clear_sprites+0x4>
	{
		MapSprite2(i, map_none, 0);
	}
}
    771a:	cf 91       	pop	r28
    771c:	08 95       	ret

0000771e <load_splash>:
	load_splash();
}

void load_splash()
{
	game.current_screen = SPLASH;
    771e:	10 92 86 09 	sts	0x0986, r1
	clear_sprites();
    7722:	0e 94 82 3b 	call	0x7704	; 0x7704 <clear_sprites>
	Print(8, 15, (char*) str1Player);
    7726:	4e e9       	ldi	r20, 0x9E	; 158
    7728:	59 e0       	ldi	r21, 0x09	; 9
    772a:	6f e0       	ldi	r22, 0x0F	; 15
    772c:	70 e0       	ldi	r23, 0x00	; 0
    772e:	88 e0       	ldi	r24, 0x08	; 8
    7730:	90 e0       	ldi	r25, 0x00	; 0
    7732:	0e 94 d6 3a 	call	0x75ac	; 0x75ac <Print>
	Print(8, 16, (char*) strHighscores);
    7736:	42 e9       	ldi	r20, 0x92	; 146
    7738:	59 e0       	ldi	r21, 0x09	; 9
    773a:	60 e1       	ldi	r22, 0x10	; 16
    773c:	70 e0       	ldi	r23, 0x00	; 0
    773e:	88 e0       	ldi	r24, 0x08	; 8
    7740:	90 e0       	ldi	r25, 0x00	; 0
    7742:	0e 94 d6 3a 	call	0x75ac	; 0x75ac <Print>
	Print(6, 21, (char*) strSelectHandle);
    7746:	41 e8       	ldi	r20, 0x81	; 129
    7748:	59 e0       	ldi	r21, 0x09	; 9
    774a:	65 e1       	ldi	r22, 0x15	; 21
    774c:	70 e0       	ldi	r23, 0x00	; 0
    774e:	86 e0       	ldi	r24, 0x06	; 6
    7750:	90 e0       	ldi	r25, 0x00	; 0
    7752:	0e 94 d6 3a 	call	0x75ac	; 0x75ac <Print>
	Print(5, 26, (char*) strCopyright);
    7756:	44 ea       	ldi	r20, 0xA4	; 164
    7758:	59 e0       	ldi	r21, 0x09	; 9
    775a:	6a e1       	ldi	r22, 0x1A	; 26
    775c:	70 e0       	ldi	r23, 0x00	; 0
    775e:	85 e0       	ldi	r24, 0x05	; 5
    7760:	90 e0       	ldi	r25, 0x00	; 0
    7762:	0e 94 d6 3a 	call	0x75ac	; 0x75ac <Print>
	DrawMap2(6, 5, (const char*) map_splash);
    7766:	47 e6       	ldi	r20, 0x67	; 103
    7768:	5f e4       	ldi	r21, 0x4F	; 79
    776a:	65 e0       	ldi	r22, 0x05	; 5
    776c:	86 e0       	ldi	r24, 0x06	; 6
    776e:	0e 94 89 3a 	call	0x7512	; 0x7512 <DrawMap>
	MapSprite2(0, map_right_arrow, 0);
    7772:	40 e0       	ldi	r20, 0x00	; 0
    7774:	6b e7       	ldi	r22, 0x7B	; 123
    7776:	76 e3       	ldi	r23, 0x36	; 54
    7778:	80 e0       	ldi	r24, 0x00	; 0
    777a:	0c 94 28 3a 	jmp	0x7450	; 0x7450 <MapSprite2>

0000777e <main>:
}

int main()
{
	// Initialize
	InitMusicPlayer(my_patches);
    777e:	89 eb       	ldi	r24, 0xB9	; 185
    7780:	99 e0       	ldi	r25, 0x09	; 9
    7782:	0e 94 04 2f 	call	0x5e08	; 0x5e08 <InitMusicPlayer>
	SetMasterVolume(0xff);
    7786:	8f ef       	ldi	r24, 0xFF	; 255
    7788:	0e 94 81 32 	call	0x6502	; 0x6502 <SetMasterVolume>
	SetTileTable(tiles_data);
    778c:	81 e8       	ldi	r24, 0x81	; 129
    778e:	96 e3       	ldi	r25, 0x36	; 54
    7790:	0e 94 62 2d 	call	0x5ac4	; 0x5ac4 <SetTileTable>
	SetSpritesTileTable(sprites_data);
    7794:	8e e1       	ldi	r24, 0x1E	; 30
    7796:	9b e2       	ldi	r25, 0x2B	; 43
    7798:	0e 94 3b 2d 	call	0x5a76	; 0x5a76 <SetSpritesTileTable>
	SetFontTilesIndex(TILES_DATA_SIZE);
    779c:	83 e2       	ldi	r24, 0x23	; 35
    779e:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <SetFontTilesIndex>
	FadeIn(FRAMES_PER_FADE, false);
    77a2:	60 e0       	ldi	r22, 0x00	; 0
    77a4:	83 e0       	ldi	r24, 0x03	; 3
    77a6:	0e 94 4d 3b 	call	0x769a	; 0x769a <FadeIn>
	ClearVram();
    77aa:	0e 94 40 2d 	call	0x5a80	; 0x5a80 <ClearVram>
	init_game_state();
	load_splash();
    77ae:	0e 94 8f 3b 	call	0x771e	; 0x771e <load_splash>
	
	while (1)
	{
		WaitVsync(1);
    77b2:	81 e0       	ldi	r24, 0x01	; 1
    77b4:	90 e0       	ldi	r25, 0x00	; 0
    77b6:	0e 94 f1 3a 	call	0x75e2	; 0x75e2 <WaitVsync>
    77ba:	fb cf       	rjmp	.-10     	; 0x77b2 <main+0x34>

000077bc <__udivmodhi4>:
    77bc:	aa 1b       	sub	r26, r26
    77be:	bb 1b       	sub	r27, r27
    77c0:	51 e1       	ldi	r21, 0x11	; 17
    77c2:	07 c0       	rjmp	.+14     	; 0x77d2 <__udivmodhi4_ep>

000077c4 <__udivmodhi4_loop>:
    77c4:	aa 1f       	adc	r26, r26
    77c6:	bb 1f       	adc	r27, r27
    77c8:	a6 17       	cp	r26, r22
    77ca:	b7 07       	cpc	r27, r23
    77cc:	10 f0       	brcs	.+4      	; 0x77d2 <__udivmodhi4_ep>
    77ce:	a6 1b       	sub	r26, r22
    77d0:	b7 0b       	sbc	r27, r23

000077d2 <__udivmodhi4_ep>:
    77d2:	88 1f       	adc	r24, r24
    77d4:	99 1f       	adc	r25, r25
    77d6:	5a 95       	dec	r21
    77d8:	a9 f7       	brne	.-22     	; 0x77c4 <__udivmodhi4_loop>
    77da:	80 95       	com	r24
    77dc:	90 95       	com	r25
    77de:	bc 01       	movw	r22, r24
    77e0:	cd 01       	movw	r24, r26
    77e2:	08 95       	ret

000077e4 <__divmodhi4>:
    77e4:	97 fb       	bst	r25, 7
    77e6:	07 2e       	mov	r0, r23
    77e8:	16 f4       	brtc	.+4      	; 0x77ee <__divmodhi4+0xa>
    77ea:	00 94       	com	r0
    77ec:	07 d0       	rcall	.+14     	; 0x77fc <__divmodhi4_neg1>
    77ee:	77 fd       	sbrc	r23, 7
    77f0:	09 d0       	rcall	.+18     	; 0x7804 <__divmodhi4_neg2>
    77f2:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__udivmodhi4>
    77f6:	07 fc       	sbrc	r0, 7
    77f8:	05 d0       	rcall	.+10     	; 0x7804 <__divmodhi4_neg2>
    77fa:	3e f4       	brtc	.+14     	; 0x780a <__divmodhi4_exit>

000077fc <__divmodhi4_neg1>:
    77fc:	90 95       	com	r25
    77fe:	81 95       	neg	r24
    7800:	9f 4f       	sbci	r25, 0xFF	; 255
    7802:	08 95       	ret

00007804 <__divmodhi4_neg2>:
    7804:	70 95       	com	r23
    7806:	61 95       	neg	r22
    7808:	7f 4f       	sbci	r23, 0xFF	; 255

0000780a <__divmodhi4_exit>:
    780a:	08 95       	ret

0000780c <_exit>:
    780c:	f8 94       	cli

0000780e <__stop_program>:
    780e:	ff cf       	rjmp	.-2      	; 0x780e <__stop_program>
