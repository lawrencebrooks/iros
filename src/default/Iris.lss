
Iris.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800500  0000d214  0000d314  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .noinit       00000400  00800100  00800100  0000d340  2**5
                  CONTENTS, READONLY
  2 .text         0000d214  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .bss          00000aff  00800510  00800510  0000d324  2**1
                  ALLOC
  4 .stab         00000708  00000000  00000000  0000d740  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000002f1  00000000  00000000  0000de48  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  0000e139  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000690  00000000  00000000  0000e150  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00008e76  00000000  00000000  0000e7e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001680  00000000  00000000  00017656  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000022cb  00000000  00000000  00018cd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001628  00000000  00000000  0001afa4  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00001b96  00000000  00000000  0001c5cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000077d2  00000000  00000000  0001e162  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000828  00000000  00000000  00025938  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 21 34 	jmp	0x6842	; 0x6842 <__ctors_end>
       4:	0c 94 8a 34 	jmp	0x6914	; 0x6914 <__bad_interrupt>
       8:	0c 94 8a 34 	jmp	0x6914	; 0x6914 <__bad_interrupt>
       c:	0c 94 8a 34 	jmp	0x6914	; 0x6914 <__bad_interrupt>
      10:	0c 94 8a 34 	jmp	0x6914	; 0x6914 <__bad_interrupt>
      14:	0c 94 8a 34 	jmp	0x6914	; 0x6914 <__bad_interrupt>
      18:	0c 94 8a 34 	jmp	0x6914	; 0x6914 <__bad_interrupt>
      1c:	0c 94 8a 34 	jmp	0x6914	; 0x6914 <__bad_interrupt>
      20:	0c 94 02 3a 	jmp	0x7404	; 0x7404 <__vector_8>
      24:	0c 94 8a 34 	jmp	0x6914	; 0x6914 <__bad_interrupt>
      28:	0c 94 8a 34 	jmp	0x6914	; 0x6914 <__bad_interrupt>
      2c:	0c 94 8a 34 	jmp	0x6914	; 0x6914 <__bad_interrupt>
      30:	0c 94 8a 34 	jmp	0x6914	; 0x6914 <__bad_interrupt>
      34:	0c 94 ce 37 	jmp	0x6f9c	; 0x6f9c <__vector_13>
      38:	0c 94 0e 38 	jmp	0x701c	; 0x701c <__vector_14>
      3c:	0c 94 8a 34 	jmp	0x6914	; 0x6914 <__bad_interrupt>
      40:	0c 94 8a 34 	jmp	0x6914	; 0x6914 <__bad_interrupt>
      44:	0c 94 8a 34 	jmp	0x6914	; 0x6914 <__bad_interrupt>
      48:	0c 94 8a 34 	jmp	0x6914	; 0x6914 <__bad_interrupt>
      4c:	0c 94 8a 34 	jmp	0x6914	; 0x6914 <__bad_interrupt>
      50:	0c 94 8a 34 	jmp	0x6914	; 0x6914 <__bad_interrupt>
      54:	0c 94 8a 34 	jmp	0x6914	; 0x6914 <__bad_interrupt>
      58:	0c 94 8a 34 	jmp	0x6914	; 0x6914 <__bad_interrupt>
      5c:	0c 94 8a 34 	jmp	0x6914	; 0x6914 <__bad_interrupt>
      60:	0c 94 8a 34 	jmp	0x6914	; 0x6914 <__bad_interrupt>
      64:	0c 94 8a 34 	jmp	0x6914	; 0x6914 <__bad_interrupt>
      68:	0c 94 8a 34 	jmp	0x6914	; 0x6914 <__bad_interrupt>
      6c:	0c 94 8a 34 	jmp	0x6914	; 0x6914 <__bad_interrupt>
      70:	f1 5b       	subi	r31, 0xB1	; 177
      72:	00 5c       	subi	r16, 0xC0	; 192
      74:	f4 5b       	subi	r31, 0xB4	; 180
      76:	00 5c       	subi	r16, 0xC0	; 192
      78:	f7 5b       	subi	r31, 0xB7	; 183
      7a:	00 5c       	subi	r16, 0xC0	; 192
      7c:	fa 5b       	subi	r31, 0xBA	; 186
      7e:	00 5c       	subi	r16, 0xC0	; 192
      80:	fd 5b       	subi	r31, 0xBD	; 189
      82:	00 5c       	subi	r16, 0xC0	; 192

00000084 <__trampolines_end>:
      84:	81 00       	.word	0x0081	; ????
      86:	45 00       	.word	0x0045	; ????
      88:	27 ff       	sbrs	r18, 7
      8a:	24 ff       	sbrs	r18, 4
      8c:	2a 90       	ld	r2, -Y
      8e:	2b 1c       	adc	r2, r11
      90:	21 0c       	add	r2, r1
      92:	22 fb       	bst	r18, 2
      94:	85 00       	.word	0x0085	; ????
      96:	84 00       	.word	0x0084	; ????
      98:	89 03       	fmulsu	r16, r17
      9a:	88 8d       	ldd	r24, Y+24	; 0x18
      9c:	81 09       	sbc	r24, r1
      9e:	6f 02       	muls	r22, r31
      a0:	44 42       	sbci	r20, 0x24	; 36
      a2:	47 00       	.word	0x0047	; ????
      a4:	45 01       	movw	r8, r10
      a6:	b0 83       	st	Z, r27
      a8:	b3 00       	.word	0x00b3	; ????
      aa:	b1 01       	movw	r22, r2
      ac:	25 11       	cpse	r18, r5
      ae:	8a 4f       	sbci	r24, 0xFA	; 250
      b0:	8b 03       	fmulsu	r16, r19

000000b2 <eeprom_format_table>:
      b2:	5a 55 01 20 01 01 00 38 08 00 00 00 00 00 00 00     ZU. ...8........
	...

000000d2 <patchCommands>:
      d2:	ab 3b ae 3b 0a 3c 0e 3c 15 3c b6 3b bb 3b c0 3b     .;.;.<.<.<.;.;.;
      e2:	1d 3c c3 3b c6 3b c9 3b 04 3c 07 3c 2d 3c           .<.;.;.;.<.<-<

000000f0 <fader>:
      f0:	00 40 88 91 d2 e4 ad b5 b6 be bf ff                 .@..........

000000fc <map_uzeboxlogo2>:
      fc:	05 03 00 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f     ................
	...

0000010d <map_uzeboxlogo>:
     10d:	05 04 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d     ................
     11d:	00 0e 0f 10 11 12                                   ......

00000123 <logo_tileset>:
	...
     17f:	00 00 00 49 00 00 00 00 00 49 52 52 00 00 00 49     ...I.....IRR...I
     18f:	52 53 1c 25 00 49 52 52 24 25 25 1b 52 52 5c 2d     RS.%.IRR$%%.RR\-
     19f:	2d 1c 12 12 00 00 00 00 00 00 00 00 00 00 00 00     -...............
     1af:	40 49 49 49 00 40 49 49 52 5b 5b 5b 4a 52 52 5b     @III.@IIR[[[JRR[
     1bf:	1c 1c 13 12 5b 1c 24 1c 12 09 09 09 24 1b 12 09     ....[.$.....$...
     1cf:	09 09 09 0a 0a 0a 0a 0a 0a 0a 0a 13 0a 0a 12 0a     ................
     1df:	0a 12 13 0a 00 00 00 00 00 00 00 00 92 52 52 52     .............RRR
     1ef:	52 52 52 49 13 12 13 09 00 1c 1b 13 0a 12 12 40     RRRI...........@
     1ff:	1b 65 64 1c 09 0a 00 09 24 1b 1c 65 12 00 00 25     .ed.....$..e...%
     20f:	1c 1c 1c 1c 01 00 25 24 1c 1c 1c 1c 00 24 25 24     ......%$.....$%$
     21f:	24 24 1c 1c 00 00 00 00 00 00 00 00 49 40 00 00     $$..........I@..
     22f:	00 00 00 00 52 49 49 00 00 00 00 00 1c 5b 4a 48     ....RII......[JH
     23f:	00 00 00 00 1c 25 52 49 00 00 00 00 65 24 64 49     .....%RI....e$dI
     24f:	00 00 00 00 65 25 64 49 00 00 00 00 6d 2e 5c 49     ....e%dI....m.\I
	...
     267:	00 00 40 52 00 00 00 00 00 49 52 5c 00 00 00 00     ..@R.....IR\....
     277:	53 52 24 25 00 00 00 53 52 25 25 25 00 00 4a 52     SR$%...SR%%%..JR
     287:	25 25 1b 00 00 00 5b 25 13 00 00 1b 00 5b 53 00     %%....[%.....[S.
     297:	0a 1c 37 37 09 5b 1c 65 7f 37 2e 2e 52 2e 2e 1c     ..77.[.e.7..R...
     2a7:	13 13 12 00 2e 25 1b 13 12 00 00 12 1c 1c 12 00     .....%..........
     2b7:	00 12 25 1c 12 00 00 12 2e 37 1c 13 00 13 2e 37     ..%......7.....7
     2c7:	36 1c 13 1b 37 37 2e 2e 25 13 1c 1c 2e 2e 2e 2e     6...77..%.......
     2d7:	1b 1c 1c 1c 6e 6e 6e 1c 1c 1c 1c 1c 09 13 13 12     ....nnn.........
     2e7:	12 13 13 00 13 13 13 13 13 1c 00 09 13 13 13 13     ................
     2f7:	1c 01 00 37 13 13 13 1c 13 00 2e 2e 1b 1b 1c 1c     ...7............
     307:	00 1c 77 2e 1b 1b 25 00 13 7f 25 1c 1c 1c 01 0a     ..w...%...%.....
     317:	37 24 1c 1c 1c 13 0a 2e 25 25 09 00 13 2e 24 25     7$......%%....$%
     327:	25 25 25 25 2e 25 25 25 25 25 25 25 25 25 2d 2e     %%%%.%%%%%%%%%-.
     337:	25 1b 1c 1c 2e 2e 25 1c 13 25 1b 13 25 1c 1c 1c     %.....%..%..%...
     347:	1c 01 09 52 1c 1c 13 00 01 1c 5b 5c 0a 00 01 65     ...R......[\...e
     357:	77 5c 1b 00 01 6e 7f 6e 52 1b 00 00 6d 1c 52 49     w\...n.nR...m.RI
     367:	00 00 00 00 1c 13 53 00 00 00 00 00 1c 52 4a 00     ......S......RJ.
     377:	00 00 00 00 5b 5b 00 00 00 00 00 00 5c 00 00 00     ....[[......\...
	...
     3a3:	13 5b 7f 77 6e 6e 6e 6e 13 65 77 76 6e 6e 6e 6e     .[.wnnnn.ewvnnnn
     3b3:	1b 65 77 76 76 76 6e 77 1b 5b bf 76 b6 76 76 76     .ewvvvnw.[.v.vvv
     3c3:	09 13 6d bf b7 b6 b7 65 00 1b 12 5c 76 bf 76 6d     ..m....e...\v.vm
     3d3:	00 00 12 1b 12 5b 5b 5c 00 00 00 00 09 0a 12 13     .....[[\........
     3e3:	6e 77 24 1c 1c 1c 1c 1c 77 25 1c 1c 1c 1c 24 25     nw$.....w%....$%
     3f3:	6e 1c 1c 1c 24 25 25 1b 1c 1c 24 25 25 13 00 00     n...$%%...$%%...
     403:	64 6d 6d 1b 00 09 6e bf 6d 5b 09 12 6e bf 6d 5b     dmm...n.m[..n.m[
     413:	5b 12 5b 64 5b 12 13 12 13 1b 12 12 09 01 00 00     [.[d[...........
     423:	1c 24 2e 1c 09 00 09 6e 25 24 01 00 09 76 7f 7f     .$.....n%$...v..
     433:	00 00 12 77 7f 7f 64 12 64 bf bf 77 5b 12 1b 09     ...w..d.d..w[...
     443:	bf 6d 5b 12 1b 09 00 00 12 13 1b 09 00 00 00 00     .m[.............
     453:	09 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     463:	7f 7f 53 13 13 00 00 00 64 12 1b 01 00 00 00 00     ..S.....d.......
     473:	1b 12 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     4ab:	26 00 00 00 26 00 26 26 2f 00 00 00 2f 00 00 00     &...&.&&/.../...
     4bb:	37 00 00 00 37 00 00 00 ff 00 00 00 ff 00 00 00     7...7...........
     4cb:	bf 00 00 00 bf 00 00 bf 37 00 00 37 00 00 37 00     ........7..7..7.
     4db:	00 26 26 00 00 00 26 26 00 00 00 00 00 00 00 00     .&&...&&........
     4eb:	26 26 26 00 26 26 26 26 00 00 2f 00 2f 00 00 00     &&&.&&&&.././...
     4fb:	00 37 00 00 37 00 00 00 ff 00 00 00 ff ff ff ff     .7..7...........
     50b:	00 00 00 00 bf 00 00 00 00 00 00 00 37 00 00 00     ............7...
     51b:	26 26 26 00 26 26 26 26 00 00 00 00 00 00 00 00     &&&.&&&&........
     52b:	26 00 26 26 26 26 00 00 00 00 2f 00 00 00 2f 00     &.&&&&..../.../.
     53b:	00 00 37 00 00 00 37 00 00 00 ff ff ff ff 00 00     ..7...7.........
     54b:	00 00 bf 00 00 00 bf 00 00 00 37 00 00 00 37 00     ..........7...7.
     55b:	26 00 26 26 26 26 00 00 00 00 00 00 00 00 00 00     &.&&&&..........
     56b:	00 00 26 26 26 00 26 00 00 2f 00 00 2f 00 2f 00     ..&&&.&../.././.
     57b:	37 00 00 00 37 00 00 37 ff 00 00 00 ff 00 00 00     7...7..7........
     58b:	bf 00 00 00 bf 00 00 bf 37 00 00 37 00 00 37 00     ........7..7..7.
     59b:	26 26 26 00 00 00 26 00 00 00 00 00 00 00 00 00     &&&...&.........
     5ab:	00 00 26 00 00 00 00 00 00 00 2f 00 00 00 00 00     ..&......./.....
     5bb:	00 37 00 00 00 00 00 00 ff 00 00 00 00 00 00 00     .7..............
     5cb:	00 bf 00 00 00 00 00 00 00 00 37 00 00 00 00 00     ..........7.....
     5db:	00 00 26 00 00 00 00 00 00 00 00 00 00 00 00 00     ..&.............
	...
     5ff:	00 00 00 e4 00 00 00 00 09 9b ed f6 00 00 00 9b     ................
     60f:	a4 ad bf bf 00 52 9b a4 76 7f 7f b7 5b 9b 6d 77     .....R..v...[.mw
     61f:	7f 76 6e b7 00 00 00 00 00 00 00 00 00 00 00 00     .vn.............
     62f:	5b b6 f6 f6 00 5b f6 ff ff ff ff bf f6 ff ff ff     [....[..........
     63f:	ff bf bf ae ff bf ff ff ff b7 ad 65 bf bf ff ff     ...........e....
     64f:	b7 b6 ad 65 b7 bf ff ff bf b7 ae 6e b7 bf ff ff     ...e.......n....
     65f:	bf b7 b7 65 00 00 00 00 00 00 00 00 f6 f6 ed ed     ...e............
     66f:	ad a4 a4 9b b6 6d 6d 5c 52 6e 65 64 65 65 65 52     .....mm\RnedeeeR
     67f:	65 76 6d 25 5c 5c 52 53 6e 24 65 6e 65 52 52 6e     evm%\\RSn$eneRRn
     68f:	25 25 24 25 5b 52 77 2d 25 25 25 24 52 6e 6e 2d     %%$%[Rw-%%%$Rnn-
     69f:	25 25 25 25 00 00 00 00 00 00 00 00 9b 49 00 00     %%%%.........I..
     6af:	00 00 00 00 a4 9b 92 00 00 00 00 00 25 64 93 49     ............%d.I
     6bf:	00 00 00 00 65 2e 9b 52 00 00 00 00 6d 25 65 52     ....e..R....m%eR
     6cf:	00 00 00 00 6d 2d 65 52 00 00 00 00 6e 2e 64 52     ....m-eR....n.dR
	...
     6e7:	00 00 49 5b 00 00 00 00 00 4a 5b 65 00 00 00 00     ..I[.....J[e....
     6f7:	5b 9b 6d 2d 00 00 00 5b 5b 2d 2e 25 00 00 52 5b     [.m-...[[-.%..R[
     707:	2e 2e 1c 09 00 01 5b 2d 1c 01 09 1c 00 5c 5b 01     ......[-.....\[.
     717:	4a 65 77 7f 4a 5b 1c 6e 7f 77 77 76 9b 77 77 6d     Jew.J[.n.wwv.wwm
     727:	65 6e 6e a4 77 6e 65 65 65 5b a4 b7 25 25 5c 52     enn.wneee[..%%\R
     737:	52 6d bf bf 13 09 49 64 7f bf bf bf 09 5c 7f 7f     Rm....Id.....\..
     747:	bf bf b7 bf 7f 7f 77 7f 7f b7 bf bf 77 77 7f 7f     ......w.....ww..
     757:	6e b7 bf bf 77 7f 7f 6e 77 bf bf bf b6 ff ff ff     n...w..nw.......
     767:	bf bf b7 5b bf ff ff ff bf bf a4 64 bf ff ff ff     ...[.......d....
     777:	bf ad a4 7f bf ff ff ff bf a4 bf 7f ff ff ff bf     ................
     787:	ad bf bf bf ff ff ff b6 bf bf bf 77 ff ff f7 bf     ...........w....
     797:	bf bf 77 77 ff ff ff bf bf bf 64 52 6d 7f 6e 2e     ..ww......dRm.n.
     7a7:	2d 2d 25 6e 7f 76 6e 6e 6e 2e 25 65 77 77 77 76     --%n.vnnn.%ewwwv
     7b7:	2e 1c 25 24 7f 77 6e 25 1c 25 1c 1b 77 65 25 25     ..%$.wn%.%..we%%
     7c7:	1c 09 0a 5b 6e 6e 1c 09 49 25 64 64 5b 49 4a 6e     ...[nn..I%dd[IJn
     7d7:	7f 64 5c 00 53 77 bf 77 5b 5c 00 00 6e 25 5b 4a     .d\.Sw.w[\..n%[J
     7e7:	00 00 00 00 1c 1b 5b 00 00 00 00 00 24 5b 53 00     ......[.....$[S.
     7f7:	00 00 00 00 5b 5c 00 00 00 00 00 00 64 00 00 00     ....[\......d...
	...
     823:	5b 5c 7f bf 77 76 77 77 5c 6d 7f b7 77 77 77 77     [\..wvww\m..wwww
     833:	5c 6d 7f bf 77 77 77 bf 5c 64 bf bf bf bf bf 7f     \m..www.\d......
     843:	0a 5c 6e bf bf bf bf 76 00 65 64 6d bf bf bf bf     .\n....v.edm....
     853:	00 00 5b 6d 64 6d ad b6 00 00 00 00 12 5b 64 6d     ..[mdm.......[dm
     863:	77 7f 6e 6e 77 bf bf bf 7f 76 6d 76 77 bf bf bf     w.nnw....vmvw...
     873:	77 6d 6e 76 7f bf bf bf 6d 6e 76 7f bf b7 ad f6     wmnv....mnv.....
     883:	76 bf bf 76 a4 ad ff ff bf b6 64 ad ff ff ff ff     v..v......d.....
     893:	b6 ad bf ff ff ff ff f6 ad b6 ad 64 5b 52 00 00     ...........d[R..
     8a3:	ff ff bf bf ad 5b 64 bf ff ff b6 ad ad bf ff bf     .....[d.........
     8b3:	ff f6 ff ff ff ff bf 64 ff ff ff ff bf b6 76 5b     .......d......v[
     8c3:	ff ff ff bf bf 5b 00 00 ff ff ff 5c 00 00 00 00     .....[.....\....
     8d3:	a4 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     8e3:	bf bf 64 5c 5c 00 00 00 6e 5c 65 49 00 00 00 00     ..d\\...n\eI....
     8f3:	6d 5b 00 00 00 00 00 00 00 00 00 00 00 00 00 00     m[..............
	...

00000923 <logoInitPatches>:
     923:	00 00 00 2c 09 00 00 00 00                          ...,.....

0000092c <initPatch>:
     92c:	00 02 08 00 08 55 04 08 5a 00 00 f8 00 09 90 00     .....U..Z.......
     93c:	0a 1e 32 05 00 00 ff                                ..2....

00000943 <strTwist>:
     943:	49 52 49 53 20 57 41 53 20 41 20 46 4f 4f 4c 00     IRIS WAS A FOOL.
     953:	00 41 4e 44 20 53 4f 20 41 52 45 20 59 4f 55 00     .AND SO ARE YOU.
     963:	57 49 54 48 20 54 48 45 20 45 4d 45 52 41 4c 44     WITH THE EMERALD
     973:	53 20 52 45 54 55 52 4e 45 44 00 54 48 45 52 45     S RETURNED.THERE
     983:	20 49 53 20 4e 4f 20 53 54 4f 50 50 49 4e 47 20      IS NO STOPPING 
     993:	4f 55 52 00 44 4f 4d 49 4e 49 4f 4e 20 4f 56 45     OUR.DOMINION OVE
     9a3:	52 20 54 48 45 20 47 41 4c 41 58 59 00 00 4e 4f     R THE GALAXY..NO
     9b3:	57 20 59 4f 55 20 57 49 4c 4c 20 44 49 45 00 23     W YOU WILL DIE.#
	...

000009c4 <strReveal4>:
     9c4:	59 4f 55 20 44 4f 4e 54 20 4b 4e 4f 57 00 57 48     YOU DONT KNOW.WH
     9d4:	41 54 20 59 4f 55 20 41 52 45 20 44 4f 49 4e 47     AT YOU ARE DOING
     9e4:	00 23 00                                            .#.

000009e7 <strReveal3>:
     9e7:	59 4f 55 20 41 52 45 20 4d 41 4b 49 4e 47 20 41     YOU ARE MAKING A
     9f7:	20 4d 49 53 54 41 4b 45 00 23 00                     MISTAKE.#.

00000a02 <strReveal2>:
     a02:	59 4f 55 20 43 41 4e 54 20 48 41 56 45 20 54 48     YOU CANT HAVE TH
     a12:	45 4d 20 41 4c 4c 00 23 00                          EM ALL.#.

00000a1b <strReveal1>:
     a1b:	59 4f 55 20 41 52 45 20 50 45 52 53 49 53 54 45     YOU ARE PERSISTE
     a2b:	4e 54 00 23 00                                      NT.#.

00000a30 <strReveal0>:
     a30:	49 20 4b 4e 45 57 20 54 48 45 59 20 57 4f 55 4c     I KNEW THEY WOUL
     a40:	44 20 53 45 4e 44 20 59 4f 55 00 23 00              D SEND YOU.#.

00000a4d <strIntro>:
     a4d:	49 52 49 53 20 48 41 53 20 42 45 54 52 41 59 45     IRIS HAS BETRAYE
     a5d:	44 20 55 53 00 00 48 45 20 48 41 53 20 53 54 4f     D US..HE HAS STO
     a6d:	4c 45 4e 20 54 48 45 20 35 20 45 4d 45 52 41 4c     LEN THE 5 EMERAL
     a7d:	44 53 00 4f 46 20 50 4f 57 45 52 20 41 4e 44 20     DS.OF POWER AND 
     a8d:	57 49 4c 4c 20 53 55 52 45 4c 59 00 42 52 49 4e     WILL SURELY.BRIN
     a9d:	47 20 52 55 49 4e 20 54 4f 20 55 53 20 41 4c 4c     G RUIN TO US ALL
     aad:	00 00 44 45 53 54 52 4f 59 20 48 49 4d 20 41 4e     ..DESTROY HIM AN
     abd:	44 20 52 45 54 55 52 4e 20 54 48 45 00 45 4d 45     D RETURN THE.EME
     acd:	52 41 4c 44 53 20 54 4f 20 42 52 49 4e 47 20 50     RALDS TO BRING P
     add:	45 41 43 45 20 54 4f 00 54 48 45 20 47 41 4c 41     EACE TO.THE GALA
     aed:	58 59 00 23 00                                      XY.#.

00000af2 <default_scores>:
     af2:	55 5a 45 00 00 4c 4a 42 00 00 41 41 41 00 00 42     UZE..LJB..AAA..B
     b02:	42 42 00 00 43 43 43 00 00 44 44 44 00 00           BB..CCC..DDD..

00000b10 <strTally>:
     b10:	54 41 4c 4c 59 00                                   TALLY.

00000b16 <strGameOver>:
     b16:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

00000b20 <strLevelBonus>:
     b20:	42 4f 4e 55 53 00                                   BONUS.

00000b26 <strLevelClear>:
     b26:	4c 45 56 45 4c 20 43 4c 45 41 52 00                 LEVEL CLEAR.

00000b32 <strPaused>:
     b32:	50 41 55 53 45 00                                   PAUSE.

00000b38 <strExitGame>:
     b38:	58 20 45 58 49 54 20 47 41 4d 45 00                 X EXIT GAME.

00000b44 <strMainMenu>:
     b44:	58 20 4d 41 49 4e 20 4d 45 4e 55 00                 X MAIN MENU.

00000b50 <strTime>:
     b50:	54 49 4d 45 20 00                                   TIME .

00000b56 <strLives>:
     b56:	4c 49 56 45 53 20 00                                LIVES .

00000b5d <strShield>:
     b5d:	53 48 49 45 4c 44 20 00                             SHIELD .

00000b65 <strScore>:
     b65:	53 43 4f 52 45 20 00                                SCORE .

00000b6c <strSelectHandle>:
	...

00000b6d <strHighScores>:
     b6d:	48 49 47 48 20 53 43 4f 52 45 53 00                 HIGH SCORES.

00000b79 <str1Player>:
     b79:	53 54 41 52 54 00                                   START.

00000b7f <strMusic>:
     b7f:	4d 55 53 49 43 20 42 59 20 54 41 4e 4e 45 52 20     MUSIC BY TANNER 
     b8f:	48 45 4c 4c 41 4e 44 00                             HELLAND.

00000b97 <strCopyright>:
     b97:	32 30 31 36 20 4c 41 57 52 45 4e 43 45 20 42 52     2016 LAWRENCE BR
     ba7:	4f 4f 4b 53 00                                      OOKS.

00000bac <spacesong>:
     bac:	00 c0 00 00 c1 01 00 b0 07 7f 00 07 7f 00 90 43     ...............C
     bbc:	64 00 46 64 00 4b 64 00 4f 64 00 b1 07 74 00 91     d.Fd.Kd.Od...t..
     bcc:	33 64 00 ff 06 01 53 1d 91 33 64 0a 33 64 14 90     3d....S..3d.3d..
     bdc:	4b 64 00 46 64 00 43 64 00 91 33 64 27 33 64 14     Kd.Fd.Cd..3d'3d.
     bec:	90 46 64 00 43 64 00 4b 64 00 4f 64 00 91 33 64     .Fd.Cd.Kd.Od..3d
     bfc:	14 33 64 0a 90 41 64 00 4d 64 0a 41 64 00 46 64     .3d..Ad.Md.Ad.Fd
     c0c:	00 4a 64 00 4d 64 00 91 2e 64 1e 2e 64 09 2e 64     .Jd.Md...d..d..d
     c1c:	14 90 41 64 00 46 64 00 4a 64 00 91 2e 64 28 2e     ..Ad.Fd.Jd...d(.
     c2c:	64 14 90 41 64 00 46 64 00 4a 64 00 4d 64 00 91     d..Ad.Fd.Jd.Md..
     c3c:	2e 64 13 2e 64 0a 90 3f 64 00 4b 64 0a 3f 64 00     .d..d..?d.Kd.?d.
     c4c:	44 64 00 48 64 00 4b 64 00 91 2c 64 1e 2c 64 0a     Dd.Hd.Kd..,d.,d.
     c5c:	2c 64 14 90 41 64 00 46 64 00 4a 64 00 91 2c 64     ,d..Ad.Fd.Jd..,d
     c6c:	13 2e 64 14 90 46 64 00 91 2c 64 14 90 3f 64 00     ..d..Fd..,d..?d.
     c7c:	43 64 00 48 64 00 91 2e 64 14 30 64 14 90 43 64     Cd.Hd...d.0d..Cd
     c8c:	00 48 64 00 4b 64 00 4f 64 00 91 30 64 1d 30 64     .Hd.Kd.Od..0d.0d
     c9c:	0a 30 64 14 90 4b 64 00 48 64 00 43 64 00 91 30     .0d..Kd.Hd.Cd..0
     cac:	64 28 30 64 13 90 43 64 00 48 64 00 4b 64 00 4f     d(0d..Cd.Hd.Kd.O
     cbc:	64 00 91 30 64 14 30 64 0a 90 41 64 00 4d 64 0a     d..0d.0d..Ad.Md.
     ccc:	43 64 00 46 64 00 4b 64 00 4f 64 00 91 33 64 1e     Cd.Fd.Kd.Od..3d.
     cdc:	33 64 09 33 64 14 90 4b 64 00 46 64 00 43 64 00     3d.3d..Kd.Fd.Cd.
     cec:	91 33 64 28 33 64 14 90 46 64 00 43 64 00 4b 64     .3d(3d..Fd.Cd.Kd
     cfc:	00 4f 64 00 91 33 64 13 33 64 0a 90 41 64 00 4d     .Od..3d.3d..Ad.M
     d0c:	64 0a 41 64 00 46 64 00 4a 64 00 4d 64 00 91 2e     d.Ad.Fd.Jd.Md...
     d1c:	64 1e 2e 64 0a 2e 64 14 90 41 64 00 46 64 00 4a     d..d..d..Ad.Fd.J
     d2c:	64 00 91 2e 64 27 2e 64 14 90 41 64 00 46 64 00     d...d'.d..Ad.Fd.
     d3c:	4a 64 00 4d 64 00 91 2e 64 14 2e 64 0a 90 3f 64     Jd.Md...d..d..?d
     d4c:	00 4b 64 0a 3f 64 00 44 64 00 48 64 00 4b 64 00     .Kd.?d.Dd.Hd.Kd.
     d5c:	91 2c 64 1d 2c 64 0a 2c 64 14 90 41 64 00 46 64     .,d.,d.,d..Ad.Fd
     d6c:	00 4a 64 00 91 2c 64 14 2e 64 14 90 46 64 00 91     .Jd..,d..d..Fd..
     d7c:	2c 64 13 90 3f 64 00 43 64 00 48 64 00 91 30 64     ,d..?d.Cd.Hd..0d
     d8c:	14 30 64 14 90 48 64 00 91 2c 6e 14 2c 4b 06 90     .0d..Hd..,n.,K..
     d9c:	4a 64 0e 91 2c 4b 0d 90 4b 64 06 91 2c 6e 14 90     Jd..,K..Kd..,n..
     dac:	4d 64 00 91 2c 4b 14 2c 4b 07 90 4b 64 0d 91 2c     Md..,K.,K..Kd..,
     dbc:	6e 0d 90 4a 64 07 91 2c 4b 13 90 48 64 00 91 30     n..Jd..,K..Hd..0
     dcc:	6e 14 30 4b 07 90 4a 64 0d 91 30 4b 0d 90 46 64     n.0K..Jd..0K..Fd
     ddc:	07 91 30 6e 13 90 43 64 00 91 30 4b 14 30 4b 07     ..0n..Cd..0K.0K.
     dec:	90 46 64 0d 91 30 6e 0d 90 48 64 07 91 30 4b 14     .Fd..0n..Hd..0K.
     dfc:	90 48 64 00 91 2c 6e 13 2c 4b 07 90 4a 64 0d 91     .Hd..,n.,K..Jd..
     e0c:	2c 4b 0d 90 4b 64 07 91 2c 6e 14 90 4d 64 00 91     ,K..Kd..,n..Md..
     e1c:	2c 4b 14 2c 4b 06 90 4b 64 0d 91 2c 6e 0e 90 4d     ,K.,K..Kd..,n..M
     e2c:	64 06 91 2c 4b 14 90 4f 64 00 91 30 6e 14 30 4b     d..,K..Od..0n.0K
     e3c:	07 90 50 64 0d 91 30 4b 0e 90 4d 64 05 91 30 6e     ..Pd..0K..Md..0n
     e4c:	14 90 4f 64 00 91 30 4b 14 30 4b 07 90 4d 64 0d     ..Od..0K.0K..Md.
     e5c:	91 30 6e 0d 90 4b 64 07 91 30 4b 13 90 4d 64 00     .0n..Kd..0K..Md.
     e6c:	91 2b 6e 14 2b 4b 07 90 4f 64 0d 91 2b 4b 0d 90     .+n.+K..Od..+K..
     e7c:	4d 64 07 91 2b 6e 14 90 4b 64 00 91 2b 4b 13 2b     Md..+n..Kd..+K.+
     e8c:	4b 07 90 46 64 0d 91 2b 6e 0d 90 4b 64 07 91 2b     K..Fd..+n..Kd..+
     e9c:	4b 14 90 4d 64 00 91 2c 6e 13 2c 4b 07 90 50 64     K..Md..,n.,K..Pd
     eac:	0d 91 2c 4b 0d 90 4f 64 07 91 2c 6e 14 90 4d 64     ..,K..Od..,n..Md
     ebc:	00 91 2c 4b 14 2c 4b 06 90 48 64 0d 91 2c 6e 0e     ..,K.,K..Hd..,n.
     ecc:	90 4d 64 06 91 2c 4b 14 90 52 64 00 91 27 6e 0d     .Md..,K..Rd..'n.
     edc:	90 50 64 07 91 27 4b 06 90 4f 64 0e 50 64 00 91     .Pd..'K..Od.Pd..
     eec:	27 4b 0d 90 4f 64 06 91 27 6e 07 90 4d 64 0d 4b     'K..Od..'n..Md.K
     efc:	64 00 91 27 4b 14 27 4b 07 90 46 64 0d 91 27 6e     d..'K.'K..Fd..'n
     f0c:	0d 90 4b 64 07 91 27 4b 13 90 47 64 00 91 26 6e     ..Kd..'K..Gd..&n
     f1c:	14 26 4b 07 90 4a 64 0d 91 26 4b 0d 90 4f 64 07     .&K..Jd..&K..Od.
     f2c:	91 26 6e 14 90 53 64 00 91 26 4b 13 26 4b 07 90     .&n..Sd..&K.&K..
     f3c:	56 64 0d 91 26 6e 0d 90 5b 64 07 91 26 4b 14 90     Vd..&n..[d..&K..
     f4c:	3d 64 00 91 31 64 06 90 41 64 07 44 64 07 49 64     =d..1d..Ad.Dd.Id
     f5c:	06 4d 64 07 50 64 06 55 64 07 59 64 07 5c 64 06     .Md.Pd.Ud.Yd.\d.
     f6c:	59 64 07 55 64 06 50 64 07 4d 64 07 49 64 06 44     Yd.Ud.Pd.Md.Id.D
     f7c:	64 07 41 64 06 3d 64 07 38 64 07 3d 64 06 41 64     d.Ad.=d.8d.=d.Ad
     f8c:	07 44 64 06 49 64 07 44 64 07 41 64 06 43 64 00     .Dd.Id.Dd.Ad.Cd.
     f9c:	91 37 64 07 90 47 64 06 4a 64 07 4f 64 06 53 64     .7d..Gd.Jd.Od.Sd
     fac:	07 56 64 07 5b 64 06 5f 64 07 62 64 06 5f 64 07     .Vd.[d._d.bd._d.
     fbc:	5b 64 07 56 64 06 53 64 07 4f 64 06 4a 64 07 47     [d.Vd.Sd.Od.Jd.G
     fcc:	64 07 43 64 06 3e 64 07 43 64 06 47 64 07 4a 64     d.Cd.>d.Cd.Gd.Jd
     fdc:	07 4f 64 06 4a 64 07 47 64 06 46 64 00 91 3a 64     .Od.Jd.Gd.Fd..:d
     fec:	07 90 4a 64 07 4d 64 06 52 64 07 56 64 06 59 64     ..Jd.Md.Rd.Vd.Yd
     ffc:	07 5e 64 07 62 64 06 65 64 07 62 64 06 5e 64 07     .^d.bd.ed.bd.^d.
    100c:	59 64 07 56 64 06 52 64 07 4d 64 06 4a 64 07 46     Yd.Vd.Rd.Md.Jd.F
    101c:	64 07 41 64 06 46 64 07 4a 64 06 4d 64 07 52 64     d.Ad.Fd.Jd.Md.Rd
    102c:	07 4d 64 06 4a 64 07 54 7f 00 43 64 00 48 64 00     .Md.Jd.T..Cd.Hd.
    103c:	4b 64 00 4f 64 00 91 30 64 1d 30 64 0a 30 64 14     Kd.Od..0d.0d.0d.
    104c:	90 4b 64 00 48 64 00 43 64 00 91 30 64 28 30 64     .Kd.Hd.Cd..0d(0d
    105c:	14 90 43 64 00 48 64 00 4b 64 00 4f 64 00 91 30     ..Cd.Hd.Kd.Od..0
    106c:	64 13 30 64 0a 90 41 64 00 4d 64 0a 43 64 00 46     d.0d..Ad.Md.Cd.F
    107c:	64 00 4b 64 00 4f 64 00 91 33 64 1e 33 64 0a 33     d.Kd.Od..3d.3d.3
    108c:	64 14 90 4b 64 00 46 64 00 43 64 00 91 33 64 27     d..Kd.Fd.Cd..3d'
    109c:	33 64 14 90 46 64 00 43 64 00 4b 64 00 4f 64 00     3d..Fd.Cd.Kd.Od.
    10ac:	91 33 64 14 33 64 0a 90 41 64 00 4d 64 0a 41 64     .3d.3d..Ad.Md.Ad
    10bc:	00 46 64 00 4a 64 00 4d 64 00 91 2e 64 1d 2e 64     .Fd.Jd.Md...d..d
    10cc:	0a 2e 64 14 90 41 64 00 46 64 00 4a 64 00 91 2e     ..d..Ad.Fd.Jd...
    10dc:	64 27 2e 64 14 90 41 64 00 46 64 00 4a 64 00 4d     d'.d..Ad.Fd.Jd.M
    10ec:	64 00 91 2e 64 14 2e 64 0a 90 3f 64 00 4b 64 0a     d...d..d..?d.Kd.
    10fc:	3f 64 00 44 64 00 48 64 00 4b 64 00 91 2c 64 1e     ?d.Dd.Hd.Kd..,d.
    110c:	2c 64 09 2c 64 14 90 41 64 00 46 64 00 4a 64 00     ,d.,d..Ad.Fd.Jd.
    111c:	91 2c 64 14 2e 64 14 90 46 64 00 91 2c 64 14 90     .,d..d..Fd..,d..
    112c:	3f 64 00 43 64 00 48 64 00 91 2e 64 13 30 64 14     ?d.Cd.Hd...d.0d.
    113c:	90 43 64 00 48 64 00 4b 64 00 4f 64 00 91 30 64     .Cd.Hd.Kd.Od..0d
    114c:	1e 30 64 0a 30 64 14 90 4b 64 00 48 64 00 43 64     .0d.0d..Kd.Hd.Cd
    115c:	00 91 30 64 27 30 64 14 90 43 64 00 48 64 00 4b     ..0d'0d..Cd.Hd.K
    116c:	64 00 4f 64 00 91 30 64 14 30 64 0a 90 41 64 00     d.Od..0d.0d..Ad.
    117c:	4d 64 0a 43 64 00 46 64 00 4b 64 00 4f 64 00 91     Md.Cd.Fd.Kd.Od..
    118c:	33 64 1d 33 64 0a 33 64 14 90 4b 64 00 46 64 00     3d.3d.3d..Kd.Fd.
    119c:	43 64 00 91 33 64 28 33 64 13 90 46 64 00 43 64     Cd..3d(3d..Fd.Cd
    11ac:	00 4b 64 00 4f 64 00 91 33 64 14 33 64 0a 90 41     .Kd.Od..3d.3d..A
    11bc:	64 00 4d 64 0a 41 64 00 46 64 00 4a 64 00 4d 64     d.Md.Ad.Fd.Jd.Md
    11cc:	00 91 2e 64 1e 2e 64 09 2e 64 14 90 41 64 00 46     ...d..d..d..Ad.F
    11dc:	64 00 4a 64 00 91 2e 64 28 2e 64 14 90 41 64 00     d.Jd...d(.d..Ad.
    11ec:	46 64 00 4a 64 00 4d 64 00 91 2e 64 13 2e 64 0a     Fd.Jd.Md...d..d.
    11fc:	90 3f 64 00 4b 64 0a 3f 64 00 44 64 00 48 64 00     .?d.Kd.?d.Dd.Hd.
    120c:	4b 64 00 91 2c 64 1e 2c 64 0a 2c 64 14 90 41 64     Kd..,d.,d.,d..Ad
    121c:	00 46 64 00 4a 64 00 91 2c 64 13 2e 64 14 90 46     .Fd.Jd..,d..d..F
    122c:	64 00 91 2c 64 0f ff 06 01 45 05 90 3f 64 00 43     d..,d....E..?d.C
    123c:	64 00 48 64 00 91 30 64 14 30 64 81 0a ff 2f 00     d.Hd..0d.0d.../.

0000124c <planetsong>:
    124c:	00 c0 00 00 c1 01 00 b0 07 7f 00 b1 07 74 00 ff     .............t..
    125c:	06 01 53 1b 90 48 78 00 91 30 6e 07 90 43 55 00     ..S..Hx..0n..CU.
    126c:	91 30 50 07 90 48 55 00 91 30 50 07 90 4a 78 00     .0P..HU..0P..Jx.
    127c:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 48 55 00     .0n..KU..0P..HU.
    128c:	91 30 50 07 90 4a 78 00 91 30 6e 07 90 4b 55 00     .0P..Jx..0n..KU.
    129c:	91 30 50 07 90 4d 55 00 91 30 50 07 90 4a 78 00     .0P..MU..0P..Jx.
    12ac:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 4d 55 00     .0n..KU..0P..MU.
    12bc:	91 30 50 07 90 4f 78 00 91 30 6e 07 90 4b 55 00     .0P..Ox..0n..KU.
    12cc:	91 30 50 07 90 4d 78 00 91 2e 6e 07 90 4f 55 07     .0P..Mx...n..OU.
    12dc:	50 78 00 91 30 6e 06 90 4d 55 00 91 30 50 07 90     Px..0n..MU..0P..
    12ec:	4f 55 00 91 30 50 07 90 4b 78 00 91 30 6e 07 90     OU..0P..Kx..0n..
    12fc:	4d 55 00 91 30 50 07 90 4a 55 00 91 30 50 07 30     MU..0P..JU..0P.0
    130c:	6e 03 90 4b 78 04 48 55 00 91 30 50 07 90 4a 55     n..Kx.HU..0P..JU
    131c:	00 91 30 50 07 90 46 78 00 91 30 6e 07 90 4d 55     ..0P..Fx..0n..MU
    132c:	00 91 30 50 07 90 46 78 00 91 30 50 07 90 4f 55     ..0P..Fx..0P..OU
    133c:	00 91 30 6e 07 90 46 78 00 91 30 50 07 90 4d 55     ..0n..Fx..0P..MU
    134c:	00 91 2e 6e 07 90 46 78 07 48 55 00 91 30 6e 07     ...n..Fx.HU..0n.
    135c:	90 43 55 00 91 30 50 07 90 48 55 00 91 30 50 07     .CU..0P..HU..0P.
    136c:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    137c:	90 48 55 00 91 30 50 06 90 4a 55 00 91 30 6e 07     .HU..0P..JU..0n.
    138c:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 30 50 07     .KU..0P..MU..0P.
    139c:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    13ac:	90 4d 55 00 91 30 50 07 90 4f 55 00 91 30 6e 07     .MU..0P..OU..0n.
    13bc:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 2e 6e 07     .KU..0P..MU...n.
    13cc:	90 4f 55 07 50 55 00 91 30 6e 07 90 4d 55 00 91     .OU.PU..0n..MU..
    13dc:	30 50 07 90 4f 55 00 91 30 50 07 90 4b 55 00 91     0P..OU..0P..KU..
    13ec:	30 6e 07 90 4d 55 00 91 30 50 07 90 4a 55 00 91     0n..MU..0P..JU..
    13fc:	30 50 07 30 6e 02 90 4b 55 05 48 55 00 91 30 50     0P.0n..KU.HU..0P
    140c:	07 90 4a 55 00 91 30 50 07 90 46 55 00 91 30 6e     ..JU..0P..FU..0n
    141c:	06 90 4d 55 00 91 30 50 07 90 46 55 00 91 30 50     ..MU..0P..FU..0P
    142c:	07 90 4f 55 00 91 30 6e 07 90 46 55 00 91 30 50     ..OU..0n..FU..0P
    143c:	07 90 4d 55 00 91 2e 6e 07 90 46 55 07 48 78 00     ..MU...n..FU.Hx.
    144c:	91 2c 6e 07 90 43 55 00 91 2c 50 07 90 48 55 00     .,n..CU..,P..HU.
    145c:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
    146c:	91 2c 50 07 90 48 55 00 91 2c 50 07 90 4a 78 00     .,P..HU..,P..Jx.
    147c:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 55 00     .,n..KU..,P..MU.
    148c:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
    149c:	91 2c 50 07 90 4d 55 00 91 2c 50 07 90 4f 78 00     .,P..MU..,P..Ox.
    14ac:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 78 00     .,n..KU..,P..Mx.
    14bc:	91 2b 6e 06 90 4f 55 07 50 78 00 91 2c 6e 07 90     .+n..OU.Px..,n..
    14cc:	4d 55 00 91 2c 50 07 90 4f 55 00 91 2c 50 07 90     MU..,P..OU..,P..
    14dc:	4b 78 00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90     Kx..,n..MU..,P..
    14ec:	4a 55 00 91 2c 50 07 2c 6e 02 90 4b 78 05 48 55     JU..,P.,n..Kx.HU
    14fc:	00 91 2c 50 07 90 4a 55 00 91 2c 50 07 90 46 78     ..,P..JU..,P..Fx
    150c:	00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90 46 78     ..,n..MU..,P..Fx
    151c:	00 91 2c 50 07 90 4f 55 00 91 2c 6e 07 90 46 78     ..,P..OU..,n..Fx
    152c:	00 91 2c 50 07 90 4d 55 00 91 2b 6e 07 90 46 78     ..,P..MU..+n..Fx
    153c:	07 48 55 00 91 29 6e 07 90 43 55 00 91 29 50 07     .HU..)n..CU..)P.
    154c:	90 48 55 00 91 29 50 06 90 4a 55 00 91 29 6e 07     .HU..)P..JU..)n.
    155c:	90 4b 55 00 91 29 50 07 90 48 55 00 91 29 50 07     .KU..)P..HU..)P.
    156c:	90 4a 55 00 91 2b 6e 07 90 4b 55 00 91 2b 50 07     .JU..+n..KU..+P.
    157c:	90 4d 55 00 91 2b 50 07 90 4a 55 00 91 2b 6e 07     .MU..+P..JU..+n.
    158c:	90 4b 55 00 91 2b 50 07 90 4d 55 00 91 2b 50 07     .KU..+P..MU..+P.
    159c:	90 4f 55 00 91 2c 6e 07 90 4b 55 00 91 2c 50 07     .OU..,n..KU..,P.
    15ac:	90 4d 55 00 91 2c 6e 07 90 4f 55 07 50 55 00 91     .MU..,n..OU.PU..
    15bc:	2e 6e 07 90 4d 55 00 91 2e 50 07 90 4f 55 00 91     .n..MU...P..OU..
    15cc:	2e 50 07 90 4b 55 00 91 2e 6e 07 90 4d 55 00 91     .P..KU...n..MU..
    15dc:	2e 50 07 90 4a 55 00 91 2e 50 07 2e 6e 02 90 4b     .P..JU...P..n..K
    15ec:	55 05 48 55 00 91 2e 50 06 90 4a 55 00 91 2e 50     U.HU...P..JU...P
    15fc:	07 90 46 55 00 91 2e 6e 07 90 4d 55 00 91 2e 50     ..FU...n..MU...P
    160c:	07 90 46 55 00 91 2e 50 07 90 4f 55 00 91 2e 6e     ..FU...P..OU...n
    161c:	07 90 46 55 00 91 2e 50 07 90 4d 55 00 91 2e 6e     ..FU...P..MU...n
    162c:	07 90 46 55 07 48 55 00 91 30 6e 07 90 43 55 00     ..FU.HU..0n..CU.
    163c:	91 30 50 07 90 48 55 00 91 30 50 07 90 4a 55 00     .0P..HU..0P..JU.
    164c:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 48 55 00     .0n..KU..0P..HU.
    165c:	91 30 50 07 90 4a 55 00 91 30 6e 07 90 4b 55 00     .0P..JU..0n..KU.
    166c:	91 30 50 07 90 4d 55 00 91 30 50 07 90 4a 55 00     .0P..MU..0P..JU.
    167c:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 4d 55 00     .0n..KU..0P..MU.
    168c:	91 30 50 07 90 4f 55 00 91 30 6e 06 90 4b 55 00     .0P..OU..0n..KU.
    169c:	91 30 50 07 90 4d 55 00 91 2e 6e 07 90 4f 55 07     .0P..MU...n..OU.
    16ac:	50 55 00 91 30 6e 07 90 4d 55 00 91 30 50 07 90     PU..0n..MU..0P..
    16bc:	4f 55 00 91 30 50 07 90 4b 55 00 91 30 6e 07 90     OU..0P..KU..0n..
    16cc:	4d 55 00 91 30 50 07 90 4a 55 00 91 30 50 07 30     MU..0P..JU..0P.0
    16dc:	6e 02 90 4b 55 05 48 55 00 91 30 50 07 90 4a 55     n..KU.HU..0P..JU
    16ec:	00 91 30 50 07 90 46 55 00 91 30 6e 07 90 4d 55     ..0P..FU..0n..MU
    16fc:	00 91 30 50 07 90 46 55 00 91 30 50 07 90 4f 55     ..0P..FU..0P..OU
    170c:	00 91 30 6e 07 90 46 55 00 91 30 50 07 90 4d 55     ..0n..FU..0P..MU
    171c:	00 91 2e 6e 07 90 46 55 07 48 55 00 91 30 6e 06     ...n..FU.HU..0n.
    172c:	90 43 55 00 91 30 50 07 90 48 55 00 91 30 50 07     .CU..0P..HU..0P.
    173c:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    174c:	90 48 55 00 91 30 50 07 90 4a 55 00 91 30 6e 07     .HU..0P..JU..0n.
    175c:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 30 50 07     .KU..0P..MU..0P.
    176c:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    177c:	90 4d 55 00 91 30 50 07 90 4f 55 00 91 30 6e 07     .MU..0P..OU..0n.
    178c:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 2e 6e 07     .KU..0P..MU...n.
    179c:	90 4f 55 07 50 55 00 91 30 6e 07 90 4d 55 00 91     .OU.PU..0n..MU..
    17ac:	30 50 07 90 4f 55 00 91 30 50 07 90 4b 55 00 91     0P..OU..0P..KU..
    17bc:	30 6e 07 90 4d 55 00 91 30 50 07 90 4a 55 00 91     0n..MU..0P..JU..
    17cc:	30 50 06 30 6e 03 90 4b 55 04 48 55 00 91 30 50     0P.0n..KU.HU..0P
    17dc:	07 90 4a 55 00 91 30 50 07 90 46 55 00 91 30 6e     ..JU..0P..FU..0n
    17ec:	07 90 4d 55 00 91 30 50 07 90 46 55 00 91 30 50     ..MU..0P..FU..0P
    17fc:	07 90 4f 55 00 91 30 6e 07 90 46 55 00 91 30 50     ..OU..0n..FU..0P
    180c:	07 90 4d 55 00 91 2e 6e 07 90 46 55 07 48 78 00     ..MU...n..FU.Hx.
    181c:	91 2c 6e 07 90 43 55 00 91 2c 50 07 90 48 55 00     .,n..CU..,P..HU.
    182c:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
    183c:	91 2c 50 07 90 48 55 00 91 2c 50 07 90 4a 78 00     .,P..HU..,P..Jx.
    184c:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 55 00     .,n..KU..,P..MU.
    185c:	91 2c 50 07 90 4a 78 00 91 2c 6e 06 90 4b 55 00     .,P..Jx..,n..KU.
    186c:	91 2c 50 07 90 4d 55 00 91 2c 50 07 90 4f 78 00     .,P..MU..,P..Ox.
    187c:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 78 00     .,n..KU..,P..Mx.
    188c:	91 2b 6e 07 90 4f 55 07 50 78 00 91 2c 6e 07 90     .+n..OU.Px..,n..
    189c:	4d 55 00 91 2c 50 07 90 4f 55 00 91 2c 50 07 90     MU..,P..OU..,P..
    18ac:	4b 78 00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90     Kx..,n..MU..,P..
    18bc:	4a 55 00 91 2c 50 07 2c 6e 02 90 4b 78 05 48 55     JU..,P.,n..Kx.HU
    18cc:	00 91 2c 50 07 90 4a 55 00 91 2c 50 07 90 46 78     ..,P..JU..,P..Fx
    18dc:	00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90 46 78     ..,n..MU..,P..Fx
    18ec:	00 91 2c 50 07 90 4f 55 00 91 2c 6e 07 90 46 78     ..,P..OU..,n..Fx
    18fc:	00 91 2c 50 07 90 4d 55 00 91 2b 6e 06 90 46 78     ..,P..MU..+n..Fx
    190c:	07 48 55 00 91 29 6e 07 90 43 55 00 91 29 50 07     .HU..)n..CU..)P.
    191c:	90 48 55 00 91 29 50 07 90 4a 55 00 91 29 6e 07     .HU..)P..JU..)n.
    192c:	90 4b 55 00 91 29 50 07 90 48 55 00 91 29 50 07     .KU..)P..HU..)P.
    193c:	90 4a 55 00 91 2b 6e 07 90 4b 55 00 91 2b 50 07     .JU..+n..KU..+P.
    194c:	90 4d 55 00 91 2b 50 07 90 4a 55 00 91 2b 6e 07     .MU..+P..JU..+n.
    195c:	90 4b 55 00 91 2b 50 07 90 4d 55 00 91 2b 50 07     .KU..+P..MU..+P.
    196c:	90 4f 55 00 91 2c 6e 07 90 4b 55 00 91 2c 50 07     .OU..,n..KU..,P.
    197c:	90 4d 55 00 91 2c 6e 07 90 4f 55 07 50 55 00 91     .MU..,n..OU.PU..
    198c:	2e 6e 07 90 4d 55 00 91 2e 50 07 90 4f 55 00 91     .n..MU...P..OU..
    199c:	2e 50 07 90 4b 55 00 91 2e 6e 06 90 4d 55 00 91     .P..KU...n..MU..
    19ac:	2e 50 07 90 4a 55 00 91 2e 50 07 2e 6e 03 90 4b     .P..JU...P..n..K
    19bc:	55 04 48 55 00 91 2e 50 07 90 4a 55 00 91 2e 50     U.HU...P..JU...P
    19cc:	07 90 46 55 00 91 2e 6e 07 90 4d 55 00 91 2e 50     ..FU...n..MU...P
    19dc:	07 90 46 55 00 91 2e 50 07 90 4f 55 00 91 30 6e     ..FU...P..OU..0n
    19ec:	07 90 46 55 00 91 30 50 07 90 4d 55 00 91 2e 6e     ..FU..0P..MU...n
    19fc:	07 90 46 55 07 54 64 00 48 64 00 91 30 6e 07 30     ..FU.Td.Hd..0n.0
    1a0c:	50 07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e     P.0P.0n.0P.0P.0n
    1a1c:	07 30 50 06 30 50 07 30 6e 07 30 50 07 30 50 07     .0P.0P.0n.0P.0P.
    1a2c:	30 6e 07 30 50 07 2e 6e 0e 30 6e 07 30 50 07 30     0n.0P..n.0n.0P.0
    1a3c:	50 07 30 6e 07 30 50 07 30 50 07 30 6e 07 30 50     P.0n.0P.0P.0n.0P
    1a4c:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 06     .0P.0n.0P.0P.0n.
    1a5c:	30 50 07 2e 6e 0e 90 33 64 00 37 64 00 3c 64 00     0P..n..3d.7d.<d.
    1a6c:	91 30 6e 07 30 50 07 30 50 07 90 32 64 00 37 64     .0n.0P.0P..2d.7d
    1a7c:	00 3a 64 00 91 30 6e 07 30 50 07 30 50 07 90 33     .:d..0n.0P.0P..3
    1a8c:	64 00 37 64 00 3c 64 00 91 30 6e 07 30 50 07 30     d.7d.<d..0n.0P.0
    1a9c:	50 07 90 37 64 00 3a 64 00 3e 64 00 91 30 6e 07     P..7d.:d.>d..0n.
    1aac:	30 50 07 30 50 07 90 37 64 00 3c 64 00 3f 64 00     0P.0P..7d.<d.?d.
    1abc:	91 30 6e 07 30 50 07 90 37 64 00 3a 64 00 3e 64     .0n.0P..7d.:d.>d
    1acc:	00 91 30 6e 07 30 6e 07 90 3a 64 00 43 64 00 3f     ..0n.0n..:d.Cd.?
    1adc:	64 00 91 33 6e 06 33 50 07 33 50 07 33 6e 07 33     d..3n.3P.3P.3n.3
    1aec:	50 07 33 50 07 90 37 64 00 3a 64 00 3f 64 00 91     P.3P..7d.:d.?d..
    1afc:	33 6e 07 33 50 07 33 50 07 33 6e 07 33 50 07 33     3n.3P.3P.3n.3P.3
    1b0c:	50 07 90 3a 64 00 3f 64 00 43 64 00 91 33 6e 07     P..:d.?d.Cd..3n.
    1b1c:	33 50 07 33 6e 07 33 6e 07 90 41 64 00 3e 64 00     3P.3n.3n..Ad.>d.
    1b2c:	3a 64 00 91 2e 6e 07 2e 50 07 2e 50 07 2e 6e 07     :d...n..P..P..n.
    1b3c:	2e 50 07 2e 50 06 90 35 64 00 3a 64 00 3e 64 00     .P..P..5d.:d.>d.
    1b4c:	91 2e 6e 07 2e 50 07 2e 50 07 2e 6e 07 2e 50 07     ..n..P..P..n..P.
    1b5c:	2e 50 07 90 3a 64 00 3e 64 00 41 64 00 91 2e 6e     .P..:d.>d.Ad...n
    1b6c:	07 2e 50 07 2e 6e 07 2e 6e 07 90 37 64 00 3c 64     ..P..n..n..7d.<d
    1b7c:	00 3f 64 00 91 30 6e 07 30 50 07 30 50 07 30 6e     .?d..0n.0P.0P.0n
    1b8c:	07 30 50 07 30 50 07 30 6e 07 30 50 07 30 50 07     .0P.0P.0n.0P.0P.
    1b9c:	30 6e 06 30 50 07 30 50 07 30 6e 07 30 50 07 2e     0n.0P.0P.0n.0P..
    1bac:	6e 0e 30 6e 07 30 50 07 30 50 07 30 6e 07 30 50     n.0n.0P.0P.0n.0P
    1bbc:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 07     .0P.0n.0P.0P.0n.
    1bcc:	30 50 07 30 50 07 30 6e 07 30 50 07 2e 6e 0d 90     0P.0P.0n.0P..n..
    1bdc:	33 64 00 37 64 00 3c 64 00 91 30 6e 07 30 50 07     3d.7d.<d..0n.0P.
    1bec:	30 50 07 90 32 64 00 37 64 00 3a 64 00 91 30 6e     0P..2d.7d.:d..0n
    1bfc:	07 30 50 07 30 50 07 90 33 64 00 37 64 00 3c 64     .0P.0P..3d.7d.<d
    1c0c:	00 91 30 6e 07 30 50 07 30 50 07 90 37 64 00 3a     ..0n.0P.0P..7d.:
    1c1c:	64 00 3e 64 00 91 30 6e 07 30 50 07 30 50 07 90     d.>d..0n.0P.0P..
    1c2c:	37 64 00 3c 64 00 3f 64 00 91 30 6e 07 30 50 07     7d.<d.?d..0n.0P.
    1c3c:	90 37 64 00 3a 64 00 3e 64 00 91 2e 6e 0e 90 3a     .7d.:d.>d...n..:
    1c4c:	64 00 43 64 00 3f 64 00 91 33 6e 07 33 50 07 33     d.Cd.?d..3n.3P.3
    1c5c:	50 07 33 6e 06 33 50 07 33 50 07 90 37 64 00 3a     P.3n.3P.3P..7d.:
    1c6c:	64 00 3f 64 00 91 33 6e 07 33 50 07 33 50 07 33     d.?d..3n.3P.3P.3
    1c7c:	6e 07 33 50 07 33 50 07 90 3a 64 00 3f 64 00 43     n.3P.3P..:d.?d.C
    1c8c:	64 00 91 33 6e 07 33 50 07 32 6e 0e 90 41 64 00     d..3n.3P.2n..Ad.
    1c9c:	3e 64 00 3a 64 00 91 2e 6e 07 2e 50 07 2e 50 07     >d.:d...n..P..P.
    1cac:	2e 6e 07 2e 50 07 2e 50 07 90 35 64 00 3a 64 00     .n..P..P..5d.:d.
    1cbc:	3e 64 00 91 2e 6e 07 2e 50 06 2e 50 07 2e 6e 07     >d...n..P..P..n.
    1ccc:	2e 50 07 2e 50 07 90 3a 64 00 3e 64 00 41 64 00     .P..P..:d.>d.Ad.
    1cdc:	91 2e 6e 05 ff 06 01 45 02 91 2e 50 07 2c 6e 0e     ..n....E...P.,n.
    1cec:	90 37 64 00 3c 64 00 3f 64 00 91 30 6e 07 30 50     .7d.<d.?d..0n.0P
    1cfc:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 07     .0P.0n.0P.0P.0n.
    1d0c:	30 50 07 30 50 07 30 6e 07 30 50 07 30 50 07 ff     0P.0P.0n.0P.0P..
    1d1c:	2f 00                                               /.

00001d1e <my_patches>:
    1d1e:	00 00 00 95 1e 00 00 00 00 00 00 00 95 1e 00 00     ................
    1d2e:	00 00 00 00 00 84 1e 00 00 00 00 00 00 00 2e 1e     ................
    1d3e:	00 00 00 00 00 00 00 84 1e 00 00 00 00 00 00 00     ................
    1d4e:	5d 1d 00 00 00 00 00 00 00 5d 1d 00 00 00 00        ]........].....

00001d5d <explode>:
    1d5d:	00 07 7f 00 02 03 00 00 ff 00 08 41 01 04 04 01     ...........A....
    1d6d:	04 04 01 04 04 01 04 04 01 04 04 01 04 04 01 04     ................
    1d7d:	04 01 04 04 01 04 04 03 07 64 00 08 3c 01 04 04     .........d..<...
    1d8d:	01 04 04 01 04 04 01 04 04 01 04 04 01 04 04 01     ................
    1d9d:	04 04 01 04 04 01 04 04 03 07 50 00 08 37 01 04     ..........P..7..
    1dad:	04 01 04 04 01 04 04 01 04 04 01 04 04 01 04 04     ................
    1dbd:	01 04 04 01 04 04 01 04 04 03 07 32 00 08 32 01     ...........2..2.
    1dcd:	04 04 01 04 04 01 04 04 01 04 04 01 04 04 01 04     ................
    1ddd:	04 01 04 04 01 04 04 01 04 04 03 07 28 00 08 2d     ............(..-
    1ded:	01 04 04 01 04 04 01 04 04 01 04 04 01 04 04 01     ................
    1dfd:	04 04 01 04 04 01 04 04 01 04 04 03 07 14 00 08     ................
    1e0d:	28 01 04 04 01 04 04 01 04 04 01 04 04 01 04 04     (...............
    1e1d:	01 04 04 01 04 04 01 04 04 01 04 04 01 05 00 00     ................
    1e2d:	ff                                                  .

00001e2e <pshoot>:
    1e2e:	00 02 03 00 07 7f 00 08 50 01 04 06 01 04 06 01     ........P.......
    1e3e:	04 06 01 07 00 03 07 7f 00 08 50 01 04 06 01 04     ..........P.....
    1e4e:	06 01 04 06 01 07 00 03 08 50 00 07 20 01 04 06     .........P.. ...
    1e5e:	01 04 06 01 04 06 01 04 06 01 07 00 03 08 50 00     ..............P.
    1e6e:	07 0f 01 04 06 01 04 06 01 04 06 01 04 06 01 07     ................
    1e7e:	00 01 05 00 00 ff                                   ......

00001e84 <navigate>:
    1e84:	00 02 04 00 07 70 00 00 d8 00 08 3c 01 05 00 00     .....p.....<....
    1e94:	ff                                                  .

00001e95 <instrument>:
    1e95:	00 02 04 00 00 dd 00 ff                             ........

00001e9d <sprites_data>:
    1e9d:	fe fe fe fe fe fe fe 87 fe fe fe fe fe fe 87 87     ................
    1ead:	fe fe fe fe fe fe 87 87 fe fe fe fe 85 85 85 87     ................
    1ebd:	fe fe fe 85 87 87 87 85 fe fe 85 87 87 87 87 85     ................
    1ecd:	fe 85 87 87 87 85 85 87 85 87 87 85 85 87 87 87     ................
    1edd:	87 87 87 fe fe fe fe fe d2 d2 eb d2 fe fe fe fe     ................
    1eed:	87 d2 fd eb fe fe fe fe 87 87 eb d2 fe fe fe fe     ................
    1efd:	85 87 87 d2 fe fe fe fe 87 85 85 87 85 fe fe fe     ................
    1f0d:	87 ef 87 87 87 85 fe fe ef ff ef 87 87 85 fe fe     ................
    1f1d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 87     ................
    1f2d:	fe fe fe fe fe fe 87 87 fe fe fe fe fe fe 87 87     ................
    1f3d:	fe fe fe fe 85 85 85 87 fe fe fe 85 87 87 87 85     ................
    1f4d:	fe fe 85 87 87 87 87 85 fe 85 87 87 87 85 85 87     ................
    1f5d:	fe fe fe fe fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    1f6d:	d2 d2 eb d2 fe fe fe fe 87 d2 fd eb fe fe fe fe     ................
    1f7d:	87 87 eb d2 fe fe fe fe 85 87 87 d2 fe fe fe fe     ................
    1f8d:	87 85 85 87 85 fe fe fe 87 ef 87 87 87 85 fe fe     ................
    1f9d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1fad:	fe fe fe fe fe fe fe fe fe ba ba ba ba ba ba fe     ................
    1fbd:	ba bd bd bd bd bd bd ba fe ba ba ba ba ba ba fe     ................
    1fcd:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1fdd:	fe fe 46 46 46 46 46 46 fe a5 a5 a5 47 47 46 fe     ..FFFFFF....GGF.
    1fed:	fe 46 46 47 47 46 3f 3f 46 46 47 47 46 fe fe fe     .FFGGF??FFGGF...
    1ffd:	46 46 47 47 46 fe fe fe fe 46 46 47 47 3f 3f fe     FFGGF....FFGG??.
    200d:	fe a5 a5 a5 47 fe fe fe fe fe 46 46 46 46 fe fe     ....G.....FFFF..
    201d:	fe fe fe 07 fe fe fe fe fe fe 07 07 07 fe fe fe     ................
    202d:	fe 07 07 27 07 07 fe fe 07 07 27 77 27 07 07 fe     ...'......'w'...
    203d:	fe 07 07 27 07 07 fe fe fe fe 07 07 07 fe fe fe     ...'............
    204d:	fe fe fe 07 fe fe fe fe fe fe fe fe fe fe fe fe     ................
    205d:	fe fe fe d2 fe fe fe fe fe fe d2 d2 d2 fe fe fe     ................
    206d:	fe d2 d2 e4 d2 d2 fe fe d2 d2 e4 f5 e4 d2 d2 fe     ................
    207d:	fe d2 d2 e4 d2 d2 fe fe fe fe d2 d2 d2 fe fe fe     ................
    208d:	fe fe fe d2 fe fe fe fe fe fe fe fe fe fe fe fe     ................
    209d:	fe fe fe 38 fe fe fe fe fe fe 38 38 38 fe fe fe     ...8......888...
    20ad:	fe 38 38 bc 38 38 fe fe 38 38 bc be bc 38 38 fe     .88.88..88...88.
    20bd:	fe 38 38 bc 38 38 fe fe fe fe 38 38 38 fe fe fe     .88.88....888...
    20cd:	fe fe fe 38 fe fe fe fe fe fe fe fe fe fe fe fe     ...8............
    20dd:	fe fe fe a2 fe fe fe fe fe fe a2 a2 a2 fe fe fe     ................
    20ed:	fe a2 a2 aa a2 a2 fe fe a2 a2 aa ad aa a2 a2 fe     ................
    20fd:	fe a2 a2 aa a2 a2 fe fe fe fe a2 a2 a2 fe fe fe     ................
    210d:	fe fe fe a2 fe fe fe fe fe fe fe fe fe fe fe fe     ................
    211d:	fe fe fe 6e fe fe fe fe fe fe 6e 6e 6e fe fe fe     ...n......nnn...
    212d:	fe 6e 6e 6f 6e 6e fe fe 6e 6e 6f 77 6f 6e 6e fe     .nnonn..nnowonn.
    213d:	fe 6e 6e 6f 6e 6e fe fe fe fe 6e 6e 6e fe fe fe     .nnonn....nnn...
    214d:	fe fe fe 6e fe fe fe fe fe fe fe fe fe fe fe fe     ...n............
    215d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    216d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    217d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    218d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    219d:	85 87 87 85 fe 85 87 87 fe 85 87 85 fe 85 87 87     ................
    21ad:	fe 85 87 87 ad ad ad ad fe fe 85 87 ad ad ad ad     ................
    21bd:	fe fe 85 87 ad ad ad ad fe fe fe 85 a4 ad 87 87     ................
    21cd:	fe fe fe fe a4 a4 85 87 fe fe fe fe a4 a4 85 87     ................
    21dd:	87 ef 87 85 87 85 fe fe 87 87 87 85 87 87 85 fe     ................
    21ed:	ad ad ad ad ad 87 85 fe ad ad ad ad ad ad a4 ad     ................
    21fd:	ad ad ad ad ad a4 a4 a4 87 87 87 85 fe fe fe fe     ................
    220d:	87 87 87 85 fe fe fe fe 87 87 87 85 fe fe fe fe     ................
    221d:	87 ef 87 85 87 85 fe fe 87 87 87 85 87 87 85 fe     ................
    222d:	ad ad ad ad ad 87 85 fe ad ad ad ad ad ad a4 ad     ................
    223d:	ad ad ad ad ad a4 a4 a4 87 87 87 85 fe fe fe fe     ................
    224d:	87 87 87 85 fe fe fe fe 87 87 85 fe fe fe fe fe     ................
    225d:	85 87 87 85 85 87 87 87 85 87 87 85 fe 85 87 87     ................
    226d:	fe 85 87 85 fe 85 87 87 fe 85 87 87 ad ad ad ad     ................
    227d:	fe fe 85 87 ad ad ad ad fe fe 85 87 ad ad ad ad     ................
    228d:	fe fe fe 85 a4 ad 87 87 fe fe fe fe a4 a4 85 87     ................
    229d:	ef ff ef 87 87 85 fe fe 87 ef 87 85 87 85 fe fe     ................
    22ad:	87 87 87 85 87 87 85 fe ad ad ad ad ad 87 85 fe     ................
    22bd:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    22cd:	87 87 87 87 fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    22dd:	87 ef 87 85 87 85 fe fe 87 87 87 85 87 87 85 fe     ................
    22ed:	ad ad ad ad ad 87 85 fe ad ad ad ad ad ad a4 ad     ................
    22fd:	ad ad ad ad ad a4 a4 a4 87 87 87 87 fe fe fe fe     ................
    230d:	87 87 87 87 fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    231d:	ef ff ef 87 87 85 fe fe 87 ef 87 85 87 85 fe fe     ................
    232d:	87 87 87 85 87 87 85 fe ad ad ad ad ad 87 85 fe     ................
    233d:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    234d:	87 87 87 87 fe fe fe fe 87 87 87 87 87 fe fe fe     ................
    235d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    236d:	fe fe fe 27 07 fe fe fe fe fe 27 77 27 07 fe fe     ...'......'w'...
    237d:	fe fe 07 27 07 07 fe fe fe fe fe 07 07 fe fe fe     ...'............
    238d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    239d:	fe fe fe fe fe fe 85 87 fe fe fe fe fe fe 85 87     ................
    23ad:	fe fe fe fe fe 85 87 87 fe fe fe fe fe 85 87 87     ................
    23bd:	fe fe fe fe 85 87 87 fe fe fe fe fe 85 87 87 fe     ................
    23cd:	fe fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4     ................
    23dd:	87 fe 85 85 fe fe fe fe 87 fe 85 85 85 fe fe fe     ................
    23ed:	fe fe 85 85 85 fe fe fe fe fe 85 85 85 fe fe fe     ................
    23fd:	fe fe 85 85 85 fe fe fe fe fe 85 85 85 fe fe fe     ................
    240d:	fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe     ................
    241d:	fe fe fe fe fe fe fe 85 fe fe fe fe fe fe fe 85     ................
    242d:	fe fe fe fe fe 85 85 87 fe fe fe fe 85 87 87 87     ................
    243d:	fe fe fe a4 87 87 87 87 fe fe fe a4 87 87 87 fe     ................
    244d:	fe fe fe a4 a4 fe fe fe fe fe fe a4 a4 a4 fe fe     ................
    245d:	87 87 87 fe fe fe fe fe 87 87 87 87 fe fe fe fe     ................
    246d:	87 87 87 87 fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    247d:	87 85 85 fe fe fe fe fe 85 85 85 fe fe fe fe fe     ................
    248d:	a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe fe fe     ................
    249d:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 85 85     ................
    24ad:	fe fe fe fe 85 85 85 85 a4 a4 85 85 85 85 85 fe     ................
    24bd:	a4 a4 85 85 85 85 85 fe a4 a4 85 85 85 85 fe fe     ................
    24cd:	a4 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    24dd:	87 87 87 fe fe fe fe fe fe 85 87 87 fe fe fe fe     ................
    24ed:	fe 85 87 87 87 fe fe fe fe fe 85 87 87 fe fe fe     ................
    24fd:	fe fe 85 87 87 87 fe fe fe fe fe 85 87 87 fe fe     ................
    250d:	fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe     ................
    251d:	fe fe fe fe fe fe fe 85 fe fe fe fe fe fe fe 85     ................
    252d:	fe fe fe fe fe 85 85 85 fe fe fe fe 85 85 85 85     ................
    253d:	fe fe fe a4 85 85 85 85 fe fe fe a4 85 85 85 fe     ................
    254d:	fe fe fe a4 a4 fe fe fe fe fe fe a4 a4 a4 fe fe     ................
    255d:	87 87 87 fe fe fe fe fe 85 87 87 85 fe fe fe fe     ................
    256d:	85 87 87 85 fe fe fe fe 85 87 87 fe fe fe fe fe     ................
    257d:	85 87 87 fe fe fe fe fe 85 87 87 fe fe fe fe fe     ................
    258d:	a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe fe fe     ................
    259d:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 85 85     ................
    25ad:	fe fe fe fe 85 85 85 85 a4 a4 85 85 85 85 a4 a4     ................
    25bd:	a4 a4 85 85 85 85 a4 a4 a4 a4 85 85 85 85 a4 a4     ................
    25cd:	a4 fe fe fe fe fe a4 fe fe fe fe fe fe fe fe fe     ................
    25dd:	87 87 85 87 87 fe fe fe fe fe 85 87 87 87 fe fe     ................
    25ed:	fe fe 85 87 87 87 fe fe 85 85 85 87 87 fe fe fe     ................
    25fd:	87 87 87 87 87 fe fe fe 87 87 87 87 fe fe fe fe     ................
    260d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    261d:	fe fe fe fe fe fe fe fe fe fe 12 12 12 12 fe fe     ................
    262d:	ad 12 0f 1f 1f 0f 12 ad ad 12 12 12 12 12 12 ad     ................
    263d:	ad ad 12 12 12 12 ad ad ad 12 ad 12 12 ad 12 ad     ................
    264d:	ad fe 12 12 12 12 fe ad ad fe fe fe fe fe fe ad     ................
    265d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 7f     ................
    266d:	fe fe fe fe fe 7f 7f 7f fe fe fe fe 7f 7f 7f 7f     ................
    267d:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe fe fe     ................
    268d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    269d:	a4 fe fe fe fe fe fe fe a4 ad fe fe ff ff a4 ad     ................
    26ad:	a4 ad f6 ff ff a4 ad f6 a4 ad f6 ff a4 ad f6 ff     ................
    26bd:	a4 ad fe fe a4 ad f6 ff a4 fe fe a4 a4 ad f6 fe     ................
    26cd:	fe fe fe a4 a4 ad f6 f6 fe fe fe fe fe fe fe fe     ................
    26dd:	fe fe fe fe fe fe fe fe f6 ff ff ff d2 fe fe fe     ................
    26ed:	ff ff ff ff d2 eb fe fe ff fe ff ff eb fd d2 fe     ................
    26fd:	fe fe fe ff d2 eb d2 d2 fe fe fe fe fe fe fe fe     ................
    270d:	f6 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    271d:	fe fe bf 7f 7f bf fe fe fe 7f 7f 7f 7f 7f 7f fe     ................
    272d:	bf 7f 7f 7f 7f 7f 7f bf 7f 7f 7f 7f 7f 7f 7f 7f     ................
    273d:	7f 7f 7f 7f 7f 7f 7f 7f bf 7f 7f 7f 7f 7f 7f bf     ................
    274d:	fe 7f 7f 7f 7f 7f 7f fe fe fe bf 7f 7f bf fe fe     ................
    275d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    276d:	fe fe fe 7f 7f fe fe fe fe fe 7f 7f 7f 7f fe fe     ................
    277d:	fe fe 7f 7f 7f 7f fe fe fe fe fe 7f 7f fe fe fe     ................
    278d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    279d:	fe fe bf 7f 7f bf fe fe fe 7f 7f 7f 7f 7f 7f fe     ................
    27ad:	bf 7f fe fe 7f 7f 7f bf 7f fe fe fe fe 7f 7f 7f     ................
    27bd:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe 7f bf     ................
    27cd:	fe fe fe fe fe fe 7f fe fe fe fe fe fe bf fe fe     ................
    27dd:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    27ed:	fe fe fe fe fe fe fe fe fe fe fe e3 fe fe fe fe     ................
    27fd:	fe fe fe ff fe fe fe fe fe fe fe fe fe fe fe fe     ................
    280d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    281d:	fe fe fe fe fe fe fe fe fe fe fe fe ff fe fe fe     ................
    282d:	fe fe fe fe 7f ff fe fe fe fe fe fe 7f 7f ff fe     ................
    283d:	fe fe fe fe 7f 7f 7f ff fe fe fe fe 7f 7f 7f fe     ................
    284d:	fe fe fe fe 7f 7f fe fe fe fe fe fe 7f fe fe fe     ................
    285d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    286d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    287d:	7f 7f 7f 7f 7f 7f ff fe fe 7f 7f 7f 7f ff fe fe     ................
    288d:	fe fe 7f 7f ff fe fe fe fe fe fe fe fe fe fe fe     ................
    289d:	fe fe fe ff fe fe fe fe fe fe ff 7f 7f fe fe fe     ................
    28ad:	fe ff 7f 7f 7f 7f fe fe ff 7f 7f 7f 7f 7f 7f fe     ................
    28bd:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    28cd:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    28dd:	fe fe 12 12 12 12 fe fe fe 12 0f 1f 1f 0f 12 fe     ................
    28ed:	ad 12 12 12 12 12 12 ad ad 12 ad 12 12 ad 12 ad     ................
    28fd:	ad ad 12 12 12 12 ad ad ad fe 12 12 12 12 fe ad     ................
    290d:	ad fe fe fe fe fe fe ad ad fe fe fe fe fe fe ad     ................
    291d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 7f     ................
    292d:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe fe 7f     ................
    293d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    294d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    295d:	a4 fe fe fe fe fe fe fe a4 a4 fe fe fe fe fe fe     ................
    296d:	a4 a4 ad fe fe fe fe fe a4 a4 ad ad fe fe fe fe     ................
    297d:	a4 a4 ad ad f6 fe fe fe a4 a4 ad ad f6 f6 ff ff     ................
    298d:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    299d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    29ad:	fe fe ff ff ff ff a4 a4 fe ff ff ff ff a4 a4 a4     ................
    29bd:	ff ff ff ff ff a4 a4 a4 ff ff ff ff a4 a4 a4 ad     ................
    29cd:	ff ff ff ff a4 a4 ad ad ff ff ff a4 a4 ad ad f6     ................
    29dd:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    29ed:	a4 ad ad f6 f6 ff ff ff a4 ad ad f6 f6 ff ff ff     ................
    29fd:	ad ad f6 f6 ff ff ff ff ad f6 f6 ff ff ff ff ff     ................
    2a0d:	f6 f6 ff ff ff ff ff ff f6 ff ff 7f 7f ff ff ff     ................
    2a1d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2a2d:	d2 fe fe fe fe fe fe fe d2 d2 fe fe fe fe fe fe     ................
    2a3d:	d2 d2 d2 fe fe fe fe fe d2 d3 eb d3 fe fe fe fe     ................
    2a4d:	d2 eb fd eb d2 fe fe fe d2 d3 eb d3 d2 d2 fe fe     ................
    2a5d:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    2a6d:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 7f 7f fe     ................
    2a7d:	a4 a4 ad ad 7f 7f 7f fe a4 a4 ad fe fe 7f fe fe     ................
    2a8d:	a4 a4 fe fe fe fe fe fe a4 fe fe fe fe fe fe fe     ................
    2a9d:	ff ff fe a4 ad ad f6 f6 ff fe a4 a4 ad ad f6 f6     ................
    2aad:	fe fe a4 a4 ad ad f6 f6 fe a4 a4 a4 ad ad f6 f6     ................
    2abd:	fe a4 a4 a4 a4 ad ad f6 a4 a4 a4 a4 a4 a4 ad ad     ................
    2acd:	a4 a4 a4 a4 a4 a4 a4 ad a4 a4 a4 a4 a4 a4 a4 a4     ................
    2add:	ff ff 7f 7f 7f 7f ff ff ff fe 7f 7f 7f 7f fe ff     ................
    2aed:	fe fe 7f 7f 7f fe fe fe fe fe fe 7f fe fe fe fe     ................
    2afd:	f6 fe fe fe fe fe fe fe f6 f6 fe fe fe fe fe fe     ................
    2b0d:	ad f6 f6 fe fe fe fe fe ad ad f6 f6 fe fe fe fe     ................
    2b1d:	d2 d2 d2 d2 d2 d2 d2 fe ff ff ff ff ff ff ff ff     ................
    2b2d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2b3d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2b4d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2b5d:	ef ff ef 87 87 85 fe fe 87 ef 87 85 87 85 fe fe     ................
    2b6d:	87 87 87 85 87 87 85 fe ad ad ad ad ad 87 85 fe     ................
    2b7d:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    2b8d:	87 87 87 85 fe fe fe fe 87 87 85 fe fe fe fe fe     ................
    2b9d:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 87 87     ................
    2bad:	fe fe fe fe 85 87 87 87 a4 a4 85 85 85 87 87 fe     ................
    2bbd:	a4 a4 87 87 87 87 87 fe a4 a4 87 87 87 87 fe fe     ................
    2bcd:	a4 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2bdd:	87 87 85 fe fe fe fe fe fe 85 85 85 fe fe fe fe     ................
    2bed:	fe 85 85 85 85 fe fe fe fe fe 85 85 85 fe fe fe     ................
    2bfd:	fe fe 85 85 85 85 fe fe fe fe fe 85 85 85 fe fe     ................
    2c0d:	fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe     ................
    2c1d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2c2d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2c3d:	fe fe fe fe fe fe fe fe fe fe fe fe fe 85 85 85     ................
    2c4d:	fe a4 87 87 87 87 87 87 a4 a4 87 87 87 87 87 87     ................
    2c5d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 87     ................
    2c6d:	fe fe fe fe 85 85 85 87 fe fe fe 85 87 87 87 85     ................
    2c7d:	fe fe 85 85 87 87 87 87 85 85 85 85 85 87 87 ad     ................
    2c8d:	87 87 87 87 ad 85 87 87 87 87 87 87 ad ad a4 a4     ................
    2c9d:	87 87 87 87 fe fe fe fe 87 d2 d2 eb d2 fe fe fe     ................
    2cad:	87 87 d2 fd eb fe fe fe 87 87 87 eb d2 fe fe fe     ................
    2cbd:	85 85 87 87 d2 fe fe fe ad ad ad ad ad 87 ef fe     ................
    2ccd:	ad ad ad ad ad ad a4 ad a4 ad ad ad ad a4 a4 a4     ................
    2cdd:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    2ced:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 7f 7f 7f     ................
    2cfd:	a4 a4 ad ad 7f 7f 7f fe a4 a4 ad fe 7f 7f 7f fe     ................
    2d0d:	a4 a4 fe fe fe 7f fe fe a4 fe fe fe fe fe fe fe     ................
    2d1d:	ff ff 7f 7f 7f 7f ff ff ff 7f 7f 7f 7f 7f 7f ff     ................
    2d2d:	fe fe 7f 7f 7f 7f fe fe fe fe 7f 7f 7f fe fe fe     ................
    2d3d:	f6 fe fe 7f fe fe fe fe f6 f6 fe fe fe fe fe fe     ................
    2d4d:	ad f6 f6 fe fe fe fe fe ad ad f6 f6 fe fe fe fe     ................

00002d5d <map_enemy_spider_1>:
    2d5d:	01 01 29                                            ..)

00002d60 <map_enemy_spider_0>:
    2d60:	01 01 1e                                            ...

00002d63 <map_enemy_shark>:
    2d63:	01 01 05                                            ...

00002d66 <map_enemy_shot>:
    2d66:	01 01 13                                            ...

00002d69 <map_hero_shot>:
    2d69:	01 01 04                                            ...

00002d6c <map_hero_ship_large_1>:
    2d6c:	04 02 2b 2c 2d 2e 39 30 3a 32                       ..+,-.90:2

00002d76 <map_hero_ship_large_0>:
    2d76:	04 02 2b 2c 2d 2e 2f 30 31 32                       ..+,-./012

00002d80 <map_hero_ship_1>:
    2d80:	03 01 2a 20 21                                      ..* !

00002d85 <map_hero_ship_0>:
    2d85:	03 01 1f 20 21                                      ... !

00002d8a <map_hero_prone>:
    2d8a:	03 01 36 37 38                                      ..678

00002d8f <map_hero_jump>:
    2d8f:	02 03 02 03 0f 12 1c 1d                             ........

00002d97 <map_hero_step_3>:
    2d97:	02 03 02 03 0f 33 34 35                             .....345

00002d9f <map_hero_step_2>:
    2d9f:	02 03 00 01 0c 11 1a 1b                             ........

00002da7 <map_hero_step_1>:
    2da7:	02 03 02 03 0f 10 18 19                             ........

00002daf <map_hero_step_0>:
    2daf:	02 03 00 01 0c 0e 16 17                             ........

00002db7 <map_hero_idle>:
    2db7:	02 03 00 01 0c 0d 14 15                             ........

00002dbf <map_emerald_4>:
    2dbf:	01 01 0a                                            ...

00002dc2 <map_emerald_3>:
    2dc2:	01 01 09                                            ...

00002dc5 <map_emerald_2>:
    2dc5:	01 01 08                                            ...

00002dc8 <map_emerald_0>:
    2dc8:	01 01 07                                            ...

00002dcb <map_emerald_1>:
    2dcb:	01 01 06                                            ...

00002dce <map_explosion_2>:
    2dce:	01 01 24                                            ..$

00002dd1 <map_explosion_1>:
    2dd1:	01 01 23                                            ..#

00002dd4 <map_explosion_0>:
    2dd4:	01 01 22                                            .."

00002dd7 <map_particle>:
    2dd7:	01 01 25                                            ..%

00002dda <map_up_arrow>:
    2dda:	01 01 28                                            ..(

00002ddd <map_down_arrow>:
    2ddd:	01 01 27                                            ..'

00002de0 <map_right_arrow>:
    2de0:	01 01 26                                            ..&

00002de3 <map_none>:
    2de3:	01 01 0b                                            ...

00002de6 <map_level_space>:
    2de6:	01 20 01 1a 0f 00 01 12 0f 00 01 13 07 00 01 12     . ..............
    2df6:	0f 00 01 13 18 00 01 12 0b 00 01 12 06 00 01 12     ................
    2e06:	05 00 01 13 0b 00 01 12 08 00 12 00 01 12 0d 00     ................
    2e16:	01 13 0c 00 01 12 0c 00 01 12 0c 00 01 12 0d 00     ................
    2e26:	01 13 0e 00 01 13 0d 00 01 12 0c 00 01 12 0d 00     ................
    2e36:	01 12 0b 00 01 12 1b 00 01 12 0e 00 01 12 03 00     ................
    2e46:	01 12 08 00 01 13 1c 00 01 13 0e 00 01 12 02 00     ................
    2e56:	0d 00 01 12 04 00 01 12 06 00 01 12 09 00 01 13     ................
    2e66:	12 00 01 12 0f 00 01 12 08 00 01 13 11 00 01 12     ................
    2e76:	13 00 01 13 05 00 01 12 04 00 0b 00 01 13 14 00     ................
    2e86:	01 12 0e 00 01 12 02 00 01 12 05 00 01 12 0e 00     ................
    2e96:	01 12 15 00 01 13 0c 00 01 12 0d 00 01 13 07 00     ................
    2ea6:	04 00 01 13 0a 00 01 12 0b 00 01 12 18 00 01 12     ................
    2eb6:	01 13 11 00 01 12 19 00 01 13 16 00 01 12 07 00     ................
    2ec6:	0b 00 01 13 13 00 01 12 02 00 01 12 09 00 01 12     ................
    2ed6:	15 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................

00002ee6 <map_level_desert>:
    2ee6:	01 ff 01 1a 76 06 08 04 00 00 00 00 00 00 00 00     ....v...........
	...
    2f06:	24 04 5c 06 00 00 00 00 00 00 00 00 00 00 00 00     $.\.............
	...
    2f26:	06 06 01 08 65 06 01 08 0a 06 09 04 00 00 00 00     ....e...........
	...
    2f46:	23 04 2f 06 01 08 2d 06 00 00 00 00 00 00 00 00     #./...-.........
	...
    2f66:	76 06 0a 04 00 00 00 00 00 00 00 00 00 00 00 00     v...............
	...
    2f86:	22 04 5e 06 00 00 00 00 00 00 00 00 00 00 00 00     ".^.............
	...
    2fa6:	1c 06 01 08 21 06 01 08 36 06 0b 04 00 00 00 00     ....!...6.......
	...
    2fc6:	21 04 27 06 01 08 24 06 01 08 12 06 00 00 00 00     !.'...$.........
	...
    2fe6:	2e 06 01 08 33 06 01 08 11 06 0c 04 00 00 00 00     ....3...........
	...
    3006:	20 04 60 06 00 00 00 00 00 00 00 00 00 00 00 00      .`.............
	...
    3026:	4c 06 01 08 26 06 0d 04 00 00 00 00 00 00 00 00     L...&...........
	...
    3046:	1f 04 13 06 01 08 1d 06 01 08 2f 06 00 00 00 00     ........../.....
	...
    3066:	08 06 01 08 69 06 0e 04 00 00 00 00 00 00 00 00     ....i...........
	...
    3086:	1e 04 62 06 00 00 00 00 00 00 00 00 00 00 00 00     ..b.............
	...
    30a6:	71 06 0f 04 00 00 00 00 00 00 00 00 00 00 00 00     q...............
	...
    30c6:	1d 04 5d 06 06 05 00 00 00 00 00 00 00 00 00 00     ..].............
	...
    30e6:	70 05 10 04 00 00 00 00 00 00 00 00 00 00 00 00     p...............
	...
    3106:	1c 04 0d 05 08 02 48 05 07 07 00 00 00 00 00 00     ......H.........
	...
    3126:	6f 07 11 04 00 00 00 00 00 00 00 00 00 00 00 00     o...............
	...
    3146:	1b 04 0d 07 08 09 50 07 00 00 00 00 00 00 00 00     ......P.........
	...
    3166:	6e 07 12 09 00 00 00 00 00 00 00 00 00 00 00 00     n...............
	...
    3186:	1a 09 66 07 00 00 00 00 00 00 00 00 00 00 00 00     ..f.............
	...
    31a6:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    31c6:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    31e6:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3206:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3226:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3246:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3266:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3286:	2a 07 02 02 08 0a 4c 07 00 00 00 00 00 00 00 00     *.....L.........
	...
    32a6:	21 07 08 02 57 07 00 00 00 00 00 00 00 00 00 00     !...W...........
	...
    32c6:	29 07 0a 04 4d 07 00 00 00 00 00 00 00 00 00 00     )...M...........
	...
    32e6:	1f 07 01 02 08 04 02 02 56 07 00 00 00 00 00 00     ........V.......
	...
    3306:	28 07 0a 09 4e 07 00 00 00 00 00 00 00 00 00 00     (...N...........
	...
    3326:	1d 07 01 02 0b 04 02 02 55 07 00 00 00 00 00 00     ........U.......
	...
    3346:	19 07 08 02 13 07 08 02 3f 07 01 4c 04 07 00 00     ........?..L....
	...
    3366:	1b 07 01 02 0e 04 01 02 1a 07 01 4c 3a 07 00 00     ...........L:...
	...
    3386:	18 07 08 09 13 07 08 09 05 07 01 4c 39 07 01 4d     ...........L9..M
    3396:	01 4e 01 4f 03 07 00 00 00 00 00 00 00 00 00 00     .N.O............
    33a6:	15 07 05 02 10 04 01 02 19 07 01 4d 01 4e 01 4f     ...........M.N.O
    33b6:	20 07 12 02 06 0a 01 02 00 00 00 00 00 00 00 00      ...............
    33c6:	01 02 06 0a 02 02 06 0a 30 07 01 4d 01 4e 01 4f     ........0..M.N.O
    33d6:	35 07 01 4f 01 4e 01 50 06 07 00 00 00 00 00 00     5..O.N.P........
    33e6:	13 07 01 02 16 04 01 02 16 07 01 4f 01 4e 01 50     ...........O.N.P
    33f6:	21 07 01 02 1a 04 00 00 00 00 00 00 00 00 00 00     !...............
    3406:	0e 04 01 02 2d 07 01 4f 01 4e 01 50 39 07 01 50     ....-..O.N.P9..P
    3416:	01 4f 01 4e 05 07 00 00 00 00 00 00 00 00 00 00     .O.N............
    3426:	11 07 01 02 18 04 01 02 17 07 01 50 01 4f 01 4e     ...........P.O.N
    3436:	1e 07 01 02 1c 04 00 00 00 00 00 00 00 00 00 00     ................
    3446:	0e 04 01 02 2e 07 01 50 01 4f 01 4e 35 07 01 4e     .......P.O.N5..N
    3456:	01 4f 01 50 08 07 00 00 00 00 00 00 00 00 00 00     .O.P............
    3466:	0f 07 01 02 1a 04 01 02 14 07 01 4e 01 4f 01 50     ...........N.O.P
    3476:	1f 07 01 02 1e 04 00 00 00 00 00 00 00 00 00 00     ................
    3486:	0e 04 01 02 2b 07 01 4e 01 4f 01 50 39 07 01 51     ....+..N.O.P9..Q
    3496:	09 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    34a6:	0d 07 01 02 1c 04 01 02 15 07 01 51 1e 07 01 02     ...........Q....
    34b6:	20 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00      ...............
    34c6:	0e 04 01 02 2c 07 01 51 2e 07 16 02 00 00 00 00     ....,..Q........
	...
    34e6:	0c 02 1e 04 17 02 06 0a 02 02 06 0a 02 02 06 0a     ................
    34f6:	07 02 22 04 00 00 00 00 00 00 00 00 00 00 00 00     ..".............
    3506:	0e 04 5b 02 17 04 00 00 00 00 00 00 00 00 00 00     ..[.............
	...
    3526:	80 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3546:	68 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     h...............
	...

00003566 <map_level_city>:
    3566:	01 ff 01 1a 76 06 08 04 00 00 00 00 00 00 00 00     ....v...........
	...
    3586:	24 04 5c 06 00 00 00 00 00 00 00 00 00 00 00 00     $.\.............
	...
    35a6:	06 06 01 08 65 06 01 08 0a 06 09 04 00 00 00 00     ....e...........
	...
    35c6:	23 04 2f 06 01 08 2d 06 00 00 00 00 00 00 00 00     #./...-.........
	...
    35e6:	76 06 0a 04 00 00 00 00 00 00 00 00 00 00 00 00     v...............
	...
    3606:	22 04 5e 06 00 00 00 00 00 00 00 00 00 00 00 00     ".^.............
	...
    3626:	1c 06 01 08 21 06 01 08 36 06 0b 04 00 00 00 00     ....!...6.......
	...
    3646:	21 04 27 06 01 08 24 06 01 08 12 06 00 00 00 00     !.'...$.........
	...
    3666:	2e 06 01 08 33 06 01 08 11 06 0c 04 00 00 00 00     ....3...........
	...
    3686:	20 04 60 06 00 00 00 00 00 00 00 00 00 00 00 00      .`.............
	...
    36a6:	4c 06 01 08 26 06 0d 04 00 00 00 00 00 00 00 00     L...&...........
	...
    36c6:	1f 04 13 06 01 08 1d 06 01 08 2f 06 00 00 00 00     ........../.....
	...
    36e6:	08 06 01 08 69 06 0e 04 00 00 00 00 00 00 00 00     ....i...........
	...
    3706:	1e 04 62 06 00 00 00 00 00 00 00 00 00 00 00 00     ..b.............
	...
    3726:	71 06 0f 04 00 00 00 00 00 00 00 00 00 00 00 00     q...............
	...
    3746:	1d 04 5d 06 06 05 00 00 00 00 00 00 00 00 00 00     ..].............
	...
    3766:	70 05 10 04 00 00 00 00 00 00 00 00 00 00 00 00     p...............
	...
    3786:	1c 04 0d 05 08 02 48 05 07 07 00 00 00 00 00 00     ......H.........
	...
    37a6:	6f 07 11 04 00 00 00 00 00 00 00 00 00 00 00 00     o...............
	...
    37c6:	1b 04 0d 07 08 09 50 07 00 00 00 00 00 00 00 00     ......P.........
	...
    37e6:	6e 07 12 09 00 00 00 00 00 00 00 00 00 00 00 00     n...............
	...
    3806:	1a 09 66 07 00 00 00 00 00 00 00 00 00 00 00 00     ..f.............
	...
    3826:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3846:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3866:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3886:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    38a6:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    38c6:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    38e6:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3906:	2a 07 02 02 08 0a 4c 07 00 00 00 00 00 00 00 00     *.....L.........
	...
    3926:	21 07 08 02 57 07 00 00 00 00 00 00 00 00 00 00     !...W...........
	...
    3946:	29 07 0a 04 4d 07 00 00 00 00 00 00 00 00 00 00     )...M...........
	...
    3966:	1f 07 01 02 08 04 02 02 56 07 00 00 00 00 00 00     ........V.......
	...
    3986:	28 07 0a 09 4e 07 00 00 00 00 00 00 00 00 00 00     (...N...........
	...
    39a6:	1d 07 01 02 0b 04 02 02 55 07 00 00 00 00 00 00     ........U.......
	...
    39c6:	19 07 08 02 13 07 08 02 3f 07 01 4c 04 07 00 00     ........?..L....
	...
    39e6:	1b 07 01 02 0e 04 01 02 1a 07 01 4c 3a 07 00 00     ...........L:...
	...
    3a06:	18 07 08 09 13 07 08 09 05 07 01 4c 39 07 01 4d     ...........L9..M
    3a16:	01 4e 01 4f 03 07 00 00 00 00 00 00 00 00 00 00     .N.O............
    3a26:	15 07 05 02 10 04 01 02 19 07 01 4d 01 4e 01 4f     ...........M.N.O
    3a36:	20 07 12 02 06 0a 01 02 00 00 00 00 00 00 00 00      ...............
    3a46:	01 02 06 0a 02 02 06 0a 30 07 01 4d 01 4e 01 4f     ........0..M.N.O
    3a56:	35 07 01 4f 01 4e 01 50 06 07 00 00 00 00 00 00     5..O.N.P........
    3a66:	13 07 01 02 16 04 01 02 16 07 01 4f 01 4e 01 50     ...........O.N.P
    3a76:	21 07 01 02 1a 04 00 00 00 00 00 00 00 00 00 00     !...............
    3a86:	0e 04 01 02 2d 07 01 4f 01 4e 01 50 39 07 01 50     ....-..O.N.P9..P
    3a96:	01 4f 01 4e 05 07 00 00 00 00 00 00 00 00 00 00     .O.N............
    3aa6:	11 07 01 02 18 04 01 02 17 07 01 50 01 4f 01 4e     ...........P.O.N
    3ab6:	1e 07 01 02 1c 04 00 00 00 00 00 00 00 00 00 00     ................
    3ac6:	0e 04 01 02 2e 07 01 50 01 4f 01 4e 35 07 01 4e     .......P.O.N5..N
    3ad6:	01 4f 01 50 08 07 00 00 00 00 00 00 00 00 00 00     .O.P............
    3ae6:	0f 07 01 02 1a 04 01 02 14 07 01 4e 01 4f 01 50     ...........N.O.P
    3af6:	1f 07 01 02 1e 04 00 00 00 00 00 00 00 00 00 00     ................
    3b06:	0e 04 01 02 2b 07 01 4e 01 4f 01 50 39 07 01 51     ....+..N.O.P9..Q
    3b16:	09 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3b26:	0d 07 01 02 1c 04 01 02 15 07 01 51 1e 07 01 02     ...........Q....
    3b36:	20 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00      ...............
    3b46:	0e 04 01 02 2c 07 01 51 2e 07 16 02 00 00 00 00     ....,..Q........
	...
    3b66:	0c 02 1e 04 17 02 06 0a 02 02 06 0a 02 02 06 0a     ................
    3b76:	07 02 22 04 00 00 00 00 00 00 00 00 00 00 00 00     ..".............
    3b86:	0e 04 5b 02 17 04 00 00 00 00 00 00 00 00 00 00     ..[.............
	...
    3ba6:	80 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3bc6:	68 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     h...............
	...

00003be6 <map_level_forest>:
    3be6:	01 ff 01 1a 76 06 08 04 00 00 00 00 00 00 00 00     ....v...........
	...
    3c06:	24 04 5c 06 00 00 00 00 00 00 00 00 00 00 00 00     $.\.............
	...
    3c26:	06 06 01 08 65 06 01 08 0a 06 09 04 00 00 00 00     ....e...........
	...
    3c46:	23 04 2f 06 01 08 2d 06 00 00 00 00 00 00 00 00     #./...-.........
	...
    3c66:	76 06 0a 04 00 00 00 00 00 00 00 00 00 00 00 00     v...............
	...
    3c86:	22 04 5e 06 00 00 00 00 00 00 00 00 00 00 00 00     ".^.............
	...
    3ca6:	1c 06 01 08 21 06 01 08 36 06 0b 04 00 00 00 00     ....!...6.......
	...
    3cc6:	21 04 27 06 01 08 24 06 01 08 12 06 00 00 00 00     !.'...$.........
	...
    3ce6:	2e 06 01 08 33 06 01 08 11 06 0c 04 00 00 00 00     ....3...........
	...
    3d06:	20 04 60 06 00 00 00 00 00 00 00 00 00 00 00 00      .`.............
	...
    3d26:	4c 06 01 08 26 06 0d 04 00 00 00 00 00 00 00 00     L...&...........
	...
    3d46:	1f 04 13 06 01 08 1d 06 01 08 2f 06 00 00 00 00     ........../.....
	...
    3d66:	08 06 01 08 69 06 0e 04 00 00 00 00 00 00 00 00     ....i...........
	...
    3d86:	1e 04 62 06 00 00 00 00 00 00 00 00 00 00 00 00     ..b.............
	...
    3da6:	71 06 0f 04 00 00 00 00 00 00 00 00 00 00 00 00     q...............
	...
    3dc6:	1d 04 5d 06 06 05 00 00 00 00 00 00 00 00 00 00     ..].............
	...
    3de6:	70 05 10 04 00 00 00 00 00 00 00 00 00 00 00 00     p...............
	...
    3e06:	1c 04 0d 05 08 02 48 05 07 07 00 00 00 00 00 00     ......H.........
	...
    3e26:	6f 07 11 04 00 00 00 00 00 00 00 00 00 00 00 00     o...............
	...
    3e46:	1b 04 0d 07 08 09 50 07 00 00 00 00 00 00 00 00     ......P.........
	...
    3e66:	6e 07 12 09 00 00 00 00 00 00 00 00 00 00 00 00     n...............
	...
    3e86:	1a 09 66 07 00 00 00 00 00 00 00 00 00 00 00 00     ..f.............
	...
    3ea6:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3ec6:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3ee6:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3f06:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3f26:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3f46:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3f66:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3f86:	2a 07 02 02 08 0a 4c 07 00 00 00 00 00 00 00 00     *.....L.........
	...
    3fa6:	21 07 08 02 57 07 00 00 00 00 00 00 00 00 00 00     !...W...........
	...
    3fc6:	29 07 0a 04 4d 07 00 00 00 00 00 00 00 00 00 00     )...M...........
	...
    3fe6:	1f 07 01 02 08 04 02 02 56 07 00 00 00 00 00 00     ........V.......
	...
    4006:	28 07 0a 09 4e 07 00 00 00 00 00 00 00 00 00 00     (...N...........
	...
    4026:	1d 07 01 02 0b 04 02 02 55 07 00 00 00 00 00 00     ........U.......
	...
    4046:	19 07 08 02 13 07 08 02 3f 07 01 4c 04 07 00 00     ........?..L....
	...
    4066:	1b 07 01 02 0e 04 01 02 1a 07 01 4c 3a 07 00 00     ...........L:...
	...
    4086:	18 07 08 09 13 07 08 09 05 07 01 4c 39 07 01 4d     ...........L9..M
    4096:	01 4e 01 4f 03 07 00 00 00 00 00 00 00 00 00 00     .N.O............
    40a6:	15 07 05 02 10 04 01 02 19 07 01 4d 01 4e 01 4f     ...........M.N.O
    40b6:	20 07 12 02 06 0a 01 02 00 00 00 00 00 00 00 00      ...............
    40c6:	01 02 06 0a 02 02 06 0a 30 07 01 4d 01 4e 01 4f     ........0..M.N.O
    40d6:	35 07 01 4f 01 4e 01 50 06 07 00 00 00 00 00 00     5..O.N.P........
    40e6:	13 07 01 02 16 04 01 02 16 07 01 4f 01 4e 01 50     ...........O.N.P
    40f6:	21 07 01 02 1a 04 00 00 00 00 00 00 00 00 00 00     !...............
    4106:	0e 04 01 02 2d 07 01 4f 01 4e 01 50 39 07 01 50     ....-..O.N.P9..P
    4116:	01 4f 01 4e 05 07 00 00 00 00 00 00 00 00 00 00     .O.N............
    4126:	11 07 01 02 18 04 01 02 17 07 01 50 01 4f 01 4e     ...........P.O.N
    4136:	1e 07 01 02 1c 04 00 00 00 00 00 00 00 00 00 00     ................
    4146:	0e 04 01 02 2e 07 01 50 01 4f 01 4e 35 07 01 4e     .......P.O.N5..N
    4156:	01 4f 01 50 08 07 00 00 00 00 00 00 00 00 00 00     .O.P............
    4166:	0f 07 01 02 1a 04 01 02 14 07 01 4e 01 4f 01 50     ...........N.O.P
    4176:	1f 07 01 02 1e 04 00 00 00 00 00 00 00 00 00 00     ................
    4186:	0e 04 01 02 2b 07 01 4e 01 4f 01 50 39 07 01 51     ....+..N.O.P9..Q
    4196:	09 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    41a6:	0d 07 01 02 1c 04 01 02 15 07 01 51 1e 07 01 02     ...........Q....
    41b6:	20 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00      ...............
    41c6:	0e 04 01 02 2c 07 01 51 2e 07 16 02 00 00 00 00     ....,..Q........
	...
    41e6:	0c 02 1e 04 17 02 06 0a 02 02 06 0a 02 02 06 0a     ................
    41f6:	07 02 22 04 00 00 00 00 00 00 00 00 00 00 00 00     ..".............
    4206:	0e 04 5b 02 17 04 00 00 00 00 00 00 00 00 00 00     ..[.............
	...
    4226:	80 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4246:	68 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     h...............
	...

00004266 <map_level_fire>:
    4266:	01 ff 01 1a 7e 57 00 00 00 00 00 00 00 00 00 00     ....~W..........
	...
    4286:	80 57 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .W..............
	...
    42a6:	80 57 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .W..............
	...
    42c6:	80 57 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .W..............
	...
    42e6:	80 57 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .W..............
	...
    4306:	80 57 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .W..............
	...
    4326:	80 57 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .W..............
	...
    4346:	80 57 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .W..............
	...
    4366:	80 57 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .W..............
	...
    4386:	80 57 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .W..............
	...
    43a6:	80 57 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .W..............
	...
    43c6:	80 57 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .W..............
	...
    43e6:	80 57 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .W..............
	...
    4406:	80 57 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .W..............
	...
    4426:	80 57 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .W..............
	...
    4446:	7a 57 06 0b 00 00 00 00 00 00 00 00 00 00 00 00     zW..............
	...
    4466:	80 0b 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4486:	79 0b 07 58 00 00 00 00 00 00 00 00 00 00 00 00     y..X............
	...
    44a6:	19 58 01 59 01 5a 01 5b 40 58 01 59 01 5a 01 5b     .X.Y.Z.[@X.Y.Z.[
    44b6:	21 58 00 00 00 00 00 00 00 00 00 00 00 00 00 00     !X..............
    44c6:	10 58 01 59 01 5a 01 5b 6d 58 00 00 00 00 00 00     .X.Y.Z.[mX......
	...
    44e6:	01 59 01 5a 01 5b 14 58 01 5c 03 55 01 5d 17 58     .Y.Z.[.X.\.U.].X
    44f6:	01 59 01 5a 01 5b 24 58 01 5c 03 55 01 5d 21 58     .Y.Z.[$X.\.U.]!X
    4506:	0e 58 01 5c 03 55 01 5d 15 58 01 59 01 5a 01 5b     .X.\.U.].X.Y.Z.[
    4516:	3a 58 01 59 01 5a 01 5b 16 58 01 5c 01 55 00 00     :X.Y.Z.[.X.\.U..
    4526:	02 55 01 5d 2e 58 01 5c 03 55 01 5d 4a 58 00 00     .U.].X.\.U.]JX..
	...
    4546:	26 58 01 5c 03 55 01 5d 38 58 01 5c 03 55 01 5d     &X.\.U.]8X.\.U.]
    4556:	18 58 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .X..............
    4566:	80 58 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .X..............
	...
    4586:	80 58 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .X..............
	...
    45a6:	80 58 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .X..............
	...
    45c6:	80 58 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .X..............
	...
    45e6:	47 58 06 0d 33 58 00 00 00 00 00 00 00 00 00 00     GX..3X..........
	...
    4606:	01 0c 07 58 01 0c 77 58 00 00 00 00 00 00 00 00     ...X..wX........
	...
    4626:	7e 58 02 0c 00 00 00 00 00 00 00 00 00 00 00 00     ~X..............
	...
    4646:	07 0e 02 0c 77 58 00 00 00 00 00 00 00 00 00 00     ....wX..........
	...
    4666:	7c 58 04 0c 00 00 00 00 00 00 00 00 00 00 00 00     |X..............
	...
    4686:	05 0e 04 0c 77 58 00 00 00 00 00 00 00 00 00 00     ....wX..........
	...
    46a6:	7a 58 06 0c 00 00 00 00 00 00 00 00 00 00 00 00     zX..............
	...
    46c6:	09 0c 77 58 00 00 00 00 00 00 00 00 00 00 00 00     ..wX............
	...
    46e6:	78 58 08 0c 00 00 00 00 00 00 00 00 00 00 00 00     xX..............
	...
    4706:	09 0c 77 58 00 00 00 00 00 00 00 00 00 00 00 00     ..wX............
	...
    4726:	2c 58 06 0d 07 58 06 0d 37 58 0a 0c 00 00 00 00     ,X...X..7X......
	...
    4746:	09 0c 77 58 00 00 00 00 00 00 00 00 00 00 00 00     ..wX............
	...
    4766:	4b 58 06 0d 23 58 01 0d 0b 0c 00 00 00 00 00 00     KX..#X..........
	...
    4786:	08 0c 01 0d 22 58 02 0c 07 0e 02 0c 0b 58 02 0c     ...."X.......X..
    4796:	07 0e 02 0c 34 58 00 00 00 00 00 00 00 00 00 00     ....4X..........
    47a6:	72 58 01 0d 0d 0c 00 00 00 00 00 00 00 00 00 00     rX..............
	...
    47c6:	08 0c 01 0d 20 58 04 0c 05 0e 04 0c 09 58 04 0c     .... X.......X..
    47d6:	05 0e 04 0c 34 58 00 00 00 00 00 00 00 00 00 00     ....4X..........
    47e6:	70 58 01 0d 0f 0c 00 00 00 00 00 00 00 00 00 00     pX..............
	...
    4806:	08 0c 01 0d 1e 58 0f 0c 07 58 0f 0c 34 58 00 00     .....X...X..4X..
	...
    4826:	6e 58 01 0d 11 0c 00 00 00 00 00 00 00 00 00 00     nX..............
	...
    4846:	08 0c 01 0d 1c 58 11 0c 05 58 11 0c 1e 58 11 0d     .....X...X...X..
    4856:	05 58 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .X..............
    4866:	03 58 02 0d 08 58 02 0d 08 58 02 0d 08 58 39 0d     .X...X...X...X9.
    4876:	08 58 02 0d 08 58 01 0d 13 0c 00 00 00 00 00 00     .X...X..........
    4886:	08 0c 08 58 02 0d 08 58 0a 0d 11 0c 05 0d 11 0c     ...X...X........
    4896:	1e 0d 11 0c 06 0e 00 00 00 00 00 00 00 00 00 00     ................
    48a6:	02 0e 02 0c 08 0e 02 0c 08 0e 02 0c 08 0e 39 0c     ..............9.
    48b6:	08 0e 02 0c 08 0e 15 0c 00 00 00 00 00 00 00 00     ................
    48c6:	07 0c 08 0e 02 0c 08 0e 4f 0c 00 00 00 00 00 00     ........O.......
	...

000048e6 <map_level_ice>:
    48e6:	01 ff 01 1a 76 06 08 04 00 00 00 00 00 00 00 00     ....v...........
	...
    4906:	24 04 5c 06 00 00 00 00 00 00 00 00 00 00 00 00     $.\.............
	...
    4926:	06 06 01 08 65 06 01 08 0a 06 09 04 00 00 00 00     ....e...........
	...
    4946:	23 04 2f 06 01 08 2d 06 00 00 00 00 00 00 00 00     #./...-.........
	...
    4966:	76 06 0a 04 00 00 00 00 00 00 00 00 00 00 00 00     v...............
	...
    4986:	22 04 5e 06 00 00 00 00 00 00 00 00 00 00 00 00     ".^.............
	...
    49a6:	1c 06 01 08 21 06 01 08 36 06 0b 04 00 00 00 00     ....!...6.......
	...
    49c6:	21 04 27 06 01 08 24 06 01 08 12 06 00 00 00 00     !.'...$.........
	...
    49e6:	2e 06 01 08 33 06 01 08 11 06 0c 04 00 00 00 00     ....3...........
	...
    4a06:	20 04 60 06 00 00 00 00 00 00 00 00 00 00 00 00      .`.............
	...
    4a26:	4c 06 01 08 26 06 0d 04 00 00 00 00 00 00 00 00     L...&...........
	...
    4a46:	1f 04 13 06 01 08 1d 06 01 08 2f 06 00 00 00 00     ........../.....
	...
    4a66:	08 06 01 08 69 06 0e 04 00 00 00 00 00 00 00 00     ....i...........
	...
    4a86:	1e 04 62 06 00 00 00 00 00 00 00 00 00 00 00 00     ..b.............
	...
    4aa6:	71 06 0f 04 00 00 00 00 00 00 00 00 00 00 00 00     q...............
	...
    4ac6:	1d 04 5d 06 06 05 00 00 00 00 00 00 00 00 00 00     ..].............
	...
    4ae6:	70 05 10 04 00 00 00 00 00 00 00 00 00 00 00 00     p...............
	...
    4b06:	1c 04 0d 05 08 02 48 05 07 07 00 00 00 00 00 00     ......H.........
	...
    4b26:	6f 07 11 04 00 00 00 00 00 00 00 00 00 00 00 00     o...............
	...
    4b46:	1b 04 0d 07 08 09 50 07 00 00 00 00 00 00 00 00     ......P.........
	...
    4b66:	6e 07 12 09 00 00 00 00 00 00 00 00 00 00 00 00     n...............
	...
    4b86:	1a 09 66 07 00 00 00 00 00 00 00 00 00 00 00 00     ..f.............
	...
    4ba6:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4bc6:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4be6:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4c06:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4c26:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4c46:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4c66:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4c86:	2a 07 02 02 08 0a 4c 07 00 00 00 00 00 00 00 00     *.....L.........
	...
    4ca6:	21 07 08 02 57 07 00 00 00 00 00 00 00 00 00 00     !...W...........
	...
    4cc6:	29 07 0a 04 4d 07 00 00 00 00 00 00 00 00 00 00     )...M...........
	...
    4ce6:	1f 07 01 02 08 04 02 02 56 07 00 00 00 00 00 00     ........V.......
	...
    4d06:	28 07 0a 09 4e 07 00 00 00 00 00 00 00 00 00 00     (...N...........
	...
    4d26:	1d 07 01 02 0b 04 02 02 55 07 00 00 00 00 00 00     ........U.......
	...
    4d46:	19 07 08 02 13 07 08 02 3f 07 01 4c 04 07 00 00     ........?..L....
	...
    4d66:	1b 07 01 02 0e 04 01 02 1a 07 01 4c 3a 07 00 00     ...........L:...
	...
    4d86:	18 07 08 09 13 07 08 09 05 07 01 4c 39 07 01 4d     ...........L9..M
    4d96:	01 4e 01 4f 03 07 00 00 00 00 00 00 00 00 00 00     .N.O............
    4da6:	15 07 05 02 10 04 01 02 19 07 01 4d 01 4e 01 4f     ...........M.N.O
    4db6:	20 07 12 02 06 0a 01 02 00 00 00 00 00 00 00 00      ...............
    4dc6:	01 02 06 0a 02 02 06 0a 30 07 01 4d 01 4e 01 4f     ........0..M.N.O
    4dd6:	35 07 01 4f 01 4e 01 50 06 07 00 00 00 00 00 00     5..O.N.P........
    4de6:	13 07 01 02 16 04 01 02 16 07 01 4f 01 4e 01 50     ...........O.N.P
    4df6:	21 07 01 02 1a 04 00 00 00 00 00 00 00 00 00 00     !...............
    4e06:	0e 04 01 02 2d 07 01 4f 01 4e 01 50 39 07 01 50     ....-..O.N.P9..P
    4e16:	01 4f 01 4e 05 07 00 00 00 00 00 00 00 00 00 00     .O.N............
    4e26:	11 07 01 02 18 04 01 02 17 07 01 50 01 4f 01 4e     ...........P.O.N
    4e36:	1e 07 01 02 1c 04 00 00 00 00 00 00 00 00 00 00     ................
    4e46:	0e 04 01 02 2e 07 01 50 01 4f 01 4e 35 07 01 4e     .......P.O.N5..N
    4e56:	01 4f 01 50 08 07 00 00 00 00 00 00 00 00 00 00     .O.P............
    4e66:	0f 07 01 02 1a 04 01 02 14 07 01 4e 01 4f 01 50     ...........N.O.P
    4e76:	1f 07 01 02 1e 04 00 00 00 00 00 00 00 00 00 00     ................
    4e86:	0e 04 01 02 2b 07 01 4e 01 4f 01 50 39 07 01 51     ....+..N.O.P9..Q
    4e96:	09 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4ea6:	0d 07 01 02 1c 04 01 02 15 07 01 51 1e 07 01 02     ...........Q....
    4eb6:	20 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00      ...............
    4ec6:	0e 04 01 02 2c 07 01 51 2e 07 16 02 00 00 00 00     ....,..Q........
	...
    4ee6:	0c 02 1e 04 17 02 06 0a 02 02 06 0a 02 02 06 0a     ................
    4ef6:	07 02 22 04 00 00 00 00 00 00 00 00 00 00 00 00     ..".............
    4f06:	0e 04 5b 02 17 04 00 00 00 00 00 00 00 00 00 00     ..[.............
	...
    4f26:	80 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4f46:	68 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     h...............
	...

00004f66 <tiles_data>:
	...
    4fa6:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4fb6:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    4fc6:	ff f8 fb f8 fb f8 f8 fd ff fb f8 f8 fb f8 f8 f8     ................
    4fd6:	ff f8 f8 fb f8 f8 f8 f8 ff f8 f8 f8 f8 f8 f8 f8     ................
    4fe6:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4ff6:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    5006:	fd f8 fb f8 fb f8 f8 fd f8 fb f8 f8 fb f8 f8 f8     ................
    5016:	f8 f8 f8 fb f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    5026:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5036:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    5046:	fd f8 fb f8 fb f8 f8 ff f8 fb f8 f8 fb f8 f8 ff     ................
    5056:	f8 f8 f8 fb f8 f8 f8 ff f8 f8 f8 f8 f8 f8 f8 ff     ................
    5066:	fa f8 f8 f8 f8 f8 f8 f8 f8 f8 fb f8 f8 f8 fb f8     ................
    5076:	f8 f8 fb f8 fb fb f8 f8 f8 f8 f8 fb f8 f8 f8 f8     ................
    5086:	f8 f8 fb f8 fb f8 f8 f8 f8 fb f8 f8 fb f8 f8 f8     ................
    5096:	f8 f8 f8 fb f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    50a6:	ac ac ac ac ac ac ac ac ac ac ac ac ac ac ac ac     ................
    50b6:	ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad     ................
    50c6:	ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae     ................
    50d6:	af af af af af af af af af af af af af af af af     ................
    50e6:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    50f6:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    5106:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    5116:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    5126:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    5136:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    5146:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    5156:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    5166:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    5176:	ab ab ab ab ab ab ab ab ab ad ad ad ad ad ad ab     ................
    5186:	ae ae ae ae ae ae ae ae ab ae ae ae ae ae ae ab     ................
    5196:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    51a6:	ff ff ff ff ff ff ff a3 ff ff ff ff ff ff ff a3     ................
    51b6:	a3 ff ff ff ff ff a3 a0 a3 ff ff ff ff ff a3 a0     ................
    51c6:	a0 a3 ff ff ff a3 a0 a0 a0 a3 ff ff ff a3 a0 a0     ................
    51d6:	a0 a0 a3 ff a3 a0 a0 a0 a0 a0 a3 ff a3 a0 a0 a0     ................
    51e6:	a0 a0 a0 a3 ff a3 a0 a0 a0 a0 a0 a3 ff a3 a0 a0     ................
    51f6:	a0 a0 a3 ff ff ff a3 a0 a0 a0 a3 ff ff ff a3 a0     ................
    5206:	a0 a3 ff ff ff ff ff a3 a0 a3 ff ff ff ff ff a3     ................
    5216:	a3 ff ff ff ff ff ff ff a3 ff ff ff ff ff ff ff     ................
    5226:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    5236:	06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    5246:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5256:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    5266:	02 02 02 02 02 02 02 02 02 02 0b 02 02 02 0b 02     ................
    5276:	02 0b 02 0b 02 0b 02 0b 02 02 0b 02 0b 02 0b 02     ................
    5286:	02 0b 02 02 02 0b 02 02 02 02 0b 02 0b 02 0b 02     ................
    5296:	02 0b 02 0b 02 0b 02 02 02 02 0b 02 02 02 0b 02     ................
    52a6:	5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c     \\\\\\\\\\\\\\\\
    52b6:	02 5c 02 5c 02 5c 02 5c 02 02 0b 02 0b 02 0b 02     .\.\.\.\........
    52c6:	02 0b 02 02 02 0b 02 02 02 02 0b 02 0b 02 0b 02     ................
    52d6:	02 0b 02 0b 02 0b 02 02 02 02 0b 02 02 02 0b 02     ................
    52e6:	27 1f 27 1f 1f 1f 27 1f 1f 1f 1f 27 1f 27 1f 1f     '.'...'....'.'..
    52f6:	27 1f 27 1f 1f 2f 27 1f 1f 27 2f 1f 27 1f 1f 1f     '.'../'..'/.'...
    5306:	1f 1f 27 1f 2f 1f 27 1f 1f 27 1f 27 1f 1f 2f 1f     ..'./.'..'.'../.
    5316:	1f 1f 2f 1f 1f 27 1f 27 1f 1f 1f 27 1f 1f 1f 1f     ../..'.'...'....
    5326:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    5336:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    5346:	bf bf bf bf 00 00 00 00 bf bf bf bf 00 00 00 00     ................
    5356:	bf bf bf bf 00 00 00 00 bf bf bf bf 00 00 00 00     ................
    5366:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    5376:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
	...
    53a6:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    53b6:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    53c6:	00 00 00 00 bf bf bf bf 00 00 00 00 bf bf bf bf     ................
    53d6:	00 00 00 00 bf bf bf bf 00 00 00 00 bf bf bf bf     ................
	...
    53fe:	00 00 00 e3 00 00 00 00 00 00 e3 ff e3 00 00 00     ................
    540e:	00 00 00 e3 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    543e:	00 00 00 d2 00 00 00 00 00 00 d2 e3 d2 00 00 00     ................
    544e:	00 00 00 d2 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5486:	02 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00     ................
    5496:	02 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00     ................
    54a6:	bf bf bf bf 00 00 00 00 bf bf bf bf 00 00 00 00     ................
    54b6:	bf bf bf bf 00 00 00 00 bf bf bf bf 00 00 00 00     ................
    54c6:	bf bf bf bf 00 00 00 00 bf bf bf bf 00 00 00 00     ................
    54d6:	bf bf bf bf 00 00 00 00 bf bf bf bf 00 00 00 00     ................
    54e6:	00 00 00 00 bf bf bf bf 00 00 00 00 bf bf bf bf     ................
    54f6:	00 00 00 00 bf bf bf bf 00 00 00 00 bf bf bf bf     ................
    5506:	00 00 00 00 bf bf bf bf 00 00 00 00 bf bf bf bf     ................
    5516:	00 00 00 00 bf bf bf bf 00 00 00 00 bf bf bf bf     ................
    5526:	02 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00     ................
    5536:	02 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00     ................
    5546:	02 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00     ................
    5556:	02 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00     ................
    5566:	02 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00     ................
    5576:	02 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00     ................
    5586:	02 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00     ................
    5596:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    55b2:	00 00 00 02 00 00 00 00 00 00 00 02 00 00 00 00     ................
    55c2:	00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    55e6:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    55f6:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    5606:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    5616:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
	...
    5632:	00 00 96 96 00 00 00 00 00 96 96 96 00 00 00 00     ................
    5642:	96 96 96 96 00 00 00 96 96 96 96 96 00 00 96 96     ................
    5652:	96 96 96 96 00 00 96 96 96 96 96 96 00 96 96 96     ................
    5662:	96 96 96 96 00 96 96 96 96 96 96 00 96 96 96 96     ................
    5672:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    5682:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    5692:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    56a2:	96 96 96 96 00 00 00 00 00 00 00 00 96 96 00 00     ................
    56b2:	00 00 00 00 96 96 96 00 00 00 00 00 96 96 96 96     ................
    56c2:	00 00 00 00 96 96 96 96 96 00 00 00 96 96 96 96     ................
    56d2:	96 96 00 00 96 96 96 96 96 96 00 00 96 96 96 96     ................
    56e2:	96 96 96 00 00 96 96 96 95 96 96 96 00 96 96 96     ................
    56f2:	95 96 96 96 96 96 96 96 96 95 96 96 96 96 96 96     ................
    5702:	96 95 96 96 96 96 96 96 96 96 95 96 96 96 96 96     ................
    5712:	96 bf 95 96 95 84 96 96 96 bf 96 95 8c 83 83 8c     ................
    5722:	96 bf 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    5732:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    5742:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    5752:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    5762:	96 96 96 96 96 96 96 95 96 96 96 00 96 96 96 95     ................
    5772:	96 96 96 00 96 96 95 96 96 96 96 96 96 96 95 96     ................
    5782:	96 96 96 96 96 95 96 96 96 96 96 96 96 95 96 96     ................
    5792:	96 96 95 96 95 96 96 96 96 95 95 95 96 96 96 96     ................
    57a2:	94 8c 8c 95 82 82 82 82 82 bf 96 96 00 d8 d8 d8     ................
    57b2:	bf ff bf 82 00 d8 d8 bf ff ff ff bf 00 d8 bf ff     ................
    57c2:	ff ff ff ff bf bf ff ff ff ff ff ff 00 00 bf ff     ................
    57d2:	ff ff ff ff 00 00 94 bf ff ff ff bf 00 00 00 8c     ................
    57e2:	bf ff bf d8 96 96 96 96 96 96 96 96 83 83 8c 8c     ................
    57f2:	8c 8c 8c 83 d8 d8 d8 d8 d8 d8 d8 d8 bf d8 d8 d8     ................
    5802:	d8 d8 d8 d8 ff bf bf d8 d8 d8 d8 d8 bf d8 d8 d8     ................
    5812:	d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8     ................
    5822:	d8 d8 82 82 96 96 8c 83 83 8c 8c 8c 83 82 83 83     ................
    5832:	83 83 8c 00 82 82 82 83 83 83 83 00 82 82 82 83     ................
    5842:	83 83 83 00 d8 82 82 83 83 83 83 00 82 82 82 83     ................
    5852:	83 83 00 00 82 82 83 83 83 95 00 00 82 82 83 83     ................
    5862:	95 00 00 00 40 40 40 40 40 40 40 40 40 40 40 40     ....@@@@@@@@@@@@
    5872:	40 40 40 40 41 41 41 41 41 41 41 41 41 41 41 41     @@@@AAAAAAAAAAAA
    5882:	41 41 41 41 42 42 42 42 42 42 42 42 42 42 42 42     AAAABBBBBBBBBBBB
    5892:	42 42 42 42 43 43 43 43 43 43 43 43 43 43 43 43     BBBBCCCCCCCCCCCC
    58a2:	43 43 43 43 00 00 00 96 95 ff d8 d8 00 00 00 00     CCCC............
    58b2:	96 ff 83 82 00 00 00 00 00 ff 96 96 00 00 00 00     ................
    58c2:	00 bf 96 96 00 00 00 00 00 bf 96 96 00 00 00 00     ................
    58d2:	00 bf 96 96 00 00 00 00 00 bf 00 00 00 00 00 00     ................
    58e2:	00 77 00 00 d8 d8 d8 82 82 82 82 82 82 82 82 82     .w..............
    58f2:	82 83 83 83 8c 8c 83 83 83 83 8c 95 96 96 96 96     ................
    5902:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    5912:	96 96 96 96 96 96 96 96 96 96 96 96 00 96 96 96     ................
    5922:	96 96 96 00 83 83 8c 95 96 00 00 00 83 8c 96 96     ................
    5932:	00 00 00 00 96 96 96 00 00 00 00 00 96 96 96 00     ................
    5942:	00 00 00 00 96 96 00 00 00 00 00 00 96 96 00 00     ................
	...
    5966:	44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44     DDDDDDDDDDDDDDDD
    5976:	45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45     EEEEEEEEEEEEEEEE
    5986:	46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46     FFFFFFFFFFFFFFFF
    5996:	47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47     GGGGGGGGGGGGGGGG
    59a6:	00 00 00 00 00 77 00 00 00 00 00 00 00 77 00 00     .....w.......w..
    59b6:	00 00 00 00 00 77 00 00 00 00 00 00 00 77 00 00     .....w.......w..
    59c6:	00 00 00 00 00 77 00 00 00 00 00 00 00 77 00 00     .....w.......w..
	...
    59ee:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    59fe:	00 3f 3f 2f 3f 3f 3f 2f 00 3f 3f 3f 2f 3f 3f 2f     .??/???/.???/??/
    5a0e:	00 3f 3f 2f 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??/.??/..????/.
	...
    5a2e:	00 00 00 3f 3f 2f 00 00 00 00 3f 3f 3f 2f 00 00     ...??/....???/..
    5a3e:	00 00 00 3f 3f 2f 00 00 00 00 00 3f 3f 2f 00 00     ...??/.....??/..
    5a4e:	00 00 00 3f 3f 2f 00 00 00 3f 3f 3f 3f 3f 3f 2f     ...??/...??????/
	...
    5a6e:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 00 00 3f 3f 2f     ..????/..??..??/
    5a7e:	00 00 00 00 3f 3f 2f 00 00 00 00 3f 3f 2f 00 00     ....??/....??/..
    5a8e:	00 00 3f 3f 2f 00 00 00 00 3f 3f 3f 3f 3f 3f 2f     ..??/....??????/
	...
    5aae:	00 3f 3f 3f 3f 3f 3f 2f 00 00 00 00 3f 3f 2f 00     .??????/....??/.
    5abe:	00 00 00 3f 3f 2f 00 00 00 00 00 00 3f 3f 2f 00     ...??/......??/.
    5ace:	00 3f 3f 00 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??..??/..????/.
	...
    5af2:	3f 3f 2f 00 00 00 00 3f 3f 3f 2f 00 00 00 3f 3f     ??/....???/...??
    5b02:	3f 3f 2f 00 00 3f 3f 00 3f 3f 2f 00 00 3f 3f 3f     ??/..??.??/..???
    5b12:	3f 3f 3f 2f 00 00 00 00 3f 3f 2f 00 00 00 00 00     ???/....??/.....
	...
    5b2e:	00 3f 3f 3f 3f 3f 3f 2f 00 3f 3f 2f 00 00 00 00     .??????/.??/....
    5b3e:	00 3f 3f 3f 3f 3f 2f 00 00 00 00 00 00 3f 3f 2f     .?????/......??/
    5b4e:	00 3f 3f 00 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??..??/..????/.
	...
    5b6e:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 00 00 00     ..????/..??/....
    5b7e:	00 3f 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     .?????/..??/.??/
    5b8e:	00 3f 3f 2f 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??/.??/..????/.
	...
    5bae:	00 3f 3f 3f 3f 3f 3f 2f 00 00 00 00 00 3f 3f 2f     .??????/.....??/
    5bbe:	00 00 00 00 3f 3f 2f 00 00 00 00 3f 3f 2f 00 00     ....??/....??/..
    5bce:	00 00 3f 3f 2f 00 00 00 00 00 3f 3f 2f 00 00 00     ..??/.....??/...
	...
    5bee:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    5bfe:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    5c0e:	00 3f 3f 2f 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??/.??/..????/.
	...
    5c2e:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    5c3e:	00 00 3f 3f 3f 3f 3f 2f 00 00 00 00 00 3f 3f 2f     ..?????/.....??/
    5c4e:	00 00 00 00 3f 3f 2f 00 00 00 3f 3f 3f 2f 00 00     ....??/...???/..
	...
    5c6e:	00 00 00 ff ff e3 00 00 00 00 ff ff ff ff e3 00     ................
    5c7e:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    5c8e:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    5cae:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    5cbe:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    5cce:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff e3 00     ................
	...
    5cee:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    5cfe:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    5d0e:	00 ff ff e3 00 ff ff e3 00 00 ff ff ff ff e3 00     ................
	...
    5d2e:	00 ff ff ff ff e3 00 00 00 ff ff e3 ff ff e3 00     ................
    5d3e:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    5d4e:	00 ff ff e3 ff ff e3 00 00 ff ff ff ff e3 00 00     ................
	...
    5d6e:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 00 00 00     ................
    5d7e:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 00 00 00     ................
    5d8e:	00 ff ff e3 00 00 00 00 00 ff ff ff ff ff ff e3     ................
	...
    5dae:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 00 00 00     ................
    5dbe:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 00 00 00     ................
    5dce:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
	...
    5dee:	00 00 ff ff ff ff ff e3 00 ff ff e3 00 00 00 00     ................
    5dfe:	00 ff ff e3 00 00 00 00 00 ff ff e3 ff ff ff e3     ................
    5e0e:	00 ff ff e3 00 ff ff e3 00 00 ff ff ff ff ff e3     ................
	...
    5e2e:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    5e3e:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 ff ff e3     ................
    5e4e:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    5e6e:	00 ff ff ff ff ff ff e3 00 00 00 ff ff e3 00 00     ................
    5e7e:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
    5e8e:	00 00 00 ff ff e3 00 00 00 ff ff ff ff ff ff e3     ................
	...
    5eb2:	ff ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    5ec2:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 ff ff 00     ................
    5ed2:	00 ff ff e3 00 00 ff ff ff ff e3 00 00 00 00 00     ................
	...
    5eee:	00 ff ff e3 00 ff ff e3 00 ff ff e3 ff ff e3 00     ................
    5efe:	00 ff ff ff ff e3 00 00 00 ff ff ff ff e3 00 00     ................
    5f0e:	00 ff ff e3 ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
	...
    5f2e:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    5f3e:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    5f4e:	00 ff ff e3 00 00 00 00 00 ff ff ff ff ff ff e3     ................
	...
    5f6e:	ff ff e3 00 00 ff ff e3 ff ff ff e3 ff ff ff e3     ................
    5f7e:	ff ff ff ff ff ff ff e3 ff ff e3 ff e3 ff ff e3     ................
    5f8e:	ff ff e3 00 00 ff ff e3 ff ff e3 00 00 ff ff e3     ................
	...
    5fae:	00 ff ff e3 00 ff ff e3 00 ff ff ff e3 ff ff e3     ................
    5fbe:	00 ff ff ff ff ff ff e3 00 ff ff ff ff ff ff e3     ................
    5fce:	00 ff ff e3 ff ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    5fee:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    5ffe:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    600e:	00 ff ff e3 00 ff ff e3 00 00 ff ff ff ff e3 00     ................
	...
    602e:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    603e:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff e3 00     ................
    604e:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
	...
    606e:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    607e:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    608e:	00 ff ff e3 ff ff e3 00 00 00 ff ff e3 ff ff e3     ................
	...
    60ae:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    60be:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff e3 00     ................
    60ce:	00 ff ff e3 ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
	...
    60ee:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 00 00 00     ................
    60fe:	00 00 ff ff ff ff e3 00 00 00 00 00 00 ff ff e3     ................
    610e:	00 00 00 00 00 ff ff e3 00 00 ff ff ff ff e3 00     ................
	...
    612e:	00 ff ff ff ff ff ff e3 00 00 00 ff ff e3 00 00     ................
    613e:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
    614e:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
	...
    616e:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    617e:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    618e:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff ff e3     ................
	...
    61ae:	00 ff ff 00 00 ff ff e3 00 ff ff 00 00 ff ff e3     ................
    61be:	00 ff ff 00 00 ff ff e3 00 ff ff 00 00 ff ff e3     ................
    61ce:	00 00 ff ff ff ff e3 00 00 00 00 ff ff e3 00 00     ................
	...
    61ee:	ff ff e3 00 00 ff ff e3 ff ff e3 00 00 ff ff e3     ................
    61fe:	ff ff e3 ff e3 ff ff e3 ff ff ff ff ff ff ff e3     ................
    620e:	ff ff ff e3 ff ff ff e3 ff ff e3 00 00 ff ff e3     ................
	...
    622e:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    623e:	00 00 ff ff ff ff e3 00 00 00 ff ff ff ff e3 00     ................
    624e:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    626e:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    627e:	00 00 ff ff ff ff e3 00 00 00 00 ff ff e3 00 00     ................
    628e:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
	...
    62ae:	00 ff ff ff ff ff ff e3 00 00 00 00 ff ff e3 00     ................
    62be:	00 00 00 ff ff e3 00 00 00 00 ff ff e3 00 00 00     ................
    62ce:	00 ff ff e3 00 00 00 00 00 ff ff ff ff ff ff e3     ................
	...
    62e6:	bf bf bf bf 00 00 00 00 bf bf bf bf 00 00 00 00     ................
    62f6:	bf bf bf bf 00 00 00 00 bf bf bf bf 00 00 00 00     ................
    6306:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    6316:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
	...
    6346:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    6356:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    6366:	00 00 00 00 bf bf bf bf 00 00 00 00 bf bf bf bf     ................
    6376:	00 00 00 00 bf bf bf bf 00 00 00 00 bf bf bf bf     ................
    6386:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    6396:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    63a6:	a0 a0 a0 a0 a0 a0 a0 ff a0 a0 a0 a0 a0 a0 ff ff     ................
    63b6:	a0 a0 a0 a0 a0 ff ff 02 a0 a0 a0 a0 ff ff 02 02     ................
    63c6:	a0 a0 a0 ff ff 02 02 02 a0 a0 ff ff 02 02 02 02     ................
    63d6:	a0 ff ff 02 02 02 02 02 ff ff 02 02 02 02 02 02     ................
    63e6:	ff 02 02 02 02 02 02 02 ff 02 02 02 02 02 02 02     ................
    63f6:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    6406:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    6416:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    6426:	ff ff ff ff ff ff ff ff 02 02 02 02 02 02 02 02     ................
    6436:	02 02 02 02 02 02 02 02 a0 a0 a0 a0 a0 a0 a0 a0     ................
    6446:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    6456:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    6466:	ff ff ff ff ff ff ff ff 02 02 ff ff ff ff 02 02     ................
    6476:	02 02 02 ff ff 02 02 02 a0 a0 a0 ff a0 a0 a0 a0     ................
    6486:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    6496:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    64a6:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    64b6:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    64c6:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    64d6:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    64e6:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    64f6:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    6506:	02 02 02 ff ff 02 02 02 02 02 ff ff ff ff 02 02     ................
    6516:	02 ff ff ff ff ff ff 02 ff ff ff ff ff ff ff ff     ................
    6526:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    6536:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    6546:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    6556:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    6566:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    6576:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    6586:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    6596:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    65a6:	03 03 03 03 03 03 03 1f 03 03 03 03 03 03 0f 06     ................
    65b6:	03 03 03 03 03 02 02 06 03 03 03 03 02 02 02 06     ................
    65c6:	03 03 03 02 02 02 02 06 03 03 02 02 02 02 06 02     ................
    65d6:	03 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    65e6:	1f 2f 2f 2f 2f 2f 2f 1f 06 06 06 1f 1f 1f 06 02     .//////.........
    65f6:	02 02 06 1f 06 1f 06 02 02 02 06 02 06 1f 06 02     ................
    6606:	02 02 06 02 06 06 02 06 02 06 06 02 02 06 02 06     ................
    6616:	02 06 02 02 02 06 02 06 06 02 02 02 02 06 02 02     ................
    6626:	1f 03 03 03 03 03 03 03 06 0f 03 03 03 03 03 03     ................
    6636:	06 02 02 03 03 03 03 03 06 02 02 02 03 03 03 03     ................
    6646:	06 06 02 02 02 03 03 03 02 02 02 02 02 02 03 03     ................
    6656:	02 02 02 02 02 02 02 03 06 02 02 02 02 02 02 02     ................
    6666:	03 03 03 03 03 03 03 02 03 03 03 03 03 03 02 02     ................
    6676:	03 03 03 03 03 02 02 02 03 03 03 03 02 02 02 02     ................
    6686:	03 03 03 02 02 02 02 02 03 03 02 02 02 02 02 02     ................
    6696:	03 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    66a6:	02 03 03 03 03 03 03 03 02 02 03 03 03 03 03 03     ................
    66b6:	02 02 02 03 03 03 03 03 02 02 02 02 03 03 03 03     ................
    66c6:	02 02 02 02 02 03 03 03 02 02 02 02 02 02 03 03     ................
    66d6:	02 02 02 02 02 02 02 03 02 02 02 02 02 02 02 02     ................

000066e6 <map_font>:
    66e6:	25 01 00 2a 2b 2c 2d 2e 2f 30 31 32 33 34 35 36     %..*+,-./0123456
    66f6:	37 38 39 3a 3b 3c 3d 3e 3f 40 41 42 43 44 45 46     789:;<=>?@ABCDEF
    6706:	47 48 49 4a 4b 4c 4d                                GHIJKLM

0000670d <map_atmosphere>:
    670d:	1c 02 24 24 24 24 24 24 24 24 24 24 24 24 24 24     ..$$$$$$$$$$$$$$
    671d:	24 24 24 24 24 24 24 24 24 24 24 24 24 24 28 28     $$$$$$$$$$$$$$((
    672d:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    673d:	28 28 28 28 28 28 28 28 28 28                       ((((((((((

00006747 <map_star_dark>:
    6747:	01 01 13                                            ...

0000674a <map_star>:
    674a:	01 01 12                                            ...

0000674d <map_fire_lava>:
    674d:	01 01 0e                                            ...

00006750 <map_fire_top>:
    6750:	01 01 0d                                            ...

00006753 <map_fire_bottom>:
    6753:	01 01 0c                                            ...

00006756 <map_icicle_up>:
    6756:	01 01 0a                                            ...

00006759 <map_icicle_down>:
    6759:	01 01 09                                            ...

0000675c <map_ice_bottom>:
    675c:	01 01 04                                            ...

0000675f <map_ice_right>:
    675f:	01 01 03                                            ...

00006762 <map_ice_middle>:
    6762:	01 01 02                                            ...

00006765 <map_ice_left>:
    6765:	01 01 01                                            ...

00006768 <map_canvas>:
    6768:	0f 09 0f 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    6778:	11 15 00 00 00 00 00 00 00 00 00 00 00 00 00 16     ................
    6788:	15 00 00 00 00 00 00 00 00 00 00 00 00 00 16 15     ................
	...
    67a4:	00 16 15 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    67b4:	16 15 00 00 00 00 00 00 00 00 00 00 00 00 00 16     ................
    67c4:	15 00 00 00 00 00 00 00 00 00 00 00 00 00 16 15     ................
	...
    67e0:	00 16 4e 4f 4f 4f 4f 4f 4f 4f 4f 4f 4f 4f 4f 4f     ..NOOOOOOOOOOOOO
    67f0:	50                                                  P

000067f1 <map_splash>:
    67f1:	0f 05 1a 1a 1a 00 1a 1a 1a 00 1b 1c 1d 12 1a 1a     ................
    6801:	1a 00 1a 00 00 1a 13 00 00 1e 1f 20 00 1a 00 12     ........... ....
    6811:	13 1a 00 12 1a 00 00 00 21 22 23 00 1a 1a 1a 00     ........!"#.....
    6821:	1a 00 00 1a 00 12 00 25 26 27 00 00 00 1a 1a 1a     .......%&'......
    6831:	1a 00 1a 00 00 00 29 00 13 00 1a 1a 1a              ......)......

0000683e <map_tile_none>:
    683e:	01 01 00 00                                         ....

00006842 <__ctors_end>:
    6842:	11 24       	eor	r1, r1
    6844:	1f be       	out	0x3f, r1	; 63
    6846:	cf ef       	ldi	r28, 0xFF	; 255
    6848:	d0 e1       	ldi	r29, 0x10	; 16
    684a:	de bf       	out	0x3e, r29	; 62
    684c:	cd bf       	out	0x3d, r28	; 61

0000684e <__do_copy_data>:
    684e:	15 e0       	ldi	r17, 0x05	; 5
    6850:	a0 e0       	ldi	r26, 0x00	; 0
    6852:	b5 e0       	ldi	r27, 0x05	; 5
    6854:	e4 e1       	ldi	r30, 0x14	; 20
    6856:	f2 ed       	ldi	r31, 0xD2	; 210
    6858:	02 c0       	rjmp	.+4      	; 0x685e <__do_copy_data+0x10>
    685a:	05 90       	lpm	r0, Z+
    685c:	0d 92       	st	X+, r0
    685e:	a0 31       	cpi	r26, 0x10	; 16
    6860:	b1 07       	cpc	r27, r17
    6862:	d9 f7       	brne	.-10     	; 0x685a <__do_copy_data+0xc>

00006864 <__do_clear_bss>:
    6864:	10 e1       	ldi	r17, 0x10	; 16
    6866:	a0 e1       	ldi	r26, 0x10	; 16
    6868:	b5 e0       	ldi	r27, 0x05	; 5
    686a:	01 c0       	rjmp	.+2      	; 0x686e <.do_clear_bss_start>

0000686c <.do_clear_bss_loop>:
    686c:	1d 92       	st	X+, r1

0000686e <.do_clear_bss_start>:
    686e:	af 30       	cpi	r26, 0x0F	; 15
    6870:	b1 07       	cpc	r27, r17
    6872:	e1 f7       	brne	.-8      	; 0x686c <.do_clear_bss_loop>

00006874 <wdt_init>:

void wdt_init(void)
{

#if TRUE_RANDOM_GEN == 1	
	wdt_randomize();
    6874:	0e 94 d5 39 	call	0x73aa	; 0x73aa <wdt_randomize>
#endif

    MCUSR = 0;
    6878:	14 be       	out	0x34, r1	; 52
    wdt_disable();
    687a:	88 e1       	ldi	r24, 0x18	; 24
    687c:	0f b6       	in	r0, 0x3f	; 63
    687e:	f8 94       	cli
    6880:	80 93 60 00 	sts	0x0060, r24
    6884:	10 92 60 00 	sts	0x0060, r1
    6888:	0f be       	out	0x3f, r0	; 63

0000688a <Initialize>:


void Initialize(void){
	int i;

	if(!isEepromFormatted()) FormatEeprom();
    688a:	0e 94 97 3a 	call	0x752e	; 0x752e <isEepromFormatted>
    688e:	81 11       	cpse	r24, r1
    6890:	02 c0       	rjmp	.+4      	; 0x6896 <Initialize+0xc>
    6892:	0e 94 75 3a 	call	0x74ea	; 0x74ea <FormatEeprom>

	cli();
    6896:	f8 94       	cli
		mix_bank=0;
	#endif
	
	#if MIXER_CHAN4_TYPE == 0
		//initialize LFSR		
		tr4_barrel_lo=1;
    6898:	81 e0       	ldi	r24, 0x01	; 1
    689a:	80 93 e4 0c 	sts	0x0CE4, r24
		tr4_barrel_hi=1;		
    689e:	80 93 e5 0c 	sts	0x0CE5, r24
		tr4_params=0b00000001; //15 bits no divider (1)
    68a2:	80 93 e3 0c 	sts	0x0CE3, r24
		snesMouseEnabled=false;
	#endif

	//silence all sound channels
	for(i=0;i<CHANNELS;i++){
		mixer.channels.all[i].volume=0;
    68a6:	10 92 d0 0c 	sts	0x0CD0, r1
    68aa:	10 92 d6 0c 	sts	0x0CD6, r1
    68ae:	10 92 dc 0c 	sts	0x0CDC, r1
    68b2:	10 92 e2 0c 	sts	0x0CE2, r1
    68b6:	10 92 e8 0c 	sts	0x0CE8, r1
	}
	
	//set sync parameters. starts at odd field, in pre-eq pulses, line 1, vsync flag cleared
	sync_phase=0;
    68ba:	10 92 b6 0c 	sts	0x0CB6, r1
	sync_flags=0;
    68be:	10 92 b8 0c 	sts	0x0CB8, r1
	sync_pulse=SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES;
    68c2:	92 e1       	ldi	r25, 0x12	; 18
    68c4:	90 93 b7 0c 	sts	0x0CB7, r25

	//set rendering parameters
	render_lines_count=FRAME_LINES;
    68c8:	90 ee       	ldi	r25, 0xE0	; 224
    68ca:	90 93 be 0c 	sts	0x0CBE, r25
	first_render_line=FIRST_RENDER_LINE;
    68ce:	94 e1       	ldi	r25, 0x14	; 20
    68d0:	90 93 bd 0c 	sts	0x0CBD, r25

	joypad1_status_hi=0;
    68d4:	10 92 c2 0c 	sts	0x0CC2, r1
    68d8:	10 92 c1 0c 	sts	0x0CC1, r1
	joypad2_status_hi=0;
    68dc:	10 92 c6 0c 	sts	0x0CC6, r1
    68e0:	10 92 c5 0c 	sts	0x0CC5, r1
	sound_enabled=1;
    68e4:	80 93 cf 0c 	sts	0x0CCF, r24

	InitializeVideoMode();
    68e8:	0e 94 cd 47 	call	0x8f9a	; 0x8f9a <InitializeVideoMode>
    68ec:	84 e8       	ldi	r24, 0x84	; 132
    68ee:	90 e0       	ldi	r25, 0x00	; 0
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
		val=pgm_read_word(&io_table[j]);
    68f0:	fc 01       	movw	r30, r24
    68f2:	25 91       	lpm	r18, Z+
    68f4:	34 91       	lpm	r19, Z
		ptr=(u8*)(val&0xff);
    68f6:	f9 01       	movw	r30, r18
    68f8:	ff 27       	eor	r31, r31
		*ptr=val>>8;	
    68fa:	30 83       	st	Z, r19
    68fc:	02 96       	adiw	r24, 0x02	; 2
	InitializeVideoMode();
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
    68fe:	20 e0       	ldi	r18, 0x00	; 0
    6900:	82 3b       	cpi	r24, 0xB2	; 178
    6902:	92 07       	cpc	r25, r18
    6904:	a9 f7       	brne	.-22     	; 0x68f0 <Initialize+0x66>
		val=pgm_read_word(&io_table[j]);
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;	
	}

	sei();
    6906:	78 94       	sei
	
	DisplayLogo();
    6908:	0e 94 5c 48 	call	0x90b8	; 0x90b8 <DisplayLogo>
    690c:	0e 94 ba 66 	call	0xcd74	; 0xcd74 <main>
    6910:	0c 94 08 69 	jmp	0xd210	; 0xd210 <_exit>

00006914 <__bad_interrupt>:
    6914:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00006918 <sub_video_mode3>:
	;***************************************************

	sub_video_mode3:
		;de-activate sync timer interrupts
		;we will need to use the I flag to branch in a critical loop
		ldi ZL,(0<<OCIE1A)
    6918:	e0 e0       	ldi	r30, 0x00	; 0
		sts _SFR_MEM_ADDR(TIMSK1),ZL
    691a:	e0 93 6f 00 	sts	0x006F, r30

		;wait cycles to align with next hsync
		WAIT r26,183+241
    691e:	ad e8       	ldi	r26, 0x8D	; 141
    6920:	aa 95       	dec	r26
    6922:	f1 f7       	brne	.-4      	; 0x6920 <sub_video_mode3+0x8>
    6924:	00 00       	nop

		;Refresh ramtiles indexes in VRAM
		;This has to be done because the main
		;program may have altered the VRAM
		;after vsync and the rendering interrupt.
		lds r16,userRamTilesCount
    6926:	00 91 f3 0c 	lds	r16, 0x0CF3

		ldi ZL,lo8(ram_tiles_restore);
    692a:	e0 e5       	ldi	r30, 0x50	; 80
		ldi ZH,hi8(ram_tiles_restore);
    692c:	fc e0       	ldi	r31, 0x0C	; 12
		ldi r18,3
    692e:	23 e0       	ldi	r18, 0x03	; 3
		mul r16,r18
    6930:	02 9f       	mul	r16, r18
		add ZL,r0
    6932:	e0 0d       	add	r30, r0
		adc ZH,r1
    6934:	f1 1d       	adc	r31, r1

		ldi YL,lo8(vram)
    6936:	c0 e0       	ldi	r28, 0x00	; 0
		ldi YH,hi8(vram)
    6938:	d1 e0       	ldi	r29, 0x01	; 1

		lds r18,free_tile_index
    693a:	20 91 7e 0d 	lds	r18, 0x0D7E
		ldi r19,MAX_RAMTILES		;maximum possible ramtiles
    693e:	3c e3       	ldi	r19, 0x3C	; 60
		sub r19,r18					;sub free tile
    6940:	32 1b       	sub	r19, r18
		add r19,r16					;add user tiles
    6942:	30 0f       	add	r19, r16

		cp r18,r16
    6944:	20 17       	cp	r18, r16
		breq no_ramtiles
    6946:	51 f0       	breq	.+20     	; 0x695c <no_ramtiles>
		nop
    6948:	00 00       	nop
	...

0000694c <upd_loop>:
		nop
upd_loop:
		ld XL,Z+	;load vram offset of ramtile
    694c:	a1 91       	ld	r26, Z+
		ld XH,Z+
    694e:	b1 91       	ld	r27, Z+

		ld r17,X	;get latest VRAM tile that may have been modified my
    6950:	1c 91       	ld	r17, X
		st Z+,r17	;the main program and store it in the restore buffer
    6952:	11 93       	st	Z+, r17
		st X,r16	;write the ramtile index back to vram
    6954:	0c 93       	st	X, r16

		inc r16
    6956:	03 95       	inc	r16
		cp r16,r18
    6958:	02 17       	cp	r16, r18
		brlo upd_loop ;loop is 14 cycles
    695a:	c0 f3       	brcs	.-16     	; 0x694c <upd_loop>

0000695c <no_ramtiles>:

no_ramtiles:
		;wait for remaining maximum possible ramtiles
1:
		ldi r17,3
    695c:	13 e0       	ldi	r17, 0x03	; 3
		dec r17
    695e:	1a 95       	dec	r17
		brne .-4
    6960:	f1 f7       	brne	.-4      	; 0x695e <no_ramtiles+0x2>
		rjmp .
    6962:	00 c0       	rjmp	.+0      	; 0x6964 <no_ramtiles+0x8>
		dec r19
    6964:	3a 95       	dec	r19
		brne 1b
    6966:	d1 f7       	brne	.-12     	; 0x695c <no_ramtiles>

		;**********************
		; setup scroll stuff
		;**********************
	
		ldi YL,lo8(vram)
    6968:	c0 e0       	ldi	r28, 0x00	; 0
		ldi YH,hi8(vram)
    696a:	d1 e0       	ldi	r29, 0x01	; 1

		//add X scroll (coarse)
		lds r18,screen_scrollX ;ScreenScrollX
    696c:	20 91 b2 0c 	lds	r18, 0x0CB2
		mov r25,r18
    6970:	92 2f       	mov	r25, r18
		andi r18,0xf8	;(x>>3) * 8 interleave
    6972:	28 7f       	andi	r18, 0xF8	; 248
		add YL,r18
    6974:	c2 0f       	add	r28, r18

		;save Y wrap adress 
		movw r12,YL
    6976:	6e 01       	movw	r12, r28
	

		//add Y scroll (coarse)
		lds r16,screen_scrollY ;ScreenScrollY
    6978:	00 91 b3 0c 	lds	r16, 0x0CB3
		mov r22,r16
    697c:	60 2f       	mov	r22, r16
		lsr r16
    697e:	06 95       	lsr	r16
		lsr r16
    6980:	06 95       	lsr	r16
		lsr r16 ;/8
    6982:	06 95       	lsr	r16

        lds r17,screen_scrollHeight
    6984:	10 91 b4 0c 	lds	r17, 0x0CB4
        sub r17,r16
    6988:	10 1b       	sub	r17, r16
        mov r15,r17 ;Y tiles to draw before wrapping
    698a:	f1 2e       	mov	r15, r17

        mov r17,r16
    698c:	10 2f       	mov	r17, r16
        lsr r16
    698e:	06 95       	lsr	r16
        lsr r16
    6990:	06 95       	lsr	r16
        lsr r16 ;/8
    6992:	06 95       	lsr	r16
		add YH,r16      ; (bits 6-7)
    6994:	d0 0f       	add	r29, r16
		andi r17,0x7
    6996:	17 70       	andi	r17, 0x07	; 7
        add YL,r17      ;interleave (bits 3-5)
    6998:	c1 0f       	add	r28, r17
        andi r22,0x7    ;fine Y scrolling (bits 0-2)
    699a:	67 70       	andi	r22, 0x07	; 7
		;lds r20,tile_table_lo
		;lds r21,tile_table_hi
		;out _SFR_IO_ADDR(GPIOR1),r20 ;store for later
		;out _SFR_IO_ADDR(GPIOR2),r21

		lds r20,overlay_tile_table
    699c:	40 91 b0 0c 	lds	r20, 0x0CB0
		lds r21,overlay_tile_table+1
    69a0:	50 91 b1 0c 	lds	r21, 0x0CB1
		lds r6,tile_table_lo
    69a4:	60 90 ac 0c 	lds	r6, 0x0CAC
		lds r7,tile_table_hi
    69a8:	70 90 ad 0c 	lds	r7, 0x0CAD
		out _SFR_IO_ADDR(GPIOR1),r6 ;store for later
    69ac:	6a bc       	out	0x2a, r6	; 42
		out _SFR_IO_ADDR(GPIOR2),r7
    69ae:	7b bc       	out	0x2b, r7	; 43


		;save main section value	
		movw r10,YL
    69b0:	5e 01       	movw	r10, r28
		mov r23,r22
    69b2:	76 2f       	mov	r23, r22
		mov r24,r15
    69b4:	8f 2d       	mov	r24, r15
		mov r9,r25
    69b6:	99 2e       	mov	r9, r25

		;load values for overlay if it's activated (overlay_height>0)
		
		;compute beginning of overlay in vram 
		lds r16,screen_scrollHeight
    69b8:	00 91 b4 0c 	lds	r16, 0x0CB4
		mov r18,r16
    69bc:	20 2f       	mov	r18, r16
		lsr r16
    69be:	06 95       	lsr	r16
		lsr r16
    69c0:	06 95       	lsr	r16
		lsr r16			;hi8
    69c2:	06 95       	lsr	r16
		inc r16			;add 0x100 ram offset
    69c4:	03 95       	inc	r16
		andi r18,7		;lo8
    69c6:	27 70       	andi	r18, 0x07	; 7
		
		lds r19,overlay_height	
    69c8:	30 91 af 0c 	lds	r19, 0x0CAF
		cpi r19,0
    69cc:	30 30       	cpi	r19, 0x00	; 0
		in r0, _SFR_IO_ADDR(SREG)
    69ce:	0f b6       	in	r0, 0x3f	; 63

		sbrs r0,SREG_Z
    69d0:	01 fe       	sbrs	r0, 1
		clr r22
    69d2:	66 27       	eor	r22, r22
		sbrs r0,SREG_Z
    69d4:	01 fe       	sbrs	r0, 1
		mov YL,r18		;lo8(overlay_vram)
    69d6:	c2 2f       	mov	r28, r18
		sbrs r0,SREG_Z
    69d8:	01 fe       	sbrs	r0, 1
		mov YH,r16		;hi8(overlay_vram)
    69da:	d0 2f       	mov	r29, r16
		sbrs r0,SREG_Z
    69dc:	01 fe       	sbrs	r0, 1
		ser r24
    69de:	8f ef       	ldi	r24, 0xFF	; 255
		sbrs r0,SREG_Z
    69e0:	01 fe       	sbrs	r0, 1
		clr r9
    69e2:	99 24       	eor	r9, r9

		sbrs r0,SREG_Z
    69e4:	01 fe       	sbrs	r0, 1
		out _SFR_IO_ADDR(GPIOR1),r20
    69e6:	4a bd       	out	0x2a, r20	; 42
		sbrs r0,SREG_Z
    69e8:	01 fe       	sbrs	r0, 1
		out _SFR_IO_ADDR(GPIOR2),r21
    69ea:	5b bd       	out	0x2b, r21	; 43


		//ldi r16,SCREEN_TILES_V*TILE_HEIGHT; total scanlines to draw
		//mov r8,r16
		lds r8,render_lines_count ;total scanlines to draw
    69ec:	80 90 be 0c 	lds	r8, 0x0CBE

000069f0 <next_tile_line>:
	;r23 = Main section tile row
	;r24 = Current Y tiles to draw before wrapping
	;r25 = Main section scrollX

	next_tile_line:
		rcall hsync_pulse
    69f0:	bc d3       	rcall	.+1912   	; 0x716a <hsync_pulse>

		WAIT r18,HSYNC_USABLE_CYCLES - AUDIO_OUT_HSYNC_CYCLES
    69f2:	24 e0       	ldi	r18, 0x04	; 4
    69f4:	2a 95       	dec	r18
    69f6:	f1 f7       	brne	.-4      	; 0x69f4 <next_tile_line+0x4>
    69f8:	00 00       	nop
				
		call render_tile_line
    69fa:	0e 94 3e 35 	call	0x6a7c	; 0x6a7c <render_tile_line>

		WAIT r18,58
    69fe:	23 e1       	ldi	r18, 0x13	; 19
    6a00:	2a 95       	dec	r18
    6a02:	f1 f7       	brne	.-4      	; 0x6a00 <next_tile_line+0x10>
    6a04:	00 00       	nop

		inc r22
    6a06:	63 95       	inc	r22
		dec r8
    6a08:	8a 94       	dec	r8
		breq text_frame_end
    6a0a:	09 f1       	breq	.+66     	; 0x6a4e <text_frame_end>

		cpi r22,TILE_HEIGHT ;last char line? 1
    6a0c:	68 30       	cpi	r22, 0x08	; 8
		breq next_tile_row
    6a0e:	29 f0       	breq	.+10     	; 0x6a1a <next_tile_row>

		;wait to align with next_tile_row instructions (+1 cycle for the breq)
		WAIT r16,25
    6a10:	08 e0       	ldi	r16, 0x08	; 8
    6a12:	0a 95       	dec	r16
    6a14:	f1 f7       	brne	.-4      	; 0x6a12 <next_tile_line+0x22>
    6a16:	00 00       	nop
		rjmp next_tile_line
    6a18:	eb cf       	rjmp	.-42     	; 0x69f0 <next_tile_line>

00006a1a <next_tile_row>:

	next_tile_row:

		clr r22		;clear current char line
    6a1a:	66 27       	eor	r22, r22

		;increment vram pointer next row
		mov r16,YL
    6a1c:	0c 2f       	mov	r16, r28
		andi r16,0x7
    6a1e:	07 70       	andi	r16, 0x07	; 7
		cpi r16,7
    6a20:	07 30       	cpi	r16, 0x07	; 7
		breq 1f
    6a22:	11 f0       	breq	.+4      	; 0x6a28 <next_tile_row+0xe>
		inc YL
    6a24:	c3 95       	inc	r28
		rjmp 2f
    6a26:	02 c0       	rjmp	.+4      	; 0x6a2c <next_tile_row+0x12>
	1:
		andi YL,0xf8
    6a28:	c8 7f       	andi	r28, 0xF8	; 248
		inc YH
    6a2a:	d3 95       	inc	r29
	2:

		dec r24		;wrap section?
    6a2c:	8a 95       	dec	r24
		brne .+2
    6a2e:	09 f4       	brne	.+2      	; 0x6a32 <next_tile_row+0x18>
		movw YL,r12
    6a30:	e6 01       	movw	r28, r12

		dec r19
    6a32:	3a 95       	dec	r19
		brne .+2
    6a34:	09 f4       	brne	.+2      	; 0x6a38 <next_tile_row+0x1e>
		mov r22,r23	;section tile row
    6a36:	67 2f       	mov	r22, r23
		brne .+2
    6a38:	09 f4       	brne	.+2      	; 0x6a3c <next_tile_row+0x22>
		movw YL,r10 ;vram adress
    6a3a:	e5 01       	movw	r28, r10
		brne .+2
    6a3c:	09 f4       	brne	.+2      	; 0x6a40 <next_tile_row+0x26>
		mov r24,r15 ;Y wrapping
    6a3e:	8f 2d       	mov	r24, r15
		brne .+2
    6a40:	09 f4       	brne	.+2      	; 0x6a44 <next_tile_row+0x2a>
		mov r9,r25  ;scrollX
    6a42:	99 2e       	mov	r9, r25

		brne .+2
    6a44:	09 f4       	brne	.+2      	; 0x6a48 <next_tile_row+0x2e>
		out _SFR_IO_ADDR(GPIOR1),r6  ;tileset
    6a46:	6a bc       	out	0x2a, r6	; 42
		brne .+2
    6a48:	09 f4       	brne	.+2      	; 0x6a4c <next_tile_row+0x32>
		out _SFR_IO_ADDR(GPIOR2),r7  ;tilset
    6a4a:	7b bc       	out	0x2b, r7	; 43

		rjmp next_tile_line
    6a4c:	d1 cf       	rjmp	.-94     	; 0x69f0 <next_tile_line>

00006a4e <text_frame_end>:

	text_frame_end:

		WAIT r18,28
    6a4e:	29 e0       	ldi	r18, 0x09	; 9
    6a50:	2a 95       	dec	r18
    6a52:	f1 f7       	brne	.-4      	; 0x6a50 <text_frame_end+0x2>
    6a54:	00 00       	nop

		rcall hsync_pulse ;145
    6a56:	89 d3       	rcall	.+1810   	; 0x716a <hsync_pulse>
	
		clr r1
    6a58:	11 24       	eor	r1, r1
		call RestoreBackground
    6a5a:	0e 94 80 46 	call	0x8d00	; 0x8d00 <RestoreBackground>

		;set vsync flag & flip field
		lds ZL,sync_flags
    6a5e:	e0 91 b8 0c 	lds	r30, 0x0CB8
		ldi r20,SYNC_FLAG_FIELD
    6a62:	42 e0       	ldi	r20, 0x02	; 2
		ori ZL,SYNC_FLAG_VSYNC
    6a64:	e1 60       	ori	r30, 0x01	; 1
		eor ZL,r20
    6a66:	e4 27       	eor	r30, r20
		sts sync_flags,ZL
    6a68:	e0 93 b8 0c 	sts	0x0CB8, r30
	
		cli 
    6a6c:	f8 94       	cli

		;re-activate sync timer interrupts
		ldi ZL,(1<<OCIE1A)
    6a6e:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIMSK1),ZL
    6a70:	e0 93 6f 00 	sts	0x006F, r30
			
		;clear any pending timer int
		ldi ZL,(1<<OCF1A)
    6a74:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIFR1),ZL
    6a76:	e0 93 36 00 	sts	0x0036, r30

		ret
    6a7a:	08 95       	ret

00006a7c <render_tile_line>:
	; Can destroy: r0,r1,r2,r3,r4,r5,r6,r7,r13,r16,r17,r18,r19,r20,r21,Z
	; 
	; cycles  = 1495
	;*************************************************
	render_tile_line:
		push YL
    6a7c:	cf 93       	push	r28
		push YH
    6a7e:	df 93       	push	r29
		push r23
    6a80:	7f 93       	push	r23
		push r22
    6a82:	6f 93       	push	r22
		push r19
    6a84:	3f 93       	push	r19
		push r13
    6a86:	df 92       	push	r13
		push r12
    6a88:	cf 92       	push	r12
		push r9
    6a8a:	9f 92       	push	r9
		push r7
    6a8c:	7f 92       	push	r7
		push r6
    6a8e:	6f 92       	push	r6
		;--------------------------
		; Rendering 
		;---------------------------

		;get tile row offset
		ldi r23,TILE_WIDTH ;tile width in pixels
    6a90:	78 e0       	ldi	r23, 0x08	; 8
		mul r22,r23
    6a92:	67 9f       	mul	r22, r23

		;compute base adresses for ROM and RAM tiles
		in r16,_SFR_IO_ADDR(GPIOR1) ;tile_table_lo
    6a94:	0a b5       	in	r16, 0x2a	; 42
		in r17,_SFR_IO_ADDR(GPIOR2) ;tile_table_hi
    6a96:	1b b5       	in	r17, 0x2b	; 43
		subi r16,lo8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    6a98:	00 50       	subi	r16, 0x00	; 0
		sbci r17,hi8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    6a9a:	17 40       	sbci	r17, 0x07	; 7

		add r16,r0
    6a9c:	00 0d       	add	r16, r0
		adc r17,r1
    6a9e:	11 1d       	adc	r17, r1
		movw r2,r16			;rom tiles adress
    6aa0:	18 01       	movw	r2, r16

		ldi r16,lo8(ram_tiles)
    6aa2:	00 e5       	ldi	r16, 0x50	; 80
		ldi r17,hi8(ram_tiles)
    6aa4:	15 e0       	ldi	r17, 0x05	; 5
		add r16,r0
    6aa6:	00 0d       	add	r16, r0
		adc r17,r1
    6aa8:	11 1d       	adc	r17, r1
		movw r4,r16			;ram tiles adress
    6aaa:	28 01       	movw	r4, r16

		ldi r19,TILE_HEIGHT*TILE_WIDTH
    6aac:	30 e4       	ldi	r19, 0x40	; 64
		ldi r17,SCREEN_TILES_H-1	;main loop counter
    6aae:	1b e1       	ldi	r17, 0x1B	; 27


		;handle fine scroll offset
		;lds r22,screenSections+scrollX
		mov r22,r9
    6ab0:	69 2d       	mov	r22, r9
		andi r22,0x7		
    6ab2:	67 70       	andi	r22, 0x07	; 7
		mov r14,r22	;pixels to draw on last tile	
    6ab4:	e6 2e       	mov	r14, r22
		cli			;no trailing pixel to draw (hack, see end: )
    6ab6:	f8 94       	cli
		breq .+2
    6ab8:	09 f0       	breq	.+2      	; 0x6abc <render_tile_line+0x40>
		sei			;some trailing pixel to draw (hack, see end: )
    6aba:	78 94       	sei

		;get first pixel of last tile in ROM (for ROM tiles fine scroll)
		;and adress of next pixel
		movw ZL,YL
    6abc:	fe 01       	movw	r30, r28
		subi ZL,-(SCREEN_TILES_H*8)
    6abe:	e0 52       	subi	r30, 0x20	; 32
		ld r18,Z
    6ac0:	20 81       	ld	r18, Z
		mul r18,r19 	;tile*width*height
    6ac2:	23 9f       	mul	r18, r19
	    add r0,r2    ;add ROM title table address +row offset
    6ac4:	02 0c       	add	r0, r2
	    adc r1,r3
    6ac6:	13 1c       	adc	r1, r3
		movw ZL,r0
    6ac8:	f0 01       	movw	r30, r0
		lpm r9,Z+	;hold first pixel until end 
    6aca:	95 90       	lpm	r9, Z+
		movw r12,ZL ;hold second pixel adress until end
    6acc:	6f 01       	movw	r12, r30


		;compute first tile adress
	    ld r18,Y     	;load next tile # from VRAM
    6ace:	28 81       	ld	r18, Y
		subi YL,-8
    6ad0:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT
    6ad2:	2c 31       	cpi	r18, 0x1C	; 28
		in r16,_SFR_IO_ADDR(SREG)	;save the carry flag for later	
    6ad4:	0f b7       	in	r16, 0x3f	; 63
		mul r18,r19 	;tile*width*height
    6ad6:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles	
    6ad8:	a1 01       	movw	r20, r2
		sbrc r16,SREG_C
    6ada:	00 fd       	sbrc	r16, 0
		movw r20,r4		;ram tiles
    6adc:	a2 01       	movw	r20, r4
	    add r0,r20    ;add title table address +row offset
    6ade:	04 0e       	add	r0, r20
	    adc r1,r21
    6ae0:	15 1e       	adc	r1, r21
		movw XL,r0
    6ae2:	d0 01       	movw	r26, r0


		;compute second tile adress
	    ld r18,Y     	;load next tile # from VRAM
    6ae4:	28 81       	ld	r18, Y
		subi YL,-8
    6ae6:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT
    6ae8:	2c 31       	cpi	r18, 0x1C	; 28
		in r7,_SFR_IO_ADDR(SREG)	;save the carry flag for later
    6aea:	7f b6       	in	r7, 0x3f	; 63
		bst r7,SREG_C
    6aec:	70 fa       	bst	r7, 0
		mul r18,r19 	;tile*width*height
    6aee:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles
    6af0:	a1 01       	movw	r20, r2
		brtc .+2
    6af2:	0e f4       	brtc	.+2      	; 0x6af6 <render_tile_line+0x7a>
		movw r20,r4		;ram tiles
    6af4:	a2 01       	movw	r20, r4
	    add r0,r20      ;add title table address +row offset
    6af6:	04 0e       	add	r0, r20
	    adc r1,r21
    6af8:	15 1e       	adc	r1, r21
		movw ZL,r0
    6afa:	f0 01       	movw	r30, r0
		movw r6,ZL		;push Z
    6afc:	3f 01       	movw	r6, r30

00006afe <do_fine_scroll>:


	do_fine_scroll:
		;output 1st tile with fine scroll offset 
		clr r0
    6afe:	00 24       	eor	r0, r0
		add XL,r22	;add fine offset
    6b00:	a6 0f       	add	r26, r22
		adc XH,r0
    6b02:	b0 1d       	adc	r27, r0

		;compute jump offset
		ldi r23,3
    6b04:	73 e0       	ldi	r23, 0x03	; 3
		mul r22,r23 ;3 instructions
    6b06:	67 9f       	mul	r22, r23
	
		sbrs r16,SREG_C
    6b08:	00 ff       	sbrs	r16, 0
		rjmp rom_fine_scroll
    6b0a:	22 c0       	rjmp	.+68     	; 0x6b50 <rom_fine_scroll>

00006b0c <ram_fine_scroll>:

	/***FINE SCROLL RAM LOOP***/
	ram_fine_scroll:
		rjmp .
    6b0c:	00 c0       	rjmp	.+0      	; 0x6b0e <ram_fine_scroll+0x2>
		ldi r22,lo8(pm(ram_fine_scroll_loop))
    6b0e:	6e e8       	ldi	r22, 0x8E	; 142
		ldi r23,hi8(pm(ram_fine_scroll_loop))
    6b10:	75 e3       	ldi	r23, 0x35	; 53
		add r22,r0
    6b12:	60 0d       	add	r22, r0
		adc r23,r1
    6b14:	71 1d       	adc	r23, r1
		push r22
    6b16:	6f 93       	push	r22
		push r23	
    6b18:	7f 93       	push	r23
		ret ;jump into ram_fine_scroll_loop
    6b1a:	08 95       	ret

00006b1c <ram_fine_scroll_loop>:
	ram_fine_scroll_loop:
		.rept 8
			ld r16,X+
			lpm
			out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		.endr
    6b1c:	0d 91       	ld	r16, X+
    6b1e:	c8 95       	lpm
    6b20:	08 b9       	out	0x08, r16	; 8
    6b22:	0d 91       	ld	r16, X+
    6b24:	c8 95       	lpm
    6b26:	08 b9       	out	0x08, r16	; 8
    6b28:	0d 91       	ld	r16, X+
    6b2a:	c8 95       	lpm
    6b2c:	08 b9       	out	0x08, r16	; 8
    6b2e:	0d 91       	ld	r16, X+
    6b30:	c8 95       	lpm
    6b32:	08 b9       	out	0x08, r16	; 8
    6b34:	0d 91       	ld	r16, X+
    6b36:	c8 95       	lpm
    6b38:	08 b9       	out	0x08, r16	; 8
    6b3a:	0d 91       	ld	r16, X+
    6b3c:	c8 95       	lpm
    6b3e:	08 b9       	out	0x08, r16	; 8
    6b40:	0d 91       	ld	r16, X+
    6b42:	c8 95       	lpm
    6b44:	08 b9       	out	0x08, r16	; 8
    6b46:	0d 91       	ld	r16, X+
    6b48:	c8 95       	lpm
    6b4a:	08 b9       	out	0x08, r16	; 8

		;branch to tile #2
		brtc romloop
    6b4c:	1e f5       	brtc	.+70     	; 0x6b94 <romloop>
		rjmp ramloop
    6b4e:	40 c0       	rjmp	.+128    	; 0x6bd0 <ramloop>

00006b50 <rom_fine_scroll>:

	/***FINE SCROLL ROM LOOP***/
	rom_fine_scroll:
		movw ZL,XL
    6b50:	fd 01       	movw	r30, r26
		ldi r22,lo8(pm(rom_fine_scroll_loop))	
    6b52:	60 eb       	ldi	r22, 0xB0	; 176
		ldi r23,hi8(pm(rom_fine_scroll_loop))
    6b54:	75 e3       	ldi	r23, 0x35	; 53
		add r22,r0
    6b56:	60 0d       	add	r22, r0
		adc r23,r1
    6b58:	71 1d       	adc	r23, r1
		push r22
    6b5a:	6f 93       	push	r22
		push r23	
    6b5c:	7f 93       	push	r23
		ret
    6b5e:	08 95       	ret

00006b60 <rom_fine_scroll_loop>:
	rom_fine_scroll_loop:
		.rept 8
			lpm r16,Z+
			rjmp .
			out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		.endr 
    6b60:	05 91       	lpm	r16, Z+
    6b62:	00 c0       	rjmp	.+0      	; 0x6b64 <rom_fine_scroll_loop+0x4>
    6b64:	08 b9       	out	0x08, r16	; 8
    6b66:	05 91       	lpm	r16, Z+
    6b68:	00 c0       	rjmp	.+0      	; 0x6b6a <rom_fine_scroll_loop+0xa>
    6b6a:	08 b9       	out	0x08, r16	; 8
    6b6c:	05 91       	lpm	r16, Z+
    6b6e:	00 c0       	rjmp	.+0      	; 0x6b70 <rom_fine_scroll_loop+0x10>
    6b70:	08 b9       	out	0x08, r16	; 8
    6b72:	05 91       	lpm	r16, Z+
    6b74:	00 c0       	rjmp	.+0      	; 0x6b76 <rom_fine_scroll_loop+0x16>
    6b76:	08 b9       	out	0x08, r16	; 8
    6b78:	05 91       	lpm	r16, Z+
    6b7a:	00 c0       	rjmp	.+0      	; 0x6b7c <rom_fine_scroll_loop+0x1c>
    6b7c:	08 b9       	out	0x08, r16	; 8
    6b7e:	05 91       	lpm	r16, Z+
    6b80:	00 c0       	rjmp	.+0      	; 0x6b82 <rom_fine_scroll_loop+0x22>
    6b82:	08 b9       	out	0x08, r16	; 8
    6b84:	05 91       	lpm	r16, Z+
    6b86:	00 c0       	rjmp	.+0      	; 0x6b88 <rom_fine_scroll_loop+0x28>
    6b88:	08 b9       	out	0x08, r16	; 8
    6b8a:	05 91       	lpm	r16, Z+
    6b8c:	00 c0       	rjmp	.+0      	; 0x6b8e <rom_fine_scroll_loop+0x2e>
    6b8e:	08 b9       	out	0x08, r16	; 8
	
		movw ZL,r6		;restore Z for tile #2
    6b90:	f3 01       	movw	r30, r6

		;branch to tile #2
		brts ramloop
    6b92:	f6 f0       	brts	.+60     	; 0x6bd0 <ramloop>

00006b94 <romloop>:

	
	romloop:
	    lpm r16,Z+
    6b94:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    6b96:	08 b9       	out	0x08, r16	; 8
	    ld r18,Y     ;load next tile # from VRAM
    6b98:	28 81       	ld	r18, Y

	    lpm r16,Z+
    6b9a:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 2
    6b9c:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    6b9e:	23 9f       	mul	r18, r19

	    lpm r16,Z+
    6ba0:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 3
    6ba2:	08 b9       	out	0x08, r16	; 8
		subi YL,-8
    6ba4:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT		;is tile in RAM or ROM? (RAM tiles have indexes<RAM_TILES_COUNT)
    6ba6:	2c 31       	cpi	r18, 0x1C	; 28
		
	    lpm r16,Z+
    6ba8:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    6baa:	08 b9       	out	0x08, r16	; 8
		brsh .+2		;skip if next tile is in ROM	
    6bac:	08 f4       	brcc	.+2      	; 0x6bb0 <romloop+0x1c>
		movw r20,r4 	;load RAM title table address +row offset	
    6bae:	a2 01       	movw	r20, r4
   
	    lpm r16,Z+
    6bb0:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 5
    6bb2:	08 b9       	out	0x08, r16	; 8
		add r0,r20		;add tile table address +row offset lsb
    6bb4:	04 0e       	add	r0, r20
	    adc r1,r21		;add title table address +row offset msb
    6bb6:	15 1e       	adc	r1, r21

	    lpm r16,Z+
    6bb8:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 6
    6bba:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT	
    6bbc:	2c 31       	cpi	r18, 0x1C	; 28
		dec r17			;decrement tiles to draw on line (does not affect carry)
    6bbe:	1a 95       	dec	r17
   
	    lpm r16,Z+
    6bc0:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 7   
    6bc2:	08 b9       	out	0x08, r16	; 8
	    lpm r16,Z+
    6bc4:	05 91       	lpm	r16, Z+

		breq end	
    6bc6:	39 f1       	breq	.+78     	; 0x6c16 <end>
	    movw ZL,r0   	;copy next tile adress
    6bc8:	f0 01       	movw	r30, r0

	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    6bca:	08 b9       	out	0x08, r16	; 8
	    brcc romloop
    6bcc:	18 f7       	brcc	.-58     	; 0x6b94 <romloop>
	
		rjmp .
    6bce:	00 c0       	rjmp	.+0      	; 0x6bd0 <ramloop>

00006bd0 <ramloop>:

	ramloop:

	    ld r16,Z+
    6bd0:	01 91       	ld	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    6bd2:	08 b9       	out	0x08, r16	; 8
	    ld r18,Y     ;load next tile # from VRAM
    6bd4:	28 81       	ld	r18, Y

	    ld r16,Z+ 
    6bd6:	01 91       	ld	r16, Z+
		subi YL,-8   		
    6bd8:	c8 5f       	subi	r28, 0xF8	; 248
		out _SFR_IO_ADDR(DATA_PORT),r16 		;pixel 2
    6bda:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    6bdc:	23 9f       	mul	r18, r19

	    ld r16,Z+
    6bde:	01 91       	ld	r16, Z+
		nop
    6be0:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16         ;pixel 3
    6be2:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    6be4:	2c 31       	cpi	r18, 0x1C	; 28
		rjmp .
    6be6:	00 c0       	rjmp	.+0      	; 0x6be8 <ramloop+0x18>
   
	    ld r16,Z+
    6be8:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    6bea:	08 b9       	out	0x08, r16	; 8
		brcs .+2 
    6bec:	08 f0       	brcs	.+2      	; 0x6bf0 <ramloop+0x20>
		movw r20,r2 	;ROM title table address +row offset	
    6bee:	a1 01       	movw	r20, r2
   
   
	    ld r16,Z+
    6bf0:	01 91       	ld	r16, Z+
	    add r0,r20    ;add title table address +row offset
    6bf2:	04 0e       	add	r0, r20
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 5
    6bf4:	08 b9       	out	0x08, r16	; 8
	    adc r1,r21
    6bf6:	15 1e       	adc	r1, r21
		rjmp .
    6bf8:	00 c0       	rjmp	.+0      	; 0x6bfa <ramloop+0x2a>
    
		ld r16,Z+		
    6bfa:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 6
    6bfc:	08 b9       	out	0x08, r16	; 8
		ld r7,Z+
    6bfe:	71 90       	ld	r7, Z+
	    ld r16,Z+	
    6c00:	01 91       	ld	r16, Z+
	
		movw ZL,r0
    6c02:	f0 01       	movw	r30, r0
		out _SFR_IO_ADDR(DATA_PORT),r7      ;pixel 7   
    6c04:	78 b8       	out	0x08, r7	; 8
		nop
    6c06:	00 00       	nop
		cpi r18,RAM_TILES_COUNT	
    6c08:	2c 31       	cpi	r18, 0x1C	; 28
	    dec r17
    6c0a:	1a 95       	dec	r17
	    breq end
    6c0c:	21 f0       	breq	.+8      	; 0x6c16 <end>
	
		nop
    6c0e:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    6c10:	08 b9       	out	0x08, r16	; 8
	
	    brcc romloop
    6c12:	00 f6       	brcc	.-128    	; 0x6b94 <romloop>
		rjmp ramloop
    6c14:	dd cf       	rjmp	.-70     	; 0x6bd0 <ramloop>

00006c16 <end>:
	
	end:
		out _SFR_IO_ADDR(DATA_PORT),r16  	;pixel 8
    6c16:	08 b9       	out	0x08, r16	; 8
		brid end_fine_scroll				;hack: interrupt flag=0 => no fine offset pixel to draw
    6c18:	27 f5       	brid	.+72     	; 0x6c62 <end_fine_scroll>
		brcc end_rom_fine_scroll_loop
    6c1a:	30 f4       	brcc	.+12     	; 0x6c28 <end_rom_fine_scroll_loop>

	/***END RAM LOOP***/
		movw ZL,r0
    6c1c:	f0 01       	movw	r30, r0

00006c1e <end_ram_fine_scroll_loop>:
	end_ram_fine_scroll_loop:
		ld r16,Z+
    6c1e:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
    6c20:	08 b9       	out	0x08, r16	; 8
		dec r14
    6c22:	ea 94       	dec	r14
		brne end_ram_fine_scroll_loop
    6c24:	e1 f7       	brne	.-8      	; 0x6c1e <end_ram_fine_scroll_loop>
		rjmp end_fine_scroll_ram
    6c26:	1f c0       	rjmp	.+62     	; 0x6c66 <end_fine_scroll_ram>

00006c28 <end_rom_fine_scroll_loop>:

	/***END ROM LOOP***/
	end_rom_fine_scroll_loop:
		movw ZL,r12
    6c28:	f6 01       	movw	r30, r12
		nop
    6c2a:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r9        ;output saved 1st pixel
    6c2c:	98 b8       	out	0x08, r9	; 8
		dec r14
    6c2e:	ea 94       	dec	r14
		breq end_fine_scroll_rom
    6c30:	c9 f0       	breq	.+50     	; 0x6c64 <end_fine_scroll_rom>
	.rept 6
		lpm r16,Z+		
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		dec r14
		breq end_fine_scroll_rom
	.endr
    6c32:	05 91       	lpm	r16, Z+
    6c34:	08 b9       	out	0x08, r16	; 8
    6c36:	ea 94       	dec	r14
    6c38:	a9 f0       	breq	.+42     	; 0x6c64 <end_fine_scroll_rom>
    6c3a:	05 91       	lpm	r16, Z+
    6c3c:	08 b9       	out	0x08, r16	; 8
    6c3e:	ea 94       	dec	r14
    6c40:	89 f0       	breq	.+34     	; 0x6c64 <end_fine_scroll_rom>
    6c42:	05 91       	lpm	r16, Z+
    6c44:	08 b9       	out	0x08, r16	; 8
    6c46:	ea 94       	dec	r14
    6c48:	69 f0       	breq	.+26     	; 0x6c64 <end_fine_scroll_rom>
    6c4a:	05 91       	lpm	r16, Z+
    6c4c:	08 b9       	out	0x08, r16	; 8
    6c4e:	ea 94       	dec	r14
    6c50:	49 f0       	breq	.+18     	; 0x6c64 <end_fine_scroll_rom>
    6c52:	05 91       	lpm	r16, Z+
    6c54:	08 b9       	out	0x08, r16	; 8
    6c56:	ea 94       	dec	r14
    6c58:	29 f0       	breq	.+10     	; 0x6c64 <end_fine_scroll_rom>
    6c5a:	05 91       	lpm	r16, Z+
    6c5c:	08 b9       	out	0x08, r16	; 8
    6c5e:	ea 94       	dec	r14
    6c60:	09 f0       	breq	.+2      	; 0x6c64 <end_fine_scroll_rom>

00006c62 <end_fine_scroll>:
	...

00006c64 <end_fine_scroll_rom>:
	...

00006c66 <end_fine_scroll_ram>:
	end_fine_scroll:	
		nop
	end_fine_scroll_rom:
		nop
	end_fine_scroll_ram:
		clr r16	
    6c66:	00 27       	eor	r16, r16
		out _SFR_IO_ADDR(DATA_PORT),r16   
    6c68:	08 b9       	out	0x08, r16	; 8

		pop r6
    6c6a:	6f 90       	pop	r6
		pop r7
    6c6c:	7f 90       	pop	r7
		pop r9
    6c6e:	9f 90       	pop	r9
		pop r12
    6c70:	cf 90       	pop	r12
		pop r13
    6c72:	df 90       	pop	r13
		pop r19
    6c74:	3f 91       	pop	r19
		pop r22
    6c76:	6f 91       	pop	r22
		pop r23
    6c78:	7f 91       	pop	r23
		pop YH
    6c7a:	df 91       	pop	r29
		pop YL
    6c7c:	cf 91       	pop	r28

		ret
    6c7e:	08 95       	ret

00006c80 <CopyFlashTile>:
; C-callable
; r24=Source ROM tile index
; r22=Dest RAM tile index
;************************************
CopyFlashTile:
	ldi r18,TILE_HEIGHT*TILE_WIDTH
    6c80:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	lds ZL,tile_table_lo
    6c82:	e0 91 ac 0c 	lds	r30, 0x0CAC
	lds ZH,tile_table_hi
    6c86:	f0 91 ad 0c 	lds	r31, 0x0CAD
	mul r24,r18
    6c8a:	82 9f       	mul	r24, r18
	add ZL,r0
    6c8c:	e0 0d       	add	r30, r0
	adc ZH,r1
    6c8e:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    6c90:	a0 e5       	ldi	r26, 0x50	; 80
	ldi XH,hi8(ram_tiles)
    6c92:	b5 e0       	ldi	r27, 0x05	; 5
	mul r22,r18
    6c94:	62 9f       	mul	r22, r18
	add XL,r0
    6c96:	a0 0d       	add	r26, r0
	adc XH,r1
    6c98:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	lpm r1,Z+
	st X+,r1
.endr
    6c9a:	15 90       	lpm	r1, Z+
    6c9c:	1d 92       	st	X+, r1
    6c9e:	15 90       	lpm	r1, Z+
    6ca0:	1d 92       	st	X+, r1
    6ca2:	15 90       	lpm	r1, Z+
    6ca4:	1d 92       	st	X+, r1
    6ca6:	15 90       	lpm	r1, Z+
    6ca8:	1d 92       	st	X+, r1
    6caa:	15 90       	lpm	r1, Z+
    6cac:	1d 92       	st	X+, r1
    6cae:	15 90       	lpm	r1, Z+
    6cb0:	1d 92       	st	X+, r1
    6cb2:	15 90       	lpm	r1, Z+
    6cb4:	1d 92       	st	X+, r1
    6cb6:	15 90       	lpm	r1, Z+
    6cb8:	1d 92       	st	X+, r1
    6cba:	15 90       	lpm	r1, Z+
    6cbc:	1d 92       	st	X+, r1
    6cbe:	15 90       	lpm	r1, Z+
    6cc0:	1d 92       	st	X+, r1
    6cc2:	15 90       	lpm	r1, Z+
    6cc4:	1d 92       	st	X+, r1
    6cc6:	15 90       	lpm	r1, Z+
    6cc8:	1d 92       	st	X+, r1
    6cca:	15 90       	lpm	r1, Z+
    6ccc:	1d 92       	st	X+, r1
    6cce:	15 90       	lpm	r1, Z+
    6cd0:	1d 92       	st	X+, r1
    6cd2:	15 90       	lpm	r1, Z+
    6cd4:	1d 92       	st	X+, r1
    6cd6:	15 90       	lpm	r1, Z+
    6cd8:	1d 92       	st	X+, r1
    6cda:	15 90       	lpm	r1, Z+
    6cdc:	1d 92       	st	X+, r1
    6cde:	15 90       	lpm	r1, Z+
    6ce0:	1d 92       	st	X+, r1
    6ce2:	15 90       	lpm	r1, Z+
    6ce4:	1d 92       	st	X+, r1
    6ce6:	15 90       	lpm	r1, Z+
    6ce8:	1d 92       	st	X+, r1
    6cea:	15 90       	lpm	r1, Z+
    6cec:	1d 92       	st	X+, r1
    6cee:	15 90       	lpm	r1, Z+
    6cf0:	1d 92       	st	X+, r1
    6cf2:	15 90       	lpm	r1, Z+
    6cf4:	1d 92       	st	X+, r1
    6cf6:	15 90       	lpm	r1, Z+
    6cf8:	1d 92       	st	X+, r1
    6cfa:	15 90       	lpm	r1, Z+
    6cfc:	1d 92       	st	X+, r1
    6cfe:	15 90       	lpm	r1, Z+
    6d00:	1d 92       	st	X+, r1
    6d02:	15 90       	lpm	r1, Z+
    6d04:	1d 92       	st	X+, r1
    6d06:	15 90       	lpm	r1, Z+
    6d08:	1d 92       	st	X+, r1
    6d0a:	15 90       	lpm	r1, Z+
    6d0c:	1d 92       	st	X+, r1
    6d0e:	15 90       	lpm	r1, Z+
    6d10:	1d 92       	st	X+, r1
    6d12:	15 90       	lpm	r1, Z+
    6d14:	1d 92       	st	X+, r1
    6d16:	15 90       	lpm	r1, Z+
    6d18:	1d 92       	st	X+, r1
    6d1a:	15 90       	lpm	r1, Z+
    6d1c:	1d 92       	st	X+, r1
    6d1e:	15 90       	lpm	r1, Z+
    6d20:	1d 92       	st	X+, r1
    6d22:	15 90       	lpm	r1, Z+
    6d24:	1d 92       	st	X+, r1
    6d26:	15 90       	lpm	r1, Z+
    6d28:	1d 92       	st	X+, r1
    6d2a:	15 90       	lpm	r1, Z+
    6d2c:	1d 92       	st	X+, r1
    6d2e:	15 90       	lpm	r1, Z+
    6d30:	1d 92       	st	X+, r1
    6d32:	15 90       	lpm	r1, Z+
    6d34:	1d 92       	st	X+, r1
    6d36:	15 90       	lpm	r1, Z+
    6d38:	1d 92       	st	X+, r1
    6d3a:	15 90       	lpm	r1, Z+
    6d3c:	1d 92       	st	X+, r1
    6d3e:	15 90       	lpm	r1, Z+
    6d40:	1d 92       	st	X+, r1
    6d42:	15 90       	lpm	r1, Z+
    6d44:	1d 92       	st	X+, r1
    6d46:	15 90       	lpm	r1, Z+
    6d48:	1d 92       	st	X+, r1
    6d4a:	15 90       	lpm	r1, Z+
    6d4c:	1d 92       	st	X+, r1
    6d4e:	15 90       	lpm	r1, Z+
    6d50:	1d 92       	st	X+, r1
    6d52:	15 90       	lpm	r1, Z+
    6d54:	1d 92       	st	X+, r1
    6d56:	15 90       	lpm	r1, Z+
    6d58:	1d 92       	st	X+, r1
    6d5a:	15 90       	lpm	r1, Z+
    6d5c:	1d 92       	st	X+, r1
    6d5e:	15 90       	lpm	r1, Z+
    6d60:	1d 92       	st	X+, r1
    6d62:	15 90       	lpm	r1, Z+
    6d64:	1d 92       	st	X+, r1
    6d66:	15 90       	lpm	r1, Z+
    6d68:	1d 92       	st	X+, r1
    6d6a:	15 90       	lpm	r1, Z+
    6d6c:	1d 92       	st	X+, r1
    6d6e:	15 90       	lpm	r1, Z+
    6d70:	1d 92       	st	X+, r1
    6d72:	15 90       	lpm	r1, Z+
    6d74:	1d 92       	st	X+, r1
    6d76:	15 90       	lpm	r1, Z+
    6d78:	1d 92       	st	X+, r1
    6d7a:	15 90       	lpm	r1, Z+
    6d7c:	1d 92       	st	X+, r1
    6d7e:	15 90       	lpm	r1, Z+
    6d80:	1d 92       	st	X+, r1
    6d82:	15 90       	lpm	r1, Z+
    6d84:	1d 92       	st	X+, r1
    6d86:	15 90       	lpm	r1, Z+
    6d88:	1d 92       	st	X+, r1
    6d8a:	15 90       	lpm	r1, Z+
    6d8c:	1d 92       	st	X+, r1
    6d8e:	15 90       	lpm	r1, Z+
    6d90:	1d 92       	st	X+, r1
    6d92:	15 90       	lpm	r1, Z+
    6d94:	1d 92       	st	X+, r1
    6d96:	15 90       	lpm	r1, Z+
    6d98:	1d 92       	st	X+, r1
	clr r1
    6d9a:	11 24       	eor	r1, r1
	ret
    6d9c:	08 95       	ret

00006d9e <CopyRamTile>:
; r24=Source RAM tile index
; r22=Dest RAM tile index
;************************************
CopyRamTile:

	ldi r18,TILE_HEIGHT*TILE_WIDTH
    6d9e:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	ldi ZL,lo8(ram_tiles)
    6da0:	e0 e5       	ldi	r30, 0x50	; 80
	ldi ZH,hi8(ram_tiles)
    6da2:	f5 e0       	ldi	r31, 0x05	; 5
	mul r24,r18
    6da4:	82 9f       	mul	r24, r18
	add ZL,r0
    6da6:	e0 0d       	add	r30, r0
	adc ZH,r1
    6da8:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    6daa:	a0 e5       	ldi	r26, 0x50	; 80
	ldi XH,hi8(ram_tiles)
    6dac:	b5 e0       	ldi	r27, 0x05	; 5
	mul r22,r18
    6dae:	62 9f       	mul	r22, r18
	add XL,r0
    6db0:	a0 0d       	add	r26, r0
	adc XH,r1
    6db2:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	ld r1,Z+
	st X+,r1
.endr
    6db4:	11 90       	ld	r1, Z+
    6db6:	1d 92       	st	X+, r1
    6db8:	11 90       	ld	r1, Z+
    6dba:	1d 92       	st	X+, r1
    6dbc:	11 90       	ld	r1, Z+
    6dbe:	1d 92       	st	X+, r1
    6dc0:	11 90       	ld	r1, Z+
    6dc2:	1d 92       	st	X+, r1
    6dc4:	11 90       	ld	r1, Z+
    6dc6:	1d 92       	st	X+, r1
    6dc8:	11 90       	ld	r1, Z+
    6dca:	1d 92       	st	X+, r1
    6dcc:	11 90       	ld	r1, Z+
    6dce:	1d 92       	st	X+, r1
    6dd0:	11 90       	ld	r1, Z+
    6dd2:	1d 92       	st	X+, r1
    6dd4:	11 90       	ld	r1, Z+
    6dd6:	1d 92       	st	X+, r1
    6dd8:	11 90       	ld	r1, Z+
    6dda:	1d 92       	st	X+, r1
    6ddc:	11 90       	ld	r1, Z+
    6dde:	1d 92       	st	X+, r1
    6de0:	11 90       	ld	r1, Z+
    6de2:	1d 92       	st	X+, r1
    6de4:	11 90       	ld	r1, Z+
    6de6:	1d 92       	st	X+, r1
    6de8:	11 90       	ld	r1, Z+
    6dea:	1d 92       	st	X+, r1
    6dec:	11 90       	ld	r1, Z+
    6dee:	1d 92       	st	X+, r1
    6df0:	11 90       	ld	r1, Z+
    6df2:	1d 92       	st	X+, r1
    6df4:	11 90       	ld	r1, Z+
    6df6:	1d 92       	st	X+, r1
    6df8:	11 90       	ld	r1, Z+
    6dfa:	1d 92       	st	X+, r1
    6dfc:	11 90       	ld	r1, Z+
    6dfe:	1d 92       	st	X+, r1
    6e00:	11 90       	ld	r1, Z+
    6e02:	1d 92       	st	X+, r1
    6e04:	11 90       	ld	r1, Z+
    6e06:	1d 92       	st	X+, r1
    6e08:	11 90       	ld	r1, Z+
    6e0a:	1d 92       	st	X+, r1
    6e0c:	11 90       	ld	r1, Z+
    6e0e:	1d 92       	st	X+, r1
    6e10:	11 90       	ld	r1, Z+
    6e12:	1d 92       	st	X+, r1
    6e14:	11 90       	ld	r1, Z+
    6e16:	1d 92       	st	X+, r1
    6e18:	11 90       	ld	r1, Z+
    6e1a:	1d 92       	st	X+, r1
    6e1c:	11 90       	ld	r1, Z+
    6e1e:	1d 92       	st	X+, r1
    6e20:	11 90       	ld	r1, Z+
    6e22:	1d 92       	st	X+, r1
    6e24:	11 90       	ld	r1, Z+
    6e26:	1d 92       	st	X+, r1
    6e28:	11 90       	ld	r1, Z+
    6e2a:	1d 92       	st	X+, r1
    6e2c:	11 90       	ld	r1, Z+
    6e2e:	1d 92       	st	X+, r1
    6e30:	11 90       	ld	r1, Z+
    6e32:	1d 92       	st	X+, r1
    6e34:	11 90       	ld	r1, Z+
    6e36:	1d 92       	st	X+, r1
    6e38:	11 90       	ld	r1, Z+
    6e3a:	1d 92       	st	X+, r1
    6e3c:	11 90       	ld	r1, Z+
    6e3e:	1d 92       	st	X+, r1
    6e40:	11 90       	ld	r1, Z+
    6e42:	1d 92       	st	X+, r1
    6e44:	11 90       	ld	r1, Z+
    6e46:	1d 92       	st	X+, r1
    6e48:	11 90       	ld	r1, Z+
    6e4a:	1d 92       	st	X+, r1
    6e4c:	11 90       	ld	r1, Z+
    6e4e:	1d 92       	st	X+, r1
    6e50:	11 90       	ld	r1, Z+
    6e52:	1d 92       	st	X+, r1
    6e54:	11 90       	ld	r1, Z+
    6e56:	1d 92       	st	X+, r1
    6e58:	11 90       	ld	r1, Z+
    6e5a:	1d 92       	st	X+, r1
    6e5c:	11 90       	ld	r1, Z+
    6e5e:	1d 92       	st	X+, r1
    6e60:	11 90       	ld	r1, Z+
    6e62:	1d 92       	st	X+, r1
    6e64:	11 90       	ld	r1, Z+
    6e66:	1d 92       	st	X+, r1
    6e68:	11 90       	ld	r1, Z+
    6e6a:	1d 92       	st	X+, r1
    6e6c:	11 90       	ld	r1, Z+
    6e6e:	1d 92       	st	X+, r1
    6e70:	11 90       	ld	r1, Z+
    6e72:	1d 92       	st	X+, r1
    6e74:	11 90       	ld	r1, Z+
    6e76:	1d 92       	st	X+, r1
    6e78:	11 90       	ld	r1, Z+
    6e7a:	1d 92       	st	X+, r1
    6e7c:	11 90       	ld	r1, Z+
    6e7e:	1d 92       	st	X+, r1
    6e80:	11 90       	ld	r1, Z+
    6e82:	1d 92       	st	X+, r1
    6e84:	11 90       	ld	r1, Z+
    6e86:	1d 92       	st	X+, r1
    6e88:	11 90       	ld	r1, Z+
    6e8a:	1d 92       	st	X+, r1
    6e8c:	11 90       	ld	r1, Z+
    6e8e:	1d 92       	st	X+, r1
    6e90:	11 90       	ld	r1, Z+
    6e92:	1d 92       	st	X+, r1
    6e94:	11 90       	ld	r1, Z+
    6e96:	1d 92       	st	X+, r1
    6e98:	11 90       	ld	r1, Z+
    6e9a:	1d 92       	st	X+, r1
    6e9c:	11 90       	ld	r1, Z+
    6e9e:	1d 92       	st	X+, r1
    6ea0:	11 90       	ld	r1, Z+
    6ea2:	1d 92       	st	X+, r1
    6ea4:	11 90       	ld	r1, Z+
    6ea6:	1d 92       	st	X+, r1
    6ea8:	11 90       	ld	r1, Z+
    6eaa:	1d 92       	st	X+, r1
    6eac:	11 90       	ld	r1, Z+
    6eae:	1d 92       	st	X+, r1
    6eb0:	11 90       	ld	r1, Z+
    6eb2:	1d 92       	st	X+, r1
	clr r1
    6eb4:	11 24       	eor	r1, r1
	ret
    6eb6:	08 95       	ret

00006eb8 <BlitSprite>:
; r22=RAM tile index (bt)
; r21:r20=Y:X
; r19:r18=DY:DX
;************************************
BlitSprite:
	push r16
    6eb8:	0f 93       	push	r16
	push r17
    6eba:	1f 93       	push	r17
	push YL
    6ebc:	cf 93       	push	r28
	push YH
    6ebe:	df 93       	push	r29

	;src=sprites_tiletable_lo+(sprites[i].tileIndex*TILE_HEIGHT*TILE_WIDTH)
	ldi r25,SPRITE_STRUCT_SIZE
    6ec0:	94 e0       	ldi	r25, 0x04	; 4
	mul r24,r25
    6ec2:	89 9f       	mul	r24, r25

	ldi ZL,lo8(sprites)	
    6ec4:	e0 e1       	ldi	r30, 0x10	; 16
	ldi ZH,hi8(sprites)	
    6ec6:	f5 e0       	ldi	r31, 0x05	; 5
	add ZL,r0
    6ec8:	e0 0d       	add	r30, r0
	adc ZH,r1
    6eca:	f1 1d       	adc	r31, r1

	ldd r16,Z+sprFlags
    6ecc:	03 81       	ldd	r16, Z+3	; 0x03

	;8x16 multiply
	ldd r24,Z+sprTileIndex
    6ece:	82 81       	ldd	r24, Z+2	; 0x02
	ldi r30,TILE_WIDTH*TILE_HEIGHT
    6ed0:	e0 e4       	ldi	r30, 0x40	; 64
	mul r24,r30
    6ed2:	8e 9f       	mul	r24, r30
	movw r26,r0
    6ed4:	d0 01       	movw	r26, r0
	
	;get tile bank addr
	ldi r25,4*2
    6ed6:	98 e0       	ldi	r25, 0x08	; 8
	mul r16,r25
    6ed8:	09 9f       	mul	r16, r25
	ldi YL,lo8(sprites_tile_banks)	
    6eda:	c4 ea       	ldi	r28, 0xA4	; 164
	ldi YH,hi8(sprites_tile_banks)	
    6edc:	dc e0       	ldi	r29, 0x0C	; 12
	clr r0
    6ede:	00 24       	eor	r0, r0
	add YL,r1
    6ee0:	c1 0d       	add	r28, r1
	adc YH,r0		
    6ee2:	d0 1d       	adc	r29, r0
	ldd ZL,Y+0
    6ee4:	e8 81       	ld	r30, Y
	ldd ZH,Y+1
    6ee6:	f9 81       	ldd	r31, Y+1	; 0x01
	add ZL,r26	;tile data src
    6ee8:	ea 0f       	add	r30, r26
	adc ZH,r27
    6eea:	fb 1f       	adc	r31, r27
	
	;dest=ram_tiles+(bt*TILE_HEIGHT*TILE_WIDTH)
	ldi XL,lo8(ram_tiles)	
    6eec:	a0 e5       	ldi	r26, 0x50	; 80
	ldi XH,hi8(ram_tiles)
    6eee:	b5 e0       	ldi	r27, 0x05	; 5
	ldi r25,TILE_WIDTH*TILE_HEIGHT
    6ef0:	90 e4       	ldi	r25, 0x40	; 64
	mul r22,r25
    6ef2:	69 9f       	mul	r22, r25
	add XL,r0
    6ef4:	a0 0d       	add	r26, r0
	adc XH,r1
    6ef6:	b1 1d       	adc	r27, r1
			srcXdiff=destXdiff;
			src+=destXdiff;
		}
	}
	*/
	clr r1
    6ef8:	11 24       	eor	r1, r1
	clr YH		;hi8(srcXdiff)
    6efa:	dd 27       	eor	r29, r29

	cpi r20,0	
    6efc:	40 30       	cpi	r20, 0x00	; 0
	brne x_2nd_tile
    6efe:	51 f4       	brne	.+20     	; 0x6f14 <x_2nd_tile>
	
	add XL,r18	;dest+=dx
    6f00:	a2 0f       	add	r26, r18
	adc XH,r1
    6f02:	b1 1d       	adc	r27, r1
	mov r24,r18	;destXdiff=dx
    6f04:	82 2f       	mov	r24, r18
	mov YL,r18	;srcXdiff=dx
    6f06:	c2 2f       	mov	r28, r18

	sbrs r16,SPRITE_FLIP_X_BIT
    6f08:	00 ff       	sbrs	r16, 0
	rjmp x_check_end
    6f0a:	11 c0       	rjmp	.+34     	; 0x6f2e <x_check_end>

	adiw ZL,(TILE_WIDTH-1)	;src+=7
    6f0c:	37 96       	adiw	r30, 0x07	; 7
	ldi YL,TILE_WIDTH*2		;srcXdiff=((TILE_WIDTH*2)-dx);
    6f0e:	c0 e1       	ldi	r28, 0x10	; 16
	sub YL,r18	
    6f10:	c2 1b       	sub	r28, r18
	rjmp x_check_end
    6f12:	0d c0       	rjmp	.+26     	; 0x6f2e <x_check_end>

00006f14 <x_2nd_tile>:

x_2nd_tile:
	ldi r24,TILE_WIDTH
    6f14:	88 e0       	ldi	r24, 0x08	; 8
	sub r24,r18		;8-DX = xdiff for dest
    6f16:	82 1b       	sub	r24, r18

	sbrc r16,SPRITE_FLIP_X_BIT
    6f18:	00 fd       	sbrc	r16, 0
	rjmp x2_flip_x
    6f1a:	04 c0       	rjmp	.+8      	; 0x6f24 <x2_flip_x>

	mov YL,r24		;srcXdiff=destXdiff;
    6f1c:	c8 2f       	mov	r28, r24
	add ZL,r24		;src+=destXdiff;
    6f1e:	e8 0f       	add	r30, r24
	adc ZH,r1	
    6f20:	f1 1d       	adc	r31, r1
	rjmp x_check_end
    6f22:	05 c0       	rjmp	.+10     	; 0x6f2e <x_check_end>

00006f24 <x2_flip_x>:

x2_flip_x:
	ldi YL,TILE_WIDTH
    6f24:	c8 e0       	ldi	r28, 0x08	; 8
	add YL,r18		;srcXdiff=TILE_WIDTH+dx;	
    6f26:	c2 0f       	add	r28, r18
	add ZL,r18		;src+=dx;
    6f28:	e2 0f       	add	r30, r18
	adc ZH,r1
    6f2a:	f1 1d       	adc	r31, r1
	sbiw ZL,1		;src--;
    6f2c:	31 97       	sbiw	r30, 0x01	; 1

00006f2e <x_check_end>:
		}else{
			src+=(ydiff*TILE_WIDTH);
		}
	}
	*/
	cpi r21,0
    6f2e:	50 30       	cpi	r21, 0x00	; 0
	brne y_2nd_tile
    6f30:	51 f4       	brne	.+20     	; 0x6f46 <y_2nd_tile>

	ldi r25,TILE_WIDTH	;dest+=(dy*TILE_WIDTH)
    6f32:	98 e0       	ldi	r25, 0x08	; 8
	mul r25,r19			
    6f34:	93 9f       	mul	r25, r19
	add XL,r0
    6f36:	a0 0d       	add	r26, r0
	adc XH,r1
    6f38:	b1 1d       	adc	r27, r1

	mov r25,r19			;ydiff=dy
    6f3a:	93 2f       	mov	r25, r19

	//sbrc r16,SPRITE_FLIP_Y_BIT
	//adiw ZL,(TILE_WIDTH*(TILE_HEIGHT-1))

	sbrc r16,SPRITE_FLIP_Y_BIT
    6f3c:	01 fd       	sbrc	r16, 1
	subi ZL,lo8(-(TILE_WIDTH*(TILE_HEIGHT-1)));src+=(TILE_WIDTH*(TILE_HEIGHT-1));
    6f3e:	e8 5c       	subi	r30, 0xC8	; 200
	sbrc r16,SPRITE_FLIP_Y_BIT
    6f40:	01 fd       	sbrc	r16, 1
	sbci ZH,hi8(-(TILE_WIDTH*(TILE_HEIGHT-1)))
    6f42:	ff 4f       	sbci	r31, 0xFF	; 255


	rjmp y_check_end
    6f44:	0a c0       	rjmp	.+20     	; 0x6f5a <y_check_end>

00006f46 <y_2nd_tile>:

y_2nd_tile:
	ldi r25,TILE_HEIGHT	;ydiff=(TILE_HEIGHT-dy)
    6f46:	98 e0       	ldi	r25, 0x08	; 8
	sub r25,r19	
    6f48:	93 1b       	sub	r25, r19
	
	mov r22,r19			;temp=dy-1
    6f4a:	63 2f       	mov	r22, r19
	dec r22
    6f4c:	6a 95       	dec	r22
	sbrs r16,SPRITE_FLIP_Y_BIT
    6f4e:	01 ff       	sbrs	r16, 1
	mov r22,r25			;temp=ydiff
    6f50:	69 2f       	mov	r22, r25

	ldi r21,TILE_WIDTH	;src+=(temp*TILE_WIDTH);
    6f52:	58 e0       	ldi	r21, 0x08	; 8
	mul r21,r22
    6f54:	56 9f       	mul	r21, r22
	add ZL,r0
    6f56:	e0 0d       	add	r30, r0
	adc ZH,r1	
    6f58:	f1 1d       	adc	r31, r1

00006f5a <y_check_end>:
y_check_end:	
	
	//if(flags&SPRITE_FLIP_X){
	//	step=-1;
	//}
	ser r22		;step=-1
    6f5a:	6f ef       	ldi	r22, 0xFF	; 255
	ser r23
    6f5c:	7f ef       	ldi	r23, 0xFF	; 255
	sbrs r16,SPRITE_FLIP_X_BIT
    6f5e:	00 ff       	sbrs	r16, 0
	ldi r22,1	;step=1
    6f60:	61 e0       	ldi	r22, 0x01	; 1
	sbrs r16,SPRITE_FLIP_X_BIT
    6f62:	00 ff       	sbrs	r16, 0
	clr r23
    6f64:	77 27       	eor	r23, r23

	//if(flags&SPRITE_FLIP_Y){
	//	srcXdiff-=(TILE_WIDTH*2);
	//}
	sbrc r16,SPRITE_FLIP_Y_BIT
    6f66:	01 fd       	sbrc	r16, 1
	sbiw YL,(TILE_WIDTH*2)
    6f68:	60 97       	sbiw	r28, 0x10	; 16
	;r24	= destXdiff
	;r25	= ydiff
	;X		= dest
	;Y		= srcXdiff
	;Z		= src
	clr r1
    6f6a:	11 24       	eor	r1, r1
	ldi r19,TRANSLUCENT_COLOR
    6f6c:	3e ef       	ldi	r19, 0xFE	; 254

	ldi r21,TILE_HEIGHT
    6f6e:	58 e0       	ldi	r21, 0x08	; 8
	sub r21,r25 	;yspan=(TILE_HEIGHT-ydiff)
    6f70:	59 1b       	sub	r21, r25

00006f72 <y_loop>:

y_loop:
	ldi r20,TILE_WIDTH
    6f72:	48 e0       	ldi	r20, 0x08	; 8
	sub r20,r24 	;xspan=(TILE_WIDTH-destXdiff)
    6f74:	48 1b       	sub	r20, r24

00006f76 <x_loop>:

x_loop:
	lpm r18,Z		;px=pgm_read_byte(src);
    6f76:	24 91       	lpm	r18, Z
	cpse r18,r19	;if(px!=TRANSLUCENT_COLOR)
    6f78:	23 13       	cpse	r18, r19
	st X,r18		;*dest=px;
    6f7a:	2c 93       	st	X, r18
	adiw XL,1
    6f7c:	11 96       	adiw	r26, 0x01	; 1
	add ZL,r22		;src+=step;
    6f7e:	e6 0f       	add	r30, r22
	adc ZH,r23
    6f80:	f7 1f       	adc	r31, r23
	dec r20
    6f82:	4a 95       	dec	r20
	brne x_loop
    6f84:	c1 f7       	brne	.-16     	; 0x6f76 <x_loop>

	add ZL,YL		;src+=srcXdiff
    6f86:	ec 0f       	add	r30, r28
	adc ZH,YH
    6f88:	fd 1f       	adc	r31, r29
	add XL,r24		;dest+=destXdiff
    6f8a:	a8 0f       	add	r26, r24
	adc XH,r1
    6f8c:	b1 1d       	adc	r27, r1
	dec r21
    6f8e:	5a 95       	dec	r21
	brne y_loop
    6f90:	81 f7       	brne	.-32     	; 0x6f72 <y_loop>


	pop YH
    6f92:	df 91       	pop	r29
	pop YL
    6f94:	cf 91       	pop	r28
	pop r17
    6f96:	1f 91       	pop	r17
	pop r16
    6f98:	0f 91       	pop	r16
	ret
    6f9a:	08 95       	ret

00006f9c <__vector_13>:

;***************************************************************************
; Main Video sync interrupt
;***************************************************************************
TIMER1_COMPA_vect:
	push r0
    6f9c:	0f 92       	push	r0
	push r1
    6f9e:	1f 92       	push	r1
	push ZL;2
    6fa0:	ef 93       	push	r30
	push ZH;2
    6fa2:	ff 93       	push	r31
	
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    6fa4:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    6fa6:	ef 93       	push	r30

	;Read timer offset since rollover to remove cycles 
	;and conpensate for interrupt latency.
	;This is nessesary to eliminate frame jitter.
	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    6fa8:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,0x12 ;MIN_INT_LATENCY
    6fac:	e2 51       	subi	r30, 0x12	; 18

	ldi ZH,1
    6fae:	f1 e0       	ldi	r31, 0x01	; 1

00006fb0 <latency_loop>:
latency_loop:
	cp ZL,ZH
    6fb0:	ef 17       	cp	r30, r31
	brlo .		;advance PC to next instruction	
    6fb2:	00 f0       	brcs	.+0      	; 0x6fb4 <latency_loop+0x4>
	inc ZH
    6fb4:	f3 95       	inc	r31
	cpi ZH,10
    6fb6:	fa 30       	cpi	r31, 0x0A	; 10
	brlo latency_loop
    6fb8:	d8 f3       	brcs	.-10     	; 0x6fb0 <latency_loop>
	jmp .
    6fba:	0c 94 df 37 	jmp	0x6fbe	; 0x6fbe <latency_loop+0xe>
	
	;decrement sync pulse counter
	lds ZL,sync_pulse
    6fbe:	e0 91 b7 0c 	lds	r30, 0x0CB7
	dec ZL
    6fc2:	ea 95       	dec	r30
	sts sync_pulse,ZL
    6fc4:	e0 93 b7 0c 	sts	0x0CB7, r30

	;process sync phases
	lds ZH,sync_phase
    6fc8:	f0 91 b6 0c 	lds	r31, 0x0CB6
	sbrc ZH,0
    6fcc:	f0 fd       	sbrc	r31, 0
	rjmp sync_hsync
    6fce:	57 c0       	rjmp	.+174    	; 0x707e <sync_hsync>
; Note: TCNT1 should be equal to 
; 0x68 on the cbi
; 0xAC on the sbi
; pulse duration: 68 clocks
;***************************************************		
	cpi ZL,SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    6fd0:	ec 30       	cpi	r30, 0x0C	; 12
	brlo sync_eq
    6fd2:	98 f0       	brcs	.+38     	; 0x6ffa <sync_eq>

	;Set HDRIVE to double rate during VSYNC
	ldi ZH,hi8(HDRIVE_CL_TWICE)
    6fd4:	f3 e0       	ldi	r31, 0x03	; 3
	sts _SFR_MEM_ADDR(OCR1AH),ZH	
    6fd6:	f0 93 89 00 	sts	0x0089, r31
	ldi ZH,lo8(HDRIVE_CL_TWICE)
    6fda:	fd e8       	ldi	r31, 0x8D	; 141
	sts _SFR_MEM_ADDR(OCR1AL),ZH
    6fdc:	f0 93 88 00 	sts	0x0088, r31

	bst ZL,0
    6fe0:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0x68
    6fe2:	28 98       	cbi	0x05, 0	; 5
	brtc sync_pre_eq_no_sound_update
    6fe4:	26 f4       	brtc	.+8      	; 0x6fee <sync_pre_eq_no_sound_update>
	ldi ZL,1	;indicate update_sound to generate the SBI for pre-eq
    6fe6:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    6fe8:	0e 94 c6 38 	call	0x718c	; 0x718c <update_sound>
	rjmp sync_end
    6fec:	b7 c0       	rjmp	.+366    	; 0x715c <sync_end>

00006fee <sync_pre_eq_no_sound_update>:

sync_pre_eq_no_sound_update:
	WAIT ZL,64
    6fee:	e5 e1       	ldi	r30, 0x15	; 21
    6ff0:	ea 95       	dec	r30
    6ff2:	f1 f7       	brne	.-4      	; 0x6ff0 <sync_pre_eq_no_sound_update+0x2>
    6ff4:	00 00       	nop
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    6ff6:	28 9a       	sbi	0x05, 0	; 5
		
	rjmp sync_end
    6ff8:	b1 c0       	rjmp	.+354    	; 0x715c <sync_end>

00006ffa <sync_eq>:
; 0x68  on the cbi
; 0x36E on the sbi
; low pulse duration: 774 clocks
;***************************************************	
sync_eq:
	cpi ZL,SYNC_POST_EQ_PULSES
    6ffa:	e6 30       	cpi	r30, 0x06	; 6
	brlo sync_post_eq
    6ffc:	38 f1       	brcs	.+78     	; 0x704c <sync_post_eq>

	rjmp .
    6ffe:	00 c0       	rjmp	.+0      	; 0x7000 <sync_eq+0x6>
	rjmp .
    7000:	00 c0       	rjmp	.+0      	; 0x7002 <sync_eq+0x8>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    7002:	28 98       	cbi	0x05, 0	; 5

	bst ZL,0
    7004:	e0 fb       	bst	r30, 0
	ldi ZL,4
    7006:	e4 e0       	ldi	r30, 0x04	; 4
	brtc sync_eq_skip
    7008:	16 f4       	brtc	.+4      	; 0x700e <sync_eq_skip>
	
	call update_sound
    700a:	0e 94 c6 38 	call	0x718c	; 0x718c <update_sound>

0000700e <sync_eq_skip>:
	;enable interupt to bring back sync 
	;level instead of wasting cycles
	;in a big wait loop

 	;clear interrupt flag
	ldi ZL,(1<<OCF1B)
    700e:	e4 e0       	ldi	r30, 0x04	; 4
	sts _SFR_MEM_ADDR(TIFR1),ZL 
    7010:	e0 93 36 00 	sts	0x0036, r30
	
	;generate interrupt on match
	;for timer1 compare unit b
	ldi ZL,(1<<OCIE1A)+(1<<OCIE1B)
    7014:	e6 e0       	ldi	r30, 0x06	; 6
	sts _SFR_MEM_ADDR(TIMSK1),ZL
    7016:	e0 93 6f 00 	sts	0x006F, r30

	rjmp sync_end
    701a:	a0 c0       	rjmp	.+320    	; 0x715c <sync_end>

0000701c <__vector_14>:
; during VSYNC EQ pulses to recover ~5000 cycles per field
; with interrupt latency conpensation
; 37 cycles
;**********************************************************	
TIMER1_COMPB_vect:
	push ZL
    701c:	ef 93       	push	r30
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    701e:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    7020:	ef 93       	push	r30

	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    7022:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,62+31 ;0x5D ;MIN_INT_LATENCY
    7026:	ed 55       	subi	r30, 0x5D	; 93

	cpi ZL,1
    7028:	e1 30       	cpi	r30, 0x01	; 1
	brlo .		;advance PC to next instruction
    702a:	00 f0       	brcs	.+0      	; 0x702c <__vector_14+0x10>

	cpi ZL,2
    702c:	e2 30       	cpi	r30, 0x02	; 2
	brlo .		;advance PC to next instruction
    702e:	00 f0       	brcs	.+0      	; 0x7030 <__vector_14+0x14>

	cpi ZL,3
    7030:	e3 30       	cpi	r30, 0x03	; 3
	brlo .		;advance PC to next instruction
    7032:	00 f0       	brcs	.+0      	; 0x7034 <__vector_14+0x18>

	cpi ZL,4
    7034:	e4 30       	cpi	r30, 0x04	; 4
	brlo .		;advance PC to next instruction
    7036:	00 f0       	brcs	.+0      	; 0x7038 <__vector_14+0x1c>

	cpi ZL,5
    7038:	e5 30       	cpi	r30, 0x05	; 5
	brlo .		;advance PC to next instruction
    703a:	00 f0       	brcs	.+0      	; 0x703c <__vector_14+0x20>

 	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;68
    703c:	28 9a       	sbi	0x05, 0	; 5
	ldi ZL,(1<<OCIE1A) ; disable OCIE1B 
    703e:	e2 e0       	ldi	r30, 0x02	; 2
	sts _SFR_MEM_ADDR(TIMSK1),ZL ;stop generate interrupt on match
    7040:	e0 93 6f 00 	sts	0x006F, r30
	
	;restore flags
	pop ZL
    7044:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL	
    7046:	ef bf       	out	0x3f, r30	; 63
	pop ZL
    7048:	ef 91       	pop	r30
	reti
    704a:	18 95       	reti

0000704c <sync_post_eq>:
; 0x68 on the cbi
; 0xAC on the sbi
; pulse cycles: 68 clocks
;***************************************************	
sync_post_eq:	
	rjmp .
    704c:	00 c0       	rjmp	.+0      	; 0x704e <sync_post_eq+0x2>

	bst ZL,0
    704e:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    7050:	28 98       	cbi	0x05, 0	; 5
	brtc sync_post_eq_no_sound_update
    7052:	26 f4       	brtc	.+8      	; 0x705c <sync_post_eq_no_sound_update>
	ldi ZL,1	
    7054:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    7056:	0e 94 c6 38 	call	0x718c	; 0x718c <update_sound>
	rjmp sync_pre_eq_cont
    705a:	05 c0       	rjmp	.+10     	; 0x7066 <sync_pre_eq_cont>

0000705c <sync_post_eq_no_sound_update>:

sync_post_eq_no_sound_update:
	WAIT ZL,64
    705c:	e5 e1       	ldi	r30, 0x15	; 21
    705e:	ea 95       	dec	r30
    7060:	f1 f7       	brne	.-4      	; 0x705e <sync_post_eq_no_sound_update+0x2>
    7062:	00 00       	nop

	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN 
    7064:	28 9a       	sbi	0x05, 0	; 5

00007066 <sync_pre_eq_cont>:

sync_pre_eq_cont:	
	;check if it's the last vsync pulse
	lds ZL,sync_pulse
    7066:	e0 91 b7 0c 	lds	r30, 0x0CB7
	cpi ZL,0
    706a:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2 ;skip rjmp
    706c:	09 f0       	breq	.+2      	; 0x7070 <sync_pre_eq_cont+0xa>
	rjmp sync_end
    706e:	76 c0       	rjmp	.+236    	; 0x715c <sync_end>
	
	;update sync flags
	ldi ZL,SYNC_HSYNC_PULSES
    7070:	ed ef       	ldi	r30, 0xFD	; 253
	sts sync_pulse,ZL
    7072:	e0 93 b7 0c 	sts	0x0CB7, r30
	ldi ZL,1
    7076:	e1 e0       	ldi	r30, 0x01	; 1
	sts sync_phase,ZL
    7078:	e0 93 b6 0c 	sts	0x0CB6, r30
	
	rjmp sync_end
    707c:	6f c0       	rjmp	.+222    	; 0x715c <sync_end>

0000707e <sync_hsync>:
; 0xF0 on the sbi
; pulse duration: 136 clocks
;***************************************************	

	; Set HDRIVE to normal rate
	ldi ZL,hi8(HDRIVE_CL)
    707e:	e7 e0       	ldi	r30, 0x07	; 7
	sts _SFR_MEM_ADDR(OCR1AH),ZL	
    7080:	e0 93 89 00 	sts	0x0089, r30
	ldi ZL,lo8(HDRIVE_CL)
    7084:	eb e1       	ldi	r30, 0x1B	; 27
	sts _SFR_MEM_ADDR(OCR1AL),ZL
    7086:	e0 93 88 00 	sts	0x0088, r30
	rjmp .
    708a:	00 c0       	rjmp	.+0      	; 0x708c <sync_hsync+0xe>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    708c:	28 98       	cbi	0x05, 0	; 5
	
	ldi ZL,2	;indicate update_sound to generate the SBI for pre-eq
    708e:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    7090:	00 c0       	rjmp	.+0      	; 0x7092 <sync_hsync+0x14>
	call update_sound
    7092:	0e 94 c6 38 	call	0x718c	; 0x718c <update_sound>

	;check if we have reached the first line to render
	ldi ZH,SYNC_HSYNC_PULSES
    7096:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    7098:	00 90 bd 0c 	lds	r0, 0x0CBD
	sub ZH,r0				
    709c:	f0 19       	sub	r31, r0
	lds ZL,sync_pulse
    709e:	e0 91 b7 0c 	lds	r30, 0x0CB7
	cp ZL,ZH
    70a2:	ef 17       	cp	r30, r31
	brsh no_render
    70a4:	d0 f4       	brcc	.+52     	; 0x70da <no_render>

	ldi ZH,SYNC_HSYNC_PULSES
    70a6:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    70a8:	00 90 bd 0c 	lds	r0, 0x0CBD
	sub ZH,r0				
    70ac:	f0 19       	sub	r31, r0
	lds r0,render_lines_count
    70ae:	00 90 be 0c 	lds	r0, 0x0CBE
	sub ZH,r0			
    70b2:	f0 19       	sub	r31, r0
	cp ZL,ZH
    70b4:	ef 17       	cp	r30, r31
	brlo no_render
    70b6:	88 f0       	brcs	.+34     	; 0x70da <no_render>

	;push r1-r29
	ldi ZL,29
    70b8:	ed e1       	ldi	r30, 0x1D	; 29
	clr ZH
    70ba:	ff 27       	eor	r31, r31

000070bc <push_loop>:
push_loop:
	ld r0,Z	;load value from register file
    70bc:	00 80       	ld	r0, Z
	push r0
    70be:	0f 92       	push	r0
	dec ZL
    70c0:	ea 95       	dec	r30
	brne push_loop	
    70c2:	e1 f7       	brne	.-8      	; 0x70bc <push_loop>

	;timing compensation
	;to insure we always call the video mode 
	;routine at the same cycle	
	WAIT r16,230-(AUDIO_OUT_HSYNC_CYCLES)
    70c4:	06 e0       	ldi	r16, 0x06	; 6
    70c6:	0a 95       	dec	r16
    70c8:	f1 f7       	brne	.-4      	; 0x70c6 <push_loop+0xa>

	call VMODE_FUNC		;TCNT1=0x234
    70ca:	0e 94 8c 34 	call	0x6918	; 0x6918 <sub_video_mode3>

	;pop r1-r29
	ldi ZL,1
    70ce:	e1 e0       	ldi	r30, 0x01	; 1
	clr ZH
    70d0:	ff 27       	eor	r31, r31

000070d2 <pop_loop>:
pop_loop:
	pop r0
    70d2:	0f 90       	pop	r0
	st Z+,r0 ;store value to register file
    70d4:	01 92       	st	Z+, r0
	cpi ZL,30
    70d6:	ee 31       	cpi	r30, 0x1E	; 30
	brlo pop_loop	
    70d8:	e0 f3       	brcs	.-8      	; 0x70d2 <pop_loop>

000070da <no_render>:

no_render:

	;check if it's the last hsync pulse and we are 
	;ready for VSYNC
	lds ZL,sync_pulse
    70da:	e0 91 b7 0c 	lds	r30, 0x0CB7
	cpi ZL,0
    70de:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2
    70e0:	09 f0       	breq	.+2      	; 0x70e4 <no_render+0xa>
	rjmp sync_end
    70e2:	3c c0       	rjmp	.+120    	; 0x715c <sync_end>
;***************************************************
; Process VSYNC stuff
;***************************************************
	
	;push C-call registers
	push r18
    70e4:	2f 93       	push	r18
	push r19
    70e6:	3f 93       	push	r19
	push r20
    70e8:	4f 93       	push	r20
	push r21
    70ea:	5f 93       	push	r21
	push r22
    70ec:	6f 93       	push	r22
	push r23
    70ee:	7f 93       	push	r23
	push r24
    70f0:	8f 93       	push	r24
	push r25
    70f2:	9f 93       	push	r25
	push r26
    70f4:	af 93       	push	r26
	push r27
    70f6:	bf 93       	push	r27

	sei ;must enable ints for re-entrant sync pulses
    70f8:	78 94       	sei
	clr r1
    70fa:	11 24       	eor	r1, r1

	;set vsync flags
	clr ZL
    70fc:	ee 27       	eor	r30, r30
	sts sync_phase,ZL
    70fe:	e0 93 b6 0c 	sts	0x0CB6, r30
	ldi ZL,SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    7102:	e2 e1       	ldi	r30, 0x12	; 18
	sts sync_pulse,ZL
    7104:	e0 93 b7 0c 	sts	0x0CB7, r30



	;increment the vsync counter
	lds r24,vsync_counter
    7108:	80 91 c7 0c 	lds	r24, 0x0CC7
	lds r25,vsync_counter+1
    710c:	90 91 c8 0c 	lds	r25, 0x0CC8
	adiw r24,1
    7110:	01 96       	adiw	r24, 0x01	; 1
	sts vsync_counter,r24
    7112:	80 93 c7 0c 	sts	0x0CC7, r24
	sts vsync_counter+1,r25
    7116:	90 93 c8 0c 	sts	0x0CC8, r25


	;process user pre callback
	lds ZL,pre_vsync_user_callback+0
    711a:	e0 91 b9 0c 	lds	r30, 0x0CB9
	lds ZH,pre_vsync_user_callback+1
    711e:	f0 91 ba 0c 	lds	r31, 0x0CBA
	cp  ZL,r1
    7122:	e1 15       	cp	r30, r1
	cpc ZH,r1
    7124:	f1 05       	cpc	r31, r1
	breq .+2 
    7126:	09 f0       	breq	.+2      	; 0x712a <no_render+0x50>
	icall
    7128:	09 95       	icall

	;refresh buttons states
	#if CONTROLLERS_VSYNC_READ == 1
		call ReadControllers
    712a:	0e 94 65 3a 	call	0x74ca	; 0x74ca <ReadControllers>
	#endif 
	
	;invoke stuff the video mode may have to do
	call VideoModeVsync	
    712e:	0e 94 de 48 	call	0x91bc	; 0x91bc <VideoModeVsync>

	;process music (music, envelopes, etc)
	call process_music
    7132:	0e 94 c0 38 	call	0x7180	; 0x7180 <process_music>
	clr r1
    7136:	11 24       	eor	r1, r1

	;process user post callback
	lds ZL,post_vsync_user_callback+0
    7138:	e0 91 bb 0c 	lds	r30, 0x0CBB
	lds ZH,post_vsync_user_callback+1
    713c:	f0 91 bc 0c 	lds	r31, 0x0CBC
	cp  ZL,r1
    7140:	e1 15       	cp	r30, r1
	cpc ZH,r1
    7142:	f1 05       	cpc	r31, r1
	breq .+2 
    7144:	09 f0       	breq	.+2      	; 0x7148 <no_render+0x6e>
	icall
    7146:	09 95       	icall
	#if SNES_MOUSE == 1
		call ReadMouseExtendedData
		call ProcessMouseMovement
	#endif

	pop r27
    7148:	bf 91       	pop	r27
	pop r26
    714a:	af 91       	pop	r26
	pop r25
    714c:	9f 91       	pop	r25
	pop r24
    714e:	8f 91       	pop	r24
	pop r23
    7150:	7f 91       	pop	r23
	pop r22
    7152:	6f 91       	pop	r22
	pop r21
    7154:	5f 91       	pop	r21
	pop r20
    7156:	4f 91       	pop	r20
	pop r19
    7158:	3f 91       	pop	r19
	pop r18
    715a:	2f 91       	pop	r18

0000715c <sync_end>:
	
sync_end:	
	;restore flags
	pop ZL
    715c:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL
    715e:	ef bf       	out	0x3f, r30	; 63
	
	pop ZH
    7160:	ff 91       	pop	r31
	pop ZL
    7162:	ef 91       	pop	r30
	pop r1
    7164:	1f 90       	pop	r1
	pop r0
    7166:	0f 90       	pop	r0
	reti
    7168:	18 95       	reti

0000716a <hsync_pulse>:
; 0xf0 on the sbi 
;	
; Destroys: ZL (r30)
;*************************************************
hsync_pulse:
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    716a:	28 98       	cbi	0x05, 0	; 5
	ldi ZL,2
    716c:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    716e:	00 c0       	rjmp	.+0      	; 0x7170 <hsync_pulse+0x6>
	call update_sound
    7170:	0e 94 c6 38 	call	0x718c	; 0x718c <update_sound>

	lds ZL,sync_pulse
    7174:	e0 91 b7 0c 	lds	r30, 0x0CB7
	dec ZL
    7178:	ea 95       	dec	r30
	sts sync_pulse,ZL
    717a:	e0 93 b7 0c 	sts	0x0CB7, r30

	ret
    717e:	08 95       	ret

00007180 <process_music>:
; NOTE: registers r18-r27 are already saved by the caller
;***********************
process_music:
	
#if ENABLE_MIXER==1
	lds ZL,sound_enabled
    7180:	e0 91 cf 0c 	lds	r30, 0x0CCF
	sbrc ZL,0
    7184:	e0 fd       	sbrc	r30, 0
 	call ProcessMusic
    7186:	0e 94 ec 3d 	call	0x7bd8	; 0x7bd8 <ProcessMusic>
#endif

	ret
    718a:	08 95       	ret

0000718c <update_sound>:

; Destroys: Z,r0,r1
; cycles: 212+
;****************************
update_sound:
	push r16
    718c:	0f 93       	push	r16
	push r17
    718e:	1f 93       	push	r17
	push r18
    7190:	2f 93       	push	r18
	push r28
    7192:	cf 93       	push	r28
	push r29
    7194:	df 93       	push	r29

	mov r18,ZL
    7196:	2e 2f       	mov	r18, r30

	;channel 1 
	lds r16,tr1_step_lo
    7198:	00 91 d1 0c 	lds	r16, 0x0CD1
	lds r17,tr1_pos_frac
    719c:	10 91 d3 0c 	lds	r17, 0x0CD3
	add	r17,r16	;add step to fractional part of sample pos
    71a0:	10 0f       	add	r17, r16
	lds r16,tr1_step_hi	
    71a2:	00 91 d2 0c 	lds	r16, 0x0CD2
	lds ZL,tr1_pos_lo
    71a6:	e0 91 d4 0c 	lds	r30, 0x0CD4
	lds ZH,tr1_pos_hi 
    71aa:	f0 91 d5 0c 	lds	r31, 0x0CD5
	adc ZL,r16	;add step to low byte of sample pos
    71ae:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    71b0:	04 91       	lpm	r16, Z
	sts tr1_pos_lo,ZL
    71b2:	e0 93 d4 0c 	sts	0x0CD4, r30
	sts tr1_pos_frac,r17
    71b6:	10 93 d3 0c 	sts	0x0CD3, r17
	lds r17,tr1_vol
    71ba:	10 91 d0 0c 	lds	r17, 0x0CD0
	mulsu r16,r17;(sample*mixing vol)
    71be:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend	
    71c0:	00 08       	sbc	r0, r0
	mov r28,r1	;set (sample*vol>>8) to mix buffer lsb
    71c2:	c1 2d       	mov	r28, r1
	mov r29,r0	;set mix buffer msb	
    71c4:	d0 2d       	mov	r29, r0
	nop
    71c6:	00 00       	nop

;38
	
	;channel 2
	lds r16,tr2_step_lo
    71c8:	00 91 d7 0c 	lds	r16, 0x0CD7
	lds r17,tr2_pos_frac
    71cc:	10 91 d9 0c 	lds	r17, 0x0CD9
	add	r17,r16	;add step to fractional part of sample pos
    71d0:	10 0f       	add	r17, r16
	lds r16,tr2_step_hi	
    71d2:	00 91 d8 0c 	lds	r16, 0x0CD8
	lds ZL,tr2_pos_lo
    71d6:	e0 91 da 0c 	lds	r30, 0x0CDA
	lds ZH,tr2_pos_hi 
    71da:	f0 91 db 0c 	lds	r31, 0x0CDB
	adc ZL,r16	;add step to low byte of sample pos
    71de:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    71e0:	04 91       	lpm	r16, Z
	sts tr2_pos_lo,ZL
    71e2:	e0 93 da 0c 	sts	0x0CDA, r30
	sts tr2_pos_frac,r17
    71e6:	10 93 d9 0c 	sts	0x0CD9, r17
	lds r17,tr2_vol
    71ea:	10 91 d6 0c 	lds	r17, 0x0CD6

	;*** Video sync update ***
	sbrc r18,0								;pre-eq/post-eq sync
    71ee:	20 fd       	sbrc	r18, 0
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    71f0:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,0								
    71f2:	20 ff       	sbrs	r18, 0
	rjmp .
    71f4:	00 c0       	rjmp	.+0      	; 0x71f6 <update_sound+0x6a>
	;*************************

	mulsu r16,r17;(sample*mixing vol)
    71f6:	01 03       	mulsu	r16, r17
	clr r0
    71f8:	00 24       	eor	r0, r0
	sbc r0,r0	;sign extend
    71fa:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    71fc:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb		
    71fe:	d0 1d       	adc	r29, r0
;70
	
	;channel 3
	lds r16,tr3_step_lo
    7200:	00 91 dd 0c 	lds	r16, 0x0CDD
	lds r17,tr3_pos_frac
    7204:	10 91 df 0c 	lds	r17, 0x0CDF
	add	r17,r16				;add step to fractional part of sample pos
    7208:	10 0f       	add	r17, r16
	lds r16,tr3_step_hi	
    720a:	00 91 de 0c 	lds	r16, 0x0CDE
	lds ZL,tr3_pos_lo
    720e:	e0 91 e0 0c 	lds	r30, 0x0CE0
	lds ZH,tr3_pos_hi 
    7212:	f0 91 e1 0c 	lds	r31, 0x0CE1
	adc ZL,r16				;add step to low byte of sample pos
    7216:	e0 1f       	adc	r30, r16
	lpm	r16,Z				;load sample
    7218:	04 91       	lpm	r16, Z
	sts tr3_pos_lo,ZL
    721a:	e0 93 e0 0c 	sts	0x0CE0, r30
	sts tr3_pos_frac,r17
    721e:	10 93 df 0c 	sts	0x0CDF, r17
	lds r17,tr3_vol
    7222:	10 91 dc 0c 	lds	r17, 0x0CDC
	mulsu r16,r17			;(sample*mixing vol)
    7226:	01 03       	mulsu	r16, r17
	sbc r0,r0				;sign extend
    7228:	00 08       	sbc	r0, r0
	add r28,r1				;add (sample*vol>>8) to mix buffer lsb
    722a:	c1 0d       	add	r28, r1
	adc r29,r0				;ajust mix buffer msb
    722c:	d0 1d       	adc	r29, r0
;97	

	;channel 4 - 7/15 bit LFSR 
	lds r16,tr4_barrel_lo
    722e:	00 91 e4 0c 	lds	r16, 0x0CE4
	lds r17,tr4_barrel_hi
    7232:	10 91 e5 0c 	lds	r17, 0x0CE5
	lds ZL,tr4_divider
    7236:	e0 91 e6 0c 	lds	r30, 0x0CE6
	dec ZL	
    723a:	ea 95       	dec	r30
	brpl ch4_no_shift	
    723c:	92 f4       	brpl	.+36     	; 0x7262 <ch4_no_shift>

	lds ZH,tr4_params
    723e:	f0 91 e3 0c 	lds	r31, 0x0CE3
	mov ZL,ZH
    7242:	ef 2f       	mov	r30, r31
	lsr ZL 			;keep bits7:1
    7244:	e6 95       	lsr	r30

	mov r0,r16  ;copy barrel shifter
    7246:	00 2e       	mov	r0, r16
	lsr r0
    7248:	06 94       	lsr	r0
	eor r0,r16  ;xor bit0 and bit1
    724a:	00 26       	eor	r0, r16
	bst r0,0
    724c:	00 fa       	bst	r0, 0
	lsr r17
    724e:	16 95       	lsr	r17
	ror r16
    7250:	07 95       	ror	r16
	bld r17,6	;15 bits mode
    7252:	16 f9       	bld	r17, 6
	sbrs ZH,0
    7254:	f0 ff       	sbrs	r31, 0
	bld r16,6	;7 bits mode
    7256:	06 f9       	bld	r16, 6

	sts tr4_barrel_lo,r16
    7258:	00 93 e4 0c 	sts	0x0CE4, r16
	sts tr4_barrel_hi,r17
    725c:	10 93 e5 0c 	sts	0x0CE5, r17

	rjmp ch4_end
    7260:	03 c0       	rjmp	.+6      	; 0x7268 <ch4_end>

00007262 <ch4_no_shift>:
ch4_no_shift:
	;wait loop 21 cycles
	ldi r17,6
    7262:	16 e0       	ldi	r17, 0x06	; 6
	dec r17
    7264:	1a 95       	dec	r17
	brne .-4
    7266:	f1 f7       	brne	.-4      	; 0x7264 <ch4_no_shift+0x2>

00007268 <ch4_end>:
	;rjmp .
ch4_end:

	sts tr4_divider,ZL
    7268:	e0 93 e6 0c 	sts	0x0CE6, r30
	ldi r17,0x80 ;-128
    726c:	10 e8       	ldi	r17, 0x80	; 128
	
	;*** Video sync update ***
	sbrc r18,1								;hsync
    726e:	21 fd       	sbrc	r18, 1
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xF0
    7270:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,1								
    7272:	21 ff       	sbrs	r18, 1
	rjmp .
    7274:	00 c0       	rjmp	.+0      	; 0x7276 <ch4_end+0xe>
	;*************************
	
	sbrc r16,0
    7276:	00 fd       	sbrc	r16, 0
	ldi r17,0x7f ;+127
    7278:	1f e7       	ldi	r17, 0x7F	; 127
	
	lds r16,tr4_vol
    727a:	00 91 e2 0c 	lds	r16, 0x0CE2

	mulsu r17,r16;(sample*mixing vol)
    727e:	10 03       	mulsu	r17, r16
	sbc r0,r0	;sign extend
    7280:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    7282:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb
    7284:	d0 1d       	adc	r29, r0
;142
#if SOUND_CHANNEL_5_ENABLE==1
	;channel 5 PCM -- 45 cycles

	;add fractional part
	lds r16,tr5_pos_frac
    7286:	00 91 eb 0c 	lds	r16, 0x0CEB
	lds r17,tr5_step_lo 
    728a:	10 91 e9 0c 	lds	r17, 0x0CE9
	add r16,r17
    728e:	01 0f       	add	r16, r17
	sts tr5_pos_frac,r16
    7290:	00 93 eb 0c 	sts	0x0CEB, r16

	;add lo
	lds ZL,tr5_pos_lo
    7294:	e0 91 ec 0c 	lds	r30, 0x0CEC
	lds r17,tr5_step_hi 
    7298:	10 91 ea 0c 	lds	r17, 0x0CEA
	adc ZL,r17
    729c:	e1 1f       	adc	r30, r17

	;add hi
	lds ZH,tr5_pos_hi
    729e:	f0 91 ed 0c 	lds	r31, 0x0CED
	ldi r16,0
    72a2:	00 e0       	ldi	r16, 0x00	; 0
	adc ZH,r16
    72a4:	f0 1f       	adc	r31, r16

	movw r16,ZL
    72a6:	8f 01       	movw	r16, r30
	lds r0,tr5_loop_len_lo
    72a8:	00 90 ee 0c 	lds	r0, 0x0CEE
	lds r1,tr5_loop_len_hi	
    72ac:	10 90 ef 0c 	lds	r1, 0x0CEF
	sub r16,r0
    72b0:	00 19       	sub	r16, r0
	sbc r17,r1
    72b2:	11 09       	sbc	r17, r1
	lds r0,tr5_loop_end_lo
    72b4:	00 90 f0 0c 	lds	r0, 0x0CF0
	lds r1,tr5_loop_end_hi
    72b8:	10 90 f1 0c 	lds	r1, 0x0CF1

	cp ZL,r0
    72bc:	e0 15       	cp	r30, r0
	cpc ZH,r1
    72be:	f1 05       	cpc	r31, r1
	brlo .+2
    72c0:	08 f0       	brcs	.+2      	; 0x72c4 <ch4_end+0x5c>
	movw ZL,r16
    72c2:	f8 01       	movw	r30, r16

	sts tr5_pos_lo,ZL
    72c4:	e0 93 ec 0c 	sts	0x0CEC, r30
	sts tr5_pos_hi,ZH
    72c8:	f0 93 ed 0c 	sts	0x0CED, r31

	lpm	r16,Z	;load sample
    72cc:	04 91       	lpm	r16, Z
	lds r17,tr5_vol
    72ce:	10 91 e8 0c 	lds	r17, 0x0CE8

	mulsu r16,r17;(sample*mixing vol)
    72d2:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend
    72d4:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    72d6:	c1 0d       	add	r28, r1
	adc r29,r0	;adjust mix buffer msb	
    72d8:	d0 1d       	adc	r29, r0
#endif
	
	;final processing

	;clip
	clr r0
    72da:	00 24       	eor	r0, r0
	cpi r28,128	;> 127?
    72dc:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0	
    72de:	d0 05       	cpc	r29, r0
	brlt .+2
    72e0:	0c f0       	brlt	.+2      	; 0x72e4 <ch4_end+0x7c>
	ldi r28,127
    72e2:	cf e7       	ldi	r28, 0x7F	; 127
	
	dec r0
    72e4:	0a 94       	dec	r0
	cpi r28,-128; <-128?
    72e6:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0xff
    72e8:	d0 05       	cpc	r29, r0
	brge .+2
    72ea:	0c f4       	brge	.+2      	; 0x72ee <ch4_end+0x86>
	ldi r28,-128
    72ec:	c0 e8       	ldi	r28, 0x80	; 128

	subi r28,128	;convert to unsigned		
    72ee:	c0 58       	subi	r28, 0x80	; 128
	sts _SFR_MEM_ADDR(OCR2A),r28 ;output sound byte
    72f0:	c0 93 b3 00 	sts	0x00B3, r28

000072f4 <update_sound_end>:
#endif


update_sound_end:

	pop r29
    72f4:	df 91       	pop	r29
	pop r28
    72f6:	cf 91       	pop	r28
	pop r18
    72f8:	2f 91       	pop	r18
	pop r17
    72fa:	1f 91       	pop	r17
	pop r16
    72fc:	0f 91       	pop	r16
	
	ret
    72fe:	08 95       	ret

00007300 <SetSpritesTileTable>:
; C-callable
; r25:r24=pointer to sprites pixel data.
;*****************************
.section .text.SetSpritesTileTable
SetSpritesTileTable:
	sts sprites_tile_banks,r24
    7300:	80 93 a4 0c 	sts	0x0CA4, r24
	sts sprites_tile_banks+1,r25
    7304:	90 93 a5 0c 	sts	0x0CA5, r25
	ret
    7308:	08 95       	ret

0000730a <ClearVram>:
; C-callable
;************************************
.section .text.ClearVram
ClearVram:
	//init vram		
	ldi r30,lo8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    730a:	e0 e0       	ldi	r30, 0x00	; 0
	ldi r31,hi8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    730c:	f4 e0       	ldi	r31, 0x04	; 4

	ldi XL,lo8(vram)
    730e:	a0 e0       	ldi	r26, 0x00	; 0
	ldi XH,hi8(vram)
    7310:	b1 e0       	ldi	r27, 0x01	; 1

	ldi r22,RAM_TILES_COUNT
    7312:	6c e1       	ldi	r22, 0x1C	; 28

00007314 <fill_vram_loop>:

fill_vram_loop:
	st X+,r22
    7314:	6d 93       	st	X+, r22
	sbiw r30,1
    7316:	31 97       	sbiw	r30, 0x01	; 1
	brne fill_vram_loop
    7318:	e9 f7       	brne	.-6      	; 0x7314 <fill_vram_loop>

	clr r1
    731a:	11 24       	eor	r1, r1

	ret
    731c:	08 95       	ret

0000731e <SetTile>:
.section .text.SetTile
SetTile:
#if SCROLLING == 1
	;index formula is vram[((y>>3)*256)+8x+(y&7)]
	
	andi r24,0x1f
    731e:	8f 71       	andi	r24, 0x1F	; 31
	mov r23,r22
    7320:	76 2f       	mov	r23, r22
	lsr r22
    7322:	66 95       	lsr	r22
	lsr r22
    7324:	66 95       	lsr	r22
	lsr r22			;y>>3
    7326:	66 95       	lsr	r22
	ldi r18,8		
    7328:	28 e0       	ldi	r18, 0x08	; 8
	mul r24,r18		;x*8
    732a:	82 9f       	mul	r24, r18
	movw XL,r0
    732c:	d0 01       	movw	r26, r0
	subi XL,lo8(-(vram))
    732e:	a0 50       	subi	r26, 0x00	; 0
	sbci XH,hi8(-(vram))
    7330:	bf 4f       	sbci	r27, 0xFF	; 255
	add XH,r22		;vram+((y>>3)*256)
    7332:	b6 0f       	add	r27, r22
	andi r23,7		;y&7	
    7334:	77 70       	andi	r23, 0x07	; 7
	add XL,r23
    7336:	a7 0f       	add	r26, r23
						
	subi r20,~(RAM_TILES_COUNT-1)	
    7338:	44 5e       	subi	r20, 0xE4	; 228
	st X,r20
    733a:	4c 93       	st	X, r20

	clr r1
    733c:	11 24       	eor	r1, r1

	ret
    733e:	08 95       	ret

00007340 <SetTileTable>:
; C-callable
; r25:r24=pointer to tiles data
;************************************
.section .text.SetTileTable
SetTileTable:
	sts tile_table_lo,r24
    7340:	80 93 ac 0c 	sts	0x0CAC, r24
	sts tile_table_hi,r25	
    7344:	90 93 ad 0c 	sts	0x0CAD, r25
	ret
    7348:	08 95       	ret

0000734a <GetVsyncFlag>:
;
; C-callable
;************************************
.section .text.GetVsyncFlag
GetVsyncFlag:
	lds r24,sync_flags
    734a:	80 91 b8 0c 	lds	r24, 0x0CB8
	andi r24,SYNC_FLAG_VSYNC
    734e:	81 70       	andi	r24, 0x01	; 1
	ret
    7350:	08 95       	ret

00007352 <ClearVsyncFlag>:
; 
; C-callable
;*****************************
.section .text.ClearVsyncFlag
ClearVsyncFlag:
	lds r18,sync_flags
    7352:	20 91 b8 0c 	lds	r18, 0x0CB8
	andi r18,~SYNC_FLAG_VSYNC
    7356:	2e 7f       	andi	r18, 0xFE	; 254
	sts sync_flags,r18
    7358:	20 93 b8 0c 	sts	0x0CB8, r18
	ret
    735c:	08 95       	ret

0000735e <ReadJoypad>:
; r24=joypad No (0 or 1)
; returns: (int) r25:r24
;*****************************
.section .text.ReadJoypad
ReadJoypad:	
	tst r24
    735e:	88 23       	and	r24, r24
	brne rj_p2
    7360:	29 f4       	brne	.+10     	; 0x736c <rj_p2>
		
	lds r24,joypad1_status_lo
    7362:	80 91 bf 0c 	lds	r24, 0x0CBF
	lds r25,joypad1_status_lo+1
    7366:	90 91 c0 0c 	lds	r25, 0x0CC0
	ret
    736a:	08 95       	ret

0000736c <rj_p2>:
rj_p2:
	lds r24,joypad2_status_lo
    736c:	80 91 c3 0c 	lds	r24, 0x0CC3
	lds r25,joypad2_status_lo+1	
    7370:	90 91 c4 0c 	lds	r25, 0x0CC4

	ret
    7374:	08 95       	ret

00007376 <WaitUs>:
; r25:r24 - us to wait
; returns: void
;****************************
.section .text.WaitUs
WaitUs:	
	ldi r23,8
    7376:	78 e0       	ldi	r23, 0x08	; 8
	dec 23
    7378:	7a 95       	dec	r23
	brne .-4 ;~1 us
    737a:	f1 f7       	brne	.-4      	; 0x7378 <WaitUs+0x2>
	nop
    737c:	00 00       	nop
	sbiw r24,1
    737e:	01 97       	sbiw	r24, 0x01	; 1
	brne WaitUs
    7380:	d1 f7       	brne	.-12     	; 0x7376 <WaitUs>

	ret
    7382:	08 95       	ret

00007384 <WriteEeprom>:
;****************************

.section .text.WriteEeprom
WriteEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    7384:	f9 99       	sbic	0x1f, 1	; 31
   rjmp WriteEeprom
    7386:	fe cf       	rjmp	.-4      	; 0x7384 <WriteEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    7388:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    738a:	81 bd       	out	0x21, r24	; 33
   ; Write data (r22) to Data Register
   out _SFR_IO_ADDR(EEDR),r22
    738c:	60 bd       	out	0x20, r22	; 32
   cli
    738e:	f8 94       	cli
   ; Write logical one to EEMPE
   sbi _SFR_IO_ADDR(EECR),EEMPE
    7390:	fa 9a       	sbi	0x1f, 2	; 31
   ; Start eeprom write by setting EEPE
   sbi _SFR_IO_ADDR(EECR),EEPE
    7392:	f9 9a       	sbi	0x1f, 1	; 31
   sei
    7394:	78 94       	sei
   ret
    7396:	08 95       	ret

00007398 <ReadEeprom>:
; r24 - value read
;****************************
.section .text.ReadEeprom
ReadEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    7398:	f9 99       	sbic	0x1f, 1	; 31
   rjmp ReadEeprom
    739a:	fe cf       	rjmp	.-4      	; 0x7398 <ReadEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    739c:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    739e:	81 bd       	out	0x21, r24	; 33
   ; Start eeprom read by writing EERE
   cli
    73a0:	f8 94       	cli
   sbi _SFR_IO_ADDR(EECR),EERE
    73a2:	f8 9a       	sbi	0x1f, 0	; 31
   ; Read data from Data Register
   in r24,_SFR_IO_ADDR(EEDR)
    73a4:	80 b5       	in	r24, 0x20	; 32
   sei
    73a6:	78 94       	sei
   ret
    73a8:	08 95       	ret

000073aa <wdt_randomize>:
	.global wdt_randomize
	.section .text.wdt_randomize
	wdt_randomize:

		;set timer 1 full speed count to 0xffff
		ldi r24,0
    73aa:	80 e0       	ldi	r24, 0x00	; 0
		sts sync_pulse,r24
    73ac:	80 93 b7 0c 	sts	0x0CB7, r24


		sts _SFR_MEM_ADDR(TIMSK1),r24
    73b0:	80 93 6f 00 	sts	0x006F, r24
		sts _SFR_MEM_ADDR(OCR1AL),r24
    73b4:	80 93 88 00 	sts	0x0088, r24
		sts _SFR_MEM_ADDR(OCR1AH),r24
    73b8:	80 93 89 00 	sts	0x0089, r24
		sts _SFR_MEM_ADDR(OCR1BL),r24
    73bc:	80 93 8a 00 	sts	0x008A, r24
		sts _SFR_MEM_ADDR(OCR1BH),r24
    73c0:	80 93 8b 00 	sts	0x008B, r24
		sts _SFR_MEM_ADDR(TCNT1H),r24
    73c4:	80 93 85 00 	sts	0x0085, r24
		sts _SFR_MEM_ADDR(TCNT1L),r24
    73c8:	80 93 84 00 	sts	0x0084, r24
		
		sts _SFR_MEM_ADDR(TCCR1A),r24	
    73cc:	80 93 80 00 	sts	0x0080, r24
		ldi 24,(1<<CS10)
    73d0:	81 e0       	ldi	r24, 0x01	; 1
		sts _SFR_MEM_ADDR(TCCR1B),r24
    73d2:	80 93 81 00 	sts	0x0081, r24

		cli
    73d6:	f8 94       	cli

		;enable watchdog at fastest speed and generate interrupts
		ldi r24,0
    73d8:	80 e0       	ldi	r24, 0x00	; 0
		sts _SFR_MEM_ADDR(MCUSR),r24	
    73da:	80 93 54 00 	sts	0x0054, r24
		ldi r25,(1<<WDIE)+(1<<WDE)+(0<<WDP3)+(0<<WDP2)+(0<<WDP1)+(0<<WDP0)
    73de:	98 e4       	ldi	r25, 0x48	; 72
		lds r24,_SFR_MEM_ADDR(WDTCSR)
    73e0:	80 91 60 00 	lds	r24, 0x0060
		ori r24,(1<<WDCE)+(1<<WDE)
    73e4:	88 61       	ori	r24, 0x18	; 24
		sts _SFR_MEM_ADDR(WDTCSR),r24
    73e6:	80 93 60 00 	sts	0x0060, r24
		sts _SFR_MEM_ADDR(WDTCSR),r25
    73ea:	90 93 60 00 	sts	0x0060, r25
	
		sei
    73ee:	78 94       	sei

000073f0 <wait>:

		;generate 8 random cycles
	wait:
		lds r24,sync_pulse ;using the yet unalocated "sync_pulse" as a temp variable
    73f0:	80 91 b7 0c 	lds	r24, 0x0CB7
		cpi r24,8
    73f4:	88 30       	cpi	r24, 0x08	; 8
		brlo wait
    73f6:	e0 f3       	brcs	.-8      	; 0x73f0 <wait>

		ret
    73f8:	08 95       	ret

000073fa <GetTrueRandomSeed>:
	;********************************

	.global GetTrueRandomSeed
	.section .text.GetTrueRandomSeed
	GetTrueRandomSeed:
		lds r24,random_value
    73fa:	80 91 c9 0c 	lds	r24, 0x0CC9
		lds r25,random_value+1
    73fe:	90 91 ca 0c 	lds	r25, 0x0CCA
		ret
    7402:	08 95       	ret

00007404 <__vector_8>:
	;*************************************
	; Watchdog timer interrupt
	;*************************************
	WDT_vect:
		;save flags & status register
		push r16
    7404:	0f 93       	push	r16
		push r17
    7406:	1f 93       	push	r17

		in r16,_SFR_IO_ADDR(SREG)
    7408:	0f b7       	in	r16, 0x3f	; 63
		push r16
    740a:	0f 93       	push	r16

		lds r16,sync_pulse
    740c:	00 91 b7 0c 	lds	r16, 0x0CB7
		inc r16
    7410:	03 95       	inc	r16
		sts sync_pulse,r16
    7412:	00 93 b7 0c 	sts	0x0CB7, r16

		;XOR succesive timer1 LSB into a int
		sbrc r16,0
    7416:	00 fd       	sbrc	r16, 0
		rjmp 1f
    7418:	08 c0       	rjmp	.+16     	; 0x742a <__vector_8+0x26>
		lds r17,random_value
    741a:	10 91 c9 0c 	lds	r17, 0x0CC9
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    741e:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    7422:	10 27       	eor	r17, r16
		sts random_value,r17
    7424:	10 93 c9 0c 	sts	0x0CC9, r17
		rjmp 2f
    7428:	07 c0       	rjmp	.+14     	; 0x7438 <__vector_8+0x34>
	1:
		lds r17,random_value+1
    742a:	10 91 ca 0c 	lds	r17, 0x0CCA
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    742e:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    7432:	10 27       	eor	r17, r16
		sts random_value+1,r17
    7434:	10 93 ca 0c 	sts	0x0CCA, r17
	2:

		ldi r16,(1<<WDIE)+(1<<WDE)
    7438:	08 e4       	ldi	r16, 0x48	; 72
		sts _SFR_MEM_ADDR(WDTCSR),r16
    743a:	00 93 60 00 	sts	0x0060, r16

		;restore flags
		pop r16
    743e:	0f 91       	pop	r16
		out _SFR_IO_ADDR(SREG),r16
    7440:	0f bf       	out	0x3f, r16	; 63
	
		pop r17
    7442:	1f 91       	pop	r17
		pop r16
    7444:	0f 91       	pop	r16
		reti
    7446:	18 95       	reti

00007448 <SoftReset>:

/**
 * Performs a software reset
 */
void SoftReset(void){        
	wdt_enable(WDTO_15MS);  
    7448:	98 e0       	ldi	r25, 0x08	; 8
    744a:	88 e1       	ldi	r24, 0x18	; 24
    744c:	0f b6       	in	r0, 0x3f	; 63
    744e:	f8 94       	cli
    7450:	a8 95       	wdr
    7452:	80 93 60 00 	sts	0x0060, r24
    7456:	0f be       	out	0x3f, r0	; 63
    7458:	90 93 60 00 	sts	0x0060, r25
	while(1);
    745c:	ff cf       	rjmp	.-2      	; 0x745c <SoftReset+0x14>

0000745e <ReadButtons>:
void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
	unsigned char i;

	//latch controllers
	JOYPAD_OUT_PORT|=_BV(JOYPAD_LATCH_PIN);
    745e:	12 9a       	sbi	0x02, 2	; 2
		}else{
			Wait200ns();
			Wait200ns();
		}	
	#else
		Wait200ns();
    7460:	c8 95       	lpm
    7462:	c8 95       	lpm
		Wait200ns();
    7464:	c8 95       	lpm
    7466:	c8 95       	lpm
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));
    7468:	12 98       	cbi	0x02, 2	; 2
    746a:	40 e1       	ldi	r20, 0x10	; 16
	DisplayLogo();
	
}

void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
    746c:	80 e0       	ldi	r24, 0x00	; 0
    746e:	90 e0       	ldi	r25, 0x00	; 0
    7470:	20 e0       	ldi	r18, 0x00	; 0
    7472:	30 e0       	ldi	r19, 0x00	; 0


	//read button states
	for(i=0;i<16;i++){

		p1ButtonsLo>>=1;
    7474:	36 95       	lsr	r19
    7476:	27 95       	ror	r18
		p2ButtonsLo>>=1;
    7478:	96 95       	lsr	r25
    747a:	87 95       	ror	r24
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    747c:	c8 95       	lpm
    747e:	c8 95       	lpm
			Wait200ns();
    7480:	c8 95       	lpm
    7482:	c8 95       	lpm
		#endif
			
		//pulse clock pin		
		JOYPAD_OUT_PORT&=~(_BV(JOYPAD_CLOCK_PIN));
    7484:	13 98       	cbi	0x02, 3	; 2
		
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) p1ButtonsLo|=(1<<15);
    7486:	00 9b       	sbis	0x00, 0	; 0
    7488:	30 68       	ori	r19, 0x80	; 128
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) p2ButtonsLo|=(1<<15);
    748a:	01 9b       	sbis	0x00, 1	; 0
    748c:	90 68       	ori	r25, 0x80	; 128
		
		JOYPAD_OUT_PORT|=_BV(JOYPAD_CLOCK_PIN);
    748e:	13 9a       	sbi	0x02, 3	; 2
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    7490:	c8 95       	lpm
    7492:	c8 95       	lpm
			Wait200ns();
    7494:	c8 95       	lpm
    7496:	c8 95       	lpm
    7498:	41 50       	subi	r20, 0x01	; 1
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));


	//read button states
	for(i=0;i<16;i++){
    749a:	61 f7       	brne	.-40     	; 0x7474 <ReadButtons+0x16>
		#endif

	}

	#if JOYSTICK==TYPE_SNES
		joypad1_status_lo=p1ButtonsLo;
    749c:	30 93 c0 0c 	sts	0x0CC0, r19
    74a0:	20 93 bf 0c 	sts	0x0CBF, r18
		joypad2_status_lo=p2ButtonsLo;
    74a4:	90 93 c4 0c 	sts	0x0CC4, r25
    74a8:	80 93 c3 0c 	sts	0x0CC3, r24
	#else
		joypad1_status_lo=p1ButtonsLo&0xff;
		joypad2_status_lo=p2ButtonsLo&0xff;	
	#endif

	if(joypad1_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B) || joypad2_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B)){
    74ac:	80 91 bf 0c 	lds	r24, 0x0CBF
    74b0:	90 91 c0 0c 	lds	r25, 0x0CC0
    74b4:	0f 97       	sbiw	r24, 0x0f	; 15
    74b6:	31 f0       	breq	.+12     	; 0x74c4 <ReadButtons+0x66>
    74b8:	80 91 c3 0c 	lds	r24, 0x0CC3
    74bc:	90 91 c4 0c 	lds	r25, 0x0CC4
    74c0:	0f 97       	sbiw	r24, 0x0f	; 15
    74c2:	11 f4       	brne	.+4      	; 0x74c8 <ReadButtons+0x6a>
		SoftReset();
    74c4:	0e 94 24 3a 	call	0x7448	; 0x7448 <SoftReset>
    74c8:	08 95       	ret

000074ca <ReadControllers>:
 * program when CONTROLLERS_VSYNC_READ==0.
*/
void ReadControllers(){

	//Detect if devices are connected.
	joypadsConnectionStatus=0;
    74ca:	10 92 f8 0c 	sts	0x0CF8, r1
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) joypadsConnectionStatus|=1;
    74ce:	00 99       	sbic	0x00, 0	; 0
    74d0:	03 c0       	rjmp	.+6      	; 0x74d8 <ReadControllers+0xe>
    74d2:	81 e0       	ldi	r24, 0x01	; 1
    74d4:	80 93 f8 0c 	sts	0x0CF8, r24
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) joypadsConnectionStatus|=2;
    74d8:	01 99       	sbic	0x00, 1	; 0
    74da:	05 c0       	rjmp	.+10     	; 0x74e6 <ReadControllers+0x1c>
    74dc:	80 91 f8 0c 	lds	r24, 0x0CF8
    74e0:	82 60       	ori	r24, 0x02	; 2
    74e2:	80 93 f8 0c 	sts	0x0CF8, r24
			
	//read the standard buttons
	ReadButtons();
    74e6:	0c 94 2f 3a 	jmp	0x745e	; 0x745e <ReadButtons>

000074ea <FormatEeprom>:
	return resp;
}

	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {
    74ea:	cf 93       	push	r28
    74ec:	df 93       	push	r29
    74ee:	c0 e0       	ldi	r28, 0x00	; 0
    74f0:	d0 e0       	ldi	r29, 0x00	; 0
    74f2:	fe 01       	movw	r30, r28
    74f4:	ee 54       	subi	r30, 0x4E	; 78
    74f6:	ff 4f       	sbci	r31, 0xFF	; 255

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
    74f8:	64 91       	lpm	r22, Z
    74fa:	ce 01       	movw	r24, r28
    74fc:	0e 94 c2 39 	call	0x7384	; 0x7384 <WriteEeprom>
    7500:	21 96       	adiw	r28, 0x01	; 1
	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
    7502:	c0 32       	cpi	r28, 0x20	; 32
    7504:	d1 05       	cpc	r29, r1
    7506:	a9 f7       	brne	.-22     	; 0x74f2 <FormatEeprom+0x8>
    7508:	c0 e2       	ldi	r28, 0x20	; 32
    750a:	d0 e0       	ldi	r29, 0x00	; 0
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
    750c:	6f ef       	ldi	r22, 0xFF	; 255
    750e:	ce 01       	movw	r24, r28
    7510:	0e 94 c2 39 	call	0x7384	; 0x7384 <WriteEeprom>
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
    7514:	6f ef       	ldi	r22, 0xFF	; 255
    7516:	ce 01       	movw	r24, r28
    7518:	01 96       	adiw	r24, 0x01	; 1
    751a:	0e 94 c2 39 	call	0x7384	; 0x7384 <WriteEeprom>
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
    751e:	a0 96       	adiw	r28, 0x20	; 32
    7520:	c1 15       	cp	r28, r1
    7522:	88 e0       	ldi	r24, 0x08	; 8
    7524:	d8 07       	cpc	r29, r24
    7526:	91 f7       	brne	.-28     	; 0x750c <FormatEeprom+0x22>
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
   }
   
}
    7528:	df 91       	pop	r29
    752a:	cf 91       	pop	r28
    752c:	08 95       	ret

0000752e <isEepromFormatted>:
	  }
   }
}
	
//returns true if the EEPROM has been setup to work with the kernel.
bool isEepromFormatted(){
    752e:	cf 93       	push	r28
	unsigned id;
	id=ReadEeprom(0)+(ReadEeprom(1)<<8);
    7530:	80 e0       	ldi	r24, 0x00	; 0
    7532:	90 e0       	ldi	r25, 0x00	; 0
    7534:	0e 94 cc 39 	call	0x7398	; 0x7398 <ReadEeprom>
    7538:	c8 2f       	mov	r28, r24
    753a:	81 e0       	ldi	r24, 0x01	; 1
    753c:	90 e0       	ldi	r25, 0x00	; 0
    753e:	0e 94 cc 39 	call	0x7398	; 0x7398 <ReadEeprom>
    7542:	28 2f       	mov	r18, r24
    7544:	30 e0       	ldi	r19, 0x00	; 0
    7546:	32 2f       	mov	r19, r18
    7548:	22 27       	eor	r18, r18
    754a:	2c 0f       	add	r18, r28
    754c:	31 1d       	adc	r19, r1
	return (id==EEPROM_SIGNATURE);
    754e:	81 e0       	ldi	r24, 0x01	; 1
    7550:	2a 35       	cpi	r18, 0x5A	; 90
    7552:	35 45       	sbci	r19, 0x55	; 85
    7554:	09 f0       	breq	.+2      	; 0x7558 <isEepromFormatted+0x2a>
    7556:	80 e0       	ldi	r24, 0x00	; 0
}
    7558:	cf 91       	pop	r28
    755a:	08 95       	ret

0000755c <EepromBlockExists>:
 * @return
 *  0x00 = Success, Block exists.
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK.
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND.
 */
char EepromBlockExists(unsigned int blockId, u16* eepromAddr, u8* nextFreeBlockId){
    755c:	8f 92       	push	r8
    755e:	9f 92       	push	r9
    7560:	af 92       	push	r10
    7562:	bf 92       	push	r11
    7564:	cf 92       	push	r12
    7566:	df 92       	push	r13
    7568:	ef 92       	push	r14
    756a:	ff 92       	push	r15
    756c:	0f 93       	push	r16
    756e:	1f 93       	push	r17
    7570:	cf 93       	push	r28
    7572:	df 93       	push	r29
	u8 nextFreeBlock=0;
	u8 result=EEPROM_ERROR_BLOCK_NOT_FOUND;
	u16 id;
	*eepromAddr=0;
    7574:	fb 01       	movw	r30, r22
    7576:	11 82       	std	Z+1, r1	; 0x01
    7578:	10 82       	st	Z, r1

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    757a:	8f 3f       	cpi	r24, 0xFF	; 255
    757c:	ff ef       	ldi	r31, 0xFF	; 255
    757e:	9f 07       	cpc	r25, r31
    7580:	89 f1       	breq	.+98     	; 0x75e4 <EepromBlockExists+0x88>
    7582:	6a 01       	movw	r12, r20
    7584:	8b 01       	movw	r16, r22
    7586:	7c 01       	movw	r14, r24
    7588:	a1 2c       	mov	r10, r1
    758a:	b1 2c       	mov	r11, r1
    758c:	c0 e0       	ldi	r28, 0x00	; 0
    758e:	d3 e0       	ldi	r29, 0x03	; 3
    7590:	91 2c       	mov	r9, r1
		
	//scan all blocks and get the memory adress of that block and the next free block
	for(u8 i=0;i<EEPROM_MAX_BLOCKS;i++){
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
    7592:	c5 01       	movw	r24, r10
    7594:	0e 94 cc 39 	call	0x7398	; 0x7398 <ReadEeprom>
    7598:	88 2e       	mov	r8, r24
    759a:	c5 01       	movw	r24, r10
    759c:	01 96       	adiw	r24, 0x01	; 1
    759e:	0e 94 cc 39 	call	0x7398	; 0x7398 <ReadEeprom>
    75a2:	28 2f       	mov	r18, r24
    75a4:	30 e0       	ldi	r19, 0x00	; 0
    75a6:	32 2f       	mov	r19, r18
    75a8:	22 27       	eor	r18, r18
    75aa:	28 0d       	add	r18, r8
    75ac:	31 1d       	adc	r19, r1
		
		if(id==blockId){
    75ae:	2e 15       	cp	r18, r14
    75b0:	3f 05       	cpc	r19, r15
    75b2:	29 f4       	brne	.+10     	; 0x75be <EepromBlockExists+0x62>
			*eepromAddr=(i*EEPROM_BLOCK_SIZE);
    75b4:	f8 01       	movw	r30, r16
    75b6:	b1 82       	std	Z+1, r11	; 0x01
    75b8:	a0 82       	st	Z, r10
			result=EEPROM_OK;
    75ba:	d0 e0       	ldi	r29, 0x00	; 0
    75bc:	0b c0       	rjmp	.+22     	; 0x75d4 <EepromBlockExists+0x78>
		}
		
		if(id==0xffff && nextFreeBlock==0){
    75be:	2f 3f       	cpi	r18, 0xFF	; 255
    75c0:	3f 4f       	sbci	r19, 0xFF	; 255
    75c2:	41 f4       	brne	.+16     	; 0x75d4 <EepromBlockExists+0x78>
    75c4:	91 10       	cpse	r9, r1
    75c6:	06 c0       	rjmp	.+12     	; 0x75d4 <EepromBlockExists+0x78>
			nextFreeBlock=i;
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
    75c8:	c1 14       	cp	r12, r1
    75ca:	d1 04       	cpc	r13, r1
    75cc:	11 f0       	breq	.+4      	; 0x75d2 <EepromBlockExists+0x76>
    75ce:	f6 01       	movw	r30, r12
    75d0:	c0 83       	st	Z, r28
    75d2:	9c 2e       	mov	r9, r28
	*eepromAddr=0;

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
		
	//scan all blocks and get the memory adress of that block and the next free block
	for(u8 i=0;i<EEPROM_MAX_BLOCKS;i++){
    75d4:	cf 5f       	subi	r28, 0xFF	; 255
    75d6:	f0 e2       	ldi	r31, 0x20	; 32
    75d8:	af 0e       	add	r10, r31
    75da:	b1 1c       	adc	r11, r1
    75dc:	c0 34       	cpi	r28, 0x40	; 64
    75de:	c9 f6       	brne	.-78     	; 0x7592 <EepromBlockExists+0x36>
			nextFreeBlock=i;
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
		}
	}

	return result;
    75e0:	8d 2f       	mov	r24, r29
    75e2:	01 c0       	rjmp	.+2      	; 0x75e6 <EepromBlockExists+0x8a>
	u8 nextFreeBlock=0;
	u8 result=EEPROM_ERROR_BLOCK_NOT_FOUND;
	u16 id;
	*eepromAddr=0;

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    75e4:	81 e0       	ldi	r24, 0x01	; 1
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
		}
	}

	return result;
}
    75e6:	df 91       	pop	r29
    75e8:	cf 91       	pop	r28
    75ea:	1f 91       	pop	r17
    75ec:	0f 91       	pop	r16
    75ee:	ff 90       	pop	r15
    75f0:	ef 90       	pop	r14
    75f2:	df 90       	pop	r13
    75f4:	cf 90       	pop	r12
    75f6:	bf 90       	pop	r11
    75f8:	af 90       	pop	r10
    75fa:	9f 90       	pop	r9
    75fc:	8f 90       	pop	r8
    75fe:	08 95       	ret

00007600 <EepromWriteBlock>:
 * Returns:
 *  0x00 = Success
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x02 = EEPROM_ERROR_FULL
 */
char EepromWriteBlock(struct EepromBlockStruct *block){
    7600:	ef 92       	push	r14
    7602:	ff 92       	push	r15
    7604:	0f 93       	push	r16
    7606:	1f 93       	push	r17
    7608:	cf 93       	push	r28
    760a:	df 93       	push	r29
    760c:	00 d0       	rcall	.+0      	; 0x760e <EepromWriteBlock+0xe>
    760e:	1f 92       	push	r1
    7610:	cd b7       	in	r28, 0x3d	; 61
    7612:	de b7       	in	r29, 0x3e	; 62
    7614:	8c 01       	movw	r16, r24
	u16 eepromAddr=0;
    7616:	1a 82       	std	Y+2, r1	; 0x02
    7618:	19 82       	std	Y+1, r1	; 0x01
	u8 *srcPtr=(unsigned char *)block,res,nextFreeBlock=0;
    761a:	1b 82       	std	Y+3, r1	; 0x03

	res=EepromBlockExists(block->id,&eepromAddr,&nextFreeBlock);
    761c:	ae 01       	movw	r20, r28
    761e:	4d 5f       	subi	r20, 0xFD	; 253
    7620:	5f 4f       	sbci	r21, 0xFF	; 255
    7622:	be 01       	movw	r22, r28
    7624:	6f 5f       	subi	r22, 0xFF	; 255
    7626:	7f 4f       	sbci	r23, 0xFF	; 255
    7628:	fc 01       	movw	r30, r24
    762a:	80 81       	ld	r24, Z
    762c:	91 81       	ldd	r25, Z+1	; 0x01
    762e:	0e 94 ae 3a 	call	0x755c	; 0x755c <EepromBlockExists>
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;
    7632:	88 23       	and	r24, r24
    7634:	11 f0       	breq	.+4      	; 0x763a <EepromWriteBlock+0x3a>
    7636:	83 30       	cpi	r24, 0x03	; 3
    7638:	19 f5       	brne	.+70     	; 0x7680 <EepromWriteBlock+0x80>

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    763a:	89 81       	ldd	r24, Y+1	; 0x01
    763c:	9a 81       	ldd	r25, Y+2	; 0x02
    763e:	89 2b       	or	r24, r25
    7640:	49 f4       	brne	.+18     	; 0x7654 <EepromWriteBlock+0x54>
    7642:	8b 81       	ldd	r24, Y+3	; 0x03
    7644:	88 23       	and	r24, r24
    7646:	d9 f0       	breq	.+54     	; 0x767e <EepromWriteBlock+0x7e>
	if(eepromAddr==0 && nextFreeBlock!=0) eepromAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;
    7648:	f0 e2       	ldi	r31, 0x20	; 32
    764a:	8f 9f       	mul	r24, r31
    764c:	c0 01       	movw	r24, r0
    764e:	11 24       	eor	r1, r1
    7650:	9a 83       	std	Y+2, r25	; 0x02
    7652:	89 83       	std	Y+1, r24	; 0x01
    7654:	78 01       	movw	r14, r16
    7656:	20 e2       	ldi	r18, 0x20	; 32
    7658:	e2 0e       	add	r14, r18
    765a:	f1 1c       	adc	r15, r1

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
		WriteEeprom(eepromAddr++,*srcPtr);
    765c:	f8 01       	movw	r30, r16
    765e:	61 91       	ld	r22, Z+
    7660:	8f 01       	movw	r16, r30
    7662:	89 81       	ldd	r24, Y+1	; 0x01
    7664:	9a 81       	ldd	r25, Y+2	; 0x02
    7666:	9c 01       	movw	r18, r24
    7668:	2f 5f       	subi	r18, 0xFF	; 255
    766a:	3f 4f       	sbci	r19, 0xFF	; 255
    766c:	3a 83       	std	Y+2, r19	; 0x02
    766e:	29 83       	std	Y+1, r18	; 0x01
    7670:	0e 94 c2 39 	call	0x7384	; 0x7384 <WriteEeprom>
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(eepromAddr==0 && nextFreeBlock!=0) eepromAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
    7674:	0e 15       	cp	r16, r14
    7676:	1f 05       	cpc	r17, r15
    7678:	89 f7       	brne	.-30     	; 0x765c <EepromWriteBlock+0x5c>
		WriteEeprom(eepromAddr++,*srcPtr);
		srcPtr++;	
	}
	
	return 0;
    767a:	80 e0       	ldi	r24, 0x00	; 0
    767c:	01 c0       	rjmp	.+2      	; 0x7680 <EepromWriteBlock+0x80>
	u8 *srcPtr=(unsigned char *)block,res,nextFreeBlock=0;

	res=EepromBlockExists(block->id,&eepromAddr,&nextFreeBlock);
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    767e:	82 e0       	ldi	r24, 0x02	; 2
		WriteEeprom(eepromAddr++,*srcPtr);
		srcPtr++;	
	}
	
	return 0;
}
    7680:	0f 90       	pop	r0
    7682:	0f 90       	pop	r0
    7684:	0f 90       	pop	r0
    7686:	df 91       	pop	r29
    7688:	cf 91       	pop	r28
    768a:	1f 91       	pop	r17
    768c:	0f 91       	pop	r16
    768e:	ff 90       	pop	r15
    7690:	ef 90       	pop	r14
    7692:	08 95       	ret

00007694 <EepromReadBlock>:
 * Returns: 
 *  0x00 = Success
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 */
char EepromReadBlock(unsigned int blockId,struct EepromBlockStruct *block){	
    7694:	cf 92       	push	r12
    7696:	df 92       	push	r13
    7698:	ff 92       	push	r15
    769a:	0f 93       	push	r16
    769c:	1f 93       	push	r17
    769e:	cf 93       	push	r28
    76a0:	df 93       	push	r29
    76a2:	00 d0       	rcall	.+0      	; 0x76a4 <EepromReadBlock+0x10>
    76a4:	cd b7       	in	r28, 0x3d	; 61
    76a6:	de b7       	in	r29, 0x3e	; 62
    76a8:	8b 01       	movw	r16, r22
	u16 eepromAddr;
	u8 *blockPtr=(unsigned char *)block;

	u8 res=EepromBlockExists(blockId,&eepromAddr,NULL);
    76aa:	40 e0       	ldi	r20, 0x00	; 0
    76ac:	50 e0       	ldi	r21, 0x00	; 0
    76ae:	be 01       	movw	r22, r28
    76b0:	6f 5f       	subi	r22, 0xFF	; 255
    76b2:	7f 4f       	sbci	r23, 0xFF	; 255
    76b4:	0e 94 ae 3a 	call	0x755c	; 0x755c <EepromBlockExists>
    76b8:	f8 2e       	mov	r15, r24
	if(res!=0) return res;
    76ba:	81 11       	cpse	r24, r1
    76bc:	13 c0       	rjmp	.+38     	; 0x76e4 <EepromReadBlock+0x50>
    76be:	68 01       	movw	r12, r16
    76c0:	80 e2       	ldi	r24, 0x20	; 32
    76c2:	c8 0e       	add	r12, r24
    76c4:	d1 1c       	adc	r13, r1

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
		*blockPtr=ReadEeprom(eepromAddr++);
    76c6:	89 81       	ldd	r24, Y+1	; 0x01
    76c8:	9a 81       	ldd	r25, Y+2	; 0x02
    76ca:	9c 01       	movw	r18, r24
    76cc:	2f 5f       	subi	r18, 0xFF	; 255
    76ce:	3f 4f       	sbci	r19, 0xFF	; 255
    76d0:	3a 83       	std	Y+2, r19	; 0x02
    76d2:	29 83       	std	Y+1, r18	; 0x01
    76d4:	0e 94 cc 39 	call	0x7398	; 0x7398 <ReadEeprom>
    76d8:	f8 01       	movw	r30, r16
    76da:	81 93       	st	Z+, r24
    76dc:	8f 01       	movw	r16, r30
	u8 *blockPtr=(unsigned char *)block;

	u8 res=EepromBlockExists(blockId,&eepromAddr,NULL);
	if(res!=0) return res;

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
    76de:	ec 15       	cp	r30, r12
    76e0:	fd 05       	cpc	r31, r13
    76e2:	89 f7       	brne	.-30     	; 0x76c6 <EepromReadBlock+0x32>
		*blockPtr=ReadEeprom(eepromAddr++);
		blockPtr++;	
	}
	
	return EEPROM_OK;
}
    76e4:	8f 2d       	mov	r24, r15
    76e6:	0f 90       	pop	r0
    76e8:	0f 90       	pop	r0
    76ea:	df 91       	pop	r29
    76ec:	cf 91       	pop	r28
    76ee:	1f 91       	pop	r17
    76f0:	0f 91       	pop	r16
    76f2:	ff 90       	pop	r15
    76f4:	df 90       	pop	r13
    76f6:	cf 90       	pop	r12
    76f8:	08 95       	ret

000076fa <GetPrngNumber>:
 * Input: Zero=return the next random value. Non-zero=Sets the seed value.
 */
u16 GetPrngNumber(u16 seed){
	static u16 prng_state;
  	
	if(seed!=0) prng_state=seed;
    76fa:	00 97       	sbiw	r24, 0x00	; 0
    76fc:	21 f0       	breq	.+8      	; 0x7706 <GetPrngNumber+0xc>
    76fe:	90 93 cd 0c 	sts	0x0CCD, r25
    7702:	80 93 cc 0c 	sts	0x0CCC, r24
	
	u16 bit  = ((prng_state >> 0) ^ (prng_state >> 2) ^ (prng_state >> 3) ^ (prng_state >> 5) ) & 1;
    7706:	20 91 cc 0c 	lds	r18, 0x0CCC
    770a:	30 91 cd 0c 	lds	r19, 0x0CCD
    770e:	a9 01       	movw	r20, r18
    7710:	56 95       	lsr	r21
    7712:	47 95       	ror	r20
    7714:	56 95       	lsr	r21
    7716:	47 95       	ror	r20
    7718:	c9 01       	movw	r24, r18
    771a:	63 e0       	ldi	r22, 0x03	; 3
    771c:	96 95       	lsr	r25
    771e:	87 95       	ror	r24
    7720:	6a 95       	dec	r22
    7722:	e1 f7       	brne	.-8      	; 0x771c <GetPrngNumber+0x22>
    7724:	84 27       	eor	r24, r20
    7726:	95 27       	eor	r25, r21
    7728:	82 27       	eor	r24, r18
    772a:	93 27       	eor	r25, r19
    772c:	a9 01       	movw	r20, r18
    772e:	75 e0       	ldi	r23, 0x05	; 5
    7730:	56 95       	lsr	r21
    7732:	47 95       	ror	r20
    7734:	7a 95       	dec	r23
    7736:	e1 f7       	brne	.-8      	; 0x7730 <GetPrngNumber+0x36>
    7738:	84 27       	eor	r24, r20
    773a:	95 27       	eor	r25, r21
	prng_state =  (prng_state >> 1) | (bit << 15);
    773c:	99 27       	eor	r25, r25
    773e:	86 95       	lsr	r24
    7740:	97 95       	ror	r25
    7742:	88 27       	eor	r24, r24
    7744:	36 95       	lsr	r19
    7746:	27 95       	ror	r18
    7748:	82 2b       	or	r24, r18
    774a:	93 2b       	or	r25, r19
    774c:	90 93 cd 0c 	sts	0x0CCD, r25
    7750:	80 93 cc 0c 	sts	0x0CCC, r24
	return prng_state;   
}
    7754:	08 95       	ret

00007756 <PatchCommand00>:
/*
 * Command 00: Set envelope speed per frame +127/-128, 0=no enveloppe
 * Param:
 */
void PatchCommand00(Track* track, char param){
	track->envelopeStep=param;
    7756:	fc 01       	movw	r30, r24
    7758:	67 87       	std	Z+15, r22	; 0x0f
    775a:	08 95       	ret

0000775c <PatchCommand01>:
 * Param:
 */
void PatchCommand01(Track* track, char param){
	(void)track; //to remove unused warning
	#if MIXER_CHAN4_TYPE == 0
		mixer.channels.type.noise.barrel=0x0101;
    775c:	e0 ed       	ldi	r30, 0xD0	; 208
    775e:	fc e0       	ldi	r31, 0x0C	; 12
    7760:	81 e0       	ldi	r24, 0x01	; 1
    7762:	91 e0       	ldi	r25, 0x01	; 1
    7764:	95 8b       	std	Z+21, r25	; 0x15
    7766:	84 8b       	std	Z+20, r24	; 0x14
		mixer.channels.type.noise.params=param;
    7768:	63 8b       	std	Z+19, r22	; 0x13
    776a:	08 95       	ret

0000776c <PatchCommand05>:
}
/*
 * Command 05: End of note/fx
 * Param:
 */
void PatchCommand05(Track* track, char param){
    776c:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags&=~(TRACK_FLAGS_PLAYING+TRACK_FLAGS_PRIORITY);	//patchPlaying=false,priority=0	
    776e:	90 81       	ld	r25, Z
    7770:	9f 75       	andi	r25, 0x5F	; 95
    7772:	90 83       	st	Z, r25
    7774:	08 95       	ret

00007776 <PatchCommand06>:

/*
 * Command 06: Note hold
 * Param:
 */
void PatchCommand06(Track* track, char param){
    7776:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags|=TRACK_FLAGS_HOLD_ENV; //patchEnvelopeHold=true;
    7778:	90 81       	ld	r25, Z
    777a:	90 64       	ori	r25, 0x40	; 64
    777c:	90 83       	st	Z, r25
    777e:	08 95       	ret

00007780 <PatchCommand07>:
 * Command 07: Set envelope volume
 * Param:
 */

void PatchCommand07(Track* track, char param){
	track->envelopeVol=param;
    7780:	fc 01       	movw	r30, r24
    7782:	66 87       	std	Z+14, r22	; 0x0e
    7784:	08 95       	ret

00007786 <PatchCommand09>:
 * Command 09: Set tremolo level
 * Param:
*/

void PatchCommand09(Track* track, char param){
	track->tremoloLevel=param;
    7786:	fc 01       	movw	r30, r24
    7788:	62 87       	std	Z+10, r22	; 0x0a
    778a:	08 95       	ret

0000778c <PatchCommand10>:
/*
 * Command 10: Set tremolo rate
 * Param:
*/
void PatchCommand10(Track* track, char param){
	track->tremoloRate=param;
    778c:	fc 01       	movw	r30, r24
    778e:	63 87       	std	Z+11, r22	; 0x0b
    7790:	08 95       	ret

00007792 <PatchCommand11>:
/*
 * Command 11: Pitch slide (linear) 
 * Param: (+/-) half steps to slide to
*/

void PatchCommand11(Track* track, char param){
    7792:	cf 93       	push	r28
    7794:	df 93       	push	r29
    7796:	ec 01       	movw	r28, r24
    7798:	46 2f       	mov	r20, r22
	//slide to note from current note
	s16 currentStep,targetStep,delta;	
	
	currentStep=pgm_read_word(&(steptable[track->note]));
    779a:	29 81       	ldd	r18, Y+1	; 0x01
    779c:	30 e0       	ldi	r19, 0x00	; 0
    779e:	f9 01       	movw	r30, r18
    77a0:	ee 0f       	add	r30, r30
    77a2:	ff 1f       	adc	r31, r31
    77a4:	e8 5f       	subi	r30, 0xF8	; 248
    77a6:	fe 47       	sbci	r31, 0x7E	; 126
    77a8:	65 91       	lpm	r22, Z+
    77aa:	74 91       	lpm	r23, Z
	targetStep=pgm_read_word(&(steptable[track->note+param]));	
    77ac:	f9 01       	movw	r30, r18
    77ae:	e4 0f       	add	r30, r20
    77b0:	f1 1d       	adc	r31, r1
    77b2:	47 fd       	sbrc	r20, 7
    77b4:	fa 95       	dec	r31
    77b6:	ee 0f       	add	r30, r30
    77b8:	ff 1f       	adc	r31, r31
    77ba:	e8 5f       	subi	r30, 0xF8	; 248
    77bc:	fe 47       	sbci	r31, 0x7E	; 126
    77be:	85 91       	lpm	r24, Z+
    77c0:	94 91       	lpm	r25, Z
	delta=((targetStep-currentStep)/track->slideSpeed);
    77c2:	86 1b       	sub	r24, r22
    77c4:	97 0b       	sbc	r25, r23
    77c6:	68 85       	ldd	r22, Y+8	; 0x08
    77c8:	70 e0       	ldi	r23, 0x00	; 0
    77ca:	0e 94 35 67 	call	0xce6a	; 0xce6a <__divmodhi4>
	if(delta==0)delta++;
    77ce:	61 15       	cp	r22, r1
    77d0:	71 05       	cpc	r23, r1
    77d2:	11 f4       	brne	.+4      	; 0x77d8 <PatchCommand11+0x46>
    77d4:	61 e0       	ldi	r22, 0x01	; 1
    77d6:	70 e0       	ldi	r23, 0x00	; 0

	mixer.channels.all[track->channel].step+=delta;
    77d8:	ea 81       	ldd	r30, Y+2	; 0x02
    77da:	86 e0       	ldi	r24, 0x06	; 6
    77dc:	e8 9f       	mul	r30, r24
    77de:	f0 01       	movw	r30, r0
    77e0:	11 24       	eor	r1, r1
    77e2:	e0 53       	subi	r30, 0x30	; 48
    77e4:	f3 4f       	sbci	r31, 0xF3	; 243
    77e6:	81 81       	ldd	r24, Z+1	; 0x01
    77e8:	92 81       	ldd	r25, Z+2	; 0x02
    77ea:	86 0f       	add	r24, r22
    77ec:	97 1f       	adc	r25, r23
    77ee:	92 83       	std	Z+2, r25	; 0x02
    77f0:	81 83       	std	Z+1, r24	; 0x01
	
	track->slideStep=delta;
    77f2:	7e 83       	std	Y+6, r23	; 0x06
    77f4:	6d 83       	std	Y+5, r22	; 0x05
	track->flags|=TRACK_FLAGS_SLIDING;
    77f6:	88 81       	ld	r24, Y
    77f8:	88 60       	ori	r24, 0x08	; 8
    77fa:	88 83       	st	Y, r24
	track->slideNote=track->note+param;
    77fc:	89 81       	ldd	r24, Y+1	; 0x01
    77fe:	48 0f       	add	r20, r24
    7800:	4f 83       	std	Y+7, r20	; 0x07
}
    7802:	df 91       	pop	r29
    7804:	cf 91       	pop	r28
    7806:	08 95       	ret

00007808 <PatchCommand12>:
/*
 * Command 12: Pitch slide speed 
 * Param: slide speed (fixed 4:4)
 */
void PatchCommand12(Track* track, char param){
	track->slideSpeed=param;
    7808:	fc 01       	movw	r30, r24
    780a:	60 87       	std	Z+8, r22	; 0x08
    780c:	08 95       	ret

0000780e <PatchCommand13>:
 *  Command 13: Loop start
 * Description: Defines the start of a loop. Works in conjunction with command 14 (PC_LOOP_END).
 *		 Param: loop count
 */
void PatchCommand13(Track* track, char param){
	track->loopCount=(u8)param;
    780e:	fc 01       	movw	r30, r24
    7810:	64 83       	std	Z+4, r22	; 0x04
    7812:	08 95       	ret

00007814 <PatchCommand02>:
/*
 * Command 02: Set wave
 * Param:
 */
void PatchCommand02(Track* track, char param){
	SetMixerWave(track->channel,param);
    7814:	fc 01       	movw	r30, r24
    7816:	82 81       	ldd	r24, Z+2	; 0x02
    7818:	0c 94 25 40 	jmp	0x804a	; 0x804a <SetMixerWave>

0000781c <PatchCommand03>:
}
/*
 * Command 03: Note up * param
 * Param:
 */
void PatchCommand03(Track* track, char param){
    781c:	fc 01       	movw	r30, r24
	track->note+=param;
    781e:	91 81       	ldd	r25, Z+1	; 0x01
    7820:	69 0f       	add	r22, r25
    7822:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(track->channel,track->note);
    7824:	82 81       	ldd	r24, Z+2	; 0x02
    7826:	0c 94 0e 40 	jmp	0x801c	; 0x801c <SetMixerNote>

0000782a <PatchCommand04>:
}
/*
 * Command 04: Note down * param
 * Param:
 */
void PatchCommand04(Track* track, char param){
    782a:	fc 01       	movw	r30, r24
	track->note-=param;
    782c:	91 81       	ldd	r25, Z+1	; 0x01
    782e:	96 1b       	sub	r25, r22
    7830:	69 2f       	mov	r22, r25
    7832:	91 83       	std	Z+1, r25	; 0x01
	SetMixerNote(track->channel,track->note);
    7834:	82 81       	ldd	r24, Z+2	; 0x02
    7836:	0c 94 0e 40 	jmp	0x801c	; 0x801c <SetMixerNote>

0000783a <PatchCommand08>:
/*
 * Command 08: Set Note/Pitch
 * Param:
 */

void PatchCommand08(Track* track, char param){
    783a:	1f 93       	push	r17
    783c:	cf 93       	push	r28
    783e:	df 93       	push	r29
    7840:	ec 01       	movw	r28, r24
    7842:	16 2f       	mov	r17, r22
	SetMixerNote(track->channel,param);
    7844:	8a 81       	ldd	r24, Y+2	; 0x02
    7846:	0e 94 0e 40 	call	0x801c	; 0x801c <SetMixerNote>
	track->note=param;
    784a:	19 83       	std	Y+1, r17	; 0x01
	track->flags &= ~(TRACK_FLAGS_SLIDING);	
    784c:	88 81       	ld	r24, Y
    784e:	87 7f       	andi	r24, 0xF7	; 247
    7850:	88 83       	st	Y, r24
}
    7852:	df 91       	pop	r29
    7854:	cf 91       	pop	r28
    7856:	1f 91       	pop	r17
    7858:	08 95       	ret

0000785a <PatchCommand14>:
 *					1,PC_NOTE_DOWN,3,
 *					0,PC_LOOP_END,2,
 *					0,PATCH_END  
 *				};
 */
void PatchCommand14(Track* track, char param){
    785a:	dc 01       	movw	r26, r24
	if(track->loopCount>0){
    785c:	14 96       	adiw	r26, 0x04	; 4
    785e:	8c 91       	ld	r24, X
    7860:	14 97       	sbiw	r26, 0x04	; 4
    7862:	88 23       	and	r24, r24
    7864:	19 f1       	breq	.+70     	; 0x78ac <PatchCommand14+0x52>
    7866:	55 96       	adiw	r26, 0x15	; 21
    7868:	2d 91       	ld	r18, X+
    786a:	3c 91       	ld	r19, X
    786c:	56 97       	sbiw	r26, 0x16	; 22
		//track->patchCommandStreamPos=track->loopStart;
		if(param!=0){
    786e:	66 23       	and	r22, r22
    7870:	79 f0       	breq	.+30     	; 0x7890 <PatchCommand14+0x36>
			track->patchCommandStreamPos-=((param+1)*3);
    7872:	77 27       	eor	r23, r23
    7874:	67 fd       	sbrc	r22, 7
    7876:	70 95       	com	r23
    7878:	6f 5f       	subi	r22, 0xFF	; 255
    787a:	7f 4f       	sbci	r23, 0xFF	; 255
    787c:	ab 01       	movw	r20, r22
    787e:	44 0f       	add	r20, r20
    7880:	55 1f       	adc	r21, r21
    7882:	64 0f       	add	r22, r20
    7884:	75 1f       	adc	r23, r21
    7886:	26 1b       	sub	r18, r22
    7888:	37 0b       	sbc	r19, r23
    788a:	09 c0       	rjmp	.+18     	; 0x789e <PatchCommand14+0x44>
			while(1){
				track->patchCommandStreamPos-=3;
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    788c:	ef 3f       	cpi	r30, 0xFF	; 255
    788e:	39 f0       	breq	.+14     	; 0x789e <PatchCommand14+0x44>
		if(param!=0){
			track->patchCommandStreamPos-=((param+1)*3);
		}else{
			u8 command;
			while(1){
				track->patchCommandStreamPos-=3;
    7890:	23 50       	subi	r18, 0x03	; 3
    7892:	31 09       	sbc	r19, r1
    7894:	f9 01       	movw	r30, r18
    7896:	32 97       	sbiw	r30, 0x02	; 2
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
    7898:	e4 91       	lpm	r30, Z
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    789a:	ed 30       	cpi	r30, 0x0D	; 13
    789c:	b9 f7       	brne	.-18     	; 0x788c <PatchCommand14+0x32>
    789e:	56 96       	adiw	r26, 0x16	; 22
    78a0:	3c 93       	st	X, r19
    78a2:	2e 93       	st	-X, r18
    78a4:	55 97       	sbiw	r26, 0x15	; 21
			}
		}
		track->loopCount--;
    78a6:	81 50       	subi	r24, 0x01	; 1
    78a8:	14 96       	adiw	r26, 0x04	; 4
    78aa:	8c 93       	st	X, r24
    78ac:	08 95       	ret

000078ae <InitMusicPlayer>:

const Patch *patchPointers;

void InitMusicPlayer(const Patch *patchPointersParam){

	patchPointers=patchPointersParam;
    78ae:	90 93 71 0d 	sts	0x0D71, r25
    78b2:	80 93 70 0d 	sts	0x0D70, r24

	masterVolume=DEFAULT_MASTER_VOL;
    78b6:	8f e6       	ldi	r24, 0x6F	; 111
    78b8:	80 93 73 0d 	sts	0x0D73, r24
#if MIDI_IN == ENABLED
	InitUartRxBuffer();
	lastMidiInStatus=0;
#endif

	playSong=false;
    78bc:	10 92 ce 0c 	sts	0x0CCE, r1
    78c0:	eb e0       	ldi	r30, 0x0B	; 11
    78c2:	fd e0       	ldi	r31, 0x0D	; 13

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    78c4:	80 e0       	ldi	r24, 0x00	; 0
		tracks[t].channel=t;
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    78c6:	90 e1       	ldi	r25, 0x10	; 16
		tracks[t].noteVol=0;
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    78c8:	3f ef       	ldi	r19, 0xFF	; 255
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
    78ca:	28 e1       	ldi	r18, 0x18	; 24
    78cc:	df 01       	movw	r26, r30
    78ce:	1e 97       	sbiw	r26, 0x0e	; 14

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].channel=t;
    78d0:	8c 93       	st	X, r24
    78d2:	12 97       	sbiw	r26, 0x02	; 2
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    78d4:	9c 93       	st	X, r25
    78d6:	1d 96       	adiw	r26, 0x0d	; 13
		tracks[t].noteVol=0;
    78d8:	1c 92       	st	X, r1
    78da:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    78dc:	3c 93       	st	X, r19
		tracks[t].patchNo=DEFAULT_PATCH;
    78de:	10 82       	st	Z, r1
    78e0:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].tremoloRate=24; //~6hz
    78e2:	2c 93       	st	X, r18
    78e4:	13 97       	sbiw	r26, 0x03	; 3
		tracks[t].slideSpeed=0x10;
    78e6:	9c 93       	st	X, r25
#endif

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    78e8:	8f 5f       	subi	r24, 0xFF	; 255
    78ea:	77 96       	adiw	r30, 0x17	; 23
    78ec:	85 30       	cpi	r24, 0x05	; 5
    78ee:	71 f7       	brne	.-36     	; 0x78cc <InitMusicPlayer+0x1e>
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
		tracks[t].slideSpeed=0x10;
	}

}
    78f0:	08 95       	ret

000078f2 <StartSong>:

#if MUSIC_ENGINE == MIDI

	void StartSong(const char *song){
    78f2:	eb ef       	ldi	r30, 0xFB	; 251
    78f4:	fc e0       	ldi	r31, 0x0C	; 12
		for(unsigned char t=0;t<CHANNELS;t++){
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    78f6:	3f ef       	ldi	r19, 0xFF	; 255

#if MUSIC_ENGINE == MIDI

	void StartSong(const char *song){
		for(unsigned char t=0;t<CHANNELS;t++){
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    78f8:	20 81       	ld	r18, Z
    78fa:	2f 77       	andi	r18, 0x7F	; 127
    78fc:	20 83       	st	Z, r18
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    78fe:	33 83       	std	Z+3, r19	; 0x03
    7900:	77 96       	adiw	r30, 0x17	; 23
}

#if MUSIC_ENGINE == MIDI

	void StartSong(const char *song){
		for(unsigned char t=0;t<CHANNELS;t++){
    7902:	2d e0       	ldi	r18, 0x0D	; 13
    7904:	ee 36       	cpi	r30, 0x6E	; 110
    7906:	f2 07       	cpc	r31, r18
    7908:	b9 f7       	brne	.-18     	; 0x78f8 <StartSong+0x6>
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
		}

		songPos=song+1; //skip first delta-time
    790a:	01 96       	adiw	r24, 0x01	; 1
    790c:	90 93 78 0d 	sts	0x0D78, r25
    7910:	80 93 77 0d 	sts	0x0D77, r24
		songStart=song+1;//skip first delta-time
    7914:	90 93 fa 0c 	sts	0x0CFA, r25
    7918:	80 93 f9 0c 	sts	0x0CF9, r24
		loopStart=song+1;
    791c:	90 93 7a 0d 	sts	0x0D7A, r25
    7920:	80 93 79 0d 	sts	0x0D79, r24
		nextDeltaTime=0;
    7924:	10 92 75 0d 	sts	0x0D75, r1
    7928:	10 92 74 0d 	sts	0x0D74, r1
		currDeltaTime=0;
    792c:	10 92 6f 0d 	sts	0x0D6F, r1
    7930:	10 92 6e 0d 	sts	0x0D6E, r1
		songSpeed=0;
    7934:	10 92 76 0d 	sts	0x0D76, r1

		lastStatus=0;
    7938:	10 92 72 0d 	sts	0x0D72, r1
		playSong=true;
    793c:	81 e0       	ldi	r24, 0x01	; 1
    793e:	80 93 ce 0c 	sts	0x0CCE, r24
    7942:	08 95       	ret

00007944 <StopSong>:


void StopSong(){

	for(u8 i=0;i<CHANNELS;i++){
		tracks[i].envelopeStep=-6;
    7944:	eb ef       	ldi	r30, 0xFB	; 251
    7946:	fc e0       	ldi	r31, 0x0C	; 12
    7948:	8a ef       	ldi	r24, 0xFA	; 250
    794a:	87 87       	std	Z+15, r24	; 0x0f
    794c:	86 a3       	std	Z+38, r24	; 0x26
    794e:	80 93 38 0d 	sts	0x0D38, r24
    7952:	80 93 4f 0d 	sts	0x0D4F, r24
    7956:	80 93 66 0d 	sts	0x0D66, r24
	}

	playSong=false;
    795a:	10 92 ce 0c 	sts	0x0CCE, r1
    795e:	08 95       	ret

00007960 <ReadVarLen>:
}



unsigned int ReadVarLen(const char **songPos)
{
    7960:	dc 01       	movw	r26, r24
    unsigned int value;
    unsigned char c;


    if ( (value = pgm_read_byte((*songPos)++)) & 0x80 )
    7962:	ed 91       	ld	r30, X+
    7964:	fc 91       	ld	r31, X
    7966:	11 97       	sbiw	r26, 0x01	; 1
    7968:	9f 01       	movw	r18, r30
    796a:	2f 5f       	subi	r18, 0xFF	; 255
    796c:	3f 4f       	sbci	r19, 0xFF	; 255
    796e:	11 96       	adiw	r26, 0x01	; 1
    7970:	3c 93       	st	X, r19
    7972:	2e 93       	st	-X, r18
    7974:	e4 91       	lpm	r30, Z
    7976:	e7 fd       	sbrc	r30, 7
    7978:	03 c0       	rjmp	.+6      	; 0x7980 <ReadVarLen+0x20>
    797a:	8e 2f       	mov	r24, r30
    797c:	90 e0       	ldi	r25, 0x00	; 0
    797e:	08 95       	ret
    {
       value &= 0x7F;
    7980:	ef 77       	andi	r30, 0x7F	; 127
    7982:	8e 2f       	mov	r24, r30
    7984:	90 e0       	ldi	r25, 0x00	; 0
       do
       {
         value = (value << 7) + ((c = pgm_read_byte((*songPos)++)) & 0x7F);
    7986:	96 95       	lsr	r25
    7988:	98 2f       	mov	r25, r24
    798a:	88 27       	eor	r24, r24
    798c:	97 95       	ror	r25
    798e:	87 95       	ror	r24
    7990:	2f 5f       	subi	r18, 0xFF	; 255
    7992:	3f 4f       	sbci	r19, 0xFF	; 255
    7994:	f9 01       	movw	r30, r18
    7996:	31 97       	sbiw	r30, 0x01	; 1
    7998:	e4 91       	lpm	r30, Z
    799a:	4e 2f       	mov	r20, r30
    799c:	4f 77       	andi	r20, 0x7F	; 127
    799e:	84 0f       	add	r24, r20
    79a0:	91 1d       	adc	r25, r1
       } while (c & 0x80);
    79a2:	e7 fd       	sbrc	r30, 7
    79a4:	f0 cf       	rjmp	.-32     	; 0x7986 <ReadVarLen+0x26>
    79a6:	2d 93       	st	X+, r18
    79a8:	3c 93       	st	X, r19
    }


    return value;
}
    79aa:	08 95       	ret

000079ac <TriggerCommon>:




void TriggerCommon(Track* track,u8 patch,u8 volume,u8 note){
    79ac:	ef 92       	push	r14
    79ae:	ff 92       	push	r15
    79b0:	0f 93       	push	r16
    79b2:	1f 93       	push	r17
    79b4:	cf 93       	push	r28
    79b6:	df 93       	push	r29
    79b8:	1f 92       	push	r1
    79ba:	cd b7       	in	r28, 0x3d	; 61
    79bc:	de b7       	in	r29, 0x3e	; 62
    79be:	7c 01       	movw	r14, r24
    79c0:	16 2f       	mov	r17, r22
		
	bool isFx = (track->flags&TRACK_FLAGS_PRIORITY);
    79c2:	fc 01       	movw	r30, r24
    79c4:	80 81       	ld	r24, Z
    79c6:	08 2f       	mov	r16, r24
    79c8:	00 1f       	adc	r16, r16
    79ca:	00 27       	eor	r16, r16
    79cc:	00 1f       	adc	r16, r16

	track->envelopeStep=0; 
    79ce:	17 86       	std	Z+15, r1	; 0x0f
	track->envelopeVol=0xff; 
    79d0:	9f ef       	ldi	r25, 0xFF	; 255
    79d2:	96 87       	std	Z+14, r25	; 0x0e
	track->noteVol=volume;
    79d4:	45 87       	std	Z+13, r20	; 0x0d
	track->patchPlayingTime=0;
    79d6:	14 8a       	std	Z+20, r1	; 0x14
	track->flags&=(~(TRACK_FLAGS_HOLD_ENV|TRACK_FLAGS_SLIDING));
    79d8:	87 7b       	andi	r24, 0xB7	; 183
    79da:	80 83       	st	Z, r24
	track->tremoloLevel=0;
    79dc:	12 86       	std	Z+10, r1	; 0x0a
	track->tremoloPos=0;
    79de:	11 86       	std	Z+9, r1	; 0x09
	track->note=note;
    79e0:	21 83       	std	Z+1, r18	; 0x01
	track->loopCount=0;
    79e2:	14 82       	std	Z+4, r1	; 0x04

#if MUSIC_ENGINE == MIDI
	track->expressionVol=DEFAULT_EXPRESSION_VOL;
    79e4:	93 83       	std	Z+3, r25	; 0x03
#endif

	#if SOUND_MIXER == MIXER_TYPE_INLINE

		if(track->channel==3){
    79e6:	82 81       	ldd	r24, Z+2	; 0x02
    79e8:	83 30       	cpi	r24, 0x03	; 3
    79ea:	69 f4       	brne	.+26     	; 0x7a06 <TriggerCommon+0x5a>
			//noise channel		
			if(!isFx) patch=note;			
    79ec:	01 11       	cpse	r16, r1
    79ee:	01 c0       	rjmp	.+2      	; 0x79f2 <TriggerCommon+0x46>
    79f0:	12 2f       	mov	r17, r18
			mixer.channels.type.noise.barrel=0x0101;				
    79f2:	81 e0       	ldi	r24, 0x01	; 1
    79f4:	91 e0       	ldi	r25, 0x01	; 1
    79f6:	90 93 e5 0c 	sts	0x0CE5, r25
    79fa:	80 93 e4 0c 	sts	0x0CE4, r24
			mixer.channels.type.noise.params=1; //default (15bits,no divider)
    79fe:	81 e0       	ldi	r24, 0x01	; 1
    7a00:	80 93 e3 0c 	sts	0x0CE3, r24
    7a04:	39 c0       	rjmp	.+114    	; 0x7a78 <TriggerCommon+0xcc>

		#if SOUND_CHANNEL_5_ENABLE==1		

		}else if(track->channel==4){
    7a06:	84 30       	cpi	r24, 0x04	; 4
    7a08:	69 f5       	brne	.+90     	; 0x7a64 <TriggerCommon+0xb8>
				//PCM channel					
				mixer.channels.type.pcm.positionFrac=0;
    7a0a:	10 92 eb 0c 	sts	0x0CEB, r1
				const char *pos=(const char*)pgm_read_word(&(patchPointers[patch].pcmData));
    7a0e:	80 91 70 0d 	lds	r24, 0x0D70
    7a12:	90 91 71 0d 	lds	r25, 0x0D71
    7a16:	f9 e0       	ldi	r31, 0x09	; 9
    7a18:	6f 9f       	mul	r22, r31
    7a1a:	80 0d       	add	r24, r0
    7a1c:	91 1d       	adc	r25, r1
    7a1e:	11 24       	eor	r1, r1
    7a20:	fc 01       	movw	r30, r24
    7a22:	31 96       	adiw	r30, 0x01	; 1
    7a24:	a5 91       	lpm	r26, Z+
    7a26:	b4 91       	lpm	r27, Z
				mixer.channels.type.pcm.position=pos;				
    7a28:	b0 93 ed 0c 	sts	0x0CED, r27
    7a2c:	a0 93 ec 0c 	sts	0x0CEC, r26
				mixer.pcmLoopLenght=pgm_read_word(&(patchPointers[patch].loopEnd))-pgm_read_word(&(patchPointers[patch].loopStart));
    7a30:	ac 01       	movw	r20, r24
    7a32:	49 5f       	subi	r20, 0xF9	; 249
    7a34:	5f 4f       	sbci	r21, 0xFF	; 255
    7a36:	fa 01       	movw	r30, r20
    7a38:	65 91       	lpm	r22, Z+
    7a3a:	74 91       	lpm	r23, Z
    7a3c:	05 96       	adiw	r24, 0x05	; 5
    7a3e:	fc 01       	movw	r30, r24
    7a40:	85 91       	lpm	r24, Z+
    7a42:	94 91       	lpm	r25, Z
    7a44:	68 1b       	sub	r22, r24
    7a46:	79 0b       	sbc	r23, r25
    7a48:	70 93 ef 0c 	sts	0x0CEF, r23
    7a4c:	60 93 ee 0c 	sts	0x0CEE, r22
				mixer.pcmLoopEnd=pos+pgm_read_word(&(patchPointers[patch].loopEnd));
    7a50:	fa 01       	movw	r30, r20
    7a52:	85 91       	lpm	r24, Z+
    7a54:	94 91       	lpm	r25, Z
    7a56:	a8 0f       	add	r26, r24
    7a58:	b9 1f       	adc	r27, r25
    7a5a:	b0 93 f1 0c 	sts	0x0CF1, r27
    7a5e:	a0 93 f0 0c 	sts	0x0CF0, r26
    7a62:	05 c0       	rjmp	.+10     	; 0x7a6e <TriggerCommon+0xc2>
				SetMixerNote(track->channel,note);
		#endif	

		}else{					
			//wave channels					
			SetMixerWave(track->channel,0);//default wave
    7a64:	60 e0       	ldi	r22, 0x00	; 0
    7a66:	29 83       	std	Y+1, r18	; 0x01
    7a68:	0e 94 25 40 	call	0x804a	; 0x804a <SetMixerWave>
			SetMixerNote(track->channel,note);
    7a6c:	29 81       	ldd	r18, Y+1	; 0x01
    7a6e:	62 2f       	mov	r22, r18
    7a70:	f7 01       	movw	r30, r14
    7a72:	82 81       	ldd	r24, Z+2	; 0x02
    7a74:	0e 94 0e 40 	call	0x801c	; 0x801c <SetMixerNote>
		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
		track->fxPatchNo=patch;
    7a78:	f7 01       	movw	r30, r14

		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
    7a7a:	00 23       	and	r16, r16
    7a7c:	11 f0       	breq	.+4      	; 0x7a82 <TriggerCommon+0xd6>
		track->fxPatchNo=patch;
    7a7e:	11 8b       	std	Z+17, r17	; 0x11
    7a80:	01 c0       	rjmp	.+2      	; 0x7a84 <TriggerCommon+0xd8>
	}else{
		track->patchNo=patch;	
    7a82:	10 8b       	std	Z+16, r17	; 0x10
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
    7a84:	e0 91 70 0d 	lds	r30, 0x0D70
    7a88:	f0 91 71 0d 	lds	r31, 0x0D71
    7a8c:	39 e0       	ldi	r19, 0x09	; 9
    7a8e:	13 9f       	mul	r17, r19
    7a90:	e0 0d       	add	r30, r0
    7a92:	f1 1d       	adc	r31, r1
    7a94:	11 24       	eor	r1, r1
    7a96:	33 96       	adiw	r30, 0x03	; 3
    7a98:	85 91       	lpm	r24, Z+
    7a9a:	94 91       	lpm	r25, Z
	if(pos==NULL){
		track->patchCommandStreamPos=NULL;
    7a9c:	f7 01       	movw	r30, r14
	}else{
		track->patchNo=patch;	
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
	if(pos==NULL){
    7a9e:	00 97       	sbiw	r24, 0x00	; 0
    7aa0:	19 f4       	brne	.+6      	; 0x7aa8 <TriggerCommon+0xfc>
		track->patchCommandStreamPos=NULL;
    7aa2:	16 8a       	std	Z+22, r1	; 0x16
    7aa4:	15 8a       	std	Z+21, r1	; 0x15
    7aa6:	08 c0       	rjmp	.+16     	; 0x7ab8 <TriggerCommon+0x10c>
	}else{
		track->patchCurrDeltaTime=0;
    7aa8:	13 8a       	std	Z+19, r1	; 0x13
		track->patchNextDeltaTime=pgm_read_byte(pos++);
    7aaa:	fc 01       	movw	r30, r24
    7aac:	24 91       	lpm	r18, Z
    7aae:	f7 01       	movw	r30, r14
    7ab0:	22 8b       	std	Z+18, r18	; 0x12
    7ab2:	01 96       	adiw	r24, 0x01	; 1
		track->patchCommandStreamPos=pos;
    7ab4:	96 8b       	std	Z+22, r25	; 0x16
    7ab6:	85 8b       	std	Z+21, r24	; 0x15
	}

}
    7ab8:	0f 90       	pop	r0
    7aba:	df 91       	pop	r29
    7abc:	cf 91       	pop	r28
    7abe:	1f 91       	pop	r17
    7ac0:	0f 91       	pop	r16
    7ac2:	ff 90       	pop	r15
    7ac4:	ef 90       	pop	r14
    7ac6:	08 95       	ret

00007ac8 <TriggerFx>:

/* Trigger a sound effect.
 * Method allocates the channel based on priority.
 * Retrig: if this fx if already playing on a track, reuse same track.
 */
void TriggerFx(unsigned char patch,unsigned char volume,bool retrig){
    7ac8:	cf 93       	push	r28
    7aca:	df 93       	push	r29
	unsigned char channel;
	
	unsigned char type=(unsigned char)pgm_read_byte(&(patchPointers[patch].type));
    7acc:	e0 91 70 0d 	lds	r30, 0x0D70
    7ad0:	f0 91 71 0d 	lds	r31, 0x0D71
    7ad4:	99 e0       	ldi	r25, 0x09	; 9
    7ad6:	89 9f       	mul	r24, r25
    7ad8:	e0 0d       	add	r30, r0
    7ada:	f1 1d       	adc	r31, r1
    7adc:	11 24       	eor	r1, r1
    7ade:	e4 91       	lpm	r30, Z

	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
    7ae0:	e1 30       	cpi	r30, 0x01	; 1
    7ae2:	e9 f0       	breq	.+58     	; 0x7b1e <TriggerFx+0x56>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
    7ae4:	e2 30       	cpi	r30, 0x02	; 2
    7ae6:	e9 f0       	breq	.+58     	; 0x7b22 <TriggerFx+0x5a>
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
    7ae8:	20 91 12 0d 	lds	r18, 0x0D12
    7aec:	27 ff       	sbrs	r18, 7
    7aee:	1d c0       	rjmp	.+58     	; 0x7b2a <TriggerFx+0x62>
    7af0:	20 91 23 0d 	lds	r18, 0x0D23
    7af4:	28 13       	cpse	r18, r24
    7af6:	02 c0       	rjmp	.+4      	; 0x7afc <TriggerFx+0x34>
    7af8:	41 11       	cpse	r20, r1
    7afa:	17 c0       	rjmp	.+46     	; 0x7b2a <TriggerFx+0x62>
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
    7afc:	20 91 29 0d 	lds	r18, 0x0D29
    7b00:	27 ff       	sbrs	r18, 7
    7b02:	11 c0       	rjmp	.+34     	; 0x7b26 <TriggerFx+0x5e>
    7b04:	20 91 3a 0d 	lds	r18, 0x0D3A
    7b08:	28 13       	cpse	r18, r24
    7b0a:	02 c0       	rjmp	.+4      	; 0x7b10 <TriggerFx+0x48>
    7b0c:	41 11       	cpse	r20, r1
    7b0e:	0b c0       	rjmp	.+22     	; 0x7b26 <TriggerFx+0x5e>
		channel=2;
	}else{
		//both channels have fx playing, use the oldest one
		if(tracks[1].patchPlayingTime>tracks[2].patchPlayingTime){
    7b10:	20 91 26 0d 	lds	r18, 0x0D26
    7b14:	90 91 3d 0d 	lds	r25, 0x0D3D
    7b18:	92 17       	cp	r25, r18
    7b1a:	28 f4       	brcc	.+10     	; 0x7b26 <TriggerFx+0x5e>
    7b1c:	06 c0       	rjmp	.+12     	; 0x7b2a <TriggerFx+0x62>
	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
		//noise or PCM channel fx		
		channel=3;
    7b1e:	c3 e0       	ldi	r28, 0x03	; 3
    7b20:	05 c0       	rjmp	.+10     	; 0x7b2c <TriggerFx+0x64>
	}else if(type==2){
		channel=4;
    7b22:	c4 e0       	ldi	r28, 0x04	; 4
    7b24:	03 c0       	rjmp	.+6      	; 0x7b2c <TriggerFx+0x64>
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
		channel=2;
    7b26:	c2 e0       	ldi	r28, 0x02	; 2
    7b28:	01 c0       	rjmp	.+2      	; 0x7b2c <TriggerFx+0x64>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
    7b2a:	c1 e0       	ldi	r28, 0x01	; 1
			channel=2;
		}
	}				

	Track* track=&tracks[channel];
	track->flags=TRACK_FLAGS_PRIORITY; //priority=1;
    7b2c:	97 e1       	ldi	r25, 0x17	; 23
    7b2e:	c9 9f       	mul	r28, r25
    7b30:	e0 01       	movw	r28, r0
    7b32:	11 24       	eor	r1, r1
    7b34:	c5 50       	subi	r28, 0x05	; 5
    7b36:	d3 4f       	sbci	r29, 0xF3	; 243
    7b38:	90 e8       	ldi	r25, 0x80	; 128
    7b3a:	98 83       	st	Y, r25
	track->patchCommandStreamPos = NULL;
    7b3c:	1e 8a       	std	Y+22, r1	; 0x16
    7b3e:	1d 8a       	std	Y+21, r1	; 0x15
	TriggerCommon(track,patch,volume,80);
    7b40:	20 e5       	ldi	r18, 0x50	; 80
    7b42:	46 2f       	mov	r20, r22
    7b44:	68 2f       	mov	r22, r24
    7b46:	ce 01       	movw	r24, r28
    7b48:	0e 94 d6 3c 	call	0x79ac	; 0x79ac <TriggerCommon>
	track->flags|=TRACK_FLAGS_PLAYING;
    7b4c:	88 81       	ld	r24, Y
    7b4e:	80 62       	ori	r24, 0x20	; 32
    7b50:	88 83       	st	Y, r24
}
    7b52:	df 91       	pop	r29
    7b54:	cf 91       	pop	r28
    7b56:	08 95       	ret

00007b58 <TriggerNote>:


void TriggerNote(unsigned char channel,unsigned char patch,unsigned char note,unsigned char volume){
    7b58:	cf 93       	push	r28
    7b5a:	df 93       	push	r29
	Track* track=&tracks[channel];

	//allow only other music notes 
	if((track->flags&TRACK_FLAGS_PLAYING)==0 || (track->flags&TRACK_FLAGS_PRIORITY)==0){
    7b5c:	a8 2f       	mov	r26, r24
    7b5e:	b0 e0       	ldi	r27, 0x00	; 0
    7b60:	97 e1       	ldi	r25, 0x17	; 23
    7b62:	89 9f       	mul	r24, r25
    7b64:	f0 01       	movw	r30, r0
    7b66:	11 24       	eor	r1, r1
    7b68:	e5 50       	subi	r30, 0x05	; 5
    7b6a:	f3 4f       	sbci	r31, 0xF3	; 243
    7b6c:	80 81       	ld	r24, Z
    7b6e:	85 ff       	sbrs	r24, 5
    7b70:	02 c0       	rjmp	.+4      	; 0x7b76 <TriggerNote+0x1e>
    7b72:	87 fd       	sbrc	r24, 7
    7b74:	2e c0       	rjmp	.+92     	; 0x7bd2 <TriggerNote+0x7a>
			
		if(volume==0){ //note-off received
    7b76:	21 11       	cpse	r18, r1
    7b78:	18 c0       	rjmp	.+48     	; 0x7baa <TriggerNote+0x52>

			
			//cut note if there's no envelope & no note hold
			if(track->envelopeStep==0 && !(track->flags&TRACK_FLAGS_HOLD_ENV)){
    7b7a:	97 e1       	ldi	r25, 0x17	; 23
    7b7c:	9a 9f       	mul	r25, r26
    7b7e:	f0 01       	movw	r30, r0
    7b80:	9b 9f       	mul	r25, r27
    7b82:	f0 0d       	add	r31, r0
    7b84:	11 24       	eor	r1, r1
    7b86:	e5 50       	subi	r30, 0x05	; 5
    7b88:	f3 4f       	sbci	r31, 0xF3	; 243
    7b8a:	97 85       	ldd	r25, Z+15	; 0x0f
    7b8c:	91 11       	cpse	r25, r1
    7b8e:	02 c0       	rjmp	.+4      	; 0x7b94 <TriggerNote+0x3c>
    7b90:	86 ff       	sbrs	r24, 6
				track->noteVol=0;
    7b92:	15 86       	std	Z+13, r1	; 0x0d
			}

			track->flags&=(~TRACK_FLAGS_HOLD_ENV);//patchEnvelopeHold=false;
    7b94:	97 e1       	ldi	r25, 0x17	; 23
    7b96:	9a 9f       	mul	r25, r26
    7b98:	f0 01       	movw	r30, r0
    7b9a:	9b 9f       	mul	r25, r27
    7b9c:	f0 0d       	add	r31, r0
    7b9e:	11 24       	eor	r1, r1
    7ba0:	e5 50       	subi	r30, 0x05	; 5
    7ba2:	f3 4f       	sbci	r31, 0xF3	; 243
    7ba4:	8f 7b       	andi	r24, 0xBF	; 191
    7ba6:	80 83       	st	Z, r24
    7ba8:	14 c0       	rjmp	.+40     	; 0x7bd2 <TriggerNote+0x7a>
    7baa:	82 2f       	mov	r24, r18
    7bac:	24 2f       	mov	r18, r20
		}else{
		
			track->flags=0;//&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    7bae:	97 e1       	ldi	r25, 0x17	; 23
    7bb0:	9a 9f       	mul	r25, r26
    7bb2:	e0 01       	movw	r28, r0
    7bb4:	9b 9f       	mul	r25, r27
    7bb6:	d0 0d       	add	r29, r0
    7bb8:	11 24       	eor	r1, r1
    7bba:	c5 50       	subi	r28, 0x05	; 5
    7bbc:	d3 4f       	sbci	r29, 0xF3	; 243
    7bbe:	18 82       	st	Y, r1
			track->patchCommandStreamPos = NULL;
    7bc0:	1e 8a       	std	Y+22, r1	; 0x16
    7bc2:	1d 8a       	std	Y+21, r1	; 0x15
			TriggerCommon(track,patch,volume,note);
    7bc4:	48 2f       	mov	r20, r24
    7bc6:	ce 01       	movw	r24, r28
    7bc8:	0e 94 d6 3c 	call	0x79ac	; 0x79ac <TriggerCommon>
			track->flags|=TRACK_FLAGS_PLAYING;
    7bcc:	88 81       	ld	r24, Y
    7bce:	80 62       	ori	r24, 0x20	; 32
    7bd0:	88 83       	st	Y, r24
		}

	}
}
    7bd2:	df 91       	pop	r29
    7bd4:	cf 91       	pop	r28
    7bd6:	08 95       	ret

00007bd8 <ProcessMusic>:
	}

#endif


void ProcessMusic(void){
    7bd8:	6f 92       	push	r6
    7bda:	7f 92       	push	r7
    7bdc:	8f 92       	push	r8
    7bde:	9f 92       	push	r9
    7be0:	af 92       	push	r10
    7be2:	bf 92       	push	r11
    7be4:	cf 92       	push	r12
    7be6:	df 92       	push	r13
    7be8:	ef 92       	push	r14
    7bea:	ff 92       	push	r15
    7bec:	0f 93       	push	r16
    7bee:	1f 93       	push	r17
    7bf0:	cf 93       	push	r28
    7bf2:	df 93       	push	r29
    7bf4:	cb ef       	ldi	r28, 0xFB	; 251
    7bf6:	dc e0       	ldi	r29, 0x0C	; 12
    7bf8:	00 ed       	ldi	r16, 0xD0	; 208
    7bfa:	1c e0       	ldi	r17, 0x0C	; 12
    7bfc:	d8 01       	movw	r26, r16
    7bfe:	9e 01       	movw	r18, r28
    7c00:	40 e0       	ldi	r20, 0x00	; 0
    7c02:	50 e0       	ldi	r21, 0x00	; 0
    7c04:	ca 01       	movw	r24, r20
    7c06:	85 50       	subi	r24, 0x05	; 5
    7c08:	93 4f       	sbci	r25, 0xF3	; 243
    7c0a:	6c 01       	movw	r12, r24
	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//update envelope
		if(track->envelopeStep!=0){
    7c0c:	fc 01       	movw	r30, r24
    7c0e:	87 85       	ldd	r24, Z+15	; 0x0f
    7c10:	88 23       	and	r24, r24
    7c12:	91 f0       	breq	.+36     	; 0x7c38 <ProcessMusic+0x60>
			vol=track->envelopeVol+track->envelopeStep;		
    7c14:	66 85       	ldd	r22, Z+14	; 0x0e
    7c16:	99 27       	eor	r25, r25
    7c18:	87 fd       	sbrc	r24, 7
    7c1a:	90 95       	com	r25
    7c1c:	86 0f       	add	r24, r22
    7c1e:	91 1d       	adc	r25, r1
    7c20:	8f 3f       	cpi	r24, 0xFF	; 255
    7c22:	91 05       	cpc	r25, r1
    7c24:	19 f0       	breq	.+6      	; 0x7c2c <ProcessMusic+0x54>
    7c26:	14 f0       	brlt	.+4      	; 0x7c2c <ProcessMusic+0x54>
    7c28:	8f ef       	ldi	r24, 0xFF	; 255
    7c2a:	90 e0       	ldi	r25, 0x00	; 0
    7c2c:	97 ff       	sbrs	r25, 7
    7c2e:	02 c0       	rjmp	.+4      	; 0x7c34 <ProcessMusic+0x5c>
    7c30:	80 e0       	ldi	r24, 0x00	; 0
    7c32:	90 e0       	ldi	r25, 0x00	; 0
			if(vol<0){
				vol=0;			
			}else if(vol>0xff){
				vol=0xff;						
			}
			track->envelopeVol=vol;
    7c34:	f6 01       	movw	r30, r12
    7c36:	86 87       	std	Z+14, r24	; 0x0e
		}

		//if volumes reaches zero and no more patch command, explicitly end playing on track
		//if(vol==0 && track->patchCommandStreamPos==NULL) track->flags&=~(TRACK_FLAGS_PLAYING);

		if(track->flags & TRACK_FLAGS_SLIDING){
    7c38:	f9 01       	movw	r30, r18
    7c3a:	f0 80       	ld	r15, Z
    7c3c:	f3 fe       	sbrs	r15, 3
    7c3e:	2a c0       	rjmp	.+84     	; 0x7c94 <ProcessMusic+0xbc>

			mixer.channels.all[trackNo].step+=track->slideStep;
    7c40:	65 81       	ldd	r22, Z+5	; 0x05
    7c42:	76 81       	ldd	r23, Z+6	; 0x06
    7c44:	11 96       	adiw	r26, 0x01	; 1
    7c46:	8d 91       	ld	r24, X+
    7c48:	9c 91       	ld	r25, X
    7c4a:	12 97       	sbiw	r26, 0x02	; 2
    7c4c:	86 0f       	add	r24, r22
    7c4e:	97 1f       	adc	r25, r23
    7c50:	12 96       	adiw	r26, 0x02	; 2
    7c52:	9c 93       	st	X, r25
    7c54:	8e 93       	st	-X, r24
    7c56:	11 97       	sbiw	r26, 0x01	; 1
			u16 tStep=pgm_read_word(&(steptable[track->slideNote]));
    7c58:	f6 01       	movw	r30, r12
    7c5a:	e7 80       	ldd	r14, Z+7	; 0x07
    7c5c:	ee 2d       	mov	r30, r14
    7c5e:	f0 e0       	ldi	r31, 0x00	; 0
    7c60:	ee 0f       	add	r30, r30
    7c62:	ff 1f       	adc	r31, r31
    7c64:	e8 5f       	subi	r30, 0xF8	; 248
    7c66:	fe 47       	sbci	r31, 0x7E	; 126
    7c68:	c5 90       	lpm	r12, Z+
    7c6a:	d4 90       	lpm	r13, Z

			if((track->slideStep>0 && mixer.channels.all[trackNo].step>=tStep) || 
    7c6c:	16 16       	cp	r1, r22
    7c6e:	17 06       	cpc	r1, r23
    7c70:	24 f4       	brge	.+8      	; 0x7c7a <ProcessMusic+0xa2>
    7c72:	8c 15       	cp	r24, r12
    7c74:	9d 05       	cpc	r25, r13
    7c76:	30 f4       	brcc	.+12     	; 0x7c84 <ProcessMusic+0xac>
    7c78:	0d c0       	rjmp	.+26     	; 0x7c94 <ProcessMusic+0xbc>
    7c7a:	67 2b       	or	r22, r23
    7c7c:	59 f0       	breq	.+22     	; 0x7c94 <ProcessMusic+0xbc>
				(track->slideStep<0 && mixer.channels.all[trackNo].step<=tStep))
    7c7e:	c8 16       	cp	r12, r24
    7c80:	d9 06       	cpc	r13, r25
    7c82:	40 f0       	brcs	.+16     	; 0x7c94 <ProcessMusic+0xbc>
			{					
				mixer.channels.all[trackNo].step = tStep;					
    7c84:	12 96       	adiw	r26, 0x02	; 2
    7c86:	dc 92       	st	X, r13
    7c88:	ce 92       	st	-X, r12
    7c8a:	11 97       	sbiw	r26, 0x01	; 1
				track->flags &= ~(TRACK_FLAGS_SLIDING);	
    7c8c:	8f 2d       	mov	r24, r15
    7c8e:	87 7f       	andi	r24, 0xF7	; 247
    7c90:	f9 01       	movw	r30, r18
    7c92:	80 83       	st	Z, r24
    7c94:	49 5e       	subi	r20, 0xE9	; 233
    7c96:	5f 4f       	sbci	r21, 0xFF	; 255
    7c98:	29 5e       	subi	r18, 0xE9	; 233
    7c9a:	3f 4f       	sbci	r19, 0xFF	; 255
    7c9c:	16 96       	adiw	r26, 0x06	; 6
	u8 channel;
	Track* track;


	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    7c9e:	43 37       	cpi	r20, 0x73	; 115
    7ca0:	51 05       	cpc	r21, r1
    7ca2:	09 f0       	breq	.+2      	; 0x7ca6 <ProcessMusic+0xce>
    7ca4:	af cf       	rjmp	.-162    	; 0x7c04 <ProcessMusic+0x2c>
	}



	//Process song MIDI notes
	if(playSong){
    7ca6:	80 91 ce 0c 	lds	r24, 0x0CCE
    7caa:	88 23       	and	r24, r24
    7cac:	09 f4       	brne	.+2      	; 0x7cb0 <ProcessMusic+0xd8>
    7cae:	cc c0       	rjmp	.+408    	; 0x7e48 <ProcessMusic+0x270>
							}else if(c1==CONTROLER_EXPRESSION){
								tracks[channel].expressionVol=c2<<1;
							}else if(c1==CONTROLER_TREMOLO){
								tracks[channel].tremoloLevel=c2<<1;
							}else if(c1==CONTROLER_TREMOLO_RATE){
								tracks[channel].tremoloRate=c2<<1;
    7cb0:	57 e1       	ldi	r21, 0x17	; 23
    7cb2:	f5 2e       	mov	r15, r21
	if(playSong){
	
		#if MUSIC_ENGINE == MIDI
			
			//process all simultaneous events
			while(currDeltaTime==nextDeltaTime){
    7cb4:	80 91 6e 0d 	lds	r24, 0x0D6E
    7cb8:	90 91 6f 0d 	lds	r25, 0x0D6F
    7cbc:	20 91 74 0d 	lds	r18, 0x0D74
    7cc0:	30 91 75 0d 	lds	r19, 0x0D75
    7cc4:	82 17       	cp	r24, r18
    7cc6:	93 07       	cpc	r25, r19
    7cc8:	09 f0       	breq	.+2      	; 0x7ccc <ProcessMusic+0xf4>
    7cca:	b9 c0       	rjmp	.+370    	; 0x7e3e <ProcessMusic+0x266>

				c1=pgm_read_byte(songPos++);
    7ccc:	20 91 77 0d 	lds	r18, 0x0D77
    7cd0:	30 91 78 0d 	lds	r19, 0x0D78
    7cd4:	b9 01       	movw	r22, r18
    7cd6:	6f 5f       	subi	r22, 0xFF	; 255
    7cd8:	7f 4f       	sbci	r23, 0xFF	; 255
    7cda:	70 93 78 0d 	sts	0x0D78, r23
    7cde:	60 93 77 0d 	sts	0x0D77, r22
    7ce2:	f9 01       	movw	r30, r18
    7ce4:	44 91       	lpm	r20, Z
			
				if(c1==0xff){
    7ce6:	4f 3f       	cpi	r20, 0xFF	; 255
    7ce8:	79 f5       	brne	.+94     	; 0x7d48 <ProcessMusic+0x170>
					//META data type event
					c1=pgm_read_byte(songPos++);
    7cea:	a9 01       	movw	r20, r18
    7cec:	4e 5f       	subi	r20, 0xFE	; 254
    7cee:	5f 4f       	sbci	r21, 0xFF	; 255
    7cf0:	50 93 78 0d 	sts	0x0D78, r21
    7cf4:	40 93 77 0d 	sts	0x0D77, r20
    7cf8:	fb 01       	movw	r30, r22
    7cfa:	64 91       	lpm	r22, Z

				
					if(c1==0x2f){ //end of song
    7cfc:	6f 32       	cpi	r22, 0x2F	; 47
    7cfe:	19 f4       	brne	.+6      	; 0x7d06 <ProcessMusic+0x12e>
						playSong=false;
    7d00:	10 92 ce 0c 	sts	0x0CCE, r1
						break;	
    7d04:	9c c0       	rjmp	.+312    	; 0x7e3e <ProcessMusic+0x266>
					}else if(c1==0x6){ //marker
    7d06:	66 30       	cpi	r22, 0x06	; 6
    7d08:	09 f0       	breq	.+2      	; 0x7d0c <ProcessMusic+0x134>
    7d0a:	8c c0       	rjmp	.+280    	; 0x7e24 <ProcessMusic+0x24c>
						c1=pgm_read_byte(songPos++); //read len
    7d0c:	fa 01       	movw	r30, r20
    7d0e:	44 91       	lpm	r20, Z
						c2=pgm_read_byte(songPos++); //read data
    7d10:	c9 01       	movw	r24, r18
    7d12:	04 96       	adiw	r24, 0x04	; 4
    7d14:	90 93 78 0d 	sts	0x0D78, r25
    7d18:	80 93 77 0d 	sts	0x0D77, r24
				
					if(c1==0x2f){ //end of song
						playSong=false;
						break;	
					}else if(c1==0x6){ //marker
						c1=pgm_read_byte(songPos++); //read len
    7d1c:	f9 01       	movw	r30, r18
    7d1e:	33 96       	adiw	r30, 0x03	; 3
						c2=pgm_read_byte(songPos++); //read data
    7d20:	e4 91       	lpm	r30, Z
						if(c2=='S'){ //loop start
    7d22:	e3 35       	cpi	r30, 0x53	; 83
    7d24:	29 f4       	brne	.+10     	; 0x7d30 <ProcessMusic+0x158>
							loopStart=songPos;
    7d26:	90 93 7a 0d 	sts	0x0D7A, r25
    7d2a:	80 93 79 0d 	sts	0x0D79, r24
    7d2e:	7a c0       	rjmp	.+244    	; 0x7e24 <ProcessMusic+0x24c>
						}else if(c2=='E'){//loop end
    7d30:	e5 34       	cpi	r30, 0x45	; 69
    7d32:	09 f0       	breq	.+2      	; 0x7d36 <ProcessMusic+0x15e>
    7d34:	77 c0       	rjmp	.+238    	; 0x7e24 <ProcessMusic+0x24c>
							songPos=loopStart;
    7d36:	80 91 79 0d 	lds	r24, 0x0D79
    7d3a:	90 91 7a 0d 	lds	r25, 0x0D7A
    7d3e:	90 93 78 0d 	sts	0x0D78, r25
    7d42:	80 93 77 0d 	sts	0x0D77, r24
    7d46:	6e c0       	rjmp	.+220    	; 0x7e24 <ProcessMusic+0x24c>
					}
				

				}else{

					if(c1&0x80) lastStatus=c1;					
    7d48:	47 fd       	sbrc	r20, 7
    7d4a:	40 93 72 0d 	sts	0x0D72, r20
					channel=lastStatus&0x0f;
    7d4e:	90 91 72 0d 	lds	r25, 0x0D72
    7d52:	89 2f       	mov	r24, r25
    7d54:	8f 70       	andi	r24, 0x0F	; 15
				
					//get next data byte
					//Note: maybe we should not advance the cursor
					//in case we receive an unsupported command				
					if(c1&0x80) c1=pgm_read_byte(songPos++); 
    7d56:	47 ff       	sbrs	r20, 7
    7d58:	08 c0       	rjmp	.+16     	; 0x7d6a <ProcessMusic+0x192>
    7d5a:	2e 5f       	subi	r18, 0xFE	; 254
    7d5c:	3f 4f       	sbci	r19, 0xFF	; 255
    7d5e:	30 93 78 0d 	sts	0x0D78, r19
    7d62:	20 93 77 0d 	sts	0x0D77, r18
    7d66:	fb 01       	movw	r30, r22
    7d68:	44 91       	lpm	r20, Z

					switch(lastStatus&0xf0){
    7d6a:	90 7f       	andi	r25, 0xF0	; 240
    7d6c:	90 3b       	cpi	r25, 0xB0	; 176
    7d6e:	e1 f0       	breq	.+56     	; 0x7da8 <ProcessMusic+0x1d0>
    7d70:	90 3c       	cpi	r25, 0xC0	; 192
    7d72:	09 f4       	brne	.+2      	; 0x7d76 <ProcessMusic+0x19e>
    7d74:	51 c0       	rjmp	.+162    	; 0x7e18 <ProcessMusic+0x240>
    7d76:	90 39       	cpi	r25, 0x90	; 144
    7d78:	09 f0       	breq	.+2      	; 0x7d7c <ProcessMusic+0x1a4>
    7d7a:	54 c0       	rjmp	.+168    	; 0x7e24 <ProcessMusic+0x24c>

						//note-on
						case 0x90:
							//c1 = note						
							c2=pgm_read_byte(songPos++)<<1; //get volume
    7d7c:	e0 91 77 0d 	lds	r30, 0x0D77
    7d80:	f0 91 78 0d 	lds	r31, 0x0D78
    7d84:	9f 01       	movw	r18, r30
    7d86:	2f 5f       	subi	r18, 0xFF	; 255
    7d88:	3f 4f       	sbci	r19, 0xFF	; 255
    7d8a:	30 93 78 0d 	sts	0x0D78, r19
    7d8e:	20 93 77 0d 	sts	0x0D77, r18
    7d92:	24 91       	lpm	r18, Z
    7d94:	22 0f       	add	r18, r18
						
							if(tracks[channel].flags|TRACK_FLAGS_ALLOCATED){ //allocated==true
								TriggerNote(channel,tracks[channel].patchNo,c1,c2);
    7d96:	f8 9e       	mul	r15, r24
    7d98:	f0 01       	movw	r30, r0
    7d9a:	11 24       	eor	r1, r1
    7d9c:	e5 50       	subi	r30, 0x05	; 5
    7d9e:	f3 4f       	sbci	r31, 0xF3	; 243
    7da0:	60 89       	ldd	r22, Z+16	; 0x10
    7da2:	0e 94 ac 3d 	call	0x7b58	; 0x7b58 <TriggerNote>
    7da6:	3e c0       	rjmp	.+124    	; 0x7e24 <ProcessMusic+0x24c>
							break;

						//controllers
						case 0xb0:
							///c1 = controller #
							c2=pgm_read_byte(songPos++); //get controller value
    7da8:	e0 91 77 0d 	lds	r30, 0x0D77
    7dac:	f0 91 78 0d 	lds	r31, 0x0D78
    7db0:	9f 01       	movw	r18, r30
    7db2:	2f 5f       	subi	r18, 0xFF	; 255
    7db4:	3f 4f       	sbci	r19, 0xFF	; 255
    7db6:	30 93 78 0d 	sts	0x0D78, r19
    7dba:	20 93 77 0d 	sts	0x0D77, r18
    7dbe:	e4 91       	lpm	r30, Z
						
							if(c1==CONTROLER_VOL){
    7dc0:	47 30       	cpi	r20, 0x07	; 7
    7dc2:	49 f4       	brne	.+18     	; 0x7dd6 <ProcessMusic+0x1fe>
								tracks[channel].trackVol=c2<<1;
    7dc4:	f8 9e       	mul	r15, r24
    7dc6:	d0 01       	movw	r26, r0
    7dc8:	11 24       	eor	r1, r1
    7dca:	a5 50       	subi	r26, 0x05	; 5
    7dcc:	b3 4f       	sbci	r27, 0xF3	; 243
    7dce:	ee 0f       	add	r30, r30
    7dd0:	1c 96       	adiw	r26, 0x0c	; 12
    7dd2:	ec 93       	st	X, r30
    7dd4:	27 c0       	rjmp	.+78     	; 0x7e24 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_EXPRESSION){
    7dd6:	4b 30       	cpi	r20, 0x0B	; 11
    7dd8:	49 f4       	brne	.+18     	; 0x7dec <ProcessMusic+0x214>
								tracks[channel].expressionVol=c2<<1;
    7dda:	f8 9e       	mul	r15, r24
    7ddc:	d0 01       	movw	r26, r0
    7dde:	11 24       	eor	r1, r1
    7de0:	a5 50       	subi	r26, 0x05	; 5
    7de2:	b3 4f       	sbci	r27, 0xF3	; 243
    7de4:	ee 0f       	add	r30, r30
    7de6:	13 96       	adiw	r26, 0x03	; 3
    7de8:	ec 93       	st	X, r30
    7dea:	1c c0       	rjmp	.+56     	; 0x7e24 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO){
    7dec:	4c 35       	cpi	r20, 0x5C	; 92
    7dee:	49 f4       	brne	.+18     	; 0x7e02 <ProcessMusic+0x22a>
								tracks[channel].tremoloLevel=c2<<1;
    7df0:	f8 9e       	mul	r15, r24
    7df2:	d0 01       	movw	r26, r0
    7df4:	11 24       	eor	r1, r1
    7df6:	a5 50       	subi	r26, 0x05	; 5
    7df8:	b3 4f       	sbci	r27, 0xF3	; 243
    7dfa:	ee 0f       	add	r30, r30
    7dfc:	1a 96       	adiw	r26, 0x0a	; 10
    7dfe:	ec 93       	st	X, r30
    7e00:	11 c0       	rjmp	.+34     	; 0x7e24 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO_RATE){
    7e02:	44 36       	cpi	r20, 0x64	; 100
    7e04:	79 f4       	brne	.+30     	; 0x7e24 <ProcessMusic+0x24c>
								tracks[channel].tremoloRate=c2<<1;
    7e06:	f8 9e       	mul	r15, r24
    7e08:	d0 01       	movw	r26, r0
    7e0a:	11 24       	eor	r1, r1
    7e0c:	a5 50       	subi	r26, 0x05	; 5
    7e0e:	b3 4f       	sbci	r27, 0xF3	; 243
    7e10:	ee 0f       	add	r30, r30
    7e12:	1b 96       	adiw	r26, 0x0b	; 11
    7e14:	ec 93       	st	X, r30
    7e16:	06 c0       	rjmp	.+12     	; 0x7e24 <ProcessMusic+0x24c>
							break;

						//program change
						case 0xc0:
							// c1 = patch #						
							tracks[channel].patchNo=c1;
    7e18:	f8 9e       	mul	r15, r24
    7e1a:	f0 01       	movw	r30, r0
    7e1c:	11 24       	eor	r1, r1
    7e1e:	e5 50       	subi	r30, 0x05	; 5
    7e20:	f3 4f       	sbci	r31, 0xF3	; 243
    7e22:	40 8b       	std	Z+16, r20	; 0x10


				}//end if(c1==0xff)

				//read next delta time
				nextDeltaTime=ReadVarLen(&songPos);			
    7e24:	87 e7       	ldi	r24, 0x77	; 119
    7e26:	9d e0       	ldi	r25, 0x0D	; 13
    7e28:	0e 94 b0 3c 	call	0x7960	; 0x7960 <ReadVarLen>
    7e2c:	90 93 75 0d 	sts	0x0D75, r25
    7e30:	80 93 74 0d 	sts	0x0D74, r24
				currDeltaTime=0;
    7e34:	10 92 6f 0d 	sts	0x0D6F, r1
    7e38:	10 92 6e 0d 	sts	0x0D6E, r1
    7e3c:	3b cf       	rjmp	.-394    	; 0x7cb4 <ProcessMusic+0xdc>
					}
				#endif

			}//end while
		
			currDeltaTime++;
    7e3e:	01 96       	adiw	r24, 0x01	; 1
    7e40:	90 93 6f 0d 	sts	0x0D6F, r25
    7e44:	80 93 6e 0d 	sts	0x0D6E, r24
    7e48:	94 e0       	ldi	r25, 0x04	; 4
    7e4a:	a9 2e       	mov	r10, r25
    7e4c:	9d e0       	ldi	r25, 0x0D	; 13
    7e4e:	b9 2e       	mov	r11, r25
    7e50:	2e e0       	ldi	r18, 0x0E	; 14
    7e52:	c2 2e       	mov	r12, r18
    7e54:	2d e0       	ldi	r18, 0x0D	; 13
    7e56:	d2 2e       	mov	r13, r18
    7e58:	3f e0       	ldi	r19, 0x0F	; 15
    7e5a:	e3 2e       	mov	r14, r19
    7e5c:	3d e0       	ldi	r19, 0x0D	; 13
    7e5e:	f3 2e       	mov	r15, r19
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    7e60:	66 24       	eor	r6, r6
    7e62:	6a 94       	dec	r6
    7e64:	71 2c       	mov	r7, r1
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//process patch command stream
		if((track->flags & TRACK_FLAGS_PLAYING) && (track->patchCommandStreamPos!=NULL) && ((track->flags & TRACK_FLAGS_HOLD_ENV)==0)){
    7e66:	88 81       	ld	r24, Y
    7e68:	85 ff       	sbrs	r24, 5
    7e6a:	42 c0       	rjmp	.+132    	; 0x7ef0 <ProcessMusic+0x318>
    7e6c:	2d 89       	ldd	r18, Y+21	; 0x15
    7e6e:	3e 89       	ldd	r19, Y+22	; 0x16
    7e70:	23 2b       	or	r18, r19
    7e72:	09 f4       	brne	.+2      	; 0x7e76 <ProcessMusic+0x29e>
    7e74:	3d c0       	rjmp	.+122    	; 0x7ef0 <ProcessMusic+0x318>
    7e76:	86 fd       	sbrc	r24, 6
    7e78:	3b c0       	rjmp	.+118    	; 0x7ef0 <ProcessMusic+0x318>
    7e7a:	47 01       	movw	r8, r14
    7e7c:	f2 e0       	ldi	r31, 0x02	; 2
    7e7e:	8f 1a       	sub	r8, r31
    7e80:	91 08       	sbc	r9, r1

			//process all simultaneous events
			while(track->patchCurrDeltaTime==track->patchNextDeltaTime){
    7e82:	d6 01       	movw	r26, r12
    7e84:	9c 91       	ld	r25, X
    7e86:	f4 01       	movw	r30, r8
    7e88:	80 81       	ld	r24, Z
    7e8a:	98 13       	cpse	r25, r24
    7e8c:	2e c0       	rjmp	.+92     	; 0x7eea <ProcessMusic+0x312>

				c1=pgm_read_byte(track->patchCommandStreamPos++);
    7e8e:	ed 89       	ldd	r30, Y+21	; 0x15
    7e90:	fe 89       	ldd	r31, Y+22	; 0x16
    7e92:	bf 01       	movw	r22, r30
    7e94:	6f 5f       	subi	r22, 0xFF	; 255
    7e96:	7f 4f       	sbci	r23, 0xFF	; 255
    7e98:	7e 8b       	std	Y+22, r23	; 0x16
    7e9a:	6d 8b       	std	Y+21, r22	; 0x15
    7e9c:	84 91       	lpm	r24, Z
				if(c1==PATCH_END){
    7e9e:	8f 3f       	cpi	r24, 0xFF	; 255
    7ea0:	31 f4       	brne	.+12     	; 0x7eae <ProcessMusic+0x2d6>
					//end of stream!
					track->flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    7ea2:	88 81       	ld	r24, Y
    7ea4:	8f 77       	andi	r24, 0x7F	; 127
    7ea6:	88 83       	st	Y, r24
					track->patchCommandStreamPos=NULL;
    7ea8:	1e 8a       	std	Y+22, r1	; 0x16
    7eaa:	1d 8a       	std	Y+21, r1	; 0x15
					break;
    7eac:	1e c0       	rjmp	.+60     	; 0x7eea <ProcessMusic+0x312>

				}else{
					c2=pgm_read_byte(track->patchCommandStreamPos++);
    7eae:	9f 01       	movw	r18, r30
    7eb0:	2e 5f       	subi	r18, 0xFE	; 254
    7eb2:	3f 4f       	sbci	r19, 0xFF	; 255
    7eb4:	3e 8b       	std	Y+22, r19	; 0x16
    7eb6:	2d 8b       	std	Y+21, r18	; 0x15
    7eb8:	fb 01       	movw	r30, r22
    7eba:	64 91       	lpm	r22, Z
					//invoke patch command function
					((PatchCommand)pgm_read_word(&patchCommands[c1]))(track,c2);
    7ebc:	e8 2f       	mov	r30, r24
    7ebe:	f0 e0       	ldi	r31, 0x00	; 0
    7ec0:	ee 0f       	add	r30, r30
    7ec2:	ff 1f       	adc	r31, r31
    7ec4:	ee 52       	subi	r30, 0x2E	; 46
    7ec6:	ff 4f       	sbci	r31, 0xFF	; 255
    7ec8:	25 91       	lpm	r18, Z+
    7eca:	34 91       	lpm	r19, Z
    7ecc:	ce 01       	movw	r24, r28
    7ece:	f9 01       	movw	r30, r18
    7ed0:	09 95       	icall
				}

				//read next delta time
				track->patchNextDeltaTime=pgm_read_byte(track->patchCommandStreamPos++);
    7ed2:	ed 89       	ldd	r30, Y+21	; 0x15
    7ed4:	fe 89       	ldd	r31, Y+22	; 0x16
    7ed6:	cf 01       	movw	r24, r30
    7ed8:	01 96       	adiw	r24, 0x01	; 1
    7eda:	9e 8b       	std	Y+22, r25	; 0x16
    7edc:	8d 8b       	std	Y+21, r24	; 0x15
    7ede:	e4 91       	lpm	r30, Z
    7ee0:	d4 01       	movw	r26, r8
    7ee2:	ec 93       	st	X, r30
				track->patchCurrDeltaTime=0;
    7ee4:	f6 01       	movw	r30, r12
    7ee6:	10 82       	st	Z, r1
    7ee8:	cc cf       	rjmp	.-104    	; 0x7e82 <ProcessMusic+0x2aa>
			}

			track->patchCurrDeltaTime++;
    7eea:	9f 5f       	subi	r25, 0xFF	; 255
    7eec:	d6 01       	movw	r26, r12
    7eee:	9c 93       	st	X, r25
		}

		if(track->flags & TRACK_FLAGS_PLAYING){
    7ef0:	98 81       	ld	r25, Y
    7ef2:	95 ff       	sbrs	r25, 5
    7ef4:	6c c0       	rjmp	.+216    	; 0x7fce <ProcessMusic+0x3f6>

			if(track->patchPlayingTime<0xff){
    7ef6:	f7 01       	movw	r30, r14
    7ef8:	80 81       	ld	r24, Z
    7efa:	8f 3f       	cpi	r24, 0xFF	; 255
    7efc:	11 f0       	breq	.+4      	; 0x7f02 <ProcessMusic+0x32a>
				track->patchPlayingTime++;
    7efe:	8f 5f       	subi	r24, 0xFF	; 255
    7f00:	80 83       	st	Z, r24
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
    7f02:	97 fd       	sbrc	r25, 7
    7f04:	04 c0       	rjmp	.+8      	; 0x7f0e <ProcessMusic+0x336>
    7f06:	f7 01       	movw	r30, r14
    7f08:	38 97       	sbiw	r30, 0x08	; 8
				//if an FX, use full track volume.
				trackVol=0xff;
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
    7f0a:	90 81       	ld	r25, Z
    7f0c:	01 c0       	rjmp	.+2      	; 0x7f10 <ProcessMusic+0x338>
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
				//if an FX, use full track volume.
				trackVol=0xff;
    7f0e:	9f ef       	ldi	r25, 0xFF	; 255
    7f10:	f7 01       	movw	r30, r14
    7f12:	37 97       	sbiw	r30, 0x07	; 7
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
			}
			if(track->noteVol!=0 && track->envelopeVol!=0 && trackVol!=0 && masterVolume!=0){
    7f14:	80 81       	ld	r24, Z
    7f16:	88 23       	and	r24, r24
    7f18:	09 f4       	brne	.+2      	; 0x7f1c <ProcessMusic+0x344>
    7f1a:	4e c0       	rjmp	.+156    	; 0x7fb8 <ProcessMusic+0x3e0>
    7f1c:	31 96       	adiw	r30, 0x01	; 1
    7f1e:	50 81       	ld	r21, Z
    7f20:	55 23       	and	r21, r21
    7f22:	09 f4       	brne	.+2      	; 0x7f26 <ProcessMusic+0x34e>
    7f24:	49 c0       	rjmp	.+146    	; 0x7fb8 <ProcessMusic+0x3e0>
    7f26:	99 23       	and	r25, r25
    7f28:	09 f4       	brne	.+2      	; 0x7f2c <ProcessMusic+0x354>
    7f2a:	46 c0       	rjmp	.+140    	; 0x7fb8 <ProcessMusic+0x3e0>
    7f2c:	40 91 73 0d 	lds	r20, 0x0D73
    7f30:	44 23       	and	r20, r20
    7f32:	09 f4       	brne	.+2      	; 0x7f36 <ProcessMusic+0x35e>
    7f34:	41 c0       	rjmp	.+130    	; 0x7fb8 <ProcessMusic+0x3e0>

				uVol=(track->noteVol*trackVol)+0x100;
    7f36:	89 9f       	mul	r24, r25
    7f38:	c0 01       	movw	r24, r0
    7f3a:	11 24       	eor	r1, r1
    7f3c:	93 95       	inc	r25
				uVol>>=8;
    7f3e:	89 2f       	mov	r24, r25
    7f40:	99 27       	eor	r25, r25
				
				uVol=(uVol*track->envelopeVol)+0x100;
    7f42:	58 9f       	mul	r21, r24
    7f44:	90 01       	movw	r18, r0
    7f46:	59 9f       	mul	r21, r25
    7f48:	30 0d       	add	r19, r0
    7f4a:	11 24       	eor	r1, r1
    7f4c:	c9 01       	movw	r24, r18
    7f4e:	93 95       	inc	r25
				uVol>>=8;
    7f50:	89 2f       	mov	r24, r25
    7f52:	99 27       	eor	r25, r25
    7f54:	3b 97       	sbiw	r30, 0x0b	; 11
				
				#if MUSIC_ENGINE == MIDI
					uVol=(uVol*track->expressionVol)+0x100;
    7f56:	50 81       	ld	r21, Z
    7f58:	58 9f       	mul	r21, r24
    7f5a:	90 01       	movw	r18, r0
    7f5c:	59 9f       	mul	r21, r25
    7f5e:	30 0d       	add	r19, r0
    7f60:	11 24       	eor	r1, r1
    7f62:	33 95       	inc	r19
					uVol>>=8;
    7f64:	23 2f       	mov	r18, r19
    7f66:	33 27       	eor	r19, r19
				#endif
				
				uVol=(uVol*masterVolume)+0x100;
    7f68:	42 9f       	mul	r20, r18
    7f6a:	c0 01       	movw	r24, r0
    7f6c:	43 9f       	mul	r20, r19
    7f6e:	90 0d       	add	r25, r0
    7f70:	11 24       	eor	r1, r1
    7f72:	93 95       	inc	r25
				uVol>>=8;
    7f74:	89 2f       	mov	r24, r25
    7f76:	99 27       	eor	r25, r25
    7f78:	37 96       	adiw	r30, 0x07	; 7

				if(track->tremoloLevel>0){					
    7f7a:	20 81       	ld	r18, Z
    7f7c:	22 23       	and	r18, r18
    7f7e:	f1 f0       	breq	.+60     	; 0x7fbc <ProcessMusic+0x3e4>
					tmp=pgm_read_byte(&(waves[track->tremoloPos]));
    7f80:	d5 01       	movw	r26, r10
    7f82:	ec 91       	ld	r30, X
    7f84:	f0 e0       	ldi	r31, 0x00	; 0
    7f86:	e0 50       	subi	r30, 0x00	; 0
    7f88:	fd 47       	sbci	r31, 0x7D	; 125
    7f8a:	e4 91       	lpm	r30, Z
					tmp-=128; //convert to unsigned
    7f8c:	e0 58       	subi	r30, 0x80	; 128

					tVol=(track->tremoloLevel*tmp)+0x100;
    7f8e:	2e 9f       	mul	r18, r30
    7f90:	f0 01       	movw	r30, r0
    7f92:	11 24       	eor	r1, r1
    7f94:	f3 95       	inc	r31
					tVol>>=8;
    7f96:	ef 2f       	mov	r30, r31
    7f98:	ff 27       	eor	r31, r31
					
					uVol=(uVol*(0xff-tVol))+0x100;
    7f9a:	a3 01       	movw	r20, r6
    7f9c:	4e 1b       	sub	r20, r30
    7f9e:	5f 0b       	sbc	r21, r31
    7fa0:	48 9f       	mul	r20, r24
    7fa2:	90 01       	movw	r18, r0
    7fa4:	49 9f       	mul	r20, r25
    7fa6:	30 0d       	add	r19, r0
    7fa8:	58 9f       	mul	r21, r24
    7faa:	30 0d       	add	r19, r0
    7fac:	11 24       	eor	r1, r1
    7fae:	c9 01       	movw	r24, r18
    7fb0:	93 95       	inc	r25
					uVol>>=8;
    7fb2:	89 2f       	mov	r24, r25
    7fb4:	99 27       	eor	r25, r25
    7fb6:	02 c0       	rjmp	.+4      	; 0x7fbc <ProcessMusic+0x3e4>
				}

			
			}else{
				uVol=0;
    7fb8:	80 e0       	ldi	r24, 0x00	; 0
    7fba:	90 e0       	ldi	r25, 0x00	; 0
			}	

			track->tremoloPos+=track->tremoloRate;	
    7fbc:	f5 01       	movw	r30, r10
    7fbe:	30 81       	ld	r19, Z
    7fc0:	f7 01       	movw	r30, r14
    7fc2:	39 97       	sbiw	r30, 0x09	; 9
    7fc4:	20 81       	ld	r18, Z
    7fc6:	23 0f       	add	r18, r19
    7fc8:	d5 01       	movw	r26, r10
    7fca:	2c 93       	st	X, r18
    7fcc:	02 c0       	rjmp	.+4      	; 0x7fd2 <ProcessMusic+0x3fa>

		}else{
			uVol=0;
    7fce:	80 e0       	ldi	r24, 0x00	; 0
    7fd0:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
    7fd2:	f8 01       	movw	r30, r16
    7fd4:	80 83       	st	Z, r24
    7fd6:	67 96       	adiw	r28, 0x17	; 23
    7fd8:	0a 5f       	subi	r16, 0xFA	; 250
    7fda:	1f 4f       	sbci	r17, 0xFF	; 255
    7fdc:	f7 e1       	ldi	r31, 0x17	; 23
    7fde:	af 0e       	add	r10, r31
    7fe0:	b1 1c       	adc	r11, r1
    7fe2:	87 e1       	ldi	r24, 0x17	; 23
    7fe4:	c8 0e       	add	r12, r24
    7fe6:	d1 1c       	adc	r13, r1
    7fe8:	97 e1       	ldi	r25, 0x17	; 23
    7fea:	e9 0e       	add	r14, r25
    7fec:	f1 1c       	adc	r15, r1


	//
	// Process patches command streams & final volume
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    7fee:	ad e0       	ldi	r26, 0x0D	; 13
    7ff0:	ce 36       	cpi	r28, 0x6E	; 110
    7ff2:	da 07       	cpc	r29, r26
    7ff4:	09 f0       	breq	.+2      	; 0x7ff8 <ProcessMusic+0x420>
    7ff6:	37 cf       	rjmp	.-402    	; 0x7e66 <ProcessMusic+0x28e>
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
	}
	
}
    7ff8:	df 91       	pop	r29
    7ffa:	cf 91       	pop	r28
    7ffc:	1f 91       	pop	r17
    7ffe:	0f 91       	pop	r16
    8000:	ff 90       	pop	r15
    8002:	ef 90       	pop	r14
    8004:	df 90       	pop	r13
    8006:	cf 90       	pop	r12
    8008:	bf 90       	pop	r11
    800a:	af 90       	pop	r10
    800c:	9f 90       	pop	r9
    800e:	8f 90       	pop	r8
    8010:	7f 90       	pop	r7
    8012:	6f 90       	pop	r6
    8014:	08 95       	ret

00008016 <SetMasterVolume>:
}



void SetMasterVolume(unsigned char vol){
	masterVolume=vol;
    8016:	80 93 73 0d 	sts	0x0D73, r24
    801a:	08 95       	ret

0000801c <SetMixerNote>:
; r22: -MIDI note, 69=A5(440) for waves channels (0,1,2)
;      -Noise params for channel 3
;***********************
.section .text.SetMixerNote
SetMixerNote:
	clr r25
    801c:	99 27       	eor	r25, r25
	clr r23
    801e:	77 27       	eor	r23, r23
	#if SOUND_MIXER == MIXER_TYPE_VSYNC
		cpi r24,3
		brlo set_note_waves
		ret		
	#else
		cpi r24,3
    8020:	83 30       	cpi	r24, 0x03	; 3
		brne set_note_waves		
    8022:	09 f4       	brne	.+2      	; 0x8026 <set_note_waves>
		ret
    8024:	08 95       	ret

00008026 <set_note_waves>:
	#endif
#endif

set_note_waves:
	;get step for note
	ldi ZL,lo8(steptable)
    8026:	e8 e0       	ldi	r30, 0x08	; 8
	ldi ZH,hi8(steptable)
    8028:	f1 e8       	ldi	r31, 0x81	; 129
	lsl r22
    802a:	66 0f       	add	r22, r22
	rol r23
    802c:	77 1f       	adc	r23, r23
	add ZL,r22
    802e:	e6 0f       	add	r30, r22
	adc ZH,r23	
    8030:	f7 1f       	adc	r31, r23

	lpm r26,Z+
    8032:	a5 91       	lpm	r26, Z+
	lpm r27,Z
    8034:	b4 91       	lpm	r27, Z

	ldi ZL,lo8(mixerStruct)
    8036:	e0 ed       	ldi	r30, 0xD0	; 208
	ldi ZH,hi8(mixerStruct)
    8038:	fc e0       	ldi	r31, 0x0C	; 12
	ldi r18,CHANNEL_STRUCT_SIZE
    803a:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24
    803c:	28 9f       	mul	r18, r24
	add ZL,r0
    803e:	e0 0d       	add	r30, r0
	adc ZH,r1
    8040:	f1 1d       	adc	r31, r1
	
	std Z+step_lo,r26
    8042:	a1 83       	std	Z+1, r26	; 0x01
	std Z+step_hi,r27
    8044:	b2 83       	std	Z+2, r27	; 0x02
	
	clr r1
    8046:	11 24       	eor	r1, r1
	

	ret
    8048:	08 95       	ret

0000804a <SetMixerWave>:
;         Noise channel: 0xfe=7 bit lfsr, 0xff=15 bit lfsr
;                 
;***********************
.section .text.SetMixerWave
SetMixerWave:
	clr r25
    804a:	99 27       	eor	r25, r25
	clr r23
    804c:	77 27       	eor	r23, r23

	ldi ZL,lo8(mixerStruct)
    804e:	e0 ed       	ldi	r30, 0xD0	; 208
	ldi ZH,hi8(mixerStruct)
    8050:	fc e0       	ldi	r31, 0x0C	; 12
	ldi r18,CHANNEL_STRUCT_SIZE
    8052:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24	
    8054:	28 9f       	mul	r18, r24
	add ZL,r0
    8056:	e0 0d       	add	r30, r0
	adc ZH,r1
    8058:	f1 1d       	adc	r31, r1

#if MIXER_CHAN4_TYPE == 0
	cpi r22,0xfe	;7bit lfsr
    805a:	6e 3f       	cpi	r22, 0xFE	; 254
	brne smw1
    805c:	31 f4       	brne	.+12     	; 0x806a <smw1>
	lds r22,tr4_params
    805e:	60 91 e3 0c 	lds	r22, 0x0CE3
	andi r22,0xfe;
    8062:	6e 7f       	andi	r22, 0xFE	; 254
	sts tr4_params,r22
    8064:	60 93 e3 0c 	sts	0x0CE3, r22
	rjmp esmw	
    8068:	0b c0       	rjmp	.+22     	; 0x8080 <esmw>

0000806a <smw1>:
smw1:
	cpi r22,0xff	;15bit lfsr
    806a:	6f 3f       	cpi	r22, 0xFF	; 255
	brne smw2
    806c:	31 f4       	brne	.+12     	; 0x807a <smw2>
	lds r22,tr4_params
    806e:	60 91 e3 0c 	lds	r22, 0x0CE3
	ori r22,0xfe;
    8072:	6e 6f       	ori	r22, 0xFE	; 254
	sts tr4_params,r22	
    8074:	60 93 e3 0c 	sts	0x0CE3, r22
	rjmp esmw
    8078:	03 c0       	rjmp	.+6      	; 0x8080 <esmw>

0000807a <smw2>:
smw2:
#endif

	ldi r23,hi8(waves)
    807a:	73 e8       	ldi	r23, 0x83	; 131
	add r23,r22
    807c:	76 0f       	add	r23, r22
	std Z+samplepos_hi,r23 ;store path No
    807e:	75 83       	std	Z+5, r23	; 0x05

00008080 <esmw>:

esmw:
	clr r1	
    8080:	11 24       	eor	r1, r1
	ret
    8082:	08 95       	ret
	...

00008100 <DisableSoundEngine>:
; no CPU cycles are consumed.
; C-callable
;*****************************
.section .text.DisableSoundEngine
DisableSoundEngine:	
	ldi r24,0
    8100:	80 e0       	ldi	r24, 0x00	; 0
	sts sound_enabled,r24
    8102:	80 93 cf 0c 	sts	0x0CCF, r24
	ret
    8106:	08 95       	ret

00008108 <steptable>:
    8108:	22 00       	.word	0x0022	; ????
    810a:	24 00       	.word	0x0024	; ????
    810c:	26 00       	.word	0x0026	; ????
    810e:	28 00       	.word	0x0028	; ????
    8110:	2b 00       	.word	0x002b	; ????
    8112:	2d 00       	.word	0x002d	; ????
    8114:	30 00       	.word	0x0030	; ????
    8116:	33 00       	.word	0x0033	; ????
    8118:	36 00       	.word	0x0036	; ????
    811a:	39 00       	.word	0x0039	; ????
    811c:	3d 00       	.word	0x003d	; ????
    811e:	40 00       	.word	0x0040	; ????
    8120:	44 00       	.word	0x0044	; ????
    8122:	48 00       	.word	0x0048	; ????
    8124:	4c 00       	.word	0x004c	; ????
    8126:	51 00       	.word	0x0051	; ????
    8128:	56 00       	.word	0x0056	; ????
    812a:	5b 00       	.word	0x005b	; ????
    812c:	60 00       	.word	0x0060	; ????
    812e:	66 00       	.word	0x0066	; ????
    8130:	6c 00       	.word	0x006c	; ????
    8132:	73 00       	.word	0x0073	; ????
    8134:	79 00       	.word	0x0079	; ????
    8136:	81 00       	.word	0x0081	; ????
    8138:	88 00       	.word	0x0088	; ????
    813a:	90 00       	.word	0x0090	; ????
    813c:	99 00       	.word	0x0099	; ????
    813e:	a2 00       	.word	0x00a2	; ????
    8140:	ac 00       	.word	0x00ac	; ????
    8142:	b6 00       	.word	0x00b6	; ????
    8144:	c1 00       	.word	0x00c1	; ????
    8146:	cc 00       	.word	0x00cc	; ????
    8148:	d8 00       	.word	0x00d8	; ????
    814a:	e5 00       	.word	0x00e5	; ????
    814c:	f3 00       	.word	0x00f3	; ????
    814e:	01 01       	movw	r0, r2
    8150:	10 01       	movw	r2, r0
    8152:	21 01       	movw	r4, r2
    8154:	32 01       	movw	r6, r4
    8156:	44 01       	movw	r8, r8
    8158:	57 01       	movw	r10, r14
    815a:	6c 01       	movw	r12, r24
    815c:	81 01       	movw	r16, r2
    815e:	98 01       	movw	r18, r16
    8160:	b0 01       	movw	r22, r0
    8162:	ca 01       	movw	r24, r20
    8164:	e5 01       	movw	r28, r10
    8166:	02 02       	muls	r16, r18
    8168:	21 02       	muls	r18, r17
    816a:	41 02       	muls	r20, r17
    816c:	64 02       	muls	r22, r20
    816e:	88 02       	muls	r24, r24
    8170:	ae 02       	muls	r26, r30
    8172:	d7 02       	muls	r29, r23
    8174:	03 03       	mulsu	r16, r19
    8176:	30 03       	mulsu	r19, r16
    8178:	61 03       	mulsu	r22, r17
    817a:	94 03       	fmuls	r17, r20
    817c:	cb 03       	fmulsu	r20, r19
    817e:	05 04       	cpc	r0, r5
    8180:	42 04       	cpc	r4, r2
    8182:	83 04       	cpc	r8, r3
    8184:	c7 04       	cpc	r12, r7
    8186:	10 05       	cpc	r17, r0
    8188:	5d 05       	cpc	r21, r13
    818a:	af 05       	cpc	r26, r15
    818c:	05 06       	cpc	r0, r21
    818e:	61 06       	cpc	r6, r17
    8190:	c2 06       	cpc	r12, r18
    8192:	29 07       	cpc	r18, r25
    8194:	96 07       	cpc	r25, r22
    8196:	09 08       	sbc	r0, r9
    8198:	83 08       	sbc	r8, r3
    819a:	05 09       	sbc	r16, r5
    819c:	8e 09       	sbc	r24, r14
    819e:	20 0a       	sbc	r2, r16
    81a0:	ba 0a       	sbc	r11, r26
    81a2:	5d 0b       	sbc	r21, r29
    81a4:	0a 0c       	add	r0, r10
    81a6:	c1 0c       	add	r12, r1
    81a8:	84 0d       	add	r24, r4
    81aa:	51 0e       	add	r5, r17
    81ac:	2b 0f       	add	r18, r27
    81ae:	12 10       	cpse	r1, r2
    81b0:	07 11       	cpse	r16, r7
    81b2:	0a 12       	cpse	r0, r26
    81b4:	1d 13       	cpse	r17, r29
    81b6:	40 14       	cp	r4, r0
    81b8:	74 15       	cp	r23, r4
    81ba:	ba 16       	cp	r11, r26
    81bc:	14 18       	sub	r1, r4
    81be:	83 19       	sub	r24, r3
    81c0:	07 1b       	sub	r16, r23
    81c2:	a3 1c       	adc	r10, r3
    81c4:	57 1e       	adc	r5, r23
    81c6:	24 20       	and	r2, r4
    81c8:	0e 22       	and	r0, r30
    81ca:	14 24       	eor	r1, r4
    81cc:	39 26       	eor	r3, r25
    81ce:	7f 28       	or	r7, r15
    81d0:	e8 2a       	or	r14, r24
    81d2:	75 2d       	mov	r23, r5
    81d4:	29 30       	cpi	r18, 0x09	; 9
    81d6:	06 33       	cpi	r16, 0x36	; 54
    81d8:	0f 36       	cpi	r16, 0x6F	; 111
    81da:	45 39       	cpi	r20, 0x95	; 149
    81dc:	ad 3c       	cpi	r26, 0xCD	; 205
    81de:	49 40       	sbci	r20, 0x09	; 9
    81e0:	1b 44       	sbci	r17, 0x4B	; 75
    81e2:	28 48       	sbci	r18, 0x88	; 136
    81e4:	73 4c       	sbci	r23, 0xC3	; 195
    81e6:	fe 50       	subi	r31, 0x0E	; 14
    81e8:	cf 55       	subi	r28, 0x5F	; 95
    81ea:	ea 5a       	subi	r30, 0xAA	; 170
    81ec:	51 60       	ori	r21, 0x01	; 1
    81ee:	0c 66       	ori	r16, 0x6C	; 108
    81f0:	1d 6c       	ori	r17, 0xCD	; 205
    81f2:	8b 72       	andi	r24, 0x2B	; 43
    81f4:	5a 79       	andi	r21, 0x9A	; 154
    81f6:	92 80       	ldd	r9, Z+2	; 0x02
    81f8:	37 88       	ldd	r3, Z+23	; 0x17
    81fa:	50 90 e5 98 	lds	r5, 0x98E5
    81fe:	fd a1       	ldd	r31, Y+37	; 0x25
    8200:	9f ab       	std	Y+55, r25	; 0x37
    8202:	d3 b5       	in	r29, 0x23	; 35
    8204:	a3 c0       	rjmp	.+326    	; 0x834c <waves+0x4c>
	...

00008300 <waves>:
    8300:	00 03       	mulsu	r16, r16
    8302:	06 09       	sbc	r16, r6
    8304:	0c 10       	cpse	r0, r12
    8306:	13 16       	cp	r1, r19
    8308:	19 1c       	adc	r1, r9
    830a:	1f 22       	and	r1, r31
    830c:	25 28       	or	r2, r5
    830e:	2b 2e       	mov	r2, r27
    8310:	31 33       	cpi	r19, 0x31	; 49
    8312:	36 39       	cpi	r19, 0x96	; 150
    8314:	3c 3f       	cpi	r19, 0xFC	; 252
    8316:	41 44       	sbci	r20, 0x41	; 65
    8318:	47 49       	sbci	r20, 0x97	; 151
    831a:	4c 4e       	sbci	r20, 0xEC	; 236
    831c:	51 53       	subi	r21, 0x31	; 49
    831e:	55 58       	subi	r21, 0x85	; 133
    8320:	5a 5c       	subi	r21, 0xCA	; 202
    8322:	5e 60       	ori	r21, 0x0E	; 14
    8324:	62 64       	ori	r22, 0x42	; 66
    8326:	66 68       	ori	r22, 0x86	; 134
    8328:	6a 6b       	ori	r22, 0xBA	; 186
    832a:	6d 6f       	ori	r22, 0xFD	; 253
    832c:	70 71       	andi	r23, 0x10	; 16
    832e:	73 74       	andi	r23, 0x43	; 67
    8330:	75 76       	andi	r23, 0x65	; 101
    8332:	78 79       	andi	r23, 0x98	; 152
    8334:	7a 7a       	andi	r23, 0xAA	; 170
    8336:	7b 7c       	andi	r23, 0xCB	; 203
    8338:	7d 7d       	andi	r23, 0xDD	; 221
    833a:	7e 7e       	andi	r23, 0xEE	; 238
    833c:	7e 7f       	andi	r23, 0xFE	; 254
    833e:	7f 7f       	andi	r23, 0xFF	; 255
    8340:	7f 7f       	andi	r23, 0xFF	; 255
    8342:	7f 7f       	andi	r23, 0xFF	; 255
    8344:	7e 7e       	andi	r23, 0xEE	; 238
    8346:	7e 7d       	andi	r23, 0xDE	; 222
    8348:	7d 7c       	andi	r23, 0xCD	; 205
    834a:	7b 7a       	andi	r23, 0xAB	; 171
    834c:	7a 79       	andi	r23, 0x9A	; 154
    834e:	78 76       	andi	r23, 0x68	; 104
    8350:	75 74       	andi	r23, 0x45	; 69
    8352:	73 71       	andi	r23, 0x13	; 19
    8354:	70 6f       	ori	r23, 0xF0	; 240
    8356:	6d 6b       	ori	r22, 0xBD	; 189
    8358:	6a 68       	ori	r22, 0x8A	; 138
    835a:	66 64       	ori	r22, 0x46	; 70
    835c:	62 60       	ori	r22, 0x02	; 2
    835e:	5e 5c       	subi	r21, 0xCE	; 206
    8360:	5a 58       	subi	r21, 0x8A	; 138
    8362:	55 53       	subi	r21, 0x35	; 53
    8364:	51 4e       	sbci	r21, 0xE1	; 225
    8366:	4c 49       	sbci	r20, 0x9C	; 156
    8368:	47 44       	sbci	r20, 0x47	; 71
    836a:	41 3f       	cpi	r20, 0xF1	; 241
    836c:	3c 39       	cpi	r19, 0x9C	; 156
    836e:	36 33       	cpi	r19, 0x36	; 54
    8370:	31 2e       	mov	r3, r17
    8372:	2b 28       	or	r2, r11
    8374:	25 22       	and	r2, r21
    8376:	1f 1c       	adc	r1, r15
    8378:	19 16       	cp	r1, r25
    837a:	13 10       	cpse	r1, r3
    837c:	0c 09       	sbc	r16, r12
    837e:	06 03       	mulsu	r16, r22
    8380:	00 fd       	sbrc	r16, 0
    8382:	fa f7       	brpl	.-2      	; 0x8382 <waves+0x82>
    8384:	f4 f0       	brlt	.+60     	; 0x83c2 <waves+0xc2>
    8386:	ed ea       	ldi	r30, 0xAD	; 173
    8388:	e7 e4       	ldi	r30, 0x47	; 71
    838a:	e1 de       	rcall	.-574    	; 0x814e <steptable+0x46>
    838c:	db d8       	rcall	.-3658   	; 0x7544 <isEepromFormatted+0x16>
    838e:	d5 d2       	rcall	.+1450   	; 0x893a <waves+0x63a>
    8390:	cf cd       	rjmp	.-1122   	; 0x7f30 <ProcessMusic+0x358>
    8392:	ca c7       	rjmp	.+3988   	; 0x9328 <LBPrintByte+0xa>
    8394:	c4 c1       	rjmp	.+904    	; 0x871e <waves+0x41e>
    8396:	bf bc       	out	0x2f, r11	; 47
    8398:	b9 b7       	in	r27, 0x39	; 57
    839a:	b4 b2       	in	r11, 0x14	; 20
    839c:	af ad       	ldd	r26, Y+63	; 0x3f
    839e:	ab a8       	ldd	r10, Y+51	; 0x33
    83a0:	a6 a4       	ldd	r10, Z+46	; 0x2e
    83a2:	a2 a0       	ldd	r10, Z+34	; 0x22
    83a4:	9e 9c       	mul	r9, r14
    83a6:	9a 98       	cbi	0x13, 2	; 19
    83a8:	96 95       	lsr	r25
    83aa:	93 91       	.word	0x9193	; ????
    83ac:	90 8f       	std	Z+24, r25	; 0x18
    83ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    83b0:	8b 8a       	std	Y+19, r8	; 0x13
    83b2:	88 87       	std	Y+8, r24	; 0x08
    83b4:	86 86       	std	Z+14, r8	; 0x0e
    83b6:	85 84       	ldd	r8, Z+13	; 0x0d
    83b8:	83 83       	std	Z+3, r24	; 0x03
    83ba:	82 82       	std	Z+2, r8	; 0x02
    83bc:	82 81       	ldd	r24, Z+2	; 0x02
    83be:	81 81       	ldd	r24, Z+1	; 0x01
    83c0:	81 81       	ldd	r24, Z+1	; 0x01
    83c2:	81 81       	ldd	r24, Z+1	; 0x01
    83c4:	82 82       	std	Z+2, r8	; 0x02
    83c6:	82 83       	std	Z+2, r24	; 0x02
    83c8:	83 84       	ldd	r8, Z+11	; 0x0b
    83ca:	85 86       	std	Z+13, r8	; 0x0d
    83cc:	86 87       	std	Z+14, r24	; 0x0e
    83ce:	88 8a       	std	Y+16, r8	; 0x10
    83d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    83d2:	8d 8f       	std	Y+29, r24	; 0x1d
    83d4:	90 91 93 95 	lds	r25, 0x9593
    83d8:	96 98       	cbi	0x12, 6	; 18
    83da:	9a 9c       	mul	r9, r10
    83dc:	9e a0       	ldd	r9, Y+38	; 0x26
    83de:	a2 a4       	ldd	r10, Z+42	; 0x2a
    83e0:	a6 a8       	ldd	r10, Z+54	; 0x36
    83e2:	ab ad       	ldd	r26, Y+59	; 0x3b
    83e4:	af b2       	in	r10, 0x1f	; 31
    83e6:	b4 b7       	in	r27, 0x34	; 52
    83e8:	b9 bc       	out	0x29, r11	; 41
    83ea:	bf c1       	rjmp	.+894    	; 0x876a <waves+0x46a>
    83ec:	c4 c7       	rjmp	.+3976   	; 0x9376 <LBPrintByte+0x58>
    83ee:	ca cd       	rjmp	.-1132   	; 0x7f84 <ProcessMusic+0x3ac>
    83f0:	cf d2       	rcall	.+1438   	; 0x8990 <waves+0x690>
    83f2:	d5 d8       	rcall	.-3670   	; 0x759e <EepromBlockExists+0x42>
    83f4:	db de       	rcall	.-586    	; 0x81ac <steptable+0xa4>
    83f6:	e1 e4       	ldi	r30, 0x41	; 65
    83f8:	e7 ea       	ldi	r30, 0xA7	; 167
    83fa:	ed f0       	brhs	.+58     	; 0x8436 <waves+0x136>
    83fc:	f4 f7       	brge	.-4      	; 0x83fa <waves+0xfa>
    83fe:	fa fd       	.word	0xfdfa	; ????
    8400:	80 81       	ld	r24, Z
    8402:	82 83       	std	Z+2, r24	; 0x02
    8404:	84 85       	ldd	r24, Z+12	; 0x0c
    8406:	86 87       	std	Z+14, r24	; 0x0e
    8408:	88 89       	ldd	r24, Y+16	; 0x10
    840a:	8a 8b       	std	Y+18, r24	; 0x12
    840c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    840e:	8e 8f       	std	Y+30, r24	; 0x1e
    8410:	90 91 92 93 	lds	r25, 0x9392
    8414:	94 95       	.word	0x9594	; ????
    8416:	96 97       	sbiw	r26, 0x26	; 38
    8418:	98 99       	sbic	0x13, 0	; 19
    841a:	9a 9b       	sbis	0x13, 2	; 19
    841c:	9c 9d       	mul	r25, r12
    841e:	9e 9f       	mul	r25, r30
    8420:	a0 a1       	ldd	r26, Z+32	; 0x20
    8422:	a2 a3       	std	Z+34, r26	; 0x22
    8424:	a4 a5       	ldd	r26, Z+44	; 0x2c
    8426:	a6 a7       	std	Z+46, r26	; 0x2e
    8428:	a8 a9       	ldd	r26, Y+48	; 0x30
    842a:	aa ab       	std	Y+50, r26	; 0x32
    842c:	ac ad       	ldd	r26, Y+60	; 0x3c
    842e:	ae af       	std	Y+62, r26	; 0x3e
    8430:	b0 b1       	in	r27, 0x00	; 0
    8432:	b2 b3       	in	r27, 0x12	; 18
    8434:	b4 b5       	in	r27, 0x24	; 36
    8436:	b6 b7       	in	r27, 0x36	; 54
    8438:	b8 b9       	out	0x08, r27	; 8
    843a:	ba bb       	out	0x1a, r27	; 26
    843c:	bc bd       	out	0x2c, r27	; 44
    843e:	be bf       	out	0x3e, r27	; 62
    8440:	c0 c1       	rjmp	.+896    	; 0x87c2 <waves+0x4c2>
    8442:	c2 c3       	rjmp	.+1924   	; 0x8bc8 <waves+0x8c8>
    8444:	c4 c5       	rjmp	.+2952   	; 0x8fce <DrawMap+0x16>
    8446:	c6 c7       	rjmp	.+3980   	; 0x93d4 <LBPrintInt+0x54>
    8448:	c8 c9       	rjmp	.-3184   	; 0x77da <PatchCommand11+0x48>
    844a:	ca cb       	rjmp	.-2156   	; 0x7be0 <ProcessMusic+0x8>
    844c:	cc cd       	rjmp	.-1128   	; 0x7fe6 <ProcessMusic+0x40e>
    844e:	ce cf       	rjmp	.-100    	; 0x83ec <waves+0xec>
    8450:	d0 d1       	rcall	.+928    	; 0x87f2 <waves+0x4f2>
    8452:	d2 d3       	rcall	.+1956   	; 0x8bf8 <waves+0x8f8>
    8454:	d4 d5       	rcall	.+2984   	; 0x8ffe <DrawMap+0x46>
    8456:	d6 d7       	rcall	.+4012   	; 0x9404 <LBCollides+0x12>
    8458:	d8 d9       	rcall	.-3152   	; 0x780a <PatchCommand12+0x2>
    845a:	da db       	rcall	.-2124   	; 0x7c10 <ProcessMusic+0x38>
    845c:	dc dd       	rcall	.-1096   	; 0x8016 <SetMasterVolume>
    845e:	de df       	rcall	.-68     	; 0x841c <waves+0x11c>
    8460:	e0 e1       	ldi	r30, 0x10	; 16
    8462:	e2 e3       	ldi	r30, 0x32	; 50
    8464:	e4 e5       	ldi	r30, 0x54	; 84
    8466:	e6 e7       	ldi	r30, 0x76	; 118
    8468:	e8 e9       	ldi	r30, 0x98	; 152
    846a:	ea eb       	ldi	r30, 0xBA	; 186
    846c:	ec ed       	ldi	r30, 0xDC	; 220
    846e:	ee ef       	ldi	r30, 0xFE	; 254
    8470:	f0 f1       	brcs	.+124    	; 0x84ee <waves+0x1ee>
    8472:	f2 f3       	brmi	.-4      	; 0x8470 <waves+0x170>
    8474:	f4 f5       	brge	.+124    	; 0x84f2 <waves+0x1f2>
    8476:	f6 f7       	brtc	.-4      	; 0x8474 <waves+0x174>
    8478:	f8 f9       	.word	0xf9f8	; ????
    847a:	fa fb       	.word	0xfbfa	; ????
    847c:	fc fd       	.word	0xfdfc	; ????
    847e:	fe ff       	.word	0xfffe	; ????
    8480:	00 01       	movw	r0, r0
    8482:	02 03       	mulsu	r16, r18
    8484:	04 05       	cpc	r16, r4
    8486:	06 07       	cpc	r16, r22
    8488:	08 09       	sbc	r16, r8
    848a:	0a 0b       	sbc	r16, r26
    848c:	0c 0d       	add	r16, r12
    848e:	0e 0f       	add	r16, r30
    8490:	10 11       	cpse	r17, r0
    8492:	12 13       	cpse	r17, r18
    8494:	14 15       	cp	r17, r4
    8496:	16 17       	cp	r17, r22
    8498:	18 19       	sub	r17, r8
    849a:	1a 1b       	sub	r17, r26
    849c:	1c 1d       	adc	r17, r12
    849e:	1e 1f       	adc	r17, r30
    84a0:	20 21       	and	r18, r0
    84a2:	22 23       	and	r18, r18
    84a4:	24 25       	eor	r18, r4
    84a6:	26 27       	eor	r18, r22
    84a8:	28 29       	or	r18, r8
    84aa:	2a 2b       	or	r18, r26
    84ac:	2c 2d       	mov	r18, r12
    84ae:	2e 2f       	mov	r18, r30
    84b0:	30 31       	cpi	r19, 0x10	; 16
    84b2:	32 33       	cpi	r19, 0x32	; 50
    84b4:	34 35       	cpi	r19, 0x54	; 84
    84b6:	36 37       	cpi	r19, 0x76	; 118
    84b8:	38 39       	cpi	r19, 0x98	; 152
    84ba:	3a 3b       	cpi	r19, 0xBA	; 186
    84bc:	3c 3d       	cpi	r19, 0xDC	; 220
    84be:	3e 3f       	cpi	r19, 0xFE	; 254
    84c0:	40 41       	sbci	r20, 0x10	; 16
    84c2:	42 43       	sbci	r20, 0x32	; 50
    84c4:	44 45       	sbci	r20, 0x54	; 84
    84c6:	46 47       	sbci	r20, 0x76	; 118
    84c8:	48 49       	sbci	r20, 0x98	; 152
    84ca:	4a 4b       	sbci	r20, 0xBA	; 186
    84cc:	4c 4d       	sbci	r20, 0xDC	; 220
    84ce:	4e 4f       	sbci	r20, 0xFE	; 254
    84d0:	50 51       	subi	r21, 0x10	; 16
    84d2:	52 53       	subi	r21, 0x32	; 50
    84d4:	54 55       	subi	r21, 0x54	; 84
    84d6:	56 57       	subi	r21, 0x76	; 118
    84d8:	58 59       	subi	r21, 0x98	; 152
    84da:	5a 5b       	subi	r21, 0xBA	; 186
    84dc:	5c 5d       	subi	r21, 0xDC	; 220
    84de:	5e 5f       	subi	r21, 0xFE	; 254
    84e0:	60 61       	ori	r22, 0x10	; 16
    84e2:	62 63       	ori	r22, 0x32	; 50
    84e4:	64 65       	ori	r22, 0x54	; 84
    84e6:	66 67       	ori	r22, 0x76	; 118
    84e8:	68 69       	ori	r22, 0x98	; 152
    84ea:	6a 6b       	ori	r22, 0xBA	; 186
    84ec:	6c 6d       	ori	r22, 0xDC	; 220
    84ee:	6e 6f       	ori	r22, 0xFE	; 254
    84f0:	70 71       	andi	r23, 0x10	; 16
    84f2:	72 73       	andi	r23, 0x32	; 50
    84f4:	74 75       	andi	r23, 0x54	; 84
    84f6:	76 77       	andi	r23, 0x76	; 118
    84f8:	78 79       	andi	r23, 0x98	; 152
    84fa:	7a 7b       	andi	r23, 0xBA	; 186
    84fc:	7c 7d       	andi	r23, 0xDC	; 220
    84fe:	7e 7f       	andi	r23, 0xFE	; 254
    8500:	00 02       	muls	r16, r16
    8502:	04 06       	cpc	r0, r20
    8504:	08 0a       	sbc	r0, r24
    8506:	0c 0e       	add	r0, r28
    8508:	10 12       	cpse	r1, r16
    850a:	14 16       	cp	r1, r20
    850c:	18 1a       	sub	r1, r24
    850e:	1c 1e       	adc	r1, r28
    8510:	20 22       	and	r2, r16
    8512:	24 26       	eor	r2, r20
    8514:	28 2a       	or	r2, r24
    8516:	2c 2e       	mov	r2, r28
    8518:	30 32       	cpi	r19, 0x20	; 32
    851a:	34 36       	cpi	r19, 0x64	; 100
    851c:	38 3a       	cpi	r19, 0xA8	; 168
    851e:	3c 3e       	cpi	r19, 0xEC	; 236
    8520:	40 42       	sbci	r20, 0x20	; 32
    8522:	44 46       	sbci	r20, 0x64	; 100
    8524:	48 4a       	sbci	r20, 0xA8	; 168
    8526:	4c 4e       	sbci	r20, 0xEC	; 236
    8528:	50 52       	subi	r21, 0x20	; 32
    852a:	54 56       	subi	r21, 0x64	; 100
    852c:	58 5a       	subi	r21, 0xA8	; 168
    852e:	5c 5e       	subi	r21, 0xEC	; 236
    8530:	60 62       	ori	r22, 0x20	; 32
    8532:	64 66       	ori	r22, 0x64	; 100
    8534:	68 6a       	ori	r22, 0xA8	; 168
    8536:	6c 6e       	ori	r22, 0xEC	; 236
    8538:	70 72       	andi	r23, 0x20	; 32
    853a:	74 76       	andi	r23, 0x64	; 100
    853c:	78 7a       	andi	r23, 0xA8	; 168
    853e:	7c 7e       	andi	r23, 0xEC	; 236
    8540:	7f 7d       	andi	r23, 0xDF	; 223
    8542:	7b 79       	andi	r23, 0x9B	; 155
    8544:	77 75       	andi	r23, 0x57	; 87
    8546:	73 71       	andi	r23, 0x13	; 19
    8548:	6f 6d       	ori	r22, 0xDF	; 223
    854a:	6b 69       	ori	r22, 0x9B	; 155
    854c:	67 65       	ori	r22, 0x57	; 87
    854e:	63 61       	ori	r22, 0x13	; 19
    8550:	5f 5d       	subi	r21, 0xDF	; 223
    8552:	5b 59       	subi	r21, 0x9B	; 155
    8554:	57 55       	subi	r21, 0x57	; 87
    8556:	53 51       	subi	r21, 0x13	; 19
    8558:	4f 4d       	sbci	r20, 0xDF	; 223
    855a:	4b 49       	sbci	r20, 0x9B	; 155
    855c:	47 45       	sbci	r20, 0x57	; 87
    855e:	43 41       	sbci	r20, 0x13	; 19
    8560:	3f 3d       	cpi	r19, 0xDF	; 223
    8562:	3b 39       	cpi	r19, 0x9B	; 155
    8564:	37 35       	cpi	r19, 0x57	; 87
    8566:	33 31       	cpi	r19, 0x13	; 19
    8568:	2f 2d       	mov	r18, r15
    856a:	2b 29       	or	r18, r11
    856c:	27 25       	eor	r18, r7
    856e:	23 21       	and	r18, r3
    8570:	1f 1d       	adc	r17, r15
    8572:	1b 19       	sub	r17, r11
    8574:	17 15       	cp	r17, r7
    8576:	13 11       	cpse	r17, r3
    8578:	0f 0d       	add	r16, r15
    857a:	0b 09       	sbc	r16, r11
    857c:	07 05       	cpc	r16, r7
    857e:	03 01       	movw	r0, r6
    8580:	ff fd       	.word	0xfdff	; ????
    8582:	fb f9       	.word	0xf9fb	; ????
    8584:	f7 f5       	brid	.+124    	; 0x8602 <waves+0x302>
    8586:	f3 f1       	brvs	.+124    	; 0x8604 <waves+0x304>
    8588:	ef ed       	ldi	r30, 0xDF	; 223
    858a:	eb e9       	ldi	r30, 0x9B	; 155
    858c:	e7 e5       	ldi	r30, 0x57	; 87
    858e:	e3 e1       	ldi	r30, 0x13	; 19
    8590:	df dd       	rcall	.-1090   	; 0x8150 <steptable+0x48>
    8592:	db d9       	rcall	.-3146   	; 0x794a <StopSong+0x6>
    8594:	d7 d5       	rcall	.+2990   	; 0x9144 <FadeIn+0x2>
    8596:	d3 d1       	rcall	.+934    	; 0x893e <waves+0x63e>
    8598:	cf cd       	rjmp	.-1122   	; 0x8138 <steptable+0x30>
    859a:	cb c9       	rjmp	.-3178   	; 0x7932 <StartSong+0x40>
    859c:	c7 c5       	rjmp	.+2958   	; 0x912c <doFade+0x6>
    859e:	c3 c1       	rjmp	.+902    	; 0x8926 <waves+0x626>
    85a0:	bf bd       	out	0x2f, r27	; 47
    85a2:	bb b9       	out	0x0b, r27	; 11
    85a4:	b7 b5       	in	r27, 0x27	; 39
    85a6:	b3 b1       	in	r27, 0x03	; 3
    85a8:	af ad       	ldd	r26, Y+63	; 0x3f
    85aa:	ab a9       	ldd	r26, Y+51	; 0x33
    85ac:	a7 a5       	ldd	r26, Z+47	; 0x2f
    85ae:	a3 a1       	ldd	r26, Z+35	; 0x23
    85b0:	9f 9d       	mul	r25, r15
    85b2:	9b 99       	sbic	0x13, 3	; 19
    85b4:	97 95       	ror	r25
    85b6:	93 91       	.word	0x9193	; ????
    85b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    85ba:	8b 89       	ldd	r24, Y+19	; 0x13
    85bc:	87 85       	ldd	r24, Z+15	; 0x0f
    85be:	83 81       	ldd	r24, Z+3	; 0x03
    85c0:	80 82       	st	Z, r8
    85c2:	84 86       	std	Z+12, r8	; 0x0c
    85c4:	88 8a       	std	Y+16, r8	; 0x10
    85c6:	8c 8e       	std	Y+28, r8	; 0x1c
    85c8:	90 92 94 96 	sts	0x9694, r9
    85cc:	98 9a       	sbi	0x13, 0	; 19
    85ce:	9c 9e       	mul	r9, r28
    85d0:	a0 a2       	std	Z+32, r10	; 0x20
    85d2:	a4 a6       	std	Z+44, r10	; 0x2c
    85d4:	a8 aa       	std	Y+48, r10	; 0x30
    85d6:	ac ae       	std	Y+60, r10	; 0x3c
    85d8:	b0 b2       	in	r11, 0x10	; 16
    85da:	b4 b6       	in	r11, 0x34	; 52
    85dc:	b8 ba       	out	0x18, r11	; 24
    85de:	bc be       	out	0x3c, r11	; 60
    85e0:	c0 c2       	rjmp	.+1408   	; 0x8b62 <waves+0x862>
    85e2:	c4 c6       	rjmp	.+3464   	; 0x936c <LBPrintByte+0x4e>
    85e4:	c8 ca       	rjmp	.-2672   	; 0x7b76 <TriggerNote+0x1e>
    85e6:	cc ce       	rjmp	.-616    	; 0x8380 <waves+0x80>
    85e8:	d0 d2       	rcall	.+1440   	; 0x8b8a <waves+0x88a>
    85ea:	d4 d6       	rcall	.+3496   	; 0x9394 <LBPrintInt+0x14>
    85ec:	d8 da       	rcall	.-2640   	; 0x7b9e <TriggerNote+0x46>
    85ee:	dc de       	rcall	.-584    	; 0x83a8 <waves+0xa8>
    85f0:	e0 e2       	ldi	r30, 0x20	; 32
    85f2:	e4 e6       	ldi	r30, 0x64	; 100
    85f4:	e8 ea       	ldi	r30, 0xA8	; 168
    85f6:	ec ee       	ldi	r30, 0xEC	; 236
    85f8:	f0 f2       	brcs	.-68     	; 0x85b6 <waves+0x2b6>
    85fa:	f4 f6       	brge	.-68     	; 0x85b8 <waves+0x2b8>
    85fc:	f8 fa       	.word	0xfaf8	; ????
    85fe:	fc fe       	.word	0xfefc	; ????
    8600:	7f 7f       	andi	r23, 0xFF	; 255
    8602:	7f 7f       	andi	r23, 0xFF	; 255
    8604:	7f 7f       	andi	r23, 0xFF	; 255
    8606:	7f 7f       	andi	r23, 0xFF	; 255
    8608:	7f 7f       	andi	r23, 0xFF	; 255
    860a:	7f 7f       	andi	r23, 0xFF	; 255
    860c:	7f 7f       	andi	r23, 0xFF	; 255
    860e:	7f 7f       	andi	r23, 0xFF	; 255
    8610:	7f 7f       	andi	r23, 0xFF	; 255
    8612:	7f 7f       	andi	r23, 0xFF	; 255
    8614:	7f 7f       	andi	r23, 0xFF	; 255
    8616:	7f 7f       	andi	r23, 0xFF	; 255
    8618:	7f 7f       	andi	r23, 0xFF	; 255
    861a:	7f 7f       	andi	r23, 0xFF	; 255
    861c:	7f 7f       	andi	r23, 0xFF	; 255
    861e:	7f 7f       	andi	r23, 0xFF	; 255
    8620:	7f 7f       	andi	r23, 0xFF	; 255
    8622:	7f 7f       	andi	r23, 0xFF	; 255
    8624:	7f 7f       	andi	r23, 0xFF	; 255
    8626:	7f 7f       	andi	r23, 0xFF	; 255
    8628:	7f 7f       	andi	r23, 0xFF	; 255
    862a:	7f 7f       	andi	r23, 0xFF	; 255
    862c:	7f 7f       	andi	r23, 0xFF	; 255
    862e:	7f 7f       	andi	r23, 0xFF	; 255
    8630:	7f 7f       	andi	r23, 0xFF	; 255
    8632:	7f 7f       	andi	r23, 0xFF	; 255
    8634:	7f 7f       	andi	r23, 0xFF	; 255
    8636:	7f 7f       	andi	r23, 0xFF	; 255
    8638:	7f 7f       	andi	r23, 0xFF	; 255
    863a:	7f 7f       	andi	r23, 0xFF	; 255
    863c:	7f 7f       	andi	r23, 0xFF	; 255
    863e:	7f 7f       	andi	r23, 0xFF	; 255
    8640:	80 80       	ld	r8, Z
    8642:	80 80       	ld	r8, Z
    8644:	80 80       	ld	r8, Z
    8646:	80 80       	ld	r8, Z
    8648:	80 80       	ld	r8, Z
    864a:	80 80       	ld	r8, Z
    864c:	80 80       	ld	r8, Z
    864e:	80 80       	ld	r8, Z
    8650:	80 80       	ld	r8, Z
    8652:	80 80       	ld	r8, Z
    8654:	80 80       	ld	r8, Z
    8656:	80 80       	ld	r8, Z
    8658:	80 80       	ld	r8, Z
    865a:	80 80       	ld	r8, Z
    865c:	80 80       	ld	r8, Z
    865e:	80 80       	ld	r8, Z
    8660:	80 80       	ld	r8, Z
    8662:	80 80       	ld	r8, Z
    8664:	80 80       	ld	r8, Z
    8666:	80 80       	ld	r8, Z
    8668:	80 80       	ld	r8, Z
    866a:	80 80       	ld	r8, Z
    866c:	80 80       	ld	r8, Z
    866e:	80 80       	ld	r8, Z
    8670:	80 80       	ld	r8, Z
    8672:	80 80       	ld	r8, Z
    8674:	80 80       	ld	r8, Z
    8676:	80 80       	ld	r8, Z
    8678:	80 80       	ld	r8, Z
    867a:	80 80       	ld	r8, Z
    867c:	80 80       	ld	r8, Z
    867e:	80 80       	ld	r8, Z
    8680:	80 80       	ld	r8, Z
    8682:	80 80       	ld	r8, Z
    8684:	80 80       	ld	r8, Z
    8686:	80 80       	ld	r8, Z
    8688:	80 80       	ld	r8, Z
    868a:	80 80       	ld	r8, Z
    868c:	80 80       	ld	r8, Z
    868e:	80 80       	ld	r8, Z
    8690:	80 80       	ld	r8, Z
    8692:	80 80       	ld	r8, Z
    8694:	80 80       	ld	r8, Z
    8696:	80 80       	ld	r8, Z
    8698:	80 80       	ld	r8, Z
    869a:	80 80       	ld	r8, Z
    869c:	80 80       	ld	r8, Z
    869e:	80 80       	ld	r8, Z
    86a0:	80 80       	ld	r8, Z
    86a2:	80 80       	ld	r8, Z
    86a4:	80 80       	ld	r8, Z
    86a6:	80 80       	ld	r8, Z
    86a8:	80 80       	ld	r8, Z
    86aa:	80 80       	ld	r8, Z
    86ac:	80 80       	ld	r8, Z
    86ae:	80 80       	ld	r8, Z
    86b0:	80 80       	ld	r8, Z
    86b2:	80 80       	ld	r8, Z
    86b4:	80 80       	ld	r8, Z
    86b6:	80 80       	ld	r8, Z
    86b8:	80 80       	ld	r8, Z
    86ba:	80 80       	ld	r8, Z
    86bc:	80 80       	ld	r8, Z
    86be:	80 80       	ld	r8, Z
    86c0:	80 80       	ld	r8, Z
    86c2:	80 80       	ld	r8, Z
    86c4:	80 80       	ld	r8, Z
    86c6:	80 80       	ld	r8, Z
    86c8:	80 80       	ld	r8, Z
    86ca:	80 80       	ld	r8, Z
    86cc:	80 80       	ld	r8, Z
    86ce:	80 80       	ld	r8, Z
    86d0:	80 80       	ld	r8, Z
    86d2:	80 80       	ld	r8, Z
    86d4:	80 80       	ld	r8, Z
    86d6:	80 80       	ld	r8, Z
    86d8:	80 80       	ld	r8, Z
    86da:	80 80       	ld	r8, Z
    86dc:	80 80       	ld	r8, Z
    86de:	80 80       	ld	r8, Z
    86e0:	80 80       	ld	r8, Z
    86e2:	80 80       	ld	r8, Z
    86e4:	80 80       	ld	r8, Z
    86e6:	80 80       	ld	r8, Z
    86e8:	80 80       	ld	r8, Z
    86ea:	80 80       	ld	r8, Z
    86ec:	80 80       	ld	r8, Z
    86ee:	80 80       	ld	r8, Z
    86f0:	80 80       	ld	r8, Z
    86f2:	80 80       	ld	r8, Z
    86f4:	80 80       	ld	r8, Z
    86f6:	80 80       	ld	r8, Z
    86f8:	80 80       	ld	r8, Z
    86fa:	80 80       	ld	r8, Z
    86fc:	80 80       	ld	r8, Z
    86fe:	80 80       	ld	r8, Z
    8700:	7f 7f       	andi	r23, 0xFF	; 255
    8702:	7f 7f       	andi	r23, 0xFF	; 255
    8704:	7f 7f       	andi	r23, 0xFF	; 255
    8706:	7f 7f       	andi	r23, 0xFF	; 255
    8708:	7f 7f       	andi	r23, 0xFF	; 255
    870a:	7f 7f       	andi	r23, 0xFF	; 255
    870c:	7f 7f       	andi	r23, 0xFF	; 255
    870e:	7f 7f       	andi	r23, 0xFF	; 255
    8710:	7f 7f       	andi	r23, 0xFF	; 255
    8712:	7f 7f       	andi	r23, 0xFF	; 255
    8714:	7f 7f       	andi	r23, 0xFF	; 255
    8716:	7f 7f       	andi	r23, 0xFF	; 255
    8718:	7f 7f       	andi	r23, 0xFF	; 255
    871a:	7f 7f       	andi	r23, 0xFF	; 255
    871c:	7f 7f       	andi	r23, 0xFF	; 255
    871e:	7f 7f       	andi	r23, 0xFF	; 255
    8720:	7f 7f       	andi	r23, 0xFF	; 255
    8722:	7f 7f       	andi	r23, 0xFF	; 255
    8724:	7f 7f       	andi	r23, 0xFF	; 255
    8726:	7f 7f       	andi	r23, 0xFF	; 255
    8728:	7f 7f       	andi	r23, 0xFF	; 255
    872a:	7f 7f       	andi	r23, 0xFF	; 255
    872c:	7f 7f       	andi	r23, 0xFF	; 255
    872e:	7f 7f       	andi	r23, 0xFF	; 255
    8730:	7f 7f       	andi	r23, 0xFF	; 255
    8732:	7f 7f       	andi	r23, 0xFF	; 255
    8734:	7f 7f       	andi	r23, 0xFF	; 255
    8736:	7f 7f       	andi	r23, 0xFF	; 255
    8738:	7f 7f       	andi	r23, 0xFF	; 255
    873a:	7f 7f       	andi	r23, 0xFF	; 255
    873c:	7f 7f       	andi	r23, 0xFF	; 255
    873e:	7f 7f       	andi	r23, 0xFF	; 255
    8740:	7f 7f       	andi	r23, 0xFF	; 255
    8742:	7f 7f       	andi	r23, 0xFF	; 255
    8744:	7f 7f       	andi	r23, 0xFF	; 255
    8746:	7f 7f       	andi	r23, 0xFF	; 255
    8748:	7f 7f       	andi	r23, 0xFF	; 255
    874a:	7f 7f       	andi	r23, 0xFF	; 255
    874c:	7f 7f       	andi	r23, 0xFF	; 255
    874e:	7f 7f       	andi	r23, 0xFF	; 255
    8750:	7f 7f       	andi	r23, 0xFF	; 255
    8752:	7f 7f       	andi	r23, 0xFF	; 255
    8754:	7f 7f       	andi	r23, 0xFF	; 255
    8756:	7f 7f       	andi	r23, 0xFF	; 255
    8758:	7f 7f       	andi	r23, 0xFF	; 255
    875a:	7f 7f       	andi	r23, 0xFF	; 255
    875c:	7f 7f       	andi	r23, 0xFF	; 255
    875e:	7f 7f       	andi	r23, 0xFF	; 255
    8760:	7f 7f       	andi	r23, 0xFF	; 255
    8762:	7f 7f       	andi	r23, 0xFF	; 255
    8764:	7f 7f       	andi	r23, 0xFF	; 255
    8766:	7f 7f       	andi	r23, 0xFF	; 255
    8768:	7f 7f       	andi	r23, 0xFF	; 255
    876a:	7f 7f       	andi	r23, 0xFF	; 255
    876c:	7f 7f       	andi	r23, 0xFF	; 255
    876e:	7f 7f       	andi	r23, 0xFF	; 255
    8770:	7f 7f       	andi	r23, 0xFF	; 255
    8772:	7f 7f       	andi	r23, 0xFF	; 255
    8774:	7f 7f       	andi	r23, 0xFF	; 255
    8776:	7f 7f       	andi	r23, 0xFF	; 255
    8778:	7f 7f       	andi	r23, 0xFF	; 255
    877a:	7f 7f       	andi	r23, 0xFF	; 255
    877c:	7f 7f       	andi	r23, 0xFF	; 255
    877e:	7f 7f       	andi	r23, 0xFF	; 255
    8780:	80 80       	ld	r8, Z
    8782:	80 80       	ld	r8, Z
    8784:	80 80       	ld	r8, Z
    8786:	80 80       	ld	r8, Z
    8788:	80 80       	ld	r8, Z
    878a:	80 80       	ld	r8, Z
    878c:	80 80       	ld	r8, Z
    878e:	80 80       	ld	r8, Z
    8790:	80 80       	ld	r8, Z
    8792:	80 80       	ld	r8, Z
    8794:	80 80       	ld	r8, Z
    8796:	80 80       	ld	r8, Z
    8798:	80 80       	ld	r8, Z
    879a:	80 80       	ld	r8, Z
    879c:	80 80       	ld	r8, Z
    879e:	80 80       	ld	r8, Z
    87a0:	80 80       	ld	r8, Z
    87a2:	80 80       	ld	r8, Z
    87a4:	80 80       	ld	r8, Z
    87a6:	80 80       	ld	r8, Z
    87a8:	80 80       	ld	r8, Z
    87aa:	80 80       	ld	r8, Z
    87ac:	80 80       	ld	r8, Z
    87ae:	80 80       	ld	r8, Z
    87b0:	80 80       	ld	r8, Z
    87b2:	80 80       	ld	r8, Z
    87b4:	80 80       	ld	r8, Z
    87b6:	80 80       	ld	r8, Z
    87b8:	80 80       	ld	r8, Z
    87ba:	80 80       	ld	r8, Z
    87bc:	80 80       	ld	r8, Z
    87be:	80 80       	ld	r8, Z
    87c0:	80 80       	ld	r8, Z
    87c2:	80 80       	ld	r8, Z
    87c4:	80 80       	ld	r8, Z
    87c6:	80 80       	ld	r8, Z
    87c8:	80 80       	ld	r8, Z
    87ca:	80 80       	ld	r8, Z
    87cc:	80 80       	ld	r8, Z
    87ce:	80 80       	ld	r8, Z
    87d0:	80 80       	ld	r8, Z
    87d2:	80 80       	ld	r8, Z
    87d4:	80 80       	ld	r8, Z
    87d6:	80 80       	ld	r8, Z
    87d8:	80 80       	ld	r8, Z
    87da:	80 80       	ld	r8, Z
    87dc:	80 80       	ld	r8, Z
    87de:	80 80       	ld	r8, Z
    87e0:	80 80       	ld	r8, Z
    87e2:	80 80       	ld	r8, Z
    87e4:	80 80       	ld	r8, Z
    87e6:	80 80       	ld	r8, Z
    87e8:	80 80       	ld	r8, Z
    87ea:	80 80       	ld	r8, Z
    87ec:	80 80       	ld	r8, Z
    87ee:	80 80       	ld	r8, Z
    87f0:	80 80       	ld	r8, Z
    87f2:	80 80       	ld	r8, Z
    87f4:	80 80       	ld	r8, Z
    87f6:	80 80       	ld	r8, Z
    87f8:	80 80       	ld	r8, Z
    87fa:	80 80       	ld	r8, Z
    87fc:	80 80       	ld	r8, Z
    87fe:	80 80       	ld	r8, Z
    8800:	7f 7f       	andi	r23, 0xFF	; 255
    8802:	7f 7f       	andi	r23, 0xFF	; 255
    8804:	7f 7f       	andi	r23, 0xFF	; 255
    8806:	7f 7f       	andi	r23, 0xFF	; 255
    8808:	7f 7f       	andi	r23, 0xFF	; 255
    880a:	7f 7f       	andi	r23, 0xFF	; 255
    880c:	7f 7f       	andi	r23, 0xFF	; 255
    880e:	7f 7f       	andi	r23, 0xFF	; 255
    8810:	7f 7f       	andi	r23, 0xFF	; 255
    8812:	7f 7f       	andi	r23, 0xFF	; 255
    8814:	7f 7f       	andi	r23, 0xFF	; 255
    8816:	7f 7f       	andi	r23, 0xFF	; 255
    8818:	7f 7f       	andi	r23, 0xFF	; 255
    881a:	7f 7f       	andi	r23, 0xFF	; 255
    881c:	7f 7f       	andi	r23, 0xFF	; 255
    881e:	7f 7f       	andi	r23, 0xFF	; 255
    8820:	7f 7f       	andi	r23, 0xFF	; 255
    8822:	7f 7f       	andi	r23, 0xFF	; 255
    8824:	7f 7f       	andi	r23, 0xFF	; 255
    8826:	7f 7f       	andi	r23, 0xFF	; 255
    8828:	7f 7f       	andi	r23, 0xFF	; 255
    882a:	7f 7f       	andi	r23, 0xFF	; 255
    882c:	7f 7f       	andi	r23, 0xFF	; 255
    882e:	7f 7f       	andi	r23, 0xFF	; 255
    8830:	7f 7f       	andi	r23, 0xFF	; 255
    8832:	7f 7f       	andi	r23, 0xFF	; 255
    8834:	7f 7f       	andi	r23, 0xFF	; 255
    8836:	7f 7f       	andi	r23, 0xFF	; 255
    8838:	7f 7f       	andi	r23, 0xFF	; 255
    883a:	7f 7f       	andi	r23, 0xFF	; 255
    883c:	7f 7f       	andi	r23, 0xFF	; 255
    883e:	7f 7f       	andi	r23, 0xFF	; 255
    8840:	7f 7f       	andi	r23, 0xFF	; 255
    8842:	7f 7f       	andi	r23, 0xFF	; 255
    8844:	7f 7f       	andi	r23, 0xFF	; 255
    8846:	7f 7f       	andi	r23, 0xFF	; 255
    8848:	7f 7f       	andi	r23, 0xFF	; 255
    884a:	7f 7f       	andi	r23, 0xFF	; 255
    884c:	7f 7f       	andi	r23, 0xFF	; 255
    884e:	7f 7f       	andi	r23, 0xFF	; 255
    8850:	7f 7f       	andi	r23, 0xFF	; 255
    8852:	7f 7f       	andi	r23, 0xFF	; 255
    8854:	7f 7f       	andi	r23, 0xFF	; 255
    8856:	7f 7f       	andi	r23, 0xFF	; 255
    8858:	7f 7f       	andi	r23, 0xFF	; 255
    885a:	7f 7f       	andi	r23, 0xFF	; 255
    885c:	7f 7f       	andi	r23, 0xFF	; 255
    885e:	7f 7f       	andi	r23, 0xFF	; 255
    8860:	7f 7f       	andi	r23, 0xFF	; 255
    8862:	7f 7f       	andi	r23, 0xFF	; 255
    8864:	7f 7f       	andi	r23, 0xFF	; 255
    8866:	7f 7f       	andi	r23, 0xFF	; 255
    8868:	7f 7f       	andi	r23, 0xFF	; 255
    886a:	7f 7f       	andi	r23, 0xFF	; 255
    886c:	7f 7f       	andi	r23, 0xFF	; 255
    886e:	7f 7f       	andi	r23, 0xFF	; 255
    8870:	7f 7f       	andi	r23, 0xFF	; 255
    8872:	7f 7f       	andi	r23, 0xFF	; 255
    8874:	7f 7f       	andi	r23, 0xFF	; 255
    8876:	7f 7f       	andi	r23, 0xFF	; 255
    8878:	7f 7f       	andi	r23, 0xFF	; 255
    887a:	7f 7f       	andi	r23, 0xFF	; 255
    887c:	7f 7f       	andi	r23, 0xFF	; 255
    887e:	7f 7f       	andi	r23, 0xFF	; 255
    8880:	7f 7f       	andi	r23, 0xFF	; 255
    8882:	7f 7f       	andi	r23, 0xFF	; 255
    8884:	7f 7f       	andi	r23, 0xFF	; 255
    8886:	7f 7f       	andi	r23, 0xFF	; 255
    8888:	7f 7f       	andi	r23, 0xFF	; 255
    888a:	7f 7f       	andi	r23, 0xFF	; 255
    888c:	7f 7f       	andi	r23, 0xFF	; 255
    888e:	7f 7f       	andi	r23, 0xFF	; 255
    8890:	7f 7f       	andi	r23, 0xFF	; 255
    8892:	7f 7f       	andi	r23, 0xFF	; 255
    8894:	7f 7f       	andi	r23, 0xFF	; 255
    8896:	7f 7f       	andi	r23, 0xFF	; 255
    8898:	7f 7f       	andi	r23, 0xFF	; 255
    889a:	7f 7f       	andi	r23, 0xFF	; 255
    889c:	7f 7f       	andi	r23, 0xFF	; 255
    889e:	7f 7f       	andi	r23, 0xFF	; 255
    88a0:	7f 7f       	andi	r23, 0xFF	; 255
    88a2:	7f 7f       	andi	r23, 0xFF	; 255
    88a4:	7f 7f       	andi	r23, 0xFF	; 255
    88a6:	7f 7f       	andi	r23, 0xFF	; 255
    88a8:	7f 7f       	andi	r23, 0xFF	; 255
    88aa:	7f 7f       	andi	r23, 0xFF	; 255
    88ac:	7f 7f       	andi	r23, 0xFF	; 255
    88ae:	7f 7f       	andi	r23, 0xFF	; 255
    88b0:	7f 7f       	andi	r23, 0xFF	; 255
    88b2:	7f 7f       	andi	r23, 0xFF	; 255
    88b4:	7f 7f       	andi	r23, 0xFF	; 255
    88b6:	7f 7f       	andi	r23, 0xFF	; 255
    88b8:	7f 7f       	andi	r23, 0xFF	; 255
    88ba:	7f 7f       	andi	r23, 0xFF	; 255
    88bc:	7f 7f       	andi	r23, 0xFF	; 255
    88be:	7f 7f       	andi	r23, 0xFF	; 255
    88c0:	80 80       	ld	r8, Z
    88c2:	80 80       	ld	r8, Z
    88c4:	80 80       	ld	r8, Z
    88c6:	80 80       	ld	r8, Z
    88c8:	80 80       	ld	r8, Z
    88ca:	80 80       	ld	r8, Z
    88cc:	80 80       	ld	r8, Z
    88ce:	80 80       	ld	r8, Z
    88d0:	80 80       	ld	r8, Z
    88d2:	80 80       	ld	r8, Z
    88d4:	80 80       	ld	r8, Z
    88d6:	80 80       	ld	r8, Z
    88d8:	80 80       	ld	r8, Z
    88da:	80 80       	ld	r8, Z
    88dc:	80 80       	ld	r8, Z
    88de:	80 80       	ld	r8, Z
    88e0:	80 80       	ld	r8, Z
    88e2:	80 80       	ld	r8, Z
    88e4:	80 80       	ld	r8, Z
    88e6:	80 80       	ld	r8, Z
    88e8:	80 80       	ld	r8, Z
    88ea:	80 80       	ld	r8, Z
    88ec:	80 80       	ld	r8, Z
    88ee:	80 80       	ld	r8, Z
    88f0:	80 80       	ld	r8, Z
    88f2:	80 80       	ld	r8, Z
    88f4:	80 80       	ld	r8, Z
    88f6:	80 80       	ld	r8, Z
    88f8:	80 80       	ld	r8, Z
    88fa:	80 80       	ld	r8, Z
    88fc:	80 80       	ld	r8, Z
    88fe:	80 80       	ld	r8, Z
    8900:	03 09       	sbc	r16, r3
    8902:	13 1e       	adc	r1, r19
    8904:	28 31       	cpi	r18, 0x18	; 24
    8906:	3a 40       	sbci	r19, 0x0A	; 10
    8908:	46 4c       	sbci	r20, 0xC6	; 198
    890a:	50 54       	subi	r21, 0x40	; 64
    890c:	58 5b       	subi	r21, 0xB8	; 184
    890e:	5e 61       	ori	r21, 0x1E	; 30
    8910:	63 65       	ori	r22, 0x53	; 83
    8912:	67 69       	ori	r22, 0x97	; 151
    8914:	6b 6c       	ori	r22, 0xCB	; 203
    8916:	6e 6f       	ori	r22, 0xFE	; 254
    8918:	70 71       	andi	r23, 0x10	; 16
    891a:	72 73       	andi	r23, 0x32	; 50
    891c:	74 75       	andi	r23, 0x54	; 84
    891e:	76 77       	andi	r23, 0x76	; 118
    8920:	77 78       	andi	r23, 0x87	; 135
    8922:	79 79       	andi	r23, 0x99	; 153
    8924:	7a 7a       	andi	r23, 0xAA	; 170
    8926:	7b 7b       	andi	r23, 0xBB	; 187
    8928:	7c 7c       	andi	r23, 0xCC	; 204
    892a:	7c 7d       	andi	r23, 0xDC	; 220
    892c:	7d 7d       	andi	r23, 0xDD	; 221
    892e:	7e 7e       	andi	r23, 0xEE	; 238
    8930:	7e 7e       	andi	r23, 0xEE	; 238
    8932:	7f 7f       	andi	r23, 0xFF	; 255
    8934:	7f 7f       	andi	r23, 0xFF	; 255
    8936:	7f 7f       	andi	r23, 0xFF	; 255
    8938:	7f 7f       	andi	r23, 0xFF	; 255
    893a:	7f 7f       	andi	r23, 0xFF	; 255
    893c:	7f 7f       	andi	r23, 0xFF	; 255
    893e:	7f 7f       	andi	r23, 0xFF	; 255
    8940:	7f 7f       	andi	r23, 0xFF	; 255
    8942:	7f 7f       	andi	r23, 0xFF	; 255
    8944:	7f 7f       	andi	r23, 0xFF	; 255
    8946:	7f 7f       	andi	r23, 0xFF	; 255
    8948:	7f 7f       	andi	r23, 0xFF	; 255
    894a:	7f 7f       	andi	r23, 0xFF	; 255
    894c:	7f 7e       	andi	r23, 0xEF	; 239
    894e:	7e 7e       	andi	r23, 0xEE	; 238
    8950:	7e 7d       	andi	r23, 0xDE	; 222
    8952:	7d 7d       	andi	r23, 0xDD	; 221
    8954:	7c 7c       	andi	r23, 0xCC	; 204
    8956:	7c 7b       	andi	r23, 0xBC	; 188
    8958:	7b 7a       	andi	r23, 0xAB	; 171
    895a:	7a 79       	andi	r23, 0x9A	; 154
    895c:	79 78       	andi	r23, 0x89	; 137
    895e:	77 77       	andi	r23, 0x77	; 119
    8960:	76 75       	andi	r23, 0x56	; 86
    8962:	74 73       	andi	r23, 0x34	; 52
    8964:	72 71       	andi	r23, 0x12	; 18
    8966:	70 6f       	ori	r23, 0xF0	; 240
    8968:	6e 6c       	ori	r22, 0xCE	; 206
    896a:	6b 69       	ori	r22, 0x9B	; 155
    896c:	67 65       	ori	r22, 0x57	; 87
    896e:	63 61       	ori	r22, 0x13	; 19
    8970:	5e 5b       	subi	r21, 0xBE	; 190
    8972:	58 54       	subi	r21, 0x48	; 72
    8974:	50 4c       	sbci	r21, 0xC0	; 192
    8976:	46 40       	sbci	r20, 0x06	; 6
    8978:	3a 31       	cpi	r19, 0x1A	; 26
    897a:	28 1e       	adc	r2, r24
    897c:	13 09       	sbc	r17, r3
    897e:	03 00       	.word	0x0003	; ????
    8980:	c6 cc       	rjmp	.-1652   	; 0x830e <waves+0xe>
    8982:	d5 db       	rcall	.-2134   	; 0x812e <steptable+0x26>
    8984:	df e3       	ldi	r29, 0x3F	; 63
    8986:	e5 e7       	ldi	r30, 0x75	; 117
    8988:	e9 ea       	ldi	r30, 0xA9	; 169
    898a:	eb ec       	ldi	r30, 0xCB	; 203
    898c:	ed ee       	ldi	r30, 0xED	; 237
    898e:	ef ef       	ldi	r30, 0xFF	; 255
    8990:	f0 f0       	brcs	.+60     	; 0x89ce <waves+0x6ce>
    8992:	f0 f1       	brcs	.+124    	; 0x8a10 <waves+0x710>
    8994:	f1 f1       	breq	.+124    	; 0x8a12 <waves+0x712>
    8996:	f1 f2       	breq	.-68     	; 0x8954 <waves+0x654>
    8998:	f2 f2       	brmi	.-68     	; 0x8956 <waves+0x656>
    899a:	f2 f2       	brmi	.-68     	; 0x8958 <waves+0x658>
    899c:	f2 f2       	brmi	.-68     	; 0x895a <waves+0x65a>
    899e:	f2 f3       	brmi	.-4      	; 0x899c <waves+0x69c>
    89a0:	f3 f3       	brvs	.-4      	; 0x899e <waves+0x69e>
    89a2:	f3 f3       	brvs	.-4      	; 0x89a0 <waves+0x6a0>
    89a4:	f3 f3       	brvs	.-4      	; 0x89a2 <waves+0x6a2>
    89a6:	f3 f3       	brvs	.-4      	; 0x89a4 <waves+0x6a4>
    89a8:	f3 f3       	brvs	.-4      	; 0x89a6 <waves+0x6a6>
    89aa:	f3 f3       	brvs	.-4      	; 0x89a8 <waves+0x6a8>
    89ac:	f3 f3       	brvs	.-4      	; 0x89aa <waves+0x6aa>
    89ae:	f3 f3       	brvs	.-4      	; 0x89ac <waves+0x6ac>
    89b0:	f3 f3       	brvs	.-4      	; 0x89ae <waves+0x6ae>
    89b2:	f3 f3       	brvs	.-4      	; 0x89b0 <waves+0x6b0>
    89b4:	f3 f3       	brvs	.-4      	; 0x89b2 <waves+0x6b2>
    89b6:	f3 f3       	brvs	.-4      	; 0x89b4 <waves+0x6b4>
    89b8:	f3 f3       	brvs	.-4      	; 0x89b6 <waves+0x6b6>
    89ba:	f3 f3       	brvs	.-4      	; 0x89b8 <waves+0x6b8>
    89bc:	f3 f3       	brvs	.-4      	; 0x89ba <waves+0x6ba>
    89be:	f3 f3       	brvs	.-4      	; 0x89bc <waves+0x6bc>
    89c0:	f3 f3       	brvs	.-4      	; 0x89be <waves+0x6be>
    89c2:	f3 f3       	brvs	.-4      	; 0x89c0 <waves+0x6c0>
    89c4:	f3 f3       	brvs	.-4      	; 0x89c2 <waves+0x6c2>
    89c6:	f3 f3       	brvs	.-4      	; 0x89c4 <waves+0x6c4>
    89c8:	f3 f3       	brvs	.-4      	; 0x89c6 <waves+0x6c6>
    89ca:	f3 f3       	brvs	.-4      	; 0x89c8 <waves+0x6c8>
    89cc:	f3 f3       	brvs	.-4      	; 0x89ca <waves+0x6ca>
    89ce:	f3 f3       	brvs	.-4      	; 0x89cc <waves+0x6cc>
    89d0:	f3 f3       	brvs	.-4      	; 0x89ce <waves+0x6ce>
    89d2:	f3 f3       	brvs	.-4      	; 0x89d0 <waves+0x6d0>
    89d4:	f3 f3       	brvs	.-4      	; 0x89d2 <waves+0x6d2>
    89d6:	f3 f3       	brvs	.-4      	; 0x89d4 <waves+0x6d4>
    89d8:	f3 f3       	brvs	.-4      	; 0x89d6 <waves+0x6d6>
    89da:	f3 f3       	brvs	.-4      	; 0x89d8 <waves+0x6d8>
    89dc:	f3 f3       	brvs	.-4      	; 0x89da <waves+0x6da>
    89de:	f3 f3       	brvs	.-4      	; 0x89dc <waves+0x6dc>
    89e0:	f2 f2       	brmi	.-68     	; 0x899e <waves+0x69e>
    89e2:	f2 f2       	brmi	.-68     	; 0x89a0 <waves+0x6a0>
    89e4:	f2 f2       	brmi	.-68     	; 0x89a2 <waves+0x6a2>
    89e6:	f2 f2       	brmi	.-68     	; 0x89a4 <waves+0x6a4>
    89e8:	f1 f1       	breq	.+124    	; 0x8a66 <waves+0x766>
    89ea:	f1 f1       	breq	.+124    	; 0x8a68 <waves+0x768>
    89ec:	f0 f0       	brcs	.+60     	; 0x8a2a <waves+0x72a>
    89ee:	f0 ef       	ldi	r31, 0xF0	; 240
    89f0:	ef ee       	ldi	r30, 0xEF	; 239
    89f2:	ed ec       	ldi	r30, 0xCD	; 205
    89f4:	eb ea       	ldi	r30, 0xAB	; 171
    89f6:	e9 e7       	ldi	r30, 0x79	; 121
    89f8:	e5 e3       	ldi	r30, 0x35	; 53
    89fa:	df db       	rcall	.-2114   	; 0x81ba <steptable+0xb2>
    89fc:	d5 cc       	rjmp	.-1622   	; 0x83a8 <waves+0xa8>
    89fe:	c6 00       	.word	0x00c6	; ????
    8a00:	00 28       	or	r0, r0
    8a02:	3d 42       	sbci	r19, 0x2D	; 45
    8a04:	30 2d       	mov	r19, r0
    8a06:	2c 2b       	or	r18, r28
    8a08:	2c 2d       	mov	r18, r12
    8a0a:	2e 2f       	mov	r18, r30
    8a0c:	30 32       	cpi	r19, 0x20	; 32
    8a0e:	33 35       	cpi	r19, 0x53	; 83
    8a10:	37 39       	cpi	r19, 0x97	; 151
    8a12:	3b 3d       	cpi	r19, 0xDB	; 219
    8a14:	3f 41       	sbci	r19, 0x1F	; 31
    8a16:	43 45       	sbci	r20, 0x53	; 83
    8a18:	48 4a       	sbci	r20, 0xA8	; 168
    8a1a:	4c 4e       	sbci	r20, 0xEC	; 236
    8a1c:	50 53       	subi	r21, 0x30	; 48
    8a1e:	55 57       	subi	r21, 0x75	; 117
    8a20:	59 5b       	subi	r21, 0xB9	; 185
    8a22:	5d 5f       	subi	r21, 0xFD	; 253
    8a24:	61 63       	ori	r22, 0x31	; 49
    8a26:	65 67       	ori	r22, 0x75	; 117
    8a28:	69 6b       	ori	r22, 0xB9	; 185
    8a2a:	6c 6e       	ori	r22, 0xEC	; 236
    8a2c:	70 71       	andi	r23, 0x10	; 16
    8a2e:	73 74       	andi	r23, 0x43	; 67
    8a30:	75 77       	andi	r23, 0x75	; 117
    8a32:	78 79       	andi	r23, 0x98	; 152
    8a34:	7a 7b       	andi	r23, 0xBA	; 186
    8a36:	7c 7d       	andi	r23, 0xDC	; 220
    8a38:	7d 7e       	andi	r23, 0xED	; 237
    8a3a:	7e 7f       	andi	r23, 0xFE	; 254
    8a3c:	7f 7f       	andi	r23, 0xFF	; 255
    8a3e:	7f 7f       	andi	r23, 0xFF	; 255
    8a40:	7f 7f       	andi	r23, 0xFF	; 255
    8a42:	7f 7f       	andi	r23, 0xFF	; 255
    8a44:	7f 7f       	andi	r23, 0xFF	; 255
    8a46:	7e 7e       	andi	r23, 0xEE	; 238
    8a48:	7d 7d       	andi	r23, 0xDD	; 221
    8a4a:	7c 7b       	andi	r23, 0xBC	; 188
    8a4c:	7a 79       	andi	r23, 0x9A	; 154
    8a4e:	78 77       	andi	r23, 0x78	; 120
    8a50:	75 74       	andi	r23, 0x45	; 69
    8a52:	73 71       	andi	r23, 0x13	; 19
    8a54:	70 6e       	ori	r23, 0xE0	; 224
    8a56:	6c 6b       	ori	r22, 0xBC	; 188
    8a58:	69 67       	ori	r22, 0x79	; 121
    8a5a:	65 63       	ori	r22, 0x35	; 53
    8a5c:	61 5f       	subi	r22, 0xF1	; 241
    8a5e:	5d 5b       	subi	r21, 0xBD	; 189
    8a60:	59 57       	subi	r21, 0x79	; 121
    8a62:	55 53       	subi	r21, 0x35	; 53
    8a64:	50 4e       	sbci	r21, 0xE0	; 224
    8a66:	4c 4a       	sbci	r20, 0xAC	; 172
    8a68:	48 45       	sbci	r20, 0x58	; 88
    8a6a:	43 41       	sbci	r20, 0x13	; 19
    8a6c:	3f 3d       	cpi	r19, 0xDF	; 223
    8a6e:	3b 39       	cpi	r19, 0x9B	; 155
    8a70:	37 35       	cpi	r19, 0x57	; 87
    8a72:	33 32       	cpi	r19, 0x23	; 35
    8a74:	30 2f       	mov	r19, r16
    8a76:	2e 2d       	mov	r18, r14
    8a78:	2c 2b       	or	r18, r28
    8a7a:	2c 2d       	mov	r18, r12
    8a7c:	30 42       	sbci	r19, 0x20	; 32
    8a7e:	3d 28       	or	r3, r13
    8a80:	00 e9       	ldi	r16, 0x90	; 144
    8a82:	e5 fe       	sbrs	r14, 5
    8a84:	d4 d7       	rcall	.+4008   	; 0x9a2e <init_enemy_shark+0x7e>
    8a86:	d7 d7       	rcall	.+4014   	; 0x9a36 <init_enemy_shark+0x86>
    8a88:	d6 d4       	rcall	.+2476   	; 0x9436 <LBCollides+0x44>
    8a8a:	d2 d0       	rcall	.+420    	; 0x8c30 <waves+0x930>
    8a8c:	ce cc       	rjmp	.-1636   	; 0x842a <waves+0x12a>
    8a8e:	ca c8       	rjmp	.-3692   	; 0x7c24 <ProcessMusic+0x4c>
    8a90:	c6 c3       	rjmp	.+1932   	; 0x921e <LBGetJoyPadState+0xe>
    8a92:	c1 bf       	out	0x31, r28	; 49
    8a94:	bd ba       	out	0x1d, r11	; 29
    8a96:	b8 b6       	in	r11, 0x38	; 56
    8a98:	b4 b1       	in	r27, 0x04	; 4
    8a9a:	af ad       	ldd	r26, Y+63	; 0x3f
    8a9c:	ab a9       	ldd	r26, Y+51	; 0x33
    8a9e:	a7 a5       	ldd	r26, Z+47	; 0x2f
    8aa0:	a3 a1       	ldd	r26, Z+35	; 0x23
    8aa2:	9f 9e       	mul	r9, r31
    8aa4:	9c 9a       	sbi	0x13, 4	; 19
    8aa6:	99 97       	sbiw	r26, 0x29	; 41
    8aa8:	95 94       	asr	r9
    8aaa:	93 91       	.word	0x9193	; ????
    8aac:	90 8f       	std	Z+24, r25	; 0x18
    8aae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    8ab0:	8b 8a       	std	Y+19, r8	; 0x13
    8ab2:	89 88       	ldd	r8, Y+17	; 0x11
    8ab4:	88 87       	std	Y+8, r24	; 0x08
    8ab6:	86 85       	ldd	r24, Z+14	; 0x0e
    8ab8:	85 84       	ldd	r8, Z+13	; 0x0d
    8aba:	84 84       	ldd	r8, Z+12	; 0x0c
    8abc:	83 83       	std	Z+3, r24	; 0x03
    8abe:	83 83       	std	Z+3, r24	; 0x03
    8ac0:	83 83       	std	Z+3, r24	; 0x03
    8ac2:	83 83       	std	Z+3, r24	; 0x03
    8ac4:	83 84       	ldd	r8, Z+11	; 0x0b
    8ac6:	84 84       	ldd	r8, Z+12	; 0x0c
    8ac8:	85 85       	ldd	r24, Z+13	; 0x0d
    8aca:	86 87       	std	Z+14, r24	; 0x0e
    8acc:	88 88       	ldd	r8, Y+16	; 0x10
    8ace:	89 8a       	std	Y+17, r8	; 0x11
    8ad0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    8ad2:	8d 8f       	std	Y+29, r24	; 0x1d
    8ad4:	90 91 93 94 	lds	r25, 0x9493
    8ad8:	95 97       	sbiw	r26, 0x25	; 37
    8ada:	99 9a       	sbi	0x13, 1	; 19
    8adc:	9c 9e       	mul	r9, r28
    8ade:	9f a1       	ldd	r25, Y+39	; 0x27
    8ae0:	a3 a5       	ldd	r26, Z+43	; 0x2b
    8ae2:	a7 a9       	ldd	r26, Z+55	; 0x37
    8ae4:	ab ad       	ldd	r26, Y+59	; 0x3b
    8ae6:	af b1       	in	r26, 0x0f	; 15
    8ae8:	b4 b6       	in	r11, 0x34	; 52
    8aea:	b8 ba       	out	0x18, r11	; 24
    8aec:	bd bf       	out	0x3d, r27	; 61
    8aee:	c1 c3       	rjmp	.+1922   	; 0x9272 <LBGetJoyPadState+0x62>
    8af0:	c6 c8       	rjmp	.-3700   	; 0x7c7e <ProcessMusic+0xa6>
    8af2:	ca cc       	rjmp	.-1644   	; 0x8488 <waves+0x188>
    8af4:	ce d0       	rcall	.+412    	; 0x8c92 <waves+0x992>
    8af6:	d2 d4       	rcall	.+2468   	; 0x949c <LBMapSprite+0x14>
    8af8:	d6 d7       	rcall	.+4012   	; 0x9aa6 <clear_overlay+0x4>
    8afa:	d7 d7       	rcall	.+4014   	; 0x9aaa <clear_overlay+0x8>
    8afc:	d4 fe       	sbrs	r13, 4
    8afe:	e5 e9       	ldi	r30, 0x95	; 149
    8b00:	f9 f8       	.word	0xf8f9	; ????
    8b02:	f9 f5       	brne	.+126    	; 0x8b82 <waves+0x882>
    8b04:	eb e1       	ldi	r30, 0x1B	; 27
    8b06:	dd de       	rcall	.-582    	; 0x88c2 <waves+0x5c2>
    8b08:	e0 e2       	ldi	r30, 0x20	; 32
    8b0a:	e4 e5       	ldi	r30, 0x54	; 84
    8b0c:	e6 e5       	ldi	r30, 0x56	; 86
    8b0e:	e4 e2       	ldi	r30, 0x24	; 36
    8b10:	de d9       	rcall	.-3140   	; 0x7ece <ProcessMusic+0x2f6>
    8b12:	d2 ca       	rjmp	.-2652   	; 0x80b8 <esmw+0x38>
    8b14:	c1 b7       	in	r28, 0x31	; 49
    8b16:	ac a2       	std	Y+36, r10	; 0x24
    8b18:	99 91       	ld	r25, Y+
    8b1a:	8a 86       	std	Y+10, r8	; 0x0a
    8b1c:	83 81       	ldd	r24, Z+3	; 0x03
    8b1e:	80 80       	ld	r8, Z
    8b20:	81 82       	std	Z+1, r8	; 0x01
    8b22:	83 85       	ldd	r24, Z+11	; 0x0b
    8b24:	86 88       	ldd	r8, Z+22	; 0x16
    8b26:	8a 8c       	ldd	r8, Y+26	; 0x1a
    8b28:	8d 8f       	std	Y+29, r24	; 0x1d
    8b2a:	90 92 93 95 	sts	0x9593, r9
    8b2e:	96 97       	sbiw	r26, 0x26	; 38
    8b30:	98 99       	sbic	0x13, 0	; 19
    8b32:	9a 9b       	sbis	0x13, 2	; 19
    8b34:	9b 9c       	mul	r9, r11
    8b36:	9d 9d       	mul	r25, r13
    8b38:	9d 9e       	mul	r9, r29
    8b3a:	9e 9e       	mul	r9, r30
    8b3c:	9f 9f       	mul	r25, r31
    8b3e:	9f 9f       	mul	r25, r31
    8b40:	9f 9f       	mul	r25, r31
    8b42:	9f 9e       	mul	r9, r31
    8b44:	9e 9e       	mul	r9, r30
    8b46:	9d 9d       	mul	r25, r13
    8b48:	9d 9c       	mul	r9, r13
    8b4a:	9b 9b       	sbis	0x13, 3	; 19
    8b4c:	9a 99       	sbic	0x13, 2	; 19
    8b4e:	98 97       	sbiw	r26, 0x28	; 40
    8b50:	96 95       	lsr	r25
    8b52:	93 92       	.word	0x9293	; ????
    8b54:	90 8f       	std	Z+24, r25	; 0x18
    8b56:	8d 8c       	ldd	r8, Y+29	; 0x1d
    8b58:	8a 88       	ldd	r8, Y+18	; 0x12
    8b5a:	86 85       	ldd	r24, Z+14	; 0x0e
    8b5c:	83 82       	std	Z+3, r8	; 0x03
    8b5e:	81 80       	ldd	r8, Z+1	; 0x01
    8b60:	80 81       	ld	r24, Z
    8b62:	83 86       	std	Z+11, r8	; 0x0b
    8b64:	8a 91       	ld	r24, -Y
    8b66:	99 a2       	std	Y+33, r9	; 0x21
    8b68:	ac b7       	in	r26, 0x3c	; 60
    8b6a:	c1 ca       	rjmp	.-2686   	; 0x80ee <esmw+0x6e>
    8b6c:	d2 d9       	rcall	.-3164   	; 0x7f12 <ProcessMusic+0x33a>
    8b6e:	de e2       	ldi	r29, 0x2E	; 46
    8b70:	e4 e5       	ldi	r30, 0x54	; 84
    8b72:	e6 e5       	ldi	r30, 0x56	; 86
    8b74:	e4 e2       	ldi	r30, 0x24	; 36
    8b76:	e0 de       	rcall	.-576    	; 0x8938 <waves+0x638>
    8b78:	dd e1       	ldi	r29, 0x1D	; 29
    8b7a:	eb f5       	brvc	.+122    	; 0x8bf6 <waves+0x8f6>
    8b7c:	f9 f8       	.word	0xf8f9	; ????
    8b7e:	f9 00       	.word	0x00f9	; ????
    8b80:	07 08       	sbc	r0, r7
    8b82:	07 0b       	sbc	r16, r23
    8b84:	15 1f       	adc	r17, r21
    8b86:	23 22       	and	r2, r19
    8b88:	20 1e       	adc	r2, r16
    8b8a:	1c 1b       	sub	r17, r28
    8b8c:	1a 1b       	sub	r17, r26
    8b8e:	1c 1e       	adc	r1, r28
    8b90:	22 27       	eor	r18, r18
    8b92:	2e 36       	cpi	r18, 0x6E	; 110
    8b94:	3f 49       	sbci	r19, 0x9F	; 159
    8b96:	54 5e       	subi	r21, 0xE4	; 228
    8b98:	67 6f       	ori	r22, 0xF7	; 247
    8b9a:	76 7a       	andi	r23, 0xA6	; 166
    8b9c:	7e 7f       	andi	r23, 0xFE	; 254
    8b9e:	7f 7f       	andi	r23, 0xFF	; 255
    8ba0:	7f 7e       	andi	r23, 0xEF	; 239
    8ba2:	7d 7b       	andi	r23, 0xBD	; 189
    8ba4:	7a 78       	andi	r23, 0x8A	; 138
    8ba6:	76 74       	andi	r23, 0x46	; 70
    8ba8:	73 71       	andi	r23, 0x13	; 19
    8baa:	70 6e       	ori	r23, 0xE0	; 224
    8bac:	6d 6b       	ori	r22, 0xBD	; 189
    8bae:	6a 69       	ori	r22, 0x9A	; 154
    8bb0:	68 67       	ori	r22, 0x78	; 120
    8bb2:	66 65       	ori	r22, 0x56	; 86
    8bb4:	65 64       	ori	r22, 0x45	; 69
    8bb6:	64 63       	ori	r22, 0x34	; 52
    8bb8:	63 62       	ori	r22, 0x23	; 35
    8bba:	62 62       	ori	r22, 0x22	; 34
    8bbc:	61 61       	ori	r22, 0x11	; 17
    8bbe:	61 61       	ori	r22, 0x11	; 17
    8bc0:	61 61       	ori	r22, 0x11	; 17
    8bc2:	61 62       	ori	r22, 0x21	; 33
    8bc4:	62 62       	ori	r22, 0x22	; 34
    8bc6:	63 63       	ori	r22, 0x33	; 51
    8bc8:	63 64       	ori	r22, 0x43	; 67
    8bca:	65 65       	ori	r22, 0x55	; 85
    8bcc:	66 67       	ori	r22, 0x76	; 118
    8bce:	68 69       	ori	r22, 0x98	; 152
    8bd0:	6a 6b       	ori	r22, 0xBA	; 186
    8bd2:	6d 6e       	ori	r22, 0xED	; 237
    8bd4:	70 71       	andi	r23, 0x10	; 16
    8bd6:	73 74       	andi	r23, 0x43	; 67
    8bd8:	76 78       	andi	r23, 0x86	; 134
    8bda:	7a 7b       	andi	r23, 0xBA	; 186
    8bdc:	7d 7e       	andi	r23, 0xED	; 237
    8bde:	7f 7f       	andi	r23, 0xFF	; 255
    8be0:	7f 7f       	andi	r23, 0xFF	; 255
    8be2:	7e 7a       	andi	r23, 0xAE	; 174
    8be4:	76 6f       	ori	r23, 0xF6	; 246
    8be6:	67 5e       	subi	r22, 0xE7	; 231
    8be8:	54 49       	sbci	r21, 0x94	; 148
    8bea:	3f 36       	cpi	r19, 0x6F	; 111
    8bec:	2e 27       	eor	r18, r30
    8bee:	22 1e       	adc	r2, r18
    8bf0:	1c 1b       	sub	r17, r28
    8bf2:	1a 1b       	sub	r17, r26
    8bf4:	1c 1e       	adc	r1, r28
    8bf6:	20 22       	and	r2, r16
    8bf8:	23 1f       	adc	r18, r19
    8bfa:	15 0b       	sbc	r17, r21
    8bfc:	07 08       	sbc	r0, r7
    8bfe:	07 00       	.word	0x0007	; ????
    8c00:	1f 31       	cpi	r17, 0x1F	; 31
    8c02:	3d 44       	sbci	r19, 0x4D	; 77
    8c04:	4e 53       	subi	r20, 0x3E	; 62
    8c06:	54 56       	subi	r21, 0x64	; 100
    8c08:	5a 5f       	subi	r21, 0xFA	; 250
    8c0a:	64 69       	ori	r22, 0x94	; 148
    8c0c:	6e 74       	andi	r22, 0x4E	; 78
    8c0e:	76 79       	andi	r23, 0x96	; 150
    8c10:	7c 7f       	andi	r23, 0xFC	; 252
    8c12:	7f 7f       	andi	r23, 0xFF	; 255
    8c14:	7f 7f       	andi	r23, 0xFF	; 255
    8c16:	7f 7f       	andi	r23, 0xFF	; 255
    8c18:	7f 7f       	andi	r23, 0xFF	; 255
    8c1a:	7f 7f       	andi	r23, 0xFF	; 255
    8c1c:	7f 7f       	andi	r23, 0xFF	; 255
    8c1e:	7f 7f       	andi	r23, 0xFF	; 255
    8c20:	7f 7f       	andi	r23, 0xFF	; 255
    8c22:	7f 7f       	andi	r23, 0xFF	; 255
    8c24:	7f 7f       	andi	r23, 0xFF	; 255
    8c26:	7f 7f       	andi	r23, 0xFF	; 255
    8c28:	7f 7f       	andi	r23, 0xFF	; 255
    8c2a:	7f 7f       	andi	r23, 0xFF	; 255
    8c2c:	7f 7f       	andi	r23, 0xFF	; 255
    8c2e:	7f 7f       	andi	r23, 0xFF	; 255
    8c30:	7f 7f       	andi	r23, 0xFF	; 255
    8c32:	7f 7f       	andi	r23, 0xFF	; 255
    8c34:	7f 7f       	andi	r23, 0xFF	; 255
    8c36:	7f 7f       	andi	r23, 0xFF	; 255
    8c38:	7f 7f       	andi	r23, 0xFF	; 255
    8c3a:	7f 7f       	andi	r23, 0xFF	; 255
    8c3c:	7f 7f       	andi	r23, 0xFF	; 255
    8c3e:	7f 7f       	andi	r23, 0xFF	; 255
    8c40:	7f 7f       	andi	r23, 0xFF	; 255
    8c42:	7f 7f       	andi	r23, 0xFF	; 255
    8c44:	7f 7f       	andi	r23, 0xFF	; 255
    8c46:	7f 7f       	andi	r23, 0xFF	; 255
    8c48:	7f 7f       	andi	r23, 0xFF	; 255
    8c4a:	7f 7f       	andi	r23, 0xFF	; 255
    8c4c:	7f 7f       	andi	r23, 0xFF	; 255
    8c4e:	7f 7f       	andi	r23, 0xFF	; 255
    8c50:	7f 7f       	andi	r23, 0xFF	; 255
    8c52:	7f 7f       	andi	r23, 0xFF	; 255
    8c54:	7f 7f       	andi	r23, 0xFF	; 255
    8c56:	7f 7f       	andi	r23, 0xFF	; 255
    8c58:	7f 7f       	andi	r23, 0xFF	; 255
    8c5a:	7f 7f       	andi	r23, 0xFF	; 255
    8c5c:	7f 7f       	andi	r23, 0xFF	; 255
    8c5e:	7f 7f       	andi	r23, 0xFF	; 255
    8c60:	7f 7f       	andi	r23, 0xFF	; 255
    8c62:	7f 7f       	andi	r23, 0xFF	; 255
    8c64:	7f 7f       	andi	r23, 0xFF	; 255
    8c66:	7f 7f       	andi	r23, 0xFF	; 255
    8c68:	7f 7f       	andi	r23, 0xFF	; 255
    8c6a:	7f 7f       	andi	r23, 0xFF	; 255
    8c6c:	7f 7f       	andi	r23, 0xFF	; 255
    8c6e:	7f 7f       	andi	r23, 0xFF	; 255
    8c70:	7f 7f       	andi	r23, 0xFF	; 255
    8c72:	7f 7f       	andi	r23, 0xFF	; 255
    8c74:	7f 7f       	andi	r23, 0xFF	; 255
    8c76:	7f 7f       	andi	r23, 0xFF	; 255
    8c78:	7f 7f       	andi	r23, 0xFF	; 255
    8c7a:	7f 7c       	andi	r23, 0xCF	; 207
    8c7c:	78 71       	andi	r23, 0x18	; 24
    8c7e:	68 4c       	sbci	r22, 0xC8	; 200
    8c80:	2c 1c       	adc	r2, r12
    8c82:	12 0c       	add	r1, r2
    8c84:	0a 0b       	sbc	r16, r26
    8c86:	0a 05       	cpc	r16, r10
    8c88:	fd f3       	brhs	.-2      	; 0x8c88 <waves+0x988>
    8c8a:	e9 df       	rcall	.-46     	; 0x8c5e <waves+0x95e>
    8c8c:	d4 ca       	rjmp	.-2648   	; 0x8236 <steptable+0x12e>
    8c8e:	c0 b7       	in	r28, 0x30	; 48
    8c90:	ae a6       	std	Y+46, r10	; 0x2e
    8c92:	9e 97       	sbiw	r26, 0x2e	; 46
    8c94:	91 8b       	std	Z+17, r25	; 0x11
    8c96:	86 85       	ldd	r24, Z+14	; 0x0e
    8c98:	82 80       	ldd	r8, Z+2	; 0x02
    8c9a:	80 80       	ld	r8, Z
    8c9c:	80 80       	ld	r8, Z
    8c9e:	80 80       	ld	r8, Z
    8ca0:	80 80       	ld	r8, Z
    8ca2:	80 80       	ld	r8, Z
    8ca4:	80 80       	ld	r8, Z
    8ca6:	80 80       	ld	r8, Z
    8ca8:	80 80       	ld	r8, Z
    8caa:	80 80       	ld	r8, Z
    8cac:	80 80       	ld	r8, Z
    8cae:	80 80       	ld	r8, Z
    8cb0:	80 80       	ld	r8, Z
    8cb2:	80 80       	ld	r8, Z
    8cb4:	80 80       	ld	r8, Z
    8cb6:	80 80       	ld	r8, Z
    8cb8:	80 80       	ld	r8, Z
    8cba:	80 80       	ld	r8, Z
    8cbc:	80 80       	ld	r8, Z
    8cbe:	80 80       	ld	r8, Z
    8cc0:	80 80       	ld	r8, Z
    8cc2:	80 80       	ld	r8, Z
    8cc4:	80 80       	ld	r8, Z
    8cc6:	80 80       	ld	r8, Z
    8cc8:	80 80       	ld	r8, Z
    8cca:	80 80       	ld	r8, Z
    8ccc:	80 80       	ld	r8, Z
    8cce:	80 80       	ld	r8, Z
    8cd0:	80 80       	ld	r8, Z
    8cd2:	80 80       	ld	r8, Z
    8cd4:	80 80       	ld	r8, Z
    8cd6:	80 80       	ld	r8, Z
    8cd8:	80 80       	ld	r8, Z
    8cda:	80 80       	ld	r8, Z
    8cdc:	80 80       	ld	r8, Z
    8cde:	80 80       	ld	r8, Z
    8ce0:	80 80       	ld	r8, Z
    8ce2:	80 80       	ld	r8, Z
    8ce4:	80 80       	ld	r8, Z
    8ce6:	80 80       	ld	r8, Z
    8ce8:	80 80       	ld	r8, Z
    8cea:	80 80       	ld	r8, Z
    8cec:	80 80       	ld	r8, Z
    8cee:	80 80       	ld	r8, Z
    8cf0:	80 80       	ld	r8, Z
    8cf2:	80 80       	ld	r8, Z
    8cf4:	80 87       	std	Z+8, r24	; 0x08
    8cf6:	91 9d       	mul	r25, r1
    8cf8:	ac c4       	rjmp	.+2392   	; 0x9652 <init_default_high_scores+0x24>
    8cfa:	cb d4       	rcall	.+2454   	; 0x9692 <init_player_state+0x10>
    8cfc:	dd f2       	brhs	.-74     	; 0x8cb4 <waves+0x9b4>
    8cfe:	fa fa       	.word	0xfafa	; ????

00008d00 <RestoreBackground>:
	unsigned char free_tile_index, userRamTilesCount=0,userRamTilesCount_tmp=0;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=userRamTilesCount;i<free_tile_index;i++){
    8d00:	80 91 f3 0c 	lds	r24, 0x0CF3
    8d04:	90 91 7e 0d 	lds	r25, 0x0D7E
    8d08:	89 17       	cp	r24, r25
    8d0a:	78 f4       	brcc	.+30     	; 0x8d2a <RestoreBackground+0x2a>
			//vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
			*ram_tiles_restore[i].addr=ram_tiles_restore[i].tileIndex;
    8d0c:	e8 2f       	mov	r30, r24
    8d0e:	f0 e0       	ldi	r31, 0x00	; 0
    8d10:	9f 01       	movw	r18, r30
    8d12:	22 0f       	add	r18, r18
    8d14:	33 1f       	adc	r19, r19
    8d16:	e2 0f       	add	r30, r18
    8d18:	f3 1f       	adc	r31, r19
    8d1a:	e0 5b       	subi	r30, 0xB0	; 176
    8d1c:	f3 4f       	sbci	r31, 0xF3	; 243
    8d1e:	a0 81       	ld	r26, Z
    8d20:	b1 81       	ldd	r27, Z+1	; 0x01
    8d22:	92 81       	ldd	r25, Z+2	; 0x02
    8d24:	9c 93       	st	X, r25
	unsigned char free_tile_index, userRamTilesCount=0,userRamTilesCount_tmp=0;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=userRamTilesCount;i<free_tile_index;i++){
    8d26:	8f 5f       	subi	r24, 0xFF	; 255
    8d28:	ed cf       	rjmp	.-38     	; 0x8d04 <RestoreBackground+0x4>
			//vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
			*ram_tiles_restore[i].addr=ram_tiles_restore[i].tileIndex;
		}	
	}
    8d2a:	08 95       	ret

00008d2c <ProcessSprites>:
		}

	}
	*/

	void ProcessSprites(){
    8d2c:	2f 92       	push	r2
    8d2e:	3f 92       	push	r3
    8d30:	4f 92       	push	r4
    8d32:	5f 92       	push	r5
    8d34:	6f 92       	push	r6
    8d36:	7f 92       	push	r7
    8d38:	8f 92       	push	r8
    8d3a:	9f 92       	push	r9
    8d3c:	af 92       	push	r10
    8d3e:	bf 92       	push	r11
    8d40:	cf 92       	push	r12
    8d42:	df 92       	push	r13
    8d44:	ef 92       	push	r14
    8d46:	ff 92       	push	r15
    8d48:	0f 93       	push	r16
    8d4a:	1f 93       	push	r17
    8d4c:	cf 93       	push	r28
    8d4e:	df 93       	push	r29
    8d50:	00 d0       	rcall	.+0      	; 0x8d52 <ProcessSprites+0x26>
    8d52:	00 d0       	rcall	.+0      	; 0x8d54 <ProcessSprites+0x28>
    8d54:	cd b7       	in	r28, 0x3d	; 61
    8d56:	de b7       	in	r29, 0x3e	; 62
	
		unsigned char i,bx,by,dx,dy,bt,x,y,tx=1,ty=1,wx,wy;
		unsigned int ramPtr,ssx,ssy;

		if(!spritesOn) return;
    8d58:	80 91 00 05 	lds	r24, 0x0500
    8d5c:	88 23       	and	r24, r24
    8d5e:	09 f4       	brne	.+2      	; 0x8d62 <ProcessSprites+0x36>
    8d60:	e0 c0       	rjmp	.+448    	; 0x8f22 <ProcessSprites+0x1f6>

		userRamTilesCount=userRamTilesCount_tmp;
    8d62:	80 91 f2 0c 	lds	r24, 0x0CF2
    8d66:	80 93 f3 0c 	sts	0x0CF3, r24
		free_tile_index=userRamTilesCount;
    8d6a:	80 93 7e 0d 	sts	0x0D7E, r24
    8d6e:	e0 e1       	ldi	r30, 0x10	; 16
    8d70:	ce 2e       	mov	r12, r30
    8d72:	e5 e0       	ldi	r30, 0x05	; 5
    8d74:	de 2e       	mov	r13, r30
	
		for(i=0;i<MAX_SPRITES;i++){
    8d76:	71 2c       	mov	r7, r1
			bx=sprites[i].x;
    8d78:	f6 01       	movw	r30, r12
    8d7a:	20 81       	ld	r18, Z

			if(bx!=(SCREEN_TILES_H*TILE_WIDTH)){
    8d7c:	20 3e       	cpi	r18, 0xE0	; 224
    8d7e:	09 f4       	brne	.+2      	; 0x8d82 <ProcessSprites+0x56>
    8d80:	b1 c0       	rjmp	.+354    	; 0x8ee4 <ProcessSprites+0x1b8>
				//get tile's screen section offsets
				
				#if SCROLLING == 1
					ssx=sprites[i].x+Screen.scrollX;
    8d82:	80 91 b2 0c 	lds	r24, 0x0CB2
    8d86:	90 e0       	ldi	r25, 0x00	; 0
    8d88:	82 0f       	add	r24, r18
    8d8a:	91 1d       	adc	r25, r1
					ssy=sprites[i].y+Screen.scrollY;
    8d8c:	41 81       	ldd	r20, Z+1	; 0x01
    8d8e:	20 91 b3 0c 	lds	r18, 0x0CB3
    8d92:	30 e0       	ldi	r19, 0x00	; 0
    8d94:	24 0f       	add	r18, r20
    8d96:	31 1d       	adc	r19, r1

				tx=1;
				ty=1;

				//get the BG tiles that are overlapped by the sprite
				bx=ssx>>3;
    8d98:	ac 01       	movw	r20, r24
    8d9a:	73 e0       	ldi	r23, 0x03	; 3
    8d9c:	56 95       	lsr	r21
    8d9e:	47 95       	ror	r20
    8da0:	7a 95       	dec	r23
    8da2:	e1 f7       	brne	.-8      	; 0x8d9c <ProcessSprites+0x70>
    8da4:	64 2e       	mov	r6, r20
				dx=ssx&0x7;
    8da6:	87 70       	andi	r24, 0x07	; 7
				if(dx>0) tx++;
    8da8:	11 f0       	breq	.+4      	; 0x8dae <ProcessSprites+0x82>
    8daa:	92 e0       	ldi	r25, 0x02	; 2
    8dac:	01 c0       	rjmp	.+2      	; 0x8db0 <ProcessSprites+0x84>
   				#else
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
    8dae:	91 e0       	ldi	r25, 0x01	; 1
    8db0:	99 83       	std	Y+1, r25	; 0x01
				dx=ssx&0x7;
				if(dx>0) tx++;

				//by=ssy>>3;
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
    8db2:	a9 01       	movw	r20, r18
    8db4:	63 e0       	ldi	r22, 0x03	; 3
    8db6:	56 95       	lsr	r21
    8db8:	47 95       	ror	r20
    8dba:	6a 95       	dec	r22
    8dbc:	e1 f7       	brne	.-8      	; 0x8db6 <ProcessSprites+0x8a>
    8dbe:	54 2e       	mov	r5, r20
				dy=ssy%TILE_HEIGHT;
    8dc0:	27 70       	andi	r18, 0x07	; 7
				if(dy>0) ty++;			
    8dc2:	19 f0       	breq	.+6      	; 0x8dca <ProcessSprites+0x9e>
    8dc4:	52 e0       	ldi	r21, 0x02	; 2
    8dc6:	35 2e       	mov	r3, r21
    8dc8:	02 c0       	rjmp	.+4      	; 0x8dce <ProcessSprites+0xa2>
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
				ty=1;
    8dca:	33 24       	eor	r3, r3
    8dcc:	33 94       	inc	r3
								bt=free_tile_index;
								free_tile_index++;
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    8dce:	30 e0       	ldi	r19, 0x00	; 0
    8dd0:	32 2f       	mov	r19, r18
    8dd2:	22 27       	eor	r18, r18
    8dd4:	f9 01       	movw	r30, r18
    8dd6:	e8 0f       	add	r30, r24
    8dd8:	f1 1d       	adc	r31, r1
    8dda:	fc 83       	std	Y+4, r31	; 0x04
    8ddc:	eb 83       	std	Y+3, r30	; 0x03
    8dde:	e1 2c       	mov	r14, r1
    8de0:	f1 2c       	mov	r15, r1
    8de2:	be 2c       	mov	r11, r14
    8de4:	aa 24       	eor	r10, r10
    8de6:	26 2c       	mov	r2, r6
    8de8:	45 2c       	mov	r4, r5
    8dea:	4e 0c       	add	r4, r14
								    wy-=(VRAM_TILES_V*2);
							    }else if(wy>=VRAM_TILES_V){
							    	wy-=VRAM_TILES_V;
							    }
                            #else
                                if(wy>=(Screen.scrollHeight*2)){
    8dec:	84 2c       	mov	r8, r4
    8dee:	91 2c       	mov	r9, r1
    8df0:	84 2d       	mov	r24, r4
    8df2:	20 91 b4 0c 	lds	r18, 0x0CB4
    8df6:	42 2f       	mov	r20, r18
    8df8:	50 e0       	ldi	r21, 0x00	; 0
    8dfa:	44 0f       	add	r20, r20
    8dfc:	55 1f       	adc	r21, r21
    8dfe:	84 16       	cp	r8, r20
    8e00:	95 06       	cpc	r9, r21
    8e02:	14 f0       	brlt	.+4      	; 0x8e08 <ProcessSprites+0xdc>
								    wy-=(Screen.scrollHeight*2);
    8e04:	22 0f       	add	r18, r18
    8e06:	03 c0       	rjmp	.+6      	; 0x8e0e <ProcessSprites+0xe2>
							    }else if(wy>=Screen.scrollHeight){
    8e08:	42 16       	cp	r4, r18
    8e0a:	10 f0       	brcs	.+4      	; 0x8e10 <ProcessSprites+0xe4>
							    	wy-=Screen.scrollHeight;
    8e0c:	84 2d       	mov	r24, r4
    8e0e:	82 1b       	sub	r24, r18
							    }
                            #endif
							if(wx>=VRAM_TILES_H)wx-=VRAM_TILES_H; //should always be 32
    8e10:	ff e1       	ldi	r31, 0x1F	; 31
    8e12:	f2 15       	cp	r31, r2
    8e14:	18 f4       	brcc	.+6      	; 0x8e1c <ProcessSprites+0xf0>
    8e16:	00 ee       	ldi	r16, 0xE0	; 224
    8e18:	02 0d       	add	r16, r2
    8e1a:	01 c0       	rjmp	.+2      	; 0x8e1e <ProcessSprites+0xf2>
    8e1c:	02 2d       	mov	r16, r2

							#if SCROLLING == 0
								ramPtr=(wy*VRAM_TILES_H)+wx;
							#else

								ramPtr=((wy>>3)*256)+(wx*8)+(wy&7);	
    8e1e:	28 2f       	mov	r18, r24
    8e20:	26 95       	lsr	r18
    8e22:	26 95       	lsr	r18
    8e24:	26 95       	lsr	r18
    8e26:	10 e0       	ldi	r17, 0x00	; 0
    8e28:	40 e2       	ldi	r20, 0x20	; 32
    8e2a:	24 9f       	mul	r18, r20
    8e2c:	00 0d       	add	r16, r0
    8e2e:	11 1d       	adc	r17, r1
    8e30:	11 24       	eor	r1, r1
    8e32:	23 e0       	ldi	r18, 0x03	; 3
    8e34:	00 0f       	add	r16, r16
    8e36:	11 1f       	adc	r17, r17
    8e38:	2a 95       	dec	r18
    8e3a:	e1 f7       	brne	.-8      	; 0x8e34 <ProcessSprites+0x108>
    8e3c:	87 70       	andi	r24, 0x07	; 7
    8e3e:	08 0f       	add	r16, r24
    8e40:	11 1d       	adc	r17, r1

							#endif

							bt=vram[ramPtr];						
    8e42:	00 50       	subi	r16, 0x00	; 0
    8e44:	1f 4f       	sbci	r17, 0xFF	; 255
    8e46:	f8 01       	movw	r30, r16
    8e48:	70 81       	ld	r23, Z

							if( ((bt>=RAM_TILES_COUNT) | (bt<userRamTilesCount)) && (free_tile_index < RAM_TILES_COUNT) ){ //if no ram free ignore tile
    8e4a:	81 e0       	ldi	r24, 0x01	; 1
    8e4c:	7c 31       	cpi	r23, 0x1C	; 28
    8e4e:	08 f4       	brcc	.+2      	; 0x8e52 <ProcessSprites+0x126>
    8e50:	80 e0       	ldi	r24, 0x00	; 0
    8e52:	21 e0       	ldi	r18, 0x01	; 1
    8e54:	30 91 f3 0c 	lds	r19, 0x0CF3
    8e58:	73 17       	cp	r23, r19
    8e5a:	18 f0       	brcs	.+6      	; 0x8e62 <ProcessSprites+0x136>
    8e5c:	20 e0       	ldi	r18, 0x00	; 0
    8e5e:	88 23       	and	r24, r24
    8e60:	51 f1       	breq	.+84     	; 0x8eb6 <ProcessSprites+0x18a>
    8e62:	60 91 7e 0d 	lds	r22, 0x0D7E
    8e66:	6c 31       	cpi	r22, 0x1C	; 28
    8e68:	20 f5       	brcc	.+72     	; 0x8eb2 <ProcessSprites+0x186>
								if( bt>=RAM_TILES_COUNT ){
    8e6a:	88 23       	and	r24, r24
    8e6c:	31 f0       	breq	.+12     	; 0x8e7a <ProcessSprites+0x14e>
									//tile is mapped to flash. Copy it to next free RAM tile.
									CopyFlashTile(bt-RAM_TILES_COUNT,free_tile_index);
    8e6e:	84 ee       	ldi	r24, 0xE4	; 228
    8e70:	87 0f       	add	r24, r23
    8e72:	7a 83       	std	Y+2, r23	; 0x02
    8e74:	0e 94 40 36 	call	0x6c80	; 0x6c80 <CopyFlashTile>
    8e78:	06 c0       	rjmp	.+12     	; 0x8e86 <ProcessSprites+0x15a>
								}else if(bt<userRamTilesCount){
    8e7a:	22 23       	and	r18, r18
    8e7c:	29 f0       	breq	.+10     	; 0x8e88 <ProcessSprites+0x15c>
									//tile is a user ram tile. Copy it to next free RAM tile.
									CopyRamTile(bt,free_tile_index);
    8e7e:	87 2f       	mov	r24, r23
    8e80:	7a 83       	std	Y+2, r23	; 0x02
    8e82:	0e 94 cf 36 	call	0x6d9e	; 0x6d9e <CopyRamTile>
    8e86:	7a 81       	ldd	r23, Y+2	; 0x02
								}
								ram_tiles_restore[free_tile_index].addr=(&vram[ramPtr]);
    8e88:	80 91 7e 0d 	lds	r24, 0x0D7E
    8e8c:	e8 2f       	mov	r30, r24
    8e8e:	f0 e0       	ldi	r31, 0x00	; 0
    8e90:	9f 01       	movw	r18, r30
    8e92:	22 0f       	add	r18, r18
    8e94:	33 1f       	adc	r19, r19
    8e96:	e2 0f       	add	r30, r18
    8e98:	f3 1f       	adc	r31, r19
    8e9a:	e0 5b       	subi	r30, 0xB0	; 176
    8e9c:	f3 4f       	sbci	r31, 0xF3	; 243
    8e9e:	11 83       	std	Z+1, r17	; 0x01
    8ea0:	00 83       	st	Z, r16
								ram_tiles_restore[free_tile_index].tileIndex=bt;
    8ea2:	72 83       	std	Z+2, r23	; 0x02
								vram[ramPtr]=free_tile_index;
    8ea4:	f8 01       	movw	r30, r16
    8ea6:	80 83       	st	Z, r24
								bt=free_tile_index;
								free_tile_index++;
    8ea8:	21 e0       	ldi	r18, 0x01	; 1
    8eaa:	28 0f       	add	r18, r24
    8eac:	20 93 7e 0d 	sts	0x0D7E, r18
									CopyRamTile(bt,free_tile_index);
								}
								ram_tiles_restore[free_tile_index].addr=(&vram[ramPtr]);
								ram_tiles_restore[free_tile_index].tileIndex=bt;
								vram[ramPtr]=free_tile_index;
								bt=free_tile_index;
    8eb0:	78 2f       	mov	r23, r24
								free_tile_index++;
							}
				
							if(bt<RAM_TILES_COUNT){				
    8eb2:	7c 31       	cpi	r23, 0x1C	; 28
    8eb4:	38 f4       	brcc	.+14     	; 0x8ec4 <ProcessSprites+0x198>
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    8eb6:	2b 81       	ldd	r18, Y+3	; 0x03
    8eb8:	3c 81       	ldd	r19, Y+4	; 0x04
    8eba:	a5 01       	movw	r20, r10
    8ebc:	67 2f       	mov	r22, r23
    8ebe:	87 2d       	mov	r24, r7
    8ec0:	0e 94 5c 37 	call	0x6eb8	; 0x6eb8 <BlitSprite>
    8ec4:	ff ef       	ldi	r31, 0xFF	; 255
    8ec6:	af 1a       	sub	r10, r31
    8ec8:	bf 0a       	sbc	r11, r31
    8eca:	23 94       	inc	r2
    8ecc:	82 2d       	mov	r24, r2
    8ece:	86 19       	sub	r24, r6
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){

					for(x=0;x<tx;x++){
    8ed0:	99 81       	ldd	r25, Y+1	; 0x01
    8ed2:	89 17       	cp	r24, r25
    8ed4:	08 f4       	brcc	.+2      	; 0x8ed8 <ProcessSprites+0x1ac>
    8ed6:	8c cf       	rjmp	.-232    	; 0x8df0 <ProcessSprites+0xc4>
    8ed8:	ef ef       	ldi	r30, 0xFF	; 255
    8eda:	ee 1a       	sub	r14, r30
    8edc:	fe 0a       	sbc	r15, r30
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){
    8ede:	e3 14       	cp	r14, r3
    8ee0:	08 f4       	brcc	.+2      	; 0x8ee4 <ProcessSprites+0x1b8>
    8ee2:	7f cf       	rjmp	.-258    	; 0x8de2 <ProcessSprites+0xb6>
		if(!spritesOn) return;

		userRamTilesCount=userRamTilesCount_tmp;
		free_tile_index=userRamTilesCount;
	
		for(i=0;i<MAX_SPRITES;i++){
    8ee4:	73 94       	inc	r7
    8ee6:	f4 e0       	ldi	r31, 0x04	; 4
    8ee8:	cf 0e       	add	r12, r31
    8eea:	d1 1c       	adc	r13, r1
    8eec:	40 e1       	ldi	r20, 0x10	; 16
    8eee:	74 12       	cpse	r7, r20
    8ef0:	43 cf       	rjmp	.-378    	; 0x8d78 <ProcessSprites+0x4c>


		//restore BG tiles
		RestoreBackground();

	}
    8ef2:	0f 90       	pop	r0
    8ef4:	0f 90       	pop	r0
    8ef6:	0f 90       	pop	r0
    8ef8:	0f 90       	pop	r0
    8efa:	df 91       	pop	r29
    8efc:	cf 91       	pop	r28
    8efe:	1f 91       	pop	r17
    8f00:	0f 91       	pop	r16
    8f02:	ff 90       	pop	r15
    8f04:	ef 90       	pop	r14
    8f06:	df 90       	pop	r13
    8f08:	cf 90       	pop	r12
    8f0a:	bf 90       	pop	r11
    8f0c:	af 90       	pop	r10
    8f0e:	9f 90       	pop	r9
    8f10:	8f 90       	pop	r8
    8f12:	7f 90       	pop	r7
    8f14:	6f 90       	pop	r6
    8f16:	5f 90       	pop	r5
    8f18:	4f 90       	pop	r4
    8f1a:	3f 90       	pop	r3
    8f1c:	2f 90       	pop	r2
			}//	if(bx<(SCREEN_TILES_H*TILE_WIDTH))		
		}


		//restore BG tiles
		RestoreBackground();
    8f1e:	0c 94 80 46 	jmp	0x8d00	; 0x8d00 <RestoreBackground>

	}
    8f22:	0f 90       	pop	r0
    8f24:	0f 90       	pop	r0
    8f26:	0f 90       	pop	r0
    8f28:	0f 90       	pop	r0
    8f2a:	df 91       	pop	r29
    8f2c:	cf 91       	pop	r28
    8f2e:	1f 91       	pop	r17
    8f30:	0f 91       	pop	r16
    8f32:	ff 90       	pop	r15
    8f34:	ef 90       	pop	r14
    8f36:	df 90       	pop	r13
    8f38:	cf 90       	pop	r12
    8f3a:	bf 90       	pop	r11
    8f3c:	af 90       	pop	r10
    8f3e:	9f 90       	pop	r9
    8f40:	8f 90       	pop	r8
    8f42:	7f 90       	pop	r7
    8f44:	6f 90       	pop	r6
    8f46:	5f 90       	pop	r5
    8f48:	4f 90       	pop	r4
    8f4a:	3f 90       	pop	r3
    8f4c:	2f 90       	pop	r2
    8f4e:	08 95       	ret

00008f50 <Scroll>:

	#if SCROLLING == 1
		//Scroll the screen by the relative amount specified (+/-)
		//This function handles screen wrapping on the Y axis if VRAM_TILES_V is less than 32
		void Scroll(char dx,char dy){
		Screen.scrollY+=dy;
    8f50:	90 91 b3 0c 	lds	r25, 0x0CB3
    8f54:	96 0f       	add	r25, r22
    8f56:	90 93 b3 0c 	sts	0x0CB3, r25
		Screen.scrollX+=dx;
    8f5a:	20 91 b2 0c 	lds	r18, 0x0CB2
    8f5e:	82 0f       	add	r24, r18
    8f60:	80 93 b2 0c 	sts	0x0CB2, r24

		if(Screen.scrollHeight<32){
    8f64:	80 91 b4 0c 	lds	r24, 0x0CB4
    8f68:	80 32       	cpi	r24, 0x20	; 32
    8f6a:	b0 f4       	brcc	.+44     	; 0x8f98 <Scroll+0x48>

			if(Screen.scrollY>=(Screen.scrollHeight*TILE_HEIGHT)){
    8f6c:	29 2f       	mov	r18, r25
    8f6e:	30 e0       	ldi	r19, 0x00	; 0
    8f70:	78 e0       	ldi	r23, 0x08	; 8
    8f72:	87 9f       	mul	r24, r23
    8f74:	a0 01       	movw	r20, r0
    8f76:	11 24       	eor	r1, r1
    8f78:	24 17       	cp	r18, r20
    8f7a:	35 07       	cpc	r19, r21
    8f7c:	6c f0       	brlt	.+26     	; 0x8f98 <Scroll+0x48>
				if(dy>=0){	
    8f7e:	67 fd       	sbrc	r22, 7
    8f80:	05 c0       	rjmp	.+10     	; 0x8f8c <Scroll+0x3c>
					Screen.scrollY=(Screen.scrollY-(Screen.scrollHeight*TILE_HEIGHT));
    8f82:	28 ef       	ldi	r18, 0xF8	; 248
    8f84:	82 9f       	mul	r24, r18
    8f86:	90 0d       	add	r25, r0
    8f88:	11 24       	eor	r1, r1
    8f8a:	04 c0       	rjmp	.+8      	; 0x8f94 <Scroll+0x44>
				}else{
					Screen.scrollY=((Screen.scrollHeight*TILE_HEIGHT)-1)-(0xff-Screen.scrollY);
    8f8c:	78 e0       	ldi	r23, 0x08	; 8
    8f8e:	87 9f       	mul	r24, r23
    8f90:	90 0d       	add	r25, r0
    8f92:	11 24       	eor	r1, r1
    8f94:	90 93 b3 0c 	sts	0x0CB3, r25
    8f98:	08 95       	ret

00008f9a <InitializeVideoMode>:
		#endif	
	}


	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){
    8f9a:	e0 e1       	ldi	r30, 0x10	; 16
    8f9c:	f5 e0       	ldi	r31, 0x05	; 5

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
			sprites[i].x=(SCREEN_TILES_H*TILE_WIDTH);		
    8f9e:	80 ee       	ldi	r24, 0xE0	; 224
    8fa0:	80 83       	st	Z, r24
    8fa2:	34 96       	adiw	r30, 0x04	; 4

	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
    8fa4:	95 e0       	ldi	r25, 0x05	; 5
    8fa6:	e0 35       	cpi	r30, 0x50	; 80
    8fa8:	f9 07       	cpc	r31, r25
    8faa:	d1 f7       	brne	.-12     	; 0x8fa0 <InitializeVideoMode+0x6>
		
		#if SCROLLING == 1
		//	for(int i=0;i<(OVERLAY_LINES*VRAM_TILES_H);i++){
		//		overlay_vram[i]=RAM_TILES_COUNT;
		//	}
			Screen.scrollHeight=VRAM_TILES_V;
    8fac:	80 e2       	ldi	r24, 0x20	; 32
    8fae:	80 93 b4 0c 	sts	0x0CB4, r24
			Screen.overlayHeight=0;
    8fb2:	10 92 af 0c 	sts	0x0CAF, r1
    8fb6:	08 95       	ret

00008fb8 <DrawMap>:



//Draws a map of tile at the specified position
#if VRAM_ADDR_SIZE == 1
	void DrawMap(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
    8fb8:	2f 92       	push	r2
    8fba:	3f 92       	push	r3
    8fbc:	4f 92       	push	r4
    8fbe:	5f 92       	push	r5
    8fc0:	6f 92       	push	r6
    8fc2:	7f 92       	push	r7
    8fc4:	8f 92       	push	r8
    8fc6:	9f 92       	push	r9
    8fc8:	af 92       	push	r10
    8fca:	bf 92       	push	r11
    8fcc:	cf 92       	push	r12
    8fce:	df 92       	push	r13
    8fd0:	ef 92       	push	r14
    8fd2:	ff 92       	push	r15
    8fd4:	0f 93       	push	r16
    8fd6:	1f 93       	push	r17
    8fd8:	cf 93       	push	r28
    8fda:	df 93       	push	r29
    8fdc:	00 d0       	rcall	.+0      	; 0x8fde <DrawMap+0x26>
    8fde:	1f 92       	push	r1
    8fe0:	cd b7       	in	r28, 0x3d	; 61
    8fe2:	de b7       	in	r29, 0x3e	; 62
    8fe4:	28 2f       	mov	r18, r24
    8fe6:	3a 01       	movw	r6, r20
		//unsigned char i;
		u8 mapWidth=pgm_read_byte(&(map[0]));
    8fe8:	fa 01       	movw	r30, r20
    8fea:	24 90       	lpm	r2, Z
		u8 mapHeight=pgm_read_byte(&(map[1]));
    8fec:	31 96       	adiw	r30, 0x01	; 1
    8fee:	34 90       	lpm	r3, Z
    8ff0:	42 2c       	mov	r4, r2
    8ff2:	51 2c       	mov	r5, r1
		
		for(u8 dy=0;dy<mapHeight;dy++){
    8ff4:	e1 2c       	mov	r14, r1
    8ff6:	f1 2c       	mov	r15, r1
    8ff8:	00 e0       	ldi	r16, 0x00	; 0
    8ffa:	10 e0       	ldi	r17, 0x00	; 0
    8ffc:	c6 2e       	mov	r12, r22
    8ffe:	d1 2c       	mov	r13, r1
    9000:	03 15       	cp	r16, r3
    9002:	68 f5       	brcc	.+90     	; 0x905e <DrawMap+0xa6>
    9004:	1b 82       	std	Y+3, r1	; 0x03
    9006:	1a 82       	std	Y+2, r1	; 0x02
    9008:	57 01       	movw	r10, r14
    900a:	92 e0       	ldi	r25, 0x02	; 2
    900c:	a9 0e       	add	r10, r25
    900e:	b1 1c       	adc	r11, r1
    9010:	48 01       	movw	r8, r16
    9012:	8c 0c       	add	r8, r12
    9014:	9d 1c       	adc	r9, r13
			for(u8 dx=0;dx<mapWidth;dx++){			
    9016:	ea 81       	ldd	r30, Y+2	; 0x02
    9018:	e2 15       	cp	r30, r2
    901a:	e0 f4       	brcc	.+56     	; 0x9054 <DrawMap+0x9c>
    901c:	ea 81       	ldd	r30, Y+2	; 0x02
    901e:	fb 81       	ldd	r31, Y+3	; 0x03
    9020:	ea 0d       	add	r30, r10
    9022:	fb 1d       	adc	r31, r11
    9024:	e6 0d       	add	r30, r6
    9026:	f7 1d       	adc	r31, r7
				SetTile(x+dx,(y+dy)%Screen.scrollHeight,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
    9028:	e4 91       	lpm	r30, Z
    902a:	f0 e0       	ldi	r31, 0x00	; 0
    902c:	60 91 b4 0c 	lds	r22, 0x0CB4
    9030:	70 e0       	ldi	r23, 0x00	; 0
    9032:	c4 01       	movw	r24, r8
    9034:	0e 94 35 67 	call	0xce6a	; 0xce6a <__divmodhi4>
    9038:	af 01       	movw	r20, r30
    903a:	68 2f       	mov	r22, r24
    903c:	8a 81       	ldd	r24, Y+2	; 0x02
    903e:	82 0f       	add	r24, r18
    9040:	29 83       	std	Y+1, r18	; 0x01
    9042:	0e 94 8f 39 	call	0x731e	; 0x731e <SetTile>
    9046:	8a 81       	ldd	r24, Y+2	; 0x02
    9048:	9b 81       	ldd	r25, Y+3	; 0x03
    904a:	01 96       	adiw	r24, 0x01	; 1
    904c:	9b 83       	std	Y+3, r25	; 0x03
    904e:	8a 83       	std	Y+2, r24	; 0x02
    9050:	29 81       	ldd	r18, Y+1	; 0x01
    9052:	e1 cf       	rjmp	.-62     	; 0x9016 <DrawMap+0x5e>
    9054:	0f 5f       	subi	r16, 0xFF	; 255
    9056:	1f 4f       	sbci	r17, 0xFF	; 255
    9058:	e4 0c       	add	r14, r4
    905a:	f5 1c       	adc	r15, r5
    905c:	d1 cf       	rjmp	.-94     	; 0x9000 <DrawMap+0x48>
			}
		}

	}
    905e:	0f 90       	pop	r0
    9060:	0f 90       	pop	r0
    9062:	0f 90       	pop	r0
    9064:	df 91       	pop	r29
    9066:	cf 91       	pop	r28
    9068:	1f 91       	pop	r17
    906a:	0f 91       	pop	r16
    906c:	ff 90       	pop	r15
    906e:	ef 90       	pop	r14
    9070:	df 90       	pop	r13
    9072:	cf 90       	pop	r12
    9074:	bf 90       	pop	r11
    9076:	af 90       	pop	r10
    9078:	9f 90       	pop	r9
    907a:	8f 90       	pop	r8
    907c:	7f 90       	pop	r7
    907e:	6f 90       	pop	r6
    9080:	5f 90       	pop	r5
    9082:	4f 90       	pop	r4
    9084:	3f 90       	pop	r3
    9086:	2f 90       	pop	r2
    9088:	08 95       	ret

0000908a <WaitVsync>:
		}
	}
}

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
    908a:	0f 93       	push	r16
    908c:	1f 93       	push	r17
    908e:	cf 93       	push	r28
    9090:	df 93       	push	r29
    9092:	8c 01       	movw	r16, r24
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    9094:	c0 e0       	ldi	r28, 0x00	; 0
    9096:	d0 e0       	ldi	r29, 0x00	; 0
    9098:	c0 17       	cp	r28, r16
    909a:	d1 07       	cpc	r29, r17
    909c:	44 f4       	brge	.+16     	; 0x90ae <WaitVsync+0x24>
		while(!GetVsyncFlag());
    909e:	0e 94 a5 39 	call	0x734a	; 0x734a <GetVsyncFlag>
    90a2:	88 23       	and	r24, r24
    90a4:	e1 f3       	breq	.-8      	; 0x909e <WaitVsync+0x14>
		ClearVsyncFlag();		
    90a6:	0e 94 a9 39 	call	0x7352	; 0x7352 <ClearVsyncFlag>

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    90aa:	21 96       	adiw	r28, 0x01	; 1
    90ac:	f5 cf       	rjmp	.-22     	; 0x9098 <WaitVsync+0xe>
		while(!GetVsyncFlag());
		ClearVsyncFlag();		
	}
}
    90ae:	df 91       	pop	r29
    90b0:	cf 91       	pop	r28
    90b2:	1f 91       	pop	r17
    90b4:	0f 91       	pop	r16
    90b6:	08 95       	ret

000090b8 <DisplayLogo>:
	void DisplayLogo(){
	
		#if INTRO_LOGO !=0
			#define LOGO_X_POS 12
			
			InitMusicPlayer(logoInitPatches);
    90b8:	83 e2       	ldi	r24, 0x23	; 35
    90ba:	99 e0       	ldi	r25, 0x09	; 9
    90bc:	0e 94 57 3c 	call	0x78ae	; 0x78ae <InitMusicPlayer>
			SetTileTable(logo_tileset);
    90c0:	83 e2       	ldi	r24, 0x23	; 35
    90c2:	91 e0       	ldi	r25, 0x01	; 1
    90c4:	0e 94 a0 39 	call	0x7340	; 0x7340 <SetTileTable>
			
			//draw logo
			ClearVram();
    90c8:	0e 94 85 39 	call	0x730a	; 0x730a <ClearVram>
			WaitVsync(15);		
    90cc:	8f e0       	ldi	r24, 0x0F	; 15
    90ce:	90 e0       	ldi	r25, 0x00	; 0
    90d0:	0e 94 45 48 	call	0x908a	; 0x908a <WaitVsync>


			#if INTRO_LOGO == 1 
				TriggerFx(0,0xff,true);
    90d4:	41 e0       	ldi	r20, 0x01	; 1
    90d6:	6f ef       	ldi	r22, 0xFF	; 255
    90d8:	80 e0       	ldi	r24, 0x00	; 0
    90da:	0e 94 64 3d 	call	0x7ac8	; 0x7ac8 <TriggerFx>
			#endif

			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo);
    90de:	4d e0       	ldi	r20, 0x0D	; 13
    90e0:	51 e0       	ldi	r21, 0x01	; 1
    90e2:	6c e0       	ldi	r22, 0x0C	; 12
    90e4:	8c e0       	ldi	r24, 0x0C	; 12
    90e6:	0e 94 dc 47 	call	0x8fb8	; 0x8fb8 <DrawMap>
			WaitVsync(3);
    90ea:	83 e0       	ldi	r24, 0x03	; 3
    90ec:	90 e0       	ldi	r25, 0x00	; 0
    90ee:	0e 94 45 48 	call	0x908a	; 0x908a <WaitVsync>
			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo2);
    90f2:	4c ef       	ldi	r20, 0xFC	; 252
    90f4:	50 e0       	ldi	r21, 0x00	; 0
    90f6:	6c e0       	ldi	r22, 0x0C	; 12
    90f8:	8c e0       	ldi	r24, 0x0C	; 12
    90fa:	0e 94 dc 47 	call	0x8fb8	; 0x8fb8 <DrawMap>
			WaitVsync(2);
    90fe:	82 e0       	ldi	r24, 0x02	; 2
    9100:	90 e0       	ldi	r25, 0x00	; 0
    9102:	0e 94 45 48 	call	0x908a	; 0x908a <WaitVsync>
			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo);
    9106:	4d e0       	ldi	r20, 0x0D	; 13
    9108:	51 e0       	ldi	r21, 0x01	; 1
    910a:	6c e0       	ldi	r22, 0x0C	; 12
    910c:	8c e0       	ldi	r24, 0x0C	; 12
    910e:	0e 94 dc 47 	call	0x8fb8	; 0x8fb8 <DrawMap>
			#if INTRO_LOGO == 2
				SetMasterVolume(0xc0);
				TriggerNote(3,0,16,0xff);
			#endif 
		
			WaitVsync(65);
    9112:	81 e4       	ldi	r24, 0x41	; 65
    9114:	90 e0       	ldi	r25, 0x00	; 0
    9116:	0e 94 45 48 	call	0x908a	; 0x908a <WaitVsync>
			ClearVram();
    911a:	0e 94 85 39 	call	0x730a	; 0x730a <ClearVram>
			WaitVsync(20);
    911e:	84 e1       	ldi	r24, 0x14	; 20
    9120:	90 e0       	ldi	r25, 0x00	; 0
    9122:	0c 94 45 48 	jmp	0x908a	; 0x908a <WaitVsync>

00009126 <doFade>:
char fadeDir;
bool volatile fadeActive;


void doFade(unsigned char speed,bool blocking){
	fadeSpeed=speed;
    9126:	80 93 7c 0d 	sts	0x0D7C, r24
	currFadeFrame=0;
    912a:	10 92 80 0d 	sts	0x0D80, r1
	fadeActive=true;
    912e:	81 e0       	ldi	r24, 0x01	; 1
    9130:	80 93 7f 0d 	sts	0x0D7F, r24
		
	if(blocking){
    9134:	66 23       	and	r22, r22
    9136:	21 f0       	breq	.+8      	; 0x9140 <doFade+0x1a>
		while(fadeActive==true);
    9138:	80 91 7f 0d 	lds	r24, 0x0D7F
    913c:	81 11       	cpse	r24, r1
    913e:	fc cf       	rjmp	.-8      	; 0x9138 <doFade+0x12>
    9140:	08 95       	ret

00009142 <FadeIn>:
	
	
}

void FadeIn(unsigned char speed,bool blocking){
	if(speed==0){
    9142:	81 11       	cpse	r24, r1
    9144:	03 c0       	rjmp	.+6      	; 0x914c <FadeIn+0xa>
		DDRC=0xff;
    9146:	8f ef       	ldi	r24, 0xFF	; 255
    9148:	87 b9       	out	0x07, r24	; 7
		return;
    914a:	08 95       	ret
	}
	fadeStep=1;
    914c:	91 e0       	ldi	r25, 0x01	; 1
    914e:	90 93 81 0d 	sts	0x0D81, r25
	fadeDir=1;
    9152:	90 93 7d 0d 	sts	0x0D7D, r25
	doFade(speed,blocking);
    9156:	0c 94 93 48 	jmp	0x9126	; 0x9126 <doFade>

0000915a <FadeOut>:
}

void FadeOut(unsigned char speed,bool blocking){
	if(speed==0){
    915a:	81 11       	cpse	r24, r1
    915c:	02 c0       	rjmp	.+4      	; 0x9162 <FadeOut+0x8>
		DDRC=0;
    915e:	17 b8       	out	0x07, r1	; 7
		return;
    9160:	08 95       	ret
	}
	
	fadeStep=FADER_STEPS;
    9162:	9c e0       	ldi	r25, 0x0C	; 12
    9164:	90 93 81 0d 	sts	0x0D81, r25
	fadeDir=-1;
    9168:	9f ef       	ldi	r25, 0xFF	; 255
    916a:	90 93 7d 0d 	sts	0x0D7D, r25
	doFade(speed,blocking);
    916e:	0c 94 93 48 	jmp	0x9126	; 0x9126 <doFade>

00009172 <ProcessFading>:
}


//called by the kernel at each field end
void ProcessFading(){
	if(fadeActive==true){
    9172:	80 91 7f 0d 	lds	r24, 0x0D7F
    9176:	88 23       	and	r24, r24
    9178:	01 f1       	breq	.+64     	; 0x91ba <ProcessFading+0x48>
		if(currFadeFrame==0){
    917a:	80 91 80 0d 	lds	r24, 0x0D80
    917e:	81 11       	cpse	r24, r1
    9180:	19 c0       	rjmp	.+50     	; 0x91b4 <ProcessFading+0x42>
			currFadeFrame=fadeSpeed;
    9182:	80 91 7c 0d 	lds	r24, 0x0D7C
    9186:	80 93 80 0d 	sts	0x0D80, r24
			DDRC = pgm_read_byte(&(fader[fadeStep-1]));
    918a:	e0 91 81 0d 	lds	r30, 0x0D81
    918e:	f0 e0       	ldi	r31, 0x00	; 0
    9190:	e1 51       	subi	r30, 0x11	; 17
    9192:	ff 4f       	sbci	r31, 0xFF	; 255
    9194:	e4 91       	lpm	r30, Z
    9196:	e7 b9       	out	0x07, r30	; 7
			fadeStep+=fadeDir;
    9198:	90 91 7d 0d 	lds	r25, 0x0D7D
    919c:	80 91 81 0d 	lds	r24, 0x0D81
    91a0:	89 0f       	add	r24, r25
    91a2:	80 93 81 0d 	sts	0x0D81, r24
			if(fadeStep==0 || fadeStep==(FADER_STEPS+1)){
    91a6:	88 23       	and	r24, r24
    91a8:	11 f0       	breq	.+4      	; 0x91ae <ProcessFading+0x3c>
    91aa:	8d 30       	cpi	r24, 0x0D	; 13
    91ac:	31 f4       	brne	.+12     	; 0x91ba <ProcessFading+0x48>
				fadeActive=false;
    91ae:	10 92 7f 0d 	sts	0x0D7F, r1
    91b2:	08 95       	ret
			}
		}else{
			currFadeFrame--;
    91b4:	81 50       	subi	r24, 0x01	; 1
    91b6:	80 93 80 0d 	sts	0x0D80, r24
    91ba:	08 95       	ret

000091bc <VideoModeVsync>:
	}

	//Callback invoked during hsync
	void VideoModeVsync(){
		
		ProcessFading();
    91bc:	0e 94 b9 48 	call	0x9172	; 0x9172 <ProcessFading>
		ProcessSprites();
    91c0:	0c 94 96 46 	jmp	0x8d2c	; 0x8d2c <ProcessSprites>

000091c4 <LBGetNextFrame>:
	u8 reversing;
	char** anims;
} Animation;

char* LBGetNextFrame(Animation* anim)
{
    91c4:	fc 01       	movw	r30, r24
	anim->looped = 0;
    91c6:	14 82       	std	Z+4, r1	; 0x04
	anim->frame_count += 1;
    91c8:	93 81       	ldd	r25, Z+3	; 0x03
    91ca:	9f 5f       	subi	r25, 0xFF	; 255
    91cc:	93 83       	std	Z+3, r25	; 0x03
	if (anim->frame_count < anim->frames_per_anim)
    91ce:	42 81       	ldd	r20, Z+2	; 0x02
    91d0:	80 81       	ld	r24, Z
    91d2:	26 81       	ldd	r18, Z+6	; 0x06
    91d4:	37 81       	ldd	r19, Z+7	; 0x07
    91d6:	94 17       	cp	r25, r20
    91d8:	30 f4       	brcc	.+12     	; 0x91e6 <LBGetNextFrame+0x22>
	{
		return anim->anims[anim->current_anim];
    91da:	f9 01       	movw	r30, r18
    91dc:	e8 0f       	add	r30, r24
    91de:	f1 1d       	adc	r31, r1
    91e0:	e8 0f       	add	r30, r24
    91e2:	f1 1d       	adc	r31, r1
    91e4:	12 c0       	rjmp	.+36     	; 0x920a <LBGetNextFrame+0x46>
	}
	anim->frame_count = 0;
    91e6:	13 82       	std	Z+3, r1	; 0x03
	anim->current_anim = (anim->current_anim + 1) % anim->anim_count;
    91e8:	90 e0       	ldi	r25, 0x00	; 0
    91ea:	01 96       	adiw	r24, 0x01	; 1
    91ec:	61 81       	ldd	r22, Z+1	; 0x01
    91ee:	70 e0       	ldi	r23, 0x00	; 0
    91f0:	0e 94 35 67 	call	0xce6a	; 0xce6a <__divmodhi4>
    91f4:	80 83       	st	Z, r24
	if (anim->current_anim == 0) anim->looped = 1;
    91f6:	81 11       	cpse	r24, r1
    91f8:	02 c0       	rjmp	.+4      	; 0x91fe <LBGetNextFrame+0x3a>
    91fa:	41 e0       	ldi	r20, 0x01	; 1
    91fc:	44 83       	std	Z+4, r20	; 0x04
    91fe:	99 27       	eor	r25, r25
	return anim->anims[anim->current_anim];
    9200:	88 0f       	add	r24, r24
    9202:	99 1f       	adc	r25, r25
    9204:	f9 01       	movw	r30, r18
    9206:	e8 0f       	add	r30, r24
    9208:	f9 1f       	adc	r31, r25
    920a:	80 81       	ld	r24, Z
    920c:	91 81       	ldd	r25, Z+1	; 0x01
}
    920e:	08 95       	ret

00009210 <LBGetJoyPadState>:

void LBGetJoyPadState(JoyPadState* p, unsigned char index)
/*
 * Get the current joy pad button state for index controller
 */
{
    9210:	0f 93       	push	r16
    9212:	1f 93       	push	r17
    9214:	cf 93       	push	r28
    9216:	df 93       	push	r29
    9218:	1f 92       	push	r1
    921a:	cd b7       	in	r28, 0x3d	; 61
    921c:	de b7       	in	r29, 0x3e	; 62
    921e:	8c 01       	movw	r16, r24
	static unsigned int p_prev[2];

	p->held = ReadJoypad(index);
    9220:	86 2f       	mov	r24, r22
    9222:	69 83       	std	Y+1, r22	; 0x01
    9224:	0e 94 af 39 	call	0x735e	; 0x735e <ReadJoypad>
    9228:	d8 01       	movw	r26, r16
    922a:	15 96       	adiw	r26, 0x05	; 5
    922c:	9c 93       	st	X, r25
    922e:	8e 93       	st	-X, r24
    9230:	14 97       	sbiw	r26, 0x04	; 4
    9232:	69 81       	ldd	r22, Y+1	; 0x01
    9234:	e6 2f       	mov	r30, r22
    9236:	f0 e0       	ldi	r31, 0x00	; 0

	// Count held cycles
	if (p->held == 0 || p->held != p_prev[index])
    9238:	00 97       	sbiw	r24, 0x00	; 0
    923a:	51 f0       	breq	.+20     	; 0x9250 <LBGetJoyPadState+0x40>
    923c:	df 01       	movw	r26, r30
    923e:	aa 0f       	add	r26, r26
    9240:	bb 1f       	adc	r27, r27
    9242:	ac 50       	subi	r26, 0x0C	; 12
    9244:	b3 4f       	sbci	r27, 0xF3	; 243
    9246:	2d 91       	ld	r18, X+
    9248:	3c 91       	ld	r19, X
    924a:	82 17       	cp	r24, r18
    924c:	93 07       	cpc	r25, r19
    924e:	21 f0       	breq	.+8      	; 0x9258 <LBGetJoyPadState+0x48>
	    p->held_cycles = 0;
    9250:	d8 01       	movw	r26, r16
    9252:	16 96       	adiw	r26, 0x06	; 6
    9254:	1c 92       	st	X, r1
    9256:	07 c0       	rjmp	.+14     	; 0x9266 <LBGetJoyPadState+0x56>
	else
	    p->held_cycles += 1;
    9258:	d8 01       	movw	r26, r16
    925a:	16 96       	adiw	r26, 0x06	; 6
    925c:	2c 91       	ld	r18, X
    925e:	16 97       	sbiw	r26, 0x06	; 6
    9260:	2f 5f       	subi	r18, 0xFF	; 255
    9262:	16 96       	adiw	r26, 0x06	; 6
    9264:	2c 93       	st	X, r18

	p->pressed = p->held & (p->held ^ p_prev[index]);
    9266:	ee 0f       	add	r30, r30
    9268:	ff 1f       	adc	r31, r31
    926a:	ec 50       	subi	r30, 0x0C	; 12
    926c:	f3 4f       	sbci	r31, 0xF3	; 243
    926e:	20 81       	ld	r18, Z
    9270:	31 81       	ldd	r19, Z+1	; 0x01
    9272:	a9 01       	movw	r20, r18
    9274:	40 95       	com	r20
    9276:	50 95       	com	r21
    9278:	48 23       	and	r20, r24
    927a:	59 23       	and	r21, r25
    927c:	d8 01       	movw	r26, r16
    927e:	11 96       	adiw	r26, 0x01	; 1
    9280:	5c 93       	st	X, r21
    9282:	4e 93       	st	-X, r20
	p->released = p_prev[index] & (p->held ^ p_prev[index]);
    9284:	ac 01       	movw	r20, r24
    9286:	40 95       	com	r20
    9288:	50 95       	com	r21
    928a:	24 23       	and	r18, r20
    928c:	35 23       	and	r19, r21
    928e:	13 96       	adiw	r26, 0x03	; 3
    9290:	3c 93       	st	X, r19
    9292:	2e 93       	st	-X, r18
    9294:	12 97       	sbiw	r26, 0x02	; 2
	p_prev[index] = p->held;
    9296:	91 83       	std	Z+1, r25	; 0x01
    9298:	80 83       	st	Z, r24
}
    929a:	0f 90       	pop	r0
    929c:	df 91       	pop	r29
    929e:	cf 91       	pop	r28
    92a0:	1f 91       	pop	r17
    92a2:	0f 91       	pop	r16
    92a4:	08 95       	ret

000092a6 <LBPrintChar>:
	font_tiles_map = tiles_map;
}

void LBPrintChar(u8 x, u8 y, u8 code)
{
	if (code >= 48 && code <= 57)
    92a6:	90 ed       	ldi	r25, 0xD0	; 208
    92a8:	94 0f       	add	r25, r20
    92aa:	e0 91 82 0d 	lds	r30, 0x0D82
    92ae:	f0 91 83 0d 	lds	r31, 0x0D83
    92b2:	9a 30       	cpi	r25, 0x0A	; 10
    92b4:	38 f4       	brcc	.+14     	; 0x92c4 <LBPrintChar+0x1e>
	{
		SetTile(x, y, pgm_read_byte(&font_tiles_map[3+code-48]));
    92b6:	24 2f       	mov	r18, r20
    92b8:	30 e0       	ldi	r19, 0x00	; 0
    92ba:	2d 52       	subi	r18, 0x2D	; 45
    92bc:	31 09       	sbc	r19, r1
    92be:	e2 0f       	add	r30, r18
    92c0:	f3 1f       	adc	r31, r19
    92c2:	0c c0       	rjmp	.+24     	; 0x92dc <LBPrintChar+0x36>
	}
	else if (code >= 65 && code <= 90)
    92c4:	9f eb       	ldi	r25, 0xBF	; 191
    92c6:	94 0f       	add	r25, r20
    92c8:	9a 31       	cpi	r25, 0x1A	; 26
    92ca:	38 f4       	brcc	.+14     	; 0x92da <LBPrintChar+0x34>
	{
		SetTile(x, y, pgm_read_byte(&font_tiles_map[13+code-65]));
    92cc:	50 e0       	ldi	r21, 0x00	; 0
    92ce:	44 53       	subi	r20, 0x34	; 52
    92d0:	51 09       	sbc	r21, r1
    92d2:	e4 0f       	add	r30, r20
    92d4:	f5 1f       	adc	r31, r21
    92d6:	44 91       	lpm	r20, Z
    92d8:	03 c0       	rjmp	.+6      	; 0x92e0 <LBPrintChar+0x3a>
	}
	else
	{
		SetTile(x, y, pgm_read_byte(&font_tiles_map[2]));
    92da:	32 96       	adiw	r30, 0x02	; 2
    92dc:	e4 91       	lpm	r30, Z
    92de:	4e 2f       	mov	r20, r30
    92e0:	50 e0       	ldi	r21, 0x00	; 0
    92e2:	0c 94 8f 39 	jmp	0x731e	; 0x731e <SetTile>

000092e6 <LBPrint>:
	}
}

void LBPrint(u8 x, u8 y, char* value)
{
    92e6:	ff 92       	push	r15
    92e8:	0f 93       	push	r16
    92ea:	1f 93       	push	r17
    92ec:	cf 93       	push	r28
    92ee:	df 93       	push	r29
    92f0:	d8 2f       	mov	r29, r24
    92f2:	f6 2e       	mov	r15, r22
    92f4:	8a 01       	movw	r16, r20
	u8 i = 0;
    92f6:	c0 e0       	ldi	r28, 0x00	; 0
    92f8:	8c 2f       	mov	r24, r28
    92fa:	8d 0f       	add	r24, r29
	u8 code = 0;
	while ((code = pgm_read_byte(&value[i])))
    92fc:	f8 01       	movw	r30, r16
    92fe:	ec 0f       	add	r30, r28
    9300:	f1 1d       	adc	r31, r1
    9302:	44 91       	lpm	r20, Z
    9304:	44 23       	and	r20, r20
    9306:	29 f0       	breq	.+10     	; 0x9312 <LBPrint+0x2c>
	{
		LBPrintChar(x++, y, code);
    9308:	6f 2d       	mov	r22, r15
    930a:	0e 94 53 49 	call	0x92a6	; 0x92a6 <LBPrintChar>
		i++;
    930e:	cf 5f       	subi	r28, 0xFF	; 255
    9310:	f3 cf       	rjmp	.-26     	; 0x92f8 <LBPrint+0x12>
	}
}
    9312:	df 91       	pop	r29
    9314:	cf 91       	pop	r28
    9316:	1f 91       	pop	r17
    9318:	0f 91       	pop	r16
    931a:	ff 90       	pop	r15
    931c:	08 95       	ret

0000931e <LBPrintByte>:

void LBPrintByte(u8 x, u8 y, u8 value, char pad)
{
    931e:	df 92       	push	r13
    9320:	ef 92       	push	r14
    9322:	ff 92       	push	r15
    9324:	0f 93       	push	r16
    9326:	1f 93       	push	r17
    9328:	cf 93       	push	r28
    932a:	df 93       	push	r29
    932c:	1f 92       	push	r1
    932e:	cd b7       	in	r28, 0x3d	; 61
    9330:	de b7       	in	r29, 0x3e	; 62
    9332:	38 2f       	mov	r19, r24
    9334:	06 2f       	mov	r16, r22
    9336:	84 2f       	mov	r24, r20
    9338:	9d ef       	ldi	r25, 0xFD	; 253
    933a:	e9 2e       	mov	r14, r25
    933c:	e3 0e       	add	r14, r19
	for (u8 i = 0; i < 3; i++)
	{
		LBPrintChar(x--, y, value % 10 + 48);
    933e:	4a e0       	ldi	r20, 0x0A	; 10
    9340:	f4 2e       	mov	r15, r20
    9342:	1f ef       	ldi	r17, 0xFF	; 255
    9344:	13 0f       	add	r17, r19
    9346:	6f 2d       	mov	r22, r15
    9348:	0e 94 07 67 	call	0xce0e	; 0xce0e <__udivmodqi4>
    934c:	d8 2e       	mov	r13, r24
    934e:	40 e3       	ldi	r20, 0x30	; 48
    9350:	49 0f       	add	r20, r25
    9352:	60 2f       	mov	r22, r16
    9354:	83 2f       	mov	r24, r19
    9356:	29 83       	std	Y+1, r18	; 0x01
    9358:	0e 94 53 49 	call	0x92a6	; 0x92a6 <LBPrintChar>
		value /= 10;
    935c:	8d 2d       	mov	r24, r13
		if (!pad && value == 0) break;
    935e:	29 81       	ldd	r18, Y+1	; 0x01
    9360:	21 11       	cpse	r18, r1
    9362:	02 c0       	rjmp	.+4      	; 0x9368 <LBPrintByte+0x4a>
    9364:	dd 20       	and	r13, r13
    9366:	19 f0       	breq	.+6      	; 0x936e <LBPrintByte+0x50>
    9368:	31 2f       	mov	r19, r17
	}
}

void LBPrintByte(u8 x, u8 y, u8 value, char pad)
{
	for (u8 i = 0; i < 3; i++)
    936a:	1e 11       	cpse	r17, r14
    936c:	ea cf       	rjmp	.-44     	; 0x9342 <LBPrintByte+0x24>
	{
		LBPrintChar(x--, y, value % 10 + 48);
		value /= 10;
		if (!pad && value == 0) break;
	}
}
    936e:	0f 90       	pop	r0
    9370:	df 91       	pop	r29
    9372:	cf 91       	pop	r28
    9374:	1f 91       	pop	r17
    9376:	0f 91       	pop	r16
    9378:	ff 90       	pop	r15
    937a:	ef 90       	pop	r14
    937c:	df 90       	pop	r13
    937e:	08 95       	ret

00009380 <LBPrintInt>:

void LBPrintInt(u8 x, u8 y, u16 value, char pad)
{
    9380:	cf 92       	push	r12
    9382:	df 92       	push	r13
    9384:	ef 92       	push	r14
    9386:	ff 92       	push	r15
    9388:	0f 93       	push	r16
    938a:	1f 93       	push	r17
    938c:	cf 93       	push	r28
    938e:	df 93       	push	r29
    9390:	00 d0       	rcall	.+0      	; 0x9392 <LBPrintInt+0x12>
    9392:	cd b7       	in	r28, 0x3d	; 61
    9394:	de b7       	in	r29, 0x3e	; 62
    9396:	38 2f       	mov	r19, r24
    9398:	16 2f       	mov	r17, r22
    939a:	ca 01       	movw	r24, r20
    939c:	4b ef       	ldi	r20, 0xFB	; 251
    939e:	d4 2e       	mov	r13, r20
    93a0:	d3 0e       	add	r13, r19
	for (u8 i = 0; i < 5; i++)
	{
		LBPrintChar(x--, y, value % 10 + 48);
    93a2:	5a e0       	ldi	r21, 0x0A	; 10
    93a4:	e5 2e       	mov	r14, r21
    93a6:	f1 2c       	mov	r15, r1
    93a8:	cc 24       	eor	r12, r12
    93aa:	ca 94       	dec	r12
    93ac:	c3 0e       	add	r12, r19
    93ae:	b7 01       	movw	r22, r14
    93b0:	0e 94 21 67 	call	0xce42	; 0xce42 <__udivmodhi4>
    93b4:	06 2f       	mov	r16, r22
    93b6:	40 e3       	ldi	r20, 0x30	; 48
    93b8:	48 0f       	add	r20, r24
    93ba:	61 2f       	mov	r22, r17
    93bc:	83 2f       	mov	r24, r19
    93be:	29 83       	std	Y+1, r18	; 0x01
    93c0:	7a 83       	std	Y+2, r23	; 0x02
    93c2:	0e 94 53 49 	call	0x92a6	; 0x92a6 <LBPrintChar>
		value /= 10;
    93c6:	80 2f       	mov	r24, r16
    93c8:	7a 81       	ldd	r23, Y+2	; 0x02
    93ca:	97 2f       	mov	r25, r23
		if (!pad && value == 0) break;
    93cc:	29 81       	ldd	r18, Y+1	; 0x01
    93ce:	21 11       	cpse	r18, r1
    93d0:	02 c0       	rjmp	.+4      	; 0x93d6 <LBPrintInt+0x56>
    93d2:	00 97       	sbiw	r24, 0x00	; 0
    93d4:	19 f0       	breq	.+6      	; 0x93dc <LBPrintInt+0x5c>
    93d6:	3c 2d       	mov	r19, r12
	}
}

void LBPrintInt(u8 x, u8 y, u16 value, char pad)
{
	for (u8 i = 0; i < 5; i++)
    93d8:	cd 10       	cpse	r12, r13
    93da:	e6 cf       	rjmp	.-52     	; 0x93a8 <LBPrintInt+0x28>
	{
		LBPrintChar(x--, y, value % 10 + 48);
		value /= 10;
		if (!pad && value == 0) break;
	}
}
    93dc:	0f 90       	pop	r0
    93de:	0f 90       	pop	r0
    93e0:	df 91       	pop	r29
    93e2:	cf 91       	pop	r28
    93e4:	1f 91       	pop	r17
    93e6:	0f 91       	pop	r16
    93e8:	ff 90       	pop	r15
    93ea:	ef 90       	pop	r14
    93ec:	df 90       	pop	r13
    93ee:	cf 90       	pop	r12
    93f0:	08 95       	ret

000093f2 <LBCollides>:
	}
}

u8 LBCollides(u16 x1, u16 y1, u8 width1, u8 height1,
						 u16 x2, u16 y2, u8 width2, u8 height2)
{
    93f2:	af 92       	push	r10
    93f4:	cf 92       	push	r12
    93f6:	ef 92       	push	r14
    93f8:	ff 92       	push	r15
    93fa:	0f 93       	push	r16
    93fc:	1f 93       	push	r17
    93fe:	fc 01       	movw	r30, r24
	if (y1 + height1 <= y2) return 0;
    9400:	cb 01       	movw	r24, r22
    9402:	82 0f       	add	r24, r18
    9404:	91 1d       	adc	r25, r1
    9406:	e8 16       	cp	r14, r24
    9408:	f9 06       	cpc	r15, r25
    940a:	88 f4       	brcc	.+34     	; 0x942e <LBCollides+0x3c>
	if (y1 >= y2 + height2) return 0;
    940c:	ea 0c       	add	r14, r10
    940e:	f1 1c       	adc	r15, r1
    9410:	6e 15       	cp	r22, r14
    9412:	7f 05       	cpc	r23, r15
    9414:	60 f4       	brcc	.+24     	; 0x942e <LBCollides+0x3c>
	if (x1 + width1 <= x2) return 0;
    9416:	cf 01       	movw	r24, r30
    9418:	84 0f       	add	r24, r20
    941a:	91 1d       	adc	r25, r1
    941c:	08 17       	cp	r16, r24
    941e:	19 07       	cpc	r17, r25
    9420:	30 f4       	brcc	.+12     	; 0x942e <LBCollides+0x3c>
	if (x1 >= x2 + width2) return 0;
    9422:	0c 0d       	add	r16, r12
    9424:	11 1d       	adc	r17, r1
    9426:	81 e0       	ldi	r24, 0x01	; 1
    9428:	e0 17       	cp	r30, r16
    942a:	f1 07       	cpc	r31, r17
    942c:	08 f0       	brcs	.+2      	; 0x9430 <LBCollides+0x3e>
}

u8 LBCollides(u16 x1, u16 y1, u8 width1, u8 height1,
						 u16 x2, u16 y2, u8 width2, u8 height2)
{
	if (y1 + height1 <= y2) return 0;
    942e:	80 e0       	ldi	r24, 0x00	; 0
	if (y1 >= y2 + height2) return 0;
	if (x1 + width1 <= x2) return 0;
	if (x1 >= x2 + width2) return 0;
	return 1;
}
    9430:	1f 91       	pop	r17
    9432:	0f 91       	pop	r16
    9434:	ff 90       	pop	r15
    9436:	ef 90       	pop	r14
    9438:	cf 90       	pop	r12
    943a:	af 90       	pop	r10
    943c:	08 95       	ret

0000943e <LBRandom>:

u8 LBRandom(u8 from, u8 to)
/*
 * Return a random number between 'from' and 'to'.
 */
{
    943e:	cf 93       	push	r28
    9440:	df 93       	push	r29
    9442:	d8 2f       	mov	r29, r24
    9444:	c6 2f       	mov	r28, r22
	u16 tmp = GetPrngNumber(0) % 255;
    9446:	80 e0       	ldi	r24, 0x00	; 0
    9448:	90 e0       	ldi	r25, 0x00	; 0
    944a:	0e 94 7d 3b 	call	0x76fa	; 0x76fa <GetPrngNumber>
    944e:	6f ef       	ldi	r22, 0xFF	; 255
    9450:	70 e0       	ldi	r23, 0x00	; 0
    9452:	0e 94 21 67 	call	0xce42	; 0xce42 <__udivmodhi4>
	return (((u8)tmp) % (to - from)) + from;
    9456:	6c 2f       	mov	r22, r28
    9458:	70 e0       	ldi	r23, 0x00	; 0
    945a:	6d 1b       	sub	r22, r29
    945c:	71 09       	sbc	r23, r1
    945e:	0e 94 35 67 	call	0xce6a	; 0xce6a <__divmodhi4>
}
    9462:	8d 0f       	add	r24, r29
    9464:	df 91       	pop	r29
    9466:	cf 91       	pop	r28
    9468:	08 95       	ret

0000946a <LBWaitSeconds>:

void LBWaitSeconds(u8 seconds)
{
    946a:	cf 93       	push	r28
    946c:	df 93       	push	r29
    946e:	d8 2f       	mov	r29, r24
	for(u8 i = 0; i < seconds; i++)
    9470:	c0 e0       	ldi	r28, 0x00	; 0
    9472:	cd 17       	cp	r28, r29
    9474:	31 f0       	breq	.+12     	; 0x9482 <LBWaitSeconds+0x18>
	{
		WaitUs(65535);
    9476:	8f ef       	ldi	r24, 0xFF	; 255
    9478:	9f ef       	ldi	r25, 0xFF	; 255
    947a:	0e 94 bb 39 	call	0x7376	; 0x7376 <WaitUs>
	return (((u8)tmp) % (to - from)) + from;
}

void LBWaitSeconds(u8 seconds)
{
	for(u8 i = 0; i < seconds; i++)
    947e:	cf 5f       	subi	r28, 0xFF	; 255
    9480:	f8 cf       	rjmp	.-16     	; 0x9472 <LBWaitSeconds+0x8>
	{
		WaitUs(65535);
	}
}
    9482:	df 91       	pop	r29
    9484:	cf 91       	pop	r28
    9486:	08 95       	ret

00009488 <LBMapSprite>:

void LBMapSprite(u8 startSprite,const char *map,u8 spriteFlags)
{
    9488:	df 92       	push	r13
    948a:	ef 92       	push	r14
    948c:	ff 92       	push	r15
    948e:	0f 93       	push	r16
    9490:	1f 93       	push	r17
    9492:	cf 93       	push	r28
    9494:	df 93       	push	r29
    9496:	db 01       	movw	r26, r22
	u8 mapWidth=pgm_read_byte(&(map[0]));
    9498:	fb 01       	movw	r30, r22
    949a:	14 91       	lpm	r17, Z
	u8 mapHeight=pgm_read_byte(&(map[1]));
    949c:	31 96       	adiw	r30, 0x01	; 1
    949e:	64 91       	lpm	r22, Z
    94a0:	5f ef       	ldi	r21, 0xFF	; 255
    94a2:	51 0f       	add	r21, r17
	s8 x,y,dx,dy,t; 

	if(spriteFlags & SPRITE_FLIP_X)
    94a4:	24 2f       	mov	r18, r20
    94a6:	21 70       	andi	r18, 0x01	; 1
    94a8:	40 ff       	sbrs	r20, 0
    94aa:	04 c0       	rjmp	.+8      	; 0x94b4 <LBMapSprite+0x2c>
	{
		x=(mapWidth-1);
    94ac:	95 2f       	mov	r25, r21
		dx=-1;
    94ae:	ff 24       	eor	r15, r15
    94b0:	fa 94       	dec	r15
    94b2:	03 c0       	rjmp	.+6      	; 0x94ba <LBMapSprite+0x32>
	}
	else
	{
		x=0;
		dx=1;
    94b4:	ff 24       	eor	r15, r15
    94b6:	f3 94       	inc	r15
		x=(mapWidth-1);
		dx=-1;
	}
	else
	{
		x=0;
    94b8:	90 e0       	ldi	r25, 0x00	; 0
		dx=1;
	}

	if(spriteFlags & SPRITE_FLIP_Y)
    94ba:	41 ff       	sbrs	r20, 1
    94bc:	05 c0       	rjmp	.+10     	; 0x94c8 <LBMapSprite+0x40>
	{
		y=(mapHeight-1);
    94be:	7f ef       	ldi	r23, 0xFF	; 255
    94c0:	76 0f       	add	r23, r22
		dy=-1;
    94c2:	ee 24       	eor	r14, r14
    94c4:	ea 94       	dec	r14
    94c6:	03 c0       	rjmp	.+6      	; 0x94ce <LBMapSprite+0x46>
	}
	else
	{
		y=0;
		dy=1;
    94c8:	ee 24       	eor	r14, r14
    94ca:	e3 94       	inc	r14
		y=(mapHeight-1);
		dy=-1;
	}
	else
	{
		y=0;
    94cc:	70 e0       	ldi	r23, 0x00	; 0
    94ce:	21 11       	cpse	r18, r1
    94d0:	01 c0       	rjmp	.+2      	; 0x94d4 <LBMapSprite+0x4c>
    94d2:	50 e0       	ldi	r21, 0x00	; 0
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
    94d4:	00 e0       	ldi	r16, 0x00	; 0
    94d6:	06 17       	cp	r16, r22
    94d8:	09 f1       	breq	.+66     	; 0x951c <LBMapSprite+0x94>
	{
		for(u8 cx=0;cx<mapWidth;cx++)
		{
			t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    94da:	71 03       	mulsu	r23, r17
    94dc:	e0 01       	movw	r28, r0
    94de:	11 24       	eor	r1, r1
    94e0:	d8 2e       	mov	r13, r24
    94e2:	d1 0e       	add	r13, r17
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
	{
		for(u8 cx=0;cx<mapWidth;cx++)
    94e4:	8d 15       	cp	r24, r13
    94e6:	b1 f0       	breq	.+44     	; 0x9514 <LBMapSprite+0x8c>
		{
			t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    94e8:	9e 01       	movw	r18, r28
    94ea:	29 0f       	add	r18, r25
    94ec:	31 1d       	adc	r19, r1
    94ee:	97 fd       	sbrc	r25, 7
    94f0:	3a 95       	dec	r19
    94f2:	2e 5f       	subi	r18, 0xFE	; 254
    94f4:	3f 4f       	sbci	r19, 0xFF	; 255
    94f6:	fd 01       	movw	r30, r26
    94f8:	e2 0f       	add	r30, r18
    94fa:	f3 1f       	adc	r31, r19
    94fc:	24 91       	lpm	r18, Z
			extendedSprites[startSprite].tileIndex=t;
    94fe:	34 e0       	ldi	r19, 0x04	; 4
    9500:	83 9f       	mul	r24, r19
    9502:	f0 01       	movw	r30, r0
    9504:	11 24       	eor	r1, r1
    9506:	e5 55       	subi	r30, 0x55	; 85
    9508:	f0 4f       	sbci	r31, 0xF0	; 240
    950a:	22 83       	std	Z+2, r18	; 0x02
			extendedSprites[startSprite++].flags=spriteFlags;
    950c:	8f 5f       	subi	r24, 0xFF	; 255
    950e:	43 83       	std	Z+3, r20	; 0x03
    9510:	9f 0d       	add	r25, r15
    9512:	e8 cf       	rjmp	.-48     	; 0x94e4 <LBMapSprite+0x5c>
    9514:	7e 0d       	add	r23, r14
	{
		y=0;
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
    9516:	0f 5f       	subi	r16, 0xFF	; 255
			extendedSprites[startSprite].tileIndex=t;
			extendedSprites[startSprite++].flags=spriteFlags;
			x+=dx;
		}
		y+=dy;
		x=(spriteFlags & SPRITE_FLIP_X)?(mapWidth-1):0;
    9518:	95 2f       	mov	r25, r21
    951a:	dd cf       	rjmp	.-70     	; 0x94d6 <LBMapSprite+0x4e>
	}
}
    951c:	df 91       	pop	r29
    951e:	cf 91       	pop	r28
    9520:	1f 91       	pop	r17
    9522:	0f 91       	pop	r16
    9524:	ff 90       	pop	r15
    9526:	ef 90       	pop	r14
    9528:	df 90       	pop	r13
    952a:	08 95       	ret

0000952c <LBMoveSprite>:

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
    952c:	df 92       	push	r13
    952e:	ef 92       	push	r14
    9530:	ff 92       	push	r15
    9532:	0f 93       	push	r16
    9534:	1f 93       	push	r17
    9536:	cf 93       	push	r28
    9538:	df 93       	push	r29
		{
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
    953a:	a0 91 b4 0c 	lds	r26, 0x0CB4
    953e:	98 e0       	ldi	r25, 0x08	; 8
    9540:	a9 9f       	mul	r26, r25
    9542:	70 01       	movw	r14, r0
    9544:	11 24       	eor	r1, r1
    9546:	50 e0       	ldi	r21, 0x00	; 0
    9548:	38 ef       	ldi	r19, 0xF8	; 248
    954a:	a3 9f       	mul	r26, r19
    954c:	30 2d       	mov	r19, r0
    954e:	11 24       	eor	r1, r1
	}
}

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
	for(u8 dy=0;dy<height;dy++)
    9550:	70 e0       	ldi	r23, 0x00	; 0
    9552:	70 17       	cp	r23, r16
    9554:	09 f1       	breq	.+66     	; 0x9598 <LBMoveSprite+0x6c>
    9556:	d4 2e       	mov	r13, r20
    9558:	13 2f       	mov	r17, r19
    955a:	14 0f       	add	r17, r20
    955c:	b8 2f       	mov	r27, r24
    955e:	b2 0f       	add	r27, r18
    9560:	96 2f       	mov	r25, r22
	{
		for(u8 dx=0;dx<width;dx++)
    9562:	8b 17       	cp	r24, r27
    9564:	a9 f0       	breq	.+42     	; 0x9590 <LBMoveSprite+0x64>
		{
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
    9566:	c4 e0       	ldi	r28, 0x04	; 4
    9568:	8c 9f       	mul	r24, r28
    956a:	f0 01       	movw	r30, r0
    956c:	11 24       	eor	r1, r1
    956e:	ef 01       	movw	r28, r30
    9570:	c5 55       	subi	r28, 0x55	; 85
    9572:	d0 4f       	sbci	r29, 0xF0	; 240
    9574:	98 83       	st	Y, r25
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
    9576:	a0 32       	cpi	r26, 0x20	; 32
    9578:	28 f4       	brcc	.+10     	; 0x9584 <LBMoveSprite+0x58>
    957a:	e4 16       	cp	r14, r20
    957c:	f5 06       	cpc	r15, r21
    957e:	14 f4       	brge	.+4      	; 0x9584 <LBMoveSprite+0x58>
				{
					u8 tmp=(y+(TILE_HEIGHT*dy))-(Screen.scrollHeight*TILE_HEIGHT);
					extendedSprites[startSprite].y=tmp;
    9580:	19 83       	std	Y+1, r17	; 0x01
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
				{
    9582:	03 c0       	rjmp	.+6      	; 0x958a <LBMoveSprite+0x5e>
					u8 tmp=(y+(TILE_HEIGHT*dy))-(Screen.scrollHeight*TILE_HEIGHT);
					extendedSprites[startSprite].y=tmp;
				}
				else
				{
					extendedSprites[startSprite].y=y+(TILE_HEIGHT*dy);
    9584:	e5 55       	subi	r30, 0x55	; 85
    9586:	f0 4f       	sbci	r31, 0xF0	; 240
    9588:	d1 82       	std	Z+1, r13	; 0x01
				{
					extendedSprites[startSprite].y=y+(TILE_HEIGHT*dy);
				}
			#endif

			startSprite++;
    958a:	8f 5f       	subi	r24, 0xFF	; 255
    958c:	98 5f       	subi	r25, 0xF8	; 248
    958e:	e9 cf       	rjmp	.-46     	; 0x9562 <LBMoveSprite+0x36>
	}
}

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
	for(u8 dy=0;dy<height;dy++)
    9590:	7f 5f       	subi	r23, 0xFF	; 255
    9592:	48 5f       	subi	r20, 0xF8	; 248
    9594:	5f 4f       	sbci	r21, 0xFF	; 255
    9596:	dd cf       	rjmp	.-70     	; 0x9552 <LBMoveSprite+0x26>
			#endif

			startSprite++;
		}
	}	
}
    9598:	df 91       	pop	r29
    959a:	cf 91       	pop	r28
    959c:	1f 91       	pop	r17
    959e:	0f 91       	pop	r16
    95a0:	ff 90       	pop	r15
    95a2:	ef 90       	pop	r14
    95a4:	df 90       	pop	r13
    95a6:	08 95       	ret

000095a8 <LBRotateSprites>:

void LBRotateSprites()
{
    95a8:	80 e0       	ldi	r24, 0x00	; 0
    95aa:	90 e0       	ldi	r25, 0x00	; 0
    95ac:	dc 01       	movw	r26, r24
    95ae:	a5 55       	subi	r26, 0x55	; 85
    95b0:	b0 4f       	sbci	r27, 0xF0	; 240
    95b2:	fc 01       	movw	r30, r24
    95b4:	e0 5f       	subi	r30, 0xF0	; 240
    95b6:	fa 4f       	sbci	r31, 0xFA	; 250
	static u8 rotate_index = ROTATE_SPRITES_FROM;
	u8 mappedSpriteCount = MAX_EXTENDED_SPRITES;
	
	for (u8 i = 0; i < ROTATE_SPRITES_FROM; i++)
	{
		sprites[i].flags = extendedSprites[i].flags;
    95b8:	13 96       	adiw	r26, 0x03	; 3
    95ba:	2c 91       	ld	r18, X
    95bc:	13 97       	sbiw	r26, 0x03	; 3
    95be:	23 83       	std	Z+3, r18	; 0x03
		sprites[i].tileIndex = extendedSprites[i].tileIndex;
    95c0:	12 96       	adiw	r26, 0x02	; 2
    95c2:	2c 91       	ld	r18, X
    95c4:	12 97       	sbiw	r26, 0x02	; 2
    95c6:	22 83       	std	Z+2, r18	; 0x02
		sprites[i].x = extendedSprites[i].x;
    95c8:	2c 91       	ld	r18, X
    95ca:	20 83       	st	Z, r18
		sprites[i].y = extendedSprites[i].y;
    95cc:	11 96       	adiw	r26, 0x01	; 1
    95ce:	2c 91       	ld	r18, X
    95d0:	21 83       	std	Z+1, r18	; 0x01
    95d2:	04 96       	adiw	r24, 0x04	; 4
void LBRotateSprites()
{
	static u8 rotate_index = ROTATE_SPRITES_FROM;
	u8 mappedSpriteCount = MAX_EXTENDED_SPRITES;
	
	for (u8 i = 0; i < ROTATE_SPRITES_FROM; i++)
    95d4:	88 33       	cpi	r24, 0x38	; 56
    95d6:	91 05       	cpc	r25, r1
    95d8:	49 f7       	brne	.-46     	; 0x95ac <LBRotateSprites+0x4>
    95da:	80 91 01 05 	lds	r24, 0x0501
    95de:	20 e0       	ldi	r18, 0x00	; 0
    95e0:	30 e0       	ldi	r19, 0x00	; 0
		sprites[i].y = extendedSprites[i].y;
	}
	
	for (u8 i = ROTATE_SPRITES_FROM; i < MAX_SPRITES; i++)
	{
		sprites[i].flags = extendedSprites[rotate_index].flags;
    95e2:	94 e0       	ldi	r25, 0x04	; 4
    95e4:	89 9f       	mul	r24, r25
    95e6:	d0 01       	movw	r26, r0
    95e8:	11 24       	eor	r1, r1
    95ea:	a5 55       	subi	r26, 0x55	; 85
    95ec:	b0 4f       	sbci	r27, 0xF0	; 240
    95ee:	13 96       	adiw	r26, 0x03	; 3
    95f0:	9c 91       	ld	r25, X
    95f2:	13 97       	sbiw	r26, 0x03	; 3
    95f4:	f9 01       	movw	r30, r18
    95f6:	e0 5f       	subi	r30, 0xF0	; 240
    95f8:	fa 4f       	sbci	r31, 0xFA	; 250
    95fa:	93 af       	std	Z+59, r25	; 0x3b
		sprites[i].tileIndex = extendedSprites[rotate_index].tileIndex;
    95fc:	12 96       	adiw	r26, 0x02	; 2
    95fe:	9c 91       	ld	r25, X
    9600:	12 97       	sbiw	r26, 0x02	; 2
    9602:	92 af       	std	Z+58, r25	; 0x3a
		sprites[i].x = extendedSprites[rotate_index].x;
    9604:	9c 91       	ld	r25, X
    9606:	90 af       	std	Z+56, r25	; 0x38
		sprites[i].y = extendedSprites[rotate_index].y;
    9608:	11 96       	adiw	r26, 0x01	; 1
    960a:	9c 91       	ld	r25, X
    960c:	91 af       	std	Z+57, r25	; 0x39
		rotate_index += 1;
    960e:	8f 5f       	subi	r24, 0xFF	; 255
		if (rotate_index >= MAX_EXTENDED_SPRITES) rotate_index = ROTATE_SPRITES_FROM;
    9610:	84 31       	cpi	r24, 0x14	; 20
    9612:	08 f0       	brcs	.+2      	; 0x9616 <LBRotateSprites+0x6e>
    9614:	8e e0       	ldi	r24, 0x0E	; 14
    9616:	2c 5f       	subi	r18, 0xFC	; 252
    9618:	3f 4f       	sbci	r19, 0xFF	; 255
		sprites[i].tileIndex = extendedSprites[i].tileIndex;
		sprites[i].x = extendedSprites[i].x;
		sprites[i].y = extendedSprites[i].y;
	}
	
	for (u8 i = ROTATE_SPRITES_FROM; i < MAX_SPRITES; i++)
    961a:	28 30       	cpi	r18, 0x08	; 8
    961c:	31 05       	cpc	r19, r1
    961e:	09 f7       	brne	.-62     	; 0x95e2 <LBRotateSprites+0x3a>
    9620:	80 93 01 05 	sts	0x0501, r24
    9624:	08 95       	ret

00009626 <is_space>:
char* enemy_shot_anim[1];
char* expl_anim[3];

u8 is_space()
{
	return (game.current_level_index % 2 != 0);
    9626:	80 91 b7 0d 	lds	r24, 0x0DB7
}
    962a:	81 70       	andi	r24, 0x01	; 1
    962c:	08 95       	ret

0000962e <init_default_high_scores>:

void init_default_high_scores()
{
	scores.id = EEPROM_SCORES_ID;
    962e:	8c e8       	ldi	r24, 0x8C	; 140
    9630:	90 e0       	ldi	r25, 0x00	; 0
    9632:	90 93 87 0d 	sts	0x0D87, r25
    9636:	80 93 86 0d 	sts	0x0D86, r24
    963a:	80 e0       	ldi	r24, 0x00	; 0
    963c:	90 e0       	ldi	r25, 0x00	; 0
    963e:	fc 01       	movw	r30, r24
    9640:	ee 50       	subi	r30, 0x0E	; 14
    9642:	f5 4f       	sbci	r31, 0xF5	; 245
	for (u8 i = 0; i < 30; i++)
	{
		scores.data[i] = pgm_read_byte(&default_scores[i]);
    9644:	e4 91       	lpm	r30, Z
    9646:	dc 01       	movw	r26, r24
    9648:	aa 57       	subi	r26, 0x7A	; 122
    964a:	b2 4f       	sbci	r27, 0xF2	; 242
    964c:	12 96       	adiw	r26, 0x02	; 2
    964e:	ec 93       	st	X, r30
    9650:	01 96       	adiw	r24, 0x01	; 1
}

void init_default_high_scores()
{
	scores.id = EEPROM_SCORES_ID;
	for (u8 i = 0; i < 30; i++)
    9652:	8e 31       	cpi	r24, 0x1E	; 30
    9654:	91 05       	cpc	r25, r1
    9656:	99 f7       	brne	.-26     	; 0x963e <init_default_high_scores+0x10>
	{
		scores.data[i] = pgm_read_byte(&default_scores[i]);
	}
}
    9658:	08 95       	ret

0000965a <init_enemy_state>:

void init_enemy_state()
{
    965a:	80 e0       	ldi	r24, 0x00	; 0
    965c:	90 e0       	ldi	r25, 0x00	; 0
    965e:	9c 01       	movw	r18, r24
    9660:	2a 55       	subi	r18, 0x5A	; 90
    9662:	32 4f       	sbci	r19, 0xF2	; 242
    9664:	f9 01       	movw	r30, r18
    9666:	e7 54       	subi	r30, 0x47	; 71
    9668:	ff 4f       	sbci	r31, 0xFF	; 255
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		game.enemies[i].active = 0;
    966a:	10 82       	st	Z, r1
    966c:	7a 96       	adiw	r30, 0x1a	; 26
		for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
		{
			game.enemies[i].shot[j].active = 0;
    966e:	10 82       	st	Z, r1
    9670:	8e 5b       	subi	r24, 0xBE	; 190
    9672:	9f 4f       	sbci	r25, 0xFF	; 255
	}
}

void init_enemy_state()
{
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    9674:	8a 34       	cpi	r24, 0x4A	; 74
    9676:	21 e0       	ldi	r18, 0x01	; 1
    9678:	92 07       	cpc	r25, r18
    967a:	89 f7       	brne	.-30     	; 0x965e <init_enemy_state+0x4>
		for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
		{
			game.enemies[i].shot[j].active = 0;
		}
	}
	game.active_enemies = 0;
    967c:	10 92 c1 0d 	sts	0x0DC1, r1
    9680:	08 95       	ret

00009682 <init_player_state>:
}

void init_player_state()
{
	if (is_space())
    9682:	0e 94 13 4b 	call	0x9626	; 0x9626 <is_space>
    9686:	88 23       	and	r24, r24
    9688:	f9 f0       	breq	.+62     	; 0x96c8 <init_player_state+0x46>
	{
		game.player.width = 3;
    968a:	83 e0       	ldi	r24, 0x03	; 3
    968c:	80 93 d7 0d 	sts	0x0DD7, r24
		game.player.height = 1;
    9690:	81 e0       	ldi	r24, 0x01	; 1
    9692:	80 93 d8 0d 	sts	0x0DD8, r24
		game.player.run.anim_count = 2;
    9696:	82 e0       	ldi	r24, 0x02	; 2
    9698:	80 93 31 0e 	sts	0x0E31, r24
		game.player.run.frames_per_anim = EXPLOSION_FRAME_COUNT;
    969c:	85 e0       	ldi	r24, 0x05	; 5
    969e:	80 93 32 0e 	sts	0x0E32, r24
		game.player.run.anims = run_anim;
    96a2:	8b ef       	ldi	r24, 0xFB	; 251
    96a4:	9f e0       	ldi	r25, 0x0F	; 15
    96a6:	90 93 37 0e 	sts	0x0E37, r25
    96aa:	80 93 36 0e 	sts	0x0E36, r24
		game.player.run.anims[0] = (char*) map_hero_ship_0;
    96ae:	85 e8       	ldi	r24, 0x85	; 133
    96b0:	9d e2       	ldi	r25, 0x2D	; 45
    96b2:	90 93 fc 0f 	sts	0x0FFC, r25
    96b6:	80 93 fb 0f 	sts	0x0FFB, r24
		game.player.run.anims[1] = (char*) map_hero_ship_1;
    96ba:	80 e8       	ldi	r24, 0x80	; 128
    96bc:	9d e2       	ldi	r25, 0x2D	; 45
    96be:	90 93 fe 0f 	sts	0x0FFE, r25
    96c2:	80 93 fd 0f 	sts	0x0FFD, r24
    96c6:	2a c0       	rjmp	.+84     	; 0x971c <init_player_state+0x9a>
	}
	else
	{
		game.player.width = 2;
    96c8:	82 e0       	ldi	r24, 0x02	; 2
    96ca:	80 93 d7 0d 	sts	0x0DD7, r24
		game.player.height = 3;
    96ce:	83 e0       	ldi	r24, 0x03	; 3
    96d0:	80 93 d8 0d 	sts	0x0DD8, r24
		game.player.run.anim_count = 4;
    96d4:	84 e0       	ldi	r24, 0x04	; 4
    96d6:	80 93 31 0e 	sts	0x0E31, r24
		game.player.run.frames_per_anim = FRAMES_PER_RUN_CYCLE;
    96da:	8c e0       	ldi	r24, 0x0C	; 12
    96dc:	80 93 32 0e 	sts	0x0E32, r24
		game.player.run.anims = run_anim;
    96e0:	8b ef       	ldi	r24, 0xFB	; 251
    96e2:	9f e0       	ldi	r25, 0x0F	; 15
    96e4:	90 93 37 0e 	sts	0x0E37, r25
    96e8:	80 93 36 0e 	sts	0x0E36, r24
		game.player.run.anims[0] = (char*) map_hero_step_0;
    96ec:	8f ea       	ldi	r24, 0xAF	; 175
    96ee:	9d e2       	ldi	r25, 0x2D	; 45
    96f0:	90 93 fc 0f 	sts	0x0FFC, r25
    96f4:	80 93 fb 0f 	sts	0x0FFB, r24
		game.player.run.anims[1] = (char*) map_hero_step_1;
    96f8:	87 ea       	ldi	r24, 0xA7	; 167
    96fa:	9d e2       	ldi	r25, 0x2D	; 45
    96fc:	90 93 fe 0f 	sts	0x0FFE, r25
    9700:	80 93 fd 0f 	sts	0x0FFD, r24
		game.player.run.anims[2] = (char*) map_hero_step_2;
    9704:	8f e9       	ldi	r24, 0x9F	; 159
    9706:	9d e2       	ldi	r25, 0x2D	; 45
    9708:	90 93 00 10 	sts	0x1000, r25
    970c:	80 93 ff 0f 	sts	0x0FFF, r24
		game.player.run.anims[3] = (char*) map_hero_step_3;
    9710:	87 e9       	ldi	r24, 0x97	; 151
    9712:	9d e2       	ldi	r25, 0x2D	; 45
    9714:	90 93 02 10 	sts	0x1002, r25
    9718:	80 93 01 10 	sts	0x1001, r24
	}
	game.player.direction = D_RIGHT;
    971c:	81 e0       	ldi	r24, 0x01	; 1
    971e:	80 93 d6 0d 	sts	0x0DD6, r24
	game.player.flags = IDLE;
    9722:	98 e0       	ldi	r25, 0x08	; 8
    9724:	90 93 d4 0d 	sts	0x0DD4, r25
	game.player.shield = PLAYER_SHIELD;
    9728:	9a e0       	ldi	r25, 0x0A	; 10
    972a:	90 93 d9 0d 	sts	0x0DD9, r25
	game.player.idle.anim_count = 1;
    972e:	80 93 29 0e 	sts	0x0E29, r24
	game.player.idle.frames_per_anim = 1;
    9732:	80 93 2a 0e 	sts	0x0E2A, r24
	game.player.idle.anims = idle_anim;
    9736:	2d e0       	ldi	r18, 0x0D	; 13
    9738:	30 e1       	ldi	r19, 0x10	; 16
    973a:	30 93 2f 0e 	sts	0x0E2F, r19
    973e:	20 93 2e 0e 	sts	0x0E2E, r18
	game.player.idle.anims[0] = (char*) map_hero_idle;
    9742:	27 eb       	ldi	r18, 0xB7	; 183
    9744:	3d e2       	ldi	r19, 0x2D	; 45
    9746:	30 93 0e 10 	sts	0x100E, r19
    974a:	20 93 0d 10 	sts	0x100D, r18
	
	game.player.jump.anim_count = 1;
    974e:	80 93 39 0e 	sts	0x0E39, r24
	game.player.jump.frames_per_anim = 1;
    9752:	80 93 3a 0e 	sts	0x0E3A, r24
	game.player.jump.anims = jump_anim;
    9756:	24 e8       	ldi	r18, 0x84	; 132
    9758:	3d e0       	ldi	r19, 0x0D	; 13
    975a:	30 93 3f 0e 	sts	0x0E3F, r19
    975e:	20 93 3e 0e 	sts	0x0E3E, r18
	game.player.jump.anims[0] = (char*) map_hero_jump;
    9762:	2f e8       	ldi	r18, 0x8F	; 143
    9764:	3d e2       	ldi	r19, 0x2D	; 45
    9766:	30 93 85 0d 	sts	0x0D85, r19
    976a:	20 93 84 0d 	sts	0x0D84, r18
	
	game.player.prone.anim_count = 1;
    976e:	80 93 41 0e 	sts	0x0E41, r24
	game.player.prone.frames_per_anim = 1;
    9772:	80 93 42 0e 	sts	0x0E42, r24
	game.player.prone.anims = prone_anim;
    9776:	83 ea       	ldi	r24, 0xA3	; 163
    9778:	9f e0       	ldi	r25, 0x0F	; 15
    977a:	90 93 47 0e 	sts	0x0E47, r25
    977e:	80 93 46 0e 	sts	0x0E46, r24
	game.player.prone.anims[0] = (char*) map_hero_prone;
    9782:	8a e8       	ldi	r24, 0x8A	; 138
    9784:	9d e2       	ldi	r25, 0x2D	; 45
    9786:	90 93 a4 0f 	sts	0x0FA4, r25
    978a:	80 93 a3 0f 	sts	0x0FA3, r24
	
	game.player.expl.anim_count = 3;
    978e:	83 e0       	ldi	r24, 0x03	; 3
    9790:	80 93 49 0e 	sts	0x0E49, r24
	game.player.expl.frames_per_anim = EXPLOSION_FRAME_COUNT;
    9794:	85 e0       	ldi	r24, 0x05	; 5
    9796:	80 93 4a 0e 	sts	0x0E4A, r24
	game.player.expl.anims = expl_anim;
    979a:	87 e0       	ldi	r24, 0x07	; 7
    979c:	90 e1       	ldi	r25, 0x10	; 16
    979e:	90 93 4f 0e 	sts	0x0E4F, r25
    97a2:	80 93 4e 0e 	sts	0x0E4E, r24
	game.player.expl.anims[0] = (char*) map_explosion_0;
    97a6:	84 ed       	ldi	r24, 0xD4	; 212
    97a8:	9d e2       	ldi	r25, 0x2D	; 45
    97aa:	90 93 08 10 	sts	0x1008, r25
    97ae:	80 93 07 10 	sts	0x1007, r24
	game.player.expl.anims[1] = (char*) map_explosion_1;
    97b2:	81 ed       	ldi	r24, 0xD1	; 209
    97b4:	9d e2       	ldi	r25, 0x2D	; 45
    97b6:	90 93 0a 10 	sts	0x100A, r25
    97ba:	80 93 09 10 	sts	0x1009, r24
	game.player.expl.anims[2] = (char*) map_explosion_2;
    97be:	8e ec       	ldi	r24, 0xCE	; 206
    97c0:	9d e2       	ldi	r25, 0x2D	; 45
    97c2:	90 93 0c 10 	sts	0x100C, r25
    97c6:	80 93 0b 10 	sts	0x100B, r24
    97ca:	ee ee       	ldi	r30, 0xEE	; 238
    97cc:	fd e0       	ldi	r31, 0x0D	; 13
	
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
	{
		game.player.shot[i].hit_count = 1;
    97ce:	81 e0       	ldi	r24, 0x01	; 1
		game.player.shot[i].shot_type = BASIC_SHOT;
		game.player.shot[i].anim.anim_count = 1;
		game.player.shot[i].anim.frames_per_anim = 1;
		game.player.shot[i].anim.anims = shot_anim;
    97d0:	25 e0       	ldi	r18, 0x05	; 5
    97d2:	30 e1       	ldi	r19, 0x10	; 16
    97d4:	df 01       	movw	r26, r30
    97d6:	14 97       	sbiw	r26, 0x04	; 4
	game.player.expl.anims[1] = (char*) map_explosion_1;
	game.player.expl.anims[2] = (char*) map_explosion_2;
	
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
	{
		game.player.shot[i].hit_count = 1;
    97d8:	8c 93       	st	X, r24
    97da:	11 97       	sbiw	r26, 0x01	; 1
		game.player.shot[i].shot_type = BASIC_SHOT;
    97dc:	1c 92       	st	X, r1
    97de:	14 96       	adiw	r26, 0x04	; 4
		game.player.shot[i].anim.anim_count = 1;
    97e0:	8c 93       	st	X, r24
		game.player.shot[i].anim.frames_per_anim = 1;
    97e2:	80 83       	st	Z, r24
		game.player.shot[i].anim.anims = shot_anim;
    97e4:	35 83       	std	Z+5, r19	; 0x05
    97e6:	24 83       	std	Z+4, r18	; 0x04
    97e8:	7a 96       	adiw	r30, 0x1a	; 26
	game.player.expl.anims = expl_anim;
	game.player.expl.anims[0] = (char*) map_explosion_0;
	game.player.expl.anims[1] = (char*) map_explosion_1;
	game.player.expl.anims[2] = (char*) map_explosion_2;
	
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
    97ea:	9e e0       	ldi	r25, 0x0E	; 14
    97ec:	ec 33       	cpi	r30, 0x3C	; 60
    97ee:	f9 07       	cpc	r31, r25
    97f0:	89 f7       	brne	.-30     	; 0x97d4 <init_player_state+0x152>
    97f2:	89 e6       	ldi	r24, 0x69	; 105
    97f4:	9d e2       	ldi	r25, 0x2D	; 45
    97f6:	90 93 06 10 	sts	0x1006, r25
    97fa:	80 93 05 10 	sts	0x1005, r24
    97fe:	08 95       	ret

00009800 <init_enemy_shot>:
		game.player.shot[i].anim.anims[0] = (char*) map_hero_shot;
	}
}

void init_enemy_shot(u8 i, u16 x, u16 y)
{
    9800:	ef 92       	push	r14
    9802:	ff 92       	push	r15
    9804:	0f 93       	push	r16
    9806:	1f 93       	push	r17
    9808:	cf 93       	push	r28
    980a:	df 93       	push	r29
    980c:	8a 01       	movw	r16, r20
	game.enemies[i].expl.anim_count = 3;
    980e:	22 e4       	ldi	r18, 0x42	; 66
    9810:	82 9f       	mul	r24, r18
    9812:	c0 01       	movw	r24, r0
    9814:	11 24       	eor	r1, r1
    9816:	ec 01       	movw	r28, r24
    9818:	ca 55       	subi	r28, 0x5A	; 90
    981a:	d2 4f       	sbci	r29, 0xF2	; 242
    981c:	fe 01       	movw	r30, r28
    981e:	eb 51       	subi	r30, 0x1B	; 27
    9820:	ff 4f       	sbci	r31, 0xFF	; 255
    9822:	83 e0       	ldi	r24, 0x03	; 3
    9824:	80 83       	st	Z, r24
	game.enemies[i].expl.frames_per_anim = EXPLOSION_FRAME_COUNT;
    9826:	31 96       	adiw	r30, 0x01	; 1
    9828:	85 e0       	ldi	r24, 0x05	; 5
    982a:	80 83       	st	Z, r24
	game.enemies[i].expl.anims = expl_anim;
    982c:	de 01       	movw	r26, r28
    982e:	a6 51       	subi	r26, 0x16	; 22
    9830:	bf 4f       	sbci	r27, 0xFF	; 255
    9832:	e7 e0       	ldi	r30, 0x07	; 7
    9834:	f0 e1       	ldi	r31, 0x10	; 16
    9836:	11 96       	adiw	r26, 0x01	; 1
    9838:	fc 93       	st	X, r31
    983a:	ee 93       	st	-X, r30
	game.enemies[i].expl.anims[0] = (char*) map_explosion_0;
    983c:	84 ed       	ldi	r24, 0xD4	; 212
    983e:	9d e2       	ldi	r25, 0x2D	; 45
    9840:	91 83       	std	Z+1, r25	; 0x01
    9842:	80 83       	st	Z, r24
	game.enemies[i].expl.anims[1] = (char*) map_explosion_1;
    9844:	81 ed       	ldi	r24, 0xD1	; 209
    9846:	9d e2       	ldi	r25, 0x2D	; 45
    9848:	93 83       	std	Z+3, r25	; 0x03
    984a:	82 83       	std	Z+2, r24	; 0x02
	game.enemies[i].expl.anims[2] = (char*) map_explosion_2;
    984c:	8e ec       	ldi	r24, 0xCE	; 206
    984e:	9d e2       	ldi	r25, 0x2D	; 45
    9850:	95 83       	std	Z+5, r25	; 0x05
    9852:	84 83       	std	Z+4, r24	; 0x04
		
	for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
	{
		game.enemies[i].shot[j].hit_count = 1;
    9854:	fe 01       	movw	r30, r28
    9856:	ee 52       	subi	r30, 0x2E	; 46
    9858:	ff 4f       	sbci	r31, 0xFF	; 255
    985a:	81 e0       	ldi	r24, 0x01	; 1
    985c:	80 83       	st	Z, r24
		game.enemies[i].shot[j].active = 0;
    985e:	31 96       	adiw	r30, 0x01	; 1
    9860:	10 82       	st	Z, r1
		game.enemies[i].shot[j].shot_type = BASIC_ENEMY_SHOT;
    9862:	32 97       	sbiw	r30, 0x02	; 2
    9864:	80 83       	st	Z, r24
		game.enemies[i].shot[j].anim.anim_count = 1;
    9866:	34 96       	adiw	r30, 0x04	; 4
    9868:	80 83       	st	Z, r24
		game.enemies[i].shot[j].anim.frames_per_anim = 1;
    986a:	31 96       	adiw	r30, 0x01	; 1
    986c:	80 83       	st	Z, r24
		game.enemies[i].shot[j].anim.anims = enemy_shot_anim;
    986e:	50 97       	sbiw	r26, 0x10	; 16
    9870:	e3 e0       	ldi	r30, 0x03	; 3
    9872:	f0 e1       	ldi	r31, 0x10	; 16
    9874:	ed 93       	st	X+, r30
    9876:	fc 93       	st	X, r31
		game.enemies[i].shot[j].anim.anims[0] = (char*) map_enemy_shot;
    9878:	86 e6       	ldi	r24, 0x66	; 102
    987a:	9d e2       	ldi	r25, 0x2D	; 45
    987c:	91 83       	std	Z+1, r25	; 0x01
    987e:	80 83       	st	Z, r24
		game.enemies[i].shot[j].shared.vx = 0;
    9880:	fe 01       	movw	r30, r28
    9882:	e2 53       	subi	r30, 0x32	; 50
    9884:	ff 4f       	sbci	r31, 0xFF	; 255
    9886:	11 82       	std	Z+1, r1	; 0x01
    9888:	10 82       	st	Z, r1
		game.enemies[i].shot[j].shared.vy = 0;
    988a:	3c 97       	sbiw	r30, 0x0c	; 12
    988c:	10 82       	st	Z, r1
    988e:	11 82       	std	Z+1, r1	; 0x01
    9890:	12 82       	std	Z+2, r1	; 0x02
    9892:	13 82       	std	Z+3, r1	; 0x03
		game.enemies[i].shot[j].shared.x = x;
    9894:	7e 01       	movw	r14, r28
    9896:	86 ec       	ldi	r24, 0xC6	; 198
    9898:	e8 0e       	add	r14, r24
    989a:	f1 1c       	adc	r15, r1
    989c:	80 e0       	ldi	r24, 0x00	; 0
    989e:	90 e0       	ldi	r25, 0x00	; 0
    98a0:	0e 94 e4 67 	call	0xcfc8	; 0xcfc8 <__floatunsisf>
    98a4:	f7 01       	movw	r30, r14
    98a6:	60 83       	st	Z, r22
    98a8:	71 83       	std	Z+1, r23	; 0x01
    98aa:	82 83       	std	Z+2, r24	; 0x02
    98ac:	93 83       	std	Z+3, r25	; 0x03
		game.enemies[i].shot[j].shared.y = y;
    98ae:	c6 53       	subi	r28, 0x36	; 54
    98b0:	df 4f       	sbci	r29, 0xFF	; 255
    98b2:	b8 01       	movw	r22, r16
    98b4:	80 e0       	ldi	r24, 0x00	; 0
    98b6:	90 e0       	ldi	r25, 0x00	; 0
    98b8:	0e 94 e4 67 	call	0xcfc8	; 0xcfc8 <__floatunsisf>
    98bc:	68 83       	st	Y, r22
    98be:	79 83       	std	Y+1, r23	; 0x01
    98c0:	8a 83       	std	Y+2, r24	; 0x02
    98c2:	9b 83       	std	Y+3, r25	; 0x03
	}
}
    98c4:	df 91       	pop	r29
    98c6:	cf 91       	pop	r28
    98c8:	1f 91       	pop	r17
    98ca:	0f 91       	pop	r16
    98cc:	ff 90       	pop	r15
    98ce:	ef 90       	pop	r14
    98d0:	08 95       	ret

000098d2 <init_enemy_spider>:

void init_enemy_spider(u8 i, u16 x, u16 y)
{
    98d2:	af 92       	push	r10
    98d4:	bf 92       	push	r11
    98d6:	cf 92       	push	r12
    98d8:	df 92       	push	r13
    98da:	ef 92       	push	r14
    98dc:	ff 92       	push	r15
    98de:	1f 93       	push	r17
    98e0:	cf 93       	push	r28
    98e2:	df 93       	push	r29
    98e4:	18 2f       	mov	r17, r24
    98e6:	7b 01       	movw	r14, r22
    98e8:	6a 01       	movw	r12, r20
	game.enemies[i].active = 1;
    98ea:	82 e4       	ldi	r24, 0x42	; 66
    98ec:	18 9f       	mul	r17, r24
    98ee:	e0 01       	movw	r28, r0
    98f0:	11 24       	eor	r1, r1
    98f2:	ca 55       	subi	r28, 0x5A	; 90
    98f4:	d2 4f       	sbci	r29, 0xF2	; 242
    98f6:	fe 01       	movw	r30, r28
    98f8:	e7 54       	subi	r30, 0x47	; 71
    98fa:	ff 4f       	sbci	r31, 0xFF	; 255
    98fc:	91 e0       	ldi	r25, 0x01	; 1
    98fe:	90 83       	st	Z, r25
	game.enemies[i].direction = D_LEFT;
    9900:	32 96       	adiw	r30, 0x02	; 2
    9902:	10 82       	st	Z, r1
	game.enemies[i].flags = IDLE;
    9904:	31 97       	sbiw	r30, 0x01	; 1
    9906:	88 e0       	ldi	r24, 0x08	; 8
    9908:	80 83       	st	Z, r24
	game.enemies[i].width = 1;
    990a:	32 96       	adiw	r30, 0x02	; 2
    990c:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    990e:	31 96       	adiw	r30, 0x01	; 1
    9910:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_SPIDER;
    9912:	31 96       	adiw	r30, 0x01	; 1
    9914:	10 82       	st	Z, r1
	game.enemies[i].frame_count = 0;
    9916:	31 96       	adiw	r30, 0x01	; 1
    9918:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    991a:	31 96       	adiw	r30, 0x01	; 1
    991c:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_SPIDER_SHIELD;
    991e:	31 96       	adiw	r30, 0x01	; 1
    9920:	82 e0       	ldi	r24, 0x02	; 2
    9922:	80 83       	st	Z, r24
	
	game.enemies[i].anim.anim_count = 2;
    9924:	7c 96       	adiw	r30, 0x1c	; 28
    9926:	80 83       	st	Z, r24
	game.enemies[i].anim.frames_per_anim = SPIDER_FRAMES_PER_IDLE;
    9928:	31 96       	adiw	r30, 0x01	; 1
    992a:	8a e0       	ldi	r24, 0x0A	; 10
    992c:	80 83       	st	Z, r24
	game.enemies[i].anim.anims = spider_anim;
    992e:	de 01       	movw	r26, r28
    9930:	ae 51       	subi	r26, 0x1E	; 30
    9932:	bf 4f       	sbci	r27, 0xFF	; 255
    9934:	e5 ea       	ldi	r30, 0xA5	; 165
    9936:	ff e0       	ldi	r31, 0x0F	; 15
    9938:	ed 93       	st	X+, r30
    993a:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_spider_0;
    993c:	80 e6       	ldi	r24, 0x60	; 96
    993e:	9d e2       	ldi	r25, 0x2D	; 45
    9940:	91 83       	std	Z+1, r25	; 0x01
    9942:	80 83       	st	Z, r24
	game.enemies[i].anim.anims[1] = (char*) map_enemy_spider_1;
    9944:	8d e5       	ldi	r24, 0x5D	; 93
    9946:	9d e2       	ldi	r25, 0x2D	; 45
    9948:	93 83       	std	Z+3, r25	; 0x03
    994a:	82 83       	std	Z+2, r24	; 0x02
	game.enemies[i].shared.gravity = 0;
    994c:	fe 01       	movw	r30, r28
    994e:	e8 54       	subi	r30, 0x48	; 72
    9950:	ff 4f       	sbci	r31, 0xFF	; 255
    9952:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = 0;
    9954:	32 97       	sbiw	r30, 0x02	; 2
    9956:	11 82       	std	Z+1, r1	; 0x01
    9958:	10 82       	st	Z, r1
	game.enemies[i].shared.vy = 0;
    995a:	3c 97       	sbiw	r30, 0x0c	; 12
    995c:	10 82       	st	Z, r1
    995e:	11 82       	std	Z+1, r1	; 0x01
    9960:	12 82       	std	Z+2, r1	; 0x02
    9962:	13 82       	std	Z+3, r1	; 0x03
	game.enemies[i].shared.x = x;
    9964:	5e 01       	movw	r10, r28
    9966:	ee ea       	ldi	r30, 0xAE	; 174
    9968:	ae 0e       	add	r10, r30
    996a:	b1 1c       	adc	r11, r1
    996c:	80 e0       	ldi	r24, 0x00	; 0
    996e:	90 e0       	ldi	r25, 0x00	; 0
    9970:	0e 94 e4 67 	call	0xcfc8	; 0xcfc8 <__floatunsisf>
    9974:	f5 01       	movw	r30, r10
    9976:	60 83       	st	Z, r22
    9978:	71 83       	std	Z+1, r23	; 0x01
    997a:	82 83       	std	Z+2, r24	; 0x02
    997c:	93 83       	std	Z+3, r25	; 0x03
	game.enemies[i].shared.y = y;
    997e:	ce 54       	subi	r28, 0x4E	; 78
    9980:	df 4f       	sbci	r29, 0xFF	; 255
    9982:	b6 01       	movw	r22, r12
    9984:	80 e0       	ldi	r24, 0x00	; 0
    9986:	90 e0       	ldi	r25, 0x00	; 0
    9988:	0e 94 e4 67 	call	0xcfc8	; 0xcfc8 <__floatunsisf>
    998c:	68 83       	st	Y, r22
    998e:	79 83       	std	Y+1, r23	; 0x01
    9990:	8a 83       	std	Y+2, r24	; 0x02
    9992:	9b 83       	std	Y+3, r25	; 0x03
	
	init_enemy_shot(i, x, y);
    9994:	a6 01       	movw	r20, r12
    9996:	b7 01       	movw	r22, r14
    9998:	81 2f       	mov	r24, r17
}
    999a:	df 91       	pop	r29
    999c:	cf 91       	pop	r28
    999e:	1f 91       	pop	r17
    99a0:	ff 90       	pop	r15
    99a2:	ef 90       	pop	r14
    99a4:	df 90       	pop	r13
    99a6:	cf 90       	pop	r12
    99a8:	bf 90       	pop	r11
    99aa:	af 90       	pop	r10
	game.enemies[i].shared.vx = 0;
	game.enemies[i].shared.vy = 0;
	game.enemies[i].shared.x = x;
	game.enemies[i].shared.y = y;
	
	init_enemy_shot(i, x, y);
    99ac:	0c 94 00 4c 	jmp	0x9800	; 0x9800 <init_enemy_shot>

000099b0 <init_enemy_shark>:
}

void init_enemy_shark(u8 i, u16 x, u16 y)
{
    99b0:	af 92       	push	r10
    99b2:	bf 92       	push	r11
    99b4:	cf 92       	push	r12
    99b6:	df 92       	push	r13
    99b8:	ef 92       	push	r14
    99ba:	ff 92       	push	r15
    99bc:	1f 93       	push	r17
    99be:	cf 93       	push	r28
    99c0:	df 93       	push	r29
    99c2:	18 2f       	mov	r17, r24
    99c4:	7b 01       	movw	r14, r22
    99c6:	6a 01       	movw	r12, r20
	game.enemies[i].active = 1;
    99c8:	82 e4       	ldi	r24, 0x42	; 66
    99ca:	18 9f       	mul	r17, r24
    99cc:	e0 01       	movw	r28, r0
    99ce:	11 24       	eor	r1, r1
    99d0:	ca 55       	subi	r28, 0x5A	; 90
    99d2:	d2 4f       	sbci	r29, 0xF2	; 242
    99d4:	fe 01       	movw	r30, r28
    99d6:	e7 54       	subi	r30, 0x47	; 71
    99d8:	ff 4f       	sbci	r31, 0xFF	; 255
    99da:	91 e0       	ldi	r25, 0x01	; 1
    99dc:	90 83       	st	Z, r25
	game.enemies[i].width = 1;
    99de:	33 96       	adiw	r30, 0x03	; 3
    99e0:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    99e2:	31 96       	adiw	r30, 0x01	; 1
    99e4:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_SHARK;
    99e6:	31 96       	adiw	r30, 0x01	; 1
    99e8:	90 83       	st	Z, r25
	game.enemies[i].frame_count = 0;
    99ea:	31 96       	adiw	r30, 0x01	; 1
    99ec:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    99ee:	31 96       	adiw	r30, 0x01	; 1
    99f0:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_SHARK_SHIELD;
    99f2:	31 96       	adiw	r30, 0x01	; 1
    99f4:	84 e0       	ldi	r24, 0x04	; 4
    99f6:	80 83       	st	Z, r24
	
	game.enemies[i].anim.anim_count = 1;
    99f8:	7c 96       	adiw	r30, 0x1c	; 28
    99fa:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = 1;
    99fc:	31 96       	adiw	r30, 0x01	; 1
    99fe:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = shark_anim;
    9a00:	de 01       	movw	r26, r28
    9a02:	ae 51       	subi	r26, 0x1E	; 30
    9a04:	bf 4f       	sbci	r27, 0xFF	; 255
    9a06:	e9 ea       	ldi	r30, 0xA9	; 169
    9a08:	ff e0       	ldi	r31, 0x0F	; 15
    9a0a:	ed 93       	st	X+, r30
    9a0c:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_shark;
    9a0e:	83 e6       	ldi	r24, 0x63	; 99
    9a10:	9d e2       	ldi	r25, 0x2D	; 45
    9a12:	91 83       	std	Z+1, r25	; 0x01
    9a14:	80 83       	st	Z, r24
	game.enemies[i].shared.gravity = 0;
    9a16:	fe 01       	movw	r30, r28
    9a18:	e8 54       	subi	r30, 0x48	; 72
    9a1a:	ff 4f       	sbci	r31, 0xFF	; 255
    9a1c:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = SHARK_SPEED;
    9a1e:	32 97       	sbiw	r30, 0x02	; 2
    9a20:	84 e1       	ldi	r24, 0x14	; 20
    9a22:	90 e0       	ldi	r25, 0x00	; 0
    9a24:	91 83       	std	Z+1, r25	; 0x01
    9a26:	80 83       	st	Z, r24
	game.enemies[i].shared.vy = 0;
    9a28:	3c 97       	sbiw	r30, 0x0c	; 12
    9a2a:	10 82       	st	Z, r1
    9a2c:	11 82       	std	Z+1, r1	; 0x01
    9a2e:	12 82       	std	Z+2, r1	; 0x02
    9a30:	13 82       	std	Z+3, r1	; 0x03
	game.enemies[i].shared.x = x;
    9a32:	5e 01       	movw	r10, r28
    9a34:	ee ea       	ldi	r30, 0xAE	; 174
    9a36:	ae 0e       	add	r10, r30
    9a38:	b1 1c       	adc	r11, r1
    9a3a:	80 e0       	ldi	r24, 0x00	; 0
    9a3c:	90 e0       	ldi	r25, 0x00	; 0
    9a3e:	0e 94 e4 67 	call	0xcfc8	; 0xcfc8 <__floatunsisf>
    9a42:	f5 01       	movw	r30, r10
    9a44:	60 83       	st	Z, r22
    9a46:	71 83       	std	Z+1, r23	; 0x01
    9a48:	82 83       	std	Z+2, r24	; 0x02
    9a4a:	93 83       	std	Z+3, r25	; 0x03
	game.enemies[i].shared.y = y;
    9a4c:	ce 54       	subi	r28, 0x4E	; 78
    9a4e:	df 4f       	sbci	r29, 0xFF	; 255
    9a50:	b6 01       	movw	r22, r12
    9a52:	80 e0       	ldi	r24, 0x00	; 0
    9a54:	90 e0       	ldi	r25, 0x00	; 0
    9a56:	0e 94 e4 67 	call	0xcfc8	; 0xcfc8 <__floatunsisf>
    9a5a:	68 83       	st	Y, r22
    9a5c:	79 83       	std	Y+1, r23	; 0x01
    9a5e:	8a 83       	std	Y+2, r24	; 0x02
    9a60:	9b 83       	std	Y+3, r25	; 0x03
	
	init_enemy_shot(i, x, y);
    9a62:	a6 01       	movw	r20, r12
    9a64:	b7 01       	movw	r22, r14
    9a66:	81 2f       	mov	r24, r17
}
    9a68:	df 91       	pop	r29
    9a6a:	cf 91       	pop	r28
    9a6c:	1f 91       	pop	r17
    9a6e:	ff 90       	pop	r15
    9a70:	ef 90       	pop	r14
    9a72:	df 90       	pop	r13
    9a74:	cf 90       	pop	r12
    9a76:	bf 90       	pop	r11
    9a78:	af 90       	pop	r10
	game.enemies[i].shared.vx = SHARK_SPEED;
	game.enemies[i].shared.vy = 0;
	game.enemies[i].shared.x = x;
	game.enemies[i].shared.y = y;
	
	init_enemy_shot(i, x, y);
    9a7a:	0c 94 00 4c 	jmp	0x9800	; 0x9800 <init_enemy_shot>

00009a7e <load_eeprom>:
 *  0x01 = EEPROM_ERROR_INVALID_BLOCK
 *  0x02 = EEPROM_ERROR_FULL
 *  0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 *  0x04 = EEPROM_ERROR_NOT_FORMATTED
 */
{
    9a7e:	cf 93       	push	r28
    9a80:	df 93       	push	r29
    9a82:	ec 01       	movw	r28, r24
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
    9a84:	bc 01       	movw	r22, r24
    9a86:	88 81       	ld	r24, Y
    9a88:	99 81       	ldd	r25, Y+1	; 0x01
    9a8a:	0e 94 4a 3b 	call	0x7694	; 0x7694 <EepromReadBlock>
	if (status == 0x03)
    9a8e:	83 30       	cpi	r24, 0x03	; 3
    9a90:	29 f4       	brne	.+10     	; 0x9a9c <load_eeprom+0x1e>
	{
		status = EepromWriteBlock(block);
    9a92:	ce 01       	movw	r24, r28
	}
}
    9a94:	df 91       	pop	r29
    9a96:	cf 91       	pop	r28
{
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
	if (status == 0x03)
	{
		status = EepromWriteBlock(block);
    9a98:	0c 94 00 3b 	jmp	0x7600	; 0x7600 <EepromWriteBlock>
	}
}
    9a9c:	df 91       	pop	r29
    9a9e:	cf 91       	pop	r28
    9aa0:	08 95       	ret

00009aa2 <clear_overlay>:
{
	SetTile(x, y, level_tile);
}

void clear_overlay(u8 overlayHeight)
{
    9aa2:	1f 93       	push	r17
    9aa4:	cf 93       	push	r28
    9aa6:	df 93       	push	r29
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
    9aa8:	d0 e0       	ldi	r29, 0x00	; 0
    9aaa:	10 e2       	ldi	r17, 0x20	; 32
    9aac:	18 0f       	add	r17, r24
{
	SetTile(x, y, level_tile);
}

void clear_overlay(u8 overlayHeight)
{
    9aae:	c0 e2       	ldi	r28, 0x20	; 32
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
	{
		for(u8 y = 0; y < overlayHeight; y++)
    9ab0:	c1 17       	cp	r28, r17
    9ab2:	41 f0       	breq	.+16     	; 0x9ac4 <clear_overlay+0x22>
		{
			SetTile(x, VRAM_TILES_V+y, 0);
    9ab4:	40 e0       	ldi	r20, 0x00	; 0
    9ab6:	50 e0       	ldi	r21, 0x00	; 0
    9ab8:	6c 2f       	mov	r22, r28
    9aba:	8d 2f       	mov	r24, r29
    9abc:	0e 94 8f 39 	call	0x731e	; 0x731e <SetTile>
    9ac0:	cf 5f       	subi	r28, 0xFF	; 255
    9ac2:	f6 cf       	rjmp	.-20     	; 0x9ab0 <clear_overlay+0xe>
	SetTile(x, y, level_tile);
}

void clear_overlay(u8 overlayHeight)
{
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
    9ac4:	df 5f       	subi	r29, 0xFF	; 255
    9ac6:	dc 31       	cpi	r29, 0x1C	; 28
    9ac8:	91 f7       	brne	.-28     	; 0x9aae <clear_overlay+0xc>
		for(u8 y = 0; y < overlayHeight; y++)
		{
			SetTile(x, VRAM_TILES_V+y, 0);
		}
	}
}
    9aca:	df 91       	pop	r29
    9acc:	cf 91       	pop	r28
    9ace:	1f 91       	pop	r17
    9ad0:	08 95       	ret

00009ad2 <read_level_byte>:
#else
u8 read_level_byte(char* level_data, u16 index)
{
	// C Code
	
	u16 counter = index / 128 * 32;
    9ad2:	9b 01       	movw	r18, r22
    9ad4:	22 0f       	add	r18, r18
    9ad6:	23 2f       	mov	r18, r19
    9ad8:	22 1f       	adc	r18, r18
    9ada:	33 0b       	sbc	r19, r19
    9adc:	31 95       	neg	r19
	u16 cumulative_rlength = index / 128 * 128;
    9ade:	a9 01       	movw	r20, r18
    9ae0:	56 95       	lsr	r21
    9ae2:	54 2f       	mov	r21, r20
    9ae4:	44 27       	eor	r20, r20
    9ae6:	57 95       	ror	r21
    9ae8:	47 95       	ror	r20
#else
u8 read_level_byte(char* level_data, u16 index)
{
	// C Code
	
	u16 counter = index / 128 * 32;
    9aea:	f5 e0       	ldi	r31, 0x05	; 5
    9aec:	22 0f       	add	r18, r18
    9aee:	33 1f       	adc	r19, r19
    9af0:	fa 95       	dec	r31
    9af2:	e1 f7       	brne	.-8      	; 0x9aec <read_level_byte+0x1a>
    9af4:	28 0f       	add	r18, r24
    9af6:	39 1f       	adc	r19, r25
	u8 rlength = 0;
	u8 value = 0;
	
	while (1)
	{
		rlength = pgm_read_byte(&level_data[counter]);
    9af8:	f9 01       	movw	r30, r18
    9afa:	94 91       	lpm	r25, Z
    9afc:	31 96       	adiw	r30, 0x01	; 1
		value = pgm_read_byte(&level_data[counter+1]);
    9afe:	84 91       	lpm	r24, Z
		cumulative_rlength += rlength;
    9b00:	49 0f       	add	r20, r25
    9b02:	51 1d       	adc	r21, r1
    9b04:	2e 5f       	subi	r18, 0xFE	; 254
    9b06:	3f 4f       	sbci	r19, 0xFF	; 255
		if (cumulative_rlength > index)
    9b08:	64 17       	cp	r22, r20
    9b0a:	75 07       	cpc	r23, r21
    9b0c:	a8 f7       	brcc	.-22     	; 0x9af8 <read_level_byte+0x26>
	  [cntr] "+z" (counter),
	  [crln] "+r" (cumulative_rlength),
	  [rln]  "+r" (rlength),
	  [vl]   "=&r" (value));
	return value;*/
}
    9b0e:	08 95       	ret

00009b10 <get_level_tile>:
{
	return 21;
}

u8 get_level_tile(char* level_data, u16 x, u16 y)
{
    9b10:	ef 92       	push	r14
    9b12:	ff 92       	push	r15
    9b14:	0f 93       	push	r16
    9b16:	1f 93       	push	r17
    9b18:	cf 93       	push	r28
    9b1a:	df 93       	push	r29
    9b1c:	8c 01       	movw	r16, r24
    9b1e:	7b 01       	movw	r14, r22
    9b20:	ea 01       	movw	r28, r20
	if (is_space())
    9b22:	0e 94 13 4b 	call	0x9626	; 0x9626 <is_space>
    9b26:	b7 01       	movw	r22, r14
    9b28:	6e 5f       	subi	r22, 0xFE	; 254
    9b2a:	7f 4f       	sbci	r23, 0xFF	; 255
    9b2c:	88 23       	and	r24, r24
    9b2e:	41 f0       	breq	.+16     	; 0x9b40 <get_level_tile+0x30>
	{
		return read_level_byte(level_data, 2 + y*32+x);
    9b30:	85 e0       	ldi	r24, 0x05	; 5
    9b32:	cc 0f       	add	r28, r28
    9b34:	dd 1f       	adc	r29, r29
    9b36:	8a 95       	dec	r24
    9b38:	e1 f7       	brne	.-8      	; 0x9b32 <get_level_tile+0x22>
    9b3a:	6c 0f       	add	r22, r28
    9b3c:	7d 1f       	adc	r23, r29
    9b3e:	09 c0       	rjmp	.+18     	; 0x9b52 <get_level_tile+0x42>
	}
	return read_level_byte(level_data, 2 + y*game.level_width+x);
    9b40:	80 91 b8 0d 	lds	r24, 0x0DB8
    9b44:	8c 9f       	mul	r24, r28
    9b46:	a0 01       	movw	r20, r0
    9b48:	8d 9f       	mul	r24, r29
    9b4a:	50 0d       	add	r21, r0
    9b4c:	11 24       	eor	r1, r1
    9b4e:	64 0f       	add	r22, r20
    9b50:	75 1f       	adc	r23, r21
    9b52:	c8 01       	movw	r24, r16
}
    9b54:	df 91       	pop	r29
    9b56:	cf 91       	pop	r28
    9b58:	1f 91       	pop	r17
    9b5a:	0f 91       	pop	r16
    9b5c:	ff 90       	pop	r15
    9b5e:	ef 90       	pop	r14
{
	if (is_space())
	{
		return read_level_byte(level_data, 2 + y*32+x);
	}
	return read_level_byte(level_data, 2 + y*game.level_width+x);
    9b60:	0c 94 69 4d 	jmp	0x9ad2	; 0x9ad2 <read_level_byte>

00009b64 <render_camera_view>:
}

void render_camera_view()
{
    9b64:	6f 92       	push	r6
    9b66:	7f 92       	push	r7
    9b68:	8f 92       	push	r8
    9b6a:	9f 92       	push	r9
    9b6c:	af 92       	push	r10
    9b6e:	bf 92       	push	r11
    9b70:	cf 92       	push	r12
    9b72:	df 92       	push	r13
    9b74:	ef 92       	push	r14
    9b76:	ff 92       	push	r15
    9b78:	0f 93       	push	r16
    9b7a:	1f 93       	push	r17
    9b7c:	cf 93       	push	r28
    9b7e:	df 93       	push	r29
	u8 level_tile;
	u16 camara_x_tile = game.camera_x/8;
    9b80:	e0 90 aa 0d 	lds	r14, 0x0DAA
    9b84:	f0 90 ab 0d 	lds	r15, 0x0DAB
    9b88:	83 e0       	ldi	r24, 0x03	; 3
    9b8a:	f6 94       	lsr	r15
    9b8c:	e7 94       	ror	r14
    9b8e:	8a 95       	dec	r24
    9b90:	e1 f7       	brne	.-8      	; 0x9b8a <render_camera_view+0x26>
	u16 camera_y_tile = game.camera_y/8;
    9b92:	00 91 ac 0d 	lds	r16, 0x0DAC
    9b96:	10 91 ad 0d 	lds	r17, 0x0DAD
    9b9a:	93 e0       	ldi	r25, 0x03	; 3
    9b9c:	16 95       	lsr	r17
    9b9e:	07 95       	ror	r16
    9ba0:	9a 95       	dec	r25
    9ba2:	e1 f7       	brne	.-8      	; 0x9b9c <render_camera_view+0x38>
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    9ba4:	37 01       	movw	r6, r14
    9ba6:	67 01       	movw	r12, r14
    9ba8:	8c e1       	ldi	r24, 0x1C	; 28
    9baa:	c8 0e       	add	r12, r24
    9bac:	d1 1c       	adc	r13, r1
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    9bae:	58 01       	movw	r10, r16
    9bb0:	8a e1       	ldi	r24, 0x1A	; 26
    9bb2:	a8 0e       	add	r10, r24
    9bb4:	b1 1c       	adc	r11, r1
		{
			level_tile = get_level_tile(game.current_level, x, y);
			render_level_tile(level_tile, (Screen.scrollX / 8 + x - camara_x_tile) % 32, (Screen.scrollY / 8 + y - camera_y_tile) % 30);
    9bb6:	2e e1       	ldi	r18, 0x1E	; 30
    9bb8:	82 2e       	mov	r8, r18
    9bba:	91 2c       	mov	r9, r1
{
	u8 level_tile;
	u16 camara_x_tile = game.camera_x/8;
	u16 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    9bbc:	c6 14       	cp	r12, r6
    9bbe:	d7 04       	cpc	r13, r7
    9bc0:	70 f1       	brcs	.+92     	; 0x9c1e <render_camera_view+0xba>
    9bc2:	e8 01       	movw	r28, r16
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    9bc4:	ac 16       	cp	r10, r28
    9bc6:	bd 06       	cpc	r11, r29
    9bc8:	30 f1       	brcs	.+76     	; 0x9c16 <render_camera_view+0xb2>
		{
			level_tile = get_level_tile(game.current_level, x, y);
    9bca:	ae 01       	movw	r20, r28
    9bcc:	b3 01       	movw	r22, r6
    9bce:	80 91 a1 0f 	lds	r24, 0x0FA1
    9bd2:	90 91 a2 0f 	lds	r25, 0x0FA2
    9bd6:	0e 94 88 4d 	call	0x9b10	; 0x9b10 <get_level_tile>
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    9bda:	28 2f       	mov	r18, r24
    9bdc:	30 e0       	ldi	r19, 0x00	; 0
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
		{
			level_tile = get_level_tile(game.current_level, x, y);
			render_level_tile(level_tile, (Screen.scrollX / 8 + x - camara_x_tile) % 32, (Screen.scrollY / 8 + y - camera_y_tile) % 30);
    9bde:	80 91 b3 0c 	lds	r24, 0x0CB3
    9be2:	86 95       	lsr	r24
    9be4:	86 95       	lsr	r24
    9be6:	86 95       	lsr	r24
    9be8:	90 e0       	ldi	r25, 0x00	; 0
    9bea:	80 1b       	sub	r24, r16
    9bec:	91 0b       	sbc	r25, r17
    9bee:	8c 0f       	add	r24, r28
    9bf0:	9d 1f       	adc	r25, r29
    9bf2:	b4 01       	movw	r22, r8
    9bf4:	0e 94 21 67 	call	0xce42	; 0xce42 <__udivmodhi4>
    9bf8:	90 91 b2 0c 	lds	r25, 0x0CB2
    9bfc:	96 95       	lsr	r25
    9bfe:	96 95       	lsr	r25
    9c00:	96 95       	lsr	r25
    9c02:	9e 19       	sub	r25, r14
    9c04:	96 0d       	add	r25, r6
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    9c06:	a9 01       	movw	r20, r18
    9c08:	68 2f       	mov	r22, r24
    9c0a:	89 2f       	mov	r24, r25
    9c0c:	8f 71       	andi	r24, 0x1F	; 31
    9c0e:	0e 94 8f 39 	call	0x731e	; 0x731e <SetTile>
	u16 camara_x_tile = game.camera_x/8;
	u16 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    9c12:	21 96       	adiw	r28, 0x01	; 1
    9c14:	d7 cf       	rjmp	.-82     	; 0x9bc4 <render_camera_view+0x60>
{
	u8 level_tile;
	u16 camara_x_tile = game.camera_x/8;
	u16 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    9c16:	8f ef       	ldi	r24, 0xFF	; 255
    9c18:	68 1a       	sub	r6, r24
    9c1a:	78 0a       	sbc	r7, r24
    9c1c:	cf cf       	rjmp	.-98     	; 0x9bbc <render_camera_view+0x58>
		{
			level_tile = get_level_tile(game.current_level, x, y);
			render_level_tile(level_tile, (Screen.scrollX / 8 + x - camara_x_tile) % 32, (Screen.scrollY / 8 + y - camera_y_tile) % 30);
		}
	}
}
    9c1e:	df 91       	pop	r29
    9c20:	cf 91       	pop	r28
    9c22:	1f 91       	pop	r17
    9c24:	0f 91       	pop	r16
    9c26:	ff 90       	pop	r15
    9c28:	ef 90       	pop	r14
    9c2a:	df 90       	pop	r13
    9c2c:	cf 90       	pop	r12
    9c2e:	bf 90       	pop	r11
    9c30:	af 90       	pop	r10
    9c32:	9f 90       	pop	r9
    9c34:	8f 90       	pop	r8
    9c36:	7f 90       	pop	r7
    9c38:	6f 90       	pop	r6
    9c3a:	08 95       	ret

00009c3c <spawn_enemy>:

void spawn_enemy(u16 x, u16 y)
{
    9c3c:	ff 92       	push	r15
    9c3e:	0f 93       	push	r16
    9c40:	1f 93       	push	r17
    9c42:	cf 93       	push	r28
    9c44:	df 93       	push	r29
    9c46:	00 d0       	rcall	.+0      	; 0x9c48 <spawn_enemy+0xc>
    9c48:	cd b7       	in	r28, 0x3d	; 61
    9c4a:	de b7       	in	r29, 0x3e	; 62
    9c4c:	26 ea       	ldi	r18, 0xA6	; 166
    9c4e:	3d e0       	ldi	r19, 0x0D	; 13
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    9c50:	f1 2c       	mov	r15, r1
    9c52:	f9 01       	movw	r30, r18
    9c54:	e7 54       	subi	r30, 0x47	; 71
    9c56:	ff 4f       	sbci	r31, 0xFF	; 255
	{
		if (!game.enemies[i].active)
    9c58:	40 81       	ld	r20, Z
    9c5a:	41 11       	cpse	r20, r1
    9c5c:	1c c0       	rjmp	.+56     	; 0x9c96 <spawn_enemy+0x5a>
    9c5e:	7a 96       	adiw	r30, 0x1a	; 26
		{
			for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
			{
				if (!game.enemies[i].shot[j].active)
    9c60:	40 81       	ld	r20, Z
    9c62:	41 11       	cpse	r20, r1
    9c64:	18 c0       	rjmp	.+48     	; 0x9c96 <spawn_enemy+0x5a>
    9c66:	ab 01       	movw	r20, r22
    9c68:	8c 01       	movw	r16, r24
				{
					if (is_space())
    9c6a:	69 83       	std	Y+1, r22	; 0x01
    9c6c:	5a 83       	std	Y+2, r21	; 0x02
    9c6e:	0e 94 13 4b 	call	0x9626	; 0x9626 <is_space>
    9c72:	49 81       	ldd	r20, Y+1	; 0x01
    9c74:	5a 81       	ldd	r21, Y+2	; 0x02
					{
						init_enemy_shark(i, x, y);
    9c76:	b8 01       	movw	r22, r16
		{
			for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
			{
				if (!game.enemies[i].shot[j].active)
				{
					if (is_space())
    9c78:	88 23       	and	r24, r24
    9c7a:	21 f0       	breq	.+8      	; 0x9c84 <spawn_enemy+0x48>
					{
						init_enemy_shark(i, x, y);
    9c7c:	8f 2d       	mov	r24, r15
    9c7e:	0e 94 d8 4c 	call	0x99b0	; 0x99b0 <init_enemy_shark>
    9c82:	03 c0       	rjmp	.+6      	; 0x9c8a <spawn_enemy+0x4e>
					}
					else
					{
						init_enemy_spider(i, x, y);
    9c84:	8f 2d       	mov	r24, r15
    9c86:	0e 94 69 4c 	call	0x98d2	; 0x98d2 <init_enemy_spider>
					}
					game.active_enemies++;
    9c8a:	80 91 c1 0d 	lds	r24, 0x0DC1
    9c8e:	8f 5f       	subi	r24, 0xFF	; 255
    9c90:	80 93 c1 0d 	sts	0x0DC1, r24
    9c94:	06 c0       	rjmp	.+12     	; 0x9ca2 <spawn_enemy+0x66>
	}
}

void spawn_enemy(u16 x, u16 y)
{
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    9c96:	f3 94       	inc	r15
    9c98:	2e 5b       	subi	r18, 0xBE	; 190
    9c9a:	3f 4f       	sbci	r19, 0xFF	; 255
    9c9c:	45 e0       	ldi	r20, 0x05	; 5
    9c9e:	f4 12       	cpse	r15, r20
    9ca0:	d8 cf       	rjmp	.-80     	; 0x9c52 <spawn_enemy+0x16>
					return;
				}
			}
		}
	}
}
    9ca2:	0f 90       	pop	r0
    9ca4:	0f 90       	pop	r0
    9ca6:	df 91       	pop	r29
    9ca8:	cf 91       	pop	r28
    9caa:	1f 91       	pop	r17
    9cac:	0f 91       	pop	r16
    9cae:	ff 90       	pop	r15
    9cb0:	08 95       	ret

00009cb2 <solid_tile>:

u8 solid_tile(u8 level_tile)
{
	switch (level_tile)
    9cb2:	8b 30       	cpi	r24, 0x0B	; 11
    9cb4:	30 f4       	brcc	.+12     	; 0x9cc2 <solid_tile+0x10>
    9cb6:	89 30       	cpi	r24, 0x09	; 9
    9cb8:	48 f4       	brcc	.+18     	; 0x9ccc <solid_tile+0x1a>
    9cba:	81 50       	subi	r24, 0x01	; 1
    9cbc:	84 30       	cpi	r24, 0x04	; 4
    9cbe:	20 f4       	brcc	.+8      	; 0x9cc8 <solid_tile+0x16>
    9cc0:	05 c0       	rjmp	.+10     	; 0x9ccc <solid_tile+0x1a>
    9cc2:	8c 50       	subi	r24, 0x0C	; 12
    9cc4:	83 30       	cpi	r24, 0x03	; 3
    9cc6:	10 f0       	brcs	.+4      	; 0x9ccc <solid_tile+0x1a>
		case L_ICICLE_UP : return 1;
		case L_FIRE_BOTTOM : return 1;
		case L_FIRE_TOP : return 1;
		case L_FIRE_LAVA : return 1;
	}
	return 0;
    9cc8:	80 e0       	ldi	r24, 0x00	; 0
    9cca:	08 95       	ret

u8 solid_tile(u8 level_tile)
{
	switch (level_tile)
	{
		case L_ICE_MIDDLE : return 1;
    9ccc:	81 e0       	ldi	r24, 0x01	; 1
		case L_FIRE_BOTTOM : return 1;
		case L_FIRE_TOP : return 1;
		case L_FIRE_LAVA : return 1;
	}
	return 0;
}
    9cce:	08 95       	ret

00009cd0 <append_tile_column>:
	}
	return 0;
}

void append_tile_column()
{
    9cd0:	cf 92       	push	r12
    9cd2:	df 92       	push	r13
    9cd4:	ef 92       	push	r14
    9cd6:	ff 92       	push	r15
    9cd8:	0f 93       	push	r16
    9cda:	1f 93       	push	r17
    9cdc:	cf 93       	push	r28
    9cde:	df 93       	push	r29
	u8 enemy_spawned = 0;
	u8 level_tile;
	u8 rndom = LBRandom(0, CAMERA_HEIGHT-1)*8;
    9ce0:	69 e1       	ldi	r22, 0x19	; 25
    9ce2:	80 e0       	ldi	r24, 0x00	; 0
    9ce4:	0e 94 1f 4a 	call	0x943e	; 0x943e <LBRandom>
    9ce8:	88 0f       	add	r24, r24
    9cea:	88 0f       	add	r24, r24
    9cec:	88 0f       	add	r24, r24

	game.column_count++;
    9cee:	20 91 b2 0d 	lds	r18, 0x0DB2
    9cf2:	30 91 b3 0d 	lds	r19, 0x0DB3
    9cf6:	2f 5f       	subi	r18, 0xFF	; 255
    9cf8:	3f 4f       	sbci	r19, 0xFF	; 255
    9cfa:	30 93 b3 0d 	sts	0x0DB3, r19
    9cfe:	20 93 b2 0d 	sts	0x0DB2, r18
    9d02:	c0 e0       	ldi	r28, 0x00	; 0
    9d04:	d0 e0       	ldi	r29, 0x00	; 0
	return 0;
}

void append_tile_column()
{
	u8 enemy_spawned = 0;
    9d06:	d1 2c       	mov	r13, r1

	game.column_count++;
    for (u8 y = 0; y <= CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
    9d08:	3e e1       	ldi	r19, 0x1E	; 30
    9d0a:	e3 2e       	mov	r14, r19
    9d0c:	f1 2c       	mov	r15, r1
		if (game.column_count % game.spawn_rate == game.spawn_rate - 1 && game.active_enemies < MAX_ENEMIES && !enemy_spawned)
		{
			if (is_space())
			{
				spawn_enemy(game.camera_x+CAMERA_WIDTH*8, rndom);
    9d0e:	08 2f       	mov	r16, r24
    9d10:	10 e0       	ldi	r17, 0x00	; 0
	u8 rndom = LBRandom(0, CAMERA_HEIGHT-1)*8;

	game.column_count++;
    for (u8 y = 0; y <= CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
    9d12:	40 91 ac 0d 	lds	r20, 0x0DAC
    9d16:	50 91 ad 0d 	lds	r21, 0x0DAD
    9d1a:	23 e0       	ldi	r18, 0x03	; 3
    9d1c:	56 95       	lsr	r21
    9d1e:	47 95       	ror	r20
    9d20:	2a 95       	dec	r18
    9d22:	e1 f7       	brne	.-8      	; 0x9d1c <append_tile_column+0x4c>
    9d24:	4c 0f       	add	r20, r28
    9d26:	5d 1f       	adc	r21, r29
    9d28:	60 91 a6 0d 	lds	r22, 0x0DA6
    9d2c:	70 91 a7 0d 	lds	r23, 0x0DA7
    9d30:	80 91 a1 0f 	lds	r24, 0x0FA1
    9d34:	90 91 a2 0f 	lds	r25, 0x0FA2
    9d38:	0e 94 88 4d 	call	0x9b10	; 0x9b10 <get_level_tile>
    9d3c:	c8 2e       	mov	r12, r24
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    9d3e:	28 2f       	mov	r18, r24
    9d40:	30 e0       	ldi	r19, 0x00	; 0

	game.column_count++;
    for (u8 y = 0; y <= CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
    9d42:	90 91 b3 0c 	lds	r25, 0x0CB3
    9d46:	96 95       	lsr	r25
    9d48:	96 95       	lsr	r25
    9d4a:	96 95       	lsr	r25
    9d4c:	ae 01       	movw	r20, r28
    9d4e:	49 0f       	add	r20, r25
    9d50:	51 1d       	adc	r21, r1
    9d52:	ca 01       	movw	r24, r20
    9d54:	b7 01       	movw	r22, r14
    9d56:	0e 94 35 67 	call	0xce6a	; 0xce6a <__divmodhi4>
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    9d5a:	a9 01       	movw	r20, r18
    9d5c:	68 2f       	mov	r22, r24
    9d5e:	80 91 bf 0d 	lds	r24, 0x0DBF
    9d62:	0e 94 8f 39 	call	0x731e	; 0x731e <SetTile>
	game.column_count++;
    for (u8 y = 0; y <= CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
		if (game.column_count % game.spawn_rate == game.spawn_rate - 1 && game.active_enemies < MAX_ENEMIES && !enemy_spawned)
    9d66:	20 91 c2 0d 	lds	r18, 0x0DC2
    9d6a:	30 e0       	ldi	r19, 0x00	; 0
    9d6c:	80 91 b2 0d 	lds	r24, 0x0DB2
    9d70:	90 91 b3 0d 	lds	r25, 0x0DB3
    9d74:	b9 01       	movw	r22, r18
    9d76:	0e 94 21 67 	call	0xce42	; 0xce42 <__udivmodhi4>
    9d7a:	21 50       	subi	r18, 0x01	; 1
    9d7c:	31 09       	sbc	r19, r1
    9d7e:	82 17       	cp	r24, r18
    9d80:	93 07       	cpc	r25, r19
    9d82:	91 f5       	brne	.+100    	; 0x9de8 <append_tile_column+0x118>
    9d84:	80 91 c1 0d 	lds	r24, 0x0DC1
    9d88:	85 30       	cpi	r24, 0x05	; 5
    9d8a:	70 f5       	brcc	.+92     	; 0x9de8 <append_tile_column+0x118>
    9d8c:	d1 10       	cpse	r13, r1
    9d8e:	2a c0       	rjmp	.+84     	; 0x9de4 <append_tile_column+0x114>
		{
			if (is_space())
    9d90:	0e 94 13 4b 	call	0x9626	; 0x9626 <is_space>
    9d94:	88 23       	and	r24, r24
    9d96:	31 f0       	breq	.+12     	; 0x9da4 <append_tile_column+0xd4>
			{
				spawn_enemy(game.camera_x+CAMERA_WIDTH*8, rndom);
    9d98:	80 91 aa 0d 	lds	r24, 0x0DAA
    9d9c:	90 91 ab 0d 	lds	r25, 0x0DAB
    9da0:	b8 01       	movw	r22, r16
    9da2:	1c c0       	rjmp	.+56     	; 0x9ddc <append_tile_column+0x10c>
				enemy_spawned = 1;
			}
			else if (solid_tile(level_tile))
    9da4:	8c 2d       	mov	r24, r12
    9da6:	0e 94 59 4e 	call	0x9cb2	; 0x9cb2 <solid_tile>
    9daa:	88 23       	and	r24, r24
    9dac:	e9 f0       	breq	.+58     	; 0x9de8 <append_tile_column+0x118>
			{
				spawn_enemy(game.camera_x+CAMERA_WIDTH*8, (game.camera_y / 8 + y - 1)*8);
    9dae:	20 91 ac 0d 	lds	r18, 0x0DAC
    9db2:	30 91 ad 0d 	lds	r19, 0x0DAD
    9db6:	83 e0       	ldi	r24, 0x03	; 3
    9db8:	36 95       	lsr	r19
    9dba:	27 95       	ror	r18
    9dbc:	8a 95       	dec	r24
    9dbe:	e1 f7       	brne	.-8      	; 0x9db8 <append_tile_column+0xe8>
    9dc0:	21 50       	subi	r18, 0x01	; 1
    9dc2:	30 4e       	sbci	r19, 0xE0	; 224
    9dc4:	2c 0f       	add	r18, r28
    9dc6:	3d 1f       	adc	r19, r29
    9dc8:	b9 01       	movw	r22, r18
    9dca:	93 e0       	ldi	r25, 0x03	; 3
    9dcc:	66 0f       	add	r22, r22
    9dce:	77 1f       	adc	r23, r23
    9dd0:	9a 95       	dec	r25
    9dd2:	e1 f7       	brne	.-8      	; 0x9dcc <append_tile_column+0xfc>
    9dd4:	80 91 aa 0d 	lds	r24, 0x0DAA
    9dd8:	90 91 ab 0d 	lds	r25, 0x0DAB
    9ddc:	80 52       	subi	r24, 0x20	; 32
    9dde:	9f 4f       	sbci	r25, 0xFF	; 255
    9de0:	0e 94 1e 4e 	call	0x9c3c	; 0x9c3c <spawn_enemy>
    9de4:	dd 24       	eor	r13, r13
    9de6:	d3 94       	inc	r13
    9de8:	21 96       	adiw	r28, 0x01	; 1
	u8 enemy_spawned = 0;
	u8 level_tile;
	u8 rndom = LBRandom(0, CAMERA_HEIGHT-1)*8;

	game.column_count++;
    for (u8 y = 0; y <= CAMERA_HEIGHT; y++)
    9dea:	cb 31       	cpi	r28, 0x1B	; 27
    9dec:	d1 05       	cpc	r29, r1
    9dee:	09 f0       	breq	.+2      	; 0x9df2 <append_tile_column+0x122>
    9df0:	90 cf       	rjmp	.-224    	; 0x9d12 <append_tile_column+0x42>
				enemy_spawned = 1;
			}
		}
    }
	
    game.scroll_src_x++;
    9df2:	c0 91 a6 0d 	lds	r28, 0x0DA6
    9df6:	d0 91 a7 0d 	lds	r29, 0x0DA7
    9dfa:	21 96       	adiw	r28, 0x01	; 1
    9dfc:	d0 93 a7 0d 	sts	0x0DA7, r29
    9e00:	c0 93 a6 0d 	sts	0x0DA6, r28
	game.scroll_dest_x++;
    9e04:	80 91 bf 0d 	lds	r24, 0x0DBF
    9e08:	8f 5f       	subi	r24, 0xFF	; 255
    if(game.scroll_dest_x>=32)game.scroll_dest_x=0;
    9e0a:	80 32       	cpi	r24, 0x20	; 32
    9e0c:	18 f4       	brcc	.+6      	; 0x9e14 <append_tile_column+0x144>
			}
		}
    }
	
    game.scroll_src_x++;
	game.scroll_dest_x++;
    9e0e:	80 93 bf 0d 	sts	0x0DBF, r24
    9e12:	02 c0       	rjmp	.+4      	; 0x9e18 <append_tile_column+0x148>
    if(game.scroll_dest_x>=32)game.scroll_dest_x=0;
    9e14:	10 92 bf 0d 	sts	0x0DBF, r1
	if(is_space() && game.scroll_src_x>=32)game.scroll_src_x=0;
    9e18:	0e 94 13 4b 	call	0x9626	; 0x9626 <is_space>
    9e1c:	88 23       	and	r24, r24
    9e1e:	31 f0       	breq	.+12     	; 0x9e2c <append_tile_column+0x15c>
    9e20:	a0 97       	sbiw	r28, 0x20	; 32
    9e22:	20 f0       	brcs	.+8      	; 0x9e2c <append_tile_column+0x15c>
    9e24:	10 92 a7 0d 	sts	0x0DA7, r1
    9e28:	10 92 a6 0d 	sts	0x0DA6, r1
}
    9e2c:	df 91       	pop	r29
    9e2e:	cf 91       	pop	r28
    9e30:	1f 91       	pop	r17
    9e32:	0f 91       	pop	r16
    9e34:	ff 90       	pop	r15
    9e36:	ef 90       	pop	r14
    9e38:	df 90       	pop	r13
    9e3a:	cf 90       	pop	r12
    9e3c:	08 95       	ret

00009e3e <append_tile_row>:

void append_tile_row()
{
    9e3e:	cf 93       	push	r28
    9e40:	df 93       	push	r29
    9e42:	c0 e0       	ldi	r28, 0x00	; 0
    9e44:	d0 e0       	ldi	r29, 0x00	; 0
	u8 level_tile;

    for (u8 x = 0; x <= CAMERA_WIDTH; x++)
	{
		level_tile = get_level_tile(game.current_level, x + game.camera_x / 8, game.scroll_src_y);
    9e46:	40 91 a8 0d 	lds	r20, 0x0DA8
    9e4a:	50 91 a9 0d 	lds	r21, 0x0DA9
    9e4e:	60 91 aa 0d 	lds	r22, 0x0DAA
    9e52:	70 91 ab 0d 	lds	r23, 0x0DAB
    9e56:	83 e0       	ldi	r24, 0x03	; 3
    9e58:	76 95       	lsr	r23
    9e5a:	67 95       	ror	r22
    9e5c:	8a 95       	dec	r24
    9e5e:	e1 f7       	brne	.-8      	; 0x9e58 <append_tile_row+0x1a>
    9e60:	6c 0f       	add	r22, r28
    9e62:	7d 1f       	adc	r23, r29
    9e64:	80 91 a1 0f 	lds	r24, 0x0FA1
    9e68:	90 91 a2 0f 	lds	r25, 0x0FA2
    9e6c:	0e 94 88 4d 	call	0x9b10	; 0x9b10 <get_level_tile>
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    9e70:	48 2f       	mov	r20, r24
    9e72:	50 e0       	ldi	r21, 0x00	; 0
	u8 level_tile;

    for (u8 x = 0; x <= CAMERA_WIDTH; x++)
	{
		level_tile = get_level_tile(game.current_level, x + game.camera_x / 8, game.scroll_src_y);
		render_level_tile(level_tile, (x + Screen.scrollX / 8) % 32, game.scroll_dest_y);
    9e74:	80 91 b2 0c 	lds	r24, 0x0CB2
    9e78:	86 95       	lsr	r24
    9e7a:	86 95       	lsr	r24
    9e7c:	86 95       	lsr	r24
    9e7e:	8c 0f       	add	r24, r28
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    9e80:	60 91 c0 0d 	lds	r22, 0x0DC0
    9e84:	8f 71       	andi	r24, 0x1F	; 31
    9e86:	0e 94 8f 39 	call	0x731e	; 0x731e <SetTile>
    9e8a:	21 96       	adiw	r28, 0x01	; 1

void append_tile_row()
{
	u8 level_tile;

    for (u8 x = 0; x <= CAMERA_WIDTH; x++)
    9e8c:	cd 31       	cpi	r28, 0x1D	; 29
    9e8e:	d1 05       	cpc	r29, r1
    9e90:	d1 f6       	brne	.-76     	; 0x9e46 <append_tile_row+0x8>
	{
		level_tile = get_level_tile(game.current_level, x + game.camera_x / 8, game.scroll_src_y);
		render_level_tile(level_tile, (x + Screen.scrollX / 8) % 32, game.scroll_dest_y);
    }
	
    game.scroll_src_y++;
    9e92:	80 91 a8 0d 	lds	r24, 0x0DA8
    9e96:	90 91 a9 0d 	lds	r25, 0x0DA9
    9e9a:	01 96       	adiw	r24, 0x01	; 1
    9e9c:	90 93 a9 0d 	sts	0x0DA9, r25
    9ea0:	80 93 a8 0d 	sts	0x0DA8, r24
	game.scroll_dest_y++;
    9ea4:	80 91 c0 0d 	lds	r24, 0x0DC0
    9ea8:	8f 5f       	subi	r24, 0xFF	; 255
    if(game.scroll_dest_y>=30)game.scroll_dest_y=0;
    9eaa:	8e 31       	cpi	r24, 0x1E	; 30
    9eac:	18 f4       	brcc	.+6      	; 0x9eb4 <append_tile_row+0x76>
		level_tile = get_level_tile(game.current_level, x + game.camera_x / 8, game.scroll_src_y);
		render_level_tile(level_tile, (x + Screen.scrollX / 8) % 32, game.scroll_dest_y);
    }
	
    game.scroll_src_y++;
	game.scroll_dest_y++;
    9eae:	80 93 c0 0d 	sts	0x0DC0, r24
    9eb2:	02 c0       	rjmp	.+4      	; 0x9eb8 <append_tile_row+0x7a>
    if(game.scroll_dest_y>=30)game.scroll_dest_y=0;
    9eb4:	10 92 c0 0d 	sts	0x0DC0, r1
}
    9eb8:	df 91       	pop	r29
    9eba:	cf 91       	pop	r28
    9ebc:	08 95       	ret

00009ebe <move_camera_x>:

void move_camera_x()
{	
	game.camera_x++;
    9ebe:	80 91 aa 0d 	lds	r24, 0x0DAA
    9ec2:	90 91 ab 0d 	lds	r25, 0x0DAB
    9ec6:	01 96       	adiw	r24, 0x01	; 1
    9ec8:	90 93 ab 0d 	sts	0x0DAB, r25
    9ecc:	80 93 aa 0d 	sts	0x0DAA, r24
	Scroll(1,0);
    9ed0:	60 e0       	ldi	r22, 0x00	; 0
    9ed2:	81 e0       	ldi	r24, 0x01	; 1
    9ed4:	0e 94 a8 47 	call	0x8f50	; 0x8f50 <Scroll>
	if (++game.scroll_x == 8)
    9ed8:	80 91 bd 0d 	lds	r24, 0x0DBD
    9edc:	8f 5f       	subi	r24, 0xFF	; 255
    9ede:	88 30       	cpi	r24, 0x08	; 8
    9ee0:	19 f0       	breq	.+6      	; 0x9ee8 <move_camera_x+0x2a>
    9ee2:	80 93 bd 0d 	sts	0x0DBD, r24
    9ee6:	08 95       	ret
	{
		game.scroll_x = 0;
    9ee8:	10 92 bd 0d 	sts	0x0DBD, r1
		append_tile_column();
    9eec:	0c 94 68 4e 	jmp	0x9cd0	; 0x9cd0 <append_tile_column>

00009ef0 <move_camera_y>:
	}
}

void move_camera_y()
{	
	game.camera_y+=2;
    9ef0:	80 91 ac 0d 	lds	r24, 0x0DAC
    9ef4:	90 91 ad 0d 	lds	r25, 0x0DAD
    9ef8:	02 96       	adiw	r24, 0x02	; 2
    9efa:	90 93 ad 0d 	sts	0x0DAD, r25
    9efe:	80 93 ac 0d 	sts	0x0DAC, r24
	game.scroll_y+=2;
    9f02:	80 91 be 0d 	lds	r24, 0x0DBE
    9f06:	8e 5f       	subi	r24, 0xFE	; 254
    9f08:	80 93 be 0d 	sts	0x0DBE, r24
	Scroll(0,2);
    9f0c:	62 e0       	ldi	r22, 0x02	; 2
    9f0e:	80 e0       	ldi	r24, 0x00	; 0
    9f10:	0e 94 a8 47 	call	0x8f50	; 0x8f50 <Scroll>
	if (game.scroll_y == 8)
    9f14:	80 91 be 0d 	lds	r24, 0x0DBE
    9f18:	88 30       	cpi	r24, 0x08	; 8
    9f1a:	21 f4       	brne	.+8      	; 0x9f24 <move_camera_y+0x34>
	{
		game.scroll_y = 0;
    9f1c:	10 92 be 0d 	sts	0x0DBE, r1
		append_tile_row();
    9f20:	0c 94 1f 4f 	jmp	0x9e3e	; 0x9e3e <append_tile_row>
    9f24:	08 95       	ret

00009f26 <map_ship>:
	}
}

void map_ship()
{
	game.player.run.anim_count = 2;
    9f26:	82 e0       	ldi	r24, 0x02	; 2
    9f28:	80 93 31 0e 	sts	0x0E31, r24
	game.player.run.frames_per_anim = EXPLOSION_FRAME_COUNT;
    9f2c:	85 e0       	ldi	r24, 0x05	; 5
    9f2e:	80 93 32 0e 	sts	0x0E32, r24
	game.player.run.anims = run_anim;
    9f32:	eb ef       	ldi	r30, 0xFB	; 251
    9f34:	ff e0       	ldi	r31, 0x0F	; 15
    9f36:	f0 93 37 0e 	sts	0x0E37, r31
    9f3a:	e0 93 36 0e 	sts	0x0E36, r30
	game.player.run.anims[0] = (char*) map_hero_ship_large_0;
    9f3e:	86 e7       	ldi	r24, 0x76	; 118
    9f40:	9d e2       	ldi	r25, 0x2D	; 45
    9f42:	91 83       	std	Z+1, r25	; 0x01
    9f44:	80 83       	st	Z, r24
	game.player.run.anims[1] = (char*) map_hero_ship_large_1;
    9f46:	8c e6       	ldi	r24, 0x6C	; 108
    9f48:	9d e2       	ldi	r25, 0x2D	; 45
    9f4a:	93 83       	std	Z+3, r25	; 0x03
    9f4c:	82 83       	std	Z+2, r24	; 0x02
    9f4e:	08 95       	ret

00009f50 <map_level_info>:
}

void map_level_info(char* level)
{
    9f50:	cf 93       	push	r28
    9f52:	df 93       	push	r29
    9f54:	ec 01       	movw	r28, r24
	game.current_level = level;
    9f56:	90 93 a2 0f 	sts	0x0FA2, r25
    9f5a:	80 93 a1 0f 	sts	0x0FA1, r24
	if (!is_space())
    9f5e:	0e 94 13 4b 	call	0x9626	; 0x9626 <is_space>
    9f62:	81 11       	cpse	r24, r1
    9f64:	0d c0       	rjmp	.+26     	; 0x9f80 <map_level_info+0x30>
	{
		game.level_width = read_level_byte(level, 0);
    9f66:	60 e0       	ldi	r22, 0x00	; 0
    9f68:	70 e0       	ldi	r23, 0x00	; 0
    9f6a:	ce 01       	movw	r24, r28
    9f6c:	0e 94 69 4d 	call	0x9ad2	; 0x9ad2 <read_level_byte>
    9f70:	80 93 b8 0d 	sts	0x0DB8, r24
		game.level_height = read_level_byte(level, 1);
    9f74:	61 e0       	ldi	r22, 0x01	; 1
    9f76:	70 e0       	ldi	r23, 0x00	; 0
    9f78:	ce 01       	movw	r24, r28
    9f7a:	0e 94 69 4d 	call	0x9ad2	; 0x9ad2 <read_level_byte>
    9f7e:	04 c0       	rjmp	.+8      	; 0x9f88 <map_level_info+0x38>
		
	}
	else
	{
		game.level_width = 255;
    9f80:	8f ef       	ldi	r24, 0xFF	; 255
    9f82:	80 93 b8 0d 	sts	0x0DB8, r24
		game.level_height = 26;
    9f86:	8a e1       	ldi	r24, 0x1A	; 26
    9f88:	80 93 b9 0d 	sts	0x0DB9, r24
	}
}
    9f8c:	df 91       	pop	r29
    9f8e:	cf 91       	pop	r28
    9f90:	08 95       	ret

00009f92 <on_solid_ground>:
		}
	}
}

char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
    9f92:	2f 92       	push	r2
    9f94:	3f 92       	push	r3
    9f96:	4f 92       	push	r4
    9f98:	5f 92       	push	r5
    9f9a:	6f 92       	push	r6
    9f9c:	7f 92       	push	r7
    9f9e:	8f 92       	push	r8
    9fa0:	9f 92       	push	r9
    9fa2:	af 92       	push	r10
    9fa4:	bf 92       	push	r11
    9fa6:	cf 92       	push	r12
    9fa8:	df 92       	push	r13
    9faa:	ef 92       	push	r14
    9fac:	ff 92       	push	r15
    9fae:	0f 93       	push	r16
    9fb0:	1f 93       	push	r17
    9fb2:	cf 93       	push	r28
    9fb4:	df 93       	push	r29
    9fb6:	00 d0       	rcall	.+0      	; 0x9fb8 <on_solid_ground+0x26>
    9fb8:	00 d0       	rcall	.+0      	; 0x9fba <on_solid_ground+0x28>
    9fba:	00 d0       	rcall	.+0      	; 0x9fbc <on_solid_ground+0x2a>
    9fbc:	cd b7       	in	r28, 0x3d	; 61
    9fbe:	de b7       	in	r29, 0x3e	; 62
    9fc0:	9e 83       	std	Y+6, r25	; 0x06
    9fc2:	8d 83       	std	Y+5, r24	; 0x05
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
    9fc4:	88 e0       	ldi	r24, 0x08	; 8
    9fc6:	48 9f       	mul	r20, r24
    9fc8:	a0 01       	movw	r20, r0
    9fca:	11 24       	eor	r1, r1
    9fcc:	26 2e       	mov	r2, r22
    9fce:	31 2c       	mov	r3, r1
char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
    9fd0:	00 e0       	ldi	r16, 0x00	; 0
    9fd2:	10 e0       	ldi	r17, 0x00	; 0
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
    9fd4:	ca 01       	movw	r24, r20
    9fd6:	aa 27       	eor	r26, r26
    9fd8:	97 fd       	sbrc	r25, 7
    9fda:	a0 95       	com	r26
    9fdc:	ba 2f       	mov	r27, r26
    9fde:	89 83       	std	Y+1, r24	; 0x01
    9fe0:	9a 83       	std	Y+2, r25	; 0x02
    9fe2:	ab 83       	std	Y+3, r26	; 0x03
    9fe4:	bc 83       	std	Y+4, r27	; 0x04
char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
    9fe6:	02 15       	cp	r16, r2
    9fe8:	13 05       	cpc	r17, r3
    9fea:	09 f4       	brne	.+2      	; 0x9fee <on_solid_ground+0x5c>
    9fec:	85 c0       	rjmp	.+266    	; 0xa0f8 <on_solid_ground+0x166>
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
    9fee:	69 81       	ldd	r22, Y+1	; 0x01
    9ff0:	7a 81       	ldd	r23, Y+2	; 0x02
    9ff2:	8b 81       	ldd	r24, Y+3	; 0x03
    9ff4:	9c 81       	ldd	r25, Y+4	; 0x04
    9ff6:	0e 94 e6 67 	call	0xcfcc	; 0xcfcc <__floatsisf>
    9ffa:	4b 01       	movw	r8, r22
    9ffc:	5c 01       	movw	r10, r24
    9ffe:	b8 01       	movw	r22, r16
    a000:	88 27       	eor	r24, r24
    a002:	77 fd       	sbrc	r23, 7
    a004:	80 95       	com	r24
    a006:	98 2f       	mov	r25, r24
    a008:	0e 94 e6 67 	call	0xcfcc	; 0xcfcc <__floatsisf>
    a00c:	6b 01       	movw	r12, r22
    a00e:	7c 01       	movw	r14, r24
    a010:	ad 81       	ldd	r26, Y+5	; 0x05
    a012:	be 81       	ldd	r27, Y+6	; 0x06
    a014:	18 96       	adiw	r26, 0x08	; 8
    a016:	2d 91       	ld	r18, X+
    a018:	3d 91       	ld	r19, X+
    a01a:	4d 91       	ld	r20, X+
    a01c:	5c 91       	ld	r21, X
    a01e:	1b 97       	sbiw	r26, 0x0b	; 11
    a020:	c5 01       	movw	r24, r10
    a022:	b4 01       	movw	r22, r8
    a024:	0e 94 50 67 	call	0xcea0	; 0xcea0 <__addsf3>
    a028:	20 e0       	ldi	r18, 0x00	; 0
    a02a:	30 e0       	ldi	r19, 0x00	; 0
    a02c:	40 e0       	ldi	r20, 0x00	; 0
    a02e:	5e e3       	ldi	r21, 0x3E	; 62
    a030:	0e 94 9a 68 	call	0xd134	; 0xd134 <__mulsf3>
    a034:	0e 94 b8 67 	call	0xcf70	; 0xcf70 <__fixunssfsi>
    a038:	2b 01       	movw	r4, r22
    a03a:	3c 01       	movw	r6, r24
    a03c:	20 e0       	ldi	r18, 0x00	; 0
    a03e:	30 e0       	ldi	r19, 0x00	; 0
    a040:	40 e0       	ldi	r20, 0x00	; 0
    a042:	5e e3       	ldi	r21, 0x3E	; 62
    a044:	ed 81       	ldd	r30, Y+5	; 0x05
    a046:	fe 81       	ldd	r31, Y+6	; 0x06
    a048:	64 81       	ldd	r22, Z+4	; 0x04
    a04a:	75 81       	ldd	r23, Z+5	; 0x05
    a04c:	86 81       	ldd	r24, Z+6	; 0x06
    a04e:	97 81       	ldd	r25, Z+7	; 0x07
    a050:	0e 94 9a 68 	call	0xd134	; 0xd134 <__mulsf3>
    a054:	a7 01       	movw	r20, r14
    a056:	96 01       	movw	r18, r12
    a058:	0e 94 50 67 	call	0xcea0	; 0xcea0 <__addsf3>
    a05c:	0e 94 b8 67 	call	0xcf70	; 0xcf70 <__fixunssfsi>
    a060:	a2 01       	movw	r20, r4
    a062:	80 91 a1 0f 	lds	r24, 0x0FA1
    a066:	90 91 a2 0f 	lds	r25, 0x0FA2
    a06a:	0e 94 88 4d 	call	0x9b10	; 0x9b10 <get_level_tile>
    a06e:	78 2e       	mov	r7, r24
		lt2 = get_level_tile(game.current_level, (s->x+7) / 8 + x, (s->y + tile_height*8) / 8);
    a070:	ad 81       	ldd	r26, Y+5	; 0x05
    a072:	be 81       	ldd	r27, Y+6	; 0x06
    a074:	18 96       	adiw	r26, 0x08	; 8
    a076:	2d 91       	ld	r18, X+
    a078:	3d 91       	ld	r19, X+
    a07a:	4d 91       	ld	r20, X+
    a07c:	5c 91       	ld	r21, X
    a07e:	1b 97       	sbiw	r26, 0x0b	; 11
    a080:	c5 01       	movw	r24, r10
    a082:	b4 01       	movw	r22, r8
    a084:	0e 94 50 67 	call	0xcea0	; 0xcea0 <__addsf3>
    a088:	20 e0       	ldi	r18, 0x00	; 0
    a08a:	30 e0       	ldi	r19, 0x00	; 0
    a08c:	40 e0       	ldi	r20, 0x00	; 0
    a08e:	5e e3       	ldi	r21, 0x3E	; 62
    a090:	0e 94 9a 68 	call	0xd134	; 0xd134 <__mulsf3>
    a094:	0e 94 b8 67 	call	0xcf70	; 0xcf70 <__fixunssfsi>
    a098:	4b 01       	movw	r8, r22
    a09a:	5c 01       	movw	r10, r24
    a09c:	20 e0       	ldi	r18, 0x00	; 0
    a09e:	30 e0       	ldi	r19, 0x00	; 0
    a0a0:	40 ee       	ldi	r20, 0xE0	; 224
    a0a2:	50 e4       	ldi	r21, 0x40	; 64
    a0a4:	ed 81       	ldd	r30, Y+5	; 0x05
    a0a6:	fe 81       	ldd	r31, Y+6	; 0x06
    a0a8:	64 81       	ldd	r22, Z+4	; 0x04
    a0aa:	75 81       	ldd	r23, Z+5	; 0x05
    a0ac:	86 81       	ldd	r24, Z+6	; 0x06
    a0ae:	97 81       	ldd	r25, Z+7	; 0x07
    a0b0:	0e 94 50 67 	call	0xcea0	; 0xcea0 <__addsf3>
    a0b4:	20 e0       	ldi	r18, 0x00	; 0
    a0b6:	30 e0       	ldi	r19, 0x00	; 0
    a0b8:	40 e0       	ldi	r20, 0x00	; 0
    a0ba:	5e e3       	ldi	r21, 0x3E	; 62
    a0bc:	0e 94 9a 68 	call	0xd134	; 0xd134 <__mulsf3>
    a0c0:	a7 01       	movw	r20, r14
    a0c2:	96 01       	movw	r18, r12
    a0c4:	0e 94 50 67 	call	0xcea0	; 0xcea0 <__addsf3>
    a0c8:	0e 94 b8 67 	call	0xcf70	; 0xcf70 <__fixunssfsi>
    a0cc:	a4 01       	movw	r20, r8
    a0ce:	80 91 a1 0f 	lds	r24, 0x0FA1
    a0d2:	90 91 a2 0f 	lds	r25, 0x0FA2
    a0d6:	0e 94 88 4d 	call	0x9b10	; 0x9b10 <get_level_tile>
    a0da:	f8 2e       	mov	r15, r24
		if (solid_tile(lt1) || solid_tile(lt2))
    a0dc:	87 2d       	mov	r24, r7
    a0de:	0e 94 59 4e 	call	0x9cb2	; 0x9cb2 <solid_tile>
    a0e2:	81 11       	cpse	r24, r1
    a0e4:	0b c0       	rjmp	.+22     	; 0xa0fc <on_solid_ground+0x16a>
    a0e6:	8f 2d       	mov	r24, r15
    a0e8:	0e 94 59 4e 	call	0x9cb2	; 0x9cb2 <solid_tile>
    a0ec:	0f 5f       	subi	r16, 0xFF	; 255
    a0ee:	1f 4f       	sbci	r17, 0xFF	; 255
    a0f0:	88 23       	and	r24, r24
    a0f2:	09 f4       	brne	.+2      	; 0xa0f6 <on_solid_ground+0x164>
    a0f4:	78 cf       	rjmp	.-272    	; 0x9fe6 <on_solid_ground+0x54>
    a0f6:	02 c0       	rjmp	.+4      	; 0xa0fc <on_solid_ground+0x16a>
		{
			return 1;
		}
	}
	return 0;
    a0f8:	80 e0       	ldi	r24, 0x00	; 0
    a0fa:	01 c0       	rjmp	.+2      	; 0xa0fe <on_solid_ground+0x16c>
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
		lt2 = get_level_tile(game.current_level, (s->x+7) / 8 + x, (s->y + tile_height*8) / 8);
		if (solid_tile(lt1) || solid_tile(lt2))
		{
			return 1;
    a0fc:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return 0;
}
    a0fe:	26 96       	adiw	r28, 0x06	; 6
    a100:	0f b6       	in	r0, 0x3f	; 63
    a102:	f8 94       	cli
    a104:	de bf       	out	0x3e, r29	; 62
    a106:	0f be       	out	0x3f, r0	; 63
    a108:	cd bf       	out	0x3d, r28	; 61
    a10a:	df 91       	pop	r29
    a10c:	cf 91       	pop	r28
    a10e:	1f 91       	pop	r17
    a110:	0f 91       	pop	r16
    a112:	ff 90       	pop	r15
    a114:	ef 90       	pop	r14
    a116:	df 90       	pop	r13
    a118:	cf 90       	pop	r12
    a11a:	bf 90       	pop	r11
    a11c:	af 90       	pop	r10
    a11e:	9f 90       	pop	r9
    a120:	8f 90       	pop	r8
    a122:	7f 90       	pop	r7
    a124:	6f 90       	pop	r6
    a126:	5f 90       	pop	r5
    a128:	4f 90       	pop	r4
    a12a:	3f 90       	pop	r3
    a12c:	2f 90       	pop	r2
    a12e:	08 95       	ret

0000a130 <find_shot_slot>:

u8 find_shot_slot()
{
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
	{
		if (!game.player.shot[i].active) return i;
    a130:	80 91 eb 0d 	lds	r24, 0x0DEB
    a134:	88 23       	and	r24, r24
    a136:	61 f0       	breq	.+24     	; 0xa150 <find_shot_slot+0x20>
    a138:	80 91 05 0e 	lds	r24, 0x0E05
    a13c:	88 23       	and	r24, r24
    a13e:	31 f0       	breq	.+12     	; 0xa14c <find_shot_slot+0x1c>
    a140:	80 91 1f 0e 	lds	r24, 0x0E1F
    a144:	81 11       	cpse	r24, r1
    a146:	04 c0       	rjmp	.+8      	; 0xa150 <find_shot_slot+0x20>
	return 0;
}

u8 find_shot_slot()
{
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
    a148:	82 e0       	ldi	r24, 0x02	; 2
    a14a:	08 95       	ret
    a14c:	81 e0       	ldi	r24, 0x01	; 1
	{
		if (!game.player.shot[i].active) return i;
    a14e:	08 95       	ret
	}
	return 0;
    a150:	80 e0       	ldi	r24, 0x00	; 0
}
    a152:	08 95       	ret

0000a154 <update_shot>:

void update_shot()
{
    a154:	8f 92       	push	r8
    a156:	9f 92       	push	r9
    a158:	af 92       	push	r10
    a15a:	bf 92       	push	r11
    a15c:	df 92       	push	r13
    a15e:	ef 92       	push	r14
    a160:	ff 92       	push	r15
    a162:	0f 93       	push	r16
    a164:	1f 93       	push	r17
    a166:	cf 93       	push	r28
    a168:	df 93       	push	r29
	// Shot updates
	u8 idx;
	if (game.joypadState.pressed & BTN_A && game.player.active_shots < MAX_PLAYER_SHOTS)
    a16a:	80 91 9a 0f 	lds	r24, 0x0F9A
    a16e:	90 91 9b 0f 	lds	r25, 0x0F9B
    a172:	90 ff       	sbrs	r25, 0
    a174:	df c0       	rjmp	.+446    	; 0xa334 <update_shot+0x1e0>
    a176:	80 91 d3 0d 	lds	r24, 0x0DD3
    a17a:	83 30       	cpi	r24, 0x03	; 3
    a17c:	08 f0       	brcs	.+2      	; 0xa180 <update_shot+0x2c>
    a17e:	da c0       	rjmp	.+436    	; 0xa334 <update_shot+0x1e0>
	{
		SFX_PLAYER_SHOOT;
    a180:	2f ef       	ldi	r18, 0xFF	; 255
    a182:	43 e2       	ldi	r20, 0x23	; 35
    a184:	63 e0       	ldi	r22, 0x03	; 3
    a186:	82 e0       	ldi	r24, 0x02	; 2
    a188:	0e 94 ac 3d 	call	0x7b58	; 0x7b58 <TriggerNote>
		idx = find_shot_slot();
    a18c:	0e 94 98 50 	call	0xa130	; 0xa130 <find_shot_slot>
    a190:	f8 2e       	mov	r15, r24
		LBMapSprite(PLAYER_SHOT_SLOT+idx, LBGetNextFrame(&game.player.shot[idx].anim), 0);
    a192:	08 2f       	mov	r16, r24
    a194:	10 e0       	ldi	r17, 0x00	; 0
    a196:	9a e1       	ldi	r25, 0x1A	; 26
    a198:	d9 2e       	mov	r13, r25
    a19a:	d0 9e       	mul	r13, r16
    a19c:	e0 01       	movw	r28, r0
    a19e:	d1 9e       	mul	r13, r17
    a1a0:	d0 0d       	add	r29, r0
    a1a2:	11 24       	eor	r1, r1
    a1a4:	ce 01       	movw	r24, r28
    a1a6:	84 51       	subi	r24, 0x14	; 20
    a1a8:	92 4f       	sbci	r25, 0xF2	; 242
    a1aa:	0e 94 e2 48 	call	0x91c4	; 0x91c4 <LBGetNextFrame>
    a1ae:	40 e0       	ldi	r20, 0x00	; 0
    a1b0:	bc 01       	movw	r22, r24
    a1b2:	8b e0       	ldi	r24, 0x0B	; 11
    a1b4:	8f 0d       	add	r24, r15
    a1b6:	0e 94 44 4a 	call	0x9488	; 0x9488 <LBMapSprite>
		game.player.shot[idx].active = 1;
    a1ba:	ca 55       	subi	r28, 0x5A	; 90
    a1bc:	d2 4f       	sbci	r29, 0xF2	; 242
    a1be:	fe 01       	movw	r30, r28
    a1c0:	eb 5b       	subi	r30, 0xBB	; 187
    a1c2:	ff 4f       	sbci	r31, 0xFF	; 255
    a1c4:	81 e0       	ldi	r24, 0x01	; 1
    a1c6:	80 83       	st	Z, r24
		game.player.shot[idx].shared.y = (u16) game.player.shared.y / 8 * 8;
    a1c8:	60 91 cc 0d 	lds	r22, 0x0DCC
    a1cc:	70 91 cd 0d 	lds	r23, 0x0DCD
    a1d0:	80 91 ce 0d 	lds	r24, 0x0DCE
    a1d4:	90 91 cf 0d 	lds	r25, 0x0DCF
    a1d8:	0e 94 b8 67 	call	0xcf70	; 0xcf70 <__fixunssfsi>
    a1dc:	23 e0       	ldi	r18, 0x03	; 3
    a1de:	76 95       	lsr	r23
    a1e0:	67 95       	ror	r22
    a1e2:	2a 95       	dec	r18
    a1e4:	e1 f7       	brne	.-8      	; 0xa1de <update_shot+0x8a>
    a1e6:	33 e0       	ldi	r19, 0x03	; 3
    a1e8:	66 0f       	add	r22, r22
    a1ea:	77 1f       	adc	r23, r23
    a1ec:	3a 95       	dec	r19
    a1ee:	e1 f7       	brne	.-8      	; 0xa1e8 <update_shot+0x94>
    a1f0:	80 e0       	ldi	r24, 0x00	; 0
    a1f2:	90 e0       	ldi	r25, 0x00	; 0
    a1f4:	0e 94 e4 67 	call	0xcfc8	; 0xcfc8 <__floatunsisf>
    a1f8:	4b 01       	movw	r8, r22
    a1fa:	5c 01       	movw	r10, r24
    a1fc:	6c af       	std	Y+60, r22	; 0x3c
    a1fe:	7d af       	std	Y+61, r23	; 0x3d
    a200:	8e af       	std	Y+62, r24	; 0x3e
    a202:	9f af       	std	Y+63, r25	; 0x3f
		if (is_space())
    a204:	0e 94 13 4b 	call	0x9626	; 0x9626 <is_space>
    a208:	98 01       	movw	r18, r16
    a20a:	2f 5f       	subi	r18, 0xFF	; 255
    a20c:	3f 4f       	sbci	r19, 0xFF	; 255
    a20e:	79 01       	movw	r14, r18
    a210:	88 23       	and	r24, r24
    a212:	59 f1       	breq	.+86     	; 0xa26a <update_shot+0x116>
		{
			game.player.shot[idx].shared.x = game.player.shared.x+game.player.width*8;
    a214:	60 91 d7 0d 	lds	r22, 0x0DD7
    a218:	d2 9e       	mul	r13, r18
    a21a:	80 01       	movw	r16, r0
    a21c:	d3 9e       	mul	r13, r19
    a21e:	10 0d       	add	r17, r0
    a220:	11 24       	eor	r1, r1
    a222:	0a 55       	subi	r16, 0x5A	; 90
    a224:	12 4f       	sbci	r17, 0xF2	; 242
    a226:	38 e0       	ldi	r19, 0x08	; 8
    a228:	63 9f       	mul	r22, r19
    a22a:	b0 01       	movw	r22, r0
    a22c:	11 24       	eor	r1, r1
    a22e:	88 27       	eor	r24, r24
    a230:	77 fd       	sbrc	r23, 7
    a232:	80 95       	com	r24
    a234:	98 2f       	mov	r25, r24
    a236:	0e 94 e6 67 	call	0xcfcc	; 0xcfcc <__floatsisf>
    a23a:	9b 01       	movw	r18, r22
    a23c:	ac 01       	movw	r20, r24
    a23e:	60 91 c8 0d 	lds	r22, 0x0DC8
    a242:	70 91 c9 0d 	lds	r23, 0x0DC9
    a246:	80 91 ca 0d 	lds	r24, 0x0DCA
    a24a:	90 91 cb 0d 	lds	r25, 0x0DCB
    a24e:	0e 94 50 67 	call	0xcea0	; 0xcea0 <__addsf3>
    a252:	f8 01       	movw	r30, r16
    a254:	66 8f       	std	Z+30, r22	; 0x1e
    a256:	77 8f       	std	Z+31, r23	; 0x1f
    a258:	80 a3       	std	Z+32, r24	; 0x20
    a25a:	91 a3       	std	Z+33, r25	; 0x21
			game.player.shot[idx].shared.vx = SHOT_SPEED;
    a25c:	c0 5c       	subi	r28, 0xC0	; 192
    a25e:	df 4f       	sbci	r29, 0xFF	; 255
    a260:	80 e9       	ldi	r24, 0x90	; 144
    a262:	91 e0       	ldi	r25, 0x01	; 1
    a264:	99 83       	std	Y+1, r25	; 0x01
    a266:	88 83       	st	Y, r24
    a268:	60 c0       	rjmp	.+192    	; 0xa32a <update_shot+0x1d6>
		}
		else
		{
			if (!(game.player.flags & PRONE))
    a26a:	80 91 d4 0d 	lds	r24, 0x0DD4
    a26e:	82 fd       	sbrc	r24, 2
    a270:	0c c0       	rjmp	.+24     	; 0xa28a <update_shot+0x136>
			{
				game.player.shot[idx].shared.y += 8;
    a272:	20 e0       	ldi	r18, 0x00	; 0
    a274:	30 e0       	ldi	r19, 0x00	; 0
    a276:	40 e0       	ldi	r20, 0x00	; 0
    a278:	51 e4       	ldi	r21, 0x41	; 65
    a27a:	c5 01       	movw	r24, r10
    a27c:	b4 01       	movw	r22, r8
    a27e:	0e 94 50 67 	call	0xcea0	; 0xcea0 <__addsf3>
    a282:	6c af       	std	Y+60, r22	; 0x3c
    a284:	7d af       	std	Y+61, r23	; 0x3d
    a286:	8e af       	std	Y+62, r24	; 0x3e
    a288:	9f af       	std	Y+63, r25	; 0x3f
			}
			if (game.player.direction == D_RIGHT)
    a28a:	80 91 d6 0d 	lds	r24, 0x0DD6
    a28e:	81 30       	cpi	r24, 0x01	; 1
    a290:	39 f5       	brne	.+78     	; 0xa2e0 <update_shot+0x18c>
			{
				game.player.shot[idx].shared.x = game.player.shared.x+2*8;
    a292:	8a e1       	ldi	r24, 0x1A	; 26
    a294:	d8 2e       	mov	r13, r24
    a296:	de 9c       	mul	r13, r14
    a298:	e0 01       	movw	r28, r0
    a29a:	df 9c       	mul	r13, r15
    a29c:	d0 0d       	add	r29, r0
    a29e:	11 24       	eor	r1, r1
    a2a0:	ca 55       	subi	r28, 0x5A	; 90
    a2a2:	d2 4f       	sbci	r29, 0xF2	; 242
    a2a4:	20 e0       	ldi	r18, 0x00	; 0
    a2a6:	30 e0       	ldi	r19, 0x00	; 0
    a2a8:	40 e8       	ldi	r20, 0x80	; 128
    a2aa:	51 e4       	ldi	r21, 0x41	; 65
    a2ac:	60 91 c8 0d 	lds	r22, 0x0DC8
    a2b0:	70 91 c9 0d 	lds	r23, 0x0DC9
    a2b4:	80 91 ca 0d 	lds	r24, 0x0DCA
    a2b8:	90 91 cb 0d 	lds	r25, 0x0DCB
    a2bc:	0e 94 50 67 	call	0xcea0	; 0xcea0 <__addsf3>
    a2c0:	6e 8f       	std	Y+30, r22	; 0x1e
    a2c2:	7f 8f       	std	Y+31, r23	; 0x1f
    a2c4:	88 a3       	std	Y+32, r24	; 0x20
    a2c6:	99 a3       	std	Y+33, r25	; 0x21
				game.player.shot[idx].shared.vx = SHOT_SPEED;
    a2c8:	d0 9e       	mul	r13, r16
    a2ca:	f0 01       	movw	r30, r0
    a2cc:	d1 9e       	mul	r13, r17
    a2ce:	f0 0d       	add	r31, r0
    a2d0:	11 24       	eor	r1, r1
    a2d2:	ea 51       	subi	r30, 0x1A	; 26
    a2d4:	f2 4f       	sbci	r31, 0xF2	; 242
    a2d6:	80 e9       	ldi	r24, 0x90	; 144
    a2d8:	91 e0       	ldi	r25, 0x01	; 1
    a2da:	91 83       	std	Z+1, r25	; 0x01
    a2dc:	80 83       	st	Z, r24
    a2de:	25 c0       	rjmp	.+74     	; 0xa32a <update_shot+0x1d6>
			}
			else
			{
				game.player.shot[idx].shared.vx = -SHOT_SPEED;
    a2e0:	8a e1       	ldi	r24, 0x1A	; 26
    a2e2:	80 9f       	mul	r24, r16
    a2e4:	f0 01       	movw	r30, r0
    a2e6:	81 9f       	mul	r24, r17
    a2e8:	f0 0d       	add	r31, r0
    a2ea:	11 24       	eor	r1, r1
    a2ec:	ea 51       	subi	r30, 0x1A	; 26
    a2ee:	f2 4f       	sbci	r31, 0xF2	; 242
    a2f0:	20 e7       	ldi	r18, 0x70	; 112
    a2f2:	3e ef       	ldi	r19, 0xFE	; 254
    a2f4:	31 83       	std	Z+1, r19	; 0x01
    a2f6:	20 83       	st	Z, r18
				game.player.shot[idx].shared.x = game.player.shared.x-1*8;
    a2f8:	8e 9d       	mul	r24, r14
    a2fa:	e0 01       	movw	r28, r0
    a2fc:	8f 9d       	mul	r24, r15
    a2fe:	d0 0d       	add	r29, r0
    a300:	11 24       	eor	r1, r1
    a302:	ca 55       	subi	r28, 0x5A	; 90
    a304:	d2 4f       	sbci	r29, 0xF2	; 242
    a306:	20 e0       	ldi	r18, 0x00	; 0
    a308:	30 e0       	ldi	r19, 0x00	; 0
    a30a:	40 e0       	ldi	r20, 0x00	; 0
    a30c:	51 e4       	ldi	r21, 0x41	; 65
    a30e:	60 91 c8 0d 	lds	r22, 0x0DC8
    a312:	70 91 c9 0d 	lds	r23, 0x0DC9
    a316:	80 91 ca 0d 	lds	r24, 0x0DCA
    a31a:	90 91 cb 0d 	lds	r25, 0x0DCB
    a31e:	0e 94 4f 67 	call	0xce9e	; 0xce9e <__subsf3>
    a322:	6e 8f       	std	Y+30, r22	; 0x1e
    a324:	7f 8f       	std	Y+31, r23	; 0x1f
    a326:	88 a3       	std	Y+32, r24	; 0x20
    a328:	99 a3       	std	Y+33, r25	; 0x21
			}
		}
		game.player.active_shots++;
    a32a:	80 91 d3 0d 	lds	r24, 0x0DD3
    a32e:	8f 5f       	subi	r24, 0xFF	; 255
    a330:	80 93 d3 0d 	sts	0x0DD3, r24
	}
}
    a334:	df 91       	pop	r29
    a336:	cf 91       	pop	r28
    a338:	1f 91       	pop	r17
    a33a:	0f 91       	pop	r16
    a33c:	ff 90       	pop	r15
    a33e:	ef 90       	pop	r14
    a340:	df 90       	pop	r13
    a342:	bf 90       	pop	r11
    a344:	af 90       	pop	r10
    a346:	9f 90       	pop	r9
    a348:	8f 90       	pop	r8
    a34a:	08 95       	ret

0000a34c <pixel_overlap>:
		}
	}
}

u8 pixel_overlap(u16 s1, u16 s2, u8 w1, u8 w2)
{
    a34c:	fc 01       	movw	r30, r24
	u8 result = w1;
	
	if (s2 > s1)
    a34e:	86 17       	cp	r24, r22
    a350:	97 07       	cpc	r25, r23
    a352:	28 f4       	brcc	.+10     	; 0xa35e <pixel_overlap+0x12>
    a354:	94 2f       	mov	r25, r20
    a356:	9e 0f       	add	r25, r30
	{
		result -= s2 - s1;
    a358:	89 2f       	mov	r24, r25
    a35a:	86 1b       	sub	r24, r22
    a35c:	01 c0       	rjmp	.+2      	; 0xa360 <pixel_overlap+0x14>
	}
}

u8 pixel_overlap(u16 s1, u16 s2, u8 w1, u8 w2)
{
	u8 result = w1;
    a35e:	84 2f       	mov	r24, r20
	
	if (s2 > s1)
	{
		result -= s2 - s1;
	}
	s1 = s1 + w1;
    a360:	e4 0f       	add	r30, r20
    a362:	f1 1d       	adc	r31, r1
	s2 = s2 + w2;
    a364:	62 0f       	add	r22, r18
    a366:	71 1d       	adc	r23, r1
	if (s2 < s1)
    a368:	6e 17       	cp	r22, r30
    a36a:	7f 07       	cpc	r23, r31
    a36c:	10 f4       	brcc	.+4      	; 0xa372 <pixel_overlap+0x26>
	{
		result -= s1 - s2;
    a36e:	6e 1b       	sub	r22, r30
    a370:	86 0f       	add	r24, r22
	}
	return result;
}
    a372:	08 95       	ret

0000a374 <collision_detect_level>:

u8 collision_detect_level(SpriteShared* s, u8 tile_width, u8 tile_height)
{
    a374:	2f 92       	push	r2
    a376:	3f 92       	push	r3
    a378:	4f 92       	push	r4
    a37a:	5f 92       	push	r5
    a37c:	6f 92       	push	r6
    a37e:	7f 92       	push	r7
    a380:	8f 92       	push	r8
    a382:	9f 92       	push	r9
    a384:	af 92       	push	r10
    a386:	bf 92       	push	r11
    a388:	cf 92       	push	r12
    a38a:	df 92       	push	r13
    a38c:	ef 92       	push	r14
    a38e:	ff 92       	push	r15
    a390:	0f 93       	push	r16
    a392:	1f 93       	push	r17
    a394:	cf 93       	push	r28
    a396:	df 93       	push	r29
    a398:	cd b7       	in	r28, 0x3d	; 61
    a39a:	de b7       	in	r29, 0x3e	; 62
    a39c:	68 97       	sbiw	r28, 0x18	; 24
    a39e:	0f b6       	in	r0, 0x3f	; 63
    a3a0:	f8 94       	cli
    a3a2:	de bf       	out	0x3e, r29	; 62
    a3a4:	0f be       	out	0x3f, r0	; 63
    a3a6:	cd bf       	out	0x3d, r28	; 61
    a3a8:	98 8f       	std	Y+24, r25	; 0x18
    a3aa:	8f 8b       	std	Y+23, r24	; 0x17
    a3ac:	16 2f       	mov	r17, r22
    a3ae:	49 8b       	std	Y+17, r20	; 0x11
	u16 x0_tile = s->x / 8;
    a3b0:	dc 01       	movw	r26, r24
    a3b2:	14 96       	adiw	r26, 0x04	; 4
    a3b4:	4d 90       	ld	r4, X+
    a3b6:	5d 90       	ld	r5, X+
    a3b8:	6d 90       	ld	r6, X+
    a3ba:	7c 90       	ld	r7, X
    a3bc:	17 97       	sbiw	r26, 0x07	; 7
	u16 y0_tile = s->y / 8;
    a3be:	18 96       	adiw	r26, 0x08	; 8
    a3c0:	cd 90       	ld	r12, X+
    a3c2:	dd 90       	ld	r13, X+
    a3c4:	ed 90       	ld	r14, X+
    a3c6:	fc 90       	ld	r15, X
    a3c8:	1b 97       	sbiw	r26, 0x0b	; 11
	u16 y1_tile = (s->y+7) / 8;
	u8 lt1, lt2;
	u8 result = 0;
	
	// Only if moving on planet
	if (is_space() || (s->vx == 0 && s->vy == 0)) return result;
    a3ca:	0e 94 13 4b 	call	0x9626	; 0x9626 <is_space>
    a3ce:	81 11       	cpse	r24, r1
    a3d0:	f2 c2       	rjmp	.+1508   	; 0xa9b6 <collision_detect_level+0x642>
    a3d2:	ef 89       	ldd	r30, Y+23	; 0x17
    a3d4:	f8 8d       	ldd	r31, Y+24	; 0x18
    a3d6:	84 85       	ldd	r24, Z+12	; 0x0c
    a3d8:	95 85       	ldd	r25, Z+13	; 0x0d
    a3da:	89 2b       	or	r24, r25
    a3dc:	61 f4       	brne	.+24     	; 0xa3f6 <collision_detect_level+0x82>
    a3de:	20 e0       	ldi	r18, 0x00	; 0
    a3e0:	30 e0       	ldi	r19, 0x00	; 0
    a3e2:	a9 01       	movw	r20, r18
    a3e4:	60 81       	ld	r22, Z
    a3e6:	71 81       	ldd	r23, Z+1	; 0x01
    a3e8:	82 81       	ldd	r24, Z+2	; 0x02
    a3ea:	93 81       	ldd	r25, Z+3	; 0x03
    a3ec:	0e 94 b4 67 	call	0xcf68	; 0xcf68 <__cmpsf2>
    a3f0:	88 23       	and	r24, r24
    a3f2:	09 f4       	brne	.+2      	; 0xa3f6 <collision_detect_level+0x82>
    a3f4:	e0 c2       	rjmp	.+1472   	; 0xa9b6 <collision_detect_level+0x642>
	return result;
}

u8 collision_detect_level(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u16 x0_tile = s->x / 8;
    a3f6:	20 e0       	ldi	r18, 0x00	; 0
    a3f8:	30 e0       	ldi	r19, 0x00	; 0
    a3fa:	40 e0       	ldi	r20, 0x00	; 0
    a3fc:	5e e3       	ldi	r21, 0x3E	; 62
    a3fe:	c3 01       	movw	r24, r6
    a400:	b2 01       	movw	r22, r4
    a402:	0e 94 9a 68 	call	0xd134	; 0xd134 <__mulsf3>
    a406:	0e 94 b8 67 	call	0xcf70	; 0xcf70 <__fixunssfsi>
    a40a:	4b 01       	movw	r8, r22
    a40c:	5c 01       	movw	r10, r24
    a40e:	68 87       	std	Y+8, r22	; 0x08
    a410:	9a 8a       	std	Y+18, r9	; 0x12
	
	// Only if moving on planet
	if (is_space() || (s->vx == 0 && s->vy == 0)) return result;
	
	// Top and Bottom
	if (s->vy != 0)
    a412:	20 e0       	ldi	r18, 0x00	; 0
    a414:	30 e0       	ldi	r19, 0x00	; 0
    a416:	a9 01       	movw	r20, r18
    a418:	af 89       	ldd	r26, Y+23	; 0x17
    a41a:	b8 8d       	ldd	r27, Y+24	; 0x18
    a41c:	6d 91       	ld	r22, X+
    a41e:	7d 91       	ld	r23, X+
    a420:	8d 91       	ld	r24, X+
    a422:	9c 91       	ld	r25, X
    a424:	0e 94 b4 67 	call	0xcf68	; 0xcf68 <__cmpsf2>
    a428:	88 23       	and	r24, r24
    a42a:	09 f4       	brne	.+2      	; 0xa42e <collision_detect_level+0xba>
    a42c:	67 c1       	rjmp	.+718    	; 0xa6fc <collision_detect_level+0x388>
}

u8 collision_detect_level(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u16 x0_tile = s->x / 8;
	u16 y0_tile = s->y / 8;
    a42e:	20 e0       	ldi	r18, 0x00	; 0
    a430:	30 e0       	ldi	r19, 0x00	; 0
    a432:	40 e0       	ldi	r20, 0x00	; 0
    a434:	5e e3       	ldi	r21, 0x3E	; 62
    a436:	c7 01       	movw	r24, r14
    a438:	b6 01       	movw	r22, r12
    a43a:	0e 94 9a 68 	call	0xd134	; 0xd134 <__mulsf3>
    a43e:	0e 94 b8 67 	call	0xcf70	; 0xcf70 <__fixunssfsi>
    a442:	6b 01       	movw	r12, r22
    a444:	7c 01       	movw	r14, r24
    a446:	1b 01       	movw	r2, r22
	u16 x1_tile = (s->x+7) / 8;
    a448:	20 e0       	ldi	r18, 0x00	; 0
    a44a:	30 e0       	ldi	r19, 0x00	; 0
    a44c:	40 ee       	ldi	r20, 0xE0	; 224
    a44e:	50 e4       	ldi	r21, 0x40	; 64
    a450:	c3 01       	movw	r24, r6
    a452:	b2 01       	movw	r22, r4
    a454:	0e 94 50 67 	call	0xcea0	; 0xcea0 <__addsf3>
    a458:	20 e0       	ldi	r18, 0x00	; 0
    a45a:	30 e0       	ldi	r19, 0x00	; 0
    a45c:	40 e0       	ldi	r20, 0x00	; 0
    a45e:	5e e3       	ldi	r21, 0x3E	; 62
    a460:	0e 94 9a 68 	call	0xd134	; 0xd134 <__mulsf3>
    a464:	0e 94 b8 67 	call	0xcf70	; 0xcf70 <__fixunssfsi>
		{
			if (s->vy < 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, y0_tile);
				lt2 = get_level_tile(game.current_level, x1_tile + x, y0_tile);
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    a468:	f4 01       	movw	r30, r8
    a46a:	53 e0       	ldi	r21, 0x03	; 3
    a46c:	ee 0f       	add	r30, r30
    a46e:	ff 1f       	adc	r31, r31
    a470:	5a 95       	dec	r21
    a472:	e1 f7       	brne	.-8      	; 0xa46c <collision_detect_level+0xf8>
    a474:	fb 83       	std	Y+3, r31	; 0x03
    a476:	ea 83       	std	Y+2, r30	; 0x02
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    a478:	9b 01       	movw	r18, r22
    a47a:	e3 e0       	ldi	r30, 0x03	; 3
    a47c:	22 0f       	add	r18, r18
    a47e:	33 1f       	adc	r19, r19
    a480:	ea 95       	dec	r30
    a482:	e1 f7       	brne	.-8      	; 0xa47c <collision_detect_level+0x108>
    a484:	3d 83       	std	Y+5, r19	; 0x05
    a486:	2c 83       	std	Y+4, r18	; 0x04
				{
					s->vy =  0;
					s->y = (y0_tile + 1) * 8;
    a488:	3f ef       	ldi	r19, 0xFF	; 255
    a48a:	c3 1a       	sub	r12, r19
    a48c:	d3 0a       	sbc	r13, r19
    a48e:	f3 e0       	ldi	r31, 0x03	; 3
    a490:	cc 0c       	add	r12, r12
    a492:	dd 1c       	adc	r13, r13
    a494:	fa 95       	dec	r31
    a496:	e1 f7       	brne	.-8      	; 0xa490 <collision_detect_level+0x11c>
					result = 1;
				}
			}
			if (s->vy > 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, (s->y + tile_height*8 - 1) / 8);
    a498:	b9 89       	ldd	r27, Y+17	; 0x11
    a49a:	a8 e0       	ldi	r26, 0x08	; 8
    a49c:	ba 9f       	mul	r27, r26
    a49e:	a0 01       	movw	r20, r0
    a4a0:	11 24       	eor	r1, r1
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) || 
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vy =  0;
					s->gravity = 0;
					s->y = y0_tile * 8;
    a4a2:	96 01       	movw	r18, r12
    a4a4:	28 50       	subi	r18, 0x08	; 8
    a4a6:	31 09       	sbc	r19, r1
    a4a8:	2b 01       	movw	r4, r22
    a4aa:	34 01       	movw	r6, r8
    a4ac:	19 82       	std	Y+1, r1	; 0x01
				lt2 = get_level_tile(game.current_level, x1_tile + x, y0_tile);
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vy =  0;
					s->y = (y0_tile + 1) * 8;
    a4ae:	b6 01       	movw	r22, r12
    a4b0:	80 e0       	ldi	r24, 0x00	; 0
    a4b2:	90 e0       	ldi	r25, 0x00	; 0
    a4b4:	69 87       	std	Y+9, r22	; 0x09
    a4b6:	7a 87       	std	Y+10, r23	; 0x0a
    a4b8:	8b 87       	std	Y+11, r24	; 0x0b
    a4ba:	9c 87       	std	Y+12, r25	; 0x0c
					result = 1;
				}
			}
			if (s->vy > 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, (s->y + tile_height*8 - 1) / 8);
    a4bc:	66 27       	eor	r22, r22
    a4be:	57 fd       	sbrc	r21, 7
    a4c0:	60 95       	com	r22
    a4c2:	76 2f       	mov	r23, r22
    a4c4:	4d 87       	std	Y+13, r20	; 0x0d
    a4c6:	5e 87       	std	Y+14, r21	; 0x0e
    a4c8:	6f 87       	std	Y+15, r22	; 0x0f
    a4ca:	78 8b       	std	Y+16, r23	; 0x10
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) || 
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vy =  0;
					s->gravity = 0;
					s->y = y0_tile * 8;
    a4cc:	b9 01       	movw	r22, r18
    a4ce:	80 e0       	ldi	r24, 0x00	; 0
    a4d0:	90 e0       	ldi	r25, 0x00	; 0
    a4d2:	6b 8b       	std	Y+19, r22	; 0x13
    a4d4:	7c 8b       	std	Y+20, r23	; 0x14
    a4d6:	8d 8b       	std	Y+21, r24	; 0x15
    a4d8:	9e 8b       	std	Y+22, r25	; 0x16
    a4da:	86 2d       	mov	r24, r6
    a4dc:	48 85       	ldd	r20, Y+8	; 0x08
    a4de:	84 1b       	sub	r24, r20
	if (is_space() || (s->vx == 0 && s->vy == 0)) return result;
	
	// Top and Bottom
	if (s->vy != 0)
	{
		for (u8 x = 0; x < tile_width; x++)
    a4e0:	81 17       	cp	r24, r17
    a4e2:	08 f0       	brcs	.+2      	; 0xa4e6 <collision_detect_level+0x172>
    a4e4:	0c c1       	rjmp	.+536    	; 0xa6fe <collision_detect_level+0x38a>
		{
			if (s->vy < 0)
    a4e6:	20 e0       	ldi	r18, 0x00	; 0
    a4e8:	30 e0       	ldi	r19, 0x00	; 0
    a4ea:	a9 01       	movw	r20, r18
    a4ec:	af 89       	ldd	r26, Y+23	; 0x17
    a4ee:	b8 8d       	ldd	r27, Y+24	; 0x18
    a4f0:	6d 91       	ld	r22, X+
    a4f2:	7d 91       	ld	r23, X+
    a4f4:	8d 91       	ld	r24, X+
    a4f6:	9c 91       	ld	r25, X
    a4f8:	0e 94 b4 67 	call	0xcf68	; 0xcf68 <__cmpsf2>
    a4fc:	87 ff       	sbrs	r24, 7
    a4fe:	58 c0       	rjmp	.+176    	; 0xa5b0 <collision_detect_level+0x23c>
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, y0_tile);
    a500:	a1 01       	movw	r20, r2
    a502:	b3 01       	movw	r22, r6
    a504:	80 91 a1 0f 	lds	r24, 0x0FA1
    a508:	90 91 a2 0f 	lds	r25, 0x0FA2
    a50c:	0e 94 88 4d 	call	0x9b10	; 0x9b10 <get_level_tile>
    a510:	f8 2e       	mov	r15, r24
				lt2 = get_level_tile(game.current_level, x1_tile + x, y0_tile);
    a512:	a1 01       	movw	r20, r2
    a514:	b2 01       	movw	r22, r4
    a516:	80 91 a1 0f 	lds	r24, 0x0FA1
    a51a:	90 91 a2 0f 	lds	r25, 0x0FA2
    a51e:	0e 94 88 4d 	call	0x9b10	; 0x9b10 <get_level_tile>
    a522:	08 2f       	mov	r16, r24
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    a524:	8f 2d       	mov	r24, r15
    a526:	0e 94 59 4e 	call	0x9cb2	; 0x9cb2 <solid_tile>
    a52a:	88 23       	and	r24, r24
    a52c:	91 f0       	breq	.+36     	; 0xa552 <collision_detect_level+0x1de>
    a52e:	ef 89       	ldd	r30, Y+23	; 0x17
    a530:	f8 8d       	ldd	r31, Y+24	; 0x18
    a532:	64 81       	ldd	r22, Z+4	; 0x04
    a534:	75 81       	ldd	r23, Z+5	; 0x05
    a536:	86 81       	ldd	r24, Z+6	; 0x06
    a538:	97 81       	ldd	r25, Z+7	; 0x07
    a53a:	0e 94 b8 67 	call	0xcf70	; 0xcf70 <__fixunssfsi>
    a53e:	dc 01       	movw	r26, r24
    a540:	cb 01       	movw	r24, r22
    a542:	28 e0       	ldi	r18, 0x08	; 8
    a544:	48 e0       	ldi	r20, 0x08	; 8
    a546:	6a 81       	ldd	r22, Y+2	; 0x02
    a548:	7b 81       	ldd	r23, Y+3	; 0x03
    a54a:	0e 94 a6 51 	call	0xa34c	; 0xa34c <pixel_overlap>
    a54e:	84 30       	cpi	r24, 0x04	; 4
    a550:	c8 f4       	brcc	.+50     	; 0xa584 <collision_detect_level+0x210>
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    a552:	80 2f       	mov	r24, r16
    a554:	0e 94 59 4e 	call	0x9cb2	; 0x9cb2 <solid_tile>
		{
			if (s->vy < 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, y0_tile);
				lt2 = get_level_tile(game.current_level, x1_tile + x, y0_tile);
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    a558:	88 23       	and	r24, r24
    a55a:	51 f1       	breq	.+84     	; 0xa5b0 <collision_detect_level+0x23c>
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    a55c:	af 89       	ldd	r26, Y+23	; 0x17
    a55e:	b8 8d       	ldd	r27, Y+24	; 0x18
    a560:	14 96       	adiw	r26, 0x04	; 4
    a562:	6d 91       	ld	r22, X+
    a564:	7d 91       	ld	r23, X+
    a566:	8d 91       	ld	r24, X+
    a568:	9c 91       	ld	r25, X
    a56a:	17 97       	sbiw	r26, 0x07	; 7
    a56c:	0e 94 b8 67 	call	0xcf70	; 0xcf70 <__fixunssfsi>
    a570:	dc 01       	movw	r26, r24
    a572:	cb 01       	movw	r24, r22
    a574:	28 e0       	ldi	r18, 0x08	; 8
    a576:	48 e0       	ldi	r20, 0x08	; 8
    a578:	6c 81       	ldd	r22, Y+4	; 0x04
    a57a:	7d 81       	ldd	r23, Y+5	; 0x05
    a57c:	0e 94 a6 51 	call	0xa34c	; 0xa34c <pixel_overlap>
    a580:	84 30       	cpi	r24, 0x04	; 4
    a582:	b0 f0       	brcs	.+44     	; 0xa5b0 <collision_detect_level+0x23c>
				{
					s->vy =  0;
    a584:	ef 89       	ldd	r30, Y+23	; 0x17
    a586:	f8 8d       	ldd	r31, Y+24	; 0x18
    a588:	10 82       	st	Z, r1
    a58a:	11 82       	std	Z+1, r1	; 0x01
    a58c:	12 82       	std	Z+2, r1	; 0x02
    a58e:	13 82       	std	Z+3, r1	; 0x03
					s->y = (y0_tile + 1) * 8;
    a590:	69 85       	ldd	r22, Y+9	; 0x09
    a592:	7a 85       	ldd	r23, Y+10	; 0x0a
    a594:	8b 85       	ldd	r24, Y+11	; 0x0b
    a596:	9c 85       	ldd	r25, Y+12	; 0x0c
    a598:	0e 94 e4 67 	call	0xcfc8	; 0xcfc8 <__floatunsisf>
    a59c:	af 89       	ldd	r26, Y+23	; 0x17
    a59e:	b8 8d       	ldd	r27, Y+24	; 0x18
    a5a0:	18 96       	adiw	r26, 0x08	; 8
    a5a2:	6d 93       	st	X+, r22
    a5a4:	7d 93       	st	X+, r23
    a5a6:	8d 93       	st	X+, r24
    a5a8:	9c 93       	st	X, r25
    a5aa:	1b 97       	sbiw	r26, 0x0b	; 11
					result = 1;
    a5ac:	b1 e0       	ldi	r27, 0x01	; 1
    a5ae:	b9 83       	std	Y+1, r27	; 0x01
				}
			}
			if (s->vy > 0)
    a5b0:	20 e0       	ldi	r18, 0x00	; 0
    a5b2:	30 e0       	ldi	r19, 0x00	; 0
    a5b4:	a9 01       	movw	r20, r18
    a5b6:	ef 89       	ldd	r30, Y+23	; 0x17
    a5b8:	f8 8d       	ldd	r31, Y+24	; 0x18
    a5ba:	60 81       	ld	r22, Z
    a5bc:	71 81       	ldd	r23, Z+1	; 0x01
    a5be:	82 81       	ldd	r24, Z+2	; 0x02
    a5c0:	93 81       	ldd	r25, Z+3	; 0x03
    a5c2:	0e 94 96 68 	call	0xd12c	; 0xd12c <__gesf2>
    a5c6:	18 16       	cp	r1, r24
    a5c8:	0c f0       	brlt	.+2      	; 0xa5cc <collision_detect_level+0x258>
    a5ca:	91 c0       	rjmp	.+290    	; 0xa6ee <collision_detect_level+0x37a>
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, (s->y + tile_height*8 - 1) / 8);
    a5cc:	6d 85       	ldd	r22, Y+13	; 0x0d
    a5ce:	7e 85       	ldd	r23, Y+14	; 0x0e
    a5d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    a5d2:	98 89       	ldd	r25, Y+16	; 0x10
    a5d4:	0e 94 e6 67 	call	0xcfcc	; 0xcfcc <__floatsisf>
    a5d8:	6b 01       	movw	r12, r22
    a5da:	7c 01       	movw	r14, r24
    a5dc:	af 89       	ldd	r26, Y+23	; 0x17
    a5de:	b8 8d       	ldd	r27, Y+24	; 0x18
    a5e0:	18 96       	adiw	r26, 0x08	; 8
    a5e2:	2d 91       	ld	r18, X+
    a5e4:	3d 91       	ld	r19, X+
    a5e6:	4d 91       	ld	r20, X+
    a5e8:	5c 91       	ld	r21, X
    a5ea:	1b 97       	sbiw	r26, 0x0b	; 11
    a5ec:	0e 94 50 67 	call	0xcea0	; 0xcea0 <__addsf3>
    a5f0:	20 e0       	ldi	r18, 0x00	; 0
    a5f2:	30 e0       	ldi	r19, 0x00	; 0
    a5f4:	40 e8       	ldi	r20, 0x80	; 128
    a5f6:	5f e3       	ldi	r21, 0x3F	; 63
    a5f8:	0e 94 4f 67 	call	0xce9e	; 0xce9e <__subsf3>
    a5fc:	20 e0       	ldi	r18, 0x00	; 0
    a5fe:	30 e0       	ldi	r19, 0x00	; 0
    a600:	40 e0       	ldi	r20, 0x00	; 0
    a602:	5e e3       	ldi	r21, 0x3E	; 62
    a604:	0e 94 9a 68 	call	0xd134	; 0xd134 <__mulsf3>
    a608:	0e 94 b8 67 	call	0xcf70	; 0xcf70 <__fixunssfsi>
    a60c:	ab 01       	movw	r20, r22
    a60e:	b3 01       	movw	r22, r6
    a610:	80 91 a1 0f 	lds	r24, 0x0FA1
    a614:	90 91 a2 0f 	lds	r25, 0x0FA2
    a618:	0e 94 88 4d 	call	0x9b10	; 0x9b10 <get_level_tile>
    a61c:	08 2f       	mov	r16, r24
				lt2 = get_level_tile(game.current_level, x1_tile + x, (s->y + tile_height*8 - 1) / 8);
    a61e:	ef 89       	ldd	r30, Y+23	; 0x17
    a620:	f8 8d       	ldd	r31, Y+24	; 0x18
    a622:	20 85       	ldd	r18, Z+8	; 0x08
    a624:	31 85       	ldd	r19, Z+9	; 0x09
    a626:	42 85       	ldd	r20, Z+10	; 0x0a
    a628:	53 85       	ldd	r21, Z+11	; 0x0b
    a62a:	c7 01       	movw	r24, r14
    a62c:	b6 01       	movw	r22, r12
    a62e:	0e 94 50 67 	call	0xcea0	; 0xcea0 <__addsf3>
    a632:	20 e0       	ldi	r18, 0x00	; 0
    a634:	30 e0       	ldi	r19, 0x00	; 0
    a636:	40 e8       	ldi	r20, 0x80	; 128
    a638:	5f e3       	ldi	r21, 0x3F	; 63
    a63a:	0e 94 4f 67 	call	0xce9e	; 0xce9e <__subsf3>
    a63e:	20 e0       	ldi	r18, 0x00	; 0
    a640:	30 e0       	ldi	r19, 0x00	; 0
    a642:	40 e0       	ldi	r20, 0x00	; 0
    a644:	5e e3       	ldi	r21, 0x3E	; 62
    a646:	0e 94 9a 68 	call	0xd134	; 0xd134 <__mulsf3>
    a64a:	0e 94 b8 67 	call	0xcf70	; 0xcf70 <__fixunssfsi>
    a64e:	ab 01       	movw	r20, r22
    a650:	b2 01       	movw	r22, r4
    a652:	80 91 a1 0f 	lds	r24, 0x0FA1
    a656:	90 91 a2 0f 	lds	r25, 0x0FA2
    a65a:	0e 94 88 4d 	call	0x9b10	; 0x9b10 <get_level_tile>
    a65e:	f8 2e       	mov	r15, r24
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) || 
    a660:	80 2f       	mov	r24, r16
    a662:	0e 94 59 4e 	call	0x9cb2	; 0x9cb2 <solid_tile>
    a666:	88 23       	and	r24, r24
    a668:	a1 f0       	breq	.+40     	; 0xa692 <collision_detect_level+0x31e>
    a66a:	af 89       	ldd	r26, Y+23	; 0x17
    a66c:	b8 8d       	ldd	r27, Y+24	; 0x18
    a66e:	14 96       	adiw	r26, 0x04	; 4
    a670:	6d 91       	ld	r22, X+
    a672:	7d 91       	ld	r23, X+
    a674:	8d 91       	ld	r24, X+
    a676:	9c 91       	ld	r25, X
    a678:	17 97       	sbiw	r26, 0x07	; 7
    a67a:	0e 94 b8 67 	call	0xcf70	; 0xcf70 <__fixunssfsi>
    a67e:	dc 01       	movw	r26, r24
    a680:	cb 01       	movw	r24, r22
    a682:	28 e0       	ldi	r18, 0x08	; 8
    a684:	48 e0       	ldi	r20, 0x08	; 8
    a686:	6a 81       	ldd	r22, Y+2	; 0x02
    a688:	7b 81       	ldd	r23, Y+3	; 0x03
    a68a:	0e 94 a6 51 	call	0xa34c	; 0xa34c <pixel_overlap>
    a68e:	84 30       	cpi	r24, 0x04	; 4
    a690:	b8 f4       	brcc	.+46     	; 0xa6c0 <collision_detect_level+0x34c>
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    a692:	8f 2d       	mov	r24, r15
    a694:	0e 94 59 4e 	call	0x9cb2	; 0x9cb2 <solid_tile>
			}
			if (s->vy > 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, (s->y + tile_height*8 - 1) / 8);
				lt2 = get_level_tile(game.current_level, x1_tile + x, (s->y + tile_height*8 - 1) / 8);
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) || 
    a698:	88 23       	and	r24, r24
    a69a:	49 f1       	breq	.+82     	; 0xa6ee <collision_detect_level+0x37a>
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    a69c:	ef 89       	ldd	r30, Y+23	; 0x17
    a69e:	f8 8d       	ldd	r31, Y+24	; 0x18
    a6a0:	64 81       	ldd	r22, Z+4	; 0x04
    a6a2:	75 81       	ldd	r23, Z+5	; 0x05
    a6a4:	86 81       	ldd	r24, Z+6	; 0x06
    a6a6:	97 81       	ldd	r25, Z+7	; 0x07
    a6a8:	0e 94 b8 67 	call	0xcf70	; 0xcf70 <__fixunssfsi>
    a6ac:	dc 01       	movw	r26, r24
    a6ae:	cb 01       	movw	r24, r22
    a6b0:	28 e0       	ldi	r18, 0x08	; 8
    a6b2:	48 e0       	ldi	r20, 0x08	; 8
    a6b4:	6c 81       	ldd	r22, Y+4	; 0x04
    a6b6:	7d 81       	ldd	r23, Y+5	; 0x05
    a6b8:	0e 94 a6 51 	call	0xa34c	; 0xa34c <pixel_overlap>
    a6bc:	84 30       	cpi	r24, 0x04	; 4
    a6be:	b8 f0       	brcs	.+46     	; 0xa6ee <collision_detect_level+0x37a>
				{
					s->vy =  0;
    a6c0:	af 89       	ldd	r26, Y+23	; 0x17
    a6c2:	b8 8d       	ldd	r27, Y+24	; 0x18
    a6c4:	1d 92       	st	X+, r1
    a6c6:	1d 92       	st	X+, r1
    a6c8:	1d 92       	st	X+, r1
    a6ca:	1c 92       	st	X, r1
    a6cc:	13 97       	sbiw	r26, 0x03	; 3
					s->gravity = 0;
    a6ce:	1e 96       	adiw	r26, 0x0e	; 14
    a6d0:	1c 92       	st	X, r1
					s->y = y0_tile * 8;
    a6d2:	6b 89       	ldd	r22, Y+19	; 0x13
    a6d4:	7c 89       	ldd	r23, Y+20	; 0x14
    a6d6:	8d 89       	ldd	r24, Y+21	; 0x15
    a6d8:	9e 89       	ldd	r25, Y+22	; 0x16
    a6da:	0e 94 e4 67 	call	0xcfc8	; 0xcfc8 <__floatunsisf>
    a6de:	ef 89       	ldd	r30, Y+23	; 0x17
    a6e0:	f8 8d       	ldd	r31, Y+24	; 0x18
    a6e2:	60 87       	std	Z+8, r22	; 0x08
    a6e4:	71 87       	std	Z+9, r23	; 0x09
    a6e6:	82 87       	std	Z+10, r24	; 0x0a
    a6e8:	93 87       	std	Z+11, r25	; 0x0b
					result = 1;
    a6ea:	f1 e0       	ldi	r31, 0x01	; 1
    a6ec:	f9 83       	std	Y+1, r31	; 0x01
    a6ee:	2f ef       	ldi	r18, 0xFF	; 255
    a6f0:	62 1a       	sub	r6, r18
    a6f2:	72 0a       	sbc	r7, r18
    a6f4:	3f ef       	ldi	r19, 0xFF	; 255
    a6f6:	43 1a       	sub	r4, r19
    a6f8:	53 0a       	sbc	r5, r19
    a6fa:	ef ce       	rjmp	.-546    	; 0xa4da <collision_detect_level+0x166>
	u16 x0_tile = s->x / 8;
	u16 y0_tile = s->y / 8;
	u16 x1_tile = (s->x+7) / 8;
	u16 y1_tile = (s->y+7) / 8;
	u8 lt1, lt2;
	u8 result = 0;
    a6fc:	19 82       	std	Y+1, r1	; 0x01
			}
		}
	}
	
	// Left and Right
	if (s->vx != 0)
    a6fe:	af 89       	ldd	r26, Y+23	; 0x17
    a700:	b8 8d       	ldd	r27, Y+24	; 0x18
    a702:	1c 96       	adiw	r26, 0x0c	; 12
    a704:	8d 91       	ld	r24, X+
    a706:	9c 91       	ld	r25, X
    a708:	1d 97       	sbiw	r26, 0x0d	; 13
    a70a:	89 2b       	or	r24, r25
    a70c:	09 f4       	brne	.+2      	; 0xa710 <collision_detect_level+0x39c>
    a70e:	54 c1       	rjmp	.+680    	; 0xa9b8 <collision_detect_level+0x644>
	{
		y0_tile = s->y / 8;
    a710:	18 96       	adiw	r26, 0x08	; 8
    a712:	cd 90       	ld	r12, X+
    a714:	dd 90       	ld	r13, X+
    a716:	ed 90       	ld	r14, X+
    a718:	fc 90       	ld	r15, X
    a71a:	1b 97       	sbiw	r26, 0x0b	; 11
    a71c:	20 e0       	ldi	r18, 0x00	; 0
    a71e:	30 e0       	ldi	r19, 0x00	; 0
    a720:	40 e0       	ldi	r20, 0x00	; 0
    a722:	5e e3       	ldi	r21, 0x3E	; 62
    a724:	c7 01       	movw	r24, r14
    a726:	b6 01       	movw	r22, r12
    a728:	0e 94 9a 68 	call	0xd134	; 0xd134 <__mulsf3>
    a72c:	0e 94 b8 67 	call	0xcf70	; 0xcf70 <__fixunssfsi>
    a730:	2b 01       	movw	r4, r22
    a732:	3c 01       	movw	r6, r24
    a734:	6d 87       	std	Y+13, r22	; 0x0d
		y1_tile = (s->y+7) / 8;
    a736:	20 e0       	ldi	r18, 0x00	; 0
    a738:	30 e0       	ldi	r19, 0x00	; 0
    a73a:	40 ee       	ldi	r20, 0xE0	; 224
    a73c:	50 e4       	ldi	r21, 0x40	; 64
    a73e:	c7 01       	movw	r24, r14
    a740:	b6 01       	movw	r22, r12
    a742:	0e 94 50 67 	call	0xcea0	; 0xcea0 <__addsf3>
    a746:	20 e0       	ldi	r18, 0x00	; 0
    a748:	30 e0       	ldi	r19, 0x00	; 0
    a74a:	40 e0       	ldi	r20, 0x00	; 0
    a74c:	5e e3       	ldi	r21, 0x3E	; 62
    a74e:	0e 94 9a 68 	call	0xd134	; 0xd134 <__mulsf3>
    a752:	0e 94 b8 67 	call	0xcf70	; 0xcf70 <__fixunssfsi>
		{
			if (s->vx < 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile, y0_tile + y);
				lt2 = get_level_tile(game.current_level, x0_tile, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    a756:	12 01       	movw	r2, r4
    a758:	83 e0       	ldi	r24, 0x03	; 3
    a75a:	22 0c       	add	r2, r2
    a75c:	33 1c       	adc	r3, r3
    a75e:	8a 95       	dec	r24
    a760:	e1 f7       	brne	.-8      	; 0xa75a <collision_detect_level+0x3e6>
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    a762:	fb 01       	movw	r30, r22
    a764:	93 e0       	ldi	r25, 0x03	; 3
    a766:	ee 0f       	add	r30, r30
    a768:	ff 1f       	adc	r31, r31
    a76a:	9a 95       	dec	r25
    a76c:	e1 f7       	brne	.-8      	; 0xa766 <collision_detect_level+0x3f2>
    a76e:	fb 83       	std	Y+3, r31	; 0x03
    a770:	ea 83       	std	Y+2, r30	; 0x02
				{
					s->vx =  0;
					s->x = (x0_tile + 1) * 8;
    a772:	ff ef       	ldi	r31, 0xFF	; 255
    a774:	8f 1a       	sub	r8, r31
    a776:	9f 0a       	sbc	r9, r31
    a778:	94 01       	movw	r18, r8
    a77a:	43 e0       	ldi	r20, 0x03	; 3
    a77c:	22 0f       	add	r18, r18
    a77e:	33 1f       	adc	r19, r19
    a780:	4a 95       	dec	r20
    a782:	e1 f7       	brne	.-8      	; 0xa77c <collision_detect_level+0x408>
				}
			}
			
			if (s->vx > 0)
			{
				lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y0_tile + y);
    a784:	a8 e0       	ldi	r26, 0x08	; 8
    a786:	1a 9f       	mul	r17, r26
    a788:	a0 01       	movw	r20, r0
    a78a:	11 24       	eor	r1, r1
				lt2 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vx =  0;
					s->x = x0_tile * 8;
    a78c:	49 01       	movw	r8, r18
    a78e:	b8 e0       	ldi	r27, 0x08	; 8
    a790:	8b 1a       	sub	r8, r27
    a792:	91 08       	sbc	r9, r1
	// Left and Right
	if (s->vx != 0)
	{
		y0_tile = s->y / 8;
		y1_tile = (s->y+7) / 8;
		for (u8 y = 0; y < tile_height; y++)
    a794:	6b 01       	movw	r12, r22
    a796:	82 01       	movw	r16, r4
				lt2 = get_level_tile(game.current_level, x0_tile, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vx =  0;
					s->x = (x0_tile + 1) * 8;
    a798:	b9 01       	movw	r22, r18
    a79a:	80 e0       	ldi	r24, 0x00	; 0
    a79c:	90 e0       	ldi	r25, 0x00	; 0
    a79e:	6c 83       	std	Y+4, r22	; 0x04
    a7a0:	7d 83       	std	Y+5, r23	; 0x05
    a7a2:	8e 83       	std	Y+6, r24	; 0x06
    a7a4:	9f 83       	std	Y+7, r25	; 0x07
				}
			}
			
			if (s->vx > 0)
			{
				lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y0_tile + y);
    a7a6:	ca 01       	movw	r24, r20
    a7a8:	aa 27       	eor	r26, r26
    a7aa:	97 fd       	sbrc	r25, 7
    a7ac:	a0 95       	com	r26
    a7ae:	ba 2f       	mov	r27, r26
    a7b0:	89 87       	std	Y+9, r24	; 0x09
    a7b2:	9a 87       	std	Y+10, r25	; 0x0a
    a7b4:	ab 87       	std	Y+11, r26	; 0x0b
    a7b6:	bc 87       	std	Y+12, r27	; 0x0c
				lt2 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vx =  0;
					s->x = x0_tile * 8;
    a7b8:	a1 2c       	mov	r10, r1
    a7ba:	b1 2c       	mov	r11, r1
    a7bc:	80 2f       	mov	r24, r16
    a7be:	3d 85       	ldd	r19, Y+13	; 0x0d
    a7c0:	83 1b       	sub	r24, r19
	// Left and Right
	if (s->vx != 0)
	{
		y0_tile = s->y / 8;
		y1_tile = (s->y+7) / 8;
		for (u8 y = 0; y < tile_height; y++)
    a7c2:	49 89       	ldd	r20, Y+17	; 0x11
    a7c4:	84 17       	cp	r24, r20
    a7c6:	08 f0       	brcs	.+2      	; 0xa7ca <collision_detect_level+0x456>
    a7c8:	f7 c0       	rjmp	.+494    	; 0xa9b8 <collision_detect_level+0x644>
		{
			if (s->vx < 0)
    a7ca:	af 89       	ldd	r26, Y+23	; 0x17
    a7cc:	b8 8d       	ldd	r27, Y+24	; 0x18
    a7ce:	1c 96       	adiw	r26, 0x0c	; 12
    a7d0:	8d 91       	ld	r24, X+
    a7d2:	9c 91       	ld	r25, X
    a7d4:	1d 97       	sbiw	r26, 0x0d	; 13
    a7d6:	97 ff       	sbrs	r25, 7
    a7d8:	57 c0       	rjmp	.+174    	; 0xa888 <collision_detect_level+0x514>
			{
				lt1 = get_level_tile(game.current_level, x0_tile, y0_tile + y);
    a7da:	a8 01       	movw	r20, r16
    a7dc:	68 85       	ldd	r22, Y+8	; 0x08
    a7de:	7a 89       	ldd	r23, Y+18	; 0x12
    a7e0:	80 91 a1 0f 	lds	r24, 0x0FA1
    a7e4:	90 91 a2 0f 	lds	r25, 0x0FA2
    a7e8:	0e 94 88 4d 	call	0x9b10	; 0x9b10 <get_level_tile>
    a7ec:	78 2e       	mov	r7, r24
				lt2 = get_level_tile(game.current_level, x0_tile, y1_tile + y);
    a7ee:	a6 01       	movw	r20, r12
    a7f0:	68 85       	ldd	r22, Y+8	; 0x08
    a7f2:	7a 89       	ldd	r23, Y+18	; 0x12
    a7f4:	80 91 a1 0f 	lds	r24, 0x0FA1
    a7f8:	90 91 a2 0f 	lds	r25, 0x0FA2
    a7fc:	0e 94 88 4d 	call	0x9b10	; 0x9b10 <get_level_tile>
    a800:	e8 2e       	mov	r14, r24
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    a802:	87 2d       	mov	r24, r7
    a804:	0e 94 59 4e 	call	0x9cb2	; 0x9cb2 <solid_tile>
    a808:	88 23       	and	r24, r24
    a80a:	89 f0       	breq	.+34     	; 0xa82e <collision_detect_level+0x4ba>
    a80c:	ef 89       	ldd	r30, Y+23	; 0x17
    a80e:	f8 8d       	ldd	r31, Y+24	; 0x18
    a810:	60 85       	ldd	r22, Z+8	; 0x08
    a812:	71 85       	ldd	r23, Z+9	; 0x09
    a814:	82 85       	ldd	r24, Z+10	; 0x0a
    a816:	93 85       	ldd	r25, Z+11	; 0x0b
    a818:	0e 94 b8 67 	call	0xcf70	; 0xcf70 <__fixunssfsi>
    a81c:	dc 01       	movw	r26, r24
    a81e:	cb 01       	movw	r24, r22
    a820:	28 e0       	ldi	r18, 0x08	; 8
    a822:	48 e0       	ldi	r20, 0x08	; 8
    a824:	b1 01       	movw	r22, r2
    a826:	0e 94 a6 51 	call	0xa34c	; 0xa34c <pixel_overlap>
    a82a:	84 30       	cpi	r24, 0x04	; 4
    a82c:	c8 f4       	brcc	.+50     	; 0xa860 <collision_detect_level+0x4ec>
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    a82e:	8e 2d       	mov	r24, r14
    a830:	0e 94 59 4e 	call	0x9cb2	; 0x9cb2 <solid_tile>
		{
			if (s->vx < 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile, y0_tile + y);
				lt2 = get_level_tile(game.current_level, x0_tile, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    a834:	88 23       	and	r24, r24
    a836:	41 f1       	breq	.+80     	; 0xa888 <collision_detect_level+0x514>
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    a838:	af 89       	ldd	r26, Y+23	; 0x17
    a83a:	b8 8d       	ldd	r27, Y+24	; 0x18
    a83c:	18 96       	adiw	r26, 0x08	; 8
    a83e:	6d 91       	ld	r22, X+
    a840:	7d 91       	ld	r23, X+
    a842:	8d 91       	ld	r24, X+
    a844:	9c 91       	ld	r25, X
    a846:	1b 97       	sbiw	r26, 0x0b	; 11
    a848:	0e 94 b8 67 	call	0xcf70	; 0xcf70 <__fixunssfsi>
    a84c:	dc 01       	movw	r26, r24
    a84e:	cb 01       	movw	r24, r22
    a850:	28 e0       	ldi	r18, 0x08	; 8
    a852:	48 e0       	ldi	r20, 0x08	; 8
    a854:	6a 81       	ldd	r22, Y+2	; 0x02
    a856:	7b 81       	ldd	r23, Y+3	; 0x03
    a858:	0e 94 a6 51 	call	0xa34c	; 0xa34c <pixel_overlap>
    a85c:	84 30       	cpi	r24, 0x04	; 4
    a85e:	a0 f0       	brcs	.+40     	; 0xa888 <collision_detect_level+0x514>
				{
					s->vx =  0;
    a860:	ef 89       	ldd	r30, Y+23	; 0x17
    a862:	f8 8d       	ldd	r31, Y+24	; 0x18
    a864:	15 86       	std	Z+13, r1	; 0x0d
    a866:	14 86       	std	Z+12, r1	; 0x0c
					s->x = (x0_tile + 1) * 8;
    a868:	6c 81       	ldd	r22, Y+4	; 0x04
    a86a:	7d 81       	ldd	r23, Y+5	; 0x05
    a86c:	8e 81       	ldd	r24, Y+6	; 0x06
    a86e:	9f 81       	ldd	r25, Y+7	; 0x07
    a870:	0e 94 e4 67 	call	0xcfc8	; 0xcfc8 <__floatunsisf>
    a874:	af 89       	ldd	r26, Y+23	; 0x17
    a876:	b8 8d       	ldd	r27, Y+24	; 0x18
    a878:	14 96       	adiw	r26, 0x04	; 4
    a87a:	6d 93       	st	X+, r22
    a87c:	7d 93       	st	X+, r23
    a87e:	8d 93       	st	X+, r24
    a880:	9c 93       	st	X, r25
    a882:	17 97       	sbiw	r26, 0x07	; 7
					result = 1;
    a884:	b1 e0       	ldi	r27, 0x01	; 1
    a886:	b9 83       	std	Y+1, r27	; 0x01
				}
			}
			
			if (s->vx > 0)
    a888:	ef 89       	ldd	r30, Y+23	; 0x17
    a88a:	f8 8d       	ldd	r31, Y+24	; 0x18
    a88c:	84 85       	ldd	r24, Z+12	; 0x0c
    a88e:	95 85       	ldd	r25, Z+13	; 0x0d
    a890:	18 16       	cp	r1, r24
    a892:	19 06       	cpc	r1, r25
    a894:	0c f0       	brlt	.+2      	; 0xa898 <collision_detect_level+0x524>
    a896:	89 c0       	rjmp	.+274    	; 0xa9aa <collision_detect_level+0x636>
			{
				lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y0_tile + y);
    a898:	69 85       	ldd	r22, Y+9	; 0x09
    a89a:	7a 85       	ldd	r23, Y+10	; 0x0a
    a89c:	8b 85       	ldd	r24, Y+11	; 0x0b
    a89e:	9c 85       	ldd	r25, Y+12	; 0x0c
    a8a0:	0e 94 e6 67 	call	0xcfcc	; 0xcfcc <__floatsisf>
    a8a4:	2b 01       	movw	r4, r22
    a8a6:	3c 01       	movw	r6, r24
    a8a8:	af 89       	ldd	r26, Y+23	; 0x17
    a8aa:	b8 8d       	ldd	r27, Y+24	; 0x18
    a8ac:	14 96       	adiw	r26, 0x04	; 4
    a8ae:	2d 91       	ld	r18, X+
    a8b0:	3d 91       	ld	r19, X+
    a8b2:	4d 91       	ld	r20, X+
    a8b4:	5c 91       	ld	r21, X
    a8b6:	17 97       	sbiw	r26, 0x07	; 7
    a8b8:	0e 94 50 67 	call	0xcea0	; 0xcea0 <__addsf3>
    a8bc:	20 e0       	ldi	r18, 0x00	; 0
    a8be:	30 e0       	ldi	r19, 0x00	; 0
    a8c0:	40 e8       	ldi	r20, 0x80	; 128
    a8c2:	5f e3       	ldi	r21, 0x3F	; 63
    a8c4:	0e 94 4f 67 	call	0xce9e	; 0xce9e <__subsf3>
    a8c8:	20 e0       	ldi	r18, 0x00	; 0
    a8ca:	30 e0       	ldi	r19, 0x00	; 0
    a8cc:	40 e0       	ldi	r20, 0x00	; 0
    a8ce:	5e e3       	ldi	r21, 0x3E	; 62
    a8d0:	0e 94 9a 68 	call	0xd134	; 0xd134 <__mulsf3>
    a8d4:	0e 94 b8 67 	call	0xcf70	; 0xcf70 <__fixunssfsi>
    a8d8:	a8 01       	movw	r20, r16
    a8da:	80 91 a1 0f 	lds	r24, 0x0FA1
    a8de:	90 91 a2 0f 	lds	r25, 0x0FA2
    a8e2:	0e 94 88 4d 	call	0x9b10	; 0x9b10 <get_level_tile>
    a8e6:	e8 2e       	mov	r14, r24
				lt2 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y1_tile + y);
    a8e8:	ef 89       	ldd	r30, Y+23	; 0x17
    a8ea:	f8 8d       	ldd	r31, Y+24	; 0x18
    a8ec:	24 81       	ldd	r18, Z+4	; 0x04
    a8ee:	35 81       	ldd	r19, Z+5	; 0x05
    a8f0:	46 81       	ldd	r20, Z+6	; 0x06
    a8f2:	57 81       	ldd	r21, Z+7	; 0x07
    a8f4:	c3 01       	movw	r24, r6
    a8f6:	b2 01       	movw	r22, r4
    a8f8:	0e 94 50 67 	call	0xcea0	; 0xcea0 <__addsf3>
    a8fc:	20 e0       	ldi	r18, 0x00	; 0
    a8fe:	30 e0       	ldi	r19, 0x00	; 0
    a900:	40 e8       	ldi	r20, 0x80	; 128
    a902:	5f e3       	ldi	r21, 0x3F	; 63
    a904:	0e 94 4f 67 	call	0xce9e	; 0xce9e <__subsf3>
    a908:	20 e0       	ldi	r18, 0x00	; 0
    a90a:	30 e0       	ldi	r19, 0x00	; 0
    a90c:	40 e0       	ldi	r20, 0x00	; 0
    a90e:	5e e3       	ldi	r21, 0x3E	; 62
    a910:	0e 94 9a 68 	call	0xd134	; 0xd134 <__mulsf3>
    a914:	0e 94 b8 67 	call	0xcf70	; 0xcf70 <__fixunssfsi>
    a918:	a6 01       	movw	r20, r12
    a91a:	80 91 a1 0f 	lds	r24, 0x0FA1
    a91e:	90 91 a2 0f 	lds	r25, 0x0FA2
    a922:	0e 94 88 4d 	call	0x9b10	; 0x9b10 <get_level_tile>
    a926:	78 2e       	mov	r7, r24
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    a928:	8e 2d       	mov	r24, r14
    a92a:	0e 94 59 4e 	call	0x9cb2	; 0x9cb2 <solid_tile>
    a92e:	88 23       	and	r24, r24
    a930:	99 f0       	breq	.+38     	; 0xa958 <collision_detect_level+0x5e4>
    a932:	af 89       	ldd	r26, Y+23	; 0x17
    a934:	b8 8d       	ldd	r27, Y+24	; 0x18
    a936:	18 96       	adiw	r26, 0x08	; 8
    a938:	6d 91       	ld	r22, X+
    a93a:	7d 91       	ld	r23, X+
    a93c:	8d 91       	ld	r24, X+
    a93e:	9c 91       	ld	r25, X
    a940:	1b 97       	sbiw	r26, 0x0b	; 11
    a942:	0e 94 b8 67 	call	0xcf70	; 0xcf70 <__fixunssfsi>
    a946:	dc 01       	movw	r26, r24
    a948:	cb 01       	movw	r24, r22
    a94a:	28 e0       	ldi	r18, 0x08	; 8
    a94c:	48 e0       	ldi	r20, 0x08	; 8
    a94e:	b1 01       	movw	r22, r2
    a950:	0e 94 a6 51 	call	0xa34c	; 0xa34c <pixel_overlap>
    a954:	84 30       	cpi	r24, 0x04	; 4
    a956:	b8 f4       	brcc	.+46     	; 0xa986 <collision_detect_level+0x612>
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    a958:	87 2d       	mov	r24, r7
    a95a:	0e 94 59 4e 	call	0x9cb2	; 0x9cb2 <solid_tile>
			
			if (s->vx > 0)
			{
				lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y0_tile + y);
				lt2 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    a95e:	88 23       	and	r24, r24
    a960:	21 f1       	breq	.+72     	; 0xa9aa <collision_detect_level+0x636>
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    a962:	ef 89       	ldd	r30, Y+23	; 0x17
    a964:	f8 8d       	ldd	r31, Y+24	; 0x18
    a966:	60 85       	ldd	r22, Z+8	; 0x08
    a968:	71 85       	ldd	r23, Z+9	; 0x09
    a96a:	82 85       	ldd	r24, Z+10	; 0x0a
    a96c:	93 85       	ldd	r25, Z+11	; 0x0b
    a96e:	0e 94 b8 67 	call	0xcf70	; 0xcf70 <__fixunssfsi>
    a972:	dc 01       	movw	r26, r24
    a974:	cb 01       	movw	r24, r22
    a976:	28 e0       	ldi	r18, 0x08	; 8
    a978:	48 e0       	ldi	r20, 0x08	; 8
    a97a:	6a 81       	ldd	r22, Y+2	; 0x02
    a97c:	7b 81       	ldd	r23, Y+3	; 0x03
    a97e:	0e 94 a6 51 	call	0xa34c	; 0xa34c <pixel_overlap>
    a982:	84 30       	cpi	r24, 0x04	; 4
    a984:	90 f0       	brcs	.+36     	; 0xa9aa <collision_detect_level+0x636>
				{
					s->vx =  0;
    a986:	af 89       	ldd	r26, Y+23	; 0x17
    a988:	b8 8d       	ldd	r27, Y+24	; 0x18
    a98a:	1d 96       	adiw	r26, 0x0d	; 13
    a98c:	1c 92       	st	X, r1
    a98e:	1e 92       	st	-X, r1
    a990:	1c 97       	sbiw	r26, 0x0c	; 12
					s->x = x0_tile * 8;
    a992:	c5 01       	movw	r24, r10
    a994:	b4 01       	movw	r22, r8
    a996:	0e 94 e4 67 	call	0xcfc8	; 0xcfc8 <__floatunsisf>
    a99a:	ef 89       	ldd	r30, Y+23	; 0x17
    a99c:	f8 8d       	ldd	r31, Y+24	; 0x18
    a99e:	64 83       	std	Z+4, r22	; 0x04
    a9a0:	75 83       	std	Z+5, r23	; 0x05
    a9a2:	86 83       	std	Z+6, r24	; 0x06
    a9a4:	97 83       	std	Z+7, r25	; 0x07
					result = 1;
    a9a6:	f1 e0       	ldi	r31, 0x01	; 1
    a9a8:	f9 83       	std	Y+1, r31	; 0x01
    a9aa:	0f 5f       	subi	r16, 0xFF	; 255
    a9ac:	1f 4f       	sbci	r17, 0xFF	; 255
    a9ae:	2f ef       	ldi	r18, 0xFF	; 255
    a9b0:	c2 1a       	sub	r12, r18
    a9b2:	d2 0a       	sbc	r13, r18
    a9b4:	03 cf       	rjmp	.-506    	; 0xa7bc <collision_detect_level+0x448>
	u16 y1_tile = (s->y+7) / 8;
	u8 lt1, lt2;
	u8 result = 0;
	
	// Only if moving on planet
	if (is_space() || (s->vx == 0 && s->vy == 0)) return result;
    a9b6:	19 82       	std	Y+1, r1	; 0x01
				}
			}
		}
	}
	return result;
}
    a9b8:	89 81       	ldd	r24, Y+1	; 0x01
    a9ba:	68 96       	adiw	r28, 0x18	; 24
    a9bc:	0f b6       	in	r0, 0x3f	; 63
    a9be:	f8 94       	cli
    a9c0:	de bf       	out	0x3e, r29	; 62
    a9c2:	0f be       	out	0x3f, r0	; 63
    a9c4:	cd bf       	out	0x3d, r28	; 61
    a9c6:	df 91       	pop	r29
    a9c8:	cf 91       	pop	r28
    a9ca:	1f 91       	pop	r17
    a9cc:	0f 91       	pop	r16
    a9ce:	ff 90       	pop	r15
    a9d0:	ef 90       	pop	r14
    a9d2:	df 90       	pop	r13
    a9d4:	cf 90       	pop	r12
    a9d6:	bf 90       	pop	r11
    a9d8:	af 90       	pop	r10
    a9da:	9f 90       	pop	r9
    a9dc:	8f 90       	pop	r8
    a9de:	7f 90       	pop	r7
    a9e0:	6f 90       	pop	r6
    a9e2:	5f 90       	pop	r5
    a9e4:	4f 90       	pop	r4
    a9e6:	3f 90       	pop	r3
    a9e8:	2f 90       	pop	r2
    a9ea:	08 95       	ret

0000a9ec <animate_shot>:
		game.player.active_shots++;
	}
}

void animate_shot()
{
    a9ec:	2f 92       	push	r2
    a9ee:	3f 92       	push	r3
    a9f0:	4f 92       	push	r4
    a9f2:	5f 92       	push	r5
    a9f4:	6f 92       	push	r6
    a9f6:	7f 92       	push	r7
    a9f8:	8f 92       	push	r8
    a9fa:	9f 92       	push	r9
    a9fc:	af 92       	push	r10
    a9fe:	bf 92       	push	r11
    aa00:	cf 92       	push	r12
    aa02:	df 92       	push	r13
    aa04:	ef 92       	push	r14
    aa06:	ff 92       	push	r15
    aa08:	0f 93       	push	r16
    aa0a:	1f 93       	push	r17
    aa0c:	cf 93       	push	r28
    aa0e:	df 93       	push	r29
    aa10:	cd b7       	in	r28, 0x3d	; 61
    aa12:	de b7       	in	r29, 0x3e	; 62
    aa14:	2f 97       	sbiw	r28, 0x0f	; 15
    aa16:	0f b6       	in	r0, 0x3f	; 63
    aa18:	f8 94       	cli
    aa1a:	de bf       	out	0x3e, r29	; 62
    aa1c:	0f be       	out	0x3f, r0	; 63
    aa1e:	cd bf       	out	0x3d, r28	; 61
    aa20:	9b ee       	ldi	r25, 0xEB	; 235
    aa22:	89 2e       	mov	r8, r25
    aa24:	9d e0       	ldi	r25, 0x0D	; 13
    aa26:	99 2e       	mov	r9, r25
    aa28:	8a ed       	ldi	r24, 0xDA	; 218
    aa2a:	9d e0       	ldi	r25, 0x0D	; 13
    aa2c:	9f 87       	std	Y+15, r25	; 0x0f
    aa2e:	8e 87       	std	Y+14, r24	; 0x0e
    aa30:	9b e0       	ldi	r25, 0x0B	; 11
    aa32:	99 83       	std	Y+1, r25	; 0x01
						SFX_HIT;
						game.enemies[j].shield -= game.player.shot[i].hit_count;
						if (game.enemies[j].shield <= 0)
						{
							SFX_ENEMY_EXPLODE;
							game.enemies[j].flags = EXPLODING;
    aa34:	20 e1       	ldi	r18, 0x10	; 16
    aa36:	b2 2e       	mov	r11, r18
{
	// Animate shots
	u8 slot = ENEMY_SLOT;
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
	{
		if (game.player.shot[i].active)
    aa38:	f4 01       	movw	r30, r8
    aa3a:	80 81       	ld	r24, Z
    aa3c:	88 23       	and	r24, r24
    aa3e:	09 f4       	brne	.+2      	; 0xaa42 <animate_shot+0x56>
    aa40:	46 c1       	rjmp	.+652    	; 0xacce <animate_shot+0x2e2>
		{
			game.player.shot[i].shared.x += game.player.shot[i].shared.vx*FRAME_TIME;
    aa42:	ee 85       	ldd	r30, Y+14	; 0x0e
    aa44:	ff 85       	ldd	r31, Y+15	; 0x0f
    aa46:	64 85       	ldd	r22, Z+12	; 0x0c
    aa48:	75 85       	ldd	r23, Z+13	; 0x0d
    aa4a:	88 27       	eor	r24, r24
    aa4c:	77 fd       	sbrc	r23, 7
    aa4e:	80 95       	com	r24
    aa50:	98 2f       	mov	r25, r24
    aa52:	0e 94 e6 67 	call	0xcfcc	; 0xcfcc <__floatsisf>
    aa56:	29 e8       	ldi	r18, 0x89	; 137
    aa58:	38 e8       	ldi	r19, 0x88	; 136
    aa5a:	48 e8       	ldi	r20, 0x88	; 136
    aa5c:	5c e3       	ldi	r21, 0x3C	; 60
    aa5e:	0e 94 9a 68 	call	0xd134	; 0xd134 <__mulsf3>
    aa62:	ee 85       	ldd	r30, Y+14	; 0x0e
    aa64:	ff 85       	ldd	r31, Y+15	; 0x0f
    aa66:	24 81       	ldd	r18, Z+4	; 0x04
    aa68:	35 81       	ldd	r19, Z+5	; 0x05
    aa6a:	46 81       	ldd	r20, Z+6	; 0x06
    aa6c:	57 81       	ldd	r21, Z+7	; 0x07
    aa6e:	0e 94 50 67 	call	0xcea0	; 0xcea0 <__addsf3>
    aa72:	2b 01       	movw	r4, r22
    aa74:	3c 01       	movw	r6, r24
    aa76:	ee 85       	ldd	r30, Y+14	; 0x0e
    aa78:	ff 85       	ldd	r31, Y+15	; 0x0f
    aa7a:	64 83       	std	Z+4, r22	; 0x04
    aa7c:	75 83       	std	Z+5, r23	; 0x05
    aa7e:	86 83       	std	Z+6, r24	; 0x06
    aa80:	97 83       	std	Z+7, r25	; 0x07
			game.player.shot[i].shared.y += game.player.shot[i].shared.vy*FRAME_TIME;
    aa82:	29 e8       	ldi	r18, 0x89	; 137
    aa84:	38 e8       	ldi	r19, 0x88	; 136
    aa86:	48 e8       	ldi	r20, 0x88	; 136
    aa88:	5c e3       	ldi	r21, 0x3C	; 60
    aa8a:	60 81       	ld	r22, Z
    aa8c:	71 81       	ldd	r23, Z+1	; 0x01
    aa8e:	82 81       	ldd	r24, Z+2	; 0x02
    aa90:	93 81       	ldd	r25, Z+3	; 0x03
    aa92:	0e 94 9a 68 	call	0xd134	; 0xd134 <__mulsf3>
    aa96:	ee 85       	ldd	r30, Y+14	; 0x0e
    aa98:	ff 85       	ldd	r31, Y+15	; 0x0f
    aa9a:	20 85       	ldd	r18, Z+8	; 0x08
    aa9c:	31 85       	ldd	r19, Z+9	; 0x09
    aa9e:	42 85       	ldd	r20, Z+10	; 0x0a
    aaa0:	53 85       	ldd	r21, Z+11	; 0x0b
    aaa2:	0e 94 50 67 	call	0xcea0	; 0xcea0 <__addsf3>
    aaa6:	6b 01       	movw	r12, r22
    aaa8:	7c 01       	movw	r14, r24
    aaaa:	ee 85       	ldd	r30, Y+14	; 0x0e
    aaac:	ff 85       	ldd	r31, Y+15	; 0x0f
    aaae:	60 87       	std	Z+8, r22	; 0x08
    aab0:	71 87       	std	Z+9, r23	; 0x09
    aab2:	82 87       	std	Z+10, r24	; 0x0a
    aab4:	93 87       	std	Z+11, r25	; 0x0b
			LBMoveSprite(PLAYER_SHOT_SLOT+i, game.player.shot[i].shared.x - game.camera_x, game.player.shot[i].shared.y - game.camera_y, 1, 1);
    aab6:	60 91 ac 0d 	lds	r22, 0x0DAC
    aaba:	70 91 ad 0d 	lds	r23, 0x0DAD
    aabe:	80 e0       	ldi	r24, 0x00	; 0
    aac0:	90 e0       	ldi	r25, 0x00	; 0
    aac2:	0e 94 e4 67 	call	0xcfc8	; 0xcfc8 <__floatunsisf>
    aac6:	9b 01       	movw	r18, r22
    aac8:	ac 01       	movw	r20, r24
    aaca:	c7 01       	movw	r24, r14
    aacc:	b6 01       	movw	r22, r12
    aace:	0e 94 4f 67 	call	0xce9e	; 0xce9e <__subsf3>
    aad2:	0e 94 b8 67 	call	0xcf70	; 0xcf70 <__fixunssfsi>
    aad6:	c6 2e       	mov	r12, r22
    aad8:	80 91 aa 0d 	lds	r24, 0x0DAA
    aadc:	90 91 ab 0d 	lds	r25, 0x0DAB
    aae0:	bc 01       	movw	r22, r24
    aae2:	80 e0       	ldi	r24, 0x00	; 0
    aae4:	90 e0       	ldi	r25, 0x00	; 0
    aae6:	0e 94 e4 67 	call	0xcfc8	; 0xcfc8 <__floatunsisf>
    aaea:	9b 01       	movw	r18, r22
    aaec:	ac 01       	movw	r20, r24
    aaee:	c3 01       	movw	r24, r6
    aaf0:	b2 01       	movw	r22, r4
    aaf2:	0e 94 4f 67 	call	0xce9e	; 0xce9e <__subsf3>
    aaf6:	0e 94 b8 67 	call	0xcf70	; 0xcf70 <__fixunssfsi>
    aafa:	01 e0       	ldi	r16, 0x01	; 1
    aafc:	21 e0       	ldi	r18, 0x01	; 1
    aafe:	4c 2d       	mov	r20, r12
    ab00:	89 81       	ldd	r24, Y+1	; 0x01
    ab02:	0e 94 96 4a 	call	0x952c	; 0x952c <LBMoveSprite>
			if (game.player.shot[i].shared.x < game.camera_x || game.player.shot[i].shared.x+8 > game.camera_x + CAMERA_WIDTH*8 ||
    ab06:	ee 85       	ldd	r30, Y+14	; 0x0e
    ab08:	ff 85       	ldd	r31, Y+15	; 0x0f
    ab0a:	c4 80       	ldd	r12, Z+4	; 0x04
    ab0c:	d5 80       	ldd	r13, Z+5	; 0x05
    ab0e:	e6 80       	ldd	r14, Z+6	; 0x06
    ab10:	f7 80       	ldd	r15, Z+7	; 0x07
    ab12:	60 90 aa 0d 	lds	r6, 0x0DAA
    ab16:	70 90 ab 0d 	lds	r7, 0x0DAB
    ab1a:	b3 01       	movw	r22, r6
    ab1c:	80 e0       	ldi	r24, 0x00	; 0
    ab1e:	90 e0       	ldi	r25, 0x00	; 0
    ab20:	0e 94 e4 67 	call	0xcfc8	; 0xcfc8 <__floatunsisf>
    ab24:	9b 01       	movw	r18, r22
    ab26:	ac 01       	movw	r20, r24
    ab28:	c7 01       	movw	r24, r14
    ab2a:	b6 01       	movw	r22, r12
    ab2c:	0e 94 b4 67 	call	0xcf68	; 0xcf68 <__cmpsf2>
    ab30:	87 ff       	sbrs	r24, 7
    ab32:	0f c0       	rjmp	.+30     	; 0xab52 <animate_shot+0x166>
			    collision_detect_level(&game.player.shot[i].shared, 1, 1))
			{
				game.player.shot[i].active = 0;
    ab34:	f4 01       	movw	r30, r8
    ab36:	10 82       	st	Z, r1
				game.player.active_shots--;
    ab38:	80 91 d3 0d 	lds	r24, 0x0DD3
    ab3c:	81 50       	subi	r24, 0x01	; 1
    ab3e:	80 93 d3 0d 	sts	0x0DD3, r24
				LBMoveSprite(PLAYER_SHOT_SLOT+i, OFF_SCREEN, 0, 1, 1);
    ab42:	01 e0       	ldi	r16, 0x01	; 1
    ab44:	21 e0       	ldi	r18, 0x01	; 1
    ab46:	40 e0       	ldi	r20, 0x00	; 0
    ab48:	60 ee       	ldi	r22, 0xE0	; 224
    ab4a:	89 81       	ldd	r24, Y+1	; 0x01
    ab4c:	0e 94 96 4a 	call	0x952c	; 0x952c <LBMoveSprite>
    ab50:	be c0       	rjmp	.+380    	; 0xacce <animate_shot+0x2e2>
		if (game.player.shot[i].active)
		{
			game.player.shot[i].shared.x += game.player.shot[i].shared.vx*FRAME_TIME;
			game.player.shot[i].shared.y += game.player.shot[i].shared.vy*FRAME_TIME;
			LBMoveSprite(PLAYER_SHOT_SLOT+i, game.player.shot[i].shared.x - game.camera_x, game.player.shot[i].shared.y - game.camera_y, 1, 1);
			if (game.player.shot[i].shared.x < game.camera_x || game.player.shot[i].shared.x+8 > game.camera_x + CAMERA_WIDTH*8 ||
    ab52:	20 e0       	ldi	r18, 0x00	; 0
    ab54:	30 e0       	ldi	r19, 0x00	; 0
    ab56:	40 e0       	ldi	r20, 0x00	; 0
    ab58:	51 e4       	ldi	r21, 0x41	; 65
    ab5a:	c7 01       	movw	r24, r14
    ab5c:	b6 01       	movw	r22, r12
    ab5e:	0e 94 50 67 	call	0xcea0	; 0xcea0 <__addsf3>
    ab62:	1b 01       	movw	r2, r22
    ab64:	2c 01       	movw	r4, r24
    ab66:	b3 01       	movw	r22, r6
    ab68:	60 52       	subi	r22, 0x20	; 32
    ab6a:	7f 4f       	sbci	r23, 0xFF	; 255
    ab6c:	80 e0       	ldi	r24, 0x00	; 0
    ab6e:	90 e0       	ldi	r25, 0x00	; 0
    ab70:	0e 94 e4 67 	call	0xcfc8	; 0xcfc8 <__floatunsisf>
    ab74:	9b 01       	movw	r18, r22
    ab76:	ac 01       	movw	r20, r24
    ab78:	c2 01       	movw	r24, r4
    ab7a:	b1 01       	movw	r22, r2
    ab7c:	0e 94 96 68 	call	0xd12c	; 0xd12c <__gesf2>
    ab80:	18 16       	cp	r1, r24
    ab82:	c4 f2       	brlt	.-80     	; 0xab34 <animate_shot+0x148>
			    collision_detect_level(&game.player.shot[i].shared, 1, 1))
    ab84:	41 e0       	ldi	r20, 0x01	; 1
    ab86:	61 e0       	ldi	r22, 0x01	; 1
    ab88:	8e 85       	ldd	r24, Y+14	; 0x0e
    ab8a:	9f 85       	ldd	r25, Y+15	; 0x0f
    ab8c:	0e 94 ba 51 	call	0xa374	; 0xa374 <collision_detect_level>
		if (game.player.shot[i].active)
		{
			game.player.shot[i].shared.x += game.player.shot[i].shared.vx*FRAME_TIME;
			game.player.shot[i].shared.y += game.player.shot[i].shared.vy*FRAME_TIME;
			LBMoveSprite(PLAYER_SHOT_SLOT+i, game.player.shot[i].shared.x - game.camera_x, game.player.shot[i].shared.y - game.camera_y, 1, 1);
			if (game.player.shot[i].shared.x < game.camera_x || game.player.shot[i].shared.x+8 > game.camera_x + CAMERA_WIDTH*8 ||
    ab90:	81 11       	cpse	r24, r1
    ab92:	d0 cf       	rjmp	.-96     	; 0xab34 <animate_shot+0x148>
    ab94:	87 e6       	ldi	r24, 0x67	; 103
    ab96:	28 2e       	mov	r2, r24
    ab98:	8e e0       	ldi	r24, 0x0E	; 14
    ab9a:	38 2e       	mov	r3, r24
    ab9c:	61 2c       	mov	r6, r1
    ab9e:	71 2c       	mov	r7, r1
    aba0:	24 01       	movw	r4, r8
    aba2:	f1 e0       	ldi	r31, 0x01	; 1
    aba4:	4f 1a       	sub	r4, r31
    aba6:	51 08       	sbc	r5, r1
    aba8:	f1 01       	movw	r30, r2
    abaa:	38 97       	sbiw	r30, 0x08	; 8
			else
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
				{
					if (game.enemies[j].active &&
    abac:	80 81       	ld	r24, Z
    abae:	88 23       	and	r24, r24
    abb0:	09 f4       	brne	.+2      	; 0xabb4 <animate_shot+0x1c8>
    abb2:	82 c0       	rjmp	.+260    	; 0xacb8 <animate_shot+0x2cc>
    abb4:	34 96       	adiw	r30, 0x04	; 4
					    LBCollides(game.player.shot[i].shared.x,game.player.shot[i].shared.y, 8, 8,
    abb6:	a0 80       	ld	r10, Z
    abb8:	aa 0c       	add	r10, r10
    abba:	aa 0c       	add	r10, r10
    abbc:	aa 0c       	add	r10, r10
    abbe:	31 97       	sbiw	r30, 0x01	; 1
    abc0:	c0 80       	ld	r12, Z
    abc2:	cc 0c       	add	r12, r12
    abc4:	cc 0c       	add	r12, r12
    abc6:	cc 0c       	add	r12, r12
    abc8:	3a 97       	sbiw	r30, 0x0a	; 10
    abca:	60 81       	ld	r22, Z
    abcc:	71 81       	ldd	r23, Z+1	; 0x01
    abce:	82 81       	ldd	r24, Z+2	; 0x02
    abd0:	93 81       	ldd	r25, Z+3	; 0x03
    abd2:	0e 94 b8 67 	call	0xcf70	; 0xcf70 <__fixunssfsi>
    abd6:	6a 83       	std	Y+2, r22	; 0x02
    abd8:	7b 83       	std	Y+3, r23	; 0x03
    abda:	8c 83       	std	Y+4, r24	; 0x04
    abdc:	9d 83       	std	Y+5, r25	; 0x05
    abde:	f1 01       	movw	r30, r2
    abe0:	73 97       	sbiw	r30, 0x13	; 19
    abe2:	60 81       	ld	r22, Z
    abe4:	71 81       	ldd	r23, Z+1	; 0x01
    abe6:	82 81       	ldd	r24, Z+2	; 0x02
    abe8:	93 81       	ldd	r25, Z+3	; 0x03
    abea:	0e 94 b8 67 	call	0xcf70	; 0xcf70 <__fixunssfsi>
    abee:	6e 83       	std	Y+6, r22	; 0x06
    abf0:	7f 83       	std	Y+7, r23	; 0x07
    abf2:	88 87       	std	Y+8, r24	; 0x08
    abf4:	99 87       	std	Y+9, r25	; 0x09
    abf6:	ee 85       	ldd	r30, Y+14	; 0x0e
    abf8:	ff 85       	ldd	r31, Y+15	; 0x0f
    abfa:	60 85       	ldd	r22, Z+8	; 0x08
    abfc:	71 85       	ldd	r23, Z+9	; 0x09
    abfe:	82 85       	ldd	r24, Z+10	; 0x0a
    ac00:	93 85       	ldd	r25, Z+11	; 0x0b
    ac02:	0e 94 b8 67 	call	0xcf70	; 0xcf70 <__fixunssfsi>
    ac06:	6a 87       	std	Y+10, r22	; 0x0a
    ac08:	7b 87       	std	Y+11, r23	; 0x0b
    ac0a:	8c 87       	std	Y+12, r24	; 0x0c
    ac0c:	9d 87       	std	Y+13, r25	; 0x0d
    ac0e:	ee 85       	ldd	r30, Y+14	; 0x0e
    ac10:	ff 85       	ldd	r31, Y+15	; 0x0f
    ac12:	64 81       	ldd	r22, Z+4	; 0x04
    ac14:	75 81       	ldd	r23, Z+5	; 0x05
    ac16:	86 81       	ldd	r24, Z+6	; 0x06
    ac18:	97 81       	ldd	r25, Z+7	; 0x07
    ac1a:	0e 94 b8 67 	call	0xcf70	; 0xcf70 <__fixunssfsi>
    ac1e:	dc 01       	movw	r26, r24
    ac20:	cb 01       	movw	r24, r22
    ac22:	ea 80       	ldd	r14, Y+2	; 0x02
    ac24:	fb 80       	ldd	r15, Y+3	; 0x03
    ac26:	0e 81       	ldd	r16, Y+6	; 0x06
    ac28:	1f 81       	ldd	r17, Y+7	; 0x07
    ac2a:	28 e0       	ldi	r18, 0x08	; 8
    ac2c:	48 e0       	ldi	r20, 0x08	; 8
    ac2e:	6a 85       	ldd	r22, Y+10	; 0x0a
    ac30:	7b 85       	ldd	r23, Y+11	; 0x0b
    ac32:	0e 94 f9 49 	call	0x93f2	; 0x93f2 <LBCollides>
			else
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
				{
					if (game.enemies[j].active &&
    ac36:	88 23       	and	r24, r24
    ac38:	09 f4       	brne	.+2      	; 0xac3c <animate_shot+0x250>
    ac3a:	3e c0       	rjmp	.+124    	; 0xacb8 <animate_shot+0x2cc>
					    LBCollides(game.player.shot[i].shared.x,game.player.shot[i].shared.y, 8, 8,
							game.enemies[j].shared.x, game.enemies[j].shared.y, game.enemies[j].width*8, game.enemies[j].height*8
						)
					)
					{
						SFX_HIT;
    ac3c:	41 e0       	ldi	r20, 0x01	; 1
    ac3e:	6f ef       	ldi	r22, 0xFF	; 255
    ac40:	84 e0       	ldi	r24, 0x04	; 4
    ac42:	0e 94 64 3d 	call	0x7ac8	; 0x7ac8 <TriggerFx>
						game.enemies[j].shield -= game.player.shot[i].hit_count;
    ac46:	f1 01       	movw	r30, r2
    ac48:	80 81       	ld	r24, Z
    ac4a:	f2 01       	movw	r30, r4
    ac4c:	90 81       	ld	r25, Z
    ac4e:	89 1b       	sub	r24, r25
    ac50:	f1 01       	movw	r30, r2
    ac52:	80 83       	st	Z, r24
						if (game.enemies[j].shield <= 0)
    ac54:	18 16       	cp	r1, r24
    ac56:	14 f1       	brlt	.+68     	; 0xac9c <animate_shot+0x2b0>
						{
							SFX_ENEMY_EXPLODE;
    ac58:	41 e0       	ldi	r20, 0x01	; 1
    ac5a:	6f ef       	ldi	r22, 0xFF	; 255
    ac5c:	86 e0       	ldi	r24, 0x06	; 6
    ac5e:	0e 94 64 3d 	call	0x7ac8	; 0x7ac8 <TriggerFx>
							game.enemies[j].flags = EXPLODING;
    ac62:	f2 e4       	ldi	r31, 0x42	; 66
    ac64:	f6 9d       	mul	r31, r6
    ac66:	c0 01       	movw	r24, r0
    ac68:	f7 9d       	mul	r31, r7
    ac6a:	90 0d       	add	r25, r0
    ac6c:	11 24       	eor	r1, r1
    ac6e:	8a 55       	subi	r24, 0x5A	; 90
    ac70:	92 4f       	sbci	r25, 0xF2	; 242
    ac72:	fc 01       	movw	r30, r24
    ac74:	e6 54       	subi	r30, 0x46	; 70
    ac76:	ff 4f       	sbci	r31, 0xFF	; 255
    ac78:	b0 82       	st	Z, r11
							game.enemies[j].active = 0;
    ac7a:	31 97       	sbiw	r30, 0x01	; 1
    ac7c:	10 82       	st	Z, r1
							game.active_enemies--;
    ac7e:	80 91 c1 0d 	lds	r24, 0x0DC1
    ac82:	81 50       	subi	r24, 0x01	; 1
    ac84:	80 93 c1 0d 	sts	0x0DC1, r24
							game.score += KILL_SCORE;
    ac88:	80 91 ae 0d 	lds	r24, 0x0DAE
    ac8c:	90 91 af 0d 	lds	r25, 0x0DAF
    ac90:	0a 96       	adiw	r24, 0x0a	; 10
    ac92:	90 93 af 0d 	sts	0x0DAF, r25
    ac96:	80 93 ae 0d 	sts	0x0DAE, r24
							break;
    ac9a:	19 c0       	rjmp	.+50     	; 0xacce <animate_shot+0x2e2>
						}
						game.player.shot[i].active = 0;
    ac9c:	f4 01       	movw	r30, r8
    ac9e:	10 82       	st	Z, r1
						game.player.active_shots--;
    aca0:	80 91 d3 0d 	lds	r24, 0x0DD3
    aca4:	81 50       	subi	r24, 0x01	; 1
    aca6:	80 93 d3 0d 	sts	0x0DD3, r24
						LBMoveSprite(PLAYER_SHOT_SLOT+i, OFF_SCREEN, 0, 1, 1);
    acaa:	01 e0       	ldi	r16, 0x01	; 1
    acac:	21 e0       	ldi	r18, 0x01	; 1
    acae:	40 e0       	ldi	r20, 0x00	; 0
    acb0:	60 ee       	ldi	r22, 0xE0	; 224
    acb2:	89 81       	ldd	r24, Y+1	; 0x01
    acb4:	0e 94 96 4a 	call	0x952c	; 0x952c <LBMoveSprite>
    acb8:	ff ef       	ldi	r31, 0xFF	; 255
    acba:	6f 1a       	sub	r6, r31
    acbc:	7f 0a       	sbc	r7, r31
    acbe:	22 e4       	ldi	r18, 0x42	; 66
    acc0:	22 0e       	add	r2, r18
    acc2:	31 1c       	adc	r3, r1
				LBMoveSprite(PLAYER_SHOT_SLOT+i, OFF_SCREEN, 0, 1, 1);
			}
			else
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
    acc4:	85 e0       	ldi	r24, 0x05	; 5
    acc6:	68 16       	cp	r6, r24
    acc8:	71 04       	cpc	r7, r1
    acca:	09 f0       	breq	.+2      	; 0xacce <animate_shot+0x2e2>
    accc:	6d cf       	rjmp	.-294    	; 0xaba8 <animate_shot+0x1bc>
    acce:	9a e1       	ldi	r25, 0x1A	; 26
    acd0:	89 0e       	add	r8, r25
    acd2:	91 1c       	adc	r9, r1
    acd4:	e9 81       	ldd	r30, Y+1	; 0x01
    acd6:	ef 5f       	subi	r30, 0xFF	; 255
    acd8:	e9 83       	std	Y+1, r30	; 0x01
    acda:	8e 85       	ldd	r24, Y+14	; 0x0e
    acdc:	9f 85       	ldd	r25, Y+15	; 0x0f
    acde:	4a 96       	adiw	r24, 0x1a	; 26
    ace0:	9f 87       	std	Y+15, r25	; 0x0f
    ace2:	8e 87       	std	Y+14, r24	; 0x0e

void animate_shot()
{
	// Animate shots
	u8 slot = ENEMY_SLOT;
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
    ace4:	ee 30       	cpi	r30, 0x0E	; 14
    ace6:	09 f0       	breq	.+2      	; 0xacea <animate_shot+0x2fe>
    ace8:	a7 ce       	rjmp	.-690    	; 0xaa38 <animate_shot+0x4c>
					slot += game.enemies[j].width*game.enemies[j].height;
				}
			}
		}
	}
}
    acea:	2f 96       	adiw	r28, 0x0f	; 15
    acec:	0f b6       	in	r0, 0x3f	; 63
    acee:	f8 94       	cli
    acf0:	de bf       	out	0x3e, r29	; 62
    acf2:	0f be       	out	0x3f, r0	; 63
    acf4:	cd bf       	out	0x3d, r28	; 61
    acf6:	df 91       	pop	r29
    acf8:	cf 91       	pop	r28
    acfa:	1f 91       	pop	r17
    acfc:	0f 91       	pop	r16
    acfe:	ff 90       	pop	r15
    ad00:	ef 90       	pop	r14
    ad02:	df 90       	pop	r13
    ad04:	cf 90       	pop	r12
    ad06:	bf 90       	pop	r11
    ad08:	af 90       	pop	r10
    ad0a:	9f 90       	pop	r9
    ad0c:	8f 90       	pop	r8
    ad0e:	7f 90       	pop	r7
    ad10:	6f 90       	pop	r6
    ad12:	5f 90       	pop	r5
    ad14:	4f 90       	pop	r4
    ad16:	3f 90       	pop	r3
    ad18:	2f 90       	pop	r2
    ad1a:	08 95       	ret

0000ad1c <map_explosion>:
	}
	return result;
}

u8 map_explosion(u8* flags, Animation* anim, u8 slot, u8 width, u8 height)
{
    ad1c:	7f 92       	push	r7
    ad1e:	8f 92       	push	r8
    ad20:	9f 92       	push	r9
    ad22:	af 92       	push	r10
    ad24:	bf 92       	push	r11
    ad26:	cf 92       	push	r12
    ad28:	df 92       	push	r13
    ad2a:	ef 92       	push	r14
    ad2c:	ff 92       	push	r15
    ad2e:	0f 93       	push	r16
    ad30:	1f 93       	push	r17
    ad32:	cf 93       	push	r28
    ad34:	df 93       	push	r29
    ad36:	1f 92       	push	r1
    ad38:	cd b7       	in	r28, 0x3d	; 61
    ad3a:	de b7       	in	r29, 0x3e	; 62
    ad3c:	6c 01       	movw	r12, r24
    ad3e:	7b 01       	movw	r14, r22
    ad40:	74 2e       	mov	r7, r20
	char* frame;
	frame = LBGetNextFrame(anim);
    ad42:	cb 01       	movw	r24, r22
    ad44:	29 83       	std	Y+1, r18	; 0x01
    ad46:	0e 94 e2 48 	call	0x91c4	; 0x91c4 <LBGetNextFrame>
    ad4a:	4c 01       	movw	r8, r24
	for (u8 i = 0; i < width*height; i++)
    ad4c:	29 81       	ldd	r18, Y+1	; 0x01
    ad4e:	20 9f       	mul	r18, r16
    ad50:	50 01       	movw	r10, r0
    ad52:	11 24       	eor	r1, r1
    ad54:	10 e0       	ldi	r17, 0x00	; 0
    ad56:	81 2f       	mov	r24, r17
    ad58:	90 e0       	ldi	r25, 0x00	; 0
    ad5a:	8a 15       	cp	r24, r10
    ad5c:	9b 05       	cpc	r25, r11
    ad5e:	54 f4       	brge	.+20     	; 0xad74 <map_explosion+0x58>
	{
		LBMapSprite(slot+i, frame, 0);
    ad60:	40 e0       	ldi	r20, 0x00	; 0
    ad62:	b4 01       	movw	r22, r8
    ad64:	81 2f       	mov	r24, r17
    ad66:	87 0d       	add	r24, r7
    ad68:	29 83       	std	Y+1, r18	; 0x01
    ad6a:	0e 94 44 4a 	call	0x9488	; 0x9488 <LBMapSprite>

u8 map_explosion(u8* flags, Animation* anim, u8 slot, u8 width, u8 height)
{
	char* frame;
	frame = LBGetNextFrame(anim);
	for (u8 i = 0; i < width*height; i++)
    ad6e:	1f 5f       	subi	r17, 0xFF	; 255
    ad70:	29 81       	ldd	r18, Y+1	; 0x01
    ad72:	f1 cf       	rjmp	.-30     	; 0xad56 <map_explosion+0x3a>
	{
		LBMapSprite(slot+i, frame, 0);
	}
	if (anim->looped)
    ad74:	f7 01       	movw	r30, r14
    ad76:	84 81       	ldd	r24, Z+4	; 0x04
    ad78:	88 23       	and	r24, r24
    ad7a:	51 f0       	breq	.+20     	; 0xad90 <map_explosion+0x74>
	{
		*flags ^= EXPLODING;
    ad7c:	f6 01       	movw	r30, r12
    ad7e:	80 81       	ld	r24, Z
    ad80:	90 e1       	ldi	r25, 0x10	; 16
    ad82:	98 27       	eor	r25, r24
    ad84:	90 83       	st	Z, r25
		LBMoveSprite(slot, OFF_SCREEN, 0, width, height);
    ad86:	40 e0       	ldi	r20, 0x00	; 0
    ad88:	60 ee       	ldi	r22, 0xE0	; 224
    ad8a:	87 2d       	mov	r24, r7
    ad8c:	0e 94 96 4a 	call	0x952c	; 0x952c <LBMoveSprite>
	}
	return anim->looped;
}
    ad90:	f7 01       	movw	r30, r14
    ad92:	84 81       	ldd	r24, Z+4	; 0x04
    ad94:	0f 90       	pop	r0
    ad96:	df 91       	pop	r29
    ad98:	cf 91       	pop	r28
    ad9a:	1f 91       	pop	r17
    ad9c:	0f 91       	pop	r16
    ad9e:	ff 90       	pop	r15
    ada0:	ef 90       	pop	r14
    ada2:	df 90       	pop	r13
    ada4:	cf 90       	pop	r12
    ada6:	bf 90       	pop	r11
    ada8:	af 90       	pop	r10
    adaa:	9f 90       	pop	r9
    adac:	8f 90       	pop	r8
    adae:	7f 90       	pop	r7
    adb0:	08 95       	ret

0000adb2 <animate_sprite>:

void animate_sprite(SpriteShared* s, u8 slot, u8 width, u8 height)
{
    adb2:	8f 92       	push	r8
    adb4:	9f 92       	push	r9
    adb6:	af 92       	push	r10
    adb8:	bf 92       	push	r11
    adba:	ff 92       	push	r15
    adbc:	0f 93       	push	r16
    adbe:	1f 93       	push	r17
    adc0:	cf 93       	push	r28
    adc2:	df 93       	push	r29
    adc4:	ec 01       	movw	r28, r24
    adc6:	f6 2e       	mov	r15, r22
    adc8:	14 2f       	mov	r17, r20
    adca:	02 2f       	mov	r16, r18
	s->vy = s->vy + s->gravity*FRAME_TIME;
    adcc:	6e 85       	ldd	r22, Y+14	; 0x0e
    adce:	70 e0       	ldi	r23, 0x00	; 0
    add0:	80 e0       	ldi	r24, 0x00	; 0
    add2:	90 e0       	ldi	r25, 0x00	; 0
    add4:	0e 94 e6 67 	call	0xcfcc	; 0xcfcc <__floatsisf>
    add8:	29 e8       	ldi	r18, 0x89	; 137
    adda:	38 e8       	ldi	r19, 0x88	; 136
    addc:	48 e8       	ldi	r20, 0x88	; 136
    adde:	5c e3       	ldi	r21, 0x3C	; 60
    ade0:	0e 94 9a 68 	call	0xd134	; 0xd134 <__mulsf3>
    ade4:	28 81       	ld	r18, Y
    ade6:	39 81       	ldd	r19, Y+1	; 0x01
    ade8:	4a 81       	ldd	r20, Y+2	; 0x02
    adea:	5b 81       	ldd	r21, Y+3	; 0x03
    adec:	0e 94 50 67 	call	0xcea0	; 0xcea0 <__addsf3>
    adf0:	4b 01       	movw	r8, r22
    adf2:	5c 01       	movw	r10, r24
	if (s->vy > MAX_SPEED) s->vy = MAX_SPEED;
    adf4:	20 e0       	ldi	r18, 0x00	; 0
    adf6:	30 e0       	ldi	r19, 0x00	; 0
    adf8:	40 ef       	ldi	r20, 0xF0	; 240
    adfa:	52 e4       	ldi	r21, 0x42	; 66
    adfc:	0e 94 96 68 	call	0xd12c	; 0xd12c <__gesf2>
    ae00:	18 16       	cp	r1, r24
    ae02:	2c f0       	brlt	.+10     	; 0xae0e <animate_sprite+0x5c>
	return anim->looped;
}

void animate_sprite(SpriteShared* s, u8 slot, u8 width, u8 height)
{
	s->vy = s->vy + s->gravity*FRAME_TIME;
    ae04:	88 82       	st	Y, r8
    ae06:	99 82       	std	Y+1, r9	; 0x01
    ae08:	aa 82       	std	Y+2, r10	; 0x02
    ae0a:	bb 82       	std	Y+3, r11	; 0x03
    ae0c:	08 c0       	rjmp	.+16     	; 0xae1e <animate_sprite+0x6c>
	if (s->vy > MAX_SPEED) s->vy = MAX_SPEED;
    ae0e:	80 e0       	ldi	r24, 0x00	; 0
    ae10:	90 e0       	ldi	r25, 0x00	; 0
    ae12:	a0 ef       	ldi	r26, 0xF0	; 240
    ae14:	b2 e4       	ldi	r27, 0x42	; 66
    ae16:	88 83       	st	Y, r24
    ae18:	99 83       	std	Y+1, r25	; 0x01
    ae1a:	aa 83       	std	Y+2, r26	; 0x02
    ae1c:	bb 83       	std	Y+3, r27	; 0x03
	s->x += s->vx*FRAME_TIME;
    ae1e:	6c 85       	ldd	r22, Y+12	; 0x0c
    ae20:	7d 85       	ldd	r23, Y+13	; 0x0d
    ae22:	88 27       	eor	r24, r24
    ae24:	77 fd       	sbrc	r23, 7
    ae26:	80 95       	com	r24
    ae28:	98 2f       	mov	r25, r24
    ae2a:	0e 94 e6 67 	call	0xcfcc	; 0xcfcc <__floatsisf>
    ae2e:	29 e8       	ldi	r18, 0x89	; 137
    ae30:	38 e8       	ldi	r19, 0x88	; 136
    ae32:	48 e8       	ldi	r20, 0x88	; 136
    ae34:	5c e3       	ldi	r21, 0x3C	; 60
    ae36:	0e 94 9a 68 	call	0xd134	; 0xd134 <__mulsf3>
    ae3a:	9b 01       	movw	r18, r22
    ae3c:	ac 01       	movw	r20, r24
    ae3e:	6c 81       	ldd	r22, Y+4	; 0x04
    ae40:	7d 81       	ldd	r23, Y+5	; 0x05
    ae42:	8e 81       	ldd	r24, Y+6	; 0x06
    ae44:	9f 81       	ldd	r25, Y+7	; 0x07
    ae46:	0e 94 50 67 	call	0xcea0	; 0xcea0 <__addsf3>
    ae4a:	6c 83       	std	Y+4, r22	; 0x04
    ae4c:	7d 83       	std	Y+5, r23	; 0x05
    ae4e:	8e 83       	std	Y+6, r24	; 0x06
    ae50:	9f 83       	std	Y+7, r25	; 0x07
	s->y += s->vy*FRAME_TIME;
    ae52:	29 e8       	ldi	r18, 0x89	; 137
    ae54:	38 e8       	ldi	r19, 0x88	; 136
    ae56:	48 e8       	ldi	r20, 0x88	; 136
    ae58:	5c e3       	ldi	r21, 0x3C	; 60
    ae5a:	68 81       	ld	r22, Y
    ae5c:	79 81       	ldd	r23, Y+1	; 0x01
    ae5e:	8a 81       	ldd	r24, Y+2	; 0x02
    ae60:	9b 81       	ldd	r25, Y+3	; 0x03
    ae62:	0e 94 9a 68 	call	0xd134	; 0xd134 <__mulsf3>
    ae66:	9b 01       	movw	r18, r22
    ae68:	ac 01       	movw	r20, r24
    ae6a:	68 85       	ldd	r22, Y+8	; 0x08
    ae6c:	79 85       	ldd	r23, Y+9	; 0x09
    ae6e:	8a 85       	ldd	r24, Y+10	; 0x0a
    ae70:	9b 85       	ldd	r25, Y+11	; 0x0b
    ae72:	0e 94 50 67 	call	0xcea0	; 0xcea0 <__addsf3>
    ae76:	68 87       	std	Y+8, r22	; 0x08
    ae78:	79 87       	std	Y+9, r23	; 0x09
    ae7a:	8a 87       	std	Y+10, r24	; 0x0a
    ae7c:	9b 87       	std	Y+11, r25	; 0x0b
	collision_detect_level(s, width, height);
    ae7e:	40 2f       	mov	r20, r16
    ae80:	61 2f       	mov	r22, r17
    ae82:	ce 01       	movw	r24, r28
    ae84:	0e 94 ba 51 	call	0xa374	; 0xa374 <collision_detect_level>
	LBMoveSprite(slot, s->x - game.camera_x, s->y - game.camera_y, width, height);
    ae88:	e0 91 ac 0d 	lds	r30, 0x0DAC
    ae8c:	f0 91 ad 0d 	lds	r31, 0x0DAD
    ae90:	bf 01       	movw	r22, r30
    ae92:	80 e0       	ldi	r24, 0x00	; 0
    ae94:	90 e0       	ldi	r25, 0x00	; 0
    ae96:	0e 94 e4 67 	call	0xcfc8	; 0xcfc8 <__floatunsisf>
    ae9a:	9b 01       	movw	r18, r22
    ae9c:	ac 01       	movw	r20, r24
    ae9e:	68 85       	ldd	r22, Y+8	; 0x08
    aea0:	79 85       	ldd	r23, Y+9	; 0x09
    aea2:	8a 85       	ldd	r24, Y+10	; 0x0a
    aea4:	9b 85       	ldd	r25, Y+11	; 0x0b
    aea6:	0e 94 4f 67 	call	0xce9e	; 0xce9e <__subsf3>
    aeaa:	0e 94 b8 67 	call	0xcf70	; 0xcf70 <__fixunssfsi>
    aeae:	b6 2e       	mov	r11, r22
    aeb0:	e0 91 aa 0d 	lds	r30, 0x0DAA
    aeb4:	f0 91 ab 0d 	lds	r31, 0x0DAB
    aeb8:	bf 01       	movw	r22, r30
    aeba:	80 e0       	ldi	r24, 0x00	; 0
    aebc:	90 e0       	ldi	r25, 0x00	; 0
    aebe:	0e 94 e4 67 	call	0xcfc8	; 0xcfc8 <__floatunsisf>
    aec2:	9b 01       	movw	r18, r22
    aec4:	ac 01       	movw	r20, r24
    aec6:	6c 81       	ldd	r22, Y+4	; 0x04
    aec8:	7d 81       	ldd	r23, Y+5	; 0x05
    aeca:	8e 81       	ldd	r24, Y+6	; 0x06
    aecc:	9f 81       	ldd	r25, Y+7	; 0x07
    aece:	0e 94 4f 67 	call	0xce9e	; 0xce9e <__subsf3>
    aed2:	0e 94 b8 67 	call	0xcf70	; 0xcf70 <__fixunssfsi>
    aed6:	21 2f       	mov	r18, r17
    aed8:	4b 2d       	mov	r20, r11
    aeda:	8f 2d       	mov	r24, r15
    aedc:	0e 94 96 4a 	call	0x952c	; 0x952c <LBMoveSprite>
}
    aee0:	df 91       	pop	r29
    aee2:	cf 91       	pop	r28
    aee4:	1f 91       	pop	r17
    aee6:	0f 91       	pop	r16
    aee8:	ff 90       	pop	r15
    aeea:	bf 90       	pop	r11
    aeec:	af 90       	pop	r10
    aeee:	9f 90       	pop	r9
    aef0:	8f 90       	pop	r8
    aef2:	08 95       	ret

0000aef4 <animate_player>:

void animate_player()
{
    aef4:	0f 93       	push	r16
    aef6:	cf 93       	push	r28
	if (game.player.flags & EXPLODING)
    aef8:	80 91 d4 0d 	lds	r24, 0x0DD4
    aefc:	84 ff       	sbrs	r24, 4
    aefe:	38 c0       	rjmp	.+112    	; 0xaf70 <animate_player+0x7c>
	{
		LBMoveSprite(PLAYER_SLOT, game.player.shared.x - game.camera_x, game.player.shared.y - game.camera_y, game.player.width, game.player.height);
    af00:	60 91 ac 0d 	lds	r22, 0x0DAC
    af04:	70 91 ad 0d 	lds	r23, 0x0DAD
    af08:	80 e0       	ldi	r24, 0x00	; 0
    af0a:	90 e0       	ldi	r25, 0x00	; 0
    af0c:	0e 94 e4 67 	call	0xcfc8	; 0xcfc8 <__floatunsisf>
    af10:	9b 01       	movw	r18, r22
    af12:	ac 01       	movw	r20, r24
    af14:	60 91 cc 0d 	lds	r22, 0x0DCC
    af18:	70 91 cd 0d 	lds	r23, 0x0DCD
    af1c:	80 91 ce 0d 	lds	r24, 0x0DCE
    af20:	90 91 cf 0d 	lds	r25, 0x0DCF
    af24:	0e 94 4f 67 	call	0xce9e	; 0xce9e <__subsf3>
    af28:	0e 94 b8 67 	call	0xcf70	; 0xcf70 <__fixunssfsi>
    af2c:	c6 2f       	mov	r28, r22
    af2e:	60 91 aa 0d 	lds	r22, 0x0DAA
    af32:	70 91 ab 0d 	lds	r23, 0x0DAB
    af36:	80 e0       	ldi	r24, 0x00	; 0
    af38:	90 e0       	ldi	r25, 0x00	; 0
    af3a:	0e 94 e4 67 	call	0xcfc8	; 0xcfc8 <__floatunsisf>
    af3e:	9b 01       	movw	r18, r22
    af40:	ac 01       	movw	r20, r24
    af42:	60 91 c8 0d 	lds	r22, 0x0DC8
    af46:	70 91 c9 0d 	lds	r23, 0x0DC9
    af4a:	80 91 ca 0d 	lds	r24, 0x0DCA
    af4e:	90 91 cb 0d 	lds	r25, 0x0DCB
    af52:	0e 94 4f 67 	call	0xce9e	; 0xce9e <__subsf3>
    af56:	0e 94 b8 67 	call	0xcf70	; 0xcf70 <__fixunssfsi>
    af5a:	00 91 d8 0d 	lds	r16, 0x0DD8
    af5e:	20 91 d7 0d 	lds	r18, 0x0DD7
    af62:	4c 2f       	mov	r20, r28
    af64:	80 e0       	ldi	r24, 0x00	; 0
    af66:	0e 94 96 4a 	call	0x952c	; 0x952c <LBMoveSprite>
	}
	else animate_sprite(&game.player.shared, PLAYER_SLOT, game.player.width, game.player.height);
}
    af6a:	cf 91       	pop	r28
    af6c:	0f 91       	pop	r16
    af6e:	08 95       	ret
{
	if (game.player.flags & EXPLODING)
	{
		LBMoveSprite(PLAYER_SLOT, game.player.shared.x - game.camera_x, game.player.shared.y - game.camera_y, game.player.width, game.player.height);
	}
	else animate_sprite(&game.player.shared, PLAYER_SLOT, game.player.width, game.player.height);
    af70:	20 91 d8 0d 	lds	r18, 0x0DD8
    af74:	40 91 d7 0d 	lds	r20, 0x0DD7
    af78:	60 e0       	ldi	r22, 0x00	; 0
    af7a:	84 ec       	ldi	r24, 0xC4	; 196
    af7c:	9d e0       	ldi	r25, 0x0D	; 13
}
    af7e:	cf 91       	pop	r28
    af80:	0f 91       	pop	r16
{
	if (game.player.flags & EXPLODING)
	{
		LBMoveSprite(PLAYER_SLOT, game.player.shared.x - game.camera_x, game.player.shared.y - game.camera_y, game.player.width, game.player.height);
	}
	else animate_sprite(&game.player.shared, PLAYER_SLOT, game.player.width, game.player.height);
    af82:	0c 94 d9 56 	jmp	0xadb2	; 0xadb2 <animate_sprite>

0000af86 <update_spider_enemy>:
}

void update_spider_enemy(Enemy* e, u8 slot)
{
    af86:	1f 93       	push	r17
    af88:	cf 93       	push	r28
    af8a:	df 93       	push	r29
    af8c:	ec 01       	movw	r28, r24
    af8e:	16 2f       	mov	r17, r22
	if (e->flags & IDLE && e->frame_count == SPIDER_IDLE_FRAMES)
    af90:	98 89       	ldd	r25, Y+16	; 0x10
    af92:	89 2f       	mov	r24, r25
    af94:	88 70       	andi	r24, 0x08	; 8
    af96:	93 ff       	sbrs	r25, 3
    af98:	1e c0       	rjmp	.+60     	; 0xafd6 <update_spider_enemy+0x50>
    af9a:	2d 89       	ldd	r18, Y+21	; 0x15
    af9c:	20 38       	cpi	r18, 0x80	; 128
    af9e:	d9 f4       	brne	.+54     	; 0xafd6 <update_spider_enemy+0x50>
	{
		e->flags = JUMPING;
    afa0:	81 e0       	ldi	r24, 0x01	; 1
    afa2:	88 8b       	std	Y+16, r24	; 0x10
		e->shared.vy = -SPIDER_JUMP_SPEED;
    afa4:	80 e0       	ldi	r24, 0x00	; 0
    afa6:	90 e0       	ldi	r25, 0x00	; 0
    afa8:	a8 ec       	ldi	r26, 0xC8	; 200
    afaa:	b2 ec       	ldi	r27, 0xC2	; 194
    afac:	88 83       	st	Y, r24
    afae:	99 83       	std	Y+1, r25	; 0x01
    afb0:	aa 83       	std	Y+2, r26	; 0x02
    afb2:	bb 83       	std	Y+3, r27	; 0x03
		e->shared.gravity = GRAVITY;
    afb4:	8f ef       	ldi	r24, 0xFF	; 255
    afb6:	8e 87       	std	Y+14, r24	; 0x0e
		e->shared.vx = SPIDER_SIDE_SPEED;
    afb8:	8c e3       	ldi	r24, 0x3C	; 60
    afba:	90 e0       	ldi	r25, 0x00	; 0
    afbc:	9d 87       	std	Y+13, r25	; 0x0d
    afbe:	8c 87       	std	Y+12, r24	; 0x0c
		if (e->direction == D_LEFT)
    afc0:	89 89       	ldd	r24, Y+17	; 0x11
    afc2:	81 11       	cpse	r24, r1
    afc4:	04 c0       	rjmp	.+8      	; 0xafce <update_spider_enemy+0x48>
		{
			e->shared.vx = -SPIDER_SIDE_SPEED;
    afc6:	84 ec       	ldi	r24, 0xC4	; 196
    afc8:	9f ef       	ldi	r25, 0xFF	; 255
    afca:	9d 87       	std	Y+13, r25	; 0x0d
    afcc:	8c 87       	std	Y+12, r24	; 0x0c
		}
		LBMapSprite(slot, map_enemy_spider_1, 0);
    afce:	40 e0       	ldi	r20, 0x00	; 0
    afd0:	6d e5       	ldi	r22, 0x5D	; 93
    afd2:	7d e2       	ldi	r23, 0x2D	; 45
    afd4:	1a c0       	rjmp	.+52     	; 0xb00a <update_spider_enemy+0x84>
	}
	else if (e->flags & JUMPING && e->shared.gravity == 0)
    afd6:	90 ff       	sbrs	r25, 0
    afd8:	10 c0       	rjmp	.+32     	; 0xaffa <update_spider_enemy+0x74>
    afda:	9e 85       	ldd	r25, Y+14	; 0x0e
    afdc:	91 11       	cpse	r25, r1
    afde:	0d c0       	rjmp	.+26     	; 0xaffa <update_spider_enemy+0x74>
	{
		e->flags = IDLE;
    afe0:	88 e0       	ldi	r24, 0x08	; 8
    afe2:	88 8b       	std	Y+16, r24	; 0x10
		e->shared.vx = 0;
    afe4:	1d 86       	std	Y+13, r1	; 0x0d
    afe6:	1c 86       	std	Y+12, r1	; 0x0c
		e->frame_count = 0;
    afe8:	1d 8a       	std	Y+21, r1	; 0x15
		if (e->direction == D_LEFT)
    afea:	89 89       	ldd	r24, Y+17	; 0x11
    afec:	81 11       	cpse	r24, r1
    afee:	03 c0       	rjmp	.+6      	; 0xaff6 <update_spider_enemy+0x70>
		{
			e->direction = D_RIGHT;
    aff0:	81 e0       	ldi	r24, 0x01	; 1
    aff2:	89 8b       	std	Y+17, r24	; 0x11
    aff4:	0d c0       	rjmp	.+26     	; 0xb010 <update_spider_enemy+0x8a>
		}
		else
		{
			e->direction = D_LEFT;
    aff6:	19 8a       	std	Y+17, r1	; 0x11
    aff8:	0b c0       	rjmp	.+22     	; 0xb010 <update_spider_enemy+0x8a>
		}
	}
	else if (e->flags & IDLE)
    affa:	88 23       	and	r24, r24
    affc:	49 f0       	breq	.+18     	; 0xb010 <update_spider_enemy+0x8a>
	{
		LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    affe:	ce 01       	movw	r24, r28
    b000:	c2 96       	adiw	r24, 0x32	; 50
    b002:	0e 94 e2 48 	call	0x91c4	; 0x91c4 <LBGetNextFrame>
    b006:	40 e0       	ldi	r20, 0x00	; 0
    b008:	bc 01       	movw	r22, r24
    b00a:	81 2f       	mov	r24, r17
    b00c:	0e 94 44 4a 	call	0x9488	; 0x9488 <LBMapSprite>
	}
	e->frame_count++;
    b010:	8d 89       	ldd	r24, Y+21	; 0x15
    b012:	8f 5f       	subi	r24, 0xFF	; 255
    b014:	8d 8b       	std	Y+21, r24	; 0x15
}
    b016:	df 91       	pop	r29
    b018:	cf 91       	pop	r28
    b01a:	1f 91       	pop	r17
    b01c:	08 95       	ret

0000b01e <update_shark_enemy>:

void update_shark_enemy(Enemy* e, u8 slot)
{
    b01e:	cf 93       	push	r28
    b020:	fc 01       	movw	r30, r24
    b022:	c6 2f       	mov	r28, r22
	e->shared.vx = SHARK_SPEED;
    b024:	84 e1       	ldi	r24, 0x14	; 20
    b026:	90 e0       	ldi	r25, 0x00	; 0
    b028:	95 87       	std	Z+13, r25	; 0x0d
    b02a:	84 87       	std	Z+12, r24	; 0x0c
	e->shared.vy = 0;
    b02c:	10 82       	st	Z, r1
    b02e:	11 82       	std	Z+1, r1	; 0x01
    b030:	12 82       	std	Z+2, r1	; 0x02
    b032:	13 82       	std	Z+3, r1	; 0x03
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    b034:	cf 01       	movw	r24, r30
    b036:	c2 96       	adiw	r24, 0x32	; 50
    b038:	0e 94 e2 48 	call	0x91c4	; 0x91c4 <LBGetNextFrame>
    b03c:	40 e0       	ldi	r20, 0x00	; 0
    b03e:	bc 01       	movw	r22, r24
    b040:	8c 2f       	mov	r24, r28
}
    b042:	cf 91       	pop	r28

void update_shark_enemy(Enemy* e, u8 slot)
{
	e->shared.vx = SHARK_SPEED;
	e->shared.vy = 0;
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    b044:	0c 94 44 4a 	jmp	0x9488	; 0x9488 <LBMapSprite>

0000b048 <update_basic_shot>:
}

void update_basic_shot(Shot* s, u8 slot)
{
    b048:	cf 93       	push	r28
    b04a:	c6 2f       	mov	r28, r22
	LBMapSprite(slot, LBGetNextFrame(&s->anim), 0);
    b04c:	42 96       	adiw	r24, 0x12	; 18
    b04e:	0e 94 e2 48 	call	0x91c4	; 0x91c4 <LBGetNextFrame>
    b052:	40 e0       	ldi	r20, 0x00	; 0
    b054:	bc 01       	movw	r22, r24
    b056:	8c 2f       	mov	r24, r28
}
    b058:	cf 91       	pop	r28
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
}

void update_basic_shot(Shot* s, u8 slot)
{
	LBMapSprite(slot, LBGetNextFrame(&s->anim), 0);
    b05a:	0c 94 44 4a 	jmp	0x9488	; 0x9488 <LBMapSprite>

0000b05e <update_enemies>:
}

void update_enemies()
{
    b05e:	ef 92       	push	r14
    b060:	ff 92       	push	r15
    b062:	0f 93       	push	r16
    b064:	1f 93       	push	r17
    b066:	cf 93       	push	r28
    b068:	df 93       	push	r29
    b06a:	c3 e6       	ldi	r28, 0x63	; 99
    b06c:	de e0       	ldi	r29, 0x0E	; 14
	u8 slot = ENEMY_SLOT;
    b06e:	16 e0       	ldi	r17, 0x06	; 6
    b070:	ce 01       	movw	r24, r28
    b072:	03 97       	sbiw	r24, 0x03	; 3
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].flags & EXPLODING)
    b074:	fc 01       	movw	r30, r24
    b076:	20 81       	ld	r18, Z
    b078:	ae 01       	movw	r20, r28
    b07a:	41 50       	subi	r20, 0x01	; 1
    b07c:	51 09       	sbc	r21, r1
    b07e:	7a 01       	movw	r14, r20
    b080:	24 ff       	sbrs	r18, 4
    b082:	0a c0       	rjmp	.+20     	; 0xb098 <update_enemies+0x3a>
		{
			map_explosion(&game.enemies[i].flags, &game.enemies[i].expl, slot, game.enemies[i].width, game.enemies[i].height);
    b084:	08 81       	ld	r16, Y
    b086:	fa 01       	movw	r30, r20
    b088:	20 81       	ld	r18, Z
    b08a:	41 2f       	mov	r20, r17
    b08c:	be 01       	movw	r22, r28
    b08e:	69 5d       	subi	r22, 0xD9	; 217
    b090:	7f 4f       	sbci	r23, 0xFF	; 255
    b092:	0e 94 8e 56 	call	0xad1c	; 0xad1c <map_explosion>
    b096:	15 c0       	rjmp	.+42     	; 0xb0c2 <update_enemies+0x64>
    b098:	fe 01       	movw	r30, r28
    b09a:	34 97       	sbiw	r30, 0x04	; 4
		}
		else if (game.enemies[i].active)
    b09c:	80 81       	ld	r24, Z
    b09e:	88 23       	and	r24, r24
    b0a0:	81 f0       	breq	.+32     	; 0xb0c2 <update_enemies+0x64>
		{
			switch (game.enemies[i].enemy_type)
    b0a2:	89 81       	ldd	r24, Y+1	; 0x01
    b0a4:	88 23       	and	r24, r24
    b0a6:	41 f0       	breq	.+16     	; 0xb0b8 <update_enemies+0x5a>
    b0a8:	81 30       	cpi	r24, 0x01	; 1
    b0aa:	59 f4       	brne	.+22     	; 0xb0c2 <update_enemies+0x64>
			{
				case ENEMY_SPIDER: update_spider_enemy(&game.enemies[i], slot); break;
				case ENEMY_SHARK: update_shark_enemy(&game.enemies[i], slot); break;
    b0ac:	61 2f       	mov	r22, r17
    b0ae:	ce 01       	movw	r24, r28
    b0b0:	43 97       	sbiw	r24, 0x13	; 19
    b0b2:	0e 94 0f 58 	call	0xb01e	; 0xb01e <update_shark_enemy>
    b0b6:	05 c0       	rjmp	.+10     	; 0xb0c2 <update_enemies+0x64>
		}
		else if (game.enemies[i].active)
		{
			switch (game.enemies[i].enemy_type)
			{
				case ENEMY_SPIDER: update_spider_enemy(&game.enemies[i], slot); break;
    b0b8:	61 2f       	mov	r22, r17
    b0ba:	ce 01       	movw	r24, r28
    b0bc:	43 97       	sbiw	r24, 0x13	; 19
    b0be:	0e 94 c3 57 	call	0xaf86	; 0xaf86 <update_spider_enemy>
				case ENEMY_SHARK: update_shark_enemy(&game.enemies[i], slot); break;
			}
		}
		slot += game.enemies[i].width * game.enemies[i].height;
    b0c2:	f7 01       	movw	r30, r14
    b0c4:	90 81       	ld	r25, Z
    b0c6:	88 81       	ld	r24, Y
    b0c8:	98 9f       	mul	r25, r24
    b0ca:	10 0d       	add	r17, r0
    b0cc:	11 24       	eor	r1, r1
    b0ce:	ce 5b       	subi	r28, 0xBE	; 190
    b0d0:	df 4f       	sbci	r29, 0xFF	; 255

void update_enemies()
{
	u8 slot = ENEMY_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    b0d2:	ff e0       	ldi	r31, 0x0F	; 15
    b0d4:	cd 3a       	cpi	r28, 0xAD	; 173
    b0d6:	df 07       	cpc	r29, r31
    b0d8:	59 f6       	brne	.-106    	; 0xb070 <update_enemies+0x12>
				case ENEMY_SHARK: update_shark_enemy(&game.enemies[i], slot); break;
			}
		}
		slot += game.enemies[i].width * game.enemies[i].height;
	}
}
    b0da:	df 91       	pop	r29
    b0dc:	cf 91       	pop	r28
    b0de:	1f 91       	pop	r17
    b0e0:	0f 91       	pop	r16
    b0e2:	ff 90       	pop	r15
    b0e4:	ef 90       	pop	r14
    b0e6:	08 95       	ret

0000b0e8 <update_enemy_shots>:

void update_enemy_shots()
{
    b0e8:	8f 92       	push	r8
    b0ea:	9f 92       	push	r9
    b0ec:	af 92       	push	r10
    b0ee:	bf 92       	push	r11
    b0f0:	cf 92       	push	r12
    b0f2:	df 92       	push	r13
    b0f4:	ef 92       	push	r14
    b0f6:	ff 92       	push	r15
    b0f8:	0f 93       	push	r16
    b0fa:	1f 93       	push	r17
    b0fc:	cf 93       	push	r28
    b0fe:	df 93       	push	r29
    b100:	00 d0       	rcall	.+0      	; 0xb102 <update_enemy_shots+0x1a>
    b102:	00 d0       	rcall	.+0      	; 0xb104 <update_enemy_shots+0x1c>
    b104:	cd b7       	in	r28, 0x3d	; 61
    b106:	de b7       	in	r29, 0x3e	; 62
    b108:	26 e6       	ldi	r18, 0x66	; 102
    b10a:	82 2e       	mov	r8, r18
    b10c:	2e e0       	ldi	r18, 0x0E	; 14
    b10e:	92 2e       	mov	r9, r18
    b110:	09 e7       	ldi	r16, 0x79	; 121
    b112:	1e e0       	ldi	r17, 0x0E	; 14
    b114:	3f e0       	ldi	r19, 0x0F	; 15
    b116:	b3 2e       	mov	r11, r19
					if (!game.enemies[i].shot[j].active)
					{
						game.enemies[i].shot[j].active = 1;
						game.enemies[i].shot[j].shared.x = game.enemies[i].shared.x;
						game.enemies[i].shot[j].shared.y = ((u16 ) game.enemies[i].shared.y / 8) * 8;
						game.enemies[i].shot[j].shared.vx = ENEMY_SHOT_SPEED;
    b118:	44 e6       	ldi	r20, 0x64	; 100
    b11a:	e4 2e       	mov	r14, r20
    b11c:	f1 2c       	mov	r15, r1
						if (game.player.shared.x <= game.enemies[i].shared.x)
						{
							game.enemies[i].shot[j].shared.vx = -ENEMY_SHOT_SPEED;
    b11e:	5c e9       	ldi	r21, 0x9C	; 156
    b120:	c5 2e       	mov	r12, r21
    b122:	dd 24       	eor	r13, r13
    b124:	da 94       	dec	r13
    b126:	aa 24       	eor	r10, r10
    b128:	aa 94       	dec	r10
    b12a:	ab 0c       	add	r10, r11
    b12c:	f4 01       	movw	r30, r8
    b12e:	37 97       	sbiw	r30, 0x07	; 7
{
	u8 slot = ENEMY_SHOT_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].active && game.enemies[i].shot_frame_count >= ENEMY_SHOT_DELAY_FRAMES)
    b130:	80 81       	ld	r24, Z
    b132:	88 23       	and	r24, r24
    b134:	09 f4       	brne	.+2      	; 0xb138 <update_enemy_shots+0x50>
    b136:	58 c0       	rjmp	.+176    	; 0xb1e8 <update_enemy_shots+0x100>
    b138:	f4 01       	movw	r30, r8
    b13a:	80 81       	ld	r24, Z
    b13c:	8c 33       	cpi	r24, 0x3C	; 60
    b13e:	08 f4       	brcc	.+2      	; 0xb142 <update_enemy_shots+0x5a>
    b140:	50 c0       	rjmp	.+160    	; 0xb1e2 <update_enemy_shots+0xfa>
		{
			game.enemies[i].shot_frame_count = 0;	
    b142:	10 82       	st	Z, r1
    b144:	f8 01       	movw	r30, r16
    b146:	32 97       	sbiw	r30, 0x02	; 2
			for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
			{
				if (game.enemies[i].shot[j].shot_type == BASIC_ENEMY_SHOT)
    b148:	80 81       	ld	r24, Z
    b14a:	81 30       	cpi	r24, 0x01	; 1
    b14c:	09 f0       	breq	.+2      	; 0xb150 <update_enemy_shots+0x68>
    b14e:	4c c0       	rjmp	.+152    	; 0xb1e8 <update_enemy_shots+0x100>
				{
					if (!game.enemies[i].shot[j].active)
    b150:	f8 01       	movw	r30, r16
    b152:	90 81       	ld	r25, Z
    b154:	91 11       	cpse	r25, r1
    b156:	3f c0       	rjmp	.+126    	; 0xb1d6 <update_enemy_shots+0xee>
					{
						game.enemies[i].shot[j].active = 1;
    b158:	80 83       	st	Z, r24
    b15a:	f4 01       	movw	r30, r8
    b15c:	72 97       	sbiw	r30, 0x12	; 18
						game.enemies[i].shot[j].shared.x = game.enemies[i].shared.x;
    b15e:	20 81       	ld	r18, Z
    b160:	31 81       	ldd	r19, Z+1	; 0x01
    b162:	42 81       	ldd	r20, Z+2	; 0x02
    b164:	53 81       	ldd	r21, Z+3	; 0x03
    b166:	f4 01       	movw	r30, r8
    b168:	26 83       	std	Z+6, r18	; 0x06
    b16a:	37 83       	std	Z+7, r19	; 0x07
    b16c:	40 87       	std	Z+8, r20	; 0x08
    b16e:	51 87       	std	Z+9, r21	; 0x09
    b170:	3e 97       	sbiw	r30, 0x0e	; 14
						game.enemies[i].shot[j].shared.y = ((u16 ) game.enemies[i].shared.y / 8) * 8;
    b172:	60 81       	ld	r22, Z
    b174:	71 81       	ldd	r23, Z+1	; 0x01
    b176:	82 81       	ldd	r24, Z+2	; 0x02
    b178:	93 81       	ldd	r25, Z+3	; 0x03
    b17a:	29 83       	std	Y+1, r18	; 0x01
    b17c:	3a 83       	std	Y+2, r19	; 0x02
    b17e:	4b 83       	std	Y+3, r20	; 0x03
    b180:	5c 83       	std	Y+4, r21	; 0x04
    b182:	0e 94 b8 67 	call	0xcf70	; 0xcf70 <__fixunssfsi>
    b186:	83 e0       	ldi	r24, 0x03	; 3
    b188:	76 95       	lsr	r23
    b18a:	67 95       	ror	r22
    b18c:	8a 95       	dec	r24
    b18e:	e1 f7       	brne	.-8      	; 0xb188 <update_enemy_shots+0xa0>
    b190:	93 e0       	ldi	r25, 0x03	; 3
    b192:	66 0f       	add	r22, r22
    b194:	77 1f       	adc	r23, r23
    b196:	9a 95       	dec	r25
    b198:	e1 f7       	brne	.-8      	; 0xb192 <update_enemy_shots+0xaa>
    b19a:	80 e0       	ldi	r24, 0x00	; 0
    b19c:	90 e0       	ldi	r25, 0x00	; 0
    b19e:	0e 94 e4 67 	call	0xcfc8	; 0xcfc8 <__floatunsisf>
    b1a2:	f4 01       	movw	r30, r8
    b1a4:	62 87       	std	Z+10, r22	; 0x0a
    b1a6:	73 87       	std	Z+11, r23	; 0x0b
    b1a8:	84 87       	std	Z+12, r24	; 0x0c
    b1aa:	95 87       	std	Z+13, r25	; 0x0d
						game.enemies[i].shot[j].shared.vx = ENEMY_SHOT_SPEED;
    b1ac:	f7 86       	std	Z+15, r15	; 0x0f
    b1ae:	e6 86       	std	Z+14, r14	; 0x0e
						if (game.player.shared.x <= game.enemies[i].shared.x)
    b1b0:	29 81       	ldd	r18, Y+1	; 0x01
    b1b2:	3a 81       	ldd	r19, Y+2	; 0x02
    b1b4:	4b 81       	ldd	r20, Y+3	; 0x03
    b1b6:	5c 81       	ldd	r21, Y+4	; 0x04
    b1b8:	60 91 c8 0d 	lds	r22, 0x0DC8
    b1bc:	70 91 c9 0d 	lds	r23, 0x0DC9
    b1c0:	80 91 ca 0d 	lds	r24, 0x0DCA
    b1c4:	90 91 cb 0d 	lds	r25, 0x0DCB
    b1c8:	0e 94 b4 67 	call	0xcf68	; 0xcf68 <__cmpsf2>
    b1cc:	18 16       	cp	r1, r24
    b1ce:	1c f0       	brlt	.+6      	; 0xb1d6 <update_enemy_shots+0xee>
						{
							game.enemies[i].shot[j].shared.vx = -ENEMY_SHOT_SPEED;
    b1d0:	f4 01       	movw	r30, r8
    b1d2:	d7 86       	std	Z+15, r13	; 0x0f
    b1d4:	c6 86       	std	Z+14, r12	; 0x0e
						}
					}
					update_basic_shot(&game.enemies[i].shot[j], slot);
    b1d6:	6a 2d       	mov	r22, r10
    b1d8:	c4 01       	movw	r24, r8
    b1da:	02 96       	adiw	r24, 0x02	; 2
    b1dc:	0e 94 24 58 	call	0xb048	; 0xb048 <update_basic_shot>
    b1e0:	03 c0       	rjmp	.+6      	; 0xb1e8 <update_enemy_shots+0x100>
				slot += 1;
			}
		}
		else if (game.enemies[i].active)
		{
			game.enemies[i].shot_frame_count++;
    b1e2:	8f 5f       	subi	r24, 0xFF	; 255
    b1e4:	f4 01       	movw	r30, r8
    b1e6:	80 83       	st	Z, r24
    b1e8:	b3 94       	inc	r11
    b1ea:	f2 e4       	ldi	r31, 0x42	; 66
    b1ec:	8f 0e       	add	r8, r31
    b1ee:	91 1c       	adc	r9, r1
    b1f0:	0e 5b       	subi	r16, 0xBE	; 190
    b1f2:	1f 4f       	sbci	r17, 0xFF	; 255

void update_enemy_shots()
{
	u8 slot = ENEMY_SHOT_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    b1f4:	84 e1       	ldi	r24, 0x14	; 20
    b1f6:	b8 12       	cpse	r11, r24
    b1f8:	96 cf       	rjmp	.-212    	; 0xb126 <update_enemy_shots+0x3e>
		else
		{
			slot += MAX_ENEMY_SHOTS;
		}
	}
}
    b1fa:	0f 90       	pop	r0
    b1fc:	0f 90       	pop	r0
    b1fe:	0f 90       	pop	r0
    b200:	0f 90       	pop	r0
    b202:	df 91       	pop	r29
    b204:	cf 91       	pop	r28
    b206:	1f 91       	pop	r17
    b208:	0f 91       	pop	r16
    b20a:	ff 90       	pop	r15
    b20c:	ef 90       	pop	r14
    b20e:	df 90       	pop	r13
    b210:	cf 90       	pop	r12
    b212:	bf 90       	pop	r11
    b214:	af 90       	pop	r10
    b216:	9f 90       	pop	r9
    b218:	8f 90       	pop	r8
    b21a:	08 95       	ret

0000b21c <animate_enemies>:

void animate_enemies()
{
    b21c:	2f 92       	push	r2
    b21e:	3f 92       	push	r3
    b220:	4f 92       	push	r4
    b222:	5f 92       	push	r5
    b224:	6f 92       	push	r6
    b226:	7f 92       	push	r7
    b228:	8f 92       	push	r8
    b22a:	9f 92       	push	r9
    b22c:	af 92       	push	r10
    b22e:	bf 92       	push	r11
    b230:	cf 92       	push	r12
    b232:	df 92       	push	r13
    b234:	ef 92       	push	r14
    b236:	ff 92       	push	r15
    b238:	0f 93       	push	r16
    b23a:	1f 93       	push	r17
    b23c:	cf 93       	push	r28
    b23e:	df 93       	push	r29
    b240:	cd b7       	in	r28, 0x3d	; 61
    b242:	de b7       	in	r29, 0x3e	; 62
    b244:	2c 97       	sbiw	r28, 0x0c	; 12
    b246:	0f b6       	in	r0, 0x3f	; 63
    b248:	f8 94       	cli
    b24a:	de bf       	out	0x3e, r29	; 62
    b24c:	0f be       	out	0x3f, r0	; 63
    b24e:	cd bf       	out	0x3d, r28	; 61
    b250:	42 e6       	ldi	r20, 0x62	; 98
    b252:	24 2e       	mov	r2, r20
    b254:	4e e0       	ldi	r20, 0x0E	; 14
    b256:	34 2e       	mov	r3, r20
    b258:	83 e6       	ldi	r24, 0x63	; 99
    b25a:	9e e0       	ldi	r25, 0x0E	; 14
    b25c:	9c 87       	std	Y+12, r25	; 0x0c
    b25e:	8b 87       	std	Y+11, r24	; 0x0b
    b260:	50 e5       	ldi	r21, 0x50	; 80
    b262:	85 2e       	mov	r8, r21
    b264:	5e e0       	ldi	r21, 0x0E	; 14
    b266:	95 2e       	mov	r9, r21
	u8 slot = ENEMY_SLOT;
    b268:	66 e0       	ldi	r22, 0x06	; 6
    b26a:	b6 2e       	mov	r11, r22
    b26c:	eb 85       	ldd	r30, Y+11	; 0x0b
    b26e:	fc 85       	ldd	r31, Y+12	; 0x0c
    b270:	34 97       	sbiw	r30, 0x04	; 4
    b272:	fa 83       	std	Y+2, r31	; 0x02
    b274:	e9 83       	std	Y+1, r30	; 0x01
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].active && !(game.enemies[i].flags & EXPLODING))
    b276:	80 81       	ld	r24, Z
    b278:	eb 85       	ldd	r30, Y+11	; 0x0b
    b27a:	fc 85       	ldd	r31, Y+12	; 0x0c
    b27c:	33 97       	sbiw	r30, 0x03	; 3
    b27e:	88 23       	and	r24, r24
    b280:	09 f4       	brne	.+2      	; 0xb284 <animate_enemies+0x68>
    b282:	a9 c0       	rjmp	.+338    	; 0xb3d6 <animate_enemies+0x1ba>
    b284:	80 81       	ld	r24, Z
    b286:	84 fd       	sbrc	r24, 4
    b288:	a6 c0       	rjmp	.+332    	; 0xb3d6 <animate_enemies+0x1ba>
		{
			if (game.enemies[i].shared.x < game.camera_x || game.enemies[i].shared.y < game.camera_y || game.enemies[i].shared.y > game.camera_y + CAMERA_HEIGHT*8)
    b28a:	f4 01       	movw	r30, r8
    b28c:	44 80       	ldd	r4, Z+4	; 0x04
    b28e:	55 80       	ldd	r5, Z+5	; 0x05
    b290:	66 80       	ldd	r6, Z+6	; 0x06
    b292:	77 80       	ldd	r7, Z+7	; 0x07
    b294:	60 91 aa 0d 	lds	r22, 0x0DAA
    b298:	70 91 ab 0d 	lds	r23, 0x0DAB
    b29c:	80 e0       	ldi	r24, 0x00	; 0
    b29e:	90 e0       	ldi	r25, 0x00	; 0
    b2a0:	0e 94 e4 67 	call	0xcfc8	; 0xcfc8 <__floatunsisf>
    b2a4:	9b 01       	movw	r18, r22
    b2a6:	ac 01       	movw	r20, r24
    b2a8:	c3 01       	movw	r24, r6
    b2aa:	b2 01       	movw	r22, r4
    b2ac:	0e 94 b4 67 	call	0xcf68	; 0xcf68 <__cmpsf2>
    b2b0:	87 fd       	sbrc	r24, 7
    b2b2:	25 c0       	rjmp	.+74     	; 0xb2fe <animate_enemies+0xe2>
    b2b4:	f4 01       	movw	r30, r8
    b2b6:	c0 84       	ldd	r12, Z+8	; 0x08
    b2b8:	d1 84       	ldd	r13, Z+9	; 0x09
    b2ba:	e2 84       	ldd	r14, Z+10	; 0x0a
    b2bc:	f3 84       	ldd	r15, Z+11	; 0x0b
    b2be:	00 91 ac 0d 	lds	r16, 0x0DAC
    b2c2:	10 91 ad 0d 	lds	r17, 0x0DAD
    b2c6:	b8 01       	movw	r22, r16
    b2c8:	80 e0       	ldi	r24, 0x00	; 0
    b2ca:	90 e0       	ldi	r25, 0x00	; 0
    b2cc:	0e 94 e4 67 	call	0xcfc8	; 0xcfc8 <__floatunsisf>
    b2d0:	9b 01       	movw	r18, r22
    b2d2:	ac 01       	movw	r20, r24
    b2d4:	c7 01       	movw	r24, r14
    b2d6:	b6 01       	movw	r22, r12
    b2d8:	0e 94 b4 67 	call	0xcf68	; 0xcf68 <__cmpsf2>
    b2dc:	87 fd       	sbrc	r24, 7
    b2de:	0f c0       	rjmp	.+30     	; 0xb2fe <animate_enemies+0xe2>
    b2e0:	b8 01       	movw	r22, r16
    b2e2:	60 53       	subi	r22, 0x30	; 48
    b2e4:	7f 4f       	sbci	r23, 0xFF	; 255
    b2e6:	80 e0       	ldi	r24, 0x00	; 0
    b2e8:	90 e0       	ldi	r25, 0x00	; 0
    b2ea:	0e 94 e4 67 	call	0xcfc8	; 0xcfc8 <__floatunsisf>
    b2ee:	9b 01       	movw	r18, r22
    b2f0:	ac 01       	movw	r20, r24
    b2f2:	c7 01       	movw	r24, r14
    b2f4:	b6 01       	movw	r22, r12
    b2f6:	0e 94 96 68 	call	0xd12c	; 0xd12c <__gesf2>
    b2fa:	18 16       	cp	r1, r24
    b2fc:	84 f4       	brge	.+32     	; 0xb31e <animate_enemies+0x102>
			{
				game.enemies[i].active = 0;
    b2fe:	e9 81       	ldd	r30, Y+1	; 0x01
    b300:	fa 81       	ldd	r31, Y+2	; 0x02
    b302:	10 82       	st	Z, r1
				game.active_enemies--;
    b304:	80 91 c1 0d 	lds	r24, 0x0DC1
    b308:	81 50       	subi	r24, 0x01	; 1
    b30a:	80 93 c1 0d 	sts	0x0DC1, r24
				LBMoveSprite(slot, OFF_SCREEN, 0, game.enemies[i].width, game.enemies[i].height);
    b30e:	eb 85       	ldd	r30, Y+11	; 0x0b
    b310:	fc 85       	ldd	r31, Y+12	; 0x0c
    b312:	00 81       	ld	r16, Z
    b314:	f1 01       	movw	r30, r2
    b316:	20 81       	ld	r18, Z
    b318:	40 e0       	ldi	r20, 0x00	; 0
    b31a:	60 ee       	ldi	r22, 0xE0	; 224
    b31c:	8c c0       	rjmp	.+280    	; 0xb436 <animate_enemies+0x21a>
			}
			else if (LBCollides(game.player.shared.x,game.player.shared.y, game.player.width*8, game.player.height*8,
    b31e:	c7 01       	movw	r24, r14
    b320:	b6 01       	movw	r22, r12
    b322:	0e 94 b8 67 	call	0xcf70	; 0xcf70 <__fixunssfsi>
    b326:	69 83       	std	Y+1, r22	; 0x01
    b328:	7a 83       	std	Y+2, r23	; 0x02
    b32a:	8b 83       	std	Y+3, r24	; 0x03
    b32c:	9c 83       	std	Y+4, r25	; 0x04
    b32e:	c3 01       	movw	r24, r6
    b330:	b2 01       	movw	r22, r4
    b332:	0e 94 b8 67 	call	0xcf70	; 0xcf70 <__fixunssfsi>
    b336:	6d 83       	std	Y+5, r22	; 0x05
    b338:	7e 83       	std	Y+6, r23	; 0x06
    b33a:	8f 83       	std	Y+7, r24	; 0x07
    b33c:	98 87       	std	Y+8, r25	; 0x08
    b33e:	20 91 d8 0d 	lds	r18, 0x0DD8
    b342:	22 0f       	add	r18, r18
    b344:	22 0f       	add	r18, r18
    b346:	22 0f       	add	r18, r18
    b348:	40 91 d7 0d 	lds	r20, 0x0DD7
    b34c:	44 0f       	add	r20, r20
    b34e:	44 0f       	add	r20, r20
    b350:	44 0f       	add	r20, r20
    b352:	60 91 cc 0d 	lds	r22, 0x0DCC
    b356:	70 91 cd 0d 	lds	r23, 0x0DCD
    b35a:	80 91 ce 0d 	lds	r24, 0x0DCE
    b35e:	90 91 cf 0d 	lds	r25, 0x0DCF
    b362:	29 87       	std	Y+9, r18	; 0x09
    b364:	4a 87       	std	Y+10, r20	; 0x0a
    b366:	0e 94 b8 67 	call	0xcf70	; 0xcf70 <__fixunssfsi>
    b36a:	2b 01       	movw	r4, r22
    b36c:	3c 01       	movw	r6, r24
    b36e:	60 91 c8 0d 	lds	r22, 0x0DC8
    b372:	70 91 c9 0d 	lds	r23, 0x0DC9
    b376:	80 91 ca 0d 	lds	r24, 0x0DCA
    b37a:	90 91 cb 0d 	lds	r25, 0x0DCB
    b37e:	0e 94 b8 67 	call	0xcf70	; 0xcf70 <__fixunssfsi>
    b382:	dc 01       	movw	r26, r24
    b384:	cb 01       	movw	r24, r22
    b386:	28 e0       	ldi	r18, 0x08	; 8
    b388:	a2 2e       	mov	r10, r18
    b38a:	38 e0       	ldi	r19, 0x08	; 8
    b38c:	c3 2e       	mov	r12, r19
    b38e:	e9 80       	ldd	r14, Y+1	; 0x01
    b390:	fa 80       	ldd	r15, Y+2	; 0x02
    b392:	0d 81       	ldd	r16, Y+5	; 0x05
    b394:	1e 81       	ldd	r17, Y+6	; 0x06
    b396:	29 85       	ldd	r18, Y+9	; 0x09
    b398:	4a 85       	ldd	r20, Y+10	; 0x0a
    b39a:	b2 01       	movw	r22, r4
    b39c:	0e 94 f9 49 	call	0x93f2	; 0x93f2 <LBCollides>
    b3a0:	88 23       	and	r24, r24
    b3a2:	79 f0       	breq	.+30     	; 0xb3c2 <animate_enemies+0x1a6>
							game.enemies[i].shared.x, game.enemies[i].shared.y, 8, 8
						) && !(game.player.flags & EXPLODING)
    b3a4:	80 91 d4 0d 	lds	r24, 0x0DD4
    b3a8:	84 fd       	sbrc	r24, 4
    b3aa:	0b c0       	rjmp	.+22     	; 0xb3c2 <animate_enemies+0x1a6>
			)
			{
				SFX_PLAYER_EXPLODE;
    b3ac:	41 e0       	ldi	r20, 0x01	; 1
    b3ae:	6f ef       	ldi	r22, 0xFF	; 255
    b3b0:	85 e0       	ldi	r24, 0x05	; 5
    b3b2:	0e 94 64 3d 	call	0x7ac8	; 0x7ac8 <TriggerFx>
				game.player.shield = 0;
    b3b6:	10 92 d9 0d 	sts	0x0DD9, r1
				game.player.flags = EXPLODING;
    b3ba:	80 e1       	ldi	r24, 0x10	; 16
    b3bc:	80 93 d4 0d 	sts	0x0DD4, r24
				return;
    b3c0:	57 c0       	rjmp	.+174    	; 0xb470 <animate_enemies+0x254>
			}
			else
			{
				animate_sprite(&game.enemies[i].shared, slot, game.enemies[i].width, game.enemies[i].height);
    b3c2:	eb 85       	ldd	r30, Y+11	; 0x0b
    b3c4:	fc 85       	ldd	r31, Y+12	; 0x0c
    b3c6:	20 81       	ld	r18, Z
    b3c8:	f1 01       	movw	r30, r2
    b3ca:	40 81       	ld	r20, Z
    b3cc:	6b 2d       	mov	r22, r11
    b3ce:	c4 01       	movw	r24, r8
    b3d0:	0e 94 d9 56 	call	0xadb2	; 0xadb2 <animate_sprite>
    b3d4:	33 c0       	rjmp	.+102    	; 0xb43c <animate_enemies+0x220>
			}
		}
		else if (game.enemies[i].flags & EXPLODING)
    b3d6:	80 81       	ld	r24, Z
    b3d8:	84 ff       	sbrs	r24, 4
    b3da:	30 c0       	rjmp	.+96     	; 0xb43c <animate_enemies+0x220>
		{
			LBMoveSprite(slot, game.enemies[i].shared.x - game.camera_x, game.enemies[i].shared.y - game.camera_y, game.enemies[i].width, game.enemies[i].height);
    b3dc:	60 91 ac 0d 	lds	r22, 0x0DAC
    b3e0:	70 91 ad 0d 	lds	r23, 0x0DAD
    b3e4:	80 e0       	ldi	r24, 0x00	; 0
    b3e6:	90 e0       	ldi	r25, 0x00	; 0
    b3e8:	0e 94 e4 67 	call	0xcfc8	; 0xcfc8 <__floatunsisf>
    b3ec:	9b 01       	movw	r18, r22
    b3ee:	ac 01       	movw	r20, r24
    b3f0:	f4 01       	movw	r30, r8
    b3f2:	60 85       	ldd	r22, Z+8	; 0x08
    b3f4:	71 85       	ldd	r23, Z+9	; 0x09
    b3f6:	82 85       	ldd	r24, Z+10	; 0x0a
    b3f8:	93 85       	ldd	r25, Z+11	; 0x0b
    b3fa:	0e 94 4f 67 	call	0xce9e	; 0xce9e <__subsf3>
    b3fe:	0e 94 b8 67 	call	0xcf70	; 0xcf70 <__fixunssfsi>
    b402:	16 2f       	mov	r17, r22
    b404:	60 91 aa 0d 	lds	r22, 0x0DAA
    b408:	70 91 ab 0d 	lds	r23, 0x0DAB
    b40c:	80 e0       	ldi	r24, 0x00	; 0
    b40e:	90 e0       	ldi	r25, 0x00	; 0
    b410:	0e 94 e4 67 	call	0xcfc8	; 0xcfc8 <__floatunsisf>
    b414:	9b 01       	movw	r18, r22
    b416:	ac 01       	movw	r20, r24
    b418:	f4 01       	movw	r30, r8
    b41a:	64 81       	ldd	r22, Z+4	; 0x04
    b41c:	75 81       	ldd	r23, Z+5	; 0x05
    b41e:	86 81       	ldd	r24, Z+6	; 0x06
    b420:	97 81       	ldd	r25, Z+7	; 0x07
    b422:	0e 94 4f 67 	call	0xce9e	; 0xce9e <__subsf3>
    b426:	0e 94 b8 67 	call	0xcf70	; 0xcf70 <__fixunssfsi>
    b42a:	eb 85       	ldd	r30, Y+11	; 0x0b
    b42c:	fc 85       	ldd	r31, Y+12	; 0x0c
    b42e:	00 81       	ld	r16, Z
    b430:	f1 01       	movw	r30, r2
    b432:	20 81       	ld	r18, Z
    b434:	41 2f       	mov	r20, r17
    b436:	8b 2d       	mov	r24, r11
    b438:	0e 94 96 4a 	call	0x952c	; 0x952c <LBMoveSprite>
		}
		slot +=  game.enemies[i].width * game.enemies[i].height;
    b43c:	eb 85       	ldd	r30, Y+11	; 0x0b
    b43e:	fc 85       	ldd	r31, Y+12	; 0x0c
    b440:	90 81       	ld	r25, Z
    b442:	f1 01       	movw	r30, r2
    b444:	80 81       	ld	r24, Z
    b446:	98 9f       	mul	r25, r24
    b448:	b0 0c       	add	r11, r0
    b44a:	11 24       	eor	r1, r1
    b44c:	f2 e4       	ldi	r31, 0x42	; 66
    b44e:	2f 0e       	add	r2, r31
    b450:	31 1c       	adc	r3, r1
    b452:	8b 85       	ldd	r24, Y+11	; 0x0b
    b454:	9c 85       	ldd	r25, Y+12	; 0x0c
    b456:	8e 5b       	subi	r24, 0xBE	; 190
    b458:	9f 4f       	sbci	r25, 0xFF	; 255
    b45a:	9c 87       	std	Y+12, r25	; 0x0c
    b45c:	8b 87       	std	Y+11, r24	; 0x0b
    b45e:	92 e4       	ldi	r25, 0x42	; 66
    b460:	89 0e       	add	r8, r25
    b462:	91 1c       	adc	r9, r1

void animate_enemies()
{
	u8 slot = ENEMY_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    b464:	eb 85       	ldd	r30, Y+11	; 0x0b
    b466:	fc 85       	ldd	r31, Y+12	; 0x0c
    b468:	ed 5a       	subi	r30, 0xAD	; 173
    b46a:	ff 40       	sbci	r31, 0x0F	; 15
    b46c:	09 f0       	breq	.+2      	; 0xb470 <animate_enemies+0x254>
    b46e:	fe ce       	rjmp	.-516    	; 0xb26c <animate_enemies+0x50>
		{
			LBMoveSprite(slot, game.enemies[i].shared.x - game.camera_x, game.enemies[i].shared.y - game.camera_y, game.enemies[i].width, game.enemies[i].height);
		}
		slot +=  game.enemies[i].width * game.enemies[i].height;
	}
}
    b470:	2c 96       	adiw	r28, 0x0c	; 12
    b472:	0f b6       	in	r0, 0x3f	; 63
    b474:	f8 94       	cli
    b476:	de bf       	out	0x3e, r29	; 62
    b478:	0f be       	out	0x3f, r0	; 63
    b47a:	cd bf       	out	0x3d, r28	; 61
    b47c:	df 91       	pop	r29
    b47e:	cf 91       	pop	r28
    b480:	1f 91       	pop	r17
    b482:	0f 91       	pop	r16
    b484:	ff 90       	pop	r15
    b486:	ef 90       	pop	r14
    b488:	df 90       	pop	r13
    b48a:	cf 90       	pop	r12
    b48c:	bf 90       	pop	r11
    b48e:	af 90       	pop	r10
    b490:	9f 90       	pop	r9
    b492:	8f 90       	pop	r8
    b494:	7f 90       	pop	r7
    b496:	6f 90       	pop	r6
    b498:	5f 90       	pop	r5
    b49a:	4f 90       	pop	r4
    b49c:	3f 90       	pop	r3
    b49e:	2f 90       	pop	r2
    b4a0:	08 95       	ret

0000b4a2 <animate_enemy_shots>:

void animate_enemy_shots()
{
    b4a2:	2f 92       	push	r2
    b4a4:	3f 92       	push	r3
    b4a6:	4f 92       	push	r4
    b4a8:	5f 92       	push	r5
    b4aa:	6f 92       	push	r6
    b4ac:	7f 92       	push	r7
    b4ae:	8f 92       	push	r8
    b4b0:	9f 92       	push	r9
    b4b2:	af 92       	push	r10
    b4b4:	bf 92       	push	r11
    b4b6:	cf 92       	push	r12
    b4b8:	df 92       	push	r13
    b4ba:	ef 92       	push	r14
    b4bc:	ff 92       	push	r15
    b4be:	0f 93       	push	r16
    b4c0:	1f 93       	push	r17
    b4c2:	cf 93       	push	r28
    b4c4:	df 93       	push	r29
    b4c6:	cd b7       	in	r28, 0x3d	; 61
    b4c8:	de b7       	in	r29, 0x3e	; 62
    b4ca:	62 97       	sbiw	r28, 0x12	; 18
    b4cc:	0f b6       	in	r0, 0x3f	; 63
    b4ce:	f8 94       	cli
    b4d0:	de bf       	out	0x3e, r29	; 62
    b4d2:	0f be       	out	0x3f, r0	; 63
    b4d4:	cd bf       	out	0x3d, r28	; 61
    b4d6:	49 e7       	ldi	r20, 0x79	; 121
    b4d8:	24 2e       	mov	r2, r20
    b4da:	4e e0       	ldi	r20, 0x0E	; 14
    b4dc:	34 2e       	mov	r3, r20
    b4de:	58 e6       	ldi	r21, 0x68	; 104
    b4e0:	85 2e       	mov	r8, r21
    b4e2:	5e e0       	ldi	r21, 0x0E	; 14
    b4e4:	95 2e       	mov	r9, r21
	u8 slot = ENEMY_SHOT_SLOT;
    b4e6:	6e e0       	ldi	r22, 0x0E	; 14
    b4e8:	b6 2e       	mov	r11, r22
    b4ea:	f1 01       	movw	r30, r2
    b4ec:	32 97       	sbiw	r30, 0x02	; 2
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
		{
			if (game.enemies[i].shot[j].shot_type == BASIC_ENEMY_SHOT)
    b4ee:	80 81       	ld	r24, Z
    b4f0:	81 30       	cpi	r24, 0x01	; 1
    b4f2:	09 f0       	breq	.+2      	; 0xb4f6 <animate_enemy_shots+0x54>
    b4f4:	f0 c0       	rjmp	.+480    	; 0xb6d6 <animate_enemy_shots+0x234>
			{
				if (game.enemies[i].shot[j].active)
    b4f6:	d1 01       	movw	r26, r2
    b4f8:	8c 91       	ld	r24, X
    b4fa:	88 23       	and	r24, r24
    b4fc:	09 f4       	brne	.+2      	; 0xb500 <animate_enemy_shots+0x5e>
    b4fe:	eb c0       	rjmp	.+470    	; 0xb6d6 <animate_enemy_shots+0x234>
				{
					if (game.enemies[i].shot[j].shared.x < game.camera_x || game.enemies[i].shot[j].shared.x > game.camera_x + CAMERA_WIDTH*8 ||
    b500:	f4 01       	movw	r30, r8
    b502:	c4 80       	ldd	r12, Z+4	; 0x04
    b504:	d5 80       	ldd	r13, Z+5	; 0x05
    b506:	e6 80       	ldd	r14, Z+6	; 0x06
    b508:	f7 80       	ldd	r15, Z+7	; 0x07
    b50a:	60 90 aa 0d 	lds	r6, 0x0DAA
    b50e:	70 90 ab 0d 	lds	r7, 0x0DAB
    b512:	b3 01       	movw	r22, r6
    b514:	80 e0       	ldi	r24, 0x00	; 0
    b516:	90 e0       	ldi	r25, 0x00	; 0
    b518:	0e 94 e4 67 	call	0xcfc8	; 0xcfc8 <__floatunsisf>
    b51c:	9b 01       	movw	r18, r22
    b51e:	ac 01       	movw	r20, r24
    b520:	c7 01       	movw	r24, r14
    b522:	b6 01       	movw	r22, r12
    b524:	0e 94 b4 67 	call	0xcf68	; 0xcf68 <__cmpsf2>
    b528:	87 ff       	sbrs	r24, 7
    b52a:	03 c0       	rjmp	.+6      	; 0xb532 <animate_enemy_shots+0x90>
					   collision_detect_level(&game.enemies[i].shot[j].shared, 1, 1))
					{
						game.enemies[i].shot[j].active = 0;
    b52c:	d1 01       	movw	r26, r2
    b52e:	1c 92       	st	X, r1
    b530:	86 c0       	rjmp	.+268    	; 0xb63e <animate_enemy_shots+0x19c>
		{
			if (game.enemies[i].shot[j].shot_type == BASIC_ENEMY_SHOT)
			{
				if (game.enemies[i].shot[j].active)
				{
					if (game.enemies[i].shot[j].shared.x < game.camera_x || game.enemies[i].shot[j].shared.x > game.camera_x + CAMERA_WIDTH*8 ||
    b532:	b3 01       	movw	r22, r6
    b534:	60 52       	subi	r22, 0x20	; 32
    b536:	7f 4f       	sbci	r23, 0xFF	; 255
    b538:	80 e0       	ldi	r24, 0x00	; 0
    b53a:	90 e0       	ldi	r25, 0x00	; 0
    b53c:	0e 94 e4 67 	call	0xcfc8	; 0xcfc8 <__floatunsisf>
    b540:	9b 01       	movw	r18, r22
    b542:	ac 01       	movw	r20, r24
    b544:	c7 01       	movw	r24, r14
    b546:	b6 01       	movw	r22, r12
    b548:	0e 94 96 68 	call	0xd12c	; 0xd12c <__gesf2>
    b54c:	18 16       	cp	r1, r24
    b54e:	74 f3       	brlt	.-36     	; 0xb52c <animate_enemy_shots+0x8a>
					   collision_detect_level(&game.enemies[i].shot[j].shared, 1, 1))
    b550:	41 e0       	ldi	r20, 0x01	; 1
    b552:	61 e0       	ldi	r22, 0x01	; 1
    b554:	c4 01       	movw	r24, r8
    b556:	0e 94 ba 51 	call	0xa374	; 0xa374 <collision_detect_level>
		{
			if (game.enemies[i].shot[j].shot_type == BASIC_ENEMY_SHOT)
			{
				if (game.enemies[i].shot[j].active)
				{
					if (game.enemies[i].shot[j].shared.x < game.camera_x || game.enemies[i].shot[j].shared.x > game.camera_x + CAMERA_WIDTH*8 ||
    b55a:	81 11       	cpse	r24, r1
    b55c:	e7 cf       	rjmp	.-50     	; 0xb52c <animate_enemy_shots+0x8a>
					{
						game.enemies[i].shot[j].active = 0;
						LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
					}
					else if (LBCollides(game.player.shared.x,game.player.shared.y, game.player.width*8, game.player.height*8,
							game.enemies[i].shot[j].shared.x, game.enemies[i].shot[j].shared.y, 8, 8
    b55e:	f4 01       	movw	r30, r8
    b560:	40 84       	ldd	r4, Z+8	; 0x08
    b562:	51 84       	ldd	r5, Z+9	; 0x09
    b564:	62 84       	ldd	r6, Z+10	; 0x0a
    b566:	73 84       	ldd	r7, Z+11	; 0x0b
    b568:	84 81       	ldd	r24, Z+4	; 0x04
    b56a:	95 81       	ldd	r25, Z+5	; 0x05
    b56c:	a6 81       	ldd	r26, Z+6	; 0x06
    b56e:	b7 81       	ldd	r27, Z+7	; 0x07
    b570:	89 83       	std	Y+1, r24	; 0x01
    b572:	9a 83       	std	Y+2, r25	; 0x02
    b574:	ab 83       	std	Y+3, r26	; 0x03
    b576:	bc 83       	std	Y+4, r27	; 0x04
					   collision_detect_level(&game.enemies[i].shot[j].shared, 1, 1))
					{
						game.enemies[i].shot[j].active = 0;
						LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
					}
					else if (LBCollides(game.player.shared.x,game.player.shared.y, game.player.width*8, game.player.height*8,
    b578:	c3 01       	movw	r24, r6
    b57a:	b2 01       	movw	r22, r4
    b57c:	0e 94 b8 67 	call	0xcf70	; 0xcf70 <__fixunssfsi>
    b580:	6d 83       	std	Y+5, r22	; 0x05
    b582:	7e 83       	std	Y+6, r23	; 0x06
    b584:	8f 83       	std	Y+7, r24	; 0x07
    b586:	98 87       	std	Y+8, r25	; 0x08
    b588:	69 81       	ldd	r22, Y+1	; 0x01
    b58a:	7a 81       	ldd	r23, Y+2	; 0x02
    b58c:	8b 81       	ldd	r24, Y+3	; 0x03
    b58e:	9c 81       	ldd	r25, Y+4	; 0x04
    b590:	0e 94 b8 67 	call	0xcf70	; 0xcf70 <__fixunssfsi>
    b594:	69 87       	std	Y+9, r22	; 0x09
    b596:	7a 87       	std	Y+10, r23	; 0x0a
    b598:	8b 87       	std	Y+11, r24	; 0x0b
    b59a:	9c 87       	std	Y+12, r25	; 0x0c
    b59c:	20 91 d8 0d 	lds	r18, 0x0DD8
    b5a0:	22 0f       	add	r18, r18
    b5a2:	22 0f       	add	r18, r18
    b5a4:	22 0f       	add	r18, r18
    b5a6:	40 91 d7 0d 	lds	r20, 0x0DD7
    b5aa:	44 0f       	add	r20, r20
    b5ac:	44 0f       	add	r20, r20
    b5ae:	44 0f       	add	r20, r20
    b5b0:	60 91 cc 0d 	lds	r22, 0x0DCC
    b5b4:	70 91 cd 0d 	lds	r23, 0x0DCD
    b5b8:	80 91 ce 0d 	lds	r24, 0x0DCE
    b5bc:	90 91 cf 0d 	lds	r25, 0x0DCF
    b5c0:	29 8b       	std	Y+17, r18	; 0x11
    b5c2:	4a 8b       	std	Y+18, r20	; 0x12
    b5c4:	0e 94 b8 67 	call	0xcf70	; 0xcf70 <__fixunssfsi>
    b5c8:	6d 87       	std	Y+13, r22	; 0x0d
    b5ca:	7e 87       	std	Y+14, r23	; 0x0e
    b5cc:	8f 87       	std	Y+15, r24	; 0x0f
    b5ce:	98 8b       	std	Y+16, r25	; 0x10
    b5d0:	60 91 c8 0d 	lds	r22, 0x0DC8
    b5d4:	70 91 c9 0d 	lds	r23, 0x0DC9
    b5d8:	80 91 ca 0d 	lds	r24, 0x0DCA
    b5dc:	90 91 cb 0d 	lds	r25, 0x0DCB
    b5e0:	0e 94 b8 67 	call	0xcf70	; 0xcf70 <__fixunssfsi>
    b5e4:	dc 01       	movw	r26, r24
    b5e6:	cb 01       	movw	r24, r22
    b5e8:	28 e0       	ldi	r18, 0x08	; 8
    b5ea:	a2 2e       	mov	r10, r18
    b5ec:	38 e0       	ldi	r19, 0x08	; 8
    b5ee:	c3 2e       	mov	r12, r19
    b5f0:	ed 80       	ldd	r14, Y+5	; 0x05
    b5f2:	fe 80       	ldd	r15, Y+6	; 0x06
    b5f4:	09 85       	ldd	r16, Y+9	; 0x09
    b5f6:	1a 85       	ldd	r17, Y+10	; 0x0a
    b5f8:	29 89       	ldd	r18, Y+17	; 0x11
    b5fa:	4a 89       	ldd	r20, Y+18	; 0x12
    b5fc:	6d 85       	ldd	r22, Y+13	; 0x0d
    b5fe:	7e 85       	ldd	r23, Y+14	; 0x0e
    b600:	0e 94 f9 49 	call	0x93f2	; 0x93f2 <LBCollides>
    b604:	88 23       	and	r24, r24
    b606:	01 f1       	breq	.+64     	; 0xb648 <animate_enemy_shots+0x1a6>
							game.enemies[i].shot[j].shared.x, game.enemies[i].shot[j].shared.y, 8, 8
						)
					)
					{
						SFX_HIT;
    b608:	41 e0       	ldi	r20, 0x01	; 1
    b60a:	6f ef       	ldi	r22, 0xFF	; 255
    b60c:	84 e0       	ldi	r24, 0x04	; 4
    b60e:	0e 94 64 3d 	call	0x7ac8	; 0x7ac8 <TriggerFx>
						game.player.shield -= game.enemies[i].shot[j].hit_count;
    b612:	80 91 d9 0d 	lds	r24, 0x0DD9
    b616:	f1 01       	movw	r30, r2
    b618:	31 97       	sbiw	r30, 0x01	; 1
    b61a:	90 81       	ld	r25, Z
    b61c:	89 1b       	sub	r24, r25
    b61e:	80 93 d9 0d 	sts	0x0DD9, r24
						if (game.player.shield <= 0)
    b622:	18 16       	cp	r1, r24
    b624:	54 f0       	brlt	.+20     	; 0xb63a <animate_enemy_shots+0x198>
						{
							SFX_PLAYER_EXPLODE;
    b626:	41 e0       	ldi	r20, 0x01	; 1
    b628:	6f ef       	ldi	r22, 0xFF	; 255
    b62a:	85 e0       	ldi	r24, 0x05	; 5
    b62c:	0e 94 64 3d 	call	0x7ac8	; 0x7ac8 <TriggerFx>
							game.player.shield = 0;
    b630:	10 92 d9 0d 	sts	0x0DD9, r1
							game.player.flags = EXPLODING;
    b634:	b0 e1       	ldi	r27, 0x10	; 16
    b636:	b0 93 d4 0d 	sts	0x0DD4, r27
						}
						game.enemies[i].shot[j].active = 0;
    b63a:	f1 01       	movw	r30, r2
    b63c:	10 82       	st	Z, r1
						LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
    b63e:	01 e0       	ldi	r16, 0x01	; 1
    b640:	21 e0       	ldi	r18, 0x01	; 1
    b642:	40 e0       	ldi	r20, 0x00	; 0
    b644:	60 ee       	ldi	r22, 0xE0	; 224
    b646:	44 c0       	rjmp	.+136    	; 0xb6d0 <animate_enemy_shots+0x22e>
					}
					else
					{
						game.enemies[i].shot[j].shared.x += game.enemies[i].shot[j].shared.vx*FRAME_TIME;
    b648:	d4 01       	movw	r26, r8
    b64a:	1c 96       	adiw	r26, 0x0c	; 12
    b64c:	6d 91       	ld	r22, X+
    b64e:	7c 91       	ld	r23, X
    b650:	1d 97       	sbiw	r26, 0x0d	; 13
    b652:	88 27       	eor	r24, r24
    b654:	77 fd       	sbrc	r23, 7
    b656:	80 95       	com	r24
    b658:	98 2f       	mov	r25, r24
    b65a:	0e 94 e6 67 	call	0xcfcc	; 0xcfcc <__floatsisf>
    b65e:	29 e8       	ldi	r18, 0x89	; 137
    b660:	38 e8       	ldi	r19, 0x88	; 136
    b662:	48 e8       	ldi	r20, 0x88	; 136
    b664:	5c e3       	ldi	r21, 0x3C	; 60
    b666:	0e 94 9a 68 	call	0xd134	; 0xd134 <__mulsf3>
    b66a:	9b 01       	movw	r18, r22
    b66c:	ac 01       	movw	r20, r24
    b66e:	69 81       	ldd	r22, Y+1	; 0x01
    b670:	7a 81       	ldd	r23, Y+2	; 0x02
    b672:	8b 81       	ldd	r24, Y+3	; 0x03
    b674:	9c 81       	ldd	r25, Y+4	; 0x04
    b676:	0e 94 50 67 	call	0xcea0	; 0xcea0 <__addsf3>
    b67a:	6b 01       	movw	r12, r22
    b67c:	7c 01       	movw	r14, r24
    b67e:	f4 01       	movw	r30, r8
    b680:	64 83       	std	Z+4, r22	; 0x04
    b682:	75 83       	std	Z+5, r23	; 0x05
    b684:	86 83       	std	Z+6, r24	; 0x06
    b686:	97 83       	std	Z+7, r25	; 0x07
						LBMoveSprite(slot, game.enemies[i].shot[j].shared.x - game.camera_x, game.enemies[i].shot[j].shared.y - game.camera_y, 1, 1);
    b688:	60 91 ac 0d 	lds	r22, 0x0DAC
    b68c:	70 91 ad 0d 	lds	r23, 0x0DAD
    b690:	80 e0       	ldi	r24, 0x00	; 0
    b692:	90 e0       	ldi	r25, 0x00	; 0
    b694:	0e 94 e4 67 	call	0xcfc8	; 0xcfc8 <__floatunsisf>
    b698:	9b 01       	movw	r18, r22
    b69a:	ac 01       	movw	r20, r24
    b69c:	c3 01       	movw	r24, r6
    b69e:	b2 01       	movw	r22, r4
    b6a0:	0e 94 4f 67 	call	0xce9e	; 0xce9e <__subsf3>
    b6a4:	0e 94 b8 67 	call	0xcf70	; 0xcf70 <__fixunssfsi>
    b6a8:	76 2e       	mov	r7, r22
    b6aa:	60 91 aa 0d 	lds	r22, 0x0DAA
    b6ae:	70 91 ab 0d 	lds	r23, 0x0DAB
    b6b2:	80 e0       	ldi	r24, 0x00	; 0
    b6b4:	90 e0       	ldi	r25, 0x00	; 0
    b6b6:	0e 94 e4 67 	call	0xcfc8	; 0xcfc8 <__floatunsisf>
    b6ba:	9b 01       	movw	r18, r22
    b6bc:	ac 01       	movw	r20, r24
    b6be:	c7 01       	movw	r24, r14
    b6c0:	b6 01       	movw	r22, r12
    b6c2:	0e 94 4f 67 	call	0xce9e	; 0xce9e <__subsf3>
    b6c6:	0e 94 b8 67 	call	0xcf70	; 0xcf70 <__fixunssfsi>
    b6ca:	01 e0       	ldi	r16, 0x01	; 1
    b6cc:	21 e0       	ldi	r18, 0x01	; 1
    b6ce:	47 2d       	mov	r20, r7
    b6d0:	8b 2d       	mov	r24, r11
    b6d2:	0e 94 96 4a 	call	0x952c	; 0x952c <LBMoveSprite>
					}
				}
			}
			slot += 1;
    b6d6:	b3 94       	inc	r11
    b6d8:	f2 e4       	ldi	r31, 0x42	; 66
    b6da:	2f 0e       	add	r2, r31
    b6dc:	31 1c       	adc	r3, r1
    b6de:	82 e4       	ldi	r24, 0x42	; 66
    b6e0:	88 0e       	add	r8, r24
    b6e2:	91 1c       	adc	r9, r1

void animate_enemy_shots()
{
	u8 slot = ENEMY_SHOT_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    b6e4:	93 e1       	ldi	r25, 0x13	; 19
    b6e6:	b9 12       	cpse	r11, r25
    b6e8:	00 cf       	rjmp	.-512    	; 0xb4ea <animate_enemy_shots+0x48>
				}
			}
			slot += 1;
		}
	}
}
    b6ea:	62 96       	adiw	r28, 0x12	; 18
    b6ec:	0f b6       	in	r0, 0x3f	; 63
    b6ee:	f8 94       	cli
    b6f0:	de bf       	out	0x3e, r29	; 62
    b6f2:	0f be       	out	0x3f, r0	; 63
    b6f4:	cd bf       	out	0x3d, r28	; 61
    b6f6:	df 91       	pop	r29
    b6f8:	cf 91       	pop	r28
    b6fa:	1f 91       	pop	r17
    b6fc:	0f 91       	pop	r16
    b6fe:	ff 90       	pop	r15
    b700:	ef 90       	pop	r14
    b702:	df 90       	pop	r13
    b704:	cf 90       	pop	r12
    b706:	bf 90       	pop	r11
    b708:	af 90       	pop	r10
    b70a:	9f 90       	pop	r9
    b70c:	8f 90       	pop	r8
    b70e:	7f 90       	pop	r7
    b710:	6f 90       	pop	r6
    b712:	5f 90       	pop	r5
    b714:	4f 90       	pop	r4
    b716:	3f 90       	pop	r3
    b718:	2f 90       	pop	r2
    b71a:	08 95       	ret

0000b71c <clear_sprites>:
	}
	
}

void clear_sprites(u8 from, u8 count)
{
    b71c:	ef 92       	push	r14
    b71e:	ff 92       	push	r15
    b720:	0f 93       	push	r16
    b722:	cf 93       	push	r28
	for(u8 i = from; i < from+count; i++)
    b724:	c8 2f       	mov	r28, r24
    b726:	e6 2e       	mov	r14, r22
    b728:	f1 2c       	mov	r15, r1
    b72a:	e8 0e       	add	r14, r24
    b72c:	f1 1c       	adc	r15, r1
    b72e:	8c 2f       	mov	r24, r28
    b730:	90 e0       	ldi	r25, 0x00	; 0
    b732:	8e 15       	cp	r24, r14
    b734:	9f 05       	cpc	r25, r15
    b736:	7c f4       	brge	.+30     	; 0xb756 <clear_sprites+0x3a>
	{
		LBMapSprite(i, map_none, 0);
    b738:	40 e0       	ldi	r20, 0x00	; 0
    b73a:	63 ee       	ldi	r22, 0xE3	; 227
    b73c:	7d e2       	ldi	r23, 0x2D	; 45
    b73e:	8c 2f       	mov	r24, r28
    b740:	0e 94 44 4a 	call	0x9488	; 0x9488 <LBMapSprite>
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
    b744:	01 e0       	ldi	r16, 0x01	; 1
    b746:	21 e0       	ldi	r18, 0x01	; 1
    b748:	40 e0       	ldi	r20, 0x00	; 0
    b74a:	60 ee       	ldi	r22, 0xE0	; 224
    b74c:	8c 2f       	mov	r24, r28
    b74e:	0e 94 96 4a 	call	0x952c	; 0x952c <LBMoveSprite>
	
}

void clear_sprites(u8 from, u8 count)
{
	for(u8 i = from; i < from+count; i++)
    b752:	cf 5f       	subi	r28, 0xFF	; 255
    b754:	ec cf       	rjmp	.-40     	; 0xb72e <clear_sprites+0x12>
	{
		LBMapSprite(i, map_none, 0);
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
	}
}
    b756:	cf 91       	pop	r28
    b758:	0f 91       	pop	r16
    b75a:	ff 90       	pop	r15
    b75c:	ef 90       	pop	r14
    b75e:	08 95       	ret

0000b760 <fade_through>:
	EepromWriteBlock(block);
}

void fade_through()
{
	FadeOut(FRAMES_PER_FADE, true);
    b760:	61 e0       	ldi	r22, 0x01	; 1
    b762:	81 e0       	ldi	r24, 0x01	; 1
    b764:	0e 94 ad 48 	call	0x915a	; 0x915a <FadeOut>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    b768:	64 e1       	ldi	r22, 0x14	; 20
    b76a:	80 e0       	ldi	r24, 0x00	; 0
    b76c:	0e 94 8e 5b 	call	0xb71c	; 0xb71c <clear_sprites>
	LBRotateSprites();
    b770:	0e 94 d4 4a 	call	0x95a8	; 0x95a8 <LBRotateSprites>
	ClearVram();
    b774:	0e 94 85 39 	call	0x730a	; 0x730a <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    b778:	60 e0       	ldi	r22, 0x00	; 0
    b77a:	81 e0       	ldi	r24, 0x01	; 1
    b77c:	0c 94 a1 48 	jmp	0x9142	; 0x9142 <FadeIn>

0000b780 <load_level>:
		game.level_height = 26;
	}
}

void load_level(u8 index, u8 drop_ship)
{	
    b780:	0f 93       	push	r16
    b782:	cf 93       	push	r28
    b784:	df 93       	push	r29
    b786:	c8 2f       	mov	r28, r24
    b788:	d6 2f       	mov	r29, r22
	u8 ship_x = (get_hero_spawn_x(index) - 2) * 8;
	u8 ship_y = 0;
	char ship_increment = 3;
	
	Screen.scrollX = 0;
    b78a:	10 92 b2 0c 	sts	0x0CB2, r1
	Screen.scrollY = 0;
    b78e:	10 92 b3 0c 	sts	0x0CB3, r1
	Screen.scrollHeight = 30;
    b792:	8e e1       	ldi	r24, 0x1E	; 30
    b794:	80 93 b4 0c 	sts	0x0CB4, r24
	Screen.overlayTileTable = tiles_data;
    b798:	86 e6       	ldi	r24, 0x66	; 102
    b79a:	9f e4       	ldi	r25, 0x4F	; 79
    b79c:	90 93 b1 0c 	sts	0x0CB1, r25
    b7a0:	80 93 b0 0c 	sts	0x0CB0, r24
	Screen.overlayHeight = 2;
    b7a4:	82 e0       	ldi	r24, 0x02	; 2
    b7a6:	80 93 af 0c 	sts	0x0CAF, r24
	clear_overlay(2);
    b7aa:	0e 94 51 4d 	call	0x9aa2	; 0x9aa2 <clear_overlay>
	game.current_level_index = index;
    b7ae:	c0 93 b7 0d 	sts	0x0DB7, r28
	game.level_ended = 0;
    b7b2:	10 92 c3 0d 	sts	0x0DC3, r1
	game.joypadState.held = 0;
    b7b6:	10 92 9f 0f 	sts	0x0F9F, r1
    b7ba:	10 92 9e 0f 	sts	0x0F9E, r1
	game.joypadState.pressed = 0;
    b7be:	10 92 9b 0f 	sts	0x0F9B, r1
    b7c2:	10 92 9a 0f 	sts	0x0F9A, r1
	game.joypadState.released = 0;
    b7c6:	10 92 9d 0f 	sts	0x0F9D, r1
    b7ca:	10 92 9c 0f 	sts	0x0F9C, r1
	switch (index)
    b7ce:	8c 2f       	mov	r24, r28
    b7d0:	90 e0       	ldi	r25, 0x00	; 0
    b7d2:	8a 30       	cpi	r24, 0x0A	; 10
    b7d4:	91 05       	cpc	r25, r1
    b7d6:	c0 f4       	brcc	.+48     	; 0xb808 <load_level+0x88>
    b7d8:	fc 01       	movw	r30, r24
    b7da:	e8 5c       	subi	r30, 0xC8	; 200
    b7dc:	ff 4f       	sbci	r31, 0xFF	; 255
    b7de:	0c 94 49 67 	jmp	0xce92	; 0xce92 <__tablejump2__>
	{
		case 0: map_level_info((char*) map_level_ice); break;
    b7e2:	86 ee       	ldi	r24, 0xE6	; 230
    b7e4:	98 e4       	ldi	r25, 0x48	; 72
    b7e6:	0e c0       	rjmp	.+28     	; 0xb804 <load_level+0x84>
		case 1: map_level_info((char*) map_level_space); break;
		case 2: map_level_info((char*) map_level_fire); break;
    b7e8:	86 e6       	ldi	r24, 0x66	; 102
    b7ea:	92 e4       	ldi	r25, 0x42	; 66
    b7ec:	0b c0       	rjmp	.+22     	; 0xb804 <load_level+0x84>
		case 3: map_level_info((char*) map_level_space); break;
		case 4: map_level_info((char*) map_level_forest); break;
    b7ee:	86 ee       	ldi	r24, 0xE6	; 230
    b7f0:	9b e3       	ldi	r25, 0x3B	; 59
    b7f2:	08 c0       	rjmp	.+16     	; 0xb804 <load_level+0x84>
		case 5: map_level_info((char*) map_level_space); break;
		case 6: map_level_info((char*) map_level_city); break;
    b7f4:	86 e6       	ldi	r24, 0x66	; 102
    b7f6:	95 e3       	ldi	r25, 0x35	; 53
    b7f8:	05 c0       	rjmp	.+10     	; 0xb804 <load_level+0x84>
		case 7: map_level_info((char*) map_level_space); break;
		case 8: map_level_info((char*) map_level_desert); break;
    b7fa:	86 ee       	ldi	r24, 0xE6	; 230
    b7fc:	9e e2       	ldi	r25, 0x2E	; 46
    b7fe:	02 c0       	rjmp	.+4      	; 0xb804 <load_level+0x84>
		case 9: map_level_info((char*) map_level_space); break;
    b800:	86 ee       	ldi	r24, 0xE6	; 230
    b802:	9d e2       	ldi	r25, 0x2D	; 45
    b804:	0e 94 a8 4f 	call	0x9f50	; 0x9f50 <map_level_info>
	}
	game.column_count = 0;
    b808:	10 92 b3 0d 	sts	0x0DB3, r1
    b80c:	10 92 b2 0d 	sts	0x0DB2, r1
	game.camera_x = get_camera_x(index);
    b810:	10 92 ab 0d 	sts	0x0DAB, r1
    b814:	10 92 aa 0d 	sts	0x0DAA, r1
	game.camera_y = get_camera_y(index);
    b818:	10 92 ad 0d 	sts	0x0DAD, r1
    b81c:	10 92 ac 0d 	sts	0x0DAC, r1
	game.player.shared.x = get_hero_spawn_x(index)*8;
    b820:	80 e0       	ldi	r24, 0x00	; 0
    b822:	90 e0       	ldi	r25, 0x00	; 0
    b824:	a0 ec       	ldi	r26, 0xC0	; 192
    b826:	b1 e4       	ldi	r27, 0x41	; 65
    b828:	80 93 c8 0d 	sts	0x0DC8, r24
    b82c:	90 93 c9 0d 	sts	0x0DC9, r25
    b830:	a0 93 ca 0d 	sts	0x0DCA, r26
    b834:	b0 93 cb 0d 	sts	0x0DCB, r27
	game.player.shared.y = get_hero_spawn_y(index)*8;
    b838:	80 e0       	ldi	r24, 0x00	; 0
    b83a:	90 e0       	ldi	r25, 0x00	; 0
    b83c:	a8 e2       	ldi	r26, 0x28	; 40
    b83e:	b3 e4       	ldi	r27, 0x43	; 67
    b840:	80 93 cc 0d 	sts	0x0DCC, r24
    b844:	90 93 cd 0d 	sts	0x0DCD, r25
    b848:	a0 93 ce 0d 	sts	0x0DCE, r26
    b84c:	b0 93 cf 0d 	sts	0x0DCF, r27
	game.camera_x *= 8;
	game.camera_y *= 8;
	game.scroll_src_x = game.camera_x / 8 + CAMERA_WIDTH + 1;
    b850:	8d e1       	ldi	r24, 0x1D	; 29
    b852:	90 e0       	ldi	r25, 0x00	; 0
    b854:	90 93 a7 0d 	sts	0x0DA7, r25
    b858:	80 93 a6 0d 	sts	0x0DA6, r24
    game.scroll_dest_x = game.camera_x / 8 + CAMERA_WIDTH + 1;
    b85c:	80 93 bf 0d 	sts	0x0DBF, r24
	game.scroll_src_y = game.camera_y / 8 + CAMERA_HEIGHT + 1;
    b860:	8b e1       	ldi	r24, 0x1B	; 27
    b862:	90 e0       	ldi	r25, 0x00	; 0
    b864:	90 93 a9 0d 	sts	0x0DA9, r25
    b868:	80 93 a8 0d 	sts	0x0DA8, r24
    game.scroll_dest_y =  game.camera_y / 8 + CAMERA_HEIGHT + 1;
    b86c:	80 93 c0 0d 	sts	0x0DC0, r24
	game.scroll_x = 0;
    b870:	10 92 bd 0d 	sts	0x0DBD, r1
	game.scroll_y = 0;
    b874:	10 92 be 0d 	sts	0x0DBE, r1
	game.spawn_rate = BASE_SPAWN_RATE;
    b878:	8a e0       	ldi	r24, 0x0A	; 10
    b87a:	80 93 c2 0d 	sts	0x0DC2, r24
	render_camera_view();
    b87e:	0e 94 b2 4d 	call	0x9b64	; 0x9b64 <render_camera_view>
	LBPrint(0, VRAM_TILES_V-1, (char*) strLives);
    b882:	46 e5       	ldi	r20, 0x56	; 86
    b884:	5b e0       	ldi	r21, 0x0B	; 11
    b886:	6f e1       	ldi	r22, 0x1F	; 31
    b888:	80 e0       	ldi	r24, 0x00	; 0
    b88a:	0e 94 73 49 	call	0x92e6	; 0x92e6 <LBPrint>
	LBPrint(17, VRAM_TILES_V-1, (char*) strScore);
    b88e:	45 e6       	ldi	r20, 0x65	; 101
    b890:	5b e0       	ldi	r21, 0x0B	; 11
    b892:	6f e1       	ldi	r22, 0x1F	; 31
    b894:	81 e1       	ldi	r24, 0x11	; 17
    b896:	0e 94 73 49 	call	0x92e6	; 0x92e6 <LBPrint>
	LBPrint(0, VRAM_TILES_V-2, (char*) strShield);
    b89a:	4d e5       	ldi	r20, 0x5D	; 93
    b89c:	5b e0       	ldi	r21, 0x0B	; 11
    b89e:	6e e1       	ldi	r22, 0x1E	; 30
    b8a0:	80 e0       	ldi	r24, 0x00	; 0
    b8a2:	0e 94 73 49 	call	0x92e6	; 0x92e6 <LBPrint>
	LBPrint(18, VRAM_TILES_V-2, (char*) strTime);
    b8a6:	40 e5       	ldi	r20, 0x50	; 80
    b8a8:	5b e0       	ldi	r21, 0x0B	; 11
    b8aa:	6e e1       	ldi	r22, 0x1E	; 30
    b8ac:	82 e1       	ldi	r24, 0x12	; 18
    b8ae:	0e 94 73 49 	call	0x92e6	; 0x92e6 <LBPrint>
	LBPrintByte(9, VRAM_TILES_V-1, game.lives ,true);
    b8b2:	21 e0       	ldi	r18, 0x01	; 1
    b8b4:	40 91 b5 0d 	lds	r20, 0x0DB5
    b8b8:	6f e1       	ldi	r22, 0x1F	; 31
    b8ba:	89 e0       	ldi	r24, 0x09	; 9
    b8bc:	0e 94 8f 49 	call	0x931e	; 0x931e <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-1, game.score ,true);
    b8c0:	40 91 ae 0d 	lds	r20, 0x0DAE
    b8c4:	50 91 af 0d 	lds	r21, 0x0DAF
    b8c8:	21 e0       	ldi	r18, 0x01	; 1
    b8ca:	6f e1       	ldi	r22, 0x1F	; 31
    b8cc:	8b e1       	ldi	r24, 0x1B	; 27
    b8ce:	0e 94 c0 49 	call	0x9380	; 0x9380 <LBPrintInt>
	LBPrintByte(9, VRAM_TILES_V-2, game.player.shield ,true);
    b8d2:	21 e0       	ldi	r18, 0x01	; 1
    b8d4:	40 91 d9 0d 	lds	r20, 0x0DD9
    b8d8:	6e e1       	ldi	r22, 0x1E	; 30
    b8da:	89 e0       	ldi	r24, 0x09	; 9
    b8dc:	0e 94 8f 49 	call	0x931e	; 0x931e <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-2, game.time ,true);
    b8e0:	40 91 b0 0d 	lds	r20, 0x0DB0
    b8e4:	50 91 b1 0d 	lds	r21, 0x0DB1
    b8e8:	21 e0       	ldi	r18, 0x01	; 1
    b8ea:	6e e1       	ldi	r22, 0x1E	; 30
    b8ec:	8b e1       	ldi	r24, 0x1B	; 27
    b8ee:	0e 94 c0 49 	call	0x9380	; 0x9380 <LBPrintInt>
	
	
	if (!is_space() && drop_ship)
    b8f2:	0e 94 13 4b 	call	0x9626	; 0x9626 <is_space>
    b8f6:	81 11       	cpse	r24, r1
    b8f8:	39 c0       	rjmp	.+114    	; 0xb96c <load_level+0x1ec>
    b8fa:	dd 23       	and	r29, r29
    b8fc:	b9 f1       	breq	.+110    	; 0xb96c <load_level+0x1ec>
	{
		map_ship();
    b8fe:	0e 94 93 4f 	call	0x9f26	; 0x9f26 <map_ship>

void load_level(u8 index, u8 drop_ship)
{	
	u8 ship_x = (get_hero_spawn_x(index) - 2) * 8;
	u8 ship_y = 0;
	char ship_increment = 3;
    b902:	d3 e0       	ldi	r29, 0x03	; 3
}

void load_level(u8 index, u8 drop_ship)
{	
	u8 ship_x = (get_hero_spawn_x(index) - 2) * 8;
	u8 ship_y = 0;
    b904:	c0 e0       	ldi	r28, 0x00	; 0
	if (!is_space() && drop_ship)
	{
		map_ship();
		while (1)
		{
			WaitVsync(1);
    b906:	81 e0       	ldi	r24, 0x01	; 1
    b908:	90 e0       	ldi	r25, 0x00	; 0
    b90a:	0e 94 45 48 	call	0x908a	; 0x908a <WaitVsync>
			if (ship_y >= get_hero_spawn_y(index)*8)
    b90e:	8c 2f       	mov	r24, r28
    b910:	90 e0       	ldi	r25, 0x00	; 0
    b912:	88 3a       	cpi	r24, 0xA8	; 168
    b914:	91 05       	cpc	r25, r1
    b916:	74 f0       	brlt	.+28     	; 0xb934 <load_level+0x1b4>
			{
				LBMapSprite(0, map_hero_idle, 0);
    b918:	40 e0       	ldi	r20, 0x00	; 0
    b91a:	67 eb       	ldi	r22, 0xB7	; 183
    b91c:	7d e2       	ldi	r23, 0x2D	; 45
    b91e:	80 e0       	ldi	r24, 0x00	; 0
    b920:	0e 94 44 4a 	call	0x9488	; 0x9488 <LBMapSprite>
				LBMoveSprite(0, get_hero_spawn_x(index)*8, get_hero_spawn_y(index)*8, 2, 3);
    b924:	03 e0       	ldi	r16, 0x03	; 3
    b926:	22 e0       	ldi	r18, 0x02	; 2
    b928:	48 ea       	ldi	r20, 0xA8	; 168
    b92a:	68 e1       	ldi	r22, 0x18	; 24
    b92c:	80 e0       	ldi	r24, 0x00	; 0
    b92e:	0e 94 96 4a 	call	0x952c	; 0x952c <LBMoveSprite>
				ship_increment = -3;
    b932:	dd ef       	ldi	r29, 0xFD	; 253
			}
			LBMapSprite(6, LBGetNextFrame(&game.player.run), 0);
    b934:	80 e3       	ldi	r24, 0x30	; 48
    b936:	9e e0       	ldi	r25, 0x0E	; 14
    b938:	0e 94 e2 48 	call	0x91c4	; 0x91c4 <LBGetNextFrame>
    b93c:	40 e0       	ldi	r20, 0x00	; 0
    b93e:	bc 01       	movw	r22, r24
    b940:	86 e0       	ldi	r24, 0x06	; 6
    b942:	0e 94 44 4a 	call	0x9488	; 0x9488 <LBMapSprite>
			LBMoveSprite(6, ship_x, ship_y, 4, 2);
    b946:	02 e0       	ldi	r16, 0x02	; 2
    b948:	24 e0       	ldi	r18, 0x04	; 4
    b94a:	4c 2f       	mov	r20, r28
    b94c:	68 e0       	ldi	r22, 0x08	; 8
    b94e:	86 e0       	ldi	r24, 0x06	; 6
    b950:	0e 94 96 4a 	call	0x952c	; 0x952c <LBMoveSprite>
			ship_y += ship_increment;
    b954:	cd 0f       	add	r28, r29
			if (ship_y == 0)
    b956:	39 f4       	brne	.+14     	; 0xb966 <load_level+0x1e6>
			{
				clear_sprites(6, 8);
    b958:	68 e0       	ldi	r22, 0x08	; 8
    b95a:	86 e0       	ldi	r24, 0x06	; 6
				break;
			}
			LBRotateSprites();
		}
	}
}
    b95c:	df 91       	pop	r29
    b95e:	cf 91       	pop	r28
    b960:	0f 91       	pop	r16
			LBMapSprite(6, LBGetNextFrame(&game.player.run), 0);
			LBMoveSprite(6, ship_x, ship_y, 4, 2);
			ship_y += ship_increment;
			if (ship_y == 0)
			{
				clear_sprites(6, 8);
    b962:	0c 94 8e 5b 	jmp	0xb71c	; 0xb71c <clear_sprites>
				break;
			}
			LBRotateSprites();
    b966:	0e 94 d4 4a 	call	0x95a8	; 0x95a8 <LBRotateSprites>
		}
    b96a:	cd cf       	rjmp	.-102    	; 0xb906 <load_level+0x186>
	}
}
    b96c:	df 91       	pop	r29
    b96e:	cf 91       	pop	r28
    b970:	0f 91       	pop	r16
    b972:	08 95       	ret

0000b974 <select_pressed>:
	StopSong();
	load_high_scores();
}

char select_pressed(JoyPadState* p)
{
    b974:	fc 01       	movw	r30, r24
    b976:	20 81       	ld	r18, Z
    b978:	31 81       	ldd	r19, Z+1	; 0x01
    b97a:	28 70       	andi	r18, 0x08	; 8
    b97c:	31 70       	andi	r19, 0x01	; 1
	return (p->pressed & BTN_A) || (p->pressed & BTN_START);
    b97e:	81 e0       	ldi	r24, 0x01	; 1
    b980:	23 2b       	or	r18, r19
    b982:	09 f4       	brne	.+2      	; 0xb986 <select_pressed+0x12>
    b984:	80 e0       	ldi	r24, 0x00	; 0
}
    b986:	08 95       	ret

0000b988 <stream_dialogue>:


void stream_dialogue(const char* dialogue, u8 y)
{
    b988:	ff 92       	push	r15
    b98a:	0f 93       	push	r16
    b98c:	1f 93       	push	r17
    b98e:	cf 93       	push	r28
    b990:	df 93       	push	r29
    b992:	ec 01       	movw	r28, r24
    b994:	16 2f       	mov	r17, r22
	u8 x, ln, c;
	
	while (pgm_read_byte(dialogue) != '#')
	{
		ln = strnlen_P(dialogue, 255);
		x = 14 - ln / 2;
    b996:	8e e0       	ldi	r24, 0x0E	; 14
    b998:	f8 2e       	mov	r15, r24

void stream_dialogue(const char* dialogue, u8 y)
{
	u8 x, ln, c;
	
	while (pgm_read_byte(dialogue) != '#')
    b99a:	fe 01       	movw	r30, r28
    b99c:	84 91       	lpm	r24, Z
    b99e:	83 32       	cpi	r24, 0x23	; 35
    b9a0:	21 f1       	breq	.+72     	; 0xb9ea <stream_dialogue+0x62>
	{
		ln = strnlen_P(dialogue, 255);
    b9a2:	6f ef       	ldi	r22, 0xFF	; 255
    b9a4:	70 e0       	ldi	r23, 0x00	; 0
    b9a6:	ce 01       	movw	r24, r28
    b9a8:	0e 94 fd 68 	call	0xd1fa	; 0xd1fa <strnlen_P>
		x = 14 - ln / 2;
    b9ac:	86 95       	lsr	r24
    b9ae:	0f 2d       	mov	r16, r15
    b9b0:	08 1b       	sub	r16, r24
    b9b2:	0c 1b       	sub	r16, r28
    b9b4:	8c 2f       	mov	r24, r28
    b9b6:	80 0f       	add	r24, r16
		while ((c = pgm_read_byte(dialogue++)))
    b9b8:	21 96       	adiw	r28, 0x01	; 1
    b9ba:	fe 01       	movw	r30, r28
    b9bc:	31 97       	sbiw	r30, 0x01	; 1
    b9be:	44 91       	lpm	r20, Z
    b9c0:	44 23       	and	r20, r20
    b9c2:	89 f0       	breq	.+34     	; 0xb9e6 <stream_dialogue+0x5e>
		{
			LBPrintChar(x++, y, c);
    b9c4:	61 2f       	mov	r22, r17
    b9c6:	0e 94 53 49 	call	0x92a6	; 0x92a6 <LBPrintChar>
			LBGetJoyPadState(&game.joypadState, 0);
    b9ca:	60 e0       	ldi	r22, 0x00	; 0
    b9cc:	8a e9       	ldi	r24, 0x9A	; 154
    b9ce:	9f e0       	ldi	r25, 0x0F	; 15
    b9d0:	0e 94 08 49 	call	0x9210	; 0x9210 <LBGetJoyPadState>
			if (!(game.joypadState.held & BTN_B)) WaitUs(CHARACTER_DELAY_US);
    b9d4:	80 91 9e 0f 	lds	r24, 0x0F9E
    b9d8:	80 fd       	sbrc	r24, 0
    b9da:	ec cf       	rjmp	.-40     	; 0xb9b4 <stream_dialogue+0x2c>
    b9dc:	80 e7       	ldi	r24, 0x70	; 112
    b9de:	97 e1       	ldi	r25, 0x17	; 23
    b9e0:	0e 94 bb 39 	call	0x7376	; 0x7376 <WaitUs>
    b9e4:	e7 cf       	rjmp	.-50     	; 0xb9b4 <stream_dialogue+0x2c>
		}
		y++;
    b9e6:	1f 5f       	subi	r17, 0xFF	; 255
    b9e8:	d8 cf       	rjmp	.-80     	; 0xb99a <stream_dialogue+0x12>
	}
}
    b9ea:	df 91       	pop	r29
    b9ec:	cf 91       	pop	r28
    b9ee:	1f 91       	pop	r17
    b9f0:	0f 91       	pop	r16
    b9f2:	ff 90       	pop	r15
    b9f4:	08 95       	ret

0000b9f6 <map_particles>:

void map_particles()
{
    b9f6:	cf 93       	push	r28
	for (u8 i = 9; i < 20; i++)
    b9f8:	c9 e0       	ldi	r28, 0x09	; 9
	{
		LBMapSprite(i, map_particle, 0);
    b9fa:	40 e0       	ldi	r20, 0x00	; 0
    b9fc:	67 ed       	ldi	r22, 0xD7	; 215
    b9fe:	7d e2       	ldi	r23, 0x2D	; 45
    ba00:	8c 2f       	mov	r24, r28
    ba02:	0e 94 44 4a 	call	0x9488	; 0x9488 <LBMapSprite>
	}
}

void map_particles()
{
	for (u8 i = 9; i < 20; i++)
    ba06:	cf 5f       	subi	r28, 0xFF	; 255
    ba08:	c4 31       	cpi	r28, 0x14	; 20
    ba0a:	b9 f7       	brne	.-18     	; 0xb9fa <map_particles+0x4>
	{
		LBMapSprite(i, map_particle, 0);
	}
}
    ba0c:	cf 91       	pop	r28
    ba0e:	08 95       	ret

0000ba10 <place_particles>:

void place_particles()
{
    ba10:	0f 93       	push	r16
    ba12:	1f 93       	push	r17
    ba14:	cf 93       	push	r28
    ba16:	df 93       	push	r29
    ba18:	1f 92       	push	r1
    ba1a:	cd b7       	in	r28, 0x3d	; 61
    ba1c:	de b7       	in	r29, 0x3e	; 62
	for (u8 i = 9; i < 20; i++)
    ba1e:	19 e0       	ldi	r17, 0x09	; 9
	{
		LBMoveSprite(i, LBRandom(0, 224), LBRandom(0, 200), 1, 1);
    ba20:	68 ec       	ldi	r22, 0xC8	; 200
    ba22:	80 e0       	ldi	r24, 0x00	; 0
    ba24:	0e 94 1f 4a 	call	0x943e	; 0x943e <LBRandom>
    ba28:	48 2f       	mov	r20, r24
    ba2a:	60 ee       	ldi	r22, 0xE0	; 224
    ba2c:	80 e0       	ldi	r24, 0x00	; 0
    ba2e:	49 83       	std	Y+1, r20	; 0x01
    ba30:	0e 94 1f 4a 	call	0x943e	; 0x943e <LBRandom>
    ba34:	68 2f       	mov	r22, r24
    ba36:	01 e0       	ldi	r16, 0x01	; 1
    ba38:	21 e0       	ldi	r18, 0x01	; 1
    ba3a:	49 81       	ldd	r20, Y+1	; 0x01
    ba3c:	81 2f       	mov	r24, r17
    ba3e:	0e 94 96 4a 	call	0x952c	; 0x952c <LBMoveSprite>
	}
}

void place_particles()
{
	for (u8 i = 9; i < 20; i++)
    ba42:	1f 5f       	subi	r17, 0xFF	; 255
    ba44:	14 31       	cpi	r17, 0x14	; 20
    ba46:	61 f7       	brne	.-40     	; 0xba20 <place_particles+0x10>
	{
		LBMoveSprite(i, LBRandom(0, 224), LBRandom(0, 200), 1, 1);
	}
}
    ba48:	0f 90       	pop	r0
    ba4a:	df 91       	pop	r29
    ba4c:	cf 91       	pop	r28
    ba4e:	1f 91       	pop	r17
    ba50:	0f 91       	pop	r16
    ba52:	08 95       	ret

0000ba54 <animate_particles>:

void animate_particles(char dy, u8 oy)
{
    ba54:	ef 92       	push	r14
    ba56:	ff 92       	push	r15
    ba58:	0f 93       	push	r16
    ba5a:	1f 93       	push	r17
    ba5c:	cf 93       	push	r28
    ba5e:	df 93       	push	r29
    ba60:	d8 2f       	mov	r29, r24
    ba62:	16 2f       	mov	r17, r22
    ba64:	80 ed       	ldi	r24, 0xD0	; 208
    ba66:	e8 2e       	mov	r14, r24
    ba68:	8f e0       	ldi	r24, 0x0F	; 15
    ba6a:	f8 2e       	mov	r15, r24
	for (u8 i = 9; i < 20; i++)
    ba6c:	c9 e0       	ldi	r28, 0x09	; 9
	{
		LBMoveSprite(i, extendedSprites[i].x, extendedSprites[i].y+dy, 1, 1);
    ba6e:	f7 01       	movw	r30, r14
    ba70:	40 81       	ld	r20, Z
    ba72:	4d 0f       	add	r20, r29
    ba74:	01 e0       	ldi	r16, 0x01	; 1
    ba76:	21 e0       	ldi	r18, 0x01	; 1
    ba78:	31 97       	sbiw	r30, 0x01	; 1
    ba7a:	60 81       	ld	r22, Z
    ba7c:	8c 2f       	mov	r24, r28
    ba7e:	0e 94 96 4a 	call	0x952c	; 0x952c <LBMoveSprite>
		if (extendedSprites[i].y > 200)
    ba82:	f7 01       	movw	r30, r14
    ba84:	80 81       	ld	r24, Z
    ba86:	89 3c       	cpi	r24, 0xC9	; 201
    ba88:	50 f0       	brcs	.+20     	; 0xba9e <animate_particles+0x4a>
		{
			LBMoveSprite(i, LBRandom(0, 224), oy, 1, 1);
    ba8a:	60 ee       	ldi	r22, 0xE0	; 224
    ba8c:	80 e0       	ldi	r24, 0x00	; 0
    ba8e:	0e 94 1f 4a 	call	0x943e	; 0x943e <LBRandom>
    ba92:	21 e0       	ldi	r18, 0x01	; 1
    ba94:	41 2f       	mov	r20, r17
    ba96:	68 2f       	mov	r22, r24
    ba98:	8c 2f       	mov	r24, r28
    ba9a:	0e 94 96 4a 	call	0x952c	; 0x952c <LBMoveSprite>
	}
}

void animate_particles(char dy, u8 oy)
{
	for (u8 i = 9; i < 20; i++)
    ba9e:	cf 5f       	subi	r28, 0xFF	; 255
    baa0:	f4 e0       	ldi	r31, 0x04	; 4
    baa2:	ef 0e       	add	r14, r31
    baa4:	f1 1c       	adc	r15, r1
    baa6:	c4 31       	cpi	r28, 0x14	; 20
    baa8:	11 f7       	brne	.-60     	; 0xba6e <animate_particles+0x1a>
		if (extendedSprites[i].y > 200)
		{
			LBMoveSprite(i, LBRandom(0, 224), oy, 1, 1);
		}
	}
}
    baaa:	df 91       	pop	r29
    baac:	cf 91       	pop	r28
    baae:	1f 91       	pop	r17
    bab0:	0f 91       	pop	r16
    bab2:	ff 90       	pop	r15
    bab4:	ef 90       	pop	r14
    bab6:	08 95       	ret

0000bab8 <get_emarald_map>:

const char* get_emarald_map(u8 index)
{
    bab8:	82 50       	subi	r24, 0x02	; 2
    baba:	87 30       	cpi	r24, 0x07	; 7
    babc:	48 f4       	brcc	.+18     	; 0xbad0 <get_emarald_map+0x18>
    babe:	e8 2f       	mov	r30, r24
    bac0:	f0 e0       	ldi	r31, 0x00	; 0
    bac2:	ee 0f       	add	r30, r30
    bac4:	ff 1f       	adc	r31, r31
    bac6:	ee 5f       	subi	r30, 0xFE	; 254
    bac8:	fa 4f       	sbci	r31, 0xFA	; 250
    baca:	80 81       	ld	r24, Z
    bacc:	91 81       	ldd	r25, Z+1	; 0x01
    bace:	08 95       	ret
    bad0:	88 ec       	ldi	r24, 0xC8	; 200
    bad2:	9d e2       	ldi	r25, 0x2D	; 45
		case 4: return map_emerald_2;
		case 6: return map_emerald_3;
		case 8: return map_emerald_4;
		default: return map_emerald_0;
	}
}
    bad4:	08 95       	ret

0000bad6 <music_transition>:

void music_transition()
{
	if (is_space())
    bad6:	0e 94 13 4b 	call	0x9626	; 0x9626 <is_space>
    bada:	88 23       	and	r24, r24
    badc:	19 f0       	breq	.+6      	; 0xbae4 <music_transition+0xe>
	{
		StartSong(spacesong);
    bade:	8c ea       	ldi	r24, 0xAC	; 172
    bae0:	9b e0       	ldi	r25, 0x0B	; 11
    bae2:	06 c0       	rjmp	.+12     	; 0xbaf0 <music_transition+0x1a>
	}
	else if (game.current_level_index != 0)
    bae4:	80 91 b7 0d 	lds	r24, 0x0DB7
    bae8:	88 23       	and	r24, r24
    baea:	21 f0       	breq	.+8      	; 0xbaf4 <music_transition+0x1e>
	{
		StartSong(planetsong);
    baec:	8c e4       	ldi	r24, 0x4C	; 76
    baee:	92 e1       	ldi	r25, 0x12	; 18
    baf0:	0c 94 79 3c 	jmp	0x78f2	; 0x78f2 <StartSong>
    baf4:	08 95       	ret

0000baf6 <planet_transition>:
	}
}

void planet_transition(u8 index, char scroll, char atmosphere_height, char dy, u8 oy)
{
    baf6:	cf 92       	push	r12
    baf8:	df 92       	push	r13
    bafa:	ef 92       	push	r14
    bafc:	ff 92       	push	r15
    bafe:	0f 93       	push	r16
    bb00:	1f 93       	push	r17
    bb02:	cf 93       	push	r28
    bb04:	df 93       	push	r29
    bb06:	1f 92       	push	r1
    bb08:	cd b7       	in	r28, 0x3d	; 61
    bb0a:	de b7       	in	r29, 0x3e	; 62
    bb0c:	c8 2e       	mov	r12, r24
    bb0e:	e6 2e       	mov	r14, r22
    bb10:	12 2f       	mov	r17, r18
    bb12:	f0 2e       	mov	r15, r16
	u8 frame_counter = 0;
	
	fade_through();
    bb14:	49 83       	std	Y+1, r20	; 0x01
    bb16:	0e 94 b0 5b 	call	0xb760	; 0xb760 <fade_through>
	Screen.scrollX = 0;
    bb1a:	10 92 b2 0c 	sts	0x0CB2, r1
	Screen.scrollY = 0;
    bb1e:	10 92 b3 0c 	sts	0x0CB3, r1
	Screen.scrollHeight = 32;
    bb22:	80 e2       	ldi	r24, 0x20	; 32
    bb24:	80 93 b4 0c 	sts	0x0CB4, r24
	Screen.overlayHeight = 0;
    bb28:	10 92 af 0c 	sts	0x0CAF, r1
	game.scroll_x = 0;
    bb2c:	10 92 bd 0d 	sts	0x0DBD, r1
	game.scroll_y = 0;
    bb30:	10 92 be 0d 	sts	0x0DBE, r1
	map_particles();
    bb34:	0e 94 fb 5c 	call	0xb9f6	; 0xb9f6 <map_particles>
	map_ship();
    bb38:	0e 94 93 4f 	call	0x9f26	; 0x9f26 <map_ship>
	place_particles();
    bb3c:	0e 94 08 5d 	call	0xba10	; 0xba10 <place_particles>
	DrawMap2(0, atmosphere_height, map_atmosphere);
    bb40:	4d e0       	ldi	r20, 0x0D	; 13
    bb42:	57 e6       	ldi	r21, 0x67	; 103
    bb44:	69 81       	ldd	r22, Y+1	; 0x01
    bb46:	80 e0       	ldi	r24, 0x00	; 0
    bb48:	0e 94 dc 47 	call	0x8fb8	; 0x8fb8 <DrawMap>
	game.current_level_index = index;
    bb4c:	c0 92 b7 0d 	sts	0x0DB7, r12
	music_transition();
    bb50:	0e 94 6b 5d 	call	0xbad6	; 0xbad6 <music_transition>
	if (!is_space())
    bb54:	0e 94 13 4b 	call	0x9626	; 0x9626 <is_space>
    bb58:	81 11       	cpse	r24, r1
    bb5a:	0f c0       	rjmp	.+30     	; 0xbb7a <planet_transition+0x84>
	{
		LBMapSprite(8, get_emarald_map(index), 0);
    bb5c:	8c 2d       	mov	r24, r12
    bb5e:	0e 94 5c 5d 	call	0xbab8	; 0xbab8 <get_emarald_map>
    bb62:	40 e0       	ldi	r20, 0x00	; 0
    bb64:	bc 01       	movw	r22, r24
    bb66:	88 e0       	ldi	r24, 0x08	; 8
    bb68:	0e 94 44 4a 	call	0x9488	; 0x9488 <LBMapSprite>
		LBMoveSprite(8, 112, 48, 1, 1);
    bb6c:	01 e0       	ldi	r16, 0x01	; 1
    bb6e:	21 e0       	ldi	r18, 0x01	; 1
    bb70:	40 e3       	ldi	r20, 0x30	; 48
    bb72:	60 e7       	ldi	r22, 0x70	; 112
    bb74:	88 e0       	ldi	r24, 0x08	; 8
    bb76:	0e 94 96 4a 	call	0x952c	; 0x952c <LBMoveSprite>
		StartSong(planetsong);
	}
}

void planet_transition(u8 index, char scroll, char atmosphere_height, char dy, u8 oy)
{
    bb7a:	d1 2c       	mov	r13, r1
		LBMoveSprite(8, 112, 48, 1, 1);
	}
	
	while (frame_counter < 255)
	{
		WaitVsync(1);
    bb7c:	81 e0       	ldi	r24, 0x01	; 1
    bb7e:	90 e0       	ldi	r25, 0x00	; 0
    bb80:	0e 94 45 48 	call	0x908a	; 0x908a <WaitVsync>
		LBMapSprite(0, LBGetNextFrame(&game.player.run), 0);
    bb84:	80 e3       	ldi	r24, 0x30	; 48
    bb86:	9e e0       	ldi	r25, 0x0E	; 14
    bb88:	0e 94 e2 48 	call	0x91c4	; 0x91c4 <LBGetNextFrame>
    bb8c:	40 e0       	ldi	r20, 0x00	; 0
    bb8e:	bc 01       	movw	r22, r24
    bb90:	80 e0       	ldi	r24, 0x00	; 0
    bb92:	0e 94 44 4a 	call	0x9488	; 0x9488 <LBMapSprite>
		LBMoveSprite(0, 104, 104, 4, 2);
    bb96:	02 e0       	ldi	r16, 0x02	; 2
    bb98:	24 e0       	ldi	r18, 0x04	; 4
    bb9a:	48 e6       	ldi	r20, 0x68	; 104
    bb9c:	68 e6       	ldi	r22, 0x68	; 104
    bb9e:	80 e0       	ldi	r24, 0x00	; 0
    bba0:	0e 94 96 4a 	call	0x952c	; 0x952c <LBMoveSprite>
		frame_counter++;
    bba4:	d3 94       	inc	r13
		if (frame_counter % 16 == 0) Screen.scrollY += scroll;
    bba6:	8d 2d       	mov	r24, r13
    bba8:	8f 70       	andi	r24, 0x0F	; 15
    bbaa:	29 f4       	brne	.+10     	; 0xbbb6 <planet_transition+0xc0>
    bbac:	90 91 b3 0c 	lds	r25, 0x0CB3
    bbb0:	9e 0d       	add	r25, r14
    bbb2:	90 93 b3 0c 	sts	0x0CB3, r25
		animate_particles(dy, oy);
    bbb6:	6f 2d       	mov	r22, r15
    bbb8:	81 2f       	mov	r24, r17
    bbba:	0e 94 2a 5d 	call	0xba54	; 0xba54 <animate_particles>
		LBRotateSprites();
    bbbe:	0e 94 d4 4a 	call	0x95a8	; 0x95a8 <LBRotateSprites>
	{
		LBMapSprite(8, get_emarald_map(index), 0);
		LBMoveSprite(8, 112, 48, 1, 1);
	}
	
	while (frame_counter < 255)
    bbc2:	8f ef       	ldi	r24, 0xFF	; 255
    bbc4:	d8 12       	cpse	r13, r24
    bbc6:	da cf       	rjmp	.-76     	; 0xbb7c <planet_transition+0x86>
		frame_counter++;
		if (frame_counter % 16 == 0) Screen.scrollY += scroll;
		animate_particles(dy, oy);
		LBRotateSprites();
	}
	game.current_screen = LEVEL;
    bbc8:	82 e0       	ldi	r24, 0x02	; 2
    bbca:	80 93 b6 0d 	sts	0x0DB6, r24
	ClearVram();
    bbce:	0e 94 85 39 	call	0x730a	; 0x730a <ClearVram>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    bbd2:	64 e1       	ldi	r22, 0x14	; 20
    bbd4:	80 e0       	ldi	r24, 0x00	; 0
    bbd6:	0e 94 8e 5b 	call	0xb71c	; 0xb71c <clear_sprites>
	LBRotateSprites();
    bbda:	0e 94 d4 4a 	call	0x95a8	; 0x95a8 <LBRotateSprites>
	fade_through();
    bbde:	0e 94 b0 5b 	call	0xb760	; 0xb760 <fade_through>
	load_level(index, true);
    bbe2:	61 e0       	ldi	r22, 0x01	; 1
    bbe4:	8c 2d       	mov	r24, r12
    bbe6:	0e 94 c0 5b 	call	0xb780	; 0xb780 <load_level>
	init_player_state();
    bbea:	0e 94 41 4b 	call	0x9682	; 0x9682 <init_player_state>
	init_enemy_state();
}
    bbee:	0f 90       	pop	r0
    bbf0:	df 91       	pop	r29
    bbf2:	cf 91       	pop	r28
    bbf4:	1f 91       	pop	r17
    bbf6:	0f 91       	pop	r16
    bbf8:	ff 90       	pop	r15
    bbfa:	ef 90       	pop	r14
    bbfc:	df 90       	pop	r13
    bbfe:	cf 90       	pop	r12
	clear_sprites(0, MAX_EXTENDED_SPRITES);
	LBRotateSprites();
	fade_through();
	load_level(index, true);
	init_player_state();
	init_enemy_state();
    bc00:	0c 94 2d 4b 	jmp	0x965a	; 0x965a <init_enemy_state>

0000bc04 <intro>:
}


void intro()
{
    bc04:	0f 93       	push	r16
	fade_through();
    bc06:	0e 94 b0 5b 	call	0xb760	; 0xb760 <fade_through>
	game.lives = LIVES;
    bc0a:	e6 ea       	ldi	r30, 0xA6	; 166
    bc0c:	fd e0       	ldi	r31, 0x0D	; 13
    bc0e:	85 e0       	ldi	r24, 0x05	; 5
    bc10:	87 87       	std	Z+15, r24	; 0x0f
	game.score = 0;
    bc12:	11 86       	std	Z+9, r1	; 0x09
    bc14:	10 86       	std	Z+8, r1	; 0x08
	game.time = 0;
    bc16:	13 86       	std	Z+11, r1	; 0x0b
    bc18:	12 86       	std	Z+10, r1	; 0x0a
	StartSong(planetsong);
    bc1a:	8c e4       	ldi	r24, 0x4C	; 76
    bc1c:	92 e1       	ldi	r25, 0x12	; 18
    bc1e:	0e 94 79 3c 	call	0x78f2	; 0x78f2 <StartSong>
	LBMapSprite(0, map_emerald_0, 0);
    bc22:	40 e0       	ldi	r20, 0x00	; 0
    bc24:	68 ec       	ldi	r22, 0xC8	; 200
    bc26:	7d e2       	ldi	r23, 0x2D	; 45
    bc28:	80 e0       	ldi	r24, 0x00	; 0
    bc2a:	0e 94 44 4a 	call	0x9488	; 0x9488 <LBMapSprite>
	LBMoveSprite(0, 80, 48, 1, 1);
    bc2e:	01 e0       	ldi	r16, 0x01	; 1
    bc30:	21 e0       	ldi	r18, 0x01	; 1
    bc32:	40 e3       	ldi	r20, 0x30	; 48
    bc34:	60 e5       	ldi	r22, 0x50	; 80
    bc36:	80 e0       	ldi	r24, 0x00	; 0
    bc38:	0e 94 96 4a 	call	0x952c	; 0x952c <LBMoveSprite>
	LBMapSprite(1, map_emerald_1, 0);
    bc3c:	40 e0       	ldi	r20, 0x00	; 0
    bc3e:	6b ec       	ldi	r22, 0xCB	; 203
    bc40:	7d e2       	ldi	r23, 0x2D	; 45
    bc42:	81 e0       	ldi	r24, 0x01	; 1
    bc44:	0e 94 44 4a 	call	0x9488	; 0x9488 <LBMapSprite>
	LBMoveSprite(1, 96, 48, 1, 1);
    bc48:	21 e0       	ldi	r18, 0x01	; 1
    bc4a:	40 e3       	ldi	r20, 0x30	; 48
    bc4c:	60 e6       	ldi	r22, 0x60	; 96
    bc4e:	81 e0       	ldi	r24, 0x01	; 1
    bc50:	0e 94 96 4a 	call	0x952c	; 0x952c <LBMoveSprite>
	LBMapSprite(2, map_emerald_2, 0);
    bc54:	40 e0       	ldi	r20, 0x00	; 0
    bc56:	65 ec       	ldi	r22, 0xC5	; 197
    bc58:	7d e2       	ldi	r23, 0x2D	; 45
    bc5a:	82 e0       	ldi	r24, 0x02	; 2
    bc5c:	0e 94 44 4a 	call	0x9488	; 0x9488 <LBMapSprite>
	LBMoveSprite(2, 112, 48, 1, 1);
    bc60:	21 e0       	ldi	r18, 0x01	; 1
    bc62:	40 e3       	ldi	r20, 0x30	; 48
    bc64:	60 e7       	ldi	r22, 0x70	; 112
    bc66:	82 e0       	ldi	r24, 0x02	; 2
    bc68:	0e 94 96 4a 	call	0x952c	; 0x952c <LBMoveSprite>
	LBMapSprite(3, map_emerald_3, 0);
    bc6c:	40 e0       	ldi	r20, 0x00	; 0
    bc6e:	62 ec       	ldi	r22, 0xC2	; 194
    bc70:	7d e2       	ldi	r23, 0x2D	; 45
    bc72:	83 e0       	ldi	r24, 0x03	; 3
    bc74:	0e 94 44 4a 	call	0x9488	; 0x9488 <LBMapSprite>
	LBMoveSprite(3, 128, 48, 1, 1);
    bc78:	21 e0       	ldi	r18, 0x01	; 1
    bc7a:	40 e3       	ldi	r20, 0x30	; 48
    bc7c:	60 e8       	ldi	r22, 0x80	; 128
    bc7e:	83 e0       	ldi	r24, 0x03	; 3
    bc80:	0e 94 96 4a 	call	0x952c	; 0x952c <LBMoveSprite>
	LBMapSprite(4, map_emerald_4, 0);
    bc84:	40 e0       	ldi	r20, 0x00	; 0
    bc86:	6f eb       	ldi	r22, 0xBF	; 191
    bc88:	7d e2       	ldi	r23, 0x2D	; 45
    bc8a:	84 e0       	ldi	r24, 0x04	; 4
    bc8c:	0e 94 44 4a 	call	0x9488	; 0x9488 <LBMapSprite>
	LBMoveSprite(4, 144, 48, 1, 1);
    bc90:	21 e0       	ldi	r18, 0x01	; 1
    bc92:	40 e3       	ldi	r20, 0x30	; 48
    bc94:	60 e9       	ldi	r22, 0x90	; 144
    bc96:	84 e0       	ldi	r24, 0x04	; 4
    bc98:	0e 94 96 4a 	call	0x952c	; 0x952c <LBMoveSprite>
	LBRotateSprites();
    bc9c:	0e 94 d4 4a 	call	0x95a8	; 0x95a8 <LBRotateSprites>
	stream_dialogue((const char*) strIntro, 12);
    bca0:	6c e0       	ldi	r22, 0x0C	; 12
    bca2:	8d e4       	ldi	r24, 0x4D	; 77
    bca4:	9a e0       	ldi	r25, 0x0A	; 10
    bca6:	0e 94 c4 5c 	call	0xb988	; 0xb988 <stream_dialogue>
	LBWaitSeconds(1);
    bcaa:	81 e0       	ldi	r24, 0x01	; 1
    bcac:	0e 94 35 4a 	call	0x946a	; 0x946a <LBWaitSeconds>
	planet_transition(0, 1, 28, -3, 199);
    bcb0:	07 ec       	ldi	r16, 0xC7	; 199
    bcb2:	2d ef       	ldi	r18, 0xFD	; 253
    bcb4:	4c e1       	ldi	r20, 0x1C	; 28
    bcb6:	61 e0       	ldi	r22, 0x01	; 1
    bcb8:	80 e0       	ldi	r24, 0x00	; 0
    bcba:	0e 94 7b 5d 	call	0xbaf6	; 0xbaf6 <planet_transition>
}
    bcbe:	0f 91       	pop	r16
    bcc0:	08 95       	ret

0000bcc2 <load_splash>:

void load_splash()
{
	fade_through();
    bcc2:	0e 94 b0 5b 	call	0xb760	; 0xb760 <fade_through>
	Screen.scrollX = 0;
    bcc6:	ef ea       	ldi	r30, 0xAF	; 175
    bcc8:	fc e0       	ldi	r31, 0x0C	; 12
    bcca:	13 82       	std	Z+3, r1	; 0x03
	Screen.scrollY = 0;
    bccc:	14 82       	std	Z+4, r1	; 0x04
	Screen.scrollHeight = 32;
    bcce:	80 e2       	ldi	r24, 0x20	; 32
    bcd0:	85 83       	std	Z+5, r24	; 0x05
	Screen.overlayHeight = 0;
    bcd2:	10 82       	st	Z, r1
	game.current_screen = SPLASH;
    bcd4:	e6 ea       	ldi	r30, 0xA6	; 166
    bcd6:	fd e0       	ldi	r31, 0x0D	; 13
    bcd8:	10 8a       	std	Z+16, r1	; 0x10
	game.selection = START_SELECTED;
    bcda:	15 8a       	std	Z+21, r1	; 0x15
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    bcdc:	64 e1       	ldi	r22, 0x14	; 20
    bcde:	80 e0       	ldi	r24, 0x00	; 0
    bce0:	0e 94 8e 5b 	call	0xb71c	; 0xb71c <clear_sprites>
	LBRotateSprites();
    bce4:	0e 94 d4 4a 	call	0x95a8	; 0x95a8 <LBRotateSprites>
	LBPrint(8, 15, (char*) str1Player);
    bce8:	49 e7       	ldi	r20, 0x79	; 121
    bcea:	5b e0       	ldi	r21, 0x0B	; 11
    bcec:	6f e0       	ldi	r22, 0x0F	; 15
    bcee:	88 e0       	ldi	r24, 0x08	; 8
    bcf0:	0e 94 73 49 	call	0x92e6	; 0x92e6 <LBPrint>
	LBPrint(8, 16, (char*) strHighScores);
    bcf4:	4d e6       	ldi	r20, 0x6D	; 109
    bcf6:	5b e0       	ldi	r21, 0x0B	; 11
    bcf8:	60 e1       	ldi	r22, 0x10	; 16
    bcfa:	88 e0       	ldi	r24, 0x08	; 8
    bcfc:	0e 94 73 49 	call	0x92e6	; 0x92e6 <LBPrint>
	LBPrint(4, 21, (char*) strCopyright);
    bd00:	47 e9       	ldi	r20, 0x97	; 151
    bd02:	5b e0       	ldi	r21, 0x0B	; 11
    bd04:	65 e1       	ldi	r22, 0x15	; 21
    bd06:	84 e0       	ldi	r24, 0x04	; 4
    bd08:	0e 94 73 49 	call	0x92e6	; 0x92e6 <LBPrint>
	LBPrint(3, 26, (char*) strMusic);
    bd0c:	4f e7       	ldi	r20, 0x7F	; 127
    bd0e:	5b e0       	ldi	r21, 0x0B	; 11
    bd10:	6a e1       	ldi	r22, 0x1A	; 26
    bd12:	83 e0       	ldi	r24, 0x03	; 3
    bd14:	0e 94 73 49 	call	0x92e6	; 0x92e6 <LBPrint>
	DrawMap2(6, 5, map_splash);
    bd18:	41 ef       	ldi	r20, 0xF1	; 241
    bd1a:	57 e6       	ldi	r21, 0x67	; 103
    bd1c:	65 e0       	ldi	r22, 0x05	; 5
    bd1e:	86 e0       	ldi	r24, 0x06	; 6
    bd20:	0e 94 dc 47 	call	0x8fb8	; 0x8fb8 <DrawMap>
	LBMapSprite(0, map_right_arrow, 0);
    bd24:	40 e0       	ldi	r20, 0x00	; 0
    bd26:	60 ee       	ldi	r22, 0xE0	; 224
    bd28:	7d e2       	ldi	r23, 0x2D	; 45
    bd2a:	80 e0       	ldi	r24, 0x00	; 0
    bd2c:	0c 94 44 4a 	jmp	0x9488	; 0x9488 <LBMapSprite>

0000bd30 <load_high_scores>:
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
	}
}

void load_high_scores()
{
    bd30:	4f 92       	push	r4
    bd32:	5f 92       	push	r5
    bd34:	6f 92       	push	r6
    bd36:	7f 92       	push	r7
    bd38:	8f 92       	push	r8
    bd3a:	9f 92       	push	r9
    bd3c:	af 92       	push	r10
    bd3e:	bf 92       	push	r11
    bd40:	cf 92       	push	r12
    bd42:	df 92       	push	r13
    bd44:	ef 92       	push	r14
    bd46:	ff 92       	push	r15
    bd48:	0f 93       	push	r16
    bd4a:	1f 93       	push	r17
    bd4c:	cf 93       	push	r28
    bd4e:	df 93       	push	r29
    bd50:	00 d0       	rcall	.+0      	; 0xbd52 <load_high_scores+0x22>
    bd52:	cd b7       	in	r28, 0x3d	; 61
    bd54:	de b7       	in	r29, 0x3e	; 62
	u16 score = 0;
	u8 ypos = 7;
	
	game.current_screen = HIGH_SCORES;
    bd56:	81 e0       	ldi	r24, 0x01	; 1
    bd58:	80 93 b6 0d 	sts	0x0DB6, r24
	game.high_score_index = -1;
    bd5c:	8f ef       	ldi	r24, 0xFF	; 255
    bd5e:	80 93 b4 0d 	sts	0x0DB4, r24
	fade_through();
    bd62:	0e 94 b0 5b 	call	0xb760	; 0xb760 <fade_through>
	Screen.scrollX = 0;
    bd66:	10 92 b2 0c 	sts	0x0CB2, r1
	Screen.scrollY = 0;
    bd6a:	10 92 b3 0c 	sts	0x0CB3, r1
	Screen.scrollHeight = 32;
    bd6e:	80 e2       	ldi	r24, 0x20	; 32
    bd70:	80 93 b4 0c 	sts	0x0CB4, r24
	Screen.overlayHeight = 0;
    bd74:	10 92 af 0c 	sts	0x0CAF, r1
	load_eeprom(&scores);
    bd78:	86 e8       	ldi	r24, 0x86	; 134
    bd7a:	9d e0       	ldi	r25, 0x0D	; 13
    bd7c:	0e 94 3f 4d 	call	0x9a7e	; 0x9a7e <load_eeprom>
	
	LBPrint(9, 3, (char*) strHighScores);
    bd80:	4d e6       	ldi	r20, 0x6D	; 109
    bd82:	5b e0       	ldi	r21, 0x0B	; 11
    bd84:	63 e0       	ldi	r22, 0x03	; 3
    bd86:	89 e0       	ldi	r24, 0x09	; 9
    bd88:	0e 94 73 49 	call	0x92e6	; 0x92e6 <LBPrint>
	
	LBMapSprite(0, map_emerald_0, 0);
    bd8c:	40 e0       	ldi	r20, 0x00	; 0
    bd8e:	68 ec       	ldi	r22, 0xC8	; 200
    bd90:	7d e2       	ldi	r23, 0x2D	; 45
    bd92:	80 e0       	ldi	r24, 0x00	; 0
    bd94:	0e 94 44 4a 	call	0x9488	; 0x9488 <LBMapSprite>
	LBMapSprite(1, map_emerald_1, 0);
    bd98:	40 e0       	ldi	r20, 0x00	; 0
    bd9a:	6b ec       	ldi	r22, 0xCB	; 203
    bd9c:	7d e2       	ldi	r23, 0x2D	; 45
    bd9e:	81 e0       	ldi	r24, 0x01	; 1
    bda0:	0e 94 44 4a 	call	0x9488	; 0x9488 <LBMapSprite>
	LBMoveSprite(0, 7*8, 3*8, 1, 1);
    bda4:	01 e0       	ldi	r16, 0x01	; 1
    bda6:	21 e0       	ldi	r18, 0x01	; 1
    bda8:	48 e1       	ldi	r20, 0x18	; 24
    bdaa:	68 e3       	ldi	r22, 0x38	; 56
    bdac:	80 e0       	ldi	r24, 0x00	; 0
    bdae:	0e 94 96 4a 	call	0x952c	; 0x952c <LBMoveSprite>
	LBMoveSprite(1, 21*8, 3*8, 1, 1);
    bdb2:	21 e0       	ldi	r18, 0x01	; 1
    bdb4:	48 e1       	ldi	r20, 0x18	; 24
    bdb6:	68 ea       	ldi	r22, 0xA8	; 168
    bdb8:	81 e0       	ldi	r24, 0x01	; 1
    bdba:	0e 94 96 4a 	call	0x952c	; 0x952c <LBMoveSprite>
    bdbe:	8c e8       	ldi	r24, 0x8C	; 140
    bdc0:	88 2e       	mov	r8, r24
    bdc2:	8d e0       	ldi	r24, 0x0D	; 13
    bdc4:	98 2e       	mov	r9, r24
    bdc6:	74 01       	movw	r14, r8
    bdc8:	90 e3       	ldi	r25, 0x30	; 48
    bdca:	b9 2e       	mov	r11, r25
}

void load_high_scores()
{
	u16 score = 0;
	u8 ypos = 7;
    bdcc:	17 e0       	ldi	r17, 0x07	; 7
	LBMoveSprite(0, 7*8, 3*8, 1, 1);
	LBMoveSprite(1, 21*8, 3*8, 1, 1);
	
	for (u8 i = 0; i < 30; i += 5)
	{
		LBPrintByte(9, ypos, i/5+1, false);
    bdce:	25 e0       	ldi	r18, 0x05	; 5
    bdd0:	a2 2e       	mov	r10, r18
    bdd2:	31 ea       	ldi	r19, 0xA1	; 161
    bdd4:	63 2e       	mov	r6, r19
    bdd6:	3d e0       	ldi	r19, 0x0D	; 13
    bdd8:	73 2e       	mov	r7, r19
    bdda:	0e 2d       	mov	r16, r14
    bddc:	08 19       	sub	r16, r8
    bdde:	80 2f       	mov	r24, r16
    bde0:	6a 2d       	mov	r22, r10
    bde2:	0e 94 07 67 	call	0xce0e	; 0xce0e <__udivmodqi4>
    bde6:	41 e0       	ldi	r20, 0x01	; 1
    bde8:	48 0f       	add	r20, r24
    bdea:	20 e0       	ldi	r18, 0x00	; 0
    bdec:	61 2f       	mov	r22, r17
    bdee:	89 e0       	ldi	r24, 0x09	; 9
    bdf0:	0e 94 8f 49 	call	0x931e	; 0x931e <LBPrintByte>
		LBPrintChar(10, ypos, ' ');
    bdf4:	40 e2       	ldi	r20, 0x20	; 32
    bdf6:	61 2f       	mov	r22, r17
    bdf8:	8a e0       	ldi	r24, 0x0A	; 10
    bdfa:	0e 94 53 49 	call	0x92a6	; 0x92a6 <LBPrintChar>
    bdfe:	f7 01       	movw	r30, r14
    be00:	34 97       	sbiw	r30, 0x04	; 4
		LBPrintChar(11, ypos, scores.data[i]);
    be02:	40 81       	ld	r20, Z
    be04:	61 2f       	mov	r22, r17
    be06:	8b e0       	ldi	r24, 0x0B	; 11
    be08:	0e 94 53 49 	call	0x92a6	; 0x92a6 <LBPrintChar>
    be0c:	f7 01       	movw	r30, r14
    be0e:	33 97       	sbiw	r30, 0x03	; 3
		LBPrintChar(12, ypos, scores.data[i+1]);
    be10:	40 81       	ld	r20, Z
    be12:	61 2f       	mov	r22, r17
    be14:	8c e0       	ldi	r24, 0x0C	; 12
    be16:	0e 94 53 49 	call	0x92a6	; 0x92a6 <LBPrintChar>
    be1a:	f7 01       	movw	r30, r14
    be1c:	32 97       	sbiw	r30, 0x02	; 2
		LBPrintChar(13, ypos, scores.data[i+2]);
    be1e:	40 81       	ld	r20, Z
    be20:	61 2f       	mov	r22, r17
    be22:	8d e0       	ldi	r24, 0x0D	; 13
    be24:	0e 94 53 49 	call	0x92a6	; 0x92a6 <LBPrintChar>
		LBPrintChar(14, ypos, ' ');
    be28:	40 e2       	ldi	r20, 0x20	; 32
    be2a:	61 2f       	mov	r22, r17
    be2c:	8e e0       	ldi	r24, 0x0E	; 14
    be2e:	0e 94 53 49 	call	0x92a6	; 0x92a6 <LBPrintChar>
    be32:	27 01       	movw	r4, r14
		(&score)[0] = scores.data[i+3];
    be34:	f2 01       	movw	r30, r4
    be36:	c2 90       	ld	r12, -Z
    be38:	2f 01       	movw	r4, r30
    be3a:	d1 2c       	mov	r13, r1
    be3c:	da 82       	std	Y+2, r13	; 0x02
    be3e:	c9 82       	std	Y+1, r12	; 0x01
		(&score)[1] = scores.data[i+4];
    be40:	f7 01       	movw	r30, r14
    be42:	80 81       	ld	r24, Z
    be44:	90 e0       	ldi	r25, 0x00	; 0
    be46:	9c 83       	std	Y+4, r25	; 0x04
    be48:	8b 83       	std	Y+3, r24	; 0x03
		LBPrintInt(19, ypos, score, true);
    be4a:	21 e0       	ldi	r18, 0x01	; 1
    be4c:	a6 01       	movw	r20, r12
    be4e:	61 2f       	mov	r22, r17
    be50:	83 e1       	ldi	r24, 0x13	; 19
    be52:	0e 94 c0 49 	call	0x9380	; 0x9380 <LBPrintInt>
		
		if (game.score > score && game.high_score_index == -1)
    be56:	40 91 ae 0d 	lds	r20, 0x0DAE
    be5a:	50 91 af 0d 	lds	r21, 0x0DAF
    be5e:	c4 16       	cp	r12, r20
    be60:	d5 06       	cpc	r13, r21
    be62:	f0 f5       	brcc	.+124    	; 0xbee0 <load_high_scores+0x1b0>
    be64:	80 91 b4 0d 	lds	r24, 0x0DB4
    be68:	8f 3f       	cpi	r24, 0xFF	; 255
    be6a:	d1 f5       	brne	.+116    	; 0xbee0 <load_high_scores+0x1b0>
    be6c:	a1 ea       	ldi	r26, 0xA1	; 161
    be6e:	bd e0       	ldi	r27, 0x0D	; 13
    be70:	cd 01       	movw	r24, r26
    be72:	05 97       	sbiw	r24, 0x05	; 5
    be74:	2e e1       	ldi	r18, 0x1E	; 30
    be76:	28 0f       	add	r18, r24
    be78:	26 19       	sub	r18, r6
		{
			// Shift scores down
			for (u8 j = 25; j > i; j -= 5)
    be7a:	02 17       	cp	r16, r18
    be7c:	40 f4       	brcc	.+16     	; 0xbe8e <load_high_scores+0x15e>
			{
				memcpy(&(scores.data[j]), &(scores.data[j-5]), 5);
    be7e:	fc 01       	movw	r30, r24
    be80:	2a 2d       	mov	r18, r10
    be82:	01 90       	ld	r0, Z+
    be84:	0d 92       	st	X+, r0
    be86:	2a 95       	dec	r18
    be88:	e1 f7       	brne	.-8      	; 0xbe82 <load_high_scores+0x152>
    be8a:	dc 01       	movw	r26, r24
    be8c:	f1 cf       	rjmp	.-30     	; 0xbe70 <load_high_scores+0x140>
			}
			LBPrintInt(19, ypos, game.score, true);
    be8e:	21 e0       	ldi	r18, 0x01	; 1
    be90:	61 2f       	mov	r22, r17
    be92:	83 e1       	ldi	r24, 0x13	; 19
    be94:	0e 94 c0 49 	call	0x9380	; 0x9380 <LBPrintInt>
			scores.data[i+3] = (&game.score)[0];
    be98:	80 91 ae 0d 	lds	r24, 0x0DAE
    be9c:	f2 01       	movw	r30, r4
    be9e:	80 83       	st	Z, r24
			scores.data[i+4] = (&game.score)[1];
    bea0:	80 91 b0 0d 	lds	r24, 0x0DB0
    bea4:	f7 01       	movw	r30, r14
    bea6:	80 83       	st	Z, r24
			game.high_score_index = i;
    bea8:	00 93 b4 0d 	sts	0x0DB4, r16
			LBMapSprite(2, map_down_arrow, 0);
    beac:	40 e0       	ldi	r20, 0x00	; 0
    beae:	6d ed       	ldi	r22, 0xDD	; 221
    beb0:	7d e2       	ldi	r23, 0x2D	; 45
    beb2:	82 e0       	ldi	r24, 0x02	; 2
    beb4:	0e 94 44 4a 	call	0x9488	; 0x9488 <LBMapSprite>
			LBMapSprite(3, map_up_arrow, 0);
    beb8:	40 e0       	ldi	r20, 0x00	; 0
    beba:	6a ed       	ldi	r22, 0xDA	; 218
    bebc:	7d e2       	ldi	r23, 0x2D	; 45
    bebe:	83 e0       	ldi	r24, 0x03	; 3
    bec0:	0e 94 44 4a 	call	0x9488	; 0x9488 <LBMapSprite>
			LBMoveSprite(2, 11*8, (ypos-1)*8, 1, 1);
    bec4:	01 e0       	ldi	r16, 0x01	; 1
    bec6:	21 e0       	ldi	r18, 0x01	; 1
    bec8:	4b 2d       	mov	r20, r11
    beca:	68 e5       	ldi	r22, 0x58	; 88
    becc:	82 e0       	ldi	r24, 0x02	; 2
    bece:	0e 94 96 4a 	call	0x952c	; 0x952c <LBMoveSprite>
			LBMoveSprite(3, 11*8, (ypos+1)*8, 1, 1);
    bed2:	21 e0       	ldi	r18, 0x01	; 1
    bed4:	40 e1       	ldi	r20, 0x10	; 16
    bed6:	4b 0d       	add	r20, r11
    bed8:	68 e5       	ldi	r22, 0x58	; 88
    beda:	83 e0       	ldi	r24, 0x03	; 3
    bedc:	0e 94 96 4a 	call	0x952c	; 0x952c <LBMoveSprite>
		}
		
		ypos += 2;
    bee0:	1e 5f       	subi	r17, 0xFE	; 254
    bee2:	f5 e0       	ldi	r31, 0x05	; 5
    bee4:	ef 0e       	add	r14, r31
    bee6:	f1 1c       	adc	r15, r1
    bee8:	80 e1       	ldi	r24, 0x10	; 16
    beea:	b8 0e       	add	r11, r24
	LBMapSprite(0, map_emerald_0, 0);
	LBMapSprite(1, map_emerald_1, 0);
	LBMoveSprite(0, 7*8, 3*8, 1, 1);
	LBMoveSprite(1, 21*8, 3*8, 1, 1);
	
	for (u8 i = 0; i < 30; i += 5)
    beec:	13 31       	cpi	r17, 0x13	; 19
    beee:	09 f0       	breq	.+2      	; 0xbef2 <load_high_scores+0x1c2>
    bef0:	74 cf       	rjmp	.-280    	; 0xbdda <load_high_scores+0xaa>
		}
		
		ypos += 2;
	}
	
	LBPrint(9, 22, (char*) strMainMenu);
    bef2:	44 e4       	ldi	r20, 0x44	; 68
    bef4:	5b e0       	ldi	r21, 0x0B	; 11
    bef6:	66 e1       	ldi	r22, 0x16	; 22
    bef8:	89 e0       	ldi	r24, 0x09	; 9
}
    befa:	0f 90       	pop	r0
    befc:	0f 90       	pop	r0
    befe:	df 91       	pop	r29
    bf00:	cf 91       	pop	r28
    bf02:	1f 91       	pop	r17
    bf04:	0f 91       	pop	r16
    bf06:	ff 90       	pop	r15
    bf08:	ef 90       	pop	r14
    bf0a:	df 90       	pop	r13
    bf0c:	cf 90       	pop	r12
    bf0e:	bf 90       	pop	r11
    bf10:	af 90       	pop	r10
    bf12:	9f 90       	pop	r9
    bf14:	8f 90       	pop	r8
    bf16:	7f 90       	pop	r7
    bf18:	6f 90       	pop	r6
    bf1a:	5f 90       	pop	r5
    bf1c:	4f 90       	pop	r4
		}
		
		ypos += 2;
	}
	
	LBPrint(9, 22, (char*) strMainMenu);
    bf1e:	0c 94 73 49 	jmp	0x92e6	; 0x92e6 <LBPrint>

0000bf22 <exit_game>:
	}
}

void exit_game()
{
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    bf22:	64 e1       	ldi	r22, 0x14	; 20
    bf24:	80 e0       	ldi	r24, 0x00	; 0
    bf26:	0e 94 8e 5b 	call	0xb71c	; 0xb71c <clear_sprites>
	LBRotateSprites();
    bf2a:	0e 94 d4 4a 	call	0x95a8	; 0x95a8 <LBRotateSprites>
	init_player_state();
    bf2e:	0e 94 41 4b 	call	0x9682	; 0x9682 <init_player_state>
	init_enemy_state();
    bf32:	0e 94 2d 4b 	call	0x965a	; 0x965a <init_enemy_state>
	StopSong();
    bf36:	0e 94 a2 3c 	call	0x7944	; 0x7944 <StopSong>
	load_high_scores();
    bf3a:	0c 94 98 5e 	jmp	0xbd30	; 0xbd30 <load_high_scores>

0000bf3e <update_splash>:
	DrawMap2(6, 5, map_splash);
	LBMapSprite(0, map_right_arrow, 0);
}

void update_splash()
{
    bf3e:	0f 93       	push	r16
    bf40:	cf 93       	push	r28
	if (game.joypadState.pressed & BTN_DOWN && game.selection == START_SELECTED)
    bf42:	80 91 9a 0f 	lds	r24, 0x0F9A
    bf46:	c0 91 bb 0d 	lds	r28, 0x0DBB
    bf4a:	85 ff       	sbrs	r24, 5
    bf4c:	06 c0       	rjmp	.+12     	; 0xbf5a <update_splash+0x1c>
    bf4e:	c1 11       	cpse	r28, r1
    bf50:	04 c0       	rjmp	.+8      	; 0xbf5a <update_splash+0x1c>
	{
		game.selection = HIGH_SCORES_SELECTED;
    bf52:	81 e0       	ldi	r24, 0x01	; 1
    bf54:	80 93 bb 0d 	sts	0x0DBB, r24
    bf58:	06 c0       	rjmp	.+12     	; 0xbf66 <update_splash+0x28>
		SFX_NAVIGATE;
	}
	else if (game.joypadState.pressed & BTN_UP && game.selection == HIGH_SCORES_SELECTED)
    bf5a:	84 ff       	sbrs	r24, 4
    bf5c:	0a c0       	rjmp	.+20     	; 0xbf72 <update_splash+0x34>
    bf5e:	c1 30       	cpi	r28, 0x01	; 1
    bf60:	41 f4       	brne	.+16     	; 0xbf72 <update_splash+0x34>
	{
		game.selection = START_SELECTED;
    bf62:	10 92 bb 0d 	sts	0x0DBB, r1
		SFX_NAVIGATE;
    bf66:	41 e0       	ldi	r20, 0x01	; 1
    bf68:	6f ef       	ldi	r22, 0xFF	; 255
    bf6a:	82 e0       	ldi	r24, 0x02	; 2
    bf6c:	0e 94 64 3d 	call	0x7ac8	; 0x7ac8 <TriggerFx>
    bf70:	1c c0       	rjmp	.+56     	; 0xbfaa <update_splash+0x6c>
	}
	else if (select_pressed(&game.joypadState) && game.selection == START_SELECTED)
    bf72:	8a e9       	ldi	r24, 0x9A	; 154
    bf74:	9f e0       	ldi	r25, 0x0F	; 15
    bf76:	0e 94 ba 5c 	call	0xb974	; 0xb974 <select_pressed>
    bf7a:	88 23       	and	r24, r24
    bf7c:	b1 f0       	breq	.+44     	; 0xbfaa <update_splash+0x6c>
    bf7e:	c1 11       	cpse	r28, r1
    bf80:	09 c0       	rjmp	.+18     	; 0xbf94 <update_splash+0x56>
	{
		SFX_NAVIGATE;
    bf82:	41 e0       	ldi	r20, 0x01	; 1
    bf84:	6f ef       	ldi	r22, 0xFF	; 255
    bf86:	82 e0       	ldi	r24, 0x02	; 2
    bf88:	0e 94 64 3d 	call	0x7ac8	; 0x7ac8 <TriggerFx>
	}
	else
	{
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
	}
}
    bf8c:	cf 91       	pop	r28
    bf8e:	0f 91       	pop	r16
		SFX_NAVIGATE;
	}
	else if (select_pressed(&game.joypadState) && game.selection == START_SELECTED)
	{
		SFX_NAVIGATE;
		intro();
    bf90:	0c 94 02 5e 	jmp	0xbc04	; 0xbc04 <intro>
		return;
	}
	else if (select_pressed(&game.joypadState) && game.selection == HIGH_SCORES_SELECTED)
    bf94:	c1 30       	cpi	r28, 0x01	; 1
    bf96:	49 f4       	brne	.+18     	; 0xbfaa <update_splash+0x6c>
	{
		SFX_NAVIGATE;
    bf98:	41 e0       	ldi	r20, 0x01	; 1
    bf9a:	6f ef       	ldi	r22, 0xFF	; 255
    bf9c:	82 e0       	ldi	r24, 0x02	; 2
    bf9e:	0e 94 64 3d 	call	0x7ac8	; 0x7ac8 <TriggerFx>
	}
	else
	{
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
	}
}
    bfa2:	cf 91       	pop	r28
    bfa4:	0f 91       	pop	r16
		return;
	}
	else if (select_pressed(&game.joypadState) && game.selection == HIGH_SCORES_SELECTED)
	{
		SFX_NAVIGATE;
		load_high_scores();
    bfa6:	0c 94 98 5e 	jmp	0xbd30	; 0xbd30 <load_high_scores>
		return;
	}
	
	if (game.selection == START_SELECTED)
    bfaa:	80 91 bb 0d 	lds	r24, 0x0DBB
	{
		LBMoveSprite(0, 7*8, 15*8, 1, 1);
    bfae:	01 e0       	ldi	r16, 0x01	; 1
    bfb0:	21 e0       	ldi	r18, 0x01	; 1
		SFX_NAVIGATE;
		load_high_scores();
		return;
	}
	
	if (game.selection == START_SELECTED)
    bfb2:	81 11       	cpse	r24, r1
    bfb4:	03 c0       	rjmp	.+6      	; 0xbfbc <update_splash+0x7e>
	{
		LBMoveSprite(0, 7*8, 15*8, 1, 1);
    bfb6:	48 e7       	ldi	r20, 0x78	; 120
    bfb8:	68 e3       	ldi	r22, 0x38	; 56
    bfba:	03 c0       	rjmp	.+6      	; 0xbfc2 <update_splash+0x84>
	}
	else
	{
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
    bfbc:	40 e8       	ldi	r20, 0x80	; 128
    bfbe:	68 e3       	ldi	r22, 0x38	; 56
    bfc0:	80 e0       	ldi	r24, 0x00	; 0
    bfc2:	0e 94 96 4a 	call	0x952c	; 0x952c <LBMoveSprite>
	}
}
    bfc6:	cf 91       	pop	r28
    bfc8:	0f 91       	pop	r16
    bfca:	08 95       	ret

0000bfcc <update_high_scores>:
	
	LBPrint(9, 22, (char*) strMainMenu);
}

void update_high_scores()
{
    bfcc:	0f 93       	push	r16
	if (game.joypadState.pressed & BTN_X)
    bfce:	80 91 9a 0f 	lds	r24, 0x0F9A
    bfd2:	90 91 9b 0f 	lds	r25, 0x0F9B
    bfd6:	91 ff       	sbrs	r25, 1
    bfd8:	07 c0       	rjmp	.+14     	; 0xbfe8 <update_high_scores+0x1c>
	{
		SFX_NAVIGATE;
    bfda:	41 e0       	ldi	r20, 0x01	; 1
    bfdc:	6f ef       	ldi	r22, 0xFF	; 255
    bfde:	82 e0       	ldi	r24, 0x02	; 2
    bfe0:	0e 94 64 3d 	call	0x7ac8	; 0x7ac8 <TriggerFx>
		load_splash();
    bfe4:	0e 94 61 5e 	call	0xbcc2	; 0xbcc2 <load_splash>
	}
	
	if (game.high_score_index != -1)
    bfe8:	30 91 b4 0d 	lds	r19, 0x0DB4
    bfec:	3f 3f       	cpi	r19, 0xFF	; 255
    bfee:	09 f4       	brne	.+2      	; 0xbff2 <update_high_scores+0x26>
    bff0:	a2 c0       	rjmp	.+324    	; 0xc136 <update_high_scores+0x16a>
	{
		if (game.joypadState.pressed & BTN_RIGHT && game.high_score_index % 5 != 2)
    bff2:	20 91 9a 0f 	lds	r18, 0x0F9A
    bff6:	27 ff       	sbrs	r18, 7
    bff8:	1e c0       	rjmp	.+60     	; 0xc036 <update_high_scores+0x6a>
    bffa:	83 2f       	mov	r24, r19
    bffc:	65 e0       	ldi	r22, 0x05	; 5
    bffe:	0e 94 13 67 	call	0xce26	; 0xce26 <__divmodqi4>
    c002:	92 30       	cpi	r25, 0x02	; 2
    c004:	c1 f0       	breq	.+48     	; 0xc036 <update_high_scores+0x6a>
		{
			SFX_NAVIGATE;
    c006:	41 e0       	ldi	r20, 0x01	; 1
    c008:	6f ef       	ldi	r22, 0xFF	; 255
    c00a:	82 e0       	ldi	r24, 0x02	; 2
    c00c:	0e 94 64 3d 	call	0x7ac8	; 0x7ac8 <TriggerFx>
			game.high_score_index++;
    c010:	80 91 b4 0d 	lds	r24, 0x0DB4
    c014:	8f 5f       	subi	r24, 0xFF	; 255
    c016:	80 93 b4 0d 	sts	0x0DB4, r24
			LBMoveSprite(2, extendedSprites[2].x+8, extendedSprites[2].y, 1, 1);
    c01a:	60 91 b3 0f 	lds	r22, 0x0FB3
    c01e:	68 5f       	subi	r22, 0xF8	; 248
    c020:	01 e0       	ldi	r16, 0x01	; 1
    c022:	21 e0       	ldi	r18, 0x01	; 1
    c024:	40 91 b4 0f 	lds	r20, 0x0FB4
    c028:	82 e0       	ldi	r24, 0x02	; 2
    c02a:	0e 94 96 4a 	call	0x952c	; 0x952c <LBMoveSprite>
			LBMoveSprite(3, extendedSprites[3].x+8, extendedSprites[3].y, 1, 1);
    c02e:	60 91 b7 0f 	lds	r22, 0x0FB7
    c032:	68 5f       	subi	r22, 0xF8	; 248
    c034:	1f c0       	rjmp	.+62     	; 0xc074 <update_high_scores+0xa8>
		}
		else if (game.joypadState.pressed & BTN_LEFT && game.high_score_index % 5 != 0)
    c036:	26 ff       	sbrs	r18, 6
    c038:	24 c0       	rjmp	.+72     	; 0xc082 <update_high_scores+0xb6>
    c03a:	83 2f       	mov	r24, r19
    c03c:	65 e0       	ldi	r22, 0x05	; 5
    c03e:	0e 94 13 67 	call	0xce26	; 0xce26 <__divmodqi4>
    c042:	99 23       	and	r25, r25
    c044:	f1 f0       	breq	.+60     	; 0xc082 <update_high_scores+0xb6>
		{
			SFX_NAVIGATE;
    c046:	41 e0       	ldi	r20, 0x01	; 1
    c048:	6f ef       	ldi	r22, 0xFF	; 255
    c04a:	82 e0       	ldi	r24, 0x02	; 2
    c04c:	0e 94 64 3d 	call	0x7ac8	; 0x7ac8 <TriggerFx>
			game.high_score_index--;
    c050:	80 91 b4 0d 	lds	r24, 0x0DB4
    c054:	81 50       	subi	r24, 0x01	; 1
    c056:	80 93 b4 0d 	sts	0x0DB4, r24
			LBMoveSprite(2, extendedSprites[2].x-8, extendedSprites[2].y, 1, 1);
    c05a:	60 91 b3 0f 	lds	r22, 0x0FB3
    c05e:	68 50       	subi	r22, 0x08	; 8
    c060:	01 e0       	ldi	r16, 0x01	; 1
    c062:	21 e0       	ldi	r18, 0x01	; 1
    c064:	40 91 b4 0f 	lds	r20, 0x0FB4
    c068:	82 e0       	ldi	r24, 0x02	; 2
    c06a:	0e 94 96 4a 	call	0x952c	; 0x952c <LBMoveSprite>
			LBMoveSprite(3, extendedSprites[3].x-8, extendedSprites[3].y, 1, 1);
    c06e:	60 91 b7 0f 	lds	r22, 0x0FB7
    c072:	68 50       	subi	r22, 0x08	; 8
    c074:	21 e0       	ldi	r18, 0x01	; 1
    c076:	40 91 b8 0f 	lds	r20, 0x0FB8
    c07a:	83 e0       	ldi	r24, 0x03	; 3
    c07c:	0e 94 96 4a 	call	0x952c	; 0x952c <LBMoveSprite>
    c080:	5a c0       	rjmp	.+180    	; 0xc136 <update_high_scores+0x16a>
		}
		else if (game.joypadState.pressed & BTN_UP)
    c082:	24 ff       	sbrs	r18, 4
    c084:	13 c0       	rjmp	.+38     	; 0xc0ac <update_high_scores+0xe0>
		{
			SFX_NAVIGATE;
    c086:	41 e0       	ldi	r20, 0x01	; 1
    c088:	6f ef       	ldi	r22, 0xFF	; 255
    c08a:	82 e0       	ldi	r24, 0x02	; 2
    c08c:	0e 94 64 3d 	call	0x7ac8	; 0x7ac8 <TriggerFx>
			scores.data[game.high_score_index] = scores.data[game.high_score_index]-1;
    c090:	80 91 b4 0d 	lds	r24, 0x0DB4
    c094:	e8 2f       	mov	r30, r24
    c096:	ff 27       	eor	r31, r31
    c098:	e7 fd       	sbrc	r30, 7
    c09a:	f0 95       	com	r31
    c09c:	ea 57       	subi	r30, 0x7A	; 122
    c09e:	f2 4f       	sbci	r31, 0xF2	; 242
    c0a0:	92 81       	ldd	r25, Z+2	; 0x02
    c0a2:	91 50       	subi	r25, 0x01	; 1
			if (scores.data[game.high_score_index] < 'A') scores.data[game.high_score_index] = 'A';
    c0a4:	91 34       	cpi	r25, 0x41	; 65
    c0a6:	b0 f4       	brcc	.+44     	; 0xc0d4 <update_high_scores+0x108>
    c0a8:	91 e4       	ldi	r25, 0x41	; 65
    c0aa:	14 c0       	rjmp	.+40     	; 0xc0d4 <update_high_scores+0x108>
			LBPrintChar(11+(game.high_score_index % 5), 7+(game.high_score_index/5)*2, scores.data[game.high_score_index]);
		}
		else if (game.joypadState.pressed & BTN_DOWN)
    c0ac:	25 ff       	sbrs	r18, 5
    c0ae:	1f c0       	rjmp	.+62     	; 0xc0ee <update_high_scores+0x122>
		{
			SFX_NAVIGATE;
    c0b0:	41 e0       	ldi	r20, 0x01	; 1
    c0b2:	6f ef       	ldi	r22, 0xFF	; 255
    c0b4:	82 e0       	ldi	r24, 0x02	; 2
    c0b6:	0e 94 64 3d 	call	0x7ac8	; 0x7ac8 <TriggerFx>
			scores.data[game.high_score_index] = scores.data[game.high_score_index]+1;
    c0ba:	80 91 b4 0d 	lds	r24, 0x0DB4
    c0be:	e8 2f       	mov	r30, r24
    c0c0:	ff 27       	eor	r31, r31
    c0c2:	e7 fd       	sbrc	r30, 7
    c0c4:	f0 95       	com	r31
    c0c6:	ea 57       	subi	r30, 0x7A	; 122
    c0c8:	f2 4f       	sbci	r31, 0xF2	; 242
    c0ca:	92 81       	ldd	r25, Z+2	; 0x02
    c0cc:	9f 5f       	subi	r25, 0xFF	; 255
			if (scores.data[game.high_score_index] > 'Z') scores.data[game.high_score_index] = 'Z';
    c0ce:	9b 35       	cpi	r25, 0x5B	; 91
    c0d0:	08 f0       	brcs	.+2      	; 0xc0d4 <update_high_scores+0x108>
    c0d2:	9a e5       	ldi	r25, 0x5A	; 90
    c0d4:	92 83       	std	Z+2, r25	; 0x02
			LBPrintChar(11+(game.high_score_index % 5), 7+(game.high_score_index/5)*2, scores.data[game.high_score_index]);
    c0d6:	65 e0       	ldi	r22, 0x05	; 5
    c0d8:	0e 94 13 67 	call	0xce26	; 0xce26 <__divmodqi4>
    c0dc:	68 2f       	mov	r22, r24
    c0de:	66 0f       	add	r22, r22
    c0e0:	69 5f       	subi	r22, 0xF9	; 249
    c0e2:	42 81       	ldd	r20, Z+2	; 0x02
    c0e4:	8b e0       	ldi	r24, 0x0B	; 11
    c0e6:	89 0f       	add	r24, r25
			game.high_score_index = -1;
			game.score = 0;
			save_eeprom(&scores);
		}
	}
}
    c0e8:	0f 91       	pop	r16
		else if (game.joypadState.pressed & BTN_DOWN)
		{
			SFX_NAVIGATE;
			scores.data[game.high_score_index] = scores.data[game.high_score_index]+1;
			if (scores.data[game.high_score_index] > 'Z') scores.data[game.high_score_index] = 'Z';
			LBPrintChar(11+(game.high_score_index % 5), 7+(game.high_score_index/5)*2, scores.data[game.high_score_index]);
    c0ea:	0c 94 53 49 	jmp	0x92a6	; 0x92a6 <LBPrintChar>
		}
		else if (select_pressed(&game.joypadState))
    c0ee:	8a e9       	ldi	r24, 0x9A	; 154
    c0f0:	9f e0       	ldi	r25, 0x0F	; 15
    c0f2:	0e 94 ba 5c 	call	0xb974	; 0xb974 <select_pressed>
    c0f6:	88 23       	and	r24, r24
    c0f8:	f1 f0       	breq	.+60     	; 0xc136 <update_high_scores+0x16a>
		{
			SFX_NAVIGATE;
    c0fa:	41 e0       	ldi	r20, 0x01	; 1
    c0fc:	6f ef       	ldi	r22, 0xFF	; 255
    c0fe:	82 e0       	ldi	r24, 0x02	; 2
    c100:	0e 94 64 3d 	call	0x7ac8	; 0x7ac8 <TriggerFx>
			LBMoveSprite(2, OFF_SCREEN, 0, 1, 1);
    c104:	01 e0       	ldi	r16, 0x01	; 1
    c106:	21 e0       	ldi	r18, 0x01	; 1
    c108:	40 e0       	ldi	r20, 0x00	; 0
    c10a:	60 ee       	ldi	r22, 0xE0	; 224
    c10c:	82 e0       	ldi	r24, 0x02	; 2
    c10e:	0e 94 96 4a 	call	0x952c	; 0x952c <LBMoveSprite>
			LBMoveSprite(3, OFF_SCREEN, 0, 1, 1);
    c112:	21 e0       	ldi	r18, 0x01	; 1
    c114:	40 e0       	ldi	r20, 0x00	; 0
    c116:	60 ee       	ldi	r22, 0xE0	; 224
    c118:	83 e0       	ldi	r24, 0x03	; 3
    c11a:	0e 94 96 4a 	call	0x952c	; 0x952c <LBMoveSprite>
			game.high_score_index = -1;
    c11e:	8f ef       	ldi	r24, 0xFF	; 255
    c120:	80 93 b4 0d 	sts	0x0DB4, r24
			game.score = 0;
    c124:	10 92 af 0d 	sts	0x0DAF, r1
    c128:	10 92 ae 0d 	sts	0x0DAE, r1
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    c12c:	86 e8       	ldi	r24, 0x86	; 134
    c12e:	9d e0       	ldi	r25, 0x0D	; 13
			game.high_score_index = -1;
			game.score = 0;
			save_eeprom(&scores);
		}
	}
}
    c130:	0f 91       	pop	r16
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    c132:	0c 94 00 3b 	jmp	0x7600	; 0x7600 <EepromWriteBlock>
			game.high_score_index = -1;
			game.score = 0;
			save_eeprom(&scores);
		}
	}
}
    c136:	0f 91       	pop	r16
    c138:	08 95       	ret

0000c13a <tally_score>:
		}
	}
}

void tally_score(char* title, u16 bonus)
{
    c13a:	5f 92       	push	r5
    c13c:	6f 92       	push	r6
    c13e:	7f 92       	push	r7
    c140:	8f 92       	push	r8
    c142:	9f 92       	push	r9
    c144:	af 92       	push	r10
    c146:	bf 92       	push	r11
    c148:	cf 92       	push	r12
    c14a:	df 92       	push	r13
    c14c:	ef 92       	push	r14
    c14e:	ff 92       	push	r15
    c150:	0f 93       	push	r16
    c152:	1f 93       	push	r17
    c154:	cf 93       	push	r28
    c156:	df 93       	push	r29
    c158:	6c 01       	movw	r12, r24
    c15a:	7b 01       	movw	r14, r22
	u8 x = Screen.scrollX / 8;
    c15c:	c0 91 b2 0c 	lds	r28, 0x0CB2
    c160:	c6 95       	lsr	r28
    c162:	c6 95       	lsr	r28
    c164:	c6 95       	lsr	r28
	u8 y = Screen.scrollY / 8;
    c166:	00 91 b3 0c 	lds	r16, 0x0CB3
    c16a:	06 95       	lsr	r16
    c16c:	06 95       	lsr	r16
    c16e:	06 95       	lsr	r16
	u16 counter = 0;
	
	//hide_sprites(0, MAX_EXTENDED_SPRITES);
	//LBRotateSprites();
	
	StopSong();
    c170:	0e 94 a2 3c 	call	0x7944	; 0x7944 <StopSong>
	DrawMap2((x+8)%32, (y+6)%30, map_canvas);
    c174:	10 e0       	ldi	r17, 0x00	; 0
    c176:	d0 e0       	ldi	r29, 0x00	; 0
    c178:	c8 01       	movw	r24, r16
    c17a:	06 96       	adiw	r24, 0x06	; 6
    c17c:	2e e1       	ldi	r18, 0x1E	; 30
    c17e:	a2 2e       	mov	r10, r18
    c180:	b1 2c       	mov	r11, r1
    c182:	b5 01       	movw	r22, r10
    c184:	0e 94 35 67 	call	0xce6a	; 0xce6a <__divmodhi4>
    c188:	9e 01       	movw	r18, r28
    c18a:	28 5f       	subi	r18, 0xF8	; 248
    c18c:	3f 4f       	sbci	r19, 0xFF	; 255
    c18e:	48 e6       	ldi	r20, 0x68	; 104
    c190:	57 e6       	ldi	r21, 0x67	; 103
    c192:	68 2f       	mov	r22, r24
    c194:	82 2f       	mov	r24, r18
    c196:	8f 71       	andi	r24, 0x1F	; 31
    c198:	0e 94 dc 47 	call	0x8fb8	; 0x8fb8 <DrawMap>
	LBPrint((x+10)%32, (y+7)%30, title);
    c19c:	c8 01       	movw	r24, r16
    c19e:	07 96       	adiw	r24, 0x07	; 7
    c1a0:	b5 01       	movw	r22, r10
    c1a2:	0e 94 35 67 	call	0xce6a	; 0xce6a <__divmodhi4>
    c1a6:	9e 01       	movw	r18, r28
    c1a8:	26 5f       	subi	r18, 0xF6	; 246
    c1aa:	3f 4f       	sbci	r19, 0xFF	; 255
    c1ac:	a6 01       	movw	r20, r12
    c1ae:	68 2f       	mov	r22, r24
    c1b0:	82 2f       	mov	r24, r18
    c1b2:	8f 71       	andi	r24, 0x1F	; 31
    c1b4:	0e 94 73 49 	call	0x92e6	; 0x92e6 <LBPrint>
	LBPrint((x+9)%32, (y+9)%30, (char*) strTally);
    c1b8:	c8 01       	movw	r24, r16
    c1ba:	09 96       	adiw	r24, 0x09	; 9
    c1bc:	b5 01       	movw	r22, r10
    c1be:	0e 94 35 67 	call	0xce6a	; 0xce6a <__divmodhi4>
    c1c2:	68 2e       	mov	r6, r24
    c1c4:	98 2e       	mov	r9, r24
    c1c6:	6e 01       	movw	r12, r28
    c1c8:	29 e0       	ldi	r18, 0x09	; 9
    c1ca:	c2 0e       	add	r12, r18
    c1cc:	d1 1c       	adc	r13, r1
    c1ce:	8f e1       	ldi	r24, 0x1F	; 31
    c1d0:	c8 22       	and	r12, r24
    c1d2:	dd 24       	eor	r13, r13
    c1d4:	40 e1       	ldi	r20, 0x10	; 16
    c1d6:	5b e0       	ldi	r21, 0x0B	; 11
    c1d8:	66 2d       	mov	r22, r6
    c1da:	8c 2d       	mov	r24, r12
    c1dc:	0e 94 73 49 	call	0x92e6	; 0x92e6 <LBPrint>
	LBPrint((x+9)%32, (y+11)%30, (char*) strScore);
    c1e0:	c8 01       	movw	r24, r16
    c1e2:	0b 96       	adiw	r24, 0x0b	; 11
    c1e4:	b5 01       	movw	r22, r10
    c1e6:	0e 94 35 67 	call	0xce6a	; 0xce6a <__divmodhi4>
    c1ea:	58 2e       	mov	r5, r24
    c1ec:	88 2e       	mov	r8, r24
    c1ee:	45 e6       	ldi	r20, 0x65	; 101
    c1f0:	5b e0       	ldi	r21, 0x0B	; 11
    c1f2:	68 2f       	mov	r22, r24
    c1f4:	8c 2d       	mov	r24, r12
    c1f6:	0e 94 73 49 	call	0x92e6	; 0x92e6 <LBPrint>
	LBPrint((x+9)%32, (y+12)%30, (char*) strTime);
    c1fa:	c8 01       	movw	r24, r16
    c1fc:	0c 96       	adiw	r24, 0x0c	; 12
    c1fe:	b5 01       	movw	r22, r10
    c200:	0e 94 35 67 	call	0xce6a	; 0xce6a <__divmodhi4>
    c204:	78 2e       	mov	r7, r24
    c206:	d8 2e       	mov	r13, r24
    c208:	40 e5       	ldi	r20, 0x50	; 80
    c20a:	5b e0       	ldi	r21, 0x0B	; 11
    c20c:	68 2f       	mov	r22, r24
    c20e:	8c 2d       	mov	r24, r12
    c210:	0e 94 73 49 	call	0x92e6	; 0x92e6 <LBPrint>
	LBPrint((x+9)%32, (y+13)%30, (char*) strLevelBonus);
    c214:	c8 01       	movw	r24, r16
    c216:	0d 96       	adiw	r24, 0x0d	; 13
    c218:	b5 01       	movw	r22, r10
    c21a:	0e 94 35 67 	call	0xce6a	; 0xce6a <__divmodhi4>
    c21e:	18 2f       	mov	r17, r24
    c220:	b8 2e       	mov	r11, r24
    c222:	40 e2       	ldi	r20, 0x20	; 32
    c224:	5b e0       	ldi	r21, 0x0B	; 11
    c226:	68 2f       	mov	r22, r24
    c228:	8c 2d       	mov	r24, r12
    c22a:	0e 94 73 49 	call	0x92e6	; 0x92e6 <LBPrint>
	
	LBPrintInt((x+20)%32, (y+9)%30, 0, true);
    c22e:	64 96       	adiw	r28, 0x14	; 20
    c230:	cf 71       	andi	r28, 0x1F	; 31
    c232:	dd 27       	eor	r29, r29
    c234:	cc 2e       	mov	r12, r28
    c236:	21 e0       	ldi	r18, 0x01	; 1
    c238:	40 e0       	ldi	r20, 0x00	; 0
    c23a:	50 e0       	ldi	r21, 0x00	; 0
    c23c:	66 2d       	mov	r22, r6
    c23e:	8c 2f       	mov	r24, r28
    c240:	0e 94 c0 49 	call	0x9380	; 0x9380 <LBPrintInt>
	LBPrintInt((x+20)%32, (y+11)%30, game.score, true);
    c244:	40 91 ae 0d 	lds	r20, 0x0DAE
    c248:	50 91 af 0d 	lds	r21, 0x0DAF
    c24c:	21 e0       	ldi	r18, 0x01	; 1
    c24e:	65 2d       	mov	r22, r5
    c250:	8c 2f       	mov	r24, r28
    c252:	0e 94 c0 49 	call	0x9380	; 0x9380 <LBPrintInt>
	LBPrintInt((x+20)%32, (y+12)%30, game.time, true);
    c256:	40 91 b0 0d 	lds	r20, 0x0DB0
    c25a:	50 91 b1 0d 	lds	r21, 0x0DB1
    c25e:	21 e0       	ldi	r18, 0x01	; 1
    c260:	67 2d       	mov	r22, r7
    c262:	8c 2f       	mov	r24, r28
    c264:	0e 94 c0 49 	call	0x9380	; 0x9380 <LBPrintInt>
	LBPrintInt((x+20)%32, (y+13)%30, bonus, true);
    c268:	21 e0       	ldi	r18, 0x01	; 1
    c26a:	a7 01       	movw	r20, r14
    c26c:	61 2f       	mov	r22, r17
    c26e:	8c 2f       	mov	r24, r28
    c270:	0e 94 c0 49 	call	0x9380	; 0x9380 <LBPrintInt>
	
	LBWaitSeconds(2);
    c274:	82 e0       	ldi	r24, 0x02	; 2
    c276:	0e 94 35 4a 	call	0x946a	; 0x946a <LBWaitSeconds>
	
	// Tally Score
	counter = game.score;
    c27a:	c0 91 ae 0d 	lds	r28, 0x0DAE
    c27e:	d0 91 af 0d 	lds	r29, 0x0DAF

void tally_score(char* title, u16 bonus)
{
	u8 x = Screen.scrollX / 8;
	u8 y = Screen.scrollY / 8;
	u16 tally = 0;
    c282:	00 e0       	ldi	r16, 0x00	; 0
    c284:	10 e0       	ldi	r17, 0x00	; 0
	
	LBWaitSeconds(2);
	
	// Tally Score
	counter = game.score;
	while (counter > 0)
    c286:	0c 17       	cp	r16, r28
    c288:	1d 07       	cpc	r17, r29
    c28a:	f9 f0       	breq	.+62     	; 0xc2ca <tally_score+0x190>
	{
		WaitVsync(1);
    c28c:	81 e0       	ldi	r24, 0x01	; 1
    c28e:	90 e0       	ldi	r25, 0x00	; 0
    c290:	0e 94 45 48 	call	0x908a	; 0x908a <WaitVsync>
		SFX_HIT;
    c294:	41 e0       	ldi	r20, 0x01	; 1
    c296:	6f ef       	ldi	r22, 0xFF	; 255
    c298:	84 e0       	ldi	r24, 0x04	; 4
    c29a:	0e 94 64 3d 	call	0x7ac8	; 0x7ac8 <TriggerFx>
		tally += 1;
    c29e:	0f 5f       	subi	r16, 0xFF	; 255
    c2a0:	1f 4f       	sbci	r17, 0xFF	; 255
		counter -= 1;
    c2a2:	3e 01       	movw	r6, r28
    c2a4:	60 1a       	sub	r6, r16
    c2a6:	71 0a       	sbc	r7, r17
		LBPrintInt((x+20)%32, (y+9)%30, tally, true);
    c2a8:	21 e0       	ldi	r18, 0x01	; 1
    c2aa:	a8 01       	movw	r20, r16
    c2ac:	69 2d       	mov	r22, r9
    c2ae:	8c 2d       	mov	r24, r12
    c2b0:	0e 94 c0 49 	call	0x9380	; 0x9380 <LBPrintInt>
		LBPrintInt((x+20)%32, (y+11)%30, counter, true);
    c2b4:	21 e0       	ldi	r18, 0x01	; 1
    c2b6:	a3 01       	movw	r20, r6
    c2b8:	68 2d       	mov	r22, r8
    c2ba:	8c 2d       	mov	r24, r12
    c2bc:	0e 94 c0 49 	call	0x9380	; 0x9380 <LBPrintInt>
		WaitUs(TALLY_DELAY);
    c2c0:	8c ed       	ldi	r24, 0xDC	; 220
    c2c2:	95 e0       	ldi	r25, 0x05	; 5
    c2c4:	0e 94 bb 39 	call	0x7376	; 0x7376 <WaitUs>
    c2c8:	de cf       	rjmp	.-68     	; 0xc286 <tally_score+0x14c>
	}
	
	// Tally Time
	counter = game.time;
    c2ca:	00 91 b0 0d 	lds	r16, 0x0DB0
    c2ce:	10 91 b1 0d 	lds	r17, 0x0DB1
	while (counter > 0)
    c2d2:	01 15       	cp	r16, r1
    c2d4:	11 05       	cpc	r17, r1
    c2d6:	29 f1       	breq	.+74     	; 0xc322 <tally_score+0x1e8>
	{
		WaitVsync(1);
    c2d8:	81 e0       	ldi	r24, 0x01	; 1
    c2da:	90 e0       	ldi	r25, 0x00	; 0
    c2dc:	0e 94 45 48 	call	0x908a	; 0x908a <WaitVsync>
		SFX_HIT;
    c2e0:	41 e0       	ldi	r20, 0x01	; 1
    c2e2:	6f ef       	ldi	r22, 0xFF	; 255
    c2e4:	84 e0       	ldi	r24, 0x04	; 4
    c2e6:	0e 94 64 3d 	call	0x7ac8	; 0x7ac8 <TriggerFx>
		tally -= 1;
		if (tally == 0 || tally == 65535) tally = 0;
    c2ea:	ce 01       	movw	r24, r28
    c2ec:	02 97       	sbiw	r24, 0x02	; 2
    c2ee:	8e 3f       	cpi	r24, 0xFE	; 254
    c2f0:	9f 4f       	sbci	r25, 0xFF	; 255
    c2f2:	10 f4       	brcc	.+4      	; 0xc2f8 <tally_score+0x1be>
	counter = game.time;
	while (counter > 0)
	{
		WaitVsync(1);
		SFX_HIT;
		tally -= 1;
    c2f4:	21 97       	sbiw	r28, 0x01	; 1
    c2f6:	02 c0       	rjmp	.+4      	; 0xc2fc <tally_score+0x1c2>
		if (tally == 0 || tally == 65535) tally = 0;
    c2f8:	c0 e0       	ldi	r28, 0x00	; 0
    c2fa:	d0 e0       	ldi	r29, 0x00	; 0
		counter -= 1;
    c2fc:	01 50       	subi	r16, 0x01	; 1
    c2fe:	11 09       	sbc	r17, r1
		LBPrintInt((x+20)%32, (y+9)%30, tally, true);
    c300:	21 e0       	ldi	r18, 0x01	; 1
    c302:	ae 01       	movw	r20, r28
    c304:	69 2d       	mov	r22, r9
    c306:	8c 2d       	mov	r24, r12
    c308:	0e 94 c0 49 	call	0x9380	; 0x9380 <LBPrintInt>
		LBPrintInt((x+20)%32, (y+12)%30, counter, true);
    c30c:	21 e0       	ldi	r18, 0x01	; 1
    c30e:	a8 01       	movw	r20, r16
    c310:	6d 2d       	mov	r22, r13
    c312:	8c 2d       	mov	r24, r12
    c314:	0e 94 c0 49 	call	0x9380	; 0x9380 <LBPrintInt>
		WaitUs(TALLY_DELAY);
    c318:	8c ed       	ldi	r24, 0xDC	; 220
    c31a:	95 e0       	ldi	r25, 0x05	; 5
    c31c:	0e 94 bb 39 	call	0x7376	; 0x7376 <WaitUs>
    c320:	d8 cf       	rjmp	.-80     	; 0xc2d2 <tally_score+0x198>
    c322:	3e 01       	movw	r6, r28
		WaitUs(TALLY_DELAY);
	}
	
	// Tally Time
	counter = game.time;
	while (counter > 0)
    c324:	87 01       	movw	r16, r14
		WaitUs(TALLY_DELAY);
	}
	
	// Tally Level Bonus
	counter = bonus;
	while (counter > 0)
    c326:	01 15       	cp	r16, r1
    c328:	11 05       	cpc	r17, r1
    c32a:	e9 f0       	breq	.+58     	; 0xc366 <tally_score+0x22c>
	{
		WaitVsync(1);
    c32c:	81 e0       	ldi	r24, 0x01	; 1
    c32e:	90 e0       	ldi	r25, 0x00	; 0
    c330:	0e 94 45 48 	call	0x908a	; 0x908a <WaitVsync>
		SFX_HIT;
    c334:	41 e0       	ldi	r20, 0x01	; 1
    c336:	6f ef       	ldi	r22, 0xFF	; 255
    c338:	84 e0       	ldi	r24, 0x04	; 4
    c33a:	0e 94 64 3d 	call	0x7ac8	; 0x7ac8 <TriggerFx>
		tally += 1;
    c33e:	21 96       	adiw	r28, 0x01	; 1
		counter -= 1;
    c340:	01 50       	subi	r16, 0x01	; 1
    c342:	11 09       	sbc	r17, r1
		LBPrintInt((x+20)%32, (y+9)%30, tally, true);
    c344:	21 e0       	ldi	r18, 0x01	; 1
    c346:	ae 01       	movw	r20, r28
    c348:	69 2d       	mov	r22, r9
    c34a:	8c 2d       	mov	r24, r12
    c34c:	0e 94 c0 49 	call	0x9380	; 0x9380 <LBPrintInt>
		LBPrintInt((x+20)%32, (y+13)%30, counter, true);
    c350:	21 e0       	ldi	r18, 0x01	; 1
    c352:	a8 01       	movw	r20, r16
    c354:	6b 2d       	mov	r22, r11
    c356:	8c 2d       	mov	r24, r12
    c358:	0e 94 c0 49 	call	0x9380	; 0x9380 <LBPrintInt>
		WaitUs(TALLY_DELAY);
    c35c:	8c ed       	ldi	r24, 0xDC	; 220
    c35e:	95 e0       	ldi	r25, 0x05	; 5
    c360:	0e 94 bb 39 	call	0x7376	; 0x7376 <WaitUs>
    c364:	e0 cf       	rjmp	.-64     	; 0xc326 <tally_score+0x1ec>
    c366:	e6 0c       	add	r14, r6
    c368:	f7 1c       	adc	r15, r7
	}
	
	game.score = tally;
    c36a:	f0 92 af 0d 	sts	0x0DAF, r15
    c36e:	e0 92 ae 0d 	sts	0x0DAE, r14
	game.time = 0;
    c372:	10 92 b1 0d 	sts	0x0DB1, r1
    c376:	10 92 b0 0d 	sts	0x0DB0, r1
	LBWaitSeconds(2);
    c37a:	82 e0       	ldi	r24, 0x02	; 2
    c37c:	0e 94 35 4a 	call	0x946a	; 0x946a <LBWaitSeconds>
	render_camera_view();
}
    c380:	df 91       	pop	r29
    c382:	cf 91       	pop	r28
    c384:	1f 91       	pop	r17
    c386:	0f 91       	pop	r16
    c388:	ff 90       	pop	r15
    c38a:	ef 90       	pop	r14
    c38c:	df 90       	pop	r13
    c38e:	cf 90       	pop	r12
    c390:	bf 90       	pop	r11
    c392:	af 90       	pop	r10
    c394:	9f 90       	pop	r9
    c396:	8f 90       	pop	r8
    c398:	7f 90       	pop	r7
    c39a:	6f 90       	pop	r6
    c39c:	5f 90       	pop	r5
	}
	
	game.score = tally;
	game.time = 0;
	LBWaitSeconds(2);
	render_camera_view();
    c39e:	0c 94 b2 4d 	jmp	0x9b64	; 0x9b64 <render_camera_view>

0000c3a2 <handle_player_death>:
	}
}

void handle_player_death()
{
	game.lives--;
    c3a2:	80 91 b5 0d 	lds	r24, 0x0DB5
    c3a6:	81 50       	subi	r24, 0x01	; 1
    c3a8:	80 93 b5 0d 	sts	0x0DB5, r24
	clear_sprites(0, 6);
    c3ac:	66 e0       	ldi	r22, 0x06	; 6
    c3ae:	80 e0       	ldi	r24, 0x00	; 0
    c3b0:	0e 94 8e 5b 	call	0xb71c	; 0xb71c <clear_sprites>
	LBRotateSprites();
    c3b4:	0e 94 d4 4a 	call	0x95a8	; 0x95a8 <LBRotateSprites>
	if (game.lives == 0)
    c3b8:	80 91 b5 0d 	lds	r24, 0x0DB5
    c3bc:	81 11       	cpse	r24, r1
    c3be:	08 c0       	rjmp	.+16     	; 0xc3d0 <handle_player_death+0x2e>
	{
		tally_score((char*) strGameOver, 0);
    c3c0:	60 e0       	ldi	r22, 0x00	; 0
    c3c2:	70 e0       	ldi	r23, 0x00	; 0
    c3c4:	86 e1       	ldi	r24, 0x16	; 22
    c3c6:	9b e0       	ldi	r25, 0x0B	; 11
    c3c8:	0e 94 9d 60 	call	0xc13a	; 0xc13a <tally_score>
		exit_game();
    c3cc:	0c 94 91 5f 	jmp	0xbf22	; 0xbf22 <exit_game>
		return;
	}
	FadeOut(FRAMES_PER_FADE, true);
    c3d0:	61 e0       	ldi	r22, 0x01	; 1
    c3d2:	81 e0       	ldi	r24, 0x01	; 1
    c3d4:	0e 94 ad 48 	call	0x915a	; 0x915a <FadeOut>
	ClearVram();
    c3d8:	0e 94 85 39 	call	0x730a	; 0x730a <ClearVram>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    c3dc:	64 e1       	ldi	r22, 0x14	; 20
    c3de:	80 e0       	ldi	r24, 0x00	; 0
    c3e0:	0e 94 8e 5b 	call	0xb71c	; 0xb71c <clear_sprites>
	LBRotateSprites();
    c3e4:	0e 94 d4 4a 	call	0x95a8	; 0x95a8 <LBRotateSprites>
	FadeIn(FRAMES_PER_FADE, false);
    c3e8:	60 e0       	ldi	r22, 0x00	; 0
    c3ea:	81 e0       	ldi	r24, 0x01	; 1
    c3ec:	0e 94 a1 48 	call	0x9142	; 0x9142 <FadeIn>
	init_player_state();
    c3f0:	0e 94 41 4b 	call	0x9682	; 0x9682 <init_player_state>
	init_enemy_state();
    c3f4:	0e 94 2d 4b 	call	0x965a	; 0x965a <init_enemy_state>
	load_level(game.current_level_index, false);
    c3f8:	60 e0       	ldi	r22, 0x00	; 0
    c3fa:	80 91 b7 0d 	lds	r24, 0x0DB7
    c3fe:	0c 94 c0 5b 	jmp	0xb780	; 0xb780 <load_level>

0000c402 <update_player>:
}

void update_player()
{
    c402:	cf 92       	push	r12
    c404:	df 92       	push	r13
    c406:	ef 92       	push	r14
    c408:	ff 92       	push	r15
    c40a:	0f 93       	push	r16
    c40c:	1f 93       	push	r17
    c40e:	cf 93       	push	r28
    c410:	df 93       	push	r29
    c412:	1f 92       	push	r1
    c414:	cd b7       	in	r28, 0x3d	; 61
    c416:	de b7       	in	r29, 0x3e	; 62
	
	if (game.player.flags & EXPLODING)
    c418:	10 91 d4 0d 	lds	r17, 0x0DD4
    c41c:	14 ff       	sbrs	r17, 4
    c41e:	19 c0       	rjmp	.+50     	; 0xc452 <update_player+0x50>
	{
		if (map_explosion(&game.player.flags, &game.player.expl, PLAYER_SLOT, game.player.width, game.player.height))
    c420:	00 91 d8 0d 	lds	r16, 0x0DD8
    c424:	20 91 d7 0d 	lds	r18, 0x0DD7
    c428:	40 e0       	ldi	r20, 0x00	; 0
    c42a:	68 e4       	ldi	r22, 0x48	; 72
    c42c:	7e e0       	ldi	r23, 0x0E	; 14
    c42e:	84 ed       	ldi	r24, 0xD4	; 212
    c430:	9d e0       	ldi	r25, 0x0D	; 13
    c432:	0e 94 8e 56 	call	0xad1c	; 0xad1c <map_explosion>
    c436:	88 23       	and	r24, r24
    c438:	09 f4       	brne	.+2      	; 0xc43c <update_player+0x3a>
    c43a:	d8 c2       	rjmp	.+1456   	; 0xc9ec <update_player+0x5ea>
		{
			game.player.direction = D_RIGHT;
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.prone), 0);
		}
	}
}
    c43c:	0f 90       	pop	r0
    c43e:	df 91       	pop	r29
    c440:	cf 91       	pop	r28
    c442:	1f 91       	pop	r17
    c444:	0f 91       	pop	r16
    c446:	ff 90       	pop	r15
    c448:	ef 90       	pop	r14
    c44a:	df 90       	pop	r13
    c44c:	cf 90       	pop	r12
	
	if (game.player.flags & EXPLODING)
	{
		if (map_explosion(&game.player.flags, &game.player.expl, PLAYER_SLOT, game.player.width, game.player.height))
		{
			handle_player_death();
    c44e:	0c 94 d1 61 	jmp	0xc3a2	; 0xc3a2 <handle_player_death>
		}
	}
	else if (is_space())
    c452:	0e 94 13 4b 	call	0x9626	; 0x9626 <is_space>
    c456:	88 23       	and	r24, r24
    c458:	09 f4       	brne	.+2      	; 0xc45c <update_player+0x5a>
    c45a:	ab c0       	rjmp	.+342    	; 0xc5b2 <update_player+0x1b0>
	{
		game.player.shared.vy = 0;
    c45c:	10 92 c4 0d 	sts	0x0DC4, r1
    c460:	10 92 c5 0d 	sts	0x0DC5, r1
    c464:	10 92 c6 0d 	sts	0x0DC6, r1
    c468:	10 92 c7 0d 	sts	0x0DC7, r1
		game.player.shared.vx = SPACE_SHIP_SPEED;
    c46c:	8c e3       	ldi	r24, 0x3C	; 60
    c46e:	90 e0       	ldi	r25, 0x00	; 0
    c470:	90 93 d1 0d 	sts	0x0DD1, r25
    c474:	80 93 d0 0d 	sts	0x0DD0, r24
		
		if ((game.joypadState.held & BTN_DOWN) && (game.player.shared.y/8 + 1 < game.level_height))
    c478:	10 91 9e 0f 	lds	r17, 0x0F9E
    c47c:	15 ff       	sbrs	r17, 5
    c47e:	32 c0       	rjmp	.+100    	; 0xc4e4 <update_player+0xe2>
    c480:	20 e0       	ldi	r18, 0x00	; 0
    c482:	30 e0       	ldi	r19, 0x00	; 0
    c484:	40 e0       	ldi	r20, 0x00	; 0
    c486:	5e e3       	ldi	r21, 0x3E	; 62
    c488:	60 91 cc 0d 	lds	r22, 0x0DCC
    c48c:	70 91 cd 0d 	lds	r23, 0x0DCD
    c490:	80 91 ce 0d 	lds	r24, 0x0DCE
    c494:	90 91 cf 0d 	lds	r25, 0x0DCF
    c498:	0e 94 9a 68 	call	0xd134	; 0xd134 <__mulsf3>
    c49c:	20 e0       	ldi	r18, 0x00	; 0
    c49e:	30 e0       	ldi	r19, 0x00	; 0
    c4a0:	40 e8       	ldi	r20, 0x80	; 128
    c4a2:	5f e3       	ldi	r21, 0x3F	; 63
    c4a4:	0e 94 50 67 	call	0xcea0	; 0xcea0 <__addsf3>
    c4a8:	6b 01       	movw	r12, r22
    c4aa:	7c 01       	movw	r14, r24
    c4ac:	80 91 b9 0d 	lds	r24, 0x0DB9
    c4b0:	68 2f       	mov	r22, r24
    c4b2:	70 e0       	ldi	r23, 0x00	; 0
    c4b4:	80 e0       	ldi	r24, 0x00	; 0
    c4b6:	90 e0       	ldi	r25, 0x00	; 0
    c4b8:	0e 94 e6 67 	call	0xcfcc	; 0xcfcc <__floatsisf>
    c4bc:	9b 01       	movw	r18, r22
    c4be:	ac 01       	movw	r20, r24
    c4c0:	c7 01       	movw	r24, r14
    c4c2:	b6 01       	movw	r22, r12
    c4c4:	0e 94 b4 67 	call	0xcf68	; 0xcf68 <__cmpsf2>
    c4c8:	87 ff       	sbrs	r24, 7
    c4ca:	0c c0       	rjmp	.+24     	; 0xc4e4 <update_player+0xe2>
		{
			game.player.shared.vy = SPACE_SHIP_SPEED;
    c4cc:	80 e0       	ldi	r24, 0x00	; 0
    c4ce:	90 e0       	ldi	r25, 0x00	; 0
    c4d0:	a0 e7       	ldi	r26, 0x70	; 112
    c4d2:	b2 e4       	ldi	r27, 0x42	; 66
    c4d4:	80 93 c4 0d 	sts	0x0DC4, r24
    c4d8:	90 93 c5 0d 	sts	0x0DC5, r25
    c4dc:	a0 93 c6 0d 	sts	0x0DC6, r26
    c4e0:	b0 93 c7 0d 	sts	0x0DC7, r27
		}
		if ((game.joypadState.held & BTN_RIGHT) && (game.player.shared.x + 24 < game.camera_x + CAMERA_WIDTH*8))
    c4e4:	17 ff       	sbrs	r17, 7
    c4e6:	29 c0       	rjmp	.+82     	; 0xc53a <update_player+0x138>
    c4e8:	20 e0       	ldi	r18, 0x00	; 0
    c4ea:	30 e0       	ldi	r19, 0x00	; 0
    c4ec:	40 ec       	ldi	r20, 0xC0	; 192
    c4ee:	51 e4       	ldi	r21, 0x41	; 65
    c4f0:	60 91 c8 0d 	lds	r22, 0x0DC8
    c4f4:	70 91 c9 0d 	lds	r23, 0x0DC9
    c4f8:	80 91 ca 0d 	lds	r24, 0x0DCA
    c4fc:	90 91 cb 0d 	lds	r25, 0x0DCB
    c500:	0e 94 50 67 	call	0xcea0	; 0xcea0 <__addsf3>
    c504:	6b 01       	movw	r12, r22
    c506:	7c 01       	movw	r14, r24
    c508:	80 91 aa 0d 	lds	r24, 0x0DAA
    c50c:	90 91 ab 0d 	lds	r25, 0x0DAB
    c510:	80 52       	subi	r24, 0x20	; 32
    c512:	9f 4f       	sbci	r25, 0xFF	; 255
    c514:	bc 01       	movw	r22, r24
    c516:	80 e0       	ldi	r24, 0x00	; 0
    c518:	90 e0       	ldi	r25, 0x00	; 0
    c51a:	0e 94 e4 67 	call	0xcfc8	; 0xcfc8 <__floatunsisf>
    c51e:	9b 01       	movw	r18, r22
    c520:	ac 01       	movw	r20, r24
    c522:	c7 01       	movw	r24, r14
    c524:	b6 01       	movw	r22, r12
    c526:	0e 94 b4 67 	call	0xcf68	; 0xcf68 <__cmpsf2>
    c52a:	87 ff       	sbrs	r24, 7
    c52c:	06 c0       	rjmp	.+12     	; 0xc53a <update_player+0x138>
		{
			game.player.shared.vx = SPACE_SHIP_SPEED*2;
    c52e:	88 e7       	ldi	r24, 0x78	; 120
    c530:	90 e0       	ldi	r25, 0x00	; 0
    c532:	90 93 d1 0d 	sts	0x0DD1, r25
    c536:	80 93 d0 0d 	sts	0x0DD0, r24
		}
		if ((game.joypadState.held & BTN_LEFT) && (game.player.shared.x > game.camera_x))
    c53a:	16 ff       	sbrs	r17, 6
    c53c:	1a c0       	rjmp	.+52     	; 0xc572 <update_player+0x170>
    c53e:	60 91 aa 0d 	lds	r22, 0x0DAA
    c542:	70 91 ab 0d 	lds	r23, 0x0DAB
    c546:	80 e0       	ldi	r24, 0x00	; 0
    c548:	90 e0       	ldi	r25, 0x00	; 0
    c54a:	0e 94 e4 67 	call	0xcfc8	; 0xcfc8 <__floatunsisf>
    c54e:	9b 01       	movw	r18, r22
    c550:	ac 01       	movw	r20, r24
    c552:	60 91 c8 0d 	lds	r22, 0x0DC8
    c556:	70 91 c9 0d 	lds	r23, 0x0DC9
    c55a:	80 91 ca 0d 	lds	r24, 0x0DCA
    c55e:	90 91 cb 0d 	lds	r25, 0x0DCB
    c562:	0e 94 96 68 	call	0xd12c	; 0xd12c <__gesf2>
    c566:	18 16       	cp	r1, r24
    c568:	24 f4       	brge	.+8      	; 0xc572 <update_player+0x170>
		{
			game.player.shared.vx = 0;
    c56a:	10 92 d1 0d 	sts	0x0DD1, r1
    c56e:	10 92 d0 0d 	sts	0x0DD0, r1
		}
		if ((game.joypadState.held & BTN_UP) && (game.player.shared.y > 0))
    c572:	14 ff       	sbrs	r17, 4
    c574:	1b c0       	rjmp	.+54     	; 0xc5ac <update_player+0x1aa>
    c576:	20 e0       	ldi	r18, 0x00	; 0
    c578:	30 e0       	ldi	r19, 0x00	; 0
    c57a:	a9 01       	movw	r20, r18
    c57c:	60 91 cc 0d 	lds	r22, 0x0DCC
    c580:	70 91 cd 0d 	lds	r23, 0x0DCD
    c584:	80 91 ce 0d 	lds	r24, 0x0DCE
    c588:	90 91 cf 0d 	lds	r25, 0x0DCF
    c58c:	0e 94 96 68 	call	0xd12c	; 0xd12c <__gesf2>
    c590:	18 16       	cp	r1, r24
    c592:	64 f4       	brge	.+24     	; 0xc5ac <update_player+0x1aa>
		{
			game.player.shared.vy = -SPACE_SHIP_SPEED;
    c594:	80 e0       	ldi	r24, 0x00	; 0
    c596:	90 e0       	ldi	r25, 0x00	; 0
    c598:	a0 e7       	ldi	r26, 0x70	; 112
    c59a:	b2 ec       	ldi	r27, 0xC2	; 194
    c59c:	80 93 c4 0d 	sts	0x0DC4, r24
    c5a0:	90 93 c5 0d 	sts	0x0DC5, r25
    c5a4:	a0 93 c6 0d 	sts	0x0DC6, r26
    c5a8:	b0 93 c7 0d 	sts	0x0DC7, r27
		}
		LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.run), 0);
    c5ac:	80 e3       	ldi	r24, 0x30	; 48
    c5ae:	9e e0       	ldi	r25, 0x0E	; 14
    c5b0:	0d c2       	rjmp	.+1050   	; 0xc9cc <update_player+0x5ca>
	}
	else if (game.player.flags & (IDLE|RUNNING))
    c5b2:	81 2f       	mov	r24, r17
    c5b4:	8a 70       	andi	r24, 0x0A	; 10
    c5b6:	09 f4       	brne	.+2      	; 0xc5ba <update_player+0x1b8>
    c5b8:	ec c0       	rjmp	.+472    	; 0xc792 <update_player+0x390>
	{
		if (!on_solid_ground(&game.player.shared, game.player.width, game.player.height))
    c5ba:	40 91 d8 0d 	lds	r20, 0x0DD8
    c5be:	60 91 d7 0d 	lds	r22, 0x0DD7
    c5c2:	84 ec       	ldi	r24, 0xC4	; 196
    c5c4:	9d e0       	ldi	r25, 0x0D	; 13
    c5c6:	0e 94 c9 4f 	call	0x9f92	; 0x9f92 <on_solid_ground>
    c5ca:	81 11       	cpse	r24, r1
    c5cc:	07 c0       	rjmp	.+14     	; 0xc5dc <update_player+0x1da>
		{
			game.player.shared.gravity = GRAVITY;
    c5ce:	8f ef       	ldi	r24, 0xFF	; 255
    c5d0:	80 93 d2 0d 	sts	0x0DD2, r24
			game.player.flags = JUMPING;
    c5d4:	81 e0       	ldi	r24, 0x01	; 1
    c5d6:	80 93 d4 0d 	sts	0x0DD4, r24
    c5da:	de c1       	rjmp	.+956    	; 0xc998 <update_player+0x596>
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), extendedSprites[PLAYER_SLOT].flags);
		}
		else
		{
			if (game.joypadState.held & BTN_DOWN)
    c5dc:	10 91 9e 0f 	lds	r17, 0x0F9E
    c5e0:	15 ff       	sbrs	r17, 5
    c5e2:	46 c0       	rjmp	.+140    	; 0xc670 <update_player+0x26e>
			{
				game.player.shared.y += 16;
    c5e4:	20 e0       	ldi	r18, 0x00	; 0
    c5e6:	30 e0       	ldi	r19, 0x00	; 0
    c5e8:	40 e8       	ldi	r20, 0x80	; 128
    c5ea:	51 e4       	ldi	r21, 0x41	; 65
    c5ec:	60 91 cc 0d 	lds	r22, 0x0DCC
    c5f0:	70 91 cd 0d 	lds	r23, 0x0DCD
    c5f4:	80 91 ce 0d 	lds	r24, 0x0DCE
    c5f8:	90 91 cf 0d 	lds	r25, 0x0DCF
    c5fc:	0e 94 50 67 	call	0xcea0	; 0xcea0 <__addsf3>
    c600:	60 93 cc 0d 	sts	0x0DCC, r22
    c604:	70 93 cd 0d 	sts	0x0DCD, r23
    c608:	80 93 ce 0d 	sts	0x0DCE, r24
    c60c:	90 93 cf 0d 	sts	0x0DCF, r25
				if(game.player.direction == D_RIGHT)
    c610:	80 91 d6 0d 	lds	r24, 0x0DD6
    c614:	81 30       	cpi	r24, 0x01	; 1
    c616:	b1 f4       	brne	.+44     	; 0xc644 <update_player+0x242>
				{
					game.player.shared.x -= 8;
    c618:	20 e0       	ldi	r18, 0x00	; 0
    c61a:	30 e0       	ldi	r19, 0x00	; 0
    c61c:	40 e0       	ldi	r20, 0x00	; 0
    c61e:	51 e4       	ldi	r21, 0x41	; 65
    c620:	60 91 c8 0d 	lds	r22, 0x0DC8
    c624:	70 91 c9 0d 	lds	r23, 0x0DC9
    c628:	80 91 ca 0d 	lds	r24, 0x0DCA
    c62c:	90 91 cb 0d 	lds	r25, 0x0DCB
    c630:	0e 94 4f 67 	call	0xce9e	; 0xce9e <__subsf3>
    c634:	60 93 c8 0d 	sts	0x0DC8, r22
    c638:	70 93 c9 0d 	sts	0x0DC9, r23
    c63c:	80 93 ca 0d 	sts	0x0DCA, r24
    c640:	90 93 cb 0d 	sts	0x0DCB, r25
				}
				game.player.shared.vx = 0;
    c644:	10 92 d1 0d 	sts	0x0DD1, r1
    c648:	10 92 d0 0d 	sts	0x0DD0, r1
				game.player.flags = PRONE;
    c64c:	84 e0       	ldi	r24, 0x04	; 4
    c64e:	80 93 d4 0d 	sts	0x0DD4, r24
				game.player.width = 3;
    c652:	83 e0       	ldi	r24, 0x03	; 3
    c654:	80 93 d7 0d 	sts	0x0DD7, r24
				game.player.height = 1;
    c658:	81 e0       	ldi	r24, 0x01	; 1
    c65a:	80 93 d8 0d 	sts	0x0DD8, r24
				clear_sprites(3, 3);
    c65e:	63 e0       	ldi	r22, 0x03	; 3
    c660:	83 e0       	ldi	r24, 0x03	; 3
    c662:	0e 94 8e 5b 	call	0xb71c	; 0xb71c <clear_sprites>
				LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.prone), extendedSprites[PLAYER_SLOT].flags);
    c666:	40 91 ae 0f 	lds	r20, 0x0FAE
    c66a:	80 e4       	ldi	r24, 0x40	; 64
    c66c:	9e e0       	ldi	r25, 0x0E	; 14
    c66e:	6e c0       	rjmp	.+220    	; 0xc74c <update_player+0x34a>
			}
			else if ((game.joypadState.held & BTN_RIGHT) && (game.player.shared.x/8 + 2 < game.level_width))
    c670:	17 ff       	sbrs	r17, 7
    c672:	38 c0       	rjmp	.+112    	; 0xc6e4 <update_player+0x2e2>
    c674:	20 e0       	ldi	r18, 0x00	; 0
    c676:	30 e0       	ldi	r19, 0x00	; 0
    c678:	40 e0       	ldi	r20, 0x00	; 0
    c67a:	5e e3       	ldi	r21, 0x3E	; 62
    c67c:	60 91 c8 0d 	lds	r22, 0x0DC8
    c680:	70 91 c9 0d 	lds	r23, 0x0DC9
    c684:	80 91 ca 0d 	lds	r24, 0x0DCA
    c688:	90 91 cb 0d 	lds	r25, 0x0DCB
    c68c:	0e 94 9a 68 	call	0xd134	; 0xd134 <__mulsf3>
    c690:	20 e0       	ldi	r18, 0x00	; 0
    c692:	30 e0       	ldi	r19, 0x00	; 0
    c694:	40 e0       	ldi	r20, 0x00	; 0
    c696:	50 e4       	ldi	r21, 0x40	; 64
    c698:	0e 94 50 67 	call	0xcea0	; 0xcea0 <__addsf3>
    c69c:	6b 01       	movw	r12, r22
    c69e:	7c 01       	movw	r14, r24
    c6a0:	80 91 b8 0d 	lds	r24, 0x0DB8
    c6a4:	68 2f       	mov	r22, r24
    c6a6:	70 e0       	ldi	r23, 0x00	; 0
    c6a8:	80 e0       	ldi	r24, 0x00	; 0
    c6aa:	90 e0       	ldi	r25, 0x00	; 0
    c6ac:	0e 94 e6 67 	call	0xcfcc	; 0xcfcc <__floatsisf>
    c6b0:	9b 01       	movw	r18, r22
    c6b2:	ac 01       	movw	r20, r24
    c6b4:	c7 01       	movw	r24, r14
    c6b6:	b6 01       	movw	r22, r12
    c6b8:	0e 94 b4 67 	call	0xcf68	; 0xcf68 <__cmpsf2>
    c6bc:	87 ff       	sbrs	r24, 7
    c6be:	12 c0       	rjmp	.+36     	; 0xc6e4 <update_player+0x2e2>
			{
				game.player.shared.vx = RUN_SPEED;
    c6c0:	8c e3       	ldi	r24, 0x3C	; 60
    c6c2:	90 e0       	ldi	r25, 0x00	; 0
    c6c4:	90 93 d1 0d 	sts	0x0DD1, r25
    c6c8:	80 93 d0 0d 	sts	0x0DD0, r24
				game.player.flags = RUNNING;
    c6cc:	82 e0       	ldi	r24, 0x02	; 2
    c6ce:	80 93 d4 0d 	sts	0x0DD4, r24
				game.player.direction = D_RIGHT;
    c6d2:	81 e0       	ldi	r24, 0x01	; 1
    c6d4:	80 93 d6 0d 	sts	0x0DD6, r24
				LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.run), 0);
    c6d8:	80 e3       	ldi	r24, 0x30	; 48
    c6da:	9e e0       	ldi	r25, 0x0E	; 14
    c6dc:	0e 94 e2 48 	call	0x91c4	; 0x91c4 <LBGetNextFrame>
    c6e0:	40 e0       	ldi	r20, 0x00	; 0
    c6e2:	38 c0       	rjmp	.+112    	; 0xc754 <update_player+0x352>
			}
			else if ((game.joypadState.held & BTN_LEFT) && (game.player.shared.x > game.camera_x))
    c6e4:	16 ff       	sbrs	r17, 6
    c6e6:	27 c0       	rjmp	.+78     	; 0xc736 <update_player+0x334>
    c6e8:	60 91 aa 0d 	lds	r22, 0x0DAA
    c6ec:	70 91 ab 0d 	lds	r23, 0x0DAB
    c6f0:	80 e0       	ldi	r24, 0x00	; 0
    c6f2:	90 e0       	ldi	r25, 0x00	; 0
    c6f4:	0e 94 e4 67 	call	0xcfc8	; 0xcfc8 <__floatunsisf>
    c6f8:	9b 01       	movw	r18, r22
    c6fa:	ac 01       	movw	r20, r24
    c6fc:	60 91 c8 0d 	lds	r22, 0x0DC8
    c700:	70 91 c9 0d 	lds	r23, 0x0DC9
    c704:	80 91 ca 0d 	lds	r24, 0x0DCA
    c708:	90 91 cb 0d 	lds	r25, 0x0DCB
    c70c:	0e 94 96 68 	call	0xd12c	; 0xd12c <__gesf2>
    c710:	18 16       	cp	r1, r24
    c712:	8c f4       	brge	.+34     	; 0xc736 <update_player+0x334>
			{
				game.player.shared.vx = -RUN_SPEED;
    c714:	84 ec       	ldi	r24, 0xC4	; 196
    c716:	9f ef       	ldi	r25, 0xFF	; 255
    c718:	90 93 d1 0d 	sts	0x0DD1, r25
    c71c:	80 93 d0 0d 	sts	0x0DD0, r24
				game.player.flags = RUNNING;
    c720:	82 e0       	ldi	r24, 0x02	; 2
    c722:	80 93 d4 0d 	sts	0x0DD4, r24
				game.player.direction = D_LEFT;
    c726:	10 92 d6 0d 	sts	0x0DD6, r1
				LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.run), SPRITE_FLIP_X);
    c72a:	80 e3       	ldi	r24, 0x30	; 48
    c72c:	9e e0       	ldi	r25, 0x0E	; 14
    c72e:	0e 94 e2 48 	call	0x91c4	; 0x91c4 <LBGetNextFrame>
    c732:	41 e0       	ldi	r20, 0x01	; 1
    c734:	0f c0       	rjmp	.+30     	; 0xc754 <update_player+0x352>
			}
			else
			{
				game.player.flags = IDLE;
    c736:	88 e0       	ldi	r24, 0x08	; 8
    c738:	80 93 d4 0d 	sts	0x0DD4, r24
				game.player.shared.vx = 0;
    c73c:	10 92 d1 0d 	sts	0x0DD1, r1
    c740:	10 92 d0 0d 	sts	0x0DD0, r1
				LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.idle), extendedSprites[PLAYER_SLOT].flags);
    c744:	40 91 ae 0f 	lds	r20, 0x0FAE
    c748:	88 e2       	ldi	r24, 0x28	; 40
    c74a:	9e e0       	ldi	r25, 0x0E	; 14
    c74c:	49 83       	std	Y+1, r20	; 0x01
    c74e:	0e 94 e2 48 	call	0x91c4	; 0x91c4 <LBGetNextFrame>
    c752:	49 81       	ldd	r20, Y+1	; 0x01
    c754:	bc 01       	movw	r22, r24
    c756:	80 e0       	ldi	r24, 0x00	; 0
    c758:	0e 94 44 4a 	call	0x9488	; 0x9488 <LBMapSprite>
			}
			if (game.joypadState.pressed & BTN_B && !(game.player.flags & PRONE))
    c75c:	80 91 9a 0f 	lds	r24, 0x0F9A
    c760:	80 ff       	sbrs	r24, 0
    c762:	44 c1       	rjmp	.+648    	; 0xc9ec <update_player+0x5ea>
    c764:	80 91 d4 0d 	lds	r24, 0x0DD4
    c768:	82 fd       	sbrc	r24, 2
    c76a:	40 c1       	rjmp	.+640    	; 0xc9ec <update_player+0x5ea>
			{
				game.player.shared.vy = -JUMP_SPEED;
    c76c:	80 e0       	ldi	r24, 0x00	; 0
    c76e:	90 e0       	ldi	r25, 0x00	; 0
    c770:	a6 e1       	ldi	r26, 0x16	; 22
    c772:	b3 ec       	ldi	r27, 0xC3	; 195
    c774:	80 93 c4 0d 	sts	0x0DC4, r24
    c778:	90 93 c5 0d 	sts	0x0DC5, r25
    c77c:	a0 93 c6 0d 	sts	0x0DC6, r26
    c780:	b0 93 c7 0d 	sts	0x0DC7, r27
				game.player.shared.gravity = GRAVITY;
    c784:	8f ef       	ldi	r24, 0xFF	; 255
    c786:	80 93 d2 0d 	sts	0x0DD2, r24
				game.player.flags = JUMPING;
    c78a:	81 e0       	ldi	r24, 0x01	; 1
    c78c:	80 93 d4 0d 	sts	0x0DD4, r24
    c790:	fd c0       	rjmp	.+506    	; 0xc98c <update_player+0x58a>
				game.player.height = 3;
				LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), extendedSprites[PLAYER_SLOT].flags);
			}
		}
	}
	else if (game.player.flags & JUMPING)
    c792:	10 ff       	sbrs	r17, 0
    c794:	77 c0       	rjmp	.+238    	; 0xc884 <update_player+0x482>
	{
		if ((game.joypadState.held & BTN_RIGHT) && (game.player.shared.x/8 + 2 < game.level_width))
    c796:	10 91 9e 0f 	lds	r17, 0x0F9E
    c79a:	17 ff       	sbrs	r17, 7
    c79c:	35 c0       	rjmp	.+106    	; 0xc808 <update_player+0x406>
    c79e:	20 e0       	ldi	r18, 0x00	; 0
    c7a0:	30 e0       	ldi	r19, 0x00	; 0
    c7a2:	40 e0       	ldi	r20, 0x00	; 0
    c7a4:	5e e3       	ldi	r21, 0x3E	; 62
    c7a6:	60 91 c8 0d 	lds	r22, 0x0DC8
    c7aa:	70 91 c9 0d 	lds	r23, 0x0DC9
    c7ae:	80 91 ca 0d 	lds	r24, 0x0DCA
    c7b2:	90 91 cb 0d 	lds	r25, 0x0DCB
    c7b6:	0e 94 9a 68 	call	0xd134	; 0xd134 <__mulsf3>
    c7ba:	20 e0       	ldi	r18, 0x00	; 0
    c7bc:	30 e0       	ldi	r19, 0x00	; 0
    c7be:	40 e0       	ldi	r20, 0x00	; 0
    c7c0:	50 e4       	ldi	r21, 0x40	; 64
    c7c2:	0e 94 50 67 	call	0xcea0	; 0xcea0 <__addsf3>
    c7c6:	6b 01       	movw	r12, r22
    c7c8:	7c 01       	movw	r14, r24
    c7ca:	80 91 b8 0d 	lds	r24, 0x0DB8
    c7ce:	68 2f       	mov	r22, r24
    c7d0:	70 e0       	ldi	r23, 0x00	; 0
    c7d2:	80 e0       	ldi	r24, 0x00	; 0
    c7d4:	90 e0       	ldi	r25, 0x00	; 0
    c7d6:	0e 94 e6 67 	call	0xcfcc	; 0xcfcc <__floatsisf>
    c7da:	9b 01       	movw	r18, r22
    c7dc:	ac 01       	movw	r20, r24
    c7de:	c7 01       	movw	r24, r14
    c7e0:	b6 01       	movw	r22, r12
    c7e2:	0e 94 b4 67 	call	0xcf68	; 0xcf68 <__cmpsf2>
    c7e6:	87 ff       	sbrs	r24, 7
    c7e8:	0f c0       	rjmp	.+30     	; 0xc808 <update_player+0x406>
		{
			game.player.shared.vx = RUN_SPEED;
    c7ea:	8c e3       	ldi	r24, 0x3C	; 60
    c7ec:	90 e0       	ldi	r25, 0x00	; 0
    c7ee:	90 93 d1 0d 	sts	0x0DD1, r25
    c7f2:	80 93 d0 0d 	sts	0x0DD0, r24
			game.player.direction = D_RIGHT;
    c7f6:	81 e0       	ldi	r24, 0x01	; 1
    c7f8:	80 93 d6 0d 	sts	0x0DD6, r24
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), 0);
    c7fc:	88 e3       	ldi	r24, 0x38	; 56
    c7fe:	9e e0       	ldi	r25, 0x0E	; 14
    c800:	0e 94 e2 48 	call	0x91c4	; 0x91c4 <LBGetNextFrame>
    c804:	40 e0       	ldi	r20, 0x00	; 0
    c806:	32 c0       	rjmp	.+100    	; 0xc86c <update_player+0x46a>
		}
		else if ((game.joypadState.held & BTN_LEFT) && (game.player.shared.x > game.camera_x))
    c808:	16 ff       	sbrs	r17, 6
    c80a:	24 c0       	rjmp	.+72     	; 0xc854 <update_player+0x452>
    c80c:	60 91 aa 0d 	lds	r22, 0x0DAA
    c810:	70 91 ab 0d 	lds	r23, 0x0DAB
    c814:	80 e0       	ldi	r24, 0x00	; 0
    c816:	90 e0       	ldi	r25, 0x00	; 0
    c818:	0e 94 e4 67 	call	0xcfc8	; 0xcfc8 <__floatunsisf>
    c81c:	9b 01       	movw	r18, r22
    c81e:	ac 01       	movw	r20, r24
    c820:	60 91 c8 0d 	lds	r22, 0x0DC8
    c824:	70 91 c9 0d 	lds	r23, 0x0DC9
    c828:	80 91 ca 0d 	lds	r24, 0x0DCA
    c82c:	90 91 cb 0d 	lds	r25, 0x0DCB
    c830:	0e 94 96 68 	call	0xd12c	; 0xd12c <__gesf2>
    c834:	18 16       	cp	r1, r24
    c836:	74 f4       	brge	.+28     	; 0xc854 <update_player+0x452>
		{
			game.player.shared.vx = -RUN_SPEED;
    c838:	84 ec       	ldi	r24, 0xC4	; 196
    c83a:	9f ef       	ldi	r25, 0xFF	; 255
    c83c:	90 93 d1 0d 	sts	0x0DD1, r25
    c840:	80 93 d0 0d 	sts	0x0DD0, r24
			game.player.direction = D_LEFT;
    c844:	10 92 d6 0d 	sts	0x0DD6, r1
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), SPRITE_FLIP_X);
    c848:	88 e3       	ldi	r24, 0x38	; 56
    c84a:	9e e0       	ldi	r25, 0x0E	; 14
    c84c:	0e 94 e2 48 	call	0x91c4	; 0x91c4 <LBGetNextFrame>
    c850:	41 e0       	ldi	r20, 0x01	; 1
    c852:	0c c0       	rjmp	.+24     	; 0xc86c <update_player+0x46a>
		}
		else
		{
			game.player.shared.vx = 0;
    c854:	10 92 d1 0d 	sts	0x0DD1, r1
    c858:	10 92 d0 0d 	sts	0x0DD0, r1
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), extendedSprites[PLAYER_SLOT].flags);
    c85c:	40 91 ae 0f 	lds	r20, 0x0FAE
    c860:	88 e3       	ldi	r24, 0x38	; 56
    c862:	9e e0       	ldi	r25, 0x0E	; 14
    c864:	49 83       	std	Y+1, r20	; 0x01
    c866:	0e 94 e2 48 	call	0x91c4	; 0x91c4 <LBGetNextFrame>
    c86a:	49 81       	ldd	r20, Y+1	; 0x01
    c86c:	bc 01       	movw	r22, r24
    c86e:	80 e0       	ldi	r24, 0x00	; 0
    c870:	0e 94 44 4a 	call	0x9488	; 0x9488 <LBMapSprite>
		}
		
		if (game.player.shared.gravity == 0)
    c874:	80 91 d2 0d 	lds	r24, 0x0DD2
    c878:	81 11       	cpse	r24, r1
    c87a:	b8 c0       	rjmp	.+368    	; 0xc9ec <update_player+0x5ea>
		{
			game.player.flags = IDLE;
    c87c:	88 e0       	ldi	r24, 0x08	; 8
    c87e:	80 93 d4 0d 	sts	0x0DD4, r24
    c882:	b4 c0       	rjmp	.+360    	; 0xc9ec <update_player+0x5ea>
		}
	}
	else if (game.player.flags & PRONE)
    c884:	12 ff       	sbrs	r17, 2
    c886:	b2 c0       	rjmp	.+356    	; 0xc9ec <update_player+0x5ea>
	{
		if (game.joypadState.pressed & BTN_UP)
    c888:	80 91 9a 0f 	lds	r24, 0x0F9A
    c88c:	84 ff       	sbrs	r24, 4
    c88e:	3a c0       	rjmp	.+116    	; 0xc904 <update_player+0x502>
		{
			game.player.flags = IDLE;	
    c890:	88 e0       	ldi	r24, 0x08	; 8
    c892:	80 93 d4 0d 	sts	0x0DD4, r24
			game.player.shared.y -= 16;
    c896:	20 e0       	ldi	r18, 0x00	; 0
    c898:	30 e0       	ldi	r19, 0x00	; 0
    c89a:	40 e8       	ldi	r20, 0x80	; 128
    c89c:	51 e4       	ldi	r21, 0x41	; 65
    c89e:	60 91 cc 0d 	lds	r22, 0x0DCC
    c8a2:	70 91 cd 0d 	lds	r23, 0x0DCD
    c8a6:	80 91 ce 0d 	lds	r24, 0x0DCE
    c8aa:	90 91 cf 0d 	lds	r25, 0x0DCF
    c8ae:	0e 94 4f 67 	call	0xce9e	; 0xce9e <__subsf3>
    c8b2:	60 93 cc 0d 	sts	0x0DCC, r22
    c8b6:	70 93 cd 0d 	sts	0x0DCD, r23
    c8ba:	80 93 ce 0d 	sts	0x0DCE, r24
    c8be:	90 93 cf 0d 	sts	0x0DCF, r25
			if(game.player.direction == D_RIGHT)
    c8c2:	80 91 d6 0d 	lds	r24, 0x0DD6
    c8c6:	81 30       	cpi	r24, 0x01	; 1
    c8c8:	b1 f4       	brne	.+44     	; 0xc8f6 <update_player+0x4f4>
			{
				game.player.shared.x += 8;
    c8ca:	20 e0       	ldi	r18, 0x00	; 0
    c8cc:	30 e0       	ldi	r19, 0x00	; 0
    c8ce:	40 e0       	ldi	r20, 0x00	; 0
    c8d0:	51 e4       	ldi	r21, 0x41	; 65
    c8d2:	60 91 c8 0d 	lds	r22, 0x0DC8
    c8d6:	70 91 c9 0d 	lds	r23, 0x0DC9
    c8da:	80 91 ca 0d 	lds	r24, 0x0DCA
    c8de:	90 91 cb 0d 	lds	r25, 0x0DCB
    c8e2:	0e 94 50 67 	call	0xcea0	; 0xcea0 <__addsf3>
    c8e6:	60 93 c8 0d 	sts	0x0DC8, r22
    c8ea:	70 93 c9 0d 	sts	0x0DC9, r23
    c8ee:	80 93 ca 0d 	sts	0x0DCA, r24
    c8f2:	90 93 cb 0d 	sts	0x0DCB, r25
			}
			game.player.width = 2;
    c8f6:	82 e0       	ldi	r24, 0x02	; 2
    c8f8:	80 93 d7 0d 	sts	0x0DD7, r24
			game.player.height = 3;
    c8fc:	83 e0       	ldi	r24, 0x03	; 3
    c8fe:	80 93 d8 0d 	sts	0x0DD8, r24
    c902:	74 c0       	rjmp	.+232    	; 0xc9ec <update_player+0x5ea>
		}
		else if (game.joypadState.pressed & BTN_B)
    c904:	80 ff       	sbrs	r24, 0
    c906:	51 c0       	rjmp	.+162    	; 0xc9aa <update_player+0x5a8>
		{
			game.player.flags = JUMPING;
    c908:	81 e0       	ldi	r24, 0x01	; 1
    c90a:	80 93 d4 0d 	sts	0x0DD4, r24
			game.player.shared.y -= 16;
    c90e:	20 e0       	ldi	r18, 0x00	; 0
    c910:	30 e0       	ldi	r19, 0x00	; 0
    c912:	40 e8       	ldi	r20, 0x80	; 128
    c914:	51 e4       	ldi	r21, 0x41	; 65
    c916:	60 91 cc 0d 	lds	r22, 0x0DCC
    c91a:	70 91 cd 0d 	lds	r23, 0x0DCD
    c91e:	80 91 ce 0d 	lds	r24, 0x0DCE
    c922:	90 91 cf 0d 	lds	r25, 0x0DCF
    c926:	0e 94 4f 67 	call	0xce9e	; 0xce9e <__subsf3>
    c92a:	60 93 cc 0d 	sts	0x0DCC, r22
    c92e:	70 93 cd 0d 	sts	0x0DCD, r23
    c932:	80 93 ce 0d 	sts	0x0DCE, r24
    c936:	90 93 cf 0d 	sts	0x0DCF, r25
			if(game.player.direction == D_RIGHT)
    c93a:	80 91 d6 0d 	lds	r24, 0x0DD6
    c93e:	81 30       	cpi	r24, 0x01	; 1
    c940:	b1 f4       	brne	.+44     	; 0xc96e <update_player+0x56c>
			{
				game.player.shared.x += 8;
    c942:	20 e0       	ldi	r18, 0x00	; 0
    c944:	30 e0       	ldi	r19, 0x00	; 0
    c946:	40 e0       	ldi	r20, 0x00	; 0
    c948:	51 e4       	ldi	r21, 0x41	; 65
    c94a:	60 91 c8 0d 	lds	r22, 0x0DC8
    c94e:	70 91 c9 0d 	lds	r23, 0x0DC9
    c952:	80 91 ca 0d 	lds	r24, 0x0DCA
    c956:	90 91 cb 0d 	lds	r25, 0x0DCB
    c95a:	0e 94 50 67 	call	0xcea0	; 0xcea0 <__addsf3>
    c95e:	60 93 c8 0d 	sts	0x0DC8, r22
    c962:	70 93 c9 0d 	sts	0x0DC9, r23
    c966:	80 93 ca 0d 	sts	0x0DCA, r24
    c96a:	90 93 cb 0d 	sts	0x0DCB, r25
			}
			game.player.shared.vy = -JUMP_SPEED;
    c96e:	80 e0       	ldi	r24, 0x00	; 0
    c970:	90 e0       	ldi	r25, 0x00	; 0
    c972:	a6 e1       	ldi	r26, 0x16	; 22
    c974:	b3 ec       	ldi	r27, 0xC3	; 195
    c976:	80 93 c4 0d 	sts	0x0DC4, r24
    c97a:	90 93 c5 0d 	sts	0x0DC5, r25
    c97e:	a0 93 c6 0d 	sts	0x0DC6, r26
    c982:	b0 93 c7 0d 	sts	0x0DC7, r27
			game.player.shared.gravity = GRAVITY;
    c986:	8f ef       	ldi	r24, 0xFF	; 255
    c988:	80 93 d2 0d 	sts	0x0DD2, r24
			game.player.width = 2;
    c98c:	82 e0       	ldi	r24, 0x02	; 2
    c98e:	80 93 d7 0d 	sts	0x0DD7, r24
			game.player.height = 3;
    c992:	83 e0       	ldi	r24, 0x03	; 3
    c994:	80 93 d8 0d 	sts	0x0DD8, r24
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), extendedSprites[PLAYER_SLOT].flags);
    c998:	40 91 ae 0f 	lds	r20, 0x0FAE
    c99c:	88 e3       	ldi	r24, 0x38	; 56
    c99e:	9e e0       	ldi	r25, 0x0E	; 14
    c9a0:	49 83       	std	Y+1, r20	; 0x01
    c9a2:	0e 94 e2 48 	call	0x91c4	; 0x91c4 <LBGetNextFrame>
    c9a6:	49 81       	ldd	r20, Y+1	; 0x01
    c9a8:	14 c0       	rjmp	.+40     	; 0xc9d2 <update_player+0x5d0>
		}
		else if (game.joypadState.pressed & BTN_LEFT)
    c9aa:	86 ff       	sbrs	r24, 6
    c9ac:	08 c0       	rjmp	.+16     	; 0xc9be <update_player+0x5bc>
		{
			game.player.direction = D_LEFT;
    c9ae:	10 92 d6 0d 	sts	0x0DD6, r1
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.prone), SPRITE_FLIP_X);
    c9b2:	80 e4       	ldi	r24, 0x40	; 64
    c9b4:	9e e0       	ldi	r25, 0x0E	; 14
    c9b6:	0e 94 e2 48 	call	0x91c4	; 0x91c4 <LBGetNextFrame>
    c9ba:	41 e0       	ldi	r20, 0x01	; 1
    c9bc:	0a c0       	rjmp	.+20     	; 0xc9d2 <update_player+0x5d0>
		}
		else if (game.joypadState.pressed & BTN_RIGHT)
    c9be:	87 ff       	sbrs	r24, 7
    c9c0:	15 c0       	rjmp	.+42     	; 0xc9ec <update_player+0x5ea>
		{
			game.player.direction = D_RIGHT;
    c9c2:	81 e0       	ldi	r24, 0x01	; 1
    c9c4:	80 93 d6 0d 	sts	0x0DD6, r24
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.prone), 0);
    c9c8:	80 e4       	ldi	r24, 0x40	; 64
    c9ca:	9e e0       	ldi	r25, 0x0E	; 14
    c9cc:	0e 94 e2 48 	call	0x91c4	; 0x91c4 <LBGetNextFrame>
    c9d0:	40 e0       	ldi	r20, 0x00	; 0
    c9d2:	bc 01       	movw	r22, r24
    c9d4:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
}
    c9d6:	0f 90       	pop	r0
    c9d8:	df 91       	pop	r29
    c9da:	cf 91       	pop	r28
    c9dc:	1f 91       	pop	r17
    c9de:	0f 91       	pop	r16
    c9e0:	ff 90       	pop	r15
    c9e2:	ef 90       	pop	r14
    c9e4:	df 90       	pop	r13
    c9e6:	cf 90       	pop	r12
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.prone), SPRITE_FLIP_X);
		}
		else if (game.joypadState.pressed & BTN_RIGHT)
		{
			game.player.direction = D_RIGHT;
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.prone), 0);
    c9e8:	0c 94 44 4a 	jmp	0x9488	; 0x9488 <LBMapSprite>
		}
	}
}
    c9ec:	0f 90       	pop	r0
    c9ee:	df 91       	pop	r29
    c9f0:	cf 91       	pop	r28
    c9f2:	1f 91       	pop	r17
    c9f4:	0f 91       	pop	r16
    c9f6:	ff 90       	pop	r15
    c9f8:	ef 90       	pop	r14
    c9fa:	df 90       	pop	r13
    c9fc:	cf 90       	pop	r12
    c9fe:	08 95       	ret

0000ca00 <update_level>:
		}
	}
}

void update_level()
{
    ca00:	cf 92       	push	r12
    ca02:	df 92       	push	r13
    ca04:	ef 92       	push	r14
    ca06:	ff 92       	push	r15
    ca08:	0f 93       	push	r16
    ca0a:	1f 93       	push	r17
    ca0c:	cf 93       	push	r28
    ca0e:	df 93       	push	r29
	u8 ship_x = game.player.shared.x - game.camera_x;
    ca10:	00 91 aa 0d 	lds	r16, 0x0DAA
    ca14:	10 91 ab 0d 	lds	r17, 0x0DAB
    ca18:	b8 01       	movw	r22, r16
    ca1a:	80 e0       	ldi	r24, 0x00	; 0
    ca1c:	90 e0       	ldi	r25, 0x00	; 0
    ca1e:	0e 94 e4 67 	call	0xcfc8	; 0xcfc8 <__floatunsisf>
    ca22:	9b 01       	movw	r18, r22
    ca24:	ac 01       	movw	r20, r24
    ca26:	60 91 c8 0d 	lds	r22, 0x0DC8
    ca2a:	70 91 c9 0d 	lds	r23, 0x0DC9
    ca2e:	80 91 ca 0d 	lds	r24, 0x0DCA
    ca32:	90 91 cb 0d 	lds	r25, 0x0DCB
    ca36:	0e 94 4f 67 	call	0xce9e	; 0xce9e <__subsf3>
    ca3a:	6b 01       	movw	r12, r22
    ca3c:	7c 01       	movw	r14, r24
	u8 ship_y = 0;
	char ship_increment = 3;
	
	game.frame_counter++;
    ca3e:	80 91 bc 0d 	lds	r24, 0x0DBC
    ca42:	8f 5f       	subi	r24, 0xFF	; 255
	if (game.frame_counter == 60)
    ca44:	8c 33       	cpi	r24, 0x3C	; 60
    ca46:	19 f0       	breq	.+6      	; 0xca4e <update_level+0x4e>
{
	u8 ship_x = game.player.shared.x - game.camera_x;
	u8 ship_y = 0;
	char ship_increment = 3;
	
	game.frame_counter++;
    ca48:	80 93 bc 0d 	sts	0x0DBC, r24
    ca4c:	0f c0       	rjmp	.+30     	; 0xca6c <update_level+0x6c>
	if (game.frame_counter == 60)
	{
		game.frame_counter = 0;
    ca4e:	10 92 bc 0d 	sts	0x0DBC, r1
		if (game.time != 65535) game.time++;
    ca52:	80 91 b0 0d 	lds	r24, 0x0DB0
    ca56:	90 91 b1 0d 	lds	r25, 0x0DB1
    ca5a:	8f 3f       	cpi	r24, 0xFF	; 255
    ca5c:	2f ef       	ldi	r18, 0xFF	; 255
    ca5e:	92 07       	cpc	r25, r18
    ca60:	29 f0       	breq	.+10     	; 0xca6c <update_level+0x6c>
    ca62:	01 96       	adiw	r24, 0x01	; 1
    ca64:	90 93 b1 0d 	sts	0x0DB1, r25
    ca68:	80 93 b0 0d 	sts	0x0DB0, r24
	}
	
	if (is_space() && game.camera_x/8 + CAMERA_WIDTH < game.level_width)
    ca6c:	0e 94 13 4b 	call	0x9626	; 0x9626 <is_space>
    ca70:	93 e0       	ldi	r25, 0x03	; 3
    ca72:	16 95       	lsr	r17
    ca74:	07 95       	ror	r16
    ca76:	9a 95       	dec	r25
    ca78:	e1 f7       	brne	.-8      	; 0xca72 <update_level+0x72>
    ca7a:	c0 91 b8 0d 	lds	r28, 0x0DB8
    ca7e:	88 23       	and	r24, r24
    ca80:	51 f0       	breq	.+20     	; 0xca96 <update_level+0x96>
    ca82:	2c 2f       	mov	r18, r28
    ca84:	30 e0       	ldi	r19, 0x00	; 0
    ca86:	c8 01       	movw	r24, r16
    ca88:	4c 96       	adiw	r24, 0x1c	; 28
    ca8a:	82 17       	cp	r24, r18
    ca8c:	93 07       	cpc	r25, r19
    ca8e:	18 f4       	brcc	.+6      	; 0xca96 <update_level+0x96>
	{
		move_camera_x();
    ca90:	0e 94 5f 4f 	call	0x9ebe	; 0x9ebe <move_camera_x>
    ca94:	22 c0       	rjmp	.+68     	; 0xcada <update_level+0xda>
	}
	else if (game.player.shared.vx > 0 &&
    ca96:	80 91 d0 0d 	lds	r24, 0x0DD0
    ca9a:	90 91 d1 0d 	lds	r25, 0x0DD1
    ca9e:	18 16       	cp	r1, r24
    caa0:	19 06       	cpc	r1, r25
    caa2:	8c f4       	brge	.+34     	; 0xcac6 <update_level+0xc6>
    caa4:	20 e0       	ldi	r18, 0x00	; 0
    caa6:	30 e0       	ldi	r19, 0x00	; 0
    caa8:	40 ee       	ldi	r20, 0xE0	; 224
    caaa:	52 e4       	ldi	r21, 0x42	; 66
    caac:	c7 01       	movw	r24, r14
    caae:	b6 01       	movw	r22, r12
    cab0:	0e 94 96 68 	call	0xd12c	; 0xd12c <__gesf2>
    cab4:	87 fd       	sbrc	r24, 7
    cab6:	07 c0       	rjmp	.+14     	; 0xcac6 <update_level+0xc6>
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
		(game.camera_x/8 + CAMERA_WIDTH < game.level_width))
    cab8:	2c 2f       	mov	r18, r28
    caba:	30 e0       	ldi	r19, 0x00	; 0
	if (is_space() && game.camera_x/8 + CAMERA_WIDTH < game.level_width)
	{
		move_camera_x();
	}
	else if (game.player.shared.vx > 0 &&
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
    cabc:	c8 01       	movw	r24, r16
    cabe:	4c 96       	adiw	r24, 0x1c	; 28
    cac0:	82 17       	cp	r24, r18
    cac2:	93 07       	cpc	r25, r19
    cac4:	28 f3       	brcs	.-54     	; 0xca90 <update_level+0x90>
		(game.camera_x/8 + CAMERA_WIDTH < game.level_width))
	{
		move_camera_x();
	}
	else if (game.camera_x/8 + CAMERA_WIDTH >= game.level_width)
    cac6:	04 5e       	subi	r16, 0xE4	; 228
    cac8:	1f 4f       	sbci	r17, 0xFF	; 255
    caca:	8c 2f       	mov	r24, r28
    cacc:	90 e0       	ldi	r25, 0x00	; 0
    cace:	08 17       	cp	r16, r24
    cad0:	19 07       	cpc	r17, r25
    cad2:	18 f0       	brcs	.+6      	; 0xcada <update_level+0xda>
	{
		game.level_ended = 1;
    cad4:	81 e0       	ldi	r24, 0x01	; 1
    cad6:	80 93 c3 0d 	sts	0x0DC3, r24
	}
	
	if (!is_space() && game.player.shared.vy > 0 &&
    cada:	0e 94 13 4b 	call	0x9626	; 0x9626 <is_space>
    cade:	81 11       	cpse	r24, r1
    cae0:	40 c0       	rjmp	.+128    	; 0xcb62 <update_level+0x162>
    cae2:	20 e0       	ldi	r18, 0x00	; 0
    cae4:	30 e0       	ldi	r19, 0x00	; 0
    cae6:	a9 01       	movw	r20, r18
    cae8:	60 91 c4 0d 	lds	r22, 0x0DC4
    caec:	70 91 c5 0d 	lds	r23, 0x0DC5
    caf0:	80 91 c6 0d 	lds	r24, 0x0DC6
    caf4:	90 91 c7 0d 	lds	r25, 0x0DC7
    caf8:	0e 94 96 68 	call	0xd12c	; 0xd12c <__gesf2>
    cafc:	18 16       	cp	r1, r24
    cafe:	8c f5       	brge	.+98     	; 0xcb62 <update_level+0x162>
	    (game.player.shared.y - game.camera_y + 24) >= ((CAMERA_HEIGHT - 2) * 8) &&
    cb00:	c0 91 ac 0d 	lds	r28, 0x0DAC
    cb04:	d0 91 ad 0d 	lds	r29, 0x0DAD
    cb08:	be 01       	movw	r22, r28
    cb0a:	80 e0       	ldi	r24, 0x00	; 0
    cb0c:	90 e0       	ldi	r25, 0x00	; 0
    cb0e:	0e 94 e4 67 	call	0xcfc8	; 0xcfc8 <__floatunsisf>
    cb12:	9b 01       	movw	r18, r22
    cb14:	ac 01       	movw	r20, r24
    cb16:	60 91 cc 0d 	lds	r22, 0x0DCC
    cb1a:	70 91 cd 0d 	lds	r23, 0x0DCD
    cb1e:	80 91 ce 0d 	lds	r24, 0x0DCE
    cb22:	90 91 cf 0d 	lds	r25, 0x0DCF
    cb26:	0e 94 4f 67 	call	0xce9e	; 0xce9e <__subsf3>
    cb2a:	20 e0       	ldi	r18, 0x00	; 0
    cb2c:	30 e0       	ldi	r19, 0x00	; 0
    cb2e:	40 ec       	ldi	r20, 0xC0	; 192
    cb30:	51 e4       	ldi	r21, 0x41	; 65
    cb32:	0e 94 50 67 	call	0xcea0	; 0xcea0 <__addsf3>
	else if (game.camera_x/8 + CAMERA_WIDTH >= game.level_width)
	{
		game.level_ended = 1;
	}
	
	if (!is_space() && game.player.shared.vy > 0 &&
    cb36:	20 e0       	ldi	r18, 0x00	; 0
    cb38:	30 e0       	ldi	r19, 0x00	; 0
    cb3a:	40 e4       	ldi	r20, 0x40	; 64
    cb3c:	53 e4       	ldi	r21, 0x43	; 67
    cb3e:	0e 94 96 68 	call	0xd12c	; 0xd12c <__gesf2>
    cb42:	87 fd       	sbrc	r24, 7
    cb44:	0e c0       	rjmp	.+28     	; 0xcb62 <update_level+0x162>
	    (game.player.shared.y - game.camera_y + 24) >= ((CAMERA_HEIGHT - 2) * 8) &&
		(game.camera_y/8 + CAMERA_HEIGHT < game.level_height))
    cb46:	83 e0       	ldi	r24, 0x03	; 3
    cb48:	d6 95       	lsr	r29
    cb4a:	c7 95       	ror	r28
    cb4c:	8a 95       	dec	r24
    cb4e:	e1 f7       	brne	.-8      	; 0xcb48 <update_level+0x148>
    cb50:	6a 96       	adiw	r28, 0x1a	; 26
    cb52:	80 91 b9 0d 	lds	r24, 0x0DB9
    cb56:	90 e0       	ldi	r25, 0x00	; 0
	{
		game.level_ended = 1;
	}
	
	if (!is_space() && game.player.shared.vy > 0 &&
	    (game.player.shared.y - game.camera_y + 24) >= ((CAMERA_HEIGHT - 2) * 8) &&
    cb58:	c8 17       	cp	r28, r24
    cb5a:	d9 07       	cpc	r29, r25
    cb5c:	10 f4       	brcc	.+4      	; 0xcb62 <update_level+0x162>
		(game.camera_y/8 + CAMERA_HEIGHT < game.level_height))
	{
		move_camera_y();
    cb5e:	0e 94 78 4f 	call	0x9ef0	; 0x9ef0 <move_camera_y>
	}
	
	// Score
	LBPrintByte(9, VRAM_TILES_V-1, game.lives ,true);
    cb62:	21 e0       	ldi	r18, 0x01	; 1
    cb64:	40 91 b5 0d 	lds	r20, 0x0DB5
    cb68:	6f e1       	ldi	r22, 0x1F	; 31
    cb6a:	89 e0       	ldi	r24, 0x09	; 9
    cb6c:	0e 94 8f 49 	call	0x931e	; 0x931e <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-1, game.score ,true);
    cb70:	40 91 ae 0d 	lds	r20, 0x0DAE
    cb74:	50 91 af 0d 	lds	r21, 0x0DAF
    cb78:	21 e0       	ldi	r18, 0x01	; 1
    cb7a:	6f e1       	ldi	r22, 0x1F	; 31
    cb7c:	8b e1       	ldi	r24, 0x1B	; 27
    cb7e:	0e 94 c0 49 	call	0x9380	; 0x9380 <LBPrintInt>
	LBPrintByte(9, VRAM_TILES_V-2, game.player.shield ,true);
    cb82:	21 e0       	ldi	r18, 0x01	; 1
    cb84:	40 91 d9 0d 	lds	r20, 0x0DD9
    cb88:	6e e1       	ldi	r22, 0x1E	; 30
    cb8a:	89 e0       	ldi	r24, 0x09	; 9
    cb8c:	0e 94 8f 49 	call	0x931e	; 0x931e <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-2, game.time ,true);
    cb90:	40 91 b0 0d 	lds	r20, 0x0DB0
    cb94:	50 91 b1 0d 	lds	r21, 0x0DB1
    cb98:	21 e0       	ldi	r18, 0x01	; 1
    cb9a:	6e e1       	ldi	r22, 0x1E	; 30
    cb9c:	8b e1       	ldi	r24, 0x1B	; 27
    cb9e:	0e 94 c0 49 	call	0x9380	; 0x9380 <LBPrintInt>
	
	if (game.level_ended && !is_space() && game.player.flags & (IDLE|RUNNING|PRONE))
    cba2:	80 91 c3 0d 	lds	r24, 0x0DC3
    cba6:	88 23       	and	r24, r24
    cba8:	09 f4       	brne	.+2      	; 0xcbac <update_level+0x1ac>
    cbaa:	69 c0       	rjmp	.+210    	; 0xcc7e <update_level+0x27e>
    cbac:	0e 94 13 4b 	call	0x9626	; 0x9626 <is_space>
    cbb0:	81 11       	cpse	r24, r1
    cbb2:	56 c0       	rjmp	.+172    	; 0xcc60 <update_level+0x260>
    cbb4:	80 91 d4 0d 	lds	r24, 0x0DD4
    cbb8:	8e 70       	andi	r24, 0x0E	; 14
    cbba:	09 f4       	brne	.+2      	; 0xcbbe <update_level+0x1be>
    cbbc:	60 c0       	rjmp	.+192    	; 0xcc7e <update_level+0x27e>
	{
		LBMapSprite(PLAYER_SLOT, map_hero_idle, 0);
    cbbe:	40 e0       	ldi	r20, 0x00	; 0
    cbc0:	67 eb       	ldi	r22, 0xB7	; 183
    cbc2:	7d e2       	ldi	r23, 0x2D	; 45
    cbc4:	80 e0       	ldi	r24, 0x00	; 0
    cbc6:	0e 94 44 4a 	call	0x9488	; 0x9488 <LBMapSprite>
		clear_sprites(ENEMY_SHOT_SLOT, MAX_ENEMY_SHOTS);
    cbca:	61 e0       	ldi	r22, 0x01	; 1
    cbcc:	8e e0       	ldi	r24, 0x0E	; 14
    cbce:	0e 94 8e 5b 	call	0xb71c	; 0xb71c <clear_sprites>
		LBRotateSprites();
    cbd2:	0e 94 d4 4a 	call	0x95a8	; 0x95a8 <LBRotateSprites>
		map_ship();
    cbd6:	0e 94 93 4f 	call	0x9f26	; 0x9f26 <map_ship>

void update_level()
{
	u8 ship_x = game.player.shared.x - game.camera_x;
	u8 ship_y = 0;
	char ship_increment = 3;
    cbda:	d3 e0       	ldi	r29, 0x03	; 3
}

void update_level()
{
	u8 ship_x = game.player.shared.x - game.camera_x;
	u8 ship_y = 0;
    cbdc:	c0 e0       	ldi	r28, 0x00	; 0
		clear_sprites(ENEMY_SHOT_SLOT, MAX_ENEMY_SHOTS);
		LBRotateSprites();
		map_ship();
		while (1)
		{
			WaitVsync(1);
    cbde:	81 e0       	ldi	r24, 0x01	; 1
    cbe0:	90 e0       	ldi	r25, 0x00	; 0
    cbe2:	0e 94 45 48 	call	0x908a	; 0x908a <WaitVsync>
			if (ship_y >= get_hero_spawn_y(game.current_level_index)*8)
    cbe6:	8c 2f       	mov	r24, r28
    cbe8:	90 e0       	ldi	r25, 0x00	; 0
    cbea:	88 3a       	cpi	r24, 0xA8	; 168
    cbec:	91 05       	cpc	r25, r1
    cbee:	6c f0       	brlt	.+26     	; 0xcc0a <update_level+0x20a>
			{
				clear_sprites(0, game.player.width*game.player.height);
    cbf0:	80 91 d8 0d 	lds	r24, 0x0DD8
    cbf4:	60 91 d7 0d 	lds	r22, 0x0DD7
    cbf8:	86 9f       	mul	r24, r22
    cbfa:	60 2d       	mov	r22, r0
    cbfc:	11 24       	eor	r1, r1
    cbfe:	80 e0       	ldi	r24, 0x00	; 0
    cc00:	0e 94 8e 5b 	call	0xb71c	; 0xb71c <clear_sprites>
				LBRotateSprites();
    cc04:	0e 94 d4 4a 	call	0x95a8	; 0x95a8 <LBRotateSprites>
				ship_increment = -3;
    cc08:	dd ef       	ldi	r29, 0xFD	; 253
			}
			LBMapSprite(6, LBGetNextFrame(&game.player.run), 0);
    cc0a:	80 e3       	ldi	r24, 0x30	; 48
    cc0c:	9e e0       	ldi	r25, 0x0E	; 14
    cc0e:	0e 94 e2 48 	call	0x91c4	; 0x91c4 <LBGetNextFrame>
    cc12:	40 e0       	ldi	r20, 0x00	; 0
    cc14:	bc 01       	movw	r22, r24
    cc16:	86 e0       	ldi	r24, 0x06	; 6
    cc18:	0e 94 44 4a 	call	0x9488	; 0x9488 <LBMapSprite>
	}
}

void update_level()
{
	u8 ship_x = game.player.shared.x - game.camera_x;
    cc1c:	c7 01       	movw	r24, r14
    cc1e:	b6 01       	movw	r22, r12
    cc20:	0e 94 b8 67 	call	0xcf70	; 0xcf70 <__fixunssfsi>
				clear_sprites(0, game.player.width*game.player.height);
				LBRotateSprites();
				ship_increment = -3;
			}
			LBMapSprite(6, LBGetNextFrame(&game.player.run), 0);
			LBMoveSprite(6, ship_x, ship_y, 4, 2);
    cc24:	02 e0       	ldi	r16, 0x02	; 2
    cc26:	24 e0       	ldi	r18, 0x04	; 4
    cc28:	4c 2f       	mov	r20, r28
    cc2a:	86 e0       	ldi	r24, 0x06	; 6
    cc2c:	0e 94 96 4a 	call	0x952c	; 0x952c <LBMoveSprite>
			ship_y += ship_increment;
    cc30:	cd 0f       	add	r28, r29
			if (ship_y == 0)
    cc32:	99 f4       	brne	.+38     	; 0xcc5a <update_level+0x25a>
			{
				clear_sprites(6, 8);
    cc34:	68 e0       	ldi	r22, 0x08	; 8
    cc36:	86 e0       	ldi	r24, 0x06	; 6
    cc38:	0e 94 8e 5b 	call	0xb71c	; 0xb71c <clear_sprites>
				LBRotateSprites();
    cc3c:	0e 94 d4 4a 	call	0x95a8	; 0x95a8 <LBRotateSprites>
				tally_score((char*) strLevelClear, 100);
    cc40:	64 e6       	ldi	r22, 0x64	; 100
    cc42:	70 e0       	ldi	r23, 0x00	; 0
    cc44:	86 e2       	ldi	r24, 0x26	; 38
    cc46:	9b e0       	ldi	r25, 0x0B	; 11
    cc48:	0e 94 9d 60 	call	0xc13a	; 0xc13a <tally_score>
				planet_transition(game.current_level_index+1, -1, 26, 3, 0);
    cc4c:	80 91 b7 0d 	lds	r24, 0x0DB7
    cc50:	00 e0       	ldi	r16, 0x00	; 0
    cc52:	23 e0       	ldi	r18, 0x03	; 3
    cc54:	4a e1       	ldi	r20, 0x1A	; 26
    cc56:	6f ef       	ldi	r22, 0xFF	; 255
    cc58:	0f c0       	rjmp	.+30     	; 0xcc78 <update_level+0x278>
				break;
			}
			LBRotateSprites();
    cc5a:	0e 94 d4 4a 	call	0x95a8	; 0x95a8 <LBRotateSprites>
		}
    cc5e:	bf cf       	rjmp	.-130    	; 0xcbde <update_level+0x1de>
	}
	else if (game.level_ended && is_space())
	{
		tally_score((char*) strLevelClear, 100);
    cc60:	64 e6       	ldi	r22, 0x64	; 100
    cc62:	70 e0       	ldi	r23, 0x00	; 0
    cc64:	86 e2       	ldi	r24, 0x26	; 38
    cc66:	9b e0       	ldi	r25, 0x0B	; 11
    cc68:	0e 94 9d 60 	call	0xc13a	; 0xc13a <tally_score>
		planet_transition(game.current_level_index+1, 1, 28, -3, 199);
    cc6c:	80 91 b7 0d 	lds	r24, 0x0DB7
    cc70:	07 ec       	ldi	r16, 0xC7	; 199
    cc72:	2d ef       	ldi	r18, 0xFD	; 253
    cc74:	4c e1       	ldi	r20, 0x1C	; 28
    cc76:	61 e0       	ldi	r22, 0x01	; 1
    cc78:	8f 5f       	subi	r24, 0xFF	; 255
    cc7a:	0e 94 7b 5d 	call	0xbaf6	; 0xbaf6 <planet_transition>
	}
	
}
    cc7e:	df 91       	pop	r29
    cc80:	cf 91       	pop	r28
    cc82:	1f 91       	pop	r17
    cc84:	0f 91       	pop	r16
    cc86:	ff 90       	pop	r15
    cc88:	ef 90       	pop	r14
    cc8a:	df 90       	pop	r13
    cc8c:	cf 90       	pop	r12
    cc8e:	08 95       	ret

0000cc90 <update_pause>:
		}
	}
}

void update_pause()
{
    cc90:	ef 92       	push	r14
    cc92:	ff 92       	push	r15
    cc94:	0f 93       	push	r16
    cc96:	1f 93       	push	r17
    cc98:	cf 93       	push	r28
    cc9a:	df 93       	push	r29
	u8 x = Screen.scrollX / 8;
    cc9c:	c0 91 b2 0c 	lds	r28, 0x0CB2
	u8 y = Screen.scrollY / 8;
    cca0:	00 91 b3 0c 	lds	r16, 0x0CB3
	
	if (game.joypadState.pressed & BTN_START)
    cca4:	80 91 9a 0f 	lds	r24, 0x0F9A
    cca8:	83 ff       	sbrs	r24, 3
    ccaa:	5d c0       	rjmp	.+186    	; 0xcd66 <update_pause+0xd6>
}

void update_pause()
{
	u8 x = Screen.scrollX / 8;
	u8 y = Screen.scrollY / 8;
    ccac:	06 95       	lsr	r16
    ccae:	06 95       	lsr	r16
    ccb0:	06 95       	lsr	r16
	
	if (game.joypadState.pressed & BTN_START)
	{
		DrawMap2((x+8)%32, (y+6)%30, map_canvas);
    ccb2:	10 e0       	ldi	r17, 0x00	; 0
	}
}

void update_pause()
{
	u8 x = Screen.scrollX / 8;
    ccb4:	c6 95       	lsr	r28
    ccb6:	c6 95       	lsr	r28
    ccb8:	c6 95       	lsr	r28
	u8 y = Screen.scrollY / 8;
	
	if (game.joypadState.pressed & BTN_START)
	{
		DrawMap2((x+8)%32, (y+6)%30, map_canvas);
    ccba:	d0 e0       	ldi	r29, 0x00	; 0
    ccbc:	c8 01       	movw	r24, r16
    ccbe:	06 96       	adiw	r24, 0x06	; 6
    ccc0:	2e e1       	ldi	r18, 0x1E	; 30
    ccc2:	e2 2e       	mov	r14, r18
    ccc4:	f1 2c       	mov	r15, r1
    ccc6:	b7 01       	movw	r22, r14
    ccc8:	0e 94 35 67 	call	0xce6a	; 0xce6a <__divmodhi4>
    cccc:	9e 01       	movw	r18, r28
    ccce:	28 5f       	subi	r18, 0xF8	; 248
    ccd0:	3f 4f       	sbci	r19, 0xFF	; 255
    ccd2:	48 e6       	ldi	r20, 0x68	; 104
    ccd4:	57 e6       	ldi	r21, 0x67	; 103
    ccd6:	68 2f       	mov	r22, r24
    ccd8:	82 2f       	mov	r24, r18
    ccda:	8f 71       	andi	r24, 0x1F	; 31
    ccdc:	0e 94 dc 47 	call	0x8fb8	; 0x8fb8 <DrawMap>
		LBPrint((x+13)%32, (y+9)%30, (char*) strPaused);
    cce0:	c8 01       	movw	r24, r16
    cce2:	09 96       	adiw	r24, 0x09	; 9
    cce4:	b7 01       	movw	r22, r14
    cce6:	0e 94 35 67 	call	0xce6a	; 0xce6a <__divmodhi4>
    ccea:	9e 01       	movw	r18, r28
    ccec:	23 5f       	subi	r18, 0xF3	; 243
    ccee:	3f 4f       	sbci	r19, 0xFF	; 255
    ccf0:	42 e3       	ldi	r20, 0x32	; 50
    ccf2:	5b e0       	ldi	r21, 0x0B	; 11
    ccf4:	68 2f       	mov	r22, r24
    ccf6:	82 2f       	mov	r24, r18
    ccf8:	8f 71       	andi	r24, 0x1F	; 31
    ccfa:	0e 94 73 49 	call	0x92e6	; 0x92e6 <LBPrint>
		LBPrint((x+10)%32, (y+12)%30, (char*) strExitGame);
    ccfe:	c8 01       	movw	r24, r16
    cd00:	0c 96       	adiw	r24, 0x0c	; 12
    cd02:	b7 01       	movw	r22, r14
    cd04:	0e 94 35 67 	call	0xce6a	; 0xce6a <__divmodhi4>
    cd08:	2a 96       	adiw	r28, 0x0a	; 10
    cd0a:	48 e3       	ldi	r20, 0x38	; 56
    cd0c:	5b e0       	ldi	r21, 0x0B	; 11
    cd0e:	68 2f       	mov	r22, r24
    cd10:	8c 2f       	mov	r24, r28
    cd12:	8f 71       	andi	r24, 0x1F	; 31
    cd14:	0e 94 73 49 	call	0x92e6	; 0x92e6 <LBPrint>
		//hide_sprites(0, MAX_EXTENDED_SPRITES);
		//LBRotateSprites();
		while (1)
		{
			WaitVsync(1);
    cd18:	81 e0       	ldi	r24, 0x01	; 1
    cd1a:	90 e0       	ldi	r25, 0x00	; 0
    cd1c:	0e 94 45 48 	call	0x908a	; 0x908a <WaitVsync>
			LBGetJoyPadState(&game.joypadState, 0);
    cd20:	60 e0       	ldi	r22, 0x00	; 0
    cd22:	8a e9       	ldi	r24, 0x9A	; 154
    cd24:	9f e0       	ldi	r25, 0x0F	; 15
    cd26:	0e 94 08 49 	call	0x9210	; 0x9210 <LBGetJoyPadState>
			if (game.joypadState.pressed & BTN_START)
    cd2a:	80 91 9a 0f 	lds	r24, 0x0F9A
    cd2e:	90 91 9b 0f 	lds	r25, 0x0F9B
    cd32:	83 ff       	sbrs	r24, 3
    cd34:	08 c0       	rjmp	.+16     	; 0xcd46 <update_pause+0xb6>
				exit_game();
				break;
			}
		}
	}
}
    cd36:	df 91       	pop	r29
    cd38:	cf 91       	pop	r28
    cd3a:	1f 91       	pop	r17
    cd3c:	0f 91       	pop	r16
    cd3e:	ff 90       	pop	r15
    cd40:	ef 90       	pop	r14
		{
			WaitVsync(1);
			LBGetJoyPadState(&game.joypadState, 0);
			if (game.joypadState.pressed & BTN_START)
			{
				render_camera_view();
    cd42:	0c 94 b2 4d 	jmp	0x9b64	; 0x9b64 <render_camera_view>
				break;
			}
			else if (game.joypadState.pressed & BTN_X)
    cd46:	91 ff       	sbrs	r25, 1
    cd48:	e7 cf       	rjmp	.-50     	; 0xcd18 <update_pause+0x88>
			{
				tally_score((char*)strGameOver, 0);
    cd4a:	60 e0       	ldi	r22, 0x00	; 0
    cd4c:	70 e0       	ldi	r23, 0x00	; 0
    cd4e:	86 e1       	ldi	r24, 0x16	; 22
    cd50:	9b e0       	ldi	r25, 0x0B	; 11
    cd52:	0e 94 9d 60 	call	0xc13a	; 0xc13a <tally_score>
				exit_game();
				break;
			}
		}
	}
}
    cd56:	df 91       	pop	r29
    cd58:	cf 91       	pop	r28
    cd5a:	1f 91       	pop	r17
    cd5c:	0f 91       	pop	r16
    cd5e:	ff 90       	pop	r15
    cd60:	ef 90       	pop	r14
				break;
			}
			else if (game.joypadState.pressed & BTN_X)
			{
				tally_score((char*)strGameOver, 0);
				exit_game();
    cd62:	0c 94 91 5f 	jmp	0xbf22	; 0xbf22 <exit_game>
				break;
			}
		}
	}
}
    cd66:	df 91       	pop	r29
    cd68:	cf 91       	pop	r28
    cd6a:	1f 91       	pop	r17
    cd6c:	0f 91       	pop	r16
    cd6e:	ff 90       	pop	r15
    cd70:	ef 90       	pop	r14
    cd72:	08 95       	ret

0000cd74 <main>:
}

int main()
{
	// Initialize
	GetPrngNumber(GetTrueRandomSeed());
    cd74:	0e 94 fd 39 	call	0x73fa	; 0x73fa <GetTrueRandomSeed>
    cd78:	0e 94 7d 3b 	call	0x76fa	; 0x76fa <GetPrngNumber>
	InitMusicPlayer(my_patches);
    cd7c:	8e e1       	ldi	r24, 0x1E	; 30
    cd7e:	9d e1       	ldi	r25, 0x1D	; 29
    cd80:	0e 94 57 3c 	call	0x78ae	; 0x78ae <InitMusicPlayer>
	ClearVram();
    cd84:	0e 94 85 39 	call	0x730a	; 0x730a <ClearVram>
	SetMasterVolume(0x05);
    cd88:	85 e0       	ldi	r24, 0x05	; 5
    cd8a:	0e 94 0b 40 	call	0x8016	; 0x8016 <SetMasterVolume>
	SetTileTable(tiles_data);
    cd8e:	86 e6       	ldi	r24, 0x66	; 102
    cd90:	9f e4       	ldi	r25, 0x4F	; 79
    cd92:	0e 94 a0 39 	call	0x7340	; 0x7340 <SetTileTable>
	SetSpritesTileTable(sprites_data);
    cd96:	8d e9       	ldi	r24, 0x9D	; 157
    cd98:	9e e1       	ldi	r25, 0x1E	; 30
    cd9a:	0e 94 80 39 	call	0x7300	; 0x7300 <SetSpritesTileTable>
	}
}

void LBSetFontTilesMap(char* tiles_map)
{
	font_tiles_map = tiles_map;
    cd9e:	86 ee       	ldi	r24, 0xE6	; 230
    cda0:	96 e6       	ldi	r25, 0x66	; 102
    cda2:	90 93 83 0d 	sts	0x0D83, r25
    cda6:	80 93 82 0d 	sts	0x0D82, r24
	LBSetFontTilesMap((char*) map_font);
	init_default_high_scores();
    cdaa:	0e 94 17 4b 	call	0x962e	; 0x962e <init_default_high_scores>
	load_splash();
    cdae:	0e 94 61 5e 	call	0xbcc2	; 0xbcc2 <load_splash>
	while (1)
	{
		WaitVsync(1);
    cdb2:	81 e0       	ldi	r24, 0x01	; 1
    cdb4:	90 e0       	ldi	r25, 0x00	; 0
    cdb6:	0e 94 45 48 	call	0x908a	; 0x908a <WaitVsync>
		LBGetJoyPadState(&game.joypadState, 0);
    cdba:	60 e0       	ldi	r22, 0x00	; 0
    cdbc:	8a e9       	ldi	r24, 0x9A	; 154
    cdbe:	9f e0       	ldi	r25, 0x0F	; 15
    cdc0:	0e 94 08 49 	call	0x9210	; 0x9210 <LBGetJoyPadState>
		if (game.current_screen == LEVEL)
    cdc4:	80 91 b6 0d 	lds	r24, 0x0DB6
    cdc8:	82 30       	cpi	r24, 0x02	; 2
    cdca:	a9 f4       	brne	.+42     	; 0xcdf6 <main+0x82>
		{
			update_level();
    cdcc:	0e 94 00 65 	call	0xca00	; 0xca00 <update_level>
			update_player();
    cdd0:	0e 94 01 62 	call	0xc402	; 0xc402 <update_player>
			update_shot();
    cdd4:	0e 94 aa 50 	call	0xa154	; 0xa154 <update_shot>
			update_enemies();
    cdd8:	0e 94 2f 58 	call	0xb05e	; 0xb05e <update_enemies>
			update_enemy_shots();
    cddc:	0e 94 74 58 	call	0xb0e8	; 0xb0e8 <update_enemy_shots>
			animate_player();
    cde0:	0e 94 7a 57 	call	0xaef4	; 0xaef4 <animate_player>
			animate_shot();
    cde4:	0e 94 f6 54 	call	0xa9ec	; 0xa9ec <animate_shot>
			animate_enemies();
    cde8:	0e 94 0e 59 	call	0xb21c	; 0xb21c <animate_enemies>
			animate_enemy_shots();
    cdec:	0e 94 51 5a 	call	0xb4a2	; 0xb4a2 <animate_enemy_shots>
			update_pause();
    cdf0:	0e 94 48 66 	call	0xcc90	; 0xcc90 <update_pause>
    cdf4:	09 c0       	rjmp	.+18     	; 0xce08 <main+0x94>
		}
		else if (game.current_screen == SPLASH)
    cdf6:	81 11       	cpse	r24, r1
    cdf8:	03 c0       	rjmp	.+6      	; 0xce00 <main+0x8c>
		{
			update_splash();
    cdfa:	0e 94 9f 5f 	call	0xbf3e	; 0xbf3e <update_splash>
    cdfe:	04 c0       	rjmp	.+8      	; 0xce08 <main+0x94>
			
		}
		else if (game.current_screen == HIGH_SCORES)
    ce00:	81 30       	cpi	r24, 0x01	; 1
    ce02:	11 f4       	brne	.+4      	; 0xce08 <main+0x94>
		{
			update_high_scores();
    ce04:	0e 94 e6 5f 	call	0xbfcc	; 0xbfcc <update_high_scores>
			
		}
		LBRotateSprites();
    ce08:	0e 94 d4 4a 	call	0x95a8	; 0x95a8 <LBRotateSprites>
	}
    ce0c:	d2 cf       	rjmp	.-92     	; 0xcdb2 <main+0x3e>

0000ce0e <__udivmodqi4>:
    ce0e:	99 1b       	sub	r25, r25
    ce10:	79 e0       	ldi	r23, 0x09	; 9
    ce12:	04 c0       	rjmp	.+8      	; 0xce1c <__udivmodqi4_ep>

0000ce14 <__udivmodqi4_loop>:
    ce14:	99 1f       	adc	r25, r25
    ce16:	96 17       	cp	r25, r22
    ce18:	08 f0       	brcs	.+2      	; 0xce1c <__udivmodqi4_ep>
    ce1a:	96 1b       	sub	r25, r22

0000ce1c <__udivmodqi4_ep>:
    ce1c:	88 1f       	adc	r24, r24
    ce1e:	7a 95       	dec	r23
    ce20:	c9 f7       	brne	.-14     	; 0xce14 <__udivmodqi4_loop>
    ce22:	80 95       	com	r24
    ce24:	08 95       	ret

0000ce26 <__divmodqi4>:
    ce26:	87 fb       	bst	r24, 7
    ce28:	08 2e       	mov	r0, r24
    ce2a:	06 26       	eor	r0, r22
    ce2c:	87 fd       	sbrc	r24, 7
    ce2e:	81 95       	neg	r24
    ce30:	67 fd       	sbrc	r22, 7
    ce32:	61 95       	neg	r22
    ce34:	0e 94 07 67 	call	0xce0e	; 0xce0e <__udivmodqi4>
    ce38:	0e f4       	brtc	.+2      	; 0xce3c <__divmodqi4_1>
    ce3a:	91 95       	neg	r25

0000ce3c <__divmodqi4_1>:
    ce3c:	07 fc       	sbrc	r0, 7
    ce3e:	81 95       	neg	r24

0000ce40 <__divmodqi4_exit>:
    ce40:	08 95       	ret

0000ce42 <__udivmodhi4>:
    ce42:	aa 1b       	sub	r26, r26
    ce44:	bb 1b       	sub	r27, r27
    ce46:	51 e1       	ldi	r21, 0x11	; 17
    ce48:	07 c0       	rjmp	.+14     	; 0xce58 <__udivmodhi4_ep>

0000ce4a <__udivmodhi4_loop>:
    ce4a:	aa 1f       	adc	r26, r26
    ce4c:	bb 1f       	adc	r27, r27
    ce4e:	a6 17       	cp	r26, r22
    ce50:	b7 07       	cpc	r27, r23
    ce52:	10 f0       	brcs	.+4      	; 0xce58 <__udivmodhi4_ep>
    ce54:	a6 1b       	sub	r26, r22
    ce56:	b7 0b       	sbc	r27, r23

0000ce58 <__udivmodhi4_ep>:
    ce58:	88 1f       	adc	r24, r24
    ce5a:	99 1f       	adc	r25, r25
    ce5c:	5a 95       	dec	r21
    ce5e:	a9 f7       	brne	.-22     	; 0xce4a <__udivmodhi4_loop>
    ce60:	80 95       	com	r24
    ce62:	90 95       	com	r25
    ce64:	bc 01       	movw	r22, r24
    ce66:	cd 01       	movw	r24, r26
    ce68:	08 95       	ret

0000ce6a <__divmodhi4>:
    ce6a:	97 fb       	bst	r25, 7
    ce6c:	07 2e       	mov	r0, r23
    ce6e:	16 f4       	brtc	.+4      	; 0xce74 <__divmodhi4+0xa>
    ce70:	00 94       	com	r0
    ce72:	07 d0       	rcall	.+14     	; 0xce82 <__divmodhi4_neg1>
    ce74:	77 fd       	sbrc	r23, 7
    ce76:	09 d0       	rcall	.+18     	; 0xce8a <__divmodhi4_neg2>
    ce78:	0e 94 21 67 	call	0xce42	; 0xce42 <__udivmodhi4>
    ce7c:	07 fc       	sbrc	r0, 7
    ce7e:	05 d0       	rcall	.+10     	; 0xce8a <__divmodhi4_neg2>
    ce80:	3e f4       	brtc	.+14     	; 0xce90 <__divmodhi4_exit>

0000ce82 <__divmodhi4_neg1>:
    ce82:	90 95       	com	r25
    ce84:	81 95       	neg	r24
    ce86:	9f 4f       	sbci	r25, 0xFF	; 255
    ce88:	08 95       	ret

0000ce8a <__divmodhi4_neg2>:
    ce8a:	70 95       	com	r23
    ce8c:	61 95       	neg	r22
    ce8e:	7f 4f       	sbci	r23, 0xFF	; 255

0000ce90 <__divmodhi4_exit>:
    ce90:	08 95       	ret

0000ce92 <__tablejump2__>:
    ce92:	ee 0f       	add	r30, r30
    ce94:	ff 1f       	adc	r31, r31
    ce96:	05 90       	lpm	r0, Z+
    ce98:	f4 91       	lpm	r31, Z
    ce9a:	e0 2d       	mov	r30, r0
    ce9c:	09 94       	ijmp

0000ce9e <__subsf3>:
    ce9e:	50 58       	subi	r21, 0x80	; 128

0000cea0 <__addsf3>:
    cea0:	bb 27       	eor	r27, r27
    cea2:	aa 27       	eor	r26, r26
    cea4:	0e d0       	rcall	.+28     	; 0xcec2 <__addsf3x>
    cea6:	08 c1       	rjmp	.+528    	; 0xd0b8 <__fp_round>
    cea8:	f9 d0       	rcall	.+498    	; 0xd09c <__fp_pscA>
    ceaa:	30 f0       	brcs	.+12     	; 0xceb8 <__addsf3+0x18>
    ceac:	fe d0       	rcall	.+508    	; 0xd0aa <__fp_pscB>
    ceae:	20 f0       	brcs	.+8      	; 0xceb8 <__addsf3+0x18>
    ceb0:	31 f4       	brne	.+12     	; 0xcebe <__addsf3+0x1e>
    ceb2:	9f 3f       	cpi	r25, 0xFF	; 255
    ceb4:	11 f4       	brne	.+4      	; 0xceba <__addsf3+0x1a>
    ceb6:	1e f4       	brtc	.+6      	; 0xcebe <__addsf3+0x1e>
    ceb8:	ee c0       	rjmp	.+476    	; 0xd096 <__fp_nan>
    ceba:	0e f4       	brtc	.+2      	; 0xcebe <__addsf3+0x1e>
    cebc:	e0 95       	com	r30
    cebe:	e7 fb       	bst	r30, 7
    cec0:	e4 c0       	rjmp	.+456    	; 0xd08a <__fp_inf>

0000cec2 <__addsf3x>:
    cec2:	e9 2f       	mov	r30, r25
    cec4:	0a d1       	rcall	.+532    	; 0xd0da <__fp_split3>
    cec6:	80 f3       	brcs	.-32     	; 0xcea8 <__addsf3+0x8>
    cec8:	ba 17       	cp	r27, r26
    ceca:	62 07       	cpc	r22, r18
    cecc:	73 07       	cpc	r23, r19
    cece:	84 07       	cpc	r24, r20
    ced0:	95 07       	cpc	r25, r21
    ced2:	18 f0       	brcs	.+6      	; 0xceda <__addsf3x+0x18>
    ced4:	71 f4       	brne	.+28     	; 0xcef2 <__addsf3x+0x30>
    ced6:	9e f5       	brtc	.+102    	; 0xcf3e <__addsf3x+0x7c>
    ced8:	22 c1       	rjmp	.+580    	; 0xd11e <__fp_zero>
    ceda:	0e f4       	brtc	.+2      	; 0xcede <__addsf3x+0x1c>
    cedc:	e0 95       	com	r30
    cede:	0b 2e       	mov	r0, r27
    cee0:	ba 2f       	mov	r27, r26
    cee2:	a0 2d       	mov	r26, r0
    cee4:	0b 01       	movw	r0, r22
    cee6:	b9 01       	movw	r22, r18
    cee8:	90 01       	movw	r18, r0
    ceea:	0c 01       	movw	r0, r24
    ceec:	ca 01       	movw	r24, r20
    ceee:	a0 01       	movw	r20, r0
    cef0:	11 24       	eor	r1, r1
    cef2:	ff 27       	eor	r31, r31
    cef4:	59 1b       	sub	r21, r25
    cef6:	99 f0       	breq	.+38     	; 0xcf1e <__addsf3x+0x5c>
    cef8:	59 3f       	cpi	r21, 0xF9	; 249
    cefa:	50 f4       	brcc	.+20     	; 0xcf10 <__addsf3x+0x4e>
    cefc:	50 3e       	cpi	r21, 0xE0	; 224
    cefe:	68 f1       	brcs	.+90     	; 0xcf5a <__addsf3x+0x98>
    cf00:	1a 16       	cp	r1, r26
    cf02:	f0 40       	sbci	r31, 0x00	; 0
    cf04:	a2 2f       	mov	r26, r18
    cf06:	23 2f       	mov	r18, r19
    cf08:	34 2f       	mov	r19, r20
    cf0a:	44 27       	eor	r20, r20
    cf0c:	58 5f       	subi	r21, 0xF8	; 248
    cf0e:	f3 cf       	rjmp	.-26     	; 0xcef6 <__addsf3x+0x34>
    cf10:	46 95       	lsr	r20
    cf12:	37 95       	ror	r19
    cf14:	27 95       	ror	r18
    cf16:	a7 95       	ror	r26
    cf18:	f0 40       	sbci	r31, 0x00	; 0
    cf1a:	53 95       	inc	r21
    cf1c:	c9 f7       	brne	.-14     	; 0xcf10 <__addsf3x+0x4e>
    cf1e:	7e f4       	brtc	.+30     	; 0xcf3e <__addsf3x+0x7c>
    cf20:	1f 16       	cp	r1, r31
    cf22:	ba 0b       	sbc	r27, r26
    cf24:	62 0b       	sbc	r22, r18
    cf26:	73 0b       	sbc	r23, r19
    cf28:	84 0b       	sbc	r24, r20
    cf2a:	ba f0       	brmi	.+46     	; 0xcf5a <__addsf3x+0x98>
    cf2c:	91 50       	subi	r25, 0x01	; 1
    cf2e:	a1 f0       	breq	.+40     	; 0xcf58 <__addsf3x+0x96>
    cf30:	ff 0f       	add	r31, r31
    cf32:	bb 1f       	adc	r27, r27
    cf34:	66 1f       	adc	r22, r22
    cf36:	77 1f       	adc	r23, r23
    cf38:	88 1f       	adc	r24, r24
    cf3a:	c2 f7       	brpl	.-16     	; 0xcf2c <__addsf3x+0x6a>
    cf3c:	0e c0       	rjmp	.+28     	; 0xcf5a <__addsf3x+0x98>
    cf3e:	ba 0f       	add	r27, r26
    cf40:	62 1f       	adc	r22, r18
    cf42:	73 1f       	adc	r23, r19
    cf44:	84 1f       	adc	r24, r20
    cf46:	48 f4       	brcc	.+18     	; 0xcf5a <__addsf3x+0x98>
    cf48:	87 95       	ror	r24
    cf4a:	77 95       	ror	r23
    cf4c:	67 95       	ror	r22
    cf4e:	b7 95       	ror	r27
    cf50:	f7 95       	ror	r31
    cf52:	9e 3f       	cpi	r25, 0xFE	; 254
    cf54:	08 f0       	brcs	.+2      	; 0xcf58 <__addsf3x+0x96>
    cf56:	b3 cf       	rjmp	.-154    	; 0xcebe <__addsf3+0x1e>
    cf58:	93 95       	inc	r25
    cf5a:	88 0f       	add	r24, r24
    cf5c:	08 f0       	brcs	.+2      	; 0xcf60 <__addsf3x+0x9e>
    cf5e:	99 27       	eor	r25, r25
    cf60:	ee 0f       	add	r30, r30
    cf62:	97 95       	ror	r25
    cf64:	87 95       	ror	r24
    cf66:	08 95       	ret

0000cf68 <__cmpsf2>:
    cf68:	6c d0       	rcall	.+216    	; 0xd042 <__fp_cmp>
    cf6a:	08 f4       	brcc	.+2      	; 0xcf6e <__cmpsf2+0x6>
    cf6c:	81 e0       	ldi	r24, 0x01	; 1
    cf6e:	08 95       	ret

0000cf70 <__fixunssfsi>:
    cf70:	bc d0       	rcall	.+376    	; 0xd0ea <__fp_splitA>
    cf72:	88 f0       	brcs	.+34     	; 0xcf96 <__fixunssfsi+0x26>
    cf74:	9f 57       	subi	r25, 0x7F	; 127
    cf76:	90 f0       	brcs	.+36     	; 0xcf9c <__fixunssfsi+0x2c>
    cf78:	b9 2f       	mov	r27, r25
    cf7a:	99 27       	eor	r25, r25
    cf7c:	b7 51       	subi	r27, 0x17	; 23
    cf7e:	a0 f0       	brcs	.+40     	; 0xcfa8 <__fixunssfsi+0x38>
    cf80:	d1 f0       	breq	.+52     	; 0xcfb6 <__fixunssfsi+0x46>
    cf82:	66 0f       	add	r22, r22
    cf84:	77 1f       	adc	r23, r23
    cf86:	88 1f       	adc	r24, r24
    cf88:	99 1f       	adc	r25, r25
    cf8a:	1a f0       	brmi	.+6      	; 0xcf92 <__fixunssfsi+0x22>
    cf8c:	ba 95       	dec	r27
    cf8e:	c9 f7       	brne	.-14     	; 0xcf82 <__fixunssfsi+0x12>
    cf90:	12 c0       	rjmp	.+36     	; 0xcfb6 <__fixunssfsi+0x46>
    cf92:	b1 30       	cpi	r27, 0x01	; 1
    cf94:	81 f0       	breq	.+32     	; 0xcfb6 <__fixunssfsi+0x46>
    cf96:	c3 d0       	rcall	.+390    	; 0xd11e <__fp_zero>
    cf98:	b1 e0       	ldi	r27, 0x01	; 1
    cf9a:	08 95       	ret
    cf9c:	c0 c0       	rjmp	.+384    	; 0xd11e <__fp_zero>
    cf9e:	67 2f       	mov	r22, r23
    cfa0:	78 2f       	mov	r23, r24
    cfa2:	88 27       	eor	r24, r24
    cfa4:	b8 5f       	subi	r27, 0xF8	; 248
    cfa6:	39 f0       	breq	.+14     	; 0xcfb6 <__fixunssfsi+0x46>
    cfa8:	b9 3f       	cpi	r27, 0xF9	; 249
    cfaa:	cc f3       	brlt	.-14     	; 0xcf9e <__fixunssfsi+0x2e>
    cfac:	86 95       	lsr	r24
    cfae:	77 95       	ror	r23
    cfb0:	67 95       	ror	r22
    cfb2:	b3 95       	inc	r27
    cfb4:	d9 f7       	brne	.-10     	; 0xcfac <__fixunssfsi+0x3c>
    cfb6:	3e f4       	brtc	.+14     	; 0xcfc6 <__fixunssfsi+0x56>
    cfb8:	90 95       	com	r25
    cfba:	80 95       	com	r24
    cfbc:	70 95       	com	r23
    cfbe:	61 95       	neg	r22
    cfc0:	7f 4f       	sbci	r23, 0xFF	; 255
    cfc2:	8f 4f       	sbci	r24, 0xFF	; 255
    cfc4:	9f 4f       	sbci	r25, 0xFF	; 255
    cfc6:	08 95       	ret

0000cfc8 <__floatunsisf>:
    cfc8:	e8 94       	clt
    cfca:	09 c0       	rjmp	.+18     	; 0xcfde <__floatsisf+0x12>

0000cfcc <__floatsisf>:
    cfcc:	97 fb       	bst	r25, 7
    cfce:	3e f4       	brtc	.+14     	; 0xcfde <__floatsisf+0x12>
    cfd0:	90 95       	com	r25
    cfd2:	80 95       	com	r24
    cfd4:	70 95       	com	r23
    cfd6:	61 95       	neg	r22
    cfd8:	7f 4f       	sbci	r23, 0xFF	; 255
    cfda:	8f 4f       	sbci	r24, 0xFF	; 255
    cfdc:	9f 4f       	sbci	r25, 0xFF	; 255
    cfde:	99 23       	and	r25, r25
    cfe0:	a9 f0       	breq	.+42     	; 0xd00c <__floatsisf+0x40>
    cfe2:	f9 2f       	mov	r31, r25
    cfe4:	96 e9       	ldi	r25, 0x96	; 150
    cfe6:	bb 27       	eor	r27, r27
    cfe8:	93 95       	inc	r25
    cfea:	f6 95       	lsr	r31
    cfec:	87 95       	ror	r24
    cfee:	77 95       	ror	r23
    cff0:	67 95       	ror	r22
    cff2:	b7 95       	ror	r27
    cff4:	f1 11       	cpse	r31, r1
    cff6:	f8 cf       	rjmp	.-16     	; 0xcfe8 <__floatsisf+0x1c>
    cff8:	fa f4       	brpl	.+62     	; 0xd038 <__floatsisf+0x6c>
    cffa:	bb 0f       	add	r27, r27
    cffc:	11 f4       	brne	.+4      	; 0xd002 <__floatsisf+0x36>
    cffe:	60 ff       	sbrs	r22, 0
    d000:	1b c0       	rjmp	.+54     	; 0xd038 <__floatsisf+0x6c>
    d002:	6f 5f       	subi	r22, 0xFF	; 255
    d004:	7f 4f       	sbci	r23, 0xFF	; 255
    d006:	8f 4f       	sbci	r24, 0xFF	; 255
    d008:	9f 4f       	sbci	r25, 0xFF	; 255
    d00a:	16 c0       	rjmp	.+44     	; 0xd038 <__floatsisf+0x6c>
    d00c:	88 23       	and	r24, r24
    d00e:	11 f0       	breq	.+4      	; 0xd014 <__floatsisf+0x48>
    d010:	96 e9       	ldi	r25, 0x96	; 150
    d012:	11 c0       	rjmp	.+34     	; 0xd036 <__floatsisf+0x6a>
    d014:	77 23       	and	r23, r23
    d016:	21 f0       	breq	.+8      	; 0xd020 <__floatsisf+0x54>
    d018:	9e e8       	ldi	r25, 0x8E	; 142
    d01a:	87 2f       	mov	r24, r23
    d01c:	76 2f       	mov	r23, r22
    d01e:	05 c0       	rjmp	.+10     	; 0xd02a <__floatsisf+0x5e>
    d020:	66 23       	and	r22, r22
    d022:	71 f0       	breq	.+28     	; 0xd040 <__floatsisf+0x74>
    d024:	96 e8       	ldi	r25, 0x86	; 134
    d026:	86 2f       	mov	r24, r22
    d028:	70 e0       	ldi	r23, 0x00	; 0
    d02a:	60 e0       	ldi	r22, 0x00	; 0
    d02c:	2a f0       	brmi	.+10     	; 0xd038 <__floatsisf+0x6c>
    d02e:	9a 95       	dec	r25
    d030:	66 0f       	add	r22, r22
    d032:	77 1f       	adc	r23, r23
    d034:	88 1f       	adc	r24, r24
    d036:	da f7       	brpl	.-10     	; 0xd02e <__floatsisf+0x62>
    d038:	88 0f       	add	r24, r24
    d03a:	96 95       	lsr	r25
    d03c:	87 95       	ror	r24
    d03e:	97 f9       	bld	r25, 7
    d040:	08 95       	ret

0000d042 <__fp_cmp>:
    d042:	99 0f       	add	r25, r25
    d044:	00 08       	sbc	r0, r0
    d046:	55 0f       	add	r21, r21
    d048:	aa 0b       	sbc	r26, r26
    d04a:	e0 e8       	ldi	r30, 0x80	; 128
    d04c:	fe ef       	ldi	r31, 0xFE	; 254
    d04e:	16 16       	cp	r1, r22
    d050:	17 06       	cpc	r1, r23
    d052:	e8 07       	cpc	r30, r24
    d054:	f9 07       	cpc	r31, r25
    d056:	c0 f0       	brcs	.+48     	; 0xd088 <__fp_cmp+0x46>
    d058:	12 16       	cp	r1, r18
    d05a:	13 06       	cpc	r1, r19
    d05c:	e4 07       	cpc	r30, r20
    d05e:	f5 07       	cpc	r31, r21
    d060:	98 f0       	brcs	.+38     	; 0xd088 <__fp_cmp+0x46>
    d062:	62 1b       	sub	r22, r18
    d064:	73 0b       	sbc	r23, r19
    d066:	84 0b       	sbc	r24, r20
    d068:	95 0b       	sbc	r25, r21
    d06a:	39 f4       	brne	.+14     	; 0xd07a <__fp_cmp+0x38>
    d06c:	0a 26       	eor	r0, r26
    d06e:	61 f0       	breq	.+24     	; 0xd088 <__fp_cmp+0x46>
    d070:	23 2b       	or	r18, r19
    d072:	24 2b       	or	r18, r20
    d074:	25 2b       	or	r18, r21
    d076:	21 f4       	brne	.+8      	; 0xd080 <__fp_cmp+0x3e>
    d078:	08 95       	ret
    d07a:	0a 26       	eor	r0, r26
    d07c:	09 f4       	brne	.+2      	; 0xd080 <__fp_cmp+0x3e>
    d07e:	a1 40       	sbci	r26, 0x01	; 1
    d080:	a6 95       	lsr	r26
    d082:	8f ef       	ldi	r24, 0xFF	; 255
    d084:	81 1d       	adc	r24, r1
    d086:	81 1d       	adc	r24, r1
    d088:	08 95       	ret

0000d08a <__fp_inf>:
    d08a:	97 f9       	bld	r25, 7
    d08c:	9f 67       	ori	r25, 0x7F	; 127
    d08e:	80 e8       	ldi	r24, 0x80	; 128
    d090:	70 e0       	ldi	r23, 0x00	; 0
    d092:	60 e0       	ldi	r22, 0x00	; 0
    d094:	08 95       	ret

0000d096 <__fp_nan>:
    d096:	9f ef       	ldi	r25, 0xFF	; 255
    d098:	80 ec       	ldi	r24, 0xC0	; 192
    d09a:	08 95       	ret

0000d09c <__fp_pscA>:
    d09c:	00 24       	eor	r0, r0
    d09e:	0a 94       	dec	r0
    d0a0:	16 16       	cp	r1, r22
    d0a2:	17 06       	cpc	r1, r23
    d0a4:	18 06       	cpc	r1, r24
    d0a6:	09 06       	cpc	r0, r25
    d0a8:	08 95       	ret

0000d0aa <__fp_pscB>:
    d0aa:	00 24       	eor	r0, r0
    d0ac:	0a 94       	dec	r0
    d0ae:	12 16       	cp	r1, r18
    d0b0:	13 06       	cpc	r1, r19
    d0b2:	14 06       	cpc	r1, r20
    d0b4:	05 06       	cpc	r0, r21
    d0b6:	08 95       	ret

0000d0b8 <__fp_round>:
    d0b8:	09 2e       	mov	r0, r25
    d0ba:	03 94       	inc	r0
    d0bc:	00 0c       	add	r0, r0
    d0be:	11 f4       	brne	.+4      	; 0xd0c4 <__fp_round+0xc>
    d0c0:	88 23       	and	r24, r24
    d0c2:	52 f0       	brmi	.+20     	; 0xd0d8 <__fp_round+0x20>
    d0c4:	bb 0f       	add	r27, r27
    d0c6:	40 f4       	brcc	.+16     	; 0xd0d8 <__fp_round+0x20>
    d0c8:	bf 2b       	or	r27, r31
    d0ca:	11 f4       	brne	.+4      	; 0xd0d0 <__fp_round+0x18>
    d0cc:	60 ff       	sbrs	r22, 0
    d0ce:	04 c0       	rjmp	.+8      	; 0xd0d8 <__fp_round+0x20>
    d0d0:	6f 5f       	subi	r22, 0xFF	; 255
    d0d2:	7f 4f       	sbci	r23, 0xFF	; 255
    d0d4:	8f 4f       	sbci	r24, 0xFF	; 255
    d0d6:	9f 4f       	sbci	r25, 0xFF	; 255
    d0d8:	08 95       	ret

0000d0da <__fp_split3>:
    d0da:	57 fd       	sbrc	r21, 7
    d0dc:	90 58       	subi	r25, 0x80	; 128
    d0de:	44 0f       	add	r20, r20
    d0e0:	55 1f       	adc	r21, r21
    d0e2:	59 f0       	breq	.+22     	; 0xd0fa <__fp_splitA+0x10>
    d0e4:	5f 3f       	cpi	r21, 0xFF	; 255
    d0e6:	71 f0       	breq	.+28     	; 0xd104 <__fp_splitA+0x1a>
    d0e8:	47 95       	ror	r20

0000d0ea <__fp_splitA>:
    d0ea:	88 0f       	add	r24, r24
    d0ec:	97 fb       	bst	r25, 7
    d0ee:	99 1f       	adc	r25, r25
    d0f0:	61 f0       	breq	.+24     	; 0xd10a <__fp_splitA+0x20>
    d0f2:	9f 3f       	cpi	r25, 0xFF	; 255
    d0f4:	79 f0       	breq	.+30     	; 0xd114 <__fp_splitA+0x2a>
    d0f6:	87 95       	ror	r24
    d0f8:	08 95       	ret
    d0fa:	12 16       	cp	r1, r18
    d0fc:	13 06       	cpc	r1, r19
    d0fe:	14 06       	cpc	r1, r20
    d100:	55 1f       	adc	r21, r21
    d102:	f2 cf       	rjmp	.-28     	; 0xd0e8 <__fp_split3+0xe>
    d104:	46 95       	lsr	r20
    d106:	f1 df       	rcall	.-30     	; 0xd0ea <__fp_splitA>
    d108:	08 c0       	rjmp	.+16     	; 0xd11a <__fp_splitA+0x30>
    d10a:	16 16       	cp	r1, r22
    d10c:	17 06       	cpc	r1, r23
    d10e:	18 06       	cpc	r1, r24
    d110:	99 1f       	adc	r25, r25
    d112:	f1 cf       	rjmp	.-30     	; 0xd0f6 <__fp_splitA+0xc>
    d114:	86 95       	lsr	r24
    d116:	71 05       	cpc	r23, r1
    d118:	61 05       	cpc	r22, r1
    d11a:	08 94       	sec
    d11c:	08 95       	ret

0000d11e <__fp_zero>:
    d11e:	e8 94       	clt

0000d120 <__fp_szero>:
    d120:	bb 27       	eor	r27, r27
    d122:	66 27       	eor	r22, r22
    d124:	77 27       	eor	r23, r23
    d126:	cb 01       	movw	r24, r22
    d128:	97 f9       	bld	r25, 7
    d12a:	08 95       	ret

0000d12c <__gesf2>:
    d12c:	8a df       	rcall	.-236    	; 0xd042 <__fp_cmp>
    d12e:	08 f4       	brcc	.+2      	; 0xd132 <__gesf2+0x6>
    d130:	8f ef       	ldi	r24, 0xFF	; 255
    d132:	08 95       	ret

0000d134 <__mulsf3>:
    d134:	0b d0       	rcall	.+22     	; 0xd14c <__mulsf3x>
    d136:	c0 cf       	rjmp	.-128    	; 0xd0b8 <__fp_round>
    d138:	b1 df       	rcall	.-158    	; 0xd09c <__fp_pscA>
    d13a:	28 f0       	brcs	.+10     	; 0xd146 <__mulsf3+0x12>
    d13c:	b6 df       	rcall	.-148    	; 0xd0aa <__fp_pscB>
    d13e:	18 f0       	brcs	.+6      	; 0xd146 <__mulsf3+0x12>
    d140:	95 23       	and	r25, r21
    d142:	09 f0       	breq	.+2      	; 0xd146 <__mulsf3+0x12>
    d144:	a2 cf       	rjmp	.-188    	; 0xd08a <__fp_inf>
    d146:	a7 cf       	rjmp	.-178    	; 0xd096 <__fp_nan>
    d148:	11 24       	eor	r1, r1
    d14a:	ea cf       	rjmp	.-44     	; 0xd120 <__fp_szero>

0000d14c <__mulsf3x>:
    d14c:	c6 df       	rcall	.-116    	; 0xd0da <__fp_split3>
    d14e:	a0 f3       	brcs	.-24     	; 0xd138 <__mulsf3+0x4>

0000d150 <__mulsf3_pse>:
    d150:	95 9f       	mul	r25, r21
    d152:	d1 f3       	breq	.-12     	; 0xd148 <__mulsf3+0x14>
    d154:	95 0f       	add	r25, r21
    d156:	50 e0       	ldi	r21, 0x00	; 0
    d158:	55 1f       	adc	r21, r21
    d15a:	62 9f       	mul	r22, r18
    d15c:	f0 01       	movw	r30, r0
    d15e:	72 9f       	mul	r23, r18
    d160:	bb 27       	eor	r27, r27
    d162:	f0 0d       	add	r31, r0
    d164:	b1 1d       	adc	r27, r1
    d166:	63 9f       	mul	r22, r19
    d168:	aa 27       	eor	r26, r26
    d16a:	f0 0d       	add	r31, r0
    d16c:	b1 1d       	adc	r27, r1
    d16e:	aa 1f       	adc	r26, r26
    d170:	64 9f       	mul	r22, r20
    d172:	66 27       	eor	r22, r22
    d174:	b0 0d       	add	r27, r0
    d176:	a1 1d       	adc	r26, r1
    d178:	66 1f       	adc	r22, r22
    d17a:	82 9f       	mul	r24, r18
    d17c:	22 27       	eor	r18, r18
    d17e:	b0 0d       	add	r27, r0
    d180:	a1 1d       	adc	r26, r1
    d182:	62 1f       	adc	r22, r18
    d184:	73 9f       	mul	r23, r19
    d186:	b0 0d       	add	r27, r0
    d188:	a1 1d       	adc	r26, r1
    d18a:	62 1f       	adc	r22, r18
    d18c:	83 9f       	mul	r24, r19
    d18e:	a0 0d       	add	r26, r0
    d190:	61 1d       	adc	r22, r1
    d192:	22 1f       	adc	r18, r18
    d194:	74 9f       	mul	r23, r20
    d196:	33 27       	eor	r19, r19
    d198:	a0 0d       	add	r26, r0
    d19a:	61 1d       	adc	r22, r1
    d19c:	23 1f       	adc	r18, r19
    d19e:	84 9f       	mul	r24, r20
    d1a0:	60 0d       	add	r22, r0
    d1a2:	21 1d       	adc	r18, r1
    d1a4:	82 2f       	mov	r24, r18
    d1a6:	76 2f       	mov	r23, r22
    d1a8:	6a 2f       	mov	r22, r26
    d1aa:	11 24       	eor	r1, r1
    d1ac:	9f 57       	subi	r25, 0x7F	; 127
    d1ae:	50 40       	sbci	r21, 0x00	; 0
    d1b0:	8a f0       	brmi	.+34     	; 0xd1d4 <__mulsf3_pse+0x84>
    d1b2:	e1 f0       	breq	.+56     	; 0xd1ec <__mulsf3_pse+0x9c>
    d1b4:	88 23       	and	r24, r24
    d1b6:	4a f0       	brmi	.+18     	; 0xd1ca <__mulsf3_pse+0x7a>
    d1b8:	ee 0f       	add	r30, r30
    d1ba:	ff 1f       	adc	r31, r31
    d1bc:	bb 1f       	adc	r27, r27
    d1be:	66 1f       	adc	r22, r22
    d1c0:	77 1f       	adc	r23, r23
    d1c2:	88 1f       	adc	r24, r24
    d1c4:	91 50       	subi	r25, 0x01	; 1
    d1c6:	50 40       	sbci	r21, 0x00	; 0
    d1c8:	a9 f7       	brne	.-22     	; 0xd1b4 <__mulsf3_pse+0x64>
    d1ca:	9e 3f       	cpi	r25, 0xFE	; 254
    d1cc:	51 05       	cpc	r21, r1
    d1ce:	70 f0       	brcs	.+28     	; 0xd1ec <__mulsf3_pse+0x9c>
    d1d0:	5c cf       	rjmp	.-328    	; 0xd08a <__fp_inf>
    d1d2:	a6 cf       	rjmp	.-180    	; 0xd120 <__fp_szero>
    d1d4:	5f 3f       	cpi	r21, 0xFF	; 255
    d1d6:	ec f3       	brlt	.-6      	; 0xd1d2 <__mulsf3_pse+0x82>
    d1d8:	98 3e       	cpi	r25, 0xE8	; 232
    d1da:	dc f3       	brlt	.-10     	; 0xd1d2 <__mulsf3_pse+0x82>
    d1dc:	86 95       	lsr	r24
    d1de:	77 95       	ror	r23
    d1e0:	67 95       	ror	r22
    d1e2:	b7 95       	ror	r27
    d1e4:	f7 95       	ror	r31
    d1e6:	e7 95       	ror	r30
    d1e8:	9f 5f       	subi	r25, 0xFF	; 255
    d1ea:	c1 f7       	brne	.-16     	; 0xd1dc <__mulsf3_pse+0x8c>
    d1ec:	fe 2b       	or	r31, r30
    d1ee:	88 0f       	add	r24, r24
    d1f0:	91 1d       	adc	r25, r1
    d1f2:	96 95       	lsr	r25
    d1f4:	87 95       	ror	r24
    d1f6:	97 f9       	bld	r25, 7
    d1f8:	08 95       	ret

0000d1fa <strnlen_P>:
    d1fa:	fc 01       	movw	r30, r24
    d1fc:	05 90       	lpm	r0, Z+
    d1fe:	61 50       	subi	r22, 0x01	; 1
    d200:	70 40       	sbci	r23, 0x00	; 0
    d202:	01 10       	cpse	r0, r1
    d204:	d8 f7       	brcc	.-10     	; 0xd1fc <strnlen_P+0x2>
    d206:	80 95       	com	r24
    d208:	90 95       	com	r25
    d20a:	8e 0f       	add	r24, r30
    d20c:	9f 1f       	adc	r25, r31
    d20e:	08 95       	ret

0000d210 <_exit>:
    d210:	f8 94       	cli

0000d212 <__stop_program>:
    d212:	ff cf       	rjmp	.-2      	; 0xd212 <__stop_program>
