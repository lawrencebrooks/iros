
Iris.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800500  0000dc84  0000dd84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .noinit       00000400  00800100  00800100  0000dda0  2**5
                  CONTENTS, READONLY
  2 .text         0000dc84  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .bss          00000b01  00800510  00800510  0000dd94  2**1
                  ALLOC
  4 .stab         00000708  00000000  00000000  0000e1a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000002f1  00000000  00000000  0000e8a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  0000eb99  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000690  00000000  00000000  0000ebb0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000917c  00000000  00000000  0000f240  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001698  00000000  00000000  000183bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000022e6  00000000  00000000  00019a54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001658  00000000  00000000  0001bd3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00001cc3  00000000  00000000  0001d394  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00007af2  00000000  00000000  0001f057  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000828  00000000  00000000  00026b50  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ad 38 	jmp	0x715a	; 0x715a <__ctors_end>
       4:	0c 94 16 39 	jmp	0x722c	; 0x722c <__bad_interrupt>
       8:	0c 94 16 39 	jmp	0x722c	; 0x722c <__bad_interrupt>
       c:	0c 94 16 39 	jmp	0x722c	; 0x722c <__bad_interrupt>
      10:	0c 94 16 39 	jmp	0x722c	; 0x722c <__bad_interrupt>
      14:	0c 94 16 39 	jmp	0x722c	; 0x722c <__bad_interrupt>
      18:	0c 94 16 39 	jmp	0x722c	; 0x722c <__bad_interrupt>
      1c:	0c 94 16 39 	jmp	0x722c	; 0x722c <__bad_interrupt>
      20:	0c 94 8e 3e 	jmp	0x7d1c	; 0x7d1c <__vector_8>
      24:	0c 94 16 39 	jmp	0x722c	; 0x722c <__bad_interrupt>
      28:	0c 94 16 39 	jmp	0x722c	; 0x722c <__bad_interrupt>
      2c:	0c 94 16 39 	jmp	0x722c	; 0x722c <__bad_interrupt>
      30:	0c 94 16 39 	jmp	0x722c	; 0x722c <__bad_interrupt>
      34:	0c 94 5a 3c 	jmp	0x78b4	; 0x78b4 <__vector_13>
      38:	0c 94 9a 3c 	jmp	0x7934	; 0x7934 <__vector_14>
      3c:	0c 94 16 39 	jmp	0x722c	; 0x722c <__bad_interrupt>
      40:	0c 94 16 39 	jmp	0x722c	; 0x722c <__bad_interrupt>
      44:	0c 94 16 39 	jmp	0x722c	; 0x722c <__bad_interrupt>
      48:	0c 94 16 39 	jmp	0x722c	; 0x722c <__bad_interrupt>
      4c:	0c 94 16 39 	jmp	0x722c	; 0x722c <__bad_interrupt>
      50:	0c 94 16 39 	jmp	0x722c	; 0x722c <__bad_interrupt>
      54:	0c 94 16 39 	jmp	0x722c	; 0x722c <__bad_interrupt>
      58:	0c 94 16 39 	jmp	0x722c	; 0x722c <__bad_interrupt>
      5c:	0c 94 16 39 	jmp	0x722c	; 0x722c <__bad_interrupt>
      60:	0c 94 16 39 	jmp	0x722c	; 0x722c <__bad_interrupt>
      64:	0c 94 16 39 	jmp	0x722c	; 0x722c <__bad_interrupt>
      68:	0c 94 16 39 	jmp	0x722c	; 0x722c <__bad_interrupt>
      6c:	0c 94 16 39 	jmp	0x722c	; 0x722c <__bad_interrupt>
      70:	e4 60       	ori	r30, 0x04	; 4
      72:	f3 60       	ori	r31, 0x03	; 3
      74:	e7 60       	ori	r30, 0x07	; 7
      76:	f3 60       	ori	r31, 0x03	; 3
      78:	ea 60       	ori	r30, 0x0A	; 10
      7a:	f3 60       	ori	r31, 0x03	; 3
      7c:	ed 60       	ori	r30, 0x0D	; 13
      7e:	f3 60       	ori	r31, 0x03	; 3
      80:	f0 60       	ori	r31, 0x00	; 0
      82:	f3 60       	ori	r31, 0x03	; 3

00000084 <__trampolines_end>:
      84:	81 00       	.word	0x0081	; ????
      86:	45 00       	.word	0x0045	; ????
      88:	27 ff       	sbrs	r18, 7
      8a:	24 ff       	sbrs	r18, 4
      8c:	2a 90       	ld	r2, -Y
      8e:	2b 1c       	adc	r2, r11
      90:	21 0c       	add	r2, r1
      92:	22 fb       	bst	r18, 2
      94:	85 00       	.word	0x0085	; ????
      96:	84 00       	.word	0x0084	; ????
      98:	89 03       	fmulsu	r16, r17
      9a:	88 8d       	ldd	r24, Y+24	; 0x18
      9c:	81 09       	sbc	r24, r1
      9e:	6f 02       	muls	r22, r31
      a0:	44 42       	sbci	r20, 0x24	; 36
      a2:	47 00       	.word	0x0047	; ????
      a4:	45 01       	movw	r8, r10
      a6:	b0 83       	st	Z, r27
      a8:	b3 00       	.word	0x00b3	; ????
      aa:	b1 01       	movw	r22, r2
      ac:	25 11       	cpse	r18, r5
      ae:	8a 4f       	sbci	r24, 0xFA	; 250
      b0:	8b 03       	fmulsu	r16, r19

000000b2 <eeprom_format_table>:
      b2:	5a 55 01 20 01 01 00 38 08 00 00 00 00 00 00 00     ZU. ...8........
	...

000000d2 <patchCommands>:
      d2:	37 40 3a 40 96 40 9a 40 a1 40 42 40 47 40 4c 40     7@:@.@.@.@B@G@L@
      e2:	a9 40 4f 40 52 40 55 40 90 40 93 40 b9 40           .@O@R@U@.@.@.@

000000f0 <fader>:
      f0:	00 40 88 91 d2 e4 ad b5 b6 be bf ff                 .@..........

000000fc <map_uzeboxlogo2>:
      fc:	05 03 00 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f     ................
	...

0000010d <map_uzeboxlogo>:
     10d:	05 04 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d     ................
     11d:	00 0e 0f 10 11 12                                   ......

00000123 <logo_tileset>:
	...
     17f:	00 00 00 49 00 00 00 00 00 49 52 52 00 00 00 49     ...I.....IRR...I
     18f:	52 53 1c 25 00 49 52 52 24 25 25 1b 52 52 5c 2d     RS.%.IRR$%%.RR\-
     19f:	2d 1c 12 12 00 00 00 00 00 00 00 00 00 00 00 00     -...............
     1af:	40 49 49 49 00 40 49 49 52 5b 5b 5b 4a 52 52 5b     @III.@IIR[[[JRR[
     1bf:	1c 1c 13 12 5b 1c 24 1c 12 09 09 09 24 1b 12 09     ....[.$.....$...
     1cf:	09 09 09 0a 0a 0a 0a 0a 0a 0a 0a 13 0a 0a 12 0a     ................
     1df:	0a 12 13 0a 00 00 00 00 00 00 00 00 92 52 52 52     .............RRR
     1ef:	52 52 52 49 13 12 13 09 00 1c 1b 13 0a 12 12 40     RRRI...........@
     1ff:	1b 65 64 1c 09 0a 00 09 24 1b 1c 65 12 00 00 25     .ed.....$..e...%
     20f:	1c 1c 1c 1c 01 00 25 24 1c 1c 1c 1c 00 24 25 24     ......%$.....$%$
     21f:	24 24 1c 1c 00 00 00 00 00 00 00 00 49 40 00 00     $$..........I@..
     22f:	00 00 00 00 52 49 49 00 00 00 00 00 1c 5b 4a 48     ....RII......[JH
     23f:	00 00 00 00 1c 25 52 49 00 00 00 00 65 24 64 49     .....%RI....e$dI
     24f:	00 00 00 00 65 25 64 49 00 00 00 00 6d 2e 5c 49     ....e%dI....m.\I
	...
     267:	00 00 40 52 00 00 00 00 00 49 52 5c 00 00 00 00     ..@R.....IR\....
     277:	53 52 24 25 00 00 00 53 52 25 25 25 00 00 4a 52     SR$%...SR%%%..JR
     287:	25 25 1b 00 00 00 5b 25 13 00 00 1b 00 5b 53 00     %%....[%.....[S.
     297:	0a 1c 37 37 09 5b 1c 65 7f 37 2e 2e 52 2e 2e 1c     ..77.[.e.7..R...
     2a7:	13 13 12 00 2e 25 1b 13 12 00 00 12 1c 1c 12 00     .....%..........
     2b7:	00 12 25 1c 12 00 00 12 2e 37 1c 13 00 13 2e 37     ..%......7.....7
     2c7:	36 1c 13 1b 37 37 2e 2e 25 13 1c 1c 2e 2e 2e 2e     6...77..%.......
     2d7:	1b 1c 1c 1c 6e 6e 6e 1c 1c 1c 1c 1c 09 13 13 12     ....nnn.........
     2e7:	12 13 13 00 13 13 13 13 13 1c 00 09 13 13 13 13     ................
     2f7:	1c 01 00 37 13 13 13 1c 13 00 2e 2e 1b 1b 1c 1c     ...7............
     307:	00 1c 77 2e 1b 1b 25 00 13 7f 25 1c 1c 1c 01 0a     ..w...%...%.....
     317:	37 24 1c 1c 1c 13 0a 2e 25 25 09 00 13 2e 24 25     7$......%%....$%
     327:	25 25 25 25 2e 25 25 25 25 25 25 25 25 25 2d 2e     %%%%.%%%%%%%%%-.
     337:	25 1b 1c 1c 2e 2e 25 1c 13 25 1b 13 25 1c 1c 1c     %.....%..%..%...
     347:	1c 01 09 52 1c 1c 13 00 01 1c 5b 5c 0a 00 01 65     ...R......[\...e
     357:	77 5c 1b 00 01 6e 7f 6e 52 1b 00 00 6d 1c 52 49     w\...n.nR...m.RI
     367:	00 00 00 00 1c 13 53 00 00 00 00 00 1c 52 4a 00     ......S......RJ.
     377:	00 00 00 00 5b 5b 00 00 00 00 00 00 5c 00 00 00     ....[[......\...
	...
     3a3:	13 5b 7f 77 6e 6e 6e 6e 13 65 77 76 6e 6e 6e 6e     .[.wnnnn.ewvnnnn
     3b3:	1b 65 77 76 76 76 6e 77 1b 5b bf 76 b6 76 76 76     .ewvvvnw.[.v.vvv
     3c3:	09 13 6d bf b7 b6 b7 65 00 1b 12 5c 76 bf 76 6d     ..m....e...\v.vm
     3d3:	00 00 12 1b 12 5b 5b 5c 00 00 00 00 09 0a 12 13     .....[[\........
     3e3:	6e 77 24 1c 1c 1c 1c 1c 77 25 1c 1c 1c 1c 24 25     nw$.....w%....$%
     3f3:	6e 1c 1c 1c 24 25 25 1b 1c 1c 24 25 25 13 00 00     n...$%%...$%%...
     403:	64 6d 6d 1b 00 09 6e bf 6d 5b 09 12 6e bf 6d 5b     dmm...n.m[..n.m[
     413:	5b 12 5b 64 5b 12 13 12 13 1b 12 12 09 01 00 00     [.[d[...........
     423:	1c 24 2e 1c 09 00 09 6e 25 24 01 00 09 76 7f 7f     .$.....n%$...v..
     433:	00 00 12 77 7f 7f 64 12 64 bf bf 77 5b 12 1b 09     ...w..d.d..w[...
     443:	bf 6d 5b 12 1b 09 00 00 12 13 1b 09 00 00 00 00     .m[.............
     453:	09 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     463:	7f 7f 53 13 13 00 00 00 64 12 1b 01 00 00 00 00     ..S.....d.......
     473:	1b 12 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     4ab:	26 00 00 00 26 00 26 26 2f 00 00 00 2f 00 00 00     &...&.&&/.../...
     4bb:	37 00 00 00 37 00 00 00 ff 00 00 00 ff 00 00 00     7...7...........
     4cb:	bf 00 00 00 bf 00 00 bf 37 00 00 37 00 00 37 00     ........7..7..7.
     4db:	00 26 26 00 00 00 26 26 00 00 00 00 00 00 00 00     .&&...&&........
     4eb:	26 26 26 00 26 26 26 26 00 00 2f 00 2f 00 00 00     &&&.&&&&.././...
     4fb:	00 37 00 00 37 00 00 00 ff 00 00 00 ff ff ff ff     .7..7...........
     50b:	00 00 00 00 bf 00 00 00 00 00 00 00 37 00 00 00     ............7...
     51b:	26 26 26 00 26 26 26 26 00 00 00 00 00 00 00 00     &&&.&&&&........
     52b:	26 00 26 26 26 26 00 00 00 00 2f 00 00 00 2f 00     &.&&&&..../.../.
     53b:	00 00 37 00 00 00 37 00 00 00 ff ff ff ff 00 00     ..7...7.........
     54b:	00 00 bf 00 00 00 bf 00 00 00 37 00 00 00 37 00     ..........7...7.
     55b:	26 00 26 26 26 26 00 00 00 00 00 00 00 00 00 00     &.&&&&..........
     56b:	00 00 26 26 26 00 26 00 00 2f 00 00 2f 00 2f 00     ..&&&.&../.././.
     57b:	37 00 00 00 37 00 00 37 ff 00 00 00 ff 00 00 00     7...7..7........
     58b:	bf 00 00 00 bf 00 00 bf 37 00 00 37 00 00 37 00     ........7..7..7.
     59b:	26 26 26 00 00 00 26 00 00 00 00 00 00 00 00 00     &&&...&.........
     5ab:	00 00 26 00 00 00 00 00 00 00 2f 00 00 00 00 00     ..&......./.....
     5bb:	00 37 00 00 00 00 00 00 ff 00 00 00 00 00 00 00     .7..............
     5cb:	00 bf 00 00 00 00 00 00 00 00 37 00 00 00 00 00     ..........7.....
     5db:	00 00 26 00 00 00 00 00 00 00 00 00 00 00 00 00     ..&.............
	...
     5ff:	00 00 00 e4 00 00 00 00 09 9b ed f6 00 00 00 9b     ................
     60f:	a4 ad bf bf 00 52 9b a4 76 7f 7f b7 5b 9b 6d 77     .....R..v...[.mw
     61f:	7f 76 6e b7 00 00 00 00 00 00 00 00 00 00 00 00     .vn.............
     62f:	5b b6 f6 f6 00 5b f6 ff ff ff ff bf f6 ff ff ff     [....[..........
     63f:	ff bf bf ae ff bf ff ff ff b7 ad 65 bf bf ff ff     ...........e....
     64f:	b7 b6 ad 65 b7 bf ff ff bf b7 ae 6e b7 bf ff ff     ...e.......n....
     65f:	bf b7 b7 65 00 00 00 00 00 00 00 00 f6 f6 ed ed     ...e............
     66f:	ad a4 a4 9b b6 6d 6d 5c 52 6e 65 64 65 65 65 52     .....mm\RnedeeeR
     67f:	65 76 6d 25 5c 5c 52 53 6e 24 65 6e 65 52 52 6e     evm%\\RSn$eneRRn
     68f:	25 25 24 25 5b 52 77 2d 25 25 25 24 52 6e 6e 2d     %%$%[Rw-%%%$Rnn-
     69f:	25 25 25 25 00 00 00 00 00 00 00 00 9b 49 00 00     %%%%.........I..
     6af:	00 00 00 00 a4 9b 92 00 00 00 00 00 25 64 93 49     ............%d.I
     6bf:	00 00 00 00 65 2e 9b 52 00 00 00 00 6d 25 65 52     ....e..R....m%eR
     6cf:	00 00 00 00 6d 2d 65 52 00 00 00 00 6e 2e 64 52     ....m-eR....n.dR
	...
     6e7:	00 00 49 5b 00 00 00 00 00 4a 5b 65 00 00 00 00     ..I[.....J[e....
     6f7:	5b 9b 6d 2d 00 00 00 5b 5b 2d 2e 25 00 00 52 5b     [.m-...[[-.%..R[
     707:	2e 2e 1c 09 00 01 5b 2d 1c 01 09 1c 00 5c 5b 01     ......[-.....\[.
     717:	4a 65 77 7f 4a 5b 1c 6e 7f 77 77 76 9b 77 77 6d     Jew.J[.n.wwv.wwm
     727:	65 6e 6e a4 77 6e 65 65 65 5b a4 b7 25 25 5c 52     enn.wneee[..%%\R
     737:	52 6d bf bf 13 09 49 64 7f bf bf bf 09 5c 7f 7f     Rm....Id.....\..
     747:	bf bf b7 bf 7f 7f 77 7f 7f b7 bf bf 77 77 7f 7f     ......w.....ww..
     757:	6e b7 bf bf 77 7f 7f 6e 77 bf bf bf b6 ff ff ff     n...w..nw.......
     767:	bf bf b7 5b bf ff ff ff bf bf a4 64 bf ff ff ff     ...[.......d....
     777:	bf ad a4 7f bf ff ff ff bf a4 bf 7f ff ff ff bf     ................
     787:	ad bf bf bf ff ff ff b6 bf bf bf 77 ff ff f7 bf     ...........w....
     797:	bf bf 77 77 ff ff ff bf bf bf 64 52 6d 7f 6e 2e     ..ww......dRm.n.
     7a7:	2d 2d 25 6e 7f 76 6e 6e 6e 2e 25 65 77 77 77 76     --%n.vnnn.%ewwwv
     7b7:	2e 1c 25 24 7f 77 6e 25 1c 25 1c 1b 77 65 25 25     ..%$.wn%.%..we%%
     7c7:	1c 09 0a 5b 6e 6e 1c 09 49 25 64 64 5b 49 4a 6e     ...[nn..I%dd[IJn
     7d7:	7f 64 5c 00 53 77 bf 77 5b 5c 00 00 6e 25 5b 4a     .d\.Sw.w[\..n%[J
     7e7:	00 00 00 00 1c 1b 5b 00 00 00 00 00 24 5b 53 00     ......[.....$[S.
     7f7:	00 00 00 00 5b 5c 00 00 00 00 00 00 64 00 00 00     ....[\......d...
	...
     823:	5b 5c 7f bf 77 76 77 77 5c 6d 7f b7 77 77 77 77     [\..wvww\m..wwww
     833:	5c 6d 7f bf 77 77 77 bf 5c 64 bf bf bf bf bf 7f     \m..www.\d......
     843:	0a 5c 6e bf bf bf bf 76 00 65 64 6d bf bf bf bf     .\n....v.edm....
     853:	00 00 5b 6d 64 6d ad b6 00 00 00 00 12 5b 64 6d     ..[mdm.......[dm
     863:	77 7f 6e 6e 77 bf bf bf 7f 76 6d 76 77 bf bf bf     w.nnw....vmvw...
     873:	77 6d 6e 76 7f bf bf bf 6d 6e 76 7f bf b7 ad f6     wmnv....mnv.....
     883:	76 bf bf 76 a4 ad ff ff bf b6 64 ad ff ff ff ff     v..v......d.....
     893:	b6 ad bf ff ff ff ff f6 ad b6 ad 64 5b 52 00 00     ...........d[R..
     8a3:	ff ff bf bf ad 5b 64 bf ff ff b6 ad ad bf ff bf     .....[d.........
     8b3:	ff f6 ff ff ff ff bf 64 ff ff ff ff bf b6 76 5b     .......d......v[
     8c3:	ff ff ff bf bf 5b 00 00 ff ff ff 5c 00 00 00 00     .....[.....\....
     8d3:	a4 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     8e3:	bf bf 64 5c 5c 00 00 00 6e 5c 65 49 00 00 00 00     ..d\\...n\eI....
     8f3:	6d 5b 00 00 00 00 00 00 00 00 00 00 00 00 00 00     m[..............
	...

00000923 <logoInitPatches>:
     923:	00 00 00 2c 09 00 00 00 00                          ...,.....

0000092c <initPatch>:
     92c:	00 02 08 00 08 55 04 08 5a 00 00 f8 00 09 90 00     .....U..Z.......
     93c:	0a 1e 32 05 00 00 ff                                ..2....

00000943 <strTwist>:
     943:	49 52 49 53 20 57 41 53 20 41 20 46 4f 4f 4c 00     IRIS WAS A FOOL.
     953:	00 41 4e 44 20 53 4f 20 41 52 45 20 59 4f 55 00     .AND SO ARE YOU.
     963:	57 49 54 48 20 54 48 45 20 45 4d 45 52 41 4c 44     WITH THE EMERALD
     973:	53 20 52 45 54 55 52 4e 45 44 00 54 48 45 52 45     S RETURNED.THERE
     983:	20 49 53 20 4e 4f 20 53 54 4f 50 50 49 4e 47 20      IS NO STOPPING 
     993:	4f 55 52 00 44 4f 4d 49 4e 49 4f 4e 20 4f 56 45     OUR.DOMINION OVE
     9a3:	52 20 54 48 45 20 47 41 4c 41 58 59 00 00 4e 4f     R THE GALAXY..NO
     9b3:	57 20 59 4f 55 20 57 49 4c 4c 20 44 49 45 00 23     W YOU WILL DIE.#
	...

000009c4 <strReveal4>:
     9c4:	59 4f 55 20 44 4f 4e 54 20 4b 4e 4f 57 00 57 48     YOU DONT KNOW.WH
     9d4:	41 54 20 59 4f 55 20 41 52 45 20 44 4f 49 4e 47     AT YOU ARE DOING
     9e4:	00 23 00                                            .#.

000009e7 <strReveal3>:
     9e7:	59 4f 55 20 41 52 45 20 4d 41 4b 49 4e 47 20 41     YOU ARE MAKING A
     9f7:	20 4d 49 53 54 41 4b 45 00 23 00                     MISTAKE.#.

00000a02 <strReveal2>:
     a02:	59 4f 55 20 43 41 4e 54 20 48 41 56 45 20 54 48     YOU CANT HAVE TH
     a12:	45 4d 20 41 4c 4c 00 23 00                          EM ALL.#.

00000a1b <strReveal1>:
     a1b:	59 4f 55 20 41 52 45 20 50 45 52 53 49 53 54 45     YOU ARE PERSISTE
     a2b:	4e 54 00 23 00                                      NT.#.

00000a30 <strReveal0>:
     a30:	49 20 4b 4e 45 57 20 54 48 45 59 20 57 4f 55 4c     I KNEW THEY WOUL
     a40:	44 20 53 45 4e 44 20 59 4f 55 00 23 00              D SEND YOU.#.

00000a4d <strIntro>:
     a4d:	49 52 49 53 20 48 41 53 20 42 45 54 52 41 59 45     IRIS HAS BETRAYE
     a5d:	44 20 55 53 00 00 48 45 20 48 41 53 20 53 54 4f     D US..HE HAS STO
     a6d:	4c 45 4e 20 54 48 45 20 35 20 45 4d 45 52 41 4c     LEN THE 5 EMERAL
     a7d:	44 53 00 4f 46 20 50 4f 57 45 52 20 41 4e 44 20     DS.OF POWER AND 
     a8d:	57 49 4c 4c 20 53 55 52 45 4c 59 00 42 52 49 4e     WILL SURELY.BRIN
     a9d:	47 20 52 55 49 4e 20 54 4f 20 55 53 20 41 4c 4c     G RUIN TO US ALL
     aad:	00 00 44 45 53 54 52 4f 59 20 48 49 4d 20 41 4e     ..DESTROY HIM AN
     abd:	44 20 52 45 54 55 52 4e 20 54 48 45 00 45 4d 45     D RETURN THE.EME
     acd:	52 41 4c 44 53 20 54 4f 20 42 52 49 4e 47 20 50     RALDS TO BRING P
     add:	45 41 43 45 20 54 4f 00 54 48 45 20 47 41 4c 41     EACE TO.THE GALA
     aed:	58 59 00 23 00                                      XY.#.

00000af2 <default_scores>:
     af2:	55 5a 45 00 00 4c 4a 42 00 00 41 41 41 00 00 42     UZE..LJB..AAA..B
     b02:	42 42 00 00 43 43 43 00 00 44 44 44 00 00           BB..CCC..DDD..

00000b10 <strTally>:
     b10:	54 41 4c 4c 59 20 00                                TALLY .

00000b17 <strGameOver>:
     b17:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

00000b21 <strLevelBonus>:
     b21:	42 4f 4e 55 53 00                                   BONUS.

00000b27 <strLevelClear>:
     b27:	4c 45 56 45 4c 20 43 4c 45 41 52 00                 LEVEL CLEAR.

00000b33 <strPaused>:
     b33:	50 41 55 53 45 00                                   PAUSE.

00000b39 <strExitGame>:
     b39:	58 20 45 58 49 54 20 47 41 4d 45 00                 X EXIT GAME.

00000b45 <strMainMenu>:
     b45:	58 20 4d 41 49 4e 20 4d 45 4e 55 00                 X MAIN MENU.

00000b51 <strTime>:
     b51:	54 49 4d 45 20 00                                   TIME .

00000b57 <strLives>:
     b57:	4c 49 56 45 53 20 00                                LIVES .

00000b5e <strShield>:
     b5e:	53 48 49 45 4c 44 20 00                             SHIELD .

00000b66 <strScore>:
     b66:	53 43 4f 52 45 20 00                                SCORE .

00000b6d <strSelectHandle>:
	...

00000b6e <strHighScores>:
     b6e:	48 49 47 48 20 53 43 4f 52 45 53 00                 HIGH SCORES.

00000b7a <str1Player>:
     b7a:	53 54 41 52 54 00                                   START.

00000b80 <strMusic>:
     b80:	4d 55 53 49 43 20 42 59 20 54 41 4e 4e 45 52 20     MUSIC BY TANNER 
     b90:	48 45 4c 4c 41 4e 44 00                             HELLAND.

00000b98 <strCopyright>:
     b98:	32 30 31 36 20 4c 41 57 52 45 4e 43 45 20 42 52     2016 LAWRENCE BR
     ba8:	4f 4f 4b 53 00                                      OOKS.

00000bad <spacesong>:
     bad:	00 c0 00 00 c1 01 00 b0 07 7f 00 07 7f 00 90 43     ...............C
     bbd:	64 00 46 64 00 4b 64 00 4f 64 00 b1 07 74 00 91     d.Fd.Kd.Od...t..
     bcd:	33 64 00 ff 06 01 53 1d 91 33 64 0a 33 64 14 90     3d....S..3d.3d..
     bdd:	4b 64 00 46 64 00 43 64 00 91 33 64 27 33 64 14     Kd.Fd.Cd..3d'3d.
     bed:	90 46 64 00 43 64 00 4b 64 00 4f 64 00 91 33 64     .Fd.Cd.Kd.Od..3d
     bfd:	14 33 64 0a 90 41 64 00 4d 64 0a 41 64 00 46 64     .3d..Ad.Md.Ad.Fd
     c0d:	00 4a 64 00 4d 64 00 91 2e 64 1e 2e 64 09 2e 64     .Jd.Md...d..d..d
     c1d:	14 90 41 64 00 46 64 00 4a 64 00 91 2e 64 28 2e     ..Ad.Fd.Jd...d(.
     c2d:	64 14 90 41 64 00 46 64 00 4a 64 00 4d 64 00 91     d..Ad.Fd.Jd.Md..
     c3d:	2e 64 13 2e 64 0a 90 3f 64 00 4b 64 0a 3f 64 00     .d..d..?d.Kd.?d.
     c4d:	44 64 00 48 64 00 4b 64 00 91 2c 64 1e 2c 64 0a     Dd.Hd.Kd..,d.,d.
     c5d:	2c 64 14 90 41 64 00 46 64 00 4a 64 00 91 2c 64     ,d..Ad.Fd.Jd..,d
     c6d:	13 2e 64 14 90 46 64 00 91 2c 64 14 90 3f 64 00     ..d..Fd..,d..?d.
     c7d:	43 64 00 48 64 00 91 2e 64 14 30 64 14 90 43 64     Cd.Hd...d.0d..Cd
     c8d:	00 48 64 00 4b 64 00 4f 64 00 91 30 64 1d 30 64     .Hd.Kd.Od..0d.0d
     c9d:	0a 30 64 14 90 4b 64 00 48 64 00 43 64 00 91 30     .0d..Kd.Hd.Cd..0
     cad:	64 28 30 64 13 90 43 64 00 48 64 00 4b 64 00 4f     d(0d..Cd.Hd.Kd.O
     cbd:	64 00 91 30 64 14 30 64 0a 90 41 64 00 4d 64 0a     d..0d.0d..Ad.Md.
     ccd:	43 64 00 46 64 00 4b 64 00 4f 64 00 91 33 64 1e     Cd.Fd.Kd.Od..3d.
     cdd:	33 64 09 33 64 14 90 4b 64 00 46 64 00 43 64 00     3d.3d..Kd.Fd.Cd.
     ced:	91 33 64 28 33 64 14 90 46 64 00 43 64 00 4b 64     .3d(3d..Fd.Cd.Kd
     cfd:	00 4f 64 00 91 33 64 13 33 64 0a 90 41 64 00 4d     .Od..3d.3d..Ad.M
     d0d:	64 0a 41 64 00 46 64 00 4a 64 00 4d 64 00 91 2e     d.Ad.Fd.Jd.Md...
     d1d:	64 1e 2e 64 0a 2e 64 14 90 41 64 00 46 64 00 4a     d..d..d..Ad.Fd.J
     d2d:	64 00 91 2e 64 27 2e 64 14 90 41 64 00 46 64 00     d...d'.d..Ad.Fd.
     d3d:	4a 64 00 4d 64 00 91 2e 64 14 2e 64 0a 90 3f 64     Jd.Md...d..d..?d
     d4d:	00 4b 64 0a 3f 64 00 44 64 00 48 64 00 4b 64 00     .Kd.?d.Dd.Hd.Kd.
     d5d:	91 2c 64 1d 2c 64 0a 2c 64 14 90 41 64 00 46 64     .,d.,d.,d..Ad.Fd
     d6d:	00 4a 64 00 91 2c 64 14 2e 64 14 90 46 64 00 91     .Jd..,d..d..Fd..
     d7d:	2c 64 13 90 3f 64 00 43 64 00 48 64 00 91 30 64     ,d..?d.Cd.Hd..0d
     d8d:	14 30 64 14 90 48 64 00 91 2c 6e 14 2c 4b 06 90     .0d..Hd..,n.,K..
     d9d:	4a 64 0e 91 2c 4b 0d 90 4b 64 06 91 2c 6e 14 90     Jd..,K..Kd..,n..
     dad:	4d 64 00 91 2c 4b 14 2c 4b 07 90 4b 64 0d 91 2c     Md..,K.,K..Kd..,
     dbd:	6e 0d 90 4a 64 07 91 2c 4b 13 90 48 64 00 91 30     n..Jd..,K..Hd..0
     dcd:	6e 14 30 4b 07 90 4a 64 0d 91 30 4b 0d 90 46 64     n.0K..Jd..0K..Fd
     ddd:	07 91 30 6e 13 90 43 64 00 91 30 4b 14 30 4b 07     ..0n..Cd..0K.0K.
     ded:	90 46 64 0d 91 30 6e 0d 90 48 64 07 91 30 4b 14     .Fd..0n..Hd..0K.
     dfd:	90 48 64 00 91 2c 6e 13 2c 4b 07 90 4a 64 0d 91     .Hd..,n.,K..Jd..
     e0d:	2c 4b 0d 90 4b 64 07 91 2c 6e 14 90 4d 64 00 91     ,K..Kd..,n..Md..
     e1d:	2c 4b 14 2c 4b 06 90 4b 64 0d 91 2c 6e 0e 90 4d     ,K.,K..Kd..,n..M
     e2d:	64 06 91 2c 4b 14 90 4f 64 00 91 30 6e 14 30 4b     d..,K..Od..0n.0K
     e3d:	07 90 50 64 0d 91 30 4b 0e 90 4d 64 05 91 30 6e     ..Pd..0K..Md..0n
     e4d:	14 90 4f 64 00 91 30 4b 14 30 4b 07 90 4d 64 0d     ..Od..0K.0K..Md.
     e5d:	91 30 6e 0d 90 4b 64 07 91 30 4b 13 90 4d 64 00     .0n..Kd..0K..Md.
     e6d:	91 2b 6e 14 2b 4b 07 90 4f 64 0d 91 2b 4b 0d 90     .+n.+K..Od..+K..
     e7d:	4d 64 07 91 2b 6e 14 90 4b 64 00 91 2b 4b 13 2b     Md..+n..Kd..+K.+
     e8d:	4b 07 90 46 64 0d 91 2b 6e 0d 90 4b 64 07 91 2b     K..Fd..+n..Kd..+
     e9d:	4b 14 90 4d 64 00 91 2c 6e 13 2c 4b 07 90 50 64     K..Md..,n.,K..Pd
     ead:	0d 91 2c 4b 0d 90 4f 64 07 91 2c 6e 14 90 4d 64     ..,K..Od..,n..Md
     ebd:	00 91 2c 4b 14 2c 4b 06 90 48 64 0d 91 2c 6e 0e     ..,K.,K..Hd..,n.
     ecd:	90 4d 64 06 91 2c 4b 14 90 52 64 00 91 27 6e 0d     .Md..,K..Rd..'n.
     edd:	90 50 64 07 91 27 4b 06 90 4f 64 0e 50 64 00 91     .Pd..'K..Od.Pd..
     eed:	27 4b 0d 90 4f 64 06 91 27 6e 07 90 4d 64 0d 4b     'K..Od..'n..Md.K
     efd:	64 00 91 27 4b 14 27 4b 07 90 46 64 0d 91 27 6e     d..'K.'K..Fd..'n
     f0d:	0d 90 4b 64 07 91 27 4b 13 90 47 64 00 91 26 6e     ..Kd..'K..Gd..&n
     f1d:	14 26 4b 07 90 4a 64 0d 91 26 4b 0d 90 4f 64 07     .&K..Jd..&K..Od.
     f2d:	91 26 6e 14 90 53 64 00 91 26 4b 13 26 4b 07 90     .&n..Sd..&K.&K..
     f3d:	56 64 0d 91 26 6e 0d 90 5b 64 07 91 26 4b 14 90     Vd..&n..[d..&K..
     f4d:	3d 64 00 91 31 64 06 90 41 64 07 44 64 07 49 64     =d..1d..Ad.Dd.Id
     f5d:	06 4d 64 07 50 64 06 55 64 07 59 64 07 5c 64 06     .Md.Pd.Ud.Yd.\d.
     f6d:	59 64 07 55 64 06 50 64 07 4d 64 07 49 64 06 44     Yd.Ud.Pd.Md.Id.D
     f7d:	64 07 41 64 06 3d 64 07 38 64 07 3d 64 06 41 64     d.Ad.=d.8d.=d.Ad
     f8d:	07 44 64 06 49 64 07 44 64 07 41 64 06 43 64 00     .Dd.Id.Dd.Ad.Cd.
     f9d:	91 37 64 07 90 47 64 06 4a 64 07 4f 64 06 53 64     .7d..Gd.Jd.Od.Sd
     fad:	07 56 64 07 5b 64 06 5f 64 07 62 64 06 5f 64 07     .Vd.[d._d.bd._d.
     fbd:	5b 64 07 56 64 06 53 64 07 4f 64 06 4a 64 07 47     [d.Vd.Sd.Od.Jd.G
     fcd:	64 07 43 64 06 3e 64 07 43 64 06 47 64 07 4a 64     d.Cd.>d.Cd.Gd.Jd
     fdd:	07 4f 64 06 4a 64 07 47 64 06 46 64 00 91 3a 64     .Od.Jd.Gd.Fd..:d
     fed:	07 90 4a 64 07 4d 64 06 52 64 07 56 64 06 59 64     ..Jd.Md.Rd.Vd.Yd
     ffd:	07 5e 64 07 62 64 06 65 64 07 62 64 06 5e 64 07     .^d.bd.ed.bd.^d.
    100d:	59 64 07 56 64 06 52 64 07 4d 64 06 4a 64 07 46     Yd.Vd.Rd.Md.Jd.F
    101d:	64 07 41 64 06 46 64 07 4a 64 06 4d 64 07 52 64     d.Ad.Fd.Jd.Md.Rd
    102d:	07 4d 64 06 4a 64 07 54 7f 00 43 64 00 48 64 00     .Md.Jd.T..Cd.Hd.
    103d:	4b 64 00 4f 64 00 91 30 64 1d 30 64 0a 30 64 14     Kd.Od..0d.0d.0d.
    104d:	90 4b 64 00 48 64 00 43 64 00 91 30 64 28 30 64     .Kd.Hd.Cd..0d(0d
    105d:	14 90 43 64 00 48 64 00 4b 64 00 4f 64 00 91 30     ..Cd.Hd.Kd.Od..0
    106d:	64 13 30 64 0a 90 41 64 00 4d 64 0a 43 64 00 46     d.0d..Ad.Md.Cd.F
    107d:	64 00 4b 64 00 4f 64 00 91 33 64 1e 33 64 0a 33     d.Kd.Od..3d.3d.3
    108d:	64 14 90 4b 64 00 46 64 00 43 64 00 91 33 64 27     d..Kd.Fd.Cd..3d'
    109d:	33 64 14 90 46 64 00 43 64 00 4b 64 00 4f 64 00     3d..Fd.Cd.Kd.Od.
    10ad:	91 33 64 14 33 64 0a 90 41 64 00 4d 64 0a 41 64     .3d.3d..Ad.Md.Ad
    10bd:	00 46 64 00 4a 64 00 4d 64 00 91 2e 64 1d 2e 64     .Fd.Jd.Md...d..d
    10cd:	0a 2e 64 14 90 41 64 00 46 64 00 4a 64 00 91 2e     ..d..Ad.Fd.Jd...
    10dd:	64 27 2e 64 14 90 41 64 00 46 64 00 4a 64 00 4d     d'.d..Ad.Fd.Jd.M
    10ed:	64 00 91 2e 64 14 2e 64 0a 90 3f 64 00 4b 64 0a     d...d..d..?d.Kd.
    10fd:	3f 64 00 44 64 00 48 64 00 4b 64 00 91 2c 64 1e     ?d.Dd.Hd.Kd..,d.
    110d:	2c 64 09 2c 64 14 90 41 64 00 46 64 00 4a 64 00     ,d.,d..Ad.Fd.Jd.
    111d:	91 2c 64 14 2e 64 14 90 46 64 00 91 2c 64 14 90     .,d..d..Fd..,d..
    112d:	3f 64 00 43 64 00 48 64 00 91 2e 64 13 30 64 14     ?d.Cd.Hd...d.0d.
    113d:	90 43 64 00 48 64 00 4b 64 00 4f 64 00 91 30 64     .Cd.Hd.Kd.Od..0d
    114d:	1e 30 64 0a 30 64 14 90 4b 64 00 48 64 00 43 64     .0d.0d..Kd.Hd.Cd
    115d:	00 91 30 64 27 30 64 14 90 43 64 00 48 64 00 4b     ..0d'0d..Cd.Hd.K
    116d:	64 00 4f 64 00 91 30 64 14 30 64 0a 90 41 64 00     d.Od..0d.0d..Ad.
    117d:	4d 64 0a 43 64 00 46 64 00 4b 64 00 4f 64 00 91     Md.Cd.Fd.Kd.Od..
    118d:	33 64 1d 33 64 0a 33 64 14 90 4b 64 00 46 64 00     3d.3d.3d..Kd.Fd.
    119d:	43 64 00 91 33 64 28 33 64 13 90 46 64 00 43 64     Cd..3d(3d..Fd.Cd
    11ad:	00 4b 64 00 4f 64 00 91 33 64 14 33 64 0a 90 41     .Kd.Od..3d.3d..A
    11bd:	64 00 4d 64 0a 41 64 00 46 64 00 4a 64 00 4d 64     d.Md.Ad.Fd.Jd.Md
    11cd:	00 91 2e 64 1e 2e 64 09 2e 64 14 90 41 64 00 46     ...d..d..d..Ad.F
    11dd:	64 00 4a 64 00 91 2e 64 28 2e 64 14 90 41 64 00     d.Jd...d(.d..Ad.
    11ed:	46 64 00 4a 64 00 4d 64 00 91 2e 64 13 2e 64 0a     Fd.Jd.Md...d..d.
    11fd:	90 3f 64 00 4b 64 0a 3f 64 00 44 64 00 48 64 00     .?d.Kd.?d.Dd.Hd.
    120d:	4b 64 00 91 2c 64 1e 2c 64 0a 2c 64 14 90 41 64     Kd..,d.,d.,d..Ad
    121d:	00 46 64 00 4a 64 00 91 2c 64 13 2e 64 14 90 46     .Fd.Jd..,d..d..F
    122d:	64 00 91 2c 64 0f ff 06 01 45 05 90 3f 64 00 43     d..,d....E..?d.C
    123d:	64 00 48 64 00 91 30 64 14 30 64 81 0a ff 2f 00     d.Hd..0d.0d.../.

0000124d <planetsong>:
    124d:	00 c0 00 00 c1 01 00 b0 07 7f 00 b1 07 74 00 ff     .............t..
    125d:	06 01 53 1b 90 48 78 00 91 30 6e 07 90 43 55 00     ..S..Hx..0n..CU.
    126d:	91 30 50 07 90 48 55 00 91 30 50 07 90 4a 78 00     .0P..HU..0P..Jx.
    127d:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 48 55 00     .0n..KU..0P..HU.
    128d:	91 30 50 07 90 4a 78 00 91 30 6e 07 90 4b 55 00     .0P..Jx..0n..KU.
    129d:	91 30 50 07 90 4d 55 00 91 30 50 07 90 4a 78 00     .0P..MU..0P..Jx.
    12ad:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 4d 55 00     .0n..KU..0P..MU.
    12bd:	91 30 50 07 90 4f 78 00 91 30 6e 07 90 4b 55 00     .0P..Ox..0n..KU.
    12cd:	91 30 50 07 90 4d 78 00 91 2e 6e 07 90 4f 55 07     .0P..Mx...n..OU.
    12dd:	50 78 00 91 30 6e 06 90 4d 55 00 91 30 50 07 90     Px..0n..MU..0P..
    12ed:	4f 55 00 91 30 50 07 90 4b 78 00 91 30 6e 07 90     OU..0P..Kx..0n..
    12fd:	4d 55 00 91 30 50 07 90 4a 55 00 91 30 50 07 30     MU..0P..JU..0P.0
    130d:	6e 03 90 4b 78 04 48 55 00 91 30 50 07 90 4a 55     n..Kx.HU..0P..JU
    131d:	00 91 30 50 07 90 46 78 00 91 30 6e 07 90 4d 55     ..0P..Fx..0n..MU
    132d:	00 91 30 50 07 90 46 78 00 91 30 50 07 90 4f 55     ..0P..Fx..0P..OU
    133d:	00 91 30 6e 07 90 46 78 00 91 30 50 07 90 4d 55     ..0n..Fx..0P..MU
    134d:	00 91 2e 6e 07 90 46 78 07 48 55 00 91 30 6e 07     ...n..Fx.HU..0n.
    135d:	90 43 55 00 91 30 50 07 90 48 55 00 91 30 50 07     .CU..0P..HU..0P.
    136d:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    137d:	90 48 55 00 91 30 50 06 90 4a 55 00 91 30 6e 07     .HU..0P..JU..0n.
    138d:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 30 50 07     .KU..0P..MU..0P.
    139d:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    13ad:	90 4d 55 00 91 30 50 07 90 4f 55 00 91 30 6e 07     .MU..0P..OU..0n.
    13bd:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 2e 6e 07     .KU..0P..MU...n.
    13cd:	90 4f 55 07 50 55 00 91 30 6e 07 90 4d 55 00 91     .OU.PU..0n..MU..
    13dd:	30 50 07 90 4f 55 00 91 30 50 07 90 4b 55 00 91     0P..OU..0P..KU..
    13ed:	30 6e 07 90 4d 55 00 91 30 50 07 90 4a 55 00 91     0n..MU..0P..JU..
    13fd:	30 50 07 30 6e 02 90 4b 55 05 48 55 00 91 30 50     0P.0n..KU.HU..0P
    140d:	07 90 4a 55 00 91 30 50 07 90 46 55 00 91 30 6e     ..JU..0P..FU..0n
    141d:	06 90 4d 55 00 91 30 50 07 90 46 55 00 91 30 50     ..MU..0P..FU..0P
    142d:	07 90 4f 55 00 91 30 6e 07 90 46 55 00 91 30 50     ..OU..0n..FU..0P
    143d:	07 90 4d 55 00 91 2e 6e 07 90 46 55 07 48 78 00     ..MU...n..FU.Hx.
    144d:	91 2c 6e 07 90 43 55 00 91 2c 50 07 90 48 55 00     .,n..CU..,P..HU.
    145d:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
    146d:	91 2c 50 07 90 48 55 00 91 2c 50 07 90 4a 78 00     .,P..HU..,P..Jx.
    147d:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 55 00     .,n..KU..,P..MU.
    148d:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
    149d:	91 2c 50 07 90 4d 55 00 91 2c 50 07 90 4f 78 00     .,P..MU..,P..Ox.
    14ad:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 78 00     .,n..KU..,P..Mx.
    14bd:	91 2b 6e 06 90 4f 55 07 50 78 00 91 2c 6e 07 90     .+n..OU.Px..,n..
    14cd:	4d 55 00 91 2c 50 07 90 4f 55 00 91 2c 50 07 90     MU..,P..OU..,P..
    14dd:	4b 78 00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90     Kx..,n..MU..,P..
    14ed:	4a 55 00 91 2c 50 07 2c 6e 02 90 4b 78 05 48 55     JU..,P.,n..Kx.HU
    14fd:	00 91 2c 50 07 90 4a 55 00 91 2c 50 07 90 46 78     ..,P..JU..,P..Fx
    150d:	00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90 46 78     ..,n..MU..,P..Fx
    151d:	00 91 2c 50 07 90 4f 55 00 91 2c 6e 07 90 46 78     ..,P..OU..,n..Fx
    152d:	00 91 2c 50 07 90 4d 55 00 91 2b 6e 07 90 46 78     ..,P..MU..+n..Fx
    153d:	07 48 55 00 91 29 6e 07 90 43 55 00 91 29 50 07     .HU..)n..CU..)P.
    154d:	90 48 55 00 91 29 50 06 90 4a 55 00 91 29 6e 07     .HU..)P..JU..)n.
    155d:	90 4b 55 00 91 29 50 07 90 48 55 00 91 29 50 07     .KU..)P..HU..)P.
    156d:	90 4a 55 00 91 2b 6e 07 90 4b 55 00 91 2b 50 07     .JU..+n..KU..+P.
    157d:	90 4d 55 00 91 2b 50 07 90 4a 55 00 91 2b 6e 07     .MU..+P..JU..+n.
    158d:	90 4b 55 00 91 2b 50 07 90 4d 55 00 91 2b 50 07     .KU..+P..MU..+P.
    159d:	90 4f 55 00 91 2c 6e 07 90 4b 55 00 91 2c 50 07     .OU..,n..KU..,P.
    15ad:	90 4d 55 00 91 2c 6e 07 90 4f 55 07 50 55 00 91     .MU..,n..OU.PU..
    15bd:	2e 6e 07 90 4d 55 00 91 2e 50 07 90 4f 55 00 91     .n..MU...P..OU..
    15cd:	2e 50 07 90 4b 55 00 91 2e 6e 07 90 4d 55 00 91     .P..KU...n..MU..
    15dd:	2e 50 07 90 4a 55 00 91 2e 50 07 2e 6e 02 90 4b     .P..JU...P..n..K
    15ed:	55 05 48 55 00 91 2e 50 06 90 4a 55 00 91 2e 50     U.HU...P..JU...P
    15fd:	07 90 46 55 00 91 2e 6e 07 90 4d 55 00 91 2e 50     ..FU...n..MU...P
    160d:	07 90 46 55 00 91 2e 50 07 90 4f 55 00 91 2e 6e     ..FU...P..OU...n
    161d:	07 90 46 55 00 91 2e 50 07 90 4d 55 00 91 2e 6e     ..FU...P..MU...n
    162d:	07 90 46 55 07 48 55 00 91 30 6e 07 90 43 55 00     ..FU.HU..0n..CU.
    163d:	91 30 50 07 90 48 55 00 91 30 50 07 90 4a 55 00     .0P..HU..0P..JU.
    164d:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 48 55 00     .0n..KU..0P..HU.
    165d:	91 30 50 07 90 4a 55 00 91 30 6e 07 90 4b 55 00     .0P..JU..0n..KU.
    166d:	91 30 50 07 90 4d 55 00 91 30 50 07 90 4a 55 00     .0P..MU..0P..JU.
    167d:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 4d 55 00     .0n..KU..0P..MU.
    168d:	91 30 50 07 90 4f 55 00 91 30 6e 06 90 4b 55 00     .0P..OU..0n..KU.
    169d:	91 30 50 07 90 4d 55 00 91 2e 6e 07 90 4f 55 07     .0P..MU...n..OU.
    16ad:	50 55 00 91 30 6e 07 90 4d 55 00 91 30 50 07 90     PU..0n..MU..0P..
    16bd:	4f 55 00 91 30 50 07 90 4b 55 00 91 30 6e 07 90     OU..0P..KU..0n..
    16cd:	4d 55 00 91 30 50 07 90 4a 55 00 91 30 50 07 30     MU..0P..JU..0P.0
    16dd:	6e 02 90 4b 55 05 48 55 00 91 30 50 07 90 4a 55     n..KU.HU..0P..JU
    16ed:	00 91 30 50 07 90 46 55 00 91 30 6e 07 90 4d 55     ..0P..FU..0n..MU
    16fd:	00 91 30 50 07 90 46 55 00 91 30 50 07 90 4f 55     ..0P..FU..0P..OU
    170d:	00 91 30 6e 07 90 46 55 00 91 30 50 07 90 4d 55     ..0n..FU..0P..MU
    171d:	00 91 2e 6e 07 90 46 55 07 48 55 00 91 30 6e 06     ...n..FU.HU..0n.
    172d:	90 43 55 00 91 30 50 07 90 48 55 00 91 30 50 07     .CU..0P..HU..0P.
    173d:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    174d:	90 48 55 00 91 30 50 07 90 4a 55 00 91 30 6e 07     .HU..0P..JU..0n.
    175d:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 30 50 07     .KU..0P..MU..0P.
    176d:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    177d:	90 4d 55 00 91 30 50 07 90 4f 55 00 91 30 6e 07     .MU..0P..OU..0n.
    178d:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 2e 6e 07     .KU..0P..MU...n.
    179d:	90 4f 55 07 50 55 00 91 30 6e 07 90 4d 55 00 91     .OU.PU..0n..MU..
    17ad:	30 50 07 90 4f 55 00 91 30 50 07 90 4b 55 00 91     0P..OU..0P..KU..
    17bd:	30 6e 07 90 4d 55 00 91 30 50 07 90 4a 55 00 91     0n..MU..0P..JU..
    17cd:	30 50 06 30 6e 03 90 4b 55 04 48 55 00 91 30 50     0P.0n..KU.HU..0P
    17dd:	07 90 4a 55 00 91 30 50 07 90 46 55 00 91 30 6e     ..JU..0P..FU..0n
    17ed:	07 90 4d 55 00 91 30 50 07 90 46 55 00 91 30 50     ..MU..0P..FU..0P
    17fd:	07 90 4f 55 00 91 30 6e 07 90 46 55 00 91 30 50     ..OU..0n..FU..0P
    180d:	07 90 4d 55 00 91 2e 6e 07 90 46 55 07 48 78 00     ..MU...n..FU.Hx.
    181d:	91 2c 6e 07 90 43 55 00 91 2c 50 07 90 48 55 00     .,n..CU..,P..HU.
    182d:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
    183d:	91 2c 50 07 90 48 55 00 91 2c 50 07 90 4a 78 00     .,P..HU..,P..Jx.
    184d:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 55 00     .,n..KU..,P..MU.
    185d:	91 2c 50 07 90 4a 78 00 91 2c 6e 06 90 4b 55 00     .,P..Jx..,n..KU.
    186d:	91 2c 50 07 90 4d 55 00 91 2c 50 07 90 4f 78 00     .,P..MU..,P..Ox.
    187d:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 78 00     .,n..KU..,P..Mx.
    188d:	91 2b 6e 07 90 4f 55 07 50 78 00 91 2c 6e 07 90     .+n..OU.Px..,n..
    189d:	4d 55 00 91 2c 50 07 90 4f 55 00 91 2c 50 07 90     MU..,P..OU..,P..
    18ad:	4b 78 00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90     Kx..,n..MU..,P..
    18bd:	4a 55 00 91 2c 50 07 2c 6e 02 90 4b 78 05 48 55     JU..,P.,n..Kx.HU
    18cd:	00 91 2c 50 07 90 4a 55 00 91 2c 50 07 90 46 78     ..,P..JU..,P..Fx
    18dd:	00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90 46 78     ..,n..MU..,P..Fx
    18ed:	00 91 2c 50 07 90 4f 55 00 91 2c 6e 07 90 46 78     ..,P..OU..,n..Fx
    18fd:	00 91 2c 50 07 90 4d 55 00 91 2b 6e 06 90 46 78     ..,P..MU..+n..Fx
    190d:	07 48 55 00 91 29 6e 07 90 43 55 00 91 29 50 07     .HU..)n..CU..)P.
    191d:	90 48 55 00 91 29 50 07 90 4a 55 00 91 29 6e 07     .HU..)P..JU..)n.
    192d:	90 4b 55 00 91 29 50 07 90 48 55 00 91 29 50 07     .KU..)P..HU..)P.
    193d:	90 4a 55 00 91 2b 6e 07 90 4b 55 00 91 2b 50 07     .JU..+n..KU..+P.
    194d:	90 4d 55 00 91 2b 50 07 90 4a 55 00 91 2b 6e 07     .MU..+P..JU..+n.
    195d:	90 4b 55 00 91 2b 50 07 90 4d 55 00 91 2b 50 07     .KU..+P..MU..+P.
    196d:	90 4f 55 00 91 2c 6e 07 90 4b 55 00 91 2c 50 07     .OU..,n..KU..,P.
    197d:	90 4d 55 00 91 2c 6e 07 90 4f 55 07 50 55 00 91     .MU..,n..OU.PU..
    198d:	2e 6e 07 90 4d 55 00 91 2e 50 07 90 4f 55 00 91     .n..MU...P..OU..
    199d:	2e 50 07 90 4b 55 00 91 2e 6e 06 90 4d 55 00 91     .P..KU...n..MU..
    19ad:	2e 50 07 90 4a 55 00 91 2e 50 07 2e 6e 03 90 4b     .P..JU...P..n..K
    19bd:	55 04 48 55 00 91 2e 50 07 90 4a 55 00 91 2e 50     U.HU...P..JU...P
    19cd:	07 90 46 55 00 91 2e 6e 07 90 4d 55 00 91 2e 50     ..FU...n..MU...P
    19dd:	07 90 46 55 00 91 2e 50 07 90 4f 55 00 91 30 6e     ..FU...P..OU..0n
    19ed:	07 90 46 55 00 91 30 50 07 90 4d 55 00 91 2e 6e     ..FU..0P..MU...n
    19fd:	07 90 46 55 07 54 64 00 48 64 00 91 30 6e 07 30     ..FU.Td.Hd..0n.0
    1a0d:	50 07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e     P.0P.0n.0P.0P.0n
    1a1d:	07 30 50 06 30 50 07 30 6e 07 30 50 07 30 50 07     .0P.0P.0n.0P.0P.
    1a2d:	30 6e 07 30 50 07 2e 6e 0e 30 6e 07 30 50 07 30     0n.0P..n.0n.0P.0
    1a3d:	50 07 30 6e 07 30 50 07 30 50 07 30 6e 07 30 50     P.0n.0P.0P.0n.0P
    1a4d:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 06     .0P.0n.0P.0P.0n.
    1a5d:	30 50 07 2e 6e 0e 90 33 64 00 37 64 00 3c 64 00     0P..n..3d.7d.<d.
    1a6d:	91 30 6e 07 30 50 07 30 50 07 90 32 64 00 37 64     .0n.0P.0P..2d.7d
    1a7d:	00 3a 64 00 91 30 6e 07 30 50 07 30 50 07 90 33     .:d..0n.0P.0P..3
    1a8d:	64 00 37 64 00 3c 64 00 91 30 6e 07 30 50 07 30     d.7d.<d..0n.0P.0
    1a9d:	50 07 90 37 64 00 3a 64 00 3e 64 00 91 30 6e 07     P..7d.:d.>d..0n.
    1aad:	30 50 07 30 50 07 90 37 64 00 3c 64 00 3f 64 00     0P.0P..7d.<d.?d.
    1abd:	91 30 6e 07 30 50 07 90 37 64 00 3a 64 00 3e 64     .0n.0P..7d.:d.>d
    1acd:	00 91 30 6e 07 30 6e 07 90 3a 64 00 43 64 00 3f     ..0n.0n..:d.Cd.?
    1add:	64 00 91 33 6e 06 33 50 07 33 50 07 33 6e 07 33     d..3n.3P.3P.3n.3
    1aed:	50 07 33 50 07 90 37 64 00 3a 64 00 3f 64 00 91     P.3P..7d.:d.?d..
    1afd:	33 6e 07 33 50 07 33 50 07 33 6e 07 33 50 07 33     3n.3P.3P.3n.3P.3
    1b0d:	50 07 90 3a 64 00 3f 64 00 43 64 00 91 33 6e 07     P..:d.?d.Cd..3n.
    1b1d:	33 50 07 33 6e 07 33 6e 07 90 41 64 00 3e 64 00     3P.3n.3n..Ad.>d.
    1b2d:	3a 64 00 91 2e 6e 07 2e 50 07 2e 50 07 2e 6e 07     :d...n..P..P..n.
    1b3d:	2e 50 07 2e 50 06 90 35 64 00 3a 64 00 3e 64 00     .P..P..5d.:d.>d.
    1b4d:	91 2e 6e 07 2e 50 07 2e 50 07 2e 6e 07 2e 50 07     ..n..P..P..n..P.
    1b5d:	2e 50 07 90 3a 64 00 3e 64 00 41 64 00 91 2e 6e     .P..:d.>d.Ad...n
    1b6d:	07 2e 50 07 2e 6e 07 2e 6e 07 90 37 64 00 3c 64     ..P..n..n..7d.<d
    1b7d:	00 3f 64 00 91 30 6e 07 30 50 07 30 50 07 30 6e     .?d..0n.0P.0P.0n
    1b8d:	07 30 50 07 30 50 07 30 6e 07 30 50 07 30 50 07     .0P.0P.0n.0P.0P.
    1b9d:	30 6e 06 30 50 07 30 50 07 30 6e 07 30 50 07 2e     0n.0P.0P.0n.0P..
    1bad:	6e 0e 30 6e 07 30 50 07 30 50 07 30 6e 07 30 50     n.0n.0P.0P.0n.0P
    1bbd:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 07     .0P.0n.0P.0P.0n.
    1bcd:	30 50 07 30 50 07 30 6e 07 30 50 07 2e 6e 0d 90     0P.0P.0n.0P..n..
    1bdd:	33 64 00 37 64 00 3c 64 00 91 30 6e 07 30 50 07     3d.7d.<d..0n.0P.
    1bed:	30 50 07 90 32 64 00 37 64 00 3a 64 00 91 30 6e     0P..2d.7d.:d..0n
    1bfd:	07 30 50 07 30 50 07 90 33 64 00 37 64 00 3c 64     .0P.0P..3d.7d.<d
    1c0d:	00 91 30 6e 07 30 50 07 30 50 07 90 37 64 00 3a     ..0n.0P.0P..7d.:
    1c1d:	64 00 3e 64 00 91 30 6e 07 30 50 07 30 50 07 90     d.>d..0n.0P.0P..
    1c2d:	37 64 00 3c 64 00 3f 64 00 91 30 6e 07 30 50 07     7d.<d.?d..0n.0P.
    1c3d:	90 37 64 00 3a 64 00 3e 64 00 91 2e 6e 0e 90 3a     .7d.:d.>d...n..:
    1c4d:	64 00 43 64 00 3f 64 00 91 33 6e 07 33 50 07 33     d.Cd.?d..3n.3P.3
    1c5d:	50 07 33 6e 06 33 50 07 33 50 07 90 37 64 00 3a     P.3n.3P.3P..7d.:
    1c6d:	64 00 3f 64 00 91 33 6e 07 33 50 07 33 50 07 33     d.?d..3n.3P.3P.3
    1c7d:	6e 07 33 50 07 33 50 07 90 3a 64 00 3f 64 00 43     n.3P.3P..:d.?d.C
    1c8d:	64 00 91 33 6e 07 33 50 07 32 6e 0e 90 41 64 00     d..3n.3P.2n..Ad.
    1c9d:	3e 64 00 3a 64 00 91 2e 6e 07 2e 50 07 2e 50 07     >d.:d...n..P..P.
    1cad:	2e 6e 07 2e 50 07 2e 50 07 90 35 64 00 3a 64 00     .n..P..P..5d.:d.
    1cbd:	3e 64 00 91 2e 6e 07 2e 50 06 2e 50 07 2e 6e 07     >d...n..P..P..n.
    1ccd:	2e 50 07 2e 50 07 90 3a 64 00 3e 64 00 41 64 00     .P..P..:d.>d.Ad.
    1cdd:	91 2e 6e 05 ff 06 01 45 02 91 2e 50 07 2c 6e 0e     ..n....E...P.,n.
    1ced:	90 37 64 00 3c 64 00 3f 64 00 91 30 6e 07 30 50     .7d.<d.?d..0n.0P
    1cfd:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 07     .0P.0n.0P.0P.0n.
    1d0d:	30 50 07 30 50 07 30 6e 07 30 50 07 30 50 07 ff     0P.0P.0n.0P.0P..
    1d1d:	2f 00                                               /.

00001d1f <my_patches>:
    1d1f:	00 00 00 96 1e 00 00 00 00 00 00 00 96 1e 00 00     ................
    1d2f:	00 00 00 00 00 85 1e 00 00 00 00 00 00 00 2f 1e     ............../.
    1d3f:	00 00 00 00 00 00 00 85 1e 00 00 00 00 00 00 00     ................
    1d4f:	5e 1d 00 00 00 00 00 00 00 5e 1d 00 00 00 00        ^........^.....

00001d5e <explode>:
    1d5e:	00 07 7f 00 02 03 00 00 ff 00 08 41 01 04 04 01     ...........A....
    1d6e:	04 04 01 04 04 01 04 04 01 04 04 01 04 04 01 04     ................
    1d7e:	04 01 04 04 01 04 04 03 07 64 00 08 3c 01 04 04     .........d..<...
    1d8e:	01 04 04 01 04 04 01 04 04 01 04 04 01 04 04 01     ................
    1d9e:	04 04 01 04 04 01 04 04 03 07 50 00 08 37 01 04     ..........P..7..
    1dae:	04 01 04 04 01 04 04 01 04 04 01 04 04 01 04 04     ................
    1dbe:	01 04 04 01 04 04 01 04 04 03 07 32 00 08 32 01     ...........2..2.
    1dce:	04 04 01 04 04 01 04 04 01 04 04 01 04 04 01 04     ................
    1dde:	04 01 04 04 01 04 04 01 04 04 03 07 28 00 08 2d     ............(..-
    1dee:	01 04 04 01 04 04 01 04 04 01 04 04 01 04 04 01     ................
    1dfe:	04 04 01 04 04 01 04 04 01 04 04 03 07 14 00 08     ................
    1e0e:	28 01 04 04 01 04 04 01 04 04 01 04 04 01 04 04     (...............
    1e1e:	01 04 04 01 04 04 01 04 04 01 04 04 01 05 00 00     ................
    1e2e:	ff                                                  .

00001e2f <pshoot>:
    1e2f:	00 02 03 00 07 7f 00 08 50 01 04 06 01 04 06 01     ........P.......
    1e3f:	04 06 01 07 00 03 07 7f 00 08 50 01 04 06 01 04     ..........P.....
    1e4f:	06 01 04 06 01 07 00 03 08 50 00 07 20 01 04 06     .........P.. ...
    1e5f:	01 04 06 01 04 06 01 04 06 01 07 00 03 08 50 00     ..............P.
    1e6f:	07 0f 01 04 06 01 04 06 01 04 06 01 04 06 01 07     ................
    1e7f:	00 01 05 00 00 ff                                   ......

00001e85 <navigate>:
    1e85:	00 02 04 00 07 70 00 00 d8 00 08 3c 01 05 00 00     .....p.....<....
    1e95:	ff                                                  .

00001e96 <instrument>:
    1e96:	00 02 04 00 00 dd 00 ff                             ........

00001e9e <sprites_data>:
    1e9e:	fe fe fe fe fe fe fe 87 fe fe fe fe fe fe 87 87     ................
    1eae:	fe fe fe fe fe fe 87 87 fe fe fe fe 85 85 85 87     ................
    1ebe:	fe fe fe 85 87 87 87 85 fe fe 85 87 87 87 87 85     ................
    1ece:	fe 85 87 87 87 85 85 87 85 87 87 85 85 87 87 87     ................
    1ede:	87 87 87 fe fe fe fe fe d2 d2 eb d2 fe fe fe fe     ................
    1eee:	87 d2 fd eb fe fe fe fe 87 87 eb d2 fe fe fe fe     ................
    1efe:	85 87 87 d2 fe fe fe fe 87 85 85 87 85 fe fe fe     ................
    1f0e:	87 ef 87 87 87 85 fe fe ef ff ef 87 87 85 fe fe     ................
    1f1e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 87     ................
    1f2e:	fe fe fe fe fe fe 87 87 fe fe fe fe fe fe 87 87     ................
    1f3e:	fe fe fe fe 85 85 85 87 fe fe fe 85 87 87 87 85     ................
    1f4e:	fe fe 85 87 87 87 87 85 fe 85 87 87 87 85 85 87     ................
    1f5e:	fe fe fe fe fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    1f6e:	d2 d2 eb d2 fe fe fe fe 87 d2 fd eb fe fe fe fe     ................
    1f7e:	87 87 eb d2 fe fe fe fe 85 87 87 d2 fe fe fe fe     ................
    1f8e:	87 85 85 87 85 fe fe fe 87 ef 87 87 87 85 fe fe     ................
    1f9e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1fae:	fe fe fe fe fe fe fe fe fe ba ba ba ba ba ba fe     ................
    1fbe:	ba bd bd bd bd bd bd ba fe ba ba ba ba ba ba fe     ................
    1fce:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1fde:	fe fe 46 46 46 46 46 46 fe a5 a5 a5 47 47 46 fe     ..FFFFFF....GGF.
    1fee:	fe 46 46 47 47 46 3f 3f 46 46 47 47 46 fe fe fe     .FFGGF??FFGGF...
    1ffe:	46 46 47 47 46 fe fe fe fe 46 46 47 47 3f 3f fe     FFGGF....FFGG??.
    200e:	fe a5 a5 a5 47 fe fe fe fe fe 46 46 46 46 fe fe     ....G.....FFFF..
    201e:	fe fe fe 07 fe fe fe fe fe fe 07 07 07 fe fe fe     ................
    202e:	fe 07 07 27 07 07 fe fe 07 07 27 77 27 07 07 fe     ...'......'w'...
    203e:	fe 07 07 27 07 07 fe fe fe fe 07 07 07 fe fe fe     ...'............
    204e:	fe fe fe 07 fe fe fe fe fe fe fe fe fe fe fe fe     ................
    205e:	fe fe fe d2 fe fe fe fe fe fe d2 d2 d2 fe fe fe     ................
    206e:	fe d2 d2 e4 d2 d2 fe fe d2 d2 e4 f5 e4 d2 d2 fe     ................
    207e:	fe d2 d2 e4 d2 d2 fe fe fe fe d2 d2 d2 fe fe fe     ................
    208e:	fe fe fe d2 fe fe fe fe fe fe fe fe fe fe fe fe     ................
    209e:	fe fe fe 38 fe fe fe fe fe fe 38 38 38 fe fe fe     ...8......888...
    20ae:	fe 38 38 bc 38 38 fe fe 38 38 bc be bc 38 38 fe     .88.88..88...88.
    20be:	fe 38 38 bc 38 38 fe fe fe fe 38 38 38 fe fe fe     .88.88....888...
    20ce:	fe fe fe 38 fe fe fe fe fe fe fe fe fe fe fe fe     ...8............
    20de:	fe fe fe a2 fe fe fe fe fe fe a2 a2 a2 fe fe fe     ................
    20ee:	fe a2 a2 aa a2 a2 fe fe a2 a2 aa ad aa a2 a2 fe     ................
    20fe:	fe a2 a2 aa a2 a2 fe fe fe fe a2 a2 a2 fe fe fe     ................
    210e:	fe fe fe a2 fe fe fe fe fe fe fe fe fe fe fe fe     ................
    211e:	fe fe fe 6e fe fe fe fe fe fe 6e 6e 6e fe fe fe     ...n......nnn...
    212e:	fe 6e 6e 6f 6e 6e fe fe 6e 6e 6f 77 6f 6e 6e fe     .nnonn..nnowonn.
    213e:	fe 6e 6e 6f 6e 6e fe fe fe fe 6e 6e 6e fe fe fe     .nnonn....nnn...
    214e:	fe fe fe 6e fe fe fe fe fe fe fe fe fe fe fe fe     ...n............
    215e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    216e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    217e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    218e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    219e:	85 87 87 85 fe 85 87 87 fe 85 87 85 fe 85 87 87     ................
    21ae:	fe 85 87 87 ad ad ad ad fe fe 85 87 ad ad ad ad     ................
    21be:	fe fe 85 87 ad ad ad ad fe fe fe 85 a4 ad 87 87     ................
    21ce:	fe fe fe fe a4 a4 85 87 fe fe fe fe a4 a4 85 87     ................
    21de:	87 ef 87 85 87 85 fe fe 87 87 87 85 87 87 85 fe     ................
    21ee:	ad ad ad ad ad 87 85 fe ad ad ad ad ad ad a4 ad     ................
    21fe:	ad ad ad ad ad a4 a4 a4 87 87 87 85 fe fe fe fe     ................
    220e:	87 87 87 85 fe fe fe fe 87 87 87 85 fe fe fe fe     ................
    221e:	87 ef 87 85 87 85 fe fe 87 87 87 85 87 87 85 fe     ................
    222e:	ad ad ad ad ad 87 85 fe ad ad ad ad ad ad a4 ad     ................
    223e:	ad ad ad ad ad a4 a4 a4 87 87 87 85 fe fe fe fe     ................
    224e:	87 87 87 85 fe fe fe fe 87 87 85 fe fe fe fe fe     ................
    225e:	85 87 87 85 85 87 87 87 85 87 87 85 fe 85 87 87     ................
    226e:	fe 85 87 85 fe 85 87 87 fe 85 87 87 ad ad ad ad     ................
    227e:	fe fe 85 87 ad ad ad ad fe fe 85 87 ad ad ad ad     ................
    228e:	fe fe fe 85 a4 ad 87 87 fe fe fe fe a4 a4 85 87     ................
    229e:	ef ff ef 87 87 85 fe fe 87 ef 87 85 87 85 fe fe     ................
    22ae:	87 87 87 85 87 87 85 fe ad ad ad ad ad 87 85 fe     ................
    22be:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    22ce:	87 87 87 87 fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    22de:	87 ef 87 85 87 85 fe fe 87 87 87 85 87 87 85 fe     ................
    22ee:	ad ad ad ad ad 87 85 fe ad ad ad ad ad ad a4 ad     ................
    22fe:	ad ad ad ad ad a4 a4 a4 87 87 87 87 fe fe fe fe     ................
    230e:	87 87 87 87 fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    231e:	ef ff ef 87 87 85 fe fe 87 ef 87 85 87 85 fe fe     ................
    232e:	87 87 87 85 87 87 85 fe ad ad ad ad ad 87 85 fe     ................
    233e:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    234e:	87 87 87 87 fe fe fe fe 87 87 87 87 87 fe fe fe     ................
    235e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    236e:	fe fe fe 27 07 fe fe fe fe fe 27 77 27 07 fe fe     ...'......'w'...
    237e:	fe fe 07 27 07 07 fe fe fe fe fe 07 07 fe fe fe     ...'............
    238e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    239e:	fe fe fe fe fe fe 85 87 fe fe fe fe fe fe 85 87     ................
    23ae:	fe fe fe fe fe 85 87 87 fe fe fe fe fe 85 87 87     ................
    23be:	fe fe fe fe 85 87 87 fe fe fe fe fe 85 87 87 fe     ................
    23ce:	fe fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4     ................
    23de:	87 fe 85 85 fe fe fe fe 87 fe 85 85 85 fe fe fe     ................
    23ee:	fe fe 85 85 85 fe fe fe fe fe 85 85 85 fe fe fe     ................
    23fe:	fe fe 85 85 85 fe fe fe fe fe 85 85 85 fe fe fe     ................
    240e:	fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe     ................
    241e:	fe fe fe fe fe fe fe 85 fe fe fe fe fe fe fe 85     ................
    242e:	fe fe fe fe fe 85 85 87 fe fe fe fe 85 87 87 87     ................
    243e:	fe fe fe a4 87 87 87 87 fe fe fe a4 87 87 87 fe     ................
    244e:	fe fe fe a4 a4 fe fe fe fe fe fe a4 a4 a4 fe fe     ................
    245e:	87 87 87 fe fe fe fe fe 87 87 87 87 fe fe fe fe     ................
    246e:	87 87 87 87 fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    247e:	87 85 85 fe fe fe fe fe 85 85 85 fe fe fe fe fe     ................
    248e:	a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe fe fe     ................
    249e:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 85 85     ................
    24ae:	fe fe fe fe 85 85 85 85 a4 a4 85 85 85 85 85 fe     ................
    24be:	a4 a4 85 85 85 85 85 fe a4 a4 85 85 85 85 fe fe     ................
    24ce:	a4 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    24de:	87 87 87 fe fe fe fe fe fe 85 87 87 fe fe fe fe     ................
    24ee:	fe 85 87 87 87 fe fe fe fe fe 85 87 87 fe fe fe     ................
    24fe:	fe fe 85 87 87 87 fe fe fe fe fe 85 87 87 fe fe     ................
    250e:	fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe     ................
    251e:	fe fe fe fe fe fe fe 85 fe fe fe fe fe fe fe 85     ................
    252e:	fe fe fe fe fe 85 85 85 fe fe fe fe 85 85 85 85     ................
    253e:	fe fe fe a4 85 85 85 85 fe fe fe a4 85 85 85 fe     ................
    254e:	fe fe fe a4 a4 fe fe fe fe fe fe a4 a4 a4 fe fe     ................
    255e:	87 87 87 fe fe fe fe fe 85 87 87 85 fe fe fe fe     ................
    256e:	85 87 87 85 fe fe fe fe 85 87 87 fe fe fe fe fe     ................
    257e:	85 87 87 fe fe fe fe fe 85 87 87 fe fe fe fe fe     ................
    258e:	a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe fe fe     ................
    259e:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 85 85     ................
    25ae:	fe fe fe fe 85 85 85 85 a4 a4 85 85 85 85 a4 a4     ................
    25be:	a4 a4 85 85 85 85 a4 a4 a4 a4 85 85 85 85 a4 a4     ................
    25ce:	a4 fe fe fe fe fe a4 fe fe fe fe fe fe fe fe fe     ................
    25de:	87 87 85 87 87 fe fe fe fe fe 85 87 87 87 fe fe     ................
    25ee:	fe fe 85 87 87 87 fe fe 85 85 85 87 87 fe fe fe     ................
    25fe:	87 87 87 87 87 fe fe fe 87 87 87 87 fe fe fe fe     ................
    260e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    261e:	fe fe fe fe fe fe fe fe fe fe 12 12 12 12 fe fe     ................
    262e:	ad 12 0f 1f 1f 0f 12 ad ad 12 12 12 12 12 12 ad     ................
    263e:	ad ad 12 12 12 12 ad ad ad 12 ad 12 12 ad 12 ad     ................
    264e:	ad fe 12 12 12 12 fe ad ad fe fe fe fe fe fe ad     ................
    265e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 7f     ................
    266e:	fe fe fe fe fe 7f 7f 7f fe fe fe fe 7f 7f 7f 7f     ................
    267e:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe fe fe     ................
    268e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    269e:	a4 fe fe fe fe fe fe fe a4 ad fe fe ff ff a4 ad     ................
    26ae:	a4 ad f6 ff ff a4 ad f6 a4 ad f6 ff a4 ad f6 ff     ................
    26be:	a4 ad fe fe a4 ad f6 ff a4 fe fe a4 a4 ad f6 fe     ................
    26ce:	fe fe fe a4 a4 ad f6 f6 fe fe fe fe fe fe fe fe     ................
    26de:	fe fe fe fe fe fe fe fe f6 ff ff ff d2 fe fe fe     ................
    26ee:	ff ff ff ff d2 eb fe fe ff fe ff ff eb fd d2 fe     ................
    26fe:	fe fe fe ff d2 eb d2 d2 fe fe fe fe fe fe fe fe     ................
    270e:	f6 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    271e:	fe fe bf 7f 7f bf fe fe fe 7f 7f 7f 7f 7f 7f fe     ................
    272e:	bf 7f 7f 7f 7f 7f 7f bf 7f 7f 7f 7f 7f 7f 7f 7f     ................
    273e:	7f 7f 7f 7f 7f 7f 7f 7f bf 7f 7f 7f 7f 7f 7f bf     ................
    274e:	fe 7f 7f 7f 7f 7f 7f fe fe fe bf 7f 7f bf fe fe     ................
    275e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    276e:	fe fe fe 7f 7f fe fe fe fe fe 7f 7f 7f 7f fe fe     ................
    277e:	fe fe 7f 7f 7f 7f fe fe fe fe fe 7f 7f fe fe fe     ................
    278e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    279e:	fe fe bf 7f 7f bf fe fe fe 7f 7f 7f 7f 7f 7f fe     ................
    27ae:	bf 7f fe fe 7f 7f 7f bf 7f fe fe fe fe 7f 7f 7f     ................
    27be:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe 7f bf     ................
    27ce:	fe fe fe fe fe fe 7f fe fe fe fe fe fe bf fe fe     ................
    27de:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    27ee:	fe fe fe fe fe fe fe fe fe fe fe e3 fe fe fe fe     ................
    27fe:	fe fe fe ff fe fe fe fe fe fe fe fe fe fe fe fe     ................
    280e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    281e:	fe fe fe fe fe fe fe fe fe fe fe fe ff fe fe fe     ................
    282e:	fe fe fe fe 7f ff fe fe fe fe fe fe 7f 7f ff fe     ................
    283e:	fe fe fe fe 7f 7f 7f ff fe fe fe fe 7f 7f 7f fe     ................
    284e:	fe fe fe fe 7f 7f fe fe fe fe fe fe 7f fe fe fe     ................
    285e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    286e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    287e:	7f 7f 7f 7f 7f 7f ff fe fe 7f 7f 7f 7f ff fe fe     ................
    288e:	fe fe 7f 7f ff fe fe fe fe fe fe fe fe fe fe fe     ................
    289e:	fe fe fe ff fe fe fe fe fe fe ff 7f 7f fe fe fe     ................
    28ae:	fe ff 7f 7f 7f 7f fe fe ff 7f 7f 7f 7f 7f 7f fe     ................
    28be:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    28ce:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    28de:	fe fe 12 12 12 12 fe fe fe 12 0f 1f 1f 0f 12 fe     ................
    28ee:	ad 12 12 12 12 12 12 ad ad 12 ad 12 12 ad 12 ad     ................
    28fe:	ad ad 12 12 12 12 ad ad ad fe 12 12 12 12 fe ad     ................
    290e:	ad fe fe fe fe fe fe ad ad fe fe fe fe fe fe ad     ................
    291e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 7f     ................
    292e:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe fe 7f     ................
    293e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    294e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    295e:	a4 fe fe fe fe fe fe fe a4 a4 fe fe fe fe fe fe     ................
    296e:	a4 a4 ad fe fe fe fe fe a4 a4 ad ad fe fe fe fe     ................
    297e:	a4 a4 ad ad f6 fe fe fe a4 a4 ad ad f6 f6 ff ff     ................
    298e:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    299e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    29ae:	fe fe ff ff ff ff a4 a4 fe ff ff ff ff a4 a4 a4     ................
    29be:	ff ff ff ff ff a4 a4 a4 ff ff ff ff a4 a4 a4 ad     ................
    29ce:	ff ff ff ff a4 a4 ad ad ff ff ff a4 a4 ad ad f6     ................
    29de:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    29ee:	a4 ad ad f6 f6 ff ff ff a4 ad ad f6 f6 ff ff ff     ................
    29fe:	ad ad f6 f6 ff ff ff ff ad f6 f6 ff ff ff ff ff     ................
    2a0e:	f6 f6 ff ff ff ff ff ff f6 ff ff 7f 7f ff ff ff     ................
    2a1e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2a2e:	d2 fe fe fe fe fe fe fe d2 d2 fe fe fe fe fe fe     ................
    2a3e:	d2 d2 d2 fe fe fe fe fe d2 d3 eb d3 fe fe fe fe     ................
    2a4e:	d2 eb fd eb d2 fe fe fe d2 d3 eb d3 d2 d2 fe fe     ................
    2a5e:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    2a6e:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 7f 7f fe     ................
    2a7e:	a4 a4 ad ad 7f 7f 7f fe a4 a4 ad fe fe 7f fe fe     ................
    2a8e:	a4 a4 fe fe fe fe fe fe a4 fe fe fe fe fe fe fe     ................
    2a9e:	ff ff fe a4 ad ad f6 f6 ff fe a4 a4 ad ad f6 f6     ................
    2aae:	fe fe a4 a4 ad ad f6 f6 fe a4 a4 a4 ad ad f6 f6     ................
    2abe:	fe a4 a4 a4 a4 ad ad f6 a4 a4 a4 a4 a4 a4 ad ad     ................
    2ace:	a4 a4 a4 a4 a4 a4 a4 ad a4 a4 a4 a4 a4 a4 a4 a4     ................
    2ade:	ff ff 7f 7f 7f 7f ff ff ff fe 7f 7f 7f 7f fe ff     ................
    2aee:	fe fe 7f 7f 7f fe fe fe fe fe fe 7f fe fe fe fe     ................
    2afe:	f6 fe fe fe fe fe fe fe f6 f6 fe fe fe fe fe fe     ................
    2b0e:	ad f6 f6 fe fe fe fe fe ad ad f6 f6 fe fe fe fe     ................
    2b1e:	d2 d2 d2 d2 d2 d2 d2 fe ff ff ff ff ff ff ff ff     ................
    2b2e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2b3e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2b4e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2b5e:	ef ff ef 87 87 85 fe fe 87 ef 87 85 87 85 fe fe     ................
    2b6e:	87 87 87 85 87 87 85 fe ad ad ad ad ad 87 85 fe     ................
    2b7e:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    2b8e:	87 87 87 85 fe fe fe fe 87 87 85 fe fe fe fe fe     ................
    2b9e:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 87 87     ................
    2bae:	fe fe fe fe 85 87 87 87 a4 a4 85 85 85 87 87 fe     ................
    2bbe:	a4 a4 87 87 87 87 87 fe a4 a4 87 87 87 87 fe fe     ................
    2bce:	a4 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2bde:	87 87 85 fe fe fe fe fe fe 85 85 85 fe fe fe fe     ................
    2bee:	fe 85 85 85 85 fe fe fe fe fe 85 85 85 fe fe fe     ................
    2bfe:	fe fe 85 85 85 85 fe fe fe fe fe 85 85 85 fe fe     ................
    2c0e:	fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe     ................
    2c1e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2c2e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2c3e:	fe fe fe fe fe fe fe fe fe fe fe fe fe 85 85 85     ................
    2c4e:	fe a4 87 87 87 87 87 87 a4 a4 87 87 87 87 87 87     ................
    2c5e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 87     ................
    2c6e:	fe fe fe fe 85 85 85 87 fe fe fe 85 87 87 87 85     ................
    2c7e:	fe fe 85 85 87 87 87 87 85 85 85 85 85 87 87 ad     ................
    2c8e:	87 87 87 87 ad 85 87 87 87 87 87 87 ad ad a4 a4     ................
    2c9e:	87 87 87 87 fe fe fe fe 87 d2 d2 eb d2 fe fe fe     ................
    2cae:	87 87 d2 fd eb fe fe fe 87 87 87 eb d2 fe fe fe     ................
    2cbe:	85 85 87 87 d2 fe fe fe ad ad ad ad ad 87 ef fe     ................
    2cce:	ad ad ad ad ad ad a4 ad a4 ad ad ad ad a4 a4 a4     ................
    2cde:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    2cee:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 7f 7f 7f     ................
    2cfe:	a4 a4 ad ad 7f 7f 7f fe a4 a4 ad fe 7f 7f 7f fe     ................
    2d0e:	a4 a4 fe fe fe 7f fe fe a4 fe fe fe fe fe fe fe     ................
    2d1e:	ff ff 7f 7f 7f 7f ff ff ff 7f 7f 7f 7f 7f 7f ff     ................
    2d2e:	fe fe 7f 7f 7f 7f fe fe fe fe 7f 7f 7f fe fe fe     ................
    2d3e:	f6 fe fe 7f fe fe fe fe f6 f6 fe fe fe fe fe fe     ................
    2d4e:	ad f6 f6 fe fe fe fe fe ad ad f6 f6 fe fe fe fe     ................

00002d5e <map_enemy_spider_1>:
    2d5e:	01 01 29                                            ..)

00002d61 <map_enemy_spider_0>:
    2d61:	01 01 1e                                            ...

00002d64 <map_enemy_shark>:
    2d64:	01 01 05                                            ...

00002d67 <map_enemy_shot>:
    2d67:	01 01 13                                            ...

00002d6a <map_hero_shot>:
    2d6a:	01 01 04                                            ...

00002d6d <map_hero_ship_large_1>:
    2d6d:	04 02 2b 2c 2d 2e 39 30 3a 32                       ..+,-.90:2

00002d77 <map_hero_ship_large_0>:
    2d77:	04 02 2b 2c 2d 2e 2f 30 31 32                       ..+,-./012

00002d81 <map_hero_ship_1>:
    2d81:	03 01 2a 20 21                                      ..* !

00002d86 <map_hero_ship_0>:
    2d86:	03 01 1f 20 21                                      ... !

00002d8b <map_hero_prone>:
    2d8b:	03 01 36 37 38                                      ..678

00002d90 <map_hero_jump>:
    2d90:	02 03 02 03 0f 12 1c 1d                             ........

00002d98 <map_hero_step_3>:
    2d98:	02 03 02 03 0f 33 34 35                             .....345

00002da0 <map_hero_step_2>:
    2da0:	02 03 00 01 0c 11 1a 1b                             ........

00002da8 <map_hero_step_1>:
    2da8:	02 03 02 03 0f 10 18 19                             ........

00002db0 <map_hero_step_0>:
    2db0:	02 03 00 01 0c 0e 16 17                             ........

00002db8 <map_hero_idle>:
    2db8:	02 03 00 01 0c 0d 14 15                             ........

00002dc0 <map_emerald_4>:
    2dc0:	01 01 0a                                            ...

00002dc3 <map_emerald_3>:
    2dc3:	01 01 09                                            ...

00002dc6 <map_emerald_2>:
    2dc6:	01 01 08                                            ...

00002dc9 <map_emerald_0>:
    2dc9:	01 01 07                                            ...

00002dcc <map_emerald_1>:
    2dcc:	01 01 06                                            ...

00002dcf <map_explosion_2>:
    2dcf:	01 01 24                                            ..$

00002dd2 <map_explosion_1>:
    2dd2:	01 01 23                                            ..#

00002dd5 <map_explosion_0>:
    2dd5:	01 01 22                                            .."

00002dd8 <map_particle>:
    2dd8:	01 01 25                                            ..%

00002ddb <map_up_arrow>:
    2ddb:	01 01 28                                            ..(

00002dde <map_down_arrow>:
    2dde:	01 01 27                                            ..'

00002de1 <map_right_arrow>:
    2de1:	01 01 26                                            ..&

00002de4 <map_none>:
    2de4:	01 01 0b                                            ...

00002de7 <tiles_data>:
	...
    2e27:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    2e37:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    2e47:	ff f8 fb f8 fb f8 f8 fd ff fb f8 f8 fb f8 f8 f8     ................
    2e57:	ff f8 f8 fb f8 f8 f8 f8 ff f8 f8 f8 f8 f8 f8 f8     ................
    2e67:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    2e77:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    2e87:	fd f8 fb f8 fb f8 f8 fd f8 fb f8 f8 fb f8 f8 f8     ................
    2e97:	f8 f8 f8 fb f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    2ea7:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    2eb7:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    2ec7:	fd f8 fb f8 fb f8 f8 ff f8 fb f8 f8 fb f8 f8 ff     ................
    2ed7:	f8 f8 f8 fb f8 f8 f8 ff f8 f8 f8 f8 f8 f8 f8 ff     ................
    2ee7:	fa f8 f8 f8 f8 f8 f8 f8 f8 f8 fb f8 f8 f8 fb f8     ................
    2ef7:	f8 f8 fb f8 fb fb f8 f8 f8 f8 f8 fb f8 f8 f8 f8     ................
    2f07:	f8 f8 fb f8 fb f8 f8 f8 f8 fb f8 f8 fb f8 f8 f8     ................
    2f17:	f8 f8 f8 fb f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    2f27:	ac ac ac ac ac ac ac ac ac ac ac ac ac ac ac ac     ................
    2f37:	ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad     ................
    2f47:	ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae     ................
    2f57:	af af af af af af af af af af af af af af af af     ................
    2f67:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    2f77:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    2f87:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    2f97:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    2fa7:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    2fb7:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    2fc7:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    2fd7:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    2fe7:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    2ff7:	ab ab ab ab ab ab ab ab ab ad ad ad ad ad ad ab     ................
    3007:	ae ae ae ae ae ae ae ae ab ae ae ae ae ae ae ab     ................
    3017:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    3027:	ff ff ff ff ff ff ff a3 ff ff ff ff ff ff ff a3     ................
    3037:	a3 ff ff ff ff ff a3 a0 a3 ff ff ff ff ff a3 a0     ................
    3047:	a0 a3 ff ff ff a3 a0 a0 a0 a3 ff ff ff a3 a0 a0     ................
    3057:	a0 a0 a3 ff a3 a0 a0 a0 a0 a0 a3 ff a3 a0 a0 a0     ................
    3067:	a0 a0 a0 a3 ff a3 a0 a0 a0 a0 a0 a3 ff a3 a0 a0     ................
    3077:	a0 a0 a3 ff ff ff a3 a0 a0 a0 a3 ff ff ff a3 a0     ................
    3087:	a0 a3 ff ff ff ff ff a3 a0 a3 ff ff ff ff ff a3     ................
    3097:	a3 ff ff ff ff ff ff ff a3 ff ff ff ff ff ff ff     ................
    30a7:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    30b7:	06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    30c7:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    30d7:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    30e7:	02 02 02 02 02 02 02 02 02 02 0b 02 02 02 0b 02     ................
    30f7:	02 0b 02 0b 02 0b 02 0b 02 02 0b 02 0b 02 0b 02     ................
    3107:	02 0b 02 02 02 0b 02 02 02 02 0b 02 0b 02 0b 02     ................
    3117:	02 0b 02 0b 02 0b 02 02 02 02 0b 02 02 02 0b 02     ................
    3127:	5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c     \\\\\\\\\\\\\\\\
    3137:	02 5c 02 5c 02 5c 02 5c 02 02 0b 02 0b 02 0b 02     .\.\.\.\........
    3147:	02 0b 02 02 02 0b 02 02 02 02 0b 02 0b 02 0b 02     ................
    3157:	02 0b 02 0b 02 0b 02 02 02 02 0b 02 02 02 0b 02     ................
    3167:	27 1f 27 1f 1f 1f 27 1f 1f 1f 1f 27 1f 27 1f 1f     '.'...'....'.'..
    3177:	27 1f 27 1f 1f 2f 27 1f 1f 27 2f 1f 27 1f 1f 1f     '.'../'..'/.'...
    3187:	1f 1f 27 1f 2f 1f 27 1f 1f 27 1f 27 1f 1f 2f 1f     ..'./.'..'.'../.
    3197:	1f 1f 2f 1f 1f 27 1f 27 1f 1f 1f 27 1f 1f 1f 1f     ../..'.'...'....
    31a7:	6e 65 6e 65 6e 65 6e 65 65 6e 65 6e 65 6e 65 6e     neneneneenenenen
    31b7:	6e 65 6e 65 6e 65 6e 65 65 6e 65 6e 65 6e 65 6e     neneneneenenenen
    31c7:	6e 65 6e 65 6e 65 6e 65 65 6e 65 6e 65 6e 65 6e     neneneneenenenen
    31d7:	6e 65 6e 65 6e 65 6e 65 65 6e 65 6e 65 6e 65 6e     neneneneenenenen
    31e7:	2b 28 2b 28 2b 28 2b 28 28 2b 28 2b 28 2b 28 2b     +(+(+(+((+(+(+(+
    31f7:	28 2b 28 2b 28 2b 28 2b 28 2b 65 6e 65 6e 28 2b     (+(+(+(+(+enen(+
    3207:	28 65 6e 65 6e 65 6e 2b 65 6e 65 6e 65 6e 65 6e     (enenen+enenenen
    3217:	6e 65 6e 65 6e 65 6e 65 65 6e 65 6e 65 6e 65 6e     neneneneenenenen
    3227:	b5 23 23 b5 b5 23 23 b5 b5 b5 b5 23 23 b5 b5 b5     .##..##....##...
    3237:	b5 06 06 06 06 06 06 b5 06 06 06 06 06 06 06 06     ................
    3247:	b5 06 06 06 06 06 06 b5 b5 b5 06 06 06 06 b5 b5     ................
    3257:	b5 06 06 77 77 06 06 b5 06 06 77 02 02 77 06 06     ...ww.....w..w..
    3267:	23 64 63 62 23 64 63 62 23 64 63 62 23 64 63 62     #dcb#dcb#dcb#dcb
    3277:	23 65 65 65 23 65 65 65 23 65 65 65 23 65 65 65     #eee#eee#eee#eee
    3287:	23 b5 23 b5 23 b5 23 b5 23 b5 23 b5 23 b5 23 b5     #.#.#.#.#.#.#.#.
    3297:	23 23 23 b5 23 b5 23 b5 b5 23 23 b5 b5 23 23 b5     ###.#.#..##..##.
    32a7:	50 50 50 50 50 50 50 50 ad ad ad 50 ad ad ad ad     PPPPPPPP...P....
    32b7:	ad a4 ad 50 ad a4 ad ad ad ad ad 50 ad ad ad ad     ...P.......P....
    32c7:	50 50 50 50 50 50 50 50 ad ad ad ad ad ad ad 50     PPPPPPPP.......P
    32d7:	ad a4 ad ad ad a4 ad 50 ad ad ad ad ad ad ad 50     .......P.......P
    32e7:	a5 a5 a5 a5 a5 a5 a5 a5 a4 a4 a4 a4 a4 a4 a4 a4     ................
    32f7:	a4 a4 a4 a4 a4 a4 a4 a4 ad ad ad 50 ad ad ad ad     ...........P....
    3307:	50 50 50 50 50 50 50 50 ad ad ad ad ad ad ad 50     PPPPPPPP.......P
    3317:	ad a4 ad ad ad a4 ad 50 ad ad ad ad ad ad ad 50     .......P.......P
    3327:	80 80 80 00 80 80 80 80 80 80 80 00 80 80 80 80     ................
    3337:	80 00 00 00 80 80 80 80 80 00 80 80 80 80 80 80     ................
    3347:	80 00 00 00 80 80 80 80 80 80 80 00 00 00 80 80     ................
    3357:	80 80 80 80 80 7f 80 80 80 80 80 80 7f 80 7f 80     ................
    3367:	65 65 65 65 65 65 65 65 5d 66 65 5d 65 66 66 65     eeeeeeee]fe]effe
    3377:	65 65 65 66 5d 65 65 5d 65 5c 65 65 65 65 65 65     eeef]ee]e\eeeeee
    3387:	65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 5c     eeeeeeeeeeeeeee\
    3397:	5c 5c 65 65 65 5c 65 65 5c 5c 5c 5c 5c 5c 5c 5c     \\eee\ee\\\\\\\\
    33a7:	5c 1c 65 65 5d 5c 5c 65 13 13 13 14 13 65 5d 65     \.ee]\\e.....e]e
    33b7:	5c 65 13 14 65 65 1c 65 13 13 5c 13 13 65 13 65     \e..ee.e..\..e.e
    33c7:	14 14 5c 13 5d 5c 13 13 1c 13 13 5c 5c 5c 5c 5c     ..\.]\.....\\\\\
    33d7:	1c 14 5c 13 13 13 13 13 13 5c 65 5c 13 13 5c 13     ..\......\e\..\.
    33e7:	13 13 13 13 13 13 13 2f 13 13 13 13 13 13 13 2f     ......./......./
    33f7:	2f 13 13 13 13 13 2f 77 2f 13 13 13 13 13 2f 77     /...../w/...../w
    3407:	77 2f 13 13 13 2f 77 77 77 2f 13 13 13 2f 77 77     w/.../www/.../ww
    3417:	77 77 2f 13 2f 77 77 77 77 77 2f 13 2f 77 77 77     ww/./wwwww/./www
    3427:	77 77 77 2f 13 2f 77 77 77 77 77 2f 13 2f 77 77     www/./wwwww/./ww
    3437:	77 77 2f 13 13 13 2f 77 77 77 2f 13 13 13 2f 77     ww/.../www/.../w
    3447:	77 2f 13 13 13 13 13 2f 77 2f 13 13 13 13 13 2f     w/...../w/...../
    3457:	2f 13 13 13 13 13 13 13 2f 13 13 13 13 13 13 13     /......./.......
    3467:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3477:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3487:	bf bf bf bf 00 00 00 00 bf bf bf bf 00 00 00 00     ................
    3497:	bf bf bf bf 00 00 00 00 bf bf bf bf 00 00 00 00     ................
    34a7:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    34b7:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
	...
    34e7:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    34f7:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3507:	00 00 00 00 bf bf bf bf 00 00 00 00 bf bf bf bf     ................
    3517:	00 00 00 00 bf bf bf bf 00 00 00 00 bf bf bf bf     ................
	...
    353f:	00 00 00 e3 00 00 00 00 00 00 e3 ff e3 00 00 00     ................
    354f:	00 00 00 e3 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    357f:	00 00 00 d2 00 00 00 00 00 00 d2 e3 d2 00 00 00     ................
    358f:	00 00 00 d2 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    35a7:	bf bf bf bf 00 00 00 00 bf bf bf bf 00 00 00 00     ................
    35b7:	bf bf bf bf 00 00 00 00 bf bf bf bf 00 00 00 00     ................
    35c7:	bf bf bf bf 00 00 00 00 bf bf bf bf 00 00 00 00     ................
    35d7:	bf bf bf bf 00 00 00 00 bf bf bf bf 00 00 00 00     ................
    35e7:	00 00 00 00 bf bf bf bf 00 00 00 00 bf bf bf bf     ................
    35f7:	00 00 00 00 bf bf bf bf 00 00 00 00 bf bf bf bf     ................
    3607:	00 00 00 00 bf bf bf bf 00 00 00 00 bf bf bf bf     ................
    3617:	00 00 00 00 bf bf bf bf 00 00 00 00 bf bf bf bf     ................
    3627:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3637:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3647:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3657:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
	...
    3673:	00 00 96 96 00 00 00 00 00 96 96 96 00 00 00 00     ................
    3683:	96 96 96 96 00 00 00 96 96 96 96 96 00 00 96 96     ................
    3693:	96 96 96 96 00 00 96 96 96 96 96 96 00 96 96 96     ................
    36a3:	96 96 96 96 00 96 96 96 96 96 96 00 96 96 96 96     ................
    36b3:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    36c3:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    36d3:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    36e3:	96 96 96 96 00 00 00 00 00 00 00 00 96 96 00 00     ................
    36f3:	00 00 00 00 96 96 96 00 00 00 00 00 96 96 96 96     ................
    3703:	00 00 00 00 96 96 96 96 96 00 00 00 96 96 96 96     ................
    3713:	96 96 00 00 96 96 96 96 96 96 00 00 96 96 96 96     ................
    3723:	96 96 96 00 00 96 96 96 95 96 96 96 00 96 96 96     ................
    3733:	95 96 96 96 96 96 96 96 96 95 96 96 96 96 96 96     ................
    3743:	96 95 96 96 96 96 96 96 96 96 95 96 96 96 96 96     ................
    3753:	96 bf 95 96 95 84 96 96 96 bf 96 95 8c 83 83 8c     ................
    3763:	96 bf 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3773:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3783:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3793:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    37a3:	96 96 96 96 96 96 96 95 96 96 96 00 96 96 96 95     ................
    37b3:	96 96 96 00 96 96 95 96 96 96 96 96 96 96 95 96     ................
    37c3:	96 96 96 96 96 95 96 96 96 96 96 96 96 95 96 96     ................
    37d3:	96 96 95 96 95 96 96 96 96 95 95 95 96 96 96 96     ................
    37e3:	94 8c 8c 95 82 82 82 82 82 bf 96 96 00 d8 d8 d8     ................
    37f3:	bf ff bf 82 00 d8 d8 bf ff ff ff bf 00 d8 bf ff     ................
    3803:	ff ff ff ff bf bf ff ff ff ff ff ff 00 00 bf ff     ................
    3813:	ff ff ff ff 00 00 94 bf ff ff ff bf 00 00 00 8c     ................
    3823:	bf ff bf d8 96 96 96 96 96 96 96 96 83 83 8c 8c     ................
    3833:	8c 8c 8c 83 d8 d8 d8 d8 d8 d8 d8 d8 bf d8 d8 d8     ................
    3843:	d8 d8 d8 d8 ff bf bf d8 d8 d8 d8 d8 bf d8 d8 d8     ................
    3853:	d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8     ................
    3863:	d8 d8 82 82 96 96 8c 83 83 8c 8c 8c 83 82 83 83     ................
    3873:	83 83 8c 00 82 82 82 83 83 83 83 00 82 82 82 83     ................
    3883:	83 83 83 00 d8 82 82 83 83 83 83 00 82 82 82 83     ................
    3893:	83 83 00 00 82 82 83 83 83 95 00 00 82 82 83 83     ................
    38a3:	95 00 00 00 40 40 40 40 40 40 40 40 40 40 40 40     ....@@@@@@@@@@@@
    38b3:	40 40 40 40 41 41 41 41 41 41 41 41 41 41 41 41     @@@@AAAAAAAAAAAA
    38c3:	41 41 41 41 42 42 42 42 42 42 42 42 42 42 42 42     AAAABBBBBBBBBBBB
    38d3:	42 42 42 42 43 43 43 43 43 43 43 43 43 43 43 43     BBBBCCCCCCCCCCCC
    38e3:	43 43 43 43 00 00 00 96 95 ff d8 d8 00 00 00 00     CCCC............
    38f3:	96 ff 83 82 00 00 00 00 00 ff 96 96 00 00 00 00     ................
    3903:	00 bf 96 96 00 00 00 00 00 bf 96 96 00 00 00 00     ................
    3913:	00 bf 96 96 00 00 00 00 00 bf 00 00 00 00 00 00     ................
    3923:	00 77 00 00 d8 d8 d8 82 82 82 82 82 82 82 82 82     .w..............
    3933:	82 83 83 83 8c 8c 83 83 83 83 8c 95 96 96 96 96     ................
    3943:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3953:	96 96 96 96 96 96 96 96 96 96 96 96 00 96 96 96     ................
    3963:	96 96 96 00 83 83 8c 95 96 00 00 00 83 8c 96 96     ................
    3973:	00 00 00 00 96 96 96 00 00 00 00 00 96 96 96 00     ................
    3983:	00 00 00 00 96 96 00 00 00 00 00 00 96 96 00 00     ................
	...
    39a7:	44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44     DDDDDDDDDDDDDDDD
    39b7:	45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45     EEEEEEEEEEEEEEEE
    39c7:	46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46     FFFFFFFFFFFFFFFF
    39d7:	47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47     GGGGGGGGGGGGGGGG
    39e7:	00 00 00 00 00 77 00 00 00 00 00 00 00 77 00 00     .....w.......w..
    39f7:	00 00 00 00 00 77 00 00 00 00 00 00 00 77 00 00     .....w.......w..
    3a07:	00 00 00 00 00 77 00 00 00 00 00 00 00 77 00 00     .....w.......w..
	...
    3a2f:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    3a3f:	00 3f 3f 2f 3f 3f 3f 2f 00 3f 3f 3f 2f 3f 3f 2f     .??/???/.???/??/
    3a4f:	00 3f 3f 2f 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??/.??/..????/.
	...
    3a6f:	00 00 00 3f 3f 2f 00 00 00 00 3f 3f 3f 2f 00 00     ...??/....???/..
    3a7f:	00 00 00 3f 3f 2f 00 00 00 00 00 3f 3f 2f 00 00     ...??/.....??/..
    3a8f:	00 00 00 3f 3f 2f 00 00 00 3f 3f 3f 3f 3f 3f 2f     ...??/...??????/
	...
    3aaf:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 00 00 3f 3f 2f     ..????/..??..??/
    3abf:	00 00 00 00 3f 3f 2f 00 00 00 00 3f 3f 2f 00 00     ....??/....??/..
    3acf:	00 00 3f 3f 2f 00 00 00 00 3f 3f 3f 3f 3f 3f 2f     ..??/....??????/
	...
    3aef:	00 3f 3f 3f 3f 3f 3f 2f 00 00 00 00 3f 3f 2f 00     .??????/....??/.
    3aff:	00 00 00 3f 3f 2f 00 00 00 00 00 00 3f 3f 2f 00     ...??/......??/.
    3b0f:	00 3f 3f 00 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??..??/..????/.
	...
    3b33:	3f 3f 2f 00 00 00 00 3f 3f 3f 2f 00 00 00 3f 3f     ??/....???/...??
    3b43:	3f 3f 2f 00 00 3f 3f 00 3f 3f 2f 00 00 3f 3f 3f     ??/..??.??/..???
    3b53:	3f 3f 3f 2f 00 00 00 00 3f 3f 2f 00 00 00 00 00     ???/....??/.....
	...
    3b6f:	00 3f 3f 3f 3f 3f 3f 2f 00 3f 3f 2f 00 00 00 00     .??????/.??/....
    3b7f:	00 3f 3f 3f 3f 3f 2f 00 00 00 00 00 00 3f 3f 2f     .?????/......??/
    3b8f:	00 3f 3f 00 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??..??/..????/.
	...
    3baf:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 00 00 00     ..????/..??/....
    3bbf:	00 3f 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     .?????/..??/.??/
    3bcf:	00 3f 3f 2f 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??/.??/..????/.
	...
    3bef:	00 3f 3f 3f 3f 3f 3f 2f 00 00 00 00 00 3f 3f 2f     .??????/.....??/
    3bff:	00 00 00 00 3f 3f 2f 00 00 00 00 3f 3f 2f 00 00     ....??/....??/..
    3c0f:	00 00 3f 3f 2f 00 00 00 00 00 3f 3f 2f 00 00 00     ..??/.....??/...
	...
    3c2f:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    3c3f:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    3c4f:	00 3f 3f 2f 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??/.??/..????/.
	...
    3c6f:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    3c7f:	00 00 3f 3f 3f 3f 3f 2f 00 00 00 00 00 3f 3f 2f     ..?????/.....??/
    3c8f:	00 00 00 00 3f 3f 2f 00 00 00 3f 3f 3f 2f 00 00     ....??/...???/..
	...
    3caf:	00 00 00 ff ff e3 00 00 00 00 ff ff ff ff e3 00     ................
    3cbf:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    3ccf:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    3cef:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    3cff:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    3d0f:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff e3 00     ................
	...
    3d2f:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    3d3f:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    3d4f:	00 ff ff e3 00 ff ff e3 00 00 ff ff ff ff e3 00     ................
	...
    3d6f:	00 ff ff ff ff e3 00 00 00 ff ff e3 ff ff e3 00     ................
    3d7f:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    3d8f:	00 ff ff e3 ff ff e3 00 00 ff ff ff ff e3 00 00     ................
	...
    3daf:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 00 00 00     ................
    3dbf:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 00 00 00     ................
    3dcf:	00 ff ff e3 00 00 00 00 00 ff ff ff ff ff ff e3     ................
	...
    3def:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 00 00 00     ................
    3dff:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 00 00 00     ................
    3e0f:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
	...
    3e2f:	00 00 ff ff ff ff ff e3 00 ff ff e3 00 00 00 00     ................
    3e3f:	00 ff ff e3 00 00 00 00 00 ff ff e3 ff ff ff e3     ................
    3e4f:	00 ff ff e3 00 ff ff e3 00 00 ff ff ff ff ff e3     ................
	...
    3e6f:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    3e7f:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 ff ff e3     ................
    3e8f:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    3eaf:	00 ff ff ff ff ff ff e3 00 00 00 ff ff e3 00 00     ................
    3ebf:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
    3ecf:	00 00 00 ff ff e3 00 00 00 ff ff ff ff ff ff e3     ................
	...
    3ef3:	ff ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    3f03:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 ff ff 00     ................
    3f13:	00 ff ff e3 00 00 ff ff ff ff e3 00 00 00 00 00     ................
	...
    3f2f:	00 ff ff e3 00 ff ff e3 00 ff ff e3 ff ff e3 00     ................
    3f3f:	00 ff ff ff ff e3 00 00 00 ff ff ff ff e3 00 00     ................
    3f4f:	00 ff ff e3 ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
	...
    3f6f:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    3f7f:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    3f8f:	00 ff ff e3 00 00 00 00 00 ff ff ff ff ff ff e3     ................
	...
    3faf:	ff ff e3 00 00 ff ff e3 ff ff ff e3 ff ff ff e3     ................
    3fbf:	ff ff ff ff ff ff ff e3 ff ff e3 ff e3 ff ff e3     ................
    3fcf:	ff ff e3 00 00 ff ff e3 ff ff e3 00 00 ff ff e3     ................
	...
    3fef:	00 ff ff e3 00 ff ff e3 00 ff ff ff e3 ff ff e3     ................
    3fff:	00 ff ff ff ff ff ff e3 00 ff ff ff ff ff ff e3     ................
    400f:	00 ff ff e3 ff ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    402f:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    403f:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    404f:	00 ff ff e3 00 ff ff e3 00 00 ff ff ff ff e3 00     ................
	...
    406f:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    407f:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff e3 00     ................
    408f:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
	...
    40af:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    40bf:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    40cf:	00 ff ff e3 ff ff e3 00 00 00 ff ff e3 ff ff e3     ................
	...
    40ef:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    40ff:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff e3 00     ................
    410f:	00 ff ff e3 ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
	...
    412f:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 00 00 00     ................
    413f:	00 00 ff ff ff ff e3 00 00 00 00 00 00 ff ff e3     ................
    414f:	00 00 00 00 00 ff ff e3 00 00 ff ff ff ff e3 00     ................
	...
    416f:	00 ff ff ff ff ff ff e3 00 00 00 ff ff e3 00 00     ................
    417f:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
    418f:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
	...
    41af:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    41bf:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    41cf:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff ff e3     ................
	...
    41ef:	00 ff ff 00 00 ff ff e3 00 ff ff 00 00 ff ff e3     ................
    41ff:	00 ff ff 00 00 ff ff e3 00 ff ff 00 00 ff ff e3     ................
    420f:	00 00 ff ff ff ff e3 00 00 00 00 ff ff e3 00 00     ................
	...
    422f:	ff ff e3 00 00 ff ff e3 ff ff e3 00 00 ff ff e3     ................
    423f:	ff ff e3 ff e3 ff ff e3 ff ff ff ff ff ff ff e3     ................
    424f:	ff ff ff e3 ff ff ff e3 ff ff e3 00 00 ff ff e3     ................
	...
    426f:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    427f:	00 00 ff ff ff ff e3 00 00 00 ff ff ff ff e3 00     ................
    428f:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    42af:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    42bf:	00 00 ff ff ff ff e3 00 00 00 00 ff ff e3 00 00     ................
    42cf:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
	...
    42ef:	00 ff ff ff ff ff ff e3 00 00 00 00 ff ff e3 00     ................
    42ff:	00 00 00 ff ff e3 00 00 00 00 ff ff e3 00 00 00     ................
    430f:	00 ff ff e3 00 00 00 00 00 ff ff ff ff ff ff e3     ................
	...
    4327:	bf bf bf bf 00 00 00 00 bf bf bf bf 00 00 00 00     ................
    4337:	bf bf bf bf 00 00 00 00 bf bf bf bf 00 00 00 00     ................
    4347:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    4357:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
	...
    4387:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    4397:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    43a7:	00 00 00 00 bf bf bf bf 00 00 00 00 bf bf bf bf     ................
    43b7:	00 00 00 00 bf bf bf bf 00 00 00 00 bf bf bf bf     ................
    43c7:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    43d7:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    43e7:	a0 a0 a0 a0 a0 a0 a0 ff a0 a0 a0 a0 a0 a0 ff ff     ................
    43f7:	a0 a0 a0 a0 a0 ff ff 02 a0 a0 a0 a0 ff ff 02 02     ................
    4407:	a0 a0 a0 ff ff 02 02 02 a0 a0 ff ff 02 02 02 02     ................
    4417:	a0 ff ff 02 02 02 02 02 ff ff 02 02 02 02 02 02     ................
    4427:	ff 02 02 02 02 02 02 02 ff 02 02 02 02 02 02 02     ................
    4437:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4447:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4457:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4467:	ff ff ff ff ff ff ff ff 02 02 02 02 02 02 02 02     ................
    4477:	02 02 02 02 02 02 02 02 a0 a0 a0 a0 a0 a0 a0 a0     ................
    4487:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    4497:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    44a7:	ff ff ff ff ff ff ff ff 02 02 ff ff ff ff 02 02     ................
    44b7:	02 02 02 ff ff 02 02 02 a0 a0 a0 ff a0 a0 a0 a0     ................
    44c7:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    44d7:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    44e7:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    44f7:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4507:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4517:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4527:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4537:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4547:	02 02 02 ff ff 02 02 02 02 02 ff ff ff ff 02 02     ................
    4557:	02 ff ff ff ff ff ff 02 ff ff ff ff ff ff ff ff     ................
    4567:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    4577:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    4587:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    4597:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    45a7:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    45b7:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    45c7:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    45d7:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    45e7:	03 03 03 03 03 03 03 1f 03 03 03 03 03 03 0f 06     ................
    45f7:	03 03 03 03 03 02 02 06 03 03 03 03 02 02 02 06     ................
    4607:	03 03 03 02 02 02 02 06 03 03 02 02 02 02 06 02     ................
    4617:	03 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4627:	1f 2f 2f 2f 2f 2f 2f 1f 06 06 06 1f 1f 1f 06 02     .//////.........
    4637:	02 02 06 1f 06 1f 06 02 02 02 06 02 06 1f 06 02     ................
    4647:	02 02 06 02 06 06 02 06 02 06 06 02 02 06 02 06     ................
    4657:	02 06 02 02 02 06 02 06 06 02 02 02 02 06 02 02     ................
    4667:	1f 03 03 03 03 03 03 03 06 0f 03 03 03 03 03 03     ................
    4677:	06 02 02 03 03 03 03 03 06 02 02 02 03 03 03 03     ................
    4687:	06 06 02 02 02 03 03 03 02 02 02 02 02 02 03 03     ................
    4697:	02 02 02 02 02 02 02 03 06 02 02 02 02 02 02 02     ................
    46a7:	03 03 03 03 03 03 03 02 03 03 03 03 03 03 02 02     ................
    46b7:	03 03 03 03 03 02 02 02 03 03 03 03 02 02 02 02     ................
    46c7:	03 03 03 02 02 02 02 02 03 03 02 02 02 02 02 02     ................
    46d7:	03 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    46e7:	02 03 03 03 03 03 03 03 02 02 03 03 03 03 03 03     ................
    46f7:	02 02 02 03 03 03 03 03 02 02 02 02 03 03 03 03     ................
    4707:	02 02 02 02 02 03 03 03 02 02 02 02 02 02 03 03     ................
    4717:	02 02 02 02 02 02 02 03 02 02 02 02 02 02 02 02     ................
    4727:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    4737:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    4747:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    4757:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    4767:	fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc     ................
    4777:	fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc     ................
    4787:	b7 b7 b7 b7 b7 b7 b7 b7 b7 b7 b7 b7 b7 b7 b7 b7     ................
    4797:	b6 b6 b6 b6 b6 b6 b6 b6 b6 b6 b6 b6 b6 b6 b6 b6     ................
    47a7:	b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5     ................
    47b7:	b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5     ................
    47c7:	b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5     ................
    47d7:	b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5     ................
    47e7:	b5 b5 b5 b5 b5 b5 19 19 b5 b5 b5 b5 19 19 19 19     ................
    47f7:	b5 b5 b5 19 b5 b5 b5 19 b5 b5 19 b5 b5 b5 b5 b5     ................
    4807:	b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5     ................
    4817:	b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5     ................
    4827:	19 b5 b5 b5 b5 b5 b5 19 19 19 19 b5 b5 19 19 19     ................
    4837:	19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19     ................
    4847:	19 19 19 19 19 19 19 19 b5 19 19 19 19 19 19 b5     ................
    4857:	b5 19 19 19 19 19 19 b5 b5 19 19 19 19 19 19 b5     ................
    4867:	19 19 b5 b5 b5 b5 b5 b5 19 19 19 19 b5 b5 b5 b5     ................
    4877:	19 b5 b5 b5 19 b5 b5 b5 b5 b5 b5 b5 b5 19 b5 b5     ................
    4887:	b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5     ................
    4897:	b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5     ................
    48a7:	14 14 14 14 14 14 14 14 14 14 14 14 14 19 12 12     ................
    48b7:	14 14 14 19 19 14 14 14 12 12 19 14 14 14 14 14     ................
    48c7:	14 14 14 14 14 14 14 14 14 14 14 14 14 19 12 12     ................
    48d7:	14 14 14 19 19 14 14 14 12 12 19 14 14 14 14 14     ................
    48e7:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    48f7:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    4907:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    4917:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    4927:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    4937:	80 80 80 80 80 80 80 80 80 80 80 e3 80 80 80 80     ................
    4947:	80 80 e3 ff e3 80 80 80 80 80 80 e3 80 80 80 80     ................
    4957:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    4967:	80 80 80 80 80 80 80 ab 80 80 80 80 80 80 ab ab     ................
    4977:	80 80 80 80 80 ab ab ab 80 80 80 80 ab ab ab ab     ................
    4987:	80 80 80 ab ab ab ab ab 80 80 ab ab ab ab ab ab     ................
    4997:	80 ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    49a7:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    49b7:	ab ab ab 7f 7f ab ab ab ab ab ab 7f 7f ab ab ab     ................
    49c7:	ab ab ab 7f 7f ab ab ab ab ab ab 7f 7f ab ab ab     ................
    49d7:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    49e7:	80 80 80 80 80 80 80 9b 80 80 80 80 80 80 9b 9b     ................
    49f7:	80 80 80 80 80 9b 9b 9b 80 80 80 80 9b 9b 9b 9b     ................
    4a07:	80 80 80 9b 9b 9b 9b 9b 80 80 9b 9b 9b 9b 9b 9b     ................
    4a17:	80 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    4a27:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    4a37:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    4a47:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    4a57:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    4a67:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    4a77:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 7f 9b 9b 9b 9b     ................
    4a87:	9b 9b 9b 7f 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    4a97:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    4aa7:	80 80 00 80 80 80 80 80 80 80 00 80 80 80 80 80     ................
    4ab7:	00 00 00 80 80 80 80 80 00 80 80 80 80 80 80 80     ................
    4ac7:	00 00 00 80 80 80 80 80 80 80 00 00 00 80 80 80     ................
    4ad7:	80 80 80 80 7f 80 80 80 80 80 80 7f 80 7f 80 80     ................
    4ae7:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    4af7:	be be be be be be be be be be be be be be be be     ................
    4b07:	b7 b7 b7 b7 b7 b7 b7 b7 b7 b7 b7 b7 b7 b7 b7 b7     ................
    4b17:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    4b27:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    4b37:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    4b47:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    4b57:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    4b67:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    4b77:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    4b87:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    4b97:	77 77 77 77 77 77 77 5b 77 77 77 77 77 5b 09 09     wwwwwww[wwwww[..
    4ba7:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    4bb7:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    4bc7:	77 77 77 77 5b 5b 09 09 77 77 77 5b 5b 5a 5b 5a     wwww[[..www[[Z[Z
    4bd7:	5a 5b 5b 09 09 09 09 09 09 09 09 00 00 50 08 00     Z[[..........P..
    4be7:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    4bf7:	77 77 77 77 77 77 5b 5b 77 77 77 77 5b 5a 09 09     wwwwww[[wwww[Z..
    4c07:	5b 09 09 09 09 08 00 00 09 09 09 08 09 09 09 09     [...............
    4c17:	08 09 09 09 09 09 09 00 09 00 5a 08 09 09 5a 5b     ..........Z...Z[
    4c27:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 5b 5a     wwwwwwwwwwwwww[Z
    4c37:	5b 12 5b 5b 5b 5b 5a 00 00 09 09 5a 09 09 08 09     [.[[[[Z....Z....
    4c47:	09 09 09 09 09 09 09 09 09 09 09 09 09 09 09 09     ................
    4c57:	09 09 00 00 09 00 09 00 09 52 5a 5b 59 59 00 59     .........RZ[YY.Y
    4c67:	5b 5b 5b 5b 5b 77 77 77 09 12 09 09 09 09 5b 5b     [[[[[www......[[
    4c77:	08 00 00 09 5a 08 09 5b 09 08 00 08 08 09 09 09     ....Z..[........
    4c87:	12 5a 5b 09 09 09 09 09 09 09 09 09 09 09 5b 5b     .Z[...........[[
    4c97:	09 5b 12 09 09 09 09 00 59 09 5a 00 51 00 59 5a     .[......Y.Z.Q.YZ
    4ca7:	77 77 77 77 77 77 77 77 5b 77 77 77 77 77 77 77     wwwwwwww[wwwwwww
    4cb7:	5b 5b 77 77 77 77 77 5b 5a 5a 5b 5b 5b 09 09 09     [[wwwww[ZZ[[[...
    4cc7:	09 09 09 09 09 09 5b 5b 5b 5b 09 09 09 00 09 00     ......[[[[......
    4cd7:	09 09 09 5b 09 09 09 08 51 00 09 09 09 09 51 00     ...[....Q.....Q.
    4ce7:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    4cf7:	5b 77 77 77 77 77 77 77 12 5b 5b 5b 77 77 77 77     [wwwwwww.[[[wwww
    4d07:	5a 09 09 09 09 5b 5b 5b 09 09 09 5b 09 5a 12 5b     Z....[[[...[.Z.[
    4d17:	08 00 00 00 00 09 09 09 09 00 09 09 08 09 09 09     ................
    4d27:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    4d37:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    4d47:	5b 5b 77 77 77 77 77 77 5a 09 5a 5a 5b 5b 5b 5b     [[wwwwwwZ.ZZ[[[[
    4d57:	09 09 5b 09 09 09 09 5a 09 09 09 09 00 09 09 5b     ..[....Z.......[
    4d67:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    4d77:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    4d87:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    4d97:	09 09 09 5b 5b 5b 77 77 5b 5a 09 5a 09 09 09 5b     ...[[[ww[Z.Z...[
    4da7:	77 77 77 5b 5b 5b 09 09 77 77 77 5b 5a 08 08 5a     www[[[..www[Z..Z
    4db7:	77 77 77 77 77 77 77 59 77 77 77 77 77 77 77 77     wwwwwwwYwwwwwwww
    4dc7:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    4dd7:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    4de7:	09 00 00 00 00 00 00 08 5a 00 00 09 00 00 51 08     ........Z.....Q.
    4df7:	77 59 77 09 09 08 77 77 77 77 77 77 77 00 00 00     wYw...wwwwwww...
    4e07:	77 77 77 77 77 77 77 00 77 77 77 77 77 77 77 77     wwwwwww.wwwwwwww
    4e17:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    4e27:	5a 00 5a 09 00 09 09 77 00 00 08 00 5a 51 59 59     Z.Z....w....ZQYY
    4e37:	09 09 00 51 09 09 09 77 77 77 51 09 00 77 77 09     ...Q...wwwQ..ww.
    4e47:	00 09 00 52 00 08 5b 77 00 00 00 77 77 77 77 5b     ...R..[w...wwww[
    4e57:	77 77 77 00 00 00 00 00 77 77 77 77 77 77 77 00     www.....wwwwwww.
    4e67:	59 5b 00 77 77 09 77 09 09 77 00 77 77 77 77 77     Y[.ww.w..w.wwwww
    4e77:	77 00 00 00 77 77 77 77 77 77 00 77 00 77 77 77     w...wwwwww.w.www
    4e87:	09 00 00 00 08 00 09 77 5b 00 77 77 09 77 09 09     .......w[.ww.w..
    4e97:	77 77 09 09 09 09 77 09 00 00 77 77 77 00 09 77     ww....w...www..w
    4ea7:	08 77 77 77 77 09 09 5b 77 09 77 09 09 00 5b 5b     .wwww..[w.w...[[
    4eb7:	77 00 09 00 00 09 77 5b 12 00 5b 77 09 09 77 00     w.....w[..[w..w.
    4ec7:	77 09 77 77 09 09 09 00 77 00 00 77 09 77 00 09     w.ww....w..w.w..
    4ed7:	00 77 09 00 09 77 00 77 77 09 09 09 09 00 00 09     .w...w.ww.......
    4ee7:	77 77 00 77 77 00 00 09 5b 77 77 77 77 77 00 00     ww.ww...[wwwww..
    4ef7:	00 00 77 77 77 09 77 09 77 77 09 77 00 09 09 5b     ..www.w.ww.w...[
    4f07:	77 77 77 09 00 00 00 00 09 00 09 77 00 77 5b 77     www........w.w[w
    4f17:	09 77 77 77 00 5b 77 77 77 77 00 00 00 77 77 77     .www.[wwww...www
    4f27:	09 09 09 09 00 09 09 5b 5a 09 5a 5b 5b 5a 5a 08     .......[Z.Z[[ZZ.
    4f37:	77 09 77 77 09 09 5a 09 77 00 77 00 77 77 77 00     w.ww..Z.w.w.www.
    4f47:	09 00 77 09 77 09 09 00 77 77 77 00 00 09 00 00     ..w.w...www.....
    4f57:	77 77 00 00 77 77 00 77 77 00 77 77 77 09 00 00     ww..ww.ww.www...
    4f67:	09 09 09 09 09 09 09 09 09 09 5a 59 77 77 77 77     ..........ZYwwww
    4f77:	5a 08 09 09 5a 00 00 77 77 77 77 77 77 00 77 77     Z...Z..wwwwww.ww
    4f87:	77 77 77 77 00 77 77 77 77 77 77 00 77 77 77 77     wwww.wwwwww.wwww
    4f97:	77 77 09 77 77 77 77 77 09 00 77 77 77 77 77 77     ww.wwwww..wwwwww
    4fa7:	09 5b 09 09 09 5b 5b 59 77 77 77 77 77 77 77 77     .[...[[Ywwwwwwww
    4fb7:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    4fc7:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    4fd7:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    4fe7:	77 00 09 09 77 77 09 09 77 77 77 77 12 77 77 00     w...ww..wwww.ww.
    4ff7:	77 77 77 77 00 00 77 09 77 77 77 77 77 77 00 77     wwww..w.wwwwww.w
    5007:	77 77 77 77 77 77 00 00 77 77 77 77 77 77 77 0a     wwwwww..wwwwwww.
    5017:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5027:	09 00 00 00 77 5b 09 09 77 77 00 77 77 09 77 09     ....w[..ww.ww.w.
    5037:	77 77 00 77 77 00 09 77 00 77 00 77 00 00 77 77     ww.ww..w.w.w..ww
    5047:	00 77 00 77 00 77 77 77 77 5b 00 09 5b 77 77 77     .w.w.wwww[..[www
    5057:	00 00 00 00 77 77 77 08 77 0a 00 09 77 77 77 09     ....www.w...www.
    5067:	09 09 5b 77 77 77 77 77 09 77 77 77 77 77 77 5b     ..[wwwww.wwwwww[
    5077:	09 00 77 77 77 77 09 00 09 77 77 77 09 09 77 77     ..wwww...www..ww
    5087:	00 77 77 5b 00 5b 77 77 09 77 5b 00 00 77 77 77     .ww[.[ww.w[..www
    5097:	09 5b 00 77 77 77 77 77 00 00 77 77 77 77 77 77     .[.wwwww..wwwwww
    50a7:	00 00 5b 00 00 00 77 77 00 00 00 00 77 77 77 77     ..[...ww....wwww
    50b7:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    50c7:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    50d7:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    50e7:	77 77 00 09 77 77 09 09 77 77 00 09 77 00 00 77     ww..ww..ww..w..w
    50f7:	77 77 59 00 00 00 77 77 77 77 77 00 00 13 77 77     wwY...wwwww...ww
    5107:	77 77 77 00 00 5c 77 77 77 77 02 00 00 77 77 77     www..\wwww...www
    5117:	77 02 02 00 00 5c 77 77 77 02 00 00 00 77 77 77     w....\www....www

00005127 <map_font>:
    5127:	25 01 00 31 32 33 34 35 36 37 38 39 3a 3b 3c 3d     %..123456789:;<=
    5137:	3e 3f 40 41 42 43 44 45 46 47 48 49 4a 4b 4c 4d     >?@ABCDEFGHIJKLM
    5147:	4e 4f 50 51 52 53 54                                NOPQRST

0000514e <map_atmosphere>:
    514e:	1c 02 2b 2b 2b 2b 2b 2b 2b 2b 2b 2b 2b 2b 2b 2b     ..++++++++++++++
    515e:	2b 2b 2b 2b 2b 2b 2b 2b 2b 2b 2b 2b 2b 2b 2f 2f     ++++++++++++++//
    516e:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    517e:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f                       //////////

00005188 <map_star_dark>:
    5188:	01 01 1e                                            ...

0000518b <map_star>:
    518b:	01 01 1d                                            ...

0000518e <map_desert_spike_down>:
    518e:	01 01 18                                            ...

00005191 <map_desert_spike_up>:
    5191:	01 01 19                                            ...

00005194 <map_desert_top>:
    5194:	01 01 16                                            ...

00005197 <map_desert_bottom>:
    5197:	01 01 17                                            ...

0000519a <map_city_spark>:
    519a:	01 01 15                                            ...

0000519d <map_city_top>:
    519d:	01 01 14                                            ...

000051a0 <map_city_bottom>:
    51a0:	01 01 13                                            ...

000051a3 <map_jungle_branch>:
    51a3:	01 01 12                                            ...

000051a6 <map_jungle_flower>:
    51a6:	01 01 11                                            ...

000051a9 <map_jungle_top>:
    51a9:	01 01 10                                            ...

000051ac <map_jungle_bottom>:
    51ac:	01 01 0f                                            ...

000051af <map_fire_lava>:
    51af:	01 01 0e                                            ...

000051b2 <map_fire_top>:
    51b2:	01 01 0d                                            ...

000051b5 <map_fire_bottom>:
    51b5:	01 01 0c                                            ...

000051b8 <map_icicle_up>:
    51b8:	01 01 0a                                            ...

000051bb <map_icicle_down>:
    51bb:	01 01 09                                            ...

000051be <map_ice_bottom>:
    51be:	01 01 04                                            ...

000051c1 <map_ice_right>:
    51c1:	01 01 03                                            ...

000051c4 <map_ice_middle>:
    51c4:	01 01 02                                            ...

000051c7 <map_ice_left>:
    51c7:	01 01 01                                            ...

000051ca <map_canvas>:
    51ca:	0f 09 1a 1b 1b 1b 1b 1b 1b 1b 1b 1b 1b 1b 1b 1b     ................
    51da:	1c 1f 00 00 00 00 00 00 00 00 00 00 00 00 00 20     ............... 
    51ea:	1f 00 00 00 00 00 00 00 00 00 00 00 00 00 20 1f     .............. .
	...
    5206:	00 20 1f 00 00 00 00 00 00 00 00 00 00 00 00 00     . ..............
    5216:	20 1f 00 00 00 00 00 00 00 00 00 00 00 00 00 20      .............. 
    5226:	1f 00 00 00 00 00 00 00 00 00 00 00 00 00 20 1f     .............. .
	...
    5242:	00 20 55 56 56 56 56 56 56 56 56 56 56 56 56 56     . UVVVVVVVVVVVVV
    5252:	57                                                  W

00005253 <map_splash>:
    5253:	0f 05 21 21 21 00 21 21 21 00 22 23 24 1d 21 21     ..!!!.!!!."#$.!!
    5263:	21 00 21 00 00 21 1e 00 00 25 26 27 00 21 00 1d     !.!..!...%&'.!..
    5273:	1e 21 00 1d 21 00 00 00 28 29 2a 00 21 21 21 00     .!..!...()*.!!!.
    5283:	21 00 00 21 00 1d 00 2c 2d 2e 00 00 00 21 21 21     !..!...,-....!!!
    5293:	21 00 21 00 00 00 30 00 1e 00 21 21 21              !.!...0...!!!

000052a0 <map_tile_none>:
    52a0:	01 01 00                                            ...

000052a3 <map_space_mega_tiles>:
	...
    52ab:	00 00 00 1d 00 00 00 00 00 00 00 00 00 00 00 1d     ................
	...
    52d3:	00 1e 00 00 00 00 00 00 00 00 00 1d 00 00 00 00     ................
	...
    52f7:	1d 00 00 00 00 00 00 00 1d 00 00 00 00 00 00 00     ................
    5307:	00 00 00 1e 00 00 00 00 00 1d 00 00 00 00 00 00     ................
	...
    532b:	1d 00 00 00 00 00 00 00 1d 00 00 00 00 00 00 00     ................
    533b:	00 00 1e 00 00 00 00 00 00 00 00 00 00 00 1e 00     ................
	...
    5353:	00 00 1d 00 00 1d 00 00 00 00 00 00 00 00 00 00     ................
    5363:	00 00 00 00 00 00 1d 00 00 00 00 00 00 00 00 00     ................
	...
    537b:	00 00 00 1e 00 00 00 1e 1d 00 00 00 00 00 00 00     ................
    538b:	00 00 00 1d 00 00 00 00 00 00 00 00 00 1d 00 00     ................
	...
    53af:	00 1e 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    53c7:	1d 00 00 00 00 00 00 00 00 00 00 00 00 00 00 1d     ................
	...
    53e3:	1e 00 00 00 00 00 00 00 00 00 00 00 00 1e 00 00     ................
	...
    53fb:	1d 00 00 00 00 00 00 00 00 00 00 00 00 00 00 1e     ................
    540b:	00 00 00 00 00 00 00 1d 1d 00 00 00 00 00 00 00     ................
    541b:	00 00 00 00 00 00 00 1d 00 00 00 00 00 00 00 00     ................
    542b:	00 00 00 00 00 1d 00 00 00 00 00 00 00 00 00 00     ................
    543b:	00 00 00 00 00 00 00 1d 00 00 00 00 00 00 00 00     ................
	...
    5457:	00 00 1e 00 00 00 00 00 00 00 00 00 00 1d 00 00     ................
	...
    546f:	00 1e 00 00 00 00 00 00 00 00 00 00 1d 00 00 00     ................
	...
    5487:	00 1d 00 00 00 00 00 00 00 00 00 00 00 1d 00 00     ................
    5497:	00 00 00 00 1d 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    54af:	00 00 1d 00 00 00 00 00 00 00 1e 00 00 00 00 00     ................
	...
    54c7:	00 00 00 1e 00 00 00 00 00 1d 00 00 00 00 1d 00     ................
	...
    54f3:	00 1e 00 00 00 00 1d 00 00 00 1d 1e 00 00 00 00     ................
	...
    5517:	00 00 1d 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5527:	00 00 00 1e 00 00 00 00 00 1d 00 00 00 00 00 00     ................

00005537 <map_level_space>:
    5537:	08 05 00 01 02 03 04 05 06 07 08 09 00 0a 0b 00     ................
    5547:	03 0c 0d 0e 0f 10 11 12 13 14 15 16 17 18 19 1a     ................
    5557:	1b 1c 06 0c 1d 03 1e 1f 03 20                       ......... 

00005561 <map_level_mega_tiles>:
    5561:	06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    5571:	06 06 06 06 06 06 06 06 06 08 06 06 06 06 06 06     ................
    5581:	06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    5591:	06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    55a1:	08 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    55b1:	06 06 06 06 06 06 06 06 06 06 06 06 06 08 06 06     ................
    55c1:	06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    55d1:	06 08 06 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    55e1:	06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    55f1:	06 06 06 06 06 08 06 06 06 06 06 06 06 06 06 06     ................
    5601:	06 06 06 06 06 08 06 06 06 06 06 06 06 06 06 06     ................
    5611:	06 08 06 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    5621:	06 06 06 06 06 06 06 06 06 06 06 04 04 06 06 06     ................
    5631:	04 04 06 06 06 04 04 06 06 06 04 04 06 06 06 04     ................
    5641:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    5651:	04 04 04 04 04 04 04 04 04 04 04 04 06 06 06 04     ................
    5661:	04 06 06 06 04 04 06 06 06 04 04 06 06 06 04 04     ................
    5671:	06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    5681:	06 06 06 06 06 06 06 06 08 06 06 06 06 06 06 06     ................
    5691:	06 06 06 06 06 06 06 08 06 06 06 06 06 06 06 06     ................
    56a1:	06 06 06 06 06 06 06 06 06 08 06 06 06 06 06 06     ................
    56b1:	06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    56c1:	06 06 06 06 06 06 06 06 05 05 05 05 05 07 07 07     ................
    56d1:	07 07 07 07 07 07 07 06 06 08 06 06 06 06 06 06     ................
    56e1:	06 05 05 05 05 05 07 07 07 07 07 07 07 07 07 07     ................
    56f1:	06 06 06 04 04 06 06 06 04 04 05 05 05 04 04 07     ................
    5701:	07 07 04 04 07 07 07 09 09 04 04 04 04 04 04 04     ................
    5711:	04 04 04 04 04 04 04 04 04 04 04 04 04 09 09 09     ................
    5721:	09 09 04 04 06 06 06 04 04 06 06 06 04 04 05 05     ................
    5731:	05 04 04 07 07 07 09 09 07 07 07 06 06 06 06 06     ................
    5741:	06 06 06 06 06 02 02 02 02 02 09 09 09 09 09 07     ................
    5751:	07 07 07 07 06 06 06 06 06 06 06 06 06 06 02 02     ................
    5761:	02 05 05 09 09 09 07 07 07 07 07 07 07 07 07 07     ................
    5771:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    5781:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    5791:	07 07 07 07 07 07 07 07 07 07 07 02 02 02 02 07     ................
    57a1:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    57b1:	07 07 07 02 02 02 02 07 07 07 07 07 07 07 07 07     ................
    57c1:	07 07 07 07 07 07 07 07 07 02 02 0a 07 07 04 04     ................
    57d1:	04 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    57e1:	0a 0a 0a 0a 0a 04 04 04 04 04 07 07 07 07 07 07     ................
    57f1:	07 07 07 07 07 07 07 07 07 0a 0a 07 07 07 04 04     ................
    5801:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    5811:	07 07 07 07 07 07 07 07 07 07 07 5b 07 07 07 07     ...........[....
    5821:	07 07 07 07 07 07 07 58 07 07 07 07 59 5a 5b 07     .......X....YZ[.
    5831:	5a 5c 07 07 07 07 07 07 07 07 07 07 07 07 07 07     Z\..............
    5841:	07 07 07 07 07 07 07 02 02 07 07 02 04 04 07 07     ................
    5851:	07 07 07 07 07 07 07 02 07 07 07 02 04 02 02 02     ................
    5861:	04 04 04 04 04 04 04 02 04 04 04 04 04 04 04 04     ................
    5871:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    5881:	04 04 04 04 02 04 04 04 04 04 04 04 04 04 04 04     ................
    5891:	04 04 04 04 04 04 04 04 04 02 07 07 07 07 04 02     ................
    58a1:	02 07 07 04 04 04 02 07 04 04 04 04 02 04 04 04     ................
    58b1:	04 04 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    58c1:	07 07 07 07 07 07 02 07 07 07 07 07 07 07 07 07     ................
    58d1:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    58e1:	07 07 5b 5a 07 07 07 07 07 07 07 07 07 07 58 07     ..[Z..........X.
    58f1:	07 07 07 59 5a 5b 07 07 5c 07 07 07 07 07 07 07     ...YZ[..\.......
    5901:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    5911:	07 07 07 07 07 02 07 07 07 07 07 07 07 07 07 07     ................
    5921:	07 07 07 07 07 02 02 02 02 02 04 04 04 04 04 07     ................
    5931:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 02 02     ................
    5941:	02 0a 0a 04 04 04 04 04 07 07 07 07 07 07 07 07     ................
    5951:	07 07 07 07 07 07 07 0a 0a 0a 0a 02 04 04 04 04     ................
    5961:	04 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    5971:	02 0a 0a 0a 0a 04 04 04 04 04 07 07 07 07 07 07     ................
    5981:	07 07 07 07 07 07 07 07 07 0a 0a 02 02 0a 04 04     ................
    5991:	04 04 04 07 07 07 07 07 07 07 07 02 02 07 07 07     ................
    59a1:	09 09 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    59b1:	07 02 02 02 02 02 09 09 09 09 09 07 07 07 07 07     ................
    59c1:	07 07 07 07 07 07 07 07 07 07 02 07 07 07 07 09     ................
    59d1:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    59e1:	09 09 09 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    59f1:	07 07 07 07 07 07 07 09 09 09 09 09 07 07 07 07     ................
    5a01:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    5a11:	09 09 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    5a21:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 02 02     ................
    5a31:	02 07 07 09 09 09 07 07 07 07 07 07 07 07 07 07     ................
    5a41:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 58     ...............X
    5a51:	07 07 07 07 59 5a 07 5b 5a 5c 07 07 07 07 07 07     ....YZ.[Z\......
    5a61:	07 07 07 07 07 07 07 07 07 07 5b 07 07 07 07 07     ..........[.....
    5a71:	07 07 07 07 07 07 07 07 07 07 07 07 07 5a 07 07     .............Z..
    5a81:	07 07 07 02 02 02 02 02 04 04 04 04 04 07 5c 5b     ..............\[
    5a91:	5a 07 5b 5c 07 07 07 07 5d 07 07 07 02 02 02 02     Z.[\....].......
    5aa1:	02 04 04 04 04 04 07 07 07 07 07 07 07 07 07 07     ................
    5ab1:	07 07 07 07 02 02 02 02 02 04 04 04 04 04 04 07     ................
    5ac1:	02 04 04 04 02 04 04 04 04 04 04 04 04 04 04 04     ................
    5ad1:	04 04 04 04 04 04 04 04 04 02 07 07 07 04 04 02     ................
    5ae1:	07 07 04 04 04 02 07 04 04 04 04 02 04 04 04 04     ................
    5af1:	04 07 07 07 07 07 07 07 07 5a 5b 07 07 07 07 07     .........Z[.....
    5b01:	02 02 02 02 02 04 04 04 04 04 5c 5b 5a 07 07 5c     ..........\[Z..\
    5b11:	07 07 07 07 5d 07 07 07 07 02 02 0a 0a 0a 04 04     ....]...........
    5b21:	04 04 04 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    5b31:	07 07 0a 0a 0a 02 02 04 04 04 04 04 07 07 07 07     ................
    5b41:	07 07 07 07 07 07 07 07 07 07 07 0a 02 02 0a 0a     ................
    5b51:	04 04 04 04 04 07 07 07 02 04 07 07 02 04 04 07     ................
    5b61:	02 04 04 04 02 04 04 04 04 04 04 04 04 04 07 07     ................
    5b71:	07 5c 5b 07 5a 5b 5c 07 07 07 07 5d 07 02 02 02     .\[.Z[\....]....
    5b81:	02 02 04 04 04 04 04 5a 07 07 07 07 07 07 07 07     .......Z........
    5b91:	07 07 07 07 07 07 02 02 02 02 02 04 04 04 04 04     ................
    5ba1:	5e 5e 5e 5e 5e 5e 5e 5e 5e 5e 5e 5e 5e 5e 5e 5e     ^^^^^^^^^^^^^^^^
    5bb1:	5e 5e 5e 5e 5e 5e 5e 5e 5e 5e 5e 5e 5e 5e 5e 5e     ^^^^^^^^^^^^^^^^
    5bc1:	5e 5e 5e 0b 0b 0b 0b 0b 5f 5f 5f 5f 5f 5f 5f 5f     ^^^.....________
    5bd1:	5f 5f 5e 5e 5e 5e 5e 5e 5e 5e 5e 5e 0b 0b 0b 0b     __^^^^^^^^^^....
    5be1:	0b 5f 5f 5f 5f 5f 5f 5f 5f 60 61 5e 5e 5e 5e 5e     .________`a^^^^^
    5bf1:	5e 5e 5e 5e 5e 0b 0b 0b 0b 0b 5f 5f 5f 5f 5f 62     ^^^^^....._____b
    5c01:	5f 5f 5f 5f 5e 5e 5e 5e 5e 5e 5e 5e 5e 5e 0b 0b     ____^^^^^^^^^^..
    5c11:	0b 0b 0b 5f 5f 60 61 62 5f 63 5c 5c 5c 5e 5e 5e     ...__`ab_c\\\^^^
    5c21:	5e 5e 5e 5e 5e 5e 5e 0b 0b 0b 0b 0b 5f 5f 5f 5f     ^^^^^^^.....____
    5c31:	5f 64 5f 5f 5f 5f 5e 5e 5e 5e 5e 5e 5e 5e 5e 5e     _d____^^^^^^^^^^
    5c41:	0b 0b 0b 0b 0b 5f 5f 5f 5f 5f 5f 5f 5f 5f 60 5e     ....._________`^
    5c51:	5e 5e 5e 5e 5e 5e 5e 5e 5e 0b 0b 0b 0b 0b 5f 5f     ^^^^^^^^^.....__
    5c61:	5f 5f 5f 61 62 5f 5f 5f 5e 5e 5e 5e 5e 5e 5e 5e     ___ab___^^^^^^^^
    5c71:	5e 5e 0b 0b 0b 0b 0b 5f 5f 5f 5f 60 5f 5f 5f 63     ^^.....____`___c
    5c81:	5c 5e 5e 5e 5e 5e 5e 5e 5e 5e 5e 0b 0b 0b 0b 0b     \^^^^^^^^^^.....
    5c91:	61 62 5f 5f 5f 5c 5c 64 5f 5f 5e 5e 5e 5e 5e 5e     ab___\\d__^^^^^^
    5ca1:	5e 5e 5e 5e 0b 0b 0b 0b 0b 5f 60 61 62 5f 63 5c     ^^^^....._`ab_c\
    5cb1:	5c 5c 64 5e 5e 5e 5e 5e 5e 5e 5e 5e 5e 0b 0b 0b     \\d^^^^^^^^^^...
    5cc1:	0b 0b 5f 5f 5f 5f 5f 5f 60 61 62 5f 5e 5e 5e 5e     ..______`ab_^^^^
    5cd1:	5e 5e 5e 5e 5e 5e 0b 0b 0b 0b 0b 5f 5f 5f 5f 5f     ^^^^^^....._____
    5ce1:	5f 5f 60 61 62 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f     __`ab___________
    5cf1:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f     ________________
    5d01:	63 5c 5c 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f     c\\_____________
    5d11:	5f 5f 5f 5f 5f 5f 5f 5c 64 5f 5f 5f 5f 5f 5f 5f     _______\d_______
    5d21:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f     ________________
    5d31:	5f 5f 5f 63 5c 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f     ___c\___________
    5d41:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5c 5c 64 5f 5f 5f 5f     _________\\d____
    5d51:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f     ________________
    5d61:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f     ________________
    5d71:	5f 5f 5f 5f 0d 0d 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f     ____..__________
    5d81:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 0d 0d 0d 0d 5f 5f     __________....__
    5d91:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f     ________________
    5da1:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 0c 5f 5f 5f     ____________.___
    5db1:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 0c 5f 5f 5f     ____________.___
    5dc1:	5f 0c 0e 0e 0e 0e 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f     _.....__________
    5dd1:	5f 5f 5f 5f 5f 5f 5f 5f 0c 5f 0e 0e 0e 0c 0c 63     ________._.....c
    5de1:	5c 5c 5c 64 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f     \\\d____________
    5df1:	5f 5f 5f 5f 5f 5f 5f 5f 5f 63 5c 5c 5c 5f 5f 5f     _________c\\\___
    5e01:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f     ________________
    5e11:	5f 64 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f     _d______________
    5e21:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f     ________________
    5e31:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 0d 0d 0d 0d 5f 5f     __________....__
    5e41:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f     ________________
    5e51:	5f 5f 0d 0d 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f     __..____________
    5e61:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 0d     _______________.
    5e71:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f     ________________
    5e81:	5f 5f 5f 5f 0d 0d 0d 0d 0d 5f 5f 5f 5f 5f 5f 5f     ____....._______
    5e91:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f     ________________
    5ea1:	5f 5f 5f 5f 5f 0d 0d 5f 5f 5f 5f 5f 5f 5f 5f 5f     _____.._________
    5eb1:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 0d 0d 0d 0d 5f     ___________...._
    5ec1:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f     ________________
    5ed1:	5f 5f 5f 5f 5f 5f 5f 5f 0d 5f 5f 5f 0c 0c 5f 5f     ________.___..__
    5ee1:	0c 0c 0c 5f 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ..._............
    5ef1:	0c 0c 0c 0c 0e 0e 0e 0c 0c 0c 0c 0c 0c 0c 0c 0c     ................
    5f01:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0e 0e 0c 0c 0c     ................
    5f11:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ................
    5f21:	0c 0c 0c 0c 0c 5f 5f 5f 5f 0c 0c 5f 5f 5f 0c 0c     .....____..___..
    5f31:	0c 5f 5f 0c 0c 0c 0c 5f 0c 0c 0c 0c 0d 5f 5f 5f     .__...._.....___
    5f41:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f     ________________
    5f51:	5f 0c 0e 0e 0e 0e 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f     _.....__________
    5f61:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 0e 0e 0e 0c 0c 5f     __________....._
    5f71:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f     ________________
    5f81:	5f 5f 5f 5f 0c 0c 0e 0e 5f 5f 5f 5f 5f 5f 5f 5f     ____....________
    5f91:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 0e 0e 0e 0e     ____________....
    5fa1:	0e 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f     ._______________
    5fb1:	5f 5f 5f 5f 5f 0c 0c 5f 5f 5f 5f 5f 5f 5f 5f 5f     _____.._________
    5fc1:	5f 5f 5f 5f 5f 5f 5f 5f 5f 0d 0d 0d 0d 0d 0c 0c     _________.......
    5fd1:	0c 0c 0c 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f     ..._____________
    5fe1:	5f 5f 0d 0d 5f 5f 5f 0c 0c 0e 0e 0e 5f 5f 5f 0d     __..___.....___.
    5ff1:	0c 5f 5f 0d 0c 0c 5f 0d 0c 0c 0c 0d 0c 0c 0c 0c     .__..._.........
    6001:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ................
    6011:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0d 5f     ..............._
    6021:	5f 5f 5f 0c 0d 5f 5f 5f 0c 0c 0d 5f 5f 0c 0c 0c     ___..___...__...
    6031:	5f 5f 0c 0c 0c 0e 0e 5f 5f 5f 5f 5f 5f 5f 5f 5f     __....._________
    6041:	5f 5f 5f 5f 5f 5f 5f 0d 0d 5f 5f 0e 0c 0c 0e 0e     _______..__.....
    6051:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f     ________________
    6061:	0d 0d 0d 0d 0e 0c 0c 0c 0c 5f 5f 5f 0c 0c 5f 5f     .........___..__
    6071:	0c 0c 0c 5f 0c 0c 0c 0c 0d 0c 0c 0c 0c 0c 0c 0c     ..._............
    6081:	0c 0c 0c 5f 5f 5f 5f 0c 0c 5f 5f 5f 0c 0c 0c 5f     ...____..___..._
    6091:	5f 0c 0c 0c 0d 0d 0c 0c 0c 0c 0c 5f 5f 5f 5f 5f     _.........._____
    60a1:	5f 5f 5f 5f 0c 5f 5f 5f 0c 0c 0d 0d 0d 0c 0c 0c     ____.___........
    60b1:	0c 0c 0c 0c 0c 0c 0c 0c 0e 0c 0c 0c 0c 0c 0c 0c     ................
    60c1:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0e 0e 0e     ................
    60d1:	0e 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ................
    60e1:	0c 0c 0c 0c 0c 0c 0c 0c 0c 5f 5f 0c 0c 0c 0c 5f     .........__...._
    60f1:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 65     ...............e
    6101:	65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65     eeeeeeeeeeeeeeee
    6111:	65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65     eeeeeeeeeeeeeeee
    6121:	65 65 66 66 66 66 66 67 67 67 67 67 67 67 67 67     eefffffggggggggg
    6131:	67 65 65 65 65 65 65 65 65 65 65 66 66 66 66 66     geeeeeeeeeefffff
    6141:	67 67 68 69 6a 67 67 67 6b 67 65 65 65 65 65 65     gghijgggkgeeeeee
    6151:	65 65 65 65 66 66 66 66 66 67 67 67 68 69 67 67     eeeefffffggghigg
    6161:	67 67 6b 65 65 65 65 65 65 65 65 65 65 66 66 66     ggkeeeeeeeeeefff
    6171:	66 66 6a 67 67 67 67 67 67 67 67 67 65 65 65 65     ffjgggggggggeeee
    6181:	65 65 65 65 65 65 66 66 66 66 66 67 68 69 6a 67     eeeeeefffffghijg
    6191:	67 67 6b 67 67 65 65 65 65 65 65 65 65 65 65 66     ggkggeeeeeeeeeef
    61a1:	66 66 66 66 68 69 6a 67 67 67 6b 67 67 67 65 65     ffffhijgggkgggee
    61b1:	65 65 65 65 65 65 65 65 66 66 66 66 66 67 67 67     eeeeeeeefffffggg
    61c1:	67 68 67 67 67 67 67 65 65 65 65 65 65 65 65 65     ghgggggeeeeeeeee
    61d1:	65 66 66 66 66 66 69 6a 67 67 67 6b 67 67 67 67     efffffijgggkgggg
    61e1:	67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67     gggggggggggggggg
    61f1:	67 67 67 67 67 67 67 67 67 67 67 12 12 12 67 67     ggggggggggg...gg
    6201:	67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67     gggggggggggggggg
    6211:	67 67 12 12 12 6b 67 67 67 67 6b 67 67 67 67 6b     gg...kggggkggggk
    6221:	67 67 67 67 6b 67 67 67 67 6b 67 67 67 67 12 12     ggggkggggkgggg..
    6231:	67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67     gggggggggggggggg
    6241:	67 67 67 67 12 12 12 12 6b 11 67 67 67 6b 67 67     gggg....k.gggkgg
    6251:	67 67 6b 67 67 67 67 6b 67 67 67 67 6b 67 12 12     ggkggggkggggkg..
    6261:	12 12 67 67 67 67 67 67 67 67 67 67 67 67 67 67     ..gggggggggggggg
    6271:	67 67 67 67 67 67 12 12 6b 67 67 67 67 6b 67 67     gggggg..kggggkgg
    6281:	67 67 6b 67 67 67 67 6b 67 67 67 67 6b 67 67 12     ggkggggkggggkgg.
    6291:	12 12 12 12 67 67 67 67 67 67 67 67 67 67 67 67     ....gggggggggggg
    62a1:	67 67 67 67 67 67 67 67 12 6b 67 67 67 67 6b 67     gggggggg.kggggkg
    62b1:	67 67 67 6b 67 67 67 67 6b 67 67 67 67 6b 67 67     gggkggggkggggkgg
    62c1:	67 67 67 67 67 12 67 67 67 67 67 67 67 67 67 67     ggggg.gggggggggg
    62d1:	67 67 67 67 67 67 67 67 67 67 6b 67 67 67 67 6b     ggggggggggkggggk
    62e1:	67 67 67 67 6b 67 67 67 67 6b 67 67 67 67 6b 67     ggggkggggkggggkg
    62f1:	67 67 67 12 12 12 12 6b 67 67 67 67 6b 67 67 67     ggg....kggggkggg
    6301:	67 6b 67 67 67 67 6b 67 67 67 67 6b 67 67 67 67     gkggggkggggkgggg
    6311:	67 67 67 67 67 67 67 67 67 67 67 67 67 12 12 12     ggggggggggggg...
    6321:	67 67 67 67 67 67 67 67 6b 12 67 67 67 6b 67 67     ggggggggk.gggkgg
    6331:	67 67 6b 67 12 12 12 6b 67 67 67 67 6b 67 12 12     ggkg...kggggkg..
    6341:	12 12 12 11 67 67 67 67 67 67 67 67 67 67 67 67     ....gggggggggggg
    6351:	67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67     gggggggggggggggg
    6361:	67 67 67 67 67 67 67 67 67 12 12 67 67 67 67 67     ggggggggg..ggggg
    6371:	67 67 67 67 6b 67 67 67 67 6b 67 67 67 67 6b 12     ggggkggggkggggk.
    6381:	12 12 12 6b 67 67 67 67 6b 12 67 67 67 67 67 67     ...kggggk.gggggg
    6391:	67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67     gggggggggggggggg
    63a1:	67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67     gggggggggggggggg
    63b1:	67 67 12 12 12 12 67 67 67 67 67 67 67 6b 12 12     gg....gggggggk..
    63c1:	67 67 6b 67 67 67 67 6b 67 67 12 12 6b 67 67 67     ggkggggkgg..kggg
    63d1:	67 6b 67 67 12 12 12 12 67 67 67 67 67 67 67 67     gkgg....gggggggg
    63e1:	67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67     gggggggggggggggg
    63f1:	67 67 67 67 67 67 67 67 67 67 67 67 12 12 12 12     gggggggggggg....
    6401:	12 67 67 67 67 67 67 6b 12 12 12 67 6b 67 67 67     .ggggggk...gkggg
    6411:	67 6b 67 67 67 12 6b 67 67 67 67 6b 67 67 67 12     gkggg.kggggkggg.
    6421:	12 12 67 67 67 67 67 67 67 67 67 67 67 67 67 67     ..gggggggggggggg
    6431:	67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67     gggggggggggggggg
    6441:	67 67 67 67 67 67 67 67 67 67 67 12 67 67 67 67     ggggggggggg.gggg
    6451:	67 6b 12 12 12 12 6b 67 67 67 67 6b 67 67 67 67     gk....kggggkgggg
    6461:	6b 67 67 67 67 6b 67 67 67 67 12 12 67 67 67 67     kggggkgggg..gggg
    6471:	67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67     gggggggggggggggg
    6481:	67 67 67 12 67 67 67 67 67 67 67 67 67 67 67 67     ggg.gggggggggggg
    6491:	67 67 67 67 67 67 12 67 67 67 67 67 67 67 67 67     gggggg.ggggggggg
    64a1:	67 67 67 67 67 67 67 67 67 67 67 10 10 10 10 10     ggggggggggg.....
    64b1:	0f 0f 0f 0f 0f 67 67 67 6b 67 67 67 67 6b 67 67     .....gggkggggkgg
    64c1:	67 67 6b 67 10 10 10 10 10 0f 0f 0f 0f 0f 67 67     ggkg..........gg
    64d1:	67 67 6b 67 67 67 67 6b 67 67 67 67 6b 10 10 10     ggkggggkggggk...
    64e1:	10 10 0f 0f 0f 0f 0f 67 67 67 67 67 67 67 67 67     .......ggggggggg
    64f1:	67 67 67 67 67 67 10 10 10 67 67 0f 0f 0f 04 04     gggggg...gg.....
    6501:	67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67     gggggggggggggggg
    6511:	67 67 67 67 04 04 04 04 04 67 67 67 67 67 67 67     gggg.....ggggggg
    6521:	67 67 67 67 67 67 67 67 67 10 10 67 67 04 0f 0f     ggggggggg..gg...
    6531:	04 04 67 67 67 6b 67 67 67 67 6b 67 67 67 67 6b     ..gggkggggkggggk
    6541:	67 67 10 10 10 10 04 0f 0f 0f 0f 67 67 6b 67 67     gg.........ggkgg
    6551:	67 67 6b 67 67 67 67 6b 67 67 10 10 10 10 10 0f     ggkggggkgg......
    6561:	0f 0f 0f 0f 67 6b 67 67 67 67 6b 67 67 67 67 6b     ....gkggggkggggk
    6571:	67 67 67 10 10 10 10 10 0f 0f 0f 0f 0f 6b 67 67     ggg..........kgg
    6581:	67 67 6b 67 67 67 67 6b 67 67 67 67 10 10 10 10     ggkggggkgggg....
    6591:	10 0f 0f 0f 0f 0f 6c 6c 6c 6c 6c 6c 6c 6c 6c 6d     ......lllllllllm
    65a1:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    65b1:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    65c1:	6c 6c 6c 6c 6d 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllmlllllllllll
    65d1:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    65e1:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6d 6c 6c 6c 6c 6c 6c     lllllllllmllllll
    65f1:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    6601:	6c 6c 6c 6c 6c 6c 6d 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllmlllllllll
    6611:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    6621:	6c 6c 6c 6c 6c 6c 6e 6c 6c 6c 6c 6f 6c 6c 6e 6c     llllllnllllollnl
    6631:	6c 6c 6e 06 6c 6c 6e 06 06 6c 6c 06 14 14 14 14     lln.lln..ll.....
    6641:	6f 6f 6f 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     ooolllllllllllll
    6651:	6c 6c 6c 6c 14 14 14 14 14 70 6c 6c 6c 6c 6c 6c     llll.....pllllll
    6661:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    6671:	6c 6c 6c 6c 6c 6c 6f 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllolllllllll
    6681:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6f 6f 6f 6c 6c     llllllllllloooll
    6691:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6e 6c     llllllllllllllnl
    66a1:	6c 6c 6e 06 6c 6c 6c 6f 6f 6c 6e 6c 6c 6c 6e 06     lln.llloolnllln.
    66b1:	6c 6c 6c 06 06 6c 6c 6c 06 06 6c 6c 6c 6f 6f 6c     lll..lll..lllool
    66c1:	6c 70 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     lpllllllllllllll
    66d1:	6c 6c 6c 6c 6c 6c 6c 6f 6f 6f 6f 6c 6c 6c 6c 6e     llllllloooolllln
    66e1:	6c 6c 6c 6e 06 6c 6c 6e 06 06 6c 6e 06 06 06 6c     llln.lln..ln...l
    66f1:	6f 6f 6f 6f 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     oooollllllllllll
    6701:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 70 6c 6c 6c 6c 6c     llllllllllplllll
    6711:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    6721:	6c 6c 6c 70 6c 6f 6c 6c 6c 6c 6c 6c 6c 6c 6c 6e     lllplollllllllln
    6731:	6c 6c 6c 6e 06 6c 6c 6e 06 06 6c 6c 6f 6f 6f 6e     llln.lln..llooon
    6741:	6c 6c 6c 6c 06 6c 6c 6c 6c 06 6c 6c 6c 6c 06 6c     llll.llll.llll.l
    6751:	6c 6c 6c 6f 6c 6c 70 6c 6c 6c 6c 6c 6c 6c 6c 6c     lllollplllllllll
    6761:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6f 6f 6f 6f     lllllllllllloooo
    6771:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    6781:	6c 6c 6c 6c 14 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llll.lllllllllll
    6791:	6c 6c 6c 6c 6c 6c 6c 6c 6c 14 14 14 14 14 6c 6c     lllllllll.....ll
    67a1:	6c 6c 15 6c 6c 6c 6c 6f 6c 6c 6c 6c 6f 6c 6c 6c     ll.llllollllolll
    67b1:	6c 6f 14 14 14 6c 6f 6c 6c 6c 6c 6f 6f 6f 6f 6c     lo...lollllooool
    67c1:	70 6f 6f 6f 70 71 6f 6f 6f 72 72 6f 6f 6f 72 72     pooopqooorrooorr
    67d1:	6f 6f 6f 72 72 71 6c 6c 6c 6c 71 6c 6c 6c 6c 72     ooorrqllllqllllr
    67e1:	6c 6c 6c 6c 72 6c 6c 6c 6c 72 6c 6c 6c 6c 6c 6c     llllrllllrllllll
    67f1:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    6801:	14 14 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     ..llllllllllllll
    6811:	6c 6c 6c 6c 6c 6c 14 14 14 14 14 73 6c 6c 6c 6c     llllll.....sllll
    6821:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 14     lllllllllllllll.
    6831:	14 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6f 6c 6c     .lllllllllllloll
    6841:	6c 6c 6f 6c 6c 6c 6c 6f 6c 6c 6c 6c 6f 6c 6c 6c     llollllollllolll
    6851:	6c 6f 6f 6f 6f 6c 6c 6f 6f 6f 6c 6c 6f 6f 6f 6c     loooollooolloool
    6861:	6c 6f 6f 6f 6c 6c 6f 6f 6f 6c 6c 6c 6c 6c 6c 6c     looollooolllllll
    6871:	6c 6c 6c 6c 6c 6c 6c 72 72 72 6c 6c 72 72 72 6c     lllllllrrrllrrrl
    6881:	6c 72 72 72 6c 6c 6c 6f 6f 6c 6c 6c 6f 6f 6c 6c     lrrrllloolllooll
    6891:	6c 6f 6f 6c 6c 6c 6f 6f 6c 6c 6c 6f 6f 6f 6f 6c     loollloolllooool
    68a1:	70 71 6f 6f 70 71 71 6f 6f 72 72 72 6f 6f 72 72     pqoopqqoorrroorr
    68b1:	72 6f 6f 72 72 72 6c 6f 6f 6f 6f 6c 6f 6f 6f 6f     roorrrlooooloooo
    68c1:	6c 6f 6f 6f 6f 6c 6f 6f 6f 6f 6c 6f 6f 6f 6f 6c     looooloooolooool
    68d1:	6c 6c 6c 6c 6c 6c 6c 6c 6c 72 72 72 6c 6c 72 72     lllllllllrrrllrr
    68e1:	72 6c 6c 72 72 72 6c 6c 6c 70 71 6c 6c 70 71 71     rllrrrlllpqllpqq
    68f1:	6c 6c 72 72 72 6c 6c 72 72 72 6c 6c 72 72 72 6c     llrrrllrrrllrrrl
    6901:	6c 6c 70 71 6c 6f 70 71 71 6c 6f 72 72 72 6c 6f     llpqlopqqlorrrlo
    6911:	72 72 72 6c 6f 72 72 72 6c 6f 6f 6f 6f 6c 6c 6f     rrrlorrrloooollo
    6921:	6f 6f 6c 6c 6f 6f 6f 72 72 6f 6f 6f 72 72 6f 6f     oollooorrooorroo
    6931:	6f 72 72 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 72 6c 6c     orrllllllllllrll
    6941:	6c 6c 72 6c 6c 6c 6c 72 6c 6c 6c 6c 6c 6c 6f 6f     llrllllrlllllloo
    6951:	6f 6c 6c 6f 6f 6f 6c 6c 6f 6f 6f 6c 6c 6f 6f 6f     ollooollooollooo
    6961:	6c 6c 6f 6f 6f 6f 6c 70 71 6c 6f 70 71 71 6c 6f     lloooolpqlopqqlo
    6971:	72 72 72 6c 6f 72 72 72 6c 6f 72 72 72 6c 6f 6f     rrrlorrrlorrrloo
    6981:	6f 6f 6c 6f 6f 6f 6f 6c 6f 6f 6f 6f 72 6f 6f 6f     oolooooloooorooo
    6991:	6f 72 6f 6f 6f 6f 72 6c 6c 6c 6c 6c 6c 6c 6c 6c     oroooorlllllllll
    69a1:	6c 72 72 6c 6c 6c 72 72 6c 6c 6c 72 72 6c 6c 6c     lrrlllrrlllrrlll
    69b1:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 14     lllllllllllllll.
    69c1:	14 14 14 14 13 13 13 13 13 6c 6c 6f 6f 6c 6c 6c     .........lloolll
    69d1:	6f 6f 72 6c 6c 06 06 72 14 14 14 14 14 13 13 13     oorll..r........
    69e1:	13 13 6c 6c 6c 6c 6f 6c 6c 6c 6c 6f 6c 6c 6c 6c     ..llllollllollll
    69f1:	06 14 14 14 14 14 13 13 13 13 13 6f 6f 6f 72 72     ...........ooorr
    6a01:	6f 6f 6f 72 72 06 06 06 72 72 14 14 14 14 14 13     ooorr...rr......
    6a11:	13 13 13 13 72 6c 6c 6c 6c 72 6c 6c 6c 6c 72 6c     ....rllllrllllrl
    6a21:	6c 6c 6c 14 14 14 14 14 13 13 13 13 13 6f 6f 6f     lll..........ooo
    6a31:	6c 6c 6f 6f 6f 6c 6c 06 06 06 6c 6c 14 14 14 14     lloooll...ll....
    6a41:	14 13 13 13 13 13 6c 6c 72 72 72 6c 6c 72 72 72     ......llrrrllrrr
    6a51:	6c 6c 72 72 72 14 14 14 14 14 13 13 13 13 13 6f     llrrr..........o
    6a61:	6f 6c 6f 6f 6f 6f 72 6f 6f 06 06 72 06 06 14 14     olooooroo..r....
    6a71:	14 14 14 13 13 13 13 13 6f 6f 72 72 72 6f 6f 72     ........oorrroor
    6a81:	72 72 06 06 72 72 72 14 14 14 14 14 13 13 13 13     rr..rrr.........
    6a91:	13 6c 6f 6f 6f 6f 6c 6f 6f 6f 6f 6c 06 06 06 06     .loooolooool....
    6aa1:	14 14 14 14 14 13 13 13 13 13 72 72 72 6c 6c 72     ..........rrrllr
    6ab1:	72 72 6c 6c 72 72 72 6c 6c 14 14 14 14 14 13 13     rrllrrrll.......
    6ac1:	13 13 13 72 72 72 6f 6f 72 72 72 6f 6f 72 72 72     ...rrroorrroorrr
    6ad1:	06 06 14 14 14 14 14 13 13 13 13 13 6c 6f 6f 6f     ............looo
    6ae1:	6f 72 6f 6f 6f 6f 72 06 06 06 06 14 14 14 14 14     oroooor.........
    6af1:	13 13 13 13 13 72 72 72 6c 6f 72 72 72 6c 6f 72     .....rrrlorrrlor
    6b01:	72 72 6c 06 14 14 14 14 14 13 13 13 13 13 6f 6c     rrl...........ol
    6b11:	6f 6f 6f 6f 72 6f 6f 6f 06 72 06 06 06 14 14 14     oooorooo.r......
    6b21:	14 14 13 13 13 13 13 6f 72 72 72 6c 6f 72 72 72     .......orrrlorrr
    6b31:	6c 06 72 72 72 6c 14 14 14 14 14 13 13 13 13 13     l.rrrl..........
    6b41:	6f 6f 6f 6f 72 6f 6f 6f 6f 72 06 06 06 06 72 14     ooooroooor....r.
    6b51:	14 14 14 14 13 13 13 13 13 72 72 6c 6c 6c 72 72     .........rrlllrr
    6b61:	6c 6c 6c 72 72 6c 6c 6c 14 14 14 14 14 13 13 13     lllrrlll........
    6b71:	13 13 65 65 65 65 65 65 65 65 65 65 74 74 74 74     ..eeeeeeeeeetttt
    6b81:	74 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75     tuuuuuuuuuuuuuuu
    6b91:	75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75     uuuuuuuuuuuuuuuu
    6ba1:	75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75     uuuuuuuuuuuuuuuu
    6bb1:	75 75 75 75 75 75 75 75 75 75 75 75 76 75 75 75     uuuuuuuuuuuuvuuu
    6bc1:	75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75     uuuuuuuuuuuuuuuu
    6bd1:	75 77 78 79 7a 7b 75 75 75 75 75 75 75 75 75 75     uwxyz{uuuuuuuuuu
    6be1:	75 75 75 75 75 75 75 75 75 75 7c 7d 7e 75 75 75     uuuuuuuuuu|}~uuu
    6bf1:	75 75 75 7f 75 75 75 75 75 75 75 75 75 75 16 16     uuu.uuuuuuuuuu..
    6c01:	16 16 16 17 17 17 17 17 80 81 82 83 84 75 75 88     .............uu.
    6c11:	89 8a 75 75 75 8c 75 16 16 16 16 16 17 17 17 17     ..uuu.u.........
    6c21:	17 85 86 87 75 75 8b 75 75 75 75 75 75 75 75 75     ....uu.uuuuuuuuu
    6c31:	16 16 16 16 16 17 17 17 17 17 75 75 75 75 75 75     ..........uuuuuu
    6c41:	75 75 75 75 75 75 75 75 75 16 16 16 16 16 17 17     uuuuuuuuu.......
    6c51:	17 17 17                                            ...

00006c54 <map_level_desert>:
    6c54:	33 05 77 77 77 77 77 77 77 77 77 77 77 77 77 77     3.wwwwwwwwwwwwww
    6c64:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    6c74:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    6c84:	77 77 77 77 77 e2 e2 e2 e2 e2 e2 e2 e2 e2 e2 e2     wwwww...........
    6c94:	e2 e2 e2 e2 e2 e2 e2 e2 e2 e2 e2 e2 e2 e2 e2 e2     ................
    6ca4:	e2 e2 e2 e2 e2 e2 e2 e2 e2 e2 e2 e2 e2 e2 e2 e2     ................
    6cb4:	e2 e2 e2 e2 e2 e2 e2 e2 e3 e3 e3 e3 e3 e3 e3 e3     ................
    6cc4:	e3 e3 e3 e3 e3 e3 e3 e3 e3 e3 e3 e3 e3 e3 e3 e3     ................
    6cd4:	e3 e3 e3 e3 e3 e3 e3 e3 e3 e3 e3 e3 e3 e3 e3 e3     ................
    6ce4:	e3 e3 e3 e3 e3 e3 e3 e3 e3 e3 e3 e4 e5 e6 e3 e3     ................
    6cf4:	e3 e3 e3 e3 e3 e3 e3 e3 e3 e3 e3 e3 e3 e3 e3 e3     ................
    6d04:	e3 e3 e3 e3 e3 e3 e3 e3 e3 e3 e3 e3 e3 e3 e3 e3     ................
    6d14:	e3 e3 e3 e3 e3 e3 e3 e3 e3 e3 e3 e3 e3 e3 e7 e8     ................
    6d24:	e9 ea ea ea ea ea ea ea ea ea ea ea ea ea ea ea     ................
    6d34:	ea ea ea ea ea ea ea ea ea ea ea ea ea ea ea ea     ................
    6d44:	ea ea ea ea ea ea ea ea ea ea ea ea ea ea ea ea     ................
    6d54:	ea                                                  .

00006d55 <map_level_city>:
    6d55:	33 05 a6 a7 a8 a9 a8 a8 a8 a8 a8 a8 a8 a8 a8 a8     3...............
    6d65:	a8 a8 a8 a8 a8 a8 a8 a8 a8 a8 a8 a8 a8 a8 a8 a8     ................
    6d75:	a8 a8 a8 a8 a8 a8 a8 a8 a8 a8 a8 a8 a8 a8 a8 a8     ................
    6d85:	a8 a8 a8 a8 a8 a8 a8 aa a8 a8 a8 a8 a8 a8 a8 a8     ................
    6d95:	a8 a8 a8 a8 a8 a8 a8 a8 a8 a8 a8 a8 a8 a8 a8 a8     ................
    6da5:	a8 a8 a8 a8 a8 a8 a8 a8 a8 a8 a8 a8 a8 a8 a8 a8     ................
    6db5:	a8 a8 a8 a8 a8 a8 a8 a8 a8 a8 a8 a8 ab ac ad a8     ................
    6dc5:	a8 a8 ae af a8 a8 a8 a8 a8 b0 b1 b2 a8 a8 a8 a8     ................
    6dd5:	a8 a8 b3 b4 b3 b4 b3 b5 af a8 a8 a8 b6 b7 b8 a8     ................
    6de5:	a8 b0 b1 b2 a8 a8 a8 a8 a8 a8 a8 a8 a8 b9 ba bb     ................
    6df5:	bc bd be bf c0 c1 c2 a8 a8 c3 a8 a8 c4 c5 c6 c7     ................
    6e05:	a8 a8 a8 a8 a8 c6 c8 c6 c8 c6 c9 ca cb a8 a8 cc     ................
    6e15:	cd ce cf a8 c4 c5 c6 c7 a8 a8 a8 a8 a8 a8 d0 d0     ................
    6e25:	d1 d0 d2 d3 d4 d0 d0 d0 d2 d5 d0 d0 d6 d0 d0 d7     ................
    6e35:	d8 d9 da d0 d0 d0 d0 d0 d9 db dc db dc dd d3 d4     ................
    6e45:	d0 d2 de df e0 e1 d0 d7 d8 d9 da d0 d0 d0 d0 d0     ................
    6e55:	d0                                                  .

00006e56 <map_level_forest>:
    6e56:	33 05 77 77 77 77 77 77 77 77 77 77 77 77 77 77     3.wwwwwwwwwwwwww
    6e66:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    6e76:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    6e86:	77 77 77 77 77 78 78 78 79 78 78 78 7a 7b 78 78     wwwwwxxxyxxxz{xx
    6e96:	78 78 79 78 78 78 78 7c 78 78 78 7d 78 78 78 7e     xxyxxxx|xxx}xxx~
    6ea6:	7f 78 78 78 78 7a 7b 78 78 78 7a 7b 78 7e 7f 78     .xxxxz{xxxz{x~.x
    6eb6:	78 7a 7b 78 78 78 78 78 80 80 81 82 80 80 83 84     xz{xxxxx........
    6ec6:	80 80 80 80 81 82 80 80 80 85 86 80 80 87 88 80     ................
    6ed6:	80 89 87 8a 80 80 80 83 8b 80 80 80 83 8b 80 89     ................
    6ee6:	87 8a 80 83 8b 80 80 80 80 80 80 80 80 8c 8d 8e     ................
    6ef6:	80 8f 90 87 91 80 80 8c 8d 87 80 80 92 93 94 80     ................
    6f06:	95 96 97 80 98 95 99 9a 80 80 8f 90 87 91 80 8f     ................
    6f16:	90 87 9b 95 99 9a 8f 90 87 91 80 80 80 80 9c 9c     ................
    6f26:	9c 9d 9c 9c 9c 9e 9c 9f a0 a1 a0 a2 9c 9c 9c 9c     ................
    6f36:	a3 9c 9c 9c a4 9c 9c 9c 9c a5 9c 9c 9c 9c 9e 9c     ................
    6f46:	9c 9c 9c 9e 9c 9c 9c a5 9c 9c 9e 9c 9c 9c 9c 9c     ................
    6f56:	9c                                                  .

00006f57 <map_level_fire>:
    6f57:	33 05 40 40 40 40 40 40 40 40 40 40 40 40 40 40     3.@@@@@@@@@@@@@@
    6f67:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    6f77:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    6f87:	40 40 40 40 40 41 42 43 41 41 41 44 45 41 41 41     @@@@@ABCAAADEAAA
    6f97:	46 47 41 41 41 41 41 41 48 49 41 41 41 41 41 41     FGAAAAAAHIAAAAAA
    6fa7:	41 41 41 4a 41 41 41 41 4b 41 41 41 41 41 41 41     AAAJAAAAKAAAAAAA
    6fb7:	41 41 41 41 4c 41 41 41 4d 4e 4f 4d 4d 4d 4d 4d     AAAALAAAMNOMMMMM
    6fc7:	4d 4d 4d 50 51 4d 4d 4d 52 53 4d 4d 4d 4d 4d 4d     MMMPQMMMRSMMMMMM
    6fd7:	4d 4d 4d 54 55 56 4d 4d 4d 4d 4d 57 4d 4d 4d 4d     MMMTUVMMMMMWMMMM
    6fe7:	4d 4d 4d 4d 4d 4d 4d 58 59 4d 4d 4d 4d 4d 4d 4d     MMMMMMMXYMMMMMMM
    6ff7:	4d 4d 4d 4d 4d 4d 4d 5a 5b 5c 5d 4d 4d 5e 5f 4d     MMMMMMMZ[\]MM^_M
    7007:	4d 4d 4d 4d 4d 60 61 62 63 64 4d 4d 4d 4d 4d 4d     MMMMM`abcdMMMMMM
    7017:	54 65 66 4d 4d 67 68 69 4d 4d 4d 4d 4d 4d 6a 6a     TefMMghiMMMMMMjj
    7027:	6a 6b 68 6b 68 6b 68 6b 68 6a 6a 6a 6a 6a 6a 6a     jkhkhkhkhjjjjjjj
    7037:	6a 6a 6a 6a 6b 68 6b 68 6c 6d 6d 6d 6d 6e 68 6f     jjjjkhkhlmmmmnho
    7047:	68 70 6a 71 62 63 72 73 74 75 76 6a 6a 6a 6a 6a     hpjqbcrstuvjjjjj
    7057:	6a                                                  j

00007058 <map_level_ice>:
    7058:	33 05 00 01 00 00 00 02 00 00 00 03 00 00 04 00     3...............
    7068:	00 05 00 00 00 00 06 07 00 08 09 09 09 09 09 09     ................
    7078:	09 09 0a 00 00 00 0b 00 00 00 0c 0d 0b 00 00 00     ................
    7088:	00 04 00 00 00 0e 0e 0f 0e 0e 0e 0e 0e 0e 0e 0e     ................
    7098:	0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 10 11 11 11     ................
    70a8:	11 11 11 11 11 12 0e 0e 13 14 0e 0e 0e 0e 0e 0e     ................
    70b8:	0e 0e 0e 0e 0e 0e 0e 0e 15 15 15 15 15 15 15 15     ................
    70c8:	15 16 17 15 15 15 15 15 15 15 15 15 15 15 15 15     ................
    70d8:	15 15 15 15 15 15 15 15 15 15 15 15 18 19 1a 15     ................
    70e8:	15 15 15 15 15 15 15 15 15 15 15 15 1b 1c 15 15     ................
    70f8:	15 15 1d 1e 1f 20 21 22 15 15 15 23 24 15 15 15     ..... !"...#$...
    7108:	15 15 25 26 26 26 27 28 29 2a 19 22 2b 2c 2d 2e     ..%&&&'()*."+,-.
    7118:	2f 30 2c 31 32 33 15 15 15 15 15 15 15 15 26 34     /0,123........&4
    7128:	35 26 26 26 36 37 09 09 09 09 38 26 26 26 39 3a     5&&&67....8&&&9:
    7138:	3b 19 3c 28 26 3d 09 09 09 09 09 09 09 09 38 26     ;.<(&=........8&
    7148:	26 26 26 26 26 26 26 3e 3f 26 26 26 26 26 26 26     &&&&&&&>?&&&&&&&
    7158:	26 00                                               &.

0000715a <__ctors_end>:
    715a:	11 24       	eor	r1, r1
    715c:	1f be       	out	0x3f, r1	; 63
    715e:	cf ef       	ldi	r28, 0xFF	; 255
    7160:	d0 e1       	ldi	r29, 0x10	; 16
    7162:	de bf       	out	0x3e, r29	; 62
    7164:	cd bf       	out	0x3d, r28	; 61

00007166 <__do_copy_data>:
    7166:	15 e0       	ldi	r17, 0x05	; 5
    7168:	a0 e0       	ldi	r26, 0x00	; 0
    716a:	b5 e0       	ldi	r27, 0x05	; 5
    716c:	e4 e8       	ldi	r30, 0x84	; 132
    716e:	fc ed       	ldi	r31, 0xDC	; 220
    7170:	02 c0       	rjmp	.+4      	; 0x7176 <__do_copy_data+0x10>
    7172:	05 90       	lpm	r0, Z+
    7174:	0d 92       	st	X+, r0
    7176:	a0 31       	cpi	r26, 0x10	; 16
    7178:	b1 07       	cpc	r27, r17
    717a:	d9 f7       	brne	.-10     	; 0x7172 <__do_copy_data+0xc>

0000717c <__do_clear_bss>:
    717c:	10 e1       	ldi	r17, 0x10	; 16
    717e:	a0 e1       	ldi	r26, 0x10	; 16
    7180:	b5 e0       	ldi	r27, 0x05	; 5
    7182:	01 c0       	rjmp	.+2      	; 0x7186 <.do_clear_bss_start>

00007184 <.do_clear_bss_loop>:
    7184:	1d 92       	st	X+, r1

00007186 <.do_clear_bss_start>:
    7186:	a1 31       	cpi	r26, 0x11	; 17
    7188:	b1 07       	cpc	r27, r17
    718a:	e1 f7       	brne	.-8      	; 0x7184 <.do_clear_bss_loop>

0000718c <wdt_init>:

void wdt_init(void)
{

#if TRUE_RANDOM_GEN == 1	
	wdt_randomize();
    718c:	0e 94 61 3e 	call	0x7cc2	; 0x7cc2 <wdt_randomize>
#endif

    MCUSR = 0;
    7190:	14 be       	out	0x34, r1	; 52
    wdt_disable();
    7192:	88 e1       	ldi	r24, 0x18	; 24
    7194:	0f b6       	in	r0, 0x3f	; 63
    7196:	f8 94       	cli
    7198:	80 93 60 00 	sts	0x0060, r24
    719c:	10 92 60 00 	sts	0x0060, r1
    71a0:	0f be       	out	0x3f, r0	; 63

000071a2 <Initialize>:


void Initialize(void){
	int i;

	if(!isEepromFormatted()) FormatEeprom();
    71a2:	0e 94 23 3f 	call	0x7e46	; 0x7e46 <isEepromFormatted>
    71a6:	81 11       	cpse	r24, r1
    71a8:	02 c0       	rjmp	.+4      	; 0x71ae <Initialize+0xc>
    71aa:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <FormatEeprom>

	cli();
    71ae:	f8 94       	cli
		mix_bank=0;
	#endif
	
	#if MIXER_CHAN4_TYPE == 0
		//initialize LFSR		
		tr4_barrel_lo=1;
    71b0:	81 e0       	ldi	r24, 0x01	; 1
    71b2:	80 93 e4 0c 	sts	0x0CE4, r24
		tr4_barrel_hi=1;		
    71b6:	80 93 e5 0c 	sts	0x0CE5, r24
		tr4_params=0b00000001; //15 bits no divider (1)
    71ba:	80 93 e3 0c 	sts	0x0CE3, r24
		snesMouseEnabled=false;
	#endif

	//silence all sound channels
	for(i=0;i<CHANNELS;i++){
		mixer.channels.all[i].volume=0;
    71be:	10 92 d0 0c 	sts	0x0CD0, r1
    71c2:	10 92 d6 0c 	sts	0x0CD6, r1
    71c6:	10 92 dc 0c 	sts	0x0CDC, r1
    71ca:	10 92 e2 0c 	sts	0x0CE2, r1
    71ce:	10 92 e8 0c 	sts	0x0CE8, r1
	}
	
	//set sync parameters. starts at odd field, in pre-eq pulses, line 1, vsync flag cleared
	sync_phase=0;
    71d2:	10 92 b6 0c 	sts	0x0CB6, r1
	sync_flags=0;
    71d6:	10 92 b8 0c 	sts	0x0CB8, r1
	sync_pulse=SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES;
    71da:	92 e1       	ldi	r25, 0x12	; 18
    71dc:	90 93 b7 0c 	sts	0x0CB7, r25

	//set rendering parameters
	render_lines_count=FRAME_LINES;
    71e0:	90 ee       	ldi	r25, 0xE0	; 224
    71e2:	90 93 be 0c 	sts	0x0CBE, r25
	first_render_line=FIRST_RENDER_LINE;
    71e6:	94 e1       	ldi	r25, 0x14	; 20
    71e8:	90 93 bd 0c 	sts	0x0CBD, r25

	joypad1_status_hi=0;
    71ec:	10 92 c2 0c 	sts	0x0CC2, r1
    71f0:	10 92 c1 0c 	sts	0x0CC1, r1
	joypad2_status_hi=0;
    71f4:	10 92 c6 0c 	sts	0x0CC6, r1
    71f8:	10 92 c5 0c 	sts	0x0CC5, r1
	sound_enabled=1;
    71fc:	80 93 cf 0c 	sts	0x0CCF, r24

	InitializeVideoMode();
    7200:	0e 94 4d 4c 	call	0x989a	; 0x989a <InitializeVideoMode>
    7204:	84 e8       	ldi	r24, 0x84	; 132
    7206:	90 e0       	ldi	r25, 0x00	; 0
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
		val=pgm_read_word(&io_table[j]);
    7208:	fc 01       	movw	r30, r24
    720a:	25 91       	lpm	r18, Z+
    720c:	34 91       	lpm	r19, Z
		ptr=(u8*)(val&0xff);
    720e:	f9 01       	movw	r30, r18
    7210:	ff 27       	eor	r31, r31
		*ptr=val>>8;	
    7212:	30 83       	st	Z, r19
    7214:	02 96       	adiw	r24, 0x02	; 2
	InitializeVideoMode();
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
    7216:	20 e0       	ldi	r18, 0x00	; 0
    7218:	82 3b       	cpi	r24, 0xB2	; 178
    721a:	92 07       	cpc	r25, r18
    721c:	a9 f7       	brne	.-22     	; 0x7208 <Initialize+0x66>
		val=pgm_read_word(&io_table[j]);
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;	
	}

	sei();
    721e:	78 94       	sei
	
	DisplayLogo();
    7220:	0e 94 dc 4c 	call	0x99b8	; 0x99b8 <DisplayLogo>
    7224:	0e 94 f0 6b 	call	0xd7e0	; 0xd7e0 <main>
    7228:	0c 94 40 6e 	jmp	0xdc80	; 0xdc80 <_exit>

0000722c <__bad_interrupt>:
    722c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00007230 <sub_video_mode3>:
	;***************************************************

	sub_video_mode3:
		;de-activate sync timer interrupts
		;we will need to use the I flag to branch in a critical loop
		ldi ZL,(0<<OCIE1A)
    7230:	e0 e0       	ldi	r30, 0x00	; 0
		sts _SFR_MEM_ADDR(TIMSK1),ZL
    7232:	e0 93 6f 00 	sts	0x006F, r30

		;wait cycles to align with next hsync
		WAIT r26,183+241
    7236:	ad e8       	ldi	r26, 0x8D	; 141
    7238:	aa 95       	dec	r26
    723a:	f1 f7       	brne	.-4      	; 0x7238 <sub_video_mode3+0x8>
    723c:	00 00       	nop

		;Refresh ramtiles indexes in VRAM
		;This has to be done because the main
		;program may have altered the VRAM
		;after vsync and the rendering interrupt.
		lds r16,userRamTilesCount
    723e:	00 91 f3 0c 	lds	r16, 0x0CF3

		ldi ZL,lo8(ram_tiles_restore);
    7242:	e0 e5       	ldi	r30, 0x50	; 80
		ldi ZH,hi8(ram_tiles_restore);
    7244:	fc e0       	ldi	r31, 0x0C	; 12
		ldi r18,3
    7246:	23 e0       	ldi	r18, 0x03	; 3
		mul r16,r18
    7248:	02 9f       	mul	r16, r18
		add ZL,r0
    724a:	e0 0d       	add	r30, r0
		adc ZH,r1
    724c:	f1 1d       	adc	r31, r1

		ldi YL,lo8(vram)
    724e:	c0 e0       	ldi	r28, 0x00	; 0
		ldi YH,hi8(vram)
    7250:	d1 e0       	ldi	r29, 0x01	; 1

		lds r18,free_tile_index
    7252:	20 91 7e 0d 	lds	r18, 0x0D7E
		ldi r19,MAX_RAMTILES		;maximum possible ramtiles
    7256:	3c e3       	ldi	r19, 0x3C	; 60
		sub r19,r18					;sub free tile
    7258:	32 1b       	sub	r19, r18
		add r19,r16					;add user tiles
    725a:	30 0f       	add	r19, r16

		cp r18,r16
    725c:	20 17       	cp	r18, r16
		breq no_ramtiles
    725e:	51 f0       	breq	.+20     	; 0x7274 <no_ramtiles>
		nop
    7260:	00 00       	nop
	...

00007264 <upd_loop>:
		nop
upd_loop:
		ld XL,Z+	;load vram offset of ramtile
    7264:	a1 91       	ld	r26, Z+
		ld XH,Z+
    7266:	b1 91       	ld	r27, Z+

		ld r17,X	;get latest VRAM tile that may have been modified my
    7268:	1c 91       	ld	r17, X
		st Z+,r17	;the main program and store it in the restore buffer
    726a:	11 93       	st	Z+, r17
		st X,r16	;write the ramtile index back to vram
    726c:	0c 93       	st	X, r16

		inc r16
    726e:	03 95       	inc	r16
		cp r16,r18
    7270:	02 17       	cp	r16, r18
		brlo upd_loop ;loop is 14 cycles
    7272:	c0 f3       	brcs	.-16     	; 0x7264 <upd_loop>

00007274 <no_ramtiles>:

no_ramtiles:
		;wait for remaining maximum possible ramtiles
1:
		ldi r17,3
    7274:	13 e0       	ldi	r17, 0x03	; 3
		dec r17
    7276:	1a 95       	dec	r17
		brne .-4
    7278:	f1 f7       	brne	.-4      	; 0x7276 <no_ramtiles+0x2>
		rjmp .
    727a:	00 c0       	rjmp	.+0      	; 0x727c <no_ramtiles+0x8>
		dec r19
    727c:	3a 95       	dec	r19
		brne 1b
    727e:	d1 f7       	brne	.-12     	; 0x7274 <no_ramtiles>

		;**********************
		; setup scroll stuff
		;**********************
	
		ldi YL,lo8(vram)
    7280:	c0 e0       	ldi	r28, 0x00	; 0
		ldi YH,hi8(vram)
    7282:	d1 e0       	ldi	r29, 0x01	; 1

		//add X scroll (coarse)
		lds r18,screen_scrollX ;ScreenScrollX
    7284:	20 91 b2 0c 	lds	r18, 0x0CB2
		mov r25,r18
    7288:	92 2f       	mov	r25, r18
		andi r18,0xf8	;(x>>3) * 8 interleave
    728a:	28 7f       	andi	r18, 0xF8	; 248
		add YL,r18
    728c:	c2 0f       	add	r28, r18

		;save Y wrap adress 
		movw r12,YL
    728e:	6e 01       	movw	r12, r28
	

		//add Y scroll (coarse)
		lds r16,screen_scrollY ;ScreenScrollY
    7290:	00 91 b3 0c 	lds	r16, 0x0CB3
		mov r22,r16
    7294:	60 2f       	mov	r22, r16
		lsr r16
    7296:	06 95       	lsr	r16
		lsr r16
    7298:	06 95       	lsr	r16
		lsr r16 ;/8
    729a:	06 95       	lsr	r16

        lds r17,screen_scrollHeight
    729c:	10 91 b4 0c 	lds	r17, 0x0CB4
        sub r17,r16
    72a0:	10 1b       	sub	r17, r16
        mov r15,r17 ;Y tiles to draw before wrapping
    72a2:	f1 2e       	mov	r15, r17

        mov r17,r16
    72a4:	10 2f       	mov	r17, r16
        lsr r16
    72a6:	06 95       	lsr	r16
        lsr r16
    72a8:	06 95       	lsr	r16
        lsr r16 ;/8
    72aa:	06 95       	lsr	r16
		add YH,r16      ; (bits 6-7)
    72ac:	d0 0f       	add	r29, r16
		andi r17,0x7
    72ae:	17 70       	andi	r17, 0x07	; 7
        add YL,r17      ;interleave (bits 3-5)
    72b0:	c1 0f       	add	r28, r17
        andi r22,0x7    ;fine Y scrolling (bits 0-2)
    72b2:	67 70       	andi	r22, 0x07	; 7
		;lds r20,tile_table_lo
		;lds r21,tile_table_hi
		;out _SFR_IO_ADDR(GPIOR1),r20 ;store for later
		;out _SFR_IO_ADDR(GPIOR2),r21

		lds r20,overlay_tile_table
    72b4:	40 91 b0 0c 	lds	r20, 0x0CB0
		lds r21,overlay_tile_table+1
    72b8:	50 91 b1 0c 	lds	r21, 0x0CB1
		lds r6,tile_table_lo
    72bc:	60 90 ac 0c 	lds	r6, 0x0CAC
		lds r7,tile_table_hi
    72c0:	70 90 ad 0c 	lds	r7, 0x0CAD
		out _SFR_IO_ADDR(GPIOR1),r6 ;store for later
    72c4:	6a bc       	out	0x2a, r6	; 42
		out _SFR_IO_ADDR(GPIOR2),r7
    72c6:	7b bc       	out	0x2b, r7	; 43


		;save main section value	
		movw r10,YL
    72c8:	5e 01       	movw	r10, r28
		mov r23,r22
    72ca:	76 2f       	mov	r23, r22
		mov r24,r15
    72cc:	8f 2d       	mov	r24, r15
		mov r9,r25
    72ce:	99 2e       	mov	r9, r25

		;load values for overlay if it's activated (overlay_height>0)
		
		;compute beginning of overlay in vram 
		lds r16,screen_scrollHeight
    72d0:	00 91 b4 0c 	lds	r16, 0x0CB4
		mov r18,r16
    72d4:	20 2f       	mov	r18, r16
		lsr r16
    72d6:	06 95       	lsr	r16
		lsr r16
    72d8:	06 95       	lsr	r16
		lsr r16			;hi8
    72da:	06 95       	lsr	r16
		inc r16			;add 0x100 ram offset
    72dc:	03 95       	inc	r16
		andi r18,7		;lo8
    72de:	27 70       	andi	r18, 0x07	; 7
		
		lds r19,overlay_height	
    72e0:	30 91 af 0c 	lds	r19, 0x0CAF
		cpi r19,0
    72e4:	30 30       	cpi	r19, 0x00	; 0
		in r0, _SFR_IO_ADDR(SREG)
    72e6:	0f b6       	in	r0, 0x3f	; 63

		sbrs r0,SREG_Z
    72e8:	01 fe       	sbrs	r0, 1
		clr r22
    72ea:	66 27       	eor	r22, r22
		sbrs r0,SREG_Z
    72ec:	01 fe       	sbrs	r0, 1
		mov YL,r18		;lo8(overlay_vram)
    72ee:	c2 2f       	mov	r28, r18
		sbrs r0,SREG_Z
    72f0:	01 fe       	sbrs	r0, 1
		mov YH,r16		;hi8(overlay_vram)
    72f2:	d0 2f       	mov	r29, r16
		sbrs r0,SREG_Z
    72f4:	01 fe       	sbrs	r0, 1
		ser r24
    72f6:	8f ef       	ldi	r24, 0xFF	; 255
		sbrs r0,SREG_Z
    72f8:	01 fe       	sbrs	r0, 1
		clr r9
    72fa:	99 24       	eor	r9, r9

		sbrs r0,SREG_Z
    72fc:	01 fe       	sbrs	r0, 1
		out _SFR_IO_ADDR(GPIOR1),r20
    72fe:	4a bd       	out	0x2a, r20	; 42
		sbrs r0,SREG_Z
    7300:	01 fe       	sbrs	r0, 1
		out _SFR_IO_ADDR(GPIOR2),r21
    7302:	5b bd       	out	0x2b, r21	; 43


		//ldi r16,SCREEN_TILES_V*TILE_HEIGHT; total scanlines to draw
		//mov r8,r16
		lds r8,render_lines_count ;total scanlines to draw
    7304:	80 90 be 0c 	lds	r8, 0x0CBE

00007308 <next_tile_line>:
	;r23 = Main section tile row
	;r24 = Current Y tiles to draw before wrapping
	;r25 = Main section scrollX

	next_tile_line:
		rcall hsync_pulse
    7308:	bc d3       	rcall	.+1912   	; 0x7a82 <hsync_pulse>

		WAIT r18,HSYNC_USABLE_CYCLES - AUDIO_OUT_HSYNC_CYCLES
    730a:	24 e0       	ldi	r18, 0x04	; 4
    730c:	2a 95       	dec	r18
    730e:	f1 f7       	brne	.-4      	; 0x730c <next_tile_line+0x4>
    7310:	00 00       	nop
				
		call render_tile_line
    7312:	0e 94 ca 39 	call	0x7394	; 0x7394 <render_tile_line>

		WAIT r18,58
    7316:	23 e1       	ldi	r18, 0x13	; 19
    7318:	2a 95       	dec	r18
    731a:	f1 f7       	brne	.-4      	; 0x7318 <next_tile_line+0x10>
    731c:	00 00       	nop

		inc r22
    731e:	63 95       	inc	r22
		dec r8
    7320:	8a 94       	dec	r8
		breq text_frame_end
    7322:	09 f1       	breq	.+66     	; 0x7366 <text_frame_end>

		cpi r22,TILE_HEIGHT ;last char line? 1
    7324:	68 30       	cpi	r22, 0x08	; 8
		breq next_tile_row
    7326:	29 f0       	breq	.+10     	; 0x7332 <next_tile_row>

		;wait to align with next_tile_row instructions (+1 cycle for the breq)
		WAIT r16,25
    7328:	08 e0       	ldi	r16, 0x08	; 8
    732a:	0a 95       	dec	r16
    732c:	f1 f7       	brne	.-4      	; 0x732a <next_tile_line+0x22>
    732e:	00 00       	nop
		rjmp next_tile_line
    7330:	eb cf       	rjmp	.-42     	; 0x7308 <next_tile_line>

00007332 <next_tile_row>:

	next_tile_row:

		clr r22		;clear current char line
    7332:	66 27       	eor	r22, r22

		;increment vram pointer next row
		mov r16,YL
    7334:	0c 2f       	mov	r16, r28
		andi r16,0x7
    7336:	07 70       	andi	r16, 0x07	; 7
		cpi r16,7
    7338:	07 30       	cpi	r16, 0x07	; 7
		breq 1f
    733a:	11 f0       	breq	.+4      	; 0x7340 <next_tile_row+0xe>
		inc YL
    733c:	c3 95       	inc	r28
		rjmp 2f
    733e:	02 c0       	rjmp	.+4      	; 0x7344 <next_tile_row+0x12>
	1:
		andi YL,0xf8
    7340:	c8 7f       	andi	r28, 0xF8	; 248
		inc YH
    7342:	d3 95       	inc	r29
	2:

		dec r24		;wrap section?
    7344:	8a 95       	dec	r24
		brne .+2
    7346:	09 f4       	brne	.+2      	; 0x734a <next_tile_row+0x18>
		movw YL,r12
    7348:	e6 01       	movw	r28, r12

		dec r19
    734a:	3a 95       	dec	r19
		brne .+2
    734c:	09 f4       	brne	.+2      	; 0x7350 <next_tile_row+0x1e>
		mov r22,r23	;section tile row
    734e:	67 2f       	mov	r22, r23
		brne .+2
    7350:	09 f4       	brne	.+2      	; 0x7354 <next_tile_row+0x22>
		movw YL,r10 ;vram adress
    7352:	e5 01       	movw	r28, r10
		brne .+2
    7354:	09 f4       	brne	.+2      	; 0x7358 <next_tile_row+0x26>
		mov r24,r15 ;Y wrapping
    7356:	8f 2d       	mov	r24, r15
		brne .+2
    7358:	09 f4       	brne	.+2      	; 0x735c <next_tile_row+0x2a>
		mov r9,r25  ;scrollX
    735a:	99 2e       	mov	r9, r25

		brne .+2
    735c:	09 f4       	brne	.+2      	; 0x7360 <next_tile_row+0x2e>
		out _SFR_IO_ADDR(GPIOR1),r6  ;tileset
    735e:	6a bc       	out	0x2a, r6	; 42
		brne .+2
    7360:	09 f4       	brne	.+2      	; 0x7364 <next_tile_row+0x32>
		out _SFR_IO_ADDR(GPIOR2),r7  ;tilset
    7362:	7b bc       	out	0x2b, r7	; 43

		rjmp next_tile_line
    7364:	d1 cf       	rjmp	.-94     	; 0x7308 <next_tile_line>

00007366 <text_frame_end>:

	text_frame_end:

		WAIT r18,28
    7366:	29 e0       	ldi	r18, 0x09	; 9
    7368:	2a 95       	dec	r18
    736a:	f1 f7       	brne	.-4      	; 0x7368 <text_frame_end+0x2>
    736c:	00 00       	nop

		rcall hsync_pulse ;145
    736e:	89 d3       	rcall	.+1810   	; 0x7a82 <hsync_pulse>
	
		clr r1
    7370:	11 24       	eor	r1, r1
		call RestoreBackground
    7372:	0e 94 00 4b 	call	0x9600	; 0x9600 <RestoreBackground>

		;set vsync flag & flip field
		lds ZL,sync_flags
    7376:	e0 91 b8 0c 	lds	r30, 0x0CB8
		ldi r20,SYNC_FLAG_FIELD
    737a:	42 e0       	ldi	r20, 0x02	; 2
		ori ZL,SYNC_FLAG_VSYNC
    737c:	e1 60       	ori	r30, 0x01	; 1
		eor ZL,r20
    737e:	e4 27       	eor	r30, r20
		sts sync_flags,ZL
    7380:	e0 93 b8 0c 	sts	0x0CB8, r30
	
		cli 
    7384:	f8 94       	cli

		;re-activate sync timer interrupts
		ldi ZL,(1<<OCIE1A)
    7386:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIMSK1),ZL
    7388:	e0 93 6f 00 	sts	0x006F, r30
			
		;clear any pending timer int
		ldi ZL,(1<<OCF1A)
    738c:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIFR1),ZL
    738e:	e0 93 36 00 	sts	0x0036, r30

		ret
    7392:	08 95       	ret

00007394 <render_tile_line>:
	; Can destroy: r0,r1,r2,r3,r4,r5,r6,r7,r13,r16,r17,r18,r19,r20,r21,Z
	; 
	; cycles  = 1495
	;*************************************************
	render_tile_line:
		push YL
    7394:	cf 93       	push	r28
		push YH
    7396:	df 93       	push	r29
		push r23
    7398:	7f 93       	push	r23
		push r22
    739a:	6f 93       	push	r22
		push r19
    739c:	3f 93       	push	r19
		push r13
    739e:	df 92       	push	r13
		push r12
    73a0:	cf 92       	push	r12
		push r9
    73a2:	9f 92       	push	r9
		push r7
    73a4:	7f 92       	push	r7
		push r6
    73a6:	6f 92       	push	r6
		;--------------------------
		; Rendering 
		;---------------------------

		;get tile row offset
		ldi r23,TILE_WIDTH ;tile width in pixels
    73a8:	78 e0       	ldi	r23, 0x08	; 8
		mul r22,r23
    73aa:	67 9f       	mul	r22, r23

		;compute base adresses for ROM and RAM tiles
		in r16,_SFR_IO_ADDR(GPIOR1) ;tile_table_lo
    73ac:	0a b5       	in	r16, 0x2a	; 42
		in r17,_SFR_IO_ADDR(GPIOR2) ;tile_table_hi
    73ae:	1b b5       	in	r17, 0x2b	; 43
		subi r16,lo8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    73b0:	00 50       	subi	r16, 0x00	; 0
		sbci r17,hi8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    73b2:	17 40       	sbci	r17, 0x07	; 7

		add r16,r0
    73b4:	00 0d       	add	r16, r0
		adc r17,r1
    73b6:	11 1d       	adc	r17, r1
		movw r2,r16			;rom tiles adress
    73b8:	18 01       	movw	r2, r16

		ldi r16,lo8(ram_tiles)
    73ba:	00 e5       	ldi	r16, 0x50	; 80
		ldi r17,hi8(ram_tiles)
    73bc:	15 e0       	ldi	r17, 0x05	; 5
		add r16,r0
    73be:	00 0d       	add	r16, r0
		adc r17,r1
    73c0:	11 1d       	adc	r17, r1
		movw r4,r16			;ram tiles adress
    73c2:	28 01       	movw	r4, r16

		ldi r19,TILE_HEIGHT*TILE_WIDTH
    73c4:	30 e4       	ldi	r19, 0x40	; 64
		ldi r17,SCREEN_TILES_H-1	;main loop counter
    73c6:	1b e1       	ldi	r17, 0x1B	; 27


		;handle fine scroll offset
		;lds r22,screenSections+scrollX
		mov r22,r9
    73c8:	69 2d       	mov	r22, r9
		andi r22,0x7		
    73ca:	67 70       	andi	r22, 0x07	; 7
		mov r14,r22	;pixels to draw on last tile	
    73cc:	e6 2e       	mov	r14, r22
		cli			;no trailing pixel to draw (hack, see end: )
    73ce:	f8 94       	cli
		breq .+2
    73d0:	09 f0       	breq	.+2      	; 0x73d4 <render_tile_line+0x40>
		sei			;some trailing pixel to draw (hack, see end: )
    73d2:	78 94       	sei

		;get first pixel of last tile in ROM (for ROM tiles fine scroll)
		;and adress of next pixel
		movw ZL,YL
    73d4:	fe 01       	movw	r30, r28
		subi ZL,-(SCREEN_TILES_H*8)
    73d6:	e0 52       	subi	r30, 0x20	; 32
		ld r18,Z
    73d8:	20 81       	ld	r18, Z
		mul r18,r19 	;tile*width*height
    73da:	23 9f       	mul	r18, r19
	    add r0,r2    ;add ROM title table address +row offset
    73dc:	02 0c       	add	r0, r2
	    adc r1,r3
    73de:	13 1c       	adc	r1, r3
		movw ZL,r0
    73e0:	f0 01       	movw	r30, r0
		lpm r9,Z+	;hold first pixel until end 
    73e2:	95 90       	lpm	r9, Z+
		movw r12,ZL ;hold second pixel adress until end
    73e4:	6f 01       	movw	r12, r30


		;compute first tile adress
	    ld r18,Y     	;load next tile # from VRAM
    73e6:	28 81       	ld	r18, Y
		subi YL,-8
    73e8:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT
    73ea:	2c 31       	cpi	r18, 0x1C	; 28
		in r16,_SFR_IO_ADDR(SREG)	;save the carry flag for later	
    73ec:	0f b7       	in	r16, 0x3f	; 63
		mul r18,r19 	;tile*width*height
    73ee:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles	
    73f0:	a1 01       	movw	r20, r2
		sbrc r16,SREG_C
    73f2:	00 fd       	sbrc	r16, 0
		movw r20,r4		;ram tiles
    73f4:	a2 01       	movw	r20, r4
	    add r0,r20    ;add title table address +row offset
    73f6:	04 0e       	add	r0, r20
	    adc r1,r21
    73f8:	15 1e       	adc	r1, r21
		movw XL,r0
    73fa:	d0 01       	movw	r26, r0


		;compute second tile adress
	    ld r18,Y     	;load next tile # from VRAM
    73fc:	28 81       	ld	r18, Y
		subi YL,-8
    73fe:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT
    7400:	2c 31       	cpi	r18, 0x1C	; 28
		in r7,_SFR_IO_ADDR(SREG)	;save the carry flag for later
    7402:	7f b6       	in	r7, 0x3f	; 63
		bst r7,SREG_C
    7404:	70 fa       	bst	r7, 0
		mul r18,r19 	;tile*width*height
    7406:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles
    7408:	a1 01       	movw	r20, r2
		brtc .+2
    740a:	0e f4       	brtc	.+2      	; 0x740e <render_tile_line+0x7a>
		movw r20,r4		;ram tiles
    740c:	a2 01       	movw	r20, r4
	    add r0,r20      ;add title table address +row offset
    740e:	04 0e       	add	r0, r20
	    adc r1,r21
    7410:	15 1e       	adc	r1, r21
		movw ZL,r0
    7412:	f0 01       	movw	r30, r0
		movw r6,ZL		;push Z
    7414:	3f 01       	movw	r6, r30

00007416 <do_fine_scroll>:


	do_fine_scroll:
		;output 1st tile with fine scroll offset 
		clr r0
    7416:	00 24       	eor	r0, r0
		add XL,r22	;add fine offset
    7418:	a6 0f       	add	r26, r22
		adc XH,r0
    741a:	b0 1d       	adc	r27, r0

		;compute jump offset
		ldi r23,3
    741c:	73 e0       	ldi	r23, 0x03	; 3
		mul r22,r23 ;3 instructions
    741e:	67 9f       	mul	r22, r23
	
		sbrs r16,SREG_C
    7420:	00 ff       	sbrs	r16, 0
		rjmp rom_fine_scroll
    7422:	22 c0       	rjmp	.+68     	; 0x7468 <rom_fine_scroll>

00007424 <ram_fine_scroll>:

	/***FINE SCROLL RAM LOOP***/
	ram_fine_scroll:
		rjmp .
    7424:	00 c0       	rjmp	.+0      	; 0x7426 <ram_fine_scroll+0x2>
		ldi r22,lo8(pm(ram_fine_scroll_loop))
    7426:	6a e1       	ldi	r22, 0x1A	; 26
		ldi r23,hi8(pm(ram_fine_scroll_loop))
    7428:	7a e3       	ldi	r23, 0x3A	; 58
		add r22,r0
    742a:	60 0d       	add	r22, r0
		adc r23,r1
    742c:	71 1d       	adc	r23, r1
		push r22
    742e:	6f 93       	push	r22
		push r23	
    7430:	7f 93       	push	r23
		ret ;jump into ram_fine_scroll_loop
    7432:	08 95       	ret

00007434 <ram_fine_scroll_loop>:
	ram_fine_scroll_loop:
		.rept 8
			ld r16,X+
			lpm
			out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		.endr
    7434:	0d 91       	ld	r16, X+
    7436:	c8 95       	lpm
    7438:	08 b9       	out	0x08, r16	; 8
    743a:	0d 91       	ld	r16, X+
    743c:	c8 95       	lpm
    743e:	08 b9       	out	0x08, r16	; 8
    7440:	0d 91       	ld	r16, X+
    7442:	c8 95       	lpm
    7444:	08 b9       	out	0x08, r16	; 8
    7446:	0d 91       	ld	r16, X+
    7448:	c8 95       	lpm
    744a:	08 b9       	out	0x08, r16	; 8
    744c:	0d 91       	ld	r16, X+
    744e:	c8 95       	lpm
    7450:	08 b9       	out	0x08, r16	; 8
    7452:	0d 91       	ld	r16, X+
    7454:	c8 95       	lpm
    7456:	08 b9       	out	0x08, r16	; 8
    7458:	0d 91       	ld	r16, X+
    745a:	c8 95       	lpm
    745c:	08 b9       	out	0x08, r16	; 8
    745e:	0d 91       	ld	r16, X+
    7460:	c8 95       	lpm
    7462:	08 b9       	out	0x08, r16	; 8

		;branch to tile #2
		brtc romloop
    7464:	1e f5       	brtc	.+70     	; 0x74ac <romloop>
		rjmp ramloop
    7466:	40 c0       	rjmp	.+128    	; 0x74e8 <ramloop>

00007468 <rom_fine_scroll>:

	/***FINE SCROLL ROM LOOP***/
	rom_fine_scroll:
		movw ZL,XL
    7468:	fd 01       	movw	r30, r26
		ldi r22,lo8(pm(rom_fine_scroll_loop))	
    746a:	6c e3       	ldi	r22, 0x3C	; 60
		ldi r23,hi8(pm(rom_fine_scroll_loop))
    746c:	7a e3       	ldi	r23, 0x3A	; 58
		add r22,r0
    746e:	60 0d       	add	r22, r0
		adc r23,r1
    7470:	71 1d       	adc	r23, r1
		push r22
    7472:	6f 93       	push	r22
		push r23	
    7474:	7f 93       	push	r23
		ret
    7476:	08 95       	ret

00007478 <rom_fine_scroll_loop>:
	rom_fine_scroll_loop:
		.rept 8
			lpm r16,Z+
			rjmp .
			out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		.endr 
    7478:	05 91       	lpm	r16, Z+
    747a:	00 c0       	rjmp	.+0      	; 0x747c <rom_fine_scroll_loop+0x4>
    747c:	08 b9       	out	0x08, r16	; 8
    747e:	05 91       	lpm	r16, Z+
    7480:	00 c0       	rjmp	.+0      	; 0x7482 <rom_fine_scroll_loop+0xa>
    7482:	08 b9       	out	0x08, r16	; 8
    7484:	05 91       	lpm	r16, Z+
    7486:	00 c0       	rjmp	.+0      	; 0x7488 <rom_fine_scroll_loop+0x10>
    7488:	08 b9       	out	0x08, r16	; 8
    748a:	05 91       	lpm	r16, Z+
    748c:	00 c0       	rjmp	.+0      	; 0x748e <rom_fine_scroll_loop+0x16>
    748e:	08 b9       	out	0x08, r16	; 8
    7490:	05 91       	lpm	r16, Z+
    7492:	00 c0       	rjmp	.+0      	; 0x7494 <rom_fine_scroll_loop+0x1c>
    7494:	08 b9       	out	0x08, r16	; 8
    7496:	05 91       	lpm	r16, Z+
    7498:	00 c0       	rjmp	.+0      	; 0x749a <rom_fine_scroll_loop+0x22>
    749a:	08 b9       	out	0x08, r16	; 8
    749c:	05 91       	lpm	r16, Z+
    749e:	00 c0       	rjmp	.+0      	; 0x74a0 <rom_fine_scroll_loop+0x28>
    74a0:	08 b9       	out	0x08, r16	; 8
    74a2:	05 91       	lpm	r16, Z+
    74a4:	00 c0       	rjmp	.+0      	; 0x74a6 <rom_fine_scroll_loop+0x2e>
    74a6:	08 b9       	out	0x08, r16	; 8
	
		movw ZL,r6		;restore Z for tile #2
    74a8:	f3 01       	movw	r30, r6

		;branch to tile #2
		brts ramloop
    74aa:	f6 f0       	brts	.+60     	; 0x74e8 <ramloop>

000074ac <romloop>:

	
	romloop:
	    lpm r16,Z+
    74ac:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    74ae:	08 b9       	out	0x08, r16	; 8
	    ld r18,Y     ;load next tile # from VRAM
    74b0:	28 81       	ld	r18, Y

	    lpm r16,Z+
    74b2:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 2
    74b4:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    74b6:	23 9f       	mul	r18, r19

	    lpm r16,Z+
    74b8:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 3
    74ba:	08 b9       	out	0x08, r16	; 8
		subi YL,-8
    74bc:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT		;is tile in RAM or ROM? (RAM tiles have indexes<RAM_TILES_COUNT)
    74be:	2c 31       	cpi	r18, 0x1C	; 28
		
	    lpm r16,Z+
    74c0:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    74c2:	08 b9       	out	0x08, r16	; 8
		brsh .+2		;skip if next tile is in ROM	
    74c4:	08 f4       	brcc	.+2      	; 0x74c8 <romloop+0x1c>
		movw r20,r4 	;load RAM title table address +row offset	
    74c6:	a2 01       	movw	r20, r4
   
	    lpm r16,Z+
    74c8:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 5
    74ca:	08 b9       	out	0x08, r16	; 8
		add r0,r20		;add tile table address +row offset lsb
    74cc:	04 0e       	add	r0, r20
	    adc r1,r21		;add title table address +row offset msb
    74ce:	15 1e       	adc	r1, r21

	    lpm r16,Z+
    74d0:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 6
    74d2:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT	
    74d4:	2c 31       	cpi	r18, 0x1C	; 28
		dec r17			;decrement tiles to draw on line (does not affect carry)
    74d6:	1a 95       	dec	r17
   
	    lpm r16,Z+
    74d8:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 7   
    74da:	08 b9       	out	0x08, r16	; 8
	    lpm r16,Z+
    74dc:	05 91       	lpm	r16, Z+

		breq end	
    74de:	39 f1       	breq	.+78     	; 0x752e <end>
	    movw ZL,r0   	;copy next tile adress
    74e0:	f0 01       	movw	r30, r0

	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    74e2:	08 b9       	out	0x08, r16	; 8
	    brcc romloop
    74e4:	18 f7       	brcc	.-58     	; 0x74ac <romloop>
	
		rjmp .
    74e6:	00 c0       	rjmp	.+0      	; 0x74e8 <ramloop>

000074e8 <ramloop>:

	ramloop:

	    ld r16,Z+
    74e8:	01 91       	ld	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    74ea:	08 b9       	out	0x08, r16	; 8
	    ld r18,Y     ;load next tile # from VRAM
    74ec:	28 81       	ld	r18, Y

	    ld r16,Z+ 
    74ee:	01 91       	ld	r16, Z+
		subi YL,-8   		
    74f0:	c8 5f       	subi	r28, 0xF8	; 248
		out _SFR_IO_ADDR(DATA_PORT),r16 		;pixel 2
    74f2:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    74f4:	23 9f       	mul	r18, r19

	    ld r16,Z+
    74f6:	01 91       	ld	r16, Z+
		nop
    74f8:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16         ;pixel 3
    74fa:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    74fc:	2c 31       	cpi	r18, 0x1C	; 28
		rjmp .
    74fe:	00 c0       	rjmp	.+0      	; 0x7500 <ramloop+0x18>
   
	    ld r16,Z+
    7500:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    7502:	08 b9       	out	0x08, r16	; 8
		brcs .+2 
    7504:	08 f0       	brcs	.+2      	; 0x7508 <ramloop+0x20>
		movw r20,r2 	;ROM title table address +row offset	
    7506:	a1 01       	movw	r20, r2
   
   
	    ld r16,Z+
    7508:	01 91       	ld	r16, Z+
	    add r0,r20    ;add title table address +row offset
    750a:	04 0e       	add	r0, r20
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 5
    750c:	08 b9       	out	0x08, r16	; 8
	    adc r1,r21
    750e:	15 1e       	adc	r1, r21
		rjmp .
    7510:	00 c0       	rjmp	.+0      	; 0x7512 <ramloop+0x2a>
    
		ld r16,Z+		
    7512:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 6
    7514:	08 b9       	out	0x08, r16	; 8
		ld r7,Z+
    7516:	71 90       	ld	r7, Z+
	    ld r16,Z+	
    7518:	01 91       	ld	r16, Z+
	
		movw ZL,r0
    751a:	f0 01       	movw	r30, r0
		out _SFR_IO_ADDR(DATA_PORT),r7      ;pixel 7   
    751c:	78 b8       	out	0x08, r7	; 8
		nop
    751e:	00 00       	nop
		cpi r18,RAM_TILES_COUNT	
    7520:	2c 31       	cpi	r18, 0x1C	; 28
	    dec r17
    7522:	1a 95       	dec	r17
	    breq end
    7524:	21 f0       	breq	.+8      	; 0x752e <end>
	
		nop
    7526:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    7528:	08 b9       	out	0x08, r16	; 8
	
	    brcc romloop
    752a:	00 f6       	brcc	.-128    	; 0x74ac <romloop>
		rjmp ramloop
    752c:	dd cf       	rjmp	.-70     	; 0x74e8 <ramloop>

0000752e <end>:
	
	end:
		out _SFR_IO_ADDR(DATA_PORT),r16  	;pixel 8
    752e:	08 b9       	out	0x08, r16	; 8
		brid end_fine_scroll				;hack: interrupt flag=0 => no fine offset pixel to draw
    7530:	27 f5       	brid	.+72     	; 0x757a <end_fine_scroll>
		brcc end_rom_fine_scroll_loop
    7532:	30 f4       	brcc	.+12     	; 0x7540 <end_rom_fine_scroll_loop>

	/***END RAM LOOP***/
		movw ZL,r0
    7534:	f0 01       	movw	r30, r0

00007536 <end_ram_fine_scroll_loop>:
	end_ram_fine_scroll_loop:
		ld r16,Z+
    7536:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
    7538:	08 b9       	out	0x08, r16	; 8
		dec r14
    753a:	ea 94       	dec	r14
		brne end_ram_fine_scroll_loop
    753c:	e1 f7       	brne	.-8      	; 0x7536 <end_ram_fine_scroll_loop>
		rjmp end_fine_scroll_ram
    753e:	1f c0       	rjmp	.+62     	; 0x757e <end_fine_scroll_ram>

00007540 <end_rom_fine_scroll_loop>:

	/***END ROM LOOP***/
	end_rom_fine_scroll_loop:
		movw ZL,r12
    7540:	f6 01       	movw	r30, r12
		nop
    7542:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r9        ;output saved 1st pixel
    7544:	98 b8       	out	0x08, r9	; 8
		dec r14
    7546:	ea 94       	dec	r14
		breq end_fine_scroll_rom
    7548:	c9 f0       	breq	.+50     	; 0x757c <end_fine_scroll_rom>
	.rept 6
		lpm r16,Z+		
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		dec r14
		breq end_fine_scroll_rom
	.endr
    754a:	05 91       	lpm	r16, Z+
    754c:	08 b9       	out	0x08, r16	; 8
    754e:	ea 94       	dec	r14
    7550:	a9 f0       	breq	.+42     	; 0x757c <end_fine_scroll_rom>
    7552:	05 91       	lpm	r16, Z+
    7554:	08 b9       	out	0x08, r16	; 8
    7556:	ea 94       	dec	r14
    7558:	89 f0       	breq	.+34     	; 0x757c <end_fine_scroll_rom>
    755a:	05 91       	lpm	r16, Z+
    755c:	08 b9       	out	0x08, r16	; 8
    755e:	ea 94       	dec	r14
    7560:	69 f0       	breq	.+26     	; 0x757c <end_fine_scroll_rom>
    7562:	05 91       	lpm	r16, Z+
    7564:	08 b9       	out	0x08, r16	; 8
    7566:	ea 94       	dec	r14
    7568:	49 f0       	breq	.+18     	; 0x757c <end_fine_scroll_rom>
    756a:	05 91       	lpm	r16, Z+
    756c:	08 b9       	out	0x08, r16	; 8
    756e:	ea 94       	dec	r14
    7570:	29 f0       	breq	.+10     	; 0x757c <end_fine_scroll_rom>
    7572:	05 91       	lpm	r16, Z+
    7574:	08 b9       	out	0x08, r16	; 8
    7576:	ea 94       	dec	r14
    7578:	09 f0       	breq	.+2      	; 0x757c <end_fine_scroll_rom>

0000757a <end_fine_scroll>:
	...

0000757c <end_fine_scroll_rom>:
	...

0000757e <end_fine_scroll_ram>:
	end_fine_scroll:	
		nop
	end_fine_scroll_rom:
		nop
	end_fine_scroll_ram:
		clr r16	
    757e:	00 27       	eor	r16, r16
		out _SFR_IO_ADDR(DATA_PORT),r16   
    7580:	08 b9       	out	0x08, r16	; 8

		pop r6
    7582:	6f 90       	pop	r6
		pop r7
    7584:	7f 90       	pop	r7
		pop r9
    7586:	9f 90       	pop	r9
		pop r12
    7588:	cf 90       	pop	r12
		pop r13
    758a:	df 90       	pop	r13
		pop r19
    758c:	3f 91       	pop	r19
		pop r22
    758e:	6f 91       	pop	r22
		pop r23
    7590:	7f 91       	pop	r23
		pop YH
    7592:	df 91       	pop	r29
		pop YL
    7594:	cf 91       	pop	r28

		ret
    7596:	08 95       	ret

00007598 <CopyFlashTile>:
; C-callable
; r24=Source ROM tile index
; r22=Dest RAM tile index
;************************************
CopyFlashTile:
	ldi r18,TILE_HEIGHT*TILE_WIDTH
    7598:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	lds ZL,tile_table_lo
    759a:	e0 91 ac 0c 	lds	r30, 0x0CAC
	lds ZH,tile_table_hi
    759e:	f0 91 ad 0c 	lds	r31, 0x0CAD
	mul r24,r18
    75a2:	82 9f       	mul	r24, r18
	add ZL,r0
    75a4:	e0 0d       	add	r30, r0
	adc ZH,r1
    75a6:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    75a8:	a0 e5       	ldi	r26, 0x50	; 80
	ldi XH,hi8(ram_tiles)
    75aa:	b5 e0       	ldi	r27, 0x05	; 5
	mul r22,r18
    75ac:	62 9f       	mul	r22, r18
	add XL,r0
    75ae:	a0 0d       	add	r26, r0
	adc XH,r1
    75b0:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	lpm r1,Z+
	st X+,r1
.endr
    75b2:	15 90       	lpm	r1, Z+
    75b4:	1d 92       	st	X+, r1
    75b6:	15 90       	lpm	r1, Z+
    75b8:	1d 92       	st	X+, r1
    75ba:	15 90       	lpm	r1, Z+
    75bc:	1d 92       	st	X+, r1
    75be:	15 90       	lpm	r1, Z+
    75c0:	1d 92       	st	X+, r1
    75c2:	15 90       	lpm	r1, Z+
    75c4:	1d 92       	st	X+, r1
    75c6:	15 90       	lpm	r1, Z+
    75c8:	1d 92       	st	X+, r1
    75ca:	15 90       	lpm	r1, Z+
    75cc:	1d 92       	st	X+, r1
    75ce:	15 90       	lpm	r1, Z+
    75d0:	1d 92       	st	X+, r1
    75d2:	15 90       	lpm	r1, Z+
    75d4:	1d 92       	st	X+, r1
    75d6:	15 90       	lpm	r1, Z+
    75d8:	1d 92       	st	X+, r1
    75da:	15 90       	lpm	r1, Z+
    75dc:	1d 92       	st	X+, r1
    75de:	15 90       	lpm	r1, Z+
    75e0:	1d 92       	st	X+, r1
    75e2:	15 90       	lpm	r1, Z+
    75e4:	1d 92       	st	X+, r1
    75e6:	15 90       	lpm	r1, Z+
    75e8:	1d 92       	st	X+, r1
    75ea:	15 90       	lpm	r1, Z+
    75ec:	1d 92       	st	X+, r1
    75ee:	15 90       	lpm	r1, Z+
    75f0:	1d 92       	st	X+, r1
    75f2:	15 90       	lpm	r1, Z+
    75f4:	1d 92       	st	X+, r1
    75f6:	15 90       	lpm	r1, Z+
    75f8:	1d 92       	st	X+, r1
    75fa:	15 90       	lpm	r1, Z+
    75fc:	1d 92       	st	X+, r1
    75fe:	15 90       	lpm	r1, Z+
    7600:	1d 92       	st	X+, r1
    7602:	15 90       	lpm	r1, Z+
    7604:	1d 92       	st	X+, r1
    7606:	15 90       	lpm	r1, Z+
    7608:	1d 92       	st	X+, r1
    760a:	15 90       	lpm	r1, Z+
    760c:	1d 92       	st	X+, r1
    760e:	15 90       	lpm	r1, Z+
    7610:	1d 92       	st	X+, r1
    7612:	15 90       	lpm	r1, Z+
    7614:	1d 92       	st	X+, r1
    7616:	15 90       	lpm	r1, Z+
    7618:	1d 92       	st	X+, r1
    761a:	15 90       	lpm	r1, Z+
    761c:	1d 92       	st	X+, r1
    761e:	15 90       	lpm	r1, Z+
    7620:	1d 92       	st	X+, r1
    7622:	15 90       	lpm	r1, Z+
    7624:	1d 92       	st	X+, r1
    7626:	15 90       	lpm	r1, Z+
    7628:	1d 92       	st	X+, r1
    762a:	15 90       	lpm	r1, Z+
    762c:	1d 92       	st	X+, r1
    762e:	15 90       	lpm	r1, Z+
    7630:	1d 92       	st	X+, r1
    7632:	15 90       	lpm	r1, Z+
    7634:	1d 92       	st	X+, r1
    7636:	15 90       	lpm	r1, Z+
    7638:	1d 92       	st	X+, r1
    763a:	15 90       	lpm	r1, Z+
    763c:	1d 92       	st	X+, r1
    763e:	15 90       	lpm	r1, Z+
    7640:	1d 92       	st	X+, r1
    7642:	15 90       	lpm	r1, Z+
    7644:	1d 92       	st	X+, r1
    7646:	15 90       	lpm	r1, Z+
    7648:	1d 92       	st	X+, r1
    764a:	15 90       	lpm	r1, Z+
    764c:	1d 92       	st	X+, r1
    764e:	15 90       	lpm	r1, Z+
    7650:	1d 92       	st	X+, r1
    7652:	15 90       	lpm	r1, Z+
    7654:	1d 92       	st	X+, r1
    7656:	15 90       	lpm	r1, Z+
    7658:	1d 92       	st	X+, r1
    765a:	15 90       	lpm	r1, Z+
    765c:	1d 92       	st	X+, r1
    765e:	15 90       	lpm	r1, Z+
    7660:	1d 92       	st	X+, r1
    7662:	15 90       	lpm	r1, Z+
    7664:	1d 92       	st	X+, r1
    7666:	15 90       	lpm	r1, Z+
    7668:	1d 92       	st	X+, r1
    766a:	15 90       	lpm	r1, Z+
    766c:	1d 92       	st	X+, r1
    766e:	15 90       	lpm	r1, Z+
    7670:	1d 92       	st	X+, r1
    7672:	15 90       	lpm	r1, Z+
    7674:	1d 92       	st	X+, r1
    7676:	15 90       	lpm	r1, Z+
    7678:	1d 92       	st	X+, r1
    767a:	15 90       	lpm	r1, Z+
    767c:	1d 92       	st	X+, r1
    767e:	15 90       	lpm	r1, Z+
    7680:	1d 92       	st	X+, r1
    7682:	15 90       	lpm	r1, Z+
    7684:	1d 92       	st	X+, r1
    7686:	15 90       	lpm	r1, Z+
    7688:	1d 92       	st	X+, r1
    768a:	15 90       	lpm	r1, Z+
    768c:	1d 92       	st	X+, r1
    768e:	15 90       	lpm	r1, Z+
    7690:	1d 92       	st	X+, r1
    7692:	15 90       	lpm	r1, Z+
    7694:	1d 92       	st	X+, r1
    7696:	15 90       	lpm	r1, Z+
    7698:	1d 92       	st	X+, r1
    769a:	15 90       	lpm	r1, Z+
    769c:	1d 92       	st	X+, r1
    769e:	15 90       	lpm	r1, Z+
    76a0:	1d 92       	st	X+, r1
    76a2:	15 90       	lpm	r1, Z+
    76a4:	1d 92       	st	X+, r1
    76a6:	15 90       	lpm	r1, Z+
    76a8:	1d 92       	st	X+, r1
    76aa:	15 90       	lpm	r1, Z+
    76ac:	1d 92       	st	X+, r1
    76ae:	15 90       	lpm	r1, Z+
    76b0:	1d 92       	st	X+, r1
	clr r1
    76b2:	11 24       	eor	r1, r1
	ret
    76b4:	08 95       	ret

000076b6 <CopyRamTile>:
; r24=Source RAM tile index
; r22=Dest RAM tile index
;************************************
CopyRamTile:

	ldi r18,TILE_HEIGHT*TILE_WIDTH
    76b6:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	ldi ZL,lo8(ram_tiles)
    76b8:	e0 e5       	ldi	r30, 0x50	; 80
	ldi ZH,hi8(ram_tiles)
    76ba:	f5 e0       	ldi	r31, 0x05	; 5
	mul r24,r18
    76bc:	82 9f       	mul	r24, r18
	add ZL,r0
    76be:	e0 0d       	add	r30, r0
	adc ZH,r1
    76c0:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    76c2:	a0 e5       	ldi	r26, 0x50	; 80
	ldi XH,hi8(ram_tiles)
    76c4:	b5 e0       	ldi	r27, 0x05	; 5
	mul r22,r18
    76c6:	62 9f       	mul	r22, r18
	add XL,r0
    76c8:	a0 0d       	add	r26, r0
	adc XH,r1
    76ca:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	ld r1,Z+
	st X+,r1
.endr
    76cc:	11 90       	ld	r1, Z+
    76ce:	1d 92       	st	X+, r1
    76d0:	11 90       	ld	r1, Z+
    76d2:	1d 92       	st	X+, r1
    76d4:	11 90       	ld	r1, Z+
    76d6:	1d 92       	st	X+, r1
    76d8:	11 90       	ld	r1, Z+
    76da:	1d 92       	st	X+, r1
    76dc:	11 90       	ld	r1, Z+
    76de:	1d 92       	st	X+, r1
    76e0:	11 90       	ld	r1, Z+
    76e2:	1d 92       	st	X+, r1
    76e4:	11 90       	ld	r1, Z+
    76e6:	1d 92       	st	X+, r1
    76e8:	11 90       	ld	r1, Z+
    76ea:	1d 92       	st	X+, r1
    76ec:	11 90       	ld	r1, Z+
    76ee:	1d 92       	st	X+, r1
    76f0:	11 90       	ld	r1, Z+
    76f2:	1d 92       	st	X+, r1
    76f4:	11 90       	ld	r1, Z+
    76f6:	1d 92       	st	X+, r1
    76f8:	11 90       	ld	r1, Z+
    76fa:	1d 92       	st	X+, r1
    76fc:	11 90       	ld	r1, Z+
    76fe:	1d 92       	st	X+, r1
    7700:	11 90       	ld	r1, Z+
    7702:	1d 92       	st	X+, r1
    7704:	11 90       	ld	r1, Z+
    7706:	1d 92       	st	X+, r1
    7708:	11 90       	ld	r1, Z+
    770a:	1d 92       	st	X+, r1
    770c:	11 90       	ld	r1, Z+
    770e:	1d 92       	st	X+, r1
    7710:	11 90       	ld	r1, Z+
    7712:	1d 92       	st	X+, r1
    7714:	11 90       	ld	r1, Z+
    7716:	1d 92       	st	X+, r1
    7718:	11 90       	ld	r1, Z+
    771a:	1d 92       	st	X+, r1
    771c:	11 90       	ld	r1, Z+
    771e:	1d 92       	st	X+, r1
    7720:	11 90       	ld	r1, Z+
    7722:	1d 92       	st	X+, r1
    7724:	11 90       	ld	r1, Z+
    7726:	1d 92       	st	X+, r1
    7728:	11 90       	ld	r1, Z+
    772a:	1d 92       	st	X+, r1
    772c:	11 90       	ld	r1, Z+
    772e:	1d 92       	st	X+, r1
    7730:	11 90       	ld	r1, Z+
    7732:	1d 92       	st	X+, r1
    7734:	11 90       	ld	r1, Z+
    7736:	1d 92       	st	X+, r1
    7738:	11 90       	ld	r1, Z+
    773a:	1d 92       	st	X+, r1
    773c:	11 90       	ld	r1, Z+
    773e:	1d 92       	st	X+, r1
    7740:	11 90       	ld	r1, Z+
    7742:	1d 92       	st	X+, r1
    7744:	11 90       	ld	r1, Z+
    7746:	1d 92       	st	X+, r1
    7748:	11 90       	ld	r1, Z+
    774a:	1d 92       	st	X+, r1
    774c:	11 90       	ld	r1, Z+
    774e:	1d 92       	st	X+, r1
    7750:	11 90       	ld	r1, Z+
    7752:	1d 92       	st	X+, r1
    7754:	11 90       	ld	r1, Z+
    7756:	1d 92       	st	X+, r1
    7758:	11 90       	ld	r1, Z+
    775a:	1d 92       	st	X+, r1
    775c:	11 90       	ld	r1, Z+
    775e:	1d 92       	st	X+, r1
    7760:	11 90       	ld	r1, Z+
    7762:	1d 92       	st	X+, r1
    7764:	11 90       	ld	r1, Z+
    7766:	1d 92       	st	X+, r1
    7768:	11 90       	ld	r1, Z+
    776a:	1d 92       	st	X+, r1
    776c:	11 90       	ld	r1, Z+
    776e:	1d 92       	st	X+, r1
    7770:	11 90       	ld	r1, Z+
    7772:	1d 92       	st	X+, r1
    7774:	11 90       	ld	r1, Z+
    7776:	1d 92       	st	X+, r1
    7778:	11 90       	ld	r1, Z+
    777a:	1d 92       	st	X+, r1
    777c:	11 90       	ld	r1, Z+
    777e:	1d 92       	st	X+, r1
    7780:	11 90       	ld	r1, Z+
    7782:	1d 92       	st	X+, r1
    7784:	11 90       	ld	r1, Z+
    7786:	1d 92       	st	X+, r1
    7788:	11 90       	ld	r1, Z+
    778a:	1d 92       	st	X+, r1
    778c:	11 90       	ld	r1, Z+
    778e:	1d 92       	st	X+, r1
    7790:	11 90       	ld	r1, Z+
    7792:	1d 92       	st	X+, r1
    7794:	11 90       	ld	r1, Z+
    7796:	1d 92       	st	X+, r1
    7798:	11 90       	ld	r1, Z+
    779a:	1d 92       	st	X+, r1
    779c:	11 90       	ld	r1, Z+
    779e:	1d 92       	st	X+, r1
    77a0:	11 90       	ld	r1, Z+
    77a2:	1d 92       	st	X+, r1
    77a4:	11 90       	ld	r1, Z+
    77a6:	1d 92       	st	X+, r1
    77a8:	11 90       	ld	r1, Z+
    77aa:	1d 92       	st	X+, r1
    77ac:	11 90       	ld	r1, Z+
    77ae:	1d 92       	st	X+, r1
    77b0:	11 90       	ld	r1, Z+
    77b2:	1d 92       	st	X+, r1
    77b4:	11 90       	ld	r1, Z+
    77b6:	1d 92       	st	X+, r1
    77b8:	11 90       	ld	r1, Z+
    77ba:	1d 92       	st	X+, r1
    77bc:	11 90       	ld	r1, Z+
    77be:	1d 92       	st	X+, r1
    77c0:	11 90       	ld	r1, Z+
    77c2:	1d 92       	st	X+, r1
    77c4:	11 90       	ld	r1, Z+
    77c6:	1d 92       	st	X+, r1
    77c8:	11 90       	ld	r1, Z+
    77ca:	1d 92       	st	X+, r1
	clr r1
    77cc:	11 24       	eor	r1, r1
	ret
    77ce:	08 95       	ret

000077d0 <BlitSprite>:
; r22=RAM tile index (bt)
; r21:r20=Y:X
; r19:r18=DY:DX
;************************************
BlitSprite:
	push r16
    77d0:	0f 93       	push	r16
	push r17
    77d2:	1f 93       	push	r17
	push YL
    77d4:	cf 93       	push	r28
	push YH
    77d6:	df 93       	push	r29

	;src=sprites_tiletable_lo+(sprites[i].tileIndex*TILE_HEIGHT*TILE_WIDTH)
	ldi r25,SPRITE_STRUCT_SIZE
    77d8:	94 e0       	ldi	r25, 0x04	; 4
	mul r24,r25
    77da:	89 9f       	mul	r24, r25

	ldi ZL,lo8(sprites)	
    77dc:	e0 e1       	ldi	r30, 0x10	; 16
	ldi ZH,hi8(sprites)	
    77de:	f5 e0       	ldi	r31, 0x05	; 5
	add ZL,r0
    77e0:	e0 0d       	add	r30, r0
	adc ZH,r1
    77e2:	f1 1d       	adc	r31, r1

	ldd r16,Z+sprFlags
    77e4:	03 81       	ldd	r16, Z+3	; 0x03

	;8x16 multiply
	ldd r24,Z+sprTileIndex
    77e6:	82 81       	ldd	r24, Z+2	; 0x02
	ldi r30,TILE_WIDTH*TILE_HEIGHT
    77e8:	e0 e4       	ldi	r30, 0x40	; 64
	mul r24,r30
    77ea:	8e 9f       	mul	r24, r30
	movw r26,r0
    77ec:	d0 01       	movw	r26, r0
	
	;get tile bank addr
	ldi r25,4*2
    77ee:	98 e0       	ldi	r25, 0x08	; 8
	mul r16,r25
    77f0:	09 9f       	mul	r16, r25
	ldi YL,lo8(sprites_tile_banks)	
    77f2:	c4 ea       	ldi	r28, 0xA4	; 164
	ldi YH,hi8(sprites_tile_banks)	
    77f4:	dc e0       	ldi	r29, 0x0C	; 12
	clr r0
    77f6:	00 24       	eor	r0, r0
	add YL,r1
    77f8:	c1 0d       	add	r28, r1
	adc YH,r0		
    77fa:	d0 1d       	adc	r29, r0
	ldd ZL,Y+0
    77fc:	e8 81       	ld	r30, Y
	ldd ZH,Y+1
    77fe:	f9 81       	ldd	r31, Y+1	; 0x01
	add ZL,r26	;tile data src
    7800:	ea 0f       	add	r30, r26
	adc ZH,r27
    7802:	fb 1f       	adc	r31, r27
	
	;dest=ram_tiles+(bt*TILE_HEIGHT*TILE_WIDTH)
	ldi XL,lo8(ram_tiles)	
    7804:	a0 e5       	ldi	r26, 0x50	; 80
	ldi XH,hi8(ram_tiles)
    7806:	b5 e0       	ldi	r27, 0x05	; 5
	ldi r25,TILE_WIDTH*TILE_HEIGHT
    7808:	90 e4       	ldi	r25, 0x40	; 64
	mul r22,r25
    780a:	69 9f       	mul	r22, r25
	add XL,r0
    780c:	a0 0d       	add	r26, r0
	adc XH,r1
    780e:	b1 1d       	adc	r27, r1
			srcXdiff=destXdiff;
			src+=destXdiff;
		}
	}
	*/
	clr r1
    7810:	11 24       	eor	r1, r1
	clr YH		;hi8(srcXdiff)
    7812:	dd 27       	eor	r29, r29

	cpi r20,0	
    7814:	40 30       	cpi	r20, 0x00	; 0
	brne x_2nd_tile
    7816:	51 f4       	brne	.+20     	; 0x782c <x_2nd_tile>
	
	add XL,r18	;dest+=dx
    7818:	a2 0f       	add	r26, r18
	adc XH,r1
    781a:	b1 1d       	adc	r27, r1
	mov r24,r18	;destXdiff=dx
    781c:	82 2f       	mov	r24, r18
	mov YL,r18	;srcXdiff=dx
    781e:	c2 2f       	mov	r28, r18

	sbrs r16,SPRITE_FLIP_X_BIT
    7820:	00 ff       	sbrs	r16, 0
	rjmp x_check_end
    7822:	11 c0       	rjmp	.+34     	; 0x7846 <x_check_end>

	adiw ZL,(TILE_WIDTH-1)	;src+=7
    7824:	37 96       	adiw	r30, 0x07	; 7
	ldi YL,TILE_WIDTH*2		;srcXdiff=((TILE_WIDTH*2)-dx);
    7826:	c0 e1       	ldi	r28, 0x10	; 16
	sub YL,r18	
    7828:	c2 1b       	sub	r28, r18
	rjmp x_check_end
    782a:	0d c0       	rjmp	.+26     	; 0x7846 <x_check_end>

0000782c <x_2nd_tile>:

x_2nd_tile:
	ldi r24,TILE_WIDTH
    782c:	88 e0       	ldi	r24, 0x08	; 8
	sub r24,r18		;8-DX = xdiff for dest
    782e:	82 1b       	sub	r24, r18

	sbrc r16,SPRITE_FLIP_X_BIT
    7830:	00 fd       	sbrc	r16, 0
	rjmp x2_flip_x
    7832:	04 c0       	rjmp	.+8      	; 0x783c <x2_flip_x>

	mov YL,r24		;srcXdiff=destXdiff;
    7834:	c8 2f       	mov	r28, r24
	add ZL,r24		;src+=destXdiff;
    7836:	e8 0f       	add	r30, r24
	adc ZH,r1	
    7838:	f1 1d       	adc	r31, r1
	rjmp x_check_end
    783a:	05 c0       	rjmp	.+10     	; 0x7846 <x_check_end>

0000783c <x2_flip_x>:

x2_flip_x:
	ldi YL,TILE_WIDTH
    783c:	c8 e0       	ldi	r28, 0x08	; 8
	add YL,r18		;srcXdiff=TILE_WIDTH+dx;	
    783e:	c2 0f       	add	r28, r18
	add ZL,r18		;src+=dx;
    7840:	e2 0f       	add	r30, r18
	adc ZH,r1
    7842:	f1 1d       	adc	r31, r1
	sbiw ZL,1		;src--;
    7844:	31 97       	sbiw	r30, 0x01	; 1

00007846 <x_check_end>:
		}else{
			src+=(ydiff*TILE_WIDTH);
		}
	}
	*/
	cpi r21,0
    7846:	50 30       	cpi	r21, 0x00	; 0
	brne y_2nd_tile
    7848:	51 f4       	brne	.+20     	; 0x785e <y_2nd_tile>

	ldi r25,TILE_WIDTH	;dest+=(dy*TILE_WIDTH)
    784a:	98 e0       	ldi	r25, 0x08	; 8
	mul r25,r19			
    784c:	93 9f       	mul	r25, r19
	add XL,r0
    784e:	a0 0d       	add	r26, r0
	adc XH,r1
    7850:	b1 1d       	adc	r27, r1

	mov r25,r19			;ydiff=dy
    7852:	93 2f       	mov	r25, r19

	//sbrc r16,SPRITE_FLIP_Y_BIT
	//adiw ZL,(TILE_WIDTH*(TILE_HEIGHT-1))

	sbrc r16,SPRITE_FLIP_Y_BIT
    7854:	01 fd       	sbrc	r16, 1
	subi ZL,lo8(-(TILE_WIDTH*(TILE_HEIGHT-1)));src+=(TILE_WIDTH*(TILE_HEIGHT-1));
    7856:	e8 5c       	subi	r30, 0xC8	; 200
	sbrc r16,SPRITE_FLIP_Y_BIT
    7858:	01 fd       	sbrc	r16, 1
	sbci ZH,hi8(-(TILE_WIDTH*(TILE_HEIGHT-1)))
    785a:	ff 4f       	sbci	r31, 0xFF	; 255


	rjmp y_check_end
    785c:	0a c0       	rjmp	.+20     	; 0x7872 <y_check_end>

0000785e <y_2nd_tile>:

y_2nd_tile:
	ldi r25,TILE_HEIGHT	;ydiff=(TILE_HEIGHT-dy)
    785e:	98 e0       	ldi	r25, 0x08	; 8
	sub r25,r19	
    7860:	93 1b       	sub	r25, r19
	
	mov r22,r19			;temp=dy-1
    7862:	63 2f       	mov	r22, r19
	dec r22
    7864:	6a 95       	dec	r22
	sbrs r16,SPRITE_FLIP_Y_BIT
    7866:	01 ff       	sbrs	r16, 1
	mov r22,r25			;temp=ydiff
    7868:	69 2f       	mov	r22, r25

	ldi r21,TILE_WIDTH	;src+=(temp*TILE_WIDTH);
    786a:	58 e0       	ldi	r21, 0x08	; 8
	mul r21,r22
    786c:	56 9f       	mul	r21, r22
	add ZL,r0
    786e:	e0 0d       	add	r30, r0
	adc ZH,r1	
    7870:	f1 1d       	adc	r31, r1

00007872 <y_check_end>:
y_check_end:	
	
	//if(flags&SPRITE_FLIP_X){
	//	step=-1;
	//}
	ser r22		;step=-1
    7872:	6f ef       	ldi	r22, 0xFF	; 255
	ser r23
    7874:	7f ef       	ldi	r23, 0xFF	; 255
	sbrs r16,SPRITE_FLIP_X_BIT
    7876:	00 ff       	sbrs	r16, 0
	ldi r22,1	;step=1
    7878:	61 e0       	ldi	r22, 0x01	; 1
	sbrs r16,SPRITE_FLIP_X_BIT
    787a:	00 ff       	sbrs	r16, 0
	clr r23
    787c:	77 27       	eor	r23, r23

	//if(flags&SPRITE_FLIP_Y){
	//	srcXdiff-=(TILE_WIDTH*2);
	//}
	sbrc r16,SPRITE_FLIP_Y_BIT
    787e:	01 fd       	sbrc	r16, 1
	sbiw YL,(TILE_WIDTH*2)
    7880:	60 97       	sbiw	r28, 0x10	; 16
	;r24	= destXdiff
	;r25	= ydiff
	;X		= dest
	;Y		= srcXdiff
	;Z		= src
	clr r1
    7882:	11 24       	eor	r1, r1
	ldi r19,TRANSLUCENT_COLOR
    7884:	3e ef       	ldi	r19, 0xFE	; 254

	ldi r21,TILE_HEIGHT
    7886:	58 e0       	ldi	r21, 0x08	; 8
	sub r21,r25 	;yspan=(TILE_HEIGHT-ydiff)
    7888:	59 1b       	sub	r21, r25

0000788a <y_loop>:

y_loop:
	ldi r20,TILE_WIDTH
    788a:	48 e0       	ldi	r20, 0x08	; 8
	sub r20,r24 	;xspan=(TILE_WIDTH-destXdiff)
    788c:	48 1b       	sub	r20, r24

0000788e <x_loop>:

x_loop:
	lpm r18,Z		;px=pgm_read_byte(src);
    788e:	24 91       	lpm	r18, Z
	cpse r18,r19	;if(px!=TRANSLUCENT_COLOR)
    7890:	23 13       	cpse	r18, r19
	st X,r18		;*dest=px;
    7892:	2c 93       	st	X, r18
	adiw XL,1
    7894:	11 96       	adiw	r26, 0x01	; 1
	add ZL,r22		;src+=step;
    7896:	e6 0f       	add	r30, r22
	adc ZH,r23
    7898:	f7 1f       	adc	r31, r23
	dec r20
    789a:	4a 95       	dec	r20
	brne x_loop
    789c:	c1 f7       	brne	.-16     	; 0x788e <x_loop>

	add ZL,YL		;src+=srcXdiff
    789e:	ec 0f       	add	r30, r28
	adc ZH,YH
    78a0:	fd 1f       	adc	r31, r29
	add XL,r24		;dest+=destXdiff
    78a2:	a8 0f       	add	r26, r24
	adc XH,r1
    78a4:	b1 1d       	adc	r27, r1
	dec r21
    78a6:	5a 95       	dec	r21
	brne y_loop
    78a8:	81 f7       	brne	.-32     	; 0x788a <y_loop>


	pop YH
    78aa:	df 91       	pop	r29
	pop YL
    78ac:	cf 91       	pop	r28
	pop r17
    78ae:	1f 91       	pop	r17
	pop r16
    78b0:	0f 91       	pop	r16
	ret
    78b2:	08 95       	ret

000078b4 <__vector_13>:

;***************************************************************************
; Main Video sync interrupt
;***************************************************************************
TIMER1_COMPA_vect:
	push r0
    78b4:	0f 92       	push	r0
	push r1
    78b6:	1f 92       	push	r1
	push ZL;2
    78b8:	ef 93       	push	r30
	push ZH;2
    78ba:	ff 93       	push	r31
	
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    78bc:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    78be:	ef 93       	push	r30

	;Read timer offset since rollover to remove cycles 
	;and conpensate for interrupt latency.
	;This is nessesary to eliminate frame jitter.
	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    78c0:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,0x12 ;MIN_INT_LATENCY
    78c4:	e2 51       	subi	r30, 0x12	; 18

	ldi ZH,1
    78c6:	f1 e0       	ldi	r31, 0x01	; 1

000078c8 <latency_loop>:
latency_loop:
	cp ZL,ZH
    78c8:	ef 17       	cp	r30, r31
	brlo .		;advance PC to next instruction	
    78ca:	00 f0       	brcs	.+0      	; 0x78cc <latency_loop+0x4>
	inc ZH
    78cc:	f3 95       	inc	r31
	cpi ZH,10
    78ce:	fa 30       	cpi	r31, 0x0A	; 10
	brlo latency_loop
    78d0:	d8 f3       	brcs	.-10     	; 0x78c8 <latency_loop>
	jmp .
    78d2:	0c 94 6b 3c 	jmp	0x78d6	; 0x78d6 <latency_loop+0xe>
	
	;decrement sync pulse counter
	lds ZL,sync_pulse
    78d6:	e0 91 b7 0c 	lds	r30, 0x0CB7
	dec ZL
    78da:	ea 95       	dec	r30
	sts sync_pulse,ZL
    78dc:	e0 93 b7 0c 	sts	0x0CB7, r30

	;process sync phases
	lds ZH,sync_phase
    78e0:	f0 91 b6 0c 	lds	r31, 0x0CB6
	sbrc ZH,0
    78e4:	f0 fd       	sbrc	r31, 0
	rjmp sync_hsync
    78e6:	57 c0       	rjmp	.+174    	; 0x7996 <sync_hsync>
; Note: TCNT1 should be equal to 
; 0x68 on the cbi
; 0xAC on the sbi
; pulse duration: 68 clocks
;***************************************************		
	cpi ZL,SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    78e8:	ec 30       	cpi	r30, 0x0C	; 12
	brlo sync_eq
    78ea:	98 f0       	brcs	.+38     	; 0x7912 <sync_eq>

	;Set HDRIVE to double rate during VSYNC
	ldi ZH,hi8(HDRIVE_CL_TWICE)
    78ec:	f3 e0       	ldi	r31, 0x03	; 3
	sts _SFR_MEM_ADDR(OCR1AH),ZH	
    78ee:	f0 93 89 00 	sts	0x0089, r31
	ldi ZH,lo8(HDRIVE_CL_TWICE)
    78f2:	fd e8       	ldi	r31, 0x8D	; 141
	sts _SFR_MEM_ADDR(OCR1AL),ZH
    78f4:	f0 93 88 00 	sts	0x0088, r31

	bst ZL,0
    78f8:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0x68
    78fa:	28 98       	cbi	0x05, 0	; 5
	brtc sync_pre_eq_no_sound_update
    78fc:	26 f4       	brtc	.+8      	; 0x7906 <sync_pre_eq_no_sound_update>
	ldi ZL,1	;indicate update_sound to generate the SBI for pre-eq
    78fe:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    7900:	0e 94 52 3d 	call	0x7aa4	; 0x7aa4 <update_sound>
	rjmp sync_end
    7904:	b7 c0       	rjmp	.+366    	; 0x7a74 <sync_end>

00007906 <sync_pre_eq_no_sound_update>:

sync_pre_eq_no_sound_update:
	WAIT ZL,64
    7906:	e5 e1       	ldi	r30, 0x15	; 21
    7908:	ea 95       	dec	r30
    790a:	f1 f7       	brne	.-4      	; 0x7908 <sync_pre_eq_no_sound_update+0x2>
    790c:	00 00       	nop
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    790e:	28 9a       	sbi	0x05, 0	; 5
		
	rjmp sync_end
    7910:	b1 c0       	rjmp	.+354    	; 0x7a74 <sync_end>

00007912 <sync_eq>:
; 0x68  on the cbi
; 0x36E on the sbi
; low pulse duration: 774 clocks
;***************************************************	
sync_eq:
	cpi ZL,SYNC_POST_EQ_PULSES
    7912:	e6 30       	cpi	r30, 0x06	; 6
	brlo sync_post_eq
    7914:	38 f1       	brcs	.+78     	; 0x7964 <sync_post_eq>

	rjmp .
    7916:	00 c0       	rjmp	.+0      	; 0x7918 <sync_eq+0x6>
	rjmp .
    7918:	00 c0       	rjmp	.+0      	; 0x791a <sync_eq+0x8>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    791a:	28 98       	cbi	0x05, 0	; 5

	bst ZL,0
    791c:	e0 fb       	bst	r30, 0
	ldi ZL,4
    791e:	e4 e0       	ldi	r30, 0x04	; 4
	brtc sync_eq_skip
    7920:	16 f4       	brtc	.+4      	; 0x7926 <sync_eq_skip>
	
	call update_sound
    7922:	0e 94 52 3d 	call	0x7aa4	; 0x7aa4 <update_sound>

00007926 <sync_eq_skip>:
	;enable interupt to bring back sync 
	;level instead of wasting cycles
	;in a big wait loop

 	;clear interrupt flag
	ldi ZL,(1<<OCF1B)
    7926:	e4 e0       	ldi	r30, 0x04	; 4
	sts _SFR_MEM_ADDR(TIFR1),ZL 
    7928:	e0 93 36 00 	sts	0x0036, r30
	
	;generate interrupt on match
	;for timer1 compare unit b
	ldi ZL,(1<<OCIE1A)+(1<<OCIE1B)
    792c:	e6 e0       	ldi	r30, 0x06	; 6
	sts _SFR_MEM_ADDR(TIMSK1),ZL
    792e:	e0 93 6f 00 	sts	0x006F, r30

	rjmp sync_end
    7932:	a0 c0       	rjmp	.+320    	; 0x7a74 <sync_end>

00007934 <__vector_14>:
; during VSYNC EQ pulses to recover ~5000 cycles per field
; with interrupt latency conpensation
; 37 cycles
;**********************************************************	
TIMER1_COMPB_vect:
	push ZL
    7934:	ef 93       	push	r30
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    7936:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    7938:	ef 93       	push	r30

	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    793a:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,62+31 ;0x5D ;MIN_INT_LATENCY
    793e:	ed 55       	subi	r30, 0x5D	; 93

	cpi ZL,1
    7940:	e1 30       	cpi	r30, 0x01	; 1
	brlo .		;advance PC to next instruction
    7942:	00 f0       	brcs	.+0      	; 0x7944 <__vector_14+0x10>

	cpi ZL,2
    7944:	e2 30       	cpi	r30, 0x02	; 2
	brlo .		;advance PC to next instruction
    7946:	00 f0       	brcs	.+0      	; 0x7948 <__vector_14+0x14>

	cpi ZL,3
    7948:	e3 30       	cpi	r30, 0x03	; 3
	brlo .		;advance PC to next instruction
    794a:	00 f0       	brcs	.+0      	; 0x794c <__vector_14+0x18>

	cpi ZL,4
    794c:	e4 30       	cpi	r30, 0x04	; 4
	brlo .		;advance PC to next instruction
    794e:	00 f0       	brcs	.+0      	; 0x7950 <__vector_14+0x1c>

	cpi ZL,5
    7950:	e5 30       	cpi	r30, 0x05	; 5
	brlo .		;advance PC to next instruction
    7952:	00 f0       	brcs	.+0      	; 0x7954 <__vector_14+0x20>

 	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;68
    7954:	28 9a       	sbi	0x05, 0	; 5
	ldi ZL,(1<<OCIE1A) ; disable OCIE1B 
    7956:	e2 e0       	ldi	r30, 0x02	; 2
	sts _SFR_MEM_ADDR(TIMSK1),ZL ;stop generate interrupt on match
    7958:	e0 93 6f 00 	sts	0x006F, r30
	
	;restore flags
	pop ZL
    795c:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL	
    795e:	ef bf       	out	0x3f, r30	; 63
	pop ZL
    7960:	ef 91       	pop	r30
	reti
    7962:	18 95       	reti

00007964 <sync_post_eq>:
; 0x68 on the cbi
; 0xAC on the sbi
; pulse cycles: 68 clocks
;***************************************************	
sync_post_eq:	
	rjmp .
    7964:	00 c0       	rjmp	.+0      	; 0x7966 <sync_post_eq+0x2>

	bst ZL,0
    7966:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    7968:	28 98       	cbi	0x05, 0	; 5
	brtc sync_post_eq_no_sound_update
    796a:	26 f4       	brtc	.+8      	; 0x7974 <sync_post_eq_no_sound_update>
	ldi ZL,1	
    796c:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    796e:	0e 94 52 3d 	call	0x7aa4	; 0x7aa4 <update_sound>
	rjmp sync_pre_eq_cont
    7972:	05 c0       	rjmp	.+10     	; 0x797e <sync_pre_eq_cont>

00007974 <sync_post_eq_no_sound_update>:

sync_post_eq_no_sound_update:
	WAIT ZL,64
    7974:	e5 e1       	ldi	r30, 0x15	; 21
    7976:	ea 95       	dec	r30
    7978:	f1 f7       	brne	.-4      	; 0x7976 <sync_post_eq_no_sound_update+0x2>
    797a:	00 00       	nop

	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN 
    797c:	28 9a       	sbi	0x05, 0	; 5

0000797e <sync_pre_eq_cont>:

sync_pre_eq_cont:	
	;check if it's the last vsync pulse
	lds ZL,sync_pulse
    797e:	e0 91 b7 0c 	lds	r30, 0x0CB7
	cpi ZL,0
    7982:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2 ;skip rjmp
    7984:	09 f0       	breq	.+2      	; 0x7988 <sync_pre_eq_cont+0xa>
	rjmp sync_end
    7986:	76 c0       	rjmp	.+236    	; 0x7a74 <sync_end>
	
	;update sync flags
	ldi ZL,SYNC_HSYNC_PULSES
    7988:	ed ef       	ldi	r30, 0xFD	; 253
	sts sync_pulse,ZL
    798a:	e0 93 b7 0c 	sts	0x0CB7, r30
	ldi ZL,1
    798e:	e1 e0       	ldi	r30, 0x01	; 1
	sts sync_phase,ZL
    7990:	e0 93 b6 0c 	sts	0x0CB6, r30
	
	rjmp sync_end
    7994:	6f c0       	rjmp	.+222    	; 0x7a74 <sync_end>

00007996 <sync_hsync>:
; 0xF0 on the sbi
; pulse duration: 136 clocks
;***************************************************	

	; Set HDRIVE to normal rate
	ldi ZL,hi8(HDRIVE_CL)
    7996:	e7 e0       	ldi	r30, 0x07	; 7
	sts _SFR_MEM_ADDR(OCR1AH),ZL	
    7998:	e0 93 89 00 	sts	0x0089, r30
	ldi ZL,lo8(HDRIVE_CL)
    799c:	eb e1       	ldi	r30, 0x1B	; 27
	sts _SFR_MEM_ADDR(OCR1AL),ZL
    799e:	e0 93 88 00 	sts	0x0088, r30
	rjmp .
    79a2:	00 c0       	rjmp	.+0      	; 0x79a4 <sync_hsync+0xe>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    79a4:	28 98       	cbi	0x05, 0	; 5
	
	ldi ZL,2	;indicate update_sound to generate the SBI for pre-eq
    79a6:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    79a8:	00 c0       	rjmp	.+0      	; 0x79aa <sync_hsync+0x14>
	call update_sound
    79aa:	0e 94 52 3d 	call	0x7aa4	; 0x7aa4 <update_sound>

	;check if we have reached the first line to render
	ldi ZH,SYNC_HSYNC_PULSES
    79ae:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    79b0:	00 90 bd 0c 	lds	r0, 0x0CBD
	sub ZH,r0				
    79b4:	f0 19       	sub	r31, r0
	lds ZL,sync_pulse
    79b6:	e0 91 b7 0c 	lds	r30, 0x0CB7
	cp ZL,ZH
    79ba:	ef 17       	cp	r30, r31
	brsh no_render
    79bc:	d0 f4       	brcc	.+52     	; 0x79f2 <no_render>

	ldi ZH,SYNC_HSYNC_PULSES
    79be:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    79c0:	00 90 bd 0c 	lds	r0, 0x0CBD
	sub ZH,r0				
    79c4:	f0 19       	sub	r31, r0
	lds r0,render_lines_count
    79c6:	00 90 be 0c 	lds	r0, 0x0CBE
	sub ZH,r0			
    79ca:	f0 19       	sub	r31, r0
	cp ZL,ZH
    79cc:	ef 17       	cp	r30, r31
	brlo no_render
    79ce:	88 f0       	brcs	.+34     	; 0x79f2 <no_render>

	;push r1-r29
	ldi ZL,29
    79d0:	ed e1       	ldi	r30, 0x1D	; 29
	clr ZH
    79d2:	ff 27       	eor	r31, r31

000079d4 <push_loop>:
push_loop:
	ld r0,Z	;load value from register file
    79d4:	00 80       	ld	r0, Z
	push r0
    79d6:	0f 92       	push	r0
	dec ZL
    79d8:	ea 95       	dec	r30
	brne push_loop	
    79da:	e1 f7       	brne	.-8      	; 0x79d4 <push_loop>

	;timing compensation
	;to insure we always call the video mode 
	;routine at the same cycle	
	WAIT r16,230-(AUDIO_OUT_HSYNC_CYCLES)
    79dc:	06 e0       	ldi	r16, 0x06	; 6
    79de:	0a 95       	dec	r16
    79e0:	f1 f7       	brne	.-4      	; 0x79de <push_loop+0xa>

	call VMODE_FUNC		;TCNT1=0x234
    79e2:	0e 94 18 39 	call	0x7230	; 0x7230 <sub_video_mode3>

	;pop r1-r29
	ldi ZL,1
    79e6:	e1 e0       	ldi	r30, 0x01	; 1
	clr ZH
    79e8:	ff 27       	eor	r31, r31

000079ea <pop_loop>:
pop_loop:
	pop r0
    79ea:	0f 90       	pop	r0
	st Z+,r0 ;store value to register file
    79ec:	01 92       	st	Z+, r0
	cpi ZL,30
    79ee:	ee 31       	cpi	r30, 0x1E	; 30
	brlo pop_loop	
    79f0:	e0 f3       	brcs	.-8      	; 0x79ea <pop_loop>

000079f2 <no_render>:

no_render:

	;check if it's the last hsync pulse and we are 
	;ready for VSYNC
	lds ZL,sync_pulse
    79f2:	e0 91 b7 0c 	lds	r30, 0x0CB7
	cpi ZL,0
    79f6:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2
    79f8:	09 f0       	breq	.+2      	; 0x79fc <no_render+0xa>
	rjmp sync_end
    79fa:	3c c0       	rjmp	.+120    	; 0x7a74 <sync_end>
;***************************************************
; Process VSYNC stuff
;***************************************************
	
	;push C-call registers
	push r18
    79fc:	2f 93       	push	r18
	push r19
    79fe:	3f 93       	push	r19
	push r20
    7a00:	4f 93       	push	r20
	push r21
    7a02:	5f 93       	push	r21
	push r22
    7a04:	6f 93       	push	r22
	push r23
    7a06:	7f 93       	push	r23
	push r24
    7a08:	8f 93       	push	r24
	push r25
    7a0a:	9f 93       	push	r25
	push r26
    7a0c:	af 93       	push	r26
	push r27
    7a0e:	bf 93       	push	r27

	sei ;must enable ints for re-entrant sync pulses
    7a10:	78 94       	sei
	clr r1
    7a12:	11 24       	eor	r1, r1

	;set vsync flags
	clr ZL
    7a14:	ee 27       	eor	r30, r30
	sts sync_phase,ZL
    7a16:	e0 93 b6 0c 	sts	0x0CB6, r30
	ldi ZL,SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    7a1a:	e2 e1       	ldi	r30, 0x12	; 18
	sts sync_pulse,ZL
    7a1c:	e0 93 b7 0c 	sts	0x0CB7, r30



	;increment the vsync counter
	lds r24,vsync_counter
    7a20:	80 91 c7 0c 	lds	r24, 0x0CC7
	lds r25,vsync_counter+1
    7a24:	90 91 c8 0c 	lds	r25, 0x0CC8
	adiw r24,1
    7a28:	01 96       	adiw	r24, 0x01	; 1
	sts vsync_counter,r24
    7a2a:	80 93 c7 0c 	sts	0x0CC7, r24
	sts vsync_counter+1,r25
    7a2e:	90 93 c8 0c 	sts	0x0CC8, r25


	;process user pre callback
	lds ZL,pre_vsync_user_callback+0
    7a32:	e0 91 b9 0c 	lds	r30, 0x0CB9
	lds ZH,pre_vsync_user_callback+1
    7a36:	f0 91 ba 0c 	lds	r31, 0x0CBA
	cp  ZL,r1
    7a3a:	e1 15       	cp	r30, r1
	cpc ZH,r1
    7a3c:	f1 05       	cpc	r31, r1
	breq .+2 
    7a3e:	09 f0       	breq	.+2      	; 0x7a42 <no_render+0x50>
	icall
    7a40:	09 95       	icall

	;refresh buttons states
	#if CONTROLLERS_VSYNC_READ == 1
		call ReadControllers
    7a42:	0e 94 f1 3e 	call	0x7de2	; 0x7de2 <ReadControllers>
	#endif 
	
	;invoke stuff the video mode may have to do
	call VideoModeVsync	
    7a46:	0e 94 5e 4d 	call	0x9abc	; 0x9abc <VideoModeVsync>

	;process music (music, envelopes, etc)
	call process_music
    7a4a:	0e 94 4c 3d 	call	0x7a98	; 0x7a98 <process_music>
	clr r1
    7a4e:	11 24       	eor	r1, r1

	;process user post callback
	lds ZL,post_vsync_user_callback+0
    7a50:	e0 91 bb 0c 	lds	r30, 0x0CBB
	lds ZH,post_vsync_user_callback+1
    7a54:	f0 91 bc 0c 	lds	r31, 0x0CBC
	cp  ZL,r1
    7a58:	e1 15       	cp	r30, r1
	cpc ZH,r1
    7a5a:	f1 05       	cpc	r31, r1
	breq .+2 
    7a5c:	09 f0       	breq	.+2      	; 0x7a60 <no_render+0x6e>
	icall
    7a5e:	09 95       	icall
	#if SNES_MOUSE == 1
		call ReadMouseExtendedData
		call ProcessMouseMovement
	#endif

	pop r27
    7a60:	bf 91       	pop	r27
	pop r26
    7a62:	af 91       	pop	r26
	pop r25
    7a64:	9f 91       	pop	r25
	pop r24
    7a66:	8f 91       	pop	r24
	pop r23
    7a68:	7f 91       	pop	r23
	pop r22
    7a6a:	6f 91       	pop	r22
	pop r21
    7a6c:	5f 91       	pop	r21
	pop r20
    7a6e:	4f 91       	pop	r20
	pop r19
    7a70:	3f 91       	pop	r19
	pop r18
    7a72:	2f 91       	pop	r18

00007a74 <sync_end>:
	
sync_end:	
	;restore flags
	pop ZL
    7a74:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL
    7a76:	ef bf       	out	0x3f, r30	; 63
	
	pop ZH
    7a78:	ff 91       	pop	r31
	pop ZL
    7a7a:	ef 91       	pop	r30
	pop r1
    7a7c:	1f 90       	pop	r1
	pop r0
    7a7e:	0f 90       	pop	r0
	reti
    7a80:	18 95       	reti

00007a82 <hsync_pulse>:
; 0xf0 on the sbi 
;	
; Destroys: ZL (r30)
;*************************************************
hsync_pulse:
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    7a82:	28 98       	cbi	0x05, 0	; 5
	ldi ZL,2
    7a84:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    7a86:	00 c0       	rjmp	.+0      	; 0x7a88 <hsync_pulse+0x6>
	call update_sound
    7a88:	0e 94 52 3d 	call	0x7aa4	; 0x7aa4 <update_sound>

	lds ZL,sync_pulse
    7a8c:	e0 91 b7 0c 	lds	r30, 0x0CB7
	dec ZL
    7a90:	ea 95       	dec	r30
	sts sync_pulse,ZL
    7a92:	e0 93 b7 0c 	sts	0x0CB7, r30

	ret
    7a96:	08 95       	ret

00007a98 <process_music>:
; NOTE: registers r18-r27 are already saved by the caller
;***********************
process_music:
	
#if ENABLE_MIXER==1
	lds ZL,sound_enabled
    7a98:	e0 91 cf 0c 	lds	r30, 0x0CCF
	sbrc ZL,0
    7a9c:	e0 fd       	sbrc	r30, 0
 	call ProcessMusic
    7a9e:	0e 94 78 42 	call	0x84f0	; 0x84f0 <ProcessMusic>
#endif

	ret
    7aa2:	08 95       	ret

00007aa4 <update_sound>:

; Destroys: Z,r0,r1
; cycles: 212+
;****************************
update_sound:
	push r16
    7aa4:	0f 93       	push	r16
	push r17
    7aa6:	1f 93       	push	r17
	push r18
    7aa8:	2f 93       	push	r18
	push r28
    7aaa:	cf 93       	push	r28
	push r29
    7aac:	df 93       	push	r29

	mov r18,ZL
    7aae:	2e 2f       	mov	r18, r30

	;channel 1 
	lds r16,tr1_step_lo
    7ab0:	00 91 d1 0c 	lds	r16, 0x0CD1
	lds r17,tr1_pos_frac
    7ab4:	10 91 d3 0c 	lds	r17, 0x0CD3
	add	r17,r16	;add step to fractional part of sample pos
    7ab8:	10 0f       	add	r17, r16
	lds r16,tr1_step_hi	
    7aba:	00 91 d2 0c 	lds	r16, 0x0CD2
	lds ZL,tr1_pos_lo
    7abe:	e0 91 d4 0c 	lds	r30, 0x0CD4
	lds ZH,tr1_pos_hi 
    7ac2:	f0 91 d5 0c 	lds	r31, 0x0CD5
	adc ZL,r16	;add step to low byte of sample pos
    7ac6:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    7ac8:	04 91       	lpm	r16, Z
	sts tr1_pos_lo,ZL
    7aca:	e0 93 d4 0c 	sts	0x0CD4, r30
	sts tr1_pos_frac,r17
    7ace:	10 93 d3 0c 	sts	0x0CD3, r17
	lds r17,tr1_vol
    7ad2:	10 91 d0 0c 	lds	r17, 0x0CD0
	mulsu r16,r17;(sample*mixing vol)
    7ad6:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend	
    7ad8:	00 08       	sbc	r0, r0
	mov r28,r1	;set (sample*vol>>8) to mix buffer lsb
    7ada:	c1 2d       	mov	r28, r1
	mov r29,r0	;set mix buffer msb	
    7adc:	d0 2d       	mov	r29, r0
	nop
    7ade:	00 00       	nop

;38
	
	;channel 2
	lds r16,tr2_step_lo
    7ae0:	00 91 d7 0c 	lds	r16, 0x0CD7
	lds r17,tr2_pos_frac
    7ae4:	10 91 d9 0c 	lds	r17, 0x0CD9
	add	r17,r16	;add step to fractional part of sample pos
    7ae8:	10 0f       	add	r17, r16
	lds r16,tr2_step_hi	
    7aea:	00 91 d8 0c 	lds	r16, 0x0CD8
	lds ZL,tr2_pos_lo
    7aee:	e0 91 da 0c 	lds	r30, 0x0CDA
	lds ZH,tr2_pos_hi 
    7af2:	f0 91 db 0c 	lds	r31, 0x0CDB
	adc ZL,r16	;add step to low byte of sample pos
    7af6:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    7af8:	04 91       	lpm	r16, Z
	sts tr2_pos_lo,ZL
    7afa:	e0 93 da 0c 	sts	0x0CDA, r30
	sts tr2_pos_frac,r17
    7afe:	10 93 d9 0c 	sts	0x0CD9, r17
	lds r17,tr2_vol
    7b02:	10 91 d6 0c 	lds	r17, 0x0CD6

	;*** Video sync update ***
	sbrc r18,0								;pre-eq/post-eq sync
    7b06:	20 fd       	sbrc	r18, 0
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    7b08:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,0								
    7b0a:	20 ff       	sbrs	r18, 0
	rjmp .
    7b0c:	00 c0       	rjmp	.+0      	; 0x7b0e <update_sound+0x6a>
	;*************************

	mulsu r16,r17;(sample*mixing vol)
    7b0e:	01 03       	mulsu	r16, r17
	clr r0
    7b10:	00 24       	eor	r0, r0
	sbc r0,r0	;sign extend
    7b12:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    7b14:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb		
    7b16:	d0 1d       	adc	r29, r0
;70
	
	;channel 3
	lds r16,tr3_step_lo
    7b18:	00 91 dd 0c 	lds	r16, 0x0CDD
	lds r17,tr3_pos_frac
    7b1c:	10 91 df 0c 	lds	r17, 0x0CDF
	add	r17,r16				;add step to fractional part of sample pos
    7b20:	10 0f       	add	r17, r16
	lds r16,tr3_step_hi	
    7b22:	00 91 de 0c 	lds	r16, 0x0CDE
	lds ZL,tr3_pos_lo
    7b26:	e0 91 e0 0c 	lds	r30, 0x0CE0
	lds ZH,tr3_pos_hi 
    7b2a:	f0 91 e1 0c 	lds	r31, 0x0CE1
	adc ZL,r16				;add step to low byte of sample pos
    7b2e:	e0 1f       	adc	r30, r16
	lpm	r16,Z				;load sample
    7b30:	04 91       	lpm	r16, Z
	sts tr3_pos_lo,ZL
    7b32:	e0 93 e0 0c 	sts	0x0CE0, r30
	sts tr3_pos_frac,r17
    7b36:	10 93 df 0c 	sts	0x0CDF, r17
	lds r17,tr3_vol
    7b3a:	10 91 dc 0c 	lds	r17, 0x0CDC
	mulsu r16,r17			;(sample*mixing vol)
    7b3e:	01 03       	mulsu	r16, r17
	sbc r0,r0				;sign extend
    7b40:	00 08       	sbc	r0, r0
	add r28,r1				;add (sample*vol>>8) to mix buffer lsb
    7b42:	c1 0d       	add	r28, r1
	adc r29,r0				;ajust mix buffer msb
    7b44:	d0 1d       	adc	r29, r0
;97	

	;channel 4 - 7/15 bit LFSR 
	lds r16,tr4_barrel_lo
    7b46:	00 91 e4 0c 	lds	r16, 0x0CE4
	lds r17,tr4_barrel_hi
    7b4a:	10 91 e5 0c 	lds	r17, 0x0CE5
	lds ZL,tr4_divider
    7b4e:	e0 91 e6 0c 	lds	r30, 0x0CE6
	dec ZL	
    7b52:	ea 95       	dec	r30
	brpl ch4_no_shift	
    7b54:	92 f4       	brpl	.+36     	; 0x7b7a <ch4_no_shift>

	lds ZH,tr4_params
    7b56:	f0 91 e3 0c 	lds	r31, 0x0CE3
	mov ZL,ZH
    7b5a:	ef 2f       	mov	r30, r31
	lsr ZL 			;keep bits7:1
    7b5c:	e6 95       	lsr	r30

	mov r0,r16  ;copy barrel shifter
    7b5e:	00 2e       	mov	r0, r16
	lsr r0
    7b60:	06 94       	lsr	r0
	eor r0,r16  ;xor bit0 and bit1
    7b62:	00 26       	eor	r0, r16
	bst r0,0
    7b64:	00 fa       	bst	r0, 0
	lsr r17
    7b66:	16 95       	lsr	r17
	ror r16
    7b68:	07 95       	ror	r16
	bld r17,6	;15 bits mode
    7b6a:	16 f9       	bld	r17, 6
	sbrs ZH,0
    7b6c:	f0 ff       	sbrs	r31, 0
	bld r16,6	;7 bits mode
    7b6e:	06 f9       	bld	r16, 6

	sts tr4_barrel_lo,r16
    7b70:	00 93 e4 0c 	sts	0x0CE4, r16
	sts tr4_barrel_hi,r17
    7b74:	10 93 e5 0c 	sts	0x0CE5, r17

	rjmp ch4_end
    7b78:	03 c0       	rjmp	.+6      	; 0x7b80 <ch4_end>

00007b7a <ch4_no_shift>:
ch4_no_shift:
	;wait loop 21 cycles
	ldi r17,6
    7b7a:	16 e0       	ldi	r17, 0x06	; 6
	dec r17
    7b7c:	1a 95       	dec	r17
	brne .-4
    7b7e:	f1 f7       	brne	.-4      	; 0x7b7c <ch4_no_shift+0x2>

00007b80 <ch4_end>:
	;rjmp .
ch4_end:

	sts tr4_divider,ZL
    7b80:	e0 93 e6 0c 	sts	0x0CE6, r30
	ldi r17,0x80 ;-128
    7b84:	10 e8       	ldi	r17, 0x80	; 128
	
	;*** Video sync update ***
	sbrc r18,1								;hsync
    7b86:	21 fd       	sbrc	r18, 1
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xF0
    7b88:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,1								
    7b8a:	21 ff       	sbrs	r18, 1
	rjmp .
    7b8c:	00 c0       	rjmp	.+0      	; 0x7b8e <ch4_end+0xe>
	;*************************
	
	sbrc r16,0
    7b8e:	00 fd       	sbrc	r16, 0
	ldi r17,0x7f ;+127
    7b90:	1f e7       	ldi	r17, 0x7F	; 127
	
	lds r16,tr4_vol
    7b92:	00 91 e2 0c 	lds	r16, 0x0CE2

	mulsu r17,r16;(sample*mixing vol)
    7b96:	10 03       	mulsu	r17, r16
	sbc r0,r0	;sign extend
    7b98:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    7b9a:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb
    7b9c:	d0 1d       	adc	r29, r0
;142
#if SOUND_CHANNEL_5_ENABLE==1
	;channel 5 PCM -- 45 cycles

	;add fractional part
	lds r16,tr5_pos_frac
    7b9e:	00 91 eb 0c 	lds	r16, 0x0CEB
	lds r17,tr5_step_lo 
    7ba2:	10 91 e9 0c 	lds	r17, 0x0CE9
	add r16,r17
    7ba6:	01 0f       	add	r16, r17
	sts tr5_pos_frac,r16
    7ba8:	00 93 eb 0c 	sts	0x0CEB, r16

	;add lo
	lds ZL,tr5_pos_lo
    7bac:	e0 91 ec 0c 	lds	r30, 0x0CEC
	lds r17,tr5_step_hi 
    7bb0:	10 91 ea 0c 	lds	r17, 0x0CEA
	adc ZL,r17
    7bb4:	e1 1f       	adc	r30, r17

	;add hi
	lds ZH,tr5_pos_hi
    7bb6:	f0 91 ed 0c 	lds	r31, 0x0CED
	ldi r16,0
    7bba:	00 e0       	ldi	r16, 0x00	; 0
	adc ZH,r16
    7bbc:	f0 1f       	adc	r31, r16

	movw r16,ZL
    7bbe:	8f 01       	movw	r16, r30
	lds r0,tr5_loop_len_lo
    7bc0:	00 90 ee 0c 	lds	r0, 0x0CEE
	lds r1,tr5_loop_len_hi	
    7bc4:	10 90 ef 0c 	lds	r1, 0x0CEF
	sub r16,r0
    7bc8:	00 19       	sub	r16, r0
	sbc r17,r1
    7bca:	11 09       	sbc	r17, r1
	lds r0,tr5_loop_end_lo
    7bcc:	00 90 f0 0c 	lds	r0, 0x0CF0
	lds r1,tr5_loop_end_hi
    7bd0:	10 90 f1 0c 	lds	r1, 0x0CF1

	cp ZL,r0
    7bd4:	e0 15       	cp	r30, r0
	cpc ZH,r1
    7bd6:	f1 05       	cpc	r31, r1
	brlo .+2
    7bd8:	08 f0       	brcs	.+2      	; 0x7bdc <ch4_end+0x5c>
	movw ZL,r16
    7bda:	f8 01       	movw	r30, r16

	sts tr5_pos_lo,ZL
    7bdc:	e0 93 ec 0c 	sts	0x0CEC, r30
	sts tr5_pos_hi,ZH
    7be0:	f0 93 ed 0c 	sts	0x0CED, r31

	lpm	r16,Z	;load sample
    7be4:	04 91       	lpm	r16, Z
	lds r17,tr5_vol
    7be6:	10 91 e8 0c 	lds	r17, 0x0CE8

	mulsu r16,r17;(sample*mixing vol)
    7bea:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend
    7bec:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    7bee:	c1 0d       	add	r28, r1
	adc r29,r0	;adjust mix buffer msb	
    7bf0:	d0 1d       	adc	r29, r0
#endif
	
	;final processing

	;clip
	clr r0
    7bf2:	00 24       	eor	r0, r0
	cpi r28,128	;> 127?
    7bf4:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0	
    7bf6:	d0 05       	cpc	r29, r0
	brlt .+2
    7bf8:	0c f0       	brlt	.+2      	; 0x7bfc <ch4_end+0x7c>
	ldi r28,127
    7bfa:	cf e7       	ldi	r28, 0x7F	; 127
	
	dec r0
    7bfc:	0a 94       	dec	r0
	cpi r28,-128; <-128?
    7bfe:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0xff
    7c00:	d0 05       	cpc	r29, r0
	brge .+2
    7c02:	0c f4       	brge	.+2      	; 0x7c06 <ch4_end+0x86>
	ldi r28,-128
    7c04:	c0 e8       	ldi	r28, 0x80	; 128

	subi r28,128	;convert to unsigned		
    7c06:	c0 58       	subi	r28, 0x80	; 128
	sts _SFR_MEM_ADDR(OCR2A),r28 ;output sound byte
    7c08:	c0 93 b3 00 	sts	0x00B3, r28

00007c0c <update_sound_end>:
#endif


update_sound_end:

	pop r29
    7c0c:	df 91       	pop	r29
	pop r28
    7c0e:	cf 91       	pop	r28
	pop r18
    7c10:	2f 91       	pop	r18
	pop r17
    7c12:	1f 91       	pop	r17
	pop r16
    7c14:	0f 91       	pop	r16
	
	ret
    7c16:	08 95       	ret

00007c18 <SetSpritesTileTable>:
; C-callable
; r25:r24=pointer to sprites pixel data.
;*****************************
.section .text.SetSpritesTileTable
SetSpritesTileTable:
	sts sprites_tile_banks,r24
    7c18:	80 93 a4 0c 	sts	0x0CA4, r24
	sts sprites_tile_banks+1,r25
    7c1c:	90 93 a5 0c 	sts	0x0CA5, r25
	ret
    7c20:	08 95       	ret

00007c22 <ClearVram>:
; C-callable
;************************************
.section .text.ClearVram
ClearVram:
	//init vram		
	ldi r30,lo8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    7c22:	e0 e0       	ldi	r30, 0x00	; 0
	ldi r31,hi8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    7c24:	f4 e0       	ldi	r31, 0x04	; 4

	ldi XL,lo8(vram)
    7c26:	a0 e0       	ldi	r26, 0x00	; 0
	ldi XH,hi8(vram)
    7c28:	b1 e0       	ldi	r27, 0x01	; 1

	ldi r22,RAM_TILES_COUNT
    7c2a:	6c e1       	ldi	r22, 0x1C	; 28

00007c2c <fill_vram_loop>:

fill_vram_loop:
	st X+,r22
    7c2c:	6d 93       	st	X+, r22
	sbiw r30,1
    7c2e:	31 97       	sbiw	r30, 0x01	; 1
	brne fill_vram_loop
    7c30:	e9 f7       	brne	.-6      	; 0x7c2c <fill_vram_loop>

	clr r1
    7c32:	11 24       	eor	r1, r1

	ret
    7c34:	08 95       	ret

00007c36 <SetTile>:
.section .text.SetTile
SetTile:
#if SCROLLING == 1
	;index formula is vram[((y>>3)*256)+8x+(y&7)]
	
	andi r24,0x1f
    7c36:	8f 71       	andi	r24, 0x1F	; 31
	mov r23,r22
    7c38:	76 2f       	mov	r23, r22
	lsr r22
    7c3a:	66 95       	lsr	r22
	lsr r22
    7c3c:	66 95       	lsr	r22
	lsr r22			;y>>3
    7c3e:	66 95       	lsr	r22
	ldi r18,8		
    7c40:	28 e0       	ldi	r18, 0x08	; 8
	mul r24,r18		;x*8
    7c42:	82 9f       	mul	r24, r18
	movw XL,r0
    7c44:	d0 01       	movw	r26, r0
	subi XL,lo8(-(vram))
    7c46:	a0 50       	subi	r26, 0x00	; 0
	sbci XH,hi8(-(vram))
    7c48:	bf 4f       	sbci	r27, 0xFF	; 255
	add XH,r22		;vram+((y>>3)*256)
    7c4a:	b6 0f       	add	r27, r22
	andi r23,7		;y&7	
    7c4c:	77 70       	andi	r23, 0x07	; 7
	add XL,r23
    7c4e:	a7 0f       	add	r26, r23
						
	subi r20,~(RAM_TILES_COUNT-1)	
    7c50:	44 5e       	subi	r20, 0xE4	; 228
	st X,r20
    7c52:	4c 93       	st	X, r20

	clr r1
    7c54:	11 24       	eor	r1, r1

	ret
    7c56:	08 95       	ret

00007c58 <SetTileTable>:
; C-callable
; r25:r24=pointer to tiles data
;************************************
.section .text.SetTileTable
SetTileTable:
	sts tile_table_lo,r24
    7c58:	80 93 ac 0c 	sts	0x0CAC, r24
	sts tile_table_hi,r25	
    7c5c:	90 93 ad 0c 	sts	0x0CAD, r25
	ret
    7c60:	08 95       	ret

00007c62 <GetVsyncFlag>:
;
; C-callable
;************************************
.section .text.GetVsyncFlag
GetVsyncFlag:
	lds r24,sync_flags
    7c62:	80 91 b8 0c 	lds	r24, 0x0CB8
	andi r24,SYNC_FLAG_VSYNC
    7c66:	81 70       	andi	r24, 0x01	; 1
	ret
    7c68:	08 95       	ret

00007c6a <ClearVsyncFlag>:
; 
; C-callable
;*****************************
.section .text.ClearVsyncFlag
ClearVsyncFlag:
	lds r18,sync_flags
    7c6a:	20 91 b8 0c 	lds	r18, 0x0CB8
	andi r18,~SYNC_FLAG_VSYNC
    7c6e:	2e 7f       	andi	r18, 0xFE	; 254
	sts sync_flags,r18
    7c70:	20 93 b8 0c 	sts	0x0CB8, r18
	ret
    7c74:	08 95       	ret

00007c76 <ReadJoypad>:
; r24=joypad No (0 or 1)
; returns: (int) r25:r24
;*****************************
.section .text.ReadJoypad
ReadJoypad:	
	tst r24
    7c76:	88 23       	and	r24, r24
	brne rj_p2
    7c78:	29 f4       	brne	.+10     	; 0x7c84 <rj_p2>
		
	lds r24,joypad1_status_lo
    7c7a:	80 91 bf 0c 	lds	r24, 0x0CBF
	lds r25,joypad1_status_lo+1
    7c7e:	90 91 c0 0c 	lds	r25, 0x0CC0
	ret
    7c82:	08 95       	ret

00007c84 <rj_p2>:
rj_p2:
	lds r24,joypad2_status_lo
    7c84:	80 91 c3 0c 	lds	r24, 0x0CC3
	lds r25,joypad2_status_lo+1	
    7c88:	90 91 c4 0c 	lds	r25, 0x0CC4

	ret
    7c8c:	08 95       	ret

00007c8e <WaitUs>:
; r25:r24 - us to wait
; returns: void
;****************************
.section .text.WaitUs
WaitUs:	
	ldi r23,8
    7c8e:	78 e0       	ldi	r23, 0x08	; 8
	dec 23
    7c90:	7a 95       	dec	r23
	brne .-4 ;~1 us
    7c92:	f1 f7       	brne	.-4      	; 0x7c90 <WaitUs+0x2>
	nop
    7c94:	00 00       	nop
	sbiw r24,1
    7c96:	01 97       	sbiw	r24, 0x01	; 1
	brne WaitUs
    7c98:	d1 f7       	brne	.-12     	; 0x7c8e <WaitUs>

	ret
    7c9a:	08 95       	ret

00007c9c <WriteEeprom>:
;****************************

.section .text.WriteEeprom
WriteEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    7c9c:	f9 99       	sbic	0x1f, 1	; 31
   rjmp WriteEeprom
    7c9e:	fe cf       	rjmp	.-4      	; 0x7c9c <WriteEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    7ca0:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    7ca2:	81 bd       	out	0x21, r24	; 33
   ; Write data (r22) to Data Register
   out _SFR_IO_ADDR(EEDR),r22
    7ca4:	60 bd       	out	0x20, r22	; 32
   cli
    7ca6:	f8 94       	cli
   ; Write logical one to EEMPE
   sbi _SFR_IO_ADDR(EECR),EEMPE
    7ca8:	fa 9a       	sbi	0x1f, 2	; 31
   ; Start eeprom write by setting EEPE
   sbi _SFR_IO_ADDR(EECR),EEPE
    7caa:	f9 9a       	sbi	0x1f, 1	; 31
   sei
    7cac:	78 94       	sei
   ret
    7cae:	08 95       	ret

00007cb0 <ReadEeprom>:
; r24 - value read
;****************************
.section .text.ReadEeprom
ReadEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    7cb0:	f9 99       	sbic	0x1f, 1	; 31
   rjmp ReadEeprom
    7cb2:	fe cf       	rjmp	.-4      	; 0x7cb0 <ReadEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    7cb4:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    7cb6:	81 bd       	out	0x21, r24	; 33
   ; Start eeprom read by writing EERE
   cli
    7cb8:	f8 94       	cli
   sbi _SFR_IO_ADDR(EECR),EERE
    7cba:	f8 9a       	sbi	0x1f, 0	; 31
   ; Read data from Data Register
   in r24,_SFR_IO_ADDR(EEDR)
    7cbc:	80 b5       	in	r24, 0x20	; 32
   sei
    7cbe:	78 94       	sei
   ret
    7cc0:	08 95       	ret

00007cc2 <wdt_randomize>:
	.global wdt_randomize
	.section .text.wdt_randomize
	wdt_randomize:

		;set timer 1 full speed count to 0xffff
		ldi r24,0
    7cc2:	80 e0       	ldi	r24, 0x00	; 0
		sts sync_pulse,r24
    7cc4:	80 93 b7 0c 	sts	0x0CB7, r24


		sts _SFR_MEM_ADDR(TIMSK1),r24
    7cc8:	80 93 6f 00 	sts	0x006F, r24
		sts _SFR_MEM_ADDR(OCR1AL),r24
    7ccc:	80 93 88 00 	sts	0x0088, r24
		sts _SFR_MEM_ADDR(OCR1AH),r24
    7cd0:	80 93 89 00 	sts	0x0089, r24
		sts _SFR_MEM_ADDR(OCR1BL),r24
    7cd4:	80 93 8a 00 	sts	0x008A, r24
		sts _SFR_MEM_ADDR(OCR1BH),r24
    7cd8:	80 93 8b 00 	sts	0x008B, r24
		sts _SFR_MEM_ADDR(TCNT1H),r24
    7cdc:	80 93 85 00 	sts	0x0085, r24
		sts _SFR_MEM_ADDR(TCNT1L),r24
    7ce0:	80 93 84 00 	sts	0x0084, r24
		
		sts _SFR_MEM_ADDR(TCCR1A),r24	
    7ce4:	80 93 80 00 	sts	0x0080, r24
		ldi 24,(1<<CS10)
    7ce8:	81 e0       	ldi	r24, 0x01	; 1
		sts _SFR_MEM_ADDR(TCCR1B),r24
    7cea:	80 93 81 00 	sts	0x0081, r24

		cli
    7cee:	f8 94       	cli

		;enable watchdog at fastest speed and generate interrupts
		ldi r24,0
    7cf0:	80 e0       	ldi	r24, 0x00	; 0
		sts _SFR_MEM_ADDR(MCUSR),r24	
    7cf2:	80 93 54 00 	sts	0x0054, r24
		ldi r25,(1<<WDIE)+(1<<WDE)+(0<<WDP3)+(0<<WDP2)+(0<<WDP1)+(0<<WDP0)
    7cf6:	98 e4       	ldi	r25, 0x48	; 72
		lds r24,_SFR_MEM_ADDR(WDTCSR)
    7cf8:	80 91 60 00 	lds	r24, 0x0060
		ori r24,(1<<WDCE)+(1<<WDE)
    7cfc:	88 61       	ori	r24, 0x18	; 24
		sts _SFR_MEM_ADDR(WDTCSR),r24
    7cfe:	80 93 60 00 	sts	0x0060, r24
		sts _SFR_MEM_ADDR(WDTCSR),r25
    7d02:	90 93 60 00 	sts	0x0060, r25
	
		sei
    7d06:	78 94       	sei

00007d08 <wait>:

		;generate 8 random cycles
	wait:
		lds r24,sync_pulse ;using the yet unalocated "sync_pulse" as a temp variable
    7d08:	80 91 b7 0c 	lds	r24, 0x0CB7
		cpi r24,8
    7d0c:	88 30       	cpi	r24, 0x08	; 8
		brlo wait
    7d0e:	e0 f3       	brcs	.-8      	; 0x7d08 <wait>

		ret
    7d10:	08 95       	ret

00007d12 <GetTrueRandomSeed>:
	;********************************

	.global GetTrueRandomSeed
	.section .text.GetTrueRandomSeed
	GetTrueRandomSeed:
		lds r24,random_value
    7d12:	80 91 c9 0c 	lds	r24, 0x0CC9
		lds r25,random_value+1
    7d16:	90 91 ca 0c 	lds	r25, 0x0CCA
		ret
    7d1a:	08 95       	ret

00007d1c <__vector_8>:
	;*************************************
	; Watchdog timer interrupt
	;*************************************
	WDT_vect:
		;save flags & status register
		push r16
    7d1c:	0f 93       	push	r16
		push r17
    7d1e:	1f 93       	push	r17

		in r16,_SFR_IO_ADDR(SREG)
    7d20:	0f b7       	in	r16, 0x3f	; 63
		push r16
    7d22:	0f 93       	push	r16

		lds r16,sync_pulse
    7d24:	00 91 b7 0c 	lds	r16, 0x0CB7
		inc r16
    7d28:	03 95       	inc	r16
		sts sync_pulse,r16
    7d2a:	00 93 b7 0c 	sts	0x0CB7, r16

		;XOR succesive timer1 LSB into a int
		sbrc r16,0
    7d2e:	00 fd       	sbrc	r16, 0
		rjmp 1f
    7d30:	08 c0       	rjmp	.+16     	; 0x7d42 <__vector_8+0x26>
		lds r17,random_value
    7d32:	10 91 c9 0c 	lds	r17, 0x0CC9
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    7d36:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    7d3a:	10 27       	eor	r17, r16
		sts random_value,r17
    7d3c:	10 93 c9 0c 	sts	0x0CC9, r17
		rjmp 2f
    7d40:	07 c0       	rjmp	.+14     	; 0x7d50 <__vector_8+0x34>
	1:
		lds r17,random_value+1
    7d42:	10 91 ca 0c 	lds	r17, 0x0CCA
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    7d46:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    7d4a:	10 27       	eor	r17, r16
		sts random_value+1,r17
    7d4c:	10 93 ca 0c 	sts	0x0CCA, r17
	2:

		ldi r16,(1<<WDIE)+(1<<WDE)
    7d50:	08 e4       	ldi	r16, 0x48	; 72
		sts _SFR_MEM_ADDR(WDTCSR),r16
    7d52:	00 93 60 00 	sts	0x0060, r16

		;restore flags
		pop r16
    7d56:	0f 91       	pop	r16
		out _SFR_IO_ADDR(SREG),r16
    7d58:	0f bf       	out	0x3f, r16	; 63
	
		pop r17
    7d5a:	1f 91       	pop	r17
		pop r16
    7d5c:	0f 91       	pop	r16
		reti
    7d5e:	18 95       	reti

00007d60 <SoftReset>:

/**
 * Performs a software reset
 */
void SoftReset(void){        
	wdt_enable(WDTO_15MS);  
    7d60:	98 e0       	ldi	r25, 0x08	; 8
    7d62:	88 e1       	ldi	r24, 0x18	; 24
    7d64:	0f b6       	in	r0, 0x3f	; 63
    7d66:	f8 94       	cli
    7d68:	a8 95       	wdr
    7d6a:	80 93 60 00 	sts	0x0060, r24
    7d6e:	0f be       	out	0x3f, r0	; 63
    7d70:	90 93 60 00 	sts	0x0060, r25
	while(1);
    7d74:	ff cf       	rjmp	.-2      	; 0x7d74 <SoftReset+0x14>

00007d76 <ReadButtons>:
void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
	unsigned char i;

	//latch controllers
	JOYPAD_OUT_PORT|=_BV(JOYPAD_LATCH_PIN);
    7d76:	12 9a       	sbi	0x02, 2	; 2
		}else{
			Wait200ns();
			Wait200ns();
		}	
	#else
		Wait200ns();
    7d78:	c8 95       	lpm
    7d7a:	c8 95       	lpm
		Wait200ns();
    7d7c:	c8 95       	lpm
    7d7e:	c8 95       	lpm
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));
    7d80:	12 98       	cbi	0x02, 2	; 2
    7d82:	40 e1       	ldi	r20, 0x10	; 16
	DisplayLogo();
	
}

void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
    7d84:	80 e0       	ldi	r24, 0x00	; 0
    7d86:	90 e0       	ldi	r25, 0x00	; 0
    7d88:	20 e0       	ldi	r18, 0x00	; 0
    7d8a:	30 e0       	ldi	r19, 0x00	; 0


	//read button states
	for(i=0;i<16;i++){

		p1ButtonsLo>>=1;
    7d8c:	36 95       	lsr	r19
    7d8e:	27 95       	ror	r18
		p2ButtonsLo>>=1;
    7d90:	96 95       	lsr	r25
    7d92:	87 95       	ror	r24
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    7d94:	c8 95       	lpm
    7d96:	c8 95       	lpm
			Wait200ns();
    7d98:	c8 95       	lpm
    7d9a:	c8 95       	lpm
		#endif
			
		//pulse clock pin		
		JOYPAD_OUT_PORT&=~(_BV(JOYPAD_CLOCK_PIN));
    7d9c:	13 98       	cbi	0x02, 3	; 2
		
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) p1ButtonsLo|=(1<<15);
    7d9e:	00 9b       	sbis	0x00, 0	; 0
    7da0:	30 68       	ori	r19, 0x80	; 128
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) p2ButtonsLo|=(1<<15);
    7da2:	01 9b       	sbis	0x00, 1	; 0
    7da4:	90 68       	ori	r25, 0x80	; 128
		
		JOYPAD_OUT_PORT|=_BV(JOYPAD_CLOCK_PIN);
    7da6:	13 9a       	sbi	0x02, 3	; 2
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    7da8:	c8 95       	lpm
    7daa:	c8 95       	lpm
			Wait200ns();
    7dac:	c8 95       	lpm
    7dae:	c8 95       	lpm
    7db0:	41 50       	subi	r20, 0x01	; 1
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));


	//read button states
	for(i=0;i<16;i++){
    7db2:	61 f7       	brne	.-40     	; 0x7d8c <ReadButtons+0x16>
		#endif

	}

	#if JOYSTICK==TYPE_SNES
		joypad1_status_lo=p1ButtonsLo;
    7db4:	30 93 c0 0c 	sts	0x0CC0, r19
    7db8:	20 93 bf 0c 	sts	0x0CBF, r18
		joypad2_status_lo=p2ButtonsLo;
    7dbc:	90 93 c4 0c 	sts	0x0CC4, r25
    7dc0:	80 93 c3 0c 	sts	0x0CC3, r24
	#else
		joypad1_status_lo=p1ButtonsLo&0xff;
		joypad2_status_lo=p2ButtonsLo&0xff;	
	#endif

	if(joypad1_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B) || joypad2_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B)){
    7dc4:	80 91 bf 0c 	lds	r24, 0x0CBF
    7dc8:	90 91 c0 0c 	lds	r25, 0x0CC0
    7dcc:	0f 97       	sbiw	r24, 0x0f	; 15
    7dce:	31 f0       	breq	.+12     	; 0x7ddc <ReadButtons+0x66>
    7dd0:	80 91 c3 0c 	lds	r24, 0x0CC3
    7dd4:	90 91 c4 0c 	lds	r25, 0x0CC4
    7dd8:	0f 97       	sbiw	r24, 0x0f	; 15
    7dda:	11 f4       	brne	.+4      	; 0x7de0 <ReadButtons+0x6a>
		SoftReset();
    7ddc:	0e 94 b0 3e 	call	0x7d60	; 0x7d60 <SoftReset>
    7de0:	08 95       	ret

00007de2 <ReadControllers>:
 * program when CONTROLLERS_VSYNC_READ==0.
*/
void ReadControllers(){

	//Detect if devices are connected.
	joypadsConnectionStatus=0;
    7de2:	10 92 f8 0c 	sts	0x0CF8, r1
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) joypadsConnectionStatus|=1;
    7de6:	00 99       	sbic	0x00, 0	; 0
    7de8:	03 c0       	rjmp	.+6      	; 0x7df0 <ReadControllers+0xe>
    7dea:	81 e0       	ldi	r24, 0x01	; 1
    7dec:	80 93 f8 0c 	sts	0x0CF8, r24
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) joypadsConnectionStatus|=2;
    7df0:	01 99       	sbic	0x00, 1	; 0
    7df2:	05 c0       	rjmp	.+10     	; 0x7dfe <ReadControllers+0x1c>
    7df4:	80 91 f8 0c 	lds	r24, 0x0CF8
    7df8:	82 60       	ori	r24, 0x02	; 2
    7dfa:	80 93 f8 0c 	sts	0x0CF8, r24
			
	//read the standard buttons
	ReadButtons();
    7dfe:	0c 94 bb 3e 	jmp	0x7d76	; 0x7d76 <ReadButtons>

00007e02 <FormatEeprom>:
	return resp;
}

	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {
    7e02:	cf 93       	push	r28
    7e04:	df 93       	push	r29
    7e06:	c0 e0       	ldi	r28, 0x00	; 0
    7e08:	d0 e0       	ldi	r29, 0x00	; 0
    7e0a:	fe 01       	movw	r30, r28
    7e0c:	ee 54       	subi	r30, 0x4E	; 78
    7e0e:	ff 4f       	sbci	r31, 0xFF	; 255

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
    7e10:	64 91       	lpm	r22, Z
    7e12:	ce 01       	movw	r24, r28
    7e14:	0e 94 4e 3e 	call	0x7c9c	; 0x7c9c <WriteEeprom>
    7e18:	21 96       	adiw	r28, 0x01	; 1
	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
    7e1a:	c0 32       	cpi	r28, 0x20	; 32
    7e1c:	d1 05       	cpc	r29, r1
    7e1e:	a9 f7       	brne	.-22     	; 0x7e0a <FormatEeprom+0x8>
    7e20:	c0 e2       	ldi	r28, 0x20	; 32
    7e22:	d0 e0       	ldi	r29, 0x00	; 0
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
    7e24:	6f ef       	ldi	r22, 0xFF	; 255
    7e26:	ce 01       	movw	r24, r28
    7e28:	0e 94 4e 3e 	call	0x7c9c	; 0x7c9c <WriteEeprom>
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
    7e2c:	6f ef       	ldi	r22, 0xFF	; 255
    7e2e:	ce 01       	movw	r24, r28
    7e30:	01 96       	adiw	r24, 0x01	; 1
    7e32:	0e 94 4e 3e 	call	0x7c9c	; 0x7c9c <WriteEeprom>
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
    7e36:	a0 96       	adiw	r28, 0x20	; 32
    7e38:	c1 15       	cp	r28, r1
    7e3a:	88 e0       	ldi	r24, 0x08	; 8
    7e3c:	d8 07       	cpc	r29, r24
    7e3e:	91 f7       	brne	.-28     	; 0x7e24 <FormatEeprom+0x22>
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
   }
   
}
    7e40:	df 91       	pop	r29
    7e42:	cf 91       	pop	r28
    7e44:	08 95       	ret

00007e46 <isEepromFormatted>:
	  }
   }
}
	
//returns true if the EEPROM has been setup to work with the kernel.
bool isEepromFormatted(){
    7e46:	cf 93       	push	r28
	unsigned id;
	id=ReadEeprom(0)+(ReadEeprom(1)<<8);
    7e48:	80 e0       	ldi	r24, 0x00	; 0
    7e4a:	90 e0       	ldi	r25, 0x00	; 0
    7e4c:	0e 94 58 3e 	call	0x7cb0	; 0x7cb0 <ReadEeprom>
    7e50:	c8 2f       	mov	r28, r24
    7e52:	81 e0       	ldi	r24, 0x01	; 1
    7e54:	90 e0       	ldi	r25, 0x00	; 0
    7e56:	0e 94 58 3e 	call	0x7cb0	; 0x7cb0 <ReadEeprom>
    7e5a:	28 2f       	mov	r18, r24
    7e5c:	30 e0       	ldi	r19, 0x00	; 0
    7e5e:	32 2f       	mov	r19, r18
    7e60:	22 27       	eor	r18, r18
    7e62:	2c 0f       	add	r18, r28
    7e64:	31 1d       	adc	r19, r1
	return (id==EEPROM_SIGNATURE);
    7e66:	81 e0       	ldi	r24, 0x01	; 1
    7e68:	2a 35       	cpi	r18, 0x5A	; 90
    7e6a:	35 45       	sbci	r19, 0x55	; 85
    7e6c:	09 f0       	breq	.+2      	; 0x7e70 <isEepromFormatted+0x2a>
    7e6e:	80 e0       	ldi	r24, 0x00	; 0
}
    7e70:	cf 91       	pop	r28
    7e72:	08 95       	ret

00007e74 <EepromBlockExists>:
 * @return
 *  0x00 = Success, Block exists.
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK.
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND.
 */
char EepromBlockExists(unsigned int blockId, u16* eepromAddr, u8* nextFreeBlockId){
    7e74:	8f 92       	push	r8
    7e76:	9f 92       	push	r9
    7e78:	af 92       	push	r10
    7e7a:	bf 92       	push	r11
    7e7c:	cf 92       	push	r12
    7e7e:	df 92       	push	r13
    7e80:	ef 92       	push	r14
    7e82:	ff 92       	push	r15
    7e84:	0f 93       	push	r16
    7e86:	1f 93       	push	r17
    7e88:	cf 93       	push	r28
    7e8a:	df 93       	push	r29
	u8 nextFreeBlock=0;
	u8 result=EEPROM_ERROR_BLOCK_NOT_FOUND;
	u16 id;
	*eepromAddr=0;
    7e8c:	fb 01       	movw	r30, r22
    7e8e:	11 82       	std	Z+1, r1	; 0x01
    7e90:	10 82       	st	Z, r1

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    7e92:	8f 3f       	cpi	r24, 0xFF	; 255
    7e94:	ff ef       	ldi	r31, 0xFF	; 255
    7e96:	9f 07       	cpc	r25, r31
    7e98:	89 f1       	breq	.+98     	; 0x7efc <EepromBlockExists+0x88>
    7e9a:	6a 01       	movw	r12, r20
    7e9c:	8b 01       	movw	r16, r22
    7e9e:	7c 01       	movw	r14, r24
    7ea0:	a1 2c       	mov	r10, r1
    7ea2:	b1 2c       	mov	r11, r1
    7ea4:	c0 e0       	ldi	r28, 0x00	; 0
    7ea6:	d3 e0       	ldi	r29, 0x03	; 3
    7ea8:	91 2c       	mov	r9, r1
		
	//scan all blocks and get the memory adress of that block and the next free block
	for(u8 i=0;i<EEPROM_MAX_BLOCKS;i++){
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
    7eaa:	c5 01       	movw	r24, r10
    7eac:	0e 94 58 3e 	call	0x7cb0	; 0x7cb0 <ReadEeprom>
    7eb0:	88 2e       	mov	r8, r24
    7eb2:	c5 01       	movw	r24, r10
    7eb4:	01 96       	adiw	r24, 0x01	; 1
    7eb6:	0e 94 58 3e 	call	0x7cb0	; 0x7cb0 <ReadEeprom>
    7eba:	28 2f       	mov	r18, r24
    7ebc:	30 e0       	ldi	r19, 0x00	; 0
    7ebe:	32 2f       	mov	r19, r18
    7ec0:	22 27       	eor	r18, r18
    7ec2:	28 0d       	add	r18, r8
    7ec4:	31 1d       	adc	r19, r1
		
		if(id==blockId){
    7ec6:	2e 15       	cp	r18, r14
    7ec8:	3f 05       	cpc	r19, r15
    7eca:	29 f4       	brne	.+10     	; 0x7ed6 <EepromBlockExists+0x62>
			*eepromAddr=(i*EEPROM_BLOCK_SIZE);
    7ecc:	f8 01       	movw	r30, r16
    7ece:	b1 82       	std	Z+1, r11	; 0x01
    7ed0:	a0 82       	st	Z, r10
			result=EEPROM_OK;
    7ed2:	d0 e0       	ldi	r29, 0x00	; 0
    7ed4:	0b c0       	rjmp	.+22     	; 0x7eec <EepromBlockExists+0x78>
		}
		
		if(id==0xffff && nextFreeBlock==0){
    7ed6:	2f 3f       	cpi	r18, 0xFF	; 255
    7ed8:	3f 4f       	sbci	r19, 0xFF	; 255
    7eda:	41 f4       	brne	.+16     	; 0x7eec <EepromBlockExists+0x78>
    7edc:	91 10       	cpse	r9, r1
    7ede:	06 c0       	rjmp	.+12     	; 0x7eec <EepromBlockExists+0x78>
			nextFreeBlock=i;
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
    7ee0:	c1 14       	cp	r12, r1
    7ee2:	d1 04       	cpc	r13, r1
    7ee4:	11 f0       	breq	.+4      	; 0x7eea <EepromBlockExists+0x76>
    7ee6:	f6 01       	movw	r30, r12
    7ee8:	c0 83       	st	Z, r28
    7eea:	9c 2e       	mov	r9, r28
	*eepromAddr=0;

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
		
	//scan all blocks and get the memory adress of that block and the next free block
	for(u8 i=0;i<EEPROM_MAX_BLOCKS;i++){
    7eec:	cf 5f       	subi	r28, 0xFF	; 255
    7eee:	f0 e2       	ldi	r31, 0x20	; 32
    7ef0:	af 0e       	add	r10, r31
    7ef2:	b1 1c       	adc	r11, r1
    7ef4:	c0 34       	cpi	r28, 0x40	; 64
    7ef6:	c9 f6       	brne	.-78     	; 0x7eaa <EepromBlockExists+0x36>
			nextFreeBlock=i;
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
		}
	}

	return result;
    7ef8:	8d 2f       	mov	r24, r29
    7efa:	01 c0       	rjmp	.+2      	; 0x7efe <EepromBlockExists+0x8a>
	u8 nextFreeBlock=0;
	u8 result=EEPROM_ERROR_BLOCK_NOT_FOUND;
	u16 id;
	*eepromAddr=0;

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    7efc:	81 e0       	ldi	r24, 0x01	; 1
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
		}
	}

	return result;
}
    7efe:	df 91       	pop	r29
    7f00:	cf 91       	pop	r28
    7f02:	1f 91       	pop	r17
    7f04:	0f 91       	pop	r16
    7f06:	ff 90       	pop	r15
    7f08:	ef 90       	pop	r14
    7f0a:	df 90       	pop	r13
    7f0c:	cf 90       	pop	r12
    7f0e:	bf 90       	pop	r11
    7f10:	af 90       	pop	r10
    7f12:	9f 90       	pop	r9
    7f14:	8f 90       	pop	r8
    7f16:	08 95       	ret

00007f18 <EepromWriteBlock>:
 * Returns:
 *  0x00 = Success
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x02 = EEPROM_ERROR_FULL
 */
char EepromWriteBlock(struct EepromBlockStruct *block){
    7f18:	ef 92       	push	r14
    7f1a:	ff 92       	push	r15
    7f1c:	0f 93       	push	r16
    7f1e:	1f 93       	push	r17
    7f20:	cf 93       	push	r28
    7f22:	df 93       	push	r29
    7f24:	00 d0       	rcall	.+0      	; 0x7f26 <EepromWriteBlock+0xe>
    7f26:	1f 92       	push	r1
    7f28:	cd b7       	in	r28, 0x3d	; 61
    7f2a:	de b7       	in	r29, 0x3e	; 62
    7f2c:	8c 01       	movw	r16, r24
	u16 eepromAddr=0;
    7f2e:	1a 82       	std	Y+2, r1	; 0x02
    7f30:	19 82       	std	Y+1, r1	; 0x01
	u8 *srcPtr=(unsigned char *)block,res,nextFreeBlock=0;
    7f32:	1b 82       	std	Y+3, r1	; 0x03

	res=EepromBlockExists(block->id,&eepromAddr,&nextFreeBlock);
    7f34:	ae 01       	movw	r20, r28
    7f36:	4d 5f       	subi	r20, 0xFD	; 253
    7f38:	5f 4f       	sbci	r21, 0xFF	; 255
    7f3a:	be 01       	movw	r22, r28
    7f3c:	6f 5f       	subi	r22, 0xFF	; 255
    7f3e:	7f 4f       	sbci	r23, 0xFF	; 255
    7f40:	fc 01       	movw	r30, r24
    7f42:	80 81       	ld	r24, Z
    7f44:	91 81       	ldd	r25, Z+1	; 0x01
    7f46:	0e 94 3a 3f 	call	0x7e74	; 0x7e74 <EepromBlockExists>
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;
    7f4a:	88 23       	and	r24, r24
    7f4c:	11 f0       	breq	.+4      	; 0x7f52 <EepromWriteBlock+0x3a>
    7f4e:	83 30       	cpi	r24, 0x03	; 3
    7f50:	19 f5       	brne	.+70     	; 0x7f98 <EepromWriteBlock+0x80>

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    7f52:	89 81       	ldd	r24, Y+1	; 0x01
    7f54:	9a 81       	ldd	r25, Y+2	; 0x02
    7f56:	89 2b       	or	r24, r25
    7f58:	49 f4       	brne	.+18     	; 0x7f6c <EepromWriteBlock+0x54>
    7f5a:	8b 81       	ldd	r24, Y+3	; 0x03
    7f5c:	88 23       	and	r24, r24
    7f5e:	d9 f0       	breq	.+54     	; 0x7f96 <EepromWriteBlock+0x7e>
	if(eepromAddr==0 && nextFreeBlock!=0) eepromAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;
    7f60:	f0 e2       	ldi	r31, 0x20	; 32
    7f62:	8f 9f       	mul	r24, r31
    7f64:	c0 01       	movw	r24, r0
    7f66:	11 24       	eor	r1, r1
    7f68:	9a 83       	std	Y+2, r25	; 0x02
    7f6a:	89 83       	std	Y+1, r24	; 0x01
    7f6c:	78 01       	movw	r14, r16
    7f6e:	20 e2       	ldi	r18, 0x20	; 32
    7f70:	e2 0e       	add	r14, r18
    7f72:	f1 1c       	adc	r15, r1

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
		WriteEeprom(eepromAddr++,*srcPtr);
    7f74:	f8 01       	movw	r30, r16
    7f76:	61 91       	ld	r22, Z+
    7f78:	8f 01       	movw	r16, r30
    7f7a:	89 81       	ldd	r24, Y+1	; 0x01
    7f7c:	9a 81       	ldd	r25, Y+2	; 0x02
    7f7e:	9c 01       	movw	r18, r24
    7f80:	2f 5f       	subi	r18, 0xFF	; 255
    7f82:	3f 4f       	sbci	r19, 0xFF	; 255
    7f84:	3a 83       	std	Y+2, r19	; 0x02
    7f86:	29 83       	std	Y+1, r18	; 0x01
    7f88:	0e 94 4e 3e 	call	0x7c9c	; 0x7c9c <WriteEeprom>
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(eepromAddr==0 && nextFreeBlock!=0) eepromAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
    7f8c:	0e 15       	cp	r16, r14
    7f8e:	1f 05       	cpc	r17, r15
    7f90:	89 f7       	brne	.-30     	; 0x7f74 <EepromWriteBlock+0x5c>
		WriteEeprom(eepromAddr++,*srcPtr);
		srcPtr++;	
	}
	
	return 0;
    7f92:	80 e0       	ldi	r24, 0x00	; 0
    7f94:	01 c0       	rjmp	.+2      	; 0x7f98 <EepromWriteBlock+0x80>
	u8 *srcPtr=(unsigned char *)block,res,nextFreeBlock=0;

	res=EepromBlockExists(block->id,&eepromAddr,&nextFreeBlock);
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    7f96:	82 e0       	ldi	r24, 0x02	; 2
		WriteEeprom(eepromAddr++,*srcPtr);
		srcPtr++;	
	}
	
	return 0;
}
    7f98:	0f 90       	pop	r0
    7f9a:	0f 90       	pop	r0
    7f9c:	0f 90       	pop	r0
    7f9e:	df 91       	pop	r29
    7fa0:	cf 91       	pop	r28
    7fa2:	1f 91       	pop	r17
    7fa4:	0f 91       	pop	r16
    7fa6:	ff 90       	pop	r15
    7fa8:	ef 90       	pop	r14
    7faa:	08 95       	ret

00007fac <EepromReadBlock>:
 * Returns: 
 *  0x00 = Success
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 */
char EepromReadBlock(unsigned int blockId,struct EepromBlockStruct *block){	
    7fac:	cf 92       	push	r12
    7fae:	df 92       	push	r13
    7fb0:	ff 92       	push	r15
    7fb2:	0f 93       	push	r16
    7fb4:	1f 93       	push	r17
    7fb6:	cf 93       	push	r28
    7fb8:	df 93       	push	r29
    7fba:	00 d0       	rcall	.+0      	; 0x7fbc <EepromReadBlock+0x10>
    7fbc:	cd b7       	in	r28, 0x3d	; 61
    7fbe:	de b7       	in	r29, 0x3e	; 62
    7fc0:	8b 01       	movw	r16, r22
	u16 eepromAddr;
	u8 *blockPtr=(unsigned char *)block;

	u8 res=EepromBlockExists(blockId,&eepromAddr,NULL);
    7fc2:	40 e0       	ldi	r20, 0x00	; 0
    7fc4:	50 e0       	ldi	r21, 0x00	; 0
    7fc6:	be 01       	movw	r22, r28
    7fc8:	6f 5f       	subi	r22, 0xFF	; 255
    7fca:	7f 4f       	sbci	r23, 0xFF	; 255
    7fcc:	0e 94 3a 3f 	call	0x7e74	; 0x7e74 <EepromBlockExists>
    7fd0:	f8 2e       	mov	r15, r24
	if(res!=0) return res;
    7fd2:	81 11       	cpse	r24, r1
    7fd4:	13 c0       	rjmp	.+38     	; 0x7ffc <EepromReadBlock+0x50>
    7fd6:	68 01       	movw	r12, r16
    7fd8:	80 e2       	ldi	r24, 0x20	; 32
    7fda:	c8 0e       	add	r12, r24
    7fdc:	d1 1c       	adc	r13, r1

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
		*blockPtr=ReadEeprom(eepromAddr++);
    7fde:	89 81       	ldd	r24, Y+1	; 0x01
    7fe0:	9a 81       	ldd	r25, Y+2	; 0x02
    7fe2:	9c 01       	movw	r18, r24
    7fe4:	2f 5f       	subi	r18, 0xFF	; 255
    7fe6:	3f 4f       	sbci	r19, 0xFF	; 255
    7fe8:	3a 83       	std	Y+2, r19	; 0x02
    7fea:	29 83       	std	Y+1, r18	; 0x01
    7fec:	0e 94 58 3e 	call	0x7cb0	; 0x7cb0 <ReadEeprom>
    7ff0:	f8 01       	movw	r30, r16
    7ff2:	81 93       	st	Z+, r24
    7ff4:	8f 01       	movw	r16, r30
	u8 *blockPtr=(unsigned char *)block;

	u8 res=EepromBlockExists(blockId,&eepromAddr,NULL);
	if(res!=0) return res;

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
    7ff6:	ec 15       	cp	r30, r12
    7ff8:	fd 05       	cpc	r31, r13
    7ffa:	89 f7       	brne	.-30     	; 0x7fde <EepromReadBlock+0x32>
		*blockPtr=ReadEeprom(eepromAddr++);
		blockPtr++;	
	}
	
	return EEPROM_OK;
}
    7ffc:	8f 2d       	mov	r24, r15
    7ffe:	0f 90       	pop	r0
    8000:	0f 90       	pop	r0
    8002:	df 91       	pop	r29
    8004:	cf 91       	pop	r28
    8006:	1f 91       	pop	r17
    8008:	0f 91       	pop	r16
    800a:	ff 90       	pop	r15
    800c:	df 90       	pop	r13
    800e:	cf 90       	pop	r12
    8010:	08 95       	ret

00008012 <GetPrngNumber>:
 * Input: Zero=return the next random value. Non-zero=Sets the seed value.
 */
u16 GetPrngNumber(u16 seed){
	static u16 prng_state;
  	
	if(seed!=0) prng_state=seed;
    8012:	00 97       	sbiw	r24, 0x00	; 0
    8014:	21 f0       	breq	.+8      	; 0x801e <GetPrngNumber+0xc>
    8016:	90 93 cd 0c 	sts	0x0CCD, r25
    801a:	80 93 cc 0c 	sts	0x0CCC, r24
	
	u16 bit  = ((prng_state >> 0) ^ (prng_state >> 2) ^ (prng_state >> 3) ^ (prng_state >> 5) ) & 1;
    801e:	20 91 cc 0c 	lds	r18, 0x0CCC
    8022:	30 91 cd 0c 	lds	r19, 0x0CCD
    8026:	a9 01       	movw	r20, r18
    8028:	56 95       	lsr	r21
    802a:	47 95       	ror	r20
    802c:	56 95       	lsr	r21
    802e:	47 95       	ror	r20
    8030:	c9 01       	movw	r24, r18
    8032:	63 e0       	ldi	r22, 0x03	; 3
    8034:	96 95       	lsr	r25
    8036:	87 95       	ror	r24
    8038:	6a 95       	dec	r22
    803a:	e1 f7       	brne	.-8      	; 0x8034 <GetPrngNumber+0x22>
    803c:	84 27       	eor	r24, r20
    803e:	95 27       	eor	r25, r21
    8040:	82 27       	eor	r24, r18
    8042:	93 27       	eor	r25, r19
    8044:	a9 01       	movw	r20, r18
    8046:	75 e0       	ldi	r23, 0x05	; 5
    8048:	56 95       	lsr	r21
    804a:	47 95       	ror	r20
    804c:	7a 95       	dec	r23
    804e:	e1 f7       	brne	.-8      	; 0x8048 <GetPrngNumber+0x36>
    8050:	84 27       	eor	r24, r20
    8052:	95 27       	eor	r25, r21
	prng_state =  (prng_state >> 1) | (bit << 15);
    8054:	99 27       	eor	r25, r25
    8056:	86 95       	lsr	r24
    8058:	97 95       	ror	r25
    805a:	88 27       	eor	r24, r24
    805c:	36 95       	lsr	r19
    805e:	27 95       	ror	r18
    8060:	82 2b       	or	r24, r18
    8062:	93 2b       	or	r25, r19
    8064:	90 93 cd 0c 	sts	0x0CCD, r25
    8068:	80 93 cc 0c 	sts	0x0CCC, r24
	return prng_state;   
}
    806c:	08 95       	ret

0000806e <PatchCommand00>:
/*
 * Command 00: Set envelope speed per frame +127/-128, 0=no enveloppe
 * Param:
 */
void PatchCommand00(Track* track, char param){
	track->envelopeStep=param;
    806e:	fc 01       	movw	r30, r24
    8070:	67 87       	std	Z+15, r22	; 0x0f
    8072:	08 95       	ret

00008074 <PatchCommand01>:
 * Param:
 */
void PatchCommand01(Track* track, char param){
	(void)track; //to remove unused warning
	#if MIXER_CHAN4_TYPE == 0
		mixer.channels.type.noise.barrel=0x0101;
    8074:	e0 ed       	ldi	r30, 0xD0	; 208
    8076:	fc e0       	ldi	r31, 0x0C	; 12
    8078:	81 e0       	ldi	r24, 0x01	; 1
    807a:	91 e0       	ldi	r25, 0x01	; 1
    807c:	95 8b       	std	Z+21, r25	; 0x15
    807e:	84 8b       	std	Z+20, r24	; 0x14
		mixer.channels.type.noise.params=param;
    8080:	63 8b       	std	Z+19, r22	; 0x13
    8082:	08 95       	ret

00008084 <PatchCommand05>:
}
/*
 * Command 05: End of note/fx
 * Param:
 */
void PatchCommand05(Track* track, char param){
    8084:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags&=~(TRACK_FLAGS_PLAYING+TRACK_FLAGS_PRIORITY);	//patchPlaying=false,priority=0	
    8086:	90 81       	ld	r25, Z
    8088:	9f 75       	andi	r25, 0x5F	; 95
    808a:	90 83       	st	Z, r25
    808c:	08 95       	ret

0000808e <PatchCommand06>:

/*
 * Command 06: Note hold
 * Param:
 */
void PatchCommand06(Track* track, char param){
    808e:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags|=TRACK_FLAGS_HOLD_ENV; //patchEnvelopeHold=true;
    8090:	90 81       	ld	r25, Z
    8092:	90 64       	ori	r25, 0x40	; 64
    8094:	90 83       	st	Z, r25
    8096:	08 95       	ret

00008098 <PatchCommand07>:
 * Command 07: Set envelope volume
 * Param:
 */

void PatchCommand07(Track* track, char param){
	track->envelopeVol=param;
    8098:	fc 01       	movw	r30, r24
    809a:	66 87       	std	Z+14, r22	; 0x0e
    809c:	08 95       	ret

0000809e <PatchCommand09>:
 * Command 09: Set tremolo level
 * Param:
*/

void PatchCommand09(Track* track, char param){
	track->tremoloLevel=param;
    809e:	fc 01       	movw	r30, r24
    80a0:	62 87       	std	Z+10, r22	; 0x0a
    80a2:	08 95       	ret

000080a4 <PatchCommand10>:
/*
 * Command 10: Set tremolo rate
 * Param:
*/
void PatchCommand10(Track* track, char param){
	track->tremoloRate=param;
    80a4:	fc 01       	movw	r30, r24
    80a6:	63 87       	std	Z+11, r22	; 0x0b
    80a8:	08 95       	ret

000080aa <PatchCommand11>:
/*
 * Command 11: Pitch slide (linear) 
 * Param: (+/-) half steps to slide to
*/

void PatchCommand11(Track* track, char param){
    80aa:	cf 93       	push	r28
    80ac:	df 93       	push	r29
    80ae:	ec 01       	movw	r28, r24
    80b0:	46 2f       	mov	r20, r22
	//slide to note from current note
	s16 currentStep,targetStep,delta;	
	
	currentStep=pgm_read_word(&(steptable[track->note]));
    80b2:	29 81       	ldd	r18, Y+1	; 0x01
    80b4:	30 e0       	ldi	r19, 0x00	; 0
    80b6:	f9 01       	movw	r30, r18
    80b8:	ee 0f       	add	r30, r30
    80ba:	ff 1f       	adc	r31, r31
    80bc:	e8 5f       	subi	r30, 0xF8	; 248
    80be:	f5 47       	sbci	r31, 0x75	; 117
    80c0:	65 91       	lpm	r22, Z+
    80c2:	74 91       	lpm	r23, Z
	targetStep=pgm_read_word(&(steptable[track->note+param]));	
    80c4:	f9 01       	movw	r30, r18
    80c6:	e4 0f       	add	r30, r20
    80c8:	f1 1d       	adc	r31, r1
    80ca:	47 fd       	sbrc	r20, 7
    80cc:	fa 95       	dec	r31
    80ce:	ee 0f       	add	r30, r30
    80d0:	ff 1f       	adc	r31, r31
    80d2:	e8 5f       	subi	r30, 0xF8	; 248
    80d4:	f5 47       	sbci	r31, 0x75	; 117
    80d6:	85 91       	lpm	r24, Z+
    80d8:	94 91       	lpm	r25, Z
	delta=((targetStep-currentStep)/track->slideSpeed);
    80da:	86 1b       	sub	r24, r22
    80dc:	97 0b       	sbc	r25, r23
    80de:	68 85       	ldd	r22, Y+8	; 0x08
    80e0:	70 e0       	ldi	r23, 0x00	; 0
    80e2:	0e 94 6d 6c 	call	0xd8da	; 0xd8da <__divmodhi4>
	if(delta==0)delta++;
    80e6:	61 15       	cp	r22, r1
    80e8:	71 05       	cpc	r23, r1
    80ea:	11 f4       	brne	.+4      	; 0x80f0 <PatchCommand11+0x46>
    80ec:	61 e0       	ldi	r22, 0x01	; 1
    80ee:	70 e0       	ldi	r23, 0x00	; 0

	mixer.channels.all[track->channel].step+=delta;
    80f0:	ea 81       	ldd	r30, Y+2	; 0x02
    80f2:	86 e0       	ldi	r24, 0x06	; 6
    80f4:	e8 9f       	mul	r30, r24
    80f6:	f0 01       	movw	r30, r0
    80f8:	11 24       	eor	r1, r1
    80fa:	e0 53       	subi	r30, 0x30	; 48
    80fc:	f3 4f       	sbci	r31, 0xF3	; 243
    80fe:	81 81       	ldd	r24, Z+1	; 0x01
    8100:	92 81       	ldd	r25, Z+2	; 0x02
    8102:	86 0f       	add	r24, r22
    8104:	97 1f       	adc	r25, r23
    8106:	92 83       	std	Z+2, r25	; 0x02
    8108:	81 83       	std	Z+1, r24	; 0x01
	
	track->slideStep=delta;
    810a:	7e 83       	std	Y+6, r23	; 0x06
    810c:	6d 83       	std	Y+5, r22	; 0x05
	track->flags|=TRACK_FLAGS_SLIDING;
    810e:	88 81       	ld	r24, Y
    8110:	88 60       	ori	r24, 0x08	; 8
    8112:	88 83       	st	Y, r24
	track->slideNote=track->note+param;
    8114:	89 81       	ldd	r24, Y+1	; 0x01
    8116:	48 0f       	add	r20, r24
    8118:	4f 83       	std	Y+7, r20	; 0x07
}
    811a:	df 91       	pop	r29
    811c:	cf 91       	pop	r28
    811e:	08 95       	ret

00008120 <PatchCommand12>:
/*
 * Command 12: Pitch slide speed 
 * Param: slide speed (fixed 4:4)
 */
void PatchCommand12(Track* track, char param){
	track->slideSpeed=param;
    8120:	fc 01       	movw	r30, r24
    8122:	60 87       	std	Z+8, r22	; 0x08
    8124:	08 95       	ret

00008126 <PatchCommand13>:
 *  Command 13: Loop start
 * Description: Defines the start of a loop. Works in conjunction with command 14 (PC_LOOP_END).
 *		 Param: loop count
 */
void PatchCommand13(Track* track, char param){
	track->loopCount=(u8)param;
    8126:	fc 01       	movw	r30, r24
    8128:	64 83       	std	Z+4, r22	; 0x04
    812a:	08 95       	ret

0000812c <PatchCommand02>:
/*
 * Command 02: Set wave
 * Param:
 */
void PatchCommand02(Track* track, char param){
	SetMixerWave(track->channel,param);
    812c:	fc 01       	movw	r30, r24
    812e:	82 81       	ldd	r24, Z+2	; 0x02
    8130:	0c 94 b1 44 	jmp	0x8962	; 0x8962 <SetMixerWave>

00008134 <PatchCommand03>:
}
/*
 * Command 03: Note up * param
 * Param:
 */
void PatchCommand03(Track* track, char param){
    8134:	fc 01       	movw	r30, r24
	track->note+=param;
    8136:	91 81       	ldd	r25, Z+1	; 0x01
    8138:	69 0f       	add	r22, r25
    813a:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(track->channel,track->note);
    813c:	82 81       	ldd	r24, Z+2	; 0x02
    813e:	0c 94 9a 44 	jmp	0x8934	; 0x8934 <SetMixerNote>

00008142 <PatchCommand04>:
}
/*
 * Command 04: Note down * param
 * Param:
 */
void PatchCommand04(Track* track, char param){
    8142:	fc 01       	movw	r30, r24
	track->note-=param;
    8144:	91 81       	ldd	r25, Z+1	; 0x01
    8146:	96 1b       	sub	r25, r22
    8148:	69 2f       	mov	r22, r25
    814a:	91 83       	std	Z+1, r25	; 0x01
	SetMixerNote(track->channel,track->note);
    814c:	82 81       	ldd	r24, Z+2	; 0x02
    814e:	0c 94 9a 44 	jmp	0x8934	; 0x8934 <SetMixerNote>

00008152 <PatchCommand08>:
/*
 * Command 08: Set Note/Pitch
 * Param:
 */

void PatchCommand08(Track* track, char param){
    8152:	1f 93       	push	r17
    8154:	cf 93       	push	r28
    8156:	df 93       	push	r29
    8158:	ec 01       	movw	r28, r24
    815a:	16 2f       	mov	r17, r22
	SetMixerNote(track->channel,param);
    815c:	8a 81       	ldd	r24, Y+2	; 0x02
    815e:	0e 94 9a 44 	call	0x8934	; 0x8934 <SetMixerNote>
	track->note=param;
    8162:	19 83       	std	Y+1, r17	; 0x01
	track->flags &= ~(TRACK_FLAGS_SLIDING);	
    8164:	88 81       	ld	r24, Y
    8166:	87 7f       	andi	r24, 0xF7	; 247
    8168:	88 83       	st	Y, r24
}
    816a:	df 91       	pop	r29
    816c:	cf 91       	pop	r28
    816e:	1f 91       	pop	r17
    8170:	08 95       	ret

00008172 <PatchCommand14>:
 *					1,PC_NOTE_DOWN,3,
 *					0,PC_LOOP_END,2,
 *					0,PATCH_END  
 *				};
 */
void PatchCommand14(Track* track, char param){
    8172:	dc 01       	movw	r26, r24
	if(track->loopCount>0){
    8174:	14 96       	adiw	r26, 0x04	; 4
    8176:	8c 91       	ld	r24, X
    8178:	14 97       	sbiw	r26, 0x04	; 4
    817a:	88 23       	and	r24, r24
    817c:	19 f1       	breq	.+70     	; 0x81c4 <PatchCommand14+0x52>
    817e:	55 96       	adiw	r26, 0x15	; 21
    8180:	2d 91       	ld	r18, X+
    8182:	3c 91       	ld	r19, X
    8184:	56 97       	sbiw	r26, 0x16	; 22
		//track->patchCommandStreamPos=track->loopStart;
		if(param!=0){
    8186:	66 23       	and	r22, r22
    8188:	79 f0       	breq	.+30     	; 0x81a8 <PatchCommand14+0x36>
			track->patchCommandStreamPos-=((param+1)*3);
    818a:	77 27       	eor	r23, r23
    818c:	67 fd       	sbrc	r22, 7
    818e:	70 95       	com	r23
    8190:	6f 5f       	subi	r22, 0xFF	; 255
    8192:	7f 4f       	sbci	r23, 0xFF	; 255
    8194:	ab 01       	movw	r20, r22
    8196:	44 0f       	add	r20, r20
    8198:	55 1f       	adc	r21, r21
    819a:	64 0f       	add	r22, r20
    819c:	75 1f       	adc	r23, r21
    819e:	26 1b       	sub	r18, r22
    81a0:	37 0b       	sbc	r19, r23
    81a2:	09 c0       	rjmp	.+18     	; 0x81b6 <PatchCommand14+0x44>
			while(1){
				track->patchCommandStreamPos-=3;
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    81a4:	ef 3f       	cpi	r30, 0xFF	; 255
    81a6:	39 f0       	breq	.+14     	; 0x81b6 <PatchCommand14+0x44>
		if(param!=0){
			track->patchCommandStreamPos-=((param+1)*3);
		}else{
			u8 command;
			while(1){
				track->patchCommandStreamPos-=3;
    81a8:	23 50       	subi	r18, 0x03	; 3
    81aa:	31 09       	sbc	r19, r1
    81ac:	f9 01       	movw	r30, r18
    81ae:	32 97       	sbiw	r30, 0x02	; 2
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
    81b0:	e4 91       	lpm	r30, Z
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    81b2:	ed 30       	cpi	r30, 0x0D	; 13
    81b4:	b9 f7       	brne	.-18     	; 0x81a4 <PatchCommand14+0x32>
    81b6:	56 96       	adiw	r26, 0x16	; 22
    81b8:	3c 93       	st	X, r19
    81ba:	2e 93       	st	-X, r18
    81bc:	55 97       	sbiw	r26, 0x15	; 21
			}
		}
		track->loopCount--;
    81be:	81 50       	subi	r24, 0x01	; 1
    81c0:	14 96       	adiw	r26, 0x04	; 4
    81c2:	8c 93       	st	X, r24
    81c4:	08 95       	ret

000081c6 <InitMusicPlayer>:

const Patch *patchPointers;

void InitMusicPlayer(const Patch *patchPointersParam){

	patchPointers=patchPointersParam;
    81c6:	90 93 71 0d 	sts	0x0D71, r25
    81ca:	80 93 70 0d 	sts	0x0D70, r24

	masterVolume=DEFAULT_MASTER_VOL;
    81ce:	8f e6       	ldi	r24, 0x6F	; 111
    81d0:	80 93 73 0d 	sts	0x0D73, r24
#if MIDI_IN == ENABLED
	InitUartRxBuffer();
	lastMidiInStatus=0;
#endif

	playSong=false;
    81d4:	10 92 ce 0c 	sts	0x0CCE, r1
    81d8:	eb e0       	ldi	r30, 0x0B	; 11
    81da:	fd e0       	ldi	r31, 0x0D	; 13

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    81dc:	80 e0       	ldi	r24, 0x00	; 0
		tracks[t].channel=t;
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    81de:	90 e1       	ldi	r25, 0x10	; 16
		tracks[t].noteVol=0;
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    81e0:	3f ef       	ldi	r19, 0xFF	; 255
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
    81e2:	28 e1       	ldi	r18, 0x18	; 24
    81e4:	df 01       	movw	r26, r30
    81e6:	1e 97       	sbiw	r26, 0x0e	; 14

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].channel=t;
    81e8:	8c 93       	st	X, r24
    81ea:	12 97       	sbiw	r26, 0x02	; 2
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    81ec:	9c 93       	st	X, r25
    81ee:	1d 96       	adiw	r26, 0x0d	; 13
		tracks[t].noteVol=0;
    81f0:	1c 92       	st	X, r1
    81f2:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    81f4:	3c 93       	st	X, r19
		tracks[t].patchNo=DEFAULT_PATCH;
    81f6:	10 82       	st	Z, r1
    81f8:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].tremoloRate=24; //~6hz
    81fa:	2c 93       	st	X, r18
    81fc:	13 97       	sbiw	r26, 0x03	; 3
		tracks[t].slideSpeed=0x10;
    81fe:	9c 93       	st	X, r25
#endif

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    8200:	8f 5f       	subi	r24, 0xFF	; 255
    8202:	77 96       	adiw	r30, 0x17	; 23
    8204:	85 30       	cpi	r24, 0x05	; 5
    8206:	71 f7       	brne	.-36     	; 0x81e4 <InitMusicPlayer+0x1e>
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
		tracks[t].slideSpeed=0x10;
	}

}
    8208:	08 95       	ret

0000820a <StartSong>:

#if MUSIC_ENGINE == MIDI

	void StartSong(const char *song){
    820a:	eb ef       	ldi	r30, 0xFB	; 251
    820c:	fc e0       	ldi	r31, 0x0C	; 12
		for(unsigned char t=0;t<CHANNELS;t++){
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    820e:	3f ef       	ldi	r19, 0xFF	; 255

#if MUSIC_ENGINE == MIDI

	void StartSong(const char *song){
		for(unsigned char t=0;t<CHANNELS;t++){
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    8210:	20 81       	ld	r18, Z
    8212:	2f 77       	andi	r18, 0x7F	; 127
    8214:	20 83       	st	Z, r18
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    8216:	33 83       	std	Z+3, r19	; 0x03
    8218:	77 96       	adiw	r30, 0x17	; 23
}

#if MUSIC_ENGINE == MIDI

	void StartSong(const char *song){
		for(unsigned char t=0;t<CHANNELS;t++){
    821a:	2d e0       	ldi	r18, 0x0D	; 13
    821c:	ee 36       	cpi	r30, 0x6E	; 110
    821e:	f2 07       	cpc	r31, r18
    8220:	b9 f7       	brne	.-18     	; 0x8210 <StartSong+0x6>
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
		}

		songPos=song+1; //skip first delta-time
    8222:	01 96       	adiw	r24, 0x01	; 1
    8224:	90 93 78 0d 	sts	0x0D78, r25
    8228:	80 93 77 0d 	sts	0x0D77, r24
		songStart=song+1;//skip first delta-time
    822c:	90 93 fa 0c 	sts	0x0CFA, r25
    8230:	80 93 f9 0c 	sts	0x0CF9, r24
		loopStart=song+1;
    8234:	90 93 7a 0d 	sts	0x0D7A, r25
    8238:	80 93 79 0d 	sts	0x0D79, r24
		nextDeltaTime=0;
    823c:	10 92 75 0d 	sts	0x0D75, r1
    8240:	10 92 74 0d 	sts	0x0D74, r1
		currDeltaTime=0;
    8244:	10 92 6f 0d 	sts	0x0D6F, r1
    8248:	10 92 6e 0d 	sts	0x0D6E, r1
		songSpeed=0;
    824c:	10 92 76 0d 	sts	0x0D76, r1

		lastStatus=0;
    8250:	10 92 72 0d 	sts	0x0D72, r1
		playSong=true;
    8254:	81 e0       	ldi	r24, 0x01	; 1
    8256:	80 93 ce 0c 	sts	0x0CCE, r24
    825a:	08 95       	ret

0000825c <StopSong>:


void StopSong(){

	for(u8 i=0;i<CHANNELS;i++){
		tracks[i].envelopeStep=-6;
    825c:	eb ef       	ldi	r30, 0xFB	; 251
    825e:	fc e0       	ldi	r31, 0x0C	; 12
    8260:	8a ef       	ldi	r24, 0xFA	; 250
    8262:	87 87       	std	Z+15, r24	; 0x0f
    8264:	86 a3       	std	Z+38, r24	; 0x26
    8266:	80 93 38 0d 	sts	0x0D38, r24
    826a:	80 93 4f 0d 	sts	0x0D4F, r24
    826e:	80 93 66 0d 	sts	0x0D66, r24
	}

	playSong=false;
    8272:	10 92 ce 0c 	sts	0x0CCE, r1
    8276:	08 95       	ret

00008278 <ReadVarLen>:
}



unsigned int ReadVarLen(const char **songPos)
{
    8278:	dc 01       	movw	r26, r24
    unsigned int value;
    unsigned char c;


    if ( (value = pgm_read_byte((*songPos)++)) & 0x80 )
    827a:	ed 91       	ld	r30, X+
    827c:	fc 91       	ld	r31, X
    827e:	11 97       	sbiw	r26, 0x01	; 1
    8280:	9f 01       	movw	r18, r30
    8282:	2f 5f       	subi	r18, 0xFF	; 255
    8284:	3f 4f       	sbci	r19, 0xFF	; 255
    8286:	11 96       	adiw	r26, 0x01	; 1
    8288:	3c 93       	st	X, r19
    828a:	2e 93       	st	-X, r18
    828c:	e4 91       	lpm	r30, Z
    828e:	e7 fd       	sbrc	r30, 7
    8290:	03 c0       	rjmp	.+6      	; 0x8298 <ReadVarLen+0x20>
    8292:	8e 2f       	mov	r24, r30
    8294:	90 e0       	ldi	r25, 0x00	; 0
    8296:	08 95       	ret
    {
       value &= 0x7F;
    8298:	ef 77       	andi	r30, 0x7F	; 127
    829a:	8e 2f       	mov	r24, r30
    829c:	90 e0       	ldi	r25, 0x00	; 0
       do
       {
         value = (value << 7) + ((c = pgm_read_byte((*songPos)++)) & 0x7F);
    829e:	96 95       	lsr	r25
    82a0:	98 2f       	mov	r25, r24
    82a2:	88 27       	eor	r24, r24
    82a4:	97 95       	ror	r25
    82a6:	87 95       	ror	r24
    82a8:	2f 5f       	subi	r18, 0xFF	; 255
    82aa:	3f 4f       	sbci	r19, 0xFF	; 255
    82ac:	f9 01       	movw	r30, r18
    82ae:	31 97       	sbiw	r30, 0x01	; 1
    82b0:	e4 91       	lpm	r30, Z
    82b2:	4e 2f       	mov	r20, r30
    82b4:	4f 77       	andi	r20, 0x7F	; 127
    82b6:	84 0f       	add	r24, r20
    82b8:	91 1d       	adc	r25, r1
       } while (c & 0x80);
    82ba:	e7 fd       	sbrc	r30, 7
    82bc:	f0 cf       	rjmp	.-32     	; 0x829e <ReadVarLen+0x26>
    82be:	2d 93       	st	X+, r18
    82c0:	3c 93       	st	X, r19
    }


    return value;
}
    82c2:	08 95       	ret

000082c4 <TriggerCommon>:




void TriggerCommon(Track* track,u8 patch,u8 volume,u8 note){
    82c4:	ef 92       	push	r14
    82c6:	ff 92       	push	r15
    82c8:	0f 93       	push	r16
    82ca:	1f 93       	push	r17
    82cc:	cf 93       	push	r28
    82ce:	df 93       	push	r29
    82d0:	1f 92       	push	r1
    82d2:	cd b7       	in	r28, 0x3d	; 61
    82d4:	de b7       	in	r29, 0x3e	; 62
    82d6:	7c 01       	movw	r14, r24
    82d8:	16 2f       	mov	r17, r22
		
	bool isFx = (track->flags&TRACK_FLAGS_PRIORITY);
    82da:	fc 01       	movw	r30, r24
    82dc:	80 81       	ld	r24, Z
    82de:	08 2f       	mov	r16, r24
    82e0:	00 1f       	adc	r16, r16
    82e2:	00 27       	eor	r16, r16
    82e4:	00 1f       	adc	r16, r16

	track->envelopeStep=0; 
    82e6:	17 86       	std	Z+15, r1	; 0x0f
	track->envelopeVol=0xff; 
    82e8:	9f ef       	ldi	r25, 0xFF	; 255
    82ea:	96 87       	std	Z+14, r25	; 0x0e
	track->noteVol=volume;
    82ec:	45 87       	std	Z+13, r20	; 0x0d
	track->patchPlayingTime=0;
    82ee:	14 8a       	std	Z+20, r1	; 0x14
	track->flags&=(~(TRACK_FLAGS_HOLD_ENV|TRACK_FLAGS_SLIDING));
    82f0:	87 7b       	andi	r24, 0xB7	; 183
    82f2:	80 83       	st	Z, r24
	track->tremoloLevel=0;
    82f4:	12 86       	std	Z+10, r1	; 0x0a
	track->tremoloPos=0;
    82f6:	11 86       	std	Z+9, r1	; 0x09
	track->note=note;
    82f8:	21 83       	std	Z+1, r18	; 0x01
	track->loopCount=0;
    82fa:	14 82       	std	Z+4, r1	; 0x04

#if MUSIC_ENGINE == MIDI
	track->expressionVol=DEFAULT_EXPRESSION_VOL;
    82fc:	93 83       	std	Z+3, r25	; 0x03
#endif

	#if SOUND_MIXER == MIXER_TYPE_INLINE

		if(track->channel==3){
    82fe:	82 81       	ldd	r24, Z+2	; 0x02
    8300:	83 30       	cpi	r24, 0x03	; 3
    8302:	69 f4       	brne	.+26     	; 0x831e <TriggerCommon+0x5a>
			//noise channel		
			if(!isFx) patch=note;			
    8304:	01 11       	cpse	r16, r1
    8306:	01 c0       	rjmp	.+2      	; 0x830a <TriggerCommon+0x46>
    8308:	12 2f       	mov	r17, r18
			mixer.channels.type.noise.barrel=0x0101;				
    830a:	81 e0       	ldi	r24, 0x01	; 1
    830c:	91 e0       	ldi	r25, 0x01	; 1
    830e:	90 93 e5 0c 	sts	0x0CE5, r25
    8312:	80 93 e4 0c 	sts	0x0CE4, r24
			mixer.channels.type.noise.params=1; //default (15bits,no divider)
    8316:	81 e0       	ldi	r24, 0x01	; 1
    8318:	80 93 e3 0c 	sts	0x0CE3, r24
    831c:	39 c0       	rjmp	.+114    	; 0x8390 <TriggerCommon+0xcc>

		#if SOUND_CHANNEL_5_ENABLE==1		

		}else if(track->channel==4){
    831e:	84 30       	cpi	r24, 0x04	; 4
    8320:	69 f5       	brne	.+90     	; 0x837c <TriggerCommon+0xb8>
				//PCM channel					
				mixer.channels.type.pcm.positionFrac=0;
    8322:	10 92 eb 0c 	sts	0x0CEB, r1
				const char *pos=(const char*)pgm_read_word(&(patchPointers[patch].pcmData));
    8326:	80 91 70 0d 	lds	r24, 0x0D70
    832a:	90 91 71 0d 	lds	r25, 0x0D71
    832e:	f9 e0       	ldi	r31, 0x09	; 9
    8330:	6f 9f       	mul	r22, r31
    8332:	80 0d       	add	r24, r0
    8334:	91 1d       	adc	r25, r1
    8336:	11 24       	eor	r1, r1
    8338:	fc 01       	movw	r30, r24
    833a:	31 96       	adiw	r30, 0x01	; 1
    833c:	a5 91       	lpm	r26, Z+
    833e:	b4 91       	lpm	r27, Z
				mixer.channels.type.pcm.position=pos;				
    8340:	b0 93 ed 0c 	sts	0x0CED, r27
    8344:	a0 93 ec 0c 	sts	0x0CEC, r26
				mixer.pcmLoopLenght=pgm_read_word(&(patchPointers[patch].loopEnd))-pgm_read_word(&(patchPointers[patch].loopStart));
    8348:	ac 01       	movw	r20, r24
    834a:	49 5f       	subi	r20, 0xF9	; 249
    834c:	5f 4f       	sbci	r21, 0xFF	; 255
    834e:	fa 01       	movw	r30, r20
    8350:	65 91       	lpm	r22, Z+
    8352:	74 91       	lpm	r23, Z
    8354:	05 96       	adiw	r24, 0x05	; 5
    8356:	fc 01       	movw	r30, r24
    8358:	85 91       	lpm	r24, Z+
    835a:	94 91       	lpm	r25, Z
    835c:	68 1b       	sub	r22, r24
    835e:	79 0b       	sbc	r23, r25
    8360:	70 93 ef 0c 	sts	0x0CEF, r23
    8364:	60 93 ee 0c 	sts	0x0CEE, r22
				mixer.pcmLoopEnd=pos+pgm_read_word(&(patchPointers[patch].loopEnd));
    8368:	fa 01       	movw	r30, r20
    836a:	85 91       	lpm	r24, Z+
    836c:	94 91       	lpm	r25, Z
    836e:	a8 0f       	add	r26, r24
    8370:	b9 1f       	adc	r27, r25
    8372:	b0 93 f1 0c 	sts	0x0CF1, r27
    8376:	a0 93 f0 0c 	sts	0x0CF0, r26
    837a:	05 c0       	rjmp	.+10     	; 0x8386 <TriggerCommon+0xc2>
				SetMixerNote(track->channel,note);
		#endif	

		}else{					
			//wave channels					
			SetMixerWave(track->channel,0);//default wave
    837c:	60 e0       	ldi	r22, 0x00	; 0
    837e:	29 83       	std	Y+1, r18	; 0x01
    8380:	0e 94 b1 44 	call	0x8962	; 0x8962 <SetMixerWave>
			SetMixerNote(track->channel,note);
    8384:	29 81       	ldd	r18, Y+1	; 0x01
    8386:	62 2f       	mov	r22, r18
    8388:	f7 01       	movw	r30, r14
    838a:	82 81       	ldd	r24, Z+2	; 0x02
    838c:	0e 94 9a 44 	call	0x8934	; 0x8934 <SetMixerNote>
		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
		track->fxPatchNo=patch;
    8390:	f7 01       	movw	r30, r14

		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
    8392:	00 23       	and	r16, r16
    8394:	11 f0       	breq	.+4      	; 0x839a <TriggerCommon+0xd6>
		track->fxPatchNo=patch;
    8396:	11 8b       	std	Z+17, r17	; 0x11
    8398:	01 c0       	rjmp	.+2      	; 0x839c <TriggerCommon+0xd8>
	}else{
		track->patchNo=patch;	
    839a:	10 8b       	std	Z+16, r17	; 0x10
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
    839c:	e0 91 70 0d 	lds	r30, 0x0D70
    83a0:	f0 91 71 0d 	lds	r31, 0x0D71
    83a4:	39 e0       	ldi	r19, 0x09	; 9
    83a6:	13 9f       	mul	r17, r19
    83a8:	e0 0d       	add	r30, r0
    83aa:	f1 1d       	adc	r31, r1
    83ac:	11 24       	eor	r1, r1
    83ae:	33 96       	adiw	r30, 0x03	; 3
    83b0:	85 91       	lpm	r24, Z+
    83b2:	94 91       	lpm	r25, Z
	if(pos==NULL){
		track->patchCommandStreamPos=NULL;
    83b4:	f7 01       	movw	r30, r14
	}else{
		track->patchNo=patch;	
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
	if(pos==NULL){
    83b6:	00 97       	sbiw	r24, 0x00	; 0
    83b8:	19 f4       	brne	.+6      	; 0x83c0 <TriggerCommon+0xfc>
		track->patchCommandStreamPos=NULL;
    83ba:	16 8a       	std	Z+22, r1	; 0x16
    83bc:	15 8a       	std	Z+21, r1	; 0x15
    83be:	08 c0       	rjmp	.+16     	; 0x83d0 <TriggerCommon+0x10c>
	}else{
		track->patchCurrDeltaTime=0;
    83c0:	13 8a       	std	Z+19, r1	; 0x13
		track->patchNextDeltaTime=pgm_read_byte(pos++);
    83c2:	fc 01       	movw	r30, r24
    83c4:	24 91       	lpm	r18, Z
    83c6:	f7 01       	movw	r30, r14
    83c8:	22 8b       	std	Z+18, r18	; 0x12
    83ca:	01 96       	adiw	r24, 0x01	; 1
		track->patchCommandStreamPos=pos;
    83cc:	96 8b       	std	Z+22, r25	; 0x16
    83ce:	85 8b       	std	Z+21, r24	; 0x15
	}

}
    83d0:	0f 90       	pop	r0
    83d2:	df 91       	pop	r29
    83d4:	cf 91       	pop	r28
    83d6:	1f 91       	pop	r17
    83d8:	0f 91       	pop	r16
    83da:	ff 90       	pop	r15
    83dc:	ef 90       	pop	r14
    83de:	08 95       	ret

000083e0 <TriggerFx>:

/* Trigger a sound effect.
 * Method allocates the channel based on priority.
 * Retrig: if this fx if already playing on a track, reuse same track.
 */
void TriggerFx(unsigned char patch,unsigned char volume,bool retrig){
    83e0:	cf 93       	push	r28
    83e2:	df 93       	push	r29
	unsigned char channel;
	
	unsigned char type=(unsigned char)pgm_read_byte(&(patchPointers[patch].type));
    83e4:	e0 91 70 0d 	lds	r30, 0x0D70
    83e8:	f0 91 71 0d 	lds	r31, 0x0D71
    83ec:	99 e0       	ldi	r25, 0x09	; 9
    83ee:	89 9f       	mul	r24, r25
    83f0:	e0 0d       	add	r30, r0
    83f2:	f1 1d       	adc	r31, r1
    83f4:	11 24       	eor	r1, r1
    83f6:	e4 91       	lpm	r30, Z

	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
    83f8:	e1 30       	cpi	r30, 0x01	; 1
    83fa:	e9 f0       	breq	.+58     	; 0x8436 <TriggerFx+0x56>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
    83fc:	e2 30       	cpi	r30, 0x02	; 2
    83fe:	e9 f0       	breq	.+58     	; 0x843a <TriggerFx+0x5a>
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
    8400:	20 91 12 0d 	lds	r18, 0x0D12
    8404:	27 ff       	sbrs	r18, 7
    8406:	1d c0       	rjmp	.+58     	; 0x8442 <TriggerFx+0x62>
    8408:	20 91 23 0d 	lds	r18, 0x0D23
    840c:	28 13       	cpse	r18, r24
    840e:	02 c0       	rjmp	.+4      	; 0x8414 <TriggerFx+0x34>
    8410:	41 11       	cpse	r20, r1
    8412:	17 c0       	rjmp	.+46     	; 0x8442 <TriggerFx+0x62>
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
    8414:	20 91 29 0d 	lds	r18, 0x0D29
    8418:	27 ff       	sbrs	r18, 7
    841a:	11 c0       	rjmp	.+34     	; 0x843e <TriggerFx+0x5e>
    841c:	20 91 3a 0d 	lds	r18, 0x0D3A
    8420:	28 13       	cpse	r18, r24
    8422:	02 c0       	rjmp	.+4      	; 0x8428 <TriggerFx+0x48>
    8424:	41 11       	cpse	r20, r1
    8426:	0b c0       	rjmp	.+22     	; 0x843e <TriggerFx+0x5e>
		channel=2;
	}else{
		//both channels have fx playing, use the oldest one
		if(tracks[1].patchPlayingTime>tracks[2].patchPlayingTime){
    8428:	20 91 26 0d 	lds	r18, 0x0D26
    842c:	90 91 3d 0d 	lds	r25, 0x0D3D
    8430:	92 17       	cp	r25, r18
    8432:	28 f4       	brcc	.+10     	; 0x843e <TriggerFx+0x5e>
    8434:	06 c0       	rjmp	.+12     	; 0x8442 <TriggerFx+0x62>
	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
		//noise or PCM channel fx		
		channel=3;
    8436:	c3 e0       	ldi	r28, 0x03	; 3
    8438:	05 c0       	rjmp	.+10     	; 0x8444 <TriggerFx+0x64>
	}else if(type==2){
		channel=4;
    843a:	c4 e0       	ldi	r28, 0x04	; 4
    843c:	03 c0       	rjmp	.+6      	; 0x8444 <TriggerFx+0x64>
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
		channel=2;
    843e:	c2 e0       	ldi	r28, 0x02	; 2
    8440:	01 c0       	rjmp	.+2      	; 0x8444 <TriggerFx+0x64>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
    8442:	c1 e0       	ldi	r28, 0x01	; 1
			channel=2;
		}
	}				

	Track* track=&tracks[channel];
	track->flags=TRACK_FLAGS_PRIORITY; //priority=1;
    8444:	97 e1       	ldi	r25, 0x17	; 23
    8446:	c9 9f       	mul	r28, r25
    8448:	e0 01       	movw	r28, r0
    844a:	11 24       	eor	r1, r1
    844c:	c5 50       	subi	r28, 0x05	; 5
    844e:	d3 4f       	sbci	r29, 0xF3	; 243
    8450:	90 e8       	ldi	r25, 0x80	; 128
    8452:	98 83       	st	Y, r25
	track->patchCommandStreamPos = NULL;
    8454:	1e 8a       	std	Y+22, r1	; 0x16
    8456:	1d 8a       	std	Y+21, r1	; 0x15
	TriggerCommon(track,patch,volume,80);
    8458:	20 e5       	ldi	r18, 0x50	; 80
    845a:	46 2f       	mov	r20, r22
    845c:	68 2f       	mov	r22, r24
    845e:	ce 01       	movw	r24, r28
    8460:	0e 94 62 41 	call	0x82c4	; 0x82c4 <TriggerCommon>
	track->flags|=TRACK_FLAGS_PLAYING;
    8464:	88 81       	ld	r24, Y
    8466:	80 62       	ori	r24, 0x20	; 32
    8468:	88 83       	st	Y, r24
}
    846a:	df 91       	pop	r29
    846c:	cf 91       	pop	r28
    846e:	08 95       	ret

00008470 <TriggerNote>:


void TriggerNote(unsigned char channel,unsigned char patch,unsigned char note,unsigned char volume){
    8470:	cf 93       	push	r28
    8472:	df 93       	push	r29
	Track* track=&tracks[channel];

	//allow only other music notes 
	if((track->flags&TRACK_FLAGS_PLAYING)==0 || (track->flags&TRACK_FLAGS_PRIORITY)==0){
    8474:	a8 2f       	mov	r26, r24
    8476:	b0 e0       	ldi	r27, 0x00	; 0
    8478:	97 e1       	ldi	r25, 0x17	; 23
    847a:	89 9f       	mul	r24, r25
    847c:	f0 01       	movw	r30, r0
    847e:	11 24       	eor	r1, r1
    8480:	e5 50       	subi	r30, 0x05	; 5
    8482:	f3 4f       	sbci	r31, 0xF3	; 243
    8484:	80 81       	ld	r24, Z
    8486:	85 ff       	sbrs	r24, 5
    8488:	02 c0       	rjmp	.+4      	; 0x848e <TriggerNote+0x1e>
    848a:	87 fd       	sbrc	r24, 7
    848c:	2e c0       	rjmp	.+92     	; 0x84ea <TriggerNote+0x7a>
			
		if(volume==0){ //note-off received
    848e:	21 11       	cpse	r18, r1
    8490:	18 c0       	rjmp	.+48     	; 0x84c2 <TriggerNote+0x52>

			
			//cut note if there's no envelope & no note hold
			if(track->envelopeStep==0 && !(track->flags&TRACK_FLAGS_HOLD_ENV)){
    8492:	97 e1       	ldi	r25, 0x17	; 23
    8494:	9a 9f       	mul	r25, r26
    8496:	f0 01       	movw	r30, r0
    8498:	9b 9f       	mul	r25, r27
    849a:	f0 0d       	add	r31, r0
    849c:	11 24       	eor	r1, r1
    849e:	e5 50       	subi	r30, 0x05	; 5
    84a0:	f3 4f       	sbci	r31, 0xF3	; 243
    84a2:	97 85       	ldd	r25, Z+15	; 0x0f
    84a4:	91 11       	cpse	r25, r1
    84a6:	02 c0       	rjmp	.+4      	; 0x84ac <TriggerNote+0x3c>
    84a8:	86 ff       	sbrs	r24, 6
				track->noteVol=0;
    84aa:	15 86       	std	Z+13, r1	; 0x0d
			}

			track->flags&=(~TRACK_FLAGS_HOLD_ENV);//patchEnvelopeHold=false;
    84ac:	97 e1       	ldi	r25, 0x17	; 23
    84ae:	9a 9f       	mul	r25, r26
    84b0:	f0 01       	movw	r30, r0
    84b2:	9b 9f       	mul	r25, r27
    84b4:	f0 0d       	add	r31, r0
    84b6:	11 24       	eor	r1, r1
    84b8:	e5 50       	subi	r30, 0x05	; 5
    84ba:	f3 4f       	sbci	r31, 0xF3	; 243
    84bc:	8f 7b       	andi	r24, 0xBF	; 191
    84be:	80 83       	st	Z, r24
    84c0:	14 c0       	rjmp	.+40     	; 0x84ea <TriggerNote+0x7a>
    84c2:	82 2f       	mov	r24, r18
    84c4:	24 2f       	mov	r18, r20
		}else{
		
			track->flags=0;//&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    84c6:	97 e1       	ldi	r25, 0x17	; 23
    84c8:	9a 9f       	mul	r25, r26
    84ca:	e0 01       	movw	r28, r0
    84cc:	9b 9f       	mul	r25, r27
    84ce:	d0 0d       	add	r29, r0
    84d0:	11 24       	eor	r1, r1
    84d2:	c5 50       	subi	r28, 0x05	; 5
    84d4:	d3 4f       	sbci	r29, 0xF3	; 243
    84d6:	18 82       	st	Y, r1
			track->patchCommandStreamPos = NULL;
    84d8:	1e 8a       	std	Y+22, r1	; 0x16
    84da:	1d 8a       	std	Y+21, r1	; 0x15
			TriggerCommon(track,patch,volume,note);
    84dc:	48 2f       	mov	r20, r24
    84de:	ce 01       	movw	r24, r28
    84e0:	0e 94 62 41 	call	0x82c4	; 0x82c4 <TriggerCommon>
			track->flags|=TRACK_FLAGS_PLAYING;
    84e4:	88 81       	ld	r24, Y
    84e6:	80 62       	ori	r24, 0x20	; 32
    84e8:	88 83       	st	Y, r24
		}

	}
}
    84ea:	df 91       	pop	r29
    84ec:	cf 91       	pop	r28
    84ee:	08 95       	ret

000084f0 <ProcessMusic>:
	}

#endif


void ProcessMusic(void){
    84f0:	6f 92       	push	r6
    84f2:	7f 92       	push	r7
    84f4:	8f 92       	push	r8
    84f6:	9f 92       	push	r9
    84f8:	af 92       	push	r10
    84fa:	bf 92       	push	r11
    84fc:	cf 92       	push	r12
    84fe:	df 92       	push	r13
    8500:	ef 92       	push	r14
    8502:	ff 92       	push	r15
    8504:	0f 93       	push	r16
    8506:	1f 93       	push	r17
    8508:	cf 93       	push	r28
    850a:	df 93       	push	r29
    850c:	cb ef       	ldi	r28, 0xFB	; 251
    850e:	dc e0       	ldi	r29, 0x0C	; 12
    8510:	00 ed       	ldi	r16, 0xD0	; 208
    8512:	1c e0       	ldi	r17, 0x0C	; 12
    8514:	d8 01       	movw	r26, r16
    8516:	9e 01       	movw	r18, r28
    8518:	40 e0       	ldi	r20, 0x00	; 0
    851a:	50 e0       	ldi	r21, 0x00	; 0
    851c:	ca 01       	movw	r24, r20
    851e:	85 50       	subi	r24, 0x05	; 5
    8520:	93 4f       	sbci	r25, 0xF3	; 243
    8522:	6c 01       	movw	r12, r24
	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//update envelope
		if(track->envelopeStep!=0){
    8524:	fc 01       	movw	r30, r24
    8526:	87 85       	ldd	r24, Z+15	; 0x0f
    8528:	88 23       	and	r24, r24
    852a:	91 f0       	breq	.+36     	; 0x8550 <ProcessMusic+0x60>
			vol=track->envelopeVol+track->envelopeStep;		
    852c:	66 85       	ldd	r22, Z+14	; 0x0e
    852e:	99 27       	eor	r25, r25
    8530:	87 fd       	sbrc	r24, 7
    8532:	90 95       	com	r25
    8534:	86 0f       	add	r24, r22
    8536:	91 1d       	adc	r25, r1
    8538:	8f 3f       	cpi	r24, 0xFF	; 255
    853a:	91 05       	cpc	r25, r1
    853c:	19 f0       	breq	.+6      	; 0x8544 <ProcessMusic+0x54>
    853e:	14 f0       	brlt	.+4      	; 0x8544 <ProcessMusic+0x54>
    8540:	8f ef       	ldi	r24, 0xFF	; 255
    8542:	90 e0       	ldi	r25, 0x00	; 0
    8544:	97 ff       	sbrs	r25, 7
    8546:	02 c0       	rjmp	.+4      	; 0x854c <ProcessMusic+0x5c>
    8548:	80 e0       	ldi	r24, 0x00	; 0
    854a:	90 e0       	ldi	r25, 0x00	; 0
			if(vol<0){
				vol=0;			
			}else if(vol>0xff){
				vol=0xff;						
			}
			track->envelopeVol=vol;
    854c:	f6 01       	movw	r30, r12
    854e:	86 87       	std	Z+14, r24	; 0x0e
		}

		//if volumes reaches zero and no more patch command, explicitly end playing on track
		//if(vol==0 && track->patchCommandStreamPos==NULL) track->flags&=~(TRACK_FLAGS_PLAYING);

		if(track->flags & TRACK_FLAGS_SLIDING){
    8550:	f9 01       	movw	r30, r18
    8552:	f0 80       	ld	r15, Z
    8554:	f3 fe       	sbrs	r15, 3
    8556:	2a c0       	rjmp	.+84     	; 0x85ac <ProcessMusic+0xbc>

			mixer.channels.all[trackNo].step+=track->slideStep;
    8558:	65 81       	ldd	r22, Z+5	; 0x05
    855a:	76 81       	ldd	r23, Z+6	; 0x06
    855c:	11 96       	adiw	r26, 0x01	; 1
    855e:	8d 91       	ld	r24, X+
    8560:	9c 91       	ld	r25, X
    8562:	12 97       	sbiw	r26, 0x02	; 2
    8564:	86 0f       	add	r24, r22
    8566:	97 1f       	adc	r25, r23
    8568:	12 96       	adiw	r26, 0x02	; 2
    856a:	9c 93       	st	X, r25
    856c:	8e 93       	st	-X, r24
    856e:	11 97       	sbiw	r26, 0x01	; 1
			u16 tStep=pgm_read_word(&(steptable[track->slideNote]));
    8570:	f6 01       	movw	r30, r12
    8572:	e7 80       	ldd	r14, Z+7	; 0x07
    8574:	ee 2d       	mov	r30, r14
    8576:	f0 e0       	ldi	r31, 0x00	; 0
    8578:	ee 0f       	add	r30, r30
    857a:	ff 1f       	adc	r31, r31
    857c:	e8 5f       	subi	r30, 0xF8	; 248
    857e:	f5 47       	sbci	r31, 0x75	; 117
    8580:	c5 90       	lpm	r12, Z+
    8582:	d4 90       	lpm	r13, Z

			if((track->slideStep>0 && mixer.channels.all[trackNo].step>=tStep) || 
    8584:	16 16       	cp	r1, r22
    8586:	17 06       	cpc	r1, r23
    8588:	24 f4       	brge	.+8      	; 0x8592 <ProcessMusic+0xa2>
    858a:	8c 15       	cp	r24, r12
    858c:	9d 05       	cpc	r25, r13
    858e:	30 f4       	brcc	.+12     	; 0x859c <ProcessMusic+0xac>
    8590:	0d c0       	rjmp	.+26     	; 0x85ac <ProcessMusic+0xbc>
    8592:	67 2b       	or	r22, r23
    8594:	59 f0       	breq	.+22     	; 0x85ac <ProcessMusic+0xbc>
				(track->slideStep<0 && mixer.channels.all[trackNo].step<=tStep))
    8596:	c8 16       	cp	r12, r24
    8598:	d9 06       	cpc	r13, r25
    859a:	40 f0       	brcs	.+16     	; 0x85ac <ProcessMusic+0xbc>
			{					
				mixer.channels.all[trackNo].step = tStep;					
    859c:	12 96       	adiw	r26, 0x02	; 2
    859e:	dc 92       	st	X, r13
    85a0:	ce 92       	st	-X, r12
    85a2:	11 97       	sbiw	r26, 0x01	; 1
				track->flags &= ~(TRACK_FLAGS_SLIDING);	
    85a4:	8f 2d       	mov	r24, r15
    85a6:	87 7f       	andi	r24, 0xF7	; 247
    85a8:	f9 01       	movw	r30, r18
    85aa:	80 83       	st	Z, r24
    85ac:	49 5e       	subi	r20, 0xE9	; 233
    85ae:	5f 4f       	sbci	r21, 0xFF	; 255
    85b0:	29 5e       	subi	r18, 0xE9	; 233
    85b2:	3f 4f       	sbci	r19, 0xFF	; 255
    85b4:	16 96       	adiw	r26, 0x06	; 6
	u8 channel;
	Track* track;


	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    85b6:	43 37       	cpi	r20, 0x73	; 115
    85b8:	51 05       	cpc	r21, r1
    85ba:	09 f0       	breq	.+2      	; 0x85be <ProcessMusic+0xce>
    85bc:	af cf       	rjmp	.-162    	; 0x851c <ProcessMusic+0x2c>
	}



	//Process song MIDI notes
	if(playSong){
    85be:	80 91 ce 0c 	lds	r24, 0x0CCE
    85c2:	88 23       	and	r24, r24
    85c4:	09 f4       	brne	.+2      	; 0x85c8 <ProcessMusic+0xd8>
    85c6:	cc c0       	rjmp	.+408    	; 0x8760 <ProcessMusic+0x270>
							}else if(c1==CONTROLER_EXPRESSION){
								tracks[channel].expressionVol=c2<<1;
							}else if(c1==CONTROLER_TREMOLO){
								tracks[channel].tremoloLevel=c2<<1;
							}else if(c1==CONTROLER_TREMOLO_RATE){
								tracks[channel].tremoloRate=c2<<1;
    85c8:	57 e1       	ldi	r21, 0x17	; 23
    85ca:	f5 2e       	mov	r15, r21
	if(playSong){
	
		#if MUSIC_ENGINE == MIDI
			
			//process all simultaneous events
			while(currDeltaTime==nextDeltaTime){
    85cc:	80 91 6e 0d 	lds	r24, 0x0D6E
    85d0:	90 91 6f 0d 	lds	r25, 0x0D6F
    85d4:	20 91 74 0d 	lds	r18, 0x0D74
    85d8:	30 91 75 0d 	lds	r19, 0x0D75
    85dc:	82 17       	cp	r24, r18
    85de:	93 07       	cpc	r25, r19
    85e0:	09 f0       	breq	.+2      	; 0x85e4 <ProcessMusic+0xf4>
    85e2:	b9 c0       	rjmp	.+370    	; 0x8756 <ProcessMusic+0x266>

				c1=pgm_read_byte(songPos++);
    85e4:	20 91 77 0d 	lds	r18, 0x0D77
    85e8:	30 91 78 0d 	lds	r19, 0x0D78
    85ec:	b9 01       	movw	r22, r18
    85ee:	6f 5f       	subi	r22, 0xFF	; 255
    85f0:	7f 4f       	sbci	r23, 0xFF	; 255
    85f2:	70 93 78 0d 	sts	0x0D78, r23
    85f6:	60 93 77 0d 	sts	0x0D77, r22
    85fa:	f9 01       	movw	r30, r18
    85fc:	44 91       	lpm	r20, Z
			
				if(c1==0xff){
    85fe:	4f 3f       	cpi	r20, 0xFF	; 255
    8600:	79 f5       	brne	.+94     	; 0x8660 <ProcessMusic+0x170>
					//META data type event
					c1=pgm_read_byte(songPos++);
    8602:	a9 01       	movw	r20, r18
    8604:	4e 5f       	subi	r20, 0xFE	; 254
    8606:	5f 4f       	sbci	r21, 0xFF	; 255
    8608:	50 93 78 0d 	sts	0x0D78, r21
    860c:	40 93 77 0d 	sts	0x0D77, r20
    8610:	fb 01       	movw	r30, r22
    8612:	64 91       	lpm	r22, Z

				
					if(c1==0x2f){ //end of song
    8614:	6f 32       	cpi	r22, 0x2F	; 47
    8616:	19 f4       	brne	.+6      	; 0x861e <ProcessMusic+0x12e>
						playSong=false;
    8618:	10 92 ce 0c 	sts	0x0CCE, r1
						break;	
    861c:	9c c0       	rjmp	.+312    	; 0x8756 <ProcessMusic+0x266>
					}else if(c1==0x6){ //marker
    861e:	66 30       	cpi	r22, 0x06	; 6
    8620:	09 f0       	breq	.+2      	; 0x8624 <ProcessMusic+0x134>
    8622:	8c c0       	rjmp	.+280    	; 0x873c <ProcessMusic+0x24c>
						c1=pgm_read_byte(songPos++); //read len
    8624:	fa 01       	movw	r30, r20
    8626:	44 91       	lpm	r20, Z
						c2=pgm_read_byte(songPos++); //read data
    8628:	c9 01       	movw	r24, r18
    862a:	04 96       	adiw	r24, 0x04	; 4
    862c:	90 93 78 0d 	sts	0x0D78, r25
    8630:	80 93 77 0d 	sts	0x0D77, r24
				
					if(c1==0x2f){ //end of song
						playSong=false;
						break;	
					}else if(c1==0x6){ //marker
						c1=pgm_read_byte(songPos++); //read len
    8634:	f9 01       	movw	r30, r18
    8636:	33 96       	adiw	r30, 0x03	; 3
						c2=pgm_read_byte(songPos++); //read data
    8638:	e4 91       	lpm	r30, Z
						if(c2=='S'){ //loop start
    863a:	e3 35       	cpi	r30, 0x53	; 83
    863c:	29 f4       	brne	.+10     	; 0x8648 <ProcessMusic+0x158>
							loopStart=songPos;
    863e:	90 93 7a 0d 	sts	0x0D7A, r25
    8642:	80 93 79 0d 	sts	0x0D79, r24
    8646:	7a c0       	rjmp	.+244    	; 0x873c <ProcessMusic+0x24c>
						}else if(c2=='E'){//loop end
    8648:	e5 34       	cpi	r30, 0x45	; 69
    864a:	09 f0       	breq	.+2      	; 0x864e <ProcessMusic+0x15e>
    864c:	77 c0       	rjmp	.+238    	; 0x873c <ProcessMusic+0x24c>
							songPos=loopStart;
    864e:	80 91 79 0d 	lds	r24, 0x0D79
    8652:	90 91 7a 0d 	lds	r25, 0x0D7A
    8656:	90 93 78 0d 	sts	0x0D78, r25
    865a:	80 93 77 0d 	sts	0x0D77, r24
    865e:	6e c0       	rjmp	.+220    	; 0x873c <ProcessMusic+0x24c>
					}
				

				}else{

					if(c1&0x80) lastStatus=c1;					
    8660:	47 fd       	sbrc	r20, 7
    8662:	40 93 72 0d 	sts	0x0D72, r20
					channel=lastStatus&0x0f;
    8666:	90 91 72 0d 	lds	r25, 0x0D72
    866a:	89 2f       	mov	r24, r25
    866c:	8f 70       	andi	r24, 0x0F	; 15
				
					//get next data byte
					//Note: maybe we should not advance the cursor
					//in case we receive an unsupported command				
					if(c1&0x80) c1=pgm_read_byte(songPos++); 
    866e:	47 ff       	sbrs	r20, 7
    8670:	08 c0       	rjmp	.+16     	; 0x8682 <ProcessMusic+0x192>
    8672:	2e 5f       	subi	r18, 0xFE	; 254
    8674:	3f 4f       	sbci	r19, 0xFF	; 255
    8676:	30 93 78 0d 	sts	0x0D78, r19
    867a:	20 93 77 0d 	sts	0x0D77, r18
    867e:	fb 01       	movw	r30, r22
    8680:	44 91       	lpm	r20, Z

					switch(lastStatus&0xf0){
    8682:	90 7f       	andi	r25, 0xF0	; 240
    8684:	90 3b       	cpi	r25, 0xB0	; 176
    8686:	e1 f0       	breq	.+56     	; 0x86c0 <ProcessMusic+0x1d0>
    8688:	90 3c       	cpi	r25, 0xC0	; 192
    868a:	09 f4       	brne	.+2      	; 0x868e <ProcessMusic+0x19e>
    868c:	51 c0       	rjmp	.+162    	; 0x8730 <ProcessMusic+0x240>
    868e:	90 39       	cpi	r25, 0x90	; 144
    8690:	09 f0       	breq	.+2      	; 0x8694 <ProcessMusic+0x1a4>
    8692:	54 c0       	rjmp	.+168    	; 0x873c <ProcessMusic+0x24c>

						//note-on
						case 0x90:
							//c1 = note						
							c2=pgm_read_byte(songPos++)<<1; //get volume
    8694:	e0 91 77 0d 	lds	r30, 0x0D77
    8698:	f0 91 78 0d 	lds	r31, 0x0D78
    869c:	9f 01       	movw	r18, r30
    869e:	2f 5f       	subi	r18, 0xFF	; 255
    86a0:	3f 4f       	sbci	r19, 0xFF	; 255
    86a2:	30 93 78 0d 	sts	0x0D78, r19
    86a6:	20 93 77 0d 	sts	0x0D77, r18
    86aa:	24 91       	lpm	r18, Z
    86ac:	22 0f       	add	r18, r18
						
							if(tracks[channel].flags|TRACK_FLAGS_ALLOCATED){ //allocated==true
								TriggerNote(channel,tracks[channel].patchNo,c1,c2);
    86ae:	f8 9e       	mul	r15, r24
    86b0:	f0 01       	movw	r30, r0
    86b2:	11 24       	eor	r1, r1
    86b4:	e5 50       	subi	r30, 0x05	; 5
    86b6:	f3 4f       	sbci	r31, 0xF3	; 243
    86b8:	60 89       	ldd	r22, Z+16	; 0x10
    86ba:	0e 94 38 42 	call	0x8470	; 0x8470 <TriggerNote>
    86be:	3e c0       	rjmp	.+124    	; 0x873c <ProcessMusic+0x24c>
							break;

						//controllers
						case 0xb0:
							///c1 = controller #
							c2=pgm_read_byte(songPos++); //get controller value
    86c0:	e0 91 77 0d 	lds	r30, 0x0D77
    86c4:	f0 91 78 0d 	lds	r31, 0x0D78
    86c8:	9f 01       	movw	r18, r30
    86ca:	2f 5f       	subi	r18, 0xFF	; 255
    86cc:	3f 4f       	sbci	r19, 0xFF	; 255
    86ce:	30 93 78 0d 	sts	0x0D78, r19
    86d2:	20 93 77 0d 	sts	0x0D77, r18
    86d6:	e4 91       	lpm	r30, Z
						
							if(c1==CONTROLER_VOL){
    86d8:	47 30       	cpi	r20, 0x07	; 7
    86da:	49 f4       	brne	.+18     	; 0x86ee <ProcessMusic+0x1fe>
								tracks[channel].trackVol=c2<<1;
    86dc:	f8 9e       	mul	r15, r24
    86de:	d0 01       	movw	r26, r0
    86e0:	11 24       	eor	r1, r1
    86e2:	a5 50       	subi	r26, 0x05	; 5
    86e4:	b3 4f       	sbci	r27, 0xF3	; 243
    86e6:	ee 0f       	add	r30, r30
    86e8:	1c 96       	adiw	r26, 0x0c	; 12
    86ea:	ec 93       	st	X, r30
    86ec:	27 c0       	rjmp	.+78     	; 0x873c <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_EXPRESSION){
    86ee:	4b 30       	cpi	r20, 0x0B	; 11
    86f0:	49 f4       	brne	.+18     	; 0x8704 <ProcessMusic+0x214>
								tracks[channel].expressionVol=c2<<1;
    86f2:	f8 9e       	mul	r15, r24
    86f4:	d0 01       	movw	r26, r0
    86f6:	11 24       	eor	r1, r1
    86f8:	a5 50       	subi	r26, 0x05	; 5
    86fa:	b3 4f       	sbci	r27, 0xF3	; 243
    86fc:	ee 0f       	add	r30, r30
    86fe:	13 96       	adiw	r26, 0x03	; 3
    8700:	ec 93       	st	X, r30
    8702:	1c c0       	rjmp	.+56     	; 0x873c <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO){
    8704:	4c 35       	cpi	r20, 0x5C	; 92
    8706:	49 f4       	brne	.+18     	; 0x871a <ProcessMusic+0x22a>
								tracks[channel].tremoloLevel=c2<<1;
    8708:	f8 9e       	mul	r15, r24
    870a:	d0 01       	movw	r26, r0
    870c:	11 24       	eor	r1, r1
    870e:	a5 50       	subi	r26, 0x05	; 5
    8710:	b3 4f       	sbci	r27, 0xF3	; 243
    8712:	ee 0f       	add	r30, r30
    8714:	1a 96       	adiw	r26, 0x0a	; 10
    8716:	ec 93       	st	X, r30
    8718:	11 c0       	rjmp	.+34     	; 0x873c <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO_RATE){
    871a:	44 36       	cpi	r20, 0x64	; 100
    871c:	79 f4       	brne	.+30     	; 0x873c <ProcessMusic+0x24c>
								tracks[channel].tremoloRate=c2<<1;
    871e:	f8 9e       	mul	r15, r24
    8720:	d0 01       	movw	r26, r0
    8722:	11 24       	eor	r1, r1
    8724:	a5 50       	subi	r26, 0x05	; 5
    8726:	b3 4f       	sbci	r27, 0xF3	; 243
    8728:	ee 0f       	add	r30, r30
    872a:	1b 96       	adiw	r26, 0x0b	; 11
    872c:	ec 93       	st	X, r30
    872e:	06 c0       	rjmp	.+12     	; 0x873c <ProcessMusic+0x24c>
							break;

						//program change
						case 0xc0:
							// c1 = patch #						
							tracks[channel].patchNo=c1;
    8730:	f8 9e       	mul	r15, r24
    8732:	f0 01       	movw	r30, r0
    8734:	11 24       	eor	r1, r1
    8736:	e5 50       	subi	r30, 0x05	; 5
    8738:	f3 4f       	sbci	r31, 0xF3	; 243
    873a:	40 8b       	std	Z+16, r20	; 0x10


				}//end if(c1==0xff)

				//read next delta time
				nextDeltaTime=ReadVarLen(&songPos);			
    873c:	87 e7       	ldi	r24, 0x77	; 119
    873e:	9d e0       	ldi	r25, 0x0D	; 13
    8740:	0e 94 3c 41 	call	0x8278	; 0x8278 <ReadVarLen>
    8744:	90 93 75 0d 	sts	0x0D75, r25
    8748:	80 93 74 0d 	sts	0x0D74, r24
				currDeltaTime=0;
    874c:	10 92 6f 0d 	sts	0x0D6F, r1
    8750:	10 92 6e 0d 	sts	0x0D6E, r1
    8754:	3b cf       	rjmp	.-394    	; 0x85cc <ProcessMusic+0xdc>
					}
				#endif

			}//end while
		
			currDeltaTime++;
    8756:	01 96       	adiw	r24, 0x01	; 1
    8758:	90 93 6f 0d 	sts	0x0D6F, r25
    875c:	80 93 6e 0d 	sts	0x0D6E, r24
    8760:	94 e0       	ldi	r25, 0x04	; 4
    8762:	a9 2e       	mov	r10, r25
    8764:	9d e0       	ldi	r25, 0x0D	; 13
    8766:	b9 2e       	mov	r11, r25
    8768:	2e e0       	ldi	r18, 0x0E	; 14
    876a:	c2 2e       	mov	r12, r18
    876c:	2d e0       	ldi	r18, 0x0D	; 13
    876e:	d2 2e       	mov	r13, r18
    8770:	3f e0       	ldi	r19, 0x0F	; 15
    8772:	e3 2e       	mov	r14, r19
    8774:	3d e0       	ldi	r19, 0x0D	; 13
    8776:	f3 2e       	mov	r15, r19
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    8778:	66 24       	eor	r6, r6
    877a:	6a 94       	dec	r6
    877c:	71 2c       	mov	r7, r1
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//process patch command stream
		if((track->flags & TRACK_FLAGS_PLAYING) && (track->patchCommandStreamPos!=NULL) && ((track->flags & TRACK_FLAGS_HOLD_ENV)==0)){
    877e:	88 81       	ld	r24, Y
    8780:	85 ff       	sbrs	r24, 5
    8782:	42 c0       	rjmp	.+132    	; 0x8808 <ProcessMusic+0x318>
    8784:	2d 89       	ldd	r18, Y+21	; 0x15
    8786:	3e 89       	ldd	r19, Y+22	; 0x16
    8788:	23 2b       	or	r18, r19
    878a:	09 f4       	brne	.+2      	; 0x878e <ProcessMusic+0x29e>
    878c:	3d c0       	rjmp	.+122    	; 0x8808 <ProcessMusic+0x318>
    878e:	86 fd       	sbrc	r24, 6
    8790:	3b c0       	rjmp	.+118    	; 0x8808 <ProcessMusic+0x318>
    8792:	47 01       	movw	r8, r14
    8794:	f2 e0       	ldi	r31, 0x02	; 2
    8796:	8f 1a       	sub	r8, r31
    8798:	91 08       	sbc	r9, r1

			//process all simultaneous events
			while(track->patchCurrDeltaTime==track->patchNextDeltaTime){
    879a:	d6 01       	movw	r26, r12
    879c:	9c 91       	ld	r25, X
    879e:	f4 01       	movw	r30, r8
    87a0:	80 81       	ld	r24, Z
    87a2:	98 13       	cpse	r25, r24
    87a4:	2e c0       	rjmp	.+92     	; 0x8802 <ProcessMusic+0x312>

				c1=pgm_read_byte(track->patchCommandStreamPos++);
    87a6:	ed 89       	ldd	r30, Y+21	; 0x15
    87a8:	fe 89       	ldd	r31, Y+22	; 0x16
    87aa:	bf 01       	movw	r22, r30
    87ac:	6f 5f       	subi	r22, 0xFF	; 255
    87ae:	7f 4f       	sbci	r23, 0xFF	; 255
    87b0:	7e 8b       	std	Y+22, r23	; 0x16
    87b2:	6d 8b       	std	Y+21, r22	; 0x15
    87b4:	84 91       	lpm	r24, Z
				if(c1==PATCH_END){
    87b6:	8f 3f       	cpi	r24, 0xFF	; 255
    87b8:	31 f4       	brne	.+12     	; 0x87c6 <ProcessMusic+0x2d6>
					//end of stream!
					track->flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    87ba:	88 81       	ld	r24, Y
    87bc:	8f 77       	andi	r24, 0x7F	; 127
    87be:	88 83       	st	Y, r24
					track->patchCommandStreamPos=NULL;
    87c0:	1e 8a       	std	Y+22, r1	; 0x16
    87c2:	1d 8a       	std	Y+21, r1	; 0x15
					break;
    87c4:	1e c0       	rjmp	.+60     	; 0x8802 <ProcessMusic+0x312>

				}else{
					c2=pgm_read_byte(track->patchCommandStreamPos++);
    87c6:	9f 01       	movw	r18, r30
    87c8:	2e 5f       	subi	r18, 0xFE	; 254
    87ca:	3f 4f       	sbci	r19, 0xFF	; 255
    87cc:	3e 8b       	std	Y+22, r19	; 0x16
    87ce:	2d 8b       	std	Y+21, r18	; 0x15
    87d0:	fb 01       	movw	r30, r22
    87d2:	64 91       	lpm	r22, Z
					//invoke patch command function
					((PatchCommand)pgm_read_word(&patchCommands[c1]))(track,c2);
    87d4:	e8 2f       	mov	r30, r24
    87d6:	f0 e0       	ldi	r31, 0x00	; 0
    87d8:	ee 0f       	add	r30, r30
    87da:	ff 1f       	adc	r31, r31
    87dc:	ee 52       	subi	r30, 0x2E	; 46
    87de:	ff 4f       	sbci	r31, 0xFF	; 255
    87e0:	25 91       	lpm	r18, Z+
    87e2:	34 91       	lpm	r19, Z
    87e4:	ce 01       	movw	r24, r28
    87e6:	f9 01       	movw	r30, r18
    87e8:	09 95       	icall
				}

				//read next delta time
				track->patchNextDeltaTime=pgm_read_byte(track->patchCommandStreamPos++);
    87ea:	ed 89       	ldd	r30, Y+21	; 0x15
    87ec:	fe 89       	ldd	r31, Y+22	; 0x16
    87ee:	cf 01       	movw	r24, r30
    87f0:	01 96       	adiw	r24, 0x01	; 1
    87f2:	9e 8b       	std	Y+22, r25	; 0x16
    87f4:	8d 8b       	std	Y+21, r24	; 0x15
    87f6:	e4 91       	lpm	r30, Z
    87f8:	d4 01       	movw	r26, r8
    87fa:	ec 93       	st	X, r30
				track->patchCurrDeltaTime=0;
    87fc:	f6 01       	movw	r30, r12
    87fe:	10 82       	st	Z, r1
    8800:	cc cf       	rjmp	.-104    	; 0x879a <ProcessMusic+0x2aa>
			}

			track->patchCurrDeltaTime++;
    8802:	9f 5f       	subi	r25, 0xFF	; 255
    8804:	d6 01       	movw	r26, r12
    8806:	9c 93       	st	X, r25
		}

		if(track->flags & TRACK_FLAGS_PLAYING){
    8808:	98 81       	ld	r25, Y
    880a:	95 ff       	sbrs	r25, 5
    880c:	6c c0       	rjmp	.+216    	; 0x88e6 <ProcessMusic+0x3f6>

			if(track->patchPlayingTime<0xff){
    880e:	f7 01       	movw	r30, r14
    8810:	80 81       	ld	r24, Z
    8812:	8f 3f       	cpi	r24, 0xFF	; 255
    8814:	11 f0       	breq	.+4      	; 0x881a <ProcessMusic+0x32a>
				track->patchPlayingTime++;
    8816:	8f 5f       	subi	r24, 0xFF	; 255
    8818:	80 83       	st	Z, r24
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
    881a:	97 fd       	sbrc	r25, 7
    881c:	04 c0       	rjmp	.+8      	; 0x8826 <ProcessMusic+0x336>
    881e:	f7 01       	movw	r30, r14
    8820:	38 97       	sbiw	r30, 0x08	; 8
				//if an FX, use full track volume.
				trackVol=0xff;
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
    8822:	90 81       	ld	r25, Z
    8824:	01 c0       	rjmp	.+2      	; 0x8828 <ProcessMusic+0x338>
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
				//if an FX, use full track volume.
				trackVol=0xff;
    8826:	9f ef       	ldi	r25, 0xFF	; 255
    8828:	f7 01       	movw	r30, r14
    882a:	37 97       	sbiw	r30, 0x07	; 7
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
			}
			if(track->noteVol!=0 && track->envelopeVol!=0 && trackVol!=0 && masterVolume!=0){
    882c:	80 81       	ld	r24, Z
    882e:	88 23       	and	r24, r24
    8830:	09 f4       	brne	.+2      	; 0x8834 <ProcessMusic+0x344>
    8832:	4e c0       	rjmp	.+156    	; 0x88d0 <ProcessMusic+0x3e0>
    8834:	31 96       	adiw	r30, 0x01	; 1
    8836:	50 81       	ld	r21, Z
    8838:	55 23       	and	r21, r21
    883a:	09 f4       	brne	.+2      	; 0x883e <ProcessMusic+0x34e>
    883c:	49 c0       	rjmp	.+146    	; 0x88d0 <ProcessMusic+0x3e0>
    883e:	99 23       	and	r25, r25
    8840:	09 f4       	brne	.+2      	; 0x8844 <ProcessMusic+0x354>
    8842:	46 c0       	rjmp	.+140    	; 0x88d0 <ProcessMusic+0x3e0>
    8844:	40 91 73 0d 	lds	r20, 0x0D73
    8848:	44 23       	and	r20, r20
    884a:	09 f4       	brne	.+2      	; 0x884e <ProcessMusic+0x35e>
    884c:	41 c0       	rjmp	.+130    	; 0x88d0 <ProcessMusic+0x3e0>

				uVol=(track->noteVol*trackVol)+0x100;
    884e:	89 9f       	mul	r24, r25
    8850:	c0 01       	movw	r24, r0
    8852:	11 24       	eor	r1, r1
    8854:	93 95       	inc	r25
				uVol>>=8;
    8856:	89 2f       	mov	r24, r25
    8858:	99 27       	eor	r25, r25
				
				uVol=(uVol*track->envelopeVol)+0x100;
    885a:	58 9f       	mul	r21, r24
    885c:	90 01       	movw	r18, r0
    885e:	59 9f       	mul	r21, r25
    8860:	30 0d       	add	r19, r0
    8862:	11 24       	eor	r1, r1
    8864:	c9 01       	movw	r24, r18
    8866:	93 95       	inc	r25
				uVol>>=8;
    8868:	89 2f       	mov	r24, r25
    886a:	99 27       	eor	r25, r25
    886c:	3b 97       	sbiw	r30, 0x0b	; 11
				
				#if MUSIC_ENGINE == MIDI
					uVol=(uVol*track->expressionVol)+0x100;
    886e:	50 81       	ld	r21, Z
    8870:	58 9f       	mul	r21, r24
    8872:	90 01       	movw	r18, r0
    8874:	59 9f       	mul	r21, r25
    8876:	30 0d       	add	r19, r0
    8878:	11 24       	eor	r1, r1
    887a:	33 95       	inc	r19
					uVol>>=8;
    887c:	23 2f       	mov	r18, r19
    887e:	33 27       	eor	r19, r19
				#endif
				
				uVol=(uVol*masterVolume)+0x100;
    8880:	42 9f       	mul	r20, r18
    8882:	c0 01       	movw	r24, r0
    8884:	43 9f       	mul	r20, r19
    8886:	90 0d       	add	r25, r0
    8888:	11 24       	eor	r1, r1
    888a:	93 95       	inc	r25
				uVol>>=8;
    888c:	89 2f       	mov	r24, r25
    888e:	99 27       	eor	r25, r25
    8890:	37 96       	adiw	r30, 0x07	; 7

				if(track->tremoloLevel>0){					
    8892:	20 81       	ld	r18, Z
    8894:	22 23       	and	r18, r18
    8896:	f1 f0       	breq	.+60     	; 0x88d4 <ProcessMusic+0x3e4>
					tmp=pgm_read_byte(&(waves[track->tremoloPos]));
    8898:	d5 01       	movw	r26, r10
    889a:	ec 91       	ld	r30, X
    889c:	f0 e0       	ldi	r31, 0x00	; 0
    889e:	e0 50       	subi	r30, 0x00	; 0
    88a0:	f4 47       	sbci	r31, 0x74	; 116
    88a2:	e4 91       	lpm	r30, Z
					tmp-=128; //convert to unsigned
    88a4:	e0 58       	subi	r30, 0x80	; 128

					tVol=(track->tremoloLevel*tmp)+0x100;
    88a6:	2e 9f       	mul	r18, r30
    88a8:	f0 01       	movw	r30, r0
    88aa:	11 24       	eor	r1, r1
    88ac:	f3 95       	inc	r31
					tVol>>=8;
    88ae:	ef 2f       	mov	r30, r31
    88b0:	ff 27       	eor	r31, r31
					
					uVol=(uVol*(0xff-tVol))+0x100;
    88b2:	a3 01       	movw	r20, r6
    88b4:	4e 1b       	sub	r20, r30
    88b6:	5f 0b       	sbc	r21, r31
    88b8:	48 9f       	mul	r20, r24
    88ba:	90 01       	movw	r18, r0
    88bc:	49 9f       	mul	r20, r25
    88be:	30 0d       	add	r19, r0
    88c0:	58 9f       	mul	r21, r24
    88c2:	30 0d       	add	r19, r0
    88c4:	11 24       	eor	r1, r1
    88c6:	c9 01       	movw	r24, r18
    88c8:	93 95       	inc	r25
					uVol>>=8;
    88ca:	89 2f       	mov	r24, r25
    88cc:	99 27       	eor	r25, r25
    88ce:	02 c0       	rjmp	.+4      	; 0x88d4 <ProcessMusic+0x3e4>
				}

			
			}else{
				uVol=0;
    88d0:	80 e0       	ldi	r24, 0x00	; 0
    88d2:	90 e0       	ldi	r25, 0x00	; 0
			}	

			track->tremoloPos+=track->tremoloRate;	
    88d4:	f5 01       	movw	r30, r10
    88d6:	30 81       	ld	r19, Z
    88d8:	f7 01       	movw	r30, r14
    88da:	39 97       	sbiw	r30, 0x09	; 9
    88dc:	20 81       	ld	r18, Z
    88de:	23 0f       	add	r18, r19
    88e0:	d5 01       	movw	r26, r10
    88e2:	2c 93       	st	X, r18
    88e4:	02 c0       	rjmp	.+4      	; 0x88ea <ProcessMusic+0x3fa>

		}else{
			uVol=0;
    88e6:	80 e0       	ldi	r24, 0x00	; 0
    88e8:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
    88ea:	f8 01       	movw	r30, r16
    88ec:	80 83       	st	Z, r24
    88ee:	67 96       	adiw	r28, 0x17	; 23
    88f0:	0a 5f       	subi	r16, 0xFA	; 250
    88f2:	1f 4f       	sbci	r17, 0xFF	; 255
    88f4:	f7 e1       	ldi	r31, 0x17	; 23
    88f6:	af 0e       	add	r10, r31
    88f8:	b1 1c       	adc	r11, r1
    88fa:	87 e1       	ldi	r24, 0x17	; 23
    88fc:	c8 0e       	add	r12, r24
    88fe:	d1 1c       	adc	r13, r1
    8900:	97 e1       	ldi	r25, 0x17	; 23
    8902:	e9 0e       	add	r14, r25
    8904:	f1 1c       	adc	r15, r1


	//
	// Process patches command streams & final volume
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    8906:	ad e0       	ldi	r26, 0x0D	; 13
    8908:	ce 36       	cpi	r28, 0x6E	; 110
    890a:	da 07       	cpc	r29, r26
    890c:	09 f0       	breq	.+2      	; 0x8910 <ProcessMusic+0x420>
    890e:	37 cf       	rjmp	.-402    	; 0x877e <ProcessMusic+0x28e>
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
	}
	
}
    8910:	df 91       	pop	r29
    8912:	cf 91       	pop	r28
    8914:	1f 91       	pop	r17
    8916:	0f 91       	pop	r16
    8918:	ff 90       	pop	r15
    891a:	ef 90       	pop	r14
    891c:	df 90       	pop	r13
    891e:	cf 90       	pop	r12
    8920:	bf 90       	pop	r11
    8922:	af 90       	pop	r10
    8924:	9f 90       	pop	r9
    8926:	8f 90       	pop	r8
    8928:	7f 90       	pop	r7
    892a:	6f 90       	pop	r6
    892c:	08 95       	ret

0000892e <SetMasterVolume>:
}



void SetMasterVolume(unsigned char vol){
	masterVolume=vol;
    892e:	80 93 73 0d 	sts	0x0D73, r24
    8932:	08 95       	ret

00008934 <SetMixerNote>:
; r22: -MIDI note, 69=A5(440) for waves channels (0,1,2)
;      -Noise params for channel 3
;***********************
.section .text.SetMixerNote
SetMixerNote:
	clr r25
    8934:	99 27       	eor	r25, r25
	clr r23
    8936:	77 27       	eor	r23, r23
	#if SOUND_MIXER == MIXER_TYPE_VSYNC
		cpi r24,3
		brlo set_note_waves
		ret		
	#else
		cpi r24,3
    8938:	83 30       	cpi	r24, 0x03	; 3
		brne set_note_waves		
    893a:	09 f4       	brne	.+2      	; 0x893e <set_note_waves>
		ret
    893c:	08 95       	ret

0000893e <set_note_waves>:
	#endif
#endif

set_note_waves:
	;get step for note
	ldi ZL,lo8(steptable)
    893e:	e8 e0       	ldi	r30, 0x08	; 8
	ldi ZH,hi8(steptable)
    8940:	fa e8       	ldi	r31, 0x8A	; 138
	lsl r22
    8942:	66 0f       	add	r22, r22
	rol r23
    8944:	77 1f       	adc	r23, r23
	add ZL,r22
    8946:	e6 0f       	add	r30, r22
	adc ZH,r23	
    8948:	f7 1f       	adc	r31, r23

	lpm r26,Z+
    894a:	a5 91       	lpm	r26, Z+
	lpm r27,Z
    894c:	b4 91       	lpm	r27, Z

	ldi ZL,lo8(mixerStruct)
    894e:	e0 ed       	ldi	r30, 0xD0	; 208
	ldi ZH,hi8(mixerStruct)
    8950:	fc e0       	ldi	r31, 0x0C	; 12
	ldi r18,CHANNEL_STRUCT_SIZE
    8952:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24
    8954:	28 9f       	mul	r18, r24
	add ZL,r0
    8956:	e0 0d       	add	r30, r0
	adc ZH,r1
    8958:	f1 1d       	adc	r31, r1
	
	std Z+step_lo,r26
    895a:	a1 83       	std	Z+1, r26	; 0x01
	std Z+step_hi,r27
    895c:	b2 83       	std	Z+2, r27	; 0x02
	
	clr r1
    895e:	11 24       	eor	r1, r1
	

	ret
    8960:	08 95       	ret

00008962 <SetMixerWave>:
;         Noise channel: 0xfe=7 bit lfsr, 0xff=15 bit lfsr
;                 
;***********************
.section .text.SetMixerWave
SetMixerWave:
	clr r25
    8962:	99 27       	eor	r25, r25
	clr r23
    8964:	77 27       	eor	r23, r23

	ldi ZL,lo8(mixerStruct)
    8966:	e0 ed       	ldi	r30, 0xD0	; 208
	ldi ZH,hi8(mixerStruct)
    8968:	fc e0       	ldi	r31, 0x0C	; 12
	ldi r18,CHANNEL_STRUCT_SIZE
    896a:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24	
    896c:	28 9f       	mul	r18, r24
	add ZL,r0
    896e:	e0 0d       	add	r30, r0
	adc ZH,r1
    8970:	f1 1d       	adc	r31, r1

#if MIXER_CHAN4_TYPE == 0
	cpi r22,0xfe	;7bit lfsr
    8972:	6e 3f       	cpi	r22, 0xFE	; 254
	brne smw1
    8974:	31 f4       	brne	.+12     	; 0x8982 <smw1>
	lds r22,tr4_params
    8976:	60 91 e3 0c 	lds	r22, 0x0CE3
	andi r22,0xfe;
    897a:	6e 7f       	andi	r22, 0xFE	; 254
	sts tr4_params,r22
    897c:	60 93 e3 0c 	sts	0x0CE3, r22
	rjmp esmw	
    8980:	0b c0       	rjmp	.+22     	; 0x8998 <esmw>

00008982 <smw1>:
smw1:
	cpi r22,0xff	;15bit lfsr
    8982:	6f 3f       	cpi	r22, 0xFF	; 255
	brne smw2
    8984:	31 f4       	brne	.+12     	; 0x8992 <smw2>
	lds r22,tr4_params
    8986:	60 91 e3 0c 	lds	r22, 0x0CE3
	ori r22,0xfe;
    898a:	6e 6f       	ori	r22, 0xFE	; 254
	sts tr4_params,r22	
    898c:	60 93 e3 0c 	sts	0x0CE3, r22
	rjmp esmw
    8990:	03 c0       	rjmp	.+6      	; 0x8998 <esmw>

00008992 <smw2>:
smw2:
#endif

	ldi r23,hi8(waves)
    8992:	7c e8       	ldi	r23, 0x8C	; 140
	add r23,r22
    8994:	76 0f       	add	r23, r22
	std Z+samplepos_hi,r23 ;store path No
    8996:	75 83       	std	Z+5, r23	; 0x05

00008998 <esmw>:

esmw:
	clr r1	
    8998:	11 24       	eor	r1, r1
	ret
    899a:	08 95       	ret
	...

00008a00 <DisableSoundEngine>:
; no CPU cycles are consumed.
; C-callable
;*****************************
.section .text.DisableSoundEngine
DisableSoundEngine:	
	ldi r24,0
    8a00:	80 e0       	ldi	r24, 0x00	; 0
	sts sound_enabled,r24
    8a02:	80 93 cf 0c 	sts	0x0CCF, r24
	ret
    8a06:	08 95       	ret

00008a08 <steptable>:
    8a08:	22 00       	.word	0x0022	; ????
    8a0a:	24 00       	.word	0x0024	; ????
    8a0c:	26 00       	.word	0x0026	; ????
    8a0e:	28 00       	.word	0x0028	; ????
    8a10:	2b 00       	.word	0x002b	; ????
    8a12:	2d 00       	.word	0x002d	; ????
    8a14:	30 00       	.word	0x0030	; ????
    8a16:	33 00       	.word	0x0033	; ????
    8a18:	36 00       	.word	0x0036	; ????
    8a1a:	39 00       	.word	0x0039	; ????
    8a1c:	3d 00       	.word	0x003d	; ????
    8a1e:	40 00       	.word	0x0040	; ????
    8a20:	44 00       	.word	0x0044	; ????
    8a22:	48 00       	.word	0x0048	; ????
    8a24:	4c 00       	.word	0x004c	; ????
    8a26:	51 00       	.word	0x0051	; ????
    8a28:	56 00       	.word	0x0056	; ????
    8a2a:	5b 00       	.word	0x005b	; ????
    8a2c:	60 00       	.word	0x0060	; ????
    8a2e:	66 00       	.word	0x0066	; ????
    8a30:	6c 00       	.word	0x006c	; ????
    8a32:	73 00       	.word	0x0073	; ????
    8a34:	79 00       	.word	0x0079	; ????
    8a36:	81 00       	.word	0x0081	; ????
    8a38:	88 00       	.word	0x0088	; ????
    8a3a:	90 00       	.word	0x0090	; ????
    8a3c:	99 00       	.word	0x0099	; ????
    8a3e:	a2 00       	.word	0x00a2	; ????
    8a40:	ac 00       	.word	0x00ac	; ????
    8a42:	b6 00       	.word	0x00b6	; ????
    8a44:	c1 00       	.word	0x00c1	; ????
    8a46:	cc 00       	.word	0x00cc	; ????
    8a48:	d8 00       	.word	0x00d8	; ????
    8a4a:	e5 00       	.word	0x00e5	; ????
    8a4c:	f3 00       	.word	0x00f3	; ????
    8a4e:	01 01       	movw	r0, r2
    8a50:	10 01       	movw	r2, r0
    8a52:	21 01       	movw	r4, r2
    8a54:	32 01       	movw	r6, r4
    8a56:	44 01       	movw	r8, r8
    8a58:	57 01       	movw	r10, r14
    8a5a:	6c 01       	movw	r12, r24
    8a5c:	81 01       	movw	r16, r2
    8a5e:	98 01       	movw	r18, r16
    8a60:	b0 01       	movw	r22, r0
    8a62:	ca 01       	movw	r24, r20
    8a64:	e5 01       	movw	r28, r10
    8a66:	02 02       	muls	r16, r18
    8a68:	21 02       	muls	r18, r17
    8a6a:	41 02       	muls	r20, r17
    8a6c:	64 02       	muls	r22, r20
    8a6e:	88 02       	muls	r24, r24
    8a70:	ae 02       	muls	r26, r30
    8a72:	d7 02       	muls	r29, r23
    8a74:	03 03       	mulsu	r16, r19
    8a76:	30 03       	mulsu	r19, r16
    8a78:	61 03       	mulsu	r22, r17
    8a7a:	94 03       	fmuls	r17, r20
    8a7c:	cb 03       	fmulsu	r20, r19
    8a7e:	05 04       	cpc	r0, r5
    8a80:	42 04       	cpc	r4, r2
    8a82:	83 04       	cpc	r8, r3
    8a84:	c7 04       	cpc	r12, r7
    8a86:	10 05       	cpc	r17, r0
    8a88:	5d 05       	cpc	r21, r13
    8a8a:	af 05       	cpc	r26, r15
    8a8c:	05 06       	cpc	r0, r21
    8a8e:	61 06       	cpc	r6, r17
    8a90:	c2 06       	cpc	r12, r18
    8a92:	29 07       	cpc	r18, r25
    8a94:	96 07       	cpc	r25, r22
    8a96:	09 08       	sbc	r0, r9
    8a98:	83 08       	sbc	r8, r3
    8a9a:	05 09       	sbc	r16, r5
    8a9c:	8e 09       	sbc	r24, r14
    8a9e:	20 0a       	sbc	r2, r16
    8aa0:	ba 0a       	sbc	r11, r26
    8aa2:	5d 0b       	sbc	r21, r29
    8aa4:	0a 0c       	add	r0, r10
    8aa6:	c1 0c       	add	r12, r1
    8aa8:	84 0d       	add	r24, r4
    8aaa:	51 0e       	add	r5, r17
    8aac:	2b 0f       	add	r18, r27
    8aae:	12 10       	cpse	r1, r2
    8ab0:	07 11       	cpse	r16, r7
    8ab2:	0a 12       	cpse	r0, r26
    8ab4:	1d 13       	cpse	r17, r29
    8ab6:	40 14       	cp	r4, r0
    8ab8:	74 15       	cp	r23, r4
    8aba:	ba 16       	cp	r11, r26
    8abc:	14 18       	sub	r1, r4
    8abe:	83 19       	sub	r24, r3
    8ac0:	07 1b       	sub	r16, r23
    8ac2:	a3 1c       	adc	r10, r3
    8ac4:	57 1e       	adc	r5, r23
    8ac6:	24 20       	and	r2, r4
    8ac8:	0e 22       	and	r0, r30
    8aca:	14 24       	eor	r1, r4
    8acc:	39 26       	eor	r3, r25
    8ace:	7f 28       	or	r7, r15
    8ad0:	e8 2a       	or	r14, r24
    8ad2:	75 2d       	mov	r23, r5
    8ad4:	29 30       	cpi	r18, 0x09	; 9
    8ad6:	06 33       	cpi	r16, 0x36	; 54
    8ad8:	0f 36       	cpi	r16, 0x6F	; 111
    8ada:	45 39       	cpi	r20, 0x95	; 149
    8adc:	ad 3c       	cpi	r26, 0xCD	; 205
    8ade:	49 40       	sbci	r20, 0x09	; 9
    8ae0:	1b 44       	sbci	r17, 0x4B	; 75
    8ae2:	28 48       	sbci	r18, 0x88	; 136
    8ae4:	73 4c       	sbci	r23, 0xC3	; 195
    8ae6:	fe 50       	subi	r31, 0x0E	; 14
    8ae8:	cf 55       	subi	r28, 0x5F	; 95
    8aea:	ea 5a       	subi	r30, 0xAA	; 170
    8aec:	51 60       	ori	r21, 0x01	; 1
    8aee:	0c 66       	ori	r16, 0x6C	; 108
    8af0:	1d 6c       	ori	r17, 0xCD	; 205
    8af2:	8b 72       	andi	r24, 0x2B	; 43
    8af4:	5a 79       	andi	r21, 0x9A	; 154
    8af6:	92 80       	ldd	r9, Z+2	; 0x02
    8af8:	37 88       	ldd	r3, Z+23	; 0x17
    8afa:	50 90 e5 98 	lds	r5, 0x98E5
    8afe:	fd a1       	ldd	r31, Y+37	; 0x25
    8b00:	9f ab       	std	Y+55, r25	; 0x37
    8b02:	d3 b5       	in	r29, 0x23	; 35
    8b04:	a3 c0       	rjmp	.+326    	; 0x8c4c <waves+0x4c>
	...

00008c00 <waves>:
    8c00:	00 03       	mulsu	r16, r16
    8c02:	06 09       	sbc	r16, r6
    8c04:	0c 10       	cpse	r0, r12
    8c06:	13 16       	cp	r1, r19
    8c08:	19 1c       	adc	r1, r9
    8c0a:	1f 22       	and	r1, r31
    8c0c:	25 28       	or	r2, r5
    8c0e:	2b 2e       	mov	r2, r27
    8c10:	31 33       	cpi	r19, 0x31	; 49
    8c12:	36 39       	cpi	r19, 0x96	; 150
    8c14:	3c 3f       	cpi	r19, 0xFC	; 252
    8c16:	41 44       	sbci	r20, 0x41	; 65
    8c18:	47 49       	sbci	r20, 0x97	; 151
    8c1a:	4c 4e       	sbci	r20, 0xEC	; 236
    8c1c:	51 53       	subi	r21, 0x31	; 49
    8c1e:	55 58       	subi	r21, 0x85	; 133
    8c20:	5a 5c       	subi	r21, 0xCA	; 202
    8c22:	5e 60       	ori	r21, 0x0E	; 14
    8c24:	62 64       	ori	r22, 0x42	; 66
    8c26:	66 68       	ori	r22, 0x86	; 134
    8c28:	6a 6b       	ori	r22, 0xBA	; 186
    8c2a:	6d 6f       	ori	r22, 0xFD	; 253
    8c2c:	70 71       	andi	r23, 0x10	; 16
    8c2e:	73 74       	andi	r23, 0x43	; 67
    8c30:	75 76       	andi	r23, 0x65	; 101
    8c32:	78 79       	andi	r23, 0x98	; 152
    8c34:	7a 7a       	andi	r23, 0xAA	; 170
    8c36:	7b 7c       	andi	r23, 0xCB	; 203
    8c38:	7d 7d       	andi	r23, 0xDD	; 221
    8c3a:	7e 7e       	andi	r23, 0xEE	; 238
    8c3c:	7e 7f       	andi	r23, 0xFE	; 254
    8c3e:	7f 7f       	andi	r23, 0xFF	; 255
    8c40:	7f 7f       	andi	r23, 0xFF	; 255
    8c42:	7f 7f       	andi	r23, 0xFF	; 255
    8c44:	7e 7e       	andi	r23, 0xEE	; 238
    8c46:	7e 7d       	andi	r23, 0xDE	; 222
    8c48:	7d 7c       	andi	r23, 0xCD	; 205
    8c4a:	7b 7a       	andi	r23, 0xAB	; 171
    8c4c:	7a 79       	andi	r23, 0x9A	; 154
    8c4e:	78 76       	andi	r23, 0x68	; 104
    8c50:	75 74       	andi	r23, 0x45	; 69
    8c52:	73 71       	andi	r23, 0x13	; 19
    8c54:	70 6f       	ori	r23, 0xF0	; 240
    8c56:	6d 6b       	ori	r22, 0xBD	; 189
    8c58:	6a 68       	ori	r22, 0x8A	; 138
    8c5a:	66 64       	ori	r22, 0x46	; 70
    8c5c:	62 60       	ori	r22, 0x02	; 2
    8c5e:	5e 5c       	subi	r21, 0xCE	; 206
    8c60:	5a 58       	subi	r21, 0x8A	; 138
    8c62:	55 53       	subi	r21, 0x35	; 53
    8c64:	51 4e       	sbci	r21, 0xE1	; 225
    8c66:	4c 49       	sbci	r20, 0x9C	; 156
    8c68:	47 44       	sbci	r20, 0x47	; 71
    8c6a:	41 3f       	cpi	r20, 0xF1	; 241
    8c6c:	3c 39       	cpi	r19, 0x9C	; 156
    8c6e:	36 33       	cpi	r19, 0x36	; 54
    8c70:	31 2e       	mov	r3, r17
    8c72:	2b 28       	or	r2, r11
    8c74:	25 22       	and	r2, r21
    8c76:	1f 1c       	adc	r1, r15
    8c78:	19 16       	cp	r1, r25
    8c7a:	13 10       	cpse	r1, r3
    8c7c:	0c 09       	sbc	r16, r12
    8c7e:	06 03       	mulsu	r16, r22
    8c80:	00 fd       	sbrc	r16, 0
    8c82:	fa f7       	brpl	.-2      	; 0x8c82 <waves+0x82>
    8c84:	f4 f0       	brlt	.+60     	; 0x8cc2 <waves+0xc2>
    8c86:	ed ea       	ldi	r30, 0xAD	; 173
    8c88:	e7 e4       	ldi	r30, 0x47	; 71
    8c8a:	e1 de       	rcall	.-574    	; 0x8a4e <steptable+0x46>
    8c8c:	db d8       	rcall	.-3658   	; 0x7e44 <FormatEeprom+0x42>
    8c8e:	d5 d2       	rcall	.+1450   	; 0x923a <waves+0x63a>
    8c90:	cf cd       	rjmp	.-1122   	; 0x8830 <ProcessMusic+0x340>
    8c92:	ca c7       	rjmp	.+3988   	; 0x9c28 <LBPrintByte+0xa>
    8c94:	c4 c1       	rjmp	.+904    	; 0x901e <waves+0x41e>
    8c96:	bf bc       	out	0x2f, r11	; 47
    8c98:	b9 b7       	in	r27, 0x39	; 57
    8c9a:	b4 b2       	in	r11, 0x14	; 20
    8c9c:	af ad       	ldd	r26, Y+63	; 0x3f
    8c9e:	ab a8       	ldd	r10, Y+51	; 0x33
    8ca0:	a6 a4       	ldd	r10, Z+46	; 0x2e
    8ca2:	a2 a0       	ldd	r10, Z+34	; 0x22
    8ca4:	9e 9c       	mul	r9, r14
    8ca6:	9a 98       	cbi	0x13, 2	; 19
    8ca8:	96 95       	lsr	r25
    8caa:	93 91       	.word	0x9193	; ????
    8cac:	90 8f       	std	Z+24, r25	; 0x18
    8cae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    8cb0:	8b 8a       	std	Y+19, r8	; 0x13
    8cb2:	88 87       	std	Y+8, r24	; 0x08
    8cb4:	86 86       	std	Z+14, r8	; 0x0e
    8cb6:	85 84       	ldd	r8, Z+13	; 0x0d
    8cb8:	83 83       	std	Z+3, r24	; 0x03
    8cba:	82 82       	std	Z+2, r8	; 0x02
    8cbc:	82 81       	ldd	r24, Z+2	; 0x02
    8cbe:	81 81       	ldd	r24, Z+1	; 0x01
    8cc0:	81 81       	ldd	r24, Z+1	; 0x01
    8cc2:	81 81       	ldd	r24, Z+1	; 0x01
    8cc4:	82 82       	std	Z+2, r8	; 0x02
    8cc6:	82 83       	std	Z+2, r24	; 0x02
    8cc8:	83 84       	ldd	r8, Z+11	; 0x0b
    8cca:	85 86       	std	Z+13, r8	; 0x0d
    8ccc:	86 87       	std	Z+14, r24	; 0x0e
    8cce:	88 8a       	std	Y+16, r8	; 0x10
    8cd0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    8cd2:	8d 8f       	std	Y+29, r24	; 0x1d
    8cd4:	90 91 93 95 	lds	r25, 0x9593
    8cd8:	96 98       	cbi	0x12, 6	; 18
    8cda:	9a 9c       	mul	r9, r10
    8cdc:	9e a0       	ldd	r9, Y+38	; 0x26
    8cde:	a2 a4       	ldd	r10, Z+42	; 0x2a
    8ce0:	a6 a8       	ldd	r10, Z+54	; 0x36
    8ce2:	ab ad       	ldd	r26, Y+59	; 0x3b
    8ce4:	af b2       	in	r10, 0x1f	; 31
    8ce6:	b4 b7       	in	r27, 0x34	; 52
    8ce8:	b9 bc       	out	0x29, r11	; 41
    8cea:	bf c1       	rjmp	.+894    	; 0x906a <waves+0x46a>
    8cec:	c4 c7       	rjmp	.+3976   	; 0x9c76 <LBPrintByte+0x58>
    8cee:	ca cd       	rjmp	.-1132   	; 0x8884 <ProcessMusic+0x394>
    8cf0:	cf d2       	rcall	.+1438   	; 0x9290 <waves+0x690>
    8cf2:	d5 d8       	rcall	.-3670   	; 0x7e9e <EepromBlockExists+0x2a>
    8cf4:	db de       	rcall	.-586    	; 0x8aac <steptable+0xa4>
    8cf6:	e1 e4       	ldi	r30, 0x41	; 65
    8cf8:	e7 ea       	ldi	r30, 0xA7	; 167
    8cfa:	ed f0       	brhs	.+58     	; 0x8d36 <waves+0x136>
    8cfc:	f4 f7       	brge	.-4      	; 0x8cfa <waves+0xfa>
    8cfe:	fa fd       	.word	0xfdfa	; ????
    8d00:	80 81       	ld	r24, Z
    8d02:	82 83       	std	Z+2, r24	; 0x02
    8d04:	84 85       	ldd	r24, Z+12	; 0x0c
    8d06:	86 87       	std	Z+14, r24	; 0x0e
    8d08:	88 89       	ldd	r24, Y+16	; 0x10
    8d0a:	8a 8b       	std	Y+18, r24	; 0x12
    8d0c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    8d0e:	8e 8f       	std	Y+30, r24	; 0x1e
    8d10:	90 91 92 93 	lds	r25, 0x9392
    8d14:	94 95       	.word	0x9594	; ????
    8d16:	96 97       	sbiw	r26, 0x26	; 38
    8d18:	98 99       	sbic	0x13, 0	; 19
    8d1a:	9a 9b       	sbis	0x13, 2	; 19
    8d1c:	9c 9d       	mul	r25, r12
    8d1e:	9e 9f       	mul	r25, r30
    8d20:	a0 a1       	ldd	r26, Z+32	; 0x20
    8d22:	a2 a3       	std	Z+34, r26	; 0x22
    8d24:	a4 a5       	ldd	r26, Z+44	; 0x2c
    8d26:	a6 a7       	std	Z+46, r26	; 0x2e
    8d28:	a8 a9       	ldd	r26, Y+48	; 0x30
    8d2a:	aa ab       	std	Y+50, r26	; 0x32
    8d2c:	ac ad       	ldd	r26, Y+60	; 0x3c
    8d2e:	ae af       	std	Y+62, r26	; 0x3e
    8d30:	b0 b1       	in	r27, 0x00	; 0
    8d32:	b2 b3       	in	r27, 0x12	; 18
    8d34:	b4 b5       	in	r27, 0x24	; 36
    8d36:	b6 b7       	in	r27, 0x36	; 54
    8d38:	b8 b9       	out	0x08, r27	; 8
    8d3a:	ba bb       	out	0x1a, r27	; 26
    8d3c:	bc bd       	out	0x2c, r27	; 44
    8d3e:	be bf       	out	0x3e, r27	; 62
    8d40:	c0 c1       	rjmp	.+896    	; 0x90c2 <waves+0x4c2>
    8d42:	c2 c3       	rjmp	.+1924   	; 0x94c8 <waves+0x8c8>
    8d44:	c4 c5       	rjmp	.+2952   	; 0x98ce <DrawMap+0x16>
    8d46:	c6 c7       	rjmp	.+3980   	; 0x9cd4 <LBPrintInt+0x54>
    8d48:	c8 c9       	rjmp	.-3184   	; 0x80da <PatchCommand11+0x30>
    8d4a:	ca cb       	rjmp	.-2156   	; 0x84e0 <TriggerNote+0x70>
    8d4c:	cc cd       	rjmp	.-1128   	; 0x88e6 <ProcessMusic+0x3f6>
    8d4e:	ce cf       	rjmp	.-100    	; 0x8cec <waves+0xec>
    8d50:	d0 d1       	rcall	.+928    	; 0x90f2 <waves+0x4f2>
    8d52:	d2 d3       	rcall	.+1956   	; 0x94f8 <waves+0x8f8>
    8d54:	d4 d5       	rcall	.+2984   	; 0x98fe <DrawMap+0x46>
    8d56:	d6 d7       	rcall	.+4012   	; 0x9d04 <LBCollides+0x12>
    8d58:	d8 d9       	rcall	.-3152   	; 0x810a <PatchCommand11+0x60>
    8d5a:	da db       	rcall	.-2124   	; 0x8510 <ProcessMusic+0x20>
    8d5c:	dc dd       	rcall	.-1096   	; 0x8916 <ProcessMusic+0x426>
    8d5e:	de df       	rcall	.-68     	; 0x8d1c <waves+0x11c>
    8d60:	e0 e1       	ldi	r30, 0x10	; 16
    8d62:	e2 e3       	ldi	r30, 0x32	; 50
    8d64:	e4 e5       	ldi	r30, 0x54	; 84
    8d66:	e6 e7       	ldi	r30, 0x76	; 118
    8d68:	e8 e9       	ldi	r30, 0x98	; 152
    8d6a:	ea eb       	ldi	r30, 0xBA	; 186
    8d6c:	ec ed       	ldi	r30, 0xDC	; 220
    8d6e:	ee ef       	ldi	r30, 0xFE	; 254
    8d70:	f0 f1       	brcs	.+124    	; 0x8dee <waves+0x1ee>
    8d72:	f2 f3       	brmi	.-4      	; 0x8d70 <waves+0x170>
    8d74:	f4 f5       	brge	.+124    	; 0x8df2 <waves+0x1f2>
    8d76:	f6 f7       	brtc	.-4      	; 0x8d74 <waves+0x174>
    8d78:	f8 f9       	.word	0xf9f8	; ????
    8d7a:	fa fb       	.word	0xfbfa	; ????
    8d7c:	fc fd       	.word	0xfdfc	; ????
    8d7e:	fe ff       	.word	0xfffe	; ????
    8d80:	00 01       	movw	r0, r0
    8d82:	02 03       	mulsu	r16, r18
    8d84:	04 05       	cpc	r16, r4
    8d86:	06 07       	cpc	r16, r22
    8d88:	08 09       	sbc	r16, r8
    8d8a:	0a 0b       	sbc	r16, r26
    8d8c:	0c 0d       	add	r16, r12
    8d8e:	0e 0f       	add	r16, r30
    8d90:	10 11       	cpse	r17, r0
    8d92:	12 13       	cpse	r17, r18
    8d94:	14 15       	cp	r17, r4
    8d96:	16 17       	cp	r17, r22
    8d98:	18 19       	sub	r17, r8
    8d9a:	1a 1b       	sub	r17, r26
    8d9c:	1c 1d       	adc	r17, r12
    8d9e:	1e 1f       	adc	r17, r30
    8da0:	20 21       	and	r18, r0
    8da2:	22 23       	and	r18, r18
    8da4:	24 25       	eor	r18, r4
    8da6:	26 27       	eor	r18, r22
    8da8:	28 29       	or	r18, r8
    8daa:	2a 2b       	or	r18, r26
    8dac:	2c 2d       	mov	r18, r12
    8dae:	2e 2f       	mov	r18, r30
    8db0:	30 31       	cpi	r19, 0x10	; 16
    8db2:	32 33       	cpi	r19, 0x32	; 50
    8db4:	34 35       	cpi	r19, 0x54	; 84
    8db6:	36 37       	cpi	r19, 0x76	; 118
    8db8:	38 39       	cpi	r19, 0x98	; 152
    8dba:	3a 3b       	cpi	r19, 0xBA	; 186
    8dbc:	3c 3d       	cpi	r19, 0xDC	; 220
    8dbe:	3e 3f       	cpi	r19, 0xFE	; 254
    8dc0:	40 41       	sbci	r20, 0x10	; 16
    8dc2:	42 43       	sbci	r20, 0x32	; 50
    8dc4:	44 45       	sbci	r20, 0x54	; 84
    8dc6:	46 47       	sbci	r20, 0x76	; 118
    8dc8:	48 49       	sbci	r20, 0x98	; 152
    8dca:	4a 4b       	sbci	r20, 0xBA	; 186
    8dcc:	4c 4d       	sbci	r20, 0xDC	; 220
    8dce:	4e 4f       	sbci	r20, 0xFE	; 254
    8dd0:	50 51       	subi	r21, 0x10	; 16
    8dd2:	52 53       	subi	r21, 0x32	; 50
    8dd4:	54 55       	subi	r21, 0x54	; 84
    8dd6:	56 57       	subi	r21, 0x76	; 118
    8dd8:	58 59       	subi	r21, 0x98	; 152
    8dda:	5a 5b       	subi	r21, 0xBA	; 186
    8ddc:	5c 5d       	subi	r21, 0xDC	; 220
    8dde:	5e 5f       	subi	r21, 0xFE	; 254
    8de0:	60 61       	ori	r22, 0x10	; 16
    8de2:	62 63       	ori	r22, 0x32	; 50
    8de4:	64 65       	ori	r22, 0x54	; 84
    8de6:	66 67       	ori	r22, 0x76	; 118
    8de8:	68 69       	ori	r22, 0x98	; 152
    8dea:	6a 6b       	ori	r22, 0xBA	; 186
    8dec:	6c 6d       	ori	r22, 0xDC	; 220
    8dee:	6e 6f       	ori	r22, 0xFE	; 254
    8df0:	70 71       	andi	r23, 0x10	; 16
    8df2:	72 73       	andi	r23, 0x32	; 50
    8df4:	74 75       	andi	r23, 0x54	; 84
    8df6:	76 77       	andi	r23, 0x76	; 118
    8df8:	78 79       	andi	r23, 0x98	; 152
    8dfa:	7a 7b       	andi	r23, 0xBA	; 186
    8dfc:	7c 7d       	andi	r23, 0xDC	; 220
    8dfe:	7e 7f       	andi	r23, 0xFE	; 254
    8e00:	00 02       	muls	r16, r16
    8e02:	04 06       	cpc	r0, r20
    8e04:	08 0a       	sbc	r0, r24
    8e06:	0c 0e       	add	r0, r28
    8e08:	10 12       	cpse	r1, r16
    8e0a:	14 16       	cp	r1, r20
    8e0c:	18 1a       	sub	r1, r24
    8e0e:	1c 1e       	adc	r1, r28
    8e10:	20 22       	and	r2, r16
    8e12:	24 26       	eor	r2, r20
    8e14:	28 2a       	or	r2, r24
    8e16:	2c 2e       	mov	r2, r28
    8e18:	30 32       	cpi	r19, 0x20	; 32
    8e1a:	34 36       	cpi	r19, 0x64	; 100
    8e1c:	38 3a       	cpi	r19, 0xA8	; 168
    8e1e:	3c 3e       	cpi	r19, 0xEC	; 236
    8e20:	40 42       	sbci	r20, 0x20	; 32
    8e22:	44 46       	sbci	r20, 0x64	; 100
    8e24:	48 4a       	sbci	r20, 0xA8	; 168
    8e26:	4c 4e       	sbci	r20, 0xEC	; 236
    8e28:	50 52       	subi	r21, 0x20	; 32
    8e2a:	54 56       	subi	r21, 0x64	; 100
    8e2c:	58 5a       	subi	r21, 0xA8	; 168
    8e2e:	5c 5e       	subi	r21, 0xEC	; 236
    8e30:	60 62       	ori	r22, 0x20	; 32
    8e32:	64 66       	ori	r22, 0x64	; 100
    8e34:	68 6a       	ori	r22, 0xA8	; 168
    8e36:	6c 6e       	ori	r22, 0xEC	; 236
    8e38:	70 72       	andi	r23, 0x20	; 32
    8e3a:	74 76       	andi	r23, 0x64	; 100
    8e3c:	78 7a       	andi	r23, 0xA8	; 168
    8e3e:	7c 7e       	andi	r23, 0xEC	; 236
    8e40:	7f 7d       	andi	r23, 0xDF	; 223
    8e42:	7b 79       	andi	r23, 0x9B	; 155
    8e44:	77 75       	andi	r23, 0x57	; 87
    8e46:	73 71       	andi	r23, 0x13	; 19
    8e48:	6f 6d       	ori	r22, 0xDF	; 223
    8e4a:	6b 69       	ori	r22, 0x9B	; 155
    8e4c:	67 65       	ori	r22, 0x57	; 87
    8e4e:	63 61       	ori	r22, 0x13	; 19
    8e50:	5f 5d       	subi	r21, 0xDF	; 223
    8e52:	5b 59       	subi	r21, 0x9B	; 155
    8e54:	57 55       	subi	r21, 0x57	; 87
    8e56:	53 51       	subi	r21, 0x13	; 19
    8e58:	4f 4d       	sbci	r20, 0xDF	; 223
    8e5a:	4b 49       	sbci	r20, 0x9B	; 155
    8e5c:	47 45       	sbci	r20, 0x57	; 87
    8e5e:	43 41       	sbci	r20, 0x13	; 19
    8e60:	3f 3d       	cpi	r19, 0xDF	; 223
    8e62:	3b 39       	cpi	r19, 0x9B	; 155
    8e64:	37 35       	cpi	r19, 0x57	; 87
    8e66:	33 31       	cpi	r19, 0x13	; 19
    8e68:	2f 2d       	mov	r18, r15
    8e6a:	2b 29       	or	r18, r11
    8e6c:	27 25       	eor	r18, r7
    8e6e:	23 21       	and	r18, r3
    8e70:	1f 1d       	adc	r17, r15
    8e72:	1b 19       	sub	r17, r11
    8e74:	17 15       	cp	r17, r7
    8e76:	13 11       	cpse	r17, r3
    8e78:	0f 0d       	add	r16, r15
    8e7a:	0b 09       	sbc	r16, r11
    8e7c:	07 05       	cpc	r16, r7
    8e7e:	03 01       	movw	r0, r6
    8e80:	ff fd       	.word	0xfdff	; ????
    8e82:	fb f9       	.word	0xf9fb	; ????
    8e84:	f7 f5       	brid	.+124    	; 0x8f02 <waves+0x302>
    8e86:	f3 f1       	brvs	.+124    	; 0x8f04 <waves+0x304>
    8e88:	ef ed       	ldi	r30, 0xDF	; 223
    8e8a:	eb e9       	ldi	r30, 0x9B	; 155
    8e8c:	e7 e5       	ldi	r30, 0x57	; 87
    8e8e:	e3 e1       	ldi	r30, 0x13	; 19
    8e90:	df dd       	rcall	.-1090   	; 0x8a50 <steptable+0x48>
    8e92:	db d9       	rcall	.-3146   	; 0x824a <StartSong+0x40>
    8e94:	d7 d5       	rcall	.+2990   	; 0x9a44 <FadeIn+0x2>
    8e96:	d3 d1       	rcall	.+934    	; 0x923e <waves+0x63e>
    8e98:	cf cd       	rjmp	.-1122   	; 0x8a38 <steptable+0x30>
    8e9a:	cb c9       	rjmp	.-3178   	; 0x8232 <StartSong+0x28>
    8e9c:	c7 c5       	rjmp	.+2958   	; 0x9a2c <doFade+0x6>
    8e9e:	c3 c1       	rjmp	.+902    	; 0x9226 <waves+0x626>
    8ea0:	bf bd       	out	0x2f, r27	; 47
    8ea2:	bb b9       	out	0x0b, r27	; 11
    8ea4:	b7 b5       	in	r27, 0x27	; 39
    8ea6:	b3 b1       	in	r27, 0x03	; 3
    8ea8:	af ad       	ldd	r26, Y+63	; 0x3f
    8eaa:	ab a9       	ldd	r26, Y+51	; 0x33
    8eac:	a7 a5       	ldd	r26, Z+47	; 0x2f
    8eae:	a3 a1       	ldd	r26, Z+35	; 0x23
    8eb0:	9f 9d       	mul	r25, r15
    8eb2:	9b 99       	sbic	0x13, 3	; 19
    8eb4:	97 95       	ror	r25
    8eb6:	93 91       	.word	0x9193	; ????
    8eb8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    8eba:	8b 89       	ldd	r24, Y+19	; 0x13
    8ebc:	87 85       	ldd	r24, Z+15	; 0x0f
    8ebe:	83 81       	ldd	r24, Z+3	; 0x03
    8ec0:	80 82       	st	Z, r8
    8ec2:	84 86       	std	Z+12, r8	; 0x0c
    8ec4:	88 8a       	std	Y+16, r8	; 0x10
    8ec6:	8c 8e       	std	Y+28, r8	; 0x1c
    8ec8:	90 92 94 96 	sts	0x9694, r9
    8ecc:	98 9a       	sbi	0x13, 0	; 19
    8ece:	9c 9e       	mul	r9, r28
    8ed0:	a0 a2       	std	Z+32, r10	; 0x20
    8ed2:	a4 a6       	std	Z+44, r10	; 0x2c
    8ed4:	a8 aa       	std	Y+48, r10	; 0x30
    8ed6:	ac ae       	std	Y+60, r10	; 0x3c
    8ed8:	b0 b2       	in	r11, 0x10	; 16
    8eda:	b4 b6       	in	r11, 0x34	; 52
    8edc:	b8 ba       	out	0x18, r11	; 24
    8ede:	bc be       	out	0x3c, r11	; 60
    8ee0:	c0 c2       	rjmp	.+1408   	; 0x9462 <waves+0x862>
    8ee2:	c4 c6       	rjmp	.+3464   	; 0x9c6c <LBPrintByte+0x4e>
    8ee4:	c8 ca       	rjmp	.-2672   	; 0x8476 <TriggerNote+0x6>
    8ee6:	cc ce       	rjmp	.-616    	; 0x8c80 <waves+0x80>
    8ee8:	d0 d2       	rcall	.+1440   	; 0x948a <waves+0x88a>
    8eea:	d4 d6       	rcall	.+3496   	; 0x9c94 <LBPrintInt+0x14>
    8eec:	d8 da       	rcall	.-2640   	; 0x849e <TriggerNote+0x2e>
    8eee:	dc de       	rcall	.-584    	; 0x8ca8 <waves+0xa8>
    8ef0:	e0 e2       	ldi	r30, 0x20	; 32
    8ef2:	e4 e6       	ldi	r30, 0x64	; 100
    8ef4:	e8 ea       	ldi	r30, 0xA8	; 168
    8ef6:	ec ee       	ldi	r30, 0xEC	; 236
    8ef8:	f0 f2       	brcs	.-68     	; 0x8eb6 <waves+0x2b6>
    8efa:	f4 f6       	brge	.-68     	; 0x8eb8 <waves+0x2b8>
    8efc:	f8 fa       	.word	0xfaf8	; ????
    8efe:	fc fe       	.word	0xfefc	; ????
    8f00:	7f 7f       	andi	r23, 0xFF	; 255
    8f02:	7f 7f       	andi	r23, 0xFF	; 255
    8f04:	7f 7f       	andi	r23, 0xFF	; 255
    8f06:	7f 7f       	andi	r23, 0xFF	; 255
    8f08:	7f 7f       	andi	r23, 0xFF	; 255
    8f0a:	7f 7f       	andi	r23, 0xFF	; 255
    8f0c:	7f 7f       	andi	r23, 0xFF	; 255
    8f0e:	7f 7f       	andi	r23, 0xFF	; 255
    8f10:	7f 7f       	andi	r23, 0xFF	; 255
    8f12:	7f 7f       	andi	r23, 0xFF	; 255
    8f14:	7f 7f       	andi	r23, 0xFF	; 255
    8f16:	7f 7f       	andi	r23, 0xFF	; 255
    8f18:	7f 7f       	andi	r23, 0xFF	; 255
    8f1a:	7f 7f       	andi	r23, 0xFF	; 255
    8f1c:	7f 7f       	andi	r23, 0xFF	; 255
    8f1e:	7f 7f       	andi	r23, 0xFF	; 255
    8f20:	7f 7f       	andi	r23, 0xFF	; 255
    8f22:	7f 7f       	andi	r23, 0xFF	; 255
    8f24:	7f 7f       	andi	r23, 0xFF	; 255
    8f26:	7f 7f       	andi	r23, 0xFF	; 255
    8f28:	7f 7f       	andi	r23, 0xFF	; 255
    8f2a:	7f 7f       	andi	r23, 0xFF	; 255
    8f2c:	7f 7f       	andi	r23, 0xFF	; 255
    8f2e:	7f 7f       	andi	r23, 0xFF	; 255
    8f30:	7f 7f       	andi	r23, 0xFF	; 255
    8f32:	7f 7f       	andi	r23, 0xFF	; 255
    8f34:	7f 7f       	andi	r23, 0xFF	; 255
    8f36:	7f 7f       	andi	r23, 0xFF	; 255
    8f38:	7f 7f       	andi	r23, 0xFF	; 255
    8f3a:	7f 7f       	andi	r23, 0xFF	; 255
    8f3c:	7f 7f       	andi	r23, 0xFF	; 255
    8f3e:	7f 7f       	andi	r23, 0xFF	; 255
    8f40:	80 80       	ld	r8, Z
    8f42:	80 80       	ld	r8, Z
    8f44:	80 80       	ld	r8, Z
    8f46:	80 80       	ld	r8, Z
    8f48:	80 80       	ld	r8, Z
    8f4a:	80 80       	ld	r8, Z
    8f4c:	80 80       	ld	r8, Z
    8f4e:	80 80       	ld	r8, Z
    8f50:	80 80       	ld	r8, Z
    8f52:	80 80       	ld	r8, Z
    8f54:	80 80       	ld	r8, Z
    8f56:	80 80       	ld	r8, Z
    8f58:	80 80       	ld	r8, Z
    8f5a:	80 80       	ld	r8, Z
    8f5c:	80 80       	ld	r8, Z
    8f5e:	80 80       	ld	r8, Z
    8f60:	80 80       	ld	r8, Z
    8f62:	80 80       	ld	r8, Z
    8f64:	80 80       	ld	r8, Z
    8f66:	80 80       	ld	r8, Z
    8f68:	80 80       	ld	r8, Z
    8f6a:	80 80       	ld	r8, Z
    8f6c:	80 80       	ld	r8, Z
    8f6e:	80 80       	ld	r8, Z
    8f70:	80 80       	ld	r8, Z
    8f72:	80 80       	ld	r8, Z
    8f74:	80 80       	ld	r8, Z
    8f76:	80 80       	ld	r8, Z
    8f78:	80 80       	ld	r8, Z
    8f7a:	80 80       	ld	r8, Z
    8f7c:	80 80       	ld	r8, Z
    8f7e:	80 80       	ld	r8, Z
    8f80:	80 80       	ld	r8, Z
    8f82:	80 80       	ld	r8, Z
    8f84:	80 80       	ld	r8, Z
    8f86:	80 80       	ld	r8, Z
    8f88:	80 80       	ld	r8, Z
    8f8a:	80 80       	ld	r8, Z
    8f8c:	80 80       	ld	r8, Z
    8f8e:	80 80       	ld	r8, Z
    8f90:	80 80       	ld	r8, Z
    8f92:	80 80       	ld	r8, Z
    8f94:	80 80       	ld	r8, Z
    8f96:	80 80       	ld	r8, Z
    8f98:	80 80       	ld	r8, Z
    8f9a:	80 80       	ld	r8, Z
    8f9c:	80 80       	ld	r8, Z
    8f9e:	80 80       	ld	r8, Z
    8fa0:	80 80       	ld	r8, Z
    8fa2:	80 80       	ld	r8, Z
    8fa4:	80 80       	ld	r8, Z
    8fa6:	80 80       	ld	r8, Z
    8fa8:	80 80       	ld	r8, Z
    8faa:	80 80       	ld	r8, Z
    8fac:	80 80       	ld	r8, Z
    8fae:	80 80       	ld	r8, Z
    8fb0:	80 80       	ld	r8, Z
    8fb2:	80 80       	ld	r8, Z
    8fb4:	80 80       	ld	r8, Z
    8fb6:	80 80       	ld	r8, Z
    8fb8:	80 80       	ld	r8, Z
    8fba:	80 80       	ld	r8, Z
    8fbc:	80 80       	ld	r8, Z
    8fbe:	80 80       	ld	r8, Z
    8fc0:	80 80       	ld	r8, Z
    8fc2:	80 80       	ld	r8, Z
    8fc4:	80 80       	ld	r8, Z
    8fc6:	80 80       	ld	r8, Z
    8fc8:	80 80       	ld	r8, Z
    8fca:	80 80       	ld	r8, Z
    8fcc:	80 80       	ld	r8, Z
    8fce:	80 80       	ld	r8, Z
    8fd0:	80 80       	ld	r8, Z
    8fd2:	80 80       	ld	r8, Z
    8fd4:	80 80       	ld	r8, Z
    8fd6:	80 80       	ld	r8, Z
    8fd8:	80 80       	ld	r8, Z
    8fda:	80 80       	ld	r8, Z
    8fdc:	80 80       	ld	r8, Z
    8fde:	80 80       	ld	r8, Z
    8fe0:	80 80       	ld	r8, Z
    8fe2:	80 80       	ld	r8, Z
    8fe4:	80 80       	ld	r8, Z
    8fe6:	80 80       	ld	r8, Z
    8fe8:	80 80       	ld	r8, Z
    8fea:	80 80       	ld	r8, Z
    8fec:	80 80       	ld	r8, Z
    8fee:	80 80       	ld	r8, Z
    8ff0:	80 80       	ld	r8, Z
    8ff2:	80 80       	ld	r8, Z
    8ff4:	80 80       	ld	r8, Z
    8ff6:	80 80       	ld	r8, Z
    8ff8:	80 80       	ld	r8, Z
    8ffa:	80 80       	ld	r8, Z
    8ffc:	80 80       	ld	r8, Z
    8ffe:	80 80       	ld	r8, Z
    9000:	7f 7f       	andi	r23, 0xFF	; 255
    9002:	7f 7f       	andi	r23, 0xFF	; 255
    9004:	7f 7f       	andi	r23, 0xFF	; 255
    9006:	7f 7f       	andi	r23, 0xFF	; 255
    9008:	7f 7f       	andi	r23, 0xFF	; 255
    900a:	7f 7f       	andi	r23, 0xFF	; 255
    900c:	7f 7f       	andi	r23, 0xFF	; 255
    900e:	7f 7f       	andi	r23, 0xFF	; 255
    9010:	7f 7f       	andi	r23, 0xFF	; 255
    9012:	7f 7f       	andi	r23, 0xFF	; 255
    9014:	7f 7f       	andi	r23, 0xFF	; 255
    9016:	7f 7f       	andi	r23, 0xFF	; 255
    9018:	7f 7f       	andi	r23, 0xFF	; 255
    901a:	7f 7f       	andi	r23, 0xFF	; 255
    901c:	7f 7f       	andi	r23, 0xFF	; 255
    901e:	7f 7f       	andi	r23, 0xFF	; 255
    9020:	7f 7f       	andi	r23, 0xFF	; 255
    9022:	7f 7f       	andi	r23, 0xFF	; 255
    9024:	7f 7f       	andi	r23, 0xFF	; 255
    9026:	7f 7f       	andi	r23, 0xFF	; 255
    9028:	7f 7f       	andi	r23, 0xFF	; 255
    902a:	7f 7f       	andi	r23, 0xFF	; 255
    902c:	7f 7f       	andi	r23, 0xFF	; 255
    902e:	7f 7f       	andi	r23, 0xFF	; 255
    9030:	7f 7f       	andi	r23, 0xFF	; 255
    9032:	7f 7f       	andi	r23, 0xFF	; 255
    9034:	7f 7f       	andi	r23, 0xFF	; 255
    9036:	7f 7f       	andi	r23, 0xFF	; 255
    9038:	7f 7f       	andi	r23, 0xFF	; 255
    903a:	7f 7f       	andi	r23, 0xFF	; 255
    903c:	7f 7f       	andi	r23, 0xFF	; 255
    903e:	7f 7f       	andi	r23, 0xFF	; 255
    9040:	7f 7f       	andi	r23, 0xFF	; 255
    9042:	7f 7f       	andi	r23, 0xFF	; 255
    9044:	7f 7f       	andi	r23, 0xFF	; 255
    9046:	7f 7f       	andi	r23, 0xFF	; 255
    9048:	7f 7f       	andi	r23, 0xFF	; 255
    904a:	7f 7f       	andi	r23, 0xFF	; 255
    904c:	7f 7f       	andi	r23, 0xFF	; 255
    904e:	7f 7f       	andi	r23, 0xFF	; 255
    9050:	7f 7f       	andi	r23, 0xFF	; 255
    9052:	7f 7f       	andi	r23, 0xFF	; 255
    9054:	7f 7f       	andi	r23, 0xFF	; 255
    9056:	7f 7f       	andi	r23, 0xFF	; 255
    9058:	7f 7f       	andi	r23, 0xFF	; 255
    905a:	7f 7f       	andi	r23, 0xFF	; 255
    905c:	7f 7f       	andi	r23, 0xFF	; 255
    905e:	7f 7f       	andi	r23, 0xFF	; 255
    9060:	7f 7f       	andi	r23, 0xFF	; 255
    9062:	7f 7f       	andi	r23, 0xFF	; 255
    9064:	7f 7f       	andi	r23, 0xFF	; 255
    9066:	7f 7f       	andi	r23, 0xFF	; 255
    9068:	7f 7f       	andi	r23, 0xFF	; 255
    906a:	7f 7f       	andi	r23, 0xFF	; 255
    906c:	7f 7f       	andi	r23, 0xFF	; 255
    906e:	7f 7f       	andi	r23, 0xFF	; 255
    9070:	7f 7f       	andi	r23, 0xFF	; 255
    9072:	7f 7f       	andi	r23, 0xFF	; 255
    9074:	7f 7f       	andi	r23, 0xFF	; 255
    9076:	7f 7f       	andi	r23, 0xFF	; 255
    9078:	7f 7f       	andi	r23, 0xFF	; 255
    907a:	7f 7f       	andi	r23, 0xFF	; 255
    907c:	7f 7f       	andi	r23, 0xFF	; 255
    907e:	7f 7f       	andi	r23, 0xFF	; 255
    9080:	80 80       	ld	r8, Z
    9082:	80 80       	ld	r8, Z
    9084:	80 80       	ld	r8, Z
    9086:	80 80       	ld	r8, Z
    9088:	80 80       	ld	r8, Z
    908a:	80 80       	ld	r8, Z
    908c:	80 80       	ld	r8, Z
    908e:	80 80       	ld	r8, Z
    9090:	80 80       	ld	r8, Z
    9092:	80 80       	ld	r8, Z
    9094:	80 80       	ld	r8, Z
    9096:	80 80       	ld	r8, Z
    9098:	80 80       	ld	r8, Z
    909a:	80 80       	ld	r8, Z
    909c:	80 80       	ld	r8, Z
    909e:	80 80       	ld	r8, Z
    90a0:	80 80       	ld	r8, Z
    90a2:	80 80       	ld	r8, Z
    90a4:	80 80       	ld	r8, Z
    90a6:	80 80       	ld	r8, Z
    90a8:	80 80       	ld	r8, Z
    90aa:	80 80       	ld	r8, Z
    90ac:	80 80       	ld	r8, Z
    90ae:	80 80       	ld	r8, Z
    90b0:	80 80       	ld	r8, Z
    90b2:	80 80       	ld	r8, Z
    90b4:	80 80       	ld	r8, Z
    90b6:	80 80       	ld	r8, Z
    90b8:	80 80       	ld	r8, Z
    90ba:	80 80       	ld	r8, Z
    90bc:	80 80       	ld	r8, Z
    90be:	80 80       	ld	r8, Z
    90c0:	80 80       	ld	r8, Z
    90c2:	80 80       	ld	r8, Z
    90c4:	80 80       	ld	r8, Z
    90c6:	80 80       	ld	r8, Z
    90c8:	80 80       	ld	r8, Z
    90ca:	80 80       	ld	r8, Z
    90cc:	80 80       	ld	r8, Z
    90ce:	80 80       	ld	r8, Z
    90d0:	80 80       	ld	r8, Z
    90d2:	80 80       	ld	r8, Z
    90d4:	80 80       	ld	r8, Z
    90d6:	80 80       	ld	r8, Z
    90d8:	80 80       	ld	r8, Z
    90da:	80 80       	ld	r8, Z
    90dc:	80 80       	ld	r8, Z
    90de:	80 80       	ld	r8, Z
    90e0:	80 80       	ld	r8, Z
    90e2:	80 80       	ld	r8, Z
    90e4:	80 80       	ld	r8, Z
    90e6:	80 80       	ld	r8, Z
    90e8:	80 80       	ld	r8, Z
    90ea:	80 80       	ld	r8, Z
    90ec:	80 80       	ld	r8, Z
    90ee:	80 80       	ld	r8, Z
    90f0:	80 80       	ld	r8, Z
    90f2:	80 80       	ld	r8, Z
    90f4:	80 80       	ld	r8, Z
    90f6:	80 80       	ld	r8, Z
    90f8:	80 80       	ld	r8, Z
    90fa:	80 80       	ld	r8, Z
    90fc:	80 80       	ld	r8, Z
    90fe:	80 80       	ld	r8, Z
    9100:	7f 7f       	andi	r23, 0xFF	; 255
    9102:	7f 7f       	andi	r23, 0xFF	; 255
    9104:	7f 7f       	andi	r23, 0xFF	; 255
    9106:	7f 7f       	andi	r23, 0xFF	; 255
    9108:	7f 7f       	andi	r23, 0xFF	; 255
    910a:	7f 7f       	andi	r23, 0xFF	; 255
    910c:	7f 7f       	andi	r23, 0xFF	; 255
    910e:	7f 7f       	andi	r23, 0xFF	; 255
    9110:	7f 7f       	andi	r23, 0xFF	; 255
    9112:	7f 7f       	andi	r23, 0xFF	; 255
    9114:	7f 7f       	andi	r23, 0xFF	; 255
    9116:	7f 7f       	andi	r23, 0xFF	; 255
    9118:	7f 7f       	andi	r23, 0xFF	; 255
    911a:	7f 7f       	andi	r23, 0xFF	; 255
    911c:	7f 7f       	andi	r23, 0xFF	; 255
    911e:	7f 7f       	andi	r23, 0xFF	; 255
    9120:	7f 7f       	andi	r23, 0xFF	; 255
    9122:	7f 7f       	andi	r23, 0xFF	; 255
    9124:	7f 7f       	andi	r23, 0xFF	; 255
    9126:	7f 7f       	andi	r23, 0xFF	; 255
    9128:	7f 7f       	andi	r23, 0xFF	; 255
    912a:	7f 7f       	andi	r23, 0xFF	; 255
    912c:	7f 7f       	andi	r23, 0xFF	; 255
    912e:	7f 7f       	andi	r23, 0xFF	; 255
    9130:	7f 7f       	andi	r23, 0xFF	; 255
    9132:	7f 7f       	andi	r23, 0xFF	; 255
    9134:	7f 7f       	andi	r23, 0xFF	; 255
    9136:	7f 7f       	andi	r23, 0xFF	; 255
    9138:	7f 7f       	andi	r23, 0xFF	; 255
    913a:	7f 7f       	andi	r23, 0xFF	; 255
    913c:	7f 7f       	andi	r23, 0xFF	; 255
    913e:	7f 7f       	andi	r23, 0xFF	; 255
    9140:	7f 7f       	andi	r23, 0xFF	; 255
    9142:	7f 7f       	andi	r23, 0xFF	; 255
    9144:	7f 7f       	andi	r23, 0xFF	; 255
    9146:	7f 7f       	andi	r23, 0xFF	; 255
    9148:	7f 7f       	andi	r23, 0xFF	; 255
    914a:	7f 7f       	andi	r23, 0xFF	; 255
    914c:	7f 7f       	andi	r23, 0xFF	; 255
    914e:	7f 7f       	andi	r23, 0xFF	; 255
    9150:	7f 7f       	andi	r23, 0xFF	; 255
    9152:	7f 7f       	andi	r23, 0xFF	; 255
    9154:	7f 7f       	andi	r23, 0xFF	; 255
    9156:	7f 7f       	andi	r23, 0xFF	; 255
    9158:	7f 7f       	andi	r23, 0xFF	; 255
    915a:	7f 7f       	andi	r23, 0xFF	; 255
    915c:	7f 7f       	andi	r23, 0xFF	; 255
    915e:	7f 7f       	andi	r23, 0xFF	; 255
    9160:	7f 7f       	andi	r23, 0xFF	; 255
    9162:	7f 7f       	andi	r23, 0xFF	; 255
    9164:	7f 7f       	andi	r23, 0xFF	; 255
    9166:	7f 7f       	andi	r23, 0xFF	; 255
    9168:	7f 7f       	andi	r23, 0xFF	; 255
    916a:	7f 7f       	andi	r23, 0xFF	; 255
    916c:	7f 7f       	andi	r23, 0xFF	; 255
    916e:	7f 7f       	andi	r23, 0xFF	; 255
    9170:	7f 7f       	andi	r23, 0xFF	; 255
    9172:	7f 7f       	andi	r23, 0xFF	; 255
    9174:	7f 7f       	andi	r23, 0xFF	; 255
    9176:	7f 7f       	andi	r23, 0xFF	; 255
    9178:	7f 7f       	andi	r23, 0xFF	; 255
    917a:	7f 7f       	andi	r23, 0xFF	; 255
    917c:	7f 7f       	andi	r23, 0xFF	; 255
    917e:	7f 7f       	andi	r23, 0xFF	; 255
    9180:	7f 7f       	andi	r23, 0xFF	; 255
    9182:	7f 7f       	andi	r23, 0xFF	; 255
    9184:	7f 7f       	andi	r23, 0xFF	; 255
    9186:	7f 7f       	andi	r23, 0xFF	; 255
    9188:	7f 7f       	andi	r23, 0xFF	; 255
    918a:	7f 7f       	andi	r23, 0xFF	; 255
    918c:	7f 7f       	andi	r23, 0xFF	; 255
    918e:	7f 7f       	andi	r23, 0xFF	; 255
    9190:	7f 7f       	andi	r23, 0xFF	; 255
    9192:	7f 7f       	andi	r23, 0xFF	; 255
    9194:	7f 7f       	andi	r23, 0xFF	; 255
    9196:	7f 7f       	andi	r23, 0xFF	; 255
    9198:	7f 7f       	andi	r23, 0xFF	; 255
    919a:	7f 7f       	andi	r23, 0xFF	; 255
    919c:	7f 7f       	andi	r23, 0xFF	; 255
    919e:	7f 7f       	andi	r23, 0xFF	; 255
    91a0:	7f 7f       	andi	r23, 0xFF	; 255
    91a2:	7f 7f       	andi	r23, 0xFF	; 255
    91a4:	7f 7f       	andi	r23, 0xFF	; 255
    91a6:	7f 7f       	andi	r23, 0xFF	; 255
    91a8:	7f 7f       	andi	r23, 0xFF	; 255
    91aa:	7f 7f       	andi	r23, 0xFF	; 255
    91ac:	7f 7f       	andi	r23, 0xFF	; 255
    91ae:	7f 7f       	andi	r23, 0xFF	; 255
    91b0:	7f 7f       	andi	r23, 0xFF	; 255
    91b2:	7f 7f       	andi	r23, 0xFF	; 255
    91b4:	7f 7f       	andi	r23, 0xFF	; 255
    91b6:	7f 7f       	andi	r23, 0xFF	; 255
    91b8:	7f 7f       	andi	r23, 0xFF	; 255
    91ba:	7f 7f       	andi	r23, 0xFF	; 255
    91bc:	7f 7f       	andi	r23, 0xFF	; 255
    91be:	7f 7f       	andi	r23, 0xFF	; 255
    91c0:	80 80       	ld	r8, Z
    91c2:	80 80       	ld	r8, Z
    91c4:	80 80       	ld	r8, Z
    91c6:	80 80       	ld	r8, Z
    91c8:	80 80       	ld	r8, Z
    91ca:	80 80       	ld	r8, Z
    91cc:	80 80       	ld	r8, Z
    91ce:	80 80       	ld	r8, Z
    91d0:	80 80       	ld	r8, Z
    91d2:	80 80       	ld	r8, Z
    91d4:	80 80       	ld	r8, Z
    91d6:	80 80       	ld	r8, Z
    91d8:	80 80       	ld	r8, Z
    91da:	80 80       	ld	r8, Z
    91dc:	80 80       	ld	r8, Z
    91de:	80 80       	ld	r8, Z
    91e0:	80 80       	ld	r8, Z
    91e2:	80 80       	ld	r8, Z
    91e4:	80 80       	ld	r8, Z
    91e6:	80 80       	ld	r8, Z
    91e8:	80 80       	ld	r8, Z
    91ea:	80 80       	ld	r8, Z
    91ec:	80 80       	ld	r8, Z
    91ee:	80 80       	ld	r8, Z
    91f0:	80 80       	ld	r8, Z
    91f2:	80 80       	ld	r8, Z
    91f4:	80 80       	ld	r8, Z
    91f6:	80 80       	ld	r8, Z
    91f8:	80 80       	ld	r8, Z
    91fa:	80 80       	ld	r8, Z
    91fc:	80 80       	ld	r8, Z
    91fe:	80 80       	ld	r8, Z
    9200:	03 09       	sbc	r16, r3
    9202:	13 1e       	adc	r1, r19
    9204:	28 31       	cpi	r18, 0x18	; 24
    9206:	3a 40       	sbci	r19, 0x0A	; 10
    9208:	46 4c       	sbci	r20, 0xC6	; 198
    920a:	50 54       	subi	r21, 0x40	; 64
    920c:	58 5b       	subi	r21, 0xB8	; 184
    920e:	5e 61       	ori	r21, 0x1E	; 30
    9210:	63 65       	ori	r22, 0x53	; 83
    9212:	67 69       	ori	r22, 0x97	; 151
    9214:	6b 6c       	ori	r22, 0xCB	; 203
    9216:	6e 6f       	ori	r22, 0xFE	; 254
    9218:	70 71       	andi	r23, 0x10	; 16
    921a:	72 73       	andi	r23, 0x32	; 50
    921c:	74 75       	andi	r23, 0x54	; 84
    921e:	76 77       	andi	r23, 0x76	; 118
    9220:	77 78       	andi	r23, 0x87	; 135
    9222:	79 79       	andi	r23, 0x99	; 153
    9224:	7a 7a       	andi	r23, 0xAA	; 170
    9226:	7b 7b       	andi	r23, 0xBB	; 187
    9228:	7c 7c       	andi	r23, 0xCC	; 204
    922a:	7c 7d       	andi	r23, 0xDC	; 220
    922c:	7d 7d       	andi	r23, 0xDD	; 221
    922e:	7e 7e       	andi	r23, 0xEE	; 238
    9230:	7e 7e       	andi	r23, 0xEE	; 238
    9232:	7f 7f       	andi	r23, 0xFF	; 255
    9234:	7f 7f       	andi	r23, 0xFF	; 255
    9236:	7f 7f       	andi	r23, 0xFF	; 255
    9238:	7f 7f       	andi	r23, 0xFF	; 255
    923a:	7f 7f       	andi	r23, 0xFF	; 255
    923c:	7f 7f       	andi	r23, 0xFF	; 255
    923e:	7f 7f       	andi	r23, 0xFF	; 255
    9240:	7f 7f       	andi	r23, 0xFF	; 255
    9242:	7f 7f       	andi	r23, 0xFF	; 255
    9244:	7f 7f       	andi	r23, 0xFF	; 255
    9246:	7f 7f       	andi	r23, 0xFF	; 255
    9248:	7f 7f       	andi	r23, 0xFF	; 255
    924a:	7f 7f       	andi	r23, 0xFF	; 255
    924c:	7f 7e       	andi	r23, 0xEF	; 239
    924e:	7e 7e       	andi	r23, 0xEE	; 238
    9250:	7e 7d       	andi	r23, 0xDE	; 222
    9252:	7d 7d       	andi	r23, 0xDD	; 221
    9254:	7c 7c       	andi	r23, 0xCC	; 204
    9256:	7c 7b       	andi	r23, 0xBC	; 188
    9258:	7b 7a       	andi	r23, 0xAB	; 171
    925a:	7a 79       	andi	r23, 0x9A	; 154
    925c:	79 78       	andi	r23, 0x89	; 137
    925e:	77 77       	andi	r23, 0x77	; 119
    9260:	76 75       	andi	r23, 0x56	; 86
    9262:	74 73       	andi	r23, 0x34	; 52
    9264:	72 71       	andi	r23, 0x12	; 18
    9266:	70 6f       	ori	r23, 0xF0	; 240
    9268:	6e 6c       	ori	r22, 0xCE	; 206
    926a:	6b 69       	ori	r22, 0x9B	; 155
    926c:	67 65       	ori	r22, 0x57	; 87
    926e:	63 61       	ori	r22, 0x13	; 19
    9270:	5e 5b       	subi	r21, 0xBE	; 190
    9272:	58 54       	subi	r21, 0x48	; 72
    9274:	50 4c       	sbci	r21, 0xC0	; 192
    9276:	46 40       	sbci	r20, 0x06	; 6
    9278:	3a 31       	cpi	r19, 0x1A	; 26
    927a:	28 1e       	adc	r2, r24
    927c:	13 09       	sbc	r17, r3
    927e:	03 00       	.word	0x0003	; ????
    9280:	c6 cc       	rjmp	.-1652   	; 0x8c0e <waves+0xe>
    9282:	d5 db       	rcall	.-2134   	; 0x8a2e <steptable+0x26>
    9284:	df e3       	ldi	r29, 0x3F	; 63
    9286:	e5 e7       	ldi	r30, 0x75	; 117
    9288:	e9 ea       	ldi	r30, 0xA9	; 169
    928a:	eb ec       	ldi	r30, 0xCB	; 203
    928c:	ed ee       	ldi	r30, 0xED	; 237
    928e:	ef ef       	ldi	r30, 0xFF	; 255
    9290:	f0 f0       	brcs	.+60     	; 0x92ce <waves+0x6ce>
    9292:	f0 f1       	brcs	.+124    	; 0x9310 <waves+0x710>
    9294:	f1 f1       	breq	.+124    	; 0x9312 <waves+0x712>
    9296:	f1 f2       	breq	.-68     	; 0x9254 <waves+0x654>
    9298:	f2 f2       	brmi	.-68     	; 0x9256 <waves+0x656>
    929a:	f2 f2       	brmi	.-68     	; 0x9258 <waves+0x658>
    929c:	f2 f2       	brmi	.-68     	; 0x925a <waves+0x65a>
    929e:	f2 f3       	brmi	.-4      	; 0x929c <waves+0x69c>
    92a0:	f3 f3       	brvs	.-4      	; 0x929e <waves+0x69e>
    92a2:	f3 f3       	brvs	.-4      	; 0x92a0 <waves+0x6a0>
    92a4:	f3 f3       	brvs	.-4      	; 0x92a2 <waves+0x6a2>
    92a6:	f3 f3       	brvs	.-4      	; 0x92a4 <waves+0x6a4>
    92a8:	f3 f3       	brvs	.-4      	; 0x92a6 <waves+0x6a6>
    92aa:	f3 f3       	brvs	.-4      	; 0x92a8 <waves+0x6a8>
    92ac:	f3 f3       	brvs	.-4      	; 0x92aa <waves+0x6aa>
    92ae:	f3 f3       	brvs	.-4      	; 0x92ac <waves+0x6ac>
    92b0:	f3 f3       	brvs	.-4      	; 0x92ae <waves+0x6ae>
    92b2:	f3 f3       	brvs	.-4      	; 0x92b0 <waves+0x6b0>
    92b4:	f3 f3       	brvs	.-4      	; 0x92b2 <waves+0x6b2>
    92b6:	f3 f3       	brvs	.-4      	; 0x92b4 <waves+0x6b4>
    92b8:	f3 f3       	brvs	.-4      	; 0x92b6 <waves+0x6b6>
    92ba:	f3 f3       	brvs	.-4      	; 0x92b8 <waves+0x6b8>
    92bc:	f3 f3       	brvs	.-4      	; 0x92ba <waves+0x6ba>
    92be:	f3 f3       	brvs	.-4      	; 0x92bc <waves+0x6bc>
    92c0:	f3 f3       	brvs	.-4      	; 0x92be <waves+0x6be>
    92c2:	f3 f3       	brvs	.-4      	; 0x92c0 <waves+0x6c0>
    92c4:	f3 f3       	brvs	.-4      	; 0x92c2 <waves+0x6c2>
    92c6:	f3 f3       	brvs	.-4      	; 0x92c4 <waves+0x6c4>
    92c8:	f3 f3       	brvs	.-4      	; 0x92c6 <waves+0x6c6>
    92ca:	f3 f3       	brvs	.-4      	; 0x92c8 <waves+0x6c8>
    92cc:	f3 f3       	brvs	.-4      	; 0x92ca <waves+0x6ca>
    92ce:	f3 f3       	brvs	.-4      	; 0x92cc <waves+0x6cc>
    92d0:	f3 f3       	brvs	.-4      	; 0x92ce <waves+0x6ce>
    92d2:	f3 f3       	brvs	.-4      	; 0x92d0 <waves+0x6d0>
    92d4:	f3 f3       	brvs	.-4      	; 0x92d2 <waves+0x6d2>
    92d6:	f3 f3       	brvs	.-4      	; 0x92d4 <waves+0x6d4>
    92d8:	f3 f3       	brvs	.-4      	; 0x92d6 <waves+0x6d6>
    92da:	f3 f3       	brvs	.-4      	; 0x92d8 <waves+0x6d8>
    92dc:	f3 f3       	brvs	.-4      	; 0x92da <waves+0x6da>
    92de:	f3 f3       	brvs	.-4      	; 0x92dc <waves+0x6dc>
    92e0:	f2 f2       	brmi	.-68     	; 0x929e <waves+0x69e>
    92e2:	f2 f2       	brmi	.-68     	; 0x92a0 <waves+0x6a0>
    92e4:	f2 f2       	brmi	.-68     	; 0x92a2 <waves+0x6a2>
    92e6:	f2 f2       	brmi	.-68     	; 0x92a4 <waves+0x6a4>
    92e8:	f1 f1       	breq	.+124    	; 0x9366 <waves+0x766>
    92ea:	f1 f1       	breq	.+124    	; 0x9368 <waves+0x768>
    92ec:	f0 f0       	brcs	.+60     	; 0x932a <waves+0x72a>
    92ee:	f0 ef       	ldi	r31, 0xF0	; 240
    92f0:	ef ee       	ldi	r30, 0xEF	; 239
    92f2:	ed ec       	ldi	r30, 0xCD	; 205
    92f4:	eb ea       	ldi	r30, 0xAB	; 171
    92f6:	e9 e7       	ldi	r30, 0x79	; 121
    92f8:	e5 e3       	ldi	r30, 0x35	; 53
    92fa:	df db       	rcall	.-2114   	; 0x8aba <steptable+0xb2>
    92fc:	d5 cc       	rjmp	.-1622   	; 0x8ca8 <waves+0xa8>
    92fe:	c6 00       	.word	0x00c6	; ????
    9300:	00 28       	or	r0, r0
    9302:	3d 42       	sbci	r19, 0x2D	; 45
    9304:	30 2d       	mov	r19, r0
    9306:	2c 2b       	or	r18, r28
    9308:	2c 2d       	mov	r18, r12
    930a:	2e 2f       	mov	r18, r30
    930c:	30 32       	cpi	r19, 0x20	; 32
    930e:	33 35       	cpi	r19, 0x53	; 83
    9310:	37 39       	cpi	r19, 0x97	; 151
    9312:	3b 3d       	cpi	r19, 0xDB	; 219
    9314:	3f 41       	sbci	r19, 0x1F	; 31
    9316:	43 45       	sbci	r20, 0x53	; 83
    9318:	48 4a       	sbci	r20, 0xA8	; 168
    931a:	4c 4e       	sbci	r20, 0xEC	; 236
    931c:	50 53       	subi	r21, 0x30	; 48
    931e:	55 57       	subi	r21, 0x75	; 117
    9320:	59 5b       	subi	r21, 0xB9	; 185
    9322:	5d 5f       	subi	r21, 0xFD	; 253
    9324:	61 63       	ori	r22, 0x31	; 49
    9326:	65 67       	ori	r22, 0x75	; 117
    9328:	69 6b       	ori	r22, 0xB9	; 185
    932a:	6c 6e       	ori	r22, 0xEC	; 236
    932c:	70 71       	andi	r23, 0x10	; 16
    932e:	73 74       	andi	r23, 0x43	; 67
    9330:	75 77       	andi	r23, 0x75	; 117
    9332:	78 79       	andi	r23, 0x98	; 152
    9334:	7a 7b       	andi	r23, 0xBA	; 186
    9336:	7c 7d       	andi	r23, 0xDC	; 220
    9338:	7d 7e       	andi	r23, 0xED	; 237
    933a:	7e 7f       	andi	r23, 0xFE	; 254
    933c:	7f 7f       	andi	r23, 0xFF	; 255
    933e:	7f 7f       	andi	r23, 0xFF	; 255
    9340:	7f 7f       	andi	r23, 0xFF	; 255
    9342:	7f 7f       	andi	r23, 0xFF	; 255
    9344:	7f 7f       	andi	r23, 0xFF	; 255
    9346:	7e 7e       	andi	r23, 0xEE	; 238
    9348:	7d 7d       	andi	r23, 0xDD	; 221
    934a:	7c 7b       	andi	r23, 0xBC	; 188
    934c:	7a 79       	andi	r23, 0x9A	; 154
    934e:	78 77       	andi	r23, 0x78	; 120
    9350:	75 74       	andi	r23, 0x45	; 69
    9352:	73 71       	andi	r23, 0x13	; 19
    9354:	70 6e       	ori	r23, 0xE0	; 224
    9356:	6c 6b       	ori	r22, 0xBC	; 188
    9358:	69 67       	ori	r22, 0x79	; 121
    935a:	65 63       	ori	r22, 0x35	; 53
    935c:	61 5f       	subi	r22, 0xF1	; 241
    935e:	5d 5b       	subi	r21, 0xBD	; 189
    9360:	59 57       	subi	r21, 0x79	; 121
    9362:	55 53       	subi	r21, 0x35	; 53
    9364:	50 4e       	sbci	r21, 0xE0	; 224
    9366:	4c 4a       	sbci	r20, 0xAC	; 172
    9368:	48 45       	sbci	r20, 0x58	; 88
    936a:	43 41       	sbci	r20, 0x13	; 19
    936c:	3f 3d       	cpi	r19, 0xDF	; 223
    936e:	3b 39       	cpi	r19, 0x9B	; 155
    9370:	37 35       	cpi	r19, 0x57	; 87
    9372:	33 32       	cpi	r19, 0x23	; 35
    9374:	30 2f       	mov	r19, r16
    9376:	2e 2d       	mov	r18, r14
    9378:	2c 2b       	or	r18, r28
    937a:	2c 2d       	mov	r18, r12
    937c:	30 42       	sbci	r19, 0x20	; 32
    937e:	3d 28       	or	r3, r13
    9380:	00 e9       	ldi	r16, 0x90	; 144
    9382:	e5 fe       	sbrs	r14, 5
    9384:	d4 d7       	rcall	.+4008   	; 0xa32e <init_enemy_shark+0x7e>
    9386:	d7 d7       	rcall	.+4014   	; 0xa336 <init_enemy_shark+0x86>
    9388:	d6 d4       	rcall	.+2476   	; 0x9d36 <LBCollides+0x44>
    938a:	d2 d0       	rcall	.+420    	; 0x9530 <waves+0x930>
    938c:	ce cc       	rjmp	.-1636   	; 0x8d2a <waves+0x12a>
    938e:	ca c8       	rjmp	.-3692   	; 0x8524 <ProcessMusic+0x34>
    9390:	c6 c3       	rjmp	.+1932   	; 0x9b1e <LBGetJoyPadState+0xe>
    9392:	c1 bf       	out	0x31, r28	; 49
    9394:	bd ba       	out	0x1d, r11	; 29
    9396:	b8 b6       	in	r11, 0x38	; 56
    9398:	b4 b1       	in	r27, 0x04	; 4
    939a:	af ad       	ldd	r26, Y+63	; 0x3f
    939c:	ab a9       	ldd	r26, Y+51	; 0x33
    939e:	a7 a5       	ldd	r26, Z+47	; 0x2f
    93a0:	a3 a1       	ldd	r26, Z+35	; 0x23
    93a2:	9f 9e       	mul	r9, r31
    93a4:	9c 9a       	sbi	0x13, 4	; 19
    93a6:	99 97       	sbiw	r26, 0x29	; 41
    93a8:	95 94       	asr	r9
    93aa:	93 91       	.word	0x9193	; ????
    93ac:	90 8f       	std	Z+24, r25	; 0x18
    93ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    93b0:	8b 8a       	std	Y+19, r8	; 0x13
    93b2:	89 88       	ldd	r8, Y+17	; 0x11
    93b4:	88 87       	std	Y+8, r24	; 0x08
    93b6:	86 85       	ldd	r24, Z+14	; 0x0e
    93b8:	85 84       	ldd	r8, Z+13	; 0x0d
    93ba:	84 84       	ldd	r8, Z+12	; 0x0c
    93bc:	83 83       	std	Z+3, r24	; 0x03
    93be:	83 83       	std	Z+3, r24	; 0x03
    93c0:	83 83       	std	Z+3, r24	; 0x03
    93c2:	83 83       	std	Z+3, r24	; 0x03
    93c4:	83 84       	ldd	r8, Z+11	; 0x0b
    93c6:	84 84       	ldd	r8, Z+12	; 0x0c
    93c8:	85 85       	ldd	r24, Z+13	; 0x0d
    93ca:	86 87       	std	Z+14, r24	; 0x0e
    93cc:	88 88       	ldd	r8, Y+16	; 0x10
    93ce:	89 8a       	std	Y+17, r8	; 0x11
    93d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    93d2:	8d 8f       	std	Y+29, r24	; 0x1d
    93d4:	90 91 93 94 	lds	r25, 0x9493
    93d8:	95 97       	sbiw	r26, 0x25	; 37
    93da:	99 9a       	sbi	0x13, 1	; 19
    93dc:	9c 9e       	mul	r9, r28
    93de:	9f a1       	ldd	r25, Y+39	; 0x27
    93e0:	a3 a5       	ldd	r26, Z+43	; 0x2b
    93e2:	a7 a9       	ldd	r26, Z+55	; 0x37
    93e4:	ab ad       	ldd	r26, Y+59	; 0x3b
    93e6:	af b1       	in	r26, 0x0f	; 15
    93e8:	b4 b6       	in	r11, 0x34	; 52
    93ea:	b8 ba       	out	0x18, r11	; 24
    93ec:	bd bf       	out	0x3d, r27	; 61
    93ee:	c1 c3       	rjmp	.+1922   	; 0x9b72 <LBGetJoyPadState+0x62>
    93f0:	c6 c8       	rjmp	.-3700   	; 0x857e <ProcessMusic+0x8e>
    93f2:	ca cc       	rjmp	.-1644   	; 0x8d88 <waves+0x188>
    93f4:	ce d0       	rcall	.+412    	; 0x9592 <waves+0x992>
    93f6:	d2 d4       	rcall	.+2468   	; 0x9d9c <LBMapSprite+0x14>
    93f8:	d6 d7       	rcall	.+4012   	; 0xa3a6 <clear_overlay+0x4>
    93fa:	d7 d7       	rcall	.+4014   	; 0xa3aa <clear_overlay+0x8>
    93fc:	d4 fe       	sbrs	r13, 4
    93fe:	e5 e9       	ldi	r30, 0x95	; 149
    9400:	f9 f8       	.word	0xf8f9	; ????
    9402:	f9 f5       	brne	.+126    	; 0x9482 <waves+0x882>
    9404:	eb e1       	ldi	r30, 0x1B	; 27
    9406:	dd de       	rcall	.-582    	; 0x91c2 <waves+0x5c2>
    9408:	e0 e2       	ldi	r30, 0x20	; 32
    940a:	e4 e5       	ldi	r30, 0x54	; 84
    940c:	e6 e5       	ldi	r30, 0x56	; 86
    940e:	e4 e2       	ldi	r30, 0x24	; 36
    9410:	de d9       	rcall	.-3140   	; 0x87ce <ProcessMusic+0x2de>
    9412:	d2 ca       	rjmp	.-2652   	; 0x89b8 <esmw+0x20>
    9414:	c1 b7       	in	r28, 0x31	; 49
    9416:	ac a2       	std	Y+36, r10	; 0x24
    9418:	99 91       	ld	r25, Y+
    941a:	8a 86       	std	Y+10, r8	; 0x0a
    941c:	83 81       	ldd	r24, Z+3	; 0x03
    941e:	80 80       	ld	r8, Z
    9420:	81 82       	std	Z+1, r8	; 0x01
    9422:	83 85       	ldd	r24, Z+11	; 0x0b
    9424:	86 88       	ldd	r8, Z+22	; 0x16
    9426:	8a 8c       	ldd	r8, Y+26	; 0x1a
    9428:	8d 8f       	std	Y+29, r24	; 0x1d
    942a:	90 92 93 95 	sts	0x9593, r9
    942e:	96 97       	sbiw	r26, 0x26	; 38
    9430:	98 99       	sbic	0x13, 0	; 19
    9432:	9a 9b       	sbis	0x13, 2	; 19
    9434:	9b 9c       	mul	r9, r11
    9436:	9d 9d       	mul	r25, r13
    9438:	9d 9e       	mul	r9, r29
    943a:	9e 9e       	mul	r9, r30
    943c:	9f 9f       	mul	r25, r31
    943e:	9f 9f       	mul	r25, r31
    9440:	9f 9f       	mul	r25, r31
    9442:	9f 9e       	mul	r9, r31
    9444:	9e 9e       	mul	r9, r30
    9446:	9d 9d       	mul	r25, r13
    9448:	9d 9c       	mul	r9, r13
    944a:	9b 9b       	sbis	0x13, 3	; 19
    944c:	9a 99       	sbic	0x13, 2	; 19
    944e:	98 97       	sbiw	r26, 0x28	; 40
    9450:	96 95       	lsr	r25
    9452:	93 92       	.word	0x9293	; ????
    9454:	90 8f       	std	Z+24, r25	; 0x18
    9456:	8d 8c       	ldd	r8, Y+29	; 0x1d
    9458:	8a 88       	ldd	r8, Y+18	; 0x12
    945a:	86 85       	ldd	r24, Z+14	; 0x0e
    945c:	83 82       	std	Z+3, r8	; 0x03
    945e:	81 80       	ldd	r8, Z+1	; 0x01
    9460:	80 81       	ld	r24, Z
    9462:	83 86       	std	Z+11, r8	; 0x0b
    9464:	8a 91       	ld	r24, -Y
    9466:	99 a2       	std	Y+33, r9	; 0x21
    9468:	ac b7       	in	r26, 0x3c	; 60
    946a:	c1 ca       	rjmp	.-2686   	; 0x89ee <esmw+0x56>
    946c:	d2 d9       	rcall	.-3164   	; 0x8812 <ProcessMusic+0x322>
    946e:	de e2       	ldi	r29, 0x2E	; 46
    9470:	e4 e5       	ldi	r30, 0x54	; 84
    9472:	e6 e5       	ldi	r30, 0x56	; 86
    9474:	e4 e2       	ldi	r30, 0x24	; 36
    9476:	e0 de       	rcall	.-576    	; 0x9238 <waves+0x638>
    9478:	dd e1       	ldi	r29, 0x1D	; 29
    947a:	eb f5       	brvc	.+122    	; 0x94f6 <waves+0x8f6>
    947c:	f9 f8       	.word	0xf8f9	; ????
    947e:	f9 00       	.word	0x00f9	; ????
    9480:	07 08       	sbc	r0, r7
    9482:	07 0b       	sbc	r16, r23
    9484:	15 1f       	adc	r17, r21
    9486:	23 22       	and	r2, r19
    9488:	20 1e       	adc	r2, r16
    948a:	1c 1b       	sub	r17, r28
    948c:	1a 1b       	sub	r17, r26
    948e:	1c 1e       	adc	r1, r28
    9490:	22 27       	eor	r18, r18
    9492:	2e 36       	cpi	r18, 0x6E	; 110
    9494:	3f 49       	sbci	r19, 0x9F	; 159
    9496:	54 5e       	subi	r21, 0xE4	; 228
    9498:	67 6f       	ori	r22, 0xF7	; 247
    949a:	76 7a       	andi	r23, 0xA6	; 166
    949c:	7e 7f       	andi	r23, 0xFE	; 254
    949e:	7f 7f       	andi	r23, 0xFF	; 255
    94a0:	7f 7e       	andi	r23, 0xEF	; 239
    94a2:	7d 7b       	andi	r23, 0xBD	; 189
    94a4:	7a 78       	andi	r23, 0x8A	; 138
    94a6:	76 74       	andi	r23, 0x46	; 70
    94a8:	73 71       	andi	r23, 0x13	; 19
    94aa:	70 6e       	ori	r23, 0xE0	; 224
    94ac:	6d 6b       	ori	r22, 0xBD	; 189
    94ae:	6a 69       	ori	r22, 0x9A	; 154
    94b0:	68 67       	ori	r22, 0x78	; 120
    94b2:	66 65       	ori	r22, 0x56	; 86
    94b4:	65 64       	ori	r22, 0x45	; 69
    94b6:	64 63       	ori	r22, 0x34	; 52
    94b8:	63 62       	ori	r22, 0x23	; 35
    94ba:	62 62       	ori	r22, 0x22	; 34
    94bc:	61 61       	ori	r22, 0x11	; 17
    94be:	61 61       	ori	r22, 0x11	; 17
    94c0:	61 61       	ori	r22, 0x11	; 17
    94c2:	61 62       	ori	r22, 0x21	; 33
    94c4:	62 62       	ori	r22, 0x22	; 34
    94c6:	63 63       	ori	r22, 0x33	; 51
    94c8:	63 64       	ori	r22, 0x43	; 67
    94ca:	65 65       	ori	r22, 0x55	; 85
    94cc:	66 67       	ori	r22, 0x76	; 118
    94ce:	68 69       	ori	r22, 0x98	; 152
    94d0:	6a 6b       	ori	r22, 0xBA	; 186
    94d2:	6d 6e       	ori	r22, 0xED	; 237
    94d4:	70 71       	andi	r23, 0x10	; 16
    94d6:	73 74       	andi	r23, 0x43	; 67
    94d8:	76 78       	andi	r23, 0x86	; 134
    94da:	7a 7b       	andi	r23, 0xBA	; 186
    94dc:	7d 7e       	andi	r23, 0xED	; 237
    94de:	7f 7f       	andi	r23, 0xFF	; 255
    94e0:	7f 7f       	andi	r23, 0xFF	; 255
    94e2:	7e 7a       	andi	r23, 0xAE	; 174
    94e4:	76 6f       	ori	r23, 0xF6	; 246
    94e6:	67 5e       	subi	r22, 0xE7	; 231
    94e8:	54 49       	sbci	r21, 0x94	; 148
    94ea:	3f 36       	cpi	r19, 0x6F	; 111
    94ec:	2e 27       	eor	r18, r30
    94ee:	22 1e       	adc	r2, r18
    94f0:	1c 1b       	sub	r17, r28
    94f2:	1a 1b       	sub	r17, r26
    94f4:	1c 1e       	adc	r1, r28
    94f6:	20 22       	and	r2, r16
    94f8:	23 1f       	adc	r18, r19
    94fa:	15 0b       	sbc	r17, r21
    94fc:	07 08       	sbc	r0, r7
    94fe:	07 00       	.word	0x0007	; ????
    9500:	1f 31       	cpi	r17, 0x1F	; 31
    9502:	3d 44       	sbci	r19, 0x4D	; 77
    9504:	4e 53       	subi	r20, 0x3E	; 62
    9506:	54 56       	subi	r21, 0x64	; 100
    9508:	5a 5f       	subi	r21, 0xFA	; 250
    950a:	64 69       	ori	r22, 0x94	; 148
    950c:	6e 74       	andi	r22, 0x4E	; 78
    950e:	76 79       	andi	r23, 0x96	; 150
    9510:	7c 7f       	andi	r23, 0xFC	; 252
    9512:	7f 7f       	andi	r23, 0xFF	; 255
    9514:	7f 7f       	andi	r23, 0xFF	; 255
    9516:	7f 7f       	andi	r23, 0xFF	; 255
    9518:	7f 7f       	andi	r23, 0xFF	; 255
    951a:	7f 7f       	andi	r23, 0xFF	; 255
    951c:	7f 7f       	andi	r23, 0xFF	; 255
    951e:	7f 7f       	andi	r23, 0xFF	; 255
    9520:	7f 7f       	andi	r23, 0xFF	; 255
    9522:	7f 7f       	andi	r23, 0xFF	; 255
    9524:	7f 7f       	andi	r23, 0xFF	; 255
    9526:	7f 7f       	andi	r23, 0xFF	; 255
    9528:	7f 7f       	andi	r23, 0xFF	; 255
    952a:	7f 7f       	andi	r23, 0xFF	; 255
    952c:	7f 7f       	andi	r23, 0xFF	; 255
    952e:	7f 7f       	andi	r23, 0xFF	; 255
    9530:	7f 7f       	andi	r23, 0xFF	; 255
    9532:	7f 7f       	andi	r23, 0xFF	; 255
    9534:	7f 7f       	andi	r23, 0xFF	; 255
    9536:	7f 7f       	andi	r23, 0xFF	; 255
    9538:	7f 7f       	andi	r23, 0xFF	; 255
    953a:	7f 7f       	andi	r23, 0xFF	; 255
    953c:	7f 7f       	andi	r23, 0xFF	; 255
    953e:	7f 7f       	andi	r23, 0xFF	; 255
    9540:	7f 7f       	andi	r23, 0xFF	; 255
    9542:	7f 7f       	andi	r23, 0xFF	; 255
    9544:	7f 7f       	andi	r23, 0xFF	; 255
    9546:	7f 7f       	andi	r23, 0xFF	; 255
    9548:	7f 7f       	andi	r23, 0xFF	; 255
    954a:	7f 7f       	andi	r23, 0xFF	; 255
    954c:	7f 7f       	andi	r23, 0xFF	; 255
    954e:	7f 7f       	andi	r23, 0xFF	; 255
    9550:	7f 7f       	andi	r23, 0xFF	; 255
    9552:	7f 7f       	andi	r23, 0xFF	; 255
    9554:	7f 7f       	andi	r23, 0xFF	; 255
    9556:	7f 7f       	andi	r23, 0xFF	; 255
    9558:	7f 7f       	andi	r23, 0xFF	; 255
    955a:	7f 7f       	andi	r23, 0xFF	; 255
    955c:	7f 7f       	andi	r23, 0xFF	; 255
    955e:	7f 7f       	andi	r23, 0xFF	; 255
    9560:	7f 7f       	andi	r23, 0xFF	; 255
    9562:	7f 7f       	andi	r23, 0xFF	; 255
    9564:	7f 7f       	andi	r23, 0xFF	; 255
    9566:	7f 7f       	andi	r23, 0xFF	; 255
    9568:	7f 7f       	andi	r23, 0xFF	; 255
    956a:	7f 7f       	andi	r23, 0xFF	; 255
    956c:	7f 7f       	andi	r23, 0xFF	; 255
    956e:	7f 7f       	andi	r23, 0xFF	; 255
    9570:	7f 7f       	andi	r23, 0xFF	; 255
    9572:	7f 7f       	andi	r23, 0xFF	; 255
    9574:	7f 7f       	andi	r23, 0xFF	; 255
    9576:	7f 7f       	andi	r23, 0xFF	; 255
    9578:	7f 7f       	andi	r23, 0xFF	; 255
    957a:	7f 7c       	andi	r23, 0xCF	; 207
    957c:	78 71       	andi	r23, 0x18	; 24
    957e:	68 4c       	sbci	r22, 0xC8	; 200
    9580:	2c 1c       	adc	r2, r12
    9582:	12 0c       	add	r1, r2
    9584:	0a 0b       	sbc	r16, r26
    9586:	0a 05       	cpc	r16, r10
    9588:	fd f3       	brhs	.-2      	; 0x9588 <waves+0x988>
    958a:	e9 df       	rcall	.-46     	; 0x955e <waves+0x95e>
    958c:	d4 ca       	rjmp	.-2648   	; 0x8b36 <steptable+0x12e>
    958e:	c0 b7       	in	r28, 0x30	; 48
    9590:	ae a6       	std	Y+46, r10	; 0x2e
    9592:	9e 97       	sbiw	r26, 0x2e	; 46
    9594:	91 8b       	std	Z+17, r25	; 0x11
    9596:	86 85       	ldd	r24, Z+14	; 0x0e
    9598:	82 80       	ldd	r8, Z+2	; 0x02
    959a:	80 80       	ld	r8, Z
    959c:	80 80       	ld	r8, Z
    959e:	80 80       	ld	r8, Z
    95a0:	80 80       	ld	r8, Z
    95a2:	80 80       	ld	r8, Z
    95a4:	80 80       	ld	r8, Z
    95a6:	80 80       	ld	r8, Z
    95a8:	80 80       	ld	r8, Z
    95aa:	80 80       	ld	r8, Z
    95ac:	80 80       	ld	r8, Z
    95ae:	80 80       	ld	r8, Z
    95b0:	80 80       	ld	r8, Z
    95b2:	80 80       	ld	r8, Z
    95b4:	80 80       	ld	r8, Z
    95b6:	80 80       	ld	r8, Z
    95b8:	80 80       	ld	r8, Z
    95ba:	80 80       	ld	r8, Z
    95bc:	80 80       	ld	r8, Z
    95be:	80 80       	ld	r8, Z
    95c0:	80 80       	ld	r8, Z
    95c2:	80 80       	ld	r8, Z
    95c4:	80 80       	ld	r8, Z
    95c6:	80 80       	ld	r8, Z
    95c8:	80 80       	ld	r8, Z
    95ca:	80 80       	ld	r8, Z
    95cc:	80 80       	ld	r8, Z
    95ce:	80 80       	ld	r8, Z
    95d0:	80 80       	ld	r8, Z
    95d2:	80 80       	ld	r8, Z
    95d4:	80 80       	ld	r8, Z
    95d6:	80 80       	ld	r8, Z
    95d8:	80 80       	ld	r8, Z
    95da:	80 80       	ld	r8, Z
    95dc:	80 80       	ld	r8, Z
    95de:	80 80       	ld	r8, Z
    95e0:	80 80       	ld	r8, Z
    95e2:	80 80       	ld	r8, Z
    95e4:	80 80       	ld	r8, Z
    95e6:	80 80       	ld	r8, Z
    95e8:	80 80       	ld	r8, Z
    95ea:	80 80       	ld	r8, Z
    95ec:	80 80       	ld	r8, Z
    95ee:	80 80       	ld	r8, Z
    95f0:	80 80       	ld	r8, Z
    95f2:	80 80       	ld	r8, Z
    95f4:	80 87       	std	Z+8, r24	; 0x08
    95f6:	91 9d       	mul	r25, r1
    95f8:	ac c4       	rjmp	.+2392   	; 0x9f52 <init_default_high_scores+0x24>
    95fa:	cb d4       	rcall	.+2454   	; 0x9f92 <init_player_state+0x10>
    95fc:	dd f2       	brhs	.-74     	; 0x95b4 <waves+0x9b4>
    95fe:	fa fa       	.word	0xfafa	; ????

00009600 <RestoreBackground>:
	unsigned char free_tile_index, userRamTilesCount=0,userRamTilesCount_tmp=0;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=userRamTilesCount;i<free_tile_index;i++){
    9600:	80 91 f3 0c 	lds	r24, 0x0CF3
    9604:	90 91 7e 0d 	lds	r25, 0x0D7E
    9608:	89 17       	cp	r24, r25
    960a:	78 f4       	brcc	.+30     	; 0x962a <RestoreBackground+0x2a>
			//vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
			*ram_tiles_restore[i].addr=ram_tiles_restore[i].tileIndex;
    960c:	e8 2f       	mov	r30, r24
    960e:	f0 e0       	ldi	r31, 0x00	; 0
    9610:	9f 01       	movw	r18, r30
    9612:	22 0f       	add	r18, r18
    9614:	33 1f       	adc	r19, r19
    9616:	e2 0f       	add	r30, r18
    9618:	f3 1f       	adc	r31, r19
    961a:	e0 5b       	subi	r30, 0xB0	; 176
    961c:	f3 4f       	sbci	r31, 0xF3	; 243
    961e:	a0 81       	ld	r26, Z
    9620:	b1 81       	ldd	r27, Z+1	; 0x01
    9622:	92 81       	ldd	r25, Z+2	; 0x02
    9624:	9c 93       	st	X, r25
	unsigned char free_tile_index, userRamTilesCount=0,userRamTilesCount_tmp=0;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=userRamTilesCount;i<free_tile_index;i++){
    9626:	8f 5f       	subi	r24, 0xFF	; 255
    9628:	ed cf       	rjmp	.-38     	; 0x9604 <RestoreBackground+0x4>
			//vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
			*ram_tiles_restore[i].addr=ram_tiles_restore[i].tileIndex;
		}	
	}
    962a:	08 95       	ret

0000962c <ProcessSprites>:
		}

	}
	*/

	void ProcessSprites(){
    962c:	2f 92       	push	r2
    962e:	3f 92       	push	r3
    9630:	4f 92       	push	r4
    9632:	5f 92       	push	r5
    9634:	6f 92       	push	r6
    9636:	7f 92       	push	r7
    9638:	8f 92       	push	r8
    963a:	9f 92       	push	r9
    963c:	af 92       	push	r10
    963e:	bf 92       	push	r11
    9640:	cf 92       	push	r12
    9642:	df 92       	push	r13
    9644:	ef 92       	push	r14
    9646:	ff 92       	push	r15
    9648:	0f 93       	push	r16
    964a:	1f 93       	push	r17
    964c:	cf 93       	push	r28
    964e:	df 93       	push	r29
    9650:	00 d0       	rcall	.+0      	; 0x9652 <ProcessSprites+0x26>
    9652:	00 d0       	rcall	.+0      	; 0x9654 <ProcessSprites+0x28>
    9654:	cd b7       	in	r28, 0x3d	; 61
    9656:	de b7       	in	r29, 0x3e	; 62
	
		unsigned char i,bx,by,dx,dy,bt,x,y,tx=1,ty=1,wx,wy;
		unsigned int ramPtr,ssx,ssy;

		if(!spritesOn) return;
    9658:	80 91 00 05 	lds	r24, 0x0500
    965c:	88 23       	and	r24, r24
    965e:	09 f4       	brne	.+2      	; 0x9662 <ProcessSprites+0x36>
    9660:	e0 c0       	rjmp	.+448    	; 0x9822 <ProcessSprites+0x1f6>

		userRamTilesCount=userRamTilesCount_tmp;
    9662:	80 91 f2 0c 	lds	r24, 0x0CF2
    9666:	80 93 f3 0c 	sts	0x0CF3, r24
		free_tile_index=userRamTilesCount;
    966a:	80 93 7e 0d 	sts	0x0D7E, r24
    966e:	e0 e1       	ldi	r30, 0x10	; 16
    9670:	ce 2e       	mov	r12, r30
    9672:	e5 e0       	ldi	r30, 0x05	; 5
    9674:	de 2e       	mov	r13, r30
	
		for(i=0;i<MAX_SPRITES;i++){
    9676:	71 2c       	mov	r7, r1
			bx=sprites[i].x;
    9678:	f6 01       	movw	r30, r12
    967a:	20 81       	ld	r18, Z

			if(bx!=(SCREEN_TILES_H*TILE_WIDTH)){
    967c:	20 3e       	cpi	r18, 0xE0	; 224
    967e:	09 f4       	brne	.+2      	; 0x9682 <ProcessSprites+0x56>
    9680:	b1 c0       	rjmp	.+354    	; 0x97e4 <ProcessSprites+0x1b8>
				//get tile's screen section offsets
				
				#if SCROLLING == 1
					ssx=sprites[i].x+Screen.scrollX;
    9682:	80 91 b2 0c 	lds	r24, 0x0CB2
    9686:	90 e0       	ldi	r25, 0x00	; 0
    9688:	82 0f       	add	r24, r18
    968a:	91 1d       	adc	r25, r1
					ssy=sprites[i].y+Screen.scrollY;
    968c:	41 81       	ldd	r20, Z+1	; 0x01
    968e:	20 91 b3 0c 	lds	r18, 0x0CB3
    9692:	30 e0       	ldi	r19, 0x00	; 0
    9694:	24 0f       	add	r18, r20
    9696:	31 1d       	adc	r19, r1

				tx=1;
				ty=1;

				//get the BG tiles that are overlapped by the sprite
				bx=ssx>>3;
    9698:	ac 01       	movw	r20, r24
    969a:	73 e0       	ldi	r23, 0x03	; 3
    969c:	56 95       	lsr	r21
    969e:	47 95       	ror	r20
    96a0:	7a 95       	dec	r23
    96a2:	e1 f7       	brne	.-8      	; 0x969c <ProcessSprites+0x70>
    96a4:	64 2e       	mov	r6, r20
				dx=ssx&0x7;
    96a6:	87 70       	andi	r24, 0x07	; 7
				if(dx>0) tx++;
    96a8:	11 f0       	breq	.+4      	; 0x96ae <ProcessSprites+0x82>
    96aa:	92 e0       	ldi	r25, 0x02	; 2
    96ac:	01 c0       	rjmp	.+2      	; 0x96b0 <ProcessSprites+0x84>
   				#else
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
    96ae:	91 e0       	ldi	r25, 0x01	; 1
    96b0:	99 83       	std	Y+1, r25	; 0x01
				dx=ssx&0x7;
				if(dx>0) tx++;

				//by=ssy>>3;
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
    96b2:	a9 01       	movw	r20, r18
    96b4:	63 e0       	ldi	r22, 0x03	; 3
    96b6:	56 95       	lsr	r21
    96b8:	47 95       	ror	r20
    96ba:	6a 95       	dec	r22
    96bc:	e1 f7       	brne	.-8      	; 0x96b6 <ProcessSprites+0x8a>
    96be:	54 2e       	mov	r5, r20
				dy=ssy%TILE_HEIGHT;
    96c0:	27 70       	andi	r18, 0x07	; 7
				if(dy>0) ty++;			
    96c2:	19 f0       	breq	.+6      	; 0x96ca <ProcessSprites+0x9e>
    96c4:	52 e0       	ldi	r21, 0x02	; 2
    96c6:	35 2e       	mov	r3, r21
    96c8:	02 c0       	rjmp	.+4      	; 0x96ce <ProcessSprites+0xa2>
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
				ty=1;
    96ca:	33 24       	eor	r3, r3
    96cc:	33 94       	inc	r3
								bt=free_tile_index;
								free_tile_index++;
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    96ce:	30 e0       	ldi	r19, 0x00	; 0
    96d0:	32 2f       	mov	r19, r18
    96d2:	22 27       	eor	r18, r18
    96d4:	f9 01       	movw	r30, r18
    96d6:	e8 0f       	add	r30, r24
    96d8:	f1 1d       	adc	r31, r1
    96da:	fc 83       	std	Y+4, r31	; 0x04
    96dc:	eb 83       	std	Y+3, r30	; 0x03
    96de:	e1 2c       	mov	r14, r1
    96e0:	f1 2c       	mov	r15, r1
    96e2:	be 2c       	mov	r11, r14
    96e4:	aa 24       	eor	r10, r10
    96e6:	26 2c       	mov	r2, r6
    96e8:	45 2c       	mov	r4, r5
    96ea:	4e 0c       	add	r4, r14
								    wy-=(VRAM_TILES_V*2);
							    }else if(wy>=VRAM_TILES_V){
							    	wy-=VRAM_TILES_V;
							    }
                            #else
                                if(wy>=(Screen.scrollHeight*2)){
    96ec:	84 2c       	mov	r8, r4
    96ee:	91 2c       	mov	r9, r1
    96f0:	84 2d       	mov	r24, r4
    96f2:	20 91 b4 0c 	lds	r18, 0x0CB4
    96f6:	42 2f       	mov	r20, r18
    96f8:	50 e0       	ldi	r21, 0x00	; 0
    96fa:	44 0f       	add	r20, r20
    96fc:	55 1f       	adc	r21, r21
    96fe:	84 16       	cp	r8, r20
    9700:	95 06       	cpc	r9, r21
    9702:	14 f0       	brlt	.+4      	; 0x9708 <ProcessSprites+0xdc>
								    wy-=(Screen.scrollHeight*2);
    9704:	22 0f       	add	r18, r18
    9706:	03 c0       	rjmp	.+6      	; 0x970e <ProcessSprites+0xe2>
							    }else if(wy>=Screen.scrollHeight){
    9708:	42 16       	cp	r4, r18
    970a:	10 f0       	brcs	.+4      	; 0x9710 <ProcessSprites+0xe4>
							    	wy-=Screen.scrollHeight;
    970c:	84 2d       	mov	r24, r4
    970e:	82 1b       	sub	r24, r18
							    }
                            #endif
							if(wx>=VRAM_TILES_H)wx-=VRAM_TILES_H; //should always be 32
    9710:	ff e1       	ldi	r31, 0x1F	; 31
    9712:	f2 15       	cp	r31, r2
    9714:	18 f4       	brcc	.+6      	; 0x971c <ProcessSprites+0xf0>
    9716:	00 ee       	ldi	r16, 0xE0	; 224
    9718:	02 0d       	add	r16, r2
    971a:	01 c0       	rjmp	.+2      	; 0x971e <ProcessSprites+0xf2>
    971c:	02 2d       	mov	r16, r2

							#if SCROLLING == 0
								ramPtr=(wy*VRAM_TILES_H)+wx;
							#else

								ramPtr=((wy>>3)*256)+(wx*8)+(wy&7);	
    971e:	28 2f       	mov	r18, r24
    9720:	26 95       	lsr	r18
    9722:	26 95       	lsr	r18
    9724:	26 95       	lsr	r18
    9726:	10 e0       	ldi	r17, 0x00	; 0
    9728:	40 e2       	ldi	r20, 0x20	; 32
    972a:	24 9f       	mul	r18, r20
    972c:	00 0d       	add	r16, r0
    972e:	11 1d       	adc	r17, r1
    9730:	11 24       	eor	r1, r1
    9732:	23 e0       	ldi	r18, 0x03	; 3
    9734:	00 0f       	add	r16, r16
    9736:	11 1f       	adc	r17, r17
    9738:	2a 95       	dec	r18
    973a:	e1 f7       	brne	.-8      	; 0x9734 <ProcessSprites+0x108>
    973c:	87 70       	andi	r24, 0x07	; 7
    973e:	08 0f       	add	r16, r24
    9740:	11 1d       	adc	r17, r1

							#endif

							bt=vram[ramPtr];						
    9742:	00 50       	subi	r16, 0x00	; 0
    9744:	1f 4f       	sbci	r17, 0xFF	; 255
    9746:	f8 01       	movw	r30, r16
    9748:	70 81       	ld	r23, Z

							if( ((bt>=RAM_TILES_COUNT) | (bt<userRamTilesCount)) && (free_tile_index < RAM_TILES_COUNT) ){ //if no ram free ignore tile
    974a:	81 e0       	ldi	r24, 0x01	; 1
    974c:	7c 31       	cpi	r23, 0x1C	; 28
    974e:	08 f4       	brcc	.+2      	; 0x9752 <ProcessSprites+0x126>
    9750:	80 e0       	ldi	r24, 0x00	; 0
    9752:	21 e0       	ldi	r18, 0x01	; 1
    9754:	30 91 f3 0c 	lds	r19, 0x0CF3
    9758:	73 17       	cp	r23, r19
    975a:	18 f0       	brcs	.+6      	; 0x9762 <ProcessSprites+0x136>
    975c:	20 e0       	ldi	r18, 0x00	; 0
    975e:	88 23       	and	r24, r24
    9760:	51 f1       	breq	.+84     	; 0x97b6 <ProcessSprites+0x18a>
    9762:	60 91 7e 0d 	lds	r22, 0x0D7E
    9766:	6c 31       	cpi	r22, 0x1C	; 28
    9768:	20 f5       	brcc	.+72     	; 0x97b2 <ProcessSprites+0x186>
								if( bt>=RAM_TILES_COUNT ){
    976a:	88 23       	and	r24, r24
    976c:	31 f0       	breq	.+12     	; 0x977a <ProcessSprites+0x14e>
									//tile is mapped to flash. Copy it to next free RAM tile.
									CopyFlashTile(bt-RAM_TILES_COUNT,free_tile_index);
    976e:	84 ee       	ldi	r24, 0xE4	; 228
    9770:	87 0f       	add	r24, r23
    9772:	7a 83       	std	Y+2, r23	; 0x02
    9774:	0e 94 cc 3a 	call	0x7598	; 0x7598 <CopyFlashTile>
    9778:	06 c0       	rjmp	.+12     	; 0x9786 <ProcessSprites+0x15a>
								}else if(bt<userRamTilesCount){
    977a:	22 23       	and	r18, r18
    977c:	29 f0       	breq	.+10     	; 0x9788 <ProcessSprites+0x15c>
									//tile is a user ram tile. Copy it to next free RAM tile.
									CopyRamTile(bt,free_tile_index);
    977e:	87 2f       	mov	r24, r23
    9780:	7a 83       	std	Y+2, r23	; 0x02
    9782:	0e 94 5b 3b 	call	0x76b6	; 0x76b6 <CopyRamTile>
    9786:	7a 81       	ldd	r23, Y+2	; 0x02
								}
								ram_tiles_restore[free_tile_index].addr=(&vram[ramPtr]);
    9788:	80 91 7e 0d 	lds	r24, 0x0D7E
    978c:	e8 2f       	mov	r30, r24
    978e:	f0 e0       	ldi	r31, 0x00	; 0
    9790:	9f 01       	movw	r18, r30
    9792:	22 0f       	add	r18, r18
    9794:	33 1f       	adc	r19, r19
    9796:	e2 0f       	add	r30, r18
    9798:	f3 1f       	adc	r31, r19
    979a:	e0 5b       	subi	r30, 0xB0	; 176
    979c:	f3 4f       	sbci	r31, 0xF3	; 243
    979e:	11 83       	std	Z+1, r17	; 0x01
    97a0:	00 83       	st	Z, r16
								ram_tiles_restore[free_tile_index].tileIndex=bt;
    97a2:	72 83       	std	Z+2, r23	; 0x02
								vram[ramPtr]=free_tile_index;
    97a4:	f8 01       	movw	r30, r16
    97a6:	80 83       	st	Z, r24
								bt=free_tile_index;
								free_tile_index++;
    97a8:	21 e0       	ldi	r18, 0x01	; 1
    97aa:	28 0f       	add	r18, r24
    97ac:	20 93 7e 0d 	sts	0x0D7E, r18
									CopyRamTile(bt,free_tile_index);
								}
								ram_tiles_restore[free_tile_index].addr=(&vram[ramPtr]);
								ram_tiles_restore[free_tile_index].tileIndex=bt;
								vram[ramPtr]=free_tile_index;
								bt=free_tile_index;
    97b0:	78 2f       	mov	r23, r24
								free_tile_index++;
							}
				
							if(bt<RAM_TILES_COUNT){				
    97b2:	7c 31       	cpi	r23, 0x1C	; 28
    97b4:	38 f4       	brcc	.+14     	; 0x97c4 <ProcessSprites+0x198>
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    97b6:	2b 81       	ldd	r18, Y+3	; 0x03
    97b8:	3c 81       	ldd	r19, Y+4	; 0x04
    97ba:	a5 01       	movw	r20, r10
    97bc:	67 2f       	mov	r22, r23
    97be:	87 2d       	mov	r24, r7
    97c0:	0e 94 e8 3b 	call	0x77d0	; 0x77d0 <BlitSprite>
    97c4:	ff ef       	ldi	r31, 0xFF	; 255
    97c6:	af 1a       	sub	r10, r31
    97c8:	bf 0a       	sbc	r11, r31
    97ca:	23 94       	inc	r2
    97cc:	82 2d       	mov	r24, r2
    97ce:	86 19       	sub	r24, r6
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){

					for(x=0;x<tx;x++){
    97d0:	99 81       	ldd	r25, Y+1	; 0x01
    97d2:	89 17       	cp	r24, r25
    97d4:	08 f4       	brcc	.+2      	; 0x97d8 <ProcessSprites+0x1ac>
    97d6:	8c cf       	rjmp	.-232    	; 0x96f0 <ProcessSprites+0xc4>
    97d8:	ef ef       	ldi	r30, 0xFF	; 255
    97da:	ee 1a       	sub	r14, r30
    97dc:	fe 0a       	sbc	r15, r30
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){
    97de:	e3 14       	cp	r14, r3
    97e0:	08 f4       	brcc	.+2      	; 0x97e4 <ProcessSprites+0x1b8>
    97e2:	7f cf       	rjmp	.-258    	; 0x96e2 <ProcessSprites+0xb6>
		if(!spritesOn) return;

		userRamTilesCount=userRamTilesCount_tmp;
		free_tile_index=userRamTilesCount;
	
		for(i=0;i<MAX_SPRITES;i++){
    97e4:	73 94       	inc	r7
    97e6:	f4 e0       	ldi	r31, 0x04	; 4
    97e8:	cf 0e       	add	r12, r31
    97ea:	d1 1c       	adc	r13, r1
    97ec:	40 e1       	ldi	r20, 0x10	; 16
    97ee:	74 12       	cpse	r7, r20
    97f0:	43 cf       	rjmp	.-378    	; 0x9678 <ProcessSprites+0x4c>


		//restore BG tiles
		RestoreBackground();

	}
    97f2:	0f 90       	pop	r0
    97f4:	0f 90       	pop	r0
    97f6:	0f 90       	pop	r0
    97f8:	0f 90       	pop	r0
    97fa:	df 91       	pop	r29
    97fc:	cf 91       	pop	r28
    97fe:	1f 91       	pop	r17
    9800:	0f 91       	pop	r16
    9802:	ff 90       	pop	r15
    9804:	ef 90       	pop	r14
    9806:	df 90       	pop	r13
    9808:	cf 90       	pop	r12
    980a:	bf 90       	pop	r11
    980c:	af 90       	pop	r10
    980e:	9f 90       	pop	r9
    9810:	8f 90       	pop	r8
    9812:	7f 90       	pop	r7
    9814:	6f 90       	pop	r6
    9816:	5f 90       	pop	r5
    9818:	4f 90       	pop	r4
    981a:	3f 90       	pop	r3
    981c:	2f 90       	pop	r2
			}//	if(bx<(SCREEN_TILES_H*TILE_WIDTH))		
		}


		//restore BG tiles
		RestoreBackground();
    981e:	0c 94 00 4b 	jmp	0x9600	; 0x9600 <RestoreBackground>

	}
    9822:	0f 90       	pop	r0
    9824:	0f 90       	pop	r0
    9826:	0f 90       	pop	r0
    9828:	0f 90       	pop	r0
    982a:	df 91       	pop	r29
    982c:	cf 91       	pop	r28
    982e:	1f 91       	pop	r17
    9830:	0f 91       	pop	r16
    9832:	ff 90       	pop	r15
    9834:	ef 90       	pop	r14
    9836:	df 90       	pop	r13
    9838:	cf 90       	pop	r12
    983a:	bf 90       	pop	r11
    983c:	af 90       	pop	r10
    983e:	9f 90       	pop	r9
    9840:	8f 90       	pop	r8
    9842:	7f 90       	pop	r7
    9844:	6f 90       	pop	r6
    9846:	5f 90       	pop	r5
    9848:	4f 90       	pop	r4
    984a:	3f 90       	pop	r3
    984c:	2f 90       	pop	r2
    984e:	08 95       	ret

00009850 <Scroll>:

	#if SCROLLING == 1
		//Scroll the screen by the relative amount specified (+/-)
		//This function handles screen wrapping on the Y axis if VRAM_TILES_V is less than 32
		void Scroll(char dx,char dy){
		Screen.scrollY+=dy;
    9850:	90 91 b3 0c 	lds	r25, 0x0CB3
    9854:	96 0f       	add	r25, r22
    9856:	90 93 b3 0c 	sts	0x0CB3, r25
		Screen.scrollX+=dx;
    985a:	20 91 b2 0c 	lds	r18, 0x0CB2
    985e:	82 0f       	add	r24, r18
    9860:	80 93 b2 0c 	sts	0x0CB2, r24

		if(Screen.scrollHeight<32){
    9864:	80 91 b4 0c 	lds	r24, 0x0CB4
    9868:	80 32       	cpi	r24, 0x20	; 32
    986a:	b0 f4       	brcc	.+44     	; 0x9898 <Scroll+0x48>

			if(Screen.scrollY>=(Screen.scrollHeight*TILE_HEIGHT)){
    986c:	29 2f       	mov	r18, r25
    986e:	30 e0       	ldi	r19, 0x00	; 0
    9870:	78 e0       	ldi	r23, 0x08	; 8
    9872:	87 9f       	mul	r24, r23
    9874:	a0 01       	movw	r20, r0
    9876:	11 24       	eor	r1, r1
    9878:	24 17       	cp	r18, r20
    987a:	35 07       	cpc	r19, r21
    987c:	6c f0       	brlt	.+26     	; 0x9898 <Scroll+0x48>
				if(dy>=0){	
    987e:	67 fd       	sbrc	r22, 7
    9880:	05 c0       	rjmp	.+10     	; 0x988c <Scroll+0x3c>
					Screen.scrollY=(Screen.scrollY-(Screen.scrollHeight*TILE_HEIGHT));
    9882:	28 ef       	ldi	r18, 0xF8	; 248
    9884:	82 9f       	mul	r24, r18
    9886:	90 0d       	add	r25, r0
    9888:	11 24       	eor	r1, r1
    988a:	04 c0       	rjmp	.+8      	; 0x9894 <Scroll+0x44>
				}else{
					Screen.scrollY=((Screen.scrollHeight*TILE_HEIGHT)-1)-(0xff-Screen.scrollY);
    988c:	78 e0       	ldi	r23, 0x08	; 8
    988e:	87 9f       	mul	r24, r23
    9890:	90 0d       	add	r25, r0
    9892:	11 24       	eor	r1, r1
    9894:	90 93 b3 0c 	sts	0x0CB3, r25
    9898:	08 95       	ret

0000989a <InitializeVideoMode>:
		#endif	
	}


	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){
    989a:	e0 e1       	ldi	r30, 0x10	; 16
    989c:	f5 e0       	ldi	r31, 0x05	; 5

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
			sprites[i].x=(SCREEN_TILES_H*TILE_WIDTH);		
    989e:	80 ee       	ldi	r24, 0xE0	; 224
    98a0:	80 83       	st	Z, r24
    98a2:	34 96       	adiw	r30, 0x04	; 4

	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
    98a4:	95 e0       	ldi	r25, 0x05	; 5
    98a6:	e0 35       	cpi	r30, 0x50	; 80
    98a8:	f9 07       	cpc	r31, r25
    98aa:	d1 f7       	brne	.-12     	; 0x98a0 <InitializeVideoMode+0x6>
		
		#if SCROLLING == 1
		//	for(int i=0;i<(OVERLAY_LINES*VRAM_TILES_H);i++){
		//		overlay_vram[i]=RAM_TILES_COUNT;
		//	}
			Screen.scrollHeight=VRAM_TILES_V;
    98ac:	80 e2       	ldi	r24, 0x20	; 32
    98ae:	80 93 b4 0c 	sts	0x0CB4, r24
			Screen.overlayHeight=0;
    98b2:	10 92 af 0c 	sts	0x0CAF, r1
    98b6:	08 95       	ret

000098b8 <DrawMap>:



//Draws a map of tile at the specified position
#if VRAM_ADDR_SIZE == 1
	void DrawMap(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
    98b8:	2f 92       	push	r2
    98ba:	3f 92       	push	r3
    98bc:	4f 92       	push	r4
    98be:	5f 92       	push	r5
    98c0:	6f 92       	push	r6
    98c2:	7f 92       	push	r7
    98c4:	8f 92       	push	r8
    98c6:	9f 92       	push	r9
    98c8:	af 92       	push	r10
    98ca:	bf 92       	push	r11
    98cc:	cf 92       	push	r12
    98ce:	df 92       	push	r13
    98d0:	ef 92       	push	r14
    98d2:	ff 92       	push	r15
    98d4:	0f 93       	push	r16
    98d6:	1f 93       	push	r17
    98d8:	cf 93       	push	r28
    98da:	df 93       	push	r29
    98dc:	00 d0       	rcall	.+0      	; 0x98de <DrawMap+0x26>
    98de:	1f 92       	push	r1
    98e0:	cd b7       	in	r28, 0x3d	; 61
    98e2:	de b7       	in	r29, 0x3e	; 62
    98e4:	28 2f       	mov	r18, r24
    98e6:	3a 01       	movw	r6, r20
		//unsigned char i;
		u8 mapWidth=pgm_read_byte(&(map[0]));
    98e8:	fa 01       	movw	r30, r20
    98ea:	24 90       	lpm	r2, Z
		u8 mapHeight=pgm_read_byte(&(map[1]));
    98ec:	31 96       	adiw	r30, 0x01	; 1
    98ee:	34 90       	lpm	r3, Z
    98f0:	42 2c       	mov	r4, r2
    98f2:	51 2c       	mov	r5, r1
		
		for(u8 dy=0;dy<mapHeight;dy++){
    98f4:	e1 2c       	mov	r14, r1
    98f6:	f1 2c       	mov	r15, r1
    98f8:	00 e0       	ldi	r16, 0x00	; 0
    98fa:	10 e0       	ldi	r17, 0x00	; 0
    98fc:	c6 2e       	mov	r12, r22
    98fe:	d1 2c       	mov	r13, r1
    9900:	03 15       	cp	r16, r3
    9902:	68 f5       	brcc	.+90     	; 0x995e <DrawMap+0xa6>
    9904:	1b 82       	std	Y+3, r1	; 0x03
    9906:	1a 82       	std	Y+2, r1	; 0x02
    9908:	57 01       	movw	r10, r14
    990a:	92 e0       	ldi	r25, 0x02	; 2
    990c:	a9 0e       	add	r10, r25
    990e:	b1 1c       	adc	r11, r1
    9910:	48 01       	movw	r8, r16
    9912:	8c 0c       	add	r8, r12
    9914:	9d 1c       	adc	r9, r13
			for(u8 dx=0;dx<mapWidth;dx++){			
    9916:	ea 81       	ldd	r30, Y+2	; 0x02
    9918:	e2 15       	cp	r30, r2
    991a:	e0 f4       	brcc	.+56     	; 0x9954 <DrawMap+0x9c>
    991c:	ea 81       	ldd	r30, Y+2	; 0x02
    991e:	fb 81       	ldd	r31, Y+3	; 0x03
    9920:	ea 0d       	add	r30, r10
    9922:	fb 1d       	adc	r31, r11
    9924:	e6 0d       	add	r30, r6
    9926:	f7 1d       	adc	r31, r7
				SetTile(x+dx,(y+dy)%Screen.scrollHeight,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
    9928:	e4 91       	lpm	r30, Z
    992a:	f0 e0       	ldi	r31, 0x00	; 0
    992c:	60 91 b4 0c 	lds	r22, 0x0CB4
    9930:	70 e0       	ldi	r23, 0x00	; 0
    9932:	c4 01       	movw	r24, r8
    9934:	0e 94 6d 6c 	call	0xd8da	; 0xd8da <__divmodhi4>
    9938:	af 01       	movw	r20, r30
    993a:	68 2f       	mov	r22, r24
    993c:	8a 81       	ldd	r24, Y+2	; 0x02
    993e:	82 0f       	add	r24, r18
    9940:	29 83       	std	Y+1, r18	; 0x01
    9942:	0e 94 1b 3e 	call	0x7c36	; 0x7c36 <SetTile>
    9946:	8a 81       	ldd	r24, Y+2	; 0x02
    9948:	9b 81       	ldd	r25, Y+3	; 0x03
    994a:	01 96       	adiw	r24, 0x01	; 1
    994c:	9b 83       	std	Y+3, r25	; 0x03
    994e:	8a 83       	std	Y+2, r24	; 0x02
    9950:	29 81       	ldd	r18, Y+1	; 0x01
    9952:	e1 cf       	rjmp	.-62     	; 0x9916 <DrawMap+0x5e>
    9954:	0f 5f       	subi	r16, 0xFF	; 255
    9956:	1f 4f       	sbci	r17, 0xFF	; 255
    9958:	e4 0c       	add	r14, r4
    995a:	f5 1c       	adc	r15, r5
    995c:	d1 cf       	rjmp	.-94     	; 0x9900 <DrawMap+0x48>
			}
		}

	}
    995e:	0f 90       	pop	r0
    9960:	0f 90       	pop	r0
    9962:	0f 90       	pop	r0
    9964:	df 91       	pop	r29
    9966:	cf 91       	pop	r28
    9968:	1f 91       	pop	r17
    996a:	0f 91       	pop	r16
    996c:	ff 90       	pop	r15
    996e:	ef 90       	pop	r14
    9970:	df 90       	pop	r13
    9972:	cf 90       	pop	r12
    9974:	bf 90       	pop	r11
    9976:	af 90       	pop	r10
    9978:	9f 90       	pop	r9
    997a:	8f 90       	pop	r8
    997c:	7f 90       	pop	r7
    997e:	6f 90       	pop	r6
    9980:	5f 90       	pop	r5
    9982:	4f 90       	pop	r4
    9984:	3f 90       	pop	r3
    9986:	2f 90       	pop	r2
    9988:	08 95       	ret

0000998a <WaitVsync>:
		}
	}
}

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
    998a:	0f 93       	push	r16
    998c:	1f 93       	push	r17
    998e:	cf 93       	push	r28
    9990:	df 93       	push	r29
    9992:	8c 01       	movw	r16, r24
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    9994:	c0 e0       	ldi	r28, 0x00	; 0
    9996:	d0 e0       	ldi	r29, 0x00	; 0
    9998:	c0 17       	cp	r28, r16
    999a:	d1 07       	cpc	r29, r17
    999c:	44 f4       	brge	.+16     	; 0x99ae <WaitVsync+0x24>
		while(!GetVsyncFlag());
    999e:	0e 94 31 3e 	call	0x7c62	; 0x7c62 <GetVsyncFlag>
    99a2:	88 23       	and	r24, r24
    99a4:	e1 f3       	breq	.-8      	; 0x999e <WaitVsync+0x14>
		ClearVsyncFlag();		
    99a6:	0e 94 35 3e 	call	0x7c6a	; 0x7c6a <ClearVsyncFlag>

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    99aa:	21 96       	adiw	r28, 0x01	; 1
    99ac:	f5 cf       	rjmp	.-22     	; 0x9998 <WaitVsync+0xe>
		while(!GetVsyncFlag());
		ClearVsyncFlag();		
	}
}
    99ae:	df 91       	pop	r29
    99b0:	cf 91       	pop	r28
    99b2:	1f 91       	pop	r17
    99b4:	0f 91       	pop	r16
    99b6:	08 95       	ret

000099b8 <DisplayLogo>:
	void DisplayLogo(){
	
		#if INTRO_LOGO !=0
			#define LOGO_X_POS 12
			
			InitMusicPlayer(logoInitPatches);
    99b8:	83 e2       	ldi	r24, 0x23	; 35
    99ba:	99 e0       	ldi	r25, 0x09	; 9
    99bc:	0e 94 e3 40 	call	0x81c6	; 0x81c6 <InitMusicPlayer>
			SetTileTable(logo_tileset);
    99c0:	83 e2       	ldi	r24, 0x23	; 35
    99c2:	91 e0       	ldi	r25, 0x01	; 1
    99c4:	0e 94 2c 3e 	call	0x7c58	; 0x7c58 <SetTileTable>
			
			//draw logo
			ClearVram();
    99c8:	0e 94 11 3e 	call	0x7c22	; 0x7c22 <ClearVram>
			WaitVsync(15);		
    99cc:	8f e0       	ldi	r24, 0x0F	; 15
    99ce:	90 e0       	ldi	r25, 0x00	; 0
    99d0:	0e 94 c5 4c 	call	0x998a	; 0x998a <WaitVsync>


			#if INTRO_LOGO == 1 
				TriggerFx(0,0xff,true);
    99d4:	41 e0       	ldi	r20, 0x01	; 1
    99d6:	6f ef       	ldi	r22, 0xFF	; 255
    99d8:	80 e0       	ldi	r24, 0x00	; 0
    99da:	0e 94 f0 41 	call	0x83e0	; 0x83e0 <TriggerFx>
			#endif

			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo);
    99de:	4d e0       	ldi	r20, 0x0D	; 13
    99e0:	51 e0       	ldi	r21, 0x01	; 1
    99e2:	6c e0       	ldi	r22, 0x0C	; 12
    99e4:	8c e0       	ldi	r24, 0x0C	; 12
    99e6:	0e 94 5c 4c 	call	0x98b8	; 0x98b8 <DrawMap>
			WaitVsync(3);
    99ea:	83 e0       	ldi	r24, 0x03	; 3
    99ec:	90 e0       	ldi	r25, 0x00	; 0
    99ee:	0e 94 c5 4c 	call	0x998a	; 0x998a <WaitVsync>
			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo2);
    99f2:	4c ef       	ldi	r20, 0xFC	; 252
    99f4:	50 e0       	ldi	r21, 0x00	; 0
    99f6:	6c e0       	ldi	r22, 0x0C	; 12
    99f8:	8c e0       	ldi	r24, 0x0C	; 12
    99fa:	0e 94 5c 4c 	call	0x98b8	; 0x98b8 <DrawMap>
			WaitVsync(2);
    99fe:	82 e0       	ldi	r24, 0x02	; 2
    9a00:	90 e0       	ldi	r25, 0x00	; 0
    9a02:	0e 94 c5 4c 	call	0x998a	; 0x998a <WaitVsync>
			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo);
    9a06:	4d e0       	ldi	r20, 0x0D	; 13
    9a08:	51 e0       	ldi	r21, 0x01	; 1
    9a0a:	6c e0       	ldi	r22, 0x0C	; 12
    9a0c:	8c e0       	ldi	r24, 0x0C	; 12
    9a0e:	0e 94 5c 4c 	call	0x98b8	; 0x98b8 <DrawMap>
			#if INTRO_LOGO == 2
				SetMasterVolume(0xc0);
				TriggerNote(3,0,16,0xff);
			#endif 
		
			WaitVsync(65);
    9a12:	81 e4       	ldi	r24, 0x41	; 65
    9a14:	90 e0       	ldi	r25, 0x00	; 0
    9a16:	0e 94 c5 4c 	call	0x998a	; 0x998a <WaitVsync>
			ClearVram();
    9a1a:	0e 94 11 3e 	call	0x7c22	; 0x7c22 <ClearVram>
			WaitVsync(20);
    9a1e:	84 e1       	ldi	r24, 0x14	; 20
    9a20:	90 e0       	ldi	r25, 0x00	; 0
    9a22:	0c 94 c5 4c 	jmp	0x998a	; 0x998a <WaitVsync>

00009a26 <doFade>:
char fadeDir;
bool volatile fadeActive;


void doFade(unsigned char speed,bool blocking){
	fadeSpeed=speed;
    9a26:	80 93 7c 0d 	sts	0x0D7C, r24
	currFadeFrame=0;
    9a2a:	10 92 80 0d 	sts	0x0D80, r1
	fadeActive=true;
    9a2e:	81 e0       	ldi	r24, 0x01	; 1
    9a30:	80 93 7f 0d 	sts	0x0D7F, r24
		
	if(blocking){
    9a34:	66 23       	and	r22, r22
    9a36:	21 f0       	breq	.+8      	; 0x9a40 <doFade+0x1a>
		while(fadeActive==true);
    9a38:	80 91 7f 0d 	lds	r24, 0x0D7F
    9a3c:	81 11       	cpse	r24, r1
    9a3e:	fc cf       	rjmp	.-8      	; 0x9a38 <doFade+0x12>
    9a40:	08 95       	ret

00009a42 <FadeIn>:
	
	
}

void FadeIn(unsigned char speed,bool blocking){
	if(speed==0){
    9a42:	81 11       	cpse	r24, r1
    9a44:	03 c0       	rjmp	.+6      	; 0x9a4c <FadeIn+0xa>
		DDRC=0xff;
    9a46:	8f ef       	ldi	r24, 0xFF	; 255
    9a48:	87 b9       	out	0x07, r24	; 7
		return;
    9a4a:	08 95       	ret
	}
	fadeStep=1;
    9a4c:	91 e0       	ldi	r25, 0x01	; 1
    9a4e:	90 93 81 0d 	sts	0x0D81, r25
	fadeDir=1;
    9a52:	90 93 7d 0d 	sts	0x0D7D, r25
	doFade(speed,blocking);
    9a56:	0c 94 13 4d 	jmp	0x9a26	; 0x9a26 <doFade>

00009a5a <FadeOut>:
}

void FadeOut(unsigned char speed,bool blocking){
	if(speed==0){
    9a5a:	81 11       	cpse	r24, r1
    9a5c:	02 c0       	rjmp	.+4      	; 0x9a62 <FadeOut+0x8>
		DDRC=0;
    9a5e:	17 b8       	out	0x07, r1	; 7
		return;
    9a60:	08 95       	ret
	}
	
	fadeStep=FADER_STEPS;
    9a62:	9c e0       	ldi	r25, 0x0C	; 12
    9a64:	90 93 81 0d 	sts	0x0D81, r25
	fadeDir=-1;
    9a68:	9f ef       	ldi	r25, 0xFF	; 255
    9a6a:	90 93 7d 0d 	sts	0x0D7D, r25
	doFade(speed,blocking);
    9a6e:	0c 94 13 4d 	jmp	0x9a26	; 0x9a26 <doFade>

00009a72 <ProcessFading>:
}


//called by the kernel at each field end
void ProcessFading(){
	if(fadeActive==true){
    9a72:	80 91 7f 0d 	lds	r24, 0x0D7F
    9a76:	88 23       	and	r24, r24
    9a78:	01 f1       	breq	.+64     	; 0x9aba <ProcessFading+0x48>
		if(currFadeFrame==0){
    9a7a:	80 91 80 0d 	lds	r24, 0x0D80
    9a7e:	81 11       	cpse	r24, r1
    9a80:	19 c0       	rjmp	.+50     	; 0x9ab4 <ProcessFading+0x42>
			currFadeFrame=fadeSpeed;
    9a82:	80 91 7c 0d 	lds	r24, 0x0D7C
    9a86:	80 93 80 0d 	sts	0x0D80, r24
			DDRC = pgm_read_byte(&(fader[fadeStep-1]));
    9a8a:	e0 91 81 0d 	lds	r30, 0x0D81
    9a8e:	f0 e0       	ldi	r31, 0x00	; 0
    9a90:	e1 51       	subi	r30, 0x11	; 17
    9a92:	ff 4f       	sbci	r31, 0xFF	; 255
    9a94:	e4 91       	lpm	r30, Z
    9a96:	e7 b9       	out	0x07, r30	; 7
			fadeStep+=fadeDir;
    9a98:	90 91 7d 0d 	lds	r25, 0x0D7D
    9a9c:	80 91 81 0d 	lds	r24, 0x0D81
    9aa0:	89 0f       	add	r24, r25
    9aa2:	80 93 81 0d 	sts	0x0D81, r24
			if(fadeStep==0 || fadeStep==(FADER_STEPS+1)){
    9aa6:	88 23       	and	r24, r24
    9aa8:	11 f0       	breq	.+4      	; 0x9aae <ProcessFading+0x3c>
    9aaa:	8d 30       	cpi	r24, 0x0D	; 13
    9aac:	31 f4       	brne	.+12     	; 0x9aba <ProcessFading+0x48>
				fadeActive=false;
    9aae:	10 92 7f 0d 	sts	0x0D7F, r1
    9ab2:	08 95       	ret
			}
		}else{
			currFadeFrame--;
    9ab4:	81 50       	subi	r24, 0x01	; 1
    9ab6:	80 93 80 0d 	sts	0x0D80, r24
    9aba:	08 95       	ret

00009abc <VideoModeVsync>:
	}

	//Callback invoked during hsync
	void VideoModeVsync(){
		
		ProcessFading();
    9abc:	0e 94 39 4d 	call	0x9a72	; 0x9a72 <ProcessFading>
		ProcessSprites();
    9ac0:	0c 94 16 4b 	jmp	0x962c	; 0x962c <ProcessSprites>

00009ac4 <LBGetNextFrame>:
	u8 reversing;
	char** anims;
} Animation;

char* LBGetNextFrame(Animation* anim)
{
    9ac4:	fc 01       	movw	r30, r24
	anim->looped = 0;
    9ac6:	14 82       	std	Z+4, r1	; 0x04
	anim->frame_count += 1;
    9ac8:	93 81       	ldd	r25, Z+3	; 0x03
    9aca:	9f 5f       	subi	r25, 0xFF	; 255
    9acc:	93 83       	std	Z+3, r25	; 0x03
	if (anim->frame_count < anim->frames_per_anim)
    9ace:	42 81       	ldd	r20, Z+2	; 0x02
    9ad0:	80 81       	ld	r24, Z
    9ad2:	26 81       	ldd	r18, Z+6	; 0x06
    9ad4:	37 81       	ldd	r19, Z+7	; 0x07
    9ad6:	94 17       	cp	r25, r20
    9ad8:	30 f4       	brcc	.+12     	; 0x9ae6 <LBGetNextFrame+0x22>
	{
		return anim->anims[anim->current_anim];
    9ada:	f9 01       	movw	r30, r18
    9adc:	e8 0f       	add	r30, r24
    9ade:	f1 1d       	adc	r31, r1
    9ae0:	e8 0f       	add	r30, r24
    9ae2:	f1 1d       	adc	r31, r1
    9ae4:	12 c0       	rjmp	.+36     	; 0x9b0a <LBGetNextFrame+0x46>
	}
	anim->frame_count = 0;
    9ae6:	13 82       	std	Z+3, r1	; 0x03
	anim->current_anim = (anim->current_anim + 1) % anim->anim_count;
    9ae8:	90 e0       	ldi	r25, 0x00	; 0
    9aea:	01 96       	adiw	r24, 0x01	; 1
    9aec:	61 81       	ldd	r22, Z+1	; 0x01
    9aee:	70 e0       	ldi	r23, 0x00	; 0
    9af0:	0e 94 6d 6c 	call	0xd8da	; 0xd8da <__divmodhi4>
    9af4:	80 83       	st	Z, r24
	if (anim->current_anim == 0) anim->looped = 1;
    9af6:	81 11       	cpse	r24, r1
    9af8:	02 c0       	rjmp	.+4      	; 0x9afe <LBGetNextFrame+0x3a>
    9afa:	41 e0       	ldi	r20, 0x01	; 1
    9afc:	44 83       	std	Z+4, r20	; 0x04
    9afe:	99 27       	eor	r25, r25
	return anim->anims[anim->current_anim];
    9b00:	88 0f       	add	r24, r24
    9b02:	99 1f       	adc	r25, r25
    9b04:	f9 01       	movw	r30, r18
    9b06:	e8 0f       	add	r30, r24
    9b08:	f9 1f       	adc	r31, r25
    9b0a:	80 81       	ld	r24, Z
    9b0c:	91 81       	ldd	r25, Z+1	; 0x01
}
    9b0e:	08 95       	ret

00009b10 <LBGetJoyPadState>:

void LBGetJoyPadState(JoyPadState* p, unsigned char index)
/*
 * Get the current joy pad button state for index controller
 */
{
    9b10:	0f 93       	push	r16
    9b12:	1f 93       	push	r17
    9b14:	cf 93       	push	r28
    9b16:	df 93       	push	r29
    9b18:	1f 92       	push	r1
    9b1a:	cd b7       	in	r28, 0x3d	; 61
    9b1c:	de b7       	in	r29, 0x3e	; 62
    9b1e:	8c 01       	movw	r16, r24
	static unsigned int p_prev[2];

	p->held = ReadJoypad(index);
    9b20:	86 2f       	mov	r24, r22
    9b22:	69 83       	std	Y+1, r22	; 0x01
    9b24:	0e 94 3b 3e 	call	0x7c76	; 0x7c76 <ReadJoypad>
    9b28:	d8 01       	movw	r26, r16
    9b2a:	15 96       	adiw	r26, 0x05	; 5
    9b2c:	9c 93       	st	X, r25
    9b2e:	8e 93       	st	-X, r24
    9b30:	14 97       	sbiw	r26, 0x04	; 4
    9b32:	69 81       	ldd	r22, Y+1	; 0x01
    9b34:	e6 2f       	mov	r30, r22
    9b36:	f0 e0       	ldi	r31, 0x00	; 0

	// Count held cycles
	if (p->held == 0 || p->held != p_prev[index])
    9b38:	00 97       	sbiw	r24, 0x00	; 0
    9b3a:	51 f0       	breq	.+20     	; 0x9b50 <LBGetJoyPadState+0x40>
    9b3c:	df 01       	movw	r26, r30
    9b3e:	aa 0f       	add	r26, r26
    9b40:	bb 1f       	adc	r27, r27
    9b42:	ac 50       	subi	r26, 0x0C	; 12
    9b44:	b3 4f       	sbci	r27, 0xF3	; 243
    9b46:	2d 91       	ld	r18, X+
    9b48:	3c 91       	ld	r19, X
    9b4a:	82 17       	cp	r24, r18
    9b4c:	93 07       	cpc	r25, r19
    9b4e:	21 f0       	breq	.+8      	; 0x9b58 <LBGetJoyPadState+0x48>
	    p->held_cycles = 0;
    9b50:	d8 01       	movw	r26, r16
    9b52:	16 96       	adiw	r26, 0x06	; 6
    9b54:	1c 92       	st	X, r1
    9b56:	07 c0       	rjmp	.+14     	; 0x9b66 <LBGetJoyPadState+0x56>
	else
	    p->held_cycles += 1;
    9b58:	d8 01       	movw	r26, r16
    9b5a:	16 96       	adiw	r26, 0x06	; 6
    9b5c:	2c 91       	ld	r18, X
    9b5e:	16 97       	sbiw	r26, 0x06	; 6
    9b60:	2f 5f       	subi	r18, 0xFF	; 255
    9b62:	16 96       	adiw	r26, 0x06	; 6
    9b64:	2c 93       	st	X, r18

	p->pressed = p->held & (p->held ^ p_prev[index]);
    9b66:	ee 0f       	add	r30, r30
    9b68:	ff 1f       	adc	r31, r31
    9b6a:	ec 50       	subi	r30, 0x0C	; 12
    9b6c:	f3 4f       	sbci	r31, 0xF3	; 243
    9b6e:	20 81       	ld	r18, Z
    9b70:	31 81       	ldd	r19, Z+1	; 0x01
    9b72:	a9 01       	movw	r20, r18
    9b74:	40 95       	com	r20
    9b76:	50 95       	com	r21
    9b78:	48 23       	and	r20, r24
    9b7a:	59 23       	and	r21, r25
    9b7c:	d8 01       	movw	r26, r16
    9b7e:	11 96       	adiw	r26, 0x01	; 1
    9b80:	5c 93       	st	X, r21
    9b82:	4e 93       	st	-X, r20
	p->released = p_prev[index] & (p->held ^ p_prev[index]);
    9b84:	ac 01       	movw	r20, r24
    9b86:	40 95       	com	r20
    9b88:	50 95       	com	r21
    9b8a:	24 23       	and	r18, r20
    9b8c:	35 23       	and	r19, r21
    9b8e:	13 96       	adiw	r26, 0x03	; 3
    9b90:	3c 93       	st	X, r19
    9b92:	2e 93       	st	-X, r18
    9b94:	12 97       	sbiw	r26, 0x02	; 2
	p_prev[index] = p->held;
    9b96:	91 83       	std	Z+1, r25	; 0x01
    9b98:	80 83       	st	Z, r24
}
    9b9a:	0f 90       	pop	r0
    9b9c:	df 91       	pop	r29
    9b9e:	cf 91       	pop	r28
    9ba0:	1f 91       	pop	r17
    9ba2:	0f 91       	pop	r16
    9ba4:	08 95       	ret

00009ba6 <LBPrintChar>:
	font_tiles_map = tiles_map;
}

void LBPrintChar(u8 x, u8 y, u8 code)
{
	if (code >= 48 && code <= 57)
    9ba6:	90 ed       	ldi	r25, 0xD0	; 208
    9ba8:	94 0f       	add	r25, r20
    9baa:	e0 91 82 0d 	lds	r30, 0x0D82
    9bae:	f0 91 83 0d 	lds	r31, 0x0D83
    9bb2:	9a 30       	cpi	r25, 0x0A	; 10
    9bb4:	38 f4       	brcc	.+14     	; 0x9bc4 <LBPrintChar+0x1e>
	{
		SetTile(x, y, pgm_read_byte(&font_tiles_map[3+code-48]));
    9bb6:	24 2f       	mov	r18, r20
    9bb8:	30 e0       	ldi	r19, 0x00	; 0
    9bba:	2d 52       	subi	r18, 0x2D	; 45
    9bbc:	31 09       	sbc	r19, r1
    9bbe:	e2 0f       	add	r30, r18
    9bc0:	f3 1f       	adc	r31, r19
    9bc2:	0c c0       	rjmp	.+24     	; 0x9bdc <LBPrintChar+0x36>
	}
	else if (code >= 65 && code <= 90)
    9bc4:	9f eb       	ldi	r25, 0xBF	; 191
    9bc6:	94 0f       	add	r25, r20
    9bc8:	9a 31       	cpi	r25, 0x1A	; 26
    9bca:	38 f4       	brcc	.+14     	; 0x9bda <LBPrintChar+0x34>
	{
		SetTile(x, y, pgm_read_byte(&font_tiles_map[13+code-65]));
    9bcc:	50 e0       	ldi	r21, 0x00	; 0
    9bce:	44 53       	subi	r20, 0x34	; 52
    9bd0:	51 09       	sbc	r21, r1
    9bd2:	e4 0f       	add	r30, r20
    9bd4:	f5 1f       	adc	r31, r21
    9bd6:	44 91       	lpm	r20, Z
    9bd8:	03 c0       	rjmp	.+6      	; 0x9be0 <LBPrintChar+0x3a>
	}
	else
	{
		SetTile(x, y, pgm_read_byte(&font_tiles_map[2]));
    9bda:	32 96       	adiw	r30, 0x02	; 2
    9bdc:	e4 91       	lpm	r30, Z
    9bde:	4e 2f       	mov	r20, r30
    9be0:	50 e0       	ldi	r21, 0x00	; 0
    9be2:	0c 94 1b 3e 	jmp	0x7c36	; 0x7c36 <SetTile>

00009be6 <LBPrint>:
	}
}

void LBPrint(u8 x, u8 y, char* value)
{
    9be6:	ff 92       	push	r15
    9be8:	0f 93       	push	r16
    9bea:	1f 93       	push	r17
    9bec:	cf 93       	push	r28
    9bee:	df 93       	push	r29
    9bf0:	d8 2f       	mov	r29, r24
    9bf2:	f6 2e       	mov	r15, r22
    9bf4:	8a 01       	movw	r16, r20
	u8 i = 0;
    9bf6:	c0 e0       	ldi	r28, 0x00	; 0
    9bf8:	8c 2f       	mov	r24, r28
    9bfa:	8d 0f       	add	r24, r29
	u8 code = 0;
	while ((code = pgm_read_byte(&value[i])))
    9bfc:	f8 01       	movw	r30, r16
    9bfe:	ec 0f       	add	r30, r28
    9c00:	f1 1d       	adc	r31, r1
    9c02:	44 91       	lpm	r20, Z
    9c04:	44 23       	and	r20, r20
    9c06:	29 f0       	breq	.+10     	; 0x9c12 <LBPrint+0x2c>
	{
		LBPrintChar(x++, y, code);
    9c08:	6f 2d       	mov	r22, r15
    9c0a:	0e 94 d3 4d 	call	0x9ba6	; 0x9ba6 <LBPrintChar>
		i++;
    9c0e:	cf 5f       	subi	r28, 0xFF	; 255
    9c10:	f3 cf       	rjmp	.-26     	; 0x9bf8 <LBPrint+0x12>
	}
}
    9c12:	df 91       	pop	r29
    9c14:	cf 91       	pop	r28
    9c16:	1f 91       	pop	r17
    9c18:	0f 91       	pop	r16
    9c1a:	ff 90       	pop	r15
    9c1c:	08 95       	ret

00009c1e <LBPrintByte>:

void LBPrintByte(u8 x, u8 y, u8 value, char pad)
{
    9c1e:	df 92       	push	r13
    9c20:	ef 92       	push	r14
    9c22:	ff 92       	push	r15
    9c24:	0f 93       	push	r16
    9c26:	1f 93       	push	r17
    9c28:	cf 93       	push	r28
    9c2a:	df 93       	push	r29
    9c2c:	1f 92       	push	r1
    9c2e:	cd b7       	in	r28, 0x3d	; 61
    9c30:	de b7       	in	r29, 0x3e	; 62
    9c32:	38 2f       	mov	r19, r24
    9c34:	06 2f       	mov	r16, r22
    9c36:	84 2f       	mov	r24, r20
    9c38:	9d ef       	ldi	r25, 0xFD	; 253
    9c3a:	e9 2e       	mov	r14, r25
    9c3c:	e3 0e       	add	r14, r19
	for (u8 i = 0; i < 3; i++)
	{
		LBPrintChar(x--, y, value % 10 + 48);
    9c3e:	4a e0       	ldi	r20, 0x0A	; 10
    9c40:	f4 2e       	mov	r15, r20
    9c42:	1f ef       	ldi	r17, 0xFF	; 255
    9c44:	13 0f       	add	r17, r19
    9c46:	6f 2d       	mov	r22, r15
    9c48:	0e 94 3f 6c 	call	0xd87e	; 0xd87e <__udivmodqi4>
    9c4c:	d8 2e       	mov	r13, r24
    9c4e:	40 e3       	ldi	r20, 0x30	; 48
    9c50:	49 0f       	add	r20, r25
    9c52:	60 2f       	mov	r22, r16
    9c54:	83 2f       	mov	r24, r19
    9c56:	29 83       	std	Y+1, r18	; 0x01
    9c58:	0e 94 d3 4d 	call	0x9ba6	; 0x9ba6 <LBPrintChar>
		value /= 10;
    9c5c:	8d 2d       	mov	r24, r13
		if (!pad && value == 0) break;
    9c5e:	29 81       	ldd	r18, Y+1	; 0x01
    9c60:	21 11       	cpse	r18, r1
    9c62:	02 c0       	rjmp	.+4      	; 0x9c68 <LBPrintByte+0x4a>
    9c64:	dd 20       	and	r13, r13
    9c66:	19 f0       	breq	.+6      	; 0x9c6e <LBPrintByte+0x50>
    9c68:	31 2f       	mov	r19, r17
	}
}

void LBPrintByte(u8 x, u8 y, u8 value, char pad)
{
	for (u8 i = 0; i < 3; i++)
    9c6a:	1e 11       	cpse	r17, r14
    9c6c:	ea cf       	rjmp	.-44     	; 0x9c42 <LBPrintByte+0x24>
	{
		LBPrintChar(x--, y, value % 10 + 48);
		value /= 10;
		if (!pad && value == 0) break;
	}
}
    9c6e:	0f 90       	pop	r0
    9c70:	df 91       	pop	r29
    9c72:	cf 91       	pop	r28
    9c74:	1f 91       	pop	r17
    9c76:	0f 91       	pop	r16
    9c78:	ff 90       	pop	r15
    9c7a:	ef 90       	pop	r14
    9c7c:	df 90       	pop	r13
    9c7e:	08 95       	ret

00009c80 <LBPrintInt>:

void LBPrintInt(u8 x, u8 y, u16 value, char pad)
{
    9c80:	cf 92       	push	r12
    9c82:	df 92       	push	r13
    9c84:	ef 92       	push	r14
    9c86:	ff 92       	push	r15
    9c88:	0f 93       	push	r16
    9c8a:	1f 93       	push	r17
    9c8c:	cf 93       	push	r28
    9c8e:	df 93       	push	r29
    9c90:	00 d0       	rcall	.+0      	; 0x9c92 <LBPrintInt+0x12>
    9c92:	cd b7       	in	r28, 0x3d	; 61
    9c94:	de b7       	in	r29, 0x3e	; 62
    9c96:	38 2f       	mov	r19, r24
    9c98:	16 2f       	mov	r17, r22
    9c9a:	ca 01       	movw	r24, r20
    9c9c:	4b ef       	ldi	r20, 0xFB	; 251
    9c9e:	d4 2e       	mov	r13, r20
    9ca0:	d3 0e       	add	r13, r19
	for (u8 i = 0; i < 5; i++)
	{
		LBPrintChar(x--, y, value % 10 + 48);
    9ca2:	5a e0       	ldi	r21, 0x0A	; 10
    9ca4:	e5 2e       	mov	r14, r21
    9ca6:	f1 2c       	mov	r15, r1
    9ca8:	cc 24       	eor	r12, r12
    9caa:	ca 94       	dec	r12
    9cac:	c3 0e       	add	r12, r19
    9cae:	b7 01       	movw	r22, r14
    9cb0:	0e 94 59 6c 	call	0xd8b2	; 0xd8b2 <__udivmodhi4>
    9cb4:	06 2f       	mov	r16, r22
    9cb6:	40 e3       	ldi	r20, 0x30	; 48
    9cb8:	48 0f       	add	r20, r24
    9cba:	61 2f       	mov	r22, r17
    9cbc:	83 2f       	mov	r24, r19
    9cbe:	29 83       	std	Y+1, r18	; 0x01
    9cc0:	7a 83       	std	Y+2, r23	; 0x02
    9cc2:	0e 94 d3 4d 	call	0x9ba6	; 0x9ba6 <LBPrintChar>
		value /= 10;
    9cc6:	80 2f       	mov	r24, r16
    9cc8:	7a 81       	ldd	r23, Y+2	; 0x02
    9cca:	97 2f       	mov	r25, r23
		if (!pad && value == 0) break;
    9ccc:	29 81       	ldd	r18, Y+1	; 0x01
    9cce:	21 11       	cpse	r18, r1
    9cd0:	02 c0       	rjmp	.+4      	; 0x9cd6 <LBPrintInt+0x56>
    9cd2:	00 97       	sbiw	r24, 0x00	; 0
    9cd4:	19 f0       	breq	.+6      	; 0x9cdc <LBPrintInt+0x5c>
    9cd6:	3c 2d       	mov	r19, r12
	}
}

void LBPrintInt(u8 x, u8 y, u16 value, char pad)
{
	for (u8 i = 0; i < 5; i++)
    9cd8:	cd 10       	cpse	r12, r13
    9cda:	e6 cf       	rjmp	.-52     	; 0x9ca8 <LBPrintInt+0x28>
	{
		LBPrintChar(x--, y, value % 10 + 48);
		value /= 10;
		if (!pad && value == 0) break;
	}
}
    9cdc:	0f 90       	pop	r0
    9cde:	0f 90       	pop	r0
    9ce0:	df 91       	pop	r29
    9ce2:	cf 91       	pop	r28
    9ce4:	1f 91       	pop	r17
    9ce6:	0f 91       	pop	r16
    9ce8:	ff 90       	pop	r15
    9cea:	ef 90       	pop	r14
    9cec:	df 90       	pop	r13
    9cee:	cf 90       	pop	r12
    9cf0:	08 95       	ret

00009cf2 <LBCollides>:
	}
}

u8 LBCollides(u16 x1, u16 y1, u8 width1, u8 height1,
						 u16 x2, u16 y2, u8 width2, u8 height2)
{
    9cf2:	af 92       	push	r10
    9cf4:	cf 92       	push	r12
    9cf6:	ef 92       	push	r14
    9cf8:	ff 92       	push	r15
    9cfa:	0f 93       	push	r16
    9cfc:	1f 93       	push	r17
    9cfe:	fc 01       	movw	r30, r24
	if (y1 + height1 <= y2) return 0;
    9d00:	cb 01       	movw	r24, r22
    9d02:	82 0f       	add	r24, r18
    9d04:	91 1d       	adc	r25, r1
    9d06:	e8 16       	cp	r14, r24
    9d08:	f9 06       	cpc	r15, r25
    9d0a:	88 f4       	brcc	.+34     	; 0x9d2e <LBCollides+0x3c>
	if (y1 >= y2 + height2) return 0;
    9d0c:	ea 0c       	add	r14, r10
    9d0e:	f1 1c       	adc	r15, r1
    9d10:	6e 15       	cp	r22, r14
    9d12:	7f 05       	cpc	r23, r15
    9d14:	60 f4       	brcc	.+24     	; 0x9d2e <LBCollides+0x3c>
	if (x1 + width1 <= x2) return 0;
    9d16:	cf 01       	movw	r24, r30
    9d18:	84 0f       	add	r24, r20
    9d1a:	91 1d       	adc	r25, r1
    9d1c:	08 17       	cp	r16, r24
    9d1e:	19 07       	cpc	r17, r25
    9d20:	30 f4       	brcc	.+12     	; 0x9d2e <LBCollides+0x3c>
	if (x1 >= x2 + width2) return 0;
    9d22:	0c 0d       	add	r16, r12
    9d24:	11 1d       	adc	r17, r1
    9d26:	81 e0       	ldi	r24, 0x01	; 1
    9d28:	e0 17       	cp	r30, r16
    9d2a:	f1 07       	cpc	r31, r17
    9d2c:	08 f0       	brcs	.+2      	; 0x9d30 <LBCollides+0x3e>
}

u8 LBCollides(u16 x1, u16 y1, u8 width1, u8 height1,
						 u16 x2, u16 y2, u8 width2, u8 height2)
{
	if (y1 + height1 <= y2) return 0;
    9d2e:	80 e0       	ldi	r24, 0x00	; 0
	if (y1 >= y2 + height2) return 0;
	if (x1 + width1 <= x2) return 0;
	if (x1 >= x2 + width2) return 0;
	return 1;
}
    9d30:	1f 91       	pop	r17
    9d32:	0f 91       	pop	r16
    9d34:	ff 90       	pop	r15
    9d36:	ef 90       	pop	r14
    9d38:	cf 90       	pop	r12
    9d3a:	af 90       	pop	r10
    9d3c:	08 95       	ret

00009d3e <LBRandom>:

u8 LBRandom(u8 from, u8 to)
/*
 * Return a random number between 'from' and 'to'.
 */
{
    9d3e:	cf 93       	push	r28
    9d40:	df 93       	push	r29
    9d42:	d8 2f       	mov	r29, r24
    9d44:	c6 2f       	mov	r28, r22
	u16 tmp = GetPrngNumber(0) % 255;
    9d46:	80 e0       	ldi	r24, 0x00	; 0
    9d48:	90 e0       	ldi	r25, 0x00	; 0
    9d4a:	0e 94 09 40 	call	0x8012	; 0x8012 <GetPrngNumber>
    9d4e:	6f ef       	ldi	r22, 0xFF	; 255
    9d50:	70 e0       	ldi	r23, 0x00	; 0
    9d52:	0e 94 59 6c 	call	0xd8b2	; 0xd8b2 <__udivmodhi4>
	return (((u8)tmp) % (to - from)) + from;
    9d56:	6c 2f       	mov	r22, r28
    9d58:	70 e0       	ldi	r23, 0x00	; 0
    9d5a:	6d 1b       	sub	r22, r29
    9d5c:	71 09       	sbc	r23, r1
    9d5e:	0e 94 6d 6c 	call	0xd8da	; 0xd8da <__divmodhi4>
}
    9d62:	8d 0f       	add	r24, r29
    9d64:	df 91       	pop	r29
    9d66:	cf 91       	pop	r28
    9d68:	08 95       	ret

00009d6a <LBWaitSeconds>:

void LBWaitSeconds(u8 seconds)
{
    9d6a:	cf 93       	push	r28
    9d6c:	df 93       	push	r29
    9d6e:	d8 2f       	mov	r29, r24
	for(u8 i = 0; i < seconds; i++)
    9d70:	c0 e0       	ldi	r28, 0x00	; 0
    9d72:	cd 17       	cp	r28, r29
    9d74:	31 f0       	breq	.+12     	; 0x9d82 <LBWaitSeconds+0x18>
	{
		WaitUs(65535);
    9d76:	8f ef       	ldi	r24, 0xFF	; 255
    9d78:	9f ef       	ldi	r25, 0xFF	; 255
    9d7a:	0e 94 47 3e 	call	0x7c8e	; 0x7c8e <WaitUs>
	return (((u8)tmp) % (to - from)) + from;
}

void LBWaitSeconds(u8 seconds)
{
	for(u8 i = 0; i < seconds; i++)
    9d7e:	cf 5f       	subi	r28, 0xFF	; 255
    9d80:	f8 cf       	rjmp	.-16     	; 0x9d72 <LBWaitSeconds+0x8>
	{
		WaitUs(65535);
	}
}
    9d82:	df 91       	pop	r29
    9d84:	cf 91       	pop	r28
    9d86:	08 95       	ret

00009d88 <LBMapSprite>:

void LBMapSprite(u8 startSprite,const char *map,u8 spriteFlags)
{
    9d88:	df 92       	push	r13
    9d8a:	ef 92       	push	r14
    9d8c:	ff 92       	push	r15
    9d8e:	0f 93       	push	r16
    9d90:	1f 93       	push	r17
    9d92:	cf 93       	push	r28
    9d94:	df 93       	push	r29
    9d96:	db 01       	movw	r26, r22
	u8 mapWidth=pgm_read_byte(&(map[0]));
    9d98:	fb 01       	movw	r30, r22
    9d9a:	14 91       	lpm	r17, Z
	u8 mapHeight=pgm_read_byte(&(map[1]));
    9d9c:	31 96       	adiw	r30, 0x01	; 1
    9d9e:	64 91       	lpm	r22, Z
    9da0:	5f ef       	ldi	r21, 0xFF	; 255
    9da2:	51 0f       	add	r21, r17
	s8 x,y,dx,dy,t; 

	if(spriteFlags & SPRITE_FLIP_X)
    9da4:	24 2f       	mov	r18, r20
    9da6:	21 70       	andi	r18, 0x01	; 1
    9da8:	40 ff       	sbrs	r20, 0
    9daa:	04 c0       	rjmp	.+8      	; 0x9db4 <LBMapSprite+0x2c>
	{
		x=(mapWidth-1);
    9dac:	95 2f       	mov	r25, r21
		dx=-1;
    9dae:	ff 24       	eor	r15, r15
    9db0:	fa 94       	dec	r15
    9db2:	03 c0       	rjmp	.+6      	; 0x9dba <LBMapSprite+0x32>
	}
	else
	{
		x=0;
		dx=1;
    9db4:	ff 24       	eor	r15, r15
    9db6:	f3 94       	inc	r15
		x=(mapWidth-1);
		dx=-1;
	}
	else
	{
		x=0;
    9db8:	90 e0       	ldi	r25, 0x00	; 0
		dx=1;
	}

	if(spriteFlags & SPRITE_FLIP_Y)
    9dba:	41 ff       	sbrs	r20, 1
    9dbc:	05 c0       	rjmp	.+10     	; 0x9dc8 <LBMapSprite+0x40>
	{
		y=(mapHeight-1);
    9dbe:	7f ef       	ldi	r23, 0xFF	; 255
    9dc0:	76 0f       	add	r23, r22
		dy=-1;
    9dc2:	ee 24       	eor	r14, r14
    9dc4:	ea 94       	dec	r14
    9dc6:	03 c0       	rjmp	.+6      	; 0x9dce <LBMapSprite+0x46>
	}
	else
	{
		y=0;
		dy=1;
    9dc8:	ee 24       	eor	r14, r14
    9dca:	e3 94       	inc	r14
		y=(mapHeight-1);
		dy=-1;
	}
	else
	{
		y=0;
    9dcc:	70 e0       	ldi	r23, 0x00	; 0
    9dce:	21 11       	cpse	r18, r1
    9dd0:	01 c0       	rjmp	.+2      	; 0x9dd4 <LBMapSprite+0x4c>
    9dd2:	50 e0       	ldi	r21, 0x00	; 0
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
    9dd4:	00 e0       	ldi	r16, 0x00	; 0
    9dd6:	06 17       	cp	r16, r22
    9dd8:	09 f1       	breq	.+66     	; 0x9e1c <LBMapSprite+0x94>
	{
		for(u8 cx=0;cx<mapWidth;cx++)
		{
			t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    9dda:	71 03       	mulsu	r23, r17
    9ddc:	e0 01       	movw	r28, r0
    9dde:	11 24       	eor	r1, r1
    9de0:	d8 2e       	mov	r13, r24
    9de2:	d1 0e       	add	r13, r17
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
	{
		for(u8 cx=0;cx<mapWidth;cx++)
    9de4:	8d 15       	cp	r24, r13
    9de6:	b1 f0       	breq	.+44     	; 0x9e14 <LBMapSprite+0x8c>
		{
			t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    9de8:	9e 01       	movw	r18, r28
    9dea:	29 0f       	add	r18, r25
    9dec:	31 1d       	adc	r19, r1
    9dee:	97 fd       	sbrc	r25, 7
    9df0:	3a 95       	dec	r19
    9df2:	2e 5f       	subi	r18, 0xFE	; 254
    9df4:	3f 4f       	sbci	r19, 0xFF	; 255
    9df6:	fd 01       	movw	r30, r26
    9df8:	e2 0f       	add	r30, r18
    9dfa:	f3 1f       	adc	r31, r19
    9dfc:	24 91       	lpm	r18, Z
			extendedSprites[startSprite].tileIndex=t;
    9dfe:	34 e0       	ldi	r19, 0x04	; 4
    9e00:	83 9f       	mul	r24, r19
    9e02:	f0 01       	movw	r30, r0
    9e04:	11 24       	eor	r1, r1
    9e06:	e3 55       	subi	r30, 0x53	; 83
    9e08:	f0 4f       	sbci	r31, 0xF0	; 240
    9e0a:	22 83       	std	Z+2, r18	; 0x02
			extendedSprites[startSprite++].flags=spriteFlags;
    9e0c:	8f 5f       	subi	r24, 0xFF	; 255
    9e0e:	43 83       	std	Z+3, r20	; 0x03
    9e10:	9f 0d       	add	r25, r15
    9e12:	e8 cf       	rjmp	.-48     	; 0x9de4 <LBMapSprite+0x5c>
    9e14:	7e 0d       	add	r23, r14
	{
		y=0;
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
    9e16:	0f 5f       	subi	r16, 0xFF	; 255
			extendedSprites[startSprite].tileIndex=t;
			extendedSprites[startSprite++].flags=spriteFlags;
			x+=dx;
		}
		y+=dy;
		x=(spriteFlags & SPRITE_FLIP_X)?(mapWidth-1):0;
    9e18:	95 2f       	mov	r25, r21
    9e1a:	dd cf       	rjmp	.-70     	; 0x9dd6 <LBMapSprite+0x4e>
	}
}
    9e1c:	df 91       	pop	r29
    9e1e:	cf 91       	pop	r28
    9e20:	1f 91       	pop	r17
    9e22:	0f 91       	pop	r16
    9e24:	ff 90       	pop	r15
    9e26:	ef 90       	pop	r14
    9e28:	df 90       	pop	r13
    9e2a:	08 95       	ret

00009e2c <LBMoveSprite>:

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
    9e2c:	df 92       	push	r13
    9e2e:	ef 92       	push	r14
    9e30:	ff 92       	push	r15
    9e32:	0f 93       	push	r16
    9e34:	1f 93       	push	r17
    9e36:	cf 93       	push	r28
    9e38:	df 93       	push	r29
		{
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
    9e3a:	a0 91 b4 0c 	lds	r26, 0x0CB4
    9e3e:	98 e0       	ldi	r25, 0x08	; 8
    9e40:	a9 9f       	mul	r26, r25
    9e42:	70 01       	movw	r14, r0
    9e44:	11 24       	eor	r1, r1
    9e46:	50 e0       	ldi	r21, 0x00	; 0
    9e48:	38 ef       	ldi	r19, 0xF8	; 248
    9e4a:	a3 9f       	mul	r26, r19
    9e4c:	30 2d       	mov	r19, r0
    9e4e:	11 24       	eor	r1, r1
	}
}

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
	for(u8 dy=0;dy<height;dy++)
    9e50:	70 e0       	ldi	r23, 0x00	; 0
    9e52:	70 17       	cp	r23, r16
    9e54:	09 f1       	breq	.+66     	; 0x9e98 <LBMoveSprite+0x6c>
    9e56:	d4 2e       	mov	r13, r20
    9e58:	13 2f       	mov	r17, r19
    9e5a:	14 0f       	add	r17, r20
    9e5c:	b8 2f       	mov	r27, r24
    9e5e:	b2 0f       	add	r27, r18
    9e60:	96 2f       	mov	r25, r22
	{
		for(u8 dx=0;dx<width;dx++)
    9e62:	8b 17       	cp	r24, r27
    9e64:	a9 f0       	breq	.+42     	; 0x9e90 <LBMoveSprite+0x64>
		{
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
    9e66:	c4 e0       	ldi	r28, 0x04	; 4
    9e68:	8c 9f       	mul	r24, r28
    9e6a:	f0 01       	movw	r30, r0
    9e6c:	11 24       	eor	r1, r1
    9e6e:	ef 01       	movw	r28, r30
    9e70:	c3 55       	subi	r28, 0x53	; 83
    9e72:	d0 4f       	sbci	r29, 0xF0	; 240
    9e74:	98 83       	st	Y, r25
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
    9e76:	a0 32       	cpi	r26, 0x20	; 32
    9e78:	28 f4       	brcc	.+10     	; 0x9e84 <LBMoveSprite+0x58>
    9e7a:	e4 16       	cp	r14, r20
    9e7c:	f5 06       	cpc	r15, r21
    9e7e:	14 f4       	brge	.+4      	; 0x9e84 <LBMoveSprite+0x58>
				{
					u8 tmp=(y+(TILE_HEIGHT*dy))-(Screen.scrollHeight*TILE_HEIGHT);
					extendedSprites[startSprite].y=tmp;
    9e80:	19 83       	std	Y+1, r17	; 0x01
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
				{
    9e82:	03 c0       	rjmp	.+6      	; 0x9e8a <LBMoveSprite+0x5e>
					u8 tmp=(y+(TILE_HEIGHT*dy))-(Screen.scrollHeight*TILE_HEIGHT);
					extendedSprites[startSprite].y=tmp;
				}
				else
				{
					extendedSprites[startSprite].y=y+(TILE_HEIGHT*dy);
    9e84:	e3 55       	subi	r30, 0x53	; 83
    9e86:	f0 4f       	sbci	r31, 0xF0	; 240
    9e88:	d1 82       	std	Z+1, r13	; 0x01
				{
					extendedSprites[startSprite].y=y+(TILE_HEIGHT*dy);
				}
			#endif

			startSprite++;
    9e8a:	8f 5f       	subi	r24, 0xFF	; 255
    9e8c:	98 5f       	subi	r25, 0xF8	; 248
    9e8e:	e9 cf       	rjmp	.-46     	; 0x9e62 <LBMoveSprite+0x36>
	}
}

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
	for(u8 dy=0;dy<height;dy++)
    9e90:	7f 5f       	subi	r23, 0xFF	; 255
    9e92:	48 5f       	subi	r20, 0xF8	; 248
    9e94:	5f 4f       	sbci	r21, 0xFF	; 255
    9e96:	dd cf       	rjmp	.-70     	; 0x9e52 <LBMoveSprite+0x26>
			#endif

			startSprite++;
		}
	}	
}
    9e98:	df 91       	pop	r29
    9e9a:	cf 91       	pop	r28
    9e9c:	1f 91       	pop	r17
    9e9e:	0f 91       	pop	r16
    9ea0:	ff 90       	pop	r15
    9ea2:	ef 90       	pop	r14
    9ea4:	df 90       	pop	r13
    9ea6:	08 95       	ret

00009ea8 <LBRotateSprites>:

void LBRotateSprites()
{
    9ea8:	80 e0       	ldi	r24, 0x00	; 0
    9eaa:	90 e0       	ldi	r25, 0x00	; 0
    9eac:	dc 01       	movw	r26, r24
    9eae:	a3 55       	subi	r26, 0x53	; 83
    9eb0:	b0 4f       	sbci	r27, 0xF0	; 240
    9eb2:	fc 01       	movw	r30, r24
    9eb4:	e0 5f       	subi	r30, 0xF0	; 240
    9eb6:	fa 4f       	sbci	r31, 0xFA	; 250
	static u8 rotate_index = ROTATE_SPRITES_FROM;
	u8 mappedSpriteCount = MAX_EXTENDED_SPRITES;
	
	for (u8 i = 0; i < ROTATE_SPRITES_FROM; i++)
	{
		sprites[i].flags = extendedSprites[i].flags;
    9eb8:	13 96       	adiw	r26, 0x03	; 3
    9eba:	2c 91       	ld	r18, X
    9ebc:	13 97       	sbiw	r26, 0x03	; 3
    9ebe:	23 83       	std	Z+3, r18	; 0x03
		sprites[i].tileIndex = extendedSprites[i].tileIndex;
    9ec0:	12 96       	adiw	r26, 0x02	; 2
    9ec2:	2c 91       	ld	r18, X
    9ec4:	12 97       	sbiw	r26, 0x02	; 2
    9ec6:	22 83       	std	Z+2, r18	; 0x02
		sprites[i].x = extendedSprites[i].x;
    9ec8:	2c 91       	ld	r18, X
    9eca:	20 83       	st	Z, r18
		sprites[i].y = extendedSprites[i].y;
    9ecc:	11 96       	adiw	r26, 0x01	; 1
    9ece:	2c 91       	ld	r18, X
    9ed0:	21 83       	std	Z+1, r18	; 0x01
    9ed2:	04 96       	adiw	r24, 0x04	; 4
void LBRotateSprites()
{
	static u8 rotate_index = ROTATE_SPRITES_FROM;
	u8 mappedSpriteCount = MAX_EXTENDED_SPRITES;
	
	for (u8 i = 0; i < ROTATE_SPRITES_FROM; i++)
    9ed4:	88 33       	cpi	r24, 0x38	; 56
    9ed6:	91 05       	cpc	r25, r1
    9ed8:	49 f7       	brne	.-46     	; 0x9eac <LBRotateSprites+0x4>
    9eda:	80 91 01 05 	lds	r24, 0x0501
    9ede:	20 e0       	ldi	r18, 0x00	; 0
    9ee0:	30 e0       	ldi	r19, 0x00	; 0
		sprites[i].y = extendedSprites[i].y;
	}
	
	for (u8 i = ROTATE_SPRITES_FROM; i < MAX_SPRITES; i++)
	{
		sprites[i].flags = extendedSprites[rotate_index].flags;
    9ee2:	94 e0       	ldi	r25, 0x04	; 4
    9ee4:	89 9f       	mul	r24, r25
    9ee6:	d0 01       	movw	r26, r0
    9ee8:	11 24       	eor	r1, r1
    9eea:	a3 55       	subi	r26, 0x53	; 83
    9eec:	b0 4f       	sbci	r27, 0xF0	; 240
    9eee:	13 96       	adiw	r26, 0x03	; 3
    9ef0:	9c 91       	ld	r25, X
    9ef2:	13 97       	sbiw	r26, 0x03	; 3
    9ef4:	f9 01       	movw	r30, r18
    9ef6:	e0 5f       	subi	r30, 0xF0	; 240
    9ef8:	fa 4f       	sbci	r31, 0xFA	; 250
    9efa:	93 af       	std	Z+59, r25	; 0x3b
		sprites[i].tileIndex = extendedSprites[rotate_index].tileIndex;
    9efc:	12 96       	adiw	r26, 0x02	; 2
    9efe:	9c 91       	ld	r25, X
    9f00:	12 97       	sbiw	r26, 0x02	; 2
    9f02:	92 af       	std	Z+58, r25	; 0x3a
		sprites[i].x = extendedSprites[rotate_index].x;
    9f04:	9c 91       	ld	r25, X
    9f06:	90 af       	std	Z+56, r25	; 0x38
		sprites[i].y = extendedSprites[rotate_index].y;
    9f08:	11 96       	adiw	r26, 0x01	; 1
    9f0a:	9c 91       	ld	r25, X
    9f0c:	91 af       	std	Z+57, r25	; 0x39
		rotate_index += 1;
    9f0e:	8f 5f       	subi	r24, 0xFF	; 255
		if (rotate_index >= MAX_EXTENDED_SPRITES) rotate_index = ROTATE_SPRITES_FROM;
    9f10:	84 31       	cpi	r24, 0x14	; 20
    9f12:	08 f0       	brcs	.+2      	; 0x9f16 <LBRotateSprites+0x6e>
    9f14:	8e e0       	ldi	r24, 0x0E	; 14
    9f16:	2c 5f       	subi	r18, 0xFC	; 252
    9f18:	3f 4f       	sbci	r19, 0xFF	; 255
		sprites[i].tileIndex = extendedSprites[i].tileIndex;
		sprites[i].x = extendedSprites[i].x;
		sprites[i].y = extendedSprites[i].y;
	}
	
	for (u8 i = ROTATE_SPRITES_FROM; i < MAX_SPRITES; i++)
    9f1a:	28 30       	cpi	r18, 0x08	; 8
    9f1c:	31 05       	cpc	r19, r1
    9f1e:	09 f7       	brne	.-62     	; 0x9ee2 <LBRotateSprites+0x3a>
    9f20:	80 93 01 05 	sts	0x0501, r24
    9f24:	08 95       	ret

00009f26 <is_space>:
char* enemy_shot_anim[1];
char* expl_anim[3];

u8 is_space()
{
	return (game.current_level_index % 2 != 0);
    9f26:	80 91 b9 0d 	lds	r24, 0x0DB9
}
    9f2a:	81 70       	andi	r24, 0x01	; 1
    9f2c:	08 95       	ret

00009f2e <init_default_high_scores>:

void init_default_high_scores()
{
	scores.id = EEPROM_SCORES_ID;
    9f2e:	8c e8       	ldi	r24, 0x8C	; 140
    9f30:	90 e0       	ldi	r25, 0x00	; 0
    9f32:	90 93 87 0d 	sts	0x0D87, r25
    9f36:	80 93 86 0d 	sts	0x0D86, r24
    9f3a:	80 e0       	ldi	r24, 0x00	; 0
    9f3c:	90 e0       	ldi	r25, 0x00	; 0
    9f3e:	fc 01       	movw	r30, r24
    9f40:	ee 50       	subi	r30, 0x0E	; 14
    9f42:	f5 4f       	sbci	r31, 0xF5	; 245
	for (u8 i = 0; i < 30; i++)
	{
		scores.data[i] = pgm_read_byte(&default_scores[i]);
    9f44:	e4 91       	lpm	r30, Z
    9f46:	dc 01       	movw	r26, r24
    9f48:	aa 57       	subi	r26, 0x7A	; 122
    9f4a:	b2 4f       	sbci	r27, 0xF2	; 242
    9f4c:	12 96       	adiw	r26, 0x02	; 2
    9f4e:	ec 93       	st	X, r30
    9f50:	01 96       	adiw	r24, 0x01	; 1
}

void init_default_high_scores()
{
	scores.id = EEPROM_SCORES_ID;
	for (u8 i = 0; i < 30; i++)
    9f52:	8e 31       	cpi	r24, 0x1E	; 30
    9f54:	91 05       	cpc	r25, r1
    9f56:	99 f7       	brne	.-26     	; 0x9f3e <init_default_high_scores+0x10>
	{
		scores.data[i] = pgm_read_byte(&default_scores[i]);
	}
}
    9f58:	08 95       	ret

00009f5a <init_enemy_state>:

void init_enemy_state()
{
    9f5a:	80 e0       	ldi	r24, 0x00	; 0
    9f5c:	90 e0       	ldi	r25, 0x00	; 0
    9f5e:	9c 01       	movw	r18, r24
    9f60:	2a 55       	subi	r18, 0x5A	; 90
    9f62:	32 4f       	sbci	r19, 0xF2	; 242
    9f64:	f9 01       	movw	r30, r18
    9f66:	e5 54       	subi	r30, 0x45	; 69
    9f68:	ff 4f       	sbci	r31, 0xFF	; 255
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		game.enemies[i].active = 0;
    9f6a:	10 82       	st	Z, r1
    9f6c:	7a 96       	adiw	r30, 0x1a	; 26
		for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
		{
			game.enemies[i].shot[j].active = 0;
    9f6e:	10 82       	st	Z, r1
    9f70:	8e 5b       	subi	r24, 0xBE	; 190
    9f72:	9f 4f       	sbci	r25, 0xFF	; 255
	}
}

void init_enemy_state()
{
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    9f74:	8a 34       	cpi	r24, 0x4A	; 74
    9f76:	21 e0       	ldi	r18, 0x01	; 1
    9f78:	92 07       	cpc	r25, r18
    9f7a:	89 f7       	brne	.-30     	; 0x9f5e <init_enemy_state+0x4>
		for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
		{
			game.enemies[i].shot[j].active = 0;
		}
	}
	game.active_enemies = 0;
    9f7c:	10 92 c3 0d 	sts	0x0DC3, r1
    9f80:	08 95       	ret

00009f82 <init_player_state>:
}

void init_player_state()
{
	if (is_space())
    9f82:	0e 94 93 4f 	call	0x9f26	; 0x9f26 <is_space>
    9f86:	88 23       	and	r24, r24
    9f88:	f9 f0       	breq	.+62     	; 0x9fc8 <init_player_state+0x46>
	{
		game.player.width = 3;
    9f8a:	83 e0       	ldi	r24, 0x03	; 3
    9f8c:	80 93 d9 0d 	sts	0x0DD9, r24
		game.player.height = 1;
    9f90:	81 e0       	ldi	r24, 0x01	; 1
    9f92:	80 93 da 0d 	sts	0x0DDA, r24
		game.player.run.anim_count = 2;
    9f96:	82 e0       	ldi	r24, 0x02	; 2
    9f98:	80 93 33 0e 	sts	0x0E33, r24
		game.player.run.frames_per_anim = EXPLOSION_FRAME_COUNT;
    9f9c:	85 e0       	ldi	r24, 0x05	; 5
    9f9e:	80 93 34 0e 	sts	0x0E34, r24
		game.player.run.anims = run_anim;
    9fa2:	8d ef       	ldi	r24, 0xFD	; 253
    9fa4:	9f e0       	ldi	r25, 0x0F	; 15
    9fa6:	90 93 39 0e 	sts	0x0E39, r25
    9faa:	80 93 38 0e 	sts	0x0E38, r24
		game.player.run.anims[0] = (char*) map_hero_ship_0;
    9fae:	86 e8       	ldi	r24, 0x86	; 134
    9fb0:	9d e2       	ldi	r25, 0x2D	; 45
    9fb2:	90 93 fe 0f 	sts	0x0FFE, r25
    9fb6:	80 93 fd 0f 	sts	0x0FFD, r24
		game.player.run.anims[1] = (char*) map_hero_ship_1;
    9fba:	81 e8       	ldi	r24, 0x81	; 129
    9fbc:	9d e2       	ldi	r25, 0x2D	; 45
    9fbe:	90 93 00 10 	sts	0x1000, r25
    9fc2:	80 93 ff 0f 	sts	0x0FFF, r24
    9fc6:	2a c0       	rjmp	.+84     	; 0xa01c <init_player_state+0x9a>
	}
	else
	{
		game.player.width = 2;
    9fc8:	82 e0       	ldi	r24, 0x02	; 2
    9fca:	80 93 d9 0d 	sts	0x0DD9, r24
		game.player.height = 3;
    9fce:	83 e0       	ldi	r24, 0x03	; 3
    9fd0:	80 93 da 0d 	sts	0x0DDA, r24
		game.player.run.anim_count = 4;
    9fd4:	84 e0       	ldi	r24, 0x04	; 4
    9fd6:	80 93 33 0e 	sts	0x0E33, r24
		game.player.run.frames_per_anim = FRAMES_PER_RUN_CYCLE;
    9fda:	8c e0       	ldi	r24, 0x0C	; 12
    9fdc:	80 93 34 0e 	sts	0x0E34, r24
		game.player.run.anims = run_anim;
    9fe0:	8d ef       	ldi	r24, 0xFD	; 253
    9fe2:	9f e0       	ldi	r25, 0x0F	; 15
    9fe4:	90 93 39 0e 	sts	0x0E39, r25
    9fe8:	80 93 38 0e 	sts	0x0E38, r24
		game.player.run.anims[0] = (char*) map_hero_step_0;
    9fec:	80 eb       	ldi	r24, 0xB0	; 176
    9fee:	9d e2       	ldi	r25, 0x2D	; 45
    9ff0:	90 93 fe 0f 	sts	0x0FFE, r25
    9ff4:	80 93 fd 0f 	sts	0x0FFD, r24
		game.player.run.anims[1] = (char*) map_hero_step_1;
    9ff8:	88 ea       	ldi	r24, 0xA8	; 168
    9ffa:	9d e2       	ldi	r25, 0x2D	; 45
    9ffc:	90 93 00 10 	sts	0x1000, r25
    a000:	80 93 ff 0f 	sts	0x0FFF, r24
		game.player.run.anims[2] = (char*) map_hero_step_2;
    a004:	80 ea       	ldi	r24, 0xA0	; 160
    a006:	9d e2       	ldi	r25, 0x2D	; 45
    a008:	90 93 02 10 	sts	0x1002, r25
    a00c:	80 93 01 10 	sts	0x1001, r24
		game.player.run.anims[3] = (char*) map_hero_step_3;
    a010:	88 e9       	ldi	r24, 0x98	; 152
    a012:	9d e2       	ldi	r25, 0x2D	; 45
    a014:	90 93 04 10 	sts	0x1004, r25
    a018:	80 93 03 10 	sts	0x1003, r24
	}
	game.player.direction = D_RIGHT;
    a01c:	81 e0       	ldi	r24, 0x01	; 1
    a01e:	80 93 d8 0d 	sts	0x0DD8, r24
	game.player.flags = IDLE;
    a022:	98 e0       	ldi	r25, 0x08	; 8
    a024:	90 93 d6 0d 	sts	0x0DD6, r25
	game.player.shield = PLAYER_SHIELD;
    a028:	9a e0       	ldi	r25, 0x0A	; 10
    a02a:	90 93 db 0d 	sts	0x0DDB, r25
	game.player.idle.anim_count = 1;
    a02e:	80 93 2b 0e 	sts	0x0E2B, r24
	game.player.idle.frames_per_anim = 1;
    a032:	80 93 2c 0e 	sts	0x0E2C, r24
	game.player.idle.anims = idle_anim;
    a036:	2f e0       	ldi	r18, 0x0F	; 15
    a038:	30 e1       	ldi	r19, 0x10	; 16
    a03a:	30 93 31 0e 	sts	0x0E31, r19
    a03e:	20 93 30 0e 	sts	0x0E30, r18
	game.player.idle.anims[0] = (char*) map_hero_idle;
    a042:	28 eb       	ldi	r18, 0xB8	; 184
    a044:	3d e2       	ldi	r19, 0x2D	; 45
    a046:	30 93 10 10 	sts	0x1010, r19
    a04a:	20 93 0f 10 	sts	0x100F, r18
	
	game.player.jump.anim_count = 1;
    a04e:	80 93 3b 0e 	sts	0x0E3B, r24
	game.player.jump.frames_per_anim = 1;
    a052:	80 93 3c 0e 	sts	0x0E3C, r24
	game.player.jump.anims = jump_anim;
    a056:	24 e8       	ldi	r18, 0x84	; 132
    a058:	3d e0       	ldi	r19, 0x0D	; 13
    a05a:	30 93 41 0e 	sts	0x0E41, r19
    a05e:	20 93 40 0e 	sts	0x0E40, r18
	game.player.jump.anims[0] = (char*) map_hero_jump;
    a062:	20 e9       	ldi	r18, 0x90	; 144
    a064:	3d e2       	ldi	r19, 0x2D	; 45
    a066:	30 93 85 0d 	sts	0x0D85, r19
    a06a:	20 93 84 0d 	sts	0x0D84, r18
	
	game.player.prone.anim_count = 1;
    a06e:	80 93 43 0e 	sts	0x0E43, r24
	game.player.prone.frames_per_anim = 1;
    a072:	80 93 44 0e 	sts	0x0E44, r24
	game.player.prone.anims = prone_anim;
    a076:	85 ea       	ldi	r24, 0xA5	; 165
    a078:	9f e0       	ldi	r25, 0x0F	; 15
    a07a:	90 93 49 0e 	sts	0x0E49, r25
    a07e:	80 93 48 0e 	sts	0x0E48, r24
	game.player.prone.anims[0] = (char*) map_hero_prone;
    a082:	8b e8       	ldi	r24, 0x8B	; 139
    a084:	9d e2       	ldi	r25, 0x2D	; 45
    a086:	90 93 a6 0f 	sts	0x0FA6, r25
    a08a:	80 93 a5 0f 	sts	0x0FA5, r24
	
	game.player.expl.anim_count = 3;
    a08e:	83 e0       	ldi	r24, 0x03	; 3
    a090:	80 93 4b 0e 	sts	0x0E4B, r24
	game.player.expl.frames_per_anim = EXPLOSION_FRAME_COUNT;
    a094:	85 e0       	ldi	r24, 0x05	; 5
    a096:	80 93 4c 0e 	sts	0x0E4C, r24
	game.player.expl.anims = expl_anim;
    a09a:	89 e0       	ldi	r24, 0x09	; 9
    a09c:	90 e1       	ldi	r25, 0x10	; 16
    a09e:	90 93 51 0e 	sts	0x0E51, r25
    a0a2:	80 93 50 0e 	sts	0x0E50, r24
	game.player.expl.anims[0] = (char*) map_explosion_0;
    a0a6:	85 ed       	ldi	r24, 0xD5	; 213
    a0a8:	9d e2       	ldi	r25, 0x2D	; 45
    a0aa:	90 93 0a 10 	sts	0x100A, r25
    a0ae:	80 93 09 10 	sts	0x1009, r24
	game.player.expl.anims[1] = (char*) map_explosion_1;
    a0b2:	82 ed       	ldi	r24, 0xD2	; 210
    a0b4:	9d e2       	ldi	r25, 0x2D	; 45
    a0b6:	90 93 0c 10 	sts	0x100C, r25
    a0ba:	80 93 0b 10 	sts	0x100B, r24
	game.player.expl.anims[2] = (char*) map_explosion_2;
    a0be:	8f ec       	ldi	r24, 0xCF	; 207
    a0c0:	9d e2       	ldi	r25, 0x2D	; 45
    a0c2:	90 93 0e 10 	sts	0x100E, r25
    a0c6:	80 93 0d 10 	sts	0x100D, r24
    a0ca:	e0 ef       	ldi	r30, 0xF0	; 240
    a0cc:	fd e0       	ldi	r31, 0x0D	; 13
	
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
	{
		game.player.shot[i].hit_count = 1;
    a0ce:	81 e0       	ldi	r24, 0x01	; 1
		game.player.shot[i].shot_type = BASIC_SHOT;
		game.player.shot[i].anim.anim_count = 1;
		game.player.shot[i].anim.frames_per_anim = 1;
		game.player.shot[i].anim.anims = shot_anim;
    a0d0:	27 e0       	ldi	r18, 0x07	; 7
    a0d2:	30 e1       	ldi	r19, 0x10	; 16
    a0d4:	df 01       	movw	r26, r30
    a0d6:	14 97       	sbiw	r26, 0x04	; 4
	game.player.expl.anims[1] = (char*) map_explosion_1;
	game.player.expl.anims[2] = (char*) map_explosion_2;
	
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
	{
		game.player.shot[i].hit_count = 1;
    a0d8:	8c 93       	st	X, r24
    a0da:	11 97       	sbiw	r26, 0x01	; 1
		game.player.shot[i].shot_type = BASIC_SHOT;
    a0dc:	1c 92       	st	X, r1
    a0de:	14 96       	adiw	r26, 0x04	; 4
		game.player.shot[i].anim.anim_count = 1;
    a0e0:	8c 93       	st	X, r24
		game.player.shot[i].anim.frames_per_anim = 1;
    a0e2:	80 83       	st	Z, r24
		game.player.shot[i].anim.anims = shot_anim;
    a0e4:	35 83       	std	Z+5, r19	; 0x05
    a0e6:	24 83       	std	Z+4, r18	; 0x04
    a0e8:	7a 96       	adiw	r30, 0x1a	; 26
	game.player.expl.anims = expl_anim;
	game.player.expl.anims[0] = (char*) map_explosion_0;
	game.player.expl.anims[1] = (char*) map_explosion_1;
	game.player.expl.anims[2] = (char*) map_explosion_2;
	
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
    a0ea:	9e e0       	ldi	r25, 0x0E	; 14
    a0ec:	ee 33       	cpi	r30, 0x3E	; 62
    a0ee:	f9 07       	cpc	r31, r25
    a0f0:	89 f7       	brne	.-30     	; 0xa0d4 <init_player_state+0x152>
    a0f2:	8a e6       	ldi	r24, 0x6A	; 106
    a0f4:	9d e2       	ldi	r25, 0x2D	; 45
    a0f6:	90 93 08 10 	sts	0x1008, r25
    a0fa:	80 93 07 10 	sts	0x1007, r24
    a0fe:	08 95       	ret

0000a100 <init_enemy_shot>:
		game.player.shot[i].anim.anims[0] = (char*) map_hero_shot;
	}
}

void init_enemy_shot(u8 i, u16 x, u16 y)
{
    a100:	ef 92       	push	r14
    a102:	ff 92       	push	r15
    a104:	0f 93       	push	r16
    a106:	1f 93       	push	r17
    a108:	cf 93       	push	r28
    a10a:	df 93       	push	r29
    a10c:	8a 01       	movw	r16, r20
	game.enemies[i].expl.anim_count = 3;
    a10e:	22 e4       	ldi	r18, 0x42	; 66
    a110:	82 9f       	mul	r24, r18
    a112:	c0 01       	movw	r24, r0
    a114:	11 24       	eor	r1, r1
    a116:	ec 01       	movw	r28, r24
    a118:	ca 55       	subi	r28, 0x5A	; 90
    a11a:	d2 4f       	sbci	r29, 0xF2	; 242
    a11c:	fe 01       	movw	r30, r28
    a11e:	e9 51       	subi	r30, 0x19	; 25
    a120:	ff 4f       	sbci	r31, 0xFF	; 255
    a122:	83 e0       	ldi	r24, 0x03	; 3
    a124:	80 83       	st	Z, r24
	game.enemies[i].expl.frames_per_anim = EXPLOSION_FRAME_COUNT;
    a126:	31 96       	adiw	r30, 0x01	; 1
    a128:	85 e0       	ldi	r24, 0x05	; 5
    a12a:	80 83       	st	Z, r24
	game.enemies[i].expl.anims = expl_anim;
    a12c:	de 01       	movw	r26, r28
    a12e:	a4 51       	subi	r26, 0x14	; 20
    a130:	bf 4f       	sbci	r27, 0xFF	; 255
    a132:	e9 e0       	ldi	r30, 0x09	; 9
    a134:	f0 e1       	ldi	r31, 0x10	; 16
    a136:	11 96       	adiw	r26, 0x01	; 1
    a138:	fc 93       	st	X, r31
    a13a:	ee 93       	st	-X, r30
	game.enemies[i].expl.anims[0] = (char*) map_explosion_0;
    a13c:	85 ed       	ldi	r24, 0xD5	; 213
    a13e:	9d e2       	ldi	r25, 0x2D	; 45
    a140:	91 83       	std	Z+1, r25	; 0x01
    a142:	80 83       	st	Z, r24
	game.enemies[i].expl.anims[1] = (char*) map_explosion_1;
    a144:	82 ed       	ldi	r24, 0xD2	; 210
    a146:	9d e2       	ldi	r25, 0x2D	; 45
    a148:	93 83       	std	Z+3, r25	; 0x03
    a14a:	82 83       	std	Z+2, r24	; 0x02
	game.enemies[i].expl.anims[2] = (char*) map_explosion_2;
    a14c:	8f ec       	ldi	r24, 0xCF	; 207
    a14e:	9d e2       	ldi	r25, 0x2D	; 45
    a150:	95 83       	std	Z+5, r25	; 0x05
    a152:	84 83       	std	Z+4, r24	; 0x04
		
	for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
	{
		game.enemies[i].shot[j].hit_count = 1;
    a154:	fe 01       	movw	r30, r28
    a156:	ec 52       	subi	r30, 0x2C	; 44
    a158:	ff 4f       	sbci	r31, 0xFF	; 255
    a15a:	81 e0       	ldi	r24, 0x01	; 1
    a15c:	80 83       	st	Z, r24
		game.enemies[i].shot[j].active = 0;
    a15e:	31 96       	adiw	r30, 0x01	; 1
    a160:	10 82       	st	Z, r1
		game.enemies[i].shot[j].shot_type = BASIC_ENEMY_SHOT;
    a162:	32 97       	sbiw	r30, 0x02	; 2
    a164:	80 83       	st	Z, r24
		game.enemies[i].shot[j].anim.anim_count = 1;
    a166:	34 96       	adiw	r30, 0x04	; 4
    a168:	80 83       	st	Z, r24
		game.enemies[i].shot[j].anim.frames_per_anim = 1;
    a16a:	31 96       	adiw	r30, 0x01	; 1
    a16c:	80 83       	st	Z, r24
		game.enemies[i].shot[j].anim.anims = enemy_shot_anim;
    a16e:	50 97       	sbiw	r26, 0x10	; 16
    a170:	e5 e0       	ldi	r30, 0x05	; 5
    a172:	f0 e1       	ldi	r31, 0x10	; 16
    a174:	ed 93       	st	X+, r30
    a176:	fc 93       	st	X, r31
		game.enemies[i].shot[j].anim.anims[0] = (char*) map_enemy_shot;
    a178:	87 e6       	ldi	r24, 0x67	; 103
    a17a:	9d e2       	ldi	r25, 0x2D	; 45
    a17c:	91 83       	std	Z+1, r25	; 0x01
    a17e:	80 83       	st	Z, r24
		game.enemies[i].shot[j].shared.vx = 0;
    a180:	fe 01       	movw	r30, r28
    a182:	e0 53       	subi	r30, 0x30	; 48
    a184:	ff 4f       	sbci	r31, 0xFF	; 255
    a186:	11 82       	std	Z+1, r1	; 0x01
    a188:	10 82       	st	Z, r1
		game.enemies[i].shot[j].shared.vy = 0;
    a18a:	3c 97       	sbiw	r30, 0x0c	; 12
    a18c:	10 82       	st	Z, r1
    a18e:	11 82       	std	Z+1, r1	; 0x01
    a190:	12 82       	std	Z+2, r1	; 0x02
    a192:	13 82       	std	Z+3, r1	; 0x03
		game.enemies[i].shot[j].shared.x = x;
    a194:	7e 01       	movw	r14, r28
    a196:	88 ec       	ldi	r24, 0xC8	; 200
    a198:	e8 0e       	add	r14, r24
    a19a:	f1 1c       	adc	r15, r1
    a19c:	80 e0       	ldi	r24, 0x00	; 0
    a19e:	90 e0       	ldi	r25, 0x00	; 0
    a1a0:	0e 94 1c 6d 	call	0xda38	; 0xda38 <__floatunsisf>
    a1a4:	f7 01       	movw	r30, r14
    a1a6:	60 83       	st	Z, r22
    a1a8:	71 83       	std	Z+1, r23	; 0x01
    a1aa:	82 83       	std	Z+2, r24	; 0x02
    a1ac:	93 83       	std	Z+3, r25	; 0x03
		game.enemies[i].shot[j].shared.y = y;
    a1ae:	c4 53       	subi	r28, 0x34	; 52
    a1b0:	df 4f       	sbci	r29, 0xFF	; 255
    a1b2:	b8 01       	movw	r22, r16
    a1b4:	80 e0       	ldi	r24, 0x00	; 0
    a1b6:	90 e0       	ldi	r25, 0x00	; 0
    a1b8:	0e 94 1c 6d 	call	0xda38	; 0xda38 <__floatunsisf>
    a1bc:	68 83       	st	Y, r22
    a1be:	79 83       	std	Y+1, r23	; 0x01
    a1c0:	8a 83       	std	Y+2, r24	; 0x02
    a1c2:	9b 83       	std	Y+3, r25	; 0x03
	}
}
    a1c4:	df 91       	pop	r29
    a1c6:	cf 91       	pop	r28
    a1c8:	1f 91       	pop	r17
    a1ca:	0f 91       	pop	r16
    a1cc:	ff 90       	pop	r15
    a1ce:	ef 90       	pop	r14
    a1d0:	08 95       	ret

0000a1d2 <init_enemy_spider>:

void init_enemy_spider(u8 i, u16 x, u16 y)
{
    a1d2:	af 92       	push	r10
    a1d4:	bf 92       	push	r11
    a1d6:	cf 92       	push	r12
    a1d8:	df 92       	push	r13
    a1da:	ef 92       	push	r14
    a1dc:	ff 92       	push	r15
    a1de:	1f 93       	push	r17
    a1e0:	cf 93       	push	r28
    a1e2:	df 93       	push	r29
    a1e4:	18 2f       	mov	r17, r24
    a1e6:	7b 01       	movw	r14, r22
    a1e8:	6a 01       	movw	r12, r20
	game.enemies[i].active = 1;
    a1ea:	82 e4       	ldi	r24, 0x42	; 66
    a1ec:	18 9f       	mul	r17, r24
    a1ee:	e0 01       	movw	r28, r0
    a1f0:	11 24       	eor	r1, r1
    a1f2:	ca 55       	subi	r28, 0x5A	; 90
    a1f4:	d2 4f       	sbci	r29, 0xF2	; 242
    a1f6:	fe 01       	movw	r30, r28
    a1f8:	e5 54       	subi	r30, 0x45	; 69
    a1fa:	ff 4f       	sbci	r31, 0xFF	; 255
    a1fc:	91 e0       	ldi	r25, 0x01	; 1
    a1fe:	90 83       	st	Z, r25
	game.enemies[i].direction = D_LEFT;
    a200:	32 96       	adiw	r30, 0x02	; 2
    a202:	10 82       	st	Z, r1
	game.enemies[i].flags = IDLE;
    a204:	31 97       	sbiw	r30, 0x01	; 1
    a206:	88 e0       	ldi	r24, 0x08	; 8
    a208:	80 83       	st	Z, r24
	game.enemies[i].width = 1;
    a20a:	32 96       	adiw	r30, 0x02	; 2
    a20c:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    a20e:	31 96       	adiw	r30, 0x01	; 1
    a210:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_SPIDER;
    a212:	31 96       	adiw	r30, 0x01	; 1
    a214:	10 82       	st	Z, r1
	game.enemies[i].frame_count = 0;
    a216:	31 96       	adiw	r30, 0x01	; 1
    a218:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    a21a:	31 96       	adiw	r30, 0x01	; 1
    a21c:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_SPIDER_SHIELD;
    a21e:	31 96       	adiw	r30, 0x01	; 1
    a220:	82 e0       	ldi	r24, 0x02	; 2
    a222:	80 83       	st	Z, r24
	
	game.enemies[i].anim.anim_count = 2;
    a224:	7c 96       	adiw	r30, 0x1c	; 28
    a226:	80 83       	st	Z, r24
	game.enemies[i].anim.frames_per_anim = SPIDER_FRAMES_PER_IDLE;
    a228:	31 96       	adiw	r30, 0x01	; 1
    a22a:	8a e0       	ldi	r24, 0x0A	; 10
    a22c:	80 83       	st	Z, r24
	game.enemies[i].anim.anims = spider_anim;
    a22e:	de 01       	movw	r26, r28
    a230:	ac 51       	subi	r26, 0x1C	; 28
    a232:	bf 4f       	sbci	r27, 0xFF	; 255
    a234:	e7 ea       	ldi	r30, 0xA7	; 167
    a236:	ff e0       	ldi	r31, 0x0F	; 15
    a238:	ed 93       	st	X+, r30
    a23a:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_spider_0;
    a23c:	81 e6       	ldi	r24, 0x61	; 97
    a23e:	9d e2       	ldi	r25, 0x2D	; 45
    a240:	91 83       	std	Z+1, r25	; 0x01
    a242:	80 83       	st	Z, r24
	game.enemies[i].anim.anims[1] = (char*) map_enemy_spider_1;
    a244:	8e e5       	ldi	r24, 0x5E	; 94
    a246:	9d e2       	ldi	r25, 0x2D	; 45
    a248:	93 83       	std	Z+3, r25	; 0x03
    a24a:	82 83       	std	Z+2, r24	; 0x02
	game.enemies[i].shared.gravity = 0;
    a24c:	fe 01       	movw	r30, r28
    a24e:	e6 54       	subi	r30, 0x46	; 70
    a250:	ff 4f       	sbci	r31, 0xFF	; 255
    a252:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = 0;
    a254:	32 97       	sbiw	r30, 0x02	; 2
    a256:	11 82       	std	Z+1, r1	; 0x01
    a258:	10 82       	st	Z, r1
	game.enemies[i].shared.vy = 0;
    a25a:	3c 97       	sbiw	r30, 0x0c	; 12
    a25c:	10 82       	st	Z, r1
    a25e:	11 82       	std	Z+1, r1	; 0x01
    a260:	12 82       	std	Z+2, r1	; 0x02
    a262:	13 82       	std	Z+3, r1	; 0x03
	game.enemies[i].shared.x = x;
    a264:	5e 01       	movw	r10, r28
    a266:	e0 eb       	ldi	r30, 0xB0	; 176
    a268:	ae 0e       	add	r10, r30
    a26a:	b1 1c       	adc	r11, r1
    a26c:	80 e0       	ldi	r24, 0x00	; 0
    a26e:	90 e0       	ldi	r25, 0x00	; 0
    a270:	0e 94 1c 6d 	call	0xda38	; 0xda38 <__floatunsisf>
    a274:	f5 01       	movw	r30, r10
    a276:	60 83       	st	Z, r22
    a278:	71 83       	std	Z+1, r23	; 0x01
    a27a:	82 83       	std	Z+2, r24	; 0x02
    a27c:	93 83       	std	Z+3, r25	; 0x03
	game.enemies[i].shared.y = y;
    a27e:	cc 54       	subi	r28, 0x4C	; 76
    a280:	df 4f       	sbci	r29, 0xFF	; 255
    a282:	b6 01       	movw	r22, r12
    a284:	80 e0       	ldi	r24, 0x00	; 0
    a286:	90 e0       	ldi	r25, 0x00	; 0
    a288:	0e 94 1c 6d 	call	0xda38	; 0xda38 <__floatunsisf>
    a28c:	68 83       	st	Y, r22
    a28e:	79 83       	std	Y+1, r23	; 0x01
    a290:	8a 83       	std	Y+2, r24	; 0x02
    a292:	9b 83       	std	Y+3, r25	; 0x03
	
	init_enemy_shot(i, x, y);
    a294:	a6 01       	movw	r20, r12
    a296:	b7 01       	movw	r22, r14
    a298:	81 2f       	mov	r24, r17
}
    a29a:	df 91       	pop	r29
    a29c:	cf 91       	pop	r28
    a29e:	1f 91       	pop	r17
    a2a0:	ff 90       	pop	r15
    a2a2:	ef 90       	pop	r14
    a2a4:	df 90       	pop	r13
    a2a6:	cf 90       	pop	r12
    a2a8:	bf 90       	pop	r11
    a2aa:	af 90       	pop	r10
	game.enemies[i].shared.vx = 0;
	game.enemies[i].shared.vy = 0;
	game.enemies[i].shared.x = x;
	game.enemies[i].shared.y = y;
	
	init_enemy_shot(i, x, y);
    a2ac:	0c 94 80 50 	jmp	0xa100	; 0xa100 <init_enemy_shot>

0000a2b0 <init_enemy_shark>:
}

void init_enemy_shark(u8 i, u16 x, u16 y)
{
    a2b0:	af 92       	push	r10
    a2b2:	bf 92       	push	r11
    a2b4:	cf 92       	push	r12
    a2b6:	df 92       	push	r13
    a2b8:	ef 92       	push	r14
    a2ba:	ff 92       	push	r15
    a2bc:	1f 93       	push	r17
    a2be:	cf 93       	push	r28
    a2c0:	df 93       	push	r29
    a2c2:	18 2f       	mov	r17, r24
    a2c4:	7b 01       	movw	r14, r22
    a2c6:	6a 01       	movw	r12, r20
	game.enemies[i].active = 1;
    a2c8:	82 e4       	ldi	r24, 0x42	; 66
    a2ca:	18 9f       	mul	r17, r24
    a2cc:	e0 01       	movw	r28, r0
    a2ce:	11 24       	eor	r1, r1
    a2d0:	ca 55       	subi	r28, 0x5A	; 90
    a2d2:	d2 4f       	sbci	r29, 0xF2	; 242
    a2d4:	fe 01       	movw	r30, r28
    a2d6:	e5 54       	subi	r30, 0x45	; 69
    a2d8:	ff 4f       	sbci	r31, 0xFF	; 255
    a2da:	91 e0       	ldi	r25, 0x01	; 1
    a2dc:	90 83       	st	Z, r25
	game.enemies[i].width = 1;
    a2de:	33 96       	adiw	r30, 0x03	; 3
    a2e0:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    a2e2:	31 96       	adiw	r30, 0x01	; 1
    a2e4:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_SHARK;
    a2e6:	31 96       	adiw	r30, 0x01	; 1
    a2e8:	90 83       	st	Z, r25
	game.enemies[i].frame_count = 0;
    a2ea:	31 96       	adiw	r30, 0x01	; 1
    a2ec:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    a2ee:	31 96       	adiw	r30, 0x01	; 1
    a2f0:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_SHARK_SHIELD;
    a2f2:	31 96       	adiw	r30, 0x01	; 1
    a2f4:	84 e0       	ldi	r24, 0x04	; 4
    a2f6:	80 83       	st	Z, r24
	
	game.enemies[i].anim.anim_count = 1;
    a2f8:	7c 96       	adiw	r30, 0x1c	; 28
    a2fa:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = 1;
    a2fc:	31 96       	adiw	r30, 0x01	; 1
    a2fe:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = shark_anim;
    a300:	de 01       	movw	r26, r28
    a302:	ac 51       	subi	r26, 0x1C	; 28
    a304:	bf 4f       	sbci	r27, 0xFF	; 255
    a306:	eb ea       	ldi	r30, 0xAB	; 171
    a308:	ff e0       	ldi	r31, 0x0F	; 15
    a30a:	ed 93       	st	X+, r30
    a30c:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_shark;
    a30e:	84 e6       	ldi	r24, 0x64	; 100
    a310:	9d e2       	ldi	r25, 0x2D	; 45
    a312:	91 83       	std	Z+1, r25	; 0x01
    a314:	80 83       	st	Z, r24
	game.enemies[i].shared.gravity = 0;
    a316:	fe 01       	movw	r30, r28
    a318:	e6 54       	subi	r30, 0x46	; 70
    a31a:	ff 4f       	sbci	r31, 0xFF	; 255
    a31c:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = SHARK_SPEED;
    a31e:	32 97       	sbiw	r30, 0x02	; 2
    a320:	84 e1       	ldi	r24, 0x14	; 20
    a322:	90 e0       	ldi	r25, 0x00	; 0
    a324:	91 83       	std	Z+1, r25	; 0x01
    a326:	80 83       	st	Z, r24
	game.enemies[i].shared.vy = 0;
    a328:	3c 97       	sbiw	r30, 0x0c	; 12
    a32a:	10 82       	st	Z, r1
    a32c:	11 82       	std	Z+1, r1	; 0x01
    a32e:	12 82       	std	Z+2, r1	; 0x02
    a330:	13 82       	std	Z+3, r1	; 0x03
	game.enemies[i].shared.x = x;
    a332:	5e 01       	movw	r10, r28
    a334:	e0 eb       	ldi	r30, 0xB0	; 176
    a336:	ae 0e       	add	r10, r30
    a338:	b1 1c       	adc	r11, r1
    a33a:	80 e0       	ldi	r24, 0x00	; 0
    a33c:	90 e0       	ldi	r25, 0x00	; 0
    a33e:	0e 94 1c 6d 	call	0xda38	; 0xda38 <__floatunsisf>
    a342:	f5 01       	movw	r30, r10
    a344:	60 83       	st	Z, r22
    a346:	71 83       	std	Z+1, r23	; 0x01
    a348:	82 83       	std	Z+2, r24	; 0x02
    a34a:	93 83       	std	Z+3, r25	; 0x03
	game.enemies[i].shared.y = y;
    a34c:	cc 54       	subi	r28, 0x4C	; 76
    a34e:	df 4f       	sbci	r29, 0xFF	; 255
    a350:	b6 01       	movw	r22, r12
    a352:	80 e0       	ldi	r24, 0x00	; 0
    a354:	90 e0       	ldi	r25, 0x00	; 0
    a356:	0e 94 1c 6d 	call	0xda38	; 0xda38 <__floatunsisf>
    a35a:	68 83       	st	Y, r22
    a35c:	79 83       	std	Y+1, r23	; 0x01
    a35e:	8a 83       	std	Y+2, r24	; 0x02
    a360:	9b 83       	std	Y+3, r25	; 0x03
	
	init_enemy_shot(i, x, y);
    a362:	a6 01       	movw	r20, r12
    a364:	b7 01       	movw	r22, r14
    a366:	81 2f       	mov	r24, r17
}
    a368:	df 91       	pop	r29
    a36a:	cf 91       	pop	r28
    a36c:	1f 91       	pop	r17
    a36e:	ff 90       	pop	r15
    a370:	ef 90       	pop	r14
    a372:	df 90       	pop	r13
    a374:	cf 90       	pop	r12
    a376:	bf 90       	pop	r11
    a378:	af 90       	pop	r10
	game.enemies[i].shared.vx = SHARK_SPEED;
	game.enemies[i].shared.vy = 0;
	game.enemies[i].shared.x = x;
	game.enemies[i].shared.y = y;
	
	init_enemy_shot(i, x, y);
    a37a:	0c 94 80 50 	jmp	0xa100	; 0xa100 <init_enemy_shot>

0000a37e <load_eeprom>:
 *  0x01 = EEPROM_ERROR_INVALID_BLOCK
 *  0x02 = EEPROM_ERROR_FULL
 *  0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 *  0x04 = EEPROM_ERROR_NOT_FORMATTED
 */
{
    a37e:	cf 93       	push	r28
    a380:	df 93       	push	r29
    a382:	ec 01       	movw	r28, r24
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
    a384:	bc 01       	movw	r22, r24
    a386:	88 81       	ld	r24, Y
    a388:	99 81       	ldd	r25, Y+1	; 0x01
    a38a:	0e 94 d6 3f 	call	0x7fac	; 0x7fac <EepromReadBlock>
	if (status == 0x03)
    a38e:	83 30       	cpi	r24, 0x03	; 3
    a390:	29 f4       	brne	.+10     	; 0xa39c <load_eeprom+0x1e>
	{
		status = EepromWriteBlock(block);
    a392:	ce 01       	movw	r24, r28
	}
}
    a394:	df 91       	pop	r29
    a396:	cf 91       	pop	r28
{
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
	if (status == 0x03)
	{
		status = EepromWriteBlock(block);
    a398:	0c 94 8c 3f 	jmp	0x7f18	; 0x7f18 <EepromWriteBlock>
	}
}
    a39c:	df 91       	pop	r29
    a39e:	cf 91       	pop	r28
    a3a0:	08 95       	ret

0000a3a2 <clear_overlay>:
{
	SetTile(x, y, level_tile);
}

void clear_overlay(u8 overlayHeight)
{
    a3a2:	1f 93       	push	r17
    a3a4:	cf 93       	push	r28
    a3a6:	df 93       	push	r29
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
    a3a8:	d0 e0       	ldi	r29, 0x00	; 0
    a3aa:	10 e2       	ldi	r17, 0x20	; 32
    a3ac:	18 0f       	add	r17, r24
{
	SetTile(x, y, level_tile);
}

void clear_overlay(u8 overlayHeight)
{
    a3ae:	c0 e2       	ldi	r28, 0x20	; 32
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
	{
		for(u8 y = 0; y < overlayHeight; y++)
    a3b0:	c1 17       	cp	r28, r17
    a3b2:	41 f0       	breq	.+16     	; 0xa3c4 <clear_overlay+0x22>
		{
			SetTile(x, VRAM_TILES_V+y, 0);
    a3b4:	40 e0       	ldi	r20, 0x00	; 0
    a3b6:	50 e0       	ldi	r21, 0x00	; 0
    a3b8:	6c 2f       	mov	r22, r28
    a3ba:	8d 2f       	mov	r24, r29
    a3bc:	0e 94 1b 3e 	call	0x7c36	; 0x7c36 <SetTile>
    a3c0:	cf 5f       	subi	r28, 0xFF	; 255
    a3c2:	f6 cf       	rjmp	.-20     	; 0xa3b0 <clear_overlay+0xe>
	SetTile(x, y, level_tile);
}

void clear_overlay(u8 overlayHeight)
{
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
    a3c4:	df 5f       	subi	r29, 0xFF	; 255
    a3c6:	dc 31       	cpi	r29, 0x1C	; 28
    a3c8:	91 f7       	brne	.-28     	; 0xa3ae <clear_overlay+0xc>
		for(u8 y = 0; y < overlayHeight; y++)
		{
			SetTile(x, VRAM_TILES_V+y, 0);
		}
	}
}
    a3ca:	df 91       	pop	r29
    a3cc:	cf 91       	pop	r28
    a3ce:	1f 91       	pop	r17
    a3d0:	08 95       	ret

0000a3d2 <read_level_byte>:

u8 read_level_byte(char* level_data, u16 index)
{
    a3d2:	0f 93       	push	r16
    a3d4:	1f 93       	push	r17
    a3d6:	cf 93       	push	r28
    a3d8:	df 93       	push	r29
    a3da:	8c 01       	movw	r16, r24
    a3dc:	eb 01       	movw	r28, r22
	u8 mega_tile_x = 0;
	u8 mega_tile_y = 0;
	u8 mega_tile_x_offset = 0;
	u8 mega_tile_y_offset = 0;

	if (is_space())
    a3de:	0e 94 93 4f 	call	0x9f26	; 0x9f26 <is_space>
    a3e2:	88 23       	and	r24, r24
    a3e4:	a1 f1       	breq	.+104    	; 0xa44e <read_level_byte+0x7c>
	{
		if (index == 0) return pgm_read_byte(&level_data[index])*MAP_SPACE_MEGA_TILES_MEGA_TILE_WIDTH;
    a3e6:	20 97       	sbiw	r28, 0x00	; 0
    a3e8:	29 f4       	brne	.+10     	; 0xa3f4 <read_level_byte+0x22>
    a3ea:	f8 01       	movw	r30, r16
    a3ec:	84 91       	lpm	r24, Z
    a3ee:	88 0f       	add	r24, r24
    a3f0:	88 0f       	add	r24, r24
    a3f2:	71 c0       	rjmp	.+226    	; 0xa4d6 <read_level_byte+0x104>
		if (index == 1) return pgm_read_byte(&level_data[index])*MAP_SPACE_MEGA_TILES_MEGA_TILE_HEIGHT;
    a3f4:	c1 30       	cpi	r28, 0x01	; 1
    a3f6:	d1 05       	cpc	r29, r1
    a3f8:	b1 f1       	breq	.+108    	; 0xa466 <read_level_byte+0x94>
		index -= 2;
    a3fa:	22 97       	sbiw	r28, 0x02	; 2
		
		x = index % 32;
		y = index / 32;
    a3fc:	ce 01       	movw	r24, r28
    a3fe:	25 e0       	ldi	r18, 0x05	; 5
    a400:	96 95       	lsr	r25
    a402:	87 95       	ror	r24
    a404:	2a 95       	dec	r18
    a406:	e1 f7       	brne	.-8      	; 0xa400 <read_level_byte+0x2e>
		mega_tile_x = x / MAP_SPACE_MEGA_TILES_MEGA_TILE_WIDTH;
		mega_tile_y = y / MAP_SPACE_MEGA_TILES_MEGA_TILE_HEIGHT;
    a408:	65 e0       	ldi	r22, 0x05	; 5
    a40a:	0e 94 3f 6c 	call	0xd87e	; 0xd87e <__udivmodqi4>
	{
		if (index == 0) return pgm_read_byte(&level_data[index])*MAP_SPACE_MEGA_TILES_MEGA_TILE_WIDTH;
		if (index == 1) return pgm_read_byte(&level_data[index])*MAP_SPACE_MEGA_TILES_MEGA_TILE_HEIGHT;
		index -= 2;
		
		x = index % 32;
    a40e:	2c 2f       	mov	r18, r28
    a410:	2f 71       	andi	r18, 0x1F	; 31
		y = index / 32;
		mega_tile_x = x / MAP_SPACE_MEGA_TILES_MEGA_TILE_WIDTH;
    a412:	26 95       	lsr	r18
    a414:	26 95       	lsr	r18
		mega_tile_y = y / MAP_SPACE_MEGA_TILES_MEGA_TILE_HEIGHT;
		mega_tile_x_offset = x % MAP_SPACE_MEGA_TILES_MEGA_TILE_WIDTH;
		mega_tile_y_offset = y % MAP_SPACE_MEGA_TILES_MEGA_TILE_HEIGHT;
		
		mega_tile_index = pgm_read_byte(2+(&level_data[mega_tile_y*(32/MAP_SPACE_MEGA_TILES_MEGA_TILE_WIDTH) + mega_tile_x]));
    a416:	30 e0       	ldi	r19, 0x00	; 0
    a418:	f8 e0       	ldi	r31, 0x08	; 8
    a41a:	8f 9f       	mul	r24, r31
    a41c:	20 0d       	add	r18, r0
    a41e:	31 1d       	adc	r19, r1
    a420:	11 24       	eor	r1, r1
    a422:	2e 5f       	subi	r18, 0xFE	; 254
    a424:	3f 4f       	sbci	r19, 0xFF	; 255
    a426:	f8 01       	movw	r30, r16
    a428:	e2 0f       	add	r30, r18
    a42a:	f3 1f       	adc	r31, r19
    a42c:	84 91       	lpm	r24, Z
		
		x = index % 32;
		y = index / 32;
		mega_tile_x = x / MAP_SPACE_MEGA_TILES_MEGA_TILE_WIDTH;
		mega_tile_y = y / MAP_SPACE_MEGA_TILES_MEGA_TILE_HEIGHT;
		mega_tile_x_offset = x % MAP_SPACE_MEGA_TILES_MEGA_TILE_WIDTH;
    a42e:	c3 70       	andi	r28, 0x03	; 3
		mega_tile_y_offset = y % MAP_SPACE_MEGA_TILES_MEGA_TILE_HEIGHT;
		
		mega_tile_index = pgm_read_byte(2+(&level_data[mega_tile_y*(32/MAP_SPACE_MEGA_TILES_MEGA_TILE_WIDTH) + mega_tile_x]));
		mega_tile_index *= MAP_SPACE_MEGA_TILES_MEGA_TILE_WIDTH*MAP_SPACE_MEGA_TILES_MEGA_TILE_HEIGHT;
		
		return pgm_read_byte(&map_space_mega_tiles[mega_tile_index+(mega_tile_y_offset*MAP_SPACE_MEGA_TILES_MEGA_TILE_WIDTH+mega_tile_x_offset)]);
    a430:	ec 2f       	mov	r30, r28
    a432:	f0 e0       	ldi	r31, 0x00	; 0
    a434:	24 e0       	ldi	r18, 0x04	; 4
    a436:	92 9f       	mul	r25, r18
    a438:	e0 0d       	add	r30, r0
    a43a:	f1 1d       	adc	r31, r1
    a43c:	11 24       	eor	r1, r1
    a43e:	44 e1       	ldi	r20, 0x14	; 20
    a440:	84 9f       	mul	r24, r20
    a442:	e0 0d       	add	r30, r0
    a444:	f1 1d       	adc	r31, r1
    a446:	11 24       	eor	r1, r1
    a448:	ed 55       	subi	r30, 0x5D	; 93
    a44a:	fd 4a       	sbci	r31, 0xAD	; 173
    a44c:	43 c0       	rjmp	.+134    	; 0xa4d4 <read_level_byte+0x102>
	}
	else
	{
		if (index == 0) return pgm_read_byte(&level_data[index])*MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH;
    a44e:	20 97       	sbiw	r28, 0x00	; 0
    a450:	39 f4       	brne	.+14     	; 0xa460 <read_level_byte+0x8e>
    a452:	f8 01       	movw	r30, r16
    a454:	04 91       	lpm	r16, Z
    a456:	80 2f       	mov	r24, r16
    a458:	88 0f       	add	r24, r24
    a45a:	88 0f       	add	r24, r24
    a45c:	80 0f       	add	r24, r16
    a45e:	3b c0       	rjmp	.+118    	; 0xa4d6 <read_level_byte+0x104>
		if (index == 1) return pgm_read_byte(&level_data[index])*MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
    a460:	c1 30       	cpi	r28, 0x01	; 1
    a462:	d1 05       	cpc	r29, r1
    a464:	41 f4       	brne	.+16     	; 0xa476 <read_level_byte+0xa4>
    a466:	f8 01       	movw	r30, r16
    a468:	31 96       	adiw	r30, 0x01	; 1
    a46a:	e4 91       	lpm	r30, Z
    a46c:	8e 2f       	mov	r24, r30
    a46e:	88 0f       	add	r24, r24
    a470:	88 0f       	add	r24, r24
    a472:	8e 0f       	add	r24, r30
    a474:	30 c0       	rjmp	.+96     	; 0xa4d6 <read_level_byte+0x104>
		index -=2;
    a476:	ce 01       	movw	r24, r28
    a478:	02 97       	sbiw	r24, 0x02	; 2
		
		x = index % game.level_width;
    a47a:	30 91 ba 0d 	lds	r19, 0x0DBA
    a47e:	63 2f       	mov	r22, r19
    a480:	70 e0       	ldi	r23, 0x00	; 0
    a482:	0e 94 59 6c 	call	0xd8b2	; 0xd8b2 <__udivmodhi4>
    a486:	e8 2f       	mov	r30, r24
		y = index / game.level_width;
		mega_tile_x = x / MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH;
		mega_tile_y = y / MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
    a488:	25 e0       	ldi	r18, 0x05	; 5
    a48a:	86 2f       	mov	r24, r22
    a48c:	62 2f       	mov	r22, r18
    a48e:	0e 94 3f 6c 	call	0xd87e	; 0xd87e <__udivmodqi4>
    a492:	58 2f       	mov	r21, r24
    a494:	49 2f       	mov	r20, r25
		mega_tile_x_offset = x % MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH;
		mega_tile_y_offset = y % MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
		
		mega_tile_index = pgm_read_byte(2+(&level_data[mega_tile_y*(game.level_width/MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH) + mega_tile_x]));
    a496:	83 2f       	mov	r24, r19
    a498:	0e 94 3f 6c 	call	0xd87e	; 0xd87e <__udivmodqi4>
    a49c:	38 2f       	mov	r19, r24
		if (index == 1) return pgm_read_byte(&level_data[index])*MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
		index -=2;
		
		x = index % game.level_width;
		y = index / game.level_width;
		mega_tile_x = x / MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH;
    a49e:	8e 2f       	mov	r24, r30
    a4a0:	0e 94 3f 6c 	call	0xd87e	; 0xd87e <__udivmodqi4>
		mega_tile_y = y / MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
		mega_tile_x_offset = x % MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH;
		mega_tile_y_offset = y % MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
		
		mega_tile_index = pgm_read_byte(2+(&level_data[mega_tile_y*(game.level_width/MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH) + mega_tile_x]));
    a4a4:	e8 2f       	mov	r30, r24
    a4a6:	f0 e0       	ldi	r31, 0x00	; 0
    a4a8:	53 9f       	mul	r21, r19
    a4aa:	e0 0d       	add	r30, r0
    a4ac:	f1 1d       	adc	r31, r1
    a4ae:	11 24       	eor	r1, r1
    a4b0:	32 96       	adiw	r30, 0x02	; 2
    a4b2:	e0 0f       	add	r30, r16
    a4b4:	f1 1f       	adc	r31, r17
    a4b6:	04 91       	lpm	r16, Z
		mega_tile_index *= MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH*MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
		
		return pgm_read_byte(&map_level_mega_tiles[mega_tile_index+(mega_tile_y_offset*MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH+mega_tile_x_offset)]);
    a4b8:	e9 2f       	mov	r30, r25
    a4ba:	f0 e0       	ldi	r31, 0x00	; 0
    a4bc:	25 e0       	ldi	r18, 0x05	; 5
    a4be:	42 9f       	mul	r20, r18
    a4c0:	e0 0d       	add	r30, r0
    a4c2:	f1 1d       	adc	r31, r1
    a4c4:	11 24       	eor	r1, r1
    a4c6:	49 e1       	ldi	r20, 0x19	; 25
    a4c8:	04 9f       	mul	r16, r20
    a4ca:	e0 0d       	add	r30, r0
    a4cc:	f1 1d       	adc	r31, r1
    a4ce:	11 24       	eor	r1, r1
    a4d0:	ef 59       	subi	r30, 0x9F	; 159
    a4d2:	fa 4a       	sbci	r31, 0xAA	; 170
    a4d4:	84 91       	lpm	r24, Z
	}
}
    a4d6:	df 91       	pop	r29
    a4d8:	cf 91       	pop	r28
    a4da:	1f 91       	pop	r17
    a4dc:	0f 91       	pop	r16
    a4de:	08 95       	ret

0000a4e0 <get_level_tile>:
{
	return 20;
}

u8 get_level_tile(char* level_data, u16 x, u16 y)
{
    a4e0:	ef 92       	push	r14
    a4e2:	ff 92       	push	r15
    a4e4:	0f 93       	push	r16
    a4e6:	1f 93       	push	r17
    a4e8:	cf 93       	push	r28
    a4ea:	df 93       	push	r29
    a4ec:	8c 01       	movw	r16, r24
    a4ee:	7b 01       	movw	r14, r22
    a4f0:	ea 01       	movw	r28, r20
	if (is_space())
    a4f2:	0e 94 93 4f 	call	0x9f26	; 0x9f26 <is_space>
    a4f6:	b7 01       	movw	r22, r14
    a4f8:	6e 5f       	subi	r22, 0xFE	; 254
    a4fa:	7f 4f       	sbci	r23, 0xFF	; 255
    a4fc:	88 23       	and	r24, r24
    a4fe:	41 f0       	breq	.+16     	; 0xa510 <get_level_tile+0x30>
	{
		return read_level_byte(level_data, 2 + y*32+x);
    a500:	85 e0       	ldi	r24, 0x05	; 5
    a502:	cc 0f       	add	r28, r28
    a504:	dd 1f       	adc	r29, r29
    a506:	8a 95       	dec	r24
    a508:	e1 f7       	brne	.-8      	; 0xa502 <get_level_tile+0x22>
    a50a:	6c 0f       	add	r22, r28
    a50c:	7d 1f       	adc	r23, r29
    a50e:	09 c0       	rjmp	.+18     	; 0xa522 <get_level_tile+0x42>
	}
	return read_level_byte(level_data, 2 + y*game.level_width+x);
    a510:	80 91 ba 0d 	lds	r24, 0x0DBA
    a514:	8c 9f       	mul	r24, r28
    a516:	a0 01       	movw	r20, r0
    a518:	8d 9f       	mul	r24, r29
    a51a:	50 0d       	add	r21, r0
    a51c:	11 24       	eor	r1, r1
    a51e:	64 0f       	add	r22, r20
    a520:	75 1f       	adc	r23, r21
    a522:	c8 01       	movw	r24, r16
}
    a524:	df 91       	pop	r29
    a526:	cf 91       	pop	r28
    a528:	1f 91       	pop	r17
    a52a:	0f 91       	pop	r16
    a52c:	ff 90       	pop	r15
    a52e:	ef 90       	pop	r14
{
	if (is_space())
	{
		return read_level_byte(level_data, 2 + y*32+x);
	}
	return read_level_byte(level_data, 2 + y*game.level_width+x);
    a530:	0c 94 e9 51 	jmp	0xa3d2	; 0xa3d2 <read_level_byte>

0000a534 <render_camera_view>:
}

void render_camera_view()
{
    a534:	6f 92       	push	r6
    a536:	7f 92       	push	r7
    a538:	8f 92       	push	r8
    a53a:	9f 92       	push	r9
    a53c:	af 92       	push	r10
    a53e:	bf 92       	push	r11
    a540:	cf 92       	push	r12
    a542:	df 92       	push	r13
    a544:	ef 92       	push	r14
    a546:	ff 92       	push	r15
    a548:	0f 93       	push	r16
    a54a:	1f 93       	push	r17
    a54c:	cf 93       	push	r28
    a54e:	df 93       	push	r29
	u8 level_tile;
	u16 camara_x_tile = game.camera_x/8;
    a550:	e0 90 aa 0d 	lds	r14, 0x0DAA
    a554:	f0 90 ab 0d 	lds	r15, 0x0DAB
    a558:	83 e0       	ldi	r24, 0x03	; 3
    a55a:	f6 94       	lsr	r15
    a55c:	e7 94       	ror	r14
    a55e:	8a 95       	dec	r24
    a560:	e1 f7       	brne	.-8      	; 0xa55a <render_camera_view+0x26>
	u16 camera_y_tile = game.camera_y/8;
    a562:	00 91 ac 0d 	lds	r16, 0x0DAC
    a566:	10 91 ad 0d 	lds	r17, 0x0DAD
    a56a:	93 e0       	ldi	r25, 0x03	; 3
    a56c:	16 95       	lsr	r17
    a56e:	07 95       	ror	r16
    a570:	9a 95       	dec	r25
    a572:	e1 f7       	brne	.-8      	; 0xa56c <render_camera_view+0x38>
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    a574:	37 01       	movw	r6, r14
    a576:	67 01       	movw	r12, r14
    a578:	8c e1       	ldi	r24, 0x1C	; 28
    a57a:	c8 0e       	add	r12, r24
    a57c:	d1 1c       	adc	r13, r1
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    a57e:	58 01       	movw	r10, r16
    a580:	89 e1       	ldi	r24, 0x19	; 25
    a582:	a8 0e       	add	r10, r24
    a584:	b1 1c       	adc	r11, r1
		{
			level_tile = get_level_tile(game.current_level, x, y);
			render_level_tile(level_tile, (Screen.scrollX / 8 + x - camara_x_tile) % 32, (Screen.scrollY / 8 + y - camera_y_tile) % 30);
    a586:	2e e1       	ldi	r18, 0x1E	; 30
    a588:	82 2e       	mov	r8, r18
    a58a:	91 2c       	mov	r9, r1
{
	u8 level_tile;
	u16 camara_x_tile = game.camera_x/8;
	u16 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    a58c:	c6 14       	cp	r12, r6
    a58e:	d7 04       	cpc	r13, r7
    a590:	70 f1       	brcs	.+92     	; 0xa5ee <render_camera_view+0xba>
    a592:	e8 01       	movw	r28, r16
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    a594:	ac 16       	cp	r10, r28
    a596:	bd 06       	cpc	r11, r29
    a598:	30 f1       	brcs	.+76     	; 0xa5e6 <render_camera_view+0xb2>
		{
			level_tile = get_level_tile(game.current_level, x, y);
    a59a:	ae 01       	movw	r20, r28
    a59c:	b3 01       	movw	r22, r6
    a59e:	80 91 a3 0f 	lds	r24, 0x0FA3
    a5a2:	90 91 a4 0f 	lds	r25, 0x0FA4
    a5a6:	0e 94 70 52 	call	0xa4e0	; 0xa4e0 <get_level_tile>
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    a5aa:	28 2f       	mov	r18, r24
    a5ac:	30 e0       	ldi	r19, 0x00	; 0
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
		{
			level_tile = get_level_tile(game.current_level, x, y);
			render_level_tile(level_tile, (Screen.scrollX / 8 + x - camara_x_tile) % 32, (Screen.scrollY / 8 + y - camera_y_tile) % 30);
    a5ae:	80 91 b3 0c 	lds	r24, 0x0CB3
    a5b2:	86 95       	lsr	r24
    a5b4:	86 95       	lsr	r24
    a5b6:	86 95       	lsr	r24
    a5b8:	90 e0       	ldi	r25, 0x00	; 0
    a5ba:	80 1b       	sub	r24, r16
    a5bc:	91 0b       	sbc	r25, r17
    a5be:	8c 0f       	add	r24, r28
    a5c0:	9d 1f       	adc	r25, r29
    a5c2:	b4 01       	movw	r22, r8
    a5c4:	0e 94 59 6c 	call	0xd8b2	; 0xd8b2 <__udivmodhi4>
    a5c8:	90 91 b2 0c 	lds	r25, 0x0CB2
    a5cc:	96 95       	lsr	r25
    a5ce:	96 95       	lsr	r25
    a5d0:	96 95       	lsr	r25
    a5d2:	9e 19       	sub	r25, r14
    a5d4:	96 0d       	add	r25, r6
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    a5d6:	a9 01       	movw	r20, r18
    a5d8:	68 2f       	mov	r22, r24
    a5da:	89 2f       	mov	r24, r25
    a5dc:	8f 71       	andi	r24, 0x1F	; 31
    a5de:	0e 94 1b 3e 	call	0x7c36	; 0x7c36 <SetTile>
	u16 camara_x_tile = game.camera_x/8;
	u16 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    a5e2:	21 96       	adiw	r28, 0x01	; 1
    a5e4:	d7 cf       	rjmp	.-82     	; 0xa594 <render_camera_view+0x60>
{
	u8 level_tile;
	u16 camara_x_tile = game.camera_x/8;
	u16 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    a5e6:	8f ef       	ldi	r24, 0xFF	; 255
    a5e8:	68 1a       	sub	r6, r24
    a5ea:	78 0a       	sbc	r7, r24
    a5ec:	cf cf       	rjmp	.-98     	; 0xa58c <render_camera_view+0x58>
		{
			level_tile = get_level_tile(game.current_level, x, y);
			render_level_tile(level_tile, (Screen.scrollX / 8 + x - camara_x_tile) % 32, (Screen.scrollY / 8 + y - camera_y_tile) % 30);
		}
	}
}
    a5ee:	df 91       	pop	r29
    a5f0:	cf 91       	pop	r28
    a5f2:	1f 91       	pop	r17
    a5f4:	0f 91       	pop	r16
    a5f6:	ff 90       	pop	r15
    a5f8:	ef 90       	pop	r14
    a5fa:	df 90       	pop	r13
    a5fc:	cf 90       	pop	r12
    a5fe:	bf 90       	pop	r11
    a600:	af 90       	pop	r10
    a602:	9f 90       	pop	r9
    a604:	8f 90       	pop	r8
    a606:	7f 90       	pop	r7
    a608:	6f 90       	pop	r6
    a60a:	08 95       	ret

0000a60c <spawn_enemy>:

void spawn_enemy(u16 x, u16 y)
{
    a60c:	ff 92       	push	r15
    a60e:	0f 93       	push	r16
    a610:	1f 93       	push	r17
    a612:	cf 93       	push	r28
    a614:	df 93       	push	r29
    a616:	00 d0       	rcall	.+0      	; 0xa618 <spawn_enemy+0xc>
    a618:	cd b7       	in	r28, 0x3d	; 61
    a61a:	de b7       	in	r29, 0x3e	; 62
    a61c:	26 ea       	ldi	r18, 0xA6	; 166
    a61e:	3d e0       	ldi	r19, 0x0D	; 13
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    a620:	f1 2c       	mov	r15, r1
    a622:	f9 01       	movw	r30, r18
    a624:	e5 54       	subi	r30, 0x45	; 69
    a626:	ff 4f       	sbci	r31, 0xFF	; 255
	{
		if (!game.enemies[i].active)
    a628:	40 81       	ld	r20, Z
    a62a:	41 11       	cpse	r20, r1
    a62c:	1c c0       	rjmp	.+56     	; 0xa666 <spawn_enemy+0x5a>
    a62e:	7a 96       	adiw	r30, 0x1a	; 26
		{
			for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
			{
				if (!game.enemies[i].shot[j].active)
    a630:	40 81       	ld	r20, Z
    a632:	41 11       	cpse	r20, r1
    a634:	18 c0       	rjmp	.+48     	; 0xa666 <spawn_enemy+0x5a>
    a636:	ab 01       	movw	r20, r22
    a638:	8c 01       	movw	r16, r24
				{
					if (is_space())
    a63a:	69 83       	std	Y+1, r22	; 0x01
    a63c:	5a 83       	std	Y+2, r21	; 0x02
    a63e:	0e 94 93 4f 	call	0x9f26	; 0x9f26 <is_space>
    a642:	49 81       	ldd	r20, Y+1	; 0x01
    a644:	5a 81       	ldd	r21, Y+2	; 0x02
					{
						init_enemy_shark(i, x, y);
    a646:	b8 01       	movw	r22, r16
		{
			for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
			{
				if (!game.enemies[i].shot[j].active)
				{
					if (is_space())
    a648:	88 23       	and	r24, r24
    a64a:	21 f0       	breq	.+8      	; 0xa654 <spawn_enemy+0x48>
					{
						init_enemy_shark(i, x, y);
    a64c:	8f 2d       	mov	r24, r15
    a64e:	0e 94 58 51 	call	0xa2b0	; 0xa2b0 <init_enemy_shark>
    a652:	03 c0       	rjmp	.+6      	; 0xa65a <spawn_enemy+0x4e>
					}
					else
					{
						init_enemy_spider(i, x, y);
    a654:	8f 2d       	mov	r24, r15
    a656:	0e 94 e9 50 	call	0xa1d2	; 0xa1d2 <init_enemy_spider>
					}
					game.active_enemies++;
    a65a:	80 91 c3 0d 	lds	r24, 0x0DC3
    a65e:	8f 5f       	subi	r24, 0xFF	; 255
    a660:	80 93 c3 0d 	sts	0x0DC3, r24
    a664:	06 c0       	rjmp	.+12     	; 0xa672 <spawn_enemy+0x66>
	}
}

void spawn_enemy(u16 x, u16 y)
{
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    a666:	f3 94       	inc	r15
    a668:	2e 5b       	subi	r18, 0xBE	; 190
    a66a:	3f 4f       	sbci	r19, 0xFF	; 255
    a66c:	45 e0       	ldi	r20, 0x05	; 5
    a66e:	f4 12       	cpse	r15, r20
    a670:	d8 cf       	rjmp	.-80     	; 0xa622 <spawn_enemy+0x16>
					return;
				}
			}
		}
	}
}
    a672:	0f 90       	pop	r0
    a674:	0f 90       	pop	r0
    a676:	df 91       	pop	r29
    a678:	cf 91       	pop	r28
    a67a:	1f 91       	pop	r17
    a67c:	0f 91       	pop	r16
    a67e:	ff 90       	pop	r15
    a680:	08 95       	ret

0000a682 <solid_tile>:

u8 solid_tile(u8 level_tile)
{
	switch (level_tile)
    a682:	8b 30       	cpi	r24, 0x0B	; 11
    a684:	30 f4       	brcc	.+12     	; 0xa692 <solid_tile+0x10>
    a686:	89 30       	cpi	r24, 0x09	; 9
    a688:	48 f4       	brcc	.+18     	; 0xa69c <solid_tile+0x1a>
    a68a:	81 50       	subi	r24, 0x01	; 1
    a68c:	84 30       	cpi	r24, 0x04	; 4
    a68e:	20 f4       	brcc	.+8      	; 0xa698 <solid_tile+0x16>
    a690:	05 c0       	rjmp	.+10     	; 0xa69c <solid_tile+0x1a>
    a692:	8c 50       	subi	r24, 0x0C	; 12
    a694:	83 30       	cpi	r24, 0x03	; 3
    a696:	10 f0       	brcs	.+4      	; 0xa69c <solid_tile+0x1a>
		case L_ICICLE_UP : return 1;
		case L_FIRE_BOTTOM : return 1;
		case L_FIRE_TOP : return 1;
		case L_FIRE_LAVA : return 1;
	}
	return 0;
    a698:	80 e0       	ldi	r24, 0x00	; 0
    a69a:	08 95       	ret

u8 solid_tile(u8 level_tile)
{
	switch (level_tile)
	{
		case L_ICE_MIDDLE : return 1;
    a69c:	81 e0       	ldi	r24, 0x01	; 1
		case L_FIRE_BOTTOM : return 1;
		case L_FIRE_TOP : return 1;
		case L_FIRE_LAVA : return 1;
	}
	return 0;
}
    a69e:	08 95       	ret

0000a6a0 <append_tile_column>:
	}
	return 0;
}

void append_tile_column()
{
    a6a0:	cf 92       	push	r12
    a6a2:	df 92       	push	r13
    a6a4:	ef 92       	push	r14
    a6a6:	ff 92       	push	r15
    a6a8:	0f 93       	push	r16
    a6aa:	1f 93       	push	r17
    a6ac:	cf 93       	push	r28
    a6ae:	df 93       	push	r29
	u8 enemy_spawned = 0;
	u8 level_tile;
	u8 rndom = LBRandom(0, CAMERA_HEIGHT-1)*8;
    a6b0:	68 e1       	ldi	r22, 0x18	; 24
    a6b2:	80 e0       	ldi	r24, 0x00	; 0
    a6b4:	0e 94 9f 4e 	call	0x9d3e	; 0x9d3e <LBRandom>
    a6b8:	88 0f       	add	r24, r24
    a6ba:	88 0f       	add	r24, r24
    a6bc:	88 0f       	add	r24, r24

	game.column_count++;
    a6be:	20 91 b4 0d 	lds	r18, 0x0DB4
    a6c2:	30 91 b5 0d 	lds	r19, 0x0DB5
    a6c6:	2f 5f       	subi	r18, 0xFF	; 255
    a6c8:	3f 4f       	sbci	r19, 0xFF	; 255
    a6ca:	30 93 b5 0d 	sts	0x0DB5, r19
    a6ce:	20 93 b4 0d 	sts	0x0DB4, r18
    a6d2:	c0 e0       	ldi	r28, 0x00	; 0
    a6d4:	d0 e0       	ldi	r29, 0x00	; 0
	return 0;
}

void append_tile_column()
{
	u8 enemy_spawned = 0;
    a6d6:	d1 2c       	mov	r13, r1

	game.column_count++;
    for (u8 y = 0; y <= CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
    a6d8:	3e e1       	ldi	r19, 0x1E	; 30
    a6da:	e3 2e       	mov	r14, r19
    a6dc:	f1 2c       	mov	r15, r1
		if (game.column_count % game.spawn_rate == game.spawn_rate - 1 && game.active_enemies < MAX_ENEMIES && !enemy_spawned)
		{
			if (is_space())
			{
				spawn_enemy(game.camera_x+CAMERA_WIDTH*8, rndom);
    a6de:	08 2f       	mov	r16, r24
    a6e0:	10 e0       	ldi	r17, 0x00	; 0
	u8 rndom = LBRandom(0, CAMERA_HEIGHT-1)*8;

	game.column_count++;
    for (u8 y = 0; y <= CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
    a6e2:	40 91 ac 0d 	lds	r20, 0x0DAC
    a6e6:	50 91 ad 0d 	lds	r21, 0x0DAD
    a6ea:	23 e0       	ldi	r18, 0x03	; 3
    a6ec:	56 95       	lsr	r21
    a6ee:	47 95       	ror	r20
    a6f0:	2a 95       	dec	r18
    a6f2:	e1 f7       	brne	.-8      	; 0xa6ec <append_tile_column+0x4c>
    a6f4:	4c 0f       	add	r20, r28
    a6f6:	5d 1f       	adc	r21, r29
    a6f8:	60 91 a6 0d 	lds	r22, 0x0DA6
    a6fc:	70 91 a7 0d 	lds	r23, 0x0DA7
    a700:	80 91 a3 0f 	lds	r24, 0x0FA3
    a704:	90 91 a4 0f 	lds	r25, 0x0FA4
    a708:	0e 94 70 52 	call	0xa4e0	; 0xa4e0 <get_level_tile>
    a70c:	c8 2e       	mov	r12, r24
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    a70e:	28 2f       	mov	r18, r24
    a710:	30 e0       	ldi	r19, 0x00	; 0

	game.column_count++;
    for (u8 y = 0; y <= CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
    a712:	90 91 b3 0c 	lds	r25, 0x0CB3
    a716:	96 95       	lsr	r25
    a718:	96 95       	lsr	r25
    a71a:	96 95       	lsr	r25
    a71c:	ae 01       	movw	r20, r28
    a71e:	49 0f       	add	r20, r25
    a720:	51 1d       	adc	r21, r1
    a722:	ca 01       	movw	r24, r20
    a724:	b7 01       	movw	r22, r14
    a726:	0e 94 6d 6c 	call	0xd8da	; 0xd8da <__divmodhi4>
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    a72a:	a9 01       	movw	r20, r18
    a72c:	68 2f       	mov	r22, r24
    a72e:	80 91 c1 0d 	lds	r24, 0x0DC1
    a732:	0e 94 1b 3e 	call	0x7c36	; 0x7c36 <SetTile>
	game.column_count++;
    for (u8 y = 0; y <= CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
		if (game.column_count % game.spawn_rate == game.spawn_rate - 1 && game.active_enemies < MAX_ENEMIES && !enemy_spawned)
    a736:	20 91 c4 0d 	lds	r18, 0x0DC4
    a73a:	30 e0       	ldi	r19, 0x00	; 0
    a73c:	80 91 b4 0d 	lds	r24, 0x0DB4
    a740:	90 91 b5 0d 	lds	r25, 0x0DB5
    a744:	b9 01       	movw	r22, r18
    a746:	0e 94 59 6c 	call	0xd8b2	; 0xd8b2 <__udivmodhi4>
    a74a:	21 50       	subi	r18, 0x01	; 1
    a74c:	31 09       	sbc	r19, r1
    a74e:	82 17       	cp	r24, r18
    a750:	93 07       	cpc	r25, r19
    a752:	91 f5       	brne	.+100    	; 0xa7b8 <append_tile_column+0x118>
    a754:	80 91 c3 0d 	lds	r24, 0x0DC3
    a758:	85 30       	cpi	r24, 0x05	; 5
    a75a:	70 f5       	brcc	.+92     	; 0xa7b8 <append_tile_column+0x118>
    a75c:	d1 10       	cpse	r13, r1
    a75e:	2a c0       	rjmp	.+84     	; 0xa7b4 <append_tile_column+0x114>
		{
			if (is_space())
    a760:	0e 94 93 4f 	call	0x9f26	; 0x9f26 <is_space>
    a764:	88 23       	and	r24, r24
    a766:	31 f0       	breq	.+12     	; 0xa774 <append_tile_column+0xd4>
			{
				spawn_enemy(game.camera_x+CAMERA_WIDTH*8, rndom);
    a768:	80 91 aa 0d 	lds	r24, 0x0DAA
    a76c:	90 91 ab 0d 	lds	r25, 0x0DAB
    a770:	b8 01       	movw	r22, r16
    a772:	1c c0       	rjmp	.+56     	; 0xa7ac <append_tile_column+0x10c>
				enemy_spawned = 1;
			}
			else if (solid_tile(level_tile))
    a774:	8c 2d       	mov	r24, r12
    a776:	0e 94 41 53 	call	0xa682	; 0xa682 <solid_tile>
    a77a:	88 23       	and	r24, r24
    a77c:	e9 f0       	breq	.+58     	; 0xa7b8 <append_tile_column+0x118>
			{
				spawn_enemy(game.camera_x+CAMERA_WIDTH*8, (game.camera_y / 8 + y - 1)*8);
    a77e:	20 91 ac 0d 	lds	r18, 0x0DAC
    a782:	30 91 ad 0d 	lds	r19, 0x0DAD
    a786:	83 e0       	ldi	r24, 0x03	; 3
    a788:	36 95       	lsr	r19
    a78a:	27 95       	ror	r18
    a78c:	8a 95       	dec	r24
    a78e:	e1 f7       	brne	.-8      	; 0xa788 <append_tile_column+0xe8>
    a790:	21 50       	subi	r18, 0x01	; 1
    a792:	30 4e       	sbci	r19, 0xE0	; 224
    a794:	2c 0f       	add	r18, r28
    a796:	3d 1f       	adc	r19, r29
    a798:	b9 01       	movw	r22, r18
    a79a:	93 e0       	ldi	r25, 0x03	; 3
    a79c:	66 0f       	add	r22, r22
    a79e:	77 1f       	adc	r23, r23
    a7a0:	9a 95       	dec	r25
    a7a2:	e1 f7       	brne	.-8      	; 0xa79c <append_tile_column+0xfc>
    a7a4:	80 91 aa 0d 	lds	r24, 0x0DAA
    a7a8:	90 91 ab 0d 	lds	r25, 0x0DAB
    a7ac:	80 52       	subi	r24, 0x20	; 32
    a7ae:	9f 4f       	sbci	r25, 0xFF	; 255
    a7b0:	0e 94 06 53 	call	0xa60c	; 0xa60c <spawn_enemy>
    a7b4:	dd 24       	eor	r13, r13
    a7b6:	d3 94       	inc	r13
    a7b8:	21 96       	adiw	r28, 0x01	; 1
	u8 enemy_spawned = 0;
	u8 level_tile;
	u8 rndom = LBRandom(0, CAMERA_HEIGHT-1)*8;

	game.column_count++;
    for (u8 y = 0; y <= CAMERA_HEIGHT; y++)
    a7ba:	ca 31       	cpi	r28, 0x1A	; 26
    a7bc:	d1 05       	cpc	r29, r1
    a7be:	09 f0       	breq	.+2      	; 0xa7c2 <append_tile_column+0x122>
    a7c0:	90 cf       	rjmp	.-224    	; 0xa6e2 <append_tile_column+0x42>
				enemy_spawned = 1;
			}
		}
    }
	
    game.scroll_src_x++;
    a7c2:	c0 91 a6 0d 	lds	r28, 0x0DA6
    a7c6:	d0 91 a7 0d 	lds	r29, 0x0DA7
    a7ca:	21 96       	adiw	r28, 0x01	; 1
    a7cc:	d0 93 a7 0d 	sts	0x0DA7, r29
    a7d0:	c0 93 a6 0d 	sts	0x0DA6, r28
	game.scroll_dest_x++;
    a7d4:	80 91 c1 0d 	lds	r24, 0x0DC1
    a7d8:	8f 5f       	subi	r24, 0xFF	; 255
    if(game.scroll_dest_x>=32)game.scroll_dest_x=0;
    a7da:	80 32       	cpi	r24, 0x20	; 32
    a7dc:	18 f4       	brcc	.+6      	; 0xa7e4 <append_tile_column+0x144>
			}
		}
    }
	
    game.scroll_src_x++;
	game.scroll_dest_x++;
    a7de:	80 93 c1 0d 	sts	0x0DC1, r24
    a7e2:	02 c0       	rjmp	.+4      	; 0xa7e8 <append_tile_column+0x148>
    if(game.scroll_dest_x>=32)game.scroll_dest_x=0;
    a7e4:	10 92 c1 0d 	sts	0x0DC1, r1
	if(is_space() && game.scroll_src_x>=32)game.scroll_src_x=0;
    a7e8:	0e 94 93 4f 	call	0x9f26	; 0x9f26 <is_space>
    a7ec:	88 23       	and	r24, r24
    a7ee:	31 f0       	breq	.+12     	; 0xa7fc <append_tile_column+0x15c>
    a7f0:	a0 97       	sbiw	r28, 0x20	; 32
    a7f2:	20 f0       	brcs	.+8      	; 0xa7fc <append_tile_column+0x15c>
    a7f4:	10 92 a7 0d 	sts	0x0DA7, r1
    a7f8:	10 92 a6 0d 	sts	0x0DA6, r1
}
    a7fc:	df 91       	pop	r29
    a7fe:	cf 91       	pop	r28
    a800:	1f 91       	pop	r17
    a802:	0f 91       	pop	r16
    a804:	ff 90       	pop	r15
    a806:	ef 90       	pop	r14
    a808:	df 90       	pop	r13
    a80a:	cf 90       	pop	r12
    a80c:	08 95       	ret

0000a80e <append_tile_row>:

void append_tile_row()
{
    a80e:	cf 93       	push	r28
    a810:	df 93       	push	r29
    a812:	c0 e0       	ldi	r28, 0x00	; 0
    a814:	d0 e0       	ldi	r29, 0x00	; 0
	u8 level_tile;

    for (u8 x = 0; x <= CAMERA_WIDTH; x++)
	{
		level_tile = get_level_tile(game.current_level, x + game.camera_x / 8, game.scroll_src_y);
    a816:	40 91 a8 0d 	lds	r20, 0x0DA8
    a81a:	50 91 a9 0d 	lds	r21, 0x0DA9
    a81e:	60 91 aa 0d 	lds	r22, 0x0DAA
    a822:	70 91 ab 0d 	lds	r23, 0x0DAB
    a826:	83 e0       	ldi	r24, 0x03	; 3
    a828:	76 95       	lsr	r23
    a82a:	67 95       	ror	r22
    a82c:	8a 95       	dec	r24
    a82e:	e1 f7       	brne	.-8      	; 0xa828 <append_tile_row+0x1a>
    a830:	6c 0f       	add	r22, r28
    a832:	7d 1f       	adc	r23, r29
    a834:	80 91 a3 0f 	lds	r24, 0x0FA3
    a838:	90 91 a4 0f 	lds	r25, 0x0FA4
    a83c:	0e 94 70 52 	call	0xa4e0	; 0xa4e0 <get_level_tile>
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    a840:	48 2f       	mov	r20, r24
    a842:	50 e0       	ldi	r21, 0x00	; 0
	u8 level_tile;

    for (u8 x = 0; x <= CAMERA_WIDTH; x++)
	{
		level_tile = get_level_tile(game.current_level, x + game.camera_x / 8, game.scroll_src_y);
		render_level_tile(level_tile, (x + Screen.scrollX / 8) % 32, game.scroll_dest_y);
    a844:	80 91 b2 0c 	lds	r24, 0x0CB2
    a848:	86 95       	lsr	r24
    a84a:	86 95       	lsr	r24
    a84c:	86 95       	lsr	r24
    a84e:	8c 0f       	add	r24, r28
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    a850:	60 91 c2 0d 	lds	r22, 0x0DC2
    a854:	8f 71       	andi	r24, 0x1F	; 31
    a856:	0e 94 1b 3e 	call	0x7c36	; 0x7c36 <SetTile>
    a85a:	21 96       	adiw	r28, 0x01	; 1

void append_tile_row()
{
	u8 level_tile;

    for (u8 x = 0; x <= CAMERA_WIDTH; x++)
    a85c:	cd 31       	cpi	r28, 0x1D	; 29
    a85e:	d1 05       	cpc	r29, r1
    a860:	d1 f6       	brne	.-76     	; 0xa816 <append_tile_row+0x8>
	{
		level_tile = get_level_tile(game.current_level, x + game.camera_x / 8, game.scroll_src_y);
		render_level_tile(level_tile, (x + Screen.scrollX / 8) % 32, game.scroll_dest_y);
    }
	
    game.scroll_src_y++;
    a862:	80 91 a8 0d 	lds	r24, 0x0DA8
    a866:	90 91 a9 0d 	lds	r25, 0x0DA9
    a86a:	01 96       	adiw	r24, 0x01	; 1
    a86c:	90 93 a9 0d 	sts	0x0DA9, r25
    a870:	80 93 a8 0d 	sts	0x0DA8, r24
	game.scroll_dest_y++;
    a874:	80 91 c2 0d 	lds	r24, 0x0DC2
    a878:	8f 5f       	subi	r24, 0xFF	; 255
    if(game.scroll_dest_y>=30)game.scroll_dest_y=0;
    a87a:	8e 31       	cpi	r24, 0x1E	; 30
    a87c:	18 f4       	brcc	.+6      	; 0xa884 <append_tile_row+0x76>
		level_tile = get_level_tile(game.current_level, x + game.camera_x / 8, game.scroll_src_y);
		render_level_tile(level_tile, (x + Screen.scrollX / 8) % 32, game.scroll_dest_y);
    }
	
    game.scroll_src_y++;
	game.scroll_dest_y++;
    a87e:	80 93 c2 0d 	sts	0x0DC2, r24
    a882:	02 c0       	rjmp	.+4      	; 0xa888 <append_tile_row+0x7a>
    if(game.scroll_dest_y>=30)game.scroll_dest_y=0;
    a884:	10 92 c2 0d 	sts	0x0DC2, r1
}
    a888:	df 91       	pop	r29
    a88a:	cf 91       	pop	r28
    a88c:	08 95       	ret

0000a88e <move_camera_x>:

void move_camera_x()
{	
	game.camera_x++;
    a88e:	80 91 aa 0d 	lds	r24, 0x0DAA
    a892:	90 91 ab 0d 	lds	r25, 0x0DAB
    a896:	01 96       	adiw	r24, 0x01	; 1
    a898:	90 93 ab 0d 	sts	0x0DAB, r25
    a89c:	80 93 aa 0d 	sts	0x0DAA, r24
	Scroll(1,0);
    a8a0:	60 e0       	ldi	r22, 0x00	; 0
    a8a2:	81 e0       	ldi	r24, 0x01	; 1
    a8a4:	0e 94 28 4c 	call	0x9850	; 0x9850 <Scroll>
	if (++game.scroll_x == 8)
    a8a8:	80 91 bf 0d 	lds	r24, 0x0DBF
    a8ac:	8f 5f       	subi	r24, 0xFF	; 255
    a8ae:	88 30       	cpi	r24, 0x08	; 8
    a8b0:	19 f0       	breq	.+6      	; 0xa8b8 <move_camera_x+0x2a>
    a8b2:	80 93 bf 0d 	sts	0x0DBF, r24
    a8b6:	08 95       	ret
	{
		game.scroll_x = 0;
    a8b8:	10 92 bf 0d 	sts	0x0DBF, r1
		append_tile_column();
    a8bc:	0c 94 50 53 	jmp	0xa6a0	; 0xa6a0 <append_tile_column>

0000a8c0 <move_camera_y>:
	}
}

void move_camera_y()
{	
	game.camera_y+=2;
    a8c0:	80 91 ac 0d 	lds	r24, 0x0DAC
    a8c4:	90 91 ad 0d 	lds	r25, 0x0DAD
    a8c8:	02 96       	adiw	r24, 0x02	; 2
    a8ca:	90 93 ad 0d 	sts	0x0DAD, r25
    a8ce:	80 93 ac 0d 	sts	0x0DAC, r24
	game.scroll_y+=2;
    a8d2:	80 91 c0 0d 	lds	r24, 0x0DC0
    a8d6:	8e 5f       	subi	r24, 0xFE	; 254
    a8d8:	80 93 c0 0d 	sts	0x0DC0, r24
	Scroll(0,2);
    a8dc:	62 e0       	ldi	r22, 0x02	; 2
    a8de:	80 e0       	ldi	r24, 0x00	; 0
    a8e0:	0e 94 28 4c 	call	0x9850	; 0x9850 <Scroll>
	if (game.scroll_y == 8)
    a8e4:	80 91 c0 0d 	lds	r24, 0x0DC0
    a8e8:	88 30       	cpi	r24, 0x08	; 8
    a8ea:	21 f4       	brne	.+8      	; 0xa8f4 <move_camera_y+0x34>
	{
		game.scroll_y = 0;
    a8ec:	10 92 c0 0d 	sts	0x0DC0, r1
		append_tile_row();
    a8f0:	0c 94 07 54 	jmp	0xa80e	; 0xa80e <append_tile_row>
    a8f4:	08 95       	ret

0000a8f6 <map_ship>:
	}
}

void map_ship()
{
	game.player.run.anim_count = 2;
    a8f6:	82 e0       	ldi	r24, 0x02	; 2
    a8f8:	80 93 33 0e 	sts	0x0E33, r24
	game.player.run.frames_per_anim = EXPLOSION_FRAME_COUNT;
    a8fc:	85 e0       	ldi	r24, 0x05	; 5
    a8fe:	80 93 34 0e 	sts	0x0E34, r24
	game.player.run.anims = run_anim;
    a902:	ed ef       	ldi	r30, 0xFD	; 253
    a904:	ff e0       	ldi	r31, 0x0F	; 15
    a906:	f0 93 39 0e 	sts	0x0E39, r31
    a90a:	e0 93 38 0e 	sts	0x0E38, r30
	game.player.run.anims[0] = (char*) map_hero_ship_large_0;
    a90e:	87 e7       	ldi	r24, 0x77	; 119
    a910:	9d e2       	ldi	r25, 0x2D	; 45
    a912:	91 83       	std	Z+1, r25	; 0x01
    a914:	80 83       	st	Z, r24
	game.player.run.anims[1] = (char*) map_hero_ship_large_1;
    a916:	8d e6       	ldi	r24, 0x6D	; 109
    a918:	9d e2       	ldi	r25, 0x2D	; 45
    a91a:	93 83       	std	Z+3, r25	; 0x03
    a91c:	82 83       	std	Z+2, r24	; 0x02
    a91e:	08 95       	ret

0000a920 <map_level_info>:
}

void map_level_info(char* level)
{
    a920:	cf 93       	push	r28
    a922:	df 93       	push	r29
    a924:	ec 01       	movw	r28, r24
	game.current_level = level;
    a926:	90 93 a4 0f 	sts	0x0FA4, r25
    a92a:	80 93 a3 0f 	sts	0x0FA3, r24
	if (!is_space())
    a92e:	0e 94 93 4f 	call	0x9f26	; 0x9f26 <is_space>
    a932:	81 11       	cpse	r24, r1
    a934:	0d c0       	rjmp	.+26     	; 0xa950 <map_level_info+0x30>
	{
		game.level_width = read_level_byte(level, 0);
    a936:	60 e0       	ldi	r22, 0x00	; 0
    a938:	70 e0       	ldi	r23, 0x00	; 0
    a93a:	ce 01       	movw	r24, r28
    a93c:	0e 94 e9 51 	call	0xa3d2	; 0xa3d2 <read_level_byte>
    a940:	80 93 ba 0d 	sts	0x0DBA, r24
		game.level_height = read_level_byte(level, 1);
    a944:	61 e0       	ldi	r22, 0x01	; 1
    a946:	70 e0       	ldi	r23, 0x00	; 0
    a948:	ce 01       	movw	r24, r28
    a94a:	0e 94 e9 51 	call	0xa3d2	; 0xa3d2 <read_level_byte>
    a94e:	04 c0       	rjmp	.+8      	; 0xa958 <map_level_info+0x38>
		
	}
	else
	{
		game.level_width = 255;
    a950:	8f ef       	ldi	r24, 0xFF	; 255
    a952:	80 93 ba 0d 	sts	0x0DBA, r24
		game.level_height = 25;
    a956:	89 e1       	ldi	r24, 0x19	; 25
    a958:	80 93 bb 0d 	sts	0x0DBB, r24
	}
}
    a95c:	df 91       	pop	r29
    a95e:	cf 91       	pop	r28
    a960:	08 95       	ret

0000a962 <on_solid_ground>:
		}
	}
}

char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
    a962:	2f 92       	push	r2
    a964:	3f 92       	push	r3
    a966:	4f 92       	push	r4
    a968:	5f 92       	push	r5
    a96a:	6f 92       	push	r6
    a96c:	7f 92       	push	r7
    a96e:	8f 92       	push	r8
    a970:	9f 92       	push	r9
    a972:	af 92       	push	r10
    a974:	bf 92       	push	r11
    a976:	cf 92       	push	r12
    a978:	df 92       	push	r13
    a97a:	ef 92       	push	r14
    a97c:	ff 92       	push	r15
    a97e:	0f 93       	push	r16
    a980:	1f 93       	push	r17
    a982:	cf 93       	push	r28
    a984:	df 93       	push	r29
    a986:	00 d0       	rcall	.+0      	; 0xa988 <on_solid_ground+0x26>
    a988:	00 d0       	rcall	.+0      	; 0xa98a <on_solid_ground+0x28>
    a98a:	00 d0       	rcall	.+0      	; 0xa98c <on_solid_ground+0x2a>
    a98c:	cd b7       	in	r28, 0x3d	; 61
    a98e:	de b7       	in	r29, 0x3e	; 62
    a990:	9e 83       	std	Y+6, r25	; 0x06
    a992:	8d 83       	std	Y+5, r24	; 0x05
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
    a994:	88 e0       	ldi	r24, 0x08	; 8
    a996:	48 9f       	mul	r20, r24
    a998:	a0 01       	movw	r20, r0
    a99a:	11 24       	eor	r1, r1
    a99c:	26 2e       	mov	r2, r22
    a99e:	31 2c       	mov	r3, r1
char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
    a9a0:	00 e0       	ldi	r16, 0x00	; 0
    a9a2:	10 e0       	ldi	r17, 0x00	; 0
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
    a9a4:	ca 01       	movw	r24, r20
    a9a6:	aa 27       	eor	r26, r26
    a9a8:	97 fd       	sbrc	r25, 7
    a9aa:	a0 95       	com	r26
    a9ac:	ba 2f       	mov	r27, r26
    a9ae:	89 83       	std	Y+1, r24	; 0x01
    a9b0:	9a 83       	std	Y+2, r25	; 0x02
    a9b2:	ab 83       	std	Y+3, r26	; 0x03
    a9b4:	bc 83       	std	Y+4, r27	; 0x04
char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
    a9b6:	02 15       	cp	r16, r2
    a9b8:	13 05       	cpc	r17, r3
    a9ba:	09 f4       	brne	.+2      	; 0xa9be <on_solid_ground+0x5c>
    a9bc:	85 c0       	rjmp	.+266    	; 0xaac8 <on_solid_ground+0x166>
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
    a9be:	69 81       	ldd	r22, Y+1	; 0x01
    a9c0:	7a 81       	ldd	r23, Y+2	; 0x02
    a9c2:	8b 81       	ldd	r24, Y+3	; 0x03
    a9c4:	9c 81       	ldd	r25, Y+4	; 0x04
    a9c6:	0e 94 1e 6d 	call	0xda3c	; 0xda3c <__floatsisf>
    a9ca:	4b 01       	movw	r8, r22
    a9cc:	5c 01       	movw	r10, r24
    a9ce:	b8 01       	movw	r22, r16
    a9d0:	88 27       	eor	r24, r24
    a9d2:	77 fd       	sbrc	r23, 7
    a9d4:	80 95       	com	r24
    a9d6:	98 2f       	mov	r25, r24
    a9d8:	0e 94 1e 6d 	call	0xda3c	; 0xda3c <__floatsisf>
    a9dc:	6b 01       	movw	r12, r22
    a9de:	7c 01       	movw	r14, r24
    a9e0:	ad 81       	ldd	r26, Y+5	; 0x05
    a9e2:	be 81       	ldd	r27, Y+6	; 0x06
    a9e4:	18 96       	adiw	r26, 0x08	; 8
    a9e6:	2d 91       	ld	r18, X+
    a9e8:	3d 91       	ld	r19, X+
    a9ea:	4d 91       	ld	r20, X+
    a9ec:	5c 91       	ld	r21, X
    a9ee:	1b 97       	sbiw	r26, 0x0b	; 11
    a9f0:	c5 01       	movw	r24, r10
    a9f2:	b4 01       	movw	r22, r8
    a9f4:	0e 94 88 6c 	call	0xd910	; 0xd910 <__addsf3>
    a9f8:	20 e0       	ldi	r18, 0x00	; 0
    a9fa:	30 e0       	ldi	r19, 0x00	; 0
    a9fc:	40 e0       	ldi	r20, 0x00	; 0
    a9fe:	5e e3       	ldi	r21, 0x3E	; 62
    aa00:	0e 94 d2 6d 	call	0xdba4	; 0xdba4 <__mulsf3>
    aa04:	0e 94 f0 6c 	call	0xd9e0	; 0xd9e0 <__fixunssfsi>
    aa08:	2b 01       	movw	r4, r22
    aa0a:	3c 01       	movw	r6, r24
    aa0c:	20 e0       	ldi	r18, 0x00	; 0
    aa0e:	30 e0       	ldi	r19, 0x00	; 0
    aa10:	40 e0       	ldi	r20, 0x00	; 0
    aa12:	5e e3       	ldi	r21, 0x3E	; 62
    aa14:	ed 81       	ldd	r30, Y+5	; 0x05
    aa16:	fe 81       	ldd	r31, Y+6	; 0x06
    aa18:	64 81       	ldd	r22, Z+4	; 0x04
    aa1a:	75 81       	ldd	r23, Z+5	; 0x05
    aa1c:	86 81       	ldd	r24, Z+6	; 0x06
    aa1e:	97 81       	ldd	r25, Z+7	; 0x07
    aa20:	0e 94 d2 6d 	call	0xdba4	; 0xdba4 <__mulsf3>
    aa24:	a7 01       	movw	r20, r14
    aa26:	96 01       	movw	r18, r12
    aa28:	0e 94 88 6c 	call	0xd910	; 0xd910 <__addsf3>
    aa2c:	0e 94 f0 6c 	call	0xd9e0	; 0xd9e0 <__fixunssfsi>
    aa30:	a2 01       	movw	r20, r4
    aa32:	80 91 a3 0f 	lds	r24, 0x0FA3
    aa36:	90 91 a4 0f 	lds	r25, 0x0FA4
    aa3a:	0e 94 70 52 	call	0xa4e0	; 0xa4e0 <get_level_tile>
    aa3e:	78 2e       	mov	r7, r24
		lt2 = get_level_tile(game.current_level, (s->x+7) / 8 + x, (s->y + tile_height*8) / 8);
    aa40:	ad 81       	ldd	r26, Y+5	; 0x05
    aa42:	be 81       	ldd	r27, Y+6	; 0x06
    aa44:	18 96       	adiw	r26, 0x08	; 8
    aa46:	2d 91       	ld	r18, X+
    aa48:	3d 91       	ld	r19, X+
    aa4a:	4d 91       	ld	r20, X+
    aa4c:	5c 91       	ld	r21, X
    aa4e:	1b 97       	sbiw	r26, 0x0b	; 11
    aa50:	c5 01       	movw	r24, r10
    aa52:	b4 01       	movw	r22, r8
    aa54:	0e 94 88 6c 	call	0xd910	; 0xd910 <__addsf3>
    aa58:	20 e0       	ldi	r18, 0x00	; 0
    aa5a:	30 e0       	ldi	r19, 0x00	; 0
    aa5c:	40 e0       	ldi	r20, 0x00	; 0
    aa5e:	5e e3       	ldi	r21, 0x3E	; 62
    aa60:	0e 94 d2 6d 	call	0xdba4	; 0xdba4 <__mulsf3>
    aa64:	0e 94 f0 6c 	call	0xd9e0	; 0xd9e0 <__fixunssfsi>
    aa68:	4b 01       	movw	r8, r22
    aa6a:	5c 01       	movw	r10, r24
    aa6c:	20 e0       	ldi	r18, 0x00	; 0
    aa6e:	30 e0       	ldi	r19, 0x00	; 0
    aa70:	40 ee       	ldi	r20, 0xE0	; 224
    aa72:	50 e4       	ldi	r21, 0x40	; 64
    aa74:	ed 81       	ldd	r30, Y+5	; 0x05
    aa76:	fe 81       	ldd	r31, Y+6	; 0x06
    aa78:	64 81       	ldd	r22, Z+4	; 0x04
    aa7a:	75 81       	ldd	r23, Z+5	; 0x05
    aa7c:	86 81       	ldd	r24, Z+6	; 0x06
    aa7e:	97 81       	ldd	r25, Z+7	; 0x07
    aa80:	0e 94 88 6c 	call	0xd910	; 0xd910 <__addsf3>
    aa84:	20 e0       	ldi	r18, 0x00	; 0
    aa86:	30 e0       	ldi	r19, 0x00	; 0
    aa88:	40 e0       	ldi	r20, 0x00	; 0
    aa8a:	5e e3       	ldi	r21, 0x3E	; 62
    aa8c:	0e 94 d2 6d 	call	0xdba4	; 0xdba4 <__mulsf3>
    aa90:	a7 01       	movw	r20, r14
    aa92:	96 01       	movw	r18, r12
    aa94:	0e 94 88 6c 	call	0xd910	; 0xd910 <__addsf3>
    aa98:	0e 94 f0 6c 	call	0xd9e0	; 0xd9e0 <__fixunssfsi>
    aa9c:	a4 01       	movw	r20, r8
    aa9e:	80 91 a3 0f 	lds	r24, 0x0FA3
    aaa2:	90 91 a4 0f 	lds	r25, 0x0FA4
    aaa6:	0e 94 70 52 	call	0xa4e0	; 0xa4e0 <get_level_tile>
    aaaa:	f8 2e       	mov	r15, r24
		if (solid_tile(lt1) || solid_tile(lt2))
    aaac:	87 2d       	mov	r24, r7
    aaae:	0e 94 41 53 	call	0xa682	; 0xa682 <solid_tile>
    aab2:	81 11       	cpse	r24, r1
    aab4:	0b c0       	rjmp	.+22     	; 0xaacc <on_solid_ground+0x16a>
    aab6:	8f 2d       	mov	r24, r15
    aab8:	0e 94 41 53 	call	0xa682	; 0xa682 <solid_tile>
    aabc:	0f 5f       	subi	r16, 0xFF	; 255
    aabe:	1f 4f       	sbci	r17, 0xFF	; 255
    aac0:	88 23       	and	r24, r24
    aac2:	09 f4       	brne	.+2      	; 0xaac6 <on_solid_ground+0x164>
    aac4:	78 cf       	rjmp	.-272    	; 0xa9b6 <on_solid_ground+0x54>
    aac6:	02 c0       	rjmp	.+4      	; 0xaacc <on_solid_ground+0x16a>
		{
			return 1;
		}
	}
	return 0;
    aac8:	80 e0       	ldi	r24, 0x00	; 0
    aaca:	01 c0       	rjmp	.+2      	; 0xaace <on_solid_ground+0x16c>
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
		lt2 = get_level_tile(game.current_level, (s->x+7) / 8 + x, (s->y + tile_height*8) / 8);
		if (solid_tile(lt1) || solid_tile(lt2))
		{
			return 1;
    aacc:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return 0;
}
    aace:	26 96       	adiw	r28, 0x06	; 6
    aad0:	0f b6       	in	r0, 0x3f	; 63
    aad2:	f8 94       	cli
    aad4:	de bf       	out	0x3e, r29	; 62
    aad6:	0f be       	out	0x3f, r0	; 63
    aad8:	cd bf       	out	0x3d, r28	; 61
    aada:	df 91       	pop	r29
    aadc:	cf 91       	pop	r28
    aade:	1f 91       	pop	r17
    aae0:	0f 91       	pop	r16
    aae2:	ff 90       	pop	r15
    aae4:	ef 90       	pop	r14
    aae6:	df 90       	pop	r13
    aae8:	cf 90       	pop	r12
    aaea:	bf 90       	pop	r11
    aaec:	af 90       	pop	r10
    aaee:	9f 90       	pop	r9
    aaf0:	8f 90       	pop	r8
    aaf2:	7f 90       	pop	r7
    aaf4:	6f 90       	pop	r6
    aaf6:	5f 90       	pop	r5
    aaf8:	4f 90       	pop	r4
    aafa:	3f 90       	pop	r3
    aafc:	2f 90       	pop	r2
    aafe:	08 95       	ret

0000ab00 <find_shot_slot>:

u8 find_shot_slot()
{
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
	{
		if (!game.player.shot[i].active) return i;
    ab00:	80 91 ed 0d 	lds	r24, 0x0DED
    ab04:	88 23       	and	r24, r24
    ab06:	61 f0       	breq	.+24     	; 0xab20 <find_shot_slot+0x20>
    ab08:	80 91 07 0e 	lds	r24, 0x0E07
    ab0c:	88 23       	and	r24, r24
    ab0e:	31 f0       	breq	.+12     	; 0xab1c <find_shot_slot+0x1c>
    ab10:	80 91 21 0e 	lds	r24, 0x0E21
    ab14:	81 11       	cpse	r24, r1
    ab16:	04 c0       	rjmp	.+8      	; 0xab20 <find_shot_slot+0x20>
	return 0;
}

u8 find_shot_slot()
{
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
    ab18:	82 e0       	ldi	r24, 0x02	; 2
    ab1a:	08 95       	ret
    ab1c:	81 e0       	ldi	r24, 0x01	; 1
	{
		if (!game.player.shot[i].active) return i;
    ab1e:	08 95       	ret
	}
	return 0;
    ab20:	80 e0       	ldi	r24, 0x00	; 0
}
    ab22:	08 95       	ret

0000ab24 <update_shot>:

void update_shot()
{
    ab24:	4f 92       	push	r4
    ab26:	5f 92       	push	r5
    ab28:	6f 92       	push	r6
    ab2a:	7f 92       	push	r7
    ab2c:	af 92       	push	r10
    ab2e:	bf 92       	push	r11
    ab30:	df 92       	push	r13
    ab32:	ef 92       	push	r14
    ab34:	ff 92       	push	r15
    ab36:	0f 93       	push	r16
    ab38:	1f 93       	push	r17
    ab3a:	cf 93       	push	r28
    ab3c:	df 93       	push	r29
	// Shot updates
	u8 idx;
	if (game.joypadState.pressed & BTN_A && game.player.active_shots < MAX_PLAYER_SHOTS)
    ab3e:	80 91 9c 0f 	lds	r24, 0x0F9C
    ab42:	90 91 9d 0f 	lds	r25, 0x0F9D
    ab46:	90 ff       	sbrs	r25, 0
    ab48:	e5 c0       	rjmp	.+458    	; 0xad14 <update_shot+0x1f0>
    ab4a:	80 91 d5 0d 	lds	r24, 0x0DD5
    ab4e:	83 30       	cpi	r24, 0x03	; 3
    ab50:	08 f0       	brcs	.+2      	; 0xab54 <update_shot+0x30>
    ab52:	e0 c0       	rjmp	.+448    	; 0xad14 <update_shot+0x1f0>
	{
		SFX_PLAYER_SHOOT;
    ab54:	2f ef       	ldi	r18, 0xFF	; 255
    ab56:	43 e2       	ldi	r20, 0x23	; 35
    ab58:	63 e0       	ldi	r22, 0x03	; 3
    ab5a:	82 e0       	ldi	r24, 0x02	; 2
    ab5c:	0e 94 38 42 	call	0x8470	; 0x8470 <TriggerNote>
		idx = find_shot_slot();
    ab60:	0e 94 80 55 	call	0xab00	; 0xab00 <find_shot_slot>
    ab64:	f8 2e       	mov	r15, r24
		LBMapSprite(PLAYER_SHOT_SLOT+idx, LBGetNextFrame(&game.player.shot[idx].anim), 0);
    ab66:	08 2f       	mov	r16, r24
    ab68:	10 e0       	ldi	r17, 0x00	; 0
    ab6a:	9a e1       	ldi	r25, 0x1A	; 26
    ab6c:	d9 2e       	mov	r13, r25
    ab6e:	d0 9e       	mul	r13, r16
    ab70:	e0 01       	movw	r28, r0
    ab72:	d1 9e       	mul	r13, r17
    ab74:	d0 0d       	add	r29, r0
    ab76:	11 24       	eor	r1, r1
    ab78:	ce 01       	movw	r24, r28
    ab7a:	82 51       	subi	r24, 0x12	; 18
    ab7c:	92 4f       	sbci	r25, 0xF2	; 242
    ab7e:	0e 94 62 4d 	call	0x9ac4	; 0x9ac4 <LBGetNextFrame>
    ab82:	40 e0       	ldi	r20, 0x00	; 0
    ab84:	bc 01       	movw	r22, r24
    ab86:	8b e0       	ldi	r24, 0x0B	; 11
    ab88:	8f 0d       	add	r24, r15
    ab8a:	0e 94 c4 4e 	call	0x9d88	; 0x9d88 <LBMapSprite>
		game.player.shot[idx].active = 1;
    ab8e:	ca 55       	subi	r28, 0x5A	; 90
    ab90:	d2 4f       	sbci	r29, 0xF2	; 242
    ab92:	fe 01       	movw	r30, r28
    ab94:	e9 5b       	subi	r30, 0xB9	; 185
    ab96:	ff 4f       	sbci	r31, 0xFF	; 255
    ab98:	81 e0       	ldi	r24, 0x01	; 1
    ab9a:	80 83       	st	Z, r24
		game.player.shot[idx].shared.y = (u16) game.player.shared.y / 8 * 8;
    ab9c:	60 91 ce 0d 	lds	r22, 0x0DCE
    aba0:	70 91 cf 0d 	lds	r23, 0x0DCF
    aba4:	80 91 d0 0d 	lds	r24, 0x0DD0
    aba8:	90 91 d1 0d 	lds	r25, 0x0DD1
    abac:	0e 94 f0 6c 	call	0xd9e0	; 0xd9e0 <__fixunssfsi>
    abb0:	23 e0       	ldi	r18, 0x03	; 3
    abb2:	76 95       	lsr	r23
    abb4:	67 95       	ror	r22
    abb6:	2a 95       	dec	r18
    abb8:	e1 f7       	brne	.-8      	; 0xabb2 <update_shot+0x8e>
    abba:	33 e0       	ldi	r19, 0x03	; 3
    abbc:	66 0f       	add	r22, r22
    abbe:	77 1f       	adc	r23, r23
    abc0:	3a 95       	dec	r19
    abc2:	e1 f7       	brne	.-8      	; 0xabbc <update_shot+0x98>
    abc4:	80 e0       	ldi	r24, 0x00	; 0
    abc6:	90 e0       	ldi	r25, 0x00	; 0
    abc8:	0e 94 1c 6d 	call	0xda38	; 0xda38 <__floatunsisf>
    abcc:	2b 01       	movw	r4, r22
    abce:	3c 01       	movw	r6, r24
    abd0:	5e 01       	movw	r10, r28
    abd2:	2e e3       	ldi	r18, 0x3E	; 62
    abd4:	a2 0e       	add	r10, r18
    abd6:	b1 1c       	adc	r11, r1
    abd8:	f5 01       	movw	r30, r10
    abda:	60 83       	st	Z, r22
    abdc:	71 83       	std	Z+1, r23	; 0x01
    abde:	82 83       	std	Z+2, r24	; 0x02
    abe0:	93 83       	std	Z+3, r25	; 0x03
		if (is_space())
    abe2:	0e 94 93 4f 	call	0x9f26	; 0x9f26 <is_space>
    abe6:	98 01       	movw	r18, r16
    abe8:	2f 5f       	subi	r18, 0xFF	; 255
    abea:	3f 4f       	sbci	r19, 0xFF	; 255
    abec:	79 01       	movw	r14, r18
    abee:	88 23       	and	r24, r24
    abf0:	59 f1       	breq	.+86     	; 0xac48 <update_shot+0x124>
		{
			game.player.shot[idx].shared.x = game.player.shared.x+game.player.width*8;
    abf2:	60 91 d9 0d 	lds	r22, 0x0DD9
    abf6:	d2 9e       	mul	r13, r18
    abf8:	80 01       	movw	r16, r0
    abfa:	d3 9e       	mul	r13, r19
    abfc:	10 0d       	add	r17, r0
    abfe:	11 24       	eor	r1, r1
    ac00:	0a 55       	subi	r16, 0x5A	; 90
    ac02:	12 4f       	sbci	r17, 0xF2	; 242
    ac04:	38 e0       	ldi	r19, 0x08	; 8
    ac06:	63 9f       	mul	r22, r19
    ac08:	b0 01       	movw	r22, r0
    ac0a:	11 24       	eor	r1, r1
    ac0c:	88 27       	eor	r24, r24
    ac0e:	77 fd       	sbrc	r23, 7
    ac10:	80 95       	com	r24
    ac12:	98 2f       	mov	r25, r24
    ac14:	0e 94 1e 6d 	call	0xda3c	; 0xda3c <__floatsisf>
    ac18:	9b 01       	movw	r18, r22
    ac1a:	ac 01       	movw	r20, r24
    ac1c:	60 91 ca 0d 	lds	r22, 0x0DCA
    ac20:	70 91 cb 0d 	lds	r23, 0x0DCB
    ac24:	80 91 cc 0d 	lds	r24, 0x0DCC
    ac28:	90 91 cd 0d 	lds	r25, 0x0DCD
    ac2c:	0e 94 88 6c 	call	0xd910	; 0xd910 <__addsf3>
    ac30:	f8 01       	movw	r30, r16
    ac32:	60 a3       	std	Z+32, r22	; 0x20
    ac34:	71 a3       	std	Z+33, r23	; 0x21
    ac36:	82 a3       	std	Z+34, r24	; 0x22
    ac38:	93 a3       	std	Z+35, r25	; 0x23
			game.player.shot[idx].shared.vx = SHOT_SPEED;
    ac3a:	ce 5b       	subi	r28, 0xBE	; 190
    ac3c:	df 4f       	sbci	r29, 0xFF	; 255
    ac3e:	80 e9       	ldi	r24, 0x90	; 144
    ac40:	91 e0       	ldi	r25, 0x01	; 1
    ac42:	99 83       	std	Y+1, r25	; 0x01
    ac44:	88 83       	st	Y, r24
    ac46:	61 c0       	rjmp	.+194    	; 0xad0a <update_shot+0x1e6>
		}
		else
		{
			if (!(game.player.flags & PRONE))
    ac48:	80 91 d6 0d 	lds	r24, 0x0DD6
    ac4c:	82 fd       	sbrc	r24, 2
    ac4e:	0d c0       	rjmp	.+26     	; 0xac6a <update_shot+0x146>
			{
				game.player.shot[idx].shared.y += 8;
    ac50:	20 e0       	ldi	r18, 0x00	; 0
    ac52:	30 e0       	ldi	r19, 0x00	; 0
    ac54:	40 e0       	ldi	r20, 0x00	; 0
    ac56:	51 e4       	ldi	r21, 0x41	; 65
    ac58:	c3 01       	movw	r24, r6
    ac5a:	b2 01       	movw	r22, r4
    ac5c:	0e 94 88 6c 	call	0xd910	; 0xd910 <__addsf3>
    ac60:	f5 01       	movw	r30, r10
    ac62:	60 83       	st	Z, r22
    ac64:	71 83       	std	Z+1, r23	; 0x01
    ac66:	82 83       	std	Z+2, r24	; 0x02
    ac68:	93 83       	std	Z+3, r25	; 0x03
			}
			if (game.player.direction == D_RIGHT)
    ac6a:	80 91 d8 0d 	lds	r24, 0x0DD8
    ac6e:	81 30       	cpi	r24, 0x01	; 1
    ac70:	39 f5       	brne	.+78     	; 0xacc0 <update_shot+0x19c>
			{
				game.player.shot[idx].shared.x = game.player.shared.x+2*8;
    ac72:	8a e1       	ldi	r24, 0x1A	; 26
    ac74:	d8 2e       	mov	r13, r24
    ac76:	de 9c       	mul	r13, r14
    ac78:	e0 01       	movw	r28, r0
    ac7a:	df 9c       	mul	r13, r15
    ac7c:	d0 0d       	add	r29, r0
    ac7e:	11 24       	eor	r1, r1
    ac80:	ca 55       	subi	r28, 0x5A	; 90
    ac82:	d2 4f       	sbci	r29, 0xF2	; 242
    ac84:	20 e0       	ldi	r18, 0x00	; 0
    ac86:	30 e0       	ldi	r19, 0x00	; 0
    ac88:	40 e8       	ldi	r20, 0x80	; 128
    ac8a:	51 e4       	ldi	r21, 0x41	; 65
    ac8c:	60 91 ca 0d 	lds	r22, 0x0DCA
    ac90:	70 91 cb 0d 	lds	r23, 0x0DCB
    ac94:	80 91 cc 0d 	lds	r24, 0x0DCC
    ac98:	90 91 cd 0d 	lds	r25, 0x0DCD
    ac9c:	0e 94 88 6c 	call	0xd910	; 0xd910 <__addsf3>
    aca0:	68 a3       	std	Y+32, r22	; 0x20
    aca2:	79 a3       	std	Y+33, r23	; 0x21
    aca4:	8a a3       	std	Y+34, r24	; 0x22
    aca6:	9b a3       	std	Y+35, r25	; 0x23
				game.player.shot[idx].shared.vx = SHOT_SPEED;
    aca8:	d0 9e       	mul	r13, r16
    acaa:	f0 01       	movw	r30, r0
    acac:	d1 9e       	mul	r13, r17
    acae:	f0 0d       	add	r31, r0
    acb0:	11 24       	eor	r1, r1
    acb2:	e8 51       	subi	r30, 0x18	; 24
    acb4:	f2 4f       	sbci	r31, 0xF2	; 242
    acb6:	80 e9       	ldi	r24, 0x90	; 144
    acb8:	91 e0       	ldi	r25, 0x01	; 1
    acba:	91 83       	std	Z+1, r25	; 0x01
    acbc:	80 83       	st	Z, r24
    acbe:	25 c0       	rjmp	.+74     	; 0xad0a <update_shot+0x1e6>
			}
			else
			{
				game.player.shot[idx].shared.vx = -SHOT_SPEED;
    acc0:	8a e1       	ldi	r24, 0x1A	; 26
    acc2:	80 9f       	mul	r24, r16
    acc4:	f0 01       	movw	r30, r0
    acc6:	81 9f       	mul	r24, r17
    acc8:	f0 0d       	add	r31, r0
    acca:	11 24       	eor	r1, r1
    accc:	e8 51       	subi	r30, 0x18	; 24
    acce:	f2 4f       	sbci	r31, 0xF2	; 242
    acd0:	20 e7       	ldi	r18, 0x70	; 112
    acd2:	3e ef       	ldi	r19, 0xFE	; 254
    acd4:	31 83       	std	Z+1, r19	; 0x01
    acd6:	20 83       	st	Z, r18
				game.player.shot[idx].shared.x = game.player.shared.x-1*8;
    acd8:	8e 9d       	mul	r24, r14
    acda:	e0 01       	movw	r28, r0
    acdc:	8f 9d       	mul	r24, r15
    acde:	d0 0d       	add	r29, r0
    ace0:	11 24       	eor	r1, r1
    ace2:	ca 55       	subi	r28, 0x5A	; 90
    ace4:	d2 4f       	sbci	r29, 0xF2	; 242
    ace6:	20 e0       	ldi	r18, 0x00	; 0
    ace8:	30 e0       	ldi	r19, 0x00	; 0
    acea:	40 e0       	ldi	r20, 0x00	; 0
    acec:	51 e4       	ldi	r21, 0x41	; 65
    acee:	60 91 ca 0d 	lds	r22, 0x0DCA
    acf2:	70 91 cb 0d 	lds	r23, 0x0DCB
    acf6:	80 91 cc 0d 	lds	r24, 0x0DCC
    acfa:	90 91 cd 0d 	lds	r25, 0x0DCD
    acfe:	0e 94 87 6c 	call	0xd90e	; 0xd90e <__subsf3>
    ad02:	68 a3       	std	Y+32, r22	; 0x20
    ad04:	79 a3       	std	Y+33, r23	; 0x21
    ad06:	8a a3       	std	Y+34, r24	; 0x22
    ad08:	9b a3       	std	Y+35, r25	; 0x23
			}
		}
		game.player.active_shots++;
    ad0a:	80 91 d5 0d 	lds	r24, 0x0DD5
    ad0e:	8f 5f       	subi	r24, 0xFF	; 255
    ad10:	80 93 d5 0d 	sts	0x0DD5, r24
	}
}
    ad14:	df 91       	pop	r29
    ad16:	cf 91       	pop	r28
    ad18:	1f 91       	pop	r17
    ad1a:	0f 91       	pop	r16
    ad1c:	ff 90       	pop	r15
    ad1e:	ef 90       	pop	r14
    ad20:	df 90       	pop	r13
    ad22:	bf 90       	pop	r11
    ad24:	af 90       	pop	r10
    ad26:	7f 90       	pop	r7
    ad28:	6f 90       	pop	r6
    ad2a:	5f 90       	pop	r5
    ad2c:	4f 90       	pop	r4
    ad2e:	08 95       	ret

0000ad30 <pixel_overlap>:
	}
	return 1;
}

u8 pixel_overlap(u16 s1, u16 s2, u8 w1, u8 w2)
{
    ad30:	fc 01       	movw	r30, r24
	u8 result = w1;
	
	if (s2 > s1)
    ad32:	86 17       	cp	r24, r22
    ad34:	97 07       	cpc	r25, r23
    ad36:	28 f4       	brcc	.+10     	; 0xad42 <pixel_overlap+0x12>
    ad38:	94 2f       	mov	r25, r20
    ad3a:	9e 0f       	add	r25, r30
	{
		result -= s2 - s1;
    ad3c:	89 2f       	mov	r24, r25
    ad3e:	86 1b       	sub	r24, r22
    ad40:	01 c0       	rjmp	.+2      	; 0xad44 <pixel_overlap+0x14>
	return 1;
}

u8 pixel_overlap(u16 s1, u16 s2, u8 w1, u8 w2)
{
	u8 result = w1;
    ad42:	84 2f       	mov	r24, r20
	
	if (s2 > s1)
	{
		result -= s2 - s1;
	}
	s1 = s1 + w1;
    ad44:	e4 0f       	add	r30, r20
    ad46:	f1 1d       	adc	r31, r1
	s2 = s2 + w2;
    ad48:	62 0f       	add	r22, r18
    ad4a:	71 1d       	adc	r23, r1
	if (s2 < s1)
    ad4c:	6e 17       	cp	r22, r30
    ad4e:	7f 07       	cpc	r23, r31
    ad50:	10 f4       	brcc	.+4      	; 0xad56 <pixel_overlap+0x26>
	{
		result -= s1 - s2;
    ad52:	6e 1b       	sub	r22, r30
    ad54:	86 0f       	add	r24, r22
	}
	return result;
}
    ad56:	08 95       	ret

0000ad58 <collision_detect_level>:

u8 collision_detect_level(SpriteShared* s, u8 tile_width, u8 tile_height)
{
    ad58:	2f 92       	push	r2
    ad5a:	3f 92       	push	r3
    ad5c:	4f 92       	push	r4
    ad5e:	5f 92       	push	r5
    ad60:	6f 92       	push	r6
    ad62:	7f 92       	push	r7
    ad64:	8f 92       	push	r8
    ad66:	9f 92       	push	r9
    ad68:	af 92       	push	r10
    ad6a:	bf 92       	push	r11
    ad6c:	cf 92       	push	r12
    ad6e:	df 92       	push	r13
    ad70:	ef 92       	push	r14
    ad72:	ff 92       	push	r15
    ad74:	0f 93       	push	r16
    ad76:	1f 93       	push	r17
    ad78:	cf 93       	push	r28
    ad7a:	df 93       	push	r29
    ad7c:	cd b7       	in	r28, 0x3d	; 61
    ad7e:	de b7       	in	r29, 0x3e	; 62
    ad80:	68 97       	sbiw	r28, 0x18	; 24
    ad82:	0f b6       	in	r0, 0x3f	; 63
    ad84:	f8 94       	cli
    ad86:	de bf       	out	0x3e, r29	; 62
    ad88:	0f be       	out	0x3f, r0	; 63
    ad8a:	cd bf       	out	0x3d, r28	; 61
    ad8c:	98 8f       	std	Y+24, r25	; 0x18
    ad8e:	8f 8b       	std	Y+23, r24	; 0x17
    ad90:	16 2f       	mov	r17, r22
    ad92:	49 8b       	std	Y+17, r20	; 0x11
	u16 x0_tile = s->x / 8;
    ad94:	dc 01       	movw	r26, r24
    ad96:	14 96       	adiw	r26, 0x04	; 4
    ad98:	4d 90       	ld	r4, X+
    ad9a:	5d 90       	ld	r5, X+
    ad9c:	6d 90       	ld	r6, X+
    ad9e:	7c 90       	ld	r7, X
    ada0:	17 97       	sbiw	r26, 0x07	; 7
	u16 y0_tile = s->y / 8;
    ada2:	18 96       	adiw	r26, 0x08	; 8
    ada4:	cd 90       	ld	r12, X+
    ada6:	dd 90       	ld	r13, X+
    ada8:	ed 90       	ld	r14, X+
    adaa:	fc 90       	ld	r15, X
    adac:	1b 97       	sbiw	r26, 0x0b	; 11
	u16 y1_tile = (s->y+7) / 8;
	u8 lt1, lt2;
	u8 result = 0;
	
	// Only if moving on planet
	if (is_space() || (s->vx == 0 && s->vy == 0)) return result;
    adae:	0e 94 93 4f 	call	0x9f26	; 0x9f26 <is_space>
    adb2:	81 11       	cpse	r24, r1
    adb4:	f2 c2       	rjmp	.+1508   	; 0xb39a <collision_detect_level+0x642>
    adb6:	ef 89       	ldd	r30, Y+23	; 0x17
    adb8:	f8 8d       	ldd	r31, Y+24	; 0x18
    adba:	84 85       	ldd	r24, Z+12	; 0x0c
    adbc:	95 85       	ldd	r25, Z+13	; 0x0d
    adbe:	89 2b       	or	r24, r25
    adc0:	61 f4       	brne	.+24     	; 0xadda <collision_detect_level+0x82>
    adc2:	20 e0       	ldi	r18, 0x00	; 0
    adc4:	30 e0       	ldi	r19, 0x00	; 0
    adc6:	a9 01       	movw	r20, r18
    adc8:	60 81       	ld	r22, Z
    adca:	71 81       	ldd	r23, Z+1	; 0x01
    adcc:	82 81       	ldd	r24, Z+2	; 0x02
    adce:	93 81       	ldd	r25, Z+3	; 0x03
    add0:	0e 94 ec 6c 	call	0xd9d8	; 0xd9d8 <__cmpsf2>
    add4:	88 23       	and	r24, r24
    add6:	09 f4       	brne	.+2      	; 0xadda <collision_detect_level+0x82>
    add8:	e0 c2       	rjmp	.+1472   	; 0xb39a <collision_detect_level+0x642>
	return result;
}

u8 collision_detect_level(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u16 x0_tile = s->x / 8;
    adda:	20 e0       	ldi	r18, 0x00	; 0
    addc:	30 e0       	ldi	r19, 0x00	; 0
    adde:	40 e0       	ldi	r20, 0x00	; 0
    ade0:	5e e3       	ldi	r21, 0x3E	; 62
    ade2:	c3 01       	movw	r24, r6
    ade4:	b2 01       	movw	r22, r4
    ade6:	0e 94 d2 6d 	call	0xdba4	; 0xdba4 <__mulsf3>
    adea:	0e 94 f0 6c 	call	0xd9e0	; 0xd9e0 <__fixunssfsi>
    adee:	4b 01       	movw	r8, r22
    adf0:	5c 01       	movw	r10, r24
    adf2:	68 87       	std	Y+8, r22	; 0x08
    adf4:	9a 8a       	std	Y+18, r9	; 0x12
	
	// Only if moving on planet
	if (is_space() || (s->vx == 0 && s->vy == 0)) return result;
	
	// Top and Bottom
	if (s->vy != 0)
    adf6:	20 e0       	ldi	r18, 0x00	; 0
    adf8:	30 e0       	ldi	r19, 0x00	; 0
    adfa:	a9 01       	movw	r20, r18
    adfc:	af 89       	ldd	r26, Y+23	; 0x17
    adfe:	b8 8d       	ldd	r27, Y+24	; 0x18
    ae00:	6d 91       	ld	r22, X+
    ae02:	7d 91       	ld	r23, X+
    ae04:	8d 91       	ld	r24, X+
    ae06:	9c 91       	ld	r25, X
    ae08:	0e 94 ec 6c 	call	0xd9d8	; 0xd9d8 <__cmpsf2>
    ae0c:	88 23       	and	r24, r24
    ae0e:	09 f4       	brne	.+2      	; 0xae12 <collision_detect_level+0xba>
    ae10:	67 c1       	rjmp	.+718    	; 0xb0e0 <collision_detect_level+0x388>
}

u8 collision_detect_level(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u16 x0_tile = s->x / 8;
	u16 y0_tile = s->y / 8;
    ae12:	20 e0       	ldi	r18, 0x00	; 0
    ae14:	30 e0       	ldi	r19, 0x00	; 0
    ae16:	40 e0       	ldi	r20, 0x00	; 0
    ae18:	5e e3       	ldi	r21, 0x3E	; 62
    ae1a:	c7 01       	movw	r24, r14
    ae1c:	b6 01       	movw	r22, r12
    ae1e:	0e 94 d2 6d 	call	0xdba4	; 0xdba4 <__mulsf3>
    ae22:	0e 94 f0 6c 	call	0xd9e0	; 0xd9e0 <__fixunssfsi>
    ae26:	6b 01       	movw	r12, r22
    ae28:	7c 01       	movw	r14, r24
    ae2a:	1b 01       	movw	r2, r22
	u16 x1_tile = (s->x+7) / 8;
    ae2c:	20 e0       	ldi	r18, 0x00	; 0
    ae2e:	30 e0       	ldi	r19, 0x00	; 0
    ae30:	40 ee       	ldi	r20, 0xE0	; 224
    ae32:	50 e4       	ldi	r21, 0x40	; 64
    ae34:	c3 01       	movw	r24, r6
    ae36:	b2 01       	movw	r22, r4
    ae38:	0e 94 88 6c 	call	0xd910	; 0xd910 <__addsf3>
    ae3c:	20 e0       	ldi	r18, 0x00	; 0
    ae3e:	30 e0       	ldi	r19, 0x00	; 0
    ae40:	40 e0       	ldi	r20, 0x00	; 0
    ae42:	5e e3       	ldi	r21, 0x3E	; 62
    ae44:	0e 94 d2 6d 	call	0xdba4	; 0xdba4 <__mulsf3>
    ae48:	0e 94 f0 6c 	call	0xd9e0	; 0xd9e0 <__fixunssfsi>
		{
			if (s->vy < 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, y0_tile);
				lt2 = get_level_tile(game.current_level, x1_tile + x, y0_tile);
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    ae4c:	f4 01       	movw	r30, r8
    ae4e:	53 e0       	ldi	r21, 0x03	; 3
    ae50:	ee 0f       	add	r30, r30
    ae52:	ff 1f       	adc	r31, r31
    ae54:	5a 95       	dec	r21
    ae56:	e1 f7       	brne	.-8      	; 0xae50 <collision_detect_level+0xf8>
    ae58:	fb 83       	std	Y+3, r31	; 0x03
    ae5a:	ea 83       	std	Y+2, r30	; 0x02
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    ae5c:	9b 01       	movw	r18, r22
    ae5e:	e3 e0       	ldi	r30, 0x03	; 3
    ae60:	22 0f       	add	r18, r18
    ae62:	33 1f       	adc	r19, r19
    ae64:	ea 95       	dec	r30
    ae66:	e1 f7       	brne	.-8      	; 0xae60 <collision_detect_level+0x108>
    ae68:	3d 83       	std	Y+5, r19	; 0x05
    ae6a:	2c 83       	std	Y+4, r18	; 0x04
				{
					s->vy =  0;
					s->y = (y0_tile + 1) * 8;
    ae6c:	3f ef       	ldi	r19, 0xFF	; 255
    ae6e:	c3 1a       	sub	r12, r19
    ae70:	d3 0a       	sbc	r13, r19
    ae72:	f3 e0       	ldi	r31, 0x03	; 3
    ae74:	cc 0c       	add	r12, r12
    ae76:	dd 1c       	adc	r13, r13
    ae78:	fa 95       	dec	r31
    ae7a:	e1 f7       	brne	.-8      	; 0xae74 <collision_detect_level+0x11c>
					result = 1;
				}
			}
			if (s->vy > 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, (s->y + tile_height*8 - 1) / 8);
    ae7c:	b9 89       	ldd	r27, Y+17	; 0x11
    ae7e:	a8 e0       	ldi	r26, 0x08	; 8
    ae80:	ba 9f       	mul	r27, r26
    ae82:	a0 01       	movw	r20, r0
    ae84:	11 24       	eor	r1, r1
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) || 
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vy =  0;
					s->gravity = 0;
					s->y = y0_tile * 8;
    ae86:	96 01       	movw	r18, r12
    ae88:	28 50       	subi	r18, 0x08	; 8
    ae8a:	31 09       	sbc	r19, r1
    ae8c:	2b 01       	movw	r4, r22
    ae8e:	34 01       	movw	r6, r8
    ae90:	19 82       	std	Y+1, r1	; 0x01
				lt2 = get_level_tile(game.current_level, x1_tile + x, y0_tile);
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vy =  0;
					s->y = (y0_tile + 1) * 8;
    ae92:	b6 01       	movw	r22, r12
    ae94:	80 e0       	ldi	r24, 0x00	; 0
    ae96:	90 e0       	ldi	r25, 0x00	; 0
    ae98:	69 87       	std	Y+9, r22	; 0x09
    ae9a:	7a 87       	std	Y+10, r23	; 0x0a
    ae9c:	8b 87       	std	Y+11, r24	; 0x0b
    ae9e:	9c 87       	std	Y+12, r25	; 0x0c
					result = 1;
				}
			}
			if (s->vy > 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, (s->y + tile_height*8 - 1) / 8);
    aea0:	66 27       	eor	r22, r22
    aea2:	57 fd       	sbrc	r21, 7
    aea4:	60 95       	com	r22
    aea6:	76 2f       	mov	r23, r22
    aea8:	4d 87       	std	Y+13, r20	; 0x0d
    aeaa:	5e 87       	std	Y+14, r21	; 0x0e
    aeac:	6f 87       	std	Y+15, r22	; 0x0f
    aeae:	78 8b       	std	Y+16, r23	; 0x10
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) || 
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vy =  0;
					s->gravity = 0;
					s->y = y0_tile * 8;
    aeb0:	b9 01       	movw	r22, r18
    aeb2:	80 e0       	ldi	r24, 0x00	; 0
    aeb4:	90 e0       	ldi	r25, 0x00	; 0
    aeb6:	6b 8b       	std	Y+19, r22	; 0x13
    aeb8:	7c 8b       	std	Y+20, r23	; 0x14
    aeba:	8d 8b       	std	Y+21, r24	; 0x15
    aebc:	9e 8b       	std	Y+22, r25	; 0x16
    aebe:	86 2d       	mov	r24, r6
    aec0:	48 85       	ldd	r20, Y+8	; 0x08
    aec2:	84 1b       	sub	r24, r20
	if (is_space() || (s->vx == 0 && s->vy == 0)) return result;
	
	// Top and Bottom
	if (s->vy != 0)
	{
		for (u8 x = 0; x < tile_width; x++)
    aec4:	81 17       	cp	r24, r17
    aec6:	08 f0       	brcs	.+2      	; 0xaeca <collision_detect_level+0x172>
    aec8:	0c c1       	rjmp	.+536    	; 0xb0e2 <collision_detect_level+0x38a>
		{
			if (s->vy < 0)
    aeca:	20 e0       	ldi	r18, 0x00	; 0
    aecc:	30 e0       	ldi	r19, 0x00	; 0
    aece:	a9 01       	movw	r20, r18
    aed0:	af 89       	ldd	r26, Y+23	; 0x17
    aed2:	b8 8d       	ldd	r27, Y+24	; 0x18
    aed4:	6d 91       	ld	r22, X+
    aed6:	7d 91       	ld	r23, X+
    aed8:	8d 91       	ld	r24, X+
    aeda:	9c 91       	ld	r25, X
    aedc:	0e 94 ec 6c 	call	0xd9d8	; 0xd9d8 <__cmpsf2>
    aee0:	87 ff       	sbrs	r24, 7
    aee2:	58 c0       	rjmp	.+176    	; 0xaf94 <collision_detect_level+0x23c>
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, y0_tile);
    aee4:	a1 01       	movw	r20, r2
    aee6:	b3 01       	movw	r22, r6
    aee8:	80 91 a3 0f 	lds	r24, 0x0FA3
    aeec:	90 91 a4 0f 	lds	r25, 0x0FA4
    aef0:	0e 94 70 52 	call	0xa4e0	; 0xa4e0 <get_level_tile>
    aef4:	f8 2e       	mov	r15, r24
				lt2 = get_level_tile(game.current_level, x1_tile + x, y0_tile);
    aef6:	a1 01       	movw	r20, r2
    aef8:	b2 01       	movw	r22, r4
    aefa:	80 91 a3 0f 	lds	r24, 0x0FA3
    aefe:	90 91 a4 0f 	lds	r25, 0x0FA4
    af02:	0e 94 70 52 	call	0xa4e0	; 0xa4e0 <get_level_tile>
    af06:	08 2f       	mov	r16, r24
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    af08:	8f 2d       	mov	r24, r15
    af0a:	0e 94 41 53 	call	0xa682	; 0xa682 <solid_tile>
    af0e:	88 23       	and	r24, r24
    af10:	91 f0       	breq	.+36     	; 0xaf36 <collision_detect_level+0x1de>
    af12:	ef 89       	ldd	r30, Y+23	; 0x17
    af14:	f8 8d       	ldd	r31, Y+24	; 0x18
    af16:	64 81       	ldd	r22, Z+4	; 0x04
    af18:	75 81       	ldd	r23, Z+5	; 0x05
    af1a:	86 81       	ldd	r24, Z+6	; 0x06
    af1c:	97 81       	ldd	r25, Z+7	; 0x07
    af1e:	0e 94 f0 6c 	call	0xd9e0	; 0xd9e0 <__fixunssfsi>
    af22:	dc 01       	movw	r26, r24
    af24:	cb 01       	movw	r24, r22
    af26:	28 e0       	ldi	r18, 0x08	; 8
    af28:	48 e0       	ldi	r20, 0x08	; 8
    af2a:	6a 81       	ldd	r22, Y+2	; 0x02
    af2c:	7b 81       	ldd	r23, Y+3	; 0x03
    af2e:	0e 94 98 56 	call	0xad30	; 0xad30 <pixel_overlap>
    af32:	84 30       	cpi	r24, 0x04	; 4
    af34:	c8 f4       	brcc	.+50     	; 0xaf68 <collision_detect_level+0x210>
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    af36:	80 2f       	mov	r24, r16
    af38:	0e 94 41 53 	call	0xa682	; 0xa682 <solid_tile>
		{
			if (s->vy < 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, y0_tile);
				lt2 = get_level_tile(game.current_level, x1_tile + x, y0_tile);
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    af3c:	88 23       	and	r24, r24
    af3e:	51 f1       	breq	.+84     	; 0xaf94 <collision_detect_level+0x23c>
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    af40:	af 89       	ldd	r26, Y+23	; 0x17
    af42:	b8 8d       	ldd	r27, Y+24	; 0x18
    af44:	14 96       	adiw	r26, 0x04	; 4
    af46:	6d 91       	ld	r22, X+
    af48:	7d 91       	ld	r23, X+
    af4a:	8d 91       	ld	r24, X+
    af4c:	9c 91       	ld	r25, X
    af4e:	17 97       	sbiw	r26, 0x07	; 7
    af50:	0e 94 f0 6c 	call	0xd9e0	; 0xd9e0 <__fixunssfsi>
    af54:	dc 01       	movw	r26, r24
    af56:	cb 01       	movw	r24, r22
    af58:	28 e0       	ldi	r18, 0x08	; 8
    af5a:	48 e0       	ldi	r20, 0x08	; 8
    af5c:	6c 81       	ldd	r22, Y+4	; 0x04
    af5e:	7d 81       	ldd	r23, Y+5	; 0x05
    af60:	0e 94 98 56 	call	0xad30	; 0xad30 <pixel_overlap>
    af64:	84 30       	cpi	r24, 0x04	; 4
    af66:	b0 f0       	brcs	.+44     	; 0xaf94 <collision_detect_level+0x23c>
				{
					s->vy =  0;
    af68:	ef 89       	ldd	r30, Y+23	; 0x17
    af6a:	f8 8d       	ldd	r31, Y+24	; 0x18
    af6c:	10 82       	st	Z, r1
    af6e:	11 82       	std	Z+1, r1	; 0x01
    af70:	12 82       	std	Z+2, r1	; 0x02
    af72:	13 82       	std	Z+3, r1	; 0x03
					s->y = (y0_tile + 1) * 8;
    af74:	69 85       	ldd	r22, Y+9	; 0x09
    af76:	7a 85       	ldd	r23, Y+10	; 0x0a
    af78:	8b 85       	ldd	r24, Y+11	; 0x0b
    af7a:	9c 85       	ldd	r25, Y+12	; 0x0c
    af7c:	0e 94 1c 6d 	call	0xda38	; 0xda38 <__floatunsisf>
    af80:	af 89       	ldd	r26, Y+23	; 0x17
    af82:	b8 8d       	ldd	r27, Y+24	; 0x18
    af84:	18 96       	adiw	r26, 0x08	; 8
    af86:	6d 93       	st	X+, r22
    af88:	7d 93       	st	X+, r23
    af8a:	8d 93       	st	X+, r24
    af8c:	9c 93       	st	X, r25
    af8e:	1b 97       	sbiw	r26, 0x0b	; 11
					result = 1;
    af90:	b1 e0       	ldi	r27, 0x01	; 1
    af92:	b9 83       	std	Y+1, r27	; 0x01
				}
			}
			if (s->vy > 0)
    af94:	20 e0       	ldi	r18, 0x00	; 0
    af96:	30 e0       	ldi	r19, 0x00	; 0
    af98:	a9 01       	movw	r20, r18
    af9a:	ef 89       	ldd	r30, Y+23	; 0x17
    af9c:	f8 8d       	ldd	r31, Y+24	; 0x18
    af9e:	60 81       	ld	r22, Z
    afa0:	71 81       	ldd	r23, Z+1	; 0x01
    afa2:	82 81       	ldd	r24, Z+2	; 0x02
    afa4:	93 81       	ldd	r25, Z+3	; 0x03
    afa6:	0e 94 ce 6d 	call	0xdb9c	; 0xdb9c <__gesf2>
    afaa:	18 16       	cp	r1, r24
    afac:	0c f0       	brlt	.+2      	; 0xafb0 <collision_detect_level+0x258>
    afae:	91 c0       	rjmp	.+290    	; 0xb0d2 <collision_detect_level+0x37a>
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, (s->y + tile_height*8 - 1) / 8);
    afb0:	6d 85       	ldd	r22, Y+13	; 0x0d
    afb2:	7e 85       	ldd	r23, Y+14	; 0x0e
    afb4:	8f 85       	ldd	r24, Y+15	; 0x0f
    afb6:	98 89       	ldd	r25, Y+16	; 0x10
    afb8:	0e 94 1e 6d 	call	0xda3c	; 0xda3c <__floatsisf>
    afbc:	6b 01       	movw	r12, r22
    afbe:	7c 01       	movw	r14, r24
    afc0:	af 89       	ldd	r26, Y+23	; 0x17
    afc2:	b8 8d       	ldd	r27, Y+24	; 0x18
    afc4:	18 96       	adiw	r26, 0x08	; 8
    afc6:	2d 91       	ld	r18, X+
    afc8:	3d 91       	ld	r19, X+
    afca:	4d 91       	ld	r20, X+
    afcc:	5c 91       	ld	r21, X
    afce:	1b 97       	sbiw	r26, 0x0b	; 11
    afd0:	0e 94 88 6c 	call	0xd910	; 0xd910 <__addsf3>
    afd4:	20 e0       	ldi	r18, 0x00	; 0
    afd6:	30 e0       	ldi	r19, 0x00	; 0
    afd8:	40 e8       	ldi	r20, 0x80	; 128
    afda:	5f e3       	ldi	r21, 0x3F	; 63
    afdc:	0e 94 87 6c 	call	0xd90e	; 0xd90e <__subsf3>
    afe0:	20 e0       	ldi	r18, 0x00	; 0
    afe2:	30 e0       	ldi	r19, 0x00	; 0
    afe4:	40 e0       	ldi	r20, 0x00	; 0
    afe6:	5e e3       	ldi	r21, 0x3E	; 62
    afe8:	0e 94 d2 6d 	call	0xdba4	; 0xdba4 <__mulsf3>
    afec:	0e 94 f0 6c 	call	0xd9e0	; 0xd9e0 <__fixunssfsi>
    aff0:	ab 01       	movw	r20, r22
    aff2:	b3 01       	movw	r22, r6
    aff4:	80 91 a3 0f 	lds	r24, 0x0FA3
    aff8:	90 91 a4 0f 	lds	r25, 0x0FA4
    affc:	0e 94 70 52 	call	0xa4e0	; 0xa4e0 <get_level_tile>
    b000:	08 2f       	mov	r16, r24
				lt2 = get_level_tile(game.current_level, x1_tile + x, (s->y + tile_height*8 - 1) / 8);
    b002:	ef 89       	ldd	r30, Y+23	; 0x17
    b004:	f8 8d       	ldd	r31, Y+24	; 0x18
    b006:	20 85       	ldd	r18, Z+8	; 0x08
    b008:	31 85       	ldd	r19, Z+9	; 0x09
    b00a:	42 85       	ldd	r20, Z+10	; 0x0a
    b00c:	53 85       	ldd	r21, Z+11	; 0x0b
    b00e:	c7 01       	movw	r24, r14
    b010:	b6 01       	movw	r22, r12
    b012:	0e 94 88 6c 	call	0xd910	; 0xd910 <__addsf3>
    b016:	20 e0       	ldi	r18, 0x00	; 0
    b018:	30 e0       	ldi	r19, 0x00	; 0
    b01a:	40 e8       	ldi	r20, 0x80	; 128
    b01c:	5f e3       	ldi	r21, 0x3F	; 63
    b01e:	0e 94 87 6c 	call	0xd90e	; 0xd90e <__subsf3>
    b022:	20 e0       	ldi	r18, 0x00	; 0
    b024:	30 e0       	ldi	r19, 0x00	; 0
    b026:	40 e0       	ldi	r20, 0x00	; 0
    b028:	5e e3       	ldi	r21, 0x3E	; 62
    b02a:	0e 94 d2 6d 	call	0xdba4	; 0xdba4 <__mulsf3>
    b02e:	0e 94 f0 6c 	call	0xd9e0	; 0xd9e0 <__fixunssfsi>
    b032:	ab 01       	movw	r20, r22
    b034:	b2 01       	movw	r22, r4
    b036:	80 91 a3 0f 	lds	r24, 0x0FA3
    b03a:	90 91 a4 0f 	lds	r25, 0x0FA4
    b03e:	0e 94 70 52 	call	0xa4e0	; 0xa4e0 <get_level_tile>
    b042:	f8 2e       	mov	r15, r24
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) || 
    b044:	80 2f       	mov	r24, r16
    b046:	0e 94 41 53 	call	0xa682	; 0xa682 <solid_tile>
    b04a:	88 23       	and	r24, r24
    b04c:	a1 f0       	breq	.+40     	; 0xb076 <collision_detect_level+0x31e>
    b04e:	af 89       	ldd	r26, Y+23	; 0x17
    b050:	b8 8d       	ldd	r27, Y+24	; 0x18
    b052:	14 96       	adiw	r26, 0x04	; 4
    b054:	6d 91       	ld	r22, X+
    b056:	7d 91       	ld	r23, X+
    b058:	8d 91       	ld	r24, X+
    b05a:	9c 91       	ld	r25, X
    b05c:	17 97       	sbiw	r26, 0x07	; 7
    b05e:	0e 94 f0 6c 	call	0xd9e0	; 0xd9e0 <__fixunssfsi>
    b062:	dc 01       	movw	r26, r24
    b064:	cb 01       	movw	r24, r22
    b066:	28 e0       	ldi	r18, 0x08	; 8
    b068:	48 e0       	ldi	r20, 0x08	; 8
    b06a:	6a 81       	ldd	r22, Y+2	; 0x02
    b06c:	7b 81       	ldd	r23, Y+3	; 0x03
    b06e:	0e 94 98 56 	call	0xad30	; 0xad30 <pixel_overlap>
    b072:	84 30       	cpi	r24, 0x04	; 4
    b074:	b8 f4       	brcc	.+46     	; 0xb0a4 <collision_detect_level+0x34c>
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    b076:	8f 2d       	mov	r24, r15
    b078:	0e 94 41 53 	call	0xa682	; 0xa682 <solid_tile>
			}
			if (s->vy > 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, (s->y + tile_height*8 - 1) / 8);
				lt2 = get_level_tile(game.current_level, x1_tile + x, (s->y + tile_height*8 - 1) / 8);
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) || 
    b07c:	88 23       	and	r24, r24
    b07e:	49 f1       	breq	.+82     	; 0xb0d2 <collision_detect_level+0x37a>
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    b080:	ef 89       	ldd	r30, Y+23	; 0x17
    b082:	f8 8d       	ldd	r31, Y+24	; 0x18
    b084:	64 81       	ldd	r22, Z+4	; 0x04
    b086:	75 81       	ldd	r23, Z+5	; 0x05
    b088:	86 81       	ldd	r24, Z+6	; 0x06
    b08a:	97 81       	ldd	r25, Z+7	; 0x07
    b08c:	0e 94 f0 6c 	call	0xd9e0	; 0xd9e0 <__fixunssfsi>
    b090:	dc 01       	movw	r26, r24
    b092:	cb 01       	movw	r24, r22
    b094:	28 e0       	ldi	r18, 0x08	; 8
    b096:	48 e0       	ldi	r20, 0x08	; 8
    b098:	6c 81       	ldd	r22, Y+4	; 0x04
    b09a:	7d 81       	ldd	r23, Y+5	; 0x05
    b09c:	0e 94 98 56 	call	0xad30	; 0xad30 <pixel_overlap>
    b0a0:	84 30       	cpi	r24, 0x04	; 4
    b0a2:	b8 f0       	brcs	.+46     	; 0xb0d2 <collision_detect_level+0x37a>
				{
					s->vy =  0;
    b0a4:	af 89       	ldd	r26, Y+23	; 0x17
    b0a6:	b8 8d       	ldd	r27, Y+24	; 0x18
    b0a8:	1d 92       	st	X+, r1
    b0aa:	1d 92       	st	X+, r1
    b0ac:	1d 92       	st	X+, r1
    b0ae:	1c 92       	st	X, r1
    b0b0:	13 97       	sbiw	r26, 0x03	; 3
					s->gravity = 0;
    b0b2:	1e 96       	adiw	r26, 0x0e	; 14
    b0b4:	1c 92       	st	X, r1
					s->y = y0_tile * 8;
    b0b6:	6b 89       	ldd	r22, Y+19	; 0x13
    b0b8:	7c 89       	ldd	r23, Y+20	; 0x14
    b0ba:	8d 89       	ldd	r24, Y+21	; 0x15
    b0bc:	9e 89       	ldd	r25, Y+22	; 0x16
    b0be:	0e 94 1c 6d 	call	0xda38	; 0xda38 <__floatunsisf>
    b0c2:	ef 89       	ldd	r30, Y+23	; 0x17
    b0c4:	f8 8d       	ldd	r31, Y+24	; 0x18
    b0c6:	60 87       	std	Z+8, r22	; 0x08
    b0c8:	71 87       	std	Z+9, r23	; 0x09
    b0ca:	82 87       	std	Z+10, r24	; 0x0a
    b0cc:	93 87       	std	Z+11, r25	; 0x0b
					result = 1;
    b0ce:	f1 e0       	ldi	r31, 0x01	; 1
    b0d0:	f9 83       	std	Y+1, r31	; 0x01
    b0d2:	2f ef       	ldi	r18, 0xFF	; 255
    b0d4:	62 1a       	sub	r6, r18
    b0d6:	72 0a       	sbc	r7, r18
    b0d8:	3f ef       	ldi	r19, 0xFF	; 255
    b0da:	43 1a       	sub	r4, r19
    b0dc:	53 0a       	sbc	r5, r19
    b0de:	ef ce       	rjmp	.-546    	; 0xaebe <collision_detect_level+0x166>
	u16 x0_tile = s->x / 8;
	u16 y0_tile = s->y / 8;
	u16 x1_tile = (s->x+7) / 8;
	u16 y1_tile = (s->y+7) / 8;
	u8 lt1, lt2;
	u8 result = 0;
    b0e0:	19 82       	std	Y+1, r1	; 0x01
			}
		}
	}
	
	// Left and Right
	if (s->vx != 0)
    b0e2:	af 89       	ldd	r26, Y+23	; 0x17
    b0e4:	b8 8d       	ldd	r27, Y+24	; 0x18
    b0e6:	1c 96       	adiw	r26, 0x0c	; 12
    b0e8:	8d 91       	ld	r24, X+
    b0ea:	9c 91       	ld	r25, X
    b0ec:	1d 97       	sbiw	r26, 0x0d	; 13
    b0ee:	89 2b       	or	r24, r25
    b0f0:	09 f4       	brne	.+2      	; 0xb0f4 <collision_detect_level+0x39c>
    b0f2:	54 c1       	rjmp	.+680    	; 0xb39c <collision_detect_level+0x644>
	{
		y0_tile = s->y / 8;
    b0f4:	18 96       	adiw	r26, 0x08	; 8
    b0f6:	cd 90       	ld	r12, X+
    b0f8:	dd 90       	ld	r13, X+
    b0fa:	ed 90       	ld	r14, X+
    b0fc:	fc 90       	ld	r15, X
    b0fe:	1b 97       	sbiw	r26, 0x0b	; 11
    b100:	20 e0       	ldi	r18, 0x00	; 0
    b102:	30 e0       	ldi	r19, 0x00	; 0
    b104:	40 e0       	ldi	r20, 0x00	; 0
    b106:	5e e3       	ldi	r21, 0x3E	; 62
    b108:	c7 01       	movw	r24, r14
    b10a:	b6 01       	movw	r22, r12
    b10c:	0e 94 d2 6d 	call	0xdba4	; 0xdba4 <__mulsf3>
    b110:	0e 94 f0 6c 	call	0xd9e0	; 0xd9e0 <__fixunssfsi>
    b114:	2b 01       	movw	r4, r22
    b116:	3c 01       	movw	r6, r24
    b118:	6d 87       	std	Y+13, r22	; 0x0d
		y1_tile = (s->y+7) / 8;
    b11a:	20 e0       	ldi	r18, 0x00	; 0
    b11c:	30 e0       	ldi	r19, 0x00	; 0
    b11e:	40 ee       	ldi	r20, 0xE0	; 224
    b120:	50 e4       	ldi	r21, 0x40	; 64
    b122:	c7 01       	movw	r24, r14
    b124:	b6 01       	movw	r22, r12
    b126:	0e 94 88 6c 	call	0xd910	; 0xd910 <__addsf3>
    b12a:	20 e0       	ldi	r18, 0x00	; 0
    b12c:	30 e0       	ldi	r19, 0x00	; 0
    b12e:	40 e0       	ldi	r20, 0x00	; 0
    b130:	5e e3       	ldi	r21, 0x3E	; 62
    b132:	0e 94 d2 6d 	call	0xdba4	; 0xdba4 <__mulsf3>
    b136:	0e 94 f0 6c 	call	0xd9e0	; 0xd9e0 <__fixunssfsi>
		{
			if (s->vx < 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile, y0_tile + y);
				lt2 = get_level_tile(game.current_level, x0_tile, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    b13a:	12 01       	movw	r2, r4
    b13c:	83 e0       	ldi	r24, 0x03	; 3
    b13e:	22 0c       	add	r2, r2
    b140:	33 1c       	adc	r3, r3
    b142:	8a 95       	dec	r24
    b144:	e1 f7       	brne	.-8      	; 0xb13e <collision_detect_level+0x3e6>
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    b146:	fb 01       	movw	r30, r22
    b148:	93 e0       	ldi	r25, 0x03	; 3
    b14a:	ee 0f       	add	r30, r30
    b14c:	ff 1f       	adc	r31, r31
    b14e:	9a 95       	dec	r25
    b150:	e1 f7       	brne	.-8      	; 0xb14a <collision_detect_level+0x3f2>
    b152:	fb 83       	std	Y+3, r31	; 0x03
    b154:	ea 83       	std	Y+2, r30	; 0x02
				{
					s->vx =  0;
					s->x = (x0_tile + 1) * 8;
    b156:	ff ef       	ldi	r31, 0xFF	; 255
    b158:	8f 1a       	sub	r8, r31
    b15a:	9f 0a       	sbc	r9, r31
    b15c:	94 01       	movw	r18, r8
    b15e:	43 e0       	ldi	r20, 0x03	; 3
    b160:	22 0f       	add	r18, r18
    b162:	33 1f       	adc	r19, r19
    b164:	4a 95       	dec	r20
    b166:	e1 f7       	brne	.-8      	; 0xb160 <collision_detect_level+0x408>
				}
			}
			
			if (s->vx > 0)
			{
				lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y0_tile + y);
    b168:	a8 e0       	ldi	r26, 0x08	; 8
    b16a:	1a 9f       	mul	r17, r26
    b16c:	a0 01       	movw	r20, r0
    b16e:	11 24       	eor	r1, r1
				lt2 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vx =  0;
					s->x = x0_tile * 8;
    b170:	49 01       	movw	r8, r18
    b172:	b8 e0       	ldi	r27, 0x08	; 8
    b174:	8b 1a       	sub	r8, r27
    b176:	91 08       	sbc	r9, r1
	// Left and Right
	if (s->vx != 0)
	{
		y0_tile = s->y / 8;
		y1_tile = (s->y+7) / 8;
		for (u8 y = 0; y < tile_height; y++)
    b178:	6b 01       	movw	r12, r22
    b17a:	82 01       	movw	r16, r4
				lt2 = get_level_tile(game.current_level, x0_tile, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vx =  0;
					s->x = (x0_tile + 1) * 8;
    b17c:	b9 01       	movw	r22, r18
    b17e:	80 e0       	ldi	r24, 0x00	; 0
    b180:	90 e0       	ldi	r25, 0x00	; 0
    b182:	6c 83       	std	Y+4, r22	; 0x04
    b184:	7d 83       	std	Y+5, r23	; 0x05
    b186:	8e 83       	std	Y+6, r24	; 0x06
    b188:	9f 83       	std	Y+7, r25	; 0x07
				}
			}
			
			if (s->vx > 0)
			{
				lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y0_tile + y);
    b18a:	ca 01       	movw	r24, r20
    b18c:	aa 27       	eor	r26, r26
    b18e:	97 fd       	sbrc	r25, 7
    b190:	a0 95       	com	r26
    b192:	ba 2f       	mov	r27, r26
    b194:	89 87       	std	Y+9, r24	; 0x09
    b196:	9a 87       	std	Y+10, r25	; 0x0a
    b198:	ab 87       	std	Y+11, r26	; 0x0b
    b19a:	bc 87       	std	Y+12, r27	; 0x0c
				lt2 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vx =  0;
					s->x = x0_tile * 8;
    b19c:	a1 2c       	mov	r10, r1
    b19e:	b1 2c       	mov	r11, r1
    b1a0:	80 2f       	mov	r24, r16
    b1a2:	3d 85       	ldd	r19, Y+13	; 0x0d
    b1a4:	83 1b       	sub	r24, r19
	// Left and Right
	if (s->vx != 0)
	{
		y0_tile = s->y / 8;
		y1_tile = (s->y+7) / 8;
		for (u8 y = 0; y < tile_height; y++)
    b1a6:	49 89       	ldd	r20, Y+17	; 0x11
    b1a8:	84 17       	cp	r24, r20
    b1aa:	08 f0       	brcs	.+2      	; 0xb1ae <collision_detect_level+0x456>
    b1ac:	f7 c0       	rjmp	.+494    	; 0xb39c <collision_detect_level+0x644>
		{
			if (s->vx < 0)
    b1ae:	af 89       	ldd	r26, Y+23	; 0x17
    b1b0:	b8 8d       	ldd	r27, Y+24	; 0x18
    b1b2:	1c 96       	adiw	r26, 0x0c	; 12
    b1b4:	8d 91       	ld	r24, X+
    b1b6:	9c 91       	ld	r25, X
    b1b8:	1d 97       	sbiw	r26, 0x0d	; 13
    b1ba:	97 ff       	sbrs	r25, 7
    b1bc:	57 c0       	rjmp	.+174    	; 0xb26c <collision_detect_level+0x514>
			{
				lt1 = get_level_tile(game.current_level, x0_tile, y0_tile + y);
    b1be:	a8 01       	movw	r20, r16
    b1c0:	68 85       	ldd	r22, Y+8	; 0x08
    b1c2:	7a 89       	ldd	r23, Y+18	; 0x12
    b1c4:	80 91 a3 0f 	lds	r24, 0x0FA3
    b1c8:	90 91 a4 0f 	lds	r25, 0x0FA4
    b1cc:	0e 94 70 52 	call	0xa4e0	; 0xa4e0 <get_level_tile>
    b1d0:	78 2e       	mov	r7, r24
				lt2 = get_level_tile(game.current_level, x0_tile, y1_tile + y);
    b1d2:	a6 01       	movw	r20, r12
    b1d4:	68 85       	ldd	r22, Y+8	; 0x08
    b1d6:	7a 89       	ldd	r23, Y+18	; 0x12
    b1d8:	80 91 a3 0f 	lds	r24, 0x0FA3
    b1dc:	90 91 a4 0f 	lds	r25, 0x0FA4
    b1e0:	0e 94 70 52 	call	0xa4e0	; 0xa4e0 <get_level_tile>
    b1e4:	e8 2e       	mov	r14, r24
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    b1e6:	87 2d       	mov	r24, r7
    b1e8:	0e 94 41 53 	call	0xa682	; 0xa682 <solid_tile>
    b1ec:	88 23       	and	r24, r24
    b1ee:	89 f0       	breq	.+34     	; 0xb212 <collision_detect_level+0x4ba>
    b1f0:	ef 89       	ldd	r30, Y+23	; 0x17
    b1f2:	f8 8d       	ldd	r31, Y+24	; 0x18
    b1f4:	60 85       	ldd	r22, Z+8	; 0x08
    b1f6:	71 85       	ldd	r23, Z+9	; 0x09
    b1f8:	82 85       	ldd	r24, Z+10	; 0x0a
    b1fa:	93 85       	ldd	r25, Z+11	; 0x0b
    b1fc:	0e 94 f0 6c 	call	0xd9e0	; 0xd9e0 <__fixunssfsi>
    b200:	dc 01       	movw	r26, r24
    b202:	cb 01       	movw	r24, r22
    b204:	28 e0       	ldi	r18, 0x08	; 8
    b206:	48 e0       	ldi	r20, 0x08	; 8
    b208:	b1 01       	movw	r22, r2
    b20a:	0e 94 98 56 	call	0xad30	; 0xad30 <pixel_overlap>
    b20e:	84 30       	cpi	r24, 0x04	; 4
    b210:	c8 f4       	brcc	.+50     	; 0xb244 <collision_detect_level+0x4ec>
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    b212:	8e 2d       	mov	r24, r14
    b214:	0e 94 41 53 	call	0xa682	; 0xa682 <solid_tile>
		{
			if (s->vx < 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile, y0_tile + y);
				lt2 = get_level_tile(game.current_level, x0_tile, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    b218:	88 23       	and	r24, r24
    b21a:	41 f1       	breq	.+80     	; 0xb26c <collision_detect_level+0x514>
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    b21c:	af 89       	ldd	r26, Y+23	; 0x17
    b21e:	b8 8d       	ldd	r27, Y+24	; 0x18
    b220:	18 96       	adiw	r26, 0x08	; 8
    b222:	6d 91       	ld	r22, X+
    b224:	7d 91       	ld	r23, X+
    b226:	8d 91       	ld	r24, X+
    b228:	9c 91       	ld	r25, X
    b22a:	1b 97       	sbiw	r26, 0x0b	; 11
    b22c:	0e 94 f0 6c 	call	0xd9e0	; 0xd9e0 <__fixunssfsi>
    b230:	dc 01       	movw	r26, r24
    b232:	cb 01       	movw	r24, r22
    b234:	28 e0       	ldi	r18, 0x08	; 8
    b236:	48 e0       	ldi	r20, 0x08	; 8
    b238:	6a 81       	ldd	r22, Y+2	; 0x02
    b23a:	7b 81       	ldd	r23, Y+3	; 0x03
    b23c:	0e 94 98 56 	call	0xad30	; 0xad30 <pixel_overlap>
    b240:	84 30       	cpi	r24, 0x04	; 4
    b242:	a0 f0       	brcs	.+40     	; 0xb26c <collision_detect_level+0x514>
				{
					s->vx =  0;
    b244:	ef 89       	ldd	r30, Y+23	; 0x17
    b246:	f8 8d       	ldd	r31, Y+24	; 0x18
    b248:	15 86       	std	Z+13, r1	; 0x0d
    b24a:	14 86       	std	Z+12, r1	; 0x0c
					s->x = (x0_tile + 1) * 8;
    b24c:	6c 81       	ldd	r22, Y+4	; 0x04
    b24e:	7d 81       	ldd	r23, Y+5	; 0x05
    b250:	8e 81       	ldd	r24, Y+6	; 0x06
    b252:	9f 81       	ldd	r25, Y+7	; 0x07
    b254:	0e 94 1c 6d 	call	0xda38	; 0xda38 <__floatunsisf>
    b258:	af 89       	ldd	r26, Y+23	; 0x17
    b25a:	b8 8d       	ldd	r27, Y+24	; 0x18
    b25c:	14 96       	adiw	r26, 0x04	; 4
    b25e:	6d 93       	st	X+, r22
    b260:	7d 93       	st	X+, r23
    b262:	8d 93       	st	X+, r24
    b264:	9c 93       	st	X, r25
    b266:	17 97       	sbiw	r26, 0x07	; 7
					result = 1;
    b268:	b1 e0       	ldi	r27, 0x01	; 1
    b26a:	b9 83       	std	Y+1, r27	; 0x01
				}
			}
			
			if (s->vx > 0)
    b26c:	ef 89       	ldd	r30, Y+23	; 0x17
    b26e:	f8 8d       	ldd	r31, Y+24	; 0x18
    b270:	84 85       	ldd	r24, Z+12	; 0x0c
    b272:	95 85       	ldd	r25, Z+13	; 0x0d
    b274:	18 16       	cp	r1, r24
    b276:	19 06       	cpc	r1, r25
    b278:	0c f0       	brlt	.+2      	; 0xb27c <collision_detect_level+0x524>
    b27a:	89 c0       	rjmp	.+274    	; 0xb38e <collision_detect_level+0x636>
			{
				lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y0_tile + y);
    b27c:	69 85       	ldd	r22, Y+9	; 0x09
    b27e:	7a 85       	ldd	r23, Y+10	; 0x0a
    b280:	8b 85       	ldd	r24, Y+11	; 0x0b
    b282:	9c 85       	ldd	r25, Y+12	; 0x0c
    b284:	0e 94 1e 6d 	call	0xda3c	; 0xda3c <__floatsisf>
    b288:	2b 01       	movw	r4, r22
    b28a:	3c 01       	movw	r6, r24
    b28c:	af 89       	ldd	r26, Y+23	; 0x17
    b28e:	b8 8d       	ldd	r27, Y+24	; 0x18
    b290:	14 96       	adiw	r26, 0x04	; 4
    b292:	2d 91       	ld	r18, X+
    b294:	3d 91       	ld	r19, X+
    b296:	4d 91       	ld	r20, X+
    b298:	5c 91       	ld	r21, X
    b29a:	17 97       	sbiw	r26, 0x07	; 7
    b29c:	0e 94 88 6c 	call	0xd910	; 0xd910 <__addsf3>
    b2a0:	20 e0       	ldi	r18, 0x00	; 0
    b2a2:	30 e0       	ldi	r19, 0x00	; 0
    b2a4:	40 e8       	ldi	r20, 0x80	; 128
    b2a6:	5f e3       	ldi	r21, 0x3F	; 63
    b2a8:	0e 94 87 6c 	call	0xd90e	; 0xd90e <__subsf3>
    b2ac:	20 e0       	ldi	r18, 0x00	; 0
    b2ae:	30 e0       	ldi	r19, 0x00	; 0
    b2b0:	40 e0       	ldi	r20, 0x00	; 0
    b2b2:	5e e3       	ldi	r21, 0x3E	; 62
    b2b4:	0e 94 d2 6d 	call	0xdba4	; 0xdba4 <__mulsf3>
    b2b8:	0e 94 f0 6c 	call	0xd9e0	; 0xd9e0 <__fixunssfsi>
    b2bc:	a8 01       	movw	r20, r16
    b2be:	80 91 a3 0f 	lds	r24, 0x0FA3
    b2c2:	90 91 a4 0f 	lds	r25, 0x0FA4
    b2c6:	0e 94 70 52 	call	0xa4e0	; 0xa4e0 <get_level_tile>
    b2ca:	e8 2e       	mov	r14, r24
				lt2 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y1_tile + y);
    b2cc:	ef 89       	ldd	r30, Y+23	; 0x17
    b2ce:	f8 8d       	ldd	r31, Y+24	; 0x18
    b2d0:	24 81       	ldd	r18, Z+4	; 0x04
    b2d2:	35 81       	ldd	r19, Z+5	; 0x05
    b2d4:	46 81       	ldd	r20, Z+6	; 0x06
    b2d6:	57 81       	ldd	r21, Z+7	; 0x07
    b2d8:	c3 01       	movw	r24, r6
    b2da:	b2 01       	movw	r22, r4
    b2dc:	0e 94 88 6c 	call	0xd910	; 0xd910 <__addsf3>
    b2e0:	20 e0       	ldi	r18, 0x00	; 0
    b2e2:	30 e0       	ldi	r19, 0x00	; 0
    b2e4:	40 e8       	ldi	r20, 0x80	; 128
    b2e6:	5f e3       	ldi	r21, 0x3F	; 63
    b2e8:	0e 94 87 6c 	call	0xd90e	; 0xd90e <__subsf3>
    b2ec:	20 e0       	ldi	r18, 0x00	; 0
    b2ee:	30 e0       	ldi	r19, 0x00	; 0
    b2f0:	40 e0       	ldi	r20, 0x00	; 0
    b2f2:	5e e3       	ldi	r21, 0x3E	; 62
    b2f4:	0e 94 d2 6d 	call	0xdba4	; 0xdba4 <__mulsf3>
    b2f8:	0e 94 f0 6c 	call	0xd9e0	; 0xd9e0 <__fixunssfsi>
    b2fc:	a6 01       	movw	r20, r12
    b2fe:	80 91 a3 0f 	lds	r24, 0x0FA3
    b302:	90 91 a4 0f 	lds	r25, 0x0FA4
    b306:	0e 94 70 52 	call	0xa4e0	; 0xa4e0 <get_level_tile>
    b30a:	78 2e       	mov	r7, r24
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    b30c:	8e 2d       	mov	r24, r14
    b30e:	0e 94 41 53 	call	0xa682	; 0xa682 <solid_tile>
    b312:	88 23       	and	r24, r24
    b314:	99 f0       	breq	.+38     	; 0xb33c <collision_detect_level+0x5e4>
    b316:	af 89       	ldd	r26, Y+23	; 0x17
    b318:	b8 8d       	ldd	r27, Y+24	; 0x18
    b31a:	18 96       	adiw	r26, 0x08	; 8
    b31c:	6d 91       	ld	r22, X+
    b31e:	7d 91       	ld	r23, X+
    b320:	8d 91       	ld	r24, X+
    b322:	9c 91       	ld	r25, X
    b324:	1b 97       	sbiw	r26, 0x0b	; 11
    b326:	0e 94 f0 6c 	call	0xd9e0	; 0xd9e0 <__fixunssfsi>
    b32a:	dc 01       	movw	r26, r24
    b32c:	cb 01       	movw	r24, r22
    b32e:	28 e0       	ldi	r18, 0x08	; 8
    b330:	48 e0       	ldi	r20, 0x08	; 8
    b332:	b1 01       	movw	r22, r2
    b334:	0e 94 98 56 	call	0xad30	; 0xad30 <pixel_overlap>
    b338:	84 30       	cpi	r24, 0x04	; 4
    b33a:	b8 f4       	brcc	.+46     	; 0xb36a <collision_detect_level+0x612>
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    b33c:	87 2d       	mov	r24, r7
    b33e:	0e 94 41 53 	call	0xa682	; 0xa682 <solid_tile>
			
			if (s->vx > 0)
			{
				lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y0_tile + y);
				lt2 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    b342:	88 23       	and	r24, r24
    b344:	21 f1       	breq	.+72     	; 0xb38e <collision_detect_level+0x636>
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    b346:	ef 89       	ldd	r30, Y+23	; 0x17
    b348:	f8 8d       	ldd	r31, Y+24	; 0x18
    b34a:	60 85       	ldd	r22, Z+8	; 0x08
    b34c:	71 85       	ldd	r23, Z+9	; 0x09
    b34e:	82 85       	ldd	r24, Z+10	; 0x0a
    b350:	93 85       	ldd	r25, Z+11	; 0x0b
    b352:	0e 94 f0 6c 	call	0xd9e0	; 0xd9e0 <__fixunssfsi>
    b356:	dc 01       	movw	r26, r24
    b358:	cb 01       	movw	r24, r22
    b35a:	28 e0       	ldi	r18, 0x08	; 8
    b35c:	48 e0       	ldi	r20, 0x08	; 8
    b35e:	6a 81       	ldd	r22, Y+2	; 0x02
    b360:	7b 81       	ldd	r23, Y+3	; 0x03
    b362:	0e 94 98 56 	call	0xad30	; 0xad30 <pixel_overlap>
    b366:	84 30       	cpi	r24, 0x04	; 4
    b368:	90 f0       	brcs	.+36     	; 0xb38e <collision_detect_level+0x636>
				{
					s->vx =  0;
    b36a:	af 89       	ldd	r26, Y+23	; 0x17
    b36c:	b8 8d       	ldd	r27, Y+24	; 0x18
    b36e:	1d 96       	adiw	r26, 0x0d	; 13
    b370:	1c 92       	st	X, r1
    b372:	1e 92       	st	-X, r1
    b374:	1c 97       	sbiw	r26, 0x0c	; 12
					s->x = x0_tile * 8;
    b376:	c5 01       	movw	r24, r10
    b378:	b4 01       	movw	r22, r8
    b37a:	0e 94 1c 6d 	call	0xda38	; 0xda38 <__floatunsisf>
    b37e:	ef 89       	ldd	r30, Y+23	; 0x17
    b380:	f8 8d       	ldd	r31, Y+24	; 0x18
    b382:	64 83       	std	Z+4, r22	; 0x04
    b384:	75 83       	std	Z+5, r23	; 0x05
    b386:	86 83       	std	Z+6, r24	; 0x06
    b388:	97 83       	std	Z+7, r25	; 0x07
					result = 1;
    b38a:	f1 e0       	ldi	r31, 0x01	; 1
    b38c:	f9 83       	std	Y+1, r31	; 0x01
    b38e:	0f 5f       	subi	r16, 0xFF	; 255
    b390:	1f 4f       	sbci	r17, 0xFF	; 255
    b392:	2f ef       	ldi	r18, 0xFF	; 255
    b394:	c2 1a       	sub	r12, r18
    b396:	d2 0a       	sbc	r13, r18
    b398:	03 cf       	rjmp	.-506    	; 0xb1a0 <collision_detect_level+0x448>
	u16 y1_tile = (s->y+7) / 8;
	u8 lt1, lt2;
	u8 result = 0;
	
	// Only if moving on planet
	if (is_space() || (s->vx == 0 && s->vy == 0)) return result;
    b39a:	19 82       	std	Y+1, r1	; 0x01
				}
			}
		}
	}
	return result;
}
    b39c:	89 81       	ldd	r24, Y+1	; 0x01
    b39e:	68 96       	adiw	r28, 0x18	; 24
    b3a0:	0f b6       	in	r0, 0x3f	; 63
    b3a2:	f8 94       	cli
    b3a4:	de bf       	out	0x3e, r29	; 62
    b3a6:	0f be       	out	0x3f, r0	; 63
    b3a8:	cd bf       	out	0x3d, r28	; 61
    b3aa:	df 91       	pop	r29
    b3ac:	cf 91       	pop	r28
    b3ae:	1f 91       	pop	r17
    b3b0:	0f 91       	pop	r16
    b3b2:	ff 90       	pop	r15
    b3b4:	ef 90       	pop	r14
    b3b6:	df 90       	pop	r13
    b3b8:	cf 90       	pop	r12
    b3ba:	bf 90       	pop	r11
    b3bc:	af 90       	pop	r10
    b3be:	9f 90       	pop	r9
    b3c0:	8f 90       	pop	r8
    b3c2:	7f 90       	pop	r7
    b3c4:	6f 90       	pop	r6
    b3c6:	5f 90       	pop	r5
    b3c8:	4f 90       	pop	r4
    b3ca:	3f 90       	pop	r3
    b3cc:	2f 90       	pop	r2
    b3ce:	08 95       	ret

0000b3d0 <animate_shot>:
		game.player.active_shots++;
	}
}

void animate_shot()
{
    b3d0:	2f 92       	push	r2
    b3d2:	3f 92       	push	r3
    b3d4:	4f 92       	push	r4
    b3d6:	5f 92       	push	r5
    b3d8:	6f 92       	push	r6
    b3da:	7f 92       	push	r7
    b3dc:	8f 92       	push	r8
    b3de:	9f 92       	push	r9
    b3e0:	af 92       	push	r10
    b3e2:	bf 92       	push	r11
    b3e4:	cf 92       	push	r12
    b3e6:	df 92       	push	r13
    b3e8:	ef 92       	push	r14
    b3ea:	ff 92       	push	r15
    b3ec:	0f 93       	push	r16
    b3ee:	1f 93       	push	r17
    b3f0:	cf 93       	push	r28
    b3f2:	df 93       	push	r29
    b3f4:	cd b7       	in	r28, 0x3d	; 61
    b3f6:	de b7       	in	r29, 0x3e	; 62
    b3f8:	2f 97       	sbiw	r28, 0x0f	; 15
    b3fa:	0f b6       	in	r0, 0x3f	; 63
    b3fc:	f8 94       	cli
    b3fe:	de bf       	out	0x3e, r29	; 62
    b400:	0f be       	out	0x3f, r0	; 63
    b402:	cd bf       	out	0x3d, r28	; 61
    b404:	9d ee       	ldi	r25, 0xED	; 237
    b406:	89 2e       	mov	r8, r25
    b408:	9d e0       	ldi	r25, 0x0D	; 13
    b40a:	99 2e       	mov	r9, r25
    b40c:	8c ed       	ldi	r24, 0xDC	; 220
    b40e:	9d e0       	ldi	r25, 0x0D	; 13
    b410:	9f 87       	std	Y+15, r25	; 0x0f
    b412:	8e 87       	std	Y+14, r24	; 0x0e
    b414:	9b e0       	ldi	r25, 0x0B	; 11
    b416:	99 83       	std	Y+1, r25	; 0x01
						SFX_HIT;
						game.enemies[j].shield -= game.player.shot[i].hit_count;
						if (game.enemies[j].shield <= 0)
						{
							SFX_ENEMY_EXPLODE;
							game.enemies[j].flags = EXPLODING;
    b418:	20 e1       	ldi	r18, 0x10	; 16
    b41a:	b2 2e       	mov	r11, r18
{
	// Animate shots
	u8 slot = ENEMY_SLOT;
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
	{
		if (game.player.shot[i].active)
    b41c:	f4 01       	movw	r30, r8
    b41e:	80 81       	ld	r24, Z
    b420:	88 23       	and	r24, r24
    b422:	09 f4       	brne	.+2      	; 0xb426 <animate_shot+0x56>
    b424:	46 c1       	rjmp	.+652    	; 0xb6b2 <animate_shot+0x2e2>
		{
			game.player.shot[i].shared.x += game.player.shot[i].shared.vx*FRAME_TIME;
    b426:	ee 85       	ldd	r30, Y+14	; 0x0e
    b428:	ff 85       	ldd	r31, Y+15	; 0x0f
    b42a:	64 85       	ldd	r22, Z+12	; 0x0c
    b42c:	75 85       	ldd	r23, Z+13	; 0x0d
    b42e:	88 27       	eor	r24, r24
    b430:	77 fd       	sbrc	r23, 7
    b432:	80 95       	com	r24
    b434:	98 2f       	mov	r25, r24
    b436:	0e 94 1e 6d 	call	0xda3c	; 0xda3c <__floatsisf>
    b43a:	29 e8       	ldi	r18, 0x89	; 137
    b43c:	38 e8       	ldi	r19, 0x88	; 136
    b43e:	48 e8       	ldi	r20, 0x88	; 136
    b440:	5c e3       	ldi	r21, 0x3C	; 60
    b442:	0e 94 d2 6d 	call	0xdba4	; 0xdba4 <__mulsf3>
    b446:	ee 85       	ldd	r30, Y+14	; 0x0e
    b448:	ff 85       	ldd	r31, Y+15	; 0x0f
    b44a:	24 81       	ldd	r18, Z+4	; 0x04
    b44c:	35 81       	ldd	r19, Z+5	; 0x05
    b44e:	46 81       	ldd	r20, Z+6	; 0x06
    b450:	57 81       	ldd	r21, Z+7	; 0x07
    b452:	0e 94 88 6c 	call	0xd910	; 0xd910 <__addsf3>
    b456:	2b 01       	movw	r4, r22
    b458:	3c 01       	movw	r6, r24
    b45a:	ee 85       	ldd	r30, Y+14	; 0x0e
    b45c:	ff 85       	ldd	r31, Y+15	; 0x0f
    b45e:	64 83       	std	Z+4, r22	; 0x04
    b460:	75 83       	std	Z+5, r23	; 0x05
    b462:	86 83       	std	Z+6, r24	; 0x06
    b464:	97 83       	std	Z+7, r25	; 0x07
			game.player.shot[i].shared.y += game.player.shot[i].shared.vy*FRAME_TIME;
    b466:	29 e8       	ldi	r18, 0x89	; 137
    b468:	38 e8       	ldi	r19, 0x88	; 136
    b46a:	48 e8       	ldi	r20, 0x88	; 136
    b46c:	5c e3       	ldi	r21, 0x3C	; 60
    b46e:	60 81       	ld	r22, Z
    b470:	71 81       	ldd	r23, Z+1	; 0x01
    b472:	82 81       	ldd	r24, Z+2	; 0x02
    b474:	93 81       	ldd	r25, Z+3	; 0x03
    b476:	0e 94 d2 6d 	call	0xdba4	; 0xdba4 <__mulsf3>
    b47a:	ee 85       	ldd	r30, Y+14	; 0x0e
    b47c:	ff 85       	ldd	r31, Y+15	; 0x0f
    b47e:	20 85       	ldd	r18, Z+8	; 0x08
    b480:	31 85       	ldd	r19, Z+9	; 0x09
    b482:	42 85       	ldd	r20, Z+10	; 0x0a
    b484:	53 85       	ldd	r21, Z+11	; 0x0b
    b486:	0e 94 88 6c 	call	0xd910	; 0xd910 <__addsf3>
    b48a:	6b 01       	movw	r12, r22
    b48c:	7c 01       	movw	r14, r24
    b48e:	ee 85       	ldd	r30, Y+14	; 0x0e
    b490:	ff 85       	ldd	r31, Y+15	; 0x0f
    b492:	60 87       	std	Z+8, r22	; 0x08
    b494:	71 87       	std	Z+9, r23	; 0x09
    b496:	82 87       	std	Z+10, r24	; 0x0a
    b498:	93 87       	std	Z+11, r25	; 0x0b
			LBMoveSprite(PLAYER_SHOT_SLOT+i, game.player.shot[i].shared.x - game.camera_x, game.player.shot[i].shared.y - game.camera_y, 1, 1);
    b49a:	60 91 ac 0d 	lds	r22, 0x0DAC
    b49e:	70 91 ad 0d 	lds	r23, 0x0DAD
    b4a2:	80 e0       	ldi	r24, 0x00	; 0
    b4a4:	90 e0       	ldi	r25, 0x00	; 0
    b4a6:	0e 94 1c 6d 	call	0xda38	; 0xda38 <__floatunsisf>
    b4aa:	9b 01       	movw	r18, r22
    b4ac:	ac 01       	movw	r20, r24
    b4ae:	c7 01       	movw	r24, r14
    b4b0:	b6 01       	movw	r22, r12
    b4b2:	0e 94 87 6c 	call	0xd90e	; 0xd90e <__subsf3>
    b4b6:	0e 94 f0 6c 	call	0xd9e0	; 0xd9e0 <__fixunssfsi>
    b4ba:	c6 2e       	mov	r12, r22
    b4bc:	80 91 aa 0d 	lds	r24, 0x0DAA
    b4c0:	90 91 ab 0d 	lds	r25, 0x0DAB
    b4c4:	bc 01       	movw	r22, r24
    b4c6:	80 e0       	ldi	r24, 0x00	; 0
    b4c8:	90 e0       	ldi	r25, 0x00	; 0
    b4ca:	0e 94 1c 6d 	call	0xda38	; 0xda38 <__floatunsisf>
    b4ce:	9b 01       	movw	r18, r22
    b4d0:	ac 01       	movw	r20, r24
    b4d2:	c3 01       	movw	r24, r6
    b4d4:	b2 01       	movw	r22, r4
    b4d6:	0e 94 87 6c 	call	0xd90e	; 0xd90e <__subsf3>
    b4da:	0e 94 f0 6c 	call	0xd9e0	; 0xd9e0 <__fixunssfsi>
    b4de:	01 e0       	ldi	r16, 0x01	; 1
    b4e0:	21 e0       	ldi	r18, 0x01	; 1
    b4e2:	4c 2d       	mov	r20, r12
    b4e4:	89 81       	ldd	r24, Y+1	; 0x01
    b4e6:	0e 94 16 4f 	call	0x9e2c	; 0x9e2c <LBMoveSprite>
			if (game.player.shot[i].shared.x < game.camera_x || game.player.shot[i].shared.x+8 > game.camera_x + CAMERA_WIDTH*8 ||
    b4ea:	ee 85       	ldd	r30, Y+14	; 0x0e
    b4ec:	ff 85       	ldd	r31, Y+15	; 0x0f
    b4ee:	c4 80       	ldd	r12, Z+4	; 0x04
    b4f0:	d5 80       	ldd	r13, Z+5	; 0x05
    b4f2:	e6 80       	ldd	r14, Z+6	; 0x06
    b4f4:	f7 80       	ldd	r15, Z+7	; 0x07
    b4f6:	60 90 aa 0d 	lds	r6, 0x0DAA
    b4fa:	70 90 ab 0d 	lds	r7, 0x0DAB
    b4fe:	b3 01       	movw	r22, r6
    b500:	80 e0       	ldi	r24, 0x00	; 0
    b502:	90 e0       	ldi	r25, 0x00	; 0
    b504:	0e 94 1c 6d 	call	0xda38	; 0xda38 <__floatunsisf>
    b508:	9b 01       	movw	r18, r22
    b50a:	ac 01       	movw	r20, r24
    b50c:	c7 01       	movw	r24, r14
    b50e:	b6 01       	movw	r22, r12
    b510:	0e 94 ec 6c 	call	0xd9d8	; 0xd9d8 <__cmpsf2>
    b514:	87 ff       	sbrs	r24, 7
    b516:	0f c0       	rjmp	.+30     	; 0xb536 <animate_shot+0x166>
			    collision_detect_level(&game.player.shot[i].shared, 1, 1))
			{
				game.player.shot[i].active = 0;
    b518:	f4 01       	movw	r30, r8
    b51a:	10 82       	st	Z, r1
				game.player.active_shots--;
    b51c:	80 91 d5 0d 	lds	r24, 0x0DD5
    b520:	81 50       	subi	r24, 0x01	; 1
    b522:	80 93 d5 0d 	sts	0x0DD5, r24
				LBMoveSprite(PLAYER_SHOT_SLOT+i, OFF_SCREEN, 0, 1, 1);
    b526:	01 e0       	ldi	r16, 0x01	; 1
    b528:	21 e0       	ldi	r18, 0x01	; 1
    b52a:	40 e0       	ldi	r20, 0x00	; 0
    b52c:	60 ee       	ldi	r22, 0xE0	; 224
    b52e:	89 81       	ldd	r24, Y+1	; 0x01
    b530:	0e 94 16 4f 	call	0x9e2c	; 0x9e2c <LBMoveSprite>
    b534:	be c0       	rjmp	.+380    	; 0xb6b2 <animate_shot+0x2e2>
		if (game.player.shot[i].active)
		{
			game.player.shot[i].shared.x += game.player.shot[i].shared.vx*FRAME_TIME;
			game.player.shot[i].shared.y += game.player.shot[i].shared.vy*FRAME_TIME;
			LBMoveSprite(PLAYER_SHOT_SLOT+i, game.player.shot[i].shared.x - game.camera_x, game.player.shot[i].shared.y - game.camera_y, 1, 1);
			if (game.player.shot[i].shared.x < game.camera_x || game.player.shot[i].shared.x+8 > game.camera_x + CAMERA_WIDTH*8 ||
    b536:	20 e0       	ldi	r18, 0x00	; 0
    b538:	30 e0       	ldi	r19, 0x00	; 0
    b53a:	40 e0       	ldi	r20, 0x00	; 0
    b53c:	51 e4       	ldi	r21, 0x41	; 65
    b53e:	c7 01       	movw	r24, r14
    b540:	b6 01       	movw	r22, r12
    b542:	0e 94 88 6c 	call	0xd910	; 0xd910 <__addsf3>
    b546:	1b 01       	movw	r2, r22
    b548:	2c 01       	movw	r4, r24
    b54a:	b3 01       	movw	r22, r6
    b54c:	60 52       	subi	r22, 0x20	; 32
    b54e:	7f 4f       	sbci	r23, 0xFF	; 255
    b550:	80 e0       	ldi	r24, 0x00	; 0
    b552:	90 e0       	ldi	r25, 0x00	; 0
    b554:	0e 94 1c 6d 	call	0xda38	; 0xda38 <__floatunsisf>
    b558:	9b 01       	movw	r18, r22
    b55a:	ac 01       	movw	r20, r24
    b55c:	c2 01       	movw	r24, r4
    b55e:	b1 01       	movw	r22, r2
    b560:	0e 94 ce 6d 	call	0xdb9c	; 0xdb9c <__gesf2>
    b564:	18 16       	cp	r1, r24
    b566:	c4 f2       	brlt	.-80     	; 0xb518 <animate_shot+0x148>
			    collision_detect_level(&game.player.shot[i].shared, 1, 1))
    b568:	41 e0       	ldi	r20, 0x01	; 1
    b56a:	61 e0       	ldi	r22, 0x01	; 1
    b56c:	8e 85       	ldd	r24, Y+14	; 0x0e
    b56e:	9f 85       	ldd	r25, Y+15	; 0x0f
    b570:	0e 94 ac 56 	call	0xad58	; 0xad58 <collision_detect_level>
		if (game.player.shot[i].active)
		{
			game.player.shot[i].shared.x += game.player.shot[i].shared.vx*FRAME_TIME;
			game.player.shot[i].shared.y += game.player.shot[i].shared.vy*FRAME_TIME;
			LBMoveSprite(PLAYER_SHOT_SLOT+i, game.player.shot[i].shared.x - game.camera_x, game.player.shot[i].shared.y - game.camera_y, 1, 1);
			if (game.player.shot[i].shared.x < game.camera_x || game.player.shot[i].shared.x+8 > game.camera_x + CAMERA_WIDTH*8 ||
    b574:	81 11       	cpse	r24, r1
    b576:	d0 cf       	rjmp	.-96     	; 0xb518 <animate_shot+0x148>
    b578:	89 e6       	ldi	r24, 0x69	; 105
    b57a:	28 2e       	mov	r2, r24
    b57c:	8e e0       	ldi	r24, 0x0E	; 14
    b57e:	38 2e       	mov	r3, r24
    b580:	61 2c       	mov	r6, r1
    b582:	71 2c       	mov	r7, r1
    b584:	24 01       	movw	r4, r8
    b586:	f1 e0       	ldi	r31, 0x01	; 1
    b588:	4f 1a       	sub	r4, r31
    b58a:	51 08       	sbc	r5, r1
    b58c:	f1 01       	movw	r30, r2
    b58e:	38 97       	sbiw	r30, 0x08	; 8
			else
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
				{
					if (game.enemies[j].active &&
    b590:	80 81       	ld	r24, Z
    b592:	88 23       	and	r24, r24
    b594:	09 f4       	brne	.+2      	; 0xb598 <animate_shot+0x1c8>
    b596:	82 c0       	rjmp	.+260    	; 0xb69c <animate_shot+0x2cc>
    b598:	34 96       	adiw	r30, 0x04	; 4
					    LBCollides(game.player.shot[i].shared.x,game.player.shot[i].shared.y, 8, 8,
    b59a:	a0 80       	ld	r10, Z
    b59c:	aa 0c       	add	r10, r10
    b59e:	aa 0c       	add	r10, r10
    b5a0:	aa 0c       	add	r10, r10
    b5a2:	31 97       	sbiw	r30, 0x01	; 1
    b5a4:	c0 80       	ld	r12, Z
    b5a6:	cc 0c       	add	r12, r12
    b5a8:	cc 0c       	add	r12, r12
    b5aa:	cc 0c       	add	r12, r12
    b5ac:	3a 97       	sbiw	r30, 0x0a	; 10
    b5ae:	60 81       	ld	r22, Z
    b5b0:	71 81       	ldd	r23, Z+1	; 0x01
    b5b2:	82 81       	ldd	r24, Z+2	; 0x02
    b5b4:	93 81       	ldd	r25, Z+3	; 0x03
    b5b6:	0e 94 f0 6c 	call	0xd9e0	; 0xd9e0 <__fixunssfsi>
    b5ba:	6a 83       	std	Y+2, r22	; 0x02
    b5bc:	7b 83       	std	Y+3, r23	; 0x03
    b5be:	8c 83       	std	Y+4, r24	; 0x04
    b5c0:	9d 83       	std	Y+5, r25	; 0x05
    b5c2:	f1 01       	movw	r30, r2
    b5c4:	73 97       	sbiw	r30, 0x13	; 19
    b5c6:	60 81       	ld	r22, Z
    b5c8:	71 81       	ldd	r23, Z+1	; 0x01
    b5ca:	82 81       	ldd	r24, Z+2	; 0x02
    b5cc:	93 81       	ldd	r25, Z+3	; 0x03
    b5ce:	0e 94 f0 6c 	call	0xd9e0	; 0xd9e0 <__fixunssfsi>
    b5d2:	6e 83       	std	Y+6, r22	; 0x06
    b5d4:	7f 83       	std	Y+7, r23	; 0x07
    b5d6:	88 87       	std	Y+8, r24	; 0x08
    b5d8:	99 87       	std	Y+9, r25	; 0x09
    b5da:	ee 85       	ldd	r30, Y+14	; 0x0e
    b5dc:	ff 85       	ldd	r31, Y+15	; 0x0f
    b5de:	60 85       	ldd	r22, Z+8	; 0x08
    b5e0:	71 85       	ldd	r23, Z+9	; 0x09
    b5e2:	82 85       	ldd	r24, Z+10	; 0x0a
    b5e4:	93 85       	ldd	r25, Z+11	; 0x0b
    b5e6:	0e 94 f0 6c 	call	0xd9e0	; 0xd9e0 <__fixunssfsi>
    b5ea:	6a 87       	std	Y+10, r22	; 0x0a
    b5ec:	7b 87       	std	Y+11, r23	; 0x0b
    b5ee:	8c 87       	std	Y+12, r24	; 0x0c
    b5f0:	9d 87       	std	Y+13, r25	; 0x0d
    b5f2:	ee 85       	ldd	r30, Y+14	; 0x0e
    b5f4:	ff 85       	ldd	r31, Y+15	; 0x0f
    b5f6:	64 81       	ldd	r22, Z+4	; 0x04
    b5f8:	75 81       	ldd	r23, Z+5	; 0x05
    b5fa:	86 81       	ldd	r24, Z+6	; 0x06
    b5fc:	97 81       	ldd	r25, Z+7	; 0x07
    b5fe:	0e 94 f0 6c 	call	0xd9e0	; 0xd9e0 <__fixunssfsi>
    b602:	dc 01       	movw	r26, r24
    b604:	cb 01       	movw	r24, r22
    b606:	ea 80       	ldd	r14, Y+2	; 0x02
    b608:	fb 80       	ldd	r15, Y+3	; 0x03
    b60a:	0e 81       	ldd	r16, Y+6	; 0x06
    b60c:	1f 81       	ldd	r17, Y+7	; 0x07
    b60e:	28 e0       	ldi	r18, 0x08	; 8
    b610:	48 e0       	ldi	r20, 0x08	; 8
    b612:	6a 85       	ldd	r22, Y+10	; 0x0a
    b614:	7b 85       	ldd	r23, Y+11	; 0x0b
    b616:	0e 94 79 4e 	call	0x9cf2	; 0x9cf2 <LBCollides>
			else
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
				{
					if (game.enemies[j].active &&
    b61a:	88 23       	and	r24, r24
    b61c:	09 f4       	brne	.+2      	; 0xb620 <animate_shot+0x250>
    b61e:	3e c0       	rjmp	.+124    	; 0xb69c <animate_shot+0x2cc>
					    LBCollides(game.player.shot[i].shared.x,game.player.shot[i].shared.y, 8, 8,
							game.enemies[j].shared.x, game.enemies[j].shared.y, game.enemies[j].width*8, game.enemies[j].height*8
						)
					)
					{
						SFX_HIT;
    b620:	41 e0       	ldi	r20, 0x01	; 1
    b622:	6f ef       	ldi	r22, 0xFF	; 255
    b624:	84 e0       	ldi	r24, 0x04	; 4
    b626:	0e 94 f0 41 	call	0x83e0	; 0x83e0 <TriggerFx>
						game.enemies[j].shield -= game.player.shot[i].hit_count;
    b62a:	f1 01       	movw	r30, r2
    b62c:	80 81       	ld	r24, Z
    b62e:	f2 01       	movw	r30, r4
    b630:	90 81       	ld	r25, Z
    b632:	89 1b       	sub	r24, r25
    b634:	f1 01       	movw	r30, r2
    b636:	80 83       	st	Z, r24
						if (game.enemies[j].shield <= 0)
    b638:	18 16       	cp	r1, r24
    b63a:	14 f1       	brlt	.+68     	; 0xb680 <animate_shot+0x2b0>
						{
							SFX_ENEMY_EXPLODE;
    b63c:	41 e0       	ldi	r20, 0x01	; 1
    b63e:	6f ef       	ldi	r22, 0xFF	; 255
    b640:	86 e0       	ldi	r24, 0x06	; 6
    b642:	0e 94 f0 41 	call	0x83e0	; 0x83e0 <TriggerFx>
							game.enemies[j].flags = EXPLODING;
    b646:	f2 e4       	ldi	r31, 0x42	; 66
    b648:	f6 9d       	mul	r31, r6
    b64a:	c0 01       	movw	r24, r0
    b64c:	f7 9d       	mul	r31, r7
    b64e:	90 0d       	add	r25, r0
    b650:	11 24       	eor	r1, r1
    b652:	8a 55       	subi	r24, 0x5A	; 90
    b654:	92 4f       	sbci	r25, 0xF2	; 242
    b656:	fc 01       	movw	r30, r24
    b658:	e4 54       	subi	r30, 0x44	; 68
    b65a:	ff 4f       	sbci	r31, 0xFF	; 255
    b65c:	b0 82       	st	Z, r11
							game.enemies[j].active = 0;
    b65e:	31 97       	sbiw	r30, 0x01	; 1
    b660:	10 82       	st	Z, r1
							game.active_enemies--;
    b662:	80 91 c3 0d 	lds	r24, 0x0DC3
    b666:	81 50       	subi	r24, 0x01	; 1
    b668:	80 93 c3 0d 	sts	0x0DC3, r24
							game.level_score += KILL_SCORE;
    b66c:	80 91 b0 0d 	lds	r24, 0x0DB0
    b670:	90 91 b1 0d 	lds	r25, 0x0DB1
    b674:	0a 96       	adiw	r24, 0x0a	; 10
    b676:	90 93 b1 0d 	sts	0x0DB1, r25
    b67a:	80 93 b0 0d 	sts	0x0DB0, r24
							break;
    b67e:	19 c0       	rjmp	.+50     	; 0xb6b2 <animate_shot+0x2e2>
						}
						game.player.shot[i].active = 0;
    b680:	f4 01       	movw	r30, r8
    b682:	10 82       	st	Z, r1
						game.player.active_shots--;
    b684:	80 91 d5 0d 	lds	r24, 0x0DD5
    b688:	81 50       	subi	r24, 0x01	; 1
    b68a:	80 93 d5 0d 	sts	0x0DD5, r24
						LBMoveSprite(PLAYER_SHOT_SLOT+i, OFF_SCREEN, 0, 1, 1);
    b68e:	01 e0       	ldi	r16, 0x01	; 1
    b690:	21 e0       	ldi	r18, 0x01	; 1
    b692:	40 e0       	ldi	r20, 0x00	; 0
    b694:	60 ee       	ldi	r22, 0xE0	; 224
    b696:	89 81       	ldd	r24, Y+1	; 0x01
    b698:	0e 94 16 4f 	call	0x9e2c	; 0x9e2c <LBMoveSprite>
    b69c:	ff ef       	ldi	r31, 0xFF	; 255
    b69e:	6f 1a       	sub	r6, r31
    b6a0:	7f 0a       	sbc	r7, r31
    b6a2:	22 e4       	ldi	r18, 0x42	; 66
    b6a4:	22 0e       	add	r2, r18
    b6a6:	31 1c       	adc	r3, r1
				LBMoveSprite(PLAYER_SHOT_SLOT+i, OFF_SCREEN, 0, 1, 1);
			}
			else
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
    b6a8:	85 e0       	ldi	r24, 0x05	; 5
    b6aa:	68 16       	cp	r6, r24
    b6ac:	71 04       	cpc	r7, r1
    b6ae:	09 f0       	breq	.+2      	; 0xb6b2 <animate_shot+0x2e2>
    b6b0:	6d cf       	rjmp	.-294    	; 0xb58c <animate_shot+0x1bc>
    b6b2:	9a e1       	ldi	r25, 0x1A	; 26
    b6b4:	89 0e       	add	r8, r25
    b6b6:	91 1c       	adc	r9, r1
    b6b8:	e9 81       	ldd	r30, Y+1	; 0x01
    b6ba:	ef 5f       	subi	r30, 0xFF	; 255
    b6bc:	e9 83       	std	Y+1, r30	; 0x01
    b6be:	8e 85       	ldd	r24, Y+14	; 0x0e
    b6c0:	9f 85       	ldd	r25, Y+15	; 0x0f
    b6c2:	4a 96       	adiw	r24, 0x1a	; 26
    b6c4:	9f 87       	std	Y+15, r25	; 0x0f
    b6c6:	8e 87       	std	Y+14, r24	; 0x0e

void animate_shot()
{
	// Animate shots
	u8 slot = ENEMY_SLOT;
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
    b6c8:	ee 30       	cpi	r30, 0x0E	; 14
    b6ca:	09 f0       	breq	.+2      	; 0xb6ce <animate_shot+0x2fe>
    b6cc:	a7 ce       	rjmp	.-690    	; 0xb41c <animate_shot+0x4c>
					slot += game.enemies[j].width*game.enemies[j].height;
				}
			}
		}
	}
}
    b6ce:	2f 96       	adiw	r28, 0x0f	; 15
    b6d0:	0f b6       	in	r0, 0x3f	; 63
    b6d2:	f8 94       	cli
    b6d4:	de bf       	out	0x3e, r29	; 62
    b6d6:	0f be       	out	0x3f, r0	; 63
    b6d8:	cd bf       	out	0x3d, r28	; 61
    b6da:	df 91       	pop	r29
    b6dc:	cf 91       	pop	r28
    b6de:	1f 91       	pop	r17
    b6e0:	0f 91       	pop	r16
    b6e2:	ff 90       	pop	r15
    b6e4:	ef 90       	pop	r14
    b6e6:	df 90       	pop	r13
    b6e8:	cf 90       	pop	r12
    b6ea:	bf 90       	pop	r11
    b6ec:	af 90       	pop	r10
    b6ee:	9f 90       	pop	r9
    b6f0:	8f 90       	pop	r8
    b6f2:	7f 90       	pop	r7
    b6f4:	6f 90       	pop	r6
    b6f6:	5f 90       	pop	r5
    b6f8:	4f 90       	pop	r4
    b6fa:	3f 90       	pop	r3
    b6fc:	2f 90       	pop	r2
    b6fe:	08 95       	ret

0000b700 <map_explosion>:
	}
	return result;
}

u8 map_explosion(u8* flags, Animation* anim, u8 slot, u8 width, u8 height)
{
    b700:	7f 92       	push	r7
    b702:	8f 92       	push	r8
    b704:	9f 92       	push	r9
    b706:	af 92       	push	r10
    b708:	bf 92       	push	r11
    b70a:	cf 92       	push	r12
    b70c:	df 92       	push	r13
    b70e:	ef 92       	push	r14
    b710:	ff 92       	push	r15
    b712:	0f 93       	push	r16
    b714:	1f 93       	push	r17
    b716:	cf 93       	push	r28
    b718:	df 93       	push	r29
    b71a:	1f 92       	push	r1
    b71c:	cd b7       	in	r28, 0x3d	; 61
    b71e:	de b7       	in	r29, 0x3e	; 62
    b720:	6c 01       	movw	r12, r24
    b722:	7b 01       	movw	r14, r22
    b724:	74 2e       	mov	r7, r20
	char* frame;
	frame = LBGetNextFrame(anim);
    b726:	cb 01       	movw	r24, r22
    b728:	29 83       	std	Y+1, r18	; 0x01
    b72a:	0e 94 62 4d 	call	0x9ac4	; 0x9ac4 <LBGetNextFrame>
    b72e:	4c 01       	movw	r8, r24
	for (u8 i = 0; i < width*height; i++)
    b730:	29 81       	ldd	r18, Y+1	; 0x01
    b732:	20 9f       	mul	r18, r16
    b734:	50 01       	movw	r10, r0
    b736:	11 24       	eor	r1, r1
    b738:	10 e0       	ldi	r17, 0x00	; 0
    b73a:	81 2f       	mov	r24, r17
    b73c:	90 e0       	ldi	r25, 0x00	; 0
    b73e:	8a 15       	cp	r24, r10
    b740:	9b 05       	cpc	r25, r11
    b742:	54 f4       	brge	.+20     	; 0xb758 <map_explosion+0x58>
	{
		LBMapSprite(slot+i, frame, 0);
    b744:	40 e0       	ldi	r20, 0x00	; 0
    b746:	b4 01       	movw	r22, r8
    b748:	81 2f       	mov	r24, r17
    b74a:	87 0d       	add	r24, r7
    b74c:	29 83       	std	Y+1, r18	; 0x01
    b74e:	0e 94 c4 4e 	call	0x9d88	; 0x9d88 <LBMapSprite>

u8 map_explosion(u8* flags, Animation* anim, u8 slot, u8 width, u8 height)
{
	char* frame;
	frame = LBGetNextFrame(anim);
	for (u8 i = 0; i < width*height; i++)
    b752:	1f 5f       	subi	r17, 0xFF	; 255
    b754:	29 81       	ldd	r18, Y+1	; 0x01
    b756:	f1 cf       	rjmp	.-30     	; 0xb73a <map_explosion+0x3a>
	{
		LBMapSprite(slot+i, frame, 0);
	}
	if (anim->looped)
    b758:	f7 01       	movw	r30, r14
    b75a:	84 81       	ldd	r24, Z+4	; 0x04
    b75c:	88 23       	and	r24, r24
    b75e:	51 f0       	breq	.+20     	; 0xb774 <map_explosion+0x74>
	{
		*flags ^= EXPLODING;
    b760:	f6 01       	movw	r30, r12
    b762:	80 81       	ld	r24, Z
    b764:	90 e1       	ldi	r25, 0x10	; 16
    b766:	98 27       	eor	r25, r24
    b768:	90 83       	st	Z, r25
		LBMoveSprite(slot, OFF_SCREEN, 0, width, height);
    b76a:	40 e0       	ldi	r20, 0x00	; 0
    b76c:	60 ee       	ldi	r22, 0xE0	; 224
    b76e:	87 2d       	mov	r24, r7
    b770:	0e 94 16 4f 	call	0x9e2c	; 0x9e2c <LBMoveSprite>
	}
	return anim->looped;
}
    b774:	f7 01       	movw	r30, r14
    b776:	84 81       	ldd	r24, Z+4	; 0x04
    b778:	0f 90       	pop	r0
    b77a:	df 91       	pop	r29
    b77c:	cf 91       	pop	r28
    b77e:	1f 91       	pop	r17
    b780:	0f 91       	pop	r16
    b782:	ff 90       	pop	r15
    b784:	ef 90       	pop	r14
    b786:	df 90       	pop	r13
    b788:	cf 90       	pop	r12
    b78a:	bf 90       	pop	r11
    b78c:	af 90       	pop	r10
    b78e:	9f 90       	pop	r9
    b790:	8f 90       	pop	r8
    b792:	7f 90       	pop	r7
    b794:	08 95       	ret

0000b796 <animate_sprite>:

void animate_sprite(SpriteShared* s, u8 slot, u8 width, u8 height)
{
    b796:	8f 92       	push	r8
    b798:	9f 92       	push	r9
    b79a:	af 92       	push	r10
    b79c:	bf 92       	push	r11
    b79e:	ff 92       	push	r15
    b7a0:	0f 93       	push	r16
    b7a2:	1f 93       	push	r17
    b7a4:	cf 93       	push	r28
    b7a6:	df 93       	push	r29
    b7a8:	ec 01       	movw	r28, r24
    b7aa:	f6 2e       	mov	r15, r22
    b7ac:	14 2f       	mov	r17, r20
    b7ae:	02 2f       	mov	r16, r18
	s->vy = s->vy + s->gravity*FRAME_TIME;
    b7b0:	6e 85       	ldd	r22, Y+14	; 0x0e
    b7b2:	70 e0       	ldi	r23, 0x00	; 0
    b7b4:	80 e0       	ldi	r24, 0x00	; 0
    b7b6:	90 e0       	ldi	r25, 0x00	; 0
    b7b8:	0e 94 1e 6d 	call	0xda3c	; 0xda3c <__floatsisf>
    b7bc:	29 e8       	ldi	r18, 0x89	; 137
    b7be:	38 e8       	ldi	r19, 0x88	; 136
    b7c0:	48 e8       	ldi	r20, 0x88	; 136
    b7c2:	5c e3       	ldi	r21, 0x3C	; 60
    b7c4:	0e 94 d2 6d 	call	0xdba4	; 0xdba4 <__mulsf3>
    b7c8:	28 81       	ld	r18, Y
    b7ca:	39 81       	ldd	r19, Y+1	; 0x01
    b7cc:	4a 81       	ldd	r20, Y+2	; 0x02
    b7ce:	5b 81       	ldd	r21, Y+3	; 0x03
    b7d0:	0e 94 88 6c 	call	0xd910	; 0xd910 <__addsf3>
    b7d4:	4b 01       	movw	r8, r22
    b7d6:	5c 01       	movw	r10, r24
	if (s->vy > MAX_SPEED) s->vy = MAX_SPEED;
    b7d8:	20 e0       	ldi	r18, 0x00	; 0
    b7da:	30 e0       	ldi	r19, 0x00	; 0
    b7dc:	40 ef       	ldi	r20, 0xF0	; 240
    b7de:	52 e4       	ldi	r21, 0x42	; 66
    b7e0:	0e 94 ce 6d 	call	0xdb9c	; 0xdb9c <__gesf2>
    b7e4:	18 16       	cp	r1, r24
    b7e6:	2c f0       	brlt	.+10     	; 0xb7f2 <animate_sprite+0x5c>
	return anim->looped;
}

void animate_sprite(SpriteShared* s, u8 slot, u8 width, u8 height)
{
	s->vy = s->vy + s->gravity*FRAME_TIME;
    b7e8:	88 82       	st	Y, r8
    b7ea:	99 82       	std	Y+1, r9	; 0x01
    b7ec:	aa 82       	std	Y+2, r10	; 0x02
    b7ee:	bb 82       	std	Y+3, r11	; 0x03
    b7f0:	08 c0       	rjmp	.+16     	; 0xb802 <animate_sprite+0x6c>
	if (s->vy > MAX_SPEED) s->vy = MAX_SPEED;
    b7f2:	80 e0       	ldi	r24, 0x00	; 0
    b7f4:	90 e0       	ldi	r25, 0x00	; 0
    b7f6:	a0 ef       	ldi	r26, 0xF0	; 240
    b7f8:	b2 e4       	ldi	r27, 0x42	; 66
    b7fa:	88 83       	st	Y, r24
    b7fc:	99 83       	std	Y+1, r25	; 0x01
    b7fe:	aa 83       	std	Y+2, r26	; 0x02
    b800:	bb 83       	std	Y+3, r27	; 0x03
	s->x += s->vx*FRAME_TIME;
    b802:	6c 85       	ldd	r22, Y+12	; 0x0c
    b804:	7d 85       	ldd	r23, Y+13	; 0x0d
    b806:	88 27       	eor	r24, r24
    b808:	77 fd       	sbrc	r23, 7
    b80a:	80 95       	com	r24
    b80c:	98 2f       	mov	r25, r24
    b80e:	0e 94 1e 6d 	call	0xda3c	; 0xda3c <__floatsisf>
    b812:	29 e8       	ldi	r18, 0x89	; 137
    b814:	38 e8       	ldi	r19, 0x88	; 136
    b816:	48 e8       	ldi	r20, 0x88	; 136
    b818:	5c e3       	ldi	r21, 0x3C	; 60
    b81a:	0e 94 d2 6d 	call	0xdba4	; 0xdba4 <__mulsf3>
    b81e:	9b 01       	movw	r18, r22
    b820:	ac 01       	movw	r20, r24
    b822:	6c 81       	ldd	r22, Y+4	; 0x04
    b824:	7d 81       	ldd	r23, Y+5	; 0x05
    b826:	8e 81       	ldd	r24, Y+6	; 0x06
    b828:	9f 81       	ldd	r25, Y+7	; 0x07
    b82a:	0e 94 88 6c 	call	0xd910	; 0xd910 <__addsf3>
    b82e:	6c 83       	std	Y+4, r22	; 0x04
    b830:	7d 83       	std	Y+5, r23	; 0x05
    b832:	8e 83       	std	Y+6, r24	; 0x06
    b834:	9f 83       	std	Y+7, r25	; 0x07
	s->y += s->vy*FRAME_TIME;
    b836:	29 e8       	ldi	r18, 0x89	; 137
    b838:	38 e8       	ldi	r19, 0x88	; 136
    b83a:	48 e8       	ldi	r20, 0x88	; 136
    b83c:	5c e3       	ldi	r21, 0x3C	; 60
    b83e:	68 81       	ld	r22, Y
    b840:	79 81       	ldd	r23, Y+1	; 0x01
    b842:	8a 81       	ldd	r24, Y+2	; 0x02
    b844:	9b 81       	ldd	r25, Y+3	; 0x03
    b846:	0e 94 d2 6d 	call	0xdba4	; 0xdba4 <__mulsf3>
    b84a:	9b 01       	movw	r18, r22
    b84c:	ac 01       	movw	r20, r24
    b84e:	68 85       	ldd	r22, Y+8	; 0x08
    b850:	79 85       	ldd	r23, Y+9	; 0x09
    b852:	8a 85       	ldd	r24, Y+10	; 0x0a
    b854:	9b 85       	ldd	r25, Y+11	; 0x0b
    b856:	0e 94 88 6c 	call	0xd910	; 0xd910 <__addsf3>
    b85a:	68 87       	std	Y+8, r22	; 0x08
    b85c:	79 87       	std	Y+9, r23	; 0x09
    b85e:	8a 87       	std	Y+10, r24	; 0x0a
    b860:	9b 87       	std	Y+11, r25	; 0x0b
	collision_detect_level(s, width, height);
    b862:	40 2f       	mov	r20, r16
    b864:	61 2f       	mov	r22, r17
    b866:	ce 01       	movw	r24, r28
    b868:	0e 94 ac 56 	call	0xad58	; 0xad58 <collision_detect_level>
	LBMoveSprite(slot, s->x - game.camera_x, s->y - game.camera_y, width, height);
    b86c:	e0 91 ac 0d 	lds	r30, 0x0DAC
    b870:	f0 91 ad 0d 	lds	r31, 0x0DAD
    b874:	bf 01       	movw	r22, r30
    b876:	80 e0       	ldi	r24, 0x00	; 0
    b878:	90 e0       	ldi	r25, 0x00	; 0
    b87a:	0e 94 1c 6d 	call	0xda38	; 0xda38 <__floatunsisf>
    b87e:	9b 01       	movw	r18, r22
    b880:	ac 01       	movw	r20, r24
    b882:	68 85       	ldd	r22, Y+8	; 0x08
    b884:	79 85       	ldd	r23, Y+9	; 0x09
    b886:	8a 85       	ldd	r24, Y+10	; 0x0a
    b888:	9b 85       	ldd	r25, Y+11	; 0x0b
    b88a:	0e 94 87 6c 	call	0xd90e	; 0xd90e <__subsf3>
    b88e:	0e 94 f0 6c 	call	0xd9e0	; 0xd9e0 <__fixunssfsi>
    b892:	b6 2e       	mov	r11, r22
    b894:	e0 91 aa 0d 	lds	r30, 0x0DAA
    b898:	f0 91 ab 0d 	lds	r31, 0x0DAB
    b89c:	bf 01       	movw	r22, r30
    b89e:	80 e0       	ldi	r24, 0x00	; 0
    b8a0:	90 e0       	ldi	r25, 0x00	; 0
    b8a2:	0e 94 1c 6d 	call	0xda38	; 0xda38 <__floatunsisf>
    b8a6:	9b 01       	movw	r18, r22
    b8a8:	ac 01       	movw	r20, r24
    b8aa:	6c 81       	ldd	r22, Y+4	; 0x04
    b8ac:	7d 81       	ldd	r23, Y+5	; 0x05
    b8ae:	8e 81       	ldd	r24, Y+6	; 0x06
    b8b0:	9f 81       	ldd	r25, Y+7	; 0x07
    b8b2:	0e 94 87 6c 	call	0xd90e	; 0xd90e <__subsf3>
    b8b6:	0e 94 f0 6c 	call	0xd9e0	; 0xd9e0 <__fixunssfsi>
    b8ba:	21 2f       	mov	r18, r17
    b8bc:	4b 2d       	mov	r20, r11
    b8be:	8f 2d       	mov	r24, r15
    b8c0:	0e 94 16 4f 	call	0x9e2c	; 0x9e2c <LBMoveSprite>
}
    b8c4:	df 91       	pop	r29
    b8c6:	cf 91       	pop	r28
    b8c8:	1f 91       	pop	r17
    b8ca:	0f 91       	pop	r16
    b8cc:	ff 90       	pop	r15
    b8ce:	bf 90       	pop	r11
    b8d0:	af 90       	pop	r10
    b8d2:	9f 90       	pop	r9
    b8d4:	8f 90       	pop	r8
    b8d6:	08 95       	ret

0000b8d8 <animate_player>:

void animate_player()
{
    b8d8:	0f 93       	push	r16
    b8da:	cf 93       	push	r28
	if (game.player.flags & EXPLODING)
    b8dc:	80 91 d6 0d 	lds	r24, 0x0DD6
    b8e0:	84 ff       	sbrs	r24, 4
    b8e2:	38 c0       	rjmp	.+112    	; 0xb954 <animate_player+0x7c>
	{
		LBMoveSprite(PLAYER_SLOT, game.player.shared.x - game.camera_x, game.player.shared.y - game.camera_y, game.player.width, game.player.height);
    b8e4:	60 91 ac 0d 	lds	r22, 0x0DAC
    b8e8:	70 91 ad 0d 	lds	r23, 0x0DAD
    b8ec:	80 e0       	ldi	r24, 0x00	; 0
    b8ee:	90 e0       	ldi	r25, 0x00	; 0
    b8f0:	0e 94 1c 6d 	call	0xda38	; 0xda38 <__floatunsisf>
    b8f4:	9b 01       	movw	r18, r22
    b8f6:	ac 01       	movw	r20, r24
    b8f8:	60 91 ce 0d 	lds	r22, 0x0DCE
    b8fc:	70 91 cf 0d 	lds	r23, 0x0DCF
    b900:	80 91 d0 0d 	lds	r24, 0x0DD0
    b904:	90 91 d1 0d 	lds	r25, 0x0DD1
    b908:	0e 94 87 6c 	call	0xd90e	; 0xd90e <__subsf3>
    b90c:	0e 94 f0 6c 	call	0xd9e0	; 0xd9e0 <__fixunssfsi>
    b910:	c6 2f       	mov	r28, r22
    b912:	60 91 aa 0d 	lds	r22, 0x0DAA
    b916:	70 91 ab 0d 	lds	r23, 0x0DAB
    b91a:	80 e0       	ldi	r24, 0x00	; 0
    b91c:	90 e0       	ldi	r25, 0x00	; 0
    b91e:	0e 94 1c 6d 	call	0xda38	; 0xda38 <__floatunsisf>
    b922:	9b 01       	movw	r18, r22
    b924:	ac 01       	movw	r20, r24
    b926:	60 91 ca 0d 	lds	r22, 0x0DCA
    b92a:	70 91 cb 0d 	lds	r23, 0x0DCB
    b92e:	80 91 cc 0d 	lds	r24, 0x0DCC
    b932:	90 91 cd 0d 	lds	r25, 0x0DCD
    b936:	0e 94 87 6c 	call	0xd90e	; 0xd90e <__subsf3>
    b93a:	0e 94 f0 6c 	call	0xd9e0	; 0xd9e0 <__fixunssfsi>
    b93e:	00 91 da 0d 	lds	r16, 0x0DDA
    b942:	20 91 d9 0d 	lds	r18, 0x0DD9
    b946:	4c 2f       	mov	r20, r28
    b948:	80 e0       	ldi	r24, 0x00	; 0
    b94a:	0e 94 16 4f 	call	0x9e2c	; 0x9e2c <LBMoveSprite>
	}
	else animate_sprite(&game.player.shared, PLAYER_SLOT, game.player.width, game.player.height);
}
    b94e:	cf 91       	pop	r28
    b950:	0f 91       	pop	r16
    b952:	08 95       	ret
{
	if (game.player.flags & EXPLODING)
	{
		LBMoveSprite(PLAYER_SLOT, game.player.shared.x - game.camera_x, game.player.shared.y - game.camera_y, game.player.width, game.player.height);
	}
	else animate_sprite(&game.player.shared, PLAYER_SLOT, game.player.width, game.player.height);
    b954:	20 91 da 0d 	lds	r18, 0x0DDA
    b958:	40 91 d9 0d 	lds	r20, 0x0DD9
    b95c:	60 e0       	ldi	r22, 0x00	; 0
    b95e:	86 ec       	ldi	r24, 0xC6	; 198
    b960:	9d e0       	ldi	r25, 0x0D	; 13
}
    b962:	cf 91       	pop	r28
    b964:	0f 91       	pop	r16
{
	if (game.player.flags & EXPLODING)
	{
		LBMoveSprite(PLAYER_SLOT, game.player.shared.x - game.camera_x, game.player.shared.y - game.camera_y, game.player.width, game.player.height);
	}
	else animate_sprite(&game.player.shared, PLAYER_SLOT, game.player.width, game.player.height);
    b966:	0c 94 cb 5b 	jmp	0xb796	; 0xb796 <animate_sprite>

0000b96a <update_spider_enemy>:
}

void update_spider_enemy(Enemy* e, u8 slot)
{
    b96a:	1f 93       	push	r17
    b96c:	cf 93       	push	r28
    b96e:	df 93       	push	r29
    b970:	ec 01       	movw	r28, r24
    b972:	16 2f       	mov	r17, r22
	if (e->flags & IDLE && e->frame_count == SPIDER_IDLE_FRAMES)
    b974:	98 89       	ldd	r25, Y+16	; 0x10
    b976:	89 2f       	mov	r24, r25
    b978:	88 70       	andi	r24, 0x08	; 8
    b97a:	93 ff       	sbrs	r25, 3
    b97c:	1e c0       	rjmp	.+60     	; 0xb9ba <update_spider_enemy+0x50>
    b97e:	2d 89       	ldd	r18, Y+21	; 0x15
    b980:	20 38       	cpi	r18, 0x80	; 128
    b982:	d9 f4       	brne	.+54     	; 0xb9ba <update_spider_enemy+0x50>
	{
		e->flags = JUMPING;
    b984:	81 e0       	ldi	r24, 0x01	; 1
    b986:	88 8b       	std	Y+16, r24	; 0x10
		e->shared.vy = -SPIDER_JUMP_SPEED;
    b988:	80 e0       	ldi	r24, 0x00	; 0
    b98a:	90 e0       	ldi	r25, 0x00	; 0
    b98c:	a8 ec       	ldi	r26, 0xC8	; 200
    b98e:	b2 ec       	ldi	r27, 0xC2	; 194
    b990:	88 83       	st	Y, r24
    b992:	99 83       	std	Y+1, r25	; 0x01
    b994:	aa 83       	std	Y+2, r26	; 0x02
    b996:	bb 83       	std	Y+3, r27	; 0x03
		e->shared.gravity = GRAVITY;
    b998:	8f ef       	ldi	r24, 0xFF	; 255
    b99a:	8e 87       	std	Y+14, r24	; 0x0e
		e->shared.vx = SPIDER_SIDE_SPEED;
    b99c:	8c e3       	ldi	r24, 0x3C	; 60
    b99e:	90 e0       	ldi	r25, 0x00	; 0
    b9a0:	9d 87       	std	Y+13, r25	; 0x0d
    b9a2:	8c 87       	std	Y+12, r24	; 0x0c
		if (e->direction == D_LEFT)
    b9a4:	89 89       	ldd	r24, Y+17	; 0x11
    b9a6:	81 11       	cpse	r24, r1
    b9a8:	04 c0       	rjmp	.+8      	; 0xb9b2 <update_spider_enemy+0x48>
		{
			e->shared.vx = -SPIDER_SIDE_SPEED;
    b9aa:	84 ec       	ldi	r24, 0xC4	; 196
    b9ac:	9f ef       	ldi	r25, 0xFF	; 255
    b9ae:	9d 87       	std	Y+13, r25	; 0x0d
    b9b0:	8c 87       	std	Y+12, r24	; 0x0c
		}
		LBMapSprite(slot, map_enemy_spider_1, 0);
    b9b2:	40 e0       	ldi	r20, 0x00	; 0
    b9b4:	6e e5       	ldi	r22, 0x5E	; 94
    b9b6:	7d e2       	ldi	r23, 0x2D	; 45
    b9b8:	1a c0       	rjmp	.+52     	; 0xb9ee <update_spider_enemy+0x84>
	}
	else if (e->flags & JUMPING && e->shared.gravity == 0)
    b9ba:	90 ff       	sbrs	r25, 0
    b9bc:	10 c0       	rjmp	.+32     	; 0xb9de <update_spider_enemy+0x74>
    b9be:	9e 85       	ldd	r25, Y+14	; 0x0e
    b9c0:	91 11       	cpse	r25, r1
    b9c2:	0d c0       	rjmp	.+26     	; 0xb9de <update_spider_enemy+0x74>
	{
		e->flags = IDLE;
    b9c4:	88 e0       	ldi	r24, 0x08	; 8
    b9c6:	88 8b       	std	Y+16, r24	; 0x10
		e->shared.vx = 0;
    b9c8:	1d 86       	std	Y+13, r1	; 0x0d
    b9ca:	1c 86       	std	Y+12, r1	; 0x0c
		e->frame_count = 0;
    b9cc:	1d 8a       	std	Y+21, r1	; 0x15
		if (e->direction == D_LEFT)
    b9ce:	89 89       	ldd	r24, Y+17	; 0x11
    b9d0:	81 11       	cpse	r24, r1
    b9d2:	03 c0       	rjmp	.+6      	; 0xb9da <update_spider_enemy+0x70>
		{
			e->direction = D_RIGHT;
    b9d4:	81 e0       	ldi	r24, 0x01	; 1
    b9d6:	89 8b       	std	Y+17, r24	; 0x11
    b9d8:	0d c0       	rjmp	.+26     	; 0xb9f4 <update_spider_enemy+0x8a>
		}
		else
		{
			e->direction = D_LEFT;
    b9da:	19 8a       	std	Y+17, r1	; 0x11
    b9dc:	0b c0       	rjmp	.+22     	; 0xb9f4 <update_spider_enemy+0x8a>
		}
	}
	else if (e->flags & IDLE)
    b9de:	88 23       	and	r24, r24
    b9e0:	49 f0       	breq	.+18     	; 0xb9f4 <update_spider_enemy+0x8a>
	{
		LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    b9e2:	ce 01       	movw	r24, r28
    b9e4:	c2 96       	adiw	r24, 0x32	; 50
    b9e6:	0e 94 62 4d 	call	0x9ac4	; 0x9ac4 <LBGetNextFrame>
    b9ea:	40 e0       	ldi	r20, 0x00	; 0
    b9ec:	bc 01       	movw	r22, r24
    b9ee:	81 2f       	mov	r24, r17
    b9f0:	0e 94 c4 4e 	call	0x9d88	; 0x9d88 <LBMapSprite>
	}
	e->frame_count++;
    b9f4:	8d 89       	ldd	r24, Y+21	; 0x15
    b9f6:	8f 5f       	subi	r24, 0xFF	; 255
    b9f8:	8d 8b       	std	Y+21, r24	; 0x15
}
    b9fa:	df 91       	pop	r29
    b9fc:	cf 91       	pop	r28
    b9fe:	1f 91       	pop	r17
    ba00:	08 95       	ret

0000ba02 <update_shark_enemy>:

void update_shark_enemy(Enemy* e, u8 slot)
{
    ba02:	cf 93       	push	r28
    ba04:	fc 01       	movw	r30, r24
    ba06:	c6 2f       	mov	r28, r22
	e->shared.vx = SHARK_SPEED;
    ba08:	84 e1       	ldi	r24, 0x14	; 20
    ba0a:	90 e0       	ldi	r25, 0x00	; 0
    ba0c:	95 87       	std	Z+13, r25	; 0x0d
    ba0e:	84 87       	std	Z+12, r24	; 0x0c
	e->shared.vy = 0;
    ba10:	10 82       	st	Z, r1
    ba12:	11 82       	std	Z+1, r1	; 0x01
    ba14:	12 82       	std	Z+2, r1	; 0x02
    ba16:	13 82       	std	Z+3, r1	; 0x03
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    ba18:	cf 01       	movw	r24, r30
    ba1a:	c2 96       	adiw	r24, 0x32	; 50
    ba1c:	0e 94 62 4d 	call	0x9ac4	; 0x9ac4 <LBGetNextFrame>
    ba20:	40 e0       	ldi	r20, 0x00	; 0
    ba22:	bc 01       	movw	r22, r24
    ba24:	8c 2f       	mov	r24, r28
}
    ba26:	cf 91       	pop	r28

void update_shark_enemy(Enemy* e, u8 slot)
{
	e->shared.vx = SHARK_SPEED;
	e->shared.vy = 0;
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    ba28:	0c 94 c4 4e 	jmp	0x9d88	; 0x9d88 <LBMapSprite>

0000ba2c <update_basic_shot>:
}

void update_basic_shot(Shot* s, u8 slot)
{
    ba2c:	cf 93       	push	r28
    ba2e:	c6 2f       	mov	r28, r22
	LBMapSprite(slot, LBGetNextFrame(&s->anim), 0);
    ba30:	42 96       	adiw	r24, 0x12	; 18
    ba32:	0e 94 62 4d 	call	0x9ac4	; 0x9ac4 <LBGetNextFrame>
    ba36:	40 e0       	ldi	r20, 0x00	; 0
    ba38:	bc 01       	movw	r22, r24
    ba3a:	8c 2f       	mov	r24, r28
}
    ba3c:	cf 91       	pop	r28
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
}

void update_basic_shot(Shot* s, u8 slot)
{
	LBMapSprite(slot, LBGetNextFrame(&s->anim), 0);
    ba3e:	0c 94 c4 4e 	jmp	0x9d88	; 0x9d88 <LBMapSprite>

0000ba42 <update_enemies>:
}

void update_enemies()
{
    ba42:	ef 92       	push	r14
    ba44:	ff 92       	push	r15
    ba46:	0f 93       	push	r16
    ba48:	1f 93       	push	r17
    ba4a:	cf 93       	push	r28
    ba4c:	df 93       	push	r29
    ba4e:	c5 e6       	ldi	r28, 0x65	; 101
    ba50:	de e0       	ldi	r29, 0x0E	; 14
	u8 slot = ENEMY_SLOT;
    ba52:	16 e0       	ldi	r17, 0x06	; 6
    ba54:	ce 01       	movw	r24, r28
    ba56:	03 97       	sbiw	r24, 0x03	; 3
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].flags & EXPLODING)
    ba58:	fc 01       	movw	r30, r24
    ba5a:	20 81       	ld	r18, Z
    ba5c:	ae 01       	movw	r20, r28
    ba5e:	41 50       	subi	r20, 0x01	; 1
    ba60:	51 09       	sbc	r21, r1
    ba62:	7a 01       	movw	r14, r20
    ba64:	24 ff       	sbrs	r18, 4
    ba66:	0a c0       	rjmp	.+20     	; 0xba7c <update_enemies+0x3a>
		{
			map_explosion(&game.enemies[i].flags, &game.enemies[i].expl, slot, game.enemies[i].width, game.enemies[i].height);
    ba68:	08 81       	ld	r16, Y
    ba6a:	fa 01       	movw	r30, r20
    ba6c:	20 81       	ld	r18, Z
    ba6e:	41 2f       	mov	r20, r17
    ba70:	be 01       	movw	r22, r28
    ba72:	69 5d       	subi	r22, 0xD9	; 217
    ba74:	7f 4f       	sbci	r23, 0xFF	; 255
    ba76:	0e 94 80 5b 	call	0xb700	; 0xb700 <map_explosion>
    ba7a:	15 c0       	rjmp	.+42     	; 0xbaa6 <update_enemies+0x64>
    ba7c:	fe 01       	movw	r30, r28
    ba7e:	34 97       	sbiw	r30, 0x04	; 4
		}
		else if (game.enemies[i].active)
    ba80:	80 81       	ld	r24, Z
    ba82:	88 23       	and	r24, r24
    ba84:	81 f0       	breq	.+32     	; 0xbaa6 <update_enemies+0x64>
		{
			switch (game.enemies[i].enemy_type)
    ba86:	89 81       	ldd	r24, Y+1	; 0x01
    ba88:	88 23       	and	r24, r24
    ba8a:	41 f0       	breq	.+16     	; 0xba9c <update_enemies+0x5a>
    ba8c:	81 30       	cpi	r24, 0x01	; 1
    ba8e:	59 f4       	brne	.+22     	; 0xbaa6 <update_enemies+0x64>
			{
				case ENEMY_SPIDER: update_spider_enemy(&game.enemies[i], slot); break;
				case ENEMY_SHARK: update_shark_enemy(&game.enemies[i], slot); break;
    ba90:	61 2f       	mov	r22, r17
    ba92:	ce 01       	movw	r24, r28
    ba94:	43 97       	sbiw	r24, 0x13	; 19
    ba96:	0e 94 01 5d 	call	0xba02	; 0xba02 <update_shark_enemy>
    ba9a:	05 c0       	rjmp	.+10     	; 0xbaa6 <update_enemies+0x64>
		}
		else if (game.enemies[i].active)
		{
			switch (game.enemies[i].enemy_type)
			{
				case ENEMY_SPIDER: update_spider_enemy(&game.enemies[i], slot); break;
    ba9c:	61 2f       	mov	r22, r17
    ba9e:	ce 01       	movw	r24, r28
    baa0:	43 97       	sbiw	r24, 0x13	; 19
    baa2:	0e 94 b5 5c 	call	0xb96a	; 0xb96a <update_spider_enemy>
				case ENEMY_SHARK: update_shark_enemy(&game.enemies[i], slot); break;
			}
		}
		slot += game.enemies[i].width * game.enemies[i].height;
    baa6:	f7 01       	movw	r30, r14
    baa8:	90 81       	ld	r25, Z
    baaa:	88 81       	ld	r24, Y
    baac:	98 9f       	mul	r25, r24
    baae:	10 0d       	add	r17, r0
    bab0:	11 24       	eor	r1, r1
    bab2:	ce 5b       	subi	r28, 0xBE	; 190
    bab4:	df 4f       	sbci	r29, 0xFF	; 255

void update_enemies()
{
	u8 slot = ENEMY_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    bab6:	ff e0       	ldi	r31, 0x0F	; 15
    bab8:	cf 3a       	cpi	r28, 0xAF	; 175
    baba:	df 07       	cpc	r29, r31
    babc:	59 f6       	brne	.-106    	; 0xba54 <update_enemies+0x12>
				case ENEMY_SHARK: update_shark_enemy(&game.enemies[i], slot); break;
			}
		}
		slot += game.enemies[i].width * game.enemies[i].height;
	}
}
    babe:	df 91       	pop	r29
    bac0:	cf 91       	pop	r28
    bac2:	1f 91       	pop	r17
    bac4:	0f 91       	pop	r16
    bac6:	ff 90       	pop	r15
    bac8:	ef 90       	pop	r14
    baca:	08 95       	ret

0000bacc <update_enemy_shots>:

void update_enemy_shots()
{
    bacc:	8f 92       	push	r8
    bace:	9f 92       	push	r9
    bad0:	af 92       	push	r10
    bad2:	bf 92       	push	r11
    bad4:	cf 92       	push	r12
    bad6:	df 92       	push	r13
    bad8:	ef 92       	push	r14
    bada:	ff 92       	push	r15
    badc:	0f 93       	push	r16
    bade:	1f 93       	push	r17
    bae0:	cf 93       	push	r28
    bae2:	df 93       	push	r29
    bae4:	00 d0       	rcall	.+0      	; 0xbae6 <update_enemy_shots+0x1a>
    bae6:	00 d0       	rcall	.+0      	; 0xbae8 <update_enemy_shots+0x1c>
    bae8:	cd b7       	in	r28, 0x3d	; 61
    baea:	de b7       	in	r29, 0x3e	; 62
    baec:	28 e6       	ldi	r18, 0x68	; 104
    baee:	82 2e       	mov	r8, r18
    baf0:	2e e0       	ldi	r18, 0x0E	; 14
    baf2:	92 2e       	mov	r9, r18
    baf4:	0b e7       	ldi	r16, 0x7B	; 123
    baf6:	1e e0       	ldi	r17, 0x0E	; 14
    baf8:	3f e0       	ldi	r19, 0x0F	; 15
    bafa:	b3 2e       	mov	r11, r19
					if (!game.enemies[i].shot[j].active)
					{
						game.enemies[i].shot[j].active = 1;
						game.enemies[i].shot[j].shared.x = game.enemies[i].shared.x;
						game.enemies[i].shot[j].shared.y = ((u16 ) game.enemies[i].shared.y / 8) * 8;
						game.enemies[i].shot[j].shared.vx = ENEMY_SHOT_SPEED;
    bafc:	44 e6       	ldi	r20, 0x64	; 100
    bafe:	e4 2e       	mov	r14, r20
    bb00:	f1 2c       	mov	r15, r1
						if (game.player.shared.x <= game.enemies[i].shared.x)
						{
							game.enemies[i].shot[j].shared.vx = -ENEMY_SHOT_SPEED;
    bb02:	5c e9       	ldi	r21, 0x9C	; 156
    bb04:	c5 2e       	mov	r12, r21
    bb06:	dd 24       	eor	r13, r13
    bb08:	da 94       	dec	r13
    bb0a:	aa 24       	eor	r10, r10
    bb0c:	aa 94       	dec	r10
    bb0e:	ab 0c       	add	r10, r11
    bb10:	f4 01       	movw	r30, r8
    bb12:	37 97       	sbiw	r30, 0x07	; 7
{
	u8 slot = ENEMY_SHOT_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].active && game.enemies[i].shot_frame_count >= ENEMY_SHOT_DELAY_FRAMES)
    bb14:	80 81       	ld	r24, Z
    bb16:	88 23       	and	r24, r24
    bb18:	09 f4       	brne	.+2      	; 0xbb1c <update_enemy_shots+0x50>
    bb1a:	58 c0       	rjmp	.+176    	; 0xbbcc <update_enemy_shots+0x100>
    bb1c:	f4 01       	movw	r30, r8
    bb1e:	80 81       	ld	r24, Z
    bb20:	8c 33       	cpi	r24, 0x3C	; 60
    bb22:	08 f4       	brcc	.+2      	; 0xbb26 <update_enemy_shots+0x5a>
    bb24:	50 c0       	rjmp	.+160    	; 0xbbc6 <update_enemy_shots+0xfa>
		{
			game.enemies[i].shot_frame_count = 0;	
    bb26:	10 82       	st	Z, r1
    bb28:	f8 01       	movw	r30, r16
    bb2a:	32 97       	sbiw	r30, 0x02	; 2
			for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
			{
				if (game.enemies[i].shot[j].shot_type == BASIC_ENEMY_SHOT)
    bb2c:	80 81       	ld	r24, Z
    bb2e:	81 30       	cpi	r24, 0x01	; 1
    bb30:	09 f0       	breq	.+2      	; 0xbb34 <update_enemy_shots+0x68>
    bb32:	4c c0       	rjmp	.+152    	; 0xbbcc <update_enemy_shots+0x100>
				{
					if (!game.enemies[i].shot[j].active)
    bb34:	f8 01       	movw	r30, r16
    bb36:	90 81       	ld	r25, Z
    bb38:	91 11       	cpse	r25, r1
    bb3a:	3f c0       	rjmp	.+126    	; 0xbbba <update_enemy_shots+0xee>
					{
						game.enemies[i].shot[j].active = 1;
    bb3c:	80 83       	st	Z, r24
    bb3e:	f4 01       	movw	r30, r8
    bb40:	72 97       	sbiw	r30, 0x12	; 18
						game.enemies[i].shot[j].shared.x = game.enemies[i].shared.x;
    bb42:	20 81       	ld	r18, Z
    bb44:	31 81       	ldd	r19, Z+1	; 0x01
    bb46:	42 81       	ldd	r20, Z+2	; 0x02
    bb48:	53 81       	ldd	r21, Z+3	; 0x03
    bb4a:	f4 01       	movw	r30, r8
    bb4c:	26 83       	std	Z+6, r18	; 0x06
    bb4e:	37 83       	std	Z+7, r19	; 0x07
    bb50:	40 87       	std	Z+8, r20	; 0x08
    bb52:	51 87       	std	Z+9, r21	; 0x09
    bb54:	3e 97       	sbiw	r30, 0x0e	; 14
						game.enemies[i].shot[j].shared.y = ((u16 ) game.enemies[i].shared.y / 8) * 8;
    bb56:	60 81       	ld	r22, Z
    bb58:	71 81       	ldd	r23, Z+1	; 0x01
    bb5a:	82 81       	ldd	r24, Z+2	; 0x02
    bb5c:	93 81       	ldd	r25, Z+3	; 0x03
    bb5e:	29 83       	std	Y+1, r18	; 0x01
    bb60:	3a 83       	std	Y+2, r19	; 0x02
    bb62:	4b 83       	std	Y+3, r20	; 0x03
    bb64:	5c 83       	std	Y+4, r21	; 0x04
    bb66:	0e 94 f0 6c 	call	0xd9e0	; 0xd9e0 <__fixunssfsi>
    bb6a:	83 e0       	ldi	r24, 0x03	; 3
    bb6c:	76 95       	lsr	r23
    bb6e:	67 95       	ror	r22
    bb70:	8a 95       	dec	r24
    bb72:	e1 f7       	brne	.-8      	; 0xbb6c <update_enemy_shots+0xa0>
    bb74:	93 e0       	ldi	r25, 0x03	; 3
    bb76:	66 0f       	add	r22, r22
    bb78:	77 1f       	adc	r23, r23
    bb7a:	9a 95       	dec	r25
    bb7c:	e1 f7       	brne	.-8      	; 0xbb76 <update_enemy_shots+0xaa>
    bb7e:	80 e0       	ldi	r24, 0x00	; 0
    bb80:	90 e0       	ldi	r25, 0x00	; 0
    bb82:	0e 94 1c 6d 	call	0xda38	; 0xda38 <__floatunsisf>
    bb86:	f4 01       	movw	r30, r8
    bb88:	62 87       	std	Z+10, r22	; 0x0a
    bb8a:	73 87       	std	Z+11, r23	; 0x0b
    bb8c:	84 87       	std	Z+12, r24	; 0x0c
    bb8e:	95 87       	std	Z+13, r25	; 0x0d
						game.enemies[i].shot[j].shared.vx = ENEMY_SHOT_SPEED;
    bb90:	f7 86       	std	Z+15, r15	; 0x0f
    bb92:	e6 86       	std	Z+14, r14	; 0x0e
						if (game.player.shared.x <= game.enemies[i].shared.x)
    bb94:	29 81       	ldd	r18, Y+1	; 0x01
    bb96:	3a 81       	ldd	r19, Y+2	; 0x02
    bb98:	4b 81       	ldd	r20, Y+3	; 0x03
    bb9a:	5c 81       	ldd	r21, Y+4	; 0x04
    bb9c:	60 91 ca 0d 	lds	r22, 0x0DCA
    bba0:	70 91 cb 0d 	lds	r23, 0x0DCB
    bba4:	80 91 cc 0d 	lds	r24, 0x0DCC
    bba8:	90 91 cd 0d 	lds	r25, 0x0DCD
    bbac:	0e 94 ec 6c 	call	0xd9d8	; 0xd9d8 <__cmpsf2>
    bbb0:	18 16       	cp	r1, r24
    bbb2:	1c f0       	brlt	.+6      	; 0xbbba <update_enemy_shots+0xee>
						{
							game.enemies[i].shot[j].shared.vx = -ENEMY_SHOT_SPEED;
    bbb4:	f4 01       	movw	r30, r8
    bbb6:	d7 86       	std	Z+15, r13	; 0x0f
    bbb8:	c6 86       	std	Z+14, r12	; 0x0e
						}
					}
					update_basic_shot(&game.enemies[i].shot[j], slot);
    bbba:	6a 2d       	mov	r22, r10
    bbbc:	c4 01       	movw	r24, r8
    bbbe:	02 96       	adiw	r24, 0x02	; 2
    bbc0:	0e 94 16 5d 	call	0xba2c	; 0xba2c <update_basic_shot>
    bbc4:	03 c0       	rjmp	.+6      	; 0xbbcc <update_enemy_shots+0x100>
				slot += 1;
			}
		}
		else if (game.enemies[i].active)
		{
			game.enemies[i].shot_frame_count++;
    bbc6:	8f 5f       	subi	r24, 0xFF	; 255
    bbc8:	f4 01       	movw	r30, r8
    bbca:	80 83       	st	Z, r24
    bbcc:	b3 94       	inc	r11
    bbce:	f2 e4       	ldi	r31, 0x42	; 66
    bbd0:	8f 0e       	add	r8, r31
    bbd2:	91 1c       	adc	r9, r1
    bbd4:	0e 5b       	subi	r16, 0xBE	; 190
    bbd6:	1f 4f       	sbci	r17, 0xFF	; 255

void update_enemy_shots()
{
	u8 slot = ENEMY_SHOT_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    bbd8:	84 e1       	ldi	r24, 0x14	; 20
    bbda:	b8 12       	cpse	r11, r24
    bbdc:	96 cf       	rjmp	.-212    	; 0xbb0a <update_enemy_shots+0x3e>
		else
		{
			slot += MAX_ENEMY_SHOTS;
		}
	}
}
    bbde:	0f 90       	pop	r0
    bbe0:	0f 90       	pop	r0
    bbe2:	0f 90       	pop	r0
    bbe4:	0f 90       	pop	r0
    bbe6:	df 91       	pop	r29
    bbe8:	cf 91       	pop	r28
    bbea:	1f 91       	pop	r17
    bbec:	0f 91       	pop	r16
    bbee:	ff 90       	pop	r15
    bbf0:	ef 90       	pop	r14
    bbf2:	df 90       	pop	r13
    bbf4:	cf 90       	pop	r12
    bbf6:	bf 90       	pop	r11
    bbf8:	af 90       	pop	r10
    bbfa:	9f 90       	pop	r9
    bbfc:	8f 90       	pop	r8
    bbfe:	08 95       	ret

0000bc00 <animate_enemies>:

void animate_enemies()
{
    bc00:	2f 92       	push	r2
    bc02:	3f 92       	push	r3
    bc04:	4f 92       	push	r4
    bc06:	5f 92       	push	r5
    bc08:	6f 92       	push	r6
    bc0a:	7f 92       	push	r7
    bc0c:	8f 92       	push	r8
    bc0e:	9f 92       	push	r9
    bc10:	af 92       	push	r10
    bc12:	bf 92       	push	r11
    bc14:	cf 92       	push	r12
    bc16:	df 92       	push	r13
    bc18:	ef 92       	push	r14
    bc1a:	ff 92       	push	r15
    bc1c:	0f 93       	push	r16
    bc1e:	1f 93       	push	r17
    bc20:	cf 93       	push	r28
    bc22:	df 93       	push	r29
    bc24:	cd b7       	in	r28, 0x3d	; 61
    bc26:	de b7       	in	r29, 0x3e	; 62
    bc28:	2c 97       	sbiw	r28, 0x0c	; 12
    bc2a:	0f b6       	in	r0, 0x3f	; 63
    bc2c:	f8 94       	cli
    bc2e:	de bf       	out	0x3e, r29	; 62
    bc30:	0f be       	out	0x3f, r0	; 63
    bc32:	cd bf       	out	0x3d, r28	; 61
    bc34:	44 e6       	ldi	r20, 0x64	; 100
    bc36:	24 2e       	mov	r2, r20
    bc38:	4e e0       	ldi	r20, 0x0E	; 14
    bc3a:	34 2e       	mov	r3, r20
    bc3c:	85 e6       	ldi	r24, 0x65	; 101
    bc3e:	9e e0       	ldi	r25, 0x0E	; 14
    bc40:	9c 87       	std	Y+12, r25	; 0x0c
    bc42:	8b 87       	std	Y+11, r24	; 0x0b
    bc44:	52 e5       	ldi	r21, 0x52	; 82
    bc46:	85 2e       	mov	r8, r21
    bc48:	5e e0       	ldi	r21, 0x0E	; 14
    bc4a:	95 2e       	mov	r9, r21
	u8 slot = ENEMY_SLOT;
    bc4c:	66 e0       	ldi	r22, 0x06	; 6
    bc4e:	b6 2e       	mov	r11, r22
    bc50:	eb 85       	ldd	r30, Y+11	; 0x0b
    bc52:	fc 85       	ldd	r31, Y+12	; 0x0c
    bc54:	34 97       	sbiw	r30, 0x04	; 4
    bc56:	fa 83       	std	Y+2, r31	; 0x02
    bc58:	e9 83       	std	Y+1, r30	; 0x01
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].active && !(game.enemies[i].flags & EXPLODING))
    bc5a:	80 81       	ld	r24, Z
    bc5c:	eb 85       	ldd	r30, Y+11	; 0x0b
    bc5e:	fc 85       	ldd	r31, Y+12	; 0x0c
    bc60:	33 97       	sbiw	r30, 0x03	; 3
    bc62:	88 23       	and	r24, r24
    bc64:	09 f4       	brne	.+2      	; 0xbc68 <animate_enemies+0x68>
    bc66:	a9 c0       	rjmp	.+338    	; 0xbdba <animate_enemies+0x1ba>
    bc68:	80 81       	ld	r24, Z
    bc6a:	84 fd       	sbrc	r24, 4
    bc6c:	a6 c0       	rjmp	.+332    	; 0xbdba <animate_enemies+0x1ba>
		{
			if (game.enemies[i].shared.x < game.camera_x || game.enemies[i].shared.y < game.camera_y || game.enemies[i].shared.y > game.camera_y + CAMERA_HEIGHT*8)
    bc6e:	f4 01       	movw	r30, r8
    bc70:	44 80       	ldd	r4, Z+4	; 0x04
    bc72:	55 80       	ldd	r5, Z+5	; 0x05
    bc74:	66 80       	ldd	r6, Z+6	; 0x06
    bc76:	77 80       	ldd	r7, Z+7	; 0x07
    bc78:	60 91 aa 0d 	lds	r22, 0x0DAA
    bc7c:	70 91 ab 0d 	lds	r23, 0x0DAB
    bc80:	80 e0       	ldi	r24, 0x00	; 0
    bc82:	90 e0       	ldi	r25, 0x00	; 0
    bc84:	0e 94 1c 6d 	call	0xda38	; 0xda38 <__floatunsisf>
    bc88:	9b 01       	movw	r18, r22
    bc8a:	ac 01       	movw	r20, r24
    bc8c:	c3 01       	movw	r24, r6
    bc8e:	b2 01       	movw	r22, r4
    bc90:	0e 94 ec 6c 	call	0xd9d8	; 0xd9d8 <__cmpsf2>
    bc94:	87 fd       	sbrc	r24, 7
    bc96:	25 c0       	rjmp	.+74     	; 0xbce2 <animate_enemies+0xe2>
    bc98:	f4 01       	movw	r30, r8
    bc9a:	c0 84       	ldd	r12, Z+8	; 0x08
    bc9c:	d1 84       	ldd	r13, Z+9	; 0x09
    bc9e:	e2 84       	ldd	r14, Z+10	; 0x0a
    bca0:	f3 84       	ldd	r15, Z+11	; 0x0b
    bca2:	00 91 ac 0d 	lds	r16, 0x0DAC
    bca6:	10 91 ad 0d 	lds	r17, 0x0DAD
    bcaa:	b8 01       	movw	r22, r16
    bcac:	80 e0       	ldi	r24, 0x00	; 0
    bcae:	90 e0       	ldi	r25, 0x00	; 0
    bcb0:	0e 94 1c 6d 	call	0xda38	; 0xda38 <__floatunsisf>
    bcb4:	9b 01       	movw	r18, r22
    bcb6:	ac 01       	movw	r20, r24
    bcb8:	c7 01       	movw	r24, r14
    bcba:	b6 01       	movw	r22, r12
    bcbc:	0e 94 ec 6c 	call	0xd9d8	; 0xd9d8 <__cmpsf2>
    bcc0:	87 fd       	sbrc	r24, 7
    bcc2:	0f c0       	rjmp	.+30     	; 0xbce2 <animate_enemies+0xe2>
    bcc4:	b8 01       	movw	r22, r16
    bcc6:	68 53       	subi	r22, 0x38	; 56
    bcc8:	7f 4f       	sbci	r23, 0xFF	; 255
    bcca:	80 e0       	ldi	r24, 0x00	; 0
    bccc:	90 e0       	ldi	r25, 0x00	; 0
    bcce:	0e 94 1c 6d 	call	0xda38	; 0xda38 <__floatunsisf>
    bcd2:	9b 01       	movw	r18, r22
    bcd4:	ac 01       	movw	r20, r24
    bcd6:	c7 01       	movw	r24, r14
    bcd8:	b6 01       	movw	r22, r12
    bcda:	0e 94 ce 6d 	call	0xdb9c	; 0xdb9c <__gesf2>
    bcde:	18 16       	cp	r1, r24
    bce0:	84 f4       	brge	.+32     	; 0xbd02 <animate_enemies+0x102>
			{
				game.enemies[i].active = 0;
    bce2:	e9 81       	ldd	r30, Y+1	; 0x01
    bce4:	fa 81       	ldd	r31, Y+2	; 0x02
    bce6:	10 82       	st	Z, r1
				game.active_enemies--;
    bce8:	80 91 c3 0d 	lds	r24, 0x0DC3
    bcec:	81 50       	subi	r24, 0x01	; 1
    bcee:	80 93 c3 0d 	sts	0x0DC3, r24
				LBMoveSprite(slot, OFF_SCREEN, 0, game.enemies[i].width, game.enemies[i].height);
    bcf2:	eb 85       	ldd	r30, Y+11	; 0x0b
    bcf4:	fc 85       	ldd	r31, Y+12	; 0x0c
    bcf6:	00 81       	ld	r16, Z
    bcf8:	f1 01       	movw	r30, r2
    bcfa:	20 81       	ld	r18, Z
    bcfc:	40 e0       	ldi	r20, 0x00	; 0
    bcfe:	60 ee       	ldi	r22, 0xE0	; 224
    bd00:	8c c0       	rjmp	.+280    	; 0xbe1a <animate_enemies+0x21a>
			}
			else if (LBCollides(game.player.shared.x,game.player.shared.y, game.player.width*8, game.player.height*8,
    bd02:	c7 01       	movw	r24, r14
    bd04:	b6 01       	movw	r22, r12
    bd06:	0e 94 f0 6c 	call	0xd9e0	; 0xd9e0 <__fixunssfsi>
    bd0a:	69 83       	std	Y+1, r22	; 0x01
    bd0c:	7a 83       	std	Y+2, r23	; 0x02
    bd0e:	8b 83       	std	Y+3, r24	; 0x03
    bd10:	9c 83       	std	Y+4, r25	; 0x04
    bd12:	c3 01       	movw	r24, r6
    bd14:	b2 01       	movw	r22, r4
    bd16:	0e 94 f0 6c 	call	0xd9e0	; 0xd9e0 <__fixunssfsi>
    bd1a:	6d 83       	std	Y+5, r22	; 0x05
    bd1c:	7e 83       	std	Y+6, r23	; 0x06
    bd1e:	8f 83       	std	Y+7, r24	; 0x07
    bd20:	98 87       	std	Y+8, r25	; 0x08
    bd22:	20 91 da 0d 	lds	r18, 0x0DDA
    bd26:	22 0f       	add	r18, r18
    bd28:	22 0f       	add	r18, r18
    bd2a:	22 0f       	add	r18, r18
    bd2c:	40 91 d9 0d 	lds	r20, 0x0DD9
    bd30:	44 0f       	add	r20, r20
    bd32:	44 0f       	add	r20, r20
    bd34:	44 0f       	add	r20, r20
    bd36:	60 91 ce 0d 	lds	r22, 0x0DCE
    bd3a:	70 91 cf 0d 	lds	r23, 0x0DCF
    bd3e:	80 91 d0 0d 	lds	r24, 0x0DD0
    bd42:	90 91 d1 0d 	lds	r25, 0x0DD1
    bd46:	29 87       	std	Y+9, r18	; 0x09
    bd48:	4a 87       	std	Y+10, r20	; 0x0a
    bd4a:	0e 94 f0 6c 	call	0xd9e0	; 0xd9e0 <__fixunssfsi>
    bd4e:	2b 01       	movw	r4, r22
    bd50:	3c 01       	movw	r6, r24
    bd52:	60 91 ca 0d 	lds	r22, 0x0DCA
    bd56:	70 91 cb 0d 	lds	r23, 0x0DCB
    bd5a:	80 91 cc 0d 	lds	r24, 0x0DCC
    bd5e:	90 91 cd 0d 	lds	r25, 0x0DCD
    bd62:	0e 94 f0 6c 	call	0xd9e0	; 0xd9e0 <__fixunssfsi>
    bd66:	dc 01       	movw	r26, r24
    bd68:	cb 01       	movw	r24, r22
    bd6a:	28 e0       	ldi	r18, 0x08	; 8
    bd6c:	a2 2e       	mov	r10, r18
    bd6e:	38 e0       	ldi	r19, 0x08	; 8
    bd70:	c3 2e       	mov	r12, r19
    bd72:	e9 80       	ldd	r14, Y+1	; 0x01
    bd74:	fa 80       	ldd	r15, Y+2	; 0x02
    bd76:	0d 81       	ldd	r16, Y+5	; 0x05
    bd78:	1e 81       	ldd	r17, Y+6	; 0x06
    bd7a:	29 85       	ldd	r18, Y+9	; 0x09
    bd7c:	4a 85       	ldd	r20, Y+10	; 0x0a
    bd7e:	b2 01       	movw	r22, r4
    bd80:	0e 94 79 4e 	call	0x9cf2	; 0x9cf2 <LBCollides>
    bd84:	88 23       	and	r24, r24
    bd86:	79 f0       	breq	.+30     	; 0xbda6 <animate_enemies+0x1a6>
							game.enemies[i].shared.x, game.enemies[i].shared.y, 8, 8
						) && !(game.player.flags & EXPLODING) && !GODMODE
    bd88:	80 91 d6 0d 	lds	r24, 0x0DD6
    bd8c:	84 fd       	sbrc	r24, 4
    bd8e:	0b c0       	rjmp	.+22     	; 0xbda6 <animate_enemies+0x1a6>
			)
			{
				SFX_PLAYER_EXPLODE;
    bd90:	41 e0       	ldi	r20, 0x01	; 1
    bd92:	6f ef       	ldi	r22, 0xFF	; 255
    bd94:	85 e0       	ldi	r24, 0x05	; 5
    bd96:	0e 94 f0 41 	call	0x83e0	; 0x83e0 <TriggerFx>
				game.player.shield = 0;
    bd9a:	10 92 db 0d 	sts	0x0DDB, r1
				game.player.flags = EXPLODING;
    bd9e:	80 e1       	ldi	r24, 0x10	; 16
    bda0:	80 93 d6 0d 	sts	0x0DD6, r24
				return;
    bda4:	57 c0       	rjmp	.+174    	; 0xbe54 <animate_enemies+0x254>
			}
			else
			{
				animate_sprite(&game.enemies[i].shared, slot, game.enemies[i].width, game.enemies[i].height);
    bda6:	eb 85       	ldd	r30, Y+11	; 0x0b
    bda8:	fc 85       	ldd	r31, Y+12	; 0x0c
    bdaa:	20 81       	ld	r18, Z
    bdac:	f1 01       	movw	r30, r2
    bdae:	40 81       	ld	r20, Z
    bdb0:	6b 2d       	mov	r22, r11
    bdb2:	c4 01       	movw	r24, r8
    bdb4:	0e 94 cb 5b 	call	0xb796	; 0xb796 <animate_sprite>
    bdb8:	33 c0       	rjmp	.+102    	; 0xbe20 <animate_enemies+0x220>
			}
		}
		else if (game.enemies[i].flags & EXPLODING)
    bdba:	80 81       	ld	r24, Z
    bdbc:	84 ff       	sbrs	r24, 4
    bdbe:	30 c0       	rjmp	.+96     	; 0xbe20 <animate_enemies+0x220>
		{
			LBMoveSprite(slot, game.enemies[i].shared.x - game.camera_x, game.enemies[i].shared.y - game.camera_y, game.enemies[i].width, game.enemies[i].height);
    bdc0:	60 91 ac 0d 	lds	r22, 0x0DAC
    bdc4:	70 91 ad 0d 	lds	r23, 0x0DAD
    bdc8:	80 e0       	ldi	r24, 0x00	; 0
    bdca:	90 e0       	ldi	r25, 0x00	; 0
    bdcc:	0e 94 1c 6d 	call	0xda38	; 0xda38 <__floatunsisf>
    bdd0:	9b 01       	movw	r18, r22
    bdd2:	ac 01       	movw	r20, r24
    bdd4:	f4 01       	movw	r30, r8
    bdd6:	60 85       	ldd	r22, Z+8	; 0x08
    bdd8:	71 85       	ldd	r23, Z+9	; 0x09
    bdda:	82 85       	ldd	r24, Z+10	; 0x0a
    bddc:	93 85       	ldd	r25, Z+11	; 0x0b
    bdde:	0e 94 87 6c 	call	0xd90e	; 0xd90e <__subsf3>
    bde2:	0e 94 f0 6c 	call	0xd9e0	; 0xd9e0 <__fixunssfsi>
    bde6:	16 2f       	mov	r17, r22
    bde8:	60 91 aa 0d 	lds	r22, 0x0DAA
    bdec:	70 91 ab 0d 	lds	r23, 0x0DAB
    bdf0:	80 e0       	ldi	r24, 0x00	; 0
    bdf2:	90 e0       	ldi	r25, 0x00	; 0
    bdf4:	0e 94 1c 6d 	call	0xda38	; 0xda38 <__floatunsisf>
    bdf8:	9b 01       	movw	r18, r22
    bdfa:	ac 01       	movw	r20, r24
    bdfc:	f4 01       	movw	r30, r8
    bdfe:	64 81       	ldd	r22, Z+4	; 0x04
    be00:	75 81       	ldd	r23, Z+5	; 0x05
    be02:	86 81       	ldd	r24, Z+6	; 0x06
    be04:	97 81       	ldd	r25, Z+7	; 0x07
    be06:	0e 94 87 6c 	call	0xd90e	; 0xd90e <__subsf3>
    be0a:	0e 94 f0 6c 	call	0xd9e0	; 0xd9e0 <__fixunssfsi>
    be0e:	eb 85       	ldd	r30, Y+11	; 0x0b
    be10:	fc 85       	ldd	r31, Y+12	; 0x0c
    be12:	00 81       	ld	r16, Z
    be14:	f1 01       	movw	r30, r2
    be16:	20 81       	ld	r18, Z
    be18:	41 2f       	mov	r20, r17
    be1a:	8b 2d       	mov	r24, r11
    be1c:	0e 94 16 4f 	call	0x9e2c	; 0x9e2c <LBMoveSprite>
		}
		slot +=  game.enemies[i].width * game.enemies[i].height;
    be20:	eb 85       	ldd	r30, Y+11	; 0x0b
    be22:	fc 85       	ldd	r31, Y+12	; 0x0c
    be24:	90 81       	ld	r25, Z
    be26:	f1 01       	movw	r30, r2
    be28:	80 81       	ld	r24, Z
    be2a:	98 9f       	mul	r25, r24
    be2c:	b0 0c       	add	r11, r0
    be2e:	11 24       	eor	r1, r1
    be30:	f2 e4       	ldi	r31, 0x42	; 66
    be32:	2f 0e       	add	r2, r31
    be34:	31 1c       	adc	r3, r1
    be36:	8b 85       	ldd	r24, Y+11	; 0x0b
    be38:	9c 85       	ldd	r25, Y+12	; 0x0c
    be3a:	8e 5b       	subi	r24, 0xBE	; 190
    be3c:	9f 4f       	sbci	r25, 0xFF	; 255
    be3e:	9c 87       	std	Y+12, r25	; 0x0c
    be40:	8b 87       	std	Y+11, r24	; 0x0b
    be42:	92 e4       	ldi	r25, 0x42	; 66
    be44:	89 0e       	add	r8, r25
    be46:	91 1c       	adc	r9, r1

void animate_enemies()
{
	u8 slot = ENEMY_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    be48:	eb 85       	ldd	r30, Y+11	; 0x0b
    be4a:	fc 85       	ldd	r31, Y+12	; 0x0c
    be4c:	ef 5a       	subi	r30, 0xAF	; 175
    be4e:	ff 40       	sbci	r31, 0x0F	; 15
    be50:	09 f0       	breq	.+2      	; 0xbe54 <animate_enemies+0x254>
    be52:	fe ce       	rjmp	.-516    	; 0xbc50 <animate_enemies+0x50>
		{
			LBMoveSprite(slot, game.enemies[i].shared.x - game.camera_x, game.enemies[i].shared.y - game.camera_y, game.enemies[i].width, game.enemies[i].height);
		}
		slot +=  game.enemies[i].width * game.enemies[i].height;
	}
}
    be54:	2c 96       	adiw	r28, 0x0c	; 12
    be56:	0f b6       	in	r0, 0x3f	; 63
    be58:	f8 94       	cli
    be5a:	de bf       	out	0x3e, r29	; 62
    be5c:	0f be       	out	0x3f, r0	; 63
    be5e:	cd bf       	out	0x3d, r28	; 61
    be60:	df 91       	pop	r29
    be62:	cf 91       	pop	r28
    be64:	1f 91       	pop	r17
    be66:	0f 91       	pop	r16
    be68:	ff 90       	pop	r15
    be6a:	ef 90       	pop	r14
    be6c:	df 90       	pop	r13
    be6e:	cf 90       	pop	r12
    be70:	bf 90       	pop	r11
    be72:	af 90       	pop	r10
    be74:	9f 90       	pop	r9
    be76:	8f 90       	pop	r8
    be78:	7f 90       	pop	r7
    be7a:	6f 90       	pop	r6
    be7c:	5f 90       	pop	r5
    be7e:	4f 90       	pop	r4
    be80:	3f 90       	pop	r3
    be82:	2f 90       	pop	r2
    be84:	08 95       	ret

0000be86 <animate_enemy_shots>:

void animate_enemy_shots()
{
    be86:	2f 92       	push	r2
    be88:	3f 92       	push	r3
    be8a:	4f 92       	push	r4
    be8c:	5f 92       	push	r5
    be8e:	6f 92       	push	r6
    be90:	7f 92       	push	r7
    be92:	8f 92       	push	r8
    be94:	9f 92       	push	r9
    be96:	af 92       	push	r10
    be98:	bf 92       	push	r11
    be9a:	cf 92       	push	r12
    be9c:	df 92       	push	r13
    be9e:	ef 92       	push	r14
    bea0:	ff 92       	push	r15
    bea2:	0f 93       	push	r16
    bea4:	1f 93       	push	r17
    bea6:	cf 93       	push	r28
    bea8:	df 93       	push	r29
    beaa:	cd b7       	in	r28, 0x3d	; 61
    beac:	de b7       	in	r29, 0x3e	; 62
    beae:	62 97       	sbiw	r28, 0x12	; 18
    beb0:	0f b6       	in	r0, 0x3f	; 63
    beb2:	f8 94       	cli
    beb4:	de bf       	out	0x3e, r29	; 62
    beb6:	0f be       	out	0x3f, r0	; 63
    beb8:	cd bf       	out	0x3d, r28	; 61
    beba:	4b e7       	ldi	r20, 0x7B	; 123
    bebc:	24 2e       	mov	r2, r20
    bebe:	4e e0       	ldi	r20, 0x0E	; 14
    bec0:	34 2e       	mov	r3, r20
    bec2:	5a e6       	ldi	r21, 0x6A	; 106
    bec4:	85 2e       	mov	r8, r21
    bec6:	5e e0       	ldi	r21, 0x0E	; 14
    bec8:	95 2e       	mov	r9, r21
	u8 slot = ENEMY_SHOT_SLOT;
    beca:	6e e0       	ldi	r22, 0x0E	; 14
    becc:	b6 2e       	mov	r11, r22
    bece:	f1 01       	movw	r30, r2
    bed0:	32 97       	sbiw	r30, 0x02	; 2
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
		{
			if (game.enemies[i].shot[j].shot_type == BASIC_ENEMY_SHOT)
    bed2:	80 81       	ld	r24, Z
    bed4:	81 30       	cpi	r24, 0x01	; 1
    bed6:	09 f0       	breq	.+2      	; 0xbeda <animate_enemy_shots+0x54>
    bed8:	f0 c0       	rjmp	.+480    	; 0xc0ba <animate_enemy_shots+0x234>
			{
				if (game.enemies[i].shot[j].active)
    beda:	d1 01       	movw	r26, r2
    bedc:	8c 91       	ld	r24, X
    bede:	88 23       	and	r24, r24
    bee0:	09 f4       	brne	.+2      	; 0xbee4 <animate_enemy_shots+0x5e>
    bee2:	eb c0       	rjmp	.+470    	; 0xc0ba <animate_enemy_shots+0x234>
				{
					if (game.enemies[i].shot[j].shared.x < game.camera_x || game.enemies[i].shot[j].shared.x > game.camera_x + CAMERA_WIDTH*8 ||
    bee4:	f4 01       	movw	r30, r8
    bee6:	c4 80       	ldd	r12, Z+4	; 0x04
    bee8:	d5 80       	ldd	r13, Z+5	; 0x05
    beea:	e6 80       	ldd	r14, Z+6	; 0x06
    beec:	f7 80       	ldd	r15, Z+7	; 0x07
    beee:	60 90 aa 0d 	lds	r6, 0x0DAA
    bef2:	70 90 ab 0d 	lds	r7, 0x0DAB
    bef6:	b3 01       	movw	r22, r6
    bef8:	80 e0       	ldi	r24, 0x00	; 0
    befa:	90 e0       	ldi	r25, 0x00	; 0
    befc:	0e 94 1c 6d 	call	0xda38	; 0xda38 <__floatunsisf>
    bf00:	9b 01       	movw	r18, r22
    bf02:	ac 01       	movw	r20, r24
    bf04:	c7 01       	movw	r24, r14
    bf06:	b6 01       	movw	r22, r12
    bf08:	0e 94 ec 6c 	call	0xd9d8	; 0xd9d8 <__cmpsf2>
    bf0c:	87 ff       	sbrs	r24, 7
    bf0e:	03 c0       	rjmp	.+6      	; 0xbf16 <animate_enemy_shots+0x90>
					   collision_detect_level(&game.enemies[i].shot[j].shared, 1, 1))
					{
						game.enemies[i].shot[j].active = 0;
    bf10:	d1 01       	movw	r26, r2
    bf12:	1c 92       	st	X, r1
    bf14:	86 c0       	rjmp	.+268    	; 0xc022 <animate_enemy_shots+0x19c>
		{
			if (game.enemies[i].shot[j].shot_type == BASIC_ENEMY_SHOT)
			{
				if (game.enemies[i].shot[j].active)
				{
					if (game.enemies[i].shot[j].shared.x < game.camera_x || game.enemies[i].shot[j].shared.x > game.camera_x + CAMERA_WIDTH*8 ||
    bf16:	b3 01       	movw	r22, r6
    bf18:	60 52       	subi	r22, 0x20	; 32
    bf1a:	7f 4f       	sbci	r23, 0xFF	; 255
    bf1c:	80 e0       	ldi	r24, 0x00	; 0
    bf1e:	90 e0       	ldi	r25, 0x00	; 0
    bf20:	0e 94 1c 6d 	call	0xda38	; 0xda38 <__floatunsisf>
    bf24:	9b 01       	movw	r18, r22
    bf26:	ac 01       	movw	r20, r24
    bf28:	c7 01       	movw	r24, r14
    bf2a:	b6 01       	movw	r22, r12
    bf2c:	0e 94 ce 6d 	call	0xdb9c	; 0xdb9c <__gesf2>
    bf30:	18 16       	cp	r1, r24
    bf32:	74 f3       	brlt	.-36     	; 0xbf10 <animate_enemy_shots+0x8a>
					   collision_detect_level(&game.enemies[i].shot[j].shared, 1, 1))
    bf34:	41 e0       	ldi	r20, 0x01	; 1
    bf36:	61 e0       	ldi	r22, 0x01	; 1
    bf38:	c4 01       	movw	r24, r8
    bf3a:	0e 94 ac 56 	call	0xad58	; 0xad58 <collision_detect_level>
		{
			if (game.enemies[i].shot[j].shot_type == BASIC_ENEMY_SHOT)
			{
				if (game.enemies[i].shot[j].active)
				{
					if (game.enemies[i].shot[j].shared.x < game.camera_x || game.enemies[i].shot[j].shared.x > game.camera_x + CAMERA_WIDTH*8 ||
    bf3e:	81 11       	cpse	r24, r1
    bf40:	e7 cf       	rjmp	.-50     	; 0xbf10 <animate_enemy_shots+0x8a>
					{
						game.enemies[i].shot[j].active = 0;
						LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
					}
					else if (LBCollides(game.player.shared.x,game.player.shared.y, game.player.width*8, game.player.height*8,
							game.enemies[i].shot[j].shared.x, game.enemies[i].shot[j].shared.y, 8, 8
    bf42:	f4 01       	movw	r30, r8
    bf44:	40 84       	ldd	r4, Z+8	; 0x08
    bf46:	51 84       	ldd	r5, Z+9	; 0x09
    bf48:	62 84       	ldd	r6, Z+10	; 0x0a
    bf4a:	73 84       	ldd	r7, Z+11	; 0x0b
    bf4c:	84 81       	ldd	r24, Z+4	; 0x04
    bf4e:	95 81       	ldd	r25, Z+5	; 0x05
    bf50:	a6 81       	ldd	r26, Z+6	; 0x06
    bf52:	b7 81       	ldd	r27, Z+7	; 0x07
    bf54:	89 83       	std	Y+1, r24	; 0x01
    bf56:	9a 83       	std	Y+2, r25	; 0x02
    bf58:	ab 83       	std	Y+3, r26	; 0x03
    bf5a:	bc 83       	std	Y+4, r27	; 0x04
					   collision_detect_level(&game.enemies[i].shot[j].shared, 1, 1))
					{
						game.enemies[i].shot[j].active = 0;
						LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
					}
					else if (LBCollides(game.player.shared.x,game.player.shared.y, game.player.width*8, game.player.height*8,
    bf5c:	c3 01       	movw	r24, r6
    bf5e:	b2 01       	movw	r22, r4
    bf60:	0e 94 f0 6c 	call	0xd9e0	; 0xd9e0 <__fixunssfsi>
    bf64:	6d 83       	std	Y+5, r22	; 0x05
    bf66:	7e 83       	std	Y+6, r23	; 0x06
    bf68:	8f 83       	std	Y+7, r24	; 0x07
    bf6a:	98 87       	std	Y+8, r25	; 0x08
    bf6c:	69 81       	ldd	r22, Y+1	; 0x01
    bf6e:	7a 81       	ldd	r23, Y+2	; 0x02
    bf70:	8b 81       	ldd	r24, Y+3	; 0x03
    bf72:	9c 81       	ldd	r25, Y+4	; 0x04
    bf74:	0e 94 f0 6c 	call	0xd9e0	; 0xd9e0 <__fixunssfsi>
    bf78:	69 87       	std	Y+9, r22	; 0x09
    bf7a:	7a 87       	std	Y+10, r23	; 0x0a
    bf7c:	8b 87       	std	Y+11, r24	; 0x0b
    bf7e:	9c 87       	std	Y+12, r25	; 0x0c
    bf80:	20 91 da 0d 	lds	r18, 0x0DDA
    bf84:	22 0f       	add	r18, r18
    bf86:	22 0f       	add	r18, r18
    bf88:	22 0f       	add	r18, r18
    bf8a:	40 91 d9 0d 	lds	r20, 0x0DD9
    bf8e:	44 0f       	add	r20, r20
    bf90:	44 0f       	add	r20, r20
    bf92:	44 0f       	add	r20, r20
    bf94:	60 91 ce 0d 	lds	r22, 0x0DCE
    bf98:	70 91 cf 0d 	lds	r23, 0x0DCF
    bf9c:	80 91 d0 0d 	lds	r24, 0x0DD0
    bfa0:	90 91 d1 0d 	lds	r25, 0x0DD1
    bfa4:	29 8b       	std	Y+17, r18	; 0x11
    bfa6:	4a 8b       	std	Y+18, r20	; 0x12
    bfa8:	0e 94 f0 6c 	call	0xd9e0	; 0xd9e0 <__fixunssfsi>
    bfac:	6d 87       	std	Y+13, r22	; 0x0d
    bfae:	7e 87       	std	Y+14, r23	; 0x0e
    bfb0:	8f 87       	std	Y+15, r24	; 0x0f
    bfb2:	98 8b       	std	Y+16, r25	; 0x10
    bfb4:	60 91 ca 0d 	lds	r22, 0x0DCA
    bfb8:	70 91 cb 0d 	lds	r23, 0x0DCB
    bfbc:	80 91 cc 0d 	lds	r24, 0x0DCC
    bfc0:	90 91 cd 0d 	lds	r25, 0x0DCD
    bfc4:	0e 94 f0 6c 	call	0xd9e0	; 0xd9e0 <__fixunssfsi>
    bfc8:	dc 01       	movw	r26, r24
    bfca:	cb 01       	movw	r24, r22
    bfcc:	28 e0       	ldi	r18, 0x08	; 8
    bfce:	a2 2e       	mov	r10, r18
    bfd0:	38 e0       	ldi	r19, 0x08	; 8
    bfd2:	c3 2e       	mov	r12, r19
    bfd4:	ed 80       	ldd	r14, Y+5	; 0x05
    bfd6:	fe 80       	ldd	r15, Y+6	; 0x06
    bfd8:	09 85       	ldd	r16, Y+9	; 0x09
    bfda:	1a 85       	ldd	r17, Y+10	; 0x0a
    bfdc:	29 89       	ldd	r18, Y+17	; 0x11
    bfde:	4a 89       	ldd	r20, Y+18	; 0x12
    bfe0:	6d 85       	ldd	r22, Y+13	; 0x0d
    bfe2:	7e 85       	ldd	r23, Y+14	; 0x0e
    bfe4:	0e 94 79 4e 	call	0x9cf2	; 0x9cf2 <LBCollides>
    bfe8:	88 23       	and	r24, r24
    bfea:	01 f1       	breq	.+64     	; 0xc02c <animate_enemy_shots+0x1a6>
							game.enemies[i].shot[j].shared.x, game.enemies[i].shot[j].shared.y, 8, 8
						)
					)
					{
						SFX_HIT;
    bfec:	41 e0       	ldi	r20, 0x01	; 1
    bfee:	6f ef       	ldi	r22, 0xFF	; 255
    bff0:	84 e0       	ldi	r24, 0x04	; 4
    bff2:	0e 94 f0 41 	call	0x83e0	; 0x83e0 <TriggerFx>
						if(!GODMODE) game.player.shield -= game.enemies[i].shot[j].hit_count;
    bff6:	80 91 db 0d 	lds	r24, 0x0DDB
    bffa:	f1 01       	movw	r30, r2
    bffc:	31 97       	sbiw	r30, 0x01	; 1
    bffe:	90 81       	ld	r25, Z
    c000:	89 1b       	sub	r24, r25
    c002:	80 93 db 0d 	sts	0x0DDB, r24
						if (game.player.shield <= 0)
    c006:	18 16       	cp	r1, r24
    c008:	54 f0       	brlt	.+20     	; 0xc01e <animate_enemy_shots+0x198>
						{
							SFX_PLAYER_EXPLODE;
    c00a:	41 e0       	ldi	r20, 0x01	; 1
    c00c:	6f ef       	ldi	r22, 0xFF	; 255
    c00e:	85 e0       	ldi	r24, 0x05	; 5
    c010:	0e 94 f0 41 	call	0x83e0	; 0x83e0 <TriggerFx>
							game.player.shield = 0;
    c014:	10 92 db 0d 	sts	0x0DDB, r1
							game.player.flags = EXPLODING;
    c018:	b0 e1       	ldi	r27, 0x10	; 16
    c01a:	b0 93 d6 0d 	sts	0x0DD6, r27
						}
						game.enemies[i].shot[j].active = 0;
    c01e:	f1 01       	movw	r30, r2
    c020:	10 82       	st	Z, r1
						LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
    c022:	01 e0       	ldi	r16, 0x01	; 1
    c024:	21 e0       	ldi	r18, 0x01	; 1
    c026:	40 e0       	ldi	r20, 0x00	; 0
    c028:	60 ee       	ldi	r22, 0xE0	; 224
    c02a:	44 c0       	rjmp	.+136    	; 0xc0b4 <animate_enemy_shots+0x22e>
					}
					else
					{
						game.enemies[i].shot[j].shared.x += game.enemies[i].shot[j].shared.vx*FRAME_TIME;
    c02c:	d4 01       	movw	r26, r8
    c02e:	1c 96       	adiw	r26, 0x0c	; 12
    c030:	6d 91       	ld	r22, X+
    c032:	7c 91       	ld	r23, X
    c034:	1d 97       	sbiw	r26, 0x0d	; 13
    c036:	88 27       	eor	r24, r24
    c038:	77 fd       	sbrc	r23, 7
    c03a:	80 95       	com	r24
    c03c:	98 2f       	mov	r25, r24
    c03e:	0e 94 1e 6d 	call	0xda3c	; 0xda3c <__floatsisf>
    c042:	29 e8       	ldi	r18, 0x89	; 137
    c044:	38 e8       	ldi	r19, 0x88	; 136
    c046:	48 e8       	ldi	r20, 0x88	; 136
    c048:	5c e3       	ldi	r21, 0x3C	; 60
    c04a:	0e 94 d2 6d 	call	0xdba4	; 0xdba4 <__mulsf3>
    c04e:	9b 01       	movw	r18, r22
    c050:	ac 01       	movw	r20, r24
    c052:	69 81       	ldd	r22, Y+1	; 0x01
    c054:	7a 81       	ldd	r23, Y+2	; 0x02
    c056:	8b 81       	ldd	r24, Y+3	; 0x03
    c058:	9c 81       	ldd	r25, Y+4	; 0x04
    c05a:	0e 94 88 6c 	call	0xd910	; 0xd910 <__addsf3>
    c05e:	6b 01       	movw	r12, r22
    c060:	7c 01       	movw	r14, r24
    c062:	f4 01       	movw	r30, r8
    c064:	64 83       	std	Z+4, r22	; 0x04
    c066:	75 83       	std	Z+5, r23	; 0x05
    c068:	86 83       	std	Z+6, r24	; 0x06
    c06a:	97 83       	std	Z+7, r25	; 0x07
						LBMoveSprite(slot, game.enemies[i].shot[j].shared.x - game.camera_x, game.enemies[i].shot[j].shared.y - game.camera_y, 1, 1);
    c06c:	60 91 ac 0d 	lds	r22, 0x0DAC
    c070:	70 91 ad 0d 	lds	r23, 0x0DAD
    c074:	80 e0       	ldi	r24, 0x00	; 0
    c076:	90 e0       	ldi	r25, 0x00	; 0
    c078:	0e 94 1c 6d 	call	0xda38	; 0xda38 <__floatunsisf>
    c07c:	9b 01       	movw	r18, r22
    c07e:	ac 01       	movw	r20, r24
    c080:	c3 01       	movw	r24, r6
    c082:	b2 01       	movw	r22, r4
    c084:	0e 94 87 6c 	call	0xd90e	; 0xd90e <__subsf3>
    c088:	0e 94 f0 6c 	call	0xd9e0	; 0xd9e0 <__fixunssfsi>
    c08c:	76 2e       	mov	r7, r22
    c08e:	60 91 aa 0d 	lds	r22, 0x0DAA
    c092:	70 91 ab 0d 	lds	r23, 0x0DAB
    c096:	80 e0       	ldi	r24, 0x00	; 0
    c098:	90 e0       	ldi	r25, 0x00	; 0
    c09a:	0e 94 1c 6d 	call	0xda38	; 0xda38 <__floatunsisf>
    c09e:	9b 01       	movw	r18, r22
    c0a0:	ac 01       	movw	r20, r24
    c0a2:	c7 01       	movw	r24, r14
    c0a4:	b6 01       	movw	r22, r12
    c0a6:	0e 94 87 6c 	call	0xd90e	; 0xd90e <__subsf3>
    c0aa:	0e 94 f0 6c 	call	0xd9e0	; 0xd9e0 <__fixunssfsi>
    c0ae:	01 e0       	ldi	r16, 0x01	; 1
    c0b0:	21 e0       	ldi	r18, 0x01	; 1
    c0b2:	47 2d       	mov	r20, r7
    c0b4:	8b 2d       	mov	r24, r11
    c0b6:	0e 94 16 4f 	call	0x9e2c	; 0x9e2c <LBMoveSprite>
					}
				}
			}
			slot += 1;
    c0ba:	b3 94       	inc	r11
    c0bc:	f2 e4       	ldi	r31, 0x42	; 66
    c0be:	2f 0e       	add	r2, r31
    c0c0:	31 1c       	adc	r3, r1
    c0c2:	82 e4       	ldi	r24, 0x42	; 66
    c0c4:	88 0e       	add	r8, r24
    c0c6:	91 1c       	adc	r9, r1

void animate_enemy_shots()
{
	u8 slot = ENEMY_SHOT_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    c0c8:	93 e1       	ldi	r25, 0x13	; 19
    c0ca:	b9 12       	cpse	r11, r25
    c0cc:	00 cf       	rjmp	.-512    	; 0xbece <animate_enemy_shots+0x48>
				}
			}
			slot += 1;
		}
	}
}
    c0ce:	62 96       	adiw	r28, 0x12	; 18
    c0d0:	0f b6       	in	r0, 0x3f	; 63
    c0d2:	f8 94       	cli
    c0d4:	de bf       	out	0x3e, r29	; 62
    c0d6:	0f be       	out	0x3f, r0	; 63
    c0d8:	cd bf       	out	0x3d, r28	; 61
    c0da:	df 91       	pop	r29
    c0dc:	cf 91       	pop	r28
    c0de:	1f 91       	pop	r17
    c0e0:	0f 91       	pop	r16
    c0e2:	ff 90       	pop	r15
    c0e4:	ef 90       	pop	r14
    c0e6:	df 90       	pop	r13
    c0e8:	cf 90       	pop	r12
    c0ea:	bf 90       	pop	r11
    c0ec:	af 90       	pop	r10
    c0ee:	9f 90       	pop	r9
    c0f0:	8f 90       	pop	r8
    c0f2:	7f 90       	pop	r7
    c0f4:	6f 90       	pop	r6
    c0f6:	5f 90       	pop	r5
    c0f8:	4f 90       	pop	r4
    c0fa:	3f 90       	pop	r3
    c0fc:	2f 90       	pop	r2
    c0fe:	08 95       	ret

0000c100 <clear_sprites>:
	}
	
}

void clear_sprites(u8 from, u8 count)
{
    c100:	ef 92       	push	r14
    c102:	ff 92       	push	r15
    c104:	0f 93       	push	r16
    c106:	cf 93       	push	r28
	for(u8 i = from; i < from+count; i++)
    c108:	c8 2f       	mov	r28, r24
    c10a:	e6 2e       	mov	r14, r22
    c10c:	f1 2c       	mov	r15, r1
    c10e:	e8 0e       	add	r14, r24
    c110:	f1 1c       	adc	r15, r1
    c112:	8c 2f       	mov	r24, r28
    c114:	90 e0       	ldi	r25, 0x00	; 0
    c116:	8e 15       	cp	r24, r14
    c118:	9f 05       	cpc	r25, r15
    c11a:	7c f4       	brge	.+30     	; 0xc13a <clear_sprites+0x3a>
	{
		LBMapSprite(i, map_none, 0);
    c11c:	40 e0       	ldi	r20, 0x00	; 0
    c11e:	64 ee       	ldi	r22, 0xE4	; 228
    c120:	7d e2       	ldi	r23, 0x2D	; 45
    c122:	8c 2f       	mov	r24, r28
    c124:	0e 94 c4 4e 	call	0x9d88	; 0x9d88 <LBMapSprite>
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
    c128:	01 e0       	ldi	r16, 0x01	; 1
    c12a:	21 e0       	ldi	r18, 0x01	; 1
    c12c:	40 e0       	ldi	r20, 0x00	; 0
    c12e:	60 ee       	ldi	r22, 0xE0	; 224
    c130:	8c 2f       	mov	r24, r28
    c132:	0e 94 16 4f 	call	0x9e2c	; 0x9e2c <LBMoveSprite>
	
}

void clear_sprites(u8 from, u8 count)
{
	for(u8 i = from; i < from+count; i++)
    c136:	cf 5f       	subi	r28, 0xFF	; 255
    c138:	ec cf       	rjmp	.-40     	; 0xc112 <clear_sprites+0x12>
	{
		LBMapSprite(i, map_none, 0);
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
	}
}
    c13a:	cf 91       	pop	r28
    c13c:	0f 91       	pop	r16
    c13e:	ff 90       	pop	r15
    c140:	ef 90       	pop	r14
    c142:	08 95       	ret

0000c144 <fade_through>:
	EepromWriteBlock(block);
}

void fade_through()
{
	FadeOut(FRAMES_PER_FADE, true);
    c144:	61 e0       	ldi	r22, 0x01	; 1
    c146:	81 e0       	ldi	r24, 0x01	; 1
    c148:	0e 94 2d 4d 	call	0x9a5a	; 0x9a5a <FadeOut>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    c14c:	64 e1       	ldi	r22, 0x14	; 20
    c14e:	80 e0       	ldi	r24, 0x00	; 0
    c150:	0e 94 80 60 	call	0xc100	; 0xc100 <clear_sprites>
	LBRotateSprites();
    c154:	0e 94 54 4f 	call	0x9ea8	; 0x9ea8 <LBRotateSprites>
	ClearVram();
    c158:	0e 94 11 3e 	call	0x7c22	; 0x7c22 <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    c15c:	60 e0       	ldi	r22, 0x00	; 0
    c15e:	81 e0       	ldi	r24, 0x01	; 1
    c160:	0c 94 21 4d 	jmp	0x9a42	; 0x9a42 <FadeIn>

0000c164 <load_level>:
		game.level_height = 25;
	}
}

void load_level(u8 index, u8 drop_ship)
{	
    c164:	0f 93       	push	r16
    c166:	cf 93       	push	r28
    c168:	df 93       	push	r29
    c16a:	c8 2f       	mov	r28, r24
    c16c:	d6 2f       	mov	r29, r22
	u8 ship_x = (get_hero_spawn_x(index) - 2) * 8;
	u8 ship_y = 0;
	char ship_increment = 3;
	
	Screen.scrollX = 0;
    c16e:	10 92 b2 0c 	sts	0x0CB2, r1
	Screen.scrollY = 0;
    c172:	10 92 b3 0c 	sts	0x0CB3, r1
	Screen.scrollHeight = 29;
    c176:	8d e1       	ldi	r24, 0x1D	; 29
    c178:	80 93 b4 0c 	sts	0x0CB4, r24
	Screen.overlayTileTable = tiles_data;
    c17c:	87 ee       	ldi	r24, 0xE7	; 231
    c17e:	9d e2       	ldi	r25, 0x2D	; 45
    c180:	90 93 b1 0c 	sts	0x0CB1, r25
    c184:	80 93 b0 0c 	sts	0x0CB0, r24
	Screen.overlayHeight = 3;
    c188:	83 e0       	ldi	r24, 0x03	; 3
    c18a:	80 93 af 0c 	sts	0x0CAF, r24
	clear_overlay(2);
    c18e:	82 e0       	ldi	r24, 0x02	; 2
    c190:	0e 94 d1 51 	call	0xa3a2	; 0xa3a2 <clear_overlay>
	game.current_level_index = index;
    c194:	c0 93 b9 0d 	sts	0x0DB9, r28
	game.level_ended = 0;
    c198:	10 92 c5 0d 	sts	0x0DC5, r1
	game.joypadState.held = 0;
    c19c:	10 92 a1 0f 	sts	0x0FA1, r1
    c1a0:	10 92 a0 0f 	sts	0x0FA0, r1
	game.joypadState.pressed = 0;
    c1a4:	10 92 9d 0f 	sts	0x0F9D, r1
    c1a8:	10 92 9c 0f 	sts	0x0F9C, r1
	game.joypadState.released = 0;
    c1ac:	10 92 9f 0f 	sts	0x0F9F, r1
    c1b0:	10 92 9e 0f 	sts	0x0F9E, r1
	switch (index)
    c1b4:	8c 2f       	mov	r24, r28
    c1b6:	90 e0       	ldi	r25, 0x00	; 0
    c1b8:	8a 30       	cpi	r24, 0x0A	; 10
    c1ba:	91 05       	cpc	r25, r1
    c1bc:	c0 f4       	brcc	.+48     	; 0xc1ee <load_level+0x8a>
    c1be:	fc 01       	movw	r30, r24
    c1c0:	e8 5c       	subi	r30, 0xC8	; 200
    c1c2:	ff 4f       	sbci	r31, 0xFF	; 255
    c1c4:	0c 94 81 6c 	jmp	0xd902	; 0xd902 <__tablejump2__>
	{
		case 0: map_level_info((char*) map_level_ice); break;
    c1c8:	88 e5       	ldi	r24, 0x58	; 88
    c1ca:	90 e7       	ldi	r25, 0x70	; 112
    c1cc:	0e c0       	rjmp	.+28     	; 0xc1ea <load_level+0x86>
		case 1: map_level_info((char*) map_level_space); break;
		case 2: map_level_info((char*) map_level_fire); break;
    c1ce:	87 e5       	ldi	r24, 0x57	; 87
    c1d0:	9f e6       	ldi	r25, 0x6F	; 111
    c1d2:	0b c0       	rjmp	.+22     	; 0xc1ea <load_level+0x86>
		case 3: map_level_info((char*) map_level_space); break;
		case 4: map_level_info((char*) map_level_forest); break;
    c1d4:	86 e5       	ldi	r24, 0x56	; 86
    c1d6:	9e e6       	ldi	r25, 0x6E	; 110
    c1d8:	08 c0       	rjmp	.+16     	; 0xc1ea <load_level+0x86>
		case 5: map_level_info((char*) map_level_space); break;
		case 6: map_level_info((char*) map_level_city); break;
    c1da:	85 e5       	ldi	r24, 0x55	; 85
    c1dc:	9d e6       	ldi	r25, 0x6D	; 109
    c1de:	05 c0       	rjmp	.+10     	; 0xc1ea <load_level+0x86>
		case 7: map_level_info((char*) map_level_space); break;
		case 8: map_level_info((char*) map_level_desert); break;
    c1e0:	84 e5       	ldi	r24, 0x54	; 84
    c1e2:	9c e6       	ldi	r25, 0x6C	; 108
    c1e4:	02 c0       	rjmp	.+4      	; 0xc1ea <load_level+0x86>
		case 9: map_level_info((char*) map_level_space); break;
    c1e6:	87 e3       	ldi	r24, 0x37	; 55
    c1e8:	95 e5       	ldi	r25, 0x55	; 85
    c1ea:	0e 94 90 54 	call	0xa920	; 0xa920 <map_level_info>
	}
	game.column_count = 0;
    c1ee:	10 92 b5 0d 	sts	0x0DB5, r1
    c1f2:	10 92 b4 0d 	sts	0x0DB4, r1
	game.camera_x = get_camera_x(index);
    c1f6:	10 92 ab 0d 	sts	0x0DAB, r1
    c1fa:	10 92 aa 0d 	sts	0x0DAA, r1
	game.camera_y = get_camera_y(index);
    c1fe:	10 92 ad 0d 	sts	0x0DAD, r1
    c202:	10 92 ac 0d 	sts	0x0DAC, r1
	game.player.shared.x = get_hero_spawn_x(index)*8;
    c206:	80 e0       	ldi	r24, 0x00	; 0
    c208:	90 e0       	ldi	r25, 0x00	; 0
    c20a:	a0 ec       	ldi	r26, 0xC0	; 192
    c20c:	b1 e4       	ldi	r27, 0x41	; 65
    c20e:	80 93 ca 0d 	sts	0x0DCA, r24
    c212:	90 93 cb 0d 	sts	0x0DCB, r25
    c216:	a0 93 cc 0d 	sts	0x0DCC, r26
    c21a:	b0 93 cd 0d 	sts	0x0DCD, r27
	game.player.shared.y = get_hero_spawn_y(index)*8;
    c21e:	80 e0       	ldi	r24, 0x00	; 0
    c220:	90 e0       	ldi	r25, 0x00	; 0
    c222:	a0 e2       	ldi	r26, 0x20	; 32
    c224:	b3 e4       	ldi	r27, 0x43	; 67
    c226:	80 93 ce 0d 	sts	0x0DCE, r24
    c22a:	90 93 cf 0d 	sts	0x0DCF, r25
    c22e:	a0 93 d0 0d 	sts	0x0DD0, r26
    c232:	b0 93 d1 0d 	sts	0x0DD1, r27
	game.camera_x *= 8;
	game.camera_y *= 8;
	game.scroll_src_x = game.camera_x / 8 + CAMERA_WIDTH + 1;
    c236:	8d e1       	ldi	r24, 0x1D	; 29
    c238:	90 e0       	ldi	r25, 0x00	; 0
    c23a:	90 93 a7 0d 	sts	0x0DA7, r25
    c23e:	80 93 a6 0d 	sts	0x0DA6, r24
    game.scroll_dest_x = game.camera_x / 8 + CAMERA_WIDTH + 1;
    c242:	80 93 c1 0d 	sts	0x0DC1, r24
	game.scroll_src_y = game.camera_y / 8 + CAMERA_HEIGHT + 1;
    c246:	8a e1       	ldi	r24, 0x1A	; 26
    c248:	90 e0       	ldi	r25, 0x00	; 0
    c24a:	90 93 a9 0d 	sts	0x0DA9, r25
    c24e:	80 93 a8 0d 	sts	0x0DA8, r24
    game.scroll_dest_y =  game.camera_y / 8 + CAMERA_HEIGHT + 1;
    c252:	80 93 c2 0d 	sts	0x0DC2, r24
	game.scroll_x = 0;
    c256:	10 92 bf 0d 	sts	0x0DBF, r1
	game.scroll_y = 0;
    c25a:	10 92 c0 0d 	sts	0x0DC0, r1
	game.spawn_rate = BASE_SPAWN_RATE;
    c25e:	8a e0       	ldi	r24, 0x0A	; 10
    c260:	80 93 c4 0d 	sts	0x0DC4, r24
	render_camera_view();
    c264:	0e 94 9a 52 	call	0xa534	; 0xa534 <render_camera_view>
	LBPrint(0, VRAM_TILES_V-3, (char*) strShield);
    c268:	4e e5       	ldi	r20, 0x5E	; 94
    c26a:	5b e0       	ldi	r21, 0x0B	; 11
    c26c:	6d e1       	ldi	r22, 0x1D	; 29
    c26e:	80 e0       	ldi	r24, 0x00	; 0
    c270:	0e 94 f3 4d 	call	0x9be6	; 0x9be6 <LBPrint>
	LBPrint(18, VRAM_TILES_V-3, (char*) strTime);
    c274:	41 e5       	ldi	r20, 0x51	; 81
    c276:	5b e0       	ldi	r21, 0x0B	; 11
    c278:	6d e1       	ldi	r22, 0x1D	; 29
    c27a:	82 e1       	ldi	r24, 0x12	; 18
    c27c:	0e 94 f3 4d 	call	0x9be6	; 0x9be6 <LBPrint>
	LBPrint(0, VRAM_TILES_V-2, (char*) strLives);
    c280:	47 e5       	ldi	r20, 0x57	; 87
    c282:	5b e0       	ldi	r21, 0x0B	; 11
    c284:	6e e1       	ldi	r22, 0x1E	; 30
    c286:	80 e0       	ldi	r24, 0x00	; 0
    c288:	0e 94 f3 4d 	call	0x9be6	; 0x9be6 <LBPrint>
	LBPrint(17, VRAM_TILES_V-2, (char*) strScore);
    c28c:	46 e6       	ldi	r20, 0x66	; 102
    c28e:	5b e0       	ldi	r21, 0x0B	; 11
    c290:	6e e1       	ldi	r22, 0x1E	; 30
    c292:	81 e1       	ldi	r24, 0x11	; 17
    c294:	0e 94 f3 4d 	call	0x9be6	; 0x9be6 <LBPrint>
	LBPrint(17, VRAM_TILES_V-1, (char*) strTally);
    c298:	40 e1       	ldi	r20, 0x10	; 16
    c29a:	5b e0       	ldi	r21, 0x0B	; 11
    c29c:	6f e1       	ldi	r22, 0x1F	; 31
    c29e:	81 e1       	ldi	r24, 0x11	; 17
    c2a0:	0e 94 f3 4d 	call	0x9be6	; 0x9be6 <LBPrint>
	
	LBPrintByte(9, VRAM_TILES_V-3, game.player.shield ,true);
    c2a4:	21 e0       	ldi	r18, 0x01	; 1
    c2a6:	40 91 db 0d 	lds	r20, 0x0DDB
    c2aa:	6d e1       	ldi	r22, 0x1D	; 29
    c2ac:	89 e0       	ldi	r24, 0x09	; 9
    c2ae:	0e 94 0f 4e 	call	0x9c1e	; 0x9c1e <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-3, game.time ,true);
    c2b2:	40 91 b2 0d 	lds	r20, 0x0DB2
    c2b6:	50 91 b3 0d 	lds	r21, 0x0DB3
    c2ba:	21 e0       	ldi	r18, 0x01	; 1
    c2bc:	6d e1       	ldi	r22, 0x1D	; 29
    c2be:	8b e1       	ldi	r24, 0x1B	; 27
    c2c0:	0e 94 40 4e 	call	0x9c80	; 0x9c80 <LBPrintInt>
	LBPrintByte(9, VRAM_TILES_V-2, game.lives ,true);
    c2c4:	21 e0       	ldi	r18, 0x01	; 1
    c2c6:	40 91 b7 0d 	lds	r20, 0x0DB7
    c2ca:	6e e1       	ldi	r22, 0x1E	; 30
    c2cc:	89 e0       	ldi	r24, 0x09	; 9
    c2ce:	0e 94 0f 4e 	call	0x9c1e	; 0x9c1e <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-2, game.level_score ,true);
    c2d2:	40 91 b0 0d 	lds	r20, 0x0DB0
    c2d6:	50 91 b1 0d 	lds	r21, 0x0DB1
    c2da:	21 e0       	ldi	r18, 0x01	; 1
    c2dc:	6e e1       	ldi	r22, 0x1E	; 30
    c2de:	8b e1       	ldi	r24, 0x1B	; 27
    c2e0:	0e 94 40 4e 	call	0x9c80	; 0x9c80 <LBPrintInt>
	LBPrintInt(27, VRAM_TILES_V-1, game.score ,true);
    c2e4:	40 91 ae 0d 	lds	r20, 0x0DAE
    c2e8:	50 91 af 0d 	lds	r21, 0x0DAF
    c2ec:	21 e0       	ldi	r18, 0x01	; 1
    c2ee:	6f e1       	ldi	r22, 0x1F	; 31
    c2f0:	8b e1       	ldi	r24, 0x1B	; 27
    c2f2:	0e 94 40 4e 	call	0x9c80	; 0x9c80 <LBPrintInt>
	
	
	if (!is_space() && drop_ship)
    c2f6:	0e 94 93 4f 	call	0x9f26	; 0x9f26 <is_space>
    c2fa:	81 11       	cpse	r24, r1
    c2fc:	39 c0       	rjmp	.+114    	; 0xc370 <load_level+0x20c>
    c2fe:	dd 23       	and	r29, r29
    c300:	b9 f1       	breq	.+110    	; 0xc370 <load_level+0x20c>
	{
		map_ship();
    c302:	0e 94 7b 54 	call	0xa8f6	; 0xa8f6 <map_ship>

void load_level(u8 index, u8 drop_ship)
{	
	u8 ship_x = (get_hero_spawn_x(index) - 2) * 8;
	u8 ship_y = 0;
	char ship_increment = 3;
    c306:	d3 e0       	ldi	r29, 0x03	; 3
}

void load_level(u8 index, u8 drop_ship)
{	
	u8 ship_x = (get_hero_spawn_x(index) - 2) * 8;
	u8 ship_y = 0;
    c308:	c0 e0       	ldi	r28, 0x00	; 0
	if (!is_space() && drop_ship)
	{
		map_ship();
		while (1)
		{
			WaitVsync(1);
    c30a:	81 e0       	ldi	r24, 0x01	; 1
    c30c:	90 e0       	ldi	r25, 0x00	; 0
    c30e:	0e 94 c5 4c 	call	0x998a	; 0x998a <WaitVsync>
			if (ship_y >= get_hero_spawn_y(index)*8)
    c312:	8c 2f       	mov	r24, r28
    c314:	90 e0       	ldi	r25, 0x00	; 0
    c316:	80 3a       	cpi	r24, 0xA0	; 160
    c318:	91 05       	cpc	r25, r1
    c31a:	74 f0       	brlt	.+28     	; 0xc338 <load_level+0x1d4>
			{
				LBMapSprite(0, map_hero_idle, 0);
    c31c:	40 e0       	ldi	r20, 0x00	; 0
    c31e:	68 eb       	ldi	r22, 0xB8	; 184
    c320:	7d e2       	ldi	r23, 0x2D	; 45
    c322:	80 e0       	ldi	r24, 0x00	; 0
    c324:	0e 94 c4 4e 	call	0x9d88	; 0x9d88 <LBMapSprite>
				LBMoveSprite(0, get_hero_spawn_x(index)*8, get_hero_spawn_y(index)*8, 2, 3);
    c328:	03 e0       	ldi	r16, 0x03	; 3
    c32a:	22 e0       	ldi	r18, 0x02	; 2
    c32c:	40 ea       	ldi	r20, 0xA0	; 160
    c32e:	68 e1       	ldi	r22, 0x18	; 24
    c330:	80 e0       	ldi	r24, 0x00	; 0
    c332:	0e 94 16 4f 	call	0x9e2c	; 0x9e2c <LBMoveSprite>
				ship_increment = -3;
    c336:	dd ef       	ldi	r29, 0xFD	; 253
			}
			LBMapSprite(6, LBGetNextFrame(&game.player.run), 0);
    c338:	82 e3       	ldi	r24, 0x32	; 50
    c33a:	9e e0       	ldi	r25, 0x0E	; 14
    c33c:	0e 94 62 4d 	call	0x9ac4	; 0x9ac4 <LBGetNextFrame>
    c340:	40 e0       	ldi	r20, 0x00	; 0
    c342:	bc 01       	movw	r22, r24
    c344:	86 e0       	ldi	r24, 0x06	; 6
    c346:	0e 94 c4 4e 	call	0x9d88	; 0x9d88 <LBMapSprite>
			LBMoveSprite(6, ship_x, ship_y, 4, 2);
    c34a:	02 e0       	ldi	r16, 0x02	; 2
    c34c:	24 e0       	ldi	r18, 0x04	; 4
    c34e:	4c 2f       	mov	r20, r28
    c350:	68 e0       	ldi	r22, 0x08	; 8
    c352:	86 e0       	ldi	r24, 0x06	; 6
    c354:	0e 94 16 4f 	call	0x9e2c	; 0x9e2c <LBMoveSprite>
			ship_y += ship_increment;
    c358:	cd 0f       	add	r28, r29
			if (ship_y == 0)
    c35a:	39 f4       	brne	.+14     	; 0xc36a <load_level+0x206>
			{
				clear_sprites(6, 8);
    c35c:	68 e0       	ldi	r22, 0x08	; 8
    c35e:	86 e0       	ldi	r24, 0x06	; 6
				break;
			}
			LBRotateSprites();
		}
	}
}
    c360:	df 91       	pop	r29
    c362:	cf 91       	pop	r28
    c364:	0f 91       	pop	r16
			LBMapSprite(6, LBGetNextFrame(&game.player.run), 0);
			LBMoveSprite(6, ship_x, ship_y, 4, 2);
			ship_y += ship_increment;
			if (ship_y == 0)
			{
				clear_sprites(6, 8);
    c366:	0c 94 80 60 	jmp	0xc100	; 0xc100 <clear_sprites>
				break;
			}
			LBRotateSprites();
    c36a:	0e 94 54 4f 	call	0x9ea8	; 0x9ea8 <LBRotateSprites>
		}
    c36e:	cd cf       	rjmp	.-102    	; 0xc30a <load_level+0x1a6>
	}
}
    c370:	df 91       	pop	r29
    c372:	cf 91       	pop	r28
    c374:	0f 91       	pop	r16
    c376:	08 95       	ret

0000c378 <hide_sprites>:
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
	}
}

void hide_sprites(u8 from, u8 count)
{
    c378:	0f 93       	push	r16
    c37a:	1f 93       	push	r17
    c37c:	cf 93       	push	r28
    c37e:	df 93       	push	r29
	for(u8 i = from; i < from+count; i++)
    c380:	18 2f       	mov	r17, r24
    c382:	c6 2f       	mov	r28, r22
    c384:	d0 e0       	ldi	r29, 0x00	; 0
    c386:	c8 0f       	add	r28, r24
    c388:	d1 1d       	adc	r29, r1
    c38a:	81 2f       	mov	r24, r17
    c38c:	90 e0       	ldi	r25, 0x00	; 0
    c38e:	8c 17       	cp	r24, r28
    c390:	9d 07       	cpc	r25, r29
    c392:	4c f4       	brge	.+18     	; 0xc3a6 <hide_sprites+0x2e>
	{
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
    c394:	01 e0       	ldi	r16, 0x01	; 1
    c396:	21 e0       	ldi	r18, 0x01	; 1
    c398:	40 e0       	ldi	r20, 0x00	; 0
    c39a:	60 ee       	ldi	r22, 0xE0	; 224
    c39c:	81 2f       	mov	r24, r17
    c39e:	0e 94 16 4f 	call	0x9e2c	; 0x9e2c <LBMoveSprite>
	}
}

void hide_sprites(u8 from, u8 count)
{
	for(u8 i = from; i < from+count; i++)
    c3a2:	1f 5f       	subi	r17, 0xFF	; 255
    c3a4:	f2 cf       	rjmp	.-28     	; 0xc38a <hide_sprites+0x12>
	{
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
	}
}
    c3a6:	df 91       	pop	r29
    c3a8:	cf 91       	pop	r28
    c3aa:	1f 91       	pop	r17
    c3ac:	0f 91       	pop	r16
    c3ae:	08 95       	ret

0000c3b0 <select_pressed>:
	StopSong();
	load_high_scores();
}

char select_pressed(JoyPadState* p)
{
    c3b0:	fc 01       	movw	r30, r24
    c3b2:	20 81       	ld	r18, Z
    c3b4:	31 81       	ldd	r19, Z+1	; 0x01
    c3b6:	28 70       	andi	r18, 0x08	; 8
    c3b8:	31 70       	andi	r19, 0x01	; 1
	return (p->pressed & BTN_A) || (p->pressed & BTN_START);
    c3ba:	81 e0       	ldi	r24, 0x01	; 1
    c3bc:	23 2b       	or	r18, r19
    c3be:	09 f4       	brne	.+2      	; 0xc3c2 <select_pressed+0x12>
    c3c0:	80 e0       	ldi	r24, 0x00	; 0
}
    c3c2:	08 95       	ret

0000c3c4 <stream_dialogue>:


void stream_dialogue(const char* dialogue, u8 y)
{
    c3c4:	ff 92       	push	r15
    c3c6:	0f 93       	push	r16
    c3c8:	1f 93       	push	r17
    c3ca:	cf 93       	push	r28
    c3cc:	df 93       	push	r29
    c3ce:	ec 01       	movw	r28, r24
    c3d0:	16 2f       	mov	r17, r22
	u8 x, ln, c;
	
	while (pgm_read_byte(dialogue) != '#')
	{
		ln = strnlen_P(dialogue, 255);
		x = 14 - ln / 2;
    c3d2:	8e e0       	ldi	r24, 0x0E	; 14
    c3d4:	f8 2e       	mov	r15, r24

void stream_dialogue(const char* dialogue, u8 y)
{
	u8 x, ln, c;
	
	while (pgm_read_byte(dialogue) != '#')
    c3d6:	fe 01       	movw	r30, r28
    c3d8:	84 91       	lpm	r24, Z
    c3da:	83 32       	cpi	r24, 0x23	; 35
    c3dc:	21 f1       	breq	.+72     	; 0xc426 <stream_dialogue+0x62>
	{
		ln = strnlen_P(dialogue, 255);
    c3de:	6f ef       	ldi	r22, 0xFF	; 255
    c3e0:	70 e0       	ldi	r23, 0x00	; 0
    c3e2:	ce 01       	movw	r24, r28
    c3e4:	0e 94 35 6e 	call	0xdc6a	; 0xdc6a <strnlen_P>
		x = 14 - ln / 2;
    c3e8:	86 95       	lsr	r24
    c3ea:	0f 2d       	mov	r16, r15
    c3ec:	08 1b       	sub	r16, r24
    c3ee:	0c 1b       	sub	r16, r28
    c3f0:	8c 2f       	mov	r24, r28
    c3f2:	80 0f       	add	r24, r16
		while ((c = pgm_read_byte(dialogue++)))
    c3f4:	21 96       	adiw	r28, 0x01	; 1
    c3f6:	fe 01       	movw	r30, r28
    c3f8:	31 97       	sbiw	r30, 0x01	; 1
    c3fa:	44 91       	lpm	r20, Z
    c3fc:	44 23       	and	r20, r20
    c3fe:	89 f0       	breq	.+34     	; 0xc422 <stream_dialogue+0x5e>
		{
			LBPrintChar(x++, y, c);
    c400:	61 2f       	mov	r22, r17
    c402:	0e 94 d3 4d 	call	0x9ba6	; 0x9ba6 <LBPrintChar>
			LBGetJoyPadState(&game.joypadState, 0);
    c406:	60 e0       	ldi	r22, 0x00	; 0
    c408:	8c e9       	ldi	r24, 0x9C	; 156
    c40a:	9f e0       	ldi	r25, 0x0F	; 15
    c40c:	0e 94 88 4d 	call	0x9b10	; 0x9b10 <LBGetJoyPadState>
			if (!(game.joypadState.held & BTN_B)) WaitUs(CHARACTER_DELAY_US);
    c410:	80 91 a0 0f 	lds	r24, 0x0FA0
    c414:	80 fd       	sbrc	r24, 0
    c416:	ec cf       	rjmp	.-40     	; 0xc3f0 <stream_dialogue+0x2c>
    c418:	80 e7       	ldi	r24, 0x70	; 112
    c41a:	97 e1       	ldi	r25, 0x17	; 23
    c41c:	0e 94 47 3e 	call	0x7c8e	; 0x7c8e <WaitUs>
    c420:	e7 cf       	rjmp	.-50     	; 0xc3f0 <stream_dialogue+0x2c>
		}
		y++;
    c422:	1f 5f       	subi	r17, 0xFF	; 255
    c424:	d8 cf       	rjmp	.-80     	; 0xc3d6 <stream_dialogue+0x12>
	}
}
    c426:	df 91       	pop	r29
    c428:	cf 91       	pop	r28
    c42a:	1f 91       	pop	r17
    c42c:	0f 91       	pop	r16
    c42e:	ff 90       	pop	r15
    c430:	08 95       	ret

0000c432 <map_particles>:

void map_particles()
{
    c432:	cf 93       	push	r28
	for (u8 i = 9; i < 20; i++)
    c434:	c9 e0       	ldi	r28, 0x09	; 9
	{
		LBMapSprite(i, map_particle, 0);
    c436:	40 e0       	ldi	r20, 0x00	; 0
    c438:	68 ed       	ldi	r22, 0xD8	; 216
    c43a:	7d e2       	ldi	r23, 0x2D	; 45
    c43c:	8c 2f       	mov	r24, r28
    c43e:	0e 94 c4 4e 	call	0x9d88	; 0x9d88 <LBMapSprite>
	}
}

void map_particles()
{
	for (u8 i = 9; i < 20; i++)
    c442:	cf 5f       	subi	r28, 0xFF	; 255
    c444:	c4 31       	cpi	r28, 0x14	; 20
    c446:	b9 f7       	brne	.-18     	; 0xc436 <map_particles+0x4>
	{
		LBMapSprite(i, map_particle, 0);
	}
}
    c448:	cf 91       	pop	r28
    c44a:	08 95       	ret

0000c44c <place_particles>:

void place_particles()
{
    c44c:	0f 93       	push	r16
    c44e:	1f 93       	push	r17
    c450:	cf 93       	push	r28
    c452:	df 93       	push	r29
    c454:	1f 92       	push	r1
    c456:	cd b7       	in	r28, 0x3d	; 61
    c458:	de b7       	in	r29, 0x3e	; 62
	for (u8 i = 9; i < 20; i++)
    c45a:	19 e0       	ldi	r17, 0x09	; 9
	{
		LBMoveSprite(i, LBRandom(0, 224), LBRandom(0, 200), 1, 1);
    c45c:	68 ec       	ldi	r22, 0xC8	; 200
    c45e:	80 e0       	ldi	r24, 0x00	; 0
    c460:	0e 94 9f 4e 	call	0x9d3e	; 0x9d3e <LBRandom>
    c464:	48 2f       	mov	r20, r24
    c466:	60 ee       	ldi	r22, 0xE0	; 224
    c468:	80 e0       	ldi	r24, 0x00	; 0
    c46a:	49 83       	std	Y+1, r20	; 0x01
    c46c:	0e 94 9f 4e 	call	0x9d3e	; 0x9d3e <LBRandom>
    c470:	68 2f       	mov	r22, r24
    c472:	01 e0       	ldi	r16, 0x01	; 1
    c474:	21 e0       	ldi	r18, 0x01	; 1
    c476:	49 81       	ldd	r20, Y+1	; 0x01
    c478:	81 2f       	mov	r24, r17
    c47a:	0e 94 16 4f 	call	0x9e2c	; 0x9e2c <LBMoveSprite>
	}
}

void place_particles()
{
	for (u8 i = 9; i < 20; i++)
    c47e:	1f 5f       	subi	r17, 0xFF	; 255
    c480:	14 31       	cpi	r17, 0x14	; 20
    c482:	61 f7       	brne	.-40     	; 0xc45c <place_particles+0x10>
	{
		LBMoveSprite(i, LBRandom(0, 224), LBRandom(0, 200), 1, 1);
	}
}
    c484:	0f 90       	pop	r0
    c486:	df 91       	pop	r29
    c488:	cf 91       	pop	r28
    c48a:	1f 91       	pop	r17
    c48c:	0f 91       	pop	r16
    c48e:	08 95       	ret

0000c490 <animate_particles>:

void animate_particles(char dy, u8 oy)
{
    c490:	ef 92       	push	r14
    c492:	ff 92       	push	r15
    c494:	0f 93       	push	r16
    c496:	1f 93       	push	r17
    c498:	cf 93       	push	r28
    c49a:	df 93       	push	r29
    c49c:	d8 2f       	mov	r29, r24
    c49e:	16 2f       	mov	r17, r22
    c4a0:	82 ed       	ldi	r24, 0xD2	; 210
    c4a2:	e8 2e       	mov	r14, r24
    c4a4:	8f e0       	ldi	r24, 0x0F	; 15
    c4a6:	f8 2e       	mov	r15, r24
	for (u8 i = 9; i < 20; i++)
    c4a8:	c9 e0       	ldi	r28, 0x09	; 9
	{
		LBMoveSprite(i, extendedSprites[i].x, extendedSprites[i].y+dy, 1, 1);
    c4aa:	f7 01       	movw	r30, r14
    c4ac:	40 81       	ld	r20, Z
    c4ae:	4d 0f       	add	r20, r29
    c4b0:	01 e0       	ldi	r16, 0x01	; 1
    c4b2:	21 e0       	ldi	r18, 0x01	; 1
    c4b4:	31 97       	sbiw	r30, 0x01	; 1
    c4b6:	60 81       	ld	r22, Z
    c4b8:	8c 2f       	mov	r24, r28
    c4ba:	0e 94 16 4f 	call	0x9e2c	; 0x9e2c <LBMoveSprite>
		if (extendedSprites[i].y > 200)
    c4be:	f7 01       	movw	r30, r14
    c4c0:	80 81       	ld	r24, Z
    c4c2:	89 3c       	cpi	r24, 0xC9	; 201
    c4c4:	50 f0       	brcs	.+20     	; 0xc4da <animate_particles+0x4a>
		{
			LBMoveSprite(i, LBRandom(0, 224), oy, 1, 1);
    c4c6:	60 ee       	ldi	r22, 0xE0	; 224
    c4c8:	80 e0       	ldi	r24, 0x00	; 0
    c4ca:	0e 94 9f 4e 	call	0x9d3e	; 0x9d3e <LBRandom>
    c4ce:	21 e0       	ldi	r18, 0x01	; 1
    c4d0:	41 2f       	mov	r20, r17
    c4d2:	68 2f       	mov	r22, r24
    c4d4:	8c 2f       	mov	r24, r28
    c4d6:	0e 94 16 4f 	call	0x9e2c	; 0x9e2c <LBMoveSprite>
	}
}

void animate_particles(char dy, u8 oy)
{
	for (u8 i = 9; i < 20; i++)
    c4da:	cf 5f       	subi	r28, 0xFF	; 255
    c4dc:	f4 e0       	ldi	r31, 0x04	; 4
    c4de:	ef 0e       	add	r14, r31
    c4e0:	f1 1c       	adc	r15, r1
    c4e2:	c4 31       	cpi	r28, 0x14	; 20
    c4e4:	11 f7       	brne	.-60     	; 0xc4aa <animate_particles+0x1a>
		if (extendedSprites[i].y > 200)
		{
			LBMoveSprite(i, LBRandom(0, 224), oy, 1, 1);
		}
	}
}
    c4e6:	df 91       	pop	r29
    c4e8:	cf 91       	pop	r28
    c4ea:	1f 91       	pop	r17
    c4ec:	0f 91       	pop	r16
    c4ee:	ff 90       	pop	r15
    c4f0:	ef 90       	pop	r14
    c4f2:	08 95       	ret

0000c4f4 <get_emarald_map>:

const char* get_emarald_map(u8 index)
{
    c4f4:	82 50       	subi	r24, 0x02	; 2
    c4f6:	87 30       	cpi	r24, 0x07	; 7
    c4f8:	48 f4       	brcc	.+18     	; 0xc50c <get_emarald_map+0x18>
    c4fa:	e8 2f       	mov	r30, r24
    c4fc:	f0 e0       	ldi	r31, 0x00	; 0
    c4fe:	ee 0f       	add	r30, r30
    c500:	ff 1f       	adc	r31, r31
    c502:	ee 5f       	subi	r30, 0xFE	; 254
    c504:	fa 4f       	sbci	r31, 0xFA	; 250
    c506:	80 81       	ld	r24, Z
    c508:	91 81       	ldd	r25, Z+1	; 0x01
    c50a:	08 95       	ret
    c50c:	89 ec       	ldi	r24, 0xC9	; 201
    c50e:	9d e2       	ldi	r25, 0x2D	; 45
		case 4: return map_emerald_2;
		case 6: return map_emerald_3;
		case 8: return map_emerald_4;
		default: return map_emerald_0;
	}
}
    c510:	08 95       	ret

0000c512 <music_transition>:

void music_transition()
{
	if (is_space())
    c512:	0e 94 93 4f 	call	0x9f26	; 0x9f26 <is_space>
    c516:	88 23       	and	r24, r24
    c518:	19 f0       	breq	.+6      	; 0xc520 <music_transition+0xe>
	{
		StartSong(spacesong);
    c51a:	8d ea       	ldi	r24, 0xAD	; 173
    c51c:	9b e0       	ldi	r25, 0x0B	; 11
    c51e:	06 c0       	rjmp	.+12     	; 0xc52c <music_transition+0x1a>
	}
	else if (game.current_level_index != 0)
    c520:	80 91 b9 0d 	lds	r24, 0x0DB9
    c524:	88 23       	and	r24, r24
    c526:	21 f0       	breq	.+8      	; 0xc530 <music_transition+0x1e>
	{
		StartSong(planetsong);
    c528:	8d e4       	ldi	r24, 0x4D	; 77
    c52a:	92 e1       	ldi	r25, 0x12	; 18
    c52c:	0c 94 05 41 	jmp	0x820a	; 0x820a <StartSong>
    c530:	08 95       	ret

0000c532 <planet_transition>:
	}
}

void planet_transition(u8 index, char scroll, char atmosphere_height, char dy, u8 oy)
{
    c532:	cf 92       	push	r12
    c534:	df 92       	push	r13
    c536:	ef 92       	push	r14
    c538:	ff 92       	push	r15
    c53a:	0f 93       	push	r16
    c53c:	1f 93       	push	r17
    c53e:	cf 93       	push	r28
    c540:	df 93       	push	r29
    c542:	1f 92       	push	r1
    c544:	cd b7       	in	r28, 0x3d	; 61
    c546:	de b7       	in	r29, 0x3e	; 62
    c548:	c8 2e       	mov	r12, r24
    c54a:	e6 2e       	mov	r14, r22
    c54c:	12 2f       	mov	r17, r18
    c54e:	f0 2e       	mov	r15, r16
	u8 frame_counter = 0;
	
	fade_through();
    c550:	49 83       	std	Y+1, r20	; 0x01
    c552:	0e 94 a2 60 	call	0xc144	; 0xc144 <fade_through>
	Screen.scrollX = 0;
    c556:	10 92 b2 0c 	sts	0x0CB2, r1
	Screen.scrollY = 0;
    c55a:	10 92 b3 0c 	sts	0x0CB3, r1
	Screen.scrollHeight = 32;
    c55e:	80 e2       	ldi	r24, 0x20	; 32
    c560:	80 93 b4 0c 	sts	0x0CB4, r24
	Screen.overlayHeight = 0;
    c564:	10 92 af 0c 	sts	0x0CAF, r1
	game.scroll_x = 0;
    c568:	10 92 bf 0d 	sts	0x0DBF, r1
	game.scroll_y = 0;
    c56c:	10 92 c0 0d 	sts	0x0DC0, r1
	map_particles();
    c570:	0e 94 19 62 	call	0xc432	; 0xc432 <map_particles>
	map_ship();
    c574:	0e 94 7b 54 	call	0xa8f6	; 0xa8f6 <map_ship>
	place_particles();
    c578:	0e 94 26 62 	call	0xc44c	; 0xc44c <place_particles>
	DrawMap2(0, atmosphere_height, map_atmosphere);
    c57c:	4e e4       	ldi	r20, 0x4E	; 78
    c57e:	51 e5       	ldi	r21, 0x51	; 81
    c580:	69 81       	ldd	r22, Y+1	; 0x01
    c582:	80 e0       	ldi	r24, 0x00	; 0
    c584:	0e 94 5c 4c 	call	0x98b8	; 0x98b8 <DrawMap>
	game.current_level_index = index;
    c588:	c0 92 b9 0d 	sts	0x0DB9, r12
	music_transition();
    c58c:	0e 94 89 62 	call	0xc512	; 0xc512 <music_transition>
	if (!is_space())
    c590:	0e 94 93 4f 	call	0x9f26	; 0x9f26 <is_space>
    c594:	81 11       	cpse	r24, r1
    c596:	0f c0       	rjmp	.+30     	; 0xc5b6 <planet_transition+0x84>
	{
		LBMapSprite(8, get_emarald_map(index), 0);
    c598:	8c 2d       	mov	r24, r12
    c59a:	0e 94 7a 62 	call	0xc4f4	; 0xc4f4 <get_emarald_map>
    c59e:	40 e0       	ldi	r20, 0x00	; 0
    c5a0:	bc 01       	movw	r22, r24
    c5a2:	88 e0       	ldi	r24, 0x08	; 8
    c5a4:	0e 94 c4 4e 	call	0x9d88	; 0x9d88 <LBMapSprite>
		LBMoveSprite(8, 112, 48, 1, 1);
    c5a8:	01 e0       	ldi	r16, 0x01	; 1
    c5aa:	21 e0       	ldi	r18, 0x01	; 1
    c5ac:	40 e3       	ldi	r20, 0x30	; 48
    c5ae:	60 e7       	ldi	r22, 0x70	; 112
    c5b0:	88 e0       	ldi	r24, 0x08	; 8
    c5b2:	0e 94 16 4f 	call	0x9e2c	; 0x9e2c <LBMoveSprite>
		StartSong(planetsong);
	}
}

void planet_transition(u8 index, char scroll, char atmosphere_height, char dy, u8 oy)
{
    c5b6:	d1 2c       	mov	r13, r1
		LBMoveSprite(8, 112, 48, 1, 1);
	}
	
	while (frame_counter < 255)
	{
		WaitVsync(1);
    c5b8:	81 e0       	ldi	r24, 0x01	; 1
    c5ba:	90 e0       	ldi	r25, 0x00	; 0
    c5bc:	0e 94 c5 4c 	call	0x998a	; 0x998a <WaitVsync>
		LBMapSprite(0, LBGetNextFrame(&game.player.run), 0);
    c5c0:	82 e3       	ldi	r24, 0x32	; 50
    c5c2:	9e e0       	ldi	r25, 0x0E	; 14
    c5c4:	0e 94 62 4d 	call	0x9ac4	; 0x9ac4 <LBGetNextFrame>
    c5c8:	40 e0       	ldi	r20, 0x00	; 0
    c5ca:	bc 01       	movw	r22, r24
    c5cc:	80 e0       	ldi	r24, 0x00	; 0
    c5ce:	0e 94 c4 4e 	call	0x9d88	; 0x9d88 <LBMapSprite>
		LBMoveSprite(0, 104, 104, 4, 2);
    c5d2:	02 e0       	ldi	r16, 0x02	; 2
    c5d4:	24 e0       	ldi	r18, 0x04	; 4
    c5d6:	48 e6       	ldi	r20, 0x68	; 104
    c5d8:	68 e6       	ldi	r22, 0x68	; 104
    c5da:	80 e0       	ldi	r24, 0x00	; 0
    c5dc:	0e 94 16 4f 	call	0x9e2c	; 0x9e2c <LBMoveSprite>
		frame_counter++;
    c5e0:	d3 94       	inc	r13
		if (frame_counter % 16 == 0) Screen.scrollY += scroll;
    c5e2:	8d 2d       	mov	r24, r13
    c5e4:	8f 70       	andi	r24, 0x0F	; 15
    c5e6:	29 f4       	brne	.+10     	; 0xc5f2 <planet_transition+0xc0>
    c5e8:	90 91 b3 0c 	lds	r25, 0x0CB3
    c5ec:	9e 0d       	add	r25, r14
    c5ee:	90 93 b3 0c 	sts	0x0CB3, r25
		animate_particles(dy, oy);
    c5f2:	6f 2d       	mov	r22, r15
    c5f4:	81 2f       	mov	r24, r17
    c5f6:	0e 94 48 62 	call	0xc490	; 0xc490 <animate_particles>
		LBRotateSprites();
    c5fa:	0e 94 54 4f 	call	0x9ea8	; 0x9ea8 <LBRotateSprites>
	{
		LBMapSprite(8, get_emarald_map(index), 0);
		LBMoveSprite(8, 112, 48, 1, 1);
	}
	
	while (frame_counter < 255)
    c5fe:	8f ef       	ldi	r24, 0xFF	; 255
    c600:	d8 12       	cpse	r13, r24
    c602:	da cf       	rjmp	.-76     	; 0xc5b8 <planet_transition+0x86>
		frame_counter++;
		if (frame_counter % 16 == 0) Screen.scrollY += scroll;
		animate_particles(dy, oy);
		LBRotateSprites();
	}
	game.current_screen = LEVEL;
    c604:	82 e0       	ldi	r24, 0x02	; 2
    c606:	80 93 b8 0d 	sts	0x0DB8, r24
	ClearVram();
    c60a:	0e 94 11 3e 	call	0x7c22	; 0x7c22 <ClearVram>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    c60e:	64 e1       	ldi	r22, 0x14	; 20
    c610:	80 e0       	ldi	r24, 0x00	; 0
    c612:	0e 94 80 60 	call	0xc100	; 0xc100 <clear_sprites>
	LBRotateSprites();
    c616:	0e 94 54 4f 	call	0x9ea8	; 0x9ea8 <LBRotateSprites>
	fade_through();
    c61a:	0e 94 a2 60 	call	0xc144	; 0xc144 <fade_through>
	game.level_score = 0;
    c61e:	10 92 b1 0d 	sts	0x0DB1, r1
    c622:	10 92 b0 0d 	sts	0x0DB0, r1
	load_level(index, true);
    c626:	61 e0       	ldi	r22, 0x01	; 1
    c628:	8c 2d       	mov	r24, r12
    c62a:	0e 94 b2 60 	call	0xc164	; 0xc164 <load_level>
	init_player_state();
    c62e:	0e 94 c1 4f 	call	0x9f82	; 0x9f82 <init_player_state>
	init_enemy_state();
}
    c632:	0f 90       	pop	r0
    c634:	df 91       	pop	r29
    c636:	cf 91       	pop	r28
    c638:	1f 91       	pop	r17
    c63a:	0f 91       	pop	r16
    c63c:	ff 90       	pop	r15
    c63e:	ef 90       	pop	r14
    c640:	df 90       	pop	r13
    c642:	cf 90       	pop	r12
	LBRotateSprites();
	fade_through();
	game.level_score = 0;
	load_level(index, true);
	init_player_state();
	init_enemy_state();
    c644:	0c 94 ad 4f 	jmp	0x9f5a	; 0x9f5a <init_enemy_state>

0000c648 <intro>:
}


void intro()
{
    c648:	0f 93       	push	r16
	fade_through();
    c64a:	0e 94 a2 60 	call	0xc144	; 0xc144 <fade_through>
	game.lives = LIVES;
    c64e:	e6 ea       	ldi	r30, 0xA6	; 166
    c650:	fd e0       	ldi	r31, 0x0D	; 13
    c652:	81 e0       	ldi	r24, 0x01	; 1
    c654:	81 8b       	std	Z+17, r24	; 0x11
	game.score = 538;
    c656:	8a e1       	ldi	r24, 0x1A	; 26
    c658:	92 e0       	ldi	r25, 0x02	; 2
    c65a:	91 87       	std	Z+9, r25	; 0x09
    c65c:	80 87       	std	Z+8, r24	; 0x08
	game.level_score = 0;
    c65e:	13 86       	std	Z+11, r1	; 0x0b
    c660:	12 86       	std	Z+10, r1	; 0x0a
	game.time = 0;
    c662:	15 86       	std	Z+13, r1	; 0x0d
    c664:	14 86       	std	Z+12, r1	; 0x0c
	StartSong(planetsong);
    c666:	8d e4       	ldi	r24, 0x4D	; 77
    c668:	92 e1       	ldi	r25, 0x12	; 18
    c66a:	0e 94 05 41 	call	0x820a	; 0x820a <StartSong>
	LBMapSprite(0, map_emerald_0, 0);
    c66e:	40 e0       	ldi	r20, 0x00	; 0
    c670:	69 ec       	ldi	r22, 0xC9	; 201
    c672:	7d e2       	ldi	r23, 0x2D	; 45
    c674:	80 e0       	ldi	r24, 0x00	; 0
    c676:	0e 94 c4 4e 	call	0x9d88	; 0x9d88 <LBMapSprite>
	LBMoveSprite(0, 80, 48, 1, 1);
    c67a:	01 e0       	ldi	r16, 0x01	; 1
    c67c:	21 e0       	ldi	r18, 0x01	; 1
    c67e:	40 e3       	ldi	r20, 0x30	; 48
    c680:	60 e5       	ldi	r22, 0x50	; 80
    c682:	80 e0       	ldi	r24, 0x00	; 0
    c684:	0e 94 16 4f 	call	0x9e2c	; 0x9e2c <LBMoveSprite>
	LBMapSprite(1, map_emerald_1, 0);
    c688:	40 e0       	ldi	r20, 0x00	; 0
    c68a:	6c ec       	ldi	r22, 0xCC	; 204
    c68c:	7d e2       	ldi	r23, 0x2D	; 45
    c68e:	81 e0       	ldi	r24, 0x01	; 1
    c690:	0e 94 c4 4e 	call	0x9d88	; 0x9d88 <LBMapSprite>
	LBMoveSprite(1, 96, 48, 1, 1);
    c694:	21 e0       	ldi	r18, 0x01	; 1
    c696:	40 e3       	ldi	r20, 0x30	; 48
    c698:	60 e6       	ldi	r22, 0x60	; 96
    c69a:	81 e0       	ldi	r24, 0x01	; 1
    c69c:	0e 94 16 4f 	call	0x9e2c	; 0x9e2c <LBMoveSprite>
	LBMapSprite(2, map_emerald_2, 0);
    c6a0:	40 e0       	ldi	r20, 0x00	; 0
    c6a2:	66 ec       	ldi	r22, 0xC6	; 198
    c6a4:	7d e2       	ldi	r23, 0x2D	; 45
    c6a6:	82 e0       	ldi	r24, 0x02	; 2
    c6a8:	0e 94 c4 4e 	call	0x9d88	; 0x9d88 <LBMapSprite>
	LBMoveSprite(2, 112, 48, 1, 1);
    c6ac:	21 e0       	ldi	r18, 0x01	; 1
    c6ae:	40 e3       	ldi	r20, 0x30	; 48
    c6b0:	60 e7       	ldi	r22, 0x70	; 112
    c6b2:	82 e0       	ldi	r24, 0x02	; 2
    c6b4:	0e 94 16 4f 	call	0x9e2c	; 0x9e2c <LBMoveSprite>
	LBMapSprite(3, map_emerald_3, 0);
    c6b8:	40 e0       	ldi	r20, 0x00	; 0
    c6ba:	63 ec       	ldi	r22, 0xC3	; 195
    c6bc:	7d e2       	ldi	r23, 0x2D	; 45
    c6be:	83 e0       	ldi	r24, 0x03	; 3
    c6c0:	0e 94 c4 4e 	call	0x9d88	; 0x9d88 <LBMapSprite>
	LBMoveSprite(3, 128, 48, 1, 1);
    c6c4:	21 e0       	ldi	r18, 0x01	; 1
    c6c6:	40 e3       	ldi	r20, 0x30	; 48
    c6c8:	60 e8       	ldi	r22, 0x80	; 128
    c6ca:	83 e0       	ldi	r24, 0x03	; 3
    c6cc:	0e 94 16 4f 	call	0x9e2c	; 0x9e2c <LBMoveSprite>
	LBMapSprite(4, map_emerald_4, 0);
    c6d0:	40 e0       	ldi	r20, 0x00	; 0
    c6d2:	60 ec       	ldi	r22, 0xC0	; 192
    c6d4:	7d e2       	ldi	r23, 0x2D	; 45
    c6d6:	84 e0       	ldi	r24, 0x04	; 4
    c6d8:	0e 94 c4 4e 	call	0x9d88	; 0x9d88 <LBMapSprite>
	LBMoveSprite(4, 144, 48, 1, 1);
    c6dc:	21 e0       	ldi	r18, 0x01	; 1
    c6de:	40 e3       	ldi	r20, 0x30	; 48
    c6e0:	60 e9       	ldi	r22, 0x90	; 144
    c6e2:	84 e0       	ldi	r24, 0x04	; 4
    c6e4:	0e 94 16 4f 	call	0x9e2c	; 0x9e2c <LBMoveSprite>
	LBRotateSprites();
    c6e8:	0e 94 54 4f 	call	0x9ea8	; 0x9ea8 <LBRotateSprites>
	stream_dialogue((const char*) strIntro, 12);
    c6ec:	6c e0       	ldi	r22, 0x0C	; 12
    c6ee:	8d e4       	ldi	r24, 0x4D	; 77
    c6f0:	9a e0       	ldi	r25, 0x0A	; 10
    c6f2:	0e 94 e2 61 	call	0xc3c4	; 0xc3c4 <stream_dialogue>
	LBWaitSeconds(1);
    c6f6:	81 e0       	ldi	r24, 0x01	; 1
    c6f8:	0e 94 b5 4e 	call	0x9d6a	; 0x9d6a <LBWaitSeconds>
	planet_transition(0, 1, 28, -3, 199);
    c6fc:	07 ec       	ldi	r16, 0xC7	; 199
    c6fe:	2d ef       	ldi	r18, 0xFD	; 253
    c700:	4c e1       	ldi	r20, 0x1C	; 28
    c702:	61 e0       	ldi	r22, 0x01	; 1
    c704:	80 e0       	ldi	r24, 0x00	; 0
    c706:	0e 94 99 62 	call	0xc532	; 0xc532 <planet_transition>
}
    c70a:	0f 91       	pop	r16
    c70c:	08 95       	ret

0000c70e <load_splash>:

void load_splash()
{
	fade_through();
    c70e:	0e 94 a2 60 	call	0xc144	; 0xc144 <fade_through>
	Screen.scrollX = 0;
    c712:	ef ea       	ldi	r30, 0xAF	; 175
    c714:	fc e0       	ldi	r31, 0x0C	; 12
    c716:	13 82       	std	Z+3, r1	; 0x03
	Screen.scrollY = 0;
    c718:	14 82       	std	Z+4, r1	; 0x04
	Screen.scrollHeight = 32;
    c71a:	80 e2       	ldi	r24, 0x20	; 32
    c71c:	85 83       	std	Z+5, r24	; 0x05
	Screen.overlayHeight = 0;
    c71e:	10 82       	st	Z, r1
	game.current_screen = SPLASH;
    c720:	e6 ea       	ldi	r30, 0xA6	; 166
    c722:	fd e0       	ldi	r31, 0x0D	; 13
    c724:	12 8a       	std	Z+18, r1	; 0x12
	game.selection = START_SELECTED;
    c726:	17 8a       	std	Z+23, r1	; 0x17
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    c728:	64 e1       	ldi	r22, 0x14	; 20
    c72a:	80 e0       	ldi	r24, 0x00	; 0
    c72c:	0e 94 80 60 	call	0xc100	; 0xc100 <clear_sprites>
	LBRotateSprites();
    c730:	0e 94 54 4f 	call	0x9ea8	; 0x9ea8 <LBRotateSprites>
	LBPrint(8, 15, (char*) str1Player);
    c734:	4a e7       	ldi	r20, 0x7A	; 122
    c736:	5b e0       	ldi	r21, 0x0B	; 11
    c738:	6f e0       	ldi	r22, 0x0F	; 15
    c73a:	88 e0       	ldi	r24, 0x08	; 8
    c73c:	0e 94 f3 4d 	call	0x9be6	; 0x9be6 <LBPrint>
	LBPrint(8, 16, (char*) strHighScores);
    c740:	4e e6       	ldi	r20, 0x6E	; 110
    c742:	5b e0       	ldi	r21, 0x0B	; 11
    c744:	60 e1       	ldi	r22, 0x10	; 16
    c746:	88 e0       	ldi	r24, 0x08	; 8
    c748:	0e 94 f3 4d 	call	0x9be6	; 0x9be6 <LBPrint>
	LBPrint(4, 21, (char*) strCopyright);
    c74c:	48 e9       	ldi	r20, 0x98	; 152
    c74e:	5b e0       	ldi	r21, 0x0B	; 11
    c750:	65 e1       	ldi	r22, 0x15	; 21
    c752:	84 e0       	ldi	r24, 0x04	; 4
    c754:	0e 94 f3 4d 	call	0x9be6	; 0x9be6 <LBPrint>
	LBPrint(3, 26, (char*) strMusic);
    c758:	40 e8       	ldi	r20, 0x80	; 128
    c75a:	5b e0       	ldi	r21, 0x0B	; 11
    c75c:	6a e1       	ldi	r22, 0x1A	; 26
    c75e:	83 e0       	ldi	r24, 0x03	; 3
    c760:	0e 94 f3 4d 	call	0x9be6	; 0x9be6 <LBPrint>
	DrawMap2(6, 5, map_splash);
    c764:	43 e5       	ldi	r20, 0x53	; 83
    c766:	52 e5       	ldi	r21, 0x52	; 82
    c768:	65 e0       	ldi	r22, 0x05	; 5
    c76a:	86 e0       	ldi	r24, 0x06	; 6
    c76c:	0e 94 5c 4c 	call	0x98b8	; 0x98b8 <DrawMap>
	LBMapSprite(0, map_right_arrow, 0);
    c770:	40 e0       	ldi	r20, 0x00	; 0
    c772:	61 ee       	ldi	r22, 0xE1	; 225
    c774:	7d e2       	ldi	r23, 0x2D	; 45
    c776:	80 e0       	ldi	r24, 0x00	; 0
    c778:	0c 94 c4 4e 	jmp	0x9d88	; 0x9d88 <LBMapSprite>

0000c77c <load_high_scores>:
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
	}
}

void load_high_scores()
{
    c77c:	2f 92       	push	r2
    c77e:	3f 92       	push	r3
    c780:	5f 92       	push	r5
    c782:	6f 92       	push	r6
    c784:	7f 92       	push	r7
    c786:	8f 92       	push	r8
    c788:	9f 92       	push	r9
    c78a:	af 92       	push	r10
    c78c:	bf 92       	push	r11
    c78e:	cf 92       	push	r12
    c790:	df 92       	push	r13
    c792:	ef 92       	push	r14
    c794:	ff 92       	push	r15
    c796:	0f 93       	push	r16
    c798:	1f 93       	push	r17
    c79a:	cf 93       	push	r28
    c79c:	df 93       	push	r29
	u16 score = 0;
	u8 ypos = 7;
	
	game.current_screen = HIGH_SCORES;
    c79e:	81 e0       	ldi	r24, 0x01	; 1
    c7a0:	80 93 b8 0d 	sts	0x0DB8, r24
	game.high_score_index = -1;
    c7a4:	8f ef       	ldi	r24, 0xFF	; 255
    c7a6:	80 93 b6 0d 	sts	0x0DB6, r24
	fade_through();
    c7aa:	0e 94 a2 60 	call	0xc144	; 0xc144 <fade_through>
	Screen.scrollX = 0;
    c7ae:	10 92 b2 0c 	sts	0x0CB2, r1
	Screen.scrollY = 0;
    c7b2:	10 92 b3 0c 	sts	0x0CB3, r1
	Screen.scrollHeight = 32;
    c7b6:	80 e2       	ldi	r24, 0x20	; 32
    c7b8:	80 93 b4 0c 	sts	0x0CB4, r24
	Screen.overlayHeight = 0;
    c7bc:	10 92 af 0c 	sts	0x0CAF, r1
	load_eeprom(&scores);
    c7c0:	86 e8       	ldi	r24, 0x86	; 134
    c7c2:	9d e0       	ldi	r25, 0x0D	; 13
    c7c4:	0e 94 bf 51 	call	0xa37e	; 0xa37e <load_eeprom>
	
	LBPrint(9, 3, (char*) strHighScores);
    c7c8:	4e e6       	ldi	r20, 0x6E	; 110
    c7ca:	5b e0       	ldi	r21, 0x0B	; 11
    c7cc:	63 e0       	ldi	r22, 0x03	; 3
    c7ce:	89 e0       	ldi	r24, 0x09	; 9
    c7d0:	0e 94 f3 4d 	call	0x9be6	; 0x9be6 <LBPrint>
	
	LBMapSprite(0, map_emerald_0, 0);
    c7d4:	40 e0       	ldi	r20, 0x00	; 0
    c7d6:	69 ec       	ldi	r22, 0xC9	; 201
    c7d8:	7d e2       	ldi	r23, 0x2D	; 45
    c7da:	80 e0       	ldi	r24, 0x00	; 0
    c7dc:	0e 94 c4 4e 	call	0x9d88	; 0x9d88 <LBMapSprite>
	LBMapSprite(1, map_emerald_1, 0);
    c7e0:	40 e0       	ldi	r20, 0x00	; 0
    c7e2:	6c ec       	ldi	r22, 0xCC	; 204
    c7e4:	7d e2       	ldi	r23, 0x2D	; 45
    c7e6:	81 e0       	ldi	r24, 0x01	; 1
    c7e8:	0e 94 c4 4e 	call	0x9d88	; 0x9d88 <LBMapSprite>
	LBMoveSprite(0, 7*8, 3*8, 1, 1);
    c7ec:	01 e0       	ldi	r16, 0x01	; 1
    c7ee:	21 e0       	ldi	r18, 0x01	; 1
    c7f0:	48 e1       	ldi	r20, 0x18	; 24
    c7f2:	68 e3       	ldi	r22, 0x38	; 56
    c7f4:	80 e0       	ldi	r24, 0x00	; 0
    c7f6:	0e 94 16 4f 	call	0x9e2c	; 0x9e2c <LBMoveSprite>
	LBMoveSprite(1, 21*8, 3*8, 1, 1);
    c7fa:	21 e0       	ldi	r18, 0x01	; 1
    c7fc:	48 e1       	ldi	r20, 0x18	; 24
    c7fe:	68 ea       	ldi	r22, 0xA8	; 168
    c800:	81 e0       	ldi	r24, 0x01	; 1
    c802:	0e 94 16 4f 	call	0x9e2c	; 0x9e2c <LBMoveSprite>
    c806:	88 e8       	ldi	r24, 0x88	; 136
    c808:	a8 2e       	mov	r10, r24
    c80a:	8d e0       	ldi	r24, 0x0D	; 13
    c80c:	b8 2e       	mov	r11, r24
    c80e:	99 e8       	ldi	r25, 0x89	; 137
    c810:	c9 2e       	mov	r12, r25
    c812:	9d e0       	ldi	r25, 0x0D	; 13
    c814:	d9 2e       	mov	r13, r25
    c816:	2a e8       	ldi	r18, 0x8A	; 138
    c818:	82 2e       	mov	r8, r18
    c81a:	2d e0       	ldi	r18, 0x0D	; 13
    c81c:	92 2e       	mov	r9, r18
    c81e:	74 01       	movw	r14, r8
    c820:	d0 e3       	ldi	r29, 0x30	; 48
}

void load_high_scores()
{
	u16 score = 0;
	u8 ypos = 7;
    c822:	c7 e0       	ldi	r28, 0x07	; 7
	LBMoveSprite(0, 7*8, 3*8, 1, 1);
	LBMoveSprite(1, 21*8, 3*8, 1, 1);
	
	for (u8 i = 0; i < 30; i += 5)
	{
		LBPrintByte(9, ypos, i/5+1, false);
    c824:	35 e0       	ldi	r19, 0x05	; 5
    c826:	53 2e       	mov	r5, r19
    c828:	41 ea       	ldi	r20, 0xA1	; 161
    c82a:	64 2e       	mov	r6, r20
    c82c:	4d e0       	ldi	r20, 0x0D	; 13
    c82e:	74 2e       	mov	r7, r20
			// Shift scores down
			for (u8 j = 25; j > i; j -= 5)
			{
				memcpy(&(scores.data[j]), &(scores.data[j-5]), 5);
			}
			scores.data[i] = 'A';
    c830:	11 e4       	ldi	r17, 0x41	; 65
    c832:	0e 2d       	mov	r16, r14
    c834:	08 19       	sub	r16, r8
	LBMoveSprite(0, 7*8, 3*8, 1, 1);
	LBMoveSprite(1, 21*8, 3*8, 1, 1);
	
	for (u8 i = 0; i < 30; i += 5)
	{
		LBPrintByte(9, ypos, i/5+1, false);
    c836:	80 2f       	mov	r24, r16
    c838:	65 2d       	mov	r22, r5
    c83a:	0e 94 3f 6c 	call	0xd87e	; 0xd87e <__udivmodqi4>
    c83e:	41 e0       	ldi	r20, 0x01	; 1
    c840:	48 0f       	add	r20, r24
    c842:	20 e0       	ldi	r18, 0x00	; 0
    c844:	6c 2f       	mov	r22, r28
    c846:	89 e0       	ldi	r24, 0x09	; 9
    c848:	0e 94 0f 4e 	call	0x9c1e	; 0x9c1e <LBPrintByte>
		LBPrintChar(10, ypos, ' ');
    c84c:	40 e2       	ldi	r20, 0x20	; 32
    c84e:	6c 2f       	mov	r22, r28
    c850:	8a e0       	ldi	r24, 0x0A	; 10
    c852:	0e 94 d3 4d 	call	0x9ba6	; 0x9ba6 <LBPrintChar>
		LBPrintChar(11, ypos, scores.data[i]);
    c856:	f5 01       	movw	r30, r10
    c858:	40 81       	ld	r20, Z
    c85a:	6c 2f       	mov	r22, r28
    c85c:	8b e0       	ldi	r24, 0x0B	; 11
    c85e:	0e 94 d3 4d 	call	0x9ba6	; 0x9ba6 <LBPrintChar>
		LBPrintChar(12, ypos, scores.data[i+1]);
    c862:	f6 01       	movw	r30, r12
    c864:	40 81       	ld	r20, Z
    c866:	6c 2f       	mov	r22, r28
    c868:	8c e0       	ldi	r24, 0x0C	; 12
    c86a:	0e 94 d3 4d 	call	0x9ba6	; 0x9ba6 <LBPrintChar>
		LBPrintChar(13, ypos, scores.data[i+2]);
    c86e:	f7 01       	movw	r30, r14
    c870:	40 81       	ld	r20, Z
    c872:	6c 2f       	mov	r22, r28
    c874:	8d e0       	ldi	r24, 0x0D	; 13
    c876:	0e 94 d3 4d 	call	0x9ba6	; 0x9ba6 <LBPrintChar>
		LBPrintChar(14, ypos, ' ');
    c87a:	40 e2       	ldi	r20, 0x20	; 32
    c87c:	6c 2f       	mov	r22, r28
    c87e:	8e e0       	ldi	r24, 0x0E	; 14
    c880:	0e 94 d3 4d 	call	0x9ba6	; 0x9ba6 <LBPrintChar>
		memcpy(&score, &(scores.data[i+3]), 2);
    c884:	f7 01       	movw	r30, r14
    c886:	21 80       	ldd	r2, Z+1	; 0x01
    c888:	32 80       	ldd	r3, Z+2	; 0x02
		LBPrintInt(19, ypos, score, true);
    c88a:	21 e0       	ldi	r18, 0x01	; 1
    c88c:	a1 01       	movw	r20, r2
    c88e:	6c 2f       	mov	r22, r28
    c890:	83 e1       	ldi	r24, 0x13	; 19
    c892:	0e 94 40 4e 	call	0x9c80	; 0x9c80 <LBPrintInt>
		
		if (game.score > score && game.high_score_index == -1)
    c896:	20 91 ae 0d 	lds	r18, 0x0DAE
    c89a:	30 91 af 0d 	lds	r19, 0x0DAF
    c89e:	22 16       	cp	r2, r18
    c8a0:	33 06       	cpc	r3, r19
    c8a2:	08 f0       	brcs	.+2      	; 0xc8a6 <load_high_scores+0x12a>
    c8a4:	55 c0       	rjmp	.+170    	; 0xc950 <load_high_scores+0x1d4>
    c8a6:	80 91 b6 0d 	lds	r24, 0x0DB6
    c8aa:	8f 3f       	cpi	r24, 0xFF	; 255
    c8ac:	09 f0       	breq	.+2      	; 0xc8b0 <load_high_scores+0x134>
    c8ae:	50 c0       	rjmp	.+160    	; 0xc950 <load_high_scores+0x1d4>
    c8b0:	a1 ea       	ldi	r26, 0xA1	; 161
    c8b2:	bd e0       	ldi	r27, 0x0D	; 13
    c8b4:	cd 01       	movw	r24, r26
    c8b6:	05 97       	sbiw	r24, 0x05	; 5
    c8b8:	4e e1       	ldi	r20, 0x1E	; 30
    c8ba:	48 0f       	add	r20, r24
    c8bc:	46 19       	sub	r20, r6
		{
			// Shift scores down
			for (u8 j = 25; j > i; j -= 5)
    c8be:	04 17       	cp	r16, r20
    c8c0:	40 f4       	brcc	.+16     	; 0xc8d2 <load_high_scores+0x156>
			{
				memcpy(&(scores.data[j]), &(scores.data[j-5]), 5);
    c8c2:	fc 01       	movw	r30, r24
    c8c4:	45 2d       	mov	r20, r5
    c8c6:	01 90       	ld	r0, Z+
    c8c8:	0d 92       	st	X+, r0
    c8ca:	4a 95       	dec	r20
    c8cc:	e1 f7       	brne	.-8      	; 0xc8c6 <load_high_scores+0x14a>
    c8ce:	dc 01       	movw	r26, r24
    c8d0:	f1 cf       	rjmp	.-30     	; 0xc8b4 <load_high_scores+0x138>
			}
			scores.data[i] = 'A';
    c8d2:	f5 01       	movw	r30, r10
    c8d4:	10 83       	st	Z, r17
			scores.data[i+1] = 'A';
    c8d6:	f6 01       	movw	r30, r12
    c8d8:	10 83       	st	Z, r17
			scores.data[i+2] = 'A';
    c8da:	f7 01       	movw	r30, r14
    c8dc:	10 83       	st	Z, r17
			memcpy(&(scores.data[i+3]), &game.score, 2);
    c8de:	32 83       	std	Z+2, r19	; 0x02
    c8e0:	21 83       	std	Z+1, r18	; 0x01
			LBPrintChar(11, ypos, scores.data[i]);
    c8e2:	f5 01       	movw	r30, r10
    c8e4:	40 81       	ld	r20, Z
    c8e6:	6c 2f       	mov	r22, r28
    c8e8:	8b e0       	ldi	r24, 0x0B	; 11
    c8ea:	0e 94 d3 4d 	call	0x9ba6	; 0x9ba6 <LBPrintChar>
			LBPrintChar(12, ypos, scores.data[i+1]);
    c8ee:	f6 01       	movw	r30, r12
    c8f0:	40 81       	ld	r20, Z
    c8f2:	6c 2f       	mov	r22, r28
    c8f4:	8c e0       	ldi	r24, 0x0C	; 12
    c8f6:	0e 94 d3 4d 	call	0x9ba6	; 0x9ba6 <LBPrintChar>
			LBPrintChar(13, ypos, scores.data[i+2]);
    c8fa:	f7 01       	movw	r30, r14
    c8fc:	40 81       	ld	r20, Z
    c8fe:	6c 2f       	mov	r22, r28
    c900:	8d e0       	ldi	r24, 0x0D	; 13
    c902:	0e 94 d3 4d 	call	0x9ba6	; 0x9ba6 <LBPrintChar>
			LBPrintInt(19, ypos, game.score, true);
    c906:	40 91 ae 0d 	lds	r20, 0x0DAE
    c90a:	50 91 af 0d 	lds	r21, 0x0DAF
    c90e:	21 e0       	ldi	r18, 0x01	; 1
    c910:	6c 2f       	mov	r22, r28
    c912:	83 e1       	ldi	r24, 0x13	; 19
    c914:	0e 94 40 4e 	call	0x9c80	; 0x9c80 <LBPrintInt>
			game.high_score_index = i;
    c918:	00 93 b6 0d 	sts	0x0DB6, r16
			LBMapSprite(2, map_down_arrow, 0);
    c91c:	40 e0       	ldi	r20, 0x00	; 0
    c91e:	6e ed       	ldi	r22, 0xDE	; 222
    c920:	7d e2       	ldi	r23, 0x2D	; 45
    c922:	82 e0       	ldi	r24, 0x02	; 2
    c924:	0e 94 c4 4e 	call	0x9d88	; 0x9d88 <LBMapSprite>
			LBMapSprite(3, map_up_arrow, 0);
    c928:	40 e0       	ldi	r20, 0x00	; 0
    c92a:	6b ed       	ldi	r22, 0xDB	; 219
    c92c:	7d e2       	ldi	r23, 0x2D	; 45
    c92e:	83 e0       	ldi	r24, 0x03	; 3
    c930:	0e 94 c4 4e 	call	0x9d88	; 0x9d88 <LBMapSprite>
			LBMoveSprite(2, 11*8, (ypos-1)*8, 1, 1);
    c934:	01 e0       	ldi	r16, 0x01	; 1
    c936:	21 e0       	ldi	r18, 0x01	; 1
    c938:	4d 2f       	mov	r20, r29
    c93a:	68 e5       	ldi	r22, 0x58	; 88
    c93c:	82 e0       	ldi	r24, 0x02	; 2
    c93e:	0e 94 16 4f 	call	0x9e2c	; 0x9e2c <LBMoveSprite>
			LBMoveSprite(3, 11*8, (ypos+1)*8, 1, 1);
    c942:	21 e0       	ldi	r18, 0x01	; 1
    c944:	40 e1       	ldi	r20, 0x10	; 16
    c946:	4d 0f       	add	r20, r29
    c948:	68 e5       	ldi	r22, 0x58	; 88
    c94a:	83 e0       	ldi	r24, 0x03	; 3
    c94c:	0e 94 16 4f 	call	0x9e2c	; 0x9e2c <LBMoveSprite>
		}
		
		ypos += 2;
    c950:	ce 5f       	subi	r28, 0xFE	; 254
    c952:	f5 e0       	ldi	r31, 0x05	; 5
    c954:	af 0e       	add	r10, r31
    c956:	b1 1c       	adc	r11, r1
    c958:	85 e0       	ldi	r24, 0x05	; 5
    c95a:	c8 0e       	add	r12, r24
    c95c:	d1 1c       	adc	r13, r1
    c95e:	e5 e0       	ldi	r30, 0x05	; 5
    c960:	ee 0e       	add	r14, r30
    c962:	f1 1c       	adc	r15, r1
    c964:	d0 5f       	subi	r29, 0xF0	; 240
	LBMapSprite(0, map_emerald_0, 0);
	LBMapSprite(1, map_emerald_1, 0);
	LBMoveSprite(0, 7*8, 3*8, 1, 1);
	LBMoveSprite(1, 21*8, 3*8, 1, 1);
	
	for (u8 i = 0; i < 30; i += 5)
    c966:	c3 31       	cpi	r28, 0x13	; 19
    c968:	09 f0       	breq	.+2      	; 0xc96c <load_high_scores+0x1f0>
    c96a:	63 cf       	rjmp	.-314    	; 0xc832 <load_high_scores+0xb6>
		}
		
		ypos += 2;
	}
	
	LBPrint(9, 22, (char*) strMainMenu);
    c96c:	45 e4       	ldi	r20, 0x45	; 69
    c96e:	5b e0       	ldi	r21, 0x0B	; 11
    c970:	66 e1       	ldi	r22, 0x16	; 22
    c972:	89 e0       	ldi	r24, 0x09	; 9
}
    c974:	df 91       	pop	r29
    c976:	cf 91       	pop	r28
    c978:	1f 91       	pop	r17
    c97a:	0f 91       	pop	r16
    c97c:	ff 90       	pop	r15
    c97e:	ef 90       	pop	r14
    c980:	df 90       	pop	r13
    c982:	cf 90       	pop	r12
    c984:	bf 90       	pop	r11
    c986:	af 90       	pop	r10
    c988:	9f 90       	pop	r9
    c98a:	8f 90       	pop	r8
    c98c:	7f 90       	pop	r7
    c98e:	6f 90       	pop	r6
    c990:	5f 90       	pop	r5
    c992:	3f 90       	pop	r3
    c994:	2f 90       	pop	r2
		}
		
		ypos += 2;
	}
	
	LBPrint(9, 22, (char*) strMainMenu);
    c996:	0c 94 f3 4d 	jmp	0x9be6	; 0x9be6 <LBPrint>

0000c99a <exit_game>:
	}
}

void exit_game()
{
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    c99a:	64 e1       	ldi	r22, 0x14	; 20
    c99c:	80 e0       	ldi	r24, 0x00	; 0
    c99e:	0e 94 80 60 	call	0xc100	; 0xc100 <clear_sprites>
	LBRotateSprites();
    c9a2:	0e 94 54 4f 	call	0x9ea8	; 0x9ea8 <LBRotateSprites>
	init_player_state();
    c9a6:	0e 94 c1 4f 	call	0x9f82	; 0x9f82 <init_player_state>
	init_enemy_state();
    c9aa:	0e 94 ad 4f 	call	0x9f5a	; 0x9f5a <init_enemy_state>
	StopSong();
    c9ae:	0e 94 2e 41 	call	0x825c	; 0x825c <StopSong>
	load_high_scores();
    c9b2:	0c 94 be 63 	jmp	0xc77c	; 0xc77c <load_high_scores>

0000c9b6 <update_splash>:
	DrawMap2(6, 5, map_splash);
	LBMapSprite(0, map_right_arrow, 0);
}

void update_splash()
{
    c9b6:	0f 93       	push	r16
    c9b8:	cf 93       	push	r28
	if (game.joypadState.pressed & BTN_DOWN && game.selection == START_SELECTED)
    c9ba:	80 91 9c 0f 	lds	r24, 0x0F9C
    c9be:	c0 91 bd 0d 	lds	r28, 0x0DBD
    c9c2:	85 ff       	sbrs	r24, 5
    c9c4:	06 c0       	rjmp	.+12     	; 0xc9d2 <update_splash+0x1c>
    c9c6:	c1 11       	cpse	r28, r1
    c9c8:	04 c0       	rjmp	.+8      	; 0xc9d2 <update_splash+0x1c>
	{
		game.selection = HIGH_SCORES_SELECTED;
    c9ca:	81 e0       	ldi	r24, 0x01	; 1
    c9cc:	80 93 bd 0d 	sts	0x0DBD, r24
    c9d0:	06 c0       	rjmp	.+12     	; 0xc9de <update_splash+0x28>
		SFX_NAVIGATE;
	}
	else if (game.joypadState.pressed & BTN_UP && game.selection == HIGH_SCORES_SELECTED)
    c9d2:	84 ff       	sbrs	r24, 4
    c9d4:	0a c0       	rjmp	.+20     	; 0xc9ea <update_splash+0x34>
    c9d6:	c1 30       	cpi	r28, 0x01	; 1
    c9d8:	41 f4       	brne	.+16     	; 0xc9ea <update_splash+0x34>
	{
		game.selection = START_SELECTED;
    c9da:	10 92 bd 0d 	sts	0x0DBD, r1
		SFX_NAVIGATE;
    c9de:	41 e0       	ldi	r20, 0x01	; 1
    c9e0:	6f ef       	ldi	r22, 0xFF	; 255
    c9e2:	82 e0       	ldi	r24, 0x02	; 2
    c9e4:	0e 94 f0 41 	call	0x83e0	; 0x83e0 <TriggerFx>
    c9e8:	1c c0       	rjmp	.+56     	; 0xca22 <update_splash+0x6c>
	}
	else if (select_pressed(&game.joypadState) && game.selection == START_SELECTED)
    c9ea:	8c e9       	ldi	r24, 0x9C	; 156
    c9ec:	9f e0       	ldi	r25, 0x0F	; 15
    c9ee:	0e 94 d8 61 	call	0xc3b0	; 0xc3b0 <select_pressed>
    c9f2:	88 23       	and	r24, r24
    c9f4:	b1 f0       	breq	.+44     	; 0xca22 <update_splash+0x6c>
    c9f6:	c1 11       	cpse	r28, r1
    c9f8:	09 c0       	rjmp	.+18     	; 0xca0c <update_splash+0x56>
	{
		SFX_NAVIGATE;
    c9fa:	41 e0       	ldi	r20, 0x01	; 1
    c9fc:	6f ef       	ldi	r22, 0xFF	; 255
    c9fe:	82 e0       	ldi	r24, 0x02	; 2
    ca00:	0e 94 f0 41 	call	0x83e0	; 0x83e0 <TriggerFx>
	}
	else
	{
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
	}
}
    ca04:	cf 91       	pop	r28
    ca06:	0f 91       	pop	r16
		SFX_NAVIGATE;
	}
	else if (select_pressed(&game.joypadState) && game.selection == START_SELECTED)
	{
		SFX_NAVIGATE;
		intro();
    ca08:	0c 94 24 63 	jmp	0xc648	; 0xc648 <intro>
		return;
	}
	else if (select_pressed(&game.joypadState) && game.selection == HIGH_SCORES_SELECTED)
    ca0c:	c1 30       	cpi	r28, 0x01	; 1
    ca0e:	49 f4       	brne	.+18     	; 0xca22 <update_splash+0x6c>
	{
		SFX_NAVIGATE;
    ca10:	41 e0       	ldi	r20, 0x01	; 1
    ca12:	6f ef       	ldi	r22, 0xFF	; 255
    ca14:	82 e0       	ldi	r24, 0x02	; 2
    ca16:	0e 94 f0 41 	call	0x83e0	; 0x83e0 <TriggerFx>
	}
	else
	{
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
	}
}
    ca1a:	cf 91       	pop	r28
    ca1c:	0f 91       	pop	r16
		return;
	}
	else if (select_pressed(&game.joypadState) && game.selection == HIGH_SCORES_SELECTED)
	{
		SFX_NAVIGATE;
		load_high_scores();
    ca1e:	0c 94 be 63 	jmp	0xc77c	; 0xc77c <load_high_scores>
		return;
	}
	
	if (game.selection == START_SELECTED)
    ca22:	80 91 bd 0d 	lds	r24, 0x0DBD
	{
		LBMoveSprite(0, 7*8, 15*8, 1, 1);
    ca26:	01 e0       	ldi	r16, 0x01	; 1
    ca28:	21 e0       	ldi	r18, 0x01	; 1
		SFX_NAVIGATE;
		load_high_scores();
		return;
	}
	
	if (game.selection == START_SELECTED)
    ca2a:	81 11       	cpse	r24, r1
    ca2c:	03 c0       	rjmp	.+6      	; 0xca34 <update_splash+0x7e>
	{
		LBMoveSprite(0, 7*8, 15*8, 1, 1);
    ca2e:	48 e7       	ldi	r20, 0x78	; 120
    ca30:	68 e3       	ldi	r22, 0x38	; 56
    ca32:	03 c0       	rjmp	.+6      	; 0xca3a <update_splash+0x84>
	}
	else
	{
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
    ca34:	40 e8       	ldi	r20, 0x80	; 128
    ca36:	68 e3       	ldi	r22, 0x38	; 56
    ca38:	80 e0       	ldi	r24, 0x00	; 0
    ca3a:	0e 94 16 4f 	call	0x9e2c	; 0x9e2c <LBMoveSprite>
	}
}
    ca3e:	cf 91       	pop	r28
    ca40:	0f 91       	pop	r16
    ca42:	08 95       	ret

0000ca44 <update_high_scores>:
	
	LBPrint(9, 22, (char*) strMainMenu);
}

void update_high_scores()
{
    ca44:	0f 93       	push	r16
	if (game.joypadState.pressed & BTN_X || select_pressed(&game.joypadState))
    ca46:	80 91 9c 0f 	lds	r24, 0x0F9C
    ca4a:	90 91 9d 0f 	lds	r25, 0x0F9D
    ca4e:	91 fd       	sbrc	r25, 1
    ca50:	06 c0       	rjmp	.+12     	; 0xca5e <update_high_scores+0x1a>
    ca52:	8c e9       	ldi	r24, 0x9C	; 156
    ca54:	9f e0       	ldi	r25, 0x0F	; 15
    ca56:	0e 94 d8 61 	call	0xc3b0	; 0xc3b0 <select_pressed>
    ca5a:	88 23       	and	r24, r24
    ca5c:	91 f0       	breq	.+36     	; 0xca82 <update_high_scores+0x3e>
	{
		SFX_NAVIGATE;
    ca5e:	41 e0       	ldi	r20, 0x01	; 1
    ca60:	6f ef       	ldi	r22, 0xFF	; 255
    ca62:	82 e0       	ldi	r24, 0x02	; 2
    ca64:	0e 94 f0 41 	call	0x83e0	; 0x83e0 <TriggerFx>
		game.high_score_index = -1;
    ca68:	8f ef       	ldi	r24, 0xFF	; 255
    ca6a:	80 93 b6 0d 	sts	0x0DB6, r24
		game.score = 0;
    ca6e:	10 92 af 0d 	sts	0x0DAF, r1
    ca72:	10 92 ae 0d 	sts	0x0DAE, r1
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    ca76:	86 e8       	ldi	r24, 0x86	; 134
    ca78:	9d e0       	ldi	r25, 0x0D	; 13
    ca7a:	0e 94 8c 3f 	call	0x7f18	; 0x7f18 <EepromWriteBlock>
	{
		SFX_NAVIGATE;
		game.high_score_index = -1;
		game.score = 0;
		save_eeprom(&scores);
		load_splash();
    ca7e:	0e 94 87 63 	call	0xc70e	; 0xc70e <load_splash>
	}
	
	if (game.high_score_index != -1)
    ca82:	30 91 b6 0d 	lds	r19, 0x0DB6
    ca86:	3f 3f       	cpi	r19, 0xFF	; 255
    ca88:	09 f4       	brne	.+2      	; 0xca8c <update_high_scores+0x48>
    ca8a:	7e c0       	rjmp	.+252    	; 0xcb88 <update_high_scores+0x144>
	{
		if (game.joypadState.pressed & BTN_RIGHT && game.high_score_index % 5 != 2)
    ca8c:	20 91 9c 0f 	lds	r18, 0x0F9C
    ca90:	27 ff       	sbrs	r18, 7
    ca92:	1e c0       	rjmp	.+60     	; 0xcad0 <update_high_scores+0x8c>
    ca94:	83 2f       	mov	r24, r19
    ca96:	65 e0       	ldi	r22, 0x05	; 5
    ca98:	0e 94 4b 6c 	call	0xd896	; 0xd896 <__divmodqi4>
    ca9c:	92 30       	cpi	r25, 0x02	; 2
    ca9e:	c1 f0       	breq	.+48     	; 0xcad0 <update_high_scores+0x8c>
		{
			SFX_NAVIGATE;
    caa0:	41 e0       	ldi	r20, 0x01	; 1
    caa2:	6f ef       	ldi	r22, 0xFF	; 255
    caa4:	82 e0       	ldi	r24, 0x02	; 2
    caa6:	0e 94 f0 41 	call	0x83e0	; 0x83e0 <TriggerFx>
			game.high_score_index++;
    caaa:	80 91 b6 0d 	lds	r24, 0x0DB6
    caae:	8f 5f       	subi	r24, 0xFF	; 255
    cab0:	80 93 b6 0d 	sts	0x0DB6, r24
			LBMoveSprite(2, extendedSprites[2].x+8, extendedSprites[2].y, 1, 1);
    cab4:	60 91 b5 0f 	lds	r22, 0x0FB5
    cab8:	68 5f       	subi	r22, 0xF8	; 248
    caba:	01 e0       	ldi	r16, 0x01	; 1
    cabc:	21 e0       	ldi	r18, 0x01	; 1
    cabe:	40 91 b6 0f 	lds	r20, 0x0FB6
    cac2:	82 e0       	ldi	r24, 0x02	; 2
    cac4:	0e 94 16 4f 	call	0x9e2c	; 0x9e2c <LBMoveSprite>
			LBMoveSprite(3, extendedSprites[3].x+8, extendedSprites[3].y, 1, 1);
    cac8:	60 91 b9 0f 	lds	r22, 0x0FB9
    cacc:	68 5f       	subi	r22, 0xF8	; 248
    cace:	1f c0       	rjmp	.+62     	; 0xcb0e <update_high_scores+0xca>
		}
		else if (game.joypadState.pressed & BTN_LEFT && game.high_score_index % 5 != 0)
    cad0:	26 ff       	sbrs	r18, 6
    cad2:	24 c0       	rjmp	.+72     	; 0xcb1c <update_high_scores+0xd8>
    cad4:	83 2f       	mov	r24, r19
    cad6:	65 e0       	ldi	r22, 0x05	; 5
    cad8:	0e 94 4b 6c 	call	0xd896	; 0xd896 <__divmodqi4>
    cadc:	99 23       	and	r25, r25
    cade:	f1 f0       	breq	.+60     	; 0xcb1c <update_high_scores+0xd8>
		{
			SFX_NAVIGATE;
    cae0:	41 e0       	ldi	r20, 0x01	; 1
    cae2:	6f ef       	ldi	r22, 0xFF	; 255
    cae4:	82 e0       	ldi	r24, 0x02	; 2
    cae6:	0e 94 f0 41 	call	0x83e0	; 0x83e0 <TriggerFx>
			game.high_score_index--;
    caea:	80 91 b6 0d 	lds	r24, 0x0DB6
    caee:	81 50       	subi	r24, 0x01	; 1
    caf0:	80 93 b6 0d 	sts	0x0DB6, r24
			LBMoveSprite(2, extendedSprites[2].x-8, extendedSprites[2].y, 1, 1);
    caf4:	60 91 b5 0f 	lds	r22, 0x0FB5
    caf8:	68 50       	subi	r22, 0x08	; 8
    cafa:	01 e0       	ldi	r16, 0x01	; 1
    cafc:	21 e0       	ldi	r18, 0x01	; 1
    cafe:	40 91 b6 0f 	lds	r20, 0x0FB6
    cb02:	82 e0       	ldi	r24, 0x02	; 2
    cb04:	0e 94 16 4f 	call	0x9e2c	; 0x9e2c <LBMoveSprite>
			LBMoveSprite(3, extendedSprites[3].x-8, extendedSprites[3].y, 1, 1);
    cb08:	60 91 b9 0f 	lds	r22, 0x0FB9
    cb0c:	68 50       	subi	r22, 0x08	; 8
    cb0e:	21 e0       	ldi	r18, 0x01	; 1
    cb10:	40 91 ba 0f 	lds	r20, 0x0FBA
    cb14:	83 e0       	ldi	r24, 0x03	; 3
    cb16:	0e 94 16 4f 	call	0x9e2c	; 0x9e2c <LBMoveSprite>
    cb1a:	36 c0       	rjmp	.+108    	; 0xcb88 <update_high_scores+0x144>
		}
		else if (game.joypadState.pressed & BTN_UP)
    cb1c:	24 ff       	sbrs	r18, 4
    cb1e:	13 c0       	rjmp	.+38     	; 0xcb46 <update_high_scores+0x102>
		{
			SFX_NAVIGATE;
    cb20:	41 e0       	ldi	r20, 0x01	; 1
    cb22:	6f ef       	ldi	r22, 0xFF	; 255
    cb24:	82 e0       	ldi	r24, 0x02	; 2
    cb26:	0e 94 f0 41 	call	0x83e0	; 0x83e0 <TriggerFx>
			scores.data[game.high_score_index] = scores.data[game.high_score_index]-1;
    cb2a:	80 91 b6 0d 	lds	r24, 0x0DB6
    cb2e:	e8 2f       	mov	r30, r24
    cb30:	ff 27       	eor	r31, r31
    cb32:	e7 fd       	sbrc	r30, 7
    cb34:	f0 95       	com	r31
    cb36:	ea 57       	subi	r30, 0x7A	; 122
    cb38:	f2 4f       	sbci	r31, 0xF2	; 242
    cb3a:	92 81       	ldd	r25, Z+2	; 0x02
    cb3c:	91 50       	subi	r25, 0x01	; 1
			if (scores.data[game.high_score_index] < 'A') scores.data[game.high_score_index] = 'A';
    cb3e:	91 34       	cpi	r25, 0x41	; 65
    cb40:	b0 f4       	brcc	.+44     	; 0xcb6e <update_high_scores+0x12a>
    cb42:	91 e4       	ldi	r25, 0x41	; 65
    cb44:	14 c0       	rjmp	.+40     	; 0xcb6e <update_high_scores+0x12a>
			LBPrintChar(11+(game.high_score_index % 5), 7+(game.high_score_index/5)*2, scores.data[game.high_score_index]);
		}
		else if (game.joypadState.pressed & BTN_DOWN)
    cb46:	25 ff       	sbrs	r18, 5
    cb48:	1f c0       	rjmp	.+62     	; 0xcb88 <update_high_scores+0x144>
		{
			SFX_NAVIGATE;
    cb4a:	41 e0       	ldi	r20, 0x01	; 1
    cb4c:	6f ef       	ldi	r22, 0xFF	; 255
    cb4e:	82 e0       	ldi	r24, 0x02	; 2
    cb50:	0e 94 f0 41 	call	0x83e0	; 0x83e0 <TriggerFx>
			scores.data[game.high_score_index] = scores.data[game.high_score_index]+1;
    cb54:	80 91 b6 0d 	lds	r24, 0x0DB6
    cb58:	e8 2f       	mov	r30, r24
    cb5a:	ff 27       	eor	r31, r31
    cb5c:	e7 fd       	sbrc	r30, 7
    cb5e:	f0 95       	com	r31
    cb60:	ea 57       	subi	r30, 0x7A	; 122
    cb62:	f2 4f       	sbci	r31, 0xF2	; 242
    cb64:	92 81       	ldd	r25, Z+2	; 0x02
    cb66:	9f 5f       	subi	r25, 0xFF	; 255
			if (scores.data[game.high_score_index] > 'Z') scores.data[game.high_score_index] = 'Z';
    cb68:	9b 35       	cpi	r25, 0x5B	; 91
    cb6a:	08 f0       	brcs	.+2      	; 0xcb6e <update_high_scores+0x12a>
    cb6c:	9a e5       	ldi	r25, 0x5A	; 90
    cb6e:	92 83       	std	Z+2, r25	; 0x02
			LBPrintChar(11+(game.high_score_index % 5), 7+(game.high_score_index/5)*2, scores.data[game.high_score_index]);
    cb70:	65 e0       	ldi	r22, 0x05	; 5
    cb72:	0e 94 4b 6c 	call	0xd896	; 0xd896 <__divmodqi4>
    cb76:	68 2f       	mov	r22, r24
    cb78:	66 0f       	add	r22, r22
    cb7a:	69 5f       	subi	r22, 0xF9	; 249
    cb7c:	42 81       	ldd	r20, Z+2	; 0x02
    cb7e:	8b e0       	ldi	r24, 0x0B	; 11
    cb80:	89 0f       	add	r24, r25
		}
	}
}
    cb82:	0f 91       	pop	r16
		else if (game.joypadState.pressed & BTN_DOWN)
		{
			SFX_NAVIGATE;
			scores.data[game.high_score_index] = scores.data[game.high_score_index]+1;
			if (scores.data[game.high_score_index] > 'Z') scores.data[game.high_score_index] = 'Z';
			LBPrintChar(11+(game.high_score_index % 5), 7+(game.high_score_index/5)*2, scores.data[game.high_score_index]);
    cb84:	0c 94 d3 4d 	jmp	0x9ba6	; 0x9ba6 <LBPrintChar>
		}
	}
}
    cb88:	0f 91       	pop	r16
    cb8a:	08 95       	ret

0000cb8c <tally_score>:
		}
	}
}

void tally_score(char* title, u16 bonus)
{
    cb8c:	2f 92       	push	r2
    cb8e:	3f 92       	push	r3
    cb90:	4f 92       	push	r4
    cb92:	5f 92       	push	r5
    cb94:	6f 92       	push	r6
    cb96:	7f 92       	push	r7
    cb98:	8f 92       	push	r8
    cb9a:	9f 92       	push	r9
    cb9c:	af 92       	push	r10
    cb9e:	bf 92       	push	r11
    cba0:	cf 92       	push	r12
    cba2:	df 92       	push	r13
    cba4:	ef 92       	push	r14
    cba6:	ff 92       	push	r15
    cba8:	0f 93       	push	r16
    cbaa:	1f 93       	push	r17
    cbac:	cf 93       	push	r28
    cbae:	df 93       	push	r29
    cbb0:	7c 01       	movw	r14, r24
    cbb2:	6b 01       	movw	r12, r22
	u8 x = Screen.scrollX / 8;
    cbb4:	c0 91 b2 0c 	lds	r28, 0x0CB2
    cbb8:	c6 95       	lsr	r28
    cbba:	c6 95       	lsr	r28
    cbbc:	c6 95       	lsr	r28
	u8 y = Screen.scrollY / 8;
    cbbe:	00 91 b3 0c 	lds	r16, 0x0CB3
    cbc2:	06 95       	lsr	r16
    cbc4:	06 95       	lsr	r16
    cbc6:	06 95       	lsr	r16
	u16 tally = game.score;
    cbc8:	a0 90 ae 0d 	lds	r10, 0x0DAE
    cbcc:	b0 90 af 0d 	lds	r11, 0x0DAF
	u16 counter = 0;
	
	hide_sprites(0, MAX_EXTENDED_SPRITES);
    cbd0:	64 e1       	ldi	r22, 0x14	; 20
    cbd2:	80 e0       	ldi	r24, 0x00	; 0
    cbd4:	0e 94 bc 61 	call	0xc378	; 0xc378 <hide_sprites>
	LBRotateSprites();
    cbd8:	0e 94 54 4f 	call	0x9ea8	; 0x9ea8 <LBRotateSprites>
	
	StopSong();
    cbdc:	0e 94 2e 41 	call	0x825c	; 0x825c <StopSong>
	DrawMap2((x+8)%32, (y+6)%30, map_canvas);
    cbe0:	10 e0       	ldi	r17, 0x00	; 0
    cbe2:	d0 e0       	ldi	r29, 0x00	; 0
    cbe4:	c8 01       	movw	r24, r16
    cbe6:	06 96       	adiw	r24, 0x06	; 6
    cbe8:	2e e1       	ldi	r18, 0x1E	; 30
    cbea:	82 2e       	mov	r8, r18
    cbec:	91 2c       	mov	r9, r1
    cbee:	b4 01       	movw	r22, r8
    cbf0:	0e 94 6d 6c 	call	0xd8da	; 0xd8da <__divmodhi4>
    cbf4:	9e 01       	movw	r18, r28
    cbf6:	28 5f       	subi	r18, 0xF8	; 248
    cbf8:	3f 4f       	sbci	r19, 0xFF	; 255
    cbfa:	4a ec       	ldi	r20, 0xCA	; 202
    cbfc:	51 e5       	ldi	r21, 0x51	; 81
    cbfe:	68 2f       	mov	r22, r24
    cc00:	82 2f       	mov	r24, r18
    cc02:	8f 71       	andi	r24, 0x1F	; 31
    cc04:	0e 94 5c 4c 	call	0x98b8	; 0x98b8 <DrawMap>
	LBPrint((x+10)%32, (y+7)%30, title);
    cc08:	c8 01       	movw	r24, r16
    cc0a:	07 96       	adiw	r24, 0x07	; 7
    cc0c:	b4 01       	movw	r22, r8
    cc0e:	0e 94 6d 6c 	call	0xd8da	; 0xd8da <__divmodhi4>
    cc12:	9e 01       	movw	r18, r28
    cc14:	26 5f       	subi	r18, 0xF6	; 246
    cc16:	3f 4f       	sbci	r19, 0xFF	; 255
    cc18:	a7 01       	movw	r20, r14
    cc1a:	68 2f       	mov	r22, r24
    cc1c:	82 2f       	mov	r24, r18
    cc1e:	8f 71       	andi	r24, 0x1F	; 31
    cc20:	0e 94 f3 4d 	call	0x9be6	; 0x9be6 <LBPrint>
	LBPrint((x+9)%32, (y+9)%30, (char*) strTally);
    cc24:	c8 01       	movw	r24, r16
    cc26:	09 96       	adiw	r24, 0x09	; 9
    cc28:	b4 01       	movw	r22, r8
    cc2a:	0e 94 6d 6c 	call	0xd8da	; 0xd8da <__divmodhi4>
    cc2e:	48 2e       	mov	r4, r24
    cc30:	78 2e       	mov	r7, r24
    cc32:	7e 01       	movw	r14, r28
    cc34:	29 e0       	ldi	r18, 0x09	; 9
    cc36:	e2 0e       	add	r14, r18
    cc38:	f1 1c       	adc	r15, r1
    cc3a:	8f e1       	ldi	r24, 0x1F	; 31
    cc3c:	e8 22       	and	r14, r24
    cc3e:	ff 24       	eor	r15, r15
    cc40:	40 e1       	ldi	r20, 0x10	; 16
    cc42:	5b e0       	ldi	r21, 0x0B	; 11
    cc44:	64 2d       	mov	r22, r4
    cc46:	8e 2d       	mov	r24, r14
    cc48:	0e 94 f3 4d 	call	0x9be6	; 0x9be6 <LBPrint>
	LBPrint((x+9)%32, (y+11)%30, (char*) strScore);
    cc4c:	c8 01       	movw	r24, r16
    cc4e:	0b 96       	adiw	r24, 0x0b	; 11
    cc50:	b4 01       	movw	r22, r8
    cc52:	0e 94 6d 6c 	call	0xd8da	; 0xd8da <__divmodhi4>
    cc56:	38 2e       	mov	r3, r24
    cc58:	68 2e       	mov	r6, r24
    cc5a:	46 e6       	ldi	r20, 0x66	; 102
    cc5c:	5b e0       	ldi	r21, 0x0B	; 11
    cc5e:	68 2f       	mov	r22, r24
    cc60:	8e 2d       	mov	r24, r14
    cc62:	0e 94 f3 4d 	call	0x9be6	; 0x9be6 <LBPrint>
	LBPrint((x+9)%32, (y+12)%30, (char*) strTime);
    cc66:	c8 01       	movw	r24, r16
    cc68:	0c 96       	adiw	r24, 0x0c	; 12
    cc6a:	b4 01       	movw	r22, r8
    cc6c:	0e 94 6d 6c 	call	0xd8da	; 0xd8da <__divmodhi4>
    cc70:	58 2e       	mov	r5, r24
    cc72:	f8 2e       	mov	r15, r24
    cc74:	41 e5       	ldi	r20, 0x51	; 81
    cc76:	5b e0       	ldi	r21, 0x0B	; 11
    cc78:	68 2f       	mov	r22, r24
    cc7a:	8e 2d       	mov	r24, r14
    cc7c:	0e 94 f3 4d 	call	0x9be6	; 0x9be6 <LBPrint>
	LBPrint((x+9)%32, (y+13)%30, (char*) strLevelBonus);
    cc80:	c8 01       	movw	r24, r16
    cc82:	0d 96       	adiw	r24, 0x0d	; 13
    cc84:	b4 01       	movw	r22, r8
    cc86:	0e 94 6d 6c 	call	0xd8da	; 0xd8da <__divmodhi4>
    cc8a:	18 2f       	mov	r17, r24
    cc8c:	28 2e       	mov	r2, r24
    cc8e:	41 e2       	ldi	r20, 0x21	; 33
    cc90:	5b e0       	ldi	r21, 0x0B	; 11
    cc92:	68 2f       	mov	r22, r24
    cc94:	8e 2d       	mov	r24, r14
    cc96:	0e 94 f3 4d 	call	0x9be6	; 0x9be6 <LBPrint>
	
	LBPrintInt((x+20)%32, (y+9)%30, tally, true);
    cc9a:	64 96       	adiw	r28, 0x14	; 20
    cc9c:	cf 71       	andi	r28, 0x1F	; 31
    cc9e:	dd 27       	eor	r29, r29
    cca0:	ec 2e       	mov	r14, r28
    cca2:	21 e0       	ldi	r18, 0x01	; 1
    cca4:	a5 01       	movw	r20, r10
    cca6:	64 2d       	mov	r22, r4
    cca8:	8c 2f       	mov	r24, r28
    ccaa:	0e 94 40 4e 	call	0x9c80	; 0x9c80 <LBPrintInt>
	LBPrintInt((x+20)%32, (y+11)%30, game.level_score, true);
    ccae:	40 91 b0 0d 	lds	r20, 0x0DB0
    ccb2:	50 91 b1 0d 	lds	r21, 0x0DB1
    ccb6:	21 e0       	ldi	r18, 0x01	; 1
    ccb8:	63 2d       	mov	r22, r3
    ccba:	8c 2f       	mov	r24, r28
    ccbc:	0e 94 40 4e 	call	0x9c80	; 0x9c80 <LBPrintInt>
	LBPrintInt((x+20)%32, (y+12)%30, game.time, true);
    ccc0:	40 91 b2 0d 	lds	r20, 0x0DB2
    ccc4:	50 91 b3 0d 	lds	r21, 0x0DB3
    ccc8:	21 e0       	ldi	r18, 0x01	; 1
    ccca:	65 2d       	mov	r22, r5
    cccc:	8c 2f       	mov	r24, r28
    ccce:	0e 94 40 4e 	call	0x9c80	; 0x9c80 <LBPrintInt>
	LBPrintInt((x+20)%32, (y+13)%30, bonus, true);
    ccd2:	21 e0       	ldi	r18, 0x01	; 1
    ccd4:	a6 01       	movw	r20, r12
    ccd6:	61 2f       	mov	r22, r17
    ccd8:	8c 2f       	mov	r24, r28
    ccda:	0e 94 40 4e 	call	0x9c80	; 0x9c80 <LBPrintInt>
	
	LBWaitSeconds(2);
    ccde:	82 e0       	ldi	r24, 0x02	; 2
    cce0:	0e 94 b5 4e 	call	0x9d6a	; 0x9d6a <LBWaitSeconds>
	
	// Tally Score
	counter = game.level_score;
    cce4:	80 90 b0 0d 	lds	r8, 0x0DB0
    cce8:	90 90 b1 0d 	lds	r9, 0x0DB1
    ccec:	e4 01       	movw	r28, r8

void tally_score(char* title, u16 bonus)
{
	u8 x = Screen.scrollX / 8;
	u8 y = Screen.scrollY / 8;
	u16 tally = game.score;
    ccee:	85 01       	movw	r16, r10
	
	LBWaitSeconds(2);
	
	// Tally Score
	counter = game.level_score;
	while (counter > 0)
    ccf0:	20 97       	sbiw	r28, 0x00	; 0
    ccf2:	e9 f0       	breq	.+58     	; 0xcd2e <tally_score+0x1a2>
	{
		WaitVsync(1);
    ccf4:	81 e0       	ldi	r24, 0x01	; 1
    ccf6:	90 e0       	ldi	r25, 0x00	; 0
    ccf8:	0e 94 c5 4c 	call	0x998a	; 0x998a <WaitVsync>
		SFX_HIT;
    ccfc:	41 e0       	ldi	r20, 0x01	; 1
    ccfe:	6f ef       	ldi	r22, 0xFF	; 255
    cd00:	84 e0       	ldi	r24, 0x04	; 4
    cd02:	0e 94 f0 41 	call	0x83e0	; 0x83e0 <TriggerFx>
		tally += 1;
    cd06:	0f 5f       	subi	r16, 0xFF	; 255
    cd08:	1f 4f       	sbci	r17, 0xFF	; 255
		counter -= 1;
    cd0a:	21 97       	sbiw	r28, 0x01	; 1
		LBPrintInt((x+20)%32, (y+9)%30, tally, true);
    cd0c:	21 e0       	ldi	r18, 0x01	; 1
    cd0e:	a8 01       	movw	r20, r16
    cd10:	67 2d       	mov	r22, r7
    cd12:	8e 2d       	mov	r24, r14
    cd14:	0e 94 40 4e 	call	0x9c80	; 0x9c80 <LBPrintInt>
		LBPrintInt((x+20)%32, (y+11)%30, counter, true);
    cd18:	21 e0       	ldi	r18, 0x01	; 1
    cd1a:	ae 01       	movw	r20, r28
    cd1c:	66 2d       	mov	r22, r6
    cd1e:	8e 2d       	mov	r24, r14
    cd20:	0e 94 40 4e 	call	0x9c80	; 0x9c80 <LBPrintInt>
		WaitUs(TALLY_DELAY);
    cd24:	8c ed       	ldi	r24, 0xDC	; 220
    cd26:	95 e0       	ldi	r25, 0x05	; 5
    cd28:	0e 94 47 3e 	call	0x7c8e	; 0x7c8e <WaitUs>
    cd2c:	e1 cf       	rjmp	.-62     	; 0xccf0 <tally_score+0x164>
    cd2e:	a8 0c       	add	r10, r8
    cd30:	b9 1c       	adc	r11, r9
	}
	
	// Tally Time
	counter = game.time;
    cd32:	c0 91 b2 0d 	lds	r28, 0x0DB2
    cd36:	d0 91 b3 0d 	lds	r29, 0x0DB3
	while (counter > 0)
    cd3a:	20 97       	sbiw	r28, 0x00	; 0
    cd3c:	31 f1       	breq	.+76     	; 0xcd8a <tally_score+0x1fe>
	{
		WaitVsync(1);
    cd3e:	81 e0       	ldi	r24, 0x01	; 1
    cd40:	90 e0       	ldi	r25, 0x00	; 0
    cd42:	0e 94 c5 4c 	call	0x998a	; 0x998a <WaitVsync>
		SFX_HIT;
    cd46:	41 e0       	ldi	r20, 0x01	; 1
    cd48:	6f ef       	ldi	r22, 0xFF	; 255
    cd4a:	84 e0       	ldi	r24, 0x04	; 4
    cd4c:	0e 94 f0 41 	call	0x83e0	; 0x83e0 <TriggerFx>
		tally -= 1;
		if (tally == 0 || tally == 65535) tally = 0;
    cd50:	c5 01       	movw	r24, r10
    cd52:	02 97       	sbiw	r24, 0x02	; 2
    cd54:	8e 3f       	cpi	r24, 0xFE	; 254
    cd56:	9f 4f       	sbci	r25, 0xFF	; 255
    cd58:	20 f4       	brcc	.+8      	; 0xcd62 <tally_score+0x1d6>
	counter = game.time;
	while (counter > 0)
	{
		WaitVsync(1);
		SFX_HIT;
		tally -= 1;
    cd5a:	81 e0       	ldi	r24, 0x01	; 1
    cd5c:	a8 1a       	sub	r10, r24
    cd5e:	b1 08       	sbc	r11, r1
    cd60:	02 c0       	rjmp	.+4      	; 0xcd66 <tally_score+0x1da>
		if (tally == 0 || tally == 65535) tally = 0;
    cd62:	a1 2c       	mov	r10, r1
    cd64:	b1 2c       	mov	r11, r1
		counter -= 1;
    cd66:	21 97       	sbiw	r28, 0x01	; 1
		LBPrintInt((x+20)%32, (y+9)%30, tally, true);
    cd68:	21 e0       	ldi	r18, 0x01	; 1
    cd6a:	a5 01       	movw	r20, r10
    cd6c:	67 2d       	mov	r22, r7
    cd6e:	8e 2d       	mov	r24, r14
    cd70:	0e 94 40 4e 	call	0x9c80	; 0x9c80 <LBPrintInt>
		LBPrintInt((x+20)%32, (y+12)%30, counter, true);
    cd74:	21 e0       	ldi	r18, 0x01	; 1
    cd76:	ae 01       	movw	r20, r28
    cd78:	6f 2d       	mov	r22, r15
    cd7a:	8e 2d       	mov	r24, r14
    cd7c:	0e 94 40 4e 	call	0x9c80	; 0x9c80 <LBPrintInt>
		WaitUs(TALLY_DELAY);
    cd80:	8c ed       	ldi	r24, 0xDC	; 220
    cd82:	95 e0       	ldi	r25, 0x05	; 5
    cd84:	0e 94 47 3e 	call	0x7c8e	; 0x7c8e <WaitUs>
    cd88:	d8 cf       	rjmp	.-80     	; 0xcd3a <tally_score+0x1ae>
    cd8a:	85 01       	movw	r16, r10
		WaitUs(TALLY_DELAY);
	}
	
	// Tally Time
	counter = game.time;
	while (counter > 0)
    cd8c:	e6 01       	movw	r28, r12
		WaitUs(TALLY_DELAY);
	}
	
	// Tally Level Bonus
	counter = bonus;
	while (counter > 0)
    cd8e:	20 97       	sbiw	r28, 0x00	; 0
    cd90:	e9 f0       	breq	.+58     	; 0xcdcc <tally_score+0x240>
	{
		WaitVsync(1);
    cd92:	81 e0       	ldi	r24, 0x01	; 1
    cd94:	90 e0       	ldi	r25, 0x00	; 0
    cd96:	0e 94 c5 4c 	call	0x998a	; 0x998a <WaitVsync>
		SFX_HIT;
    cd9a:	41 e0       	ldi	r20, 0x01	; 1
    cd9c:	6f ef       	ldi	r22, 0xFF	; 255
    cd9e:	84 e0       	ldi	r24, 0x04	; 4
    cda0:	0e 94 f0 41 	call	0x83e0	; 0x83e0 <TriggerFx>
		tally += 1;
    cda4:	0f 5f       	subi	r16, 0xFF	; 255
    cda6:	1f 4f       	sbci	r17, 0xFF	; 255
		counter -= 1;
    cda8:	21 97       	sbiw	r28, 0x01	; 1
		LBPrintInt((x+20)%32, (y+9)%30, tally, true);
    cdaa:	21 e0       	ldi	r18, 0x01	; 1
    cdac:	a8 01       	movw	r20, r16
    cdae:	67 2d       	mov	r22, r7
    cdb0:	8e 2d       	mov	r24, r14
    cdb2:	0e 94 40 4e 	call	0x9c80	; 0x9c80 <LBPrintInt>
		LBPrintInt((x+20)%32, (y+13)%30, counter, true);
    cdb6:	21 e0       	ldi	r18, 0x01	; 1
    cdb8:	ae 01       	movw	r20, r28
    cdba:	62 2d       	mov	r22, r2
    cdbc:	8e 2d       	mov	r24, r14
    cdbe:	0e 94 40 4e 	call	0x9c80	; 0x9c80 <LBPrintInt>
		WaitUs(TALLY_DELAY);
    cdc2:	8c ed       	ldi	r24, 0xDC	; 220
    cdc4:	95 e0       	ldi	r25, 0x05	; 5
    cdc6:	0e 94 47 3e 	call	0x7c8e	; 0x7c8e <WaitUs>
    cdca:	e1 cf       	rjmp	.-62     	; 0xcd8e <tally_score+0x202>
    cdcc:	ac 0c       	add	r10, r12
    cdce:	bd 1c       	adc	r11, r13
	}
	
	game.score = tally;
    cdd0:	b0 92 af 0d 	sts	0x0DAF, r11
    cdd4:	a0 92 ae 0d 	sts	0x0DAE, r10
	game.time = 0;
    cdd8:	10 92 b3 0d 	sts	0x0DB3, r1
    cddc:	10 92 b2 0d 	sts	0x0DB2, r1
	LBWaitSeconds(2);
    cde0:	82 e0       	ldi	r24, 0x02	; 2
    cde2:	0e 94 b5 4e 	call	0x9d6a	; 0x9d6a <LBWaitSeconds>
	render_camera_view();
}
    cde6:	df 91       	pop	r29
    cde8:	cf 91       	pop	r28
    cdea:	1f 91       	pop	r17
    cdec:	0f 91       	pop	r16
    cdee:	ff 90       	pop	r15
    cdf0:	ef 90       	pop	r14
    cdf2:	df 90       	pop	r13
    cdf4:	cf 90       	pop	r12
    cdf6:	bf 90       	pop	r11
    cdf8:	af 90       	pop	r10
    cdfa:	9f 90       	pop	r9
    cdfc:	8f 90       	pop	r8
    cdfe:	7f 90       	pop	r7
    ce00:	6f 90       	pop	r6
    ce02:	5f 90       	pop	r5
    ce04:	4f 90       	pop	r4
    ce06:	3f 90       	pop	r3
    ce08:	2f 90       	pop	r2
	}
	
	game.score = tally;
	game.time = 0;
	LBWaitSeconds(2);
	render_camera_view();
    ce0a:	0c 94 9a 52 	jmp	0xa534	; 0xa534 <render_camera_view>

0000ce0e <handle_player_death>:
	}
}

void handle_player_death()
{
	game.lives--;
    ce0e:	80 91 b7 0d 	lds	r24, 0x0DB7
    ce12:	81 50       	subi	r24, 0x01	; 1
    ce14:	80 93 b7 0d 	sts	0x0DB7, r24
	clear_sprites(0, 6);
    ce18:	66 e0       	ldi	r22, 0x06	; 6
    ce1a:	80 e0       	ldi	r24, 0x00	; 0
    ce1c:	0e 94 80 60 	call	0xc100	; 0xc100 <clear_sprites>
	LBRotateSprites();
    ce20:	0e 94 54 4f 	call	0x9ea8	; 0x9ea8 <LBRotateSprites>
	if (game.lives == 0)
    ce24:	80 91 b7 0d 	lds	r24, 0x0DB7
    ce28:	81 11       	cpse	r24, r1
    ce2a:	08 c0       	rjmp	.+16     	; 0xce3c <handle_player_death+0x2e>
	{
		tally_score((char*) strGameOver, 0);
    ce2c:	60 e0       	ldi	r22, 0x00	; 0
    ce2e:	70 e0       	ldi	r23, 0x00	; 0
    ce30:	87 e1       	ldi	r24, 0x17	; 23
    ce32:	9b e0       	ldi	r25, 0x0B	; 11
    ce34:	0e 94 c6 65 	call	0xcb8c	; 0xcb8c <tally_score>
		exit_game();
    ce38:	0c 94 cd 64 	jmp	0xc99a	; 0xc99a <exit_game>
		return;
	}
	FadeOut(FRAMES_PER_FADE, true);
    ce3c:	61 e0       	ldi	r22, 0x01	; 1
    ce3e:	81 e0       	ldi	r24, 0x01	; 1
    ce40:	0e 94 2d 4d 	call	0x9a5a	; 0x9a5a <FadeOut>
	ClearVram();
    ce44:	0e 94 11 3e 	call	0x7c22	; 0x7c22 <ClearVram>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    ce48:	64 e1       	ldi	r22, 0x14	; 20
    ce4a:	80 e0       	ldi	r24, 0x00	; 0
    ce4c:	0e 94 80 60 	call	0xc100	; 0xc100 <clear_sprites>
	LBRotateSprites();
    ce50:	0e 94 54 4f 	call	0x9ea8	; 0x9ea8 <LBRotateSprites>
	FadeIn(FRAMES_PER_FADE, false);
    ce54:	60 e0       	ldi	r22, 0x00	; 0
    ce56:	81 e0       	ldi	r24, 0x01	; 1
    ce58:	0e 94 21 4d 	call	0x9a42	; 0x9a42 <FadeIn>
	init_player_state();
    ce5c:	0e 94 c1 4f 	call	0x9f82	; 0x9f82 <init_player_state>
	init_enemy_state();
    ce60:	0e 94 ad 4f 	call	0x9f5a	; 0x9f5a <init_enemy_state>
	load_level(game.current_level_index, false);
    ce64:	60 e0       	ldi	r22, 0x00	; 0
    ce66:	80 91 b9 0d 	lds	r24, 0x0DB9
    ce6a:	0c 94 b2 60 	jmp	0xc164	; 0xc164 <load_level>

0000ce6e <update_player>:
}

u8 update_player()
{
    ce6e:	cf 92       	push	r12
    ce70:	df 92       	push	r13
    ce72:	ef 92       	push	r14
    ce74:	ff 92       	push	r15
    ce76:	0f 93       	push	r16
    ce78:	1f 93       	push	r17
    ce7a:	cf 93       	push	r28
    ce7c:	df 93       	push	r29
    ce7e:	1f 92       	push	r1
    ce80:	cd b7       	in	r28, 0x3d	; 61
    ce82:	de b7       	in	r29, 0x3e	; 62
	
	if (game.player.flags & EXPLODING)
    ce84:	10 91 d6 0d 	lds	r17, 0x0DD6
    ce88:	14 ff       	sbrs	r17, 4
    ce8a:	12 c0       	rjmp	.+36     	; 0xceb0 <update_player+0x42>
	{
		if (map_explosion(&game.player.flags, &game.player.expl, PLAYER_SLOT, game.player.width, game.player.height))
    ce8c:	00 91 da 0d 	lds	r16, 0x0DDA
    ce90:	20 91 d9 0d 	lds	r18, 0x0DD9
    ce94:	40 e0       	ldi	r20, 0x00	; 0
    ce96:	6a e4       	ldi	r22, 0x4A	; 74
    ce98:	7e e0       	ldi	r23, 0x0E	; 14
    ce9a:	86 ed       	ldi	r24, 0xD6	; 214
    ce9c:	9d e0       	ldi	r25, 0x0D	; 13
    ce9e:	0e 94 80 5b 	call	0xb700	; 0xb700 <map_explosion>
    cea2:	88 23       	and	r24, r24
    cea4:	09 f4       	brne	.+2      	; 0xcea8 <update_player+0x3a>
    cea6:	c8 c2       	rjmp	.+1424   	; 0xd438 <update_player+0x5ca>
		{
			handle_player_death();
    cea8:	0e 94 07 67 	call	0xce0e	; 0xce0e <handle_player_death>
			return 0;
    ceac:	80 e0       	ldi	r24, 0x00	; 0
    ceae:	c5 c2       	rjmp	.+1418   	; 0xd43a <update_player+0x5cc>
		}
	}
	else if (is_space())
    ceb0:	0e 94 93 4f 	call	0x9f26	; 0x9f26 <is_space>
    ceb4:	88 23       	and	r24, r24
    ceb6:	09 f4       	brne	.+2      	; 0xceba <update_player+0x4c>
    ceb8:	ab c0       	rjmp	.+342    	; 0xd010 <update_player+0x1a2>
	{
		game.player.shared.vy = 0;
    ceba:	10 92 c6 0d 	sts	0x0DC6, r1
    cebe:	10 92 c7 0d 	sts	0x0DC7, r1
    cec2:	10 92 c8 0d 	sts	0x0DC8, r1
    cec6:	10 92 c9 0d 	sts	0x0DC9, r1
		game.player.shared.vx = SPACE_SHIP_SPEED;
    ceca:	8c e3       	ldi	r24, 0x3C	; 60
    cecc:	90 e0       	ldi	r25, 0x00	; 0
    cece:	90 93 d3 0d 	sts	0x0DD3, r25
    ced2:	80 93 d2 0d 	sts	0x0DD2, r24
		
		if ((game.joypadState.held & BTN_DOWN) && (game.player.shared.y/8 + 1 < game.level_height))
    ced6:	10 91 a0 0f 	lds	r17, 0x0FA0
    ceda:	15 ff       	sbrs	r17, 5
    cedc:	32 c0       	rjmp	.+100    	; 0xcf42 <update_player+0xd4>
    cede:	20 e0       	ldi	r18, 0x00	; 0
    cee0:	30 e0       	ldi	r19, 0x00	; 0
    cee2:	40 e0       	ldi	r20, 0x00	; 0
    cee4:	5e e3       	ldi	r21, 0x3E	; 62
    cee6:	60 91 ce 0d 	lds	r22, 0x0DCE
    ceea:	70 91 cf 0d 	lds	r23, 0x0DCF
    ceee:	80 91 d0 0d 	lds	r24, 0x0DD0
    cef2:	90 91 d1 0d 	lds	r25, 0x0DD1
    cef6:	0e 94 d2 6d 	call	0xdba4	; 0xdba4 <__mulsf3>
    cefa:	20 e0       	ldi	r18, 0x00	; 0
    cefc:	30 e0       	ldi	r19, 0x00	; 0
    cefe:	40 e8       	ldi	r20, 0x80	; 128
    cf00:	5f e3       	ldi	r21, 0x3F	; 63
    cf02:	0e 94 88 6c 	call	0xd910	; 0xd910 <__addsf3>
    cf06:	6b 01       	movw	r12, r22
    cf08:	7c 01       	movw	r14, r24
    cf0a:	80 91 bb 0d 	lds	r24, 0x0DBB
    cf0e:	68 2f       	mov	r22, r24
    cf10:	70 e0       	ldi	r23, 0x00	; 0
    cf12:	80 e0       	ldi	r24, 0x00	; 0
    cf14:	90 e0       	ldi	r25, 0x00	; 0
    cf16:	0e 94 1e 6d 	call	0xda3c	; 0xda3c <__floatsisf>
    cf1a:	9b 01       	movw	r18, r22
    cf1c:	ac 01       	movw	r20, r24
    cf1e:	c7 01       	movw	r24, r14
    cf20:	b6 01       	movw	r22, r12
    cf22:	0e 94 ec 6c 	call	0xd9d8	; 0xd9d8 <__cmpsf2>
    cf26:	87 ff       	sbrs	r24, 7
    cf28:	0c c0       	rjmp	.+24     	; 0xcf42 <update_player+0xd4>
		{
			game.player.shared.vy = SPACE_SHIP_SPEED;
    cf2a:	80 e0       	ldi	r24, 0x00	; 0
    cf2c:	90 e0       	ldi	r25, 0x00	; 0
    cf2e:	a0 e7       	ldi	r26, 0x70	; 112
    cf30:	b2 e4       	ldi	r27, 0x42	; 66
    cf32:	80 93 c6 0d 	sts	0x0DC6, r24
    cf36:	90 93 c7 0d 	sts	0x0DC7, r25
    cf3a:	a0 93 c8 0d 	sts	0x0DC8, r26
    cf3e:	b0 93 c9 0d 	sts	0x0DC9, r27
		}
		if ((game.joypadState.held & BTN_RIGHT) && (game.player.shared.x + 24 < game.camera_x + CAMERA_WIDTH*8))
    cf42:	17 ff       	sbrs	r17, 7
    cf44:	29 c0       	rjmp	.+82     	; 0xcf98 <update_player+0x12a>
    cf46:	20 e0       	ldi	r18, 0x00	; 0
    cf48:	30 e0       	ldi	r19, 0x00	; 0
    cf4a:	40 ec       	ldi	r20, 0xC0	; 192
    cf4c:	51 e4       	ldi	r21, 0x41	; 65
    cf4e:	60 91 ca 0d 	lds	r22, 0x0DCA
    cf52:	70 91 cb 0d 	lds	r23, 0x0DCB
    cf56:	80 91 cc 0d 	lds	r24, 0x0DCC
    cf5a:	90 91 cd 0d 	lds	r25, 0x0DCD
    cf5e:	0e 94 88 6c 	call	0xd910	; 0xd910 <__addsf3>
    cf62:	6b 01       	movw	r12, r22
    cf64:	7c 01       	movw	r14, r24
    cf66:	80 91 aa 0d 	lds	r24, 0x0DAA
    cf6a:	90 91 ab 0d 	lds	r25, 0x0DAB
    cf6e:	80 52       	subi	r24, 0x20	; 32
    cf70:	9f 4f       	sbci	r25, 0xFF	; 255
    cf72:	bc 01       	movw	r22, r24
    cf74:	80 e0       	ldi	r24, 0x00	; 0
    cf76:	90 e0       	ldi	r25, 0x00	; 0
    cf78:	0e 94 1c 6d 	call	0xda38	; 0xda38 <__floatunsisf>
    cf7c:	9b 01       	movw	r18, r22
    cf7e:	ac 01       	movw	r20, r24
    cf80:	c7 01       	movw	r24, r14
    cf82:	b6 01       	movw	r22, r12
    cf84:	0e 94 ec 6c 	call	0xd9d8	; 0xd9d8 <__cmpsf2>
    cf88:	87 ff       	sbrs	r24, 7
    cf8a:	06 c0       	rjmp	.+12     	; 0xcf98 <update_player+0x12a>
		{
			game.player.shared.vx = SPACE_SHIP_SPEED*2;
    cf8c:	88 e7       	ldi	r24, 0x78	; 120
    cf8e:	90 e0       	ldi	r25, 0x00	; 0
    cf90:	90 93 d3 0d 	sts	0x0DD3, r25
    cf94:	80 93 d2 0d 	sts	0x0DD2, r24
		}
		if ((game.joypadState.held & BTN_LEFT) && (game.player.shared.x > game.camera_x))
    cf98:	16 ff       	sbrs	r17, 6
    cf9a:	1a c0       	rjmp	.+52     	; 0xcfd0 <update_player+0x162>
    cf9c:	60 91 aa 0d 	lds	r22, 0x0DAA
    cfa0:	70 91 ab 0d 	lds	r23, 0x0DAB
    cfa4:	80 e0       	ldi	r24, 0x00	; 0
    cfa6:	90 e0       	ldi	r25, 0x00	; 0
    cfa8:	0e 94 1c 6d 	call	0xda38	; 0xda38 <__floatunsisf>
    cfac:	9b 01       	movw	r18, r22
    cfae:	ac 01       	movw	r20, r24
    cfb0:	60 91 ca 0d 	lds	r22, 0x0DCA
    cfb4:	70 91 cb 0d 	lds	r23, 0x0DCB
    cfb8:	80 91 cc 0d 	lds	r24, 0x0DCC
    cfbc:	90 91 cd 0d 	lds	r25, 0x0DCD
    cfc0:	0e 94 ce 6d 	call	0xdb9c	; 0xdb9c <__gesf2>
    cfc4:	18 16       	cp	r1, r24
    cfc6:	24 f4       	brge	.+8      	; 0xcfd0 <update_player+0x162>
		{
			game.player.shared.vx = 0;
    cfc8:	10 92 d3 0d 	sts	0x0DD3, r1
    cfcc:	10 92 d2 0d 	sts	0x0DD2, r1
		}
		if ((game.joypadState.held & BTN_UP) && (game.player.shared.y > 0))
    cfd0:	14 ff       	sbrs	r17, 4
    cfd2:	1b c0       	rjmp	.+54     	; 0xd00a <update_player+0x19c>
    cfd4:	20 e0       	ldi	r18, 0x00	; 0
    cfd6:	30 e0       	ldi	r19, 0x00	; 0
    cfd8:	a9 01       	movw	r20, r18
    cfda:	60 91 ce 0d 	lds	r22, 0x0DCE
    cfde:	70 91 cf 0d 	lds	r23, 0x0DCF
    cfe2:	80 91 d0 0d 	lds	r24, 0x0DD0
    cfe6:	90 91 d1 0d 	lds	r25, 0x0DD1
    cfea:	0e 94 ce 6d 	call	0xdb9c	; 0xdb9c <__gesf2>
    cfee:	18 16       	cp	r1, r24
    cff0:	64 f4       	brge	.+24     	; 0xd00a <update_player+0x19c>
		{
			game.player.shared.vy = -SPACE_SHIP_SPEED;
    cff2:	80 e0       	ldi	r24, 0x00	; 0
    cff4:	90 e0       	ldi	r25, 0x00	; 0
    cff6:	a0 e7       	ldi	r26, 0x70	; 112
    cff8:	b2 ec       	ldi	r27, 0xC2	; 194
    cffa:	80 93 c6 0d 	sts	0x0DC6, r24
    cffe:	90 93 c7 0d 	sts	0x0DC7, r25
    d002:	a0 93 c8 0d 	sts	0x0DC8, r26
    d006:	b0 93 c9 0d 	sts	0x0DC9, r27
		}
		LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.run), 0);
    d00a:	82 e3       	ldi	r24, 0x32	; 50
    d00c:	9e e0       	ldi	r25, 0x0E	; 14
    d00e:	0d c2       	rjmp	.+1050   	; 0xd42a <update_player+0x5bc>
	}
	else if (game.player.flags & (IDLE|RUNNING))
    d010:	81 2f       	mov	r24, r17
    d012:	8a 70       	andi	r24, 0x0A	; 10
    d014:	09 f4       	brne	.+2      	; 0xd018 <update_player+0x1aa>
    d016:	ec c0       	rjmp	.+472    	; 0xd1f0 <update_player+0x382>
	{
		if (!on_solid_ground(&game.player.shared, game.player.width, game.player.height))
    d018:	40 91 da 0d 	lds	r20, 0x0DDA
    d01c:	60 91 d9 0d 	lds	r22, 0x0DD9
    d020:	86 ec       	ldi	r24, 0xC6	; 198
    d022:	9d e0       	ldi	r25, 0x0D	; 13
    d024:	0e 94 b1 54 	call	0xa962	; 0xa962 <on_solid_ground>
    d028:	81 11       	cpse	r24, r1
    d02a:	07 c0       	rjmp	.+14     	; 0xd03a <update_player+0x1cc>
		{
			game.player.shared.gravity = GRAVITY;
    d02c:	8f ef       	ldi	r24, 0xFF	; 255
    d02e:	80 93 d4 0d 	sts	0x0DD4, r24
			game.player.flags = JUMPING;
    d032:	81 e0       	ldi	r24, 0x01	; 1
    d034:	80 93 d6 0d 	sts	0x0DD6, r24
    d038:	de c1       	rjmp	.+956    	; 0xd3f6 <update_player+0x588>
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), extendedSprites[PLAYER_SLOT].flags);
		}
		else
		{
			if (game.joypadState.held & BTN_DOWN)
    d03a:	10 91 a0 0f 	lds	r17, 0x0FA0
    d03e:	15 ff       	sbrs	r17, 5
    d040:	46 c0       	rjmp	.+140    	; 0xd0ce <update_player+0x260>
			{
				game.player.shared.y += 16;
    d042:	20 e0       	ldi	r18, 0x00	; 0
    d044:	30 e0       	ldi	r19, 0x00	; 0
    d046:	40 e8       	ldi	r20, 0x80	; 128
    d048:	51 e4       	ldi	r21, 0x41	; 65
    d04a:	60 91 ce 0d 	lds	r22, 0x0DCE
    d04e:	70 91 cf 0d 	lds	r23, 0x0DCF
    d052:	80 91 d0 0d 	lds	r24, 0x0DD0
    d056:	90 91 d1 0d 	lds	r25, 0x0DD1
    d05a:	0e 94 88 6c 	call	0xd910	; 0xd910 <__addsf3>
    d05e:	60 93 ce 0d 	sts	0x0DCE, r22
    d062:	70 93 cf 0d 	sts	0x0DCF, r23
    d066:	80 93 d0 0d 	sts	0x0DD0, r24
    d06a:	90 93 d1 0d 	sts	0x0DD1, r25
				if(game.player.direction == D_RIGHT)
    d06e:	80 91 d8 0d 	lds	r24, 0x0DD8
    d072:	81 30       	cpi	r24, 0x01	; 1
    d074:	b1 f4       	brne	.+44     	; 0xd0a2 <update_player+0x234>
				{
					game.player.shared.x -= 8;
    d076:	20 e0       	ldi	r18, 0x00	; 0
    d078:	30 e0       	ldi	r19, 0x00	; 0
    d07a:	40 e0       	ldi	r20, 0x00	; 0
    d07c:	51 e4       	ldi	r21, 0x41	; 65
    d07e:	60 91 ca 0d 	lds	r22, 0x0DCA
    d082:	70 91 cb 0d 	lds	r23, 0x0DCB
    d086:	80 91 cc 0d 	lds	r24, 0x0DCC
    d08a:	90 91 cd 0d 	lds	r25, 0x0DCD
    d08e:	0e 94 87 6c 	call	0xd90e	; 0xd90e <__subsf3>
    d092:	60 93 ca 0d 	sts	0x0DCA, r22
    d096:	70 93 cb 0d 	sts	0x0DCB, r23
    d09a:	80 93 cc 0d 	sts	0x0DCC, r24
    d09e:	90 93 cd 0d 	sts	0x0DCD, r25
				}
				game.player.shared.vx = 0;
    d0a2:	10 92 d3 0d 	sts	0x0DD3, r1
    d0a6:	10 92 d2 0d 	sts	0x0DD2, r1
				game.player.flags = PRONE;
    d0aa:	84 e0       	ldi	r24, 0x04	; 4
    d0ac:	80 93 d6 0d 	sts	0x0DD6, r24
				game.player.width = 3;
    d0b0:	83 e0       	ldi	r24, 0x03	; 3
    d0b2:	80 93 d9 0d 	sts	0x0DD9, r24
				game.player.height = 1;
    d0b6:	81 e0       	ldi	r24, 0x01	; 1
    d0b8:	80 93 da 0d 	sts	0x0DDA, r24
				clear_sprites(3, 3);
    d0bc:	63 e0       	ldi	r22, 0x03	; 3
    d0be:	83 e0       	ldi	r24, 0x03	; 3
    d0c0:	0e 94 80 60 	call	0xc100	; 0xc100 <clear_sprites>
				LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.prone), extendedSprites[PLAYER_SLOT].flags);
    d0c4:	40 91 b0 0f 	lds	r20, 0x0FB0
    d0c8:	82 e4       	ldi	r24, 0x42	; 66
    d0ca:	9e e0       	ldi	r25, 0x0E	; 14
    d0cc:	6e c0       	rjmp	.+220    	; 0xd1aa <update_player+0x33c>
			}
			else if ((game.joypadState.held & BTN_RIGHT) && (game.player.shared.x/8 + 2 < game.level_width))
    d0ce:	17 ff       	sbrs	r17, 7
    d0d0:	38 c0       	rjmp	.+112    	; 0xd142 <update_player+0x2d4>
    d0d2:	20 e0       	ldi	r18, 0x00	; 0
    d0d4:	30 e0       	ldi	r19, 0x00	; 0
    d0d6:	40 e0       	ldi	r20, 0x00	; 0
    d0d8:	5e e3       	ldi	r21, 0x3E	; 62
    d0da:	60 91 ca 0d 	lds	r22, 0x0DCA
    d0de:	70 91 cb 0d 	lds	r23, 0x0DCB
    d0e2:	80 91 cc 0d 	lds	r24, 0x0DCC
    d0e6:	90 91 cd 0d 	lds	r25, 0x0DCD
    d0ea:	0e 94 d2 6d 	call	0xdba4	; 0xdba4 <__mulsf3>
    d0ee:	20 e0       	ldi	r18, 0x00	; 0
    d0f0:	30 e0       	ldi	r19, 0x00	; 0
    d0f2:	40 e0       	ldi	r20, 0x00	; 0
    d0f4:	50 e4       	ldi	r21, 0x40	; 64
    d0f6:	0e 94 88 6c 	call	0xd910	; 0xd910 <__addsf3>
    d0fa:	6b 01       	movw	r12, r22
    d0fc:	7c 01       	movw	r14, r24
    d0fe:	80 91 ba 0d 	lds	r24, 0x0DBA
    d102:	68 2f       	mov	r22, r24
    d104:	70 e0       	ldi	r23, 0x00	; 0
    d106:	80 e0       	ldi	r24, 0x00	; 0
    d108:	90 e0       	ldi	r25, 0x00	; 0
    d10a:	0e 94 1e 6d 	call	0xda3c	; 0xda3c <__floatsisf>
    d10e:	9b 01       	movw	r18, r22
    d110:	ac 01       	movw	r20, r24
    d112:	c7 01       	movw	r24, r14
    d114:	b6 01       	movw	r22, r12
    d116:	0e 94 ec 6c 	call	0xd9d8	; 0xd9d8 <__cmpsf2>
    d11a:	87 ff       	sbrs	r24, 7
    d11c:	12 c0       	rjmp	.+36     	; 0xd142 <update_player+0x2d4>
			{
				game.player.shared.vx = RUN_SPEED;
    d11e:	8c e3       	ldi	r24, 0x3C	; 60
    d120:	90 e0       	ldi	r25, 0x00	; 0
    d122:	90 93 d3 0d 	sts	0x0DD3, r25
    d126:	80 93 d2 0d 	sts	0x0DD2, r24
				game.player.flags = RUNNING;
    d12a:	82 e0       	ldi	r24, 0x02	; 2
    d12c:	80 93 d6 0d 	sts	0x0DD6, r24
				game.player.direction = D_RIGHT;
    d130:	81 e0       	ldi	r24, 0x01	; 1
    d132:	80 93 d8 0d 	sts	0x0DD8, r24
				LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.run), 0);
    d136:	82 e3       	ldi	r24, 0x32	; 50
    d138:	9e e0       	ldi	r25, 0x0E	; 14
    d13a:	0e 94 62 4d 	call	0x9ac4	; 0x9ac4 <LBGetNextFrame>
    d13e:	40 e0       	ldi	r20, 0x00	; 0
    d140:	38 c0       	rjmp	.+112    	; 0xd1b2 <update_player+0x344>
			}
			else if ((game.joypadState.held & BTN_LEFT) && (game.player.shared.x > game.camera_x))
    d142:	16 ff       	sbrs	r17, 6
    d144:	27 c0       	rjmp	.+78     	; 0xd194 <update_player+0x326>
    d146:	60 91 aa 0d 	lds	r22, 0x0DAA
    d14a:	70 91 ab 0d 	lds	r23, 0x0DAB
    d14e:	80 e0       	ldi	r24, 0x00	; 0
    d150:	90 e0       	ldi	r25, 0x00	; 0
    d152:	0e 94 1c 6d 	call	0xda38	; 0xda38 <__floatunsisf>
    d156:	9b 01       	movw	r18, r22
    d158:	ac 01       	movw	r20, r24
    d15a:	60 91 ca 0d 	lds	r22, 0x0DCA
    d15e:	70 91 cb 0d 	lds	r23, 0x0DCB
    d162:	80 91 cc 0d 	lds	r24, 0x0DCC
    d166:	90 91 cd 0d 	lds	r25, 0x0DCD
    d16a:	0e 94 ce 6d 	call	0xdb9c	; 0xdb9c <__gesf2>
    d16e:	18 16       	cp	r1, r24
    d170:	8c f4       	brge	.+34     	; 0xd194 <update_player+0x326>
			{
				game.player.shared.vx = -RUN_SPEED;
    d172:	84 ec       	ldi	r24, 0xC4	; 196
    d174:	9f ef       	ldi	r25, 0xFF	; 255
    d176:	90 93 d3 0d 	sts	0x0DD3, r25
    d17a:	80 93 d2 0d 	sts	0x0DD2, r24
				game.player.flags = RUNNING;
    d17e:	82 e0       	ldi	r24, 0x02	; 2
    d180:	80 93 d6 0d 	sts	0x0DD6, r24
				game.player.direction = D_LEFT;
    d184:	10 92 d8 0d 	sts	0x0DD8, r1
				LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.run), SPRITE_FLIP_X);
    d188:	82 e3       	ldi	r24, 0x32	; 50
    d18a:	9e e0       	ldi	r25, 0x0E	; 14
    d18c:	0e 94 62 4d 	call	0x9ac4	; 0x9ac4 <LBGetNextFrame>
    d190:	41 e0       	ldi	r20, 0x01	; 1
    d192:	0f c0       	rjmp	.+30     	; 0xd1b2 <update_player+0x344>
			}
			else
			{
				game.player.flags = IDLE;
    d194:	88 e0       	ldi	r24, 0x08	; 8
    d196:	80 93 d6 0d 	sts	0x0DD6, r24
				game.player.shared.vx = 0;
    d19a:	10 92 d3 0d 	sts	0x0DD3, r1
    d19e:	10 92 d2 0d 	sts	0x0DD2, r1
				LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.idle), extendedSprites[PLAYER_SLOT].flags);
    d1a2:	40 91 b0 0f 	lds	r20, 0x0FB0
    d1a6:	8a e2       	ldi	r24, 0x2A	; 42
    d1a8:	9e e0       	ldi	r25, 0x0E	; 14
    d1aa:	49 83       	std	Y+1, r20	; 0x01
    d1ac:	0e 94 62 4d 	call	0x9ac4	; 0x9ac4 <LBGetNextFrame>
    d1b0:	49 81       	ldd	r20, Y+1	; 0x01
    d1b2:	bc 01       	movw	r22, r24
    d1b4:	80 e0       	ldi	r24, 0x00	; 0
    d1b6:	0e 94 c4 4e 	call	0x9d88	; 0x9d88 <LBMapSprite>
			}
			if (game.joypadState.pressed & BTN_B && !(game.player.flags & PRONE))
    d1ba:	80 91 9c 0f 	lds	r24, 0x0F9C
    d1be:	80 ff       	sbrs	r24, 0
    d1c0:	3b c1       	rjmp	.+630    	; 0xd438 <update_player+0x5ca>
    d1c2:	80 91 d6 0d 	lds	r24, 0x0DD6
    d1c6:	82 fd       	sbrc	r24, 2
    d1c8:	37 c1       	rjmp	.+622    	; 0xd438 <update_player+0x5ca>
			{
				game.player.shared.vy = -JUMP_SPEED;
    d1ca:	80 e0       	ldi	r24, 0x00	; 0
    d1cc:	90 e0       	ldi	r25, 0x00	; 0
    d1ce:	a6 e1       	ldi	r26, 0x16	; 22
    d1d0:	b3 ec       	ldi	r27, 0xC3	; 195
    d1d2:	80 93 c6 0d 	sts	0x0DC6, r24
    d1d6:	90 93 c7 0d 	sts	0x0DC7, r25
    d1da:	a0 93 c8 0d 	sts	0x0DC8, r26
    d1de:	b0 93 c9 0d 	sts	0x0DC9, r27
				game.player.shared.gravity = GRAVITY;
    d1e2:	8f ef       	ldi	r24, 0xFF	; 255
    d1e4:	80 93 d4 0d 	sts	0x0DD4, r24
				game.player.flags = JUMPING;
    d1e8:	81 e0       	ldi	r24, 0x01	; 1
    d1ea:	80 93 d6 0d 	sts	0x0DD6, r24
    d1ee:	fd c0       	rjmp	.+506    	; 0xd3ea <update_player+0x57c>
				game.player.height = 3;
				LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), extendedSprites[PLAYER_SLOT].flags);
			}
		}
	}
	else if (game.player.flags & JUMPING)
    d1f0:	10 ff       	sbrs	r17, 0
    d1f2:	77 c0       	rjmp	.+238    	; 0xd2e2 <update_player+0x474>
	{
		if ((game.joypadState.held & BTN_RIGHT) && (game.player.shared.x/8 + 2 < game.level_width))
    d1f4:	10 91 a0 0f 	lds	r17, 0x0FA0
    d1f8:	17 ff       	sbrs	r17, 7
    d1fa:	35 c0       	rjmp	.+106    	; 0xd266 <update_player+0x3f8>
    d1fc:	20 e0       	ldi	r18, 0x00	; 0
    d1fe:	30 e0       	ldi	r19, 0x00	; 0
    d200:	40 e0       	ldi	r20, 0x00	; 0
    d202:	5e e3       	ldi	r21, 0x3E	; 62
    d204:	60 91 ca 0d 	lds	r22, 0x0DCA
    d208:	70 91 cb 0d 	lds	r23, 0x0DCB
    d20c:	80 91 cc 0d 	lds	r24, 0x0DCC
    d210:	90 91 cd 0d 	lds	r25, 0x0DCD
    d214:	0e 94 d2 6d 	call	0xdba4	; 0xdba4 <__mulsf3>
    d218:	20 e0       	ldi	r18, 0x00	; 0
    d21a:	30 e0       	ldi	r19, 0x00	; 0
    d21c:	40 e0       	ldi	r20, 0x00	; 0
    d21e:	50 e4       	ldi	r21, 0x40	; 64
    d220:	0e 94 88 6c 	call	0xd910	; 0xd910 <__addsf3>
    d224:	6b 01       	movw	r12, r22
    d226:	7c 01       	movw	r14, r24
    d228:	80 91 ba 0d 	lds	r24, 0x0DBA
    d22c:	68 2f       	mov	r22, r24
    d22e:	70 e0       	ldi	r23, 0x00	; 0
    d230:	80 e0       	ldi	r24, 0x00	; 0
    d232:	90 e0       	ldi	r25, 0x00	; 0
    d234:	0e 94 1e 6d 	call	0xda3c	; 0xda3c <__floatsisf>
    d238:	9b 01       	movw	r18, r22
    d23a:	ac 01       	movw	r20, r24
    d23c:	c7 01       	movw	r24, r14
    d23e:	b6 01       	movw	r22, r12
    d240:	0e 94 ec 6c 	call	0xd9d8	; 0xd9d8 <__cmpsf2>
    d244:	87 ff       	sbrs	r24, 7
    d246:	0f c0       	rjmp	.+30     	; 0xd266 <update_player+0x3f8>
		{
			game.player.shared.vx = RUN_SPEED;
    d248:	8c e3       	ldi	r24, 0x3C	; 60
    d24a:	90 e0       	ldi	r25, 0x00	; 0
    d24c:	90 93 d3 0d 	sts	0x0DD3, r25
    d250:	80 93 d2 0d 	sts	0x0DD2, r24
			game.player.direction = D_RIGHT;
    d254:	81 e0       	ldi	r24, 0x01	; 1
    d256:	80 93 d8 0d 	sts	0x0DD8, r24
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), 0);
    d25a:	8a e3       	ldi	r24, 0x3A	; 58
    d25c:	9e e0       	ldi	r25, 0x0E	; 14
    d25e:	0e 94 62 4d 	call	0x9ac4	; 0x9ac4 <LBGetNextFrame>
    d262:	40 e0       	ldi	r20, 0x00	; 0
    d264:	32 c0       	rjmp	.+100    	; 0xd2ca <update_player+0x45c>
		}
		else if ((game.joypadState.held & BTN_LEFT) && (game.player.shared.x > game.camera_x))
    d266:	16 ff       	sbrs	r17, 6
    d268:	24 c0       	rjmp	.+72     	; 0xd2b2 <update_player+0x444>
    d26a:	60 91 aa 0d 	lds	r22, 0x0DAA
    d26e:	70 91 ab 0d 	lds	r23, 0x0DAB
    d272:	80 e0       	ldi	r24, 0x00	; 0
    d274:	90 e0       	ldi	r25, 0x00	; 0
    d276:	0e 94 1c 6d 	call	0xda38	; 0xda38 <__floatunsisf>
    d27a:	9b 01       	movw	r18, r22
    d27c:	ac 01       	movw	r20, r24
    d27e:	60 91 ca 0d 	lds	r22, 0x0DCA
    d282:	70 91 cb 0d 	lds	r23, 0x0DCB
    d286:	80 91 cc 0d 	lds	r24, 0x0DCC
    d28a:	90 91 cd 0d 	lds	r25, 0x0DCD
    d28e:	0e 94 ce 6d 	call	0xdb9c	; 0xdb9c <__gesf2>
    d292:	18 16       	cp	r1, r24
    d294:	74 f4       	brge	.+28     	; 0xd2b2 <update_player+0x444>
		{
			game.player.shared.vx = -RUN_SPEED;
    d296:	84 ec       	ldi	r24, 0xC4	; 196
    d298:	9f ef       	ldi	r25, 0xFF	; 255
    d29a:	90 93 d3 0d 	sts	0x0DD3, r25
    d29e:	80 93 d2 0d 	sts	0x0DD2, r24
			game.player.direction = D_LEFT;
    d2a2:	10 92 d8 0d 	sts	0x0DD8, r1
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), SPRITE_FLIP_X);
    d2a6:	8a e3       	ldi	r24, 0x3A	; 58
    d2a8:	9e e0       	ldi	r25, 0x0E	; 14
    d2aa:	0e 94 62 4d 	call	0x9ac4	; 0x9ac4 <LBGetNextFrame>
    d2ae:	41 e0       	ldi	r20, 0x01	; 1
    d2b0:	0c c0       	rjmp	.+24     	; 0xd2ca <update_player+0x45c>
		}
		else
		{
			game.player.shared.vx = 0;
    d2b2:	10 92 d3 0d 	sts	0x0DD3, r1
    d2b6:	10 92 d2 0d 	sts	0x0DD2, r1
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), extendedSprites[PLAYER_SLOT].flags);
    d2ba:	40 91 b0 0f 	lds	r20, 0x0FB0
    d2be:	8a e3       	ldi	r24, 0x3A	; 58
    d2c0:	9e e0       	ldi	r25, 0x0E	; 14
    d2c2:	49 83       	std	Y+1, r20	; 0x01
    d2c4:	0e 94 62 4d 	call	0x9ac4	; 0x9ac4 <LBGetNextFrame>
    d2c8:	49 81       	ldd	r20, Y+1	; 0x01
    d2ca:	bc 01       	movw	r22, r24
    d2cc:	80 e0       	ldi	r24, 0x00	; 0
    d2ce:	0e 94 c4 4e 	call	0x9d88	; 0x9d88 <LBMapSprite>
		}
		
		if (game.player.shared.gravity == 0)
    d2d2:	80 91 d4 0d 	lds	r24, 0x0DD4
    d2d6:	81 11       	cpse	r24, r1
    d2d8:	af c0       	rjmp	.+350    	; 0xd438 <update_player+0x5ca>
		{
			game.player.flags = IDLE;
    d2da:	88 e0       	ldi	r24, 0x08	; 8
    d2dc:	80 93 d6 0d 	sts	0x0DD6, r24
    d2e0:	ab c0       	rjmp	.+342    	; 0xd438 <update_player+0x5ca>
		}
	}
	else if (game.player.flags & PRONE)
    d2e2:	12 ff       	sbrs	r17, 2
    d2e4:	a9 c0       	rjmp	.+338    	; 0xd438 <update_player+0x5ca>
	{
		if (game.joypadState.pressed & BTN_UP)
    d2e6:	80 91 9c 0f 	lds	r24, 0x0F9C
    d2ea:	84 ff       	sbrs	r24, 4
    d2ec:	3a c0       	rjmp	.+116    	; 0xd362 <update_player+0x4f4>
		{
			game.player.flags = IDLE;	
    d2ee:	88 e0       	ldi	r24, 0x08	; 8
    d2f0:	80 93 d6 0d 	sts	0x0DD6, r24
			game.player.shared.y -= 16;
    d2f4:	20 e0       	ldi	r18, 0x00	; 0
    d2f6:	30 e0       	ldi	r19, 0x00	; 0
    d2f8:	40 e8       	ldi	r20, 0x80	; 128
    d2fa:	51 e4       	ldi	r21, 0x41	; 65
    d2fc:	60 91 ce 0d 	lds	r22, 0x0DCE
    d300:	70 91 cf 0d 	lds	r23, 0x0DCF
    d304:	80 91 d0 0d 	lds	r24, 0x0DD0
    d308:	90 91 d1 0d 	lds	r25, 0x0DD1
    d30c:	0e 94 87 6c 	call	0xd90e	; 0xd90e <__subsf3>
    d310:	60 93 ce 0d 	sts	0x0DCE, r22
    d314:	70 93 cf 0d 	sts	0x0DCF, r23
    d318:	80 93 d0 0d 	sts	0x0DD0, r24
    d31c:	90 93 d1 0d 	sts	0x0DD1, r25
			if(game.player.direction == D_RIGHT)
    d320:	80 91 d8 0d 	lds	r24, 0x0DD8
    d324:	81 30       	cpi	r24, 0x01	; 1
    d326:	b1 f4       	brne	.+44     	; 0xd354 <update_player+0x4e6>
			{
				game.player.shared.x += 8;
    d328:	20 e0       	ldi	r18, 0x00	; 0
    d32a:	30 e0       	ldi	r19, 0x00	; 0
    d32c:	40 e0       	ldi	r20, 0x00	; 0
    d32e:	51 e4       	ldi	r21, 0x41	; 65
    d330:	60 91 ca 0d 	lds	r22, 0x0DCA
    d334:	70 91 cb 0d 	lds	r23, 0x0DCB
    d338:	80 91 cc 0d 	lds	r24, 0x0DCC
    d33c:	90 91 cd 0d 	lds	r25, 0x0DCD
    d340:	0e 94 88 6c 	call	0xd910	; 0xd910 <__addsf3>
    d344:	60 93 ca 0d 	sts	0x0DCA, r22
    d348:	70 93 cb 0d 	sts	0x0DCB, r23
    d34c:	80 93 cc 0d 	sts	0x0DCC, r24
    d350:	90 93 cd 0d 	sts	0x0DCD, r25
			}
			game.player.width = 2;
    d354:	82 e0       	ldi	r24, 0x02	; 2
    d356:	80 93 d9 0d 	sts	0x0DD9, r24
			game.player.height = 3;
    d35a:	83 e0       	ldi	r24, 0x03	; 3
    d35c:	80 93 da 0d 	sts	0x0DDA, r24
    d360:	6b c0       	rjmp	.+214    	; 0xd438 <update_player+0x5ca>
		}
		else if (game.joypadState.pressed & BTN_B)
    d362:	80 ff       	sbrs	r24, 0
    d364:	51 c0       	rjmp	.+162    	; 0xd408 <update_player+0x59a>
		{
			game.player.flags = JUMPING;
    d366:	81 e0       	ldi	r24, 0x01	; 1
    d368:	80 93 d6 0d 	sts	0x0DD6, r24
			game.player.shared.y -= 16;
    d36c:	20 e0       	ldi	r18, 0x00	; 0
    d36e:	30 e0       	ldi	r19, 0x00	; 0
    d370:	40 e8       	ldi	r20, 0x80	; 128
    d372:	51 e4       	ldi	r21, 0x41	; 65
    d374:	60 91 ce 0d 	lds	r22, 0x0DCE
    d378:	70 91 cf 0d 	lds	r23, 0x0DCF
    d37c:	80 91 d0 0d 	lds	r24, 0x0DD0
    d380:	90 91 d1 0d 	lds	r25, 0x0DD1
    d384:	0e 94 87 6c 	call	0xd90e	; 0xd90e <__subsf3>
    d388:	60 93 ce 0d 	sts	0x0DCE, r22
    d38c:	70 93 cf 0d 	sts	0x0DCF, r23
    d390:	80 93 d0 0d 	sts	0x0DD0, r24
    d394:	90 93 d1 0d 	sts	0x0DD1, r25
			if(game.player.direction == D_RIGHT)
    d398:	80 91 d8 0d 	lds	r24, 0x0DD8
    d39c:	81 30       	cpi	r24, 0x01	; 1
    d39e:	b1 f4       	brne	.+44     	; 0xd3cc <update_player+0x55e>
			{
				game.player.shared.x += 8;
    d3a0:	20 e0       	ldi	r18, 0x00	; 0
    d3a2:	30 e0       	ldi	r19, 0x00	; 0
    d3a4:	40 e0       	ldi	r20, 0x00	; 0
    d3a6:	51 e4       	ldi	r21, 0x41	; 65
    d3a8:	60 91 ca 0d 	lds	r22, 0x0DCA
    d3ac:	70 91 cb 0d 	lds	r23, 0x0DCB
    d3b0:	80 91 cc 0d 	lds	r24, 0x0DCC
    d3b4:	90 91 cd 0d 	lds	r25, 0x0DCD
    d3b8:	0e 94 88 6c 	call	0xd910	; 0xd910 <__addsf3>
    d3bc:	60 93 ca 0d 	sts	0x0DCA, r22
    d3c0:	70 93 cb 0d 	sts	0x0DCB, r23
    d3c4:	80 93 cc 0d 	sts	0x0DCC, r24
    d3c8:	90 93 cd 0d 	sts	0x0DCD, r25
			}
			game.player.shared.vy = -JUMP_SPEED;
    d3cc:	80 e0       	ldi	r24, 0x00	; 0
    d3ce:	90 e0       	ldi	r25, 0x00	; 0
    d3d0:	a6 e1       	ldi	r26, 0x16	; 22
    d3d2:	b3 ec       	ldi	r27, 0xC3	; 195
    d3d4:	80 93 c6 0d 	sts	0x0DC6, r24
    d3d8:	90 93 c7 0d 	sts	0x0DC7, r25
    d3dc:	a0 93 c8 0d 	sts	0x0DC8, r26
    d3e0:	b0 93 c9 0d 	sts	0x0DC9, r27
			game.player.shared.gravity = GRAVITY;
    d3e4:	8f ef       	ldi	r24, 0xFF	; 255
    d3e6:	80 93 d4 0d 	sts	0x0DD4, r24
			game.player.width = 2;
    d3ea:	82 e0       	ldi	r24, 0x02	; 2
    d3ec:	80 93 d9 0d 	sts	0x0DD9, r24
			game.player.height = 3;
    d3f0:	83 e0       	ldi	r24, 0x03	; 3
    d3f2:	80 93 da 0d 	sts	0x0DDA, r24
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), extendedSprites[PLAYER_SLOT].flags);
    d3f6:	40 91 b0 0f 	lds	r20, 0x0FB0
    d3fa:	8a e3       	ldi	r24, 0x3A	; 58
    d3fc:	9e e0       	ldi	r25, 0x0E	; 14
    d3fe:	49 83       	std	Y+1, r20	; 0x01
    d400:	0e 94 62 4d 	call	0x9ac4	; 0x9ac4 <LBGetNextFrame>
    d404:	49 81       	ldd	r20, Y+1	; 0x01
    d406:	14 c0       	rjmp	.+40     	; 0xd430 <update_player+0x5c2>
		}
		else if (game.joypadState.pressed & BTN_LEFT)
    d408:	86 ff       	sbrs	r24, 6
    d40a:	08 c0       	rjmp	.+16     	; 0xd41c <update_player+0x5ae>
		{
			game.player.direction = D_LEFT;
    d40c:	10 92 d8 0d 	sts	0x0DD8, r1
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.prone), SPRITE_FLIP_X);
    d410:	82 e4       	ldi	r24, 0x42	; 66
    d412:	9e e0       	ldi	r25, 0x0E	; 14
    d414:	0e 94 62 4d 	call	0x9ac4	; 0x9ac4 <LBGetNextFrame>
    d418:	41 e0       	ldi	r20, 0x01	; 1
    d41a:	0a c0       	rjmp	.+20     	; 0xd430 <update_player+0x5c2>
		}
		else if (game.joypadState.pressed & BTN_RIGHT)
    d41c:	87 ff       	sbrs	r24, 7
    d41e:	0c c0       	rjmp	.+24     	; 0xd438 <update_player+0x5ca>
		{
			game.player.direction = D_RIGHT;
    d420:	81 e0       	ldi	r24, 0x01	; 1
    d422:	80 93 d8 0d 	sts	0x0DD8, r24
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.prone), 0);
    d426:	82 e4       	ldi	r24, 0x42	; 66
    d428:	9e e0       	ldi	r25, 0x0E	; 14
    d42a:	0e 94 62 4d 	call	0x9ac4	; 0x9ac4 <LBGetNextFrame>
    d42e:	40 e0       	ldi	r20, 0x00	; 0
    d430:	bc 01       	movw	r22, r24
    d432:	80 e0       	ldi	r24, 0x00	; 0
    d434:	0e 94 c4 4e 	call	0x9d88	; 0x9d88 <LBMapSprite>
		}
	}
	return 1;
    d438:	81 e0       	ldi	r24, 0x01	; 1
}
    d43a:	0f 90       	pop	r0
    d43c:	df 91       	pop	r29
    d43e:	cf 91       	pop	r28
    d440:	1f 91       	pop	r17
    d442:	0f 91       	pop	r16
    d444:	ff 90       	pop	r15
    d446:	ef 90       	pop	r14
    d448:	df 90       	pop	r13
    d44a:	cf 90       	pop	r12
    d44c:	08 95       	ret

0000d44e <update_level>:
		}
	}
}

void update_level()
{
    d44e:	cf 92       	push	r12
    d450:	df 92       	push	r13
    d452:	ef 92       	push	r14
    d454:	ff 92       	push	r15
    d456:	0f 93       	push	r16
    d458:	1f 93       	push	r17
    d45a:	cf 93       	push	r28
    d45c:	df 93       	push	r29
	u8 ship_x = game.player.shared.x - game.camera_x;
    d45e:	00 91 aa 0d 	lds	r16, 0x0DAA
    d462:	10 91 ab 0d 	lds	r17, 0x0DAB
    d466:	b8 01       	movw	r22, r16
    d468:	80 e0       	ldi	r24, 0x00	; 0
    d46a:	90 e0       	ldi	r25, 0x00	; 0
    d46c:	0e 94 1c 6d 	call	0xda38	; 0xda38 <__floatunsisf>
    d470:	9b 01       	movw	r18, r22
    d472:	ac 01       	movw	r20, r24
    d474:	60 91 ca 0d 	lds	r22, 0x0DCA
    d478:	70 91 cb 0d 	lds	r23, 0x0DCB
    d47c:	80 91 cc 0d 	lds	r24, 0x0DCC
    d480:	90 91 cd 0d 	lds	r25, 0x0DCD
    d484:	0e 94 87 6c 	call	0xd90e	; 0xd90e <__subsf3>
    d488:	6b 01       	movw	r12, r22
    d48a:	7c 01       	movw	r14, r24
	u8 ship_y = 0;
	char ship_increment = 3;
	
	game.frame_counter++;
    d48c:	80 91 be 0d 	lds	r24, 0x0DBE
    d490:	8f 5f       	subi	r24, 0xFF	; 255
	if (game.frame_counter == 60)
    d492:	8c 33       	cpi	r24, 0x3C	; 60
    d494:	19 f0       	breq	.+6      	; 0xd49c <update_level+0x4e>
{
	u8 ship_x = game.player.shared.x - game.camera_x;
	u8 ship_y = 0;
	char ship_increment = 3;
	
	game.frame_counter++;
    d496:	80 93 be 0d 	sts	0x0DBE, r24
    d49a:	0f c0       	rjmp	.+30     	; 0xd4ba <update_level+0x6c>
	if (game.frame_counter == 60)
	{
		game.frame_counter = 0;
    d49c:	10 92 be 0d 	sts	0x0DBE, r1
		if (game.time != 65535) game.time++;
    d4a0:	80 91 b2 0d 	lds	r24, 0x0DB2
    d4a4:	90 91 b3 0d 	lds	r25, 0x0DB3
    d4a8:	8f 3f       	cpi	r24, 0xFF	; 255
    d4aa:	2f ef       	ldi	r18, 0xFF	; 255
    d4ac:	92 07       	cpc	r25, r18
    d4ae:	29 f0       	breq	.+10     	; 0xd4ba <update_level+0x6c>
    d4b0:	01 96       	adiw	r24, 0x01	; 1
    d4b2:	90 93 b3 0d 	sts	0x0DB3, r25
    d4b6:	80 93 b2 0d 	sts	0x0DB2, r24
	}
	
	if (is_space() && game.camera_x/8 + CAMERA_WIDTH < game.level_width)
    d4ba:	0e 94 93 4f 	call	0x9f26	; 0x9f26 <is_space>
    d4be:	93 e0       	ldi	r25, 0x03	; 3
    d4c0:	16 95       	lsr	r17
    d4c2:	07 95       	ror	r16
    d4c4:	9a 95       	dec	r25
    d4c6:	e1 f7       	brne	.-8      	; 0xd4c0 <update_level+0x72>
    d4c8:	c0 91 ba 0d 	lds	r28, 0x0DBA
    d4cc:	88 23       	and	r24, r24
    d4ce:	51 f0       	breq	.+20     	; 0xd4e4 <update_level+0x96>
    d4d0:	2c 2f       	mov	r18, r28
    d4d2:	30 e0       	ldi	r19, 0x00	; 0
    d4d4:	c8 01       	movw	r24, r16
    d4d6:	4c 96       	adiw	r24, 0x1c	; 28
    d4d8:	82 17       	cp	r24, r18
    d4da:	93 07       	cpc	r25, r19
    d4dc:	18 f4       	brcc	.+6      	; 0xd4e4 <update_level+0x96>
	{
		move_camera_x();
    d4de:	0e 94 47 54 	call	0xa88e	; 0xa88e <move_camera_x>
    d4e2:	22 c0       	rjmp	.+68     	; 0xd528 <update_level+0xda>
	}
	else if (game.player.shared.vx > 0 &&
    d4e4:	80 91 d2 0d 	lds	r24, 0x0DD2
    d4e8:	90 91 d3 0d 	lds	r25, 0x0DD3
    d4ec:	18 16       	cp	r1, r24
    d4ee:	19 06       	cpc	r1, r25
    d4f0:	8c f4       	brge	.+34     	; 0xd514 <update_level+0xc6>
    d4f2:	20 e0       	ldi	r18, 0x00	; 0
    d4f4:	30 e0       	ldi	r19, 0x00	; 0
    d4f6:	40 ee       	ldi	r20, 0xE0	; 224
    d4f8:	52 e4       	ldi	r21, 0x42	; 66
    d4fa:	c7 01       	movw	r24, r14
    d4fc:	b6 01       	movw	r22, r12
    d4fe:	0e 94 ce 6d 	call	0xdb9c	; 0xdb9c <__gesf2>
    d502:	87 fd       	sbrc	r24, 7
    d504:	07 c0       	rjmp	.+14     	; 0xd514 <update_level+0xc6>
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
		(game.camera_x/8 + CAMERA_WIDTH < game.level_width))
    d506:	2c 2f       	mov	r18, r28
    d508:	30 e0       	ldi	r19, 0x00	; 0
	if (is_space() && game.camera_x/8 + CAMERA_WIDTH < game.level_width)
	{
		move_camera_x();
	}
	else if (game.player.shared.vx > 0 &&
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
    d50a:	c8 01       	movw	r24, r16
    d50c:	4c 96       	adiw	r24, 0x1c	; 28
    d50e:	82 17       	cp	r24, r18
    d510:	93 07       	cpc	r25, r19
    d512:	28 f3       	brcs	.-54     	; 0xd4de <update_level+0x90>
		(game.camera_x/8 + CAMERA_WIDTH < game.level_width))
	{
		move_camera_x();
	}
	else if (game.camera_x/8 + CAMERA_WIDTH >= game.level_width)
    d514:	04 5e       	subi	r16, 0xE4	; 228
    d516:	1f 4f       	sbci	r17, 0xFF	; 255
    d518:	8c 2f       	mov	r24, r28
    d51a:	90 e0       	ldi	r25, 0x00	; 0
    d51c:	08 17       	cp	r16, r24
    d51e:	19 07       	cpc	r17, r25
    d520:	18 f0       	brcs	.+6      	; 0xd528 <update_level+0xda>
	{
		game.level_ended = 1;
    d522:	81 e0       	ldi	r24, 0x01	; 1
    d524:	80 93 c5 0d 	sts	0x0DC5, r24
	}
	
	if (!is_space() && game.player.shared.vy > 0 &&
    d528:	0e 94 93 4f 	call	0x9f26	; 0x9f26 <is_space>
    d52c:	81 11       	cpse	r24, r1
    d52e:	40 c0       	rjmp	.+128    	; 0xd5b0 <update_level+0x162>
    d530:	20 e0       	ldi	r18, 0x00	; 0
    d532:	30 e0       	ldi	r19, 0x00	; 0
    d534:	a9 01       	movw	r20, r18
    d536:	60 91 c6 0d 	lds	r22, 0x0DC6
    d53a:	70 91 c7 0d 	lds	r23, 0x0DC7
    d53e:	80 91 c8 0d 	lds	r24, 0x0DC8
    d542:	90 91 c9 0d 	lds	r25, 0x0DC9
    d546:	0e 94 ce 6d 	call	0xdb9c	; 0xdb9c <__gesf2>
    d54a:	18 16       	cp	r1, r24
    d54c:	8c f5       	brge	.+98     	; 0xd5b0 <update_level+0x162>
	    (game.player.shared.y - game.camera_y + 24) >= ((CAMERA_HEIGHT - 2) * 8) &&
    d54e:	c0 91 ac 0d 	lds	r28, 0x0DAC
    d552:	d0 91 ad 0d 	lds	r29, 0x0DAD
    d556:	be 01       	movw	r22, r28
    d558:	80 e0       	ldi	r24, 0x00	; 0
    d55a:	90 e0       	ldi	r25, 0x00	; 0
    d55c:	0e 94 1c 6d 	call	0xda38	; 0xda38 <__floatunsisf>
    d560:	9b 01       	movw	r18, r22
    d562:	ac 01       	movw	r20, r24
    d564:	60 91 ce 0d 	lds	r22, 0x0DCE
    d568:	70 91 cf 0d 	lds	r23, 0x0DCF
    d56c:	80 91 d0 0d 	lds	r24, 0x0DD0
    d570:	90 91 d1 0d 	lds	r25, 0x0DD1
    d574:	0e 94 87 6c 	call	0xd90e	; 0xd90e <__subsf3>
    d578:	20 e0       	ldi	r18, 0x00	; 0
    d57a:	30 e0       	ldi	r19, 0x00	; 0
    d57c:	40 ec       	ldi	r20, 0xC0	; 192
    d57e:	51 e4       	ldi	r21, 0x41	; 65
    d580:	0e 94 88 6c 	call	0xd910	; 0xd910 <__addsf3>
	else if (game.camera_x/8 + CAMERA_WIDTH >= game.level_width)
	{
		game.level_ended = 1;
	}
	
	if (!is_space() && game.player.shared.vy > 0 &&
    d584:	20 e0       	ldi	r18, 0x00	; 0
    d586:	30 e0       	ldi	r19, 0x00	; 0
    d588:	48 e3       	ldi	r20, 0x38	; 56
    d58a:	53 e4       	ldi	r21, 0x43	; 67
    d58c:	0e 94 ce 6d 	call	0xdb9c	; 0xdb9c <__gesf2>
    d590:	87 fd       	sbrc	r24, 7
    d592:	0e c0       	rjmp	.+28     	; 0xd5b0 <update_level+0x162>
	    (game.player.shared.y - game.camera_y + 24) >= ((CAMERA_HEIGHT - 2) * 8) &&
		(game.camera_y/8 + CAMERA_HEIGHT < game.level_height))
    d594:	83 e0       	ldi	r24, 0x03	; 3
    d596:	d6 95       	lsr	r29
    d598:	c7 95       	ror	r28
    d59a:	8a 95       	dec	r24
    d59c:	e1 f7       	brne	.-8      	; 0xd596 <update_level+0x148>
    d59e:	69 96       	adiw	r28, 0x19	; 25
    d5a0:	80 91 bb 0d 	lds	r24, 0x0DBB
    d5a4:	90 e0       	ldi	r25, 0x00	; 0
	{
		game.level_ended = 1;
	}
	
	if (!is_space() && game.player.shared.vy > 0 &&
	    (game.player.shared.y - game.camera_y + 24) >= ((CAMERA_HEIGHT - 2) * 8) &&
    d5a6:	c8 17       	cp	r28, r24
    d5a8:	d9 07       	cpc	r29, r25
    d5aa:	10 f4       	brcc	.+4      	; 0xd5b0 <update_level+0x162>
		(game.camera_y/8 + CAMERA_HEIGHT < game.level_height))
	{
		move_camera_y();
    d5ac:	0e 94 60 54 	call	0xa8c0	; 0xa8c0 <move_camera_y>
	}
	
	// Score
	LBPrintByte(9, VRAM_TILES_V-3, game.player.shield ,true);
    d5b0:	21 e0       	ldi	r18, 0x01	; 1
    d5b2:	40 91 db 0d 	lds	r20, 0x0DDB
    d5b6:	6d e1       	ldi	r22, 0x1D	; 29
    d5b8:	89 e0       	ldi	r24, 0x09	; 9
    d5ba:	0e 94 0f 4e 	call	0x9c1e	; 0x9c1e <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-3, game.time ,true);
    d5be:	40 91 b2 0d 	lds	r20, 0x0DB2
    d5c2:	50 91 b3 0d 	lds	r21, 0x0DB3
    d5c6:	21 e0       	ldi	r18, 0x01	; 1
    d5c8:	6d e1       	ldi	r22, 0x1D	; 29
    d5ca:	8b e1       	ldi	r24, 0x1B	; 27
    d5cc:	0e 94 40 4e 	call	0x9c80	; 0x9c80 <LBPrintInt>
	LBPrintByte(9, VRAM_TILES_V-2, game.lives ,true);
    d5d0:	21 e0       	ldi	r18, 0x01	; 1
    d5d2:	40 91 b7 0d 	lds	r20, 0x0DB7
    d5d6:	6e e1       	ldi	r22, 0x1E	; 30
    d5d8:	89 e0       	ldi	r24, 0x09	; 9
    d5da:	0e 94 0f 4e 	call	0x9c1e	; 0x9c1e <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-2, game.level_score ,true);
    d5de:	40 91 b0 0d 	lds	r20, 0x0DB0
    d5e2:	50 91 b1 0d 	lds	r21, 0x0DB1
    d5e6:	21 e0       	ldi	r18, 0x01	; 1
    d5e8:	6e e1       	ldi	r22, 0x1E	; 30
    d5ea:	8b e1       	ldi	r24, 0x1B	; 27
    d5ec:	0e 94 40 4e 	call	0x9c80	; 0x9c80 <LBPrintInt>
	LBPrintInt(27, VRAM_TILES_V-1, game.score ,true);
    d5f0:	40 91 ae 0d 	lds	r20, 0x0DAE
    d5f4:	50 91 af 0d 	lds	r21, 0x0DAF
    d5f8:	21 e0       	ldi	r18, 0x01	; 1
    d5fa:	6f e1       	ldi	r22, 0x1F	; 31
    d5fc:	8b e1       	ldi	r24, 0x1B	; 27
    d5fe:	0e 94 40 4e 	call	0x9c80	; 0x9c80 <LBPrintInt>
	
	if (game.level_ended && !is_space() && game.player.flags & (IDLE|RUNNING|PRONE))
    d602:	80 91 c5 0d 	lds	r24, 0x0DC5
    d606:	88 23       	and	r24, r24
    d608:	09 f4       	brne	.+2      	; 0xd60c <update_level+0x1be>
    d60a:	69 c0       	rjmp	.+210    	; 0xd6de <update_level+0x290>
    d60c:	0e 94 93 4f 	call	0x9f26	; 0x9f26 <is_space>
    d610:	81 11       	cpse	r24, r1
    d612:	56 c0       	rjmp	.+172    	; 0xd6c0 <update_level+0x272>
    d614:	80 91 d6 0d 	lds	r24, 0x0DD6
    d618:	8e 70       	andi	r24, 0x0E	; 14
    d61a:	09 f4       	brne	.+2      	; 0xd61e <update_level+0x1d0>
    d61c:	60 c0       	rjmp	.+192    	; 0xd6de <update_level+0x290>
	{
		LBMapSprite(PLAYER_SLOT, map_hero_idle, 0);
    d61e:	40 e0       	ldi	r20, 0x00	; 0
    d620:	68 eb       	ldi	r22, 0xB8	; 184
    d622:	7d e2       	ldi	r23, 0x2D	; 45
    d624:	80 e0       	ldi	r24, 0x00	; 0
    d626:	0e 94 c4 4e 	call	0x9d88	; 0x9d88 <LBMapSprite>
		clear_sprites(ENEMY_SHOT_SLOT, MAX_ENEMY_SHOTS);
    d62a:	61 e0       	ldi	r22, 0x01	; 1
    d62c:	8e e0       	ldi	r24, 0x0E	; 14
    d62e:	0e 94 80 60 	call	0xc100	; 0xc100 <clear_sprites>
		LBRotateSprites();
    d632:	0e 94 54 4f 	call	0x9ea8	; 0x9ea8 <LBRotateSprites>
		map_ship();
    d636:	0e 94 7b 54 	call	0xa8f6	; 0xa8f6 <map_ship>

void update_level()
{
	u8 ship_x = game.player.shared.x - game.camera_x;
	u8 ship_y = 0;
	char ship_increment = 3;
    d63a:	d3 e0       	ldi	r29, 0x03	; 3
}

void update_level()
{
	u8 ship_x = game.player.shared.x - game.camera_x;
	u8 ship_y = 0;
    d63c:	c0 e0       	ldi	r28, 0x00	; 0
		clear_sprites(ENEMY_SHOT_SLOT, MAX_ENEMY_SHOTS);
		LBRotateSprites();
		map_ship();
		while (1)
		{
			WaitVsync(1);
    d63e:	81 e0       	ldi	r24, 0x01	; 1
    d640:	90 e0       	ldi	r25, 0x00	; 0
    d642:	0e 94 c5 4c 	call	0x998a	; 0x998a <WaitVsync>
			if (ship_y >= get_hero_spawn_y(game.current_level_index)*8)
    d646:	8c 2f       	mov	r24, r28
    d648:	90 e0       	ldi	r25, 0x00	; 0
    d64a:	80 3a       	cpi	r24, 0xA0	; 160
    d64c:	91 05       	cpc	r25, r1
    d64e:	6c f0       	brlt	.+26     	; 0xd66a <update_level+0x21c>
			{
				clear_sprites(0, game.player.width*game.player.height);
    d650:	80 91 da 0d 	lds	r24, 0x0DDA
    d654:	60 91 d9 0d 	lds	r22, 0x0DD9
    d658:	86 9f       	mul	r24, r22
    d65a:	60 2d       	mov	r22, r0
    d65c:	11 24       	eor	r1, r1
    d65e:	80 e0       	ldi	r24, 0x00	; 0
    d660:	0e 94 80 60 	call	0xc100	; 0xc100 <clear_sprites>
				LBRotateSprites();
    d664:	0e 94 54 4f 	call	0x9ea8	; 0x9ea8 <LBRotateSprites>
				ship_increment = -3;
    d668:	dd ef       	ldi	r29, 0xFD	; 253
			}
			LBMapSprite(6, LBGetNextFrame(&game.player.run), 0);
    d66a:	82 e3       	ldi	r24, 0x32	; 50
    d66c:	9e e0       	ldi	r25, 0x0E	; 14
    d66e:	0e 94 62 4d 	call	0x9ac4	; 0x9ac4 <LBGetNextFrame>
    d672:	40 e0       	ldi	r20, 0x00	; 0
    d674:	bc 01       	movw	r22, r24
    d676:	86 e0       	ldi	r24, 0x06	; 6
    d678:	0e 94 c4 4e 	call	0x9d88	; 0x9d88 <LBMapSprite>
	}
}

void update_level()
{
	u8 ship_x = game.player.shared.x - game.camera_x;
    d67c:	c7 01       	movw	r24, r14
    d67e:	b6 01       	movw	r22, r12
    d680:	0e 94 f0 6c 	call	0xd9e0	; 0xd9e0 <__fixunssfsi>
				clear_sprites(0, game.player.width*game.player.height);
				LBRotateSprites();
				ship_increment = -3;
			}
			LBMapSprite(6, LBGetNextFrame(&game.player.run), 0);
			LBMoveSprite(6, ship_x, ship_y, 4, 2);
    d684:	02 e0       	ldi	r16, 0x02	; 2
    d686:	24 e0       	ldi	r18, 0x04	; 4
    d688:	4c 2f       	mov	r20, r28
    d68a:	86 e0       	ldi	r24, 0x06	; 6
    d68c:	0e 94 16 4f 	call	0x9e2c	; 0x9e2c <LBMoveSprite>
			ship_y += ship_increment;
    d690:	cd 0f       	add	r28, r29
			if (ship_y == 0)
    d692:	99 f4       	brne	.+38     	; 0xd6ba <update_level+0x26c>
			{
				clear_sprites(6, 8);
    d694:	68 e0       	ldi	r22, 0x08	; 8
    d696:	86 e0       	ldi	r24, 0x06	; 6
    d698:	0e 94 80 60 	call	0xc100	; 0xc100 <clear_sprites>
				LBRotateSprites();
    d69c:	0e 94 54 4f 	call	0x9ea8	; 0x9ea8 <LBRotateSprites>
				tally_score((char*) strLevelClear, 100);
    d6a0:	64 e6       	ldi	r22, 0x64	; 100
    d6a2:	70 e0       	ldi	r23, 0x00	; 0
    d6a4:	87 e2       	ldi	r24, 0x27	; 39
    d6a6:	9b e0       	ldi	r25, 0x0B	; 11
    d6a8:	0e 94 c6 65 	call	0xcb8c	; 0xcb8c <tally_score>
				planet_transition(game.current_level_index+1, -1, 26, 3, 0);
    d6ac:	80 91 b9 0d 	lds	r24, 0x0DB9
    d6b0:	00 e0       	ldi	r16, 0x00	; 0
    d6b2:	23 e0       	ldi	r18, 0x03	; 3
    d6b4:	4a e1       	ldi	r20, 0x1A	; 26
    d6b6:	6f ef       	ldi	r22, 0xFF	; 255
    d6b8:	0f c0       	rjmp	.+30     	; 0xd6d8 <update_level+0x28a>
				break;
			}
			LBRotateSprites();
    d6ba:	0e 94 54 4f 	call	0x9ea8	; 0x9ea8 <LBRotateSprites>
		}
    d6be:	bf cf       	rjmp	.-130    	; 0xd63e <update_level+0x1f0>
	}
	else if (game.level_ended && is_space())
	{
		tally_score((char*) strLevelClear, 100);
    d6c0:	64 e6       	ldi	r22, 0x64	; 100
    d6c2:	70 e0       	ldi	r23, 0x00	; 0
    d6c4:	87 e2       	ldi	r24, 0x27	; 39
    d6c6:	9b e0       	ldi	r25, 0x0B	; 11
    d6c8:	0e 94 c6 65 	call	0xcb8c	; 0xcb8c <tally_score>
		planet_transition(game.current_level_index+1, 1, 28, -3, 199);
    d6cc:	80 91 b9 0d 	lds	r24, 0x0DB9
    d6d0:	07 ec       	ldi	r16, 0xC7	; 199
    d6d2:	2d ef       	ldi	r18, 0xFD	; 253
    d6d4:	4c e1       	ldi	r20, 0x1C	; 28
    d6d6:	61 e0       	ldi	r22, 0x01	; 1
    d6d8:	8f 5f       	subi	r24, 0xFF	; 255
    d6da:	0e 94 99 62 	call	0xc532	; 0xc532 <planet_transition>
	}
	
}
    d6de:	df 91       	pop	r29
    d6e0:	cf 91       	pop	r28
    d6e2:	1f 91       	pop	r17
    d6e4:	0f 91       	pop	r16
    d6e6:	ff 90       	pop	r15
    d6e8:	ef 90       	pop	r14
    d6ea:	df 90       	pop	r13
    d6ec:	cf 90       	pop	r12
    d6ee:	08 95       	ret

0000d6f0 <update_pause>:
		}
	}
}

void update_pause()
{
    d6f0:	ef 92       	push	r14
    d6f2:	ff 92       	push	r15
    d6f4:	0f 93       	push	r16
    d6f6:	1f 93       	push	r17
    d6f8:	cf 93       	push	r28
    d6fa:	df 93       	push	r29
	u8 x = Screen.scrollX / 8;
    d6fc:	c0 91 b2 0c 	lds	r28, 0x0CB2
	u8 y = Screen.scrollY / 8;
    d700:	00 91 b3 0c 	lds	r16, 0x0CB3
	
	if (game.joypadState.pressed & BTN_START)
    d704:	80 91 9c 0f 	lds	r24, 0x0F9C
    d708:	83 ff       	sbrs	r24, 3
    d70a:	63 c0       	rjmp	.+198    	; 0xd7d2 <update_pause+0xe2>
}

void update_pause()
{
	u8 x = Screen.scrollX / 8;
	u8 y = Screen.scrollY / 8;
    d70c:	06 95       	lsr	r16
    d70e:	06 95       	lsr	r16
    d710:	06 95       	lsr	r16
	
	if (game.joypadState.pressed & BTN_START)
	{
		DrawMap2((x+8)%32, (y+6)%30, map_canvas);
    d712:	10 e0       	ldi	r17, 0x00	; 0
	}
}

void update_pause()
{
	u8 x = Screen.scrollX / 8;
    d714:	c6 95       	lsr	r28
    d716:	c6 95       	lsr	r28
    d718:	c6 95       	lsr	r28
	u8 y = Screen.scrollY / 8;
	
	if (game.joypadState.pressed & BTN_START)
	{
		DrawMap2((x+8)%32, (y+6)%30, map_canvas);
    d71a:	d0 e0       	ldi	r29, 0x00	; 0
    d71c:	c8 01       	movw	r24, r16
    d71e:	06 96       	adiw	r24, 0x06	; 6
    d720:	2e e1       	ldi	r18, 0x1E	; 30
    d722:	e2 2e       	mov	r14, r18
    d724:	f1 2c       	mov	r15, r1
    d726:	b7 01       	movw	r22, r14
    d728:	0e 94 6d 6c 	call	0xd8da	; 0xd8da <__divmodhi4>
    d72c:	9e 01       	movw	r18, r28
    d72e:	28 5f       	subi	r18, 0xF8	; 248
    d730:	3f 4f       	sbci	r19, 0xFF	; 255
    d732:	4a ec       	ldi	r20, 0xCA	; 202
    d734:	51 e5       	ldi	r21, 0x51	; 81
    d736:	68 2f       	mov	r22, r24
    d738:	82 2f       	mov	r24, r18
    d73a:	8f 71       	andi	r24, 0x1F	; 31
    d73c:	0e 94 5c 4c 	call	0x98b8	; 0x98b8 <DrawMap>
		LBPrint((x+13)%32, (y+9)%30, (char*) strPaused);
    d740:	c8 01       	movw	r24, r16
    d742:	09 96       	adiw	r24, 0x09	; 9
    d744:	b7 01       	movw	r22, r14
    d746:	0e 94 6d 6c 	call	0xd8da	; 0xd8da <__divmodhi4>
    d74a:	9e 01       	movw	r18, r28
    d74c:	23 5f       	subi	r18, 0xF3	; 243
    d74e:	3f 4f       	sbci	r19, 0xFF	; 255
    d750:	43 e3       	ldi	r20, 0x33	; 51
    d752:	5b e0       	ldi	r21, 0x0B	; 11
    d754:	68 2f       	mov	r22, r24
    d756:	82 2f       	mov	r24, r18
    d758:	8f 71       	andi	r24, 0x1F	; 31
    d75a:	0e 94 f3 4d 	call	0x9be6	; 0x9be6 <LBPrint>
		LBPrint((x+10)%32, (y+12)%30, (char*) strExitGame);
    d75e:	c8 01       	movw	r24, r16
    d760:	0c 96       	adiw	r24, 0x0c	; 12
    d762:	b7 01       	movw	r22, r14
    d764:	0e 94 6d 6c 	call	0xd8da	; 0xd8da <__divmodhi4>
    d768:	2a 96       	adiw	r28, 0x0a	; 10
    d76a:	49 e3       	ldi	r20, 0x39	; 57
    d76c:	5b e0       	ldi	r21, 0x0B	; 11
    d76e:	68 2f       	mov	r22, r24
    d770:	8c 2f       	mov	r24, r28
    d772:	8f 71       	andi	r24, 0x1F	; 31
    d774:	0e 94 f3 4d 	call	0x9be6	; 0x9be6 <LBPrint>
		hide_sprites(0, MAX_EXTENDED_SPRITES);
    d778:	64 e1       	ldi	r22, 0x14	; 20
    d77a:	80 e0       	ldi	r24, 0x00	; 0
    d77c:	0e 94 bc 61 	call	0xc378	; 0xc378 <hide_sprites>
		LBRotateSprites();
    d780:	0e 94 54 4f 	call	0x9ea8	; 0x9ea8 <LBRotateSprites>
		while (1)
		{
			WaitVsync(1);
    d784:	81 e0       	ldi	r24, 0x01	; 1
    d786:	90 e0       	ldi	r25, 0x00	; 0
    d788:	0e 94 c5 4c 	call	0x998a	; 0x998a <WaitVsync>
			LBGetJoyPadState(&game.joypadState, 0);
    d78c:	60 e0       	ldi	r22, 0x00	; 0
    d78e:	8c e9       	ldi	r24, 0x9C	; 156
    d790:	9f e0       	ldi	r25, 0x0F	; 15
    d792:	0e 94 88 4d 	call	0x9b10	; 0x9b10 <LBGetJoyPadState>
			if (game.joypadState.pressed & BTN_START)
    d796:	80 91 9c 0f 	lds	r24, 0x0F9C
    d79a:	90 91 9d 0f 	lds	r25, 0x0F9D
    d79e:	83 ff       	sbrs	r24, 3
    d7a0:	08 c0       	rjmp	.+16     	; 0xd7b2 <update_pause+0xc2>
				exit_game();
				break;
			}
		}
	}
}
    d7a2:	df 91       	pop	r29
    d7a4:	cf 91       	pop	r28
    d7a6:	1f 91       	pop	r17
    d7a8:	0f 91       	pop	r16
    d7aa:	ff 90       	pop	r15
    d7ac:	ef 90       	pop	r14
		{
			WaitVsync(1);
			LBGetJoyPadState(&game.joypadState, 0);
			if (game.joypadState.pressed & BTN_START)
			{
				render_camera_view();
    d7ae:	0c 94 9a 52 	jmp	0xa534	; 0xa534 <render_camera_view>
				break;
			}
			else if (game.joypadState.pressed & BTN_X)
    d7b2:	91 ff       	sbrs	r25, 1
    d7b4:	e7 cf       	rjmp	.-50     	; 0xd784 <update_pause+0x94>
			{
				tally_score((char*)strGameOver, 0);
    d7b6:	60 e0       	ldi	r22, 0x00	; 0
    d7b8:	70 e0       	ldi	r23, 0x00	; 0
    d7ba:	87 e1       	ldi	r24, 0x17	; 23
    d7bc:	9b e0       	ldi	r25, 0x0B	; 11
    d7be:	0e 94 c6 65 	call	0xcb8c	; 0xcb8c <tally_score>
				exit_game();
				break;
			}
		}
	}
}
    d7c2:	df 91       	pop	r29
    d7c4:	cf 91       	pop	r28
    d7c6:	1f 91       	pop	r17
    d7c8:	0f 91       	pop	r16
    d7ca:	ff 90       	pop	r15
    d7cc:	ef 90       	pop	r14
				break;
			}
			else if (game.joypadState.pressed & BTN_X)
			{
				tally_score((char*)strGameOver, 0);
				exit_game();
    d7ce:	0c 94 cd 64 	jmp	0xc99a	; 0xc99a <exit_game>
				break;
			}
		}
	}
}
    d7d2:	df 91       	pop	r29
    d7d4:	cf 91       	pop	r28
    d7d6:	1f 91       	pop	r17
    d7d8:	0f 91       	pop	r16
    d7da:	ff 90       	pop	r15
    d7dc:	ef 90       	pop	r14
    d7de:	08 95       	ret

0000d7e0 <main>:
}

int main()
{
	// Initialize
	GetPrngNumber(GetTrueRandomSeed());
    d7e0:	0e 94 89 3e 	call	0x7d12	; 0x7d12 <GetTrueRandomSeed>
    d7e4:	0e 94 09 40 	call	0x8012	; 0x8012 <GetPrngNumber>
	InitMusicPlayer(my_patches);
    d7e8:	8f e1       	ldi	r24, 0x1F	; 31
    d7ea:	9d e1       	ldi	r25, 0x1D	; 29
    d7ec:	0e 94 e3 40 	call	0x81c6	; 0x81c6 <InitMusicPlayer>
	ClearVram();
    d7f0:	0e 94 11 3e 	call	0x7c22	; 0x7c22 <ClearVram>
	SetMasterVolume(0x05);
    d7f4:	85 e0       	ldi	r24, 0x05	; 5
    d7f6:	0e 94 97 44 	call	0x892e	; 0x892e <SetMasterVolume>
	SetTileTable(tiles_data);
    d7fa:	87 ee       	ldi	r24, 0xE7	; 231
    d7fc:	9d e2       	ldi	r25, 0x2D	; 45
    d7fe:	0e 94 2c 3e 	call	0x7c58	; 0x7c58 <SetTileTable>
	SetSpritesTileTable(sprites_data);
    d802:	8e e9       	ldi	r24, 0x9E	; 158
    d804:	9e e1       	ldi	r25, 0x1E	; 30
    d806:	0e 94 0c 3e 	call	0x7c18	; 0x7c18 <SetSpritesTileTable>
	}
}

void LBSetFontTilesMap(char* tiles_map)
{
	font_tiles_map = tiles_map;
    d80a:	87 e2       	ldi	r24, 0x27	; 39
    d80c:	91 e5       	ldi	r25, 0x51	; 81
    d80e:	90 93 83 0d 	sts	0x0D83, r25
    d812:	80 93 82 0d 	sts	0x0D82, r24
	LBSetFontTilesMap((char*) map_font);
	init_default_high_scores();
    d816:	0e 94 97 4f 	call	0x9f2e	; 0x9f2e <init_default_high_scores>
	load_splash();
    d81a:	0e 94 87 63 	call	0xc70e	; 0xc70e <load_splash>
	while (1)
	{
		WaitVsync(1);
    d81e:	81 e0       	ldi	r24, 0x01	; 1
    d820:	90 e0       	ldi	r25, 0x00	; 0
    d822:	0e 94 c5 4c 	call	0x998a	; 0x998a <WaitVsync>
		LBGetJoyPadState(&game.joypadState, 0);
    d826:	60 e0       	ldi	r22, 0x00	; 0
    d828:	8c e9       	ldi	r24, 0x9C	; 156
    d82a:	9f e0       	ldi	r25, 0x0F	; 15
    d82c:	0e 94 88 4d 	call	0x9b10	; 0x9b10 <LBGetJoyPadState>
		if (game.current_screen == LEVEL)
    d830:	80 91 b8 0d 	lds	r24, 0x0DB8
    d834:	82 30       	cpi	r24, 0x02	; 2
    d836:	b9 f4       	brne	.+46     	; 0xd866 <main+0x86>
		{
			update_level();
    d838:	0e 94 27 6a 	call	0xd44e	; 0xd44e <update_level>
			if (update_player())
    d83c:	0e 94 37 67 	call	0xce6e	; 0xce6e <update_player>
    d840:	88 23       	and	r24, r24
    d842:	d1 f0       	breq	.+52     	; 0xd878 <main+0x98>
			{
				update_shot();
    d844:	0e 94 92 55 	call	0xab24	; 0xab24 <update_shot>
				update_enemies();
    d848:	0e 94 21 5d 	call	0xba42	; 0xba42 <update_enemies>
				update_enemy_shots();
    d84c:	0e 94 66 5d 	call	0xbacc	; 0xbacc <update_enemy_shots>
				animate_player();
    d850:	0e 94 6c 5c 	call	0xb8d8	; 0xb8d8 <animate_player>
				animate_shot();
    d854:	0e 94 e8 59 	call	0xb3d0	; 0xb3d0 <animate_shot>
				animate_enemies();
    d858:	0e 94 00 5e 	call	0xbc00	; 0xbc00 <animate_enemies>
				animate_enemy_shots();
    d85c:	0e 94 43 5f 	call	0xbe86	; 0xbe86 <animate_enemy_shots>
				update_pause();
    d860:	0e 94 78 6b 	call	0xd6f0	; 0xd6f0 <update_pause>
    d864:	09 c0       	rjmp	.+18     	; 0xd878 <main+0x98>
			}
		}
		else if (game.current_screen == SPLASH)
    d866:	81 11       	cpse	r24, r1
    d868:	03 c0       	rjmp	.+6      	; 0xd870 <main+0x90>
		{
			update_splash();
    d86a:	0e 94 db 64 	call	0xc9b6	; 0xc9b6 <update_splash>
    d86e:	04 c0       	rjmp	.+8      	; 0xd878 <main+0x98>
			
		}
		else if (game.current_screen == HIGH_SCORES)
    d870:	81 30       	cpi	r24, 0x01	; 1
    d872:	11 f4       	brne	.+4      	; 0xd878 <main+0x98>
		{
			update_high_scores();
    d874:	0e 94 22 65 	call	0xca44	; 0xca44 <update_high_scores>
			
		}
		LBRotateSprites();
    d878:	0e 94 54 4f 	call	0x9ea8	; 0x9ea8 <LBRotateSprites>
	}
    d87c:	d0 cf       	rjmp	.-96     	; 0xd81e <main+0x3e>

0000d87e <__udivmodqi4>:
    d87e:	99 1b       	sub	r25, r25
    d880:	79 e0       	ldi	r23, 0x09	; 9
    d882:	04 c0       	rjmp	.+8      	; 0xd88c <__udivmodqi4_ep>

0000d884 <__udivmodqi4_loop>:
    d884:	99 1f       	adc	r25, r25
    d886:	96 17       	cp	r25, r22
    d888:	08 f0       	brcs	.+2      	; 0xd88c <__udivmodqi4_ep>
    d88a:	96 1b       	sub	r25, r22

0000d88c <__udivmodqi4_ep>:
    d88c:	88 1f       	adc	r24, r24
    d88e:	7a 95       	dec	r23
    d890:	c9 f7       	brne	.-14     	; 0xd884 <__udivmodqi4_loop>
    d892:	80 95       	com	r24
    d894:	08 95       	ret

0000d896 <__divmodqi4>:
    d896:	87 fb       	bst	r24, 7
    d898:	08 2e       	mov	r0, r24
    d89a:	06 26       	eor	r0, r22
    d89c:	87 fd       	sbrc	r24, 7
    d89e:	81 95       	neg	r24
    d8a0:	67 fd       	sbrc	r22, 7
    d8a2:	61 95       	neg	r22
    d8a4:	0e 94 3f 6c 	call	0xd87e	; 0xd87e <__udivmodqi4>
    d8a8:	0e f4       	brtc	.+2      	; 0xd8ac <__divmodqi4_1>
    d8aa:	91 95       	neg	r25

0000d8ac <__divmodqi4_1>:
    d8ac:	07 fc       	sbrc	r0, 7
    d8ae:	81 95       	neg	r24

0000d8b0 <__divmodqi4_exit>:
    d8b0:	08 95       	ret

0000d8b2 <__udivmodhi4>:
    d8b2:	aa 1b       	sub	r26, r26
    d8b4:	bb 1b       	sub	r27, r27
    d8b6:	51 e1       	ldi	r21, 0x11	; 17
    d8b8:	07 c0       	rjmp	.+14     	; 0xd8c8 <__udivmodhi4_ep>

0000d8ba <__udivmodhi4_loop>:
    d8ba:	aa 1f       	adc	r26, r26
    d8bc:	bb 1f       	adc	r27, r27
    d8be:	a6 17       	cp	r26, r22
    d8c0:	b7 07       	cpc	r27, r23
    d8c2:	10 f0       	brcs	.+4      	; 0xd8c8 <__udivmodhi4_ep>
    d8c4:	a6 1b       	sub	r26, r22
    d8c6:	b7 0b       	sbc	r27, r23

0000d8c8 <__udivmodhi4_ep>:
    d8c8:	88 1f       	adc	r24, r24
    d8ca:	99 1f       	adc	r25, r25
    d8cc:	5a 95       	dec	r21
    d8ce:	a9 f7       	brne	.-22     	; 0xd8ba <__udivmodhi4_loop>
    d8d0:	80 95       	com	r24
    d8d2:	90 95       	com	r25
    d8d4:	bc 01       	movw	r22, r24
    d8d6:	cd 01       	movw	r24, r26
    d8d8:	08 95       	ret

0000d8da <__divmodhi4>:
    d8da:	97 fb       	bst	r25, 7
    d8dc:	07 2e       	mov	r0, r23
    d8de:	16 f4       	brtc	.+4      	; 0xd8e4 <__divmodhi4+0xa>
    d8e0:	00 94       	com	r0
    d8e2:	07 d0       	rcall	.+14     	; 0xd8f2 <__divmodhi4_neg1>
    d8e4:	77 fd       	sbrc	r23, 7
    d8e6:	09 d0       	rcall	.+18     	; 0xd8fa <__divmodhi4_neg2>
    d8e8:	0e 94 59 6c 	call	0xd8b2	; 0xd8b2 <__udivmodhi4>
    d8ec:	07 fc       	sbrc	r0, 7
    d8ee:	05 d0       	rcall	.+10     	; 0xd8fa <__divmodhi4_neg2>
    d8f0:	3e f4       	brtc	.+14     	; 0xd900 <__divmodhi4_exit>

0000d8f2 <__divmodhi4_neg1>:
    d8f2:	90 95       	com	r25
    d8f4:	81 95       	neg	r24
    d8f6:	9f 4f       	sbci	r25, 0xFF	; 255
    d8f8:	08 95       	ret

0000d8fa <__divmodhi4_neg2>:
    d8fa:	70 95       	com	r23
    d8fc:	61 95       	neg	r22
    d8fe:	7f 4f       	sbci	r23, 0xFF	; 255

0000d900 <__divmodhi4_exit>:
    d900:	08 95       	ret

0000d902 <__tablejump2__>:
    d902:	ee 0f       	add	r30, r30
    d904:	ff 1f       	adc	r31, r31
    d906:	05 90       	lpm	r0, Z+
    d908:	f4 91       	lpm	r31, Z
    d90a:	e0 2d       	mov	r30, r0
    d90c:	09 94       	ijmp

0000d90e <__subsf3>:
    d90e:	50 58       	subi	r21, 0x80	; 128

0000d910 <__addsf3>:
    d910:	bb 27       	eor	r27, r27
    d912:	aa 27       	eor	r26, r26
    d914:	0e d0       	rcall	.+28     	; 0xd932 <__addsf3x>
    d916:	08 c1       	rjmp	.+528    	; 0xdb28 <__fp_round>
    d918:	f9 d0       	rcall	.+498    	; 0xdb0c <__fp_pscA>
    d91a:	30 f0       	brcs	.+12     	; 0xd928 <__addsf3+0x18>
    d91c:	fe d0       	rcall	.+508    	; 0xdb1a <__fp_pscB>
    d91e:	20 f0       	brcs	.+8      	; 0xd928 <__addsf3+0x18>
    d920:	31 f4       	brne	.+12     	; 0xd92e <__addsf3+0x1e>
    d922:	9f 3f       	cpi	r25, 0xFF	; 255
    d924:	11 f4       	brne	.+4      	; 0xd92a <__addsf3+0x1a>
    d926:	1e f4       	brtc	.+6      	; 0xd92e <__addsf3+0x1e>
    d928:	ee c0       	rjmp	.+476    	; 0xdb06 <__fp_nan>
    d92a:	0e f4       	brtc	.+2      	; 0xd92e <__addsf3+0x1e>
    d92c:	e0 95       	com	r30
    d92e:	e7 fb       	bst	r30, 7
    d930:	e4 c0       	rjmp	.+456    	; 0xdafa <__fp_inf>

0000d932 <__addsf3x>:
    d932:	e9 2f       	mov	r30, r25
    d934:	0a d1       	rcall	.+532    	; 0xdb4a <__fp_split3>
    d936:	80 f3       	brcs	.-32     	; 0xd918 <__addsf3+0x8>
    d938:	ba 17       	cp	r27, r26
    d93a:	62 07       	cpc	r22, r18
    d93c:	73 07       	cpc	r23, r19
    d93e:	84 07       	cpc	r24, r20
    d940:	95 07       	cpc	r25, r21
    d942:	18 f0       	brcs	.+6      	; 0xd94a <__addsf3x+0x18>
    d944:	71 f4       	brne	.+28     	; 0xd962 <__addsf3x+0x30>
    d946:	9e f5       	brtc	.+102    	; 0xd9ae <__addsf3x+0x7c>
    d948:	22 c1       	rjmp	.+580    	; 0xdb8e <__fp_zero>
    d94a:	0e f4       	brtc	.+2      	; 0xd94e <__addsf3x+0x1c>
    d94c:	e0 95       	com	r30
    d94e:	0b 2e       	mov	r0, r27
    d950:	ba 2f       	mov	r27, r26
    d952:	a0 2d       	mov	r26, r0
    d954:	0b 01       	movw	r0, r22
    d956:	b9 01       	movw	r22, r18
    d958:	90 01       	movw	r18, r0
    d95a:	0c 01       	movw	r0, r24
    d95c:	ca 01       	movw	r24, r20
    d95e:	a0 01       	movw	r20, r0
    d960:	11 24       	eor	r1, r1
    d962:	ff 27       	eor	r31, r31
    d964:	59 1b       	sub	r21, r25
    d966:	99 f0       	breq	.+38     	; 0xd98e <__addsf3x+0x5c>
    d968:	59 3f       	cpi	r21, 0xF9	; 249
    d96a:	50 f4       	brcc	.+20     	; 0xd980 <__addsf3x+0x4e>
    d96c:	50 3e       	cpi	r21, 0xE0	; 224
    d96e:	68 f1       	brcs	.+90     	; 0xd9ca <__addsf3x+0x98>
    d970:	1a 16       	cp	r1, r26
    d972:	f0 40       	sbci	r31, 0x00	; 0
    d974:	a2 2f       	mov	r26, r18
    d976:	23 2f       	mov	r18, r19
    d978:	34 2f       	mov	r19, r20
    d97a:	44 27       	eor	r20, r20
    d97c:	58 5f       	subi	r21, 0xF8	; 248
    d97e:	f3 cf       	rjmp	.-26     	; 0xd966 <__addsf3x+0x34>
    d980:	46 95       	lsr	r20
    d982:	37 95       	ror	r19
    d984:	27 95       	ror	r18
    d986:	a7 95       	ror	r26
    d988:	f0 40       	sbci	r31, 0x00	; 0
    d98a:	53 95       	inc	r21
    d98c:	c9 f7       	brne	.-14     	; 0xd980 <__addsf3x+0x4e>
    d98e:	7e f4       	brtc	.+30     	; 0xd9ae <__addsf3x+0x7c>
    d990:	1f 16       	cp	r1, r31
    d992:	ba 0b       	sbc	r27, r26
    d994:	62 0b       	sbc	r22, r18
    d996:	73 0b       	sbc	r23, r19
    d998:	84 0b       	sbc	r24, r20
    d99a:	ba f0       	brmi	.+46     	; 0xd9ca <__addsf3x+0x98>
    d99c:	91 50       	subi	r25, 0x01	; 1
    d99e:	a1 f0       	breq	.+40     	; 0xd9c8 <__addsf3x+0x96>
    d9a0:	ff 0f       	add	r31, r31
    d9a2:	bb 1f       	adc	r27, r27
    d9a4:	66 1f       	adc	r22, r22
    d9a6:	77 1f       	adc	r23, r23
    d9a8:	88 1f       	adc	r24, r24
    d9aa:	c2 f7       	brpl	.-16     	; 0xd99c <__addsf3x+0x6a>
    d9ac:	0e c0       	rjmp	.+28     	; 0xd9ca <__addsf3x+0x98>
    d9ae:	ba 0f       	add	r27, r26
    d9b0:	62 1f       	adc	r22, r18
    d9b2:	73 1f       	adc	r23, r19
    d9b4:	84 1f       	adc	r24, r20
    d9b6:	48 f4       	brcc	.+18     	; 0xd9ca <__addsf3x+0x98>
    d9b8:	87 95       	ror	r24
    d9ba:	77 95       	ror	r23
    d9bc:	67 95       	ror	r22
    d9be:	b7 95       	ror	r27
    d9c0:	f7 95       	ror	r31
    d9c2:	9e 3f       	cpi	r25, 0xFE	; 254
    d9c4:	08 f0       	brcs	.+2      	; 0xd9c8 <__addsf3x+0x96>
    d9c6:	b3 cf       	rjmp	.-154    	; 0xd92e <__addsf3+0x1e>
    d9c8:	93 95       	inc	r25
    d9ca:	88 0f       	add	r24, r24
    d9cc:	08 f0       	brcs	.+2      	; 0xd9d0 <__addsf3x+0x9e>
    d9ce:	99 27       	eor	r25, r25
    d9d0:	ee 0f       	add	r30, r30
    d9d2:	97 95       	ror	r25
    d9d4:	87 95       	ror	r24
    d9d6:	08 95       	ret

0000d9d8 <__cmpsf2>:
    d9d8:	6c d0       	rcall	.+216    	; 0xdab2 <__fp_cmp>
    d9da:	08 f4       	brcc	.+2      	; 0xd9de <__cmpsf2+0x6>
    d9dc:	81 e0       	ldi	r24, 0x01	; 1
    d9de:	08 95       	ret

0000d9e0 <__fixunssfsi>:
    d9e0:	bc d0       	rcall	.+376    	; 0xdb5a <__fp_splitA>
    d9e2:	88 f0       	brcs	.+34     	; 0xda06 <__fixunssfsi+0x26>
    d9e4:	9f 57       	subi	r25, 0x7F	; 127
    d9e6:	90 f0       	brcs	.+36     	; 0xda0c <__fixunssfsi+0x2c>
    d9e8:	b9 2f       	mov	r27, r25
    d9ea:	99 27       	eor	r25, r25
    d9ec:	b7 51       	subi	r27, 0x17	; 23
    d9ee:	a0 f0       	brcs	.+40     	; 0xda18 <__fixunssfsi+0x38>
    d9f0:	d1 f0       	breq	.+52     	; 0xda26 <__fixunssfsi+0x46>
    d9f2:	66 0f       	add	r22, r22
    d9f4:	77 1f       	adc	r23, r23
    d9f6:	88 1f       	adc	r24, r24
    d9f8:	99 1f       	adc	r25, r25
    d9fa:	1a f0       	brmi	.+6      	; 0xda02 <__fixunssfsi+0x22>
    d9fc:	ba 95       	dec	r27
    d9fe:	c9 f7       	brne	.-14     	; 0xd9f2 <__fixunssfsi+0x12>
    da00:	12 c0       	rjmp	.+36     	; 0xda26 <__fixunssfsi+0x46>
    da02:	b1 30       	cpi	r27, 0x01	; 1
    da04:	81 f0       	breq	.+32     	; 0xda26 <__fixunssfsi+0x46>
    da06:	c3 d0       	rcall	.+390    	; 0xdb8e <__fp_zero>
    da08:	b1 e0       	ldi	r27, 0x01	; 1
    da0a:	08 95       	ret
    da0c:	c0 c0       	rjmp	.+384    	; 0xdb8e <__fp_zero>
    da0e:	67 2f       	mov	r22, r23
    da10:	78 2f       	mov	r23, r24
    da12:	88 27       	eor	r24, r24
    da14:	b8 5f       	subi	r27, 0xF8	; 248
    da16:	39 f0       	breq	.+14     	; 0xda26 <__fixunssfsi+0x46>
    da18:	b9 3f       	cpi	r27, 0xF9	; 249
    da1a:	cc f3       	brlt	.-14     	; 0xda0e <__fixunssfsi+0x2e>
    da1c:	86 95       	lsr	r24
    da1e:	77 95       	ror	r23
    da20:	67 95       	ror	r22
    da22:	b3 95       	inc	r27
    da24:	d9 f7       	brne	.-10     	; 0xda1c <__fixunssfsi+0x3c>
    da26:	3e f4       	brtc	.+14     	; 0xda36 <__fixunssfsi+0x56>
    da28:	90 95       	com	r25
    da2a:	80 95       	com	r24
    da2c:	70 95       	com	r23
    da2e:	61 95       	neg	r22
    da30:	7f 4f       	sbci	r23, 0xFF	; 255
    da32:	8f 4f       	sbci	r24, 0xFF	; 255
    da34:	9f 4f       	sbci	r25, 0xFF	; 255
    da36:	08 95       	ret

0000da38 <__floatunsisf>:
    da38:	e8 94       	clt
    da3a:	09 c0       	rjmp	.+18     	; 0xda4e <__floatsisf+0x12>

0000da3c <__floatsisf>:
    da3c:	97 fb       	bst	r25, 7
    da3e:	3e f4       	brtc	.+14     	; 0xda4e <__floatsisf+0x12>
    da40:	90 95       	com	r25
    da42:	80 95       	com	r24
    da44:	70 95       	com	r23
    da46:	61 95       	neg	r22
    da48:	7f 4f       	sbci	r23, 0xFF	; 255
    da4a:	8f 4f       	sbci	r24, 0xFF	; 255
    da4c:	9f 4f       	sbci	r25, 0xFF	; 255
    da4e:	99 23       	and	r25, r25
    da50:	a9 f0       	breq	.+42     	; 0xda7c <__floatsisf+0x40>
    da52:	f9 2f       	mov	r31, r25
    da54:	96 e9       	ldi	r25, 0x96	; 150
    da56:	bb 27       	eor	r27, r27
    da58:	93 95       	inc	r25
    da5a:	f6 95       	lsr	r31
    da5c:	87 95       	ror	r24
    da5e:	77 95       	ror	r23
    da60:	67 95       	ror	r22
    da62:	b7 95       	ror	r27
    da64:	f1 11       	cpse	r31, r1
    da66:	f8 cf       	rjmp	.-16     	; 0xda58 <__floatsisf+0x1c>
    da68:	fa f4       	brpl	.+62     	; 0xdaa8 <__floatsisf+0x6c>
    da6a:	bb 0f       	add	r27, r27
    da6c:	11 f4       	brne	.+4      	; 0xda72 <__floatsisf+0x36>
    da6e:	60 ff       	sbrs	r22, 0
    da70:	1b c0       	rjmp	.+54     	; 0xdaa8 <__floatsisf+0x6c>
    da72:	6f 5f       	subi	r22, 0xFF	; 255
    da74:	7f 4f       	sbci	r23, 0xFF	; 255
    da76:	8f 4f       	sbci	r24, 0xFF	; 255
    da78:	9f 4f       	sbci	r25, 0xFF	; 255
    da7a:	16 c0       	rjmp	.+44     	; 0xdaa8 <__floatsisf+0x6c>
    da7c:	88 23       	and	r24, r24
    da7e:	11 f0       	breq	.+4      	; 0xda84 <__floatsisf+0x48>
    da80:	96 e9       	ldi	r25, 0x96	; 150
    da82:	11 c0       	rjmp	.+34     	; 0xdaa6 <__floatsisf+0x6a>
    da84:	77 23       	and	r23, r23
    da86:	21 f0       	breq	.+8      	; 0xda90 <__floatsisf+0x54>
    da88:	9e e8       	ldi	r25, 0x8E	; 142
    da8a:	87 2f       	mov	r24, r23
    da8c:	76 2f       	mov	r23, r22
    da8e:	05 c0       	rjmp	.+10     	; 0xda9a <__floatsisf+0x5e>
    da90:	66 23       	and	r22, r22
    da92:	71 f0       	breq	.+28     	; 0xdab0 <__floatsisf+0x74>
    da94:	96 e8       	ldi	r25, 0x86	; 134
    da96:	86 2f       	mov	r24, r22
    da98:	70 e0       	ldi	r23, 0x00	; 0
    da9a:	60 e0       	ldi	r22, 0x00	; 0
    da9c:	2a f0       	brmi	.+10     	; 0xdaa8 <__floatsisf+0x6c>
    da9e:	9a 95       	dec	r25
    daa0:	66 0f       	add	r22, r22
    daa2:	77 1f       	adc	r23, r23
    daa4:	88 1f       	adc	r24, r24
    daa6:	da f7       	brpl	.-10     	; 0xda9e <__floatsisf+0x62>
    daa8:	88 0f       	add	r24, r24
    daaa:	96 95       	lsr	r25
    daac:	87 95       	ror	r24
    daae:	97 f9       	bld	r25, 7
    dab0:	08 95       	ret

0000dab2 <__fp_cmp>:
    dab2:	99 0f       	add	r25, r25
    dab4:	00 08       	sbc	r0, r0
    dab6:	55 0f       	add	r21, r21
    dab8:	aa 0b       	sbc	r26, r26
    daba:	e0 e8       	ldi	r30, 0x80	; 128
    dabc:	fe ef       	ldi	r31, 0xFE	; 254
    dabe:	16 16       	cp	r1, r22
    dac0:	17 06       	cpc	r1, r23
    dac2:	e8 07       	cpc	r30, r24
    dac4:	f9 07       	cpc	r31, r25
    dac6:	c0 f0       	brcs	.+48     	; 0xdaf8 <__fp_cmp+0x46>
    dac8:	12 16       	cp	r1, r18
    daca:	13 06       	cpc	r1, r19
    dacc:	e4 07       	cpc	r30, r20
    dace:	f5 07       	cpc	r31, r21
    dad0:	98 f0       	brcs	.+38     	; 0xdaf8 <__fp_cmp+0x46>
    dad2:	62 1b       	sub	r22, r18
    dad4:	73 0b       	sbc	r23, r19
    dad6:	84 0b       	sbc	r24, r20
    dad8:	95 0b       	sbc	r25, r21
    dada:	39 f4       	brne	.+14     	; 0xdaea <__fp_cmp+0x38>
    dadc:	0a 26       	eor	r0, r26
    dade:	61 f0       	breq	.+24     	; 0xdaf8 <__fp_cmp+0x46>
    dae0:	23 2b       	or	r18, r19
    dae2:	24 2b       	or	r18, r20
    dae4:	25 2b       	or	r18, r21
    dae6:	21 f4       	brne	.+8      	; 0xdaf0 <__fp_cmp+0x3e>
    dae8:	08 95       	ret
    daea:	0a 26       	eor	r0, r26
    daec:	09 f4       	brne	.+2      	; 0xdaf0 <__fp_cmp+0x3e>
    daee:	a1 40       	sbci	r26, 0x01	; 1
    daf0:	a6 95       	lsr	r26
    daf2:	8f ef       	ldi	r24, 0xFF	; 255
    daf4:	81 1d       	adc	r24, r1
    daf6:	81 1d       	adc	r24, r1
    daf8:	08 95       	ret

0000dafa <__fp_inf>:
    dafa:	97 f9       	bld	r25, 7
    dafc:	9f 67       	ori	r25, 0x7F	; 127
    dafe:	80 e8       	ldi	r24, 0x80	; 128
    db00:	70 e0       	ldi	r23, 0x00	; 0
    db02:	60 e0       	ldi	r22, 0x00	; 0
    db04:	08 95       	ret

0000db06 <__fp_nan>:
    db06:	9f ef       	ldi	r25, 0xFF	; 255
    db08:	80 ec       	ldi	r24, 0xC0	; 192
    db0a:	08 95       	ret

0000db0c <__fp_pscA>:
    db0c:	00 24       	eor	r0, r0
    db0e:	0a 94       	dec	r0
    db10:	16 16       	cp	r1, r22
    db12:	17 06       	cpc	r1, r23
    db14:	18 06       	cpc	r1, r24
    db16:	09 06       	cpc	r0, r25
    db18:	08 95       	ret

0000db1a <__fp_pscB>:
    db1a:	00 24       	eor	r0, r0
    db1c:	0a 94       	dec	r0
    db1e:	12 16       	cp	r1, r18
    db20:	13 06       	cpc	r1, r19
    db22:	14 06       	cpc	r1, r20
    db24:	05 06       	cpc	r0, r21
    db26:	08 95       	ret

0000db28 <__fp_round>:
    db28:	09 2e       	mov	r0, r25
    db2a:	03 94       	inc	r0
    db2c:	00 0c       	add	r0, r0
    db2e:	11 f4       	brne	.+4      	; 0xdb34 <__fp_round+0xc>
    db30:	88 23       	and	r24, r24
    db32:	52 f0       	brmi	.+20     	; 0xdb48 <__fp_round+0x20>
    db34:	bb 0f       	add	r27, r27
    db36:	40 f4       	brcc	.+16     	; 0xdb48 <__fp_round+0x20>
    db38:	bf 2b       	or	r27, r31
    db3a:	11 f4       	brne	.+4      	; 0xdb40 <__fp_round+0x18>
    db3c:	60 ff       	sbrs	r22, 0
    db3e:	04 c0       	rjmp	.+8      	; 0xdb48 <__fp_round+0x20>
    db40:	6f 5f       	subi	r22, 0xFF	; 255
    db42:	7f 4f       	sbci	r23, 0xFF	; 255
    db44:	8f 4f       	sbci	r24, 0xFF	; 255
    db46:	9f 4f       	sbci	r25, 0xFF	; 255
    db48:	08 95       	ret

0000db4a <__fp_split3>:
    db4a:	57 fd       	sbrc	r21, 7
    db4c:	90 58       	subi	r25, 0x80	; 128
    db4e:	44 0f       	add	r20, r20
    db50:	55 1f       	adc	r21, r21
    db52:	59 f0       	breq	.+22     	; 0xdb6a <__fp_splitA+0x10>
    db54:	5f 3f       	cpi	r21, 0xFF	; 255
    db56:	71 f0       	breq	.+28     	; 0xdb74 <__fp_splitA+0x1a>
    db58:	47 95       	ror	r20

0000db5a <__fp_splitA>:
    db5a:	88 0f       	add	r24, r24
    db5c:	97 fb       	bst	r25, 7
    db5e:	99 1f       	adc	r25, r25
    db60:	61 f0       	breq	.+24     	; 0xdb7a <__fp_splitA+0x20>
    db62:	9f 3f       	cpi	r25, 0xFF	; 255
    db64:	79 f0       	breq	.+30     	; 0xdb84 <__fp_splitA+0x2a>
    db66:	87 95       	ror	r24
    db68:	08 95       	ret
    db6a:	12 16       	cp	r1, r18
    db6c:	13 06       	cpc	r1, r19
    db6e:	14 06       	cpc	r1, r20
    db70:	55 1f       	adc	r21, r21
    db72:	f2 cf       	rjmp	.-28     	; 0xdb58 <__fp_split3+0xe>
    db74:	46 95       	lsr	r20
    db76:	f1 df       	rcall	.-30     	; 0xdb5a <__fp_splitA>
    db78:	08 c0       	rjmp	.+16     	; 0xdb8a <__fp_splitA+0x30>
    db7a:	16 16       	cp	r1, r22
    db7c:	17 06       	cpc	r1, r23
    db7e:	18 06       	cpc	r1, r24
    db80:	99 1f       	adc	r25, r25
    db82:	f1 cf       	rjmp	.-30     	; 0xdb66 <__fp_splitA+0xc>
    db84:	86 95       	lsr	r24
    db86:	71 05       	cpc	r23, r1
    db88:	61 05       	cpc	r22, r1
    db8a:	08 94       	sec
    db8c:	08 95       	ret

0000db8e <__fp_zero>:
    db8e:	e8 94       	clt

0000db90 <__fp_szero>:
    db90:	bb 27       	eor	r27, r27
    db92:	66 27       	eor	r22, r22
    db94:	77 27       	eor	r23, r23
    db96:	cb 01       	movw	r24, r22
    db98:	97 f9       	bld	r25, 7
    db9a:	08 95       	ret

0000db9c <__gesf2>:
    db9c:	8a df       	rcall	.-236    	; 0xdab2 <__fp_cmp>
    db9e:	08 f4       	brcc	.+2      	; 0xdba2 <__gesf2+0x6>
    dba0:	8f ef       	ldi	r24, 0xFF	; 255
    dba2:	08 95       	ret

0000dba4 <__mulsf3>:
    dba4:	0b d0       	rcall	.+22     	; 0xdbbc <__mulsf3x>
    dba6:	c0 cf       	rjmp	.-128    	; 0xdb28 <__fp_round>
    dba8:	b1 df       	rcall	.-158    	; 0xdb0c <__fp_pscA>
    dbaa:	28 f0       	brcs	.+10     	; 0xdbb6 <__mulsf3+0x12>
    dbac:	b6 df       	rcall	.-148    	; 0xdb1a <__fp_pscB>
    dbae:	18 f0       	brcs	.+6      	; 0xdbb6 <__mulsf3+0x12>
    dbb0:	95 23       	and	r25, r21
    dbb2:	09 f0       	breq	.+2      	; 0xdbb6 <__mulsf3+0x12>
    dbb4:	a2 cf       	rjmp	.-188    	; 0xdafa <__fp_inf>
    dbb6:	a7 cf       	rjmp	.-178    	; 0xdb06 <__fp_nan>
    dbb8:	11 24       	eor	r1, r1
    dbba:	ea cf       	rjmp	.-44     	; 0xdb90 <__fp_szero>

0000dbbc <__mulsf3x>:
    dbbc:	c6 df       	rcall	.-116    	; 0xdb4a <__fp_split3>
    dbbe:	a0 f3       	brcs	.-24     	; 0xdba8 <__mulsf3+0x4>

0000dbc0 <__mulsf3_pse>:
    dbc0:	95 9f       	mul	r25, r21
    dbc2:	d1 f3       	breq	.-12     	; 0xdbb8 <__mulsf3+0x14>
    dbc4:	95 0f       	add	r25, r21
    dbc6:	50 e0       	ldi	r21, 0x00	; 0
    dbc8:	55 1f       	adc	r21, r21
    dbca:	62 9f       	mul	r22, r18
    dbcc:	f0 01       	movw	r30, r0
    dbce:	72 9f       	mul	r23, r18
    dbd0:	bb 27       	eor	r27, r27
    dbd2:	f0 0d       	add	r31, r0
    dbd4:	b1 1d       	adc	r27, r1
    dbd6:	63 9f       	mul	r22, r19
    dbd8:	aa 27       	eor	r26, r26
    dbda:	f0 0d       	add	r31, r0
    dbdc:	b1 1d       	adc	r27, r1
    dbde:	aa 1f       	adc	r26, r26
    dbe0:	64 9f       	mul	r22, r20
    dbe2:	66 27       	eor	r22, r22
    dbe4:	b0 0d       	add	r27, r0
    dbe6:	a1 1d       	adc	r26, r1
    dbe8:	66 1f       	adc	r22, r22
    dbea:	82 9f       	mul	r24, r18
    dbec:	22 27       	eor	r18, r18
    dbee:	b0 0d       	add	r27, r0
    dbf0:	a1 1d       	adc	r26, r1
    dbf2:	62 1f       	adc	r22, r18
    dbf4:	73 9f       	mul	r23, r19
    dbf6:	b0 0d       	add	r27, r0
    dbf8:	a1 1d       	adc	r26, r1
    dbfa:	62 1f       	adc	r22, r18
    dbfc:	83 9f       	mul	r24, r19
    dbfe:	a0 0d       	add	r26, r0
    dc00:	61 1d       	adc	r22, r1
    dc02:	22 1f       	adc	r18, r18
    dc04:	74 9f       	mul	r23, r20
    dc06:	33 27       	eor	r19, r19
    dc08:	a0 0d       	add	r26, r0
    dc0a:	61 1d       	adc	r22, r1
    dc0c:	23 1f       	adc	r18, r19
    dc0e:	84 9f       	mul	r24, r20
    dc10:	60 0d       	add	r22, r0
    dc12:	21 1d       	adc	r18, r1
    dc14:	82 2f       	mov	r24, r18
    dc16:	76 2f       	mov	r23, r22
    dc18:	6a 2f       	mov	r22, r26
    dc1a:	11 24       	eor	r1, r1
    dc1c:	9f 57       	subi	r25, 0x7F	; 127
    dc1e:	50 40       	sbci	r21, 0x00	; 0
    dc20:	8a f0       	brmi	.+34     	; 0xdc44 <__mulsf3_pse+0x84>
    dc22:	e1 f0       	breq	.+56     	; 0xdc5c <__mulsf3_pse+0x9c>
    dc24:	88 23       	and	r24, r24
    dc26:	4a f0       	brmi	.+18     	; 0xdc3a <__mulsf3_pse+0x7a>
    dc28:	ee 0f       	add	r30, r30
    dc2a:	ff 1f       	adc	r31, r31
    dc2c:	bb 1f       	adc	r27, r27
    dc2e:	66 1f       	adc	r22, r22
    dc30:	77 1f       	adc	r23, r23
    dc32:	88 1f       	adc	r24, r24
    dc34:	91 50       	subi	r25, 0x01	; 1
    dc36:	50 40       	sbci	r21, 0x00	; 0
    dc38:	a9 f7       	brne	.-22     	; 0xdc24 <__mulsf3_pse+0x64>
    dc3a:	9e 3f       	cpi	r25, 0xFE	; 254
    dc3c:	51 05       	cpc	r21, r1
    dc3e:	70 f0       	brcs	.+28     	; 0xdc5c <__mulsf3_pse+0x9c>
    dc40:	5c cf       	rjmp	.-328    	; 0xdafa <__fp_inf>
    dc42:	a6 cf       	rjmp	.-180    	; 0xdb90 <__fp_szero>
    dc44:	5f 3f       	cpi	r21, 0xFF	; 255
    dc46:	ec f3       	brlt	.-6      	; 0xdc42 <__mulsf3_pse+0x82>
    dc48:	98 3e       	cpi	r25, 0xE8	; 232
    dc4a:	dc f3       	brlt	.-10     	; 0xdc42 <__mulsf3_pse+0x82>
    dc4c:	86 95       	lsr	r24
    dc4e:	77 95       	ror	r23
    dc50:	67 95       	ror	r22
    dc52:	b7 95       	ror	r27
    dc54:	f7 95       	ror	r31
    dc56:	e7 95       	ror	r30
    dc58:	9f 5f       	subi	r25, 0xFF	; 255
    dc5a:	c1 f7       	brne	.-16     	; 0xdc4c <__mulsf3_pse+0x8c>
    dc5c:	fe 2b       	or	r31, r30
    dc5e:	88 0f       	add	r24, r24
    dc60:	91 1d       	adc	r25, r1
    dc62:	96 95       	lsr	r25
    dc64:	87 95       	ror	r24
    dc66:	97 f9       	bld	r25, 7
    dc68:	08 95       	ret

0000dc6a <strnlen_P>:
    dc6a:	fc 01       	movw	r30, r24
    dc6c:	05 90       	lpm	r0, Z+
    dc6e:	61 50       	subi	r22, 0x01	; 1
    dc70:	70 40       	sbci	r23, 0x00	; 0
    dc72:	01 10       	cpse	r0, r1
    dc74:	d8 f7       	brcc	.-10     	; 0xdc6c <strnlen_P+0x2>
    dc76:	80 95       	com	r24
    dc78:	90 95       	com	r25
    dc7a:	8e 0f       	add	r24, r30
    dc7c:	9f 1f       	adc	r25, r31
    dc7e:	08 95       	ret

0000dc80 <_exit>:
    dc80:	f8 94       	cli

0000dc82 <__stop_program>:
    dc82:	ff cf       	rjmp	.-2      	; 0xdc82 <__stop_program>
