
Iris.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800500  0000bb0a  0000bc0a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .noinit       00000400  00800100  00800100  0000bc20  2**5
                  CONTENTS, READONLY
  2 .text         0000bb0a  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .bss          00000af2  00800502  00800502  0000bc0c  2**1
                  ALLOC
  4 .stab         0000057c  00000000  00000000  0000c020  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000256  00000000  00000000  0000c59c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  0000c7f2  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000620  00000000  00000000  0000c808  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000076a5  00000000  00000000  0000ce28  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000167e  00000000  00000000  000144cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00001f61  00000000  00000000  00015b4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000012dc  00000000  00000000  00017aac  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000019a7  00000000  00000000  00018d88  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000664a  00000000  00000000  0001a72f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000750  00000000  00000000  00020d80  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 fa 31 	jmp	0x63f4	; 0x63f4 <__ctors_end>
       4:	0c 94 63 32 	jmp	0x64c6	; 0x64c6 <__bad_interrupt>
       8:	0c 94 63 32 	jmp	0x64c6	; 0x64c6 <__bad_interrupt>
       c:	0c 94 63 32 	jmp	0x64c6	; 0x64c6 <__bad_interrupt>
      10:	0c 94 63 32 	jmp	0x64c6	; 0x64c6 <__bad_interrupt>
      14:	0c 94 63 32 	jmp	0x64c6	; 0x64c6 <__bad_interrupt>
      18:	0c 94 63 32 	jmp	0x64c6	; 0x64c6 <__bad_interrupt>
      1c:	0c 94 63 32 	jmp	0x64c6	; 0x64c6 <__bad_interrupt>
      20:	0c 94 d6 37 	jmp	0x6fac	; 0x6fac <__vector_8>
      24:	0c 94 63 32 	jmp	0x64c6	; 0x64c6 <__bad_interrupt>
      28:	0c 94 63 32 	jmp	0x64c6	; 0x64c6 <__bad_interrupt>
      2c:	0c 94 63 32 	jmp	0x64c6	; 0x64c6 <__bad_interrupt>
      30:	0c 94 63 32 	jmp	0x64c6	; 0x64c6 <__bad_interrupt>
      34:	0c 94 a7 35 	jmp	0x6b4e	; 0x6b4e <__vector_13>
      38:	0c 94 e7 35 	jmp	0x6bce	; 0x6bce <__vector_14>
      3c:	0c 94 63 32 	jmp	0x64c6	; 0x64c6 <__bad_interrupt>
      40:	0c 94 63 32 	jmp	0x64c6	; 0x64c6 <__bad_interrupt>
      44:	0c 94 63 32 	jmp	0x64c6	; 0x64c6 <__bad_interrupt>
      48:	0c 94 63 32 	jmp	0x64c6	; 0x64c6 <__bad_interrupt>
      4c:	0c 94 63 32 	jmp	0x64c6	; 0x64c6 <__bad_interrupt>
      50:	0c 94 63 32 	jmp	0x64c6	; 0x64c6 <__bad_interrupt>
      54:	0c 94 63 32 	jmp	0x64c6	; 0x64c6 <__bad_interrupt>
      58:	0c 94 63 32 	jmp	0x64c6	; 0x64c6 <__bad_interrupt>
      5c:	0c 94 63 32 	jmp	0x64c6	; 0x64c6 <__bad_interrupt>
      60:	0c 94 63 32 	jmp	0x64c6	; 0x64c6 <__bad_interrupt>
      64:	0c 94 63 32 	jmp	0x64c6	; 0x64c6 <__bad_interrupt>
      68:	0c 94 63 32 	jmp	0x64c6	; 0x64c6 <__bad_interrupt>
      6c:	0c 94 63 32 	jmp	0x64c6	; 0x64c6 <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	81 00       	.word	0x0081	; ????
      72:	45 00       	.word	0x0045	; ????
      74:	27 ff       	sbrs	r18, 7
      76:	24 ff       	sbrs	r18, 4
      78:	2a 90       	ld	r2, -Y
      7a:	2b 1c       	adc	r2, r11
      7c:	21 0c       	add	r2, r1
      7e:	22 fb       	bst	r18, 2
      80:	85 00       	.word	0x0085	; ????
      82:	84 00       	.word	0x0084	; ????
      84:	89 03       	fmulsu	r16, r17
      86:	88 8d       	ldd	r24, Y+24	; 0x18
      88:	81 09       	sbc	r24, r1
      8a:	6f 02       	muls	r22, r31
      8c:	44 42       	sbci	r20, 0x24	; 36
      8e:	47 00       	.word	0x0047	; ????
      90:	45 01       	movw	r8, r10
      92:	b0 83       	st	Z, r27
      94:	b3 00       	.word	0x00b3	; ????
      96:	b1 01       	movw	r22, r2
      98:	25 11       	cpse	r18, r5
      9a:	8a 4f       	sbci	r24, 0xFA	; 250
      9c:	8b 03       	fmulsu	r16, r19

0000009e <eeprom_format_table>:
      9e:	5a 55 01 20 01 01 00 38 08 00 00 00 00 00 00 00     ZU. ...8........
	...

000000be <patchCommands>:
      be:	1e 39 21 39 7d 39 81 39 88 39 29 39 2e 39 33 39     .9!9}9.9.9)9.939
      ce:	90 39 36 39 39 39 3c 39 77 39 7a 39 a0 39           .96999<9w9z9.9

000000dc <fader>:
      dc:	00 40 88 91 d2 e4 ad b5 b6 be bf ff                 .@..........

000000e8 <map_uzeboxlogo2>:
      e8:	05 03 00 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f     ................
	...

000000f9 <map_uzeboxlogo>:
      f9:	05 04 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d     ................
     109:	00 0e 0f 10 11 12                                   ......

0000010f <logo_tileset>:
	...
     16b:	00 00 00 49 00 00 00 00 00 49 52 52 00 00 00 49     ...I.....IRR...I
     17b:	52 53 1c 25 00 49 52 52 24 25 25 1b 52 52 5c 2d     RS.%.IRR$%%.RR\-
     18b:	2d 1c 12 12 00 00 00 00 00 00 00 00 00 00 00 00     -...............
     19b:	40 49 49 49 00 40 49 49 52 5b 5b 5b 4a 52 52 5b     @III.@IIR[[[JRR[
     1ab:	1c 1c 13 12 5b 1c 24 1c 12 09 09 09 24 1b 12 09     ....[.$.....$...
     1bb:	09 09 09 0a 0a 0a 0a 0a 0a 0a 0a 13 0a 0a 12 0a     ................
     1cb:	0a 12 13 0a 00 00 00 00 00 00 00 00 92 52 52 52     .............RRR
     1db:	52 52 52 49 13 12 13 09 00 1c 1b 13 0a 12 12 40     RRRI...........@
     1eb:	1b 65 64 1c 09 0a 00 09 24 1b 1c 65 12 00 00 25     .ed.....$..e...%
     1fb:	1c 1c 1c 1c 01 00 25 24 1c 1c 1c 1c 00 24 25 24     ......%$.....$%$
     20b:	24 24 1c 1c 00 00 00 00 00 00 00 00 49 40 00 00     $$..........I@..
     21b:	00 00 00 00 52 49 49 00 00 00 00 00 1c 5b 4a 48     ....RII......[JH
     22b:	00 00 00 00 1c 25 52 49 00 00 00 00 65 24 64 49     .....%RI....e$dI
     23b:	00 00 00 00 65 25 64 49 00 00 00 00 6d 2e 5c 49     ....e%dI....m.\I
	...
     253:	00 00 40 52 00 00 00 00 00 49 52 5c 00 00 00 00     ..@R.....IR\....
     263:	53 52 24 25 00 00 00 53 52 25 25 25 00 00 4a 52     SR$%...SR%%%..JR
     273:	25 25 1b 00 00 00 5b 25 13 00 00 1b 00 5b 53 00     %%....[%.....[S.
     283:	0a 1c 37 37 09 5b 1c 65 7f 37 2e 2e 52 2e 2e 1c     ..77.[.e.7..R...
     293:	13 13 12 00 2e 25 1b 13 12 00 00 12 1c 1c 12 00     .....%..........
     2a3:	00 12 25 1c 12 00 00 12 2e 37 1c 13 00 13 2e 37     ..%......7.....7
     2b3:	36 1c 13 1b 37 37 2e 2e 25 13 1c 1c 2e 2e 2e 2e     6...77..%.......
     2c3:	1b 1c 1c 1c 6e 6e 6e 1c 1c 1c 1c 1c 09 13 13 12     ....nnn.........
     2d3:	12 13 13 00 13 13 13 13 13 1c 00 09 13 13 13 13     ................
     2e3:	1c 01 00 37 13 13 13 1c 13 00 2e 2e 1b 1b 1c 1c     ...7............
     2f3:	00 1c 77 2e 1b 1b 25 00 13 7f 25 1c 1c 1c 01 0a     ..w...%...%.....
     303:	37 24 1c 1c 1c 13 0a 2e 25 25 09 00 13 2e 24 25     7$......%%....$%
     313:	25 25 25 25 2e 25 25 25 25 25 25 25 25 25 2d 2e     %%%%.%%%%%%%%%-.
     323:	25 1b 1c 1c 2e 2e 25 1c 13 25 1b 13 25 1c 1c 1c     %.....%..%..%...
     333:	1c 01 09 52 1c 1c 13 00 01 1c 5b 5c 0a 00 01 65     ...R......[\...e
     343:	77 5c 1b 00 01 6e 7f 6e 52 1b 00 00 6d 1c 52 49     w\...n.nR...m.RI
     353:	00 00 00 00 1c 13 53 00 00 00 00 00 1c 52 4a 00     ......S......RJ.
     363:	00 00 00 00 5b 5b 00 00 00 00 00 00 5c 00 00 00     ....[[......\...
	...
     38f:	13 5b 7f 77 6e 6e 6e 6e 13 65 77 76 6e 6e 6e 6e     .[.wnnnn.ewvnnnn
     39f:	1b 65 77 76 76 76 6e 77 1b 5b bf 76 b6 76 76 76     .ewvvvnw.[.v.vvv
     3af:	09 13 6d bf b7 b6 b7 65 00 1b 12 5c 76 bf 76 6d     ..m....e...\v.vm
     3bf:	00 00 12 1b 12 5b 5b 5c 00 00 00 00 09 0a 12 13     .....[[\........
     3cf:	6e 77 24 1c 1c 1c 1c 1c 77 25 1c 1c 1c 1c 24 25     nw$.....w%....$%
     3df:	6e 1c 1c 1c 24 25 25 1b 1c 1c 24 25 25 13 00 00     n...$%%...$%%...
     3ef:	64 6d 6d 1b 00 09 6e bf 6d 5b 09 12 6e bf 6d 5b     dmm...n.m[..n.m[
     3ff:	5b 12 5b 64 5b 12 13 12 13 1b 12 12 09 01 00 00     [.[d[...........
     40f:	1c 24 2e 1c 09 00 09 6e 25 24 01 00 09 76 7f 7f     .$.....n%$...v..
     41f:	00 00 12 77 7f 7f 64 12 64 bf bf 77 5b 12 1b 09     ...w..d.d..w[...
     42f:	bf 6d 5b 12 1b 09 00 00 12 13 1b 09 00 00 00 00     .m[.............
     43f:	09 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     44f:	7f 7f 53 13 13 00 00 00 64 12 1b 01 00 00 00 00     ..S.....d.......
     45f:	1b 12 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     497:	26 00 00 00 26 00 26 26 2f 00 00 00 2f 00 00 00     &...&.&&/.../...
     4a7:	37 00 00 00 37 00 00 00 ff 00 00 00 ff 00 00 00     7...7...........
     4b7:	bf 00 00 00 bf 00 00 bf 37 00 00 37 00 00 37 00     ........7..7..7.
     4c7:	00 26 26 00 00 00 26 26 00 00 00 00 00 00 00 00     .&&...&&........
     4d7:	26 26 26 00 26 26 26 26 00 00 2f 00 2f 00 00 00     &&&.&&&&.././...
     4e7:	00 37 00 00 37 00 00 00 ff 00 00 00 ff ff ff ff     .7..7...........
     4f7:	00 00 00 00 bf 00 00 00 00 00 00 00 37 00 00 00     ............7...
     507:	26 26 26 00 26 26 26 26 00 00 00 00 00 00 00 00     &&&.&&&&........
     517:	26 00 26 26 26 26 00 00 00 00 2f 00 00 00 2f 00     &.&&&&..../.../.
     527:	00 00 37 00 00 00 37 00 00 00 ff ff ff ff 00 00     ..7...7.........
     537:	00 00 bf 00 00 00 bf 00 00 00 37 00 00 00 37 00     ..........7...7.
     547:	26 00 26 26 26 26 00 00 00 00 00 00 00 00 00 00     &.&&&&..........
     557:	00 00 26 26 26 00 26 00 00 2f 00 00 2f 00 2f 00     ..&&&.&../.././.
     567:	37 00 00 00 37 00 00 37 ff 00 00 00 ff 00 00 00     7...7..7........
     577:	bf 00 00 00 bf 00 00 bf 37 00 00 37 00 00 37 00     ........7..7..7.
     587:	26 26 26 00 00 00 26 00 00 00 00 00 00 00 00 00     &&&...&.........
     597:	00 00 26 00 00 00 00 00 00 00 2f 00 00 00 00 00     ..&......./.....
     5a7:	00 37 00 00 00 00 00 00 ff 00 00 00 00 00 00 00     .7..............
     5b7:	00 bf 00 00 00 00 00 00 00 00 37 00 00 00 00 00     ..........7.....
     5c7:	00 00 26 00 00 00 00 00 00 00 00 00 00 00 00 00     ..&.............
	...
     5eb:	00 00 00 e4 00 00 00 00 09 9b ed f6 00 00 00 9b     ................
     5fb:	a4 ad bf bf 00 52 9b a4 76 7f 7f b7 5b 9b 6d 77     .....R..v...[.mw
     60b:	7f 76 6e b7 00 00 00 00 00 00 00 00 00 00 00 00     .vn.............
     61b:	5b b6 f6 f6 00 5b f6 ff ff ff ff bf f6 ff ff ff     [....[..........
     62b:	ff bf bf ae ff bf ff ff ff b7 ad 65 bf bf ff ff     ...........e....
     63b:	b7 b6 ad 65 b7 bf ff ff bf b7 ae 6e b7 bf ff ff     ...e.......n....
     64b:	bf b7 b7 65 00 00 00 00 00 00 00 00 f6 f6 ed ed     ...e............
     65b:	ad a4 a4 9b b6 6d 6d 5c 52 6e 65 64 65 65 65 52     .....mm\RnedeeeR
     66b:	65 76 6d 25 5c 5c 52 53 6e 24 65 6e 65 52 52 6e     evm%\\RSn$eneRRn
     67b:	25 25 24 25 5b 52 77 2d 25 25 25 24 52 6e 6e 2d     %%$%[Rw-%%%$Rnn-
     68b:	25 25 25 25 00 00 00 00 00 00 00 00 9b 49 00 00     %%%%.........I..
     69b:	00 00 00 00 a4 9b 92 00 00 00 00 00 25 64 93 49     ............%d.I
     6ab:	00 00 00 00 65 2e 9b 52 00 00 00 00 6d 25 65 52     ....e..R....m%eR
     6bb:	00 00 00 00 6d 2d 65 52 00 00 00 00 6e 2e 64 52     ....m-eR....n.dR
	...
     6d3:	00 00 49 5b 00 00 00 00 00 4a 5b 65 00 00 00 00     ..I[.....J[e....
     6e3:	5b 9b 6d 2d 00 00 00 5b 5b 2d 2e 25 00 00 52 5b     [.m-...[[-.%..R[
     6f3:	2e 2e 1c 09 00 01 5b 2d 1c 01 09 1c 00 5c 5b 01     ......[-.....\[.
     703:	4a 65 77 7f 4a 5b 1c 6e 7f 77 77 76 9b 77 77 6d     Jew.J[.n.wwv.wwm
     713:	65 6e 6e a4 77 6e 65 65 65 5b a4 b7 25 25 5c 52     enn.wneee[..%%\R
     723:	52 6d bf bf 13 09 49 64 7f bf bf bf 09 5c 7f 7f     Rm....Id.....\..
     733:	bf bf b7 bf 7f 7f 77 7f 7f b7 bf bf 77 77 7f 7f     ......w.....ww..
     743:	6e b7 bf bf 77 7f 7f 6e 77 bf bf bf b6 ff ff ff     n...w..nw.......
     753:	bf bf b7 5b bf ff ff ff bf bf a4 64 bf ff ff ff     ...[.......d....
     763:	bf ad a4 7f bf ff ff ff bf a4 bf 7f ff ff ff bf     ................
     773:	ad bf bf bf ff ff ff b6 bf bf bf 77 ff ff f7 bf     ...........w....
     783:	bf bf 77 77 ff ff ff bf bf bf 64 52 6d 7f 6e 2e     ..ww......dRm.n.
     793:	2d 2d 25 6e 7f 76 6e 6e 6e 2e 25 65 77 77 77 76     --%n.vnnn.%ewwwv
     7a3:	2e 1c 25 24 7f 77 6e 25 1c 25 1c 1b 77 65 25 25     ..%$.wn%.%..we%%
     7b3:	1c 09 0a 5b 6e 6e 1c 09 49 25 64 64 5b 49 4a 6e     ...[nn..I%dd[IJn
     7c3:	7f 64 5c 00 53 77 bf 77 5b 5c 00 00 6e 25 5b 4a     .d\.Sw.w[\..n%[J
     7d3:	00 00 00 00 1c 1b 5b 00 00 00 00 00 24 5b 53 00     ......[.....$[S.
     7e3:	00 00 00 00 5b 5c 00 00 00 00 00 00 64 00 00 00     ....[\......d...
	...
     80f:	5b 5c 7f bf 77 76 77 77 5c 6d 7f b7 77 77 77 77     [\..wvww\m..wwww
     81f:	5c 6d 7f bf 77 77 77 bf 5c 64 bf bf bf bf bf 7f     \m..www.\d......
     82f:	0a 5c 6e bf bf bf bf 76 00 65 64 6d bf bf bf bf     .\n....v.edm....
     83f:	00 00 5b 6d 64 6d ad b6 00 00 00 00 12 5b 64 6d     ..[mdm.......[dm
     84f:	77 7f 6e 6e 77 bf bf bf 7f 76 6d 76 77 bf bf bf     w.nnw....vmvw...
     85f:	77 6d 6e 76 7f bf bf bf 6d 6e 76 7f bf b7 ad f6     wmnv....mnv.....
     86f:	76 bf bf 76 a4 ad ff ff bf b6 64 ad ff ff ff ff     v..v......d.....
     87f:	b6 ad bf ff ff ff ff f6 ad b6 ad 64 5b 52 00 00     ...........d[R..
     88f:	ff ff bf bf ad 5b 64 bf ff ff b6 ad ad bf ff bf     .....[d.........
     89f:	ff f6 ff ff ff ff bf 64 ff ff ff ff bf b6 76 5b     .......d......v[
     8af:	ff ff ff bf bf 5b 00 00 ff ff ff 5c 00 00 00 00     .....[.....\....
     8bf:	a4 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     8cf:	bf bf 64 5c 5c 00 00 00 6e 5c 65 49 00 00 00 00     ..d\\...n\eI....
     8df:	6d 5b 00 00 00 00 00 00 00 00 00 00 00 00 00 00     m[..............
	...

0000090f <logoInitPatches>:
     90f:	00 00 00 18 09 00 00 00 00                          .........

00000918 <initPatch>:
     918:	00 02 08 00 08 55 04 08 5a 00 00 f8 00 09 90 00     .....U..Z.......
     928:	0a 1e 32 05 00 00 ff                                ..2....

0000092f <strTwist>:
     92f:	49 52 49 53 20 57 41 53 20 41 20 46 4f 4f 4c 00     IRIS WAS A FOOL.
     93f:	00 41 4e 44 20 53 4f 20 41 52 45 20 59 4f 55 00     .AND SO ARE YOU.
     94f:	57 49 54 48 20 54 48 45 20 45 4d 45 52 41 4c 44     WITH THE EMERALD
     95f:	53 20 52 45 54 55 52 4e 45 44 00 54 48 45 52 45     S RETURNED.THERE
     96f:	20 49 53 20 4e 4f 20 53 54 4f 50 50 49 4e 47 20      IS NO STOPPING 
     97f:	4f 55 52 00 44 4f 4d 49 4e 49 4f 4e 20 4f 56 45     OUR.DOMINION OVE
     98f:	52 20 54 48 45 20 47 41 4c 41 58 59 00 00 4e 4f     R THE GALAXY..NO
     99f:	57 20 59 4f 55 20 57 49 4c 4c 20 44 49 45 00 23     W YOU WILL DIE.#
	...

000009b0 <strReveal4>:
     9b0:	59 4f 55 20 44 4f 4e 54 20 4b 4e 4f 57 00 57 48     YOU DONT KNOW.WH
     9c0:	41 54 20 59 4f 55 20 41 52 45 20 44 4f 49 4e 47     AT YOU ARE DOING
     9d0:	00 23 00                                            .#.

000009d3 <strReveal3>:
     9d3:	59 4f 55 20 41 52 45 20 4d 41 4b 49 4e 47 20 41     YOU ARE MAKING A
     9e3:	20 4d 49 53 54 41 4b 45 00 23 00                     MISTAKE.#.

000009ee <strReveal2>:
     9ee:	59 4f 55 20 43 41 4e 54 20 48 41 56 45 20 54 48     YOU CANT HAVE TH
     9fe:	45 4d 20 41 4c 4c 00 23 00                          EM ALL.#.

00000a07 <strReveal1>:
     a07:	59 4f 55 20 41 52 45 20 50 45 52 53 49 53 54 45     YOU ARE PERSISTE
     a17:	4e 54 00 23 00                                      NT.#.

00000a1c <strReveal0>:
     a1c:	49 20 4b 4e 45 57 20 54 48 45 59 20 57 4f 55 4c     I KNEW THEY WOUL
     a2c:	44 20 53 45 4e 44 20 59 4f 55 00 23 00              D SEND YOU.#.

00000a39 <strIntro>:
     a39:	49 52 49 53 20 48 41 53 20 42 45 54 52 41 59 45     IRIS HAS BETRAYE
     a49:	44 20 55 53 00 00 48 45 20 48 41 53 20 53 54 4f     D US..HE HAS STO
     a59:	4c 45 4e 20 54 48 45 20 35 20 45 4d 45 52 41 4c     LEN THE 5 EMERAL
     a69:	44 53 00 4f 46 20 50 4f 57 45 52 20 41 4e 44 20     DS.OF POWER AND 
     a79:	57 49 4c 4c 20 53 55 52 45 4c 59 00 42 52 49 4e     WILL SURELY.BRIN
     a89:	47 20 52 55 49 4e 20 54 4f 20 55 53 20 41 4c 4c     G RUIN TO US ALL
     a99:	00 00 44 45 53 54 52 4f 59 20 48 49 4d 20 41 4e     ..DESTROY HIM AN
     aa9:	44 20 52 45 54 55 52 4e 20 54 48 45 00 45 4d 45     D RETURN THE.EME
     ab9:	52 41 4c 44 53 20 54 4f 20 42 52 49 4e 47 20 50     RALDS TO BRING P
     ac9:	45 41 43 45 20 54 4f 00 54 48 45 20 47 41 4c 41     EACE TO.THE GALA
     ad9:	58 59 00 23 00                                      XY.#.

00000ade <default_scores>:
     ade:	55 5a 45 00 00 4c 4a 42 00 00 41 41 41 00 00 42     UZE..LJB..AAA..B
     aee:	42 42 00 00 43 43 43 00 00 44 44 44 00 00           BB..CCC..DDD..

00000afc <strLevels>:
     afc:	20 20 20 47 4c 41 43 49 45 53 20 20 20 00              GLACIES   .

00000b0a <strPaused>:
     b0a:	50 41 55 53 45 44 00                                PAUSED.

00000b11 <strExit>:
     b11:	45 58 49 54 20 47 41 4d 45 20 58 00                 EXIT GAME X.

00000b1d <strTime>:
     b1d:	54 49 4d 45 20 00                                   TIME .

00000b23 <strLives>:
     b23:	4c 49 56 45 53 20 00                                LIVES .

00000b2a <strShield>:
     b2a:	53 48 49 45 4c 44 20 00                             SHIELD .

00000b32 <strScore>:
     b32:	53 43 4f 52 45 20 00                                SCORE .

00000b39 <strSelectHandle>:
	...

00000b3a <strHighscores>:
     b3a:	48 49 47 48 20 53 43 4f 52 45 53 00                 HIGH SCORES.

00000b46 <str1Player>:
     b46:	53 54 41 52 54 00                                   START.

00000b4c <strMusic>:
     b4c:	4d 55 53 49 43 20 42 59 20 54 41 4e 4e 45 52 20     MUSIC BY TANNER 
     b5c:	48 45 4c 4c 41 4e 44 00                             HELLAND.

00000b64 <strCopyright>:
     b64:	32 30 31 36 20 4c 41 57 52 45 4e 43 45 20 42 52     2016 LAWRENCE BR
     b74:	4f 4f 4b 53 00                                      OOKS.

00000b79 <spacesong>:
     b79:	00 c0 00 00 c1 01 00 b0 07 7f 00 07 7f 00 90 43     ...............C
     b89:	64 00 46 64 00 4b 64 00 4f 64 00 b1 07 74 00 91     d.Fd.Kd.Od...t..
     b99:	33 64 00 ff 06 01 53 1d 91 33 64 0a 33 64 14 90     3d....S..3d.3d..
     ba9:	4b 64 00 46 64 00 43 64 00 91 33 64 27 33 64 14     Kd.Fd.Cd..3d'3d.
     bb9:	90 46 64 00 43 64 00 4b 64 00 4f 64 00 91 33 64     .Fd.Cd.Kd.Od..3d
     bc9:	14 33 64 0a 90 41 64 00 4d 64 0a 41 64 00 46 64     .3d..Ad.Md.Ad.Fd
     bd9:	00 4a 64 00 4d 64 00 91 2e 64 1e 2e 64 09 2e 64     .Jd.Md...d..d..d
     be9:	14 90 41 64 00 46 64 00 4a 64 00 91 2e 64 28 2e     ..Ad.Fd.Jd...d(.
     bf9:	64 14 90 41 64 00 46 64 00 4a 64 00 4d 64 00 91     d..Ad.Fd.Jd.Md..
     c09:	2e 64 13 2e 64 0a 90 3f 64 00 4b 64 0a 3f 64 00     .d..d..?d.Kd.?d.
     c19:	44 64 00 48 64 00 4b 64 00 91 2c 64 1e 2c 64 0a     Dd.Hd.Kd..,d.,d.
     c29:	2c 64 14 90 41 64 00 46 64 00 4a 64 00 91 2c 64     ,d..Ad.Fd.Jd..,d
     c39:	13 2e 64 14 90 46 64 00 91 2c 64 14 90 3f 64 00     ..d..Fd..,d..?d.
     c49:	43 64 00 48 64 00 91 2e 64 14 30 64 14 90 43 64     Cd.Hd...d.0d..Cd
     c59:	00 48 64 00 4b 64 00 4f 64 00 91 30 64 1d 30 64     .Hd.Kd.Od..0d.0d
     c69:	0a 30 64 14 90 4b 64 00 48 64 00 43 64 00 91 30     .0d..Kd.Hd.Cd..0
     c79:	64 28 30 64 13 90 43 64 00 48 64 00 4b 64 00 4f     d(0d..Cd.Hd.Kd.O
     c89:	64 00 91 30 64 14 30 64 0a 90 41 64 00 4d 64 0a     d..0d.0d..Ad.Md.
     c99:	43 64 00 46 64 00 4b 64 00 4f 64 00 91 33 64 1e     Cd.Fd.Kd.Od..3d.
     ca9:	33 64 09 33 64 14 90 4b 64 00 46 64 00 43 64 00     3d.3d..Kd.Fd.Cd.
     cb9:	91 33 64 28 33 64 14 90 46 64 00 43 64 00 4b 64     .3d(3d..Fd.Cd.Kd
     cc9:	00 4f 64 00 91 33 64 13 33 64 0a 90 41 64 00 4d     .Od..3d.3d..Ad.M
     cd9:	64 0a 41 64 00 46 64 00 4a 64 00 4d 64 00 91 2e     d.Ad.Fd.Jd.Md...
     ce9:	64 1e 2e 64 0a 2e 64 14 90 41 64 00 46 64 00 4a     d..d..d..Ad.Fd.J
     cf9:	64 00 91 2e 64 27 2e 64 14 90 41 64 00 46 64 00     d...d'.d..Ad.Fd.
     d09:	4a 64 00 4d 64 00 91 2e 64 14 2e 64 0a 90 3f 64     Jd.Md...d..d..?d
     d19:	00 4b 64 0a 3f 64 00 44 64 00 48 64 00 4b 64 00     .Kd.?d.Dd.Hd.Kd.
     d29:	91 2c 64 1d 2c 64 0a 2c 64 14 90 41 64 00 46 64     .,d.,d.,d..Ad.Fd
     d39:	00 4a 64 00 91 2c 64 14 2e 64 14 90 46 64 00 91     .Jd..,d..d..Fd..
     d49:	2c 64 13 90 3f 64 00 43 64 00 48 64 00 91 30 64     ,d..?d.Cd.Hd..0d
     d59:	14 30 64 14 90 48 64 00 91 2c 6e 14 2c 4b 06 90     .0d..Hd..,n.,K..
     d69:	4a 64 0e 91 2c 4b 0d 90 4b 64 06 91 2c 6e 14 90     Jd..,K..Kd..,n..
     d79:	4d 64 00 91 2c 4b 14 2c 4b 07 90 4b 64 0d 91 2c     Md..,K.,K..Kd..,
     d89:	6e 0d 90 4a 64 07 91 2c 4b 13 90 48 64 00 91 30     n..Jd..,K..Hd..0
     d99:	6e 14 30 4b 07 90 4a 64 0d 91 30 4b 0d 90 46 64     n.0K..Jd..0K..Fd
     da9:	07 91 30 6e 13 90 43 64 00 91 30 4b 14 30 4b 07     ..0n..Cd..0K.0K.
     db9:	90 46 64 0d 91 30 6e 0d 90 48 64 07 91 30 4b 14     .Fd..0n..Hd..0K.
     dc9:	90 48 64 00 91 2c 6e 13 2c 4b 07 90 4a 64 0d 91     .Hd..,n.,K..Jd..
     dd9:	2c 4b 0d 90 4b 64 07 91 2c 6e 14 90 4d 64 00 91     ,K..Kd..,n..Md..
     de9:	2c 4b 14 2c 4b 06 90 4b 64 0d 91 2c 6e 0e 90 4d     ,K.,K..Kd..,n..M
     df9:	64 06 91 2c 4b 14 90 4f 64 00 91 30 6e 14 30 4b     d..,K..Od..0n.0K
     e09:	07 90 50 64 0d 91 30 4b 0e 90 4d 64 05 91 30 6e     ..Pd..0K..Md..0n
     e19:	14 90 4f 64 00 91 30 4b 14 30 4b 07 90 4d 64 0d     ..Od..0K.0K..Md.
     e29:	91 30 6e 0d 90 4b 64 07 91 30 4b 13 90 4d 64 00     .0n..Kd..0K..Md.
     e39:	91 2b 6e 14 2b 4b 07 90 4f 64 0d 91 2b 4b 0d 90     .+n.+K..Od..+K..
     e49:	4d 64 07 91 2b 6e 14 90 4b 64 00 91 2b 4b 13 2b     Md..+n..Kd..+K.+
     e59:	4b 07 90 46 64 0d 91 2b 6e 0d 90 4b 64 07 91 2b     K..Fd..+n..Kd..+
     e69:	4b 14 90 4d 64 00 91 2c 6e 13 2c 4b 07 90 50 64     K..Md..,n.,K..Pd
     e79:	0d 91 2c 4b 0d 90 4f 64 07 91 2c 6e 14 90 4d 64     ..,K..Od..,n..Md
     e89:	00 91 2c 4b 14 2c 4b 06 90 48 64 0d 91 2c 6e 0e     ..,K.,K..Hd..,n.
     e99:	90 4d 64 06 91 2c 4b 14 90 52 64 00 91 27 6e 0d     .Md..,K..Rd..'n.
     ea9:	90 50 64 07 91 27 4b 06 90 4f 64 0e 50 64 00 91     .Pd..'K..Od.Pd..
     eb9:	27 4b 0d 90 4f 64 06 91 27 6e 07 90 4d 64 0d 4b     'K..Od..'n..Md.K
     ec9:	64 00 91 27 4b 14 27 4b 07 90 46 64 0d 91 27 6e     d..'K.'K..Fd..'n
     ed9:	0d 90 4b 64 07 91 27 4b 13 90 47 64 00 91 26 6e     ..Kd..'K..Gd..&n
     ee9:	14 26 4b 07 90 4a 64 0d 91 26 4b 0d 90 4f 64 07     .&K..Jd..&K..Od.
     ef9:	91 26 6e 14 90 53 64 00 91 26 4b 13 26 4b 07 90     .&n..Sd..&K.&K..
     f09:	56 64 0d 91 26 6e 0d 90 5b 64 07 91 26 4b 14 90     Vd..&n..[d..&K..
     f19:	3d 64 00 91 31 64 06 90 41 64 07 44 64 07 49 64     =d..1d..Ad.Dd.Id
     f29:	06 4d 64 07 50 64 06 55 64 07 59 64 07 5c 64 06     .Md.Pd.Ud.Yd.\d.
     f39:	59 64 07 55 64 06 50 64 07 4d 64 07 49 64 06 44     Yd.Ud.Pd.Md.Id.D
     f49:	64 07 41 64 06 3d 64 07 38 64 07 3d 64 06 41 64     d.Ad.=d.8d.=d.Ad
     f59:	07 44 64 06 49 64 07 44 64 07 41 64 06 43 64 00     .Dd.Id.Dd.Ad.Cd.
     f69:	91 37 64 07 90 47 64 06 4a 64 07 4f 64 06 53 64     .7d..Gd.Jd.Od.Sd
     f79:	07 56 64 07 5b 64 06 5f 64 07 62 64 06 5f 64 07     .Vd.[d._d.bd._d.
     f89:	5b 64 07 56 64 06 53 64 07 4f 64 06 4a 64 07 47     [d.Vd.Sd.Od.Jd.G
     f99:	64 07 43 64 06 3e 64 07 43 64 06 47 64 07 4a 64     d.Cd.>d.Cd.Gd.Jd
     fa9:	07 4f 64 06 4a 64 07 47 64 06 46 64 00 91 3a 64     .Od.Jd.Gd.Fd..:d
     fb9:	07 90 4a 64 07 4d 64 06 52 64 07 56 64 06 59 64     ..Jd.Md.Rd.Vd.Yd
     fc9:	07 5e 64 07 62 64 06 65 64 07 62 64 06 5e 64 07     .^d.bd.ed.bd.^d.
     fd9:	59 64 07 56 64 06 52 64 07 4d 64 06 4a 64 07 46     Yd.Vd.Rd.Md.Jd.F
     fe9:	64 07 41 64 06 46 64 07 4a 64 06 4d 64 07 52 64     d.Ad.Fd.Jd.Md.Rd
     ff9:	07 4d 64 06 4a 64 07 54 7f 00 43 64 00 48 64 00     .Md.Jd.T..Cd.Hd.
    1009:	4b 64 00 4f 64 00 91 30 64 1d 30 64 0a 30 64 14     Kd.Od..0d.0d.0d.
    1019:	90 4b 64 00 48 64 00 43 64 00 91 30 64 28 30 64     .Kd.Hd.Cd..0d(0d
    1029:	14 90 43 64 00 48 64 00 4b 64 00 4f 64 00 91 30     ..Cd.Hd.Kd.Od..0
    1039:	64 13 30 64 0a 90 41 64 00 4d 64 0a 43 64 00 46     d.0d..Ad.Md.Cd.F
    1049:	64 00 4b 64 00 4f 64 00 91 33 64 1e 33 64 0a 33     d.Kd.Od..3d.3d.3
    1059:	64 14 90 4b 64 00 46 64 00 43 64 00 91 33 64 27     d..Kd.Fd.Cd..3d'
    1069:	33 64 14 90 46 64 00 43 64 00 4b 64 00 4f 64 00     3d..Fd.Cd.Kd.Od.
    1079:	91 33 64 14 33 64 0a 90 41 64 00 4d 64 0a 41 64     .3d.3d..Ad.Md.Ad
    1089:	00 46 64 00 4a 64 00 4d 64 00 91 2e 64 1d 2e 64     .Fd.Jd.Md...d..d
    1099:	0a 2e 64 14 90 41 64 00 46 64 00 4a 64 00 91 2e     ..d..Ad.Fd.Jd...
    10a9:	64 27 2e 64 14 90 41 64 00 46 64 00 4a 64 00 4d     d'.d..Ad.Fd.Jd.M
    10b9:	64 00 91 2e 64 14 2e 64 0a 90 3f 64 00 4b 64 0a     d...d..d..?d.Kd.
    10c9:	3f 64 00 44 64 00 48 64 00 4b 64 00 91 2c 64 1e     ?d.Dd.Hd.Kd..,d.
    10d9:	2c 64 09 2c 64 14 90 41 64 00 46 64 00 4a 64 00     ,d.,d..Ad.Fd.Jd.
    10e9:	91 2c 64 14 2e 64 14 90 46 64 00 91 2c 64 14 90     .,d..d..Fd..,d..
    10f9:	3f 64 00 43 64 00 48 64 00 91 2e 64 13 30 64 14     ?d.Cd.Hd...d.0d.
    1109:	90 43 64 00 48 64 00 4b 64 00 4f 64 00 91 30 64     .Cd.Hd.Kd.Od..0d
    1119:	1e 30 64 0a 30 64 14 90 4b 64 00 48 64 00 43 64     .0d.0d..Kd.Hd.Cd
    1129:	00 91 30 64 27 30 64 14 90 43 64 00 48 64 00 4b     ..0d'0d..Cd.Hd.K
    1139:	64 00 4f 64 00 91 30 64 14 30 64 0a 90 41 64 00     d.Od..0d.0d..Ad.
    1149:	4d 64 0a 43 64 00 46 64 00 4b 64 00 4f 64 00 91     Md.Cd.Fd.Kd.Od..
    1159:	33 64 1d 33 64 0a 33 64 14 90 4b 64 00 46 64 00     3d.3d.3d..Kd.Fd.
    1169:	43 64 00 91 33 64 28 33 64 13 90 46 64 00 43 64     Cd..3d(3d..Fd.Cd
    1179:	00 4b 64 00 4f 64 00 91 33 64 14 33 64 0a 90 41     .Kd.Od..3d.3d..A
    1189:	64 00 4d 64 0a 41 64 00 46 64 00 4a 64 00 4d 64     d.Md.Ad.Fd.Jd.Md
    1199:	00 91 2e 64 1e 2e 64 09 2e 64 14 90 41 64 00 46     ...d..d..d..Ad.F
    11a9:	64 00 4a 64 00 91 2e 64 28 2e 64 14 90 41 64 00     d.Jd...d(.d..Ad.
    11b9:	46 64 00 4a 64 00 4d 64 00 91 2e 64 13 2e 64 0a     Fd.Jd.Md...d..d.
    11c9:	90 3f 64 00 4b 64 0a 3f 64 00 44 64 00 48 64 00     .?d.Kd.?d.Dd.Hd.
    11d9:	4b 64 00 91 2c 64 1e 2c 64 0a 2c 64 14 90 41 64     Kd..,d.,d.,d..Ad
    11e9:	00 46 64 00 4a 64 00 91 2c 64 13 2e 64 14 90 46     .Fd.Jd..,d..d..F
    11f9:	64 00 91 2c 64 0f ff 06 01 45 05 90 3f 64 00 43     d..,d....E..?d.C
    1209:	64 00 48 64 00 91 30 64 14 30 64 81 0a ff 2f 00     d.Hd..0d.0d.../.

00001219 <planetsong>:
    1219:	00 c0 00 00 c1 01 00 b0 07 7f 00 b1 07 74 00 ff     .............t..
    1229:	06 01 53 1b 90 48 78 00 91 30 6e 07 90 43 55 00     ..S..Hx..0n..CU.
    1239:	91 30 50 07 90 48 55 00 91 30 50 07 90 4a 78 00     .0P..HU..0P..Jx.
    1249:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 48 55 00     .0n..KU..0P..HU.
    1259:	91 30 50 07 90 4a 78 00 91 30 6e 07 90 4b 55 00     .0P..Jx..0n..KU.
    1269:	91 30 50 07 90 4d 55 00 91 30 50 07 90 4a 78 00     .0P..MU..0P..Jx.
    1279:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 4d 55 00     .0n..KU..0P..MU.
    1289:	91 30 50 07 90 4f 78 00 91 30 6e 07 90 4b 55 00     .0P..Ox..0n..KU.
    1299:	91 30 50 07 90 4d 78 00 91 2e 6e 07 90 4f 55 07     .0P..Mx...n..OU.
    12a9:	50 78 00 91 30 6e 06 90 4d 55 00 91 30 50 07 90     Px..0n..MU..0P..
    12b9:	4f 55 00 91 30 50 07 90 4b 78 00 91 30 6e 07 90     OU..0P..Kx..0n..
    12c9:	4d 55 00 91 30 50 07 90 4a 55 00 91 30 50 07 30     MU..0P..JU..0P.0
    12d9:	6e 03 90 4b 78 04 48 55 00 91 30 50 07 90 4a 55     n..Kx.HU..0P..JU
    12e9:	00 91 30 50 07 90 46 78 00 91 30 6e 07 90 4d 55     ..0P..Fx..0n..MU
    12f9:	00 91 30 50 07 90 46 78 00 91 30 50 07 90 4f 55     ..0P..Fx..0P..OU
    1309:	00 91 30 6e 07 90 46 78 00 91 30 50 07 90 4d 55     ..0n..Fx..0P..MU
    1319:	00 91 2e 6e 07 90 46 78 07 48 55 00 91 30 6e 07     ...n..Fx.HU..0n.
    1329:	90 43 55 00 91 30 50 07 90 48 55 00 91 30 50 07     .CU..0P..HU..0P.
    1339:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    1349:	90 48 55 00 91 30 50 06 90 4a 55 00 91 30 6e 07     .HU..0P..JU..0n.
    1359:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 30 50 07     .KU..0P..MU..0P.
    1369:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    1379:	90 4d 55 00 91 30 50 07 90 4f 55 00 91 30 6e 07     .MU..0P..OU..0n.
    1389:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 2e 6e 07     .KU..0P..MU...n.
    1399:	90 4f 55 07 50 55 00 91 30 6e 07 90 4d 55 00 91     .OU.PU..0n..MU..
    13a9:	30 50 07 90 4f 55 00 91 30 50 07 90 4b 55 00 91     0P..OU..0P..KU..
    13b9:	30 6e 07 90 4d 55 00 91 30 50 07 90 4a 55 00 91     0n..MU..0P..JU..
    13c9:	30 50 07 30 6e 02 90 4b 55 05 48 55 00 91 30 50     0P.0n..KU.HU..0P
    13d9:	07 90 4a 55 00 91 30 50 07 90 46 55 00 91 30 6e     ..JU..0P..FU..0n
    13e9:	06 90 4d 55 00 91 30 50 07 90 46 55 00 91 30 50     ..MU..0P..FU..0P
    13f9:	07 90 4f 55 00 91 30 6e 07 90 46 55 00 91 30 50     ..OU..0n..FU..0P
    1409:	07 90 4d 55 00 91 2e 6e 07 90 46 55 07 48 78 00     ..MU...n..FU.Hx.
    1419:	91 2c 6e 07 90 43 55 00 91 2c 50 07 90 48 55 00     .,n..CU..,P..HU.
    1429:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
    1439:	91 2c 50 07 90 48 55 00 91 2c 50 07 90 4a 78 00     .,P..HU..,P..Jx.
    1449:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 55 00     .,n..KU..,P..MU.
    1459:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
    1469:	91 2c 50 07 90 4d 55 00 91 2c 50 07 90 4f 78 00     .,P..MU..,P..Ox.
    1479:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 78 00     .,n..KU..,P..Mx.
    1489:	91 2b 6e 06 90 4f 55 07 50 78 00 91 2c 6e 07 90     .+n..OU.Px..,n..
    1499:	4d 55 00 91 2c 50 07 90 4f 55 00 91 2c 50 07 90     MU..,P..OU..,P..
    14a9:	4b 78 00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90     Kx..,n..MU..,P..
    14b9:	4a 55 00 91 2c 50 07 2c 6e 02 90 4b 78 05 48 55     JU..,P.,n..Kx.HU
    14c9:	00 91 2c 50 07 90 4a 55 00 91 2c 50 07 90 46 78     ..,P..JU..,P..Fx
    14d9:	00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90 46 78     ..,n..MU..,P..Fx
    14e9:	00 91 2c 50 07 90 4f 55 00 91 2c 6e 07 90 46 78     ..,P..OU..,n..Fx
    14f9:	00 91 2c 50 07 90 4d 55 00 91 2b 6e 07 90 46 78     ..,P..MU..+n..Fx
    1509:	07 48 55 00 91 29 6e 07 90 43 55 00 91 29 50 07     .HU..)n..CU..)P.
    1519:	90 48 55 00 91 29 50 06 90 4a 55 00 91 29 6e 07     .HU..)P..JU..)n.
    1529:	90 4b 55 00 91 29 50 07 90 48 55 00 91 29 50 07     .KU..)P..HU..)P.
    1539:	90 4a 55 00 91 2b 6e 07 90 4b 55 00 91 2b 50 07     .JU..+n..KU..+P.
    1549:	90 4d 55 00 91 2b 50 07 90 4a 55 00 91 2b 6e 07     .MU..+P..JU..+n.
    1559:	90 4b 55 00 91 2b 50 07 90 4d 55 00 91 2b 50 07     .KU..+P..MU..+P.
    1569:	90 4f 55 00 91 2c 6e 07 90 4b 55 00 91 2c 50 07     .OU..,n..KU..,P.
    1579:	90 4d 55 00 91 2c 6e 07 90 4f 55 07 50 55 00 91     .MU..,n..OU.PU..
    1589:	2e 6e 07 90 4d 55 00 91 2e 50 07 90 4f 55 00 91     .n..MU...P..OU..
    1599:	2e 50 07 90 4b 55 00 91 2e 6e 07 90 4d 55 00 91     .P..KU...n..MU..
    15a9:	2e 50 07 90 4a 55 00 91 2e 50 07 2e 6e 02 90 4b     .P..JU...P..n..K
    15b9:	55 05 48 55 00 91 2e 50 06 90 4a 55 00 91 2e 50     U.HU...P..JU...P
    15c9:	07 90 46 55 00 91 2e 6e 07 90 4d 55 00 91 2e 50     ..FU...n..MU...P
    15d9:	07 90 46 55 00 91 2e 50 07 90 4f 55 00 91 2e 6e     ..FU...P..OU...n
    15e9:	07 90 46 55 00 91 2e 50 07 90 4d 55 00 91 2e 6e     ..FU...P..MU...n
    15f9:	07 90 46 55 07 48 55 00 91 30 6e 07 90 43 55 00     ..FU.HU..0n..CU.
    1609:	91 30 50 07 90 48 55 00 91 30 50 07 90 4a 55 00     .0P..HU..0P..JU.
    1619:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 48 55 00     .0n..KU..0P..HU.
    1629:	91 30 50 07 90 4a 55 00 91 30 6e 07 90 4b 55 00     .0P..JU..0n..KU.
    1639:	91 30 50 07 90 4d 55 00 91 30 50 07 90 4a 55 00     .0P..MU..0P..JU.
    1649:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 4d 55 00     .0n..KU..0P..MU.
    1659:	91 30 50 07 90 4f 55 00 91 30 6e 06 90 4b 55 00     .0P..OU..0n..KU.
    1669:	91 30 50 07 90 4d 55 00 91 2e 6e 07 90 4f 55 07     .0P..MU...n..OU.
    1679:	50 55 00 91 30 6e 07 90 4d 55 00 91 30 50 07 90     PU..0n..MU..0P..
    1689:	4f 55 00 91 30 50 07 90 4b 55 00 91 30 6e 07 90     OU..0P..KU..0n..
    1699:	4d 55 00 91 30 50 07 90 4a 55 00 91 30 50 07 30     MU..0P..JU..0P.0
    16a9:	6e 02 90 4b 55 05 48 55 00 91 30 50 07 90 4a 55     n..KU.HU..0P..JU
    16b9:	00 91 30 50 07 90 46 55 00 91 30 6e 07 90 4d 55     ..0P..FU..0n..MU
    16c9:	00 91 30 50 07 90 46 55 00 91 30 50 07 90 4f 55     ..0P..FU..0P..OU
    16d9:	00 91 30 6e 07 90 46 55 00 91 30 50 07 90 4d 55     ..0n..FU..0P..MU
    16e9:	00 91 2e 6e 07 90 46 55 07 48 55 00 91 30 6e 06     ...n..FU.HU..0n.
    16f9:	90 43 55 00 91 30 50 07 90 48 55 00 91 30 50 07     .CU..0P..HU..0P.
    1709:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    1719:	90 48 55 00 91 30 50 07 90 4a 55 00 91 30 6e 07     .HU..0P..JU..0n.
    1729:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 30 50 07     .KU..0P..MU..0P.
    1739:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    1749:	90 4d 55 00 91 30 50 07 90 4f 55 00 91 30 6e 07     .MU..0P..OU..0n.
    1759:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 2e 6e 07     .KU..0P..MU...n.
    1769:	90 4f 55 07 50 55 00 91 30 6e 07 90 4d 55 00 91     .OU.PU..0n..MU..
    1779:	30 50 07 90 4f 55 00 91 30 50 07 90 4b 55 00 91     0P..OU..0P..KU..
    1789:	30 6e 07 90 4d 55 00 91 30 50 07 90 4a 55 00 91     0n..MU..0P..JU..
    1799:	30 50 06 30 6e 03 90 4b 55 04 48 55 00 91 30 50     0P.0n..KU.HU..0P
    17a9:	07 90 4a 55 00 91 30 50 07 90 46 55 00 91 30 6e     ..JU..0P..FU..0n
    17b9:	07 90 4d 55 00 91 30 50 07 90 46 55 00 91 30 50     ..MU..0P..FU..0P
    17c9:	07 90 4f 55 00 91 30 6e 07 90 46 55 00 91 30 50     ..OU..0n..FU..0P
    17d9:	07 90 4d 55 00 91 2e 6e 07 90 46 55 07 48 78 00     ..MU...n..FU.Hx.
    17e9:	91 2c 6e 07 90 43 55 00 91 2c 50 07 90 48 55 00     .,n..CU..,P..HU.
    17f9:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
    1809:	91 2c 50 07 90 48 55 00 91 2c 50 07 90 4a 78 00     .,P..HU..,P..Jx.
    1819:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 55 00     .,n..KU..,P..MU.
    1829:	91 2c 50 07 90 4a 78 00 91 2c 6e 06 90 4b 55 00     .,P..Jx..,n..KU.
    1839:	91 2c 50 07 90 4d 55 00 91 2c 50 07 90 4f 78 00     .,P..MU..,P..Ox.
    1849:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 78 00     .,n..KU..,P..Mx.
    1859:	91 2b 6e 07 90 4f 55 07 50 78 00 91 2c 6e 07 90     .+n..OU.Px..,n..
    1869:	4d 55 00 91 2c 50 07 90 4f 55 00 91 2c 50 07 90     MU..,P..OU..,P..
    1879:	4b 78 00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90     Kx..,n..MU..,P..
    1889:	4a 55 00 91 2c 50 07 2c 6e 02 90 4b 78 05 48 55     JU..,P.,n..Kx.HU
    1899:	00 91 2c 50 07 90 4a 55 00 91 2c 50 07 90 46 78     ..,P..JU..,P..Fx
    18a9:	00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90 46 78     ..,n..MU..,P..Fx
    18b9:	00 91 2c 50 07 90 4f 55 00 91 2c 6e 07 90 46 78     ..,P..OU..,n..Fx
    18c9:	00 91 2c 50 07 90 4d 55 00 91 2b 6e 06 90 46 78     ..,P..MU..+n..Fx
    18d9:	07 48 55 00 91 29 6e 07 90 43 55 00 91 29 50 07     .HU..)n..CU..)P.
    18e9:	90 48 55 00 91 29 50 07 90 4a 55 00 91 29 6e 07     .HU..)P..JU..)n.
    18f9:	90 4b 55 00 91 29 50 07 90 48 55 00 91 29 50 07     .KU..)P..HU..)P.
    1909:	90 4a 55 00 91 2b 6e 07 90 4b 55 00 91 2b 50 07     .JU..+n..KU..+P.
    1919:	90 4d 55 00 91 2b 50 07 90 4a 55 00 91 2b 6e 07     .MU..+P..JU..+n.
    1929:	90 4b 55 00 91 2b 50 07 90 4d 55 00 91 2b 50 07     .KU..+P..MU..+P.
    1939:	90 4f 55 00 91 2c 6e 07 90 4b 55 00 91 2c 50 07     .OU..,n..KU..,P.
    1949:	90 4d 55 00 91 2c 6e 07 90 4f 55 07 50 55 00 91     .MU..,n..OU.PU..
    1959:	2e 6e 07 90 4d 55 00 91 2e 50 07 90 4f 55 00 91     .n..MU...P..OU..
    1969:	2e 50 07 90 4b 55 00 91 2e 6e 06 90 4d 55 00 91     .P..KU...n..MU..
    1979:	2e 50 07 90 4a 55 00 91 2e 50 07 2e 6e 03 90 4b     .P..JU...P..n..K
    1989:	55 04 48 55 00 91 2e 50 07 90 4a 55 00 91 2e 50     U.HU...P..JU...P
    1999:	07 90 46 55 00 91 2e 6e 07 90 4d 55 00 91 2e 50     ..FU...n..MU...P
    19a9:	07 90 46 55 00 91 2e 50 07 90 4f 55 00 91 30 6e     ..FU...P..OU..0n
    19b9:	07 90 46 55 00 91 30 50 07 90 4d 55 00 91 2e 6e     ..FU..0P..MU...n
    19c9:	07 90 46 55 07 54 64 00 48 64 00 91 30 6e 07 30     ..FU.Td.Hd..0n.0
    19d9:	50 07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e     P.0P.0n.0P.0P.0n
    19e9:	07 30 50 06 30 50 07 30 6e 07 30 50 07 30 50 07     .0P.0P.0n.0P.0P.
    19f9:	30 6e 07 30 50 07 2e 6e 0e 30 6e 07 30 50 07 30     0n.0P..n.0n.0P.0
    1a09:	50 07 30 6e 07 30 50 07 30 50 07 30 6e 07 30 50     P.0n.0P.0P.0n.0P
    1a19:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 06     .0P.0n.0P.0P.0n.
    1a29:	30 50 07 2e 6e 0e 90 33 64 00 37 64 00 3c 64 00     0P..n..3d.7d.<d.
    1a39:	91 30 6e 07 30 50 07 30 50 07 90 32 64 00 37 64     .0n.0P.0P..2d.7d
    1a49:	00 3a 64 00 91 30 6e 07 30 50 07 30 50 07 90 33     .:d..0n.0P.0P..3
    1a59:	64 00 37 64 00 3c 64 00 91 30 6e 07 30 50 07 30     d.7d.<d..0n.0P.0
    1a69:	50 07 90 37 64 00 3a 64 00 3e 64 00 91 30 6e 07     P..7d.:d.>d..0n.
    1a79:	30 50 07 30 50 07 90 37 64 00 3c 64 00 3f 64 00     0P.0P..7d.<d.?d.
    1a89:	91 30 6e 07 30 50 07 90 37 64 00 3a 64 00 3e 64     .0n.0P..7d.:d.>d
    1a99:	00 91 30 6e 07 30 6e 07 90 3a 64 00 43 64 00 3f     ..0n.0n..:d.Cd.?
    1aa9:	64 00 91 33 6e 06 33 50 07 33 50 07 33 6e 07 33     d..3n.3P.3P.3n.3
    1ab9:	50 07 33 50 07 90 37 64 00 3a 64 00 3f 64 00 91     P.3P..7d.:d.?d..
    1ac9:	33 6e 07 33 50 07 33 50 07 33 6e 07 33 50 07 33     3n.3P.3P.3n.3P.3
    1ad9:	50 07 90 3a 64 00 3f 64 00 43 64 00 91 33 6e 07     P..:d.?d.Cd..3n.
    1ae9:	33 50 07 33 6e 07 33 6e 07 90 41 64 00 3e 64 00     3P.3n.3n..Ad.>d.
    1af9:	3a 64 00 91 2e 6e 07 2e 50 07 2e 50 07 2e 6e 07     :d...n..P..P..n.
    1b09:	2e 50 07 2e 50 06 90 35 64 00 3a 64 00 3e 64 00     .P..P..5d.:d.>d.
    1b19:	91 2e 6e 07 2e 50 07 2e 50 07 2e 6e 07 2e 50 07     ..n..P..P..n..P.
    1b29:	2e 50 07 90 3a 64 00 3e 64 00 41 64 00 91 2e 6e     .P..:d.>d.Ad...n
    1b39:	07 2e 50 07 2e 6e 07 2e 6e 07 90 37 64 00 3c 64     ..P..n..n..7d.<d
    1b49:	00 3f 64 00 91 30 6e 07 30 50 07 30 50 07 30 6e     .?d..0n.0P.0P.0n
    1b59:	07 30 50 07 30 50 07 30 6e 07 30 50 07 30 50 07     .0P.0P.0n.0P.0P.
    1b69:	30 6e 06 30 50 07 30 50 07 30 6e 07 30 50 07 2e     0n.0P.0P.0n.0P..
    1b79:	6e 0e 30 6e 07 30 50 07 30 50 07 30 6e 07 30 50     n.0n.0P.0P.0n.0P
    1b89:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 07     .0P.0n.0P.0P.0n.
    1b99:	30 50 07 30 50 07 30 6e 07 30 50 07 2e 6e 0d 90     0P.0P.0n.0P..n..
    1ba9:	33 64 00 37 64 00 3c 64 00 91 30 6e 07 30 50 07     3d.7d.<d..0n.0P.
    1bb9:	30 50 07 90 32 64 00 37 64 00 3a 64 00 91 30 6e     0P..2d.7d.:d..0n
    1bc9:	07 30 50 07 30 50 07 90 33 64 00 37 64 00 3c 64     .0P.0P..3d.7d.<d
    1bd9:	00 91 30 6e 07 30 50 07 30 50 07 90 37 64 00 3a     ..0n.0P.0P..7d.:
    1be9:	64 00 3e 64 00 91 30 6e 07 30 50 07 30 50 07 90     d.>d..0n.0P.0P..
    1bf9:	37 64 00 3c 64 00 3f 64 00 91 30 6e 07 30 50 07     7d.<d.?d..0n.0P.
    1c09:	90 37 64 00 3a 64 00 3e 64 00 91 2e 6e 0e 90 3a     .7d.:d.>d...n..:
    1c19:	64 00 43 64 00 3f 64 00 91 33 6e 07 33 50 07 33     d.Cd.?d..3n.3P.3
    1c29:	50 07 33 6e 06 33 50 07 33 50 07 90 37 64 00 3a     P.3n.3P.3P..7d.:
    1c39:	64 00 3f 64 00 91 33 6e 07 33 50 07 33 50 07 33     d.?d..3n.3P.3P.3
    1c49:	6e 07 33 50 07 33 50 07 90 3a 64 00 3f 64 00 43     n.3P.3P..:d.?d.C
    1c59:	64 00 91 33 6e 07 33 50 07 32 6e 0e 90 41 64 00     d..3n.3P.2n..Ad.
    1c69:	3e 64 00 3a 64 00 91 2e 6e 07 2e 50 07 2e 50 07     >d.:d...n..P..P.
    1c79:	2e 6e 07 2e 50 07 2e 50 07 90 35 64 00 3a 64 00     .n..P..P..5d.:d.
    1c89:	3e 64 00 91 2e 6e 07 2e 50 06 2e 50 07 2e 6e 07     >d...n..P..P..n.
    1c99:	2e 50 07 2e 50 07 90 3a 64 00 3e 64 00 41 64 00     .P..P..:d.>d.Ad.
    1ca9:	91 2e 6e 05 ff 06 01 45 02 91 2e 50 07 2c 6e 0e     ..n....E...P.,n.
    1cb9:	90 37 64 00 3c 64 00 3f 64 00 91 30 6e 07 30 50     .7d.<d.?d..0n.0P
    1cc9:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 07     .0P.0n.0P.0P.0n.
    1cd9:	30 50 07 30 50 07 30 6e 07 30 50 07 30 50 07 ff     0P.0P.0n.0P.0P..
    1ce9:	2f 00                                               /.

00001ceb <my_patches>:
    1ceb:	00 00 00 62 1e 00 00 00 00 00 00 00 62 1e 00 00     ...b........b...
    1cfb:	00 00 00 00 00 51 1e 00 00 00 00 00 00 00 fb 1d     .....Q..........
    1d0b:	00 00 00 00 00 00 00 51 1e 00 00 00 00 00 00 00     .......Q........
    1d1b:	2a 1d 00 00 00 00 00 00 00 2a 1d 00 00 00 00        *........*.....

00001d2a <explode>:
    1d2a:	00 07 7f 00 02 03 00 00 ff 00 08 41 01 04 04 01     ...........A....
    1d3a:	04 04 01 04 04 01 04 04 01 04 04 01 04 04 01 04     ................
    1d4a:	04 01 04 04 01 04 04 03 07 64 00 08 3c 01 04 04     .........d..<...
    1d5a:	01 04 04 01 04 04 01 04 04 01 04 04 01 04 04 01     ................
    1d6a:	04 04 01 04 04 01 04 04 03 07 50 00 08 37 01 04     ..........P..7..
    1d7a:	04 01 04 04 01 04 04 01 04 04 01 04 04 01 04 04     ................
    1d8a:	01 04 04 01 04 04 01 04 04 03 07 32 00 08 32 01     ...........2..2.
    1d9a:	04 04 01 04 04 01 04 04 01 04 04 01 04 04 01 04     ................
    1daa:	04 01 04 04 01 04 04 01 04 04 03 07 28 00 08 2d     ............(..-
    1dba:	01 04 04 01 04 04 01 04 04 01 04 04 01 04 04 01     ................
    1dca:	04 04 01 04 04 01 04 04 01 04 04 03 07 14 00 08     ................
    1dda:	28 01 04 04 01 04 04 01 04 04 01 04 04 01 04 04     (...............
    1dea:	01 04 04 01 04 04 01 04 04 01 04 04 01 05 00 00     ................
    1dfa:	ff                                                  .

00001dfb <pshoot>:
    1dfb:	00 02 03 00 07 7f 00 08 50 01 04 06 01 04 06 01     ........P.......
    1e0b:	04 06 01 07 00 03 07 7f 00 08 50 01 04 06 01 04     ..........P.....
    1e1b:	06 01 04 06 01 07 00 03 08 50 00 07 20 01 04 06     .........P.. ...
    1e2b:	01 04 06 01 04 06 01 04 06 01 07 00 03 08 50 00     ..............P.
    1e3b:	07 0f 01 04 06 01 04 06 01 04 06 01 04 06 01 07     ................
    1e4b:	00 01 05 00 00 ff                                   ......

00001e51 <navigate>:
    1e51:	00 02 04 00 07 70 00 00 d8 00 08 3c 01 05 00 00     .....p.....<....
    1e61:	ff                                                  .

00001e62 <instrument>:
    1e62:	00 02 04 00 00 dd 00 ff                             ........

00001e6a <sprites_data>:
    1e6a:	fe fe fe fe fe fe fe 87 fe fe fe fe fe fe 87 87     ................
    1e7a:	fe fe fe fe fe fe 87 87 fe fe fe fe 85 85 85 87     ................
    1e8a:	fe fe fe 85 87 87 87 85 fe fe 85 87 87 87 87 85     ................
    1e9a:	fe 85 87 87 87 85 85 87 85 87 87 85 85 87 87 87     ................
    1eaa:	87 87 87 fe fe fe fe fe d2 d2 eb d2 fe fe fe fe     ................
    1eba:	87 d2 fd eb fe fe fe fe 87 87 eb d2 fe fe fe fe     ................
    1eca:	85 87 87 d2 fe fe fe fe 87 85 85 87 85 fe fe fe     ................
    1eda:	87 ef 87 87 87 85 fe fe ef ff ef 87 87 85 fe fe     ................
    1eea:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 87     ................
    1efa:	fe fe fe fe fe fe 87 87 fe fe fe fe fe fe 87 87     ................
    1f0a:	fe fe fe fe 85 85 85 87 fe fe fe 85 87 87 87 85     ................
    1f1a:	fe fe 85 87 87 87 87 85 fe 85 87 87 87 85 85 87     ................
    1f2a:	fe fe fe fe fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    1f3a:	d2 d2 eb d2 fe fe fe fe 87 d2 fd eb fe fe fe fe     ................
    1f4a:	87 87 eb d2 fe fe fe fe 85 87 87 d2 fe fe fe fe     ................
    1f5a:	87 85 85 87 85 fe fe fe 87 ef 87 87 87 85 fe fe     ................
    1f6a:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1f7a:	fe fe fe fe fe fe fe fe fe ba ba ba ba ba ba fe     ................
    1f8a:	ba bd bd bd bd bd bd ba fe ba ba ba ba ba ba fe     ................
    1f9a:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1faa:	fe fe 46 46 46 46 46 46 fe a5 a5 a5 47 47 46 fe     ..FFFFFF....GGF.
    1fba:	fe 46 46 47 47 46 3f 3f 46 46 47 47 46 fe fe fe     .FFGGF??FFGGF...
    1fca:	46 46 47 47 46 fe fe fe fe 46 46 47 47 3f 3f fe     FFGGF....FFGG??.
    1fda:	fe a5 a5 a5 47 fe fe fe fe fe 46 46 46 46 fe fe     ....G.....FFFF..
    1fea:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1ffa:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    200a:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    201a:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    202a:	85 87 87 85 fe 85 87 87 fe 85 87 85 fe 85 87 87     ................
    203a:	fe 85 87 87 ad ad ad ad fe fe 85 87 ad ad ad ad     ................
    204a:	fe fe 85 87 ad ad ad ad fe fe fe 85 a4 ad 87 87     ................
    205a:	fe fe fe fe a4 a4 85 87 fe fe fe fe a4 a4 85 87     ................
    206a:	87 ef 87 85 87 85 fe fe 87 87 87 85 87 87 85 fe     ................
    207a:	ad ad ad ad ad 87 85 fe ad ad ad ad ad ad a4 ad     ................
    208a:	ad ad ad ad ad a4 a4 a4 87 87 87 85 fe fe fe fe     ................
    209a:	87 87 87 85 fe fe fe fe 87 87 87 85 fe fe fe fe     ................
    20aa:	87 ef 87 85 87 85 fe fe 87 87 87 85 87 87 85 fe     ................
    20ba:	ad ad ad ad ad 87 85 fe ad ad ad ad ad ad a4 ad     ................
    20ca:	ad ad ad ad ad a4 a4 a4 87 87 87 85 fe fe fe fe     ................
    20da:	87 87 87 85 fe fe fe fe 87 87 85 fe fe fe fe fe     ................
    20ea:	85 87 87 85 85 87 87 87 85 87 87 85 fe 85 87 87     ................
    20fa:	fe 85 87 85 fe 85 87 87 fe 85 87 87 ad ad ad ad     ................
    210a:	fe fe 85 87 ad ad ad ad fe fe 85 87 ad ad ad ad     ................
    211a:	fe fe fe 85 a4 ad 87 87 fe fe fe fe a4 a4 85 87     ................
    212a:	ef ff ef 87 87 85 fe fe 87 ef 87 85 87 85 fe fe     ................
    213a:	87 87 87 85 87 87 85 fe ad ad ad ad ad 87 85 fe     ................
    214a:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    215a:	87 87 87 87 fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    216a:	87 ef 87 85 87 85 fe fe 87 87 87 85 87 87 85 fe     ................
    217a:	ad ad ad ad ad 87 85 fe ad ad ad ad ad ad a4 ad     ................
    218a:	ad ad ad ad ad a4 a4 a4 87 87 87 87 fe fe fe fe     ................
    219a:	87 87 87 87 fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    21aa:	ef ff ef 87 87 85 fe fe 87 ef 87 85 87 85 fe fe     ................
    21ba:	87 87 87 85 87 87 85 fe ad ad ad ad ad 87 85 fe     ................
    21ca:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    21da:	87 87 87 87 fe fe fe fe 87 87 87 87 87 fe fe fe     ................
    21ea:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    21fa:	fe fe fe 27 07 fe fe fe fe fe 27 77 27 07 fe fe     ...'......'w'...
    220a:	fe fe 07 27 07 07 fe fe fe fe fe 07 07 fe fe fe     ...'............
    221a:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    222a:	fe fe fe fe fe fe 85 87 fe fe fe fe fe fe 85 87     ................
    223a:	fe fe fe fe fe 85 87 87 fe fe fe fe fe 85 87 87     ................
    224a:	fe fe fe fe 85 87 87 fe fe fe fe fe 85 87 87 fe     ................
    225a:	fe fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4     ................
    226a:	87 fe 85 85 fe fe fe fe 87 fe 85 85 85 fe fe fe     ................
    227a:	fe fe 85 85 85 fe fe fe fe fe 85 85 85 fe fe fe     ................
    228a:	fe fe 85 85 85 fe fe fe fe fe 85 85 85 fe fe fe     ................
    229a:	fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe     ................
    22aa:	fe fe fe fe fe fe fe 85 fe fe fe fe fe fe fe 85     ................
    22ba:	fe fe fe fe fe 85 85 87 fe fe fe fe 85 87 87 87     ................
    22ca:	fe fe fe a4 87 87 87 87 fe fe fe a4 87 87 87 fe     ................
    22da:	fe fe fe a4 a4 fe fe fe fe fe fe a4 a4 a4 fe fe     ................
    22ea:	87 87 87 fe fe fe fe fe 87 87 87 87 fe fe fe fe     ................
    22fa:	87 87 87 87 fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    230a:	87 85 85 fe fe fe fe fe 85 85 85 fe fe fe fe fe     ................
    231a:	a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe fe fe     ................
    232a:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 85 85     ................
    233a:	fe fe fe fe 85 85 85 85 a4 a4 85 85 85 85 85 fe     ................
    234a:	a4 a4 85 85 85 85 85 fe a4 a4 85 85 85 85 fe fe     ................
    235a:	a4 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    236a:	87 87 87 fe fe fe fe fe fe 85 87 87 fe fe fe fe     ................
    237a:	fe 85 87 87 87 fe fe fe fe fe 85 87 87 fe fe fe     ................
    238a:	fe fe 85 87 87 87 fe fe fe fe fe 85 87 87 fe fe     ................
    239a:	fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe     ................
    23aa:	fe fe fe fe fe fe fe 85 fe fe fe fe fe fe fe 85     ................
    23ba:	fe fe fe fe fe 85 85 85 fe fe fe fe 85 85 85 85     ................
    23ca:	fe fe fe a4 85 85 85 85 fe fe fe a4 85 85 85 fe     ................
    23da:	fe fe fe a4 a4 fe fe fe fe fe fe a4 a4 a4 fe fe     ................
    23ea:	87 87 87 fe fe fe fe fe 85 87 87 85 fe fe fe fe     ................
    23fa:	85 87 87 85 fe fe fe fe 85 87 87 fe fe fe fe fe     ................
    240a:	85 87 87 fe fe fe fe fe 85 87 87 fe fe fe fe fe     ................
    241a:	a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe fe fe     ................
    242a:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 85 85     ................
    243a:	fe fe fe fe 85 85 85 85 a4 a4 85 85 85 85 a4 a4     ................
    244a:	a4 a4 85 85 85 85 a4 a4 a4 a4 85 85 85 85 a4 a4     ................
    245a:	a4 fe fe fe fe fe a4 fe fe fe fe fe fe fe fe fe     ................
    246a:	87 87 85 87 87 fe fe fe fe fe 85 87 87 87 fe fe     ................
    247a:	fe fe 85 87 87 87 fe fe 85 85 85 87 87 fe fe fe     ................
    248a:	87 87 87 87 87 fe fe fe 87 87 87 87 fe fe fe fe     ................
    249a:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    24aa:	fe fe fe fe fe fe fe fe fe fe 12 12 12 12 fe fe     ................
    24ba:	ad 12 0f 1f 1f 0f 12 ad ad 12 12 12 12 12 12 ad     ................
    24ca:	ad ad 12 12 12 12 ad ad ad 12 ad 12 12 ad 12 ad     ................
    24da:	ad fe 12 12 12 12 fe ad ad fe fe fe fe fe fe ad     ................
    24ea:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 7f     ................
    24fa:	fe fe fe fe fe 7f 7f 7f fe fe fe fe 7f 7f 7f 7f     ................
    250a:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe fe fe     ................
    251a:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    252a:	a4 fe fe fe fe fe fe fe a4 ad fe fe ff ff a4 ad     ................
    253a:	a4 ad f6 ff ff a4 ad f6 a4 ad f6 ff a4 ad f6 ff     ................
    254a:	a4 ad fe fe a4 ad f6 ff a4 fe fe a4 a4 ad f6 fe     ................
    255a:	fe fe fe a4 a4 ad f6 f6 fe fe fe fe fe fe fe fe     ................
    256a:	fe fe fe fe fe fe fe fe f6 ff ff ff d2 fe fe fe     ................
    257a:	ff ff ff ff d2 eb fe fe ff fe ff ff eb fd d2 fe     ................
    258a:	fe fe fe ff d2 eb d2 d2 fe fe fe fe fe fe fe fe     ................
    259a:	f6 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    25aa:	fe fe bf 7f 7f bf fe fe fe 7f 7f 7f 7f 7f 7f fe     ................
    25ba:	bf 7f 7f 7f 7f 7f 7f bf 7f 7f 7f 7f 7f 7f 7f 7f     ................
    25ca:	7f 7f 7f 7f 7f 7f 7f 7f bf 7f 7f 7f 7f 7f 7f bf     ................
    25da:	fe 7f 7f 7f 7f 7f 7f fe fe fe bf 7f 7f bf fe fe     ................
    25ea:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    25fa:	fe fe fe 7f 7f fe fe fe fe fe 7f 7f 7f 7f fe fe     ................
    260a:	fe fe 7f 7f 7f 7f fe fe fe fe fe 7f 7f fe fe fe     ................
    261a:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    262a:	fe fe bf 7f 7f bf fe fe fe 7f 7f 7f 7f 7f 7f fe     ................
    263a:	bf 7f fe fe 7f 7f 7f bf 7f fe fe fe fe 7f 7f 7f     ................
    264a:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe 7f bf     ................
    265a:	fe fe fe fe fe fe 7f fe fe fe fe fe fe bf fe fe     ................
    266a:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    267a:	fe fe fe fe fe fe fe fe fe fe fe e3 fe fe fe fe     ................
    268a:	fe fe fe ff fe fe fe fe fe fe fe fe fe fe fe fe     ................
    269a:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    26aa:	fe fe fe fe fe fe fe fe fe fe fe fe ff fe fe fe     ................
    26ba:	fe fe fe fe 7f ff fe fe fe fe fe fe 7f 7f ff fe     ................
    26ca:	fe fe fe fe 7f 7f 7f ff fe fe fe fe 7f 7f 7f fe     ................
    26da:	fe fe fe fe 7f 7f fe fe fe fe fe fe 7f fe fe fe     ................
    26ea:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    26fa:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    270a:	7f 7f 7f 7f 7f 7f ff fe fe 7f 7f 7f 7f ff fe fe     ................
    271a:	fe fe 7f 7f ff fe fe fe fe fe fe fe fe fe fe fe     ................
    272a:	fe fe fe ff fe fe fe fe fe fe ff 7f 7f fe fe fe     ................
    273a:	fe ff 7f 7f 7f 7f fe fe ff 7f 7f 7f 7f 7f 7f fe     ................
    274a:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    275a:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    276a:	fe fe 12 12 12 12 fe fe fe 12 0f 1f 1f 0f 12 fe     ................
    277a:	ad 12 12 12 12 12 12 ad ad 12 ad 12 12 ad 12 ad     ................
    278a:	ad ad 12 12 12 12 ad ad ad fe 12 12 12 12 fe ad     ................
    279a:	ad fe fe fe fe fe fe ad ad fe fe fe fe fe fe ad     ................
    27aa:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 7f     ................
    27ba:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe fe 7f     ................
    27ca:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    27da:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    27ea:	a4 fe fe fe fe fe fe fe a4 a4 fe fe fe fe fe fe     ................
    27fa:	a4 a4 ad fe fe fe fe fe a4 a4 ad ad fe fe fe fe     ................
    280a:	a4 a4 ad ad f6 fe fe fe a4 a4 ad ad f6 f6 ff ff     ................
    281a:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    282a:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    283a:	fe fe ff ff ff ff a4 a4 fe ff ff ff ff a4 a4 a4     ................
    284a:	ff ff ff ff ff a4 a4 a4 ff ff ff ff a4 a4 a4 ad     ................
    285a:	ff ff ff ff a4 a4 ad ad ff ff ff a4 a4 ad ad f6     ................
    286a:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    287a:	a4 ad ad f6 f6 ff ff ff a4 ad ad f6 f6 ff ff ff     ................
    288a:	ad ad f6 f6 ff ff ff ff ad f6 f6 ff ff ff ff ff     ................
    289a:	f6 f6 ff ff ff ff ff ff f6 ff ff 7f 7f ff ff ff     ................
    28aa:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    28ba:	d2 fe fe fe fe fe fe fe d2 d2 fe fe fe fe fe fe     ................
    28ca:	d2 d2 d2 fe fe fe fe fe d2 d3 eb d3 fe fe fe fe     ................
    28da:	d2 eb fd eb d2 fe fe fe d2 d3 eb d3 d2 d2 fe fe     ................
    28ea:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    28fa:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 7f 7f fe     ................
    290a:	a4 a4 ad ad 7f 7f 7f fe a4 a4 ad fe fe 7f fe fe     ................
    291a:	a4 a4 fe fe fe fe fe fe a4 fe fe fe fe fe fe fe     ................
    292a:	ff ff fe a4 ad ad f6 f6 ff fe a4 a4 ad ad f6 f6     ................
    293a:	fe fe a4 a4 ad ad f6 f6 fe a4 a4 a4 ad ad f6 f6     ................
    294a:	fe a4 a4 a4 a4 ad ad f6 a4 a4 a4 a4 a4 a4 ad ad     ................
    295a:	a4 a4 a4 a4 a4 a4 a4 ad a4 a4 a4 a4 a4 a4 a4 a4     ................
    296a:	ff ff 7f 7f 7f 7f ff ff ff fe 7f 7f 7f 7f fe ff     ................
    297a:	fe fe 7f 7f 7f fe fe fe fe fe fe 7f fe fe fe fe     ................
    298a:	f6 fe fe fe fe fe fe fe f6 f6 fe fe fe fe fe fe     ................
    299a:	ad f6 f6 fe fe fe fe fe ad ad f6 f6 fe fe fe fe     ................
    29aa:	d2 d2 d2 d2 d2 d2 d2 fe ff ff ff ff ff ff ff ff     ................
    29ba:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    29ca:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    29da:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    29ea:	ef ff ef 87 87 85 fe fe 87 ef 87 85 87 85 fe fe     ................
    29fa:	87 87 87 85 87 87 85 fe ad ad ad ad ad 87 85 fe     ................
    2a0a:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    2a1a:	87 87 87 85 fe fe fe fe 87 87 85 fe fe fe fe fe     ................
    2a2a:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 87 87     ................
    2a3a:	fe fe fe fe 85 87 87 87 a4 a4 85 85 85 87 87 fe     ................
    2a4a:	a4 a4 87 87 87 87 87 fe a4 a4 87 87 87 87 fe fe     ................
    2a5a:	a4 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2a6a:	87 87 85 fe fe fe fe fe fe 85 85 85 fe fe fe fe     ................
    2a7a:	fe 85 85 85 85 fe fe fe fe fe 85 85 85 fe fe fe     ................
    2a8a:	fe fe 85 85 85 85 fe fe fe fe fe 85 85 85 fe fe     ................
    2a9a:	fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe     ................
    2aaa:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2aba:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2aca:	fe fe fe fe fe fe fe fe fe fe fe fe fe 85 85 85     ................
    2ada:	fe a4 87 87 87 87 87 87 a4 a4 87 87 87 87 87 87     ................
    2aea:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 87     ................
    2afa:	fe fe fe fe 85 85 85 87 fe fe fe 85 87 87 87 85     ................
    2b0a:	fe fe 85 85 87 87 87 87 85 85 85 85 85 87 87 ad     ................
    2b1a:	87 87 87 87 ad 85 87 87 87 87 87 87 ad ad a4 a4     ................
    2b2a:	87 87 87 87 fe fe fe fe 87 d2 d2 eb d2 fe fe fe     ................
    2b3a:	87 87 d2 fd eb fe fe fe 87 87 87 eb d2 fe fe fe     ................
    2b4a:	85 85 87 87 d2 fe fe fe ad ad ad ad ad 87 ef fe     ................
    2b5a:	ad ad ad ad ad ad a4 ad a4 ad ad ad ad a4 a4 a4     ................
    2b6a:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    2b7a:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 7f 7f 7f     ................
    2b8a:	a4 a4 ad ad 7f 7f 7f fe a4 a4 ad fe 7f 7f 7f fe     ................
    2b9a:	a4 a4 fe fe fe 7f fe fe a4 fe fe fe fe fe fe fe     ................
    2baa:	ff ff 7f 7f 7f 7f ff ff ff 7f 7f 7f 7f 7f 7f ff     ................
    2bba:	fe fe 7f 7f 7f 7f fe fe fe fe 7f 7f 7f fe fe fe     ................
    2bca:	f6 fe fe 7f fe fe fe fe f6 f6 fe fe fe fe fe fe     ................
    2bda:	ad f6 f6 fe fe fe fe fe ad ad f6 f6 fe fe fe fe     ................

00002bea <map_enemy_spider_1>:
    2bea:	01 01 24                                            ..$

00002bed <map_enemy_spider_0>:
    2bed:	01 01 19                                            ...

00002bf0 <map_enemy_shark>:
    2bf0:	01 01 05                                            ...

00002bf3 <map_enemy_shot>:
    2bf3:	01 01 0e                                            ...

00002bf6 <map_hero_shot>:
    2bf6:	01 01 04                                            ...

00002bf9 <map_hero_ship_large_1>:
    2bf9:	04 02 26 27 28 29 34 2b 35 2d                       ..&'()4+5-

00002c03 <map_hero_ship_large_0>:
    2c03:	04 02 26 27 28 29 2a 2b 2c 2d                       ..&'()*+,-

00002c0d <map_hero_ship_1>:
    2c0d:	03 01 25 1b 1c                                      ..%..

00002c12 <map_hero_ship_0>:
    2c12:	03 01 1a 1b 1c                                      .....

00002c17 <map_hero_prone>:
    2c17:	03 01 31 32 33                                      ..123

00002c1c <map_hero_jump>:
    2c1c:	02 03 02 03 0a 0d 17 18                             ........

00002c24 <map_hero_step_3>:
    2c24:	02 03 02 03 0a 2e 2f 30                             ....../0

00002c2c <map_hero_step_2>:
    2c2c:	02 03 00 01 07 0c 15 16                             ........

00002c34 <map_hero_step_1>:
    2c34:	02 03 02 03 0a 0b 13 14                             ........

00002c3c <map_hero_step_0>:
    2c3c:	02 03 00 01 07 09 11 12                             ........

00002c44 <map_hero_idle>:
    2c44:	02 03 00 01 07 08 0f 10                             ........

00002c4c <map_explosion_2>:
    2c4c:	01 01 1f                                            ...

00002c4f <map_explosion_1>:
    2c4f:	01 01 1e                                            ...

00002c52 <map_explosion_0>:
    2c52:	01 01 1d                                            ...

00002c55 <map_particle>:
    2c55:	01 01 20                                            .. 

00002c58 <map_up_arrow>:
    2c58:	01 01 23                                            ..#

00002c5b <map_down_arrow>:
    2c5b:	01 01 22                                            .."

00002c5e <map_right_arrow>:
    2c5e:	01 01 21                                            ..!

00002c61 <map_none>:
    2c61:	01 01 06                                            ...

00002c64 <map_level_space>:
    2c64:	01 ff 01 34 7e 06 00 00 00 00 00 00 00 00 00 00     ...4~...........
    2c74:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2c84:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2c94:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2ca4:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2cb4:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2cc4:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2cd4:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2ce4:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2cf4:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2d04:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2d14:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2d24:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2d34:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2d44:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2d54:	7a 06 06 05 00 00 00 00 00 00 00 00 00 00 00 00     z...............
    2d64:	80 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2d74:	79 05 07 07 00 00 00 00 00 00 00 00 00 00 00 00     y...............
    2d84:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2d94:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2da4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2db4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2dc4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2dd4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2de4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2df4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2e04:	32 07 07 02 47 07 00 00 00 00 00 00 00 00 00 00     2...G...........
    2e14:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2e24:	0f 07 07 02 6a 07 00 00 00 00 00 00 00 00 00 00     ....j...........
    2e34:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2e44:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2e54:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2e64:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2e74:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2e84:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2e94:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2ea4:	25 07 07 02 54 07 00 00 00 00 00 00 00 00 00 00     %...T...........
    2eb4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2ec4:	02 07 07 02 2b 07 07 02 45 07 00 00 00 00 00 00     ....+...E.......
    2ed4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2ee4:	11 07 07 02 32 07 0f 02 27 07 00 00 00 00 00 00     ....2...'.......
    2ef4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2f04:	49 07 0f 04 28 07 00 00 00 00 00 00 00 00 00 00     I...(...........
    2f14:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2f24:	48 07 0f 04 29 07 00 00 00 00 00 00 00 00 00 00     H...)...........
    2f34:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2f44:	47 07 0f 04 2a 07 00 00 00 00 00 00 00 00 00 00     G...*...........
    2f54:	6a 07 16 02 00 00 00 00 00 00 00 00 00 00 00 00     j...............
    2f64:	46 02 0f 04 07 02 04 07 20 02 00 00 00 00 00 00     F....... .......
    2f74:	69 02 17 04 00 00 00 00 00 00 00 00 00 00 00 00     i...............
    2f84:	5b 04 04 07 21 04 00 00 00 00 00 00 00 00 00 00     [...!...........
    2f94:	68 04 18 07 00 00 00 00 00 00 00 00 00 00 00 00     h...............
    2fa4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2fb4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2fc4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2fd4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2fe4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2ff4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3004:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3014:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3024:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3034:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3044:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3054:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3064:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3074:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3084:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3094:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    30a4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    30b4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    30c4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    30d4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    30e4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    30f4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3104:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3114:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3124:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3134:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3144:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3154:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3164:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3174:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3184:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3194:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    31a4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    31b4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    31c4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    31d4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    31e4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    31f4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3204:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3214:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3224:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3234:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3244:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3254:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3264:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3274:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3284:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3294:	50 07 30 02 00 00 00 00 00 00 00 00 00 00 00 00     P.0.............
    32a4:	80 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    32b4:	4f 02 31 04 00 00 00 00 00 00 00 00 00 00 00 00     O.1.............
    32c4:	80 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    32d4:	4e 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     N...............

000032e4 <map_level_4>:
    32e4:	01 ff 01 34 7e 06 00 00 00 00 00 00 00 00 00 00     ...4~...........
    32f4:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3304:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3314:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3324:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3334:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3344:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3354:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3364:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3374:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3384:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3394:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    33a4:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    33b4:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    33c4:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    33d4:	7a 06 06 05 00 00 00 00 00 00 00 00 00 00 00 00     z...............
    33e4:	80 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    33f4:	79 05 07 07 00 00 00 00 00 00 00 00 00 00 00 00     y...............
    3404:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3414:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3424:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3434:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3444:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3454:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3464:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3474:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3484:	32 07 07 02 47 07 00 00 00 00 00 00 00 00 00 00     2...G...........
    3494:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    34a4:	0f 07 07 02 6a 07 00 00 00 00 00 00 00 00 00 00     ....j...........
    34b4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    34c4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    34d4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    34e4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    34f4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3504:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3514:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3524:	25 07 07 02 54 07 00 00 00 00 00 00 00 00 00 00     %...T...........
    3534:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3544:	02 07 07 02 2b 07 07 02 45 07 00 00 00 00 00 00     ....+...E.......
    3554:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3564:	11 07 07 02 32 07 0f 02 27 07 00 00 00 00 00 00     ....2...'.......
    3574:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3584:	49 07 0f 04 28 07 00 00 00 00 00 00 00 00 00 00     I...(...........
    3594:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    35a4:	48 07 0f 04 29 07 00 00 00 00 00 00 00 00 00 00     H...)...........
    35b4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    35c4:	47 07 0f 04 2a 07 00 00 00 00 00 00 00 00 00 00     G...*...........
    35d4:	6a 07 16 02 00 00 00 00 00 00 00 00 00 00 00 00     j...............
    35e4:	46 02 0f 04 07 02 04 07 20 02 00 00 00 00 00 00     F....... .......
    35f4:	69 02 17 04 00 00 00 00 00 00 00 00 00 00 00 00     i...............
    3604:	5b 04 04 07 21 04 00 00 00 00 00 00 00 00 00 00     [...!...........
    3614:	68 04 18 07 00 00 00 00 00 00 00 00 00 00 00 00     h...............
    3624:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3634:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3644:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3654:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3664:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3674:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3684:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3694:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    36a4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    36b4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    36c4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    36d4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    36e4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    36f4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3704:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3714:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3724:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3734:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3744:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3754:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3764:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3774:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3784:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3794:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    37a4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    37b4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    37c4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    37d4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    37e4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    37f4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3804:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3814:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3824:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3834:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3844:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3854:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3864:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3874:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3884:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3894:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    38a4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    38b4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    38c4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    38d4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    38e4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    38f4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3904:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3914:	50 07 30 02 00 00 00 00 00 00 00 00 00 00 00 00     P.0.............
    3924:	80 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3934:	4f 02 31 04 00 00 00 00 00 00 00 00 00 00 00 00     O.1.............
    3944:	80 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3954:	4e 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     N...............

00003964 <map_level_3>:
    3964:	01 ff 01 34 7e 06 00 00 00 00 00 00 00 00 00 00     ...4~...........
    3974:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3984:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3994:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    39a4:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    39b4:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    39c4:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    39d4:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    39e4:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    39f4:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3a04:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3a14:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3a24:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3a34:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3a44:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3a54:	7a 06 06 05 00 00 00 00 00 00 00 00 00 00 00 00     z...............
    3a64:	80 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3a74:	79 05 07 07 00 00 00 00 00 00 00 00 00 00 00 00     y...............
    3a84:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3a94:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3aa4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3ab4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3ac4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3ad4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3ae4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3af4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3b04:	32 07 07 02 47 07 00 00 00 00 00 00 00 00 00 00     2...G...........
    3b14:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3b24:	0f 07 07 02 6a 07 00 00 00 00 00 00 00 00 00 00     ....j...........
    3b34:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3b44:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3b54:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3b64:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3b74:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3b84:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3b94:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3ba4:	25 07 07 02 54 07 00 00 00 00 00 00 00 00 00 00     %...T...........
    3bb4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3bc4:	02 07 07 02 2b 07 07 02 45 07 00 00 00 00 00 00     ....+...E.......
    3bd4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3be4:	11 07 07 02 32 07 0f 02 27 07 00 00 00 00 00 00     ....2...'.......
    3bf4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3c04:	49 07 0f 04 28 07 00 00 00 00 00 00 00 00 00 00     I...(...........
    3c14:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3c24:	48 07 0f 04 29 07 00 00 00 00 00 00 00 00 00 00     H...)...........
    3c34:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3c44:	47 07 0f 04 2a 07 00 00 00 00 00 00 00 00 00 00     G...*...........
    3c54:	6a 07 16 02 00 00 00 00 00 00 00 00 00 00 00 00     j...............
    3c64:	46 02 0f 04 07 02 04 07 20 02 00 00 00 00 00 00     F....... .......
    3c74:	69 02 17 04 00 00 00 00 00 00 00 00 00 00 00 00     i...............
    3c84:	5b 04 04 07 21 04 00 00 00 00 00 00 00 00 00 00     [...!...........
    3c94:	68 04 18 07 00 00 00 00 00 00 00 00 00 00 00 00     h...............
    3ca4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3cb4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3cc4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3cd4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3ce4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3cf4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3d04:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3d14:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3d24:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3d34:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3d44:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3d54:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3d64:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3d74:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3d84:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3d94:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3da4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3db4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3dc4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3dd4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3de4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3df4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3e04:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3e14:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3e24:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3e34:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3e44:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3e54:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3e64:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3e74:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3e84:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3e94:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3ea4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3eb4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3ec4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3ed4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3ee4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3ef4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3f04:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3f14:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3f24:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3f34:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3f44:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3f54:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3f64:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3f74:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3f84:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3f94:	50 07 30 02 00 00 00 00 00 00 00 00 00 00 00 00     P.0.............
    3fa4:	80 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3fb4:	4f 02 31 04 00 00 00 00 00 00 00 00 00 00 00 00     O.1.............
    3fc4:	80 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3fd4:	4e 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     N...............

00003fe4 <map_level_2>:
    3fe4:	01 ff 01 34 7e 06 00 00 00 00 00 00 00 00 00 00     ...4~...........
    3ff4:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4004:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4014:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4024:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4034:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4044:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4054:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4064:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4074:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4084:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4094:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    40a4:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    40b4:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    40c4:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    40d4:	7a 06 06 05 00 00 00 00 00 00 00 00 00 00 00 00     z...............
    40e4:	80 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    40f4:	79 05 07 07 00 00 00 00 00 00 00 00 00 00 00 00     y...............
    4104:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4114:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4124:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4134:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4144:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4154:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4164:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4174:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4184:	32 07 07 02 47 07 00 00 00 00 00 00 00 00 00 00     2...G...........
    4194:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    41a4:	0f 07 07 02 6a 07 00 00 00 00 00 00 00 00 00 00     ....j...........
    41b4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    41c4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    41d4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    41e4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    41f4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4204:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4214:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4224:	25 07 07 02 54 07 00 00 00 00 00 00 00 00 00 00     %...T...........
    4234:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4244:	02 07 07 02 2b 07 07 02 45 07 00 00 00 00 00 00     ....+...E.......
    4254:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4264:	11 07 07 02 32 07 0f 02 27 07 00 00 00 00 00 00     ....2...'.......
    4274:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4284:	49 07 0f 04 28 07 00 00 00 00 00 00 00 00 00 00     I...(...........
    4294:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    42a4:	48 07 0f 04 29 07 00 00 00 00 00 00 00 00 00 00     H...)...........
    42b4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    42c4:	47 07 0f 04 2a 07 00 00 00 00 00 00 00 00 00 00     G...*...........
    42d4:	6a 07 16 02 00 00 00 00 00 00 00 00 00 00 00 00     j...............
    42e4:	46 02 0f 04 07 02 04 07 20 02 00 00 00 00 00 00     F....... .......
    42f4:	69 02 17 04 00 00 00 00 00 00 00 00 00 00 00 00     i...............
    4304:	5b 04 04 07 21 04 00 00 00 00 00 00 00 00 00 00     [...!...........
    4314:	68 04 18 07 00 00 00 00 00 00 00 00 00 00 00 00     h...............
    4324:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4334:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4344:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4354:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4364:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4374:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4384:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4394:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    43a4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    43b4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    43c4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    43d4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    43e4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    43f4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4404:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4414:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4424:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4434:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4444:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4454:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4464:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4474:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4484:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4494:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    44a4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    44b4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    44c4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    44d4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    44e4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    44f4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4504:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4514:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4524:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4534:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4544:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4554:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4564:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4574:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4584:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4594:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    45a4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    45b4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    45c4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    45d4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    45e4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    45f4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4604:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4614:	50 07 30 02 00 00 00 00 00 00 00 00 00 00 00 00     P.0.............
    4624:	80 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4634:	4f 02 31 04 00 00 00 00 00 00 00 00 00 00 00 00     O.1.............
    4644:	80 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4654:	4e 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     N...............

00004664 <map_level_1>:
    4664:	01 ff 01 34 7e 06 00 00 00 00 00 00 00 00 00 00     ...4~...........
    4674:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4684:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4694:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    46a4:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    46b4:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    46c4:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    46d4:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    46e4:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    46f4:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4704:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4714:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4724:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4734:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4744:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4754:	7a 06 06 05 00 00 00 00 00 00 00 00 00 00 00 00     z...............
    4764:	80 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4774:	79 05 07 07 00 00 00 00 00 00 00 00 00 00 00 00     y...............
    4784:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4794:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    47a4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    47b4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    47c4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    47d4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    47e4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    47f4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4804:	32 07 07 02 47 07 00 00 00 00 00 00 00 00 00 00     2...G...........
    4814:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4824:	0f 07 07 02 6a 07 00 00 00 00 00 00 00 00 00 00     ....j...........
    4834:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4844:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4854:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4864:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4874:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4884:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4894:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    48a4:	25 07 07 02 54 07 00 00 00 00 00 00 00 00 00 00     %...T...........
    48b4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    48c4:	02 07 07 02 2b 07 07 02 45 07 00 00 00 00 00 00     ....+...E.......
    48d4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    48e4:	11 07 07 02 32 07 0f 02 27 07 00 00 00 00 00 00     ....2...'.......
    48f4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4904:	49 07 0f 04 28 07 00 00 00 00 00 00 00 00 00 00     I...(...........
    4914:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4924:	48 07 0f 04 29 07 00 00 00 00 00 00 00 00 00 00     H...)...........
    4934:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4944:	47 07 0f 04 2a 07 00 00 00 00 00 00 00 00 00 00     G...*...........
    4954:	6a 07 16 02 00 00 00 00 00 00 00 00 00 00 00 00     j...............
    4964:	46 02 0f 04 07 02 04 07 20 02 00 00 00 00 00 00     F....... .......
    4974:	69 02 17 04 00 00 00 00 00 00 00 00 00 00 00 00     i...............
    4984:	5b 04 04 07 21 04 00 00 00 00 00 00 00 00 00 00     [...!...........
    4994:	68 04 18 07 00 00 00 00 00 00 00 00 00 00 00 00     h...............
    49a4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    49b4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    49c4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    49d4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    49e4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    49f4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4a04:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4a14:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4a24:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4a34:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4a44:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4a54:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4a64:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4a74:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4a84:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4a94:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4aa4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4ab4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4ac4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4ad4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4ae4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4af4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4b04:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4b14:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4b24:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4b34:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4b44:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4b54:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4b64:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4b74:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4b84:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4b94:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4ba4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4bb4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4bc4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4bd4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4be4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4bf4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4c04:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4c14:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4c24:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4c34:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4c44:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4c54:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4c64:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4c74:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4c84:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4c94:	50 07 30 02 00 00 00 00 00 00 00 00 00 00 00 00     P.0.............
    4ca4:	80 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4cb4:	4f 02 31 04 00 00 00 00 00 00 00 00 00 00 00 00     O.1.............
    4cc4:	80 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4cd4:	4e 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     N...............

00004ce4 <map_level_0>:
    4ce4:	01 ff 01 34 7e 06 00 00 00 00 00 00 00 00 00 00     ...4~...........
    4cf4:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4d04:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4d14:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4d24:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4d34:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4d44:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4d54:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4d64:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4d74:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4d84:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4d94:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4da4:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4db4:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4dc4:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4dd4:	7a 06 06 05 00 00 00 00 00 00 00 00 00 00 00 00     z...............
    4de4:	80 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4df4:	79 05 07 07 00 00 00 00 00 00 00 00 00 00 00 00     y...............
    4e04:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4e14:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4e24:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4e34:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4e44:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4e54:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4e64:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4e74:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4e84:	32 07 07 02 47 07 00 00 00 00 00 00 00 00 00 00     2...G...........
    4e94:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4ea4:	0f 07 07 02 6a 07 00 00 00 00 00 00 00 00 00 00     ....j...........
    4eb4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4ec4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4ed4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4ee4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4ef4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4f04:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4f14:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4f24:	25 07 07 02 54 07 00 00 00 00 00 00 00 00 00 00     %...T...........
    4f34:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4f44:	02 07 07 02 2b 07 07 02 45 07 00 00 00 00 00 00     ....+...E.......
    4f54:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4f64:	11 07 07 02 32 07 0f 02 27 07 00 00 00 00 00 00     ....2...'.......
    4f74:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4f84:	49 07 0f 04 28 07 00 00 00 00 00 00 00 00 00 00     I...(...........
    4f94:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4fa4:	48 07 0f 04 29 07 00 00 00 00 00 00 00 00 00 00     H...)...........
    4fb4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4fc4:	47 07 0f 04 2a 07 00 00 00 00 00 00 00 00 00 00     G...*...........
    4fd4:	6a 07 16 02 00 00 00 00 00 00 00 00 00 00 00 00     j...............
    4fe4:	46 02 0f 04 07 02 04 07 20 02 00 00 00 00 00 00     F....... .......
    4ff4:	69 02 17 04 00 00 00 00 00 00 00 00 00 00 00 00     i...............
    5004:	5b 04 04 07 21 04 00 00 00 00 00 00 00 00 00 00     [...!...........
    5014:	68 04 18 07 00 00 00 00 00 00 00 00 00 00 00 00     h...............
    5024:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5034:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5044:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5054:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5064:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5074:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5084:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5094:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    50a4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    50b4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    50c4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    50d4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    50e4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    50f4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5104:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5114:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5124:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5134:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5144:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5154:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5164:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5174:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5184:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5194:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    51a4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    51b4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    51c4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    51d4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    51e4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    51f4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5204:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5214:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5224:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5234:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5244:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5254:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5264:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5274:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5284:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5294:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    52a4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    52b4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    52c4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    52d4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    52e4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    52f4:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5304:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5314:	50 07 30 02 00 00 00 00 00 00 00 00 00 00 00 00     P.0.............
    5324:	80 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5334:	4f 02 31 04 00 00 00 00 00 00 00 00 00 00 00 00     O.1.............
    5344:	80 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5354:	4e 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     N...............

00005364 <tiles_data>:
	...
    53a4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    53b4:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    53c4:	ff f8 fb f8 fb f8 f8 fd ff fb f8 f8 fb f8 f8 f8     ................
    53d4:	ff f8 f8 fb f8 f8 f8 f8 ff f8 f8 f8 f8 f8 f8 f8     ................
    53e4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    53f4:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    5404:	fd f8 fb f8 fb f8 f8 fd f8 fb f8 f8 fb f8 f8 f8     ................
    5414:	f8 f8 f8 fb f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    5424:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5434:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    5444:	fd f8 fb f8 fb f8 f8 ff f8 fb f8 f8 fb f8 f8 ff     ................
    5454:	f8 f8 f8 fb f8 f8 f8 ff f8 f8 f8 f8 f8 f8 f8 ff     ................
    5464:	fa f8 f8 f8 f8 f8 f8 f8 f8 f8 fb f8 f8 f8 fb f8     ................
    5474:	f8 f8 fb f8 fb fb f8 f8 f8 f8 f8 fb f8 f8 f8 f8     ................
    5484:	f8 f8 fb f8 fb f8 f8 f8 f8 fb f8 f8 fb f8 f8 f8     ................
    5494:	f8 f8 f8 fb f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    54a4:	ac ac ac ac ac ac ac ac ac ac ac ac ac ac ac ac     ................
    54b4:	ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad     ................
    54c4:	ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae     ................
    54d4:	af af af af af af af af af af af af af af af af     ................
    54e4:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    54f4:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    5504:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    5514:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    5524:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    5534:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    5544:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    5554:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    5564:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    5574:	ab ab ab ab ab ab ab ab ab ad ad ad ad ad ad ab     ................
    5584:	ae ae ae ae ae ae ae ae ab ae ae ae ae ae ae ab     ................
    5594:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
	...
    55bc:	00 00 00 e3 00 00 00 00 00 00 e3 ff e3 00 00 00     ................
    55cc:	00 00 00 e3 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    55fc:	00 00 00 d2 00 00 00 00 00 00 d2 e3 d2 00 00 00     ................
    560c:	00 00 00 d2 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5624:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    5634:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    5644:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    5654:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
	...
    5670:	00 00 96 96 00 00 00 00 00 96 96 96 00 00 00 00     ................
    5680:	96 96 96 96 00 00 00 96 96 96 96 96 00 00 96 96     ................
    5690:	96 96 96 96 00 00 96 96 96 96 96 96 00 96 96 96     ................
    56a0:	96 96 96 96 00 96 96 96 96 96 96 00 96 96 96 96     ................
    56b0:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    56c0:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    56d0:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    56e0:	96 96 96 96 00 00 00 00 00 00 00 00 96 96 00 00     ................
    56f0:	00 00 00 00 96 96 96 00 00 00 00 00 96 96 96 96     ................
    5700:	00 00 00 00 96 96 96 96 96 00 00 00 96 96 96 96     ................
    5710:	96 96 00 00 96 96 96 96 96 96 00 00 96 96 96 96     ................
    5720:	96 96 96 00 00 96 96 96 95 96 96 96 00 96 96 96     ................
    5730:	95 96 96 96 96 96 96 96 96 95 96 96 96 96 96 96     ................
    5740:	96 95 96 96 96 96 96 96 96 96 95 96 96 96 96 96     ................
    5750:	96 bf 95 96 95 84 96 96 96 bf 96 95 8c 83 83 8c     ................
    5760:	96 bf 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    5770:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    5780:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    5790:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    57a0:	96 96 96 96 96 96 96 95 96 96 96 00 96 96 96 95     ................
    57b0:	96 96 96 00 96 96 95 96 96 96 96 96 96 96 95 96     ................
    57c0:	96 96 96 96 96 95 96 96 96 96 96 96 96 95 96 96     ................
    57d0:	96 96 95 96 95 96 96 96 96 95 95 95 96 96 96 96     ................
    57e0:	94 8c 8c 95 82 82 82 82 82 bf 96 96 00 d8 d8 d8     ................
    57f0:	bf ff bf 82 00 d8 d8 bf ff ff ff bf 00 d8 bf ff     ................
    5800:	ff ff ff ff bf bf ff ff ff ff ff ff 00 00 bf ff     ................
    5810:	ff ff ff ff 00 00 94 bf ff ff ff bf 00 00 00 8c     ................
    5820:	bf ff bf d8 96 96 96 96 96 96 96 96 83 83 8c 8c     ................
    5830:	8c 8c 8c 83 d8 d8 d8 d8 d8 d8 d8 d8 bf d8 d8 d8     ................
    5840:	d8 d8 d8 d8 ff bf bf d8 d8 d8 d8 d8 bf d8 d8 d8     ................
    5850:	d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8     ................
    5860:	d8 d8 82 82 96 96 8c 83 83 8c 8c 8c 83 82 83 83     ................
    5870:	83 83 8c 00 82 82 82 83 83 83 83 00 82 82 82 83     ................
    5880:	83 83 83 00 d8 82 82 83 83 83 83 00 82 82 82 83     ................
    5890:	83 83 00 00 82 82 83 83 83 95 00 00 82 82 83 83     ................
    58a0:	95 00 00 00 40 40 40 40 40 40 40 40 40 40 40 40     ....@@@@@@@@@@@@
    58b0:	40 40 40 40 41 41 41 41 41 41 41 41 41 41 41 41     @@@@AAAAAAAAAAAA
    58c0:	41 41 41 41 42 42 42 42 42 42 42 42 42 42 42 42     AAAABBBBBBBBBBBB
    58d0:	42 42 42 42 43 43 43 43 43 43 43 43 43 43 43 43     BBBBCCCCCCCCCCCC
    58e0:	43 43 43 43 00 00 00 96 95 ff d8 d8 00 00 00 00     CCCC............
    58f0:	96 ff 83 82 00 00 00 00 00 ff 96 96 00 00 00 00     ................
    5900:	00 bf 96 96 00 00 00 00 00 bf 96 96 00 00 00 00     ................
    5910:	00 bf 96 96 00 00 00 00 00 bf 00 00 00 00 00 00     ................
    5920:	00 77 00 00 d8 d8 d8 82 82 82 82 82 82 82 82 82     .w..............
    5930:	82 83 83 83 8c 8c 83 83 83 83 8c 95 96 96 96 96     ................
    5940:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    5950:	96 96 96 96 96 96 96 96 96 96 96 96 00 96 96 96     ................
    5960:	96 96 96 00 83 83 8c 95 96 00 00 00 83 8c 96 96     ................
    5970:	00 00 00 00 96 96 96 00 00 00 00 00 96 96 96 00     ................
    5980:	00 00 00 00 96 96 00 00 00 00 00 00 96 96 00 00     ................
	...
    59a4:	44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44     DDDDDDDDDDDDDDDD
    59b4:	45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45     EEEEEEEEEEEEEEEE
    59c4:	46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46     FFFFFFFFFFFFFFFF
    59d4:	47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47     GGGGGGGGGGGGGGGG
    59e4:	00 00 00 00 00 77 00 00 00 00 00 00 00 77 00 00     .....w.......w..
    59f4:	00 00 00 00 00 77 00 00 00 00 00 00 00 77 00 00     .....w.......w..
    5a04:	00 00 00 00 00 77 00 00 00 00 00 00 00 77 00 00     .....w.......w..
	...
    5a2c:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    5a3c:	00 3f 3f 2f 3f 3f 3f 2f 00 3f 3f 3f 2f 3f 3f 2f     .??/???/.???/??/
    5a4c:	00 3f 3f 2f 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??/.??/..????/.
	...
    5a6c:	00 00 00 3f 3f 2f 00 00 00 00 3f 3f 3f 2f 00 00     ...??/....???/..
    5a7c:	00 00 00 3f 3f 2f 00 00 00 00 00 3f 3f 2f 00 00     ...??/.....??/..
    5a8c:	00 00 00 3f 3f 2f 00 00 00 3f 3f 3f 3f 3f 3f 2f     ...??/...??????/
	...
    5aac:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 00 00 3f 3f 2f     ..????/..??..??/
    5abc:	00 00 00 00 3f 3f 2f 00 00 00 00 3f 3f 2f 00 00     ....??/....??/..
    5acc:	00 00 3f 3f 2f 00 00 00 00 3f 3f 3f 3f 3f 3f 2f     ..??/....??????/
	...
    5aec:	00 3f 3f 3f 3f 3f 3f 2f 00 00 00 00 3f 3f 2f 00     .??????/....??/.
    5afc:	00 00 00 3f 3f 2f 00 00 00 00 00 00 3f 3f 2f 00     ...??/......??/.
    5b0c:	00 3f 3f 00 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??..??/..????/.
	...
    5b30:	3f 3f 2f 00 00 00 00 3f 3f 3f 2f 00 00 00 3f 3f     ??/....???/...??
    5b40:	3f 3f 2f 00 00 3f 3f 00 3f 3f 2f 00 00 3f 3f 3f     ??/..??.??/..???
    5b50:	3f 3f 3f 2f 00 00 00 00 3f 3f 2f 00 00 00 00 00     ???/....??/.....
	...
    5b6c:	00 3f 3f 3f 3f 3f 3f 2f 00 3f 3f 2f 00 00 00 00     .??????/.??/....
    5b7c:	00 3f 3f 3f 3f 3f 2f 00 00 00 00 00 00 3f 3f 2f     .?????/......??/
    5b8c:	00 3f 3f 00 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??..??/..????/.
	...
    5bac:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 00 00 00     ..????/..??/....
    5bbc:	00 3f 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     .?????/..??/.??/
    5bcc:	00 3f 3f 2f 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??/.??/..????/.
	...
    5bec:	00 3f 3f 3f 3f 3f 3f 2f 00 00 00 00 00 3f 3f 2f     .??????/.....??/
    5bfc:	00 00 00 00 3f 3f 2f 00 00 00 00 3f 3f 2f 00 00     ....??/....??/..
    5c0c:	00 00 3f 3f 2f 00 00 00 00 00 3f 3f 2f 00 00 00     ..??/.....??/...
	...
    5c2c:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    5c3c:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    5c4c:	00 3f 3f 2f 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??/.??/..????/.
	...
    5c6c:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    5c7c:	00 00 3f 3f 3f 3f 3f 2f 00 00 00 00 00 3f 3f 2f     ..?????/.....??/
    5c8c:	00 00 00 00 3f 3f 2f 00 00 00 3f 3f 3f 2f 00 00     ....??/...???/..
	...
    5cac:	00 00 00 ff ff e3 00 00 00 00 ff ff ff ff e3 00     ................
    5cbc:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    5ccc:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    5cec:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    5cfc:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    5d0c:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff e3 00     ................
	...
    5d2c:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    5d3c:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    5d4c:	00 ff ff e3 00 ff ff e3 00 00 ff ff ff ff e3 00     ................
	...
    5d6c:	00 ff ff ff ff e3 00 00 00 ff ff e3 ff ff e3 00     ................
    5d7c:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    5d8c:	00 ff ff e3 ff ff e3 00 00 ff ff ff ff e3 00 00     ................
	...
    5dac:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 00 00 00     ................
    5dbc:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 00 00 00     ................
    5dcc:	00 ff ff e3 00 00 00 00 00 ff ff ff ff ff ff e3     ................
	...
    5dec:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 00 00 00     ................
    5dfc:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 00 00 00     ................
    5e0c:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
	...
    5e2c:	00 00 ff ff ff ff ff e3 00 ff ff e3 00 00 00 00     ................
    5e3c:	00 ff ff e3 00 00 00 00 00 ff ff e3 ff ff ff e3     ................
    5e4c:	00 ff ff e3 00 ff ff e3 00 00 ff ff ff ff ff e3     ................
	...
    5e6c:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    5e7c:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 ff ff e3     ................
    5e8c:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    5eac:	00 ff ff ff ff ff ff e3 00 00 00 ff ff e3 00 00     ................
    5ebc:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
    5ecc:	00 00 00 ff ff e3 00 00 00 ff ff ff ff ff ff e3     ................
	...
    5ef0:	ff ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    5f00:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 ff ff 00     ................
    5f10:	00 ff ff e3 00 00 ff ff ff ff e3 00 00 00 00 00     ................
	...
    5f2c:	00 ff ff e3 00 ff ff e3 00 ff ff e3 ff ff e3 00     ................
    5f3c:	00 ff ff ff ff e3 00 00 00 ff ff ff ff e3 00 00     ................
    5f4c:	00 ff ff e3 ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
	...
    5f6c:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    5f7c:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    5f8c:	00 ff ff e3 00 00 00 00 00 ff ff ff ff ff ff e3     ................
	...
    5fac:	ff ff e3 00 00 ff ff e3 ff ff ff e3 ff ff ff e3     ................
    5fbc:	ff ff ff ff ff ff ff e3 ff ff e3 ff e3 ff ff e3     ................
    5fcc:	ff ff e3 00 00 ff ff e3 ff ff e3 00 00 ff ff e3     ................
	...
    5fec:	00 ff ff e3 00 ff ff e3 00 ff ff ff e3 ff ff e3     ................
    5ffc:	00 ff ff ff ff ff ff e3 00 ff ff ff ff ff ff e3     ................
    600c:	00 ff ff e3 ff ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    602c:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    603c:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    604c:	00 ff ff e3 00 ff ff e3 00 00 ff ff ff ff e3 00     ................
	...
    606c:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    607c:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff e3 00     ................
    608c:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
	...
    60ac:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    60bc:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    60cc:	00 ff ff e3 ff ff e3 00 00 00 ff ff e3 ff ff e3     ................
	...
    60ec:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    60fc:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff e3 00     ................
    610c:	00 ff ff e3 ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
	...
    612c:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 00 00 00     ................
    613c:	00 00 ff ff ff ff e3 00 00 00 00 00 00 ff ff e3     ................
    614c:	00 00 00 00 00 ff ff e3 00 00 ff ff ff ff e3 00     ................
	...
    616c:	00 ff ff ff ff ff ff e3 00 00 00 ff ff e3 00 00     ................
    617c:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
    618c:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
	...
    61ac:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    61bc:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    61cc:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff ff e3     ................
	...
    61ec:	00 ff ff 00 00 ff ff e3 00 ff ff 00 00 ff ff e3     ................
    61fc:	00 ff ff 00 00 ff ff e3 00 ff ff 00 00 ff ff e3     ................
    620c:	00 00 ff ff ff ff e3 00 00 00 00 ff ff e3 00 00     ................
	...
    622c:	ff ff e3 00 00 ff ff e3 ff ff e3 00 00 ff ff e3     ................
    623c:	ff ff e3 ff e3 ff ff e3 ff ff ff ff ff ff ff e3     ................
    624c:	ff ff ff e3 ff ff ff e3 ff ff e3 00 00 ff ff e3     ................
	...
    626c:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    627c:	00 00 ff ff ff ff e3 00 00 00 ff ff ff ff e3 00     ................
    628c:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    62ac:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    62bc:	00 00 ff ff ff ff e3 00 00 00 00 ff ff e3 00 00     ................
    62cc:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
	...
    62ec:	00 ff ff ff ff ff ff e3 00 00 00 00 ff ff e3 00     ................
    62fc:	00 00 00 ff ff e3 00 00 00 00 ff ff e3 00 00 00     ................
    630c:	00 ff ff e3 00 00 00 00 00 ff ff ff ff ff ff e3     ................
	...

00006324 <map_font>:
    6324:	25 01 00 1b 1c 1d 1e 1f 20 21 22 23 24 25 26 27     %....... !"#$%&'
    6334:	28 29 2a 2b 2c 2d 2e 2f 30 31 32 33 34 35 36 37     ()*+,-./01234567
    6344:	38 39 3a 3b 3c 3d 3e                                89:;<=>

0000634b <map_atmosphere>:
    634b:	1c 02 15 15 15 15 15 15 15 15 15 15 15 15 15 15     ................
    635b:	15 15 15 15 15 15 15 15 15 15 15 15 15 15 19 19     ................
    636b:	19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19     ................
    637b:	19 19 19 19 19 19 19 19 19 19                       ..........

00006385 <map_star_dark>:
    6385:	01 01 0a                                            ...

00006388 <map_star>:
    6388:	01 01 09                                            ...

0000638b <map_ice_cloud>:
    638b:	01 01 08                                            ...

0000638e <map_ice_far>:
    638e:	01 01 07                                            ...

00006391 <map_ice_sky>:
    6391:	01 01 06                                            ...

00006394 <map_ice_horizon>:
    6394:	01 01 05                                            ...

00006397 <map_ice_bottom>:
    6397:	01 01 04                                            ...

0000639a <map_ice_right>:
    639a:	01 01 03                                            ...

0000639d <map_ice_middle>:
    639d:	01 01 02                                            ...

000063a0 <map_ice_left>:
    63a0:	01 01 01                                            ...

000063a3 <map_splash>:
    63a3:	0f 05 0b 0b 0b 00 0b 0b 0b 00 0c 0d 0e 09 0b 0b     ................
    63b3:	0b 00 0b 00 00 0b 0a 00 00 0f 10 11 00 0b 00 09     ................
    63c3:	0a 0b 00 09 0b 00 00 00 12 13 14 00 0b 0b 0b 00     ................
    63d3:	0b 00 00 0b 00 09 00 16 17 18 00 00 00 0b 0b 0b     ................
    63e3:	0b 00 0b 00 00 00 1a 00 0a 00 0b 0b 0b              .............

000063f0 <map_tile_none>:
    63f0:	01 01 00 00                                         ....

000063f4 <__ctors_end>:
    63f4:	11 24       	eor	r1, r1
    63f6:	1f be       	out	0x3f, r1	; 63
    63f8:	cf ef       	ldi	r28, 0xFF	; 255
    63fa:	d0 e1       	ldi	r29, 0x10	; 16
    63fc:	de bf       	out	0x3e, r29	; 62
    63fe:	cd bf       	out	0x3d, r28	; 61

00006400 <__do_copy_data>:
    6400:	15 e0       	ldi	r17, 0x05	; 5
    6402:	a0 e0       	ldi	r26, 0x00	; 0
    6404:	b5 e0       	ldi	r27, 0x05	; 5
    6406:	ea e0       	ldi	r30, 0x0A	; 10
    6408:	fb eb       	ldi	r31, 0xBB	; 187
    640a:	02 c0       	rjmp	.+4      	; 0x6410 <__do_copy_data+0x10>
    640c:	05 90       	lpm	r0, Z+
    640e:	0d 92       	st	X+, r0
    6410:	a2 30       	cpi	r26, 0x02	; 2
    6412:	b1 07       	cpc	r27, r17
    6414:	d9 f7       	brne	.-10     	; 0x640c <__do_copy_data+0xc>

00006416 <__do_clear_bss>:
    6416:	1f e0       	ldi	r17, 0x0F	; 15
    6418:	a2 e0       	ldi	r26, 0x02	; 2
    641a:	b5 e0       	ldi	r27, 0x05	; 5
    641c:	01 c0       	rjmp	.+2      	; 0x6420 <.do_clear_bss_start>

0000641e <.do_clear_bss_loop>:
    641e:	1d 92       	st	X+, r1

00006420 <.do_clear_bss_start>:
    6420:	a4 3f       	cpi	r26, 0xF4	; 244
    6422:	b1 07       	cpc	r27, r17
    6424:	e1 f7       	brne	.-8      	; 0x641e <.do_clear_bss_loop>

00006426 <wdt_init>:

void wdt_init(void)
{

#if TRUE_RANDOM_GEN == 1	
	wdt_randomize();
    6426:	0e 94 ae 37 	call	0x6f5c	; 0x6f5c <wdt_randomize>
#endif

    MCUSR = 0;
    642a:	14 be       	out	0x34, r1	; 52
    wdt_disable();
    642c:	88 e1       	ldi	r24, 0x18	; 24
    642e:	0f b6       	in	r0, 0x3f	; 63
    6430:	f8 94       	cli
    6432:	80 93 60 00 	sts	0x0060, r24
    6436:	10 92 60 00 	sts	0x0060, r1
    643a:	0f be       	out	0x3f, r0	; 63

0000643c <Initialize>:


void Initialize(void){
	int i;

	if(!isEepromFormatted()) FormatEeprom();
    643c:	0e 94 6b 38 	call	0x70d6	; 0x70d6 <isEepromFormatted>
    6440:	81 11       	cpse	r24, r1
    6442:	02 c0       	rjmp	.+4      	; 0x6448 <Initialize+0xc>
    6444:	0e 94 49 38 	call	0x7092	; 0x7092 <FormatEeprom>

	cli();
    6448:	f8 94       	cli
		mix_bank=0;
	#endif
	
	#if MIXER_CHAN4_TYPE == 0
		//initialize LFSR		
		tr4_barrel_lo=1;
    644a:	81 e0       	ldi	r24, 0x01	; 1
    644c:	80 93 cc 0c 	sts	0x0CCC, r24
		tr4_barrel_hi=1;		
    6450:	80 93 cd 0c 	sts	0x0CCD, r24
		tr4_params=0b00000001; //15 bits no divider (1)
    6454:	80 93 cb 0c 	sts	0x0CCB, r24
		snesMouseEnabled=false;
	#endif

	//silence all sound channels
	for(i=0;i<CHANNELS;i++){
		mixer.channels.all[i].volume=0;
    6458:	10 92 b8 0c 	sts	0x0CB8, r1
    645c:	10 92 be 0c 	sts	0x0CBE, r1
    6460:	10 92 c4 0c 	sts	0x0CC4, r1
    6464:	10 92 ca 0c 	sts	0x0CCA, r1
    6468:	10 92 d0 0c 	sts	0x0CD0, r1
	}
	
	//set sync parameters. starts at odd field, in pre-eq pulses, line 1, vsync flag cleared
	sync_phase=0;
    646c:	10 92 a0 0c 	sts	0x0CA0, r1
	sync_flags=0;
    6470:	10 92 a2 0c 	sts	0x0CA2, r1
	sync_pulse=SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES;
    6474:	92 e1       	ldi	r25, 0x12	; 18
    6476:	90 93 a1 0c 	sts	0x0CA1, r25

	//set rendering parameters
	render_lines_count=FRAME_LINES;
    647a:	90 ee       	ldi	r25, 0xE0	; 224
    647c:	90 93 a8 0c 	sts	0x0CA8, r25
	first_render_line=FIRST_RENDER_LINE;
    6480:	94 e1       	ldi	r25, 0x14	; 20
    6482:	90 93 a7 0c 	sts	0x0CA7, r25

	joypad1_status_hi=0;
    6486:	10 92 ac 0c 	sts	0x0CAC, r1
    648a:	10 92 ab 0c 	sts	0x0CAB, r1
	joypad2_status_hi=0;
    648e:	10 92 b0 0c 	sts	0x0CB0, r1
    6492:	10 92 af 0c 	sts	0x0CAF, r1
	sound_enabled=1;
    6496:	80 93 b7 0c 	sts	0x0CB7, r24

	InitializeVideoMode();
    649a:	0e 94 4d 45 	call	0x8a9a	; 0x8a9a <InitializeVideoMode>
    649e:	80 e7       	ldi	r24, 0x70	; 112
    64a0:	90 e0       	ldi	r25, 0x00	; 0
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
		val=pgm_read_word(&io_table[j]);
    64a2:	fc 01       	movw	r30, r24
    64a4:	25 91       	lpm	r18, Z+
    64a6:	34 91       	lpm	r19, Z
		ptr=(u8*)(val&0xff);
    64a8:	f9 01       	movw	r30, r18
    64aa:	ff 27       	eor	r31, r31
		*ptr=val>>8;	
    64ac:	30 83       	st	Z, r19
    64ae:	02 96       	adiw	r24, 0x02	; 2
	InitializeVideoMode();
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
    64b0:	20 e0       	ldi	r18, 0x00	; 0
    64b2:	8e 39       	cpi	r24, 0x9E	; 158
    64b4:	92 07       	cpc	r25, r18
    64b6:	a9 f7       	brne	.-22     	; 0x64a2 <Initialize+0x66>
		val=pgm_read_word(&io_table[j]);
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;	
	}

	sei();
    64b8:	78 94       	sei
	
	DisplayLogo();
    64ba:	0e 94 c0 45 	call	0x8b80	; 0x8b80 <DisplayLogo>
    64be:	0e 94 49 5b 	call	0xb692	; 0xb692 <main>
    64c2:	0c 94 83 5d 	jmp	0xbb06	; 0xbb06 <_exit>

000064c6 <__bad_interrupt>:
    64c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000064ca <sub_video_mode3>:
	;***************************************************

	sub_video_mode3:
		;de-activate sync timer interrupts
		;we will need to use the I flag to branch in a critical loop
		ldi ZL,(0<<OCIE1A)
    64ca:	e0 e0       	ldi	r30, 0x00	; 0
		sts _SFR_MEM_ADDR(TIMSK1),ZL
    64cc:	e0 93 6f 00 	sts	0x006F, r30

		;wait cycles to align with next hsync
		WAIT r26,183+241
    64d0:	ad e8       	ldi	r26, 0x8D	; 141
    64d2:	aa 95       	dec	r26
    64d4:	f1 f7       	brne	.-4      	; 0x64d2 <sub_video_mode3+0x8>
    64d6:	00 00       	nop

		;Refresh ramtiles indexes in VRAM
		;This has to be done because the main
		;program may have altered the VRAM
		;after vsync and the rendering interrupt.
		lds r16,userRamTilesCount
    64d8:	00 91 db 0c 	lds	r16, 0x0CDB

		ldi ZL,lo8(ram_tiles_restore);
    64dc:	ea e3       	ldi	r30, 0x3A	; 58
		ldi ZH,hi8(ram_tiles_restore);
    64de:	fc e0       	ldi	r31, 0x0C	; 12
		ldi r18,3
    64e0:	23 e0       	ldi	r18, 0x03	; 3
		mul r16,r18
    64e2:	02 9f       	mul	r16, r18
		add ZL,r0
    64e4:	e0 0d       	add	r30, r0
		adc ZH,r1
    64e6:	f1 1d       	adc	r31, r1

		ldi YL,lo8(vram)
    64e8:	c0 e0       	ldi	r28, 0x00	; 0
		ldi YH,hi8(vram)
    64ea:	d1 e0       	ldi	r29, 0x01	; 1

		lds r18,free_tile_index
    64ec:	20 91 69 0d 	lds	r18, 0x0D69
		ldi r19,MAX_RAMTILES		;maximum possible ramtiles
    64f0:	3c e3       	ldi	r19, 0x3C	; 60
		sub r19,r18					;sub free tile
    64f2:	32 1b       	sub	r19, r18
		add r19,r16					;add user tiles
    64f4:	30 0f       	add	r19, r16

		cp r18,r16
    64f6:	20 17       	cp	r18, r16
		breq no_ramtiles
    64f8:	51 f0       	breq	.+20     	; 0x650e <no_ramtiles>
		nop
    64fa:	00 00       	nop
	...

000064fe <upd_loop>:
		nop
upd_loop:
		ld XL,Z+	;load vram offset of ramtile
    64fe:	a1 91       	ld	r26, Z+
		ld XH,Z+
    6500:	b1 91       	ld	r27, Z+

		ld r17,X	;get latest VRAM tile that may have been modified my
    6502:	1c 91       	ld	r17, X
		st Z+,r17	;the main program and store it in the restore buffer
    6504:	11 93       	st	Z+, r17
		st X,r16	;write the ramtile index back to vram
    6506:	0c 93       	st	X, r16

		inc r16
    6508:	03 95       	inc	r16
		cp r16,r18
    650a:	02 17       	cp	r16, r18
		brlo upd_loop ;loop is 14 cycles
    650c:	c0 f3       	brcs	.-16     	; 0x64fe <upd_loop>

0000650e <no_ramtiles>:

no_ramtiles:
		;wait for remaining maximum possible ramtiles
1:
		ldi r17,3
    650e:	13 e0       	ldi	r17, 0x03	; 3
		dec r17
    6510:	1a 95       	dec	r17
		brne .-4
    6512:	f1 f7       	brne	.-4      	; 0x6510 <no_ramtiles+0x2>
		rjmp .
    6514:	00 c0       	rjmp	.+0      	; 0x6516 <no_ramtiles+0x8>
		dec r19
    6516:	3a 95       	dec	r19
		brne 1b
    6518:	d1 f7       	brne	.-12     	; 0x650e <no_ramtiles>

		;**********************
		; setup scroll stuff
		;**********************
	
		ldi YL,lo8(vram)
    651a:	c0 e0       	ldi	r28, 0x00	; 0
		ldi YH,hi8(vram)
    651c:	d1 e0       	ldi	r29, 0x01	; 1

		//add X scroll (coarse)
		lds r18,screen_scrollX ;ScreenScrollX
    651e:	20 91 9c 0c 	lds	r18, 0x0C9C
		mov r25,r18
    6522:	92 2f       	mov	r25, r18
		andi r18,0xf8	;(x>>3) * 8 interleave
    6524:	28 7f       	andi	r18, 0xF8	; 248
		add YL,r18
    6526:	c2 0f       	add	r28, r18

		;save Y wrap adress 
		movw r12,YL
    6528:	6e 01       	movw	r12, r28
	

		//add Y scroll (coarse)
		lds r16,screen_scrollY ;ScreenScrollY
    652a:	00 91 9d 0c 	lds	r16, 0x0C9D
		mov r22,r16
    652e:	60 2f       	mov	r22, r16
		lsr r16
    6530:	06 95       	lsr	r16
		lsr r16
    6532:	06 95       	lsr	r16
		lsr r16 ;/8
    6534:	06 95       	lsr	r16

        lds r17,screen_scrollHeight
    6536:	10 91 9e 0c 	lds	r17, 0x0C9E
        sub r17,r16
    653a:	10 1b       	sub	r17, r16
        mov r15,r17 ;Y tiles to draw before wrapping
    653c:	f1 2e       	mov	r15, r17

        mov r17,r16
    653e:	10 2f       	mov	r17, r16
        lsr r16
    6540:	06 95       	lsr	r16
        lsr r16
    6542:	06 95       	lsr	r16
        lsr r16 ;/8
    6544:	06 95       	lsr	r16
		add YH,r16      ; (bits 6-7)
    6546:	d0 0f       	add	r29, r16
		andi r17,0x7
    6548:	17 70       	andi	r17, 0x07	; 7
        add YL,r17      ;interleave (bits 3-5)
    654a:	c1 0f       	add	r28, r17
        andi r22,0x7    ;fine Y scrolling (bits 0-2)
    654c:	67 70       	andi	r22, 0x07	; 7
		;lds r20,tile_table_lo
		;lds r21,tile_table_hi
		;out _SFR_IO_ADDR(GPIOR1),r20 ;store for later
		;out _SFR_IO_ADDR(GPIOR2),r21

		lds r20,overlay_tile_table
    654e:	40 91 9a 0c 	lds	r20, 0x0C9A
		lds r21,overlay_tile_table+1
    6552:	50 91 9b 0c 	lds	r21, 0x0C9B
		lds r6,tile_table_lo
    6556:	60 90 96 0c 	lds	r6, 0x0C96
		lds r7,tile_table_hi
    655a:	70 90 97 0c 	lds	r7, 0x0C97
		out _SFR_IO_ADDR(GPIOR1),r6 ;store for later
    655e:	6a bc       	out	0x2a, r6	; 42
		out _SFR_IO_ADDR(GPIOR2),r7
    6560:	7b bc       	out	0x2b, r7	; 43


		;save main section value	
		movw r10,YL
    6562:	5e 01       	movw	r10, r28
		mov r23,r22
    6564:	76 2f       	mov	r23, r22
		mov r24,r15
    6566:	8f 2d       	mov	r24, r15
		mov r9,r25
    6568:	99 2e       	mov	r9, r25

		;load values for overlay if it's activated (overlay_height>0)
		
		;compute beginning of overlay in vram 
		lds r16,screen_scrollHeight
    656a:	00 91 9e 0c 	lds	r16, 0x0C9E
		mov r18,r16
    656e:	20 2f       	mov	r18, r16
		lsr r16
    6570:	06 95       	lsr	r16
		lsr r16
    6572:	06 95       	lsr	r16
		lsr r16			;hi8
    6574:	06 95       	lsr	r16
		inc r16			;add 0x100 ram offset
    6576:	03 95       	inc	r16
		andi r18,7		;lo8
    6578:	27 70       	andi	r18, 0x07	; 7
		
		lds r19,overlay_height	
    657a:	30 91 99 0c 	lds	r19, 0x0C99
		cpi r19,0
    657e:	30 30       	cpi	r19, 0x00	; 0
		in r0, _SFR_IO_ADDR(SREG)
    6580:	0f b6       	in	r0, 0x3f	; 63

		sbrs r0,SREG_Z
    6582:	01 fe       	sbrs	r0, 1
		clr r22
    6584:	66 27       	eor	r22, r22
		sbrs r0,SREG_Z
    6586:	01 fe       	sbrs	r0, 1
		mov YL,r18		;lo8(overlay_vram)
    6588:	c2 2f       	mov	r28, r18
		sbrs r0,SREG_Z
    658a:	01 fe       	sbrs	r0, 1
		mov YH,r16		;hi8(overlay_vram)
    658c:	d0 2f       	mov	r29, r16
		sbrs r0,SREG_Z
    658e:	01 fe       	sbrs	r0, 1
		ser r24
    6590:	8f ef       	ldi	r24, 0xFF	; 255
		sbrs r0,SREG_Z
    6592:	01 fe       	sbrs	r0, 1
		clr r9
    6594:	99 24       	eor	r9, r9

		sbrs r0,SREG_Z
    6596:	01 fe       	sbrs	r0, 1
		out _SFR_IO_ADDR(GPIOR1),r20
    6598:	4a bd       	out	0x2a, r20	; 42
		sbrs r0,SREG_Z
    659a:	01 fe       	sbrs	r0, 1
		out _SFR_IO_ADDR(GPIOR2),r21
    659c:	5b bd       	out	0x2b, r21	; 43


		//ldi r16,SCREEN_TILES_V*TILE_HEIGHT; total scanlines to draw
		//mov r8,r16
		lds r8,render_lines_count ;total scanlines to draw
    659e:	80 90 a8 0c 	lds	r8, 0x0CA8

000065a2 <next_tile_line>:
	;r23 = Main section tile row
	;r24 = Current Y tiles to draw before wrapping
	;r25 = Main section scrollX

	next_tile_line:
		rcall hsync_pulse
    65a2:	bc d3       	rcall	.+1912   	; 0x6d1c <hsync_pulse>

		WAIT r18,HSYNC_USABLE_CYCLES - AUDIO_OUT_HSYNC_CYCLES
    65a4:	24 e0       	ldi	r18, 0x04	; 4
    65a6:	2a 95       	dec	r18
    65a8:	f1 f7       	brne	.-4      	; 0x65a6 <next_tile_line+0x4>
    65aa:	00 00       	nop
				
		call render_tile_line
    65ac:	0e 94 17 33 	call	0x662e	; 0x662e <render_tile_line>

		WAIT r18,58
    65b0:	23 e1       	ldi	r18, 0x13	; 19
    65b2:	2a 95       	dec	r18
    65b4:	f1 f7       	brne	.-4      	; 0x65b2 <next_tile_line+0x10>
    65b6:	00 00       	nop

		inc r22
    65b8:	63 95       	inc	r22
		dec r8
    65ba:	8a 94       	dec	r8
		breq text_frame_end
    65bc:	09 f1       	breq	.+66     	; 0x6600 <text_frame_end>

		cpi r22,TILE_HEIGHT ;last char line? 1
    65be:	68 30       	cpi	r22, 0x08	; 8
		breq next_tile_row
    65c0:	29 f0       	breq	.+10     	; 0x65cc <next_tile_row>

		;wait to align with next_tile_row instructions (+1 cycle for the breq)
		WAIT r16,25
    65c2:	08 e0       	ldi	r16, 0x08	; 8
    65c4:	0a 95       	dec	r16
    65c6:	f1 f7       	brne	.-4      	; 0x65c4 <next_tile_line+0x22>
    65c8:	00 00       	nop
		rjmp next_tile_line
    65ca:	eb cf       	rjmp	.-42     	; 0x65a2 <next_tile_line>

000065cc <next_tile_row>:

	next_tile_row:

		clr r22		;clear current char line
    65cc:	66 27       	eor	r22, r22

		;increment vram pointer next row
		mov r16,YL
    65ce:	0c 2f       	mov	r16, r28
		andi r16,0x7
    65d0:	07 70       	andi	r16, 0x07	; 7
		cpi r16,7
    65d2:	07 30       	cpi	r16, 0x07	; 7
		breq 1f
    65d4:	11 f0       	breq	.+4      	; 0x65da <next_tile_row+0xe>
		inc YL
    65d6:	c3 95       	inc	r28
		rjmp 2f
    65d8:	02 c0       	rjmp	.+4      	; 0x65de <next_tile_row+0x12>
	1:
		andi YL,0xf8
    65da:	c8 7f       	andi	r28, 0xF8	; 248
		inc YH
    65dc:	d3 95       	inc	r29
	2:

		dec r24		;wrap section?
    65de:	8a 95       	dec	r24
		brne .+2
    65e0:	09 f4       	brne	.+2      	; 0x65e4 <next_tile_row+0x18>
		movw YL,r12
    65e2:	e6 01       	movw	r28, r12

		dec r19
    65e4:	3a 95       	dec	r19
		brne .+2
    65e6:	09 f4       	brne	.+2      	; 0x65ea <next_tile_row+0x1e>
		mov r22,r23	;section tile row
    65e8:	67 2f       	mov	r22, r23
		brne .+2
    65ea:	09 f4       	brne	.+2      	; 0x65ee <next_tile_row+0x22>
		movw YL,r10 ;vram adress
    65ec:	e5 01       	movw	r28, r10
		brne .+2
    65ee:	09 f4       	brne	.+2      	; 0x65f2 <next_tile_row+0x26>
		mov r24,r15 ;Y wrapping
    65f0:	8f 2d       	mov	r24, r15
		brne .+2
    65f2:	09 f4       	brne	.+2      	; 0x65f6 <next_tile_row+0x2a>
		mov r9,r25  ;scrollX
    65f4:	99 2e       	mov	r9, r25

		brne .+2
    65f6:	09 f4       	brne	.+2      	; 0x65fa <next_tile_row+0x2e>
		out _SFR_IO_ADDR(GPIOR1),r6  ;tileset
    65f8:	6a bc       	out	0x2a, r6	; 42
		brne .+2
    65fa:	09 f4       	brne	.+2      	; 0x65fe <next_tile_row+0x32>
		out _SFR_IO_ADDR(GPIOR2),r7  ;tilset
    65fc:	7b bc       	out	0x2b, r7	; 43

		rjmp next_tile_line
    65fe:	d1 cf       	rjmp	.-94     	; 0x65a2 <next_tile_line>

00006600 <text_frame_end>:

	text_frame_end:

		WAIT r18,28
    6600:	29 e0       	ldi	r18, 0x09	; 9
    6602:	2a 95       	dec	r18
    6604:	f1 f7       	brne	.-4      	; 0x6602 <text_frame_end+0x2>
    6606:	00 00       	nop

		rcall hsync_pulse ;145
    6608:	89 d3       	rcall	.+1810   	; 0x6d1c <hsync_pulse>
	
		clr r1
    660a:	11 24       	eor	r1, r1
		call RestoreBackground
    660c:	0e 94 00 44 	call	0x8800	; 0x8800 <RestoreBackground>

		;set vsync flag & flip field
		lds ZL,sync_flags
    6610:	e0 91 a2 0c 	lds	r30, 0x0CA2
		ldi r20,SYNC_FLAG_FIELD
    6614:	42 e0       	ldi	r20, 0x02	; 2
		ori ZL,SYNC_FLAG_VSYNC
    6616:	e1 60       	ori	r30, 0x01	; 1
		eor ZL,r20
    6618:	e4 27       	eor	r30, r20
		sts sync_flags,ZL
    661a:	e0 93 a2 0c 	sts	0x0CA2, r30
	
		cli 
    661e:	f8 94       	cli

		;re-activate sync timer interrupts
		ldi ZL,(1<<OCIE1A)
    6620:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIMSK1),ZL
    6622:	e0 93 6f 00 	sts	0x006F, r30
			
		;clear any pending timer int
		ldi ZL,(1<<OCF1A)
    6626:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIFR1),ZL
    6628:	e0 93 36 00 	sts	0x0036, r30

		ret
    662c:	08 95       	ret

0000662e <render_tile_line>:
	; Can destroy: r0,r1,r2,r3,r4,r5,r6,r7,r13,r16,r17,r18,r19,r20,r21,Z
	; 
	; cycles  = 1495
	;*************************************************
	render_tile_line:
		push YL
    662e:	cf 93       	push	r28
		push YH
    6630:	df 93       	push	r29
		push r23
    6632:	7f 93       	push	r23
		push r22
    6634:	6f 93       	push	r22
		push r19
    6636:	3f 93       	push	r19
		push r13
    6638:	df 92       	push	r13
		push r12
    663a:	cf 92       	push	r12
		push r9
    663c:	9f 92       	push	r9
		push r7
    663e:	7f 92       	push	r7
		push r6
    6640:	6f 92       	push	r6
		;--------------------------
		; Rendering 
		;---------------------------

		;get tile row offset
		ldi r23,TILE_WIDTH ;tile width in pixels
    6642:	78 e0       	ldi	r23, 0x08	; 8
		mul r22,r23
    6644:	67 9f       	mul	r22, r23

		;compute base adresses for ROM and RAM tiles
		in r16,_SFR_IO_ADDR(GPIOR1) ;tile_table_lo
    6646:	0a b5       	in	r16, 0x2a	; 42
		in r17,_SFR_IO_ADDR(GPIOR2) ;tile_table_hi
    6648:	1b b5       	in	r17, 0x2b	; 43
		subi r16,lo8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    664a:	00 50       	subi	r16, 0x00	; 0
		sbci r17,hi8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    664c:	17 40       	sbci	r17, 0x07	; 7

		add r16,r0
    664e:	00 0d       	add	r16, r0
		adc r17,r1
    6650:	11 1d       	adc	r17, r1
		movw r2,r16			;rom tiles adress
    6652:	18 01       	movw	r2, r16

		ldi r16,lo8(ram_tiles)
    6654:	0a e3       	ldi	r16, 0x3A	; 58
		ldi r17,hi8(ram_tiles)
    6656:	15 e0       	ldi	r17, 0x05	; 5
		add r16,r0
    6658:	00 0d       	add	r16, r0
		adc r17,r1
    665a:	11 1d       	adc	r17, r1
		movw r4,r16			;ram tiles adress
    665c:	28 01       	movw	r4, r16

		ldi r19,TILE_HEIGHT*TILE_WIDTH
    665e:	30 e4       	ldi	r19, 0x40	; 64
		ldi r17,SCREEN_TILES_H-1	;main loop counter
    6660:	1b e1       	ldi	r17, 0x1B	; 27


		;handle fine scroll offset
		;lds r22,screenSections+scrollX
		mov r22,r9
    6662:	69 2d       	mov	r22, r9
		andi r22,0x7		
    6664:	67 70       	andi	r22, 0x07	; 7
		mov r14,r22	;pixels to draw on last tile	
    6666:	e6 2e       	mov	r14, r22
		cli			;no trailing pixel to draw (hack, see end: )
    6668:	f8 94       	cli
		breq .+2
    666a:	09 f0       	breq	.+2      	; 0x666e <render_tile_line+0x40>
		sei			;some trailing pixel to draw (hack, see end: )
    666c:	78 94       	sei

		;get first pixel of last tile in ROM (for ROM tiles fine scroll)
		;and adress of next pixel
		movw ZL,YL
    666e:	fe 01       	movw	r30, r28
		subi ZL,-(SCREEN_TILES_H*8)
    6670:	e0 52       	subi	r30, 0x20	; 32
		ld r18,Z
    6672:	20 81       	ld	r18, Z
		mul r18,r19 	;tile*width*height
    6674:	23 9f       	mul	r18, r19
	    add r0,r2    ;add ROM title table address +row offset
    6676:	02 0c       	add	r0, r2
	    adc r1,r3
    6678:	13 1c       	adc	r1, r3
		movw ZL,r0
    667a:	f0 01       	movw	r30, r0
		lpm r9,Z+	;hold first pixel until end 
    667c:	95 90       	lpm	r9, Z+
		movw r12,ZL ;hold second pixel adress until end
    667e:	6f 01       	movw	r12, r30


		;compute first tile adress
	    ld r18,Y     	;load next tile # from VRAM
    6680:	28 81       	ld	r18, Y
		subi YL,-8
    6682:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT
    6684:	2c 31       	cpi	r18, 0x1C	; 28
		in r16,_SFR_IO_ADDR(SREG)	;save the carry flag for later	
    6686:	0f b7       	in	r16, 0x3f	; 63
		mul r18,r19 	;tile*width*height
    6688:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles	
    668a:	a1 01       	movw	r20, r2
		sbrc r16,SREG_C
    668c:	00 fd       	sbrc	r16, 0
		movw r20,r4		;ram tiles
    668e:	a2 01       	movw	r20, r4
	    add r0,r20    ;add title table address +row offset
    6690:	04 0e       	add	r0, r20
	    adc r1,r21
    6692:	15 1e       	adc	r1, r21
		movw XL,r0
    6694:	d0 01       	movw	r26, r0


		;compute second tile adress
	    ld r18,Y     	;load next tile # from VRAM
    6696:	28 81       	ld	r18, Y
		subi YL,-8
    6698:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT
    669a:	2c 31       	cpi	r18, 0x1C	; 28
		in r7,_SFR_IO_ADDR(SREG)	;save the carry flag for later
    669c:	7f b6       	in	r7, 0x3f	; 63
		bst r7,SREG_C
    669e:	70 fa       	bst	r7, 0
		mul r18,r19 	;tile*width*height
    66a0:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles
    66a2:	a1 01       	movw	r20, r2
		brtc .+2
    66a4:	0e f4       	brtc	.+2      	; 0x66a8 <render_tile_line+0x7a>
		movw r20,r4		;ram tiles
    66a6:	a2 01       	movw	r20, r4
	    add r0,r20      ;add title table address +row offset
    66a8:	04 0e       	add	r0, r20
	    adc r1,r21
    66aa:	15 1e       	adc	r1, r21
		movw ZL,r0
    66ac:	f0 01       	movw	r30, r0
		movw r6,ZL		;push Z
    66ae:	3f 01       	movw	r6, r30

000066b0 <do_fine_scroll>:


	do_fine_scroll:
		;output 1st tile with fine scroll offset 
		clr r0
    66b0:	00 24       	eor	r0, r0
		add XL,r22	;add fine offset
    66b2:	a6 0f       	add	r26, r22
		adc XH,r0
    66b4:	b0 1d       	adc	r27, r0

		;compute jump offset
		ldi r23,3
    66b6:	73 e0       	ldi	r23, 0x03	; 3
		mul r22,r23 ;3 instructions
    66b8:	67 9f       	mul	r22, r23
	
		sbrs r16,SREG_C
    66ba:	00 ff       	sbrs	r16, 0
		rjmp rom_fine_scroll
    66bc:	22 c0       	rjmp	.+68     	; 0x6702 <rom_fine_scroll>

000066be <ram_fine_scroll>:

	/***FINE SCROLL RAM LOOP***/
	ram_fine_scroll:
		rjmp .
    66be:	00 c0       	rjmp	.+0      	; 0x66c0 <ram_fine_scroll+0x2>
		ldi r22,lo8(pm(ram_fine_scroll_loop))
    66c0:	67 e6       	ldi	r22, 0x67	; 103
		ldi r23,hi8(pm(ram_fine_scroll_loop))
    66c2:	73 e3       	ldi	r23, 0x33	; 51
		add r22,r0
    66c4:	60 0d       	add	r22, r0
		adc r23,r1
    66c6:	71 1d       	adc	r23, r1
		push r22
    66c8:	6f 93       	push	r22
		push r23	
    66ca:	7f 93       	push	r23
		ret ;jump into ram_fine_scroll_loop
    66cc:	08 95       	ret

000066ce <ram_fine_scroll_loop>:
	ram_fine_scroll_loop:
		.rept 8
			ld r16,X+
			lpm
			out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		.endr
    66ce:	0d 91       	ld	r16, X+
    66d0:	c8 95       	lpm
    66d2:	08 b9       	out	0x08, r16	; 8
    66d4:	0d 91       	ld	r16, X+
    66d6:	c8 95       	lpm
    66d8:	08 b9       	out	0x08, r16	; 8
    66da:	0d 91       	ld	r16, X+
    66dc:	c8 95       	lpm
    66de:	08 b9       	out	0x08, r16	; 8
    66e0:	0d 91       	ld	r16, X+
    66e2:	c8 95       	lpm
    66e4:	08 b9       	out	0x08, r16	; 8
    66e6:	0d 91       	ld	r16, X+
    66e8:	c8 95       	lpm
    66ea:	08 b9       	out	0x08, r16	; 8
    66ec:	0d 91       	ld	r16, X+
    66ee:	c8 95       	lpm
    66f0:	08 b9       	out	0x08, r16	; 8
    66f2:	0d 91       	ld	r16, X+
    66f4:	c8 95       	lpm
    66f6:	08 b9       	out	0x08, r16	; 8
    66f8:	0d 91       	ld	r16, X+
    66fa:	c8 95       	lpm
    66fc:	08 b9       	out	0x08, r16	; 8

		;branch to tile #2
		brtc romloop
    66fe:	1e f5       	brtc	.+70     	; 0x6746 <romloop>
		rjmp ramloop
    6700:	40 c0       	rjmp	.+128    	; 0x6782 <ramloop>

00006702 <rom_fine_scroll>:

	/***FINE SCROLL ROM LOOP***/
	rom_fine_scroll:
		movw ZL,XL
    6702:	fd 01       	movw	r30, r26
		ldi r22,lo8(pm(rom_fine_scroll_loop))	
    6704:	69 e8       	ldi	r22, 0x89	; 137
		ldi r23,hi8(pm(rom_fine_scroll_loop))
    6706:	73 e3       	ldi	r23, 0x33	; 51
		add r22,r0
    6708:	60 0d       	add	r22, r0
		adc r23,r1
    670a:	71 1d       	adc	r23, r1
		push r22
    670c:	6f 93       	push	r22
		push r23	
    670e:	7f 93       	push	r23
		ret
    6710:	08 95       	ret

00006712 <rom_fine_scroll_loop>:
	rom_fine_scroll_loop:
		.rept 8
			lpm r16,Z+
			rjmp .
			out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		.endr 
    6712:	05 91       	lpm	r16, Z+
    6714:	00 c0       	rjmp	.+0      	; 0x6716 <rom_fine_scroll_loop+0x4>
    6716:	08 b9       	out	0x08, r16	; 8
    6718:	05 91       	lpm	r16, Z+
    671a:	00 c0       	rjmp	.+0      	; 0x671c <rom_fine_scroll_loop+0xa>
    671c:	08 b9       	out	0x08, r16	; 8
    671e:	05 91       	lpm	r16, Z+
    6720:	00 c0       	rjmp	.+0      	; 0x6722 <rom_fine_scroll_loop+0x10>
    6722:	08 b9       	out	0x08, r16	; 8
    6724:	05 91       	lpm	r16, Z+
    6726:	00 c0       	rjmp	.+0      	; 0x6728 <rom_fine_scroll_loop+0x16>
    6728:	08 b9       	out	0x08, r16	; 8
    672a:	05 91       	lpm	r16, Z+
    672c:	00 c0       	rjmp	.+0      	; 0x672e <rom_fine_scroll_loop+0x1c>
    672e:	08 b9       	out	0x08, r16	; 8
    6730:	05 91       	lpm	r16, Z+
    6732:	00 c0       	rjmp	.+0      	; 0x6734 <rom_fine_scroll_loop+0x22>
    6734:	08 b9       	out	0x08, r16	; 8
    6736:	05 91       	lpm	r16, Z+
    6738:	00 c0       	rjmp	.+0      	; 0x673a <rom_fine_scroll_loop+0x28>
    673a:	08 b9       	out	0x08, r16	; 8
    673c:	05 91       	lpm	r16, Z+
    673e:	00 c0       	rjmp	.+0      	; 0x6740 <rom_fine_scroll_loop+0x2e>
    6740:	08 b9       	out	0x08, r16	; 8
	
		movw ZL,r6		;restore Z for tile #2
    6742:	f3 01       	movw	r30, r6

		;branch to tile #2
		brts ramloop
    6744:	f6 f0       	brts	.+60     	; 0x6782 <ramloop>

00006746 <romloop>:

	
	romloop:
	    lpm r16,Z+
    6746:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    6748:	08 b9       	out	0x08, r16	; 8
	    ld r18,Y     ;load next tile # from VRAM
    674a:	28 81       	ld	r18, Y

	    lpm r16,Z+
    674c:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 2
    674e:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    6750:	23 9f       	mul	r18, r19

	    lpm r16,Z+
    6752:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 3
    6754:	08 b9       	out	0x08, r16	; 8
		subi YL,-8
    6756:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT		;is tile in RAM or ROM? (RAM tiles have indexes<RAM_TILES_COUNT)
    6758:	2c 31       	cpi	r18, 0x1C	; 28
		
	    lpm r16,Z+
    675a:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    675c:	08 b9       	out	0x08, r16	; 8
		brsh .+2		;skip if next tile is in ROM	
    675e:	08 f4       	brcc	.+2      	; 0x6762 <romloop+0x1c>
		movw r20,r4 	;load RAM title table address +row offset	
    6760:	a2 01       	movw	r20, r4
   
	    lpm r16,Z+
    6762:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 5
    6764:	08 b9       	out	0x08, r16	; 8
		add r0,r20		;add tile table address +row offset lsb
    6766:	04 0e       	add	r0, r20
	    adc r1,r21		;add title table address +row offset msb
    6768:	15 1e       	adc	r1, r21

	    lpm r16,Z+
    676a:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 6
    676c:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT	
    676e:	2c 31       	cpi	r18, 0x1C	; 28
		dec r17			;decrement tiles to draw on line (does not affect carry)
    6770:	1a 95       	dec	r17
   
	    lpm r16,Z+
    6772:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 7   
    6774:	08 b9       	out	0x08, r16	; 8
	    lpm r16,Z+
    6776:	05 91       	lpm	r16, Z+

		breq end	
    6778:	39 f1       	breq	.+78     	; 0x67c8 <end>
	    movw ZL,r0   	;copy next tile adress
    677a:	f0 01       	movw	r30, r0

	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    677c:	08 b9       	out	0x08, r16	; 8
	    brcc romloop
    677e:	18 f7       	brcc	.-58     	; 0x6746 <romloop>
	
		rjmp .
    6780:	00 c0       	rjmp	.+0      	; 0x6782 <ramloop>

00006782 <ramloop>:

	ramloop:

	    ld r16,Z+
    6782:	01 91       	ld	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    6784:	08 b9       	out	0x08, r16	; 8
	    ld r18,Y     ;load next tile # from VRAM
    6786:	28 81       	ld	r18, Y

	    ld r16,Z+ 
    6788:	01 91       	ld	r16, Z+
		subi YL,-8   		
    678a:	c8 5f       	subi	r28, 0xF8	; 248
		out _SFR_IO_ADDR(DATA_PORT),r16 		;pixel 2
    678c:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    678e:	23 9f       	mul	r18, r19

	    ld r16,Z+
    6790:	01 91       	ld	r16, Z+
		nop
    6792:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16         ;pixel 3
    6794:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    6796:	2c 31       	cpi	r18, 0x1C	; 28
		rjmp .
    6798:	00 c0       	rjmp	.+0      	; 0x679a <ramloop+0x18>
   
	    ld r16,Z+
    679a:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    679c:	08 b9       	out	0x08, r16	; 8
		brcs .+2 
    679e:	08 f0       	brcs	.+2      	; 0x67a2 <ramloop+0x20>
		movw r20,r2 	;ROM title table address +row offset	
    67a0:	a1 01       	movw	r20, r2
   
   
	    ld r16,Z+
    67a2:	01 91       	ld	r16, Z+
	    add r0,r20    ;add title table address +row offset
    67a4:	04 0e       	add	r0, r20
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 5
    67a6:	08 b9       	out	0x08, r16	; 8
	    adc r1,r21
    67a8:	15 1e       	adc	r1, r21
		rjmp .
    67aa:	00 c0       	rjmp	.+0      	; 0x67ac <ramloop+0x2a>
    
		ld r16,Z+		
    67ac:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 6
    67ae:	08 b9       	out	0x08, r16	; 8
		ld r7,Z+
    67b0:	71 90       	ld	r7, Z+
	    ld r16,Z+	
    67b2:	01 91       	ld	r16, Z+
	
		movw ZL,r0
    67b4:	f0 01       	movw	r30, r0
		out _SFR_IO_ADDR(DATA_PORT),r7      ;pixel 7   
    67b6:	78 b8       	out	0x08, r7	; 8
		nop
    67b8:	00 00       	nop
		cpi r18,RAM_TILES_COUNT	
    67ba:	2c 31       	cpi	r18, 0x1C	; 28
	    dec r17
    67bc:	1a 95       	dec	r17
	    breq end
    67be:	21 f0       	breq	.+8      	; 0x67c8 <end>
	
		nop
    67c0:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    67c2:	08 b9       	out	0x08, r16	; 8
	
	    brcc romloop
    67c4:	00 f6       	brcc	.-128    	; 0x6746 <romloop>
		rjmp ramloop
    67c6:	dd cf       	rjmp	.-70     	; 0x6782 <ramloop>

000067c8 <end>:
	
	end:
		out _SFR_IO_ADDR(DATA_PORT),r16  	;pixel 8
    67c8:	08 b9       	out	0x08, r16	; 8
		brid end_fine_scroll				;hack: interrupt flag=0 => no fine offset pixel to draw
    67ca:	27 f5       	brid	.+72     	; 0x6814 <end_fine_scroll>
		brcc end_rom_fine_scroll_loop
    67cc:	30 f4       	brcc	.+12     	; 0x67da <end_rom_fine_scroll_loop>

	/***END RAM LOOP***/
		movw ZL,r0
    67ce:	f0 01       	movw	r30, r0

000067d0 <end_ram_fine_scroll_loop>:
	end_ram_fine_scroll_loop:
		ld r16,Z+
    67d0:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
    67d2:	08 b9       	out	0x08, r16	; 8
		dec r14
    67d4:	ea 94       	dec	r14
		brne end_ram_fine_scroll_loop
    67d6:	e1 f7       	brne	.-8      	; 0x67d0 <end_ram_fine_scroll_loop>
		rjmp end_fine_scroll_ram
    67d8:	1f c0       	rjmp	.+62     	; 0x6818 <end_fine_scroll_ram>

000067da <end_rom_fine_scroll_loop>:

	/***END ROM LOOP***/
	end_rom_fine_scroll_loop:
		movw ZL,r12
    67da:	f6 01       	movw	r30, r12
		nop
    67dc:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r9        ;output saved 1st pixel
    67de:	98 b8       	out	0x08, r9	; 8
		dec r14
    67e0:	ea 94       	dec	r14
		breq end_fine_scroll_rom
    67e2:	c9 f0       	breq	.+50     	; 0x6816 <end_fine_scroll_rom>
	.rept 6
		lpm r16,Z+		
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		dec r14
		breq end_fine_scroll_rom
	.endr
    67e4:	05 91       	lpm	r16, Z+
    67e6:	08 b9       	out	0x08, r16	; 8
    67e8:	ea 94       	dec	r14
    67ea:	a9 f0       	breq	.+42     	; 0x6816 <end_fine_scroll_rom>
    67ec:	05 91       	lpm	r16, Z+
    67ee:	08 b9       	out	0x08, r16	; 8
    67f0:	ea 94       	dec	r14
    67f2:	89 f0       	breq	.+34     	; 0x6816 <end_fine_scroll_rom>
    67f4:	05 91       	lpm	r16, Z+
    67f6:	08 b9       	out	0x08, r16	; 8
    67f8:	ea 94       	dec	r14
    67fa:	69 f0       	breq	.+26     	; 0x6816 <end_fine_scroll_rom>
    67fc:	05 91       	lpm	r16, Z+
    67fe:	08 b9       	out	0x08, r16	; 8
    6800:	ea 94       	dec	r14
    6802:	49 f0       	breq	.+18     	; 0x6816 <end_fine_scroll_rom>
    6804:	05 91       	lpm	r16, Z+
    6806:	08 b9       	out	0x08, r16	; 8
    6808:	ea 94       	dec	r14
    680a:	29 f0       	breq	.+10     	; 0x6816 <end_fine_scroll_rom>
    680c:	05 91       	lpm	r16, Z+
    680e:	08 b9       	out	0x08, r16	; 8
    6810:	ea 94       	dec	r14
    6812:	09 f0       	breq	.+2      	; 0x6816 <end_fine_scroll_rom>

00006814 <end_fine_scroll>:
	...

00006816 <end_fine_scroll_rom>:
	...

00006818 <end_fine_scroll_ram>:
	end_fine_scroll:	
		nop
	end_fine_scroll_rom:
		nop
	end_fine_scroll_ram:
		clr r16	
    6818:	00 27       	eor	r16, r16
		out _SFR_IO_ADDR(DATA_PORT),r16   
    681a:	08 b9       	out	0x08, r16	; 8

		pop r6
    681c:	6f 90       	pop	r6
		pop r7
    681e:	7f 90       	pop	r7
		pop r9
    6820:	9f 90       	pop	r9
		pop r12
    6822:	cf 90       	pop	r12
		pop r13
    6824:	df 90       	pop	r13
		pop r19
    6826:	3f 91       	pop	r19
		pop r22
    6828:	6f 91       	pop	r22
		pop r23
    682a:	7f 91       	pop	r23
		pop YH
    682c:	df 91       	pop	r29
		pop YL
    682e:	cf 91       	pop	r28

		ret
    6830:	08 95       	ret

00006832 <CopyFlashTile>:
; C-callable
; r24=Source ROM tile index
; r22=Dest RAM tile index
;************************************
CopyFlashTile:
	ldi r18,TILE_HEIGHT*TILE_WIDTH
    6832:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	lds ZL,tile_table_lo
    6834:	e0 91 96 0c 	lds	r30, 0x0C96
	lds ZH,tile_table_hi
    6838:	f0 91 97 0c 	lds	r31, 0x0C97
	mul r24,r18
    683c:	82 9f       	mul	r24, r18
	add ZL,r0
    683e:	e0 0d       	add	r30, r0
	adc ZH,r1
    6840:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    6842:	aa e3       	ldi	r26, 0x3A	; 58
	ldi XH,hi8(ram_tiles)
    6844:	b5 e0       	ldi	r27, 0x05	; 5
	mul r22,r18
    6846:	62 9f       	mul	r22, r18
	add XL,r0
    6848:	a0 0d       	add	r26, r0
	adc XH,r1
    684a:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	lpm r1,Z+
	st X+,r1
.endr
    684c:	15 90       	lpm	r1, Z+
    684e:	1d 92       	st	X+, r1
    6850:	15 90       	lpm	r1, Z+
    6852:	1d 92       	st	X+, r1
    6854:	15 90       	lpm	r1, Z+
    6856:	1d 92       	st	X+, r1
    6858:	15 90       	lpm	r1, Z+
    685a:	1d 92       	st	X+, r1
    685c:	15 90       	lpm	r1, Z+
    685e:	1d 92       	st	X+, r1
    6860:	15 90       	lpm	r1, Z+
    6862:	1d 92       	st	X+, r1
    6864:	15 90       	lpm	r1, Z+
    6866:	1d 92       	st	X+, r1
    6868:	15 90       	lpm	r1, Z+
    686a:	1d 92       	st	X+, r1
    686c:	15 90       	lpm	r1, Z+
    686e:	1d 92       	st	X+, r1
    6870:	15 90       	lpm	r1, Z+
    6872:	1d 92       	st	X+, r1
    6874:	15 90       	lpm	r1, Z+
    6876:	1d 92       	st	X+, r1
    6878:	15 90       	lpm	r1, Z+
    687a:	1d 92       	st	X+, r1
    687c:	15 90       	lpm	r1, Z+
    687e:	1d 92       	st	X+, r1
    6880:	15 90       	lpm	r1, Z+
    6882:	1d 92       	st	X+, r1
    6884:	15 90       	lpm	r1, Z+
    6886:	1d 92       	st	X+, r1
    6888:	15 90       	lpm	r1, Z+
    688a:	1d 92       	st	X+, r1
    688c:	15 90       	lpm	r1, Z+
    688e:	1d 92       	st	X+, r1
    6890:	15 90       	lpm	r1, Z+
    6892:	1d 92       	st	X+, r1
    6894:	15 90       	lpm	r1, Z+
    6896:	1d 92       	st	X+, r1
    6898:	15 90       	lpm	r1, Z+
    689a:	1d 92       	st	X+, r1
    689c:	15 90       	lpm	r1, Z+
    689e:	1d 92       	st	X+, r1
    68a0:	15 90       	lpm	r1, Z+
    68a2:	1d 92       	st	X+, r1
    68a4:	15 90       	lpm	r1, Z+
    68a6:	1d 92       	st	X+, r1
    68a8:	15 90       	lpm	r1, Z+
    68aa:	1d 92       	st	X+, r1
    68ac:	15 90       	lpm	r1, Z+
    68ae:	1d 92       	st	X+, r1
    68b0:	15 90       	lpm	r1, Z+
    68b2:	1d 92       	st	X+, r1
    68b4:	15 90       	lpm	r1, Z+
    68b6:	1d 92       	st	X+, r1
    68b8:	15 90       	lpm	r1, Z+
    68ba:	1d 92       	st	X+, r1
    68bc:	15 90       	lpm	r1, Z+
    68be:	1d 92       	st	X+, r1
    68c0:	15 90       	lpm	r1, Z+
    68c2:	1d 92       	st	X+, r1
    68c4:	15 90       	lpm	r1, Z+
    68c6:	1d 92       	st	X+, r1
    68c8:	15 90       	lpm	r1, Z+
    68ca:	1d 92       	st	X+, r1
    68cc:	15 90       	lpm	r1, Z+
    68ce:	1d 92       	st	X+, r1
    68d0:	15 90       	lpm	r1, Z+
    68d2:	1d 92       	st	X+, r1
    68d4:	15 90       	lpm	r1, Z+
    68d6:	1d 92       	st	X+, r1
    68d8:	15 90       	lpm	r1, Z+
    68da:	1d 92       	st	X+, r1
    68dc:	15 90       	lpm	r1, Z+
    68de:	1d 92       	st	X+, r1
    68e0:	15 90       	lpm	r1, Z+
    68e2:	1d 92       	st	X+, r1
    68e4:	15 90       	lpm	r1, Z+
    68e6:	1d 92       	st	X+, r1
    68e8:	15 90       	lpm	r1, Z+
    68ea:	1d 92       	st	X+, r1
    68ec:	15 90       	lpm	r1, Z+
    68ee:	1d 92       	st	X+, r1
    68f0:	15 90       	lpm	r1, Z+
    68f2:	1d 92       	st	X+, r1
    68f4:	15 90       	lpm	r1, Z+
    68f6:	1d 92       	st	X+, r1
    68f8:	15 90       	lpm	r1, Z+
    68fa:	1d 92       	st	X+, r1
    68fc:	15 90       	lpm	r1, Z+
    68fe:	1d 92       	st	X+, r1
    6900:	15 90       	lpm	r1, Z+
    6902:	1d 92       	st	X+, r1
    6904:	15 90       	lpm	r1, Z+
    6906:	1d 92       	st	X+, r1
    6908:	15 90       	lpm	r1, Z+
    690a:	1d 92       	st	X+, r1
    690c:	15 90       	lpm	r1, Z+
    690e:	1d 92       	st	X+, r1
    6910:	15 90       	lpm	r1, Z+
    6912:	1d 92       	st	X+, r1
    6914:	15 90       	lpm	r1, Z+
    6916:	1d 92       	st	X+, r1
    6918:	15 90       	lpm	r1, Z+
    691a:	1d 92       	st	X+, r1
    691c:	15 90       	lpm	r1, Z+
    691e:	1d 92       	st	X+, r1
    6920:	15 90       	lpm	r1, Z+
    6922:	1d 92       	st	X+, r1
    6924:	15 90       	lpm	r1, Z+
    6926:	1d 92       	st	X+, r1
    6928:	15 90       	lpm	r1, Z+
    692a:	1d 92       	st	X+, r1
    692c:	15 90       	lpm	r1, Z+
    692e:	1d 92       	st	X+, r1
    6930:	15 90       	lpm	r1, Z+
    6932:	1d 92       	st	X+, r1
    6934:	15 90       	lpm	r1, Z+
    6936:	1d 92       	st	X+, r1
    6938:	15 90       	lpm	r1, Z+
    693a:	1d 92       	st	X+, r1
    693c:	15 90       	lpm	r1, Z+
    693e:	1d 92       	st	X+, r1
    6940:	15 90       	lpm	r1, Z+
    6942:	1d 92       	st	X+, r1
    6944:	15 90       	lpm	r1, Z+
    6946:	1d 92       	st	X+, r1
    6948:	15 90       	lpm	r1, Z+
    694a:	1d 92       	st	X+, r1
	clr r1
    694c:	11 24       	eor	r1, r1
	ret
    694e:	08 95       	ret

00006950 <CopyRamTile>:
; r24=Source RAM tile index
; r22=Dest RAM tile index
;************************************
CopyRamTile:

	ldi r18,TILE_HEIGHT*TILE_WIDTH
    6950:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	ldi ZL,lo8(ram_tiles)
    6952:	ea e3       	ldi	r30, 0x3A	; 58
	ldi ZH,hi8(ram_tiles)
    6954:	f5 e0       	ldi	r31, 0x05	; 5
	mul r24,r18
    6956:	82 9f       	mul	r24, r18
	add ZL,r0
    6958:	e0 0d       	add	r30, r0
	adc ZH,r1
    695a:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    695c:	aa e3       	ldi	r26, 0x3A	; 58
	ldi XH,hi8(ram_tiles)
    695e:	b5 e0       	ldi	r27, 0x05	; 5
	mul r22,r18
    6960:	62 9f       	mul	r22, r18
	add XL,r0
    6962:	a0 0d       	add	r26, r0
	adc XH,r1
    6964:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	ld r1,Z+
	st X+,r1
.endr
    6966:	11 90       	ld	r1, Z+
    6968:	1d 92       	st	X+, r1
    696a:	11 90       	ld	r1, Z+
    696c:	1d 92       	st	X+, r1
    696e:	11 90       	ld	r1, Z+
    6970:	1d 92       	st	X+, r1
    6972:	11 90       	ld	r1, Z+
    6974:	1d 92       	st	X+, r1
    6976:	11 90       	ld	r1, Z+
    6978:	1d 92       	st	X+, r1
    697a:	11 90       	ld	r1, Z+
    697c:	1d 92       	st	X+, r1
    697e:	11 90       	ld	r1, Z+
    6980:	1d 92       	st	X+, r1
    6982:	11 90       	ld	r1, Z+
    6984:	1d 92       	st	X+, r1
    6986:	11 90       	ld	r1, Z+
    6988:	1d 92       	st	X+, r1
    698a:	11 90       	ld	r1, Z+
    698c:	1d 92       	st	X+, r1
    698e:	11 90       	ld	r1, Z+
    6990:	1d 92       	st	X+, r1
    6992:	11 90       	ld	r1, Z+
    6994:	1d 92       	st	X+, r1
    6996:	11 90       	ld	r1, Z+
    6998:	1d 92       	st	X+, r1
    699a:	11 90       	ld	r1, Z+
    699c:	1d 92       	st	X+, r1
    699e:	11 90       	ld	r1, Z+
    69a0:	1d 92       	st	X+, r1
    69a2:	11 90       	ld	r1, Z+
    69a4:	1d 92       	st	X+, r1
    69a6:	11 90       	ld	r1, Z+
    69a8:	1d 92       	st	X+, r1
    69aa:	11 90       	ld	r1, Z+
    69ac:	1d 92       	st	X+, r1
    69ae:	11 90       	ld	r1, Z+
    69b0:	1d 92       	st	X+, r1
    69b2:	11 90       	ld	r1, Z+
    69b4:	1d 92       	st	X+, r1
    69b6:	11 90       	ld	r1, Z+
    69b8:	1d 92       	st	X+, r1
    69ba:	11 90       	ld	r1, Z+
    69bc:	1d 92       	st	X+, r1
    69be:	11 90       	ld	r1, Z+
    69c0:	1d 92       	st	X+, r1
    69c2:	11 90       	ld	r1, Z+
    69c4:	1d 92       	st	X+, r1
    69c6:	11 90       	ld	r1, Z+
    69c8:	1d 92       	st	X+, r1
    69ca:	11 90       	ld	r1, Z+
    69cc:	1d 92       	st	X+, r1
    69ce:	11 90       	ld	r1, Z+
    69d0:	1d 92       	st	X+, r1
    69d2:	11 90       	ld	r1, Z+
    69d4:	1d 92       	st	X+, r1
    69d6:	11 90       	ld	r1, Z+
    69d8:	1d 92       	st	X+, r1
    69da:	11 90       	ld	r1, Z+
    69dc:	1d 92       	st	X+, r1
    69de:	11 90       	ld	r1, Z+
    69e0:	1d 92       	st	X+, r1
    69e2:	11 90       	ld	r1, Z+
    69e4:	1d 92       	st	X+, r1
    69e6:	11 90       	ld	r1, Z+
    69e8:	1d 92       	st	X+, r1
    69ea:	11 90       	ld	r1, Z+
    69ec:	1d 92       	st	X+, r1
    69ee:	11 90       	ld	r1, Z+
    69f0:	1d 92       	st	X+, r1
    69f2:	11 90       	ld	r1, Z+
    69f4:	1d 92       	st	X+, r1
    69f6:	11 90       	ld	r1, Z+
    69f8:	1d 92       	st	X+, r1
    69fa:	11 90       	ld	r1, Z+
    69fc:	1d 92       	st	X+, r1
    69fe:	11 90       	ld	r1, Z+
    6a00:	1d 92       	st	X+, r1
    6a02:	11 90       	ld	r1, Z+
    6a04:	1d 92       	st	X+, r1
    6a06:	11 90       	ld	r1, Z+
    6a08:	1d 92       	st	X+, r1
    6a0a:	11 90       	ld	r1, Z+
    6a0c:	1d 92       	st	X+, r1
    6a0e:	11 90       	ld	r1, Z+
    6a10:	1d 92       	st	X+, r1
    6a12:	11 90       	ld	r1, Z+
    6a14:	1d 92       	st	X+, r1
    6a16:	11 90       	ld	r1, Z+
    6a18:	1d 92       	st	X+, r1
    6a1a:	11 90       	ld	r1, Z+
    6a1c:	1d 92       	st	X+, r1
    6a1e:	11 90       	ld	r1, Z+
    6a20:	1d 92       	st	X+, r1
    6a22:	11 90       	ld	r1, Z+
    6a24:	1d 92       	st	X+, r1
    6a26:	11 90       	ld	r1, Z+
    6a28:	1d 92       	st	X+, r1
    6a2a:	11 90       	ld	r1, Z+
    6a2c:	1d 92       	st	X+, r1
    6a2e:	11 90       	ld	r1, Z+
    6a30:	1d 92       	st	X+, r1
    6a32:	11 90       	ld	r1, Z+
    6a34:	1d 92       	st	X+, r1
    6a36:	11 90       	ld	r1, Z+
    6a38:	1d 92       	st	X+, r1
    6a3a:	11 90       	ld	r1, Z+
    6a3c:	1d 92       	st	X+, r1
    6a3e:	11 90       	ld	r1, Z+
    6a40:	1d 92       	st	X+, r1
    6a42:	11 90       	ld	r1, Z+
    6a44:	1d 92       	st	X+, r1
    6a46:	11 90       	ld	r1, Z+
    6a48:	1d 92       	st	X+, r1
    6a4a:	11 90       	ld	r1, Z+
    6a4c:	1d 92       	st	X+, r1
    6a4e:	11 90       	ld	r1, Z+
    6a50:	1d 92       	st	X+, r1
    6a52:	11 90       	ld	r1, Z+
    6a54:	1d 92       	st	X+, r1
    6a56:	11 90       	ld	r1, Z+
    6a58:	1d 92       	st	X+, r1
    6a5a:	11 90       	ld	r1, Z+
    6a5c:	1d 92       	st	X+, r1
    6a5e:	11 90       	ld	r1, Z+
    6a60:	1d 92       	st	X+, r1
    6a62:	11 90       	ld	r1, Z+
    6a64:	1d 92       	st	X+, r1
	clr r1
    6a66:	11 24       	eor	r1, r1
	ret
    6a68:	08 95       	ret

00006a6a <BlitSprite>:
; r22=RAM tile index (bt)
; r21:r20=Y:X
; r19:r18=DY:DX
;************************************
BlitSprite:
	push r16
    6a6a:	0f 93       	push	r16
	push r17
    6a6c:	1f 93       	push	r17
	push YL
    6a6e:	cf 93       	push	r28
	push YH
    6a70:	df 93       	push	r29

	;src=sprites_tiletable_lo+(sprites[i].tileIndex*TILE_HEIGHT*TILE_WIDTH)
	ldi r25,SPRITE_STRUCT_SIZE
    6a72:	94 e0       	ldi	r25, 0x04	; 4
	mul r24,r25
    6a74:	89 9f       	mul	r24, r25

	ldi ZL,lo8(sprites)	
    6a76:	e2 e0       	ldi	r30, 0x02	; 2
	ldi ZH,hi8(sprites)	
    6a78:	f5 e0       	ldi	r31, 0x05	; 5
	add ZL,r0
    6a7a:	e0 0d       	add	r30, r0
	adc ZH,r1
    6a7c:	f1 1d       	adc	r31, r1

	ldd r16,Z+sprFlags
    6a7e:	03 81       	ldd	r16, Z+3	; 0x03

	;8x16 multiply
	ldd r24,Z+sprTileIndex
    6a80:	82 81       	ldd	r24, Z+2	; 0x02
	ldi r30,TILE_WIDTH*TILE_HEIGHT
    6a82:	e0 e4       	ldi	r30, 0x40	; 64
	mul r24,r30
    6a84:	8e 9f       	mul	r24, r30
	movw r26,r0
    6a86:	d0 01       	movw	r26, r0
	
	;get tile bank addr
	ldi r25,4*2
    6a88:	98 e0       	ldi	r25, 0x08	; 8
	mul r16,r25
    6a8a:	09 9f       	mul	r16, r25
	ldi YL,lo8(sprites_tile_banks)	
    6a8c:	ce e8       	ldi	r28, 0x8E	; 142
	ldi YH,hi8(sprites_tile_banks)	
    6a8e:	dc e0       	ldi	r29, 0x0C	; 12
	clr r0
    6a90:	00 24       	eor	r0, r0
	add YL,r1
    6a92:	c1 0d       	add	r28, r1
	adc YH,r0		
    6a94:	d0 1d       	adc	r29, r0
	ldd ZL,Y+0
    6a96:	e8 81       	ld	r30, Y
	ldd ZH,Y+1
    6a98:	f9 81       	ldd	r31, Y+1	; 0x01
	add ZL,r26	;tile data src
    6a9a:	ea 0f       	add	r30, r26
	adc ZH,r27
    6a9c:	fb 1f       	adc	r31, r27
	
	;dest=ram_tiles+(bt*TILE_HEIGHT*TILE_WIDTH)
	ldi XL,lo8(ram_tiles)	
    6a9e:	aa e3       	ldi	r26, 0x3A	; 58
	ldi XH,hi8(ram_tiles)
    6aa0:	b5 e0       	ldi	r27, 0x05	; 5
	ldi r25,TILE_WIDTH*TILE_HEIGHT
    6aa2:	90 e4       	ldi	r25, 0x40	; 64
	mul r22,r25
    6aa4:	69 9f       	mul	r22, r25
	add XL,r0
    6aa6:	a0 0d       	add	r26, r0
	adc XH,r1
    6aa8:	b1 1d       	adc	r27, r1
			srcXdiff=destXdiff;
			src+=destXdiff;
		}
	}
	*/
	clr r1
    6aaa:	11 24       	eor	r1, r1
	clr YH		;hi8(srcXdiff)
    6aac:	dd 27       	eor	r29, r29

	cpi r20,0	
    6aae:	40 30       	cpi	r20, 0x00	; 0
	brne x_2nd_tile
    6ab0:	51 f4       	brne	.+20     	; 0x6ac6 <x_2nd_tile>
	
	add XL,r18	;dest+=dx
    6ab2:	a2 0f       	add	r26, r18
	adc XH,r1
    6ab4:	b1 1d       	adc	r27, r1
	mov r24,r18	;destXdiff=dx
    6ab6:	82 2f       	mov	r24, r18
	mov YL,r18	;srcXdiff=dx
    6ab8:	c2 2f       	mov	r28, r18

	sbrs r16,SPRITE_FLIP_X_BIT
    6aba:	00 ff       	sbrs	r16, 0
	rjmp x_check_end
    6abc:	11 c0       	rjmp	.+34     	; 0x6ae0 <x_check_end>

	adiw ZL,(TILE_WIDTH-1)	;src+=7
    6abe:	37 96       	adiw	r30, 0x07	; 7
	ldi YL,TILE_WIDTH*2		;srcXdiff=((TILE_WIDTH*2)-dx);
    6ac0:	c0 e1       	ldi	r28, 0x10	; 16
	sub YL,r18	
    6ac2:	c2 1b       	sub	r28, r18
	rjmp x_check_end
    6ac4:	0d c0       	rjmp	.+26     	; 0x6ae0 <x_check_end>

00006ac6 <x_2nd_tile>:

x_2nd_tile:
	ldi r24,TILE_WIDTH
    6ac6:	88 e0       	ldi	r24, 0x08	; 8
	sub r24,r18		;8-DX = xdiff for dest
    6ac8:	82 1b       	sub	r24, r18

	sbrc r16,SPRITE_FLIP_X_BIT
    6aca:	00 fd       	sbrc	r16, 0
	rjmp x2_flip_x
    6acc:	04 c0       	rjmp	.+8      	; 0x6ad6 <x2_flip_x>

	mov YL,r24		;srcXdiff=destXdiff;
    6ace:	c8 2f       	mov	r28, r24
	add ZL,r24		;src+=destXdiff;
    6ad0:	e8 0f       	add	r30, r24
	adc ZH,r1	
    6ad2:	f1 1d       	adc	r31, r1
	rjmp x_check_end
    6ad4:	05 c0       	rjmp	.+10     	; 0x6ae0 <x_check_end>

00006ad6 <x2_flip_x>:

x2_flip_x:
	ldi YL,TILE_WIDTH
    6ad6:	c8 e0       	ldi	r28, 0x08	; 8
	add YL,r18		;srcXdiff=TILE_WIDTH+dx;	
    6ad8:	c2 0f       	add	r28, r18
	add ZL,r18		;src+=dx;
    6ada:	e2 0f       	add	r30, r18
	adc ZH,r1
    6adc:	f1 1d       	adc	r31, r1
	sbiw ZL,1		;src--;
    6ade:	31 97       	sbiw	r30, 0x01	; 1

00006ae0 <x_check_end>:
		}else{
			src+=(ydiff*TILE_WIDTH);
		}
	}
	*/
	cpi r21,0
    6ae0:	50 30       	cpi	r21, 0x00	; 0
	brne y_2nd_tile
    6ae2:	51 f4       	brne	.+20     	; 0x6af8 <y_2nd_tile>

	ldi r25,TILE_WIDTH	;dest+=(dy*TILE_WIDTH)
    6ae4:	98 e0       	ldi	r25, 0x08	; 8
	mul r25,r19			
    6ae6:	93 9f       	mul	r25, r19
	add XL,r0
    6ae8:	a0 0d       	add	r26, r0
	adc XH,r1
    6aea:	b1 1d       	adc	r27, r1

	mov r25,r19			;ydiff=dy
    6aec:	93 2f       	mov	r25, r19

	//sbrc r16,SPRITE_FLIP_Y_BIT
	//adiw ZL,(TILE_WIDTH*(TILE_HEIGHT-1))

	sbrc r16,SPRITE_FLIP_Y_BIT
    6aee:	01 fd       	sbrc	r16, 1
	subi ZL,lo8(-(TILE_WIDTH*(TILE_HEIGHT-1)));src+=(TILE_WIDTH*(TILE_HEIGHT-1));
    6af0:	e8 5c       	subi	r30, 0xC8	; 200
	sbrc r16,SPRITE_FLIP_Y_BIT
    6af2:	01 fd       	sbrc	r16, 1
	sbci ZH,hi8(-(TILE_WIDTH*(TILE_HEIGHT-1)))
    6af4:	ff 4f       	sbci	r31, 0xFF	; 255


	rjmp y_check_end
    6af6:	0a c0       	rjmp	.+20     	; 0x6b0c <y_check_end>

00006af8 <y_2nd_tile>:

y_2nd_tile:
	ldi r25,TILE_HEIGHT	;ydiff=(TILE_HEIGHT-dy)
    6af8:	98 e0       	ldi	r25, 0x08	; 8
	sub r25,r19	
    6afa:	93 1b       	sub	r25, r19
	
	mov r22,r19			;temp=dy-1
    6afc:	63 2f       	mov	r22, r19
	dec r22
    6afe:	6a 95       	dec	r22
	sbrs r16,SPRITE_FLIP_Y_BIT
    6b00:	01 ff       	sbrs	r16, 1
	mov r22,r25			;temp=ydiff
    6b02:	69 2f       	mov	r22, r25

	ldi r21,TILE_WIDTH	;src+=(temp*TILE_WIDTH);
    6b04:	58 e0       	ldi	r21, 0x08	; 8
	mul r21,r22
    6b06:	56 9f       	mul	r21, r22
	add ZL,r0
    6b08:	e0 0d       	add	r30, r0
	adc ZH,r1	
    6b0a:	f1 1d       	adc	r31, r1

00006b0c <y_check_end>:
y_check_end:	
	
	//if(flags&SPRITE_FLIP_X){
	//	step=-1;
	//}
	ser r22		;step=-1
    6b0c:	6f ef       	ldi	r22, 0xFF	; 255
	ser r23
    6b0e:	7f ef       	ldi	r23, 0xFF	; 255
	sbrs r16,SPRITE_FLIP_X_BIT
    6b10:	00 ff       	sbrs	r16, 0
	ldi r22,1	;step=1
    6b12:	61 e0       	ldi	r22, 0x01	; 1
	sbrs r16,SPRITE_FLIP_X_BIT
    6b14:	00 ff       	sbrs	r16, 0
	clr r23
    6b16:	77 27       	eor	r23, r23

	//if(flags&SPRITE_FLIP_Y){
	//	srcXdiff-=(TILE_WIDTH*2);
	//}
	sbrc r16,SPRITE_FLIP_Y_BIT
    6b18:	01 fd       	sbrc	r16, 1
	sbiw YL,(TILE_WIDTH*2)
    6b1a:	60 97       	sbiw	r28, 0x10	; 16
	;r24	= destXdiff
	;r25	= ydiff
	;X		= dest
	;Y		= srcXdiff
	;Z		= src
	clr r1
    6b1c:	11 24       	eor	r1, r1
	ldi r19,TRANSLUCENT_COLOR
    6b1e:	3e ef       	ldi	r19, 0xFE	; 254

	ldi r21,TILE_HEIGHT
    6b20:	58 e0       	ldi	r21, 0x08	; 8
	sub r21,r25 	;yspan=(TILE_HEIGHT-ydiff)
    6b22:	59 1b       	sub	r21, r25

00006b24 <y_loop>:

y_loop:
	ldi r20,TILE_WIDTH
    6b24:	48 e0       	ldi	r20, 0x08	; 8
	sub r20,r24 	;xspan=(TILE_WIDTH-destXdiff)
    6b26:	48 1b       	sub	r20, r24

00006b28 <x_loop>:

x_loop:
	lpm r18,Z		;px=pgm_read_byte(src);
    6b28:	24 91       	lpm	r18, Z
	cpse r18,r19	;if(px!=TRANSLUCENT_COLOR)
    6b2a:	23 13       	cpse	r18, r19
	st X,r18		;*dest=px;
    6b2c:	2c 93       	st	X, r18
	adiw XL,1
    6b2e:	11 96       	adiw	r26, 0x01	; 1
	add ZL,r22		;src+=step;
    6b30:	e6 0f       	add	r30, r22
	adc ZH,r23
    6b32:	f7 1f       	adc	r31, r23
	dec r20
    6b34:	4a 95       	dec	r20
	brne x_loop
    6b36:	c1 f7       	brne	.-16     	; 0x6b28 <x_loop>

	add ZL,YL		;src+=srcXdiff
    6b38:	ec 0f       	add	r30, r28
	adc ZH,YH
    6b3a:	fd 1f       	adc	r31, r29
	add XL,r24		;dest+=destXdiff
    6b3c:	a8 0f       	add	r26, r24
	adc XH,r1
    6b3e:	b1 1d       	adc	r27, r1
	dec r21
    6b40:	5a 95       	dec	r21
	brne y_loop
    6b42:	81 f7       	brne	.-32     	; 0x6b24 <y_loop>


	pop YH
    6b44:	df 91       	pop	r29
	pop YL
    6b46:	cf 91       	pop	r28
	pop r17
    6b48:	1f 91       	pop	r17
	pop r16
    6b4a:	0f 91       	pop	r16
	ret
    6b4c:	08 95       	ret

00006b4e <__vector_13>:

;***************************************************************************
; Main Video sync interrupt
;***************************************************************************
TIMER1_COMPA_vect:
	push r0
    6b4e:	0f 92       	push	r0
	push r1
    6b50:	1f 92       	push	r1
	push ZL;2
    6b52:	ef 93       	push	r30
	push ZH;2
    6b54:	ff 93       	push	r31
	
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    6b56:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    6b58:	ef 93       	push	r30

	;Read timer offset since rollover to remove cycles 
	;and conpensate for interrupt latency.
	;This is nessesary to eliminate frame jitter.
	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    6b5a:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,0x12 ;MIN_INT_LATENCY
    6b5e:	e2 51       	subi	r30, 0x12	; 18

	ldi ZH,1
    6b60:	f1 e0       	ldi	r31, 0x01	; 1

00006b62 <latency_loop>:
latency_loop:
	cp ZL,ZH
    6b62:	ef 17       	cp	r30, r31
	brlo .		;advance PC to next instruction	
    6b64:	00 f0       	brcs	.+0      	; 0x6b66 <latency_loop+0x4>
	inc ZH
    6b66:	f3 95       	inc	r31
	cpi ZH,10
    6b68:	fa 30       	cpi	r31, 0x0A	; 10
	brlo latency_loop
    6b6a:	d8 f3       	brcs	.-10     	; 0x6b62 <latency_loop>
	jmp .
    6b6c:	0c 94 b8 35 	jmp	0x6b70	; 0x6b70 <latency_loop+0xe>
	
	;decrement sync pulse counter
	lds ZL,sync_pulse
    6b70:	e0 91 a1 0c 	lds	r30, 0x0CA1
	dec ZL
    6b74:	ea 95       	dec	r30
	sts sync_pulse,ZL
    6b76:	e0 93 a1 0c 	sts	0x0CA1, r30

	;process sync phases
	lds ZH,sync_phase
    6b7a:	f0 91 a0 0c 	lds	r31, 0x0CA0
	sbrc ZH,0
    6b7e:	f0 fd       	sbrc	r31, 0
	rjmp sync_hsync
    6b80:	57 c0       	rjmp	.+174    	; 0x6c30 <sync_hsync>
; Note: TCNT1 should be equal to 
; 0x68 on the cbi
; 0xAC on the sbi
; pulse duration: 68 clocks
;***************************************************		
	cpi ZL,SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    6b82:	ec 30       	cpi	r30, 0x0C	; 12
	brlo sync_eq
    6b84:	98 f0       	brcs	.+38     	; 0x6bac <sync_eq>

	;Set HDRIVE to double rate during VSYNC
	ldi ZH,hi8(HDRIVE_CL_TWICE)
    6b86:	f3 e0       	ldi	r31, 0x03	; 3
	sts _SFR_MEM_ADDR(OCR1AH),ZH	
    6b88:	f0 93 89 00 	sts	0x0089, r31
	ldi ZH,lo8(HDRIVE_CL_TWICE)
    6b8c:	fd e8       	ldi	r31, 0x8D	; 141
	sts _SFR_MEM_ADDR(OCR1AL),ZH
    6b8e:	f0 93 88 00 	sts	0x0088, r31

	bst ZL,0
    6b92:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0x68
    6b94:	28 98       	cbi	0x05, 0	; 5
	brtc sync_pre_eq_no_sound_update
    6b96:	26 f4       	brtc	.+8      	; 0x6ba0 <sync_pre_eq_no_sound_update>
	ldi ZL,1	;indicate update_sound to generate the SBI for pre-eq
    6b98:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    6b9a:	0e 94 9f 36 	call	0x6d3e	; 0x6d3e <update_sound>
	rjmp sync_end
    6b9e:	b7 c0       	rjmp	.+366    	; 0x6d0e <sync_end>

00006ba0 <sync_pre_eq_no_sound_update>:

sync_pre_eq_no_sound_update:
	WAIT ZL,64
    6ba0:	e5 e1       	ldi	r30, 0x15	; 21
    6ba2:	ea 95       	dec	r30
    6ba4:	f1 f7       	brne	.-4      	; 0x6ba2 <sync_pre_eq_no_sound_update+0x2>
    6ba6:	00 00       	nop
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    6ba8:	28 9a       	sbi	0x05, 0	; 5
		
	rjmp sync_end
    6baa:	b1 c0       	rjmp	.+354    	; 0x6d0e <sync_end>

00006bac <sync_eq>:
; 0x68  on the cbi
; 0x36E on the sbi
; low pulse duration: 774 clocks
;***************************************************	
sync_eq:
	cpi ZL,SYNC_POST_EQ_PULSES
    6bac:	e6 30       	cpi	r30, 0x06	; 6
	brlo sync_post_eq
    6bae:	38 f1       	brcs	.+78     	; 0x6bfe <sync_post_eq>

	rjmp .
    6bb0:	00 c0       	rjmp	.+0      	; 0x6bb2 <sync_eq+0x6>
	rjmp .
    6bb2:	00 c0       	rjmp	.+0      	; 0x6bb4 <sync_eq+0x8>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    6bb4:	28 98       	cbi	0x05, 0	; 5

	bst ZL,0
    6bb6:	e0 fb       	bst	r30, 0
	ldi ZL,4
    6bb8:	e4 e0       	ldi	r30, 0x04	; 4
	brtc sync_eq_skip
    6bba:	16 f4       	brtc	.+4      	; 0x6bc0 <sync_eq_skip>
	
	call update_sound
    6bbc:	0e 94 9f 36 	call	0x6d3e	; 0x6d3e <update_sound>

00006bc0 <sync_eq_skip>:
	;enable interupt to bring back sync 
	;level instead of wasting cycles
	;in a big wait loop

 	;clear interrupt flag
	ldi ZL,(1<<OCF1B)
    6bc0:	e4 e0       	ldi	r30, 0x04	; 4
	sts _SFR_MEM_ADDR(TIFR1),ZL 
    6bc2:	e0 93 36 00 	sts	0x0036, r30
	
	;generate interrupt on match
	;for timer1 compare unit b
	ldi ZL,(1<<OCIE1A)+(1<<OCIE1B)
    6bc6:	e6 e0       	ldi	r30, 0x06	; 6
	sts _SFR_MEM_ADDR(TIMSK1),ZL
    6bc8:	e0 93 6f 00 	sts	0x006F, r30

	rjmp sync_end
    6bcc:	a0 c0       	rjmp	.+320    	; 0x6d0e <sync_end>

00006bce <__vector_14>:
; during VSYNC EQ pulses to recover ~5000 cycles per field
; with interrupt latency conpensation
; 37 cycles
;**********************************************************	
TIMER1_COMPB_vect:
	push ZL
    6bce:	ef 93       	push	r30
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    6bd0:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    6bd2:	ef 93       	push	r30

	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    6bd4:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,62+31 ;0x5D ;MIN_INT_LATENCY
    6bd8:	ed 55       	subi	r30, 0x5D	; 93

	cpi ZL,1
    6bda:	e1 30       	cpi	r30, 0x01	; 1
	brlo .		;advance PC to next instruction
    6bdc:	00 f0       	brcs	.+0      	; 0x6bde <__vector_14+0x10>

	cpi ZL,2
    6bde:	e2 30       	cpi	r30, 0x02	; 2
	brlo .		;advance PC to next instruction
    6be0:	00 f0       	brcs	.+0      	; 0x6be2 <__vector_14+0x14>

	cpi ZL,3
    6be2:	e3 30       	cpi	r30, 0x03	; 3
	brlo .		;advance PC to next instruction
    6be4:	00 f0       	brcs	.+0      	; 0x6be6 <__vector_14+0x18>

	cpi ZL,4
    6be6:	e4 30       	cpi	r30, 0x04	; 4
	brlo .		;advance PC to next instruction
    6be8:	00 f0       	brcs	.+0      	; 0x6bea <__vector_14+0x1c>

	cpi ZL,5
    6bea:	e5 30       	cpi	r30, 0x05	; 5
	brlo .		;advance PC to next instruction
    6bec:	00 f0       	brcs	.+0      	; 0x6bee <__vector_14+0x20>

 	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;68
    6bee:	28 9a       	sbi	0x05, 0	; 5
	ldi ZL,(1<<OCIE1A) ; disable OCIE1B 
    6bf0:	e2 e0       	ldi	r30, 0x02	; 2
	sts _SFR_MEM_ADDR(TIMSK1),ZL ;stop generate interrupt on match
    6bf2:	e0 93 6f 00 	sts	0x006F, r30
	
	;restore flags
	pop ZL
    6bf6:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL	
    6bf8:	ef bf       	out	0x3f, r30	; 63
	pop ZL
    6bfa:	ef 91       	pop	r30
	reti
    6bfc:	18 95       	reti

00006bfe <sync_post_eq>:
; 0x68 on the cbi
; 0xAC on the sbi
; pulse cycles: 68 clocks
;***************************************************	
sync_post_eq:	
	rjmp .
    6bfe:	00 c0       	rjmp	.+0      	; 0x6c00 <sync_post_eq+0x2>

	bst ZL,0
    6c00:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    6c02:	28 98       	cbi	0x05, 0	; 5
	brtc sync_post_eq_no_sound_update
    6c04:	26 f4       	brtc	.+8      	; 0x6c0e <sync_post_eq_no_sound_update>
	ldi ZL,1	
    6c06:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    6c08:	0e 94 9f 36 	call	0x6d3e	; 0x6d3e <update_sound>
	rjmp sync_pre_eq_cont
    6c0c:	05 c0       	rjmp	.+10     	; 0x6c18 <sync_pre_eq_cont>

00006c0e <sync_post_eq_no_sound_update>:

sync_post_eq_no_sound_update:
	WAIT ZL,64
    6c0e:	e5 e1       	ldi	r30, 0x15	; 21
    6c10:	ea 95       	dec	r30
    6c12:	f1 f7       	brne	.-4      	; 0x6c10 <sync_post_eq_no_sound_update+0x2>
    6c14:	00 00       	nop

	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN 
    6c16:	28 9a       	sbi	0x05, 0	; 5

00006c18 <sync_pre_eq_cont>:

sync_pre_eq_cont:	
	;check if it's the last vsync pulse
	lds ZL,sync_pulse
    6c18:	e0 91 a1 0c 	lds	r30, 0x0CA1
	cpi ZL,0
    6c1c:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2 ;skip rjmp
    6c1e:	09 f0       	breq	.+2      	; 0x6c22 <sync_pre_eq_cont+0xa>
	rjmp sync_end
    6c20:	76 c0       	rjmp	.+236    	; 0x6d0e <sync_end>
	
	;update sync flags
	ldi ZL,SYNC_HSYNC_PULSES
    6c22:	ed ef       	ldi	r30, 0xFD	; 253
	sts sync_pulse,ZL
    6c24:	e0 93 a1 0c 	sts	0x0CA1, r30
	ldi ZL,1
    6c28:	e1 e0       	ldi	r30, 0x01	; 1
	sts sync_phase,ZL
    6c2a:	e0 93 a0 0c 	sts	0x0CA0, r30
	
	rjmp sync_end
    6c2e:	6f c0       	rjmp	.+222    	; 0x6d0e <sync_end>

00006c30 <sync_hsync>:
; 0xF0 on the sbi
; pulse duration: 136 clocks
;***************************************************	

	; Set HDRIVE to normal rate
	ldi ZL,hi8(HDRIVE_CL)
    6c30:	e7 e0       	ldi	r30, 0x07	; 7
	sts _SFR_MEM_ADDR(OCR1AH),ZL	
    6c32:	e0 93 89 00 	sts	0x0089, r30
	ldi ZL,lo8(HDRIVE_CL)
    6c36:	eb e1       	ldi	r30, 0x1B	; 27
	sts _SFR_MEM_ADDR(OCR1AL),ZL
    6c38:	e0 93 88 00 	sts	0x0088, r30
	rjmp .
    6c3c:	00 c0       	rjmp	.+0      	; 0x6c3e <sync_hsync+0xe>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    6c3e:	28 98       	cbi	0x05, 0	; 5
	
	ldi ZL,2	;indicate update_sound to generate the SBI for pre-eq
    6c40:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    6c42:	00 c0       	rjmp	.+0      	; 0x6c44 <sync_hsync+0x14>
	call update_sound
    6c44:	0e 94 9f 36 	call	0x6d3e	; 0x6d3e <update_sound>

	;check if we have reached the first line to render
	ldi ZH,SYNC_HSYNC_PULSES
    6c48:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    6c4a:	00 90 a7 0c 	lds	r0, 0x0CA7
	sub ZH,r0				
    6c4e:	f0 19       	sub	r31, r0
	lds ZL,sync_pulse
    6c50:	e0 91 a1 0c 	lds	r30, 0x0CA1
	cp ZL,ZH
    6c54:	ef 17       	cp	r30, r31
	brsh no_render
    6c56:	d0 f4       	brcc	.+52     	; 0x6c8c <no_render>

	ldi ZH,SYNC_HSYNC_PULSES
    6c58:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    6c5a:	00 90 a7 0c 	lds	r0, 0x0CA7
	sub ZH,r0				
    6c5e:	f0 19       	sub	r31, r0
	lds r0,render_lines_count
    6c60:	00 90 a8 0c 	lds	r0, 0x0CA8
	sub ZH,r0			
    6c64:	f0 19       	sub	r31, r0
	cp ZL,ZH
    6c66:	ef 17       	cp	r30, r31
	brlo no_render
    6c68:	88 f0       	brcs	.+34     	; 0x6c8c <no_render>

	;push r1-r29
	ldi ZL,29
    6c6a:	ed e1       	ldi	r30, 0x1D	; 29
	clr ZH
    6c6c:	ff 27       	eor	r31, r31

00006c6e <push_loop>:
push_loop:
	ld r0,Z	;load value from register file
    6c6e:	00 80       	ld	r0, Z
	push r0
    6c70:	0f 92       	push	r0
	dec ZL
    6c72:	ea 95       	dec	r30
	brne push_loop	
    6c74:	e1 f7       	brne	.-8      	; 0x6c6e <push_loop>

	;timing compensation
	;to insure we always call the video mode 
	;routine at the same cycle	
	WAIT r16,230-(AUDIO_OUT_HSYNC_CYCLES)
    6c76:	06 e0       	ldi	r16, 0x06	; 6
    6c78:	0a 95       	dec	r16
    6c7a:	f1 f7       	brne	.-4      	; 0x6c78 <push_loop+0xa>

	call VMODE_FUNC		;TCNT1=0x234
    6c7c:	0e 94 65 32 	call	0x64ca	; 0x64ca <sub_video_mode3>

	;pop r1-r29
	ldi ZL,1
    6c80:	e1 e0       	ldi	r30, 0x01	; 1
	clr ZH
    6c82:	ff 27       	eor	r31, r31

00006c84 <pop_loop>:
pop_loop:
	pop r0
    6c84:	0f 90       	pop	r0
	st Z+,r0 ;store value to register file
    6c86:	01 92       	st	Z+, r0
	cpi ZL,30
    6c88:	ee 31       	cpi	r30, 0x1E	; 30
	brlo pop_loop	
    6c8a:	e0 f3       	brcs	.-8      	; 0x6c84 <pop_loop>

00006c8c <no_render>:

no_render:

	;check if it's the last hsync pulse and we are 
	;ready for VSYNC
	lds ZL,sync_pulse
    6c8c:	e0 91 a1 0c 	lds	r30, 0x0CA1
	cpi ZL,0
    6c90:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2
    6c92:	09 f0       	breq	.+2      	; 0x6c96 <no_render+0xa>
	rjmp sync_end
    6c94:	3c c0       	rjmp	.+120    	; 0x6d0e <sync_end>
;***************************************************
; Process VSYNC stuff
;***************************************************
	
	;push C-call registers
	push r18
    6c96:	2f 93       	push	r18
	push r19
    6c98:	3f 93       	push	r19
	push r20
    6c9a:	4f 93       	push	r20
	push r21
    6c9c:	5f 93       	push	r21
	push r22
    6c9e:	6f 93       	push	r22
	push r23
    6ca0:	7f 93       	push	r23
	push r24
    6ca2:	8f 93       	push	r24
	push r25
    6ca4:	9f 93       	push	r25
	push r26
    6ca6:	af 93       	push	r26
	push r27
    6ca8:	bf 93       	push	r27

	sei ;must enable ints for re-entrant sync pulses
    6caa:	78 94       	sei
	clr r1
    6cac:	11 24       	eor	r1, r1

	;set vsync flags
	clr ZL
    6cae:	ee 27       	eor	r30, r30
	sts sync_phase,ZL
    6cb0:	e0 93 a0 0c 	sts	0x0CA0, r30
	ldi ZL,SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    6cb4:	e2 e1       	ldi	r30, 0x12	; 18
	sts sync_pulse,ZL
    6cb6:	e0 93 a1 0c 	sts	0x0CA1, r30



	;increment the vsync counter
	lds r24,vsync_counter
    6cba:	80 91 b1 0c 	lds	r24, 0x0CB1
	lds r25,vsync_counter+1
    6cbe:	90 91 b2 0c 	lds	r25, 0x0CB2
	adiw r24,1
    6cc2:	01 96       	adiw	r24, 0x01	; 1
	sts vsync_counter,r24
    6cc4:	80 93 b1 0c 	sts	0x0CB1, r24
	sts vsync_counter+1,r25
    6cc8:	90 93 b2 0c 	sts	0x0CB2, r25


	;process user pre callback
	lds ZL,pre_vsync_user_callback+0
    6ccc:	e0 91 a3 0c 	lds	r30, 0x0CA3
	lds ZH,pre_vsync_user_callback+1
    6cd0:	f0 91 a4 0c 	lds	r31, 0x0CA4
	cp  ZL,r1
    6cd4:	e1 15       	cp	r30, r1
	cpc ZH,r1
    6cd6:	f1 05       	cpc	r31, r1
	breq .+2 
    6cd8:	09 f0       	breq	.+2      	; 0x6cdc <no_render+0x50>
	icall
    6cda:	09 95       	icall

	;refresh buttons states
	#if CONTROLLERS_VSYNC_READ == 1
		call ReadControllers
    6cdc:	0e 94 39 38 	call	0x7072	; 0x7072 <ReadControllers>
	#endif 
	
	;invoke stuff the video mode may have to do
	call VideoModeVsync	
    6ce0:	0e 94 42 46 	call	0x8c84	; 0x8c84 <VideoModeVsync>

	;process music (music, envelopes, etc)
	call process_music
    6ce4:	0e 94 99 36 	call	0x6d32	; 0x6d32 <process_music>
	clr r1
    6ce8:	11 24       	eor	r1, r1

	;process user post callback
	lds ZL,post_vsync_user_callback+0
    6cea:	e0 91 a5 0c 	lds	r30, 0x0CA5
	lds ZH,post_vsync_user_callback+1
    6cee:	f0 91 a6 0c 	lds	r31, 0x0CA6
	cp  ZL,r1
    6cf2:	e1 15       	cp	r30, r1
	cpc ZH,r1
    6cf4:	f1 05       	cpc	r31, r1
	breq .+2 
    6cf6:	09 f0       	breq	.+2      	; 0x6cfa <no_render+0x6e>
	icall
    6cf8:	09 95       	icall
	#if SNES_MOUSE == 1
		call ReadMouseExtendedData
		call ProcessMouseMovement
	#endif

	pop r27
    6cfa:	bf 91       	pop	r27
	pop r26
    6cfc:	af 91       	pop	r26
	pop r25
    6cfe:	9f 91       	pop	r25
	pop r24
    6d00:	8f 91       	pop	r24
	pop r23
    6d02:	7f 91       	pop	r23
	pop r22
    6d04:	6f 91       	pop	r22
	pop r21
    6d06:	5f 91       	pop	r21
	pop r20
    6d08:	4f 91       	pop	r20
	pop r19
    6d0a:	3f 91       	pop	r19
	pop r18
    6d0c:	2f 91       	pop	r18

00006d0e <sync_end>:
	
sync_end:	
	;restore flags
	pop ZL
    6d0e:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL
    6d10:	ef bf       	out	0x3f, r30	; 63
	
	pop ZH
    6d12:	ff 91       	pop	r31
	pop ZL
    6d14:	ef 91       	pop	r30
	pop r1
    6d16:	1f 90       	pop	r1
	pop r0
    6d18:	0f 90       	pop	r0
	reti
    6d1a:	18 95       	reti

00006d1c <hsync_pulse>:
; 0xf0 on the sbi 
;	
; Destroys: ZL (r30)
;*************************************************
hsync_pulse:
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    6d1c:	28 98       	cbi	0x05, 0	; 5
	ldi ZL,2
    6d1e:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    6d20:	00 c0       	rjmp	.+0      	; 0x6d22 <hsync_pulse+0x6>
	call update_sound
    6d22:	0e 94 9f 36 	call	0x6d3e	; 0x6d3e <update_sound>

	lds ZL,sync_pulse
    6d26:	e0 91 a1 0c 	lds	r30, 0x0CA1
	dec ZL
    6d2a:	ea 95       	dec	r30
	sts sync_pulse,ZL
    6d2c:	e0 93 a1 0c 	sts	0x0CA1, r30

	ret
    6d30:	08 95       	ret

00006d32 <process_music>:
; NOTE: registers r18-r27 are already saved by the caller
;***********************
process_music:
	
#if ENABLE_MIXER==1
	lds ZL,sound_enabled
    6d32:	e0 91 b7 0c 	lds	r30, 0x0CB7
	sbrc ZL,0
    6d36:	e0 fd       	sbrc	r30, 0
 	call ProcessMusic
    6d38:	0e 94 5f 3b 	call	0x76be	; 0x76be <ProcessMusic>
#endif

	ret
    6d3c:	08 95       	ret

00006d3e <update_sound>:

; Destroys: Z,r0,r1
; cycles: 212+
;****************************
update_sound:
	push r16
    6d3e:	0f 93       	push	r16
	push r17
    6d40:	1f 93       	push	r17
	push r18
    6d42:	2f 93       	push	r18
	push r28
    6d44:	cf 93       	push	r28
	push r29
    6d46:	df 93       	push	r29

	mov r18,ZL
    6d48:	2e 2f       	mov	r18, r30

	;channel 1 
	lds r16,tr1_step_lo
    6d4a:	00 91 b9 0c 	lds	r16, 0x0CB9
	lds r17,tr1_pos_frac
    6d4e:	10 91 bb 0c 	lds	r17, 0x0CBB
	add	r17,r16	;add step to fractional part of sample pos
    6d52:	10 0f       	add	r17, r16
	lds r16,tr1_step_hi	
    6d54:	00 91 ba 0c 	lds	r16, 0x0CBA
	lds ZL,tr1_pos_lo
    6d58:	e0 91 bc 0c 	lds	r30, 0x0CBC
	lds ZH,tr1_pos_hi 
    6d5c:	f0 91 bd 0c 	lds	r31, 0x0CBD
	adc ZL,r16	;add step to low byte of sample pos
    6d60:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    6d62:	04 91       	lpm	r16, Z
	sts tr1_pos_lo,ZL
    6d64:	e0 93 bc 0c 	sts	0x0CBC, r30
	sts tr1_pos_frac,r17
    6d68:	10 93 bb 0c 	sts	0x0CBB, r17
	lds r17,tr1_vol
    6d6c:	10 91 b8 0c 	lds	r17, 0x0CB8
	mulsu r16,r17;(sample*mixing vol)
    6d70:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend	
    6d72:	00 08       	sbc	r0, r0
	mov r28,r1	;set (sample*vol>>8) to mix buffer lsb
    6d74:	c1 2d       	mov	r28, r1
	mov r29,r0	;set mix buffer msb	
    6d76:	d0 2d       	mov	r29, r0
	nop
    6d78:	00 00       	nop

;38
	
	;channel 2
	lds r16,tr2_step_lo
    6d7a:	00 91 bf 0c 	lds	r16, 0x0CBF
	lds r17,tr2_pos_frac
    6d7e:	10 91 c1 0c 	lds	r17, 0x0CC1
	add	r17,r16	;add step to fractional part of sample pos
    6d82:	10 0f       	add	r17, r16
	lds r16,tr2_step_hi	
    6d84:	00 91 c0 0c 	lds	r16, 0x0CC0
	lds ZL,tr2_pos_lo
    6d88:	e0 91 c2 0c 	lds	r30, 0x0CC2
	lds ZH,tr2_pos_hi 
    6d8c:	f0 91 c3 0c 	lds	r31, 0x0CC3
	adc ZL,r16	;add step to low byte of sample pos
    6d90:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    6d92:	04 91       	lpm	r16, Z
	sts tr2_pos_lo,ZL
    6d94:	e0 93 c2 0c 	sts	0x0CC2, r30
	sts tr2_pos_frac,r17
    6d98:	10 93 c1 0c 	sts	0x0CC1, r17
	lds r17,tr2_vol
    6d9c:	10 91 be 0c 	lds	r17, 0x0CBE

	;*** Video sync update ***
	sbrc r18,0								;pre-eq/post-eq sync
    6da0:	20 fd       	sbrc	r18, 0
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    6da2:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,0								
    6da4:	20 ff       	sbrs	r18, 0
	rjmp .
    6da6:	00 c0       	rjmp	.+0      	; 0x6da8 <update_sound+0x6a>
	;*************************

	mulsu r16,r17;(sample*mixing vol)
    6da8:	01 03       	mulsu	r16, r17
	clr r0
    6daa:	00 24       	eor	r0, r0
	sbc r0,r0	;sign extend
    6dac:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    6dae:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb		
    6db0:	d0 1d       	adc	r29, r0
;70
	
	;channel 3
	lds r16,tr3_step_lo
    6db2:	00 91 c5 0c 	lds	r16, 0x0CC5
	lds r17,tr3_pos_frac
    6db6:	10 91 c7 0c 	lds	r17, 0x0CC7
	add	r17,r16				;add step to fractional part of sample pos
    6dba:	10 0f       	add	r17, r16
	lds r16,tr3_step_hi	
    6dbc:	00 91 c6 0c 	lds	r16, 0x0CC6
	lds ZL,tr3_pos_lo
    6dc0:	e0 91 c8 0c 	lds	r30, 0x0CC8
	lds ZH,tr3_pos_hi 
    6dc4:	f0 91 c9 0c 	lds	r31, 0x0CC9
	adc ZL,r16				;add step to low byte of sample pos
    6dc8:	e0 1f       	adc	r30, r16
	lpm	r16,Z				;load sample
    6dca:	04 91       	lpm	r16, Z
	sts tr3_pos_lo,ZL
    6dcc:	e0 93 c8 0c 	sts	0x0CC8, r30
	sts tr3_pos_frac,r17
    6dd0:	10 93 c7 0c 	sts	0x0CC7, r17
	lds r17,tr3_vol
    6dd4:	10 91 c4 0c 	lds	r17, 0x0CC4
	mulsu r16,r17			;(sample*mixing vol)
    6dd8:	01 03       	mulsu	r16, r17
	sbc r0,r0				;sign extend
    6dda:	00 08       	sbc	r0, r0
	add r28,r1				;add (sample*vol>>8) to mix buffer lsb
    6ddc:	c1 0d       	add	r28, r1
	adc r29,r0				;ajust mix buffer msb
    6dde:	d0 1d       	adc	r29, r0
;97	

	;channel 4 - 7/15 bit LFSR 
	lds r16,tr4_barrel_lo
    6de0:	00 91 cc 0c 	lds	r16, 0x0CCC
	lds r17,tr4_barrel_hi
    6de4:	10 91 cd 0c 	lds	r17, 0x0CCD
	lds ZL,tr4_divider
    6de8:	e0 91 ce 0c 	lds	r30, 0x0CCE
	dec ZL	
    6dec:	ea 95       	dec	r30
	brpl ch4_no_shift	
    6dee:	92 f4       	brpl	.+36     	; 0x6e14 <ch4_no_shift>

	lds ZH,tr4_params
    6df0:	f0 91 cb 0c 	lds	r31, 0x0CCB
	mov ZL,ZH
    6df4:	ef 2f       	mov	r30, r31
	lsr ZL 			;keep bits7:1
    6df6:	e6 95       	lsr	r30

	mov r0,r16  ;copy barrel shifter
    6df8:	00 2e       	mov	r0, r16
	lsr r0
    6dfa:	06 94       	lsr	r0
	eor r0,r16  ;xor bit0 and bit1
    6dfc:	00 26       	eor	r0, r16
	bst r0,0
    6dfe:	00 fa       	bst	r0, 0
	lsr r17
    6e00:	16 95       	lsr	r17
	ror r16
    6e02:	07 95       	ror	r16
	bld r17,6	;15 bits mode
    6e04:	16 f9       	bld	r17, 6
	sbrs ZH,0
    6e06:	f0 ff       	sbrs	r31, 0
	bld r16,6	;7 bits mode
    6e08:	06 f9       	bld	r16, 6

	sts tr4_barrel_lo,r16
    6e0a:	00 93 cc 0c 	sts	0x0CCC, r16
	sts tr4_barrel_hi,r17
    6e0e:	10 93 cd 0c 	sts	0x0CCD, r17

	rjmp ch4_end
    6e12:	03 c0       	rjmp	.+6      	; 0x6e1a <ch4_end>

00006e14 <ch4_no_shift>:
ch4_no_shift:
	;wait loop 21 cycles
	ldi r17,6
    6e14:	16 e0       	ldi	r17, 0x06	; 6
	dec r17
    6e16:	1a 95       	dec	r17
	brne .-4
    6e18:	f1 f7       	brne	.-4      	; 0x6e16 <ch4_no_shift+0x2>

00006e1a <ch4_end>:
	;rjmp .
ch4_end:

	sts tr4_divider,ZL
    6e1a:	e0 93 ce 0c 	sts	0x0CCE, r30
	ldi r17,0x80 ;-128
    6e1e:	10 e8       	ldi	r17, 0x80	; 128
	
	;*** Video sync update ***
	sbrc r18,1								;hsync
    6e20:	21 fd       	sbrc	r18, 1
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xF0
    6e22:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,1								
    6e24:	21 ff       	sbrs	r18, 1
	rjmp .
    6e26:	00 c0       	rjmp	.+0      	; 0x6e28 <ch4_end+0xe>
	;*************************
	
	sbrc r16,0
    6e28:	00 fd       	sbrc	r16, 0
	ldi r17,0x7f ;+127
    6e2a:	1f e7       	ldi	r17, 0x7F	; 127
	
	lds r16,tr4_vol
    6e2c:	00 91 ca 0c 	lds	r16, 0x0CCA

	mulsu r17,r16;(sample*mixing vol)
    6e30:	10 03       	mulsu	r17, r16
	sbc r0,r0	;sign extend
    6e32:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    6e34:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb
    6e36:	d0 1d       	adc	r29, r0
;142
#if SOUND_CHANNEL_5_ENABLE==1
	;channel 5 PCM -- 45 cycles

	;add fractional part
	lds r16,tr5_pos_frac
    6e38:	00 91 d3 0c 	lds	r16, 0x0CD3
	lds r17,tr5_step_lo 
    6e3c:	10 91 d1 0c 	lds	r17, 0x0CD1
	add r16,r17
    6e40:	01 0f       	add	r16, r17
	sts tr5_pos_frac,r16
    6e42:	00 93 d3 0c 	sts	0x0CD3, r16

	;add lo
	lds ZL,tr5_pos_lo
    6e46:	e0 91 d4 0c 	lds	r30, 0x0CD4
	lds r17,tr5_step_hi 
    6e4a:	10 91 d2 0c 	lds	r17, 0x0CD2
	adc ZL,r17
    6e4e:	e1 1f       	adc	r30, r17

	;add hi
	lds ZH,tr5_pos_hi
    6e50:	f0 91 d5 0c 	lds	r31, 0x0CD5
	ldi r16,0
    6e54:	00 e0       	ldi	r16, 0x00	; 0
	adc ZH,r16
    6e56:	f0 1f       	adc	r31, r16

	movw r16,ZL
    6e58:	8f 01       	movw	r16, r30
	lds r0,tr5_loop_len_lo
    6e5a:	00 90 d6 0c 	lds	r0, 0x0CD6
	lds r1,tr5_loop_len_hi	
    6e5e:	10 90 d7 0c 	lds	r1, 0x0CD7
	sub r16,r0
    6e62:	00 19       	sub	r16, r0
	sbc r17,r1
    6e64:	11 09       	sbc	r17, r1
	lds r0,tr5_loop_end_lo
    6e66:	00 90 d8 0c 	lds	r0, 0x0CD8
	lds r1,tr5_loop_end_hi
    6e6a:	10 90 d9 0c 	lds	r1, 0x0CD9

	cp ZL,r0
    6e6e:	e0 15       	cp	r30, r0
	cpc ZH,r1
    6e70:	f1 05       	cpc	r31, r1
	brlo .+2
    6e72:	08 f0       	brcs	.+2      	; 0x6e76 <ch4_end+0x5c>
	movw ZL,r16
    6e74:	f8 01       	movw	r30, r16

	sts tr5_pos_lo,ZL
    6e76:	e0 93 d4 0c 	sts	0x0CD4, r30
	sts tr5_pos_hi,ZH
    6e7a:	f0 93 d5 0c 	sts	0x0CD5, r31

	lpm	r16,Z	;load sample
    6e7e:	04 91       	lpm	r16, Z
	lds r17,tr5_vol
    6e80:	10 91 d0 0c 	lds	r17, 0x0CD0

	mulsu r16,r17;(sample*mixing vol)
    6e84:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend
    6e86:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    6e88:	c1 0d       	add	r28, r1
	adc r29,r0	;adjust mix buffer msb	
    6e8a:	d0 1d       	adc	r29, r0
#endif
	
	;final processing

	;clip
	clr r0
    6e8c:	00 24       	eor	r0, r0
	cpi r28,128	;> 127?
    6e8e:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0	
    6e90:	d0 05       	cpc	r29, r0
	brlt .+2
    6e92:	0c f0       	brlt	.+2      	; 0x6e96 <ch4_end+0x7c>
	ldi r28,127
    6e94:	cf e7       	ldi	r28, 0x7F	; 127
	
	dec r0
    6e96:	0a 94       	dec	r0
	cpi r28,-128; <-128?
    6e98:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0xff
    6e9a:	d0 05       	cpc	r29, r0
	brge .+2
    6e9c:	0c f4       	brge	.+2      	; 0x6ea0 <ch4_end+0x86>
	ldi r28,-128
    6e9e:	c0 e8       	ldi	r28, 0x80	; 128

	subi r28,128	;convert to unsigned		
    6ea0:	c0 58       	subi	r28, 0x80	; 128
	sts _SFR_MEM_ADDR(OCR2A),r28 ;output sound byte
    6ea2:	c0 93 b3 00 	sts	0x00B3, r28

00006ea6 <update_sound_end>:
#endif


update_sound_end:

	pop r29
    6ea6:	df 91       	pop	r29
	pop r28
    6ea8:	cf 91       	pop	r28
	pop r18
    6eaa:	2f 91       	pop	r18
	pop r17
    6eac:	1f 91       	pop	r17
	pop r16
    6eae:	0f 91       	pop	r16
	
	ret
    6eb0:	08 95       	ret

00006eb2 <SetSpritesTileTable>:
; C-callable
; r25:r24=pointer to sprites pixel data.
;*****************************
.section .text.SetSpritesTileTable
SetSpritesTileTable:
	sts sprites_tile_banks,r24
    6eb2:	80 93 8e 0c 	sts	0x0C8E, r24
	sts sprites_tile_banks+1,r25
    6eb6:	90 93 8f 0c 	sts	0x0C8F, r25
	ret
    6eba:	08 95       	ret

00006ebc <ClearVram>:
; C-callable
;************************************
.section .text.ClearVram
ClearVram:
	//init vram		
	ldi r30,lo8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    6ebc:	e0 e0       	ldi	r30, 0x00	; 0
	ldi r31,hi8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    6ebe:	f4 e0       	ldi	r31, 0x04	; 4

	ldi XL,lo8(vram)
    6ec0:	a0 e0       	ldi	r26, 0x00	; 0
	ldi XH,hi8(vram)
    6ec2:	b1 e0       	ldi	r27, 0x01	; 1

	ldi r22,RAM_TILES_COUNT
    6ec4:	6c e1       	ldi	r22, 0x1C	; 28

00006ec6 <fill_vram_loop>:

fill_vram_loop:
	st X+,r22
    6ec6:	6d 93       	st	X+, r22
	sbiw r30,1
    6ec8:	31 97       	sbiw	r30, 0x01	; 1
	brne fill_vram_loop
    6eca:	e9 f7       	brne	.-6      	; 0x6ec6 <fill_vram_loop>

	clr r1
    6ecc:	11 24       	eor	r1, r1

	ret
    6ece:	08 95       	ret

00006ed0 <SetTile>:
.section .text.SetTile
SetTile:
#if SCROLLING == 1
	;index formula is vram[((y>>3)*256)+8x+(y&7)]
	
	andi r24,0x1f
    6ed0:	8f 71       	andi	r24, 0x1F	; 31
	mov r23,r22
    6ed2:	76 2f       	mov	r23, r22
	lsr r22
    6ed4:	66 95       	lsr	r22
	lsr r22
    6ed6:	66 95       	lsr	r22
	lsr r22			;y>>3
    6ed8:	66 95       	lsr	r22
	ldi r18,8		
    6eda:	28 e0       	ldi	r18, 0x08	; 8
	mul r24,r18		;x*8
    6edc:	82 9f       	mul	r24, r18
	movw XL,r0
    6ede:	d0 01       	movw	r26, r0
	subi XL,lo8(-(vram))
    6ee0:	a0 50       	subi	r26, 0x00	; 0
	sbci XH,hi8(-(vram))
    6ee2:	bf 4f       	sbci	r27, 0xFF	; 255
	add XH,r22		;vram+((y>>3)*256)
    6ee4:	b6 0f       	add	r27, r22
	andi r23,7		;y&7	
    6ee6:	77 70       	andi	r23, 0x07	; 7
	add XL,r23
    6ee8:	a7 0f       	add	r26, r23
						
	subi r20,~(RAM_TILES_COUNT-1)	
    6eea:	44 5e       	subi	r20, 0xE4	; 228
	st X,r20
    6eec:	4c 93       	st	X, r20

	clr r1
    6eee:	11 24       	eor	r1, r1

	ret
    6ef0:	08 95       	ret

00006ef2 <SetTileTable>:
; C-callable
; r25:r24=pointer to tiles data
;************************************
.section .text.SetTileTable
SetTileTable:
	sts tile_table_lo,r24
    6ef2:	80 93 96 0c 	sts	0x0C96, r24
	sts tile_table_hi,r25	
    6ef6:	90 93 97 0c 	sts	0x0C97, r25
	ret
    6efa:	08 95       	ret

00006efc <GetVsyncFlag>:
;
; C-callable
;************************************
.section .text.GetVsyncFlag
GetVsyncFlag:
	lds r24,sync_flags
    6efc:	80 91 a2 0c 	lds	r24, 0x0CA2
	andi r24,SYNC_FLAG_VSYNC
    6f00:	81 70       	andi	r24, 0x01	; 1
	ret
    6f02:	08 95       	ret

00006f04 <ClearVsyncFlag>:
; 
; C-callable
;*****************************
.section .text.ClearVsyncFlag
ClearVsyncFlag:
	lds r18,sync_flags
    6f04:	20 91 a2 0c 	lds	r18, 0x0CA2
	andi r18,~SYNC_FLAG_VSYNC
    6f08:	2e 7f       	andi	r18, 0xFE	; 254
	sts sync_flags,r18
    6f0a:	20 93 a2 0c 	sts	0x0CA2, r18
	ret
    6f0e:	08 95       	ret

00006f10 <ReadJoypad>:
; r24=joypad No (0 or 1)
; returns: (int) r25:r24
;*****************************
.section .text.ReadJoypad
ReadJoypad:	
	tst r24
    6f10:	88 23       	and	r24, r24
	brne rj_p2
    6f12:	29 f4       	brne	.+10     	; 0x6f1e <rj_p2>
		
	lds r24,joypad1_status_lo
    6f14:	80 91 a9 0c 	lds	r24, 0x0CA9
	lds r25,joypad1_status_lo+1
    6f18:	90 91 aa 0c 	lds	r25, 0x0CAA
	ret
    6f1c:	08 95       	ret

00006f1e <rj_p2>:
rj_p2:
	lds r24,joypad2_status_lo
    6f1e:	80 91 ad 0c 	lds	r24, 0x0CAD
	lds r25,joypad2_status_lo+1	
    6f22:	90 91 ae 0c 	lds	r25, 0x0CAE

	ret
    6f26:	08 95       	ret

00006f28 <WaitUs>:
; r25:r24 - us to wait
; returns: void
;****************************
.section .text.WaitUs
WaitUs:	
	ldi r23,8
    6f28:	78 e0       	ldi	r23, 0x08	; 8
	dec 23
    6f2a:	7a 95       	dec	r23
	brne .-4 ;~1 us
    6f2c:	f1 f7       	brne	.-4      	; 0x6f2a <WaitUs+0x2>
	nop
    6f2e:	00 00       	nop
	sbiw r24,1
    6f30:	01 97       	sbiw	r24, 0x01	; 1
	brne WaitUs
    6f32:	d1 f7       	brne	.-12     	; 0x6f28 <WaitUs>

	ret
    6f34:	08 95       	ret

00006f36 <WriteEeprom>:
;****************************

.section .text.WriteEeprom
WriteEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    6f36:	f9 99       	sbic	0x1f, 1	; 31
   rjmp WriteEeprom
    6f38:	fe cf       	rjmp	.-4      	; 0x6f36 <WriteEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    6f3a:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    6f3c:	81 bd       	out	0x21, r24	; 33
   ; Write data (r22) to Data Register
   out _SFR_IO_ADDR(EEDR),r22
    6f3e:	60 bd       	out	0x20, r22	; 32
   cli
    6f40:	f8 94       	cli
   ; Write logical one to EEMPE
   sbi _SFR_IO_ADDR(EECR),EEMPE
    6f42:	fa 9a       	sbi	0x1f, 2	; 31
   ; Start eeprom write by setting EEPE
   sbi _SFR_IO_ADDR(EECR),EEPE
    6f44:	f9 9a       	sbi	0x1f, 1	; 31
   sei
    6f46:	78 94       	sei
   ret
    6f48:	08 95       	ret

00006f4a <ReadEeprom>:
; r24 - value read
;****************************
.section .text.ReadEeprom
ReadEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    6f4a:	f9 99       	sbic	0x1f, 1	; 31
   rjmp ReadEeprom
    6f4c:	fe cf       	rjmp	.-4      	; 0x6f4a <ReadEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    6f4e:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    6f50:	81 bd       	out	0x21, r24	; 33
   ; Start eeprom read by writing EERE
   cli
    6f52:	f8 94       	cli
   sbi _SFR_IO_ADDR(EECR),EERE
    6f54:	f8 9a       	sbi	0x1f, 0	; 31
   ; Read data from Data Register
   in r24,_SFR_IO_ADDR(EEDR)
    6f56:	80 b5       	in	r24, 0x20	; 32
   sei
    6f58:	78 94       	sei
   ret
    6f5a:	08 95       	ret

00006f5c <wdt_randomize>:
	.global wdt_randomize
	.section .text.wdt_randomize
	wdt_randomize:

		;set timer 1 full speed count to 0xffff
		ldi r24,0
    6f5c:	80 e0       	ldi	r24, 0x00	; 0
		sts sync_pulse,r24
    6f5e:	80 93 a1 0c 	sts	0x0CA1, r24


		sts _SFR_MEM_ADDR(TIMSK1),r24
    6f62:	80 93 6f 00 	sts	0x006F, r24
		sts _SFR_MEM_ADDR(OCR1AL),r24
    6f66:	80 93 88 00 	sts	0x0088, r24
		sts _SFR_MEM_ADDR(OCR1AH),r24
    6f6a:	80 93 89 00 	sts	0x0089, r24
		sts _SFR_MEM_ADDR(OCR1BL),r24
    6f6e:	80 93 8a 00 	sts	0x008A, r24
		sts _SFR_MEM_ADDR(OCR1BH),r24
    6f72:	80 93 8b 00 	sts	0x008B, r24
		sts _SFR_MEM_ADDR(TCNT1H),r24
    6f76:	80 93 85 00 	sts	0x0085, r24
		sts _SFR_MEM_ADDR(TCNT1L),r24
    6f7a:	80 93 84 00 	sts	0x0084, r24
		
		sts _SFR_MEM_ADDR(TCCR1A),r24	
    6f7e:	80 93 80 00 	sts	0x0080, r24
		ldi 24,(1<<CS10)
    6f82:	81 e0       	ldi	r24, 0x01	; 1
		sts _SFR_MEM_ADDR(TCCR1B),r24
    6f84:	80 93 81 00 	sts	0x0081, r24

		cli
    6f88:	f8 94       	cli

		;enable watchdog at fastest speed and generate interrupts
		ldi r24,0
    6f8a:	80 e0       	ldi	r24, 0x00	; 0
		sts _SFR_MEM_ADDR(MCUSR),r24	
    6f8c:	80 93 54 00 	sts	0x0054, r24
		ldi r25,(1<<WDIE)+(1<<WDE)+(0<<WDP3)+(0<<WDP2)+(0<<WDP1)+(0<<WDP0)
    6f90:	98 e4       	ldi	r25, 0x48	; 72
		lds r24,_SFR_MEM_ADDR(WDTCSR)
    6f92:	80 91 60 00 	lds	r24, 0x0060
		ori r24,(1<<WDCE)+(1<<WDE)
    6f96:	88 61       	ori	r24, 0x18	; 24
		sts _SFR_MEM_ADDR(WDTCSR),r24
    6f98:	80 93 60 00 	sts	0x0060, r24
		sts _SFR_MEM_ADDR(WDTCSR),r25
    6f9c:	90 93 60 00 	sts	0x0060, r25
	
		sei
    6fa0:	78 94       	sei

00006fa2 <wait>:

		;generate 8 random cycles
	wait:
		lds r24,sync_pulse ;using the yet unalocated "sync_pulse" as a temp variable
    6fa2:	80 91 a1 0c 	lds	r24, 0x0CA1
		cpi r24,8
    6fa6:	88 30       	cpi	r24, 0x08	; 8
		brlo wait
    6fa8:	e0 f3       	brcs	.-8      	; 0x6fa2 <wait>

		ret
    6faa:	08 95       	ret

00006fac <__vector_8>:
	;*************************************
	; Watchdog timer interrupt
	;*************************************
	WDT_vect:
		;save flags & status register
		push r16
    6fac:	0f 93       	push	r16
		push r17
    6fae:	1f 93       	push	r17

		in r16,_SFR_IO_ADDR(SREG)
    6fb0:	0f b7       	in	r16, 0x3f	; 63
		push r16
    6fb2:	0f 93       	push	r16

		lds r16,sync_pulse
    6fb4:	00 91 a1 0c 	lds	r16, 0x0CA1
		inc r16
    6fb8:	03 95       	inc	r16
		sts sync_pulse,r16
    6fba:	00 93 a1 0c 	sts	0x0CA1, r16

		;XOR succesive timer1 LSB into a int
		sbrc r16,0
    6fbe:	00 fd       	sbrc	r16, 0
		rjmp 1f
    6fc0:	08 c0       	rjmp	.+16     	; 0x6fd2 <__vector_8+0x26>
		lds r17,random_value
    6fc2:	10 91 b3 0c 	lds	r17, 0x0CB3
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    6fc6:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    6fca:	10 27       	eor	r17, r16
		sts random_value,r17
    6fcc:	10 93 b3 0c 	sts	0x0CB3, r17
		rjmp 2f
    6fd0:	07 c0       	rjmp	.+14     	; 0x6fe0 <__vector_8+0x34>
	1:
		lds r17,random_value+1
    6fd2:	10 91 b4 0c 	lds	r17, 0x0CB4
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    6fd6:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    6fda:	10 27       	eor	r17, r16
		sts random_value+1,r17
    6fdc:	10 93 b4 0c 	sts	0x0CB4, r17
	2:

		ldi r16,(1<<WDIE)+(1<<WDE)
    6fe0:	08 e4       	ldi	r16, 0x48	; 72
		sts _SFR_MEM_ADDR(WDTCSR),r16
    6fe2:	00 93 60 00 	sts	0x0060, r16

		;restore flags
		pop r16
    6fe6:	0f 91       	pop	r16
		out _SFR_IO_ADDR(SREG),r16
    6fe8:	0f bf       	out	0x3f, r16	; 63
	
		pop r17
    6fea:	1f 91       	pop	r17
		pop r16
    6fec:	0f 91       	pop	r16
		reti
    6fee:	18 95       	reti

00006ff0 <SoftReset>:

/**
 * Performs a software reset
 */
void SoftReset(void){        
	wdt_enable(WDTO_15MS);  
    6ff0:	98 e0       	ldi	r25, 0x08	; 8
    6ff2:	88 e1       	ldi	r24, 0x18	; 24
    6ff4:	0f b6       	in	r0, 0x3f	; 63
    6ff6:	f8 94       	cli
    6ff8:	a8 95       	wdr
    6ffa:	80 93 60 00 	sts	0x0060, r24
    6ffe:	0f be       	out	0x3f, r0	; 63
    7000:	90 93 60 00 	sts	0x0060, r25
	while(1);
    7004:	ff cf       	rjmp	.-2      	; 0x7004 <SoftReset+0x14>

00007006 <ReadButtons>:
void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
	unsigned char i;

	//latch controllers
	JOYPAD_OUT_PORT|=_BV(JOYPAD_LATCH_PIN);
    7006:	12 9a       	sbi	0x02, 2	; 2
		}else{
			Wait200ns();
			Wait200ns();
		}	
	#else
		Wait200ns();
    7008:	c8 95       	lpm
    700a:	c8 95       	lpm
		Wait200ns();
    700c:	c8 95       	lpm
    700e:	c8 95       	lpm
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));
    7010:	12 98       	cbi	0x02, 2	; 2
    7012:	40 e1       	ldi	r20, 0x10	; 16
	DisplayLogo();
	
}

void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
    7014:	80 e0       	ldi	r24, 0x00	; 0
    7016:	90 e0       	ldi	r25, 0x00	; 0
    7018:	20 e0       	ldi	r18, 0x00	; 0
    701a:	30 e0       	ldi	r19, 0x00	; 0


	//read button states
	for(i=0;i<16;i++){

		p1ButtonsLo>>=1;
    701c:	36 95       	lsr	r19
    701e:	27 95       	ror	r18
		p2ButtonsLo>>=1;
    7020:	96 95       	lsr	r25
    7022:	87 95       	ror	r24
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    7024:	c8 95       	lpm
    7026:	c8 95       	lpm
			Wait200ns();
    7028:	c8 95       	lpm
    702a:	c8 95       	lpm
		#endif
			
		//pulse clock pin		
		JOYPAD_OUT_PORT&=~(_BV(JOYPAD_CLOCK_PIN));
    702c:	13 98       	cbi	0x02, 3	; 2
		
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) p1ButtonsLo|=(1<<15);
    702e:	00 9b       	sbis	0x00, 0	; 0
    7030:	30 68       	ori	r19, 0x80	; 128
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) p2ButtonsLo|=(1<<15);
    7032:	01 9b       	sbis	0x00, 1	; 0
    7034:	90 68       	ori	r25, 0x80	; 128
		
		JOYPAD_OUT_PORT|=_BV(JOYPAD_CLOCK_PIN);
    7036:	13 9a       	sbi	0x02, 3	; 2
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    7038:	c8 95       	lpm
    703a:	c8 95       	lpm
			Wait200ns();
    703c:	c8 95       	lpm
    703e:	c8 95       	lpm
    7040:	41 50       	subi	r20, 0x01	; 1
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));


	//read button states
	for(i=0;i<16;i++){
    7042:	61 f7       	brne	.-40     	; 0x701c <ReadButtons+0x16>
		#endif

	}

	#if JOYSTICK==TYPE_SNES
		joypad1_status_lo=p1ButtonsLo;
    7044:	30 93 aa 0c 	sts	0x0CAA, r19
    7048:	20 93 a9 0c 	sts	0x0CA9, r18
		joypad2_status_lo=p2ButtonsLo;
    704c:	90 93 ae 0c 	sts	0x0CAE, r25
    7050:	80 93 ad 0c 	sts	0x0CAD, r24
	#else
		joypad1_status_lo=p1ButtonsLo&0xff;
		joypad2_status_lo=p2ButtonsLo&0xff;	
	#endif

	if(joypad1_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B) || joypad2_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B)){
    7054:	80 91 a9 0c 	lds	r24, 0x0CA9
    7058:	90 91 aa 0c 	lds	r25, 0x0CAA
    705c:	0f 97       	sbiw	r24, 0x0f	; 15
    705e:	31 f0       	breq	.+12     	; 0x706c <ReadButtons+0x66>
    7060:	80 91 ad 0c 	lds	r24, 0x0CAD
    7064:	90 91 ae 0c 	lds	r25, 0x0CAE
    7068:	0f 97       	sbiw	r24, 0x0f	; 15
    706a:	11 f4       	brne	.+4      	; 0x7070 <ReadButtons+0x6a>
		SoftReset();
    706c:	0e 94 f8 37 	call	0x6ff0	; 0x6ff0 <SoftReset>
    7070:	08 95       	ret

00007072 <ReadControllers>:
 * program when CONTROLLERS_VSYNC_READ==0.
*/
void ReadControllers(){

	//Detect if devices are connected.
	joypadsConnectionStatus=0;
    7072:	10 92 e3 0c 	sts	0x0CE3, r1
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) joypadsConnectionStatus|=1;
    7076:	00 99       	sbic	0x00, 0	; 0
    7078:	03 c0       	rjmp	.+6      	; 0x7080 <ReadControllers+0xe>
    707a:	81 e0       	ldi	r24, 0x01	; 1
    707c:	80 93 e3 0c 	sts	0x0CE3, r24
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) joypadsConnectionStatus|=2;
    7080:	01 99       	sbic	0x00, 1	; 0
    7082:	05 c0       	rjmp	.+10     	; 0x708e <ReadControllers+0x1c>
    7084:	80 91 e3 0c 	lds	r24, 0x0CE3
    7088:	82 60       	ori	r24, 0x02	; 2
    708a:	80 93 e3 0c 	sts	0x0CE3, r24
			
	//read the standard buttons
	ReadButtons();
    708e:	0c 94 03 38 	jmp	0x7006	; 0x7006 <ReadButtons>

00007092 <FormatEeprom>:
	return resp;
}

	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {
    7092:	cf 93       	push	r28
    7094:	df 93       	push	r29
    7096:	c0 e0       	ldi	r28, 0x00	; 0
    7098:	d0 e0       	ldi	r29, 0x00	; 0
    709a:	fe 01       	movw	r30, r28
    709c:	e2 56       	subi	r30, 0x62	; 98
    709e:	ff 4f       	sbci	r31, 0xFF	; 255

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
    70a0:	64 91       	lpm	r22, Z
    70a2:	ce 01       	movw	r24, r28
    70a4:	0e 94 9b 37 	call	0x6f36	; 0x6f36 <WriteEeprom>
    70a8:	21 96       	adiw	r28, 0x01	; 1
	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
    70aa:	c0 32       	cpi	r28, 0x20	; 32
    70ac:	d1 05       	cpc	r29, r1
    70ae:	a9 f7       	brne	.-22     	; 0x709a <FormatEeprom+0x8>
    70b0:	c0 e2       	ldi	r28, 0x20	; 32
    70b2:	d0 e0       	ldi	r29, 0x00	; 0
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
    70b4:	6f ef       	ldi	r22, 0xFF	; 255
    70b6:	ce 01       	movw	r24, r28
    70b8:	0e 94 9b 37 	call	0x6f36	; 0x6f36 <WriteEeprom>
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
    70bc:	6f ef       	ldi	r22, 0xFF	; 255
    70be:	ce 01       	movw	r24, r28
    70c0:	01 96       	adiw	r24, 0x01	; 1
    70c2:	0e 94 9b 37 	call	0x6f36	; 0x6f36 <WriteEeprom>
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
    70c6:	a0 96       	adiw	r28, 0x20	; 32
    70c8:	c1 15       	cp	r28, r1
    70ca:	88 e0       	ldi	r24, 0x08	; 8
    70cc:	d8 07       	cpc	r29, r24
    70ce:	91 f7       	brne	.-28     	; 0x70b4 <FormatEeprom+0x22>
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
   }
   
}
    70d0:	df 91       	pop	r29
    70d2:	cf 91       	pop	r28
    70d4:	08 95       	ret

000070d6 <isEepromFormatted>:
	  }
   }
}
	
//returns true if the EEPROM has been setup to work with the kernel.
bool isEepromFormatted(){
    70d6:	cf 93       	push	r28
	unsigned id;
	id=ReadEeprom(0)+(ReadEeprom(1)<<8);
    70d8:	80 e0       	ldi	r24, 0x00	; 0
    70da:	90 e0       	ldi	r25, 0x00	; 0
    70dc:	0e 94 a5 37 	call	0x6f4a	; 0x6f4a <ReadEeprom>
    70e0:	c8 2f       	mov	r28, r24
    70e2:	81 e0       	ldi	r24, 0x01	; 1
    70e4:	90 e0       	ldi	r25, 0x00	; 0
    70e6:	0e 94 a5 37 	call	0x6f4a	; 0x6f4a <ReadEeprom>
    70ea:	28 2f       	mov	r18, r24
    70ec:	30 e0       	ldi	r19, 0x00	; 0
    70ee:	32 2f       	mov	r19, r18
    70f0:	22 27       	eor	r18, r18
    70f2:	2c 0f       	add	r18, r28
    70f4:	31 1d       	adc	r19, r1
	return (id==EEPROM_SIGNATURE);
    70f6:	81 e0       	ldi	r24, 0x01	; 1
    70f8:	2a 35       	cpi	r18, 0x5A	; 90
    70fa:	35 45       	sbci	r19, 0x55	; 85
    70fc:	09 f0       	breq	.+2      	; 0x7100 <isEepromFormatted+0x2a>
    70fe:	80 e0       	ldi	r24, 0x00	; 0
}
    7100:	cf 91       	pop	r28
    7102:	08 95       	ret

00007104 <EepromBlockExists>:
 * @return
 *  0x00 = Success, Block exists.
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK.
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND.
 */
char EepromBlockExists(unsigned int blockId, u16* eepromAddr, u8* nextFreeBlockId){
    7104:	8f 92       	push	r8
    7106:	9f 92       	push	r9
    7108:	af 92       	push	r10
    710a:	bf 92       	push	r11
    710c:	cf 92       	push	r12
    710e:	df 92       	push	r13
    7110:	ef 92       	push	r14
    7112:	ff 92       	push	r15
    7114:	0f 93       	push	r16
    7116:	1f 93       	push	r17
    7118:	cf 93       	push	r28
    711a:	df 93       	push	r29
	u8 nextFreeBlock=0;
	u8 result=EEPROM_ERROR_BLOCK_NOT_FOUND;
	u16 id;
	*eepromAddr=0;
    711c:	fb 01       	movw	r30, r22
    711e:	11 82       	std	Z+1, r1	; 0x01
    7120:	10 82       	st	Z, r1

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    7122:	8f 3f       	cpi	r24, 0xFF	; 255
    7124:	ff ef       	ldi	r31, 0xFF	; 255
    7126:	9f 07       	cpc	r25, r31
    7128:	89 f1       	breq	.+98     	; 0x718c <EepromBlockExists+0x88>
    712a:	6a 01       	movw	r12, r20
    712c:	8b 01       	movw	r16, r22
    712e:	7c 01       	movw	r14, r24
    7130:	a1 2c       	mov	r10, r1
    7132:	b1 2c       	mov	r11, r1
    7134:	c0 e0       	ldi	r28, 0x00	; 0
    7136:	d3 e0       	ldi	r29, 0x03	; 3
    7138:	91 2c       	mov	r9, r1
		
	//scan all blocks and get the memory adress of that block and the next free block
	for(u8 i=0;i<EEPROM_MAX_BLOCKS;i++){
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
    713a:	c5 01       	movw	r24, r10
    713c:	0e 94 a5 37 	call	0x6f4a	; 0x6f4a <ReadEeprom>
    7140:	88 2e       	mov	r8, r24
    7142:	c5 01       	movw	r24, r10
    7144:	01 96       	adiw	r24, 0x01	; 1
    7146:	0e 94 a5 37 	call	0x6f4a	; 0x6f4a <ReadEeprom>
    714a:	28 2f       	mov	r18, r24
    714c:	30 e0       	ldi	r19, 0x00	; 0
    714e:	32 2f       	mov	r19, r18
    7150:	22 27       	eor	r18, r18
    7152:	28 0d       	add	r18, r8
    7154:	31 1d       	adc	r19, r1
		
		if(id==blockId){
    7156:	2e 15       	cp	r18, r14
    7158:	3f 05       	cpc	r19, r15
    715a:	29 f4       	brne	.+10     	; 0x7166 <EepromBlockExists+0x62>
			*eepromAddr=(i*EEPROM_BLOCK_SIZE);
    715c:	f8 01       	movw	r30, r16
    715e:	b1 82       	std	Z+1, r11	; 0x01
    7160:	a0 82       	st	Z, r10
			result=EEPROM_OK;
    7162:	d0 e0       	ldi	r29, 0x00	; 0
    7164:	0b c0       	rjmp	.+22     	; 0x717c <EepromBlockExists+0x78>
		}
		
		if(id==0xffff && nextFreeBlock==0){
    7166:	2f 3f       	cpi	r18, 0xFF	; 255
    7168:	3f 4f       	sbci	r19, 0xFF	; 255
    716a:	41 f4       	brne	.+16     	; 0x717c <EepromBlockExists+0x78>
    716c:	91 10       	cpse	r9, r1
    716e:	06 c0       	rjmp	.+12     	; 0x717c <EepromBlockExists+0x78>
			nextFreeBlock=i;
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
    7170:	c1 14       	cp	r12, r1
    7172:	d1 04       	cpc	r13, r1
    7174:	11 f0       	breq	.+4      	; 0x717a <EepromBlockExists+0x76>
    7176:	f6 01       	movw	r30, r12
    7178:	c0 83       	st	Z, r28
    717a:	9c 2e       	mov	r9, r28
	*eepromAddr=0;

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
		
	//scan all blocks and get the memory adress of that block and the next free block
	for(u8 i=0;i<EEPROM_MAX_BLOCKS;i++){
    717c:	cf 5f       	subi	r28, 0xFF	; 255
    717e:	f0 e2       	ldi	r31, 0x20	; 32
    7180:	af 0e       	add	r10, r31
    7182:	b1 1c       	adc	r11, r1
    7184:	c0 34       	cpi	r28, 0x40	; 64
    7186:	c9 f6       	brne	.-78     	; 0x713a <EepromBlockExists+0x36>
			nextFreeBlock=i;
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
		}
	}

	return result;
    7188:	8d 2f       	mov	r24, r29
    718a:	01 c0       	rjmp	.+2      	; 0x718e <EepromBlockExists+0x8a>
	u8 nextFreeBlock=0;
	u8 result=EEPROM_ERROR_BLOCK_NOT_FOUND;
	u16 id;
	*eepromAddr=0;

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    718c:	81 e0       	ldi	r24, 0x01	; 1
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
		}
	}

	return result;
}
    718e:	df 91       	pop	r29
    7190:	cf 91       	pop	r28
    7192:	1f 91       	pop	r17
    7194:	0f 91       	pop	r16
    7196:	ff 90       	pop	r15
    7198:	ef 90       	pop	r14
    719a:	df 90       	pop	r13
    719c:	cf 90       	pop	r12
    719e:	bf 90       	pop	r11
    71a0:	af 90       	pop	r10
    71a2:	9f 90       	pop	r9
    71a4:	8f 90       	pop	r8
    71a6:	08 95       	ret

000071a8 <EepromWriteBlock>:
 * Returns:
 *  0x00 = Success
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x02 = EEPROM_ERROR_FULL
 */
char EepromWriteBlock(struct EepromBlockStruct *block){
    71a8:	ef 92       	push	r14
    71aa:	ff 92       	push	r15
    71ac:	0f 93       	push	r16
    71ae:	1f 93       	push	r17
    71b0:	cf 93       	push	r28
    71b2:	df 93       	push	r29
    71b4:	00 d0       	rcall	.+0      	; 0x71b6 <EepromWriteBlock+0xe>
    71b6:	1f 92       	push	r1
    71b8:	cd b7       	in	r28, 0x3d	; 61
    71ba:	de b7       	in	r29, 0x3e	; 62
    71bc:	8c 01       	movw	r16, r24
	u16 eepromAddr=0;
    71be:	1a 82       	std	Y+2, r1	; 0x02
    71c0:	19 82       	std	Y+1, r1	; 0x01
	u8 *srcPtr=(unsigned char *)block,res,nextFreeBlock=0;
    71c2:	1b 82       	std	Y+3, r1	; 0x03

	res=EepromBlockExists(block->id,&eepromAddr,&nextFreeBlock);
    71c4:	ae 01       	movw	r20, r28
    71c6:	4d 5f       	subi	r20, 0xFD	; 253
    71c8:	5f 4f       	sbci	r21, 0xFF	; 255
    71ca:	be 01       	movw	r22, r28
    71cc:	6f 5f       	subi	r22, 0xFF	; 255
    71ce:	7f 4f       	sbci	r23, 0xFF	; 255
    71d0:	fc 01       	movw	r30, r24
    71d2:	80 81       	ld	r24, Z
    71d4:	91 81       	ldd	r25, Z+1	; 0x01
    71d6:	0e 94 82 38 	call	0x7104	; 0x7104 <EepromBlockExists>
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;
    71da:	88 23       	and	r24, r24
    71dc:	11 f0       	breq	.+4      	; 0x71e2 <EepromWriteBlock+0x3a>
    71de:	83 30       	cpi	r24, 0x03	; 3
    71e0:	19 f5       	brne	.+70     	; 0x7228 <EepromWriteBlock+0x80>

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    71e2:	89 81       	ldd	r24, Y+1	; 0x01
    71e4:	9a 81       	ldd	r25, Y+2	; 0x02
    71e6:	89 2b       	or	r24, r25
    71e8:	49 f4       	brne	.+18     	; 0x71fc <EepromWriteBlock+0x54>
    71ea:	8b 81       	ldd	r24, Y+3	; 0x03
    71ec:	88 23       	and	r24, r24
    71ee:	d9 f0       	breq	.+54     	; 0x7226 <EepromWriteBlock+0x7e>
	if(eepromAddr==0 && nextFreeBlock!=0) eepromAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;
    71f0:	f0 e2       	ldi	r31, 0x20	; 32
    71f2:	8f 9f       	mul	r24, r31
    71f4:	c0 01       	movw	r24, r0
    71f6:	11 24       	eor	r1, r1
    71f8:	9a 83       	std	Y+2, r25	; 0x02
    71fa:	89 83       	std	Y+1, r24	; 0x01
    71fc:	78 01       	movw	r14, r16
    71fe:	20 e2       	ldi	r18, 0x20	; 32
    7200:	e2 0e       	add	r14, r18
    7202:	f1 1c       	adc	r15, r1

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
		WriteEeprom(eepromAddr++,*srcPtr);
    7204:	f8 01       	movw	r30, r16
    7206:	61 91       	ld	r22, Z+
    7208:	8f 01       	movw	r16, r30
    720a:	89 81       	ldd	r24, Y+1	; 0x01
    720c:	9a 81       	ldd	r25, Y+2	; 0x02
    720e:	9c 01       	movw	r18, r24
    7210:	2f 5f       	subi	r18, 0xFF	; 255
    7212:	3f 4f       	sbci	r19, 0xFF	; 255
    7214:	3a 83       	std	Y+2, r19	; 0x02
    7216:	29 83       	std	Y+1, r18	; 0x01
    7218:	0e 94 9b 37 	call	0x6f36	; 0x6f36 <WriteEeprom>
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(eepromAddr==0 && nextFreeBlock!=0) eepromAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
    721c:	0e 15       	cp	r16, r14
    721e:	1f 05       	cpc	r17, r15
    7220:	89 f7       	brne	.-30     	; 0x7204 <EepromWriteBlock+0x5c>
		WriteEeprom(eepromAddr++,*srcPtr);
		srcPtr++;	
	}
	
	return 0;
    7222:	80 e0       	ldi	r24, 0x00	; 0
    7224:	01 c0       	rjmp	.+2      	; 0x7228 <EepromWriteBlock+0x80>
	u8 *srcPtr=(unsigned char *)block,res,nextFreeBlock=0;

	res=EepromBlockExists(block->id,&eepromAddr,&nextFreeBlock);
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    7226:	82 e0       	ldi	r24, 0x02	; 2
		WriteEeprom(eepromAddr++,*srcPtr);
		srcPtr++;	
	}
	
	return 0;
}
    7228:	0f 90       	pop	r0
    722a:	0f 90       	pop	r0
    722c:	0f 90       	pop	r0
    722e:	df 91       	pop	r29
    7230:	cf 91       	pop	r28
    7232:	1f 91       	pop	r17
    7234:	0f 91       	pop	r16
    7236:	ff 90       	pop	r15
    7238:	ef 90       	pop	r14
    723a:	08 95       	ret

0000723c <PatchCommand00>:
/*
 * Command 00: Set envelope speed per frame +127/-128, 0=no enveloppe
 * Param:
 */
void PatchCommand00(Track* track, char param){
	track->envelopeStep=param;
    723c:	fc 01       	movw	r30, r24
    723e:	67 87       	std	Z+15, r22	; 0x0f
    7240:	08 95       	ret

00007242 <PatchCommand01>:
 * Param:
 */
void PatchCommand01(Track* track, char param){
	(void)track; //to remove unused warning
	#if MIXER_CHAN4_TYPE == 0
		mixer.channels.type.noise.barrel=0x0101;
    7242:	e8 eb       	ldi	r30, 0xB8	; 184
    7244:	fc e0       	ldi	r31, 0x0C	; 12
    7246:	81 e0       	ldi	r24, 0x01	; 1
    7248:	91 e0       	ldi	r25, 0x01	; 1
    724a:	95 8b       	std	Z+21, r25	; 0x15
    724c:	84 8b       	std	Z+20, r24	; 0x14
		mixer.channels.type.noise.params=param;
    724e:	63 8b       	std	Z+19, r22	; 0x13
    7250:	08 95       	ret

00007252 <PatchCommand05>:
}
/*
 * Command 05: End of note/fx
 * Param:
 */
void PatchCommand05(Track* track, char param){
    7252:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags&=~(TRACK_FLAGS_PLAYING+TRACK_FLAGS_PRIORITY);	//patchPlaying=false,priority=0	
    7254:	90 81       	ld	r25, Z
    7256:	9f 75       	andi	r25, 0x5F	; 95
    7258:	90 83       	st	Z, r25
    725a:	08 95       	ret

0000725c <PatchCommand06>:

/*
 * Command 06: Note hold
 * Param:
 */
void PatchCommand06(Track* track, char param){
    725c:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags|=TRACK_FLAGS_HOLD_ENV; //patchEnvelopeHold=true;
    725e:	90 81       	ld	r25, Z
    7260:	90 64       	ori	r25, 0x40	; 64
    7262:	90 83       	st	Z, r25
    7264:	08 95       	ret

00007266 <PatchCommand07>:
 * Command 07: Set envelope volume
 * Param:
 */

void PatchCommand07(Track* track, char param){
	track->envelopeVol=param;
    7266:	fc 01       	movw	r30, r24
    7268:	66 87       	std	Z+14, r22	; 0x0e
    726a:	08 95       	ret

0000726c <PatchCommand09>:
 * Command 09: Set tremolo level
 * Param:
*/

void PatchCommand09(Track* track, char param){
	track->tremoloLevel=param;
    726c:	fc 01       	movw	r30, r24
    726e:	62 87       	std	Z+10, r22	; 0x0a
    7270:	08 95       	ret

00007272 <PatchCommand10>:
/*
 * Command 10: Set tremolo rate
 * Param:
*/
void PatchCommand10(Track* track, char param){
	track->tremoloRate=param;
    7272:	fc 01       	movw	r30, r24
    7274:	63 87       	std	Z+11, r22	; 0x0b
    7276:	08 95       	ret

00007278 <PatchCommand11>:
/*
 * Command 11: Pitch slide (linear) 
 * Param: (+/-) half steps to slide to
*/

void PatchCommand11(Track* track, char param){
    7278:	cf 93       	push	r28
    727a:	df 93       	push	r29
    727c:	ec 01       	movw	r28, r24
    727e:	46 2f       	mov	r20, r22
	//slide to note from current note
	s16 currentStep,targetStep,delta;	
	
	currentStep=pgm_read_word(&(steptable[track->note]));
    7280:	29 81       	ldd	r18, Y+1	; 0x01
    7282:	30 e0       	ldi	r19, 0x00	; 0
    7284:	f9 01       	movw	r30, r18
    7286:	ee 0f       	add	r30, r30
    7288:	ff 1f       	adc	r31, r31
    728a:	e8 5f       	subi	r30, 0xF8	; 248
    728c:	f3 48       	sbci	r31, 0x83	; 131
    728e:	65 91       	lpm	r22, Z+
    7290:	74 91       	lpm	r23, Z
	targetStep=pgm_read_word(&(steptable[track->note+param]));	
    7292:	f9 01       	movw	r30, r18
    7294:	e4 0f       	add	r30, r20
    7296:	f1 1d       	adc	r31, r1
    7298:	47 fd       	sbrc	r20, 7
    729a:	fa 95       	dec	r31
    729c:	ee 0f       	add	r30, r30
    729e:	ff 1f       	adc	r31, r31
    72a0:	e8 5f       	subi	r30, 0xF8	; 248
    72a2:	f3 48       	sbci	r31, 0x83	; 131
    72a4:	85 91       	lpm	r24, Z+
    72a6:	94 91       	lpm	r25, Z
	delta=((targetStep-currentStep)/track->slideSpeed);
    72a8:	86 1b       	sub	r24, r22
    72aa:	97 0b       	sbc	r25, r23
    72ac:	68 85       	ldd	r22, Y+8	; 0x08
    72ae:	70 e0       	ldi	r23, 0x00	; 0
    72b0:	0e 94 b6 5b 	call	0xb76c	; 0xb76c <__divmodhi4>
	if(delta==0)delta++;
    72b4:	61 15       	cp	r22, r1
    72b6:	71 05       	cpc	r23, r1
    72b8:	11 f4       	brne	.+4      	; 0x72be <PatchCommand11+0x46>
    72ba:	61 e0       	ldi	r22, 0x01	; 1
    72bc:	70 e0       	ldi	r23, 0x00	; 0

	mixer.channels.all[track->channel].step+=delta;
    72be:	ea 81       	ldd	r30, Y+2	; 0x02
    72c0:	86 e0       	ldi	r24, 0x06	; 6
    72c2:	e8 9f       	mul	r30, r24
    72c4:	f0 01       	movw	r30, r0
    72c6:	11 24       	eor	r1, r1
    72c8:	e8 54       	subi	r30, 0x48	; 72
    72ca:	f3 4f       	sbci	r31, 0xF3	; 243
    72cc:	81 81       	ldd	r24, Z+1	; 0x01
    72ce:	92 81       	ldd	r25, Z+2	; 0x02
    72d0:	86 0f       	add	r24, r22
    72d2:	97 1f       	adc	r25, r23
    72d4:	92 83       	std	Z+2, r25	; 0x02
    72d6:	81 83       	std	Z+1, r24	; 0x01
	
	track->slideStep=delta;
    72d8:	7e 83       	std	Y+6, r23	; 0x06
    72da:	6d 83       	std	Y+5, r22	; 0x05
	track->flags|=TRACK_FLAGS_SLIDING;
    72dc:	88 81       	ld	r24, Y
    72de:	88 60       	ori	r24, 0x08	; 8
    72e0:	88 83       	st	Y, r24
	track->slideNote=track->note+param;
    72e2:	89 81       	ldd	r24, Y+1	; 0x01
    72e4:	48 0f       	add	r20, r24
    72e6:	4f 83       	std	Y+7, r20	; 0x07
}
    72e8:	df 91       	pop	r29
    72ea:	cf 91       	pop	r28
    72ec:	08 95       	ret

000072ee <PatchCommand12>:
/*
 * Command 12: Pitch slide speed 
 * Param: slide speed (fixed 4:4)
 */
void PatchCommand12(Track* track, char param){
	track->slideSpeed=param;
    72ee:	fc 01       	movw	r30, r24
    72f0:	60 87       	std	Z+8, r22	; 0x08
    72f2:	08 95       	ret

000072f4 <PatchCommand13>:
 *  Command 13: Loop start
 * Description: Defines the start of a loop. Works in conjunction with command 14 (PC_LOOP_END).
 *		 Param: loop count
 */
void PatchCommand13(Track* track, char param){
	track->loopCount=(u8)param;
    72f4:	fc 01       	movw	r30, r24
    72f6:	64 83       	std	Z+4, r22	; 0x04
    72f8:	08 95       	ret

000072fa <PatchCommand02>:
/*
 * Command 02: Set wave
 * Param:
 */
void PatchCommand02(Track* track, char param){
	SetMixerWave(track->channel,param);
    72fa:	fc 01       	movw	r30, r24
    72fc:	82 81       	ldd	r24, Z+2	; 0x02
    72fe:	0c 94 98 3d 	jmp	0x7b30	; 0x7b30 <SetMixerWave>

00007302 <PatchCommand03>:
}
/*
 * Command 03: Note up * param
 * Param:
 */
void PatchCommand03(Track* track, char param){
    7302:	fc 01       	movw	r30, r24
	track->note+=param;
    7304:	91 81       	ldd	r25, Z+1	; 0x01
    7306:	69 0f       	add	r22, r25
    7308:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(track->channel,track->note);
    730a:	82 81       	ldd	r24, Z+2	; 0x02
    730c:	0c 94 81 3d 	jmp	0x7b02	; 0x7b02 <SetMixerNote>

00007310 <PatchCommand04>:
}
/*
 * Command 04: Note down * param
 * Param:
 */
void PatchCommand04(Track* track, char param){
    7310:	fc 01       	movw	r30, r24
	track->note-=param;
    7312:	91 81       	ldd	r25, Z+1	; 0x01
    7314:	96 1b       	sub	r25, r22
    7316:	69 2f       	mov	r22, r25
    7318:	91 83       	std	Z+1, r25	; 0x01
	SetMixerNote(track->channel,track->note);
    731a:	82 81       	ldd	r24, Z+2	; 0x02
    731c:	0c 94 81 3d 	jmp	0x7b02	; 0x7b02 <SetMixerNote>

00007320 <PatchCommand08>:
/*
 * Command 08: Set Note/Pitch
 * Param:
 */

void PatchCommand08(Track* track, char param){
    7320:	1f 93       	push	r17
    7322:	cf 93       	push	r28
    7324:	df 93       	push	r29
    7326:	ec 01       	movw	r28, r24
    7328:	16 2f       	mov	r17, r22
	SetMixerNote(track->channel,param);
    732a:	8a 81       	ldd	r24, Y+2	; 0x02
    732c:	0e 94 81 3d 	call	0x7b02	; 0x7b02 <SetMixerNote>
	track->note=param;
    7330:	19 83       	std	Y+1, r17	; 0x01
	track->flags &= ~(TRACK_FLAGS_SLIDING);	
    7332:	88 81       	ld	r24, Y
    7334:	87 7f       	andi	r24, 0xF7	; 247
    7336:	88 83       	st	Y, r24
}
    7338:	df 91       	pop	r29
    733a:	cf 91       	pop	r28
    733c:	1f 91       	pop	r17
    733e:	08 95       	ret

00007340 <PatchCommand14>:
 *					1,PC_NOTE_DOWN,3,
 *					0,PC_LOOP_END,2,
 *					0,PATCH_END  
 *				};
 */
void PatchCommand14(Track* track, char param){
    7340:	dc 01       	movw	r26, r24
	if(track->loopCount>0){
    7342:	14 96       	adiw	r26, 0x04	; 4
    7344:	8c 91       	ld	r24, X
    7346:	14 97       	sbiw	r26, 0x04	; 4
    7348:	88 23       	and	r24, r24
    734a:	19 f1       	breq	.+70     	; 0x7392 <PatchCommand14+0x52>
    734c:	55 96       	adiw	r26, 0x15	; 21
    734e:	2d 91       	ld	r18, X+
    7350:	3c 91       	ld	r19, X
    7352:	56 97       	sbiw	r26, 0x16	; 22
		//track->patchCommandStreamPos=track->loopStart;
		if(param!=0){
    7354:	66 23       	and	r22, r22
    7356:	79 f0       	breq	.+30     	; 0x7376 <PatchCommand14+0x36>
			track->patchCommandStreamPos-=((param+1)*3);
    7358:	77 27       	eor	r23, r23
    735a:	67 fd       	sbrc	r22, 7
    735c:	70 95       	com	r23
    735e:	6f 5f       	subi	r22, 0xFF	; 255
    7360:	7f 4f       	sbci	r23, 0xFF	; 255
    7362:	ab 01       	movw	r20, r22
    7364:	44 0f       	add	r20, r20
    7366:	55 1f       	adc	r21, r21
    7368:	64 0f       	add	r22, r20
    736a:	75 1f       	adc	r23, r21
    736c:	26 1b       	sub	r18, r22
    736e:	37 0b       	sbc	r19, r23
    7370:	09 c0       	rjmp	.+18     	; 0x7384 <PatchCommand14+0x44>
			while(1){
				track->patchCommandStreamPos-=3;
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    7372:	ef 3f       	cpi	r30, 0xFF	; 255
    7374:	39 f0       	breq	.+14     	; 0x7384 <PatchCommand14+0x44>
		if(param!=0){
			track->patchCommandStreamPos-=((param+1)*3);
		}else{
			u8 command;
			while(1){
				track->patchCommandStreamPos-=3;
    7376:	23 50       	subi	r18, 0x03	; 3
    7378:	31 09       	sbc	r19, r1
    737a:	f9 01       	movw	r30, r18
    737c:	32 97       	sbiw	r30, 0x02	; 2
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
    737e:	e4 91       	lpm	r30, Z
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    7380:	ed 30       	cpi	r30, 0x0D	; 13
    7382:	b9 f7       	brne	.-18     	; 0x7372 <PatchCommand14+0x32>
    7384:	56 96       	adiw	r26, 0x16	; 22
    7386:	3c 93       	st	X, r19
    7388:	2e 93       	st	-X, r18
    738a:	55 97       	sbiw	r26, 0x15	; 21
			}
		}
		track->loopCount--;
    738c:	81 50       	subi	r24, 0x01	; 1
    738e:	14 96       	adiw	r26, 0x04	; 4
    7390:	8c 93       	st	X, r24
    7392:	08 95       	ret

00007394 <InitMusicPlayer>:

const Patch *patchPointers;

void InitMusicPlayer(const Patch *patchPointersParam){

	patchPointers=patchPointersParam;
    7394:	90 93 5c 0d 	sts	0x0D5C, r25
    7398:	80 93 5b 0d 	sts	0x0D5B, r24

	masterVolume=DEFAULT_MASTER_VOL;
    739c:	8f e6       	ldi	r24, 0x6F	; 111
    739e:	80 93 5e 0d 	sts	0x0D5E, r24
#if MIDI_IN == ENABLED
	InitUartRxBuffer();
	lastMidiInStatus=0;
#endif

	playSong=false;
    73a2:	10 92 b6 0c 	sts	0x0CB6, r1
    73a6:	e6 ef       	ldi	r30, 0xF6	; 246
    73a8:	fc e0       	ldi	r31, 0x0C	; 12

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    73aa:	80 e0       	ldi	r24, 0x00	; 0
		tracks[t].channel=t;
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    73ac:	90 e1       	ldi	r25, 0x10	; 16
		tracks[t].noteVol=0;
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    73ae:	3f ef       	ldi	r19, 0xFF	; 255
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
    73b0:	28 e1       	ldi	r18, 0x18	; 24
    73b2:	df 01       	movw	r26, r30
    73b4:	1e 97       	sbiw	r26, 0x0e	; 14

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].channel=t;
    73b6:	8c 93       	st	X, r24
    73b8:	12 97       	sbiw	r26, 0x02	; 2
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    73ba:	9c 93       	st	X, r25
    73bc:	1d 96       	adiw	r26, 0x0d	; 13
		tracks[t].noteVol=0;
    73be:	1c 92       	st	X, r1
    73c0:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    73c2:	3c 93       	st	X, r19
		tracks[t].patchNo=DEFAULT_PATCH;
    73c4:	10 82       	st	Z, r1
    73c6:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].tremoloRate=24; //~6hz
    73c8:	2c 93       	st	X, r18
    73ca:	13 97       	sbiw	r26, 0x03	; 3
		tracks[t].slideSpeed=0x10;
    73cc:	9c 93       	st	X, r25
#endif

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    73ce:	8f 5f       	subi	r24, 0xFF	; 255
    73d0:	77 96       	adiw	r30, 0x17	; 23
    73d2:	85 30       	cpi	r24, 0x05	; 5
    73d4:	71 f7       	brne	.-36     	; 0x73b2 <InitMusicPlayer+0x1e>
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
		tracks[t].slideSpeed=0x10;
	}

}
    73d6:	08 95       	ret

000073d8 <StartSong>:

#if MUSIC_ENGINE == MIDI

	void StartSong(const char *song){
    73d8:	e6 ee       	ldi	r30, 0xE6	; 230
    73da:	fc e0       	ldi	r31, 0x0C	; 12
		for(unsigned char t=0;t<CHANNELS;t++){
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    73dc:	3f ef       	ldi	r19, 0xFF	; 255

#if MUSIC_ENGINE == MIDI

	void StartSong(const char *song){
		for(unsigned char t=0;t<CHANNELS;t++){
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    73de:	20 81       	ld	r18, Z
    73e0:	2f 77       	andi	r18, 0x7F	; 127
    73e2:	20 83       	st	Z, r18
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    73e4:	33 83       	std	Z+3, r19	; 0x03
    73e6:	77 96       	adiw	r30, 0x17	; 23
}

#if MUSIC_ENGINE == MIDI

	void StartSong(const char *song){
		for(unsigned char t=0;t<CHANNELS;t++){
    73e8:	2d e0       	ldi	r18, 0x0D	; 13
    73ea:	e9 35       	cpi	r30, 0x59	; 89
    73ec:	f2 07       	cpc	r31, r18
    73ee:	b9 f7       	brne	.-18     	; 0x73de <StartSong+0x6>
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
		}

		songPos=song+1; //skip first delta-time
    73f0:	01 96       	adiw	r24, 0x01	; 1
    73f2:	90 93 63 0d 	sts	0x0D63, r25
    73f6:	80 93 62 0d 	sts	0x0D62, r24
		songStart=song+1;//skip first delta-time
    73fa:	90 93 e5 0c 	sts	0x0CE5, r25
    73fe:	80 93 e4 0c 	sts	0x0CE4, r24
		loopStart=song+1;
    7402:	90 93 65 0d 	sts	0x0D65, r25
    7406:	80 93 64 0d 	sts	0x0D64, r24
		nextDeltaTime=0;
    740a:	10 92 60 0d 	sts	0x0D60, r1
    740e:	10 92 5f 0d 	sts	0x0D5F, r1
		currDeltaTime=0;
    7412:	10 92 5a 0d 	sts	0x0D5A, r1
    7416:	10 92 59 0d 	sts	0x0D59, r1
		songSpeed=0;
    741a:	10 92 61 0d 	sts	0x0D61, r1

		lastStatus=0;
    741e:	10 92 5d 0d 	sts	0x0D5D, r1
		playSong=true;
    7422:	81 e0       	ldi	r24, 0x01	; 1
    7424:	80 93 b6 0c 	sts	0x0CB6, r24
    7428:	08 95       	ret

0000742a <StopSong>:


void StopSong(){

	for(u8 i=0;i<CHANNELS;i++){
		tracks[i].envelopeStep=-6;
    742a:	e6 ee       	ldi	r30, 0xE6	; 230
    742c:	fc e0       	ldi	r31, 0x0C	; 12
    742e:	8a ef       	ldi	r24, 0xFA	; 250
    7430:	87 87       	std	Z+15, r24	; 0x0f
    7432:	86 a3       	std	Z+38, r24	; 0x26
    7434:	80 93 23 0d 	sts	0x0D23, r24
    7438:	80 93 3a 0d 	sts	0x0D3A, r24
    743c:	80 93 51 0d 	sts	0x0D51, r24
	}

	playSong=false;
    7440:	10 92 b6 0c 	sts	0x0CB6, r1
    7444:	08 95       	ret

00007446 <ReadVarLen>:
}



unsigned int ReadVarLen(const char **songPos)
{
    7446:	dc 01       	movw	r26, r24
    unsigned int value;
    unsigned char c;


    if ( (value = pgm_read_byte((*songPos)++)) & 0x80 )
    7448:	ed 91       	ld	r30, X+
    744a:	fc 91       	ld	r31, X
    744c:	11 97       	sbiw	r26, 0x01	; 1
    744e:	9f 01       	movw	r18, r30
    7450:	2f 5f       	subi	r18, 0xFF	; 255
    7452:	3f 4f       	sbci	r19, 0xFF	; 255
    7454:	11 96       	adiw	r26, 0x01	; 1
    7456:	3c 93       	st	X, r19
    7458:	2e 93       	st	-X, r18
    745a:	e4 91       	lpm	r30, Z
    745c:	e7 fd       	sbrc	r30, 7
    745e:	03 c0       	rjmp	.+6      	; 0x7466 <ReadVarLen+0x20>
    7460:	8e 2f       	mov	r24, r30
    7462:	90 e0       	ldi	r25, 0x00	; 0
    7464:	08 95       	ret
    {
       value &= 0x7F;
    7466:	ef 77       	andi	r30, 0x7F	; 127
    7468:	8e 2f       	mov	r24, r30
    746a:	90 e0       	ldi	r25, 0x00	; 0
       do
       {
         value = (value << 7) + ((c = pgm_read_byte((*songPos)++)) & 0x7F);
    746c:	96 95       	lsr	r25
    746e:	98 2f       	mov	r25, r24
    7470:	88 27       	eor	r24, r24
    7472:	97 95       	ror	r25
    7474:	87 95       	ror	r24
    7476:	2f 5f       	subi	r18, 0xFF	; 255
    7478:	3f 4f       	sbci	r19, 0xFF	; 255
    747a:	f9 01       	movw	r30, r18
    747c:	31 97       	sbiw	r30, 0x01	; 1
    747e:	e4 91       	lpm	r30, Z
    7480:	4e 2f       	mov	r20, r30
    7482:	4f 77       	andi	r20, 0x7F	; 127
    7484:	84 0f       	add	r24, r20
    7486:	91 1d       	adc	r25, r1
       } while (c & 0x80);
    7488:	e7 fd       	sbrc	r30, 7
    748a:	f0 cf       	rjmp	.-32     	; 0x746c <ReadVarLen+0x26>
    748c:	2d 93       	st	X+, r18
    748e:	3c 93       	st	X, r19
    }


    return value;
}
    7490:	08 95       	ret

00007492 <TriggerCommon>:




void TriggerCommon(Track* track,u8 patch,u8 volume,u8 note){
    7492:	ef 92       	push	r14
    7494:	ff 92       	push	r15
    7496:	0f 93       	push	r16
    7498:	1f 93       	push	r17
    749a:	cf 93       	push	r28
    749c:	df 93       	push	r29
    749e:	1f 92       	push	r1
    74a0:	cd b7       	in	r28, 0x3d	; 61
    74a2:	de b7       	in	r29, 0x3e	; 62
    74a4:	7c 01       	movw	r14, r24
    74a6:	16 2f       	mov	r17, r22
		
	bool isFx = (track->flags&TRACK_FLAGS_PRIORITY);
    74a8:	fc 01       	movw	r30, r24
    74aa:	80 81       	ld	r24, Z
    74ac:	08 2f       	mov	r16, r24
    74ae:	00 1f       	adc	r16, r16
    74b0:	00 27       	eor	r16, r16
    74b2:	00 1f       	adc	r16, r16

	track->envelopeStep=0; 
    74b4:	17 86       	std	Z+15, r1	; 0x0f
	track->envelopeVol=0xff; 
    74b6:	9f ef       	ldi	r25, 0xFF	; 255
    74b8:	96 87       	std	Z+14, r25	; 0x0e
	track->noteVol=volume;
    74ba:	45 87       	std	Z+13, r20	; 0x0d
	track->patchPlayingTime=0;
    74bc:	14 8a       	std	Z+20, r1	; 0x14
	track->flags&=(~(TRACK_FLAGS_HOLD_ENV|TRACK_FLAGS_SLIDING));
    74be:	87 7b       	andi	r24, 0xB7	; 183
    74c0:	80 83       	st	Z, r24
	track->tremoloLevel=0;
    74c2:	12 86       	std	Z+10, r1	; 0x0a
	track->tremoloPos=0;
    74c4:	11 86       	std	Z+9, r1	; 0x09
	track->note=note;
    74c6:	21 83       	std	Z+1, r18	; 0x01
	track->loopCount=0;
    74c8:	14 82       	std	Z+4, r1	; 0x04

#if MUSIC_ENGINE == MIDI
	track->expressionVol=DEFAULT_EXPRESSION_VOL;
    74ca:	93 83       	std	Z+3, r25	; 0x03
#endif

	#if SOUND_MIXER == MIXER_TYPE_INLINE

		if(track->channel==3){
    74cc:	82 81       	ldd	r24, Z+2	; 0x02
    74ce:	83 30       	cpi	r24, 0x03	; 3
    74d0:	69 f4       	brne	.+26     	; 0x74ec <TriggerCommon+0x5a>
			//noise channel		
			if(!isFx) patch=note;			
    74d2:	01 11       	cpse	r16, r1
    74d4:	01 c0       	rjmp	.+2      	; 0x74d8 <TriggerCommon+0x46>
    74d6:	12 2f       	mov	r17, r18
			mixer.channels.type.noise.barrel=0x0101;				
    74d8:	81 e0       	ldi	r24, 0x01	; 1
    74da:	91 e0       	ldi	r25, 0x01	; 1
    74dc:	90 93 cd 0c 	sts	0x0CCD, r25
    74e0:	80 93 cc 0c 	sts	0x0CCC, r24
			mixer.channels.type.noise.params=1; //default (15bits,no divider)
    74e4:	81 e0       	ldi	r24, 0x01	; 1
    74e6:	80 93 cb 0c 	sts	0x0CCB, r24
    74ea:	39 c0       	rjmp	.+114    	; 0x755e <TriggerCommon+0xcc>

		#if SOUND_CHANNEL_5_ENABLE==1		

		}else if(track->channel==4){
    74ec:	84 30       	cpi	r24, 0x04	; 4
    74ee:	69 f5       	brne	.+90     	; 0x754a <TriggerCommon+0xb8>
				//PCM channel					
				mixer.channels.type.pcm.positionFrac=0;
    74f0:	10 92 d3 0c 	sts	0x0CD3, r1
				const char *pos=(const char*)pgm_read_word(&(patchPointers[patch].pcmData));
    74f4:	80 91 5b 0d 	lds	r24, 0x0D5B
    74f8:	90 91 5c 0d 	lds	r25, 0x0D5C
    74fc:	f9 e0       	ldi	r31, 0x09	; 9
    74fe:	6f 9f       	mul	r22, r31
    7500:	80 0d       	add	r24, r0
    7502:	91 1d       	adc	r25, r1
    7504:	11 24       	eor	r1, r1
    7506:	fc 01       	movw	r30, r24
    7508:	31 96       	adiw	r30, 0x01	; 1
    750a:	a5 91       	lpm	r26, Z+
    750c:	b4 91       	lpm	r27, Z
				mixer.channels.type.pcm.position=pos;				
    750e:	b0 93 d5 0c 	sts	0x0CD5, r27
    7512:	a0 93 d4 0c 	sts	0x0CD4, r26
				mixer.pcmLoopLenght=pgm_read_word(&(patchPointers[patch].loopEnd))-pgm_read_word(&(patchPointers[patch].loopStart));
    7516:	ac 01       	movw	r20, r24
    7518:	49 5f       	subi	r20, 0xF9	; 249
    751a:	5f 4f       	sbci	r21, 0xFF	; 255
    751c:	fa 01       	movw	r30, r20
    751e:	65 91       	lpm	r22, Z+
    7520:	74 91       	lpm	r23, Z
    7522:	05 96       	adiw	r24, 0x05	; 5
    7524:	fc 01       	movw	r30, r24
    7526:	85 91       	lpm	r24, Z+
    7528:	94 91       	lpm	r25, Z
    752a:	68 1b       	sub	r22, r24
    752c:	79 0b       	sbc	r23, r25
    752e:	70 93 d7 0c 	sts	0x0CD7, r23
    7532:	60 93 d6 0c 	sts	0x0CD6, r22
				mixer.pcmLoopEnd=pos+pgm_read_word(&(patchPointers[patch].loopEnd));
    7536:	fa 01       	movw	r30, r20
    7538:	85 91       	lpm	r24, Z+
    753a:	94 91       	lpm	r25, Z
    753c:	a8 0f       	add	r26, r24
    753e:	b9 1f       	adc	r27, r25
    7540:	b0 93 d9 0c 	sts	0x0CD9, r27
    7544:	a0 93 d8 0c 	sts	0x0CD8, r26
    7548:	05 c0       	rjmp	.+10     	; 0x7554 <TriggerCommon+0xc2>
				SetMixerNote(track->channel,note);
		#endif	

		}else{					
			//wave channels					
			SetMixerWave(track->channel,0);//default wave
    754a:	60 e0       	ldi	r22, 0x00	; 0
    754c:	29 83       	std	Y+1, r18	; 0x01
    754e:	0e 94 98 3d 	call	0x7b30	; 0x7b30 <SetMixerWave>
			SetMixerNote(track->channel,note);
    7552:	29 81       	ldd	r18, Y+1	; 0x01
    7554:	62 2f       	mov	r22, r18
    7556:	f7 01       	movw	r30, r14
    7558:	82 81       	ldd	r24, Z+2	; 0x02
    755a:	0e 94 81 3d 	call	0x7b02	; 0x7b02 <SetMixerNote>
		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
		track->fxPatchNo=patch;
    755e:	f7 01       	movw	r30, r14

		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
    7560:	00 23       	and	r16, r16
    7562:	11 f0       	breq	.+4      	; 0x7568 <TriggerCommon+0xd6>
		track->fxPatchNo=patch;
    7564:	11 8b       	std	Z+17, r17	; 0x11
    7566:	01 c0       	rjmp	.+2      	; 0x756a <TriggerCommon+0xd8>
	}else{
		track->patchNo=patch;	
    7568:	10 8b       	std	Z+16, r17	; 0x10
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
    756a:	e0 91 5b 0d 	lds	r30, 0x0D5B
    756e:	f0 91 5c 0d 	lds	r31, 0x0D5C
    7572:	39 e0       	ldi	r19, 0x09	; 9
    7574:	13 9f       	mul	r17, r19
    7576:	e0 0d       	add	r30, r0
    7578:	f1 1d       	adc	r31, r1
    757a:	11 24       	eor	r1, r1
    757c:	33 96       	adiw	r30, 0x03	; 3
    757e:	85 91       	lpm	r24, Z+
    7580:	94 91       	lpm	r25, Z
	if(pos==NULL){
		track->patchCommandStreamPos=NULL;
    7582:	f7 01       	movw	r30, r14
	}else{
		track->patchNo=patch;	
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
	if(pos==NULL){
    7584:	00 97       	sbiw	r24, 0x00	; 0
    7586:	19 f4       	brne	.+6      	; 0x758e <TriggerCommon+0xfc>
		track->patchCommandStreamPos=NULL;
    7588:	16 8a       	std	Z+22, r1	; 0x16
    758a:	15 8a       	std	Z+21, r1	; 0x15
    758c:	08 c0       	rjmp	.+16     	; 0x759e <TriggerCommon+0x10c>
	}else{
		track->patchCurrDeltaTime=0;
    758e:	13 8a       	std	Z+19, r1	; 0x13
		track->patchNextDeltaTime=pgm_read_byte(pos++);
    7590:	fc 01       	movw	r30, r24
    7592:	24 91       	lpm	r18, Z
    7594:	f7 01       	movw	r30, r14
    7596:	22 8b       	std	Z+18, r18	; 0x12
    7598:	01 96       	adiw	r24, 0x01	; 1
		track->patchCommandStreamPos=pos;
    759a:	96 8b       	std	Z+22, r25	; 0x16
    759c:	85 8b       	std	Z+21, r24	; 0x15
	}

}
    759e:	0f 90       	pop	r0
    75a0:	df 91       	pop	r29
    75a2:	cf 91       	pop	r28
    75a4:	1f 91       	pop	r17
    75a6:	0f 91       	pop	r16
    75a8:	ff 90       	pop	r15
    75aa:	ef 90       	pop	r14
    75ac:	08 95       	ret

000075ae <TriggerFx>:

/* Trigger a sound effect.
 * Method allocates the channel based on priority.
 * Retrig: if this fx if already playing on a track, reuse same track.
 */
void TriggerFx(unsigned char patch,unsigned char volume,bool retrig){
    75ae:	cf 93       	push	r28
    75b0:	df 93       	push	r29
	unsigned char channel;
	
	unsigned char type=(unsigned char)pgm_read_byte(&(patchPointers[patch].type));
    75b2:	e0 91 5b 0d 	lds	r30, 0x0D5B
    75b6:	f0 91 5c 0d 	lds	r31, 0x0D5C
    75ba:	99 e0       	ldi	r25, 0x09	; 9
    75bc:	89 9f       	mul	r24, r25
    75be:	e0 0d       	add	r30, r0
    75c0:	f1 1d       	adc	r31, r1
    75c2:	11 24       	eor	r1, r1
    75c4:	e4 91       	lpm	r30, Z

	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
    75c6:	e1 30       	cpi	r30, 0x01	; 1
    75c8:	e9 f0       	breq	.+58     	; 0x7604 <TriggerFx+0x56>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
    75ca:	e2 30       	cpi	r30, 0x02	; 2
    75cc:	e9 f0       	breq	.+58     	; 0x7608 <TriggerFx+0x5a>
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
    75ce:	20 91 fd 0c 	lds	r18, 0x0CFD
    75d2:	27 ff       	sbrs	r18, 7
    75d4:	1d c0       	rjmp	.+58     	; 0x7610 <TriggerFx+0x62>
    75d6:	20 91 0e 0d 	lds	r18, 0x0D0E
    75da:	28 13       	cpse	r18, r24
    75dc:	02 c0       	rjmp	.+4      	; 0x75e2 <TriggerFx+0x34>
    75de:	41 11       	cpse	r20, r1
    75e0:	17 c0       	rjmp	.+46     	; 0x7610 <TriggerFx+0x62>
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
    75e2:	20 91 14 0d 	lds	r18, 0x0D14
    75e6:	27 ff       	sbrs	r18, 7
    75e8:	11 c0       	rjmp	.+34     	; 0x760c <TriggerFx+0x5e>
    75ea:	20 91 25 0d 	lds	r18, 0x0D25
    75ee:	28 13       	cpse	r18, r24
    75f0:	02 c0       	rjmp	.+4      	; 0x75f6 <TriggerFx+0x48>
    75f2:	41 11       	cpse	r20, r1
    75f4:	0b c0       	rjmp	.+22     	; 0x760c <TriggerFx+0x5e>
		channel=2;
	}else{
		//both channels have fx playing, use the oldest one
		if(tracks[1].patchPlayingTime>tracks[2].patchPlayingTime){
    75f6:	20 91 11 0d 	lds	r18, 0x0D11
    75fa:	90 91 28 0d 	lds	r25, 0x0D28
    75fe:	92 17       	cp	r25, r18
    7600:	28 f4       	brcc	.+10     	; 0x760c <TriggerFx+0x5e>
    7602:	06 c0       	rjmp	.+12     	; 0x7610 <TriggerFx+0x62>
	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
		//noise or PCM channel fx		
		channel=3;
    7604:	c3 e0       	ldi	r28, 0x03	; 3
    7606:	05 c0       	rjmp	.+10     	; 0x7612 <TriggerFx+0x64>
	}else if(type==2){
		channel=4;
    7608:	c4 e0       	ldi	r28, 0x04	; 4
    760a:	03 c0       	rjmp	.+6      	; 0x7612 <TriggerFx+0x64>
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
		channel=2;
    760c:	c2 e0       	ldi	r28, 0x02	; 2
    760e:	01 c0       	rjmp	.+2      	; 0x7612 <TriggerFx+0x64>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
    7610:	c1 e0       	ldi	r28, 0x01	; 1
			channel=2;
		}
	}				

	Track* track=&tracks[channel];
	track->flags=TRACK_FLAGS_PRIORITY; //priority=1;
    7612:	97 e1       	ldi	r25, 0x17	; 23
    7614:	c9 9f       	mul	r28, r25
    7616:	e0 01       	movw	r28, r0
    7618:	11 24       	eor	r1, r1
    761a:	ca 51       	subi	r28, 0x1A	; 26
    761c:	d3 4f       	sbci	r29, 0xF3	; 243
    761e:	90 e8       	ldi	r25, 0x80	; 128
    7620:	98 83       	st	Y, r25
	track->patchCommandStreamPos = NULL;
    7622:	1e 8a       	std	Y+22, r1	; 0x16
    7624:	1d 8a       	std	Y+21, r1	; 0x15
	TriggerCommon(track,patch,volume,80);
    7626:	20 e5       	ldi	r18, 0x50	; 80
    7628:	46 2f       	mov	r20, r22
    762a:	68 2f       	mov	r22, r24
    762c:	ce 01       	movw	r24, r28
    762e:	0e 94 49 3a 	call	0x7492	; 0x7492 <TriggerCommon>
	track->flags|=TRACK_FLAGS_PLAYING;
    7632:	88 81       	ld	r24, Y
    7634:	80 62       	ori	r24, 0x20	; 32
    7636:	88 83       	st	Y, r24
}
    7638:	df 91       	pop	r29
    763a:	cf 91       	pop	r28
    763c:	08 95       	ret

0000763e <TriggerNote>:


void TriggerNote(unsigned char channel,unsigned char patch,unsigned char note,unsigned char volume){
    763e:	cf 93       	push	r28
    7640:	df 93       	push	r29
	Track* track=&tracks[channel];

	//allow only other music notes 
	if((track->flags&TRACK_FLAGS_PLAYING)==0 || (track->flags&TRACK_FLAGS_PRIORITY)==0){
    7642:	a8 2f       	mov	r26, r24
    7644:	b0 e0       	ldi	r27, 0x00	; 0
    7646:	97 e1       	ldi	r25, 0x17	; 23
    7648:	89 9f       	mul	r24, r25
    764a:	f0 01       	movw	r30, r0
    764c:	11 24       	eor	r1, r1
    764e:	ea 51       	subi	r30, 0x1A	; 26
    7650:	f3 4f       	sbci	r31, 0xF3	; 243
    7652:	80 81       	ld	r24, Z
    7654:	85 ff       	sbrs	r24, 5
    7656:	02 c0       	rjmp	.+4      	; 0x765c <TriggerNote+0x1e>
    7658:	87 fd       	sbrc	r24, 7
    765a:	2e c0       	rjmp	.+92     	; 0x76b8 <TriggerNote+0x7a>
			
		if(volume==0){ //note-off received
    765c:	21 11       	cpse	r18, r1
    765e:	18 c0       	rjmp	.+48     	; 0x7690 <TriggerNote+0x52>

			
			//cut note if there's no envelope & no note hold
			if(track->envelopeStep==0 && !(track->flags&TRACK_FLAGS_HOLD_ENV)){
    7660:	97 e1       	ldi	r25, 0x17	; 23
    7662:	9a 9f       	mul	r25, r26
    7664:	f0 01       	movw	r30, r0
    7666:	9b 9f       	mul	r25, r27
    7668:	f0 0d       	add	r31, r0
    766a:	11 24       	eor	r1, r1
    766c:	ea 51       	subi	r30, 0x1A	; 26
    766e:	f3 4f       	sbci	r31, 0xF3	; 243
    7670:	97 85       	ldd	r25, Z+15	; 0x0f
    7672:	91 11       	cpse	r25, r1
    7674:	02 c0       	rjmp	.+4      	; 0x767a <TriggerNote+0x3c>
    7676:	86 ff       	sbrs	r24, 6
				track->noteVol=0;
    7678:	15 86       	std	Z+13, r1	; 0x0d
			}

			track->flags&=(~TRACK_FLAGS_HOLD_ENV);//patchEnvelopeHold=false;
    767a:	97 e1       	ldi	r25, 0x17	; 23
    767c:	9a 9f       	mul	r25, r26
    767e:	f0 01       	movw	r30, r0
    7680:	9b 9f       	mul	r25, r27
    7682:	f0 0d       	add	r31, r0
    7684:	11 24       	eor	r1, r1
    7686:	ea 51       	subi	r30, 0x1A	; 26
    7688:	f3 4f       	sbci	r31, 0xF3	; 243
    768a:	8f 7b       	andi	r24, 0xBF	; 191
    768c:	80 83       	st	Z, r24
    768e:	14 c0       	rjmp	.+40     	; 0x76b8 <TriggerNote+0x7a>
    7690:	82 2f       	mov	r24, r18
    7692:	24 2f       	mov	r18, r20
		}else{
		
			track->flags=0;//&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    7694:	97 e1       	ldi	r25, 0x17	; 23
    7696:	9a 9f       	mul	r25, r26
    7698:	e0 01       	movw	r28, r0
    769a:	9b 9f       	mul	r25, r27
    769c:	d0 0d       	add	r29, r0
    769e:	11 24       	eor	r1, r1
    76a0:	ca 51       	subi	r28, 0x1A	; 26
    76a2:	d3 4f       	sbci	r29, 0xF3	; 243
    76a4:	18 82       	st	Y, r1
			track->patchCommandStreamPos = NULL;
    76a6:	1e 8a       	std	Y+22, r1	; 0x16
    76a8:	1d 8a       	std	Y+21, r1	; 0x15
			TriggerCommon(track,patch,volume,note);
    76aa:	48 2f       	mov	r20, r24
    76ac:	ce 01       	movw	r24, r28
    76ae:	0e 94 49 3a 	call	0x7492	; 0x7492 <TriggerCommon>
			track->flags|=TRACK_FLAGS_PLAYING;
    76b2:	88 81       	ld	r24, Y
    76b4:	80 62       	ori	r24, 0x20	; 32
    76b6:	88 83       	st	Y, r24
		}

	}
}
    76b8:	df 91       	pop	r29
    76ba:	cf 91       	pop	r28
    76bc:	08 95       	ret

000076be <ProcessMusic>:
	}

#endif


void ProcessMusic(void){
    76be:	6f 92       	push	r6
    76c0:	7f 92       	push	r7
    76c2:	8f 92       	push	r8
    76c4:	9f 92       	push	r9
    76c6:	af 92       	push	r10
    76c8:	bf 92       	push	r11
    76ca:	cf 92       	push	r12
    76cc:	df 92       	push	r13
    76ce:	ef 92       	push	r14
    76d0:	ff 92       	push	r15
    76d2:	0f 93       	push	r16
    76d4:	1f 93       	push	r17
    76d6:	cf 93       	push	r28
    76d8:	df 93       	push	r29
    76da:	c6 ee       	ldi	r28, 0xE6	; 230
    76dc:	dc e0       	ldi	r29, 0x0C	; 12
    76de:	08 eb       	ldi	r16, 0xB8	; 184
    76e0:	1c e0       	ldi	r17, 0x0C	; 12
    76e2:	d8 01       	movw	r26, r16
    76e4:	9e 01       	movw	r18, r28
    76e6:	40 e0       	ldi	r20, 0x00	; 0
    76e8:	50 e0       	ldi	r21, 0x00	; 0
    76ea:	ca 01       	movw	r24, r20
    76ec:	8a 51       	subi	r24, 0x1A	; 26
    76ee:	93 4f       	sbci	r25, 0xF3	; 243
    76f0:	6c 01       	movw	r12, r24
	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//update envelope
		if(track->envelopeStep!=0){
    76f2:	fc 01       	movw	r30, r24
    76f4:	87 85       	ldd	r24, Z+15	; 0x0f
    76f6:	88 23       	and	r24, r24
    76f8:	91 f0       	breq	.+36     	; 0x771e <ProcessMusic+0x60>
			vol=track->envelopeVol+track->envelopeStep;		
    76fa:	66 85       	ldd	r22, Z+14	; 0x0e
    76fc:	99 27       	eor	r25, r25
    76fe:	87 fd       	sbrc	r24, 7
    7700:	90 95       	com	r25
    7702:	86 0f       	add	r24, r22
    7704:	91 1d       	adc	r25, r1
    7706:	8f 3f       	cpi	r24, 0xFF	; 255
    7708:	91 05       	cpc	r25, r1
    770a:	19 f0       	breq	.+6      	; 0x7712 <ProcessMusic+0x54>
    770c:	14 f0       	brlt	.+4      	; 0x7712 <ProcessMusic+0x54>
    770e:	8f ef       	ldi	r24, 0xFF	; 255
    7710:	90 e0       	ldi	r25, 0x00	; 0
    7712:	97 ff       	sbrs	r25, 7
    7714:	02 c0       	rjmp	.+4      	; 0x771a <ProcessMusic+0x5c>
    7716:	80 e0       	ldi	r24, 0x00	; 0
    7718:	90 e0       	ldi	r25, 0x00	; 0
			if(vol<0){
				vol=0;			
			}else if(vol>0xff){
				vol=0xff;						
			}
			track->envelopeVol=vol;
    771a:	f6 01       	movw	r30, r12
    771c:	86 87       	std	Z+14, r24	; 0x0e
		}

		//if volumes reaches zero and no more patch command, explicitly end playing on track
		//if(vol==0 && track->patchCommandStreamPos==NULL) track->flags&=~(TRACK_FLAGS_PLAYING);

		if(track->flags & TRACK_FLAGS_SLIDING){
    771e:	f9 01       	movw	r30, r18
    7720:	f0 80       	ld	r15, Z
    7722:	f3 fe       	sbrs	r15, 3
    7724:	2a c0       	rjmp	.+84     	; 0x777a <ProcessMusic+0xbc>

			mixer.channels.all[trackNo].step+=track->slideStep;
    7726:	65 81       	ldd	r22, Z+5	; 0x05
    7728:	76 81       	ldd	r23, Z+6	; 0x06
    772a:	11 96       	adiw	r26, 0x01	; 1
    772c:	8d 91       	ld	r24, X+
    772e:	9c 91       	ld	r25, X
    7730:	12 97       	sbiw	r26, 0x02	; 2
    7732:	86 0f       	add	r24, r22
    7734:	97 1f       	adc	r25, r23
    7736:	12 96       	adiw	r26, 0x02	; 2
    7738:	9c 93       	st	X, r25
    773a:	8e 93       	st	-X, r24
    773c:	11 97       	sbiw	r26, 0x01	; 1
			u16 tStep=pgm_read_word(&(steptable[track->slideNote]));
    773e:	f6 01       	movw	r30, r12
    7740:	e7 80       	ldd	r14, Z+7	; 0x07
    7742:	ee 2d       	mov	r30, r14
    7744:	f0 e0       	ldi	r31, 0x00	; 0
    7746:	ee 0f       	add	r30, r30
    7748:	ff 1f       	adc	r31, r31
    774a:	e8 5f       	subi	r30, 0xF8	; 248
    774c:	f3 48       	sbci	r31, 0x83	; 131
    774e:	c5 90       	lpm	r12, Z+
    7750:	d4 90       	lpm	r13, Z

			if((track->slideStep>0 && mixer.channels.all[trackNo].step>=tStep) || 
    7752:	16 16       	cp	r1, r22
    7754:	17 06       	cpc	r1, r23
    7756:	24 f4       	brge	.+8      	; 0x7760 <ProcessMusic+0xa2>
    7758:	8c 15       	cp	r24, r12
    775a:	9d 05       	cpc	r25, r13
    775c:	30 f4       	brcc	.+12     	; 0x776a <ProcessMusic+0xac>
    775e:	0d c0       	rjmp	.+26     	; 0x777a <ProcessMusic+0xbc>
    7760:	67 2b       	or	r22, r23
    7762:	59 f0       	breq	.+22     	; 0x777a <ProcessMusic+0xbc>
				(track->slideStep<0 && mixer.channels.all[trackNo].step<=tStep))
    7764:	c8 16       	cp	r12, r24
    7766:	d9 06       	cpc	r13, r25
    7768:	40 f0       	brcs	.+16     	; 0x777a <ProcessMusic+0xbc>
			{					
				mixer.channels.all[trackNo].step = tStep;					
    776a:	12 96       	adiw	r26, 0x02	; 2
    776c:	dc 92       	st	X, r13
    776e:	ce 92       	st	-X, r12
    7770:	11 97       	sbiw	r26, 0x01	; 1
				track->flags &= ~(TRACK_FLAGS_SLIDING);	
    7772:	8f 2d       	mov	r24, r15
    7774:	87 7f       	andi	r24, 0xF7	; 247
    7776:	f9 01       	movw	r30, r18
    7778:	80 83       	st	Z, r24
    777a:	49 5e       	subi	r20, 0xE9	; 233
    777c:	5f 4f       	sbci	r21, 0xFF	; 255
    777e:	29 5e       	subi	r18, 0xE9	; 233
    7780:	3f 4f       	sbci	r19, 0xFF	; 255
    7782:	16 96       	adiw	r26, 0x06	; 6
	u8 channel;
	Track* track;


	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    7784:	43 37       	cpi	r20, 0x73	; 115
    7786:	51 05       	cpc	r21, r1
    7788:	09 f0       	breq	.+2      	; 0x778c <ProcessMusic+0xce>
    778a:	af cf       	rjmp	.-162    	; 0x76ea <ProcessMusic+0x2c>
	}



	//Process song MIDI notes
	if(playSong){
    778c:	80 91 b6 0c 	lds	r24, 0x0CB6
    7790:	88 23       	and	r24, r24
    7792:	09 f4       	brne	.+2      	; 0x7796 <ProcessMusic+0xd8>
    7794:	cc c0       	rjmp	.+408    	; 0x792e <ProcessMusic+0x270>
							}else if(c1==CONTROLER_EXPRESSION){
								tracks[channel].expressionVol=c2<<1;
							}else if(c1==CONTROLER_TREMOLO){
								tracks[channel].tremoloLevel=c2<<1;
							}else if(c1==CONTROLER_TREMOLO_RATE){
								tracks[channel].tremoloRate=c2<<1;
    7796:	57 e1       	ldi	r21, 0x17	; 23
    7798:	f5 2e       	mov	r15, r21
	if(playSong){
	
		#if MUSIC_ENGINE == MIDI
			
			//process all simultaneous events
			while(currDeltaTime==nextDeltaTime){
    779a:	80 91 59 0d 	lds	r24, 0x0D59
    779e:	90 91 5a 0d 	lds	r25, 0x0D5A
    77a2:	20 91 5f 0d 	lds	r18, 0x0D5F
    77a6:	30 91 60 0d 	lds	r19, 0x0D60
    77aa:	82 17       	cp	r24, r18
    77ac:	93 07       	cpc	r25, r19
    77ae:	09 f0       	breq	.+2      	; 0x77b2 <ProcessMusic+0xf4>
    77b0:	b9 c0       	rjmp	.+370    	; 0x7924 <ProcessMusic+0x266>

				c1=pgm_read_byte(songPos++);
    77b2:	20 91 62 0d 	lds	r18, 0x0D62
    77b6:	30 91 63 0d 	lds	r19, 0x0D63
    77ba:	b9 01       	movw	r22, r18
    77bc:	6f 5f       	subi	r22, 0xFF	; 255
    77be:	7f 4f       	sbci	r23, 0xFF	; 255
    77c0:	70 93 63 0d 	sts	0x0D63, r23
    77c4:	60 93 62 0d 	sts	0x0D62, r22
    77c8:	f9 01       	movw	r30, r18
    77ca:	44 91       	lpm	r20, Z
			
				if(c1==0xff){
    77cc:	4f 3f       	cpi	r20, 0xFF	; 255
    77ce:	79 f5       	brne	.+94     	; 0x782e <ProcessMusic+0x170>
					//META data type event
					c1=pgm_read_byte(songPos++);
    77d0:	a9 01       	movw	r20, r18
    77d2:	4e 5f       	subi	r20, 0xFE	; 254
    77d4:	5f 4f       	sbci	r21, 0xFF	; 255
    77d6:	50 93 63 0d 	sts	0x0D63, r21
    77da:	40 93 62 0d 	sts	0x0D62, r20
    77de:	fb 01       	movw	r30, r22
    77e0:	64 91       	lpm	r22, Z

				
					if(c1==0x2f){ //end of song
    77e2:	6f 32       	cpi	r22, 0x2F	; 47
    77e4:	19 f4       	brne	.+6      	; 0x77ec <ProcessMusic+0x12e>
						playSong=false;
    77e6:	10 92 b6 0c 	sts	0x0CB6, r1
						break;	
    77ea:	9c c0       	rjmp	.+312    	; 0x7924 <ProcessMusic+0x266>
					}else if(c1==0x6){ //marker
    77ec:	66 30       	cpi	r22, 0x06	; 6
    77ee:	09 f0       	breq	.+2      	; 0x77f2 <ProcessMusic+0x134>
    77f0:	8c c0       	rjmp	.+280    	; 0x790a <ProcessMusic+0x24c>
						c1=pgm_read_byte(songPos++); //read len
    77f2:	fa 01       	movw	r30, r20
    77f4:	44 91       	lpm	r20, Z
						c2=pgm_read_byte(songPos++); //read data
    77f6:	c9 01       	movw	r24, r18
    77f8:	04 96       	adiw	r24, 0x04	; 4
    77fa:	90 93 63 0d 	sts	0x0D63, r25
    77fe:	80 93 62 0d 	sts	0x0D62, r24
				
					if(c1==0x2f){ //end of song
						playSong=false;
						break;	
					}else if(c1==0x6){ //marker
						c1=pgm_read_byte(songPos++); //read len
    7802:	f9 01       	movw	r30, r18
    7804:	33 96       	adiw	r30, 0x03	; 3
						c2=pgm_read_byte(songPos++); //read data
    7806:	e4 91       	lpm	r30, Z
						if(c2=='S'){ //loop start
    7808:	e3 35       	cpi	r30, 0x53	; 83
    780a:	29 f4       	brne	.+10     	; 0x7816 <ProcessMusic+0x158>
							loopStart=songPos;
    780c:	90 93 65 0d 	sts	0x0D65, r25
    7810:	80 93 64 0d 	sts	0x0D64, r24
    7814:	7a c0       	rjmp	.+244    	; 0x790a <ProcessMusic+0x24c>
						}else if(c2=='E'){//loop end
    7816:	e5 34       	cpi	r30, 0x45	; 69
    7818:	09 f0       	breq	.+2      	; 0x781c <ProcessMusic+0x15e>
    781a:	77 c0       	rjmp	.+238    	; 0x790a <ProcessMusic+0x24c>
							songPos=loopStart;
    781c:	80 91 64 0d 	lds	r24, 0x0D64
    7820:	90 91 65 0d 	lds	r25, 0x0D65
    7824:	90 93 63 0d 	sts	0x0D63, r25
    7828:	80 93 62 0d 	sts	0x0D62, r24
    782c:	6e c0       	rjmp	.+220    	; 0x790a <ProcessMusic+0x24c>
					}
				

				}else{

					if(c1&0x80) lastStatus=c1;					
    782e:	47 fd       	sbrc	r20, 7
    7830:	40 93 5d 0d 	sts	0x0D5D, r20
					channel=lastStatus&0x0f;
    7834:	90 91 5d 0d 	lds	r25, 0x0D5D
    7838:	89 2f       	mov	r24, r25
    783a:	8f 70       	andi	r24, 0x0F	; 15
				
					//get next data byte
					//Note: maybe we should not advance the cursor
					//in case we receive an unsupported command				
					if(c1&0x80) c1=pgm_read_byte(songPos++); 
    783c:	47 ff       	sbrs	r20, 7
    783e:	08 c0       	rjmp	.+16     	; 0x7850 <ProcessMusic+0x192>
    7840:	2e 5f       	subi	r18, 0xFE	; 254
    7842:	3f 4f       	sbci	r19, 0xFF	; 255
    7844:	30 93 63 0d 	sts	0x0D63, r19
    7848:	20 93 62 0d 	sts	0x0D62, r18
    784c:	fb 01       	movw	r30, r22
    784e:	44 91       	lpm	r20, Z

					switch(lastStatus&0xf0){
    7850:	90 7f       	andi	r25, 0xF0	; 240
    7852:	90 3b       	cpi	r25, 0xB0	; 176
    7854:	e1 f0       	breq	.+56     	; 0x788e <ProcessMusic+0x1d0>
    7856:	90 3c       	cpi	r25, 0xC0	; 192
    7858:	09 f4       	brne	.+2      	; 0x785c <ProcessMusic+0x19e>
    785a:	51 c0       	rjmp	.+162    	; 0x78fe <ProcessMusic+0x240>
    785c:	90 39       	cpi	r25, 0x90	; 144
    785e:	09 f0       	breq	.+2      	; 0x7862 <ProcessMusic+0x1a4>
    7860:	54 c0       	rjmp	.+168    	; 0x790a <ProcessMusic+0x24c>

						//note-on
						case 0x90:
							//c1 = note						
							c2=pgm_read_byte(songPos++)<<1; //get volume
    7862:	e0 91 62 0d 	lds	r30, 0x0D62
    7866:	f0 91 63 0d 	lds	r31, 0x0D63
    786a:	9f 01       	movw	r18, r30
    786c:	2f 5f       	subi	r18, 0xFF	; 255
    786e:	3f 4f       	sbci	r19, 0xFF	; 255
    7870:	30 93 63 0d 	sts	0x0D63, r19
    7874:	20 93 62 0d 	sts	0x0D62, r18
    7878:	24 91       	lpm	r18, Z
    787a:	22 0f       	add	r18, r18
						
							if(tracks[channel].flags|TRACK_FLAGS_ALLOCATED){ //allocated==true
								TriggerNote(channel,tracks[channel].patchNo,c1,c2);
    787c:	f8 9e       	mul	r15, r24
    787e:	f0 01       	movw	r30, r0
    7880:	11 24       	eor	r1, r1
    7882:	ea 51       	subi	r30, 0x1A	; 26
    7884:	f3 4f       	sbci	r31, 0xF3	; 243
    7886:	60 89       	ldd	r22, Z+16	; 0x10
    7888:	0e 94 1f 3b 	call	0x763e	; 0x763e <TriggerNote>
    788c:	3e c0       	rjmp	.+124    	; 0x790a <ProcessMusic+0x24c>
							break;

						//controllers
						case 0xb0:
							///c1 = controller #
							c2=pgm_read_byte(songPos++); //get controller value
    788e:	e0 91 62 0d 	lds	r30, 0x0D62
    7892:	f0 91 63 0d 	lds	r31, 0x0D63
    7896:	9f 01       	movw	r18, r30
    7898:	2f 5f       	subi	r18, 0xFF	; 255
    789a:	3f 4f       	sbci	r19, 0xFF	; 255
    789c:	30 93 63 0d 	sts	0x0D63, r19
    78a0:	20 93 62 0d 	sts	0x0D62, r18
    78a4:	e4 91       	lpm	r30, Z
						
							if(c1==CONTROLER_VOL){
    78a6:	47 30       	cpi	r20, 0x07	; 7
    78a8:	49 f4       	brne	.+18     	; 0x78bc <ProcessMusic+0x1fe>
								tracks[channel].trackVol=c2<<1;
    78aa:	f8 9e       	mul	r15, r24
    78ac:	d0 01       	movw	r26, r0
    78ae:	11 24       	eor	r1, r1
    78b0:	aa 51       	subi	r26, 0x1A	; 26
    78b2:	b3 4f       	sbci	r27, 0xF3	; 243
    78b4:	ee 0f       	add	r30, r30
    78b6:	1c 96       	adiw	r26, 0x0c	; 12
    78b8:	ec 93       	st	X, r30
    78ba:	27 c0       	rjmp	.+78     	; 0x790a <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_EXPRESSION){
    78bc:	4b 30       	cpi	r20, 0x0B	; 11
    78be:	49 f4       	brne	.+18     	; 0x78d2 <ProcessMusic+0x214>
								tracks[channel].expressionVol=c2<<1;
    78c0:	f8 9e       	mul	r15, r24
    78c2:	d0 01       	movw	r26, r0
    78c4:	11 24       	eor	r1, r1
    78c6:	aa 51       	subi	r26, 0x1A	; 26
    78c8:	b3 4f       	sbci	r27, 0xF3	; 243
    78ca:	ee 0f       	add	r30, r30
    78cc:	13 96       	adiw	r26, 0x03	; 3
    78ce:	ec 93       	st	X, r30
    78d0:	1c c0       	rjmp	.+56     	; 0x790a <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO){
    78d2:	4c 35       	cpi	r20, 0x5C	; 92
    78d4:	49 f4       	brne	.+18     	; 0x78e8 <ProcessMusic+0x22a>
								tracks[channel].tremoloLevel=c2<<1;
    78d6:	f8 9e       	mul	r15, r24
    78d8:	d0 01       	movw	r26, r0
    78da:	11 24       	eor	r1, r1
    78dc:	aa 51       	subi	r26, 0x1A	; 26
    78de:	b3 4f       	sbci	r27, 0xF3	; 243
    78e0:	ee 0f       	add	r30, r30
    78e2:	1a 96       	adiw	r26, 0x0a	; 10
    78e4:	ec 93       	st	X, r30
    78e6:	11 c0       	rjmp	.+34     	; 0x790a <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO_RATE){
    78e8:	44 36       	cpi	r20, 0x64	; 100
    78ea:	79 f4       	brne	.+30     	; 0x790a <ProcessMusic+0x24c>
								tracks[channel].tremoloRate=c2<<1;
    78ec:	f8 9e       	mul	r15, r24
    78ee:	d0 01       	movw	r26, r0
    78f0:	11 24       	eor	r1, r1
    78f2:	aa 51       	subi	r26, 0x1A	; 26
    78f4:	b3 4f       	sbci	r27, 0xF3	; 243
    78f6:	ee 0f       	add	r30, r30
    78f8:	1b 96       	adiw	r26, 0x0b	; 11
    78fa:	ec 93       	st	X, r30
    78fc:	06 c0       	rjmp	.+12     	; 0x790a <ProcessMusic+0x24c>
							break;

						//program change
						case 0xc0:
							// c1 = patch #						
							tracks[channel].patchNo=c1;
    78fe:	f8 9e       	mul	r15, r24
    7900:	f0 01       	movw	r30, r0
    7902:	11 24       	eor	r1, r1
    7904:	ea 51       	subi	r30, 0x1A	; 26
    7906:	f3 4f       	sbci	r31, 0xF3	; 243
    7908:	40 8b       	std	Z+16, r20	; 0x10


				}//end if(c1==0xff)

				//read next delta time
				nextDeltaTime=ReadVarLen(&songPos);			
    790a:	82 e6       	ldi	r24, 0x62	; 98
    790c:	9d e0       	ldi	r25, 0x0D	; 13
    790e:	0e 94 23 3a 	call	0x7446	; 0x7446 <ReadVarLen>
    7912:	90 93 60 0d 	sts	0x0D60, r25
    7916:	80 93 5f 0d 	sts	0x0D5F, r24
				currDeltaTime=0;
    791a:	10 92 5a 0d 	sts	0x0D5A, r1
    791e:	10 92 59 0d 	sts	0x0D59, r1
    7922:	3b cf       	rjmp	.-394    	; 0x779a <ProcessMusic+0xdc>
					}
				#endif

			}//end while
		
			currDeltaTime++;
    7924:	01 96       	adiw	r24, 0x01	; 1
    7926:	90 93 5a 0d 	sts	0x0D5A, r25
    792a:	80 93 59 0d 	sts	0x0D59, r24
    792e:	9f ee       	ldi	r25, 0xEF	; 239
    7930:	a9 2e       	mov	r10, r25
    7932:	9c e0       	ldi	r25, 0x0C	; 12
    7934:	b9 2e       	mov	r11, r25
    7936:	29 ef       	ldi	r18, 0xF9	; 249
    7938:	c2 2e       	mov	r12, r18
    793a:	2c e0       	ldi	r18, 0x0C	; 12
    793c:	d2 2e       	mov	r13, r18
    793e:	3a ef       	ldi	r19, 0xFA	; 250
    7940:	e3 2e       	mov	r14, r19
    7942:	3c e0       	ldi	r19, 0x0C	; 12
    7944:	f3 2e       	mov	r15, r19
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    7946:	66 24       	eor	r6, r6
    7948:	6a 94       	dec	r6
    794a:	71 2c       	mov	r7, r1
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//process patch command stream
		if((track->flags & TRACK_FLAGS_PLAYING) && (track->patchCommandStreamPos!=NULL) && ((track->flags & TRACK_FLAGS_HOLD_ENV)==0)){
    794c:	88 81       	ld	r24, Y
    794e:	85 ff       	sbrs	r24, 5
    7950:	42 c0       	rjmp	.+132    	; 0x79d6 <ProcessMusic+0x318>
    7952:	2d 89       	ldd	r18, Y+21	; 0x15
    7954:	3e 89       	ldd	r19, Y+22	; 0x16
    7956:	23 2b       	or	r18, r19
    7958:	09 f4       	brne	.+2      	; 0x795c <ProcessMusic+0x29e>
    795a:	3d c0       	rjmp	.+122    	; 0x79d6 <ProcessMusic+0x318>
    795c:	86 fd       	sbrc	r24, 6
    795e:	3b c0       	rjmp	.+118    	; 0x79d6 <ProcessMusic+0x318>
    7960:	47 01       	movw	r8, r14
    7962:	f2 e0       	ldi	r31, 0x02	; 2
    7964:	8f 1a       	sub	r8, r31
    7966:	91 08       	sbc	r9, r1

			//process all simultaneous events
			while(track->patchCurrDeltaTime==track->patchNextDeltaTime){
    7968:	d6 01       	movw	r26, r12
    796a:	9c 91       	ld	r25, X
    796c:	f4 01       	movw	r30, r8
    796e:	80 81       	ld	r24, Z
    7970:	98 13       	cpse	r25, r24
    7972:	2e c0       	rjmp	.+92     	; 0x79d0 <ProcessMusic+0x312>

				c1=pgm_read_byte(track->patchCommandStreamPos++);
    7974:	ed 89       	ldd	r30, Y+21	; 0x15
    7976:	fe 89       	ldd	r31, Y+22	; 0x16
    7978:	bf 01       	movw	r22, r30
    797a:	6f 5f       	subi	r22, 0xFF	; 255
    797c:	7f 4f       	sbci	r23, 0xFF	; 255
    797e:	7e 8b       	std	Y+22, r23	; 0x16
    7980:	6d 8b       	std	Y+21, r22	; 0x15
    7982:	84 91       	lpm	r24, Z
				if(c1==PATCH_END){
    7984:	8f 3f       	cpi	r24, 0xFF	; 255
    7986:	31 f4       	brne	.+12     	; 0x7994 <ProcessMusic+0x2d6>
					//end of stream!
					track->flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    7988:	88 81       	ld	r24, Y
    798a:	8f 77       	andi	r24, 0x7F	; 127
    798c:	88 83       	st	Y, r24
					track->patchCommandStreamPos=NULL;
    798e:	1e 8a       	std	Y+22, r1	; 0x16
    7990:	1d 8a       	std	Y+21, r1	; 0x15
					break;
    7992:	1e c0       	rjmp	.+60     	; 0x79d0 <ProcessMusic+0x312>

				}else{
					c2=pgm_read_byte(track->patchCommandStreamPos++);
    7994:	9f 01       	movw	r18, r30
    7996:	2e 5f       	subi	r18, 0xFE	; 254
    7998:	3f 4f       	sbci	r19, 0xFF	; 255
    799a:	3e 8b       	std	Y+22, r19	; 0x16
    799c:	2d 8b       	std	Y+21, r18	; 0x15
    799e:	fb 01       	movw	r30, r22
    79a0:	64 91       	lpm	r22, Z
					//invoke patch command function
					((PatchCommand)pgm_read_word(&patchCommands[c1]))(track,c2);
    79a2:	e8 2f       	mov	r30, r24
    79a4:	f0 e0       	ldi	r31, 0x00	; 0
    79a6:	ee 0f       	add	r30, r30
    79a8:	ff 1f       	adc	r31, r31
    79aa:	e2 54       	subi	r30, 0x42	; 66
    79ac:	ff 4f       	sbci	r31, 0xFF	; 255
    79ae:	25 91       	lpm	r18, Z+
    79b0:	34 91       	lpm	r19, Z
    79b2:	ce 01       	movw	r24, r28
    79b4:	f9 01       	movw	r30, r18
    79b6:	09 95       	icall
				}

				//read next delta time
				track->patchNextDeltaTime=pgm_read_byte(track->patchCommandStreamPos++);
    79b8:	ed 89       	ldd	r30, Y+21	; 0x15
    79ba:	fe 89       	ldd	r31, Y+22	; 0x16
    79bc:	cf 01       	movw	r24, r30
    79be:	01 96       	adiw	r24, 0x01	; 1
    79c0:	9e 8b       	std	Y+22, r25	; 0x16
    79c2:	8d 8b       	std	Y+21, r24	; 0x15
    79c4:	e4 91       	lpm	r30, Z
    79c6:	d4 01       	movw	r26, r8
    79c8:	ec 93       	st	X, r30
				track->patchCurrDeltaTime=0;
    79ca:	f6 01       	movw	r30, r12
    79cc:	10 82       	st	Z, r1
    79ce:	cc cf       	rjmp	.-104    	; 0x7968 <ProcessMusic+0x2aa>
			}

			track->patchCurrDeltaTime++;
    79d0:	9f 5f       	subi	r25, 0xFF	; 255
    79d2:	d6 01       	movw	r26, r12
    79d4:	9c 93       	st	X, r25
		}

		if(track->flags & TRACK_FLAGS_PLAYING){
    79d6:	98 81       	ld	r25, Y
    79d8:	95 ff       	sbrs	r25, 5
    79da:	6c c0       	rjmp	.+216    	; 0x7ab4 <ProcessMusic+0x3f6>

			if(track->patchPlayingTime<0xff){
    79dc:	f7 01       	movw	r30, r14
    79de:	80 81       	ld	r24, Z
    79e0:	8f 3f       	cpi	r24, 0xFF	; 255
    79e2:	11 f0       	breq	.+4      	; 0x79e8 <ProcessMusic+0x32a>
				track->patchPlayingTime++;
    79e4:	8f 5f       	subi	r24, 0xFF	; 255
    79e6:	80 83       	st	Z, r24
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
    79e8:	97 fd       	sbrc	r25, 7
    79ea:	04 c0       	rjmp	.+8      	; 0x79f4 <ProcessMusic+0x336>
    79ec:	f7 01       	movw	r30, r14
    79ee:	38 97       	sbiw	r30, 0x08	; 8
				//if an FX, use full track volume.
				trackVol=0xff;
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
    79f0:	90 81       	ld	r25, Z
    79f2:	01 c0       	rjmp	.+2      	; 0x79f6 <ProcessMusic+0x338>
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
				//if an FX, use full track volume.
				trackVol=0xff;
    79f4:	9f ef       	ldi	r25, 0xFF	; 255
    79f6:	f7 01       	movw	r30, r14
    79f8:	37 97       	sbiw	r30, 0x07	; 7
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
			}
			if(track->noteVol!=0 && track->envelopeVol!=0 && trackVol!=0 && masterVolume!=0){
    79fa:	80 81       	ld	r24, Z
    79fc:	88 23       	and	r24, r24
    79fe:	09 f4       	brne	.+2      	; 0x7a02 <ProcessMusic+0x344>
    7a00:	4e c0       	rjmp	.+156    	; 0x7a9e <ProcessMusic+0x3e0>
    7a02:	31 96       	adiw	r30, 0x01	; 1
    7a04:	50 81       	ld	r21, Z
    7a06:	55 23       	and	r21, r21
    7a08:	09 f4       	brne	.+2      	; 0x7a0c <ProcessMusic+0x34e>
    7a0a:	49 c0       	rjmp	.+146    	; 0x7a9e <ProcessMusic+0x3e0>
    7a0c:	99 23       	and	r25, r25
    7a0e:	09 f4       	brne	.+2      	; 0x7a12 <ProcessMusic+0x354>
    7a10:	46 c0       	rjmp	.+140    	; 0x7a9e <ProcessMusic+0x3e0>
    7a12:	40 91 5e 0d 	lds	r20, 0x0D5E
    7a16:	44 23       	and	r20, r20
    7a18:	09 f4       	brne	.+2      	; 0x7a1c <ProcessMusic+0x35e>
    7a1a:	41 c0       	rjmp	.+130    	; 0x7a9e <ProcessMusic+0x3e0>

				uVol=(track->noteVol*trackVol)+0x100;
    7a1c:	89 9f       	mul	r24, r25
    7a1e:	c0 01       	movw	r24, r0
    7a20:	11 24       	eor	r1, r1
    7a22:	93 95       	inc	r25
				uVol>>=8;
    7a24:	89 2f       	mov	r24, r25
    7a26:	99 27       	eor	r25, r25
				
				uVol=(uVol*track->envelopeVol)+0x100;
    7a28:	58 9f       	mul	r21, r24
    7a2a:	90 01       	movw	r18, r0
    7a2c:	59 9f       	mul	r21, r25
    7a2e:	30 0d       	add	r19, r0
    7a30:	11 24       	eor	r1, r1
    7a32:	c9 01       	movw	r24, r18
    7a34:	93 95       	inc	r25
				uVol>>=8;
    7a36:	89 2f       	mov	r24, r25
    7a38:	99 27       	eor	r25, r25
    7a3a:	3b 97       	sbiw	r30, 0x0b	; 11
				
				#if MUSIC_ENGINE == MIDI
					uVol=(uVol*track->expressionVol)+0x100;
    7a3c:	50 81       	ld	r21, Z
    7a3e:	58 9f       	mul	r21, r24
    7a40:	90 01       	movw	r18, r0
    7a42:	59 9f       	mul	r21, r25
    7a44:	30 0d       	add	r19, r0
    7a46:	11 24       	eor	r1, r1
    7a48:	33 95       	inc	r19
					uVol>>=8;
    7a4a:	23 2f       	mov	r18, r19
    7a4c:	33 27       	eor	r19, r19
				#endif
				
				uVol=(uVol*masterVolume)+0x100;
    7a4e:	42 9f       	mul	r20, r18
    7a50:	c0 01       	movw	r24, r0
    7a52:	43 9f       	mul	r20, r19
    7a54:	90 0d       	add	r25, r0
    7a56:	11 24       	eor	r1, r1
    7a58:	93 95       	inc	r25
				uVol>>=8;
    7a5a:	89 2f       	mov	r24, r25
    7a5c:	99 27       	eor	r25, r25
    7a5e:	37 96       	adiw	r30, 0x07	; 7

				if(track->tremoloLevel>0){					
    7a60:	20 81       	ld	r18, Z
    7a62:	22 23       	and	r18, r18
    7a64:	f1 f0       	breq	.+60     	; 0x7aa2 <ProcessMusic+0x3e4>
					tmp=pgm_read_byte(&(waves[track->tremoloPos]));
    7a66:	d5 01       	movw	r26, r10
    7a68:	ec 91       	ld	r30, X
    7a6a:	f0 e0       	ldi	r31, 0x00	; 0
    7a6c:	e0 50       	subi	r30, 0x00	; 0
    7a6e:	f2 48       	sbci	r31, 0x82	; 130
    7a70:	e4 91       	lpm	r30, Z
					tmp-=128; //convert to unsigned
    7a72:	e0 58       	subi	r30, 0x80	; 128

					tVol=(track->tremoloLevel*tmp)+0x100;
    7a74:	2e 9f       	mul	r18, r30
    7a76:	f0 01       	movw	r30, r0
    7a78:	11 24       	eor	r1, r1
    7a7a:	f3 95       	inc	r31
					tVol>>=8;
    7a7c:	ef 2f       	mov	r30, r31
    7a7e:	ff 27       	eor	r31, r31
					
					uVol=(uVol*(0xff-tVol))+0x100;
    7a80:	a3 01       	movw	r20, r6
    7a82:	4e 1b       	sub	r20, r30
    7a84:	5f 0b       	sbc	r21, r31
    7a86:	48 9f       	mul	r20, r24
    7a88:	90 01       	movw	r18, r0
    7a8a:	49 9f       	mul	r20, r25
    7a8c:	30 0d       	add	r19, r0
    7a8e:	58 9f       	mul	r21, r24
    7a90:	30 0d       	add	r19, r0
    7a92:	11 24       	eor	r1, r1
    7a94:	c9 01       	movw	r24, r18
    7a96:	93 95       	inc	r25
					uVol>>=8;
    7a98:	89 2f       	mov	r24, r25
    7a9a:	99 27       	eor	r25, r25
    7a9c:	02 c0       	rjmp	.+4      	; 0x7aa2 <ProcessMusic+0x3e4>
				}

			
			}else{
				uVol=0;
    7a9e:	80 e0       	ldi	r24, 0x00	; 0
    7aa0:	90 e0       	ldi	r25, 0x00	; 0
			}	

			track->tremoloPos+=track->tremoloRate;	
    7aa2:	f5 01       	movw	r30, r10
    7aa4:	30 81       	ld	r19, Z
    7aa6:	f7 01       	movw	r30, r14
    7aa8:	39 97       	sbiw	r30, 0x09	; 9
    7aaa:	20 81       	ld	r18, Z
    7aac:	23 0f       	add	r18, r19
    7aae:	d5 01       	movw	r26, r10
    7ab0:	2c 93       	st	X, r18
    7ab2:	02 c0       	rjmp	.+4      	; 0x7ab8 <ProcessMusic+0x3fa>

		}else{
			uVol=0;
    7ab4:	80 e0       	ldi	r24, 0x00	; 0
    7ab6:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
    7ab8:	f8 01       	movw	r30, r16
    7aba:	80 83       	st	Z, r24
    7abc:	67 96       	adiw	r28, 0x17	; 23
    7abe:	0a 5f       	subi	r16, 0xFA	; 250
    7ac0:	1f 4f       	sbci	r17, 0xFF	; 255
    7ac2:	f7 e1       	ldi	r31, 0x17	; 23
    7ac4:	af 0e       	add	r10, r31
    7ac6:	b1 1c       	adc	r11, r1
    7ac8:	87 e1       	ldi	r24, 0x17	; 23
    7aca:	c8 0e       	add	r12, r24
    7acc:	d1 1c       	adc	r13, r1
    7ace:	97 e1       	ldi	r25, 0x17	; 23
    7ad0:	e9 0e       	add	r14, r25
    7ad2:	f1 1c       	adc	r15, r1


	//
	// Process patches command streams & final volume
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    7ad4:	ad e0       	ldi	r26, 0x0D	; 13
    7ad6:	c9 35       	cpi	r28, 0x59	; 89
    7ad8:	da 07       	cpc	r29, r26
    7ada:	09 f0       	breq	.+2      	; 0x7ade <ProcessMusic+0x420>
    7adc:	37 cf       	rjmp	.-402    	; 0x794c <ProcessMusic+0x28e>
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
	}
	
}
    7ade:	df 91       	pop	r29
    7ae0:	cf 91       	pop	r28
    7ae2:	1f 91       	pop	r17
    7ae4:	0f 91       	pop	r16
    7ae6:	ff 90       	pop	r15
    7ae8:	ef 90       	pop	r14
    7aea:	df 90       	pop	r13
    7aec:	cf 90       	pop	r12
    7aee:	bf 90       	pop	r11
    7af0:	af 90       	pop	r10
    7af2:	9f 90       	pop	r9
    7af4:	8f 90       	pop	r8
    7af6:	7f 90       	pop	r7
    7af8:	6f 90       	pop	r6
    7afa:	08 95       	ret

00007afc <SetMasterVolume>:
}



void SetMasterVolume(unsigned char vol){
	masterVolume=vol;
    7afc:	80 93 5e 0d 	sts	0x0D5E, r24
    7b00:	08 95       	ret

00007b02 <SetMixerNote>:
; r22: -MIDI note, 69=A5(440) for waves channels (0,1,2)
;      -Noise params for channel 3
;***********************
.section .text.SetMixerNote
SetMixerNote:
	clr r25
    7b02:	99 27       	eor	r25, r25
	clr r23
    7b04:	77 27       	eor	r23, r23
	#if SOUND_MIXER == MIXER_TYPE_VSYNC
		cpi r24,3
		brlo set_note_waves
		ret		
	#else
		cpi r24,3
    7b06:	83 30       	cpi	r24, 0x03	; 3
		brne set_note_waves		
    7b08:	09 f4       	brne	.+2      	; 0x7b0c <set_note_waves>
		ret
    7b0a:	08 95       	ret

00007b0c <set_note_waves>:
	#endif
#endif

set_note_waves:
	;get step for note
	ldi ZL,lo8(steptable)
    7b0c:	e8 e0       	ldi	r30, 0x08	; 8
	ldi ZH,hi8(steptable)
    7b0e:	fc e7       	ldi	r31, 0x7C	; 124
	lsl r22
    7b10:	66 0f       	add	r22, r22
	rol r23
    7b12:	77 1f       	adc	r23, r23
	add ZL,r22
    7b14:	e6 0f       	add	r30, r22
	adc ZH,r23	
    7b16:	f7 1f       	adc	r31, r23

	lpm r26,Z+
    7b18:	a5 91       	lpm	r26, Z+
	lpm r27,Z
    7b1a:	b4 91       	lpm	r27, Z

	ldi ZL,lo8(mixerStruct)
    7b1c:	e8 eb       	ldi	r30, 0xB8	; 184
	ldi ZH,hi8(mixerStruct)
    7b1e:	fc e0       	ldi	r31, 0x0C	; 12
	ldi r18,CHANNEL_STRUCT_SIZE
    7b20:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24
    7b22:	28 9f       	mul	r18, r24
	add ZL,r0
    7b24:	e0 0d       	add	r30, r0
	adc ZH,r1
    7b26:	f1 1d       	adc	r31, r1
	
	std Z+step_lo,r26
    7b28:	a1 83       	std	Z+1, r26	; 0x01
	std Z+step_hi,r27
    7b2a:	b2 83       	std	Z+2, r27	; 0x02
	
	clr r1
    7b2c:	11 24       	eor	r1, r1
	

	ret
    7b2e:	08 95       	ret

00007b30 <SetMixerWave>:
;         Noise channel: 0xfe=7 bit lfsr, 0xff=15 bit lfsr
;                 
;***********************
.section .text.SetMixerWave
SetMixerWave:
	clr r25
    7b30:	99 27       	eor	r25, r25
	clr r23
    7b32:	77 27       	eor	r23, r23

	ldi ZL,lo8(mixerStruct)
    7b34:	e8 eb       	ldi	r30, 0xB8	; 184
	ldi ZH,hi8(mixerStruct)
    7b36:	fc e0       	ldi	r31, 0x0C	; 12
	ldi r18,CHANNEL_STRUCT_SIZE
    7b38:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24	
    7b3a:	28 9f       	mul	r18, r24
	add ZL,r0
    7b3c:	e0 0d       	add	r30, r0
	adc ZH,r1
    7b3e:	f1 1d       	adc	r31, r1

#if MIXER_CHAN4_TYPE == 0
	cpi r22,0xfe	;7bit lfsr
    7b40:	6e 3f       	cpi	r22, 0xFE	; 254
	brne smw1
    7b42:	31 f4       	brne	.+12     	; 0x7b50 <smw1>
	lds r22,tr4_params
    7b44:	60 91 cb 0c 	lds	r22, 0x0CCB
	andi r22,0xfe;
    7b48:	6e 7f       	andi	r22, 0xFE	; 254
	sts tr4_params,r22
    7b4a:	60 93 cb 0c 	sts	0x0CCB, r22
	rjmp esmw	
    7b4e:	0b c0       	rjmp	.+22     	; 0x7b66 <esmw>

00007b50 <smw1>:
smw1:
	cpi r22,0xff	;15bit lfsr
    7b50:	6f 3f       	cpi	r22, 0xFF	; 255
	brne smw2
    7b52:	31 f4       	brne	.+12     	; 0x7b60 <smw2>
	lds r22,tr4_params
    7b54:	60 91 cb 0c 	lds	r22, 0x0CCB
	ori r22,0xfe;
    7b58:	6e 6f       	ori	r22, 0xFE	; 254
	sts tr4_params,r22	
    7b5a:	60 93 cb 0c 	sts	0x0CCB, r22
	rjmp esmw
    7b5e:	03 c0       	rjmp	.+6      	; 0x7b66 <esmw>

00007b60 <smw2>:
smw2:
#endif

	ldi r23,hi8(waves)
    7b60:	7e e7       	ldi	r23, 0x7E	; 126
	add r23,r22
    7b62:	76 0f       	add	r23, r22
	std Z+samplepos_hi,r23 ;store path No
    7b64:	75 83       	std	Z+5, r23	; 0x05

00007b66 <esmw>:

esmw:
	clr r1	
    7b66:	11 24       	eor	r1, r1
	ret
    7b68:	08 95       	ret
	...

00007c00 <DisableSoundEngine>:
; no CPU cycles are consumed.
; C-callable
;*****************************
.section .text.DisableSoundEngine
DisableSoundEngine:	
	ldi r24,0
    7c00:	80 e0       	ldi	r24, 0x00	; 0
	sts sound_enabled,r24
    7c02:	80 93 b7 0c 	sts	0x0CB7, r24
	ret
    7c06:	08 95       	ret

00007c08 <steptable>:
    7c08:	22 00       	.word	0x0022	; ????
    7c0a:	24 00       	.word	0x0024	; ????
    7c0c:	26 00       	.word	0x0026	; ????
    7c0e:	28 00       	.word	0x0028	; ????
    7c10:	2b 00       	.word	0x002b	; ????
    7c12:	2d 00       	.word	0x002d	; ????
    7c14:	30 00       	.word	0x0030	; ????
    7c16:	33 00       	.word	0x0033	; ????
    7c18:	36 00       	.word	0x0036	; ????
    7c1a:	39 00       	.word	0x0039	; ????
    7c1c:	3d 00       	.word	0x003d	; ????
    7c1e:	40 00       	.word	0x0040	; ????
    7c20:	44 00       	.word	0x0044	; ????
    7c22:	48 00       	.word	0x0048	; ????
    7c24:	4c 00       	.word	0x004c	; ????
    7c26:	51 00       	.word	0x0051	; ????
    7c28:	56 00       	.word	0x0056	; ????
    7c2a:	5b 00       	.word	0x005b	; ????
    7c2c:	60 00       	.word	0x0060	; ????
    7c2e:	66 00       	.word	0x0066	; ????
    7c30:	6c 00       	.word	0x006c	; ????
    7c32:	73 00       	.word	0x0073	; ????
    7c34:	79 00       	.word	0x0079	; ????
    7c36:	81 00       	.word	0x0081	; ????
    7c38:	88 00       	.word	0x0088	; ????
    7c3a:	90 00       	.word	0x0090	; ????
    7c3c:	99 00       	.word	0x0099	; ????
    7c3e:	a2 00       	.word	0x00a2	; ????
    7c40:	ac 00       	.word	0x00ac	; ????
    7c42:	b6 00       	.word	0x00b6	; ????
    7c44:	c1 00       	.word	0x00c1	; ????
    7c46:	cc 00       	.word	0x00cc	; ????
    7c48:	d8 00       	.word	0x00d8	; ????
    7c4a:	e5 00       	.word	0x00e5	; ????
    7c4c:	f3 00       	.word	0x00f3	; ????
    7c4e:	01 01       	movw	r0, r2
    7c50:	10 01       	movw	r2, r0
    7c52:	21 01       	movw	r4, r2
    7c54:	32 01       	movw	r6, r4
    7c56:	44 01       	movw	r8, r8
    7c58:	57 01       	movw	r10, r14
    7c5a:	6c 01       	movw	r12, r24
    7c5c:	81 01       	movw	r16, r2
    7c5e:	98 01       	movw	r18, r16
    7c60:	b0 01       	movw	r22, r0
    7c62:	ca 01       	movw	r24, r20
    7c64:	e5 01       	movw	r28, r10
    7c66:	02 02       	muls	r16, r18
    7c68:	21 02       	muls	r18, r17
    7c6a:	41 02       	muls	r20, r17
    7c6c:	64 02       	muls	r22, r20
    7c6e:	88 02       	muls	r24, r24
    7c70:	ae 02       	muls	r26, r30
    7c72:	d7 02       	muls	r29, r23
    7c74:	03 03       	mulsu	r16, r19
    7c76:	30 03       	mulsu	r19, r16
    7c78:	61 03       	mulsu	r22, r17
    7c7a:	94 03       	fmuls	r17, r20
    7c7c:	cb 03       	fmulsu	r20, r19
    7c7e:	05 04       	cpc	r0, r5
    7c80:	42 04       	cpc	r4, r2
    7c82:	83 04       	cpc	r8, r3
    7c84:	c7 04       	cpc	r12, r7
    7c86:	10 05       	cpc	r17, r0
    7c88:	5d 05       	cpc	r21, r13
    7c8a:	af 05       	cpc	r26, r15
    7c8c:	05 06       	cpc	r0, r21
    7c8e:	61 06       	cpc	r6, r17
    7c90:	c2 06       	cpc	r12, r18
    7c92:	29 07       	cpc	r18, r25
    7c94:	96 07       	cpc	r25, r22
    7c96:	09 08       	sbc	r0, r9
    7c98:	83 08       	sbc	r8, r3
    7c9a:	05 09       	sbc	r16, r5
    7c9c:	8e 09       	sbc	r24, r14
    7c9e:	20 0a       	sbc	r2, r16
    7ca0:	ba 0a       	sbc	r11, r26
    7ca2:	5d 0b       	sbc	r21, r29
    7ca4:	0a 0c       	add	r0, r10
    7ca6:	c1 0c       	add	r12, r1
    7ca8:	84 0d       	add	r24, r4
    7caa:	51 0e       	add	r5, r17
    7cac:	2b 0f       	add	r18, r27
    7cae:	12 10       	cpse	r1, r2
    7cb0:	07 11       	cpse	r16, r7
    7cb2:	0a 12       	cpse	r0, r26
    7cb4:	1d 13       	cpse	r17, r29
    7cb6:	40 14       	cp	r4, r0
    7cb8:	74 15       	cp	r23, r4
    7cba:	ba 16       	cp	r11, r26
    7cbc:	14 18       	sub	r1, r4
    7cbe:	83 19       	sub	r24, r3
    7cc0:	07 1b       	sub	r16, r23
    7cc2:	a3 1c       	adc	r10, r3
    7cc4:	57 1e       	adc	r5, r23
    7cc6:	24 20       	and	r2, r4
    7cc8:	0e 22       	and	r0, r30
    7cca:	14 24       	eor	r1, r4
    7ccc:	39 26       	eor	r3, r25
    7cce:	7f 28       	or	r7, r15
    7cd0:	e8 2a       	or	r14, r24
    7cd2:	75 2d       	mov	r23, r5
    7cd4:	29 30       	cpi	r18, 0x09	; 9
    7cd6:	06 33       	cpi	r16, 0x36	; 54
    7cd8:	0f 36       	cpi	r16, 0x6F	; 111
    7cda:	45 39       	cpi	r20, 0x95	; 149
    7cdc:	ad 3c       	cpi	r26, 0xCD	; 205
    7cde:	49 40       	sbci	r20, 0x09	; 9
    7ce0:	1b 44       	sbci	r17, 0x4B	; 75
    7ce2:	28 48       	sbci	r18, 0x88	; 136
    7ce4:	73 4c       	sbci	r23, 0xC3	; 195
    7ce6:	fe 50       	subi	r31, 0x0E	; 14
    7ce8:	cf 55       	subi	r28, 0x5F	; 95
    7cea:	ea 5a       	subi	r30, 0xAA	; 170
    7cec:	51 60       	ori	r21, 0x01	; 1
    7cee:	0c 66       	ori	r16, 0x6C	; 108
    7cf0:	1d 6c       	ori	r17, 0xCD	; 205
    7cf2:	8b 72       	andi	r24, 0x2B	; 43
    7cf4:	5a 79       	andi	r21, 0x9A	; 154
    7cf6:	92 80       	ldd	r9, Z+2	; 0x02
    7cf8:	37 88       	ldd	r3, Z+23	; 0x17
    7cfa:	50 90 e5 98 	lds	r5, 0x98E5
    7cfe:	fd a1       	ldd	r31, Y+37	; 0x25
    7d00:	9f ab       	std	Y+55, r25	; 0x37
    7d02:	d3 b5       	in	r29, 0x23	; 35
    7d04:	a3 c0       	rjmp	.+326    	; 0x7e4c <waves+0x4c>
	...

00007e00 <waves>:
    7e00:	00 03       	mulsu	r16, r16
    7e02:	06 09       	sbc	r16, r6
    7e04:	0c 10       	cpse	r0, r12
    7e06:	13 16       	cp	r1, r19
    7e08:	19 1c       	adc	r1, r9
    7e0a:	1f 22       	and	r1, r31
    7e0c:	25 28       	or	r2, r5
    7e0e:	2b 2e       	mov	r2, r27
    7e10:	31 33       	cpi	r19, 0x31	; 49
    7e12:	36 39       	cpi	r19, 0x96	; 150
    7e14:	3c 3f       	cpi	r19, 0xFC	; 252
    7e16:	41 44       	sbci	r20, 0x41	; 65
    7e18:	47 49       	sbci	r20, 0x97	; 151
    7e1a:	4c 4e       	sbci	r20, 0xEC	; 236
    7e1c:	51 53       	subi	r21, 0x31	; 49
    7e1e:	55 58       	subi	r21, 0x85	; 133
    7e20:	5a 5c       	subi	r21, 0xCA	; 202
    7e22:	5e 60       	ori	r21, 0x0E	; 14
    7e24:	62 64       	ori	r22, 0x42	; 66
    7e26:	66 68       	ori	r22, 0x86	; 134
    7e28:	6a 6b       	ori	r22, 0xBA	; 186
    7e2a:	6d 6f       	ori	r22, 0xFD	; 253
    7e2c:	70 71       	andi	r23, 0x10	; 16
    7e2e:	73 74       	andi	r23, 0x43	; 67
    7e30:	75 76       	andi	r23, 0x65	; 101
    7e32:	78 79       	andi	r23, 0x98	; 152
    7e34:	7a 7a       	andi	r23, 0xAA	; 170
    7e36:	7b 7c       	andi	r23, 0xCB	; 203
    7e38:	7d 7d       	andi	r23, 0xDD	; 221
    7e3a:	7e 7e       	andi	r23, 0xEE	; 238
    7e3c:	7e 7f       	andi	r23, 0xFE	; 254
    7e3e:	7f 7f       	andi	r23, 0xFF	; 255
    7e40:	7f 7f       	andi	r23, 0xFF	; 255
    7e42:	7f 7f       	andi	r23, 0xFF	; 255
    7e44:	7e 7e       	andi	r23, 0xEE	; 238
    7e46:	7e 7d       	andi	r23, 0xDE	; 222
    7e48:	7d 7c       	andi	r23, 0xCD	; 205
    7e4a:	7b 7a       	andi	r23, 0xAB	; 171
    7e4c:	7a 79       	andi	r23, 0x9A	; 154
    7e4e:	78 76       	andi	r23, 0x68	; 104
    7e50:	75 74       	andi	r23, 0x45	; 69
    7e52:	73 71       	andi	r23, 0x13	; 19
    7e54:	70 6f       	ori	r23, 0xF0	; 240
    7e56:	6d 6b       	ori	r22, 0xBD	; 189
    7e58:	6a 68       	ori	r22, 0x8A	; 138
    7e5a:	66 64       	ori	r22, 0x46	; 70
    7e5c:	62 60       	ori	r22, 0x02	; 2
    7e5e:	5e 5c       	subi	r21, 0xCE	; 206
    7e60:	5a 58       	subi	r21, 0x8A	; 138
    7e62:	55 53       	subi	r21, 0x35	; 53
    7e64:	51 4e       	sbci	r21, 0xE1	; 225
    7e66:	4c 49       	sbci	r20, 0x9C	; 156
    7e68:	47 44       	sbci	r20, 0x47	; 71
    7e6a:	41 3f       	cpi	r20, 0xF1	; 241
    7e6c:	3c 39       	cpi	r19, 0x9C	; 156
    7e6e:	36 33       	cpi	r19, 0x36	; 54
    7e70:	31 2e       	mov	r3, r17
    7e72:	2b 28       	or	r2, r11
    7e74:	25 22       	and	r2, r21
    7e76:	1f 1c       	adc	r1, r15
    7e78:	19 16       	cp	r1, r25
    7e7a:	13 10       	cpse	r1, r3
    7e7c:	0c 09       	sbc	r16, r12
    7e7e:	06 03       	mulsu	r16, r22
    7e80:	00 fd       	sbrc	r16, 0
    7e82:	fa f7       	brpl	.-2      	; 0x7e82 <waves+0x82>
    7e84:	f4 f0       	brlt	.+60     	; 0x7ec2 <waves+0xc2>
    7e86:	ed ea       	ldi	r30, 0xAD	; 173
    7e88:	e7 e4       	ldi	r30, 0x47	; 71
    7e8a:	e1 de       	rcall	.-574    	; 0x7c4e <steptable+0x46>
    7e8c:	db d8       	rcall	.-3658   	; 0x7044 <ReadButtons+0x3e>
    7e8e:	d5 d2       	rcall	.+1450   	; 0x843a <waves+0x63a>
    7e90:	cf cd       	rjmp	.-1122   	; 0x7a30 <ProcessMusic+0x372>
    7e92:	ca c7       	rjmp	.+3988   	; 0x8e28 <LBPrintByte+0x42>
    7e94:	c4 c1       	rjmp	.+904    	; 0x821e <waves+0x41e>
    7e96:	bf bc       	out	0x2f, r11	; 47
    7e98:	b9 b7       	in	r27, 0x39	; 57
    7e9a:	b4 b2       	in	r11, 0x14	; 20
    7e9c:	af ad       	ldd	r26, Y+63	; 0x3f
    7e9e:	ab a8       	ldd	r10, Y+51	; 0x33
    7ea0:	a6 a4       	ldd	r10, Z+46	; 0x2e
    7ea2:	a2 a0       	ldd	r10, Z+34	; 0x22
    7ea4:	9e 9c       	mul	r9, r14
    7ea6:	9a 98       	cbi	0x13, 2	; 19
    7ea8:	96 95       	lsr	r25
    7eaa:	93 91       	.word	0x9193	; ????
    7eac:	90 8f       	std	Z+24, r25	; 0x18
    7eae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    7eb0:	8b 8a       	std	Y+19, r8	; 0x13
    7eb2:	88 87       	std	Y+8, r24	; 0x08
    7eb4:	86 86       	std	Z+14, r8	; 0x0e
    7eb6:	85 84       	ldd	r8, Z+13	; 0x0d
    7eb8:	83 83       	std	Z+3, r24	; 0x03
    7eba:	82 82       	std	Z+2, r8	; 0x02
    7ebc:	82 81       	ldd	r24, Z+2	; 0x02
    7ebe:	81 81       	ldd	r24, Z+1	; 0x01
    7ec0:	81 81       	ldd	r24, Z+1	; 0x01
    7ec2:	81 81       	ldd	r24, Z+1	; 0x01
    7ec4:	82 82       	std	Z+2, r8	; 0x02
    7ec6:	82 83       	std	Z+2, r24	; 0x02
    7ec8:	83 84       	ldd	r8, Z+11	; 0x0b
    7eca:	85 86       	std	Z+13, r8	; 0x0d
    7ecc:	86 87       	std	Z+14, r24	; 0x0e
    7ece:	88 8a       	std	Y+16, r8	; 0x10
    7ed0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    7ed2:	8d 8f       	std	Y+29, r24	; 0x1d
    7ed4:	90 91 93 95 	lds	r25, 0x9593
    7ed8:	96 98       	cbi	0x12, 6	; 18
    7eda:	9a 9c       	mul	r9, r10
    7edc:	9e a0       	ldd	r9, Y+38	; 0x26
    7ede:	a2 a4       	ldd	r10, Z+42	; 0x2a
    7ee0:	a6 a8       	ldd	r10, Z+54	; 0x36
    7ee2:	ab ad       	ldd	r26, Y+59	; 0x3b
    7ee4:	af b2       	in	r10, 0x1f	; 31
    7ee6:	b4 b7       	in	r27, 0x34	; 52
    7ee8:	b9 bc       	out	0x29, r11	; 41
    7eea:	bf c1       	rjmp	.+894    	; 0x826a <waves+0x46a>
    7eec:	c4 c7       	rjmp	.+3976   	; 0x8e76 <LBPrintInt+0x4c>
    7eee:	ca cd       	rjmp	.-1132   	; 0x7a84 <ProcessMusic+0x3c6>
    7ef0:	cf d2       	rcall	.+1438   	; 0x8490 <waves+0x690>
    7ef2:	d5 d8       	rcall	.-3670   	; 0x709e <FormatEeprom+0xc>
    7ef4:	db de       	rcall	.-586    	; 0x7cac <steptable+0xa4>
    7ef6:	e1 e4       	ldi	r30, 0x41	; 65
    7ef8:	e7 ea       	ldi	r30, 0xA7	; 167
    7efa:	ed f0       	brhs	.+58     	; 0x7f36 <waves+0x136>
    7efc:	f4 f7       	brge	.-4      	; 0x7efa <waves+0xfa>
    7efe:	fa fd       	.word	0xfdfa	; ????
    7f00:	80 81       	ld	r24, Z
    7f02:	82 83       	std	Z+2, r24	; 0x02
    7f04:	84 85       	ldd	r24, Z+12	; 0x0c
    7f06:	86 87       	std	Z+14, r24	; 0x0e
    7f08:	88 89       	ldd	r24, Y+16	; 0x10
    7f0a:	8a 8b       	std	Y+18, r24	; 0x12
    7f0c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    7f0e:	8e 8f       	std	Y+30, r24	; 0x1e
    7f10:	90 91 92 93 	lds	r25, 0x9392
    7f14:	94 95       	.word	0x9594	; ????
    7f16:	96 97       	sbiw	r26, 0x26	; 38
    7f18:	98 99       	sbic	0x13, 0	; 19
    7f1a:	9a 9b       	sbis	0x13, 2	; 19
    7f1c:	9c 9d       	mul	r25, r12
    7f1e:	9e 9f       	mul	r25, r30
    7f20:	a0 a1       	ldd	r26, Z+32	; 0x20
    7f22:	a2 a3       	std	Z+34, r26	; 0x22
    7f24:	a4 a5       	ldd	r26, Z+44	; 0x2c
    7f26:	a6 a7       	std	Z+46, r26	; 0x2e
    7f28:	a8 a9       	ldd	r26, Y+48	; 0x30
    7f2a:	aa ab       	std	Y+50, r26	; 0x32
    7f2c:	ac ad       	ldd	r26, Y+60	; 0x3c
    7f2e:	ae af       	std	Y+62, r26	; 0x3e
    7f30:	b0 b1       	in	r27, 0x00	; 0
    7f32:	b2 b3       	in	r27, 0x12	; 18
    7f34:	b4 b5       	in	r27, 0x24	; 36
    7f36:	b6 b7       	in	r27, 0x36	; 54
    7f38:	b8 b9       	out	0x08, r27	; 8
    7f3a:	ba bb       	out	0x1a, r27	; 26
    7f3c:	bc bd       	out	0x2c, r27	; 44
    7f3e:	be bf       	out	0x3e, r27	; 62
    7f40:	c0 c1       	rjmp	.+896    	; 0x82c2 <waves+0x4c2>
    7f42:	c2 c3       	rjmp	.+1924   	; 0x86c8 <waves+0x8c8>
    7f44:	c4 c5       	rjmp	.+2952   	; 0x8ace <DrawMap+0x16>
    7f46:	c6 c7       	rjmp	.+3980   	; 0x8ed4 <LBWaitSeconds+0x2>
    7f48:	c8 c9       	rjmp	.-3184   	; 0x72da <PatchCommand11+0x62>
    7f4a:	ca cb       	rjmp	.-2156   	; 0x76e0 <ProcessMusic+0x22>
    7f4c:	cc cd       	rjmp	.-1128   	; 0x7ae6 <ProcessMusic+0x428>
    7f4e:	ce cf       	rjmp	.-100    	; 0x7eec <waves+0xec>
    7f50:	d0 d1       	rcall	.+928    	; 0x82f2 <waves+0x4f2>
    7f52:	d2 d3       	rcall	.+1956   	; 0x86f8 <waves+0x8f8>
    7f54:	d4 d5       	rcall	.+2984   	; 0x8afe <DrawMap+0x46>
    7f56:	d6 d7       	rcall	.+4012   	; 0x8f04 <LBMapSprite+0x14>
    7f58:	d8 d9       	rcall	.-3152   	; 0x730a <PatchCommand03+0x8>
    7f5a:	da db       	rcall	.-2124   	; 0x7710 <ProcessMusic+0x52>
    7f5c:	dc dd       	rcall	.-1096   	; 0x7b16 <set_note_waves+0xa>
    7f5e:	de df       	rcall	.-68     	; 0x7f1c <waves+0x11c>
    7f60:	e0 e1       	ldi	r30, 0x10	; 16
    7f62:	e2 e3       	ldi	r30, 0x32	; 50
    7f64:	e4 e5       	ldi	r30, 0x54	; 84
    7f66:	e6 e7       	ldi	r30, 0x76	; 118
    7f68:	e8 e9       	ldi	r30, 0x98	; 152
    7f6a:	ea eb       	ldi	r30, 0xBA	; 186
    7f6c:	ec ed       	ldi	r30, 0xDC	; 220
    7f6e:	ee ef       	ldi	r30, 0xFE	; 254
    7f70:	f0 f1       	brcs	.+124    	; 0x7fee <waves+0x1ee>
    7f72:	f2 f3       	brmi	.-4      	; 0x7f70 <waves+0x170>
    7f74:	f4 f5       	brge	.+124    	; 0x7ff2 <waves+0x1f2>
    7f76:	f6 f7       	brtc	.-4      	; 0x7f74 <waves+0x174>
    7f78:	f8 f9       	.word	0xf9f8	; ????
    7f7a:	fa fb       	.word	0xfbfa	; ????
    7f7c:	fc fd       	.word	0xfdfc	; ????
    7f7e:	fe ff       	.word	0xfffe	; ????
    7f80:	00 01       	movw	r0, r0
    7f82:	02 03       	mulsu	r16, r18
    7f84:	04 05       	cpc	r16, r4
    7f86:	06 07       	cpc	r16, r22
    7f88:	08 09       	sbc	r16, r8
    7f8a:	0a 0b       	sbc	r16, r26
    7f8c:	0c 0d       	add	r16, r12
    7f8e:	0e 0f       	add	r16, r30
    7f90:	10 11       	cpse	r17, r0
    7f92:	12 13       	cpse	r17, r18
    7f94:	14 15       	cp	r17, r4
    7f96:	16 17       	cp	r17, r22
    7f98:	18 19       	sub	r17, r8
    7f9a:	1a 1b       	sub	r17, r26
    7f9c:	1c 1d       	adc	r17, r12
    7f9e:	1e 1f       	adc	r17, r30
    7fa0:	20 21       	and	r18, r0
    7fa2:	22 23       	and	r18, r18
    7fa4:	24 25       	eor	r18, r4
    7fa6:	26 27       	eor	r18, r22
    7fa8:	28 29       	or	r18, r8
    7faa:	2a 2b       	or	r18, r26
    7fac:	2c 2d       	mov	r18, r12
    7fae:	2e 2f       	mov	r18, r30
    7fb0:	30 31       	cpi	r19, 0x10	; 16
    7fb2:	32 33       	cpi	r19, 0x32	; 50
    7fb4:	34 35       	cpi	r19, 0x54	; 84
    7fb6:	36 37       	cpi	r19, 0x76	; 118
    7fb8:	38 39       	cpi	r19, 0x98	; 152
    7fba:	3a 3b       	cpi	r19, 0xBA	; 186
    7fbc:	3c 3d       	cpi	r19, 0xDC	; 220
    7fbe:	3e 3f       	cpi	r19, 0xFE	; 254
    7fc0:	40 41       	sbci	r20, 0x10	; 16
    7fc2:	42 43       	sbci	r20, 0x32	; 50
    7fc4:	44 45       	sbci	r20, 0x54	; 84
    7fc6:	46 47       	sbci	r20, 0x76	; 118
    7fc8:	48 49       	sbci	r20, 0x98	; 152
    7fca:	4a 4b       	sbci	r20, 0xBA	; 186
    7fcc:	4c 4d       	sbci	r20, 0xDC	; 220
    7fce:	4e 4f       	sbci	r20, 0xFE	; 254
    7fd0:	50 51       	subi	r21, 0x10	; 16
    7fd2:	52 53       	subi	r21, 0x32	; 50
    7fd4:	54 55       	subi	r21, 0x54	; 84
    7fd6:	56 57       	subi	r21, 0x76	; 118
    7fd8:	58 59       	subi	r21, 0x98	; 152
    7fda:	5a 5b       	subi	r21, 0xBA	; 186
    7fdc:	5c 5d       	subi	r21, 0xDC	; 220
    7fde:	5e 5f       	subi	r21, 0xFE	; 254
    7fe0:	60 61       	ori	r22, 0x10	; 16
    7fe2:	62 63       	ori	r22, 0x32	; 50
    7fe4:	64 65       	ori	r22, 0x54	; 84
    7fe6:	66 67       	ori	r22, 0x76	; 118
    7fe8:	68 69       	ori	r22, 0x98	; 152
    7fea:	6a 6b       	ori	r22, 0xBA	; 186
    7fec:	6c 6d       	ori	r22, 0xDC	; 220
    7fee:	6e 6f       	ori	r22, 0xFE	; 254
    7ff0:	70 71       	andi	r23, 0x10	; 16
    7ff2:	72 73       	andi	r23, 0x32	; 50
    7ff4:	74 75       	andi	r23, 0x54	; 84
    7ff6:	76 77       	andi	r23, 0x76	; 118
    7ff8:	78 79       	andi	r23, 0x98	; 152
    7ffa:	7a 7b       	andi	r23, 0xBA	; 186
    7ffc:	7c 7d       	andi	r23, 0xDC	; 220
    7ffe:	7e 7f       	andi	r23, 0xFE	; 254
    8000:	00 02       	muls	r16, r16
    8002:	04 06       	cpc	r0, r20
    8004:	08 0a       	sbc	r0, r24
    8006:	0c 0e       	add	r0, r28
    8008:	10 12       	cpse	r1, r16
    800a:	14 16       	cp	r1, r20
    800c:	18 1a       	sub	r1, r24
    800e:	1c 1e       	adc	r1, r28
    8010:	20 22       	and	r2, r16
    8012:	24 26       	eor	r2, r20
    8014:	28 2a       	or	r2, r24
    8016:	2c 2e       	mov	r2, r28
    8018:	30 32       	cpi	r19, 0x20	; 32
    801a:	34 36       	cpi	r19, 0x64	; 100
    801c:	38 3a       	cpi	r19, 0xA8	; 168
    801e:	3c 3e       	cpi	r19, 0xEC	; 236
    8020:	40 42       	sbci	r20, 0x20	; 32
    8022:	44 46       	sbci	r20, 0x64	; 100
    8024:	48 4a       	sbci	r20, 0xA8	; 168
    8026:	4c 4e       	sbci	r20, 0xEC	; 236
    8028:	50 52       	subi	r21, 0x20	; 32
    802a:	54 56       	subi	r21, 0x64	; 100
    802c:	58 5a       	subi	r21, 0xA8	; 168
    802e:	5c 5e       	subi	r21, 0xEC	; 236
    8030:	60 62       	ori	r22, 0x20	; 32
    8032:	64 66       	ori	r22, 0x64	; 100
    8034:	68 6a       	ori	r22, 0xA8	; 168
    8036:	6c 6e       	ori	r22, 0xEC	; 236
    8038:	70 72       	andi	r23, 0x20	; 32
    803a:	74 76       	andi	r23, 0x64	; 100
    803c:	78 7a       	andi	r23, 0xA8	; 168
    803e:	7c 7e       	andi	r23, 0xEC	; 236
    8040:	7f 7d       	andi	r23, 0xDF	; 223
    8042:	7b 79       	andi	r23, 0x9B	; 155
    8044:	77 75       	andi	r23, 0x57	; 87
    8046:	73 71       	andi	r23, 0x13	; 19
    8048:	6f 6d       	ori	r22, 0xDF	; 223
    804a:	6b 69       	ori	r22, 0x9B	; 155
    804c:	67 65       	ori	r22, 0x57	; 87
    804e:	63 61       	ori	r22, 0x13	; 19
    8050:	5f 5d       	subi	r21, 0xDF	; 223
    8052:	5b 59       	subi	r21, 0x9B	; 155
    8054:	57 55       	subi	r21, 0x57	; 87
    8056:	53 51       	subi	r21, 0x13	; 19
    8058:	4f 4d       	sbci	r20, 0xDF	; 223
    805a:	4b 49       	sbci	r20, 0x9B	; 155
    805c:	47 45       	sbci	r20, 0x57	; 87
    805e:	43 41       	sbci	r20, 0x13	; 19
    8060:	3f 3d       	cpi	r19, 0xDF	; 223
    8062:	3b 39       	cpi	r19, 0x9B	; 155
    8064:	37 35       	cpi	r19, 0x57	; 87
    8066:	33 31       	cpi	r19, 0x13	; 19
    8068:	2f 2d       	mov	r18, r15
    806a:	2b 29       	or	r18, r11
    806c:	27 25       	eor	r18, r7
    806e:	23 21       	and	r18, r3
    8070:	1f 1d       	adc	r17, r15
    8072:	1b 19       	sub	r17, r11
    8074:	17 15       	cp	r17, r7
    8076:	13 11       	cpse	r17, r3
    8078:	0f 0d       	add	r16, r15
    807a:	0b 09       	sbc	r16, r11
    807c:	07 05       	cpc	r16, r7
    807e:	03 01       	movw	r0, r6
    8080:	ff fd       	.word	0xfdff	; ????
    8082:	fb f9       	.word	0xf9fb	; ????
    8084:	f7 f5       	brid	.+124    	; 0x8102 <waves+0x302>
    8086:	f3 f1       	brvs	.+124    	; 0x8104 <waves+0x304>
    8088:	ef ed       	ldi	r30, 0xDF	; 223
    808a:	eb e9       	ldi	r30, 0x9B	; 155
    808c:	e7 e5       	ldi	r30, 0x57	; 87
    808e:	e3 e1       	ldi	r30, 0x13	; 19
    8090:	df dd       	rcall	.-1090   	; 0x7c50 <steptable+0x48>
    8092:	db d9       	rcall	.-3146   	; 0x744a <ReadVarLen+0x4>
    8094:	d7 d5       	rcall	.+2990   	; 0x8c44 <ProcessFading+0xa>
    8096:	d3 d1       	rcall	.+934    	; 0x843e <waves+0x63e>
    8098:	cf cd       	rjmp	.-1122   	; 0x7c38 <steptable+0x30>
    809a:	cb c9       	rjmp	.-3178   	; 0x7432 <StopSong+0x8>
    809c:	c7 c5       	rjmp	.+2958   	; 0x8c2c <FadeOut+0xa>
    809e:	c3 c1       	rjmp	.+902    	; 0x8426 <waves+0x626>
    80a0:	bf bd       	out	0x2f, r27	; 47
    80a2:	bb b9       	out	0x0b, r27	; 11
    80a4:	b7 b5       	in	r27, 0x27	; 39
    80a6:	b3 b1       	in	r27, 0x03	; 3
    80a8:	af ad       	ldd	r26, Y+63	; 0x3f
    80aa:	ab a9       	ldd	r26, Y+51	; 0x33
    80ac:	a7 a5       	ldd	r26, Z+47	; 0x2f
    80ae:	a3 a1       	ldd	r26, Z+35	; 0x23
    80b0:	9f 9d       	mul	r25, r15
    80b2:	9b 99       	sbic	0x13, 3	; 19
    80b4:	97 95       	ror	r25
    80b6:	93 91       	.word	0x9193	; ????
    80b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    80ba:	8b 89       	ldd	r24, Y+19	; 0x13
    80bc:	87 85       	ldd	r24, Z+15	; 0x0f
    80be:	83 81       	ldd	r24, Z+3	; 0x03
    80c0:	80 82       	st	Z, r8
    80c2:	84 86       	std	Z+12, r8	; 0x0c
    80c4:	88 8a       	std	Y+16, r8	; 0x10
    80c6:	8c 8e       	std	Y+28, r8	; 0x1c
    80c8:	90 92 94 96 	sts	0x9694, r9
    80cc:	98 9a       	sbi	0x13, 0	; 19
    80ce:	9c 9e       	mul	r9, r28
    80d0:	a0 a2       	std	Z+32, r10	; 0x20
    80d2:	a4 a6       	std	Z+44, r10	; 0x2c
    80d4:	a8 aa       	std	Y+48, r10	; 0x30
    80d6:	ac ae       	std	Y+60, r10	; 0x3c
    80d8:	b0 b2       	in	r11, 0x10	; 16
    80da:	b4 b6       	in	r11, 0x34	; 52
    80dc:	b8 ba       	out	0x18, r11	; 24
    80de:	bc be       	out	0x3c, r11	; 60
    80e0:	c0 c2       	rjmp	.+1408   	; 0x8662 <waves+0x862>
    80e2:	c4 c6       	rjmp	.+3464   	; 0x8e6c <LBPrintInt+0x42>
    80e4:	c8 ca       	rjmp	.-2672   	; 0x7676 <TriggerNote+0x38>
    80e6:	cc ce       	rjmp	.-616    	; 0x7e80 <waves+0x80>
    80e8:	d0 d2       	rcall	.+1440   	; 0x868a <waves+0x88a>
    80ea:	d4 d6       	rcall	.+3496   	; 0x8e94 <LBCollides+0xe>
    80ec:	d8 da       	rcall	.-2640   	; 0x769e <TriggerNote+0x60>
    80ee:	dc de       	rcall	.-584    	; 0x7ea8 <waves+0xa8>
    80f0:	e0 e2       	ldi	r30, 0x20	; 32
    80f2:	e4 e6       	ldi	r30, 0x64	; 100
    80f4:	e8 ea       	ldi	r30, 0xA8	; 168
    80f6:	ec ee       	ldi	r30, 0xEC	; 236
    80f8:	f0 f2       	brcs	.-68     	; 0x80b6 <waves+0x2b6>
    80fa:	f4 f6       	brge	.-68     	; 0x80b8 <waves+0x2b8>
    80fc:	f8 fa       	.word	0xfaf8	; ????
    80fe:	fc fe       	.word	0xfefc	; ????
    8100:	7f 7f       	andi	r23, 0xFF	; 255
    8102:	7f 7f       	andi	r23, 0xFF	; 255
    8104:	7f 7f       	andi	r23, 0xFF	; 255
    8106:	7f 7f       	andi	r23, 0xFF	; 255
    8108:	7f 7f       	andi	r23, 0xFF	; 255
    810a:	7f 7f       	andi	r23, 0xFF	; 255
    810c:	7f 7f       	andi	r23, 0xFF	; 255
    810e:	7f 7f       	andi	r23, 0xFF	; 255
    8110:	7f 7f       	andi	r23, 0xFF	; 255
    8112:	7f 7f       	andi	r23, 0xFF	; 255
    8114:	7f 7f       	andi	r23, 0xFF	; 255
    8116:	7f 7f       	andi	r23, 0xFF	; 255
    8118:	7f 7f       	andi	r23, 0xFF	; 255
    811a:	7f 7f       	andi	r23, 0xFF	; 255
    811c:	7f 7f       	andi	r23, 0xFF	; 255
    811e:	7f 7f       	andi	r23, 0xFF	; 255
    8120:	7f 7f       	andi	r23, 0xFF	; 255
    8122:	7f 7f       	andi	r23, 0xFF	; 255
    8124:	7f 7f       	andi	r23, 0xFF	; 255
    8126:	7f 7f       	andi	r23, 0xFF	; 255
    8128:	7f 7f       	andi	r23, 0xFF	; 255
    812a:	7f 7f       	andi	r23, 0xFF	; 255
    812c:	7f 7f       	andi	r23, 0xFF	; 255
    812e:	7f 7f       	andi	r23, 0xFF	; 255
    8130:	7f 7f       	andi	r23, 0xFF	; 255
    8132:	7f 7f       	andi	r23, 0xFF	; 255
    8134:	7f 7f       	andi	r23, 0xFF	; 255
    8136:	7f 7f       	andi	r23, 0xFF	; 255
    8138:	7f 7f       	andi	r23, 0xFF	; 255
    813a:	7f 7f       	andi	r23, 0xFF	; 255
    813c:	7f 7f       	andi	r23, 0xFF	; 255
    813e:	7f 7f       	andi	r23, 0xFF	; 255
    8140:	80 80       	ld	r8, Z
    8142:	80 80       	ld	r8, Z
    8144:	80 80       	ld	r8, Z
    8146:	80 80       	ld	r8, Z
    8148:	80 80       	ld	r8, Z
    814a:	80 80       	ld	r8, Z
    814c:	80 80       	ld	r8, Z
    814e:	80 80       	ld	r8, Z
    8150:	80 80       	ld	r8, Z
    8152:	80 80       	ld	r8, Z
    8154:	80 80       	ld	r8, Z
    8156:	80 80       	ld	r8, Z
    8158:	80 80       	ld	r8, Z
    815a:	80 80       	ld	r8, Z
    815c:	80 80       	ld	r8, Z
    815e:	80 80       	ld	r8, Z
    8160:	80 80       	ld	r8, Z
    8162:	80 80       	ld	r8, Z
    8164:	80 80       	ld	r8, Z
    8166:	80 80       	ld	r8, Z
    8168:	80 80       	ld	r8, Z
    816a:	80 80       	ld	r8, Z
    816c:	80 80       	ld	r8, Z
    816e:	80 80       	ld	r8, Z
    8170:	80 80       	ld	r8, Z
    8172:	80 80       	ld	r8, Z
    8174:	80 80       	ld	r8, Z
    8176:	80 80       	ld	r8, Z
    8178:	80 80       	ld	r8, Z
    817a:	80 80       	ld	r8, Z
    817c:	80 80       	ld	r8, Z
    817e:	80 80       	ld	r8, Z
    8180:	80 80       	ld	r8, Z
    8182:	80 80       	ld	r8, Z
    8184:	80 80       	ld	r8, Z
    8186:	80 80       	ld	r8, Z
    8188:	80 80       	ld	r8, Z
    818a:	80 80       	ld	r8, Z
    818c:	80 80       	ld	r8, Z
    818e:	80 80       	ld	r8, Z
    8190:	80 80       	ld	r8, Z
    8192:	80 80       	ld	r8, Z
    8194:	80 80       	ld	r8, Z
    8196:	80 80       	ld	r8, Z
    8198:	80 80       	ld	r8, Z
    819a:	80 80       	ld	r8, Z
    819c:	80 80       	ld	r8, Z
    819e:	80 80       	ld	r8, Z
    81a0:	80 80       	ld	r8, Z
    81a2:	80 80       	ld	r8, Z
    81a4:	80 80       	ld	r8, Z
    81a6:	80 80       	ld	r8, Z
    81a8:	80 80       	ld	r8, Z
    81aa:	80 80       	ld	r8, Z
    81ac:	80 80       	ld	r8, Z
    81ae:	80 80       	ld	r8, Z
    81b0:	80 80       	ld	r8, Z
    81b2:	80 80       	ld	r8, Z
    81b4:	80 80       	ld	r8, Z
    81b6:	80 80       	ld	r8, Z
    81b8:	80 80       	ld	r8, Z
    81ba:	80 80       	ld	r8, Z
    81bc:	80 80       	ld	r8, Z
    81be:	80 80       	ld	r8, Z
    81c0:	80 80       	ld	r8, Z
    81c2:	80 80       	ld	r8, Z
    81c4:	80 80       	ld	r8, Z
    81c6:	80 80       	ld	r8, Z
    81c8:	80 80       	ld	r8, Z
    81ca:	80 80       	ld	r8, Z
    81cc:	80 80       	ld	r8, Z
    81ce:	80 80       	ld	r8, Z
    81d0:	80 80       	ld	r8, Z
    81d2:	80 80       	ld	r8, Z
    81d4:	80 80       	ld	r8, Z
    81d6:	80 80       	ld	r8, Z
    81d8:	80 80       	ld	r8, Z
    81da:	80 80       	ld	r8, Z
    81dc:	80 80       	ld	r8, Z
    81de:	80 80       	ld	r8, Z
    81e0:	80 80       	ld	r8, Z
    81e2:	80 80       	ld	r8, Z
    81e4:	80 80       	ld	r8, Z
    81e6:	80 80       	ld	r8, Z
    81e8:	80 80       	ld	r8, Z
    81ea:	80 80       	ld	r8, Z
    81ec:	80 80       	ld	r8, Z
    81ee:	80 80       	ld	r8, Z
    81f0:	80 80       	ld	r8, Z
    81f2:	80 80       	ld	r8, Z
    81f4:	80 80       	ld	r8, Z
    81f6:	80 80       	ld	r8, Z
    81f8:	80 80       	ld	r8, Z
    81fa:	80 80       	ld	r8, Z
    81fc:	80 80       	ld	r8, Z
    81fe:	80 80       	ld	r8, Z
    8200:	7f 7f       	andi	r23, 0xFF	; 255
    8202:	7f 7f       	andi	r23, 0xFF	; 255
    8204:	7f 7f       	andi	r23, 0xFF	; 255
    8206:	7f 7f       	andi	r23, 0xFF	; 255
    8208:	7f 7f       	andi	r23, 0xFF	; 255
    820a:	7f 7f       	andi	r23, 0xFF	; 255
    820c:	7f 7f       	andi	r23, 0xFF	; 255
    820e:	7f 7f       	andi	r23, 0xFF	; 255
    8210:	7f 7f       	andi	r23, 0xFF	; 255
    8212:	7f 7f       	andi	r23, 0xFF	; 255
    8214:	7f 7f       	andi	r23, 0xFF	; 255
    8216:	7f 7f       	andi	r23, 0xFF	; 255
    8218:	7f 7f       	andi	r23, 0xFF	; 255
    821a:	7f 7f       	andi	r23, 0xFF	; 255
    821c:	7f 7f       	andi	r23, 0xFF	; 255
    821e:	7f 7f       	andi	r23, 0xFF	; 255
    8220:	7f 7f       	andi	r23, 0xFF	; 255
    8222:	7f 7f       	andi	r23, 0xFF	; 255
    8224:	7f 7f       	andi	r23, 0xFF	; 255
    8226:	7f 7f       	andi	r23, 0xFF	; 255
    8228:	7f 7f       	andi	r23, 0xFF	; 255
    822a:	7f 7f       	andi	r23, 0xFF	; 255
    822c:	7f 7f       	andi	r23, 0xFF	; 255
    822e:	7f 7f       	andi	r23, 0xFF	; 255
    8230:	7f 7f       	andi	r23, 0xFF	; 255
    8232:	7f 7f       	andi	r23, 0xFF	; 255
    8234:	7f 7f       	andi	r23, 0xFF	; 255
    8236:	7f 7f       	andi	r23, 0xFF	; 255
    8238:	7f 7f       	andi	r23, 0xFF	; 255
    823a:	7f 7f       	andi	r23, 0xFF	; 255
    823c:	7f 7f       	andi	r23, 0xFF	; 255
    823e:	7f 7f       	andi	r23, 0xFF	; 255
    8240:	7f 7f       	andi	r23, 0xFF	; 255
    8242:	7f 7f       	andi	r23, 0xFF	; 255
    8244:	7f 7f       	andi	r23, 0xFF	; 255
    8246:	7f 7f       	andi	r23, 0xFF	; 255
    8248:	7f 7f       	andi	r23, 0xFF	; 255
    824a:	7f 7f       	andi	r23, 0xFF	; 255
    824c:	7f 7f       	andi	r23, 0xFF	; 255
    824e:	7f 7f       	andi	r23, 0xFF	; 255
    8250:	7f 7f       	andi	r23, 0xFF	; 255
    8252:	7f 7f       	andi	r23, 0xFF	; 255
    8254:	7f 7f       	andi	r23, 0xFF	; 255
    8256:	7f 7f       	andi	r23, 0xFF	; 255
    8258:	7f 7f       	andi	r23, 0xFF	; 255
    825a:	7f 7f       	andi	r23, 0xFF	; 255
    825c:	7f 7f       	andi	r23, 0xFF	; 255
    825e:	7f 7f       	andi	r23, 0xFF	; 255
    8260:	7f 7f       	andi	r23, 0xFF	; 255
    8262:	7f 7f       	andi	r23, 0xFF	; 255
    8264:	7f 7f       	andi	r23, 0xFF	; 255
    8266:	7f 7f       	andi	r23, 0xFF	; 255
    8268:	7f 7f       	andi	r23, 0xFF	; 255
    826a:	7f 7f       	andi	r23, 0xFF	; 255
    826c:	7f 7f       	andi	r23, 0xFF	; 255
    826e:	7f 7f       	andi	r23, 0xFF	; 255
    8270:	7f 7f       	andi	r23, 0xFF	; 255
    8272:	7f 7f       	andi	r23, 0xFF	; 255
    8274:	7f 7f       	andi	r23, 0xFF	; 255
    8276:	7f 7f       	andi	r23, 0xFF	; 255
    8278:	7f 7f       	andi	r23, 0xFF	; 255
    827a:	7f 7f       	andi	r23, 0xFF	; 255
    827c:	7f 7f       	andi	r23, 0xFF	; 255
    827e:	7f 7f       	andi	r23, 0xFF	; 255
    8280:	80 80       	ld	r8, Z
    8282:	80 80       	ld	r8, Z
    8284:	80 80       	ld	r8, Z
    8286:	80 80       	ld	r8, Z
    8288:	80 80       	ld	r8, Z
    828a:	80 80       	ld	r8, Z
    828c:	80 80       	ld	r8, Z
    828e:	80 80       	ld	r8, Z
    8290:	80 80       	ld	r8, Z
    8292:	80 80       	ld	r8, Z
    8294:	80 80       	ld	r8, Z
    8296:	80 80       	ld	r8, Z
    8298:	80 80       	ld	r8, Z
    829a:	80 80       	ld	r8, Z
    829c:	80 80       	ld	r8, Z
    829e:	80 80       	ld	r8, Z
    82a0:	80 80       	ld	r8, Z
    82a2:	80 80       	ld	r8, Z
    82a4:	80 80       	ld	r8, Z
    82a6:	80 80       	ld	r8, Z
    82a8:	80 80       	ld	r8, Z
    82aa:	80 80       	ld	r8, Z
    82ac:	80 80       	ld	r8, Z
    82ae:	80 80       	ld	r8, Z
    82b0:	80 80       	ld	r8, Z
    82b2:	80 80       	ld	r8, Z
    82b4:	80 80       	ld	r8, Z
    82b6:	80 80       	ld	r8, Z
    82b8:	80 80       	ld	r8, Z
    82ba:	80 80       	ld	r8, Z
    82bc:	80 80       	ld	r8, Z
    82be:	80 80       	ld	r8, Z
    82c0:	80 80       	ld	r8, Z
    82c2:	80 80       	ld	r8, Z
    82c4:	80 80       	ld	r8, Z
    82c6:	80 80       	ld	r8, Z
    82c8:	80 80       	ld	r8, Z
    82ca:	80 80       	ld	r8, Z
    82cc:	80 80       	ld	r8, Z
    82ce:	80 80       	ld	r8, Z
    82d0:	80 80       	ld	r8, Z
    82d2:	80 80       	ld	r8, Z
    82d4:	80 80       	ld	r8, Z
    82d6:	80 80       	ld	r8, Z
    82d8:	80 80       	ld	r8, Z
    82da:	80 80       	ld	r8, Z
    82dc:	80 80       	ld	r8, Z
    82de:	80 80       	ld	r8, Z
    82e0:	80 80       	ld	r8, Z
    82e2:	80 80       	ld	r8, Z
    82e4:	80 80       	ld	r8, Z
    82e6:	80 80       	ld	r8, Z
    82e8:	80 80       	ld	r8, Z
    82ea:	80 80       	ld	r8, Z
    82ec:	80 80       	ld	r8, Z
    82ee:	80 80       	ld	r8, Z
    82f0:	80 80       	ld	r8, Z
    82f2:	80 80       	ld	r8, Z
    82f4:	80 80       	ld	r8, Z
    82f6:	80 80       	ld	r8, Z
    82f8:	80 80       	ld	r8, Z
    82fa:	80 80       	ld	r8, Z
    82fc:	80 80       	ld	r8, Z
    82fe:	80 80       	ld	r8, Z
    8300:	7f 7f       	andi	r23, 0xFF	; 255
    8302:	7f 7f       	andi	r23, 0xFF	; 255
    8304:	7f 7f       	andi	r23, 0xFF	; 255
    8306:	7f 7f       	andi	r23, 0xFF	; 255
    8308:	7f 7f       	andi	r23, 0xFF	; 255
    830a:	7f 7f       	andi	r23, 0xFF	; 255
    830c:	7f 7f       	andi	r23, 0xFF	; 255
    830e:	7f 7f       	andi	r23, 0xFF	; 255
    8310:	7f 7f       	andi	r23, 0xFF	; 255
    8312:	7f 7f       	andi	r23, 0xFF	; 255
    8314:	7f 7f       	andi	r23, 0xFF	; 255
    8316:	7f 7f       	andi	r23, 0xFF	; 255
    8318:	7f 7f       	andi	r23, 0xFF	; 255
    831a:	7f 7f       	andi	r23, 0xFF	; 255
    831c:	7f 7f       	andi	r23, 0xFF	; 255
    831e:	7f 7f       	andi	r23, 0xFF	; 255
    8320:	7f 7f       	andi	r23, 0xFF	; 255
    8322:	7f 7f       	andi	r23, 0xFF	; 255
    8324:	7f 7f       	andi	r23, 0xFF	; 255
    8326:	7f 7f       	andi	r23, 0xFF	; 255
    8328:	7f 7f       	andi	r23, 0xFF	; 255
    832a:	7f 7f       	andi	r23, 0xFF	; 255
    832c:	7f 7f       	andi	r23, 0xFF	; 255
    832e:	7f 7f       	andi	r23, 0xFF	; 255
    8330:	7f 7f       	andi	r23, 0xFF	; 255
    8332:	7f 7f       	andi	r23, 0xFF	; 255
    8334:	7f 7f       	andi	r23, 0xFF	; 255
    8336:	7f 7f       	andi	r23, 0xFF	; 255
    8338:	7f 7f       	andi	r23, 0xFF	; 255
    833a:	7f 7f       	andi	r23, 0xFF	; 255
    833c:	7f 7f       	andi	r23, 0xFF	; 255
    833e:	7f 7f       	andi	r23, 0xFF	; 255
    8340:	7f 7f       	andi	r23, 0xFF	; 255
    8342:	7f 7f       	andi	r23, 0xFF	; 255
    8344:	7f 7f       	andi	r23, 0xFF	; 255
    8346:	7f 7f       	andi	r23, 0xFF	; 255
    8348:	7f 7f       	andi	r23, 0xFF	; 255
    834a:	7f 7f       	andi	r23, 0xFF	; 255
    834c:	7f 7f       	andi	r23, 0xFF	; 255
    834e:	7f 7f       	andi	r23, 0xFF	; 255
    8350:	7f 7f       	andi	r23, 0xFF	; 255
    8352:	7f 7f       	andi	r23, 0xFF	; 255
    8354:	7f 7f       	andi	r23, 0xFF	; 255
    8356:	7f 7f       	andi	r23, 0xFF	; 255
    8358:	7f 7f       	andi	r23, 0xFF	; 255
    835a:	7f 7f       	andi	r23, 0xFF	; 255
    835c:	7f 7f       	andi	r23, 0xFF	; 255
    835e:	7f 7f       	andi	r23, 0xFF	; 255
    8360:	7f 7f       	andi	r23, 0xFF	; 255
    8362:	7f 7f       	andi	r23, 0xFF	; 255
    8364:	7f 7f       	andi	r23, 0xFF	; 255
    8366:	7f 7f       	andi	r23, 0xFF	; 255
    8368:	7f 7f       	andi	r23, 0xFF	; 255
    836a:	7f 7f       	andi	r23, 0xFF	; 255
    836c:	7f 7f       	andi	r23, 0xFF	; 255
    836e:	7f 7f       	andi	r23, 0xFF	; 255
    8370:	7f 7f       	andi	r23, 0xFF	; 255
    8372:	7f 7f       	andi	r23, 0xFF	; 255
    8374:	7f 7f       	andi	r23, 0xFF	; 255
    8376:	7f 7f       	andi	r23, 0xFF	; 255
    8378:	7f 7f       	andi	r23, 0xFF	; 255
    837a:	7f 7f       	andi	r23, 0xFF	; 255
    837c:	7f 7f       	andi	r23, 0xFF	; 255
    837e:	7f 7f       	andi	r23, 0xFF	; 255
    8380:	7f 7f       	andi	r23, 0xFF	; 255
    8382:	7f 7f       	andi	r23, 0xFF	; 255
    8384:	7f 7f       	andi	r23, 0xFF	; 255
    8386:	7f 7f       	andi	r23, 0xFF	; 255
    8388:	7f 7f       	andi	r23, 0xFF	; 255
    838a:	7f 7f       	andi	r23, 0xFF	; 255
    838c:	7f 7f       	andi	r23, 0xFF	; 255
    838e:	7f 7f       	andi	r23, 0xFF	; 255
    8390:	7f 7f       	andi	r23, 0xFF	; 255
    8392:	7f 7f       	andi	r23, 0xFF	; 255
    8394:	7f 7f       	andi	r23, 0xFF	; 255
    8396:	7f 7f       	andi	r23, 0xFF	; 255
    8398:	7f 7f       	andi	r23, 0xFF	; 255
    839a:	7f 7f       	andi	r23, 0xFF	; 255
    839c:	7f 7f       	andi	r23, 0xFF	; 255
    839e:	7f 7f       	andi	r23, 0xFF	; 255
    83a0:	7f 7f       	andi	r23, 0xFF	; 255
    83a2:	7f 7f       	andi	r23, 0xFF	; 255
    83a4:	7f 7f       	andi	r23, 0xFF	; 255
    83a6:	7f 7f       	andi	r23, 0xFF	; 255
    83a8:	7f 7f       	andi	r23, 0xFF	; 255
    83aa:	7f 7f       	andi	r23, 0xFF	; 255
    83ac:	7f 7f       	andi	r23, 0xFF	; 255
    83ae:	7f 7f       	andi	r23, 0xFF	; 255
    83b0:	7f 7f       	andi	r23, 0xFF	; 255
    83b2:	7f 7f       	andi	r23, 0xFF	; 255
    83b4:	7f 7f       	andi	r23, 0xFF	; 255
    83b6:	7f 7f       	andi	r23, 0xFF	; 255
    83b8:	7f 7f       	andi	r23, 0xFF	; 255
    83ba:	7f 7f       	andi	r23, 0xFF	; 255
    83bc:	7f 7f       	andi	r23, 0xFF	; 255
    83be:	7f 7f       	andi	r23, 0xFF	; 255
    83c0:	80 80       	ld	r8, Z
    83c2:	80 80       	ld	r8, Z
    83c4:	80 80       	ld	r8, Z
    83c6:	80 80       	ld	r8, Z
    83c8:	80 80       	ld	r8, Z
    83ca:	80 80       	ld	r8, Z
    83cc:	80 80       	ld	r8, Z
    83ce:	80 80       	ld	r8, Z
    83d0:	80 80       	ld	r8, Z
    83d2:	80 80       	ld	r8, Z
    83d4:	80 80       	ld	r8, Z
    83d6:	80 80       	ld	r8, Z
    83d8:	80 80       	ld	r8, Z
    83da:	80 80       	ld	r8, Z
    83dc:	80 80       	ld	r8, Z
    83de:	80 80       	ld	r8, Z
    83e0:	80 80       	ld	r8, Z
    83e2:	80 80       	ld	r8, Z
    83e4:	80 80       	ld	r8, Z
    83e6:	80 80       	ld	r8, Z
    83e8:	80 80       	ld	r8, Z
    83ea:	80 80       	ld	r8, Z
    83ec:	80 80       	ld	r8, Z
    83ee:	80 80       	ld	r8, Z
    83f0:	80 80       	ld	r8, Z
    83f2:	80 80       	ld	r8, Z
    83f4:	80 80       	ld	r8, Z
    83f6:	80 80       	ld	r8, Z
    83f8:	80 80       	ld	r8, Z
    83fa:	80 80       	ld	r8, Z
    83fc:	80 80       	ld	r8, Z
    83fe:	80 80       	ld	r8, Z
    8400:	03 09       	sbc	r16, r3
    8402:	13 1e       	adc	r1, r19
    8404:	28 31       	cpi	r18, 0x18	; 24
    8406:	3a 40       	sbci	r19, 0x0A	; 10
    8408:	46 4c       	sbci	r20, 0xC6	; 198
    840a:	50 54       	subi	r21, 0x40	; 64
    840c:	58 5b       	subi	r21, 0xB8	; 184
    840e:	5e 61       	ori	r21, 0x1E	; 30
    8410:	63 65       	ori	r22, 0x53	; 83
    8412:	67 69       	ori	r22, 0x97	; 151
    8414:	6b 6c       	ori	r22, 0xCB	; 203
    8416:	6e 6f       	ori	r22, 0xFE	; 254
    8418:	70 71       	andi	r23, 0x10	; 16
    841a:	72 73       	andi	r23, 0x32	; 50
    841c:	74 75       	andi	r23, 0x54	; 84
    841e:	76 77       	andi	r23, 0x76	; 118
    8420:	77 78       	andi	r23, 0x87	; 135
    8422:	79 79       	andi	r23, 0x99	; 153
    8424:	7a 7a       	andi	r23, 0xAA	; 170
    8426:	7b 7b       	andi	r23, 0xBB	; 187
    8428:	7c 7c       	andi	r23, 0xCC	; 204
    842a:	7c 7d       	andi	r23, 0xDC	; 220
    842c:	7d 7d       	andi	r23, 0xDD	; 221
    842e:	7e 7e       	andi	r23, 0xEE	; 238
    8430:	7e 7e       	andi	r23, 0xEE	; 238
    8432:	7f 7f       	andi	r23, 0xFF	; 255
    8434:	7f 7f       	andi	r23, 0xFF	; 255
    8436:	7f 7f       	andi	r23, 0xFF	; 255
    8438:	7f 7f       	andi	r23, 0xFF	; 255
    843a:	7f 7f       	andi	r23, 0xFF	; 255
    843c:	7f 7f       	andi	r23, 0xFF	; 255
    843e:	7f 7f       	andi	r23, 0xFF	; 255
    8440:	7f 7f       	andi	r23, 0xFF	; 255
    8442:	7f 7f       	andi	r23, 0xFF	; 255
    8444:	7f 7f       	andi	r23, 0xFF	; 255
    8446:	7f 7f       	andi	r23, 0xFF	; 255
    8448:	7f 7f       	andi	r23, 0xFF	; 255
    844a:	7f 7f       	andi	r23, 0xFF	; 255
    844c:	7f 7e       	andi	r23, 0xEF	; 239
    844e:	7e 7e       	andi	r23, 0xEE	; 238
    8450:	7e 7d       	andi	r23, 0xDE	; 222
    8452:	7d 7d       	andi	r23, 0xDD	; 221
    8454:	7c 7c       	andi	r23, 0xCC	; 204
    8456:	7c 7b       	andi	r23, 0xBC	; 188
    8458:	7b 7a       	andi	r23, 0xAB	; 171
    845a:	7a 79       	andi	r23, 0x9A	; 154
    845c:	79 78       	andi	r23, 0x89	; 137
    845e:	77 77       	andi	r23, 0x77	; 119
    8460:	76 75       	andi	r23, 0x56	; 86
    8462:	74 73       	andi	r23, 0x34	; 52
    8464:	72 71       	andi	r23, 0x12	; 18
    8466:	70 6f       	ori	r23, 0xF0	; 240
    8468:	6e 6c       	ori	r22, 0xCE	; 206
    846a:	6b 69       	ori	r22, 0x9B	; 155
    846c:	67 65       	ori	r22, 0x57	; 87
    846e:	63 61       	ori	r22, 0x13	; 19
    8470:	5e 5b       	subi	r21, 0xBE	; 190
    8472:	58 54       	subi	r21, 0x48	; 72
    8474:	50 4c       	sbci	r21, 0xC0	; 192
    8476:	46 40       	sbci	r20, 0x06	; 6
    8478:	3a 31       	cpi	r19, 0x1A	; 26
    847a:	28 1e       	adc	r2, r24
    847c:	13 09       	sbc	r17, r3
    847e:	03 00       	.word	0x0003	; ????
    8480:	c6 cc       	rjmp	.-1652   	; 0x7e0e <waves+0xe>
    8482:	d5 db       	rcall	.-2134   	; 0x7c2e <steptable+0x26>
    8484:	df e3       	ldi	r29, 0x3F	; 63
    8486:	e5 e7       	ldi	r30, 0x75	; 117
    8488:	e9 ea       	ldi	r30, 0xA9	; 169
    848a:	eb ec       	ldi	r30, 0xCB	; 203
    848c:	ed ee       	ldi	r30, 0xED	; 237
    848e:	ef ef       	ldi	r30, 0xFF	; 255
    8490:	f0 f0       	brcs	.+60     	; 0x84ce <waves+0x6ce>
    8492:	f0 f1       	brcs	.+124    	; 0x8510 <waves+0x710>
    8494:	f1 f1       	breq	.+124    	; 0x8512 <waves+0x712>
    8496:	f1 f2       	breq	.-68     	; 0x8454 <waves+0x654>
    8498:	f2 f2       	brmi	.-68     	; 0x8456 <waves+0x656>
    849a:	f2 f2       	brmi	.-68     	; 0x8458 <waves+0x658>
    849c:	f2 f2       	brmi	.-68     	; 0x845a <waves+0x65a>
    849e:	f2 f3       	brmi	.-4      	; 0x849c <waves+0x69c>
    84a0:	f3 f3       	brvs	.-4      	; 0x849e <waves+0x69e>
    84a2:	f3 f3       	brvs	.-4      	; 0x84a0 <waves+0x6a0>
    84a4:	f3 f3       	brvs	.-4      	; 0x84a2 <waves+0x6a2>
    84a6:	f3 f3       	brvs	.-4      	; 0x84a4 <waves+0x6a4>
    84a8:	f3 f3       	brvs	.-4      	; 0x84a6 <waves+0x6a6>
    84aa:	f3 f3       	brvs	.-4      	; 0x84a8 <waves+0x6a8>
    84ac:	f3 f3       	brvs	.-4      	; 0x84aa <waves+0x6aa>
    84ae:	f3 f3       	brvs	.-4      	; 0x84ac <waves+0x6ac>
    84b0:	f3 f3       	brvs	.-4      	; 0x84ae <waves+0x6ae>
    84b2:	f3 f3       	brvs	.-4      	; 0x84b0 <waves+0x6b0>
    84b4:	f3 f3       	brvs	.-4      	; 0x84b2 <waves+0x6b2>
    84b6:	f3 f3       	brvs	.-4      	; 0x84b4 <waves+0x6b4>
    84b8:	f3 f3       	brvs	.-4      	; 0x84b6 <waves+0x6b6>
    84ba:	f3 f3       	brvs	.-4      	; 0x84b8 <waves+0x6b8>
    84bc:	f3 f3       	brvs	.-4      	; 0x84ba <waves+0x6ba>
    84be:	f3 f3       	brvs	.-4      	; 0x84bc <waves+0x6bc>
    84c0:	f3 f3       	brvs	.-4      	; 0x84be <waves+0x6be>
    84c2:	f3 f3       	brvs	.-4      	; 0x84c0 <waves+0x6c0>
    84c4:	f3 f3       	brvs	.-4      	; 0x84c2 <waves+0x6c2>
    84c6:	f3 f3       	brvs	.-4      	; 0x84c4 <waves+0x6c4>
    84c8:	f3 f3       	brvs	.-4      	; 0x84c6 <waves+0x6c6>
    84ca:	f3 f3       	brvs	.-4      	; 0x84c8 <waves+0x6c8>
    84cc:	f3 f3       	brvs	.-4      	; 0x84ca <waves+0x6ca>
    84ce:	f3 f3       	brvs	.-4      	; 0x84cc <waves+0x6cc>
    84d0:	f3 f3       	brvs	.-4      	; 0x84ce <waves+0x6ce>
    84d2:	f3 f3       	brvs	.-4      	; 0x84d0 <waves+0x6d0>
    84d4:	f3 f3       	brvs	.-4      	; 0x84d2 <waves+0x6d2>
    84d6:	f3 f3       	brvs	.-4      	; 0x84d4 <waves+0x6d4>
    84d8:	f3 f3       	brvs	.-4      	; 0x84d6 <waves+0x6d6>
    84da:	f3 f3       	brvs	.-4      	; 0x84d8 <waves+0x6d8>
    84dc:	f3 f3       	brvs	.-4      	; 0x84da <waves+0x6da>
    84de:	f3 f3       	brvs	.-4      	; 0x84dc <waves+0x6dc>
    84e0:	f2 f2       	brmi	.-68     	; 0x849e <waves+0x69e>
    84e2:	f2 f2       	brmi	.-68     	; 0x84a0 <waves+0x6a0>
    84e4:	f2 f2       	brmi	.-68     	; 0x84a2 <waves+0x6a2>
    84e6:	f2 f2       	brmi	.-68     	; 0x84a4 <waves+0x6a4>
    84e8:	f1 f1       	breq	.+124    	; 0x8566 <waves+0x766>
    84ea:	f1 f1       	breq	.+124    	; 0x8568 <waves+0x768>
    84ec:	f0 f0       	brcs	.+60     	; 0x852a <waves+0x72a>
    84ee:	f0 ef       	ldi	r31, 0xF0	; 240
    84f0:	ef ee       	ldi	r30, 0xEF	; 239
    84f2:	ed ec       	ldi	r30, 0xCD	; 205
    84f4:	eb ea       	ldi	r30, 0xAB	; 171
    84f6:	e9 e7       	ldi	r30, 0x79	; 121
    84f8:	e5 e3       	ldi	r30, 0x35	; 53
    84fa:	df db       	rcall	.-2114   	; 0x7cba <steptable+0xb2>
    84fc:	d5 cc       	rjmp	.-1622   	; 0x7ea8 <waves+0xa8>
    84fe:	c6 00       	.word	0x00c6	; ????
    8500:	00 28       	or	r0, r0
    8502:	3d 42       	sbci	r19, 0x2D	; 45
    8504:	30 2d       	mov	r19, r0
    8506:	2c 2b       	or	r18, r28
    8508:	2c 2d       	mov	r18, r12
    850a:	2e 2f       	mov	r18, r30
    850c:	30 32       	cpi	r19, 0x20	; 32
    850e:	33 35       	cpi	r19, 0x53	; 83
    8510:	37 39       	cpi	r19, 0x97	; 151
    8512:	3b 3d       	cpi	r19, 0xDB	; 219
    8514:	3f 41       	sbci	r19, 0x1F	; 31
    8516:	43 45       	sbci	r20, 0x53	; 83
    8518:	48 4a       	sbci	r20, 0xA8	; 168
    851a:	4c 4e       	sbci	r20, 0xEC	; 236
    851c:	50 53       	subi	r21, 0x30	; 48
    851e:	55 57       	subi	r21, 0x75	; 117
    8520:	59 5b       	subi	r21, 0xB9	; 185
    8522:	5d 5f       	subi	r21, 0xFD	; 253
    8524:	61 63       	ori	r22, 0x31	; 49
    8526:	65 67       	ori	r22, 0x75	; 117
    8528:	69 6b       	ori	r22, 0xB9	; 185
    852a:	6c 6e       	ori	r22, 0xEC	; 236
    852c:	70 71       	andi	r23, 0x10	; 16
    852e:	73 74       	andi	r23, 0x43	; 67
    8530:	75 77       	andi	r23, 0x75	; 117
    8532:	78 79       	andi	r23, 0x98	; 152
    8534:	7a 7b       	andi	r23, 0xBA	; 186
    8536:	7c 7d       	andi	r23, 0xDC	; 220
    8538:	7d 7e       	andi	r23, 0xED	; 237
    853a:	7e 7f       	andi	r23, 0xFE	; 254
    853c:	7f 7f       	andi	r23, 0xFF	; 255
    853e:	7f 7f       	andi	r23, 0xFF	; 255
    8540:	7f 7f       	andi	r23, 0xFF	; 255
    8542:	7f 7f       	andi	r23, 0xFF	; 255
    8544:	7f 7f       	andi	r23, 0xFF	; 255
    8546:	7e 7e       	andi	r23, 0xEE	; 238
    8548:	7d 7d       	andi	r23, 0xDD	; 221
    854a:	7c 7b       	andi	r23, 0xBC	; 188
    854c:	7a 79       	andi	r23, 0x9A	; 154
    854e:	78 77       	andi	r23, 0x78	; 120
    8550:	75 74       	andi	r23, 0x45	; 69
    8552:	73 71       	andi	r23, 0x13	; 19
    8554:	70 6e       	ori	r23, 0xE0	; 224
    8556:	6c 6b       	ori	r22, 0xBC	; 188
    8558:	69 67       	ori	r22, 0x79	; 121
    855a:	65 63       	ori	r22, 0x35	; 53
    855c:	61 5f       	subi	r22, 0xF1	; 241
    855e:	5d 5b       	subi	r21, 0xBD	; 189
    8560:	59 57       	subi	r21, 0x79	; 121
    8562:	55 53       	subi	r21, 0x35	; 53
    8564:	50 4e       	sbci	r21, 0xE0	; 224
    8566:	4c 4a       	sbci	r20, 0xAC	; 172
    8568:	48 45       	sbci	r20, 0x58	; 88
    856a:	43 41       	sbci	r20, 0x13	; 19
    856c:	3f 3d       	cpi	r19, 0xDF	; 223
    856e:	3b 39       	cpi	r19, 0x9B	; 155
    8570:	37 35       	cpi	r19, 0x57	; 87
    8572:	33 32       	cpi	r19, 0x23	; 35
    8574:	30 2f       	mov	r19, r16
    8576:	2e 2d       	mov	r18, r14
    8578:	2c 2b       	or	r18, r28
    857a:	2c 2d       	mov	r18, r12
    857c:	30 42       	sbci	r19, 0x20	; 32
    857e:	3d 28       	or	r3, r13
    8580:	00 e9       	ldi	r16, 0x90	; 144
    8582:	e5 fe       	sbrs	r14, 5
    8584:	d4 d7       	rcall	.+4008   	; 0x952e <append_tile_column+0x54>
    8586:	d7 d7       	rcall	.+4014   	; 0x9536 <append_tile_column+0x5c>
    8588:	d6 d4       	rcall	.+2476   	; 0x8f36 <LBMapSprite+0x46>
    858a:	d2 d0       	rcall	.+420    	; 0x8730 <waves+0x930>
    858c:	ce cc       	rjmp	.-1636   	; 0x7f2a <waves+0x12a>
    858e:	ca c8       	rjmp	.-3692   	; 0x7724 <ProcessMusic+0x66>
    8590:	c6 c3       	rjmp	.+1932   	; 0x8d1e <LBGetJoyPadState+0x46>
    8592:	c1 bf       	out	0x31, r28	; 49
    8594:	bd ba       	out	0x1d, r11	; 29
    8596:	b8 b6       	in	r11, 0x38	; 56
    8598:	b4 b1       	in	r27, 0x04	; 4
    859a:	af ad       	ldd	r26, Y+63	; 0x3f
    859c:	ab a9       	ldd	r26, Y+51	; 0x33
    859e:	a7 a5       	ldd	r26, Z+47	; 0x2f
    85a0:	a3 a1       	ldd	r26, Z+35	; 0x23
    85a2:	9f 9e       	mul	r9, r31
    85a4:	9c 9a       	sbi	0x13, 4	; 19
    85a6:	99 97       	sbiw	r26, 0x29	; 41
    85a8:	95 94       	asr	r9
    85aa:	93 91       	.word	0x9193	; ????
    85ac:	90 8f       	std	Z+24, r25	; 0x18
    85ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    85b0:	8b 8a       	std	Y+19, r8	; 0x13
    85b2:	89 88       	ldd	r8, Y+17	; 0x11
    85b4:	88 87       	std	Y+8, r24	; 0x08
    85b6:	86 85       	ldd	r24, Z+14	; 0x0e
    85b8:	85 84       	ldd	r8, Z+13	; 0x0d
    85ba:	84 84       	ldd	r8, Z+12	; 0x0c
    85bc:	83 83       	std	Z+3, r24	; 0x03
    85be:	83 83       	std	Z+3, r24	; 0x03
    85c0:	83 83       	std	Z+3, r24	; 0x03
    85c2:	83 83       	std	Z+3, r24	; 0x03
    85c4:	83 84       	ldd	r8, Z+11	; 0x0b
    85c6:	84 84       	ldd	r8, Z+12	; 0x0c
    85c8:	85 85       	ldd	r24, Z+13	; 0x0d
    85ca:	86 87       	std	Z+14, r24	; 0x0e
    85cc:	88 88       	ldd	r8, Y+16	; 0x10
    85ce:	89 8a       	std	Y+17, r8	; 0x11
    85d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    85d2:	8d 8f       	std	Y+29, r24	; 0x1d
    85d4:	90 91 93 94 	lds	r25, 0x9493
    85d8:	95 97       	sbiw	r26, 0x25	; 37
    85da:	99 9a       	sbi	0x13, 1	; 19
    85dc:	9c 9e       	mul	r9, r28
    85de:	9f a1       	ldd	r25, Y+39	; 0x27
    85e0:	a3 a5       	ldd	r26, Z+43	; 0x2b
    85e2:	a7 a9       	ldd	r26, Z+55	; 0x37
    85e4:	ab ad       	ldd	r26, Y+59	; 0x3b
    85e6:	af b1       	in	r26, 0x0f	; 15
    85e8:	b4 b6       	in	r11, 0x34	; 52
    85ea:	b8 ba       	out	0x18, r11	; 24
    85ec:	bd bf       	out	0x3d, r27	; 61
    85ee:	c1 c3       	rjmp	.+1922   	; 0x8d72 <LBPrintChar+0x4>
    85f0:	c6 c8       	rjmp	.-3700   	; 0x777e <ProcessMusic+0xc0>
    85f2:	ca cc       	rjmp	.-1644   	; 0x7f88 <waves+0x188>
    85f4:	ce d0       	rcall	.+412    	; 0x8792 <waves+0x992>
    85f6:	d2 d4       	rcall	.+2468   	; 0x8f9c <LBMoveSprite+0x8>
    85f8:	d6 d7       	rcall	.+4012   	; 0x95a6 <append_tile_column+0xcc>
    85fa:	d7 d7       	rcall	.+4014   	; 0x95aa <append_tile_column+0xd0>
    85fc:	d4 fe       	sbrs	r13, 4
    85fe:	e5 e9       	ldi	r30, 0x95	; 149
    8600:	f9 f8       	.word	0xf8f9	; ????
    8602:	f9 f5       	brne	.+126    	; 0x8682 <waves+0x882>
    8604:	eb e1       	ldi	r30, 0x1B	; 27
    8606:	dd de       	rcall	.-582    	; 0x83c2 <waves+0x5c2>
    8608:	e0 e2       	ldi	r30, 0x20	; 32
    860a:	e4 e5       	ldi	r30, 0x54	; 84
    860c:	e6 e5       	ldi	r30, 0x56	; 86
    860e:	e4 e2       	ldi	r30, 0x24	; 36
    8610:	de d9       	rcall	.-3140   	; 0x79ce <ProcessMusic+0x310>
    8612:	d2 ca       	rjmp	.-2652   	; 0x7bb8 <esmw+0x52>
    8614:	c1 b7       	in	r28, 0x31	; 49
    8616:	ac a2       	std	Y+36, r10	; 0x24
    8618:	99 91       	ld	r25, Y+
    861a:	8a 86       	std	Y+10, r8	; 0x0a
    861c:	83 81       	ldd	r24, Z+3	; 0x03
    861e:	80 80       	ld	r8, Z
    8620:	81 82       	std	Z+1, r8	; 0x01
    8622:	83 85       	ldd	r24, Z+11	; 0x0b
    8624:	86 88       	ldd	r8, Z+22	; 0x16
    8626:	8a 8c       	ldd	r8, Y+26	; 0x1a
    8628:	8d 8f       	std	Y+29, r24	; 0x1d
    862a:	90 92 93 95 	sts	0x9593, r9
    862e:	96 97       	sbiw	r26, 0x26	; 38
    8630:	98 99       	sbic	0x13, 0	; 19
    8632:	9a 9b       	sbis	0x13, 2	; 19
    8634:	9b 9c       	mul	r9, r11
    8636:	9d 9d       	mul	r25, r13
    8638:	9d 9e       	mul	r9, r29
    863a:	9e 9e       	mul	r9, r30
    863c:	9f 9f       	mul	r25, r31
    863e:	9f 9f       	mul	r25, r31
    8640:	9f 9f       	mul	r25, r31
    8642:	9f 9e       	mul	r9, r31
    8644:	9e 9e       	mul	r9, r30
    8646:	9d 9d       	mul	r25, r13
    8648:	9d 9c       	mul	r9, r13
    864a:	9b 9b       	sbis	0x13, 3	; 19
    864c:	9a 99       	sbic	0x13, 2	; 19
    864e:	98 97       	sbiw	r26, 0x28	; 40
    8650:	96 95       	lsr	r25
    8652:	93 92       	.word	0x9293	; ????
    8654:	90 8f       	std	Z+24, r25	; 0x18
    8656:	8d 8c       	ldd	r8, Y+29	; 0x1d
    8658:	8a 88       	ldd	r8, Y+18	; 0x12
    865a:	86 85       	ldd	r24, Z+14	; 0x0e
    865c:	83 82       	std	Z+3, r8	; 0x03
    865e:	81 80       	ldd	r8, Z+1	; 0x01
    8660:	80 81       	ld	r24, Z
    8662:	83 86       	std	Z+11, r8	; 0x0b
    8664:	8a 91       	ld	r24, -Y
    8666:	99 a2       	std	Y+33, r9	; 0x21
    8668:	ac b7       	in	r26, 0x3c	; 60
    866a:	c1 ca       	rjmp	.-2686   	; 0x7bee <esmw+0x88>
    866c:	d2 d9       	rcall	.-3164   	; 0x7a12 <ProcessMusic+0x354>
    866e:	de e2       	ldi	r29, 0x2E	; 46
    8670:	e4 e5       	ldi	r30, 0x54	; 84
    8672:	e6 e5       	ldi	r30, 0x56	; 86
    8674:	e4 e2       	ldi	r30, 0x24	; 36
    8676:	e0 de       	rcall	.-576    	; 0x8438 <waves+0x638>
    8678:	dd e1       	ldi	r29, 0x1D	; 29
    867a:	eb f5       	brvc	.+122    	; 0x86f6 <waves+0x8f6>
    867c:	f9 f8       	.word	0xf8f9	; ????
    867e:	f9 00       	.word	0x00f9	; ????
    8680:	07 08       	sbc	r0, r7
    8682:	07 0b       	sbc	r16, r23
    8684:	15 1f       	adc	r17, r21
    8686:	23 22       	and	r2, r19
    8688:	20 1e       	adc	r2, r16
    868a:	1c 1b       	sub	r17, r28
    868c:	1a 1b       	sub	r17, r26
    868e:	1c 1e       	adc	r1, r28
    8690:	22 27       	eor	r18, r18
    8692:	2e 36       	cpi	r18, 0x6E	; 110
    8694:	3f 49       	sbci	r19, 0x9F	; 159
    8696:	54 5e       	subi	r21, 0xE4	; 228
    8698:	67 6f       	ori	r22, 0xF7	; 247
    869a:	76 7a       	andi	r23, 0xA6	; 166
    869c:	7e 7f       	andi	r23, 0xFE	; 254
    869e:	7f 7f       	andi	r23, 0xFF	; 255
    86a0:	7f 7e       	andi	r23, 0xEF	; 239
    86a2:	7d 7b       	andi	r23, 0xBD	; 189
    86a4:	7a 78       	andi	r23, 0x8A	; 138
    86a6:	76 74       	andi	r23, 0x46	; 70
    86a8:	73 71       	andi	r23, 0x13	; 19
    86aa:	70 6e       	ori	r23, 0xE0	; 224
    86ac:	6d 6b       	ori	r22, 0xBD	; 189
    86ae:	6a 69       	ori	r22, 0x9A	; 154
    86b0:	68 67       	ori	r22, 0x78	; 120
    86b2:	66 65       	ori	r22, 0x56	; 86
    86b4:	65 64       	ori	r22, 0x45	; 69
    86b6:	64 63       	ori	r22, 0x34	; 52
    86b8:	63 62       	ori	r22, 0x23	; 35
    86ba:	62 62       	ori	r22, 0x22	; 34
    86bc:	61 61       	ori	r22, 0x11	; 17
    86be:	61 61       	ori	r22, 0x11	; 17
    86c0:	61 61       	ori	r22, 0x11	; 17
    86c2:	61 62       	ori	r22, 0x21	; 33
    86c4:	62 62       	ori	r22, 0x22	; 34
    86c6:	63 63       	ori	r22, 0x33	; 51
    86c8:	63 64       	ori	r22, 0x43	; 67
    86ca:	65 65       	ori	r22, 0x55	; 85
    86cc:	66 67       	ori	r22, 0x76	; 118
    86ce:	68 69       	ori	r22, 0x98	; 152
    86d0:	6a 6b       	ori	r22, 0xBA	; 186
    86d2:	6d 6e       	ori	r22, 0xED	; 237
    86d4:	70 71       	andi	r23, 0x10	; 16
    86d6:	73 74       	andi	r23, 0x43	; 67
    86d8:	76 78       	andi	r23, 0x86	; 134
    86da:	7a 7b       	andi	r23, 0xBA	; 186
    86dc:	7d 7e       	andi	r23, 0xED	; 237
    86de:	7f 7f       	andi	r23, 0xFF	; 255
    86e0:	7f 7f       	andi	r23, 0xFF	; 255
    86e2:	7e 7a       	andi	r23, 0xAE	; 174
    86e4:	76 6f       	ori	r23, 0xF6	; 246
    86e6:	67 5e       	subi	r22, 0xE7	; 231
    86e8:	54 49       	sbci	r21, 0x94	; 148
    86ea:	3f 36       	cpi	r19, 0x6F	; 111
    86ec:	2e 27       	eor	r18, r30
    86ee:	22 1e       	adc	r2, r18
    86f0:	1c 1b       	sub	r17, r28
    86f2:	1a 1b       	sub	r17, r26
    86f4:	1c 1e       	adc	r1, r28
    86f6:	20 22       	and	r2, r16
    86f8:	23 1f       	adc	r18, r19
    86fa:	15 0b       	sbc	r17, r21
    86fc:	07 08       	sbc	r0, r7
    86fe:	07 00       	.word	0x0007	; ????
    8700:	1f 31       	cpi	r17, 0x1F	; 31
    8702:	3d 44       	sbci	r19, 0x4D	; 77
    8704:	4e 53       	subi	r20, 0x3E	; 62
    8706:	54 56       	subi	r21, 0x64	; 100
    8708:	5a 5f       	subi	r21, 0xFA	; 250
    870a:	64 69       	ori	r22, 0x94	; 148
    870c:	6e 74       	andi	r22, 0x4E	; 78
    870e:	76 79       	andi	r23, 0x96	; 150
    8710:	7c 7f       	andi	r23, 0xFC	; 252
    8712:	7f 7f       	andi	r23, 0xFF	; 255
    8714:	7f 7f       	andi	r23, 0xFF	; 255
    8716:	7f 7f       	andi	r23, 0xFF	; 255
    8718:	7f 7f       	andi	r23, 0xFF	; 255
    871a:	7f 7f       	andi	r23, 0xFF	; 255
    871c:	7f 7f       	andi	r23, 0xFF	; 255
    871e:	7f 7f       	andi	r23, 0xFF	; 255
    8720:	7f 7f       	andi	r23, 0xFF	; 255
    8722:	7f 7f       	andi	r23, 0xFF	; 255
    8724:	7f 7f       	andi	r23, 0xFF	; 255
    8726:	7f 7f       	andi	r23, 0xFF	; 255
    8728:	7f 7f       	andi	r23, 0xFF	; 255
    872a:	7f 7f       	andi	r23, 0xFF	; 255
    872c:	7f 7f       	andi	r23, 0xFF	; 255
    872e:	7f 7f       	andi	r23, 0xFF	; 255
    8730:	7f 7f       	andi	r23, 0xFF	; 255
    8732:	7f 7f       	andi	r23, 0xFF	; 255
    8734:	7f 7f       	andi	r23, 0xFF	; 255
    8736:	7f 7f       	andi	r23, 0xFF	; 255
    8738:	7f 7f       	andi	r23, 0xFF	; 255
    873a:	7f 7f       	andi	r23, 0xFF	; 255
    873c:	7f 7f       	andi	r23, 0xFF	; 255
    873e:	7f 7f       	andi	r23, 0xFF	; 255
    8740:	7f 7f       	andi	r23, 0xFF	; 255
    8742:	7f 7f       	andi	r23, 0xFF	; 255
    8744:	7f 7f       	andi	r23, 0xFF	; 255
    8746:	7f 7f       	andi	r23, 0xFF	; 255
    8748:	7f 7f       	andi	r23, 0xFF	; 255
    874a:	7f 7f       	andi	r23, 0xFF	; 255
    874c:	7f 7f       	andi	r23, 0xFF	; 255
    874e:	7f 7f       	andi	r23, 0xFF	; 255
    8750:	7f 7f       	andi	r23, 0xFF	; 255
    8752:	7f 7f       	andi	r23, 0xFF	; 255
    8754:	7f 7f       	andi	r23, 0xFF	; 255
    8756:	7f 7f       	andi	r23, 0xFF	; 255
    8758:	7f 7f       	andi	r23, 0xFF	; 255
    875a:	7f 7f       	andi	r23, 0xFF	; 255
    875c:	7f 7f       	andi	r23, 0xFF	; 255
    875e:	7f 7f       	andi	r23, 0xFF	; 255
    8760:	7f 7f       	andi	r23, 0xFF	; 255
    8762:	7f 7f       	andi	r23, 0xFF	; 255
    8764:	7f 7f       	andi	r23, 0xFF	; 255
    8766:	7f 7f       	andi	r23, 0xFF	; 255
    8768:	7f 7f       	andi	r23, 0xFF	; 255
    876a:	7f 7f       	andi	r23, 0xFF	; 255
    876c:	7f 7f       	andi	r23, 0xFF	; 255
    876e:	7f 7f       	andi	r23, 0xFF	; 255
    8770:	7f 7f       	andi	r23, 0xFF	; 255
    8772:	7f 7f       	andi	r23, 0xFF	; 255
    8774:	7f 7f       	andi	r23, 0xFF	; 255
    8776:	7f 7f       	andi	r23, 0xFF	; 255
    8778:	7f 7f       	andi	r23, 0xFF	; 255
    877a:	7f 7c       	andi	r23, 0xCF	; 207
    877c:	78 71       	andi	r23, 0x18	; 24
    877e:	68 4c       	sbci	r22, 0xC8	; 200
    8780:	2c 1c       	adc	r2, r12
    8782:	12 0c       	add	r1, r2
    8784:	0a 0b       	sbc	r16, r26
    8786:	0a 05       	cpc	r16, r10
    8788:	fd f3       	brhs	.-2      	; 0x8788 <waves+0x988>
    878a:	e9 df       	rcall	.-46     	; 0x875e <waves+0x95e>
    878c:	d4 ca       	rjmp	.-2648   	; 0x7d36 <steptable+0x12e>
    878e:	c0 b7       	in	r28, 0x30	; 48
    8790:	ae a6       	std	Y+46, r10	; 0x2e
    8792:	9e 97       	sbiw	r26, 0x2e	; 46
    8794:	91 8b       	std	Z+17, r25	; 0x11
    8796:	86 85       	ldd	r24, Z+14	; 0x0e
    8798:	82 80       	ldd	r8, Z+2	; 0x02
    879a:	80 80       	ld	r8, Z
    879c:	80 80       	ld	r8, Z
    879e:	80 80       	ld	r8, Z
    87a0:	80 80       	ld	r8, Z
    87a2:	80 80       	ld	r8, Z
    87a4:	80 80       	ld	r8, Z
    87a6:	80 80       	ld	r8, Z
    87a8:	80 80       	ld	r8, Z
    87aa:	80 80       	ld	r8, Z
    87ac:	80 80       	ld	r8, Z
    87ae:	80 80       	ld	r8, Z
    87b0:	80 80       	ld	r8, Z
    87b2:	80 80       	ld	r8, Z
    87b4:	80 80       	ld	r8, Z
    87b6:	80 80       	ld	r8, Z
    87b8:	80 80       	ld	r8, Z
    87ba:	80 80       	ld	r8, Z
    87bc:	80 80       	ld	r8, Z
    87be:	80 80       	ld	r8, Z
    87c0:	80 80       	ld	r8, Z
    87c2:	80 80       	ld	r8, Z
    87c4:	80 80       	ld	r8, Z
    87c6:	80 80       	ld	r8, Z
    87c8:	80 80       	ld	r8, Z
    87ca:	80 80       	ld	r8, Z
    87cc:	80 80       	ld	r8, Z
    87ce:	80 80       	ld	r8, Z
    87d0:	80 80       	ld	r8, Z
    87d2:	80 80       	ld	r8, Z
    87d4:	80 80       	ld	r8, Z
    87d6:	80 80       	ld	r8, Z
    87d8:	80 80       	ld	r8, Z
    87da:	80 80       	ld	r8, Z
    87dc:	80 80       	ld	r8, Z
    87de:	80 80       	ld	r8, Z
    87e0:	80 80       	ld	r8, Z
    87e2:	80 80       	ld	r8, Z
    87e4:	80 80       	ld	r8, Z
    87e6:	80 80       	ld	r8, Z
    87e8:	80 80       	ld	r8, Z
    87ea:	80 80       	ld	r8, Z
    87ec:	80 80       	ld	r8, Z
    87ee:	80 80       	ld	r8, Z
    87f0:	80 80       	ld	r8, Z
    87f2:	80 80       	ld	r8, Z
    87f4:	80 87       	std	Z+8, r24	; 0x08
    87f6:	91 9d       	mul	r25, r1
    87f8:	ac c4       	rjmp	.+2392   	; 0x9152 <init_player_state+0x8a>
    87fa:	cb d4       	rcall	.+2454   	; 0x9192 <init_player_state+0xca>
    87fc:	dd f2       	brhs	.-74     	; 0x87b4 <waves+0x9b4>
    87fe:	fa fa       	.word	0xfafa	; ????

00008800 <RestoreBackground>:
	unsigned char free_tile_index, userRamTilesCount=0,userRamTilesCount_tmp=0;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=userRamTilesCount;i<free_tile_index;i++){
    8800:	80 91 db 0c 	lds	r24, 0x0CDB
    8804:	90 91 69 0d 	lds	r25, 0x0D69
    8808:	89 17       	cp	r24, r25
    880a:	78 f4       	brcc	.+30     	; 0x882a <RestoreBackground+0x2a>
			//vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
			*ram_tiles_restore[i].addr=ram_tiles_restore[i].tileIndex;
    880c:	e8 2f       	mov	r30, r24
    880e:	f0 e0       	ldi	r31, 0x00	; 0
    8810:	9f 01       	movw	r18, r30
    8812:	22 0f       	add	r18, r18
    8814:	33 1f       	adc	r19, r19
    8816:	e2 0f       	add	r30, r18
    8818:	f3 1f       	adc	r31, r19
    881a:	e6 5c       	subi	r30, 0xC6	; 198
    881c:	f3 4f       	sbci	r31, 0xF3	; 243
    881e:	a0 81       	ld	r26, Z
    8820:	b1 81       	ldd	r27, Z+1	; 0x01
    8822:	92 81       	ldd	r25, Z+2	; 0x02
    8824:	9c 93       	st	X, r25
	unsigned char free_tile_index, userRamTilesCount=0,userRamTilesCount_tmp=0;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=userRamTilesCount;i<free_tile_index;i++){
    8826:	8f 5f       	subi	r24, 0xFF	; 255
    8828:	ed cf       	rjmp	.-38     	; 0x8804 <RestoreBackground+0x4>
			//vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
			*ram_tiles_restore[i].addr=ram_tiles_restore[i].tileIndex;
		}	
	}
    882a:	08 95       	ret

0000882c <ProcessSprites>:
		}

	}
	*/

	void ProcessSprites(){
    882c:	2f 92       	push	r2
    882e:	3f 92       	push	r3
    8830:	4f 92       	push	r4
    8832:	5f 92       	push	r5
    8834:	6f 92       	push	r6
    8836:	7f 92       	push	r7
    8838:	8f 92       	push	r8
    883a:	9f 92       	push	r9
    883c:	af 92       	push	r10
    883e:	bf 92       	push	r11
    8840:	cf 92       	push	r12
    8842:	df 92       	push	r13
    8844:	ef 92       	push	r14
    8846:	ff 92       	push	r15
    8848:	0f 93       	push	r16
    884a:	1f 93       	push	r17
    884c:	cf 93       	push	r28
    884e:	df 93       	push	r29
    8850:	00 d0       	rcall	.+0      	; 0x8852 <ProcessSprites+0x26>
    8852:	00 d0       	rcall	.+0      	; 0x8854 <ProcessSprites+0x28>
    8854:	cd b7       	in	r28, 0x3d	; 61
    8856:	de b7       	in	r29, 0x3e	; 62
	
		unsigned char i,bx,by,dx,dy,bt,x,y,tx=1,ty=1,wx,wy;
		unsigned int ramPtr,ssx,ssy;

		if(!spritesOn) return;
    8858:	80 91 00 05 	lds	r24, 0x0500
    885c:	88 23       	and	r24, r24
    885e:	09 f4       	brne	.+2      	; 0x8862 <ProcessSprites+0x36>
    8860:	e0 c0       	rjmp	.+448    	; 0x8a22 <ProcessSprites+0x1f6>

		userRamTilesCount=userRamTilesCount_tmp;
    8862:	80 91 da 0c 	lds	r24, 0x0CDA
    8866:	80 93 db 0c 	sts	0x0CDB, r24
		free_tile_index=userRamTilesCount;
    886a:	80 93 69 0d 	sts	0x0D69, r24
    886e:	e2 e0       	ldi	r30, 0x02	; 2
    8870:	ce 2e       	mov	r12, r30
    8872:	e5 e0       	ldi	r30, 0x05	; 5
    8874:	de 2e       	mov	r13, r30
	
		for(i=0;i<MAX_SPRITES;i++){
    8876:	71 2c       	mov	r7, r1
			bx=sprites[i].x;
    8878:	f6 01       	movw	r30, r12
    887a:	20 81       	ld	r18, Z

			if(bx!=(SCREEN_TILES_H*TILE_WIDTH)){
    887c:	20 3e       	cpi	r18, 0xE0	; 224
    887e:	09 f4       	brne	.+2      	; 0x8882 <ProcessSprites+0x56>
    8880:	b1 c0       	rjmp	.+354    	; 0x89e4 <ProcessSprites+0x1b8>
				//get tile's screen section offsets
				
				#if SCROLLING == 1
					ssx=sprites[i].x+Screen.scrollX;
    8882:	80 91 9c 0c 	lds	r24, 0x0C9C
    8886:	90 e0       	ldi	r25, 0x00	; 0
    8888:	82 0f       	add	r24, r18
    888a:	91 1d       	adc	r25, r1
					ssy=sprites[i].y+Screen.scrollY;
    888c:	41 81       	ldd	r20, Z+1	; 0x01
    888e:	20 91 9d 0c 	lds	r18, 0x0C9D
    8892:	30 e0       	ldi	r19, 0x00	; 0
    8894:	24 0f       	add	r18, r20
    8896:	31 1d       	adc	r19, r1

				tx=1;
				ty=1;

				//get the BG tiles that are overlapped by the sprite
				bx=ssx>>3;
    8898:	ac 01       	movw	r20, r24
    889a:	73 e0       	ldi	r23, 0x03	; 3
    889c:	56 95       	lsr	r21
    889e:	47 95       	ror	r20
    88a0:	7a 95       	dec	r23
    88a2:	e1 f7       	brne	.-8      	; 0x889c <ProcessSprites+0x70>
    88a4:	64 2e       	mov	r6, r20
				dx=ssx&0x7;
    88a6:	87 70       	andi	r24, 0x07	; 7
				if(dx>0) tx++;
    88a8:	11 f0       	breq	.+4      	; 0x88ae <ProcessSprites+0x82>
    88aa:	92 e0       	ldi	r25, 0x02	; 2
    88ac:	01 c0       	rjmp	.+2      	; 0x88b0 <ProcessSprites+0x84>
   				#else
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
    88ae:	91 e0       	ldi	r25, 0x01	; 1
    88b0:	99 83       	std	Y+1, r25	; 0x01
				dx=ssx&0x7;
				if(dx>0) tx++;

				//by=ssy>>3;
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
    88b2:	a9 01       	movw	r20, r18
    88b4:	63 e0       	ldi	r22, 0x03	; 3
    88b6:	56 95       	lsr	r21
    88b8:	47 95       	ror	r20
    88ba:	6a 95       	dec	r22
    88bc:	e1 f7       	brne	.-8      	; 0x88b6 <ProcessSprites+0x8a>
    88be:	54 2e       	mov	r5, r20
				dy=ssy%TILE_HEIGHT;
    88c0:	27 70       	andi	r18, 0x07	; 7
				if(dy>0) ty++;			
    88c2:	19 f0       	breq	.+6      	; 0x88ca <ProcessSprites+0x9e>
    88c4:	52 e0       	ldi	r21, 0x02	; 2
    88c6:	35 2e       	mov	r3, r21
    88c8:	02 c0       	rjmp	.+4      	; 0x88ce <ProcessSprites+0xa2>
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
				ty=1;
    88ca:	33 24       	eor	r3, r3
    88cc:	33 94       	inc	r3
								bt=free_tile_index;
								free_tile_index++;
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    88ce:	30 e0       	ldi	r19, 0x00	; 0
    88d0:	32 2f       	mov	r19, r18
    88d2:	22 27       	eor	r18, r18
    88d4:	f9 01       	movw	r30, r18
    88d6:	e8 0f       	add	r30, r24
    88d8:	f1 1d       	adc	r31, r1
    88da:	fc 83       	std	Y+4, r31	; 0x04
    88dc:	eb 83       	std	Y+3, r30	; 0x03
    88de:	e1 2c       	mov	r14, r1
    88e0:	f1 2c       	mov	r15, r1
    88e2:	be 2c       	mov	r11, r14
    88e4:	aa 24       	eor	r10, r10
    88e6:	26 2c       	mov	r2, r6
    88e8:	45 2c       	mov	r4, r5
    88ea:	4e 0c       	add	r4, r14
								    wy-=(VRAM_TILES_V*2);
							    }else if(wy>=VRAM_TILES_V){
							    	wy-=VRAM_TILES_V;
							    }
                            #else
                                if(wy>=(Screen.scrollHeight*2)){
    88ec:	84 2c       	mov	r8, r4
    88ee:	91 2c       	mov	r9, r1
    88f0:	84 2d       	mov	r24, r4
    88f2:	20 91 9e 0c 	lds	r18, 0x0C9E
    88f6:	42 2f       	mov	r20, r18
    88f8:	50 e0       	ldi	r21, 0x00	; 0
    88fa:	44 0f       	add	r20, r20
    88fc:	55 1f       	adc	r21, r21
    88fe:	84 16       	cp	r8, r20
    8900:	95 06       	cpc	r9, r21
    8902:	14 f0       	brlt	.+4      	; 0x8908 <ProcessSprites+0xdc>
								    wy-=(Screen.scrollHeight*2);
    8904:	22 0f       	add	r18, r18
    8906:	03 c0       	rjmp	.+6      	; 0x890e <ProcessSprites+0xe2>
							    }else if(wy>=Screen.scrollHeight){
    8908:	42 16       	cp	r4, r18
    890a:	10 f0       	brcs	.+4      	; 0x8910 <ProcessSprites+0xe4>
							    	wy-=Screen.scrollHeight;
    890c:	84 2d       	mov	r24, r4
    890e:	82 1b       	sub	r24, r18
							    }
                            #endif
							if(wx>=VRAM_TILES_H)wx-=VRAM_TILES_H; //should always be 32
    8910:	ff e1       	ldi	r31, 0x1F	; 31
    8912:	f2 15       	cp	r31, r2
    8914:	18 f4       	brcc	.+6      	; 0x891c <ProcessSprites+0xf0>
    8916:	00 ee       	ldi	r16, 0xE0	; 224
    8918:	02 0d       	add	r16, r2
    891a:	01 c0       	rjmp	.+2      	; 0x891e <ProcessSprites+0xf2>
    891c:	02 2d       	mov	r16, r2

							#if SCROLLING == 0
								ramPtr=(wy*VRAM_TILES_H)+wx;
							#else

								ramPtr=((wy>>3)*256)+(wx*8)+(wy&7);	
    891e:	28 2f       	mov	r18, r24
    8920:	26 95       	lsr	r18
    8922:	26 95       	lsr	r18
    8924:	26 95       	lsr	r18
    8926:	10 e0       	ldi	r17, 0x00	; 0
    8928:	40 e2       	ldi	r20, 0x20	; 32
    892a:	24 9f       	mul	r18, r20
    892c:	00 0d       	add	r16, r0
    892e:	11 1d       	adc	r17, r1
    8930:	11 24       	eor	r1, r1
    8932:	23 e0       	ldi	r18, 0x03	; 3
    8934:	00 0f       	add	r16, r16
    8936:	11 1f       	adc	r17, r17
    8938:	2a 95       	dec	r18
    893a:	e1 f7       	brne	.-8      	; 0x8934 <ProcessSprites+0x108>
    893c:	87 70       	andi	r24, 0x07	; 7
    893e:	08 0f       	add	r16, r24
    8940:	11 1d       	adc	r17, r1

							#endif

							bt=vram[ramPtr];						
    8942:	00 50       	subi	r16, 0x00	; 0
    8944:	1f 4f       	sbci	r17, 0xFF	; 255
    8946:	f8 01       	movw	r30, r16
    8948:	70 81       	ld	r23, Z

							if( ((bt>=RAM_TILES_COUNT) | (bt<userRamTilesCount)) && (free_tile_index < RAM_TILES_COUNT) ){ //if no ram free ignore tile
    894a:	81 e0       	ldi	r24, 0x01	; 1
    894c:	7c 31       	cpi	r23, 0x1C	; 28
    894e:	08 f4       	brcc	.+2      	; 0x8952 <ProcessSprites+0x126>
    8950:	80 e0       	ldi	r24, 0x00	; 0
    8952:	21 e0       	ldi	r18, 0x01	; 1
    8954:	30 91 db 0c 	lds	r19, 0x0CDB
    8958:	73 17       	cp	r23, r19
    895a:	18 f0       	brcs	.+6      	; 0x8962 <ProcessSprites+0x136>
    895c:	20 e0       	ldi	r18, 0x00	; 0
    895e:	88 23       	and	r24, r24
    8960:	51 f1       	breq	.+84     	; 0x89b6 <ProcessSprites+0x18a>
    8962:	60 91 69 0d 	lds	r22, 0x0D69
    8966:	6c 31       	cpi	r22, 0x1C	; 28
    8968:	20 f5       	brcc	.+72     	; 0x89b2 <ProcessSprites+0x186>
								if( bt>=RAM_TILES_COUNT ){
    896a:	88 23       	and	r24, r24
    896c:	31 f0       	breq	.+12     	; 0x897a <ProcessSprites+0x14e>
									//tile is mapped to flash. Copy it to next free RAM tile.
									CopyFlashTile(bt-RAM_TILES_COUNT,free_tile_index);
    896e:	84 ee       	ldi	r24, 0xE4	; 228
    8970:	87 0f       	add	r24, r23
    8972:	7a 83       	std	Y+2, r23	; 0x02
    8974:	0e 94 19 34 	call	0x6832	; 0x6832 <CopyFlashTile>
    8978:	06 c0       	rjmp	.+12     	; 0x8986 <ProcessSprites+0x15a>
								}else if(bt<userRamTilesCount){
    897a:	22 23       	and	r18, r18
    897c:	29 f0       	breq	.+10     	; 0x8988 <ProcessSprites+0x15c>
									//tile is a user ram tile. Copy it to next free RAM tile.
									CopyRamTile(bt,free_tile_index);
    897e:	87 2f       	mov	r24, r23
    8980:	7a 83       	std	Y+2, r23	; 0x02
    8982:	0e 94 a8 34 	call	0x6950	; 0x6950 <CopyRamTile>
    8986:	7a 81       	ldd	r23, Y+2	; 0x02
								}
								ram_tiles_restore[free_tile_index].addr=(&vram[ramPtr]);
    8988:	80 91 69 0d 	lds	r24, 0x0D69
    898c:	e8 2f       	mov	r30, r24
    898e:	f0 e0       	ldi	r31, 0x00	; 0
    8990:	9f 01       	movw	r18, r30
    8992:	22 0f       	add	r18, r18
    8994:	33 1f       	adc	r19, r19
    8996:	e2 0f       	add	r30, r18
    8998:	f3 1f       	adc	r31, r19
    899a:	e6 5c       	subi	r30, 0xC6	; 198
    899c:	f3 4f       	sbci	r31, 0xF3	; 243
    899e:	11 83       	std	Z+1, r17	; 0x01
    89a0:	00 83       	st	Z, r16
								ram_tiles_restore[free_tile_index].tileIndex=bt;
    89a2:	72 83       	std	Z+2, r23	; 0x02
								vram[ramPtr]=free_tile_index;
    89a4:	f8 01       	movw	r30, r16
    89a6:	80 83       	st	Z, r24
								bt=free_tile_index;
								free_tile_index++;
    89a8:	21 e0       	ldi	r18, 0x01	; 1
    89aa:	28 0f       	add	r18, r24
    89ac:	20 93 69 0d 	sts	0x0D69, r18
									CopyRamTile(bt,free_tile_index);
								}
								ram_tiles_restore[free_tile_index].addr=(&vram[ramPtr]);
								ram_tiles_restore[free_tile_index].tileIndex=bt;
								vram[ramPtr]=free_tile_index;
								bt=free_tile_index;
    89b0:	78 2f       	mov	r23, r24
								free_tile_index++;
							}
				
							if(bt<RAM_TILES_COUNT){				
    89b2:	7c 31       	cpi	r23, 0x1C	; 28
    89b4:	38 f4       	brcc	.+14     	; 0x89c4 <ProcessSprites+0x198>
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    89b6:	2b 81       	ldd	r18, Y+3	; 0x03
    89b8:	3c 81       	ldd	r19, Y+4	; 0x04
    89ba:	a5 01       	movw	r20, r10
    89bc:	67 2f       	mov	r22, r23
    89be:	87 2d       	mov	r24, r7
    89c0:	0e 94 35 35 	call	0x6a6a	; 0x6a6a <BlitSprite>
    89c4:	ff ef       	ldi	r31, 0xFF	; 255
    89c6:	af 1a       	sub	r10, r31
    89c8:	bf 0a       	sbc	r11, r31
    89ca:	23 94       	inc	r2
    89cc:	82 2d       	mov	r24, r2
    89ce:	86 19       	sub	r24, r6
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){

					for(x=0;x<tx;x++){
    89d0:	99 81       	ldd	r25, Y+1	; 0x01
    89d2:	89 17       	cp	r24, r25
    89d4:	08 f4       	brcc	.+2      	; 0x89d8 <ProcessSprites+0x1ac>
    89d6:	8c cf       	rjmp	.-232    	; 0x88f0 <ProcessSprites+0xc4>
    89d8:	ef ef       	ldi	r30, 0xFF	; 255
    89da:	ee 1a       	sub	r14, r30
    89dc:	fe 0a       	sbc	r15, r30
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){
    89de:	e3 14       	cp	r14, r3
    89e0:	08 f4       	brcc	.+2      	; 0x89e4 <ProcessSprites+0x1b8>
    89e2:	7f cf       	rjmp	.-258    	; 0x88e2 <ProcessSprites+0xb6>
		if(!spritesOn) return;

		userRamTilesCount=userRamTilesCount_tmp;
		free_tile_index=userRamTilesCount;
	
		for(i=0;i<MAX_SPRITES;i++){
    89e4:	73 94       	inc	r7
    89e6:	f4 e0       	ldi	r31, 0x04	; 4
    89e8:	cf 0e       	add	r12, r31
    89ea:	d1 1c       	adc	r13, r1
    89ec:	4e e0       	ldi	r20, 0x0E	; 14
    89ee:	74 12       	cpse	r7, r20
    89f0:	43 cf       	rjmp	.-378    	; 0x8878 <ProcessSprites+0x4c>


		//restore BG tiles
		RestoreBackground();

	}
    89f2:	0f 90       	pop	r0
    89f4:	0f 90       	pop	r0
    89f6:	0f 90       	pop	r0
    89f8:	0f 90       	pop	r0
    89fa:	df 91       	pop	r29
    89fc:	cf 91       	pop	r28
    89fe:	1f 91       	pop	r17
    8a00:	0f 91       	pop	r16
    8a02:	ff 90       	pop	r15
    8a04:	ef 90       	pop	r14
    8a06:	df 90       	pop	r13
    8a08:	cf 90       	pop	r12
    8a0a:	bf 90       	pop	r11
    8a0c:	af 90       	pop	r10
    8a0e:	9f 90       	pop	r9
    8a10:	8f 90       	pop	r8
    8a12:	7f 90       	pop	r7
    8a14:	6f 90       	pop	r6
    8a16:	5f 90       	pop	r5
    8a18:	4f 90       	pop	r4
    8a1a:	3f 90       	pop	r3
    8a1c:	2f 90       	pop	r2
			}//	if(bx<(SCREEN_TILES_H*TILE_WIDTH))		
		}


		//restore BG tiles
		RestoreBackground();
    8a1e:	0c 94 00 44 	jmp	0x8800	; 0x8800 <RestoreBackground>

	}
    8a22:	0f 90       	pop	r0
    8a24:	0f 90       	pop	r0
    8a26:	0f 90       	pop	r0
    8a28:	0f 90       	pop	r0
    8a2a:	df 91       	pop	r29
    8a2c:	cf 91       	pop	r28
    8a2e:	1f 91       	pop	r17
    8a30:	0f 91       	pop	r16
    8a32:	ff 90       	pop	r15
    8a34:	ef 90       	pop	r14
    8a36:	df 90       	pop	r13
    8a38:	cf 90       	pop	r12
    8a3a:	bf 90       	pop	r11
    8a3c:	af 90       	pop	r10
    8a3e:	9f 90       	pop	r9
    8a40:	8f 90       	pop	r8
    8a42:	7f 90       	pop	r7
    8a44:	6f 90       	pop	r6
    8a46:	5f 90       	pop	r5
    8a48:	4f 90       	pop	r4
    8a4a:	3f 90       	pop	r3
    8a4c:	2f 90       	pop	r2
    8a4e:	08 95       	ret

00008a50 <Scroll>:

	#if SCROLLING == 1
		//Scroll the screen by the relative amount specified (+/-)
		//This function handles screen wrapping on the Y axis if VRAM_TILES_V is less than 32
		void Scroll(char dx,char dy){
		Screen.scrollY+=dy;
    8a50:	90 91 9d 0c 	lds	r25, 0x0C9D
    8a54:	96 0f       	add	r25, r22
    8a56:	90 93 9d 0c 	sts	0x0C9D, r25
		Screen.scrollX+=dx;
    8a5a:	20 91 9c 0c 	lds	r18, 0x0C9C
    8a5e:	82 0f       	add	r24, r18
    8a60:	80 93 9c 0c 	sts	0x0C9C, r24

		if(Screen.scrollHeight<32){
    8a64:	80 91 9e 0c 	lds	r24, 0x0C9E
    8a68:	80 32       	cpi	r24, 0x20	; 32
    8a6a:	b0 f4       	brcc	.+44     	; 0x8a98 <Scroll+0x48>

			if(Screen.scrollY>=(Screen.scrollHeight*TILE_HEIGHT)){
    8a6c:	29 2f       	mov	r18, r25
    8a6e:	30 e0       	ldi	r19, 0x00	; 0
    8a70:	78 e0       	ldi	r23, 0x08	; 8
    8a72:	87 9f       	mul	r24, r23
    8a74:	a0 01       	movw	r20, r0
    8a76:	11 24       	eor	r1, r1
    8a78:	24 17       	cp	r18, r20
    8a7a:	35 07       	cpc	r19, r21
    8a7c:	6c f0       	brlt	.+26     	; 0x8a98 <Scroll+0x48>
				if(dy>=0){	
    8a7e:	67 fd       	sbrc	r22, 7
    8a80:	05 c0       	rjmp	.+10     	; 0x8a8c <Scroll+0x3c>
					Screen.scrollY=(Screen.scrollY-(Screen.scrollHeight*TILE_HEIGHT));
    8a82:	28 ef       	ldi	r18, 0xF8	; 248
    8a84:	82 9f       	mul	r24, r18
    8a86:	90 0d       	add	r25, r0
    8a88:	11 24       	eor	r1, r1
    8a8a:	04 c0       	rjmp	.+8      	; 0x8a94 <Scroll+0x44>
				}else{
					Screen.scrollY=((Screen.scrollHeight*TILE_HEIGHT)-1)-(0xff-Screen.scrollY);
    8a8c:	78 e0       	ldi	r23, 0x08	; 8
    8a8e:	87 9f       	mul	r24, r23
    8a90:	90 0d       	add	r25, r0
    8a92:	11 24       	eor	r1, r1
    8a94:	90 93 9d 0c 	sts	0x0C9D, r25
    8a98:	08 95       	ret

00008a9a <InitializeVideoMode>:
		#endif	
	}


	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){
    8a9a:	e2 e0       	ldi	r30, 0x02	; 2
    8a9c:	f5 e0       	ldi	r31, 0x05	; 5

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
			sprites[i].x=(SCREEN_TILES_H*TILE_WIDTH);		
    8a9e:	80 ee       	ldi	r24, 0xE0	; 224
    8aa0:	80 83       	st	Z, r24
    8aa2:	34 96       	adiw	r30, 0x04	; 4

	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
    8aa4:	95 e0       	ldi	r25, 0x05	; 5
    8aa6:	ea 33       	cpi	r30, 0x3A	; 58
    8aa8:	f9 07       	cpc	r31, r25
    8aaa:	d1 f7       	brne	.-12     	; 0x8aa0 <InitializeVideoMode+0x6>
		
		#if SCROLLING == 1
		//	for(int i=0;i<(OVERLAY_LINES*VRAM_TILES_H);i++){
		//		overlay_vram[i]=RAM_TILES_COUNT;
		//	}
			Screen.scrollHeight=VRAM_TILES_V;
    8aac:	80 e2       	ldi	r24, 0x20	; 32
    8aae:	80 93 9e 0c 	sts	0x0C9E, r24
			Screen.overlayHeight=0;
    8ab2:	10 92 99 0c 	sts	0x0C99, r1
    8ab6:	08 95       	ret

00008ab8 <DrawMap>:



//Draws a map of tile at the specified position
#if VRAM_ADDR_SIZE == 1
	void DrawMap(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
    8ab8:	4f 92       	push	r4
    8aba:	5f 92       	push	r5
    8abc:	6f 92       	push	r6
    8abe:	7f 92       	push	r7
    8ac0:	8f 92       	push	r8
    8ac2:	9f 92       	push	r9
    8ac4:	af 92       	push	r10
    8ac6:	bf 92       	push	r11
    8ac8:	cf 92       	push	r12
    8aca:	df 92       	push	r13
    8acc:	ef 92       	push	r14
    8ace:	ff 92       	push	r15
    8ad0:	0f 93       	push	r16
    8ad2:	1f 93       	push	r17
    8ad4:	cf 93       	push	r28
    8ad6:	df 93       	push	r29
    8ad8:	68 2e       	mov	r6, r24
    8ada:	56 2e       	mov	r5, r22
    8adc:	7a 01       	movw	r14, r20
		//unsigned char i;
		u8 mapWidth=pgm_read_byte(&(map[0]));
    8ade:	fa 01       	movw	r30, r20
    8ae0:	74 90       	lpm	r7, Z
		u8 mapHeight=pgm_read_byte(&(map[1]));
    8ae2:	31 96       	adiw	r30, 0x01	; 1
    8ae4:	84 90       	lpm	r8, Z
    8ae6:	c7 2c       	mov	r12, r7
    8ae8:	d1 2c       	mov	r13, r1
		
		for(u8 dy=0;dy<mapHeight;dy++){
    8aea:	00 e0       	ldi	r16, 0x00	; 0
    8aec:	10 e0       	ldi	r17, 0x00	; 0
    8aee:	91 2c       	mov	r9, r1
    8af0:	98 14       	cp	r9, r8
    8af2:	f1 f0       	breq	.+60     	; 0x8b30 <DrawMap+0x78>
    8af4:	c0 e0       	ldi	r28, 0x00	; 0
    8af6:	d0 e0       	ldi	r29, 0x00	; 0
    8af8:	58 01       	movw	r10, r16
    8afa:	f2 e0       	ldi	r31, 0x02	; 2
    8afc:	af 0e       	add	r10, r31
    8afe:	b1 1c       	adc	r11, r1
    8b00:	49 2c       	mov	r4, r9
    8b02:	45 0c       	add	r4, r5
			for(u8 dx=0;dx<mapWidth;dx++){			
    8b04:	c7 15       	cp	r28, r7
    8b06:	80 f4       	brcc	.+32     	; 0x8b28 <DrawMap+0x70>
    8b08:	95 01       	movw	r18, r10
    8b0a:	2c 0f       	add	r18, r28
    8b0c:	3d 1f       	adc	r19, r29
    8b0e:	f7 01       	movw	r30, r14
    8b10:	e2 0f       	add	r30, r18
    8b12:	f3 1f       	adc	r31, r19
				SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
    8b14:	24 91       	lpm	r18, Z
    8b16:	42 2f       	mov	r20, r18
    8b18:	50 e0       	ldi	r21, 0x00	; 0
    8b1a:	64 2d       	mov	r22, r4
    8b1c:	8c 2f       	mov	r24, r28
    8b1e:	86 0d       	add	r24, r6
    8b20:	0e 94 68 37 	call	0x6ed0	; 0x6ed0 <SetTile>
    8b24:	21 96       	adiw	r28, 0x01	; 1
    8b26:	ee cf       	rjmp	.-36     	; 0x8b04 <DrawMap+0x4c>
	void DrawMap(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
		//unsigned char i;
		u8 mapWidth=pgm_read_byte(&(map[0]));
		u8 mapHeight=pgm_read_byte(&(map[1]));
		
		for(u8 dy=0;dy<mapHeight;dy++){
    8b28:	93 94       	inc	r9
    8b2a:	0c 0d       	add	r16, r12
    8b2c:	1d 1d       	adc	r17, r13
    8b2e:	e0 cf       	rjmp	.-64     	; 0x8af0 <DrawMap+0x38>
			for(u8 dx=0;dx<mapWidth;dx++){			
				SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
			}
		}

	}
    8b30:	df 91       	pop	r29
    8b32:	cf 91       	pop	r28
    8b34:	1f 91       	pop	r17
    8b36:	0f 91       	pop	r16
    8b38:	ff 90       	pop	r15
    8b3a:	ef 90       	pop	r14
    8b3c:	df 90       	pop	r13
    8b3e:	cf 90       	pop	r12
    8b40:	bf 90       	pop	r11
    8b42:	af 90       	pop	r10
    8b44:	9f 90       	pop	r9
    8b46:	8f 90       	pop	r8
    8b48:	7f 90       	pop	r7
    8b4a:	6f 90       	pop	r6
    8b4c:	5f 90       	pop	r5
    8b4e:	4f 90       	pop	r4
    8b50:	08 95       	ret

00008b52 <WaitVsync>:
		}
	}
}

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
    8b52:	0f 93       	push	r16
    8b54:	1f 93       	push	r17
    8b56:	cf 93       	push	r28
    8b58:	df 93       	push	r29
    8b5a:	8c 01       	movw	r16, r24
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    8b5c:	c0 e0       	ldi	r28, 0x00	; 0
    8b5e:	d0 e0       	ldi	r29, 0x00	; 0
    8b60:	c0 17       	cp	r28, r16
    8b62:	d1 07       	cpc	r29, r17
    8b64:	44 f4       	brge	.+16     	; 0x8b76 <WaitVsync+0x24>
		while(!GetVsyncFlag());
    8b66:	0e 94 7e 37 	call	0x6efc	; 0x6efc <GetVsyncFlag>
    8b6a:	88 23       	and	r24, r24
    8b6c:	e1 f3       	breq	.-8      	; 0x8b66 <WaitVsync+0x14>
		ClearVsyncFlag();		
    8b6e:	0e 94 82 37 	call	0x6f04	; 0x6f04 <ClearVsyncFlag>

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    8b72:	21 96       	adiw	r28, 0x01	; 1
    8b74:	f5 cf       	rjmp	.-22     	; 0x8b60 <WaitVsync+0xe>
		while(!GetVsyncFlag());
		ClearVsyncFlag();		
	}
}
    8b76:	df 91       	pop	r29
    8b78:	cf 91       	pop	r28
    8b7a:	1f 91       	pop	r17
    8b7c:	0f 91       	pop	r16
    8b7e:	08 95       	ret

00008b80 <DisplayLogo>:
	void DisplayLogo(){
	
		#if INTRO_LOGO !=0
			#define LOGO_X_POS 12
			
			InitMusicPlayer(logoInitPatches);
    8b80:	8f e0       	ldi	r24, 0x0F	; 15
    8b82:	99 e0       	ldi	r25, 0x09	; 9
    8b84:	0e 94 ca 39 	call	0x7394	; 0x7394 <InitMusicPlayer>
			SetTileTable(logo_tileset);
    8b88:	8f e0       	ldi	r24, 0x0F	; 15
    8b8a:	91 e0       	ldi	r25, 0x01	; 1
    8b8c:	0e 94 79 37 	call	0x6ef2	; 0x6ef2 <SetTileTable>
			
			//draw logo
			ClearVram();
    8b90:	0e 94 5e 37 	call	0x6ebc	; 0x6ebc <ClearVram>
			WaitVsync(15);		
    8b94:	8f e0       	ldi	r24, 0x0F	; 15
    8b96:	90 e0       	ldi	r25, 0x00	; 0
    8b98:	0e 94 a9 45 	call	0x8b52	; 0x8b52 <WaitVsync>


			#if INTRO_LOGO == 1 
				TriggerFx(0,0xff,true);
    8b9c:	41 e0       	ldi	r20, 0x01	; 1
    8b9e:	6f ef       	ldi	r22, 0xFF	; 255
    8ba0:	80 e0       	ldi	r24, 0x00	; 0
    8ba2:	0e 94 d7 3a 	call	0x75ae	; 0x75ae <TriggerFx>
			#endif

			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo);
    8ba6:	49 ef       	ldi	r20, 0xF9	; 249
    8ba8:	50 e0       	ldi	r21, 0x00	; 0
    8baa:	6c e0       	ldi	r22, 0x0C	; 12
    8bac:	8c e0       	ldi	r24, 0x0C	; 12
    8bae:	0e 94 5c 45 	call	0x8ab8	; 0x8ab8 <DrawMap>
			WaitVsync(3);
    8bb2:	83 e0       	ldi	r24, 0x03	; 3
    8bb4:	90 e0       	ldi	r25, 0x00	; 0
    8bb6:	0e 94 a9 45 	call	0x8b52	; 0x8b52 <WaitVsync>
			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo2);
    8bba:	48 ee       	ldi	r20, 0xE8	; 232
    8bbc:	50 e0       	ldi	r21, 0x00	; 0
    8bbe:	6c e0       	ldi	r22, 0x0C	; 12
    8bc0:	8c e0       	ldi	r24, 0x0C	; 12
    8bc2:	0e 94 5c 45 	call	0x8ab8	; 0x8ab8 <DrawMap>
			WaitVsync(2);
    8bc6:	82 e0       	ldi	r24, 0x02	; 2
    8bc8:	90 e0       	ldi	r25, 0x00	; 0
    8bca:	0e 94 a9 45 	call	0x8b52	; 0x8b52 <WaitVsync>
			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo);
    8bce:	49 ef       	ldi	r20, 0xF9	; 249
    8bd0:	50 e0       	ldi	r21, 0x00	; 0
    8bd2:	6c e0       	ldi	r22, 0x0C	; 12
    8bd4:	8c e0       	ldi	r24, 0x0C	; 12
    8bd6:	0e 94 5c 45 	call	0x8ab8	; 0x8ab8 <DrawMap>
			#if INTRO_LOGO == 2
				SetMasterVolume(0xc0);
				TriggerNote(3,0,16,0xff);
			#endif 
		
			WaitVsync(65);
    8bda:	81 e4       	ldi	r24, 0x41	; 65
    8bdc:	90 e0       	ldi	r25, 0x00	; 0
    8bde:	0e 94 a9 45 	call	0x8b52	; 0x8b52 <WaitVsync>
			ClearVram();
    8be2:	0e 94 5e 37 	call	0x6ebc	; 0x6ebc <ClearVram>
			WaitVsync(20);
    8be6:	84 e1       	ldi	r24, 0x14	; 20
    8be8:	90 e0       	ldi	r25, 0x00	; 0
    8bea:	0c 94 a9 45 	jmp	0x8b52	; 0x8b52 <WaitVsync>

00008bee <doFade>:
char fadeDir;
bool volatile fadeActive;


void doFade(unsigned char speed,bool blocking){
	fadeSpeed=speed;
    8bee:	80 93 67 0d 	sts	0x0D67, r24
	currFadeFrame=0;
    8bf2:	10 92 6b 0d 	sts	0x0D6B, r1
	fadeActive=true;
    8bf6:	81 e0       	ldi	r24, 0x01	; 1
    8bf8:	80 93 6a 0d 	sts	0x0D6A, r24
		
	if(blocking){
    8bfc:	66 23       	and	r22, r22
    8bfe:	21 f0       	breq	.+8      	; 0x8c08 <doFade+0x1a>
		while(fadeActive==true);
    8c00:	80 91 6a 0d 	lds	r24, 0x0D6A
    8c04:	81 11       	cpse	r24, r1
    8c06:	fc cf       	rjmp	.-8      	; 0x8c00 <doFade+0x12>
    8c08:	08 95       	ret

00008c0a <FadeIn>:
	
	
}

void FadeIn(unsigned char speed,bool blocking){
	if(speed==0){
    8c0a:	81 11       	cpse	r24, r1
    8c0c:	03 c0       	rjmp	.+6      	; 0x8c14 <FadeIn+0xa>
		DDRC=0xff;
    8c0e:	8f ef       	ldi	r24, 0xFF	; 255
    8c10:	87 b9       	out	0x07, r24	; 7
		return;
    8c12:	08 95       	ret
	}
	fadeStep=1;
    8c14:	91 e0       	ldi	r25, 0x01	; 1
    8c16:	90 93 6c 0d 	sts	0x0D6C, r25
	fadeDir=1;
    8c1a:	90 93 68 0d 	sts	0x0D68, r25
	doFade(speed,blocking);
    8c1e:	0c 94 f7 45 	jmp	0x8bee	; 0x8bee <doFade>

00008c22 <FadeOut>:
}

void FadeOut(unsigned char speed,bool blocking){
	if(speed==0){
    8c22:	81 11       	cpse	r24, r1
    8c24:	02 c0       	rjmp	.+4      	; 0x8c2a <FadeOut+0x8>
		DDRC=0;
    8c26:	17 b8       	out	0x07, r1	; 7
		return;
    8c28:	08 95       	ret
	}
	
	fadeStep=FADER_STEPS;
    8c2a:	9c e0       	ldi	r25, 0x0C	; 12
    8c2c:	90 93 6c 0d 	sts	0x0D6C, r25
	fadeDir=-1;
    8c30:	9f ef       	ldi	r25, 0xFF	; 255
    8c32:	90 93 68 0d 	sts	0x0D68, r25
	doFade(speed,blocking);
    8c36:	0c 94 f7 45 	jmp	0x8bee	; 0x8bee <doFade>

00008c3a <ProcessFading>:
}


//called by the kernel at each field end
void ProcessFading(){
	if(fadeActive==true){
    8c3a:	80 91 6a 0d 	lds	r24, 0x0D6A
    8c3e:	88 23       	and	r24, r24
    8c40:	01 f1       	breq	.+64     	; 0x8c82 <ProcessFading+0x48>
		if(currFadeFrame==0){
    8c42:	80 91 6b 0d 	lds	r24, 0x0D6B
    8c46:	81 11       	cpse	r24, r1
    8c48:	19 c0       	rjmp	.+50     	; 0x8c7c <ProcessFading+0x42>
			currFadeFrame=fadeSpeed;
    8c4a:	80 91 67 0d 	lds	r24, 0x0D67
    8c4e:	80 93 6b 0d 	sts	0x0D6B, r24
			DDRC = pgm_read_byte(&(fader[fadeStep-1]));
    8c52:	e0 91 6c 0d 	lds	r30, 0x0D6C
    8c56:	f0 e0       	ldi	r31, 0x00	; 0
    8c58:	e5 52       	subi	r30, 0x25	; 37
    8c5a:	ff 4f       	sbci	r31, 0xFF	; 255
    8c5c:	e4 91       	lpm	r30, Z
    8c5e:	e7 b9       	out	0x07, r30	; 7
			fadeStep+=fadeDir;
    8c60:	90 91 68 0d 	lds	r25, 0x0D68
    8c64:	80 91 6c 0d 	lds	r24, 0x0D6C
    8c68:	89 0f       	add	r24, r25
    8c6a:	80 93 6c 0d 	sts	0x0D6C, r24
			if(fadeStep==0 || fadeStep==(FADER_STEPS+1)){
    8c6e:	88 23       	and	r24, r24
    8c70:	11 f0       	breq	.+4      	; 0x8c76 <ProcessFading+0x3c>
    8c72:	8d 30       	cpi	r24, 0x0D	; 13
    8c74:	31 f4       	brne	.+12     	; 0x8c82 <ProcessFading+0x48>
				fadeActive=false;
    8c76:	10 92 6a 0d 	sts	0x0D6A, r1
    8c7a:	08 95       	ret
			}
		}else{
			currFadeFrame--;
    8c7c:	81 50       	subi	r24, 0x01	; 1
    8c7e:	80 93 6b 0d 	sts	0x0D6B, r24
    8c82:	08 95       	ret

00008c84 <VideoModeVsync>:
	}

	//Callback invoked during hsync
	void VideoModeVsync(){
		
		ProcessFading();
    8c84:	0e 94 1d 46 	call	0x8c3a	; 0x8c3a <ProcessFading>
		ProcessSprites();
    8c88:	0c 94 16 44 	jmp	0x882c	; 0x882c <ProcessSprites>

00008c8c <LBGetNextFrame>:
	u8 reversing;
	char** anims;
} Animation;

char* LBGetNextFrame(Animation* anim)
{
    8c8c:	fc 01       	movw	r30, r24
	anim->looped = 0;
    8c8e:	14 82       	std	Z+4, r1	; 0x04
	anim->frame_count += 1;
    8c90:	93 81       	ldd	r25, Z+3	; 0x03
    8c92:	9f 5f       	subi	r25, 0xFF	; 255
    8c94:	93 83       	std	Z+3, r25	; 0x03
	if (anim->frame_count < anim->frames_per_anim)
    8c96:	42 81       	ldd	r20, Z+2	; 0x02
    8c98:	80 81       	ld	r24, Z
    8c9a:	26 81       	ldd	r18, Z+6	; 0x06
    8c9c:	37 81       	ldd	r19, Z+7	; 0x07
    8c9e:	94 17       	cp	r25, r20
    8ca0:	30 f4       	brcc	.+12     	; 0x8cae <LBGetNextFrame+0x22>
	{
		return anim->anims[anim->current_anim];
    8ca2:	f9 01       	movw	r30, r18
    8ca4:	e8 0f       	add	r30, r24
    8ca6:	f1 1d       	adc	r31, r1
    8ca8:	e8 0f       	add	r30, r24
    8caa:	f1 1d       	adc	r31, r1
    8cac:	12 c0       	rjmp	.+36     	; 0x8cd2 <LBGetNextFrame+0x46>
	}
	anim->frame_count = 0;
    8cae:	13 82       	std	Z+3, r1	; 0x03
	anim->current_anim = (anim->current_anim + 1) % anim->anim_count;
    8cb0:	90 e0       	ldi	r25, 0x00	; 0
    8cb2:	01 96       	adiw	r24, 0x01	; 1
    8cb4:	61 81       	ldd	r22, Z+1	; 0x01
    8cb6:	70 e0       	ldi	r23, 0x00	; 0
    8cb8:	0e 94 b6 5b 	call	0xb76c	; 0xb76c <__divmodhi4>
    8cbc:	80 83       	st	Z, r24
	if (anim->current_anim == 0) anim->looped = 1;
    8cbe:	81 11       	cpse	r24, r1
    8cc0:	02 c0       	rjmp	.+4      	; 0x8cc6 <LBGetNextFrame+0x3a>
    8cc2:	41 e0       	ldi	r20, 0x01	; 1
    8cc4:	44 83       	std	Z+4, r20	; 0x04
    8cc6:	99 27       	eor	r25, r25
	return anim->anims[anim->current_anim];
    8cc8:	88 0f       	add	r24, r24
    8cca:	99 1f       	adc	r25, r25
    8ccc:	f9 01       	movw	r30, r18
    8cce:	e8 0f       	add	r30, r24
    8cd0:	f9 1f       	adc	r31, r25
    8cd2:	80 81       	ld	r24, Z
    8cd4:	91 81       	ldd	r25, Z+1	; 0x01
}
    8cd6:	08 95       	ret

00008cd8 <LBGetJoyPadState>:

void LBGetJoyPadState(JoyPadState* p, unsigned char index)
/*
 * Get the current joy pad button state for index controller
 */
{
    8cd8:	0f 93       	push	r16
    8cda:	1f 93       	push	r17
    8cdc:	cf 93       	push	r28
    8cde:	df 93       	push	r29
    8ce0:	1f 92       	push	r1
    8ce2:	cd b7       	in	r28, 0x3d	; 61
    8ce4:	de b7       	in	r29, 0x3e	; 62
    8ce6:	8c 01       	movw	r16, r24
	static unsigned int p_prev[2];

	p->held = ReadJoypad(index);
    8ce8:	86 2f       	mov	r24, r22
    8cea:	69 83       	std	Y+1, r22	; 0x01
    8cec:	0e 94 88 37 	call	0x6f10	; 0x6f10 <ReadJoypad>
    8cf0:	d8 01       	movw	r26, r16
    8cf2:	15 96       	adiw	r26, 0x05	; 5
    8cf4:	9c 93       	st	X, r25
    8cf6:	8e 93       	st	-X, r24
    8cf8:	14 97       	sbiw	r26, 0x04	; 4
    8cfa:	69 81       	ldd	r22, Y+1	; 0x01
    8cfc:	e6 2f       	mov	r30, r22
    8cfe:	f0 e0       	ldi	r31, 0x00	; 0

	// Count held cycles
	if (p->held == 0 || p->held != p_prev[index])
    8d00:	00 97       	sbiw	r24, 0x00	; 0
    8d02:	51 f0       	breq	.+20     	; 0x8d18 <LBGetJoyPadState+0x40>
    8d04:	df 01       	movw	r26, r30
    8d06:	aa 0f       	add	r26, r26
    8d08:	bb 1f       	adc	r27, r27
    8d0a:	a1 52       	subi	r26, 0x21	; 33
    8d0c:	b3 4f       	sbci	r27, 0xF3	; 243
    8d0e:	2d 91       	ld	r18, X+
    8d10:	3c 91       	ld	r19, X
    8d12:	82 17       	cp	r24, r18
    8d14:	93 07       	cpc	r25, r19
    8d16:	21 f0       	breq	.+8      	; 0x8d20 <LBGetJoyPadState+0x48>
	    p->held_cycles = 0;
    8d18:	d8 01       	movw	r26, r16
    8d1a:	16 96       	adiw	r26, 0x06	; 6
    8d1c:	1c 92       	st	X, r1
    8d1e:	07 c0       	rjmp	.+14     	; 0x8d2e <LBGetJoyPadState+0x56>
	else
	    p->held_cycles += 1;
    8d20:	d8 01       	movw	r26, r16
    8d22:	16 96       	adiw	r26, 0x06	; 6
    8d24:	2c 91       	ld	r18, X
    8d26:	16 97       	sbiw	r26, 0x06	; 6
    8d28:	2f 5f       	subi	r18, 0xFF	; 255
    8d2a:	16 96       	adiw	r26, 0x06	; 6
    8d2c:	2c 93       	st	X, r18

	p->pressed = p->held & (p->held ^ p_prev[index]);
    8d2e:	ee 0f       	add	r30, r30
    8d30:	ff 1f       	adc	r31, r31
    8d32:	e1 52       	subi	r30, 0x21	; 33
    8d34:	f3 4f       	sbci	r31, 0xF3	; 243
    8d36:	20 81       	ld	r18, Z
    8d38:	31 81       	ldd	r19, Z+1	; 0x01
    8d3a:	a9 01       	movw	r20, r18
    8d3c:	40 95       	com	r20
    8d3e:	50 95       	com	r21
    8d40:	48 23       	and	r20, r24
    8d42:	59 23       	and	r21, r25
    8d44:	d8 01       	movw	r26, r16
    8d46:	11 96       	adiw	r26, 0x01	; 1
    8d48:	5c 93       	st	X, r21
    8d4a:	4e 93       	st	-X, r20
	p->released = p_prev[index] & (p->held ^ p_prev[index]);
    8d4c:	ac 01       	movw	r20, r24
    8d4e:	40 95       	com	r20
    8d50:	50 95       	com	r21
    8d52:	24 23       	and	r18, r20
    8d54:	35 23       	and	r19, r21
    8d56:	13 96       	adiw	r26, 0x03	; 3
    8d58:	3c 93       	st	X, r19
    8d5a:	2e 93       	st	-X, r18
    8d5c:	12 97       	sbiw	r26, 0x02	; 2
	p_prev[index] = p->held;
    8d5e:	91 83       	std	Z+1, r25	; 0x01
    8d60:	80 83       	st	Z, r24
}
    8d62:	0f 90       	pop	r0
    8d64:	df 91       	pop	r29
    8d66:	cf 91       	pop	r28
    8d68:	1f 91       	pop	r17
    8d6a:	0f 91       	pop	r16
    8d6c:	08 95       	ret

00008d6e <LBPrintChar>:
	font_tiles_map = tiles_map;
}

void LBPrintChar(u8 x, u8 y, u8 code)
{
	if (code >= 48 && code <= 57)
    8d6e:	90 ed       	ldi	r25, 0xD0	; 208
    8d70:	94 0f       	add	r25, r20
    8d72:	e0 91 6d 0d 	lds	r30, 0x0D6D
    8d76:	f0 91 6e 0d 	lds	r31, 0x0D6E
    8d7a:	9a 30       	cpi	r25, 0x0A	; 10
    8d7c:	38 f4       	brcc	.+14     	; 0x8d8c <LBPrintChar+0x1e>
	{
		SetTile(x, y, pgm_read_byte(&font_tiles_map[3+code-48]));
    8d7e:	24 2f       	mov	r18, r20
    8d80:	30 e0       	ldi	r19, 0x00	; 0
    8d82:	2d 52       	subi	r18, 0x2D	; 45
    8d84:	31 09       	sbc	r19, r1
    8d86:	e2 0f       	add	r30, r18
    8d88:	f3 1f       	adc	r31, r19
    8d8a:	0c c0       	rjmp	.+24     	; 0x8da4 <LBPrintChar+0x36>
	}
	else if (code >= 65 && code <= 90)
    8d8c:	9f eb       	ldi	r25, 0xBF	; 191
    8d8e:	94 0f       	add	r25, r20
    8d90:	9a 31       	cpi	r25, 0x1A	; 26
    8d92:	38 f4       	brcc	.+14     	; 0x8da2 <LBPrintChar+0x34>
	{
		SetTile(x, y, pgm_read_byte(&font_tiles_map[13+code-65]));
    8d94:	50 e0       	ldi	r21, 0x00	; 0
    8d96:	44 53       	subi	r20, 0x34	; 52
    8d98:	51 09       	sbc	r21, r1
    8d9a:	e4 0f       	add	r30, r20
    8d9c:	f5 1f       	adc	r31, r21
    8d9e:	44 91       	lpm	r20, Z
    8da0:	03 c0       	rjmp	.+6      	; 0x8da8 <LBPrintChar+0x3a>
	}
	else
	{
		SetTile(x, y, pgm_read_byte(&font_tiles_map[2]));
    8da2:	32 96       	adiw	r30, 0x02	; 2
    8da4:	e4 91       	lpm	r30, Z
    8da6:	4e 2f       	mov	r20, r30
    8da8:	50 e0       	ldi	r21, 0x00	; 0
    8daa:	0c 94 68 37 	jmp	0x6ed0	; 0x6ed0 <SetTile>

00008dae <LBPrint>:
	}
}

void LBPrint(u8 x, u8 y, char* value)
{
    8dae:	ff 92       	push	r15
    8db0:	0f 93       	push	r16
    8db2:	1f 93       	push	r17
    8db4:	cf 93       	push	r28
    8db6:	df 93       	push	r29
    8db8:	d8 2f       	mov	r29, r24
    8dba:	f6 2e       	mov	r15, r22
    8dbc:	8a 01       	movw	r16, r20
	u8 i = 0;
    8dbe:	c0 e0       	ldi	r28, 0x00	; 0
    8dc0:	8c 2f       	mov	r24, r28
    8dc2:	8d 0f       	add	r24, r29
	u8 code = 0;
	while ((code = pgm_read_byte(&value[i])))
    8dc4:	f8 01       	movw	r30, r16
    8dc6:	ec 0f       	add	r30, r28
    8dc8:	f1 1d       	adc	r31, r1
    8dca:	44 91       	lpm	r20, Z
    8dcc:	44 23       	and	r20, r20
    8dce:	29 f0       	breq	.+10     	; 0x8dda <LBPrint+0x2c>
	{
		LBPrintChar(x++, y, code);
    8dd0:	6f 2d       	mov	r22, r15
    8dd2:	0e 94 b7 46 	call	0x8d6e	; 0x8d6e <LBPrintChar>
		i++;
    8dd6:	cf 5f       	subi	r28, 0xFF	; 255
    8dd8:	f3 cf       	rjmp	.-26     	; 0x8dc0 <LBPrint+0x12>
	}
}
    8dda:	df 91       	pop	r29
    8ddc:	cf 91       	pop	r28
    8dde:	1f 91       	pop	r17
    8de0:	0f 91       	pop	r16
    8de2:	ff 90       	pop	r15
    8de4:	08 95       	ret

00008de6 <LBPrintByte>:

void LBPrintByte(u8 x, u8 y, u8 value, char pad)
{
    8de6:	ff 92       	push	r15
    8de8:	0f 93       	push	r16
    8dea:	1f 93       	push	r17
    8dec:	cf 93       	push	r28
    8dee:	df 93       	push	r29
    8df0:	28 2f       	mov	r18, r24
    8df2:	06 2f       	mov	r16, r22
    8df4:	84 2f       	mov	r24, r20
    8df6:	dd ef       	ldi	r29, 0xFD	; 253
    8df8:	d2 0f       	add	r29, r18
	for (u8 i = 0; i < 3; i++)
	{
		LBPrintChar(x--, y, value % 10 + 48);
    8dfa:	9a e0       	ldi	r25, 0x0A	; 10
    8dfc:	f9 2e       	mov	r15, r25
    8dfe:	1f ef       	ldi	r17, 0xFF	; 255
    8e00:	12 0f       	add	r17, r18
    8e02:	6f 2d       	mov	r22, r15
    8e04:	0e 94 96 5b 	call	0xb72c	; 0xb72c <__udivmodqi4>
    8e08:	c8 2f       	mov	r28, r24
    8e0a:	40 e3       	ldi	r20, 0x30	; 48
    8e0c:	49 0f       	add	r20, r25
    8e0e:	60 2f       	mov	r22, r16
    8e10:	82 2f       	mov	r24, r18
    8e12:	0e 94 b7 46 	call	0x8d6e	; 0x8d6e <LBPrintChar>
		value /= 10;
    8e16:	8c 2f       	mov	r24, r28
    8e18:	21 2f       	mov	r18, r17
	}
}

void LBPrintByte(u8 x, u8 y, u8 value, char pad)
{
	for (u8 i = 0; i < 3; i++)
    8e1a:	1d 13       	cpse	r17, r29
    8e1c:	f0 cf       	rjmp	.-32     	; 0x8dfe <LBPrintByte+0x18>
	{
		LBPrintChar(x--, y, value % 10 + 48);
		value /= 10;
	}
}
    8e1e:	df 91       	pop	r29
    8e20:	cf 91       	pop	r28
    8e22:	1f 91       	pop	r17
    8e24:	0f 91       	pop	r16
    8e26:	ff 90       	pop	r15
    8e28:	08 95       	ret

00008e2a <LBPrintInt>:

void LBPrintInt(u8 x, u8 y, u16 value, char pad)
{
    8e2a:	cf 92       	push	r12
    8e2c:	df 92       	push	r13
    8e2e:	ef 92       	push	r14
    8e30:	ff 92       	push	r15
    8e32:	0f 93       	push	r16
    8e34:	1f 93       	push	r17
    8e36:	cf 93       	push	r28
    8e38:	df 93       	push	r29
    8e3a:	1f 92       	push	r1
    8e3c:	cd b7       	in	r28, 0x3d	; 61
    8e3e:	de b7       	in	r29, 0x3e	; 62
    8e40:	d8 2e       	mov	r13, r24
    8e42:	06 2f       	mov	r16, r22
    8e44:	ca 01       	movw	r24, r20
    8e46:	1b ef       	ldi	r17, 0xFB	; 251
    8e48:	1d 0d       	add	r17, r13
	for (u8 i = 0; i < 5; i++)
	{
		LBPrintChar(x, y, value % 10 + 48);
    8e4a:	2a e0       	ldi	r18, 0x0A	; 10
    8e4c:	e2 2e       	mov	r14, r18
    8e4e:	f1 2c       	mov	r15, r1
    8e50:	b7 01       	movw	r22, r14
    8e52:	0e 94 a2 5b 	call	0xb744	; 0xb744 <__udivmodhi4>
    8e56:	c6 2e       	mov	r12, r22
    8e58:	40 e3       	ldi	r20, 0x30	; 48
    8e5a:	48 0f       	add	r20, r24
    8e5c:	60 2f       	mov	r22, r16
    8e5e:	8d 2d       	mov	r24, r13
    8e60:	79 83       	std	Y+1, r23	; 0x01
    8e62:	0e 94 b7 46 	call	0x8d6e	; 0x8d6e <LBPrintChar>
		value /= 10;
    8e66:	8c 2d       	mov	r24, r12
    8e68:	79 81       	ldd	r23, Y+1	; 0x01
    8e6a:	97 2f       	mov	r25, r23
		x--;
    8e6c:	da 94       	dec	r13
	}
}

void LBPrintInt(u8 x, u8 y, u16 value, char pad)
{
	for (u8 i = 0; i < 5; i++)
    8e6e:	d1 12       	cpse	r13, r17
    8e70:	ef cf       	rjmp	.-34     	; 0x8e50 <LBPrintInt+0x26>
	{
		LBPrintChar(x, y, value % 10 + 48);
		value /= 10;
		x--;
	}
}
    8e72:	0f 90       	pop	r0
    8e74:	df 91       	pop	r29
    8e76:	cf 91       	pop	r28
    8e78:	1f 91       	pop	r17
    8e7a:	0f 91       	pop	r16
    8e7c:	ff 90       	pop	r15
    8e7e:	ef 90       	pop	r14
    8e80:	df 90       	pop	r13
    8e82:	cf 90       	pop	r12
    8e84:	08 95       	ret

00008e86 <LBCollides>:
	}
}

u8 LBCollides(u16 x1, u16 y1, u8 width1, u8 height1,
						 u16 x2, u16 y2, u8 width2, u8 height2)
{
    8e86:	af 92       	push	r10
    8e88:	cf 92       	push	r12
    8e8a:	ef 92       	push	r14
    8e8c:	ff 92       	push	r15
    8e8e:	0f 93       	push	r16
    8e90:	1f 93       	push	r17
    8e92:	fc 01       	movw	r30, r24
	if (y1 + height1 <= y2) return 0;
    8e94:	cb 01       	movw	r24, r22
    8e96:	82 0f       	add	r24, r18
    8e98:	91 1d       	adc	r25, r1
    8e9a:	e8 16       	cp	r14, r24
    8e9c:	f9 06       	cpc	r15, r25
    8e9e:	88 f4       	brcc	.+34     	; 0x8ec2 <LBCollides+0x3c>
	if (y1 >= y2 + height2) return 0;
    8ea0:	ea 0c       	add	r14, r10
    8ea2:	f1 1c       	adc	r15, r1
    8ea4:	6e 15       	cp	r22, r14
    8ea6:	7f 05       	cpc	r23, r15
    8ea8:	60 f4       	brcc	.+24     	; 0x8ec2 <LBCollides+0x3c>
	if (x1 + width1 <= x2) return 0;
    8eaa:	cf 01       	movw	r24, r30
    8eac:	84 0f       	add	r24, r20
    8eae:	91 1d       	adc	r25, r1
    8eb0:	08 17       	cp	r16, r24
    8eb2:	19 07       	cpc	r17, r25
    8eb4:	30 f4       	brcc	.+12     	; 0x8ec2 <LBCollides+0x3c>
	if (x1 >= x2 + width2) return 0;
    8eb6:	0c 0d       	add	r16, r12
    8eb8:	11 1d       	adc	r17, r1
    8eba:	81 e0       	ldi	r24, 0x01	; 1
    8ebc:	e0 17       	cp	r30, r16
    8ebe:	f1 07       	cpc	r31, r17
    8ec0:	08 f0       	brcs	.+2      	; 0x8ec4 <LBCollides+0x3e>
}

u8 LBCollides(u16 x1, u16 y1, u8 width1, u8 height1,
						 u16 x2, u16 y2, u8 width2, u8 height2)
{
	if (y1 + height1 <= y2) return 0;
    8ec2:	80 e0       	ldi	r24, 0x00	; 0
	if (y1 >= y2 + height2) return 0;
	if (x1 + width1 <= x2) return 0;
	if (x1 >= x2 + width2) return 0;
	return 1;
}
    8ec4:	1f 91       	pop	r17
    8ec6:	0f 91       	pop	r16
    8ec8:	ff 90       	pop	r15
    8eca:	ef 90       	pop	r14
    8ecc:	cf 90       	pop	r12
    8ece:	af 90       	pop	r10
    8ed0:	08 95       	ret

00008ed2 <LBWaitSeconds>:

	return from + ((delta + shifted) % delta);
}

void LBWaitSeconds(u8 seconds)
{
    8ed2:	cf 93       	push	r28
    8ed4:	df 93       	push	r29
    8ed6:	d8 2f       	mov	r29, r24
	for(u8 i = 0; i < seconds; i++)
    8ed8:	c0 e0       	ldi	r28, 0x00	; 0
    8eda:	cd 17       	cp	r28, r29
    8edc:	31 f0       	breq	.+12     	; 0x8eea <LBWaitSeconds+0x18>
	{
		WaitUs(65535);
    8ede:	8f ef       	ldi	r24, 0xFF	; 255
    8ee0:	9f ef       	ldi	r25, 0xFF	; 255
    8ee2:	0e 94 94 37 	call	0x6f28	; 0x6f28 <WaitUs>
	return from + ((delta + shifted) % delta);
}

void LBWaitSeconds(u8 seconds)
{
	for(u8 i = 0; i < seconds; i++)
    8ee6:	cf 5f       	subi	r28, 0xFF	; 255
    8ee8:	f8 cf       	rjmp	.-16     	; 0x8eda <LBWaitSeconds+0x8>
	{
		WaitUs(65535);
	}
}
    8eea:	df 91       	pop	r29
    8eec:	cf 91       	pop	r28
    8eee:	08 95       	ret

00008ef0 <LBMapSprite>:

void LBMapSprite(u8 startSprite,const char *map,u8 spriteFlags)
{
    8ef0:	df 92       	push	r13
    8ef2:	ef 92       	push	r14
    8ef4:	ff 92       	push	r15
    8ef6:	0f 93       	push	r16
    8ef8:	1f 93       	push	r17
    8efa:	cf 93       	push	r28
    8efc:	df 93       	push	r29
    8efe:	db 01       	movw	r26, r22
	unsigned char mapWidth=pgm_read_byte(&(map[0]));
    8f00:	fb 01       	movw	r30, r22
    8f02:	14 91       	lpm	r17, Z
	unsigned char mapHeight=pgm_read_byte(&(map[1]));
    8f04:	31 96       	adiw	r30, 0x01	; 1
    8f06:	64 91       	lpm	r22, Z
    8f08:	5f ef       	ldi	r21, 0xFF	; 255
    8f0a:	51 0f       	add	r21, r17
	s8 x,y,dx,dy,t; 

	if(spriteFlags & SPRITE_FLIP_X)
    8f0c:	24 2f       	mov	r18, r20
    8f0e:	21 70       	andi	r18, 0x01	; 1
    8f10:	40 ff       	sbrs	r20, 0
    8f12:	04 c0       	rjmp	.+8      	; 0x8f1c <LBMapSprite+0x2c>
	{
		x=(mapWidth-1);
    8f14:	95 2f       	mov	r25, r21
		dx=-1;
    8f16:	ff 24       	eor	r15, r15
    8f18:	fa 94       	dec	r15
    8f1a:	03 c0       	rjmp	.+6      	; 0x8f22 <LBMapSprite+0x32>
	}
	else
	{
		x=0;
		dx=1;
    8f1c:	ff 24       	eor	r15, r15
    8f1e:	f3 94       	inc	r15
		x=(mapWidth-1);
		dx=-1;
	}
	else
	{
		x=0;
    8f20:	90 e0       	ldi	r25, 0x00	; 0
		dx=1;
	}

	if(spriteFlags & SPRITE_FLIP_Y)
    8f22:	41 ff       	sbrs	r20, 1
    8f24:	05 c0       	rjmp	.+10     	; 0x8f30 <LBMapSprite+0x40>
	{
		y=(mapHeight-1);
    8f26:	7f ef       	ldi	r23, 0xFF	; 255
    8f28:	76 0f       	add	r23, r22
		dy=-1;
    8f2a:	ee 24       	eor	r14, r14
    8f2c:	ea 94       	dec	r14
    8f2e:	03 c0       	rjmp	.+6      	; 0x8f36 <LBMapSprite+0x46>
	}
	else
	{
		y=0;
		dy=1;
    8f30:	ee 24       	eor	r14, r14
    8f32:	e3 94       	inc	r14
		y=(mapHeight-1);
		dy=-1;
	}
	else
	{
		y=0;
    8f34:	70 e0       	ldi	r23, 0x00	; 0
    8f36:	21 11       	cpse	r18, r1
    8f38:	01 c0       	rjmp	.+2      	; 0x8f3c <LBMapSprite+0x4c>
    8f3a:	50 e0       	ldi	r21, 0x00	; 0
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
    8f3c:	00 e0       	ldi	r16, 0x00	; 0
    8f3e:	06 17       	cp	r16, r22
    8f40:	09 f1       	breq	.+66     	; 0x8f84 <LBMapSprite+0x94>
	{
		for(u8 cx=0;cx<mapWidth;cx++)
		{
			t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    8f42:	71 03       	mulsu	r23, r17
    8f44:	e0 01       	movw	r28, r0
    8f46:	11 24       	eor	r1, r1
    8f48:	d8 2e       	mov	r13, r24
    8f4a:	d1 0e       	add	r13, r17
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
	{
		for(u8 cx=0;cx<mapWidth;cx++)
    8f4c:	8d 15       	cp	r24, r13
    8f4e:	b1 f0       	breq	.+44     	; 0x8f7c <LBMapSprite+0x8c>
		{
			t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    8f50:	9e 01       	movw	r18, r28
    8f52:	29 0f       	add	r18, r25
    8f54:	31 1d       	adc	r19, r1
    8f56:	97 fd       	sbrc	r25, 7
    8f58:	3a 95       	dec	r19
    8f5a:	2e 5f       	subi	r18, 0xFE	; 254
    8f5c:	3f 4f       	sbci	r19, 0xFF	; 255
    8f5e:	fd 01       	movw	r30, r26
    8f60:	e2 0f       	add	r30, r18
    8f62:	f3 1f       	adc	r31, r19
    8f64:	24 91       	lpm	r18, Z
			extendedSprites[startSprite].tileIndex=t;
    8f66:	34 e0       	ldi	r19, 0x04	; 4
    8f68:	83 9f       	mul	r24, r19
    8f6a:	f0 01       	movw	r30, r0
    8f6c:	11 24       	eor	r1, r1
    8f6e:	e0 57       	subi	r30, 0x70	; 112
    8f70:	f0 4f       	sbci	r31, 0xF0	; 240
    8f72:	22 83       	std	Z+2, r18	; 0x02
			extendedSprites[startSprite++].flags=spriteFlags;
    8f74:	8f 5f       	subi	r24, 0xFF	; 255
    8f76:	43 83       	std	Z+3, r20	; 0x03
    8f78:	9f 0d       	add	r25, r15
    8f7a:	e8 cf       	rjmp	.-48     	; 0x8f4c <LBMapSprite+0x5c>
    8f7c:	7e 0d       	add	r23, r14
	{
		y=0;
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
    8f7e:	0f 5f       	subi	r16, 0xFF	; 255
			extendedSprites[startSprite].tileIndex=t;
			extendedSprites[startSprite++].flags=spriteFlags;
			x+=dx;
		}
		y+=dy;
		x=(spriteFlags & SPRITE_FLIP_X)?(mapWidth-1):0;
    8f80:	95 2f       	mov	r25, r21
    8f82:	dd cf       	rjmp	.-70     	; 0x8f3e <LBMapSprite+0x4e>
	}
}
    8f84:	df 91       	pop	r29
    8f86:	cf 91       	pop	r28
    8f88:	1f 91       	pop	r17
    8f8a:	0f 91       	pop	r16
    8f8c:	ff 90       	pop	r15
    8f8e:	ef 90       	pop	r14
    8f90:	df 90       	pop	r13
    8f92:	08 95       	ret

00008f94 <LBMoveSprite>:

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
    8f94:	df 92       	push	r13
    8f96:	ef 92       	push	r14
    8f98:	ff 92       	push	r15
    8f9a:	0f 93       	push	r16
    8f9c:	1f 93       	push	r17
    8f9e:	cf 93       	push	r28
    8fa0:	df 93       	push	r29
		{
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
    8fa2:	a0 91 9e 0c 	lds	r26, 0x0C9E
    8fa6:	98 e0       	ldi	r25, 0x08	; 8
    8fa8:	a9 9f       	mul	r26, r25
    8faa:	70 01       	movw	r14, r0
    8fac:	11 24       	eor	r1, r1
    8fae:	50 e0       	ldi	r21, 0x00	; 0
    8fb0:	38 ef       	ldi	r19, 0xF8	; 248
    8fb2:	a3 9f       	mul	r26, r19
    8fb4:	30 2d       	mov	r19, r0
    8fb6:	11 24       	eor	r1, r1
	}
}

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
	for(u8 dy=0;dy<height;dy++)
    8fb8:	70 e0       	ldi	r23, 0x00	; 0
    8fba:	70 17       	cp	r23, r16
    8fbc:	09 f1       	breq	.+66     	; 0x9000 <LBMoveSprite+0x6c>
    8fbe:	d4 2e       	mov	r13, r20
    8fc0:	13 2f       	mov	r17, r19
    8fc2:	14 0f       	add	r17, r20
    8fc4:	b8 2f       	mov	r27, r24
    8fc6:	b2 0f       	add	r27, r18
    8fc8:	96 2f       	mov	r25, r22
	{
		for(u8 dx=0;dx<width;dx++)
    8fca:	8b 17       	cp	r24, r27
    8fcc:	a9 f0       	breq	.+42     	; 0x8ff8 <LBMoveSprite+0x64>
		{
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
    8fce:	c4 e0       	ldi	r28, 0x04	; 4
    8fd0:	8c 9f       	mul	r24, r28
    8fd2:	f0 01       	movw	r30, r0
    8fd4:	11 24       	eor	r1, r1
    8fd6:	ef 01       	movw	r28, r30
    8fd8:	c0 57       	subi	r28, 0x70	; 112
    8fda:	d0 4f       	sbci	r29, 0xF0	; 240
    8fdc:	98 83       	st	Y, r25
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
    8fde:	a0 32       	cpi	r26, 0x20	; 32
    8fe0:	28 f4       	brcc	.+10     	; 0x8fec <LBMoveSprite+0x58>
    8fe2:	e4 16       	cp	r14, r20
    8fe4:	f5 06       	cpc	r15, r21
    8fe6:	14 f4       	brge	.+4      	; 0x8fec <LBMoveSprite+0x58>
				{
					u8 tmp=(y+(TILE_HEIGHT*dy))-(Screen.scrollHeight*TILE_HEIGHT);
					extendedSprites[startSprite].y=tmp;
    8fe8:	19 83       	std	Y+1, r17	; 0x01
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
				{
    8fea:	03 c0       	rjmp	.+6      	; 0x8ff2 <LBMoveSprite+0x5e>
					u8 tmp=(y+(TILE_HEIGHT*dy))-(Screen.scrollHeight*TILE_HEIGHT);
					extendedSprites[startSprite].y=tmp;
				}
				else
				{
					extendedSprites[startSprite].y=y+(TILE_HEIGHT*dy);
    8fec:	e0 57       	subi	r30, 0x70	; 112
    8fee:	f0 4f       	sbci	r31, 0xF0	; 240
    8ff0:	d1 82       	std	Z+1, r13	; 0x01
				{
					extendedSprites[startSprite].y=y+(TILE_HEIGHT*dy);
				}
			#endif

			startSprite++;
    8ff2:	8f 5f       	subi	r24, 0xFF	; 255
    8ff4:	98 5f       	subi	r25, 0xF8	; 248
    8ff6:	e9 cf       	rjmp	.-46     	; 0x8fca <LBMoveSprite+0x36>
	}
}

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
	for(u8 dy=0;dy<height;dy++)
    8ff8:	7f 5f       	subi	r23, 0xFF	; 255
    8ffa:	48 5f       	subi	r20, 0xF8	; 248
    8ffc:	5f 4f       	sbci	r21, 0xFF	; 255
    8ffe:	dd cf       	rjmp	.-70     	; 0x8fba <LBMoveSprite+0x26>
			#endif

			startSprite++;
		}
	}	
}
    9000:	df 91       	pop	r29
    9002:	cf 91       	pop	r28
    9004:	1f 91       	pop	r17
    9006:	0f 91       	pop	r16
    9008:	ff 90       	pop	r15
    900a:	ef 90       	pop	r14
    900c:	df 90       	pop	r13
    900e:	08 95       	ret

00009010 <LBRotateSprites>:

void LBRotateSprites()
{
    9010:	80 e0       	ldi	r24, 0x00	; 0
    9012:	90 e0       	ldi	r25, 0x00	; 0
    9014:	dc 01       	movw	r26, r24
    9016:	a0 57       	subi	r26, 0x70	; 112
    9018:	b0 4f       	sbci	r27, 0xF0	; 240
    901a:	fc 01       	movw	r30, r24
    901c:	ee 5f       	subi	r30, 0xFE	; 254
    901e:	fa 4f       	sbci	r31, 0xFA	; 250
	static u8 rotate_index = ROTATE_SPRITES_FROM;
	u8 mappedSpriteCount = MAX_EXTENDED_SPRITES;
	
	for (u8 i = 0; i < ROTATE_SPRITES_FROM; i++)
	{
		sprites[i].flags = extendedSprites[i].flags;
    9020:	13 96       	adiw	r26, 0x03	; 3
    9022:	2c 91       	ld	r18, X
    9024:	13 97       	sbiw	r26, 0x03	; 3
    9026:	23 83       	std	Z+3, r18	; 0x03
		sprites[i].tileIndex = extendedSprites[i].tileIndex;
    9028:	12 96       	adiw	r26, 0x02	; 2
    902a:	2c 91       	ld	r18, X
    902c:	12 97       	sbiw	r26, 0x02	; 2
    902e:	22 83       	std	Z+2, r18	; 0x02
		sprites[i].x = extendedSprites[i].x;
    9030:	2c 91       	ld	r18, X
    9032:	20 83       	st	Z, r18
		sprites[i].y = extendedSprites[i].y;
    9034:	11 96       	adiw	r26, 0x01	; 1
    9036:	2c 91       	ld	r18, X
    9038:	21 83       	std	Z+1, r18	; 0x01
    903a:	04 96       	adiw	r24, 0x04	; 4
void LBRotateSprites()
{
	static u8 rotate_index = ROTATE_SPRITES_FROM;
	u8 mappedSpriteCount = MAX_EXTENDED_SPRITES;
	
	for (u8 i = 0; i < ROTATE_SPRITES_FROM; i++)
    903c:	8c 32       	cpi	r24, 0x2C	; 44
    903e:	91 05       	cpc	r25, r1
    9040:	49 f7       	brne	.-46     	; 0x9014 <LBRotateSprites+0x4>
    9042:	80 91 01 05 	lds	r24, 0x0501
    9046:	20 e0       	ldi	r18, 0x00	; 0
    9048:	30 e0       	ldi	r19, 0x00	; 0
		sprites[i].y = extendedSprites[i].y;
	}
	
	for (u8 i = ROTATE_SPRITES_FROM; i < MAX_SPRITES; i++)
	{
		sprites[i].flags = extendedSprites[rotate_index].flags;
    904a:	94 e0       	ldi	r25, 0x04	; 4
    904c:	89 9f       	mul	r24, r25
    904e:	d0 01       	movw	r26, r0
    9050:	11 24       	eor	r1, r1
    9052:	a0 57       	subi	r26, 0x70	; 112
    9054:	b0 4f       	sbci	r27, 0xF0	; 240
    9056:	13 96       	adiw	r26, 0x03	; 3
    9058:	9c 91       	ld	r25, X
    905a:	13 97       	sbiw	r26, 0x03	; 3
    905c:	f9 01       	movw	r30, r18
    905e:	ee 5f       	subi	r30, 0xFE	; 254
    9060:	fa 4f       	sbci	r31, 0xFA	; 250
    9062:	97 a7       	std	Z+47, r25	; 0x2f
		sprites[i].tileIndex = extendedSprites[rotate_index].tileIndex;
    9064:	12 96       	adiw	r26, 0x02	; 2
    9066:	9c 91       	ld	r25, X
    9068:	12 97       	sbiw	r26, 0x02	; 2
    906a:	96 a7       	std	Z+46, r25	; 0x2e
		sprites[i].x = extendedSprites[rotate_index].x;
    906c:	9c 91       	ld	r25, X
    906e:	94 a7       	std	Z+44, r25	; 0x2c
		sprites[i].y = extendedSprites[rotate_index].y;
    9070:	11 96       	adiw	r26, 0x01	; 1
    9072:	9c 91       	ld	r25, X
    9074:	95 a7       	std	Z+45, r25	; 0x2d
		rotate_index += 1;
    9076:	8f 5f       	subi	r24, 0xFF	; 255
		if (rotate_index >= MAX_EXTENDED_SPRITES) rotate_index = ROTATE_SPRITES_FROM;
    9078:	84 31       	cpi	r24, 0x14	; 20
    907a:	08 f0       	brcs	.+2      	; 0x907e <LBRotateSprites+0x6e>
    907c:	8b e0       	ldi	r24, 0x0B	; 11
    907e:	2c 5f       	subi	r18, 0xFC	; 252
    9080:	3f 4f       	sbci	r19, 0xFF	; 255
		sprites[i].tileIndex = extendedSprites[i].tileIndex;
		sprites[i].x = extendedSprites[i].x;
		sprites[i].y = extendedSprites[i].y;
	}
	
	for (u8 i = ROTATE_SPRITES_FROM; i < MAX_SPRITES; i++)
    9082:	2c 30       	cpi	r18, 0x0C	; 12
    9084:	31 05       	cpc	r19, r1
    9086:	09 f7       	brne	.-62     	; 0x904a <LBRotateSprites+0x3a>
    9088:	80 93 01 05 	sts	0x0501, r24
    908c:	08 95       	ret

0000908e <init_game_state>:
char* enemy_shot_anim[1];
char* expl_anim[3];

void init_game_state()
{
	game.lives = LIVES;
    908e:	e1 e9       	ldi	r30, 0x91	; 145
    9090:	fd e0       	ldi	r31, 0x0D	; 13
    9092:	85 e0       	ldi	r24, 0x05	; 5
    9094:	86 87       	std	Z+14, r24	; 0x0e
	game.score = 0;
    9096:	11 86       	std	Z+9, r1	; 0x09
    9098:	10 86       	std	Z+8, r1	; 0x08
	game.time = 0;
    909a:	13 86       	std	Z+11, r1	; 0x0b
    909c:	12 86       	std	Z+10, r1	; 0x0a
    909e:	08 95       	ret

000090a0 <init_enemy_state>:
}

void init_enemy_state()
{
    90a0:	80 e0       	ldi	r24, 0x00	; 0
    90a2:	90 e0       	ldi	r25, 0x00	; 0
    90a4:	9c 01       	movw	r18, r24
    90a6:	2f 56       	subi	r18, 0x6F	; 111
    90a8:	32 4f       	sbci	r19, 0xF2	; 242
    90aa:	f9 01       	movw	r30, r18
    90ac:	eb 54       	subi	r30, 0x4B	; 75
    90ae:	ff 4f       	sbci	r31, 0xFF	; 255
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		game.enemies[i].active = 0;
    90b0:	10 82       	st	Z, r1
    90b2:	7a 96       	adiw	r30, 0x1a	; 26
		for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
		{
			game.enemies[i].shot[j].active = 0;
    90b4:	10 82       	st	Z, r1
    90b6:	8e 5b       	subi	r24, 0xBE	; 190
    90b8:	9f 4f       	sbci	r25, 0xFF	; 255
	game.time = 0;
}

void init_enemy_state()
{
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    90ba:	8a 34       	cpi	r24, 0x4A	; 74
    90bc:	21 e0       	ldi	r18, 0x01	; 1
    90be:	92 07       	cpc	r25, r18
    90c0:	89 f7       	brne	.-30     	; 0x90a4 <init_enemy_state+0x4>
		for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
		{
			game.enemies[i].shot[j].active = 0;
		}
	}
	game.active_enemies = 0;
    90c2:	10 92 a9 0d 	sts	0x0DA9, r1
    90c6:	08 95       	ret

000090c8 <init_player_state>:
}

void init_player_state()
{
	game.player.direction = D_RIGHT;
    90c8:	81 e0       	ldi	r24, 0x01	; 1
    90ca:	80 93 bd 0d 	sts	0x0DBD, r24
	game.player.flags = IDLE;
    90ce:	98 e0       	ldi	r25, 0x08	; 8
    90d0:	90 93 bb 0d 	sts	0x0DBB, r25
	game.player.width = 2;
    90d4:	92 e0       	ldi	r25, 0x02	; 2
    90d6:	90 93 be 0d 	sts	0x0DBE, r25
	game.player.height = 3;
    90da:	93 e0       	ldi	r25, 0x03	; 3
    90dc:	90 93 bf 0d 	sts	0x0DBF, r25
	game.player.shield = PLAYER_SHIELD;
    90e0:	2a e0       	ldi	r18, 0x0A	; 10
    90e2:	20 93 c0 0d 	sts	0x0DC0, r18
	game.player.idle.anim_count = 1;
    90e6:	80 93 10 0e 	sts	0x0E10, r24
	game.player.idle.frames_per_anim = 1;
    90ea:	80 93 11 0e 	sts	0x0E11, r24
	game.player.idle.anims = idle_anim;
    90ee:	22 ef       	ldi	r18, 0xF2	; 242
    90f0:	3f e0       	ldi	r19, 0x0F	; 15
    90f2:	30 93 16 0e 	sts	0x0E16, r19
    90f6:	20 93 15 0e 	sts	0x0E15, r18
	game.player.idle.anims[0] = (char*) map_hero_idle;
    90fa:	24 e4       	ldi	r18, 0x44	; 68
    90fc:	3c e2       	ldi	r19, 0x2C	; 44
    90fe:	30 93 f3 0f 	sts	0x0FF3, r19
    9102:	20 93 f2 0f 	sts	0x0FF2, r18
	
	game.player.jump.anim_count = 1;
    9106:	80 93 20 0e 	sts	0x0E20, r24
	game.player.jump.frames_per_anim = 1;
    910a:	80 93 21 0e 	sts	0x0E21, r24
	game.player.jump.anims = jump_anim;
    910e:	2f e6       	ldi	r18, 0x6F	; 111
    9110:	3d e0       	ldi	r19, 0x0D	; 13
    9112:	30 93 26 0e 	sts	0x0E26, r19
    9116:	20 93 25 0e 	sts	0x0E25, r18
	game.player.jump.anims[0] = (char*) map_hero_jump;
    911a:	2c e1       	ldi	r18, 0x1C	; 28
    911c:	3c e2       	ldi	r19, 0x2C	; 44
    911e:	30 93 70 0d 	sts	0x0D70, r19
    9122:	20 93 6f 0d 	sts	0x0D6F, r18
	
	game.player.prone.anim_count = 1;
    9126:	80 93 28 0e 	sts	0x0E28, r24
	game.player.prone.frames_per_anim = 1;
    912a:	80 93 29 0e 	sts	0x0E29, r24
	game.player.prone.anims = prone_anim;
    912e:	2a e8       	ldi	r18, 0x8A	; 138
    9130:	3f e0       	ldi	r19, 0x0F	; 15
    9132:	30 93 2e 0e 	sts	0x0E2E, r19
    9136:	20 93 2d 0e 	sts	0x0E2D, r18
	game.player.prone.anims[0] = (char*) map_hero_prone;
    913a:	27 e1       	ldi	r18, 0x17	; 23
    913c:	3c e2       	ldi	r19, 0x2C	; 44
    913e:	30 93 8b 0f 	sts	0x0F8B, r19
    9142:	20 93 8a 0f 	sts	0x0F8A, r18
	
	game.player.expl.anim_count = 3;
    9146:	90 93 30 0e 	sts	0x0E30, r25
	game.player.expl.frames_per_anim = EXPLOSION_FRAME_COUNT;
    914a:	85 e0       	ldi	r24, 0x05	; 5
    914c:	80 93 31 0e 	sts	0x0E31, r24
	game.player.expl.anims = expl_anim;
    9150:	8c ee       	ldi	r24, 0xEC	; 236
    9152:	9f e0       	ldi	r25, 0x0F	; 15
    9154:	90 93 36 0e 	sts	0x0E36, r25
    9158:	80 93 35 0e 	sts	0x0E35, r24
	game.player.expl.anims[0] = (char*) map_explosion_0;
    915c:	82 e5       	ldi	r24, 0x52	; 82
    915e:	9c e2       	ldi	r25, 0x2C	; 44
    9160:	90 93 ed 0f 	sts	0x0FED, r25
    9164:	80 93 ec 0f 	sts	0x0FEC, r24
	game.player.expl.anims[1] = (char*) map_explosion_1;
    9168:	8f e4       	ldi	r24, 0x4F	; 79
    916a:	9c e2       	ldi	r25, 0x2C	; 44
    916c:	90 93 ef 0f 	sts	0x0FEF, r25
    9170:	80 93 ee 0f 	sts	0x0FEE, r24
	game.player.expl.anims[2] = (char*) map_explosion_2;
    9174:	8c e4       	ldi	r24, 0x4C	; 76
    9176:	9c e2       	ldi	r25, 0x2C	; 44
    9178:	90 93 f1 0f 	sts	0x0FF1, r25
    917c:	80 93 f0 0f 	sts	0x0FF0, r24
	
	game.player.run.anim_count = 4;
    9180:	84 e0       	ldi	r24, 0x04	; 4
    9182:	80 93 18 0e 	sts	0x0E18, r24
	game.player.run.frames_per_anim = FRAMES_PER_RUN_CYCLE;
    9186:	8c e0       	ldi	r24, 0x0C	; 12
    9188:	80 93 19 0e 	sts	0x0E19, r24
	game.player.run.anims = run_anim;
    918c:	80 ee       	ldi	r24, 0xE0	; 224
    918e:	9f e0       	ldi	r25, 0x0F	; 15
    9190:	90 93 1e 0e 	sts	0x0E1E, r25
    9194:	80 93 1d 0e 	sts	0x0E1D, r24
	game.player.run.anims[0] = (char*) map_hero_step_0;
    9198:	8c e3       	ldi	r24, 0x3C	; 60
    919a:	9c e2       	ldi	r25, 0x2C	; 44
    919c:	90 93 e1 0f 	sts	0x0FE1, r25
    91a0:	80 93 e0 0f 	sts	0x0FE0, r24
	game.player.run.anims[1] = (char*) map_hero_step_1;
    91a4:	84 e3       	ldi	r24, 0x34	; 52
    91a6:	9c e2       	ldi	r25, 0x2C	; 44
    91a8:	90 93 e3 0f 	sts	0x0FE3, r25
    91ac:	80 93 e2 0f 	sts	0x0FE2, r24
	game.player.run.anims[2] = (char*) map_hero_step_2;
    91b0:	8c e2       	ldi	r24, 0x2C	; 44
    91b2:	9c e2       	ldi	r25, 0x2C	; 44
    91b4:	90 93 e5 0f 	sts	0x0FE5, r25
    91b8:	80 93 e4 0f 	sts	0x0FE4, r24
	game.player.run.anims[3] = (char*) map_hero_step_3;
    91bc:	84 e2       	ldi	r24, 0x24	; 36
    91be:	9c e2       	ldi	r25, 0x2C	; 44
    91c0:	90 93 e7 0f 	sts	0x0FE7, r25
    91c4:	80 93 e6 0f 	sts	0x0FE6, r24
    91c8:	e5 ed       	ldi	r30, 0xD5	; 213
    91ca:	fd e0       	ldi	r31, 0x0D	; 13
	
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
	{
		game.player.shot[i].hit_count = 1;
    91cc:	81 e0       	ldi	r24, 0x01	; 1
		game.player.shot[i].shot_type = BASIC_SHOT;
		game.player.shot[i].anim.anim_count = 1;
		game.player.shot[i].anim.frames_per_anim = 1;
		game.player.shot[i].anim.anims = shot_anim;
    91ce:	2a ee       	ldi	r18, 0xEA	; 234
    91d0:	3f e0       	ldi	r19, 0x0F	; 15
    91d2:	df 01       	movw	r26, r30
    91d4:	14 97       	sbiw	r26, 0x04	; 4
	game.player.run.anims[2] = (char*) map_hero_step_2;
	game.player.run.anims[3] = (char*) map_hero_step_3;
	
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
	{
		game.player.shot[i].hit_count = 1;
    91d6:	8c 93       	st	X, r24
    91d8:	11 97       	sbiw	r26, 0x01	; 1
		game.player.shot[i].shot_type = BASIC_SHOT;
    91da:	1c 92       	st	X, r1
    91dc:	14 96       	adiw	r26, 0x04	; 4
		game.player.shot[i].anim.anim_count = 1;
    91de:	8c 93       	st	X, r24
		game.player.shot[i].anim.frames_per_anim = 1;
    91e0:	80 83       	st	Z, r24
		game.player.shot[i].anim.anims = shot_anim;
    91e2:	35 83       	std	Z+5, r19	; 0x05
    91e4:	24 83       	std	Z+4, r18	; 0x04
    91e6:	7a 96       	adiw	r30, 0x1a	; 26
	game.player.run.anims[0] = (char*) map_hero_step_0;
	game.player.run.anims[1] = (char*) map_hero_step_1;
	game.player.run.anims[2] = (char*) map_hero_step_2;
	game.player.run.anims[3] = (char*) map_hero_step_3;
	
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
    91e8:	9e e0       	ldi	r25, 0x0E	; 14
    91ea:	e3 32       	cpi	r30, 0x23	; 35
    91ec:	f9 07       	cpc	r31, r25
    91ee:	89 f7       	brne	.-30     	; 0x91d2 <init_player_state+0x10a>
    91f0:	86 ef       	ldi	r24, 0xF6	; 246
    91f2:	9b e2       	ldi	r25, 0x2B	; 43
    91f4:	90 93 eb 0f 	sts	0x0FEB, r25
    91f8:	80 93 ea 0f 	sts	0x0FEA, r24
    91fc:	08 95       	ret

000091fe <init_enemy_spider>:
		game.player.shot[i].anim.anims[0] = (char*) map_hero_shot;
	}
}

void init_enemy_spider(u8 i, u16 x, u16 y)
{
    91fe:	af 92       	push	r10
    9200:	bf 92       	push	r11
    9202:	cf 92       	push	r12
    9204:	df 92       	push	r13
    9206:	ef 92       	push	r14
    9208:	ff 92       	push	r15
    920a:	1f 93       	push	r17
    920c:	cf 93       	push	r28
    920e:	df 93       	push	r29
    9210:	5a 01       	movw	r10, r20
	game.enemies[i].active = 1;
    9212:	22 e4       	ldi	r18, 0x42	; 66
    9214:	82 9f       	mul	r24, r18
    9216:	c0 01       	movw	r24, r0
    9218:	11 24       	eor	r1, r1
    921a:	ec 01       	movw	r28, r24
    921c:	cf 56       	subi	r28, 0x6F	; 111
    921e:	d2 4f       	sbci	r29, 0xF2	; 242
    9220:	fe 01       	movw	r30, r28
    9222:	eb 54       	subi	r30, 0x4B	; 75
    9224:	ff 4f       	sbci	r31, 0xFF	; 255
    9226:	11 e0       	ldi	r17, 0x01	; 1
    9228:	10 83       	st	Z, r17
	game.enemies[i].direction = D_LEFT;
    922a:	32 96       	adiw	r30, 0x02	; 2
    922c:	10 82       	st	Z, r1
	game.enemies[i].flags = IDLE;
    922e:	31 97       	sbiw	r30, 0x01	; 1
    9230:	88 e0       	ldi	r24, 0x08	; 8
    9232:	80 83       	st	Z, r24
	game.enemies[i].width = 1;
    9234:	32 96       	adiw	r30, 0x02	; 2
    9236:	10 83       	st	Z, r17
	game.enemies[i].height = 1;
    9238:	31 96       	adiw	r30, 0x01	; 1
    923a:	10 83       	st	Z, r17
	game.enemies[i].enemy_type = ENEMY_SPIDER;
    923c:	31 96       	adiw	r30, 0x01	; 1
    923e:	10 82       	st	Z, r1
	game.enemies[i].frame_count = 0;
    9240:	31 96       	adiw	r30, 0x01	; 1
    9242:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    9244:	31 96       	adiw	r30, 0x01	; 1
    9246:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_SPIDER_SHIELD;
    9248:	31 96       	adiw	r30, 0x01	; 1
    924a:	82 e0       	ldi	r24, 0x02	; 2
    924c:	80 83       	st	Z, r24
	
	game.enemies[i].anim.anim_count = 2;
    924e:	7c 96       	adiw	r30, 0x1c	; 28
    9250:	80 83       	st	Z, r24
	game.enemies[i].anim.frames_per_anim = SPIDER_FRAMES_PER_IDLE;
    9252:	31 96       	adiw	r30, 0x01	; 1
    9254:	8a e0       	ldi	r24, 0x0A	; 10
    9256:	80 83       	st	Z, r24
	game.enemies[i].anim.anims = spider_anim;
    9258:	de 01       	movw	r26, r28
    925a:	a2 52       	subi	r26, 0x22	; 34
    925c:	bf 4f       	sbci	r27, 0xFF	; 255
    925e:	ec e8       	ldi	r30, 0x8C	; 140
    9260:	ff e0       	ldi	r31, 0x0F	; 15
    9262:	ed 93       	st	X+, r30
    9264:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_spider_0;
    9266:	8d ee       	ldi	r24, 0xED	; 237
    9268:	9b e2       	ldi	r25, 0x2B	; 43
    926a:	91 83       	std	Z+1, r25	; 0x01
    926c:	80 83       	st	Z, r24
	game.enemies[i].anim.anims[1] = (char*) map_enemy_spider_1;
    926e:	8a ee       	ldi	r24, 0xEA	; 234
    9270:	9b e2       	ldi	r25, 0x2B	; 43
    9272:	93 83       	std	Z+3, r25	; 0x03
    9274:	82 83       	std	Z+2, r24	; 0x02
	game.enemies[i].shared.gravity = 0;
    9276:	fe 01       	movw	r30, r28
    9278:	ec 54       	subi	r30, 0x4C	; 76
    927a:	ff 4f       	sbci	r31, 0xFF	; 255
    927c:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = 0;
    927e:	32 97       	sbiw	r30, 0x02	; 2
    9280:	11 82       	std	Z+1, r1	; 0x01
    9282:	10 82       	st	Z, r1
	game.enemies[i].shared.vy = 0;
    9284:	3c 97       	sbiw	r30, 0x0c	; 12
    9286:	10 82       	st	Z, r1
    9288:	11 82       	std	Z+1, r1	; 0x01
    928a:	12 82       	std	Z+2, r1	; 0x02
    928c:	13 82       	std	Z+3, r1	; 0x03
	game.enemies[i].shared.x = x;
    928e:	80 e0       	ldi	r24, 0x00	; 0
    9290:	90 e0       	ldi	r25, 0x00	; 0
    9292:	0e 94 5f 5c 	call	0xb8be	; 0xb8be <__floatunsisf>
    9296:	6b 01       	movw	r12, r22
    9298:	7c 01       	movw	r14, r24
    929a:	fe 01       	movw	r30, r28
    929c:	e6 55       	subi	r30, 0x56	; 86
    929e:	ff 4f       	sbci	r31, 0xFF	; 255
    92a0:	60 83       	st	Z, r22
    92a2:	71 83       	std	Z+1, r23	; 0x01
    92a4:	82 83       	std	Z+2, r24	; 0x02
    92a6:	93 83       	std	Z+3, r25	; 0x03
	game.enemies[i].shared.y = y;
    92a8:	b5 01       	movw	r22, r10
    92aa:	80 e0       	ldi	r24, 0x00	; 0
    92ac:	90 e0       	ldi	r25, 0x00	; 0
    92ae:	0e 94 5f 5c 	call	0xb8be	; 0xb8be <__floatunsisf>
    92b2:	fe 01       	movw	r30, r28
    92b4:	e2 55       	subi	r30, 0x52	; 82
    92b6:	ff 4f       	sbci	r31, 0xFF	; 255
    92b8:	60 83       	st	Z, r22
    92ba:	71 83       	std	Z+1, r23	; 0x01
    92bc:	82 83       	std	Z+2, r24	; 0x02
    92be:	93 83       	std	Z+3, r25	; 0x03
	
	game.enemies[i].expl.anim_count = 3;
    92c0:	f3 96       	adiw	r30, 0x33	; 51
    92c2:	23 e0       	ldi	r18, 0x03	; 3
    92c4:	20 83       	st	Z, r18
	game.enemies[i].expl.frames_per_anim = EXPLOSION_FRAME_COUNT;
    92c6:	31 96       	adiw	r30, 0x01	; 1
    92c8:	25 e0       	ldi	r18, 0x05	; 5
    92ca:	20 83       	st	Z, r18
	game.enemies[i].expl.anims = expl_anim;
    92cc:	de 01       	movw	r26, r28
    92ce:	aa 51       	subi	r26, 0x1A	; 26
    92d0:	bf 4f       	sbci	r27, 0xFF	; 255
    92d2:	ec ee       	ldi	r30, 0xEC	; 236
    92d4:	ff e0       	ldi	r31, 0x0F	; 15
    92d6:	11 96       	adiw	r26, 0x01	; 1
    92d8:	fc 93       	st	X, r31
    92da:	ee 93       	st	-X, r30
	game.enemies[i].expl.anims[0] = (char*) map_explosion_0;
    92dc:	22 e5       	ldi	r18, 0x52	; 82
    92de:	3c e2       	ldi	r19, 0x2C	; 44
    92e0:	31 83       	std	Z+1, r19	; 0x01
    92e2:	20 83       	st	Z, r18
	game.enemies[i].expl.anims[1] = (char*) map_explosion_1;
    92e4:	2f e4       	ldi	r18, 0x4F	; 79
    92e6:	3c e2       	ldi	r19, 0x2C	; 44
    92e8:	33 83       	std	Z+3, r19	; 0x03
    92ea:	22 83       	std	Z+2, r18	; 0x02
	game.enemies[i].expl.anims[2] = (char*) map_explosion_2;
    92ec:	2c e4       	ldi	r18, 0x4C	; 76
    92ee:	3c e2       	ldi	r19, 0x2C	; 44
    92f0:	35 83       	std	Z+5, r19	; 0x05
    92f2:	24 83       	std	Z+4, r18	; 0x04
		
	for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
	{
		game.enemies[i].shot[j].hit_count = 1;
    92f4:	fe 01       	movw	r30, r28
    92f6:	e2 53       	subi	r30, 0x32	; 50
    92f8:	ff 4f       	sbci	r31, 0xFF	; 255
    92fa:	10 83       	st	Z, r17
		game.enemies[i].shot[j].active = 0;
    92fc:	31 96       	adiw	r30, 0x01	; 1
    92fe:	10 82       	st	Z, r1
		game.enemies[i].shot[j].shot_type = BASIC_ENEMY_SHOT;
    9300:	32 97       	sbiw	r30, 0x02	; 2
    9302:	10 83       	st	Z, r17
		game.enemies[i].shot[j].anim.anim_count = 1;
    9304:	34 96       	adiw	r30, 0x04	; 4
    9306:	10 83       	st	Z, r17
		game.enemies[i].shot[j].anim.frames_per_anim = 1;
    9308:	31 96       	adiw	r30, 0x01	; 1
    930a:	10 83       	st	Z, r17
		game.enemies[i].shot[j].anim.anims = enemy_shot_anim;
    930c:	50 97       	sbiw	r26, 0x10	; 16
    930e:	e8 ee       	ldi	r30, 0xE8	; 232
    9310:	ff e0       	ldi	r31, 0x0F	; 15
    9312:	ed 93       	st	X+, r30
    9314:	fc 93       	st	X, r31
		game.enemies[i].shot[j].anim.anims[0] = (char*) map_enemy_shot;
    9316:	23 ef       	ldi	r18, 0xF3	; 243
    9318:	3b e2       	ldi	r19, 0x2B	; 43
    931a:	31 83       	std	Z+1, r19	; 0x01
    931c:	20 83       	st	Z, r18
		game.enemies[i].shot[j].shared.vx = 0;
    931e:	fe 01       	movw	r30, r28
    9320:	e6 53       	subi	r30, 0x36	; 54
    9322:	ff 4f       	sbci	r31, 0xFF	; 255
    9324:	11 82       	std	Z+1, r1	; 0x01
    9326:	10 82       	st	Z, r1
		game.enemies[i].shot[j].shared.vy = 0;
    9328:	3c 97       	sbiw	r30, 0x0c	; 12
    932a:	10 82       	st	Z, r1
    932c:	11 82       	std	Z+1, r1	; 0x01
    932e:	12 82       	std	Z+2, r1	; 0x02
    9330:	13 82       	std	Z+3, r1	; 0x03
		game.enemies[i].shot[j].shared.x = x;
    9332:	34 96       	adiw	r30, 0x04	; 4
    9334:	c0 82       	st	Z, r12
    9336:	d1 82       	std	Z+1, r13	; 0x01
    9338:	e2 82       	std	Z+2, r14	; 0x02
    933a:	f3 82       	std	Z+3, r15	; 0x03
		game.enemies[i].shot[j].shared.y = y;
    933c:	ca 53       	subi	r28, 0x3A	; 58
    933e:	df 4f       	sbci	r29, 0xFF	; 255
    9340:	68 83       	st	Y, r22
    9342:	79 83       	std	Y+1, r23	; 0x01
    9344:	8a 83       	std	Y+2, r24	; 0x02
    9346:	9b 83       	std	Y+3, r25	; 0x03
	}
}
    9348:	df 91       	pop	r29
    934a:	cf 91       	pop	r28
    934c:	1f 91       	pop	r17
    934e:	ff 90       	pop	r15
    9350:	ef 90       	pop	r14
    9352:	df 90       	pop	r13
    9354:	cf 90       	pop	r12
    9356:	bf 90       	pop	r11
    9358:	af 90       	pop	r10
    935a:	08 95       	ret

0000935c <clear_overlay>:
{
	SetTile(x, y, level_tile);
}

void clear_overlay(u8 overlayHeight)
{
    935c:	1f 93       	push	r17
    935e:	cf 93       	push	r28
    9360:	df 93       	push	r29
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
    9362:	d0 e0       	ldi	r29, 0x00	; 0
    9364:	10 e2       	ldi	r17, 0x20	; 32
    9366:	18 0f       	add	r17, r24
{
	SetTile(x, y, level_tile);
}

void clear_overlay(u8 overlayHeight)
{
    9368:	c0 e2       	ldi	r28, 0x20	; 32
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
	{
		for(u8 y = 0; y < overlayHeight; y++)
    936a:	c1 17       	cp	r28, r17
    936c:	41 f0       	breq	.+16     	; 0x937e <clear_overlay+0x22>
		{
			SetTile(x, VRAM_TILES_V+y, 0);
    936e:	40 e0       	ldi	r20, 0x00	; 0
    9370:	50 e0       	ldi	r21, 0x00	; 0
    9372:	6c 2f       	mov	r22, r28
    9374:	8d 2f       	mov	r24, r29
    9376:	0e 94 68 37 	call	0x6ed0	; 0x6ed0 <SetTile>
    937a:	cf 5f       	subi	r28, 0xFF	; 255
    937c:	f6 cf       	rjmp	.-20     	; 0x936a <clear_overlay+0xe>
	SetTile(x, y, level_tile);
}

void clear_overlay(u8 overlayHeight)
{
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
    937e:	df 5f       	subi	r29, 0xFF	; 255
    9380:	dc 31       	cpi	r29, 0x1C	; 28
    9382:	91 f7       	brne	.-28     	; 0x9368 <clear_overlay+0xc>
		for(u8 y = 0; y < overlayHeight; y++)
		{
			SetTile(x, VRAM_TILES_V+y, 0);
		}
	}
}
    9384:	df 91       	pop	r29
    9386:	cf 91       	pop	r28
    9388:	1f 91       	pop	r17
    938a:	08 95       	ret

0000938c <read_level_byte>:
#else
u8 read_level_byte(char* level_data, u16 index)
{
	// C Code
	
	u16 counter = index / 128 * 16;
    938c:	fb 01       	movw	r30, r22
    938e:	ee 0f       	add	r30, r30
    9390:	ef 2f       	mov	r30, r31
    9392:	ee 1f       	adc	r30, r30
    9394:	ff 0b       	sbc	r31, r31
    9396:	f1 95       	neg	r31
    9398:	34 e0       	ldi	r19, 0x04	; 4
    939a:	ee 0f       	add	r30, r30
    939c:	ff 1f       	adc	r31, r31
    939e:	3a 95       	dec	r19
    93a0:	e1 f7       	brne	.-8      	; 0x939a <read_level_byte+0xe>
	u16 cumulative_rlength = counter * 8;
    93a2:	9f 01       	movw	r18, r30
    93a4:	43 e0       	ldi	r20, 0x03	; 3
    93a6:	22 0f       	add	r18, r18
    93a8:	33 1f       	adc	r19, r19
    93aa:	4a 95       	dec	r20
    93ac:	e1 f7       	brne	.-8      	; 0x93a6 <read_level_byte+0x1a>
		counter += 2;
	}
	return 0;*/
	
	// ASM Code
	index += 1;
    93ae:	6f 5f       	subi	r22, 0xFF	; 255
    93b0:	7f 4f       	sbci	r23, 0xFF	; 255
	counter += (u16) level_data;
    93b2:	8e 0f       	add	r24, r30
    93b4:	9f 1f       	adc	r25, r31
	  [cntr] "+z" (counter),
	  [crln] "+r" (cumulative_rlength),
	  [rln]  "+r" (rlength),
	  [vl]   "=&r" (value));
	return value;
}
    93b6:	fc 01       	movw	r30, r24
    93b8:	90 e0       	ldi	r25, 0x00	; 0

000093ba <while1>:
    93ba:	95 91       	lpm	r25, Z+
    93bc:	85 91       	lpm	r24, Z+
    93be:	29 0f       	add	r18, r25
    93c0:	31 1d       	adc	r19, r1
    93c2:	26 17       	cp	r18, r22
    93c4:	37 07       	cpc	r19, r23
    93c6:	08 f4       	brcc	.+2      	; 0x93ca <while1done>
    93c8:	f8 cf       	rjmp	.-16     	; 0x93ba <while1>

000093ca <while1done>:
    93ca:	08 95       	ret

000093cc <get_level_tile>:
{
	return 21;
}

u8 get_level_tile(char* level_data, u16 x, u16 y)
{
    93cc:	6e 5f       	subi	r22, 0xFE	; 254
    93ce:	7f 4f       	sbci	r23, 0xFF	; 255
	return read_level_byte(level_data, 2 + y*LEVEL_WIDTH+x);
    93d0:	ef ef       	ldi	r30, 0xFF	; 255
    93d2:	e4 9f       	mul	r30, r20
    93d4:	90 01       	movw	r18, r0
    93d6:	e5 9f       	mul	r30, r21
    93d8:	30 0d       	add	r19, r0
    93da:	11 24       	eor	r1, r1
    93dc:	62 0f       	add	r22, r18
    93de:	73 1f       	adc	r23, r19
    93e0:	0c 94 c6 49 	jmp	0x938c	; 0x938c <read_level_byte>

000093e4 <render_camera_view>:
}

void render_camera_view()
{
    93e4:	7f 92       	push	r7
    93e6:	8f 92       	push	r8
    93e8:	9f 92       	push	r9
    93ea:	af 92       	push	r10
    93ec:	bf 92       	push	r11
    93ee:	cf 92       	push	r12
    93f0:	df 92       	push	r13
    93f2:	ef 92       	push	r14
    93f4:	ff 92       	push	r15
    93f6:	0f 93       	push	r16
    93f8:	1f 93       	push	r17
    93fa:	cf 93       	push	r28
    93fc:	df 93       	push	r29
	u8 level_tile;
	u16 camara_x_tile = game.camera_x/8;
    93fe:	c0 91 95 0d 	lds	r28, 0x0D95
    9402:	d0 91 96 0d 	lds	r29, 0x0D96
    9406:	83 e0       	ldi	r24, 0x03	; 3
    9408:	d6 95       	lsr	r29
    940a:	c7 95       	ror	r28
    940c:	8a 95       	dec	r24
    940e:	e1 f7       	brne	.-8      	; 0x9408 <render_camera_view+0x24>
	u16 camera_y_tile = game.camera_y/8;
    9410:	c0 90 97 0d 	lds	r12, 0x0D97
    9414:	d0 90 98 0d 	lds	r13, 0x0D98
    9418:	93 e0       	ldi	r25, 0x03	; 3
    941a:	d6 94       	lsr	r13
    941c:	c7 94       	ror	r12
    941e:	9a 95       	dec	r25
    9420:	e1 f7       	brne	.-8      	; 0x941a <render_camera_view+0x36>
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    9422:	8e 01       	movw	r16, r28
    9424:	5e 01       	movw	r10, r28
    9426:	8c e1       	ldi	r24, 0x1C	; 28
    9428:	a8 0e       	add	r10, r24
    942a:	b1 1c       	adc	r11, r1
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    942c:	46 01       	movw	r8, r12
    942e:	8a e1       	ldi	r24, 0x1A	; 26
    9430:	88 0e       	add	r8, r24
    9432:	91 1c       	adc	r9, r1
{
	u8 level_tile;
	u16 camara_x_tile = game.camera_x/8;
	u16 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    9434:	a0 16       	cp	r10, r16
    9436:	b1 06       	cpc	r11, r17
    9438:	e0 f0       	brcs	.+56     	; 0x9472 <render_camera_view+0x8e>
    943a:	76 01       	movw	r14, r12
    943c:	70 2e       	mov	r7, r16
    943e:	7c 1a       	sub	r7, r28
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    9440:	8e 14       	cp	r8, r14
    9442:	9f 04       	cpc	r9, r15
    9444:	98 f0       	brcs	.+38     	; 0x946c <render_camera_view+0x88>
		{
			level_tile = get_level_tile(game.current_level, x, y);
    9446:	a7 01       	movw	r20, r14
    9448:	b8 01       	movw	r22, r16
    944a:	80 91 88 0f 	lds	r24, 0x0F88
    944e:	90 91 89 0f 	lds	r25, 0x0F89
    9452:	0e 94 e6 49 	call	0x93cc	; 0x93cc <get_level_tile>
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    9456:	48 2f       	mov	r20, r24
    9458:	50 e0       	ldi	r21, 0x00	; 0
    945a:	6e 2d       	mov	r22, r14
    945c:	6c 19       	sub	r22, r12
    945e:	87 2d       	mov	r24, r7
    9460:	0e 94 68 37 	call	0x6ed0	; 0x6ed0 <SetTile>
	u16 camara_x_tile = game.camera_x/8;
	u16 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    9464:	8f ef       	ldi	r24, 0xFF	; 255
    9466:	e8 1a       	sub	r14, r24
    9468:	f8 0a       	sbc	r15, r24
    946a:	ea cf       	rjmp	.-44     	; 0x9440 <render_camera_view+0x5c>
{
	u8 level_tile;
	u16 camara_x_tile = game.camera_x/8;
	u16 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    946c:	0f 5f       	subi	r16, 0xFF	; 255
    946e:	1f 4f       	sbci	r17, 0xFF	; 255
    9470:	e1 cf       	rjmp	.-62     	; 0x9434 <render_camera_view+0x50>
		{
			level_tile = get_level_tile(game.current_level, x, y);
			render_level_tile(level_tile, x - camara_x_tile, y - camera_y_tile);
		}
	}
}
    9472:	df 91       	pop	r29
    9474:	cf 91       	pop	r28
    9476:	1f 91       	pop	r17
    9478:	0f 91       	pop	r16
    947a:	ff 90       	pop	r15
    947c:	ef 90       	pop	r14
    947e:	df 90       	pop	r13
    9480:	cf 90       	pop	r12
    9482:	bf 90       	pop	r11
    9484:	af 90       	pop	r10
    9486:	9f 90       	pop	r9
    9488:	8f 90       	pop	r8
    948a:	7f 90       	pop	r7
    948c:	08 95       	ret

0000948e <spawn_enemy>:

void spawn_enemy(u16 x, u16 y)
{
    948e:	fc 01       	movw	r30, r24
    9490:	21 e9       	ldi	r18, 0x91	; 145
    9492:	3d e0       	ldi	r19, 0x0D	; 13
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    9494:	90 e0       	ldi	r25, 0x00	; 0
    9496:	d9 01       	movw	r26, r18
    9498:	ab 54       	subi	r26, 0x4B	; 75
    949a:	bf 4f       	sbci	r27, 0xFF	; 255
	{
		if (!game.enemies[i].active)
    949c:	8c 91       	ld	r24, X
    949e:	81 11       	cpse	r24, r1
    94a0:	0f c0       	rjmp	.+30     	; 0x94c0 <spawn_enemy+0x32>
    94a2:	5a 96       	adiw	r26, 0x1a	; 26
		{
			for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
			{
				if (!game.enemies[i].shot[j].active)
    94a4:	8c 91       	ld	r24, X
    94a6:	81 11       	cpse	r24, r1
    94a8:	0b c0       	rjmp	.+22     	; 0x94c0 <spawn_enemy+0x32>
    94aa:	ab 01       	movw	r20, r22
    94ac:	bf 01       	movw	r22, r30
				{
					init_enemy_spider(i, x, y);
    94ae:	89 2f       	mov	r24, r25
    94b0:	0e 94 ff 48 	call	0x91fe	; 0x91fe <init_enemy_spider>
					game.active_enemies++;
    94b4:	80 91 a9 0d 	lds	r24, 0x0DA9
    94b8:	8f 5f       	subi	r24, 0xFF	; 255
    94ba:	80 93 a9 0d 	sts	0x0DA9, r24
					return;
    94be:	08 95       	ret
	}
}

void spawn_enemy(u16 x, u16 y)
{
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    94c0:	9f 5f       	subi	r25, 0xFF	; 255
    94c2:	2e 5b       	subi	r18, 0xBE	; 190
    94c4:	3f 4f       	sbci	r19, 0xFF	; 255
    94c6:	95 30       	cpi	r25, 0x05	; 5
    94c8:	31 f7       	brne	.-52     	; 0x9496 <spawn_enemy+0x8>
    94ca:	08 95       	ret

000094cc <solid_tile>:
	}
}

char solid_tile(u8 level_tile)
{
	switch (level_tile)
    94cc:	81 50       	subi	r24, 0x01	; 1
    94ce:	84 30       	cpi	r24, 0x04	; 4
    94d0:	10 f0       	brcs	.+4      	; 0x94d6 <solid_tile+0xa>
		case L_ICE_MIDDLE : return 1;
		case L_ICE_LEFT : return 1;
		case L_ICE_RIGHT : return 1;
		case L_ICE_BOTTOM : return 1;
	}
	return 0;
    94d2:	80 e0       	ldi	r24, 0x00	; 0
    94d4:	08 95       	ret

char solid_tile(u8 level_tile)
{
	switch (level_tile)
	{
		case L_ICE_MIDDLE : return 1;
    94d6:	81 e0       	ldi	r24, 0x01	; 1
		case L_ICE_LEFT : return 1;
		case L_ICE_RIGHT : return 1;
		case L_ICE_BOTTOM : return 1;
	}
	return 0;
}
    94d8:	08 95       	ret

000094da <append_tile_column>:

void append_tile_column()
{
    94da:	ef 92       	push	r14
    94dc:	ff 92       	push	r15
    94de:	0f 93       	push	r16
    94e0:	1f 93       	push	r17
    94e2:	cf 93       	push	r28
    94e4:	df 93       	push	r29
	u8 enemy_spawned = 0;
	u8 level_tile;

	game.column_count++;
    94e6:	80 91 9d 0d 	lds	r24, 0x0D9D
    94ea:	90 91 9e 0d 	lds	r25, 0x0D9E
    94ee:	01 96       	adiw	r24, 0x01	; 1
    94f0:	90 93 9e 0d 	sts	0x0D9E, r25
    94f4:	80 93 9d 0d 	sts	0x0D9D, r24
    94f8:	c0 e0       	ldi	r28, 0x00	; 0
    94fa:	d0 e0       	ldi	r29, 0x00	; 0
	return 0;
}

void append_tile_column()
{
	u8 enemy_spawned = 0;
    94fc:	f1 2c       	mov	r15, r1

	game.column_count++;
    for (u8 y = 0; y <= CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
    94fe:	0e e1       	ldi	r16, 0x1E	; 30
    9500:	10 e0       	ldi	r17, 0x00	; 0
	u8 level_tile;

	game.column_count++;
    for (u8 y = 0; y <= CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
    9502:	40 91 97 0d 	lds	r20, 0x0D97
    9506:	50 91 98 0d 	lds	r21, 0x0D98
    950a:	63 e0       	ldi	r22, 0x03	; 3
    950c:	56 95       	lsr	r21
    950e:	47 95       	ror	r20
    9510:	6a 95       	dec	r22
    9512:	e1 f7       	brne	.-8      	; 0x950c <append_tile_column+0x32>
    9514:	4c 0f       	add	r20, r28
    9516:	5d 1f       	adc	r21, r29
    9518:	60 91 91 0d 	lds	r22, 0x0D91
    951c:	70 91 92 0d 	lds	r23, 0x0D92
    9520:	80 91 88 0f 	lds	r24, 0x0F88
    9524:	90 91 89 0f 	lds	r25, 0x0F89
    9528:	0e 94 e6 49 	call	0x93cc	; 0x93cc <get_level_tile>
    952c:	e8 2e       	mov	r14, r24
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    952e:	28 2f       	mov	r18, r24
    9530:	30 e0       	ldi	r19, 0x00	; 0

	game.column_count++;
    for (u8 y = 0; y <= CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
    9532:	90 91 9d 0c 	lds	r25, 0x0C9D
    9536:	96 95       	lsr	r25
    9538:	96 95       	lsr	r25
    953a:	96 95       	lsr	r25
    953c:	ae 01       	movw	r20, r28
    953e:	49 0f       	add	r20, r25
    9540:	51 1d       	adc	r21, r1
    9542:	ca 01       	movw	r24, r20
    9544:	b8 01       	movw	r22, r16
    9546:	0e 94 b6 5b 	call	0xb76c	; 0xb76c <__divmodhi4>
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    954a:	a9 01       	movw	r20, r18
    954c:	68 2f       	mov	r22, r24
    954e:	80 91 a7 0d 	lds	r24, 0x0DA7
    9552:	0e 94 68 37 	call	0x6ed0	; 0x6ed0 <SetTile>
	game.column_count++;
    for (u8 y = 0; y <= CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
		if (game.column_count % game.spawn_rate == game.spawn_rate - 1 && game.active_enemies < MAX_ENEMIES && !enemy_spawned && solid_tile(level_tile))
    9556:	20 91 aa 0d 	lds	r18, 0x0DAA
    955a:	30 e0       	ldi	r19, 0x00	; 0
    955c:	80 91 9d 0d 	lds	r24, 0x0D9D
    9560:	90 91 9e 0d 	lds	r25, 0x0D9E
    9564:	b9 01       	movw	r22, r18
    9566:	0e 94 a2 5b 	call	0xb744	; 0xb744 <__udivmodhi4>
    956a:	21 50       	subi	r18, 0x01	; 1
    956c:	31 09       	sbc	r19, r1
    956e:	82 17       	cp	r24, r18
    9570:	93 07       	cpc	r25, r19
    9572:	49 f5       	brne	.+82     	; 0x95c6 <append_tile_column+0xec>
    9574:	80 91 a9 0d 	lds	r24, 0x0DA9
    9578:	85 30       	cpi	r24, 0x05	; 5
    957a:	28 f5       	brcc	.+74     	; 0x95c6 <append_tile_column+0xec>
    957c:	f1 10       	cpse	r15, r1
    957e:	21 c0       	rjmp	.+66     	; 0x95c2 <append_tile_column+0xe8>
    9580:	8e 2d       	mov	r24, r14
    9582:	0e 94 66 4a 	call	0x94cc	; 0x94cc <solid_tile>
    9586:	88 23       	and	r24, r24
    9588:	f1 f0       	breq	.+60     	; 0x95c6 <append_tile_column+0xec>
		{
			spawn_enemy(game.camera_x+(CAMERA_WIDTH+1)*8, (game.camera_y / 8 + y - 1)*8);
    958a:	60 91 97 0d 	lds	r22, 0x0D97
    958e:	70 91 98 0d 	lds	r23, 0x0D98
    9592:	cb 01       	movw	r24, r22
    9594:	23 e0       	ldi	r18, 0x03	; 3
    9596:	96 95       	lsr	r25
    9598:	87 95       	ror	r24
    959a:	2a 95       	dec	r18
    959c:	e1 f7       	brne	.-8      	; 0x9596 <append_tile_column+0xbc>
    959e:	bc 01       	movw	r22, r24
    95a0:	61 50       	subi	r22, 0x01	; 1
    95a2:	70 4e       	sbci	r23, 0xE0	; 224
    95a4:	6c 0f       	add	r22, r28
    95a6:	7d 1f       	adc	r23, r29
    95a8:	33 e0       	ldi	r19, 0x03	; 3
    95aa:	66 0f       	add	r22, r22
    95ac:	77 1f       	adc	r23, r23
    95ae:	3a 95       	dec	r19
    95b0:	e1 f7       	brne	.-8      	; 0x95aa <append_tile_column+0xd0>
    95b2:	80 91 95 0d 	lds	r24, 0x0D95
    95b6:	90 91 96 0d 	lds	r25, 0x0D96
    95ba:	88 51       	subi	r24, 0x18	; 24
    95bc:	9f 4f       	sbci	r25, 0xFF	; 255
    95be:	0e 94 47 4a 	call	0x948e	; 0x948e <spawn_enemy>
    95c2:	ff 24       	eor	r15, r15
    95c4:	f3 94       	inc	r15
    95c6:	21 96       	adiw	r28, 0x01	; 1
{
	u8 enemy_spawned = 0;
	u8 level_tile;

	game.column_count++;
    for (u8 y = 0; y <= CAMERA_HEIGHT; y++)
    95c8:	cb 31       	cpi	r28, 0x1B	; 27
    95ca:	d1 05       	cpc	r29, r1
    95cc:	09 f0       	breq	.+2      	; 0x95d0 <append_tile_column+0xf6>
    95ce:	99 cf       	rjmp	.-206    	; 0x9502 <append_tile_column+0x28>
			spawn_enemy(game.camera_x+(CAMERA_WIDTH+1)*8, (game.camera_y / 8 + y - 1)*8);
			enemy_spawned = 1;
		}
    }
	
    game.scroll_src_x++;
    95d0:	80 91 91 0d 	lds	r24, 0x0D91
    95d4:	90 91 92 0d 	lds	r25, 0x0D92
    95d8:	01 96       	adiw	r24, 0x01	; 1
    95da:	90 93 92 0d 	sts	0x0D92, r25
    95de:	80 93 91 0d 	sts	0x0D91, r24
	game.scroll_dest_x++;
    95e2:	80 91 a7 0d 	lds	r24, 0x0DA7
    95e6:	8f 5f       	subi	r24, 0xFF	; 255
    if(game.scroll_dest_x>=32)game.scroll_dest_x=0;
    95e8:	80 32       	cpi	r24, 0x20	; 32
    95ea:	18 f4       	brcc	.+6      	; 0x95f2 <append_tile_column+0x118>
			enemy_spawned = 1;
		}
    }
	
    game.scroll_src_x++;
	game.scroll_dest_x++;
    95ec:	80 93 a7 0d 	sts	0x0DA7, r24
    95f0:	02 c0       	rjmp	.+4      	; 0x95f6 <append_tile_column+0x11c>
    if(game.scroll_dest_x>=32)game.scroll_dest_x=0;
    95f2:	10 92 a7 0d 	sts	0x0DA7, r1
}
    95f6:	df 91       	pop	r29
    95f8:	cf 91       	pop	r28
    95fa:	1f 91       	pop	r17
    95fc:	0f 91       	pop	r16
    95fe:	ff 90       	pop	r15
    9600:	ef 90       	pop	r14
    9602:	08 95       	ret

00009604 <append_tile_row>:

void append_tile_row()
{
    9604:	cf 93       	push	r28
    9606:	df 93       	push	r29
    9608:	c0 e0       	ldi	r28, 0x00	; 0
    960a:	d0 e0       	ldi	r29, 0x00	; 0
	u8 level_tile;

    for (u8 x = 0; x <= CAMERA_WIDTH; x++)
	{
		level_tile = get_level_tile(game.current_level, x + game.camera_x / 8, game.scroll_src_y);
    960c:	40 91 93 0d 	lds	r20, 0x0D93
    9610:	50 91 94 0d 	lds	r21, 0x0D94
    9614:	60 91 95 0d 	lds	r22, 0x0D95
    9618:	70 91 96 0d 	lds	r23, 0x0D96
    961c:	83 e0       	ldi	r24, 0x03	; 3
    961e:	76 95       	lsr	r23
    9620:	67 95       	ror	r22
    9622:	8a 95       	dec	r24
    9624:	e1 f7       	brne	.-8      	; 0x961e <append_tile_row+0x1a>
    9626:	6c 0f       	add	r22, r28
    9628:	7d 1f       	adc	r23, r29
    962a:	80 91 88 0f 	lds	r24, 0x0F88
    962e:	90 91 89 0f 	lds	r25, 0x0F89
    9632:	0e 94 e6 49 	call	0x93cc	; 0x93cc <get_level_tile>
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    9636:	48 2f       	mov	r20, r24
    9638:	50 e0       	ldi	r21, 0x00	; 0
	u8 level_tile;

    for (u8 x = 0; x <= CAMERA_WIDTH; x++)
	{
		level_tile = get_level_tile(game.current_level, x + game.camera_x / 8, game.scroll_src_y);
		render_level_tile(level_tile, (x + Screen.scrollX / 8) % 32, game.scroll_dest_y);
    963a:	80 91 9c 0c 	lds	r24, 0x0C9C
    963e:	86 95       	lsr	r24
    9640:	86 95       	lsr	r24
    9642:	86 95       	lsr	r24
    9644:	8c 0f       	add	r24, r28
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    9646:	60 91 a8 0d 	lds	r22, 0x0DA8
    964a:	8f 71       	andi	r24, 0x1F	; 31
    964c:	0e 94 68 37 	call	0x6ed0	; 0x6ed0 <SetTile>
    9650:	21 96       	adiw	r28, 0x01	; 1

void append_tile_row()
{
	u8 level_tile;

    for (u8 x = 0; x <= CAMERA_WIDTH; x++)
    9652:	cd 31       	cpi	r28, 0x1D	; 29
    9654:	d1 05       	cpc	r29, r1
    9656:	d1 f6       	brne	.-76     	; 0x960c <append_tile_row+0x8>
	{
		level_tile = get_level_tile(game.current_level, x + game.camera_x / 8, game.scroll_src_y);
		render_level_tile(level_tile, (x + Screen.scrollX / 8) % 32, game.scroll_dest_y);
    }
	
    game.scroll_src_y++;
    9658:	80 91 93 0d 	lds	r24, 0x0D93
    965c:	90 91 94 0d 	lds	r25, 0x0D94
    9660:	01 96       	adiw	r24, 0x01	; 1
    9662:	90 93 94 0d 	sts	0x0D94, r25
    9666:	80 93 93 0d 	sts	0x0D93, r24
	game.scroll_dest_y++;
    966a:	80 91 a8 0d 	lds	r24, 0x0DA8
    966e:	8f 5f       	subi	r24, 0xFF	; 255
    if(game.scroll_dest_y>=30)game.scroll_dest_y=0;
    9670:	8e 31       	cpi	r24, 0x1E	; 30
    9672:	18 f4       	brcc	.+6      	; 0x967a <append_tile_row+0x76>
		level_tile = get_level_tile(game.current_level, x + game.camera_x / 8, game.scroll_src_y);
		render_level_tile(level_tile, (x + Screen.scrollX / 8) % 32, game.scroll_dest_y);
    }
	
    game.scroll_src_y++;
	game.scroll_dest_y++;
    9674:	80 93 a8 0d 	sts	0x0DA8, r24
    9678:	02 c0       	rjmp	.+4      	; 0x967e <append_tile_row+0x7a>
    if(game.scroll_dest_y>=30)game.scroll_dest_y=0;
    967a:	10 92 a8 0d 	sts	0x0DA8, r1
}
    967e:	df 91       	pop	r29
    9680:	cf 91       	pop	r28
    9682:	08 95       	ret

00009684 <move_camera_x>:

void move_camera_x()
{	
	game.camera_x++;
    9684:	80 91 95 0d 	lds	r24, 0x0D95
    9688:	90 91 96 0d 	lds	r25, 0x0D96
    968c:	01 96       	adiw	r24, 0x01	; 1
    968e:	90 93 96 0d 	sts	0x0D96, r25
    9692:	80 93 95 0d 	sts	0x0D95, r24
	Scroll(1,0);
    9696:	60 e0       	ldi	r22, 0x00	; 0
    9698:	81 e0       	ldi	r24, 0x01	; 1
    969a:	0e 94 28 45 	call	0x8a50	; 0x8a50 <Scroll>
	if (++game.scroll_x == 8)
    969e:	80 91 a5 0d 	lds	r24, 0x0DA5
    96a2:	8f 5f       	subi	r24, 0xFF	; 255
    96a4:	88 30       	cpi	r24, 0x08	; 8
    96a6:	19 f0       	breq	.+6      	; 0x96ae <move_camera_x+0x2a>
    96a8:	80 93 a5 0d 	sts	0x0DA5, r24
    96ac:	08 95       	ret
	{
		game.scroll_x = 0;
    96ae:	10 92 a5 0d 	sts	0x0DA5, r1
		append_tile_column();
    96b2:	0c 94 6d 4a 	jmp	0x94da	; 0x94da <append_tile_column>

000096b6 <move_camera_y>:
	}
}

void move_camera_y()
{	
	game.camera_y+=2;
    96b6:	80 91 97 0d 	lds	r24, 0x0D97
    96ba:	90 91 98 0d 	lds	r25, 0x0D98
    96be:	02 96       	adiw	r24, 0x02	; 2
    96c0:	90 93 98 0d 	sts	0x0D98, r25
    96c4:	80 93 97 0d 	sts	0x0D97, r24
	game.scroll_y+=2;
    96c8:	80 91 a6 0d 	lds	r24, 0x0DA6
    96cc:	8e 5f       	subi	r24, 0xFE	; 254
    96ce:	80 93 a6 0d 	sts	0x0DA6, r24
	Scroll(0,2);
    96d2:	62 e0       	ldi	r22, 0x02	; 2
    96d4:	80 e0       	ldi	r24, 0x00	; 0
    96d6:	0e 94 28 45 	call	0x8a50	; 0x8a50 <Scroll>
	if (game.scroll_y == 8)
    96da:	80 91 a6 0d 	lds	r24, 0x0DA6
    96de:	88 30       	cpi	r24, 0x08	; 8
    96e0:	21 f4       	brne	.+8      	; 0x96ea <move_camera_y+0x34>
	{
		game.scroll_y = 0;
    96e2:	10 92 a6 0d 	sts	0x0DA6, r1
		append_tile_row();
    96e6:	0c 94 02 4b 	jmp	0x9604	; 0x9604 <append_tile_row>
    96ea:	08 95       	ret

000096ec <load_level>:
	}
}

void load_level(u8 index)
{	
    96ec:	cf 93       	push	r28
    96ee:	c8 2f       	mov	r28, r24
	Screen.scrollX = 0;
    96f0:	e9 e9       	ldi	r30, 0x99	; 153
    96f2:	fc e0       	ldi	r31, 0x0C	; 12
    96f4:	13 82       	std	Z+3, r1	; 0x03
	Screen.scrollY = 0;
    96f6:	14 82       	std	Z+4, r1	; 0x04
	Screen.scrollHeight = 30;
    96f8:	8e e1       	ldi	r24, 0x1E	; 30
    96fa:	85 83       	std	Z+5, r24	; 0x05
	Screen.overlayTileTable = tiles_data;
    96fc:	84 e6       	ldi	r24, 0x64	; 100
    96fe:	93 e5       	ldi	r25, 0x53	; 83
    9700:	92 83       	std	Z+2, r25	; 0x02
    9702:	81 83       	std	Z+1, r24	; 0x01
	Screen.overlayHeight = 2;
    9704:	82 e0       	ldi	r24, 0x02	; 2
    9706:	80 83       	st	Z, r24
	clear_overlay(2);
    9708:	0e 94 ae 49 	call	0x935c	; 0x935c <clear_overlay>
	game.current_level = (char*) map_level_0;
    970c:	e1 e9       	ldi	r30, 0x91	; 145
    970e:	fd e0       	ldi	r31, 0x0D	; 13
    9710:	84 ee       	ldi	r24, 0xE4	; 228
    9712:	9c e4       	ldi	r25, 0x4C	; 76
    9714:	90 93 89 0f 	sts	0x0F89, r25
    9718:	80 93 88 0f 	sts	0x0F88, r24
	game.current_level_index = index;
    971c:	c0 8b       	std	Z+16, r28	; 0x10
	switch (index)
	{
		case 0: game.current_level = (char*) map_level_0; break;
	}
	game.column_count = 0;
    971e:	15 86       	std	Z+13, r1	; 0x0d
    9720:	14 86       	std	Z+12, r1	; 0x0c
	game.camera_x = get_camera_x(index);
    9722:	15 82       	std	Z+5, r1	; 0x05
    9724:	14 82       	std	Z+4, r1	; 0x04
	game.camera_y = get_camera_y(index);
    9726:	17 82       	std	Z+7, r1	; 0x07
    9728:	16 82       	std	Z+6, r1	; 0x06
	game.player.shared.x = get_hero_spawn_x(index)*8;
    972a:	80 e0       	ldi	r24, 0x00	; 0
    972c:	90 e0       	ldi	r25, 0x00	; 0
    972e:	a0 ec       	ldi	r26, 0xC0	; 192
    9730:	b1 e4       	ldi	r27, 0x41	; 65
    9732:	86 8f       	std	Z+30, r24	; 0x1e
    9734:	97 8f       	std	Z+31, r25	; 0x1f
    9736:	a0 a3       	std	Z+32, r26	; 0x20
    9738:	b1 a3       	std	Z+33, r27	; 0x21
	game.player.shared.y = get_hero_spawn_y(index)*8;
    973a:	80 e0       	ldi	r24, 0x00	; 0
    973c:	90 e0       	ldi	r25, 0x00	; 0
    973e:	a8 e2       	ldi	r26, 0x28	; 40
    9740:	b3 e4       	ldi	r27, 0x43	; 67
    9742:	82 a3       	std	Z+34, r24	; 0x22
    9744:	93 a3       	std	Z+35, r25	; 0x23
    9746:	a4 a3       	std	Z+36, r26	; 0x24
    9748:	b5 a3       	std	Z+37, r27	; 0x25
	game.camera_x *= 8;
	game.camera_y *= 8;
	game.scroll_src_x = game.camera_x / 8 + CAMERA_WIDTH + 1;
    974a:	8d e1       	ldi	r24, 0x1D	; 29
    974c:	90 e0       	ldi	r25, 0x00	; 0
    974e:	91 83       	std	Z+1, r25	; 0x01
    9750:	80 83       	st	Z, r24
    game.scroll_dest_x = game.camera_x / 8 + CAMERA_WIDTH + 1;
    9752:	86 8b       	std	Z+22, r24	; 0x16
	game.scroll_src_y = game.camera_y / 8 + CAMERA_HEIGHT + 1;
    9754:	8b e1       	ldi	r24, 0x1B	; 27
    9756:	90 e0       	ldi	r25, 0x00	; 0
    9758:	93 83       	std	Z+3, r25	; 0x03
    975a:	82 83       	std	Z+2, r24	; 0x02
    game.scroll_dest_y =  game.camera_y / 8 + CAMERA_HEIGHT + 1;
    975c:	87 8b       	std	Z+23, r24	; 0x17
	game.scroll_x = 0;
    975e:	14 8a       	std	Z+20, r1	; 0x14
	game.scroll_y = 0;
    9760:	15 8a       	std	Z+21, r1	; 0x15
	game.spawn_rate = BASE_SPAWN_RATE;
    9762:	8a e0       	ldi	r24, 0x0A	; 10
    9764:	81 8f       	std	Z+25, r24	; 0x19
	render_camera_view();
    9766:	0e 94 f2 49 	call	0x93e4	; 0x93e4 <render_camera_view>
	LBPrint(0, VRAM_TILES_V-1, (char*) strLives);
    976a:	43 e2       	ldi	r20, 0x23	; 35
    976c:	5b e0       	ldi	r21, 0x0B	; 11
    976e:	6f e1       	ldi	r22, 0x1F	; 31
    9770:	80 e0       	ldi	r24, 0x00	; 0
    9772:	0e 94 d7 46 	call	0x8dae	; 0x8dae <LBPrint>
	LBPrint(17, VRAM_TILES_V-1, (char*) strScore);
    9776:	42 e3       	ldi	r20, 0x32	; 50
    9778:	5b e0       	ldi	r21, 0x0B	; 11
    977a:	6f e1       	ldi	r22, 0x1F	; 31
    977c:	81 e1       	ldi	r24, 0x11	; 17
    977e:	0e 94 d7 46 	call	0x8dae	; 0x8dae <LBPrint>
	LBPrint(0, VRAM_TILES_V-2, (char*) strShield);
    9782:	4a e2       	ldi	r20, 0x2A	; 42
    9784:	5b e0       	ldi	r21, 0x0B	; 11
    9786:	6e e1       	ldi	r22, 0x1E	; 30
    9788:	80 e0       	ldi	r24, 0x00	; 0
    978a:	0e 94 d7 46 	call	0x8dae	; 0x8dae <LBPrint>
	LBPrint(18, VRAM_TILES_V-2, (char*) strTime);
    978e:	4d e1       	ldi	r20, 0x1D	; 29
    9790:	5b e0       	ldi	r21, 0x0B	; 11
    9792:	6e e1       	ldi	r22, 0x1E	; 30
    9794:	82 e1       	ldi	r24, 0x12	; 18
}
    9796:	cf 91       	pop	r28
	game.spawn_rate = BASE_SPAWN_RATE;
	render_camera_view();
	LBPrint(0, VRAM_TILES_V-1, (char*) strLives);
	LBPrint(17, VRAM_TILES_V-1, (char*) strScore);
	LBPrint(0, VRAM_TILES_V-2, (char*) strShield);
	LBPrint(18, VRAM_TILES_V-2, (char*) strTime);
    9798:	0c 94 d7 46 	jmp	0x8dae	; 0x8dae <LBPrint>

0000979c <on_solid_ground>:
	FadeIn(FRAMES_PER_FADE, false);
	load_level(index);
}

char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
    979c:	2f 92       	push	r2
    979e:	3f 92       	push	r3
    97a0:	4f 92       	push	r4
    97a2:	5f 92       	push	r5
    97a4:	6f 92       	push	r6
    97a6:	7f 92       	push	r7
    97a8:	8f 92       	push	r8
    97aa:	9f 92       	push	r9
    97ac:	af 92       	push	r10
    97ae:	bf 92       	push	r11
    97b0:	cf 92       	push	r12
    97b2:	df 92       	push	r13
    97b4:	ef 92       	push	r14
    97b6:	ff 92       	push	r15
    97b8:	0f 93       	push	r16
    97ba:	1f 93       	push	r17
    97bc:	cf 93       	push	r28
    97be:	df 93       	push	r29
    97c0:	00 d0       	rcall	.+0      	; 0x97c2 <on_solid_ground+0x26>
    97c2:	00 d0       	rcall	.+0      	; 0x97c4 <on_solid_ground+0x28>
    97c4:	00 d0       	rcall	.+0      	; 0x97c6 <on_solid_ground+0x2a>
    97c6:	cd b7       	in	r28, 0x3d	; 61
    97c8:	de b7       	in	r29, 0x3e	; 62
    97ca:	9e 83       	std	Y+6, r25	; 0x06
    97cc:	8d 83       	std	Y+5, r24	; 0x05
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
    97ce:	88 e0       	ldi	r24, 0x08	; 8
    97d0:	48 9f       	mul	r20, r24
    97d2:	a0 01       	movw	r20, r0
    97d4:	11 24       	eor	r1, r1
    97d6:	26 2e       	mov	r2, r22
    97d8:	31 2c       	mov	r3, r1
char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
    97da:	00 e0       	ldi	r16, 0x00	; 0
    97dc:	10 e0       	ldi	r17, 0x00	; 0
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
    97de:	ca 01       	movw	r24, r20
    97e0:	aa 27       	eor	r26, r26
    97e2:	97 fd       	sbrc	r25, 7
    97e4:	a0 95       	com	r26
    97e6:	ba 2f       	mov	r27, r26
    97e8:	89 83       	std	Y+1, r24	; 0x01
    97ea:	9a 83       	std	Y+2, r25	; 0x02
    97ec:	ab 83       	std	Y+3, r26	; 0x03
    97ee:	bc 83       	std	Y+4, r27	; 0x04
char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
    97f0:	02 15       	cp	r16, r2
    97f2:	13 05       	cpc	r17, r3
    97f4:	09 f4       	brne	.+2      	; 0x97f8 <on_solid_ground+0x5c>
    97f6:	85 c0       	rjmp	.+266    	; 0x9902 <on_solid_ground+0x166>
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
    97f8:	69 81       	ldd	r22, Y+1	; 0x01
    97fa:	7a 81       	ldd	r23, Y+2	; 0x02
    97fc:	8b 81       	ldd	r24, Y+3	; 0x03
    97fe:	9c 81       	ldd	r25, Y+4	; 0x04
    9800:	0e 94 61 5c 	call	0xb8c2	; 0xb8c2 <__floatsisf>
    9804:	4b 01       	movw	r8, r22
    9806:	5c 01       	movw	r10, r24
    9808:	b8 01       	movw	r22, r16
    980a:	88 27       	eor	r24, r24
    980c:	77 fd       	sbrc	r23, 7
    980e:	80 95       	com	r24
    9810:	98 2f       	mov	r25, r24
    9812:	0e 94 61 5c 	call	0xb8c2	; 0xb8c2 <__floatsisf>
    9816:	6b 01       	movw	r12, r22
    9818:	7c 01       	movw	r14, r24
    981a:	ad 81       	ldd	r26, Y+5	; 0x05
    981c:	be 81       	ldd	r27, Y+6	; 0x06
    981e:	18 96       	adiw	r26, 0x08	; 8
    9820:	2d 91       	ld	r18, X+
    9822:	3d 91       	ld	r19, X+
    9824:	4d 91       	ld	r20, X+
    9826:	5c 91       	ld	r21, X
    9828:	1b 97       	sbiw	r26, 0x0b	; 11
    982a:	c5 01       	movw	r24, r10
    982c:	b4 01       	movw	r22, r8
    982e:	0e 94 cb 5b 	call	0xb796	; 0xb796 <__addsf3>
    9832:	20 e0       	ldi	r18, 0x00	; 0
    9834:	30 e0       	ldi	r19, 0x00	; 0
    9836:	40 e0       	ldi	r20, 0x00	; 0
    9838:	5e e3       	ldi	r21, 0x3E	; 62
    983a:	0e 94 15 5d 	call	0xba2a	; 0xba2a <__mulsf3>
    983e:	0e 94 33 5c 	call	0xb866	; 0xb866 <__fixunssfsi>
    9842:	2b 01       	movw	r4, r22
    9844:	3c 01       	movw	r6, r24
    9846:	20 e0       	ldi	r18, 0x00	; 0
    9848:	30 e0       	ldi	r19, 0x00	; 0
    984a:	40 e0       	ldi	r20, 0x00	; 0
    984c:	5e e3       	ldi	r21, 0x3E	; 62
    984e:	ed 81       	ldd	r30, Y+5	; 0x05
    9850:	fe 81       	ldd	r31, Y+6	; 0x06
    9852:	64 81       	ldd	r22, Z+4	; 0x04
    9854:	75 81       	ldd	r23, Z+5	; 0x05
    9856:	86 81       	ldd	r24, Z+6	; 0x06
    9858:	97 81       	ldd	r25, Z+7	; 0x07
    985a:	0e 94 15 5d 	call	0xba2a	; 0xba2a <__mulsf3>
    985e:	a7 01       	movw	r20, r14
    9860:	96 01       	movw	r18, r12
    9862:	0e 94 cb 5b 	call	0xb796	; 0xb796 <__addsf3>
    9866:	0e 94 33 5c 	call	0xb866	; 0xb866 <__fixunssfsi>
    986a:	a2 01       	movw	r20, r4
    986c:	80 91 88 0f 	lds	r24, 0x0F88
    9870:	90 91 89 0f 	lds	r25, 0x0F89
    9874:	0e 94 e6 49 	call	0x93cc	; 0x93cc <get_level_tile>
    9878:	78 2e       	mov	r7, r24
		lt2 = get_level_tile(game.current_level, (s->x+7) / 8 + x, (s->y + tile_height*8) / 8);
    987a:	ad 81       	ldd	r26, Y+5	; 0x05
    987c:	be 81       	ldd	r27, Y+6	; 0x06
    987e:	18 96       	adiw	r26, 0x08	; 8
    9880:	2d 91       	ld	r18, X+
    9882:	3d 91       	ld	r19, X+
    9884:	4d 91       	ld	r20, X+
    9886:	5c 91       	ld	r21, X
    9888:	1b 97       	sbiw	r26, 0x0b	; 11
    988a:	c5 01       	movw	r24, r10
    988c:	b4 01       	movw	r22, r8
    988e:	0e 94 cb 5b 	call	0xb796	; 0xb796 <__addsf3>
    9892:	20 e0       	ldi	r18, 0x00	; 0
    9894:	30 e0       	ldi	r19, 0x00	; 0
    9896:	40 e0       	ldi	r20, 0x00	; 0
    9898:	5e e3       	ldi	r21, 0x3E	; 62
    989a:	0e 94 15 5d 	call	0xba2a	; 0xba2a <__mulsf3>
    989e:	0e 94 33 5c 	call	0xb866	; 0xb866 <__fixunssfsi>
    98a2:	4b 01       	movw	r8, r22
    98a4:	5c 01       	movw	r10, r24
    98a6:	20 e0       	ldi	r18, 0x00	; 0
    98a8:	30 e0       	ldi	r19, 0x00	; 0
    98aa:	40 ee       	ldi	r20, 0xE0	; 224
    98ac:	50 e4       	ldi	r21, 0x40	; 64
    98ae:	ed 81       	ldd	r30, Y+5	; 0x05
    98b0:	fe 81       	ldd	r31, Y+6	; 0x06
    98b2:	64 81       	ldd	r22, Z+4	; 0x04
    98b4:	75 81       	ldd	r23, Z+5	; 0x05
    98b6:	86 81       	ldd	r24, Z+6	; 0x06
    98b8:	97 81       	ldd	r25, Z+7	; 0x07
    98ba:	0e 94 cb 5b 	call	0xb796	; 0xb796 <__addsf3>
    98be:	20 e0       	ldi	r18, 0x00	; 0
    98c0:	30 e0       	ldi	r19, 0x00	; 0
    98c2:	40 e0       	ldi	r20, 0x00	; 0
    98c4:	5e e3       	ldi	r21, 0x3E	; 62
    98c6:	0e 94 15 5d 	call	0xba2a	; 0xba2a <__mulsf3>
    98ca:	a7 01       	movw	r20, r14
    98cc:	96 01       	movw	r18, r12
    98ce:	0e 94 cb 5b 	call	0xb796	; 0xb796 <__addsf3>
    98d2:	0e 94 33 5c 	call	0xb866	; 0xb866 <__fixunssfsi>
    98d6:	a4 01       	movw	r20, r8
    98d8:	80 91 88 0f 	lds	r24, 0x0F88
    98dc:	90 91 89 0f 	lds	r25, 0x0F89
    98e0:	0e 94 e6 49 	call	0x93cc	; 0x93cc <get_level_tile>
    98e4:	f8 2e       	mov	r15, r24
		if (solid_tile(lt1) || solid_tile(lt2))
    98e6:	87 2d       	mov	r24, r7
    98e8:	0e 94 66 4a 	call	0x94cc	; 0x94cc <solid_tile>
    98ec:	81 11       	cpse	r24, r1
    98ee:	0b c0       	rjmp	.+22     	; 0x9906 <on_solid_ground+0x16a>
    98f0:	8f 2d       	mov	r24, r15
    98f2:	0e 94 66 4a 	call	0x94cc	; 0x94cc <solid_tile>
    98f6:	0f 5f       	subi	r16, 0xFF	; 255
    98f8:	1f 4f       	sbci	r17, 0xFF	; 255
    98fa:	88 23       	and	r24, r24
    98fc:	09 f4       	brne	.+2      	; 0x9900 <on_solid_ground+0x164>
    98fe:	78 cf       	rjmp	.-272    	; 0x97f0 <on_solid_ground+0x54>
    9900:	02 c0       	rjmp	.+4      	; 0x9906 <on_solid_ground+0x16a>
		{
			return 1;
		}
	}
	return 0;
    9902:	80 e0       	ldi	r24, 0x00	; 0
    9904:	01 c0       	rjmp	.+2      	; 0x9908 <on_solid_ground+0x16c>
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
		lt2 = get_level_tile(game.current_level, (s->x+7) / 8 + x, (s->y + tile_height*8) / 8);
		if (solid_tile(lt1) || solid_tile(lt2))
		{
			return 1;
    9906:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return 0;
}
    9908:	26 96       	adiw	r28, 0x06	; 6
    990a:	0f b6       	in	r0, 0x3f	; 63
    990c:	f8 94       	cli
    990e:	de bf       	out	0x3e, r29	; 62
    9910:	0f be       	out	0x3f, r0	; 63
    9912:	cd bf       	out	0x3d, r28	; 61
    9914:	df 91       	pop	r29
    9916:	cf 91       	pop	r28
    9918:	1f 91       	pop	r17
    991a:	0f 91       	pop	r16
    991c:	ff 90       	pop	r15
    991e:	ef 90       	pop	r14
    9920:	df 90       	pop	r13
    9922:	cf 90       	pop	r12
    9924:	bf 90       	pop	r11
    9926:	af 90       	pop	r10
    9928:	9f 90       	pop	r9
    992a:	8f 90       	pop	r8
    992c:	7f 90       	pop	r7
    992e:	6f 90       	pop	r6
    9930:	5f 90       	pop	r5
    9932:	4f 90       	pop	r4
    9934:	3f 90       	pop	r3
    9936:	2f 90       	pop	r2
    9938:	08 95       	ret

0000993a <find_shot_slot>:

u8 find_shot_slot()
{
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
	{
		if (!game.player.shot[i].active) return i;
    993a:	80 91 d2 0d 	lds	r24, 0x0DD2
    993e:	88 23       	and	r24, r24
    9940:	61 f0       	breq	.+24     	; 0x995a <find_shot_slot+0x20>
    9942:	80 91 ec 0d 	lds	r24, 0x0DEC
    9946:	88 23       	and	r24, r24
    9948:	31 f0       	breq	.+12     	; 0x9956 <find_shot_slot+0x1c>
    994a:	80 91 06 0e 	lds	r24, 0x0E06
    994e:	81 11       	cpse	r24, r1
    9950:	04 c0       	rjmp	.+8      	; 0x995a <find_shot_slot+0x20>
	return 0;
}

u8 find_shot_slot()
{
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
    9952:	82 e0       	ldi	r24, 0x02	; 2
    9954:	08 95       	ret
    9956:	81 e0       	ldi	r24, 0x01	; 1
	{
		if (!game.player.shot[i].active) return i;
    9958:	08 95       	ret
	}
	return 0;
    995a:	80 e0       	ldi	r24, 0x00	; 0
}
    995c:	08 95       	ret

0000995e <update_shot>:

void update_shot()
{
    995e:	ef 92       	push	r14
    9960:	ff 92       	push	r15
    9962:	0f 93       	push	r16
    9964:	1f 93       	push	r17
    9966:	cf 93       	push	r28
    9968:	df 93       	push	r29
	// Shot updates
	u8 idx;
	if (game.joypadState.pressed & BTN_A && game.player.active_shots < MAX_PLAYER_SHOTS)
    996a:	80 91 81 0f 	lds	r24, 0x0F81
    996e:	90 91 82 0f 	lds	r25, 0x0F82
    9972:	90 ff       	sbrs	r25, 0
    9974:	97 c0       	rjmp	.+302    	; 0x9aa4 <update_shot+0x146>
    9976:	80 91 ba 0d 	lds	r24, 0x0DBA
    997a:	83 30       	cpi	r24, 0x03	; 3
    997c:	08 f0       	brcs	.+2      	; 0x9980 <update_shot+0x22>
    997e:	92 c0       	rjmp	.+292    	; 0x9aa4 <update_shot+0x146>
	{
		SFX_PLAYER_SHOOT;
    9980:	2f ef       	ldi	r18, 0xFF	; 255
    9982:	43 e2       	ldi	r20, 0x23	; 35
    9984:	63 e0       	ldi	r22, 0x03	; 3
    9986:	82 e0       	ldi	r24, 0x02	; 2
    9988:	0e 94 1f 3b 	call	0x763e	; 0x763e <TriggerNote>
		idx = find_shot_slot();
    998c:	0e 94 9d 4c 	call	0x993a	; 0x993a <find_shot_slot>
    9990:	d8 2f       	mov	r29, r24
		LBMapSprite(PLAYER_SHOT_SLOT+idx, LBGetNextFrame(&game.player.shot[idx].anim), 0);
    9992:	08 2f       	mov	r16, r24
    9994:	10 e0       	ldi	r17, 0x00	; 0
    9996:	8a e1       	ldi	r24, 0x1A	; 26
    9998:	d8 9f       	mul	r29, r24
    999a:	70 01       	movw	r14, r0
    999c:	11 24       	eor	r1, r1
    999e:	c7 01       	movw	r24, r14
    99a0:	8d 52       	subi	r24, 0x2D	; 45
    99a2:	92 4f       	sbci	r25, 0xF2	; 242
    99a4:	0e 94 46 46 	call	0x8c8c	; 0x8c8c <LBGetNextFrame>
    99a8:	40 e0       	ldi	r20, 0x00	; 0
    99aa:	bc 01       	movw	r22, r24
    99ac:	8b e0       	ldi	r24, 0x0B	; 11
    99ae:	8d 0f       	add	r24, r29
    99b0:	0e 94 78 47 	call	0x8ef0	; 0x8ef0 <LBMapSprite>
		game.player.shot[idx].active = 1;
    99b4:	e7 01       	movw	r28, r14
    99b6:	cf 56       	subi	r28, 0x6F	; 111
    99b8:	d2 4f       	sbci	r29, 0xF2	; 242
    99ba:	fe 01       	movw	r30, r28
    99bc:	ef 5b       	subi	r30, 0xBF	; 191
    99be:	ff 4f       	sbci	r31, 0xFF	; 255
    99c0:	81 e0       	ldi	r24, 0x01	; 1
    99c2:	80 83       	st	Z, r24
		game.player.shot[idx].shared.y = (u16) game.player.shared.y / 8 * 8;
    99c4:	60 91 b3 0d 	lds	r22, 0x0DB3
    99c8:	70 91 b4 0d 	lds	r23, 0x0DB4
    99cc:	80 91 b5 0d 	lds	r24, 0x0DB5
    99d0:	90 91 b6 0d 	lds	r25, 0x0DB6
    99d4:	0e 94 33 5c 	call	0xb866	; 0xb866 <__fixunssfsi>
    99d8:	83 e0       	ldi	r24, 0x03	; 3
    99da:	76 95       	lsr	r23
    99dc:	67 95       	ror	r22
    99de:	8a 95       	dec	r24
    99e0:	e1 f7       	brne	.-8      	; 0x99da <update_shot+0x7c>
    99e2:	93 e0       	ldi	r25, 0x03	; 3
    99e4:	66 0f       	add	r22, r22
    99e6:	77 1f       	adc	r23, r23
    99e8:	9a 95       	dec	r25
    99ea:	e1 f7       	brne	.-8      	; 0x99e4 <update_shot+0x86>
    99ec:	80 e0       	ldi	r24, 0x00	; 0
    99ee:	90 e0       	ldi	r25, 0x00	; 0
    99f0:	0e 94 5f 5c 	call	0xb8be	; 0xb8be <__floatunsisf>
    99f4:	68 af       	std	Y+56, r22	; 0x38
    99f6:	79 af       	std	Y+57, r23	; 0x39
    99f8:	8a af       	std	Y+58, r24	; 0x3a
    99fa:	9b af       	std	Y+59, r25	; 0x3b
		if (!(game.player.flags & PRONE))
    99fc:	20 91 bb 0d 	lds	r18, 0x0DBB
    9a00:	22 fd       	sbrc	r18, 2
    9a02:	0a c0       	rjmp	.+20     	; 0x9a18 <update_shot+0xba>
		{
			game.player.shot[idx].shared.y += 8;
    9a04:	20 e0       	ldi	r18, 0x00	; 0
    9a06:	30 e0       	ldi	r19, 0x00	; 0
    9a08:	40 e0       	ldi	r20, 0x00	; 0
    9a0a:	51 e4       	ldi	r21, 0x41	; 65
    9a0c:	0e 94 cb 5b 	call	0xb796	; 0xb796 <__addsf3>
    9a10:	68 af       	std	Y+56, r22	; 0x38
    9a12:	79 af       	std	Y+57, r23	; 0x39
    9a14:	8a af       	std	Y+58, r24	; 0x3a
    9a16:	9b af       	std	Y+59, r25	; 0x3b
		}
		if (game.player.direction == D_RIGHT)
    9a18:	80 91 bd 0d 	lds	r24, 0x0DBD
    9a1c:	81 30       	cpi	r24, 0x01	; 1
    9a1e:	f9 f4       	brne	.+62     	; 0x9a5e <update_shot+0x100>
		{
			game.player.shot[idx].shared.x = game.player.shared.x+2*8;
    9a20:	8a e1       	ldi	r24, 0x1A	; 26
    9a22:	80 9f       	mul	r24, r16
    9a24:	e0 01       	movw	r28, r0
    9a26:	81 9f       	mul	r24, r17
    9a28:	d0 0d       	add	r29, r0
    9a2a:	11 24       	eor	r1, r1
    9a2c:	cf 56       	subi	r28, 0x6F	; 111
    9a2e:	d2 4f       	sbci	r29, 0xF2	; 242
    9a30:	20 e0       	ldi	r18, 0x00	; 0
    9a32:	30 e0       	ldi	r19, 0x00	; 0
    9a34:	40 e8       	ldi	r20, 0x80	; 128
    9a36:	51 e4       	ldi	r21, 0x41	; 65
    9a38:	60 91 af 0d 	lds	r22, 0x0DAF
    9a3c:	70 91 b0 0d 	lds	r23, 0x0DB0
    9a40:	80 91 b1 0d 	lds	r24, 0x0DB1
    9a44:	90 91 b2 0d 	lds	r25, 0x0DB2
    9a48:	0e 94 cb 5b 	call	0xb796	; 0xb796 <__addsf3>
    9a4c:	6c ab       	std	Y+52, r22	; 0x34
    9a4e:	7d ab       	std	Y+53, r23	; 0x35
    9a50:	8e ab       	std	Y+54, r24	; 0x36
    9a52:	9f ab       	std	Y+55, r25	; 0x37
			game.player.shot[idx].shared.vx = SHOT_SPEED;
    9a54:	80 e9       	ldi	r24, 0x90	; 144
    9a56:	91 e0       	ldi	r25, 0x01	; 1
    9a58:	9d af       	std	Y+61, r25	; 0x3d
    9a5a:	8c af       	std	Y+60, r24	; 0x3c
    9a5c:	1e c0       	rjmp	.+60     	; 0x9a9a <update_shot+0x13c>
		}
		else
		{
			game.player.shot[idx].shared.vx = -SHOT_SPEED;
    9a5e:	8a e1       	ldi	r24, 0x1A	; 26
    9a60:	80 9f       	mul	r24, r16
    9a62:	e0 01       	movw	r28, r0
    9a64:	81 9f       	mul	r24, r17
    9a66:	d0 0d       	add	r29, r0
    9a68:	11 24       	eor	r1, r1
    9a6a:	cf 56       	subi	r28, 0x6F	; 111
    9a6c:	d2 4f       	sbci	r29, 0xF2	; 242
    9a6e:	80 e7       	ldi	r24, 0x70	; 112
    9a70:	9e ef       	ldi	r25, 0xFE	; 254
    9a72:	9d af       	std	Y+61, r25	; 0x3d
    9a74:	8c af       	std	Y+60, r24	; 0x3c
			game.player.shot[idx].shared.x = game.player.shared.x-1*8;
    9a76:	20 e0       	ldi	r18, 0x00	; 0
    9a78:	30 e0       	ldi	r19, 0x00	; 0
    9a7a:	40 e0       	ldi	r20, 0x00	; 0
    9a7c:	51 e4       	ldi	r21, 0x41	; 65
    9a7e:	60 91 af 0d 	lds	r22, 0x0DAF
    9a82:	70 91 b0 0d 	lds	r23, 0x0DB0
    9a86:	80 91 b1 0d 	lds	r24, 0x0DB1
    9a8a:	90 91 b2 0d 	lds	r25, 0x0DB2
    9a8e:	0e 94 ca 5b 	call	0xb794	; 0xb794 <__subsf3>
    9a92:	6c ab       	std	Y+52, r22	; 0x34
    9a94:	7d ab       	std	Y+53, r23	; 0x35
    9a96:	8e ab       	std	Y+54, r24	; 0x36
    9a98:	9f ab       	std	Y+55, r25	; 0x37
		}
		game.player.active_shots++;
    9a9a:	80 91 ba 0d 	lds	r24, 0x0DBA
    9a9e:	8f 5f       	subi	r24, 0xFF	; 255
    9aa0:	80 93 ba 0d 	sts	0x0DBA, r24
	}
}
    9aa4:	df 91       	pop	r29
    9aa6:	cf 91       	pop	r28
    9aa8:	1f 91       	pop	r17
    9aaa:	0f 91       	pop	r16
    9aac:	ff 90       	pop	r15
    9aae:	ef 90       	pop	r14
    9ab0:	08 95       	ret

00009ab2 <pixel_overlap>:
		}
	}
}

u8 pixel_overlap(u16 s1, u16 s2, u8 w1, u8 w2)
{
    9ab2:	fc 01       	movw	r30, r24
	u8 result = w1;
	
	if (s2 > s1)
    9ab4:	86 17       	cp	r24, r22
    9ab6:	97 07       	cpc	r25, r23
    9ab8:	28 f4       	brcc	.+10     	; 0x9ac4 <pixel_overlap+0x12>
    9aba:	94 2f       	mov	r25, r20
    9abc:	9e 0f       	add	r25, r30
	{
		result -= s2 - s1;
    9abe:	89 2f       	mov	r24, r25
    9ac0:	86 1b       	sub	r24, r22
    9ac2:	01 c0       	rjmp	.+2      	; 0x9ac6 <pixel_overlap+0x14>
	}
}

u8 pixel_overlap(u16 s1, u16 s2, u8 w1, u8 w2)
{
	u8 result = w1;
    9ac4:	84 2f       	mov	r24, r20
	
	if (s2 > s1)
	{
		result -= s2 - s1;
	}
	s1 = s1 + w1;
    9ac6:	e4 0f       	add	r30, r20
    9ac8:	f1 1d       	adc	r31, r1
	s2 = s2 + w2;
    9aca:	62 0f       	add	r22, r18
    9acc:	71 1d       	adc	r23, r1
	if (s2 < s1)
    9ace:	6e 17       	cp	r22, r30
    9ad0:	7f 07       	cpc	r23, r31
    9ad2:	10 f4       	brcc	.+4      	; 0x9ad8 <pixel_overlap+0x26>
	{
		result -= s1 - s2;
    9ad4:	6e 1b       	sub	r22, r30
    9ad6:	86 0f       	add	r24, r22
	}
	return result;
}
    9ad8:	08 95       	ret

00009ada <collision_detect_level>:

u8 collision_detect_level(SpriteShared* s, u8 tile_width, u8 tile_height)
{
    9ada:	2f 92       	push	r2
    9adc:	3f 92       	push	r3
    9ade:	4f 92       	push	r4
    9ae0:	5f 92       	push	r5
    9ae2:	6f 92       	push	r6
    9ae4:	7f 92       	push	r7
    9ae6:	8f 92       	push	r8
    9ae8:	9f 92       	push	r9
    9aea:	af 92       	push	r10
    9aec:	bf 92       	push	r11
    9aee:	cf 92       	push	r12
    9af0:	df 92       	push	r13
    9af2:	ef 92       	push	r14
    9af4:	ff 92       	push	r15
    9af6:	0f 93       	push	r16
    9af8:	1f 93       	push	r17
    9afa:	cf 93       	push	r28
    9afc:	df 93       	push	r29
    9afe:	cd b7       	in	r28, 0x3d	; 61
    9b00:	de b7       	in	r29, 0x3e	; 62
    9b02:	68 97       	sbiw	r28, 0x18	; 24
    9b04:	0f b6       	in	r0, 0x3f	; 63
    9b06:	f8 94       	cli
    9b08:	de bf       	out	0x3e, r29	; 62
    9b0a:	0f be       	out	0x3f, r0	; 63
    9b0c:	cd bf       	out	0x3d, r28	; 61
    9b0e:	98 8f       	std	Y+24, r25	; 0x18
    9b10:	8f 8b       	std	Y+23, r24	; 0x17
    9b12:	16 2f       	mov	r17, r22
    9b14:	49 8b       	std	Y+17, r20	; 0x11
	u16 x0_tile = s->x / 8;
    9b16:	dc 01       	movw	r26, r24
    9b18:	14 96       	adiw	r26, 0x04	; 4
    9b1a:	4d 90       	ld	r4, X+
    9b1c:	5d 90       	ld	r5, X+
    9b1e:	6d 90       	ld	r6, X+
    9b20:	7c 90       	ld	r7, X
    9b22:	17 97       	sbiw	r26, 0x07	; 7
    9b24:	20 e0       	ldi	r18, 0x00	; 0
    9b26:	30 e0       	ldi	r19, 0x00	; 0
    9b28:	40 e0       	ldi	r20, 0x00	; 0
    9b2a:	5e e3       	ldi	r21, 0x3E	; 62
    9b2c:	c3 01       	movw	r24, r6
    9b2e:	b2 01       	movw	r22, r4
    9b30:	0e 94 15 5d 	call	0xba2a	; 0xba2a <__mulsf3>
    9b34:	0e 94 33 5c 	call	0xb866	; 0xb866 <__fixunssfsi>
    9b38:	4b 01       	movw	r8, r22
    9b3a:	5c 01       	movw	r10, r24
    9b3c:	68 87       	std	Y+8, r22	; 0x08
    9b3e:	9a 8a       	std	Y+18, r9	; 0x12
	u16 y0_tile = s->y / 8;
    9b40:	ef 89       	ldd	r30, Y+23	; 0x17
    9b42:	f8 8d       	ldd	r31, Y+24	; 0x18
    9b44:	c0 84       	ldd	r12, Z+8	; 0x08
    9b46:	d1 84       	ldd	r13, Z+9	; 0x09
    9b48:	e2 84       	ldd	r14, Z+10	; 0x0a
    9b4a:	f3 84       	ldd	r15, Z+11	; 0x0b
	u16 y1_tile = (s->y+7) / 8;
	u8 lt1, lt2;
	u8 result = 0;
	
	// Only if moving
	if (s->vx == 0 && s->vy == 0) return result;
    9b4c:	84 85       	ldd	r24, Z+12	; 0x0c
    9b4e:	95 85       	ldd	r25, Z+13	; 0x0d
    9b50:	89 2b       	or	r24, r25
    9b52:	61 f4       	brne	.+24     	; 0x9b6c <collision_detect_level+0x92>
    9b54:	20 e0       	ldi	r18, 0x00	; 0
    9b56:	30 e0       	ldi	r19, 0x00	; 0
    9b58:	a9 01       	movw	r20, r18
    9b5a:	60 81       	ld	r22, Z
    9b5c:	71 81       	ldd	r23, Z+1	; 0x01
    9b5e:	82 81       	ldd	r24, Z+2	; 0x02
    9b60:	93 81       	ldd	r25, Z+3	; 0x03
    9b62:	0e 94 2f 5c 	call	0xb85e	; 0xb85e <__cmpsf2>
    9b66:	88 23       	and	r24, r24
    9b68:	09 f4       	brne	.+2      	; 0x9b6c <collision_detect_level+0x92>
    9b6a:	d2 c2       	rjmp	.+1444   	; 0xa110 <collision_detect_level+0x636>
	
	// Top and Bottom
	if (s->vy != 0)
    9b6c:	20 e0       	ldi	r18, 0x00	; 0
    9b6e:	30 e0       	ldi	r19, 0x00	; 0
    9b70:	a9 01       	movw	r20, r18
    9b72:	af 89       	ldd	r26, Y+23	; 0x17
    9b74:	b8 8d       	ldd	r27, Y+24	; 0x18
    9b76:	6d 91       	ld	r22, X+
    9b78:	7d 91       	ld	r23, X+
    9b7a:	8d 91       	ld	r24, X+
    9b7c:	9c 91       	ld	r25, X
    9b7e:	0e 94 2f 5c 	call	0xb85e	; 0xb85e <__cmpsf2>
    9b82:	88 23       	and	r24, r24
    9b84:	09 f4       	brne	.+2      	; 0x9b88 <collision_detect_level+0xae>
    9b86:	67 c1       	rjmp	.+718    	; 0x9e56 <collision_detect_level+0x37c>
}

u8 collision_detect_level(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u16 x0_tile = s->x / 8;
	u16 y0_tile = s->y / 8;
    9b88:	20 e0       	ldi	r18, 0x00	; 0
    9b8a:	30 e0       	ldi	r19, 0x00	; 0
    9b8c:	40 e0       	ldi	r20, 0x00	; 0
    9b8e:	5e e3       	ldi	r21, 0x3E	; 62
    9b90:	c7 01       	movw	r24, r14
    9b92:	b6 01       	movw	r22, r12
    9b94:	0e 94 15 5d 	call	0xba2a	; 0xba2a <__mulsf3>
    9b98:	0e 94 33 5c 	call	0xb866	; 0xb866 <__fixunssfsi>
    9b9c:	6b 01       	movw	r12, r22
    9b9e:	7c 01       	movw	r14, r24
    9ba0:	1b 01       	movw	r2, r22
	u16 x1_tile = (s->x+7) / 8;
    9ba2:	20 e0       	ldi	r18, 0x00	; 0
    9ba4:	30 e0       	ldi	r19, 0x00	; 0
    9ba6:	40 ee       	ldi	r20, 0xE0	; 224
    9ba8:	50 e4       	ldi	r21, 0x40	; 64
    9baa:	c3 01       	movw	r24, r6
    9bac:	b2 01       	movw	r22, r4
    9bae:	0e 94 cb 5b 	call	0xb796	; 0xb796 <__addsf3>
    9bb2:	20 e0       	ldi	r18, 0x00	; 0
    9bb4:	30 e0       	ldi	r19, 0x00	; 0
    9bb6:	40 e0       	ldi	r20, 0x00	; 0
    9bb8:	5e e3       	ldi	r21, 0x3E	; 62
    9bba:	0e 94 15 5d 	call	0xba2a	; 0xba2a <__mulsf3>
    9bbe:	0e 94 33 5c 	call	0xb866	; 0xb866 <__fixunssfsi>
		{
			if (s->vy < 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, y0_tile);
				lt2 = get_level_tile(game.current_level, x1_tile + x, y0_tile);
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    9bc2:	f4 01       	movw	r30, r8
    9bc4:	53 e0       	ldi	r21, 0x03	; 3
    9bc6:	ee 0f       	add	r30, r30
    9bc8:	ff 1f       	adc	r31, r31
    9bca:	5a 95       	dec	r21
    9bcc:	e1 f7       	brne	.-8      	; 0x9bc6 <collision_detect_level+0xec>
    9bce:	fb 83       	std	Y+3, r31	; 0x03
    9bd0:	ea 83       	std	Y+2, r30	; 0x02
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    9bd2:	9b 01       	movw	r18, r22
    9bd4:	e3 e0       	ldi	r30, 0x03	; 3
    9bd6:	22 0f       	add	r18, r18
    9bd8:	33 1f       	adc	r19, r19
    9bda:	ea 95       	dec	r30
    9bdc:	e1 f7       	brne	.-8      	; 0x9bd6 <collision_detect_level+0xfc>
    9bde:	3d 83       	std	Y+5, r19	; 0x05
    9be0:	2c 83       	std	Y+4, r18	; 0x04
				{
					s->vy =  0;
					s->y = (y0_tile + 1) * 8;
    9be2:	3f ef       	ldi	r19, 0xFF	; 255
    9be4:	c3 1a       	sub	r12, r19
    9be6:	d3 0a       	sbc	r13, r19
    9be8:	f3 e0       	ldi	r31, 0x03	; 3
    9bea:	cc 0c       	add	r12, r12
    9bec:	dd 1c       	adc	r13, r13
    9bee:	fa 95       	dec	r31
    9bf0:	e1 f7       	brne	.-8      	; 0x9bea <collision_detect_level+0x110>
					result = 1;
				}
			}
			if (s->vy > 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, (s->y + tile_height*8 - 1) / 8);
    9bf2:	b9 89       	ldd	r27, Y+17	; 0x11
    9bf4:	a8 e0       	ldi	r26, 0x08	; 8
    9bf6:	ba 9f       	mul	r27, r26
    9bf8:	a0 01       	movw	r20, r0
    9bfa:	11 24       	eor	r1, r1
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) || 
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vy =  0;
					s->gravity = 0;
					s->y = y0_tile * 8;
    9bfc:	96 01       	movw	r18, r12
    9bfe:	28 50       	subi	r18, 0x08	; 8
    9c00:	31 09       	sbc	r19, r1
    9c02:	2b 01       	movw	r4, r22
    9c04:	34 01       	movw	r6, r8
    9c06:	19 82       	std	Y+1, r1	; 0x01
				lt2 = get_level_tile(game.current_level, x1_tile + x, y0_tile);
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vy =  0;
					s->y = (y0_tile + 1) * 8;
    9c08:	b6 01       	movw	r22, r12
    9c0a:	80 e0       	ldi	r24, 0x00	; 0
    9c0c:	90 e0       	ldi	r25, 0x00	; 0
    9c0e:	69 87       	std	Y+9, r22	; 0x09
    9c10:	7a 87       	std	Y+10, r23	; 0x0a
    9c12:	8b 87       	std	Y+11, r24	; 0x0b
    9c14:	9c 87       	std	Y+12, r25	; 0x0c
					result = 1;
				}
			}
			if (s->vy > 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, (s->y + tile_height*8 - 1) / 8);
    9c16:	66 27       	eor	r22, r22
    9c18:	57 fd       	sbrc	r21, 7
    9c1a:	60 95       	com	r22
    9c1c:	76 2f       	mov	r23, r22
    9c1e:	4d 87       	std	Y+13, r20	; 0x0d
    9c20:	5e 87       	std	Y+14, r21	; 0x0e
    9c22:	6f 87       	std	Y+15, r22	; 0x0f
    9c24:	78 8b       	std	Y+16, r23	; 0x10
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) || 
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vy =  0;
					s->gravity = 0;
					s->y = y0_tile * 8;
    9c26:	b9 01       	movw	r22, r18
    9c28:	80 e0       	ldi	r24, 0x00	; 0
    9c2a:	90 e0       	ldi	r25, 0x00	; 0
    9c2c:	6b 8b       	std	Y+19, r22	; 0x13
    9c2e:	7c 8b       	std	Y+20, r23	; 0x14
    9c30:	8d 8b       	std	Y+21, r24	; 0x15
    9c32:	9e 8b       	std	Y+22, r25	; 0x16
    9c34:	86 2d       	mov	r24, r6
    9c36:	48 85       	ldd	r20, Y+8	; 0x08
    9c38:	84 1b       	sub	r24, r20
	if (s->vx == 0 && s->vy == 0) return result;
	
	// Top and Bottom
	if (s->vy != 0)
	{
		for (u8 x = 0; x < tile_width; x++)
    9c3a:	81 17       	cp	r24, r17
    9c3c:	08 f0       	brcs	.+2      	; 0x9c40 <collision_detect_level+0x166>
    9c3e:	0c c1       	rjmp	.+536    	; 0x9e58 <collision_detect_level+0x37e>
		{
			if (s->vy < 0)
    9c40:	20 e0       	ldi	r18, 0x00	; 0
    9c42:	30 e0       	ldi	r19, 0x00	; 0
    9c44:	a9 01       	movw	r20, r18
    9c46:	af 89       	ldd	r26, Y+23	; 0x17
    9c48:	b8 8d       	ldd	r27, Y+24	; 0x18
    9c4a:	6d 91       	ld	r22, X+
    9c4c:	7d 91       	ld	r23, X+
    9c4e:	8d 91       	ld	r24, X+
    9c50:	9c 91       	ld	r25, X
    9c52:	0e 94 2f 5c 	call	0xb85e	; 0xb85e <__cmpsf2>
    9c56:	87 ff       	sbrs	r24, 7
    9c58:	58 c0       	rjmp	.+176    	; 0x9d0a <collision_detect_level+0x230>
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, y0_tile);
    9c5a:	a1 01       	movw	r20, r2
    9c5c:	b3 01       	movw	r22, r6
    9c5e:	80 91 88 0f 	lds	r24, 0x0F88
    9c62:	90 91 89 0f 	lds	r25, 0x0F89
    9c66:	0e 94 e6 49 	call	0x93cc	; 0x93cc <get_level_tile>
    9c6a:	f8 2e       	mov	r15, r24
				lt2 = get_level_tile(game.current_level, x1_tile + x, y0_tile);
    9c6c:	a1 01       	movw	r20, r2
    9c6e:	b2 01       	movw	r22, r4
    9c70:	80 91 88 0f 	lds	r24, 0x0F88
    9c74:	90 91 89 0f 	lds	r25, 0x0F89
    9c78:	0e 94 e6 49 	call	0x93cc	; 0x93cc <get_level_tile>
    9c7c:	08 2f       	mov	r16, r24
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    9c7e:	8f 2d       	mov	r24, r15
    9c80:	0e 94 66 4a 	call	0x94cc	; 0x94cc <solid_tile>
    9c84:	88 23       	and	r24, r24
    9c86:	91 f0       	breq	.+36     	; 0x9cac <collision_detect_level+0x1d2>
    9c88:	ef 89       	ldd	r30, Y+23	; 0x17
    9c8a:	f8 8d       	ldd	r31, Y+24	; 0x18
    9c8c:	64 81       	ldd	r22, Z+4	; 0x04
    9c8e:	75 81       	ldd	r23, Z+5	; 0x05
    9c90:	86 81       	ldd	r24, Z+6	; 0x06
    9c92:	97 81       	ldd	r25, Z+7	; 0x07
    9c94:	0e 94 33 5c 	call	0xb866	; 0xb866 <__fixunssfsi>
    9c98:	dc 01       	movw	r26, r24
    9c9a:	cb 01       	movw	r24, r22
    9c9c:	28 e0       	ldi	r18, 0x08	; 8
    9c9e:	48 e0       	ldi	r20, 0x08	; 8
    9ca0:	6a 81       	ldd	r22, Y+2	; 0x02
    9ca2:	7b 81       	ldd	r23, Y+3	; 0x03
    9ca4:	0e 94 59 4d 	call	0x9ab2	; 0x9ab2 <pixel_overlap>
    9ca8:	84 30       	cpi	r24, 0x04	; 4
    9caa:	c8 f4       	brcc	.+50     	; 0x9cde <collision_detect_level+0x204>
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    9cac:	80 2f       	mov	r24, r16
    9cae:	0e 94 66 4a 	call	0x94cc	; 0x94cc <solid_tile>
		{
			if (s->vy < 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, y0_tile);
				lt2 = get_level_tile(game.current_level, x1_tile + x, y0_tile);
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    9cb2:	88 23       	and	r24, r24
    9cb4:	51 f1       	breq	.+84     	; 0x9d0a <collision_detect_level+0x230>
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    9cb6:	af 89       	ldd	r26, Y+23	; 0x17
    9cb8:	b8 8d       	ldd	r27, Y+24	; 0x18
    9cba:	14 96       	adiw	r26, 0x04	; 4
    9cbc:	6d 91       	ld	r22, X+
    9cbe:	7d 91       	ld	r23, X+
    9cc0:	8d 91       	ld	r24, X+
    9cc2:	9c 91       	ld	r25, X
    9cc4:	17 97       	sbiw	r26, 0x07	; 7
    9cc6:	0e 94 33 5c 	call	0xb866	; 0xb866 <__fixunssfsi>
    9cca:	dc 01       	movw	r26, r24
    9ccc:	cb 01       	movw	r24, r22
    9cce:	28 e0       	ldi	r18, 0x08	; 8
    9cd0:	48 e0       	ldi	r20, 0x08	; 8
    9cd2:	6c 81       	ldd	r22, Y+4	; 0x04
    9cd4:	7d 81       	ldd	r23, Y+5	; 0x05
    9cd6:	0e 94 59 4d 	call	0x9ab2	; 0x9ab2 <pixel_overlap>
    9cda:	84 30       	cpi	r24, 0x04	; 4
    9cdc:	b0 f0       	brcs	.+44     	; 0x9d0a <collision_detect_level+0x230>
				{
					s->vy =  0;
    9cde:	ef 89       	ldd	r30, Y+23	; 0x17
    9ce0:	f8 8d       	ldd	r31, Y+24	; 0x18
    9ce2:	10 82       	st	Z, r1
    9ce4:	11 82       	std	Z+1, r1	; 0x01
    9ce6:	12 82       	std	Z+2, r1	; 0x02
    9ce8:	13 82       	std	Z+3, r1	; 0x03
					s->y = (y0_tile + 1) * 8;
    9cea:	69 85       	ldd	r22, Y+9	; 0x09
    9cec:	7a 85       	ldd	r23, Y+10	; 0x0a
    9cee:	8b 85       	ldd	r24, Y+11	; 0x0b
    9cf0:	9c 85       	ldd	r25, Y+12	; 0x0c
    9cf2:	0e 94 5f 5c 	call	0xb8be	; 0xb8be <__floatunsisf>
    9cf6:	af 89       	ldd	r26, Y+23	; 0x17
    9cf8:	b8 8d       	ldd	r27, Y+24	; 0x18
    9cfa:	18 96       	adiw	r26, 0x08	; 8
    9cfc:	6d 93       	st	X+, r22
    9cfe:	7d 93       	st	X+, r23
    9d00:	8d 93       	st	X+, r24
    9d02:	9c 93       	st	X, r25
    9d04:	1b 97       	sbiw	r26, 0x0b	; 11
					result = 1;
    9d06:	b1 e0       	ldi	r27, 0x01	; 1
    9d08:	b9 83       	std	Y+1, r27	; 0x01
				}
			}
			if (s->vy > 0)
    9d0a:	20 e0       	ldi	r18, 0x00	; 0
    9d0c:	30 e0       	ldi	r19, 0x00	; 0
    9d0e:	a9 01       	movw	r20, r18
    9d10:	ef 89       	ldd	r30, Y+23	; 0x17
    9d12:	f8 8d       	ldd	r31, Y+24	; 0x18
    9d14:	60 81       	ld	r22, Z
    9d16:	71 81       	ldd	r23, Z+1	; 0x01
    9d18:	82 81       	ldd	r24, Z+2	; 0x02
    9d1a:	93 81       	ldd	r25, Z+3	; 0x03
    9d1c:	0e 94 11 5d 	call	0xba22	; 0xba22 <__gesf2>
    9d20:	18 16       	cp	r1, r24
    9d22:	0c f0       	brlt	.+2      	; 0x9d26 <collision_detect_level+0x24c>
    9d24:	91 c0       	rjmp	.+290    	; 0x9e48 <collision_detect_level+0x36e>
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, (s->y + tile_height*8 - 1) / 8);
    9d26:	6d 85       	ldd	r22, Y+13	; 0x0d
    9d28:	7e 85       	ldd	r23, Y+14	; 0x0e
    9d2a:	8f 85       	ldd	r24, Y+15	; 0x0f
    9d2c:	98 89       	ldd	r25, Y+16	; 0x10
    9d2e:	0e 94 61 5c 	call	0xb8c2	; 0xb8c2 <__floatsisf>
    9d32:	6b 01       	movw	r12, r22
    9d34:	7c 01       	movw	r14, r24
    9d36:	af 89       	ldd	r26, Y+23	; 0x17
    9d38:	b8 8d       	ldd	r27, Y+24	; 0x18
    9d3a:	18 96       	adiw	r26, 0x08	; 8
    9d3c:	2d 91       	ld	r18, X+
    9d3e:	3d 91       	ld	r19, X+
    9d40:	4d 91       	ld	r20, X+
    9d42:	5c 91       	ld	r21, X
    9d44:	1b 97       	sbiw	r26, 0x0b	; 11
    9d46:	0e 94 cb 5b 	call	0xb796	; 0xb796 <__addsf3>
    9d4a:	20 e0       	ldi	r18, 0x00	; 0
    9d4c:	30 e0       	ldi	r19, 0x00	; 0
    9d4e:	40 e8       	ldi	r20, 0x80	; 128
    9d50:	5f e3       	ldi	r21, 0x3F	; 63
    9d52:	0e 94 ca 5b 	call	0xb794	; 0xb794 <__subsf3>
    9d56:	20 e0       	ldi	r18, 0x00	; 0
    9d58:	30 e0       	ldi	r19, 0x00	; 0
    9d5a:	40 e0       	ldi	r20, 0x00	; 0
    9d5c:	5e e3       	ldi	r21, 0x3E	; 62
    9d5e:	0e 94 15 5d 	call	0xba2a	; 0xba2a <__mulsf3>
    9d62:	0e 94 33 5c 	call	0xb866	; 0xb866 <__fixunssfsi>
    9d66:	ab 01       	movw	r20, r22
    9d68:	b3 01       	movw	r22, r6
    9d6a:	80 91 88 0f 	lds	r24, 0x0F88
    9d6e:	90 91 89 0f 	lds	r25, 0x0F89
    9d72:	0e 94 e6 49 	call	0x93cc	; 0x93cc <get_level_tile>
    9d76:	08 2f       	mov	r16, r24
				lt2 = get_level_tile(game.current_level, x1_tile + x, (s->y + tile_height*8 - 1) / 8);
    9d78:	ef 89       	ldd	r30, Y+23	; 0x17
    9d7a:	f8 8d       	ldd	r31, Y+24	; 0x18
    9d7c:	20 85       	ldd	r18, Z+8	; 0x08
    9d7e:	31 85       	ldd	r19, Z+9	; 0x09
    9d80:	42 85       	ldd	r20, Z+10	; 0x0a
    9d82:	53 85       	ldd	r21, Z+11	; 0x0b
    9d84:	c7 01       	movw	r24, r14
    9d86:	b6 01       	movw	r22, r12
    9d88:	0e 94 cb 5b 	call	0xb796	; 0xb796 <__addsf3>
    9d8c:	20 e0       	ldi	r18, 0x00	; 0
    9d8e:	30 e0       	ldi	r19, 0x00	; 0
    9d90:	40 e8       	ldi	r20, 0x80	; 128
    9d92:	5f e3       	ldi	r21, 0x3F	; 63
    9d94:	0e 94 ca 5b 	call	0xb794	; 0xb794 <__subsf3>
    9d98:	20 e0       	ldi	r18, 0x00	; 0
    9d9a:	30 e0       	ldi	r19, 0x00	; 0
    9d9c:	40 e0       	ldi	r20, 0x00	; 0
    9d9e:	5e e3       	ldi	r21, 0x3E	; 62
    9da0:	0e 94 15 5d 	call	0xba2a	; 0xba2a <__mulsf3>
    9da4:	0e 94 33 5c 	call	0xb866	; 0xb866 <__fixunssfsi>
    9da8:	ab 01       	movw	r20, r22
    9daa:	b2 01       	movw	r22, r4
    9dac:	80 91 88 0f 	lds	r24, 0x0F88
    9db0:	90 91 89 0f 	lds	r25, 0x0F89
    9db4:	0e 94 e6 49 	call	0x93cc	; 0x93cc <get_level_tile>
    9db8:	f8 2e       	mov	r15, r24
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) || 
    9dba:	80 2f       	mov	r24, r16
    9dbc:	0e 94 66 4a 	call	0x94cc	; 0x94cc <solid_tile>
    9dc0:	88 23       	and	r24, r24
    9dc2:	a1 f0       	breq	.+40     	; 0x9dec <collision_detect_level+0x312>
    9dc4:	af 89       	ldd	r26, Y+23	; 0x17
    9dc6:	b8 8d       	ldd	r27, Y+24	; 0x18
    9dc8:	14 96       	adiw	r26, 0x04	; 4
    9dca:	6d 91       	ld	r22, X+
    9dcc:	7d 91       	ld	r23, X+
    9dce:	8d 91       	ld	r24, X+
    9dd0:	9c 91       	ld	r25, X
    9dd2:	17 97       	sbiw	r26, 0x07	; 7
    9dd4:	0e 94 33 5c 	call	0xb866	; 0xb866 <__fixunssfsi>
    9dd8:	dc 01       	movw	r26, r24
    9dda:	cb 01       	movw	r24, r22
    9ddc:	28 e0       	ldi	r18, 0x08	; 8
    9dde:	48 e0       	ldi	r20, 0x08	; 8
    9de0:	6a 81       	ldd	r22, Y+2	; 0x02
    9de2:	7b 81       	ldd	r23, Y+3	; 0x03
    9de4:	0e 94 59 4d 	call	0x9ab2	; 0x9ab2 <pixel_overlap>
    9de8:	84 30       	cpi	r24, 0x04	; 4
    9dea:	b8 f4       	brcc	.+46     	; 0x9e1a <collision_detect_level+0x340>
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    9dec:	8f 2d       	mov	r24, r15
    9dee:	0e 94 66 4a 	call	0x94cc	; 0x94cc <solid_tile>
			}
			if (s->vy > 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, (s->y + tile_height*8 - 1) / 8);
				lt2 = get_level_tile(game.current_level, x1_tile + x, (s->y + tile_height*8 - 1) / 8);
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) || 
    9df2:	88 23       	and	r24, r24
    9df4:	49 f1       	breq	.+82     	; 0x9e48 <collision_detect_level+0x36e>
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    9df6:	ef 89       	ldd	r30, Y+23	; 0x17
    9df8:	f8 8d       	ldd	r31, Y+24	; 0x18
    9dfa:	64 81       	ldd	r22, Z+4	; 0x04
    9dfc:	75 81       	ldd	r23, Z+5	; 0x05
    9dfe:	86 81       	ldd	r24, Z+6	; 0x06
    9e00:	97 81       	ldd	r25, Z+7	; 0x07
    9e02:	0e 94 33 5c 	call	0xb866	; 0xb866 <__fixunssfsi>
    9e06:	dc 01       	movw	r26, r24
    9e08:	cb 01       	movw	r24, r22
    9e0a:	28 e0       	ldi	r18, 0x08	; 8
    9e0c:	48 e0       	ldi	r20, 0x08	; 8
    9e0e:	6c 81       	ldd	r22, Y+4	; 0x04
    9e10:	7d 81       	ldd	r23, Y+5	; 0x05
    9e12:	0e 94 59 4d 	call	0x9ab2	; 0x9ab2 <pixel_overlap>
    9e16:	84 30       	cpi	r24, 0x04	; 4
    9e18:	b8 f0       	brcs	.+46     	; 0x9e48 <collision_detect_level+0x36e>
				{
					s->vy =  0;
    9e1a:	af 89       	ldd	r26, Y+23	; 0x17
    9e1c:	b8 8d       	ldd	r27, Y+24	; 0x18
    9e1e:	1d 92       	st	X+, r1
    9e20:	1d 92       	st	X+, r1
    9e22:	1d 92       	st	X+, r1
    9e24:	1c 92       	st	X, r1
    9e26:	13 97       	sbiw	r26, 0x03	; 3
					s->gravity = 0;
    9e28:	1e 96       	adiw	r26, 0x0e	; 14
    9e2a:	1c 92       	st	X, r1
					s->y = y0_tile * 8;
    9e2c:	6b 89       	ldd	r22, Y+19	; 0x13
    9e2e:	7c 89       	ldd	r23, Y+20	; 0x14
    9e30:	8d 89       	ldd	r24, Y+21	; 0x15
    9e32:	9e 89       	ldd	r25, Y+22	; 0x16
    9e34:	0e 94 5f 5c 	call	0xb8be	; 0xb8be <__floatunsisf>
    9e38:	ef 89       	ldd	r30, Y+23	; 0x17
    9e3a:	f8 8d       	ldd	r31, Y+24	; 0x18
    9e3c:	60 87       	std	Z+8, r22	; 0x08
    9e3e:	71 87       	std	Z+9, r23	; 0x09
    9e40:	82 87       	std	Z+10, r24	; 0x0a
    9e42:	93 87       	std	Z+11, r25	; 0x0b
					result = 1;
    9e44:	f1 e0       	ldi	r31, 0x01	; 1
    9e46:	f9 83       	std	Y+1, r31	; 0x01
    9e48:	2f ef       	ldi	r18, 0xFF	; 255
    9e4a:	62 1a       	sub	r6, r18
    9e4c:	72 0a       	sbc	r7, r18
    9e4e:	3f ef       	ldi	r19, 0xFF	; 255
    9e50:	43 1a       	sub	r4, r19
    9e52:	53 0a       	sbc	r5, r19
    9e54:	ef ce       	rjmp	.-546    	; 0x9c34 <collision_detect_level+0x15a>
	u16 x0_tile = s->x / 8;
	u16 y0_tile = s->y / 8;
	u16 x1_tile = (s->x+7) / 8;
	u16 y1_tile = (s->y+7) / 8;
	u8 lt1, lt2;
	u8 result = 0;
    9e56:	19 82       	std	Y+1, r1	; 0x01
			}
		}
	}
	
	// Left and Right
	if (s->vx != 0)
    9e58:	af 89       	ldd	r26, Y+23	; 0x17
    9e5a:	b8 8d       	ldd	r27, Y+24	; 0x18
    9e5c:	1c 96       	adiw	r26, 0x0c	; 12
    9e5e:	8d 91       	ld	r24, X+
    9e60:	9c 91       	ld	r25, X
    9e62:	1d 97       	sbiw	r26, 0x0d	; 13
    9e64:	89 2b       	or	r24, r25
    9e66:	09 f4       	brne	.+2      	; 0x9e6a <collision_detect_level+0x390>
    9e68:	54 c1       	rjmp	.+680    	; 0xa112 <collision_detect_level+0x638>
	{
		y0_tile = s->y / 8;
    9e6a:	18 96       	adiw	r26, 0x08	; 8
    9e6c:	cd 90       	ld	r12, X+
    9e6e:	dd 90       	ld	r13, X+
    9e70:	ed 90       	ld	r14, X+
    9e72:	fc 90       	ld	r15, X
    9e74:	1b 97       	sbiw	r26, 0x0b	; 11
    9e76:	20 e0       	ldi	r18, 0x00	; 0
    9e78:	30 e0       	ldi	r19, 0x00	; 0
    9e7a:	40 e0       	ldi	r20, 0x00	; 0
    9e7c:	5e e3       	ldi	r21, 0x3E	; 62
    9e7e:	c7 01       	movw	r24, r14
    9e80:	b6 01       	movw	r22, r12
    9e82:	0e 94 15 5d 	call	0xba2a	; 0xba2a <__mulsf3>
    9e86:	0e 94 33 5c 	call	0xb866	; 0xb866 <__fixunssfsi>
    9e8a:	2b 01       	movw	r4, r22
    9e8c:	3c 01       	movw	r6, r24
    9e8e:	6d 87       	std	Y+13, r22	; 0x0d
		y1_tile = (s->y+7) / 8;
    9e90:	20 e0       	ldi	r18, 0x00	; 0
    9e92:	30 e0       	ldi	r19, 0x00	; 0
    9e94:	40 ee       	ldi	r20, 0xE0	; 224
    9e96:	50 e4       	ldi	r21, 0x40	; 64
    9e98:	c7 01       	movw	r24, r14
    9e9a:	b6 01       	movw	r22, r12
    9e9c:	0e 94 cb 5b 	call	0xb796	; 0xb796 <__addsf3>
    9ea0:	20 e0       	ldi	r18, 0x00	; 0
    9ea2:	30 e0       	ldi	r19, 0x00	; 0
    9ea4:	40 e0       	ldi	r20, 0x00	; 0
    9ea6:	5e e3       	ldi	r21, 0x3E	; 62
    9ea8:	0e 94 15 5d 	call	0xba2a	; 0xba2a <__mulsf3>
    9eac:	0e 94 33 5c 	call	0xb866	; 0xb866 <__fixunssfsi>
		{
			if (s->vx < 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile, y0_tile + y);
				lt2 = get_level_tile(game.current_level, x0_tile, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    9eb0:	12 01       	movw	r2, r4
    9eb2:	83 e0       	ldi	r24, 0x03	; 3
    9eb4:	22 0c       	add	r2, r2
    9eb6:	33 1c       	adc	r3, r3
    9eb8:	8a 95       	dec	r24
    9eba:	e1 f7       	brne	.-8      	; 0x9eb4 <collision_detect_level+0x3da>
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    9ebc:	fb 01       	movw	r30, r22
    9ebe:	93 e0       	ldi	r25, 0x03	; 3
    9ec0:	ee 0f       	add	r30, r30
    9ec2:	ff 1f       	adc	r31, r31
    9ec4:	9a 95       	dec	r25
    9ec6:	e1 f7       	brne	.-8      	; 0x9ec0 <collision_detect_level+0x3e6>
    9ec8:	fb 83       	std	Y+3, r31	; 0x03
    9eca:	ea 83       	std	Y+2, r30	; 0x02
				{
					s->vx =  0;
					s->x = (x0_tile + 1) * 8;
    9ecc:	ff ef       	ldi	r31, 0xFF	; 255
    9ece:	8f 1a       	sub	r8, r31
    9ed0:	9f 0a       	sbc	r9, r31
    9ed2:	94 01       	movw	r18, r8
    9ed4:	43 e0       	ldi	r20, 0x03	; 3
    9ed6:	22 0f       	add	r18, r18
    9ed8:	33 1f       	adc	r19, r19
    9eda:	4a 95       	dec	r20
    9edc:	e1 f7       	brne	.-8      	; 0x9ed6 <collision_detect_level+0x3fc>
				}
			}
			
			if (s->vx > 0)
			{
				lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y0_tile + y);
    9ede:	a8 e0       	ldi	r26, 0x08	; 8
    9ee0:	1a 9f       	mul	r17, r26
    9ee2:	a0 01       	movw	r20, r0
    9ee4:	11 24       	eor	r1, r1
				lt2 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vx =  0;
					s->x = x0_tile * 8;
    9ee6:	49 01       	movw	r8, r18
    9ee8:	b8 e0       	ldi	r27, 0x08	; 8
    9eea:	8b 1a       	sub	r8, r27
    9eec:	91 08       	sbc	r9, r1
	// Left and Right
	if (s->vx != 0)
	{
		y0_tile = s->y / 8;
		y1_tile = (s->y+7) / 8;
		for (u8 y = 0; y < tile_height; y++)
    9eee:	6b 01       	movw	r12, r22
    9ef0:	82 01       	movw	r16, r4
				lt2 = get_level_tile(game.current_level, x0_tile, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vx =  0;
					s->x = (x0_tile + 1) * 8;
    9ef2:	b9 01       	movw	r22, r18
    9ef4:	80 e0       	ldi	r24, 0x00	; 0
    9ef6:	90 e0       	ldi	r25, 0x00	; 0
    9ef8:	6c 83       	std	Y+4, r22	; 0x04
    9efa:	7d 83       	std	Y+5, r23	; 0x05
    9efc:	8e 83       	std	Y+6, r24	; 0x06
    9efe:	9f 83       	std	Y+7, r25	; 0x07
				}
			}
			
			if (s->vx > 0)
			{
				lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y0_tile + y);
    9f00:	ca 01       	movw	r24, r20
    9f02:	aa 27       	eor	r26, r26
    9f04:	97 fd       	sbrc	r25, 7
    9f06:	a0 95       	com	r26
    9f08:	ba 2f       	mov	r27, r26
    9f0a:	89 87       	std	Y+9, r24	; 0x09
    9f0c:	9a 87       	std	Y+10, r25	; 0x0a
    9f0e:	ab 87       	std	Y+11, r26	; 0x0b
    9f10:	bc 87       	std	Y+12, r27	; 0x0c
				lt2 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vx =  0;
					s->x = x0_tile * 8;
    9f12:	a1 2c       	mov	r10, r1
    9f14:	b1 2c       	mov	r11, r1
    9f16:	80 2f       	mov	r24, r16
    9f18:	3d 85       	ldd	r19, Y+13	; 0x0d
    9f1a:	83 1b       	sub	r24, r19
	// Left and Right
	if (s->vx != 0)
	{
		y0_tile = s->y / 8;
		y1_tile = (s->y+7) / 8;
		for (u8 y = 0; y < tile_height; y++)
    9f1c:	49 89       	ldd	r20, Y+17	; 0x11
    9f1e:	84 17       	cp	r24, r20
    9f20:	08 f0       	brcs	.+2      	; 0x9f24 <collision_detect_level+0x44a>
    9f22:	f7 c0       	rjmp	.+494    	; 0xa112 <collision_detect_level+0x638>
		{
			if (s->vx < 0)
    9f24:	af 89       	ldd	r26, Y+23	; 0x17
    9f26:	b8 8d       	ldd	r27, Y+24	; 0x18
    9f28:	1c 96       	adiw	r26, 0x0c	; 12
    9f2a:	8d 91       	ld	r24, X+
    9f2c:	9c 91       	ld	r25, X
    9f2e:	1d 97       	sbiw	r26, 0x0d	; 13
    9f30:	97 ff       	sbrs	r25, 7
    9f32:	57 c0       	rjmp	.+174    	; 0x9fe2 <collision_detect_level+0x508>
			{
				lt1 = get_level_tile(game.current_level, x0_tile, y0_tile + y);
    9f34:	a8 01       	movw	r20, r16
    9f36:	68 85       	ldd	r22, Y+8	; 0x08
    9f38:	7a 89       	ldd	r23, Y+18	; 0x12
    9f3a:	80 91 88 0f 	lds	r24, 0x0F88
    9f3e:	90 91 89 0f 	lds	r25, 0x0F89
    9f42:	0e 94 e6 49 	call	0x93cc	; 0x93cc <get_level_tile>
    9f46:	78 2e       	mov	r7, r24
				lt2 = get_level_tile(game.current_level, x0_tile, y1_tile + y);
    9f48:	a6 01       	movw	r20, r12
    9f4a:	68 85       	ldd	r22, Y+8	; 0x08
    9f4c:	7a 89       	ldd	r23, Y+18	; 0x12
    9f4e:	80 91 88 0f 	lds	r24, 0x0F88
    9f52:	90 91 89 0f 	lds	r25, 0x0F89
    9f56:	0e 94 e6 49 	call	0x93cc	; 0x93cc <get_level_tile>
    9f5a:	e8 2e       	mov	r14, r24
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    9f5c:	87 2d       	mov	r24, r7
    9f5e:	0e 94 66 4a 	call	0x94cc	; 0x94cc <solid_tile>
    9f62:	88 23       	and	r24, r24
    9f64:	89 f0       	breq	.+34     	; 0x9f88 <collision_detect_level+0x4ae>
    9f66:	ef 89       	ldd	r30, Y+23	; 0x17
    9f68:	f8 8d       	ldd	r31, Y+24	; 0x18
    9f6a:	60 85       	ldd	r22, Z+8	; 0x08
    9f6c:	71 85       	ldd	r23, Z+9	; 0x09
    9f6e:	82 85       	ldd	r24, Z+10	; 0x0a
    9f70:	93 85       	ldd	r25, Z+11	; 0x0b
    9f72:	0e 94 33 5c 	call	0xb866	; 0xb866 <__fixunssfsi>
    9f76:	dc 01       	movw	r26, r24
    9f78:	cb 01       	movw	r24, r22
    9f7a:	28 e0       	ldi	r18, 0x08	; 8
    9f7c:	48 e0       	ldi	r20, 0x08	; 8
    9f7e:	b1 01       	movw	r22, r2
    9f80:	0e 94 59 4d 	call	0x9ab2	; 0x9ab2 <pixel_overlap>
    9f84:	84 30       	cpi	r24, 0x04	; 4
    9f86:	c8 f4       	brcc	.+50     	; 0x9fba <collision_detect_level+0x4e0>
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    9f88:	8e 2d       	mov	r24, r14
    9f8a:	0e 94 66 4a 	call	0x94cc	; 0x94cc <solid_tile>
		{
			if (s->vx < 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile, y0_tile + y);
				lt2 = get_level_tile(game.current_level, x0_tile, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    9f8e:	88 23       	and	r24, r24
    9f90:	41 f1       	breq	.+80     	; 0x9fe2 <collision_detect_level+0x508>
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    9f92:	af 89       	ldd	r26, Y+23	; 0x17
    9f94:	b8 8d       	ldd	r27, Y+24	; 0x18
    9f96:	18 96       	adiw	r26, 0x08	; 8
    9f98:	6d 91       	ld	r22, X+
    9f9a:	7d 91       	ld	r23, X+
    9f9c:	8d 91       	ld	r24, X+
    9f9e:	9c 91       	ld	r25, X
    9fa0:	1b 97       	sbiw	r26, 0x0b	; 11
    9fa2:	0e 94 33 5c 	call	0xb866	; 0xb866 <__fixunssfsi>
    9fa6:	dc 01       	movw	r26, r24
    9fa8:	cb 01       	movw	r24, r22
    9faa:	28 e0       	ldi	r18, 0x08	; 8
    9fac:	48 e0       	ldi	r20, 0x08	; 8
    9fae:	6a 81       	ldd	r22, Y+2	; 0x02
    9fb0:	7b 81       	ldd	r23, Y+3	; 0x03
    9fb2:	0e 94 59 4d 	call	0x9ab2	; 0x9ab2 <pixel_overlap>
    9fb6:	84 30       	cpi	r24, 0x04	; 4
    9fb8:	a0 f0       	brcs	.+40     	; 0x9fe2 <collision_detect_level+0x508>
				{
					s->vx =  0;
    9fba:	ef 89       	ldd	r30, Y+23	; 0x17
    9fbc:	f8 8d       	ldd	r31, Y+24	; 0x18
    9fbe:	15 86       	std	Z+13, r1	; 0x0d
    9fc0:	14 86       	std	Z+12, r1	; 0x0c
					s->x = (x0_tile + 1) * 8;
    9fc2:	6c 81       	ldd	r22, Y+4	; 0x04
    9fc4:	7d 81       	ldd	r23, Y+5	; 0x05
    9fc6:	8e 81       	ldd	r24, Y+6	; 0x06
    9fc8:	9f 81       	ldd	r25, Y+7	; 0x07
    9fca:	0e 94 5f 5c 	call	0xb8be	; 0xb8be <__floatunsisf>
    9fce:	af 89       	ldd	r26, Y+23	; 0x17
    9fd0:	b8 8d       	ldd	r27, Y+24	; 0x18
    9fd2:	14 96       	adiw	r26, 0x04	; 4
    9fd4:	6d 93       	st	X+, r22
    9fd6:	7d 93       	st	X+, r23
    9fd8:	8d 93       	st	X+, r24
    9fda:	9c 93       	st	X, r25
    9fdc:	17 97       	sbiw	r26, 0x07	; 7
					result = 1;
    9fde:	b1 e0       	ldi	r27, 0x01	; 1
    9fe0:	b9 83       	std	Y+1, r27	; 0x01
				}
			}
			
			if (s->vx > 0)
    9fe2:	ef 89       	ldd	r30, Y+23	; 0x17
    9fe4:	f8 8d       	ldd	r31, Y+24	; 0x18
    9fe6:	84 85       	ldd	r24, Z+12	; 0x0c
    9fe8:	95 85       	ldd	r25, Z+13	; 0x0d
    9fea:	18 16       	cp	r1, r24
    9fec:	19 06       	cpc	r1, r25
    9fee:	0c f0       	brlt	.+2      	; 0x9ff2 <collision_detect_level+0x518>
    9ff0:	89 c0       	rjmp	.+274    	; 0xa104 <collision_detect_level+0x62a>
			{
				lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y0_tile + y);
    9ff2:	69 85       	ldd	r22, Y+9	; 0x09
    9ff4:	7a 85       	ldd	r23, Y+10	; 0x0a
    9ff6:	8b 85       	ldd	r24, Y+11	; 0x0b
    9ff8:	9c 85       	ldd	r25, Y+12	; 0x0c
    9ffa:	0e 94 61 5c 	call	0xb8c2	; 0xb8c2 <__floatsisf>
    9ffe:	2b 01       	movw	r4, r22
    a000:	3c 01       	movw	r6, r24
    a002:	af 89       	ldd	r26, Y+23	; 0x17
    a004:	b8 8d       	ldd	r27, Y+24	; 0x18
    a006:	14 96       	adiw	r26, 0x04	; 4
    a008:	2d 91       	ld	r18, X+
    a00a:	3d 91       	ld	r19, X+
    a00c:	4d 91       	ld	r20, X+
    a00e:	5c 91       	ld	r21, X
    a010:	17 97       	sbiw	r26, 0x07	; 7
    a012:	0e 94 cb 5b 	call	0xb796	; 0xb796 <__addsf3>
    a016:	20 e0       	ldi	r18, 0x00	; 0
    a018:	30 e0       	ldi	r19, 0x00	; 0
    a01a:	40 e8       	ldi	r20, 0x80	; 128
    a01c:	5f e3       	ldi	r21, 0x3F	; 63
    a01e:	0e 94 ca 5b 	call	0xb794	; 0xb794 <__subsf3>
    a022:	20 e0       	ldi	r18, 0x00	; 0
    a024:	30 e0       	ldi	r19, 0x00	; 0
    a026:	40 e0       	ldi	r20, 0x00	; 0
    a028:	5e e3       	ldi	r21, 0x3E	; 62
    a02a:	0e 94 15 5d 	call	0xba2a	; 0xba2a <__mulsf3>
    a02e:	0e 94 33 5c 	call	0xb866	; 0xb866 <__fixunssfsi>
    a032:	a8 01       	movw	r20, r16
    a034:	80 91 88 0f 	lds	r24, 0x0F88
    a038:	90 91 89 0f 	lds	r25, 0x0F89
    a03c:	0e 94 e6 49 	call	0x93cc	; 0x93cc <get_level_tile>
    a040:	e8 2e       	mov	r14, r24
				lt2 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y1_tile + y);
    a042:	ef 89       	ldd	r30, Y+23	; 0x17
    a044:	f8 8d       	ldd	r31, Y+24	; 0x18
    a046:	24 81       	ldd	r18, Z+4	; 0x04
    a048:	35 81       	ldd	r19, Z+5	; 0x05
    a04a:	46 81       	ldd	r20, Z+6	; 0x06
    a04c:	57 81       	ldd	r21, Z+7	; 0x07
    a04e:	c3 01       	movw	r24, r6
    a050:	b2 01       	movw	r22, r4
    a052:	0e 94 cb 5b 	call	0xb796	; 0xb796 <__addsf3>
    a056:	20 e0       	ldi	r18, 0x00	; 0
    a058:	30 e0       	ldi	r19, 0x00	; 0
    a05a:	40 e8       	ldi	r20, 0x80	; 128
    a05c:	5f e3       	ldi	r21, 0x3F	; 63
    a05e:	0e 94 ca 5b 	call	0xb794	; 0xb794 <__subsf3>
    a062:	20 e0       	ldi	r18, 0x00	; 0
    a064:	30 e0       	ldi	r19, 0x00	; 0
    a066:	40 e0       	ldi	r20, 0x00	; 0
    a068:	5e e3       	ldi	r21, 0x3E	; 62
    a06a:	0e 94 15 5d 	call	0xba2a	; 0xba2a <__mulsf3>
    a06e:	0e 94 33 5c 	call	0xb866	; 0xb866 <__fixunssfsi>
    a072:	a6 01       	movw	r20, r12
    a074:	80 91 88 0f 	lds	r24, 0x0F88
    a078:	90 91 89 0f 	lds	r25, 0x0F89
    a07c:	0e 94 e6 49 	call	0x93cc	; 0x93cc <get_level_tile>
    a080:	78 2e       	mov	r7, r24
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    a082:	8e 2d       	mov	r24, r14
    a084:	0e 94 66 4a 	call	0x94cc	; 0x94cc <solid_tile>
    a088:	88 23       	and	r24, r24
    a08a:	99 f0       	breq	.+38     	; 0xa0b2 <collision_detect_level+0x5d8>
    a08c:	af 89       	ldd	r26, Y+23	; 0x17
    a08e:	b8 8d       	ldd	r27, Y+24	; 0x18
    a090:	18 96       	adiw	r26, 0x08	; 8
    a092:	6d 91       	ld	r22, X+
    a094:	7d 91       	ld	r23, X+
    a096:	8d 91       	ld	r24, X+
    a098:	9c 91       	ld	r25, X
    a09a:	1b 97       	sbiw	r26, 0x0b	; 11
    a09c:	0e 94 33 5c 	call	0xb866	; 0xb866 <__fixunssfsi>
    a0a0:	dc 01       	movw	r26, r24
    a0a2:	cb 01       	movw	r24, r22
    a0a4:	28 e0       	ldi	r18, 0x08	; 8
    a0a6:	48 e0       	ldi	r20, 0x08	; 8
    a0a8:	b1 01       	movw	r22, r2
    a0aa:	0e 94 59 4d 	call	0x9ab2	; 0x9ab2 <pixel_overlap>
    a0ae:	84 30       	cpi	r24, 0x04	; 4
    a0b0:	b8 f4       	brcc	.+46     	; 0xa0e0 <collision_detect_level+0x606>
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    a0b2:	87 2d       	mov	r24, r7
    a0b4:	0e 94 66 4a 	call	0x94cc	; 0x94cc <solid_tile>
			
			if (s->vx > 0)
			{
				lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y0_tile + y);
				lt2 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    a0b8:	88 23       	and	r24, r24
    a0ba:	21 f1       	breq	.+72     	; 0xa104 <collision_detect_level+0x62a>
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    a0bc:	ef 89       	ldd	r30, Y+23	; 0x17
    a0be:	f8 8d       	ldd	r31, Y+24	; 0x18
    a0c0:	60 85       	ldd	r22, Z+8	; 0x08
    a0c2:	71 85       	ldd	r23, Z+9	; 0x09
    a0c4:	82 85       	ldd	r24, Z+10	; 0x0a
    a0c6:	93 85       	ldd	r25, Z+11	; 0x0b
    a0c8:	0e 94 33 5c 	call	0xb866	; 0xb866 <__fixunssfsi>
    a0cc:	dc 01       	movw	r26, r24
    a0ce:	cb 01       	movw	r24, r22
    a0d0:	28 e0       	ldi	r18, 0x08	; 8
    a0d2:	48 e0       	ldi	r20, 0x08	; 8
    a0d4:	6a 81       	ldd	r22, Y+2	; 0x02
    a0d6:	7b 81       	ldd	r23, Y+3	; 0x03
    a0d8:	0e 94 59 4d 	call	0x9ab2	; 0x9ab2 <pixel_overlap>
    a0dc:	84 30       	cpi	r24, 0x04	; 4
    a0de:	90 f0       	brcs	.+36     	; 0xa104 <collision_detect_level+0x62a>
				{
					s->vx =  0;
    a0e0:	af 89       	ldd	r26, Y+23	; 0x17
    a0e2:	b8 8d       	ldd	r27, Y+24	; 0x18
    a0e4:	1d 96       	adiw	r26, 0x0d	; 13
    a0e6:	1c 92       	st	X, r1
    a0e8:	1e 92       	st	-X, r1
    a0ea:	1c 97       	sbiw	r26, 0x0c	; 12
					s->x = x0_tile * 8;
    a0ec:	c5 01       	movw	r24, r10
    a0ee:	b4 01       	movw	r22, r8
    a0f0:	0e 94 5f 5c 	call	0xb8be	; 0xb8be <__floatunsisf>
    a0f4:	ef 89       	ldd	r30, Y+23	; 0x17
    a0f6:	f8 8d       	ldd	r31, Y+24	; 0x18
    a0f8:	64 83       	std	Z+4, r22	; 0x04
    a0fa:	75 83       	std	Z+5, r23	; 0x05
    a0fc:	86 83       	std	Z+6, r24	; 0x06
    a0fe:	97 83       	std	Z+7, r25	; 0x07
					result = 1;
    a100:	f1 e0       	ldi	r31, 0x01	; 1
    a102:	f9 83       	std	Y+1, r31	; 0x01
    a104:	0f 5f       	subi	r16, 0xFF	; 255
    a106:	1f 4f       	sbci	r17, 0xFF	; 255
    a108:	2f ef       	ldi	r18, 0xFF	; 255
    a10a:	c2 1a       	sub	r12, r18
    a10c:	d2 0a       	sbc	r13, r18
    a10e:	03 cf       	rjmp	.-506    	; 0x9f16 <collision_detect_level+0x43c>
	u16 y1_tile = (s->y+7) / 8;
	u8 lt1, lt2;
	u8 result = 0;
	
	// Only if moving
	if (s->vx == 0 && s->vy == 0) return result;
    a110:	19 82       	std	Y+1, r1	; 0x01
				}
			}
		}
	}
	return result;
}
    a112:	89 81       	ldd	r24, Y+1	; 0x01
    a114:	68 96       	adiw	r28, 0x18	; 24
    a116:	0f b6       	in	r0, 0x3f	; 63
    a118:	f8 94       	cli
    a11a:	de bf       	out	0x3e, r29	; 62
    a11c:	0f be       	out	0x3f, r0	; 63
    a11e:	cd bf       	out	0x3d, r28	; 61
    a120:	df 91       	pop	r29
    a122:	cf 91       	pop	r28
    a124:	1f 91       	pop	r17
    a126:	0f 91       	pop	r16
    a128:	ff 90       	pop	r15
    a12a:	ef 90       	pop	r14
    a12c:	df 90       	pop	r13
    a12e:	cf 90       	pop	r12
    a130:	bf 90       	pop	r11
    a132:	af 90       	pop	r10
    a134:	9f 90       	pop	r9
    a136:	8f 90       	pop	r8
    a138:	7f 90       	pop	r7
    a13a:	6f 90       	pop	r6
    a13c:	5f 90       	pop	r5
    a13e:	4f 90       	pop	r4
    a140:	3f 90       	pop	r3
    a142:	2f 90       	pop	r2
    a144:	08 95       	ret

0000a146 <animate_shot>:
		game.player.active_shots++;
	}
}

void animate_shot()
{
    a146:	2f 92       	push	r2
    a148:	3f 92       	push	r3
    a14a:	4f 92       	push	r4
    a14c:	5f 92       	push	r5
    a14e:	6f 92       	push	r6
    a150:	7f 92       	push	r7
    a152:	8f 92       	push	r8
    a154:	9f 92       	push	r9
    a156:	af 92       	push	r10
    a158:	bf 92       	push	r11
    a15a:	cf 92       	push	r12
    a15c:	df 92       	push	r13
    a15e:	ef 92       	push	r14
    a160:	ff 92       	push	r15
    a162:	0f 93       	push	r16
    a164:	1f 93       	push	r17
    a166:	cf 93       	push	r28
    a168:	df 93       	push	r29
    a16a:	cd b7       	in	r28, 0x3d	; 61
    a16c:	de b7       	in	r29, 0x3e	; 62
    a16e:	2f 97       	sbiw	r28, 0x0f	; 15
    a170:	0f b6       	in	r0, 0x3f	; 63
    a172:	f8 94       	cli
    a174:	de bf       	out	0x3e, r29	; 62
    a176:	0f be       	out	0x3f, r0	; 63
    a178:	cd bf       	out	0x3d, r28	; 61
    a17a:	92 ed       	ldi	r25, 0xD2	; 210
    a17c:	89 2e       	mov	r8, r25
    a17e:	9d e0       	ldi	r25, 0x0D	; 13
    a180:	99 2e       	mov	r9, r25
    a182:	81 ec       	ldi	r24, 0xC1	; 193
    a184:	9d e0       	ldi	r25, 0x0D	; 13
    a186:	9f 87       	std	Y+15, r25	; 0x0f
    a188:	8e 87       	std	Y+14, r24	; 0x0e
    a18a:	9b e0       	ldi	r25, 0x0B	; 11
    a18c:	99 83       	std	Y+1, r25	; 0x01
						SFX_HIT;
						game.enemies[j].shield -= game.player.shot[i].hit_count;
						if (game.enemies[j].shield <= 0)
						{
							SFX_ENEMY_EXPLODE;
							game.enemies[j].flags = EXPLODING;
    a18e:	20 e1       	ldi	r18, 0x10	; 16
    a190:	b2 2e       	mov	r11, r18
{
	// Animate shots
	u8 slot = ENEMY_SLOT;
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
	{
		if (game.player.shot[i].active)
    a192:	f4 01       	movw	r30, r8
    a194:	80 81       	ld	r24, Z
    a196:	88 23       	and	r24, r24
    a198:	09 f4       	brne	.+2      	; 0xa19c <animate_shot+0x56>
    a19a:	46 c1       	rjmp	.+652    	; 0xa428 <animate_shot+0x2e2>
		{
			game.player.shot[i].shared.x += game.player.shot[i].shared.vx*FRAME_TIME;
    a19c:	ee 85       	ldd	r30, Y+14	; 0x0e
    a19e:	ff 85       	ldd	r31, Y+15	; 0x0f
    a1a0:	64 85       	ldd	r22, Z+12	; 0x0c
    a1a2:	75 85       	ldd	r23, Z+13	; 0x0d
    a1a4:	88 27       	eor	r24, r24
    a1a6:	77 fd       	sbrc	r23, 7
    a1a8:	80 95       	com	r24
    a1aa:	98 2f       	mov	r25, r24
    a1ac:	0e 94 61 5c 	call	0xb8c2	; 0xb8c2 <__floatsisf>
    a1b0:	29 e8       	ldi	r18, 0x89	; 137
    a1b2:	38 e8       	ldi	r19, 0x88	; 136
    a1b4:	48 e8       	ldi	r20, 0x88	; 136
    a1b6:	5c e3       	ldi	r21, 0x3C	; 60
    a1b8:	0e 94 15 5d 	call	0xba2a	; 0xba2a <__mulsf3>
    a1bc:	ee 85       	ldd	r30, Y+14	; 0x0e
    a1be:	ff 85       	ldd	r31, Y+15	; 0x0f
    a1c0:	24 81       	ldd	r18, Z+4	; 0x04
    a1c2:	35 81       	ldd	r19, Z+5	; 0x05
    a1c4:	46 81       	ldd	r20, Z+6	; 0x06
    a1c6:	57 81       	ldd	r21, Z+7	; 0x07
    a1c8:	0e 94 cb 5b 	call	0xb796	; 0xb796 <__addsf3>
    a1cc:	2b 01       	movw	r4, r22
    a1ce:	3c 01       	movw	r6, r24
    a1d0:	ee 85       	ldd	r30, Y+14	; 0x0e
    a1d2:	ff 85       	ldd	r31, Y+15	; 0x0f
    a1d4:	64 83       	std	Z+4, r22	; 0x04
    a1d6:	75 83       	std	Z+5, r23	; 0x05
    a1d8:	86 83       	std	Z+6, r24	; 0x06
    a1da:	97 83       	std	Z+7, r25	; 0x07
			game.player.shot[i].shared.y += game.player.shot[i].shared.vy*FRAME_TIME;
    a1dc:	29 e8       	ldi	r18, 0x89	; 137
    a1de:	38 e8       	ldi	r19, 0x88	; 136
    a1e0:	48 e8       	ldi	r20, 0x88	; 136
    a1e2:	5c e3       	ldi	r21, 0x3C	; 60
    a1e4:	60 81       	ld	r22, Z
    a1e6:	71 81       	ldd	r23, Z+1	; 0x01
    a1e8:	82 81       	ldd	r24, Z+2	; 0x02
    a1ea:	93 81       	ldd	r25, Z+3	; 0x03
    a1ec:	0e 94 15 5d 	call	0xba2a	; 0xba2a <__mulsf3>
    a1f0:	ee 85       	ldd	r30, Y+14	; 0x0e
    a1f2:	ff 85       	ldd	r31, Y+15	; 0x0f
    a1f4:	20 85       	ldd	r18, Z+8	; 0x08
    a1f6:	31 85       	ldd	r19, Z+9	; 0x09
    a1f8:	42 85       	ldd	r20, Z+10	; 0x0a
    a1fa:	53 85       	ldd	r21, Z+11	; 0x0b
    a1fc:	0e 94 cb 5b 	call	0xb796	; 0xb796 <__addsf3>
    a200:	6b 01       	movw	r12, r22
    a202:	7c 01       	movw	r14, r24
    a204:	ee 85       	ldd	r30, Y+14	; 0x0e
    a206:	ff 85       	ldd	r31, Y+15	; 0x0f
    a208:	60 87       	std	Z+8, r22	; 0x08
    a20a:	71 87       	std	Z+9, r23	; 0x09
    a20c:	82 87       	std	Z+10, r24	; 0x0a
    a20e:	93 87       	std	Z+11, r25	; 0x0b
			LBMoveSprite(PLAYER_SHOT_SLOT+i, game.player.shot[i].shared.x - game.camera_x, game.player.shot[i].shared.y - game.camera_y, 1, 1);
    a210:	60 91 97 0d 	lds	r22, 0x0D97
    a214:	70 91 98 0d 	lds	r23, 0x0D98
    a218:	80 e0       	ldi	r24, 0x00	; 0
    a21a:	90 e0       	ldi	r25, 0x00	; 0
    a21c:	0e 94 5f 5c 	call	0xb8be	; 0xb8be <__floatunsisf>
    a220:	9b 01       	movw	r18, r22
    a222:	ac 01       	movw	r20, r24
    a224:	c7 01       	movw	r24, r14
    a226:	b6 01       	movw	r22, r12
    a228:	0e 94 ca 5b 	call	0xb794	; 0xb794 <__subsf3>
    a22c:	0e 94 33 5c 	call	0xb866	; 0xb866 <__fixunssfsi>
    a230:	c6 2e       	mov	r12, r22
    a232:	80 91 95 0d 	lds	r24, 0x0D95
    a236:	90 91 96 0d 	lds	r25, 0x0D96
    a23a:	bc 01       	movw	r22, r24
    a23c:	80 e0       	ldi	r24, 0x00	; 0
    a23e:	90 e0       	ldi	r25, 0x00	; 0
    a240:	0e 94 5f 5c 	call	0xb8be	; 0xb8be <__floatunsisf>
    a244:	9b 01       	movw	r18, r22
    a246:	ac 01       	movw	r20, r24
    a248:	c3 01       	movw	r24, r6
    a24a:	b2 01       	movw	r22, r4
    a24c:	0e 94 ca 5b 	call	0xb794	; 0xb794 <__subsf3>
    a250:	0e 94 33 5c 	call	0xb866	; 0xb866 <__fixunssfsi>
    a254:	01 e0       	ldi	r16, 0x01	; 1
    a256:	21 e0       	ldi	r18, 0x01	; 1
    a258:	4c 2d       	mov	r20, r12
    a25a:	89 81       	ldd	r24, Y+1	; 0x01
    a25c:	0e 94 ca 47 	call	0x8f94	; 0x8f94 <LBMoveSprite>
			if (game.player.shot[i].shared.x < game.camera_x || game.player.shot[i].shared.x+8 > game.camera_x + CAMERA_WIDTH*8 ||
    a260:	ee 85       	ldd	r30, Y+14	; 0x0e
    a262:	ff 85       	ldd	r31, Y+15	; 0x0f
    a264:	c4 80       	ldd	r12, Z+4	; 0x04
    a266:	d5 80       	ldd	r13, Z+5	; 0x05
    a268:	e6 80       	ldd	r14, Z+6	; 0x06
    a26a:	f7 80       	ldd	r15, Z+7	; 0x07
    a26c:	60 90 95 0d 	lds	r6, 0x0D95
    a270:	70 90 96 0d 	lds	r7, 0x0D96
    a274:	b3 01       	movw	r22, r6
    a276:	80 e0       	ldi	r24, 0x00	; 0
    a278:	90 e0       	ldi	r25, 0x00	; 0
    a27a:	0e 94 5f 5c 	call	0xb8be	; 0xb8be <__floatunsisf>
    a27e:	9b 01       	movw	r18, r22
    a280:	ac 01       	movw	r20, r24
    a282:	c7 01       	movw	r24, r14
    a284:	b6 01       	movw	r22, r12
    a286:	0e 94 2f 5c 	call	0xb85e	; 0xb85e <__cmpsf2>
    a28a:	87 ff       	sbrs	r24, 7
    a28c:	0f c0       	rjmp	.+30     	; 0xa2ac <animate_shot+0x166>
			    collision_detect_level(&game.player.shot[i].shared, 1, 1))
			{
				game.player.shot[i].active = 0;
    a28e:	f4 01       	movw	r30, r8
    a290:	10 82       	st	Z, r1
				game.player.active_shots--;
    a292:	80 91 ba 0d 	lds	r24, 0x0DBA
    a296:	81 50       	subi	r24, 0x01	; 1
    a298:	80 93 ba 0d 	sts	0x0DBA, r24
				LBMoveSprite(PLAYER_SHOT_SLOT+i, OFF_SCREEN, 0, 1, 1);
    a29c:	01 e0       	ldi	r16, 0x01	; 1
    a29e:	21 e0       	ldi	r18, 0x01	; 1
    a2a0:	40 e0       	ldi	r20, 0x00	; 0
    a2a2:	60 ee       	ldi	r22, 0xE0	; 224
    a2a4:	89 81       	ldd	r24, Y+1	; 0x01
    a2a6:	0e 94 ca 47 	call	0x8f94	; 0x8f94 <LBMoveSprite>
    a2aa:	be c0       	rjmp	.+380    	; 0xa428 <animate_shot+0x2e2>
		if (game.player.shot[i].active)
		{
			game.player.shot[i].shared.x += game.player.shot[i].shared.vx*FRAME_TIME;
			game.player.shot[i].shared.y += game.player.shot[i].shared.vy*FRAME_TIME;
			LBMoveSprite(PLAYER_SHOT_SLOT+i, game.player.shot[i].shared.x - game.camera_x, game.player.shot[i].shared.y - game.camera_y, 1, 1);
			if (game.player.shot[i].shared.x < game.camera_x || game.player.shot[i].shared.x+8 > game.camera_x + CAMERA_WIDTH*8 ||
    a2ac:	20 e0       	ldi	r18, 0x00	; 0
    a2ae:	30 e0       	ldi	r19, 0x00	; 0
    a2b0:	40 e0       	ldi	r20, 0x00	; 0
    a2b2:	51 e4       	ldi	r21, 0x41	; 65
    a2b4:	c7 01       	movw	r24, r14
    a2b6:	b6 01       	movw	r22, r12
    a2b8:	0e 94 cb 5b 	call	0xb796	; 0xb796 <__addsf3>
    a2bc:	1b 01       	movw	r2, r22
    a2be:	2c 01       	movw	r4, r24
    a2c0:	b3 01       	movw	r22, r6
    a2c2:	60 52       	subi	r22, 0x20	; 32
    a2c4:	7f 4f       	sbci	r23, 0xFF	; 255
    a2c6:	80 e0       	ldi	r24, 0x00	; 0
    a2c8:	90 e0       	ldi	r25, 0x00	; 0
    a2ca:	0e 94 5f 5c 	call	0xb8be	; 0xb8be <__floatunsisf>
    a2ce:	9b 01       	movw	r18, r22
    a2d0:	ac 01       	movw	r20, r24
    a2d2:	c2 01       	movw	r24, r4
    a2d4:	b1 01       	movw	r22, r2
    a2d6:	0e 94 11 5d 	call	0xba22	; 0xba22 <__gesf2>
    a2da:	18 16       	cp	r1, r24
    a2dc:	c4 f2       	brlt	.-80     	; 0xa28e <animate_shot+0x148>
			    collision_detect_level(&game.player.shot[i].shared, 1, 1))
    a2de:	41 e0       	ldi	r20, 0x01	; 1
    a2e0:	61 e0       	ldi	r22, 0x01	; 1
    a2e2:	8e 85       	ldd	r24, Y+14	; 0x0e
    a2e4:	9f 85       	ldd	r25, Y+15	; 0x0f
    a2e6:	0e 94 6d 4d 	call	0x9ada	; 0x9ada <collision_detect_level>
		if (game.player.shot[i].active)
		{
			game.player.shot[i].shared.x += game.player.shot[i].shared.vx*FRAME_TIME;
			game.player.shot[i].shared.y += game.player.shot[i].shared.vy*FRAME_TIME;
			LBMoveSprite(PLAYER_SHOT_SLOT+i, game.player.shot[i].shared.x - game.camera_x, game.player.shot[i].shared.y - game.camera_y, 1, 1);
			if (game.player.shot[i].shared.x < game.camera_x || game.player.shot[i].shared.x+8 > game.camera_x + CAMERA_WIDTH*8 ||
    a2ea:	81 11       	cpse	r24, r1
    a2ec:	d0 cf       	rjmp	.-96     	; 0xa28e <animate_shot+0x148>
    a2ee:	8e e4       	ldi	r24, 0x4E	; 78
    a2f0:	28 2e       	mov	r2, r24
    a2f2:	8e e0       	ldi	r24, 0x0E	; 14
    a2f4:	38 2e       	mov	r3, r24
    a2f6:	61 2c       	mov	r6, r1
    a2f8:	71 2c       	mov	r7, r1
    a2fa:	24 01       	movw	r4, r8
    a2fc:	f1 e0       	ldi	r31, 0x01	; 1
    a2fe:	4f 1a       	sub	r4, r31
    a300:	51 08       	sbc	r5, r1
    a302:	f1 01       	movw	r30, r2
    a304:	38 97       	sbiw	r30, 0x08	; 8
			else
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
				{
					if (game.enemies[j].active &&
    a306:	80 81       	ld	r24, Z
    a308:	88 23       	and	r24, r24
    a30a:	09 f4       	brne	.+2      	; 0xa30e <animate_shot+0x1c8>
    a30c:	82 c0       	rjmp	.+260    	; 0xa412 <animate_shot+0x2cc>
    a30e:	34 96       	adiw	r30, 0x04	; 4
					    LBCollides(game.player.shot[i].shared.x,game.player.shot[i].shared.y, 8, 8,
    a310:	a0 80       	ld	r10, Z
    a312:	aa 0c       	add	r10, r10
    a314:	aa 0c       	add	r10, r10
    a316:	aa 0c       	add	r10, r10
    a318:	31 97       	sbiw	r30, 0x01	; 1
    a31a:	c0 80       	ld	r12, Z
    a31c:	cc 0c       	add	r12, r12
    a31e:	cc 0c       	add	r12, r12
    a320:	cc 0c       	add	r12, r12
    a322:	3a 97       	sbiw	r30, 0x0a	; 10
    a324:	60 81       	ld	r22, Z
    a326:	71 81       	ldd	r23, Z+1	; 0x01
    a328:	82 81       	ldd	r24, Z+2	; 0x02
    a32a:	93 81       	ldd	r25, Z+3	; 0x03
    a32c:	0e 94 33 5c 	call	0xb866	; 0xb866 <__fixunssfsi>
    a330:	6a 83       	std	Y+2, r22	; 0x02
    a332:	7b 83       	std	Y+3, r23	; 0x03
    a334:	8c 83       	std	Y+4, r24	; 0x04
    a336:	9d 83       	std	Y+5, r25	; 0x05
    a338:	f1 01       	movw	r30, r2
    a33a:	73 97       	sbiw	r30, 0x13	; 19
    a33c:	60 81       	ld	r22, Z
    a33e:	71 81       	ldd	r23, Z+1	; 0x01
    a340:	82 81       	ldd	r24, Z+2	; 0x02
    a342:	93 81       	ldd	r25, Z+3	; 0x03
    a344:	0e 94 33 5c 	call	0xb866	; 0xb866 <__fixunssfsi>
    a348:	6e 83       	std	Y+6, r22	; 0x06
    a34a:	7f 83       	std	Y+7, r23	; 0x07
    a34c:	88 87       	std	Y+8, r24	; 0x08
    a34e:	99 87       	std	Y+9, r25	; 0x09
    a350:	ee 85       	ldd	r30, Y+14	; 0x0e
    a352:	ff 85       	ldd	r31, Y+15	; 0x0f
    a354:	60 85       	ldd	r22, Z+8	; 0x08
    a356:	71 85       	ldd	r23, Z+9	; 0x09
    a358:	82 85       	ldd	r24, Z+10	; 0x0a
    a35a:	93 85       	ldd	r25, Z+11	; 0x0b
    a35c:	0e 94 33 5c 	call	0xb866	; 0xb866 <__fixunssfsi>
    a360:	6a 87       	std	Y+10, r22	; 0x0a
    a362:	7b 87       	std	Y+11, r23	; 0x0b
    a364:	8c 87       	std	Y+12, r24	; 0x0c
    a366:	9d 87       	std	Y+13, r25	; 0x0d
    a368:	ee 85       	ldd	r30, Y+14	; 0x0e
    a36a:	ff 85       	ldd	r31, Y+15	; 0x0f
    a36c:	64 81       	ldd	r22, Z+4	; 0x04
    a36e:	75 81       	ldd	r23, Z+5	; 0x05
    a370:	86 81       	ldd	r24, Z+6	; 0x06
    a372:	97 81       	ldd	r25, Z+7	; 0x07
    a374:	0e 94 33 5c 	call	0xb866	; 0xb866 <__fixunssfsi>
    a378:	dc 01       	movw	r26, r24
    a37a:	cb 01       	movw	r24, r22
    a37c:	ea 80       	ldd	r14, Y+2	; 0x02
    a37e:	fb 80       	ldd	r15, Y+3	; 0x03
    a380:	0e 81       	ldd	r16, Y+6	; 0x06
    a382:	1f 81       	ldd	r17, Y+7	; 0x07
    a384:	28 e0       	ldi	r18, 0x08	; 8
    a386:	48 e0       	ldi	r20, 0x08	; 8
    a388:	6a 85       	ldd	r22, Y+10	; 0x0a
    a38a:	7b 85       	ldd	r23, Y+11	; 0x0b
    a38c:	0e 94 43 47 	call	0x8e86	; 0x8e86 <LBCollides>
			else
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
				{
					if (game.enemies[j].active &&
    a390:	88 23       	and	r24, r24
    a392:	09 f4       	brne	.+2      	; 0xa396 <animate_shot+0x250>
    a394:	3e c0       	rjmp	.+124    	; 0xa412 <animate_shot+0x2cc>
					    LBCollides(game.player.shot[i].shared.x,game.player.shot[i].shared.y, 8, 8,
							game.enemies[j].shared.x, game.enemies[j].shared.y, game.enemies[j].width*8, game.enemies[j].height*8
						)
					)
					{
						SFX_HIT;
    a396:	41 e0       	ldi	r20, 0x01	; 1
    a398:	6f ef       	ldi	r22, 0xFF	; 255
    a39a:	84 e0       	ldi	r24, 0x04	; 4
    a39c:	0e 94 d7 3a 	call	0x75ae	; 0x75ae <TriggerFx>
						game.enemies[j].shield -= game.player.shot[i].hit_count;
    a3a0:	f1 01       	movw	r30, r2
    a3a2:	80 81       	ld	r24, Z
    a3a4:	f2 01       	movw	r30, r4
    a3a6:	90 81       	ld	r25, Z
    a3a8:	89 1b       	sub	r24, r25
    a3aa:	f1 01       	movw	r30, r2
    a3ac:	80 83       	st	Z, r24
						if (game.enemies[j].shield <= 0)
    a3ae:	18 16       	cp	r1, r24
    a3b0:	14 f1       	brlt	.+68     	; 0xa3f6 <animate_shot+0x2b0>
						{
							SFX_ENEMY_EXPLODE;
    a3b2:	41 e0       	ldi	r20, 0x01	; 1
    a3b4:	6f ef       	ldi	r22, 0xFF	; 255
    a3b6:	86 e0       	ldi	r24, 0x06	; 6
    a3b8:	0e 94 d7 3a 	call	0x75ae	; 0x75ae <TriggerFx>
							game.enemies[j].flags = EXPLODING;
    a3bc:	f2 e4       	ldi	r31, 0x42	; 66
    a3be:	f6 9d       	mul	r31, r6
    a3c0:	c0 01       	movw	r24, r0
    a3c2:	f7 9d       	mul	r31, r7
    a3c4:	90 0d       	add	r25, r0
    a3c6:	11 24       	eor	r1, r1
    a3c8:	8f 56       	subi	r24, 0x6F	; 111
    a3ca:	92 4f       	sbci	r25, 0xF2	; 242
    a3cc:	fc 01       	movw	r30, r24
    a3ce:	ea 54       	subi	r30, 0x4A	; 74
    a3d0:	ff 4f       	sbci	r31, 0xFF	; 255
    a3d2:	b0 82       	st	Z, r11
							game.enemies[j].active = 0;
    a3d4:	31 97       	sbiw	r30, 0x01	; 1
    a3d6:	10 82       	st	Z, r1
							game.active_enemies--;
    a3d8:	80 91 a9 0d 	lds	r24, 0x0DA9
    a3dc:	81 50       	subi	r24, 0x01	; 1
    a3de:	80 93 a9 0d 	sts	0x0DA9, r24
							game.score += KILL_SCORE;
    a3e2:	80 91 99 0d 	lds	r24, 0x0D99
    a3e6:	90 91 9a 0d 	lds	r25, 0x0D9A
    a3ea:	0a 96       	adiw	r24, 0x0a	; 10
    a3ec:	90 93 9a 0d 	sts	0x0D9A, r25
    a3f0:	80 93 99 0d 	sts	0x0D99, r24
							break;
    a3f4:	19 c0       	rjmp	.+50     	; 0xa428 <animate_shot+0x2e2>
						}
						game.player.shot[i].active = 0;
    a3f6:	f4 01       	movw	r30, r8
    a3f8:	10 82       	st	Z, r1
						game.player.active_shots--;
    a3fa:	80 91 ba 0d 	lds	r24, 0x0DBA
    a3fe:	81 50       	subi	r24, 0x01	; 1
    a400:	80 93 ba 0d 	sts	0x0DBA, r24
						LBMoveSprite(PLAYER_SHOT_SLOT+i, OFF_SCREEN, 0, 1, 1);
    a404:	01 e0       	ldi	r16, 0x01	; 1
    a406:	21 e0       	ldi	r18, 0x01	; 1
    a408:	40 e0       	ldi	r20, 0x00	; 0
    a40a:	60 ee       	ldi	r22, 0xE0	; 224
    a40c:	89 81       	ldd	r24, Y+1	; 0x01
    a40e:	0e 94 ca 47 	call	0x8f94	; 0x8f94 <LBMoveSprite>
    a412:	ff ef       	ldi	r31, 0xFF	; 255
    a414:	6f 1a       	sub	r6, r31
    a416:	7f 0a       	sbc	r7, r31
    a418:	22 e4       	ldi	r18, 0x42	; 66
    a41a:	22 0e       	add	r2, r18
    a41c:	31 1c       	adc	r3, r1
				LBMoveSprite(PLAYER_SHOT_SLOT+i, OFF_SCREEN, 0, 1, 1);
			}
			else
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
    a41e:	85 e0       	ldi	r24, 0x05	; 5
    a420:	68 16       	cp	r6, r24
    a422:	71 04       	cpc	r7, r1
    a424:	09 f0       	breq	.+2      	; 0xa428 <animate_shot+0x2e2>
    a426:	6d cf       	rjmp	.-294    	; 0xa302 <animate_shot+0x1bc>
    a428:	9a e1       	ldi	r25, 0x1A	; 26
    a42a:	89 0e       	add	r8, r25
    a42c:	91 1c       	adc	r9, r1
    a42e:	e9 81       	ldd	r30, Y+1	; 0x01
    a430:	ef 5f       	subi	r30, 0xFF	; 255
    a432:	e9 83       	std	Y+1, r30	; 0x01
    a434:	8e 85       	ldd	r24, Y+14	; 0x0e
    a436:	9f 85       	ldd	r25, Y+15	; 0x0f
    a438:	4a 96       	adiw	r24, 0x1a	; 26
    a43a:	9f 87       	std	Y+15, r25	; 0x0f
    a43c:	8e 87       	std	Y+14, r24	; 0x0e

void animate_shot()
{
	// Animate shots
	u8 slot = ENEMY_SLOT;
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
    a43e:	ee 30       	cpi	r30, 0x0E	; 14
    a440:	09 f0       	breq	.+2      	; 0xa444 <animate_shot+0x2fe>
    a442:	a7 ce       	rjmp	.-690    	; 0xa192 <animate_shot+0x4c>
					slot += game.enemies[j].width*game.enemies[j].height;
				}
			}
		}
	}
}
    a444:	2f 96       	adiw	r28, 0x0f	; 15
    a446:	0f b6       	in	r0, 0x3f	; 63
    a448:	f8 94       	cli
    a44a:	de bf       	out	0x3e, r29	; 62
    a44c:	0f be       	out	0x3f, r0	; 63
    a44e:	cd bf       	out	0x3d, r28	; 61
    a450:	df 91       	pop	r29
    a452:	cf 91       	pop	r28
    a454:	1f 91       	pop	r17
    a456:	0f 91       	pop	r16
    a458:	ff 90       	pop	r15
    a45a:	ef 90       	pop	r14
    a45c:	df 90       	pop	r13
    a45e:	cf 90       	pop	r12
    a460:	bf 90       	pop	r11
    a462:	af 90       	pop	r10
    a464:	9f 90       	pop	r9
    a466:	8f 90       	pop	r8
    a468:	7f 90       	pop	r7
    a46a:	6f 90       	pop	r6
    a46c:	5f 90       	pop	r5
    a46e:	4f 90       	pop	r4
    a470:	3f 90       	pop	r3
    a472:	2f 90       	pop	r2
    a474:	08 95       	ret

0000a476 <map_explosion>:
	}
	return result;
}

u8 map_explosion(u8* flags, Animation* anim, u8 slot, u8 width, u8 height)
{
    a476:	7f 92       	push	r7
    a478:	8f 92       	push	r8
    a47a:	9f 92       	push	r9
    a47c:	af 92       	push	r10
    a47e:	bf 92       	push	r11
    a480:	cf 92       	push	r12
    a482:	df 92       	push	r13
    a484:	ef 92       	push	r14
    a486:	ff 92       	push	r15
    a488:	0f 93       	push	r16
    a48a:	1f 93       	push	r17
    a48c:	cf 93       	push	r28
    a48e:	df 93       	push	r29
    a490:	1f 92       	push	r1
    a492:	cd b7       	in	r28, 0x3d	; 61
    a494:	de b7       	in	r29, 0x3e	; 62
    a496:	6c 01       	movw	r12, r24
    a498:	7b 01       	movw	r14, r22
    a49a:	74 2e       	mov	r7, r20
	char* frame;
	frame = LBGetNextFrame(anim);
    a49c:	cb 01       	movw	r24, r22
    a49e:	29 83       	std	Y+1, r18	; 0x01
    a4a0:	0e 94 46 46 	call	0x8c8c	; 0x8c8c <LBGetNextFrame>
    a4a4:	4c 01       	movw	r8, r24
	for (u8 i = 0; i < width*height; i++)
    a4a6:	29 81       	ldd	r18, Y+1	; 0x01
    a4a8:	20 9f       	mul	r18, r16
    a4aa:	50 01       	movw	r10, r0
    a4ac:	11 24       	eor	r1, r1
    a4ae:	10 e0       	ldi	r17, 0x00	; 0
    a4b0:	81 2f       	mov	r24, r17
    a4b2:	90 e0       	ldi	r25, 0x00	; 0
    a4b4:	8a 15       	cp	r24, r10
    a4b6:	9b 05       	cpc	r25, r11
    a4b8:	54 f4       	brge	.+20     	; 0xa4ce <map_explosion+0x58>
	{
		LBMapSprite(slot+i, frame, 0);
    a4ba:	40 e0       	ldi	r20, 0x00	; 0
    a4bc:	b4 01       	movw	r22, r8
    a4be:	81 2f       	mov	r24, r17
    a4c0:	87 0d       	add	r24, r7
    a4c2:	29 83       	std	Y+1, r18	; 0x01
    a4c4:	0e 94 78 47 	call	0x8ef0	; 0x8ef0 <LBMapSprite>

u8 map_explosion(u8* flags, Animation* anim, u8 slot, u8 width, u8 height)
{
	char* frame;
	frame = LBGetNextFrame(anim);
	for (u8 i = 0; i < width*height; i++)
    a4c8:	1f 5f       	subi	r17, 0xFF	; 255
    a4ca:	29 81       	ldd	r18, Y+1	; 0x01
    a4cc:	f1 cf       	rjmp	.-30     	; 0xa4b0 <map_explosion+0x3a>
	{
		LBMapSprite(slot+i, frame, 0);
	}
	if (anim->looped)
    a4ce:	f7 01       	movw	r30, r14
    a4d0:	84 81       	ldd	r24, Z+4	; 0x04
    a4d2:	88 23       	and	r24, r24
    a4d4:	51 f0       	breq	.+20     	; 0xa4ea <map_explosion+0x74>
	{
		*flags ^= EXPLODING;
    a4d6:	f6 01       	movw	r30, r12
    a4d8:	80 81       	ld	r24, Z
    a4da:	90 e1       	ldi	r25, 0x10	; 16
    a4dc:	98 27       	eor	r25, r24
    a4de:	90 83       	st	Z, r25
		LBMoveSprite(slot, OFF_SCREEN, 0, width, height);
    a4e0:	40 e0       	ldi	r20, 0x00	; 0
    a4e2:	60 ee       	ldi	r22, 0xE0	; 224
    a4e4:	87 2d       	mov	r24, r7
    a4e6:	0e 94 ca 47 	call	0x8f94	; 0x8f94 <LBMoveSprite>
	}
	return anim->looped;
}
    a4ea:	f7 01       	movw	r30, r14
    a4ec:	84 81       	ldd	r24, Z+4	; 0x04
    a4ee:	0f 90       	pop	r0
    a4f0:	df 91       	pop	r29
    a4f2:	cf 91       	pop	r28
    a4f4:	1f 91       	pop	r17
    a4f6:	0f 91       	pop	r16
    a4f8:	ff 90       	pop	r15
    a4fa:	ef 90       	pop	r14
    a4fc:	df 90       	pop	r13
    a4fe:	cf 90       	pop	r12
    a500:	bf 90       	pop	r11
    a502:	af 90       	pop	r10
    a504:	9f 90       	pop	r9
    a506:	8f 90       	pop	r8
    a508:	7f 90       	pop	r7
    a50a:	08 95       	ret

0000a50c <animate_sprite>:

void animate_sprite(SpriteShared* s, u8 slot, u8 width, u8 height)
{
    a50c:	8f 92       	push	r8
    a50e:	9f 92       	push	r9
    a510:	af 92       	push	r10
    a512:	bf 92       	push	r11
    a514:	ff 92       	push	r15
    a516:	0f 93       	push	r16
    a518:	1f 93       	push	r17
    a51a:	cf 93       	push	r28
    a51c:	df 93       	push	r29
    a51e:	ec 01       	movw	r28, r24
    a520:	f6 2e       	mov	r15, r22
    a522:	14 2f       	mov	r17, r20
    a524:	02 2f       	mov	r16, r18
	s->vy = s->vy + s->gravity*FRAME_TIME;
    a526:	6e 85       	ldd	r22, Y+14	; 0x0e
    a528:	70 e0       	ldi	r23, 0x00	; 0
    a52a:	80 e0       	ldi	r24, 0x00	; 0
    a52c:	90 e0       	ldi	r25, 0x00	; 0
    a52e:	0e 94 61 5c 	call	0xb8c2	; 0xb8c2 <__floatsisf>
    a532:	29 e8       	ldi	r18, 0x89	; 137
    a534:	38 e8       	ldi	r19, 0x88	; 136
    a536:	48 e8       	ldi	r20, 0x88	; 136
    a538:	5c e3       	ldi	r21, 0x3C	; 60
    a53a:	0e 94 15 5d 	call	0xba2a	; 0xba2a <__mulsf3>
    a53e:	28 81       	ld	r18, Y
    a540:	39 81       	ldd	r19, Y+1	; 0x01
    a542:	4a 81       	ldd	r20, Y+2	; 0x02
    a544:	5b 81       	ldd	r21, Y+3	; 0x03
    a546:	0e 94 cb 5b 	call	0xb796	; 0xb796 <__addsf3>
    a54a:	4b 01       	movw	r8, r22
    a54c:	5c 01       	movw	r10, r24
	if (s->vy > MAX_SPEED) s->vy = MAX_SPEED;
    a54e:	20 e0       	ldi	r18, 0x00	; 0
    a550:	30 e0       	ldi	r19, 0x00	; 0
    a552:	40 ef       	ldi	r20, 0xF0	; 240
    a554:	52 e4       	ldi	r21, 0x42	; 66
    a556:	0e 94 11 5d 	call	0xba22	; 0xba22 <__gesf2>
    a55a:	18 16       	cp	r1, r24
    a55c:	2c f0       	brlt	.+10     	; 0xa568 <animate_sprite+0x5c>
	return anim->looped;
}

void animate_sprite(SpriteShared* s, u8 slot, u8 width, u8 height)
{
	s->vy = s->vy + s->gravity*FRAME_TIME;
    a55e:	88 82       	st	Y, r8
    a560:	99 82       	std	Y+1, r9	; 0x01
    a562:	aa 82       	std	Y+2, r10	; 0x02
    a564:	bb 82       	std	Y+3, r11	; 0x03
    a566:	08 c0       	rjmp	.+16     	; 0xa578 <animate_sprite+0x6c>
	if (s->vy > MAX_SPEED) s->vy = MAX_SPEED;
    a568:	80 e0       	ldi	r24, 0x00	; 0
    a56a:	90 e0       	ldi	r25, 0x00	; 0
    a56c:	a0 ef       	ldi	r26, 0xF0	; 240
    a56e:	b2 e4       	ldi	r27, 0x42	; 66
    a570:	88 83       	st	Y, r24
    a572:	99 83       	std	Y+1, r25	; 0x01
    a574:	aa 83       	std	Y+2, r26	; 0x02
    a576:	bb 83       	std	Y+3, r27	; 0x03
	s->x += s->vx*FRAME_TIME;
    a578:	6c 85       	ldd	r22, Y+12	; 0x0c
    a57a:	7d 85       	ldd	r23, Y+13	; 0x0d
    a57c:	88 27       	eor	r24, r24
    a57e:	77 fd       	sbrc	r23, 7
    a580:	80 95       	com	r24
    a582:	98 2f       	mov	r25, r24
    a584:	0e 94 61 5c 	call	0xb8c2	; 0xb8c2 <__floatsisf>
    a588:	29 e8       	ldi	r18, 0x89	; 137
    a58a:	38 e8       	ldi	r19, 0x88	; 136
    a58c:	48 e8       	ldi	r20, 0x88	; 136
    a58e:	5c e3       	ldi	r21, 0x3C	; 60
    a590:	0e 94 15 5d 	call	0xba2a	; 0xba2a <__mulsf3>
    a594:	9b 01       	movw	r18, r22
    a596:	ac 01       	movw	r20, r24
    a598:	6c 81       	ldd	r22, Y+4	; 0x04
    a59a:	7d 81       	ldd	r23, Y+5	; 0x05
    a59c:	8e 81       	ldd	r24, Y+6	; 0x06
    a59e:	9f 81       	ldd	r25, Y+7	; 0x07
    a5a0:	0e 94 cb 5b 	call	0xb796	; 0xb796 <__addsf3>
    a5a4:	6c 83       	std	Y+4, r22	; 0x04
    a5a6:	7d 83       	std	Y+5, r23	; 0x05
    a5a8:	8e 83       	std	Y+6, r24	; 0x06
    a5aa:	9f 83       	std	Y+7, r25	; 0x07
	s->y += s->vy*FRAME_TIME;
    a5ac:	29 e8       	ldi	r18, 0x89	; 137
    a5ae:	38 e8       	ldi	r19, 0x88	; 136
    a5b0:	48 e8       	ldi	r20, 0x88	; 136
    a5b2:	5c e3       	ldi	r21, 0x3C	; 60
    a5b4:	68 81       	ld	r22, Y
    a5b6:	79 81       	ldd	r23, Y+1	; 0x01
    a5b8:	8a 81       	ldd	r24, Y+2	; 0x02
    a5ba:	9b 81       	ldd	r25, Y+3	; 0x03
    a5bc:	0e 94 15 5d 	call	0xba2a	; 0xba2a <__mulsf3>
    a5c0:	9b 01       	movw	r18, r22
    a5c2:	ac 01       	movw	r20, r24
    a5c4:	68 85       	ldd	r22, Y+8	; 0x08
    a5c6:	79 85       	ldd	r23, Y+9	; 0x09
    a5c8:	8a 85       	ldd	r24, Y+10	; 0x0a
    a5ca:	9b 85       	ldd	r25, Y+11	; 0x0b
    a5cc:	0e 94 cb 5b 	call	0xb796	; 0xb796 <__addsf3>
    a5d0:	68 87       	std	Y+8, r22	; 0x08
    a5d2:	79 87       	std	Y+9, r23	; 0x09
    a5d4:	8a 87       	std	Y+10, r24	; 0x0a
    a5d6:	9b 87       	std	Y+11, r25	; 0x0b
	collision_detect_level(s, width, height);
    a5d8:	40 2f       	mov	r20, r16
    a5da:	61 2f       	mov	r22, r17
    a5dc:	ce 01       	movw	r24, r28
    a5de:	0e 94 6d 4d 	call	0x9ada	; 0x9ada <collision_detect_level>
	LBMoveSprite(slot, s->x - game.camera_x, s->y - game.camera_y, width, height);
    a5e2:	e0 91 97 0d 	lds	r30, 0x0D97
    a5e6:	f0 91 98 0d 	lds	r31, 0x0D98
    a5ea:	bf 01       	movw	r22, r30
    a5ec:	80 e0       	ldi	r24, 0x00	; 0
    a5ee:	90 e0       	ldi	r25, 0x00	; 0
    a5f0:	0e 94 5f 5c 	call	0xb8be	; 0xb8be <__floatunsisf>
    a5f4:	9b 01       	movw	r18, r22
    a5f6:	ac 01       	movw	r20, r24
    a5f8:	68 85       	ldd	r22, Y+8	; 0x08
    a5fa:	79 85       	ldd	r23, Y+9	; 0x09
    a5fc:	8a 85       	ldd	r24, Y+10	; 0x0a
    a5fe:	9b 85       	ldd	r25, Y+11	; 0x0b
    a600:	0e 94 ca 5b 	call	0xb794	; 0xb794 <__subsf3>
    a604:	0e 94 33 5c 	call	0xb866	; 0xb866 <__fixunssfsi>
    a608:	b6 2e       	mov	r11, r22
    a60a:	e0 91 95 0d 	lds	r30, 0x0D95
    a60e:	f0 91 96 0d 	lds	r31, 0x0D96
    a612:	bf 01       	movw	r22, r30
    a614:	80 e0       	ldi	r24, 0x00	; 0
    a616:	90 e0       	ldi	r25, 0x00	; 0
    a618:	0e 94 5f 5c 	call	0xb8be	; 0xb8be <__floatunsisf>
    a61c:	9b 01       	movw	r18, r22
    a61e:	ac 01       	movw	r20, r24
    a620:	6c 81       	ldd	r22, Y+4	; 0x04
    a622:	7d 81       	ldd	r23, Y+5	; 0x05
    a624:	8e 81       	ldd	r24, Y+6	; 0x06
    a626:	9f 81       	ldd	r25, Y+7	; 0x07
    a628:	0e 94 ca 5b 	call	0xb794	; 0xb794 <__subsf3>
    a62c:	0e 94 33 5c 	call	0xb866	; 0xb866 <__fixunssfsi>
    a630:	21 2f       	mov	r18, r17
    a632:	4b 2d       	mov	r20, r11
    a634:	8f 2d       	mov	r24, r15
    a636:	0e 94 ca 47 	call	0x8f94	; 0x8f94 <LBMoveSprite>
}
    a63a:	df 91       	pop	r29
    a63c:	cf 91       	pop	r28
    a63e:	1f 91       	pop	r17
    a640:	0f 91       	pop	r16
    a642:	ff 90       	pop	r15
    a644:	bf 90       	pop	r11
    a646:	af 90       	pop	r10
    a648:	9f 90       	pop	r9
    a64a:	8f 90       	pop	r8
    a64c:	08 95       	ret

0000a64e <animate_player>:

void animate_player()
{
    a64e:	0f 93       	push	r16
    a650:	cf 93       	push	r28
	if (game.player.flags & EXPLODING)
    a652:	80 91 bb 0d 	lds	r24, 0x0DBB
    a656:	84 ff       	sbrs	r24, 4
    a658:	38 c0       	rjmp	.+112    	; 0xa6ca <animate_player+0x7c>
	{
		LBMoveSprite(PLAYER_SLOT, game.player.shared.x - game.camera_x, game.player.shared.y - game.camera_y, game.player.width, game.player.height);
    a65a:	60 91 97 0d 	lds	r22, 0x0D97
    a65e:	70 91 98 0d 	lds	r23, 0x0D98
    a662:	80 e0       	ldi	r24, 0x00	; 0
    a664:	90 e0       	ldi	r25, 0x00	; 0
    a666:	0e 94 5f 5c 	call	0xb8be	; 0xb8be <__floatunsisf>
    a66a:	9b 01       	movw	r18, r22
    a66c:	ac 01       	movw	r20, r24
    a66e:	60 91 b3 0d 	lds	r22, 0x0DB3
    a672:	70 91 b4 0d 	lds	r23, 0x0DB4
    a676:	80 91 b5 0d 	lds	r24, 0x0DB5
    a67a:	90 91 b6 0d 	lds	r25, 0x0DB6
    a67e:	0e 94 ca 5b 	call	0xb794	; 0xb794 <__subsf3>
    a682:	0e 94 33 5c 	call	0xb866	; 0xb866 <__fixunssfsi>
    a686:	c6 2f       	mov	r28, r22
    a688:	60 91 95 0d 	lds	r22, 0x0D95
    a68c:	70 91 96 0d 	lds	r23, 0x0D96
    a690:	80 e0       	ldi	r24, 0x00	; 0
    a692:	90 e0       	ldi	r25, 0x00	; 0
    a694:	0e 94 5f 5c 	call	0xb8be	; 0xb8be <__floatunsisf>
    a698:	9b 01       	movw	r18, r22
    a69a:	ac 01       	movw	r20, r24
    a69c:	60 91 af 0d 	lds	r22, 0x0DAF
    a6a0:	70 91 b0 0d 	lds	r23, 0x0DB0
    a6a4:	80 91 b1 0d 	lds	r24, 0x0DB1
    a6a8:	90 91 b2 0d 	lds	r25, 0x0DB2
    a6ac:	0e 94 ca 5b 	call	0xb794	; 0xb794 <__subsf3>
    a6b0:	0e 94 33 5c 	call	0xb866	; 0xb866 <__fixunssfsi>
    a6b4:	00 91 bf 0d 	lds	r16, 0x0DBF
    a6b8:	20 91 be 0d 	lds	r18, 0x0DBE
    a6bc:	4c 2f       	mov	r20, r28
    a6be:	80 e0       	ldi	r24, 0x00	; 0
    a6c0:	0e 94 ca 47 	call	0x8f94	; 0x8f94 <LBMoveSprite>
	}
	else animate_sprite(&game.player.shared, PLAYER_SLOT, game.player.width, game.player.height);
}
    a6c4:	cf 91       	pop	r28
    a6c6:	0f 91       	pop	r16
    a6c8:	08 95       	ret
{
	if (game.player.flags & EXPLODING)
	{
		LBMoveSprite(PLAYER_SLOT, game.player.shared.x - game.camera_x, game.player.shared.y - game.camera_y, game.player.width, game.player.height);
	}
	else animate_sprite(&game.player.shared, PLAYER_SLOT, game.player.width, game.player.height);
    a6ca:	20 91 bf 0d 	lds	r18, 0x0DBF
    a6ce:	40 91 be 0d 	lds	r20, 0x0DBE
    a6d2:	60 e0       	ldi	r22, 0x00	; 0
    a6d4:	8b ea       	ldi	r24, 0xAB	; 171
    a6d6:	9d e0       	ldi	r25, 0x0D	; 13
}
    a6d8:	cf 91       	pop	r28
    a6da:	0f 91       	pop	r16
{
	if (game.player.flags & EXPLODING)
	{
		LBMoveSprite(PLAYER_SLOT, game.player.shared.x - game.camera_x, game.player.shared.y - game.camera_y, game.player.width, game.player.height);
	}
	else animate_sprite(&game.player.shared, PLAYER_SLOT, game.player.width, game.player.height);
    a6dc:	0c 94 86 52 	jmp	0xa50c	; 0xa50c <animate_sprite>

0000a6e0 <update_spider_enemy>:
}

void update_spider_enemy(Enemy* e, u8 slot)
{
    a6e0:	1f 93       	push	r17
    a6e2:	cf 93       	push	r28
    a6e4:	df 93       	push	r29
    a6e6:	ec 01       	movw	r28, r24
    a6e8:	16 2f       	mov	r17, r22
	if (e->flags & IDLE && e->frame_count == SPIDER_IDLE_FRAMES)
    a6ea:	98 89       	ldd	r25, Y+16	; 0x10
    a6ec:	89 2f       	mov	r24, r25
    a6ee:	88 70       	andi	r24, 0x08	; 8
    a6f0:	93 ff       	sbrs	r25, 3
    a6f2:	1e c0       	rjmp	.+60     	; 0xa730 <update_spider_enemy+0x50>
    a6f4:	2d 89       	ldd	r18, Y+21	; 0x15
    a6f6:	20 38       	cpi	r18, 0x80	; 128
    a6f8:	d9 f4       	brne	.+54     	; 0xa730 <update_spider_enemy+0x50>
	{
		e->flags = JUMPING;
    a6fa:	81 e0       	ldi	r24, 0x01	; 1
    a6fc:	88 8b       	std	Y+16, r24	; 0x10
		e->shared.vy = -SPIDER_JUMP_SPEED;
    a6fe:	80 e0       	ldi	r24, 0x00	; 0
    a700:	90 e0       	ldi	r25, 0x00	; 0
    a702:	a8 ec       	ldi	r26, 0xC8	; 200
    a704:	b2 ec       	ldi	r27, 0xC2	; 194
    a706:	88 83       	st	Y, r24
    a708:	99 83       	std	Y+1, r25	; 0x01
    a70a:	aa 83       	std	Y+2, r26	; 0x02
    a70c:	bb 83       	std	Y+3, r27	; 0x03
		e->shared.gravity = GRAVITY;
    a70e:	8f ef       	ldi	r24, 0xFF	; 255
    a710:	8e 87       	std	Y+14, r24	; 0x0e
		e->shared.vx = SPIDER_SIDE_SPEED;
    a712:	8c e3       	ldi	r24, 0x3C	; 60
    a714:	90 e0       	ldi	r25, 0x00	; 0
    a716:	9d 87       	std	Y+13, r25	; 0x0d
    a718:	8c 87       	std	Y+12, r24	; 0x0c
		if (e->direction == D_LEFT)
    a71a:	89 89       	ldd	r24, Y+17	; 0x11
    a71c:	81 11       	cpse	r24, r1
    a71e:	04 c0       	rjmp	.+8      	; 0xa728 <update_spider_enemy+0x48>
		{
			e->shared.vx = -SPIDER_SIDE_SPEED;
    a720:	84 ec       	ldi	r24, 0xC4	; 196
    a722:	9f ef       	ldi	r25, 0xFF	; 255
    a724:	9d 87       	std	Y+13, r25	; 0x0d
    a726:	8c 87       	std	Y+12, r24	; 0x0c
		}
		LBMapSprite(slot, map_enemy_spider_1, 0);
    a728:	40 e0       	ldi	r20, 0x00	; 0
    a72a:	6a ee       	ldi	r22, 0xEA	; 234
    a72c:	7b e2       	ldi	r23, 0x2B	; 43
    a72e:	1a c0       	rjmp	.+52     	; 0xa764 <update_spider_enemy+0x84>
	}
	else if (e->flags & JUMPING && e->shared.gravity == 0)
    a730:	90 ff       	sbrs	r25, 0
    a732:	10 c0       	rjmp	.+32     	; 0xa754 <update_spider_enemy+0x74>
    a734:	9e 85       	ldd	r25, Y+14	; 0x0e
    a736:	91 11       	cpse	r25, r1
    a738:	0d c0       	rjmp	.+26     	; 0xa754 <update_spider_enemy+0x74>
	{
		e->flags = IDLE;
    a73a:	88 e0       	ldi	r24, 0x08	; 8
    a73c:	88 8b       	std	Y+16, r24	; 0x10
		e->shared.vx = 0;
    a73e:	1d 86       	std	Y+13, r1	; 0x0d
    a740:	1c 86       	std	Y+12, r1	; 0x0c
		e->frame_count = 0;
    a742:	1d 8a       	std	Y+21, r1	; 0x15
		if (e->direction == D_LEFT)
    a744:	89 89       	ldd	r24, Y+17	; 0x11
    a746:	81 11       	cpse	r24, r1
    a748:	03 c0       	rjmp	.+6      	; 0xa750 <update_spider_enemy+0x70>
		{
			e->direction = D_RIGHT;
    a74a:	81 e0       	ldi	r24, 0x01	; 1
    a74c:	89 8b       	std	Y+17, r24	; 0x11
    a74e:	0d c0       	rjmp	.+26     	; 0xa76a <update_spider_enemy+0x8a>
		}
		else
		{
			e->direction = D_LEFT;
    a750:	19 8a       	std	Y+17, r1	; 0x11
    a752:	0b c0       	rjmp	.+22     	; 0xa76a <update_spider_enemy+0x8a>
		}
	}
	else if (e->flags & IDLE)
    a754:	88 23       	and	r24, r24
    a756:	49 f0       	breq	.+18     	; 0xa76a <update_spider_enemy+0x8a>
	{
		LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    a758:	ce 01       	movw	r24, r28
    a75a:	c2 96       	adiw	r24, 0x32	; 50
    a75c:	0e 94 46 46 	call	0x8c8c	; 0x8c8c <LBGetNextFrame>
    a760:	40 e0       	ldi	r20, 0x00	; 0
    a762:	bc 01       	movw	r22, r24
    a764:	81 2f       	mov	r24, r17
    a766:	0e 94 78 47 	call	0x8ef0	; 0x8ef0 <LBMapSprite>
	}
	e->frame_count++;
    a76a:	8d 89       	ldd	r24, Y+21	; 0x15
    a76c:	8f 5f       	subi	r24, 0xFF	; 255
    a76e:	8d 8b       	std	Y+21, r24	; 0x15
}
    a770:	df 91       	pop	r29
    a772:	cf 91       	pop	r28
    a774:	1f 91       	pop	r17
    a776:	08 95       	ret

0000a778 <update_basic_shot>:

void update_basic_shot(Shot* s, u8 slot)
{
    a778:	cf 93       	push	r28
    a77a:	c6 2f       	mov	r28, r22
	LBMapSprite(slot, LBGetNextFrame(&s->anim), 0);
    a77c:	42 96       	adiw	r24, 0x12	; 18
    a77e:	0e 94 46 46 	call	0x8c8c	; 0x8c8c <LBGetNextFrame>
    a782:	40 e0       	ldi	r20, 0x00	; 0
    a784:	bc 01       	movw	r22, r24
    a786:	8c 2f       	mov	r24, r28
}
    a788:	cf 91       	pop	r28
	e->frame_count++;
}

void update_basic_shot(Shot* s, u8 slot)
{
	LBMapSprite(slot, LBGetNextFrame(&s->anim), 0);
    a78a:	0c 94 78 47 	jmp	0x8ef0	; 0x8ef0 <LBMapSprite>

0000a78e <update_enemies>:
}

void update_enemies()
{
    a78e:	ef 92       	push	r14
    a790:	ff 92       	push	r15
    a792:	0f 93       	push	r16
    a794:	1f 93       	push	r17
    a796:	cf 93       	push	r28
    a798:	df 93       	push	r29
    a79a:	ca e4       	ldi	r28, 0x4A	; 74
    a79c:	de e0       	ldi	r29, 0x0E	; 14
	u8 slot = ENEMY_SLOT;
    a79e:	16 e0       	ldi	r17, 0x06	; 6
    a7a0:	ce 01       	movw	r24, r28
    a7a2:	03 97       	sbiw	r24, 0x03	; 3
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].flags & EXPLODING)
    a7a4:	fc 01       	movw	r30, r24
    a7a6:	20 81       	ld	r18, Z
    a7a8:	ae 01       	movw	r20, r28
    a7aa:	41 50       	subi	r20, 0x01	; 1
    a7ac:	51 09       	sbc	r21, r1
    a7ae:	7a 01       	movw	r14, r20
    a7b0:	24 ff       	sbrs	r18, 4
    a7b2:	0a c0       	rjmp	.+20     	; 0xa7c8 <update_enemies+0x3a>
		{
			map_explosion(&game.enemies[i].flags, &game.enemies[i].expl, slot, game.enemies[i].width, game.enemies[i].height);
    a7b4:	08 81       	ld	r16, Y
    a7b6:	fa 01       	movw	r30, r20
    a7b8:	20 81       	ld	r18, Z
    a7ba:	41 2f       	mov	r20, r17
    a7bc:	be 01       	movw	r22, r28
    a7be:	69 5d       	subi	r22, 0xD9	; 217
    a7c0:	7f 4f       	sbci	r23, 0xFF	; 255
    a7c2:	0e 94 3b 52 	call	0xa476	; 0xa476 <map_explosion>
    a7c6:	0d c0       	rjmp	.+26     	; 0xa7e2 <update_enemies+0x54>
    a7c8:	fe 01       	movw	r30, r28
    a7ca:	34 97       	sbiw	r30, 0x04	; 4
		}
		else if (game.enemies[i].active)
    a7cc:	80 81       	ld	r24, Z
    a7ce:	88 23       	and	r24, r24
    a7d0:	41 f0       	breq	.+16     	; 0xa7e2 <update_enemies+0x54>
		{
			switch (game.enemies[i].enemy_type)
    a7d2:	89 81       	ldd	r24, Y+1	; 0x01
    a7d4:	81 11       	cpse	r24, r1
    a7d6:	05 c0       	rjmp	.+10     	; 0xa7e2 <update_enemies+0x54>
			{
				case ENEMY_SPIDER: update_spider_enemy(&game.enemies[i], slot); break;
    a7d8:	61 2f       	mov	r22, r17
    a7da:	ce 01       	movw	r24, r28
    a7dc:	43 97       	sbiw	r24, 0x13	; 19
    a7de:	0e 94 70 53 	call	0xa6e0	; 0xa6e0 <update_spider_enemy>
			}
		}
		slot += game.enemies[i].width * game.enemies[i].height;
    a7e2:	f7 01       	movw	r30, r14
    a7e4:	90 81       	ld	r25, Z
    a7e6:	88 81       	ld	r24, Y
    a7e8:	98 9f       	mul	r25, r24
    a7ea:	10 0d       	add	r17, r0
    a7ec:	11 24       	eor	r1, r1
    a7ee:	ce 5b       	subi	r28, 0xBE	; 190
    a7f0:	df 4f       	sbci	r29, 0xFF	; 255

void update_enemies()
{
	u8 slot = ENEMY_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    a7f2:	ff e0       	ldi	r31, 0x0F	; 15
    a7f4:	c4 39       	cpi	r28, 0x94	; 148
    a7f6:	df 07       	cpc	r29, r31
    a7f8:	99 f6       	brne	.-90     	; 0xa7a0 <update_enemies+0x12>
				case ENEMY_SPIDER: update_spider_enemy(&game.enemies[i], slot); break;
			}
		}
		slot += game.enemies[i].width * game.enemies[i].height;
	}
}
    a7fa:	df 91       	pop	r29
    a7fc:	cf 91       	pop	r28
    a7fe:	1f 91       	pop	r17
    a800:	0f 91       	pop	r16
    a802:	ff 90       	pop	r15
    a804:	ef 90       	pop	r14
    a806:	08 95       	ret

0000a808 <update_enemy_shots>:

void update_enemy_shots()
{
    a808:	8f 92       	push	r8
    a80a:	9f 92       	push	r9
    a80c:	af 92       	push	r10
    a80e:	bf 92       	push	r11
    a810:	cf 92       	push	r12
    a812:	df 92       	push	r13
    a814:	ef 92       	push	r14
    a816:	ff 92       	push	r15
    a818:	0f 93       	push	r16
    a81a:	1f 93       	push	r17
    a81c:	cf 93       	push	r28
    a81e:	df 93       	push	r29
    a820:	00 d0       	rcall	.+0      	; 0xa822 <update_enemy_shots+0x1a>
    a822:	00 d0       	rcall	.+0      	; 0xa824 <update_enemy_shots+0x1c>
    a824:	cd b7       	in	r28, 0x3d	; 61
    a826:	de b7       	in	r29, 0x3e	; 62
    a828:	2d e4       	ldi	r18, 0x4D	; 77
    a82a:	82 2e       	mov	r8, r18
    a82c:	2e e0       	ldi	r18, 0x0E	; 14
    a82e:	92 2e       	mov	r9, r18
    a830:	00 e6       	ldi	r16, 0x60	; 96
    a832:	1e e0       	ldi	r17, 0x0E	; 14
    a834:	3f e0       	ldi	r19, 0x0F	; 15
    a836:	b3 2e       	mov	r11, r19
					if (!game.enemies[i].shot[j].active)
					{
						game.enemies[i].shot[j].active = 1;
						game.enemies[i].shot[j].shared.x = game.enemies[i].shared.x;
						game.enemies[i].shot[j].shared.y = ((u16 ) game.enemies[i].shared.y / 8) * 8;
						game.enemies[i].shot[j].shared.vx = ENEMY_SHOT_SPEED;
    a838:	44 e6       	ldi	r20, 0x64	; 100
    a83a:	e4 2e       	mov	r14, r20
    a83c:	f1 2c       	mov	r15, r1
						if (game.player.shared.x <= game.enemies[i].shared.x)
						{
							game.enemies[i].shot[j].shared.vx = -ENEMY_SHOT_SPEED;
    a83e:	5c e9       	ldi	r21, 0x9C	; 156
    a840:	c5 2e       	mov	r12, r21
    a842:	dd 24       	eor	r13, r13
    a844:	da 94       	dec	r13
    a846:	aa 24       	eor	r10, r10
    a848:	aa 94       	dec	r10
    a84a:	ab 0c       	add	r10, r11
    a84c:	f4 01       	movw	r30, r8
    a84e:	37 97       	sbiw	r30, 0x07	; 7
{
	u8 slot = ENEMY_SHOT_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].active && game.enemies[i].shot_frame_count >= ENEMY_SHOT_DELAY_FRAMES)
    a850:	80 81       	ld	r24, Z
    a852:	88 23       	and	r24, r24
    a854:	09 f4       	brne	.+2      	; 0xa858 <update_enemy_shots+0x50>
    a856:	58 c0       	rjmp	.+176    	; 0xa908 <update_enemy_shots+0x100>
    a858:	f4 01       	movw	r30, r8
    a85a:	80 81       	ld	r24, Z
    a85c:	8c 33       	cpi	r24, 0x3C	; 60
    a85e:	08 f4       	brcc	.+2      	; 0xa862 <update_enemy_shots+0x5a>
    a860:	50 c0       	rjmp	.+160    	; 0xa902 <update_enemy_shots+0xfa>
		{
			game.enemies[i].shot_frame_count = 0;	
    a862:	10 82       	st	Z, r1
    a864:	f8 01       	movw	r30, r16
    a866:	32 97       	sbiw	r30, 0x02	; 2
			for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
			{
				if (game.enemies[i].shot[j].shot_type == BASIC_ENEMY_SHOT)
    a868:	80 81       	ld	r24, Z
    a86a:	81 30       	cpi	r24, 0x01	; 1
    a86c:	09 f0       	breq	.+2      	; 0xa870 <update_enemy_shots+0x68>
    a86e:	4c c0       	rjmp	.+152    	; 0xa908 <update_enemy_shots+0x100>
				{
					if (!game.enemies[i].shot[j].active)
    a870:	f8 01       	movw	r30, r16
    a872:	90 81       	ld	r25, Z
    a874:	91 11       	cpse	r25, r1
    a876:	3f c0       	rjmp	.+126    	; 0xa8f6 <update_enemy_shots+0xee>
					{
						game.enemies[i].shot[j].active = 1;
    a878:	80 83       	st	Z, r24
    a87a:	f4 01       	movw	r30, r8
    a87c:	72 97       	sbiw	r30, 0x12	; 18
						game.enemies[i].shot[j].shared.x = game.enemies[i].shared.x;
    a87e:	20 81       	ld	r18, Z
    a880:	31 81       	ldd	r19, Z+1	; 0x01
    a882:	42 81       	ldd	r20, Z+2	; 0x02
    a884:	53 81       	ldd	r21, Z+3	; 0x03
    a886:	f4 01       	movw	r30, r8
    a888:	26 83       	std	Z+6, r18	; 0x06
    a88a:	37 83       	std	Z+7, r19	; 0x07
    a88c:	40 87       	std	Z+8, r20	; 0x08
    a88e:	51 87       	std	Z+9, r21	; 0x09
    a890:	3e 97       	sbiw	r30, 0x0e	; 14
						game.enemies[i].shot[j].shared.y = ((u16 ) game.enemies[i].shared.y / 8) * 8;
    a892:	60 81       	ld	r22, Z
    a894:	71 81       	ldd	r23, Z+1	; 0x01
    a896:	82 81       	ldd	r24, Z+2	; 0x02
    a898:	93 81       	ldd	r25, Z+3	; 0x03
    a89a:	29 83       	std	Y+1, r18	; 0x01
    a89c:	3a 83       	std	Y+2, r19	; 0x02
    a89e:	4b 83       	std	Y+3, r20	; 0x03
    a8a0:	5c 83       	std	Y+4, r21	; 0x04
    a8a2:	0e 94 33 5c 	call	0xb866	; 0xb866 <__fixunssfsi>
    a8a6:	83 e0       	ldi	r24, 0x03	; 3
    a8a8:	76 95       	lsr	r23
    a8aa:	67 95       	ror	r22
    a8ac:	8a 95       	dec	r24
    a8ae:	e1 f7       	brne	.-8      	; 0xa8a8 <update_enemy_shots+0xa0>
    a8b0:	93 e0       	ldi	r25, 0x03	; 3
    a8b2:	66 0f       	add	r22, r22
    a8b4:	77 1f       	adc	r23, r23
    a8b6:	9a 95       	dec	r25
    a8b8:	e1 f7       	brne	.-8      	; 0xa8b2 <update_enemy_shots+0xaa>
    a8ba:	80 e0       	ldi	r24, 0x00	; 0
    a8bc:	90 e0       	ldi	r25, 0x00	; 0
    a8be:	0e 94 5f 5c 	call	0xb8be	; 0xb8be <__floatunsisf>
    a8c2:	f4 01       	movw	r30, r8
    a8c4:	62 87       	std	Z+10, r22	; 0x0a
    a8c6:	73 87       	std	Z+11, r23	; 0x0b
    a8c8:	84 87       	std	Z+12, r24	; 0x0c
    a8ca:	95 87       	std	Z+13, r25	; 0x0d
						game.enemies[i].shot[j].shared.vx = ENEMY_SHOT_SPEED;
    a8cc:	f7 86       	std	Z+15, r15	; 0x0f
    a8ce:	e6 86       	std	Z+14, r14	; 0x0e
						if (game.player.shared.x <= game.enemies[i].shared.x)
    a8d0:	29 81       	ldd	r18, Y+1	; 0x01
    a8d2:	3a 81       	ldd	r19, Y+2	; 0x02
    a8d4:	4b 81       	ldd	r20, Y+3	; 0x03
    a8d6:	5c 81       	ldd	r21, Y+4	; 0x04
    a8d8:	60 91 af 0d 	lds	r22, 0x0DAF
    a8dc:	70 91 b0 0d 	lds	r23, 0x0DB0
    a8e0:	80 91 b1 0d 	lds	r24, 0x0DB1
    a8e4:	90 91 b2 0d 	lds	r25, 0x0DB2
    a8e8:	0e 94 2f 5c 	call	0xb85e	; 0xb85e <__cmpsf2>
    a8ec:	18 16       	cp	r1, r24
    a8ee:	1c f0       	brlt	.+6      	; 0xa8f6 <update_enemy_shots+0xee>
						{
							game.enemies[i].shot[j].shared.vx = -ENEMY_SHOT_SPEED;
    a8f0:	f4 01       	movw	r30, r8
    a8f2:	d7 86       	std	Z+15, r13	; 0x0f
    a8f4:	c6 86       	std	Z+14, r12	; 0x0e
						}
					}
					update_basic_shot(&game.enemies[i].shot[j], slot);
    a8f6:	6a 2d       	mov	r22, r10
    a8f8:	c4 01       	movw	r24, r8
    a8fa:	02 96       	adiw	r24, 0x02	; 2
    a8fc:	0e 94 bc 53 	call	0xa778	; 0xa778 <update_basic_shot>
    a900:	03 c0       	rjmp	.+6      	; 0xa908 <update_enemy_shots+0x100>
				slot += 1;
			}
		}
		else if (game.enemies[i].active)
		{
			game.enemies[i].shot_frame_count++;
    a902:	8f 5f       	subi	r24, 0xFF	; 255
    a904:	f4 01       	movw	r30, r8
    a906:	80 83       	st	Z, r24
    a908:	b3 94       	inc	r11
    a90a:	f2 e4       	ldi	r31, 0x42	; 66
    a90c:	8f 0e       	add	r8, r31
    a90e:	91 1c       	adc	r9, r1
    a910:	0e 5b       	subi	r16, 0xBE	; 190
    a912:	1f 4f       	sbci	r17, 0xFF	; 255

void update_enemy_shots()
{
	u8 slot = ENEMY_SHOT_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    a914:	84 e1       	ldi	r24, 0x14	; 20
    a916:	b8 12       	cpse	r11, r24
    a918:	96 cf       	rjmp	.-212    	; 0xa846 <update_enemy_shots+0x3e>
		else
		{
			slot += MAX_ENEMY_SHOTS;
		}
	}
}
    a91a:	0f 90       	pop	r0
    a91c:	0f 90       	pop	r0
    a91e:	0f 90       	pop	r0
    a920:	0f 90       	pop	r0
    a922:	df 91       	pop	r29
    a924:	cf 91       	pop	r28
    a926:	1f 91       	pop	r17
    a928:	0f 91       	pop	r16
    a92a:	ff 90       	pop	r15
    a92c:	ef 90       	pop	r14
    a92e:	df 90       	pop	r13
    a930:	cf 90       	pop	r12
    a932:	bf 90       	pop	r11
    a934:	af 90       	pop	r10
    a936:	9f 90       	pop	r9
    a938:	8f 90       	pop	r8
    a93a:	08 95       	ret

0000a93c <animate_enemies>:

void animate_enemies()
{
    a93c:	2f 92       	push	r2
    a93e:	3f 92       	push	r3
    a940:	4f 92       	push	r4
    a942:	5f 92       	push	r5
    a944:	6f 92       	push	r6
    a946:	7f 92       	push	r7
    a948:	8f 92       	push	r8
    a94a:	9f 92       	push	r9
    a94c:	af 92       	push	r10
    a94e:	bf 92       	push	r11
    a950:	cf 92       	push	r12
    a952:	df 92       	push	r13
    a954:	ef 92       	push	r14
    a956:	ff 92       	push	r15
    a958:	0f 93       	push	r16
    a95a:	1f 93       	push	r17
    a95c:	cf 93       	push	r28
    a95e:	df 93       	push	r29
    a960:	cd b7       	in	r28, 0x3d	; 61
    a962:	de b7       	in	r29, 0x3e	; 62
    a964:	2c 97       	sbiw	r28, 0x0c	; 12
    a966:	0f b6       	in	r0, 0x3f	; 63
    a968:	f8 94       	cli
    a96a:	de bf       	out	0x3e, r29	; 62
    a96c:	0f be       	out	0x3f, r0	; 63
    a96e:	cd bf       	out	0x3d, r28	; 61
    a970:	49 e4       	ldi	r20, 0x49	; 73
    a972:	24 2e       	mov	r2, r20
    a974:	4e e0       	ldi	r20, 0x0E	; 14
    a976:	34 2e       	mov	r3, r20
    a978:	8a e4       	ldi	r24, 0x4A	; 74
    a97a:	9e e0       	ldi	r25, 0x0E	; 14
    a97c:	9c 87       	std	Y+12, r25	; 0x0c
    a97e:	8b 87       	std	Y+11, r24	; 0x0b
    a980:	57 e3       	ldi	r21, 0x37	; 55
    a982:	85 2e       	mov	r8, r21
    a984:	5e e0       	ldi	r21, 0x0E	; 14
    a986:	95 2e       	mov	r9, r21
	u8 slot = ENEMY_SLOT;
    a988:	66 e0       	ldi	r22, 0x06	; 6
    a98a:	b6 2e       	mov	r11, r22
    a98c:	eb 85       	ldd	r30, Y+11	; 0x0b
    a98e:	fc 85       	ldd	r31, Y+12	; 0x0c
    a990:	34 97       	sbiw	r30, 0x04	; 4
    a992:	fa 83       	std	Y+2, r31	; 0x02
    a994:	e9 83       	std	Y+1, r30	; 0x01
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].active && !(game.enemies[i].flags & EXPLODING))
    a996:	80 81       	ld	r24, Z
    a998:	eb 85       	ldd	r30, Y+11	; 0x0b
    a99a:	fc 85       	ldd	r31, Y+12	; 0x0c
    a99c:	33 97       	sbiw	r30, 0x03	; 3
    a99e:	88 23       	and	r24, r24
    a9a0:	09 f4       	brne	.+2      	; 0xa9a4 <animate_enemies+0x68>
    a9a2:	a9 c0       	rjmp	.+338    	; 0xaaf6 <animate_enemies+0x1ba>
    a9a4:	80 81       	ld	r24, Z
    a9a6:	84 fd       	sbrc	r24, 4
    a9a8:	a6 c0       	rjmp	.+332    	; 0xaaf6 <animate_enemies+0x1ba>
		{
			if (game.enemies[i].shared.x < game.camera_x || game.enemies[i].shared.y < game.camera_y || game.enemies[i].shared.y > game.camera_y + CAMERA_HEIGHT*8)
    a9aa:	f4 01       	movw	r30, r8
    a9ac:	44 80       	ldd	r4, Z+4	; 0x04
    a9ae:	55 80       	ldd	r5, Z+5	; 0x05
    a9b0:	66 80       	ldd	r6, Z+6	; 0x06
    a9b2:	77 80       	ldd	r7, Z+7	; 0x07
    a9b4:	60 91 95 0d 	lds	r22, 0x0D95
    a9b8:	70 91 96 0d 	lds	r23, 0x0D96
    a9bc:	80 e0       	ldi	r24, 0x00	; 0
    a9be:	90 e0       	ldi	r25, 0x00	; 0
    a9c0:	0e 94 5f 5c 	call	0xb8be	; 0xb8be <__floatunsisf>
    a9c4:	9b 01       	movw	r18, r22
    a9c6:	ac 01       	movw	r20, r24
    a9c8:	c3 01       	movw	r24, r6
    a9ca:	b2 01       	movw	r22, r4
    a9cc:	0e 94 2f 5c 	call	0xb85e	; 0xb85e <__cmpsf2>
    a9d0:	87 fd       	sbrc	r24, 7
    a9d2:	25 c0       	rjmp	.+74     	; 0xaa1e <animate_enemies+0xe2>
    a9d4:	f4 01       	movw	r30, r8
    a9d6:	c0 84       	ldd	r12, Z+8	; 0x08
    a9d8:	d1 84       	ldd	r13, Z+9	; 0x09
    a9da:	e2 84       	ldd	r14, Z+10	; 0x0a
    a9dc:	f3 84       	ldd	r15, Z+11	; 0x0b
    a9de:	00 91 97 0d 	lds	r16, 0x0D97
    a9e2:	10 91 98 0d 	lds	r17, 0x0D98
    a9e6:	b8 01       	movw	r22, r16
    a9e8:	80 e0       	ldi	r24, 0x00	; 0
    a9ea:	90 e0       	ldi	r25, 0x00	; 0
    a9ec:	0e 94 5f 5c 	call	0xb8be	; 0xb8be <__floatunsisf>
    a9f0:	9b 01       	movw	r18, r22
    a9f2:	ac 01       	movw	r20, r24
    a9f4:	c7 01       	movw	r24, r14
    a9f6:	b6 01       	movw	r22, r12
    a9f8:	0e 94 2f 5c 	call	0xb85e	; 0xb85e <__cmpsf2>
    a9fc:	87 fd       	sbrc	r24, 7
    a9fe:	0f c0       	rjmp	.+30     	; 0xaa1e <animate_enemies+0xe2>
    aa00:	b8 01       	movw	r22, r16
    aa02:	60 53       	subi	r22, 0x30	; 48
    aa04:	7f 4f       	sbci	r23, 0xFF	; 255
    aa06:	80 e0       	ldi	r24, 0x00	; 0
    aa08:	90 e0       	ldi	r25, 0x00	; 0
    aa0a:	0e 94 5f 5c 	call	0xb8be	; 0xb8be <__floatunsisf>
    aa0e:	9b 01       	movw	r18, r22
    aa10:	ac 01       	movw	r20, r24
    aa12:	c7 01       	movw	r24, r14
    aa14:	b6 01       	movw	r22, r12
    aa16:	0e 94 11 5d 	call	0xba22	; 0xba22 <__gesf2>
    aa1a:	18 16       	cp	r1, r24
    aa1c:	84 f4       	brge	.+32     	; 0xaa3e <animate_enemies+0x102>
			{
				game.enemies[i].active = 0;
    aa1e:	e9 81       	ldd	r30, Y+1	; 0x01
    aa20:	fa 81       	ldd	r31, Y+2	; 0x02
    aa22:	10 82       	st	Z, r1
				game.active_enemies--;
    aa24:	80 91 a9 0d 	lds	r24, 0x0DA9
    aa28:	81 50       	subi	r24, 0x01	; 1
    aa2a:	80 93 a9 0d 	sts	0x0DA9, r24
				LBMoveSprite(slot, OFF_SCREEN, 0, game.enemies[i].width, game.enemies[i].height);
    aa2e:	eb 85       	ldd	r30, Y+11	; 0x0b
    aa30:	fc 85       	ldd	r31, Y+12	; 0x0c
    aa32:	00 81       	ld	r16, Z
    aa34:	f1 01       	movw	r30, r2
    aa36:	20 81       	ld	r18, Z
    aa38:	40 e0       	ldi	r20, 0x00	; 0
    aa3a:	60 ee       	ldi	r22, 0xE0	; 224
    aa3c:	8c c0       	rjmp	.+280    	; 0xab56 <animate_enemies+0x21a>
			}
			else if (LBCollides(game.player.shared.x,game.player.shared.y, game.player.width*8, game.player.height*8,
    aa3e:	c7 01       	movw	r24, r14
    aa40:	b6 01       	movw	r22, r12
    aa42:	0e 94 33 5c 	call	0xb866	; 0xb866 <__fixunssfsi>
    aa46:	69 83       	std	Y+1, r22	; 0x01
    aa48:	7a 83       	std	Y+2, r23	; 0x02
    aa4a:	8b 83       	std	Y+3, r24	; 0x03
    aa4c:	9c 83       	std	Y+4, r25	; 0x04
    aa4e:	c3 01       	movw	r24, r6
    aa50:	b2 01       	movw	r22, r4
    aa52:	0e 94 33 5c 	call	0xb866	; 0xb866 <__fixunssfsi>
    aa56:	6d 83       	std	Y+5, r22	; 0x05
    aa58:	7e 83       	std	Y+6, r23	; 0x06
    aa5a:	8f 83       	std	Y+7, r24	; 0x07
    aa5c:	98 87       	std	Y+8, r25	; 0x08
    aa5e:	20 91 bf 0d 	lds	r18, 0x0DBF
    aa62:	22 0f       	add	r18, r18
    aa64:	22 0f       	add	r18, r18
    aa66:	22 0f       	add	r18, r18
    aa68:	40 91 be 0d 	lds	r20, 0x0DBE
    aa6c:	44 0f       	add	r20, r20
    aa6e:	44 0f       	add	r20, r20
    aa70:	44 0f       	add	r20, r20
    aa72:	60 91 b3 0d 	lds	r22, 0x0DB3
    aa76:	70 91 b4 0d 	lds	r23, 0x0DB4
    aa7a:	80 91 b5 0d 	lds	r24, 0x0DB5
    aa7e:	90 91 b6 0d 	lds	r25, 0x0DB6
    aa82:	29 87       	std	Y+9, r18	; 0x09
    aa84:	4a 87       	std	Y+10, r20	; 0x0a
    aa86:	0e 94 33 5c 	call	0xb866	; 0xb866 <__fixunssfsi>
    aa8a:	2b 01       	movw	r4, r22
    aa8c:	3c 01       	movw	r6, r24
    aa8e:	60 91 af 0d 	lds	r22, 0x0DAF
    aa92:	70 91 b0 0d 	lds	r23, 0x0DB0
    aa96:	80 91 b1 0d 	lds	r24, 0x0DB1
    aa9a:	90 91 b2 0d 	lds	r25, 0x0DB2
    aa9e:	0e 94 33 5c 	call	0xb866	; 0xb866 <__fixunssfsi>
    aaa2:	dc 01       	movw	r26, r24
    aaa4:	cb 01       	movw	r24, r22
    aaa6:	28 e0       	ldi	r18, 0x08	; 8
    aaa8:	a2 2e       	mov	r10, r18
    aaaa:	38 e0       	ldi	r19, 0x08	; 8
    aaac:	c3 2e       	mov	r12, r19
    aaae:	e9 80       	ldd	r14, Y+1	; 0x01
    aab0:	fa 80       	ldd	r15, Y+2	; 0x02
    aab2:	0d 81       	ldd	r16, Y+5	; 0x05
    aab4:	1e 81       	ldd	r17, Y+6	; 0x06
    aab6:	29 85       	ldd	r18, Y+9	; 0x09
    aab8:	4a 85       	ldd	r20, Y+10	; 0x0a
    aaba:	b2 01       	movw	r22, r4
    aabc:	0e 94 43 47 	call	0x8e86	; 0x8e86 <LBCollides>
    aac0:	88 23       	and	r24, r24
    aac2:	79 f0       	breq	.+30     	; 0xaae2 <animate_enemies+0x1a6>
							game.enemies[i].shared.x, game.enemies[i].shared.y, 8, 8
						) && !(game.player.flags & EXPLODING)
    aac4:	80 91 bb 0d 	lds	r24, 0x0DBB
    aac8:	84 fd       	sbrc	r24, 4
    aaca:	0b c0       	rjmp	.+22     	; 0xaae2 <animate_enemies+0x1a6>
			)
			{
				SFX_PLAYER_EXPLODE;
    aacc:	41 e0       	ldi	r20, 0x01	; 1
    aace:	6f ef       	ldi	r22, 0xFF	; 255
    aad0:	85 e0       	ldi	r24, 0x05	; 5
    aad2:	0e 94 d7 3a 	call	0x75ae	; 0x75ae <TriggerFx>
				game.player.shield = 0;
    aad6:	10 92 c0 0d 	sts	0x0DC0, r1
				game.player.flags = EXPLODING;
    aada:	80 e1       	ldi	r24, 0x10	; 16
    aadc:	80 93 bb 0d 	sts	0x0DBB, r24
				return;
    aae0:	57 c0       	rjmp	.+174    	; 0xab90 <animate_enemies+0x254>
			}
			else
			{
				animate_sprite(&game.enemies[i].shared, slot, game.enemies[i].width, game.enemies[i].height);
    aae2:	eb 85       	ldd	r30, Y+11	; 0x0b
    aae4:	fc 85       	ldd	r31, Y+12	; 0x0c
    aae6:	20 81       	ld	r18, Z
    aae8:	f1 01       	movw	r30, r2
    aaea:	40 81       	ld	r20, Z
    aaec:	6b 2d       	mov	r22, r11
    aaee:	c4 01       	movw	r24, r8
    aaf0:	0e 94 86 52 	call	0xa50c	; 0xa50c <animate_sprite>
    aaf4:	33 c0       	rjmp	.+102    	; 0xab5c <animate_enemies+0x220>
			}
		}
		else if (game.enemies[i].flags & EXPLODING)
    aaf6:	80 81       	ld	r24, Z
    aaf8:	84 ff       	sbrs	r24, 4
    aafa:	30 c0       	rjmp	.+96     	; 0xab5c <animate_enemies+0x220>
		{
			LBMoveSprite(slot, game.enemies[i].shared.x - game.camera_x, game.enemies[i].shared.y - game.camera_y, game.enemies[i].width, game.enemies[i].height);
    aafc:	60 91 97 0d 	lds	r22, 0x0D97
    ab00:	70 91 98 0d 	lds	r23, 0x0D98
    ab04:	80 e0       	ldi	r24, 0x00	; 0
    ab06:	90 e0       	ldi	r25, 0x00	; 0
    ab08:	0e 94 5f 5c 	call	0xb8be	; 0xb8be <__floatunsisf>
    ab0c:	9b 01       	movw	r18, r22
    ab0e:	ac 01       	movw	r20, r24
    ab10:	f4 01       	movw	r30, r8
    ab12:	60 85       	ldd	r22, Z+8	; 0x08
    ab14:	71 85       	ldd	r23, Z+9	; 0x09
    ab16:	82 85       	ldd	r24, Z+10	; 0x0a
    ab18:	93 85       	ldd	r25, Z+11	; 0x0b
    ab1a:	0e 94 ca 5b 	call	0xb794	; 0xb794 <__subsf3>
    ab1e:	0e 94 33 5c 	call	0xb866	; 0xb866 <__fixunssfsi>
    ab22:	16 2f       	mov	r17, r22
    ab24:	60 91 95 0d 	lds	r22, 0x0D95
    ab28:	70 91 96 0d 	lds	r23, 0x0D96
    ab2c:	80 e0       	ldi	r24, 0x00	; 0
    ab2e:	90 e0       	ldi	r25, 0x00	; 0
    ab30:	0e 94 5f 5c 	call	0xb8be	; 0xb8be <__floatunsisf>
    ab34:	9b 01       	movw	r18, r22
    ab36:	ac 01       	movw	r20, r24
    ab38:	f4 01       	movw	r30, r8
    ab3a:	64 81       	ldd	r22, Z+4	; 0x04
    ab3c:	75 81       	ldd	r23, Z+5	; 0x05
    ab3e:	86 81       	ldd	r24, Z+6	; 0x06
    ab40:	97 81       	ldd	r25, Z+7	; 0x07
    ab42:	0e 94 ca 5b 	call	0xb794	; 0xb794 <__subsf3>
    ab46:	0e 94 33 5c 	call	0xb866	; 0xb866 <__fixunssfsi>
    ab4a:	eb 85       	ldd	r30, Y+11	; 0x0b
    ab4c:	fc 85       	ldd	r31, Y+12	; 0x0c
    ab4e:	00 81       	ld	r16, Z
    ab50:	f1 01       	movw	r30, r2
    ab52:	20 81       	ld	r18, Z
    ab54:	41 2f       	mov	r20, r17
    ab56:	8b 2d       	mov	r24, r11
    ab58:	0e 94 ca 47 	call	0x8f94	; 0x8f94 <LBMoveSprite>
		}
		slot +=  game.enemies[i].width * game.enemies[i].height;
    ab5c:	eb 85       	ldd	r30, Y+11	; 0x0b
    ab5e:	fc 85       	ldd	r31, Y+12	; 0x0c
    ab60:	90 81       	ld	r25, Z
    ab62:	f1 01       	movw	r30, r2
    ab64:	80 81       	ld	r24, Z
    ab66:	98 9f       	mul	r25, r24
    ab68:	b0 0c       	add	r11, r0
    ab6a:	11 24       	eor	r1, r1
    ab6c:	f2 e4       	ldi	r31, 0x42	; 66
    ab6e:	2f 0e       	add	r2, r31
    ab70:	31 1c       	adc	r3, r1
    ab72:	8b 85       	ldd	r24, Y+11	; 0x0b
    ab74:	9c 85       	ldd	r25, Y+12	; 0x0c
    ab76:	8e 5b       	subi	r24, 0xBE	; 190
    ab78:	9f 4f       	sbci	r25, 0xFF	; 255
    ab7a:	9c 87       	std	Y+12, r25	; 0x0c
    ab7c:	8b 87       	std	Y+11, r24	; 0x0b
    ab7e:	92 e4       	ldi	r25, 0x42	; 66
    ab80:	89 0e       	add	r8, r25
    ab82:	91 1c       	adc	r9, r1

void animate_enemies()
{
	u8 slot = ENEMY_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    ab84:	eb 85       	ldd	r30, Y+11	; 0x0b
    ab86:	fc 85       	ldd	r31, Y+12	; 0x0c
    ab88:	e4 59       	subi	r30, 0x94	; 148
    ab8a:	ff 40       	sbci	r31, 0x0F	; 15
    ab8c:	09 f0       	breq	.+2      	; 0xab90 <animate_enemies+0x254>
    ab8e:	fe ce       	rjmp	.-516    	; 0xa98c <animate_enemies+0x50>
		{
			LBMoveSprite(slot, game.enemies[i].shared.x - game.camera_x, game.enemies[i].shared.y - game.camera_y, game.enemies[i].width, game.enemies[i].height);
		}
		slot +=  game.enemies[i].width * game.enemies[i].height;
	}
}
    ab90:	2c 96       	adiw	r28, 0x0c	; 12
    ab92:	0f b6       	in	r0, 0x3f	; 63
    ab94:	f8 94       	cli
    ab96:	de bf       	out	0x3e, r29	; 62
    ab98:	0f be       	out	0x3f, r0	; 63
    ab9a:	cd bf       	out	0x3d, r28	; 61
    ab9c:	df 91       	pop	r29
    ab9e:	cf 91       	pop	r28
    aba0:	1f 91       	pop	r17
    aba2:	0f 91       	pop	r16
    aba4:	ff 90       	pop	r15
    aba6:	ef 90       	pop	r14
    aba8:	df 90       	pop	r13
    abaa:	cf 90       	pop	r12
    abac:	bf 90       	pop	r11
    abae:	af 90       	pop	r10
    abb0:	9f 90       	pop	r9
    abb2:	8f 90       	pop	r8
    abb4:	7f 90       	pop	r7
    abb6:	6f 90       	pop	r6
    abb8:	5f 90       	pop	r5
    abba:	4f 90       	pop	r4
    abbc:	3f 90       	pop	r3
    abbe:	2f 90       	pop	r2
    abc0:	08 95       	ret

0000abc2 <animate_enemy_shots>:

void animate_enemy_shots()
{
    abc2:	2f 92       	push	r2
    abc4:	3f 92       	push	r3
    abc6:	4f 92       	push	r4
    abc8:	5f 92       	push	r5
    abca:	6f 92       	push	r6
    abcc:	7f 92       	push	r7
    abce:	8f 92       	push	r8
    abd0:	9f 92       	push	r9
    abd2:	af 92       	push	r10
    abd4:	bf 92       	push	r11
    abd6:	cf 92       	push	r12
    abd8:	df 92       	push	r13
    abda:	ef 92       	push	r14
    abdc:	ff 92       	push	r15
    abde:	0f 93       	push	r16
    abe0:	1f 93       	push	r17
    abe2:	cf 93       	push	r28
    abe4:	df 93       	push	r29
    abe6:	cd b7       	in	r28, 0x3d	; 61
    abe8:	de b7       	in	r29, 0x3e	; 62
    abea:	62 97       	sbiw	r28, 0x12	; 18
    abec:	0f b6       	in	r0, 0x3f	; 63
    abee:	f8 94       	cli
    abf0:	de bf       	out	0x3e, r29	; 62
    abf2:	0f be       	out	0x3f, r0	; 63
    abf4:	cd bf       	out	0x3d, r28	; 61
    abf6:	40 e6       	ldi	r20, 0x60	; 96
    abf8:	24 2e       	mov	r2, r20
    abfa:	4e e0       	ldi	r20, 0x0E	; 14
    abfc:	34 2e       	mov	r3, r20
    abfe:	5f e4       	ldi	r21, 0x4F	; 79
    ac00:	85 2e       	mov	r8, r21
    ac02:	5e e0       	ldi	r21, 0x0E	; 14
    ac04:	95 2e       	mov	r9, r21
	u8 slot = ENEMY_SHOT_SLOT;
    ac06:	6e e0       	ldi	r22, 0x0E	; 14
    ac08:	b6 2e       	mov	r11, r22
    ac0a:	f1 01       	movw	r30, r2
    ac0c:	32 97       	sbiw	r30, 0x02	; 2
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
		{
			if (game.enemies[i].shot[j].shot_type == BASIC_ENEMY_SHOT)
    ac0e:	80 81       	ld	r24, Z
    ac10:	81 30       	cpi	r24, 0x01	; 1
    ac12:	09 f0       	breq	.+2      	; 0xac16 <animate_enemy_shots+0x54>
    ac14:	ee c0       	rjmp	.+476    	; 0xadf2 <animate_enemy_shots+0x230>
			{
				if (game.enemies[i].shot[j].active)
    ac16:	d1 01       	movw	r26, r2
    ac18:	8c 91       	ld	r24, X
    ac1a:	88 23       	and	r24, r24
    ac1c:	09 f4       	brne	.+2      	; 0xac20 <animate_enemy_shots+0x5e>
    ac1e:	e9 c0       	rjmp	.+466    	; 0xadf2 <animate_enemy_shots+0x230>
				{
					if (game.enemies[i].shot[j].shared.x < game.camera_x || game.enemies[i].shot[j].shared.x > game.camera_x + CAMERA_WIDTH*8 ||
    ac20:	f4 01       	movw	r30, r8
    ac22:	c4 80       	ldd	r12, Z+4	; 0x04
    ac24:	d5 80       	ldd	r13, Z+5	; 0x05
    ac26:	e6 80       	ldd	r14, Z+6	; 0x06
    ac28:	f7 80       	ldd	r15, Z+7	; 0x07
    ac2a:	60 90 95 0d 	lds	r6, 0x0D95
    ac2e:	70 90 96 0d 	lds	r7, 0x0D96
    ac32:	b3 01       	movw	r22, r6
    ac34:	80 e0       	ldi	r24, 0x00	; 0
    ac36:	90 e0       	ldi	r25, 0x00	; 0
    ac38:	0e 94 5f 5c 	call	0xb8be	; 0xb8be <__floatunsisf>
    ac3c:	9b 01       	movw	r18, r22
    ac3e:	ac 01       	movw	r20, r24
    ac40:	c7 01       	movw	r24, r14
    ac42:	b6 01       	movw	r22, r12
    ac44:	0e 94 2f 5c 	call	0xb85e	; 0xb85e <__cmpsf2>
    ac48:	87 ff       	sbrs	r24, 7
    ac4a:	03 c0       	rjmp	.+6      	; 0xac52 <animate_enemy_shots+0x90>
					   collision_detect_level(&game.enemies[i].shot[j].shared, 1, 1))
					{
						game.enemies[i].shot[j].active = 0;
    ac4c:	d1 01       	movw	r26, r2
    ac4e:	1c 92       	st	X, r1
    ac50:	84 c0       	rjmp	.+264    	; 0xad5a <animate_enemy_shots+0x198>
		{
			if (game.enemies[i].shot[j].shot_type == BASIC_ENEMY_SHOT)
			{
				if (game.enemies[i].shot[j].active)
				{
					if (game.enemies[i].shot[j].shared.x < game.camera_x || game.enemies[i].shot[j].shared.x > game.camera_x + CAMERA_WIDTH*8 ||
    ac52:	b3 01       	movw	r22, r6
    ac54:	60 52       	subi	r22, 0x20	; 32
    ac56:	7f 4f       	sbci	r23, 0xFF	; 255
    ac58:	80 e0       	ldi	r24, 0x00	; 0
    ac5a:	90 e0       	ldi	r25, 0x00	; 0
    ac5c:	0e 94 5f 5c 	call	0xb8be	; 0xb8be <__floatunsisf>
    ac60:	9b 01       	movw	r18, r22
    ac62:	ac 01       	movw	r20, r24
    ac64:	c7 01       	movw	r24, r14
    ac66:	b6 01       	movw	r22, r12
    ac68:	0e 94 11 5d 	call	0xba22	; 0xba22 <__gesf2>
    ac6c:	18 16       	cp	r1, r24
    ac6e:	74 f3       	brlt	.-36     	; 0xac4c <animate_enemy_shots+0x8a>
					   collision_detect_level(&game.enemies[i].shot[j].shared, 1, 1))
    ac70:	41 e0       	ldi	r20, 0x01	; 1
    ac72:	61 e0       	ldi	r22, 0x01	; 1
    ac74:	c4 01       	movw	r24, r8
    ac76:	0e 94 6d 4d 	call	0x9ada	; 0x9ada <collision_detect_level>
		{
			if (game.enemies[i].shot[j].shot_type == BASIC_ENEMY_SHOT)
			{
				if (game.enemies[i].shot[j].active)
				{
					if (game.enemies[i].shot[j].shared.x < game.camera_x || game.enemies[i].shot[j].shared.x > game.camera_x + CAMERA_WIDTH*8 ||
    ac7a:	81 11       	cpse	r24, r1
    ac7c:	e7 cf       	rjmp	.-50     	; 0xac4c <animate_enemy_shots+0x8a>
					{
						game.enemies[i].shot[j].active = 0;
						LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
					}
					else if (LBCollides(game.player.shared.x,game.player.shared.y, game.player.width*8, game.player.height*8,
							game.enemies[i].shot[j].shared.x, game.enemies[i].shot[j].shared.y, 8, 8
    ac7e:	f4 01       	movw	r30, r8
    ac80:	40 84       	ldd	r4, Z+8	; 0x08
    ac82:	51 84       	ldd	r5, Z+9	; 0x09
    ac84:	62 84       	ldd	r6, Z+10	; 0x0a
    ac86:	73 84       	ldd	r7, Z+11	; 0x0b
    ac88:	84 81       	ldd	r24, Z+4	; 0x04
    ac8a:	95 81       	ldd	r25, Z+5	; 0x05
    ac8c:	a6 81       	ldd	r26, Z+6	; 0x06
    ac8e:	b7 81       	ldd	r27, Z+7	; 0x07
    ac90:	89 83       	std	Y+1, r24	; 0x01
    ac92:	9a 83       	std	Y+2, r25	; 0x02
    ac94:	ab 83       	std	Y+3, r26	; 0x03
    ac96:	bc 83       	std	Y+4, r27	; 0x04
					   collision_detect_level(&game.enemies[i].shot[j].shared, 1, 1))
					{
						game.enemies[i].shot[j].active = 0;
						LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
					}
					else if (LBCollides(game.player.shared.x,game.player.shared.y, game.player.width*8, game.player.height*8,
    ac98:	c3 01       	movw	r24, r6
    ac9a:	b2 01       	movw	r22, r4
    ac9c:	0e 94 33 5c 	call	0xb866	; 0xb866 <__fixunssfsi>
    aca0:	6d 83       	std	Y+5, r22	; 0x05
    aca2:	7e 83       	std	Y+6, r23	; 0x06
    aca4:	8f 83       	std	Y+7, r24	; 0x07
    aca6:	98 87       	std	Y+8, r25	; 0x08
    aca8:	69 81       	ldd	r22, Y+1	; 0x01
    acaa:	7a 81       	ldd	r23, Y+2	; 0x02
    acac:	8b 81       	ldd	r24, Y+3	; 0x03
    acae:	9c 81       	ldd	r25, Y+4	; 0x04
    acb0:	0e 94 33 5c 	call	0xb866	; 0xb866 <__fixunssfsi>
    acb4:	69 87       	std	Y+9, r22	; 0x09
    acb6:	7a 87       	std	Y+10, r23	; 0x0a
    acb8:	8b 87       	std	Y+11, r24	; 0x0b
    acba:	9c 87       	std	Y+12, r25	; 0x0c
    acbc:	20 91 bf 0d 	lds	r18, 0x0DBF
    acc0:	22 0f       	add	r18, r18
    acc2:	22 0f       	add	r18, r18
    acc4:	22 0f       	add	r18, r18
    acc6:	40 91 be 0d 	lds	r20, 0x0DBE
    acca:	44 0f       	add	r20, r20
    accc:	44 0f       	add	r20, r20
    acce:	44 0f       	add	r20, r20
    acd0:	60 91 b3 0d 	lds	r22, 0x0DB3
    acd4:	70 91 b4 0d 	lds	r23, 0x0DB4
    acd8:	80 91 b5 0d 	lds	r24, 0x0DB5
    acdc:	90 91 b6 0d 	lds	r25, 0x0DB6
    ace0:	29 8b       	std	Y+17, r18	; 0x11
    ace2:	4a 8b       	std	Y+18, r20	; 0x12
    ace4:	0e 94 33 5c 	call	0xb866	; 0xb866 <__fixunssfsi>
    ace8:	6d 87       	std	Y+13, r22	; 0x0d
    acea:	7e 87       	std	Y+14, r23	; 0x0e
    acec:	8f 87       	std	Y+15, r24	; 0x0f
    acee:	98 8b       	std	Y+16, r25	; 0x10
    acf0:	60 91 af 0d 	lds	r22, 0x0DAF
    acf4:	70 91 b0 0d 	lds	r23, 0x0DB0
    acf8:	80 91 b1 0d 	lds	r24, 0x0DB1
    acfc:	90 91 b2 0d 	lds	r25, 0x0DB2
    ad00:	0e 94 33 5c 	call	0xb866	; 0xb866 <__fixunssfsi>
    ad04:	dc 01       	movw	r26, r24
    ad06:	cb 01       	movw	r24, r22
    ad08:	28 e0       	ldi	r18, 0x08	; 8
    ad0a:	a2 2e       	mov	r10, r18
    ad0c:	38 e0       	ldi	r19, 0x08	; 8
    ad0e:	c3 2e       	mov	r12, r19
    ad10:	ed 80       	ldd	r14, Y+5	; 0x05
    ad12:	fe 80       	ldd	r15, Y+6	; 0x06
    ad14:	09 85       	ldd	r16, Y+9	; 0x09
    ad16:	1a 85       	ldd	r17, Y+10	; 0x0a
    ad18:	29 89       	ldd	r18, Y+17	; 0x11
    ad1a:	4a 89       	ldd	r20, Y+18	; 0x12
    ad1c:	6d 85       	ldd	r22, Y+13	; 0x0d
    ad1e:	7e 85       	ldd	r23, Y+14	; 0x0e
    ad20:	0e 94 43 47 	call	0x8e86	; 0x8e86 <LBCollides>
    ad24:	88 23       	and	r24, r24
    ad26:	f1 f0       	breq	.+60     	; 0xad64 <animate_enemy_shots+0x1a2>
							game.enemies[i].shot[j].shared.x, game.enemies[i].shot[j].shared.y, 8, 8
						)
					)
					{
						SFX_HIT;
    ad28:	41 e0       	ldi	r20, 0x01	; 1
    ad2a:	6f ef       	ldi	r22, 0xFF	; 255
    ad2c:	84 e0       	ldi	r24, 0x04	; 4
    ad2e:	0e 94 d7 3a 	call	0x75ae	; 0x75ae <TriggerFx>
						game.player.shield -= game.enemies[i].shot[j].hit_count;
    ad32:	80 91 c0 0d 	lds	r24, 0x0DC0
    ad36:	f1 01       	movw	r30, r2
    ad38:	31 97       	sbiw	r30, 0x01	; 1
    ad3a:	90 81       	ld	r25, Z
    ad3c:	89 1b       	sub	r24, r25
    ad3e:	80 93 c0 0d 	sts	0x0DC0, r24
						if (game.player.shield <= 0)
    ad42:	18 16       	cp	r1, r24
    ad44:	44 f0       	brlt	.+16     	; 0xad56 <animate_enemy_shots+0x194>
						{
							SFX_PLAYER_EXPLODE;
    ad46:	41 e0       	ldi	r20, 0x01	; 1
    ad48:	6f ef       	ldi	r22, 0xFF	; 255
    ad4a:	85 e0       	ldi	r24, 0x05	; 5
    ad4c:	0e 94 d7 3a 	call	0x75ae	; 0x75ae <TriggerFx>
							game.player.flags = EXPLODING;
    ad50:	b0 e1       	ldi	r27, 0x10	; 16
    ad52:	b0 93 bb 0d 	sts	0x0DBB, r27
						}
						game.enemies[i].shot[j].active = 0;
    ad56:	f1 01       	movw	r30, r2
    ad58:	10 82       	st	Z, r1
						LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
    ad5a:	01 e0       	ldi	r16, 0x01	; 1
    ad5c:	21 e0       	ldi	r18, 0x01	; 1
    ad5e:	40 e0       	ldi	r20, 0x00	; 0
    ad60:	60 ee       	ldi	r22, 0xE0	; 224
    ad62:	44 c0       	rjmp	.+136    	; 0xadec <animate_enemy_shots+0x22a>
					}
					else
					{
						game.enemies[i].shot[j].shared.x += game.enemies[i].shot[j].shared.vx*FRAME_TIME;
    ad64:	d4 01       	movw	r26, r8
    ad66:	1c 96       	adiw	r26, 0x0c	; 12
    ad68:	6d 91       	ld	r22, X+
    ad6a:	7c 91       	ld	r23, X
    ad6c:	1d 97       	sbiw	r26, 0x0d	; 13
    ad6e:	88 27       	eor	r24, r24
    ad70:	77 fd       	sbrc	r23, 7
    ad72:	80 95       	com	r24
    ad74:	98 2f       	mov	r25, r24
    ad76:	0e 94 61 5c 	call	0xb8c2	; 0xb8c2 <__floatsisf>
    ad7a:	29 e8       	ldi	r18, 0x89	; 137
    ad7c:	38 e8       	ldi	r19, 0x88	; 136
    ad7e:	48 e8       	ldi	r20, 0x88	; 136
    ad80:	5c e3       	ldi	r21, 0x3C	; 60
    ad82:	0e 94 15 5d 	call	0xba2a	; 0xba2a <__mulsf3>
    ad86:	9b 01       	movw	r18, r22
    ad88:	ac 01       	movw	r20, r24
    ad8a:	69 81       	ldd	r22, Y+1	; 0x01
    ad8c:	7a 81       	ldd	r23, Y+2	; 0x02
    ad8e:	8b 81       	ldd	r24, Y+3	; 0x03
    ad90:	9c 81       	ldd	r25, Y+4	; 0x04
    ad92:	0e 94 cb 5b 	call	0xb796	; 0xb796 <__addsf3>
    ad96:	6b 01       	movw	r12, r22
    ad98:	7c 01       	movw	r14, r24
    ad9a:	f4 01       	movw	r30, r8
    ad9c:	64 83       	std	Z+4, r22	; 0x04
    ad9e:	75 83       	std	Z+5, r23	; 0x05
    ada0:	86 83       	std	Z+6, r24	; 0x06
    ada2:	97 83       	std	Z+7, r25	; 0x07
						LBMoveSprite(slot, game.enemies[i].shot[j].shared.x - game.camera_x, game.enemies[i].shot[j].shared.y - game.camera_y, 1, 1);
    ada4:	60 91 97 0d 	lds	r22, 0x0D97
    ada8:	70 91 98 0d 	lds	r23, 0x0D98
    adac:	80 e0       	ldi	r24, 0x00	; 0
    adae:	90 e0       	ldi	r25, 0x00	; 0
    adb0:	0e 94 5f 5c 	call	0xb8be	; 0xb8be <__floatunsisf>
    adb4:	9b 01       	movw	r18, r22
    adb6:	ac 01       	movw	r20, r24
    adb8:	c3 01       	movw	r24, r6
    adba:	b2 01       	movw	r22, r4
    adbc:	0e 94 ca 5b 	call	0xb794	; 0xb794 <__subsf3>
    adc0:	0e 94 33 5c 	call	0xb866	; 0xb866 <__fixunssfsi>
    adc4:	76 2e       	mov	r7, r22
    adc6:	60 91 95 0d 	lds	r22, 0x0D95
    adca:	70 91 96 0d 	lds	r23, 0x0D96
    adce:	80 e0       	ldi	r24, 0x00	; 0
    add0:	90 e0       	ldi	r25, 0x00	; 0
    add2:	0e 94 5f 5c 	call	0xb8be	; 0xb8be <__floatunsisf>
    add6:	9b 01       	movw	r18, r22
    add8:	ac 01       	movw	r20, r24
    adda:	c7 01       	movw	r24, r14
    addc:	b6 01       	movw	r22, r12
    adde:	0e 94 ca 5b 	call	0xb794	; 0xb794 <__subsf3>
    ade2:	0e 94 33 5c 	call	0xb866	; 0xb866 <__fixunssfsi>
    ade6:	01 e0       	ldi	r16, 0x01	; 1
    ade8:	21 e0       	ldi	r18, 0x01	; 1
    adea:	47 2d       	mov	r20, r7
    adec:	8b 2d       	mov	r24, r11
    adee:	0e 94 ca 47 	call	0x8f94	; 0x8f94 <LBMoveSprite>
					}
				}
			}
			slot += 1;
    adf2:	b3 94       	inc	r11
    adf4:	f2 e4       	ldi	r31, 0x42	; 66
    adf6:	2f 0e       	add	r2, r31
    adf8:	31 1c       	adc	r3, r1
    adfa:	82 e4       	ldi	r24, 0x42	; 66
    adfc:	88 0e       	add	r8, r24
    adfe:	91 1c       	adc	r9, r1

void animate_enemy_shots()
{
	u8 slot = ENEMY_SHOT_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    ae00:	93 e1       	ldi	r25, 0x13	; 19
    ae02:	b9 12       	cpse	r11, r25
    ae04:	02 cf       	rjmp	.-508    	; 0xac0a <animate_enemy_shots+0x48>
				}
			}
			slot += 1;
		}
	}
}
    ae06:	62 96       	adiw	r28, 0x12	; 18
    ae08:	0f b6       	in	r0, 0x3f	; 63
    ae0a:	f8 94       	cli
    ae0c:	de bf       	out	0x3e, r29	; 62
    ae0e:	0f be       	out	0x3f, r0	; 63
    ae10:	cd bf       	out	0x3d, r28	; 61
    ae12:	df 91       	pop	r29
    ae14:	cf 91       	pop	r28
    ae16:	1f 91       	pop	r17
    ae18:	0f 91       	pop	r16
    ae1a:	ff 90       	pop	r15
    ae1c:	ef 90       	pop	r14
    ae1e:	df 90       	pop	r13
    ae20:	cf 90       	pop	r12
    ae22:	bf 90       	pop	r11
    ae24:	af 90       	pop	r10
    ae26:	9f 90       	pop	r9
    ae28:	8f 90       	pop	r8
    ae2a:	7f 90       	pop	r7
    ae2c:	6f 90       	pop	r6
    ae2e:	5f 90       	pop	r5
    ae30:	4f 90       	pop	r4
    ae32:	3f 90       	pop	r3
    ae34:	2f 90       	pop	r2
    ae36:	08 95       	ret

0000ae38 <update_level>:

void update_level()
{
    ae38:	cf 93       	push	r28
    ae3a:	df 93       	push	r29
	game.frame_counter++;
    ae3c:	80 91 a4 0d 	lds	r24, 0x0DA4
    ae40:	8f 5f       	subi	r24, 0xFF	; 255
	if (game.frame_counter == 60)
    ae42:	8c 33       	cpi	r24, 0x3C	; 60
    ae44:	19 f0       	breq	.+6      	; 0xae4c <update_level+0x14>
	}
}

void update_level()
{
	game.frame_counter++;
    ae46:	80 93 a4 0d 	sts	0x0DA4, r24
    ae4a:	0f c0       	rjmp	.+30     	; 0xae6a <update_level+0x32>
	if (game.frame_counter == 60)
	{
		game.frame_counter = 0;
    ae4c:	10 92 a4 0d 	sts	0x0DA4, r1
		if (game.time != 65535) game.time++;
    ae50:	80 91 9b 0d 	lds	r24, 0x0D9B
    ae54:	90 91 9c 0d 	lds	r25, 0x0D9C
    ae58:	8f 3f       	cpi	r24, 0xFF	; 255
    ae5a:	2f ef       	ldi	r18, 0xFF	; 255
    ae5c:	92 07       	cpc	r25, r18
    ae5e:	29 f0       	breq	.+10     	; 0xae6a <update_level+0x32>
    ae60:	01 96       	adiw	r24, 0x01	; 1
    ae62:	90 93 9c 0d 	sts	0x0D9C, r25
    ae66:	80 93 9b 0d 	sts	0x0D9B, r24
	}
	
	if (game.player.shared.vx > 0 &&
    ae6a:	80 91 b7 0d 	lds	r24, 0x0DB7
    ae6e:	90 91 b8 0d 	lds	r25, 0x0DB8
    ae72:	18 16       	cp	r1, r24
    ae74:	19 06       	cpc	r1, r25
    ae76:	44 f5       	brge	.+80     	; 0xaec8 <update_level+0x90>
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
    ae78:	c0 91 95 0d 	lds	r28, 0x0D95
    ae7c:	d0 91 96 0d 	lds	r29, 0x0D96
    ae80:	be 01       	movw	r22, r28
    ae82:	80 e0       	ldi	r24, 0x00	; 0
    ae84:	90 e0       	ldi	r25, 0x00	; 0
    ae86:	0e 94 5f 5c 	call	0xb8be	; 0xb8be <__floatunsisf>
    ae8a:	9b 01       	movw	r18, r22
    ae8c:	ac 01       	movw	r20, r24
    ae8e:	60 91 af 0d 	lds	r22, 0x0DAF
    ae92:	70 91 b0 0d 	lds	r23, 0x0DB0
    ae96:	80 91 b1 0d 	lds	r24, 0x0DB1
    ae9a:	90 91 b2 0d 	lds	r25, 0x0DB2
    ae9e:	0e 94 ca 5b 	call	0xb794	; 0xb794 <__subsf3>
	{
		game.frame_counter = 0;
		if (game.time != 65535) game.time++;
	}
	
	if (game.player.shared.vx > 0 &&
    aea2:	20 e0       	ldi	r18, 0x00	; 0
    aea4:	30 e0       	ldi	r19, 0x00	; 0
    aea6:	40 ee       	ldi	r20, 0xE0	; 224
    aea8:	52 e4       	ldi	r21, 0x42	; 66
    aeaa:	0e 94 11 5d 	call	0xba22	; 0xba22 <__gesf2>
    aeae:	87 fd       	sbrc	r24, 7
    aeb0:	0b c0       	rjmp	.+22     	; 0xaec8 <update_level+0x90>
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
		(game.camera_x/8 + CAMERA_WIDTH < LEVEL_WIDTH))
    aeb2:	93 e0       	ldi	r25, 0x03	; 3
    aeb4:	d6 95       	lsr	r29
    aeb6:	c7 95       	ror	r28
    aeb8:	9a 95       	dec	r25
    aeba:	e1 f7       	brne	.-8      	; 0xaeb4 <update_level+0x7c>
    aebc:	6c 96       	adiw	r28, 0x1c	; 28
		game.frame_counter = 0;
		if (game.time != 65535) game.time++;
	}
	
	if (game.player.shared.vx > 0 &&
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
    aebe:	cf 3f       	cpi	r28, 0xFF	; 255
    aec0:	d1 05       	cpc	r29, r1
    aec2:	10 f4       	brcc	.+4      	; 0xaec8 <update_level+0x90>
		(game.camera_x/8 + CAMERA_WIDTH < LEVEL_WIDTH))
	{
		move_camera_x();
    aec4:	0e 94 42 4b 	call	0x9684	; 0x9684 <move_camera_x>
	}
	
	if (game.player.shared.vy > 0 &&
    aec8:	20 e0       	ldi	r18, 0x00	; 0
    aeca:	30 e0       	ldi	r19, 0x00	; 0
    aecc:	a9 01       	movw	r20, r18
    aece:	60 91 ab 0d 	lds	r22, 0x0DAB
    aed2:	70 91 ac 0d 	lds	r23, 0x0DAC
    aed6:	80 91 ad 0d 	lds	r24, 0x0DAD
    aeda:	90 91 ae 0d 	lds	r25, 0x0DAE
    aede:	0e 94 11 5d 	call	0xba22	; 0xba22 <__gesf2>
    aee2:	18 16       	cp	r1, r24
    aee4:	6c f5       	brge	.+90     	; 0xaf40 <update_level+0x108>
	    (game.player.shared.y - game.camera_y + 24) >= ((CAMERA_HEIGHT - 2) * 8) &&
    aee6:	c0 91 97 0d 	lds	r28, 0x0D97
    aeea:	d0 91 98 0d 	lds	r29, 0x0D98
    aeee:	be 01       	movw	r22, r28
    aef0:	80 e0       	ldi	r24, 0x00	; 0
    aef2:	90 e0       	ldi	r25, 0x00	; 0
    aef4:	0e 94 5f 5c 	call	0xb8be	; 0xb8be <__floatunsisf>
    aef8:	9b 01       	movw	r18, r22
    aefa:	ac 01       	movw	r20, r24
    aefc:	60 91 b3 0d 	lds	r22, 0x0DB3
    af00:	70 91 b4 0d 	lds	r23, 0x0DB4
    af04:	80 91 b5 0d 	lds	r24, 0x0DB5
    af08:	90 91 b6 0d 	lds	r25, 0x0DB6
    af0c:	0e 94 ca 5b 	call	0xb794	; 0xb794 <__subsf3>
    af10:	20 e0       	ldi	r18, 0x00	; 0
    af12:	30 e0       	ldi	r19, 0x00	; 0
    af14:	40 ec       	ldi	r20, 0xC0	; 192
    af16:	51 e4       	ldi	r21, 0x41	; 65
    af18:	0e 94 cb 5b 	call	0xb796	; 0xb796 <__addsf3>
		(game.camera_x/8 + CAMERA_WIDTH < LEVEL_WIDTH))
	{
		move_camera_x();
	}
	
	if (game.player.shared.vy > 0 &&
    af1c:	20 e0       	ldi	r18, 0x00	; 0
    af1e:	30 e0       	ldi	r19, 0x00	; 0
    af20:	40 e4       	ldi	r20, 0x40	; 64
    af22:	53 e4       	ldi	r21, 0x43	; 67
    af24:	0e 94 11 5d 	call	0xba22	; 0xba22 <__gesf2>
    af28:	87 fd       	sbrc	r24, 7
    af2a:	0a c0       	rjmp	.+20     	; 0xaf40 <update_level+0x108>
	    (game.player.shared.y - game.camera_y + 24) >= ((CAMERA_HEIGHT - 2) * 8) &&
		(game.camera_y/8 + CAMERA_HEIGHT < LEVEL_HEIGHT))
    af2c:	83 e0       	ldi	r24, 0x03	; 3
    af2e:	d6 95       	lsr	r29
    af30:	c7 95       	ror	r28
    af32:	8a 95       	dec	r24
    af34:	e1 f7       	brne	.-8      	; 0xaf2e <update_level+0xf6>
    af36:	6a 96       	adiw	r28, 0x1a	; 26
	{
		move_camera_x();
	}
	
	if (game.player.shared.vy > 0 &&
	    (game.player.shared.y - game.camera_y + 24) >= ((CAMERA_HEIGHT - 2) * 8) &&
    af38:	e4 97       	sbiw	r28, 0x34	; 52
    af3a:	10 f4       	brcc	.+4      	; 0xaf40 <update_level+0x108>
		(game.camera_y/8 + CAMERA_HEIGHT < LEVEL_HEIGHT))
	{
		move_camera_y();
    af3c:	0e 94 5b 4b 	call	0x96b6	; 0x96b6 <move_camera_y>
	}
	
	// Score
	LBPrintByte(9, VRAM_TILES_V-1, game.lives ,true);
    af40:	21 e0       	ldi	r18, 0x01	; 1
    af42:	40 91 9f 0d 	lds	r20, 0x0D9F
    af46:	6f e1       	ldi	r22, 0x1F	; 31
    af48:	89 e0       	ldi	r24, 0x09	; 9
    af4a:	0e 94 f3 46 	call	0x8de6	; 0x8de6 <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-1, game.score ,true);
    af4e:	40 91 99 0d 	lds	r20, 0x0D99
    af52:	50 91 9a 0d 	lds	r21, 0x0D9A
    af56:	21 e0       	ldi	r18, 0x01	; 1
    af58:	6f e1       	ldi	r22, 0x1F	; 31
    af5a:	8b e1       	ldi	r24, 0x1B	; 27
    af5c:	0e 94 15 47 	call	0x8e2a	; 0x8e2a <LBPrintInt>
	LBPrintByte(9, VRAM_TILES_V-2, game.player.shield ,true);
    af60:	21 e0       	ldi	r18, 0x01	; 1
    af62:	40 91 c0 0d 	lds	r20, 0x0DC0
    af66:	6e e1       	ldi	r22, 0x1E	; 30
    af68:	89 e0       	ldi	r24, 0x09	; 9
    af6a:	0e 94 f3 46 	call	0x8de6	; 0x8de6 <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-2, game.time ,true);
    af6e:	40 91 9b 0d 	lds	r20, 0x0D9B
    af72:	50 91 9c 0d 	lds	r21, 0x0D9C
    af76:	21 e0       	ldi	r18, 0x01	; 1
    af78:	6e e1       	ldi	r22, 0x1E	; 30
    af7a:	8b e1       	ldi	r24, 0x1B	; 27
	
}
    af7c:	df 91       	pop	r29
    af7e:	cf 91       	pop	r28
	
	// Score
	LBPrintByte(9, VRAM_TILES_V-1, game.lives ,true);
	LBPrintInt(27, VRAM_TILES_V-1, game.score ,true);
	LBPrintByte(9, VRAM_TILES_V-2, game.player.shield ,true);
	LBPrintInt(27, VRAM_TILES_V-2, game.time ,true);
    af80:	0c 94 15 47 	jmp	0x8e2a	; 0x8e2a <LBPrintInt>

0000af84 <clear_sprites>:
	
}

void clear_sprites(u8 from, u8 count)
{
    af84:	ef 92       	push	r14
    af86:	ff 92       	push	r15
    af88:	0f 93       	push	r16
    af8a:	cf 93       	push	r28
	for(u8 i = from; i < from+count; i++)
    af8c:	c8 2f       	mov	r28, r24
    af8e:	e6 2e       	mov	r14, r22
    af90:	f1 2c       	mov	r15, r1
    af92:	e8 0e       	add	r14, r24
    af94:	f1 1c       	adc	r15, r1
    af96:	8c 2f       	mov	r24, r28
    af98:	90 e0       	ldi	r25, 0x00	; 0
    af9a:	8e 15       	cp	r24, r14
    af9c:	9f 05       	cpc	r25, r15
    af9e:	7c f4       	brge	.+30     	; 0xafbe <clear_sprites+0x3a>
	{
		LBMapSprite(i, map_none, 0);
    afa0:	40 e0       	ldi	r20, 0x00	; 0
    afa2:	61 e6       	ldi	r22, 0x61	; 97
    afa4:	7c e2       	ldi	r23, 0x2C	; 44
    afa6:	8c 2f       	mov	r24, r28
    afa8:	0e 94 78 47 	call	0x8ef0	; 0x8ef0 <LBMapSprite>
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
    afac:	01 e0       	ldi	r16, 0x01	; 1
    afae:	21 e0       	ldi	r18, 0x01	; 1
    afb0:	40 e0       	ldi	r20, 0x00	; 0
    afb2:	60 ee       	ldi	r22, 0xE0	; 224
    afb4:	8c 2f       	mov	r24, r28
    afb6:	0e 94 ca 47 	call	0x8f94	; 0x8f94 <LBMoveSprite>
	
}

void clear_sprites(u8 from, u8 count)
{
	for(u8 i = from; i < from+count; i++)
    afba:	cf 5f       	subi	r28, 0xFF	; 255
    afbc:	ec cf       	rjmp	.-40     	; 0xaf96 <clear_sprites+0x12>
	{
		LBMapSprite(i, map_none, 0);
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
	}
}
    afbe:	cf 91       	pop	r28
    afc0:	0f 91       	pop	r16
    afc2:	ff 90       	pop	r15
    afc4:	ef 90       	pop	r14
    afc6:	08 95       	ret

0000afc8 <fade_through>:
	EepromWriteBlock(block);
}

void fade_through()
{
	FadeOut(FRAMES_PER_FADE, true);
    afc8:	61 e0       	ldi	r22, 0x01	; 1
    afca:	83 e0       	ldi	r24, 0x03	; 3
    afcc:	0e 94 11 46 	call	0x8c22	; 0x8c22 <FadeOut>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    afd0:	64 e1       	ldi	r22, 0x14	; 20
    afd2:	80 e0       	ldi	r24, 0x00	; 0
    afd4:	0e 94 c2 57 	call	0xaf84	; 0xaf84 <clear_sprites>
	LBRotateSprites();
    afd8:	0e 94 08 48 	call	0x9010	; 0x9010 <LBRotateSprites>
	ClearVram();
    afdc:	0e 94 5e 37 	call	0x6ebc	; 0x6ebc <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    afe0:	60 e0       	ldi	r22, 0x00	; 0
    afe2:	83 e0       	ldi	r24, 0x03	; 3
    afe4:	0c 94 05 46 	jmp	0x8c0a	; 0x8c0a <FadeIn>

0000afe8 <level_transition>:
	LBPrint(0, VRAM_TILES_V-2, (char*) strShield);
	LBPrint(18, VRAM_TILES_V-2, (char*) strTime);
}

void level_transition(u8 index)
{
    afe8:	cf 93       	push	r28
    afea:	c8 2f       	mov	r28, r24
	FadeOut(FRAMES_PER_FADE, true);
    afec:	61 e0       	ldi	r22, 0x01	; 1
    afee:	83 e0       	ldi	r24, 0x03	; 3
    aff0:	0e 94 11 46 	call	0x8c22	; 0x8c22 <FadeOut>
	ClearVram();
    aff4:	0e 94 5e 37 	call	0x6ebc	; 0x6ebc <ClearVram>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    aff8:	64 e1       	ldi	r22, 0x14	; 20
    affa:	80 e0       	ldi	r24, 0x00	; 0
    affc:	0e 94 c2 57 	call	0xaf84	; 0xaf84 <clear_sprites>
	LBRotateSprites();
    b000:	0e 94 08 48 	call	0x9010	; 0x9010 <LBRotateSprites>
	init_player_state();
    b004:	0e 94 64 48 	call	0x90c8	; 0x90c8 <init_player_state>
	init_enemy_state();
    b008:	0e 94 50 48 	call	0x90a0	; 0x90a0 <init_enemy_state>
	LBPrint(8, 12, (char*) strLevels+index*16);
    b00c:	80 e1       	ldi	r24, 0x10	; 16
    b00e:	c8 9f       	mul	r28, r24
    b010:	a0 01       	movw	r20, r0
    b012:	11 24       	eor	r1, r1
    b014:	44 50       	subi	r20, 0x04	; 4
    b016:	55 4f       	sbci	r21, 0xF5	; 245
    b018:	6c e0       	ldi	r22, 0x0C	; 12
    b01a:	88 e0       	ldi	r24, 0x08	; 8
    b01c:	0e 94 d7 46 	call	0x8dae	; 0x8dae <LBPrint>
	FadeIn(1, true);
    b020:	61 e0       	ldi	r22, 0x01	; 1
    b022:	81 e0       	ldi	r24, 0x01	; 1
    b024:	0e 94 05 46 	call	0x8c0a	; 0x8c0a <FadeIn>
	StartSong(planetsong);
    b028:	89 e1       	ldi	r24, 0x19	; 25
    b02a:	92 e1       	ldi	r25, 0x12	; 18
    b02c:	0e 94 ec 39 	call	0x73d8	; 0x73d8 <StartSong>
	LBWaitSeconds(TEXT_LINGER);
    b030:	83 e0       	ldi	r24, 0x03	; 3
    b032:	0e 94 69 47 	call	0x8ed2	; 0x8ed2 <LBWaitSeconds>
	FadeOut(1, true);
    b036:	61 e0       	ldi	r22, 0x01	; 1
    b038:	81 e0       	ldi	r24, 0x01	; 1
    b03a:	0e 94 11 46 	call	0x8c22	; 0x8c22 <FadeOut>
	ClearVram();
    b03e:	0e 94 5e 37 	call	0x6ebc	; 0x6ebc <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    b042:	60 e0       	ldi	r22, 0x00	; 0
    b044:	83 e0       	ldi	r24, 0x03	; 3
    b046:	0e 94 05 46 	call	0x8c0a	; 0x8c0a <FadeIn>
	load_level(index);
    b04a:	8c 2f       	mov	r24, r28
}
    b04c:	cf 91       	pop	r28
	StartSong(planetsong);
	LBWaitSeconds(TEXT_LINGER);
	FadeOut(1, true);
	ClearVram();
	FadeIn(FRAMES_PER_FADE, false);
	load_level(index);
    b04e:	0c 94 76 4b 	jmp	0x96ec	; 0x96ec <load_level>

0000b052 <save_score>:
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    b052:	81 e7       	ldi	r24, 0x71	; 113
    b054:	9d e0       	ldi	r25, 0x0D	; 13
    b056:	0c 94 d4 38 	jmp	0x71a8	; 0x71a8 <EepromWriteBlock>

0000b05a <load_splash>:
	load_splash();
}

void load_splash()
{
	Screen.scrollX = 0;
    b05a:	e9 e9       	ldi	r30, 0x99	; 153
    b05c:	fc e0       	ldi	r31, 0x0C	; 12
    b05e:	13 82       	std	Z+3, r1	; 0x03
	Screen.scrollY = 0;
    b060:	14 82       	std	Z+4, r1	; 0x04
	Screen.scrollHeight = 32;
    b062:	80 e2       	ldi	r24, 0x20	; 32
    b064:	85 83       	std	Z+5, r24	; 0x05
	Screen.overlayHeight = 0;
    b066:	10 82       	st	Z, r1
	game.current_screen = SPLASH;
    b068:	e1 e9       	ldi	r30, 0x91	; 145
    b06a:	fd e0       	ldi	r31, 0x0D	; 13
    b06c:	17 86       	std	Z+15, r1	; 0x0f
	game.selection = START_SELECTED;
    b06e:	12 8a       	std	Z+18, r1	; 0x12
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    b070:	64 e1       	ldi	r22, 0x14	; 20
    b072:	80 e0       	ldi	r24, 0x00	; 0
    b074:	0e 94 c2 57 	call	0xaf84	; 0xaf84 <clear_sprites>
	LBRotateSprites();
    b078:	0e 94 08 48 	call	0x9010	; 0x9010 <LBRotateSprites>
	LBPrint(8, 15, (char*) str1Player);
    b07c:	46 e4       	ldi	r20, 0x46	; 70
    b07e:	5b e0       	ldi	r21, 0x0B	; 11
    b080:	6f e0       	ldi	r22, 0x0F	; 15
    b082:	88 e0       	ldi	r24, 0x08	; 8
    b084:	0e 94 d7 46 	call	0x8dae	; 0x8dae <LBPrint>
	LBPrint(8, 16, (char*) strHighscores);
    b088:	4a e3       	ldi	r20, 0x3A	; 58
    b08a:	5b e0       	ldi	r21, 0x0B	; 11
    b08c:	60 e1       	ldi	r22, 0x10	; 16
    b08e:	88 e0       	ldi	r24, 0x08	; 8
    b090:	0e 94 d7 46 	call	0x8dae	; 0x8dae <LBPrint>
	LBPrint(4, 21, (char*) strCopyright);
    b094:	44 e6       	ldi	r20, 0x64	; 100
    b096:	5b e0       	ldi	r21, 0x0B	; 11
    b098:	65 e1       	ldi	r22, 0x15	; 21
    b09a:	84 e0       	ldi	r24, 0x04	; 4
    b09c:	0e 94 d7 46 	call	0x8dae	; 0x8dae <LBPrint>
	LBPrint(3, 26, (char*) strMusic);
    b0a0:	4c e4       	ldi	r20, 0x4C	; 76
    b0a2:	5b e0       	ldi	r21, 0x0B	; 11
    b0a4:	6a e1       	ldi	r22, 0x1A	; 26
    b0a6:	83 e0       	ldi	r24, 0x03	; 3
    b0a8:	0e 94 d7 46 	call	0x8dae	; 0x8dae <LBPrint>
	DrawMap2(6, 5, (const char*) map_splash);
    b0ac:	43 ea       	ldi	r20, 0xA3	; 163
    b0ae:	53 e6       	ldi	r21, 0x63	; 99
    b0b0:	65 e0       	ldi	r22, 0x05	; 5
    b0b2:	86 e0       	ldi	r24, 0x06	; 6
    b0b4:	0e 94 5c 45 	call	0x8ab8	; 0x8ab8 <DrawMap>
	LBMapSprite(0, map_right_arrow, 0);
    b0b8:	40 e0       	ldi	r20, 0x00	; 0
    b0ba:	6e e5       	ldi	r22, 0x5E	; 94
    b0bc:	7c e2       	ldi	r23, 0x2C	; 44
    b0be:	80 e0       	ldi	r24, 0x00	; 0
    b0c0:	0c 94 78 47 	jmp	0x8ef0	; 0x8ef0 <LBMapSprite>

0000b0c4 <exit_game>:
	save_eeprom(&scores);
}

void exit_game()
{
    save_score();
    b0c4:	0e 94 29 58 	call	0xb052	; 0xb052 <save_score>
	fade_through();
    b0c8:	0e 94 e4 57 	call	0xafc8	; 0xafc8 <fade_through>
	init_game_state();
    b0cc:	0e 94 47 48 	call	0x908e	; 0x908e <init_game_state>
	init_player_state();
    b0d0:	0e 94 64 48 	call	0x90c8	; 0x90c8 <init_player_state>
	init_enemy_state();
    b0d4:	0e 94 50 48 	call	0x90a0	; 0x90a0 <init_enemy_state>
	StopSong();
    b0d8:	0e 94 15 3a 	call	0x742a	; 0x742a <StopSong>
	load_splash();
    b0dc:	0c 94 2d 58 	jmp	0xb05a	; 0xb05a <load_splash>

0000b0e0 <handle_player_death>:
	}
}

void handle_player_death()
{
	game.lives--;
    b0e0:	80 91 9f 0d 	lds	r24, 0x0D9F
    b0e4:	81 50       	subi	r24, 0x01	; 1
    b0e6:	80 93 9f 0d 	sts	0x0D9F, r24
	clear_sprites(0, 6);
    b0ea:	66 e0       	ldi	r22, 0x06	; 6
    b0ec:	80 e0       	ldi	r24, 0x00	; 0
    b0ee:	0e 94 c2 57 	call	0xaf84	; 0xaf84 <clear_sprites>
	LBRotateSprites();
    b0f2:	0e 94 08 48 	call	0x9010	; 0x9010 <LBRotateSprites>
	if (game.lives == 0)
    b0f6:	80 91 9f 0d 	lds	r24, 0x0D9F
    b0fa:	81 11       	cpse	r24, r1
    b0fc:	02 c0       	rjmp	.+4      	; 0xb102 <handle_player_death+0x22>
	{
		exit_game();
    b0fe:	0c 94 62 58 	jmp	0xb0c4	; 0xb0c4 <exit_game>
		return;
	}
	FadeOut(FRAMES_PER_FADE, true);
    b102:	61 e0       	ldi	r22, 0x01	; 1
    b104:	83 e0       	ldi	r24, 0x03	; 3
    b106:	0e 94 11 46 	call	0x8c22	; 0x8c22 <FadeOut>
	ClearVram();
    b10a:	0e 94 5e 37 	call	0x6ebc	; 0x6ebc <ClearVram>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    b10e:	64 e1       	ldi	r22, 0x14	; 20
    b110:	80 e0       	ldi	r24, 0x00	; 0
    b112:	0e 94 c2 57 	call	0xaf84	; 0xaf84 <clear_sprites>
	LBRotateSprites();
    b116:	0e 94 08 48 	call	0x9010	; 0x9010 <LBRotateSprites>
	init_player_state();
    b11a:	0e 94 64 48 	call	0x90c8	; 0x90c8 <init_player_state>
	init_enemy_state();
    b11e:	0e 94 50 48 	call	0x90a0	; 0x90a0 <init_enemy_state>
	FadeIn(FRAMES_PER_FADE, false);
    b122:	60 e0       	ldi	r22, 0x00	; 0
    b124:	83 e0       	ldi	r24, 0x03	; 3
    b126:	0e 94 05 46 	call	0x8c0a	; 0x8c0a <FadeIn>
	load_level(game.current_level_index);
    b12a:	80 91 a1 0d 	lds	r24, 0x0DA1
    b12e:	0c 94 76 4b 	jmp	0x96ec	; 0x96ec <load_level>

0000b132 <update_player>:
}

void update_player()
{
    b132:	0f 93       	push	r16
    b134:	1f 93       	push	r17
    b136:	cf 93       	push	r28
    b138:	df 93       	push	r29
    b13a:	1f 92       	push	r1
    b13c:	cd b7       	in	r28, 0x3d	; 61
    b13e:	de b7       	in	r29, 0x3e	; 62
	
	if (game.player.flags & EXPLODING)
    b140:	80 91 bb 0d 	lds	r24, 0x0DBB
    b144:	84 ff       	sbrs	r24, 4
    b146:	15 c0       	rjmp	.+42     	; 0xb172 <update_player+0x40>
	{
		if (map_explosion(&game.player.flags, &game.player.expl, PLAYER_SLOT, game.player.width, game.player.height))
    b148:	00 91 bf 0d 	lds	r16, 0x0DBF
    b14c:	20 91 be 0d 	lds	r18, 0x0DBE
    b150:	40 e0       	ldi	r20, 0x00	; 0
    b152:	6f e2       	ldi	r22, 0x2F	; 47
    b154:	7e e0       	ldi	r23, 0x0E	; 14
    b156:	8b eb       	ldi	r24, 0xBB	; 187
    b158:	9d e0       	ldi	r25, 0x0D	; 13
    b15a:	0e 94 3b 52 	call	0xa476	; 0xa476 <map_explosion>
    b15e:	88 23       	and	r24, r24
    b160:	09 f4       	brne	.+2      	; 0xb164 <update_player+0x32>
    b162:	0c c2       	rjmp	.+1048   	; 0xb57c <update_player+0x44a>
		{
			game.player.direction = D_RIGHT;
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.prone), 0);
		}
	}
}
    b164:	0f 90       	pop	r0
    b166:	df 91       	pop	r29
    b168:	cf 91       	pop	r28
    b16a:	1f 91       	pop	r17
    b16c:	0f 91       	pop	r16
	
	if (game.player.flags & EXPLODING)
	{
		if (map_explosion(&game.player.flags, &game.player.expl, PLAYER_SLOT, game.player.width, game.player.height))
		{
			handle_player_death();
    b16e:	0c 94 70 58 	jmp	0xb0e0	; 0xb0e0 <handle_player_death>
		}
	}
	else if (game.player.flags & (IDLE|RUNNING))
    b172:	98 2f       	mov	r25, r24
    b174:	9a 70       	andi	r25, 0x0A	; 10
    b176:	09 f4       	brne	.+2      	; 0xb17a <update_player+0x48>
    b178:	f0 c0       	rjmp	.+480    	; 0xb35a <update_player+0x228>
	{
		if (!on_solid_ground(&game.player.shared, game.player.width, game.player.height))
    b17a:	40 91 bf 0d 	lds	r20, 0x0DBF
    b17e:	60 91 be 0d 	lds	r22, 0x0DBE
    b182:	8b ea       	ldi	r24, 0xAB	; 171
    b184:	9d e0       	ldi	r25, 0x0D	; 13
    b186:	0e 94 ce 4b 	call	0x979c	; 0x979c <on_solid_ground>
    b18a:	81 11       	cpse	r24, r1
    b18c:	07 c0       	rjmp	.+14     	; 0xb19c <update_player+0x6a>
		{
			game.player.shared.gravity = GRAVITY;
    b18e:	8f ef       	ldi	r24, 0xFF	; 255
    b190:	80 93 b9 0d 	sts	0x0DB9, r24
			game.player.flags = JUMPING;
    b194:	81 e0       	ldi	r24, 0x01	; 1
    b196:	80 93 bb 0d 	sts	0x0DBB, r24
    b19a:	d6 c0       	rjmp	.+428    	; 0xb348 <update_player+0x216>
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), extendedSprites[PLAYER_SLOT].flags);
		}
		else
		{
			if (game.joypadState.held & BTN_DOWN)
    b19c:	10 91 85 0f 	lds	r17, 0x0F85
    b1a0:	15 ff       	sbrs	r17, 5
    b1a2:	46 c0       	rjmp	.+140    	; 0xb230 <update_player+0xfe>
			{
				game.player.shared.y += 16;
    b1a4:	20 e0       	ldi	r18, 0x00	; 0
    b1a6:	30 e0       	ldi	r19, 0x00	; 0
    b1a8:	40 e8       	ldi	r20, 0x80	; 128
    b1aa:	51 e4       	ldi	r21, 0x41	; 65
    b1ac:	60 91 b3 0d 	lds	r22, 0x0DB3
    b1b0:	70 91 b4 0d 	lds	r23, 0x0DB4
    b1b4:	80 91 b5 0d 	lds	r24, 0x0DB5
    b1b8:	90 91 b6 0d 	lds	r25, 0x0DB6
    b1bc:	0e 94 cb 5b 	call	0xb796	; 0xb796 <__addsf3>
    b1c0:	60 93 b3 0d 	sts	0x0DB3, r22
    b1c4:	70 93 b4 0d 	sts	0x0DB4, r23
    b1c8:	80 93 b5 0d 	sts	0x0DB5, r24
    b1cc:	90 93 b6 0d 	sts	0x0DB6, r25
				if(game.player.direction == D_RIGHT)
    b1d0:	80 91 bd 0d 	lds	r24, 0x0DBD
    b1d4:	81 30       	cpi	r24, 0x01	; 1
    b1d6:	b1 f4       	brne	.+44     	; 0xb204 <update_player+0xd2>
				{
					game.player.shared.x -= 8;
    b1d8:	20 e0       	ldi	r18, 0x00	; 0
    b1da:	30 e0       	ldi	r19, 0x00	; 0
    b1dc:	40 e0       	ldi	r20, 0x00	; 0
    b1de:	51 e4       	ldi	r21, 0x41	; 65
    b1e0:	60 91 af 0d 	lds	r22, 0x0DAF
    b1e4:	70 91 b0 0d 	lds	r23, 0x0DB0
    b1e8:	80 91 b1 0d 	lds	r24, 0x0DB1
    b1ec:	90 91 b2 0d 	lds	r25, 0x0DB2
    b1f0:	0e 94 ca 5b 	call	0xb794	; 0xb794 <__subsf3>
    b1f4:	60 93 af 0d 	sts	0x0DAF, r22
    b1f8:	70 93 b0 0d 	sts	0x0DB0, r23
    b1fc:	80 93 b1 0d 	sts	0x0DB1, r24
    b200:	90 93 b2 0d 	sts	0x0DB2, r25
				}
				game.player.shared.vx = 0;
    b204:	10 92 b8 0d 	sts	0x0DB8, r1
    b208:	10 92 b7 0d 	sts	0x0DB7, r1
				game.player.flags = PRONE;
    b20c:	84 e0       	ldi	r24, 0x04	; 4
    b20e:	80 93 bb 0d 	sts	0x0DBB, r24
				game.player.width = 3;
    b212:	83 e0       	ldi	r24, 0x03	; 3
    b214:	80 93 be 0d 	sts	0x0DBE, r24
				game.player.height = 1;
    b218:	81 e0       	ldi	r24, 0x01	; 1
    b21a:	80 93 bf 0d 	sts	0x0DBF, r24
				clear_sprites(3, 3);
    b21e:	63 e0       	ldi	r22, 0x03	; 3
    b220:	83 e0       	ldi	r24, 0x03	; 3
    b222:	0e 94 c2 57 	call	0xaf84	; 0xaf84 <clear_sprites>
				LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.prone), extendedSprites[PLAYER_SLOT].flags);
    b226:	40 91 93 0f 	lds	r20, 0x0F93
    b22a:	87 e2       	ldi	r24, 0x27	; 39
    b22c:	9e e0       	ldi	r25, 0x0E	; 14
    b22e:	64 c0       	rjmp	.+200    	; 0xb2f8 <update_player+0x1c6>
			}
			else if ((game.joypadState.held & BTN_RIGHT) && (game.player.shared.x/8 + 2 < LEVEL_WIDTH))
    b230:	17 ff       	sbrs	r17, 7
    b232:	2e c0       	rjmp	.+92     	; 0xb290 <update_player+0x15e>
    b234:	20 e0       	ldi	r18, 0x00	; 0
    b236:	30 e0       	ldi	r19, 0x00	; 0
    b238:	40 e0       	ldi	r20, 0x00	; 0
    b23a:	5e e3       	ldi	r21, 0x3E	; 62
    b23c:	60 91 af 0d 	lds	r22, 0x0DAF
    b240:	70 91 b0 0d 	lds	r23, 0x0DB0
    b244:	80 91 b1 0d 	lds	r24, 0x0DB1
    b248:	90 91 b2 0d 	lds	r25, 0x0DB2
    b24c:	0e 94 15 5d 	call	0xba2a	; 0xba2a <__mulsf3>
    b250:	20 e0       	ldi	r18, 0x00	; 0
    b252:	30 e0       	ldi	r19, 0x00	; 0
    b254:	40 e0       	ldi	r20, 0x00	; 0
    b256:	50 e4       	ldi	r21, 0x40	; 64
    b258:	0e 94 cb 5b 	call	0xb796	; 0xb796 <__addsf3>
    b25c:	20 e0       	ldi	r18, 0x00	; 0
    b25e:	30 e0       	ldi	r19, 0x00	; 0
    b260:	4f e7       	ldi	r20, 0x7F	; 127
    b262:	53 e4       	ldi	r21, 0x43	; 67
    b264:	0e 94 2f 5c 	call	0xb85e	; 0xb85e <__cmpsf2>
    b268:	87 ff       	sbrs	r24, 7
    b26a:	12 c0       	rjmp	.+36     	; 0xb290 <update_player+0x15e>
			{
				game.player.shared.vx = RUN_SPEED;
    b26c:	8c e3       	ldi	r24, 0x3C	; 60
    b26e:	90 e0       	ldi	r25, 0x00	; 0
    b270:	90 93 b8 0d 	sts	0x0DB8, r25
    b274:	80 93 b7 0d 	sts	0x0DB7, r24
				game.player.flags = RUNNING;
    b278:	82 e0       	ldi	r24, 0x02	; 2
    b27a:	80 93 bb 0d 	sts	0x0DBB, r24
				game.player.direction = D_RIGHT;
    b27e:	81 e0       	ldi	r24, 0x01	; 1
    b280:	80 93 bd 0d 	sts	0x0DBD, r24
				LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.run), 0);
    b284:	87 e1       	ldi	r24, 0x17	; 23
    b286:	9e e0       	ldi	r25, 0x0E	; 14
    b288:	0e 94 46 46 	call	0x8c8c	; 0x8c8c <LBGetNextFrame>
    b28c:	40 e0       	ldi	r20, 0x00	; 0
    b28e:	38 c0       	rjmp	.+112    	; 0xb300 <update_player+0x1ce>
			}
			else if ((game.joypadState.held & BTN_LEFT) && (game.player.shared.x > game.camera_x))
    b290:	16 ff       	sbrs	r17, 6
    b292:	27 c0       	rjmp	.+78     	; 0xb2e2 <update_player+0x1b0>
    b294:	60 91 95 0d 	lds	r22, 0x0D95
    b298:	70 91 96 0d 	lds	r23, 0x0D96
    b29c:	80 e0       	ldi	r24, 0x00	; 0
    b29e:	90 e0       	ldi	r25, 0x00	; 0
    b2a0:	0e 94 5f 5c 	call	0xb8be	; 0xb8be <__floatunsisf>
    b2a4:	9b 01       	movw	r18, r22
    b2a6:	ac 01       	movw	r20, r24
    b2a8:	60 91 af 0d 	lds	r22, 0x0DAF
    b2ac:	70 91 b0 0d 	lds	r23, 0x0DB0
    b2b0:	80 91 b1 0d 	lds	r24, 0x0DB1
    b2b4:	90 91 b2 0d 	lds	r25, 0x0DB2
    b2b8:	0e 94 11 5d 	call	0xba22	; 0xba22 <__gesf2>
    b2bc:	18 16       	cp	r1, r24
    b2be:	8c f4       	brge	.+34     	; 0xb2e2 <update_player+0x1b0>
			{
				game.player.shared.vx = -RUN_SPEED;
    b2c0:	84 ec       	ldi	r24, 0xC4	; 196
    b2c2:	9f ef       	ldi	r25, 0xFF	; 255
    b2c4:	90 93 b8 0d 	sts	0x0DB8, r25
    b2c8:	80 93 b7 0d 	sts	0x0DB7, r24
				game.player.flags = RUNNING;
    b2cc:	82 e0       	ldi	r24, 0x02	; 2
    b2ce:	80 93 bb 0d 	sts	0x0DBB, r24
				game.player.direction = D_LEFT;
    b2d2:	10 92 bd 0d 	sts	0x0DBD, r1
				LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.run), SPRITE_FLIP_X);
    b2d6:	87 e1       	ldi	r24, 0x17	; 23
    b2d8:	9e e0       	ldi	r25, 0x0E	; 14
    b2da:	0e 94 46 46 	call	0x8c8c	; 0x8c8c <LBGetNextFrame>
    b2de:	41 e0       	ldi	r20, 0x01	; 1
    b2e0:	0f c0       	rjmp	.+30     	; 0xb300 <update_player+0x1ce>
			}
			else
			{
				game.player.flags = IDLE;
    b2e2:	88 e0       	ldi	r24, 0x08	; 8
    b2e4:	80 93 bb 0d 	sts	0x0DBB, r24
				game.player.shared.vx = 0;
    b2e8:	10 92 b8 0d 	sts	0x0DB8, r1
    b2ec:	10 92 b7 0d 	sts	0x0DB7, r1
				LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.idle), extendedSprites[PLAYER_SLOT].flags);
    b2f0:	40 91 93 0f 	lds	r20, 0x0F93
    b2f4:	8f e0       	ldi	r24, 0x0F	; 15
    b2f6:	9e e0       	ldi	r25, 0x0E	; 14
    b2f8:	49 83       	std	Y+1, r20	; 0x01
    b2fa:	0e 94 46 46 	call	0x8c8c	; 0x8c8c <LBGetNextFrame>
    b2fe:	49 81       	ldd	r20, Y+1	; 0x01
    b300:	bc 01       	movw	r22, r24
    b302:	80 e0       	ldi	r24, 0x00	; 0
    b304:	0e 94 78 47 	call	0x8ef0	; 0x8ef0 <LBMapSprite>
			}
			if (game.joypadState.pressed & BTN_B && !(game.player.flags & PRONE))
    b308:	80 91 81 0f 	lds	r24, 0x0F81
    b30c:	80 ff       	sbrs	r24, 0
    b30e:	36 c1       	rjmp	.+620    	; 0xb57c <update_player+0x44a>
    b310:	80 91 bb 0d 	lds	r24, 0x0DBB
    b314:	82 fd       	sbrc	r24, 2
    b316:	32 c1       	rjmp	.+612    	; 0xb57c <update_player+0x44a>
			{
				game.player.shared.vy = -JUMP_SPEED;
    b318:	80 e0       	ldi	r24, 0x00	; 0
    b31a:	90 e0       	ldi	r25, 0x00	; 0
    b31c:	a6 e1       	ldi	r26, 0x16	; 22
    b31e:	b3 ec       	ldi	r27, 0xC3	; 195
    b320:	80 93 ab 0d 	sts	0x0DAB, r24
    b324:	90 93 ac 0d 	sts	0x0DAC, r25
    b328:	a0 93 ad 0d 	sts	0x0DAD, r26
    b32c:	b0 93 ae 0d 	sts	0x0DAE, r27
				game.player.shared.gravity = GRAVITY;
    b330:	8f ef       	ldi	r24, 0xFF	; 255
    b332:	80 93 b9 0d 	sts	0x0DB9, r24
				game.player.flags = JUMPING;
    b336:	81 e0       	ldi	r24, 0x01	; 1
    b338:	80 93 bb 0d 	sts	0x0DBB, r24
				game.player.width = 2;
    b33c:	82 e0       	ldi	r24, 0x02	; 2
    b33e:	80 93 be 0d 	sts	0x0DBE, r24
				game.player.height = 3;
    b342:	83 e0       	ldi	r24, 0x03	; 3
    b344:	80 93 bf 0d 	sts	0x0DBF, r24
				LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), extendedSprites[PLAYER_SLOT].flags);
    b348:	40 91 93 0f 	lds	r20, 0x0F93
    b34c:	8f e1       	ldi	r24, 0x1F	; 31
    b34e:	9e e0       	ldi	r25, 0x0E	; 14
    b350:	49 83       	std	Y+1, r20	; 0x01
    b352:	0e 94 46 46 	call	0x8c8c	; 0x8c8c <LBGetNextFrame>
    b356:	49 81       	ldd	r20, Y+1	; 0x01
    b358:	08 c1       	rjmp	.+528    	; 0xb56a <update_player+0x438>
			}
		}
	}
	else if (game.player.flags & JUMPING)
    b35a:	80 ff       	sbrs	r24, 0
    b35c:	6d c0       	rjmp	.+218    	; 0xb438 <update_player+0x306>
	{
		if ((game.joypadState.held & BTN_RIGHT) && (game.player.shared.x/8 + 2 < LEVEL_WIDTH))
    b35e:	10 91 85 0f 	lds	r17, 0x0F85
    b362:	17 ff       	sbrs	r17, 7
    b364:	2b c0       	rjmp	.+86     	; 0xb3bc <update_player+0x28a>
    b366:	20 e0       	ldi	r18, 0x00	; 0
    b368:	30 e0       	ldi	r19, 0x00	; 0
    b36a:	40 e0       	ldi	r20, 0x00	; 0
    b36c:	5e e3       	ldi	r21, 0x3E	; 62
    b36e:	60 91 af 0d 	lds	r22, 0x0DAF
    b372:	70 91 b0 0d 	lds	r23, 0x0DB0
    b376:	80 91 b1 0d 	lds	r24, 0x0DB1
    b37a:	90 91 b2 0d 	lds	r25, 0x0DB2
    b37e:	0e 94 15 5d 	call	0xba2a	; 0xba2a <__mulsf3>
    b382:	20 e0       	ldi	r18, 0x00	; 0
    b384:	30 e0       	ldi	r19, 0x00	; 0
    b386:	40 e0       	ldi	r20, 0x00	; 0
    b388:	50 e4       	ldi	r21, 0x40	; 64
    b38a:	0e 94 cb 5b 	call	0xb796	; 0xb796 <__addsf3>
    b38e:	20 e0       	ldi	r18, 0x00	; 0
    b390:	30 e0       	ldi	r19, 0x00	; 0
    b392:	4f e7       	ldi	r20, 0x7F	; 127
    b394:	53 e4       	ldi	r21, 0x43	; 67
    b396:	0e 94 2f 5c 	call	0xb85e	; 0xb85e <__cmpsf2>
    b39a:	87 ff       	sbrs	r24, 7
    b39c:	0f c0       	rjmp	.+30     	; 0xb3bc <update_player+0x28a>
		{
			game.player.shared.vx = RUN_SPEED;
    b39e:	8c e3       	ldi	r24, 0x3C	; 60
    b3a0:	90 e0       	ldi	r25, 0x00	; 0
    b3a2:	90 93 b8 0d 	sts	0x0DB8, r25
    b3a6:	80 93 b7 0d 	sts	0x0DB7, r24
			game.player.direction = D_RIGHT;
    b3aa:	81 e0       	ldi	r24, 0x01	; 1
    b3ac:	80 93 bd 0d 	sts	0x0DBD, r24
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), 0);
    b3b0:	8f e1       	ldi	r24, 0x1F	; 31
    b3b2:	9e e0       	ldi	r25, 0x0E	; 14
    b3b4:	0e 94 46 46 	call	0x8c8c	; 0x8c8c <LBGetNextFrame>
    b3b8:	40 e0       	ldi	r20, 0x00	; 0
    b3ba:	32 c0       	rjmp	.+100    	; 0xb420 <update_player+0x2ee>
		}
		else if ((game.joypadState.held & BTN_LEFT) && (game.player.shared.x > game.camera_x))
    b3bc:	16 ff       	sbrs	r17, 6
    b3be:	24 c0       	rjmp	.+72     	; 0xb408 <update_player+0x2d6>
    b3c0:	60 91 95 0d 	lds	r22, 0x0D95
    b3c4:	70 91 96 0d 	lds	r23, 0x0D96
    b3c8:	80 e0       	ldi	r24, 0x00	; 0
    b3ca:	90 e0       	ldi	r25, 0x00	; 0
    b3cc:	0e 94 5f 5c 	call	0xb8be	; 0xb8be <__floatunsisf>
    b3d0:	9b 01       	movw	r18, r22
    b3d2:	ac 01       	movw	r20, r24
    b3d4:	60 91 af 0d 	lds	r22, 0x0DAF
    b3d8:	70 91 b0 0d 	lds	r23, 0x0DB0
    b3dc:	80 91 b1 0d 	lds	r24, 0x0DB1
    b3e0:	90 91 b2 0d 	lds	r25, 0x0DB2
    b3e4:	0e 94 11 5d 	call	0xba22	; 0xba22 <__gesf2>
    b3e8:	18 16       	cp	r1, r24
    b3ea:	74 f4       	brge	.+28     	; 0xb408 <update_player+0x2d6>
		{
			game.player.shared.vx = -RUN_SPEED;
    b3ec:	84 ec       	ldi	r24, 0xC4	; 196
    b3ee:	9f ef       	ldi	r25, 0xFF	; 255
    b3f0:	90 93 b8 0d 	sts	0x0DB8, r25
    b3f4:	80 93 b7 0d 	sts	0x0DB7, r24
			game.player.direction = D_LEFT;
    b3f8:	10 92 bd 0d 	sts	0x0DBD, r1
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), SPRITE_FLIP_X);
    b3fc:	8f e1       	ldi	r24, 0x1F	; 31
    b3fe:	9e e0       	ldi	r25, 0x0E	; 14
    b400:	0e 94 46 46 	call	0x8c8c	; 0x8c8c <LBGetNextFrame>
    b404:	41 e0       	ldi	r20, 0x01	; 1
    b406:	0c c0       	rjmp	.+24     	; 0xb420 <update_player+0x2ee>
		}
		else
		{
			game.player.shared.vx = 0;
    b408:	10 92 b8 0d 	sts	0x0DB8, r1
    b40c:	10 92 b7 0d 	sts	0x0DB7, r1
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), extendedSprites[PLAYER_SLOT].flags);
    b410:	40 91 93 0f 	lds	r20, 0x0F93
    b414:	8f e1       	ldi	r24, 0x1F	; 31
    b416:	9e e0       	ldi	r25, 0x0E	; 14
    b418:	49 83       	std	Y+1, r20	; 0x01
    b41a:	0e 94 46 46 	call	0x8c8c	; 0x8c8c <LBGetNextFrame>
    b41e:	49 81       	ldd	r20, Y+1	; 0x01
    b420:	bc 01       	movw	r22, r24
    b422:	80 e0       	ldi	r24, 0x00	; 0
    b424:	0e 94 78 47 	call	0x8ef0	; 0x8ef0 <LBMapSprite>
		}
		
		if (game.player.shared.gravity == 0)
    b428:	80 91 b9 0d 	lds	r24, 0x0DB9
    b42c:	81 11       	cpse	r24, r1
    b42e:	a6 c0       	rjmp	.+332    	; 0xb57c <update_player+0x44a>
		{
			game.player.flags = IDLE;
    b430:	88 e0       	ldi	r24, 0x08	; 8
    b432:	80 93 bb 0d 	sts	0x0DBB, r24
    b436:	a2 c0       	rjmp	.+324    	; 0xb57c <update_player+0x44a>
		}
	}
	else if (game.player.flags & PRONE)
    b438:	82 ff       	sbrs	r24, 2
    b43a:	a0 c0       	rjmp	.+320    	; 0xb57c <update_player+0x44a>
	{
		if (game.joypadState.pressed & BTN_UP)
    b43c:	80 91 81 0f 	lds	r24, 0x0F81
    b440:	84 ff       	sbrs	r24, 4
    b442:	3a c0       	rjmp	.+116    	; 0xb4b8 <update_player+0x386>
		{
			game.player.flags = IDLE;	
    b444:	88 e0       	ldi	r24, 0x08	; 8
    b446:	80 93 bb 0d 	sts	0x0DBB, r24
			game.player.shared.y -= 16;
    b44a:	20 e0       	ldi	r18, 0x00	; 0
    b44c:	30 e0       	ldi	r19, 0x00	; 0
    b44e:	40 e8       	ldi	r20, 0x80	; 128
    b450:	51 e4       	ldi	r21, 0x41	; 65
    b452:	60 91 b3 0d 	lds	r22, 0x0DB3
    b456:	70 91 b4 0d 	lds	r23, 0x0DB4
    b45a:	80 91 b5 0d 	lds	r24, 0x0DB5
    b45e:	90 91 b6 0d 	lds	r25, 0x0DB6
    b462:	0e 94 ca 5b 	call	0xb794	; 0xb794 <__subsf3>
    b466:	60 93 b3 0d 	sts	0x0DB3, r22
    b46a:	70 93 b4 0d 	sts	0x0DB4, r23
    b46e:	80 93 b5 0d 	sts	0x0DB5, r24
    b472:	90 93 b6 0d 	sts	0x0DB6, r25
			if(game.player.direction == D_RIGHT)
    b476:	80 91 bd 0d 	lds	r24, 0x0DBD
    b47a:	81 30       	cpi	r24, 0x01	; 1
    b47c:	b1 f4       	brne	.+44     	; 0xb4aa <update_player+0x378>
			{
				game.player.shared.x += 8;
    b47e:	20 e0       	ldi	r18, 0x00	; 0
    b480:	30 e0       	ldi	r19, 0x00	; 0
    b482:	40 e0       	ldi	r20, 0x00	; 0
    b484:	51 e4       	ldi	r21, 0x41	; 65
    b486:	60 91 af 0d 	lds	r22, 0x0DAF
    b48a:	70 91 b0 0d 	lds	r23, 0x0DB0
    b48e:	80 91 b1 0d 	lds	r24, 0x0DB1
    b492:	90 91 b2 0d 	lds	r25, 0x0DB2
    b496:	0e 94 cb 5b 	call	0xb796	; 0xb796 <__addsf3>
    b49a:	60 93 af 0d 	sts	0x0DAF, r22
    b49e:	70 93 b0 0d 	sts	0x0DB0, r23
    b4a2:	80 93 b1 0d 	sts	0x0DB1, r24
    b4a6:	90 93 b2 0d 	sts	0x0DB2, r25
			}
			game.player.width = 2;
    b4aa:	82 e0       	ldi	r24, 0x02	; 2
    b4ac:	80 93 be 0d 	sts	0x0DBE, r24
			game.player.height = 3;
    b4b0:	83 e0       	ldi	r24, 0x03	; 3
    b4b2:	80 93 bf 0d 	sts	0x0DBF, r24
    b4b6:	62 c0       	rjmp	.+196    	; 0xb57c <update_player+0x44a>
		}
		else if (game.joypadState.pressed & BTN_B)
    b4b8:	80 ff       	sbrs	r24, 0
    b4ba:	43 c0       	rjmp	.+134    	; 0xb542 <update_player+0x410>
		{
			game.player.flags = JUMPING;
    b4bc:	81 e0       	ldi	r24, 0x01	; 1
    b4be:	80 93 bb 0d 	sts	0x0DBB, r24
			game.player.shared.y -= 16;
    b4c2:	20 e0       	ldi	r18, 0x00	; 0
    b4c4:	30 e0       	ldi	r19, 0x00	; 0
    b4c6:	40 e8       	ldi	r20, 0x80	; 128
    b4c8:	51 e4       	ldi	r21, 0x41	; 65
    b4ca:	60 91 b3 0d 	lds	r22, 0x0DB3
    b4ce:	70 91 b4 0d 	lds	r23, 0x0DB4
    b4d2:	80 91 b5 0d 	lds	r24, 0x0DB5
    b4d6:	90 91 b6 0d 	lds	r25, 0x0DB6
    b4da:	0e 94 ca 5b 	call	0xb794	; 0xb794 <__subsf3>
    b4de:	60 93 b3 0d 	sts	0x0DB3, r22
    b4e2:	70 93 b4 0d 	sts	0x0DB4, r23
    b4e6:	80 93 b5 0d 	sts	0x0DB5, r24
    b4ea:	90 93 b6 0d 	sts	0x0DB6, r25
			if(game.player.direction == D_RIGHT)
    b4ee:	80 91 bd 0d 	lds	r24, 0x0DBD
    b4f2:	81 30       	cpi	r24, 0x01	; 1
    b4f4:	b1 f4       	brne	.+44     	; 0xb522 <update_player+0x3f0>
			{
				game.player.shared.x += 8;
    b4f6:	20 e0       	ldi	r18, 0x00	; 0
    b4f8:	30 e0       	ldi	r19, 0x00	; 0
    b4fa:	40 e0       	ldi	r20, 0x00	; 0
    b4fc:	51 e4       	ldi	r21, 0x41	; 65
    b4fe:	60 91 af 0d 	lds	r22, 0x0DAF
    b502:	70 91 b0 0d 	lds	r23, 0x0DB0
    b506:	80 91 b1 0d 	lds	r24, 0x0DB1
    b50a:	90 91 b2 0d 	lds	r25, 0x0DB2
    b50e:	0e 94 cb 5b 	call	0xb796	; 0xb796 <__addsf3>
    b512:	60 93 af 0d 	sts	0x0DAF, r22
    b516:	70 93 b0 0d 	sts	0x0DB0, r23
    b51a:	80 93 b1 0d 	sts	0x0DB1, r24
    b51e:	90 93 b2 0d 	sts	0x0DB2, r25
			}
			game.player.shared.vy = -JUMP_SPEED;
    b522:	80 e0       	ldi	r24, 0x00	; 0
    b524:	90 e0       	ldi	r25, 0x00	; 0
    b526:	a6 e1       	ldi	r26, 0x16	; 22
    b528:	b3 ec       	ldi	r27, 0xC3	; 195
    b52a:	80 93 ab 0d 	sts	0x0DAB, r24
    b52e:	90 93 ac 0d 	sts	0x0DAC, r25
    b532:	a0 93 ad 0d 	sts	0x0DAD, r26
    b536:	b0 93 ae 0d 	sts	0x0DAE, r27
			game.player.shared.gravity = GRAVITY;
    b53a:	8f ef       	ldi	r24, 0xFF	; 255
    b53c:	80 93 b9 0d 	sts	0x0DB9, r24
    b540:	fd ce       	rjmp	.-518    	; 0xb33c <update_player+0x20a>
			game.player.width = 2;
			game.player.height = 3;
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), extendedSprites[PLAYER_SLOT].flags);
		}
		else if (game.joypadState.pressed & BTN_LEFT)
    b542:	86 ff       	sbrs	r24, 6
    b544:	08 c0       	rjmp	.+16     	; 0xb556 <update_player+0x424>
		{
			game.player.direction = D_LEFT;
    b546:	10 92 bd 0d 	sts	0x0DBD, r1
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.prone), SPRITE_FLIP_X);
    b54a:	87 e2       	ldi	r24, 0x27	; 39
    b54c:	9e e0       	ldi	r25, 0x0E	; 14
    b54e:	0e 94 46 46 	call	0x8c8c	; 0x8c8c <LBGetNextFrame>
    b552:	41 e0       	ldi	r20, 0x01	; 1
    b554:	0a c0       	rjmp	.+20     	; 0xb56a <update_player+0x438>
		}
		else if (game.joypadState.pressed & BTN_RIGHT)
    b556:	87 ff       	sbrs	r24, 7
    b558:	11 c0       	rjmp	.+34     	; 0xb57c <update_player+0x44a>
		{
			game.player.direction = D_RIGHT;
    b55a:	81 e0       	ldi	r24, 0x01	; 1
    b55c:	80 93 bd 0d 	sts	0x0DBD, r24
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.prone), 0);
    b560:	87 e2       	ldi	r24, 0x27	; 39
    b562:	9e e0       	ldi	r25, 0x0E	; 14
    b564:	0e 94 46 46 	call	0x8c8c	; 0x8c8c <LBGetNextFrame>
    b568:	40 e0       	ldi	r20, 0x00	; 0
    b56a:	bc 01       	movw	r22, r24
    b56c:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
}
    b56e:	0f 90       	pop	r0
    b570:	df 91       	pop	r29
    b572:	cf 91       	pop	r28
    b574:	1f 91       	pop	r17
    b576:	0f 91       	pop	r16
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.prone), SPRITE_FLIP_X);
		}
		else if (game.joypadState.pressed & BTN_RIGHT)
		{
			game.player.direction = D_RIGHT;
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.prone), 0);
    b578:	0c 94 78 47 	jmp	0x8ef0	; 0x8ef0 <LBMapSprite>
		}
	}
}
    b57c:	0f 90       	pop	r0
    b57e:	df 91       	pop	r29
    b580:	cf 91       	pop	r28
    b582:	1f 91       	pop	r17
    b584:	0f 91       	pop	r16
    b586:	08 95       	ret

0000b588 <select_pressed>:
	DrawMap2(6, 5, (const char*) map_splash);
	LBMapSprite(0, map_right_arrow, 0);
}

char select_pressed(JoyPadState* p)
{
    b588:	fc 01       	movw	r30, r24
    b58a:	20 81       	ld	r18, Z
    b58c:	31 81       	ldd	r19, Z+1	; 0x01
    b58e:	28 70       	andi	r18, 0x08	; 8
    b590:	31 70       	andi	r19, 0x01	; 1
	return (p->pressed & BTN_A) || (p->pressed & BTN_START);
    b592:	81 e0       	ldi	r24, 0x01	; 1
    b594:	23 2b       	or	r18, r19
    b596:	09 f4       	brne	.+2      	; 0xb59a <select_pressed+0x12>
    b598:	80 e0       	ldi	r24, 0x00	; 0
}
    b59a:	08 95       	ret

0000b59c <update_splash>:

void update_splash()
{
    b59c:	0f 93       	push	r16
    b59e:	cf 93       	push	r28
	if (game.joypadState.pressed & BTN_DOWN && game.selection == START_SELECTED)
    b5a0:	80 91 81 0f 	lds	r24, 0x0F81
    b5a4:	c0 91 a3 0d 	lds	r28, 0x0DA3
    b5a8:	85 ff       	sbrs	r24, 5
    b5aa:	06 c0       	rjmp	.+12     	; 0xb5b8 <update_splash+0x1c>
    b5ac:	c1 11       	cpse	r28, r1
    b5ae:	04 c0       	rjmp	.+8      	; 0xb5b8 <update_splash+0x1c>
	{
		game.selection = HIGH_SCORES_SELECTED;
    b5b0:	81 e0       	ldi	r24, 0x01	; 1
    b5b2:	80 93 a3 0d 	sts	0x0DA3, r24
    b5b6:	06 c0       	rjmp	.+12     	; 0xb5c4 <update_splash+0x28>
		SFX_NAVIGATE;
	}
	else if (game.joypadState.pressed & BTN_UP && game.selection == HIGH_SCORES_SELECTED)
    b5b8:	84 ff       	sbrs	r24, 4
    b5ba:	0a c0       	rjmp	.+20     	; 0xb5d0 <update_splash+0x34>
    b5bc:	c1 30       	cpi	r28, 0x01	; 1
    b5be:	41 f4       	brne	.+16     	; 0xb5d0 <update_splash+0x34>
	{
		game.selection = START_SELECTED;
    b5c0:	10 92 a3 0d 	sts	0x0DA3, r1
		SFX_NAVIGATE;
    b5c4:	41 e0       	ldi	r20, 0x01	; 1
    b5c6:	6f ef       	ldi	r22, 0xFF	; 255
    b5c8:	82 e0       	ldi	r24, 0x02	; 2
    b5ca:	0e 94 d7 3a 	call	0x75ae	; 0x75ae <TriggerFx>
    b5ce:	12 c0       	rjmp	.+36     	; 0xb5f4 <update_splash+0x58>
	}
	else if (select_pressed(&game.joypadState) && game.selection == START_SELECTED)
    b5d0:	81 e8       	ldi	r24, 0x81	; 129
    b5d2:	9f e0       	ldi	r25, 0x0F	; 15
    b5d4:	0e 94 c4 5a 	call	0xb588	; 0xb588 <select_pressed>
    b5d8:	88 23       	and	r24, r24
    b5da:	61 f0       	breq	.+24     	; 0xb5f4 <update_splash+0x58>
    b5dc:	c1 11       	cpse	r28, r1
    b5de:	0a c0       	rjmp	.+20     	; 0xb5f4 <update_splash+0x58>
	{
		game.current_screen = INTRO;
    b5e0:	84 e0       	ldi	r24, 0x04	; 4
    b5e2:	80 93 a0 0d 	sts	0x0DA0, r24
		SFX_NAVIGATE;
    b5e6:	41 e0       	ldi	r20, 0x01	; 1
    b5e8:	6f ef       	ldi	r22, 0xFF	; 255
    b5ea:	82 e0       	ldi	r24, 0x02	; 2
	}
	else
	{
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
	}
}
    b5ec:	cf 91       	pop	r28
    b5ee:	0f 91       	pop	r16
		SFX_NAVIGATE;
	}
	else if (select_pressed(&game.joypadState) && game.selection == START_SELECTED)
	{
		game.current_screen = INTRO;
		SFX_NAVIGATE;
    b5f0:	0c 94 d7 3a 	jmp	0x75ae	; 0x75ae <TriggerFx>
		return;
	}
	
	if (game.selection == START_SELECTED)
    b5f4:	80 91 a3 0d 	lds	r24, 0x0DA3
	{
		LBMoveSprite(0, 7*8, 15*8, 1, 1);
    b5f8:	01 e0       	ldi	r16, 0x01	; 1
    b5fa:	21 e0       	ldi	r18, 0x01	; 1
		game.current_screen = INTRO;
		SFX_NAVIGATE;
		return;
	}
	
	if (game.selection == START_SELECTED)
    b5fc:	81 11       	cpse	r24, r1
    b5fe:	03 c0       	rjmp	.+6      	; 0xb606 <update_splash+0x6a>
	{
		LBMoveSprite(0, 7*8, 15*8, 1, 1);
    b600:	48 e7       	ldi	r20, 0x78	; 120
    b602:	68 e3       	ldi	r22, 0x38	; 56
    b604:	03 c0       	rjmp	.+6      	; 0xb60c <update_splash+0x70>
	}
	else
	{
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
    b606:	40 e8       	ldi	r20, 0x80	; 128
    b608:	68 e3       	ldi	r22, 0x38	; 56
    b60a:	80 e0       	ldi	r24, 0x00	; 0
    b60c:	0e 94 ca 47 	call	0x8f94	; 0x8f94 <LBMoveSprite>
	}
}
    b610:	cf 91       	pop	r28
    b612:	0f 91       	pop	r16
    b614:	08 95       	ret

0000b616 <stream_dialogue>:

void stream_dialogue(const char* dialogue, u8 y)
{
    b616:	ff 92       	push	r15
    b618:	0f 93       	push	r16
    b61a:	1f 93       	push	r17
    b61c:	cf 93       	push	r28
    b61e:	df 93       	push	r29
    b620:	ec 01       	movw	r28, r24
    b622:	16 2f       	mov	r17, r22
	u8 x, ln, c;
	
	while (pgm_read_byte(dialogue) != '#')
	{
		ln = strnlen_P(dialogue, 255);
		x = 14 - ln / 2;
    b624:	8e e0       	ldi	r24, 0x0E	; 14
    b626:	f8 2e       	mov	r15, r24

void stream_dialogue(const char* dialogue, u8 y)
{
	u8 x, ln, c;
	
	while (pgm_read_byte(dialogue) != '#')
    b628:	fe 01       	movw	r30, r28
    b62a:	84 91       	lpm	r24, Z
    b62c:	83 32       	cpi	r24, 0x23	; 35
    b62e:	d9 f0       	breq	.+54     	; 0xb666 <stream_dialogue+0x50>
	{
		ln = strnlen_P(dialogue, 255);
    b630:	6f ef       	ldi	r22, 0xFF	; 255
    b632:	70 e0       	ldi	r23, 0x00	; 0
    b634:	ce 01       	movw	r24, r28
    b636:	0e 94 78 5d 	call	0xbaf0	; 0xbaf0 <strnlen_P>
		x = 14 - ln / 2;
    b63a:	86 95       	lsr	r24
    b63c:	0f 2d       	mov	r16, r15
    b63e:	08 1b       	sub	r16, r24
    b640:	0c 1b       	sub	r16, r28
    b642:	8c 2f       	mov	r24, r28
    b644:	80 0f       	add	r24, r16
		while ((c = pgm_read_byte(dialogue++)))
    b646:	21 96       	adiw	r28, 0x01	; 1
    b648:	fe 01       	movw	r30, r28
    b64a:	31 97       	sbiw	r30, 0x01	; 1
    b64c:	44 91       	lpm	r20, Z
    b64e:	44 23       	and	r20, r20
    b650:	41 f0       	breq	.+16     	; 0xb662 <stream_dialogue+0x4c>
		{
			LBPrintChar(x++, y, c);
    b652:	61 2f       	mov	r22, r17
    b654:	0e 94 b7 46 	call	0x8d6e	; 0x8d6e <LBPrintChar>
			WaitUs(CHARACTER_DELAY_US);
    b658:	80 e7       	ldi	r24, 0x70	; 112
    b65a:	97 e1       	ldi	r25, 0x17	; 23
    b65c:	0e 94 94 37 	call	0x6f28	; 0x6f28 <WaitUs>
    b660:	f0 cf       	rjmp	.-32     	; 0xb642 <stream_dialogue+0x2c>
		}
		y++;
    b662:	1f 5f       	subi	r17, 0xFF	; 255
    b664:	e1 cf       	rjmp	.-62     	; 0xb628 <stream_dialogue+0x12>
		//WaitUs(LINE_DELAY_US);
	}
}
    b666:	df 91       	pop	r29
    b668:	cf 91       	pop	r28
    b66a:	1f 91       	pop	r17
    b66c:	0f 91       	pop	r16
    b66e:	ff 90       	pop	r15
    b670:	08 95       	ret

0000b672 <update_intro>:

void update_intro()
{
	fade_through();
    b672:	0e 94 e4 57 	call	0xafc8	; 0xafc8 <fade_through>
	stream_dialogue((const char*) strIntro, 8);
    b676:	68 e0       	ldi	r22, 0x08	; 8
    b678:	89 e3       	ldi	r24, 0x39	; 57
    b67a:	9a e0       	ldi	r25, 0x0A	; 10
    b67c:	0e 94 0b 5b 	call	0xb616	; 0xb616 <stream_dialogue>
	LBWaitSeconds(1);
    b680:	81 e0       	ldi	r24, 0x01	; 1
    b682:	0e 94 69 47 	call	0x8ed2	; 0x8ed2 <LBWaitSeconds>
	game.current_screen = PLANET;
    b686:	82 e0       	ldi	r24, 0x02	; 2
    b688:	80 93 a0 0d 	sts	0x0DA0, r24
	level_transition(0);
    b68c:	80 e0       	ldi	r24, 0x00	; 0
    b68e:	0c 94 f4 57 	jmp	0xafe8	; 0xafe8 <level_transition>

0000b692 <main>:
}

int main()
{
	// Initialize
	InitMusicPlayer(my_patches);
    b692:	8b ee       	ldi	r24, 0xEB	; 235
    b694:	9c e1       	ldi	r25, 0x1C	; 28
    b696:	0e 94 ca 39 	call	0x7394	; 0x7394 <InitMusicPlayer>
	ClearVram();
    b69a:	0e 94 5e 37 	call	0x6ebc	; 0x6ebc <ClearVram>
	SetMasterVolume(0x05);
    b69e:	85 e0       	ldi	r24, 0x05	; 5
    b6a0:	0e 94 7e 3d 	call	0x7afc	; 0x7afc <SetMasterVolume>
	SetTileTable(tiles_data);
    b6a4:	84 e6       	ldi	r24, 0x64	; 100
    b6a6:	93 e5       	ldi	r25, 0x53	; 83
    b6a8:	0e 94 79 37 	call	0x6ef2	; 0x6ef2 <SetTileTable>
	SetSpritesTileTable(sprites_data);
    b6ac:	8a e6       	ldi	r24, 0x6A	; 106
    b6ae:	9e e1       	ldi	r25, 0x1E	; 30
    b6b0:	0e 94 59 37 	call	0x6eb2	; 0x6eb2 <SetSpritesTileTable>
	}
}

void LBSetFontTilesMap(char* tiles_map)
{
	font_tiles_map = tiles_map;
    b6b4:	84 e2       	ldi	r24, 0x24	; 36
    b6b6:	93 e6       	ldi	r25, 0x63	; 99
    b6b8:	90 93 6e 0d 	sts	0x0D6E, r25
    b6bc:	80 93 6d 0d 	sts	0x0D6D, r24
	LBSetFontTilesMap((char*) map_font);
	FadeIn(FRAMES_PER_FADE, false);
    b6c0:	60 e0       	ldi	r22, 0x00	; 0
    b6c2:	83 e0       	ldi	r24, 0x03	; 3
    b6c4:	0e 94 05 46 	call	0x8c0a	; 0x8c0a <FadeIn>
	init_game_state();
    b6c8:	0e 94 47 48 	call	0x908e	; 0x908e <init_game_state>
	load_splash();
    b6cc:	0e 94 2d 58 	call	0xb05a	; 0xb05a <load_splash>
	while (1)
	{
		WaitVsync(1);
    b6d0:	81 e0       	ldi	r24, 0x01	; 1
    b6d2:	90 e0       	ldi	r25, 0x00	; 0
    b6d4:	0e 94 a9 45 	call	0x8b52	; 0x8b52 <WaitVsync>
		LBGetJoyPadState(&game.joypadState, 0);
    b6d8:	60 e0       	ldi	r22, 0x00	; 0
    b6da:	81 e8       	ldi	r24, 0x81	; 129
    b6dc:	9f e0       	ldi	r25, 0x0F	; 15
    b6de:	0e 94 6c 46 	call	0x8cd8	; 0x8cd8 <LBGetJoyPadState>
		if (game.current_screen == PLANET || game.current_screen == SPACE)
    b6e2:	80 91 a0 0d 	lds	r24, 0x0DA0
    b6e6:	9e ef       	ldi	r25, 0xFE	; 254
    b6e8:	98 0f       	add	r25, r24
    b6ea:	92 30       	cpi	r25, 0x02	; 2
    b6ec:	98 f4       	brcc	.+38     	; 0xb714 <main+0x82>
		{
			update_level();
    b6ee:	0e 94 1c 57 	call	0xae38	; 0xae38 <update_level>
			update_player();
    b6f2:	0e 94 99 58 	call	0xb132	; 0xb132 <update_player>
			update_shot();
    b6f6:	0e 94 af 4c 	call	0x995e	; 0x995e <update_shot>
			update_enemies();
    b6fa:	0e 94 c7 53 	call	0xa78e	; 0xa78e <update_enemies>
			update_enemy_shots();
    b6fe:	0e 94 04 54 	call	0xa808	; 0xa808 <update_enemy_shots>
			animate_player();
    b702:	0e 94 27 53 	call	0xa64e	; 0xa64e <animate_player>
			animate_shot();
    b706:	0e 94 a3 50 	call	0xa146	; 0xa146 <animate_shot>
			animate_enemies();
    b70a:	0e 94 9e 54 	call	0xa93c	; 0xa93c <animate_enemies>
			animate_enemy_shots();
    b70e:	0e 94 e1 55 	call	0xabc2	; 0xabc2 <animate_enemy_shots>
    b712:	09 c0       	rjmp	.+18     	; 0xb726 <main+0x94>
		}
		else if (game.current_screen == SPLASH)
    b714:	81 11       	cpse	r24, r1
    b716:	03 c0       	rjmp	.+6      	; 0xb71e <main+0x8c>
		{
			update_splash();
    b718:	0e 94 ce 5a 	call	0xb59c	; 0xb59c <update_splash>
    b71c:	04 c0       	rjmp	.+8      	; 0xb726 <main+0x94>
			
		}
		else if (game.current_screen == INTRO)
    b71e:	84 30       	cpi	r24, 0x04	; 4
    b720:	11 f4       	brne	.+4      	; 0xb726 <main+0x94>
		{
			update_intro();
    b722:	0e 94 39 5b 	call	0xb672	; 0xb672 <update_intro>
		}
		else if (game.current_screen == SPACE_TRANSITION)
		{
			update_space_transition();
		}
		LBRotateSprites();
    b726:	0e 94 08 48 	call	0x9010	; 0x9010 <LBRotateSprites>
	}
    b72a:	d2 cf       	rjmp	.-92     	; 0xb6d0 <main+0x3e>

0000b72c <__udivmodqi4>:
    b72c:	99 1b       	sub	r25, r25
    b72e:	79 e0       	ldi	r23, 0x09	; 9
    b730:	04 c0       	rjmp	.+8      	; 0xb73a <__udivmodqi4_ep>

0000b732 <__udivmodqi4_loop>:
    b732:	99 1f       	adc	r25, r25
    b734:	96 17       	cp	r25, r22
    b736:	08 f0       	brcs	.+2      	; 0xb73a <__udivmodqi4_ep>
    b738:	96 1b       	sub	r25, r22

0000b73a <__udivmodqi4_ep>:
    b73a:	88 1f       	adc	r24, r24
    b73c:	7a 95       	dec	r23
    b73e:	c9 f7       	brne	.-14     	; 0xb732 <__udivmodqi4_loop>
    b740:	80 95       	com	r24
    b742:	08 95       	ret

0000b744 <__udivmodhi4>:
    b744:	aa 1b       	sub	r26, r26
    b746:	bb 1b       	sub	r27, r27
    b748:	51 e1       	ldi	r21, 0x11	; 17
    b74a:	07 c0       	rjmp	.+14     	; 0xb75a <__udivmodhi4_ep>

0000b74c <__udivmodhi4_loop>:
    b74c:	aa 1f       	adc	r26, r26
    b74e:	bb 1f       	adc	r27, r27
    b750:	a6 17       	cp	r26, r22
    b752:	b7 07       	cpc	r27, r23
    b754:	10 f0       	brcs	.+4      	; 0xb75a <__udivmodhi4_ep>
    b756:	a6 1b       	sub	r26, r22
    b758:	b7 0b       	sbc	r27, r23

0000b75a <__udivmodhi4_ep>:
    b75a:	88 1f       	adc	r24, r24
    b75c:	99 1f       	adc	r25, r25
    b75e:	5a 95       	dec	r21
    b760:	a9 f7       	brne	.-22     	; 0xb74c <__udivmodhi4_loop>
    b762:	80 95       	com	r24
    b764:	90 95       	com	r25
    b766:	bc 01       	movw	r22, r24
    b768:	cd 01       	movw	r24, r26
    b76a:	08 95       	ret

0000b76c <__divmodhi4>:
    b76c:	97 fb       	bst	r25, 7
    b76e:	07 2e       	mov	r0, r23
    b770:	16 f4       	brtc	.+4      	; 0xb776 <__divmodhi4+0xa>
    b772:	00 94       	com	r0
    b774:	07 d0       	rcall	.+14     	; 0xb784 <__divmodhi4_neg1>
    b776:	77 fd       	sbrc	r23, 7
    b778:	09 d0       	rcall	.+18     	; 0xb78c <__divmodhi4_neg2>
    b77a:	0e 94 a2 5b 	call	0xb744	; 0xb744 <__udivmodhi4>
    b77e:	07 fc       	sbrc	r0, 7
    b780:	05 d0       	rcall	.+10     	; 0xb78c <__divmodhi4_neg2>
    b782:	3e f4       	brtc	.+14     	; 0xb792 <__divmodhi4_exit>

0000b784 <__divmodhi4_neg1>:
    b784:	90 95       	com	r25
    b786:	81 95       	neg	r24
    b788:	9f 4f       	sbci	r25, 0xFF	; 255
    b78a:	08 95       	ret

0000b78c <__divmodhi4_neg2>:
    b78c:	70 95       	com	r23
    b78e:	61 95       	neg	r22
    b790:	7f 4f       	sbci	r23, 0xFF	; 255

0000b792 <__divmodhi4_exit>:
    b792:	08 95       	ret

0000b794 <__subsf3>:
    b794:	50 58       	subi	r21, 0x80	; 128

0000b796 <__addsf3>:
    b796:	bb 27       	eor	r27, r27
    b798:	aa 27       	eor	r26, r26
    b79a:	0e d0       	rcall	.+28     	; 0xb7b8 <__addsf3x>
    b79c:	08 c1       	rjmp	.+528    	; 0xb9ae <__fp_round>
    b79e:	f9 d0       	rcall	.+498    	; 0xb992 <__fp_pscA>
    b7a0:	30 f0       	brcs	.+12     	; 0xb7ae <__addsf3+0x18>
    b7a2:	fe d0       	rcall	.+508    	; 0xb9a0 <__fp_pscB>
    b7a4:	20 f0       	brcs	.+8      	; 0xb7ae <__addsf3+0x18>
    b7a6:	31 f4       	brne	.+12     	; 0xb7b4 <__addsf3+0x1e>
    b7a8:	9f 3f       	cpi	r25, 0xFF	; 255
    b7aa:	11 f4       	brne	.+4      	; 0xb7b0 <__addsf3+0x1a>
    b7ac:	1e f4       	brtc	.+6      	; 0xb7b4 <__addsf3+0x1e>
    b7ae:	ee c0       	rjmp	.+476    	; 0xb98c <__fp_nan>
    b7b0:	0e f4       	brtc	.+2      	; 0xb7b4 <__addsf3+0x1e>
    b7b2:	e0 95       	com	r30
    b7b4:	e7 fb       	bst	r30, 7
    b7b6:	e4 c0       	rjmp	.+456    	; 0xb980 <__fp_inf>

0000b7b8 <__addsf3x>:
    b7b8:	e9 2f       	mov	r30, r25
    b7ba:	0a d1       	rcall	.+532    	; 0xb9d0 <__fp_split3>
    b7bc:	80 f3       	brcs	.-32     	; 0xb79e <__addsf3+0x8>
    b7be:	ba 17       	cp	r27, r26
    b7c0:	62 07       	cpc	r22, r18
    b7c2:	73 07       	cpc	r23, r19
    b7c4:	84 07       	cpc	r24, r20
    b7c6:	95 07       	cpc	r25, r21
    b7c8:	18 f0       	brcs	.+6      	; 0xb7d0 <__addsf3x+0x18>
    b7ca:	71 f4       	brne	.+28     	; 0xb7e8 <__addsf3x+0x30>
    b7cc:	9e f5       	brtc	.+102    	; 0xb834 <__addsf3x+0x7c>
    b7ce:	22 c1       	rjmp	.+580    	; 0xba14 <__fp_zero>
    b7d0:	0e f4       	brtc	.+2      	; 0xb7d4 <__addsf3x+0x1c>
    b7d2:	e0 95       	com	r30
    b7d4:	0b 2e       	mov	r0, r27
    b7d6:	ba 2f       	mov	r27, r26
    b7d8:	a0 2d       	mov	r26, r0
    b7da:	0b 01       	movw	r0, r22
    b7dc:	b9 01       	movw	r22, r18
    b7de:	90 01       	movw	r18, r0
    b7e0:	0c 01       	movw	r0, r24
    b7e2:	ca 01       	movw	r24, r20
    b7e4:	a0 01       	movw	r20, r0
    b7e6:	11 24       	eor	r1, r1
    b7e8:	ff 27       	eor	r31, r31
    b7ea:	59 1b       	sub	r21, r25
    b7ec:	99 f0       	breq	.+38     	; 0xb814 <__addsf3x+0x5c>
    b7ee:	59 3f       	cpi	r21, 0xF9	; 249
    b7f0:	50 f4       	brcc	.+20     	; 0xb806 <__addsf3x+0x4e>
    b7f2:	50 3e       	cpi	r21, 0xE0	; 224
    b7f4:	68 f1       	brcs	.+90     	; 0xb850 <__addsf3x+0x98>
    b7f6:	1a 16       	cp	r1, r26
    b7f8:	f0 40       	sbci	r31, 0x00	; 0
    b7fa:	a2 2f       	mov	r26, r18
    b7fc:	23 2f       	mov	r18, r19
    b7fe:	34 2f       	mov	r19, r20
    b800:	44 27       	eor	r20, r20
    b802:	58 5f       	subi	r21, 0xF8	; 248
    b804:	f3 cf       	rjmp	.-26     	; 0xb7ec <__addsf3x+0x34>
    b806:	46 95       	lsr	r20
    b808:	37 95       	ror	r19
    b80a:	27 95       	ror	r18
    b80c:	a7 95       	ror	r26
    b80e:	f0 40       	sbci	r31, 0x00	; 0
    b810:	53 95       	inc	r21
    b812:	c9 f7       	brne	.-14     	; 0xb806 <__addsf3x+0x4e>
    b814:	7e f4       	brtc	.+30     	; 0xb834 <__addsf3x+0x7c>
    b816:	1f 16       	cp	r1, r31
    b818:	ba 0b       	sbc	r27, r26
    b81a:	62 0b       	sbc	r22, r18
    b81c:	73 0b       	sbc	r23, r19
    b81e:	84 0b       	sbc	r24, r20
    b820:	ba f0       	brmi	.+46     	; 0xb850 <__addsf3x+0x98>
    b822:	91 50       	subi	r25, 0x01	; 1
    b824:	a1 f0       	breq	.+40     	; 0xb84e <__addsf3x+0x96>
    b826:	ff 0f       	add	r31, r31
    b828:	bb 1f       	adc	r27, r27
    b82a:	66 1f       	adc	r22, r22
    b82c:	77 1f       	adc	r23, r23
    b82e:	88 1f       	adc	r24, r24
    b830:	c2 f7       	brpl	.-16     	; 0xb822 <__addsf3x+0x6a>
    b832:	0e c0       	rjmp	.+28     	; 0xb850 <__addsf3x+0x98>
    b834:	ba 0f       	add	r27, r26
    b836:	62 1f       	adc	r22, r18
    b838:	73 1f       	adc	r23, r19
    b83a:	84 1f       	adc	r24, r20
    b83c:	48 f4       	brcc	.+18     	; 0xb850 <__addsf3x+0x98>
    b83e:	87 95       	ror	r24
    b840:	77 95       	ror	r23
    b842:	67 95       	ror	r22
    b844:	b7 95       	ror	r27
    b846:	f7 95       	ror	r31
    b848:	9e 3f       	cpi	r25, 0xFE	; 254
    b84a:	08 f0       	brcs	.+2      	; 0xb84e <__addsf3x+0x96>
    b84c:	b3 cf       	rjmp	.-154    	; 0xb7b4 <__addsf3+0x1e>
    b84e:	93 95       	inc	r25
    b850:	88 0f       	add	r24, r24
    b852:	08 f0       	brcs	.+2      	; 0xb856 <__addsf3x+0x9e>
    b854:	99 27       	eor	r25, r25
    b856:	ee 0f       	add	r30, r30
    b858:	97 95       	ror	r25
    b85a:	87 95       	ror	r24
    b85c:	08 95       	ret

0000b85e <__cmpsf2>:
    b85e:	6c d0       	rcall	.+216    	; 0xb938 <__fp_cmp>
    b860:	08 f4       	brcc	.+2      	; 0xb864 <__cmpsf2+0x6>
    b862:	81 e0       	ldi	r24, 0x01	; 1
    b864:	08 95       	ret

0000b866 <__fixunssfsi>:
    b866:	bc d0       	rcall	.+376    	; 0xb9e0 <__fp_splitA>
    b868:	88 f0       	brcs	.+34     	; 0xb88c <__fixunssfsi+0x26>
    b86a:	9f 57       	subi	r25, 0x7F	; 127
    b86c:	90 f0       	brcs	.+36     	; 0xb892 <__fixunssfsi+0x2c>
    b86e:	b9 2f       	mov	r27, r25
    b870:	99 27       	eor	r25, r25
    b872:	b7 51       	subi	r27, 0x17	; 23
    b874:	a0 f0       	brcs	.+40     	; 0xb89e <__fixunssfsi+0x38>
    b876:	d1 f0       	breq	.+52     	; 0xb8ac <__fixunssfsi+0x46>
    b878:	66 0f       	add	r22, r22
    b87a:	77 1f       	adc	r23, r23
    b87c:	88 1f       	adc	r24, r24
    b87e:	99 1f       	adc	r25, r25
    b880:	1a f0       	brmi	.+6      	; 0xb888 <__fixunssfsi+0x22>
    b882:	ba 95       	dec	r27
    b884:	c9 f7       	brne	.-14     	; 0xb878 <__fixunssfsi+0x12>
    b886:	12 c0       	rjmp	.+36     	; 0xb8ac <__fixunssfsi+0x46>
    b888:	b1 30       	cpi	r27, 0x01	; 1
    b88a:	81 f0       	breq	.+32     	; 0xb8ac <__fixunssfsi+0x46>
    b88c:	c3 d0       	rcall	.+390    	; 0xba14 <__fp_zero>
    b88e:	b1 e0       	ldi	r27, 0x01	; 1
    b890:	08 95       	ret
    b892:	c0 c0       	rjmp	.+384    	; 0xba14 <__fp_zero>
    b894:	67 2f       	mov	r22, r23
    b896:	78 2f       	mov	r23, r24
    b898:	88 27       	eor	r24, r24
    b89a:	b8 5f       	subi	r27, 0xF8	; 248
    b89c:	39 f0       	breq	.+14     	; 0xb8ac <__fixunssfsi+0x46>
    b89e:	b9 3f       	cpi	r27, 0xF9	; 249
    b8a0:	cc f3       	brlt	.-14     	; 0xb894 <__fixunssfsi+0x2e>
    b8a2:	86 95       	lsr	r24
    b8a4:	77 95       	ror	r23
    b8a6:	67 95       	ror	r22
    b8a8:	b3 95       	inc	r27
    b8aa:	d9 f7       	brne	.-10     	; 0xb8a2 <__fixunssfsi+0x3c>
    b8ac:	3e f4       	brtc	.+14     	; 0xb8bc <__fixunssfsi+0x56>
    b8ae:	90 95       	com	r25
    b8b0:	80 95       	com	r24
    b8b2:	70 95       	com	r23
    b8b4:	61 95       	neg	r22
    b8b6:	7f 4f       	sbci	r23, 0xFF	; 255
    b8b8:	8f 4f       	sbci	r24, 0xFF	; 255
    b8ba:	9f 4f       	sbci	r25, 0xFF	; 255
    b8bc:	08 95       	ret

0000b8be <__floatunsisf>:
    b8be:	e8 94       	clt
    b8c0:	09 c0       	rjmp	.+18     	; 0xb8d4 <__floatsisf+0x12>

0000b8c2 <__floatsisf>:
    b8c2:	97 fb       	bst	r25, 7
    b8c4:	3e f4       	brtc	.+14     	; 0xb8d4 <__floatsisf+0x12>
    b8c6:	90 95       	com	r25
    b8c8:	80 95       	com	r24
    b8ca:	70 95       	com	r23
    b8cc:	61 95       	neg	r22
    b8ce:	7f 4f       	sbci	r23, 0xFF	; 255
    b8d0:	8f 4f       	sbci	r24, 0xFF	; 255
    b8d2:	9f 4f       	sbci	r25, 0xFF	; 255
    b8d4:	99 23       	and	r25, r25
    b8d6:	a9 f0       	breq	.+42     	; 0xb902 <__floatsisf+0x40>
    b8d8:	f9 2f       	mov	r31, r25
    b8da:	96 e9       	ldi	r25, 0x96	; 150
    b8dc:	bb 27       	eor	r27, r27
    b8de:	93 95       	inc	r25
    b8e0:	f6 95       	lsr	r31
    b8e2:	87 95       	ror	r24
    b8e4:	77 95       	ror	r23
    b8e6:	67 95       	ror	r22
    b8e8:	b7 95       	ror	r27
    b8ea:	f1 11       	cpse	r31, r1
    b8ec:	f8 cf       	rjmp	.-16     	; 0xb8de <__floatsisf+0x1c>
    b8ee:	fa f4       	brpl	.+62     	; 0xb92e <__floatsisf+0x6c>
    b8f0:	bb 0f       	add	r27, r27
    b8f2:	11 f4       	brne	.+4      	; 0xb8f8 <__floatsisf+0x36>
    b8f4:	60 ff       	sbrs	r22, 0
    b8f6:	1b c0       	rjmp	.+54     	; 0xb92e <__floatsisf+0x6c>
    b8f8:	6f 5f       	subi	r22, 0xFF	; 255
    b8fa:	7f 4f       	sbci	r23, 0xFF	; 255
    b8fc:	8f 4f       	sbci	r24, 0xFF	; 255
    b8fe:	9f 4f       	sbci	r25, 0xFF	; 255
    b900:	16 c0       	rjmp	.+44     	; 0xb92e <__floatsisf+0x6c>
    b902:	88 23       	and	r24, r24
    b904:	11 f0       	breq	.+4      	; 0xb90a <__floatsisf+0x48>
    b906:	96 e9       	ldi	r25, 0x96	; 150
    b908:	11 c0       	rjmp	.+34     	; 0xb92c <__floatsisf+0x6a>
    b90a:	77 23       	and	r23, r23
    b90c:	21 f0       	breq	.+8      	; 0xb916 <__floatsisf+0x54>
    b90e:	9e e8       	ldi	r25, 0x8E	; 142
    b910:	87 2f       	mov	r24, r23
    b912:	76 2f       	mov	r23, r22
    b914:	05 c0       	rjmp	.+10     	; 0xb920 <__floatsisf+0x5e>
    b916:	66 23       	and	r22, r22
    b918:	71 f0       	breq	.+28     	; 0xb936 <__floatsisf+0x74>
    b91a:	96 e8       	ldi	r25, 0x86	; 134
    b91c:	86 2f       	mov	r24, r22
    b91e:	70 e0       	ldi	r23, 0x00	; 0
    b920:	60 e0       	ldi	r22, 0x00	; 0
    b922:	2a f0       	brmi	.+10     	; 0xb92e <__floatsisf+0x6c>
    b924:	9a 95       	dec	r25
    b926:	66 0f       	add	r22, r22
    b928:	77 1f       	adc	r23, r23
    b92a:	88 1f       	adc	r24, r24
    b92c:	da f7       	brpl	.-10     	; 0xb924 <__floatsisf+0x62>
    b92e:	88 0f       	add	r24, r24
    b930:	96 95       	lsr	r25
    b932:	87 95       	ror	r24
    b934:	97 f9       	bld	r25, 7
    b936:	08 95       	ret

0000b938 <__fp_cmp>:
    b938:	99 0f       	add	r25, r25
    b93a:	00 08       	sbc	r0, r0
    b93c:	55 0f       	add	r21, r21
    b93e:	aa 0b       	sbc	r26, r26
    b940:	e0 e8       	ldi	r30, 0x80	; 128
    b942:	fe ef       	ldi	r31, 0xFE	; 254
    b944:	16 16       	cp	r1, r22
    b946:	17 06       	cpc	r1, r23
    b948:	e8 07       	cpc	r30, r24
    b94a:	f9 07       	cpc	r31, r25
    b94c:	c0 f0       	brcs	.+48     	; 0xb97e <__fp_cmp+0x46>
    b94e:	12 16       	cp	r1, r18
    b950:	13 06       	cpc	r1, r19
    b952:	e4 07       	cpc	r30, r20
    b954:	f5 07       	cpc	r31, r21
    b956:	98 f0       	brcs	.+38     	; 0xb97e <__fp_cmp+0x46>
    b958:	62 1b       	sub	r22, r18
    b95a:	73 0b       	sbc	r23, r19
    b95c:	84 0b       	sbc	r24, r20
    b95e:	95 0b       	sbc	r25, r21
    b960:	39 f4       	brne	.+14     	; 0xb970 <__fp_cmp+0x38>
    b962:	0a 26       	eor	r0, r26
    b964:	61 f0       	breq	.+24     	; 0xb97e <__fp_cmp+0x46>
    b966:	23 2b       	or	r18, r19
    b968:	24 2b       	or	r18, r20
    b96a:	25 2b       	or	r18, r21
    b96c:	21 f4       	brne	.+8      	; 0xb976 <__fp_cmp+0x3e>
    b96e:	08 95       	ret
    b970:	0a 26       	eor	r0, r26
    b972:	09 f4       	brne	.+2      	; 0xb976 <__fp_cmp+0x3e>
    b974:	a1 40       	sbci	r26, 0x01	; 1
    b976:	a6 95       	lsr	r26
    b978:	8f ef       	ldi	r24, 0xFF	; 255
    b97a:	81 1d       	adc	r24, r1
    b97c:	81 1d       	adc	r24, r1
    b97e:	08 95       	ret

0000b980 <__fp_inf>:
    b980:	97 f9       	bld	r25, 7
    b982:	9f 67       	ori	r25, 0x7F	; 127
    b984:	80 e8       	ldi	r24, 0x80	; 128
    b986:	70 e0       	ldi	r23, 0x00	; 0
    b988:	60 e0       	ldi	r22, 0x00	; 0
    b98a:	08 95       	ret

0000b98c <__fp_nan>:
    b98c:	9f ef       	ldi	r25, 0xFF	; 255
    b98e:	80 ec       	ldi	r24, 0xC0	; 192
    b990:	08 95       	ret

0000b992 <__fp_pscA>:
    b992:	00 24       	eor	r0, r0
    b994:	0a 94       	dec	r0
    b996:	16 16       	cp	r1, r22
    b998:	17 06       	cpc	r1, r23
    b99a:	18 06       	cpc	r1, r24
    b99c:	09 06       	cpc	r0, r25
    b99e:	08 95       	ret

0000b9a0 <__fp_pscB>:
    b9a0:	00 24       	eor	r0, r0
    b9a2:	0a 94       	dec	r0
    b9a4:	12 16       	cp	r1, r18
    b9a6:	13 06       	cpc	r1, r19
    b9a8:	14 06       	cpc	r1, r20
    b9aa:	05 06       	cpc	r0, r21
    b9ac:	08 95       	ret

0000b9ae <__fp_round>:
    b9ae:	09 2e       	mov	r0, r25
    b9b0:	03 94       	inc	r0
    b9b2:	00 0c       	add	r0, r0
    b9b4:	11 f4       	brne	.+4      	; 0xb9ba <__fp_round+0xc>
    b9b6:	88 23       	and	r24, r24
    b9b8:	52 f0       	brmi	.+20     	; 0xb9ce <__fp_round+0x20>
    b9ba:	bb 0f       	add	r27, r27
    b9bc:	40 f4       	brcc	.+16     	; 0xb9ce <__fp_round+0x20>
    b9be:	bf 2b       	or	r27, r31
    b9c0:	11 f4       	brne	.+4      	; 0xb9c6 <__fp_round+0x18>
    b9c2:	60 ff       	sbrs	r22, 0
    b9c4:	04 c0       	rjmp	.+8      	; 0xb9ce <__fp_round+0x20>
    b9c6:	6f 5f       	subi	r22, 0xFF	; 255
    b9c8:	7f 4f       	sbci	r23, 0xFF	; 255
    b9ca:	8f 4f       	sbci	r24, 0xFF	; 255
    b9cc:	9f 4f       	sbci	r25, 0xFF	; 255
    b9ce:	08 95       	ret

0000b9d0 <__fp_split3>:
    b9d0:	57 fd       	sbrc	r21, 7
    b9d2:	90 58       	subi	r25, 0x80	; 128
    b9d4:	44 0f       	add	r20, r20
    b9d6:	55 1f       	adc	r21, r21
    b9d8:	59 f0       	breq	.+22     	; 0xb9f0 <__fp_splitA+0x10>
    b9da:	5f 3f       	cpi	r21, 0xFF	; 255
    b9dc:	71 f0       	breq	.+28     	; 0xb9fa <__fp_splitA+0x1a>
    b9de:	47 95       	ror	r20

0000b9e0 <__fp_splitA>:
    b9e0:	88 0f       	add	r24, r24
    b9e2:	97 fb       	bst	r25, 7
    b9e4:	99 1f       	adc	r25, r25
    b9e6:	61 f0       	breq	.+24     	; 0xba00 <__fp_splitA+0x20>
    b9e8:	9f 3f       	cpi	r25, 0xFF	; 255
    b9ea:	79 f0       	breq	.+30     	; 0xba0a <__fp_splitA+0x2a>
    b9ec:	87 95       	ror	r24
    b9ee:	08 95       	ret
    b9f0:	12 16       	cp	r1, r18
    b9f2:	13 06       	cpc	r1, r19
    b9f4:	14 06       	cpc	r1, r20
    b9f6:	55 1f       	adc	r21, r21
    b9f8:	f2 cf       	rjmp	.-28     	; 0xb9de <__fp_split3+0xe>
    b9fa:	46 95       	lsr	r20
    b9fc:	f1 df       	rcall	.-30     	; 0xb9e0 <__fp_splitA>
    b9fe:	08 c0       	rjmp	.+16     	; 0xba10 <__fp_splitA+0x30>
    ba00:	16 16       	cp	r1, r22
    ba02:	17 06       	cpc	r1, r23
    ba04:	18 06       	cpc	r1, r24
    ba06:	99 1f       	adc	r25, r25
    ba08:	f1 cf       	rjmp	.-30     	; 0xb9ec <__fp_splitA+0xc>
    ba0a:	86 95       	lsr	r24
    ba0c:	71 05       	cpc	r23, r1
    ba0e:	61 05       	cpc	r22, r1
    ba10:	08 94       	sec
    ba12:	08 95       	ret

0000ba14 <__fp_zero>:
    ba14:	e8 94       	clt

0000ba16 <__fp_szero>:
    ba16:	bb 27       	eor	r27, r27
    ba18:	66 27       	eor	r22, r22
    ba1a:	77 27       	eor	r23, r23
    ba1c:	cb 01       	movw	r24, r22
    ba1e:	97 f9       	bld	r25, 7
    ba20:	08 95       	ret

0000ba22 <__gesf2>:
    ba22:	8a df       	rcall	.-236    	; 0xb938 <__fp_cmp>
    ba24:	08 f4       	brcc	.+2      	; 0xba28 <__gesf2+0x6>
    ba26:	8f ef       	ldi	r24, 0xFF	; 255
    ba28:	08 95       	ret

0000ba2a <__mulsf3>:
    ba2a:	0b d0       	rcall	.+22     	; 0xba42 <__mulsf3x>
    ba2c:	c0 cf       	rjmp	.-128    	; 0xb9ae <__fp_round>
    ba2e:	b1 df       	rcall	.-158    	; 0xb992 <__fp_pscA>
    ba30:	28 f0       	brcs	.+10     	; 0xba3c <__mulsf3+0x12>
    ba32:	b6 df       	rcall	.-148    	; 0xb9a0 <__fp_pscB>
    ba34:	18 f0       	brcs	.+6      	; 0xba3c <__mulsf3+0x12>
    ba36:	95 23       	and	r25, r21
    ba38:	09 f0       	breq	.+2      	; 0xba3c <__mulsf3+0x12>
    ba3a:	a2 cf       	rjmp	.-188    	; 0xb980 <__fp_inf>
    ba3c:	a7 cf       	rjmp	.-178    	; 0xb98c <__fp_nan>
    ba3e:	11 24       	eor	r1, r1
    ba40:	ea cf       	rjmp	.-44     	; 0xba16 <__fp_szero>

0000ba42 <__mulsf3x>:
    ba42:	c6 df       	rcall	.-116    	; 0xb9d0 <__fp_split3>
    ba44:	a0 f3       	brcs	.-24     	; 0xba2e <__mulsf3+0x4>

0000ba46 <__mulsf3_pse>:
    ba46:	95 9f       	mul	r25, r21
    ba48:	d1 f3       	breq	.-12     	; 0xba3e <__mulsf3+0x14>
    ba4a:	95 0f       	add	r25, r21
    ba4c:	50 e0       	ldi	r21, 0x00	; 0
    ba4e:	55 1f       	adc	r21, r21
    ba50:	62 9f       	mul	r22, r18
    ba52:	f0 01       	movw	r30, r0
    ba54:	72 9f       	mul	r23, r18
    ba56:	bb 27       	eor	r27, r27
    ba58:	f0 0d       	add	r31, r0
    ba5a:	b1 1d       	adc	r27, r1
    ba5c:	63 9f       	mul	r22, r19
    ba5e:	aa 27       	eor	r26, r26
    ba60:	f0 0d       	add	r31, r0
    ba62:	b1 1d       	adc	r27, r1
    ba64:	aa 1f       	adc	r26, r26
    ba66:	64 9f       	mul	r22, r20
    ba68:	66 27       	eor	r22, r22
    ba6a:	b0 0d       	add	r27, r0
    ba6c:	a1 1d       	adc	r26, r1
    ba6e:	66 1f       	adc	r22, r22
    ba70:	82 9f       	mul	r24, r18
    ba72:	22 27       	eor	r18, r18
    ba74:	b0 0d       	add	r27, r0
    ba76:	a1 1d       	adc	r26, r1
    ba78:	62 1f       	adc	r22, r18
    ba7a:	73 9f       	mul	r23, r19
    ba7c:	b0 0d       	add	r27, r0
    ba7e:	a1 1d       	adc	r26, r1
    ba80:	62 1f       	adc	r22, r18
    ba82:	83 9f       	mul	r24, r19
    ba84:	a0 0d       	add	r26, r0
    ba86:	61 1d       	adc	r22, r1
    ba88:	22 1f       	adc	r18, r18
    ba8a:	74 9f       	mul	r23, r20
    ba8c:	33 27       	eor	r19, r19
    ba8e:	a0 0d       	add	r26, r0
    ba90:	61 1d       	adc	r22, r1
    ba92:	23 1f       	adc	r18, r19
    ba94:	84 9f       	mul	r24, r20
    ba96:	60 0d       	add	r22, r0
    ba98:	21 1d       	adc	r18, r1
    ba9a:	82 2f       	mov	r24, r18
    ba9c:	76 2f       	mov	r23, r22
    ba9e:	6a 2f       	mov	r22, r26
    baa0:	11 24       	eor	r1, r1
    baa2:	9f 57       	subi	r25, 0x7F	; 127
    baa4:	50 40       	sbci	r21, 0x00	; 0
    baa6:	8a f0       	brmi	.+34     	; 0xbaca <__mulsf3_pse+0x84>
    baa8:	e1 f0       	breq	.+56     	; 0xbae2 <__mulsf3_pse+0x9c>
    baaa:	88 23       	and	r24, r24
    baac:	4a f0       	brmi	.+18     	; 0xbac0 <__mulsf3_pse+0x7a>
    baae:	ee 0f       	add	r30, r30
    bab0:	ff 1f       	adc	r31, r31
    bab2:	bb 1f       	adc	r27, r27
    bab4:	66 1f       	adc	r22, r22
    bab6:	77 1f       	adc	r23, r23
    bab8:	88 1f       	adc	r24, r24
    baba:	91 50       	subi	r25, 0x01	; 1
    babc:	50 40       	sbci	r21, 0x00	; 0
    babe:	a9 f7       	brne	.-22     	; 0xbaaa <__mulsf3_pse+0x64>
    bac0:	9e 3f       	cpi	r25, 0xFE	; 254
    bac2:	51 05       	cpc	r21, r1
    bac4:	70 f0       	brcs	.+28     	; 0xbae2 <__mulsf3_pse+0x9c>
    bac6:	5c cf       	rjmp	.-328    	; 0xb980 <__fp_inf>
    bac8:	a6 cf       	rjmp	.-180    	; 0xba16 <__fp_szero>
    baca:	5f 3f       	cpi	r21, 0xFF	; 255
    bacc:	ec f3       	brlt	.-6      	; 0xbac8 <__mulsf3_pse+0x82>
    bace:	98 3e       	cpi	r25, 0xE8	; 232
    bad0:	dc f3       	brlt	.-10     	; 0xbac8 <__mulsf3_pse+0x82>
    bad2:	86 95       	lsr	r24
    bad4:	77 95       	ror	r23
    bad6:	67 95       	ror	r22
    bad8:	b7 95       	ror	r27
    bada:	f7 95       	ror	r31
    badc:	e7 95       	ror	r30
    bade:	9f 5f       	subi	r25, 0xFF	; 255
    bae0:	c1 f7       	brne	.-16     	; 0xbad2 <__mulsf3_pse+0x8c>
    bae2:	fe 2b       	or	r31, r30
    bae4:	88 0f       	add	r24, r24
    bae6:	91 1d       	adc	r25, r1
    bae8:	96 95       	lsr	r25
    baea:	87 95       	ror	r24
    baec:	97 f9       	bld	r25, 7
    baee:	08 95       	ret

0000baf0 <strnlen_P>:
    baf0:	fc 01       	movw	r30, r24
    baf2:	05 90       	lpm	r0, Z+
    baf4:	61 50       	subi	r22, 0x01	; 1
    baf6:	70 40       	sbci	r23, 0x00	; 0
    baf8:	01 10       	cpse	r0, r1
    bafa:	d8 f7       	brcc	.-10     	; 0xbaf2 <strnlen_P+0x2>
    bafc:	80 95       	com	r24
    bafe:	90 95       	com	r25
    bb00:	8e 0f       	add	r24, r30
    bb02:	9f 1f       	adc	r25, r31
    bb04:	08 95       	ret

0000bb06 <_exit>:
    bb06:	f8 94       	cli

0000bb08 <__stop_program>:
    bb08:	ff cf       	rjmp	.-2      	; 0xbb08 <__stop_program>
