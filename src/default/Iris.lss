
Iris.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800500  0000db1c  0000dc1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .noinit       00000400  00800100  00800100  0000dc40  2**5
                  CONTENTS, READONLY
  2 .text         0000db1c  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .bss          00000b1e  00800510  00800510  0000dc2c  2**1
                  ALLOC
  4 .stab         00000708  00000000  00000000  0000e040  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000002f1  00000000  00000000  0000e748  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  0000ea39  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000006f0  00000000  00000000  0000ea50  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00009ee7  00000000  00000000  0000f140  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001686  00000000  00000000  00019027  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000259a  00000000  00000000  0001a6ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001644  00000000  00000000  0001cc48  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00001e5a  00000000  00000000  0001e28c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000857f  00000000  00000000  000200e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000888  00000000  00000000  00028668  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 48 3a 	jmp	0x7490	; 0x7490 <__ctors_end>
       4:	0c 94 b1 3a 	jmp	0x7562	; 0x7562 <__bad_interrupt>
       8:	0c 94 b1 3a 	jmp	0x7562	; 0x7562 <__bad_interrupt>
       c:	0c 94 b1 3a 	jmp	0x7562	; 0x7562 <__bad_interrupt>
      10:	0c 94 b1 3a 	jmp	0x7562	; 0x7562 <__bad_interrupt>
      14:	0c 94 b1 3a 	jmp	0x7562	; 0x7562 <__bad_interrupt>
      18:	0c 94 b1 3a 	jmp	0x7562	; 0x7562 <__bad_interrupt>
      1c:	0c 94 b1 3a 	jmp	0x7562	; 0x7562 <__bad_interrupt>
      20:	0c 94 29 40 	jmp	0x8052	; 0x8052 <__vector_8>
      24:	0c 94 b1 3a 	jmp	0x7562	; 0x7562 <__bad_interrupt>
      28:	0c 94 b1 3a 	jmp	0x7562	; 0x7562 <__bad_interrupt>
      2c:	0c 94 b1 3a 	jmp	0x7562	; 0x7562 <__bad_interrupt>
      30:	0c 94 b1 3a 	jmp	0x7562	; 0x7562 <__bad_interrupt>
      34:	0c 94 f5 3d 	jmp	0x7bea	; 0x7bea <__vector_13>
      38:	0c 94 35 3e 	jmp	0x7c6a	; 0x7c6a <__vector_14>
      3c:	0c 94 b1 3a 	jmp	0x7562	; 0x7562 <__bad_interrupt>
      40:	0c 94 b1 3a 	jmp	0x7562	; 0x7562 <__bad_interrupt>
      44:	0c 94 b1 3a 	jmp	0x7562	; 0x7562 <__bad_interrupt>
      48:	0c 94 b1 3a 	jmp	0x7562	; 0x7562 <__bad_interrupt>
      4c:	0c 94 b1 3a 	jmp	0x7562	; 0x7562 <__bad_interrupt>
      50:	0c 94 b1 3a 	jmp	0x7562	; 0x7562 <__bad_interrupt>
      54:	0c 94 b1 3a 	jmp	0x7562	; 0x7562 <__bad_interrupt>
      58:	0c 94 b1 3a 	jmp	0x7562	; 0x7562 <__bad_interrupt>
      5c:	0c 94 b1 3a 	jmp	0x7562	; 0x7562 <__bad_interrupt>
      60:	0c 94 b1 3a 	jmp	0x7562	; 0x7562 <__bad_interrupt>
      64:	0c 94 b1 3a 	jmp	0x7562	; 0x7562 <__bad_interrupt>
      68:	0c 94 b1 3a 	jmp	0x7562	; 0x7562 <__bad_interrupt>
      6c:	0c 94 b1 3a 	jmp	0x7562	; 0x7562 <__bad_interrupt>
      70:	95 60       	ori	r25, 0x05	; 5
      72:	a4 60       	ori	r26, 0x04	; 4
      74:	98 60       	ori	r25, 0x08	; 8
      76:	a4 60       	ori	r26, 0x04	; 4
      78:	9b 60       	ori	r25, 0x0B	; 11
      7a:	a4 60       	ori	r26, 0x04	; 4
      7c:	9e 60       	ori	r25, 0x0E	; 14
      7e:	a4 60       	ori	r26, 0x04	; 4
      80:	a1 60       	ori	r26, 0x01	; 1
      82:	a4 60       	ori	r26, 0x04	; 4

00000084 <__trampolines_end>:
      84:	81 00       	.word	0x0081	; ????
      86:	45 00       	.word	0x0045	; ????
      88:	27 ff       	sbrs	r18, 7
      8a:	24 ff       	sbrs	r18, 4
      8c:	2a 90       	ld	r2, -Y
      8e:	2b 1c       	adc	r2, r11
      90:	21 0c       	add	r2, r1
      92:	22 fb       	bst	r18, 2
      94:	85 00       	.word	0x0085	; ????
      96:	84 00       	.word	0x0084	; ????
      98:	89 03       	fmulsu	r16, r17
      9a:	88 8d       	ldd	r24, Y+24	; 0x18
      9c:	81 09       	sbc	r24, r1
      9e:	6f 02       	muls	r22, r31
      a0:	44 42       	sbci	r20, 0x24	; 36
      a2:	47 00       	.word	0x0047	; ????
      a4:	45 01       	movw	r8, r10
      a6:	b0 83       	st	Z, r27
      a8:	b3 00       	.word	0x00b3	; ????
      aa:	b1 01       	movw	r22, r2
      ac:	25 11       	cpse	r18, r5
      ae:	8a 4f       	sbci	r24, 0xFA	; 250
      b0:	8b 03       	fmulsu	r16, r19

000000b2 <eeprom_format_table>:
      b2:	5a 55 01 20 01 01 00 38 08 00 00 00 00 00 00 00     ZU. ...8........
	...

000000d2 <patchCommands>:
      d2:	d2 41 d5 41 31 42 35 42 3c 42 dd 41 e2 41 e7 41     .A.A1B5B<B.A.A.A
      e2:	44 42 ea 41 ed 41 f0 41 2b 42 2e 42 54 42           DB.A.A.A+B.BTB

000000f0 <fader>:
      f0:	00 40 88 91 d2 e4 ad b5 b6 be bf ff                 .@..........

000000fc <map_uzeboxlogo2>:
      fc:	05 03 00 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f     ................
	...

0000010d <map_uzeboxlogo>:
     10d:	05 04 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d     ................
     11d:	00 0e 0f 10 11 12                                   ......

00000123 <logo_tileset>:
	...
     17f:	00 00 00 49 00 00 00 00 00 49 52 52 00 00 00 49     ...I.....IRR...I
     18f:	52 53 1c 25 00 49 52 52 24 25 25 1b 52 52 5c 2d     RS.%.IRR$%%.RR\-
     19f:	2d 1c 12 12 00 00 00 00 00 00 00 00 00 00 00 00     -...............
     1af:	40 49 49 49 00 40 49 49 52 5b 5b 5b 4a 52 52 5b     @III.@IIR[[[JRR[
     1bf:	1c 1c 13 12 5b 1c 24 1c 12 09 09 09 24 1b 12 09     ....[.$.....$...
     1cf:	09 09 09 0a 0a 0a 0a 0a 0a 0a 0a 13 0a 0a 12 0a     ................
     1df:	0a 12 13 0a 00 00 00 00 00 00 00 00 92 52 52 52     .............RRR
     1ef:	52 52 52 49 13 12 13 09 00 1c 1b 13 0a 12 12 40     RRRI...........@
     1ff:	1b 65 64 1c 09 0a 00 09 24 1b 1c 65 12 00 00 25     .ed.....$..e...%
     20f:	1c 1c 1c 1c 01 00 25 24 1c 1c 1c 1c 00 24 25 24     ......%$.....$%$
     21f:	24 24 1c 1c 00 00 00 00 00 00 00 00 49 40 00 00     $$..........I@..
     22f:	00 00 00 00 52 49 49 00 00 00 00 00 1c 5b 4a 48     ....RII......[JH
     23f:	00 00 00 00 1c 25 52 49 00 00 00 00 65 24 64 49     .....%RI....e$dI
     24f:	00 00 00 00 65 25 64 49 00 00 00 00 6d 2e 5c 49     ....e%dI....m.\I
	...
     267:	00 00 40 52 00 00 00 00 00 49 52 5c 00 00 00 00     ..@R.....IR\....
     277:	53 52 24 25 00 00 00 53 52 25 25 25 00 00 4a 52     SR$%...SR%%%..JR
     287:	25 25 1b 00 00 00 5b 25 13 00 00 1b 00 5b 53 00     %%....[%.....[S.
     297:	0a 1c 37 37 09 5b 1c 65 7f 37 2e 2e 52 2e 2e 1c     ..77.[.e.7..R...
     2a7:	13 13 12 00 2e 25 1b 13 12 00 00 12 1c 1c 12 00     .....%..........
     2b7:	00 12 25 1c 12 00 00 12 2e 37 1c 13 00 13 2e 37     ..%......7.....7
     2c7:	36 1c 13 1b 37 37 2e 2e 25 13 1c 1c 2e 2e 2e 2e     6...77..%.......
     2d7:	1b 1c 1c 1c 6e 6e 6e 1c 1c 1c 1c 1c 09 13 13 12     ....nnn.........
     2e7:	12 13 13 00 13 13 13 13 13 1c 00 09 13 13 13 13     ................
     2f7:	1c 01 00 37 13 13 13 1c 13 00 2e 2e 1b 1b 1c 1c     ...7............
     307:	00 1c 77 2e 1b 1b 25 00 13 7f 25 1c 1c 1c 01 0a     ..w...%...%.....
     317:	37 24 1c 1c 1c 13 0a 2e 25 25 09 00 13 2e 24 25     7$......%%....$%
     327:	25 25 25 25 2e 25 25 25 25 25 25 25 25 25 2d 2e     %%%%.%%%%%%%%%-.
     337:	25 1b 1c 1c 2e 2e 25 1c 13 25 1b 13 25 1c 1c 1c     %.....%..%..%...
     347:	1c 01 09 52 1c 1c 13 00 01 1c 5b 5c 0a 00 01 65     ...R......[\...e
     357:	77 5c 1b 00 01 6e 7f 6e 52 1b 00 00 6d 1c 52 49     w\...n.nR...m.RI
     367:	00 00 00 00 1c 13 53 00 00 00 00 00 1c 52 4a 00     ......S......RJ.
     377:	00 00 00 00 5b 5b 00 00 00 00 00 00 5c 00 00 00     ....[[......\...
	...
     3a3:	13 5b 7f 77 6e 6e 6e 6e 13 65 77 76 6e 6e 6e 6e     .[.wnnnn.ewvnnnn
     3b3:	1b 65 77 76 76 76 6e 77 1b 5b bf 76 b6 76 76 76     .ewvvvnw.[.v.vvv
     3c3:	09 13 6d bf b7 b6 b7 65 00 1b 12 5c 76 bf 76 6d     ..m....e...\v.vm
     3d3:	00 00 12 1b 12 5b 5b 5c 00 00 00 00 09 0a 12 13     .....[[\........
     3e3:	6e 77 24 1c 1c 1c 1c 1c 77 25 1c 1c 1c 1c 24 25     nw$.....w%....$%
     3f3:	6e 1c 1c 1c 24 25 25 1b 1c 1c 24 25 25 13 00 00     n...$%%...$%%...
     403:	64 6d 6d 1b 00 09 6e bf 6d 5b 09 12 6e bf 6d 5b     dmm...n.m[..n.m[
     413:	5b 12 5b 64 5b 12 13 12 13 1b 12 12 09 01 00 00     [.[d[...........
     423:	1c 24 2e 1c 09 00 09 6e 25 24 01 00 09 76 7f 7f     .$.....n%$...v..
     433:	00 00 12 77 7f 7f 64 12 64 bf bf 77 5b 12 1b 09     ...w..d.d..w[...
     443:	bf 6d 5b 12 1b 09 00 00 12 13 1b 09 00 00 00 00     .m[.............
     453:	09 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     463:	7f 7f 53 13 13 00 00 00 64 12 1b 01 00 00 00 00     ..S.....d.......
     473:	1b 12 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     4ab:	26 00 00 00 26 00 26 26 2f 00 00 00 2f 00 00 00     &...&.&&/.../...
     4bb:	37 00 00 00 37 00 00 00 ff 00 00 00 ff 00 00 00     7...7...........
     4cb:	bf 00 00 00 bf 00 00 bf 37 00 00 37 00 00 37 00     ........7..7..7.
     4db:	00 26 26 00 00 00 26 26 00 00 00 00 00 00 00 00     .&&...&&........
     4eb:	26 26 26 00 26 26 26 26 00 00 2f 00 2f 00 00 00     &&&.&&&&.././...
     4fb:	00 37 00 00 37 00 00 00 ff 00 00 00 ff ff ff ff     .7..7...........
     50b:	00 00 00 00 bf 00 00 00 00 00 00 00 37 00 00 00     ............7...
     51b:	26 26 26 00 26 26 26 26 00 00 00 00 00 00 00 00     &&&.&&&&........
     52b:	26 00 26 26 26 26 00 00 00 00 2f 00 00 00 2f 00     &.&&&&..../.../.
     53b:	00 00 37 00 00 00 37 00 00 00 ff ff ff ff 00 00     ..7...7.........
     54b:	00 00 bf 00 00 00 bf 00 00 00 37 00 00 00 37 00     ..........7...7.
     55b:	26 00 26 26 26 26 00 00 00 00 00 00 00 00 00 00     &.&&&&..........
     56b:	00 00 26 26 26 00 26 00 00 2f 00 00 2f 00 2f 00     ..&&&.&../.././.
     57b:	37 00 00 00 37 00 00 37 ff 00 00 00 ff 00 00 00     7...7..7........
     58b:	bf 00 00 00 bf 00 00 bf 37 00 00 37 00 00 37 00     ........7..7..7.
     59b:	26 26 26 00 00 00 26 00 00 00 00 00 00 00 00 00     &&&...&.........
     5ab:	00 00 26 00 00 00 00 00 00 00 2f 00 00 00 00 00     ..&......./.....
     5bb:	00 37 00 00 00 00 00 00 ff 00 00 00 00 00 00 00     .7..............
     5cb:	00 bf 00 00 00 00 00 00 00 00 37 00 00 00 00 00     ..........7.....
     5db:	00 00 26 00 00 00 00 00 00 00 00 00 00 00 00 00     ..&.............
	...
     5ff:	00 00 00 e4 00 00 00 00 09 9b ed f6 00 00 00 9b     ................
     60f:	a4 ad bf bf 00 52 9b a4 76 7f 7f b7 5b 9b 6d 77     .....R..v...[.mw
     61f:	7f 76 6e b7 00 00 00 00 00 00 00 00 00 00 00 00     .vn.............
     62f:	5b b6 f6 f6 00 5b f6 ff ff ff ff bf f6 ff ff ff     [....[..........
     63f:	ff bf bf ae ff bf ff ff ff b7 ad 65 bf bf ff ff     ...........e....
     64f:	b7 b6 ad 65 b7 bf ff ff bf b7 ae 6e b7 bf ff ff     ...e.......n....
     65f:	bf b7 b7 65 00 00 00 00 00 00 00 00 f6 f6 ed ed     ...e............
     66f:	ad a4 a4 9b b6 6d 6d 5c 52 6e 65 64 65 65 65 52     .....mm\RnedeeeR
     67f:	65 76 6d 25 5c 5c 52 53 6e 24 65 6e 65 52 52 6e     evm%\\RSn$eneRRn
     68f:	25 25 24 25 5b 52 77 2d 25 25 25 24 52 6e 6e 2d     %%$%[Rw-%%%$Rnn-
     69f:	25 25 25 25 00 00 00 00 00 00 00 00 9b 49 00 00     %%%%.........I..
     6af:	00 00 00 00 a4 9b 92 00 00 00 00 00 25 64 93 49     ............%d.I
     6bf:	00 00 00 00 65 2e 9b 52 00 00 00 00 6d 25 65 52     ....e..R....m%eR
     6cf:	00 00 00 00 6d 2d 65 52 00 00 00 00 6e 2e 64 52     ....m-eR....n.dR
	...
     6e7:	00 00 49 5b 00 00 00 00 00 4a 5b 65 00 00 00 00     ..I[.....J[e....
     6f7:	5b 9b 6d 2d 00 00 00 5b 5b 2d 2e 25 00 00 52 5b     [.m-...[[-.%..R[
     707:	2e 2e 1c 09 00 01 5b 2d 1c 01 09 1c 00 5c 5b 01     ......[-.....\[.
     717:	4a 65 77 7f 4a 5b 1c 6e 7f 77 77 76 9b 77 77 6d     Jew.J[.n.wwv.wwm
     727:	65 6e 6e a4 77 6e 65 65 65 5b a4 b7 25 25 5c 52     enn.wneee[..%%\R
     737:	52 6d bf bf 13 09 49 64 7f bf bf bf 09 5c 7f 7f     Rm....Id.....\..
     747:	bf bf b7 bf 7f 7f 77 7f 7f b7 bf bf 77 77 7f 7f     ......w.....ww..
     757:	6e b7 bf bf 77 7f 7f 6e 77 bf bf bf b6 ff ff ff     n...w..nw.......
     767:	bf bf b7 5b bf ff ff ff bf bf a4 64 bf ff ff ff     ...[.......d....
     777:	bf ad a4 7f bf ff ff ff bf a4 bf 7f ff ff ff bf     ................
     787:	ad bf bf bf ff ff ff b6 bf bf bf 77 ff ff f7 bf     ...........w....
     797:	bf bf 77 77 ff ff ff bf bf bf 64 52 6d 7f 6e 2e     ..ww......dRm.n.
     7a7:	2d 2d 25 6e 7f 76 6e 6e 6e 2e 25 65 77 77 77 76     --%n.vnnn.%ewwwv
     7b7:	2e 1c 25 24 7f 77 6e 25 1c 25 1c 1b 77 65 25 25     ..%$.wn%.%..we%%
     7c7:	1c 09 0a 5b 6e 6e 1c 09 49 25 64 64 5b 49 4a 6e     ...[nn..I%dd[IJn
     7d7:	7f 64 5c 00 53 77 bf 77 5b 5c 00 00 6e 25 5b 4a     .d\.Sw.w[\..n%[J
     7e7:	00 00 00 00 1c 1b 5b 00 00 00 00 00 24 5b 53 00     ......[.....$[S.
     7f7:	00 00 00 00 5b 5c 00 00 00 00 00 00 64 00 00 00     ....[\......d...
	...
     823:	5b 5c 7f bf 77 76 77 77 5c 6d 7f b7 77 77 77 77     [\..wvww\m..wwww
     833:	5c 6d 7f bf 77 77 77 bf 5c 64 bf bf bf bf bf 7f     \m..www.\d......
     843:	0a 5c 6e bf bf bf bf 76 00 65 64 6d bf bf bf bf     .\n....v.edm....
     853:	00 00 5b 6d 64 6d ad b6 00 00 00 00 12 5b 64 6d     ..[mdm.......[dm
     863:	77 7f 6e 6e 77 bf bf bf 7f 76 6d 76 77 bf bf bf     w.nnw....vmvw...
     873:	77 6d 6e 76 7f bf bf bf 6d 6e 76 7f bf b7 ad f6     wmnv....mnv.....
     883:	76 bf bf 76 a4 ad ff ff bf b6 64 ad ff ff ff ff     v..v......d.....
     893:	b6 ad bf ff ff ff ff f6 ad b6 ad 64 5b 52 00 00     ...........d[R..
     8a3:	ff ff bf bf ad 5b 64 bf ff ff b6 ad ad bf ff bf     .....[d.........
     8b3:	ff f6 ff ff ff ff bf 64 ff ff ff ff bf b6 76 5b     .......d......v[
     8c3:	ff ff ff bf bf 5b 00 00 ff ff ff 5c 00 00 00 00     .....[.....\....
     8d3:	a4 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     8e3:	bf bf 64 5c 5c 00 00 00 6e 5c 65 49 00 00 00 00     ..d\\...n\eI....
     8f3:	6d 5b 00 00 00 00 00 00 00 00 00 00 00 00 00 00     m[..............
	...

00000923 <logoInitPatches>:
     923:	00 00 00 2c 09 00 00 00 00                          ...,.....

0000092c <initPatch>:
     92c:	00 02 08 00 08 55 04 08 5a 00 00 f8 00 09 90 00     .....U..Z.......
     93c:	0a 1e 32 05 00 00 ff                                ..2....

00000943 <strChallenge>:
     943:	49 20 4b 4e 45 57 20 54 48 45 59 00 57 4f 55 4c     I KNEW THEY.WOUL
     953:	44 20 53 45 4e 44 20 59 4f 55 00 23 20 20 20 20     D SEND YOU.#    
     963:	20 20 20 59 4f 55 20 41 52 45 00 50 45 52 53 49        YOU ARE.PERSI
     973:	53 54 45 4e 54 00 23 20 20 20 20 20 20 20 20 20     STENT.#         
     983:	20 20 20 20 20 20 59 4f 55 20 43 41 4e 54 00 48           YOU CANT.H
     993:	41 56 45 20 54 48 45 4d 20 41 4c 4c 00 23 20 20     AVE THEM ALL.#  
     9a3:	20 20 20 20 20 20 20 20 20 59 4f 55 20 41 52 45              YOU ARE
     9b3:	20 4d 41 4b 49 4e 47 00 41 20 4d 49 53 54 41 4b      MAKING.A MISTAK
     9c3:	45 00 23 20 20 20 20 20 20 20 20 20 54 48 49 53     E.#         THIS
     9d3:	20 44 4f 45 53 20 4e 4f 54 00 45 4e 44 20 48 45      DOES NOT.END HE
     9e3:	52 45 00 23 20 20 20 20 20 20 20 20 20 20 20 00     RE.#           .

000009f3 <strIntro>:
     9f3:	49 52 49 53 20 48 41 53 20 42 45 54 52 41 59 45     IRIS HAS BETRAYE
     a03:	44 20 55 53 00 00 48 45 20 48 41 53 20 53 54 4f     D US..HE HAS STO
     a13:	4c 45 4e 20 54 48 45 20 35 20 45 4d 45 52 41 4c     LEN THE 5 EMERAL
     a23:	44 53 00 4f 46 20 50 4f 57 45 52 20 41 4e 44 20     DS.OF POWER AND 
     a33:	57 49 4c 4c 20 53 55 52 45 4c 59 00 42 52 49 4e     WILL SURELY.BRIN
     a43:	47 20 52 55 49 4e 20 54 4f 20 55 53 20 41 4c 4c     G RUIN TO US ALL
     a53:	00 00 44 45 53 54 52 4f 59 20 48 49 4d 20 41 4e     ..DESTROY HIM AN
     a63:	44 20 52 45 54 55 52 4e 20 54 48 45 00 45 4d 45     D RETURN THE.EME
     a73:	52 41 4c 44 53 20 54 4f 20 42 52 49 4e 47 20 50     RALDS TO BRING P
     a83:	45 41 43 45 20 54 4f 00 54 48 45 20 47 41 4c 41     EACE TO.THE GALA
     a93:	58 59 00 23 00                                      XY.#.

00000a98 <default_scores>:
     a98:	55 5a 45 00 00 4c 4a 42 00 00 41 41 41 00 00 42     UZE..LJB..AAA..B
     aa8:	42 42 00 00 43 43 43 00 00 44 44 44 00 00           BB..CCC..DDD..

00000ab6 <strTally>:
     ab6:	54 41 4c 4c 59 20 00                                TALLY .

00000abd <strGameOver>:
     abd:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

00000ac7 <strLevelBonus>:
     ac7:	42 4f 4e 55 53 00                                   BONUS.

00000acd <strLevelClear>:
     acd:	4c 45 56 45 4c 20 43 4c 45 41 52 00                 LEVEL CLEAR.

00000ad9 <strPaused>:
     ad9:	50 41 55 53 45 00                                   PAUSE.

00000adf <strExitGame>:
     adf:	58 20 45 58 49 54 20 47 41 4d 45 00                 X EXIT GAME.

00000aeb <strMainMenu>:
     aeb:	58 20 4d 41 49 4e 20 4d 45 4e 55 00                 X MAIN MENU.

00000af7 <strTime>:
     af7:	54 49 4d 45 20 00                                   TIME .

00000afd <strLives>:
     afd:	4c 49 56 45 53 20 00                                LIVES .

00000b04 <strShield>:
     b04:	53 48 49 45 4c 44 20 00                             SHIELD .

00000b0c <strScore>:
     b0c:	53 43 4f 52 45 20 00                                SCORE .

00000b13 <strSelectHandle>:
	...

00000b14 <strHighScores>:
     b14:	48 49 47 48 20 53 43 4f 52 45 53 00                 HIGH SCORES.

00000b20 <str1Player>:
     b20:	53 54 41 52 54 00                                   START.

00000b26 <strMusic>:
     b26:	4d 55 53 49 43 20 42 59 20 54 41 4e 4e 45 52 20     MUSIC BY TANNER 
     b36:	48 45 4c 4c 41 4e 44 00                             HELLAND.

00000b3e <strCopyright>:
     b3e:	32 30 31 36 20 4c 41 57 52 45 4e 43 45 20 42 52     2016 LAWRENCE BR
     b4e:	4f 4f 4b 53 00                                      OOKS.

00000b53 <spacesong>:
     b53:	00 c0 00 00 c1 01 00 b0 07 7f 00 07 7f 00 90 43     ...............C
     b63:	64 00 46 64 00 4b 64 00 4f 64 00 b1 07 74 00 91     d.Fd.Kd.Od...t..
     b73:	33 64 00 ff 06 01 53 1d 91 33 64 0a 33 64 14 90     3d....S..3d.3d..
     b83:	4b 64 00 46 64 00 43 64 00 91 33 64 27 33 64 14     Kd.Fd.Cd..3d'3d.
     b93:	90 46 64 00 43 64 00 4b 64 00 4f 64 00 91 33 64     .Fd.Cd.Kd.Od..3d
     ba3:	14 33 64 0a 90 41 64 00 4d 64 0a 41 64 00 46 64     .3d..Ad.Md.Ad.Fd
     bb3:	00 4a 64 00 4d 64 00 91 2e 64 1e 2e 64 09 2e 64     .Jd.Md...d..d..d
     bc3:	14 90 41 64 00 46 64 00 4a 64 00 91 2e 64 28 2e     ..Ad.Fd.Jd...d(.
     bd3:	64 14 90 41 64 00 46 64 00 4a 64 00 4d 64 00 91     d..Ad.Fd.Jd.Md..
     be3:	2e 64 13 2e 64 0a 90 3f 64 00 4b 64 0a 3f 64 00     .d..d..?d.Kd.?d.
     bf3:	44 64 00 48 64 00 4b 64 00 91 2c 64 1e 2c 64 0a     Dd.Hd.Kd..,d.,d.
     c03:	2c 64 14 90 41 64 00 46 64 00 4a 64 00 91 2c 64     ,d..Ad.Fd.Jd..,d
     c13:	13 2e 64 14 90 46 64 00 91 2c 64 14 90 3f 64 00     ..d..Fd..,d..?d.
     c23:	43 64 00 48 64 00 91 2e 64 14 30 64 14 90 43 64     Cd.Hd...d.0d..Cd
     c33:	00 48 64 00 4b 64 00 4f 64 00 91 30 64 1d 30 64     .Hd.Kd.Od..0d.0d
     c43:	0a 30 64 14 90 4b 64 00 48 64 00 43 64 00 91 30     .0d..Kd.Hd.Cd..0
     c53:	64 28 30 64 13 90 43 64 00 48 64 00 4b 64 00 4f     d(0d..Cd.Hd.Kd.O
     c63:	64 00 91 30 64 14 30 64 0a 90 41 64 00 4d 64 0a     d..0d.0d..Ad.Md.
     c73:	43 64 00 46 64 00 4b 64 00 4f 64 00 91 33 64 1e     Cd.Fd.Kd.Od..3d.
     c83:	33 64 09 33 64 14 90 4b 64 00 46 64 00 43 64 00     3d.3d..Kd.Fd.Cd.
     c93:	91 33 64 28 33 64 14 90 46 64 00 43 64 00 4b 64     .3d(3d..Fd.Cd.Kd
     ca3:	00 4f 64 00 91 33 64 13 33 64 0a 90 41 64 00 4d     .Od..3d.3d..Ad.M
     cb3:	64 0a 41 64 00 46 64 00 4a 64 00 4d 64 00 91 2e     d.Ad.Fd.Jd.Md...
     cc3:	64 1e 2e 64 0a 2e 64 14 90 41 64 00 46 64 00 4a     d..d..d..Ad.Fd.J
     cd3:	64 00 91 2e 64 27 2e 64 14 90 41 64 00 46 64 00     d...d'.d..Ad.Fd.
     ce3:	4a 64 00 4d 64 00 91 2e 64 14 2e 64 0a 90 3f 64     Jd.Md...d..d..?d
     cf3:	00 4b 64 0a 3f 64 00 44 64 00 48 64 00 4b 64 00     .Kd.?d.Dd.Hd.Kd.
     d03:	91 2c 64 1d 2c 64 0a 2c 64 14 90 41 64 00 46 64     .,d.,d.,d..Ad.Fd
     d13:	00 4a 64 00 91 2c 64 14 2e 64 14 90 46 64 00 91     .Jd..,d..d..Fd..
     d23:	2c 64 13 90 3f 64 00 43 64 00 48 64 00 91 30 64     ,d..?d.Cd.Hd..0d
     d33:	14 30 64 14 90 48 64 00 91 2c 6e 14 2c 4b 06 90     .0d..Hd..,n.,K..
     d43:	4a 64 0e 91 2c 4b 0d 90 4b 64 06 91 2c 6e 14 90     Jd..,K..Kd..,n..
     d53:	4d 64 00 91 2c 4b 14 2c 4b 07 90 4b 64 0d 91 2c     Md..,K.,K..Kd..,
     d63:	6e 0d 90 4a 64 07 91 2c 4b 13 90 48 64 00 91 30     n..Jd..,K..Hd..0
     d73:	6e 14 30 4b 07 90 4a 64 0d 91 30 4b 0d 90 46 64     n.0K..Jd..0K..Fd
     d83:	07 91 30 6e 13 90 43 64 00 91 30 4b 14 30 4b 07     ..0n..Cd..0K.0K.
     d93:	90 46 64 0d 91 30 6e 0d 90 48 64 07 91 30 4b 14     .Fd..0n..Hd..0K.
     da3:	90 48 64 00 91 2c 6e 13 2c 4b 07 90 4a 64 0d 91     .Hd..,n.,K..Jd..
     db3:	2c 4b 0d 90 4b 64 07 91 2c 6e 14 90 4d 64 00 91     ,K..Kd..,n..Md..
     dc3:	2c 4b 14 2c 4b 06 90 4b 64 0d 91 2c 6e 0e 90 4d     ,K.,K..Kd..,n..M
     dd3:	64 06 91 2c 4b 14 90 4f 64 00 91 30 6e 14 30 4b     d..,K..Od..0n.0K
     de3:	07 90 50 64 0d 91 30 4b 0e 90 4d 64 05 91 30 6e     ..Pd..0K..Md..0n
     df3:	14 90 4f 64 00 91 30 4b 14 30 4b 07 90 4d 64 0d     ..Od..0K.0K..Md.
     e03:	91 30 6e 0d 90 4b 64 07 91 30 4b 13 90 4d 64 00     .0n..Kd..0K..Md.
     e13:	91 2b 6e 14 2b 4b 07 90 4f 64 0d 91 2b 4b 0d 90     .+n.+K..Od..+K..
     e23:	4d 64 07 91 2b 6e 14 90 4b 64 00 91 2b 4b 13 2b     Md..+n..Kd..+K.+
     e33:	4b 07 90 46 64 0d 91 2b 6e 0d 90 4b 64 07 91 2b     K..Fd..+n..Kd..+
     e43:	4b 14 90 4d 64 00 91 2c 6e 13 2c 4b 07 90 50 64     K..Md..,n.,K..Pd
     e53:	0d 91 2c 4b 0d 90 4f 64 07 91 2c 6e 14 90 4d 64     ..,K..Od..,n..Md
     e63:	00 91 2c 4b 14 2c 4b 06 90 48 64 0d 91 2c 6e 0e     ..,K.,K..Hd..,n.
     e73:	90 4d 64 06 91 2c 4b 14 90 52 64 00 91 27 6e 0d     .Md..,K..Rd..'n.
     e83:	90 50 64 07 91 27 4b 06 90 4f 64 0e 50 64 00 91     .Pd..'K..Od.Pd..
     e93:	27 4b 0d 90 4f 64 06 91 27 6e 07 90 4d 64 0d 4b     'K..Od..'n..Md.K
     ea3:	64 00 91 27 4b 14 27 4b 07 90 46 64 0d 91 27 6e     d..'K.'K..Fd..'n
     eb3:	0d 90 4b 64 07 91 27 4b 13 90 47 64 00 91 26 6e     ..Kd..'K..Gd..&n
     ec3:	14 26 4b 07 90 4a 64 0d 91 26 4b 0d 90 4f 64 07     .&K..Jd..&K..Od.
     ed3:	91 26 6e 14 90 53 64 00 91 26 4b 13 26 4b 07 90     .&n..Sd..&K.&K..
     ee3:	56 64 0d 91 26 6e 0d 90 5b 64 07 91 26 4b 14 90     Vd..&n..[d..&K..
     ef3:	3d 64 00 91 31 64 06 90 41 64 07 44 64 07 49 64     =d..1d..Ad.Dd.Id
     f03:	06 4d 64 07 50 64 06 55 64 07 59 64 07 5c 64 06     .Md.Pd.Ud.Yd.\d.
     f13:	59 64 07 55 64 06 50 64 07 4d 64 07 49 64 06 44     Yd.Ud.Pd.Md.Id.D
     f23:	64 07 41 64 06 3d 64 07 38 64 07 3d 64 06 41 64     d.Ad.=d.8d.=d.Ad
     f33:	07 44 64 06 49 64 07 44 64 07 41 64 06 43 64 00     .Dd.Id.Dd.Ad.Cd.
     f43:	91 37 64 07 90 47 64 06 4a 64 07 4f 64 06 53 64     .7d..Gd.Jd.Od.Sd
     f53:	07 56 64 07 5b 64 06 5f 64 07 62 64 06 5f 64 07     .Vd.[d._d.bd._d.
     f63:	5b 64 07 56 64 06 53 64 07 4f 64 06 4a 64 07 47     [d.Vd.Sd.Od.Jd.G
     f73:	64 07 43 64 06 3e 64 07 43 64 06 47 64 07 4a 64     d.Cd.>d.Cd.Gd.Jd
     f83:	07 4f 64 06 4a 64 07 47 64 06 46 64 00 91 3a 64     .Od.Jd.Gd.Fd..:d
     f93:	07 90 4a 64 07 4d 64 06 52 64 07 56 64 06 59 64     ..Jd.Md.Rd.Vd.Yd
     fa3:	07 5e 64 07 62 64 06 65 64 07 62 64 06 5e 64 07     .^d.bd.ed.bd.^d.
     fb3:	59 64 07 56 64 06 52 64 07 4d 64 06 4a 64 07 46     Yd.Vd.Rd.Md.Jd.F
     fc3:	64 07 41 64 06 46 64 07 4a 64 06 4d 64 07 52 64     d.Ad.Fd.Jd.Md.Rd
     fd3:	07 4d 64 06 4a 64 07 54 7f 00 43 64 00 48 64 00     .Md.Jd.T..Cd.Hd.
     fe3:	4b 64 00 4f 64 00 91 30 64 1d 30 64 0a 30 64 14     Kd.Od..0d.0d.0d.
     ff3:	90 4b 64 00 48 64 00 43 64 00 91 30 64 28 30 64     .Kd.Hd.Cd..0d(0d
    1003:	14 90 43 64 00 48 64 00 4b 64 00 4f 64 00 91 30     ..Cd.Hd.Kd.Od..0
    1013:	64 13 30 64 0a 90 41 64 00 4d 64 0a 43 64 00 46     d.0d..Ad.Md.Cd.F
    1023:	64 00 4b 64 00 4f 64 00 91 33 64 1e 33 64 0a 33     d.Kd.Od..3d.3d.3
    1033:	64 14 90 4b 64 00 46 64 00 43 64 00 91 33 64 27     d..Kd.Fd.Cd..3d'
    1043:	33 64 14 90 46 64 00 43 64 00 4b 64 00 4f 64 00     3d..Fd.Cd.Kd.Od.
    1053:	91 33 64 14 33 64 0a 90 41 64 00 4d 64 0a 41 64     .3d.3d..Ad.Md.Ad
    1063:	00 46 64 00 4a 64 00 4d 64 00 91 2e 64 1d 2e 64     .Fd.Jd.Md...d..d
    1073:	0a 2e 64 14 90 41 64 00 46 64 00 4a 64 00 91 2e     ..d..Ad.Fd.Jd...
    1083:	64 27 2e 64 14 90 41 64 00 46 64 00 4a 64 00 4d     d'.d..Ad.Fd.Jd.M
    1093:	64 00 91 2e 64 14 2e 64 0a 90 3f 64 00 4b 64 0a     d...d..d..?d.Kd.
    10a3:	3f 64 00 44 64 00 48 64 00 4b 64 00 91 2c 64 1e     ?d.Dd.Hd.Kd..,d.
    10b3:	2c 64 09 2c 64 14 90 41 64 00 46 64 00 4a 64 00     ,d.,d..Ad.Fd.Jd.
    10c3:	91 2c 64 14 2e 64 14 90 46 64 00 91 2c 64 14 90     .,d..d..Fd..,d..
    10d3:	3f 64 00 43 64 00 48 64 00 91 2e 64 13 30 64 14     ?d.Cd.Hd...d.0d.
    10e3:	90 43 64 00 48 64 00 4b 64 00 4f 64 00 91 30 64     .Cd.Hd.Kd.Od..0d
    10f3:	1e 30 64 0a 30 64 14 90 4b 64 00 48 64 00 43 64     .0d.0d..Kd.Hd.Cd
    1103:	00 91 30 64 27 30 64 14 90 43 64 00 48 64 00 4b     ..0d'0d..Cd.Hd.K
    1113:	64 00 4f 64 00 91 30 64 14 30 64 0a 90 41 64 00     d.Od..0d.0d..Ad.
    1123:	4d 64 0a 43 64 00 46 64 00 4b 64 00 4f 64 00 91     Md.Cd.Fd.Kd.Od..
    1133:	33 64 1d 33 64 0a 33 64 14 90 4b 64 00 46 64 00     3d.3d.3d..Kd.Fd.
    1143:	43 64 00 91 33 64 28 33 64 13 90 46 64 00 43 64     Cd..3d(3d..Fd.Cd
    1153:	00 4b 64 00 4f 64 00 91 33 64 14 33 64 0a 90 41     .Kd.Od..3d.3d..A
    1163:	64 00 4d 64 0a 41 64 00 46 64 00 4a 64 00 4d 64     d.Md.Ad.Fd.Jd.Md
    1173:	00 91 2e 64 1e 2e 64 09 2e 64 14 90 41 64 00 46     ...d..d..d..Ad.F
    1183:	64 00 4a 64 00 91 2e 64 28 2e 64 14 90 41 64 00     d.Jd...d(.d..Ad.
    1193:	46 64 00 4a 64 00 4d 64 00 91 2e 64 13 2e 64 0a     Fd.Jd.Md...d..d.
    11a3:	90 3f 64 00 4b 64 0a 3f 64 00 44 64 00 48 64 00     .?d.Kd.?d.Dd.Hd.
    11b3:	4b 64 00 91 2c 64 1e 2c 64 0a 2c 64 14 90 41 64     Kd..,d.,d.,d..Ad
    11c3:	00 46 64 00 4a 64 00 91 2c 64 13 2e 64 14 90 46     .Fd.Jd..,d..d..F
    11d3:	64 00 91 2c 64 0f ff 06 01 45 05 90 3f 64 00 43     d..,d....E..?d.C
    11e3:	64 00 48 64 00 91 30 64 14 30 64 81 0a ff 2f 00     d.Hd..0d.0d.../.

000011f3 <planetsong>:
    11f3:	00 c0 00 00 c1 01 00 b0 07 7f 00 b1 07 74 00 ff     .............t..
    1203:	06 01 53 1b 90 48 78 00 91 30 6e 07 90 43 55 00     ..S..Hx..0n..CU.
    1213:	91 30 50 07 90 48 55 00 91 30 50 07 90 4a 78 00     .0P..HU..0P..Jx.
    1223:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 48 55 00     .0n..KU..0P..HU.
    1233:	91 30 50 07 90 4a 78 00 91 30 6e 07 90 4b 55 00     .0P..Jx..0n..KU.
    1243:	91 30 50 07 90 4d 55 00 91 30 50 07 90 4a 78 00     .0P..MU..0P..Jx.
    1253:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 4d 55 00     .0n..KU..0P..MU.
    1263:	91 30 50 07 90 4f 78 00 91 30 6e 07 90 4b 55 00     .0P..Ox..0n..KU.
    1273:	91 30 50 07 90 4d 78 00 91 2e 6e 07 90 4f 55 07     .0P..Mx...n..OU.
    1283:	50 78 00 91 30 6e 06 90 4d 55 00 91 30 50 07 90     Px..0n..MU..0P..
    1293:	4f 55 00 91 30 50 07 90 4b 78 00 91 30 6e 07 90     OU..0P..Kx..0n..
    12a3:	4d 55 00 91 30 50 07 90 4a 55 00 91 30 50 07 30     MU..0P..JU..0P.0
    12b3:	6e 03 90 4b 78 04 48 55 00 91 30 50 07 90 4a 55     n..Kx.HU..0P..JU
    12c3:	00 91 30 50 07 90 46 78 00 91 30 6e 07 90 4d 55     ..0P..Fx..0n..MU
    12d3:	00 91 30 50 07 90 46 78 00 91 30 50 07 90 4f 55     ..0P..Fx..0P..OU
    12e3:	00 91 30 6e 07 90 46 78 00 91 30 50 07 90 4d 55     ..0n..Fx..0P..MU
    12f3:	00 91 2e 6e 07 90 46 78 07 48 55 00 91 30 6e 07     ...n..Fx.HU..0n.
    1303:	90 43 55 00 91 30 50 07 90 48 55 00 91 30 50 07     .CU..0P..HU..0P.
    1313:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    1323:	90 48 55 00 91 30 50 06 90 4a 55 00 91 30 6e 07     .HU..0P..JU..0n.
    1333:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 30 50 07     .KU..0P..MU..0P.
    1343:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    1353:	90 4d 55 00 91 30 50 07 90 4f 55 00 91 30 6e 07     .MU..0P..OU..0n.
    1363:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 2e 6e 07     .KU..0P..MU...n.
    1373:	90 4f 55 07 50 55 00 91 30 6e 07 90 4d 55 00 91     .OU.PU..0n..MU..
    1383:	30 50 07 90 4f 55 00 91 30 50 07 90 4b 55 00 91     0P..OU..0P..KU..
    1393:	30 6e 07 90 4d 55 00 91 30 50 07 90 4a 55 00 91     0n..MU..0P..JU..
    13a3:	30 50 07 30 6e 02 90 4b 55 05 48 55 00 91 30 50     0P.0n..KU.HU..0P
    13b3:	07 90 4a 55 00 91 30 50 07 90 46 55 00 91 30 6e     ..JU..0P..FU..0n
    13c3:	06 90 4d 55 00 91 30 50 07 90 46 55 00 91 30 50     ..MU..0P..FU..0P
    13d3:	07 90 4f 55 00 91 30 6e 07 90 46 55 00 91 30 50     ..OU..0n..FU..0P
    13e3:	07 90 4d 55 00 91 2e 6e 07 90 46 55 07 48 78 00     ..MU...n..FU.Hx.
    13f3:	91 2c 6e 07 90 43 55 00 91 2c 50 07 90 48 55 00     .,n..CU..,P..HU.
    1403:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
    1413:	91 2c 50 07 90 48 55 00 91 2c 50 07 90 4a 78 00     .,P..HU..,P..Jx.
    1423:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 55 00     .,n..KU..,P..MU.
    1433:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
    1443:	91 2c 50 07 90 4d 55 00 91 2c 50 07 90 4f 78 00     .,P..MU..,P..Ox.
    1453:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 78 00     .,n..KU..,P..Mx.
    1463:	91 2b 6e 06 90 4f 55 07 50 78 00 91 2c 6e 07 90     .+n..OU.Px..,n..
    1473:	4d 55 00 91 2c 50 07 90 4f 55 00 91 2c 50 07 90     MU..,P..OU..,P..
    1483:	4b 78 00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90     Kx..,n..MU..,P..
    1493:	4a 55 00 91 2c 50 07 2c 6e 02 90 4b 78 05 48 55     JU..,P.,n..Kx.HU
    14a3:	00 91 2c 50 07 90 4a 55 00 91 2c 50 07 90 46 78     ..,P..JU..,P..Fx
    14b3:	00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90 46 78     ..,n..MU..,P..Fx
    14c3:	00 91 2c 50 07 90 4f 55 00 91 2c 6e 07 90 46 78     ..,P..OU..,n..Fx
    14d3:	00 91 2c 50 07 90 4d 55 00 91 2b 6e 07 90 46 78     ..,P..MU..+n..Fx
    14e3:	07 48 55 00 91 29 6e 07 90 43 55 00 91 29 50 07     .HU..)n..CU..)P.
    14f3:	90 48 55 00 91 29 50 06 90 4a 55 00 91 29 6e 07     .HU..)P..JU..)n.
    1503:	90 4b 55 00 91 29 50 07 90 48 55 00 91 29 50 07     .KU..)P..HU..)P.
    1513:	90 4a 55 00 91 2b 6e 07 90 4b 55 00 91 2b 50 07     .JU..+n..KU..+P.
    1523:	90 4d 55 00 91 2b 50 07 90 4a 55 00 91 2b 6e 07     .MU..+P..JU..+n.
    1533:	90 4b 55 00 91 2b 50 07 90 4d 55 00 91 2b 50 07     .KU..+P..MU..+P.
    1543:	90 4f 55 00 91 2c 6e 07 90 4b 55 00 91 2c 50 07     .OU..,n..KU..,P.
    1553:	90 4d 55 00 91 2c 6e 07 90 4f 55 07 50 55 00 91     .MU..,n..OU.PU..
    1563:	2e 6e 07 90 4d 55 00 91 2e 50 07 90 4f 55 00 91     .n..MU...P..OU..
    1573:	2e 50 07 90 4b 55 00 91 2e 6e 07 90 4d 55 00 91     .P..KU...n..MU..
    1583:	2e 50 07 90 4a 55 00 91 2e 50 07 2e 6e 02 90 4b     .P..JU...P..n..K
    1593:	55 05 48 55 00 91 2e 50 06 90 4a 55 00 91 2e 50     U.HU...P..JU...P
    15a3:	07 90 46 55 00 91 2e 6e 07 90 4d 55 00 91 2e 50     ..FU...n..MU...P
    15b3:	07 90 46 55 00 91 2e 50 07 90 4f 55 00 91 2e 6e     ..FU...P..OU...n
    15c3:	07 90 46 55 00 91 2e 50 07 90 4d 55 00 91 2e 6e     ..FU...P..MU...n
    15d3:	07 90 46 55 07 48 55 00 91 30 6e 07 90 43 55 00     ..FU.HU..0n..CU.
    15e3:	91 30 50 07 90 48 55 00 91 30 50 07 90 4a 55 00     .0P..HU..0P..JU.
    15f3:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 48 55 00     .0n..KU..0P..HU.
    1603:	91 30 50 07 90 4a 55 00 91 30 6e 07 90 4b 55 00     .0P..JU..0n..KU.
    1613:	91 30 50 07 90 4d 55 00 91 30 50 07 90 4a 55 00     .0P..MU..0P..JU.
    1623:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 4d 55 00     .0n..KU..0P..MU.
    1633:	91 30 50 07 90 4f 55 00 91 30 6e 06 90 4b 55 00     .0P..OU..0n..KU.
    1643:	91 30 50 07 90 4d 55 00 91 2e 6e 07 90 4f 55 07     .0P..MU...n..OU.
    1653:	50 55 00 91 30 6e 07 90 4d 55 00 91 30 50 07 90     PU..0n..MU..0P..
    1663:	4f 55 00 91 30 50 07 90 4b 55 00 91 30 6e 07 90     OU..0P..KU..0n..
    1673:	4d 55 00 91 30 50 07 90 4a 55 00 91 30 50 07 30     MU..0P..JU..0P.0
    1683:	6e 02 90 4b 55 05 48 55 00 91 30 50 07 90 4a 55     n..KU.HU..0P..JU
    1693:	00 91 30 50 07 90 46 55 00 91 30 6e 07 90 4d 55     ..0P..FU..0n..MU
    16a3:	00 91 30 50 07 90 46 55 00 91 30 50 07 90 4f 55     ..0P..FU..0P..OU
    16b3:	00 91 30 6e 07 90 46 55 00 91 30 50 07 90 4d 55     ..0n..FU..0P..MU
    16c3:	00 91 2e 6e 07 90 46 55 07 48 55 00 91 30 6e 06     ...n..FU.HU..0n.
    16d3:	90 43 55 00 91 30 50 07 90 48 55 00 91 30 50 07     .CU..0P..HU..0P.
    16e3:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    16f3:	90 48 55 00 91 30 50 07 90 4a 55 00 91 30 6e 07     .HU..0P..JU..0n.
    1703:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 30 50 07     .KU..0P..MU..0P.
    1713:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    1723:	90 4d 55 00 91 30 50 07 90 4f 55 00 91 30 6e 07     .MU..0P..OU..0n.
    1733:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 2e 6e 07     .KU..0P..MU...n.
    1743:	90 4f 55 07 50 55 00 91 30 6e 07 90 4d 55 00 91     .OU.PU..0n..MU..
    1753:	30 50 07 90 4f 55 00 91 30 50 07 90 4b 55 00 91     0P..OU..0P..KU..
    1763:	30 6e 07 90 4d 55 00 91 30 50 07 90 4a 55 00 91     0n..MU..0P..JU..
    1773:	30 50 06 30 6e 03 90 4b 55 04 48 55 00 91 30 50     0P.0n..KU.HU..0P
    1783:	07 90 4a 55 00 91 30 50 07 90 46 55 00 91 30 6e     ..JU..0P..FU..0n
    1793:	07 90 4d 55 00 91 30 50 07 90 46 55 00 91 30 50     ..MU..0P..FU..0P
    17a3:	07 90 4f 55 00 91 30 6e 07 90 46 55 00 91 30 50     ..OU..0n..FU..0P
    17b3:	07 90 4d 55 00 91 2e 6e 07 90 46 55 07 48 78 00     ..MU...n..FU.Hx.
    17c3:	91 2c 6e 07 90 43 55 00 91 2c 50 07 90 48 55 00     .,n..CU..,P..HU.
    17d3:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
    17e3:	91 2c 50 07 90 48 55 00 91 2c 50 07 90 4a 78 00     .,P..HU..,P..Jx.
    17f3:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 55 00     .,n..KU..,P..MU.
    1803:	91 2c 50 07 90 4a 78 00 91 2c 6e 06 90 4b 55 00     .,P..Jx..,n..KU.
    1813:	91 2c 50 07 90 4d 55 00 91 2c 50 07 90 4f 78 00     .,P..MU..,P..Ox.
    1823:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 78 00     .,n..KU..,P..Mx.
    1833:	91 2b 6e 07 90 4f 55 07 50 78 00 91 2c 6e 07 90     .+n..OU.Px..,n..
    1843:	4d 55 00 91 2c 50 07 90 4f 55 00 91 2c 50 07 90     MU..,P..OU..,P..
    1853:	4b 78 00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90     Kx..,n..MU..,P..
    1863:	4a 55 00 91 2c 50 07 2c 6e 02 90 4b 78 05 48 55     JU..,P.,n..Kx.HU
    1873:	00 91 2c 50 07 90 4a 55 00 91 2c 50 07 90 46 78     ..,P..JU..,P..Fx
    1883:	00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90 46 78     ..,n..MU..,P..Fx
    1893:	00 91 2c 50 07 90 4f 55 00 91 2c 6e 07 90 46 78     ..,P..OU..,n..Fx
    18a3:	00 91 2c 50 07 90 4d 55 00 91 2b 6e 06 90 46 78     ..,P..MU..+n..Fx
    18b3:	07 48 55 00 91 29 6e 07 90 43 55 00 91 29 50 07     .HU..)n..CU..)P.
    18c3:	90 48 55 00 91 29 50 07 90 4a 55 00 91 29 6e 07     .HU..)P..JU..)n.
    18d3:	90 4b 55 00 91 29 50 07 90 48 55 00 91 29 50 07     .KU..)P..HU..)P.
    18e3:	90 4a 55 00 91 2b 6e 07 90 4b 55 00 91 2b 50 07     .JU..+n..KU..+P.
    18f3:	90 4d 55 00 91 2b 50 07 90 4a 55 00 91 2b 6e 07     .MU..+P..JU..+n.
    1903:	90 4b 55 00 91 2b 50 07 90 4d 55 00 91 2b 50 07     .KU..+P..MU..+P.
    1913:	90 4f 55 00 91 2c 6e 07 90 4b 55 00 91 2c 50 07     .OU..,n..KU..,P.
    1923:	90 4d 55 00 91 2c 6e 07 90 4f 55 07 50 55 00 91     .MU..,n..OU.PU..
    1933:	2e 6e 07 90 4d 55 00 91 2e 50 07 90 4f 55 00 91     .n..MU...P..OU..
    1943:	2e 50 07 90 4b 55 00 91 2e 6e 06 90 4d 55 00 91     .P..KU...n..MU..
    1953:	2e 50 07 90 4a 55 00 91 2e 50 07 2e 6e 03 90 4b     .P..JU...P..n..K
    1963:	55 04 48 55 00 91 2e 50 07 90 4a 55 00 91 2e 50     U.HU...P..JU...P
    1973:	07 90 46 55 00 91 2e 6e 07 90 4d 55 00 91 2e 50     ..FU...n..MU...P
    1983:	07 90 46 55 00 91 2e 50 07 90 4f 55 00 91 30 6e     ..FU...P..OU..0n
    1993:	07 90 46 55 00 91 30 50 07 90 4d 55 00 91 2e 6e     ..FU..0P..MU...n
    19a3:	07 90 46 55 07 54 64 00 48 64 00 91 30 6e 07 30     ..FU.Td.Hd..0n.0
    19b3:	50 07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e     P.0P.0n.0P.0P.0n
    19c3:	07 30 50 06 30 50 07 30 6e 07 30 50 07 30 50 07     .0P.0P.0n.0P.0P.
    19d3:	30 6e 07 30 50 07 2e 6e 0e 30 6e 07 30 50 07 30     0n.0P..n.0n.0P.0
    19e3:	50 07 30 6e 07 30 50 07 30 50 07 30 6e 07 30 50     P.0n.0P.0P.0n.0P
    19f3:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 06     .0P.0n.0P.0P.0n.
    1a03:	30 50 07 2e 6e 0e 90 33 64 00 37 64 00 3c 64 00     0P..n..3d.7d.<d.
    1a13:	91 30 6e 07 30 50 07 30 50 07 90 32 64 00 37 64     .0n.0P.0P..2d.7d
    1a23:	00 3a 64 00 91 30 6e 07 30 50 07 30 50 07 90 33     .:d..0n.0P.0P..3
    1a33:	64 00 37 64 00 3c 64 00 91 30 6e 07 30 50 07 30     d.7d.<d..0n.0P.0
    1a43:	50 07 90 37 64 00 3a 64 00 3e 64 00 91 30 6e 07     P..7d.:d.>d..0n.
    1a53:	30 50 07 30 50 07 90 37 64 00 3c 64 00 3f 64 00     0P.0P..7d.<d.?d.
    1a63:	91 30 6e 07 30 50 07 90 37 64 00 3a 64 00 3e 64     .0n.0P..7d.:d.>d
    1a73:	00 91 30 6e 07 30 6e 07 90 3a 64 00 43 64 00 3f     ..0n.0n..:d.Cd.?
    1a83:	64 00 91 33 6e 06 33 50 07 33 50 07 33 6e 07 33     d..3n.3P.3P.3n.3
    1a93:	50 07 33 50 07 90 37 64 00 3a 64 00 3f 64 00 91     P.3P..7d.:d.?d..
    1aa3:	33 6e 07 33 50 07 33 50 07 33 6e 07 33 50 07 33     3n.3P.3P.3n.3P.3
    1ab3:	50 07 90 3a 64 00 3f 64 00 43 64 00 91 33 6e 07     P..:d.?d.Cd..3n.
    1ac3:	33 50 07 33 6e 07 33 6e 07 90 41 64 00 3e 64 00     3P.3n.3n..Ad.>d.
    1ad3:	3a 64 00 91 2e 6e 07 2e 50 07 2e 50 07 2e 6e 07     :d...n..P..P..n.
    1ae3:	2e 50 07 2e 50 06 90 35 64 00 3a 64 00 3e 64 00     .P..P..5d.:d.>d.
    1af3:	91 2e 6e 07 2e 50 07 2e 50 07 2e 6e 07 2e 50 07     ..n..P..P..n..P.
    1b03:	2e 50 07 90 3a 64 00 3e 64 00 41 64 00 91 2e 6e     .P..:d.>d.Ad...n
    1b13:	07 2e 50 07 2e 6e 07 2e 6e 07 90 37 64 00 3c 64     ..P..n..n..7d.<d
    1b23:	00 3f 64 00 91 30 6e 07 30 50 07 30 50 07 30 6e     .?d..0n.0P.0P.0n
    1b33:	07 30 50 07 30 50 07 30 6e 07 30 50 07 30 50 07     .0P.0P.0n.0P.0P.
    1b43:	30 6e 06 30 50 07 30 50 07 30 6e 07 30 50 07 2e     0n.0P.0P.0n.0P..
    1b53:	6e 0e 30 6e 07 30 50 07 30 50 07 30 6e 07 30 50     n.0n.0P.0P.0n.0P
    1b63:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 07     .0P.0n.0P.0P.0n.
    1b73:	30 50 07 30 50 07 30 6e 07 30 50 07 2e 6e 0d 90     0P.0P.0n.0P..n..
    1b83:	33 64 00 37 64 00 3c 64 00 91 30 6e 07 30 50 07     3d.7d.<d..0n.0P.
    1b93:	30 50 07 90 32 64 00 37 64 00 3a 64 00 91 30 6e     0P..2d.7d.:d..0n
    1ba3:	07 30 50 07 30 50 07 90 33 64 00 37 64 00 3c 64     .0P.0P..3d.7d.<d
    1bb3:	00 91 30 6e 07 30 50 07 30 50 07 90 37 64 00 3a     ..0n.0P.0P..7d.:
    1bc3:	64 00 3e 64 00 91 30 6e 07 30 50 07 30 50 07 90     d.>d..0n.0P.0P..
    1bd3:	37 64 00 3c 64 00 3f 64 00 91 30 6e 07 30 50 07     7d.<d.?d..0n.0P.
    1be3:	90 37 64 00 3a 64 00 3e 64 00 91 2e 6e 0e 90 3a     .7d.:d.>d...n..:
    1bf3:	64 00 43 64 00 3f 64 00 91 33 6e 07 33 50 07 33     d.Cd.?d..3n.3P.3
    1c03:	50 07 33 6e 06 33 50 07 33 50 07 90 37 64 00 3a     P.3n.3P.3P..7d.:
    1c13:	64 00 3f 64 00 91 33 6e 07 33 50 07 33 50 07 33     d.?d..3n.3P.3P.3
    1c23:	6e 07 33 50 07 33 50 07 90 3a 64 00 3f 64 00 43     n.3P.3P..:d.?d.C
    1c33:	64 00 91 33 6e 07 33 50 07 32 6e 0e 90 41 64 00     d..3n.3P.2n..Ad.
    1c43:	3e 64 00 3a 64 00 91 2e 6e 07 2e 50 07 2e 50 07     >d.:d...n..P..P.
    1c53:	2e 6e 07 2e 50 07 2e 50 07 90 35 64 00 3a 64 00     .n..P..P..5d.:d.
    1c63:	3e 64 00 91 2e 6e 07 2e 50 06 2e 50 07 2e 6e 07     >d...n..P..P..n.
    1c73:	2e 50 07 2e 50 07 90 3a 64 00 3e 64 00 41 64 00     .P..P..:d.>d.Ad.
    1c83:	91 2e 6e 05 ff 06 01 45 02 91 2e 50 07 2c 6e 0e     ..n....E...P.,n.
    1c93:	90 37 64 00 3c 64 00 3f 64 00 91 30 6e 07 30 50     .7d.<d.?d..0n.0P
    1ca3:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 07     .0P.0n.0P.0P.0n.
    1cb3:	30 50 07 30 50 07 30 6e 07 30 50 07 30 50 07 ff     0P.0P.0n.0P.0P..
    1cc3:	2f 00                                               /.

00001cc5 <my_patches>:
    1cc5:	00 00 00 3c 1e 00 00 00 00 00 00 00 3c 1e 00 00     ...<........<...
    1cd5:	00 00 00 00 00 2b 1e 00 00 00 00 00 00 00 d5 1d     .....+..........
    1ce5:	00 00 00 00 00 00 00 2b 1e 00 00 00 00 00 00 00     .......+........
    1cf5:	04 1d 00 00 00 00 00 00 00 04 1d 00 00 00 00        ...............

00001d04 <explode>:
    1d04:	00 07 7f 00 02 03 00 00 ff 00 08 41 01 04 04 01     ...........A....
    1d14:	04 04 01 04 04 01 04 04 01 04 04 01 04 04 01 04     ................
    1d24:	04 01 04 04 01 04 04 03 07 64 00 08 3c 01 04 04     .........d..<...
    1d34:	01 04 04 01 04 04 01 04 04 01 04 04 01 04 04 01     ................
    1d44:	04 04 01 04 04 01 04 04 03 07 50 00 08 37 01 04     ..........P..7..
    1d54:	04 01 04 04 01 04 04 01 04 04 01 04 04 01 04 04     ................
    1d64:	01 04 04 01 04 04 01 04 04 03 07 32 00 08 32 01     ...........2..2.
    1d74:	04 04 01 04 04 01 04 04 01 04 04 01 04 04 01 04     ................
    1d84:	04 01 04 04 01 04 04 01 04 04 03 07 28 00 08 2d     ............(..-
    1d94:	01 04 04 01 04 04 01 04 04 01 04 04 01 04 04 01     ................
    1da4:	04 04 01 04 04 01 04 04 01 04 04 03 07 14 00 08     ................
    1db4:	28 01 04 04 01 04 04 01 04 04 01 04 04 01 04 04     (...............
    1dc4:	01 04 04 01 04 04 01 04 04 01 04 04 01 05 00 00     ................
    1dd4:	ff                                                  .

00001dd5 <pshoot>:
    1dd5:	00 02 03 00 07 7f 00 08 50 01 04 06 01 04 06 01     ........P.......
    1de5:	04 06 01 07 00 03 07 7f 00 08 50 01 04 06 01 04     ..........P.....
    1df5:	06 01 04 06 01 07 00 03 08 50 00 07 20 01 04 06     .........P.. ...
    1e05:	01 04 06 01 04 06 01 04 06 01 07 00 03 08 50 00     ..............P.
    1e15:	07 0f 01 04 06 01 04 06 01 04 06 01 04 06 01 07     ................
    1e25:	00 01 05 00 00 ff                                   ......

00001e2b <navigate>:
    1e2b:	00 02 04 00 07 70 00 00 d8 00 08 3c 01 05 00 00     .....p.....<....
    1e3b:	ff                                                  .

00001e3c <instrument>:
    1e3c:	00 02 04 00 00 dd 00 ff                             ........

00001e44 <sprites_data>:
    1e44:	fe fe fe fe fe fe fe 87 fe fe fe fe fe fe 87 87     ................
    1e54:	fe fe fe fe fe fe 87 87 fe fe fe fe 85 85 85 87     ................
    1e64:	fe fe fe 85 87 87 87 85 fe fe 85 87 87 87 87 85     ................
    1e74:	fe 85 87 87 87 85 85 87 85 87 87 85 85 87 87 87     ................
    1e84:	87 87 87 fe fe fe fe fe d2 d2 eb d2 fe fe fe fe     ................
    1e94:	87 d2 fd eb fe fe fe fe 87 87 eb d2 fe fe fe fe     ................
    1ea4:	85 87 87 d2 fe fe fe fe 87 85 85 87 85 fe fe fe     ................
    1eb4:	87 ef 87 87 87 85 fe fe ef ff ef 87 87 85 fe fe     ................
    1ec4:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 87     ................
    1ed4:	fe fe fe fe fe fe 87 87 fe fe fe fe fe fe 87 87     ................
    1ee4:	fe fe fe fe 85 85 85 87 fe fe fe 85 87 87 87 85     ................
    1ef4:	fe fe 85 87 87 87 87 85 fe 85 87 87 87 85 85 87     ................
    1f04:	fe fe fe fe fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    1f14:	d2 d2 eb d2 fe fe fe fe 87 d2 fd eb fe fe fe fe     ................
    1f24:	87 87 eb d2 fe fe fe fe 85 87 87 d2 fe fe fe fe     ................
    1f34:	87 85 85 87 85 fe fe fe 87 ef 87 87 87 85 fe fe     ................
    1f44:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1f54:	fe fe fe fe fe fe fe fe fe ba ba ba ba ba ba fe     ................
    1f64:	ba bd bd bd bd bd bd ba fe ba ba ba ba ba ba fe     ................
    1f74:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1f84:	fe fe 46 46 46 46 46 46 fe a5 a5 a5 47 47 46 fe     ..FFFFFF....GGF.
    1f94:	fe 46 46 47 47 46 3f 3f 46 46 47 47 46 fe fe fe     .FFGGF??FFGGF...
    1fa4:	46 46 47 47 46 fe fe fe fe 46 46 47 47 3f 3f fe     FFGGF....FFGG??.
    1fb4:	fe a5 a5 a5 47 fe fe fe fe fe 46 46 46 46 fe fe     ....G.....FFFF..
    1fc4:	fe fe fe ff fe fe fe fe fe fe ff ff ff fe fe fe     ................
    1fd4:	fe ff ff fd ff ff fe fe ff ff fd f8 fd ff ff fe     ................
    1fe4:	fe ff ff fd ff ff fe fe fe fe ff ff ff fe fe fe     ................
    1ff4:	fe fe fe ff fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2004:	fe fe fe 07 fe fe fe fe fe fe 07 07 07 fe fe fe     ................
    2014:	fe 07 07 27 07 07 fe fe 07 07 27 77 27 07 07 fe     ...'......'w'...
    2024:	fe 07 07 27 07 07 fe fe fe fe 07 07 07 fe fe fe     ...'............
    2034:	fe fe fe 07 fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2044:	fe fe fe 38 fe fe fe fe fe fe 38 38 38 fe fe fe     ...8......888...
    2054:	fe 38 38 bc 38 38 fe fe 38 38 bc be bc 38 38 fe     .88.88..88...88.
    2064:	fe 38 38 bc 38 38 fe fe fe fe 38 38 38 fe fe fe     .88.88....888...
    2074:	fe fe fe 38 fe fe fe fe fe fe fe fe fe fe fe fe     ...8............
    2084:	fe fe fe a2 fe fe fe fe fe fe a2 a2 a2 fe fe fe     ................
    2094:	fe a2 a2 aa a2 a2 fe fe a2 a2 aa ad aa a2 a2 fe     ................
    20a4:	fe a2 a2 aa a2 a2 fe fe fe fe a2 a2 a2 fe fe fe     ................
    20b4:	fe fe fe a2 fe fe fe fe fe fe fe fe fe fe fe fe     ................
    20c4:	fe fe fe 6e fe fe fe fe fe fe 6e 6e 6e fe fe fe     ...n......nnn...
    20d4:	fe 6e 6e 6f 6e 6e fe fe 6e 6e 6f 77 6f 6e 6e fe     .nnonn..nnowonn.
    20e4:	fe 6e 6e 6f 6e 6e fe fe fe fe 6e 6e 6e fe fe fe     .nnonn....nnn...
    20f4:	fe fe fe 6e fe fe fe fe fe fe fe fe fe fe fe fe     ...n............
    2104:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2114:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2124:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2134:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2144:	85 87 87 85 fe 85 87 87 fe 85 87 85 fe 85 87 87     ................
    2154:	fe 85 87 87 ad ad ad ad fe fe 85 87 ad ad ad ad     ................
    2164:	fe fe 85 87 ad ad ad ad fe fe fe 85 a4 ad 87 87     ................
    2174:	fe fe fe fe a4 a4 85 87 fe fe fe fe a4 a4 85 87     ................
    2184:	87 ef 87 85 87 85 fe fe 87 87 87 85 87 87 85 fe     ................
    2194:	ad ad ad ad ad 87 85 fe ad ad ad ad ad ad a4 ad     ................
    21a4:	ad ad ad ad ad a4 a4 a4 87 87 87 85 fe fe fe fe     ................
    21b4:	87 87 87 85 fe fe fe fe 87 87 87 85 fe fe fe fe     ................
    21c4:	87 ef 87 85 87 85 fe fe 87 87 87 85 87 87 85 fe     ................
    21d4:	ad ad ad ad ad 87 85 fe ad ad ad ad ad ad a4 ad     ................
    21e4:	ad ad ad ad ad a4 a4 a4 87 87 87 85 fe fe fe fe     ................
    21f4:	87 87 87 85 fe fe fe fe 87 87 85 fe fe fe fe fe     ................
    2204:	85 87 87 85 85 87 87 87 85 87 87 85 fe 85 87 87     ................
    2214:	fe 85 87 85 fe 85 87 87 fe 85 87 87 ad ad ad ad     ................
    2224:	fe fe 85 87 ad ad ad ad fe fe 85 87 ad ad ad ad     ................
    2234:	fe fe fe 85 a4 ad 87 87 fe fe fe fe a4 a4 85 87     ................
    2244:	ef ff ef 87 87 85 fe fe 87 ef 87 85 87 85 fe fe     ................
    2254:	87 87 87 85 87 87 85 fe ad ad ad ad ad 87 85 fe     ................
    2264:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    2274:	87 87 87 87 fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    2284:	87 ef 87 85 87 85 fe fe 87 87 87 85 87 87 85 fe     ................
    2294:	ad ad ad ad ad 87 85 fe ad ad ad ad ad ad a4 ad     ................
    22a4:	ad ad ad ad ad a4 a4 a4 87 87 87 87 fe fe fe fe     ................
    22b4:	87 87 87 87 fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    22c4:	ef ff ef 87 87 85 fe fe 87 ef 87 85 87 85 fe fe     ................
    22d4:	87 87 87 85 87 87 85 fe ad ad ad ad ad 87 85 fe     ................
    22e4:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    22f4:	87 87 87 87 fe fe fe fe 87 87 87 87 87 fe fe fe     ................
    2304:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2314:	fe fe fe 27 07 fe fe fe fe fe 27 77 27 07 fe fe     ...'......'w'...
    2324:	fe fe 07 27 07 07 fe fe fe fe fe 07 07 fe fe fe     ...'............
    2334:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2344:	fe fe a3 a0 a0 a3 3f 3f fe a3 a3 a3 a3 a3 a3 fe     ......??........
    2354:	a3 a3 a3 78 78 a3 a3 a3 a0 a3 78 7d 7d 78 a3 a0     ...xx.....x}}x..
    2364:	a0 a3 78 7d 7d 78 a3 a0 a3 a3 a3 78 78 a3 a3 a3     ..x}}x.....xx...
    2374:	fe a3 a3 a3 a3 a3 a3 fe fe fe a3 a0 a0 a3 3f 3f     ..............??
    2384:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2394:	fe fe fe eb d2 fe fe fe fe fe eb 77 eb d2 fe fe     ...........w....
    23a4:	fe fe d2 eb d2 d2 fe fe fe fe fe d2 d2 fe fe fe     ................
    23b4:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    23c4:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    23d4:	fe fe fe fe fe fe fe fe fe fe ff ff ff ff ff ff     ................
    23e4:	fe f8 f8 f8 f8 f8 f8 fe ff ff ff ff ff ff fe fe     ................
    23f4:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2404:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2414:	fe fe fe fe fe fe fe fe fe 87 87 87 87 87 87 fe     ................
    2424:	87 ef ef ef ef ef ef 87 fe 87 87 87 87 87 87 fe     ................
    2434:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2444:	7f 7f fe fe ff fe 7f 7f 7f 7f 7f ff ff 7f 7f 7f     ................
    2454:	fe 7f 7f eb d2 7f 7f fe ff ff eb 77 eb d2 ff fe     ...........w....
    2464:	fe ff d2 eb d2 d2 ff ff fe 7f 7f d2 d2 7f 7f fe     ................
    2474:	7f 7f 7f ff ff 7f 7f 7f 7f 7f fe ff fe fe 7f 7f     ................
    2484:	fe fe fe fe fe fe 85 87 fe fe fe fe fe fe 85 87     ................
    2494:	fe fe fe fe fe 85 87 87 fe fe fe fe fe 85 87 87     ................
    24a4:	fe fe fe fe 85 87 87 fe fe fe fe fe 85 87 87 fe     ................
    24b4:	fe fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4     ................
    24c4:	87 fe 85 85 fe fe fe fe 87 fe 85 85 85 fe fe fe     ................
    24d4:	fe fe 85 85 85 fe fe fe fe fe 85 85 85 fe fe fe     ................
    24e4:	fe fe 85 85 85 fe fe fe fe fe 85 85 85 fe fe fe     ................
    24f4:	fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe     ................
    2504:	fe fe fe fe fe fe fe 85 fe fe fe fe fe fe fe 85     ................
    2514:	fe fe fe fe fe 85 85 87 fe fe fe fe 85 87 87 87     ................
    2524:	fe fe fe a4 87 87 87 87 fe fe fe a4 87 87 87 fe     ................
    2534:	fe fe fe a4 a4 fe fe fe fe fe fe a4 a4 a4 fe fe     ................
    2544:	87 87 87 fe fe fe fe fe 87 87 87 87 fe fe fe fe     ................
    2554:	87 87 87 87 fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    2564:	87 85 85 fe fe fe fe fe 85 85 85 fe fe fe fe fe     ................
    2574:	a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe fe fe     ................
    2584:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 85 85     ................
    2594:	fe fe fe fe 85 85 85 85 a4 a4 85 85 85 85 85 fe     ................
    25a4:	a4 a4 85 85 85 85 85 fe a4 a4 85 85 85 85 fe fe     ................
    25b4:	a4 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    25c4:	87 87 87 fe fe fe fe fe fe 85 87 87 fe fe fe fe     ................
    25d4:	fe 85 87 87 87 fe fe fe fe fe 85 87 87 fe fe fe     ................
    25e4:	fe fe 85 87 87 87 fe fe fe fe fe 85 87 87 fe fe     ................
    25f4:	fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe     ................
    2604:	fe fe fe fe fe fe fe 85 fe fe fe fe fe fe fe 85     ................
    2614:	fe fe fe fe fe 85 85 85 fe fe fe fe 85 85 85 85     ................
    2624:	fe fe fe a4 85 85 85 85 fe fe fe a4 85 85 85 fe     ................
    2634:	fe fe fe a4 a4 fe fe fe fe fe fe a4 a4 a4 fe fe     ................
    2644:	87 87 87 fe fe fe fe fe 85 87 87 85 fe fe fe fe     ................
    2654:	85 87 87 85 fe fe fe fe 85 87 87 fe fe fe fe fe     ................
    2664:	85 87 87 fe fe fe fe fe 85 87 87 fe fe fe fe fe     ................
    2674:	a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe fe fe     ................
    2684:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 85 85     ................
    2694:	fe fe fe fe 85 85 85 85 a4 a4 85 85 85 85 a4 a4     ................
    26a4:	a4 a4 85 85 85 85 a4 a4 a4 a4 85 85 85 85 a4 a4     ................
    26b4:	a4 fe fe fe fe fe a4 fe fe fe fe fe fe fe fe fe     ................
    26c4:	87 87 85 87 87 fe fe fe fe fe 85 87 87 87 fe fe     ................
    26d4:	fe fe 85 87 87 87 fe fe 85 85 85 87 87 fe fe fe     ................
    26e4:	87 87 87 87 87 fe fe fe 87 87 87 87 fe fe fe fe     ................
    26f4:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2704:	fe fe fe fe fe fe fe fe fe fe 00 00 00 00 fe fe     ................
    2714:	ad 00 0f 1f 1f 0f 00 ad ad 00 00 00 00 00 00 ad     ................
    2724:	ad ad 00 00 00 00 ad ad ad 00 ad 00 00 ad 00 ad     ................
    2734:	ad fe 00 00 00 00 fe ad ad fe fe fe fe fe fe ad     ................
    2744:	fe fe fe 00 00 00 fe fe 00 00 00 0f 1f 00 00 fe     ................
    2754:	fe fe 00 00 00 00 00 fe fe fe fe fe 00 00 fe fe     ................
    2764:	fe 00 00 00 00 00 00 fe 00 ad ad ad ad ad ad 00     ................
    2774:	00 ad ad ad ad ad ad 00 fe 00 00 00 00 00 00 fe     ................
    2784:	ff ff ff ff ff ff ff a3 ff ff ff ff ff ff ff a3     ................
    2794:	a3 ff ff ff ff ff a3 fe a3 ff ff ff ff ff a3 fe     ................
    27a4:	fe a3 ff ff ff a3 fe fe fe a3 ff ff ff a3 fe fe     ................
    27b4:	fe fe a3 ff a3 fe fe fe fe fe a3 ff a3 fe fe fe     ................
    27c4:	fe fe fe 07 07 fe fe fe fe fe 07 27 07 07 fe fe     ...........'....
    27d4:	fe 07 27 77 27 07 07 fe fe 07 07 27 07 07 07 fe     ..'w'......'....
    27e4:	fe fe 07 27 07 07 fe fe fe fe 07 07 07 fe fe fe     ...'............
    27f4:	fe fe fe 07 07 fe fe fe fe fe fe 07 fe fe fe fe     ................
    2804:	fe fe fe 14 fe fe fe fe fe fe 14 14 14 fe fe fe     ................
    2814:	fe 14 14 0f 14 14 fe fe 14 14 0f 06 0f 14 14 fe     ................
    2824:	fe 14 14 0f 14 14 fe fe fe fe 14 14 14 fe fe fe     ................
    2834:	fe fe fe 14 fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2844:	fe fe fe 7f fe fe fe fe fe fe 7f 7f 7f fe fe fe     ................
    2854:	fe 7f 7f 07 7f 7f fe fe 7f 7f 07 00 07 7f 7f fe     ................
    2864:	fe 7f 7f 07 7f 7f fe fe fe fe 7f 7f 7f fe fe fe     ................
    2874:	fe fe fe 7f fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2884:	fe fe fe fe 38 fe fe fe fe fe fe 38 38 fe fe fe     ....8......88...
    2894:	fe fe fe 38 38 38 fe fe fe fe 38 38 bc 38 fe fe     ...888....88.8..
    28a4:	fe 38 38 38 bc 38 38 fe fe 38 38 bc be bc 38 fe     .888.88..88...8.
    28b4:	fe fe 38 38 bc 38 fe fe fe fe fe 38 38 fe fe fe     ..88.8.....88...
    28c4:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 7f     ................
    28d4:	fe fe fe fe fe 7f 7f 7f fe fe fe fe 7f 7f 7f 7f     ................
    28e4:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe fe fe     ................
    28f4:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2904:	a4 fe fe fe fe fe fe fe a4 ad fe fe ff ff a4 ad     ................
    2914:	a4 ad f6 ff ff a4 ad f6 a4 ad f6 ff a4 ad f6 ff     ................
    2924:	a4 ad fe fe a4 ad f6 ff a4 fe fe a4 a4 ad f6 fe     ................
    2934:	fe fe fe a4 a4 ad f6 f6 fe fe fe fe fe fe fe fe     ................
    2944:	fe fe fe fe fe fe fe fe f6 ff ff ff d2 fe fe fe     ................
    2954:	ff ff ff ff d2 eb fe fe ff fe ff ff eb fd d2 fe     ................
    2964:	fe fe fe ff d2 eb d2 d2 fe fe fe fe fe fe fe fe     ................
    2974:	f6 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2984:	fe fe bf 7f 7f bf fe fe fe 7f 7f 7f 7f 7f 7f fe     ................
    2994:	bf 7f 7f 7f 7f 7f 7f bf 7f 7f 7f 7f 7f 7f 7f 7f     ................
    29a4:	7f 7f 7f 7f 7f 7f 7f 7f bf 7f 7f 7f 7f 7f 7f bf     ................
    29b4:	fe 7f 7f 7f 7f 7f 7f fe fe fe bf 7f 7f bf fe fe     ................
    29c4:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    29d4:	fe fe fe 7f 7f fe fe fe fe fe 7f 7f 7f 7f fe fe     ................
    29e4:	fe fe 7f 7f 7f 7f fe fe fe fe fe 7f 7f fe fe fe     ................
    29f4:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2a04:	fe fe bf 7f 7f bf fe fe fe 7f 7f 7f 7f 7f 7f fe     ................
    2a14:	bf 7f fe fe 7f 7f 7f bf 7f fe fe fe fe 7f 7f 7f     ................
    2a24:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe 7f bf     ................
    2a34:	fe fe fe fe fe fe 7f fe fe fe fe fe fe bf fe fe     ................
    2a44:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2a54:	fe fe fe fe fe fe fe fe fe fe fe e3 fe fe fe fe     ................
    2a64:	fe fe fe ff fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2a74:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2a84:	fe fe fe fe fe fe fe fe fe fe fe fe ff fe fe fe     ................
    2a94:	fe fe fe fe 7f ff fe fe fe fe fe fe 7f 7f ff fe     ................
    2aa4:	fe fe fe fe 7f 7f 7f ff fe fe fe fe 7f 7f 7f fe     ................
    2ab4:	fe fe fe fe 7f 7f fe fe fe fe fe fe 7f fe fe fe     ................
    2ac4:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2ad4:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2ae4:	7f 7f 7f 7f 7f 7f ff fe fe 7f 7f 7f 7f ff fe fe     ................
    2af4:	fe fe 7f 7f ff fe fe fe fe fe fe fe fe fe fe fe     ................
    2b04:	fe fe fe ff fe fe fe fe fe fe ff 7f 7f fe fe fe     ................
    2b14:	fe ff 7f 7f 7f 7f fe fe ff 7f 7f 7f 7f 7f 7f fe     ................
    2b24:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2b34:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2b44:	fe fe 00 00 00 00 fe fe fe 00 0f 1f 1f 0f 00 fe     ................
    2b54:	ad 00 00 00 00 00 00 ad ad 00 ad 00 00 ad 00 ad     ................
    2b64:	ad ad 00 00 00 00 ad ad ad fe 00 00 00 00 fe ad     ................
    2b74:	ad fe fe fe fe fe fe ad ad fe fe fe fe fe fe ad     ................
    2b84:	fe fe fe 00 00 fe fe fe fe fe 00 00 00 00 fe fe     ................
    2b94:	fe 00 00 0f 0f 00 00 fe 00 00 0f 1f 1f 0f 00 00     ................
    2ba4:	00 00 fe fe fe fe 00 00 00 fe fe fe fe fe fe 00     ................
    2bb4:	00 fe fe fe fe fe fe 00 fe fe fe fe fe fe fe fe     ................
    2bc4:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2bd4:	fe fe fe fe fe fe fe fe fe 07 07 07 07 07 07 fe     ................
    2be4:	07 27 27 27 27 27 27 07 fe 07 07 07 07 07 07 fe     .''''''.........
    2bf4:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2c04:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 7f     ................
    2c14:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe fe 7f     ................
    2c24:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2c34:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2c44:	a4 fe fe fe fe fe fe fe a4 a4 fe fe fe fe fe fe     ................
    2c54:	a4 a4 ad fe fe fe fe fe a4 a4 ad ad fe fe fe fe     ................
    2c64:	a4 a4 ad ad f6 fe fe fe a4 a4 ad ad f6 f6 ff ff     ................
    2c74:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    2c84:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2c94:	fe fe ff ff ff ff a4 a4 fe ff ff ff ff a4 a4 a4     ................
    2ca4:	ff ff ff ff ff a4 a4 a4 ff ff ff ff a4 a4 a4 ad     ................
    2cb4:	ff ff ff ff a4 a4 ad ad ff ff ff a4 a4 ad ad f6     ................
    2cc4:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2cd4:	a4 ad ad f6 f6 ff ff ff a4 ad ad f6 f6 ff ff ff     ................
    2ce4:	ad ad f6 f6 ff ff ff ff ad f6 f6 ff ff ff ff ff     ................
    2cf4:	f6 f6 ff ff ff ff ff ff f6 ff ff 7f 7f ff ff ff     ................
    2d04:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2d14:	d2 fe fe fe fe fe fe fe d2 d2 fe fe fe fe fe fe     ................
    2d24:	d2 d2 d2 fe fe fe fe fe d2 d3 eb d3 fe fe fe fe     ................
    2d34:	d2 eb fd eb d2 fe fe fe d2 d3 eb d3 d2 d2 fe fe     ................
    2d44:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    2d54:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 7f 7f fe     ................
    2d64:	a4 a4 ad ad 7f 7f 7f fe a4 a4 ad fe fe 7f fe fe     ................
    2d74:	a4 a4 fe fe fe fe fe fe a4 fe fe fe fe fe fe fe     ................
    2d84:	ff ff fe a4 ad ad f6 f6 ff fe a4 a4 ad ad f6 f6     ................
    2d94:	fe fe a4 a4 ad ad f6 f6 fe a4 a4 a4 ad ad f6 f6     ................
    2da4:	fe a4 a4 a4 a4 ad ad f6 a4 a4 a4 a4 a4 a4 ad ad     ................
    2db4:	a4 a4 a4 a4 a4 a4 a4 ad a4 a4 a4 a4 a4 a4 a4 a4     ................
    2dc4:	ff ff 7f 7f 7f 7f ff ff ff fe 7f 7f 7f 7f fe ff     ................
    2dd4:	fe fe 7f 7f 7f fe fe fe fe fe fe 7f fe fe fe fe     ................
    2de4:	f6 fe fe fe fe fe fe fe f6 f6 fe fe fe fe fe fe     ................
    2df4:	ad f6 f6 fe fe fe fe fe ad ad f6 f6 fe fe fe fe     ................
    2e04:	d2 d2 d2 d2 d2 d2 d2 fe ff ff ff ff ff ff ff ff     ................
    2e14:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2e24:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2e34:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2e44:	ef ff ef 87 87 85 fe fe 87 ef 87 85 87 85 fe fe     ................
    2e54:	87 87 87 85 87 87 85 fe ad ad ad ad ad 87 85 fe     ................
    2e64:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    2e74:	87 87 87 85 fe fe fe fe 87 87 85 fe fe fe fe fe     ................
    2e84:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 87 87     ................
    2e94:	fe fe fe fe 85 87 87 87 a4 a4 85 85 85 87 87 fe     ................
    2ea4:	a4 a4 87 87 87 87 87 fe a4 a4 87 87 87 87 fe fe     ................
    2eb4:	a4 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2ec4:	87 87 85 fe fe fe fe fe fe 85 85 85 fe fe fe fe     ................
    2ed4:	fe 85 85 85 85 fe fe fe fe fe 85 85 85 fe fe fe     ................
    2ee4:	fe fe 85 85 85 85 fe fe fe fe fe 85 85 85 fe fe     ................
    2ef4:	fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe     ................
    2f04:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2f14:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2f24:	fe fe fe fe fe fe fe fe fe fe fe fe fe 85 85 85     ................
    2f34:	fe a4 87 87 87 87 87 87 a4 a4 87 87 87 87 87 87     ................
    2f44:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 87     ................
    2f54:	fe fe fe fe 85 85 85 87 fe fe fe 85 87 87 87 85     ................
    2f64:	fe fe 85 85 87 87 87 87 85 85 85 85 85 87 87 ad     ................
    2f74:	87 87 87 87 ad 85 87 87 87 87 87 87 ad ad a4 a4     ................
    2f84:	87 87 87 87 fe fe fe fe 87 d2 d2 eb d2 fe fe fe     ................
    2f94:	87 87 d2 fd eb fe fe fe 87 87 87 eb d2 fe fe fe     ................
    2fa4:	85 85 87 87 d2 fe fe fe ad ad ad ad ad 87 ef fe     ................
    2fb4:	ad ad ad ad ad ad a4 ad a4 ad ad ad ad a4 a4 a4     ................
    2fc4:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    2fd4:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 7f 7f 7f     ................
    2fe4:	a4 a4 ad ad 7f 7f 7f fe a4 a4 ad fe 7f 7f 7f fe     ................
    2ff4:	a4 a4 fe fe fe 7f fe fe a4 fe fe fe fe fe fe fe     ................
    3004:	ff ff 7f 7f 7f 7f ff ff ff 7f 7f 7f 7f 7f 7f ff     ................
    3014:	fe fe 7f 7f 7f 7f fe fe fe fe 7f 7f 7f fe fe fe     ................
    3024:	f6 fe fe 7f fe fe fe fe f6 f6 fe fe fe fe fe fe     ................
    3034:	ad f6 f6 fe fe fe fe fe ad ad f6 f6 fe fe fe fe     ................
    3044:	fe fe fe fe fe fe fe 9c fe fe fe fe fe fe 9c 9c     ................
    3054:	fe fe fe fe fe fe 9c 9c fe fe fe fe 9a 9a 9a 9c     ................
    3064:	fe fe fe 9a 9c 9c 9c 9a fe fe 9a 9c 9c 9c 9c 9a     ................
    3074:	fe 9a 9c 9c 9c 9a 9a 9c 9a 9c 9c 9a 9a 9c 9c 9c     ................
    3084:	9c 9c 9c fe fe fe fe fe 07 07 27 07 fe fe fe fe     ..........'.....
    3094:	9c 07 77 27 fe fe fe fe 9c 9c 27 07 fe fe fe fe     ..w'......'.....
    30a4:	9a 9c 9c 07 fe fe fe fe 9c 9a 9a 9c 9a fe fe fe     ................
    30b4:	9c ad 9c 9c 9c 9a fe fe ad ff ad 9c 9c 9a fe fe     ................
    30c4:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 9c     ................
    30d4:	fe fe fe fe fe fe 9c 9c fe fe fe fe fe fe 9c 9c     ................
    30e4:	fe fe fe fe 9a 9a 9a 9c fe fe fe 9a 9c 9c 9c 9a     ................
    30f4:	fe fe 9a 9c 9c 9c 9c 9a fe 9a 9c 9c 9c 9a 9a 9c     ................
    3104:	fe fe fe fe fe fe fe fe 9c 9c 9c fe fe fe fe fe     ................
    3114:	07 07 27 07 fe fe fe fe 9c 07 77 27 fe fe fe fe     ..'.......w'....
    3124:	9c 9c 27 07 fe fe fe fe 9a 9c 9c 07 fe fe fe fe     ..'.............
    3134:	9c 9a 9a 9c 9a fe fe fe 9c ad 9c 9c 9c 9a fe fe     ................
    3144:	9a 9c 9c 9a fe 9a 9c 9c fe 9a 9c 9a fe 9a 9c 9c     ................
    3154:	fe 9a 9c 9c ad ad ad ad fe fe 9a 9c ad ad ad ad     ................
    3164:	fe fe 9a 9c ad ad ad ad fe fe fe 9a 00 ad 9c 9c     ................
    3174:	fe fe fe fe 00 00 9a 9c fe fe fe fe 00 00 9a 9c     ................
    3184:	9c ad 9c 9a 9c 9a fe fe 9c 9c 9c 9a 9c 9c 9a fe     ................
    3194:	ad ad ad ad ad 9c 9a fe ad ad ad ad ad ad 00 ad     ................
    31a4:	ad ad ad ad ad 00 00 00 9c 9c 9c 9a fe fe fe fe     ................
    31b4:	9c 9c 9c 9a fe fe fe fe 9c 9c 9c 9a fe fe fe fe     ................
    31c4:	9c ad 9c 9a 9c 9a fe fe 9c 9c 9c 9a 9c 9c 9a fe     ................
    31d4:	ad ad ad ad ad 9c 9a fe ad ad ad ad ad ad 00 ad     ................
    31e4:	ad ad ad ad ad 00 00 00 9c 9c 9c 9a fe fe fe fe     ................
    31f4:	9c 9c 9c 9a fe fe fe fe 9c 9c 9a fe fe fe fe fe     ................
    3204:	9a 9c 9c 9a 9a 9c 9c 9c 9a 9c 9c 9a fe 9a 9c 9c     ................
    3214:	fe 9a 9c 9a fe 9a 9c 9c fe 9a 9c 9c ad ad ad ad     ................
    3224:	fe fe 9a 9c ad ad ad ad fe fe 9a 9c ad ad ad ad     ................
    3234:	fe fe fe 9a 00 ad 9c 9c fe fe fe fe 00 00 9a 9c     ................
    3244:	ad ff ad 9c 9c 9a fe fe 9c ad 9c 9a 9c 9a fe fe     ................
    3254:	9c 9c 9c 9a 9c 9c 9a fe ad ad ad ad ad 9c 9a fe     ................
    3264:	ad ad ad ad ad ad 00 ad ad ad ad ad ad 00 00 00     ................
    3274:	9c 9c 9c 9c fe fe fe fe 9c 9c 9c fe fe fe fe fe     ................
    3284:	9c ad 9c 9a 9c 9a fe fe 9c 9c 9c 9a 9c 9c 9a fe     ................
    3294:	ad ad ad ad ad 9c 9a fe ad ad ad ad ad ad 00 ad     ................
    32a4:	ad ad ad ad ad 00 00 00 9c 9c 9c 9c fe fe fe fe     ................
    32b4:	9c 9c 9c 9c fe fe fe fe 9c 9c 9c fe fe fe fe fe     ................
    32c4:	ad ff ad 9c 9c 9a fe fe 9c ad 9c 9a 9c 9a fe fe     ................
    32d4:	9c 9c 9c 9a 9c 9c 9a fe ad ad ad ad ad 9c 9a fe     ................
    32e4:	ad ad ad ad ad ad 00 ad ad ad ad ad ad 00 00 00     ................
    32f4:	9c 9c 9c 9c fe fe fe fe 9c 9c 9c 9c 9c fe fe fe     ................
    3304:	fe fe fe fe fe fe 9a 9c fe fe fe fe fe fe 9a 9c     ................
    3314:	fe fe fe fe fe 9a 9c 9c fe fe fe fe fe 9a 9c 9c     ................
    3324:	fe fe fe fe 9a 9c 9c fe fe fe fe fe 9a 9c 9c fe     ................
    3334:	fe fe fe fe 00 00 00 fe fe fe fe fe 00 00 00 00     ................
    3344:	9c fe 9a 9a fe fe fe fe 9c fe 9a 9a 9a fe fe fe     ................
    3354:	fe fe 9a 9a 9a fe fe fe fe fe 9a 9a 9a fe fe fe     ................
    3364:	fe fe 9a 9a 9a fe fe fe fe fe 9a 9a 9a fe fe fe     ................
    3374:	fe fe 00 00 00 fe fe fe fe fe 00 00 00 00 fe fe     ................
    3384:	fe fe fe fe fe fe fe 9a fe fe fe fe fe fe fe 9a     ................
    3394:	fe fe fe fe fe 9a 9a 9c fe fe fe fe 9a 9c 9c 9c     ................
    33a4:	fe fe fe 00 9c 9c 9c 9c fe fe fe 00 9c 9c 9c fe     ................
    33b4:	fe fe fe 00 00 fe fe fe fe fe fe 00 00 00 fe fe     ................
    33c4:	9c 9c 9c fe fe fe fe fe 9c 9c 9c 9c fe fe fe fe     ................
    33d4:	9c 9c 9c 9c fe fe fe fe 9c 9c 9c fe fe fe fe fe     ................
    33e4:	9c 9a 9a fe fe fe fe fe 9a 9a 9a fe fe fe fe fe     ................
    33f4:	00 00 00 fe fe fe fe fe 00 00 00 00 fe fe fe fe     ................
    3404:	fe fe fe fe 00 00 9a 9c fe fe fe fe 9a 9a 9a 9a     ................
    3414:	fe fe fe fe 9a 9a 9a 9a 00 00 9a 9a 9a 9a 9a fe     ................
    3424:	00 00 9a 9a 9a 9a 9a fe 00 00 9a 9a 9a 9a fe fe     ................
    3434:	00 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3444:	9c 9c 9c fe fe fe fe fe fe 9a 9c 9c fe fe fe fe     ................
    3454:	fe 9a 9c 9c 9c fe fe fe fe fe 9a 9c 9c fe fe fe     ................
    3464:	fe fe 9a 9c 9c 9c fe fe fe fe fe 9a 9c 9c fe fe     ................
    3474:	fe fe fe 00 00 00 fe fe fe fe fe 00 00 00 00 fe     ................
    3484:	fe fe fe fe fe fe fe 9a fe fe fe fe fe fe fe 9a     ................
    3494:	fe fe fe fe fe 9a 9a 9a fe fe fe fe 9a 9a 9a 9a     ................
    34a4:	fe fe fe 00 9a 9a 9a 9a fe fe fe 00 9a 9a 9a fe     ................
    34b4:	fe fe fe 00 00 fe fe fe fe fe fe 00 00 00 fe fe     ................
    34c4:	9c 9c 9c fe fe fe fe fe 9a 9c 9c 9a fe fe fe fe     ................
    34d4:	9a 9c 9c 9a fe fe fe fe 9a 9c 9c fe fe fe fe fe     ................
    34e4:	9a 9c 9c fe fe fe fe fe 9a 9c 9c fe fe fe fe fe     ................
    34f4:	00 00 00 fe fe fe fe fe 00 00 00 00 fe fe fe fe     ................
    3504:	fe fe fe fe 00 00 9a 9c fe fe fe fe 9a 9a 9a 9a     ................
    3514:	fe fe fe fe 9a 9a 9a 9a 00 00 9a 9a 9a 9a 00 00     ................
    3524:	00 00 9a 9a 9a 9a 00 00 00 00 9a 9a 9a 9a 00 00     ................
    3534:	00 fe fe fe fe fe 00 fe fe fe fe fe fe fe fe fe     ................
    3544:	9c 9c 9a 9c 9c fe fe fe fe fe 9a 9c 9c 9c fe fe     ................
    3554:	fe fe 9a 9c 9c 9c fe fe 9a 9a 9a 9c 9c fe fe fe     ................
    3564:	9c 9c 9c 9c 9c fe fe fe 9c 9c 9c 9c fe fe fe fe     ................
    3574:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3584:	fe fe fe fe 00 00 9a 9c fe fe fe fe 9a 9a 9c 9c     ................
    3594:	fe fe fe fe 9a 9c 9c 9c 00 00 9a 9a 9a 9c 9c fe     ................
    35a4:	00 00 9c 9c 9c 9c 9c fe 00 00 9c 9c 9c 9c fe fe     ................
    35b4:	00 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    35c4:	9c 9c 9a fe fe fe fe fe fe 9a 9a 9a fe fe fe fe     ................
    35d4:	fe 9a 9a 9a 9a fe fe fe fe fe 9a 9a 9a fe fe fe     ................
    35e4:	fe fe 9a 9a 9a 9a fe fe fe fe fe 9a 9a 9a fe fe     ................
    35f4:	fe fe fe 00 00 00 fe fe fe fe fe 00 00 00 00 fe     ................

00003604 <map_hazard_desert>:
    3604:	01 01 28                                            ..(

00003607 <map_hazard_city>:
    3607:	01 01 29                                            ..)

0000360a <map_hazard_jungle>:
    360a:	01 01 27                                            ..'

0000360d <map_hazard_fire>:
    360d:	01 01 26                                            ..&

00003610 <map_hazard_ice>:
    3610:	01 01 25                                            ..%

00003613 <map_enemy_drone>:
    3613:	01 01 35                                            ..5

00003616 <map_enemy_tank>:
    3616:	01 01 24                                            ..$

00003619 <map_enemy_ball>:
    3619:	01 01 14                                            ...

0000361c <map_enemy_spider_1>:
    361c:	01 01 34                                            ..4

0000361f <map_enemy_spider_0>:
    361f:	01 01 23                                            ..#

00003622 <map_enemy_shark>:
    3622:	01 01 05                                            ...

00003625 <map_enemy_shot>:
    3625:	01 01 13                                            ...

00003628 <map_ahero_jump>:
    3628:	02 03 4a 4b 4f 52 5b 5c                             ..JKOR[\

00003630 <map_ahero_step_3>:
    3630:	02 03 4a 4b 4f 50 5d 5e                             ..JKOP]^

00003638 <map_ahero_step_2>:
    3638:	02 03 48 49 4c 51 59 5a                             ..HILQYZ

00003640 <map_ahero_step_1>:
    3640:	02 03 4a 4b 4f 50 57 58                             ..JKOPWX

00003648 <map_ahero_step_0>:
    3648:	02 03 48 49 4c 4e 55 56                             ..HILNUV

00003650 <map_ahero_idle>:
    3650:	02 03 48 49 4c 4d 53 54                             ..HILMST

00003658 <map_hero_rplasma_shot>:
    3658:	01 01 36                                            ..6

0000365b <map_hero_space_bomb>:
    365b:	01 01 18                                            ...

0000365e <map_hero_space_shot>:
    365e:	01 01 17                                            ...

00003661 <map_hero_ice_shot>:
    3661:	01 01 16                                            ...

00003664 <map_hero_ball_shot>:
    3664:	01 01 15                                            ...

00003667 <map_hero_gplasma_shot>:
    3667:	01 01 04                                            ...

0000366a <map_hero_ship_large_1>:
    366a:	04 02 38 39 3a 3b 46 3d 47 3f                       ..89:;F=G?

00003674 <map_hero_ship_large_0>:
    3674:	04 02 38 39 3a 3b 3c 3d 3e 3f                       ..89:;<=>?

0000367e <map_hero_ship_1>:
    367e:	03 01 37 2b 2c                                      ..7+,

00003683 <map_hero_ship_0>:
    3683:	03 01 2a 2b 2c                                      ..*+,

00003688 <map_hero_prone>:
    3688:	03 01 43 44 45                                      ..CDE

0000368d <map_hero_jump>:
    368d:	02 03 02 03 0f 12 21 22                             ......!"

00003695 <map_hero_step_3>:
    3695:	02 03 02 03 0f 40 41 42                             .....@AB

0000369d <map_hero_step_2>:
    369d:	02 03 00 01 0c 11 1f 20                             ....... 

000036a5 <map_hero_step_1>:
    36a5:	02 03 02 03 0f 10 1d 1e                             ........

000036ad <map_hero_step_0>:
    36ad:	02 03 00 01 0c 0e 1b 1c                             ........

000036b5 <map_hero_idle>:
    36b5:	02 03 00 01 0c 0d 19 1a                             ........

000036bd <map_emerald_4>:
    36bd:	01 01 0a                                            ...

000036c0 <map_emerald_3>:
    36c0:	01 01 09                                            ...

000036c3 <map_emerald_2>:
    36c3:	01 01 08                                            ...

000036c6 <map_emerald_1>:
    36c6:	01 01 07                                            ...

000036c9 <map_emerald_0>:
    36c9:	01 01 06                                            ...

000036cc <map_explosion_2>:
    36cc:	01 01 2f                                            ../

000036cf <map_explosion_1>:
    36cf:	01 01 2e                                            ...

000036d2 <map_explosion_0>:
    36d2:	01 01 2d                                            ..-

000036d5 <map_particle>:
    36d5:	01 01 30                                            ..0

000036d8 <map_up_arrow>:
    36d8:	01 01 33                                            ..3

000036db <map_down_arrow>:
    36db:	01 01 32                                            ..2

000036de <map_right_arrow>:
    36de:	01 01 31                                            ..1

000036e1 <map_none>:
    36e1:	01 01 14                                            ...

000036e4 <tiles_data>:
	...
    3724:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3734:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    3744:	ff f8 fb f8 fb f8 f8 fd ff fb f8 f8 fb f8 f8 f8     ................
    3754:	ff f8 f8 fb f8 f8 f8 f8 ff f8 f8 f8 f8 f8 f8 f8     ................
    3764:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3774:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    3784:	fd f8 fb f8 fb f8 f8 fd f8 fb f8 f8 fb f8 f8 f8     ................
    3794:	f8 f8 f8 fb f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    37a4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    37b4:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    37c4:	fd f8 fb f8 fb f8 f8 ff f8 fb f8 f8 fb f8 f8 ff     ................
    37d4:	f8 f8 f8 fb f8 f8 f8 ff f8 f8 f8 f8 f8 f8 f8 ff     ................
    37e4:	fa f8 f8 f8 f8 f8 f8 f8 f8 f8 fb f8 f8 f8 fb f8     ................
    37f4:	f8 f8 fb f8 fb fb f8 f8 f8 f8 f8 fb f8 f8 f8 f8     ................
    3804:	f8 f8 fb f8 fb f8 f8 f8 f8 fb f8 f8 fb f8 f8 f8     ................
    3814:	f8 f8 f8 fb f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    3824:	02 02 02 02 02 02 02 02 02 02 0b 02 02 02 0b 02     ................
    3834:	02 0b 02 0b 02 0b 02 0b 02 02 0b 02 0b 02 0b 02     ................
    3844:	02 0b 02 02 02 0b 02 02 02 02 0b 02 0b 02 0b 02     ................
    3854:	02 0b 02 0b 02 0b 02 02 02 02 0b 02 02 02 0b 02     ................
    3864:	5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c     \\\\\\\\\\\\\\\\
    3874:	02 5c 02 5c 02 5c 02 5c 02 02 0b 02 0b 02 0b 02     .\.\.\.\........
    3884:	02 0b 02 02 02 0b 02 02 02 02 0b 02 0b 02 0b 02     ................
    3894:	02 0b 02 0b 02 0b 02 02 02 02 0b 02 02 02 0b 02     ................
    38a4:	18 28 18 28 18 28 18 28 28 18 28 18 28 18 28 18     .(.(.(.((.(.(.(.
    38b4:	28 18 28 18 28 18 28 18 28 18 0b 02 0b 02 28 18     (.(.(.(.(.....(.
    38c4:	28 0b 02 02 02 0b 02 18 02 02 0b 02 0b 02 0b 02     (...............
    38d4:	02 0b 02 0b 02 0b 02 02 02 02 0b 02 02 02 0b 02     ................
    38e4:	50 50 50 50 50 50 50 50 ad ad ad 50 ad ad ad ad     PPPPPPPP...P....
    38f4:	ad a4 ad 50 ad a4 ad ad ad ad ad 50 ad ad ad ad     ...P.......P....
    3904:	50 50 50 50 50 50 50 50 ad ad ad ad ad ad ad 50     PPPPPPPP.......P
    3914:	ad a4 ad ad ad a4 ad 50 ad ad ad ad ad ad ad 50     .......P.......P
    3924:	a5 a5 a5 a5 a5 a5 a5 a5 a4 a4 a4 a4 a4 a4 a4 a4     ................
    3934:	a4 a4 a4 a4 a4 a4 a4 a4 ad ad ad 50 ad ad ad ad     ...........P....
    3944:	50 50 50 50 50 50 50 50 ad ad ad ad ad ad ad 50     PPPPPPPP.......P
    3954:	ad a4 ad ad ad a4 ad 50 ad ad ad ad ad ad ad 50     .......P.......P
    3964:	65 65 65 65 65 65 65 65 5d 66 65 5d 65 66 66 65     eeeeeeee]fe]effe
    3974:	65 65 65 66 5d 65 65 5d 65 5c 65 65 65 65 65 65     eeef]ee]e\eeeeee
    3984:	65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 5c     eeeeeeeeeeeeeee\
    3994:	5c 5c 65 65 65 5c 65 65 5c 5c 5c 5c 5c 5c 5c 5c     \\eee\ee\\\\\\\\
    39a4:	5c 1c 65 65 5d 5c 5c 65 13 13 13 14 13 65 5d 65     \.ee]\\e.....e]e
    39b4:	5c 65 13 14 65 65 1c 65 13 13 5c 13 13 65 13 65     \e..ee.e..\..e.e
    39c4:	14 14 5c 13 5d 5c 13 13 1c 13 13 5c 5c 5c 5c 5c     ..\.]\.....\\\\\
    39d4:	1c 14 5c 13 13 13 13 13 13 5c 65 5c 13 13 5c 13     ..\......\e\..\.
    39e4:	02 02 14 14 14 14 14 14 14 02 02 02 02 02 02 02     ................
    39f4:	14 14 14 02 1d 14 14 02 14 14 02 1d 1d 14 14 02     ................
    3a04:	14 14 02 14 14 14 02 1d 14 14 02 02 14 14 02 1d     ................
    3a14:	14 02 02 02 02 02 02 1d 14 02 1d 14 02 14 14 1d     ................
    3a24:	14 02 02 02 02 02 02 14 02 02 1d 1d 14 14 02 02     ................
    3a34:	14 1d 1d 1d 14 02 02 14 14 14 14 14 02 02 1d 1d     ................
    3a44:	02 02 02 02 02 1d 1d 14 14 14 14 02 14 14 14 14     ................
    3a54:	1d 14 14 02 14 14 14 14 1d 14 02 02 02 02 02 14     ................
    3a64:	02 02 14 14 14 02 14 14 14 02 02 02 14 02 02 02     ................
    3a74:	14 02 14 02 14 14 02 14 02 02 14 02 02 02 02 14     ................
    3a84:	02 02 14 14 14 02 14 14 1d 02 14 14 02 02 02 02     ................
    3a94:	1d 14 02 02 02 1d 1d 14 14 14 02 14 1d 1d 1d 14     ................
    3aa4:	14 14 02 1d 1d 14 02 02 02 14 02 1d 14 14 02 02     ................
    3ab4:	02 02 02 02 14 02 02 1d 14 14 14 02 02 1d 1d 1d     ................
    3ac4:	14 14 02 02 14 14 14 14 02 02 02 02 14 14 02 02     ................
    3ad4:	14 14 14 02 02 02 02 1d 14 14 14 14 14 02 14 14     ................
    3ae4:	14 14 14 1d 1d 1d 1d 1d 02 02 02 02 02 02 02 14     ................
    3af4:	14 1d 1d 1d 1d 14 02 02 14 14 02 02 02 02 02 14     ................
    3b04:	02 02 02 1d 1d 14 02 02 14 14 14 02 02 02 1d 1d     ................
    3b14:	02 02 02 02 14 02 14 14 14 1d 1d 14 14 02 02 02     ................
    3b24:	1d 1d 1d 14 14 14 14 14 14 14 14 02 02 02 02 02     ................
    3b34:	02 02 02 02 14 14 14 14 1d 1d 1d 14 02 02 02 02     ................
    3b44:	02 02 02 02 02 1d 1d 02 14 14 14 02 02 02 14 14     ................
    3b54:	02 02 02 02 14 02 02 02 14 14 1d 1d 1d 1d 14 14     ................
    3b64:	64 64 64 64 64 64 64 80 64 64 64 64 64 64 64 80     ddddddd.ddddddd.
    3b74:	64 64 64 64 64 64 64 80 64 64 64 64 64 64 80 80     ddddddd.dddddd..
    3b84:	64 64 64 64 64 64 80 80 64 64 64 64 64 80 80 80     dddddd..ddddd...
    3b94:	64 64 64 64 80 80 80 80 64 64 80 80 80 80 80 80     dddd....dd......
    3ba4:	0f 0f 02 02 02 02 0f 0f 3f 0f 02 02 02 02 0f 3f     ........?......?
    3bb4:	3f 0f 0f 02 02 0f 0f 3f 2f 3f 3f 02 02 3f 3f 2f     ?......?/??..??/
    3bc4:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    3bd4:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    3be4:	ff ff ff ff ff ff ff a3 ff ff ff ff ff ff ff a3     ................
    3bf4:	a3 ff ff ff ff ff a3 a0 a3 ff ff ff ff ff a3 a0     ................
    3c04:	a0 a3 ff ff ff a3 a0 a0 a0 a3 ff ff ff a3 a0 a0     ................
    3c14:	a0 a0 a3 ff a3 a0 a0 a0 a0 a0 a3 ff a3 a0 a0 a0     ................
    3c24:	09 23 23 09 09 23 23 09 09 09 09 23 23 09 09 09     .##..##....##...
    3c34:	09 06 06 06 06 06 06 09 06 06 06 06 06 06 06 06     ................
    3c44:	09 06 06 06 06 06 06 09 09 09 06 06 06 06 09 09     ................
    3c54:	09 06 06 77 77 06 06 09 06 06 77 02 02 77 06 06     ...ww.....w..w..
    3c64:	27 1f 27 1f 1f 1f 27 1f 1f 1f 1f 27 1f 27 1f 1f     '.'...'....'.'..
    3c74:	27 1f 27 1f 1f 2f 27 1f 1f 27 2f 1f 27 1f 1f 1f     '.'../'..'/.'...
    3c84:	1f 1f 27 1f 2f 1f 27 1f 1f 27 1f 27 1f 1f 2f 1f     ..'./.'..'.'../.
    3c94:	1f 1f 2f 1f 1f 27 1f 27 1f 1f 1f 27 1f 1f 1f 1f     ../..'.'...'....
    3ca4:	d9 c9 d9 c9 c9 c9 d9 c9 c9 c9 c9 d9 c9 d9 c9 c9     ................
    3cb4:	d9 c9 d9 c9 c9 db d9 c9 c9 d9 db c9 d9 c9 c9 c9     ................
    3cc4:	c9 c9 d9 c9 db c9 d9 c9 c9 d9 c9 d9 c9 c9 db c9     ................
    3cd4:	c9 c9 db c9 c9 d9 c9 d9 c9 c9 c9 d9 c9 c9 c9 c9     ................
    3ce4:	2b 29 2b 29 29 29 2b 29 29 29 29 2b 29 2b 29 29     +)+)))+))))+)+))
    3cf4:	2b 29 2b 29 29 2c 2b 29 29 2b 2c 29 2b 29 29 29     +)+)),+))+,)+)))
    3d04:	29 29 2b 29 2c 29 2b 29 29 2b 29 2b 29 29 2c 29     ))+),)+))+)+)),)
    3d14:	29 29 2c 29 29 2b 29 2b 29 29 29 2b 29 29 29 29     )),))+)+)))+))))
    3d24:	13 13 13 13 13 13 13 2f 13 13 13 13 13 13 13 2f     ......./......./
    3d34:	2f 13 13 13 13 13 2f 77 2f 13 13 13 13 13 2f 77     /...../w/...../w
    3d44:	77 2f 13 13 13 2f 77 77 77 2f 13 13 13 2f 77 77     w/.../www/.../ww
    3d54:	77 77 2f 13 2f 77 77 77 77 77 2f 13 2f 77 77 77     ww/./wwwww/./www
    3d64:	77 77 77 2f 13 2f 77 77 77 77 77 2f 13 2f 77 77     www/./wwwww/./ww
    3d74:	77 77 2f 13 13 13 2f 77 77 77 2f 13 13 13 2f 77     ww/.../www/.../w
    3d84:	77 2f 13 13 13 13 13 2f 77 2f 13 13 13 13 13 2f     w/...../w/...../
    3d94:	2f 13 13 13 13 13 13 13 2f 13 13 13 13 13 13 13     /......./.......
    3da4:	a0 a0 a0 a3 ff a3 a0 a0 a0 a0 a0 a3 ff a3 a0 a0     ................
    3db4:	a0 a0 a3 ff ff ff a3 a0 a0 a0 a3 ff ff ff a3 a0     ................
    3dc4:	a0 a3 ff ff ff ff ff a3 a0 a3 ff ff ff ff ff a3     ................
    3dd4:	a3 ff ff ff ff ff ff ff a3 ff ff ff ff ff ff ff     ................
    3de4:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3df4:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    3e04:	bf bf bf 00 00 00 00 00 bf bf bf 00 00 00 00 00     ................
    3e14:	bf bf bf 00 00 00 00 00 bf bf bf 00 00 00 00 00     ................
    3e24:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3e34:	bf bf bf bf bf bf bf bf 00 00 00 00 00 00 00 00     ................
	...
    3e64:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3e74:	bf bf bf bf bf bf bf bf 00 00 00 00 00 bf bf bf     ................
    3e84:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    3e94:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    3ea4:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3eb4:	bf bf bf bf bf bf bf bf 00 00 00 00 00 00 9c 9c     ................
    3ec4:	00 00 00 9c 9c 9c 9c 9c 00 00 00 9c 9c 9c 9c 9c     ................
    3ed4:	00 9c 9c 9c 9c 9c 9c 9c 00 9c 9c 9c 9c 9c 9c 9c     ................
    3ee4:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3ef4:	bf bf bf bf bf bf bf bf 9c 9c 00 00 00 00 00 00     ................
    3f04:	9c 9c 9c 9c 9c 00 00 00 9c 9c 9c 9c 9c 00 00 00     ................
    3f14:	9c 9c 9c 9c 9c 9c 9c 00 9c 9c 9c 9c 9c 9c 9c 00     ................
	...
    3f3c:	00 00 00 e3 00 00 00 00 00 00 e3 ff e3 00 00 00     ................
    3f4c:	00 00 00 e3 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3f7c:	00 00 00 d2 00 00 00 00 00 00 d2 e3 d2 00 00 00     ................
    3f8c:	00 00 00 d2 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3fa4:	bf bf bf 00 00 00 00 00 bf bf bf 00 00 00 00 00     ................
    3fb4:	bf bf bf 00 00 00 00 00 bf bf bf 00 00 00 00 00     ................
    3fc4:	bf bf bf 00 00 00 00 00 bf bf bf 00 00 00 00 00     ................
    3fd4:	bf bf bf 00 00 00 00 00 bf bf bf 00 00 00 00 00     ................
    3fe4:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    3ff4:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    4004:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    4014:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    4024:	00 9c 9c 9c 9c 9c 9c 9c 00 9c 9c 9c 9c 9c 9c 9c     ................
    4034:	9c 9c 9c 9a 9c 9c 9c 9c 9c 9c 9c 9c 9a 9c 9c 9c     ................
    4044:	27 9c 9c 77 9c 9c 9c 9c 27 27 27 77 9c 9c 9c 9c     '..w....'''w....
    4054:	00 27 27 77 77 07 07 07 00 77 77 77 77 77 27 27     .''ww....wwwww''
    4064:	9c 9c 9c 9c 9c 9c 9c 00 9c 9c 9c 9c 9c 9c 9c 00     ................
    4074:	9c 9c 9c 9c 9a 9c 9c 9c 9c 9c 9c 9a 9c 9c 9c 9c     ................
    4084:	9c 9c 9c 9c 9c 9c 07 07 9c 9c 9c 9c 9c 07 07 07     ................
    4094:	07 07 07 07 07 07 07 00 27 27 27 07 07 07 07 00     ........'''.....
    40a4:	77 77 77 77 77 77 77 27 00 9c 77 77 77 27 27 27     wwwwwww'..www'''
    40b4:	00 00 9c 77 77 27 27 27 00 00 00 77 9c 07 07 07     ...ww'''...w....
    40c4:	00 00 00 77 9c 9c 9c 07 00 00 00 77 9c 9c 9c 9c     ...w.......w....
    40d4:	00 00 00 77 9c 9c 9c 9c 00 00 00 77 00 00 9c 9c     ...w.......w....
    40e4:	27 27 27 07 07 07 07 00 27 27 27 07 07 07 95 00     '''.....'''.....
    40f4:	27 07 07 07 07 95 00 00 07 07 07 9c 9c 00 00 00     '...............
    4104:	07 9c 9c 9c 9c 00 00 00 9c 9c 9c 9c 00 00 00 00     ................
    4114:	9c 9c 9c 9c 00 00 00 00 9c 9c 00 00 00 00 00 00     ................
    4124:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    4134:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    4144:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    4154:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
	...
    4170:	00 00 96 96 00 00 00 00 00 96 96 96 00 00 00 00     ................
    4180:	96 96 96 96 00 00 00 96 96 96 96 96 00 00 96 96     ................
    4190:	96 96 96 96 00 00 96 96 96 96 96 96 00 96 96 96     ................
    41a0:	96 96 96 96 00 96 96 96 96 96 96 00 96 96 96 96     ................
    41b0:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    41c0:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    41d0:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    41e0:	96 96 96 96 00 00 00 00 00 00 00 00 96 96 00 00     ................
    41f0:	00 00 00 00 96 96 96 00 00 00 00 00 96 96 96 96     ................
    4200:	00 00 00 00 96 96 96 96 96 00 00 00 96 96 96 96     ................
    4210:	96 96 00 00 96 96 96 96 96 96 00 00 96 96 96 96     ................
    4220:	96 96 96 00 00 96 96 96 95 96 96 96 00 96 96 96     ................
    4230:	95 96 96 96 96 96 96 96 96 95 96 96 96 96 96 96     ................
    4240:	96 95 96 96 96 96 96 96 96 96 95 96 96 96 96 96     ................
    4250:	96 bf 95 96 95 84 96 96 96 bf 96 95 8c 83 83 8c     ................
    4260:	96 bf 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    4270:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    4280:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    4290:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    42a0:	96 96 96 96 96 96 96 95 96 96 96 00 96 96 96 95     ................
    42b0:	96 96 96 00 96 96 95 96 96 96 96 96 96 96 95 96     ................
    42c0:	96 96 96 96 96 95 96 96 96 96 96 96 96 95 96 96     ................
    42d0:	96 96 95 96 95 96 96 96 96 95 95 95 96 96 96 96     ................
    42e0:	94 8c 8c 95 bf bf bf 00 00 00 00 00 bf bf bf 00     ................
    42f0:	00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf 00     ................
    4300:	00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf bf     ................
    4310:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    4320:	bf bf bf bf 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    434c:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    435c:	bf bf bf bf bf bf bf bf 00 00 00 00 00 bf bf bf     ................
    436c:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    437c:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    438c:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    439c:	bf bf bf bf bf bf bf bf 82 82 82 82 82 bf 96 96     ................
    43ac:	00 d8 d8 d8 bf ff bf 82 00 d8 d8 bf ff ff ff bf     ................
    43bc:	00 d8 bf ff ff ff ff ff bf bf ff ff ff ff ff ff     ................
    43cc:	00 00 bf ff ff ff ff ff 00 00 94 bf ff ff ff bf     ................
    43dc:	00 00 00 8c bf ff bf d8 96 96 96 96 96 96 96 96     ................
    43ec:	83 83 8c 8c 8c 8c 8c 83 d8 d8 d8 d8 d8 d8 d8 d8     ................
    43fc:	bf d8 d8 d8 d8 d8 d8 d8 ff bf bf d8 d8 d8 d8 d8     ................
    440c:	bf d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8     ................
    441c:	d8 d8 d8 d8 d8 d8 82 82 96 96 8c 83 83 8c 8c 8c     ................
    442c:	83 82 83 83 83 83 8c 00 82 82 82 83 83 83 83 00     ................
    443c:	82 82 82 83 83 83 83 00 d8 82 82 83 83 83 83 00     ................
    444c:	82 82 82 83 83 83 00 00 82 82 83 83 83 95 00 00     ................
    445c:	82 82 83 83 95 00 00 00 40 40 40 40 40 40 40 40     ........@@@@@@@@
    446c:	40 40 40 40 40 40 40 40 c0 c0 c0 c0 c0 c0 c0 c0     @@@@@@@@........
    447c:	c0 c0 c0 c0 c0 c0 c0 c0 e0 e0 e0 e0 e0 e0 e0 e0     ................
    448c:	e0 e0 e0 e0 e0 e0 e0 e0 f0 f0 f0 f0 f0 f0 f0 f0     ................
    449c:	f0 f0 f0 f0 f0 f0 f0 f0 00 00 00 96 95 ff d8 d8     ................
    44ac:	00 00 00 00 96 ff 83 82 00 00 00 00 00 ff 96 96     ................
    44bc:	00 00 00 00 00 bf 96 96 00 00 00 00 00 bf 96 96     ................
    44cc:	00 00 00 00 00 bf 96 96 00 00 00 00 00 bf 00 00     ................
    44dc:	00 00 00 00 00 77 00 00 d8 d8 d8 82 82 82 82 82     .....w..........
    44ec:	82 82 82 82 82 83 83 83 8c 8c 83 83 83 83 8c 95     ................
    44fc:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    450c:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    451c:	00 96 96 96 96 96 96 00 83 83 8c 95 96 00 00 00     ................
    452c:	83 8c 96 96 00 00 00 00 96 96 96 00 00 00 00 00     ................
    453c:	96 96 96 00 00 00 00 00 96 96 00 00 00 00 00 00     ................
    454c:	96 96 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4564:	f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    4574:	f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9     ................
    4584:	fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa     ................
    4594:	fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb     ................
    45a4:	00 00 00 00 00 77 00 00 00 00 00 00 00 77 00 00     .....w.......w..
    45b4:	00 00 00 00 00 77 00 00 00 00 00 00 00 77 00 00     .....w.......w..
    45c4:	00 00 00 00 00 77 00 00 00 00 00 00 00 77 00 00     .....w.......w..
	...
    45ec:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    45fc:	00 3f 3f 2f 3f 3f 3f 2f 00 3f 3f 3f 2f 3f 3f 2f     .??/???/.???/??/
    460c:	00 3f 3f 2f 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??/.??/..????/.
	...
    462c:	00 00 00 3f 3f 2f 00 00 00 00 3f 3f 3f 2f 00 00     ...??/....???/..
    463c:	00 00 00 3f 3f 2f 00 00 00 00 00 3f 3f 2f 00 00     ...??/.....??/..
    464c:	00 00 00 3f 3f 2f 00 00 00 3f 3f 3f 3f 3f 3f 2f     ...??/...??????/
	...
    466c:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 00 00 3f 3f 2f     ..????/..??..??/
    467c:	00 00 00 00 3f 3f 2f 00 00 00 00 3f 3f 2f 00 00     ....??/....??/..
    468c:	00 00 3f 3f 2f 00 00 00 00 3f 3f 3f 3f 3f 3f 2f     ..??/....??????/
	...
    46ac:	00 3f 3f 3f 3f 3f 3f 2f 00 00 00 00 3f 3f 2f 00     .??????/....??/.
    46bc:	00 00 00 3f 3f 2f 00 00 00 00 00 00 3f 3f 2f 00     ...??/......??/.
    46cc:	00 3f 3f 00 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??..??/..????/.
	...
    46f0:	3f 3f 2f 00 00 00 00 3f 3f 3f 2f 00 00 00 3f 3f     ??/....???/...??
    4700:	3f 3f 2f 00 00 3f 3f 00 3f 3f 2f 00 00 3f 3f 3f     ??/..??.??/..???
    4710:	3f 3f 3f 2f 00 00 00 00 3f 3f 2f 00 00 00 00 00     ???/....??/.....
	...
    472c:	00 3f 3f 3f 3f 3f 3f 2f 00 3f 3f 2f 00 00 00 00     .??????/.??/....
    473c:	00 3f 3f 3f 3f 3f 2f 00 00 00 00 00 00 3f 3f 2f     .?????/......??/
    474c:	00 3f 3f 00 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??..??/..????/.
	...
    476c:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 00 00 00     ..????/..??/....
    477c:	00 3f 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     .?????/..??/.??/
    478c:	00 3f 3f 2f 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??/.??/..????/.
	...
    47ac:	00 3f 3f 3f 3f 3f 3f 2f 00 00 00 00 00 3f 3f 2f     .??????/.....??/
    47bc:	00 00 00 00 3f 3f 2f 00 00 00 00 3f 3f 2f 00 00     ....??/....??/..
    47cc:	00 00 3f 3f 2f 00 00 00 00 00 3f 3f 2f 00 00 00     ..??/.....??/...
	...
    47ec:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    47fc:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    480c:	00 3f 3f 2f 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??/.??/..????/.
	...
    482c:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    483c:	00 00 3f 3f 3f 3f 3f 2f 00 00 00 00 00 3f 3f 2f     ..?????/.....??/
    484c:	00 00 00 00 3f 3f 2f 00 00 00 3f 3f 3f 2f 00 00     ....??/...???/..
	...
    486c:	00 00 00 ff ff e3 00 00 00 00 ff ff ff ff e3 00     ................
    487c:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    488c:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    48ac:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    48bc:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    48cc:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff e3 00     ................
	...
    48ec:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    48fc:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    490c:	00 ff ff e3 00 ff ff e3 00 00 ff ff ff ff e3 00     ................
	...
    492c:	00 ff ff ff ff e3 00 00 00 ff ff e3 ff ff e3 00     ................
    493c:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    494c:	00 ff ff e3 ff ff e3 00 00 ff ff ff ff e3 00 00     ................
	...
    496c:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 00 00 00     ................
    497c:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 00 00 00     ................
    498c:	00 ff ff e3 00 00 00 00 00 ff ff ff ff ff ff e3     ................
	...
    49ac:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 00 00 00     ................
    49bc:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 00 00 00     ................
    49cc:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
	...
    49ec:	00 00 ff ff ff ff ff e3 00 ff ff e3 00 00 00 00     ................
    49fc:	00 ff ff e3 00 00 00 00 00 ff ff e3 ff ff ff e3     ................
    4a0c:	00 ff ff e3 00 ff ff e3 00 00 ff ff ff ff ff e3     ................
	...
    4a2c:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4a3c:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4a4c:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    4a6c:	00 ff ff ff ff ff ff e3 00 00 00 ff ff e3 00 00     ................
    4a7c:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
    4a8c:	00 00 00 ff ff e3 00 00 00 ff ff ff ff ff ff e3     ................
	...
    4ab0:	ff ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    4ac0:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 ff ff 00     ................
    4ad0:	00 ff ff e3 00 00 ff ff ff ff e3 00 00 00 00 00     ................
	...
    4aec:	00 ff ff e3 00 ff ff e3 00 ff ff e3 ff ff e3 00     ................
    4afc:	00 ff ff ff ff e3 00 00 00 ff ff ff ff e3 00 00     ................
    4b0c:	00 ff ff e3 ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
	...
    4b2c:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    4b3c:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    4b4c:	00 ff ff e3 00 00 00 00 00 ff ff ff ff ff ff e3     ................
	...
    4b6c:	ff ff e3 00 00 ff ff e3 ff ff ff e3 ff ff ff e3     ................
    4b7c:	ff ff ff ff ff ff ff e3 ff ff e3 ff e3 ff ff e3     ................
    4b8c:	ff ff e3 00 00 ff ff e3 ff ff e3 00 00 ff ff e3     ................
	...
    4bac:	00 ff ff e3 00 ff ff e3 00 ff ff ff e3 ff ff e3     ................
    4bbc:	00 ff ff ff ff ff ff e3 00 ff ff ff ff ff ff e3     ................
    4bcc:	00 ff ff e3 ff ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    4bec:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    4bfc:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4c0c:	00 ff ff e3 00 ff ff e3 00 00 ff ff ff ff e3 00     ................
	...
    4c2c:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    4c3c:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff e3 00     ................
    4c4c:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
	...
    4c6c:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    4c7c:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4c8c:	00 ff ff e3 ff ff e3 00 00 00 ff ff e3 ff ff e3     ................
	...
    4cac:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    4cbc:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff e3 00     ................
    4ccc:	00 ff ff e3 ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
	...
    4cec:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 00 00 00     ................
    4cfc:	00 00 ff ff ff ff e3 00 00 00 00 00 00 ff ff e3     ................
    4d0c:	00 00 00 00 00 ff ff e3 00 00 ff ff ff ff e3 00     ................
	...
    4d2c:	00 ff ff ff ff ff ff e3 00 00 00 ff ff e3 00 00     ................
    4d3c:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
    4d4c:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
	...
    4d6c:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4d7c:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4d8c:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff ff e3     ................
	...
    4dac:	00 ff ff 00 00 ff ff e3 00 ff ff 00 00 ff ff e3     ................
    4dbc:	00 ff ff 00 00 ff ff e3 00 ff ff 00 00 ff ff e3     ................
    4dcc:	00 00 ff ff ff ff e3 00 00 00 00 ff ff e3 00 00     ................
	...
    4dec:	ff ff e3 00 00 ff ff e3 ff ff e3 00 00 ff ff e3     ................
    4dfc:	ff ff e3 ff e3 ff ff e3 ff ff ff ff ff ff ff e3     ................
    4e0c:	ff ff ff e3 ff ff ff e3 ff ff e3 00 00 ff ff e3     ................
	...
    4e2c:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4e3c:	00 00 ff ff ff ff e3 00 00 00 ff ff ff ff e3 00     ................
    4e4c:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    4e6c:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4e7c:	00 00 ff ff ff ff e3 00 00 00 00 ff ff e3 00 00     ................
    4e8c:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
	...
    4eac:	00 ff ff ff ff ff ff e3 00 00 00 00 ff ff e3 00     ................
    4ebc:	00 00 00 ff ff e3 00 00 00 00 ff ff e3 00 00 00     ................
    4ecc:	00 ff ff e3 00 00 00 00 00 ff ff ff ff ff ff e3     ................
	...
    4ee4:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    4ef4:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    4f04:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    4f14:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    4f24:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    4f34:	ab ab ab ab ab ab ab ab ab ad ad ad ad ad ad ab     ................
    4f44:	ae ae ae ae ae ae ae ae ab ae ae ae ae ae ae ab     ................
    4f54:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    4f64:	ac ac ac ac ac ac ac ac ac ac ac ac ac ac ac ac     ................
    4f74:	ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad     ................
    4f84:	ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae     ................
    4f94:	af af af af af af af af af af af af af af af af     ................
    4fa4:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    4fb4:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    4fc4:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    4fd4:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    4fe4:	a0 a0 a0 a0 a0 a0 a0 ff a0 a0 a0 a0 a0 a0 ff ff     ................
    4ff4:	a0 a0 a0 a0 a0 ff ff 02 a0 a0 a0 a0 ff ff 02 02     ................
    5004:	a0 a0 a0 ff ff 02 02 02 a0 a0 ff ff 02 02 02 02     ................
    5014:	a0 ff ff 02 02 02 02 02 ff ff 02 02 02 02 02 02     ................
    5024:	ff 02 02 02 02 02 02 02 ff 02 02 02 02 02 02 02     ................
    5034:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    5044:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    5054:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    5064:	ff ff ff ff ff ff ff ff 02 02 02 02 02 02 02 02     ................
    5074:	02 02 02 02 02 02 02 02 a0 a0 a0 a0 a0 a0 a0 a0     ................
    5084:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    5094:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    50a4:	ff ff ff ff ff ff ff ff 02 02 ff ff ff ff 02 02     ................
    50b4:	02 02 02 ff ff 02 02 02 a0 a0 a0 ff a0 a0 a0 a0     ................
    50c4:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    50d4:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    50e4:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    50f4:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    5104:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    5114:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    5124:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    5134:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    5144:	02 02 02 ff ff 02 02 02 02 02 ff ff ff ff 02 02     ................
    5154:	02 ff ff ff ff ff ff 02 ff ff ff ff ff ff ff ff     ................
    5164:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    5174:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    5184:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    5194:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    51a4:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    51b4:	06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    51c4:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    51d4:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    51e4:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    51f4:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    5204:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    5214:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    5224:	03 03 03 03 03 03 03 1f 03 03 03 03 03 03 0f 06     ................
    5234:	03 03 03 03 03 02 02 06 03 03 03 03 02 02 02 06     ................
    5244:	03 03 03 02 02 02 02 06 03 03 02 02 02 02 06 02     ................
    5254:	03 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    5264:	1f 2f 2f 2f 2f 2f 2f 1f 06 06 06 1f 1f 1f 06 02     .//////.........
    5274:	02 02 06 1f 06 1f 06 02 02 02 06 02 06 1f 06 02     ................
    5284:	02 02 06 02 06 06 02 06 02 06 06 02 02 06 02 06     ................
    5294:	02 06 02 02 02 06 02 06 06 02 02 02 02 06 02 02     ................
    52a4:	1f 03 03 03 03 03 03 03 06 0f 03 03 03 03 03 03     ................
    52b4:	06 02 02 03 03 03 03 03 06 02 02 02 03 03 03 03     ................
    52c4:	06 06 02 02 02 03 03 03 02 02 02 02 02 02 03 03     ................
    52d4:	02 02 02 02 02 02 02 03 06 02 02 02 02 02 02 02     ................
    52e4:	03 03 03 03 03 03 03 02 03 03 03 03 03 03 02 02     ................
    52f4:	03 03 03 03 03 02 02 02 03 03 03 03 02 02 02 02     ................
    5304:	03 03 03 02 02 02 02 02 03 03 02 02 02 02 02 02     ................
    5314:	03 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    5324:	02 03 03 03 03 03 03 03 02 02 03 03 03 03 03 03     ................
    5334:	02 02 02 03 03 03 03 03 02 02 02 02 03 03 03 03     ................
    5344:	02 02 02 02 02 03 03 03 02 02 02 02 02 02 03 03     ................
    5354:	02 02 02 02 02 02 02 03 02 02 02 02 02 02 02 02     ................
    5364:	09 09 09 08 08 08 18 18 08 09 09 18 08 18 08 08     ................
    5374:	09 09 18 18 08 18 18 18 08 08 18 08 08 08 08 18     ................
    5384:	18 08 08 18 08 08 08 08 08 18 18 18 18 08 18 08     ................
    5394:	08 08 08 08 08 08 18 08 18 18 18 18 18 08 18 18     ................
    53a4:	18 18 18 08 08 18 18 18 08 08 08 18 08 08 18 18     ................
    53b4:	18 08 18 18 18 08 08 08 18 08 08 18 18 08 18 18     ................
    53c4:	18 08 18 18 18 08 08 18 08 18 08 08 08 08 08 18     ................
    53d4:	08 18 18 08 18 18 08 18 18 18 18 08 08 08 08 18     ................
    53e4:	18 08 08 08 08 08 18 18 08 08 18 18 08 18 08 08     ................
    53f4:	08 18 18 18 08 18 18 18 08 08 18 08 08 08 08 18     ................
    5404:	18 08 08 18 08 08 08 08 08 18 18 18 18 08 18 08     ................
    5414:	08 08 08 08 08 08 18 08 18 18 18 18 18 08 18 18     ................
    5424:	18 18 18 08 08 09 09 09 08 08 08 18 08 09 09 09     ................
    5434:	18 08 18 18 18 08 09 09 18 08 08 18 18 08 18 18     ................
    5444:	18 08 18 18 18 08 08 18 08 18 08 08 08 08 08 18     ................
    5454:	08 18 18 08 18 18 08 18 18 18 18 08 08 08 08 18     ................
    5464:	18 08 08 08 08 08 18 18 09 08 18 18 08 18 08 08     ................
    5474:	09 18 09 18 08 18 18 18 09 09 18 08 08 08 08 18     ................
    5484:	09 09 09 18 08 08 08 08 09 09 09 09 09 18 18 08     ................
    5494:	08 09 09 09 09 09 09 18 09 09 09 09 09 09 09 09     ................
    54a4:	18 18 18 08 08 18 18 09 08 08 08 18 08 09 09 09     ................
    54b4:	18 08 18 18 18 09 09 09 18 08 08 18 09 08 09 09     ................
    54c4:	18 08 18 09 09 09 09 09 08 18 09 09 08 09 08 09     ................
    54d4:	08 09 09 08 09 09 09 09 09 09 09 09 09 09 09 09     ................
    54e4:	09 09 09 09 09 09 09 09 09 09 09 09 09 09 09 09     ................
    54f4:	09 09 09 09 09 09 09 09 09 09 09 09 09 09 09 09     ................
    5504:	09 09 09 09 09 09 09 09 09 09 09 09 09 09 09 09     ................
    5514:	09 09 09 09 09 09 09 09 09 09 09 09 09 09 09 09     ................
    5524:	14 02 14 14 02 1d 14 02 14 02 02 14 02 1d 14 02     ................
    5534:	14 1d 02 14 02 1d 02 02 1d 1d 02 1d 02 1d 1d 02     ................
    5544:	1d 02 02 1d 02 14 1d 02 1d 02 14 1d 02 02 1d 14     ................
    5554:	1d 02 14 1d 14 02 1d 14 1d 02 14 1d 14 02 1d 14     ................
    5564:	14 1d 14 02 1d 14 02 14 14 1d 14 02 1d 14 02 14     ................
    5574:	1d 1d 02 14 1d 14 02 14 1d 1d 02 14 1d 02 14 1d     ................
    5584:	02 1d 02 02 1d 02 14 1d 02 1d 14 02 1d 02 14 1d     ................
    5594:	02 1d 14 02 1d 14 02 1d 02 1d 02 14 1d 14 02 14     ................
    55a4:	1d 02 02 1d 02 02 1d 02 1d 14 02 1d 02 14 1d 02     ................
    55b4:	1d 14 02 1d 02 1d 1d 02 1d 14 02 14 02 1d 14 02     ................
    55c4:	1d 14 02 14 02 1d 1d 02 1d 14 02 14 02 02 1d 14     ................
    55d4:	14 14 02 14 02 02 1d 1d 02 02 02 14 02 14 14 1d     ................
    55e4:	02 1d 02 1d 1d 14 02 14 14 1d 02 14 1d 14 02 14     ................
    55f4:	1d 1d 02 14 1d 1d 02 14 14 1d 02 14 1d 1d 02 14     ................
    5604:	02 1d 02 02 1d 14 02 14 02 1d 02 02 1d 02 02 14     ................
    5614:	02 1d 02 14 1d 02 1d 14 02 14 02 14 1d 02 1d 14     ................
    5624:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     dddddddddddddddd
    5634:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     dddddddddddddddd
    5644:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     dddddddddddddddd
    5654:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     dddddddddddddddd
    5664:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     dddddddddddddddd
    5674:	64 64 64 64 64 64 64 2d 64 64 64 64 64 64 64 2d     ddddddd-ddddddd-
    5684:	64 64 64 64 64 64 2d 2d 64 64 64 64 64 2d 2d 2d     dddddd--ddddd---
    5694:	64 64 64 64 2d 2d 2d 2d 64 64 64 64 2d 2d 2d 2d     dddd----dddd----
    56a4:	64 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     d---------------
    56b4:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    56c4:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    56d4:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    56e4:	2d 2d 2d 64 64 64 64 64 2d 2d 2d 2d 64 64 64 64     ---ddddd----dddd
    56f4:	2d 2d 2d 2d 64 64 64 64 2d 2d 2d 2d 64 64 64 64     ----dddd----dddd
    5704:	2d 2d 2d 2d 64 64 64 64 2d 2d 2d 2d 64 64 64 64     ----dddd----dddd
    5714:	2d 2d 2d 2d 64 64 64 64 2d 2d 2d 2d 64 64 64 64     ----dddd----dddd
    5724:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     dddddddddddddddd
    5734:	80 64 64 64 64 64 64 64 80 80 64 64 64 64 64 64     .ddddddd..dddddd
    5744:	80 80 64 64 64 64 64 64 80 80 80 64 64 64 64 64     ..dddddd...ddddd
    5754:	80 80 80 80 64 64 64 64 80 80 80 80 80 80 64 64     ....dddd......dd
    5764:	64 64 64 64 2d 2d 2d 2d 64 64 64 64 2d 2d 2d 2d     dddd----dddd----
    5774:	80 64 64 64 2d 2d 2d 2d 80 80 64 64 2d 2d 2d 2d     .ddd----..dd----
    5784:	80 80 64 64 64 2d 2d 2d 80 80 80 64 64 2d 2d 2d     ..ddd---...dd---
    5794:	80 80 80 80 64 64 2d 2d 80 80 80 80 80 80 64 64     ....dd--......dd
    57a4:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    57b4:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    57c4:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    57d4:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    57e4:	2d 2d 2d 2d 64 64 64 80 2d 2d 2d 2d 64 64 64 80     ----ddd.----ddd.
    57f4:	2d 2d 2d 64 64 64 64 80 2d 2d 2d 64 64 64 80 80     ---dddd.---ddd..
    5804:	2d 2d 2d 64 64 64 80 80 2d 2d 64 64 64 80 80 80     ---ddd..--ddd...
    5814:	2d 2d 64 64 80 80 80 80 2d 64 80 80 80 80 80 80     --dd....-d......
    5824:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    5834:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    5844:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    5854:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    5864:	80 80 80 80 80 80 64 64 80 80 80 80 64 64 64 64     ......dd....dddd
    5874:	80 80 80 64 64 64 64 2e 80 80 64 64 64 64 64 2e     ...dddd...ddddd.
    5884:	80 80 64 64 64 64 2d 2e 80 64 64 64 64 2d 2e 2e     ..dddd-..dddd-..
    5894:	64 64 64 64 2d 2e 2e 2e 64 64 64 64 2d 2e 2e 2e     dddd-...dddd-...
    58a4:	64 2e 2e 2e 2e 2d 2d 2d 2e 2e 2e 2e 2e 2e 2d 2d     d....---......--
    58b4:	2e 2e 2e 2e 2e 2e 2d 2d 2e 2e 2e 2e 2e 2d 2d 2d     ......--.....---
    58c4:	2e 2e 2e 2e 2e 2d 2d 2d 2e 2e 2e 2e 2e 2d 2d 2d     .....---.....---
    58d4:	2e 2e 2e 2e 2d 2d 2d 2d 2e 2e 2e 2e 2e 2d 2d 2d     ....----.....---
    58e4:	2d 2d 2d 80 80 80 80 80 2d 2d 2d 2d 80 80 80 80     ---.....----....
    58f4:	2d 2d 2d 2d 64 80 80 80 2d 2d 2d 2d 64 64 80 80     ----d...----dd..
    5904:	2d 2d 2d 2d 64 64 64 80 2d 2d 2d 2d 64 64 64 80     ----ddd.----ddd.
    5914:	2d 2d 2d 2d 64 64 64 64 2d 2d 2d 2d 64 64 64 64     ----dddd----dddd
    5924:	64 64 64 64 2d 2e 2e 2e 64 64 64 64 2d 2e 2e 2e     dddd-...dddd-...
    5934:	80 64 64 64 2d 2e 2e 2e 80 80 64 64 2d 2e 2e 2e     .ddd-.....dd-...
    5944:	80 80 64 64 64 2e 2e 2e 80 80 80 64 64 2d 2d 2e     ..ddd......dd--.
    5954:	80 80 80 80 64 64 2d 2d 80 80 80 80 80 80 64 64     ....dd--......dd
    5964:	2e 2e 2e 2e 2e 2d 2d 2d 2e 2e 2e 2e 2e 2d 2d 2d     .....---.....---
    5974:	2e 2e 2e 2e 2e 2d 2d 2d 2e 2e 2e 2e 2d 2d 2d 2d     .....---....----
    5984:	2e 2e 2e 2e 2d 2d 2d 2d 2e 2e 2e 2e 2d 2d 2d 2d     ....----....----
    5994:	2e 2e 2e 2e 2e 2d 2d 2d 2d 2e 2e 2e 2e 2e 2d 2d     .....----.....--
    59a4:	80 80 80 80 80 80 80 ab 80 80 80 80 80 80 ab ab     ................
    59b4:	80 80 80 80 80 ab ab ab 80 80 80 80 ab ab ab ab     ................
    59c4:	80 80 80 ab ab ab ab ab 80 80 ab ab ab ab ab ab     ................
    59d4:	80 ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    59e4:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    59f4:	ab ab ab 7f 7f ab ab ab ab ab ab 7f 7f ab ab ab     ................
    5a04:	ab ab ab 7f 7f ab ab ab ab ab ab 7f 7f ab ab ab     ................
    5a14:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    5a24:	80 80 80 80 80 80 80 9b 80 80 80 80 80 80 9b 9b     ................
    5a34:	80 80 80 80 80 9b 9b 9b 80 80 80 80 9b 9b 9b 9b     ................
    5a44:	80 80 80 9b 9b 9b 9b 9b 80 80 9b 9b 9b 9b 9b 9b     ................
    5a54:	80 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    5a64:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    5a74:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    5a84:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    5a94:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    5aa4:	80 80 80 80 80 80 80 80 00 00 00 00 00 00 00 00     ................
	...
    5abc:	80 80 a4 a4 a4 a4 80 80 80 80 a4 a4 a4 a4 80 80     ................
    5acc:	80 80 a4 a4 a4 a4 80 80 80 80 a4 a4 a4 a4 80 80     ................
    5adc:	80 80 a4 a4 a4 a4 80 80 9b 9b 9b 9b 9b 9b 9b 9b     ................
    5aec:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    5afc:	9b 9b 9b 7f 9b 9b 9b 9b 9b 9b 9b 7f 9b 9b 9b 9b     ................
    5b0c:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    5b1c:	9b 9b 9b 9b 9b 9b 9b 9b fd fd fd fd fd fd fd fd     ................
    5b2c:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    5b3c:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    5b4c:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    5b5c:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    5b6c:	fd fd fd fd fd fd fd fd be be be be be be be be     ................
    5b7c:	be be be be be be be be b7 b7 b7 b7 b7 b7 b7 b7     ................
    5b8c:	b7 b7 b7 b7 b7 b7 b7 b7 77 77 77 77 77 77 77 77     ........wwwwwwww
    5b9c:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5bac:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5bbc:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5bcc:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5bdc:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5bec:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5bfc:	77 77 77 77 77 77 77 77 77 77 77 2f 2f 77 77 77     wwwwwwwwwww//www
    5c0c:	77 77 2f 2f 2f 2f 77 77 77 2f 2f 2f 2f 2f 2f 77     ww////www//////w
    5c1c:	2f 2f 2f 2f 2f 2f 2f 2f 77 77 77 77 77 77 77 2f     ////////wwwwwww/
    5c2c:	77 77 77 77 77 77 2f 2f 77 77 77 77 77 2f 2f 2f     wwwwww//wwwww///
    5c3c:	77 77 77 77 2f 2f 2f 2f 77 77 77 2f 2f 2f 2f 2f     wwww////www/////
    5c4c:	77 77 2f 2f 2f 3f 3f 3f 77 2f 2f 2f 3f 3f 3f 3f     ww///???w///????
    5c5c:	2f 2f 2f 3f 3f 3f 3f 3f 2f 2f 2f 2f 2f 2f 2f 2f     ///?????////////
    5c6c:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5c7c:	2f 2f 2f 2f 2f 2f 2f 2f 2f 3f 3f 02 02 3f 3f 2f     /////////??..??/
    5c8c:	3f 0f 0f 02 02 0f 0f 3f 3f 0f 02 02 02 02 0f 3f     ?......??......?
    5c9c:	0f 0f 02 02 02 02 0f 0f 2f 77 77 77 77 77 77 77     ......../wwwwwww
    5cac:	2f 2f 77 77 77 77 77 77 2f 2f 2f 77 77 77 77 77     //wwwwww///wwwww
    5cbc:	2f 2f 2f 2f 77 77 77 77 2f 2f 2f 2f 2f 77 77 77     ////wwww/////www
    5ccc:	3f 3f 3f 2f 2f 2f 77 77 3f 3f 3f 3f 2f 2f 2f 77     ???///ww????///w
    5cdc:	3f 3f 3f 3f 3f 2f 2f 2f 77 77 77 77 77 77 77 2f     ?????///wwwwwww/
    5cec:	77 77 77 77 77 77 2f 2f 77 77 77 77 77 2f 2f 2f     wwwwww//wwwww///
    5cfc:	77 77 77 77 2f 2f 2f 2f 77 77 77 2f 2f 2f 2f 2f     wwww////www/////
    5d0c:	77 77 2f 2f 2f 2f 2f 2f 77 2f 2f 2f 2f 2f 2f 2f     ww//////w///////
    5d1c:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5d2c:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5d3c:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5d4c:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5d5c:	2f 2f 2f 2f 2f 2f 2f 2f 2f 77 77 77 77 77 77 77     /////////wwwwwww
    5d6c:	2f 2f 77 77 77 77 77 77 2f 2f 2f 77 77 77 77 77     //wwwwww///wwwww
    5d7c:	2f 2f 2f 2f 77 77 77 77 2f 2f 2f 2f 2f 77 77 77     ////wwww/////www
    5d8c:	2f 2f 2f 2f 2f 2f 77 77 2f 2f 2f 2f 2f 2f 2f 77     //////ww///////w
    5d9c:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 3f 3f 3f 3f 3f     ///////////?????
    5dac:	2f 2f 2f 2f 3f 3f 3f 3f 2f 2f 2f 2f 2f 3f 3f 3f     ////????/////???
    5dbc:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5dcc:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5ddc:	2f 2f 2f 2f 2f 2f 2f 2f 3f 3f 3f 3f 3f 2f 2f 2f     ////////?????///
    5dec:	3f 3f 3f 3f 2f 2f 2f 2f 3f 3f 3f 2f 2f 2f 2f 2f     ????////???/////
    5dfc:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5e0c:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5e1c:	2f 2f 2f 2f 2f 2f 2f 2f 65 65 65 65 65 65 65 65     ////////eeeeeeee
    5e2c:	5d 66 65 5d 65 66 66 5d 65 65 65 66 5d 65 65 65     ]fe]eff]eeef]eee
    5e3c:	65 5c 65 65 65 65 65 65 65 65 65 65 65 65 65 65     e\eeeeeeeeeeeeee
    5e4c:	65 65 65 65 65 65 65 65 5c 5c 65 65 65 5c 65 5c     eeeeeeee\\eee\e\
    5e5c:	5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c     \\\\\\\\\\\\\\\\
    5e6c:	13 13 13 14 13 65 5d 65 5c 65 13 14 65 65 1c 65     .....e]e\e..ee.e
    5e7c:	13 13 5c 13 13 65 13 65 14 14 5c 13 5d 5c 13 13     ..\..e.e..\.]\..
    5e8c:	1c 13 13 5c 5c 5c 5c 5c 1c 14 5c 13 13 13 13 13     ...\\\\\..\.....
    5e9c:	13 5c 65 5c 13 13 5c 13                             .\e\..\.

00005ea4 <map_font>:
    5ea4:	25 01 00 3c 3d 3e 3f 40 41 42 43 44 45 46 47 48     %..<=>?@ABCDEFGH
    5eb4:	49 4a 4b 4c 4d 4e 4f 50 51 52 53 54 55 56 57 58     IJKLMNOPQRSTUVWX
    5ec4:	59 5a 5b 5c 5d 5e 5f                                YZ[\]^_

00005ecb <map_atmosphere>:
    5ecb:	1c 02 36 36 36 36 36 36 36 36 36 36 36 36 36 36     ..66666666666666
    5edb:	36 36 36 36 36 36 36 36 36 36 36 36 36 36 3a 3a     66666666666666::
    5eeb:	3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a     ::::::::::::::::
    5efb:	3a 3a 3a 3a 3a 3a 3a 3a 3a 3a                       ::::::::::

00005f05 <map_dialog>:
    5f05:	10 06 1c 1d 1d 1d 1d 1d 1d 1f 20 1d 1d 1d 1d 1d     .......... .....
    5f15:	1d 1e 23 00 00 00 00 00 00 25 26 00 00 00 00 00     ..#......%&.....
    5f25:	00 24 23 00 00 00 00 00 00 27 28 00 00 00 00 00     .$#......'(.....
    5f35:	00 24 23 00 00 00 00 00 00 00 00 00 00 00 00 00     .$#.............
    5f45:	00 24 23 00 00 00 00 00 00 00 00 00 00 00 00 00     .$#.............
    5f55:	00 24 30 31 31 31 31 31 31 31 31 31 31 31 31 31     .$01111111111111
    5f65:	31 32                                               12

00005f67 <map_canvas>:
    5f67:	0f 09 1c 1d 1d 1d 1d 1d 1d 1d 1d 1d 1d 1d 1d 1d     ................
    5f77:	1e 23 00 00 00 00 00 00 00 00 00 00 00 00 00 24     .#.............$
    5f87:	23 00 00 00 00 00 00 00 00 00 00 00 00 00 24 23     #.............$#
	...
    5fa3:	00 24 23 00 00 00 00 00 00 00 00 00 00 00 00 00     .$#.............
    5fb3:	24 23 00 00 00 00 00 00 00 00 00 00 00 00 00 24     $#.............$
    5fc3:	23 00 00 00 00 00 00 00 00 00 00 00 00 00 24 23     #.............$#
	...
    5fdf:	00 24 30 31 31 31 31 31 31 31 31 31 31 31 31 31     .$01111111111111
    5fef:	32                                                  2

00005ff0 <map_splash>:
    5ff0:	0f 05 29 29 29 00 29 29 29 00 2a 2b 2c 21 29 29     ..))).))).*+,!))
    6000:	29 00 29 00 00 29 22 00 00 2d 2e 2f 00 29 00 21     ).)..)"..-./.).!
    6010:	22 29 00 21 29 00 00 00 33 34 35 00 29 29 29 00     ").!)...345.))).
    6020:	29 00 00 29 00 21 00 37 38 39 00 00 00 29 29 29     )..).!.789...)))
    6030:	29 00 29 00 00 00 3b 00 22 00 29 29 29              ).)...;.".)))

0000603d <map_tile_none>:
    603d:	01 01 00                                            ...

00006040 <map_level_mega_tiles>:
    6040:	60 60 60 60 60 60 60 60 60 60 60 60 60 60 60 60     ````````````````
    6050:	60 60 60 60 60 60 60 60 60 60 60 60 60 60 61 60     ``````````````a`
    6060:	60 60 60 60 60 60 60 60 60 60 60 60 60 60 60 60     ````````````````
    6070:	60 60 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ``..............
    6080:	04 04 04 04 04 04 04 04 04 04 04 60 60 60 60 60     ...........`````
    6090:	60 60 60 60 60 60 60 60 60 60 62 62 62 62 62 63     ``````````bbbbbc
    60a0:	63 63 63 63 60 60 60 60 60 60 60 61 60 60 60 60     cccc```````a````
    60b0:	60 60 60 62 62 62 62 62 63 63 63 63 63 04 04 04     ```bbbbbccccc...
    60c0:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    60d0:	04 14 14 14 14 14 63 63 63 63 63 63 63 63 63 63     ......cccccccccc
    60e0:	63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63     cccccccccccccccc
    60f0:	63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63     cccccccccccccccc
    6100:	63 63 63 02 02 02 02 02 63 63 63 63 63 02 02 02     ccc.....ccccc...
    6110:	02 02 14 14 14 14 14 63 63 63 63 63 63 63 63 63     .......ccccccccc
    6120:	63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63     cccccccccccccccc
    6130:	63 63 64 63 63 63 63 65 66 67 63 63 63 63 63 63     ccdccccefgcccccc
    6140:	63 02 02 02 63 02 04 04 04 63 04 04 04 04 02 04     c...c....c......
    6150:	04 04 04 63 63 63 63 63 02 02 02 63 63 04 04 04     ...ccccc...cc...
    6160:	02 63 04 04 04 04 02 04 04 04 04 04 67 66 68 63     .c..........gfhc
    6170:	63 63 63 68 67 66 66 67 68 63 63 63 63 69 63 63     ccchgffghccccicc
    6180:	02 02 02 02 02 63 63 63 63 63 63 63 02 02 02 63     .....ccccccc...c
    6190:	02 04 04 04 02 04 04 04 04 04 04 04 04 04 63 63     ..............cc
    61a0:	63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63     cccccccccccccccc
    61b0:	63 63 1b 1b 1b 1b 1b 63 63 63 63 02 63 63 63 02     cc.....cccc.ccc.
    61c0:	04 63 63 02 04 04 63 02 04 04 04 02 04 04 04 04     .cc...c.........
    61d0:	02 02 02 02 02 04 04 04 04 04 04 04 04 04 04 04     ................
    61e0:	04 04 04 04 04 04 04 04 04 1b 1b 1b 1b 1b 04 04     ................
    61f0:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    6200:	04 04 02 63 63 63 63 04 02 63 63 63 04 04 02 63     ...cccc..ccc...c
    6210:	63 04 04 04 02 63 04 04 04 04 02 6a 6a 6a 6a 6a     c....c.....jjjjj
    6220:	6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a     jjjjjjjjjjjjjjjj
    6230:	6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a     jjjjjjjjjjjjjjjj
    6240:	6a 6a 6a 6b 6b 6b 6b 6b 6c 6c 6c 6c 6c 6c 6c 6c     jjjkkkkkllllllll
    6250:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    6260:	6c 6c 6c 6c 6c 6c 6c 6d 6e 6f 6c 70 68 68 68 71     lllllllmnolphhhq
    6270:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    6280:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    6290:	6c 6c 6c 06 06 06 06 06 6c 6c 6c 6c 6c 6c 6c 6c     lll.....llllllll
    62a0:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 05 6c 6c 6c     llllllllllll.lll
    62b0:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    62c0:	6c 6c 6c 6c 6c 6c 6c 6c 05 6c 6c 6c 6c 6c 05 6c     llllllll.lllll.l
    62d0:	6c 6c 05 05 6c 6c 05 05 05 6c 05 05 05 05 05 05     ll..ll...l......
    62e0:	05 05 05 05 16 16 16 16 05 05 16 16 16 05 05 05     ................
    62f0:	05 05 05 05 05 05 05 05 05 05 05 05 16 16 16 05     ................
    6300:	05 16 16 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    6310:	05 05 05 05 05 6c 6c 6c 6c 6c 05 6c 6c 6c 6c 05     .....lllll.llll.
    6320:	05 6c 6c 6c 05 05 05 6c 6c 05 05 05 05 6c 6c 6c     .lll...ll....lll
    6330:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 06 06 6c     lllllllllllll..l
    6340:	6c 6c 05 05 16 16 16 6c 6c 6c 6c 6c 6c 6c 6c 6c     ll.....lllllllll
    6350:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 16 16 16 16 16     lllllllllll.....
    6360:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 06     lllllllllllllll.
    6370:	06 6c 6c 6c 05 05 06 06 06 6c 6c 6c 6c 06 6c 6c     .lll.....llll.ll
    6380:	6c 06 05 6c 6c 06 05 05 6c 06 05 05 05 06 05 05     l..ll...l.......
    6390:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    63a0:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 06     ................
    63b0:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    63c0:	05 05 05 05 6c 6c 6c 6c 6c 06 6c 6c 6c 6c 05 06     ....lllll.llll..
    63d0:	6c 6c 6c 05 05 06 6c 6c 05 05 05 16 16 6c 6c 6c     lll...ll.....lll
    63e0:	6c 6c 06 6c 6c 6c 6c 05 06 6c 6c 6c 05 05 06 6c     ll.llll..lll...l
    63f0:	6c 05 05 05 05 05 6c 6c 6c 6c 06 6c 6c 6c 06 05     l.....llll.lll..
    6400:	6c 6c 06 05 05 6c 06 05 05 05 05 05 05 05 05 72     ll...l.........r
    6410:	73 74 74 73 74 73 74 74 73 74 73 74 74 73 74 73     sttststtststtsts
    6420:	74 74 73 74 73 74 74 73 74 73 74 74 73 74 73 74     ttststtststtstst
    6430:	74 73 74 73 74 74 73 74 73 74 74 73 74 73 74 74     tststtststtststt
    6440:	73 74 73 74 74 75 74 73 74 74 73 74 73 74 74 73     ststtutsttststts
    6450:	74 73 74 74 73 74 73 74 74 73 76 73 74 74 73 78     tsttststtsvsttsx
    6460:	78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78     xxxxxxxxxxxxxxxx
    6470:	78 78 78 74 73 74 74 73 79 7a 79 79 7a 7b 7c 7b     xxxtsttsyzyyz{|{
    6480:	7b 7c 79 7a 79 79 7a 7b 7c 7b 7b 7c 74 73 74 74     {|yzyyz{|{{|tstt
    6490:	77 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78     wxxxxxxxxxxxxxxx
    64a0:	78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78     xxxxxxxxxxxxxxxx
    64b0:	78 78 78 78 78 78 78 78 78 78 78 78 78 78 79 7a     xxxxxxxxxxxxxxyz
    64c0:	79 79 7a 7b 7c 7b 7b 7c 79 7a 79 79 7a 7b 7c 7b     yyz{|{{|yzyyz{|{
    64d0:	7b 7c 79 7a 79 79 7a 78 78 78 78 78 78 78 78 78     {|yzyyzxxxxxxxxx
    64e0:	78 78 78 78 78 78 78 78 78 78 78 10 11 11 10 11     xxxxxxxxxxx.....
    64f0:	7b 7c 7b 7b 7c 79 7a 79 79 7a 7b 7c 7b 7b 7c 79     {|{{|yzyyz{|{{|y
    6500:	7a 79 79 7a 7b 7c 7b 7b 7c 78 78 78 78 78 78 78     zyyz{|{{|xxxxxxx
    6510:	78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 07     xxxxxxxxxxxxxxx.
    6520:	07 07 78 78 78 78 78 78 78 78 78 78 78 78 78 78     ..xxxxxxxxxxxxxx
    6530:	78 78 78 78 78 78 07 07 07 78 78 78 78 78 78 78     xxxxxx...xxxxxxx
    6540:	78 78 78 78 78 78 78 78 78 78 78 78 07 07 07 78     xxxxxxxxxxxx...x
    6550:	78 05 05 05 78 78 78 78 78 78 78 78 78 78 78 78     x...xxxxxxxxxxxx
    6560:	78 78 78 07 07 07 78 78 05 05 05 78 78 78 78 15     xxx...xx...xxxx.
    6570:	78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78     xxxxxxxxxxxxxxxx
    6580:	78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78     xxxxxxxxxxxxxxxx
    6590:	78 78 78 78 78 78 78 78 78 78 07 07 07 07 07 79     xxxxxxxxxx.....y
    65a0:	7a 79 79 7a 7b 7c 7b 7b 7c 79 7a 79 79 7a 7b 7c     zyyz{|{{|yzyyz{|
    65b0:	7b 7b 7c 07 07 07 07 07 78 78 05 05 05 78 07 05     {{|.....xx...x..
    65c0:	05 05 78 05 05 05 05 07 05 05 05 05 05 05 05 05     ..x.............
    65d0:	05 05 05 05 78 78 05 05 05 07 78 05 05 05 05 78     ....xx....x....x
    65e0:	05 05 05 05 07 05 05 05 05 05 78 07 05 05 05 78     ..........x....x
    65f0:	05 05 05 05 07 05 05 05 05 05 05 05 05 05 05 05     ................
    6600:	05 05 05 05 05 05 07 78 05 05 05 05 78 05 05 05     .......x....x...
    6610:	05 07 05 05 05 05 05 05 05 05 05 05 78 78 78 78     ............xxxx
    6620:	78 78 78 78 78 78 78 78 78 78 78 07 78 78 78 78     xxxxxxxxxxx.xxxx
    6630:	05 17 17 17 17 78 78 78 78 78 78 78 78 78 78 78     .....xxxxxxxxxxx
    6640:	78 78 78 78 78 78 78 78 07 17 17 17 17 05 7d 7d     xxxxxxxx......}}
    6650:	7d 7d 7d 7d 7d 7d 7d 7d 7d 12 81 7d 12 85 85 85     }}}}}}}}}..}....
    6660:	85 85 85 85 85 85 85 7d 7d 7d 7d 7d 7d 7d 7d 7e     .......}}}}}}}}~
    6670:	7f 81 7d 12 82 83 85 85 85 86 87 85 85 85 89 8a     ..}.............
    6680:	7d 7d 7d 7d 7d 80 7d 7d 7d 7d 84 81 7d 12 81 88     }}}}}.}}}}..}...
    6690:	85 85 85 85 84 85 85 85 85 7d 7d 7d 7d 7d 7d 7d     .........}}}}}}}
    66a0:	7d 7d 7d 81 7d 12 81 7d 85 85 85 85 85 85 85 85     }}}.}..}........
    66b0:	85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85     ................
    66c0:	85 85 85 85 85 85 85 85 85 85 85 85 85 85 86 87     ................
    66d0:	85 85 85 89 8a 85 85 85 86 87 85 85 85 89 8a 85     ................
    66e0:	85 85 86 87 88 85 85 85 85 84 85 85 85 85 88 85     ................
    66f0:	85 85 85 84 85 85 85 85 88 85 85 85 85 85 85 85     ................
    6700:	85 85 85 85 85 85 85 85 85 85 85 8b 85 85 85 8b     ................
    6710:	60 85 85 8b 60 60 85 85 85 89 8a 85 85 85 86 87     `...``..........
    6720:	85 85 85 89 8a 85 85 85 86 87 85 85 85 89 8a 84     ................
    6730:	85 85 85 85 88 85 85 85 85 84 85 85 85 85 88 85     ................
    6740:	85 85 85 84 85 85 85 85 85 85 85 89 8a 85 85 85     ................
    6750:	86 87 85 85 85 89 8a 85 85 85 86 87 85 09 09 09     ................
    6760:	09 84 85 85 85 85 88 85 85 85 85 84 85 85 85 85     ................
    6770:	88 85 85 85 85 09 85 85 85 85 85 85 8c 8c 8c 85     ................
    6780:	85 8c 8c 8c 85 85 8c 8c 8c 85 85 8c 8c 8c 85 85     ................
    6790:	8c 8c 8c 85 85 85 86 87 85 8d 85 89 8a 8d 8e 85     ................
    67a0:	85 8f 90 90 90 90 90 90 90 90 90 90 88 85 85 85     ................
    67b0:	85 84 85 85 85 85 85 85 85 85 85 85 85 85 85 85     ................
    67c0:	85 85 85 85 85 85 8c 8c 8c 8c 85 8c 8c 8c 8c 85     ................
    67d0:	8c 8c 8c 8c 85 8c 8c 8c 8c 85 8c 8c 8c 8c 85 85     ................
    67e0:	85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 90     ................
    67f0:	90 90 85 85 90 90 90 85 85 8c 8c 8c 85 85 8c 8c     ................
    6800:	8c 85 85 8c 8c 8c 85 85 8c 8c 8c 85 09 09 09 09     ................
    6810:	85 85 85 86 87 85 8d 85 89 8a 8d 8e 85 85 8f 90     ................
    6820:	90 90 90 90 09 90 90 90 90 88 85 85 85 85 84 85     ................
    6830:	85 85 85 85 85 85 85 85 85 85 85 85 85 85 09 09     ................
    6840:	09 09 85 8c 8c 8c 8c 85 8c 8c 8c 8c 85 8c 8c 8c     ................
    6850:	8c 85 8c 8c 8c 8c 09 8c 8c 8c 8c 88 85 85 85 09     ................
    6860:	84 85 85 09 08 85 85 09 08 08 85 09 08 08 08 09     ................
    6870:	08 08 08 08 85 85 85 85 85 18 18 18 18 18 08 08     ................
    6880:	08 08 08 08 08 08 08 08 08 08 08 08 08 09 09 85     ................
    6890:	85 85 08 08 18 18 18 08 08 08 08 08 08 08 08 08     ................
    68a0:	08 08 08 08 08 08 85 85 09 8c 8c 18 18 08 09 8c     ................
    68b0:	08 08 08 08 09 08 08 08 08 08 08 08 08 08 08 85     ................
    68c0:	85 85 86 87 85 8d 85 89 8a 8d 8e 85 85 8f 09 90     ................
    68d0:	90 90 90 08 09 90 90 90 85 85 8c 8c 8c 85 85 8c     ................
    68e0:	8c 8c 85 85 8c 8c 8c 85 85 60 60 60 09 09 09 09     .........```....
    68f0:	09 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90     ................
    6900:	90 90 90 90 90 09 09 09 09 09 85 85 85 85 85 85     ................
    6910:	8c 8c 85 85 85 8c 8c 90 85 85 60 60 90 85 09 09     ..........``....
    6920:	09 09 09 85 8c 8c 8c 8c 85 8c 8c 8c 8c 85 8c 8c     ................
    6930:	8c 8c 85 60 60 60 60 09 09 09 09 09 85 85 90 90     ...````.........
    6940:	90 85 85 90 90 90 85 85 90 90 90 85 85 90 90 90     ................
    6950:	09 09 09 09 09 85 85 90 90 90 85 85 90 90 90 85     ................
    6960:	85 90 90 90 85 09 90 90 90 09 08 18 18 18 85 85     ................
    6970:	8c 8c 8c 85 85 8c 8c 8c 85 85 8c 8c 8c 85 85 09     ................
    6980:	60 60 18 18 08 09 09 90 90 90 90 90 90 90 90 90     ``..............
    6990:	90 90 90 90 90 90 90 90 90 09 90 09 09 09 08 18     ................
    69a0:	85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85     ................
    69b0:	85 85 85 09 18 18 18 18 08 90 90 90 90 09 90 90     ................
    69c0:	90 09 08 90 90 09 08 08 90 09 08 08 08 09 08 08     ................
    69d0:	08 08 08 08 08 08 08 08 08 08 08 08 08 08 08 08     ................
    69e0:	08 08 08 08 08 08 08 08 08 08 08 08 08 09 90 90     ................
    69f0:	08 08 08 09 90 08 08 08 08 09 08 08 08 08 08 08     ................
    6a00:	08 08 08 08 85 85 85 85 85 85 8c 8c 85 85 85 8c     ................
    6a10:	8c 90 85 09 60 60 90 85 08 09 09 09 09 85 85 85     ....``..........
    6a20:	85 85 85 85 85 85 09 85 85 85 09 08 85 85 09 08     ................
    6a30:	08 09 09 08 08 08 85 8c 8c 8c 8c 85 8c 8c 8c 8c     ................
    6a40:	18 18 18 18 18 08 08 08 08 08 08 08 08 08 08 85     ................
    6a50:	85 90 90 90 09 09 90 90 90 08 08 18 18 18 08 08     ................
    6a60:	08 08 08 08 08 08 08 08 85 85 8c 8c 8c 85 85 09     ................
    6a70:	8c 8c 18 18 08 09 8c 08 08 08 08 09 08 08 08 08     ................
    6a80:	08 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91     ................
    6a90:	91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91     ................
    6aa0:	91 91 91 91 91 91 91 91 91 92 92 92 92 92 93 93     ................
    6ab0:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    6ac0:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    6ad0:	93 93 93 94 93 93 93 95 96 97 93 98 9b 13 9c 9a     ................
    6ae0:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    6af0:	93 93 93 93 93 93 93 93 93 93 93 94 93 93 93 93     ................
    6b00:	93 93 93 93 93 94 93 93 93 98 99 9a 93 98 99 99     ................
    6b10:	99 9a 93 93 93 93 93 93 98 99 9a 93 98 99 99 99     ................
    6b20:	9a 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    6b30:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    6b40:	93 93 93 93 0a 0a 0a 0a 0a 93 95 96 97 93 98 9b     ................
    6b50:	13 9c 9a 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    6b60:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    6b70:	93 93 93 93 93 93 93 93 93 93 0a 93 98 99 9a 93     ................
    6b80:	98 99 99 99 9a 93 93 93 93 93 93 93 93 93 93 9d     ................
    6b90:	0a 93 93 93 93 95 96 97 93 98 9b 13 9c 9a 93 93     ................
    6ba0:	93 93 93 0a 0a 0a 9d 0a 19 19 19 19 19 93 93 93     ................
    6bb0:	93 93 93 93 93 93 93 0a 0a 0a 0a 0a 93 93 93 93     ................
    6bc0:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    6bd0:	93 93 93 93 93 93 93 93 93 93 0a 0a 0a 9d 0a 93     ................
    6be0:	93 93 0a 0b 93 93 0a 0b 0b 93 0a 0b 0b 0b 0a 0b     ................
    6bf0:	0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b     ................
    6c00:	0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b     ................
    6c10:	0b 0b 0b 0b 0b 9e 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b     ................
    6c20:	0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0a 93 93 0b     ................
    6c30:	0b 0b 0a 93 0b 0b 0b 0b 0a 0b 0b 0b 0b 0b 0b 0b     ................
    6c40:	0b 0b 0b 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    6c50:	93 93 0a 93 93 93 93 0b 0a 0a 0a 0a 93 93 93 93     ................
    6c60:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 0a     ................
    6c70:	0a 0a 0a 0a 0b 93 93 93 93 93 93 93 93 93 93 93     ................
    6c80:	93 93 93 93 93 93 93 93 93 1a 1a 1a 1a 1a 93 93     ................
    6c90:	93 93 93 93 93 93 93 93 93 93 93 93 93 0a 0a 93     ................
    6ca0:	93 93 0b 0b 1a 1a 1a 93 93 93 93 93 93 93 93 93     ................
    6cb0:	93 93 93 93 93 93 93 93 0a 0a 93 1a 1a 0b 0b 1a     ................
    6cc0:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    6cd0:	93 93 93 0a 1a 1a 1a 1a 0b 93 93 93 93 93 93 93     ................
    6ce0:	93 93 93 93 93 93 93 93 0a 93 93 93 93 0b 1a 1a     ................
    6cf0:	1a 1a 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    6d00:	93 93 0a 93 93 93 1a 0b 0a 0a 0a 19 19 19 19 19     ................
    6d10:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 0a     ................
    6d20:	0a 0a 0a 0a 00 21 00 00 00 00 00 00 00 00 00 00     .....!..........
    6d30:	00 00 00 00 21 00 00 00 00 00 00 00 00 00 00 00     ....!...........
    6d40:	00 00 00 00 00 00 22 00 21 00 00 00 00 00 00 00     ......".!.......
    6d50:	00 00 00 00 00 21 00 00 00 00 00 00 00 22 00 00     .....!......."..
    6d60:	00 21 00 00 00 00 00 00 00 00 00 00 00 22 00 22     .!..........."."
	...
    6d78:	00 00 21 00 00 00 00 00 00 00 00 00 00 00 00 00     ..!.............

00006d88 <map_level_space_final>:
    6d88:	33 05 84 85 84 85 84 85 84 85 84 85 84 85 84 85     3...............
    6d98:	84 85 84 85 84 85 84 85 84 85 84 85 84 85 84 85     ................
    6da8:	84 85 84 85 84 85 84 85 84 85 84 85 84 85 84 85     ................
    6db8:	84 85 84 85 84 86 87 86 87 86 87 86 87 86 87 86     ................
    6dc8:	87 86 87 86 87 86 87 86 87 86 87 86 87 86 87 86     ................
    6dd8:	87 86 87 86 87 86 87 86 87 86 87 86 87 86 87 86     ................
    6de8:	87 86 87 86 87 86 87 86 84 85 84 85 84 85 84 85     ................
    6df8:	84 85 84 85 84 85 84 85 84 85 84 85 84 85 84 85     ................
    6e08:	84 85 84 85 84 85 84 85 84 85 84 85 84 85 84 85     ................
    6e18:	84 85 84 85 84 85 84 85 84 85 84 86 87 86 87 86     ................
    6e28:	87 86 87 86 87 86 87 86 87 86 87 86 87 86 87 86     ................
    6e38:	87 86 87 86 87 86 87 86 87 86 87 86 87 86 87 86     ................
    6e48:	87 86 87 86 87 86 87 86 87 86 87 86 87 86 84 85     ................
    6e58:	84 85 84 85 84 85 84 85 84 85 84 85 84 85 84 85     ................
    6e68:	84 85 84 85 84 85 84 85 84 85 84 85 84 85 84 85     ................
    6e78:	84 85 84 85 84 85 84 85 84 85 84 85 84 85 84 85     ................
    6e88:	84                                                  .

00006e89 <map_level_space>:
    6e89:	33 05 84 85 84 85 84 85 84 85 84 85 84 85 84 85     3...............
    6e99:	84 85 84 85 84 85 84 85 84 85 84 85 84 85 84 85     ................
    6ea9:	84 85 84 85 84 85 84 85 84 85 84 85 84 85 84 85     ................
    6eb9:	84 85 84 85 84 86 87 86 87 86 87 86 87 86 87 86     ................
    6ec9:	87 86 87 86 87 86 87 86 87 86 87 86 87 86 87 86     ................
    6ed9:	87 86 87 86 87 86 87 86 87 86 87 86 87 86 87 86     ................
    6ee9:	87 86 87 86 87 86 87 86 84 85 84 85 84 85 84 85     ................
    6ef9:	84 85 84 85 84 85 84 85 84 85 84 85 84 85 84 85     ................
    6f09:	84 85 84 85 84 85 84 85 84 85 84 85 84 85 84 85     ................
    6f19:	84 85 84 85 84 85 84 85 84 85 84 86 87 86 87 86     ................
    6f29:	87 86 87 86 87 86 87 86 87 86 87 86 87 86 87 86     ................
    6f39:	87 86 87 86 87 86 87 86 87 86 87 86 87 86 87 86     ................
    6f49:	87 86 87 86 87 86 87 86 87 86 87 86 87 86 84 85     ................
    6f59:	84 85 84 85 84 85 84 85 84 85 84 85 84 85 84 85     ................
    6f69:	84 85 84 85 84 85 84 85 84 85 84 85 84 85 84 85     ................
    6f79:	84 85 84 85 84 85 84 85 84 85 84 85 84 85 84 85     ................
    6f89:	84                                                  .

00006f8a <map_level_desert>:
    6f8a:	33 05 69 69 69 69 69 69 69 69 69 69 69 69 69 69     3.iiiiiiiiiiiiii
    6f9a:	69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69     iiiiiiiiiiiiiiii
    6faa:	69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69     iiiiiiiiiiiiiiii
    6fba:	69 69 69 69 69 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a     iiiiijjjjjjjjjjj
    6fca:	6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a     jjjjjjjjjjjjjjjj
    6fda:	6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a     jjjjjjjjjjjjjjjj
    6fea:	6a 6a 6a 6a 6a 6a 6a 6a 6b 6c 6b 6d 6b 6d 6b 6e     jjjjjjjjklkmkmkn
    6ffa:	6b 6c 6b 6d 6b 6d 6b 6e 6b 6c 6b 6d 6b 6d 6b 6e     klkmkmknklkmkmkn
    700a:	6b 6c 6b 6d 6b 6d 6b 6e 6b 6c 6b 6d 6b 6d 6b 6e     klkmkmknklkmkmkn
    701a:	6b 6c 6b 6d 6b 6d 6b 6e 6b 6e 6b 6b 6b 6b 6f 70     klkmkmknknkkkkop
    702a:	71 70 6b 72 70 70 73 6b 74 6b 6b 6b 6b 6b 6f 6b     qpkrppsktkkkkkok
    703a:	71 6b 6b 70 6b 75 6f 76 71 6b 6b 72 70 70 73 6b     qkkpkuovqkkrppsk
    704a:	71 6b 6b 6b 6b 6b 6f 6b 6f 6b 6b 6b 6b 6b 70 70     qkkkkkokokkkkkpp
    705a:	70 70 70 70 70 70 77 78 79 7a 7b 70 70 70 7c 7d     ppppppwxyz{ppp|}
    706a:	7e 7f 80 81 82 70 70 70 70 70 83 70 70 70 77 78     ~....ppppp.pppwx
    707a:	79 7a 7b 70 70 70 70 81 82 70 70 70 70 70 70 70     yz{pppp..ppppppp
    708a:	70                                                  p

0000708b <map_level_city>:
    708b:	33 05 3e 3f 40 3e 41 3e 3f 40 3e 41 3e 3f 40 3e     3.>?@>A>?@>A>?@>
    709b:	41 3e 3f 40 3e 41 3e 3f 40 3e 41 3e 3f 40 3e 41     A>?@>A>?@>A>?@>A
    70ab:	3e 3f 40 3e 41 3e 3f 40 3e 41 3e 3f 40 3e 41 3e     >?@>A>?@>A>?@>A>
    70bb:	3f 40 3e 41 3e 42 43 44 42 42 42 43 44 42 42 42     ?@>A>BCDBBBCDBBB
    70cb:	43 44 42 42 42 43 44 42 42 42 43 44 42 42 42 43     CDBBBCDBBBCDBBBC
    70db:	44 42 42 42 43 44 42 42 42 43 44 42 42 42 43 44     DBBBCDBBBCDBBBCD
    70eb:	42 42 42 43 44 42 42 42 45 46 47 42 42 45 48 49     BBBCDBBBEFGBBEHI
    70fb:	42 42 45 46 47 42 42 45 48 49 42 42 45 46 47 42     BBEFGBBEHIBBEFGB
    710b:	42 45 46 47 42 42 45 46 47 42 42 45 46 47 42 42     BEFGBBEFGBBEFGBB
    711b:	45 48 49 42 42 45 46 47 42 42 45 4a 4b 4c 4d 4e     EHIBBEFGBBEJKLMN
    712b:	4f 50 51 52 4e 4a 4b 4c 4d 4e 4f 50 51 52 4e 4a     OPQRNJKLMNOPQRNJ
    713b:	4b 53 54 55 56 57 4c 4d 4e 4a 4b 4c 4d 4e 4a 4b     KSTUVWLMNJKLMNJK
    714b:	4c 4d 4e 4f 50 4c 4d 4e 4a 4b 4c 4d 4e 4a 58 59     LMNOPLMNJKLMNJXY
    715b:	5a 5b 5c 58 59 5a 5b 5d 5e 5f 60 5b 5c 58 59 5a     Z[\XYZ[]^_`[\XYZ
    716b:	5b 5c 58 61 62 62 62 62 63 64 5b 5c 58 59 65 66     [\Xabbbbcd[\XYef
    717b:	67 68 59 5a 5b 5c 58 59 5a 5b 5c 58 59 5a 5b 5c     ghYZ[\XYZ[\XYZ[\
    718b:	58                                                  X

0000718c <map_level_forest>:
    718c:	33 05 27 28 29 27 28 29 27 28 29 27 28 29 27 28     3.'()'()'()'()'(
    719c:	29 27 28 29 27 28 29 27 28 29 27 28 29 27 28 29     )'()'()'()'()'()
    71ac:	27 28 29 27 28 29 27 28 29 27 28 29 27 28 29 27     '()'()'()'()'()'
    71bc:	28 29 27 28 29 2a 2b 2c 2a 2b 2c 2a 2b 2c 2a 2b     ()'()*+,*+,*+,*+
    71cc:	2c 2a 2b 2c 2a 2b 2c 2a 2b 2c 2a 2b 2c 2a 2b 2c     ,*+,*+,*+,*+,*+,
    71dc:	2a 2b 2c 2a 2b 2c 2a 2b 2c 2a 2b 2c 2a 2b 2c 2a     *+,*+,*+,*+,*+,*
    71ec:	2b 2c 2a 2b 2c 2a 2b 2c 2d 2e 2d 2d 2e 2d 2d 2e     +,*+,*+,-.--.--.
    71fc:	2f 2d 2e 2d 2f 2e 2d 2d 2e 2d 2d 2e 2d 2d 2e 2d     /-.-/.--.--.--.-
    720c:	2d 2e 2d 2d 2e 2d 2d 2e 2d 2d 2e 2f 2d 2e 2f 2d     -.--.--.--./-./-
    721c:	2e 2d 2d 2e 2f 2d 2e 2d 2d 2e 2d 2d 30 2d 2d 30     .--./-.--.--0--0
    722c:	2d 2f 30 2d 2f 30 2f 2d 30 2d 2d 30 31 32 30 31     -/0-/0/-0--01201
    723c:	32 30 33 34 30 2d 2d 30 2d 2d 30 2f 2d 30 35 2d     20340--0--0/-05-
    724c:	30 35 2d 30 2d 2d 30 35 2d 30 2d 2d 30 2d 36 37     05-0--05-0--0-67
    725c:	36 36 37 36 36 37 36 36 37 36 36 37 36 36 37 38     6676676676676678
    726c:	39 37 38 39 37 3a 3b 37 3c 3d 37 3c 3d 37 36 36     97897:;7<=7<=766
    727c:	37 36 36 37 36 36 37 3c 3d 37 36 36 37 36 36 37     7667667<=7667667
    728c:	36                                                  6

0000728d <map_level_fire>:
    728d:	33 05 13 13 13 13 13 13 13 13 13 13 13 13 13 13     3...............
    729d:	13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13     ................
    72ad:	13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13     ................
    72bd:	13 13 13 13 13 14 14 14 14 14 14 14 14 14 14 14     ................
    72cd:	14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14     ................
    72dd:	14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14     ................
    72ed:	14 14 14 14 14 14 14 14 15 16 15 15 15 15 16 15     ................
    72fd:	15 15 15 16 15 15 15 15 15 17 15 16 15 15 15 15     ................
    730d:	15 15 15 15 18 19 16 15 15 15 15 16 15 15 15 15     ................
    731d:	15 15 15 15 15 15 15 16 15 15 15 15 15 15 15 15     ................
    732d:	15 15 15 15 15 15 15 17 15 15 17 15 15 15 17 15     ................
    733d:	15 15 15 15 15 15 1a 1b 1c 1d 15 15 15 15 15 15     ................
    734d:	15 18 19 15 15 18 19 15 15 15 15 15 15 15 17 17     ................
    735d:	17 1e 1f 1e 1f 1e 1f 1e 1f 20 17 17 17 17 17 17     ......... ......
    736d:	17 17 17 17 1e 1f 1e 1f 21 22 22 22 23 24 1f 1e     ........!"""#$..
    737d:	1f 20 17 21 1b 1c 25 26 1b 1c 25 17 17 17 17 17     . .!..%&..%.....
    738d:	17                                                  .

0000738e <map_level_ice>:
    738e:	33 05 00 01 00 00 00 01 00 00 00 01 00 00 01 00     3...............
    739e:	00 01 00 00 00 00 01 00 00 00 02 02 02 02 02 02     ................
    73ae:	02 02 00 00 00 00 01 00 00 00 01 00 00 00 00 00     ................
    73be:	00 01 00 00 00 03 03 04 03 03 03 03 04 03 03 03     ................
    73ce:	04 03 04 03 03 03 04 03 03 03 03 04 03 05 05 05     ................
    73de:	05 05 05 05 05 03 03 03 03 03 03 04 03 03 03 03     ................
    73ee:	04 03 03 03 03 03 04 03 06 06 06 06 06 06 06 06     ................
    73fe:	06 07 07 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    740e:	06 06 06 06 06 06 06 06 06 06 06 06 06 08 08 06     ................
    741e:	06 06 06 06 06 06 06 06 06 06 06 06 06 09 06 06     ................
    742e:	06 06 06 0a 02 02 0b 06 06 06 06 09 06 06 06 06     ................
    743e:	06 06 06 06 06 06 06 06 06 06 06 06 06 08 08 06     ................
    744e:	06 06 08 06 09 06 06 06 06 06 06 06 06 06 07 07     ................
    745e:	0c 07 07 07 07 0d 02 02 02 02 0b 07 07 07 0c 0e     ................
    746e:	07 0e 07 0e 07 0f 10 10 10 11 10 11 10 11 12 07     ................
    747e:	07 07 07 07 07 07 07 0c 07 07 07 07 07 07 07 07     ................
    748e:	07 00                                               ..

00007490 <__ctors_end>:
    7490:	11 24       	eor	r1, r1
    7492:	1f be       	out	0x3f, r1	; 63
    7494:	cf ef       	ldi	r28, 0xFF	; 255
    7496:	d0 e1       	ldi	r29, 0x10	; 16
    7498:	de bf       	out	0x3e, r29	; 62
    749a:	cd bf       	out	0x3d, r28	; 61

0000749c <__do_copy_data>:
    749c:	15 e0       	ldi	r17, 0x05	; 5
    749e:	a0 e0       	ldi	r26, 0x00	; 0
    74a0:	b5 e0       	ldi	r27, 0x05	; 5
    74a2:	ec e1       	ldi	r30, 0x1C	; 28
    74a4:	fb ed       	ldi	r31, 0xDB	; 219
    74a6:	02 c0       	rjmp	.+4      	; 0x74ac <__do_copy_data+0x10>
    74a8:	05 90       	lpm	r0, Z+
    74aa:	0d 92       	st	X+, r0
    74ac:	a0 31       	cpi	r26, 0x10	; 16
    74ae:	b1 07       	cpc	r27, r17
    74b0:	d9 f7       	brne	.-10     	; 0x74a8 <__do_copy_data+0xc>

000074b2 <__do_clear_bss>:
    74b2:	10 e1       	ldi	r17, 0x10	; 16
    74b4:	a0 e1       	ldi	r26, 0x10	; 16
    74b6:	b5 e0       	ldi	r27, 0x05	; 5
    74b8:	01 c0       	rjmp	.+2      	; 0x74bc <.do_clear_bss_start>

000074ba <.do_clear_bss_loop>:
    74ba:	1d 92       	st	X+, r1

000074bc <.do_clear_bss_start>:
    74bc:	ae 32       	cpi	r26, 0x2E	; 46
    74be:	b1 07       	cpc	r27, r17
    74c0:	e1 f7       	brne	.-8      	; 0x74ba <.do_clear_bss_loop>

000074c2 <wdt_init>:

void wdt_init(void)
{

#if TRUE_RANDOM_GEN == 1	
	wdt_randomize();
    74c2:	0e 94 fc 3f 	call	0x7ff8	; 0x7ff8 <wdt_randomize>
#endif

    MCUSR = 0;
    74c6:	14 be       	out	0x34, r1	; 52
    wdt_disable();
    74c8:	88 e1       	ldi	r24, 0x18	; 24
    74ca:	0f b6       	in	r0, 0x3f	; 63
    74cc:	f8 94       	cli
    74ce:	80 93 60 00 	sts	0x0060, r24
    74d2:	10 92 60 00 	sts	0x0060, r1
    74d6:	0f be       	out	0x3f, r0	; 63

000074d8 <Initialize>:


void Initialize(void){
	int i;

	if(!isEepromFormatted()) FormatEeprom();
    74d8:	0e 94 be 40 	call	0x817c	; 0x817c <isEepromFormatted>
    74dc:	81 11       	cpse	r24, r1
    74de:	02 c0       	rjmp	.+4      	; 0x74e4 <Initialize+0xc>
    74e0:	0e 94 9c 40 	call	0x8138	; 0x8138 <FormatEeprom>

	cli();
    74e4:	f8 94       	cli
		mix_bank=0;
	#endif
	
	#if MIXER_CHAN4_TYPE == 0
		//initialize LFSR		
		tr4_barrel_lo=1;
    74e6:	81 e0       	ldi	r24, 0x01	; 1
    74e8:	80 93 e4 0c 	sts	0x0CE4, r24
		tr4_barrel_hi=1;		
    74ec:	80 93 e5 0c 	sts	0x0CE5, r24
		tr4_params=0b00000001; //15 bits no divider (1)
    74f0:	80 93 e3 0c 	sts	0x0CE3, r24
		snesMouseEnabled=false;
	#endif

	//silence all sound channels
	for(i=0;i<CHANNELS;i++){
		mixer.channels.all[i].volume=0;
    74f4:	10 92 d0 0c 	sts	0x0CD0, r1
    74f8:	10 92 d6 0c 	sts	0x0CD6, r1
    74fc:	10 92 dc 0c 	sts	0x0CDC, r1
    7500:	10 92 e2 0c 	sts	0x0CE2, r1
    7504:	10 92 e8 0c 	sts	0x0CE8, r1
	}
	
	//set sync parameters. starts at odd field, in pre-eq pulses, line 1, vsync flag cleared
	sync_phase=0;
    7508:	10 92 b6 0c 	sts	0x0CB6, r1
	sync_flags=0;
    750c:	10 92 b8 0c 	sts	0x0CB8, r1
	sync_pulse=SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES;
    7510:	92 e1       	ldi	r25, 0x12	; 18
    7512:	90 93 b7 0c 	sts	0x0CB7, r25

	//set rendering parameters
	render_lines_count=FRAME_LINES;
    7516:	90 ee       	ldi	r25, 0xE0	; 224
    7518:	90 93 be 0c 	sts	0x0CBE, r25
	first_render_line=FIRST_RENDER_LINE;
    751c:	94 e1       	ldi	r25, 0x14	; 20
    751e:	90 93 bd 0c 	sts	0x0CBD, r25

	joypad1_status_hi=0;
    7522:	10 92 c2 0c 	sts	0x0CC2, r1
    7526:	10 92 c1 0c 	sts	0x0CC1, r1
	joypad2_status_hi=0;
    752a:	10 92 c6 0c 	sts	0x0CC6, r1
    752e:	10 92 c5 0c 	sts	0x0CC5, r1
	sound_enabled=1;
    7532:	80 93 cf 0c 	sts	0x0CCF, r24

	InitializeVideoMode();
    7536:	0e 94 cd 4d 	call	0x9b9a	; 0x9b9a <InitializeVideoMode>
    753a:	84 e8       	ldi	r24, 0x84	; 132
    753c:	90 e0       	ldi	r25, 0x00	; 0
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
		val=pgm_read_word(&io_table[j]);
    753e:	fc 01       	movw	r30, r24
    7540:	25 91       	lpm	r18, Z+
    7542:	34 91       	lpm	r19, Z
		ptr=(u8*)(val&0xff);
    7544:	f9 01       	movw	r30, r18
    7546:	ff 27       	eor	r31, r31
		*ptr=val>>8;	
    7548:	30 83       	st	Z, r19
    754a:	02 96       	adiw	r24, 0x02	; 2
	InitializeVideoMode();
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
    754c:	20 e0       	ldi	r18, 0x00	; 0
    754e:	82 3b       	cpi	r24, 0xB2	; 178
    7550:	92 07       	cpc	r25, r18
    7552:	a9 f7       	brne	.-22     	; 0x753e <Initialize+0x66>
		val=pgm_read_word(&io_table[j]);
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;	
	}

	sei();
    7554:	78 94       	sei
	
	DisplayLogo();
    7556:	0e 94 5c 4e 	call	0x9cb8	; 0x9cb8 <DisplayLogo>
    755a:	0e 94 27 6b 	call	0xd64e	; 0xd64e <main>
    755e:	0c 94 8c 6d 	jmp	0xdb18	; 0xdb18 <_exit>

00007562 <__bad_interrupt>:
    7562:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00007566 <sub_video_mode3>:
	;***************************************************

	sub_video_mode3:
		;de-activate sync timer interrupts
		;we will need to use the I flag to branch in a critical loop
		ldi ZL,(0<<OCIE1A)
    7566:	e0 e0       	ldi	r30, 0x00	; 0
		sts _SFR_MEM_ADDR(TIMSK1),ZL
    7568:	e0 93 6f 00 	sts	0x006F, r30

		;wait cycles to align with next hsync
		WAIT r26,183+241
    756c:	ad e8       	ldi	r26, 0x8D	; 141
    756e:	aa 95       	dec	r26
    7570:	f1 f7       	brne	.-4      	; 0x756e <sub_video_mode3+0x8>
    7572:	00 00       	nop

		;Refresh ramtiles indexes in VRAM
		;This has to be done because the main
		;program may have altered the VRAM
		;after vsync and the rendering interrupt.
		lds r16,userRamTilesCount
    7574:	00 91 f3 0c 	lds	r16, 0x0CF3

		ldi ZL,lo8(ram_tiles_restore);
    7578:	e0 e5       	ldi	r30, 0x50	; 80
		ldi ZH,hi8(ram_tiles_restore);
    757a:	fc e0       	ldi	r31, 0x0C	; 12
		ldi r18,3
    757c:	23 e0       	ldi	r18, 0x03	; 3
		mul r16,r18
    757e:	02 9f       	mul	r16, r18
		add ZL,r0
    7580:	e0 0d       	add	r30, r0
		adc ZH,r1
    7582:	f1 1d       	adc	r31, r1

		ldi YL,lo8(vram)
    7584:	c0 e0       	ldi	r28, 0x00	; 0
		ldi YH,hi8(vram)
    7586:	d1 e0       	ldi	r29, 0x01	; 1

		lds r18,free_tile_index
    7588:	20 91 7f 0d 	lds	r18, 0x0D7F
		ldi r19,MAX_RAMTILES		;maximum possible ramtiles
    758c:	3c e3       	ldi	r19, 0x3C	; 60
		sub r19,r18					;sub free tile
    758e:	32 1b       	sub	r19, r18
		add r19,r16					;add user tiles
    7590:	30 0f       	add	r19, r16

		cp r18,r16
    7592:	20 17       	cp	r18, r16
		breq no_ramtiles
    7594:	51 f0       	breq	.+20     	; 0x75aa <no_ramtiles>
		nop
    7596:	00 00       	nop
	...

0000759a <upd_loop>:
		nop
upd_loop:
		ld XL,Z+	;load vram offset of ramtile
    759a:	a1 91       	ld	r26, Z+
		ld XH,Z+
    759c:	b1 91       	ld	r27, Z+

		ld r17,X	;get latest VRAM tile that may have been modified my
    759e:	1c 91       	ld	r17, X
		st Z+,r17	;the main program and store it in the restore buffer
    75a0:	11 93       	st	Z+, r17
		st X,r16	;write the ramtile index back to vram
    75a2:	0c 93       	st	X, r16

		inc r16
    75a4:	03 95       	inc	r16
		cp r16,r18
    75a6:	02 17       	cp	r16, r18
		brlo upd_loop ;loop is 14 cycles
    75a8:	c0 f3       	brcs	.-16     	; 0x759a <upd_loop>

000075aa <no_ramtiles>:

no_ramtiles:
		;wait for remaining maximum possible ramtiles
1:
		ldi r17,3
    75aa:	13 e0       	ldi	r17, 0x03	; 3
		dec r17
    75ac:	1a 95       	dec	r17
		brne .-4
    75ae:	f1 f7       	brne	.-4      	; 0x75ac <no_ramtiles+0x2>
		rjmp .
    75b0:	00 c0       	rjmp	.+0      	; 0x75b2 <no_ramtiles+0x8>
		dec r19
    75b2:	3a 95       	dec	r19
		brne 1b
    75b4:	d1 f7       	brne	.-12     	; 0x75aa <no_ramtiles>

		;**********************
		; setup scroll stuff
		;**********************
	
		ldi YL,lo8(vram)
    75b6:	c0 e0       	ldi	r28, 0x00	; 0
		ldi YH,hi8(vram)
    75b8:	d1 e0       	ldi	r29, 0x01	; 1

		//add X scroll (coarse)
		lds r18,screen_scrollX ;ScreenScrollX
    75ba:	20 91 b2 0c 	lds	r18, 0x0CB2
		mov r25,r18
    75be:	92 2f       	mov	r25, r18
		andi r18,0xf8	;(x>>3) * 8 interleave
    75c0:	28 7f       	andi	r18, 0xF8	; 248
		add YL,r18
    75c2:	c2 0f       	add	r28, r18

		;save Y wrap adress 
		movw r12,YL
    75c4:	6e 01       	movw	r12, r28
	

		//add Y scroll (coarse)
		lds r16,screen_scrollY ;ScreenScrollY
    75c6:	00 91 b3 0c 	lds	r16, 0x0CB3
		mov r22,r16
    75ca:	60 2f       	mov	r22, r16
		lsr r16
    75cc:	06 95       	lsr	r16
		lsr r16
    75ce:	06 95       	lsr	r16
		lsr r16 ;/8
    75d0:	06 95       	lsr	r16

        lds r17,screen_scrollHeight
    75d2:	10 91 b4 0c 	lds	r17, 0x0CB4
        sub r17,r16
    75d6:	10 1b       	sub	r17, r16
        mov r15,r17 ;Y tiles to draw before wrapping
    75d8:	f1 2e       	mov	r15, r17

        mov r17,r16
    75da:	10 2f       	mov	r17, r16
        lsr r16
    75dc:	06 95       	lsr	r16
        lsr r16
    75de:	06 95       	lsr	r16
        lsr r16 ;/8
    75e0:	06 95       	lsr	r16
		add YH,r16      ; (bits 6-7)
    75e2:	d0 0f       	add	r29, r16
		andi r17,0x7
    75e4:	17 70       	andi	r17, 0x07	; 7
        add YL,r17      ;interleave (bits 3-5)
    75e6:	c1 0f       	add	r28, r17
        andi r22,0x7    ;fine Y scrolling (bits 0-2)
    75e8:	67 70       	andi	r22, 0x07	; 7
		;lds r20,tile_table_lo
		;lds r21,tile_table_hi
		;out _SFR_IO_ADDR(GPIOR1),r20 ;store for later
		;out _SFR_IO_ADDR(GPIOR2),r21

		lds r20,overlay_tile_table
    75ea:	40 91 b0 0c 	lds	r20, 0x0CB0
		lds r21,overlay_tile_table+1
    75ee:	50 91 b1 0c 	lds	r21, 0x0CB1
		lds r6,tile_table_lo
    75f2:	60 90 ac 0c 	lds	r6, 0x0CAC
		lds r7,tile_table_hi
    75f6:	70 90 ad 0c 	lds	r7, 0x0CAD
		out _SFR_IO_ADDR(GPIOR1),r6 ;store for later
    75fa:	6a bc       	out	0x2a, r6	; 42
		out _SFR_IO_ADDR(GPIOR2),r7
    75fc:	7b bc       	out	0x2b, r7	; 43


		;save main section value	
		movw r10,YL
    75fe:	5e 01       	movw	r10, r28
		mov r23,r22
    7600:	76 2f       	mov	r23, r22
		mov r24,r15
    7602:	8f 2d       	mov	r24, r15
		mov r9,r25
    7604:	99 2e       	mov	r9, r25

		;load values for overlay if it's activated (overlay_height>0)
		
		;compute beginning of overlay in vram 
		lds r16,screen_scrollHeight
    7606:	00 91 b4 0c 	lds	r16, 0x0CB4
		mov r18,r16
    760a:	20 2f       	mov	r18, r16
		lsr r16
    760c:	06 95       	lsr	r16
		lsr r16
    760e:	06 95       	lsr	r16
		lsr r16			;hi8
    7610:	06 95       	lsr	r16
		inc r16			;add 0x100 ram offset
    7612:	03 95       	inc	r16
		andi r18,7		;lo8
    7614:	27 70       	andi	r18, 0x07	; 7
		
		lds r19,overlay_height	
    7616:	30 91 af 0c 	lds	r19, 0x0CAF
		cpi r19,0
    761a:	30 30       	cpi	r19, 0x00	; 0
		in r0, _SFR_IO_ADDR(SREG)
    761c:	0f b6       	in	r0, 0x3f	; 63

		sbrs r0,SREG_Z
    761e:	01 fe       	sbrs	r0, 1
		clr r22
    7620:	66 27       	eor	r22, r22
		sbrs r0,SREG_Z
    7622:	01 fe       	sbrs	r0, 1
		mov YL,r18		;lo8(overlay_vram)
    7624:	c2 2f       	mov	r28, r18
		sbrs r0,SREG_Z
    7626:	01 fe       	sbrs	r0, 1
		mov YH,r16		;hi8(overlay_vram)
    7628:	d0 2f       	mov	r29, r16
		sbrs r0,SREG_Z
    762a:	01 fe       	sbrs	r0, 1
		ser r24
    762c:	8f ef       	ldi	r24, 0xFF	; 255
		sbrs r0,SREG_Z
    762e:	01 fe       	sbrs	r0, 1
		clr r9
    7630:	99 24       	eor	r9, r9

		sbrs r0,SREG_Z
    7632:	01 fe       	sbrs	r0, 1
		out _SFR_IO_ADDR(GPIOR1),r20
    7634:	4a bd       	out	0x2a, r20	; 42
		sbrs r0,SREG_Z
    7636:	01 fe       	sbrs	r0, 1
		out _SFR_IO_ADDR(GPIOR2),r21
    7638:	5b bd       	out	0x2b, r21	; 43


		//ldi r16,SCREEN_TILES_V*TILE_HEIGHT; total scanlines to draw
		//mov r8,r16
		lds r8,render_lines_count ;total scanlines to draw
    763a:	80 90 be 0c 	lds	r8, 0x0CBE

0000763e <next_tile_line>:
	;r23 = Main section tile row
	;r24 = Current Y tiles to draw before wrapping
	;r25 = Main section scrollX

	next_tile_line:
		rcall hsync_pulse
    763e:	bc d3       	rcall	.+1912   	; 0x7db8 <hsync_pulse>

		WAIT r18,HSYNC_USABLE_CYCLES - AUDIO_OUT_HSYNC_CYCLES
    7640:	24 e0       	ldi	r18, 0x04	; 4
    7642:	2a 95       	dec	r18
    7644:	f1 f7       	brne	.-4      	; 0x7642 <next_tile_line+0x4>
    7646:	00 00       	nop
				
		call render_tile_line
    7648:	0e 94 65 3b 	call	0x76ca	; 0x76ca <render_tile_line>

		WAIT r18,58
    764c:	23 e1       	ldi	r18, 0x13	; 19
    764e:	2a 95       	dec	r18
    7650:	f1 f7       	brne	.-4      	; 0x764e <next_tile_line+0x10>
    7652:	00 00       	nop

		inc r22
    7654:	63 95       	inc	r22
		dec r8
    7656:	8a 94       	dec	r8
		breq text_frame_end
    7658:	09 f1       	breq	.+66     	; 0x769c <text_frame_end>

		cpi r22,TILE_HEIGHT ;last char line? 1
    765a:	68 30       	cpi	r22, 0x08	; 8
		breq next_tile_row
    765c:	29 f0       	breq	.+10     	; 0x7668 <next_tile_row>

		;wait to align with next_tile_row instructions (+1 cycle for the breq)
		WAIT r16,25
    765e:	08 e0       	ldi	r16, 0x08	; 8
    7660:	0a 95       	dec	r16
    7662:	f1 f7       	brne	.-4      	; 0x7660 <next_tile_line+0x22>
    7664:	00 00       	nop
		rjmp next_tile_line
    7666:	eb cf       	rjmp	.-42     	; 0x763e <next_tile_line>

00007668 <next_tile_row>:

	next_tile_row:

		clr r22		;clear current char line
    7668:	66 27       	eor	r22, r22

		;increment vram pointer next row
		mov r16,YL
    766a:	0c 2f       	mov	r16, r28
		andi r16,0x7
    766c:	07 70       	andi	r16, 0x07	; 7
		cpi r16,7
    766e:	07 30       	cpi	r16, 0x07	; 7
		breq 1f
    7670:	11 f0       	breq	.+4      	; 0x7676 <next_tile_row+0xe>
		inc YL
    7672:	c3 95       	inc	r28
		rjmp 2f
    7674:	02 c0       	rjmp	.+4      	; 0x767a <next_tile_row+0x12>
	1:
		andi YL,0xf8
    7676:	c8 7f       	andi	r28, 0xF8	; 248
		inc YH
    7678:	d3 95       	inc	r29
	2:

		dec r24		;wrap section?
    767a:	8a 95       	dec	r24
		brne .+2
    767c:	09 f4       	brne	.+2      	; 0x7680 <next_tile_row+0x18>
		movw YL,r12
    767e:	e6 01       	movw	r28, r12

		dec r19
    7680:	3a 95       	dec	r19
		brne .+2
    7682:	09 f4       	brne	.+2      	; 0x7686 <next_tile_row+0x1e>
		mov r22,r23	;section tile row
    7684:	67 2f       	mov	r22, r23
		brne .+2
    7686:	09 f4       	brne	.+2      	; 0x768a <next_tile_row+0x22>
		movw YL,r10 ;vram adress
    7688:	e5 01       	movw	r28, r10
		brne .+2
    768a:	09 f4       	brne	.+2      	; 0x768e <next_tile_row+0x26>
		mov r24,r15 ;Y wrapping
    768c:	8f 2d       	mov	r24, r15
		brne .+2
    768e:	09 f4       	brne	.+2      	; 0x7692 <next_tile_row+0x2a>
		mov r9,r25  ;scrollX
    7690:	99 2e       	mov	r9, r25

		brne .+2
    7692:	09 f4       	brne	.+2      	; 0x7696 <next_tile_row+0x2e>
		out _SFR_IO_ADDR(GPIOR1),r6  ;tileset
    7694:	6a bc       	out	0x2a, r6	; 42
		brne .+2
    7696:	09 f4       	brne	.+2      	; 0x769a <next_tile_row+0x32>
		out _SFR_IO_ADDR(GPIOR2),r7  ;tilset
    7698:	7b bc       	out	0x2b, r7	; 43

		rjmp next_tile_line
    769a:	d1 cf       	rjmp	.-94     	; 0x763e <next_tile_line>

0000769c <text_frame_end>:

	text_frame_end:

		WAIT r18,28
    769c:	29 e0       	ldi	r18, 0x09	; 9
    769e:	2a 95       	dec	r18
    76a0:	f1 f7       	brne	.-4      	; 0x769e <text_frame_end+0x2>
    76a2:	00 00       	nop

		rcall hsync_pulse ;145
    76a4:	89 d3       	rcall	.+1810   	; 0x7db8 <hsync_pulse>
	
		clr r1
    76a6:	11 24       	eor	r1, r1
		call RestoreBackground
    76a8:	0e 94 80 4c 	call	0x9900	; 0x9900 <RestoreBackground>

		;set vsync flag & flip field
		lds ZL,sync_flags
    76ac:	e0 91 b8 0c 	lds	r30, 0x0CB8
		ldi r20,SYNC_FLAG_FIELD
    76b0:	42 e0       	ldi	r20, 0x02	; 2
		ori ZL,SYNC_FLAG_VSYNC
    76b2:	e1 60       	ori	r30, 0x01	; 1
		eor ZL,r20
    76b4:	e4 27       	eor	r30, r20
		sts sync_flags,ZL
    76b6:	e0 93 b8 0c 	sts	0x0CB8, r30
	
		cli 
    76ba:	f8 94       	cli

		;re-activate sync timer interrupts
		ldi ZL,(1<<OCIE1A)
    76bc:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIMSK1),ZL
    76be:	e0 93 6f 00 	sts	0x006F, r30
			
		;clear any pending timer int
		ldi ZL,(1<<OCF1A)
    76c2:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIFR1),ZL
    76c4:	e0 93 36 00 	sts	0x0036, r30

		ret
    76c8:	08 95       	ret

000076ca <render_tile_line>:
	; Can destroy: r0,r1,r2,r3,r4,r5,r6,r7,r13,r16,r17,r18,r19,r20,r21,Z
	; 
	; cycles  = 1495
	;*************************************************
	render_tile_line:
		push YL
    76ca:	cf 93       	push	r28
		push YH
    76cc:	df 93       	push	r29
		push r23
    76ce:	7f 93       	push	r23
		push r22
    76d0:	6f 93       	push	r22
		push r19
    76d2:	3f 93       	push	r19
		push r13
    76d4:	df 92       	push	r13
		push r12
    76d6:	cf 92       	push	r12
		push r9
    76d8:	9f 92       	push	r9
		push r7
    76da:	7f 92       	push	r7
		push r6
    76dc:	6f 92       	push	r6
		;--------------------------
		; Rendering 
		;---------------------------

		;get tile row offset
		ldi r23,TILE_WIDTH ;tile width in pixels
    76de:	78 e0       	ldi	r23, 0x08	; 8
		mul r22,r23
    76e0:	67 9f       	mul	r22, r23

		;compute base adresses for ROM and RAM tiles
		in r16,_SFR_IO_ADDR(GPIOR1) ;tile_table_lo
    76e2:	0a b5       	in	r16, 0x2a	; 42
		in r17,_SFR_IO_ADDR(GPIOR2) ;tile_table_hi
    76e4:	1b b5       	in	r17, 0x2b	; 43
		subi r16,lo8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    76e6:	00 50       	subi	r16, 0x00	; 0
		sbci r17,hi8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    76e8:	17 40       	sbci	r17, 0x07	; 7

		add r16,r0
    76ea:	00 0d       	add	r16, r0
		adc r17,r1
    76ec:	11 1d       	adc	r17, r1
		movw r2,r16			;rom tiles adress
    76ee:	18 01       	movw	r2, r16

		ldi r16,lo8(ram_tiles)
    76f0:	00 e5       	ldi	r16, 0x50	; 80
		ldi r17,hi8(ram_tiles)
    76f2:	15 e0       	ldi	r17, 0x05	; 5
		add r16,r0
    76f4:	00 0d       	add	r16, r0
		adc r17,r1
    76f6:	11 1d       	adc	r17, r1
		movw r4,r16			;ram tiles adress
    76f8:	28 01       	movw	r4, r16

		ldi r19,TILE_HEIGHT*TILE_WIDTH
    76fa:	30 e4       	ldi	r19, 0x40	; 64
		ldi r17,SCREEN_TILES_H-1	;main loop counter
    76fc:	1b e1       	ldi	r17, 0x1B	; 27


		;handle fine scroll offset
		;lds r22,screenSections+scrollX
		mov r22,r9
    76fe:	69 2d       	mov	r22, r9
		andi r22,0x7		
    7700:	67 70       	andi	r22, 0x07	; 7
		mov r14,r22	;pixels to draw on last tile	
    7702:	e6 2e       	mov	r14, r22
		cli			;no trailing pixel to draw (hack, see end: )
    7704:	f8 94       	cli
		breq .+2
    7706:	09 f0       	breq	.+2      	; 0x770a <render_tile_line+0x40>
		sei			;some trailing pixel to draw (hack, see end: )
    7708:	78 94       	sei

		;get first pixel of last tile in ROM (for ROM tiles fine scroll)
		;and adress of next pixel
		movw ZL,YL
    770a:	fe 01       	movw	r30, r28
		subi ZL,-(SCREEN_TILES_H*8)
    770c:	e0 52       	subi	r30, 0x20	; 32
		ld r18,Z
    770e:	20 81       	ld	r18, Z
		mul r18,r19 	;tile*width*height
    7710:	23 9f       	mul	r18, r19
	    add r0,r2    ;add ROM title table address +row offset
    7712:	02 0c       	add	r0, r2
	    adc r1,r3
    7714:	13 1c       	adc	r1, r3
		movw ZL,r0
    7716:	f0 01       	movw	r30, r0
		lpm r9,Z+	;hold first pixel until end 
    7718:	95 90       	lpm	r9, Z+
		movw r12,ZL ;hold second pixel adress until end
    771a:	6f 01       	movw	r12, r30


		;compute first tile adress
	    ld r18,Y     	;load next tile # from VRAM
    771c:	28 81       	ld	r18, Y
		subi YL,-8
    771e:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT
    7720:	2c 31       	cpi	r18, 0x1C	; 28
		in r16,_SFR_IO_ADDR(SREG)	;save the carry flag for later	
    7722:	0f b7       	in	r16, 0x3f	; 63
		mul r18,r19 	;tile*width*height
    7724:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles	
    7726:	a1 01       	movw	r20, r2
		sbrc r16,SREG_C
    7728:	00 fd       	sbrc	r16, 0
		movw r20,r4		;ram tiles
    772a:	a2 01       	movw	r20, r4
	    add r0,r20    ;add title table address +row offset
    772c:	04 0e       	add	r0, r20
	    adc r1,r21
    772e:	15 1e       	adc	r1, r21
		movw XL,r0
    7730:	d0 01       	movw	r26, r0


		;compute second tile adress
	    ld r18,Y     	;load next tile # from VRAM
    7732:	28 81       	ld	r18, Y
		subi YL,-8
    7734:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT
    7736:	2c 31       	cpi	r18, 0x1C	; 28
		in r7,_SFR_IO_ADDR(SREG)	;save the carry flag for later
    7738:	7f b6       	in	r7, 0x3f	; 63
		bst r7,SREG_C
    773a:	70 fa       	bst	r7, 0
		mul r18,r19 	;tile*width*height
    773c:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles
    773e:	a1 01       	movw	r20, r2
		brtc .+2
    7740:	0e f4       	brtc	.+2      	; 0x7744 <render_tile_line+0x7a>
		movw r20,r4		;ram tiles
    7742:	a2 01       	movw	r20, r4
	    add r0,r20      ;add title table address +row offset
    7744:	04 0e       	add	r0, r20
	    adc r1,r21
    7746:	15 1e       	adc	r1, r21
		movw ZL,r0
    7748:	f0 01       	movw	r30, r0
		movw r6,ZL		;push Z
    774a:	3f 01       	movw	r6, r30

0000774c <do_fine_scroll>:


	do_fine_scroll:
		;output 1st tile with fine scroll offset 
		clr r0
    774c:	00 24       	eor	r0, r0
		add XL,r22	;add fine offset
    774e:	a6 0f       	add	r26, r22
		adc XH,r0
    7750:	b0 1d       	adc	r27, r0

		;compute jump offset
		ldi r23,3
    7752:	73 e0       	ldi	r23, 0x03	; 3
		mul r22,r23 ;3 instructions
    7754:	67 9f       	mul	r22, r23
	
		sbrs r16,SREG_C
    7756:	00 ff       	sbrs	r16, 0
		rjmp rom_fine_scroll
    7758:	22 c0       	rjmp	.+68     	; 0x779e <rom_fine_scroll>

0000775a <ram_fine_scroll>:

	/***FINE SCROLL RAM LOOP***/
	ram_fine_scroll:
		rjmp .
    775a:	00 c0       	rjmp	.+0      	; 0x775c <ram_fine_scroll+0x2>
		ldi r22,lo8(pm(ram_fine_scroll_loop))
    775c:	65 eb       	ldi	r22, 0xB5	; 181
		ldi r23,hi8(pm(ram_fine_scroll_loop))
    775e:	7b e3       	ldi	r23, 0x3B	; 59
		add r22,r0
    7760:	60 0d       	add	r22, r0
		adc r23,r1
    7762:	71 1d       	adc	r23, r1
		push r22
    7764:	6f 93       	push	r22
		push r23	
    7766:	7f 93       	push	r23
		ret ;jump into ram_fine_scroll_loop
    7768:	08 95       	ret

0000776a <ram_fine_scroll_loop>:
	ram_fine_scroll_loop:
		.rept 8
			ld r16,X+
			lpm
			out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		.endr
    776a:	0d 91       	ld	r16, X+
    776c:	c8 95       	lpm
    776e:	08 b9       	out	0x08, r16	; 8
    7770:	0d 91       	ld	r16, X+
    7772:	c8 95       	lpm
    7774:	08 b9       	out	0x08, r16	; 8
    7776:	0d 91       	ld	r16, X+
    7778:	c8 95       	lpm
    777a:	08 b9       	out	0x08, r16	; 8
    777c:	0d 91       	ld	r16, X+
    777e:	c8 95       	lpm
    7780:	08 b9       	out	0x08, r16	; 8
    7782:	0d 91       	ld	r16, X+
    7784:	c8 95       	lpm
    7786:	08 b9       	out	0x08, r16	; 8
    7788:	0d 91       	ld	r16, X+
    778a:	c8 95       	lpm
    778c:	08 b9       	out	0x08, r16	; 8
    778e:	0d 91       	ld	r16, X+
    7790:	c8 95       	lpm
    7792:	08 b9       	out	0x08, r16	; 8
    7794:	0d 91       	ld	r16, X+
    7796:	c8 95       	lpm
    7798:	08 b9       	out	0x08, r16	; 8

		;branch to tile #2
		brtc romloop
    779a:	1e f5       	brtc	.+70     	; 0x77e2 <romloop>
		rjmp ramloop
    779c:	40 c0       	rjmp	.+128    	; 0x781e <ramloop>

0000779e <rom_fine_scroll>:

	/***FINE SCROLL ROM LOOP***/
	rom_fine_scroll:
		movw ZL,XL
    779e:	fd 01       	movw	r30, r26
		ldi r22,lo8(pm(rom_fine_scroll_loop))	
    77a0:	67 ed       	ldi	r22, 0xD7	; 215
		ldi r23,hi8(pm(rom_fine_scroll_loop))
    77a2:	7b e3       	ldi	r23, 0x3B	; 59
		add r22,r0
    77a4:	60 0d       	add	r22, r0
		adc r23,r1
    77a6:	71 1d       	adc	r23, r1
		push r22
    77a8:	6f 93       	push	r22
		push r23	
    77aa:	7f 93       	push	r23
		ret
    77ac:	08 95       	ret

000077ae <rom_fine_scroll_loop>:
	rom_fine_scroll_loop:
		.rept 8
			lpm r16,Z+
			rjmp .
			out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		.endr 
    77ae:	05 91       	lpm	r16, Z+
    77b0:	00 c0       	rjmp	.+0      	; 0x77b2 <rom_fine_scroll_loop+0x4>
    77b2:	08 b9       	out	0x08, r16	; 8
    77b4:	05 91       	lpm	r16, Z+
    77b6:	00 c0       	rjmp	.+0      	; 0x77b8 <rom_fine_scroll_loop+0xa>
    77b8:	08 b9       	out	0x08, r16	; 8
    77ba:	05 91       	lpm	r16, Z+
    77bc:	00 c0       	rjmp	.+0      	; 0x77be <rom_fine_scroll_loop+0x10>
    77be:	08 b9       	out	0x08, r16	; 8
    77c0:	05 91       	lpm	r16, Z+
    77c2:	00 c0       	rjmp	.+0      	; 0x77c4 <rom_fine_scroll_loop+0x16>
    77c4:	08 b9       	out	0x08, r16	; 8
    77c6:	05 91       	lpm	r16, Z+
    77c8:	00 c0       	rjmp	.+0      	; 0x77ca <rom_fine_scroll_loop+0x1c>
    77ca:	08 b9       	out	0x08, r16	; 8
    77cc:	05 91       	lpm	r16, Z+
    77ce:	00 c0       	rjmp	.+0      	; 0x77d0 <rom_fine_scroll_loop+0x22>
    77d0:	08 b9       	out	0x08, r16	; 8
    77d2:	05 91       	lpm	r16, Z+
    77d4:	00 c0       	rjmp	.+0      	; 0x77d6 <rom_fine_scroll_loop+0x28>
    77d6:	08 b9       	out	0x08, r16	; 8
    77d8:	05 91       	lpm	r16, Z+
    77da:	00 c0       	rjmp	.+0      	; 0x77dc <rom_fine_scroll_loop+0x2e>
    77dc:	08 b9       	out	0x08, r16	; 8
	
		movw ZL,r6		;restore Z for tile #2
    77de:	f3 01       	movw	r30, r6

		;branch to tile #2
		brts ramloop
    77e0:	f6 f0       	brts	.+60     	; 0x781e <ramloop>

000077e2 <romloop>:

	
	romloop:
	    lpm r16,Z+
    77e2:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    77e4:	08 b9       	out	0x08, r16	; 8
	    ld r18,Y     ;load next tile # from VRAM
    77e6:	28 81       	ld	r18, Y

	    lpm r16,Z+
    77e8:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 2
    77ea:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    77ec:	23 9f       	mul	r18, r19

	    lpm r16,Z+
    77ee:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 3
    77f0:	08 b9       	out	0x08, r16	; 8
		subi YL,-8
    77f2:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT		;is tile in RAM or ROM? (RAM tiles have indexes<RAM_TILES_COUNT)
    77f4:	2c 31       	cpi	r18, 0x1C	; 28
		
	    lpm r16,Z+
    77f6:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    77f8:	08 b9       	out	0x08, r16	; 8
		brsh .+2		;skip if next tile is in ROM	
    77fa:	08 f4       	brcc	.+2      	; 0x77fe <romloop+0x1c>
		movw r20,r4 	;load RAM title table address +row offset	
    77fc:	a2 01       	movw	r20, r4
   
	    lpm r16,Z+
    77fe:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 5
    7800:	08 b9       	out	0x08, r16	; 8
		add r0,r20		;add tile table address +row offset lsb
    7802:	04 0e       	add	r0, r20
	    adc r1,r21		;add title table address +row offset msb
    7804:	15 1e       	adc	r1, r21

	    lpm r16,Z+
    7806:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 6
    7808:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT	
    780a:	2c 31       	cpi	r18, 0x1C	; 28
		dec r17			;decrement tiles to draw on line (does not affect carry)
    780c:	1a 95       	dec	r17
   
	    lpm r16,Z+
    780e:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 7   
    7810:	08 b9       	out	0x08, r16	; 8
	    lpm r16,Z+
    7812:	05 91       	lpm	r16, Z+

		breq end	
    7814:	39 f1       	breq	.+78     	; 0x7864 <end>
	    movw ZL,r0   	;copy next tile adress
    7816:	f0 01       	movw	r30, r0

	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    7818:	08 b9       	out	0x08, r16	; 8
	    brcc romloop
    781a:	18 f7       	brcc	.-58     	; 0x77e2 <romloop>
	
		rjmp .
    781c:	00 c0       	rjmp	.+0      	; 0x781e <ramloop>

0000781e <ramloop>:

	ramloop:

	    ld r16,Z+
    781e:	01 91       	ld	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    7820:	08 b9       	out	0x08, r16	; 8
	    ld r18,Y     ;load next tile # from VRAM
    7822:	28 81       	ld	r18, Y

	    ld r16,Z+ 
    7824:	01 91       	ld	r16, Z+
		subi YL,-8   		
    7826:	c8 5f       	subi	r28, 0xF8	; 248
		out _SFR_IO_ADDR(DATA_PORT),r16 		;pixel 2
    7828:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    782a:	23 9f       	mul	r18, r19

	    ld r16,Z+
    782c:	01 91       	ld	r16, Z+
		nop
    782e:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16         ;pixel 3
    7830:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    7832:	2c 31       	cpi	r18, 0x1C	; 28
		rjmp .
    7834:	00 c0       	rjmp	.+0      	; 0x7836 <ramloop+0x18>
   
	    ld r16,Z+
    7836:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    7838:	08 b9       	out	0x08, r16	; 8
		brcs .+2 
    783a:	08 f0       	brcs	.+2      	; 0x783e <ramloop+0x20>
		movw r20,r2 	;ROM title table address +row offset	
    783c:	a1 01       	movw	r20, r2
   
   
	    ld r16,Z+
    783e:	01 91       	ld	r16, Z+
	    add r0,r20    ;add title table address +row offset
    7840:	04 0e       	add	r0, r20
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 5
    7842:	08 b9       	out	0x08, r16	; 8
	    adc r1,r21
    7844:	15 1e       	adc	r1, r21
		rjmp .
    7846:	00 c0       	rjmp	.+0      	; 0x7848 <ramloop+0x2a>
    
		ld r16,Z+		
    7848:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 6
    784a:	08 b9       	out	0x08, r16	; 8
		ld r7,Z+
    784c:	71 90       	ld	r7, Z+
	    ld r16,Z+	
    784e:	01 91       	ld	r16, Z+
	
		movw ZL,r0
    7850:	f0 01       	movw	r30, r0
		out _SFR_IO_ADDR(DATA_PORT),r7      ;pixel 7   
    7852:	78 b8       	out	0x08, r7	; 8
		nop
    7854:	00 00       	nop
		cpi r18,RAM_TILES_COUNT	
    7856:	2c 31       	cpi	r18, 0x1C	; 28
	    dec r17
    7858:	1a 95       	dec	r17
	    breq end
    785a:	21 f0       	breq	.+8      	; 0x7864 <end>
	
		nop
    785c:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    785e:	08 b9       	out	0x08, r16	; 8
	
	    brcc romloop
    7860:	00 f6       	brcc	.-128    	; 0x77e2 <romloop>
		rjmp ramloop
    7862:	dd cf       	rjmp	.-70     	; 0x781e <ramloop>

00007864 <end>:
	
	end:
		out _SFR_IO_ADDR(DATA_PORT),r16  	;pixel 8
    7864:	08 b9       	out	0x08, r16	; 8
		brid end_fine_scroll				;hack: interrupt flag=0 => no fine offset pixel to draw
    7866:	27 f5       	brid	.+72     	; 0x78b0 <end_fine_scroll>
		brcc end_rom_fine_scroll_loop
    7868:	30 f4       	brcc	.+12     	; 0x7876 <end_rom_fine_scroll_loop>

	/***END RAM LOOP***/
		movw ZL,r0
    786a:	f0 01       	movw	r30, r0

0000786c <end_ram_fine_scroll_loop>:
	end_ram_fine_scroll_loop:
		ld r16,Z+
    786c:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
    786e:	08 b9       	out	0x08, r16	; 8
		dec r14
    7870:	ea 94       	dec	r14
		brne end_ram_fine_scroll_loop
    7872:	e1 f7       	brne	.-8      	; 0x786c <end_ram_fine_scroll_loop>
		rjmp end_fine_scroll_ram
    7874:	1f c0       	rjmp	.+62     	; 0x78b4 <end_fine_scroll_ram>

00007876 <end_rom_fine_scroll_loop>:

	/***END ROM LOOP***/
	end_rom_fine_scroll_loop:
		movw ZL,r12
    7876:	f6 01       	movw	r30, r12
		nop
    7878:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r9        ;output saved 1st pixel
    787a:	98 b8       	out	0x08, r9	; 8
		dec r14
    787c:	ea 94       	dec	r14
		breq end_fine_scroll_rom
    787e:	c9 f0       	breq	.+50     	; 0x78b2 <end_fine_scroll_rom>
	.rept 6
		lpm r16,Z+		
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		dec r14
		breq end_fine_scroll_rom
	.endr
    7880:	05 91       	lpm	r16, Z+
    7882:	08 b9       	out	0x08, r16	; 8
    7884:	ea 94       	dec	r14
    7886:	a9 f0       	breq	.+42     	; 0x78b2 <end_fine_scroll_rom>
    7888:	05 91       	lpm	r16, Z+
    788a:	08 b9       	out	0x08, r16	; 8
    788c:	ea 94       	dec	r14
    788e:	89 f0       	breq	.+34     	; 0x78b2 <end_fine_scroll_rom>
    7890:	05 91       	lpm	r16, Z+
    7892:	08 b9       	out	0x08, r16	; 8
    7894:	ea 94       	dec	r14
    7896:	69 f0       	breq	.+26     	; 0x78b2 <end_fine_scroll_rom>
    7898:	05 91       	lpm	r16, Z+
    789a:	08 b9       	out	0x08, r16	; 8
    789c:	ea 94       	dec	r14
    789e:	49 f0       	breq	.+18     	; 0x78b2 <end_fine_scroll_rom>
    78a0:	05 91       	lpm	r16, Z+
    78a2:	08 b9       	out	0x08, r16	; 8
    78a4:	ea 94       	dec	r14
    78a6:	29 f0       	breq	.+10     	; 0x78b2 <end_fine_scroll_rom>
    78a8:	05 91       	lpm	r16, Z+
    78aa:	08 b9       	out	0x08, r16	; 8
    78ac:	ea 94       	dec	r14
    78ae:	09 f0       	breq	.+2      	; 0x78b2 <end_fine_scroll_rom>

000078b0 <end_fine_scroll>:
	...

000078b2 <end_fine_scroll_rom>:
	...

000078b4 <end_fine_scroll_ram>:
	end_fine_scroll:	
		nop
	end_fine_scroll_rom:
		nop
	end_fine_scroll_ram:
		clr r16	
    78b4:	00 27       	eor	r16, r16
		out _SFR_IO_ADDR(DATA_PORT),r16   
    78b6:	08 b9       	out	0x08, r16	; 8

		pop r6
    78b8:	6f 90       	pop	r6
		pop r7
    78ba:	7f 90       	pop	r7
		pop r9
    78bc:	9f 90       	pop	r9
		pop r12
    78be:	cf 90       	pop	r12
		pop r13
    78c0:	df 90       	pop	r13
		pop r19
    78c2:	3f 91       	pop	r19
		pop r22
    78c4:	6f 91       	pop	r22
		pop r23
    78c6:	7f 91       	pop	r23
		pop YH
    78c8:	df 91       	pop	r29
		pop YL
    78ca:	cf 91       	pop	r28

		ret
    78cc:	08 95       	ret

000078ce <CopyFlashTile>:
; C-callable
; r24=Source ROM tile index
; r22=Dest RAM tile index
;************************************
CopyFlashTile:
	ldi r18,TILE_HEIGHT*TILE_WIDTH
    78ce:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	lds ZL,tile_table_lo
    78d0:	e0 91 ac 0c 	lds	r30, 0x0CAC
	lds ZH,tile_table_hi
    78d4:	f0 91 ad 0c 	lds	r31, 0x0CAD
	mul r24,r18
    78d8:	82 9f       	mul	r24, r18
	add ZL,r0
    78da:	e0 0d       	add	r30, r0
	adc ZH,r1
    78dc:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    78de:	a0 e5       	ldi	r26, 0x50	; 80
	ldi XH,hi8(ram_tiles)
    78e0:	b5 e0       	ldi	r27, 0x05	; 5
	mul r22,r18
    78e2:	62 9f       	mul	r22, r18
	add XL,r0
    78e4:	a0 0d       	add	r26, r0
	adc XH,r1
    78e6:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	lpm r1,Z+
	st X+,r1
.endr
    78e8:	15 90       	lpm	r1, Z+
    78ea:	1d 92       	st	X+, r1
    78ec:	15 90       	lpm	r1, Z+
    78ee:	1d 92       	st	X+, r1
    78f0:	15 90       	lpm	r1, Z+
    78f2:	1d 92       	st	X+, r1
    78f4:	15 90       	lpm	r1, Z+
    78f6:	1d 92       	st	X+, r1
    78f8:	15 90       	lpm	r1, Z+
    78fa:	1d 92       	st	X+, r1
    78fc:	15 90       	lpm	r1, Z+
    78fe:	1d 92       	st	X+, r1
    7900:	15 90       	lpm	r1, Z+
    7902:	1d 92       	st	X+, r1
    7904:	15 90       	lpm	r1, Z+
    7906:	1d 92       	st	X+, r1
    7908:	15 90       	lpm	r1, Z+
    790a:	1d 92       	st	X+, r1
    790c:	15 90       	lpm	r1, Z+
    790e:	1d 92       	st	X+, r1
    7910:	15 90       	lpm	r1, Z+
    7912:	1d 92       	st	X+, r1
    7914:	15 90       	lpm	r1, Z+
    7916:	1d 92       	st	X+, r1
    7918:	15 90       	lpm	r1, Z+
    791a:	1d 92       	st	X+, r1
    791c:	15 90       	lpm	r1, Z+
    791e:	1d 92       	st	X+, r1
    7920:	15 90       	lpm	r1, Z+
    7922:	1d 92       	st	X+, r1
    7924:	15 90       	lpm	r1, Z+
    7926:	1d 92       	st	X+, r1
    7928:	15 90       	lpm	r1, Z+
    792a:	1d 92       	st	X+, r1
    792c:	15 90       	lpm	r1, Z+
    792e:	1d 92       	st	X+, r1
    7930:	15 90       	lpm	r1, Z+
    7932:	1d 92       	st	X+, r1
    7934:	15 90       	lpm	r1, Z+
    7936:	1d 92       	st	X+, r1
    7938:	15 90       	lpm	r1, Z+
    793a:	1d 92       	st	X+, r1
    793c:	15 90       	lpm	r1, Z+
    793e:	1d 92       	st	X+, r1
    7940:	15 90       	lpm	r1, Z+
    7942:	1d 92       	st	X+, r1
    7944:	15 90       	lpm	r1, Z+
    7946:	1d 92       	st	X+, r1
    7948:	15 90       	lpm	r1, Z+
    794a:	1d 92       	st	X+, r1
    794c:	15 90       	lpm	r1, Z+
    794e:	1d 92       	st	X+, r1
    7950:	15 90       	lpm	r1, Z+
    7952:	1d 92       	st	X+, r1
    7954:	15 90       	lpm	r1, Z+
    7956:	1d 92       	st	X+, r1
    7958:	15 90       	lpm	r1, Z+
    795a:	1d 92       	st	X+, r1
    795c:	15 90       	lpm	r1, Z+
    795e:	1d 92       	st	X+, r1
    7960:	15 90       	lpm	r1, Z+
    7962:	1d 92       	st	X+, r1
    7964:	15 90       	lpm	r1, Z+
    7966:	1d 92       	st	X+, r1
    7968:	15 90       	lpm	r1, Z+
    796a:	1d 92       	st	X+, r1
    796c:	15 90       	lpm	r1, Z+
    796e:	1d 92       	st	X+, r1
    7970:	15 90       	lpm	r1, Z+
    7972:	1d 92       	st	X+, r1
    7974:	15 90       	lpm	r1, Z+
    7976:	1d 92       	st	X+, r1
    7978:	15 90       	lpm	r1, Z+
    797a:	1d 92       	st	X+, r1
    797c:	15 90       	lpm	r1, Z+
    797e:	1d 92       	st	X+, r1
    7980:	15 90       	lpm	r1, Z+
    7982:	1d 92       	st	X+, r1
    7984:	15 90       	lpm	r1, Z+
    7986:	1d 92       	st	X+, r1
    7988:	15 90       	lpm	r1, Z+
    798a:	1d 92       	st	X+, r1
    798c:	15 90       	lpm	r1, Z+
    798e:	1d 92       	st	X+, r1
    7990:	15 90       	lpm	r1, Z+
    7992:	1d 92       	st	X+, r1
    7994:	15 90       	lpm	r1, Z+
    7996:	1d 92       	st	X+, r1
    7998:	15 90       	lpm	r1, Z+
    799a:	1d 92       	st	X+, r1
    799c:	15 90       	lpm	r1, Z+
    799e:	1d 92       	st	X+, r1
    79a0:	15 90       	lpm	r1, Z+
    79a2:	1d 92       	st	X+, r1
    79a4:	15 90       	lpm	r1, Z+
    79a6:	1d 92       	st	X+, r1
    79a8:	15 90       	lpm	r1, Z+
    79aa:	1d 92       	st	X+, r1
    79ac:	15 90       	lpm	r1, Z+
    79ae:	1d 92       	st	X+, r1
    79b0:	15 90       	lpm	r1, Z+
    79b2:	1d 92       	st	X+, r1
    79b4:	15 90       	lpm	r1, Z+
    79b6:	1d 92       	st	X+, r1
    79b8:	15 90       	lpm	r1, Z+
    79ba:	1d 92       	st	X+, r1
    79bc:	15 90       	lpm	r1, Z+
    79be:	1d 92       	st	X+, r1
    79c0:	15 90       	lpm	r1, Z+
    79c2:	1d 92       	st	X+, r1
    79c4:	15 90       	lpm	r1, Z+
    79c6:	1d 92       	st	X+, r1
    79c8:	15 90       	lpm	r1, Z+
    79ca:	1d 92       	st	X+, r1
    79cc:	15 90       	lpm	r1, Z+
    79ce:	1d 92       	st	X+, r1
    79d0:	15 90       	lpm	r1, Z+
    79d2:	1d 92       	st	X+, r1
    79d4:	15 90       	lpm	r1, Z+
    79d6:	1d 92       	st	X+, r1
    79d8:	15 90       	lpm	r1, Z+
    79da:	1d 92       	st	X+, r1
    79dc:	15 90       	lpm	r1, Z+
    79de:	1d 92       	st	X+, r1
    79e0:	15 90       	lpm	r1, Z+
    79e2:	1d 92       	st	X+, r1
    79e4:	15 90       	lpm	r1, Z+
    79e6:	1d 92       	st	X+, r1
	clr r1
    79e8:	11 24       	eor	r1, r1
	ret
    79ea:	08 95       	ret

000079ec <CopyRamTile>:
; r24=Source RAM tile index
; r22=Dest RAM tile index
;************************************
CopyRamTile:

	ldi r18,TILE_HEIGHT*TILE_WIDTH
    79ec:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	ldi ZL,lo8(ram_tiles)
    79ee:	e0 e5       	ldi	r30, 0x50	; 80
	ldi ZH,hi8(ram_tiles)
    79f0:	f5 e0       	ldi	r31, 0x05	; 5
	mul r24,r18
    79f2:	82 9f       	mul	r24, r18
	add ZL,r0
    79f4:	e0 0d       	add	r30, r0
	adc ZH,r1
    79f6:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    79f8:	a0 e5       	ldi	r26, 0x50	; 80
	ldi XH,hi8(ram_tiles)
    79fa:	b5 e0       	ldi	r27, 0x05	; 5
	mul r22,r18
    79fc:	62 9f       	mul	r22, r18
	add XL,r0
    79fe:	a0 0d       	add	r26, r0
	adc XH,r1
    7a00:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	ld r1,Z+
	st X+,r1
.endr
    7a02:	11 90       	ld	r1, Z+
    7a04:	1d 92       	st	X+, r1
    7a06:	11 90       	ld	r1, Z+
    7a08:	1d 92       	st	X+, r1
    7a0a:	11 90       	ld	r1, Z+
    7a0c:	1d 92       	st	X+, r1
    7a0e:	11 90       	ld	r1, Z+
    7a10:	1d 92       	st	X+, r1
    7a12:	11 90       	ld	r1, Z+
    7a14:	1d 92       	st	X+, r1
    7a16:	11 90       	ld	r1, Z+
    7a18:	1d 92       	st	X+, r1
    7a1a:	11 90       	ld	r1, Z+
    7a1c:	1d 92       	st	X+, r1
    7a1e:	11 90       	ld	r1, Z+
    7a20:	1d 92       	st	X+, r1
    7a22:	11 90       	ld	r1, Z+
    7a24:	1d 92       	st	X+, r1
    7a26:	11 90       	ld	r1, Z+
    7a28:	1d 92       	st	X+, r1
    7a2a:	11 90       	ld	r1, Z+
    7a2c:	1d 92       	st	X+, r1
    7a2e:	11 90       	ld	r1, Z+
    7a30:	1d 92       	st	X+, r1
    7a32:	11 90       	ld	r1, Z+
    7a34:	1d 92       	st	X+, r1
    7a36:	11 90       	ld	r1, Z+
    7a38:	1d 92       	st	X+, r1
    7a3a:	11 90       	ld	r1, Z+
    7a3c:	1d 92       	st	X+, r1
    7a3e:	11 90       	ld	r1, Z+
    7a40:	1d 92       	st	X+, r1
    7a42:	11 90       	ld	r1, Z+
    7a44:	1d 92       	st	X+, r1
    7a46:	11 90       	ld	r1, Z+
    7a48:	1d 92       	st	X+, r1
    7a4a:	11 90       	ld	r1, Z+
    7a4c:	1d 92       	st	X+, r1
    7a4e:	11 90       	ld	r1, Z+
    7a50:	1d 92       	st	X+, r1
    7a52:	11 90       	ld	r1, Z+
    7a54:	1d 92       	st	X+, r1
    7a56:	11 90       	ld	r1, Z+
    7a58:	1d 92       	st	X+, r1
    7a5a:	11 90       	ld	r1, Z+
    7a5c:	1d 92       	st	X+, r1
    7a5e:	11 90       	ld	r1, Z+
    7a60:	1d 92       	st	X+, r1
    7a62:	11 90       	ld	r1, Z+
    7a64:	1d 92       	st	X+, r1
    7a66:	11 90       	ld	r1, Z+
    7a68:	1d 92       	st	X+, r1
    7a6a:	11 90       	ld	r1, Z+
    7a6c:	1d 92       	st	X+, r1
    7a6e:	11 90       	ld	r1, Z+
    7a70:	1d 92       	st	X+, r1
    7a72:	11 90       	ld	r1, Z+
    7a74:	1d 92       	st	X+, r1
    7a76:	11 90       	ld	r1, Z+
    7a78:	1d 92       	st	X+, r1
    7a7a:	11 90       	ld	r1, Z+
    7a7c:	1d 92       	st	X+, r1
    7a7e:	11 90       	ld	r1, Z+
    7a80:	1d 92       	st	X+, r1
    7a82:	11 90       	ld	r1, Z+
    7a84:	1d 92       	st	X+, r1
    7a86:	11 90       	ld	r1, Z+
    7a88:	1d 92       	st	X+, r1
    7a8a:	11 90       	ld	r1, Z+
    7a8c:	1d 92       	st	X+, r1
    7a8e:	11 90       	ld	r1, Z+
    7a90:	1d 92       	st	X+, r1
    7a92:	11 90       	ld	r1, Z+
    7a94:	1d 92       	st	X+, r1
    7a96:	11 90       	ld	r1, Z+
    7a98:	1d 92       	st	X+, r1
    7a9a:	11 90       	ld	r1, Z+
    7a9c:	1d 92       	st	X+, r1
    7a9e:	11 90       	ld	r1, Z+
    7aa0:	1d 92       	st	X+, r1
    7aa2:	11 90       	ld	r1, Z+
    7aa4:	1d 92       	st	X+, r1
    7aa6:	11 90       	ld	r1, Z+
    7aa8:	1d 92       	st	X+, r1
    7aaa:	11 90       	ld	r1, Z+
    7aac:	1d 92       	st	X+, r1
    7aae:	11 90       	ld	r1, Z+
    7ab0:	1d 92       	st	X+, r1
    7ab2:	11 90       	ld	r1, Z+
    7ab4:	1d 92       	st	X+, r1
    7ab6:	11 90       	ld	r1, Z+
    7ab8:	1d 92       	st	X+, r1
    7aba:	11 90       	ld	r1, Z+
    7abc:	1d 92       	st	X+, r1
    7abe:	11 90       	ld	r1, Z+
    7ac0:	1d 92       	st	X+, r1
    7ac2:	11 90       	ld	r1, Z+
    7ac4:	1d 92       	st	X+, r1
    7ac6:	11 90       	ld	r1, Z+
    7ac8:	1d 92       	st	X+, r1
    7aca:	11 90       	ld	r1, Z+
    7acc:	1d 92       	st	X+, r1
    7ace:	11 90       	ld	r1, Z+
    7ad0:	1d 92       	st	X+, r1
    7ad2:	11 90       	ld	r1, Z+
    7ad4:	1d 92       	st	X+, r1
    7ad6:	11 90       	ld	r1, Z+
    7ad8:	1d 92       	st	X+, r1
    7ada:	11 90       	ld	r1, Z+
    7adc:	1d 92       	st	X+, r1
    7ade:	11 90       	ld	r1, Z+
    7ae0:	1d 92       	st	X+, r1
    7ae2:	11 90       	ld	r1, Z+
    7ae4:	1d 92       	st	X+, r1
    7ae6:	11 90       	ld	r1, Z+
    7ae8:	1d 92       	st	X+, r1
    7aea:	11 90       	ld	r1, Z+
    7aec:	1d 92       	st	X+, r1
    7aee:	11 90       	ld	r1, Z+
    7af0:	1d 92       	st	X+, r1
    7af2:	11 90       	ld	r1, Z+
    7af4:	1d 92       	st	X+, r1
    7af6:	11 90       	ld	r1, Z+
    7af8:	1d 92       	st	X+, r1
    7afa:	11 90       	ld	r1, Z+
    7afc:	1d 92       	st	X+, r1
    7afe:	11 90       	ld	r1, Z+
    7b00:	1d 92       	st	X+, r1
	clr r1
    7b02:	11 24       	eor	r1, r1
	ret
    7b04:	08 95       	ret

00007b06 <BlitSprite>:
; r22=RAM tile index (bt)
; r21:r20=Y:X
; r19:r18=DY:DX
;************************************
BlitSprite:
	push r16
    7b06:	0f 93       	push	r16
	push r17
    7b08:	1f 93       	push	r17
	push YL
    7b0a:	cf 93       	push	r28
	push YH
    7b0c:	df 93       	push	r29

	;src=sprites_tiletable_lo+(sprites[i].tileIndex*TILE_HEIGHT*TILE_WIDTH)
	ldi r25,SPRITE_STRUCT_SIZE
    7b0e:	94 e0       	ldi	r25, 0x04	; 4
	mul r24,r25
    7b10:	89 9f       	mul	r24, r25

	ldi ZL,lo8(sprites)	
    7b12:	e0 e1       	ldi	r30, 0x10	; 16
	ldi ZH,hi8(sprites)	
    7b14:	f5 e0       	ldi	r31, 0x05	; 5
	add ZL,r0
    7b16:	e0 0d       	add	r30, r0
	adc ZH,r1
    7b18:	f1 1d       	adc	r31, r1

	ldd r16,Z+sprFlags
    7b1a:	03 81       	ldd	r16, Z+3	; 0x03

	;8x16 multiply
	ldd r24,Z+sprTileIndex
    7b1c:	82 81       	ldd	r24, Z+2	; 0x02
	ldi r30,TILE_WIDTH*TILE_HEIGHT
    7b1e:	e0 e4       	ldi	r30, 0x40	; 64
	mul r24,r30
    7b20:	8e 9f       	mul	r24, r30
	movw r26,r0
    7b22:	d0 01       	movw	r26, r0
	
	;get tile bank addr
	ldi r25,4*2
    7b24:	98 e0       	ldi	r25, 0x08	; 8
	mul r16,r25
    7b26:	09 9f       	mul	r16, r25
	ldi YL,lo8(sprites_tile_banks)	
    7b28:	c4 ea       	ldi	r28, 0xA4	; 164
	ldi YH,hi8(sprites_tile_banks)	
    7b2a:	dc e0       	ldi	r29, 0x0C	; 12
	clr r0
    7b2c:	00 24       	eor	r0, r0
	add YL,r1
    7b2e:	c1 0d       	add	r28, r1
	adc YH,r0		
    7b30:	d0 1d       	adc	r29, r0
	ldd ZL,Y+0
    7b32:	e8 81       	ld	r30, Y
	ldd ZH,Y+1
    7b34:	f9 81       	ldd	r31, Y+1	; 0x01
	add ZL,r26	;tile data src
    7b36:	ea 0f       	add	r30, r26
	adc ZH,r27
    7b38:	fb 1f       	adc	r31, r27
	
	;dest=ram_tiles+(bt*TILE_HEIGHT*TILE_WIDTH)
	ldi XL,lo8(ram_tiles)	
    7b3a:	a0 e5       	ldi	r26, 0x50	; 80
	ldi XH,hi8(ram_tiles)
    7b3c:	b5 e0       	ldi	r27, 0x05	; 5
	ldi r25,TILE_WIDTH*TILE_HEIGHT
    7b3e:	90 e4       	ldi	r25, 0x40	; 64
	mul r22,r25
    7b40:	69 9f       	mul	r22, r25
	add XL,r0
    7b42:	a0 0d       	add	r26, r0
	adc XH,r1
    7b44:	b1 1d       	adc	r27, r1
			srcXdiff=destXdiff;
			src+=destXdiff;
		}
	}
	*/
	clr r1
    7b46:	11 24       	eor	r1, r1
	clr YH		;hi8(srcXdiff)
    7b48:	dd 27       	eor	r29, r29

	cpi r20,0	
    7b4a:	40 30       	cpi	r20, 0x00	; 0
	brne x_2nd_tile
    7b4c:	51 f4       	brne	.+20     	; 0x7b62 <x_2nd_tile>
	
	add XL,r18	;dest+=dx
    7b4e:	a2 0f       	add	r26, r18
	adc XH,r1
    7b50:	b1 1d       	adc	r27, r1
	mov r24,r18	;destXdiff=dx
    7b52:	82 2f       	mov	r24, r18
	mov YL,r18	;srcXdiff=dx
    7b54:	c2 2f       	mov	r28, r18

	sbrs r16,SPRITE_FLIP_X_BIT
    7b56:	00 ff       	sbrs	r16, 0
	rjmp x_check_end
    7b58:	11 c0       	rjmp	.+34     	; 0x7b7c <x_check_end>

	adiw ZL,(TILE_WIDTH-1)	;src+=7
    7b5a:	37 96       	adiw	r30, 0x07	; 7
	ldi YL,TILE_WIDTH*2		;srcXdiff=((TILE_WIDTH*2)-dx);
    7b5c:	c0 e1       	ldi	r28, 0x10	; 16
	sub YL,r18	
    7b5e:	c2 1b       	sub	r28, r18
	rjmp x_check_end
    7b60:	0d c0       	rjmp	.+26     	; 0x7b7c <x_check_end>

00007b62 <x_2nd_tile>:

x_2nd_tile:
	ldi r24,TILE_WIDTH
    7b62:	88 e0       	ldi	r24, 0x08	; 8
	sub r24,r18		;8-DX = xdiff for dest
    7b64:	82 1b       	sub	r24, r18

	sbrc r16,SPRITE_FLIP_X_BIT
    7b66:	00 fd       	sbrc	r16, 0
	rjmp x2_flip_x
    7b68:	04 c0       	rjmp	.+8      	; 0x7b72 <x2_flip_x>

	mov YL,r24		;srcXdiff=destXdiff;
    7b6a:	c8 2f       	mov	r28, r24
	add ZL,r24		;src+=destXdiff;
    7b6c:	e8 0f       	add	r30, r24
	adc ZH,r1	
    7b6e:	f1 1d       	adc	r31, r1
	rjmp x_check_end
    7b70:	05 c0       	rjmp	.+10     	; 0x7b7c <x_check_end>

00007b72 <x2_flip_x>:

x2_flip_x:
	ldi YL,TILE_WIDTH
    7b72:	c8 e0       	ldi	r28, 0x08	; 8
	add YL,r18		;srcXdiff=TILE_WIDTH+dx;	
    7b74:	c2 0f       	add	r28, r18
	add ZL,r18		;src+=dx;
    7b76:	e2 0f       	add	r30, r18
	adc ZH,r1
    7b78:	f1 1d       	adc	r31, r1
	sbiw ZL,1		;src--;
    7b7a:	31 97       	sbiw	r30, 0x01	; 1

00007b7c <x_check_end>:
		}else{
			src+=(ydiff*TILE_WIDTH);
		}
	}
	*/
	cpi r21,0
    7b7c:	50 30       	cpi	r21, 0x00	; 0
	brne y_2nd_tile
    7b7e:	51 f4       	brne	.+20     	; 0x7b94 <y_2nd_tile>

	ldi r25,TILE_WIDTH	;dest+=(dy*TILE_WIDTH)
    7b80:	98 e0       	ldi	r25, 0x08	; 8
	mul r25,r19			
    7b82:	93 9f       	mul	r25, r19
	add XL,r0
    7b84:	a0 0d       	add	r26, r0
	adc XH,r1
    7b86:	b1 1d       	adc	r27, r1

	mov r25,r19			;ydiff=dy
    7b88:	93 2f       	mov	r25, r19

	//sbrc r16,SPRITE_FLIP_Y_BIT
	//adiw ZL,(TILE_WIDTH*(TILE_HEIGHT-1))

	sbrc r16,SPRITE_FLIP_Y_BIT
    7b8a:	01 fd       	sbrc	r16, 1
	subi ZL,lo8(-(TILE_WIDTH*(TILE_HEIGHT-1)));src+=(TILE_WIDTH*(TILE_HEIGHT-1));
    7b8c:	e8 5c       	subi	r30, 0xC8	; 200
	sbrc r16,SPRITE_FLIP_Y_BIT
    7b8e:	01 fd       	sbrc	r16, 1
	sbci ZH,hi8(-(TILE_WIDTH*(TILE_HEIGHT-1)))
    7b90:	ff 4f       	sbci	r31, 0xFF	; 255


	rjmp y_check_end
    7b92:	0a c0       	rjmp	.+20     	; 0x7ba8 <y_check_end>

00007b94 <y_2nd_tile>:

y_2nd_tile:
	ldi r25,TILE_HEIGHT	;ydiff=(TILE_HEIGHT-dy)
    7b94:	98 e0       	ldi	r25, 0x08	; 8
	sub r25,r19	
    7b96:	93 1b       	sub	r25, r19
	
	mov r22,r19			;temp=dy-1
    7b98:	63 2f       	mov	r22, r19
	dec r22
    7b9a:	6a 95       	dec	r22
	sbrs r16,SPRITE_FLIP_Y_BIT
    7b9c:	01 ff       	sbrs	r16, 1
	mov r22,r25			;temp=ydiff
    7b9e:	69 2f       	mov	r22, r25

	ldi r21,TILE_WIDTH	;src+=(temp*TILE_WIDTH);
    7ba0:	58 e0       	ldi	r21, 0x08	; 8
	mul r21,r22
    7ba2:	56 9f       	mul	r21, r22
	add ZL,r0
    7ba4:	e0 0d       	add	r30, r0
	adc ZH,r1	
    7ba6:	f1 1d       	adc	r31, r1

00007ba8 <y_check_end>:
y_check_end:	
	
	//if(flags&SPRITE_FLIP_X){
	//	step=-1;
	//}
	ser r22		;step=-1
    7ba8:	6f ef       	ldi	r22, 0xFF	; 255
	ser r23
    7baa:	7f ef       	ldi	r23, 0xFF	; 255
	sbrs r16,SPRITE_FLIP_X_BIT
    7bac:	00 ff       	sbrs	r16, 0
	ldi r22,1	;step=1
    7bae:	61 e0       	ldi	r22, 0x01	; 1
	sbrs r16,SPRITE_FLIP_X_BIT
    7bb0:	00 ff       	sbrs	r16, 0
	clr r23
    7bb2:	77 27       	eor	r23, r23

	//if(flags&SPRITE_FLIP_Y){
	//	srcXdiff-=(TILE_WIDTH*2);
	//}
	sbrc r16,SPRITE_FLIP_Y_BIT
    7bb4:	01 fd       	sbrc	r16, 1
	sbiw YL,(TILE_WIDTH*2)
    7bb6:	60 97       	sbiw	r28, 0x10	; 16
	;r24	= destXdiff
	;r25	= ydiff
	;X		= dest
	;Y		= srcXdiff
	;Z		= src
	clr r1
    7bb8:	11 24       	eor	r1, r1
	ldi r19,TRANSLUCENT_COLOR
    7bba:	3e ef       	ldi	r19, 0xFE	; 254

	ldi r21,TILE_HEIGHT
    7bbc:	58 e0       	ldi	r21, 0x08	; 8
	sub r21,r25 	;yspan=(TILE_HEIGHT-ydiff)
    7bbe:	59 1b       	sub	r21, r25

00007bc0 <y_loop>:

y_loop:
	ldi r20,TILE_WIDTH
    7bc0:	48 e0       	ldi	r20, 0x08	; 8
	sub r20,r24 	;xspan=(TILE_WIDTH-destXdiff)
    7bc2:	48 1b       	sub	r20, r24

00007bc4 <x_loop>:

x_loop:
	lpm r18,Z		;px=pgm_read_byte(src);
    7bc4:	24 91       	lpm	r18, Z
	cpse r18,r19	;if(px!=TRANSLUCENT_COLOR)
    7bc6:	23 13       	cpse	r18, r19
	st X,r18		;*dest=px;
    7bc8:	2c 93       	st	X, r18
	adiw XL,1
    7bca:	11 96       	adiw	r26, 0x01	; 1
	add ZL,r22		;src+=step;
    7bcc:	e6 0f       	add	r30, r22
	adc ZH,r23
    7bce:	f7 1f       	adc	r31, r23
	dec r20
    7bd0:	4a 95       	dec	r20
	brne x_loop
    7bd2:	c1 f7       	brne	.-16     	; 0x7bc4 <x_loop>

	add ZL,YL		;src+=srcXdiff
    7bd4:	ec 0f       	add	r30, r28
	adc ZH,YH
    7bd6:	fd 1f       	adc	r31, r29
	add XL,r24		;dest+=destXdiff
    7bd8:	a8 0f       	add	r26, r24
	adc XH,r1
    7bda:	b1 1d       	adc	r27, r1
	dec r21
    7bdc:	5a 95       	dec	r21
	brne y_loop
    7bde:	81 f7       	brne	.-32     	; 0x7bc0 <y_loop>


	pop YH
    7be0:	df 91       	pop	r29
	pop YL
    7be2:	cf 91       	pop	r28
	pop r17
    7be4:	1f 91       	pop	r17
	pop r16
    7be6:	0f 91       	pop	r16
	ret
    7be8:	08 95       	ret

00007bea <__vector_13>:

;***************************************************************************
; Main Video sync interrupt
;***************************************************************************
TIMER1_COMPA_vect:
	push r0
    7bea:	0f 92       	push	r0
	push r1
    7bec:	1f 92       	push	r1
	push ZL;2
    7bee:	ef 93       	push	r30
	push ZH;2
    7bf0:	ff 93       	push	r31
	
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    7bf2:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    7bf4:	ef 93       	push	r30

	;Read timer offset since rollover to remove cycles 
	;and conpensate for interrupt latency.
	;This is nessesary to eliminate frame jitter.
	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    7bf6:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,0x12 ;MIN_INT_LATENCY
    7bfa:	e2 51       	subi	r30, 0x12	; 18

	ldi ZH,1
    7bfc:	f1 e0       	ldi	r31, 0x01	; 1

00007bfe <latency_loop>:
latency_loop:
	cp ZL,ZH
    7bfe:	ef 17       	cp	r30, r31
	brlo .		;advance PC to next instruction	
    7c00:	00 f0       	brcs	.+0      	; 0x7c02 <latency_loop+0x4>
	inc ZH
    7c02:	f3 95       	inc	r31
	cpi ZH,10
    7c04:	fa 30       	cpi	r31, 0x0A	; 10
	brlo latency_loop
    7c06:	d8 f3       	brcs	.-10     	; 0x7bfe <latency_loop>
	jmp .
    7c08:	0c 94 06 3e 	jmp	0x7c0c	; 0x7c0c <latency_loop+0xe>
	
	;decrement sync pulse counter
	lds ZL,sync_pulse
    7c0c:	e0 91 b7 0c 	lds	r30, 0x0CB7
	dec ZL
    7c10:	ea 95       	dec	r30
	sts sync_pulse,ZL
    7c12:	e0 93 b7 0c 	sts	0x0CB7, r30

	;process sync phases
	lds ZH,sync_phase
    7c16:	f0 91 b6 0c 	lds	r31, 0x0CB6
	sbrc ZH,0
    7c1a:	f0 fd       	sbrc	r31, 0
	rjmp sync_hsync
    7c1c:	57 c0       	rjmp	.+174    	; 0x7ccc <sync_hsync>
; Note: TCNT1 should be equal to 
; 0x68 on the cbi
; 0xAC on the sbi
; pulse duration: 68 clocks
;***************************************************		
	cpi ZL,SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    7c1e:	ec 30       	cpi	r30, 0x0C	; 12
	brlo sync_eq
    7c20:	98 f0       	brcs	.+38     	; 0x7c48 <sync_eq>

	;Set HDRIVE to double rate during VSYNC
	ldi ZH,hi8(HDRIVE_CL_TWICE)
    7c22:	f3 e0       	ldi	r31, 0x03	; 3
	sts _SFR_MEM_ADDR(OCR1AH),ZH	
    7c24:	f0 93 89 00 	sts	0x0089, r31
	ldi ZH,lo8(HDRIVE_CL_TWICE)
    7c28:	fd e8       	ldi	r31, 0x8D	; 141
	sts _SFR_MEM_ADDR(OCR1AL),ZH
    7c2a:	f0 93 88 00 	sts	0x0088, r31

	bst ZL,0
    7c2e:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0x68
    7c30:	28 98       	cbi	0x05, 0	; 5
	brtc sync_pre_eq_no_sound_update
    7c32:	26 f4       	brtc	.+8      	; 0x7c3c <sync_pre_eq_no_sound_update>
	ldi ZL,1	;indicate update_sound to generate the SBI for pre-eq
    7c34:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    7c36:	0e 94 ed 3e 	call	0x7dda	; 0x7dda <update_sound>
	rjmp sync_end
    7c3a:	b7 c0       	rjmp	.+366    	; 0x7daa <sync_end>

00007c3c <sync_pre_eq_no_sound_update>:

sync_pre_eq_no_sound_update:
	WAIT ZL,64
    7c3c:	e5 e1       	ldi	r30, 0x15	; 21
    7c3e:	ea 95       	dec	r30
    7c40:	f1 f7       	brne	.-4      	; 0x7c3e <sync_pre_eq_no_sound_update+0x2>
    7c42:	00 00       	nop
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    7c44:	28 9a       	sbi	0x05, 0	; 5
		
	rjmp sync_end
    7c46:	b1 c0       	rjmp	.+354    	; 0x7daa <sync_end>

00007c48 <sync_eq>:
; 0x68  on the cbi
; 0x36E on the sbi
; low pulse duration: 774 clocks
;***************************************************	
sync_eq:
	cpi ZL,SYNC_POST_EQ_PULSES
    7c48:	e6 30       	cpi	r30, 0x06	; 6
	brlo sync_post_eq
    7c4a:	38 f1       	brcs	.+78     	; 0x7c9a <sync_post_eq>

	rjmp .
    7c4c:	00 c0       	rjmp	.+0      	; 0x7c4e <sync_eq+0x6>
	rjmp .
    7c4e:	00 c0       	rjmp	.+0      	; 0x7c50 <sync_eq+0x8>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    7c50:	28 98       	cbi	0x05, 0	; 5

	bst ZL,0
    7c52:	e0 fb       	bst	r30, 0
	ldi ZL,4
    7c54:	e4 e0       	ldi	r30, 0x04	; 4
	brtc sync_eq_skip
    7c56:	16 f4       	brtc	.+4      	; 0x7c5c <sync_eq_skip>
	
	call update_sound
    7c58:	0e 94 ed 3e 	call	0x7dda	; 0x7dda <update_sound>

00007c5c <sync_eq_skip>:
	;enable interupt to bring back sync 
	;level instead of wasting cycles
	;in a big wait loop

 	;clear interrupt flag
	ldi ZL,(1<<OCF1B)
    7c5c:	e4 e0       	ldi	r30, 0x04	; 4
	sts _SFR_MEM_ADDR(TIFR1),ZL 
    7c5e:	e0 93 36 00 	sts	0x0036, r30
	
	;generate interrupt on match
	;for timer1 compare unit b
	ldi ZL,(1<<OCIE1A)+(1<<OCIE1B)
    7c62:	e6 e0       	ldi	r30, 0x06	; 6
	sts _SFR_MEM_ADDR(TIMSK1),ZL
    7c64:	e0 93 6f 00 	sts	0x006F, r30

	rjmp sync_end
    7c68:	a0 c0       	rjmp	.+320    	; 0x7daa <sync_end>

00007c6a <__vector_14>:
; during VSYNC EQ pulses to recover ~5000 cycles per field
; with interrupt latency conpensation
; 37 cycles
;**********************************************************	
TIMER1_COMPB_vect:
	push ZL
    7c6a:	ef 93       	push	r30
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    7c6c:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    7c6e:	ef 93       	push	r30

	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    7c70:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,62+31 ;0x5D ;MIN_INT_LATENCY
    7c74:	ed 55       	subi	r30, 0x5D	; 93

	cpi ZL,1
    7c76:	e1 30       	cpi	r30, 0x01	; 1
	brlo .		;advance PC to next instruction
    7c78:	00 f0       	brcs	.+0      	; 0x7c7a <__vector_14+0x10>

	cpi ZL,2
    7c7a:	e2 30       	cpi	r30, 0x02	; 2
	brlo .		;advance PC to next instruction
    7c7c:	00 f0       	brcs	.+0      	; 0x7c7e <__vector_14+0x14>

	cpi ZL,3
    7c7e:	e3 30       	cpi	r30, 0x03	; 3
	brlo .		;advance PC to next instruction
    7c80:	00 f0       	brcs	.+0      	; 0x7c82 <__vector_14+0x18>

	cpi ZL,4
    7c82:	e4 30       	cpi	r30, 0x04	; 4
	brlo .		;advance PC to next instruction
    7c84:	00 f0       	brcs	.+0      	; 0x7c86 <__vector_14+0x1c>

	cpi ZL,5
    7c86:	e5 30       	cpi	r30, 0x05	; 5
	brlo .		;advance PC to next instruction
    7c88:	00 f0       	brcs	.+0      	; 0x7c8a <__vector_14+0x20>

 	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;68
    7c8a:	28 9a       	sbi	0x05, 0	; 5
	ldi ZL,(1<<OCIE1A) ; disable OCIE1B 
    7c8c:	e2 e0       	ldi	r30, 0x02	; 2
	sts _SFR_MEM_ADDR(TIMSK1),ZL ;stop generate interrupt on match
    7c8e:	e0 93 6f 00 	sts	0x006F, r30
	
	;restore flags
	pop ZL
    7c92:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL	
    7c94:	ef bf       	out	0x3f, r30	; 63
	pop ZL
    7c96:	ef 91       	pop	r30
	reti
    7c98:	18 95       	reti

00007c9a <sync_post_eq>:
; 0x68 on the cbi
; 0xAC on the sbi
; pulse cycles: 68 clocks
;***************************************************	
sync_post_eq:	
	rjmp .
    7c9a:	00 c0       	rjmp	.+0      	; 0x7c9c <sync_post_eq+0x2>

	bst ZL,0
    7c9c:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    7c9e:	28 98       	cbi	0x05, 0	; 5
	brtc sync_post_eq_no_sound_update
    7ca0:	26 f4       	brtc	.+8      	; 0x7caa <sync_post_eq_no_sound_update>
	ldi ZL,1	
    7ca2:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    7ca4:	0e 94 ed 3e 	call	0x7dda	; 0x7dda <update_sound>
	rjmp sync_pre_eq_cont
    7ca8:	05 c0       	rjmp	.+10     	; 0x7cb4 <sync_pre_eq_cont>

00007caa <sync_post_eq_no_sound_update>:

sync_post_eq_no_sound_update:
	WAIT ZL,64
    7caa:	e5 e1       	ldi	r30, 0x15	; 21
    7cac:	ea 95       	dec	r30
    7cae:	f1 f7       	brne	.-4      	; 0x7cac <sync_post_eq_no_sound_update+0x2>
    7cb0:	00 00       	nop

	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN 
    7cb2:	28 9a       	sbi	0x05, 0	; 5

00007cb4 <sync_pre_eq_cont>:

sync_pre_eq_cont:	
	;check if it's the last vsync pulse
	lds ZL,sync_pulse
    7cb4:	e0 91 b7 0c 	lds	r30, 0x0CB7
	cpi ZL,0
    7cb8:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2 ;skip rjmp
    7cba:	09 f0       	breq	.+2      	; 0x7cbe <sync_pre_eq_cont+0xa>
	rjmp sync_end
    7cbc:	76 c0       	rjmp	.+236    	; 0x7daa <sync_end>
	
	;update sync flags
	ldi ZL,SYNC_HSYNC_PULSES
    7cbe:	ed ef       	ldi	r30, 0xFD	; 253
	sts sync_pulse,ZL
    7cc0:	e0 93 b7 0c 	sts	0x0CB7, r30
	ldi ZL,1
    7cc4:	e1 e0       	ldi	r30, 0x01	; 1
	sts sync_phase,ZL
    7cc6:	e0 93 b6 0c 	sts	0x0CB6, r30
	
	rjmp sync_end
    7cca:	6f c0       	rjmp	.+222    	; 0x7daa <sync_end>

00007ccc <sync_hsync>:
; 0xF0 on the sbi
; pulse duration: 136 clocks
;***************************************************	

	; Set HDRIVE to normal rate
	ldi ZL,hi8(HDRIVE_CL)
    7ccc:	e7 e0       	ldi	r30, 0x07	; 7
	sts _SFR_MEM_ADDR(OCR1AH),ZL	
    7cce:	e0 93 89 00 	sts	0x0089, r30
	ldi ZL,lo8(HDRIVE_CL)
    7cd2:	eb e1       	ldi	r30, 0x1B	; 27
	sts _SFR_MEM_ADDR(OCR1AL),ZL
    7cd4:	e0 93 88 00 	sts	0x0088, r30
	rjmp .
    7cd8:	00 c0       	rjmp	.+0      	; 0x7cda <sync_hsync+0xe>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    7cda:	28 98       	cbi	0x05, 0	; 5
	
	ldi ZL,2	;indicate update_sound to generate the SBI for pre-eq
    7cdc:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    7cde:	00 c0       	rjmp	.+0      	; 0x7ce0 <sync_hsync+0x14>
	call update_sound
    7ce0:	0e 94 ed 3e 	call	0x7dda	; 0x7dda <update_sound>

	;check if we have reached the first line to render
	ldi ZH,SYNC_HSYNC_PULSES
    7ce4:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    7ce6:	00 90 bd 0c 	lds	r0, 0x0CBD
	sub ZH,r0				
    7cea:	f0 19       	sub	r31, r0
	lds ZL,sync_pulse
    7cec:	e0 91 b7 0c 	lds	r30, 0x0CB7
	cp ZL,ZH
    7cf0:	ef 17       	cp	r30, r31
	brsh no_render
    7cf2:	d0 f4       	brcc	.+52     	; 0x7d28 <no_render>

	ldi ZH,SYNC_HSYNC_PULSES
    7cf4:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    7cf6:	00 90 bd 0c 	lds	r0, 0x0CBD
	sub ZH,r0				
    7cfa:	f0 19       	sub	r31, r0
	lds r0,render_lines_count
    7cfc:	00 90 be 0c 	lds	r0, 0x0CBE
	sub ZH,r0			
    7d00:	f0 19       	sub	r31, r0
	cp ZL,ZH
    7d02:	ef 17       	cp	r30, r31
	brlo no_render
    7d04:	88 f0       	brcs	.+34     	; 0x7d28 <no_render>

	;push r1-r29
	ldi ZL,29
    7d06:	ed e1       	ldi	r30, 0x1D	; 29
	clr ZH
    7d08:	ff 27       	eor	r31, r31

00007d0a <push_loop>:
push_loop:
	ld r0,Z	;load value from register file
    7d0a:	00 80       	ld	r0, Z
	push r0
    7d0c:	0f 92       	push	r0
	dec ZL
    7d0e:	ea 95       	dec	r30
	brne push_loop	
    7d10:	e1 f7       	brne	.-8      	; 0x7d0a <push_loop>

	;timing compensation
	;to insure we always call the video mode 
	;routine at the same cycle	
	WAIT r16,230-(AUDIO_OUT_HSYNC_CYCLES)
    7d12:	06 e0       	ldi	r16, 0x06	; 6
    7d14:	0a 95       	dec	r16
    7d16:	f1 f7       	brne	.-4      	; 0x7d14 <push_loop+0xa>

	call VMODE_FUNC		;TCNT1=0x234
    7d18:	0e 94 b3 3a 	call	0x7566	; 0x7566 <sub_video_mode3>

	;pop r1-r29
	ldi ZL,1
    7d1c:	e1 e0       	ldi	r30, 0x01	; 1
	clr ZH
    7d1e:	ff 27       	eor	r31, r31

00007d20 <pop_loop>:
pop_loop:
	pop r0
    7d20:	0f 90       	pop	r0
	st Z+,r0 ;store value to register file
    7d22:	01 92       	st	Z+, r0
	cpi ZL,30
    7d24:	ee 31       	cpi	r30, 0x1E	; 30
	brlo pop_loop	
    7d26:	e0 f3       	brcs	.-8      	; 0x7d20 <pop_loop>

00007d28 <no_render>:

no_render:

	;check if it's the last hsync pulse and we are 
	;ready for VSYNC
	lds ZL,sync_pulse
    7d28:	e0 91 b7 0c 	lds	r30, 0x0CB7
	cpi ZL,0
    7d2c:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2
    7d2e:	09 f0       	breq	.+2      	; 0x7d32 <no_render+0xa>
	rjmp sync_end
    7d30:	3c c0       	rjmp	.+120    	; 0x7daa <sync_end>
;***************************************************
; Process VSYNC stuff
;***************************************************
	
	;push C-call registers
	push r18
    7d32:	2f 93       	push	r18
	push r19
    7d34:	3f 93       	push	r19
	push r20
    7d36:	4f 93       	push	r20
	push r21
    7d38:	5f 93       	push	r21
	push r22
    7d3a:	6f 93       	push	r22
	push r23
    7d3c:	7f 93       	push	r23
	push r24
    7d3e:	8f 93       	push	r24
	push r25
    7d40:	9f 93       	push	r25
	push r26
    7d42:	af 93       	push	r26
	push r27
    7d44:	bf 93       	push	r27

	sei ;must enable ints for re-entrant sync pulses
    7d46:	78 94       	sei
	clr r1
    7d48:	11 24       	eor	r1, r1

	;set vsync flags
	clr ZL
    7d4a:	ee 27       	eor	r30, r30
	sts sync_phase,ZL
    7d4c:	e0 93 b6 0c 	sts	0x0CB6, r30
	ldi ZL,SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    7d50:	e2 e1       	ldi	r30, 0x12	; 18
	sts sync_pulse,ZL
    7d52:	e0 93 b7 0c 	sts	0x0CB7, r30



	;increment the vsync counter
	lds r24,vsync_counter
    7d56:	80 91 c7 0c 	lds	r24, 0x0CC7
	lds r25,vsync_counter+1
    7d5a:	90 91 c8 0c 	lds	r25, 0x0CC8
	adiw r24,1
    7d5e:	01 96       	adiw	r24, 0x01	; 1
	sts vsync_counter,r24
    7d60:	80 93 c7 0c 	sts	0x0CC7, r24
	sts vsync_counter+1,r25
    7d64:	90 93 c8 0c 	sts	0x0CC8, r25


	;process user pre callback
	lds ZL,pre_vsync_user_callback+0
    7d68:	e0 91 b9 0c 	lds	r30, 0x0CB9
	lds ZH,pre_vsync_user_callback+1
    7d6c:	f0 91 ba 0c 	lds	r31, 0x0CBA
	cp  ZL,r1
    7d70:	e1 15       	cp	r30, r1
	cpc ZH,r1
    7d72:	f1 05       	cpc	r31, r1
	breq .+2 
    7d74:	09 f0       	breq	.+2      	; 0x7d78 <no_render+0x50>
	icall
    7d76:	09 95       	icall

	;refresh buttons states
	#if CONTROLLERS_VSYNC_READ == 1
		call ReadControllers
    7d78:	0e 94 8c 40 	call	0x8118	; 0x8118 <ReadControllers>
	#endif 
	
	;invoke stuff the video mode may have to do
	call VideoModeVsync	
    7d7c:	0e 94 de 4e 	call	0x9dbc	; 0x9dbc <VideoModeVsync>

	;process music (music, envelopes, etc)
	call process_music
    7d80:	0e 94 e7 3e 	call	0x7dce	; 0x7dce <process_music>
	clr r1
    7d84:	11 24       	eor	r1, r1

	;process user post callback
	lds ZL,post_vsync_user_callback+0
    7d86:	e0 91 bb 0c 	lds	r30, 0x0CBB
	lds ZH,post_vsync_user_callback+1
    7d8a:	f0 91 bc 0c 	lds	r31, 0x0CBC
	cp  ZL,r1
    7d8e:	e1 15       	cp	r30, r1
	cpc ZH,r1
    7d90:	f1 05       	cpc	r31, r1
	breq .+2 
    7d92:	09 f0       	breq	.+2      	; 0x7d96 <no_render+0x6e>
	icall
    7d94:	09 95       	icall
	#if SNES_MOUSE == 1
		call ReadMouseExtendedData
		call ProcessMouseMovement
	#endif

	pop r27
    7d96:	bf 91       	pop	r27
	pop r26
    7d98:	af 91       	pop	r26
	pop r25
    7d9a:	9f 91       	pop	r25
	pop r24
    7d9c:	8f 91       	pop	r24
	pop r23
    7d9e:	7f 91       	pop	r23
	pop r22
    7da0:	6f 91       	pop	r22
	pop r21
    7da2:	5f 91       	pop	r21
	pop r20
    7da4:	4f 91       	pop	r20
	pop r19
    7da6:	3f 91       	pop	r19
	pop r18
    7da8:	2f 91       	pop	r18

00007daa <sync_end>:
	
sync_end:	
	;restore flags
	pop ZL
    7daa:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL
    7dac:	ef bf       	out	0x3f, r30	; 63
	
	pop ZH
    7dae:	ff 91       	pop	r31
	pop ZL
    7db0:	ef 91       	pop	r30
	pop r1
    7db2:	1f 90       	pop	r1
	pop r0
    7db4:	0f 90       	pop	r0
	reti
    7db6:	18 95       	reti

00007db8 <hsync_pulse>:
; 0xf0 on the sbi 
;	
; Destroys: ZL (r30)
;*************************************************
hsync_pulse:
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    7db8:	28 98       	cbi	0x05, 0	; 5
	ldi ZL,2
    7dba:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    7dbc:	00 c0       	rjmp	.+0      	; 0x7dbe <hsync_pulse+0x6>
	call update_sound
    7dbe:	0e 94 ed 3e 	call	0x7dda	; 0x7dda <update_sound>

	lds ZL,sync_pulse
    7dc2:	e0 91 b7 0c 	lds	r30, 0x0CB7
	dec ZL
    7dc6:	ea 95       	dec	r30
	sts sync_pulse,ZL
    7dc8:	e0 93 b7 0c 	sts	0x0CB7, r30

	ret
    7dcc:	08 95       	ret

00007dce <process_music>:
; NOTE: registers r18-r27 are already saved by the caller
;***********************
process_music:
	
#if ENABLE_MIXER==1
	lds ZL,sound_enabled
    7dce:	e0 91 cf 0c 	lds	r30, 0x0CCF
	sbrc ZL,0
    7dd2:	e0 fd       	sbrc	r30, 0
 	call ProcessMusic
    7dd4:	0e 94 13 44 	call	0x8826	; 0x8826 <ProcessMusic>
#endif

	ret
    7dd8:	08 95       	ret

00007dda <update_sound>:

; Destroys: Z,r0,r1
; cycles: 212+
;****************************
update_sound:
	push r16
    7dda:	0f 93       	push	r16
	push r17
    7ddc:	1f 93       	push	r17
	push r18
    7dde:	2f 93       	push	r18
	push r28
    7de0:	cf 93       	push	r28
	push r29
    7de2:	df 93       	push	r29

	mov r18,ZL
    7de4:	2e 2f       	mov	r18, r30

	;channel 1 
	lds r16,tr1_step_lo
    7de6:	00 91 d1 0c 	lds	r16, 0x0CD1
	lds r17,tr1_pos_frac
    7dea:	10 91 d3 0c 	lds	r17, 0x0CD3
	add	r17,r16	;add step to fractional part of sample pos
    7dee:	10 0f       	add	r17, r16
	lds r16,tr1_step_hi	
    7df0:	00 91 d2 0c 	lds	r16, 0x0CD2
	lds ZL,tr1_pos_lo
    7df4:	e0 91 d4 0c 	lds	r30, 0x0CD4
	lds ZH,tr1_pos_hi 
    7df8:	f0 91 d5 0c 	lds	r31, 0x0CD5
	adc ZL,r16	;add step to low byte of sample pos
    7dfc:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    7dfe:	04 91       	lpm	r16, Z
	sts tr1_pos_lo,ZL
    7e00:	e0 93 d4 0c 	sts	0x0CD4, r30
	sts tr1_pos_frac,r17
    7e04:	10 93 d3 0c 	sts	0x0CD3, r17
	lds r17,tr1_vol
    7e08:	10 91 d0 0c 	lds	r17, 0x0CD0
	mulsu r16,r17;(sample*mixing vol)
    7e0c:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend	
    7e0e:	00 08       	sbc	r0, r0
	mov r28,r1	;set (sample*vol>>8) to mix buffer lsb
    7e10:	c1 2d       	mov	r28, r1
	mov r29,r0	;set mix buffer msb	
    7e12:	d0 2d       	mov	r29, r0
	nop
    7e14:	00 00       	nop

;38
	
	;channel 2
	lds r16,tr2_step_lo
    7e16:	00 91 d7 0c 	lds	r16, 0x0CD7
	lds r17,tr2_pos_frac
    7e1a:	10 91 d9 0c 	lds	r17, 0x0CD9
	add	r17,r16	;add step to fractional part of sample pos
    7e1e:	10 0f       	add	r17, r16
	lds r16,tr2_step_hi	
    7e20:	00 91 d8 0c 	lds	r16, 0x0CD8
	lds ZL,tr2_pos_lo
    7e24:	e0 91 da 0c 	lds	r30, 0x0CDA
	lds ZH,tr2_pos_hi 
    7e28:	f0 91 db 0c 	lds	r31, 0x0CDB
	adc ZL,r16	;add step to low byte of sample pos
    7e2c:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    7e2e:	04 91       	lpm	r16, Z
	sts tr2_pos_lo,ZL
    7e30:	e0 93 da 0c 	sts	0x0CDA, r30
	sts tr2_pos_frac,r17
    7e34:	10 93 d9 0c 	sts	0x0CD9, r17
	lds r17,tr2_vol
    7e38:	10 91 d6 0c 	lds	r17, 0x0CD6

	;*** Video sync update ***
	sbrc r18,0								;pre-eq/post-eq sync
    7e3c:	20 fd       	sbrc	r18, 0
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    7e3e:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,0								
    7e40:	20 ff       	sbrs	r18, 0
	rjmp .
    7e42:	00 c0       	rjmp	.+0      	; 0x7e44 <update_sound+0x6a>
	;*************************

	mulsu r16,r17;(sample*mixing vol)
    7e44:	01 03       	mulsu	r16, r17
	clr r0
    7e46:	00 24       	eor	r0, r0
	sbc r0,r0	;sign extend
    7e48:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    7e4a:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb		
    7e4c:	d0 1d       	adc	r29, r0
;70
	
	;channel 3
	lds r16,tr3_step_lo
    7e4e:	00 91 dd 0c 	lds	r16, 0x0CDD
	lds r17,tr3_pos_frac
    7e52:	10 91 df 0c 	lds	r17, 0x0CDF
	add	r17,r16				;add step to fractional part of sample pos
    7e56:	10 0f       	add	r17, r16
	lds r16,tr3_step_hi	
    7e58:	00 91 de 0c 	lds	r16, 0x0CDE
	lds ZL,tr3_pos_lo
    7e5c:	e0 91 e0 0c 	lds	r30, 0x0CE0
	lds ZH,tr3_pos_hi 
    7e60:	f0 91 e1 0c 	lds	r31, 0x0CE1
	adc ZL,r16				;add step to low byte of sample pos
    7e64:	e0 1f       	adc	r30, r16
	lpm	r16,Z				;load sample
    7e66:	04 91       	lpm	r16, Z
	sts tr3_pos_lo,ZL
    7e68:	e0 93 e0 0c 	sts	0x0CE0, r30
	sts tr3_pos_frac,r17
    7e6c:	10 93 df 0c 	sts	0x0CDF, r17
	lds r17,tr3_vol
    7e70:	10 91 dc 0c 	lds	r17, 0x0CDC
	mulsu r16,r17			;(sample*mixing vol)
    7e74:	01 03       	mulsu	r16, r17
	sbc r0,r0				;sign extend
    7e76:	00 08       	sbc	r0, r0
	add r28,r1				;add (sample*vol>>8) to mix buffer lsb
    7e78:	c1 0d       	add	r28, r1
	adc r29,r0				;ajust mix buffer msb
    7e7a:	d0 1d       	adc	r29, r0
;97	

	;channel 4 - 7/15 bit LFSR 
	lds r16,tr4_barrel_lo
    7e7c:	00 91 e4 0c 	lds	r16, 0x0CE4
	lds r17,tr4_barrel_hi
    7e80:	10 91 e5 0c 	lds	r17, 0x0CE5
	lds ZL,tr4_divider
    7e84:	e0 91 e6 0c 	lds	r30, 0x0CE6
	dec ZL	
    7e88:	ea 95       	dec	r30
	brpl ch4_no_shift	
    7e8a:	92 f4       	brpl	.+36     	; 0x7eb0 <ch4_no_shift>

	lds ZH,tr4_params
    7e8c:	f0 91 e3 0c 	lds	r31, 0x0CE3
	mov ZL,ZH
    7e90:	ef 2f       	mov	r30, r31
	lsr ZL 			;keep bits7:1
    7e92:	e6 95       	lsr	r30

	mov r0,r16  ;copy barrel shifter
    7e94:	00 2e       	mov	r0, r16
	lsr r0
    7e96:	06 94       	lsr	r0
	eor r0,r16  ;xor bit0 and bit1
    7e98:	00 26       	eor	r0, r16
	bst r0,0
    7e9a:	00 fa       	bst	r0, 0
	lsr r17
    7e9c:	16 95       	lsr	r17
	ror r16
    7e9e:	07 95       	ror	r16
	bld r17,6	;15 bits mode
    7ea0:	16 f9       	bld	r17, 6
	sbrs ZH,0
    7ea2:	f0 ff       	sbrs	r31, 0
	bld r16,6	;7 bits mode
    7ea4:	06 f9       	bld	r16, 6

	sts tr4_barrel_lo,r16
    7ea6:	00 93 e4 0c 	sts	0x0CE4, r16
	sts tr4_barrel_hi,r17
    7eaa:	10 93 e5 0c 	sts	0x0CE5, r17

	rjmp ch4_end
    7eae:	03 c0       	rjmp	.+6      	; 0x7eb6 <ch4_end>

00007eb0 <ch4_no_shift>:
ch4_no_shift:
	;wait loop 21 cycles
	ldi r17,6
    7eb0:	16 e0       	ldi	r17, 0x06	; 6
	dec r17
    7eb2:	1a 95       	dec	r17
	brne .-4
    7eb4:	f1 f7       	brne	.-4      	; 0x7eb2 <ch4_no_shift+0x2>

00007eb6 <ch4_end>:
	;rjmp .
ch4_end:

	sts tr4_divider,ZL
    7eb6:	e0 93 e6 0c 	sts	0x0CE6, r30
	ldi r17,0x80 ;-128
    7eba:	10 e8       	ldi	r17, 0x80	; 128
	
	;*** Video sync update ***
	sbrc r18,1								;hsync
    7ebc:	21 fd       	sbrc	r18, 1
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xF0
    7ebe:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,1								
    7ec0:	21 ff       	sbrs	r18, 1
	rjmp .
    7ec2:	00 c0       	rjmp	.+0      	; 0x7ec4 <ch4_end+0xe>
	;*************************
	
	sbrc r16,0
    7ec4:	00 fd       	sbrc	r16, 0
	ldi r17,0x7f ;+127
    7ec6:	1f e7       	ldi	r17, 0x7F	; 127
	
	lds r16,tr4_vol
    7ec8:	00 91 e2 0c 	lds	r16, 0x0CE2

	mulsu r17,r16;(sample*mixing vol)
    7ecc:	10 03       	mulsu	r17, r16
	sbc r0,r0	;sign extend
    7ece:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    7ed0:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb
    7ed2:	d0 1d       	adc	r29, r0
;142
#if SOUND_CHANNEL_5_ENABLE==1
	;channel 5 PCM -- 45 cycles

	;add fractional part
	lds r16,tr5_pos_frac
    7ed4:	00 91 eb 0c 	lds	r16, 0x0CEB
	lds r17,tr5_step_lo 
    7ed8:	10 91 e9 0c 	lds	r17, 0x0CE9
	add r16,r17
    7edc:	01 0f       	add	r16, r17
	sts tr5_pos_frac,r16
    7ede:	00 93 eb 0c 	sts	0x0CEB, r16

	;add lo
	lds ZL,tr5_pos_lo
    7ee2:	e0 91 ec 0c 	lds	r30, 0x0CEC
	lds r17,tr5_step_hi 
    7ee6:	10 91 ea 0c 	lds	r17, 0x0CEA
	adc ZL,r17
    7eea:	e1 1f       	adc	r30, r17

	;add hi
	lds ZH,tr5_pos_hi
    7eec:	f0 91 ed 0c 	lds	r31, 0x0CED
	ldi r16,0
    7ef0:	00 e0       	ldi	r16, 0x00	; 0
	adc ZH,r16
    7ef2:	f0 1f       	adc	r31, r16

	movw r16,ZL
    7ef4:	8f 01       	movw	r16, r30
	lds r0,tr5_loop_len_lo
    7ef6:	00 90 ee 0c 	lds	r0, 0x0CEE
	lds r1,tr5_loop_len_hi	
    7efa:	10 90 ef 0c 	lds	r1, 0x0CEF
	sub r16,r0
    7efe:	00 19       	sub	r16, r0
	sbc r17,r1
    7f00:	11 09       	sbc	r17, r1
	lds r0,tr5_loop_end_lo
    7f02:	00 90 f0 0c 	lds	r0, 0x0CF0
	lds r1,tr5_loop_end_hi
    7f06:	10 90 f1 0c 	lds	r1, 0x0CF1

	cp ZL,r0
    7f0a:	e0 15       	cp	r30, r0
	cpc ZH,r1
    7f0c:	f1 05       	cpc	r31, r1
	brlo .+2
    7f0e:	08 f0       	brcs	.+2      	; 0x7f12 <ch4_end+0x5c>
	movw ZL,r16
    7f10:	f8 01       	movw	r30, r16

	sts tr5_pos_lo,ZL
    7f12:	e0 93 ec 0c 	sts	0x0CEC, r30
	sts tr5_pos_hi,ZH
    7f16:	f0 93 ed 0c 	sts	0x0CED, r31

	lpm	r16,Z	;load sample
    7f1a:	04 91       	lpm	r16, Z
	lds r17,tr5_vol
    7f1c:	10 91 e8 0c 	lds	r17, 0x0CE8

	mulsu r16,r17;(sample*mixing vol)
    7f20:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend
    7f22:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    7f24:	c1 0d       	add	r28, r1
	adc r29,r0	;adjust mix buffer msb	
    7f26:	d0 1d       	adc	r29, r0
#endif
	
	;final processing

	;clip
	clr r0
    7f28:	00 24       	eor	r0, r0
	cpi r28,128	;> 127?
    7f2a:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0	
    7f2c:	d0 05       	cpc	r29, r0
	brlt .+2
    7f2e:	0c f0       	brlt	.+2      	; 0x7f32 <ch4_end+0x7c>
	ldi r28,127
    7f30:	cf e7       	ldi	r28, 0x7F	; 127
	
	dec r0
    7f32:	0a 94       	dec	r0
	cpi r28,-128; <-128?
    7f34:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0xff
    7f36:	d0 05       	cpc	r29, r0
	brge .+2
    7f38:	0c f4       	brge	.+2      	; 0x7f3c <ch4_end+0x86>
	ldi r28,-128
    7f3a:	c0 e8       	ldi	r28, 0x80	; 128

	subi r28,128	;convert to unsigned		
    7f3c:	c0 58       	subi	r28, 0x80	; 128
	sts _SFR_MEM_ADDR(OCR2A),r28 ;output sound byte
    7f3e:	c0 93 b3 00 	sts	0x00B3, r28

00007f42 <update_sound_end>:
#endif


update_sound_end:

	pop r29
    7f42:	df 91       	pop	r29
	pop r28
    7f44:	cf 91       	pop	r28
	pop r18
    7f46:	2f 91       	pop	r18
	pop r17
    7f48:	1f 91       	pop	r17
	pop r16
    7f4a:	0f 91       	pop	r16
	
	ret
    7f4c:	08 95       	ret

00007f4e <SetSpritesTileTable>:
; C-callable
; r25:r24=pointer to sprites pixel data.
;*****************************
.section .text.SetSpritesTileTable
SetSpritesTileTable:
	sts sprites_tile_banks,r24
    7f4e:	80 93 a4 0c 	sts	0x0CA4, r24
	sts sprites_tile_banks+1,r25
    7f52:	90 93 a5 0c 	sts	0x0CA5, r25
	ret
    7f56:	08 95       	ret

00007f58 <ClearVram>:
; C-callable
;************************************
.section .text.ClearVram
ClearVram:
	//init vram		
	ldi r30,lo8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    7f58:	e0 e0       	ldi	r30, 0x00	; 0
	ldi r31,hi8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    7f5a:	f4 e0       	ldi	r31, 0x04	; 4

	ldi XL,lo8(vram)
    7f5c:	a0 e0       	ldi	r26, 0x00	; 0
	ldi XH,hi8(vram)
    7f5e:	b1 e0       	ldi	r27, 0x01	; 1

	ldi r22,RAM_TILES_COUNT
    7f60:	6c e1       	ldi	r22, 0x1C	; 28

00007f62 <fill_vram_loop>:

fill_vram_loop:
	st X+,r22
    7f62:	6d 93       	st	X+, r22
	sbiw r30,1
    7f64:	31 97       	sbiw	r30, 0x01	; 1
	brne fill_vram_loop
    7f66:	e9 f7       	brne	.-6      	; 0x7f62 <fill_vram_loop>

	clr r1
    7f68:	11 24       	eor	r1, r1

	ret
    7f6a:	08 95       	ret

00007f6c <SetTile>:
.section .text.SetTile
SetTile:
#if SCROLLING == 1
	;index formula is vram[((y>>3)*256)+8x+(y&7)]
	
	andi r24,0x1f
    7f6c:	8f 71       	andi	r24, 0x1F	; 31
	mov r23,r22
    7f6e:	76 2f       	mov	r23, r22
	lsr r22
    7f70:	66 95       	lsr	r22
	lsr r22
    7f72:	66 95       	lsr	r22
	lsr r22			;y>>3
    7f74:	66 95       	lsr	r22
	ldi r18,8		
    7f76:	28 e0       	ldi	r18, 0x08	; 8
	mul r24,r18		;x*8
    7f78:	82 9f       	mul	r24, r18
	movw XL,r0
    7f7a:	d0 01       	movw	r26, r0
	subi XL,lo8(-(vram))
    7f7c:	a0 50       	subi	r26, 0x00	; 0
	sbci XH,hi8(-(vram))
    7f7e:	bf 4f       	sbci	r27, 0xFF	; 255
	add XH,r22		;vram+((y>>3)*256)
    7f80:	b6 0f       	add	r27, r22
	andi r23,7		;y&7	
    7f82:	77 70       	andi	r23, 0x07	; 7
	add XL,r23
    7f84:	a7 0f       	add	r26, r23
						
	subi r20,~(RAM_TILES_COUNT-1)	
    7f86:	44 5e       	subi	r20, 0xE4	; 228
	st X,r20
    7f88:	4c 93       	st	X, r20

	clr r1
    7f8a:	11 24       	eor	r1, r1

	ret
    7f8c:	08 95       	ret

00007f8e <SetTileTable>:
; C-callable
; r25:r24=pointer to tiles data
;************************************
.section .text.SetTileTable
SetTileTable:
	sts tile_table_lo,r24
    7f8e:	80 93 ac 0c 	sts	0x0CAC, r24
	sts tile_table_hi,r25	
    7f92:	90 93 ad 0c 	sts	0x0CAD, r25
	ret
    7f96:	08 95       	ret

00007f98 <GetVsyncFlag>:
;
; C-callable
;************************************
.section .text.GetVsyncFlag
GetVsyncFlag:
	lds r24,sync_flags
    7f98:	80 91 b8 0c 	lds	r24, 0x0CB8
	andi r24,SYNC_FLAG_VSYNC
    7f9c:	81 70       	andi	r24, 0x01	; 1
	ret
    7f9e:	08 95       	ret

00007fa0 <ClearVsyncFlag>:
; 
; C-callable
;*****************************
.section .text.ClearVsyncFlag
ClearVsyncFlag:
	lds r18,sync_flags
    7fa0:	20 91 b8 0c 	lds	r18, 0x0CB8
	andi r18,~SYNC_FLAG_VSYNC
    7fa4:	2e 7f       	andi	r18, 0xFE	; 254
	sts sync_flags,r18
    7fa6:	20 93 b8 0c 	sts	0x0CB8, r18
	ret
    7faa:	08 95       	ret

00007fac <ReadJoypad>:
; r24=joypad No (0 or 1)
; returns: (int) r25:r24
;*****************************
.section .text.ReadJoypad
ReadJoypad:	
	tst r24
    7fac:	88 23       	and	r24, r24
	brne rj_p2
    7fae:	29 f4       	brne	.+10     	; 0x7fba <rj_p2>
		
	lds r24,joypad1_status_lo
    7fb0:	80 91 bf 0c 	lds	r24, 0x0CBF
	lds r25,joypad1_status_lo+1
    7fb4:	90 91 c0 0c 	lds	r25, 0x0CC0
	ret
    7fb8:	08 95       	ret

00007fba <rj_p2>:
rj_p2:
	lds r24,joypad2_status_lo
    7fba:	80 91 c3 0c 	lds	r24, 0x0CC3
	lds r25,joypad2_status_lo+1	
    7fbe:	90 91 c4 0c 	lds	r25, 0x0CC4

	ret
    7fc2:	08 95       	ret

00007fc4 <WaitUs>:
; r25:r24 - us to wait
; returns: void
;****************************
.section .text.WaitUs
WaitUs:	
	ldi r23,8
    7fc4:	78 e0       	ldi	r23, 0x08	; 8
	dec 23
    7fc6:	7a 95       	dec	r23
	brne .-4 ;~1 us
    7fc8:	f1 f7       	brne	.-4      	; 0x7fc6 <WaitUs+0x2>
	nop
    7fca:	00 00       	nop
	sbiw r24,1
    7fcc:	01 97       	sbiw	r24, 0x01	; 1
	brne WaitUs
    7fce:	d1 f7       	brne	.-12     	; 0x7fc4 <WaitUs>

	ret
    7fd0:	08 95       	ret

00007fd2 <WriteEeprom>:
;****************************

.section .text.WriteEeprom
WriteEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    7fd2:	f9 99       	sbic	0x1f, 1	; 31
   rjmp WriteEeprom
    7fd4:	fe cf       	rjmp	.-4      	; 0x7fd2 <WriteEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    7fd6:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    7fd8:	81 bd       	out	0x21, r24	; 33
   ; Write data (r22) to Data Register
   out _SFR_IO_ADDR(EEDR),r22
    7fda:	60 bd       	out	0x20, r22	; 32
   cli
    7fdc:	f8 94       	cli
   ; Write logical one to EEMPE
   sbi _SFR_IO_ADDR(EECR),EEMPE
    7fde:	fa 9a       	sbi	0x1f, 2	; 31
   ; Start eeprom write by setting EEPE
   sbi _SFR_IO_ADDR(EECR),EEPE
    7fe0:	f9 9a       	sbi	0x1f, 1	; 31
   sei
    7fe2:	78 94       	sei
   ret
    7fe4:	08 95       	ret

00007fe6 <ReadEeprom>:
; r24 - value read
;****************************
.section .text.ReadEeprom
ReadEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    7fe6:	f9 99       	sbic	0x1f, 1	; 31
   rjmp ReadEeprom
    7fe8:	fe cf       	rjmp	.-4      	; 0x7fe6 <ReadEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    7fea:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    7fec:	81 bd       	out	0x21, r24	; 33
   ; Start eeprom read by writing EERE
   cli
    7fee:	f8 94       	cli
   sbi _SFR_IO_ADDR(EECR),EERE
    7ff0:	f8 9a       	sbi	0x1f, 0	; 31
   ; Read data from Data Register
   in r24,_SFR_IO_ADDR(EEDR)
    7ff2:	80 b5       	in	r24, 0x20	; 32
   sei
    7ff4:	78 94       	sei
   ret
    7ff6:	08 95       	ret

00007ff8 <wdt_randomize>:
	.global wdt_randomize
	.section .text.wdt_randomize
	wdt_randomize:

		;set timer 1 full speed count to 0xffff
		ldi r24,0
    7ff8:	80 e0       	ldi	r24, 0x00	; 0
		sts sync_pulse,r24
    7ffa:	80 93 b7 0c 	sts	0x0CB7, r24


		sts _SFR_MEM_ADDR(TIMSK1),r24
    7ffe:	80 93 6f 00 	sts	0x006F, r24
		sts _SFR_MEM_ADDR(OCR1AL),r24
    8002:	80 93 88 00 	sts	0x0088, r24
		sts _SFR_MEM_ADDR(OCR1AH),r24
    8006:	80 93 89 00 	sts	0x0089, r24
		sts _SFR_MEM_ADDR(OCR1BL),r24
    800a:	80 93 8a 00 	sts	0x008A, r24
		sts _SFR_MEM_ADDR(OCR1BH),r24
    800e:	80 93 8b 00 	sts	0x008B, r24
		sts _SFR_MEM_ADDR(TCNT1H),r24
    8012:	80 93 85 00 	sts	0x0085, r24
		sts _SFR_MEM_ADDR(TCNT1L),r24
    8016:	80 93 84 00 	sts	0x0084, r24
		
		sts _SFR_MEM_ADDR(TCCR1A),r24	
    801a:	80 93 80 00 	sts	0x0080, r24
		ldi 24,(1<<CS10)
    801e:	81 e0       	ldi	r24, 0x01	; 1
		sts _SFR_MEM_ADDR(TCCR1B),r24
    8020:	80 93 81 00 	sts	0x0081, r24

		cli
    8024:	f8 94       	cli

		;enable watchdog at fastest speed and generate interrupts
		ldi r24,0
    8026:	80 e0       	ldi	r24, 0x00	; 0
		sts _SFR_MEM_ADDR(MCUSR),r24	
    8028:	80 93 54 00 	sts	0x0054, r24
		ldi r25,(1<<WDIE)+(1<<WDE)+(0<<WDP3)+(0<<WDP2)+(0<<WDP1)+(0<<WDP0)
    802c:	98 e4       	ldi	r25, 0x48	; 72
		lds r24,_SFR_MEM_ADDR(WDTCSR)
    802e:	80 91 60 00 	lds	r24, 0x0060
		ori r24,(1<<WDCE)+(1<<WDE)
    8032:	88 61       	ori	r24, 0x18	; 24
		sts _SFR_MEM_ADDR(WDTCSR),r24
    8034:	80 93 60 00 	sts	0x0060, r24
		sts _SFR_MEM_ADDR(WDTCSR),r25
    8038:	90 93 60 00 	sts	0x0060, r25
	
		sei
    803c:	78 94       	sei

0000803e <wait>:

		;generate 8 random cycles
	wait:
		lds r24,sync_pulse ;using the yet unalocated "sync_pulse" as a temp variable
    803e:	80 91 b7 0c 	lds	r24, 0x0CB7
		cpi r24,8
    8042:	88 30       	cpi	r24, 0x08	; 8
		brlo wait
    8044:	e0 f3       	brcs	.-8      	; 0x803e <wait>

		ret
    8046:	08 95       	ret

00008048 <GetTrueRandomSeed>:
	;********************************

	.global GetTrueRandomSeed
	.section .text.GetTrueRandomSeed
	GetTrueRandomSeed:
		lds r24,random_value
    8048:	80 91 c9 0c 	lds	r24, 0x0CC9
		lds r25,random_value+1
    804c:	90 91 ca 0c 	lds	r25, 0x0CCA
		ret
    8050:	08 95       	ret

00008052 <__vector_8>:
	;*************************************
	; Watchdog timer interrupt
	;*************************************
	WDT_vect:
		;save flags & status register
		push r16
    8052:	0f 93       	push	r16
		push r17
    8054:	1f 93       	push	r17

		in r16,_SFR_IO_ADDR(SREG)
    8056:	0f b7       	in	r16, 0x3f	; 63
		push r16
    8058:	0f 93       	push	r16

		lds r16,sync_pulse
    805a:	00 91 b7 0c 	lds	r16, 0x0CB7
		inc r16
    805e:	03 95       	inc	r16
		sts sync_pulse,r16
    8060:	00 93 b7 0c 	sts	0x0CB7, r16

		;XOR succesive timer1 LSB into a int
		sbrc r16,0
    8064:	00 fd       	sbrc	r16, 0
		rjmp 1f
    8066:	08 c0       	rjmp	.+16     	; 0x8078 <__vector_8+0x26>
		lds r17,random_value
    8068:	10 91 c9 0c 	lds	r17, 0x0CC9
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    806c:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    8070:	10 27       	eor	r17, r16
		sts random_value,r17
    8072:	10 93 c9 0c 	sts	0x0CC9, r17
		rjmp 2f
    8076:	07 c0       	rjmp	.+14     	; 0x8086 <__vector_8+0x34>
	1:
		lds r17,random_value+1
    8078:	10 91 ca 0c 	lds	r17, 0x0CCA
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    807c:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    8080:	10 27       	eor	r17, r16
		sts random_value+1,r17
    8082:	10 93 ca 0c 	sts	0x0CCA, r17
	2:

		ldi r16,(1<<WDIE)+(1<<WDE)
    8086:	08 e4       	ldi	r16, 0x48	; 72
		sts _SFR_MEM_ADDR(WDTCSR),r16
    8088:	00 93 60 00 	sts	0x0060, r16

		;restore flags
		pop r16
    808c:	0f 91       	pop	r16
		out _SFR_IO_ADDR(SREG),r16
    808e:	0f bf       	out	0x3f, r16	; 63
	
		pop r17
    8090:	1f 91       	pop	r17
		pop r16
    8092:	0f 91       	pop	r16
		reti
    8094:	18 95       	reti

00008096 <SoftReset>:

/**
 * Performs a software reset
 */
void SoftReset(void){        
	wdt_enable(WDTO_15MS);  
    8096:	98 e0       	ldi	r25, 0x08	; 8
    8098:	88 e1       	ldi	r24, 0x18	; 24
    809a:	0f b6       	in	r0, 0x3f	; 63
    809c:	f8 94       	cli
    809e:	a8 95       	wdr
    80a0:	80 93 60 00 	sts	0x0060, r24
    80a4:	0f be       	out	0x3f, r0	; 63
    80a6:	90 93 60 00 	sts	0x0060, r25
	while(1);
    80aa:	ff cf       	rjmp	.-2      	; 0x80aa <SoftReset+0x14>

000080ac <ReadButtons>:
void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
	unsigned char i;

	//latch controllers
	JOYPAD_OUT_PORT|=_BV(JOYPAD_LATCH_PIN);
    80ac:	12 9a       	sbi	0x02, 2	; 2
		}else{
			Wait200ns();
			Wait200ns();
		}	
	#else
		Wait200ns();
    80ae:	c8 95       	lpm
    80b0:	c8 95       	lpm
		Wait200ns();
    80b2:	c8 95       	lpm
    80b4:	c8 95       	lpm
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));
    80b6:	12 98       	cbi	0x02, 2	; 2
    80b8:	40 e1       	ldi	r20, 0x10	; 16
	DisplayLogo();
	
}

void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
    80ba:	80 e0       	ldi	r24, 0x00	; 0
    80bc:	90 e0       	ldi	r25, 0x00	; 0
    80be:	20 e0       	ldi	r18, 0x00	; 0
    80c0:	30 e0       	ldi	r19, 0x00	; 0


	//read button states
	for(i=0;i<16;i++){

		p1ButtonsLo>>=1;
    80c2:	36 95       	lsr	r19
    80c4:	27 95       	ror	r18
		p2ButtonsLo>>=1;
    80c6:	96 95       	lsr	r25
    80c8:	87 95       	ror	r24
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    80ca:	c8 95       	lpm
    80cc:	c8 95       	lpm
			Wait200ns();
    80ce:	c8 95       	lpm
    80d0:	c8 95       	lpm
		#endif
			
		//pulse clock pin		
		JOYPAD_OUT_PORT&=~(_BV(JOYPAD_CLOCK_PIN));
    80d2:	13 98       	cbi	0x02, 3	; 2
		
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) p1ButtonsLo|=(1<<15);
    80d4:	00 9b       	sbis	0x00, 0	; 0
    80d6:	30 68       	ori	r19, 0x80	; 128
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) p2ButtonsLo|=(1<<15);
    80d8:	01 9b       	sbis	0x00, 1	; 0
    80da:	90 68       	ori	r25, 0x80	; 128
		
		JOYPAD_OUT_PORT|=_BV(JOYPAD_CLOCK_PIN);
    80dc:	13 9a       	sbi	0x02, 3	; 2
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    80de:	c8 95       	lpm
    80e0:	c8 95       	lpm
			Wait200ns();
    80e2:	c8 95       	lpm
    80e4:	c8 95       	lpm
    80e6:	41 50       	subi	r20, 0x01	; 1
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));


	//read button states
	for(i=0;i<16;i++){
    80e8:	61 f7       	brne	.-40     	; 0x80c2 <ReadButtons+0x16>
		#endif

	}

	#if JOYSTICK==TYPE_SNES
		joypad1_status_lo=p1ButtonsLo;
    80ea:	30 93 c0 0c 	sts	0x0CC0, r19
    80ee:	20 93 bf 0c 	sts	0x0CBF, r18
		joypad2_status_lo=p2ButtonsLo;
    80f2:	90 93 c4 0c 	sts	0x0CC4, r25
    80f6:	80 93 c3 0c 	sts	0x0CC3, r24
	#else
		joypad1_status_lo=p1ButtonsLo&0xff;
		joypad2_status_lo=p2ButtonsLo&0xff;	
	#endif

	if(joypad1_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B) || joypad2_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B)){
    80fa:	80 91 bf 0c 	lds	r24, 0x0CBF
    80fe:	90 91 c0 0c 	lds	r25, 0x0CC0
    8102:	0f 97       	sbiw	r24, 0x0f	; 15
    8104:	31 f0       	breq	.+12     	; 0x8112 <ReadButtons+0x66>
    8106:	80 91 c3 0c 	lds	r24, 0x0CC3
    810a:	90 91 c4 0c 	lds	r25, 0x0CC4
    810e:	0f 97       	sbiw	r24, 0x0f	; 15
    8110:	11 f4       	brne	.+4      	; 0x8116 <ReadButtons+0x6a>
		SoftReset();
    8112:	0e 94 4b 40 	call	0x8096	; 0x8096 <SoftReset>
    8116:	08 95       	ret

00008118 <ReadControllers>:
 * program when CONTROLLERS_VSYNC_READ==0.
*/
void ReadControllers(){

	//Detect if devices are connected.
	joypadsConnectionStatus=0;
    8118:	10 92 f9 0c 	sts	0x0CF9, r1
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) joypadsConnectionStatus|=1;
    811c:	00 99       	sbic	0x00, 0	; 0
    811e:	03 c0       	rjmp	.+6      	; 0x8126 <ReadControllers+0xe>
    8120:	81 e0       	ldi	r24, 0x01	; 1
    8122:	80 93 f9 0c 	sts	0x0CF9, r24
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) joypadsConnectionStatus|=2;
    8126:	01 99       	sbic	0x00, 1	; 0
    8128:	05 c0       	rjmp	.+10     	; 0x8134 <ReadControllers+0x1c>
    812a:	80 91 f9 0c 	lds	r24, 0x0CF9
    812e:	82 60       	ori	r24, 0x02	; 2
    8130:	80 93 f9 0c 	sts	0x0CF9, r24
			
	//read the standard buttons
	ReadButtons();
    8134:	0c 94 56 40 	jmp	0x80ac	; 0x80ac <ReadButtons>

00008138 <FormatEeprom>:
	return resp;
}

	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {
    8138:	cf 93       	push	r28
    813a:	df 93       	push	r29
    813c:	c0 e0       	ldi	r28, 0x00	; 0
    813e:	d0 e0       	ldi	r29, 0x00	; 0
    8140:	fe 01       	movw	r30, r28
    8142:	ee 54       	subi	r30, 0x4E	; 78
    8144:	ff 4f       	sbci	r31, 0xFF	; 255

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
    8146:	64 91       	lpm	r22, Z
    8148:	ce 01       	movw	r24, r28
    814a:	0e 94 e9 3f 	call	0x7fd2	; 0x7fd2 <WriteEeprom>
    814e:	21 96       	adiw	r28, 0x01	; 1
	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
    8150:	c0 32       	cpi	r28, 0x20	; 32
    8152:	d1 05       	cpc	r29, r1
    8154:	a9 f7       	brne	.-22     	; 0x8140 <FormatEeprom+0x8>
    8156:	c0 e2       	ldi	r28, 0x20	; 32
    8158:	d0 e0       	ldi	r29, 0x00	; 0
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
    815a:	6f ef       	ldi	r22, 0xFF	; 255
    815c:	ce 01       	movw	r24, r28
    815e:	0e 94 e9 3f 	call	0x7fd2	; 0x7fd2 <WriteEeprom>
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
    8162:	6f ef       	ldi	r22, 0xFF	; 255
    8164:	ce 01       	movw	r24, r28
    8166:	01 96       	adiw	r24, 0x01	; 1
    8168:	0e 94 e9 3f 	call	0x7fd2	; 0x7fd2 <WriteEeprom>
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
    816c:	a0 96       	adiw	r28, 0x20	; 32
    816e:	c1 15       	cp	r28, r1
    8170:	88 e0       	ldi	r24, 0x08	; 8
    8172:	d8 07       	cpc	r29, r24
    8174:	91 f7       	brne	.-28     	; 0x815a <FormatEeprom+0x22>
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
   }
   
}
    8176:	df 91       	pop	r29
    8178:	cf 91       	pop	r28
    817a:	08 95       	ret

0000817c <isEepromFormatted>:
	  }
   }
}
	
//returns true if the EEPROM has been setup to work with the kernel.
bool isEepromFormatted(){
    817c:	cf 93       	push	r28
	unsigned id;
	id=ReadEeprom(0)+(ReadEeprom(1)<<8);
    817e:	80 e0       	ldi	r24, 0x00	; 0
    8180:	90 e0       	ldi	r25, 0x00	; 0
    8182:	0e 94 f3 3f 	call	0x7fe6	; 0x7fe6 <ReadEeprom>
    8186:	c8 2f       	mov	r28, r24
    8188:	81 e0       	ldi	r24, 0x01	; 1
    818a:	90 e0       	ldi	r25, 0x00	; 0
    818c:	0e 94 f3 3f 	call	0x7fe6	; 0x7fe6 <ReadEeprom>
    8190:	28 2f       	mov	r18, r24
    8192:	30 e0       	ldi	r19, 0x00	; 0
    8194:	32 2f       	mov	r19, r18
    8196:	22 27       	eor	r18, r18
    8198:	2c 0f       	add	r18, r28
    819a:	31 1d       	adc	r19, r1
	return (id==EEPROM_SIGNATURE);
    819c:	81 e0       	ldi	r24, 0x01	; 1
    819e:	2a 35       	cpi	r18, 0x5A	; 90
    81a0:	35 45       	sbci	r19, 0x55	; 85
    81a2:	09 f0       	breq	.+2      	; 0x81a6 <isEepromFormatted+0x2a>
    81a4:	80 e0       	ldi	r24, 0x00	; 0
}
    81a6:	cf 91       	pop	r28
    81a8:	08 95       	ret

000081aa <EepromBlockExists>:
 * @return
 *  0x00 = Success, Block exists.
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK.
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND.
 */
char EepromBlockExists(unsigned int blockId, u16* eepromAddr, u8* nextFreeBlockId){
    81aa:	8f 92       	push	r8
    81ac:	9f 92       	push	r9
    81ae:	af 92       	push	r10
    81b0:	bf 92       	push	r11
    81b2:	cf 92       	push	r12
    81b4:	df 92       	push	r13
    81b6:	ef 92       	push	r14
    81b8:	ff 92       	push	r15
    81ba:	0f 93       	push	r16
    81bc:	1f 93       	push	r17
    81be:	cf 93       	push	r28
    81c0:	df 93       	push	r29
	u8 nextFreeBlock=0;
	u8 result=EEPROM_ERROR_BLOCK_NOT_FOUND;
	u16 id;
	*eepromAddr=0;
    81c2:	fb 01       	movw	r30, r22
    81c4:	11 82       	std	Z+1, r1	; 0x01
    81c6:	10 82       	st	Z, r1

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    81c8:	8f 3f       	cpi	r24, 0xFF	; 255
    81ca:	ff ef       	ldi	r31, 0xFF	; 255
    81cc:	9f 07       	cpc	r25, r31
    81ce:	89 f1       	breq	.+98     	; 0x8232 <EepromBlockExists+0x88>
    81d0:	6a 01       	movw	r12, r20
    81d2:	8b 01       	movw	r16, r22
    81d4:	7c 01       	movw	r14, r24
    81d6:	a1 2c       	mov	r10, r1
    81d8:	b1 2c       	mov	r11, r1
    81da:	c0 e0       	ldi	r28, 0x00	; 0
    81dc:	d3 e0       	ldi	r29, 0x03	; 3
    81de:	91 2c       	mov	r9, r1
		
	//scan all blocks and get the memory adress of that block and the next free block
	for(u8 i=0;i<EEPROM_MAX_BLOCKS;i++){
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
    81e0:	c5 01       	movw	r24, r10
    81e2:	0e 94 f3 3f 	call	0x7fe6	; 0x7fe6 <ReadEeprom>
    81e6:	88 2e       	mov	r8, r24
    81e8:	c5 01       	movw	r24, r10
    81ea:	01 96       	adiw	r24, 0x01	; 1
    81ec:	0e 94 f3 3f 	call	0x7fe6	; 0x7fe6 <ReadEeprom>
    81f0:	28 2f       	mov	r18, r24
    81f2:	30 e0       	ldi	r19, 0x00	; 0
    81f4:	32 2f       	mov	r19, r18
    81f6:	22 27       	eor	r18, r18
    81f8:	28 0d       	add	r18, r8
    81fa:	31 1d       	adc	r19, r1
		
		if(id==blockId){
    81fc:	2e 15       	cp	r18, r14
    81fe:	3f 05       	cpc	r19, r15
    8200:	29 f4       	brne	.+10     	; 0x820c <EepromBlockExists+0x62>
			*eepromAddr=(i*EEPROM_BLOCK_SIZE);
    8202:	f8 01       	movw	r30, r16
    8204:	b1 82       	std	Z+1, r11	; 0x01
    8206:	a0 82       	st	Z, r10
			result=EEPROM_OK;
    8208:	d0 e0       	ldi	r29, 0x00	; 0
    820a:	0b c0       	rjmp	.+22     	; 0x8222 <EepromBlockExists+0x78>
		}
		
		if(id==0xffff && nextFreeBlock==0){
    820c:	2f 3f       	cpi	r18, 0xFF	; 255
    820e:	3f 4f       	sbci	r19, 0xFF	; 255
    8210:	41 f4       	brne	.+16     	; 0x8222 <EepromBlockExists+0x78>
    8212:	91 10       	cpse	r9, r1
    8214:	06 c0       	rjmp	.+12     	; 0x8222 <EepromBlockExists+0x78>
			nextFreeBlock=i;
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
    8216:	c1 14       	cp	r12, r1
    8218:	d1 04       	cpc	r13, r1
    821a:	11 f0       	breq	.+4      	; 0x8220 <EepromBlockExists+0x76>
    821c:	f6 01       	movw	r30, r12
    821e:	c0 83       	st	Z, r28
    8220:	9c 2e       	mov	r9, r28
	*eepromAddr=0;

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
		
	//scan all blocks and get the memory adress of that block and the next free block
	for(u8 i=0;i<EEPROM_MAX_BLOCKS;i++){
    8222:	cf 5f       	subi	r28, 0xFF	; 255
    8224:	f0 e2       	ldi	r31, 0x20	; 32
    8226:	af 0e       	add	r10, r31
    8228:	b1 1c       	adc	r11, r1
    822a:	c0 34       	cpi	r28, 0x40	; 64
    822c:	c9 f6       	brne	.-78     	; 0x81e0 <EepromBlockExists+0x36>
			nextFreeBlock=i;
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
		}
	}

	return result;
    822e:	8d 2f       	mov	r24, r29
    8230:	01 c0       	rjmp	.+2      	; 0x8234 <EepromBlockExists+0x8a>
	u8 nextFreeBlock=0;
	u8 result=EEPROM_ERROR_BLOCK_NOT_FOUND;
	u16 id;
	*eepromAddr=0;

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    8232:	81 e0       	ldi	r24, 0x01	; 1
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
		}
	}

	return result;
}
    8234:	df 91       	pop	r29
    8236:	cf 91       	pop	r28
    8238:	1f 91       	pop	r17
    823a:	0f 91       	pop	r16
    823c:	ff 90       	pop	r15
    823e:	ef 90       	pop	r14
    8240:	df 90       	pop	r13
    8242:	cf 90       	pop	r12
    8244:	bf 90       	pop	r11
    8246:	af 90       	pop	r10
    8248:	9f 90       	pop	r9
    824a:	8f 90       	pop	r8
    824c:	08 95       	ret

0000824e <EepromWriteBlock>:
 * Returns:
 *  0x00 = Success
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x02 = EEPROM_ERROR_FULL
 */
char EepromWriteBlock(struct EepromBlockStruct *block){
    824e:	ef 92       	push	r14
    8250:	ff 92       	push	r15
    8252:	0f 93       	push	r16
    8254:	1f 93       	push	r17
    8256:	cf 93       	push	r28
    8258:	df 93       	push	r29
    825a:	00 d0       	rcall	.+0      	; 0x825c <EepromWriteBlock+0xe>
    825c:	1f 92       	push	r1
    825e:	cd b7       	in	r28, 0x3d	; 61
    8260:	de b7       	in	r29, 0x3e	; 62
    8262:	8c 01       	movw	r16, r24
	u16 eepromAddr=0;
    8264:	1a 82       	std	Y+2, r1	; 0x02
    8266:	19 82       	std	Y+1, r1	; 0x01
	u8 *srcPtr=(unsigned char *)block,res,nextFreeBlock=0;
    8268:	1b 82       	std	Y+3, r1	; 0x03

	res=EepromBlockExists(block->id,&eepromAddr,&nextFreeBlock);
    826a:	ae 01       	movw	r20, r28
    826c:	4d 5f       	subi	r20, 0xFD	; 253
    826e:	5f 4f       	sbci	r21, 0xFF	; 255
    8270:	be 01       	movw	r22, r28
    8272:	6f 5f       	subi	r22, 0xFF	; 255
    8274:	7f 4f       	sbci	r23, 0xFF	; 255
    8276:	fc 01       	movw	r30, r24
    8278:	80 81       	ld	r24, Z
    827a:	91 81       	ldd	r25, Z+1	; 0x01
    827c:	0e 94 d5 40 	call	0x81aa	; 0x81aa <EepromBlockExists>
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;
    8280:	88 23       	and	r24, r24
    8282:	11 f0       	breq	.+4      	; 0x8288 <EepromWriteBlock+0x3a>
    8284:	83 30       	cpi	r24, 0x03	; 3
    8286:	19 f5       	brne	.+70     	; 0x82ce <EepromWriteBlock+0x80>

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    8288:	89 81       	ldd	r24, Y+1	; 0x01
    828a:	9a 81       	ldd	r25, Y+2	; 0x02
    828c:	89 2b       	or	r24, r25
    828e:	49 f4       	brne	.+18     	; 0x82a2 <EepromWriteBlock+0x54>
    8290:	8b 81       	ldd	r24, Y+3	; 0x03
    8292:	88 23       	and	r24, r24
    8294:	d9 f0       	breq	.+54     	; 0x82cc <EepromWriteBlock+0x7e>
	if(eepromAddr==0 && nextFreeBlock!=0) eepromAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;
    8296:	f0 e2       	ldi	r31, 0x20	; 32
    8298:	8f 9f       	mul	r24, r31
    829a:	c0 01       	movw	r24, r0
    829c:	11 24       	eor	r1, r1
    829e:	9a 83       	std	Y+2, r25	; 0x02
    82a0:	89 83       	std	Y+1, r24	; 0x01
    82a2:	78 01       	movw	r14, r16
    82a4:	20 e2       	ldi	r18, 0x20	; 32
    82a6:	e2 0e       	add	r14, r18
    82a8:	f1 1c       	adc	r15, r1

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
		WriteEeprom(eepromAddr++,*srcPtr);
    82aa:	f8 01       	movw	r30, r16
    82ac:	61 91       	ld	r22, Z+
    82ae:	8f 01       	movw	r16, r30
    82b0:	89 81       	ldd	r24, Y+1	; 0x01
    82b2:	9a 81       	ldd	r25, Y+2	; 0x02
    82b4:	9c 01       	movw	r18, r24
    82b6:	2f 5f       	subi	r18, 0xFF	; 255
    82b8:	3f 4f       	sbci	r19, 0xFF	; 255
    82ba:	3a 83       	std	Y+2, r19	; 0x02
    82bc:	29 83       	std	Y+1, r18	; 0x01
    82be:	0e 94 e9 3f 	call	0x7fd2	; 0x7fd2 <WriteEeprom>
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(eepromAddr==0 && nextFreeBlock!=0) eepromAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
    82c2:	0e 15       	cp	r16, r14
    82c4:	1f 05       	cpc	r17, r15
    82c6:	89 f7       	brne	.-30     	; 0x82aa <EepromWriteBlock+0x5c>
		WriteEeprom(eepromAddr++,*srcPtr);
		srcPtr++;	
	}
	
	return 0;
    82c8:	80 e0       	ldi	r24, 0x00	; 0
    82ca:	01 c0       	rjmp	.+2      	; 0x82ce <EepromWriteBlock+0x80>
	u8 *srcPtr=(unsigned char *)block,res,nextFreeBlock=0;

	res=EepromBlockExists(block->id,&eepromAddr,&nextFreeBlock);
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    82cc:	82 e0       	ldi	r24, 0x02	; 2
		WriteEeprom(eepromAddr++,*srcPtr);
		srcPtr++;	
	}
	
	return 0;
}
    82ce:	0f 90       	pop	r0
    82d0:	0f 90       	pop	r0
    82d2:	0f 90       	pop	r0
    82d4:	df 91       	pop	r29
    82d6:	cf 91       	pop	r28
    82d8:	1f 91       	pop	r17
    82da:	0f 91       	pop	r16
    82dc:	ff 90       	pop	r15
    82de:	ef 90       	pop	r14
    82e0:	08 95       	ret

000082e2 <EepromReadBlock>:
 * Returns: 
 *  0x00 = Success
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 */
char EepromReadBlock(unsigned int blockId,struct EepromBlockStruct *block){	
    82e2:	cf 92       	push	r12
    82e4:	df 92       	push	r13
    82e6:	ff 92       	push	r15
    82e8:	0f 93       	push	r16
    82ea:	1f 93       	push	r17
    82ec:	cf 93       	push	r28
    82ee:	df 93       	push	r29
    82f0:	00 d0       	rcall	.+0      	; 0x82f2 <EepromReadBlock+0x10>
    82f2:	cd b7       	in	r28, 0x3d	; 61
    82f4:	de b7       	in	r29, 0x3e	; 62
    82f6:	8b 01       	movw	r16, r22
	u16 eepromAddr;
	u8 *blockPtr=(unsigned char *)block;

	u8 res=EepromBlockExists(blockId,&eepromAddr,NULL);
    82f8:	40 e0       	ldi	r20, 0x00	; 0
    82fa:	50 e0       	ldi	r21, 0x00	; 0
    82fc:	be 01       	movw	r22, r28
    82fe:	6f 5f       	subi	r22, 0xFF	; 255
    8300:	7f 4f       	sbci	r23, 0xFF	; 255
    8302:	0e 94 d5 40 	call	0x81aa	; 0x81aa <EepromBlockExists>
    8306:	f8 2e       	mov	r15, r24
	if(res!=0) return res;
    8308:	81 11       	cpse	r24, r1
    830a:	13 c0       	rjmp	.+38     	; 0x8332 <EepromReadBlock+0x50>
    830c:	68 01       	movw	r12, r16
    830e:	80 e2       	ldi	r24, 0x20	; 32
    8310:	c8 0e       	add	r12, r24
    8312:	d1 1c       	adc	r13, r1

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
		*blockPtr=ReadEeprom(eepromAddr++);
    8314:	89 81       	ldd	r24, Y+1	; 0x01
    8316:	9a 81       	ldd	r25, Y+2	; 0x02
    8318:	9c 01       	movw	r18, r24
    831a:	2f 5f       	subi	r18, 0xFF	; 255
    831c:	3f 4f       	sbci	r19, 0xFF	; 255
    831e:	3a 83       	std	Y+2, r19	; 0x02
    8320:	29 83       	std	Y+1, r18	; 0x01
    8322:	0e 94 f3 3f 	call	0x7fe6	; 0x7fe6 <ReadEeprom>
    8326:	f8 01       	movw	r30, r16
    8328:	81 93       	st	Z+, r24
    832a:	8f 01       	movw	r16, r30
	u8 *blockPtr=(unsigned char *)block;

	u8 res=EepromBlockExists(blockId,&eepromAddr,NULL);
	if(res!=0) return res;

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
    832c:	ec 15       	cp	r30, r12
    832e:	fd 05       	cpc	r31, r13
    8330:	89 f7       	brne	.-30     	; 0x8314 <EepromReadBlock+0x32>
		*blockPtr=ReadEeprom(eepromAddr++);
		blockPtr++;	
	}
	
	return EEPROM_OK;
}
    8332:	8f 2d       	mov	r24, r15
    8334:	0f 90       	pop	r0
    8336:	0f 90       	pop	r0
    8338:	df 91       	pop	r29
    833a:	cf 91       	pop	r28
    833c:	1f 91       	pop	r17
    833e:	0f 91       	pop	r16
    8340:	ff 90       	pop	r15
    8342:	df 90       	pop	r13
    8344:	cf 90       	pop	r12
    8346:	08 95       	ret

00008348 <GetPrngNumber>:
 * Input: Zero=return the next random value. Non-zero=Sets the seed value.
 */
u16 GetPrngNumber(u16 seed){
	static u16 prng_state;
  	
	if(seed!=0) prng_state=seed;
    8348:	00 97       	sbiw	r24, 0x00	; 0
    834a:	21 f0       	breq	.+8      	; 0x8354 <GetPrngNumber+0xc>
    834c:	90 93 cd 0c 	sts	0x0CCD, r25
    8350:	80 93 cc 0c 	sts	0x0CCC, r24
	
	u16 bit  = ((prng_state >> 0) ^ (prng_state >> 2) ^ (prng_state >> 3) ^ (prng_state >> 5) ) & 1;
    8354:	20 91 cc 0c 	lds	r18, 0x0CCC
    8358:	30 91 cd 0c 	lds	r19, 0x0CCD
    835c:	a9 01       	movw	r20, r18
    835e:	56 95       	lsr	r21
    8360:	47 95       	ror	r20
    8362:	56 95       	lsr	r21
    8364:	47 95       	ror	r20
    8366:	c9 01       	movw	r24, r18
    8368:	63 e0       	ldi	r22, 0x03	; 3
    836a:	96 95       	lsr	r25
    836c:	87 95       	ror	r24
    836e:	6a 95       	dec	r22
    8370:	e1 f7       	brne	.-8      	; 0x836a <GetPrngNumber+0x22>
    8372:	84 27       	eor	r24, r20
    8374:	95 27       	eor	r25, r21
    8376:	82 27       	eor	r24, r18
    8378:	93 27       	eor	r25, r19
    837a:	a9 01       	movw	r20, r18
    837c:	75 e0       	ldi	r23, 0x05	; 5
    837e:	56 95       	lsr	r21
    8380:	47 95       	ror	r20
    8382:	7a 95       	dec	r23
    8384:	e1 f7       	brne	.-8      	; 0x837e <GetPrngNumber+0x36>
    8386:	84 27       	eor	r24, r20
    8388:	95 27       	eor	r25, r21
	prng_state =  (prng_state >> 1) | (bit << 15);
    838a:	99 27       	eor	r25, r25
    838c:	86 95       	lsr	r24
    838e:	97 95       	ror	r25
    8390:	88 27       	eor	r24, r24
    8392:	36 95       	lsr	r19
    8394:	27 95       	ror	r18
    8396:	82 2b       	or	r24, r18
    8398:	93 2b       	or	r25, r19
    839a:	90 93 cd 0c 	sts	0x0CCD, r25
    839e:	80 93 cc 0c 	sts	0x0CCC, r24
	return prng_state;   
}
    83a2:	08 95       	ret

000083a4 <PatchCommand00>:
/*
 * Command 00: Set envelope speed per frame +127/-128, 0=no enveloppe
 * Param:
 */
void PatchCommand00(Track* track, char param){
	track->envelopeStep=param;
    83a4:	fc 01       	movw	r30, r24
    83a6:	67 87       	std	Z+15, r22	; 0x0f
    83a8:	08 95       	ret

000083aa <PatchCommand01>:
 * Param:
 */
void PatchCommand01(Track* track, char param){
	(void)track; //to remove unused warning
	#if MIXER_CHAN4_TYPE == 0
		mixer.channels.type.noise.barrel=0x0101;
    83aa:	e0 ed       	ldi	r30, 0xD0	; 208
    83ac:	fc e0       	ldi	r31, 0x0C	; 12
    83ae:	81 e0       	ldi	r24, 0x01	; 1
    83b0:	91 e0       	ldi	r25, 0x01	; 1
    83b2:	95 8b       	std	Z+21, r25	; 0x15
    83b4:	84 8b       	std	Z+20, r24	; 0x14
		mixer.channels.type.noise.params=param;
    83b6:	63 8b       	std	Z+19, r22	; 0x13
    83b8:	08 95       	ret

000083ba <PatchCommand05>:
}
/*
 * Command 05: End of note/fx
 * Param:
 */
void PatchCommand05(Track* track, char param){
    83ba:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags&=~(TRACK_FLAGS_PLAYING+TRACK_FLAGS_PRIORITY);	//patchPlaying=false,priority=0	
    83bc:	90 81       	ld	r25, Z
    83be:	9f 75       	andi	r25, 0x5F	; 95
    83c0:	90 83       	st	Z, r25
    83c2:	08 95       	ret

000083c4 <PatchCommand06>:

/*
 * Command 06: Note hold
 * Param:
 */
void PatchCommand06(Track* track, char param){
    83c4:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags|=TRACK_FLAGS_HOLD_ENV; //patchEnvelopeHold=true;
    83c6:	90 81       	ld	r25, Z
    83c8:	90 64       	ori	r25, 0x40	; 64
    83ca:	90 83       	st	Z, r25
    83cc:	08 95       	ret

000083ce <PatchCommand07>:
 * Command 07: Set envelope volume
 * Param:
 */

void PatchCommand07(Track* track, char param){
	track->envelopeVol=param;
    83ce:	fc 01       	movw	r30, r24
    83d0:	66 87       	std	Z+14, r22	; 0x0e
    83d2:	08 95       	ret

000083d4 <PatchCommand09>:
 * Command 09: Set tremolo level
 * Param:
*/

void PatchCommand09(Track* track, char param){
	track->tremoloLevel=param;
    83d4:	fc 01       	movw	r30, r24
    83d6:	62 87       	std	Z+10, r22	; 0x0a
    83d8:	08 95       	ret

000083da <PatchCommand10>:
/*
 * Command 10: Set tremolo rate
 * Param:
*/
void PatchCommand10(Track* track, char param){
	track->tremoloRate=param;
    83da:	fc 01       	movw	r30, r24
    83dc:	63 87       	std	Z+11, r22	; 0x0b
    83de:	08 95       	ret

000083e0 <PatchCommand11>:
/*
 * Command 11: Pitch slide (linear) 
 * Param: (+/-) half steps to slide to
*/

void PatchCommand11(Track* track, char param){
    83e0:	cf 93       	push	r28
    83e2:	df 93       	push	r29
    83e4:	ec 01       	movw	r28, r24
    83e6:	46 2f       	mov	r20, r22
	//slide to note from current note
	s16 currentStep,targetStep,delta;	
	
	currentStep=pgm_read_word(&(steptable[track->note]));
    83e8:	29 81       	ldd	r18, Y+1	; 0x01
    83ea:	30 e0       	ldi	r19, 0x00	; 0
    83ec:	f9 01       	movw	r30, r18
    83ee:	ee 0f       	add	r30, r30
    83f0:	ff 1f       	adc	r31, r31
    83f2:	e8 5f       	subi	r30, 0xF8	; 248
    83f4:	f2 47       	sbci	r31, 0x72	; 114
    83f6:	65 91       	lpm	r22, Z+
    83f8:	74 91       	lpm	r23, Z
	targetStep=pgm_read_word(&(steptable[track->note+param]));	
    83fa:	f9 01       	movw	r30, r18
    83fc:	e4 0f       	add	r30, r20
    83fe:	f1 1d       	adc	r31, r1
    8400:	47 fd       	sbrc	r20, 7
    8402:	fa 95       	dec	r31
    8404:	ee 0f       	add	r30, r30
    8406:	ff 1f       	adc	r31, r31
    8408:	e8 5f       	subi	r30, 0xF8	; 248
    840a:	f2 47       	sbci	r31, 0x72	; 114
    840c:	85 91       	lpm	r24, Z+
    840e:	94 91       	lpm	r25, Z
	delta=((targetStep-currentStep)/track->slideSpeed);
    8410:	86 1b       	sub	r24, r22
    8412:	97 0b       	sbc	r25, r23
    8414:	68 85       	ldd	r22, Y+8	; 0x08
    8416:	70 e0       	ldi	r23, 0x00	; 0
    8418:	0e 94 e0 6b 	call	0xd7c0	; 0xd7c0 <__divmodhi4>
	if(delta==0)delta++;
    841c:	61 15       	cp	r22, r1
    841e:	71 05       	cpc	r23, r1
    8420:	11 f4       	brne	.+4      	; 0x8426 <PatchCommand11+0x46>
    8422:	61 e0       	ldi	r22, 0x01	; 1
    8424:	70 e0       	ldi	r23, 0x00	; 0

	mixer.channels.all[track->channel].step+=delta;
    8426:	ea 81       	ldd	r30, Y+2	; 0x02
    8428:	86 e0       	ldi	r24, 0x06	; 6
    842a:	e8 9f       	mul	r30, r24
    842c:	f0 01       	movw	r30, r0
    842e:	11 24       	eor	r1, r1
    8430:	e0 53       	subi	r30, 0x30	; 48
    8432:	f3 4f       	sbci	r31, 0xF3	; 243
    8434:	81 81       	ldd	r24, Z+1	; 0x01
    8436:	92 81       	ldd	r25, Z+2	; 0x02
    8438:	86 0f       	add	r24, r22
    843a:	97 1f       	adc	r25, r23
    843c:	92 83       	std	Z+2, r25	; 0x02
    843e:	81 83       	std	Z+1, r24	; 0x01
	
	track->slideStep=delta;
    8440:	7e 83       	std	Y+6, r23	; 0x06
    8442:	6d 83       	std	Y+5, r22	; 0x05
	track->flags|=TRACK_FLAGS_SLIDING;
    8444:	88 81       	ld	r24, Y
    8446:	88 60       	ori	r24, 0x08	; 8
    8448:	88 83       	st	Y, r24
	track->slideNote=track->note+param;
    844a:	89 81       	ldd	r24, Y+1	; 0x01
    844c:	48 0f       	add	r20, r24
    844e:	4f 83       	std	Y+7, r20	; 0x07
}
    8450:	df 91       	pop	r29
    8452:	cf 91       	pop	r28
    8454:	08 95       	ret

00008456 <PatchCommand12>:
/*
 * Command 12: Pitch slide speed 
 * Param: slide speed (fixed 4:4)
 */
void PatchCommand12(Track* track, char param){
	track->slideSpeed=param;
    8456:	fc 01       	movw	r30, r24
    8458:	60 87       	std	Z+8, r22	; 0x08
    845a:	08 95       	ret

0000845c <PatchCommand13>:
 *  Command 13: Loop start
 * Description: Defines the start of a loop. Works in conjunction with command 14 (PC_LOOP_END).
 *		 Param: loop count
 */
void PatchCommand13(Track* track, char param){
	track->loopCount=(u8)param;
    845c:	fc 01       	movw	r30, r24
    845e:	64 83       	std	Z+4, r22	; 0x04
    8460:	08 95       	ret

00008462 <PatchCommand02>:
/*
 * Command 02: Set wave
 * Param:
 */
void PatchCommand02(Track* track, char param){
	SetMixerWave(track->channel,param);
    8462:	fc 01       	movw	r30, r24
    8464:	82 81       	ldd	r24, Z+2	; 0x02
    8466:	0c 94 4c 46 	jmp	0x8c98	; 0x8c98 <SetMixerWave>

0000846a <PatchCommand03>:
}
/*
 * Command 03: Note up * param
 * Param:
 */
void PatchCommand03(Track* track, char param){
    846a:	fc 01       	movw	r30, r24
	track->note+=param;
    846c:	91 81       	ldd	r25, Z+1	; 0x01
    846e:	69 0f       	add	r22, r25
    8470:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(track->channel,track->note);
    8472:	82 81       	ldd	r24, Z+2	; 0x02
    8474:	0c 94 35 46 	jmp	0x8c6a	; 0x8c6a <SetMixerNote>

00008478 <PatchCommand04>:
}
/*
 * Command 04: Note down * param
 * Param:
 */
void PatchCommand04(Track* track, char param){
    8478:	fc 01       	movw	r30, r24
	track->note-=param;
    847a:	91 81       	ldd	r25, Z+1	; 0x01
    847c:	96 1b       	sub	r25, r22
    847e:	69 2f       	mov	r22, r25
    8480:	91 83       	std	Z+1, r25	; 0x01
	SetMixerNote(track->channel,track->note);
    8482:	82 81       	ldd	r24, Z+2	; 0x02
    8484:	0c 94 35 46 	jmp	0x8c6a	; 0x8c6a <SetMixerNote>

00008488 <PatchCommand08>:
/*
 * Command 08: Set Note/Pitch
 * Param:
 */

void PatchCommand08(Track* track, char param){
    8488:	1f 93       	push	r17
    848a:	cf 93       	push	r28
    848c:	df 93       	push	r29
    848e:	ec 01       	movw	r28, r24
    8490:	16 2f       	mov	r17, r22
	SetMixerNote(track->channel,param);
    8492:	8a 81       	ldd	r24, Y+2	; 0x02
    8494:	0e 94 35 46 	call	0x8c6a	; 0x8c6a <SetMixerNote>
	track->note=param;
    8498:	19 83       	std	Y+1, r17	; 0x01
	track->flags &= ~(TRACK_FLAGS_SLIDING);	
    849a:	88 81       	ld	r24, Y
    849c:	87 7f       	andi	r24, 0xF7	; 247
    849e:	88 83       	st	Y, r24
}
    84a0:	df 91       	pop	r29
    84a2:	cf 91       	pop	r28
    84a4:	1f 91       	pop	r17
    84a6:	08 95       	ret

000084a8 <PatchCommand14>:
 *					1,PC_NOTE_DOWN,3,
 *					0,PC_LOOP_END,2,
 *					0,PATCH_END  
 *				};
 */
void PatchCommand14(Track* track, char param){
    84a8:	dc 01       	movw	r26, r24
	if(track->loopCount>0){
    84aa:	14 96       	adiw	r26, 0x04	; 4
    84ac:	8c 91       	ld	r24, X
    84ae:	14 97       	sbiw	r26, 0x04	; 4
    84b0:	88 23       	and	r24, r24
    84b2:	19 f1       	breq	.+70     	; 0x84fa <PatchCommand14+0x52>
    84b4:	55 96       	adiw	r26, 0x15	; 21
    84b6:	2d 91       	ld	r18, X+
    84b8:	3c 91       	ld	r19, X
    84ba:	56 97       	sbiw	r26, 0x16	; 22
		//track->patchCommandStreamPos=track->loopStart;
		if(param!=0){
    84bc:	66 23       	and	r22, r22
    84be:	79 f0       	breq	.+30     	; 0x84de <PatchCommand14+0x36>
			track->patchCommandStreamPos-=((param+1)*3);
    84c0:	77 27       	eor	r23, r23
    84c2:	67 fd       	sbrc	r22, 7
    84c4:	70 95       	com	r23
    84c6:	6f 5f       	subi	r22, 0xFF	; 255
    84c8:	7f 4f       	sbci	r23, 0xFF	; 255
    84ca:	ab 01       	movw	r20, r22
    84cc:	44 0f       	add	r20, r20
    84ce:	55 1f       	adc	r21, r21
    84d0:	64 0f       	add	r22, r20
    84d2:	75 1f       	adc	r23, r21
    84d4:	26 1b       	sub	r18, r22
    84d6:	37 0b       	sbc	r19, r23
    84d8:	09 c0       	rjmp	.+18     	; 0x84ec <PatchCommand14+0x44>
			while(1){
				track->patchCommandStreamPos-=3;
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    84da:	ef 3f       	cpi	r30, 0xFF	; 255
    84dc:	39 f0       	breq	.+14     	; 0x84ec <PatchCommand14+0x44>
		if(param!=0){
			track->patchCommandStreamPos-=((param+1)*3);
		}else{
			u8 command;
			while(1){
				track->patchCommandStreamPos-=3;
    84de:	23 50       	subi	r18, 0x03	; 3
    84e0:	31 09       	sbc	r19, r1
    84e2:	f9 01       	movw	r30, r18
    84e4:	32 97       	sbiw	r30, 0x02	; 2
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
    84e6:	e4 91       	lpm	r30, Z
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    84e8:	ed 30       	cpi	r30, 0x0D	; 13
    84ea:	b9 f7       	brne	.-18     	; 0x84da <PatchCommand14+0x32>
    84ec:	56 96       	adiw	r26, 0x16	; 22
    84ee:	3c 93       	st	X, r19
    84f0:	2e 93       	st	-X, r18
    84f2:	55 97       	sbiw	r26, 0x15	; 21
			}
		}
		track->loopCount--;
    84f4:	81 50       	subi	r24, 0x01	; 1
    84f6:	14 96       	adiw	r26, 0x04	; 4
    84f8:	8c 93       	st	X, r24
    84fa:	08 95       	ret

000084fc <InitMusicPlayer>:

const Patch *patchPointers;

void InitMusicPlayer(const Patch *patchPointersParam){

	patchPointers=patchPointersParam;
    84fc:	90 93 72 0d 	sts	0x0D72, r25
    8500:	80 93 71 0d 	sts	0x0D71, r24

	masterVolume=DEFAULT_MASTER_VOL;
    8504:	8f e6       	ldi	r24, 0x6F	; 111
    8506:	80 93 74 0d 	sts	0x0D74, r24
#if MIDI_IN == ENABLED
	InitUartRxBuffer();
	lastMidiInStatus=0;
#endif

	playSong=false;
    850a:	10 92 ce 0c 	sts	0x0CCE, r1
    850e:	ec e0       	ldi	r30, 0x0C	; 12
    8510:	fd e0       	ldi	r31, 0x0D	; 13

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    8512:	80 e0       	ldi	r24, 0x00	; 0
		tracks[t].channel=t;
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    8514:	90 e1       	ldi	r25, 0x10	; 16
		tracks[t].noteVol=0;
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    8516:	3f ef       	ldi	r19, 0xFF	; 255
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
    8518:	28 e1       	ldi	r18, 0x18	; 24
    851a:	df 01       	movw	r26, r30
    851c:	1e 97       	sbiw	r26, 0x0e	; 14

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].channel=t;
    851e:	8c 93       	st	X, r24
    8520:	12 97       	sbiw	r26, 0x02	; 2
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    8522:	9c 93       	st	X, r25
    8524:	1d 96       	adiw	r26, 0x0d	; 13
		tracks[t].noteVol=0;
    8526:	1c 92       	st	X, r1
    8528:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    852a:	3c 93       	st	X, r19
		tracks[t].patchNo=DEFAULT_PATCH;
    852c:	10 82       	st	Z, r1
    852e:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].tremoloRate=24; //~6hz
    8530:	2c 93       	st	X, r18
    8532:	13 97       	sbiw	r26, 0x03	; 3
		tracks[t].slideSpeed=0x10;
    8534:	9c 93       	st	X, r25
#endif

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    8536:	8f 5f       	subi	r24, 0xFF	; 255
    8538:	77 96       	adiw	r30, 0x17	; 23
    853a:	85 30       	cpi	r24, 0x05	; 5
    853c:	71 f7       	brne	.-36     	; 0x851a <InitMusicPlayer+0x1e>
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
		tracks[t].slideSpeed=0x10;
	}

}
    853e:	08 95       	ret

00008540 <StartSong>:

#if MUSIC_ENGINE == MIDI

	void StartSong(const char *song){
    8540:	ec ef       	ldi	r30, 0xFC	; 252
    8542:	fc e0       	ldi	r31, 0x0C	; 12
		for(unsigned char t=0;t<CHANNELS;t++){
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    8544:	3f ef       	ldi	r19, 0xFF	; 255

#if MUSIC_ENGINE == MIDI

	void StartSong(const char *song){
		for(unsigned char t=0;t<CHANNELS;t++){
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    8546:	20 81       	ld	r18, Z
    8548:	2f 77       	andi	r18, 0x7F	; 127
    854a:	20 83       	st	Z, r18
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    854c:	33 83       	std	Z+3, r19	; 0x03
    854e:	77 96       	adiw	r30, 0x17	; 23
}

#if MUSIC_ENGINE == MIDI

	void StartSong(const char *song){
		for(unsigned char t=0;t<CHANNELS;t++){
    8550:	2d e0       	ldi	r18, 0x0D	; 13
    8552:	ef 36       	cpi	r30, 0x6F	; 111
    8554:	f2 07       	cpc	r31, r18
    8556:	b9 f7       	brne	.-18     	; 0x8546 <StartSong+0x6>
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
		}

		songPos=song+1; //skip first delta-time
    8558:	01 96       	adiw	r24, 0x01	; 1
    855a:	90 93 79 0d 	sts	0x0D79, r25
    855e:	80 93 78 0d 	sts	0x0D78, r24
		songStart=song+1;//skip first delta-time
    8562:	90 93 fb 0c 	sts	0x0CFB, r25
    8566:	80 93 fa 0c 	sts	0x0CFA, r24
		loopStart=song+1;
    856a:	90 93 7b 0d 	sts	0x0D7B, r25
    856e:	80 93 7a 0d 	sts	0x0D7A, r24
		nextDeltaTime=0;
    8572:	10 92 76 0d 	sts	0x0D76, r1
    8576:	10 92 75 0d 	sts	0x0D75, r1
		currDeltaTime=0;
    857a:	10 92 70 0d 	sts	0x0D70, r1
    857e:	10 92 6f 0d 	sts	0x0D6F, r1
		songSpeed=0;
    8582:	10 92 77 0d 	sts	0x0D77, r1

		lastStatus=0;
    8586:	10 92 73 0d 	sts	0x0D73, r1
		playSong=true;
    858a:	81 e0       	ldi	r24, 0x01	; 1
    858c:	80 93 ce 0c 	sts	0x0CCE, r24
    8590:	08 95       	ret

00008592 <StopSong>:


void StopSong(){

	for(u8 i=0;i<CHANNELS;i++){
		tracks[i].envelopeStep=-6;
    8592:	ec ef       	ldi	r30, 0xFC	; 252
    8594:	fc e0       	ldi	r31, 0x0C	; 12
    8596:	8a ef       	ldi	r24, 0xFA	; 250
    8598:	87 87       	std	Z+15, r24	; 0x0f
    859a:	86 a3       	std	Z+38, r24	; 0x26
    859c:	80 93 39 0d 	sts	0x0D39, r24
    85a0:	80 93 50 0d 	sts	0x0D50, r24
    85a4:	80 93 67 0d 	sts	0x0D67, r24
	}

	playSong=false;
    85a8:	10 92 ce 0c 	sts	0x0CCE, r1
    85ac:	08 95       	ret

000085ae <ReadVarLen>:
}



unsigned int ReadVarLen(const char **songPos)
{
    85ae:	dc 01       	movw	r26, r24
    unsigned int value;
    unsigned char c;


    if ( (value = pgm_read_byte((*songPos)++)) & 0x80 )
    85b0:	ed 91       	ld	r30, X+
    85b2:	fc 91       	ld	r31, X
    85b4:	11 97       	sbiw	r26, 0x01	; 1
    85b6:	9f 01       	movw	r18, r30
    85b8:	2f 5f       	subi	r18, 0xFF	; 255
    85ba:	3f 4f       	sbci	r19, 0xFF	; 255
    85bc:	11 96       	adiw	r26, 0x01	; 1
    85be:	3c 93       	st	X, r19
    85c0:	2e 93       	st	-X, r18
    85c2:	e4 91       	lpm	r30, Z
    85c4:	e7 fd       	sbrc	r30, 7
    85c6:	03 c0       	rjmp	.+6      	; 0x85ce <ReadVarLen+0x20>
    85c8:	8e 2f       	mov	r24, r30
    85ca:	90 e0       	ldi	r25, 0x00	; 0
    85cc:	08 95       	ret
    {
       value &= 0x7F;
    85ce:	ef 77       	andi	r30, 0x7F	; 127
    85d0:	8e 2f       	mov	r24, r30
    85d2:	90 e0       	ldi	r25, 0x00	; 0
       do
       {
         value = (value << 7) + ((c = pgm_read_byte((*songPos)++)) & 0x7F);
    85d4:	96 95       	lsr	r25
    85d6:	98 2f       	mov	r25, r24
    85d8:	88 27       	eor	r24, r24
    85da:	97 95       	ror	r25
    85dc:	87 95       	ror	r24
    85de:	2f 5f       	subi	r18, 0xFF	; 255
    85e0:	3f 4f       	sbci	r19, 0xFF	; 255
    85e2:	f9 01       	movw	r30, r18
    85e4:	31 97       	sbiw	r30, 0x01	; 1
    85e6:	e4 91       	lpm	r30, Z
    85e8:	4e 2f       	mov	r20, r30
    85ea:	4f 77       	andi	r20, 0x7F	; 127
    85ec:	84 0f       	add	r24, r20
    85ee:	91 1d       	adc	r25, r1
       } while (c & 0x80);
    85f0:	e7 fd       	sbrc	r30, 7
    85f2:	f0 cf       	rjmp	.-32     	; 0x85d4 <ReadVarLen+0x26>
    85f4:	2d 93       	st	X+, r18
    85f6:	3c 93       	st	X, r19
    }


    return value;
}
    85f8:	08 95       	ret

000085fa <TriggerCommon>:




void TriggerCommon(Track* track,u8 patch,u8 volume,u8 note){
    85fa:	ef 92       	push	r14
    85fc:	ff 92       	push	r15
    85fe:	0f 93       	push	r16
    8600:	1f 93       	push	r17
    8602:	cf 93       	push	r28
    8604:	df 93       	push	r29
    8606:	1f 92       	push	r1
    8608:	cd b7       	in	r28, 0x3d	; 61
    860a:	de b7       	in	r29, 0x3e	; 62
    860c:	7c 01       	movw	r14, r24
    860e:	16 2f       	mov	r17, r22
		
	bool isFx = (track->flags&TRACK_FLAGS_PRIORITY);
    8610:	fc 01       	movw	r30, r24
    8612:	80 81       	ld	r24, Z
    8614:	08 2f       	mov	r16, r24
    8616:	00 1f       	adc	r16, r16
    8618:	00 27       	eor	r16, r16
    861a:	00 1f       	adc	r16, r16

	track->envelopeStep=0; 
    861c:	17 86       	std	Z+15, r1	; 0x0f
	track->envelopeVol=0xff; 
    861e:	9f ef       	ldi	r25, 0xFF	; 255
    8620:	96 87       	std	Z+14, r25	; 0x0e
	track->noteVol=volume;
    8622:	45 87       	std	Z+13, r20	; 0x0d
	track->patchPlayingTime=0;
    8624:	14 8a       	std	Z+20, r1	; 0x14
	track->flags&=(~(TRACK_FLAGS_HOLD_ENV|TRACK_FLAGS_SLIDING));
    8626:	87 7b       	andi	r24, 0xB7	; 183
    8628:	80 83       	st	Z, r24
	track->tremoloLevel=0;
    862a:	12 86       	std	Z+10, r1	; 0x0a
	track->tremoloPos=0;
    862c:	11 86       	std	Z+9, r1	; 0x09
	track->note=note;
    862e:	21 83       	std	Z+1, r18	; 0x01
	track->loopCount=0;
    8630:	14 82       	std	Z+4, r1	; 0x04

#if MUSIC_ENGINE == MIDI
	track->expressionVol=DEFAULT_EXPRESSION_VOL;
    8632:	93 83       	std	Z+3, r25	; 0x03
#endif

	#if SOUND_MIXER == MIXER_TYPE_INLINE

		if(track->channel==3){
    8634:	82 81       	ldd	r24, Z+2	; 0x02
    8636:	83 30       	cpi	r24, 0x03	; 3
    8638:	69 f4       	brne	.+26     	; 0x8654 <TriggerCommon+0x5a>
			//noise channel		
			if(!isFx) patch=note;			
    863a:	01 11       	cpse	r16, r1
    863c:	01 c0       	rjmp	.+2      	; 0x8640 <TriggerCommon+0x46>
    863e:	12 2f       	mov	r17, r18
			mixer.channels.type.noise.barrel=0x0101;				
    8640:	81 e0       	ldi	r24, 0x01	; 1
    8642:	91 e0       	ldi	r25, 0x01	; 1
    8644:	90 93 e5 0c 	sts	0x0CE5, r25
    8648:	80 93 e4 0c 	sts	0x0CE4, r24
			mixer.channels.type.noise.params=1; //default (15bits,no divider)
    864c:	81 e0       	ldi	r24, 0x01	; 1
    864e:	80 93 e3 0c 	sts	0x0CE3, r24
    8652:	39 c0       	rjmp	.+114    	; 0x86c6 <TriggerCommon+0xcc>

		#if SOUND_CHANNEL_5_ENABLE==1		

		}else if(track->channel==4){
    8654:	84 30       	cpi	r24, 0x04	; 4
    8656:	69 f5       	brne	.+90     	; 0x86b2 <TriggerCommon+0xb8>
				//PCM channel					
				mixer.channels.type.pcm.positionFrac=0;
    8658:	10 92 eb 0c 	sts	0x0CEB, r1
				const char *pos=(const char*)pgm_read_word(&(patchPointers[patch].pcmData));
    865c:	80 91 71 0d 	lds	r24, 0x0D71
    8660:	90 91 72 0d 	lds	r25, 0x0D72
    8664:	f9 e0       	ldi	r31, 0x09	; 9
    8666:	6f 9f       	mul	r22, r31
    8668:	80 0d       	add	r24, r0
    866a:	91 1d       	adc	r25, r1
    866c:	11 24       	eor	r1, r1
    866e:	fc 01       	movw	r30, r24
    8670:	31 96       	adiw	r30, 0x01	; 1
    8672:	a5 91       	lpm	r26, Z+
    8674:	b4 91       	lpm	r27, Z
				mixer.channels.type.pcm.position=pos;				
    8676:	b0 93 ed 0c 	sts	0x0CED, r27
    867a:	a0 93 ec 0c 	sts	0x0CEC, r26
				mixer.pcmLoopLenght=pgm_read_word(&(patchPointers[patch].loopEnd))-pgm_read_word(&(patchPointers[patch].loopStart));
    867e:	ac 01       	movw	r20, r24
    8680:	49 5f       	subi	r20, 0xF9	; 249
    8682:	5f 4f       	sbci	r21, 0xFF	; 255
    8684:	fa 01       	movw	r30, r20
    8686:	65 91       	lpm	r22, Z+
    8688:	74 91       	lpm	r23, Z
    868a:	05 96       	adiw	r24, 0x05	; 5
    868c:	fc 01       	movw	r30, r24
    868e:	85 91       	lpm	r24, Z+
    8690:	94 91       	lpm	r25, Z
    8692:	68 1b       	sub	r22, r24
    8694:	79 0b       	sbc	r23, r25
    8696:	70 93 ef 0c 	sts	0x0CEF, r23
    869a:	60 93 ee 0c 	sts	0x0CEE, r22
				mixer.pcmLoopEnd=pos+pgm_read_word(&(patchPointers[patch].loopEnd));
    869e:	fa 01       	movw	r30, r20
    86a0:	85 91       	lpm	r24, Z+
    86a2:	94 91       	lpm	r25, Z
    86a4:	a8 0f       	add	r26, r24
    86a6:	b9 1f       	adc	r27, r25
    86a8:	b0 93 f1 0c 	sts	0x0CF1, r27
    86ac:	a0 93 f0 0c 	sts	0x0CF0, r26
    86b0:	05 c0       	rjmp	.+10     	; 0x86bc <TriggerCommon+0xc2>
				SetMixerNote(track->channel,note);
		#endif	

		}else{					
			//wave channels					
			SetMixerWave(track->channel,0);//default wave
    86b2:	60 e0       	ldi	r22, 0x00	; 0
    86b4:	29 83       	std	Y+1, r18	; 0x01
    86b6:	0e 94 4c 46 	call	0x8c98	; 0x8c98 <SetMixerWave>
			SetMixerNote(track->channel,note);
    86ba:	29 81       	ldd	r18, Y+1	; 0x01
    86bc:	62 2f       	mov	r22, r18
    86be:	f7 01       	movw	r30, r14
    86c0:	82 81       	ldd	r24, Z+2	; 0x02
    86c2:	0e 94 35 46 	call	0x8c6a	; 0x8c6a <SetMixerNote>
		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
		track->fxPatchNo=patch;
    86c6:	f7 01       	movw	r30, r14

		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
    86c8:	00 23       	and	r16, r16
    86ca:	11 f0       	breq	.+4      	; 0x86d0 <TriggerCommon+0xd6>
		track->fxPatchNo=patch;
    86cc:	11 8b       	std	Z+17, r17	; 0x11
    86ce:	01 c0       	rjmp	.+2      	; 0x86d2 <TriggerCommon+0xd8>
	}else{
		track->patchNo=patch;	
    86d0:	10 8b       	std	Z+16, r17	; 0x10
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
    86d2:	e0 91 71 0d 	lds	r30, 0x0D71
    86d6:	f0 91 72 0d 	lds	r31, 0x0D72
    86da:	39 e0       	ldi	r19, 0x09	; 9
    86dc:	13 9f       	mul	r17, r19
    86de:	e0 0d       	add	r30, r0
    86e0:	f1 1d       	adc	r31, r1
    86e2:	11 24       	eor	r1, r1
    86e4:	33 96       	adiw	r30, 0x03	; 3
    86e6:	85 91       	lpm	r24, Z+
    86e8:	94 91       	lpm	r25, Z
	if(pos==NULL){
		track->patchCommandStreamPos=NULL;
    86ea:	f7 01       	movw	r30, r14
	}else{
		track->patchNo=patch;	
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
	if(pos==NULL){
    86ec:	00 97       	sbiw	r24, 0x00	; 0
    86ee:	19 f4       	brne	.+6      	; 0x86f6 <TriggerCommon+0xfc>
		track->patchCommandStreamPos=NULL;
    86f0:	16 8a       	std	Z+22, r1	; 0x16
    86f2:	15 8a       	std	Z+21, r1	; 0x15
    86f4:	08 c0       	rjmp	.+16     	; 0x8706 <TriggerCommon+0x10c>
	}else{
		track->patchCurrDeltaTime=0;
    86f6:	13 8a       	std	Z+19, r1	; 0x13
		track->patchNextDeltaTime=pgm_read_byte(pos++);
    86f8:	fc 01       	movw	r30, r24
    86fa:	24 91       	lpm	r18, Z
    86fc:	f7 01       	movw	r30, r14
    86fe:	22 8b       	std	Z+18, r18	; 0x12
    8700:	01 96       	adiw	r24, 0x01	; 1
		track->patchCommandStreamPos=pos;
    8702:	96 8b       	std	Z+22, r25	; 0x16
    8704:	85 8b       	std	Z+21, r24	; 0x15
	}

}
    8706:	0f 90       	pop	r0
    8708:	df 91       	pop	r29
    870a:	cf 91       	pop	r28
    870c:	1f 91       	pop	r17
    870e:	0f 91       	pop	r16
    8710:	ff 90       	pop	r15
    8712:	ef 90       	pop	r14
    8714:	08 95       	ret

00008716 <TriggerFx>:

/* Trigger a sound effect.
 * Method allocates the channel based on priority.
 * Retrig: if this fx if already playing on a track, reuse same track.
 */
void TriggerFx(unsigned char patch,unsigned char volume,bool retrig){
    8716:	cf 93       	push	r28
    8718:	df 93       	push	r29
	unsigned char channel;
	
	unsigned char type=(unsigned char)pgm_read_byte(&(patchPointers[patch].type));
    871a:	e0 91 71 0d 	lds	r30, 0x0D71
    871e:	f0 91 72 0d 	lds	r31, 0x0D72
    8722:	99 e0       	ldi	r25, 0x09	; 9
    8724:	89 9f       	mul	r24, r25
    8726:	e0 0d       	add	r30, r0
    8728:	f1 1d       	adc	r31, r1
    872a:	11 24       	eor	r1, r1
    872c:	e4 91       	lpm	r30, Z

	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
    872e:	e1 30       	cpi	r30, 0x01	; 1
    8730:	e9 f0       	breq	.+58     	; 0x876c <TriggerFx+0x56>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
    8732:	e2 30       	cpi	r30, 0x02	; 2
    8734:	e9 f0       	breq	.+58     	; 0x8770 <TriggerFx+0x5a>
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
    8736:	20 91 13 0d 	lds	r18, 0x0D13
    873a:	27 ff       	sbrs	r18, 7
    873c:	1d c0       	rjmp	.+58     	; 0x8778 <TriggerFx+0x62>
    873e:	20 91 24 0d 	lds	r18, 0x0D24
    8742:	28 13       	cpse	r18, r24
    8744:	02 c0       	rjmp	.+4      	; 0x874a <TriggerFx+0x34>
    8746:	41 11       	cpse	r20, r1
    8748:	17 c0       	rjmp	.+46     	; 0x8778 <TriggerFx+0x62>
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
    874a:	20 91 2a 0d 	lds	r18, 0x0D2A
    874e:	27 ff       	sbrs	r18, 7
    8750:	11 c0       	rjmp	.+34     	; 0x8774 <TriggerFx+0x5e>
    8752:	20 91 3b 0d 	lds	r18, 0x0D3B
    8756:	28 13       	cpse	r18, r24
    8758:	02 c0       	rjmp	.+4      	; 0x875e <TriggerFx+0x48>
    875a:	41 11       	cpse	r20, r1
    875c:	0b c0       	rjmp	.+22     	; 0x8774 <TriggerFx+0x5e>
		channel=2;
	}else{
		//both channels have fx playing, use the oldest one
		if(tracks[1].patchPlayingTime>tracks[2].patchPlayingTime){
    875e:	20 91 27 0d 	lds	r18, 0x0D27
    8762:	90 91 3e 0d 	lds	r25, 0x0D3E
    8766:	92 17       	cp	r25, r18
    8768:	28 f4       	brcc	.+10     	; 0x8774 <TriggerFx+0x5e>
    876a:	06 c0       	rjmp	.+12     	; 0x8778 <TriggerFx+0x62>
	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
		//noise or PCM channel fx		
		channel=3;
    876c:	c3 e0       	ldi	r28, 0x03	; 3
    876e:	05 c0       	rjmp	.+10     	; 0x877a <TriggerFx+0x64>
	}else if(type==2){
		channel=4;
    8770:	c4 e0       	ldi	r28, 0x04	; 4
    8772:	03 c0       	rjmp	.+6      	; 0x877a <TriggerFx+0x64>
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
		channel=2;
    8774:	c2 e0       	ldi	r28, 0x02	; 2
    8776:	01 c0       	rjmp	.+2      	; 0x877a <TriggerFx+0x64>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
    8778:	c1 e0       	ldi	r28, 0x01	; 1
			channel=2;
		}
	}				

	Track* track=&tracks[channel];
	track->flags=TRACK_FLAGS_PRIORITY; //priority=1;
    877a:	97 e1       	ldi	r25, 0x17	; 23
    877c:	c9 9f       	mul	r28, r25
    877e:	e0 01       	movw	r28, r0
    8780:	11 24       	eor	r1, r1
    8782:	c4 50       	subi	r28, 0x04	; 4
    8784:	d3 4f       	sbci	r29, 0xF3	; 243
    8786:	90 e8       	ldi	r25, 0x80	; 128
    8788:	98 83       	st	Y, r25
	track->patchCommandStreamPos = NULL;
    878a:	1e 8a       	std	Y+22, r1	; 0x16
    878c:	1d 8a       	std	Y+21, r1	; 0x15
	TriggerCommon(track,patch,volume,80);
    878e:	20 e5       	ldi	r18, 0x50	; 80
    8790:	46 2f       	mov	r20, r22
    8792:	68 2f       	mov	r22, r24
    8794:	ce 01       	movw	r24, r28
    8796:	0e 94 fd 42 	call	0x85fa	; 0x85fa <TriggerCommon>
	track->flags|=TRACK_FLAGS_PLAYING;
    879a:	88 81       	ld	r24, Y
    879c:	80 62       	ori	r24, 0x20	; 32
    879e:	88 83       	st	Y, r24
}
    87a0:	df 91       	pop	r29
    87a2:	cf 91       	pop	r28
    87a4:	08 95       	ret

000087a6 <TriggerNote>:


void TriggerNote(unsigned char channel,unsigned char patch,unsigned char note,unsigned char volume){
    87a6:	cf 93       	push	r28
    87a8:	df 93       	push	r29
	Track* track=&tracks[channel];

	//allow only other music notes 
	if((track->flags&TRACK_FLAGS_PLAYING)==0 || (track->flags&TRACK_FLAGS_PRIORITY)==0){
    87aa:	a8 2f       	mov	r26, r24
    87ac:	b0 e0       	ldi	r27, 0x00	; 0
    87ae:	97 e1       	ldi	r25, 0x17	; 23
    87b0:	89 9f       	mul	r24, r25
    87b2:	f0 01       	movw	r30, r0
    87b4:	11 24       	eor	r1, r1
    87b6:	e4 50       	subi	r30, 0x04	; 4
    87b8:	f3 4f       	sbci	r31, 0xF3	; 243
    87ba:	80 81       	ld	r24, Z
    87bc:	85 ff       	sbrs	r24, 5
    87be:	02 c0       	rjmp	.+4      	; 0x87c4 <TriggerNote+0x1e>
    87c0:	87 fd       	sbrc	r24, 7
    87c2:	2e c0       	rjmp	.+92     	; 0x8820 <TriggerNote+0x7a>
			
		if(volume==0){ //note-off received
    87c4:	21 11       	cpse	r18, r1
    87c6:	18 c0       	rjmp	.+48     	; 0x87f8 <TriggerNote+0x52>

			
			//cut note if there's no envelope & no note hold
			if(track->envelopeStep==0 && !(track->flags&TRACK_FLAGS_HOLD_ENV)){
    87c8:	97 e1       	ldi	r25, 0x17	; 23
    87ca:	9a 9f       	mul	r25, r26
    87cc:	f0 01       	movw	r30, r0
    87ce:	9b 9f       	mul	r25, r27
    87d0:	f0 0d       	add	r31, r0
    87d2:	11 24       	eor	r1, r1
    87d4:	e4 50       	subi	r30, 0x04	; 4
    87d6:	f3 4f       	sbci	r31, 0xF3	; 243
    87d8:	97 85       	ldd	r25, Z+15	; 0x0f
    87da:	91 11       	cpse	r25, r1
    87dc:	02 c0       	rjmp	.+4      	; 0x87e2 <TriggerNote+0x3c>
    87de:	86 ff       	sbrs	r24, 6
				track->noteVol=0;
    87e0:	15 86       	std	Z+13, r1	; 0x0d
			}

			track->flags&=(~TRACK_FLAGS_HOLD_ENV);//patchEnvelopeHold=false;
    87e2:	97 e1       	ldi	r25, 0x17	; 23
    87e4:	9a 9f       	mul	r25, r26
    87e6:	f0 01       	movw	r30, r0
    87e8:	9b 9f       	mul	r25, r27
    87ea:	f0 0d       	add	r31, r0
    87ec:	11 24       	eor	r1, r1
    87ee:	e4 50       	subi	r30, 0x04	; 4
    87f0:	f3 4f       	sbci	r31, 0xF3	; 243
    87f2:	8f 7b       	andi	r24, 0xBF	; 191
    87f4:	80 83       	st	Z, r24
    87f6:	14 c0       	rjmp	.+40     	; 0x8820 <TriggerNote+0x7a>
    87f8:	82 2f       	mov	r24, r18
    87fa:	24 2f       	mov	r18, r20
		}else{
		
			track->flags=0;//&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    87fc:	97 e1       	ldi	r25, 0x17	; 23
    87fe:	9a 9f       	mul	r25, r26
    8800:	e0 01       	movw	r28, r0
    8802:	9b 9f       	mul	r25, r27
    8804:	d0 0d       	add	r29, r0
    8806:	11 24       	eor	r1, r1
    8808:	c4 50       	subi	r28, 0x04	; 4
    880a:	d3 4f       	sbci	r29, 0xF3	; 243
    880c:	18 82       	st	Y, r1
			track->patchCommandStreamPos = NULL;
    880e:	1e 8a       	std	Y+22, r1	; 0x16
    8810:	1d 8a       	std	Y+21, r1	; 0x15
			TriggerCommon(track,patch,volume,note);
    8812:	48 2f       	mov	r20, r24
    8814:	ce 01       	movw	r24, r28
    8816:	0e 94 fd 42 	call	0x85fa	; 0x85fa <TriggerCommon>
			track->flags|=TRACK_FLAGS_PLAYING;
    881a:	88 81       	ld	r24, Y
    881c:	80 62       	ori	r24, 0x20	; 32
    881e:	88 83       	st	Y, r24
		}

	}
}
    8820:	df 91       	pop	r29
    8822:	cf 91       	pop	r28
    8824:	08 95       	ret

00008826 <ProcessMusic>:
	}

#endif


void ProcessMusic(void){
    8826:	6f 92       	push	r6
    8828:	7f 92       	push	r7
    882a:	8f 92       	push	r8
    882c:	9f 92       	push	r9
    882e:	af 92       	push	r10
    8830:	bf 92       	push	r11
    8832:	cf 92       	push	r12
    8834:	df 92       	push	r13
    8836:	ef 92       	push	r14
    8838:	ff 92       	push	r15
    883a:	0f 93       	push	r16
    883c:	1f 93       	push	r17
    883e:	cf 93       	push	r28
    8840:	df 93       	push	r29
    8842:	cc ef       	ldi	r28, 0xFC	; 252
    8844:	dc e0       	ldi	r29, 0x0C	; 12
    8846:	00 ed       	ldi	r16, 0xD0	; 208
    8848:	1c e0       	ldi	r17, 0x0C	; 12
    884a:	d8 01       	movw	r26, r16
    884c:	9e 01       	movw	r18, r28
    884e:	40 e0       	ldi	r20, 0x00	; 0
    8850:	50 e0       	ldi	r21, 0x00	; 0
    8852:	ca 01       	movw	r24, r20
    8854:	84 50       	subi	r24, 0x04	; 4
    8856:	93 4f       	sbci	r25, 0xF3	; 243
    8858:	6c 01       	movw	r12, r24
	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//update envelope
		if(track->envelopeStep!=0){
    885a:	fc 01       	movw	r30, r24
    885c:	87 85       	ldd	r24, Z+15	; 0x0f
    885e:	88 23       	and	r24, r24
    8860:	91 f0       	breq	.+36     	; 0x8886 <ProcessMusic+0x60>
			vol=track->envelopeVol+track->envelopeStep;		
    8862:	66 85       	ldd	r22, Z+14	; 0x0e
    8864:	99 27       	eor	r25, r25
    8866:	87 fd       	sbrc	r24, 7
    8868:	90 95       	com	r25
    886a:	86 0f       	add	r24, r22
    886c:	91 1d       	adc	r25, r1
    886e:	8f 3f       	cpi	r24, 0xFF	; 255
    8870:	91 05       	cpc	r25, r1
    8872:	19 f0       	breq	.+6      	; 0x887a <ProcessMusic+0x54>
    8874:	14 f0       	brlt	.+4      	; 0x887a <ProcessMusic+0x54>
    8876:	8f ef       	ldi	r24, 0xFF	; 255
    8878:	90 e0       	ldi	r25, 0x00	; 0
    887a:	97 ff       	sbrs	r25, 7
    887c:	02 c0       	rjmp	.+4      	; 0x8882 <ProcessMusic+0x5c>
    887e:	80 e0       	ldi	r24, 0x00	; 0
    8880:	90 e0       	ldi	r25, 0x00	; 0
			if(vol<0){
				vol=0;			
			}else if(vol>0xff){
				vol=0xff;						
			}
			track->envelopeVol=vol;
    8882:	f6 01       	movw	r30, r12
    8884:	86 87       	std	Z+14, r24	; 0x0e
		}

		//if volumes reaches zero and no more patch command, explicitly end playing on track
		//if(vol==0 && track->patchCommandStreamPos==NULL) track->flags&=~(TRACK_FLAGS_PLAYING);

		if(track->flags & TRACK_FLAGS_SLIDING){
    8886:	f9 01       	movw	r30, r18
    8888:	f0 80       	ld	r15, Z
    888a:	f3 fe       	sbrs	r15, 3
    888c:	2a c0       	rjmp	.+84     	; 0x88e2 <ProcessMusic+0xbc>

			mixer.channels.all[trackNo].step+=track->slideStep;
    888e:	65 81       	ldd	r22, Z+5	; 0x05
    8890:	76 81       	ldd	r23, Z+6	; 0x06
    8892:	11 96       	adiw	r26, 0x01	; 1
    8894:	8d 91       	ld	r24, X+
    8896:	9c 91       	ld	r25, X
    8898:	12 97       	sbiw	r26, 0x02	; 2
    889a:	86 0f       	add	r24, r22
    889c:	97 1f       	adc	r25, r23
    889e:	12 96       	adiw	r26, 0x02	; 2
    88a0:	9c 93       	st	X, r25
    88a2:	8e 93       	st	-X, r24
    88a4:	11 97       	sbiw	r26, 0x01	; 1
			u16 tStep=pgm_read_word(&(steptable[track->slideNote]));
    88a6:	f6 01       	movw	r30, r12
    88a8:	e7 80       	ldd	r14, Z+7	; 0x07
    88aa:	ee 2d       	mov	r30, r14
    88ac:	f0 e0       	ldi	r31, 0x00	; 0
    88ae:	ee 0f       	add	r30, r30
    88b0:	ff 1f       	adc	r31, r31
    88b2:	e8 5f       	subi	r30, 0xF8	; 248
    88b4:	f2 47       	sbci	r31, 0x72	; 114
    88b6:	c5 90       	lpm	r12, Z+
    88b8:	d4 90       	lpm	r13, Z

			if((track->slideStep>0 && mixer.channels.all[trackNo].step>=tStep) || 
    88ba:	16 16       	cp	r1, r22
    88bc:	17 06       	cpc	r1, r23
    88be:	24 f4       	brge	.+8      	; 0x88c8 <ProcessMusic+0xa2>
    88c0:	8c 15       	cp	r24, r12
    88c2:	9d 05       	cpc	r25, r13
    88c4:	30 f4       	brcc	.+12     	; 0x88d2 <ProcessMusic+0xac>
    88c6:	0d c0       	rjmp	.+26     	; 0x88e2 <ProcessMusic+0xbc>
    88c8:	67 2b       	or	r22, r23
    88ca:	59 f0       	breq	.+22     	; 0x88e2 <ProcessMusic+0xbc>
				(track->slideStep<0 && mixer.channels.all[trackNo].step<=tStep))
    88cc:	c8 16       	cp	r12, r24
    88ce:	d9 06       	cpc	r13, r25
    88d0:	40 f0       	brcs	.+16     	; 0x88e2 <ProcessMusic+0xbc>
			{					
				mixer.channels.all[trackNo].step = tStep;					
    88d2:	12 96       	adiw	r26, 0x02	; 2
    88d4:	dc 92       	st	X, r13
    88d6:	ce 92       	st	-X, r12
    88d8:	11 97       	sbiw	r26, 0x01	; 1
				track->flags &= ~(TRACK_FLAGS_SLIDING);	
    88da:	8f 2d       	mov	r24, r15
    88dc:	87 7f       	andi	r24, 0xF7	; 247
    88de:	f9 01       	movw	r30, r18
    88e0:	80 83       	st	Z, r24
    88e2:	49 5e       	subi	r20, 0xE9	; 233
    88e4:	5f 4f       	sbci	r21, 0xFF	; 255
    88e6:	29 5e       	subi	r18, 0xE9	; 233
    88e8:	3f 4f       	sbci	r19, 0xFF	; 255
    88ea:	16 96       	adiw	r26, 0x06	; 6
	u8 channel;
	Track* track;


	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    88ec:	43 37       	cpi	r20, 0x73	; 115
    88ee:	51 05       	cpc	r21, r1
    88f0:	09 f0       	breq	.+2      	; 0x88f4 <ProcessMusic+0xce>
    88f2:	af cf       	rjmp	.-162    	; 0x8852 <ProcessMusic+0x2c>
	}



	//Process song MIDI notes
	if(playSong){
    88f4:	80 91 ce 0c 	lds	r24, 0x0CCE
    88f8:	88 23       	and	r24, r24
    88fa:	09 f4       	brne	.+2      	; 0x88fe <ProcessMusic+0xd8>
    88fc:	cc c0       	rjmp	.+408    	; 0x8a96 <ProcessMusic+0x270>
							}else if(c1==CONTROLER_EXPRESSION){
								tracks[channel].expressionVol=c2<<1;
							}else if(c1==CONTROLER_TREMOLO){
								tracks[channel].tremoloLevel=c2<<1;
							}else if(c1==CONTROLER_TREMOLO_RATE){
								tracks[channel].tremoloRate=c2<<1;
    88fe:	57 e1       	ldi	r21, 0x17	; 23
    8900:	f5 2e       	mov	r15, r21
	if(playSong){
	
		#if MUSIC_ENGINE == MIDI
			
			//process all simultaneous events
			while(currDeltaTime==nextDeltaTime){
    8902:	80 91 6f 0d 	lds	r24, 0x0D6F
    8906:	90 91 70 0d 	lds	r25, 0x0D70
    890a:	20 91 75 0d 	lds	r18, 0x0D75
    890e:	30 91 76 0d 	lds	r19, 0x0D76
    8912:	82 17       	cp	r24, r18
    8914:	93 07       	cpc	r25, r19
    8916:	09 f0       	breq	.+2      	; 0x891a <ProcessMusic+0xf4>
    8918:	b9 c0       	rjmp	.+370    	; 0x8a8c <ProcessMusic+0x266>

				c1=pgm_read_byte(songPos++);
    891a:	20 91 78 0d 	lds	r18, 0x0D78
    891e:	30 91 79 0d 	lds	r19, 0x0D79
    8922:	b9 01       	movw	r22, r18
    8924:	6f 5f       	subi	r22, 0xFF	; 255
    8926:	7f 4f       	sbci	r23, 0xFF	; 255
    8928:	70 93 79 0d 	sts	0x0D79, r23
    892c:	60 93 78 0d 	sts	0x0D78, r22
    8930:	f9 01       	movw	r30, r18
    8932:	44 91       	lpm	r20, Z
			
				if(c1==0xff){
    8934:	4f 3f       	cpi	r20, 0xFF	; 255
    8936:	79 f5       	brne	.+94     	; 0x8996 <ProcessMusic+0x170>
					//META data type event
					c1=pgm_read_byte(songPos++);
    8938:	a9 01       	movw	r20, r18
    893a:	4e 5f       	subi	r20, 0xFE	; 254
    893c:	5f 4f       	sbci	r21, 0xFF	; 255
    893e:	50 93 79 0d 	sts	0x0D79, r21
    8942:	40 93 78 0d 	sts	0x0D78, r20
    8946:	fb 01       	movw	r30, r22
    8948:	64 91       	lpm	r22, Z

				
					if(c1==0x2f){ //end of song
    894a:	6f 32       	cpi	r22, 0x2F	; 47
    894c:	19 f4       	brne	.+6      	; 0x8954 <ProcessMusic+0x12e>
						playSong=false;
    894e:	10 92 ce 0c 	sts	0x0CCE, r1
						break;	
    8952:	9c c0       	rjmp	.+312    	; 0x8a8c <ProcessMusic+0x266>
					}else if(c1==0x6){ //marker
    8954:	66 30       	cpi	r22, 0x06	; 6
    8956:	09 f0       	breq	.+2      	; 0x895a <ProcessMusic+0x134>
    8958:	8c c0       	rjmp	.+280    	; 0x8a72 <ProcessMusic+0x24c>
						c1=pgm_read_byte(songPos++); //read len
    895a:	fa 01       	movw	r30, r20
    895c:	44 91       	lpm	r20, Z
						c2=pgm_read_byte(songPos++); //read data
    895e:	c9 01       	movw	r24, r18
    8960:	04 96       	adiw	r24, 0x04	; 4
    8962:	90 93 79 0d 	sts	0x0D79, r25
    8966:	80 93 78 0d 	sts	0x0D78, r24
				
					if(c1==0x2f){ //end of song
						playSong=false;
						break;	
					}else if(c1==0x6){ //marker
						c1=pgm_read_byte(songPos++); //read len
    896a:	f9 01       	movw	r30, r18
    896c:	33 96       	adiw	r30, 0x03	; 3
						c2=pgm_read_byte(songPos++); //read data
    896e:	e4 91       	lpm	r30, Z
						if(c2=='S'){ //loop start
    8970:	e3 35       	cpi	r30, 0x53	; 83
    8972:	29 f4       	brne	.+10     	; 0x897e <ProcessMusic+0x158>
							loopStart=songPos;
    8974:	90 93 7b 0d 	sts	0x0D7B, r25
    8978:	80 93 7a 0d 	sts	0x0D7A, r24
    897c:	7a c0       	rjmp	.+244    	; 0x8a72 <ProcessMusic+0x24c>
						}else if(c2=='E'){//loop end
    897e:	e5 34       	cpi	r30, 0x45	; 69
    8980:	09 f0       	breq	.+2      	; 0x8984 <ProcessMusic+0x15e>
    8982:	77 c0       	rjmp	.+238    	; 0x8a72 <ProcessMusic+0x24c>
							songPos=loopStart;
    8984:	80 91 7a 0d 	lds	r24, 0x0D7A
    8988:	90 91 7b 0d 	lds	r25, 0x0D7B
    898c:	90 93 79 0d 	sts	0x0D79, r25
    8990:	80 93 78 0d 	sts	0x0D78, r24
    8994:	6e c0       	rjmp	.+220    	; 0x8a72 <ProcessMusic+0x24c>
					}
				

				}else{

					if(c1&0x80) lastStatus=c1;					
    8996:	47 fd       	sbrc	r20, 7
    8998:	40 93 73 0d 	sts	0x0D73, r20
					channel=lastStatus&0x0f;
    899c:	90 91 73 0d 	lds	r25, 0x0D73
    89a0:	89 2f       	mov	r24, r25
    89a2:	8f 70       	andi	r24, 0x0F	; 15
				
					//get next data byte
					//Note: maybe we should not advance the cursor
					//in case we receive an unsupported command				
					if(c1&0x80) c1=pgm_read_byte(songPos++); 
    89a4:	47 ff       	sbrs	r20, 7
    89a6:	08 c0       	rjmp	.+16     	; 0x89b8 <ProcessMusic+0x192>
    89a8:	2e 5f       	subi	r18, 0xFE	; 254
    89aa:	3f 4f       	sbci	r19, 0xFF	; 255
    89ac:	30 93 79 0d 	sts	0x0D79, r19
    89b0:	20 93 78 0d 	sts	0x0D78, r18
    89b4:	fb 01       	movw	r30, r22
    89b6:	44 91       	lpm	r20, Z

					switch(lastStatus&0xf0){
    89b8:	90 7f       	andi	r25, 0xF0	; 240
    89ba:	90 3b       	cpi	r25, 0xB0	; 176
    89bc:	e1 f0       	breq	.+56     	; 0x89f6 <ProcessMusic+0x1d0>
    89be:	90 3c       	cpi	r25, 0xC0	; 192
    89c0:	09 f4       	brne	.+2      	; 0x89c4 <ProcessMusic+0x19e>
    89c2:	51 c0       	rjmp	.+162    	; 0x8a66 <ProcessMusic+0x240>
    89c4:	90 39       	cpi	r25, 0x90	; 144
    89c6:	09 f0       	breq	.+2      	; 0x89ca <ProcessMusic+0x1a4>
    89c8:	54 c0       	rjmp	.+168    	; 0x8a72 <ProcessMusic+0x24c>

						//note-on
						case 0x90:
							//c1 = note						
							c2=pgm_read_byte(songPos++)<<1; //get volume
    89ca:	e0 91 78 0d 	lds	r30, 0x0D78
    89ce:	f0 91 79 0d 	lds	r31, 0x0D79
    89d2:	9f 01       	movw	r18, r30
    89d4:	2f 5f       	subi	r18, 0xFF	; 255
    89d6:	3f 4f       	sbci	r19, 0xFF	; 255
    89d8:	30 93 79 0d 	sts	0x0D79, r19
    89dc:	20 93 78 0d 	sts	0x0D78, r18
    89e0:	24 91       	lpm	r18, Z
    89e2:	22 0f       	add	r18, r18
						
							if(tracks[channel].flags|TRACK_FLAGS_ALLOCATED){ //allocated==true
								TriggerNote(channel,tracks[channel].patchNo,c1,c2);
    89e4:	f8 9e       	mul	r15, r24
    89e6:	f0 01       	movw	r30, r0
    89e8:	11 24       	eor	r1, r1
    89ea:	e4 50       	subi	r30, 0x04	; 4
    89ec:	f3 4f       	sbci	r31, 0xF3	; 243
    89ee:	60 89       	ldd	r22, Z+16	; 0x10
    89f0:	0e 94 d3 43 	call	0x87a6	; 0x87a6 <TriggerNote>
    89f4:	3e c0       	rjmp	.+124    	; 0x8a72 <ProcessMusic+0x24c>
							break;

						//controllers
						case 0xb0:
							///c1 = controller #
							c2=pgm_read_byte(songPos++); //get controller value
    89f6:	e0 91 78 0d 	lds	r30, 0x0D78
    89fa:	f0 91 79 0d 	lds	r31, 0x0D79
    89fe:	9f 01       	movw	r18, r30
    8a00:	2f 5f       	subi	r18, 0xFF	; 255
    8a02:	3f 4f       	sbci	r19, 0xFF	; 255
    8a04:	30 93 79 0d 	sts	0x0D79, r19
    8a08:	20 93 78 0d 	sts	0x0D78, r18
    8a0c:	e4 91       	lpm	r30, Z
						
							if(c1==CONTROLER_VOL){
    8a0e:	47 30       	cpi	r20, 0x07	; 7
    8a10:	49 f4       	brne	.+18     	; 0x8a24 <ProcessMusic+0x1fe>
								tracks[channel].trackVol=c2<<1;
    8a12:	f8 9e       	mul	r15, r24
    8a14:	d0 01       	movw	r26, r0
    8a16:	11 24       	eor	r1, r1
    8a18:	a4 50       	subi	r26, 0x04	; 4
    8a1a:	b3 4f       	sbci	r27, 0xF3	; 243
    8a1c:	ee 0f       	add	r30, r30
    8a1e:	1c 96       	adiw	r26, 0x0c	; 12
    8a20:	ec 93       	st	X, r30
    8a22:	27 c0       	rjmp	.+78     	; 0x8a72 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_EXPRESSION){
    8a24:	4b 30       	cpi	r20, 0x0B	; 11
    8a26:	49 f4       	brne	.+18     	; 0x8a3a <ProcessMusic+0x214>
								tracks[channel].expressionVol=c2<<1;
    8a28:	f8 9e       	mul	r15, r24
    8a2a:	d0 01       	movw	r26, r0
    8a2c:	11 24       	eor	r1, r1
    8a2e:	a4 50       	subi	r26, 0x04	; 4
    8a30:	b3 4f       	sbci	r27, 0xF3	; 243
    8a32:	ee 0f       	add	r30, r30
    8a34:	13 96       	adiw	r26, 0x03	; 3
    8a36:	ec 93       	st	X, r30
    8a38:	1c c0       	rjmp	.+56     	; 0x8a72 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO){
    8a3a:	4c 35       	cpi	r20, 0x5C	; 92
    8a3c:	49 f4       	brne	.+18     	; 0x8a50 <ProcessMusic+0x22a>
								tracks[channel].tremoloLevel=c2<<1;
    8a3e:	f8 9e       	mul	r15, r24
    8a40:	d0 01       	movw	r26, r0
    8a42:	11 24       	eor	r1, r1
    8a44:	a4 50       	subi	r26, 0x04	; 4
    8a46:	b3 4f       	sbci	r27, 0xF3	; 243
    8a48:	ee 0f       	add	r30, r30
    8a4a:	1a 96       	adiw	r26, 0x0a	; 10
    8a4c:	ec 93       	st	X, r30
    8a4e:	11 c0       	rjmp	.+34     	; 0x8a72 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO_RATE){
    8a50:	44 36       	cpi	r20, 0x64	; 100
    8a52:	79 f4       	brne	.+30     	; 0x8a72 <ProcessMusic+0x24c>
								tracks[channel].tremoloRate=c2<<1;
    8a54:	f8 9e       	mul	r15, r24
    8a56:	d0 01       	movw	r26, r0
    8a58:	11 24       	eor	r1, r1
    8a5a:	a4 50       	subi	r26, 0x04	; 4
    8a5c:	b3 4f       	sbci	r27, 0xF3	; 243
    8a5e:	ee 0f       	add	r30, r30
    8a60:	1b 96       	adiw	r26, 0x0b	; 11
    8a62:	ec 93       	st	X, r30
    8a64:	06 c0       	rjmp	.+12     	; 0x8a72 <ProcessMusic+0x24c>
							break;

						//program change
						case 0xc0:
							// c1 = patch #						
							tracks[channel].patchNo=c1;
    8a66:	f8 9e       	mul	r15, r24
    8a68:	f0 01       	movw	r30, r0
    8a6a:	11 24       	eor	r1, r1
    8a6c:	e4 50       	subi	r30, 0x04	; 4
    8a6e:	f3 4f       	sbci	r31, 0xF3	; 243
    8a70:	40 8b       	std	Z+16, r20	; 0x10


				}//end if(c1==0xff)

				//read next delta time
				nextDeltaTime=ReadVarLen(&songPos);			
    8a72:	88 e7       	ldi	r24, 0x78	; 120
    8a74:	9d e0       	ldi	r25, 0x0D	; 13
    8a76:	0e 94 d7 42 	call	0x85ae	; 0x85ae <ReadVarLen>
    8a7a:	90 93 76 0d 	sts	0x0D76, r25
    8a7e:	80 93 75 0d 	sts	0x0D75, r24
				currDeltaTime=0;
    8a82:	10 92 70 0d 	sts	0x0D70, r1
    8a86:	10 92 6f 0d 	sts	0x0D6F, r1
    8a8a:	3b cf       	rjmp	.-394    	; 0x8902 <ProcessMusic+0xdc>
					}
				#endif

			}//end while
		
			currDeltaTime++;
    8a8c:	01 96       	adiw	r24, 0x01	; 1
    8a8e:	90 93 70 0d 	sts	0x0D70, r25
    8a92:	80 93 6f 0d 	sts	0x0D6F, r24
    8a96:	95 e0       	ldi	r25, 0x05	; 5
    8a98:	a9 2e       	mov	r10, r25
    8a9a:	9d e0       	ldi	r25, 0x0D	; 13
    8a9c:	b9 2e       	mov	r11, r25
    8a9e:	2f e0       	ldi	r18, 0x0F	; 15
    8aa0:	c2 2e       	mov	r12, r18
    8aa2:	2d e0       	ldi	r18, 0x0D	; 13
    8aa4:	d2 2e       	mov	r13, r18
    8aa6:	30 e1       	ldi	r19, 0x10	; 16
    8aa8:	e3 2e       	mov	r14, r19
    8aaa:	3d e0       	ldi	r19, 0x0D	; 13
    8aac:	f3 2e       	mov	r15, r19
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    8aae:	66 24       	eor	r6, r6
    8ab0:	6a 94       	dec	r6
    8ab2:	71 2c       	mov	r7, r1
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//process patch command stream
		if((track->flags & TRACK_FLAGS_PLAYING) && (track->patchCommandStreamPos!=NULL) && ((track->flags & TRACK_FLAGS_HOLD_ENV)==0)){
    8ab4:	88 81       	ld	r24, Y
    8ab6:	85 ff       	sbrs	r24, 5
    8ab8:	42 c0       	rjmp	.+132    	; 0x8b3e <ProcessMusic+0x318>
    8aba:	2d 89       	ldd	r18, Y+21	; 0x15
    8abc:	3e 89       	ldd	r19, Y+22	; 0x16
    8abe:	23 2b       	or	r18, r19
    8ac0:	09 f4       	brne	.+2      	; 0x8ac4 <ProcessMusic+0x29e>
    8ac2:	3d c0       	rjmp	.+122    	; 0x8b3e <ProcessMusic+0x318>
    8ac4:	86 fd       	sbrc	r24, 6
    8ac6:	3b c0       	rjmp	.+118    	; 0x8b3e <ProcessMusic+0x318>
    8ac8:	47 01       	movw	r8, r14
    8aca:	f2 e0       	ldi	r31, 0x02	; 2
    8acc:	8f 1a       	sub	r8, r31
    8ace:	91 08       	sbc	r9, r1

			//process all simultaneous events
			while(track->patchCurrDeltaTime==track->patchNextDeltaTime){
    8ad0:	d6 01       	movw	r26, r12
    8ad2:	9c 91       	ld	r25, X
    8ad4:	f4 01       	movw	r30, r8
    8ad6:	80 81       	ld	r24, Z
    8ad8:	98 13       	cpse	r25, r24
    8ada:	2e c0       	rjmp	.+92     	; 0x8b38 <ProcessMusic+0x312>

				c1=pgm_read_byte(track->patchCommandStreamPos++);
    8adc:	ed 89       	ldd	r30, Y+21	; 0x15
    8ade:	fe 89       	ldd	r31, Y+22	; 0x16
    8ae0:	bf 01       	movw	r22, r30
    8ae2:	6f 5f       	subi	r22, 0xFF	; 255
    8ae4:	7f 4f       	sbci	r23, 0xFF	; 255
    8ae6:	7e 8b       	std	Y+22, r23	; 0x16
    8ae8:	6d 8b       	std	Y+21, r22	; 0x15
    8aea:	84 91       	lpm	r24, Z
				if(c1==PATCH_END){
    8aec:	8f 3f       	cpi	r24, 0xFF	; 255
    8aee:	31 f4       	brne	.+12     	; 0x8afc <ProcessMusic+0x2d6>
					//end of stream!
					track->flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    8af0:	88 81       	ld	r24, Y
    8af2:	8f 77       	andi	r24, 0x7F	; 127
    8af4:	88 83       	st	Y, r24
					track->patchCommandStreamPos=NULL;
    8af6:	1e 8a       	std	Y+22, r1	; 0x16
    8af8:	1d 8a       	std	Y+21, r1	; 0x15
					break;
    8afa:	1e c0       	rjmp	.+60     	; 0x8b38 <ProcessMusic+0x312>

				}else{
					c2=pgm_read_byte(track->patchCommandStreamPos++);
    8afc:	9f 01       	movw	r18, r30
    8afe:	2e 5f       	subi	r18, 0xFE	; 254
    8b00:	3f 4f       	sbci	r19, 0xFF	; 255
    8b02:	3e 8b       	std	Y+22, r19	; 0x16
    8b04:	2d 8b       	std	Y+21, r18	; 0x15
    8b06:	fb 01       	movw	r30, r22
    8b08:	64 91       	lpm	r22, Z
					//invoke patch command function
					((PatchCommand)pgm_read_word(&patchCommands[c1]))(track,c2);
    8b0a:	e8 2f       	mov	r30, r24
    8b0c:	f0 e0       	ldi	r31, 0x00	; 0
    8b0e:	ee 0f       	add	r30, r30
    8b10:	ff 1f       	adc	r31, r31
    8b12:	ee 52       	subi	r30, 0x2E	; 46
    8b14:	ff 4f       	sbci	r31, 0xFF	; 255
    8b16:	25 91       	lpm	r18, Z+
    8b18:	34 91       	lpm	r19, Z
    8b1a:	ce 01       	movw	r24, r28
    8b1c:	f9 01       	movw	r30, r18
    8b1e:	09 95       	icall
				}

				//read next delta time
				track->patchNextDeltaTime=pgm_read_byte(track->patchCommandStreamPos++);
    8b20:	ed 89       	ldd	r30, Y+21	; 0x15
    8b22:	fe 89       	ldd	r31, Y+22	; 0x16
    8b24:	cf 01       	movw	r24, r30
    8b26:	01 96       	adiw	r24, 0x01	; 1
    8b28:	9e 8b       	std	Y+22, r25	; 0x16
    8b2a:	8d 8b       	std	Y+21, r24	; 0x15
    8b2c:	e4 91       	lpm	r30, Z
    8b2e:	d4 01       	movw	r26, r8
    8b30:	ec 93       	st	X, r30
				track->patchCurrDeltaTime=0;
    8b32:	f6 01       	movw	r30, r12
    8b34:	10 82       	st	Z, r1
    8b36:	cc cf       	rjmp	.-104    	; 0x8ad0 <ProcessMusic+0x2aa>
			}

			track->patchCurrDeltaTime++;
    8b38:	9f 5f       	subi	r25, 0xFF	; 255
    8b3a:	d6 01       	movw	r26, r12
    8b3c:	9c 93       	st	X, r25
		}

		if(track->flags & TRACK_FLAGS_PLAYING){
    8b3e:	98 81       	ld	r25, Y
    8b40:	95 ff       	sbrs	r25, 5
    8b42:	6c c0       	rjmp	.+216    	; 0x8c1c <ProcessMusic+0x3f6>

			if(track->patchPlayingTime<0xff){
    8b44:	f7 01       	movw	r30, r14
    8b46:	80 81       	ld	r24, Z
    8b48:	8f 3f       	cpi	r24, 0xFF	; 255
    8b4a:	11 f0       	breq	.+4      	; 0x8b50 <ProcessMusic+0x32a>
				track->patchPlayingTime++;
    8b4c:	8f 5f       	subi	r24, 0xFF	; 255
    8b4e:	80 83       	st	Z, r24
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
    8b50:	97 fd       	sbrc	r25, 7
    8b52:	04 c0       	rjmp	.+8      	; 0x8b5c <ProcessMusic+0x336>
    8b54:	f7 01       	movw	r30, r14
    8b56:	38 97       	sbiw	r30, 0x08	; 8
				//if an FX, use full track volume.
				trackVol=0xff;
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
    8b58:	90 81       	ld	r25, Z
    8b5a:	01 c0       	rjmp	.+2      	; 0x8b5e <ProcessMusic+0x338>
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
				//if an FX, use full track volume.
				trackVol=0xff;
    8b5c:	9f ef       	ldi	r25, 0xFF	; 255
    8b5e:	f7 01       	movw	r30, r14
    8b60:	37 97       	sbiw	r30, 0x07	; 7
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
			}
			if(track->noteVol!=0 && track->envelopeVol!=0 && trackVol!=0 && masterVolume!=0){
    8b62:	80 81       	ld	r24, Z
    8b64:	88 23       	and	r24, r24
    8b66:	09 f4       	brne	.+2      	; 0x8b6a <ProcessMusic+0x344>
    8b68:	4e c0       	rjmp	.+156    	; 0x8c06 <ProcessMusic+0x3e0>
    8b6a:	31 96       	adiw	r30, 0x01	; 1
    8b6c:	50 81       	ld	r21, Z
    8b6e:	55 23       	and	r21, r21
    8b70:	09 f4       	brne	.+2      	; 0x8b74 <ProcessMusic+0x34e>
    8b72:	49 c0       	rjmp	.+146    	; 0x8c06 <ProcessMusic+0x3e0>
    8b74:	99 23       	and	r25, r25
    8b76:	09 f4       	brne	.+2      	; 0x8b7a <ProcessMusic+0x354>
    8b78:	46 c0       	rjmp	.+140    	; 0x8c06 <ProcessMusic+0x3e0>
    8b7a:	40 91 74 0d 	lds	r20, 0x0D74
    8b7e:	44 23       	and	r20, r20
    8b80:	09 f4       	brne	.+2      	; 0x8b84 <ProcessMusic+0x35e>
    8b82:	41 c0       	rjmp	.+130    	; 0x8c06 <ProcessMusic+0x3e0>

				uVol=(track->noteVol*trackVol)+0x100;
    8b84:	89 9f       	mul	r24, r25
    8b86:	c0 01       	movw	r24, r0
    8b88:	11 24       	eor	r1, r1
    8b8a:	93 95       	inc	r25
				uVol>>=8;
    8b8c:	89 2f       	mov	r24, r25
    8b8e:	99 27       	eor	r25, r25
				
				uVol=(uVol*track->envelopeVol)+0x100;
    8b90:	58 9f       	mul	r21, r24
    8b92:	90 01       	movw	r18, r0
    8b94:	59 9f       	mul	r21, r25
    8b96:	30 0d       	add	r19, r0
    8b98:	11 24       	eor	r1, r1
    8b9a:	c9 01       	movw	r24, r18
    8b9c:	93 95       	inc	r25
				uVol>>=8;
    8b9e:	89 2f       	mov	r24, r25
    8ba0:	99 27       	eor	r25, r25
    8ba2:	3b 97       	sbiw	r30, 0x0b	; 11
				
				#if MUSIC_ENGINE == MIDI
					uVol=(uVol*track->expressionVol)+0x100;
    8ba4:	50 81       	ld	r21, Z
    8ba6:	58 9f       	mul	r21, r24
    8ba8:	90 01       	movw	r18, r0
    8baa:	59 9f       	mul	r21, r25
    8bac:	30 0d       	add	r19, r0
    8bae:	11 24       	eor	r1, r1
    8bb0:	33 95       	inc	r19
					uVol>>=8;
    8bb2:	23 2f       	mov	r18, r19
    8bb4:	33 27       	eor	r19, r19
				#endif
				
				uVol=(uVol*masterVolume)+0x100;
    8bb6:	42 9f       	mul	r20, r18
    8bb8:	c0 01       	movw	r24, r0
    8bba:	43 9f       	mul	r20, r19
    8bbc:	90 0d       	add	r25, r0
    8bbe:	11 24       	eor	r1, r1
    8bc0:	93 95       	inc	r25
				uVol>>=8;
    8bc2:	89 2f       	mov	r24, r25
    8bc4:	99 27       	eor	r25, r25
    8bc6:	37 96       	adiw	r30, 0x07	; 7

				if(track->tremoloLevel>0){					
    8bc8:	20 81       	ld	r18, Z
    8bca:	22 23       	and	r18, r18
    8bcc:	f1 f0       	breq	.+60     	; 0x8c0a <ProcessMusic+0x3e4>
					tmp=pgm_read_byte(&(waves[track->tremoloPos]));
    8bce:	d5 01       	movw	r26, r10
    8bd0:	ec 91       	ld	r30, X
    8bd2:	f0 e0       	ldi	r31, 0x00	; 0
    8bd4:	e0 50       	subi	r30, 0x00	; 0
    8bd6:	f1 47       	sbci	r31, 0x71	; 113
    8bd8:	e4 91       	lpm	r30, Z
					tmp-=128; //convert to unsigned
    8bda:	e0 58       	subi	r30, 0x80	; 128

					tVol=(track->tremoloLevel*tmp)+0x100;
    8bdc:	2e 9f       	mul	r18, r30
    8bde:	f0 01       	movw	r30, r0
    8be0:	11 24       	eor	r1, r1
    8be2:	f3 95       	inc	r31
					tVol>>=8;
    8be4:	ef 2f       	mov	r30, r31
    8be6:	ff 27       	eor	r31, r31
					
					uVol=(uVol*(0xff-tVol))+0x100;
    8be8:	a3 01       	movw	r20, r6
    8bea:	4e 1b       	sub	r20, r30
    8bec:	5f 0b       	sbc	r21, r31
    8bee:	48 9f       	mul	r20, r24
    8bf0:	90 01       	movw	r18, r0
    8bf2:	49 9f       	mul	r20, r25
    8bf4:	30 0d       	add	r19, r0
    8bf6:	58 9f       	mul	r21, r24
    8bf8:	30 0d       	add	r19, r0
    8bfa:	11 24       	eor	r1, r1
    8bfc:	c9 01       	movw	r24, r18
    8bfe:	93 95       	inc	r25
					uVol>>=8;
    8c00:	89 2f       	mov	r24, r25
    8c02:	99 27       	eor	r25, r25
    8c04:	02 c0       	rjmp	.+4      	; 0x8c0a <ProcessMusic+0x3e4>
				}

			
			}else{
				uVol=0;
    8c06:	80 e0       	ldi	r24, 0x00	; 0
    8c08:	90 e0       	ldi	r25, 0x00	; 0
			}	

			track->tremoloPos+=track->tremoloRate;	
    8c0a:	f5 01       	movw	r30, r10
    8c0c:	30 81       	ld	r19, Z
    8c0e:	f7 01       	movw	r30, r14
    8c10:	39 97       	sbiw	r30, 0x09	; 9
    8c12:	20 81       	ld	r18, Z
    8c14:	23 0f       	add	r18, r19
    8c16:	d5 01       	movw	r26, r10
    8c18:	2c 93       	st	X, r18
    8c1a:	02 c0       	rjmp	.+4      	; 0x8c20 <ProcessMusic+0x3fa>

		}else{
			uVol=0;
    8c1c:	80 e0       	ldi	r24, 0x00	; 0
    8c1e:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
    8c20:	f8 01       	movw	r30, r16
    8c22:	80 83       	st	Z, r24
    8c24:	67 96       	adiw	r28, 0x17	; 23
    8c26:	0a 5f       	subi	r16, 0xFA	; 250
    8c28:	1f 4f       	sbci	r17, 0xFF	; 255
    8c2a:	f7 e1       	ldi	r31, 0x17	; 23
    8c2c:	af 0e       	add	r10, r31
    8c2e:	b1 1c       	adc	r11, r1
    8c30:	87 e1       	ldi	r24, 0x17	; 23
    8c32:	c8 0e       	add	r12, r24
    8c34:	d1 1c       	adc	r13, r1
    8c36:	97 e1       	ldi	r25, 0x17	; 23
    8c38:	e9 0e       	add	r14, r25
    8c3a:	f1 1c       	adc	r15, r1


	//
	// Process patches command streams & final volume
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    8c3c:	ad e0       	ldi	r26, 0x0D	; 13
    8c3e:	cf 36       	cpi	r28, 0x6F	; 111
    8c40:	da 07       	cpc	r29, r26
    8c42:	09 f0       	breq	.+2      	; 0x8c46 <ProcessMusic+0x420>
    8c44:	37 cf       	rjmp	.-402    	; 0x8ab4 <ProcessMusic+0x28e>
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
	}
	
}
    8c46:	df 91       	pop	r29
    8c48:	cf 91       	pop	r28
    8c4a:	1f 91       	pop	r17
    8c4c:	0f 91       	pop	r16
    8c4e:	ff 90       	pop	r15
    8c50:	ef 90       	pop	r14
    8c52:	df 90       	pop	r13
    8c54:	cf 90       	pop	r12
    8c56:	bf 90       	pop	r11
    8c58:	af 90       	pop	r10
    8c5a:	9f 90       	pop	r9
    8c5c:	8f 90       	pop	r8
    8c5e:	7f 90       	pop	r7
    8c60:	6f 90       	pop	r6
    8c62:	08 95       	ret

00008c64 <SetMasterVolume>:
}



void SetMasterVolume(unsigned char vol){
	masterVolume=vol;
    8c64:	80 93 74 0d 	sts	0x0D74, r24
    8c68:	08 95       	ret

00008c6a <SetMixerNote>:
; r22: -MIDI note, 69=A5(440) for waves channels (0,1,2)
;      -Noise params for channel 3
;***********************
.section .text.SetMixerNote
SetMixerNote:
	clr r25
    8c6a:	99 27       	eor	r25, r25
	clr r23
    8c6c:	77 27       	eor	r23, r23
	#if SOUND_MIXER == MIXER_TYPE_VSYNC
		cpi r24,3
		brlo set_note_waves
		ret		
	#else
		cpi r24,3
    8c6e:	83 30       	cpi	r24, 0x03	; 3
		brne set_note_waves		
    8c70:	09 f4       	brne	.+2      	; 0x8c74 <set_note_waves>
		ret
    8c72:	08 95       	ret

00008c74 <set_note_waves>:
	#endif
#endif

set_note_waves:
	;get step for note
	ldi ZL,lo8(steptable)
    8c74:	e8 e0       	ldi	r30, 0x08	; 8
	ldi ZH,hi8(steptable)
    8c76:	fd e8       	ldi	r31, 0x8D	; 141
	lsl r22
    8c78:	66 0f       	add	r22, r22
	rol r23
    8c7a:	77 1f       	adc	r23, r23
	add ZL,r22
    8c7c:	e6 0f       	add	r30, r22
	adc ZH,r23	
    8c7e:	f7 1f       	adc	r31, r23

	lpm r26,Z+
    8c80:	a5 91       	lpm	r26, Z+
	lpm r27,Z
    8c82:	b4 91       	lpm	r27, Z

	ldi ZL,lo8(mixerStruct)
    8c84:	e0 ed       	ldi	r30, 0xD0	; 208
	ldi ZH,hi8(mixerStruct)
    8c86:	fc e0       	ldi	r31, 0x0C	; 12
	ldi r18,CHANNEL_STRUCT_SIZE
    8c88:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24
    8c8a:	28 9f       	mul	r18, r24
	add ZL,r0
    8c8c:	e0 0d       	add	r30, r0
	adc ZH,r1
    8c8e:	f1 1d       	adc	r31, r1
	
	std Z+step_lo,r26
    8c90:	a1 83       	std	Z+1, r26	; 0x01
	std Z+step_hi,r27
    8c92:	b2 83       	std	Z+2, r27	; 0x02
	
	clr r1
    8c94:	11 24       	eor	r1, r1
	

	ret
    8c96:	08 95       	ret

00008c98 <SetMixerWave>:
;         Noise channel: 0xfe=7 bit lfsr, 0xff=15 bit lfsr
;                 
;***********************
.section .text.SetMixerWave
SetMixerWave:
	clr r25
    8c98:	99 27       	eor	r25, r25
	clr r23
    8c9a:	77 27       	eor	r23, r23

	ldi ZL,lo8(mixerStruct)
    8c9c:	e0 ed       	ldi	r30, 0xD0	; 208
	ldi ZH,hi8(mixerStruct)
    8c9e:	fc e0       	ldi	r31, 0x0C	; 12
	ldi r18,CHANNEL_STRUCT_SIZE
    8ca0:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24	
    8ca2:	28 9f       	mul	r18, r24
	add ZL,r0
    8ca4:	e0 0d       	add	r30, r0
	adc ZH,r1
    8ca6:	f1 1d       	adc	r31, r1

#if MIXER_CHAN4_TYPE == 0
	cpi r22,0xfe	;7bit lfsr
    8ca8:	6e 3f       	cpi	r22, 0xFE	; 254
	brne smw1
    8caa:	31 f4       	brne	.+12     	; 0x8cb8 <smw1>
	lds r22,tr4_params
    8cac:	60 91 e3 0c 	lds	r22, 0x0CE3
	andi r22,0xfe;
    8cb0:	6e 7f       	andi	r22, 0xFE	; 254
	sts tr4_params,r22
    8cb2:	60 93 e3 0c 	sts	0x0CE3, r22
	rjmp esmw	
    8cb6:	0b c0       	rjmp	.+22     	; 0x8cce <esmw>

00008cb8 <smw1>:
smw1:
	cpi r22,0xff	;15bit lfsr
    8cb8:	6f 3f       	cpi	r22, 0xFF	; 255
	brne smw2
    8cba:	31 f4       	brne	.+12     	; 0x8cc8 <smw2>
	lds r22,tr4_params
    8cbc:	60 91 e3 0c 	lds	r22, 0x0CE3
	ori r22,0xfe;
    8cc0:	6e 6f       	ori	r22, 0xFE	; 254
	sts tr4_params,r22	
    8cc2:	60 93 e3 0c 	sts	0x0CE3, r22
	rjmp esmw
    8cc6:	03 c0       	rjmp	.+6      	; 0x8cce <esmw>

00008cc8 <smw2>:
smw2:
#endif

	ldi r23,hi8(waves)
    8cc8:	7f e8       	ldi	r23, 0x8F	; 143
	add r23,r22
    8cca:	76 0f       	add	r23, r22
	std Z+samplepos_hi,r23 ;store path No
    8ccc:	75 83       	std	Z+5, r23	; 0x05

00008cce <esmw>:

esmw:
	clr r1	
    8cce:	11 24       	eor	r1, r1
	ret
    8cd0:	08 95       	ret
	...

00008d00 <DisableSoundEngine>:
; no CPU cycles are consumed.
; C-callable
;*****************************
.section .text.DisableSoundEngine
DisableSoundEngine:	
	ldi r24,0
    8d00:	80 e0       	ldi	r24, 0x00	; 0
	sts sound_enabled,r24
    8d02:	80 93 cf 0c 	sts	0x0CCF, r24
	ret
    8d06:	08 95       	ret

00008d08 <steptable>:
    8d08:	22 00       	.word	0x0022	; ????
    8d0a:	24 00       	.word	0x0024	; ????
    8d0c:	26 00       	.word	0x0026	; ????
    8d0e:	28 00       	.word	0x0028	; ????
    8d10:	2b 00       	.word	0x002b	; ????
    8d12:	2d 00       	.word	0x002d	; ????
    8d14:	30 00       	.word	0x0030	; ????
    8d16:	33 00       	.word	0x0033	; ????
    8d18:	36 00       	.word	0x0036	; ????
    8d1a:	39 00       	.word	0x0039	; ????
    8d1c:	3d 00       	.word	0x003d	; ????
    8d1e:	40 00       	.word	0x0040	; ????
    8d20:	44 00       	.word	0x0044	; ????
    8d22:	48 00       	.word	0x0048	; ????
    8d24:	4c 00       	.word	0x004c	; ????
    8d26:	51 00       	.word	0x0051	; ????
    8d28:	56 00       	.word	0x0056	; ????
    8d2a:	5b 00       	.word	0x005b	; ????
    8d2c:	60 00       	.word	0x0060	; ????
    8d2e:	66 00       	.word	0x0066	; ????
    8d30:	6c 00       	.word	0x006c	; ????
    8d32:	73 00       	.word	0x0073	; ????
    8d34:	79 00       	.word	0x0079	; ????
    8d36:	81 00       	.word	0x0081	; ????
    8d38:	88 00       	.word	0x0088	; ????
    8d3a:	90 00       	.word	0x0090	; ????
    8d3c:	99 00       	.word	0x0099	; ????
    8d3e:	a2 00       	.word	0x00a2	; ????
    8d40:	ac 00       	.word	0x00ac	; ????
    8d42:	b6 00       	.word	0x00b6	; ????
    8d44:	c1 00       	.word	0x00c1	; ????
    8d46:	cc 00       	.word	0x00cc	; ????
    8d48:	d8 00       	.word	0x00d8	; ????
    8d4a:	e5 00       	.word	0x00e5	; ????
    8d4c:	f3 00       	.word	0x00f3	; ????
    8d4e:	01 01       	movw	r0, r2
    8d50:	10 01       	movw	r2, r0
    8d52:	21 01       	movw	r4, r2
    8d54:	32 01       	movw	r6, r4
    8d56:	44 01       	movw	r8, r8
    8d58:	57 01       	movw	r10, r14
    8d5a:	6c 01       	movw	r12, r24
    8d5c:	81 01       	movw	r16, r2
    8d5e:	98 01       	movw	r18, r16
    8d60:	b0 01       	movw	r22, r0
    8d62:	ca 01       	movw	r24, r20
    8d64:	e5 01       	movw	r28, r10
    8d66:	02 02       	muls	r16, r18
    8d68:	21 02       	muls	r18, r17
    8d6a:	41 02       	muls	r20, r17
    8d6c:	64 02       	muls	r22, r20
    8d6e:	88 02       	muls	r24, r24
    8d70:	ae 02       	muls	r26, r30
    8d72:	d7 02       	muls	r29, r23
    8d74:	03 03       	mulsu	r16, r19
    8d76:	30 03       	mulsu	r19, r16
    8d78:	61 03       	mulsu	r22, r17
    8d7a:	94 03       	fmuls	r17, r20
    8d7c:	cb 03       	fmulsu	r20, r19
    8d7e:	05 04       	cpc	r0, r5
    8d80:	42 04       	cpc	r4, r2
    8d82:	83 04       	cpc	r8, r3
    8d84:	c7 04       	cpc	r12, r7
    8d86:	10 05       	cpc	r17, r0
    8d88:	5d 05       	cpc	r21, r13
    8d8a:	af 05       	cpc	r26, r15
    8d8c:	05 06       	cpc	r0, r21
    8d8e:	61 06       	cpc	r6, r17
    8d90:	c2 06       	cpc	r12, r18
    8d92:	29 07       	cpc	r18, r25
    8d94:	96 07       	cpc	r25, r22
    8d96:	09 08       	sbc	r0, r9
    8d98:	83 08       	sbc	r8, r3
    8d9a:	05 09       	sbc	r16, r5
    8d9c:	8e 09       	sbc	r24, r14
    8d9e:	20 0a       	sbc	r2, r16
    8da0:	ba 0a       	sbc	r11, r26
    8da2:	5d 0b       	sbc	r21, r29
    8da4:	0a 0c       	add	r0, r10
    8da6:	c1 0c       	add	r12, r1
    8da8:	84 0d       	add	r24, r4
    8daa:	51 0e       	add	r5, r17
    8dac:	2b 0f       	add	r18, r27
    8dae:	12 10       	cpse	r1, r2
    8db0:	07 11       	cpse	r16, r7
    8db2:	0a 12       	cpse	r0, r26
    8db4:	1d 13       	cpse	r17, r29
    8db6:	40 14       	cp	r4, r0
    8db8:	74 15       	cp	r23, r4
    8dba:	ba 16       	cp	r11, r26
    8dbc:	14 18       	sub	r1, r4
    8dbe:	83 19       	sub	r24, r3
    8dc0:	07 1b       	sub	r16, r23
    8dc2:	a3 1c       	adc	r10, r3
    8dc4:	57 1e       	adc	r5, r23
    8dc6:	24 20       	and	r2, r4
    8dc8:	0e 22       	and	r0, r30
    8dca:	14 24       	eor	r1, r4
    8dcc:	39 26       	eor	r3, r25
    8dce:	7f 28       	or	r7, r15
    8dd0:	e8 2a       	or	r14, r24
    8dd2:	75 2d       	mov	r23, r5
    8dd4:	29 30       	cpi	r18, 0x09	; 9
    8dd6:	06 33       	cpi	r16, 0x36	; 54
    8dd8:	0f 36       	cpi	r16, 0x6F	; 111
    8dda:	45 39       	cpi	r20, 0x95	; 149
    8ddc:	ad 3c       	cpi	r26, 0xCD	; 205
    8dde:	49 40       	sbci	r20, 0x09	; 9
    8de0:	1b 44       	sbci	r17, 0x4B	; 75
    8de2:	28 48       	sbci	r18, 0x88	; 136
    8de4:	73 4c       	sbci	r23, 0xC3	; 195
    8de6:	fe 50       	subi	r31, 0x0E	; 14
    8de8:	cf 55       	subi	r28, 0x5F	; 95
    8dea:	ea 5a       	subi	r30, 0xAA	; 170
    8dec:	51 60       	ori	r21, 0x01	; 1
    8dee:	0c 66       	ori	r16, 0x6C	; 108
    8df0:	1d 6c       	ori	r17, 0xCD	; 205
    8df2:	8b 72       	andi	r24, 0x2B	; 43
    8df4:	5a 79       	andi	r21, 0x9A	; 154
    8df6:	92 80       	ldd	r9, Z+2	; 0x02
    8df8:	37 88       	ldd	r3, Z+23	; 0x17
    8dfa:	50 90 e5 98 	lds	r5, 0x98E5
    8dfe:	fd a1       	ldd	r31, Y+37	; 0x25
    8e00:	9f ab       	std	Y+55, r25	; 0x37
    8e02:	d3 b5       	in	r29, 0x23	; 35
    8e04:	a3 c0       	rjmp	.+326    	; 0x8f4c <waves+0x4c>
	...

00008f00 <waves>:
    8f00:	00 03       	mulsu	r16, r16
    8f02:	06 09       	sbc	r16, r6
    8f04:	0c 10       	cpse	r0, r12
    8f06:	13 16       	cp	r1, r19
    8f08:	19 1c       	adc	r1, r9
    8f0a:	1f 22       	and	r1, r31
    8f0c:	25 28       	or	r2, r5
    8f0e:	2b 2e       	mov	r2, r27
    8f10:	31 33       	cpi	r19, 0x31	; 49
    8f12:	36 39       	cpi	r19, 0x96	; 150
    8f14:	3c 3f       	cpi	r19, 0xFC	; 252
    8f16:	41 44       	sbci	r20, 0x41	; 65
    8f18:	47 49       	sbci	r20, 0x97	; 151
    8f1a:	4c 4e       	sbci	r20, 0xEC	; 236
    8f1c:	51 53       	subi	r21, 0x31	; 49
    8f1e:	55 58       	subi	r21, 0x85	; 133
    8f20:	5a 5c       	subi	r21, 0xCA	; 202
    8f22:	5e 60       	ori	r21, 0x0E	; 14
    8f24:	62 64       	ori	r22, 0x42	; 66
    8f26:	66 68       	ori	r22, 0x86	; 134
    8f28:	6a 6b       	ori	r22, 0xBA	; 186
    8f2a:	6d 6f       	ori	r22, 0xFD	; 253
    8f2c:	70 71       	andi	r23, 0x10	; 16
    8f2e:	73 74       	andi	r23, 0x43	; 67
    8f30:	75 76       	andi	r23, 0x65	; 101
    8f32:	78 79       	andi	r23, 0x98	; 152
    8f34:	7a 7a       	andi	r23, 0xAA	; 170
    8f36:	7b 7c       	andi	r23, 0xCB	; 203
    8f38:	7d 7d       	andi	r23, 0xDD	; 221
    8f3a:	7e 7e       	andi	r23, 0xEE	; 238
    8f3c:	7e 7f       	andi	r23, 0xFE	; 254
    8f3e:	7f 7f       	andi	r23, 0xFF	; 255
    8f40:	7f 7f       	andi	r23, 0xFF	; 255
    8f42:	7f 7f       	andi	r23, 0xFF	; 255
    8f44:	7e 7e       	andi	r23, 0xEE	; 238
    8f46:	7e 7d       	andi	r23, 0xDE	; 222
    8f48:	7d 7c       	andi	r23, 0xCD	; 205
    8f4a:	7b 7a       	andi	r23, 0xAB	; 171
    8f4c:	7a 79       	andi	r23, 0x9A	; 154
    8f4e:	78 76       	andi	r23, 0x68	; 104
    8f50:	75 74       	andi	r23, 0x45	; 69
    8f52:	73 71       	andi	r23, 0x13	; 19
    8f54:	70 6f       	ori	r23, 0xF0	; 240
    8f56:	6d 6b       	ori	r22, 0xBD	; 189
    8f58:	6a 68       	ori	r22, 0x8A	; 138
    8f5a:	66 64       	ori	r22, 0x46	; 70
    8f5c:	62 60       	ori	r22, 0x02	; 2
    8f5e:	5e 5c       	subi	r21, 0xCE	; 206
    8f60:	5a 58       	subi	r21, 0x8A	; 138
    8f62:	55 53       	subi	r21, 0x35	; 53
    8f64:	51 4e       	sbci	r21, 0xE1	; 225
    8f66:	4c 49       	sbci	r20, 0x9C	; 156
    8f68:	47 44       	sbci	r20, 0x47	; 71
    8f6a:	41 3f       	cpi	r20, 0xF1	; 241
    8f6c:	3c 39       	cpi	r19, 0x9C	; 156
    8f6e:	36 33       	cpi	r19, 0x36	; 54
    8f70:	31 2e       	mov	r3, r17
    8f72:	2b 28       	or	r2, r11
    8f74:	25 22       	and	r2, r21
    8f76:	1f 1c       	adc	r1, r15
    8f78:	19 16       	cp	r1, r25
    8f7a:	13 10       	cpse	r1, r3
    8f7c:	0c 09       	sbc	r16, r12
    8f7e:	06 03       	mulsu	r16, r22
    8f80:	00 fd       	sbrc	r16, 0
    8f82:	fa f7       	brpl	.-2      	; 0x8f82 <waves+0x82>
    8f84:	f4 f0       	brlt	.+60     	; 0x8fc2 <waves+0xc2>
    8f86:	ed ea       	ldi	r30, 0xAD	; 173
    8f88:	e7 e4       	ldi	r30, 0x47	; 71
    8f8a:	e1 de       	rcall	.-574    	; 0x8d4e <steptable+0x46>
    8f8c:	db d8       	rcall	.-3658   	; 0x8144 <FormatEeprom+0xc>
    8f8e:	d5 d2       	rcall	.+1450   	; 0x953a <waves+0x63a>
    8f90:	cf cd       	rjmp	.-1122   	; 0x8b30 <ProcessMusic+0x30a>
    8f92:	ca c7       	rjmp	.+3988   	; 0x9f28 <LBPrintChar+0x2c>
    8f94:	c4 c1       	rjmp	.+904    	; 0x931e <waves+0x41e>
    8f96:	bf bc       	out	0x2f, r11	; 47
    8f98:	b9 b7       	in	r27, 0x39	; 57
    8f9a:	b4 b2       	in	r11, 0x14	; 20
    8f9c:	af ad       	ldd	r26, Y+63	; 0x3f
    8f9e:	ab a8       	ldd	r10, Y+51	; 0x33
    8fa0:	a6 a4       	ldd	r10, Z+46	; 0x2e
    8fa2:	a2 a0       	ldd	r10, Z+34	; 0x22
    8fa4:	9e 9c       	mul	r9, r14
    8fa6:	9a 98       	cbi	0x13, 2	; 19
    8fa8:	96 95       	lsr	r25
    8faa:	93 91       	.word	0x9193	; ????
    8fac:	90 8f       	std	Z+24, r25	; 0x18
    8fae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    8fb0:	8b 8a       	std	Y+19, r8	; 0x13
    8fb2:	88 87       	std	Y+8, r24	; 0x08
    8fb4:	86 86       	std	Z+14, r8	; 0x0e
    8fb6:	85 84       	ldd	r8, Z+13	; 0x0d
    8fb8:	83 83       	std	Z+3, r24	; 0x03
    8fba:	82 82       	std	Z+2, r8	; 0x02
    8fbc:	82 81       	ldd	r24, Z+2	; 0x02
    8fbe:	81 81       	ldd	r24, Z+1	; 0x01
    8fc0:	81 81       	ldd	r24, Z+1	; 0x01
    8fc2:	81 81       	ldd	r24, Z+1	; 0x01
    8fc4:	82 82       	std	Z+2, r8	; 0x02
    8fc6:	82 83       	std	Z+2, r24	; 0x02
    8fc8:	83 84       	ldd	r8, Z+11	; 0x0b
    8fca:	85 86       	std	Z+13, r8	; 0x0d
    8fcc:	86 87       	std	Z+14, r24	; 0x0e
    8fce:	88 8a       	std	Y+16, r8	; 0x10
    8fd0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    8fd2:	8d 8f       	std	Y+29, r24	; 0x1d
    8fd4:	90 91 93 95 	lds	r25, 0x9593
    8fd8:	96 98       	cbi	0x12, 6	; 18
    8fda:	9a 9c       	mul	r9, r10
    8fdc:	9e a0       	ldd	r9, Y+38	; 0x26
    8fde:	a2 a4       	ldd	r10, Z+42	; 0x2a
    8fe0:	a6 a8       	ldd	r10, Z+54	; 0x36
    8fe2:	ab ad       	ldd	r26, Y+59	; 0x3b
    8fe4:	af b2       	in	r10, 0x1f	; 31
    8fe6:	b4 b7       	in	r27, 0x34	; 52
    8fe8:	b9 bc       	out	0x29, r11	; 41
    8fea:	bf c1       	rjmp	.+894    	; 0x936a <waves+0x46a>
    8fec:	c4 c7       	rjmp	.+3976   	; 0x9f76 <LBPrintByte+0x2>
    8fee:	ca cd       	rjmp	.-1132   	; 0x8b84 <ProcessMusic+0x35e>
    8ff0:	cf d2       	rcall	.+1438   	; 0x9590 <waves+0x690>
    8ff2:	d5 d8       	rcall	.-3670   	; 0x819e <isEepromFormatted+0x22>
    8ff4:	db de       	rcall	.-586    	; 0x8dac <steptable+0xa4>
    8ff6:	e1 e4       	ldi	r30, 0x41	; 65
    8ff8:	e7 ea       	ldi	r30, 0xA7	; 167
    8ffa:	ed f0       	brhs	.+58     	; 0x9036 <waves+0x136>
    8ffc:	f4 f7       	brge	.-4      	; 0x8ffa <waves+0xfa>
    8ffe:	fa fd       	.word	0xfdfa	; ????
    9000:	80 81       	ld	r24, Z
    9002:	82 83       	std	Z+2, r24	; 0x02
    9004:	84 85       	ldd	r24, Z+12	; 0x0c
    9006:	86 87       	std	Z+14, r24	; 0x0e
    9008:	88 89       	ldd	r24, Y+16	; 0x10
    900a:	8a 8b       	std	Y+18, r24	; 0x12
    900c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    900e:	8e 8f       	std	Y+30, r24	; 0x1e
    9010:	90 91 92 93 	lds	r25, 0x9392
    9014:	94 95       	.word	0x9594	; ????
    9016:	96 97       	sbiw	r26, 0x26	; 38
    9018:	98 99       	sbic	0x13, 0	; 19
    901a:	9a 9b       	sbis	0x13, 2	; 19
    901c:	9c 9d       	mul	r25, r12
    901e:	9e 9f       	mul	r25, r30
    9020:	a0 a1       	ldd	r26, Z+32	; 0x20
    9022:	a2 a3       	std	Z+34, r26	; 0x22
    9024:	a4 a5       	ldd	r26, Z+44	; 0x2c
    9026:	a6 a7       	std	Z+46, r26	; 0x2e
    9028:	a8 a9       	ldd	r26, Y+48	; 0x30
    902a:	aa ab       	std	Y+50, r26	; 0x32
    902c:	ac ad       	ldd	r26, Y+60	; 0x3c
    902e:	ae af       	std	Y+62, r26	; 0x3e
    9030:	b0 b1       	in	r27, 0x00	; 0
    9032:	b2 b3       	in	r27, 0x12	; 18
    9034:	b4 b5       	in	r27, 0x24	; 36
    9036:	b6 b7       	in	r27, 0x36	; 54
    9038:	b8 b9       	out	0x08, r27	; 8
    903a:	ba bb       	out	0x1a, r27	; 26
    903c:	bc bd       	out	0x2c, r27	; 44
    903e:	be bf       	out	0x3e, r27	; 62
    9040:	c0 c1       	rjmp	.+896    	; 0x93c2 <waves+0x4c2>
    9042:	c2 c3       	rjmp	.+1924   	; 0x97c8 <waves+0x8c8>
    9044:	c4 c5       	rjmp	.+2952   	; 0x9bce <DrawMap+0x16>
    9046:	c6 c7       	rjmp	.+3980   	; 0x9fd4 <LBPrintByte+0x60>
    9048:	c8 c9       	rjmp	.-3184   	; 0x83da <PatchCommand10>
    904a:	ca cb       	rjmp	.-2156   	; 0x87e0 <TriggerNote+0x3a>
    904c:	cc cd       	rjmp	.-1128   	; 0x8be6 <ProcessMusic+0x3c0>
    904e:	ce cf       	rjmp	.-100    	; 0x8fec <waves+0xec>
    9050:	d0 d1       	rcall	.+928    	; 0x93f2 <waves+0x4f2>
    9052:	d2 d3       	rcall	.+1956   	; 0x97f8 <waves+0x8f8>
    9054:	d4 d5       	rcall	.+2984   	; 0x9bfe <DrawMap+0x46>
    9056:	d6 d7       	rcall	.+4012   	; 0xa004 <LBPrintInt+0x2e>
    9058:	d8 d9       	rcall	.-3152   	; 0x840a <PatchCommand11+0x2a>
    905a:	da db       	rcall	.-2124   	; 0x8810 <TriggerNote+0x6a>
    905c:	dc dd       	rcall	.-1096   	; 0x8c16 <ProcessMusic+0x3f0>
    905e:	de df       	rcall	.-68     	; 0x901c <waves+0x11c>
    9060:	e0 e1       	ldi	r30, 0x10	; 16
    9062:	e2 e3       	ldi	r30, 0x32	; 50
    9064:	e4 e5       	ldi	r30, 0x54	; 84
    9066:	e6 e7       	ldi	r30, 0x76	; 118
    9068:	e8 e9       	ldi	r30, 0x98	; 152
    906a:	ea eb       	ldi	r30, 0xBA	; 186
    906c:	ec ed       	ldi	r30, 0xDC	; 220
    906e:	ee ef       	ldi	r30, 0xFE	; 254
    9070:	f0 f1       	brcs	.+124    	; 0x90ee <waves+0x1ee>
    9072:	f2 f3       	brmi	.-4      	; 0x9070 <waves+0x170>
    9074:	f4 f5       	brge	.+124    	; 0x90f2 <waves+0x1f2>
    9076:	f6 f7       	brtc	.-4      	; 0x9074 <waves+0x174>
    9078:	f8 f9       	.word	0xf9f8	; ????
    907a:	fa fb       	.word	0xfbfa	; ????
    907c:	fc fd       	.word	0xfdfc	; ????
    907e:	fe ff       	.word	0xfffe	; ????
    9080:	00 01       	movw	r0, r0
    9082:	02 03       	mulsu	r16, r18
    9084:	04 05       	cpc	r16, r4
    9086:	06 07       	cpc	r16, r22
    9088:	08 09       	sbc	r16, r8
    908a:	0a 0b       	sbc	r16, r26
    908c:	0c 0d       	add	r16, r12
    908e:	0e 0f       	add	r16, r30
    9090:	10 11       	cpse	r17, r0
    9092:	12 13       	cpse	r17, r18
    9094:	14 15       	cp	r17, r4
    9096:	16 17       	cp	r17, r22
    9098:	18 19       	sub	r17, r8
    909a:	1a 1b       	sub	r17, r26
    909c:	1c 1d       	adc	r17, r12
    909e:	1e 1f       	adc	r17, r30
    90a0:	20 21       	and	r18, r0
    90a2:	22 23       	and	r18, r18
    90a4:	24 25       	eor	r18, r4
    90a6:	26 27       	eor	r18, r22
    90a8:	28 29       	or	r18, r8
    90aa:	2a 2b       	or	r18, r26
    90ac:	2c 2d       	mov	r18, r12
    90ae:	2e 2f       	mov	r18, r30
    90b0:	30 31       	cpi	r19, 0x10	; 16
    90b2:	32 33       	cpi	r19, 0x32	; 50
    90b4:	34 35       	cpi	r19, 0x54	; 84
    90b6:	36 37       	cpi	r19, 0x76	; 118
    90b8:	38 39       	cpi	r19, 0x98	; 152
    90ba:	3a 3b       	cpi	r19, 0xBA	; 186
    90bc:	3c 3d       	cpi	r19, 0xDC	; 220
    90be:	3e 3f       	cpi	r19, 0xFE	; 254
    90c0:	40 41       	sbci	r20, 0x10	; 16
    90c2:	42 43       	sbci	r20, 0x32	; 50
    90c4:	44 45       	sbci	r20, 0x54	; 84
    90c6:	46 47       	sbci	r20, 0x76	; 118
    90c8:	48 49       	sbci	r20, 0x98	; 152
    90ca:	4a 4b       	sbci	r20, 0xBA	; 186
    90cc:	4c 4d       	sbci	r20, 0xDC	; 220
    90ce:	4e 4f       	sbci	r20, 0xFE	; 254
    90d0:	50 51       	subi	r21, 0x10	; 16
    90d2:	52 53       	subi	r21, 0x32	; 50
    90d4:	54 55       	subi	r21, 0x54	; 84
    90d6:	56 57       	subi	r21, 0x76	; 118
    90d8:	58 59       	subi	r21, 0x98	; 152
    90da:	5a 5b       	subi	r21, 0xBA	; 186
    90dc:	5c 5d       	subi	r21, 0xDC	; 220
    90de:	5e 5f       	subi	r21, 0xFE	; 254
    90e0:	60 61       	ori	r22, 0x10	; 16
    90e2:	62 63       	ori	r22, 0x32	; 50
    90e4:	64 65       	ori	r22, 0x54	; 84
    90e6:	66 67       	ori	r22, 0x76	; 118
    90e8:	68 69       	ori	r22, 0x98	; 152
    90ea:	6a 6b       	ori	r22, 0xBA	; 186
    90ec:	6c 6d       	ori	r22, 0xDC	; 220
    90ee:	6e 6f       	ori	r22, 0xFE	; 254
    90f0:	70 71       	andi	r23, 0x10	; 16
    90f2:	72 73       	andi	r23, 0x32	; 50
    90f4:	74 75       	andi	r23, 0x54	; 84
    90f6:	76 77       	andi	r23, 0x76	; 118
    90f8:	78 79       	andi	r23, 0x98	; 152
    90fa:	7a 7b       	andi	r23, 0xBA	; 186
    90fc:	7c 7d       	andi	r23, 0xDC	; 220
    90fe:	7e 7f       	andi	r23, 0xFE	; 254
    9100:	00 02       	muls	r16, r16
    9102:	04 06       	cpc	r0, r20
    9104:	08 0a       	sbc	r0, r24
    9106:	0c 0e       	add	r0, r28
    9108:	10 12       	cpse	r1, r16
    910a:	14 16       	cp	r1, r20
    910c:	18 1a       	sub	r1, r24
    910e:	1c 1e       	adc	r1, r28
    9110:	20 22       	and	r2, r16
    9112:	24 26       	eor	r2, r20
    9114:	28 2a       	or	r2, r24
    9116:	2c 2e       	mov	r2, r28
    9118:	30 32       	cpi	r19, 0x20	; 32
    911a:	34 36       	cpi	r19, 0x64	; 100
    911c:	38 3a       	cpi	r19, 0xA8	; 168
    911e:	3c 3e       	cpi	r19, 0xEC	; 236
    9120:	40 42       	sbci	r20, 0x20	; 32
    9122:	44 46       	sbci	r20, 0x64	; 100
    9124:	48 4a       	sbci	r20, 0xA8	; 168
    9126:	4c 4e       	sbci	r20, 0xEC	; 236
    9128:	50 52       	subi	r21, 0x20	; 32
    912a:	54 56       	subi	r21, 0x64	; 100
    912c:	58 5a       	subi	r21, 0xA8	; 168
    912e:	5c 5e       	subi	r21, 0xEC	; 236
    9130:	60 62       	ori	r22, 0x20	; 32
    9132:	64 66       	ori	r22, 0x64	; 100
    9134:	68 6a       	ori	r22, 0xA8	; 168
    9136:	6c 6e       	ori	r22, 0xEC	; 236
    9138:	70 72       	andi	r23, 0x20	; 32
    913a:	74 76       	andi	r23, 0x64	; 100
    913c:	78 7a       	andi	r23, 0xA8	; 168
    913e:	7c 7e       	andi	r23, 0xEC	; 236
    9140:	7f 7d       	andi	r23, 0xDF	; 223
    9142:	7b 79       	andi	r23, 0x9B	; 155
    9144:	77 75       	andi	r23, 0x57	; 87
    9146:	73 71       	andi	r23, 0x13	; 19
    9148:	6f 6d       	ori	r22, 0xDF	; 223
    914a:	6b 69       	ori	r22, 0x9B	; 155
    914c:	67 65       	ori	r22, 0x57	; 87
    914e:	63 61       	ori	r22, 0x13	; 19
    9150:	5f 5d       	subi	r21, 0xDF	; 223
    9152:	5b 59       	subi	r21, 0x9B	; 155
    9154:	57 55       	subi	r21, 0x57	; 87
    9156:	53 51       	subi	r21, 0x13	; 19
    9158:	4f 4d       	sbci	r20, 0xDF	; 223
    915a:	4b 49       	sbci	r20, 0x9B	; 155
    915c:	47 45       	sbci	r20, 0x57	; 87
    915e:	43 41       	sbci	r20, 0x13	; 19
    9160:	3f 3d       	cpi	r19, 0xDF	; 223
    9162:	3b 39       	cpi	r19, 0x9B	; 155
    9164:	37 35       	cpi	r19, 0x57	; 87
    9166:	33 31       	cpi	r19, 0x13	; 19
    9168:	2f 2d       	mov	r18, r15
    916a:	2b 29       	or	r18, r11
    916c:	27 25       	eor	r18, r7
    916e:	23 21       	and	r18, r3
    9170:	1f 1d       	adc	r17, r15
    9172:	1b 19       	sub	r17, r11
    9174:	17 15       	cp	r17, r7
    9176:	13 11       	cpse	r17, r3
    9178:	0f 0d       	add	r16, r15
    917a:	0b 09       	sbc	r16, r11
    917c:	07 05       	cpc	r16, r7
    917e:	03 01       	movw	r0, r6
    9180:	ff fd       	.word	0xfdff	; ????
    9182:	fb f9       	.word	0xf9fb	; ????
    9184:	f7 f5       	brid	.+124    	; 0x9202 <waves+0x302>
    9186:	f3 f1       	brvs	.+124    	; 0x9204 <waves+0x304>
    9188:	ef ed       	ldi	r30, 0xDF	; 223
    918a:	eb e9       	ldi	r30, 0x9B	; 155
    918c:	e7 e5       	ldi	r30, 0x57	; 87
    918e:	e3 e1       	ldi	r30, 0x13	; 19
    9190:	df dd       	rcall	.-1090   	; 0x8d50 <steptable+0x48>
    9192:	db d9       	rcall	.-3146   	; 0x854a <StartSong+0xa>
    9194:	d7 d5       	rcall	.+2990   	; 0x9d44 <FadeIn+0x2>
    9196:	d3 d1       	rcall	.+934    	; 0x953e <waves+0x63e>
    9198:	cf cd       	rjmp	.-1122   	; 0x8d38 <steptable+0x30>
    919a:	cb c9       	rjmp	.-3178   	; 0x8532 <InitMusicPlayer+0x36>
    919c:	c7 c5       	rjmp	.+2958   	; 0x9d2c <doFade+0x6>
    919e:	c3 c1       	rjmp	.+902    	; 0x9526 <waves+0x626>
    91a0:	bf bd       	out	0x2f, r27	; 47
    91a2:	bb b9       	out	0x0b, r27	; 11
    91a4:	b7 b5       	in	r27, 0x27	; 39
    91a6:	b3 b1       	in	r27, 0x03	; 3
    91a8:	af ad       	ldd	r26, Y+63	; 0x3f
    91aa:	ab a9       	ldd	r26, Y+51	; 0x33
    91ac:	a7 a5       	ldd	r26, Z+47	; 0x2f
    91ae:	a3 a1       	ldd	r26, Z+35	; 0x23
    91b0:	9f 9d       	mul	r25, r15
    91b2:	9b 99       	sbic	0x13, 3	; 19
    91b4:	97 95       	ror	r25
    91b6:	93 91       	.word	0x9193	; ????
    91b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    91ba:	8b 89       	ldd	r24, Y+19	; 0x13
    91bc:	87 85       	ldd	r24, Z+15	; 0x0f
    91be:	83 81       	ldd	r24, Z+3	; 0x03
    91c0:	80 82       	st	Z, r8
    91c2:	84 86       	std	Z+12, r8	; 0x0c
    91c4:	88 8a       	std	Y+16, r8	; 0x10
    91c6:	8c 8e       	std	Y+28, r8	; 0x1c
    91c8:	90 92 94 96 	sts	0x9694, r9
    91cc:	98 9a       	sbi	0x13, 0	; 19
    91ce:	9c 9e       	mul	r9, r28
    91d0:	a0 a2       	std	Z+32, r10	; 0x20
    91d2:	a4 a6       	std	Z+44, r10	; 0x2c
    91d4:	a8 aa       	std	Y+48, r10	; 0x30
    91d6:	ac ae       	std	Y+60, r10	; 0x3c
    91d8:	b0 b2       	in	r11, 0x10	; 16
    91da:	b4 b6       	in	r11, 0x34	; 52
    91dc:	b8 ba       	out	0x18, r11	; 24
    91de:	bc be       	out	0x3c, r11	; 60
    91e0:	c0 c2       	rjmp	.+1408   	; 0x9762 <waves+0x862>
    91e2:	c4 c6       	rjmp	.+3464   	; 0x9f6c <LBPrint+0x30>
    91e4:	c8 ca       	rjmp	.-2672   	; 0x8776 <TriggerFx+0x60>
    91e6:	cc ce       	rjmp	.-616    	; 0x8f80 <waves+0x80>
    91e8:	d0 d2       	rcall	.+1440   	; 0x978a <waves+0x88a>
    91ea:	d4 d6       	rcall	.+3496   	; 0x9f94 <LBPrintByte+0x20>
    91ec:	d8 da       	rcall	.-2640   	; 0x879e <TriggerFx+0x88>
    91ee:	dc de       	rcall	.-584    	; 0x8fa8 <waves+0xa8>
    91f0:	e0 e2       	ldi	r30, 0x20	; 32
    91f2:	e4 e6       	ldi	r30, 0x64	; 100
    91f4:	e8 ea       	ldi	r30, 0xA8	; 168
    91f6:	ec ee       	ldi	r30, 0xEC	; 236
    91f8:	f0 f2       	brcs	.-68     	; 0x91b6 <waves+0x2b6>
    91fa:	f4 f6       	brge	.-68     	; 0x91b8 <waves+0x2b8>
    91fc:	f8 fa       	.word	0xfaf8	; ????
    91fe:	fc fe       	.word	0xfefc	; ????
    9200:	7f 7f       	andi	r23, 0xFF	; 255
    9202:	7f 7f       	andi	r23, 0xFF	; 255
    9204:	7f 7f       	andi	r23, 0xFF	; 255
    9206:	7f 7f       	andi	r23, 0xFF	; 255
    9208:	7f 7f       	andi	r23, 0xFF	; 255
    920a:	7f 7f       	andi	r23, 0xFF	; 255
    920c:	7f 7f       	andi	r23, 0xFF	; 255
    920e:	7f 7f       	andi	r23, 0xFF	; 255
    9210:	7f 7f       	andi	r23, 0xFF	; 255
    9212:	7f 7f       	andi	r23, 0xFF	; 255
    9214:	7f 7f       	andi	r23, 0xFF	; 255
    9216:	7f 7f       	andi	r23, 0xFF	; 255
    9218:	7f 7f       	andi	r23, 0xFF	; 255
    921a:	7f 7f       	andi	r23, 0xFF	; 255
    921c:	7f 7f       	andi	r23, 0xFF	; 255
    921e:	7f 7f       	andi	r23, 0xFF	; 255
    9220:	7f 7f       	andi	r23, 0xFF	; 255
    9222:	7f 7f       	andi	r23, 0xFF	; 255
    9224:	7f 7f       	andi	r23, 0xFF	; 255
    9226:	7f 7f       	andi	r23, 0xFF	; 255
    9228:	7f 7f       	andi	r23, 0xFF	; 255
    922a:	7f 7f       	andi	r23, 0xFF	; 255
    922c:	7f 7f       	andi	r23, 0xFF	; 255
    922e:	7f 7f       	andi	r23, 0xFF	; 255
    9230:	7f 7f       	andi	r23, 0xFF	; 255
    9232:	7f 7f       	andi	r23, 0xFF	; 255
    9234:	7f 7f       	andi	r23, 0xFF	; 255
    9236:	7f 7f       	andi	r23, 0xFF	; 255
    9238:	7f 7f       	andi	r23, 0xFF	; 255
    923a:	7f 7f       	andi	r23, 0xFF	; 255
    923c:	7f 7f       	andi	r23, 0xFF	; 255
    923e:	7f 7f       	andi	r23, 0xFF	; 255
    9240:	80 80       	ld	r8, Z
    9242:	80 80       	ld	r8, Z
    9244:	80 80       	ld	r8, Z
    9246:	80 80       	ld	r8, Z
    9248:	80 80       	ld	r8, Z
    924a:	80 80       	ld	r8, Z
    924c:	80 80       	ld	r8, Z
    924e:	80 80       	ld	r8, Z
    9250:	80 80       	ld	r8, Z
    9252:	80 80       	ld	r8, Z
    9254:	80 80       	ld	r8, Z
    9256:	80 80       	ld	r8, Z
    9258:	80 80       	ld	r8, Z
    925a:	80 80       	ld	r8, Z
    925c:	80 80       	ld	r8, Z
    925e:	80 80       	ld	r8, Z
    9260:	80 80       	ld	r8, Z
    9262:	80 80       	ld	r8, Z
    9264:	80 80       	ld	r8, Z
    9266:	80 80       	ld	r8, Z
    9268:	80 80       	ld	r8, Z
    926a:	80 80       	ld	r8, Z
    926c:	80 80       	ld	r8, Z
    926e:	80 80       	ld	r8, Z
    9270:	80 80       	ld	r8, Z
    9272:	80 80       	ld	r8, Z
    9274:	80 80       	ld	r8, Z
    9276:	80 80       	ld	r8, Z
    9278:	80 80       	ld	r8, Z
    927a:	80 80       	ld	r8, Z
    927c:	80 80       	ld	r8, Z
    927e:	80 80       	ld	r8, Z
    9280:	80 80       	ld	r8, Z
    9282:	80 80       	ld	r8, Z
    9284:	80 80       	ld	r8, Z
    9286:	80 80       	ld	r8, Z
    9288:	80 80       	ld	r8, Z
    928a:	80 80       	ld	r8, Z
    928c:	80 80       	ld	r8, Z
    928e:	80 80       	ld	r8, Z
    9290:	80 80       	ld	r8, Z
    9292:	80 80       	ld	r8, Z
    9294:	80 80       	ld	r8, Z
    9296:	80 80       	ld	r8, Z
    9298:	80 80       	ld	r8, Z
    929a:	80 80       	ld	r8, Z
    929c:	80 80       	ld	r8, Z
    929e:	80 80       	ld	r8, Z
    92a0:	80 80       	ld	r8, Z
    92a2:	80 80       	ld	r8, Z
    92a4:	80 80       	ld	r8, Z
    92a6:	80 80       	ld	r8, Z
    92a8:	80 80       	ld	r8, Z
    92aa:	80 80       	ld	r8, Z
    92ac:	80 80       	ld	r8, Z
    92ae:	80 80       	ld	r8, Z
    92b0:	80 80       	ld	r8, Z
    92b2:	80 80       	ld	r8, Z
    92b4:	80 80       	ld	r8, Z
    92b6:	80 80       	ld	r8, Z
    92b8:	80 80       	ld	r8, Z
    92ba:	80 80       	ld	r8, Z
    92bc:	80 80       	ld	r8, Z
    92be:	80 80       	ld	r8, Z
    92c0:	80 80       	ld	r8, Z
    92c2:	80 80       	ld	r8, Z
    92c4:	80 80       	ld	r8, Z
    92c6:	80 80       	ld	r8, Z
    92c8:	80 80       	ld	r8, Z
    92ca:	80 80       	ld	r8, Z
    92cc:	80 80       	ld	r8, Z
    92ce:	80 80       	ld	r8, Z
    92d0:	80 80       	ld	r8, Z
    92d2:	80 80       	ld	r8, Z
    92d4:	80 80       	ld	r8, Z
    92d6:	80 80       	ld	r8, Z
    92d8:	80 80       	ld	r8, Z
    92da:	80 80       	ld	r8, Z
    92dc:	80 80       	ld	r8, Z
    92de:	80 80       	ld	r8, Z
    92e0:	80 80       	ld	r8, Z
    92e2:	80 80       	ld	r8, Z
    92e4:	80 80       	ld	r8, Z
    92e6:	80 80       	ld	r8, Z
    92e8:	80 80       	ld	r8, Z
    92ea:	80 80       	ld	r8, Z
    92ec:	80 80       	ld	r8, Z
    92ee:	80 80       	ld	r8, Z
    92f0:	80 80       	ld	r8, Z
    92f2:	80 80       	ld	r8, Z
    92f4:	80 80       	ld	r8, Z
    92f6:	80 80       	ld	r8, Z
    92f8:	80 80       	ld	r8, Z
    92fa:	80 80       	ld	r8, Z
    92fc:	80 80       	ld	r8, Z
    92fe:	80 80       	ld	r8, Z
    9300:	7f 7f       	andi	r23, 0xFF	; 255
    9302:	7f 7f       	andi	r23, 0xFF	; 255
    9304:	7f 7f       	andi	r23, 0xFF	; 255
    9306:	7f 7f       	andi	r23, 0xFF	; 255
    9308:	7f 7f       	andi	r23, 0xFF	; 255
    930a:	7f 7f       	andi	r23, 0xFF	; 255
    930c:	7f 7f       	andi	r23, 0xFF	; 255
    930e:	7f 7f       	andi	r23, 0xFF	; 255
    9310:	7f 7f       	andi	r23, 0xFF	; 255
    9312:	7f 7f       	andi	r23, 0xFF	; 255
    9314:	7f 7f       	andi	r23, 0xFF	; 255
    9316:	7f 7f       	andi	r23, 0xFF	; 255
    9318:	7f 7f       	andi	r23, 0xFF	; 255
    931a:	7f 7f       	andi	r23, 0xFF	; 255
    931c:	7f 7f       	andi	r23, 0xFF	; 255
    931e:	7f 7f       	andi	r23, 0xFF	; 255
    9320:	7f 7f       	andi	r23, 0xFF	; 255
    9322:	7f 7f       	andi	r23, 0xFF	; 255
    9324:	7f 7f       	andi	r23, 0xFF	; 255
    9326:	7f 7f       	andi	r23, 0xFF	; 255
    9328:	7f 7f       	andi	r23, 0xFF	; 255
    932a:	7f 7f       	andi	r23, 0xFF	; 255
    932c:	7f 7f       	andi	r23, 0xFF	; 255
    932e:	7f 7f       	andi	r23, 0xFF	; 255
    9330:	7f 7f       	andi	r23, 0xFF	; 255
    9332:	7f 7f       	andi	r23, 0xFF	; 255
    9334:	7f 7f       	andi	r23, 0xFF	; 255
    9336:	7f 7f       	andi	r23, 0xFF	; 255
    9338:	7f 7f       	andi	r23, 0xFF	; 255
    933a:	7f 7f       	andi	r23, 0xFF	; 255
    933c:	7f 7f       	andi	r23, 0xFF	; 255
    933e:	7f 7f       	andi	r23, 0xFF	; 255
    9340:	7f 7f       	andi	r23, 0xFF	; 255
    9342:	7f 7f       	andi	r23, 0xFF	; 255
    9344:	7f 7f       	andi	r23, 0xFF	; 255
    9346:	7f 7f       	andi	r23, 0xFF	; 255
    9348:	7f 7f       	andi	r23, 0xFF	; 255
    934a:	7f 7f       	andi	r23, 0xFF	; 255
    934c:	7f 7f       	andi	r23, 0xFF	; 255
    934e:	7f 7f       	andi	r23, 0xFF	; 255
    9350:	7f 7f       	andi	r23, 0xFF	; 255
    9352:	7f 7f       	andi	r23, 0xFF	; 255
    9354:	7f 7f       	andi	r23, 0xFF	; 255
    9356:	7f 7f       	andi	r23, 0xFF	; 255
    9358:	7f 7f       	andi	r23, 0xFF	; 255
    935a:	7f 7f       	andi	r23, 0xFF	; 255
    935c:	7f 7f       	andi	r23, 0xFF	; 255
    935e:	7f 7f       	andi	r23, 0xFF	; 255
    9360:	7f 7f       	andi	r23, 0xFF	; 255
    9362:	7f 7f       	andi	r23, 0xFF	; 255
    9364:	7f 7f       	andi	r23, 0xFF	; 255
    9366:	7f 7f       	andi	r23, 0xFF	; 255
    9368:	7f 7f       	andi	r23, 0xFF	; 255
    936a:	7f 7f       	andi	r23, 0xFF	; 255
    936c:	7f 7f       	andi	r23, 0xFF	; 255
    936e:	7f 7f       	andi	r23, 0xFF	; 255
    9370:	7f 7f       	andi	r23, 0xFF	; 255
    9372:	7f 7f       	andi	r23, 0xFF	; 255
    9374:	7f 7f       	andi	r23, 0xFF	; 255
    9376:	7f 7f       	andi	r23, 0xFF	; 255
    9378:	7f 7f       	andi	r23, 0xFF	; 255
    937a:	7f 7f       	andi	r23, 0xFF	; 255
    937c:	7f 7f       	andi	r23, 0xFF	; 255
    937e:	7f 7f       	andi	r23, 0xFF	; 255
    9380:	80 80       	ld	r8, Z
    9382:	80 80       	ld	r8, Z
    9384:	80 80       	ld	r8, Z
    9386:	80 80       	ld	r8, Z
    9388:	80 80       	ld	r8, Z
    938a:	80 80       	ld	r8, Z
    938c:	80 80       	ld	r8, Z
    938e:	80 80       	ld	r8, Z
    9390:	80 80       	ld	r8, Z
    9392:	80 80       	ld	r8, Z
    9394:	80 80       	ld	r8, Z
    9396:	80 80       	ld	r8, Z
    9398:	80 80       	ld	r8, Z
    939a:	80 80       	ld	r8, Z
    939c:	80 80       	ld	r8, Z
    939e:	80 80       	ld	r8, Z
    93a0:	80 80       	ld	r8, Z
    93a2:	80 80       	ld	r8, Z
    93a4:	80 80       	ld	r8, Z
    93a6:	80 80       	ld	r8, Z
    93a8:	80 80       	ld	r8, Z
    93aa:	80 80       	ld	r8, Z
    93ac:	80 80       	ld	r8, Z
    93ae:	80 80       	ld	r8, Z
    93b0:	80 80       	ld	r8, Z
    93b2:	80 80       	ld	r8, Z
    93b4:	80 80       	ld	r8, Z
    93b6:	80 80       	ld	r8, Z
    93b8:	80 80       	ld	r8, Z
    93ba:	80 80       	ld	r8, Z
    93bc:	80 80       	ld	r8, Z
    93be:	80 80       	ld	r8, Z
    93c0:	80 80       	ld	r8, Z
    93c2:	80 80       	ld	r8, Z
    93c4:	80 80       	ld	r8, Z
    93c6:	80 80       	ld	r8, Z
    93c8:	80 80       	ld	r8, Z
    93ca:	80 80       	ld	r8, Z
    93cc:	80 80       	ld	r8, Z
    93ce:	80 80       	ld	r8, Z
    93d0:	80 80       	ld	r8, Z
    93d2:	80 80       	ld	r8, Z
    93d4:	80 80       	ld	r8, Z
    93d6:	80 80       	ld	r8, Z
    93d8:	80 80       	ld	r8, Z
    93da:	80 80       	ld	r8, Z
    93dc:	80 80       	ld	r8, Z
    93de:	80 80       	ld	r8, Z
    93e0:	80 80       	ld	r8, Z
    93e2:	80 80       	ld	r8, Z
    93e4:	80 80       	ld	r8, Z
    93e6:	80 80       	ld	r8, Z
    93e8:	80 80       	ld	r8, Z
    93ea:	80 80       	ld	r8, Z
    93ec:	80 80       	ld	r8, Z
    93ee:	80 80       	ld	r8, Z
    93f0:	80 80       	ld	r8, Z
    93f2:	80 80       	ld	r8, Z
    93f4:	80 80       	ld	r8, Z
    93f6:	80 80       	ld	r8, Z
    93f8:	80 80       	ld	r8, Z
    93fa:	80 80       	ld	r8, Z
    93fc:	80 80       	ld	r8, Z
    93fe:	80 80       	ld	r8, Z
    9400:	7f 7f       	andi	r23, 0xFF	; 255
    9402:	7f 7f       	andi	r23, 0xFF	; 255
    9404:	7f 7f       	andi	r23, 0xFF	; 255
    9406:	7f 7f       	andi	r23, 0xFF	; 255
    9408:	7f 7f       	andi	r23, 0xFF	; 255
    940a:	7f 7f       	andi	r23, 0xFF	; 255
    940c:	7f 7f       	andi	r23, 0xFF	; 255
    940e:	7f 7f       	andi	r23, 0xFF	; 255
    9410:	7f 7f       	andi	r23, 0xFF	; 255
    9412:	7f 7f       	andi	r23, 0xFF	; 255
    9414:	7f 7f       	andi	r23, 0xFF	; 255
    9416:	7f 7f       	andi	r23, 0xFF	; 255
    9418:	7f 7f       	andi	r23, 0xFF	; 255
    941a:	7f 7f       	andi	r23, 0xFF	; 255
    941c:	7f 7f       	andi	r23, 0xFF	; 255
    941e:	7f 7f       	andi	r23, 0xFF	; 255
    9420:	7f 7f       	andi	r23, 0xFF	; 255
    9422:	7f 7f       	andi	r23, 0xFF	; 255
    9424:	7f 7f       	andi	r23, 0xFF	; 255
    9426:	7f 7f       	andi	r23, 0xFF	; 255
    9428:	7f 7f       	andi	r23, 0xFF	; 255
    942a:	7f 7f       	andi	r23, 0xFF	; 255
    942c:	7f 7f       	andi	r23, 0xFF	; 255
    942e:	7f 7f       	andi	r23, 0xFF	; 255
    9430:	7f 7f       	andi	r23, 0xFF	; 255
    9432:	7f 7f       	andi	r23, 0xFF	; 255
    9434:	7f 7f       	andi	r23, 0xFF	; 255
    9436:	7f 7f       	andi	r23, 0xFF	; 255
    9438:	7f 7f       	andi	r23, 0xFF	; 255
    943a:	7f 7f       	andi	r23, 0xFF	; 255
    943c:	7f 7f       	andi	r23, 0xFF	; 255
    943e:	7f 7f       	andi	r23, 0xFF	; 255
    9440:	7f 7f       	andi	r23, 0xFF	; 255
    9442:	7f 7f       	andi	r23, 0xFF	; 255
    9444:	7f 7f       	andi	r23, 0xFF	; 255
    9446:	7f 7f       	andi	r23, 0xFF	; 255
    9448:	7f 7f       	andi	r23, 0xFF	; 255
    944a:	7f 7f       	andi	r23, 0xFF	; 255
    944c:	7f 7f       	andi	r23, 0xFF	; 255
    944e:	7f 7f       	andi	r23, 0xFF	; 255
    9450:	7f 7f       	andi	r23, 0xFF	; 255
    9452:	7f 7f       	andi	r23, 0xFF	; 255
    9454:	7f 7f       	andi	r23, 0xFF	; 255
    9456:	7f 7f       	andi	r23, 0xFF	; 255
    9458:	7f 7f       	andi	r23, 0xFF	; 255
    945a:	7f 7f       	andi	r23, 0xFF	; 255
    945c:	7f 7f       	andi	r23, 0xFF	; 255
    945e:	7f 7f       	andi	r23, 0xFF	; 255
    9460:	7f 7f       	andi	r23, 0xFF	; 255
    9462:	7f 7f       	andi	r23, 0xFF	; 255
    9464:	7f 7f       	andi	r23, 0xFF	; 255
    9466:	7f 7f       	andi	r23, 0xFF	; 255
    9468:	7f 7f       	andi	r23, 0xFF	; 255
    946a:	7f 7f       	andi	r23, 0xFF	; 255
    946c:	7f 7f       	andi	r23, 0xFF	; 255
    946e:	7f 7f       	andi	r23, 0xFF	; 255
    9470:	7f 7f       	andi	r23, 0xFF	; 255
    9472:	7f 7f       	andi	r23, 0xFF	; 255
    9474:	7f 7f       	andi	r23, 0xFF	; 255
    9476:	7f 7f       	andi	r23, 0xFF	; 255
    9478:	7f 7f       	andi	r23, 0xFF	; 255
    947a:	7f 7f       	andi	r23, 0xFF	; 255
    947c:	7f 7f       	andi	r23, 0xFF	; 255
    947e:	7f 7f       	andi	r23, 0xFF	; 255
    9480:	7f 7f       	andi	r23, 0xFF	; 255
    9482:	7f 7f       	andi	r23, 0xFF	; 255
    9484:	7f 7f       	andi	r23, 0xFF	; 255
    9486:	7f 7f       	andi	r23, 0xFF	; 255
    9488:	7f 7f       	andi	r23, 0xFF	; 255
    948a:	7f 7f       	andi	r23, 0xFF	; 255
    948c:	7f 7f       	andi	r23, 0xFF	; 255
    948e:	7f 7f       	andi	r23, 0xFF	; 255
    9490:	7f 7f       	andi	r23, 0xFF	; 255
    9492:	7f 7f       	andi	r23, 0xFF	; 255
    9494:	7f 7f       	andi	r23, 0xFF	; 255
    9496:	7f 7f       	andi	r23, 0xFF	; 255
    9498:	7f 7f       	andi	r23, 0xFF	; 255
    949a:	7f 7f       	andi	r23, 0xFF	; 255
    949c:	7f 7f       	andi	r23, 0xFF	; 255
    949e:	7f 7f       	andi	r23, 0xFF	; 255
    94a0:	7f 7f       	andi	r23, 0xFF	; 255
    94a2:	7f 7f       	andi	r23, 0xFF	; 255
    94a4:	7f 7f       	andi	r23, 0xFF	; 255
    94a6:	7f 7f       	andi	r23, 0xFF	; 255
    94a8:	7f 7f       	andi	r23, 0xFF	; 255
    94aa:	7f 7f       	andi	r23, 0xFF	; 255
    94ac:	7f 7f       	andi	r23, 0xFF	; 255
    94ae:	7f 7f       	andi	r23, 0xFF	; 255
    94b0:	7f 7f       	andi	r23, 0xFF	; 255
    94b2:	7f 7f       	andi	r23, 0xFF	; 255
    94b4:	7f 7f       	andi	r23, 0xFF	; 255
    94b6:	7f 7f       	andi	r23, 0xFF	; 255
    94b8:	7f 7f       	andi	r23, 0xFF	; 255
    94ba:	7f 7f       	andi	r23, 0xFF	; 255
    94bc:	7f 7f       	andi	r23, 0xFF	; 255
    94be:	7f 7f       	andi	r23, 0xFF	; 255
    94c0:	80 80       	ld	r8, Z
    94c2:	80 80       	ld	r8, Z
    94c4:	80 80       	ld	r8, Z
    94c6:	80 80       	ld	r8, Z
    94c8:	80 80       	ld	r8, Z
    94ca:	80 80       	ld	r8, Z
    94cc:	80 80       	ld	r8, Z
    94ce:	80 80       	ld	r8, Z
    94d0:	80 80       	ld	r8, Z
    94d2:	80 80       	ld	r8, Z
    94d4:	80 80       	ld	r8, Z
    94d6:	80 80       	ld	r8, Z
    94d8:	80 80       	ld	r8, Z
    94da:	80 80       	ld	r8, Z
    94dc:	80 80       	ld	r8, Z
    94de:	80 80       	ld	r8, Z
    94e0:	80 80       	ld	r8, Z
    94e2:	80 80       	ld	r8, Z
    94e4:	80 80       	ld	r8, Z
    94e6:	80 80       	ld	r8, Z
    94e8:	80 80       	ld	r8, Z
    94ea:	80 80       	ld	r8, Z
    94ec:	80 80       	ld	r8, Z
    94ee:	80 80       	ld	r8, Z
    94f0:	80 80       	ld	r8, Z
    94f2:	80 80       	ld	r8, Z
    94f4:	80 80       	ld	r8, Z
    94f6:	80 80       	ld	r8, Z
    94f8:	80 80       	ld	r8, Z
    94fa:	80 80       	ld	r8, Z
    94fc:	80 80       	ld	r8, Z
    94fe:	80 80       	ld	r8, Z
    9500:	03 09       	sbc	r16, r3
    9502:	13 1e       	adc	r1, r19
    9504:	28 31       	cpi	r18, 0x18	; 24
    9506:	3a 40       	sbci	r19, 0x0A	; 10
    9508:	46 4c       	sbci	r20, 0xC6	; 198
    950a:	50 54       	subi	r21, 0x40	; 64
    950c:	58 5b       	subi	r21, 0xB8	; 184
    950e:	5e 61       	ori	r21, 0x1E	; 30
    9510:	63 65       	ori	r22, 0x53	; 83
    9512:	67 69       	ori	r22, 0x97	; 151
    9514:	6b 6c       	ori	r22, 0xCB	; 203
    9516:	6e 6f       	ori	r22, 0xFE	; 254
    9518:	70 71       	andi	r23, 0x10	; 16
    951a:	72 73       	andi	r23, 0x32	; 50
    951c:	74 75       	andi	r23, 0x54	; 84
    951e:	76 77       	andi	r23, 0x76	; 118
    9520:	77 78       	andi	r23, 0x87	; 135
    9522:	79 79       	andi	r23, 0x99	; 153
    9524:	7a 7a       	andi	r23, 0xAA	; 170
    9526:	7b 7b       	andi	r23, 0xBB	; 187
    9528:	7c 7c       	andi	r23, 0xCC	; 204
    952a:	7c 7d       	andi	r23, 0xDC	; 220
    952c:	7d 7d       	andi	r23, 0xDD	; 221
    952e:	7e 7e       	andi	r23, 0xEE	; 238
    9530:	7e 7e       	andi	r23, 0xEE	; 238
    9532:	7f 7f       	andi	r23, 0xFF	; 255
    9534:	7f 7f       	andi	r23, 0xFF	; 255
    9536:	7f 7f       	andi	r23, 0xFF	; 255
    9538:	7f 7f       	andi	r23, 0xFF	; 255
    953a:	7f 7f       	andi	r23, 0xFF	; 255
    953c:	7f 7f       	andi	r23, 0xFF	; 255
    953e:	7f 7f       	andi	r23, 0xFF	; 255
    9540:	7f 7f       	andi	r23, 0xFF	; 255
    9542:	7f 7f       	andi	r23, 0xFF	; 255
    9544:	7f 7f       	andi	r23, 0xFF	; 255
    9546:	7f 7f       	andi	r23, 0xFF	; 255
    9548:	7f 7f       	andi	r23, 0xFF	; 255
    954a:	7f 7f       	andi	r23, 0xFF	; 255
    954c:	7f 7e       	andi	r23, 0xEF	; 239
    954e:	7e 7e       	andi	r23, 0xEE	; 238
    9550:	7e 7d       	andi	r23, 0xDE	; 222
    9552:	7d 7d       	andi	r23, 0xDD	; 221
    9554:	7c 7c       	andi	r23, 0xCC	; 204
    9556:	7c 7b       	andi	r23, 0xBC	; 188
    9558:	7b 7a       	andi	r23, 0xAB	; 171
    955a:	7a 79       	andi	r23, 0x9A	; 154
    955c:	79 78       	andi	r23, 0x89	; 137
    955e:	77 77       	andi	r23, 0x77	; 119
    9560:	76 75       	andi	r23, 0x56	; 86
    9562:	74 73       	andi	r23, 0x34	; 52
    9564:	72 71       	andi	r23, 0x12	; 18
    9566:	70 6f       	ori	r23, 0xF0	; 240
    9568:	6e 6c       	ori	r22, 0xCE	; 206
    956a:	6b 69       	ori	r22, 0x9B	; 155
    956c:	67 65       	ori	r22, 0x57	; 87
    956e:	63 61       	ori	r22, 0x13	; 19
    9570:	5e 5b       	subi	r21, 0xBE	; 190
    9572:	58 54       	subi	r21, 0x48	; 72
    9574:	50 4c       	sbci	r21, 0xC0	; 192
    9576:	46 40       	sbci	r20, 0x06	; 6
    9578:	3a 31       	cpi	r19, 0x1A	; 26
    957a:	28 1e       	adc	r2, r24
    957c:	13 09       	sbc	r17, r3
    957e:	03 00       	.word	0x0003	; ????
    9580:	c6 cc       	rjmp	.-1652   	; 0x8f0e <waves+0xe>
    9582:	d5 db       	rcall	.-2134   	; 0x8d2e <steptable+0x26>
    9584:	df e3       	ldi	r29, 0x3F	; 63
    9586:	e5 e7       	ldi	r30, 0x75	; 117
    9588:	e9 ea       	ldi	r30, 0xA9	; 169
    958a:	eb ec       	ldi	r30, 0xCB	; 203
    958c:	ed ee       	ldi	r30, 0xED	; 237
    958e:	ef ef       	ldi	r30, 0xFF	; 255
    9590:	f0 f0       	brcs	.+60     	; 0x95ce <waves+0x6ce>
    9592:	f0 f1       	brcs	.+124    	; 0x9610 <waves+0x710>
    9594:	f1 f1       	breq	.+124    	; 0x9612 <waves+0x712>
    9596:	f1 f2       	breq	.-68     	; 0x9554 <waves+0x654>
    9598:	f2 f2       	brmi	.-68     	; 0x9556 <waves+0x656>
    959a:	f2 f2       	brmi	.-68     	; 0x9558 <waves+0x658>
    959c:	f2 f2       	brmi	.-68     	; 0x955a <waves+0x65a>
    959e:	f2 f3       	brmi	.-4      	; 0x959c <waves+0x69c>
    95a0:	f3 f3       	brvs	.-4      	; 0x959e <waves+0x69e>
    95a2:	f3 f3       	brvs	.-4      	; 0x95a0 <waves+0x6a0>
    95a4:	f3 f3       	brvs	.-4      	; 0x95a2 <waves+0x6a2>
    95a6:	f3 f3       	brvs	.-4      	; 0x95a4 <waves+0x6a4>
    95a8:	f3 f3       	brvs	.-4      	; 0x95a6 <waves+0x6a6>
    95aa:	f3 f3       	brvs	.-4      	; 0x95a8 <waves+0x6a8>
    95ac:	f3 f3       	brvs	.-4      	; 0x95aa <waves+0x6aa>
    95ae:	f3 f3       	brvs	.-4      	; 0x95ac <waves+0x6ac>
    95b0:	f3 f3       	brvs	.-4      	; 0x95ae <waves+0x6ae>
    95b2:	f3 f3       	brvs	.-4      	; 0x95b0 <waves+0x6b0>
    95b4:	f3 f3       	brvs	.-4      	; 0x95b2 <waves+0x6b2>
    95b6:	f3 f3       	brvs	.-4      	; 0x95b4 <waves+0x6b4>
    95b8:	f3 f3       	brvs	.-4      	; 0x95b6 <waves+0x6b6>
    95ba:	f3 f3       	brvs	.-4      	; 0x95b8 <waves+0x6b8>
    95bc:	f3 f3       	brvs	.-4      	; 0x95ba <waves+0x6ba>
    95be:	f3 f3       	brvs	.-4      	; 0x95bc <waves+0x6bc>
    95c0:	f3 f3       	brvs	.-4      	; 0x95be <waves+0x6be>
    95c2:	f3 f3       	brvs	.-4      	; 0x95c0 <waves+0x6c0>
    95c4:	f3 f3       	brvs	.-4      	; 0x95c2 <waves+0x6c2>
    95c6:	f3 f3       	brvs	.-4      	; 0x95c4 <waves+0x6c4>
    95c8:	f3 f3       	brvs	.-4      	; 0x95c6 <waves+0x6c6>
    95ca:	f3 f3       	brvs	.-4      	; 0x95c8 <waves+0x6c8>
    95cc:	f3 f3       	brvs	.-4      	; 0x95ca <waves+0x6ca>
    95ce:	f3 f3       	brvs	.-4      	; 0x95cc <waves+0x6cc>
    95d0:	f3 f3       	brvs	.-4      	; 0x95ce <waves+0x6ce>
    95d2:	f3 f3       	brvs	.-4      	; 0x95d0 <waves+0x6d0>
    95d4:	f3 f3       	brvs	.-4      	; 0x95d2 <waves+0x6d2>
    95d6:	f3 f3       	brvs	.-4      	; 0x95d4 <waves+0x6d4>
    95d8:	f3 f3       	brvs	.-4      	; 0x95d6 <waves+0x6d6>
    95da:	f3 f3       	brvs	.-4      	; 0x95d8 <waves+0x6d8>
    95dc:	f3 f3       	brvs	.-4      	; 0x95da <waves+0x6da>
    95de:	f3 f3       	brvs	.-4      	; 0x95dc <waves+0x6dc>
    95e0:	f2 f2       	brmi	.-68     	; 0x959e <waves+0x69e>
    95e2:	f2 f2       	brmi	.-68     	; 0x95a0 <waves+0x6a0>
    95e4:	f2 f2       	brmi	.-68     	; 0x95a2 <waves+0x6a2>
    95e6:	f2 f2       	brmi	.-68     	; 0x95a4 <waves+0x6a4>
    95e8:	f1 f1       	breq	.+124    	; 0x9666 <waves+0x766>
    95ea:	f1 f1       	breq	.+124    	; 0x9668 <waves+0x768>
    95ec:	f0 f0       	brcs	.+60     	; 0x962a <waves+0x72a>
    95ee:	f0 ef       	ldi	r31, 0xF0	; 240
    95f0:	ef ee       	ldi	r30, 0xEF	; 239
    95f2:	ed ec       	ldi	r30, 0xCD	; 205
    95f4:	eb ea       	ldi	r30, 0xAB	; 171
    95f6:	e9 e7       	ldi	r30, 0x79	; 121
    95f8:	e5 e3       	ldi	r30, 0x35	; 53
    95fa:	df db       	rcall	.-2114   	; 0x8dba <steptable+0xb2>
    95fc:	d5 cc       	rjmp	.-1622   	; 0x8fa8 <waves+0xa8>
    95fe:	c6 00       	.word	0x00c6	; ????
    9600:	00 28       	or	r0, r0
    9602:	3d 42       	sbci	r19, 0x2D	; 45
    9604:	30 2d       	mov	r19, r0
    9606:	2c 2b       	or	r18, r28
    9608:	2c 2d       	mov	r18, r12
    960a:	2e 2f       	mov	r18, r30
    960c:	30 32       	cpi	r19, 0x20	; 32
    960e:	33 35       	cpi	r19, 0x53	; 83
    9610:	37 39       	cpi	r19, 0x97	; 151
    9612:	3b 3d       	cpi	r19, 0xDB	; 219
    9614:	3f 41       	sbci	r19, 0x1F	; 31
    9616:	43 45       	sbci	r20, 0x53	; 83
    9618:	48 4a       	sbci	r20, 0xA8	; 168
    961a:	4c 4e       	sbci	r20, 0xEC	; 236
    961c:	50 53       	subi	r21, 0x30	; 48
    961e:	55 57       	subi	r21, 0x75	; 117
    9620:	59 5b       	subi	r21, 0xB9	; 185
    9622:	5d 5f       	subi	r21, 0xFD	; 253
    9624:	61 63       	ori	r22, 0x31	; 49
    9626:	65 67       	ori	r22, 0x75	; 117
    9628:	69 6b       	ori	r22, 0xB9	; 185
    962a:	6c 6e       	ori	r22, 0xEC	; 236
    962c:	70 71       	andi	r23, 0x10	; 16
    962e:	73 74       	andi	r23, 0x43	; 67
    9630:	75 77       	andi	r23, 0x75	; 117
    9632:	78 79       	andi	r23, 0x98	; 152
    9634:	7a 7b       	andi	r23, 0xBA	; 186
    9636:	7c 7d       	andi	r23, 0xDC	; 220
    9638:	7d 7e       	andi	r23, 0xED	; 237
    963a:	7e 7f       	andi	r23, 0xFE	; 254
    963c:	7f 7f       	andi	r23, 0xFF	; 255
    963e:	7f 7f       	andi	r23, 0xFF	; 255
    9640:	7f 7f       	andi	r23, 0xFF	; 255
    9642:	7f 7f       	andi	r23, 0xFF	; 255
    9644:	7f 7f       	andi	r23, 0xFF	; 255
    9646:	7e 7e       	andi	r23, 0xEE	; 238
    9648:	7d 7d       	andi	r23, 0xDD	; 221
    964a:	7c 7b       	andi	r23, 0xBC	; 188
    964c:	7a 79       	andi	r23, 0x9A	; 154
    964e:	78 77       	andi	r23, 0x78	; 120
    9650:	75 74       	andi	r23, 0x45	; 69
    9652:	73 71       	andi	r23, 0x13	; 19
    9654:	70 6e       	ori	r23, 0xE0	; 224
    9656:	6c 6b       	ori	r22, 0xBC	; 188
    9658:	69 67       	ori	r22, 0x79	; 121
    965a:	65 63       	ori	r22, 0x35	; 53
    965c:	61 5f       	subi	r22, 0xF1	; 241
    965e:	5d 5b       	subi	r21, 0xBD	; 189
    9660:	59 57       	subi	r21, 0x79	; 121
    9662:	55 53       	subi	r21, 0x35	; 53
    9664:	50 4e       	sbci	r21, 0xE0	; 224
    9666:	4c 4a       	sbci	r20, 0xAC	; 172
    9668:	48 45       	sbci	r20, 0x58	; 88
    966a:	43 41       	sbci	r20, 0x13	; 19
    966c:	3f 3d       	cpi	r19, 0xDF	; 223
    966e:	3b 39       	cpi	r19, 0x9B	; 155
    9670:	37 35       	cpi	r19, 0x57	; 87
    9672:	33 32       	cpi	r19, 0x23	; 35
    9674:	30 2f       	mov	r19, r16
    9676:	2e 2d       	mov	r18, r14
    9678:	2c 2b       	or	r18, r28
    967a:	2c 2d       	mov	r18, r12
    967c:	30 42       	sbci	r19, 0x20	; 32
    967e:	3d 28       	or	r3, r13
    9680:	00 e9       	ldi	r16, 0x90	; 144
    9682:	e5 fe       	sbrs	r14, 5
    9684:	d4 d7       	rcall	.+4008   	; 0xa62e <init_boss_shot+0x15a>
    9686:	d7 d7       	rcall	.+4014   	; 0xa636 <init_boss_shot+0x162>
    9688:	d6 d4       	rcall	.+2476   	; 0xa036 <LBPrintInt+0x60>
    968a:	d2 d0       	rcall	.+420    	; 0x9830 <waves+0x930>
    968c:	ce cc       	rjmp	.-1636   	; 0x902a <waves+0x12a>
    968e:	ca c8       	rjmp	.-3692   	; 0x8824 <TriggerNote+0x7e>
    9690:	c6 c3       	rjmp	.+1932   	; 0x9e1e <LBGetNextFrame+0x4>
    9692:	c1 bf       	out	0x31, r28	; 49
    9694:	bd ba       	out	0x1d, r11	; 29
    9696:	b8 b6       	in	r11, 0x38	; 56
    9698:	b4 b1       	in	r27, 0x04	; 4
    969a:	af ad       	ldd	r26, Y+63	; 0x3f
    969c:	ab a9       	ldd	r26, Y+51	; 0x33
    969e:	a7 a5       	ldd	r26, Z+47	; 0x2f
    96a0:	a3 a1       	ldd	r26, Z+35	; 0x23
    96a2:	9f 9e       	mul	r9, r31
    96a4:	9c 9a       	sbi	0x13, 4	; 19
    96a6:	99 97       	sbiw	r26, 0x29	; 41
    96a8:	95 94       	asr	r9
    96aa:	93 91       	.word	0x9193	; ????
    96ac:	90 8f       	std	Z+24, r25	; 0x18
    96ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    96b0:	8b 8a       	std	Y+19, r8	; 0x13
    96b2:	89 88       	ldd	r8, Y+17	; 0x11
    96b4:	88 87       	std	Y+8, r24	; 0x08
    96b6:	86 85       	ldd	r24, Z+14	; 0x0e
    96b8:	85 84       	ldd	r8, Z+13	; 0x0d
    96ba:	84 84       	ldd	r8, Z+12	; 0x0c
    96bc:	83 83       	std	Z+3, r24	; 0x03
    96be:	83 83       	std	Z+3, r24	; 0x03
    96c0:	83 83       	std	Z+3, r24	; 0x03
    96c2:	83 83       	std	Z+3, r24	; 0x03
    96c4:	83 84       	ldd	r8, Z+11	; 0x0b
    96c6:	84 84       	ldd	r8, Z+12	; 0x0c
    96c8:	85 85       	ldd	r24, Z+13	; 0x0d
    96ca:	86 87       	std	Z+14, r24	; 0x0e
    96cc:	88 88       	ldd	r8, Y+16	; 0x10
    96ce:	89 8a       	std	Y+17, r8	; 0x11
    96d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    96d2:	8d 8f       	std	Y+29, r24	; 0x1d
    96d4:	90 91 93 94 	lds	r25, 0x9493
    96d8:	95 97       	sbiw	r26, 0x25	; 37
    96da:	99 9a       	sbi	0x13, 1	; 19
    96dc:	9c 9e       	mul	r9, r28
    96de:	9f a1       	ldd	r25, Y+39	; 0x27
    96e0:	a3 a5       	ldd	r26, Z+43	; 0x2b
    96e2:	a7 a9       	ldd	r26, Z+55	; 0x37
    96e4:	ab ad       	ldd	r26, Y+59	; 0x3b
    96e6:	af b1       	in	r26, 0x0f	; 15
    96e8:	b4 b6       	in	r11, 0x34	; 52
    96ea:	b8 ba       	out	0x18, r11	; 24
    96ec:	bd bf       	out	0x3d, r27	; 61
    96ee:	c1 c3       	rjmp	.+1922   	; 0x9e72 <LBGetJoyPadState+0xc>
    96f0:	c6 c8       	rjmp	.-3700   	; 0x887e <ProcessMusic+0x58>
    96f2:	ca cc       	rjmp	.-1644   	; 0x9088 <waves+0x188>
    96f4:	ce d0       	rcall	.+412    	; 0x9892 <waves+0x992>
    96f6:	d2 d4       	rcall	.+2468   	; 0xa09c <LBRandom>
    96f8:	d6 d7       	rcall	.+4012   	; 0xa6a6 <init_boss_state+0x6>
    96fa:	d7 d7       	rcall	.+4014   	; 0xa6aa <init_boss_state+0xa>
    96fc:	d4 fe       	sbrs	r13, 4
    96fe:	e5 e9       	ldi	r30, 0x95	; 149
    9700:	f9 f8       	.word	0xf8f9	; ????
    9702:	f9 f5       	brne	.+126    	; 0x9782 <waves+0x882>
    9704:	eb e1       	ldi	r30, 0x1B	; 27
    9706:	dd de       	rcall	.-582    	; 0x94c2 <waves+0x5c2>
    9708:	e0 e2       	ldi	r30, 0x20	; 32
    970a:	e4 e5       	ldi	r30, 0x54	; 84
    970c:	e6 e5       	ldi	r30, 0x56	; 86
    970e:	e4 e2       	ldi	r30, 0x24	; 36
    9710:	de d9       	rcall	.-3140   	; 0x8ace <ProcessMusic+0x2a8>
    9712:	d2 ca       	rjmp	.-2652   	; 0x8cb8 <smw1>
    9714:	c1 b7       	in	r28, 0x31	; 49
    9716:	ac a2       	std	Y+36, r10	; 0x24
    9718:	99 91       	ld	r25, Y+
    971a:	8a 86       	std	Y+10, r8	; 0x0a
    971c:	83 81       	ldd	r24, Z+3	; 0x03
    971e:	80 80       	ld	r8, Z
    9720:	81 82       	std	Z+1, r8	; 0x01
    9722:	83 85       	ldd	r24, Z+11	; 0x0b
    9724:	86 88       	ldd	r8, Z+22	; 0x16
    9726:	8a 8c       	ldd	r8, Y+26	; 0x1a
    9728:	8d 8f       	std	Y+29, r24	; 0x1d
    972a:	90 92 93 95 	sts	0x9593, r9
    972e:	96 97       	sbiw	r26, 0x26	; 38
    9730:	98 99       	sbic	0x13, 0	; 19
    9732:	9a 9b       	sbis	0x13, 2	; 19
    9734:	9b 9c       	mul	r9, r11
    9736:	9d 9d       	mul	r25, r13
    9738:	9d 9e       	mul	r9, r29
    973a:	9e 9e       	mul	r9, r30
    973c:	9f 9f       	mul	r25, r31
    973e:	9f 9f       	mul	r25, r31
    9740:	9f 9f       	mul	r25, r31
    9742:	9f 9e       	mul	r9, r31
    9744:	9e 9e       	mul	r9, r30
    9746:	9d 9d       	mul	r25, r13
    9748:	9d 9c       	mul	r9, r13
    974a:	9b 9b       	sbis	0x13, 3	; 19
    974c:	9a 99       	sbic	0x13, 2	; 19
    974e:	98 97       	sbiw	r26, 0x28	; 40
    9750:	96 95       	lsr	r25
    9752:	93 92       	.word	0x9293	; ????
    9754:	90 8f       	std	Z+24, r25	; 0x18
    9756:	8d 8c       	ldd	r8, Y+29	; 0x1d
    9758:	8a 88       	ldd	r8, Y+18	; 0x12
    975a:	86 85       	ldd	r24, Z+14	; 0x0e
    975c:	83 82       	std	Z+3, r8	; 0x03
    975e:	81 80       	ldd	r8, Z+1	; 0x01
    9760:	80 81       	ld	r24, Z
    9762:	83 86       	std	Z+11, r8	; 0x0b
    9764:	8a 91       	ld	r24, -Y
    9766:	99 a2       	std	Y+33, r9	; 0x21
    9768:	ac b7       	in	r26, 0x3c	; 60
    976a:	c1 ca       	rjmp	.-2686   	; 0x8cee <esmw+0x20>
    976c:	d2 d9       	rcall	.-3164   	; 0x8b12 <ProcessMusic+0x2ec>
    976e:	de e2       	ldi	r29, 0x2E	; 46
    9770:	e4 e5       	ldi	r30, 0x54	; 84
    9772:	e6 e5       	ldi	r30, 0x56	; 86
    9774:	e4 e2       	ldi	r30, 0x24	; 36
    9776:	e0 de       	rcall	.-576    	; 0x9538 <waves+0x638>
    9778:	dd e1       	ldi	r29, 0x1D	; 29
    977a:	eb f5       	brvc	.+122    	; 0x97f6 <waves+0x8f6>
    977c:	f9 f8       	.word	0xf8f9	; ????
    977e:	f9 00       	.word	0x00f9	; ????
    9780:	07 08       	sbc	r0, r7
    9782:	07 0b       	sbc	r16, r23
    9784:	15 1f       	adc	r17, r21
    9786:	23 22       	and	r2, r19
    9788:	20 1e       	adc	r2, r16
    978a:	1c 1b       	sub	r17, r28
    978c:	1a 1b       	sub	r17, r26
    978e:	1c 1e       	adc	r1, r28
    9790:	22 27       	eor	r18, r18
    9792:	2e 36       	cpi	r18, 0x6E	; 110
    9794:	3f 49       	sbci	r19, 0x9F	; 159
    9796:	54 5e       	subi	r21, 0xE4	; 228
    9798:	67 6f       	ori	r22, 0xF7	; 247
    979a:	76 7a       	andi	r23, 0xA6	; 166
    979c:	7e 7f       	andi	r23, 0xFE	; 254
    979e:	7f 7f       	andi	r23, 0xFF	; 255
    97a0:	7f 7e       	andi	r23, 0xEF	; 239
    97a2:	7d 7b       	andi	r23, 0xBD	; 189
    97a4:	7a 78       	andi	r23, 0x8A	; 138
    97a6:	76 74       	andi	r23, 0x46	; 70
    97a8:	73 71       	andi	r23, 0x13	; 19
    97aa:	70 6e       	ori	r23, 0xE0	; 224
    97ac:	6d 6b       	ori	r22, 0xBD	; 189
    97ae:	6a 69       	ori	r22, 0x9A	; 154
    97b0:	68 67       	ori	r22, 0x78	; 120
    97b2:	66 65       	ori	r22, 0x56	; 86
    97b4:	65 64       	ori	r22, 0x45	; 69
    97b6:	64 63       	ori	r22, 0x34	; 52
    97b8:	63 62       	ori	r22, 0x23	; 35
    97ba:	62 62       	ori	r22, 0x22	; 34
    97bc:	61 61       	ori	r22, 0x11	; 17
    97be:	61 61       	ori	r22, 0x11	; 17
    97c0:	61 61       	ori	r22, 0x11	; 17
    97c2:	61 62       	ori	r22, 0x21	; 33
    97c4:	62 62       	ori	r22, 0x22	; 34
    97c6:	63 63       	ori	r22, 0x33	; 51
    97c8:	63 64       	ori	r22, 0x43	; 67
    97ca:	65 65       	ori	r22, 0x55	; 85
    97cc:	66 67       	ori	r22, 0x76	; 118
    97ce:	68 69       	ori	r22, 0x98	; 152
    97d0:	6a 6b       	ori	r22, 0xBA	; 186
    97d2:	6d 6e       	ori	r22, 0xED	; 237
    97d4:	70 71       	andi	r23, 0x10	; 16
    97d6:	73 74       	andi	r23, 0x43	; 67
    97d8:	76 78       	andi	r23, 0x86	; 134
    97da:	7a 7b       	andi	r23, 0xBA	; 186
    97dc:	7d 7e       	andi	r23, 0xED	; 237
    97de:	7f 7f       	andi	r23, 0xFF	; 255
    97e0:	7f 7f       	andi	r23, 0xFF	; 255
    97e2:	7e 7a       	andi	r23, 0xAE	; 174
    97e4:	76 6f       	ori	r23, 0xF6	; 246
    97e6:	67 5e       	subi	r22, 0xE7	; 231
    97e8:	54 49       	sbci	r21, 0x94	; 148
    97ea:	3f 36       	cpi	r19, 0x6F	; 111
    97ec:	2e 27       	eor	r18, r30
    97ee:	22 1e       	adc	r2, r18
    97f0:	1c 1b       	sub	r17, r28
    97f2:	1a 1b       	sub	r17, r26
    97f4:	1c 1e       	adc	r1, r28
    97f6:	20 22       	and	r2, r16
    97f8:	23 1f       	adc	r18, r19
    97fa:	15 0b       	sbc	r17, r21
    97fc:	07 08       	sbc	r0, r7
    97fe:	07 00       	.word	0x0007	; ????
    9800:	1f 31       	cpi	r17, 0x1F	; 31
    9802:	3d 44       	sbci	r19, 0x4D	; 77
    9804:	4e 53       	subi	r20, 0x3E	; 62
    9806:	54 56       	subi	r21, 0x64	; 100
    9808:	5a 5f       	subi	r21, 0xFA	; 250
    980a:	64 69       	ori	r22, 0x94	; 148
    980c:	6e 74       	andi	r22, 0x4E	; 78
    980e:	76 79       	andi	r23, 0x96	; 150
    9810:	7c 7f       	andi	r23, 0xFC	; 252
    9812:	7f 7f       	andi	r23, 0xFF	; 255
    9814:	7f 7f       	andi	r23, 0xFF	; 255
    9816:	7f 7f       	andi	r23, 0xFF	; 255
    9818:	7f 7f       	andi	r23, 0xFF	; 255
    981a:	7f 7f       	andi	r23, 0xFF	; 255
    981c:	7f 7f       	andi	r23, 0xFF	; 255
    981e:	7f 7f       	andi	r23, 0xFF	; 255
    9820:	7f 7f       	andi	r23, 0xFF	; 255
    9822:	7f 7f       	andi	r23, 0xFF	; 255
    9824:	7f 7f       	andi	r23, 0xFF	; 255
    9826:	7f 7f       	andi	r23, 0xFF	; 255
    9828:	7f 7f       	andi	r23, 0xFF	; 255
    982a:	7f 7f       	andi	r23, 0xFF	; 255
    982c:	7f 7f       	andi	r23, 0xFF	; 255
    982e:	7f 7f       	andi	r23, 0xFF	; 255
    9830:	7f 7f       	andi	r23, 0xFF	; 255
    9832:	7f 7f       	andi	r23, 0xFF	; 255
    9834:	7f 7f       	andi	r23, 0xFF	; 255
    9836:	7f 7f       	andi	r23, 0xFF	; 255
    9838:	7f 7f       	andi	r23, 0xFF	; 255
    983a:	7f 7f       	andi	r23, 0xFF	; 255
    983c:	7f 7f       	andi	r23, 0xFF	; 255
    983e:	7f 7f       	andi	r23, 0xFF	; 255
    9840:	7f 7f       	andi	r23, 0xFF	; 255
    9842:	7f 7f       	andi	r23, 0xFF	; 255
    9844:	7f 7f       	andi	r23, 0xFF	; 255
    9846:	7f 7f       	andi	r23, 0xFF	; 255
    9848:	7f 7f       	andi	r23, 0xFF	; 255
    984a:	7f 7f       	andi	r23, 0xFF	; 255
    984c:	7f 7f       	andi	r23, 0xFF	; 255
    984e:	7f 7f       	andi	r23, 0xFF	; 255
    9850:	7f 7f       	andi	r23, 0xFF	; 255
    9852:	7f 7f       	andi	r23, 0xFF	; 255
    9854:	7f 7f       	andi	r23, 0xFF	; 255
    9856:	7f 7f       	andi	r23, 0xFF	; 255
    9858:	7f 7f       	andi	r23, 0xFF	; 255
    985a:	7f 7f       	andi	r23, 0xFF	; 255
    985c:	7f 7f       	andi	r23, 0xFF	; 255
    985e:	7f 7f       	andi	r23, 0xFF	; 255
    9860:	7f 7f       	andi	r23, 0xFF	; 255
    9862:	7f 7f       	andi	r23, 0xFF	; 255
    9864:	7f 7f       	andi	r23, 0xFF	; 255
    9866:	7f 7f       	andi	r23, 0xFF	; 255
    9868:	7f 7f       	andi	r23, 0xFF	; 255
    986a:	7f 7f       	andi	r23, 0xFF	; 255
    986c:	7f 7f       	andi	r23, 0xFF	; 255
    986e:	7f 7f       	andi	r23, 0xFF	; 255
    9870:	7f 7f       	andi	r23, 0xFF	; 255
    9872:	7f 7f       	andi	r23, 0xFF	; 255
    9874:	7f 7f       	andi	r23, 0xFF	; 255
    9876:	7f 7f       	andi	r23, 0xFF	; 255
    9878:	7f 7f       	andi	r23, 0xFF	; 255
    987a:	7f 7c       	andi	r23, 0xCF	; 207
    987c:	78 71       	andi	r23, 0x18	; 24
    987e:	68 4c       	sbci	r22, 0xC8	; 200
    9880:	2c 1c       	adc	r2, r12
    9882:	12 0c       	add	r1, r2
    9884:	0a 0b       	sbc	r16, r26
    9886:	0a 05       	cpc	r16, r10
    9888:	fd f3       	brhs	.-2      	; 0x9888 <waves+0x988>
    988a:	e9 df       	rcall	.-46     	; 0x985e <waves+0x95e>
    988c:	d4 ca       	rjmp	.-2648   	; 0x8e36 <steptable+0x12e>
    988e:	c0 b7       	in	r28, 0x30	; 48
    9890:	ae a6       	std	Y+46, r10	; 0x2e
    9892:	9e 97       	sbiw	r26, 0x2e	; 46
    9894:	91 8b       	std	Z+17, r25	; 0x11
    9896:	86 85       	ldd	r24, Z+14	; 0x0e
    9898:	82 80       	ldd	r8, Z+2	; 0x02
    989a:	80 80       	ld	r8, Z
    989c:	80 80       	ld	r8, Z
    989e:	80 80       	ld	r8, Z
    98a0:	80 80       	ld	r8, Z
    98a2:	80 80       	ld	r8, Z
    98a4:	80 80       	ld	r8, Z
    98a6:	80 80       	ld	r8, Z
    98a8:	80 80       	ld	r8, Z
    98aa:	80 80       	ld	r8, Z
    98ac:	80 80       	ld	r8, Z
    98ae:	80 80       	ld	r8, Z
    98b0:	80 80       	ld	r8, Z
    98b2:	80 80       	ld	r8, Z
    98b4:	80 80       	ld	r8, Z
    98b6:	80 80       	ld	r8, Z
    98b8:	80 80       	ld	r8, Z
    98ba:	80 80       	ld	r8, Z
    98bc:	80 80       	ld	r8, Z
    98be:	80 80       	ld	r8, Z
    98c0:	80 80       	ld	r8, Z
    98c2:	80 80       	ld	r8, Z
    98c4:	80 80       	ld	r8, Z
    98c6:	80 80       	ld	r8, Z
    98c8:	80 80       	ld	r8, Z
    98ca:	80 80       	ld	r8, Z
    98cc:	80 80       	ld	r8, Z
    98ce:	80 80       	ld	r8, Z
    98d0:	80 80       	ld	r8, Z
    98d2:	80 80       	ld	r8, Z
    98d4:	80 80       	ld	r8, Z
    98d6:	80 80       	ld	r8, Z
    98d8:	80 80       	ld	r8, Z
    98da:	80 80       	ld	r8, Z
    98dc:	80 80       	ld	r8, Z
    98de:	80 80       	ld	r8, Z
    98e0:	80 80       	ld	r8, Z
    98e2:	80 80       	ld	r8, Z
    98e4:	80 80       	ld	r8, Z
    98e6:	80 80       	ld	r8, Z
    98e8:	80 80       	ld	r8, Z
    98ea:	80 80       	ld	r8, Z
    98ec:	80 80       	ld	r8, Z
    98ee:	80 80       	ld	r8, Z
    98f0:	80 80       	ld	r8, Z
    98f2:	80 80       	ld	r8, Z
    98f4:	80 87       	std	Z+8, r24	; 0x08
    98f6:	91 9d       	mul	r25, r1
    98f8:	ac c4       	rjmp	.+2392   	; 0xa252 <LBRotateSprites+0x4c>
    98fa:	cb d4       	rcall	.+2454   	; 0xa292 <init_default_high_scores+0x1c>
    98fc:	dd f2       	brhs	.-74     	; 0x98b4 <waves+0x9b4>
    98fe:	fa fa       	.word	0xfafa	; ????

00009900 <RestoreBackground>:
	unsigned char free_tile_index, userRamTilesCount=0,userRamTilesCount_tmp=0;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=userRamTilesCount;i<free_tile_index;i++){
    9900:	80 91 f3 0c 	lds	r24, 0x0CF3
    9904:	90 91 7f 0d 	lds	r25, 0x0D7F
    9908:	89 17       	cp	r24, r25
    990a:	78 f4       	brcc	.+30     	; 0x992a <RestoreBackground+0x2a>
			//vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
			*ram_tiles_restore[i].addr=ram_tiles_restore[i].tileIndex;
    990c:	e8 2f       	mov	r30, r24
    990e:	f0 e0       	ldi	r31, 0x00	; 0
    9910:	9f 01       	movw	r18, r30
    9912:	22 0f       	add	r18, r18
    9914:	33 1f       	adc	r19, r19
    9916:	e2 0f       	add	r30, r18
    9918:	f3 1f       	adc	r31, r19
    991a:	e0 5b       	subi	r30, 0xB0	; 176
    991c:	f3 4f       	sbci	r31, 0xF3	; 243
    991e:	a0 81       	ld	r26, Z
    9920:	b1 81       	ldd	r27, Z+1	; 0x01
    9922:	92 81       	ldd	r25, Z+2	; 0x02
    9924:	9c 93       	st	X, r25
	unsigned char free_tile_index, userRamTilesCount=0,userRamTilesCount_tmp=0;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=userRamTilesCount;i<free_tile_index;i++){
    9926:	8f 5f       	subi	r24, 0xFF	; 255
    9928:	ed cf       	rjmp	.-38     	; 0x9904 <RestoreBackground+0x4>
			//vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
			*ram_tiles_restore[i].addr=ram_tiles_restore[i].tileIndex;
		}	
	}
    992a:	08 95       	ret

0000992c <ProcessSprites>:
		}

	}
	*/

	void ProcessSprites(){
    992c:	2f 92       	push	r2
    992e:	3f 92       	push	r3
    9930:	4f 92       	push	r4
    9932:	5f 92       	push	r5
    9934:	6f 92       	push	r6
    9936:	7f 92       	push	r7
    9938:	8f 92       	push	r8
    993a:	9f 92       	push	r9
    993c:	af 92       	push	r10
    993e:	bf 92       	push	r11
    9940:	cf 92       	push	r12
    9942:	df 92       	push	r13
    9944:	ef 92       	push	r14
    9946:	ff 92       	push	r15
    9948:	0f 93       	push	r16
    994a:	1f 93       	push	r17
    994c:	cf 93       	push	r28
    994e:	df 93       	push	r29
    9950:	00 d0       	rcall	.+0      	; 0x9952 <ProcessSprites+0x26>
    9952:	00 d0       	rcall	.+0      	; 0x9954 <ProcessSprites+0x28>
    9954:	cd b7       	in	r28, 0x3d	; 61
    9956:	de b7       	in	r29, 0x3e	; 62
	
		unsigned char i,bx,by,dx,dy,bt,x,y,tx=1,ty=1,wx,wy;
		unsigned int ramPtr,ssx,ssy;

		if(!spritesOn) return;
    9958:	80 91 00 05 	lds	r24, 0x0500
    995c:	88 23       	and	r24, r24
    995e:	09 f4       	brne	.+2      	; 0x9962 <ProcessSprites+0x36>
    9960:	e0 c0       	rjmp	.+448    	; 0x9b22 <ProcessSprites+0x1f6>

		userRamTilesCount=userRamTilesCount_tmp;
    9962:	80 91 f2 0c 	lds	r24, 0x0CF2
    9966:	80 93 f3 0c 	sts	0x0CF3, r24
		free_tile_index=userRamTilesCount;
    996a:	80 93 7f 0d 	sts	0x0D7F, r24
    996e:	e0 e1       	ldi	r30, 0x10	; 16
    9970:	ce 2e       	mov	r12, r30
    9972:	e5 e0       	ldi	r30, 0x05	; 5
    9974:	de 2e       	mov	r13, r30
	
		for(i=0;i<MAX_SPRITES;i++){
    9976:	71 2c       	mov	r7, r1
			bx=sprites[i].x;
    9978:	f6 01       	movw	r30, r12
    997a:	20 81       	ld	r18, Z

			if(bx!=(SCREEN_TILES_H*TILE_WIDTH)){
    997c:	20 3e       	cpi	r18, 0xE0	; 224
    997e:	09 f4       	brne	.+2      	; 0x9982 <ProcessSprites+0x56>
    9980:	b1 c0       	rjmp	.+354    	; 0x9ae4 <ProcessSprites+0x1b8>
				//get tile's screen section offsets
				
				#if SCROLLING == 1
					ssx=sprites[i].x+Screen.scrollX;
    9982:	80 91 b2 0c 	lds	r24, 0x0CB2
    9986:	90 e0       	ldi	r25, 0x00	; 0
    9988:	82 0f       	add	r24, r18
    998a:	91 1d       	adc	r25, r1
					ssy=sprites[i].y+Screen.scrollY;
    998c:	41 81       	ldd	r20, Z+1	; 0x01
    998e:	20 91 b3 0c 	lds	r18, 0x0CB3
    9992:	30 e0       	ldi	r19, 0x00	; 0
    9994:	24 0f       	add	r18, r20
    9996:	31 1d       	adc	r19, r1

				tx=1;
				ty=1;

				//get the BG tiles that are overlapped by the sprite
				bx=ssx>>3;
    9998:	ac 01       	movw	r20, r24
    999a:	73 e0       	ldi	r23, 0x03	; 3
    999c:	56 95       	lsr	r21
    999e:	47 95       	ror	r20
    99a0:	7a 95       	dec	r23
    99a2:	e1 f7       	brne	.-8      	; 0x999c <ProcessSprites+0x70>
    99a4:	64 2e       	mov	r6, r20
				dx=ssx&0x7;
    99a6:	87 70       	andi	r24, 0x07	; 7
				if(dx>0) tx++;
    99a8:	11 f0       	breq	.+4      	; 0x99ae <ProcessSprites+0x82>
    99aa:	92 e0       	ldi	r25, 0x02	; 2
    99ac:	01 c0       	rjmp	.+2      	; 0x99b0 <ProcessSprites+0x84>
   				#else
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
    99ae:	91 e0       	ldi	r25, 0x01	; 1
    99b0:	99 83       	std	Y+1, r25	; 0x01
				dx=ssx&0x7;
				if(dx>0) tx++;

				//by=ssy>>3;
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
    99b2:	a9 01       	movw	r20, r18
    99b4:	63 e0       	ldi	r22, 0x03	; 3
    99b6:	56 95       	lsr	r21
    99b8:	47 95       	ror	r20
    99ba:	6a 95       	dec	r22
    99bc:	e1 f7       	brne	.-8      	; 0x99b6 <ProcessSprites+0x8a>
    99be:	54 2e       	mov	r5, r20
				dy=ssy%TILE_HEIGHT;
    99c0:	27 70       	andi	r18, 0x07	; 7
				if(dy>0) ty++;			
    99c2:	19 f0       	breq	.+6      	; 0x99ca <ProcessSprites+0x9e>
    99c4:	52 e0       	ldi	r21, 0x02	; 2
    99c6:	35 2e       	mov	r3, r21
    99c8:	02 c0       	rjmp	.+4      	; 0x99ce <ProcessSprites+0xa2>
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
				ty=1;
    99ca:	33 24       	eor	r3, r3
    99cc:	33 94       	inc	r3
								bt=free_tile_index;
								free_tile_index++;
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    99ce:	30 e0       	ldi	r19, 0x00	; 0
    99d0:	32 2f       	mov	r19, r18
    99d2:	22 27       	eor	r18, r18
    99d4:	f9 01       	movw	r30, r18
    99d6:	e8 0f       	add	r30, r24
    99d8:	f1 1d       	adc	r31, r1
    99da:	fc 83       	std	Y+4, r31	; 0x04
    99dc:	eb 83       	std	Y+3, r30	; 0x03
    99de:	e1 2c       	mov	r14, r1
    99e0:	f1 2c       	mov	r15, r1
    99e2:	be 2c       	mov	r11, r14
    99e4:	aa 24       	eor	r10, r10
    99e6:	26 2c       	mov	r2, r6
    99e8:	45 2c       	mov	r4, r5
    99ea:	4e 0c       	add	r4, r14
								    wy-=(VRAM_TILES_V*2);
							    }else if(wy>=VRAM_TILES_V){
							    	wy-=VRAM_TILES_V;
							    }
                            #else
                                if(wy>=(Screen.scrollHeight*2)){
    99ec:	84 2c       	mov	r8, r4
    99ee:	91 2c       	mov	r9, r1
    99f0:	84 2d       	mov	r24, r4
    99f2:	20 91 b4 0c 	lds	r18, 0x0CB4
    99f6:	42 2f       	mov	r20, r18
    99f8:	50 e0       	ldi	r21, 0x00	; 0
    99fa:	44 0f       	add	r20, r20
    99fc:	55 1f       	adc	r21, r21
    99fe:	84 16       	cp	r8, r20
    9a00:	95 06       	cpc	r9, r21
    9a02:	14 f0       	brlt	.+4      	; 0x9a08 <ProcessSprites+0xdc>
								    wy-=(Screen.scrollHeight*2);
    9a04:	22 0f       	add	r18, r18
    9a06:	03 c0       	rjmp	.+6      	; 0x9a0e <ProcessSprites+0xe2>
							    }else if(wy>=Screen.scrollHeight){
    9a08:	42 16       	cp	r4, r18
    9a0a:	10 f0       	brcs	.+4      	; 0x9a10 <ProcessSprites+0xe4>
							    	wy-=Screen.scrollHeight;
    9a0c:	84 2d       	mov	r24, r4
    9a0e:	82 1b       	sub	r24, r18
							    }
                            #endif
							if(wx>=VRAM_TILES_H)wx-=VRAM_TILES_H; //should always be 32
    9a10:	ff e1       	ldi	r31, 0x1F	; 31
    9a12:	f2 15       	cp	r31, r2
    9a14:	18 f4       	brcc	.+6      	; 0x9a1c <ProcessSprites+0xf0>
    9a16:	00 ee       	ldi	r16, 0xE0	; 224
    9a18:	02 0d       	add	r16, r2
    9a1a:	01 c0       	rjmp	.+2      	; 0x9a1e <ProcessSprites+0xf2>
    9a1c:	02 2d       	mov	r16, r2

							#if SCROLLING == 0
								ramPtr=(wy*VRAM_TILES_H)+wx;
							#else

								ramPtr=((wy>>3)*256)+(wx*8)+(wy&7);	
    9a1e:	28 2f       	mov	r18, r24
    9a20:	26 95       	lsr	r18
    9a22:	26 95       	lsr	r18
    9a24:	26 95       	lsr	r18
    9a26:	10 e0       	ldi	r17, 0x00	; 0
    9a28:	40 e2       	ldi	r20, 0x20	; 32
    9a2a:	24 9f       	mul	r18, r20
    9a2c:	00 0d       	add	r16, r0
    9a2e:	11 1d       	adc	r17, r1
    9a30:	11 24       	eor	r1, r1
    9a32:	23 e0       	ldi	r18, 0x03	; 3
    9a34:	00 0f       	add	r16, r16
    9a36:	11 1f       	adc	r17, r17
    9a38:	2a 95       	dec	r18
    9a3a:	e1 f7       	brne	.-8      	; 0x9a34 <ProcessSprites+0x108>
    9a3c:	87 70       	andi	r24, 0x07	; 7
    9a3e:	08 0f       	add	r16, r24
    9a40:	11 1d       	adc	r17, r1

							#endif

							bt=vram[ramPtr];						
    9a42:	00 50       	subi	r16, 0x00	; 0
    9a44:	1f 4f       	sbci	r17, 0xFF	; 255
    9a46:	f8 01       	movw	r30, r16
    9a48:	70 81       	ld	r23, Z

							if( ((bt>=RAM_TILES_COUNT) | (bt<userRamTilesCount)) && (free_tile_index < RAM_TILES_COUNT) ){ //if no ram free ignore tile
    9a4a:	81 e0       	ldi	r24, 0x01	; 1
    9a4c:	7c 31       	cpi	r23, 0x1C	; 28
    9a4e:	08 f4       	brcc	.+2      	; 0x9a52 <ProcessSprites+0x126>
    9a50:	80 e0       	ldi	r24, 0x00	; 0
    9a52:	21 e0       	ldi	r18, 0x01	; 1
    9a54:	30 91 f3 0c 	lds	r19, 0x0CF3
    9a58:	73 17       	cp	r23, r19
    9a5a:	18 f0       	brcs	.+6      	; 0x9a62 <ProcessSprites+0x136>
    9a5c:	20 e0       	ldi	r18, 0x00	; 0
    9a5e:	88 23       	and	r24, r24
    9a60:	51 f1       	breq	.+84     	; 0x9ab6 <ProcessSprites+0x18a>
    9a62:	60 91 7f 0d 	lds	r22, 0x0D7F
    9a66:	6c 31       	cpi	r22, 0x1C	; 28
    9a68:	20 f5       	brcc	.+72     	; 0x9ab2 <ProcessSprites+0x186>
								if( bt>=RAM_TILES_COUNT ){
    9a6a:	88 23       	and	r24, r24
    9a6c:	31 f0       	breq	.+12     	; 0x9a7a <ProcessSprites+0x14e>
									//tile is mapped to flash. Copy it to next free RAM tile.
									CopyFlashTile(bt-RAM_TILES_COUNT,free_tile_index);
    9a6e:	84 ee       	ldi	r24, 0xE4	; 228
    9a70:	87 0f       	add	r24, r23
    9a72:	7a 83       	std	Y+2, r23	; 0x02
    9a74:	0e 94 67 3c 	call	0x78ce	; 0x78ce <CopyFlashTile>
    9a78:	06 c0       	rjmp	.+12     	; 0x9a86 <ProcessSprites+0x15a>
								}else if(bt<userRamTilesCount){
    9a7a:	22 23       	and	r18, r18
    9a7c:	29 f0       	breq	.+10     	; 0x9a88 <ProcessSprites+0x15c>
									//tile is a user ram tile. Copy it to next free RAM tile.
									CopyRamTile(bt,free_tile_index);
    9a7e:	87 2f       	mov	r24, r23
    9a80:	7a 83       	std	Y+2, r23	; 0x02
    9a82:	0e 94 f6 3c 	call	0x79ec	; 0x79ec <CopyRamTile>
    9a86:	7a 81       	ldd	r23, Y+2	; 0x02
								}
								ram_tiles_restore[free_tile_index].addr=(&vram[ramPtr]);
    9a88:	80 91 7f 0d 	lds	r24, 0x0D7F
    9a8c:	e8 2f       	mov	r30, r24
    9a8e:	f0 e0       	ldi	r31, 0x00	; 0
    9a90:	9f 01       	movw	r18, r30
    9a92:	22 0f       	add	r18, r18
    9a94:	33 1f       	adc	r19, r19
    9a96:	e2 0f       	add	r30, r18
    9a98:	f3 1f       	adc	r31, r19
    9a9a:	e0 5b       	subi	r30, 0xB0	; 176
    9a9c:	f3 4f       	sbci	r31, 0xF3	; 243
    9a9e:	11 83       	std	Z+1, r17	; 0x01
    9aa0:	00 83       	st	Z, r16
								ram_tiles_restore[free_tile_index].tileIndex=bt;
    9aa2:	72 83       	std	Z+2, r23	; 0x02
								vram[ramPtr]=free_tile_index;
    9aa4:	f8 01       	movw	r30, r16
    9aa6:	80 83       	st	Z, r24
								bt=free_tile_index;
								free_tile_index++;
    9aa8:	21 e0       	ldi	r18, 0x01	; 1
    9aaa:	28 0f       	add	r18, r24
    9aac:	20 93 7f 0d 	sts	0x0D7F, r18
									CopyRamTile(bt,free_tile_index);
								}
								ram_tiles_restore[free_tile_index].addr=(&vram[ramPtr]);
								ram_tiles_restore[free_tile_index].tileIndex=bt;
								vram[ramPtr]=free_tile_index;
								bt=free_tile_index;
    9ab0:	78 2f       	mov	r23, r24
								free_tile_index++;
							}
				
							if(bt<RAM_TILES_COUNT){				
    9ab2:	7c 31       	cpi	r23, 0x1C	; 28
    9ab4:	38 f4       	brcc	.+14     	; 0x9ac4 <ProcessSprites+0x198>
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    9ab6:	2b 81       	ldd	r18, Y+3	; 0x03
    9ab8:	3c 81       	ldd	r19, Y+4	; 0x04
    9aba:	a5 01       	movw	r20, r10
    9abc:	67 2f       	mov	r22, r23
    9abe:	87 2d       	mov	r24, r7
    9ac0:	0e 94 83 3d 	call	0x7b06	; 0x7b06 <BlitSprite>
    9ac4:	ff ef       	ldi	r31, 0xFF	; 255
    9ac6:	af 1a       	sub	r10, r31
    9ac8:	bf 0a       	sbc	r11, r31
    9aca:	23 94       	inc	r2
    9acc:	82 2d       	mov	r24, r2
    9ace:	86 19       	sub	r24, r6
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){

					for(x=0;x<tx;x++){
    9ad0:	99 81       	ldd	r25, Y+1	; 0x01
    9ad2:	89 17       	cp	r24, r25
    9ad4:	08 f4       	brcc	.+2      	; 0x9ad8 <ProcessSprites+0x1ac>
    9ad6:	8c cf       	rjmp	.-232    	; 0x99f0 <ProcessSprites+0xc4>
    9ad8:	ef ef       	ldi	r30, 0xFF	; 255
    9ada:	ee 1a       	sub	r14, r30
    9adc:	fe 0a       	sbc	r15, r30
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){
    9ade:	e3 14       	cp	r14, r3
    9ae0:	08 f4       	brcc	.+2      	; 0x9ae4 <ProcessSprites+0x1b8>
    9ae2:	7f cf       	rjmp	.-258    	; 0x99e2 <ProcessSprites+0xb6>
		if(!spritesOn) return;

		userRamTilesCount=userRamTilesCount_tmp;
		free_tile_index=userRamTilesCount;
	
		for(i=0;i<MAX_SPRITES;i++){
    9ae4:	73 94       	inc	r7
    9ae6:	f4 e0       	ldi	r31, 0x04	; 4
    9ae8:	cf 0e       	add	r12, r31
    9aea:	d1 1c       	adc	r13, r1
    9aec:	40 e1       	ldi	r20, 0x10	; 16
    9aee:	74 12       	cpse	r7, r20
    9af0:	43 cf       	rjmp	.-378    	; 0x9978 <ProcessSprites+0x4c>


		//restore BG tiles
		RestoreBackground();

	}
    9af2:	0f 90       	pop	r0
    9af4:	0f 90       	pop	r0
    9af6:	0f 90       	pop	r0
    9af8:	0f 90       	pop	r0
    9afa:	df 91       	pop	r29
    9afc:	cf 91       	pop	r28
    9afe:	1f 91       	pop	r17
    9b00:	0f 91       	pop	r16
    9b02:	ff 90       	pop	r15
    9b04:	ef 90       	pop	r14
    9b06:	df 90       	pop	r13
    9b08:	cf 90       	pop	r12
    9b0a:	bf 90       	pop	r11
    9b0c:	af 90       	pop	r10
    9b0e:	9f 90       	pop	r9
    9b10:	8f 90       	pop	r8
    9b12:	7f 90       	pop	r7
    9b14:	6f 90       	pop	r6
    9b16:	5f 90       	pop	r5
    9b18:	4f 90       	pop	r4
    9b1a:	3f 90       	pop	r3
    9b1c:	2f 90       	pop	r2
			}//	if(bx<(SCREEN_TILES_H*TILE_WIDTH))		
		}


		//restore BG tiles
		RestoreBackground();
    9b1e:	0c 94 80 4c 	jmp	0x9900	; 0x9900 <RestoreBackground>

	}
    9b22:	0f 90       	pop	r0
    9b24:	0f 90       	pop	r0
    9b26:	0f 90       	pop	r0
    9b28:	0f 90       	pop	r0
    9b2a:	df 91       	pop	r29
    9b2c:	cf 91       	pop	r28
    9b2e:	1f 91       	pop	r17
    9b30:	0f 91       	pop	r16
    9b32:	ff 90       	pop	r15
    9b34:	ef 90       	pop	r14
    9b36:	df 90       	pop	r13
    9b38:	cf 90       	pop	r12
    9b3a:	bf 90       	pop	r11
    9b3c:	af 90       	pop	r10
    9b3e:	9f 90       	pop	r9
    9b40:	8f 90       	pop	r8
    9b42:	7f 90       	pop	r7
    9b44:	6f 90       	pop	r6
    9b46:	5f 90       	pop	r5
    9b48:	4f 90       	pop	r4
    9b4a:	3f 90       	pop	r3
    9b4c:	2f 90       	pop	r2
    9b4e:	08 95       	ret

00009b50 <Scroll>:

	#if SCROLLING == 1
		//Scroll the screen by the relative amount specified (+/-)
		//This function handles screen wrapping on the Y axis if VRAM_TILES_V is less than 32
		void Scroll(char dx,char dy){
		Screen.scrollY+=dy;
    9b50:	90 91 b3 0c 	lds	r25, 0x0CB3
    9b54:	96 0f       	add	r25, r22
    9b56:	90 93 b3 0c 	sts	0x0CB3, r25
		Screen.scrollX+=dx;
    9b5a:	20 91 b2 0c 	lds	r18, 0x0CB2
    9b5e:	82 0f       	add	r24, r18
    9b60:	80 93 b2 0c 	sts	0x0CB2, r24

		if(Screen.scrollHeight<32){
    9b64:	80 91 b4 0c 	lds	r24, 0x0CB4
    9b68:	80 32       	cpi	r24, 0x20	; 32
    9b6a:	b0 f4       	brcc	.+44     	; 0x9b98 <Scroll+0x48>

			if(Screen.scrollY>=(Screen.scrollHeight*TILE_HEIGHT)){
    9b6c:	29 2f       	mov	r18, r25
    9b6e:	30 e0       	ldi	r19, 0x00	; 0
    9b70:	78 e0       	ldi	r23, 0x08	; 8
    9b72:	87 9f       	mul	r24, r23
    9b74:	a0 01       	movw	r20, r0
    9b76:	11 24       	eor	r1, r1
    9b78:	24 17       	cp	r18, r20
    9b7a:	35 07       	cpc	r19, r21
    9b7c:	6c f0       	brlt	.+26     	; 0x9b98 <Scroll+0x48>
				if(dy>=0){	
    9b7e:	67 fd       	sbrc	r22, 7
    9b80:	05 c0       	rjmp	.+10     	; 0x9b8c <Scroll+0x3c>
					Screen.scrollY=(Screen.scrollY-(Screen.scrollHeight*TILE_HEIGHT));
    9b82:	28 ef       	ldi	r18, 0xF8	; 248
    9b84:	82 9f       	mul	r24, r18
    9b86:	90 0d       	add	r25, r0
    9b88:	11 24       	eor	r1, r1
    9b8a:	04 c0       	rjmp	.+8      	; 0x9b94 <Scroll+0x44>
				}else{
					Screen.scrollY=((Screen.scrollHeight*TILE_HEIGHT)-1)-(0xff-Screen.scrollY);
    9b8c:	78 e0       	ldi	r23, 0x08	; 8
    9b8e:	87 9f       	mul	r24, r23
    9b90:	90 0d       	add	r25, r0
    9b92:	11 24       	eor	r1, r1
    9b94:	90 93 b3 0c 	sts	0x0CB3, r25
    9b98:	08 95       	ret

00009b9a <InitializeVideoMode>:
		#endif	
	}


	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){
    9b9a:	e0 e1       	ldi	r30, 0x10	; 16
    9b9c:	f5 e0       	ldi	r31, 0x05	; 5

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
			sprites[i].x=(SCREEN_TILES_H*TILE_WIDTH);		
    9b9e:	80 ee       	ldi	r24, 0xE0	; 224
    9ba0:	80 83       	st	Z, r24
    9ba2:	34 96       	adiw	r30, 0x04	; 4

	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
    9ba4:	95 e0       	ldi	r25, 0x05	; 5
    9ba6:	e0 35       	cpi	r30, 0x50	; 80
    9ba8:	f9 07       	cpc	r31, r25
    9baa:	d1 f7       	brne	.-12     	; 0x9ba0 <InitializeVideoMode+0x6>
		
		#if SCROLLING == 1
		//	for(int i=0;i<(OVERLAY_LINES*VRAM_TILES_H);i++){
		//		overlay_vram[i]=RAM_TILES_COUNT;
		//	}
			Screen.scrollHeight=VRAM_TILES_V;
    9bac:	80 e2       	ldi	r24, 0x20	; 32
    9bae:	80 93 b4 0c 	sts	0x0CB4, r24
			Screen.overlayHeight=0;
    9bb2:	10 92 af 0c 	sts	0x0CAF, r1
    9bb6:	08 95       	ret

00009bb8 <DrawMap>:



//Draws a map of tile at the specified position
#if VRAM_ADDR_SIZE == 1
	void DrawMap(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
    9bb8:	2f 92       	push	r2
    9bba:	3f 92       	push	r3
    9bbc:	4f 92       	push	r4
    9bbe:	5f 92       	push	r5
    9bc0:	6f 92       	push	r6
    9bc2:	7f 92       	push	r7
    9bc4:	8f 92       	push	r8
    9bc6:	9f 92       	push	r9
    9bc8:	af 92       	push	r10
    9bca:	bf 92       	push	r11
    9bcc:	cf 92       	push	r12
    9bce:	df 92       	push	r13
    9bd0:	ef 92       	push	r14
    9bd2:	ff 92       	push	r15
    9bd4:	0f 93       	push	r16
    9bd6:	1f 93       	push	r17
    9bd8:	cf 93       	push	r28
    9bda:	df 93       	push	r29
    9bdc:	00 d0       	rcall	.+0      	; 0x9bde <DrawMap+0x26>
    9bde:	1f 92       	push	r1
    9be0:	cd b7       	in	r28, 0x3d	; 61
    9be2:	de b7       	in	r29, 0x3e	; 62
    9be4:	28 2f       	mov	r18, r24
    9be6:	3a 01       	movw	r6, r20
		//unsigned char i;
		u8 mapWidth=pgm_read_byte(&(map[0]));
    9be8:	fa 01       	movw	r30, r20
    9bea:	24 90       	lpm	r2, Z
		u8 mapHeight=pgm_read_byte(&(map[1]));
    9bec:	31 96       	adiw	r30, 0x01	; 1
    9bee:	34 90       	lpm	r3, Z
    9bf0:	42 2c       	mov	r4, r2
    9bf2:	51 2c       	mov	r5, r1
		
		for(u8 dy=0;dy<mapHeight;dy++){
    9bf4:	e1 2c       	mov	r14, r1
    9bf6:	f1 2c       	mov	r15, r1
    9bf8:	00 e0       	ldi	r16, 0x00	; 0
    9bfa:	10 e0       	ldi	r17, 0x00	; 0
    9bfc:	c6 2e       	mov	r12, r22
    9bfe:	d1 2c       	mov	r13, r1
    9c00:	03 15       	cp	r16, r3
    9c02:	68 f5       	brcc	.+90     	; 0x9c5e <DrawMap+0xa6>
    9c04:	1b 82       	std	Y+3, r1	; 0x03
    9c06:	1a 82       	std	Y+2, r1	; 0x02
    9c08:	57 01       	movw	r10, r14
    9c0a:	92 e0       	ldi	r25, 0x02	; 2
    9c0c:	a9 0e       	add	r10, r25
    9c0e:	b1 1c       	adc	r11, r1
    9c10:	48 01       	movw	r8, r16
    9c12:	8c 0c       	add	r8, r12
    9c14:	9d 1c       	adc	r9, r13
			for(u8 dx=0;dx<mapWidth;dx++){			
    9c16:	ea 81       	ldd	r30, Y+2	; 0x02
    9c18:	e2 15       	cp	r30, r2
    9c1a:	e0 f4       	brcc	.+56     	; 0x9c54 <DrawMap+0x9c>
    9c1c:	ea 81       	ldd	r30, Y+2	; 0x02
    9c1e:	fb 81       	ldd	r31, Y+3	; 0x03
    9c20:	ea 0d       	add	r30, r10
    9c22:	fb 1d       	adc	r31, r11
    9c24:	e6 0d       	add	r30, r6
    9c26:	f7 1d       	adc	r31, r7
				SetTile(x+dx,(y+dy)%Screen.scrollHeight,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
    9c28:	e4 91       	lpm	r30, Z
    9c2a:	f0 e0       	ldi	r31, 0x00	; 0
    9c2c:	60 91 b4 0c 	lds	r22, 0x0CB4
    9c30:	70 e0       	ldi	r23, 0x00	; 0
    9c32:	c4 01       	movw	r24, r8
    9c34:	0e 94 e0 6b 	call	0xd7c0	; 0xd7c0 <__divmodhi4>
    9c38:	af 01       	movw	r20, r30
    9c3a:	68 2f       	mov	r22, r24
    9c3c:	8a 81       	ldd	r24, Y+2	; 0x02
    9c3e:	82 0f       	add	r24, r18
    9c40:	29 83       	std	Y+1, r18	; 0x01
    9c42:	0e 94 b6 3f 	call	0x7f6c	; 0x7f6c <SetTile>
    9c46:	8a 81       	ldd	r24, Y+2	; 0x02
    9c48:	9b 81       	ldd	r25, Y+3	; 0x03
    9c4a:	01 96       	adiw	r24, 0x01	; 1
    9c4c:	9b 83       	std	Y+3, r25	; 0x03
    9c4e:	8a 83       	std	Y+2, r24	; 0x02
    9c50:	29 81       	ldd	r18, Y+1	; 0x01
    9c52:	e1 cf       	rjmp	.-62     	; 0x9c16 <DrawMap+0x5e>
    9c54:	0f 5f       	subi	r16, 0xFF	; 255
    9c56:	1f 4f       	sbci	r17, 0xFF	; 255
    9c58:	e4 0c       	add	r14, r4
    9c5a:	f5 1c       	adc	r15, r5
    9c5c:	d1 cf       	rjmp	.-94     	; 0x9c00 <DrawMap+0x48>
			}
		}

	}
    9c5e:	0f 90       	pop	r0
    9c60:	0f 90       	pop	r0
    9c62:	0f 90       	pop	r0
    9c64:	df 91       	pop	r29
    9c66:	cf 91       	pop	r28
    9c68:	1f 91       	pop	r17
    9c6a:	0f 91       	pop	r16
    9c6c:	ff 90       	pop	r15
    9c6e:	ef 90       	pop	r14
    9c70:	df 90       	pop	r13
    9c72:	cf 90       	pop	r12
    9c74:	bf 90       	pop	r11
    9c76:	af 90       	pop	r10
    9c78:	9f 90       	pop	r9
    9c7a:	8f 90       	pop	r8
    9c7c:	7f 90       	pop	r7
    9c7e:	6f 90       	pop	r6
    9c80:	5f 90       	pop	r5
    9c82:	4f 90       	pop	r4
    9c84:	3f 90       	pop	r3
    9c86:	2f 90       	pop	r2
    9c88:	08 95       	ret

00009c8a <WaitVsync>:
		}
	}
}

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
    9c8a:	0f 93       	push	r16
    9c8c:	1f 93       	push	r17
    9c8e:	cf 93       	push	r28
    9c90:	df 93       	push	r29
    9c92:	8c 01       	movw	r16, r24
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    9c94:	c0 e0       	ldi	r28, 0x00	; 0
    9c96:	d0 e0       	ldi	r29, 0x00	; 0
    9c98:	c0 17       	cp	r28, r16
    9c9a:	d1 07       	cpc	r29, r17
    9c9c:	44 f4       	brge	.+16     	; 0x9cae <WaitVsync+0x24>
		while(!GetVsyncFlag());
    9c9e:	0e 94 cc 3f 	call	0x7f98	; 0x7f98 <GetVsyncFlag>
    9ca2:	88 23       	and	r24, r24
    9ca4:	e1 f3       	breq	.-8      	; 0x9c9e <WaitVsync+0x14>
		ClearVsyncFlag();		
    9ca6:	0e 94 d0 3f 	call	0x7fa0	; 0x7fa0 <ClearVsyncFlag>

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    9caa:	21 96       	adiw	r28, 0x01	; 1
    9cac:	f5 cf       	rjmp	.-22     	; 0x9c98 <WaitVsync+0xe>
		while(!GetVsyncFlag());
		ClearVsyncFlag();		
	}
}
    9cae:	df 91       	pop	r29
    9cb0:	cf 91       	pop	r28
    9cb2:	1f 91       	pop	r17
    9cb4:	0f 91       	pop	r16
    9cb6:	08 95       	ret

00009cb8 <DisplayLogo>:
	void DisplayLogo(){
	
		#if INTRO_LOGO !=0
			#define LOGO_X_POS 12
			
			InitMusicPlayer(logoInitPatches);
    9cb8:	83 e2       	ldi	r24, 0x23	; 35
    9cba:	99 e0       	ldi	r25, 0x09	; 9
    9cbc:	0e 94 7e 42 	call	0x84fc	; 0x84fc <InitMusicPlayer>
			SetTileTable(logo_tileset);
    9cc0:	83 e2       	ldi	r24, 0x23	; 35
    9cc2:	91 e0       	ldi	r25, 0x01	; 1
    9cc4:	0e 94 c7 3f 	call	0x7f8e	; 0x7f8e <SetTileTable>
			
			//draw logo
			ClearVram();
    9cc8:	0e 94 ac 3f 	call	0x7f58	; 0x7f58 <ClearVram>
			WaitVsync(15);		
    9ccc:	8f e0       	ldi	r24, 0x0F	; 15
    9cce:	90 e0       	ldi	r25, 0x00	; 0
    9cd0:	0e 94 45 4e 	call	0x9c8a	; 0x9c8a <WaitVsync>


			#if INTRO_LOGO == 1 
				TriggerFx(0,0xff,true);
    9cd4:	41 e0       	ldi	r20, 0x01	; 1
    9cd6:	6f ef       	ldi	r22, 0xFF	; 255
    9cd8:	80 e0       	ldi	r24, 0x00	; 0
    9cda:	0e 94 8b 43 	call	0x8716	; 0x8716 <TriggerFx>
			#endif

			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo);
    9cde:	4d e0       	ldi	r20, 0x0D	; 13
    9ce0:	51 e0       	ldi	r21, 0x01	; 1
    9ce2:	6c e0       	ldi	r22, 0x0C	; 12
    9ce4:	8c e0       	ldi	r24, 0x0C	; 12
    9ce6:	0e 94 dc 4d 	call	0x9bb8	; 0x9bb8 <DrawMap>
			WaitVsync(3);
    9cea:	83 e0       	ldi	r24, 0x03	; 3
    9cec:	90 e0       	ldi	r25, 0x00	; 0
    9cee:	0e 94 45 4e 	call	0x9c8a	; 0x9c8a <WaitVsync>
			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo2);
    9cf2:	4c ef       	ldi	r20, 0xFC	; 252
    9cf4:	50 e0       	ldi	r21, 0x00	; 0
    9cf6:	6c e0       	ldi	r22, 0x0C	; 12
    9cf8:	8c e0       	ldi	r24, 0x0C	; 12
    9cfa:	0e 94 dc 4d 	call	0x9bb8	; 0x9bb8 <DrawMap>
			WaitVsync(2);
    9cfe:	82 e0       	ldi	r24, 0x02	; 2
    9d00:	90 e0       	ldi	r25, 0x00	; 0
    9d02:	0e 94 45 4e 	call	0x9c8a	; 0x9c8a <WaitVsync>
			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo);
    9d06:	4d e0       	ldi	r20, 0x0D	; 13
    9d08:	51 e0       	ldi	r21, 0x01	; 1
    9d0a:	6c e0       	ldi	r22, 0x0C	; 12
    9d0c:	8c e0       	ldi	r24, 0x0C	; 12
    9d0e:	0e 94 dc 4d 	call	0x9bb8	; 0x9bb8 <DrawMap>
			#if INTRO_LOGO == 2
				SetMasterVolume(0xc0);
				TriggerNote(3,0,16,0xff);
			#endif 
		
			WaitVsync(65);
    9d12:	81 e4       	ldi	r24, 0x41	; 65
    9d14:	90 e0       	ldi	r25, 0x00	; 0
    9d16:	0e 94 45 4e 	call	0x9c8a	; 0x9c8a <WaitVsync>
			ClearVram();
    9d1a:	0e 94 ac 3f 	call	0x7f58	; 0x7f58 <ClearVram>
			WaitVsync(20);
    9d1e:	84 e1       	ldi	r24, 0x14	; 20
    9d20:	90 e0       	ldi	r25, 0x00	; 0
    9d22:	0c 94 45 4e 	jmp	0x9c8a	; 0x9c8a <WaitVsync>

00009d26 <doFade>:
char fadeDir;
bool volatile fadeActive;


void doFade(unsigned char speed,bool blocking){
	fadeSpeed=speed;
    9d26:	80 93 7d 0d 	sts	0x0D7D, r24
	currFadeFrame=0;
    9d2a:	10 92 81 0d 	sts	0x0D81, r1
	fadeActive=true;
    9d2e:	81 e0       	ldi	r24, 0x01	; 1
    9d30:	80 93 80 0d 	sts	0x0D80, r24
		
	if(blocking){
    9d34:	66 23       	and	r22, r22
    9d36:	21 f0       	breq	.+8      	; 0x9d40 <doFade+0x1a>
		while(fadeActive==true);
    9d38:	80 91 80 0d 	lds	r24, 0x0D80
    9d3c:	81 11       	cpse	r24, r1
    9d3e:	fc cf       	rjmp	.-8      	; 0x9d38 <doFade+0x12>
    9d40:	08 95       	ret

00009d42 <FadeIn>:
	
	
}

void FadeIn(unsigned char speed,bool blocking){
	if(speed==0){
    9d42:	81 11       	cpse	r24, r1
    9d44:	03 c0       	rjmp	.+6      	; 0x9d4c <FadeIn+0xa>
		DDRC=0xff;
    9d46:	8f ef       	ldi	r24, 0xFF	; 255
    9d48:	87 b9       	out	0x07, r24	; 7
		return;
    9d4a:	08 95       	ret
	}
	fadeStep=1;
    9d4c:	91 e0       	ldi	r25, 0x01	; 1
    9d4e:	90 93 82 0d 	sts	0x0D82, r25
	fadeDir=1;
    9d52:	90 93 7e 0d 	sts	0x0D7E, r25
	doFade(speed,blocking);
    9d56:	0c 94 93 4e 	jmp	0x9d26	; 0x9d26 <doFade>

00009d5a <FadeOut>:
}

void FadeOut(unsigned char speed,bool blocking){
	if(speed==0){
    9d5a:	81 11       	cpse	r24, r1
    9d5c:	02 c0       	rjmp	.+4      	; 0x9d62 <FadeOut+0x8>
		DDRC=0;
    9d5e:	17 b8       	out	0x07, r1	; 7
		return;
    9d60:	08 95       	ret
	}
	
	fadeStep=FADER_STEPS;
    9d62:	9c e0       	ldi	r25, 0x0C	; 12
    9d64:	90 93 82 0d 	sts	0x0D82, r25
	fadeDir=-1;
    9d68:	9f ef       	ldi	r25, 0xFF	; 255
    9d6a:	90 93 7e 0d 	sts	0x0D7E, r25
	doFade(speed,blocking);
    9d6e:	0c 94 93 4e 	jmp	0x9d26	; 0x9d26 <doFade>

00009d72 <ProcessFading>:
}


//called by the kernel at each field end
void ProcessFading(){
	if(fadeActive==true){
    9d72:	80 91 80 0d 	lds	r24, 0x0D80
    9d76:	88 23       	and	r24, r24
    9d78:	01 f1       	breq	.+64     	; 0x9dba <ProcessFading+0x48>
		if(currFadeFrame==0){
    9d7a:	80 91 81 0d 	lds	r24, 0x0D81
    9d7e:	81 11       	cpse	r24, r1
    9d80:	19 c0       	rjmp	.+50     	; 0x9db4 <ProcessFading+0x42>
			currFadeFrame=fadeSpeed;
    9d82:	80 91 7d 0d 	lds	r24, 0x0D7D
    9d86:	80 93 81 0d 	sts	0x0D81, r24
			DDRC = pgm_read_byte(&(fader[fadeStep-1]));
    9d8a:	e0 91 82 0d 	lds	r30, 0x0D82
    9d8e:	f0 e0       	ldi	r31, 0x00	; 0
    9d90:	e1 51       	subi	r30, 0x11	; 17
    9d92:	ff 4f       	sbci	r31, 0xFF	; 255
    9d94:	e4 91       	lpm	r30, Z
    9d96:	e7 b9       	out	0x07, r30	; 7
			fadeStep+=fadeDir;
    9d98:	90 91 7e 0d 	lds	r25, 0x0D7E
    9d9c:	80 91 82 0d 	lds	r24, 0x0D82
    9da0:	89 0f       	add	r24, r25
    9da2:	80 93 82 0d 	sts	0x0D82, r24
			if(fadeStep==0 || fadeStep==(FADER_STEPS+1)){
    9da6:	88 23       	and	r24, r24
    9da8:	11 f0       	breq	.+4      	; 0x9dae <ProcessFading+0x3c>
    9daa:	8d 30       	cpi	r24, 0x0D	; 13
    9dac:	31 f4       	brne	.+12     	; 0x9dba <ProcessFading+0x48>
				fadeActive=false;
    9dae:	10 92 80 0d 	sts	0x0D80, r1
    9db2:	08 95       	ret
			}
		}else{
			currFadeFrame--;
    9db4:	81 50       	subi	r24, 0x01	; 1
    9db6:	80 93 81 0d 	sts	0x0D81, r24
    9dba:	08 95       	ret

00009dbc <VideoModeVsync>:
	}

	//Callback invoked during hsync
	void VideoModeVsync(){
		
		ProcessFading();
    9dbc:	0e 94 b9 4e 	call	0x9d72	; 0x9d72 <ProcessFading>
		ProcessSprites();
    9dc0:	0c 94 96 4c 	jmp	0x992c	; 0x992c <ProcessSprites>

00009dc4 <LBMoveDelta>:
 * Calculate distance travelled, given speed (unitsPerSecond), by counting frames instead of
 * multiplying by a time fraction.
 * This allows for fairly accurate movement without resorting to slow and memory intensive floating
 * point numbers. This function assumes a game loop speed of 60 frames per second
 */
{
    9dc4:	e6 2f       	mov	r30, r22
	s8 direction = 1;
	u8 mod_factor;
	u8 base_delta;
	u8 remainder_delta;
	
	if (unitsPerSecond == 0) return 0;
    9dc6:	88 23       	and	r24, r24
    9dc8:	29 f1       	breq	.+74     	; 0x9e14 <LBMoveDelta+0x50>
	if (unitsPerSecond < 0)
    9dca:	87 ff       	sbrs	r24, 7
    9dcc:	03 c0       	rjmp	.+6      	; 0x9dd4 <LBMoveDelta+0x10>
	{
		direction = -1;
		unitsPerSecond = -unitsPerSecond;
    9dce:	81 95       	neg	r24
	u8 remainder_delta;
	
	if (unitsPerSecond == 0) return 0;
	if (unitsPerSecond < 0)
	{
		direction = -1;
    9dd0:	3f ef       	ldi	r19, 0xFF	; 255
    9dd2:	01 c0       	rjmp	.+2      	; 0x9dd6 <LBMoveDelta+0x12>
 * multiplying by a time fraction.
 * This allows for fairly accurate movement without resorting to slow and memory intensive floating
 * point numbers. This function assumes a game loop speed of 60 frames per second
 */
{
	s8 direction = 1;
    9dd4:	31 e0       	ldi	r19, 0x01	; 1
	if (unitsPerSecond < 0)
	{
		direction = -1;
		unitsPerSecond = -unitsPerSecond;
	}
	base_delta = unitsPerSecond / 60;
    9dd6:	6c e3       	ldi	r22, 0x3C	; 60
    9dd8:	0e 94 be 6b 	call	0xd77c	; 0xd77c <__divmodqi4>
    9ddc:	28 2f       	mov	r18, r24
	remainder_delta = unitsPerSecond % 60;
	if (remainder_delta == 0) return direction*base_delta;
    9dde:	99 23       	and	r25, r25
    9de0:	a9 f0       	breq	.+42     	; 0x9e0c <LBMoveDelta+0x48>
	mod_factor = 60 / remainder_delta;
    9de2:	69 2f       	mov	r22, r25
    9de4:	70 e0       	ldi	r23, 0x00	; 0
    9de6:	8c e3       	ldi	r24, 0x3C	; 60
    9de8:	90 e0       	ldi	r25, 0x00	; 0
    9dea:	0e 94 e0 6b 	call	0xd7c0	; 0xd7c0 <__divmodhi4>
	if (frame_counter % mod_factor == 0) {
    9dee:	8e 2f       	mov	r24, r30
    9df0:	0e 94 b2 6b 	call	0xd764	; 0xd764 <__udivmodqi4>
    9df4:	91 11       	cpse	r25, r1
    9df6:	0a c0       	rjmp	.+20     	; 0x9e0c <LBMoveDelta+0x48>
		return direction*(base_delta + 1);
    9df8:	42 2f       	mov	r20, r18
    9dfa:	50 e0       	ldi	r21, 0x00	; 0
    9dfc:	4f 5f       	subi	r20, 0xFF	; 255
    9dfe:	5f 4f       	sbci	r21, 0xFF	; 255
    9e00:	34 03       	mulsu	r19, r20
    9e02:	c0 01       	movw	r24, r0
    9e04:	35 9f       	mul	r19, r21
    9e06:	90 0d       	add	r25, r0
    9e08:	11 24       	eor	r1, r1
    9e0a:	08 95       	ret
	}
	return direction*base_delta;
    9e0c:	32 03       	mulsu	r19, r18
    9e0e:	c0 01       	movw	r24, r0
    9e10:	11 24       	eor	r1, r1
    9e12:	08 95       	ret
	s8 direction = 1;
	u8 mod_factor;
	u8 base_delta;
	u8 remainder_delta;
	
	if (unitsPerSecond == 0) return 0;
    9e14:	80 e0       	ldi	r24, 0x00	; 0
    9e16:	90 e0       	ldi	r25, 0x00	; 0
	mod_factor = 60 / remainder_delta;
	if (frame_counter % mod_factor == 0) {
		return direction*(base_delta + 1);
	}
	return direction*base_delta;
}
    9e18:	08 95       	ret

00009e1a <LBGetNextFrame>:

char* LBGetNextFrame(Animation* anim)
{
    9e1a:	fc 01       	movw	r30, r24
	anim->looped = 0;
    9e1c:	14 82       	std	Z+4, r1	; 0x04
	anim->frame_count += 1;
    9e1e:	93 81       	ldd	r25, Z+3	; 0x03
    9e20:	9f 5f       	subi	r25, 0xFF	; 255
    9e22:	93 83       	std	Z+3, r25	; 0x03
	if (anim->frame_count < anim->frames_per_anim)
    9e24:	42 81       	ldd	r20, Z+2	; 0x02
    9e26:	80 81       	ld	r24, Z
    9e28:	26 81       	ldd	r18, Z+6	; 0x06
    9e2a:	37 81       	ldd	r19, Z+7	; 0x07
    9e2c:	94 17       	cp	r25, r20
    9e2e:	30 f4       	brcc	.+12     	; 0x9e3c <LBGetNextFrame+0x22>
	{
		return anim->anims[anim->current_anim];
    9e30:	f9 01       	movw	r30, r18
    9e32:	e8 0f       	add	r30, r24
    9e34:	f1 1d       	adc	r31, r1
    9e36:	e8 0f       	add	r30, r24
    9e38:	f1 1d       	adc	r31, r1
    9e3a:	12 c0       	rjmp	.+36     	; 0x9e60 <LBGetNextFrame+0x46>
	}
	anim->frame_count = 0;
    9e3c:	13 82       	std	Z+3, r1	; 0x03
	anim->current_anim = (anim->current_anim + 1) % anim->anim_count;
    9e3e:	90 e0       	ldi	r25, 0x00	; 0
    9e40:	01 96       	adiw	r24, 0x01	; 1
    9e42:	61 81       	ldd	r22, Z+1	; 0x01
    9e44:	70 e0       	ldi	r23, 0x00	; 0
    9e46:	0e 94 e0 6b 	call	0xd7c0	; 0xd7c0 <__divmodhi4>
    9e4a:	80 83       	st	Z, r24
	if (anim->current_anim == 0) anim->looped = 1;
    9e4c:	81 11       	cpse	r24, r1
    9e4e:	02 c0       	rjmp	.+4      	; 0x9e54 <LBGetNextFrame+0x3a>
    9e50:	41 e0       	ldi	r20, 0x01	; 1
    9e52:	44 83       	std	Z+4, r20	; 0x04
    9e54:	99 27       	eor	r25, r25
	return anim->anims[anim->current_anim];
    9e56:	88 0f       	add	r24, r24
    9e58:	99 1f       	adc	r25, r25
    9e5a:	f9 01       	movw	r30, r18
    9e5c:	e8 0f       	add	r30, r24
    9e5e:	f9 1f       	adc	r31, r25
    9e60:	80 81       	ld	r24, Z
    9e62:	91 81       	ldd	r25, Z+1	; 0x01
}
    9e64:	08 95       	ret

00009e66 <LBGetJoyPadState>:

void LBGetJoyPadState(JoyPadState* p, unsigned char index)
/*
 * Get the current joy pad button state for index controller
 */
{
    9e66:	0f 93       	push	r16
    9e68:	1f 93       	push	r17
    9e6a:	cf 93       	push	r28
    9e6c:	df 93       	push	r29
    9e6e:	1f 92       	push	r1
    9e70:	cd b7       	in	r28, 0x3d	; 61
    9e72:	de b7       	in	r29, 0x3e	; 62
    9e74:	8c 01       	movw	r16, r24
	static unsigned int p_prev[2];

	p->held = ReadJoypad(index);
    9e76:	86 2f       	mov	r24, r22
    9e78:	69 83       	std	Y+1, r22	; 0x01
    9e7a:	0e 94 d6 3f 	call	0x7fac	; 0x7fac <ReadJoypad>
    9e7e:	d8 01       	movw	r26, r16
    9e80:	15 96       	adiw	r26, 0x05	; 5
    9e82:	9c 93       	st	X, r25
    9e84:	8e 93       	st	-X, r24
    9e86:	14 97       	sbiw	r26, 0x04	; 4
    9e88:	69 81       	ldd	r22, Y+1	; 0x01
    9e8a:	e6 2f       	mov	r30, r22
    9e8c:	f0 e0       	ldi	r31, 0x00	; 0

	// Count held cycles
	if (p->held == 0 || p->held != p_prev[index])
    9e8e:	00 97       	sbiw	r24, 0x00	; 0
    9e90:	51 f0       	breq	.+20     	; 0x9ea6 <LBGetJoyPadState+0x40>
    9e92:	df 01       	movw	r26, r30
    9e94:	aa 0f       	add	r26, r26
    9e96:	bb 1f       	adc	r27, r27
    9e98:	ab 50       	subi	r26, 0x0B	; 11
    9e9a:	b3 4f       	sbci	r27, 0xF3	; 243
    9e9c:	2d 91       	ld	r18, X+
    9e9e:	3c 91       	ld	r19, X
    9ea0:	82 17       	cp	r24, r18
    9ea2:	93 07       	cpc	r25, r19
    9ea4:	21 f0       	breq	.+8      	; 0x9eae <LBGetJoyPadState+0x48>
	    p->held_cycles = 0;
    9ea6:	d8 01       	movw	r26, r16
    9ea8:	16 96       	adiw	r26, 0x06	; 6
    9eaa:	1c 92       	st	X, r1
    9eac:	07 c0       	rjmp	.+14     	; 0x9ebc <LBGetJoyPadState+0x56>
	else
	    p->held_cycles += 1;
    9eae:	d8 01       	movw	r26, r16
    9eb0:	16 96       	adiw	r26, 0x06	; 6
    9eb2:	2c 91       	ld	r18, X
    9eb4:	16 97       	sbiw	r26, 0x06	; 6
    9eb6:	2f 5f       	subi	r18, 0xFF	; 255
    9eb8:	16 96       	adiw	r26, 0x06	; 6
    9eba:	2c 93       	st	X, r18

	p->pressed = p->held & (p->held ^ p_prev[index]);
    9ebc:	ee 0f       	add	r30, r30
    9ebe:	ff 1f       	adc	r31, r31
    9ec0:	eb 50       	subi	r30, 0x0B	; 11
    9ec2:	f3 4f       	sbci	r31, 0xF3	; 243
    9ec4:	20 81       	ld	r18, Z
    9ec6:	31 81       	ldd	r19, Z+1	; 0x01
    9ec8:	a9 01       	movw	r20, r18
    9eca:	40 95       	com	r20
    9ecc:	50 95       	com	r21
    9ece:	48 23       	and	r20, r24
    9ed0:	59 23       	and	r21, r25
    9ed2:	d8 01       	movw	r26, r16
    9ed4:	11 96       	adiw	r26, 0x01	; 1
    9ed6:	5c 93       	st	X, r21
    9ed8:	4e 93       	st	-X, r20
	p->released = p_prev[index] & (p->held ^ p_prev[index]);
    9eda:	ac 01       	movw	r20, r24
    9edc:	40 95       	com	r20
    9ede:	50 95       	com	r21
    9ee0:	24 23       	and	r18, r20
    9ee2:	35 23       	and	r19, r21
    9ee4:	13 96       	adiw	r26, 0x03	; 3
    9ee6:	3c 93       	st	X, r19
    9ee8:	2e 93       	st	-X, r18
    9eea:	12 97       	sbiw	r26, 0x02	; 2
	p_prev[index] = p->held;
    9eec:	91 83       	std	Z+1, r25	; 0x01
    9eee:	80 83       	st	Z, r24
}
    9ef0:	0f 90       	pop	r0
    9ef2:	df 91       	pop	r29
    9ef4:	cf 91       	pop	r28
    9ef6:	1f 91       	pop	r17
    9ef8:	0f 91       	pop	r16
    9efa:	08 95       	ret

00009efc <LBPrintChar>:
	font_tiles_map = tiles_map;
}

void LBPrintChar(u8 x, u8 y, u8 code)
{
	if (code >= 48 && code <= 57)
    9efc:	90 ed       	ldi	r25, 0xD0	; 208
    9efe:	94 0f       	add	r25, r20
    9f00:	e0 91 83 0d 	lds	r30, 0x0D83
    9f04:	f0 91 84 0d 	lds	r31, 0x0D84
    9f08:	9a 30       	cpi	r25, 0x0A	; 10
    9f0a:	38 f4       	brcc	.+14     	; 0x9f1a <LBPrintChar+0x1e>
	{
		SetTile(x, y, pgm_read_byte(&font_tiles_map[3+code-48]));
    9f0c:	24 2f       	mov	r18, r20
    9f0e:	30 e0       	ldi	r19, 0x00	; 0
    9f10:	2d 52       	subi	r18, 0x2D	; 45
    9f12:	31 09       	sbc	r19, r1
    9f14:	e2 0f       	add	r30, r18
    9f16:	f3 1f       	adc	r31, r19
    9f18:	0c c0       	rjmp	.+24     	; 0x9f32 <LBPrintChar+0x36>
	}
	else if (code >= 65 && code <= 90)
    9f1a:	9f eb       	ldi	r25, 0xBF	; 191
    9f1c:	94 0f       	add	r25, r20
    9f1e:	9a 31       	cpi	r25, 0x1A	; 26
    9f20:	38 f4       	brcc	.+14     	; 0x9f30 <LBPrintChar+0x34>
	{
		SetTile(x, y, pgm_read_byte(&font_tiles_map[13+code-65]));
    9f22:	50 e0       	ldi	r21, 0x00	; 0
    9f24:	44 53       	subi	r20, 0x34	; 52
    9f26:	51 09       	sbc	r21, r1
    9f28:	e4 0f       	add	r30, r20
    9f2a:	f5 1f       	adc	r31, r21
    9f2c:	44 91       	lpm	r20, Z
    9f2e:	03 c0       	rjmp	.+6      	; 0x9f36 <LBPrintChar+0x3a>
	}
	else
	{
		SetTile(x, y, pgm_read_byte(&font_tiles_map[2]));
    9f30:	32 96       	adiw	r30, 0x02	; 2
    9f32:	e4 91       	lpm	r30, Z
    9f34:	4e 2f       	mov	r20, r30
    9f36:	50 e0       	ldi	r21, 0x00	; 0
    9f38:	0c 94 b6 3f 	jmp	0x7f6c	; 0x7f6c <SetTile>

00009f3c <LBPrint>:
	}
}

void LBPrint(u8 x, u8 y, char* value)
{
    9f3c:	ff 92       	push	r15
    9f3e:	0f 93       	push	r16
    9f40:	1f 93       	push	r17
    9f42:	cf 93       	push	r28
    9f44:	df 93       	push	r29
    9f46:	d8 2f       	mov	r29, r24
    9f48:	f6 2e       	mov	r15, r22
    9f4a:	8a 01       	movw	r16, r20
	u8 i = 0;
    9f4c:	c0 e0       	ldi	r28, 0x00	; 0
    9f4e:	8c 2f       	mov	r24, r28
    9f50:	8d 0f       	add	r24, r29
	u8 code = 0;
	while ((code = pgm_read_byte(&value[i])))
    9f52:	f8 01       	movw	r30, r16
    9f54:	ec 0f       	add	r30, r28
    9f56:	f1 1d       	adc	r31, r1
    9f58:	44 91       	lpm	r20, Z
    9f5a:	44 23       	and	r20, r20
    9f5c:	29 f0       	breq	.+10     	; 0x9f68 <LBPrint+0x2c>
	{
		LBPrintChar(x++, y, code);
    9f5e:	6f 2d       	mov	r22, r15
    9f60:	0e 94 7e 4f 	call	0x9efc	; 0x9efc <LBPrintChar>
		i++;
    9f64:	cf 5f       	subi	r28, 0xFF	; 255
    9f66:	f3 cf       	rjmp	.-26     	; 0x9f4e <LBPrint+0x12>
	}
}
    9f68:	df 91       	pop	r29
    9f6a:	cf 91       	pop	r28
    9f6c:	1f 91       	pop	r17
    9f6e:	0f 91       	pop	r16
    9f70:	ff 90       	pop	r15
    9f72:	08 95       	ret

00009f74 <LBPrintByte>:

void LBPrintByte(u8 x, u8 y, u8 value, char pad)
{
    9f74:	df 92       	push	r13
    9f76:	ef 92       	push	r14
    9f78:	ff 92       	push	r15
    9f7a:	0f 93       	push	r16
    9f7c:	1f 93       	push	r17
    9f7e:	cf 93       	push	r28
    9f80:	df 93       	push	r29
    9f82:	1f 92       	push	r1
    9f84:	cd b7       	in	r28, 0x3d	; 61
    9f86:	de b7       	in	r29, 0x3e	; 62
    9f88:	38 2f       	mov	r19, r24
    9f8a:	06 2f       	mov	r16, r22
    9f8c:	84 2f       	mov	r24, r20
    9f8e:	9d ef       	ldi	r25, 0xFD	; 253
    9f90:	e9 2e       	mov	r14, r25
    9f92:	e3 0e       	add	r14, r19
	for (u8 i = 0; i < 3; i++)
	{
		LBPrintChar(x--, y, value % 10 + 48);
    9f94:	4a e0       	ldi	r20, 0x0A	; 10
    9f96:	f4 2e       	mov	r15, r20
    9f98:	1f ef       	ldi	r17, 0xFF	; 255
    9f9a:	13 0f       	add	r17, r19
    9f9c:	6f 2d       	mov	r22, r15
    9f9e:	0e 94 b2 6b 	call	0xd764	; 0xd764 <__udivmodqi4>
    9fa2:	d8 2e       	mov	r13, r24
    9fa4:	40 e3       	ldi	r20, 0x30	; 48
    9fa6:	49 0f       	add	r20, r25
    9fa8:	60 2f       	mov	r22, r16
    9faa:	83 2f       	mov	r24, r19
    9fac:	29 83       	std	Y+1, r18	; 0x01
    9fae:	0e 94 7e 4f 	call	0x9efc	; 0x9efc <LBPrintChar>
		value /= 10;
    9fb2:	8d 2d       	mov	r24, r13
		if (!pad && value == 0) break;
    9fb4:	29 81       	ldd	r18, Y+1	; 0x01
    9fb6:	21 11       	cpse	r18, r1
    9fb8:	02 c0       	rjmp	.+4      	; 0x9fbe <LBPrintByte+0x4a>
    9fba:	dd 20       	and	r13, r13
    9fbc:	19 f0       	breq	.+6      	; 0x9fc4 <LBPrintByte+0x50>
    9fbe:	31 2f       	mov	r19, r17
	}
}

void LBPrintByte(u8 x, u8 y, u8 value, char pad)
{
	for (u8 i = 0; i < 3; i++)
    9fc0:	1e 11       	cpse	r17, r14
    9fc2:	ea cf       	rjmp	.-44     	; 0x9f98 <LBPrintByte+0x24>
	{
		LBPrintChar(x--, y, value % 10 + 48);
		value /= 10;
		if (!pad && value == 0) break;
	}
}
    9fc4:	0f 90       	pop	r0
    9fc6:	df 91       	pop	r29
    9fc8:	cf 91       	pop	r28
    9fca:	1f 91       	pop	r17
    9fcc:	0f 91       	pop	r16
    9fce:	ff 90       	pop	r15
    9fd0:	ef 90       	pop	r14
    9fd2:	df 90       	pop	r13
    9fd4:	08 95       	ret

00009fd6 <LBPrintInt>:

void LBPrintInt(u8 x, u8 y, u16 value, char pad)
{
    9fd6:	cf 92       	push	r12
    9fd8:	df 92       	push	r13
    9fda:	ef 92       	push	r14
    9fdc:	ff 92       	push	r15
    9fde:	0f 93       	push	r16
    9fe0:	1f 93       	push	r17
    9fe2:	cf 93       	push	r28
    9fe4:	df 93       	push	r29
    9fe6:	00 d0       	rcall	.+0      	; 0x9fe8 <LBPrintInt+0x12>
    9fe8:	cd b7       	in	r28, 0x3d	; 61
    9fea:	de b7       	in	r29, 0x3e	; 62
    9fec:	38 2f       	mov	r19, r24
    9fee:	16 2f       	mov	r17, r22
    9ff0:	ca 01       	movw	r24, r20
    9ff2:	4b ef       	ldi	r20, 0xFB	; 251
    9ff4:	d4 2e       	mov	r13, r20
    9ff6:	d3 0e       	add	r13, r19
	for (u8 i = 0; i < 5; i++)
	{
		LBPrintChar(x--, y, value % 10 + 48);
    9ff8:	5a e0       	ldi	r21, 0x0A	; 10
    9ffa:	e5 2e       	mov	r14, r21
    9ffc:	f1 2c       	mov	r15, r1
    9ffe:	cc 24       	eor	r12, r12
    a000:	ca 94       	dec	r12
    a002:	c3 0e       	add	r12, r19
    a004:	b7 01       	movw	r22, r14
    a006:	0e 94 cc 6b 	call	0xd798	; 0xd798 <__udivmodhi4>
    a00a:	06 2f       	mov	r16, r22
    a00c:	40 e3       	ldi	r20, 0x30	; 48
    a00e:	48 0f       	add	r20, r24
    a010:	61 2f       	mov	r22, r17
    a012:	83 2f       	mov	r24, r19
    a014:	29 83       	std	Y+1, r18	; 0x01
    a016:	7a 83       	std	Y+2, r23	; 0x02
    a018:	0e 94 7e 4f 	call	0x9efc	; 0x9efc <LBPrintChar>
		value /= 10;
    a01c:	80 2f       	mov	r24, r16
    a01e:	7a 81       	ldd	r23, Y+2	; 0x02
    a020:	97 2f       	mov	r25, r23
		if (!pad && value == 0) break;
    a022:	29 81       	ldd	r18, Y+1	; 0x01
    a024:	21 11       	cpse	r18, r1
    a026:	02 c0       	rjmp	.+4      	; 0xa02c <LBPrintInt+0x56>
    a028:	00 97       	sbiw	r24, 0x00	; 0
    a02a:	19 f0       	breq	.+6      	; 0xa032 <LBPrintInt+0x5c>
    a02c:	3c 2d       	mov	r19, r12
	}
}

void LBPrintInt(u8 x, u8 y, u16 value, char pad)
{
	for (u8 i = 0; i < 5; i++)
    a02e:	cd 10       	cpse	r12, r13
    a030:	e6 cf       	rjmp	.-52     	; 0x9ffe <LBPrintInt+0x28>
	{
		LBPrintChar(x--, y, value % 10 + 48);
		value /= 10;
		if (!pad && value == 0) break;
	}
}
    a032:	0f 90       	pop	r0
    a034:	0f 90       	pop	r0
    a036:	df 91       	pop	r29
    a038:	cf 91       	pop	r28
    a03a:	1f 91       	pop	r17
    a03c:	0f 91       	pop	r16
    a03e:	ff 90       	pop	r15
    a040:	ef 90       	pop	r14
    a042:	df 90       	pop	r13
    a044:	cf 90       	pop	r12
    a046:	08 95       	ret

0000a048 <LBCollides>:
	}
}

u8 LBCollides(u8 x1, u8 y1, u8 width1, u8 height1,
						 u8 x2, u8 y2, u8 width2, u8 height2)
{
    a048:	af 92       	push	r10
    a04a:	cf 92       	push	r12
    a04c:	ef 92       	push	r14
    a04e:	ff 92       	push	r15
    a050:	0f 93       	push	r16
    a052:	1f 93       	push	r17
	if (y1 + height1 <= y2) return 0;
    a054:	70 e0       	ldi	r23, 0x00	; 0
    a056:	f1 2c       	mov	r15, r1
    a058:	fb 01       	movw	r30, r22
    a05a:	e2 0f       	add	r30, r18
    a05c:	f1 1d       	adc	r31, r1
    a05e:	ee 16       	cp	r14, r30
    a060:	ff 06       	cpc	r15, r31
    a062:	a4 f4       	brge	.+40     	; 0xa08c <LBCollides+0x44>
	if (y1 >= y2 + height2) return 0;
    a064:	ea 0c       	add	r14, r10
    a066:	f1 1c       	adc	r15, r1
    a068:	6e 15       	cp	r22, r14
    a06a:	7f 05       	cpc	r23, r15
    a06c:	7c f4       	brge	.+30     	; 0xa08c <LBCollides+0x44>
	if (x1 + width1 <= x2) return 0;
    a06e:	28 2f       	mov	r18, r24
    a070:	30 e0       	ldi	r19, 0x00	; 0
    a072:	10 e0       	ldi	r17, 0x00	; 0
    a074:	c9 01       	movw	r24, r18
    a076:	84 0f       	add	r24, r20
    a078:	91 1d       	adc	r25, r1
    a07a:	08 17       	cp	r16, r24
    a07c:	19 07       	cpc	r17, r25
    a07e:	34 f4       	brge	.+12     	; 0xa08c <LBCollides+0x44>
	if (x1 >= x2 + width2) return 0;
    a080:	0c 0d       	add	r16, r12
    a082:	11 1d       	adc	r17, r1
    a084:	81 e0       	ldi	r24, 0x01	; 1
    a086:	20 17       	cp	r18, r16
    a088:	31 07       	cpc	r19, r17
    a08a:	0c f0       	brlt	.+2      	; 0xa08e <LBCollides+0x46>
}

u8 LBCollides(u8 x1, u8 y1, u8 width1, u8 height1,
						 u8 x2, u8 y2, u8 width2, u8 height2)
{
	if (y1 + height1 <= y2) return 0;
    a08c:	80 e0       	ldi	r24, 0x00	; 0
	if (y1 >= y2 + height2) return 0;
	if (x1 + width1 <= x2) return 0;
	if (x1 >= x2 + width2) return 0;
	return 1;
}
    a08e:	1f 91       	pop	r17
    a090:	0f 91       	pop	r16
    a092:	ff 90       	pop	r15
    a094:	ef 90       	pop	r14
    a096:	cf 90       	pop	r12
    a098:	af 90       	pop	r10
    a09a:	08 95       	ret

0000a09c <LBRandom>:

u8 LBRandom(u8 from, u8 to)
/*
 * Return a random number between 'from' and 'to'.
 */
{
    a09c:	cf 93       	push	r28
    a09e:	df 93       	push	r29
    a0a0:	d8 2f       	mov	r29, r24
    a0a2:	c6 2f       	mov	r28, r22
	u16 tmp = GetPrngNumber(0) % 255;
    a0a4:	80 e0       	ldi	r24, 0x00	; 0
    a0a6:	90 e0       	ldi	r25, 0x00	; 0
    a0a8:	0e 94 a4 41 	call	0x8348	; 0x8348 <GetPrngNumber>
    a0ac:	6f ef       	ldi	r22, 0xFF	; 255
    a0ae:	70 e0       	ldi	r23, 0x00	; 0
    a0b0:	0e 94 cc 6b 	call	0xd798	; 0xd798 <__udivmodhi4>
	return (((u8)tmp) % (to - from)) + from;
    a0b4:	6c 2f       	mov	r22, r28
    a0b6:	70 e0       	ldi	r23, 0x00	; 0
    a0b8:	6d 1b       	sub	r22, r29
    a0ba:	71 09       	sbc	r23, r1
    a0bc:	0e 94 e0 6b 	call	0xd7c0	; 0xd7c0 <__divmodhi4>
}
    a0c0:	8d 0f       	add	r24, r29
    a0c2:	df 91       	pop	r29
    a0c4:	cf 91       	pop	r28
    a0c6:	08 95       	ret

0000a0c8 <LBWaitSeconds>:

void LBWaitSeconds(u8 seconds)
{
    a0c8:	cf 93       	push	r28
    a0ca:	df 93       	push	r29
    a0cc:	d8 2f       	mov	r29, r24
	for(u8 i = 0; i < seconds; i++)
    a0ce:	c0 e0       	ldi	r28, 0x00	; 0
    a0d0:	cd 17       	cp	r28, r29
    a0d2:	31 f0       	breq	.+12     	; 0xa0e0 <LBWaitSeconds+0x18>
	{
		WaitUs(65535);
    a0d4:	8f ef       	ldi	r24, 0xFF	; 255
    a0d6:	9f ef       	ldi	r25, 0xFF	; 255
    a0d8:	0e 94 e2 3f 	call	0x7fc4	; 0x7fc4 <WaitUs>
	return (((u8)tmp) % (to - from)) + from;
}

void LBWaitSeconds(u8 seconds)
{
	for(u8 i = 0; i < seconds; i++)
    a0dc:	cf 5f       	subi	r28, 0xFF	; 255
    a0de:	f8 cf       	rjmp	.-16     	; 0xa0d0 <LBWaitSeconds+0x8>
	{
		WaitUs(65535);
	}
}
    a0e0:	df 91       	pop	r29
    a0e2:	cf 91       	pop	r28
    a0e4:	08 95       	ret

0000a0e6 <LBMapSprite>:

void LBMapSprite(u8 startSprite,const char *map,u8 spriteFlags)
{
    a0e6:	df 92       	push	r13
    a0e8:	ef 92       	push	r14
    a0ea:	ff 92       	push	r15
    a0ec:	0f 93       	push	r16
    a0ee:	1f 93       	push	r17
    a0f0:	cf 93       	push	r28
    a0f2:	df 93       	push	r29
    a0f4:	db 01       	movw	r26, r22
	u8 mapWidth=pgm_read_byte(&(map[0]));
    a0f6:	fb 01       	movw	r30, r22
    a0f8:	14 91       	lpm	r17, Z
	u8 mapHeight=pgm_read_byte(&(map[1]));
    a0fa:	31 96       	adiw	r30, 0x01	; 1
    a0fc:	64 91       	lpm	r22, Z
    a0fe:	5f ef       	ldi	r21, 0xFF	; 255
    a100:	51 0f       	add	r21, r17
	s8 x,y,dx,dy,t; 

	if(spriteFlags & SPRITE_FLIP_X)
    a102:	24 2f       	mov	r18, r20
    a104:	21 70       	andi	r18, 0x01	; 1
    a106:	40 ff       	sbrs	r20, 0
    a108:	04 c0       	rjmp	.+8      	; 0xa112 <LBMapSprite+0x2c>
	{
		x=(mapWidth-1);
    a10a:	95 2f       	mov	r25, r21
		dx=-1;
    a10c:	ff 24       	eor	r15, r15
    a10e:	fa 94       	dec	r15
    a110:	03 c0       	rjmp	.+6      	; 0xa118 <LBMapSprite+0x32>
	}
	else
	{
		x=0;
		dx=1;
    a112:	ff 24       	eor	r15, r15
    a114:	f3 94       	inc	r15
		x=(mapWidth-1);
		dx=-1;
	}
	else
	{
		x=0;
    a116:	90 e0       	ldi	r25, 0x00	; 0
		dx=1;
	}

	if(spriteFlags & SPRITE_FLIP_Y)
    a118:	41 ff       	sbrs	r20, 1
    a11a:	05 c0       	rjmp	.+10     	; 0xa126 <LBMapSprite+0x40>
	{
		y=(mapHeight-1);
    a11c:	7f ef       	ldi	r23, 0xFF	; 255
    a11e:	76 0f       	add	r23, r22
		dy=-1;
    a120:	ee 24       	eor	r14, r14
    a122:	ea 94       	dec	r14
    a124:	03 c0       	rjmp	.+6      	; 0xa12c <LBMapSprite+0x46>
	}
	else
	{
		y=0;
		dy=1;
    a126:	ee 24       	eor	r14, r14
    a128:	e3 94       	inc	r14
		y=(mapHeight-1);
		dy=-1;
	}
	else
	{
		y=0;
    a12a:	70 e0       	ldi	r23, 0x00	; 0
    a12c:	21 11       	cpse	r18, r1
    a12e:	01 c0       	rjmp	.+2      	; 0xa132 <LBMapSprite+0x4c>
    a130:	50 e0       	ldi	r21, 0x00	; 0
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
    a132:	00 e0       	ldi	r16, 0x00	; 0
    a134:	06 17       	cp	r16, r22
    a136:	09 f1       	breq	.+66     	; 0xa17a <LBMapSprite+0x94>
	{
		for(u8 cx=0;cx<mapWidth;cx++)
		{
			t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    a138:	71 03       	mulsu	r23, r17
    a13a:	e0 01       	movw	r28, r0
    a13c:	11 24       	eor	r1, r1
    a13e:	d8 2e       	mov	r13, r24
    a140:	d1 0e       	add	r13, r17
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
	{
		for(u8 cx=0;cx<mapWidth;cx++)
    a142:	8d 15       	cp	r24, r13
    a144:	b1 f0       	breq	.+44     	; 0xa172 <LBMapSprite+0x8c>
		{
			t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    a146:	9e 01       	movw	r18, r28
    a148:	29 0f       	add	r18, r25
    a14a:	31 1d       	adc	r19, r1
    a14c:	97 fd       	sbrc	r25, 7
    a14e:	3a 95       	dec	r19
    a150:	2e 5f       	subi	r18, 0xFE	; 254
    a152:	3f 4f       	sbci	r19, 0xFF	; 255
    a154:	fd 01       	movw	r30, r26
    a156:	e2 0f       	add	r30, r18
    a158:	f3 1f       	adc	r31, r19
    a15a:	24 91       	lpm	r18, Z
			extendedSprites[startSprite].tileIndex=t;
    a15c:	34 e0       	ldi	r19, 0x04	; 4
    a15e:	83 9f       	mul	r24, r19
    a160:	f0 01       	movw	r30, r0
    a162:	11 24       	eor	r1, r1
    a164:	e0 54       	subi	r30, 0x40	; 64
    a166:	f0 4f       	sbci	r31, 0xF0	; 240
    a168:	22 83       	std	Z+2, r18	; 0x02
			extendedSprites[startSprite++].flags=spriteFlags;
    a16a:	8f 5f       	subi	r24, 0xFF	; 255
    a16c:	43 83       	std	Z+3, r20	; 0x03
    a16e:	9f 0d       	add	r25, r15
    a170:	e8 cf       	rjmp	.-48     	; 0xa142 <LBMapSprite+0x5c>
    a172:	7e 0d       	add	r23, r14
	{
		y=0;
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
    a174:	0f 5f       	subi	r16, 0xFF	; 255
			extendedSprites[startSprite].tileIndex=t;
			extendedSprites[startSprite++].flags=spriteFlags;
			x+=dx;
		}
		y+=dy;
		x=(spriteFlags & SPRITE_FLIP_X)?(mapWidth-1):0;
    a176:	95 2f       	mov	r25, r21
    a178:	dd cf       	rjmp	.-70     	; 0xa134 <LBMapSprite+0x4e>
	}
}
    a17a:	df 91       	pop	r29
    a17c:	cf 91       	pop	r28
    a17e:	1f 91       	pop	r17
    a180:	0f 91       	pop	r16
    a182:	ff 90       	pop	r15
    a184:	ef 90       	pop	r14
    a186:	df 90       	pop	r13
    a188:	08 95       	ret

0000a18a <LBMoveSprite>:

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
    a18a:	df 92       	push	r13
    a18c:	ef 92       	push	r14
    a18e:	ff 92       	push	r15
    a190:	0f 93       	push	r16
    a192:	1f 93       	push	r17
    a194:	cf 93       	push	r28
    a196:	df 93       	push	r29
		{
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
    a198:	a0 91 b4 0c 	lds	r26, 0x0CB4
    a19c:	98 e0       	ldi	r25, 0x08	; 8
    a19e:	a9 9f       	mul	r26, r25
    a1a0:	70 01       	movw	r14, r0
    a1a2:	11 24       	eor	r1, r1
    a1a4:	50 e0       	ldi	r21, 0x00	; 0
    a1a6:	38 ef       	ldi	r19, 0xF8	; 248
    a1a8:	a3 9f       	mul	r26, r19
    a1aa:	30 2d       	mov	r19, r0
    a1ac:	11 24       	eor	r1, r1
	}
}

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
	for(u8 dy=0;dy<height;dy++)
    a1ae:	70 e0       	ldi	r23, 0x00	; 0
    a1b0:	70 17       	cp	r23, r16
    a1b2:	09 f1       	breq	.+66     	; 0xa1f6 <LBMoveSprite+0x6c>
    a1b4:	d4 2e       	mov	r13, r20
    a1b6:	13 2f       	mov	r17, r19
    a1b8:	14 0f       	add	r17, r20
    a1ba:	b8 2f       	mov	r27, r24
    a1bc:	b2 0f       	add	r27, r18
    a1be:	96 2f       	mov	r25, r22
	{
		for(u8 dx=0;dx<width;dx++)
    a1c0:	8b 17       	cp	r24, r27
    a1c2:	a9 f0       	breq	.+42     	; 0xa1ee <LBMoveSprite+0x64>
		{
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
    a1c4:	c4 e0       	ldi	r28, 0x04	; 4
    a1c6:	8c 9f       	mul	r24, r28
    a1c8:	f0 01       	movw	r30, r0
    a1ca:	11 24       	eor	r1, r1
    a1cc:	ef 01       	movw	r28, r30
    a1ce:	c0 54       	subi	r28, 0x40	; 64
    a1d0:	d0 4f       	sbci	r29, 0xF0	; 240
    a1d2:	98 83       	st	Y, r25
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
    a1d4:	a0 32       	cpi	r26, 0x20	; 32
    a1d6:	28 f4       	brcc	.+10     	; 0xa1e2 <LBMoveSprite+0x58>
    a1d8:	e4 16       	cp	r14, r20
    a1da:	f5 06       	cpc	r15, r21
    a1dc:	14 f4       	brge	.+4      	; 0xa1e2 <LBMoveSprite+0x58>
				{
					u8 tmp=(y+(TILE_HEIGHT*dy))-(Screen.scrollHeight*TILE_HEIGHT);
					extendedSprites[startSprite].y=tmp;
    a1de:	19 83       	std	Y+1, r17	; 0x01
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
				{
    a1e0:	03 c0       	rjmp	.+6      	; 0xa1e8 <LBMoveSprite+0x5e>
					u8 tmp=(y+(TILE_HEIGHT*dy))-(Screen.scrollHeight*TILE_HEIGHT);
					extendedSprites[startSprite].y=tmp;
				}
				else
				{
					extendedSprites[startSprite].y=y+(TILE_HEIGHT*dy);
    a1e2:	e0 54       	subi	r30, 0x40	; 64
    a1e4:	f0 4f       	sbci	r31, 0xF0	; 240
    a1e6:	d1 82       	std	Z+1, r13	; 0x01
				{
					extendedSprites[startSprite].y=y+(TILE_HEIGHT*dy);
				}
			#endif

			startSprite++;
    a1e8:	8f 5f       	subi	r24, 0xFF	; 255
    a1ea:	98 5f       	subi	r25, 0xF8	; 248
    a1ec:	e9 cf       	rjmp	.-46     	; 0xa1c0 <LBMoveSprite+0x36>
	}
}

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
	for(u8 dy=0;dy<height;dy++)
    a1ee:	7f 5f       	subi	r23, 0xFF	; 255
    a1f0:	48 5f       	subi	r20, 0xF8	; 248
    a1f2:	5f 4f       	sbci	r21, 0xFF	; 255
    a1f4:	dd cf       	rjmp	.-70     	; 0xa1b0 <LBMoveSprite+0x26>
			#endif

			startSprite++;
		}
	}	
}
    a1f6:	df 91       	pop	r29
    a1f8:	cf 91       	pop	r28
    a1fa:	1f 91       	pop	r17
    a1fc:	0f 91       	pop	r16
    a1fe:	ff 90       	pop	r15
    a200:	ef 90       	pop	r14
    a202:	df 90       	pop	r13
    a204:	08 95       	ret

0000a206 <LBRotateSprites>:

void LBRotateSprites()
{
    a206:	80 e0       	ldi	r24, 0x00	; 0
    a208:	90 e0       	ldi	r25, 0x00	; 0
    a20a:	dc 01       	movw	r26, r24
    a20c:	a0 54       	subi	r26, 0x40	; 64
    a20e:	b0 4f       	sbci	r27, 0xF0	; 240
    a210:	fc 01       	movw	r30, r24
    a212:	e0 5f       	subi	r30, 0xF0	; 240
    a214:	fa 4f       	sbci	r31, 0xFA	; 250
	static u8 rotate_index = ROTATE_SPRITES_FROM;
	u8 mappedSpriteCount = MAX_EXTENDED_SPRITES;
	
	for (u8 i = 0; i < ROTATE_SPRITES_FROM; i++)
	{
		sprites[i].flags = extendedSprites[i].flags;
    a216:	13 96       	adiw	r26, 0x03	; 3
    a218:	2c 91       	ld	r18, X
    a21a:	13 97       	sbiw	r26, 0x03	; 3
    a21c:	23 83       	std	Z+3, r18	; 0x03
		sprites[i].tileIndex = extendedSprites[i].tileIndex;
    a21e:	12 96       	adiw	r26, 0x02	; 2
    a220:	2c 91       	ld	r18, X
    a222:	12 97       	sbiw	r26, 0x02	; 2
    a224:	22 83       	std	Z+2, r18	; 0x02
		sprites[i].x = extendedSprites[i].x;
    a226:	2c 91       	ld	r18, X
    a228:	20 83       	st	Z, r18
		sprites[i].y = extendedSprites[i].y;
    a22a:	11 96       	adiw	r26, 0x01	; 1
    a22c:	2c 91       	ld	r18, X
    a22e:	21 83       	std	Z+1, r18	; 0x01
    a230:	04 96       	adiw	r24, 0x04	; 4
void LBRotateSprites()
{
	static u8 rotate_index = ROTATE_SPRITES_FROM;
	u8 mappedSpriteCount = MAX_EXTENDED_SPRITES;
	
	for (u8 i = 0; i < ROTATE_SPRITES_FROM; i++)
    a232:	8c 33       	cpi	r24, 0x3C	; 60
    a234:	91 05       	cpc	r25, r1
    a236:	49 f7       	brne	.-46     	; 0xa20a <LBRotateSprites+0x4>
		sprites[i].y = extendedSprites[i].y;
	}
	
	for (u8 i = ROTATE_SPRITES_FROM; i < MAX_SPRITES; i++)
	{
		sprites[i].flags = extendedSprites[rotate_index].flags;
    a238:	80 91 01 05 	lds	r24, 0x0501
    a23c:	94 e0       	ldi	r25, 0x04	; 4
    a23e:	89 9f       	mul	r24, r25
    a240:	f0 01       	movw	r30, r0
    a242:	11 24       	eor	r1, r1
    a244:	e0 54       	subi	r30, 0x40	; 64
    a246:	f0 4f       	sbci	r31, 0xF0	; 240
    a248:	93 81       	ldd	r25, Z+3	; 0x03
    a24a:	90 93 4f 05 	sts	0x054F, r25
		sprites[i].tileIndex = extendedSprites[rotate_index].tileIndex;
    a24e:	92 81       	ldd	r25, Z+2	; 0x02
    a250:	90 93 4e 05 	sts	0x054E, r25
		sprites[i].x = extendedSprites[rotate_index].x;
    a254:	90 81       	ld	r25, Z
    a256:	90 93 4c 05 	sts	0x054C, r25
		sprites[i].y = extendedSprites[rotate_index].y;
    a25a:	91 81       	ldd	r25, Z+1	; 0x01
    a25c:	90 93 4d 05 	sts	0x054D, r25
		rotate_index += 1;
    a260:	8f 5f       	subi	r24, 0xFF	; 255
		if (rotate_index >= MAX_EXTENDED_SPRITES) rotate_index = ROTATE_SPRITES_FROM;
    a262:	84 31       	cpi	r24, 0x14	; 20
    a264:	08 f0       	brcs	.+2      	; 0xa268 <LBRotateSprites+0x62>
    a266:	8f e0       	ldi	r24, 0x0F	; 15
    a268:	80 93 01 05 	sts	0x0501, r24
    a26c:	08 95       	ret

0000a26e <is_space>:
char* boss_run_anim[4];
char* boss_shot_anim[1];

u8 is_space()
{
	return (game.current_level_index % 2 != 0);
    a26e:	80 91 c6 0d 	lds	r24, 0x0DC6
}
    a272:	81 70       	andi	r24, 0x01	; 1
    a274:	08 95       	ret

0000a276 <init_default_high_scores>:

void init_default_high_scores()
{
	scores.id = EEPROM_SCORES_ID;
    a276:	8c e8       	ldi	r24, 0x8C	; 140
    a278:	90 e0       	ldi	r25, 0x00	; 0
    a27a:	90 93 92 0d 	sts	0x0D92, r25
    a27e:	80 93 91 0d 	sts	0x0D91, r24
    a282:	80 e0       	ldi	r24, 0x00	; 0
    a284:	90 e0       	ldi	r25, 0x00	; 0
    a286:	fc 01       	movw	r30, r24
    a288:	e8 56       	subi	r30, 0x68	; 104
    a28a:	f5 4f       	sbci	r31, 0xF5	; 245
	for (u8 i = 0; i < 30; i++)
	{
		scores.data[i] = pgm_read_byte(&default_scores[i]);
    a28c:	e4 91       	lpm	r30, Z
    a28e:	dc 01       	movw	r26, r24
    a290:	af 56       	subi	r26, 0x6F	; 111
    a292:	b2 4f       	sbci	r27, 0xF2	; 242
    a294:	12 96       	adiw	r26, 0x02	; 2
    a296:	ec 93       	st	X, r30
    a298:	01 96       	adiw	r24, 0x01	; 1
}

void init_default_high_scores()
{
	scores.id = EEPROM_SCORES_ID;
	for (u8 i = 0; i < 30; i++)
    a29a:	8e 31       	cpi	r24, 0x1E	; 30
    a29c:	91 05       	cpc	r25, r1
    a29e:	99 f7       	brne	.-26     	; 0xa286 <init_default_high_scores+0x10>
	{
		scores.data[i] = pgm_read_byte(&default_scores[i]);
	}
}
    a2a0:	08 95       	ret

0000a2a2 <init_enemy_state>:

void init_enemy_state()
{
    a2a2:	80 e0       	ldi	r24, 0x00	; 0
    a2a4:	90 e0       	ldi	r25, 0x00	; 0
    a2a6:	9c 01       	movw	r18, r24
    a2a8:	2f 54       	subi	r18, 0x4F	; 79
    a2aa:	32 4f       	sbci	r19, 0xF2	; 242
    a2ac:	f9 01       	movw	r30, r18
    a2ae:	e3 5f       	subi	r30, 0xF3	; 243
    a2b0:	fe 4f       	sbci	r31, 0xFE	; 254
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		game.enemies[i].active = 0;
    a2b2:	10 82       	st	Z, r1
    a2b4:	73 96       	adiw	r30, 0x13	; 19
		for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
		{
			game.enemies[i].shot[j].active = 0;
    a2b6:	10 82       	st	Z, r1
    a2b8:	c3 96       	adiw	r24, 0x33	; 51
	}
}

void init_enemy_state()
{
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    a2ba:	8f 3f       	cpi	r24, 0xFF	; 255
    a2bc:	91 05       	cpc	r25, r1
    a2be:	99 f7       	brne	.-26     	; 0xa2a6 <init_enemy_state+0x4>
		for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
		{
			game.enemies[i].shot[j].active = 0;
		}
	}
	game.active_enemies = 0;
    a2c0:	10 92 cc 0d 	sts	0x0DCC, r1
    a2c4:	08 95       	ret

0000a2c6 <init_player_shot>:
	shot->shared.vx = speed;
}

void init_player_shot(u8 level)
{
	if (level == 0)	// Ice
    a2c6:	81 11       	cpse	r24, r1
    a2c8:	1a c0       	rjmp	.+52     	; 0xa2fe <init_player_shot+0x38>
    a2ca:	ea ee       	ldi	r30, 0xEA	; 234
    a2cc:	fd e0       	ldi	r31, 0x0D	; 13
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, const char* map, char** anim)
{
	shot->shot_type = type;
	shot->hit_count = damage;
    a2ce:	81 e0       	ldi	r24, 0x01	; 1
	shot->anim.anim_count = 1;
	shot->anim.frames_per_anim = 1;
	shot->anim.anims = anim;
    a2d0:	25 e8       	ldi	r18, 0x85	; 133
    a2d2:	3d e0       	ldi	r19, 0x0D	; 13
	shot->anim.anims[0] = (char*) map;
	shot->shared.vx = speed;
    a2d4:	90 e5       	ldi	r25, 0x50	; 80
    a2d6:	df 01       	movw	r26, r30
    a2d8:	15 97       	sbiw	r26, 0x05	; 5
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, const char* map, char** anim)
{
	shot->shot_type = type;
    a2da:	1c 92       	st	X, r1
    a2dc:	11 96       	adiw	r26, 0x01	; 1
	shot->hit_count = damage;
    a2de:	8c 93       	st	X, r24
    a2e0:	13 96       	adiw	r26, 0x03	; 3
	shot->anim.anim_count = 1;
    a2e2:	8c 93       	st	X, r24
	shot->anim.frames_per_anim = 1;
    a2e4:	80 83       	st	Z, r24
	shot->anim.anims = anim;
    a2e6:	35 83       	std	Z+5, r19	; 0x05
    a2e8:	24 83       	std	Z+4, r18	; 0x04
    a2ea:	16 97       	sbiw	r26, 0x06	; 6
	shot->anim.anims[0] = (char*) map;
	shot->shared.vx = speed;
    a2ec:	9c 93       	st	X, r25
    a2ee:	72 96       	adiw	r30, 0x12	; 18

void init_player_shot(u8 level)
{
	if (level == 0)	// Ice
	{
		for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
    a2f0:	4e e0       	ldi	r20, 0x0E	; 14
    a2f2:	e0 32       	cpi	r30, 0x20	; 32
    a2f4:	f4 07       	cpc	r31, r20
    a2f6:	79 f7       	brne	.-34     	; 0xa2d6 <init_player_shot+0x10>
    a2f8:	84 e6       	ldi	r24, 0x64	; 100
    a2fa:	96 e3       	ldi	r25, 0x36	; 54
    a2fc:	1c c0       	rjmp	.+56     	; 0xa336 <init_player_shot+0x70>
		{
			init_shot(&game.player.shot[i], BALL_SHOT, LOW_SHOT_DAMAGE, SLOW_SHOT_SPEED, map_hero_ball_shot, shot_top_anim);
		}
	}
	else if (level == 2) // Fire
    a2fe:	82 30       	cpi	r24, 0x02	; 2
    a300:	f9 f4       	brne	.+62     	; 0xa340 <init_player_shot+0x7a>
    a302:	ea ee       	ldi	r30, 0xEA	; 234
    a304:	fd e0       	ldi	r31, 0x0D	; 13
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, const char* map, char** anim)
{
	shot->shot_type = type;
    a306:	81 e0       	ldi	r24, 0x01	; 1
	shot->hit_count = damage;
    a308:	42 e0       	ldi	r20, 0x02	; 2
	shot->anim.anim_count = 1;
	shot->anim.frames_per_anim = 1;
	shot->anim.anims = anim;
    a30a:	25 e8       	ldi	r18, 0x85	; 133
    a30c:	3d e0       	ldi	r19, 0x0D	; 13
	shot->anim.anims[0] = (char*) map;
	shot->shared.vx = speed;
    a30e:	94 e6       	ldi	r25, 0x64	; 100
    a310:	df 01       	movw	r26, r30
    a312:	15 97       	sbiw	r26, 0x05	; 5
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, const char* map, char** anim)
{
	shot->shot_type = type;
    a314:	8c 93       	st	X, r24
    a316:	11 96       	adiw	r26, 0x01	; 1
	shot->hit_count = damage;
    a318:	4c 93       	st	X, r20
    a31a:	13 96       	adiw	r26, 0x03	; 3
	shot->anim.anim_count = 1;
    a31c:	8c 93       	st	X, r24
	shot->anim.frames_per_anim = 1;
    a31e:	80 83       	st	Z, r24
	shot->anim.anims = anim;
    a320:	35 83       	std	Z+5, r19	; 0x05
    a322:	24 83       	std	Z+4, r18	; 0x04
    a324:	16 97       	sbiw	r26, 0x06	; 6
	shot->anim.anims[0] = (char*) map;
	shot->shared.vx = speed;
    a326:	9c 93       	st	X, r25
    a328:	72 96       	adiw	r30, 0x12	; 18
			init_shot(&game.player.shot[i], BALL_SHOT, LOW_SHOT_DAMAGE, SLOW_SHOT_SPEED, map_hero_ball_shot, shot_top_anim);
		}
	}
	else if (level == 2) // Fire
	{
		for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
    a32a:	5e e0       	ldi	r21, 0x0E	; 14
    a32c:	e0 32       	cpi	r30, 0x20	; 32
    a32e:	f5 07       	cpc	r31, r21
    a330:	79 f7       	brne	.-34     	; 0xa310 <init_player_shot+0x4a>
    a332:	81 e6       	ldi	r24, 0x61	; 97
    a334:	96 e3       	ldi	r25, 0x36	; 54
    a336:	90 93 86 0d 	sts	0x0D86, r25
    a33a:	80 93 85 0d 	sts	0x0D85, r24
    a33e:	08 95       	ret
		{
			init_shot(&game.player.shot[i], ICE_SHOT, MEDIUM_SHOT_DAMAGE, MEDIUM_SHOT_SPEED, map_hero_ice_shot, shot_top_anim);
		}
		
	}
	else if (level == 4) // Jungle
    a340:	84 30       	cpi	r24, 0x04	; 4
    a342:	71 f5       	brne	.+92     	; 0xa3a0 <init_player_shot+0xda>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, const char* map, char** anim)
{
	shot->shot_type = type;
    a344:	92 e0       	ldi	r25, 0x02	; 2
    a346:	90 93 f7 0d 	sts	0x0DF7, r25
	shot->hit_count = damage;
    a34a:	90 93 f8 0d 	sts	0x0DF8, r25
	shot->anim.anim_count = 1;
    a34e:	91 e0       	ldi	r25, 0x01	; 1
    a350:	90 93 fb 0d 	sts	0x0DFB, r25
	shot->anim.frames_per_anim = 1;
    a354:	90 93 fc 0d 	sts	0x0DFC, r25
	shot->anim.anims = anim;
    a358:	28 e1       	ldi	r18, 0x18	; 24
    a35a:	30 e1       	ldi	r19, 0x10	; 16
    a35c:	30 93 01 0e 	sts	0x0E01, r19
    a360:	20 93 00 0e 	sts	0x0E00, r18
	shot->anim.anims[0] = (char*) map;
    a364:	28 e5       	ldi	r18, 0x58	; 88
    a366:	36 e3       	ldi	r19, 0x36	; 54
    a368:	30 93 19 10 	sts	0x1019, r19
    a36c:	20 93 18 10 	sts	0x1018, r18
	shot->shared.vx = speed;
    a370:	2f e7       	ldi	r18, 0x7F	; 127
    a372:	20 93 f5 0d 	sts	0x0DF5, r18
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, const char* map, char** anim)
{
	shot->shot_type = type;
    a376:	80 93 e5 0d 	sts	0x0DE5, r24
	shot->hit_count = damage;
    a37a:	90 93 e6 0d 	sts	0x0DE6, r25
	shot->anim.anim_count = 1;
    a37e:	90 93 e9 0d 	sts	0x0DE9, r25
	shot->anim.frames_per_anim = 1;
    a382:	90 93 ea 0d 	sts	0x0DEA, r25
	shot->anim.anims = anim;
    a386:	85 e8       	ldi	r24, 0x85	; 133
    a388:	9d e0       	ldi	r25, 0x0D	; 13
    a38a:	90 93 ef 0d 	sts	0x0DEF, r25
    a38e:	80 93 ee 0d 	sts	0x0DEE, r24
	shot->anim.anims[0] = (char*) map;
    a392:	84 e6       	ldi	r24, 0x64	; 100
    a394:	96 e3       	ldi	r25, 0x36	; 54
    a396:	90 93 86 0d 	sts	0x0D86, r25
    a39a:	80 93 85 0d 	sts	0x0D85, r24
    a39e:	77 c0       	rjmp	.+238    	; 0xa48e <init_player_shot+0x1c8>
			init_shot(&game.player.shot[i], RED_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, map_hero_rplasma_shot, shot_middle_anim);
			init_shot(&game.player.shot[i-1], ANGLED_SHOT, LOW_SHOT_DAMAGE, FAST_SHOT_SPEED, map_hero_ball_shot, shot_top_anim);
		}
		
	}
	else if (level == 6) // City
    a3a0:	86 30       	cpi	r24, 0x06	; 6
    a3a2:	79 f5       	brne	.+94     	; 0xa402 <init_player_shot+0x13c>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, const char* map, char** anim)
{
	shot->shot_type = type;
    a3a4:	53 e0       	ldi	r21, 0x03	; 3
    a3a6:	50 93 f7 0d 	sts	0x0DF7, r21
	shot->hit_count = damage;
    a3aa:	42 e0       	ldi	r20, 0x02	; 2
    a3ac:	40 93 f8 0d 	sts	0x0DF8, r20
	shot->anim.anim_count = 1;
    a3b0:	81 e0       	ldi	r24, 0x01	; 1
    a3b2:	80 93 fb 0d 	sts	0x0DFB, r24
	shot->anim.frames_per_anim = 1;
    a3b6:	80 93 fc 0d 	sts	0x0DFC, r24
	shot->anim.anims = anim;
    a3ba:	28 e1       	ldi	r18, 0x18	; 24
    a3bc:	30 e1       	ldi	r19, 0x10	; 16
    a3be:	30 93 01 0e 	sts	0x0E01, r19
    a3c2:	20 93 00 0e 	sts	0x0E00, r18
	shot->anim.anims[0] = (char*) map;
    a3c6:	27 e6       	ldi	r18, 0x67	; 103
    a3c8:	36 e3       	ldi	r19, 0x36	; 54
    a3ca:	30 93 19 10 	sts	0x1019, r19
    a3ce:	20 93 18 10 	sts	0x1018, r18
	shot->shared.vx = speed;
    a3d2:	9f e7       	ldi	r25, 0x7F	; 127
    a3d4:	90 93 f5 0d 	sts	0x0DF5, r25
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, const char* map, char** anim)
{
	shot->shot_type = type;
    a3d8:	50 93 e5 0d 	sts	0x0DE5, r21
	shot->hit_count = damage;
    a3dc:	40 93 e6 0d 	sts	0x0DE6, r20
	shot->anim.anim_count = 1;
    a3e0:	80 93 e9 0d 	sts	0x0DE9, r24
	shot->anim.frames_per_anim = 1;
    a3e4:	80 93 ea 0d 	sts	0x0DEA, r24
	shot->anim.anims = anim;
    a3e8:	45 e8       	ldi	r20, 0x85	; 133
    a3ea:	5d e0       	ldi	r21, 0x0D	; 13
    a3ec:	50 93 ef 0d 	sts	0x0DEF, r21
    a3f0:	40 93 ee 0d 	sts	0x0DEE, r20
	shot->anim.anims[0] = (char*) map;
    a3f4:	30 93 86 0d 	sts	0x0D86, r19
    a3f8:	20 93 85 0d 	sts	0x0D85, r18
	shot->shared.vx = speed;
    a3fc:	90 93 e3 0d 	sts	0x0DE3, r25
    a400:	08 95       	ret
			init_shot(&game.player.shot[i], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, map_hero_gplasma_shot, shot_middle_anim);
			init_shot(&game.player.shot[i-1], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, map_hero_gplasma_shot, shot_top_anim);
		}
		
	}
	else if (level == 8) // Dessert
    a402:	88 30       	cpi	r24, 0x08	; 8
    a404:	09 f0       	breq	.+2      	; 0xa408 <init_player_shot+0x142>
    a406:	46 c0       	rjmp	.+140    	; 0xa494 <init_player_shot+0x1ce>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, const char* map, char** anim)
{
	shot->shot_type = type;
    a408:	33 e0       	ldi	r19, 0x03	; 3
    a40a:	30 93 09 0e 	sts	0x0E09, r19
	shot->hit_count = damage;
    a40e:	92 e0       	ldi	r25, 0x02	; 2
    a410:	90 93 0a 0e 	sts	0x0E0A, r25
	shot->anim.anim_count = 1;
    a414:	81 e0       	ldi	r24, 0x01	; 1
    a416:	80 93 0d 0e 	sts	0x0E0D, r24
	shot->anim.frames_per_anim = 1;
    a41a:	80 93 0e 0e 	sts	0x0E0E, r24
	shot->anim.anims = anim;
    a41e:	46 e2       	ldi	r20, 0x26	; 38
    a420:	50 e1       	ldi	r21, 0x10	; 16
    a422:	50 93 13 0e 	sts	0x0E13, r21
    a426:	40 93 12 0e 	sts	0x0E12, r20
	shot->anim.anims[0] = (char*) map;
    a42a:	47 e6       	ldi	r20, 0x67	; 103
    a42c:	56 e3       	ldi	r21, 0x36	; 54
    a42e:	50 93 27 10 	sts	0x1027, r21
    a432:	40 93 26 10 	sts	0x1026, r20
	shot->shared.vx = speed;
    a436:	2f e7       	ldi	r18, 0x7F	; 127
    a438:	20 93 07 0e 	sts	0x0E07, r18
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, const char* map, char** anim)
{
	shot->shot_type = type;
    a43c:	80 93 f7 0d 	sts	0x0DF7, r24
	shot->hit_count = damage;
    a440:	90 93 f8 0d 	sts	0x0DF8, r25
	shot->anim.anim_count = 1;
    a444:	80 93 fb 0d 	sts	0x0DFB, r24
	shot->anim.frames_per_anim = 1;
    a448:	80 93 fc 0d 	sts	0x0DFC, r24
	shot->anim.anims = anim;
    a44c:	68 e1       	ldi	r22, 0x18	; 24
    a44e:	70 e1       	ldi	r23, 0x10	; 16
    a450:	70 93 01 0e 	sts	0x0E01, r23
    a454:	60 93 00 0e 	sts	0x0E00, r22
	shot->anim.anims[0] = (char*) map;
    a458:	61 e6       	ldi	r22, 0x61	; 97
    a45a:	76 e3       	ldi	r23, 0x36	; 54
    a45c:	70 93 19 10 	sts	0x1019, r23
    a460:	60 93 18 10 	sts	0x1018, r22
	shot->shared.vx = speed;
    a464:	64 e6       	ldi	r22, 0x64	; 100
    a466:	60 93 f5 0d 	sts	0x0DF5, r22
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, const char* map, char** anim)
{
	shot->shot_type = type;
    a46a:	30 93 e5 0d 	sts	0x0DE5, r19
	shot->hit_count = damage;
    a46e:	90 93 e6 0d 	sts	0x0DE6, r25
	shot->anim.anim_count = 1;
    a472:	80 93 e9 0d 	sts	0x0DE9, r24
	shot->anim.frames_per_anim = 1;
    a476:	80 93 ea 0d 	sts	0x0DEA, r24
	shot->anim.anims = anim;
    a47a:	85 e8       	ldi	r24, 0x85	; 133
    a47c:	9d e0       	ldi	r25, 0x0D	; 13
    a47e:	90 93 ef 0d 	sts	0x0DEF, r25
    a482:	80 93 ee 0d 	sts	0x0DEE, r24
	shot->anim.anims[0] = (char*) map;
    a486:	50 93 86 0d 	sts	0x0D86, r21
    a48a:	40 93 85 0d 	sts	0x0D85, r20
	shot->shared.vx = speed;
    a48e:	20 93 e3 0d 	sts	0x0DE3, r18
    a492:	08 95       	ret
    a494:	ea ee       	ldi	r30, 0xEA	; 234
    a496:	fd e0       	ldi	r31, 0x0D	; 13
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, const char* map, char** anim)
{
	shot->shot_type = type;
    a498:	55 e0       	ldi	r21, 0x05	; 5
	shot->hit_count = damage;
    a49a:	42 e0       	ldi	r20, 0x02	; 2
	shot->anim.anim_count = 1;
    a49c:	81 e0       	ldi	r24, 0x01	; 1
	shot->anim.frames_per_anim = 1;
	shot->anim.anims = anim;
    a49e:	28 e1       	ldi	r18, 0x18	; 24
    a4a0:	30 e1       	ldi	r19, 0x10	; 16
	shot->anim.anims[0] = (char*) map;
	shot->shared.vx = speed;
    a4a2:	9f e7       	ldi	r25, 0x7F	; 127
    a4a4:	df 01       	movw	r26, r30
    a4a6:	15 97       	sbiw	r26, 0x05	; 5
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, const char* map, char** anim)
{
	shot->shot_type = type;
    a4a8:	5c 93       	st	X, r21
    a4aa:	11 96       	adiw	r26, 0x01	; 1
	shot->hit_count = damage;
    a4ac:	4c 93       	st	X, r20
    a4ae:	13 96       	adiw	r26, 0x03	; 3
	shot->anim.anim_count = 1;
    a4b0:	8c 93       	st	X, r24
	shot->anim.frames_per_anim = 1;
    a4b2:	80 83       	st	Z, r24
	shot->anim.anims = anim;
    a4b4:	35 83       	std	Z+5, r19	; 0x05
    a4b6:	24 83       	std	Z+4, r18	; 0x04
    a4b8:	16 97       	sbiw	r26, 0x06	; 6
	shot->anim.anims[0] = (char*) map;
	shot->shared.vx = speed;
    a4ba:	9c 93       	st	X, r25
    a4bc:	72 96       	adiw	r30, 0x12	; 18
		}
		
	}
	else
	{
		for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
    a4be:	6e e0       	ldi	r22, 0x0E	; 14
    a4c0:	e0 32       	cpi	r30, 0x20	; 32
    a4c2:	f6 07       	cpc	r31, r22
    a4c4:	79 f7       	brne	.-34     	; 0xa4a4 <init_player_shot+0x1de>
    a4c6:	8e e5       	ldi	r24, 0x5E	; 94
    a4c8:	96 e3       	ldi	r25, 0x36	; 54
    a4ca:	90 93 19 10 	sts	0x1019, r25
    a4ce:	80 93 18 10 	sts	0x1018, r24
    a4d2:	08 95       	ret

0000a4d4 <init_boss_shot>:
	}
}

void init_boss_shot(u8 level)
{
	if (level == 0)	// Ice
    a4d4:	81 11       	cpse	r24, r1
    a4d6:	1f c0       	rjmp	.+62     	; 0xa516 <init_boss_shot+0x42>
    a4d8:	ee e5       	ldi	r30, 0x5E	; 94
    a4da:	fe e0       	ldi	r31, 0x0E	; 14
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, const char* map, char** anim)
{
	shot->shot_type = type;
    a4dc:	81 e0       	ldi	r24, 0x01	; 1
	shot->hit_count = damage;
    a4de:	42 e0       	ldi	r20, 0x02	; 2
	shot->anim.anim_count = 1;
	shot->anim.frames_per_anim = 1;
	shot->anim.anims = anim;
    a4e0:	25 e8       	ldi	r18, 0x85	; 133
    a4e2:	3d e0       	ldi	r19, 0x0D	; 13
	shot->anim.anims[0] = (char*) map;
	shot->shared.vx = speed;
    a4e4:	94 e6       	ldi	r25, 0x64	; 100
    a4e6:	df 01       	movw	r26, r30
    a4e8:	15 97       	sbiw	r26, 0x05	; 5
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, const char* map, char** anim)
{
	shot->shot_type = type;
    a4ea:	8c 93       	st	X, r24
    a4ec:	11 96       	adiw	r26, 0x01	; 1
	shot->hit_count = damage;
    a4ee:	4c 93       	st	X, r20
    a4f0:	13 96       	adiw	r26, 0x03	; 3
	shot->anim.anim_count = 1;
    a4f2:	8c 93       	st	X, r24
	shot->anim.frames_per_anim = 1;
    a4f4:	80 83       	st	Z, r24
	shot->anim.anims = anim;
    a4f6:	35 83       	std	Z+5, r19	; 0x05
    a4f8:	24 83       	std	Z+4, r18	; 0x04
    a4fa:	16 97       	sbiw	r26, 0x06	; 6
	shot->anim.anims[0] = (char*) map;
	shot->shared.vx = speed;
    a4fc:	9c 93       	st	X, r25
    a4fe:	72 96       	adiw	r30, 0x12	; 18

void init_boss_shot(u8 level)
{
	if (level == 0)	// Ice
	{
		for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
    a500:	5e e0       	ldi	r21, 0x0E	; 14
    a502:	e4 39       	cpi	r30, 0x94	; 148
    a504:	f5 07       	cpc	r31, r21
    a506:	79 f7       	brne	.-34     	; 0xa4e6 <init_boss_shot+0x12>
    a508:	81 e6       	ldi	r24, 0x61	; 97
    a50a:	96 e3       	ldi	r25, 0x36	; 54
    a50c:	90 93 86 0d 	sts	0x0D86, r25
    a510:	80 93 85 0d 	sts	0x0D85, r24
    a514:	08 95       	ret
		{
			init_shot(&game.boss.shot[i], ICE_SHOT, MEDIUM_SHOT_DAMAGE, MEDIUM_SHOT_SPEED, map_hero_ice_shot, shot_top_anim);
		}
	}
	else if (level == 2) // Fire
    a516:	82 30       	cpi	r24, 0x02	; 2
    a518:	51 f5       	brne	.+84     	; 0xa56e <init_boss_shot+0x9a>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, const char* map, char** anim)
{
	shot->shot_type = type;
    a51a:	80 93 6b 0e 	sts	0x0E6B, r24
	shot->hit_count = damage;
    a51e:	80 93 6c 0e 	sts	0x0E6C, r24
	shot->anim.anim_count = 1;
    a522:	81 e0       	ldi	r24, 0x01	; 1
    a524:	80 93 6f 0e 	sts	0x0E6F, r24
	shot->anim.frames_per_anim = 1;
    a528:	80 93 70 0e 	sts	0x0E70, r24
	shot->anim.anims = anim;
    a52c:	28 e1       	ldi	r18, 0x18	; 24
    a52e:	30 e1       	ldi	r19, 0x10	; 16
    a530:	30 93 75 0e 	sts	0x0E75, r19
    a534:	20 93 74 0e 	sts	0x0E74, r18
	shot->anim.anims[0] = (char*) map;
    a538:	28 e5       	ldi	r18, 0x58	; 88
    a53a:	36 e3       	ldi	r19, 0x36	; 54
    a53c:	30 93 19 10 	sts	0x1019, r19
    a540:	20 93 18 10 	sts	0x1018, r18
	shot->shared.vx = speed;
    a544:	9f e7       	ldi	r25, 0x7F	; 127
    a546:	90 93 69 0e 	sts	0x0E69, r25
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, const char* map, char** anim)
{
	shot->shot_type = type;
    a54a:	24 e0       	ldi	r18, 0x04	; 4
    a54c:	20 93 59 0e 	sts	0x0E59, r18
	shot->hit_count = damage;
    a550:	80 93 5a 0e 	sts	0x0E5A, r24
	shot->anim.anim_count = 1;
    a554:	80 93 5d 0e 	sts	0x0E5D, r24
	shot->anim.frames_per_anim = 1;
    a558:	80 93 5e 0e 	sts	0x0E5E, r24
	shot->anim.anims = anim;
    a55c:	25 e8       	ldi	r18, 0x85	; 133
    a55e:	3d e0       	ldi	r19, 0x0D	; 13
    a560:	30 93 63 0e 	sts	0x0E63, r19
    a564:	20 93 62 0e 	sts	0x0E62, r18
	shot->anim.anims[0] = (char*) map;
    a568:	24 e6       	ldi	r18, 0x64	; 100
    a56a:	36 e3       	ldi	r19, 0x36	; 54
    a56c:	2a c0       	rjmp	.+84     	; 0xa5c2 <init_boss_shot+0xee>
			init_shot(&game.boss.shot[i], RED_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, map_hero_rplasma_shot, shot_middle_anim);
			init_shot(&game.boss.shot[i-1], ANGLED_SHOT, LOW_SHOT_DAMAGE, FAST_SHOT_SPEED, map_hero_ball_shot, shot_top_anim);
		}
		
	}
	else if (level == 4) // Jungle
    a56e:	84 30       	cpi	r24, 0x04	; 4
    a570:	79 f5       	brne	.+94     	; 0xa5d0 <init_boss_shot+0xfc>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, const char* map, char** anim)
{
	shot->shot_type = type;
    a572:	53 e0       	ldi	r21, 0x03	; 3
    a574:	50 93 6b 0e 	sts	0x0E6B, r21
	shot->hit_count = damage;
    a578:	42 e0       	ldi	r20, 0x02	; 2
    a57a:	40 93 6c 0e 	sts	0x0E6C, r20
	shot->anim.anim_count = 1;
    a57e:	81 e0       	ldi	r24, 0x01	; 1
    a580:	80 93 6f 0e 	sts	0x0E6F, r24
	shot->anim.frames_per_anim = 1;
    a584:	80 93 70 0e 	sts	0x0E70, r24
	shot->anim.anims = anim;
    a588:	28 e1       	ldi	r18, 0x18	; 24
    a58a:	30 e1       	ldi	r19, 0x10	; 16
    a58c:	30 93 75 0e 	sts	0x0E75, r19
    a590:	20 93 74 0e 	sts	0x0E74, r18
	shot->anim.anims[0] = (char*) map;
    a594:	27 e6       	ldi	r18, 0x67	; 103
    a596:	36 e3       	ldi	r19, 0x36	; 54
    a598:	30 93 19 10 	sts	0x1019, r19
    a59c:	20 93 18 10 	sts	0x1018, r18
	shot->shared.vx = speed;
    a5a0:	9f e7       	ldi	r25, 0x7F	; 127
    a5a2:	90 93 69 0e 	sts	0x0E69, r25
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, const char* map, char** anim)
{
	shot->shot_type = type;
    a5a6:	50 93 59 0e 	sts	0x0E59, r21
	shot->hit_count = damage;
    a5aa:	40 93 5a 0e 	sts	0x0E5A, r20
	shot->anim.anim_count = 1;
    a5ae:	80 93 5d 0e 	sts	0x0E5D, r24
	shot->anim.frames_per_anim = 1;
    a5b2:	80 93 5e 0e 	sts	0x0E5E, r24
	shot->anim.anims = anim;
    a5b6:	45 e8       	ldi	r20, 0x85	; 133
    a5b8:	5d e0       	ldi	r21, 0x0D	; 13
    a5ba:	50 93 63 0e 	sts	0x0E63, r21
    a5be:	40 93 62 0e 	sts	0x0E62, r20
	shot->anim.anims[0] = (char*) map;
    a5c2:	30 93 86 0d 	sts	0x0D86, r19
    a5c6:	20 93 85 0d 	sts	0x0D85, r18
	shot->shared.vx = speed;
    a5ca:	90 93 57 0e 	sts	0x0E57, r25
    a5ce:	08 95       	ret
			init_shot(&game.boss.shot[i], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, map_hero_gplasma_shot, shot_middle_anim);
			init_shot(&game.boss.shot[i-1], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, map_hero_gplasma_shot, shot_top_anim);
		}
		
	}
	else if (level == 6) // City
    a5d0:	86 30       	cpi	r24, 0x06	; 6
    a5d2:	e9 f4       	brne	.+58     	; 0xa60e <init_boss_shot+0x13a>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, const char* map, char** anim)
{
	shot->shot_type = type;
    a5d4:	33 e0       	ldi	r19, 0x03	; 3
    a5d6:	30 93 7d 0e 	sts	0x0E7D, r19
	shot->hit_count = damage;
    a5da:	92 e0       	ldi	r25, 0x02	; 2
    a5dc:	90 93 7e 0e 	sts	0x0E7E, r25
	shot->anim.anim_count = 1;
    a5e0:	81 e0       	ldi	r24, 0x01	; 1
    a5e2:	80 93 81 0e 	sts	0x0E81, r24
	shot->anim.frames_per_anim = 1;
    a5e6:	80 93 82 0e 	sts	0x0E82, r24
	shot->anim.anims = anim;
    a5ea:	46 e2       	ldi	r20, 0x26	; 38
    a5ec:	50 e1       	ldi	r21, 0x10	; 16
    a5ee:	50 93 87 0e 	sts	0x0E87, r21
    a5f2:	40 93 86 0e 	sts	0x0E86, r20
	shot->anim.anims[0] = (char*) map;
    a5f6:	47 e6       	ldi	r20, 0x67	; 103
    a5f8:	56 e3       	ldi	r21, 0x36	; 54
    a5fa:	50 93 27 10 	sts	0x1027, r21
    a5fe:	40 93 26 10 	sts	0x1026, r20
	shot->shared.vx = speed;
    a602:	2f e7       	ldi	r18, 0x7F	; 127
    a604:	20 93 7b 0e 	sts	0x0E7B, r18
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, const char* map, char** anim)
{
	shot->shot_type = type;
    a608:	80 93 6b 0e 	sts	0x0E6B, r24
    a60c:	1f c0       	rjmp	.+62     	; 0xa64c <init_boss_shot+0x178>
			init_shot(&game.boss.shot[i-1], ICE_SHOT, MEDIUM_SHOT_DAMAGE, MEDIUM_SHOT_SPEED, map_hero_ice_shot, shot_middle_anim);
			init_shot(&game.boss.shot[i-2], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, map_hero_gplasma_shot, shot_top_anim);
		}
		
	}
	else if (level == 8) // Dessert
    a60e:	88 30       	cpi	r24, 0x08	; 8
    a610:	09 f0       	breq	.+2      	; 0xa614 <init_boss_shot+0x140>
    a612:	45 c0       	rjmp	.+138    	; 0xa69e <init_boss_shot+0x1ca>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, const char* map, char** anim)
{
	shot->shot_type = type;
    a614:	33 e0       	ldi	r19, 0x03	; 3
    a616:	30 93 7d 0e 	sts	0x0E7D, r19
	shot->hit_count = damage;
    a61a:	92 e0       	ldi	r25, 0x02	; 2
    a61c:	90 93 7e 0e 	sts	0x0E7E, r25
	shot->anim.anim_count = 1;
    a620:	81 e0       	ldi	r24, 0x01	; 1
    a622:	80 93 81 0e 	sts	0x0E81, r24
	shot->anim.frames_per_anim = 1;
    a626:	80 93 82 0e 	sts	0x0E82, r24
	shot->anim.anims = anim;
    a62a:	46 e2       	ldi	r20, 0x26	; 38
    a62c:	50 e1       	ldi	r21, 0x10	; 16
    a62e:	50 93 87 0e 	sts	0x0E87, r21
    a632:	40 93 86 0e 	sts	0x0E86, r20
	shot->anim.anims[0] = (char*) map;
    a636:	47 e6       	ldi	r20, 0x67	; 103
    a638:	56 e3       	ldi	r21, 0x36	; 54
    a63a:	50 93 27 10 	sts	0x1027, r21
    a63e:	40 93 26 10 	sts	0x1026, r20
	shot->shared.vx = speed;
    a642:	2f e7       	ldi	r18, 0x7F	; 127
    a644:	20 93 7b 0e 	sts	0x0E7B, r18
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, const char* map, char** anim)
{
	shot->shot_type = type;
    a648:	90 93 6b 0e 	sts	0x0E6B, r25
	shot->hit_count = damage;
    a64c:	90 93 6c 0e 	sts	0x0E6C, r25
	shot->anim.anim_count = 1;
    a650:	80 93 6f 0e 	sts	0x0E6F, r24
	shot->anim.frames_per_anim = 1;
    a654:	80 93 70 0e 	sts	0x0E70, r24
	shot->anim.anims = anim;
    a658:	68 e1       	ldi	r22, 0x18	; 24
    a65a:	70 e1       	ldi	r23, 0x10	; 16
    a65c:	70 93 75 0e 	sts	0x0E75, r23
    a660:	60 93 74 0e 	sts	0x0E74, r22
	shot->anim.anims[0] = (char*) map;
    a664:	61 e6       	ldi	r22, 0x61	; 97
    a666:	76 e3       	ldi	r23, 0x36	; 54
    a668:	70 93 19 10 	sts	0x1019, r23
    a66c:	60 93 18 10 	sts	0x1018, r22
	shot->shared.vx = speed;
    a670:	64 e6       	ldi	r22, 0x64	; 100
    a672:	60 93 69 0e 	sts	0x0E69, r22
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, const char* map, char** anim)
{
	shot->shot_type = type;
    a676:	30 93 59 0e 	sts	0x0E59, r19
	shot->hit_count = damage;
    a67a:	90 93 5a 0e 	sts	0x0E5A, r25
	shot->anim.anim_count = 1;
    a67e:	80 93 5d 0e 	sts	0x0E5D, r24
	shot->anim.frames_per_anim = 1;
    a682:	80 93 5e 0e 	sts	0x0E5E, r24
	shot->anim.anims = anim;
    a686:	85 e8       	ldi	r24, 0x85	; 133
    a688:	9d e0       	ldi	r25, 0x0D	; 13
    a68a:	90 93 63 0e 	sts	0x0E63, r25
    a68e:	80 93 62 0e 	sts	0x0E62, r24
	shot->anim.anims[0] = (char*) map;
    a692:	50 93 86 0d 	sts	0x0D86, r21
    a696:	40 93 85 0d 	sts	0x0D85, r20
	shot->shared.vx = speed;
    a69a:	20 93 57 0e 	sts	0x0E57, r18
    a69e:	08 95       	ret

0000a6a0 <init_boss_state>:
void LBResetJoyPadState(JoyPadState* p)
/*
 * Get the current joy pad button state for index controller
 */
{
	p->held = 0;
    a6a0:	10 92 b5 0e 	sts	0x0EB5, r1
    a6a4:	10 92 b4 0e 	sts	0x0EB4, r1
	p->pressed = 0;
    a6a8:	10 92 b1 0e 	sts	0x0EB1, r1
    a6ac:	10 92 b0 0e 	sts	0x0EB0, r1
	p->released = 0;
    a6b0:	10 92 b3 0e 	sts	0x0EB3, r1
    a6b4:	10 92 b2 0e 	sts	0x0EB2, r1
	p->held_cycles = 0;
    a6b8:	10 92 b6 0e 	sts	0x0EB6, r1
}

void init_boss_state()
{
	LBResetJoyPadState(&game.boss.controls);
	if (is_space())
    a6bc:	0e 94 37 51 	call	0xa26e	; 0xa26e <is_space>
    a6c0:	88 23       	and	r24, r24
    a6c2:	f9 f0       	breq	.+62     	; 0xa702 <init_boss_state+0x62>
	{
		game.boss.width = 3;
    a6c4:	83 e0       	ldi	r24, 0x03	; 3
    a6c6:	80 93 4e 0e 	sts	0x0E4E, r24
		game.boss.height = 1;
    a6ca:	81 e0       	ldi	r24, 0x01	; 1
    a6cc:	80 93 4f 0e 	sts	0x0E4F, r24
		game.boss.run.anim_count = 2;
    a6d0:	82 e0       	ldi	r24, 0x02	; 2
    a6d2:	80 93 91 0e 	sts	0x0E91, r24
		game.boss.run.frames_per_anim = EXPLOSION_FRAME_COUNT;
    a6d6:	85 e0       	ldi	r24, 0x05	; 5
    a6d8:	80 93 92 0e 	sts	0x0E92, r24
		game.boss.run.anims = boss_run_anim;
    a6dc:	87 e8       	ldi	r24, 0x87	; 135
    a6de:	9d e0       	ldi	r25, 0x0D	; 13
    a6e0:	90 93 97 0e 	sts	0x0E97, r25
    a6e4:	80 93 96 0e 	sts	0x0E96, r24
		game.boss.run.anims[0] = (char*) map_hero_ship_0;
    a6e8:	83 e8       	ldi	r24, 0x83	; 131
    a6ea:	96 e3       	ldi	r25, 0x36	; 54
    a6ec:	90 93 88 0d 	sts	0x0D88, r25
    a6f0:	80 93 87 0d 	sts	0x0D87, r24
		game.boss.run.anims[1] = (char*) map_hero_ship_1;
    a6f4:	8e e7       	ldi	r24, 0x7E	; 126
    a6f6:	96 e3       	ldi	r25, 0x36	; 54
    a6f8:	90 93 8a 0d 	sts	0x0D8A, r25
    a6fc:	80 93 89 0d 	sts	0x0D89, r24
    a700:	2a c0       	rjmp	.+84     	; 0xa756 <init_boss_state+0xb6>
	}
	else
	{
		game.boss.width = 2;
    a702:	82 e0       	ldi	r24, 0x02	; 2
    a704:	80 93 4e 0e 	sts	0x0E4E, r24
		game.boss.height = 3;
    a708:	83 e0       	ldi	r24, 0x03	; 3
    a70a:	80 93 4f 0e 	sts	0x0E4F, r24
		game.boss.run.anim_count = 4;
    a70e:	84 e0       	ldi	r24, 0x04	; 4
    a710:	80 93 91 0e 	sts	0x0E91, r24
		game.boss.run.frames_per_anim = FRAMES_PER_RUN_CYCLE;
    a714:	8c e0       	ldi	r24, 0x0C	; 12
    a716:	80 93 92 0e 	sts	0x0E92, r24
		game.boss.run.anims = boss_run_anim;
    a71a:	87 e8       	ldi	r24, 0x87	; 135
    a71c:	9d e0       	ldi	r25, 0x0D	; 13
    a71e:	90 93 97 0e 	sts	0x0E97, r25
    a722:	80 93 96 0e 	sts	0x0E96, r24
		game.boss.run.anims[0] = (char*) map_ahero_step_0;
    a726:	88 e4       	ldi	r24, 0x48	; 72
    a728:	96 e3       	ldi	r25, 0x36	; 54
    a72a:	90 93 88 0d 	sts	0x0D88, r25
    a72e:	80 93 87 0d 	sts	0x0D87, r24
		game.boss.run.anims[1] = (char*) map_ahero_step_1;
    a732:	80 e4       	ldi	r24, 0x40	; 64
    a734:	96 e3       	ldi	r25, 0x36	; 54
    a736:	90 93 8a 0d 	sts	0x0D8A, r25
    a73a:	80 93 89 0d 	sts	0x0D89, r24
		game.boss.run.anims[2] = (char*) map_ahero_step_2;
    a73e:	88 e3       	ldi	r24, 0x38	; 56
    a740:	96 e3       	ldi	r25, 0x36	; 54
    a742:	90 93 8c 0d 	sts	0x0D8C, r25
    a746:	80 93 8b 0d 	sts	0x0D8B, r24
		game.boss.run.anims[3] = (char*) map_ahero_step_3;
    a74a:	80 e3       	ldi	r24, 0x30	; 48
    a74c:	96 e3       	ldi	r25, 0x36	; 54
    a74e:	90 93 8e 0d 	sts	0x0D8E, r25
    a752:	80 93 8d 0d 	sts	0x0D8D, r24
	}
	game.boss.active = 0;
    a756:	10 92 50 0e 	sts	0x0E50, r1
	game.boss.direction = D_RIGHT;
    a75a:	81 e0       	ldi	r24, 0x01	; 1
    a75c:	80 93 4d 0e 	sts	0x0E4D, r24
	game.boss.flags = IDLE;
    a760:	98 e0       	ldi	r25, 0x08	; 8
    a762:	90 93 4b 0e 	sts	0x0E4B, r25
	game.boss.ai_flags = AI_NOT_READY;
    a766:	10 92 4c 0e 	sts	0x0E4C, r1
	game.boss.shield = BOSS_SHIELD;
    a76a:	9a e0       	ldi	r25, 0x0A	; 10
    a76c:	90 93 51 0e 	sts	0x0E51, r25
	game.boss.idle.anim_count = 1;
    a770:	80 93 89 0e 	sts	0x0E89, r24
	game.boss.idle.frames_per_anim = 1;
    a774:	80 93 8a 0e 	sts	0x0E8A, r24
	game.boss.idle.anims = boss_idle_anim;
    a778:	28 e2       	ldi	r18, 0x28	; 40
    a77a:	30 e1       	ldi	r19, 0x10	; 16
    a77c:	30 93 8f 0e 	sts	0x0E8F, r19
    a780:	20 93 8e 0e 	sts	0x0E8E, r18
	game.boss.idle.anims[0] = (char*) map_ahero_idle;
    a784:	20 e5       	ldi	r18, 0x50	; 80
    a786:	36 e3       	ldi	r19, 0x36	; 54
    a788:	30 93 29 10 	sts	0x1029, r19
    a78c:	20 93 28 10 	sts	0x1028, r18
	
	game.boss.jump.anim_count = 1;
    a790:	80 93 99 0e 	sts	0x0E99, r24
	game.boss.jump.frames_per_anim = 1;
    a794:	80 93 9a 0e 	sts	0x0E9A, r24
	game.boss.jump.anims = boss_jump_anim;
    a798:	8a e1       	ldi	r24, 0x1A	; 26
    a79a:	90 e1       	ldi	r25, 0x10	; 16
    a79c:	90 93 9f 0e 	sts	0x0E9F, r25
    a7a0:	80 93 9e 0e 	sts	0x0E9E, r24
	game.boss.jump.anims[0] = (char*) map_ahero_jump;
    a7a4:	88 e2       	ldi	r24, 0x28	; 40
    a7a6:	96 e3       	ldi	r25, 0x36	; 54
    a7a8:	90 93 1b 10 	sts	0x101B, r25
    a7ac:	80 93 1a 10 	sts	0x101A, r24
	
	game.boss.expl.anim_count = 3;
    a7b0:	83 e0       	ldi	r24, 0x03	; 3
    a7b2:	80 93 a9 0e 	sts	0x0EA9, r24
	game.boss.expl.frames_per_anim = EXPLOSION_FRAME_COUNT;
    a7b6:	85 e0       	ldi	r24, 0x05	; 5
    a7b8:	80 93 aa 0e 	sts	0x0EAA, r24
	game.boss.expl.anims = expl_anim;
    a7bc:	80 e2       	ldi	r24, 0x20	; 32
    a7be:	90 e1       	ldi	r25, 0x10	; 16
    a7c0:	90 93 af 0e 	sts	0x0EAF, r25
    a7c4:	80 93 ae 0e 	sts	0x0EAE, r24
	game.boss.expl.anims[0] = (char*) map_explosion_0;
    a7c8:	82 ed       	ldi	r24, 0xD2	; 210
    a7ca:	96 e3       	ldi	r25, 0x36	; 54
    a7cc:	90 93 21 10 	sts	0x1021, r25
    a7d0:	80 93 20 10 	sts	0x1020, r24
	game.boss.expl.anims[1] = (char*) map_explosion_1;
    a7d4:	8f ec       	ldi	r24, 0xCF	; 207
    a7d6:	96 e3       	ldi	r25, 0x36	; 54
    a7d8:	90 93 23 10 	sts	0x1023, r25
    a7dc:	80 93 22 10 	sts	0x1022, r24
	game.boss.expl.anims[2] = (char*) map_explosion_2;
    a7e0:	8c ec       	ldi	r24, 0xCC	; 204
    a7e2:	96 e3       	ldi	r25, 0x36	; 54
    a7e4:	90 93 25 10 	sts	0x1025, r25
    a7e8:	80 93 24 10 	sts	0x1024, r24
	
	init_boss_shot(game.current_level_index);
    a7ec:	80 91 c6 0d 	lds	r24, 0x0DC6
    a7f0:	0c 94 6a 52 	jmp	0xa4d4	; 0xa4d4 <init_boss_shot>

0000a7f4 <init_player_state>:
}

void init_player_state()
{
	if (is_space())
    a7f4:	0e 94 37 51 	call	0xa26e	; 0xa26e <is_space>
    a7f8:	88 23       	and	r24, r24
    a7fa:	f9 f0       	breq	.+62     	; 0xa83a <init_player_state+0x46>
	{
		game.player.width = 3;
    a7fc:	83 e0       	ldi	r24, 0x03	; 3
    a7fe:	80 93 da 0d 	sts	0x0DDA, r24
		game.player.height = 1;
    a802:	81 e0       	ldi	r24, 0x01	; 1
    a804:	80 93 db 0d 	sts	0x0DDB, r24
		game.player.run.anim_count = 2;
    a808:	82 e0       	ldi	r24, 0x02	; 2
    a80a:	80 93 1d 0e 	sts	0x0E1D, r24
		game.player.run.frames_per_anim = EXPLOSION_FRAME_COUNT;
    a80e:	85 e0       	ldi	r24, 0x05	; 5
    a810:	80 93 1e 0e 	sts	0x0E1E, r24
		game.player.run.anims = run_anim;
    a814:	80 e1       	ldi	r24, 0x10	; 16
    a816:	90 e1       	ldi	r25, 0x10	; 16
    a818:	90 93 23 0e 	sts	0x0E23, r25
    a81c:	80 93 22 0e 	sts	0x0E22, r24
		game.player.run.anims[0] = (char*) map_hero_ship_0;
    a820:	83 e8       	ldi	r24, 0x83	; 131
    a822:	96 e3       	ldi	r25, 0x36	; 54
    a824:	90 93 11 10 	sts	0x1011, r25
    a828:	80 93 10 10 	sts	0x1010, r24
		game.player.run.anims[1] = (char*) map_hero_ship_1;
    a82c:	8e e7       	ldi	r24, 0x7E	; 126
    a82e:	96 e3       	ldi	r25, 0x36	; 54
    a830:	90 93 13 10 	sts	0x1013, r25
    a834:	80 93 12 10 	sts	0x1012, r24
    a838:	2a c0       	rjmp	.+84     	; 0xa88e <init_player_state+0x9a>
	}
	else
	{
		game.player.width = 2;
    a83a:	82 e0       	ldi	r24, 0x02	; 2
    a83c:	80 93 da 0d 	sts	0x0DDA, r24
		game.player.height = 3;
    a840:	83 e0       	ldi	r24, 0x03	; 3
    a842:	80 93 db 0d 	sts	0x0DDB, r24
		game.player.run.anim_count = 4;
    a846:	84 e0       	ldi	r24, 0x04	; 4
    a848:	80 93 1d 0e 	sts	0x0E1D, r24
		game.player.run.frames_per_anim = FRAMES_PER_RUN_CYCLE;
    a84c:	8c e0       	ldi	r24, 0x0C	; 12
    a84e:	80 93 1e 0e 	sts	0x0E1E, r24
		game.player.run.anims = run_anim;
    a852:	80 e1       	ldi	r24, 0x10	; 16
    a854:	90 e1       	ldi	r25, 0x10	; 16
    a856:	90 93 23 0e 	sts	0x0E23, r25
    a85a:	80 93 22 0e 	sts	0x0E22, r24
		game.player.run.anims[0] = (char*) map_hero_step_0;
    a85e:	8d ea       	ldi	r24, 0xAD	; 173
    a860:	96 e3       	ldi	r25, 0x36	; 54
    a862:	90 93 11 10 	sts	0x1011, r25
    a866:	80 93 10 10 	sts	0x1010, r24
		game.player.run.anims[1] = (char*) map_hero_step_1;
    a86a:	85 ea       	ldi	r24, 0xA5	; 165
    a86c:	96 e3       	ldi	r25, 0x36	; 54
    a86e:	90 93 13 10 	sts	0x1013, r25
    a872:	80 93 12 10 	sts	0x1012, r24
		game.player.run.anims[2] = (char*) map_hero_step_2;
    a876:	8d e9       	ldi	r24, 0x9D	; 157
    a878:	96 e3       	ldi	r25, 0x36	; 54
    a87a:	90 93 15 10 	sts	0x1015, r25
    a87e:	80 93 14 10 	sts	0x1014, r24
		game.player.run.anims[3] = (char*) map_hero_step_3;
    a882:	85 e9       	ldi	r24, 0x95	; 149
    a884:	96 e3       	ldi	r25, 0x36	; 54
    a886:	90 93 17 10 	sts	0x1017, r25
    a88a:	80 93 16 10 	sts	0x1016, r24
	}
	game.player.active = 1;
    a88e:	81 e0       	ldi	r24, 0x01	; 1
    a890:	80 93 dc 0d 	sts	0x0DDC, r24
	game.player.direction = D_RIGHT;
    a894:	80 93 d9 0d 	sts	0x0DD9, r24
	game.player.flags = IDLE;
    a898:	98 e0       	ldi	r25, 0x08	; 8
    a89a:	90 93 d7 0d 	sts	0x0DD7, r25
	game.player.ai_flags = AI_NOT_READY;
    a89e:	10 92 d8 0d 	sts	0x0DD8, r1
	game.player.shield = PLAYER_SHIELD;
    a8a2:	9a e0       	ldi	r25, 0x0A	; 10
    a8a4:	90 93 dd 0d 	sts	0x0DDD, r25
	game.player.idle.anim_count = 1;
    a8a8:	80 93 15 0e 	sts	0x0E15, r24
	game.player.idle.frames_per_anim = 1;
    a8ac:	80 93 16 0e 	sts	0x0E16, r24
	game.player.idle.anims = idle_anim;
    a8b0:	2c e2       	ldi	r18, 0x2C	; 44
    a8b2:	30 e1       	ldi	r19, 0x10	; 16
    a8b4:	30 93 1b 0e 	sts	0x0E1B, r19
    a8b8:	20 93 1a 0e 	sts	0x0E1A, r18
	game.player.idle.anims[0] = (char*) map_hero_idle;
    a8bc:	25 eb       	ldi	r18, 0xB5	; 181
    a8be:	36 e3       	ldi	r19, 0x36	; 54
    a8c0:	30 93 2d 10 	sts	0x102D, r19
    a8c4:	20 93 2c 10 	sts	0x102C, r18
	
	game.player.jump.anim_count = 1;
    a8c8:	80 93 25 0e 	sts	0x0E25, r24
	game.player.jump.frames_per_anim = 1;
    a8cc:	80 93 26 0e 	sts	0x0E26, r24
	game.player.jump.anims = jump_anim;
    a8d0:	2f e8       	ldi	r18, 0x8F	; 143
    a8d2:	3d e0       	ldi	r19, 0x0D	; 13
    a8d4:	30 93 2b 0e 	sts	0x0E2B, r19
    a8d8:	20 93 2a 0e 	sts	0x0E2A, r18
	game.player.jump.anims[0] = (char*) map_hero_jump;
    a8dc:	2d e8       	ldi	r18, 0x8D	; 141
    a8de:	36 e3       	ldi	r19, 0x36	; 54
    a8e0:	30 93 90 0d 	sts	0x0D90, r19
    a8e4:	20 93 8f 0d 	sts	0x0D8F, r18
	
	game.player.prone.anim_count = 1;
    a8e8:	80 93 2d 0e 	sts	0x0E2D, r24
	game.player.prone.frames_per_anim = 1;
    a8ec:	80 93 2e 0e 	sts	0x0E2E, r24
	game.player.prone.anims = prone_anim;
    a8f0:	88 eb       	ldi	r24, 0xB8	; 184
    a8f2:	9f e0       	ldi	r25, 0x0F	; 15
    a8f4:	90 93 33 0e 	sts	0x0E33, r25
    a8f8:	80 93 32 0e 	sts	0x0E32, r24
	game.player.prone.anims[0] = (char*) map_hero_prone;
    a8fc:	88 e8       	ldi	r24, 0x88	; 136
    a8fe:	96 e3       	ldi	r25, 0x36	; 54
    a900:	90 93 b9 0f 	sts	0x0FB9, r25
    a904:	80 93 b8 0f 	sts	0x0FB8, r24
	
	game.player.expl.anim_count = 3;
    a908:	83 e0       	ldi	r24, 0x03	; 3
    a90a:	80 93 35 0e 	sts	0x0E35, r24
	game.player.expl.frames_per_anim = EXPLOSION_FRAME_COUNT;
    a90e:	85 e0       	ldi	r24, 0x05	; 5
    a910:	80 93 36 0e 	sts	0x0E36, r24
	game.player.expl.anims = expl_anim;
    a914:	80 e2       	ldi	r24, 0x20	; 32
    a916:	90 e1       	ldi	r25, 0x10	; 16
    a918:	90 93 3b 0e 	sts	0x0E3B, r25
    a91c:	80 93 3a 0e 	sts	0x0E3A, r24
	game.player.expl.anims[0] = (char*) map_explosion_0;
    a920:	82 ed       	ldi	r24, 0xD2	; 210
    a922:	96 e3       	ldi	r25, 0x36	; 54
    a924:	90 93 21 10 	sts	0x1021, r25
    a928:	80 93 20 10 	sts	0x1020, r24
	game.player.expl.anims[1] = (char*) map_explosion_1;
    a92c:	8f ec       	ldi	r24, 0xCF	; 207
    a92e:	96 e3       	ldi	r25, 0x36	; 54
    a930:	90 93 23 10 	sts	0x1023, r25
    a934:	80 93 22 10 	sts	0x1022, r24
	game.player.expl.anims[2] = (char*) map_explosion_2;
    a938:	8c ec       	ldi	r24, 0xCC	; 204
    a93a:	96 e3       	ldi	r25, 0x36	; 54
    a93c:	90 93 25 10 	sts	0x1025, r25
    a940:	80 93 24 10 	sts	0x1024, r24
	
	init_player_shot(game.current_level_index);
    a944:	80 91 c6 0d 	lds	r24, 0x0DC6
    a948:	0c 94 63 51 	jmp	0xa2c6	; 0xa2c6 <init_player_shot>

0000a94c <init_enemy_shot>:
}

void init_enemy_shot(u8 i, u16 x, u16 y)
{
	game.enemies[i].expl.anim_count = 3;
    a94c:	23 e3       	ldi	r18, 0x33	; 51
    a94e:	82 9f       	mul	r24, r18
    a950:	c0 01       	movw	r24, r0
    a952:	11 24       	eor	r1, r1
    a954:	8f 54       	subi	r24, 0x4F	; 79
    a956:	92 4f       	sbci	r25, 0xF2	; 242
    a958:	fc 01       	movw	r30, r24
    a95a:	ee 5c       	subi	r30, 0xCE	; 206
    a95c:	fe 4f       	sbci	r31, 0xFE	; 254
    a95e:	23 e0       	ldi	r18, 0x03	; 3
    a960:	20 83       	st	Z, r18
	game.enemies[i].expl.frames_per_anim = EXPLOSION_FRAME_COUNT;
    a962:	31 96       	adiw	r30, 0x01	; 1
    a964:	25 e0       	ldi	r18, 0x05	; 5
    a966:	20 83       	st	Z, r18
	game.enemies[i].expl.anims = expl_anim;
    a968:	dc 01       	movw	r26, r24
    a96a:	a9 5c       	subi	r26, 0xC9	; 201
    a96c:	be 4f       	sbci	r27, 0xFE	; 254
    a96e:	e0 e2       	ldi	r30, 0x20	; 32
    a970:	f0 e1       	ldi	r31, 0x10	; 16
    a972:	11 96       	adiw	r26, 0x01	; 1
    a974:	fc 93       	st	X, r31
    a976:	ee 93       	st	-X, r30
	game.enemies[i].expl.anims[0] = (char*) map_explosion_0;
    a978:	22 ed       	ldi	r18, 0xD2	; 210
    a97a:	36 e3       	ldi	r19, 0x36	; 54
    a97c:	31 83       	std	Z+1, r19	; 0x01
    a97e:	20 83       	st	Z, r18
	game.enemies[i].expl.anims[1] = (char*) map_explosion_1;
    a980:	2f ec       	ldi	r18, 0xCF	; 207
    a982:	36 e3       	ldi	r19, 0x36	; 54
    a984:	33 83       	std	Z+3, r19	; 0x03
    a986:	22 83       	std	Z+2, r18	; 0x02
	game.enemies[i].expl.anims[2] = (char*) map_explosion_2;
    a988:	2c ec       	ldi	r18, 0xCC	; 204
    a98a:	36 e3       	ldi	r19, 0x36	; 54
    a98c:	35 83       	std	Z+5, r19	; 0x05
    a98e:	24 83       	std	Z+4, r18	; 0x04
		
	for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
	{
		game.enemies[i].shot[j].hit_count = 1;
    a990:	fc 01       	movw	r30, r24
    a992:	e1 5e       	subi	r30, 0xE1	; 225
    a994:	fe 4f       	sbci	r31, 0xFE	; 254
    a996:	21 e0       	ldi	r18, 0x01	; 1
    a998:	20 83       	st	Z, r18
		game.enemies[i].shot[j].active = 0;
    a99a:	31 96       	adiw	r30, 0x01	; 1
    a99c:	10 82       	st	Z, r1
		game.enemies[i].shot[j].shot_type = ENEMY_BALL_SHOT;
    a99e:	32 97       	sbiw	r30, 0x02	; 2
    a9a0:	37 e0       	ldi	r19, 0x07	; 7
    a9a2:	30 83       	st	Z, r19
		game.enemies[i].shot[j].anim.anim_count = 1;
    a9a4:	34 96       	adiw	r30, 0x04	; 4
    a9a6:	20 83       	st	Z, r18
		game.enemies[i].shot[j].anim.frames_per_anim = 1;
    a9a8:	31 96       	adiw	r30, 0x01	; 1
    a9aa:	20 83       	st	Z, r18
		game.enemies[i].shot[j].anim.anims = enemy_shot_anim;
    a9ac:	50 97       	sbiw	r26, 0x10	; 16
    a9ae:	ec e1       	ldi	r30, 0x1C	; 28
    a9b0:	f0 e1       	ldi	r31, 0x10	; 16
    a9b2:	ed 93       	st	X+, r30
    a9b4:	fc 93       	st	X, r31
		game.enemies[i].shot[j].anim.anims[0] = (char*) map_enemy_shot;
    a9b6:	25 e2       	ldi	r18, 0x25	; 37
    a9b8:	36 e3       	ldi	r19, 0x36	; 54
    a9ba:	31 83       	std	Z+1, r19	; 0x01
    a9bc:	20 83       	st	Z, r18
		game.enemies[i].shot[j].shared.vx = SLOW_SHOT_SPEED;
    a9be:	fc 01       	movw	r30, r24
    a9c0:	e4 5e       	subi	r30, 0xE4	; 228
    a9c2:	fe 4f       	sbci	r31, 0xFE	; 254
    a9c4:	20 e5       	ldi	r18, 0x50	; 80
    a9c6:	20 83       	st	Z, r18
		game.enemies[i].shot[j].shared.vy = 0;
    a9c8:	31 97       	sbiw	r30, 0x01	; 1
    a9ca:	10 82       	st	Z, r1
		game.enemies[i].shot[j].shared.x = x;
    a9cc:	34 97       	sbiw	r30, 0x04	; 4
    a9ce:	71 83       	std	Z+1, r23	; 0x01
    a9d0:	60 83       	st	Z, r22
		game.enemies[i].shot[j].shared.y = y;
    a9d2:	32 96       	adiw	r30, 0x02	; 2
    a9d4:	51 83       	std	Z+1, r21	; 0x01
    a9d6:	40 83       	st	Z, r20
    a9d8:	08 95       	ret

0000a9da <init_enemy_spider>:
	}
}

void init_enemy_spider(u8 i, u16 x, u16 y)
{
	game.enemies[i].active = 1;
    a9da:	93 e3       	ldi	r25, 0x33	; 51
    a9dc:	89 9f       	mul	r24, r25
    a9de:	90 01       	movw	r18, r0
    a9e0:	11 24       	eor	r1, r1
    a9e2:	2f 54       	subi	r18, 0x4F	; 79
    a9e4:	32 4f       	sbci	r19, 0xF2	; 242
    a9e6:	f9 01       	movw	r30, r18
    a9e8:	e3 5f       	subi	r30, 0xF3	; 243
    a9ea:	fe 4f       	sbci	r31, 0xFE	; 254
    a9ec:	91 e0       	ldi	r25, 0x01	; 1
    a9ee:	90 83       	st	Z, r25
	game.enemies[i].direction = D_LEFT;
    a9f0:	32 96       	adiw	r30, 0x02	; 2
    a9f2:	10 82       	st	Z, r1
	game.enemies[i].flags = IDLE;
    a9f4:	31 97       	sbiw	r30, 0x01	; 1
    a9f6:	a8 e0       	ldi	r26, 0x08	; 8
    a9f8:	a0 83       	st	Z, r26
	game.enemies[i].width = 1;
    a9fa:	32 96       	adiw	r30, 0x02	; 2
    a9fc:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    a9fe:	31 96       	adiw	r30, 0x01	; 1
    aa00:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_SPIDER;
    aa02:	31 96       	adiw	r30, 0x01	; 1
    aa04:	10 82       	st	Z, r1
	game.enemies[i].frame_count = 0;
    aa06:	31 96       	adiw	r30, 0x01	; 1
    aa08:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    aa0a:	31 96       	adiw	r30, 0x01	; 1
    aa0c:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_SPIDER_SHIELD;
    aa0e:	32 96       	adiw	r30, 0x02	; 2
    aa10:	92 e0       	ldi	r25, 0x02	; 2
    aa12:	90 83       	st	Z, r25
	
	game.enemies[i].anim.anim_count = 2;
    aa14:	74 96       	adiw	r30, 0x14	; 20
    aa16:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = SPIDER_FRAMES_PER_IDLE;
    aa18:	31 96       	adiw	r30, 0x01	; 1
    aa1a:	9a e0       	ldi	r25, 0x0A	; 10
    aa1c:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = spider_anim;
    aa1e:	d9 01       	movw	r26, r18
    aa20:	a1 5d       	subi	r26, 0xD1	; 209
    aa22:	be 4f       	sbci	r27, 0xFE	; 254
    aa24:	ea eb       	ldi	r30, 0xBA	; 186
    aa26:	ff e0       	ldi	r31, 0x0F	; 15
    aa28:	ed 93       	st	X+, r30
    aa2a:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_spider_0;
    aa2c:	af e1       	ldi	r26, 0x1F	; 31
    aa2e:	b6 e3       	ldi	r27, 0x36	; 54
    aa30:	b1 83       	std	Z+1, r27	; 0x01
    aa32:	a0 83       	st	Z, r26
	game.enemies[i].anim.anims[1] = (char*) map_enemy_spider_1;
    aa34:	ac e1       	ldi	r26, 0x1C	; 28
    aa36:	b6 e3       	ldi	r27, 0x36	; 54
    aa38:	b3 83       	std	Z+3, r27	; 0x03
    aa3a:	a2 83       	std	Z+2, r26	; 0x02
	game.enemies[i].shared.gravity = 0;
    aa3c:	f9 01       	movw	r30, r18
    aa3e:	e4 5f       	subi	r30, 0xF4	; 244
    aa40:	fe 4f       	sbci	r31, 0xFE	; 254
    aa42:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = 0;
    aa44:	31 97       	sbiw	r30, 0x01	; 1
    aa46:	10 82       	st	Z, r1
	game.enemies[i].shared.vy = 0;
    aa48:	31 97       	sbiw	r30, 0x01	; 1
    aa4a:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    aa4c:	34 97       	sbiw	r30, 0x04	; 4
    aa4e:	71 83       	std	Z+1, r23	; 0x01
    aa50:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    aa52:	32 96       	adiw	r30, 0x02	; 2
    aa54:	51 83       	std	Z+1, r21	; 0x01
    aa56:	40 83       	st	Z, r20
	
	init_enemy_shot(i, x, y);
    aa58:	0c 94 a6 54 	jmp	0xa94c	; 0xa94c <init_enemy_shot>

0000aa5c <init_enemy_shark>:
}

void init_enemy_shark(u8 i, u16 x, u16 y)
{
	game.enemies[i].active = 1;
    aa5c:	93 e3       	ldi	r25, 0x33	; 51
    aa5e:	89 9f       	mul	r24, r25
    aa60:	90 01       	movw	r18, r0
    aa62:	11 24       	eor	r1, r1
    aa64:	2f 54       	subi	r18, 0x4F	; 79
    aa66:	32 4f       	sbci	r19, 0xF2	; 242
    aa68:	f9 01       	movw	r30, r18
    aa6a:	e3 5f       	subi	r30, 0xF3	; 243
    aa6c:	fe 4f       	sbci	r31, 0xFE	; 254
    aa6e:	91 e0       	ldi	r25, 0x01	; 1
    aa70:	90 83       	st	Z, r25
	game.enemies[i].width = 1;
    aa72:	33 96       	adiw	r30, 0x03	; 3
    aa74:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    aa76:	31 96       	adiw	r30, 0x01	; 1
    aa78:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_SHARK;
    aa7a:	31 96       	adiw	r30, 0x01	; 1
    aa7c:	90 83       	st	Z, r25
	game.enemies[i].frame_count = 0;
    aa7e:	31 96       	adiw	r30, 0x01	; 1
    aa80:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    aa82:	31 96       	adiw	r30, 0x01	; 1
    aa84:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_SHARK_SHIELD;
    aa86:	32 96       	adiw	r30, 0x02	; 2
    aa88:	a4 e0       	ldi	r26, 0x04	; 4
    aa8a:	a0 83       	st	Z, r26
	
	game.enemies[i].anim.anim_count = 1;
    aa8c:	74 96       	adiw	r30, 0x14	; 20
    aa8e:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = 1;
    aa90:	31 96       	adiw	r30, 0x01	; 1
    aa92:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = shark_anim;
    aa94:	d9 01       	movw	r26, r18
    aa96:	a1 5d       	subi	r26, 0xD1	; 209
    aa98:	be 4f       	sbci	r27, 0xFE	; 254
    aa9a:	ee eb       	ldi	r30, 0xBE	; 190
    aa9c:	ff e0       	ldi	r31, 0x0F	; 15
    aa9e:	ed 93       	st	X+, r30
    aaa0:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_shark;
    aaa2:	a2 e2       	ldi	r26, 0x22	; 34
    aaa4:	b6 e3       	ldi	r27, 0x36	; 54
    aaa6:	b1 83       	std	Z+1, r27	; 0x01
    aaa8:	a0 83       	st	Z, r26
	game.enemies[i].shared.gravity = 0;
    aaaa:	f9 01       	movw	r30, r18
    aaac:	e4 5f       	subi	r30, 0xF4	; 244
    aaae:	fe 4f       	sbci	r31, 0xFE	; 254
    aab0:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = SHARK_SPEED;
    aab2:	31 97       	sbiw	r30, 0x01	; 1
    aab4:	9e e1       	ldi	r25, 0x1E	; 30
    aab6:	90 83       	st	Z, r25
	game.enemies[i].shared.vy = 0;
    aab8:	31 97       	sbiw	r30, 0x01	; 1
    aaba:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    aabc:	34 97       	sbiw	r30, 0x04	; 4
    aabe:	71 83       	std	Z+1, r23	; 0x01
    aac0:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    aac2:	32 96       	adiw	r30, 0x02	; 2
    aac4:	51 83       	std	Z+1, r21	; 0x01
    aac6:	40 83       	st	Z, r20
	
	init_enemy_shot(i, x, y);
    aac8:	0c 94 a6 54 	jmp	0xa94c	; 0xa94c <init_enemy_shot>

0000aacc <init_enemy_level_hazard>:
}

void init_enemy_level_hazard(u8 i, u16 x, u16 y)
{
	game.enemies[i].active = 1;
    aacc:	a8 2f       	mov	r26, r24
    aace:	b0 e0       	ldi	r27, 0x00	; 0
    aad0:	23 e3       	ldi	r18, 0x33	; 51
    aad2:	82 9f       	mul	r24, r18
    aad4:	c0 01       	movw	r24, r0
    aad6:	11 24       	eor	r1, r1
    aad8:	8f 54       	subi	r24, 0x4F	; 79
    aada:	92 4f       	sbci	r25, 0xF2	; 242
    aadc:	fc 01       	movw	r30, r24
    aade:	e3 5f       	subi	r30, 0xF3	; 243
    aae0:	fe 4f       	sbci	r31, 0xFE	; 254
    aae2:	21 e0       	ldi	r18, 0x01	; 1
    aae4:	20 83       	st	Z, r18
	game.enemies[i].width = 1;
    aae6:	33 96       	adiw	r30, 0x03	; 3
    aae8:	20 83       	st	Z, r18
	game.enemies[i].height = 1;
    aaea:	31 96       	adiw	r30, 0x01	; 1
    aaec:	20 83       	st	Z, r18
	game.enemies[i].enemy_type = ENEMY_PROJECTILE_HAZARD;
    aaee:	31 96       	adiw	r30, 0x01	; 1
    aaf0:	32 e0       	ldi	r19, 0x02	; 2
    aaf2:	30 83       	st	Z, r19
	game.enemies[i].frame_count = 0;
    aaf4:	31 96       	adiw	r30, 0x01	; 1
    aaf6:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    aaf8:	31 96       	adiw	r30, 0x01	; 1
    aafa:	10 82       	st	Z, r1
	
	game.enemies[i].anim.anim_count = 1;
    aafc:	76 96       	adiw	r30, 0x16	; 22
    aafe:	20 83       	st	Z, r18
	game.enemies[i].anim.frames_per_anim = 1;
    ab00:	31 96       	adiw	r30, 0x01	; 1
    ab02:	20 83       	st	Z, r18
	game.enemies[i].anim.anims = hazard_anim;
    ab04:	34 96       	adiw	r30, 0x04	; 4
    ab06:	8a e2       	ldi	r24, 0x2A	; 42
    ab08:	90 e1       	ldi	r25, 0x10	; 16
    ab0a:	91 83       	std	Z+1, r25	; 0x01
    ab0c:	80 83       	st	Z, r24
	switch (game.current_level_index) {
    ab0e:	80 91 c6 0d 	lds	r24, 0x0DC6
    ab12:	84 30       	cpi	r24, 0x04	; 4
    ab14:	79 f0       	breq	.+30     	; 0xab34 <init_enemy_level_hazard+0x68>
    ab16:	38 f4       	brcc	.+14     	; 0xab26 <init_enemy_level_hazard+0x5a>
    ab18:	88 23       	and	r24, r24
    ab1a:	91 f0       	breq	.+36     	; 0xab40 <init_enemy_level_hazard+0x74>
    ab1c:	82 30       	cpi	r24, 0x02	; 2
    ab1e:	81 f4       	brne	.+32     	; 0xab40 <init_enemy_level_hazard+0x74>
		case 0: game.enemies[i].anim.anims[0] = (char*) map_hazard_ice; break;
		case 2: game.enemies[i].anim.anims[0] = (char*)  map_hazard_fire; break;
    ab20:	8d e0       	ldi	r24, 0x0D	; 13
    ab22:	96 e3       	ldi	r25, 0x36	; 54
    ab24:	0f c0       	rjmp	.+30     	; 0xab44 <init_enemy_level_hazard+0x78>
	game.enemies[i].shot_frame_count = 0;
	
	game.enemies[i].anim.anim_count = 1;
	game.enemies[i].anim.frames_per_anim = 1;
	game.enemies[i].anim.anims = hazard_anim;
	switch (game.current_level_index) {
    ab26:	86 30       	cpi	r24, 0x06	; 6
    ab28:	41 f0       	breq	.+16     	; 0xab3a <init_enemy_level_hazard+0x6e>
    ab2a:	88 30       	cpi	r24, 0x08	; 8
    ab2c:	49 f4       	brne	.+18     	; 0xab40 <init_enemy_level_hazard+0x74>
		case 0: game.enemies[i].anim.anims[0] = (char*) map_hazard_ice; break;
		case 2: game.enemies[i].anim.anims[0] = (char*)  map_hazard_fire; break;
		case 4: game.enemies[i].anim.anims[0] = (char*) map_hazard_jungle; break;
		case 6: game.enemies[i].anim.anims[0] = (char*) map_hazard_city; break;
		case 8: game.enemies[i].anim.anims[0] = (char*) map_hazard_desert; break;
    ab2e:	84 e0       	ldi	r24, 0x04	; 4
    ab30:	96 e3       	ldi	r25, 0x36	; 54
    ab32:	08 c0       	rjmp	.+16     	; 0xab44 <init_enemy_level_hazard+0x78>
	game.enemies[i].anim.frames_per_anim = 1;
	game.enemies[i].anim.anims = hazard_anim;
	switch (game.current_level_index) {
		case 0: game.enemies[i].anim.anims[0] = (char*) map_hazard_ice; break;
		case 2: game.enemies[i].anim.anims[0] = (char*)  map_hazard_fire; break;
		case 4: game.enemies[i].anim.anims[0] = (char*) map_hazard_jungle; break;
    ab34:	8a e0       	ldi	r24, 0x0A	; 10
    ab36:	96 e3       	ldi	r25, 0x36	; 54
    ab38:	05 c0       	rjmp	.+10     	; 0xab44 <init_enemy_level_hazard+0x78>
		case 6: game.enemies[i].anim.anims[0] = (char*) map_hazard_city; break;
    ab3a:	87 e0       	ldi	r24, 0x07	; 7
    ab3c:	96 e3       	ldi	r25, 0x36	; 54
    ab3e:	02 c0       	rjmp	.+4      	; 0xab44 <init_enemy_level_hazard+0x78>
		case 8: game.enemies[i].anim.anims[0] = (char*) map_hazard_desert; break;
		default: game.enemies[i].anim.anims[0] = (char*) map_hazard_ice; break;
    ab40:	80 e1       	ldi	r24, 0x10	; 16
    ab42:	96 e3       	ldi	r25, 0x36	; 54
    ab44:	90 93 2b 10 	sts	0x102B, r25
    ab48:	80 93 2a 10 	sts	0x102A, r24
	}
	game.enemies[i].shared.gravity = 0;
    ab4c:	23 e3       	ldi	r18, 0x33	; 51
    ab4e:	2a 9f       	mul	r18, r26
    ab50:	c0 01       	movw	r24, r0
    ab52:	2b 9f       	mul	r18, r27
    ab54:	90 0d       	add	r25, r0
    ab56:	11 24       	eor	r1, r1
    ab58:	8f 54       	subi	r24, 0x4F	; 79
    ab5a:	92 4f       	sbci	r25, 0xF2	; 242
    ab5c:	fc 01       	movw	r30, r24
    ab5e:	e4 5f       	subi	r30, 0xF4	; 244
    ab60:	fe 4f       	sbci	r31, 0xFE	; 254
    ab62:	10 82       	st	Z, r1
	game.enemies[i].shared.vy = HAZARD_SPEED;
    ab64:	32 97       	sbiw	r30, 0x02	; 2
    ab66:	2e e1       	ldi	r18, 0x1E	; 30
    ab68:	20 83       	st	Z, r18
	game.enemies[i].shared.vx = 0;
    ab6a:	31 96       	adiw	r30, 0x01	; 1
    ab6c:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    ab6e:	35 97       	sbiw	r30, 0x05	; 5
    ab70:	71 83       	std	Z+1, r23	; 0x01
    ab72:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    ab74:	32 96       	adiw	r30, 0x02	; 2
    ab76:	51 83       	std	Z+1, r21	; 0x01
    ab78:	40 83       	st	Z, r20
	
	game.enemies[i].origin_tile = y / 8;
    ab7a:	3d 96       	adiw	r30, 0x0d	; 13
    ab7c:	83 e0       	ldi	r24, 0x03	; 3
    ab7e:	56 95       	lsr	r21
    ab80:	47 95       	ror	r20
    ab82:	8a 95       	dec	r24
    ab84:	e1 f7       	brne	.-8      	; 0xab7e <init_enemy_level_hazard+0xb2>
    ab86:	40 83       	st	Z, r20
    ab88:	08 95       	ret

0000ab8a <load_eeprom>:
 *  0x01 = EEPROM_ERROR_INVALID_BLOCK
 *  0x02 = EEPROM_ERROR_FULL
 *  0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 *  0x04 = EEPROM_ERROR_NOT_FORMATTED
 */
{
    ab8a:	cf 93       	push	r28
    ab8c:	df 93       	push	r29
    ab8e:	ec 01       	movw	r28, r24
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
    ab90:	bc 01       	movw	r22, r24
    ab92:	88 81       	ld	r24, Y
    ab94:	99 81       	ldd	r25, Y+1	; 0x01
    ab96:	0e 94 71 41 	call	0x82e2	; 0x82e2 <EepromReadBlock>
	if (status == 0x03)
    ab9a:	83 30       	cpi	r24, 0x03	; 3
    ab9c:	29 f4       	brne	.+10     	; 0xaba8 <load_eeprom+0x1e>
	{
		status = EepromWriteBlock(block);
    ab9e:	ce 01       	movw	r24, r28
	}
}
    aba0:	df 91       	pop	r29
    aba2:	cf 91       	pop	r28
{
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
	if (status == 0x03)
	{
		status = EepromWriteBlock(block);
    aba4:	0c 94 27 41 	jmp	0x824e	; 0x824e <EepromWriteBlock>
	}
}
    aba8:	df 91       	pop	r29
    abaa:	cf 91       	pop	r28
    abac:	08 95       	ret

0000abae <clear_overlay>:
{
	SetTile(x, y, level_tile);
}

void clear_overlay(u8 overlayHeight)
{
    abae:	1f 93       	push	r17
    abb0:	cf 93       	push	r28
    abb2:	df 93       	push	r29
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
    abb4:	d0 e0       	ldi	r29, 0x00	; 0
    abb6:	10 e2       	ldi	r17, 0x20	; 32
    abb8:	18 0f       	add	r17, r24
{
	SetTile(x, y, level_tile);
}

void clear_overlay(u8 overlayHeight)
{
    abba:	c0 e2       	ldi	r28, 0x20	; 32
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
	{
		for(u8 y = 0; y < overlayHeight; y++)
    abbc:	c1 17       	cp	r28, r17
    abbe:	41 f0       	breq	.+16     	; 0xabd0 <clear_overlay+0x22>
		{
			SetTile(x, VRAM_TILES_V+y, 0);
    abc0:	40 e0       	ldi	r20, 0x00	; 0
    abc2:	50 e0       	ldi	r21, 0x00	; 0
    abc4:	6c 2f       	mov	r22, r28
    abc6:	8d 2f       	mov	r24, r29
    abc8:	0e 94 b6 3f 	call	0x7f6c	; 0x7f6c <SetTile>
    abcc:	cf 5f       	subi	r28, 0xFF	; 255
    abce:	f6 cf       	rjmp	.-20     	; 0xabbc <clear_overlay+0xe>
	SetTile(x, y, level_tile);
}

void clear_overlay(u8 overlayHeight)
{
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
    abd0:	df 5f       	subi	r29, 0xFF	; 255
    abd2:	dc 31       	cpi	r29, 0x1C	; 28
    abd4:	91 f7       	brne	.-28     	; 0xabba <clear_overlay+0xc>
		for(u8 y = 0; y < overlayHeight; y++)
		{
			SetTile(x, VRAM_TILES_V+y, 0);
		}
	}
}
    abd6:	df 91       	pop	r29
    abd8:	cf 91       	pop	r28
    abda:	1f 91       	pop	r17
    abdc:	08 95       	ret

0000abde <get_level_tile>:
{
	return 21;
}

u8 get_level_tile(char* level_data, u8 x, u8 y)
{
    abde:	dc 01       	movw	r26, r24
    abe0:	e6 2f       	mov	r30, r22
    abe2:	84 2f       	mov	r24, r20
	u16 mega_tile_offset = 0;
	u8 map_x = 0;
	u8 map_y = 0;
	
	map_x = x / MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH;
	map_y = y / MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
    abe4:	25 e0       	ldi	r18, 0x05	; 5
    abe6:	62 2f       	mov	r22, r18
    abe8:	0e 94 b2 6b 	call	0xd764	; 0xd764 <__udivmodqi4>
    abec:	58 2f       	mov	r21, r24
    abee:	39 2f       	mov	r19, r25
	mega_tile_offset = (y % MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT)*MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH + (x % MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH);
	mega_tile_index = pgm_read_byte(2+(&level_data[map_y*game.raw_level_width + map_x]));
    abf0:	40 91 c7 0d 	lds	r20, 0x0DC7
	u16 mega_tile_index = 0;
	u16 mega_tile_offset = 0;
	u8 map_x = 0;
	u8 map_y = 0;
	
	map_x = x / MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH;
    abf4:	8e 2f       	mov	r24, r30
    abf6:	0e 94 b2 6b 	call	0xd764	; 0xd764 <__udivmodqi4>
	map_y = y / MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
	mega_tile_offset = (y % MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT)*MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH + (x % MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH);
	mega_tile_index = pgm_read_byte(2+(&level_data[map_y*game.raw_level_width + map_x]));
    abfa:	e8 2f       	mov	r30, r24
    abfc:	f0 e0       	ldi	r31, 0x00	; 0
    abfe:	54 9f       	mul	r21, r20
    ac00:	e0 0d       	add	r30, r0
    ac02:	f1 1d       	adc	r31, r1
    ac04:	11 24       	eor	r1, r1
    ac06:	32 96       	adiw	r30, 0x02	; 2
    ac08:	ea 0f       	add	r30, r26
    ac0a:	fb 1f       	adc	r31, r27
    ac0c:	84 91       	lpm	r24, Z
	u8 map_x = 0;
	u8 map_y = 0;
	
	map_x = x / MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH;
	map_y = y / MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
	mega_tile_offset = (y % MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT)*MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH + (x % MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH);
    ac0e:	e9 2f       	mov	r30, r25
    ac10:	f0 e0       	ldi	r31, 0x00	; 0
    ac12:	95 e0       	ldi	r25, 0x05	; 5
    ac14:	39 9f       	mul	r19, r25
    ac16:	e0 0d       	add	r30, r0
    ac18:	f1 1d       	adc	r31, r1
    ac1a:	11 24       	eor	r1, r1
	mega_tile_index = pgm_read_byte(2+(&level_data[map_y*game.raw_level_width + map_x]));
	mega_tile_index *= MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH*MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
	return pgm_read_byte(&map_level_mega_tiles[mega_tile_index+mega_tile_offset]);
    ac1c:	99 e1       	ldi	r25, 0x19	; 25
    ac1e:	89 9f       	mul	r24, r25
    ac20:	e0 0d       	add	r30, r0
    ac22:	f1 1d       	adc	r31, r1
    ac24:	11 24       	eor	r1, r1
    ac26:	e0 5c       	subi	r30, 0xC0	; 192
    ac28:	ff 49       	sbci	r31, 0x9F	; 159
    ac2a:	84 91       	lpm	r24, Z
}
    ac2c:	08 95       	ret

0000ac2e <render_camera_view>:

void render_camera_view()
{
    ac2e:	7f 92       	push	r7
    ac30:	8f 92       	push	r8
    ac32:	9f 92       	push	r9
    ac34:	af 92       	push	r10
    ac36:	bf 92       	push	r11
    ac38:	cf 92       	push	r12
    ac3a:	df 92       	push	r13
    ac3c:	ef 92       	push	r14
    ac3e:	ff 92       	push	r15
    ac40:	0f 93       	push	r16
    ac42:	1f 93       	push	r17
    ac44:	cf 93       	push	r28
    ac46:	df 93       	push	r29
	u8 level_tile;
	u8 camara_x_tile = game.camera_x/8;
    ac48:	c0 91 b1 0d 	lds	r28, 0x0DB1
    ac4c:	d0 91 b2 0d 	lds	r29, 0x0DB2
    ac50:	83 e0       	ldi	r24, 0x03	; 3
    ac52:	d6 95       	lsr	r29
    ac54:	c7 95       	ror	r28
    ac56:	8a 95       	dec	r24
    ac58:	e1 f7       	brne	.-8      	; 0xac52 <render_camera_view+0x24>
    ac5a:	7c 2e       	mov	r7, r28
	u8 camera_y_tile = game.camera_y/8;
    ac5c:	00 91 b9 0d 	lds	r16, 0x0DB9
    ac60:	06 95       	lsr	r16
    ac62:	06 95       	lsr	r16
    ac64:	06 95       	lsr	r16
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    ac66:	dd 27       	eor	r29, r29
    ac68:	7e 01       	movw	r14, r28
    ac6a:	4c e1       	ldi	r20, 0x1C	; 28
    ac6c:	e4 0e       	add	r14, r20
    ac6e:	f1 1c       	adc	r15, r1
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    ac70:	10 e0       	ldi	r17, 0x00	; 0
    ac72:	68 01       	movw	r12, r16
    ac74:	89 e1       	ldi	r24, 0x19	; 25
    ac76:	c8 0e       	add	r12, r24
    ac78:	d1 1c       	adc	r13, r1
		{
			level_tile = get_level_tile(game.current_level, x, y);
			render_level_tile(level_tile, (Screen.scrollX / 8 + x - camara_x_tile) % 32, (Screen.scrollY / 8 + y - camera_y_tile) % 30);
    ac7a:	9e e1       	ldi	r25, 0x1E	; 30
    ac7c:	a9 2e       	mov	r10, r25
    ac7e:	b1 2c       	mov	r11, r1
{
	u8 level_tile;
	u8 camara_x_tile = game.camera_x/8;
	u8 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    ac80:	ec 16       	cp	r14, r28
    ac82:	fd 06       	cpc	r15, r29
    ac84:	70 f1       	brcs	.+92     	; 0xace2 <render_camera_view+0xb4>
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    ac86:	48 01       	movw	r8, r16
    ac88:	c8 14       	cp	r12, r8
    ac8a:	d9 04       	cpc	r13, r9
    ac8c:	40 f1       	brcs	.+80     	; 0xacde <render_camera_view+0xb0>
		{
			level_tile = get_level_tile(game.current_level, x, y);
    ac8e:	48 2d       	mov	r20, r8
    ac90:	6c 2f       	mov	r22, r28
    ac92:	80 91 b6 0f 	lds	r24, 0x0FB6
    ac96:	90 91 b7 0f 	lds	r25, 0x0FB7
    ac9a:	0e 94 ef 55 	call	0xabde	; 0xabde <get_level_tile>
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    ac9e:	28 2f       	mov	r18, r24
    aca0:	30 e0       	ldi	r19, 0x00	; 0
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
		{
			level_tile = get_level_tile(game.current_level, x, y);
			render_level_tile(level_tile, (Screen.scrollX / 8 + x - camara_x_tile) % 32, (Screen.scrollY / 8 + y - camera_y_tile) % 30);
    aca2:	80 91 b3 0c 	lds	r24, 0x0CB3
    aca6:	86 95       	lsr	r24
    aca8:	86 95       	lsr	r24
    acaa:	86 95       	lsr	r24
    acac:	90 e0       	ldi	r25, 0x00	; 0
    acae:	80 1b       	sub	r24, r16
    acb0:	91 0b       	sbc	r25, r17
    acb2:	88 0d       	add	r24, r8
    acb4:	99 1d       	adc	r25, r9
    acb6:	b5 01       	movw	r22, r10
    acb8:	0e 94 cc 6b 	call	0xd798	; 0xd798 <__udivmodhi4>
    acbc:	90 91 b2 0c 	lds	r25, 0x0CB2
    acc0:	96 95       	lsr	r25
    acc2:	96 95       	lsr	r25
    acc4:	96 95       	lsr	r25
    acc6:	97 19       	sub	r25, r7
    acc8:	9c 0f       	add	r25, r28
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    acca:	a9 01       	movw	r20, r18
    accc:	68 2f       	mov	r22, r24
    acce:	89 2f       	mov	r24, r25
    acd0:	8f 71       	andi	r24, 0x1F	; 31
    acd2:	0e 94 b6 3f 	call	0x7f6c	; 0x7f6c <SetTile>
	u8 camara_x_tile = game.camera_x/8;
	u8 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    acd6:	8f ef       	ldi	r24, 0xFF	; 255
    acd8:	88 1a       	sub	r8, r24
    acda:	98 0a       	sbc	r9, r24
    acdc:	d5 cf       	rjmp	.-86     	; 0xac88 <render_camera_view+0x5a>
{
	u8 level_tile;
	u8 camara_x_tile = game.camera_x/8;
	u8 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    acde:	21 96       	adiw	r28, 0x01	; 1
    ace0:	cf cf       	rjmp	.-98     	; 0xac80 <render_camera_view+0x52>
		{
			level_tile = get_level_tile(game.current_level, x, y);
			render_level_tile(level_tile, (Screen.scrollX / 8 + x - camara_x_tile) % 32, (Screen.scrollY / 8 + y - camera_y_tile) % 30);
		}
	}
}
    ace2:	df 91       	pop	r29
    ace4:	cf 91       	pop	r28
    ace6:	1f 91       	pop	r17
    ace8:	0f 91       	pop	r16
    acea:	ff 90       	pop	r15
    acec:	ef 90       	pop	r14
    acee:	df 90       	pop	r13
    acf0:	cf 90       	pop	r12
    acf2:	bf 90       	pop	r11
    acf4:	af 90       	pop	r10
    acf6:	9f 90       	pop	r9
    acf8:	8f 90       	pop	r8
    acfa:	7f 90       	pop	r7
    acfc:	08 95       	ret

0000acfe <spawn_enemy>:

void spawn_enemy(u16 x, u16 y, u8 level_hazard)
{
    acfe:	0f 93       	push	r16
    ad00:	1f 93       	push	r17
    ad02:	cf 93       	push	r28
    ad04:	df 93       	push	r29
    ad06:	00 d0       	rcall	.+0      	; 0xad08 <spawn_enemy+0xa>
    ad08:	00 d0       	rcall	.+0      	; 0xad0a <spawn_enemy+0xc>
    ad0a:	cd b7       	in	r28, 0x3d	; 61
    ad0c:	de b7       	in	r29, 0x3e	; 62
	if (game.camera_x < ENEMY_SPAWN_CUTOFF)
    ad0e:	20 91 b1 0d 	lds	r18, 0x0DB1
    ad12:	30 91 b2 0d 	lds	r19, 0x0DB2
    ad16:	28 3c       	cpi	r18, 0xC8	; 200
    ad18:	35 40       	sbci	r19, 0x05	; 5
    ad1a:	98 f5       	brcc	.+102    	; 0xad82 <spawn_enemy+0x84>
    ad1c:	21 eb       	ldi	r18, 0xB1	; 177
    ad1e:	3d e0       	ldi	r19, 0x0D	; 13
    ad20:	10 e0       	ldi	r17, 0x00	; 0
    ad22:	f9 01       	movw	r30, r18
    ad24:	e3 5f       	subi	r30, 0xF3	; 243
    ad26:	fe 4f       	sbci	r31, 0xFE	; 254
	{
		for (u8 i = 0; i < MAX_ENEMIES; i++)
		{
			if (!game.enemies[i].active)
    ad28:	50 81       	ld	r21, Z
    ad2a:	51 11       	cpse	r21, r1
    ad2c:	25 c0       	rjmp	.+74     	; 0xad78 <spawn_enemy+0x7a>
    ad2e:	73 96       	adiw	r30, 0x13	; 19
			{
				for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
				{
					if (!game.enemies[i].shot[j].active)
    ad30:	50 81       	ld	r21, Z
    ad32:	51 11       	cpse	r21, r1
    ad34:	21 c0       	rjmp	.+66     	; 0xad78 <spawn_enemy+0x7a>
    ad36:	04 2f       	mov	r16, r20
    ad38:	ab 01       	movw	r20, r22
    ad3a:	bc 01       	movw	r22, r24
					{
						if (is_space())
    ad3c:	4b 83       	std	Y+3, r20	; 0x03
    ad3e:	5c 83       	std	Y+4, r21	; 0x04
    ad40:	89 83       	std	Y+1, r24	; 0x01
    ad42:	7a 83       	std	Y+2, r23	; 0x02
    ad44:	0e 94 37 51 	call	0xa26e	; 0xa26e <is_space>
    ad48:	4b 81       	ldd	r20, Y+3	; 0x03
    ad4a:	5c 81       	ldd	r21, Y+4	; 0x04
    ad4c:	69 81       	ldd	r22, Y+1	; 0x01
    ad4e:	7a 81       	ldd	r23, Y+2	; 0x02
    ad50:	88 23       	and	r24, r24
    ad52:	21 f0       	breq	.+8      	; 0xad5c <spawn_enemy+0x5e>
						{
							init_enemy_shark(i, x, y);
    ad54:	81 2f       	mov	r24, r17
    ad56:	0e 94 2e 55 	call	0xaa5c	; 0xaa5c <init_enemy_shark>
    ad5a:	08 c0       	rjmp	.+16     	; 0xad6c <spawn_enemy+0x6e>
						}
						else if (!level_hazard)
						{
							init_enemy_spider(i, x, y);
    ad5c:	81 2f       	mov	r24, r17
					{
						if (is_space())
						{
							init_enemy_shark(i, x, y);
						}
						else if (!level_hazard)
    ad5e:	01 11       	cpse	r16, r1
    ad60:	03 c0       	rjmp	.+6      	; 0xad68 <spawn_enemy+0x6a>
						{
							init_enemy_spider(i, x, y);
    ad62:	0e 94 ed 54 	call	0xa9da	; 0xa9da <init_enemy_spider>
    ad66:	02 c0       	rjmp	.+4      	; 0xad6c <spawn_enemy+0x6e>
						}
						else
						{
							init_enemy_level_hazard(i, x, y);
    ad68:	0e 94 66 55 	call	0xaacc	; 0xaacc <init_enemy_level_hazard>
						}
						game.active_enemies++;
    ad6c:	80 91 cc 0d 	lds	r24, 0x0DCC
    ad70:	8f 5f       	subi	r24, 0xFF	; 255
    ad72:	80 93 cc 0d 	sts	0x0DCC, r24
    ad76:	05 c0       	rjmp	.+10     	; 0xad82 <spawn_enemy+0x84>

void spawn_enemy(u16 x, u16 y, u8 level_hazard)
{
	if (game.camera_x < ENEMY_SPAWN_CUTOFF)
	{
		for (u8 i = 0; i < MAX_ENEMIES; i++)
    ad78:	1f 5f       	subi	r17, 0xFF	; 255
    ad7a:	2d 5c       	subi	r18, 0xCD	; 205
    ad7c:	3f 4f       	sbci	r19, 0xFF	; 255
    ad7e:	15 30       	cpi	r17, 0x05	; 5
    ad80:	81 f6       	brne	.-96     	; 0xad22 <spawn_enemy+0x24>
					}
				}
			}
		}
	}
}
    ad82:	0f 90       	pop	r0
    ad84:	0f 90       	pop	r0
    ad86:	0f 90       	pop	r0
    ad88:	0f 90       	pop	r0
    ad8a:	df 91       	pop	r29
    ad8c:	cf 91       	pop	r28
    ad8e:	1f 91       	pop	r17
    ad90:	0f 91       	pop	r16
    ad92:	08 95       	ret

0000ad94 <solid_or_hazard_tile>:
	return 0;
}

u8 solid_or_hazard_tile(u8 level_tile)
{
	if (level_tile >= 1 && level_tile <= 17)
    ad94:	9f ef       	ldi	r25, 0xFF	; 255
    ad96:	98 0f       	add	r25, r24
    ad98:	91 31       	cpi	r25, 0x11	; 17
    ad9a:	28 f0       	brcs	.+10     	; 0xada6 <solid_or_hazard_tile+0x12>
	{
		return 1;
	}
	if (level_tile >= 18 && level_tile <= 27)
    ad9c:	82 51       	subi	r24, 0x12	; 18
    ad9e:	8a 30       	cpi	r24, 0x0A	; 10
    ada0:	20 f0       	brcs	.+8      	; 0xadaa <solid_or_hazard_tile+0x16>
	{
		return 2;
	}
	return 0;
    ada2:	80 e0       	ldi	r24, 0x00	; 0
    ada4:	08 95       	ret

u8 solid_or_hazard_tile(u8 level_tile)
{
	if (level_tile >= 1 && level_tile <= 17)
	{
		return 1;
    ada6:	81 e0       	ldi	r24, 0x01	; 1
    ada8:	08 95       	ret
	}
	if (level_tile >= 18 && level_tile <= 27)
	{
		return 2;
    adaa:	82 e0       	ldi	r24, 0x02	; 2
	}
	return 0;
}
    adac:	08 95       	ret

0000adae <append_tile_column>:
	}
	return 0;
}

void append_tile_column()
{
    adae:	af 92       	push	r10
    adb0:	bf 92       	push	r11
    adb2:	cf 92       	push	r12
    adb4:	df 92       	push	r13
    adb6:	ef 92       	push	r14
    adb8:	ff 92       	push	r15
    adba:	0f 93       	push	r16
    adbc:	1f 93       	push	r17
    adbe:	cf 93       	push	r28
    adc0:	df 93       	push	r29
	u8 level_tile;
	u8 rndom = LBRandom(1, CAMERA_HEIGHT-1)*8;
    adc2:	68 e1       	ldi	r22, 0x18	; 24
    adc4:	81 e0       	ldi	r24, 0x01	; 1
    adc6:	0e 94 4e 50 	call	0xa09c	; 0xa09c <LBRandom>
    adca:	f8 2e       	mov	r15, r24
	u8 hazard_tile_index = 0;
	u8 solid_tile_index = 0;
	u8 do_spawn = 0;
	
	game.column_count++;
    adcc:	80 91 c2 0d 	lds	r24, 0x0DC2
    add0:	8f 5f       	subi	r24, 0xFF	; 255
    add2:	80 93 c2 0d 	sts	0x0DC2, r24
	if (game.column_count % game.spawn_rate == game.spawn_rate - 1 && game.active_enemies < MAX_ENEMIES)
    add6:	20 91 cd 0d 	lds	r18, 0x0DCD
    adda:	62 2f       	mov	r22, r18
    addc:	0e 94 b2 6b 	call	0xd764	; 0xd764 <__udivmodqi4>
    ade0:	89 2f       	mov	r24, r25
    ade2:	90 e0       	ldi	r25, 0x00	; 0
    ade4:	30 e0       	ldi	r19, 0x00	; 0
    ade6:	21 50       	subi	r18, 0x01	; 1
    ade8:	31 09       	sbc	r19, r1
    adea:	82 17       	cp	r24, r18
    adec:	93 07       	cpc	r25, r19
    adee:	31 f4       	brne	.+12     	; 0xadfc <append_tile_column+0x4e>
    adf0:	bb 24       	eor	r11, r11
    adf2:	b3 94       	inc	r11
    adf4:	80 91 cc 0d 	lds	r24, 0x0DCC
    adf8:	85 30       	cpi	r24, 0x05	; 5
    adfa:	08 f0       	brcs	.+2      	; 0xadfe <append_tile_column+0x50>
{
	u8 level_tile;
	u8 rndom = LBRandom(1, CAMERA_HEIGHT-1)*8;
	u8 hazard_tile_index = 0;
	u8 solid_tile_index = 0;
	u8 do_spawn = 0;
    adfc:	b1 2c       	mov	r11, r1
    adfe:	00 e0       	ldi	r16, 0x00	; 0
    ae00:	10 e0       	ldi	r17, 0x00	; 0
void append_tile_column()
{
	u8 level_tile;
	u8 rndom = LBRandom(1, CAMERA_HEIGHT-1)*8;
	u8 hazard_tile_index = 0;
	u8 solid_tile_index = 0;
    ae02:	d0 e0       	ldi	r29, 0x00	; 0

void append_tile_column()
{
	u8 level_tile;
	u8 rndom = LBRandom(1, CAMERA_HEIGHT-1)*8;
	u8 hazard_tile_index = 0;
    ae04:	c0 e0       	ldi	r28, 0x00	; 0
		do_spawn = 1;
	}
    for (u8 y = 0; y < CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
    ae06:	2e e1       	ldi	r18, 0x1E	; 30
    ae08:	c2 2e       	mov	r12, r18
    ae0a:	d1 2c       	mov	r13, r1
    ae0c:	a0 2e       	mov	r10, r16
	{
		do_spawn = 1;
	}
    for (u8 y = 0; y < CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
    ae0e:	40 91 b9 0d 	lds	r20, 0x0DB9
    ae12:	46 95       	lsr	r20
    ae14:	46 95       	lsr	r20
    ae16:	46 95       	lsr	r20
    ae18:	40 0f       	add	r20, r16
    ae1a:	60 91 ba 0d 	lds	r22, 0x0DBA
    ae1e:	80 91 b6 0f 	lds	r24, 0x0FB6
    ae22:	90 91 b7 0f 	lds	r25, 0x0FB7
    ae26:	0e 94 ef 55 	call	0xabde	; 0xabde <get_level_tile>
    ae2a:	e8 2e       	mov	r14, r24
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    ae2c:	28 2f       	mov	r18, r24
    ae2e:	30 e0       	ldi	r19, 0x00	; 0
		do_spawn = 1;
	}
    for (u8 y = 0; y < CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
    ae30:	80 91 b3 0c 	lds	r24, 0x0CB3
    ae34:	86 95       	lsr	r24
    ae36:	86 95       	lsr	r24
    ae38:	86 95       	lsr	r24
    ae3a:	a8 01       	movw	r20, r16
    ae3c:	48 0f       	add	r20, r24
    ae3e:	51 1d       	adc	r21, r1
    ae40:	ca 01       	movw	r24, r20
    ae42:	b6 01       	movw	r22, r12
    ae44:	0e 94 e0 6b 	call	0xd7c0	; 0xd7c0 <__divmodhi4>
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    ae48:	a9 01       	movw	r20, r18
    ae4a:	68 2f       	mov	r22, r24
    ae4c:	80 91 be 0d 	lds	r24, 0x0DBE
    ae50:	0e 94 b6 3f 	call	0x7f6c	; 0x7f6c <SetTile>
	}
    for (u8 y = 0; y < CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
		if (do_spawn && y > 0)
    ae54:	bb 20       	and	r11, r11
    ae56:	81 f0       	breq	.+32     	; 0xae78 <append_tile_column+0xca>
    ae58:	01 15       	cp	r16, r1
    ae5a:	11 05       	cpc	r17, r1
    ae5c:	69 f0       	breq	.+26     	; 0xae78 <append_tile_column+0xca>
	return 0;
}

u8 hazard_projectile_tile(u8 level_tile)
{
	if (level_tile >= 18 && level_tile <= 22)
    ae5e:	8e ee       	ldi	r24, 0xEE	; 238
    ae60:	8e 0d       	add	r24, r14
    ae62:	85 30       	cpi	r24, 0x05	; 5
    ae64:	30 f0       	brcs	.+12     	; 0xae72 <append_tile_column+0xc4>
	}
}

u8 solid_tile(u8 level_tile)
{
	if (level_tile >= 1 && level_tile <= 17)
    ae66:	8f ef       	ldi	r24, 0xFF	; 255
    ae68:	8e 0d       	add	r24, r14
    ae6a:	81 31       	cpi	r24, 0x11	; 17
    ae6c:	08 f4       	brcc	.+2      	; 0xae70 <append_tile_column+0xc2>
    ae6e:	60 c0       	rjmp	.+192    	; 0xaf30 <append_tile_column+0x182>
    ae70:	03 c0       	rjmp	.+6      	; 0xae78 <append_tile_column+0xca>
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
		if (do_spawn && y > 0)
		{
			if (hazard_projectile_tile(level_tile) && hazard_tile_index == 0)
    ae72:	c1 11       	cpse	r28, r1
    ae74:	f8 cf       	rjmp	.-16     	; 0xae66 <append_tile_column+0xb8>
    ae76:	c0 2f       	mov	r28, r16
    ae78:	0f 5f       	subi	r16, 0xFF	; 255
    ae7a:	1f 4f       	sbci	r17, 0xFF	; 255
	game.column_count++;
	if (game.column_count % game.spawn_rate == game.spawn_rate - 1 && game.active_enemies < MAX_ENEMIES)
	{
		do_spawn = 1;
	}
    for (u8 y = 0; y < CAMERA_HEIGHT; y++)
    ae7c:	09 31       	cpi	r16, 0x19	; 25
    ae7e:	11 05       	cpc	r17, r1
    ae80:	29 f6       	brne	.-118    	; 0xae0c <append_tile_column+0x5e>
			{
				solid_tile_index = y;
			}
		}
    }
	if (do_spawn && is_space())
    ae82:	bb 20       	and	r11, r11
    ae84:	51 f0       	breq	.+20     	; 0xae9a <append_tile_column+0xec>
    ae86:	0e 94 37 51 	call	0xa26e	; 0xa26e <is_space>
    ae8a:	88 23       	and	r24, r24
    ae8c:	31 f0       	breq	.+12     	; 0xae9a <append_tile_column+0xec>
}

void append_tile_column()
{
	u8 level_tile;
	u8 rndom = LBRandom(1, CAMERA_HEIGHT-1)*8;
    ae8e:	ff 0c       	add	r15, r15
    ae90:	ff 0c       	add	r15, r15
    ae92:	ff 0c       	add	r15, r15
			}
		}
    }
	if (do_spawn && is_space())
	{
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, rndom, 0);
    ae94:	6f 2d       	mov	r22, r15
    ae96:	70 e0       	ldi	r23, 0x00	; 0
    ae98:	32 c0       	rjmp	.+100    	; 0xaefe <append_tile_column+0x150>
	}
	else if (hazard_tile_index > 0 && game.current_level_index == 2)
    ae9a:	cc 23       	and	r28, r28
    ae9c:	f1 f0       	breq	.+60     	; 0xaeda <append_tile_column+0x12c>
    ae9e:	80 91 c6 0d 	lds	r24, 0x0DC6
    aea2:	90 91 b9 0d 	lds	r25, 0x0DB9
    aea6:	20 91 b1 0d 	lds	r18, 0x0DB1
    aeaa:	30 91 b2 0d 	lds	r19, 0x0DB2
    aeae:	6c 2f       	mov	r22, r28
    aeb0:	70 e0       	ldi	r23, 0x00	; 0
	{
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, (game.camera_y / 8 + hazard_tile_index - 1)*8, 1);
    aeb2:	96 95       	lsr	r25
    aeb4:	96 95       	lsr	r25
    aeb6:	96 95       	lsr	r25
    aeb8:	69 0f       	add	r22, r25
    aeba:	71 1d       	adc	r23, r1
    }
	if (do_spawn && is_space())
	{
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, rndom, 0);
	}
	else if (hazard_tile_index > 0 && game.current_level_index == 2)
    aebc:	82 30       	cpi	r24, 0x02	; 2
    aebe:	19 f4       	brne	.+6      	; 0xaec6 <append_tile_column+0x118>
	{
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, (game.camera_y / 8 + hazard_tile_index - 1)*8, 1);
    aec0:	61 50       	subi	r22, 0x01	; 1
    aec2:	71 09       	sbc	r23, r1
    aec4:	02 c0       	rjmp	.+4      	; 0xaeca <append_tile_column+0x11c>
	}
	else if (hazard_tile_index > 0)
	{
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, (game.camera_y / 8 + hazard_tile_index + 1)*8, 1);
    aec6:	6f 5f       	subi	r22, 0xFF	; 255
    aec8:	7f 4f       	sbci	r23, 0xFF	; 255
    aeca:	93 e0       	ldi	r25, 0x03	; 3
    aecc:	66 0f       	add	r22, r22
    aece:	77 1f       	adc	r23, r23
    aed0:	9a 95       	dec	r25
    aed2:	e1 f7       	brne	.-8      	; 0xaecc <append_tile_column+0x11e>
    aed4:	41 e0       	ldi	r20, 0x01	; 1
    aed6:	c9 01       	movw	r24, r18
    aed8:	17 c0       	rjmp	.+46     	; 0xaf08 <append_tile_column+0x15a>
	}
	else if (solid_tile_index > 0) {
    aeda:	dd 23       	and	r29, r29
    aedc:	c9 f0       	breq	.+50     	; 0xaf10 <append_tile_column+0x162>
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, (game.camera_y / 8 + solid_tile_index - 1)*8, 0);
    aede:	80 91 b9 0d 	lds	r24, 0x0DB9
    aee2:	86 95       	lsr	r24
    aee4:	86 95       	lsr	r24
    aee6:	86 95       	lsr	r24
    aee8:	6d 2f       	mov	r22, r29
    aeea:	70 e0       	ldi	r23, 0x00	; 0
    aeec:	68 0f       	add	r22, r24
    aeee:	71 1d       	adc	r23, r1
    aef0:	61 50       	subi	r22, 0x01	; 1
    aef2:	71 09       	sbc	r23, r1
    aef4:	83 e0       	ldi	r24, 0x03	; 3
    aef6:	66 0f       	add	r22, r22
    aef8:	77 1f       	adc	r23, r23
    aefa:	8a 95       	dec	r24
    aefc:	e1 f7       	brne	.-8      	; 0xaef6 <append_tile_column+0x148>
    aefe:	80 91 b1 0d 	lds	r24, 0x0DB1
    af02:	90 91 b2 0d 	lds	r25, 0x0DB2
    af06:	40 e0       	ldi	r20, 0x00	; 0
    af08:	80 52       	subi	r24, 0x20	; 32
    af0a:	9f 4f       	sbci	r25, 0xFF	; 255
    af0c:	0e 94 7f 56 	call	0xacfe	; 0xacfe <spawn_enemy>
	}
	
    game.scroll_src_x++;
    af10:	80 91 ba 0d 	lds	r24, 0x0DBA
    af14:	8f 5f       	subi	r24, 0xFF	; 255
    af16:	80 93 ba 0d 	sts	0x0DBA, r24
	game.scroll_dest_x++;
    af1a:	80 91 be 0d 	lds	r24, 0x0DBE
    af1e:	8f 5f       	subi	r24, 0xFF	; 255
    if(game.scroll_dest_x>=32)game.scroll_dest_x=0;
    af20:	80 32       	cpi	r24, 0x20	; 32
    af22:	18 f4       	brcc	.+6      	; 0xaf2a <append_tile_column+0x17c>
	else if (solid_tile_index > 0) {
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, (game.camera_y / 8 + solid_tile_index - 1)*8, 0);
	}
	
    game.scroll_src_x++;
	game.scroll_dest_x++;
    af24:	80 93 be 0d 	sts	0x0DBE, r24
    af28:	07 c0       	rjmp	.+14     	; 0xaf38 <append_tile_column+0x18a>
    if(game.scroll_dest_x>=32)game.scroll_dest_x=0;
    af2a:	10 92 be 0d 	sts	0x0DBE, r1
    af2e:	04 c0       	rjmp	.+8      	; 0xaf38 <append_tile_column+0x18a>
		{
			if (hazard_projectile_tile(level_tile) && hazard_tile_index == 0)
			{
				hazard_tile_index = y;
			}
			else if (solid_tile(level_tile) && solid_tile_index == 0)
    af30:	d1 11       	cpse	r29, r1
    af32:	a2 cf       	rjmp	.-188    	; 0xae78 <append_tile_column+0xca>
    af34:	da 2d       	mov	r29, r10
    af36:	a0 cf       	rjmp	.-192    	; 0xae78 <append_tile_column+0xca>
	}
	
    game.scroll_src_x++;
	game.scroll_dest_x++;
    if(game.scroll_dest_x>=32)game.scroll_dest_x=0;
}
    af38:	df 91       	pop	r29
    af3a:	cf 91       	pop	r28
    af3c:	1f 91       	pop	r17
    af3e:	0f 91       	pop	r16
    af40:	ff 90       	pop	r15
    af42:	ef 90       	pop	r14
    af44:	df 90       	pop	r13
    af46:	cf 90       	pop	r12
    af48:	bf 90       	pop	r11
    af4a:	af 90       	pop	r10
    af4c:	08 95       	ret

0000af4e <move_camera_x>:

void move_camera_x()
{	
	game.camera_x++;
    af4e:	80 91 b1 0d 	lds	r24, 0x0DB1
    af52:	90 91 b2 0d 	lds	r25, 0x0DB2
    af56:	01 96       	adiw	r24, 0x01	; 1
    af58:	90 93 b2 0d 	sts	0x0DB2, r25
    af5c:	80 93 b1 0d 	sts	0x0DB1, r24
	Scroll(1,0);
    af60:	60 e0       	ldi	r22, 0x00	; 0
    af62:	81 e0       	ldi	r24, 0x01	; 1
    af64:	0e 94 a8 4d 	call	0x9b50	; 0x9b50 <Scroll>
	if (++game.scroll_x == 8)
    af68:	80 91 bc 0d 	lds	r24, 0x0DBC
    af6c:	8f 5f       	subi	r24, 0xFF	; 255
    af6e:	88 30       	cpi	r24, 0x08	; 8
    af70:	19 f0       	breq	.+6      	; 0xaf78 <move_camera_x+0x2a>
    af72:	80 93 bc 0d 	sts	0x0DBC, r24
    af76:	08 95       	ret
	{
		game.scroll_x = 0;
    af78:	10 92 bc 0d 	sts	0x0DBC, r1
		append_tile_column();
    af7c:	0c 94 d7 56 	jmp	0xadae	; 0xadae <append_tile_column>

0000af80 <map_ship>:
	}
}

void map_ship()
{
	game.player.run.anim_count = 2;
    af80:	82 e0       	ldi	r24, 0x02	; 2
    af82:	80 93 1d 0e 	sts	0x0E1D, r24
	game.player.run.frames_per_anim = EXPLOSION_FRAME_COUNT;
    af86:	85 e0       	ldi	r24, 0x05	; 5
    af88:	80 93 1e 0e 	sts	0x0E1E, r24
	game.player.run.anims = run_anim;
    af8c:	e0 e1       	ldi	r30, 0x10	; 16
    af8e:	f0 e1       	ldi	r31, 0x10	; 16
    af90:	f0 93 23 0e 	sts	0x0E23, r31
    af94:	e0 93 22 0e 	sts	0x0E22, r30
	game.player.run.anims[0] = (char*) map_hero_ship_large_0;
    af98:	84 e7       	ldi	r24, 0x74	; 116
    af9a:	96 e3       	ldi	r25, 0x36	; 54
    af9c:	91 83       	std	Z+1, r25	; 0x01
    af9e:	80 83       	st	Z, r24
	game.player.run.anims[1] = (char*) map_hero_ship_large_1;
    afa0:	8a e6       	ldi	r24, 0x6A	; 106
    afa2:	96 e3       	ldi	r25, 0x36	; 54
    afa4:	93 83       	std	Z+3, r25	; 0x03
    afa6:	82 83       	std	Z+2, r24	; 0x02
    afa8:	08 95       	ret

0000afaa <map_level_info>:
}

void map_level_info(char* level)
{
	game.current_level = level;
    afaa:	a1 eb       	ldi	r26, 0xB1	; 177
    afac:	bd e0       	ldi	r27, 0x0D	; 13
    afae:	90 93 b7 0f 	sts	0x0FB7, r25
    afb2:	80 93 b6 0f 	sts	0x0FB6, r24
	
	game.raw_level_width = pgm_read_byte(&level[0]);
    afb6:	fc 01       	movw	r30, r24
    afb8:	24 91       	lpm	r18, Z
    afba:	56 96       	adiw	r26, 0x16	; 22
    afbc:	2c 93       	st	X, r18
    afbe:	56 97       	sbiw	r26, 0x16	; 22
	game.raw_level_height = pgm_read_byte(&level[1]);
    afc0:	9c 01       	movw	r18, r24
    afc2:	2f 5f       	subi	r18, 0xFF	; 255
    afc4:	3f 4f       	sbci	r19, 0xFF	; 255
    afc6:	f9 01       	movw	r30, r18
    afc8:	44 91       	lpm	r20, Z
    afca:	57 96       	adiw	r26, 0x17	; 23
    afcc:	4c 93       	st	X, r20
    afce:	57 97       	sbiw	r26, 0x17	; 23
	game.level_width = pgm_read_byte(&level[0])*MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH;
    afd0:	fc 01       	movw	r30, r24
    afd2:	84 91       	lpm	r24, Z
    afd4:	98 2f       	mov	r25, r24
    afd6:	99 0f       	add	r25, r25
    afd8:	99 0f       	add	r25, r25
    afda:	89 0f       	add	r24, r25
    afdc:	1f 96       	adiw	r26, 0x0f	; 15
    afde:	8c 93       	st	X, r24
    afe0:	1f 97       	sbiw	r26, 0x0f	; 15
	game.level_height = pgm_read_byte(&level[1])*MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
    afe2:	f9 01       	movw	r30, r18
    afe4:	24 91       	lpm	r18, Z
    afe6:	82 2f       	mov	r24, r18
    afe8:	88 0f       	add	r24, r24
    afea:	88 0f       	add	r24, r24
    afec:	28 0f       	add	r18, r24
    afee:	50 96       	adiw	r26, 0x10	; 16
    aff0:	2c 93       	st	X, r18
    aff2:	08 95       	ret

0000aff4 <on_solid_ground>:
		}
	}
}

char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
    aff4:	cf 92       	push	r12
    aff6:	df 92       	push	r13
    aff8:	ef 92       	push	r14
    affa:	ff 92       	push	r15
    affc:	0f 93       	push	r16
    affe:	1f 93       	push	r17
    b000:	cf 93       	push	r28
    b002:	df 93       	push	r29
    b004:	7c 01       	movw	r14, r24
    b006:	d6 2f       	mov	r29, r22
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
    b008:	88 e0       	ldi	r24, 0x08	; 8
    b00a:	48 9f       	mul	r20, r24
    b00c:	80 01       	movw	r16, r0
    b00e:	11 24       	eor	r1, r1
char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
    b010:	c0 e0       	ldi	r28, 0x00	; 0
    b012:	cd 17       	cp	r28, r29
    b014:	09 f4       	brne	.+2      	; 0xb018 <on_solid_ground+0x24>
    b016:	41 c0       	rjmp	.+130    	; 0xb09a <on_solid_ground+0xa6>
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
    b018:	f7 01       	movw	r30, r14
    b01a:	42 81       	ldd	r20, Z+2	; 0x02
    b01c:	53 81       	ldd	r21, Z+3	; 0x03
    b01e:	40 0f       	add	r20, r16
    b020:	51 1f       	adc	r21, r17
    b022:	83 e0       	ldi	r24, 0x03	; 3
    b024:	56 95       	lsr	r21
    b026:	47 95       	ror	r20
    b028:	8a 95       	dec	r24
    b02a:	e1 f7       	brne	.-8      	; 0xb024 <on_solid_ground+0x30>
    b02c:	60 81       	ld	r22, Z
    b02e:	71 81       	ldd	r23, Z+1	; 0x01
    b030:	93 e0       	ldi	r25, 0x03	; 3
    b032:	76 95       	lsr	r23
    b034:	67 95       	ror	r22
    b036:	9a 95       	dec	r25
    b038:	e1 f7       	brne	.-8      	; 0xb032 <on_solid_ground+0x3e>
    b03a:	6c 0f       	add	r22, r28
    b03c:	80 91 b6 0f 	lds	r24, 0x0FB6
    b040:	90 91 b7 0f 	lds	r25, 0x0FB7
    b044:	0e 94 ef 55 	call	0xabde	; 0xabde <get_level_tile>
    b048:	c8 2e       	mov	r12, r24
		lt2 = get_level_tile(game.current_level, (s->x+7) / 8 + x, (s->y + tile_height*8) / 8);
    b04a:	f7 01       	movw	r30, r14
    b04c:	42 81       	ldd	r20, Z+2	; 0x02
    b04e:	53 81       	ldd	r21, Z+3	; 0x03
    b050:	40 0f       	add	r20, r16
    b052:	51 1f       	adc	r21, r17
    b054:	23 e0       	ldi	r18, 0x03	; 3
    b056:	56 95       	lsr	r21
    b058:	47 95       	ror	r20
    b05a:	2a 95       	dec	r18
    b05c:	e1 f7       	brne	.-8      	; 0xb056 <on_solid_ground+0x62>
    b05e:	20 81       	ld	r18, Z
    b060:	31 81       	ldd	r19, Z+1	; 0x01
    b062:	29 5f       	subi	r18, 0xF9	; 249
    b064:	3f 4f       	sbci	r19, 0xFF	; 255
    b066:	53 e0       	ldi	r21, 0x03	; 3
    b068:	36 95       	lsr	r19
    b06a:	27 95       	ror	r18
    b06c:	5a 95       	dec	r21
    b06e:	e1 f7       	brne	.-8      	; 0xb068 <on_solid_ground+0x74>
    b070:	6c 2f       	mov	r22, r28
    b072:	62 0f       	add	r22, r18
    b074:	80 91 b6 0f 	lds	r24, 0x0FB6
    b078:	90 91 b7 0f 	lds	r25, 0x0FB7
    b07c:	0e 94 ef 55 	call	0xabde	; 0xabde <get_level_tile>
    b080:	d8 2e       	mov	r13, r24
		if (solid_or_hazard_tile(lt1) || solid_or_hazard_tile(lt2))
    b082:	8c 2d       	mov	r24, r12
    b084:	0e 94 ca 56 	call	0xad94	; 0xad94 <solid_or_hazard_tile>
    b088:	81 11       	cpse	r24, r1
    b08a:	09 c0       	rjmp	.+18     	; 0xb09e <on_solid_ground+0xaa>
    b08c:	8d 2d       	mov	r24, r13
    b08e:	0e 94 ca 56 	call	0xad94	; 0xad94 <solid_or_hazard_tile>
    b092:	81 11       	cpse	r24, r1
    b094:	04 c0       	rjmp	.+8      	; 0xb09e <on_solid_ground+0xaa>
char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
    b096:	cf 5f       	subi	r28, 0xFF	; 255
    b098:	bc cf       	rjmp	.-136    	; 0xb012 <on_solid_ground+0x1e>
		if (solid_or_hazard_tile(lt1) || solid_or_hazard_tile(lt2))
		{
			return 1;
		}
	}
	return 0;
    b09a:	80 e0       	ldi	r24, 0x00	; 0
    b09c:	01 c0       	rjmp	.+2      	; 0xb0a0 <on_solid_ground+0xac>
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
		lt2 = get_level_tile(game.current_level, (s->x+7) / 8 + x, (s->y + tile_height*8) / 8);
		if (solid_or_hazard_tile(lt1) || solid_or_hazard_tile(lt2))
		{
			return 1;
    b09e:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return 0;
}
    b0a0:	df 91       	pop	r29
    b0a2:	cf 91       	pop	r28
    b0a4:	1f 91       	pop	r17
    b0a6:	0f 91       	pop	r16
    b0a8:	ff 90       	pop	r15
    b0aa:	ef 90       	pop	r14
    b0ac:	df 90       	pop	r13
    b0ae:	cf 90       	pop	r12
    b0b0:	08 95       	ret

0000b0b2 <find_shot_slot>:

u8 find_shot_slot(Player* player)
{
    b0b2:	fc 01       	movw	r30, r24
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
	{
		if (!player->shot[i].active) return i;
    b0b4:	80 8d       	ldd	r24, Z+24	; 0x18
    b0b6:	88 23       	and	r24, r24
    b0b8:	51 f0       	breq	.+20     	; 0xb0ce <find_shot_slot+0x1c>
    b0ba:	82 a5       	ldd	r24, Z+42	; 0x2a
    b0bc:	88 23       	and	r24, r24
    b0be:	29 f0       	breq	.+10     	; 0xb0ca <find_shot_slot+0x18>
    b0c0:	84 ad       	ldd	r24, Z+60	; 0x3c
    b0c2:	81 11       	cpse	r24, r1
    b0c4:	04 c0       	rjmp	.+8      	; 0xb0ce <find_shot_slot+0x1c>
	return 0;
}

u8 find_shot_slot(Player* player)
{
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
    b0c6:	82 e0       	ldi	r24, 0x02	; 2
    b0c8:	08 95       	ret
    b0ca:	81 e0       	ldi	r24, 0x01	; 1
	{
		if (!player->shot[i].active) return i;
    b0cc:	08 95       	ret
	}
	return 0;
    b0ce:	80 e0       	ldi	r24, 0x00	; 0
}
    b0d0:	08 95       	ret

0000b0d2 <update_shot>:

void update_shot(Player* player, u8 shot_slot)
{
    b0d2:	af 92       	push	r10
    b0d4:	bf 92       	push	r11
    b0d6:	cf 92       	push	r12
    b0d8:	df 92       	push	r13
    b0da:	ef 92       	push	r14
    b0dc:	ff 92       	push	r15
    b0de:	0f 93       	push	r16
    b0e0:	1f 93       	push	r17
    b0e2:	cf 93       	push	r28
    b0e4:	df 93       	push	r29
	// Shot updates
	u8 idx;
	if (player->controls.pressed & BTN_A && player->active_shots < MAX_PLAYER_SHOTS)
    b0e6:	fc 01       	movw	r30, r24
    b0e8:	e3 59       	subi	r30, 0x93	; 147
    b0ea:	ff 4f       	sbci	r31, 0xFF	; 255
    b0ec:	20 81       	ld	r18, Z
    b0ee:	31 81       	ldd	r19, Z+1	; 0x01
    b0f0:	30 ff       	sbrs	r19, 0
    b0f2:	78 c0       	rjmp	.+240    	; 0xb1e4 <update_shot+0x112>
    b0f4:	fc 01       	movw	r30, r24
    b0f6:	27 81       	ldd	r18, Z+7	; 0x07
    b0f8:	23 30       	cpi	r18, 0x03	; 3
    b0fa:	08 f0       	brcs	.+2      	; 0xb0fe <update_shot+0x2c>
    b0fc:	73 c0       	rjmp	.+230    	; 0xb1e4 <update_shot+0x112>
    b0fe:	16 2f       	mov	r17, r22
    b100:	ec 01       	movw	r28, r24
	{
		SFX_PLAYER_SHOOT;
    b102:	2f ef       	ldi	r18, 0xFF	; 255
    b104:	43 e2       	ldi	r20, 0x23	; 35
    b106:	63 e0       	ldi	r22, 0x03	; 3
    b108:	82 e0       	ldi	r24, 0x02	; 2
    b10a:	0e 94 d3 43 	call	0x87a6	; 0x87a6 <TriggerNote>
		idx = find_shot_slot(player);
    b10e:	ce 01       	movw	r24, r28
    b110:	0e 94 59 58 	call	0xb0b2	; 0xb0b2 <find_shot_slot>
    b114:	f8 2e       	mov	r15, r24
		LBMapSprite(shot_slot+idx, LBGetNextFrame(&player->shot[idx].anim), 0);
    b116:	c8 2e       	mov	r12, r24
    b118:	d1 2c       	mov	r13, r1
    b11a:	f2 e1       	ldi	r31, 0x12	; 18
    b11c:	8f 9f       	mul	r24, r31
    b11e:	50 01       	movw	r10, r0
    b120:	11 24       	eor	r1, r1
    b122:	c5 01       	movw	r24, r10
    b124:	49 96       	adiw	r24, 0x19	; 25
    b126:	8c 0f       	add	r24, r28
    b128:	9d 1f       	adc	r25, r29
    b12a:	0e 94 0d 4f 	call	0x9e1a	; 0x9e1a <LBGetNextFrame>
    b12e:	40 e0       	ldi	r20, 0x00	; 0
    b130:	bc 01       	movw	r22, r24
    b132:	8f 2d       	mov	r24, r15
    b134:	81 0f       	add	r24, r17
    b136:	0e 94 73 50 	call	0xa0e6	; 0xa0e6 <LBMapSprite>
		player->shot[idx].active = 1;
    b13a:	8e 01       	movw	r16, r28
    b13c:	0a 0d       	add	r16, r10
    b13e:	1b 1d       	adc	r17, r11
    b140:	81 e0       	ldi	r24, 0x01	; 1
    b142:	f8 01       	movw	r30, r16
    b144:	80 8f       	std	Z+24, r24	; 0x18
		player->shot[idx].shared.y = (u16) player->shared.y / 8 * 8;
    b146:	ea 80       	ldd	r14, Y+2	; 0x02
    b148:	fb 80       	ldd	r15, Y+3	; 0x03
    b14a:	f8 ef       	ldi	r31, 0xF8	; 248
    b14c:	ef 22       	and	r14, r31
    b14e:	f8 01       	movw	r30, r16
    b150:	f2 8a       	std	Z+18, r15	; 0x12
    b152:	e1 8a       	std	Z+17, r14	; 0x11
		if (is_space())
    b154:	0e 94 37 51 	call	0xa26e	; 0xa26e <is_space>
    b158:	28 81       	ld	r18, Y
    b15a:	39 81       	ldd	r19, Y+1	; 0x01
    b15c:	88 23       	and	r24, r24
    b15e:	41 f0       	breq	.+16     	; 0xb170 <update_shot+0x9e>
		{
			player->shot[idx].shared.x = player->shared.x+player->width*8;
    b160:	8b 85       	ldd	r24, Y+11	; 0x0b
    b162:	f8 e0       	ldi	r31, 0x08	; 8
    b164:	8f 9f       	mul	r24, r31
    b166:	20 0d       	add	r18, r0
    b168:	31 1d       	adc	r19, r1
    b16a:	11 24       	eor	r1, r1
    b16c:	f8 01       	movw	r30, r16
    b16e:	35 c0       	rjmp	.+106    	; 0xb1da <update_shot+0x108>
		}
		else
		{
			if (!(player->flags & PRONE))
    b170:	88 85       	ldd	r24, Y+8	; 0x08
    b172:	82 fd       	sbrc	r24, 2
    b174:	06 c0       	rjmp	.+12     	; 0xb182 <update_shot+0xb0>
			{
				player->shot[idx].shared.y += 8;
    b176:	f8 e0       	ldi	r31, 0x08	; 8
    b178:	ef 0e       	add	r14, r31
    b17a:	f1 1c       	adc	r15, r1
    b17c:	f8 01       	movw	r30, r16
    b17e:	f2 8a       	std	Z+18, r15	; 0x12
    b180:	e1 8a       	std	Z+17, r14	; 0x11
			}
			if (player->direction == D_RIGHT)
    b182:	8a 85       	ldd	r24, Y+10	; 0x0a
    b184:	81 30       	cpi	r24, 0x01	; 1
    b186:	91 f4       	brne	.+36     	; 0xb1ac <update_shot+0xda>
			{
				player->shot[idx].shared.x = player->shared.x+2*8;
    b188:	82 e1       	ldi	r24, 0x12	; 18
    b18a:	8c 9d       	mul	r24, r12
    b18c:	f0 01       	movw	r30, r0
    b18e:	8d 9d       	mul	r24, r13
    b190:	f0 0d       	add	r31, r0
    b192:	11 24       	eor	r1, r1
    b194:	ec 0f       	add	r30, r28
    b196:	fd 1f       	adc	r31, r29
    b198:	20 5f       	subi	r18, 0xF0	; 240
    b19a:	3f 4f       	sbci	r19, 0xFF	; 255
    b19c:	30 8b       	std	Z+16, r19	; 0x10
    b19e:	27 87       	std	Z+15, r18	; 0x0f
				if (player->shot[idx].shared.vx < 0) player->shot[idx].shared.vx = -player->shot[idx].shared.vx;
    b1a0:	84 89       	ldd	r24, Z+20	; 0x14
    b1a2:	87 ff       	sbrs	r24, 7
    b1a4:	1c c0       	rjmp	.+56     	; 0xb1de <update_shot+0x10c>
    b1a6:	81 95       	neg	r24
    b1a8:	84 8b       	std	Z+20, r24	; 0x14
    b1aa:	19 c0       	rjmp	.+50     	; 0xb1de <update_shot+0x10c>
			}
			else
			{
				if (player->shot[idx].shared.vx > 0) player->shot[idx].shared.vx = -player->shot[idx].shared.vx;
    b1ac:	82 e1       	ldi	r24, 0x12	; 18
    b1ae:	8c 9d       	mul	r24, r12
    b1b0:	f0 01       	movw	r30, r0
    b1b2:	8d 9d       	mul	r24, r13
    b1b4:	f0 0d       	add	r31, r0
    b1b6:	11 24       	eor	r1, r1
    b1b8:	ec 0f       	add	r30, r28
    b1ba:	fd 1f       	adc	r31, r29
    b1bc:	84 89       	ldd	r24, Z+20	; 0x14
    b1be:	18 16       	cp	r1, r24
    b1c0:	14 f4       	brge	.+4      	; 0xb1c6 <update_shot+0xf4>
    b1c2:	81 95       	neg	r24
    b1c4:	84 8b       	std	Z+20, r24	; 0x14
				player->shot[idx].shared.x = player->shared.x-1*8;
    b1c6:	82 e1       	ldi	r24, 0x12	; 18
    b1c8:	8c 9d       	mul	r24, r12
    b1ca:	f0 01       	movw	r30, r0
    b1cc:	8d 9d       	mul	r24, r13
    b1ce:	f0 0d       	add	r31, r0
    b1d0:	11 24       	eor	r1, r1
    b1d2:	ec 0f       	add	r30, r28
    b1d4:	fd 1f       	adc	r31, r29
    b1d6:	28 50       	subi	r18, 0x08	; 8
    b1d8:	31 09       	sbc	r19, r1
    b1da:	30 8b       	std	Z+16, r19	; 0x10
    b1dc:	27 87       	std	Z+15, r18	; 0x0f
			}
		}
		player->active_shots++;
    b1de:	8f 81       	ldd	r24, Y+7	; 0x07
    b1e0:	8f 5f       	subi	r24, 0xFF	; 255
    b1e2:	8f 83       	std	Y+7, r24	; 0x07
	}
}
    b1e4:	df 91       	pop	r29
    b1e6:	cf 91       	pop	r28
    b1e8:	1f 91       	pop	r17
    b1ea:	0f 91       	pop	r16
    b1ec:	ff 90       	pop	r15
    b1ee:	ef 90       	pop	r14
    b1f0:	df 90       	pop	r13
    b1f2:	cf 90       	pop	r12
    b1f4:	bf 90       	pop	r11
    b1f6:	af 90       	pop	r10
    b1f8:	08 95       	ret

0000b1fa <pixel_overlap>:
	}
	return 1;
}

u8 pixel_overlap(u8 s1, u8 s2, u8 w1, u8 w2)
{
    b1fa:	94 2f       	mov	r25, r20
	u8 result = w1;
	
	if (s2 > s1)
    b1fc:	86 17       	cp	r24, r22
    b1fe:	10 f4       	brcc	.+4      	; 0xb204 <pixel_overlap+0xa>
    b200:	96 1b       	sub	r25, r22
	{
		result -= s2 - s1;
    b202:	98 0f       	add	r25, r24
	}
	s1 = s1 + w1;
    b204:	84 0f       	add	r24, r20
	s2 = s2 + w2;
    b206:	26 0f       	add	r18, r22
	if (s2 < s1)
    b208:	28 17       	cp	r18, r24
    b20a:	10 f4       	brcc	.+4      	; 0xb210 <pixel_overlap+0x16>
	{
		result -= s1 - s2;
    b20c:	28 1b       	sub	r18, r24
    b20e:	92 0f       	add	r25, r18
	}
	return result;
}
    b210:	89 2f       	mov	r24, r25
    b212:	08 95       	ret

0000b214 <collision_detect_level>:

u8 collision_detect_level(SpriteShared* s, u8 tile_width, u8 tile_height)
{
    b214:	2f 92       	push	r2
    b216:	3f 92       	push	r3
    b218:	4f 92       	push	r4
    b21a:	5f 92       	push	r5
    b21c:	6f 92       	push	r6
    b21e:	7f 92       	push	r7
    b220:	8f 92       	push	r8
    b222:	9f 92       	push	r9
    b224:	af 92       	push	r10
    b226:	bf 92       	push	r11
    b228:	cf 92       	push	r12
    b22a:	df 92       	push	r13
    b22c:	ef 92       	push	r14
    b22e:	ff 92       	push	r15
    b230:	0f 93       	push	r16
    b232:	1f 93       	push	r17
    b234:	cf 93       	push	r28
    b236:	df 93       	push	r29
    b238:	00 d0       	rcall	.+0      	; 0xb23a <collision_detect_level+0x26>
    b23a:	00 d0       	rcall	.+0      	; 0xb23c <collision_detect_level+0x28>
    b23c:	00 d0       	rcall	.+0      	; 0xb23e <collision_detect_level+0x2a>
    b23e:	cd b7       	in	r28, 0x3d	; 61
    b240:	de b7       	in	r29, 0x3e	; 62
    b242:	9e 83       	std	Y+6, r25	; 0x06
    b244:	8d 83       	std	Y+5, r24	; 0x05
    b246:	56 2e       	mov	r5, r22
    b248:	4c 83       	std	Y+4, r20	; 0x04
	u8 x0_tile = s->x >> 3;
    b24a:	fc 01       	movw	r30, r24
    b24c:	a0 80       	ld	r10, Z
    b24e:	b1 80       	ldd	r11, Z+1	; 0x01
    b250:	75 01       	movw	r14, r10
    b252:	13 e0       	ldi	r17, 0x03	; 3
    b254:	f6 94       	lsr	r15
    b256:	e7 94       	ror	r14
    b258:	1a 95       	dec	r17
    b25a:	e1 f7       	brne	.-8      	; 0xb254 <collision_detect_level+0x40>
    b25c:	ea 82       	std	Y+2, r14	; 0x02
	u8 y0_tile = s->y >> 3;
    b25e:	c2 80       	ldd	r12, Z+2	; 0x02
    b260:	d3 80       	ldd	r13, Z+3	; 0x03
	u8 solid_tile_1 = 0;
	u8 solid_tile_2 = 0;
	u8 result = 0;
	
	// Top and Bottom
	if (s->vy != 0)
    b262:	84 81       	ldd	r24, Z+4	; 0x04
    b264:	88 23       	and	r24, r24
    b266:	09 f4       	brne	.+2      	; 0xb26a <collision_detect_level+0x56>
    b268:	e1 c0       	rjmp	.+450    	; 0xb42c <collision_detect_level+0x218>
}

u8 collision_detect_level(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u8 x0_tile = s->x >> 3;
	u8 y0_tile = s->y >> 3;
    b26a:	e3 e0       	ldi	r30, 0x03	; 3
    b26c:	d6 94       	lsr	r13
    b26e:	c7 94       	ror	r12
    b270:	ea 95       	dec	r30
    b272:	e1 f7       	brne	.-8      	; 0xb26c <collision_detect_level+0x58>
    b274:	c9 82       	std	Y+1, r12	; 0x01
	u8 x1_tile = (s->x+7) >> 3;
    b276:	f7 e0       	ldi	r31, 0x07	; 7
    b278:	af 0e       	add	r10, r31
    b27a:	b1 1c       	adc	r11, r1
    b27c:	f3 e0       	ldi	r31, 0x03	; 3
    b27e:	b6 94       	lsr	r11
    b280:	a7 94       	ror	r10
    b282:	fa 95       	dec	r31
    b284:	e1 f7       	brne	.-8      	; 0xb27e <collision_detect_level+0x6a>
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, y0_tile);
				lt2 = get_level_tile(game.current_level, x1_tile + x, y0_tile);
				solid_tile_1 = solid_or_hazard_tile(lt1);
				solid_tile_2 = solid_or_hazard_tile(lt2);
				if ((solid_tile_1 && pixel_overlap(s->x-game.camera_x, x0_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD) ||
    b286:	8e 2d       	mov	r24, r14
    b288:	88 0f       	add	r24, r24
    b28a:	88 0f       	add	r24, r24
    b28c:	88 0f       	add	r24, r24
    b28e:	8b 83       	std	Y+3, r24	; 0x03
					(solid_tile_2 && pixel_overlap(s->x-game.camera_x, x1_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD))
    b290:	2a 2c       	mov	r2, r10
    b292:	22 0c       	add	r2, r2
    b294:	22 0c       	add	r2, r2
    b296:	22 0c       	add	r2, r2
    b298:	dd 24       	eor	r13, r13
				{
					s->vy =  0;
					s->y = (y0_tile + 1) * 8;
    b29a:	46 01       	movw	r8, r12
    b29c:	9f ef       	ldi	r25, 0xFF	; 255
    b29e:	89 1a       	sub	r8, r25
    b2a0:	99 0a       	sbc	r9, r25
    b2a2:	a3 e0       	ldi	r26, 0x03	; 3
    b2a4:	88 0c       	add	r8, r8
    b2a6:	99 1c       	adc	r9, r9
    b2a8:	aa 95       	dec	r26
    b2aa:	e1 f7       	brne	.-8      	; 0xb2a4 <collision_detect_level+0x90>
					if (solid_tile_2 > result) result = solid_tile_2;
				}
			}
			if (s->vy > 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, (s->y + tile_height*8 - 1) / 8);
    b2ac:	e8 e0       	ldi	r30, 0x08	; 8
    b2ae:	4e 9f       	mul	r20, r30
    b2b0:	30 01       	movw	r6, r0
    b2b2:	11 24       	eor	r1, r1
				if ((solid_tile_1 && pixel_overlap(s->x-game.camera_x, x0_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD) || 
					(solid_tile_2 && pixel_overlap(s->x-game.camera_x, x1_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vy =  0;
					s->gravity = 0;
					s->y = y0_tile * 8;
    b2b4:	b3 e0       	ldi	r27, 0x03	; 3
    b2b6:	cc 0c       	add	r12, r12
    b2b8:	dd 1c       	adc	r13, r13
    b2ba:	ba 95       	dec	r27
    b2bc:	e1 f7       	brne	.-8      	; 0xb2b6 <collision_detect_level+0xa2>
    b2be:	41 2c       	mov	r4, r1
    b2c0:	10 e0       	ldi	r17, 0x00	; 0
	u8 result = 0;
	
	// Top and Bottom
	if (s->vy != 0)
	{
		for (u8 x = 0; x < tile_width; x++)
    b2c2:	45 14       	cp	r4, r5
    b2c4:	09 f4       	brne	.+2      	; 0xb2c8 <collision_detect_level+0xb4>
    b2c6:	b3 c0       	rjmp	.+358    	; 0xb42e <collision_detect_level+0x21a>
		{
			if (s->vy < 0)
    b2c8:	ed 81       	ldd	r30, Y+5	; 0x05
    b2ca:	fe 81       	ldd	r31, Y+6	; 0x06
    b2cc:	84 81       	ldd	r24, Z+4	; 0x04
    b2ce:	87 ff       	sbrs	r24, 7
    b2d0:	47 c0       	rjmp	.+142    	; 0xb360 <collision_detect_level+0x14c>
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, y0_tile);
    b2d2:	49 81       	ldd	r20, Y+1	; 0x01
    b2d4:	64 2d       	mov	r22, r4
    b2d6:	6e 0d       	add	r22, r14
    b2d8:	80 91 b6 0f 	lds	r24, 0x0FB6
    b2dc:	90 91 b7 0f 	lds	r25, 0x0FB7
    b2e0:	0e 94 ef 55 	call	0xabde	; 0xabde <get_level_tile>
    b2e4:	38 2e       	mov	r3, r24
				lt2 = get_level_tile(game.current_level, x1_tile + x, y0_tile);
    b2e6:	49 81       	ldd	r20, Y+1	; 0x01
    b2e8:	64 2d       	mov	r22, r4
    b2ea:	6a 0d       	add	r22, r10
    b2ec:	80 91 b6 0f 	lds	r24, 0x0FB6
    b2f0:	90 91 b7 0f 	lds	r25, 0x0FB7
    b2f4:	0e 94 ef 55 	call	0xabde	; 0xabde <get_level_tile>
    b2f8:	08 2f       	mov	r16, r24
				solid_tile_1 = solid_or_hazard_tile(lt1);
    b2fa:	83 2d       	mov	r24, r3
    b2fc:	0e 94 ca 56 	call	0xad94	; 0xad94 <solid_or_hazard_tile>
    b300:	38 2e       	mov	r3, r24
				solid_tile_2 = solid_or_hazard_tile(lt2);
    b302:	80 2f       	mov	r24, r16
    b304:	0e 94 ca 56 	call	0xad94	; 0xad94 <solid_or_hazard_tile>
    b308:	08 2f       	mov	r16, r24
				if ((solid_tile_1 && pixel_overlap(s->x-game.camera_x, x0_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD) ||
    b30a:	33 20       	and	r3, r3
    b30c:	71 f0       	breq	.+28     	; 0xb32a <collision_detect_level+0x116>
    b30e:	30 91 b1 0d 	lds	r19, 0x0DB1
    b312:	6b 81       	ldd	r22, Y+3	; 0x03
    b314:	63 1b       	sub	r22, r19
    b316:	ed 81       	ldd	r30, Y+5	; 0x05
    b318:	fe 81       	ldd	r31, Y+6	; 0x06
    b31a:	80 81       	ld	r24, Z
    b31c:	28 e0       	ldi	r18, 0x08	; 8
    b31e:	48 e0       	ldi	r20, 0x08	; 8
    b320:	83 1b       	sub	r24, r19
    b322:	0e 94 fd 58 	call	0xb1fa	; 0xb1fa <pixel_overlap>
    b326:	84 30       	cpi	r24, 0x04	; 4
    b328:	80 f4       	brcc	.+32     	; 0xb34a <collision_detect_level+0x136>
    b32a:	00 23       	and	r16, r16
    b32c:	c9 f0       	breq	.+50     	; 0xb360 <collision_detect_level+0x14c>
					(solid_tile_2 && pixel_overlap(s->x-game.camera_x, x1_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD))
    b32e:	30 91 b1 0d 	lds	r19, 0x0DB1
    b332:	62 2d       	mov	r22, r2
    b334:	63 1b       	sub	r22, r19
    b336:	ed 81       	ldd	r30, Y+5	; 0x05
    b338:	fe 81       	ldd	r31, Y+6	; 0x06
    b33a:	80 81       	ld	r24, Z
    b33c:	28 e0       	ldi	r18, 0x08	; 8
    b33e:	48 e0       	ldi	r20, 0x08	; 8
    b340:	83 1b       	sub	r24, r19
    b342:	0e 94 fd 58 	call	0xb1fa	; 0xb1fa <pixel_overlap>
    b346:	84 30       	cpi	r24, 0x04	; 4
    b348:	58 f0       	brcs	.+22     	; 0xb360 <collision_detect_level+0x14c>
				{
					s->vy =  0;
    b34a:	ed 81       	ldd	r30, Y+5	; 0x05
    b34c:	fe 81       	ldd	r31, Y+6	; 0x06
    b34e:	14 82       	std	Z+4, r1	; 0x04
					s->y = (y0_tile + 1) * 8;
    b350:	93 82       	std	Z+3, r9	; 0x03
    b352:	82 82       	std	Z+2, r8	; 0x02
    b354:	30 16       	cp	r3, r16
    b356:	08 f4       	brcc	.+2      	; 0xb35a <collision_detect_level+0x146>
    b358:	30 2e       	mov	r3, r16
    b35a:	13 15       	cp	r17, r3
    b35c:	08 f4       	brcc	.+2      	; 0xb360 <collision_detect_level+0x14c>
    b35e:	13 2d       	mov	r17, r3
					if (solid_tile_1 > result) result = solid_tile_1;
					if (solid_tile_2 > result) result = solid_tile_2;
				}
			}
			if (s->vy > 0)
    b360:	ed 81       	ldd	r30, Y+5	; 0x05
    b362:	fe 81       	ldd	r31, Y+6	; 0x06
    b364:	84 81       	ldd	r24, Z+4	; 0x04
    b366:	18 16       	cp	r1, r24
    b368:	0c f0       	brlt	.+2      	; 0xb36c <collision_detect_level+0x158>
    b36a:	5e c0       	rjmp	.+188    	; 0xb428 <collision_detect_level+0x214>
    b36c:	42 81       	ldd	r20, Z+2	; 0x02
    b36e:	53 81       	ldd	r21, Z+3	; 0x03
    b370:	41 50       	subi	r20, 0x01	; 1
    b372:	51 09       	sbc	r21, r1
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, (s->y + tile_height*8 - 1) / 8);
    b374:	46 0d       	add	r20, r6
    b376:	57 1d       	adc	r21, r7
    b378:	63 e0       	ldi	r22, 0x03	; 3
    b37a:	56 95       	lsr	r21
    b37c:	47 95       	ror	r20
    b37e:	6a 95       	dec	r22
    b380:	e1 f7       	brne	.-8      	; 0xb37a <collision_detect_level+0x166>
    b382:	64 2d       	mov	r22, r4
    b384:	6e 0d       	add	r22, r14
    b386:	80 91 b6 0f 	lds	r24, 0x0FB6
    b38a:	90 91 b7 0f 	lds	r25, 0x0FB7
    b38e:	0e 94 ef 55 	call	0xabde	; 0xabde <get_level_tile>
    b392:	38 2e       	mov	r3, r24
    b394:	ed 81       	ldd	r30, Y+5	; 0x05
    b396:	fe 81       	ldd	r31, Y+6	; 0x06
    b398:	42 81       	ldd	r20, Z+2	; 0x02
    b39a:	53 81       	ldd	r21, Z+3	; 0x03
    b39c:	41 50       	subi	r20, 0x01	; 1
    b39e:	51 09       	sbc	r21, r1
				lt2 = get_level_tile(game.current_level, x1_tile + x, (s->y + tile_height*8 - 1) / 8);
    b3a0:	46 0d       	add	r20, r6
    b3a2:	57 1d       	adc	r21, r7
    b3a4:	73 e0       	ldi	r23, 0x03	; 3
    b3a6:	56 95       	lsr	r21
    b3a8:	47 95       	ror	r20
    b3aa:	7a 95       	dec	r23
    b3ac:	e1 f7       	brne	.-8      	; 0xb3a6 <collision_detect_level+0x192>
    b3ae:	64 2d       	mov	r22, r4
    b3b0:	6a 0d       	add	r22, r10
    b3b2:	80 91 b6 0f 	lds	r24, 0x0FB6
    b3b6:	90 91 b7 0f 	lds	r25, 0x0FB7
    b3ba:	0e 94 ef 55 	call	0xabde	; 0xabde <get_level_tile>
    b3be:	08 2f       	mov	r16, r24
				solid_tile_1 = solid_or_hazard_tile(lt1);
    b3c0:	83 2d       	mov	r24, r3
    b3c2:	0e 94 ca 56 	call	0xad94	; 0xad94 <solid_or_hazard_tile>
    b3c6:	38 2e       	mov	r3, r24
				solid_tile_2 = solid_or_hazard_tile(lt2);
    b3c8:	80 2f       	mov	r24, r16
    b3ca:	0e 94 ca 56 	call	0xad94	; 0xad94 <solid_or_hazard_tile>
    b3ce:	08 2f       	mov	r16, r24
				if ((solid_tile_1 && pixel_overlap(s->x-game.camera_x, x0_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD) || 
    b3d0:	33 20       	and	r3, r3
    b3d2:	71 f0       	breq	.+28     	; 0xb3f0 <collision_detect_level+0x1dc>
    b3d4:	30 91 b1 0d 	lds	r19, 0x0DB1
    b3d8:	6b 81       	ldd	r22, Y+3	; 0x03
    b3da:	63 1b       	sub	r22, r19
    b3dc:	ed 81       	ldd	r30, Y+5	; 0x05
    b3de:	fe 81       	ldd	r31, Y+6	; 0x06
    b3e0:	80 81       	ld	r24, Z
    b3e2:	28 e0       	ldi	r18, 0x08	; 8
    b3e4:	48 e0       	ldi	r20, 0x08	; 8
    b3e6:	83 1b       	sub	r24, r19
    b3e8:	0e 94 fd 58 	call	0xb1fa	; 0xb1fa <pixel_overlap>
    b3ec:	84 30       	cpi	r24, 0x04	; 4
    b3ee:	80 f4       	brcc	.+32     	; 0xb410 <collision_detect_level+0x1fc>
    b3f0:	00 23       	and	r16, r16
    b3f2:	d1 f0       	breq	.+52     	; 0xb428 <collision_detect_level+0x214>
					(solid_tile_2 && pixel_overlap(s->x-game.camera_x, x1_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD))
    b3f4:	30 91 b1 0d 	lds	r19, 0x0DB1
    b3f8:	62 2d       	mov	r22, r2
    b3fa:	63 1b       	sub	r22, r19
    b3fc:	ed 81       	ldd	r30, Y+5	; 0x05
    b3fe:	fe 81       	ldd	r31, Y+6	; 0x06
    b400:	80 81       	ld	r24, Z
    b402:	28 e0       	ldi	r18, 0x08	; 8
    b404:	48 e0       	ldi	r20, 0x08	; 8
    b406:	83 1b       	sub	r24, r19
    b408:	0e 94 fd 58 	call	0xb1fa	; 0xb1fa <pixel_overlap>
    b40c:	84 30       	cpi	r24, 0x04	; 4
    b40e:	60 f0       	brcs	.+24     	; 0xb428 <collision_detect_level+0x214>
				{
					s->vy =  0;
    b410:	ed 81       	ldd	r30, Y+5	; 0x05
    b412:	fe 81       	ldd	r31, Y+6	; 0x06
    b414:	14 82       	std	Z+4, r1	; 0x04
					s->gravity = 0;
    b416:	16 82       	std	Z+6, r1	; 0x06
					s->y = y0_tile * 8;
    b418:	d3 82       	std	Z+3, r13	; 0x03
    b41a:	c2 82       	std	Z+2, r12	; 0x02
    b41c:	30 16       	cp	r3, r16
    b41e:	08 f4       	brcc	.+2      	; 0xb422 <collision_detect_level+0x20e>
    b420:	30 2e       	mov	r3, r16
    b422:	13 15       	cp	r17, r3
    b424:	08 f4       	brcc	.+2      	; 0xb428 <collision_detect_level+0x214>
    b426:	13 2d       	mov	r17, r3
	u8 result = 0;
	
	// Top and Bottom
	if (s->vy != 0)
	{
		for (u8 x = 0; x < tile_width; x++)
    b428:	43 94       	inc	r4
    b42a:	4b cf       	rjmp	.-362    	; 0xb2c2 <collision_detect_level+0xae>
	u8 x1_tile = (s->x+7) >> 3;
	u8 y1_tile = (s->y+7) >> 3;
	u8 lt1, lt2;
	u8 solid_tile_1 = 0;
	u8 solid_tile_2 = 0;
	u8 result = 0;
    b42c:	10 e0       	ldi	r17, 0x00	; 0
			}
		}
	}
	
	// Left and Right
	if (s->vx != 0)
    b42e:	ed 81       	ldd	r30, Y+5	; 0x05
    b430:	fe 81       	ldd	r31, Y+6	; 0x06
    b432:	85 81       	ldd	r24, Z+5	; 0x05
    b434:	88 23       	and	r24, r24
    b436:	09 f4       	brne	.+2      	; 0xb43a <collision_detect_level+0x226>
    b438:	e1 c0       	rjmp	.+450    	; 0xb5fc <collision_detect_level+0x3e8>
	{
		y0_tile = s->y / 8;
    b43a:	c2 80       	ldd	r12, Z+2	; 0x02
    b43c:	d3 80       	ldd	r13, Z+3	; 0x03
    b43e:	56 01       	movw	r10, r12
    b440:	23 e0       	ldi	r18, 0x03	; 3
    b442:	b6 94       	lsr	r11
    b444:	a7 94       	ror	r10
    b446:	2a 95       	dec	r18
    b448:	e1 f7       	brne	.-8      	; 0xb442 <collision_detect_level+0x22e>
		y1_tile = (s->y+7) / 8;
    b44a:	f7 e0       	ldi	r31, 0x07	; 7
    b44c:	cf 0e       	add	r12, r31
    b44e:	d1 1c       	adc	r13, r1
    b450:	33 e0       	ldi	r19, 0x03	; 3
    b452:	d6 94       	lsr	r13
    b454:	c7 94       	ror	r12
    b456:	3a 95       	dec	r19
    b458:	e1 f7       	brne	.-8      	; 0xb452 <collision_detect_level+0x23e>
			{
				lt1 = get_level_tile(game.current_level, x0_tile, y0_tile + y);
				lt2 = get_level_tile(game.current_level, x0_tile, y1_tile + y);
				solid_tile_1 = solid_or_hazard_tile(lt1);
				solid_tile_2 = solid_or_hazard_tile(lt2);
				if ((solid_tile_1 && pixel_overlap(s->y-game.camera_y, y0_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD) ||
    b45a:	3a 2c       	mov	r3, r10
    b45c:	33 0c       	add	r3, r3
    b45e:	33 0c       	add	r3, r3
    b460:	33 0c       	add	r3, r3
					(solid_tile_2 && pixel_overlap(s->y-game.camera_y, y1_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD))
    b462:	4c 2c       	mov	r4, r12
    b464:	44 0c       	add	r4, r4
    b466:	44 0c       	add	r4, r4
    b468:	44 0c       	add	r4, r4
    b46a:	ff 24       	eor	r15, r15
				{
					s->vx =  0;
					s->x = (x0_tile + 1) * 8;
    b46c:	37 01       	movw	r6, r14
    b46e:	8f ef       	ldi	r24, 0xFF	; 255
    b470:	68 1a       	sub	r6, r24
    b472:	78 0a       	sbc	r7, r24
    b474:	43 e0       	ldi	r20, 0x03	; 3
    b476:	66 0c       	add	r6, r6
    b478:	77 1c       	adc	r7, r7
    b47a:	4a 95       	dec	r20
    b47c:	e1 f7       	brne	.-8      	; 0xb476 <collision_detect_level+0x262>
				}
			}
			
			if (s->vx > 0)
			{
				lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y0_tile + y);
    b47e:	98 e0       	ldi	r25, 0x08	; 8
    b480:	59 9e       	mul	r5, r25
    b482:	40 01       	movw	r8, r0
    b484:	11 24       	eor	r1, r1
				solid_tile_2 = solid_or_hazard_tile(lt2);
				if ((solid_tile_1 && pixel_overlap(s->y-game.camera_y, y0_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD) ||
					(solid_tile_2 && pixel_overlap(s->y-game.camera_y, y1_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vx =  0;
					s->x = x0_tile * 8;
    b486:	53 e0       	ldi	r21, 0x03	; 3
    b488:	ee 0c       	add	r14, r14
    b48a:	ff 1c       	adc	r15, r15
    b48c:	5a 95       	dec	r21
    b48e:	e1 f7       	brne	.-8      	; 0xb488 <collision_detect_level+0x274>
	// Left and Right
	if (s->vx != 0)
	{
		y0_tile = s->y / 8;
		y1_tile = (s->y+7) / 8;
		for (u8 y = 0; y < tile_height; y++)
    b490:	51 2c       	mov	r5, r1
    b492:	fc 81       	ldd	r31, Y+4	; 0x04
    b494:	5f 16       	cp	r5, r31
    b496:	09 f4       	brne	.+2      	; 0xb49a <collision_detect_level+0x286>
    b498:	b1 c0       	rjmp	.+354    	; 0xb5fc <collision_detect_level+0x3e8>
		{
			if (s->vx < 0)
    b49a:	ed 81       	ldd	r30, Y+5	; 0x05
    b49c:	fe 81       	ldd	r31, Y+6	; 0x06
    b49e:	85 81       	ldd	r24, Z+5	; 0x05
    b4a0:	87 ff       	sbrs	r24, 7
    b4a2:	47 c0       	rjmp	.+142    	; 0xb532 <collision_detect_level+0x31e>
    b4a4:	45 2d       	mov	r20, r5
    b4a6:	4a 0d       	add	r20, r10
			{
				lt1 = get_level_tile(game.current_level, x0_tile, y0_tile + y);
    b4a8:	6a 81       	ldd	r22, Y+2	; 0x02
    b4aa:	80 91 b6 0f 	lds	r24, 0x0FB6
    b4ae:	90 91 b7 0f 	lds	r25, 0x0FB7
    b4b2:	0e 94 ef 55 	call	0xabde	; 0xabde <get_level_tile>
    b4b6:	28 2e       	mov	r2, r24
    b4b8:	45 2d       	mov	r20, r5
    b4ba:	4c 0d       	add	r20, r12
				lt2 = get_level_tile(game.current_level, x0_tile, y1_tile + y);
    b4bc:	6a 81       	ldd	r22, Y+2	; 0x02
    b4be:	80 91 b6 0f 	lds	r24, 0x0FB6
    b4c2:	90 91 b7 0f 	lds	r25, 0x0FB7
    b4c6:	0e 94 ef 55 	call	0xabde	; 0xabde <get_level_tile>
    b4ca:	08 2f       	mov	r16, r24
				solid_tile_1 = solid_or_hazard_tile(lt1);
    b4cc:	82 2d       	mov	r24, r2
    b4ce:	0e 94 ca 56 	call	0xad94	; 0xad94 <solid_or_hazard_tile>
    b4d2:	28 2e       	mov	r2, r24
				solid_tile_2 = solid_or_hazard_tile(lt2);
    b4d4:	80 2f       	mov	r24, r16
    b4d6:	0e 94 ca 56 	call	0xad94	; 0xad94 <solid_or_hazard_tile>
    b4da:	08 2f       	mov	r16, r24
				if ((solid_tile_1 && pixel_overlap(s->y-game.camera_y, y0_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD) ||
    b4dc:	22 20       	and	r2, r2
    b4de:	71 f0       	breq	.+28     	; 0xb4fc <collision_detect_level+0x2e8>
    b4e0:	30 91 b9 0d 	lds	r19, 0x0DB9
    b4e4:	63 2d       	mov	r22, r3
    b4e6:	63 1b       	sub	r22, r19
    b4e8:	ed 81       	ldd	r30, Y+5	; 0x05
    b4ea:	fe 81       	ldd	r31, Y+6	; 0x06
    b4ec:	82 81       	ldd	r24, Z+2	; 0x02
    b4ee:	28 e0       	ldi	r18, 0x08	; 8
    b4f0:	48 e0       	ldi	r20, 0x08	; 8
    b4f2:	83 1b       	sub	r24, r19
    b4f4:	0e 94 fd 58 	call	0xb1fa	; 0xb1fa <pixel_overlap>
    b4f8:	84 30       	cpi	r24, 0x04	; 4
    b4fa:	80 f4       	brcc	.+32     	; 0xb51c <collision_detect_level+0x308>
    b4fc:	00 23       	and	r16, r16
    b4fe:	c9 f0       	breq	.+50     	; 0xb532 <collision_detect_level+0x31e>
					(solid_tile_2 && pixel_overlap(s->y-game.camera_y, y1_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD))
    b500:	30 91 b9 0d 	lds	r19, 0x0DB9
    b504:	64 2d       	mov	r22, r4
    b506:	63 1b       	sub	r22, r19
    b508:	ed 81       	ldd	r30, Y+5	; 0x05
    b50a:	fe 81       	ldd	r31, Y+6	; 0x06
    b50c:	82 81       	ldd	r24, Z+2	; 0x02
    b50e:	28 e0       	ldi	r18, 0x08	; 8
    b510:	48 e0       	ldi	r20, 0x08	; 8
    b512:	83 1b       	sub	r24, r19
    b514:	0e 94 fd 58 	call	0xb1fa	; 0xb1fa <pixel_overlap>
    b518:	84 30       	cpi	r24, 0x04	; 4
    b51a:	58 f0       	brcs	.+22     	; 0xb532 <collision_detect_level+0x31e>
				{
					s->vx =  0;
    b51c:	ed 81       	ldd	r30, Y+5	; 0x05
    b51e:	fe 81       	ldd	r31, Y+6	; 0x06
    b520:	15 82       	std	Z+5, r1	; 0x05
					s->x = (x0_tile + 1) * 8;
    b522:	71 82       	std	Z+1, r7	; 0x01
    b524:	60 82       	st	Z, r6
    b526:	20 16       	cp	r2, r16
    b528:	08 f4       	brcc	.+2      	; 0xb52c <collision_detect_level+0x318>
    b52a:	20 2e       	mov	r2, r16
    b52c:	12 15       	cp	r17, r2
    b52e:	08 f4       	brcc	.+2      	; 0xb532 <collision_detect_level+0x31e>
    b530:	12 2d       	mov	r17, r2
					if (solid_tile_1 > result) result = solid_tile_1;
					if (solid_tile_2 > result) result = solid_tile_2;
				}
			}
			
			if (s->vx > 0)
    b532:	ed 81       	ldd	r30, Y+5	; 0x05
    b534:	fe 81       	ldd	r31, Y+6	; 0x06
    b536:	85 81       	ldd	r24, Z+5	; 0x05
    b538:	18 16       	cp	r1, r24
    b53a:	0c f0       	brlt	.+2      	; 0xb53e <collision_detect_level+0x32a>
    b53c:	5d c0       	rjmp	.+186    	; 0xb5f8 <collision_detect_level+0x3e4>
    b53e:	60 81       	ld	r22, Z
    b540:	71 81       	ldd	r23, Z+1	; 0x01
    b542:	61 50       	subi	r22, 0x01	; 1
    b544:	71 09       	sbc	r23, r1
			{
				lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y0_tile + y);
    b546:	68 0d       	add	r22, r8
    b548:	79 1d       	adc	r23, r9
    b54a:	83 e0       	ldi	r24, 0x03	; 3
    b54c:	76 95       	lsr	r23
    b54e:	67 95       	ror	r22
    b550:	8a 95       	dec	r24
    b552:	e1 f7       	brne	.-8      	; 0xb54c <collision_detect_level+0x338>
    b554:	45 2d       	mov	r20, r5
    b556:	4a 0d       	add	r20, r10
    b558:	80 91 b6 0f 	lds	r24, 0x0FB6
    b55c:	90 91 b7 0f 	lds	r25, 0x0FB7
    b560:	0e 94 ef 55 	call	0xabde	; 0xabde <get_level_tile>
    b564:	28 2e       	mov	r2, r24
    b566:	ed 81       	ldd	r30, Y+5	; 0x05
    b568:	fe 81       	ldd	r31, Y+6	; 0x06
    b56a:	60 81       	ld	r22, Z
    b56c:	71 81       	ldd	r23, Z+1	; 0x01
    b56e:	61 50       	subi	r22, 0x01	; 1
    b570:	71 09       	sbc	r23, r1
				lt2 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y1_tile + y);
    b572:	68 0d       	add	r22, r8
    b574:	79 1d       	adc	r23, r9
    b576:	93 e0       	ldi	r25, 0x03	; 3
    b578:	76 95       	lsr	r23
    b57a:	67 95       	ror	r22
    b57c:	9a 95       	dec	r25
    b57e:	e1 f7       	brne	.-8      	; 0xb578 <collision_detect_level+0x364>
    b580:	45 2d       	mov	r20, r5
    b582:	4c 0d       	add	r20, r12
    b584:	80 91 b6 0f 	lds	r24, 0x0FB6
    b588:	90 91 b7 0f 	lds	r25, 0x0FB7
    b58c:	0e 94 ef 55 	call	0xabde	; 0xabde <get_level_tile>
    b590:	08 2f       	mov	r16, r24
				solid_tile_1 = solid_or_hazard_tile(lt1);
    b592:	82 2d       	mov	r24, r2
    b594:	0e 94 ca 56 	call	0xad94	; 0xad94 <solid_or_hazard_tile>
    b598:	28 2e       	mov	r2, r24
				solid_tile_2 = solid_or_hazard_tile(lt2);
    b59a:	80 2f       	mov	r24, r16
    b59c:	0e 94 ca 56 	call	0xad94	; 0xad94 <solid_or_hazard_tile>
    b5a0:	08 2f       	mov	r16, r24
				if ((solid_tile_1 && pixel_overlap(s->y-game.camera_y, y0_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD) ||
    b5a2:	22 20       	and	r2, r2
    b5a4:	71 f0       	breq	.+28     	; 0xb5c2 <collision_detect_level+0x3ae>
    b5a6:	30 91 b9 0d 	lds	r19, 0x0DB9
    b5aa:	63 2d       	mov	r22, r3
    b5ac:	63 1b       	sub	r22, r19
    b5ae:	ed 81       	ldd	r30, Y+5	; 0x05
    b5b0:	fe 81       	ldd	r31, Y+6	; 0x06
    b5b2:	82 81       	ldd	r24, Z+2	; 0x02
    b5b4:	28 e0       	ldi	r18, 0x08	; 8
    b5b6:	48 e0       	ldi	r20, 0x08	; 8
    b5b8:	83 1b       	sub	r24, r19
    b5ba:	0e 94 fd 58 	call	0xb1fa	; 0xb1fa <pixel_overlap>
    b5be:	84 30       	cpi	r24, 0x04	; 4
    b5c0:	80 f4       	brcc	.+32     	; 0xb5e2 <collision_detect_level+0x3ce>
    b5c2:	00 23       	and	r16, r16
    b5c4:	c9 f0       	breq	.+50     	; 0xb5f8 <collision_detect_level+0x3e4>
					(solid_tile_2 && pixel_overlap(s->y-game.camera_y, y1_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD))
    b5c6:	30 91 b9 0d 	lds	r19, 0x0DB9
    b5ca:	64 2d       	mov	r22, r4
    b5cc:	63 1b       	sub	r22, r19
    b5ce:	ed 81       	ldd	r30, Y+5	; 0x05
    b5d0:	fe 81       	ldd	r31, Y+6	; 0x06
    b5d2:	82 81       	ldd	r24, Z+2	; 0x02
    b5d4:	28 e0       	ldi	r18, 0x08	; 8
    b5d6:	48 e0       	ldi	r20, 0x08	; 8
    b5d8:	83 1b       	sub	r24, r19
    b5da:	0e 94 fd 58 	call	0xb1fa	; 0xb1fa <pixel_overlap>
    b5de:	84 30       	cpi	r24, 0x04	; 4
    b5e0:	58 f0       	brcs	.+22     	; 0xb5f8 <collision_detect_level+0x3e4>
				{
					s->vx =  0;
    b5e2:	ed 81       	ldd	r30, Y+5	; 0x05
    b5e4:	fe 81       	ldd	r31, Y+6	; 0x06
    b5e6:	15 82       	std	Z+5, r1	; 0x05
					s->x = x0_tile * 8;
    b5e8:	f1 82       	std	Z+1, r15	; 0x01
    b5ea:	e0 82       	st	Z, r14
    b5ec:	20 16       	cp	r2, r16
    b5ee:	08 f4       	brcc	.+2      	; 0xb5f2 <collision_detect_level+0x3de>
    b5f0:	20 2e       	mov	r2, r16
    b5f2:	12 15       	cp	r17, r2
    b5f4:	08 f4       	brcc	.+2      	; 0xb5f8 <collision_detect_level+0x3e4>
    b5f6:	12 2d       	mov	r17, r2
	// Left and Right
	if (s->vx != 0)
	{
		y0_tile = s->y / 8;
		y1_tile = (s->y+7) / 8;
		for (u8 y = 0; y < tile_height; y++)
    b5f8:	53 94       	inc	r5
    b5fa:	4b cf       	rjmp	.-362    	; 0xb492 <collision_detect_level+0x27e>
				}
			}
		}
	}
	return result;
}
    b5fc:	81 2f       	mov	r24, r17
    b5fe:	26 96       	adiw	r28, 0x06	; 6
    b600:	0f b6       	in	r0, 0x3f	; 63
    b602:	f8 94       	cli
    b604:	de bf       	out	0x3e, r29	; 62
    b606:	0f be       	out	0x3f, r0	; 63
    b608:	cd bf       	out	0x3d, r28	; 61
    b60a:	df 91       	pop	r29
    b60c:	cf 91       	pop	r28
    b60e:	1f 91       	pop	r17
    b610:	0f 91       	pop	r16
    b612:	ff 90       	pop	r15
    b614:	ef 90       	pop	r14
    b616:	df 90       	pop	r13
    b618:	cf 90       	pop	r12
    b61a:	bf 90       	pop	r11
    b61c:	af 90       	pop	r10
    b61e:	9f 90       	pop	r9
    b620:	8f 90       	pop	r8
    b622:	7f 90       	pop	r7
    b624:	6f 90       	pop	r6
    b626:	5f 90       	pop	r5
    b628:	4f 90       	pop	r4
    b62a:	3f 90       	pop	r3
    b62c:	2f 90       	pop	r2
    b62e:	08 95       	ret

0000b630 <animate_shot>:
		player->active_shots++;
	}
}

void animate_shot(Player* player, Player* other_player, u8 shot_slot)
{
    b630:	2f 92       	push	r2
    b632:	3f 92       	push	r3
    b634:	4f 92       	push	r4
    b636:	5f 92       	push	r5
    b638:	6f 92       	push	r6
    b63a:	7f 92       	push	r7
    b63c:	8f 92       	push	r8
    b63e:	9f 92       	push	r9
    b640:	af 92       	push	r10
    b642:	bf 92       	push	r11
    b644:	cf 92       	push	r12
    b646:	df 92       	push	r13
    b648:	ef 92       	push	r14
    b64a:	ff 92       	push	r15
    b64c:	0f 93       	push	r16
    b64e:	1f 93       	push	r17
    b650:	cf 93       	push	r28
    b652:	df 93       	push	r29
    b654:	00 d0       	rcall	.+0      	; 0xb656 <animate_shot+0x26>
    b656:	00 d0       	rcall	.+0      	; 0xb658 <animate_shot+0x28>
    b658:	00 d0       	rcall	.+0      	; 0xb65a <animate_shot+0x2a>
    b65a:	cd b7       	in	r28, 0x3d	; 61
    b65c:	de b7       	in	r29, 0x3e	; 62
    b65e:	2c 01       	movw	r4, r24
    b660:	4b 01       	movw	r8, r22
    b662:	d4 2e       	mov	r13, r20
    b664:	3c 01       	movw	r6, r24
    b666:	28 e1       	ldi	r18, 0x18	; 24
    b668:	62 0e       	add	r6, r18
    b66a:	71 1c       	adc	r7, r1
    b66c:	0f 96       	adiw	r24, 0x0f	; 15
    b66e:	9e 83       	std	Y+6, r25	; 0x06
    b670:	8d 83       	std	Y+5, r24	; 0x05
	// Animate shots
	u8 slot = ENEMY_SLOT;
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
    b672:	10 e0       	ldi	r17, 0x00	; 0
							other_player->shield -= player->shot[i].hit_count;
							if (other_player->shield <= 0)
							{
								SFX_PLAYER_EXPLODE;
								other_player->shield = 0;
								other_player->flags = EXPLODING;
    b674:	30 e1       	ldi	r19, 0x10	; 16
    b676:	b3 2e       	mov	r11, r19
{
	// Animate shots
	u8 slot = ENEMY_SLOT;
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
	{
		if (player->shot[i].active)
    b678:	f3 01       	movw	r30, r6
    b67a:	80 81       	ld	r24, Z
    b67c:	88 23       	and	r24, r24
    b67e:	09 f4       	brne	.+2      	; 0xb682 <animate_shot+0x52>
    b680:	27 c1       	rjmp	.+590    	; 0xb8d0 <animate_shot+0x2a0>
		{
			player->shot[i].shared.x += LBMoveDelta(player->shot[i].shared.vx, game.frame_counter)*2;
    b682:	60 91 cb 0d 	lds	r22, 0x0DCB
    b686:	34 97       	sbiw	r30, 0x04	; 4
    b688:	80 81       	ld	r24, Z
    b68a:	0e 94 e2 4e 	call	0x9dc4	; 0x9dc4 <LBMoveDelta>
    b68e:	88 0f       	add	r24, r24
    b690:	99 1f       	adc	r25, r25
    b692:	ed 81       	ldd	r30, Y+5	; 0x05
    b694:	fe 81       	ldd	r31, Y+6	; 0x06
    b696:	20 81       	ld	r18, Z
    b698:	31 81       	ldd	r19, Z+1	; 0x01
    b69a:	82 0f       	add	r24, r18
    b69c:	93 1f       	adc	r25, r19
    b69e:	91 83       	std	Z+1, r25	; 0x01
    b6a0:	80 83       	st	Z, r24
			player->shot[i].shared.y += LBMoveDelta(player->shot[i].shared.vy, game.frame_counter);
    b6a2:	60 91 cb 0d 	lds	r22, 0x0DCB
    b6a6:	f3 01       	movw	r30, r6
    b6a8:	35 97       	sbiw	r30, 0x05	; 5
    b6aa:	80 81       	ld	r24, Z
    b6ac:	0e 94 e2 4e 	call	0x9dc4	; 0x9dc4 <LBMoveDelta>
    b6b0:	ed 81       	ldd	r30, Y+5	; 0x05
    b6b2:	fe 81       	ldd	r31, Y+6	; 0x06
    b6b4:	42 81       	ldd	r20, Z+2	; 0x02
    b6b6:	53 81       	ldd	r21, Z+3	; 0x03
    b6b8:	84 0f       	add	r24, r20
    b6ba:	95 1f       	adc	r25, r21
    b6bc:	93 83       	std	Z+3, r25	; 0x03
    b6be:	82 83       	std	Z+2, r24	; 0x02
    b6c0:	f1 2e       	mov	r15, r17
    b6c2:	fd 0c       	add	r15, r13
			LBMoveSprite(shot_slot+i, player->shot[i].shared.x - game.camera_x, player->shot[i].shared.y - game.camera_y, 1, 1);
    b6c4:	90 91 b9 0d 	lds	r25, 0x0DB9
    b6c8:	48 2f       	mov	r20, r24
    b6ca:	49 1b       	sub	r20, r25
    b6cc:	60 81       	ld	r22, Z
    b6ce:	80 91 b1 0d 	lds	r24, 0x0DB1
    b6d2:	68 1b       	sub	r22, r24
    b6d4:	01 e0       	ldi	r16, 0x01	; 1
    b6d6:	21 e0       	ldi	r18, 0x01	; 1
    b6d8:	8f 2d       	mov	r24, r15
    b6da:	0e 94 c5 50 	call	0xa18a	; 0xa18a <LBMoveSprite>
			if (player->shot[i].shared.x < game.camera_x || player->shot[i].shared.x+8 > game.camera_x + CAMERA_WIDTH*8 ||
    b6de:	ed 81       	ldd	r30, Y+5	; 0x05
    b6e0:	fe 81       	ldd	r31, Y+6	; 0x06
    b6e2:	20 81       	ld	r18, Z
    b6e4:	31 81       	ldd	r19, Z+1	; 0x01
    b6e6:	80 91 b1 0d 	lds	r24, 0x0DB1
    b6ea:	90 91 b2 0d 	lds	r25, 0x0DB2
    b6ee:	28 17       	cp	r18, r24
    b6f0:	39 07       	cpc	r19, r25
    b6f2:	08 f4       	brcc	.+2      	; 0xb6f6 <animate_shot+0xc6>
    b6f4:	e0 c0       	rjmp	.+448    	; 0xb8b6 <animate_shot+0x286>
    b6f6:	28 5f       	subi	r18, 0xF8	; 248
    b6f8:	3f 4f       	sbci	r19, 0xFF	; 255
    b6fa:	80 52       	subi	r24, 0x20	; 32
    b6fc:	9f 4f       	sbci	r25, 0xFF	; 255
    b6fe:	82 17       	cp	r24, r18
    b700:	93 07       	cpc	r25, r19
    b702:	08 f4       	brcc	.+2      	; 0xb706 <animate_shot+0xd6>
    b704:	d8 c0       	rjmp	.+432    	; 0xb8b6 <animate_shot+0x286>
			    collision_detect_level(&player->shot[i].shared, 1, 1))
    b706:	41 e0       	ldi	r20, 0x01	; 1
    b708:	61 e0       	ldi	r22, 0x01	; 1
    b70a:	8d 81       	ldd	r24, Y+5	; 0x05
    b70c:	9e 81       	ldd	r25, Y+6	; 0x06
    b70e:	0e 94 0a 59 	call	0xb214	; 0xb214 <collision_detect_level>
		if (player->shot[i].active)
		{
			player->shot[i].shared.x += LBMoveDelta(player->shot[i].shared.vx, game.frame_counter)*2;
			player->shot[i].shared.y += LBMoveDelta(player->shot[i].shared.vy, game.frame_counter);
			LBMoveSprite(shot_slot+i, player->shot[i].shared.x - game.camera_x, player->shot[i].shared.y - game.camera_y, 1, 1);
			if (player->shot[i].shared.x < game.camera_x || player->shot[i].shared.x+8 > game.camera_x + CAMERA_WIDTH*8 ||
    b712:	81 11       	cpse	r24, r1
    b714:	d0 c0       	rjmp	.+416    	; 0xb8b6 <animate_shot+0x286>
    b716:	87 ec       	ldi	r24, 0xC7	; 199
    b718:	28 2e       	mov	r2, r24
    b71a:	8e e0       	ldi	r24, 0x0E	; 14
    b71c:	38 2e       	mov	r3, r24
    b71e:	1a 82       	std	Y+2, r1	; 0x02
    b720:	19 82       	std	Y+1, r1	; 0x01
    b722:	93 01       	movw	r18, r6
    b724:	21 50       	subi	r18, 0x01	; 1
    b726:	31 09       	sbc	r19, r1
    b728:	3c 83       	std	Y+4, r19	; 0x04
    b72a:	2b 83       	std	Y+3, r18	; 0x03
    b72c:	f1 01       	movw	r30, r2
    b72e:	34 97       	sbiw	r30, 0x04	; 4
			else
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
				{
					if (game.enemies[j].enemy_type != ENEMY_PROJECTILE_HAZARD && game.enemies[j].active &&
    b730:	80 81       	ld	r24, Z
    b732:	82 30       	cpi	r24, 0x02	; 2
    b734:	09 f4       	brne	.+2      	; 0xb738 <animate_shot+0x108>
    b736:	65 c0       	rjmp	.+202    	; 0xb802 <animate_shot+0x1d2>
    b738:	35 97       	sbiw	r30, 0x05	; 5
    b73a:	80 81       	ld	r24, Z
    b73c:	88 23       	and	r24, r24
    b73e:	09 f4       	brne	.+2      	; 0xb742 <animate_shot+0x112>
    b740:	60 c0       	rjmp	.+192    	; 0xb802 <animate_shot+0x1d2>
					    LBCollides(player->shot[i].shared.x-game.camera_x,player->shot[i].shared.y, 8, 8,
    b742:	90 91 b1 0d 	lds	r25, 0x0DB1
    b746:	34 96       	adiw	r30, 0x04	; 4
    b748:	a0 80       	ld	r10, Z
    b74a:	aa 0c       	add	r10, r10
    b74c:	aa 0c       	add	r10, r10
    b74e:	aa 0c       	add	r10, r10
    b750:	31 97       	sbiw	r30, 0x01	; 1
    b752:	c0 80       	ld	r12, Z
    b754:	cc 0c       	add	r12, r12
    b756:	cc 0c       	add	r12, r12
    b758:	cc 0c       	add	r12, r12
    b75a:	3a 97       	sbiw	r30, 0x0a	; 10
    b75c:	00 81       	ld	r16, Z
    b75e:	09 1b       	sub	r16, r25
    b760:	ed 81       	ldd	r30, Y+5	; 0x05
    b762:	fe 81       	ldd	r31, Y+6	; 0x06
    b764:	80 81       	ld	r24, Z
    b766:	f1 01       	movw	r30, r2
    b768:	3e 97       	sbiw	r30, 0x0e	; 14
    b76a:	e0 80       	ld	r14, Z
    b76c:	28 e0       	ldi	r18, 0x08	; 8
    b76e:	48 e0       	ldi	r20, 0x08	; 8
    b770:	ed 81       	ldd	r30, Y+5	; 0x05
    b772:	fe 81       	ldd	r31, Y+6	; 0x06
    b774:	62 81       	ldd	r22, Z+2	; 0x02
    b776:	89 1b       	sub	r24, r25
    b778:	0e 94 24 50 	call	0xa048	; 0xa048 <LBCollides>
			else
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
				{
					if (game.enemies[j].enemy_type != ENEMY_PROJECTILE_HAZARD && game.enemies[j].active &&
    b77c:	88 23       	and	r24, r24
    b77e:	09 f4       	brne	.+2      	; 0xb782 <animate_shot+0x152>
    b780:	40 c0       	rjmp	.+128    	; 0xb802 <animate_shot+0x1d2>
					    LBCollides(player->shot[i].shared.x-game.camera_x,player->shot[i].shared.y, 8, 8,
							game.enemies[j].shared.x-game.camera_x, game.enemies[j].shared.y, game.enemies[j].width*8, game.enemies[j].height*8
						)
					)
					{
						SFX_HIT;
    b782:	41 e0       	ldi	r20, 0x01	; 1
    b784:	6f ef       	ldi	r22, 0xFF	; 255
    b786:	84 e0       	ldi	r24, 0x04	; 4
    b788:	0e 94 8b 43 	call	0x8716	; 0x8716 <TriggerFx>
						game.enemies[j].shield -= player->shot[i].hit_count;
    b78c:	f1 01       	movw	r30, r2
    b78e:	80 81       	ld	r24, Z
    b790:	eb 81       	ldd	r30, Y+3	; 0x03
    b792:	fc 81       	ldd	r31, Y+4	; 0x04
    b794:	90 81       	ld	r25, Z
    b796:	89 1b       	sub	r24, r25
    b798:	f1 01       	movw	r30, r2
    b79a:	80 83       	st	Z, r24
						if (game.enemies[j].shield <= 0)
    b79c:	18 16       	cp	r1, r24
    b79e:	24 f1       	brlt	.+72     	; 0xb7e8 <animate_shot+0x1b8>
						{
							SFX_ENEMY_EXPLODE;
    b7a0:	41 e0       	ldi	r20, 0x01	; 1
    b7a2:	6f ef       	ldi	r22, 0xFF	; 255
    b7a4:	86 e0       	ldi	r24, 0x06	; 6
    b7a6:	0e 94 8b 43 	call	0x8716	; 0x8716 <TriggerFx>
							game.enemies[j].flags = EXPLODING;
    b7aa:	43 e3       	ldi	r20, 0x33	; 51
    b7ac:	29 81       	ldd	r18, Y+1	; 0x01
    b7ae:	3a 81       	ldd	r19, Y+2	; 0x02
    b7b0:	42 9f       	mul	r20, r18
    b7b2:	c0 01       	movw	r24, r0
    b7b4:	43 9f       	mul	r20, r19
    b7b6:	90 0d       	add	r25, r0
    b7b8:	11 24       	eor	r1, r1
    b7ba:	8f 54       	subi	r24, 0x4F	; 79
    b7bc:	92 4f       	sbci	r25, 0xF2	; 242
    b7be:	fc 01       	movw	r30, r24
    b7c0:	e2 5f       	subi	r30, 0xF2	; 242
    b7c2:	fe 4f       	sbci	r31, 0xFE	; 254
    b7c4:	b0 82       	st	Z, r11
							game.enemies[j].active = 0;
    b7c6:	31 97       	sbiw	r30, 0x01	; 1
    b7c8:	10 82       	st	Z, r1
							game.active_enemies--;
    b7ca:	80 91 cc 0d 	lds	r24, 0x0DCC
    b7ce:	81 50       	subi	r24, 0x01	; 1
    b7d0:	80 93 cc 0d 	sts	0x0DCC, r24
							game.level_score += KILL_SCORE;
    b7d4:	80 91 b5 0d 	lds	r24, 0x0DB5
    b7d8:	90 91 b6 0d 	lds	r25, 0x0DB6
    b7dc:	0a 96       	adiw	r24, 0x0a	; 10
    b7de:	90 93 b6 0d 	sts	0x0DB6, r25
    b7e2:	80 93 b5 0d 	sts	0x0DB5, r24
							break;
    b7e6:	1b c0       	rjmp	.+54     	; 0xb81e <animate_shot+0x1ee>
						}
						player->shot[i].active = 0;
    b7e8:	f3 01       	movw	r30, r6
    b7ea:	10 82       	st	Z, r1
						player->active_shots--;
    b7ec:	f2 01       	movw	r30, r4
    b7ee:	87 81       	ldd	r24, Z+7	; 0x07
    b7f0:	81 50       	subi	r24, 0x01	; 1
    b7f2:	87 83       	std	Z+7, r24	; 0x07
						LBMoveSprite(shot_slot+i, OFF_SCREEN, 0, 1, 1);
    b7f4:	01 e0       	ldi	r16, 0x01	; 1
    b7f6:	21 e0       	ldi	r18, 0x01	; 1
    b7f8:	40 e0       	ldi	r20, 0x00	; 0
    b7fa:	60 ee       	ldi	r22, 0xE0	; 224
    b7fc:	8f 2d       	mov	r24, r15
    b7fe:	0e 94 c5 50 	call	0xa18a	; 0xa18a <LBMoveSprite>
    b802:	29 81       	ldd	r18, Y+1	; 0x01
    b804:	3a 81       	ldd	r19, Y+2	; 0x02
    b806:	2f 5f       	subi	r18, 0xFF	; 255
    b808:	3f 4f       	sbci	r19, 0xFF	; 255
    b80a:	3a 83       	std	Y+2, r19	; 0x02
    b80c:	29 83       	std	Y+1, r18	; 0x01
    b80e:	33 e3       	ldi	r19, 0x33	; 51
    b810:	23 0e       	add	r2, r19
    b812:	31 1c       	adc	r3, r1
				LBMoveSprite(shot_slot+i, OFF_SCREEN, 0, 1, 1);
			}
			else
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
    b814:	89 81       	ldd	r24, Y+1	; 0x01
    b816:	9a 81       	ldd	r25, Y+2	; 0x02
    b818:	05 97       	sbiw	r24, 0x05	; 5
    b81a:	09 f0       	breq	.+2      	; 0xb81e <animate_shot+0x1ee>
    b81c:	87 cf       	rjmp	.-242    	; 0xb72c <animate_shot+0xfc>
					}
					slot += game.enemies[j].width*game.enemies[j].height;
				}
				
				// Boss interaction
				if (!(other_player == &game.player && DEBUG_GODMODE) && other_player->active)
    b81e:	9f ec       	ldi	r25, 0xCF	; 207
    b820:	89 16       	cp	r8, r25
    b822:	9d e0       	ldi	r25, 0x0D	; 13
    b824:	99 06       	cpc	r9, r25
    b826:	09 f4       	brne	.+2      	; 0xb82a <animate_shot+0x1fa>
    b828:	53 c0       	rjmp	.+166    	; 0xb8d0 <animate_shot+0x2a0>
    b82a:	f4 01       	movw	r30, r8
    b82c:	85 85       	ldd	r24, Z+13	; 0x0d
    b82e:	88 23       	and	r24, r24
    b830:	09 f4       	brne	.+2      	; 0xb834 <animate_shot+0x204>
    b832:	4e c0       	rjmp	.+156    	; 0xb8d0 <animate_shot+0x2a0>
				{
					if (LBCollides(player->shot[i].shared.x-game.camera_x,player->shot[i].shared.y, 8, 8,
    b834:	90 91 b1 0d 	lds	r25, 0x0DB1
    b838:	a4 84       	ldd	r10, Z+12	; 0x0c
    b83a:	aa 0c       	add	r10, r10
    b83c:	aa 0c       	add	r10, r10
    b83e:	aa 0c       	add	r10, r10
    b840:	c3 84       	ldd	r12, Z+11	; 0x0b
    b842:	cc 0c       	add	r12, r12
    b844:	cc 0c       	add	r12, r12
    b846:	cc 0c       	add	r12, r12
    b848:	00 81       	ld	r16, Z
    b84a:	09 1b       	sub	r16, r25
    b84c:	ed 81       	ldd	r30, Y+5	; 0x05
    b84e:	fe 81       	ldd	r31, Y+6	; 0x06
    b850:	80 81       	ld	r24, Z
    b852:	f4 01       	movw	r30, r8
    b854:	e2 80       	ldd	r14, Z+2	; 0x02
    b856:	28 e0       	ldi	r18, 0x08	; 8
    b858:	48 e0       	ldi	r20, 0x08	; 8
    b85a:	ed 81       	ldd	r30, Y+5	; 0x05
    b85c:	fe 81       	ldd	r31, Y+6	; 0x06
    b85e:	62 81       	ldd	r22, Z+2	; 0x02
    b860:	89 1b       	sub	r24, r25
    b862:	0e 94 24 50 	call	0xa048	; 0xa048 <LBCollides>
    b866:	88 23       	and	r24, r24
    b868:	99 f1       	breq	.+102    	; 0xb8d0 <animate_shot+0x2a0>
								other_player->shared.x-game.camera_x, other_player->shared.y, other_player->width*8, other_player->height*8
							)
						)
						{
							SFX_HIT;
    b86a:	41 e0       	ldi	r20, 0x01	; 1
    b86c:	6f ef       	ldi	r22, 0xFF	; 255
    b86e:	84 e0       	ldi	r24, 0x04	; 4
    b870:	0e 94 8b 43 	call	0x8716	; 0x8716 <TriggerFx>
							other_player->shield -= player->shot[i].hit_count;
    b874:	f4 01       	movw	r30, r8
    b876:	86 85       	ldd	r24, Z+14	; 0x0e
    b878:	f3 01       	movw	r30, r6
    b87a:	31 97       	sbiw	r30, 0x01	; 1
    b87c:	90 81       	ld	r25, Z
    b87e:	89 1b       	sub	r24, r25
    b880:	f4 01       	movw	r30, r8
    b882:	86 87       	std	Z+14, r24	; 0x0e
							if (other_player->shield <= 0)
    b884:	18 16       	cp	r1, r24
    b886:	bc f0       	brlt	.+46     	; 0xb8b6 <animate_shot+0x286>
							{
								SFX_PLAYER_EXPLODE;
    b888:	41 e0       	ldi	r20, 0x01	; 1
    b88a:	6f ef       	ldi	r22, 0xFF	; 255
    b88c:	85 e0       	ldi	r24, 0x05	; 5
    b88e:	0e 94 8b 43 	call	0x8716	; 0x8716 <TriggerFx>
								other_player->shield = 0;
    b892:	f4 01       	movw	r30, r8
    b894:	16 86       	std	Z+14, r1	; 0x0e
								other_player->flags = EXPLODING;
    b896:	b0 86       	std	Z+8, r11	; 0x08
								if (other_player == &game.boss) game.level_score += BOSS_KILL_SCORE;
    b898:	f3 e4       	ldi	r31, 0x43	; 67
    b89a:	8f 16       	cp	r8, r31
    b89c:	fe e0       	ldi	r31, 0x0E	; 14
    b89e:	9f 06       	cpc	r9, r31
    b8a0:	51 f4       	brne	.+20     	; 0xb8b6 <animate_shot+0x286>
    b8a2:	80 91 b5 0d 	lds	r24, 0x0DB5
    b8a6:	90 91 b6 0d 	lds	r25, 0x0DB6
    b8aa:	8c 59       	subi	r24, 0x9C	; 156
    b8ac:	9f 4f       	sbci	r25, 0xFF	; 255
    b8ae:	90 93 b6 0d 	sts	0x0DB6, r25
    b8b2:	80 93 b5 0d 	sts	0x0DB5, r24
							}
							player->shot[i].active = 0;
    b8b6:	f3 01       	movw	r30, r6
    b8b8:	10 82       	st	Z, r1
							player->active_shots--;
    b8ba:	f2 01       	movw	r30, r4
    b8bc:	87 81       	ldd	r24, Z+7	; 0x07
    b8be:	81 50       	subi	r24, 0x01	; 1
    b8c0:	87 83       	std	Z+7, r24	; 0x07
							LBMoveSprite(shot_slot+i, OFF_SCREEN, 0, 1, 1);
    b8c2:	01 e0       	ldi	r16, 0x01	; 1
    b8c4:	21 e0       	ldi	r18, 0x01	; 1
    b8c6:	40 e0       	ldi	r20, 0x00	; 0
    b8c8:	60 ee       	ldi	r22, 0xE0	; 224
    b8ca:	8f 2d       	mov	r24, r15
    b8cc:	0e 94 c5 50 	call	0xa18a	; 0xa18a <LBMoveSprite>

void animate_shot(Player* player, Player* other_player, u8 shot_slot)
{
	// Animate shots
	u8 slot = ENEMY_SLOT;
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
    b8d0:	1f 5f       	subi	r17, 0xFF	; 255
    b8d2:	f2 e1       	ldi	r31, 0x12	; 18
    b8d4:	6f 0e       	add	r6, r31
    b8d6:	71 1c       	adc	r7, r1
    b8d8:	2d 81       	ldd	r18, Y+5	; 0x05
    b8da:	3e 81       	ldd	r19, Y+6	; 0x06
    b8dc:	2e 5e       	subi	r18, 0xEE	; 238
    b8de:	3f 4f       	sbci	r19, 0xFF	; 255
    b8e0:	3e 83       	std	Y+6, r19	; 0x06
    b8e2:	2d 83       	std	Y+5, r18	; 0x05
    b8e4:	13 30       	cpi	r17, 0x03	; 3
    b8e6:	09 f0       	breq	.+2      	; 0xb8ea <animate_shot+0x2ba>
    b8e8:	c7 ce       	rjmp	.-626    	; 0xb678 <animate_shot+0x48>
						}
				}
			}
		}
	}
}
    b8ea:	26 96       	adiw	r28, 0x06	; 6
    b8ec:	0f b6       	in	r0, 0x3f	; 63
    b8ee:	f8 94       	cli
    b8f0:	de bf       	out	0x3e, r29	; 62
    b8f2:	0f be       	out	0x3f, r0	; 63
    b8f4:	cd bf       	out	0x3d, r28	; 61
    b8f6:	df 91       	pop	r29
    b8f8:	cf 91       	pop	r28
    b8fa:	1f 91       	pop	r17
    b8fc:	0f 91       	pop	r16
    b8fe:	ff 90       	pop	r15
    b900:	ef 90       	pop	r14
    b902:	df 90       	pop	r13
    b904:	cf 90       	pop	r12
    b906:	bf 90       	pop	r11
    b908:	af 90       	pop	r10
    b90a:	9f 90       	pop	r9
    b90c:	8f 90       	pop	r8
    b90e:	7f 90       	pop	r7
    b910:	6f 90       	pop	r6
    b912:	5f 90       	pop	r5
    b914:	4f 90       	pop	r4
    b916:	3f 90       	pop	r3
    b918:	2f 90       	pop	r2
    b91a:	08 95       	ret

0000b91c <map_explosion>:
	}
	return result;
}

u8 map_explosion(u8* flags, Animation* anim, u8 slot, u8 width, u8 height)
{
    b91c:	7f 92       	push	r7
    b91e:	8f 92       	push	r8
    b920:	9f 92       	push	r9
    b922:	af 92       	push	r10
    b924:	bf 92       	push	r11
    b926:	cf 92       	push	r12
    b928:	df 92       	push	r13
    b92a:	ef 92       	push	r14
    b92c:	ff 92       	push	r15
    b92e:	0f 93       	push	r16
    b930:	1f 93       	push	r17
    b932:	cf 93       	push	r28
    b934:	df 93       	push	r29
    b936:	1f 92       	push	r1
    b938:	cd b7       	in	r28, 0x3d	; 61
    b93a:	de b7       	in	r29, 0x3e	; 62
    b93c:	6c 01       	movw	r12, r24
    b93e:	7b 01       	movw	r14, r22
    b940:	74 2e       	mov	r7, r20
	char* frame;
	frame = LBGetNextFrame(anim);
    b942:	cb 01       	movw	r24, r22
    b944:	29 83       	std	Y+1, r18	; 0x01
    b946:	0e 94 0d 4f 	call	0x9e1a	; 0x9e1a <LBGetNextFrame>
    b94a:	4c 01       	movw	r8, r24
	for (u8 i = 0; i < width*height; i++)
    b94c:	29 81       	ldd	r18, Y+1	; 0x01
    b94e:	20 9f       	mul	r18, r16
    b950:	50 01       	movw	r10, r0
    b952:	11 24       	eor	r1, r1
    b954:	10 e0       	ldi	r17, 0x00	; 0
    b956:	81 2f       	mov	r24, r17
    b958:	90 e0       	ldi	r25, 0x00	; 0
    b95a:	8a 15       	cp	r24, r10
    b95c:	9b 05       	cpc	r25, r11
    b95e:	54 f4       	brge	.+20     	; 0xb974 <map_explosion+0x58>
	{
		LBMapSprite(slot+i, frame, 0);
    b960:	40 e0       	ldi	r20, 0x00	; 0
    b962:	b4 01       	movw	r22, r8
    b964:	81 2f       	mov	r24, r17
    b966:	87 0d       	add	r24, r7
    b968:	29 83       	std	Y+1, r18	; 0x01
    b96a:	0e 94 73 50 	call	0xa0e6	; 0xa0e6 <LBMapSprite>

u8 map_explosion(u8* flags, Animation* anim, u8 slot, u8 width, u8 height)
{
	char* frame;
	frame = LBGetNextFrame(anim);
	for (u8 i = 0; i < width*height; i++)
    b96e:	1f 5f       	subi	r17, 0xFF	; 255
    b970:	29 81       	ldd	r18, Y+1	; 0x01
    b972:	f1 cf       	rjmp	.-30     	; 0xb956 <map_explosion+0x3a>
	{
		LBMapSprite(slot+i, frame, 0);
	}
	if (anim->looped)
    b974:	f7 01       	movw	r30, r14
    b976:	84 81       	ldd	r24, Z+4	; 0x04
    b978:	88 23       	and	r24, r24
    b97a:	51 f0       	breq	.+20     	; 0xb990 <map_explosion+0x74>
	{
		*flags ^= EXPLODING;
    b97c:	f6 01       	movw	r30, r12
    b97e:	80 81       	ld	r24, Z
    b980:	90 e1       	ldi	r25, 0x10	; 16
    b982:	98 27       	eor	r25, r24
    b984:	90 83       	st	Z, r25
		LBMoveSprite(slot, OFF_SCREEN, 0, width, height);
    b986:	40 e0       	ldi	r20, 0x00	; 0
    b988:	60 ee       	ldi	r22, 0xE0	; 224
    b98a:	87 2d       	mov	r24, r7
    b98c:	0e 94 c5 50 	call	0xa18a	; 0xa18a <LBMoveSprite>
	}
	return anim->looped;
}
    b990:	f7 01       	movw	r30, r14
    b992:	84 81       	ldd	r24, Z+4	; 0x04
    b994:	0f 90       	pop	r0
    b996:	df 91       	pop	r29
    b998:	cf 91       	pop	r28
    b99a:	1f 91       	pop	r17
    b99c:	0f 91       	pop	r16
    b99e:	ff 90       	pop	r15
    b9a0:	ef 90       	pop	r14
    b9a2:	df 90       	pop	r13
    b9a4:	cf 90       	pop	r12
    b9a6:	bf 90       	pop	r11
    b9a8:	af 90       	pop	r10
    b9aa:	9f 90       	pop	r9
    b9ac:	8f 90       	pop	r8
    b9ae:	7f 90       	pop	r7
    b9b0:	08 95       	ret

0000b9b2 <animate_sprite>:

u8 animate_sprite(SpriteShared* s, u8 slot, u8 width, u8 height, u8 level_hazard, u8 origin_tile)
{
    b9b2:	8f 92       	push	r8
    b9b4:	9f 92       	push	r9
    b9b6:	af 92       	push	r10
    b9b8:	bf 92       	push	r11
    b9ba:	cf 92       	push	r12
    b9bc:	df 92       	push	r13
    b9be:	ef 92       	push	r14
    b9c0:	ff 92       	push	r15
    b9c2:	0f 93       	push	r16
    b9c4:	1f 93       	push	r17
    b9c6:	cf 93       	push	r28
    b9c8:	df 93       	push	r29
    b9ca:	ec 01       	movw	r28, r24
    b9cc:	c6 2e       	mov	r12, r22
    b9ce:	14 2f       	mov	r17, r20
    b9d0:	d2 2e       	mov	r13, r18
	u8 result;
	
	s->vy = s->vy + s->gravity*FRAME_TIME;
    b9d2:	6c 81       	ldd	r22, Y+4	; 0x04
    b9d4:	77 27       	eor	r23, r23
    b9d6:	67 fd       	sbrc	r22, 7
    b9d8:	70 95       	com	r23
    b9da:	87 2f       	mov	r24, r23
    b9dc:	97 2f       	mov	r25, r23
    b9de:	0e 94 92 6c 	call	0xd924	; 0xd924 <__floatsisf>
    b9e2:	4b 01       	movw	r8, r22
    b9e4:	5c 01       	movw	r10, r24
    b9e6:	8e 81       	ldd	r24, Y+6	; 0x06
    b9e8:	68 2f       	mov	r22, r24
    b9ea:	70 e0       	ldi	r23, 0x00	; 0
    b9ec:	80 e0       	ldi	r24, 0x00	; 0
    b9ee:	90 e0       	ldi	r25, 0x00	; 0
    b9f0:	0e 94 92 6c 	call	0xd924	; 0xd924 <__floatsisf>
    b9f4:	29 e8       	ldi	r18, 0x89	; 137
    b9f6:	38 e8       	ldi	r19, 0x88	; 136
    b9f8:	48 e8       	ldi	r20, 0x88	; 136
    b9fa:	5c e3       	ldi	r21, 0x3C	; 60
    b9fc:	0e 94 1e 6d 	call	0xda3c	; 0xda3c <__mulsf3>
    ba00:	9b 01       	movw	r18, r22
    ba02:	ac 01       	movw	r20, r24
    ba04:	c5 01       	movw	r24, r10
    ba06:	b4 01       	movw	r22, r8
    ba08:	0e 94 fb 6b 	call	0xd7f6	; 0xd7f6 <__addsf3>
    ba0c:	0e 94 5f 6c 	call	0xd8be	; 0xd8be <__fixsfsi>
	if (s->vy > MAX_SPEED) s->vy = MAX_SPEED;
    ba10:	69 37       	cpi	r22, 0x79	; 121
    ba12:	14 f4       	brge	.+4      	; 0xba18 <animate_sprite+0x66>

u8 animate_sprite(SpriteShared* s, u8 slot, u8 width, u8 height, u8 level_hazard, u8 origin_tile)
{
	u8 result;
	
	s->vy = s->vy + s->gravity*FRAME_TIME;
    ba14:	6c 83       	std	Y+4, r22	; 0x04
    ba16:	02 c0       	rjmp	.+4      	; 0xba1c <animate_sprite+0x6a>
	if (s->vy > MAX_SPEED) s->vy = MAX_SPEED;
    ba18:	88 e7       	ldi	r24, 0x78	; 120
    ba1a:	8c 83       	std	Y+4, r24	; 0x04
	s->x += LBMoveDelta(s->vx, game.frame_counter);
    ba1c:	60 91 cb 0d 	lds	r22, 0x0DCB
    ba20:	8d 81       	ldd	r24, Y+5	; 0x05
    ba22:	0e 94 e2 4e 	call	0x9dc4	; 0x9dc4 <LBMoveDelta>
    ba26:	28 81       	ld	r18, Y
    ba28:	39 81       	ldd	r19, Y+1	; 0x01
    ba2a:	82 0f       	add	r24, r18
    ba2c:	93 1f       	adc	r25, r19
    ba2e:	99 83       	std	Y+1, r25	; 0x01
    ba30:	88 83       	st	Y, r24
	s->y += LBMoveDelta(s->vy, game.frame_counter);
    ba32:	60 91 cb 0d 	lds	r22, 0x0DCB
    ba36:	8c 81       	ldd	r24, Y+4	; 0x04
    ba38:	0e 94 e2 4e 	call	0x9dc4	; 0x9dc4 <LBMoveDelta>
    ba3c:	ea 81       	ldd	r30, Y+2	; 0x02
    ba3e:	fb 81       	ldd	r31, Y+3	; 0x03
    ba40:	8e 0f       	add	r24, r30
    ba42:	9f 1f       	adc	r25, r31
    ba44:	9b 83       	std	Y+3, r25	; 0x03
    ba46:	8a 83       	std	Y+2, r24	; 0x02
	result = collision_detect_level(s, width, height);
    ba48:	4d 2d       	mov	r20, r13
    ba4a:	61 2f       	mov	r22, r17
    ba4c:	ce 01       	movw	r24, r28
    ba4e:	0e 94 0a 59 	call	0xb214	; 0xb214 <collision_detect_level>
    ba52:	b8 2e       	mov	r11, r24
	if(result && level_hazard)
    ba54:	88 23       	and	r24, r24
    ba56:	41 f0       	breq	.+16     	; 0xba68 <animate_sprite+0xb6>
    ba58:	00 23       	and	r16, r16
    ba5a:	31 f0       	breq	.+12     	; 0xba68 <animate_sprite+0xb6>
	{
		s->y = origin_tile*8;
    ba5c:	88 e0       	ldi	r24, 0x08	; 8
    ba5e:	e8 9e       	mul	r14, r24
    ba60:	70 01       	movw	r14, r0
    ba62:	11 24       	eor	r1, r1
    ba64:	fb 82       	std	Y+3, r15	; 0x03
    ba66:	ea 82       	std	Y+2, r14	; 0x02
	}
	LBMoveSprite(slot, s->x - game.camera_x, s->y - game.camera_y, width, height);
    ba68:	3a 81       	ldd	r19, Y+2	; 0x02
    ba6a:	80 91 b9 0d 	lds	r24, 0x0DB9
    ba6e:	43 2f       	mov	r20, r19
    ba70:	48 1b       	sub	r20, r24
    ba72:	98 81       	ld	r25, Y
    ba74:	80 91 b1 0d 	lds	r24, 0x0DB1
    ba78:	69 2f       	mov	r22, r25
    ba7a:	68 1b       	sub	r22, r24
    ba7c:	0d 2d       	mov	r16, r13
    ba7e:	21 2f       	mov	r18, r17
    ba80:	8c 2d       	mov	r24, r12
    ba82:	0e 94 c5 50 	call	0xa18a	; 0xa18a <LBMoveSprite>
	return result;
}
    ba86:	8b 2d       	mov	r24, r11
    ba88:	df 91       	pop	r29
    ba8a:	cf 91       	pop	r28
    ba8c:	1f 91       	pop	r17
    ba8e:	0f 91       	pop	r16
    ba90:	ff 90       	pop	r15
    ba92:	ef 90       	pop	r14
    ba94:	df 90       	pop	r13
    ba96:	cf 90       	pop	r12
    ba98:	bf 90       	pop	r11
    ba9a:	af 90       	pop	r10
    ba9c:	9f 90       	pop	r9
    ba9e:	8f 90       	pop	r8
    baa0:	08 95       	ret

0000baa2 <animate_player>:

void animate_player(Player* player, Player* other_player, u8 slot)
{
    baa2:	ef 92       	push	r14
    baa4:	0f 93       	push	r16
    baa6:	fc 01       	movw	r30, r24
    baa8:	84 2f       	mov	r24, r20
	if (player->flags & EXPLODING)
    baaa:	90 85       	ldd	r25, Z+8	; 0x08
    baac:	94 ff       	sbrs	r25, 4
    baae:	0f c0       	rjmp	.+30     	; 0xbace <animate_player+0x2c>
	{
		LBMoveSprite(slot, player->shared.x - game.camera_x, player->shared.y - game.camera_y, player->width, player->height);
    bab0:	92 81       	ldd	r25, Z+2	; 0x02
    bab2:	20 91 b9 0d 	lds	r18, 0x0DB9
    bab6:	49 2f       	mov	r20, r25
    bab8:	42 1b       	sub	r20, r18
    baba:	90 81       	ld	r25, Z
    babc:	20 91 b1 0d 	lds	r18, 0x0DB1
    bac0:	69 2f       	mov	r22, r25
    bac2:	62 1b       	sub	r22, r18
    bac4:	04 85       	ldd	r16, Z+12	; 0x0c
    bac6:	23 85       	ldd	r18, Z+11	; 0x0b
    bac8:	0e 94 c5 50 	call	0xa18a	; 0xa18a <LBMoveSprite>
    bacc:	08 c0       	rjmp	.+16     	; 0xbade <animate_player+0x3c>
	{
		SFX_PLAYER_EXPLODE;
		other_player->shield = 0;
		other_player->flags = EXPLODING;
	}
	else if (animate_sprite(&player->shared, slot, player->width, player->height, 0, 0) > 1 && !DEBUG_GODMODE)
    bace:	e1 2c       	mov	r14, r1
    bad0:	00 e0       	ldi	r16, 0x00	; 0
    bad2:	24 85       	ldd	r18, Z+12	; 0x0c
    bad4:	43 85       	ldd	r20, Z+11	; 0x0b
    bad6:	68 2f       	mov	r22, r24
    bad8:	cf 01       	movw	r24, r30
    bada:	0e 94 d9 5c 	call	0xb9b2	; 0xb9b2 <animate_sprite>
	{
		SFX_PLAYER_EXPLODE;
		game.player.shield = 0;
		game.player.flags = EXPLODING;
	}
}
    bade:	0f 91       	pop	r16
    bae0:	ef 90       	pop	r14
    bae2:	08 95       	ret

0000bae4 <update_spider_enemy>:

void update_spider_enemy(Enemy* e, u8 slot)
{
    bae4:	1f 93       	push	r17
    bae6:	cf 93       	push	r28
    bae8:	df 93       	push	r29
    baea:	ec 01       	movw	r28, r24
    baec:	16 2f       	mov	r17, r22
	if (e->flags & IDLE && e->frame_count == SPIDER_IDLE_FRAMES)
    baee:	98 85       	ldd	r25, Y+8	; 0x08
    baf0:	89 2f       	mov	r24, r25
    baf2:	88 70       	andi	r24, 0x08	; 8
    baf4:	93 ff       	sbrs	r25, 3
    baf6:	14 c0       	rjmp	.+40     	; 0xbb20 <update_spider_enemy+0x3c>
    baf8:	2d 85       	ldd	r18, Y+13	; 0x0d
    bafa:	20 38       	cpi	r18, 0x80	; 128
    bafc:	89 f4       	brne	.+34     	; 0xbb20 <update_spider_enemy+0x3c>
	{
		e->flags = JUMPING;
    bafe:	81 e0       	ldi	r24, 0x01	; 1
    bb00:	88 87       	std	Y+8, r24	; 0x08
		e->shared.vy = -SPIDER_JUMP_SPEED;
    bb02:	8c e9       	ldi	r24, 0x9C	; 156
    bb04:	8c 83       	std	Y+4, r24	; 0x04
		e->shared.gravity = GRAVITY;
    bb06:	88 ec       	ldi	r24, 0xC8	; 200
    bb08:	8e 83       	std	Y+6, r24	; 0x06
		e->shared.vx = SPIDER_SIDE_SPEED;
    bb0a:	8c e3       	ldi	r24, 0x3C	; 60
    bb0c:	8d 83       	std	Y+5, r24	; 0x05
		if (e->direction == D_LEFT)
    bb0e:	89 85       	ldd	r24, Y+9	; 0x09
    bb10:	81 11       	cpse	r24, r1
    bb12:	02 c0       	rjmp	.+4      	; 0xbb18 <update_spider_enemy+0x34>
		{
			e->shared.vx = -SPIDER_SIDE_SPEED;
    bb14:	84 ec       	ldi	r24, 0xC4	; 196
    bb16:	8d 83       	std	Y+5, r24	; 0x05
		}
		LBMapSprite(slot, map_enemy_spider_1, 0);
    bb18:	40 e0       	ldi	r20, 0x00	; 0
    bb1a:	6c e1       	ldi	r22, 0x1C	; 28
    bb1c:	76 e3       	ldi	r23, 0x36	; 54
    bb1e:	19 c0       	rjmp	.+50     	; 0xbb52 <update_spider_enemy+0x6e>
	}
	else if (e->flags & JUMPING && e->shared.gravity == 0)
    bb20:	90 ff       	sbrs	r25, 0
    bb22:	0f c0       	rjmp	.+30     	; 0xbb42 <update_spider_enemy+0x5e>
    bb24:	9e 81       	ldd	r25, Y+6	; 0x06
    bb26:	91 11       	cpse	r25, r1
    bb28:	0c c0       	rjmp	.+24     	; 0xbb42 <update_spider_enemy+0x5e>
	{
		e->flags = IDLE;
    bb2a:	88 e0       	ldi	r24, 0x08	; 8
    bb2c:	88 87       	std	Y+8, r24	; 0x08
		e->shared.vx = 0;
    bb2e:	1d 82       	std	Y+5, r1	; 0x05
		e->frame_count = 0;
    bb30:	1d 86       	std	Y+13, r1	; 0x0d
		if (e->direction == D_LEFT)
    bb32:	89 85       	ldd	r24, Y+9	; 0x09
    bb34:	81 11       	cpse	r24, r1
    bb36:	03 c0       	rjmp	.+6      	; 0xbb3e <update_spider_enemy+0x5a>
		{
			e->direction = D_RIGHT;
    bb38:	81 e0       	ldi	r24, 0x01	; 1
    bb3a:	89 87       	std	Y+9, r24	; 0x09
    bb3c:	0d c0       	rjmp	.+26     	; 0xbb58 <update_spider_enemy+0x74>
		}
		else
		{
			e->direction = D_LEFT;
    bb3e:	19 86       	std	Y+9, r1	; 0x09
    bb40:	0b c0       	rjmp	.+22     	; 0xbb58 <update_spider_enemy+0x74>
		}
	}
	else if (e->flags & IDLE)
    bb42:	88 23       	and	r24, r24
    bb44:	49 f0       	breq	.+18     	; 0xbb58 <update_spider_enemy+0x74>
	{
		LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    bb46:	ce 01       	movw	r24, r28
    bb48:	83 96       	adiw	r24, 0x23	; 35
    bb4a:	0e 94 0d 4f 	call	0x9e1a	; 0x9e1a <LBGetNextFrame>
    bb4e:	40 e0       	ldi	r20, 0x00	; 0
    bb50:	bc 01       	movw	r22, r24
    bb52:	81 2f       	mov	r24, r17
    bb54:	0e 94 73 50 	call	0xa0e6	; 0xa0e6 <LBMapSprite>
	}
	e->frame_count++;
    bb58:	8d 85       	ldd	r24, Y+13	; 0x0d
    bb5a:	8f 5f       	subi	r24, 0xFF	; 255
    bb5c:	8d 87       	std	Y+13, r24	; 0x0d
}
    bb5e:	df 91       	pop	r29
    bb60:	cf 91       	pop	r28
    bb62:	1f 91       	pop	r17
    bb64:	08 95       	ret

0000bb66 <update_shark_enemy>:

void update_shark_enemy(Enemy* e, u8 slot)
{
    bb66:	cf 93       	push	r28
    bb68:	fc 01       	movw	r30, r24
    bb6a:	c6 2f       	mov	r28, r22
	e->shared.vx = SHARK_SPEED;
    bb6c:	8e e1       	ldi	r24, 0x1E	; 30
    bb6e:	85 83       	std	Z+5, r24	; 0x05
	e->shared.vy = 0;
    bb70:	14 82       	std	Z+4, r1	; 0x04
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    bb72:	cf 01       	movw	r24, r30
    bb74:	83 96       	adiw	r24, 0x23	; 35
    bb76:	0e 94 0d 4f 	call	0x9e1a	; 0x9e1a <LBGetNextFrame>
    bb7a:	40 e0       	ldi	r20, 0x00	; 0
    bb7c:	bc 01       	movw	r22, r24
    bb7e:	8c 2f       	mov	r24, r28
}
    bb80:	cf 91       	pop	r28

void update_shark_enemy(Enemy* e, u8 slot)
{
	e->shared.vx = SHARK_SPEED;
	e->shared.vy = 0;
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    bb82:	0c 94 73 50 	jmp	0xa0e6	; 0xa0e6 <LBMapSprite>

0000bb86 <update_level_hazard>:
}

void update_level_hazard(Enemy* e, u8 slot)
{
    bb86:	cf 93       	push	r28
    bb88:	fc 01       	movw	r30, r24
    bb8a:	c6 2f       	mov	r28, r22
	e->shared.vx = 0;
    bb8c:	15 82       	std	Z+5, r1	; 0x05
	e->shared.vy = HAZARD_SPEED;
    bb8e:	8e e1       	ldi	r24, 0x1E	; 30
    bb90:	84 83       	std	Z+4, r24	; 0x04
	if (game.current_level_index == 2)
    bb92:	80 91 c6 0d 	lds	r24, 0x0DC6
    bb96:	82 30       	cpi	r24, 0x02	; 2
    bb98:	11 f4       	brne	.+4      	; 0xbb9e <update_level_hazard+0x18>
	{
		e->shared.vy = -HAZARD_SPEED;
    bb9a:	82 ee       	ldi	r24, 0xE2	; 226
    bb9c:	84 83       	std	Z+4, r24	; 0x04
	}
	if (e->shared.y < 4 || e->shared.y > 24*8) e->shared.y = e->origin_tile*8;
    bb9e:	22 81       	ldd	r18, Z+2	; 0x02
    bba0:	33 81       	ldd	r19, Z+3	; 0x03
    bba2:	24 50       	subi	r18, 0x04	; 4
    bba4:	31 09       	sbc	r19, r1
    bba6:	2d 3b       	cpi	r18, 0xBD	; 189
    bba8:	31 05       	cpc	r19, r1
    bbaa:	38 f0       	brcs	.+14     	; 0xbbba <update_level_hazard+0x34>
    bbac:	27 85       	ldd	r18, Z+15	; 0x0f
    bbae:	88 e0       	ldi	r24, 0x08	; 8
    bbb0:	28 9f       	mul	r18, r24
    bbb2:	90 01       	movw	r18, r0
    bbb4:	11 24       	eor	r1, r1
    bbb6:	33 83       	std	Z+3, r19	; 0x03
    bbb8:	22 83       	std	Z+2, r18	; 0x02
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    bbba:	cf 01       	movw	r24, r30
    bbbc:	83 96       	adiw	r24, 0x23	; 35
    bbbe:	0e 94 0d 4f 	call	0x9e1a	; 0x9e1a <LBGetNextFrame>
    bbc2:	40 e0       	ldi	r20, 0x00	; 0
    bbc4:	bc 01       	movw	r22, r24
    bbc6:	8c 2f       	mov	r24, r28
}
    bbc8:	cf 91       	pop	r28
	if (game.current_level_index == 2)
	{
		e->shared.vy = -HAZARD_SPEED;
	}
	if (e->shared.y < 4 || e->shared.y > 24*8) e->shared.y = e->origin_tile*8;
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    bbca:	0c 94 73 50 	jmp	0xa0e6	; 0xa0e6 <LBMapSprite>

0000bbce <update_basic_shot>:
}

void update_basic_shot(Shot* s, u8 slot)
{
    bbce:	cf 93       	push	r28
    bbd0:	c6 2f       	mov	r28, r22
	LBMapSprite(slot, LBGetNextFrame(&s->anim), 0);
    bbd2:	0a 96       	adiw	r24, 0x0a	; 10
    bbd4:	0e 94 0d 4f 	call	0x9e1a	; 0x9e1a <LBGetNextFrame>
    bbd8:	40 e0       	ldi	r20, 0x00	; 0
    bbda:	bc 01       	movw	r22, r24
    bbdc:	8c 2f       	mov	r24, r28
}
    bbde:	cf 91       	pop	r28
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
}

void update_basic_shot(Shot* s, u8 slot)
{
	LBMapSprite(slot, LBGetNextFrame(&s->anim), 0);
    bbe0:	0c 94 73 50 	jmp	0xa0e6	; 0xa0e6 <LBMapSprite>

0000bbe4 <update_enemies>:
}

void update_enemies()
{
    bbe4:	cf 92       	push	r12
    bbe6:	df 92       	push	r13
    bbe8:	ef 92       	push	r14
    bbea:	ff 92       	push	r15
    bbec:	0f 93       	push	r16
    bbee:	1f 93       	push	r17
    bbf0:	cf 93       	push	r28
    bbf2:	df 93       	push	r29
    bbf4:	c2 ec       	ldi	r28, 0xC2	; 194
    bbf6:	de e0       	ldi	r29, 0x0E	; 14
    bbf8:	87 eb       	ldi	r24, 0xB7	; 183
    bbfa:	e8 2e       	mov	r14, r24
    bbfc:	8e e0       	ldi	r24, 0x0E	; 14
    bbfe:	f8 2e       	mov	r15, r24
	u8 slot = ENEMY_SLOT;
    bc00:	19 e0       	ldi	r17, 0x09	; 9
    bc02:	fe 01       	movw	r30, r28
    bc04:	33 97       	sbiw	r30, 0x03	; 3
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].flags & EXPLODING)
    bc06:	80 81       	ld	r24, Z
    bc08:	9e 01       	movw	r18, r28
    bc0a:	21 50       	subi	r18, 0x01	; 1
    bc0c:	31 09       	sbc	r19, r1
    bc0e:	69 01       	movw	r12, r18
    bc10:	84 ff       	sbrs	r24, 4
    bc12:	0c c0       	rjmp	.+24     	; 0xbc2c <update_enemies+0x48>
		{
			map_explosion(&game.enemies[i].flags, &game.enemies[i].expl, slot, game.enemies[i].width, game.enemies[i].height);
    bc14:	08 81       	ld	r16, Y
    bc16:	f9 01       	movw	r30, r18
    bc18:	20 81       	ld	r18, Z
    bc1a:	41 2f       	mov	r20, r17
    bc1c:	b7 01       	movw	r22, r14
    bc1e:	65 5d       	subi	r22, 0xD5	; 213
    bc20:	7f 4f       	sbci	r23, 0xFF	; 255
    bc22:	c7 01       	movw	r24, r14
    bc24:	08 96       	adiw	r24, 0x08	; 8
    bc26:	0e 94 8e 5c 	call	0xb91c	; 0xb91c <map_explosion>
    bc2a:	18 c0       	rjmp	.+48     	; 0xbc5c <update_enemies+0x78>
    bc2c:	fe 01       	movw	r30, r28
    bc2e:	34 97       	sbiw	r30, 0x04	; 4
		}
		else if (game.enemies[i].active)
    bc30:	80 81       	ld	r24, Z
    bc32:	88 23       	and	r24, r24
    bc34:	99 f0       	breq	.+38     	; 0xbc5c <update_enemies+0x78>
		{
			switch (game.enemies[i].enemy_type)
    bc36:	89 81       	ldd	r24, Y+1	; 0x01
    bc38:	88 23       	and	r24, r24
    bc3a:	39 f0       	breq	.+14     	; 0xbc4a <update_enemies+0x66>
    bc3c:	81 30       	cpi	r24, 0x01	; 1
    bc3e:	51 f4       	brne	.+20     	; 0xbc54 <update_enemies+0x70>
			{
				case ENEMY_SPIDER: update_spider_enemy(&game.enemies[i], slot); break;
				case ENEMY_SHARK: update_shark_enemy(&game.enemies[i], slot); break;
    bc40:	61 2f       	mov	r22, r17
    bc42:	c7 01       	movw	r24, r14
    bc44:	0e 94 b3 5d 	call	0xbb66	; 0xbb66 <update_shark_enemy>
    bc48:	09 c0       	rjmp	.+18     	; 0xbc5c <update_enemies+0x78>
		}
		else if (game.enemies[i].active)
		{
			switch (game.enemies[i].enemy_type)
			{
				case ENEMY_SPIDER: update_spider_enemy(&game.enemies[i], slot); break;
    bc4a:	61 2f       	mov	r22, r17
    bc4c:	c7 01       	movw	r24, r14
    bc4e:	0e 94 72 5d 	call	0xbae4	; 0xbae4 <update_spider_enemy>
    bc52:	04 c0       	rjmp	.+8      	; 0xbc5c <update_enemies+0x78>
				case ENEMY_SHARK: update_shark_enemy(&game.enemies[i], slot); break;
				default: update_level_hazard(&game.enemies[i], slot); break;
    bc54:	61 2f       	mov	r22, r17
    bc56:	c7 01       	movw	r24, r14
    bc58:	0e 94 c3 5d 	call	0xbb86	; 0xbb86 <update_level_hazard>
			}
		}
		slot += game.enemies[i].width * game.enemies[i].height;
    bc5c:	f6 01       	movw	r30, r12
    bc5e:	90 81       	ld	r25, Z
    bc60:	88 81       	ld	r24, Y
    bc62:	98 9f       	mul	r25, r24
    bc64:	10 0d       	add	r17, r0
    bc66:	11 24       	eor	r1, r1
    bc68:	e3 96       	adiw	r28, 0x33	; 51
    bc6a:	f3 e3       	ldi	r31, 0x33	; 51
    bc6c:	ef 0e       	add	r14, r31
    bc6e:	f1 1c       	adc	r15, r1

void update_enemies()
{
	u8 slot = ENEMY_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    bc70:	2f e0       	ldi	r18, 0x0F	; 15
    bc72:	c1 3c       	cpi	r28, 0xC1	; 193
    bc74:	d2 07       	cpc	r29, r18
    bc76:	29 f6       	brne	.-118    	; 0xbc02 <update_enemies+0x1e>
				default: update_level_hazard(&game.enemies[i], slot); break;
			}
		}
		slot += game.enemies[i].width * game.enemies[i].height;
	}
}
    bc78:	df 91       	pop	r29
    bc7a:	cf 91       	pop	r28
    bc7c:	1f 91       	pop	r17
    bc7e:	0f 91       	pop	r16
    bc80:	ff 90       	pop	r15
    bc82:	ef 90       	pop	r14
    bc84:	df 90       	pop	r13
    bc86:	cf 90       	pop	r12
    bc88:	08 95       	ret

0000bc8a <update_enemy_shots>:

void update_enemy_shots()
{
    bc8a:	af 92       	push	r10
    bc8c:	bf 92       	push	r11
    bc8e:	df 92       	push	r13
    bc90:	ef 92       	push	r14
    bc92:	ff 92       	push	r15
    bc94:	0f 93       	push	r16
    bc96:	1f 93       	push	r17
    bc98:	cf 93       	push	r28
    bc9a:	df 93       	push	r29
    bc9c:	1f 92       	push	r1
    bc9e:	cd b7       	in	r28, 0x3d	; 61
    bca0:	de b7       	in	r29, 0x3e	; 62
    bca2:	85 ec       	ldi	r24, 0xC5	; 197
    bca4:	a8 2e       	mov	r10, r24
    bca6:	8e e0       	ldi	r24, 0x0E	; 14
    bca8:	b8 2e       	mov	r11, r24
    bcaa:	0d ec       	ldi	r16, 0xCD	; 205
    bcac:	1e e0       	ldi	r17, 0x0E	; 14
    bcae:	91 ed       	ldi	r25, 0xD1	; 209
    bcb0:	e9 2e       	mov	r14, r25
    bcb2:	9e e0       	ldi	r25, 0x0E	; 14
    bcb4:	f9 2e       	mov	r15, r25
    bcb6:	20 e1       	ldi	r18, 0x10	; 16
			{
				if (game.enemies[i].shot[j].shot_type == ENEMY_BALL_SHOT)
				{
					if (!game.enemies[i].shot[j].active)
					{
						game.enemies[i].shot[j].active = 1;
    bcb8:	dd 24       	eor	r13, r13
    bcba:	d3 94       	inc	r13
    bcbc:	6f ef       	ldi	r22, 0xFF	; 255
    bcbe:	62 0f       	add	r22, r18
    bcc0:	f5 01       	movw	r30, r10
    bcc2:	32 97       	sbiw	r30, 0x02	; 2
{
	u8 slot = ENEMY_SHOT_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (!(game.enemies[i].enemy_type == ENEMY_PROJECTILE_HAZARD) && game.enemies[i].active && game.enemies[i].shot_frame_count >= ENEMY_SHOT_DELAY_FRAMES)
    bcc4:	80 81       	ld	r24, Z
    bcc6:	35 97       	sbiw	r30, 0x05	; 5
    bcc8:	82 30       	cpi	r24, 0x02	; 2
    bcca:	d9 f1       	breq	.+118    	; 0xbd42 <update_enemy_shots+0xb8>
    bccc:	80 81       	ld	r24, Z
    bcce:	88 23       	and	r24, r24
    bcd0:	c1 f1       	breq	.+112    	; 0xbd42 <update_enemy_shots+0xb8>
    bcd2:	d5 01       	movw	r26, r10
    bcd4:	8c 91       	ld	r24, X
    bcd6:	8c 33       	cpi	r24, 0x3C	; 60
    bcd8:	a0 f1       	brcs	.+104    	; 0xbd42 <update_enemy_shots+0xb8>
		{
			game.enemies[i].shot_frame_count = 0;	
    bcda:	1c 92       	st	X, r1
    bcdc:	f7 01       	movw	r30, r14
    bcde:	32 97       	sbiw	r30, 0x02	; 2
			for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
			{
				if (game.enemies[i].shot[j].shot_type == ENEMY_BALL_SHOT)
    bce0:	80 81       	ld	r24, Z
    bce2:	87 30       	cpi	r24, 0x07	; 7
    bce4:	a9 f5       	brne	.+106    	; 0xbd50 <update_enemy_shots+0xc6>
				{
					if (!game.enemies[i].shot[j].active)
    bce6:	f7 01       	movw	r30, r14
    bce8:	80 81       	ld	r24, Z
    bcea:	81 11       	cpse	r24, r1
    bcec:	23 c0       	rjmp	.+70     	; 0xbd34 <update_enemy_shots+0xaa>
					{
						game.enemies[i].shot[j].active = 1;
    bcee:	d0 82       	st	Z, r13
    bcf0:	f5 01       	movw	r30, r10
    bcf2:	3e 97       	sbiw	r30, 0x0e	; 14
						game.enemies[i].shot[j].shared.x = game.enemies[i].shared.x;
    bcf4:	40 81       	ld	r20, Z
    bcf6:	51 81       	ldd	r21, Z+1	; 0x01
    bcf8:	14 96       	adiw	r26, 0x04	; 4
    bcfa:	5c 93       	st	X, r21
    bcfc:	4e 93       	st	-X, r20
    bcfe:	13 97       	sbiw	r26, 0x03	; 3
    bd00:	32 96       	adiw	r30, 0x02	; 2
						game.enemies[i].shot[j].shared.y = ((u16 ) game.enemies[i].shared.y / 8) * 8;
    bd02:	80 81       	ld	r24, Z
    bd04:	91 81       	ldd	r25, Z+1	; 0x01
    bd06:	88 7f       	andi	r24, 0xF8	; 248
    bd08:	f5 01       	movw	r30, r10
    bd0a:	96 83       	std	Z+6, r25	; 0x06
    bd0c:	85 83       	std	Z+5, r24	; 0x05
						if (game.enemies[i].shot[j].shared.vx < 0) game.enemies[i].shot[j].shared.vx = -game.enemies[i].shot[j].shared.vx;
    bd0e:	d8 01       	movw	r26, r16
    bd10:	8c 91       	ld	r24, X
    bd12:	87 ff       	sbrs	r24, 7
    bd14:	02 c0       	rjmp	.+4      	; 0xbd1a <update_enemy_shots+0x90>
    bd16:	81 95       	neg	r24
    bd18:	8c 93       	st	X, r24
						if (game.player.shared.x <= game.enemies[i].shared.x)
    bd1a:	80 91 cf 0d 	lds	r24, 0x0DCF
    bd1e:	90 91 d0 0d 	lds	r25, 0x0DD0
    bd22:	48 17       	cp	r20, r24
    bd24:	59 07       	cpc	r21, r25
    bd26:	30 f0       	brcs	.+12     	; 0xbd34 <update_enemy_shots+0xaa>
						{
							if (game.enemies[i].shot[j].shared.vx > 0) game.enemies[i].shot[j].shared.vx = -game.enemies[i].shot[j].shared.vx;
    bd28:	f8 01       	movw	r30, r16
    bd2a:	80 81       	ld	r24, Z
    bd2c:	18 16       	cp	r1, r24
    bd2e:	14 f4       	brge	.+4      	; 0xbd34 <update_enemy_shots+0xaa>
    bd30:	81 95       	neg	r24
    bd32:	80 83       	st	Z, r24
						}
					}
					update_basic_shot(&game.enemies[i].shot[j], slot);
    bd34:	c5 01       	movw	r24, r10
    bd36:	03 96       	adiw	r24, 0x03	; 3
    bd38:	29 83       	std	Y+1, r18	; 0x01
    bd3a:	0e 94 e7 5d 	call	0xbbce	; 0xbbce <update_basic_shot>
    bd3e:	29 81       	ldd	r18, Y+1	; 0x01
    bd40:	07 c0       	rjmp	.+14     	; 0xbd50 <update_enemy_shots+0xc6>
				}
				slot += 1;
			}
		}
		else if (game.enemies[i].active)
    bd42:	80 81       	ld	r24, Z
    bd44:	88 23       	and	r24, r24
    bd46:	21 f0       	breq	.+8      	; 0xbd50 <update_enemy_shots+0xc6>
		{
			game.enemies[i].shot_frame_count++;
    bd48:	d5 01       	movw	r26, r10
    bd4a:	8c 91       	ld	r24, X
    bd4c:	8f 5f       	subi	r24, 0xFF	; 255
    bd4e:	8c 93       	st	X, r24
    bd50:	2f 5f       	subi	r18, 0xFF	; 255
    bd52:	b3 e3       	ldi	r27, 0x33	; 51
    bd54:	ab 0e       	add	r10, r27
    bd56:	b1 1c       	adc	r11, r1
    bd58:	0d 5c       	subi	r16, 0xCD	; 205
    bd5a:	1f 4f       	sbci	r17, 0xFF	; 255
    bd5c:	e3 e3       	ldi	r30, 0x33	; 51
    bd5e:	ee 0e       	add	r14, r30
    bd60:	f1 1c       	adc	r15, r1

void update_enemy_shots()
{
	u8 slot = ENEMY_SHOT_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    bd62:	25 31       	cpi	r18, 0x15	; 21
    bd64:	09 f0       	breq	.+2      	; 0xbd68 <update_enemy_shots+0xde>
    bd66:	aa cf       	rjmp	.-172    	; 0xbcbc <update_enemy_shots+0x32>
		else
		{
			slot += MAX_ENEMY_SHOTS;
		}
	}
}
    bd68:	0f 90       	pop	r0
    bd6a:	df 91       	pop	r29
    bd6c:	cf 91       	pop	r28
    bd6e:	1f 91       	pop	r17
    bd70:	0f 91       	pop	r16
    bd72:	ff 90       	pop	r15
    bd74:	ef 90       	pop	r14
    bd76:	df 90       	pop	r13
    bd78:	bf 90       	pop	r11
    bd7a:	af 90       	pop	r10
    bd7c:	08 95       	ret

0000bd7e <animate_enemies>:

void animate_enemies()
{
    bd7e:	4f 92       	push	r4
    bd80:	5f 92       	push	r5
    bd82:	6f 92       	push	r6
    bd84:	7f 92       	push	r7
    bd86:	8f 92       	push	r8
    bd88:	9f 92       	push	r9
    bd8a:	af 92       	push	r10
    bd8c:	bf 92       	push	r11
    bd8e:	cf 92       	push	r12
    bd90:	df 92       	push	r13
    bd92:	ef 92       	push	r14
    bd94:	ff 92       	push	r15
    bd96:	0f 93       	push	r16
    bd98:	1f 93       	push	r17
    bd9a:	cf 93       	push	r28
    bd9c:	df 93       	push	r29
    bd9e:	8e eb       	ldi	r24, 0xBE	; 190
    bda0:	68 2e       	mov	r6, r24
    bda2:	8e e0       	ldi	r24, 0x0E	; 14
    bda4:	78 2e       	mov	r7, r24
    bda6:	91 ec       	ldi	r25, 0xC1	; 193
    bda8:	a9 2e       	mov	r10, r25
    bdaa:	9e e0       	ldi	r25, 0x0E	; 14
    bdac:	b9 2e       	mov	r11, r25
    bdae:	22 ec       	ldi	r18, 0xC2	; 194
    bdb0:	c2 2e       	mov	r12, r18
    bdb2:	2e e0       	ldi	r18, 0x0E	; 14
    bdb4:	d2 2e       	mov	r13, r18
    bdb6:	c7 eb       	ldi	r28, 0xB7	; 183
    bdb8:	de e0       	ldi	r29, 0x0E	; 14
    bdba:	3f eb       	ldi	r19, 0xBF	; 191
    bdbc:	83 2e       	mov	r8, r19
    bdbe:	3e e0       	ldi	r19, 0x0E	; 14
    bdc0:	93 2e       	mov	r9, r19
    bdc2:	41 2c       	mov	r4, r1
    bdc4:	51 2c       	mov	r5, r1
	u8 slot = ENEMY_SLOT;
    bdc6:	19 e0       	ldi	r17, 0x09	; 9
				animate_sprite(&game.enemies[i].shared, slot, game.enemies[i].width, game.enemies[i].height, 1, game.enemies[i].origin_tile);
			}
			else if (animate_sprite(&game.enemies[i].shared, slot, game.enemies[i].width, game.enemies[i].height, 0, 0) > 1)
			{
				SFX_ENEMY_EXPLODE;
				game.enemies[i].flags = EXPLODING;
    bdc8:	40 e1       	ldi	r20, 0x10	; 16
    bdca:	f4 2e       	mov	r15, r20
{
	u8 slot = ENEMY_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].active && !(game.enemies[i].flags & EXPLODING))
    bdcc:	f3 01       	movw	r30, r6
    bdce:	80 81       	ld	r24, Z
    bdd0:	88 23       	and	r24, r24
    bdd2:	09 f4       	brne	.+2      	; 0xbdd6 <animate_enemies+0x58>
    bdd4:	58 c0       	rjmp	.+176    	; 0xbe86 <animate_enemies+0x108>
    bdd6:	f4 01       	movw	r30, r8
    bdd8:	80 81       	ld	r24, Z
    bdda:	84 fd       	sbrc	r24, 4
    bddc:	54 c0       	rjmp	.+168    	; 0xbe86 <animate_enemies+0x108>
		{
			if (game.enemies[i].shared.x < game.camera_x || game.enemies[i].shared.y < game.camera_y || game.enemies[i].shared.y > game.camera_y + CAMERA_HEIGHT*8)
    bdde:	28 81       	ld	r18, Y
    bde0:	39 81       	ldd	r19, Y+1	; 0x01
    bde2:	80 91 b1 0d 	lds	r24, 0x0DB1
    bde6:	90 91 b2 0d 	lds	r25, 0x0DB2
    bdea:	28 17       	cp	r18, r24
    bdec:	39 07       	cpc	r19, r25
    bdee:	68 f0       	brcs	.+26     	; 0xbe0a <animate_enemies+0x8c>
    bdf0:	2a 81       	ldd	r18, Y+2	; 0x02
    bdf2:	3b 81       	ldd	r19, Y+3	; 0x03
    bdf4:	80 91 b9 0d 	lds	r24, 0x0DB9
    bdf8:	90 e0       	ldi	r25, 0x00	; 0
    bdfa:	28 17       	cp	r18, r24
    bdfc:	39 07       	cpc	r19, r25
    bdfe:	28 f0       	brcs	.+10     	; 0xbe0a <animate_enemies+0x8c>
    be00:	88 53       	subi	r24, 0x38	; 56
    be02:	9f 4f       	sbci	r25, 0xFF	; 255
    be04:	82 17       	cp	r24, r18
    be06:	93 07       	cpc	r25, r19
    be08:	70 f4       	brcc	.+28     	; 0xbe26 <animate_enemies+0xa8>
			{
				game.enemies[i].active = 0;
    be0a:	f3 01       	movw	r30, r6
    be0c:	10 82       	st	Z, r1
				game.active_enemies--;
    be0e:	80 91 cc 0d 	lds	r24, 0x0DCC
    be12:	81 50       	subi	r24, 0x01	; 1
    be14:	80 93 cc 0d 	sts	0x0DCC, r24
				LBMoveSprite(slot, OFF_SCREEN, 0, game.enemies[i].width, game.enemies[i].height);
    be18:	f6 01       	movw	r30, r12
    be1a:	00 81       	ld	r16, Z
    be1c:	f5 01       	movw	r30, r10
    be1e:	20 81       	ld	r18, Z
    be20:	40 e0       	ldi	r20, 0x00	; 0
    be22:	60 ee       	ldi	r22, 0xE0	; 224
    be24:	40 c0       	rjmp	.+128    	; 0xbea6 <animate_enemies+0x128>
    be26:	c2 01       	movw	r24, r4
    be28:	8f 54       	subi	r24, 0x4F	; 79
    be2a:	92 4f       	sbci	r25, 0xF2	; 242
    be2c:	fc 01       	movw	r30, r24
    be2e:	ee 5e       	subi	r30, 0xEE	; 238
    be30:	fe 4f       	sbci	r31, 0xFE	; 254
				game.player.shield = 0;
				game.player.flags = EXPLODING;
				return;
			}
#endif
			else if (game.enemies[i].enemy_type == ENEMY_PROJECTILE_HAZARD)
    be32:	20 81       	ld	r18, Z
    be34:	22 30       	cpi	r18, 0x02	; 2
    be36:	61 f4       	brne	.+24     	; 0xbe50 <animate_enemies+0xd2>
    be38:	33 96       	adiw	r30, 0x03	; 3
			{
				animate_sprite(&game.enemies[i].shared, slot, game.enemies[i].width, game.enemies[i].height, 1, game.enemies[i].origin_tile);
    be3a:	e0 80       	ld	r14, Z
    be3c:	01 e0       	ldi	r16, 0x01	; 1
    be3e:	f6 01       	movw	r30, r12
    be40:	20 81       	ld	r18, Z
    be42:	f5 01       	movw	r30, r10
    be44:	40 81       	ld	r20, Z
    be46:	61 2f       	mov	r22, r17
    be48:	ce 01       	movw	r24, r28
    be4a:	0e 94 d9 5c 	call	0xb9b2	; 0xb9b2 <animate_sprite>
    be4e:	2e c0       	rjmp	.+92     	; 0xbeac <animate_enemies+0x12e>
			}
			else if (animate_sprite(&game.enemies[i].shared, slot, game.enemies[i].width, game.enemies[i].height, 0, 0) > 1)
    be50:	e1 2c       	mov	r14, r1
    be52:	00 e0       	ldi	r16, 0x00	; 0
    be54:	f6 01       	movw	r30, r12
    be56:	20 81       	ld	r18, Z
    be58:	f5 01       	movw	r30, r10
    be5a:	40 81       	ld	r20, Z
    be5c:	61 2f       	mov	r22, r17
    be5e:	ce 01       	movw	r24, r28
    be60:	0e 94 d9 5c 	call	0xb9b2	; 0xb9b2 <animate_sprite>
    be64:	82 30       	cpi	r24, 0x02	; 2
    be66:	10 f1       	brcs	.+68     	; 0xbeac <animate_enemies+0x12e>
			{
				SFX_ENEMY_EXPLODE;
    be68:	41 e0       	ldi	r20, 0x01	; 1
    be6a:	6f ef       	ldi	r22, 0xFF	; 255
    be6c:	86 e0       	ldi	r24, 0x06	; 6
    be6e:	0e 94 8b 43 	call	0x8716	; 0x8716 <TriggerFx>
				game.enemies[i].flags = EXPLODING;
    be72:	f4 01       	movw	r30, r8
    be74:	f0 82       	st	Z, r15
				game.enemies[i].active = 0;
    be76:	f3 01       	movw	r30, r6
    be78:	10 82       	st	Z, r1
				game.active_enemies--;
    be7a:	80 91 cc 0d 	lds	r24, 0x0DCC
    be7e:	81 50       	subi	r24, 0x01	; 1
    be80:	80 93 cc 0d 	sts	0x0DCC, r24
    be84:	13 c0       	rjmp	.+38     	; 0xbeac <animate_enemies+0x12e>
			}
		}
		else if (game.enemies[i].flags & EXPLODING)
    be86:	f4 01       	movw	r30, r8
    be88:	80 81       	ld	r24, Z
    be8a:	84 ff       	sbrs	r24, 4
    be8c:	0f c0       	rjmp	.+30     	; 0xbeac <animate_enemies+0x12e>
		{
			LBMoveSprite(slot, game.enemies[i].shared.x - game.camera_x, game.enemies[i].shared.y - game.camera_y, game.enemies[i].width, game.enemies[i].height);
    be8e:	4a 81       	ldd	r20, Y+2	; 0x02
    be90:	80 91 b9 0d 	lds	r24, 0x0DB9
    be94:	48 1b       	sub	r20, r24
    be96:	68 81       	ld	r22, Y
    be98:	80 91 b1 0d 	lds	r24, 0x0DB1
    be9c:	68 1b       	sub	r22, r24
    be9e:	f6 01       	movw	r30, r12
    bea0:	00 81       	ld	r16, Z
    bea2:	f5 01       	movw	r30, r10
    bea4:	20 81       	ld	r18, Z
    bea6:	81 2f       	mov	r24, r17
    bea8:	0e 94 c5 50 	call	0xa18a	; 0xa18a <LBMoveSprite>
		}
		slot +=  game.enemies[i].width * game.enemies[i].height;
    beac:	f6 01       	movw	r30, r12
    beae:	90 81       	ld	r25, Z
    beb0:	f5 01       	movw	r30, r10
    beb2:	80 81       	ld	r24, Z
    beb4:	98 9f       	mul	r25, r24
    beb6:	10 0d       	add	r17, r0
    beb8:	11 24       	eor	r1, r1
    beba:	f3 e3       	ldi	r31, 0x33	; 51
    bebc:	6f 0e       	add	r6, r31
    bebe:	71 1c       	adc	r7, r1
    bec0:	83 e3       	ldi	r24, 0x33	; 51
    bec2:	48 0e       	add	r4, r24
    bec4:	51 1c       	adc	r5, r1
    bec6:	e3 e3       	ldi	r30, 0x33	; 51
    bec8:	ae 0e       	add	r10, r30
    beca:	b1 1c       	adc	r11, r1
    becc:	f3 e3       	ldi	r31, 0x33	; 51
    bece:	cf 0e       	add	r12, r31
    bed0:	d1 1c       	adc	r13, r1
    bed2:	e3 96       	adiw	r28, 0x33	; 51
    bed4:	83 e3       	ldi	r24, 0x33	; 51
    bed6:	88 0e       	add	r8, r24
    bed8:	91 1c       	adc	r9, r1

void animate_enemies()
{
	u8 slot = ENEMY_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    beda:	ef ef       	ldi	r30, 0xFF	; 255
    bedc:	4e 16       	cp	r4, r30
    bede:	51 04       	cpc	r5, r1
    bee0:	09 f0       	breq	.+2      	; 0xbee4 <animate_enemies+0x166>
    bee2:	74 cf       	rjmp	.-280    	; 0xbdcc <animate_enemies+0x4e>
		{
			LBMoveSprite(slot, game.enemies[i].shared.x - game.camera_x, game.enemies[i].shared.y - game.camera_y, game.enemies[i].width, game.enemies[i].height);
		}
		slot +=  game.enemies[i].width * game.enemies[i].height;
	}
}
    bee4:	df 91       	pop	r29
    bee6:	cf 91       	pop	r28
    bee8:	1f 91       	pop	r17
    beea:	0f 91       	pop	r16
    beec:	ff 90       	pop	r15
    beee:	ef 90       	pop	r14
    bef0:	df 90       	pop	r13
    bef2:	cf 90       	pop	r12
    bef4:	bf 90       	pop	r11
    bef6:	af 90       	pop	r10
    bef8:	9f 90       	pop	r9
    befa:	8f 90       	pop	r8
    befc:	7f 90       	pop	r7
    befe:	6f 90       	pop	r6
    bf00:	5f 90       	pop	r5
    bf02:	4f 90       	pop	r4
    bf04:	08 95       	ret

0000bf06 <animate_enemy_shots>:

void animate_enemy_shots()
{
    bf06:	6f 92       	push	r6
    bf08:	7f 92       	push	r7
    bf0a:	8f 92       	push	r8
    bf0c:	9f 92       	push	r9
    bf0e:	af 92       	push	r10
    bf10:	bf 92       	push	r11
    bf12:	cf 92       	push	r12
    bf14:	df 92       	push	r13
    bf16:	ef 92       	push	r14
    bf18:	ff 92       	push	r15
    bf1a:	0f 93       	push	r16
    bf1c:	1f 93       	push	r17
    bf1e:	cf 93       	push	r28
    bf20:	df 93       	push	r29
    bf22:	48 ec       	ldi	r20, 0xC8	; 200
    bf24:	84 2e       	mov	r8, r20
    bf26:	4e e0       	ldi	r20, 0x0E	; 14
    bf28:	94 2e       	mov	r9, r20
    bf2a:	c1 ed       	ldi	r28, 0xD1	; 209
    bf2c:	de e0       	ldi	r29, 0x0E	; 14
	u8 slot = ENEMY_SHOT_SLOT;
    bf2e:	1f e0       	ldi	r17, 0x0F	; 15
#endif
						if (game.player.shield <= 0)
						{
							SFX_PLAYER_EXPLODE;
							game.player.shield = 0;
							game.player.flags = EXPLODING;
    bf30:	50 e1       	ldi	r21, 0x10	; 16
    bf32:	d5 2e       	mov	r13, r21
    bf34:	fe 01       	movw	r30, r28
    bf36:	32 97       	sbiw	r30, 0x02	; 2
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
		{
			if (game.enemies[i].shot[j].shot_type == ENEMY_BALL_SHOT)
    bf38:	80 81       	ld	r24, Z
    bf3a:	87 30       	cpi	r24, 0x07	; 7
    bf3c:	09 f0       	breq	.+2      	; 0xbf40 <animate_enemy_shots+0x3a>
    bf3e:	6a c0       	rjmp	.+212    	; 0xc014 <animate_enemy_shots+0x10e>
			{
				if (game.enemies[i].shot[j].active)
    bf40:	88 81       	ld	r24, Y
    bf42:	88 23       	and	r24, r24
    bf44:	09 f4       	brne	.+2      	; 0xbf48 <animate_enemy_shots+0x42>
    bf46:	66 c0       	rjmp	.+204    	; 0xc014 <animate_enemy_shots+0x10e>
				{
					if (game.enemies[i].shot[j].shared.x < game.camera_x || game.enemies[i].shot[j].shared.x > game.camera_x + CAMERA_WIDTH*8 ||
    bf48:	f4 01       	movw	r30, r8
    bf4a:	20 81       	ld	r18, Z
    bf4c:	31 81       	ldd	r19, Z+1	; 0x01
    bf4e:	80 91 b1 0d 	lds	r24, 0x0DB1
    bf52:	90 91 b2 0d 	lds	r25, 0x0DB2
    bf56:	28 17       	cp	r18, r24
    bf58:	39 07       	cpc	r19, r25
    bf5a:	08 f4       	brcc	.+2      	; 0xbf5e <animate_enemy_shots+0x58>
    bf5c:	3e c0       	rjmp	.+124    	; 0xbfda <animate_enemy_shots+0xd4>
    bf5e:	80 52       	subi	r24, 0x20	; 32
    bf60:	9f 4f       	sbci	r25, 0xFF	; 255
    bf62:	82 17       	cp	r24, r18
    bf64:	93 07       	cpc	r25, r19
    bf66:	c8 f1       	brcs	.+114    	; 0xbfda <animate_enemy_shots+0xd4>
					   collision_detect_level(&game.enemies[i].shot[j].shared, 1, 1))
    bf68:	41 e0       	ldi	r20, 0x01	; 1
    bf6a:	61 e0       	ldi	r22, 0x01	; 1
    bf6c:	c4 01       	movw	r24, r8
    bf6e:	0e 94 0a 59 	call	0xb214	; 0xb214 <collision_detect_level>
		{
			if (game.enemies[i].shot[j].shot_type == ENEMY_BALL_SHOT)
			{
				if (game.enemies[i].shot[j].active)
				{
					if (game.enemies[i].shot[j].shared.x < game.camera_x || game.enemies[i].shot[j].shared.x > game.camera_x + CAMERA_WIDTH*8 ||
    bf72:	81 11       	cpse	r24, r1
    bf74:	32 c0       	rjmp	.+100    	; 0xbfda <animate_enemy_shots+0xd4>
					   collision_detect_level(&game.enemies[i].shot[j].shared, 1, 1))
					{
						game.enemies[i].shot[j].active = 0;
						LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
					}
					else if (LBCollides(game.player.shared.x-game.camera_x,game.player.shared.y, game.player.width*8, game.player.height*8,
    bf76:	f4 01       	movw	r30, r8
    bf78:	f2 80       	ldd	r15, Z+2	; 0x02
							game.enemies[i].shot[j].shared.x-game.camera_x, game.enemies[i].shot[j].shared.y, 8, 8
    bf7a:	60 80       	ld	r6, Z
    bf7c:	71 80       	ldd	r7, Z+1	; 0x01
					   collision_detect_level(&game.enemies[i].shot[j].shared, 1, 1))
					{
						game.enemies[i].shot[j].active = 0;
						LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
					}
					else if (LBCollides(game.player.shared.x-game.camera_x,game.player.shared.y, game.player.width*8, game.player.height*8,
    bf7e:	b0 90 b1 0d 	lds	r11, 0x0DB1
    bf82:	06 2d       	mov	r16, r6
    bf84:	0b 19       	sub	r16, r11
    bf86:	20 91 db 0d 	lds	r18, 0x0DDB
    bf8a:	22 0f       	add	r18, r18
    bf8c:	22 0f       	add	r18, r18
    bf8e:	22 0f       	add	r18, r18
    bf90:	40 91 da 0d 	lds	r20, 0x0DDA
    bf94:	44 0f       	add	r20, r20
    bf96:	44 0f       	add	r20, r20
    bf98:	44 0f       	add	r20, r20
    bf9a:	80 91 cf 0d 	lds	r24, 0x0DCF
    bf9e:	98 e0       	ldi	r25, 0x08	; 8
    bfa0:	a9 2e       	mov	r10, r25
    bfa2:	38 e0       	ldi	r19, 0x08	; 8
    bfa4:	c3 2e       	mov	r12, r19
    bfa6:	ef 2c       	mov	r14, r15
    bfa8:	60 91 d1 0d 	lds	r22, 0x0DD1
    bfac:	8b 19       	sub	r24, r11
    bfae:	0e 94 24 50 	call	0xa048	; 0xa048 <LBCollides>
    bfb2:	88 23       	and	r24, r24
    bfb4:	c1 f0       	breq	.+48     	; 0xbfe6 <animate_enemy_shots+0xe0>
							game.enemies[i].shot[j].shared.x-game.camera_x, game.enemies[i].shot[j].shared.y, 8, 8
						)
					)
					{
						SFX_HIT;
    bfb6:	41 e0       	ldi	r20, 0x01	; 1
    bfb8:	6f ef       	ldi	r22, 0xFF	; 255
    bfba:	84 e0       	ldi	r24, 0x04	; 4
    bfbc:	0e 94 8b 43 	call	0x8716	; 0x8716 <TriggerFx>
#if DEBUG_GODMODE
#else
						game.player.shield -= game.enemies[i].shot[j].hit_count;
#endif
						if (game.player.shield <= 0)
    bfc0:	80 91 dd 0d 	lds	r24, 0x0DDD
    bfc4:	18 16       	cp	r1, r24
    bfc6:	4c f0       	brlt	.+18     	; 0xbfda <animate_enemy_shots+0xd4>
						{
							SFX_PLAYER_EXPLODE;
    bfc8:	41 e0       	ldi	r20, 0x01	; 1
    bfca:	6f ef       	ldi	r22, 0xFF	; 255
    bfcc:	85 e0       	ldi	r24, 0x05	; 5
    bfce:	0e 94 8b 43 	call	0x8716	; 0x8716 <TriggerFx>
							game.player.shield = 0;
    bfd2:	10 92 dd 0d 	sts	0x0DDD, r1
							game.player.flags = EXPLODING;
    bfd6:	d0 92 d7 0d 	sts	0x0DD7, r13
						}
						game.enemies[i].shot[j].active = 0;
    bfda:	18 82       	st	Y, r1
						LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
    bfdc:	01 e0       	ldi	r16, 0x01	; 1
    bfde:	21 e0       	ldi	r18, 0x01	; 1
    bfe0:	40 e0       	ldi	r20, 0x00	; 0
    bfe2:	60 ee       	ldi	r22, 0xE0	; 224
    bfe4:	14 c0       	rjmp	.+40     	; 0xc00e <animate_enemy_shots+0x108>
					}
					else
					{
						game.enemies[i].shot[j].shared.x += LBMoveDelta(game.enemies[i].shot[j].shared.vx, game.frame_counter);
    bfe6:	60 91 cb 0d 	lds	r22, 0x0DCB
    bfea:	fe 01       	movw	r30, r28
    bfec:	34 97       	sbiw	r30, 0x04	; 4
    bfee:	80 81       	ld	r24, Z
    bff0:	0e 94 e2 4e 	call	0x9dc4	; 0x9dc4 <LBMoveDelta>
    bff4:	68 0e       	add	r6, r24
    bff6:	79 1e       	adc	r7, r25
    bff8:	f4 01       	movw	r30, r8
    bffa:	71 82       	std	Z+1, r7	; 0x01
    bffc:	60 82       	st	Z, r6
						LBMoveSprite(slot, game.enemies[i].shot[j].shared.x - game.camera_x, game.enemies[i].shot[j].shared.y - game.camera_y, 1, 1);
    bffe:	80 91 b9 0d 	lds	r24, 0x0DB9
    c002:	4f 2d       	mov	r20, r15
    c004:	48 1b       	sub	r20, r24
    c006:	66 2d       	mov	r22, r6
    c008:	6b 19       	sub	r22, r11
    c00a:	01 e0       	ldi	r16, 0x01	; 1
    c00c:	21 e0       	ldi	r18, 0x01	; 1
    c00e:	81 2f       	mov	r24, r17
    c010:	0e 94 c5 50 	call	0xa18a	; 0xa18a <LBMoveSprite>
					}
				}
			}
			slot += 1;
    c014:	1f 5f       	subi	r17, 0xFF	; 255
    c016:	f3 e3       	ldi	r31, 0x33	; 51
    c018:	8f 0e       	add	r8, r31
    c01a:	91 1c       	adc	r9, r1
    c01c:	e3 96       	adiw	r28, 0x33	; 51

void animate_enemy_shots()
{
	u8 slot = ENEMY_SHOT_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    c01e:	14 31       	cpi	r17, 0x14	; 20
    c020:	09 f0       	breq	.+2      	; 0xc024 <animate_enemy_shots+0x11e>
    c022:	88 cf       	rjmp	.-240    	; 0xbf34 <animate_enemy_shots+0x2e>
				}
			}
			slot += 1;
		}
	}
}
    c024:	df 91       	pop	r29
    c026:	cf 91       	pop	r28
    c028:	1f 91       	pop	r17
    c02a:	0f 91       	pop	r16
    c02c:	ff 90       	pop	r15
    c02e:	ef 90       	pop	r14
    c030:	df 90       	pop	r13
    c032:	cf 90       	pop	r12
    c034:	bf 90       	pop	r11
    c036:	af 90       	pop	r10
    c038:	9f 90       	pop	r9
    c03a:	8f 90       	pop	r8
    c03c:	7f 90       	pop	r7
    c03e:	6f 90       	pop	r6
    c040:	08 95       	ret

0000c042 <clear_sprites>:
	return 0;
	
}

void clear_sprites(u8 from, u8 count)
{
    c042:	ef 92       	push	r14
    c044:	ff 92       	push	r15
    c046:	0f 93       	push	r16
    c048:	cf 93       	push	r28
	for(u8 i = from; i < from+count; i++)
    c04a:	c8 2f       	mov	r28, r24
    c04c:	e6 2e       	mov	r14, r22
    c04e:	f1 2c       	mov	r15, r1
    c050:	e8 0e       	add	r14, r24
    c052:	f1 1c       	adc	r15, r1
    c054:	8c 2f       	mov	r24, r28
    c056:	90 e0       	ldi	r25, 0x00	; 0
    c058:	8e 15       	cp	r24, r14
    c05a:	9f 05       	cpc	r25, r15
    c05c:	7c f4       	brge	.+30     	; 0xc07c <clear_sprites+0x3a>
	{
		LBMapSprite(i, map_none, 0);
    c05e:	40 e0       	ldi	r20, 0x00	; 0
    c060:	61 ee       	ldi	r22, 0xE1	; 225
    c062:	76 e3       	ldi	r23, 0x36	; 54
    c064:	8c 2f       	mov	r24, r28
    c066:	0e 94 73 50 	call	0xa0e6	; 0xa0e6 <LBMapSprite>
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
    c06a:	01 e0       	ldi	r16, 0x01	; 1
    c06c:	21 e0       	ldi	r18, 0x01	; 1
    c06e:	40 e0       	ldi	r20, 0x00	; 0
    c070:	60 ee       	ldi	r22, 0xE0	; 224
    c072:	8c 2f       	mov	r24, r28
    c074:	0e 94 c5 50 	call	0xa18a	; 0xa18a <LBMoveSprite>
	
}

void clear_sprites(u8 from, u8 count)
{
	for(u8 i = from; i < from+count; i++)
    c078:	cf 5f       	subi	r28, 0xFF	; 255
    c07a:	ec cf       	rjmp	.-40     	; 0xc054 <clear_sprites+0x12>
	{
		LBMapSprite(i, map_none, 0);
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
	}
}
    c07c:	cf 91       	pop	r28
    c07e:	0f 91       	pop	r16
    c080:	ff 90       	pop	r15
    c082:	ef 90       	pop	r14
    c084:	08 95       	ret

0000c086 <fade_through>:
	EepromWriteBlock(block);
}

void fade_through()
{
	FadeOut(FRAMES_PER_FADE, true);
    c086:	61 e0       	ldi	r22, 0x01	; 1
    c088:	81 e0       	ldi	r24, 0x01	; 1
    c08a:	0e 94 ad 4e 	call	0x9d5a	; 0x9d5a <FadeOut>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    c08e:	64 e1       	ldi	r22, 0x14	; 20
    c090:	80 e0       	ldi	r24, 0x00	; 0
    c092:	0e 94 21 60 	call	0xc042	; 0xc042 <clear_sprites>
	LBRotateSprites();
    c096:	0e 94 03 51 	call	0xa206	; 0xa206 <LBRotateSprites>
	ClearVram();
    c09a:	0e 94 ac 3f 	call	0x7f58	; 0x7f58 <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    c09e:	60 e0       	ldi	r22, 0x00	; 0
    c0a0:	81 e0       	ldi	r24, 0x01	; 1
    c0a2:	0c 94 a1 4e 	jmp	0x9d42	; 0x9d42 <FadeIn>

0000c0a6 <load_level>:
	game.level_width = pgm_read_byte(&level[0])*MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH;
	game.level_height = pgm_read_byte(&level[1])*MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
}

void load_level(u8 index, u8 drop_ship)
{	
    c0a6:	0f 93       	push	r16
    c0a8:	cf 93       	push	r28
    c0aa:	df 93       	push	r29
    c0ac:	c8 2f       	mov	r28, r24
    c0ae:	d6 2f       	mov	r29, r22
	u8 ship_x = (get_hero_spawn_x(index) - 2) * 8;
	u8 ship_y = 0;
	char ship_increment = 3;
	
	Screen.scrollX = 0;
    c0b0:	10 92 b2 0c 	sts	0x0CB2, r1
	Screen.scrollY = 0;
    c0b4:	10 92 b3 0c 	sts	0x0CB3, r1
	Screen.scrollHeight = 29;
    c0b8:	8d e1       	ldi	r24, 0x1D	; 29
    c0ba:	80 93 b4 0c 	sts	0x0CB4, r24
	Screen.overlayTileTable = tiles_data;
    c0be:	84 ee       	ldi	r24, 0xE4	; 228
    c0c0:	96 e3       	ldi	r25, 0x36	; 54
    c0c2:	90 93 b1 0c 	sts	0x0CB1, r25
    c0c6:	80 93 b0 0c 	sts	0x0CB0, r24
	Screen.overlayHeight = 3;
    c0ca:	83 e0       	ldi	r24, 0x03	; 3
    c0cc:	80 93 af 0c 	sts	0x0CAF, r24
	clear_overlay(2);
    c0d0:	82 e0       	ldi	r24, 0x02	; 2
    c0d2:	0e 94 d7 55 	call	0xabae	; 0xabae <clear_overlay>
	game.current_level_index = index;
    c0d6:	c0 93 c6 0d 	sts	0x0DC6, r28
	game.level_ended = 0;
    c0da:	10 92 ce 0d 	sts	0x0DCE, r1
void LBResetJoyPadState(JoyPadState* p)
/*
 * Get the current joy pad button state for index controller
 */
{
	p->held = 0;
    c0de:	10 92 41 0e 	sts	0x0E41, r1
    c0e2:	10 92 40 0e 	sts	0x0E40, r1
	p->pressed = 0;
    c0e6:	10 92 3d 0e 	sts	0x0E3D, r1
    c0ea:	10 92 3c 0e 	sts	0x0E3C, r1
	p->released = 0;
    c0ee:	10 92 3f 0e 	sts	0x0E3F, r1
    c0f2:	10 92 3e 0e 	sts	0x0E3E, r1
	p->held_cycles = 0;
    c0f6:	10 92 42 0e 	sts	0x0E42, r1
void LBResetJoyPadState(JoyPadState* p)
/*
 * Get the current joy pad button state for index controller
 */
{
	p->held = 0;
    c0fa:	10 92 b5 0e 	sts	0x0EB5, r1
    c0fe:	10 92 b4 0e 	sts	0x0EB4, r1
	p->pressed = 0;
    c102:	10 92 b1 0e 	sts	0x0EB1, r1
    c106:	10 92 b0 0e 	sts	0x0EB0, r1
	p->released = 0;
    c10a:	10 92 b3 0e 	sts	0x0EB3, r1
    c10e:	10 92 b2 0e 	sts	0x0EB2, r1
	p->held_cycles = 0;
    c112:	10 92 b6 0e 	sts	0x0EB6, r1
	LBResetJoyPadState(&game.player.controls);
	LBResetJoyPadState(&game.boss.controls);
	switch (index)
    c116:	8c 2f       	mov	r24, r28
    c118:	90 e0       	ldi	r25, 0x00	; 0
    c11a:	8a 30       	cpi	r24, 0x0A	; 10
    c11c:	91 05       	cpc	r25, r1
    c11e:	c0 f4       	brcc	.+48     	; 0xc150 <load_level+0xaa>
    c120:	fc 01       	movw	r30, r24
    c122:	e8 5c       	subi	r30, 0xC8	; 200
    c124:	ff 4f       	sbci	r31, 0xFF	; 255
    c126:	0c 94 f4 6b 	jmp	0xd7e8	; 0xd7e8 <__tablejump2__>
	{
		case 0: map_level_info((char*) map_level_ice); break;
    c12a:	8e e8       	ldi	r24, 0x8E	; 142
    c12c:	93 e7       	ldi	r25, 0x73	; 115
    c12e:	0e c0       	rjmp	.+28     	; 0xc14c <load_level+0xa6>
		case 1: map_level_info((char*) map_level_space); break;
		case 2: map_level_info((char*) map_level_fire); break;
    c130:	8d e8       	ldi	r24, 0x8D	; 141
    c132:	92 e7       	ldi	r25, 0x72	; 114
    c134:	0b c0       	rjmp	.+22     	; 0xc14c <load_level+0xa6>
		case 3: map_level_info((char*) map_level_space); break;
		case 4: map_level_info((char*) map_level_forest); break;
    c136:	8c e8       	ldi	r24, 0x8C	; 140
    c138:	91 e7       	ldi	r25, 0x71	; 113
    c13a:	08 c0       	rjmp	.+16     	; 0xc14c <load_level+0xa6>
		case 5: map_level_info((char*) map_level_space); break;
		case 6: map_level_info((char*) map_level_city); break;
    c13c:	8b e8       	ldi	r24, 0x8B	; 139
    c13e:	90 e7       	ldi	r25, 0x70	; 112
    c140:	05 c0       	rjmp	.+10     	; 0xc14c <load_level+0xa6>
		case 7: map_level_info((char*) map_level_space); break;
		case 8: map_level_info((char*) map_level_desert); break;
    c142:	8a e8       	ldi	r24, 0x8A	; 138
    c144:	9f e6       	ldi	r25, 0x6F	; 111
    c146:	02 c0       	rjmp	.+4      	; 0xc14c <load_level+0xa6>
		case 9: map_level_info((char*) map_level_space); break;
    c148:	89 e8       	ldi	r24, 0x89	; 137
    c14a:	9e e6       	ldi	r25, 0x6E	; 110
    c14c:	0e 94 d5 57 	call	0xafaa	; 0xafaa <map_level_info>
	}
	game.column_count = 0;
    c150:	10 92 c2 0d 	sts	0x0DC2, r1
	game.camera_x = get_camera_x(index);
    c154:	10 92 b2 0d 	sts	0x0DB2, r1
    c158:	10 92 b1 0d 	sts	0x0DB1, r1
	game.camera_y = get_camera_y(index);
    c15c:	10 92 b9 0d 	sts	0x0DB9, r1
	game.player.shared.x = get_hero_spawn_x(index)*8;
    c160:	88 e1       	ldi	r24, 0x18	; 24
    c162:	90 e0       	ldi	r25, 0x00	; 0
    c164:	90 93 d0 0d 	sts	0x0DD0, r25
    c168:	80 93 cf 0d 	sts	0x0DCF, r24
	game.player.shared.y = get_hero_spawn_y(index)*8;
    c16c:	88 ea       	ldi	r24, 0xA8	; 168
    c16e:	90 e0       	ldi	r25, 0x00	; 0
    c170:	90 93 d2 0d 	sts	0x0DD2, r25
    c174:	80 93 d1 0d 	sts	0x0DD1, r24
	game.boss.shared.x = get_boss_spawn_x(index)*8;
    c178:	28 ed       	ldi	r18, 0xD8	; 216
    c17a:	37 e0       	ldi	r19, 0x07	; 7
    c17c:	30 93 44 0e 	sts	0x0E44, r19
    c180:	20 93 43 0e 	sts	0x0E43, r18
	game.boss.shared.y = get_boss_spawn_y(index)*8;
    c184:	90 93 46 0e 	sts	0x0E46, r25
    c188:	80 93 45 0e 	sts	0x0E45, r24
	game.camera_x *= 8;
	game.camera_y *= 8;
	game.scroll_src_x = game.camera_x / 8 + CAMERA_WIDTH + 1;
    c18c:	8d e1       	ldi	r24, 0x1D	; 29
    c18e:	80 93 ba 0d 	sts	0x0DBA, r24
    game.scroll_dest_x = game.camera_x / 8 + CAMERA_WIDTH + 1;
    c192:	80 93 be 0d 	sts	0x0DBE, r24
	game.scroll_src_y = game.camera_y / 8 + CAMERA_HEIGHT + 1;
    c196:	8a e1       	ldi	r24, 0x1A	; 26
    c198:	80 93 bb 0d 	sts	0x0DBB, r24
    game.scroll_dest_y =  game.camera_y / 8 + CAMERA_HEIGHT + 1;
    c19c:	80 93 bf 0d 	sts	0x0DBF, r24
	game.scroll_x = 0;
    c1a0:	10 92 bc 0d 	sts	0x0DBC, r1
	game.scroll_y = 0;
    c1a4:	10 92 bd 0d 	sts	0x0DBD, r1
	game.spawn_rate = BASE_SPAWN_RATE;
    c1a8:	8a e0       	ldi	r24, 0x0A	; 10
    c1aa:	80 93 cd 0d 	sts	0x0DCD, r24
	render_camera_view();
    c1ae:	0e 94 17 56 	call	0xac2e	; 0xac2e <render_camera_view>
	LBPrint(0, VRAM_TILES_V-3, (char*) strShield);
    c1b2:	44 e0       	ldi	r20, 0x04	; 4
    c1b4:	5b e0       	ldi	r21, 0x0B	; 11
    c1b6:	6d e1       	ldi	r22, 0x1D	; 29
    c1b8:	80 e0       	ldi	r24, 0x00	; 0
    c1ba:	0e 94 9e 4f 	call	0x9f3c	; 0x9f3c <LBPrint>
	LBPrint(18, VRAM_TILES_V-3, (char*) strTime);
    c1be:	47 ef       	ldi	r20, 0xF7	; 247
    c1c0:	5a e0       	ldi	r21, 0x0A	; 10
    c1c2:	6d e1       	ldi	r22, 0x1D	; 29
    c1c4:	82 e1       	ldi	r24, 0x12	; 18
    c1c6:	0e 94 9e 4f 	call	0x9f3c	; 0x9f3c <LBPrint>
	LBPrint(0, VRAM_TILES_V-2, (char*) strLives);
    c1ca:	4d ef       	ldi	r20, 0xFD	; 253
    c1cc:	5a e0       	ldi	r21, 0x0A	; 10
    c1ce:	6e e1       	ldi	r22, 0x1E	; 30
    c1d0:	80 e0       	ldi	r24, 0x00	; 0
    c1d2:	0e 94 9e 4f 	call	0x9f3c	; 0x9f3c <LBPrint>
	LBPrint(17, VRAM_TILES_V-2, (char*) strScore);
    c1d6:	4c e0       	ldi	r20, 0x0C	; 12
    c1d8:	5b e0       	ldi	r21, 0x0B	; 11
    c1da:	6e e1       	ldi	r22, 0x1E	; 30
    c1dc:	81 e1       	ldi	r24, 0x11	; 17
    c1de:	0e 94 9e 4f 	call	0x9f3c	; 0x9f3c <LBPrint>
	LBPrint(17, VRAM_TILES_V-1, (char*) strTally);
    c1e2:	46 eb       	ldi	r20, 0xB6	; 182
    c1e4:	5a e0       	ldi	r21, 0x0A	; 10
    c1e6:	6f e1       	ldi	r22, 0x1F	; 31
    c1e8:	81 e1       	ldi	r24, 0x11	; 17
    c1ea:	0e 94 9e 4f 	call	0x9f3c	; 0x9f3c <LBPrint>
	
	LBPrintByte(9, VRAM_TILES_V-3, game.player.shield ,true);
    c1ee:	21 e0       	ldi	r18, 0x01	; 1
    c1f0:	40 91 dd 0d 	lds	r20, 0x0DDD
    c1f4:	6d e1       	ldi	r22, 0x1D	; 29
    c1f6:	89 e0       	ldi	r24, 0x09	; 9
    c1f8:	0e 94 ba 4f 	call	0x9f74	; 0x9f74 <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-3, game.time ,true);
    c1fc:	40 91 b7 0d 	lds	r20, 0x0DB7
    c200:	50 91 b8 0d 	lds	r21, 0x0DB8
    c204:	21 e0       	ldi	r18, 0x01	; 1
    c206:	6d e1       	ldi	r22, 0x1D	; 29
    c208:	8b e1       	ldi	r24, 0x1B	; 27
    c20a:	0e 94 eb 4f 	call	0x9fd6	; 0x9fd6 <LBPrintInt>
	LBPrintByte(9, VRAM_TILES_V-2, game.lives ,true);
    c20e:	21 e0       	ldi	r18, 0x01	; 1
    c210:	40 91 c4 0d 	lds	r20, 0x0DC4
    c214:	6e e1       	ldi	r22, 0x1E	; 30
    c216:	89 e0       	ldi	r24, 0x09	; 9
    c218:	0e 94 ba 4f 	call	0x9f74	; 0x9f74 <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-2, game.level_score ,true);
    c21c:	40 91 b5 0d 	lds	r20, 0x0DB5
    c220:	50 91 b6 0d 	lds	r21, 0x0DB6
    c224:	21 e0       	ldi	r18, 0x01	; 1
    c226:	6e e1       	ldi	r22, 0x1E	; 30
    c228:	8b e1       	ldi	r24, 0x1B	; 27
    c22a:	0e 94 eb 4f 	call	0x9fd6	; 0x9fd6 <LBPrintInt>
	LBPrintInt(27, VRAM_TILES_V-1, game.score ,true);
    c22e:	40 91 b3 0d 	lds	r20, 0x0DB3
    c232:	50 91 b4 0d 	lds	r21, 0x0DB4
    c236:	21 e0       	ldi	r18, 0x01	; 1
    c238:	6f e1       	ldi	r22, 0x1F	; 31
    c23a:	8b e1       	ldi	r24, 0x1B	; 27
    c23c:	0e 94 eb 4f 	call	0x9fd6	; 0x9fd6 <LBPrintInt>
	
	
	if (!is_space() && drop_ship)
    c240:	0e 94 37 51 	call	0xa26e	; 0xa26e <is_space>
    c244:	81 11       	cpse	r24, r1
    c246:	39 c0       	rjmp	.+114    	; 0xc2ba <load_level+0x214>
    c248:	dd 23       	and	r29, r29
    c24a:	b9 f1       	breq	.+110    	; 0xc2ba <load_level+0x214>
	{
		map_ship();
    c24c:	0e 94 c0 57 	call	0xaf80	; 0xaf80 <map_ship>

void load_level(u8 index, u8 drop_ship)
{	
	u8 ship_x = (get_hero_spawn_x(index) - 2) * 8;
	u8 ship_y = 0;
	char ship_increment = 3;
    c250:	d3 e0       	ldi	r29, 0x03	; 3
}

void load_level(u8 index, u8 drop_ship)
{	
	u8 ship_x = (get_hero_spawn_x(index) - 2) * 8;
	u8 ship_y = 0;
    c252:	c0 e0       	ldi	r28, 0x00	; 0
	if (!is_space() && drop_ship)
	{
		map_ship();
		while (1)
		{
			WaitVsync(1);
    c254:	81 e0       	ldi	r24, 0x01	; 1
    c256:	90 e0       	ldi	r25, 0x00	; 0
    c258:	0e 94 45 4e 	call	0x9c8a	; 0x9c8a <WaitVsync>
			if (ship_y >= get_hero_spawn_y(index)*8)
    c25c:	8c 2f       	mov	r24, r28
    c25e:	90 e0       	ldi	r25, 0x00	; 0
    c260:	88 3a       	cpi	r24, 0xA8	; 168
    c262:	91 05       	cpc	r25, r1
    c264:	74 f0       	brlt	.+28     	; 0xc282 <load_level+0x1dc>
			{
				LBMapSprite(0, map_hero_idle, 0);
    c266:	40 e0       	ldi	r20, 0x00	; 0
    c268:	65 eb       	ldi	r22, 0xB5	; 181
    c26a:	76 e3       	ldi	r23, 0x36	; 54
    c26c:	80 e0       	ldi	r24, 0x00	; 0
    c26e:	0e 94 73 50 	call	0xa0e6	; 0xa0e6 <LBMapSprite>
				LBMoveSprite(0, get_hero_spawn_x(index)*8, get_hero_spawn_y(index)*8, 2, 3);
    c272:	03 e0       	ldi	r16, 0x03	; 3
    c274:	22 e0       	ldi	r18, 0x02	; 2
    c276:	48 ea       	ldi	r20, 0xA8	; 168
    c278:	68 e1       	ldi	r22, 0x18	; 24
    c27a:	80 e0       	ldi	r24, 0x00	; 0
    c27c:	0e 94 c5 50 	call	0xa18a	; 0xa18a <LBMoveSprite>
				ship_increment = -3;
    c280:	dd ef       	ldi	r29, 0xFD	; 253
			}
			LBMapSprite(6, LBGetNextFrame(&game.player.run), 0);
    c282:	8c e1       	ldi	r24, 0x1C	; 28
    c284:	9e e0       	ldi	r25, 0x0E	; 14
    c286:	0e 94 0d 4f 	call	0x9e1a	; 0x9e1a <LBGetNextFrame>
    c28a:	40 e0       	ldi	r20, 0x00	; 0
    c28c:	bc 01       	movw	r22, r24
    c28e:	86 e0       	ldi	r24, 0x06	; 6
    c290:	0e 94 73 50 	call	0xa0e6	; 0xa0e6 <LBMapSprite>
			LBMoveSprite(6, ship_x, ship_y, 4, 2);
    c294:	02 e0       	ldi	r16, 0x02	; 2
    c296:	24 e0       	ldi	r18, 0x04	; 4
    c298:	4c 2f       	mov	r20, r28
    c29a:	68 e0       	ldi	r22, 0x08	; 8
    c29c:	86 e0       	ldi	r24, 0x06	; 6
    c29e:	0e 94 c5 50 	call	0xa18a	; 0xa18a <LBMoveSprite>
			ship_y += ship_increment;
    c2a2:	cd 0f       	add	r28, r29
			if (ship_y == 0)
    c2a4:	39 f4       	brne	.+14     	; 0xc2b4 <load_level+0x20e>
			{
				clear_sprites(6, 8);
    c2a6:	68 e0       	ldi	r22, 0x08	; 8
    c2a8:	86 e0       	ldi	r24, 0x06	; 6
				break;
			}
			LBRotateSprites();
		}
	}
}
    c2aa:	df 91       	pop	r29
    c2ac:	cf 91       	pop	r28
    c2ae:	0f 91       	pop	r16
			LBMapSprite(6, LBGetNextFrame(&game.player.run), 0);
			LBMoveSprite(6, ship_x, ship_y, 4, 2);
			ship_y += ship_increment;
			if (ship_y == 0)
			{
				clear_sprites(6, 8);
    c2b0:	0c 94 21 60 	jmp	0xc042	; 0xc042 <clear_sprites>
				break;
			}
			LBRotateSprites();
    c2b4:	0e 94 03 51 	call	0xa206	; 0xa206 <LBRotateSprites>
		}
    c2b8:	cd cf       	rjmp	.-102    	; 0xc254 <load_level+0x1ae>
	}
}
    c2ba:	df 91       	pop	r29
    c2bc:	cf 91       	pop	r28
    c2be:	0f 91       	pop	r16
    c2c0:	08 95       	ret

0000c2c2 <hide_sprites>:
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
	}
}

void hide_sprites(u8 from, u8 count)
{
    c2c2:	0f 93       	push	r16
    c2c4:	1f 93       	push	r17
    c2c6:	cf 93       	push	r28
    c2c8:	df 93       	push	r29
	for(u8 i = from; i < from+count; i++)
    c2ca:	18 2f       	mov	r17, r24
    c2cc:	c6 2f       	mov	r28, r22
    c2ce:	d0 e0       	ldi	r29, 0x00	; 0
    c2d0:	c8 0f       	add	r28, r24
    c2d2:	d1 1d       	adc	r29, r1
    c2d4:	81 2f       	mov	r24, r17
    c2d6:	90 e0       	ldi	r25, 0x00	; 0
    c2d8:	8c 17       	cp	r24, r28
    c2da:	9d 07       	cpc	r25, r29
    c2dc:	4c f4       	brge	.+18     	; 0xc2f0 <hide_sprites+0x2e>
	{
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
    c2de:	01 e0       	ldi	r16, 0x01	; 1
    c2e0:	21 e0       	ldi	r18, 0x01	; 1
    c2e2:	40 e0       	ldi	r20, 0x00	; 0
    c2e4:	60 ee       	ldi	r22, 0xE0	; 224
    c2e6:	81 2f       	mov	r24, r17
    c2e8:	0e 94 c5 50 	call	0xa18a	; 0xa18a <LBMoveSprite>
	}
}

void hide_sprites(u8 from, u8 count)
{
	for(u8 i = from; i < from+count; i++)
    c2ec:	1f 5f       	subi	r17, 0xFF	; 255
    c2ee:	f2 cf       	rjmp	.-28     	; 0xc2d4 <hide_sprites+0x12>
	{
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
	}
}
    c2f0:	df 91       	pop	r29
    c2f2:	cf 91       	pop	r28
    c2f4:	1f 91       	pop	r17
    c2f6:	0f 91       	pop	r16
    c2f8:	08 95       	ret

0000c2fa <select_pressed>:
	StopSong();
	load_high_scores();
}

char select_pressed(JoyPadState* p)
{
    c2fa:	fc 01       	movw	r30, r24
    c2fc:	20 81       	ld	r18, Z
    c2fe:	31 81       	ldd	r19, Z+1	; 0x01
    c300:	28 70       	andi	r18, 0x08	; 8
    c302:	31 70       	andi	r19, 0x01	; 1
	return (p->pressed & BTN_A) || (p->pressed & BTN_START);
    c304:	81 e0       	ldi	r24, 0x01	; 1
    c306:	23 2b       	or	r18, r19
    c308:	09 f4       	brne	.+2      	; 0xc30c <select_pressed+0x12>
    c30a:	80 e0       	ldi	r24, 0x00	; 0
}
    c30c:	08 95       	ret

0000c30e <stream_text_middle>:


void stream_text_middle(const char* dialogue, u8 y)
{
    c30e:	ff 92       	push	r15
    c310:	0f 93       	push	r16
    c312:	1f 93       	push	r17
    c314:	cf 93       	push	r28
    c316:	df 93       	push	r29
    c318:	ec 01       	movw	r28, r24
    c31a:	16 2f       	mov	r17, r22
	u8 x, ln, c;
	
	while (pgm_read_byte(dialogue) != '#')
	{
		ln = strnlen_P(dialogue, 255);
		x = 14 - ln / 2;
    c31c:	8e e0       	ldi	r24, 0x0E	; 14
    c31e:	f8 2e       	mov	r15, r24

void stream_text_middle(const char* dialogue, u8 y)
{
	u8 x, ln, c;
	
	while (pgm_read_byte(dialogue) != '#')
    c320:	fe 01       	movw	r30, r28
    c322:	84 91       	lpm	r24, Z
    c324:	83 32       	cpi	r24, 0x23	; 35
    c326:	21 f1       	breq	.+72     	; 0xc370 <stream_text_middle+0x62>
	{
		ln = strnlen_P(dialogue, 255);
    c328:	6f ef       	ldi	r22, 0xFF	; 255
    c32a:	70 e0       	ldi	r23, 0x00	; 0
    c32c:	ce 01       	movw	r24, r28
    c32e:	0e 94 81 6d 	call	0xdb02	; 0xdb02 <strnlen_P>
		x = 14 - ln / 2;
    c332:	86 95       	lsr	r24
    c334:	0f 2d       	mov	r16, r15
    c336:	08 1b       	sub	r16, r24
    c338:	0c 1b       	sub	r16, r28
    c33a:	8c 2f       	mov	r24, r28
    c33c:	80 0f       	add	r24, r16
		while ((c = pgm_read_byte(dialogue++)))
    c33e:	21 96       	adiw	r28, 0x01	; 1
    c340:	fe 01       	movw	r30, r28
    c342:	31 97       	sbiw	r30, 0x01	; 1
    c344:	44 91       	lpm	r20, Z
    c346:	44 23       	and	r20, r20
    c348:	89 f0       	breq	.+34     	; 0xc36c <stream_text_middle+0x5e>
		{
			LBPrintChar(x++, y, c);
    c34a:	61 2f       	mov	r22, r17
    c34c:	0e 94 7e 4f 	call	0x9efc	; 0x9efc <LBPrintChar>
			LBGetJoyPadState(&game.player.controls, 0);
    c350:	60 e0       	ldi	r22, 0x00	; 0
    c352:	8c e3       	ldi	r24, 0x3C	; 60
    c354:	9e e0       	ldi	r25, 0x0E	; 14
    c356:	0e 94 33 4f 	call	0x9e66	; 0x9e66 <LBGetJoyPadState>
			if (!(game.player.controls.held & BTN_B)) WaitUs(CHARACTER_DELAY_US);
    c35a:	80 91 40 0e 	lds	r24, 0x0E40
    c35e:	80 fd       	sbrc	r24, 0
    c360:	ec cf       	rjmp	.-40     	; 0xc33a <stream_text_middle+0x2c>
    c362:	80 e7       	ldi	r24, 0x70	; 112
    c364:	97 e1       	ldi	r25, 0x17	; 23
    c366:	0e 94 e2 3f 	call	0x7fc4	; 0x7fc4 <WaitUs>
    c36a:	e7 cf       	rjmp	.-50     	; 0xc33a <stream_text_middle+0x2c>
		}
		y++;
    c36c:	1f 5f       	subi	r17, 0xFF	; 255
    c36e:	d8 cf       	rjmp	.-80     	; 0xc320 <stream_text_middle+0x12>
	}
}
    c370:	df 91       	pop	r29
    c372:	cf 91       	pop	r28
    c374:	1f 91       	pop	r17
    c376:	0f 91       	pop	r16
    c378:	ff 90       	pop	r15
    c37a:	08 95       	ret

0000c37c <stream_text_anywhere>:

void stream_text_anywhere(const char* dialogue, u8 x, u8 y)
{
    c37c:	ff 92       	push	r15
    c37e:	0f 93       	push	r16
    c380:	1f 93       	push	r17
    c382:	cf 93       	push	r28
    c384:	df 93       	push	r29
    c386:	f6 2e       	mov	r15, r22
    c388:	14 2f       	mov	r17, r20
	u8 ln, c;
	u8 cursor = x; 
	
	while (pgm_read_byte(dialogue) != '#')
    c38a:	fc 01       	movw	r30, r24
    c38c:	24 91       	lpm	r18, Z
    c38e:	23 32       	cpi	r18, 0x23	; 35
    c390:	b1 f0       	breq	.+44     	; 0xc3be <stream_text_anywhere+0x42>
    c392:	ec 01       	movw	r28, r24
    c394:	0f 2d       	mov	r16, r15
    c396:	08 1b       	sub	r16, r24
    c398:	8c 2f       	mov	r24, r28
    c39a:	80 0f       	add	r24, r16
	{
		ln = strnlen_P(dialogue, 255);
		while ((c = pgm_read_byte(dialogue++)))
    c39c:	21 96       	adiw	r28, 0x01	; 1
    c39e:	fe 01       	movw	r30, r28
    c3a0:	31 97       	sbiw	r30, 0x01	; 1
    c3a2:	44 91       	lpm	r20, Z
    c3a4:	44 23       	and	r20, r20
    c3a6:	41 f0       	breq	.+16     	; 0xc3b8 <stream_text_anywhere+0x3c>
		{
			LBPrintChar(cursor++, y, c);
    c3a8:	61 2f       	mov	r22, r17
    c3aa:	0e 94 7e 4f 	call	0x9efc	; 0x9efc <LBPrintChar>
			WaitUs(CHARACTER_DELAY_US);
    c3ae:	80 e7       	ldi	r24, 0x70	; 112
    c3b0:	97 e1       	ldi	r25, 0x17	; 23
    c3b2:	0e 94 e2 3f 	call	0x7fc4	; 0x7fc4 <WaitUs>
    c3b6:	f0 cf       	rjmp	.-32     	; 0xc398 <stream_text_anywhere+0x1c>
		}
		y++;
    c3b8:	1f 5f       	subi	r17, 0xFF	; 255
	u8 cursor = x; 
	
	while (pgm_read_byte(dialogue) != '#')
	{
		ln = strnlen_P(dialogue, 255);
		while ((c = pgm_read_byte(dialogue++)))
    c3ba:	ce 01       	movw	r24, r28
    c3bc:	e6 cf       	rjmp	.-52     	; 0xc38a <stream_text_anywhere+0xe>
			WaitUs(CHARACTER_DELAY_US);
		}
		y++;
		cursor = x;
	}
}
    c3be:	df 91       	pop	r29
    c3c0:	cf 91       	pop	r28
    c3c2:	1f 91       	pop	r17
    c3c4:	0f 91       	pop	r16
    c3c6:	ff 90       	pop	r15
    c3c8:	08 95       	ret

0000c3ca <map_particles>:

void map_particles()
{
    c3ca:	cf 93       	push	r28
	for (u8 i = 9; i < 20; i++)
    c3cc:	c9 e0       	ldi	r28, 0x09	; 9
	{
		LBMapSprite(i, map_particle, 0);
    c3ce:	40 e0       	ldi	r20, 0x00	; 0
    c3d0:	65 ed       	ldi	r22, 0xD5	; 213
    c3d2:	76 e3       	ldi	r23, 0x36	; 54
    c3d4:	8c 2f       	mov	r24, r28
    c3d6:	0e 94 73 50 	call	0xa0e6	; 0xa0e6 <LBMapSprite>
	}
}

void map_particles()
{
	for (u8 i = 9; i < 20; i++)
    c3da:	cf 5f       	subi	r28, 0xFF	; 255
    c3dc:	c4 31       	cpi	r28, 0x14	; 20
    c3de:	b9 f7       	brne	.-18     	; 0xc3ce <map_particles+0x4>
	{
		LBMapSprite(i, map_particle, 0);
	}
}
    c3e0:	cf 91       	pop	r28
    c3e2:	08 95       	ret

0000c3e4 <place_particles>:

void place_particles()
{
    c3e4:	0f 93       	push	r16
    c3e6:	1f 93       	push	r17
    c3e8:	cf 93       	push	r28
    c3ea:	df 93       	push	r29
    c3ec:	1f 92       	push	r1
    c3ee:	cd b7       	in	r28, 0x3d	; 61
    c3f0:	de b7       	in	r29, 0x3e	; 62
	for (u8 i = 9; i < 20; i++)
    c3f2:	19 e0       	ldi	r17, 0x09	; 9
	{
		LBMoveSprite(i, LBRandom(0, 224), LBRandom(0, 200), 1, 1);
    c3f4:	68 ec       	ldi	r22, 0xC8	; 200
    c3f6:	80 e0       	ldi	r24, 0x00	; 0
    c3f8:	0e 94 4e 50 	call	0xa09c	; 0xa09c <LBRandom>
    c3fc:	48 2f       	mov	r20, r24
    c3fe:	60 ee       	ldi	r22, 0xE0	; 224
    c400:	80 e0       	ldi	r24, 0x00	; 0
    c402:	49 83       	std	Y+1, r20	; 0x01
    c404:	0e 94 4e 50 	call	0xa09c	; 0xa09c <LBRandom>
    c408:	68 2f       	mov	r22, r24
    c40a:	01 e0       	ldi	r16, 0x01	; 1
    c40c:	21 e0       	ldi	r18, 0x01	; 1
    c40e:	49 81       	ldd	r20, Y+1	; 0x01
    c410:	81 2f       	mov	r24, r17
    c412:	0e 94 c5 50 	call	0xa18a	; 0xa18a <LBMoveSprite>
	}
}

void place_particles()
{
	for (u8 i = 9; i < 20; i++)
    c416:	1f 5f       	subi	r17, 0xFF	; 255
    c418:	14 31       	cpi	r17, 0x14	; 20
    c41a:	61 f7       	brne	.-40     	; 0xc3f4 <place_particles+0x10>
	{
		LBMoveSprite(i, LBRandom(0, 224), LBRandom(0, 200), 1, 1);
	}
}
    c41c:	0f 90       	pop	r0
    c41e:	df 91       	pop	r29
    c420:	cf 91       	pop	r28
    c422:	1f 91       	pop	r17
    c424:	0f 91       	pop	r16
    c426:	08 95       	ret

0000c428 <animate_particles>:

void animate_particles(char dy, u8 oy)
{
    c428:	ef 92       	push	r14
    c42a:	ff 92       	push	r15
    c42c:	0f 93       	push	r16
    c42e:	1f 93       	push	r17
    c430:	cf 93       	push	r28
    c432:	df 93       	push	r29
    c434:	d8 2f       	mov	r29, r24
    c436:	16 2f       	mov	r17, r22
    c438:	85 ee       	ldi	r24, 0xE5	; 229
    c43a:	e8 2e       	mov	r14, r24
    c43c:	8f e0       	ldi	r24, 0x0F	; 15
    c43e:	f8 2e       	mov	r15, r24
	for (u8 i = 9; i < 20; i++)
    c440:	c9 e0       	ldi	r28, 0x09	; 9
	{
		LBMoveSprite(i, extendedSprites[i].x, extendedSprites[i].y+dy, 1, 1);
    c442:	f7 01       	movw	r30, r14
    c444:	40 81       	ld	r20, Z
    c446:	4d 0f       	add	r20, r29
    c448:	01 e0       	ldi	r16, 0x01	; 1
    c44a:	21 e0       	ldi	r18, 0x01	; 1
    c44c:	31 97       	sbiw	r30, 0x01	; 1
    c44e:	60 81       	ld	r22, Z
    c450:	8c 2f       	mov	r24, r28
    c452:	0e 94 c5 50 	call	0xa18a	; 0xa18a <LBMoveSprite>
		if (extendedSprites[i].y > 200)
    c456:	f7 01       	movw	r30, r14
    c458:	80 81       	ld	r24, Z
    c45a:	89 3c       	cpi	r24, 0xC9	; 201
    c45c:	50 f0       	brcs	.+20     	; 0xc472 <animate_particles+0x4a>
		{
			LBMoveSprite(i, LBRandom(0, 224), oy, 1, 1);
    c45e:	60 ee       	ldi	r22, 0xE0	; 224
    c460:	80 e0       	ldi	r24, 0x00	; 0
    c462:	0e 94 4e 50 	call	0xa09c	; 0xa09c <LBRandom>
    c466:	21 e0       	ldi	r18, 0x01	; 1
    c468:	41 2f       	mov	r20, r17
    c46a:	68 2f       	mov	r22, r24
    c46c:	8c 2f       	mov	r24, r28
    c46e:	0e 94 c5 50 	call	0xa18a	; 0xa18a <LBMoveSprite>
	}
}

void animate_particles(char dy, u8 oy)
{
	for (u8 i = 9; i < 20; i++)
    c472:	cf 5f       	subi	r28, 0xFF	; 255
    c474:	f4 e0       	ldi	r31, 0x04	; 4
    c476:	ef 0e       	add	r14, r31
    c478:	f1 1c       	adc	r15, r1
    c47a:	c4 31       	cpi	r28, 0x14	; 20
    c47c:	11 f7       	brne	.-60     	; 0xc442 <animate_particles+0x1a>
		if (extendedSprites[i].y > 200)
		{
			LBMoveSprite(i, LBRandom(0, 224), oy, 1, 1);
		}
	}
}
    c47e:	df 91       	pop	r29
    c480:	cf 91       	pop	r28
    c482:	1f 91       	pop	r17
    c484:	0f 91       	pop	r16
    c486:	ff 90       	pop	r15
    c488:	ef 90       	pop	r14
    c48a:	08 95       	ret

0000c48c <get_emarald_map>:

const char* get_emarald_map(u8 index)
{
    c48c:	82 50       	subi	r24, 0x02	; 2
    c48e:	87 30       	cpi	r24, 0x07	; 7
    c490:	48 f4       	brcc	.+18     	; 0xc4a4 <get_emarald_map+0x18>
    c492:	e8 2f       	mov	r30, r24
    c494:	f0 e0       	ldi	r31, 0x00	; 0
    c496:	ee 0f       	add	r30, r30
    c498:	ff 1f       	adc	r31, r31
    c49a:	ee 5f       	subi	r30, 0xFE	; 254
    c49c:	fa 4f       	sbci	r31, 0xFA	; 250
    c49e:	80 81       	ld	r24, Z
    c4a0:	91 81       	ldd	r25, Z+1	; 0x01
    c4a2:	08 95       	ret
    c4a4:	89 ec       	ldi	r24, 0xC9	; 201
    c4a6:	96 e3       	ldi	r25, 0x36	; 54
		case 4: return map_emerald_2;
		case 6: return map_emerald_3;
		case 8: return map_emerald_4;
		default: return map_emerald_0;
	}
}
    c4a8:	08 95       	ret

0000c4aa <music_transition>:

void music_transition()
{
	if (is_space())
    c4aa:	0e 94 37 51 	call	0xa26e	; 0xa26e <is_space>
    c4ae:	88 23       	and	r24, r24
    c4b0:	19 f0       	breq	.+6      	; 0xc4b8 <music_transition+0xe>
	{
		StartSong(spacesong);
    c4b2:	83 e5       	ldi	r24, 0x53	; 83
    c4b4:	9b e0       	ldi	r25, 0x0B	; 11
    c4b6:	06 c0       	rjmp	.+12     	; 0xc4c4 <music_transition+0x1a>
	}
	else if (game.current_level_index != 0)
    c4b8:	80 91 c6 0d 	lds	r24, 0x0DC6
    c4bc:	88 23       	and	r24, r24
    c4be:	21 f0       	breq	.+8      	; 0xc4c8 <music_transition+0x1e>
	{
		StartSong(planetsong);
    c4c0:	83 ef       	ldi	r24, 0xF3	; 243
    c4c2:	91 e1       	ldi	r25, 0x11	; 17
    c4c4:	0c 94 a0 42 	jmp	0x8540	; 0x8540 <StartSong>
    c4c8:	08 95       	ret

0000c4ca <planet_transition>:
	}
}

void planet_transition(u8 index, char scroll, char atmosphere_height, char dy, u8 oy)
{
    c4ca:	cf 92       	push	r12
    c4cc:	df 92       	push	r13
    c4ce:	ef 92       	push	r14
    c4d0:	ff 92       	push	r15
    c4d2:	0f 93       	push	r16
    c4d4:	1f 93       	push	r17
    c4d6:	cf 93       	push	r28
    c4d8:	df 93       	push	r29
    c4da:	1f 92       	push	r1
    c4dc:	cd b7       	in	r28, 0x3d	; 61
    c4de:	de b7       	in	r29, 0x3e	; 62
    c4e0:	c8 2e       	mov	r12, r24
    c4e2:	e6 2e       	mov	r14, r22
    c4e4:	12 2f       	mov	r17, r18
    c4e6:	f0 2e       	mov	r15, r16
	u8 frame_counter = 0;
	
	fade_through();
    c4e8:	49 83       	std	Y+1, r20	; 0x01
    c4ea:	0e 94 43 60 	call	0xc086	; 0xc086 <fade_through>
	Screen.scrollX = 0;
    c4ee:	10 92 b2 0c 	sts	0x0CB2, r1
	Screen.scrollY = 0;
    c4f2:	10 92 b3 0c 	sts	0x0CB3, r1
	Screen.scrollHeight = 32;
    c4f6:	80 e2       	ldi	r24, 0x20	; 32
    c4f8:	80 93 b4 0c 	sts	0x0CB4, r24
	Screen.overlayHeight = 0;
    c4fc:	10 92 af 0c 	sts	0x0CAF, r1
	game.scroll_x = 0;
    c500:	10 92 bc 0d 	sts	0x0DBC, r1
	game.scroll_y = 0;
    c504:	10 92 bd 0d 	sts	0x0DBD, r1
	map_particles();
    c508:	0e 94 e5 61 	call	0xc3ca	; 0xc3ca <map_particles>
	map_ship();
    c50c:	0e 94 c0 57 	call	0xaf80	; 0xaf80 <map_ship>
	place_particles();
    c510:	0e 94 f2 61 	call	0xc3e4	; 0xc3e4 <place_particles>
	DrawMap2(0, atmosphere_height, map_atmosphere);
    c514:	4b ec       	ldi	r20, 0xCB	; 203
    c516:	5e e5       	ldi	r21, 0x5E	; 94
    c518:	69 81       	ldd	r22, Y+1	; 0x01
    c51a:	80 e0       	ldi	r24, 0x00	; 0
    c51c:	0e 94 dc 4d 	call	0x9bb8	; 0x9bb8 <DrawMap>
	game.current_level_index = index;
    c520:	c0 92 c6 0d 	sts	0x0DC6, r12
	music_transition();
    c524:	0e 94 55 62 	call	0xc4aa	; 0xc4aa <music_transition>
	if (!is_space())
    c528:	0e 94 37 51 	call	0xa26e	; 0xa26e <is_space>
    c52c:	81 11       	cpse	r24, r1
    c52e:	0f c0       	rjmp	.+30     	; 0xc54e <planet_transition+0x84>
	{
		LBMapSprite(8, get_emarald_map(index), 0);
    c530:	8c 2d       	mov	r24, r12
    c532:	0e 94 46 62 	call	0xc48c	; 0xc48c <get_emarald_map>
    c536:	40 e0       	ldi	r20, 0x00	; 0
    c538:	bc 01       	movw	r22, r24
    c53a:	88 e0       	ldi	r24, 0x08	; 8
    c53c:	0e 94 73 50 	call	0xa0e6	; 0xa0e6 <LBMapSprite>
		LBMoveSprite(8, 112, 48, 1, 1);
    c540:	01 e0       	ldi	r16, 0x01	; 1
    c542:	21 e0       	ldi	r18, 0x01	; 1
    c544:	40 e3       	ldi	r20, 0x30	; 48
    c546:	60 e7       	ldi	r22, 0x70	; 112
    c548:	88 e0       	ldi	r24, 0x08	; 8
    c54a:	0e 94 c5 50 	call	0xa18a	; 0xa18a <LBMoveSprite>
		StartSong(planetsong);
	}
}

void planet_transition(u8 index, char scroll, char atmosphere_height, char dy, u8 oy)
{
    c54e:	d1 2c       	mov	r13, r1
		LBMoveSprite(8, 112, 48, 1, 1);
	}
	
	while (frame_counter < 255)
	{
		WaitVsync(1);
    c550:	81 e0       	ldi	r24, 0x01	; 1
    c552:	90 e0       	ldi	r25, 0x00	; 0
    c554:	0e 94 45 4e 	call	0x9c8a	; 0x9c8a <WaitVsync>
		LBMapSprite(0, LBGetNextFrame(&game.player.run), 0);
    c558:	8c e1       	ldi	r24, 0x1C	; 28
    c55a:	9e e0       	ldi	r25, 0x0E	; 14
    c55c:	0e 94 0d 4f 	call	0x9e1a	; 0x9e1a <LBGetNextFrame>
    c560:	40 e0       	ldi	r20, 0x00	; 0
    c562:	bc 01       	movw	r22, r24
    c564:	80 e0       	ldi	r24, 0x00	; 0
    c566:	0e 94 73 50 	call	0xa0e6	; 0xa0e6 <LBMapSprite>
		LBMoveSprite(0, 104, 104, 4, 2);
    c56a:	02 e0       	ldi	r16, 0x02	; 2
    c56c:	24 e0       	ldi	r18, 0x04	; 4
    c56e:	48 e6       	ldi	r20, 0x68	; 104
    c570:	68 e6       	ldi	r22, 0x68	; 104
    c572:	80 e0       	ldi	r24, 0x00	; 0
    c574:	0e 94 c5 50 	call	0xa18a	; 0xa18a <LBMoveSprite>
		frame_counter++;
    c578:	d3 94       	inc	r13
		if (frame_counter % 16 == 0) Screen.scrollY += scroll;
    c57a:	8d 2d       	mov	r24, r13
    c57c:	8f 70       	andi	r24, 0x0F	; 15
    c57e:	29 f4       	brne	.+10     	; 0xc58a <planet_transition+0xc0>
    c580:	90 91 b3 0c 	lds	r25, 0x0CB3
    c584:	9e 0d       	add	r25, r14
    c586:	90 93 b3 0c 	sts	0x0CB3, r25
		animate_particles(dy, oy);
    c58a:	6f 2d       	mov	r22, r15
    c58c:	81 2f       	mov	r24, r17
    c58e:	0e 94 14 62 	call	0xc428	; 0xc428 <animate_particles>
		LBRotateSprites();
    c592:	0e 94 03 51 	call	0xa206	; 0xa206 <LBRotateSprites>
	{
		LBMapSprite(8, get_emarald_map(index), 0);
		LBMoveSprite(8, 112, 48, 1, 1);
	}
	
	while (frame_counter < 255)
    c596:	8f ef       	ldi	r24, 0xFF	; 255
    c598:	d8 12       	cpse	r13, r24
    c59a:	da cf       	rjmp	.-76     	; 0xc550 <planet_transition+0x86>
		frame_counter++;
		if (frame_counter % 16 == 0) Screen.scrollY += scroll;
		animate_particles(dy, oy);
		LBRotateSprites();
	}
	game.current_screen = LEVEL;
    c59c:	82 e0       	ldi	r24, 0x02	; 2
    c59e:	80 93 c5 0d 	sts	0x0DC5, r24
	ClearVram();
    c5a2:	0e 94 ac 3f 	call	0x7f58	; 0x7f58 <ClearVram>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    c5a6:	64 e1       	ldi	r22, 0x14	; 20
    c5a8:	80 e0       	ldi	r24, 0x00	; 0
    c5aa:	0e 94 21 60 	call	0xc042	; 0xc042 <clear_sprites>
	LBRotateSprites();
    c5ae:	0e 94 03 51 	call	0xa206	; 0xa206 <LBRotateSprites>
	fade_through();
    c5b2:	0e 94 43 60 	call	0xc086	; 0xc086 <fade_through>
	game.level_score = 0;
    c5b6:	10 92 b6 0d 	sts	0x0DB6, r1
    c5ba:	10 92 b5 0d 	sts	0x0DB5, r1
	load_level(index, true);
    c5be:	61 e0       	ldi	r22, 0x01	; 1
    c5c0:	8c 2d       	mov	r24, r12
    c5c2:	0e 94 53 60 	call	0xc0a6	; 0xc0a6 <load_level>
	init_player_state();
    c5c6:	0e 94 fa 53 	call	0xa7f4	; 0xa7f4 <init_player_state>
	init_boss_state();
    c5ca:	0e 94 50 53 	call	0xa6a0	; 0xa6a0 <init_boss_state>
	init_enemy_state();
}
    c5ce:	0f 90       	pop	r0
    c5d0:	df 91       	pop	r29
    c5d2:	cf 91       	pop	r28
    c5d4:	1f 91       	pop	r17
    c5d6:	0f 91       	pop	r16
    c5d8:	ff 90       	pop	r15
    c5da:	ef 90       	pop	r14
    c5dc:	df 90       	pop	r13
    c5de:	cf 90       	pop	r12
	fade_through();
	game.level_score = 0;
	load_level(index, true);
	init_player_state();
	init_boss_state();
	init_enemy_state();
    c5e0:	0c 94 51 51 	jmp	0xa2a2	; 0xa2a2 <init_enemy_state>

0000c5e4 <intro>:
}


void intro()
{
    c5e4:	0f 93       	push	r16
	fade_through();
    c5e6:	0e 94 43 60 	call	0xc086	; 0xc086 <fade_through>
	game.lives = LIVES;
    c5ea:	e1 eb       	ldi	r30, 0xB1	; 177
    c5ec:	fd e0       	ldi	r31, 0x0D	; 13
    c5ee:	85 e0       	ldi	r24, 0x05	; 5
    c5f0:	83 8b       	std	Z+19, r24	; 0x13
	game.score = 0;
    c5f2:	13 82       	std	Z+3, r1	; 0x03
    c5f4:	12 82       	std	Z+2, r1	; 0x02
	game.level_score = 0;
    c5f6:	15 82       	std	Z+5, r1	; 0x05
    c5f8:	14 82       	std	Z+4, r1	; 0x04
	game.time = 0;
    c5fa:	17 82       	std	Z+7, r1	; 0x07
    c5fc:	16 82       	std	Z+6, r1	; 0x06
	StartSong(planetsong);
    c5fe:	83 ef       	ldi	r24, 0xF3	; 243
    c600:	91 e1       	ldi	r25, 0x11	; 17
    c602:	0e 94 a0 42 	call	0x8540	; 0x8540 <StartSong>
	LBMapSprite(0, map_emerald_0, 0);
    c606:	40 e0       	ldi	r20, 0x00	; 0
    c608:	69 ec       	ldi	r22, 0xC9	; 201
    c60a:	76 e3       	ldi	r23, 0x36	; 54
    c60c:	80 e0       	ldi	r24, 0x00	; 0
    c60e:	0e 94 73 50 	call	0xa0e6	; 0xa0e6 <LBMapSprite>
	LBMoveSprite(0, 80, 48, 1, 1);
    c612:	01 e0       	ldi	r16, 0x01	; 1
    c614:	21 e0       	ldi	r18, 0x01	; 1
    c616:	40 e3       	ldi	r20, 0x30	; 48
    c618:	60 e5       	ldi	r22, 0x50	; 80
    c61a:	80 e0       	ldi	r24, 0x00	; 0
    c61c:	0e 94 c5 50 	call	0xa18a	; 0xa18a <LBMoveSprite>
	LBMapSprite(1, map_emerald_1, 0);
    c620:	40 e0       	ldi	r20, 0x00	; 0
    c622:	66 ec       	ldi	r22, 0xC6	; 198
    c624:	76 e3       	ldi	r23, 0x36	; 54
    c626:	81 e0       	ldi	r24, 0x01	; 1
    c628:	0e 94 73 50 	call	0xa0e6	; 0xa0e6 <LBMapSprite>
	LBMoveSprite(1, 96, 48, 1, 1);
    c62c:	21 e0       	ldi	r18, 0x01	; 1
    c62e:	40 e3       	ldi	r20, 0x30	; 48
    c630:	60 e6       	ldi	r22, 0x60	; 96
    c632:	81 e0       	ldi	r24, 0x01	; 1
    c634:	0e 94 c5 50 	call	0xa18a	; 0xa18a <LBMoveSprite>
	LBMapSprite(2, map_emerald_2, 0);
    c638:	40 e0       	ldi	r20, 0x00	; 0
    c63a:	63 ec       	ldi	r22, 0xC3	; 195
    c63c:	76 e3       	ldi	r23, 0x36	; 54
    c63e:	82 e0       	ldi	r24, 0x02	; 2
    c640:	0e 94 73 50 	call	0xa0e6	; 0xa0e6 <LBMapSprite>
	LBMoveSprite(2, 112, 48, 1, 1);
    c644:	21 e0       	ldi	r18, 0x01	; 1
    c646:	40 e3       	ldi	r20, 0x30	; 48
    c648:	60 e7       	ldi	r22, 0x70	; 112
    c64a:	82 e0       	ldi	r24, 0x02	; 2
    c64c:	0e 94 c5 50 	call	0xa18a	; 0xa18a <LBMoveSprite>
	LBMapSprite(3, map_emerald_3, 0);
    c650:	40 e0       	ldi	r20, 0x00	; 0
    c652:	60 ec       	ldi	r22, 0xC0	; 192
    c654:	76 e3       	ldi	r23, 0x36	; 54
    c656:	83 e0       	ldi	r24, 0x03	; 3
    c658:	0e 94 73 50 	call	0xa0e6	; 0xa0e6 <LBMapSprite>
	LBMoveSprite(3, 128, 48, 1, 1);
    c65c:	21 e0       	ldi	r18, 0x01	; 1
    c65e:	40 e3       	ldi	r20, 0x30	; 48
    c660:	60 e8       	ldi	r22, 0x80	; 128
    c662:	83 e0       	ldi	r24, 0x03	; 3
    c664:	0e 94 c5 50 	call	0xa18a	; 0xa18a <LBMoveSprite>
	LBMapSprite(4, map_emerald_4, 0);
    c668:	40 e0       	ldi	r20, 0x00	; 0
    c66a:	6d eb       	ldi	r22, 0xBD	; 189
    c66c:	76 e3       	ldi	r23, 0x36	; 54
    c66e:	84 e0       	ldi	r24, 0x04	; 4
    c670:	0e 94 73 50 	call	0xa0e6	; 0xa0e6 <LBMapSprite>
	LBMoveSprite(4, 144, 48, 1, 1);
    c674:	21 e0       	ldi	r18, 0x01	; 1
    c676:	40 e3       	ldi	r20, 0x30	; 48
    c678:	60 e9       	ldi	r22, 0x90	; 144
    c67a:	84 e0       	ldi	r24, 0x04	; 4
    c67c:	0e 94 c5 50 	call	0xa18a	; 0xa18a <LBMoveSprite>
	LBRotateSprites();
    c680:	0e 94 03 51 	call	0xa206	; 0xa206 <LBRotateSprites>
	stream_text_middle((const char*) strIntro, 12);
    c684:	6c e0       	ldi	r22, 0x0C	; 12
    c686:	83 ef       	ldi	r24, 0xF3	; 243
    c688:	99 e0       	ldi	r25, 0x09	; 9
    c68a:	0e 94 87 61 	call	0xc30e	; 0xc30e <stream_text_middle>
	LBWaitSeconds(1);
    c68e:	81 e0       	ldi	r24, 0x01	; 1
    c690:	0e 94 64 50 	call	0xa0c8	; 0xa0c8 <LBWaitSeconds>
	planet_transition(0, 1, 28, -3, 199);
    c694:	07 ec       	ldi	r16, 0xC7	; 199
    c696:	2d ef       	ldi	r18, 0xFD	; 253
    c698:	4c e1       	ldi	r20, 0x1C	; 28
    c69a:	61 e0       	ldi	r22, 0x01	; 1
    c69c:	80 e0       	ldi	r24, 0x00	; 0
    c69e:	0e 94 65 62 	call	0xc4ca	; 0xc4ca <planet_transition>
}
    c6a2:	0f 91       	pop	r16
    c6a4:	08 95       	ret

0000c6a6 <load_splash>:

void load_splash()
{
	fade_through();
    c6a6:	0e 94 43 60 	call	0xc086	; 0xc086 <fade_through>
	Screen.scrollX = 0;
    c6aa:	ef ea       	ldi	r30, 0xAF	; 175
    c6ac:	fc e0       	ldi	r31, 0x0C	; 12
    c6ae:	13 82       	std	Z+3, r1	; 0x03
	Screen.scrollY = 0;
    c6b0:	14 82       	std	Z+4, r1	; 0x04
	Screen.scrollHeight = 32;
    c6b2:	80 e2       	ldi	r24, 0x20	; 32
    c6b4:	85 83       	std	Z+5, r24	; 0x05
	Screen.overlayHeight = 0;
    c6b6:	10 82       	st	Z, r1
	game.current_screen = SPLASH;
    c6b8:	e1 eb       	ldi	r30, 0xB1	; 177
    c6ba:	fd e0       	ldi	r31, 0x0D	; 13
    c6bc:	14 8a       	std	Z+20, r1	; 0x14
	game.selection = START_SELECTED;
    c6be:	11 8e       	std	Z+25, r1	; 0x19
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    c6c0:	64 e1       	ldi	r22, 0x14	; 20
    c6c2:	80 e0       	ldi	r24, 0x00	; 0
    c6c4:	0e 94 21 60 	call	0xc042	; 0xc042 <clear_sprites>
	LBRotateSprites();
    c6c8:	0e 94 03 51 	call	0xa206	; 0xa206 <LBRotateSprites>
	LBPrint(8, 15, (char*) str1Player);
    c6cc:	40 e2       	ldi	r20, 0x20	; 32
    c6ce:	5b e0       	ldi	r21, 0x0B	; 11
    c6d0:	6f e0       	ldi	r22, 0x0F	; 15
    c6d2:	88 e0       	ldi	r24, 0x08	; 8
    c6d4:	0e 94 9e 4f 	call	0x9f3c	; 0x9f3c <LBPrint>
	LBPrint(8, 16, (char*) strHighScores);
    c6d8:	44 e1       	ldi	r20, 0x14	; 20
    c6da:	5b e0       	ldi	r21, 0x0B	; 11
    c6dc:	60 e1       	ldi	r22, 0x10	; 16
    c6de:	88 e0       	ldi	r24, 0x08	; 8
    c6e0:	0e 94 9e 4f 	call	0x9f3c	; 0x9f3c <LBPrint>
	LBPrint(4, 21, (char*) strCopyright);
    c6e4:	4e e3       	ldi	r20, 0x3E	; 62
    c6e6:	5b e0       	ldi	r21, 0x0B	; 11
    c6e8:	65 e1       	ldi	r22, 0x15	; 21
    c6ea:	84 e0       	ldi	r24, 0x04	; 4
    c6ec:	0e 94 9e 4f 	call	0x9f3c	; 0x9f3c <LBPrint>
	LBPrint(3, 26, (char*) strMusic);
    c6f0:	46 e2       	ldi	r20, 0x26	; 38
    c6f2:	5b e0       	ldi	r21, 0x0B	; 11
    c6f4:	6a e1       	ldi	r22, 0x1A	; 26
    c6f6:	83 e0       	ldi	r24, 0x03	; 3
    c6f8:	0e 94 9e 4f 	call	0x9f3c	; 0x9f3c <LBPrint>
	DrawMap2(6, 5, map_splash);
    c6fc:	40 ef       	ldi	r20, 0xF0	; 240
    c6fe:	5f e5       	ldi	r21, 0x5F	; 95
    c700:	65 e0       	ldi	r22, 0x05	; 5
    c702:	86 e0       	ldi	r24, 0x06	; 6
    c704:	0e 94 dc 4d 	call	0x9bb8	; 0x9bb8 <DrawMap>
	LBMapSprite(0, map_right_arrow, 0);
    c708:	40 e0       	ldi	r20, 0x00	; 0
    c70a:	6e ed       	ldi	r22, 0xDE	; 222
    c70c:	76 e3       	ldi	r23, 0x36	; 54
    c70e:	80 e0       	ldi	r24, 0x00	; 0
    c710:	0c 94 73 50 	jmp	0xa0e6	; 0xa0e6 <LBMapSprite>

0000c714 <load_high_scores>:
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
	}
}

void load_high_scores()
{
    c714:	2f 92       	push	r2
    c716:	3f 92       	push	r3
    c718:	5f 92       	push	r5
    c71a:	6f 92       	push	r6
    c71c:	7f 92       	push	r7
    c71e:	8f 92       	push	r8
    c720:	9f 92       	push	r9
    c722:	af 92       	push	r10
    c724:	bf 92       	push	r11
    c726:	cf 92       	push	r12
    c728:	df 92       	push	r13
    c72a:	ef 92       	push	r14
    c72c:	ff 92       	push	r15
    c72e:	0f 93       	push	r16
    c730:	1f 93       	push	r17
    c732:	cf 93       	push	r28
    c734:	df 93       	push	r29
	u16 score = 0;
	u8 ypos = 7;
	
	game.current_screen = HIGH_SCORES;
    c736:	81 e0       	ldi	r24, 0x01	; 1
    c738:	80 93 c5 0d 	sts	0x0DC5, r24
	game.high_score_index = -1;
    c73c:	8f ef       	ldi	r24, 0xFF	; 255
    c73e:	80 93 c3 0d 	sts	0x0DC3, r24
	fade_through();
    c742:	0e 94 43 60 	call	0xc086	; 0xc086 <fade_through>
	Screen.scrollX = 0;
    c746:	10 92 b2 0c 	sts	0x0CB2, r1
	Screen.scrollY = 0;
    c74a:	10 92 b3 0c 	sts	0x0CB3, r1
	Screen.scrollHeight = 32;
    c74e:	80 e2       	ldi	r24, 0x20	; 32
    c750:	80 93 b4 0c 	sts	0x0CB4, r24
	Screen.overlayHeight = 0;
    c754:	10 92 af 0c 	sts	0x0CAF, r1
	load_eeprom(&scores);
    c758:	81 e9       	ldi	r24, 0x91	; 145
    c75a:	9d e0       	ldi	r25, 0x0D	; 13
    c75c:	0e 94 c5 55 	call	0xab8a	; 0xab8a <load_eeprom>
	
	LBPrint(9, 3, (char*) strHighScores);
    c760:	44 e1       	ldi	r20, 0x14	; 20
    c762:	5b e0       	ldi	r21, 0x0B	; 11
    c764:	63 e0       	ldi	r22, 0x03	; 3
    c766:	89 e0       	ldi	r24, 0x09	; 9
    c768:	0e 94 9e 4f 	call	0x9f3c	; 0x9f3c <LBPrint>
	
	LBMapSprite(0, map_emerald_0, 0);
    c76c:	40 e0       	ldi	r20, 0x00	; 0
    c76e:	69 ec       	ldi	r22, 0xC9	; 201
    c770:	76 e3       	ldi	r23, 0x36	; 54
    c772:	80 e0       	ldi	r24, 0x00	; 0
    c774:	0e 94 73 50 	call	0xa0e6	; 0xa0e6 <LBMapSprite>
	LBMapSprite(1, map_emerald_1, 0);
    c778:	40 e0       	ldi	r20, 0x00	; 0
    c77a:	66 ec       	ldi	r22, 0xC6	; 198
    c77c:	76 e3       	ldi	r23, 0x36	; 54
    c77e:	81 e0       	ldi	r24, 0x01	; 1
    c780:	0e 94 73 50 	call	0xa0e6	; 0xa0e6 <LBMapSprite>
	LBMoveSprite(0, 7*8, 3*8, 1, 1);
    c784:	01 e0       	ldi	r16, 0x01	; 1
    c786:	21 e0       	ldi	r18, 0x01	; 1
    c788:	48 e1       	ldi	r20, 0x18	; 24
    c78a:	68 e3       	ldi	r22, 0x38	; 56
    c78c:	80 e0       	ldi	r24, 0x00	; 0
    c78e:	0e 94 c5 50 	call	0xa18a	; 0xa18a <LBMoveSprite>
	LBMoveSprite(1, 21*8, 3*8, 1, 1);
    c792:	21 e0       	ldi	r18, 0x01	; 1
    c794:	48 e1       	ldi	r20, 0x18	; 24
    c796:	68 ea       	ldi	r22, 0xA8	; 168
    c798:	81 e0       	ldi	r24, 0x01	; 1
    c79a:	0e 94 c5 50 	call	0xa18a	; 0xa18a <LBMoveSprite>
    c79e:	83 e9       	ldi	r24, 0x93	; 147
    c7a0:	a8 2e       	mov	r10, r24
    c7a2:	8d e0       	ldi	r24, 0x0D	; 13
    c7a4:	b8 2e       	mov	r11, r24
    c7a6:	94 e9       	ldi	r25, 0x94	; 148
    c7a8:	c9 2e       	mov	r12, r25
    c7aa:	9d e0       	ldi	r25, 0x0D	; 13
    c7ac:	d9 2e       	mov	r13, r25
    c7ae:	25 e9       	ldi	r18, 0x95	; 149
    c7b0:	82 2e       	mov	r8, r18
    c7b2:	2d e0       	ldi	r18, 0x0D	; 13
    c7b4:	92 2e       	mov	r9, r18
    c7b6:	74 01       	movw	r14, r8
    c7b8:	d0 e3       	ldi	r29, 0x30	; 48
}

void load_high_scores()
{
	u16 score = 0;
	u8 ypos = 7;
    c7ba:	c7 e0       	ldi	r28, 0x07	; 7
	LBMoveSprite(0, 7*8, 3*8, 1, 1);
	LBMoveSprite(1, 21*8, 3*8, 1, 1);
	
	for (u8 i = 0; i < 30; i += 5)
	{
		LBPrintByte(9, ypos, i/5+1, false);
    c7bc:	35 e0       	ldi	r19, 0x05	; 5
    c7be:	53 2e       	mov	r5, r19
    c7c0:	4c ea       	ldi	r20, 0xAC	; 172
    c7c2:	64 2e       	mov	r6, r20
    c7c4:	4d e0       	ldi	r20, 0x0D	; 13
    c7c6:	74 2e       	mov	r7, r20
			// Shift scores down
			for (u8 j = 25; j > i; j -= 5)
			{
				memcpy(&(scores.data[j]), &(scores.data[j-5]), 5);
			}
			scores.data[i] = 'A';
    c7c8:	11 e4       	ldi	r17, 0x41	; 65
    c7ca:	0e 2d       	mov	r16, r14
    c7cc:	08 19       	sub	r16, r8
	LBMoveSprite(0, 7*8, 3*8, 1, 1);
	LBMoveSprite(1, 21*8, 3*8, 1, 1);
	
	for (u8 i = 0; i < 30; i += 5)
	{
		LBPrintByte(9, ypos, i/5+1, false);
    c7ce:	80 2f       	mov	r24, r16
    c7d0:	65 2d       	mov	r22, r5
    c7d2:	0e 94 b2 6b 	call	0xd764	; 0xd764 <__udivmodqi4>
    c7d6:	41 e0       	ldi	r20, 0x01	; 1
    c7d8:	48 0f       	add	r20, r24
    c7da:	20 e0       	ldi	r18, 0x00	; 0
    c7dc:	6c 2f       	mov	r22, r28
    c7de:	89 e0       	ldi	r24, 0x09	; 9
    c7e0:	0e 94 ba 4f 	call	0x9f74	; 0x9f74 <LBPrintByte>
		LBPrintChar(10, ypos, ' ');
    c7e4:	40 e2       	ldi	r20, 0x20	; 32
    c7e6:	6c 2f       	mov	r22, r28
    c7e8:	8a e0       	ldi	r24, 0x0A	; 10
    c7ea:	0e 94 7e 4f 	call	0x9efc	; 0x9efc <LBPrintChar>
		LBPrintChar(11, ypos, scores.data[i]);
    c7ee:	f5 01       	movw	r30, r10
    c7f0:	40 81       	ld	r20, Z
    c7f2:	6c 2f       	mov	r22, r28
    c7f4:	8b e0       	ldi	r24, 0x0B	; 11
    c7f6:	0e 94 7e 4f 	call	0x9efc	; 0x9efc <LBPrintChar>
		LBPrintChar(12, ypos, scores.data[i+1]);
    c7fa:	f6 01       	movw	r30, r12
    c7fc:	40 81       	ld	r20, Z
    c7fe:	6c 2f       	mov	r22, r28
    c800:	8c e0       	ldi	r24, 0x0C	; 12
    c802:	0e 94 7e 4f 	call	0x9efc	; 0x9efc <LBPrintChar>
		LBPrintChar(13, ypos, scores.data[i+2]);
    c806:	f7 01       	movw	r30, r14
    c808:	40 81       	ld	r20, Z
    c80a:	6c 2f       	mov	r22, r28
    c80c:	8d e0       	ldi	r24, 0x0D	; 13
    c80e:	0e 94 7e 4f 	call	0x9efc	; 0x9efc <LBPrintChar>
		LBPrintChar(14, ypos, ' ');
    c812:	40 e2       	ldi	r20, 0x20	; 32
    c814:	6c 2f       	mov	r22, r28
    c816:	8e e0       	ldi	r24, 0x0E	; 14
    c818:	0e 94 7e 4f 	call	0x9efc	; 0x9efc <LBPrintChar>
		memcpy(&score, &(scores.data[i+3]), 2);
    c81c:	f7 01       	movw	r30, r14
    c81e:	21 80       	ldd	r2, Z+1	; 0x01
    c820:	32 80       	ldd	r3, Z+2	; 0x02
		LBPrintInt(19, ypos, score, true);
    c822:	21 e0       	ldi	r18, 0x01	; 1
    c824:	a1 01       	movw	r20, r2
    c826:	6c 2f       	mov	r22, r28
    c828:	83 e1       	ldi	r24, 0x13	; 19
    c82a:	0e 94 eb 4f 	call	0x9fd6	; 0x9fd6 <LBPrintInt>
		
		if (game.score > score && game.high_score_index == -1)
    c82e:	20 91 b3 0d 	lds	r18, 0x0DB3
    c832:	30 91 b4 0d 	lds	r19, 0x0DB4
    c836:	22 16       	cp	r2, r18
    c838:	33 06       	cpc	r3, r19
    c83a:	08 f0       	brcs	.+2      	; 0xc83e <load_high_scores+0x12a>
    c83c:	55 c0       	rjmp	.+170    	; 0xc8e8 <load_high_scores+0x1d4>
    c83e:	80 91 c3 0d 	lds	r24, 0x0DC3
    c842:	8f 3f       	cpi	r24, 0xFF	; 255
    c844:	09 f0       	breq	.+2      	; 0xc848 <load_high_scores+0x134>
    c846:	50 c0       	rjmp	.+160    	; 0xc8e8 <load_high_scores+0x1d4>
    c848:	ac ea       	ldi	r26, 0xAC	; 172
    c84a:	bd e0       	ldi	r27, 0x0D	; 13
    c84c:	cd 01       	movw	r24, r26
    c84e:	05 97       	sbiw	r24, 0x05	; 5
    c850:	4e e1       	ldi	r20, 0x1E	; 30
    c852:	48 0f       	add	r20, r24
    c854:	46 19       	sub	r20, r6
		{
			// Shift scores down
			for (u8 j = 25; j > i; j -= 5)
    c856:	04 17       	cp	r16, r20
    c858:	40 f4       	brcc	.+16     	; 0xc86a <load_high_scores+0x156>
			{
				memcpy(&(scores.data[j]), &(scores.data[j-5]), 5);
    c85a:	fc 01       	movw	r30, r24
    c85c:	45 2d       	mov	r20, r5
    c85e:	01 90       	ld	r0, Z+
    c860:	0d 92       	st	X+, r0
    c862:	4a 95       	dec	r20
    c864:	e1 f7       	brne	.-8      	; 0xc85e <load_high_scores+0x14a>
    c866:	dc 01       	movw	r26, r24
    c868:	f1 cf       	rjmp	.-30     	; 0xc84c <load_high_scores+0x138>
			}
			scores.data[i] = 'A';
    c86a:	f5 01       	movw	r30, r10
    c86c:	10 83       	st	Z, r17
			scores.data[i+1] = 'A';
    c86e:	f6 01       	movw	r30, r12
    c870:	10 83       	st	Z, r17
			scores.data[i+2] = 'A';
    c872:	f7 01       	movw	r30, r14
    c874:	10 83       	st	Z, r17
			memcpy(&(scores.data[i+3]), &game.score, 2);
    c876:	32 83       	std	Z+2, r19	; 0x02
    c878:	21 83       	std	Z+1, r18	; 0x01
			LBPrintChar(11, ypos, scores.data[i]);
    c87a:	f5 01       	movw	r30, r10
    c87c:	40 81       	ld	r20, Z
    c87e:	6c 2f       	mov	r22, r28
    c880:	8b e0       	ldi	r24, 0x0B	; 11
    c882:	0e 94 7e 4f 	call	0x9efc	; 0x9efc <LBPrintChar>
			LBPrintChar(12, ypos, scores.data[i+1]);
    c886:	f6 01       	movw	r30, r12
    c888:	40 81       	ld	r20, Z
    c88a:	6c 2f       	mov	r22, r28
    c88c:	8c e0       	ldi	r24, 0x0C	; 12
    c88e:	0e 94 7e 4f 	call	0x9efc	; 0x9efc <LBPrintChar>
			LBPrintChar(13, ypos, scores.data[i+2]);
    c892:	f7 01       	movw	r30, r14
    c894:	40 81       	ld	r20, Z
    c896:	6c 2f       	mov	r22, r28
    c898:	8d e0       	ldi	r24, 0x0D	; 13
    c89a:	0e 94 7e 4f 	call	0x9efc	; 0x9efc <LBPrintChar>
			LBPrintInt(19, ypos, game.score, true);
    c89e:	40 91 b3 0d 	lds	r20, 0x0DB3
    c8a2:	50 91 b4 0d 	lds	r21, 0x0DB4
    c8a6:	21 e0       	ldi	r18, 0x01	; 1
    c8a8:	6c 2f       	mov	r22, r28
    c8aa:	83 e1       	ldi	r24, 0x13	; 19
    c8ac:	0e 94 eb 4f 	call	0x9fd6	; 0x9fd6 <LBPrintInt>
			game.high_score_index = i;
    c8b0:	00 93 c3 0d 	sts	0x0DC3, r16
			LBMapSprite(2, map_down_arrow, 0);
    c8b4:	40 e0       	ldi	r20, 0x00	; 0
    c8b6:	6b ed       	ldi	r22, 0xDB	; 219
    c8b8:	76 e3       	ldi	r23, 0x36	; 54
    c8ba:	82 e0       	ldi	r24, 0x02	; 2
    c8bc:	0e 94 73 50 	call	0xa0e6	; 0xa0e6 <LBMapSprite>
			LBMapSprite(3, map_up_arrow, 0);
    c8c0:	40 e0       	ldi	r20, 0x00	; 0
    c8c2:	68 ed       	ldi	r22, 0xD8	; 216
    c8c4:	76 e3       	ldi	r23, 0x36	; 54
    c8c6:	83 e0       	ldi	r24, 0x03	; 3
    c8c8:	0e 94 73 50 	call	0xa0e6	; 0xa0e6 <LBMapSprite>
			LBMoveSprite(2, 11*8, (ypos-1)*8, 1, 1);
    c8cc:	01 e0       	ldi	r16, 0x01	; 1
    c8ce:	21 e0       	ldi	r18, 0x01	; 1
    c8d0:	4d 2f       	mov	r20, r29
    c8d2:	68 e5       	ldi	r22, 0x58	; 88
    c8d4:	82 e0       	ldi	r24, 0x02	; 2
    c8d6:	0e 94 c5 50 	call	0xa18a	; 0xa18a <LBMoveSprite>
			LBMoveSprite(3, 11*8, (ypos+1)*8, 1, 1);
    c8da:	21 e0       	ldi	r18, 0x01	; 1
    c8dc:	40 e1       	ldi	r20, 0x10	; 16
    c8de:	4d 0f       	add	r20, r29
    c8e0:	68 e5       	ldi	r22, 0x58	; 88
    c8e2:	83 e0       	ldi	r24, 0x03	; 3
    c8e4:	0e 94 c5 50 	call	0xa18a	; 0xa18a <LBMoveSprite>
		}
		
		ypos += 2;
    c8e8:	ce 5f       	subi	r28, 0xFE	; 254
    c8ea:	f5 e0       	ldi	r31, 0x05	; 5
    c8ec:	af 0e       	add	r10, r31
    c8ee:	b1 1c       	adc	r11, r1
    c8f0:	85 e0       	ldi	r24, 0x05	; 5
    c8f2:	c8 0e       	add	r12, r24
    c8f4:	d1 1c       	adc	r13, r1
    c8f6:	e5 e0       	ldi	r30, 0x05	; 5
    c8f8:	ee 0e       	add	r14, r30
    c8fa:	f1 1c       	adc	r15, r1
    c8fc:	d0 5f       	subi	r29, 0xF0	; 240
	LBMapSprite(0, map_emerald_0, 0);
	LBMapSprite(1, map_emerald_1, 0);
	LBMoveSprite(0, 7*8, 3*8, 1, 1);
	LBMoveSprite(1, 21*8, 3*8, 1, 1);
	
	for (u8 i = 0; i < 30; i += 5)
    c8fe:	c3 31       	cpi	r28, 0x13	; 19
    c900:	09 f0       	breq	.+2      	; 0xc904 <load_high_scores+0x1f0>
    c902:	63 cf       	rjmp	.-314    	; 0xc7ca <load_high_scores+0xb6>
		}
		
		ypos += 2;
	}
	
	LBPrint(9, 22, (char*) strMainMenu);
    c904:	4b ee       	ldi	r20, 0xEB	; 235
    c906:	5a e0       	ldi	r21, 0x0A	; 10
    c908:	66 e1       	ldi	r22, 0x16	; 22
    c90a:	89 e0       	ldi	r24, 0x09	; 9
}
    c90c:	df 91       	pop	r29
    c90e:	cf 91       	pop	r28
    c910:	1f 91       	pop	r17
    c912:	0f 91       	pop	r16
    c914:	ff 90       	pop	r15
    c916:	ef 90       	pop	r14
    c918:	df 90       	pop	r13
    c91a:	cf 90       	pop	r12
    c91c:	bf 90       	pop	r11
    c91e:	af 90       	pop	r10
    c920:	9f 90       	pop	r9
    c922:	8f 90       	pop	r8
    c924:	7f 90       	pop	r7
    c926:	6f 90       	pop	r6
    c928:	5f 90       	pop	r5
    c92a:	3f 90       	pop	r3
    c92c:	2f 90       	pop	r2
		}
		
		ypos += 2;
	}
	
	LBPrint(9, 22, (char*) strMainMenu);
    c92e:	0c 94 9e 4f 	jmp	0x9f3c	; 0x9f3c <LBPrint>

0000c932 <exit_game>:
	}
}

void exit_game()
{
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    c932:	64 e1       	ldi	r22, 0x14	; 20
    c934:	80 e0       	ldi	r24, 0x00	; 0
    c936:	0e 94 21 60 	call	0xc042	; 0xc042 <clear_sprites>
	LBRotateSprites();
    c93a:	0e 94 03 51 	call	0xa206	; 0xa206 <LBRotateSprites>
	init_player_state();
    c93e:	0e 94 fa 53 	call	0xa7f4	; 0xa7f4 <init_player_state>
	init_boss_state();
    c942:	0e 94 50 53 	call	0xa6a0	; 0xa6a0 <init_boss_state>
	init_enemy_state();
    c946:	0e 94 51 51 	call	0xa2a2	; 0xa2a2 <init_enemy_state>
	StopSong();
    c94a:	0e 94 c9 42 	call	0x8592	; 0x8592 <StopSong>
	load_high_scores();
    c94e:	0c 94 8a 63 	jmp	0xc714	; 0xc714 <load_high_scores>

0000c952 <update_splash>:
	DrawMap2(6, 5, map_splash);
	LBMapSprite(0, map_right_arrow, 0);
}

void update_splash()
{
    c952:	0f 93       	push	r16
    c954:	cf 93       	push	r28
	if (game.player.controls.pressed & BTN_DOWN && game.selection == START_SELECTED)
    c956:	80 91 3c 0e 	lds	r24, 0x0E3C
    c95a:	c0 91 ca 0d 	lds	r28, 0x0DCA
    c95e:	85 ff       	sbrs	r24, 5
    c960:	06 c0       	rjmp	.+12     	; 0xc96e <update_splash+0x1c>
    c962:	c1 11       	cpse	r28, r1
    c964:	04 c0       	rjmp	.+8      	; 0xc96e <update_splash+0x1c>
	{
		game.selection = HIGH_SCORES_SELECTED;
    c966:	81 e0       	ldi	r24, 0x01	; 1
    c968:	80 93 ca 0d 	sts	0x0DCA, r24
    c96c:	06 c0       	rjmp	.+12     	; 0xc97a <update_splash+0x28>
		SFX_NAVIGATE;
	}
	else if (game.player.controls.pressed & BTN_UP && game.selection == HIGH_SCORES_SELECTED)
    c96e:	84 ff       	sbrs	r24, 4
    c970:	0a c0       	rjmp	.+20     	; 0xc986 <update_splash+0x34>
    c972:	c1 30       	cpi	r28, 0x01	; 1
    c974:	41 f4       	brne	.+16     	; 0xc986 <update_splash+0x34>
	{
		game.selection = START_SELECTED;
    c976:	10 92 ca 0d 	sts	0x0DCA, r1
		SFX_NAVIGATE;
    c97a:	41 e0       	ldi	r20, 0x01	; 1
    c97c:	6f ef       	ldi	r22, 0xFF	; 255
    c97e:	82 e0       	ldi	r24, 0x02	; 2
    c980:	0e 94 8b 43 	call	0x8716	; 0x8716 <TriggerFx>
    c984:	1c c0       	rjmp	.+56     	; 0xc9be <update_splash+0x6c>
	}
	else if (select_pressed(&game.player.controls) && game.selection == START_SELECTED)
    c986:	8c e3       	ldi	r24, 0x3C	; 60
    c988:	9e e0       	ldi	r25, 0x0E	; 14
    c98a:	0e 94 7d 61 	call	0xc2fa	; 0xc2fa <select_pressed>
    c98e:	88 23       	and	r24, r24
    c990:	b1 f0       	breq	.+44     	; 0xc9be <update_splash+0x6c>
    c992:	c1 11       	cpse	r28, r1
    c994:	09 c0       	rjmp	.+18     	; 0xc9a8 <update_splash+0x56>
	{
		SFX_NAVIGATE;
    c996:	41 e0       	ldi	r20, 0x01	; 1
    c998:	6f ef       	ldi	r22, 0xFF	; 255
    c99a:	82 e0       	ldi	r24, 0x02	; 2
    c99c:	0e 94 8b 43 	call	0x8716	; 0x8716 <TriggerFx>
	}
	else
	{
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
	}
}
    c9a0:	cf 91       	pop	r28
    c9a2:	0f 91       	pop	r16
		SFX_NAVIGATE;
	}
	else if (select_pressed(&game.player.controls) && game.selection == START_SELECTED)
	{
		SFX_NAVIGATE;
		intro();
    c9a4:	0c 94 f2 62 	jmp	0xc5e4	; 0xc5e4 <intro>
		return;
	}
	else if (select_pressed(&game.player.controls) && game.selection == HIGH_SCORES_SELECTED)
    c9a8:	c1 30       	cpi	r28, 0x01	; 1
    c9aa:	49 f4       	brne	.+18     	; 0xc9be <update_splash+0x6c>
	{
		SFX_NAVIGATE;
    c9ac:	41 e0       	ldi	r20, 0x01	; 1
    c9ae:	6f ef       	ldi	r22, 0xFF	; 255
    c9b0:	82 e0       	ldi	r24, 0x02	; 2
    c9b2:	0e 94 8b 43 	call	0x8716	; 0x8716 <TriggerFx>
	}
	else
	{
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
	}
}
    c9b6:	cf 91       	pop	r28
    c9b8:	0f 91       	pop	r16
		return;
	}
	else if (select_pressed(&game.player.controls) && game.selection == HIGH_SCORES_SELECTED)
	{
		SFX_NAVIGATE;
		load_high_scores();
    c9ba:	0c 94 8a 63 	jmp	0xc714	; 0xc714 <load_high_scores>
		return;
	}
	
	if (game.selection == START_SELECTED)
    c9be:	80 91 ca 0d 	lds	r24, 0x0DCA
	{
		LBMoveSprite(0, 7*8, 15*8, 1, 1);
    c9c2:	01 e0       	ldi	r16, 0x01	; 1
    c9c4:	21 e0       	ldi	r18, 0x01	; 1
		SFX_NAVIGATE;
		load_high_scores();
		return;
	}
	
	if (game.selection == START_SELECTED)
    c9c6:	81 11       	cpse	r24, r1
    c9c8:	03 c0       	rjmp	.+6      	; 0xc9d0 <update_splash+0x7e>
	{
		LBMoveSprite(0, 7*8, 15*8, 1, 1);
    c9ca:	48 e7       	ldi	r20, 0x78	; 120
    c9cc:	68 e3       	ldi	r22, 0x38	; 56
    c9ce:	03 c0       	rjmp	.+6      	; 0xc9d6 <update_splash+0x84>
	}
	else
	{
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
    c9d0:	40 e8       	ldi	r20, 0x80	; 128
    c9d2:	68 e3       	ldi	r22, 0x38	; 56
    c9d4:	80 e0       	ldi	r24, 0x00	; 0
    c9d6:	0e 94 c5 50 	call	0xa18a	; 0xa18a <LBMoveSprite>
	}
}
    c9da:	cf 91       	pop	r28
    c9dc:	0f 91       	pop	r16
    c9de:	08 95       	ret

0000c9e0 <update_high_scores>:
	
	LBPrint(9, 22, (char*) strMainMenu);
}

void update_high_scores()
{
    c9e0:	0f 93       	push	r16
	if (game.player.controls.pressed & BTN_X)
    c9e2:	80 91 3c 0e 	lds	r24, 0x0E3C
    c9e6:	90 91 3d 0e 	lds	r25, 0x0E3D
    c9ea:	91 ff       	sbrs	r25, 1
    c9ec:	12 c0       	rjmp	.+36     	; 0xca12 <update_high_scores+0x32>
	{
		SFX_NAVIGATE;
    c9ee:	41 e0       	ldi	r20, 0x01	; 1
    c9f0:	6f ef       	ldi	r22, 0xFF	; 255
    c9f2:	82 e0       	ldi	r24, 0x02	; 2
    c9f4:	0e 94 8b 43 	call	0x8716	; 0x8716 <TriggerFx>
		game.high_score_index = -1;
    c9f8:	8f ef       	ldi	r24, 0xFF	; 255
    c9fa:	80 93 c3 0d 	sts	0x0DC3, r24
		game.score = 0;
    c9fe:	10 92 b4 0d 	sts	0x0DB4, r1
    ca02:	10 92 b3 0d 	sts	0x0DB3, r1
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    ca06:	81 e9       	ldi	r24, 0x91	; 145
    ca08:	9d e0       	ldi	r25, 0x0D	; 13
    ca0a:	0e 94 27 41 	call	0x824e	; 0x824e <EepromWriteBlock>
	{
		SFX_NAVIGATE;
		game.high_score_index = -1;
		game.score = 0;
		save_eeprom(&scores);
		load_splash();
    ca0e:	0e 94 53 63 	call	0xc6a6	; 0xc6a6 <load_splash>
	}
	
	if (game.high_score_index != -1)
    ca12:	30 91 c3 0d 	lds	r19, 0x0DC3
    ca16:	3f 3f       	cpi	r19, 0xFF	; 255
    ca18:	09 f4       	brne	.+2      	; 0xca1c <update_high_scores+0x3c>
    ca1a:	7e c0       	rjmp	.+252    	; 0xcb18 <update_high_scores+0x138>
	{
		if (game.player.controls.pressed & BTN_RIGHT && game.high_score_index % 5 != 2)
    ca1c:	20 91 3c 0e 	lds	r18, 0x0E3C
    ca20:	27 ff       	sbrs	r18, 7
    ca22:	1e c0       	rjmp	.+60     	; 0xca60 <update_high_scores+0x80>
    ca24:	83 2f       	mov	r24, r19
    ca26:	65 e0       	ldi	r22, 0x05	; 5
    ca28:	0e 94 be 6b 	call	0xd77c	; 0xd77c <__divmodqi4>
    ca2c:	92 30       	cpi	r25, 0x02	; 2
    ca2e:	c1 f0       	breq	.+48     	; 0xca60 <update_high_scores+0x80>
		{
			SFX_NAVIGATE;
    ca30:	41 e0       	ldi	r20, 0x01	; 1
    ca32:	6f ef       	ldi	r22, 0xFF	; 255
    ca34:	82 e0       	ldi	r24, 0x02	; 2
    ca36:	0e 94 8b 43 	call	0x8716	; 0x8716 <TriggerFx>
			game.high_score_index++;
    ca3a:	80 91 c3 0d 	lds	r24, 0x0DC3
    ca3e:	8f 5f       	subi	r24, 0xFF	; 255
    ca40:	80 93 c3 0d 	sts	0x0DC3, r24
			LBMoveSprite(2, extendedSprites[2].x+8, extendedSprites[2].y, 1, 1);
    ca44:	60 91 c8 0f 	lds	r22, 0x0FC8
    ca48:	68 5f       	subi	r22, 0xF8	; 248
    ca4a:	01 e0       	ldi	r16, 0x01	; 1
    ca4c:	21 e0       	ldi	r18, 0x01	; 1
    ca4e:	40 91 c9 0f 	lds	r20, 0x0FC9
    ca52:	82 e0       	ldi	r24, 0x02	; 2
    ca54:	0e 94 c5 50 	call	0xa18a	; 0xa18a <LBMoveSprite>
			LBMoveSprite(3, extendedSprites[3].x+8, extendedSprites[3].y, 1, 1);
    ca58:	60 91 cc 0f 	lds	r22, 0x0FCC
    ca5c:	68 5f       	subi	r22, 0xF8	; 248
    ca5e:	1f c0       	rjmp	.+62     	; 0xca9e <update_high_scores+0xbe>
		}
		else if (game.player.controls.pressed & BTN_LEFT && game.high_score_index % 5 != 0)
    ca60:	26 ff       	sbrs	r18, 6
    ca62:	24 c0       	rjmp	.+72     	; 0xcaac <update_high_scores+0xcc>
    ca64:	83 2f       	mov	r24, r19
    ca66:	65 e0       	ldi	r22, 0x05	; 5
    ca68:	0e 94 be 6b 	call	0xd77c	; 0xd77c <__divmodqi4>
    ca6c:	99 23       	and	r25, r25
    ca6e:	f1 f0       	breq	.+60     	; 0xcaac <update_high_scores+0xcc>
		{
			SFX_NAVIGATE;
    ca70:	41 e0       	ldi	r20, 0x01	; 1
    ca72:	6f ef       	ldi	r22, 0xFF	; 255
    ca74:	82 e0       	ldi	r24, 0x02	; 2
    ca76:	0e 94 8b 43 	call	0x8716	; 0x8716 <TriggerFx>
			game.high_score_index--;
    ca7a:	80 91 c3 0d 	lds	r24, 0x0DC3
    ca7e:	81 50       	subi	r24, 0x01	; 1
    ca80:	80 93 c3 0d 	sts	0x0DC3, r24
			LBMoveSprite(2, extendedSprites[2].x-8, extendedSprites[2].y, 1, 1);
    ca84:	60 91 c8 0f 	lds	r22, 0x0FC8
    ca88:	68 50       	subi	r22, 0x08	; 8
    ca8a:	01 e0       	ldi	r16, 0x01	; 1
    ca8c:	21 e0       	ldi	r18, 0x01	; 1
    ca8e:	40 91 c9 0f 	lds	r20, 0x0FC9
    ca92:	82 e0       	ldi	r24, 0x02	; 2
    ca94:	0e 94 c5 50 	call	0xa18a	; 0xa18a <LBMoveSprite>
			LBMoveSprite(3, extendedSprites[3].x-8, extendedSprites[3].y, 1, 1);
    ca98:	60 91 cc 0f 	lds	r22, 0x0FCC
    ca9c:	68 50       	subi	r22, 0x08	; 8
    ca9e:	21 e0       	ldi	r18, 0x01	; 1
    caa0:	40 91 cd 0f 	lds	r20, 0x0FCD
    caa4:	83 e0       	ldi	r24, 0x03	; 3
    caa6:	0e 94 c5 50 	call	0xa18a	; 0xa18a <LBMoveSprite>
    caaa:	36 c0       	rjmp	.+108    	; 0xcb18 <update_high_scores+0x138>
		}
		else if (game.player.controls.pressed & BTN_UP)
    caac:	24 ff       	sbrs	r18, 4
    caae:	13 c0       	rjmp	.+38     	; 0xcad6 <update_high_scores+0xf6>
		{
			SFX_NAVIGATE;
    cab0:	41 e0       	ldi	r20, 0x01	; 1
    cab2:	6f ef       	ldi	r22, 0xFF	; 255
    cab4:	82 e0       	ldi	r24, 0x02	; 2
    cab6:	0e 94 8b 43 	call	0x8716	; 0x8716 <TriggerFx>
			scores.data[game.high_score_index] = scores.data[game.high_score_index]-1;
    caba:	80 91 c3 0d 	lds	r24, 0x0DC3
    cabe:	e8 2f       	mov	r30, r24
    cac0:	ff 27       	eor	r31, r31
    cac2:	e7 fd       	sbrc	r30, 7
    cac4:	f0 95       	com	r31
    cac6:	ef 56       	subi	r30, 0x6F	; 111
    cac8:	f2 4f       	sbci	r31, 0xF2	; 242
    caca:	92 81       	ldd	r25, Z+2	; 0x02
    cacc:	91 50       	subi	r25, 0x01	; 1
			if (scores.data[game.high_score_index] < 'A') scores.data[game.high_score_index] = 'A';
    cace:	91 34       	cpi	r25, 0x41	; 65
    cad0:	b0 f4       	brcc	.+44     	; 0xcafe <update_high_scores+0x11e>
    cad2:	91 e4       	ldi	r25, 0x41	; 65
    cad4:	14 c0       	rjmp	.+40     	; 0xcafe <update_high_scores+0x11e>
			LBPrintChar(11+(game.high_score_index % 5), 7+(game.high_score_index/5)*2, scores.data[game.high_score_index]);
		}
		else if (game.player.controls.pressed & BTN_DOWN)
    cad6:	25 ff       	sbrs	r18, 5
    cad8:	1f c0       	rjmp	.+62     	; 0xcb18 <update_high_scores+0x138>
		{
			SFX_NAVIGATE;
    cada:	41 e0       	ldi	r20, 0x01	; 1
    cadc:	6f ef       	ldi	r22, 0xFF	; 255
    cade:	82 e0       	ldi	r24, 0x02	; 2
    cae0:	0e 94 8b 43 	call	0x8716	; 0x8716 <TriggerFx>
			scores.data[game.high_score_index] = scores.data[game.high_score_index]+1;
    cae4:	80 91 c3 0d 	lds	r24, 0x0DC3
    cae8:	e8 2f       	mov	r30, r24
    caea:	ff 27       	eor	r31, r31
    caec:	e7 fd       	sbrc	r30, 7
    caee:	f0 95       	com	r31
    caf0:	ef 56       	subi	r30, 0x6F	; 111
    caf2:	f2 4f       	sbci	r31, 0xF2	; 242
    caf4:	92 81       	ldd	r25, Z+2	; 0x02
    caf6:	9f 5f       	subi	r25, 0xFF	; 255
			if (scores.data[game.high_score_index] > 'Z') scores.data[game.high_score_index] = 'Z';
    caf8:	9b 35       	cpi	r25, 0x5B	; 91
    cafa:	08 f0       	brcs	.+2      	; 0xcafe <update_high_scores+0x11e>
    cafc:	9a e5       	ldi	r25, 0x5A	; 90
    cafe:	92 83       	std	Z+2, r25	; 0x02
			LBPrintChar(11+(game.high_score_index % 5), 7+(game.high_score_index/5)*2, scores.data[game.high_score_index]);
    cb00:	65 e0       	ldi	r22, 0x05	; 5
    cb02:	0e 94 be 6b 	call	0xd77c	; 0xd77c <__divmodqi4>
    cb06:	68 2f       	mov	r22, r24
    cb08:	66 0f       	add	r22, r22
    cb0a:	69 5f       	subi	r22, 0xF9	; 249
    cb0c:	42 81       	ldd	r20, Z+2	; 0x02
    cb0e:	8b e0       	ldi	r24, 0x0B	; 11
    cb10:	89 0f       	add	r24, r25
		}
	}
}
    cb12:	0f 91       	pop	r16
		else if (game.player.controls.pressed & BTN_DOWN)
		{
			SFX_NAVIGATE;
			scores.data[game.high_score_index] = scores.data[game.high_score_index]+1;
			if (scores.data[game.high_score_index] > 'Z') scores.data[game.high_score_index] = 'Z';
			LBPrintChar(11+(game.high_score_index % 5), 7+(game.high_score_index/5)*2, scores.data[game.high_score_index]);
    cb14:	0c 94 7e 4f 	jmp	0x9efc	; 0x9efc <LBPrintChar>
		}
	}
}
    cb18:	0f 91       	pop	r16
    cb1a:	08 95       	ret

0000cb1c <tally_score>:
		}
	}
}

void tally_score(char* title, u16 bonus)
{
    cb1c:	2f 92       	push	r2
    cb1e:	3f 92       	push	r3
    cb20:	4f 92       	push	r4
    cb22:	5f 92       	push	r5
    cb24:	6f 92       	push	r6
    cb26:	7f 92       	push	r7
    cb28:	8f 92       	push	r8
    cb2a:	9f 92       	push	r9
    cb2c:	af 92       	push	r10
    cb2e:	bf 92       	push	r11
    cb30:	cf 92       	push	r12
    cb32:	df 92       	push	r13
    cb34:	ef 92       	push	r14
    cb36:	ff 92       	push	r15
    cb38:	0f 93       	push	r16
    cb3a:	1f 93       	push	r17
    cb3c:	cf 93       	push	r28
    cb3e:	df 93       	push	r29
    cb40:	7c 01       	movw	r14, r24
    cb42:	6b 01       	movw	r12, r22
	u8 x = Screen.scrollX / 8;
    cb44:	c0 91 b2 0c 	lds	r28, 0x0CB2
    cb48:	c6 95       	lsr	r28
    cb4a:	c6 95       	lsr	r28
    cb4c:	c6 95       	lsr	r28
	u8 y = Screen.scrollY / 8;
    cb4e:	00 91 b3 0c 	lds	r16, 0x0CB3
    cb52:	06 95       	lsr	r16
    cb54:	06 95       	lsr	r16
    cb56:	06 95       	lsr	r16
	u16 tally = game.score;
    cb58:	a0 90 b3 0d 	lds	r10, 0x0DB3
    cb5c:	b0 90 b4 0d 	lds	r11, 0x0DB4
	u16 counter = 0;
	
	hide_sprites(0, MAX_EXTENDED_SPRITES);
    cb60:	64 e1       	ldi	r22, 0x14	; 20
    cb62:	80 e0       	ldi	r24, 0x00	; 0
    cb64:	0e 94 61 61 	call	0xc2c2	; 0xc2c2 <hide_sprites>
	LBRotateSprites();
    cb68:	0e 94 03 51 	call	0xa206	; 0xa206 <LBRotateSprites>
	
	StopSong();
    cb6c:	0e 94 c9 42 	call	0x8592	; 0x8592 <StopSong>
	DrawMap2((x+8)%32, (y+6)%30, map_canvas);
    cb70:	10 e0       	ldi	r17, 0x00	; 0
    cb72:	d0 e0       	ldi	r29, 0x00	; 0
    cb74:	c8 01       	movw	r24, r16
    cb76:	06 96       	adiw	r24, 0x06	; 6
    cb78:	2e e1       	ldi	r18, 0x1E	; 30
    cb7a:	82 2e       	mov	r8, r18
    cb7c:	91 2c       	mov	r9, r1
    cb7e:	b4 01       	movw	r22, r8
    cb80:	0e 94 e0 6b 	call	0xd7c0	; 0xd7c0 <__divmodhi4>
    cb84:	9e 01       	movw	r18, r28
    cb86:	28 5f       	subi	r18, 0xF8	; 248
    cb88:	3f 4f       	sbci	r19, 0xFF	; 255
    cb8a:	47 e6       	ldi	r20, 0x67	; 103
    cb8c:	5f e5       	ldi	r21, 0x5F	; 95
    cb8e:	68 2f       	mov	r22, r24
    cb90:	82 2f       	mov	r24, r18
    cb92:	8f 71       	andi	r24, 0x1F	; 31
    cb94:	0e 94 dc 4d 	call	0x9bb8	; 0x9bb8 <DrawMap>
	LBPrint((x+10)%32, (y+7)%30, title);
    cb98:	c8 01       	movw	r24, r16
    cb9a:	07 96       	adiw	r24, 0x07	; 7
    cb9c:	b4 01       	movw	r22, r8
    cb9e:	0e 94 e0 6b 	call	0xd7c0	; 0xd7c0 <__divmodhi4>
    cba2:	9e 01       	movw	r18, r28
    cba4:	26 5f       	subi	r18, 0xF6	; 246
    cba6:	3f 4f       	sbci	r19, 0xFF	; 255
    cba8:	a7 01       	movw	r20, r14
    cbaa:	68 2f       	mov	r22, r24
    cbac:	82 2f       	mov	r24, r18
    cbae:	8f 71       	andi	r24, 0x1F	; 31
    cbb0:	0e 94 9e 4f 	call	0x9f3c	; 0x9f3c <LBPrint>
	LBPrint((x+9)%32, (y+9)%30, (char*) strTally);
    cbb4:	c8 01       	movw	r24, r16
    cbb6:	09 96       	adiw	r24, 0x09	; 9
    cbb8:	b4 01       	movw	r22, r8
    cbba:	0e 94 e0 6b 	call	0xd7c0	; 0xd7c0 <__divmodhi4>
    cbbe:	48 2e       	mov	r4, r24
    cbc0:	78 2e       	mov	r7, r24
    cbc2:	7e 01       	movw	r14, r28
    cbc4:	29 e0       	ldi	r18, 0x09	; 9
    cbc6:	e2 0e       	add	r14, r18
    cbc8:	f1 1c       	adc	r15, r1
    cbca:	8f e1       	ldi	r24, 0x1F	; 31
    cbcc:	e8 22       	and	r14, r24
    cbce:	ff 24       	eor	r15, r15
    cbd0:	46 eb       	ldi	r20, 0xB6	; 182
    cbd2:	5a e0       	ldi	r21, 0x0A	; 10
    cbd4:	64 2d       	mov	r22, r4
    cbd6:	8e 2d       	mov	r24, r14
    cbd8:	0e 94 9e 4f 	call	0x9f3c	; 0x9f3c <LBPrint>
	LBPrint((x+9)%32, (y+11)%30, (char*) strScore);
    cbdc:	c8 01       	movw	r24, r16
    cbde:	0b 96       	adiw	r24, 0x0b	; 11
    cbe0:	b4 01       	movw	r22, r8
    cbe2:	0e 94 e0 6b 	call	0xd7c0	; 0xd7c0 <__divmodhi4>
    cbe6:	38 2e       	mov	r3, r24
    cbe8:	68 2e       	mov	r6, r24
    cbea:	4c e0       	ldi	r20, 0x0C	; 12
    cbec:	5b e0       	ldi	r21, 0x0B	; 11
    cbee:	68 2f       	mov	r22, r24
    cbf0:	8e 2d       	mov	r24, r14
    cbf2:	0e 94 9e 4f 	call	0x9f3c	; 0x9f3c <LBPrint>
	LBPrint((x+9)%32, (y+12)%30, (char*) strTime);
    cbf6:	c8 01       	movw	r24, r16
    cbf8:	0c 96       	adiw	r24, 0x0c	; 12
    cbfa:	b4 01       	movw	r22, r8
    cbfc:	0e 94 e0 6b 	call	0xd7c0	; 0xd7c0 <__divmodhi4>
    cc00:	58 2e       	mov	r5, r24
    cc02:	f8 2e       	mov	r15, r24
    cc04:	47 ef       	ldi	r20, 0xF7	; 247
    cc06:	5a e0       	ldi	r21, 0x0A	; 10
    cc08:	68 2f       	mov	r22, r24
    cc0a:	8e 2d       	mov	r24, r14
    cc0c:	0e 94 9e 4f 	call	0x9f3c	; 0x9f3c <LBPrint>
	LBPrint((x+9)%32, (y+13)%30, (char*) strLevelBonus);
    cc10:	c8 01       	movw	r24, r16
    cc12:	0d 96       	adiw	r24, 0x0d	; 13
    cc14:	b4 01       	movw	r22, r8
    cc16:	0e 94 e0 6b 	call	0xd7c0	; 0xd7c0 <__divmodhi4>
    cc1a:	18 2f       	mov	r17, r24
    cc1c:	28 2e       	mov	r2, r24
    cc1e:	47 ec       	ldi	r20, 0xC7	; 199
    cc20:	5a e0       	ldi	r21, 0x0A	; 10
    cc22:	68 2f       	mov	r22, r24
    cc24:	8e 2d       	mov	r24, r14
    cc26:	0e 94 9e 4f 	call	0x9f3c	; 0x9f3c <LBPrint>
	
	LBPrintInt((x+20)%32, (y+9)%30, tally, true);
    cc2a:	64 96       	adiw	r28, 0x14	; 20
    cc2c:	cf 71       	andi	r28, 0x1F	; 31
    cc2e:	dd 27       	eor	r29, r29
    cc30:	ec 2e       	mov	r14, r28
    cc32:	21 e0       	ldi	r18, 0x01	; 1
    cc34:	a5 01       	movw	r20, r10
    cc36:	64 2d       	mov	r22, r4
    cc38:	8c 2f       	mov	r24, r28
    cc3a:	0e 94 eb 4f 	call	0x9fd6	; 0x9fd6 <LBPrintInt>
	LBPrintInt((x+20)%32, (y+11)%30, game.level_score, true);
    cc3e:	40 91 b5 0d 	lds	r20, 0x0DB5
    cc42:	50 91 b6 0d 	lds	r21, 0x0DB6
    cc46:	21 e0       	ldi	r18, 0x01	; 1
    cc48:	63 2d       	mov	r22, r3
    cc4a:	8c 2f       	mov	r24, r28
    cc4c:	0e 94 eb 4f 	call	0x9fd6	; 0x9fd6 <LBPrintInt>
	LBPrintInt((x+20)%32, (y+12)%30, game.time, true);
    cc50:	40 91 b7 0d 	lds	r20, 0x0DB7
    cc54:	50 91 b8 0d 	lds	r21, 0x0DB8
    cc58:	21 e0       	ldi	r18, 0x01	; 1
    cc5a:	65 2d       	mov	r22, r5
    cc5c:	8c 2f       	mov	r24, r28
    cc5e:	0e 94 eb 4f 	call	0x9fd6	; 0x9fd6 <LBPrintInt>
	LBPrintInt((x+20)%32, (y+13)%30, bonus, true);
    cc62:	21 e0       	ldi	r18, 0x01	; 1
    cc64:	a6 01       	movw	r20, r12
    cc66:	61 2f       	mov	r22, r17
    cc68:	8c 2f       	mov	r24, r28
    cc6a:	0e 94 eb 4f 	call	0x9fd6	; 0x9fd6 <LBPrintInt>
	
	LBWaitSeconds(2);
    cc6e:	82 e0       	ldi	r24, 0x02	; 2
    cc70:	0e 94 64 50 	call	0xa0c8	; 0xa0c8 <LBWaitSeconds>
	
	// Tally Score
	counter = game.level_score;
    cc74:	80 90 b5 0d 	lds	r8, 0x0DB5
    cc78:	90 90 b6 0d 	lds	r9, 0x0DB6
    cc7c:	e4 01       	movw	r28, r8

void tally_score(char* title, u16 bonus)
{
	u8 x = Screen.scrollX / 8;
	u8 y = Screen.scrollY / 8;
	u16 tally = game.score;
    cc7e:	85 01       	movw	r16, r10
	
	LBWaitSeconds(2);
	
	// Tally Score
	counter = game.level_score;
	while (counter > 0)
    cc80:	20 97       	sbiw	r28, 0x00	; 0
    cc82:	e9 f0       	breq	.+58     	; 0xccbe <tally_score+0x1a2>
	{
		WaitVsync(1);
    cc84:	81 e0       	ldi	r24, 0x01	; 1
    cc86:	90 e0       	ldi	r25, 0x00	; 0
    cc88:	0e 94 45 4e 	call	0x9c8a	; 0x9c8a <WaitVsync>
		SFX_HIT;
    cc8c:	41 e0       	ldi	r20, 0x01	; 1
    cc8e:	6f ef       	ldi	r22, 0xFF	; 255
    cc90:	84 e0       	ldi	r24, 0x04	; 4
    cc92:	0e 94 8b 43 	call	0x8716	; 0x8716 <TriggerFx>
		tally += 1;
    cc96:	0f 5f       	subi	r16, 0xFF	; 255
    cc98:	1f 4f       	sbci	r17, 0xFF	; 255
		counter -= 1;
    cc9a:	21 97       	sbiw	r28, 0x01	; 1
		LBPrintInt((x+20)%32, (y+9)%30, tally, true);
    cc9c:	21 e0       	ldi	r18, 0x01	; 1
    cc9e:	a8 01       	movw	r20, r16
    cca0:	67 2d       	mov	r22, r7
    cca2:	8e 2d       	mov	r24, r14
    cca4:	0e 94 eb 4f 	call	0x9fd6	; 0x9fd6 <LBPrintInt>
		LBPrintInt((x+20)%32, (y+11)%30, counter, true);
    cca8:	21 e0       	ldi	r18, 0x01	; 1
    ccaa:	ae 01       	movw	r20, r28
    ccac:	66 2d       	mov	r22, r6
    ccae:	8e 2d       	mov	r24, r14
    ccb0:	0e 94 eb 4f 	call	0x9fd6	; 0x9fd6 <LBPrintInt>
		WaitUs(TALLY_DELAY);
    ccb4:	8c ed       	ldi	r24, 0xDC	; 220
    ccb6:	95 e0       	ldi	r25, 0x05	; 5
    ccb8:	0e 94 e2 3f 	call	0x7fc4	; 0x7fc4 <WaitUs>
    ccbc:	e1 cf       	rjmp	.-62     	; 0xcc80 <tally_score+0x164>
    ccbe:	a8 0c       	add	r10, r8
    ccc0:	b9 1c       	adc	r11, r9
	}
	
	// Tally Time
	counter = game.time;
    ccc2:	c0 91 b7 0d 	lds	r28, 0x0DB7
    ccc6:	d0 91 b8 0d 	lds	r29, 0x0DB8
	while (counter > 0)
    ccca:	20 97       	sbiw	r28, 0x00	; 0
    cccc:	31 f1       	breq	.+76     	; 0xcd1a <tally_score+0x1fe>
	{
		WaitVsync(1);
    ccce:	81 e0       	ldi	r24, 0x01	; 1
    ccd0:	90 e0       	ldi	r25, 0x00	; 0
    ccd2:	0e 94 45 4e 	call	0x9c8a	; 0x9c8a <WaitVsync>
		SFX_HIT;
    ccd6:	41 e0       	ldi	r20, 0x01	; 1
    ccd8:	6f ef       	ldi	r22, 0xFF	; 255
    ccda:	84 e0       	ldi	r24, 0x04	; 4
    ccdc:	0e 94 8b 43 	call	0x8716	; 0x8716 <TriggerFx>
		tally -= 1;
		if (tally == 0 || tally == 65535) tally = 0;
    cce0:	c5 01       	movw	r24, r10
    cce2:	02 97       	sbiw	r24, 0x02	; 2
    cce4:	8e 3f       	cpi	r24, 0xFE	; 254
    cce6:	9f 4f       	sbci	r25, 0xFF	; 255
    cce8:	20 f4       	brcc	.+8      	; 0xccf2 <tally_score+0x1d6>
	counter = game.time;
	while (counter > 0)
	{
		WaitVsync(1);
		SFX_HIT;
		tally -= 1;
    ccea:	81 e0       	ldi	r24, 0x01	; 1
    ccec:	a8 1a       	sub	r10, r24
    ccee:	b1 08       	sbc	r11, r1
    ccf0:	02 c0       	rjmp	.+4      	; 0xccf6 <tally_score+0x1da>
		if (tally == 0 || tally == 65535) tally = 0;
    ccf2:	a1 2c       	mov	r10, r1
    ccf4:	b1 2c       	mov	r11, r1
		counter -= 1;
    ccf6:	21 97       	sbiw	r28, 0x01	; 1
		LBPrintInt((x+20)%32, (y+9)%30, tally, true);
    ccf8:	21 e0       	ldi	r18, 0x01	; 1
    ccfa:	a5 01       	movw	r20, r10
    ccfc:	67 2d       	mov	r22, r7
    ccfe:	8e 2d       	mov	r24, r14
    cd00:	0e 94 eb 4f 	call	0x9fd6	; 0x9fd6 <LBPrintInt>
		LBPrintInt((x+20)%32, (y+12)%30, counter, true);
    cd04:	21 e0       	ldi	r18, 0x01	; 1
    cd06:	ae 01       	movw	r20, r28
    cd08:	6f 2d       	mov	r22, r15
    cd0a:	8e 2d       	mov	r24, r14
    cd0c:	0e 94 eb 4f 	call	0x9fd6	; 0x9fd6 <LBPrintInt>
		WaitUs(TALLY_DELAY);
    cd10:	8c ed       	ldi	r24, 0xDC	; 220
    cd12:	95 e0       	ldi	r25, 0x05	; 5
    cd14:	0e 94 e2 3f 	call	0x7fc4	; 0x7fc4 <WaitUs>
    cd18:	d8 cf       	rjmp	.-80     	; 0xccca <tally_score+0x1ae>
    cd1a:	85 01       	movw	r16, r10
		WaitUs(TALLY_DELAY);
	}
	
	// Tally Time
	counter = game.time;
	while (counter > 0)
    cd1c:	e6 01       	movw	r28, r12
		WaitUs(TALLY_DELAY);
	}
	
	// Tally Level Bonus
	counter = bonus;
	while (counter > 0)
    cd1e:	20 97       	sbiw	r28, 0x00	; 0
    cd20:	e9 f0       	breq	.+58     	; 0xcd5c <tally_score+0x240>
	{
		WaitVsync(1);
    cd22:	81 e0       	ldi	r24, 0x01	; 1
    cd24:	90 e0       	ldi	r25, 0x00	; 0
    cd26:	0e 94 45 4e 	call	0x9c8a	; 0x9c8a <WaitVsync>
		SFX_HIT;
    cd2a:	41 e0       	ldi	r20, 0x01	; 1
    cd2c:	6f ef       	ldi	r22, 0xFF	; 255
    cd2e:	84 e0       	ldi	r24, 0x04	; 4
    cd30:	0e 94 8b 43 	call	0x8716	; 0x8716 <TriggerFx>
		tally += 1;
    cd34:	0f 5f       	subi	r16, 0xFF	; 255
    cd36:	1f 4f       	sbci	r17, 0xFF	; 255
		counter -= 1;
    cd38:	21 97       	sbiw	r28, 0x01	; 1
		LBPrintInt((x+20)%32, (y+9)%30, tally, true);
    cd3a:	21 e0       	ldi	r18, 0x01	; 1
    cd3c:	a8 01       	movw	r20, r16
    cd3e:	67 2d       	mov	r22, r7
    cd40:	8e 2d       	mov	r24, r14
    cd42:	0e 94 eb 4f 	call	0x9fd6	; 0x9fd6 <LBPrintInt>
		LBPrintInt((x+20)%32, (y+13)%30, counter, true);
    cd46:	21 e0       	ldi	r18, 0x01	; 1
    cd48:	ae 01       	movw	r20, r28
    cd4a:	62 2d       	mov	r22, r2
    cd4c:	8e 2d       	mov	r24, r14
    cd4e:	0e 94 eb 4f 	call	0x9fd6	; 0x9fd6 <LBPrintInt>
		WaitUs(TALLY_DELAY);
    cd52:	8c ed       	ldi	r24, 0xDC	; 220
    cd54:	95 e0       	ldi	r25, 0x05	; 5
    cd56:	0e 94 e2 3f 	call	0x7fc4	; 0x7fc4 <WaitUs>
    cd5a:	e1 cf       	rjmp	.-62     	; 0xcd1e <tally_score+0x202>
    cd5c:	ac 0c       	add	r10, r12
    cd5e:	bd 1c       	adc	r11, r13
	}
	
	game.score = tally;
    cd60:	b0 92 b4 0d 	sts	0x0DB4, r11
    cd64:	a0 92 b3 0d 	sts	0x0DB3, r10
	game.time = 0;
    cd68:	10 92 b8 0d 	sts	0x0DB8, r1
    cd6c:	10 92 b7 0d 	sts	0x0DB7, r1
	LBWaitSeconds(2);
    cd70:	82 e0       	ldi	r24, 0x02	; 2
}
    cd72:	df 91       	pop	r29
    cd74:	cf 91       	pop	r28
    cd76:	1f 91       	pop	r17
    cd78:	0f 91       	pop	r16
    cd7a:	ff 90       	pop	r15
    cd7c:	ef 90       	pop	r14
    cd7e:	df 90       	pop	r13
    cd80:	cf 90       	pop	r12
    cd82:	bf 90       	pop	r11
    cd84:	af 90       	pop	r10
    cd86:	9f 90       	pop	r9
    cd88:	8f 90       	pop	r8
    cd8a:	7f 90       	pop	r7
    cd8c:	6f 90       	pop	r6
    cd8e:	5f 90       	pop	r5
    cd90:	4f 90       	pop	r4
    cd92:	3f 90       	pop	r3
    cd94:	2f 90       	pop	r2
		WaitUs(TALLY_DELAY);
	}
	
	game.score = tally;
	game.time = 0;
	LBWaitSeconds(2);
    cd96:	0c 94 64 50 	jmp	0xa0c8	; 0xa0c8 <LBWaitSeconds>

0000cd9a <handle_player_death>:
		}
	}
}

u8 handle_player_death(Player* player)
{
    cd9a:	cf 93       	push	r28
	if (player == &game.boss) {
    cd9c:	83 54       	subi	r24, 0x43	; 67
    cd9e:	9e 40       	sbci	r25, 0x0E	; 14
    cda0:	29 f4       	brne	.+10     	; 0xcdac <handle_player_death+0x12>
		game.level_ended = 1;
    cda2:	81 e0       	ldi	r24, 0x01	; 1
    cda4:	80 93 ce 0d 	sts	0x0DCE, r24
		return 1;
    cda8:	c1 e0       	ldi	r28, 0x01	; 1
    cdaa:	34 c0       	rjmp	.+104    	; 0xce14 <handle_player_death+0x7a>
	}
	game.lives--;
    cdac:	80 91 c4 0d 	lds	r24, 0x0DC4
    cdb0:	81 50       	subi	r24, 0x01	; 1
    cdb2:	80 93 c4 0d 	sts	0x0DC4, r24
	clear_sprites(0, 6);
    cdb6:	66 e0       	ldi	r22, 0x06	; 6
    cdb8:	80 e0       	ldi	r24, 0x00	; 0
    cdba:	0e 94 21 60 	call	0xc042	; 0xc042 <clear_sprites>
	LBRotateSprites();
    cdbe:	0e 94 03 51 	call	0xa206	; 0xa206 <LBRotateSprites>
	if (game.lives == 0)
    cdc2:	c0 91 c4 0d 	lds	r28, 0x0DC4
    cdc6:	c1 11       	cpse	r28, r1
    cdc8:	09 c0       	rjmp	.+18     	; 0xcddc <handle_player_death+0x42>
	{
		tally_score((char*) strGameOver, 0);
    cdca:	60 e0       	ldi	r22, 0x00	; 0
    cdcc:	70 e0       	ldi	r23, 0x00	; 0
    cdce:	8d eb       	ldi	r24, 0xBD	; 189
    cdd0:	9a e0       	ldi	r25, 0x0A	; 10
    cdd2:	0e 94 8e 65 	call	0xcb1c	; 0xcb1c <tally_score>
		exit_game();
    cdd6:	0e 94 99 64 	call	0xc932	; 0xc932 <exit_game>
    cdda:	1c c0       	rjmp	.+56     	; 0xce14 <handle_player_death+0x7a>
		return 0;
	}
	FadeOut(FRAMES_PER_FADE, true);
    cddc:	61 e0       	ldi	r22, 0x01	; 1
    cdde:	81 e0       	ldi	r24, 0x01	; 1
    cde0:	0e 94 ad 4e 	call	0x9d5a	; 0x9d5a <FadeOut>
	ClearVram();
    cde4:	0e 94 ac 3f 	call	0x7f58	; 0x7f58 <ClearVram>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    cde8:	64 e1       	ldi	r22, 0x14	; 20
    cdea:	80 e0       	ldi	r24, 0x00	; 0
    cdec:	0e 94 21 60 	call	0xc042	; 0xc042 <clear_sprites>
	LBRotateSprites();
    cdf0:	0e 94 03 51 	call	0xa206	; 0xa206 <LBRotateSprites>
	FadeIn(FRAMES_PER_FADE, false);
    cdf4:	60 e0       	ldi	r22, 0x00	; 0
    cdf6:	81 e0       	ldi	r24, 0x01	; 1
    cdf8:	0e 94 a1 4e 	call	0x9d42	; 0x9d42 <FadeIn>
	init_player_state();
    cdfc:	0e 94 fa 53 	call	0xa7f4	; 0xa7f4 <init_player_state>
	init_boss_state();
    ce00:	0e 94 50 53 	call	0xa6a0	; 0xa6a0 <init_boss_state>
	init_enemy_state();
    ce04:	0e 94 51 51 	call	0xa2a2	; 0xa2a2 <init_enemy_state>
	load_level(game.current_level_index, false);
    ce08:	60 e0       	ldi	r22, 0x00	; 0
    ce0a:	80 91 c6 0d 	lds	r24, 0x0DC6
    ce0e:	0e 94 53 60 	call	0xc0a6	; 0xc0a6 <load_level>
	return 0;
    ce12:	c0 e0       	ldi	r28, 0x00	; 0
}
    ce14:	8c 2f       	mov	r24, r28
    ce16:	cf 91       	pop	r28
    ce18:	08 95       	ret

0000ce1a <update_player>:

u8 update_player(Player* player, u8 slot)
{
    ce1a:	ef 92       	push	r14
    ce1c:	ff 92       	push	r15
    ce1e:	0f 93       	push	r16
    ce20:	1f 93       	push	r17
    ce22:	cf 93       	push	r28
    ce24:	df 93       	push	r29
    ce26:	1f 92       	push	r1
    ce28:	cd b7       	in	r28, 0x3d	; 61
    ce2a:	de b7       	in	r29, 0x3e	; 62
    ce2c:	7c 01       	movw	r14, r24
    ce2e:	16 2f       	mov	r17, r22
	
	if (player->flags & EXPLODING)
    ce30:	fc 01       	movw	r30, r24
    ce32:	00 85       	ldd	r16, Z+8	; 0x08
    ce34:	04 ff       	sbrs	r16, 4
    ce36:	16 c0       	rjmp	.+44     	; 0xce64 <update_player+0x4a>
	{
		if (map_explosion(&player->flags, &player->expl, slot, player->width, player->height))
    ce38:	04 85       	ldd	r16, Z+12	; 0x0c
    ce3a:	23 85       	ldd	r18, Z+11	; 0x0b
    ce3c:	46 2f       	mov	r20, r22
    ce3e:	bc 01       	movw	r22, r24
    ce40:	6b 59       	subi	r22, 0x9B	; 155
    ce42:	7f 4f       	sbci	r23, 0xFF	; 255
    ce44:	08 96       	adiw	r24, 0x08	; 8
    ce46:	0e 94 8e 5c 	call	0xb91c	; 0xb91c <map_explosion>
    ce4a:	88 23       	and	r24, r24
    ce4c:	09 f4       	brne	.+2      	; 0xce50 <update_player+0x36>
    ce4e:	a5 c1       	rjmp	.+842    	; 0xd19a <update_player+0x380>
		{
			return handle_player_death(player);
    ce50:	c7 01       	movw	r24, r14
			player->direction = D_RIGHT;
			LBMapSprite(slot, LBGetNextFrame(&player->prone), 0);
		}
	}
	return 1;
}
    ce52:	0f 90       	pop	r0
    ce54:	df 91       	pop	r29
    ce56:	cf 91       	pop	r28
    ce58:	1f 91       	pop	r17
    ce5a:	0f 91       	pop	r16
    ce5c:	ff 90       	pop	r15
    ce5e:	ef 90       	pop	r14
	
	if (player->flags & EXPLODING)
	{
		if (map_explosion(&player->flags, &player->expl, slot, player->width, player->height))
		{
			return handle_player_death(player);
    ce60:	0c 94 cd 66 	jmp	0xcd9a	; 0xcd9a <handle_player_death>
		}
	}
	else if (is_space())
    ce64:	0e 94 37 51 	call	0xa26e	; 0xa26e <is_space>
    ce68:	88 23       	and	r24, r24
    ce6a:	09 f4       	brne	.+2      	; 0xce6e <update_player+0x54>
    ce6c:	4c c0       	rjmp	.+152    	; 0xcf06 <update_player+0xec>
	{
		if (player->flags & END_OF_SPACE) {
    ce6e:	05 ff       	sbrs	r16, 5
    ce70:	05 c0       	rjmp	.+10     	; 0xce7c <update_player+0x62>
			player->shared.vx = SPACE_SHIP_SPEED*2;
    ce72:	88 e7       	ldi	r24, 0x78	; 120
    ce74:	f7 01       	movw	r30, r14
    ce76:	85 83       	std	Z+5, r24	; 0x05
			player->shared.vy = 0;
    ce78:	14 82       	std	Z+4, r1	; 0x04
    ce7a:	41 c0       	rjmp	.+130    	; 0xcefe <update_player+0xe4>
		} else {
			player->shared.vy = 0;
    ce7c:	f7 01       	movw	r30, r14
    ce7e:	14 82       	std	Z+4, r1	; 0x04
			player->shared.vx = SPACE_SHIP_SPEED;
    ce80:	3c e3       	ldi	r19, 0x3C	; 60
    ce82:	35 83       	std	Z+5, r19	; 0x05
			
			if ((player->controls.held & BTN_DOWN) && (player->shared.y/8 + 1 < game.level_height))
    ce84:	ef 58       	subi	r30, 0x8F	; 143
    ce86:	ff 4f       	sbci	r31, 0xFF	; 255
    ce88:	20 81       	ld	r18, Z
    ce8a:	25 ff       	sbrs	r18, 5
    ce8c:	10 c0       	rjmp	.+32     	; 0xceae <update_player+0x94>
    ce8e:	f7 01       	movw	r30, r14
    ce90:	82 81       	ldd	r24, Z+2	; 0x02
    ce92:	93 81       	ldd	r25, Z+3	; 0x03
    ce94:	63 e0       	ldi	r22, 0x03	; 3
    ce96:	96 95       	lsr	r25
    ce98:	87 95       	ror	r24
    ce9a:	6a 95       	dec	r22
    ce9c:	e1 f7       	brne	.-8      	; 0xce96 <update_player+0x7c>
    ce9e:	01 96       	adiw	r24, 0x01	; 1
    cea0:	40 91 c1 0d 	lds	r20, 0x0DC1
    cea4:	50 e0       	ldi	r21, 0x00	; 0
    cea6:	84 17       	cp	r24, r20
    cea8:	95 07       	cpc	r25, r21
    ceaa:	08 f4       	brcc	.+2      	; 0xceae <update_player+0x94>
			{
				player->shared.vy = SPACE_SHIP_SPEED;
    ceac:	34 83       	std	Z+4, r19	; 0x04
			}
			if ((player->controls.held & BTN_RIGHT) && (player->shared.x + 24 < game.camera_x + CAMERA_WIDTH*8))
    ceae:	27 ff       	sbrs	r18, 7
    ceb0:	10 c0       	rjmp	.+32     	; 0xced2 <update_player+0xb8>
    ceb2:	f7 01       	movw	r30, r14
    ceb4:	40 81       	ld	r20, Z
    ceb6:	51 81       	ldd	r21, Z+1	; 0x01
    ceb8:	48 5e       	subi	r20, 0xE8	; 232
    ceba:	5f 4f       	sbci	r21, 0xFF	; 255
    cebc:	80 91 b1 0d 	lds	r24, 0x0DB1
    cec0:	90 91 b2 0d 	lds	r25, 0x0DB2
    cec4:	80 52       	subi	r24, 0x20	; 32
    cec6:	9f 4f       	sbci	r25, 0xFF	; 255
    cec8:	48 17       	cp	r20, r24
    ceca:	59 07       	cpc	r21, r25
    cecc:	10 f4       	brcc	.+4      	; 0xced2 <update_player+0xb8>
			{
				player->shared.vx = SPACE_SHIP_SPEED*2;
    cece:	88 e7       	ldi	r24, 0x78	; 120
    ced0:	85 83       	std	Z+5, r24	; 0x05
			}
			if ((player->controls.held & BTN_LEFT) && (player->shared.x > game.camera_x))
    ced2:	26 ff       	sbrs	r18, 6
    ced4:	0b c0       	rjmp	.+22     	; 0xceec <update_player+0xd2>
    ced6:	f7 01       	movw	r30, r14
    ced8:	40 81       	ld	r20, Z
    ceda:	51 81       	ldd	r21, Z+1	; 0x01
    cedc:	80 91 b1 0d 	lds	r24, 0x0DB1
    cee0:	90 91 b2 0d 	lds	r25, 0x0DB2
    cee4:	84 17       	cp	r24, r20
    cee6:	95 07       	cpc	r25, r21
    cee8:	08 f4       	brcc	.+2      	; 0xceec <update_player+0xd2>
			{
				player->shared.vx = 0;
    ceea:	15 82       	std	Z+5, r1	; 0x05
			}
			if ((player->controls.held & BTN_UP) && (player->shared.y > 0))
    ceec:	24 ff       	sbrs	r18, 4
    ceee:	07 c0       	rjmp	.+14     	; 0xcefe <update_player+0xe4>
    cef0:	f7 01       	movw	r30, r14
    cef2:	82 81       	ldd	r24, Z+2	; 0x02
    cef4:	93 81       	ldd	r25, Z+3	; 0x03
    cef6:	89 2b       	or	r24, r25
    cef8:	11 f0       	breq	.+4      	; 0xcefe <update_player+0xe4>
			{
				player->shared.vy = -SPACE_SHIP_SPEED;
    cefa:	84 ec       	ldi	r24, 0xC4	; 196
    cefc:	84 83       	std	Z+4, r24	; 0x04
			}
		}
		LBMapSprite(slot, LBGetNextFrame(&player->run), 0);
    cefe:	c7 01       	movw	r24, r14
    cf00:	83 5b       	subi	r24, 0xB3	; 179
    cf02:	9f 4f       	sbci	r25, 0xFF	; 255
    cf04:	43 c1       	rjmp	.+646    	; 0xd18c <update_player+0x372>
	}
	else if (player->flags & (IDLE|RUNNING))
    cf06:	80 2f       	mov	r24, r16
    cf08:	8a 70       	andi	r24, 0x0A	; 10
    cf0a:	09 f4       	brne	.+2      	; 0xcf0e <update_player+0xf4>
    cf0c:	96 c0       	rjmp	.+300    	; 0xd03a <update_player+0x220>
	{
		if (!on_solid_ground(&player->shared, player->width, player->height))
    cf0e:	f7 01       	movw	r30, r14
    cf10:	44 85       	ldd	r20, Z+12	; 0x0c
    cf12:	63 85       	ldd	r22, Z+11	; 0x0b
    cf14:	c7 01       	movw	r24, r14
    cf16:	0e 94 fa 57 	call	0xaff4	; 0xaff4 <on_solid_ground>
    cf1a:	81 11       	cpse	r24, r1
    cf1c:	06 c0       	rjmp	.+12     	; 0xcf2a <update_player+0x110>
		{
			player->shared.gravity = GRAVITY;
    cf1e:	88 ec       	ldi	r24, 0xC8	; 200
    cf20:	f7 01       	movw	r30, r14
    cf22:	86 83       	std	Z+6, r24	; 0x06
			player->flags = JUMPING;
    cf24:	81 e0       	ldi	r24, 0x01	; 1
    cf26:	80 87       	std	Z+8, r24	; 0x08
    cf28:	0f c1       	rjmp	.+542    	; 0xd148 <update_player+0x32e>
			LBMapSprite(slot, LBGetNextFrame(&player->jump), extendedSprites[slot].flags);
		}
		else
		{
			if (player->controls.held & BTN_DOWN)
    cf2a:	f7 01       	movw	r30, r14
    cf2c:	ef 58       	subi	r30, 0x8F	; 143
    cf2e:	ff 4f       	sbci	r31, 0xFF	; 255
    cf30:	20 81       	ld	r18, Z
    cf32:	25 ff       	sbrs	r18, 5
    cf34:	25 c0       	rjmp	.+74     	; 0xcf80 <update_player+0x166>
			{
				player->shared.y += 16;
    cf36:	f7 01       	movw	r30, r14
    cf38:	82 81       	ldd	r24, Z+2	; 0x02
    cf3a:	93 81       	ldd	r25, Z+3	; 0x03
    cf3c:	40 96       	adiw	r24, 0x10	; 16
    cf3e:	93 83       	std	Z+3, r25	; 0x03
    cf40:	82 83       	std	Z+2, r24	; 0x02
				if(player->direction == D_RIGHT)
    cf42:	82 85       	ldd	r24, Z+10	; 0x0a
    cf44:	81 30       	cpi	r24, 0x01	; 1
    cf46:	29 f4       	brne	.+10     	; 0xcf52 <update_player+0x138>
				{
					player->shared.x -= 8;
    cf48:	80 81       	ld	r24, Z
    cf4a:	91 81       	ldd	r25, Z+1	; 0x01
    cf4c:	08 97       	sbiw	r24, 0x08	; 8
    cf4e:	91 83       	std	Z+1, r25	; 0x01
    cf50:	80 83       	st	Z, r24
				}
				player->shared.vx = 0;
    cf52:	f7 01       	movw	r30, r14
    cf54:	15 82       	std	Z+5, r1	; 0x05
				player->flags = PRONE;
    cf56:	84 e0       	ldi	r24, 0x04	; 4
    cf58:	80 87       	std	Z+8, r24	; 0x08
				player->width = 3;
    cf5a:	83 e0       	ldi	r24, 0x03	; 3
    cf5c:	83 87       	std	Z+11, r24	; 0x0b
				player->height = 1;
    cf5e:	81 e0       	ldi	r24, 0x01	; 1
    cf60:	84 87       	std	Z+12, r24	; 0x0c
				clear_sprites(3, 3);
    cf62:	63 e0       	ldi	r22, 0x03	; 3
    cf64:	83 e0       	ldi	r24, 0x03	; 3
    cf66:	0e 94 21 60 	call	0xc042	; 0xc042 <clear_sprites>
				LBMapSprite(slot, LBGetNextFrame(&player->prone), extendedSprites[slot].flags);
    cf6a:	24 e0       	ldi	r18, 0x04	; 4
    cf6c:	12 9f       	mul	r17, r18
    cf6e:	f0 01       	movw	r30, r0
    cf70:	11 24       	eor	r1, r1
    cf72:	e0 54       	subi	r30, 0x40	; 64
    cf74:	f0 4f       	sbci	r31, 0xF0	; 240
    cf76:	43 81       	ldd	r20, Z+3	; 0x03
    cf78:	c7 01       	movw	r24, r14
    cf7a:	83 5a       	subi	r24, 0xA3	; 163
    cf7c:	9f 4f       	sbci	r25, 0xFF	; 255
    cf7e:	44 c0       	rjmp	.+136    	; 0xd008 <update_player+0x1ee>
			}
			else if ((player->controls.held & BTN_RIGHT) && (player->shared.x/8 + 2 < game.level_width))
    cf80:	27 ff       	sbrs	r18, 7
    cf82:	1c c0       	rjmp	.+56     	; 0xcfbc <update_player+0x1a2>
    cf84:	f7 01       	movw	r30, r14
    cf86:	80 81       	ld	r24, Z
    cf88:	91 81       	ldd	r25, Z+1	; 0x01
    cf8a:	53 e0       	ldi	r21, 0x03	; 3
    cf8c:	96 95       	lsr	r25
    cf8e:	87 95       	ror	r24
    cf90:	5a 95       	dec	r21
    cf92:	e1 f7       	brne	.-8      	; 0xcf8c <update_player+0x172>
    cf94:	02 96       	adiw	r24, 0x02	; 2
    cf96:	40 91 c0 0d 	lds	r20, 0x0DC0
    cf9a:	50 e0       	ldi	r21, 0x00	; 0
    cf9c:	84 17       	cp	r24, r20
    cf9e:	95 07       	cpc	r25, r21
    cfa0:	68 f4       	brcc	.+26     	; 0xcfbc <update_player+0x1a2>
			{
				player->shared.vx = RUN_SPEED;
    cfa2:	8c e3       	ldi	r24, 0x3C	; 60
    cfa4:	85 83       	std	Z+5, r24	; 0x05
				player->flags = RUNNING;
    cfa6:	82 e0       	ldi	r24, 0x02	; 2
    cfa8:	80 87       	std	Z+8, r24	; 0x08
				player->direction = D_RIGHT;
    cfaa:	81 e0       	ldi	r24, 0x01	; 1
    cfac:	82 87       	std	Z+10, r24	; 0x0a
				LBMapSprite(slot, LBGetNextFrame(&player->run), 0);
    cfae:	c7 01       	movw	r24, r14
    cfb0:	83 5b       	subi	r24, 0xB3	; 179
    cfb2:	9f 4f       	sbci	r25, 0xFF	; 255
    cfb4:	0e 94 0d 4f 	call	0x9e1a	; 0x9e1a <LBGetNextFrame>
    cfb8:	40 e0       	ldi	r20, 0x00	; 0
    cfba:	2a c0       	rjmp	.+84     	; 0xd010 <update_player+0x1f6>
			}
			else if ((player->controls.held & BTN_LEFT) && (player->shared.x > game.camera_x))
    cfbc:	26 ff       	sbrs	r18, 6
    cfbe:	16 c0       	rjmp	.+44     	; 0xcfec <update_player+0x1d2>
    cfc0:	f7 01       	movw	r30, r14
    cfc2:	20 81       	ld	r18, Z
    cfc4:	31 81       	ldd	r19, Z+1	; 0x01
    cfc6:	80 91 b1 0d 	lds	r24, 0x0DB1
    cfca:	90 91 b2 0d 	lds	r25, 0x0DB2
    cfce:	82 17       	cp	r24, r18
    cfd0:	93 07       	cpc	r25, r19
    cfd2:	60 f4       	brcc	.+24     	; 0xcfec <update_player+0x1d2>
			{
				player->shared.vx = -RUN_SPEED;
    cfd4:	84 ec       	ldi	r24, 0xC4	; 196
    cfd6:	85 83       	std	Z+5, r24	; 0x05
				player->flags = RUNNING;
    cfd8:	82 e0       	ldi	r24, 0x02	; 2
    cfda:	80 87       	std	Z+8, r24	; 0x08
				player->direction = D_LEFT;
    cfdc:	12 86       	std	Z+10, r1	; 0x0a
				LBMapSprite(slot, LBGetNextFrame(&player->run), SPRITE_FLIP_X);
    cfde:	c7 01       	movw	r24, r14
    cfe0:	83 5b       	subi	r24, 0xB3	; 179
    cfe2:	9f 4f       	sbci	r25, 0xFF	; 255
    cfe4:	0e 94 0d 4f 	call	0x9e1a	; 0x9e1a <LBGetNextFrame>
    cfe8:	41 e0       	ldi	r20, 0x01	; 1
    cfea:	12 c0       	rjmp	.+36     	; 0xd010 <update_player+0x1f6>
			}
			else
			{
				player->flags = IDLE;
    cfec:	88 e0       	ldi	r24, 0x08	; 8
    cfee:	f7 01       	movw	r30, r14
    cff0:	80 87       	std	Z+8, r24	; 0x08
				player->shared.vx = 0;
    cff2:	15 82       	std	Z+5, r1	; 0x05
				LBMapSprite(slot, LBGetNextFrame(&player->idle), extendedSprites[slot].flags);
    cff4:	24 e0       	ldi	r18, 0x04	; 4
    cff6:	12 9f       	mul	r17, r18
    cff8:	f0 01       	movw	r30, r0
    cffa:	11 24       	eor	r1, r1
    cffc:	e0 54       	subi	r30, 0x40	; 64
    cffe:	f0 4f       	sbci	r31, 0xF0	; 240
    d000:	43 81       	ldd	r20, Z+3	; 0x03
    d002:	c7 01       	movw	r24, r14
    d004:	8b 5b       	subi	r24, 0xBB	; 187
    d006:	9f 4f       	sbci	r25, 0xFF	; 255
    d008:	49 83       	std	Y+1, r20	; 0x01
    d00a:	0e 94 0d 4f 	call	0x9e1a	; 0x9e1a <LBGetNextFrame>
    d00e:	49 81       	ldd	r20, Y+1	; 0x01
    d010:	bc 01       	movw	r22, r24
    d012:	81 2f       	mov	r24, r17
    d014:	0e 94 73 50 	call	0xa0e6	; 0xa0e6 <LBMapSprite>
			}
			if (player->controls.pressed & BTN_B && !(player->flags & PRONE))
    d018:	f7 01       	movw	r30, r14
    d01a:	e3 59       	subi	r30, 0x93	; 147
    d01c:	ff 4f       	sbci	r31, 0xFF	; 255
    d01e:	80 81       	ld	r24, Z
    d020:	80 ff       	sbrs	r24, 0
    d022:	bb c0       	rjmp	.+374    	; 0xd19a <update_player+0x380>
    d024:	f7 01       	movw	r30, r14
    d026:	80 85       	ldd	r24, Z+8	; 0x08
    d028:	82 fd       	sbrc	r24, 2
    d02a:	b7 c0       	rjmp	.+366    	; 0xd19a <update_player+0x380>
			{
				player->shared.vy = -JUMP_SPEED;
    d02c:	81 e8       	ldi	r24, 0x81	; 129
    d02e:	84 83       	std	Z+4, r24	; 0x04
				player->shared.gravity = GRAVITY;
    d030:	88 ec       	ldi	r24, 0xC8	; 200
    d032:	86 83       	std	Z+6, r24	; 0x06
				player->flags = JUMPING;
    d034:	81 e0       	ldi	r24, 0x01	; 1
    d036:	80 87       	std	Z+8, r24	; 0x08
    d038:	83 c0       	rjmp	.+262    	; 0xd140 <update_player+0x326>
				player->height = 3;
				LBMapSprite(slot, LBGetNextFrame(&player->jump), extendedSprites[slot].flags);
			}
		}
	}
	else if (player->flags & JUMPING)
    d03a:	00 ff       	sbrs	r16, 0
    d03c:	4c c0       	rjmp	.+152    	; 0xd0d6 <update_player+0x2bc>
	{
		if ((player->controls.held & BTN_RIGHT) && (player->shared.x/8 + 2 < game.level_width))
    d03e:	f7 01       	movw	r30, r14
    d040:	ef 58       	subi	r30, 0x8F	; 143
    d042:	ff 4f       	sbci	r31, 0xFF	; 255
    d044:	60 81       	ld	r22, Z
    d046:	c7 01       	movw	r24, r14
    d048:	8b 5a       	subi	r24, 0xAB	; 171
    d04a:	9f 4f       	sbci	r25, 0xFF	; 255
    d04c:	67 ff       	sbrs	r22, 7
    d04e:	18 c0       	rjmp	.+48     	; 0xd080 <update_player+0x266>
    d050:	f7 01       	movw	r30, r14
    d052:	20 81       	ld	r18, Z
    d054:	31 81       	ldd	r19, Z+1	; 0x01
    d056:	43 e0       	ldi	r20, 0x03	; 3
    d058:	36 95       	lsr	r19
    d05a:	27 95       	ror	r18
    d05c:	4a 95       	dec	r20
    d05e:	e1 f7       	brne	.-8      	; 0xd058 <update_player+0x23e>
    d060:	2e 5f       	subi	r18, 0xFE	; 254
    d062:	3f 4f       	sbci	r19, 0xFF	; 255
    d064:	40 91 c0 0d 	lds	r20, 0x0DC0
    d068:	50 e0       	ldi	r21, 0x00	; 0
    d06a:	24 17       	cp	r18, r20
    d06c:	35 07       	cpc	r19, r21
    d06e:	40 f4       	brcc	.+16     	; 0xd080 <update_player+0x266>
		{
			player->shared.vx = RUN_SPEED;
    d070:	2c e3       	ldi	r18, 0x3C	; 60
    d072:	25 83       	std	Z+5, r18	; 0x05
			player->direction = D_RIGHT;
    d074:	21 e0       	ldi	r18, 0x01	; 1
    d076:	22 87       	std	Z+10, r18	; 0x0a
			LBMapSprite(slot, LBGetNextFrame(&player->jump), 0);
    d078:	0e 94 0d 4f 	call	0x9e1a	; 0x9e1a <LBGetNextFrame>
    d07c:	40 e0       	ldi	r20, 0x00	; 0
    d07e:	20 c0       	rjmp	.+64     	; 0xd0c0 <update_player+0x2a6>
		}
		else if ((player->controls.held & BTN_LEFT) && (player->shared.x > game.camera_x))
    d080:	66 ff       	sbrs	r22, 6
    d082:	11 c0       	rjmp	.+34     	; 0xd0a6 <update_player+0x28c>
    d084:	f7 01       	movw	r30, r14
    d086:	40 81       	ld	r20, Z
    d088:	51 81       	ldd	r21, Z+1	; 0x01
    d08a:	20 91 b1 0d 	lds	r18, 0x0DB1
    d08e:	30 91 b2 0d 	lds	r19, 0x0DB2
    d092:	24 17       	cp	r18, r20
    d094:	35 07       	cpc	r19, r21
    d096:	38 f4       	brcc	.+14     	; 0xd0a6 <update_player+0x28c>
		{
			player->shared.vx = -RUN_SPEED;
    d098:	24 ec       	ldi	r18, 0xC4	; 196
    d09a:	25 83       	std	Z+5, r18	; 0x05
			player->direction = D_LEFT;
    d09c:	12 86       	std	Z+10, r1	; 0x0a
			LBMapSprite(slot, LBGetNextFrame(&player->jump), SPRITE_FLIP_X);
    d09e:	0e 94 0d 4f 	call	0x9e1a	; 0x9e1a <LBGetNextFrame>
    d0a2:	41 e0       	ldi	r20, 0x01	; 1
    d0a4:	0d c0       	rjmp	.+26     	; 0xd0c0 <update_player+0x2a6>
		}
		else
		{
			player->shared.vx = 0;
    d0a6:	f7 01       	movw	r30, r14
    d0a8:	15 82       	std	Z+5, r1	; 0x05
			LBMapSprite(slot, LBGetNextFrame(&player->jump), extendedSprites[slot].flags);
    d0aa:	24 e0       	ldi	r18, 0x04	; 4
    d0ac:	12 9f       	mul	r17, r18
    d0ae:	f0 01       	movw	r30, r0
    d0b0:	11 24       	eor	r1, r1
    d0b2:	e0 54       	subi	r30, 0x40	; 64
    d0b4:	f0 4f       	sbci	r31, 0xF0	; 240
    d0b6:	43 81       	ldd	r20, Z+3	; 0x03
    d0b8:	49 83       	std	Y+1, r20	; 0x01
    d0ba:	0e 94 0d 4f 	call	0x9e1a	; 0x9e1a <LBGetNextFrame>
    d0be:	49 81       	ldd	r20, Y+1	; 0x01
    d0c0:	bc 01       	movw	r22, r24
    d0c2:	81 2f       	mov	r24, r17
    d0c4:	0e 94 73 50 	call	0xa0e6	; 0xa0e6 <LBMapSprite>
		}
		
		if (player->shared.gravity == 0)
    d0c8:	f7 01       	movw	r30, r14
    d0ca:	86 81       	ldd	r24, Z+6	; 0x06
    d0cc:	81 11       	cpse	r24, r1
    d0ce:	65 c0       	rjmp	.+202    	; 0xd19a <update_player+0x380>
		{
			player->flags = IDLE;
    d0d0:	88 e0       	ldi	r24, 0x08	; 8
    d0d2:	80 87       	std	Z+8, r24	; 0x08
    d0d4:	62 c0       	rjmp	.+196    	; 0xd19a <update_player+0x380>
		}
	}
	else if (player->flags & PRONE)
    d0d6:	02 ff       	sbrs	r16, 2
    d0d8:	60 c0       	rjmp	.+192    	; 0xd19a <update_player+0x380>
	{
		if (player->controls.pressed & BTN_UP)
    d0da:	f7 01       	movw	r30, r14
    d0dc:	e3 59       	subi	r30, 0x93	; 147
    d0de:	ff 4f       	sbci	r31, 0xFF	; 255
    d0e0:	80 81       	ld	r24, Z
    d0e2:	84 ff       	sbrs	r24, 4
    d0e4:	16 c0       	rjmp	.+44     	; 0xd112 <update_player+0x2f8>
		{
			player->flags = IDLE;	
    d0e6:	88 e0       	ldi	r24, 0x08	; 8
    d0e8:	f7 01       	movw	r30, r14
    d0ea:	80 87       	std	Z+8, r24	; 0x08
			player->shared.y -= 16;
    d0ec:	82 81       	ldd	r24, Z+2	; 0x02
    d0ee:	93 81       	ldd	r25, Z+3	; 0x03
    d0f0:	40 97       	sbiw	r24, 0x10	; 16
    d0f2:	93 83       	std	Z+3, r25	; 0x03
    d0f4:	82 83       	std	Z+2, r24	; 0x02
			if(player->direction == D_RIGHT)
    d0f6:	82 85       	ldd	r24, Z+10	; 0x0a
    d0f8:	81 30       	cpi	r24, 0x01	; 1
    d0fa:	29 f4       	brne	.+10     	; 0xd106 <update_player+0x2ec>
			{
				player->shared.x += 8;
    d0fc:	80 81       	ld	r24, Z
    d0fe:	91 81       	ldd	r25, Z+1	; 0x01
    d100:	08 96       	adiw	r24, 0x08	; 8
    d102:	91 83       	std	Z+1, r25	; 0x01
    d104:	80 83       	st	Z, r24
			}
			player->width = 2;
    d106:	82 e0       	ldi	r24, 0x02	; 2
    d108:	f7 01       	movw	r30, r14
    d10a:	83 87       	std	Z+11, r24	; 0x0b
			player->height = 3;
    d10c:	83 e0       	ldi	r24, 0x03	; 3
    d10e:	84 87       	std	Z+12, r24	; 0x0c
    d110:	44 c0       	rjmp	.+136    	; 0xd19a <update_player+0x380>
		}
		else if (player->controls.pressed & BTN_B)
    d112:	80 ff       	sbrs	r24, 0
    d114:	28 c0       	rjmp	.+80     	; 0xd166 <update_player+0x34c>
		{
			player->flags = JUMPING;
    d116:	81 e0       	ldi	r24, 0x01	; 1
    d118:	f7 01       	movw	r30, r14
    d11a:	80 87       	std	Z+8, r24	; 0x08
			player->shared.y -= 16;
    d11c:	82 81       	ldd	r24, Z+2	; 0x02
    d11e:	93 81       	ldd	r25, Z+3	; 0x03
    d120:	40 97       	sbiw	r24, 0x10	; 16
    d122:	93 83       	std	Z+3, r25	; 0x03
    d124:	82 83       	std	Z+2, r24	; 0x02
			if(player->direction == D_RIGHT)
    d126:	82 85       	ldd	r24, Z+10	; 0x0a
    d128:	81 30       	cpi	r24, 0x01	; 1
    d12a:	29 f4       	brne	.+10     	; 0xd136 <update_player+0x31c>
			{
				player->shared.x += 8;
    d12c:	80 81       	ld	r24, Z
    d12e:	91 81       	ldd	r25, Z+1	; 0x01
    d130:	08 96       	adiw	r24, 0x08	; 8
    d132:	91 83       	std	Z+1, r25	; 0x01
    d134:	80 83       	st	Z, r24
			}
			player->shared.vy = -JUMP_SPEED;
    d136:	81 e8       	ldi	r24, 0x81	; 129
    d138:	f7 01       	movw	r30, r14
    d13a:	84 83       	std	Z+4, r24	; 0x04
			player->shared.gravity = GRAVITY;
    d13c:	88 ec       	ldi	r24, 0xC8	; 200
    d13e:	86 83       	std	Z+6, r24	; 0x06
			player->width = 2;
    d140:	82 e0       	ldi	r24, 0x02	; 2
    d142:	83 87       	std	Z+11, r24	; 0x0b
			player->height = 3;
    d144:	83 e0       	ldi	r24, 0x03	; 3
    d146:	84 87       	std	Z+12, r24	; 0x0c
			LBMapSprite(slot, LBGetNextFrame(&player->jump), extendedSprites[slot].flags);
    d148:	24 e0       	ldi	r18, 0x04	; 4
    d14a:	12 9f       	mul	r17, r18
    d14c:	f0 01       	movw	r30, r0
    d14e:	11 24       	eor	r1, r1
    d150:	e0 54       	subi	r30, 0x40	; 64
    d152:	f0 4f       	sbci	r31, 0xF0	; 240
    d154:	43 81       	ldd	r20, Z+3	; 0x03
    d156:	c7 01       	movw	r24, r14
    d158:	8b 5a       	subi	r24, 0xAB	; 171
    d15a:	9f 4f       	sbci	r25, 0xFF	; 255
    d15c:	49 83       	std	Y+1, r20	; 0x01
    d15e:	0e 94 0d 4f 	call	0x9e1a	; 0x9e1a <LBGetNextFrame>
    d162:	49 81       	ldd	r20, Y+1	; 0x01
    d164:	16 c0       	rjmp	.+44     	; 0xd192 <update_player+0x378>
		}
		else if (player->controls.pressed & BTN_LEFT)
    d166:	86 ff       	sbrs	r24, 6
    d168:	09 c0       	rjmp	.+18     	; 0xd17c <update_player+0x362>
		{
			player->direction = D_LEFT;
    d16a:	f7 01       	movw	r30, r14
    d16c:	12 86       	std	Z+10, r1	; 0x0a
			LBMapSprite(slot, LBGetNextFrame(&player->prone), SPRITE_FLIP_X);
    d16e:	c7 01       	movw	r24, r14
    d170:	83 5a       	subi	r24, 0xA3	; 163
    d172:	9f 4f       	sbci	r25, 0xFF	; 255
    d174:	0e 94 0d 4f 	call	0x9e1a	; 0x9e1a <LBGetNextFrame>
    d178:	41 e0       	ldi	r20, 0x01	; 1
    d17a:	0b c0       	rjmp	.+22     	; 0xd192 <update_player+0x378>
		}
		else if (player->controls.pressed & BTN_RIGHT)
    d17c:	87 ff       	sbrs	r24, 7
    d17e:	0d c0       	rjmp	.+26     	; 0xd19a <update_player+0x380>
		{
			player->direction = D_RIGHT;
    d180:	81 e0       	ldi	r24, 0x01	; 1
    d182:	f7 01       	movw	r30, r14
    d184:	82 87       	std	Z+10, r24	; 0x0a
			LBMapSprite(slot, LBGetNextFrame(&player->prone), 0);
    d186:	c7 01       	movw	r24, r14
    d188:	83 5a       	subi	r24, 0xA3	; 163
    d18a:	9f 4f       	sbci	r25, 0xFF	; 255
    d18c:	0e 94 0d 4f 	call	0x9e1a	; 0x9e1a <LBGetNextFrame>
    d190:	40 e0       	ldi	r20, 0x00	; 0
    d192:	bc 01       	movw	r22, r24
    d194:	81 2f       	mov	r24, r17
    d196:	0e 94 73 50 	call	0xa0e6	; 0xa0e6 <LBMapSprite>
		}
	}
	return 1;
}
    d19a:	81 e0       	ldi	r24, 0x01	; 1
    d19c:	0f 90       	pop	r0
    d19e:	df 91       	pop	r29
    d1a0:	cf 91       	pop	r28
    d1a2:	1f 91       	pop	r17
    d1a4:	0f 91       	pop	r16
    d1a6:	ff 90       	pop	r15
    d1a8:	ef 90       	pop	r14
    d1aa:	08 95       	ret

0000d1ac <update_level>:
		}
	}
}

u8 update_level()
{
    d1ac:	cf 92       	push	r12
    d1ae:	df 92       	push	r13
    d1b0:	ef 92       	push	r14
    d1b2:	ff 92       	push	r15
    d1b4:	0f 93       	push	r16
    d1b6:	cf 93       	push	r28
    d1b8:	df 93       	push	r29
	u8 ship_x = game.player.shared.x - game.camera_x;
    d1ba:	e0 90 cf 0d 	lds	r14, 0x0DCF
    d1be:	f0 90 d0 0d 	lds	r15, 0x0DD0
    d1c2:	c0 90 b1 0d 	lds	r12, 0x0DB1
    d1c6:	d0 90 b2 0d 	lds	r13, 0x0DB2
	u8 ship_y = 0;
	char ship_increment = 3;
	
	game.frame_counter++;
    d1ca:	80 91 cb 0d 	lds	r24, 0x0DCB
    d1ce:	8f 5f       	subi	r24, 0xFF	; 255
	if (game.frame_counter == 60)
    d1d0:	8c 33       	cpi	r24, 0x3C	; 60
    d1d2:	19 f0       	breq	.+6      	; 0xd1da <update_level+0x2e>
{
	u8 ship_x = game.player.shared.x - game.camera_x;
	u8 ship_y = 0;
	char ship_increment = 3;
	
	game.frame_counter++;
    d1d4:	80 93 cb 0d 	sts	0x0DCB, r24
    d1d8:	0f c0       	rjmp	.+30     	; 0xd1f8 <update_level+0x4c>
	if (game.frame_counter == 60)
	{
		game.frame_counter = 0;
    d1da:	10 92 cb 0d 	sts	0x0DCB, r1
		if (game.time != 65535) game.time++;
    d1de:	80 91 b7 0d 	lds	r24, 0x0DB7
    d1e2:	90 91 b8 0d 	lds	r25, 0x0DB8
    d1e6:	8f 3f       	cpi	r24, 0xFF	; 255
    d1e8:	2f ef       	ldi	r18, 0xFF	; 255
    d1ea:	92 07       	cpc	r25, r18
    d1ec:	29 f0       	breq	.+10     	; 0xd1f8 <update_level+0x4c>
    d1ee:	01 96       	adiw	r24, 0x01	; 1
    d1f0:	90 93 b8 0d 	sts	0x0DB8, r25
    d1f4:	80 93 b7 0d 	sts	0x0DB7, r24
	}
	
	if (is_space())
    d1f8:	0e 94 37 51 	call	0xa26e	; 0xa26e <is_space>
    d1fc:	88 23       	and	r24, r24
    d1fe:	19 f1       	breq	.+70     	; 0xd246 <update_level+0x9a>
	{
		if (game.camera_x/8 + CAMERA_WIDTH < game.level_width)
    d200:	96 01       	movw	r18, r12
    d202:	93 e0       	ldi	r25, 0x03	; 3
    d204:	36 95       	lsr	r19
    d206:	27 95       	ror	r18
    d208:	9a 95       	dec	r25
    d20a:	e1 f7       	brne	.-8      	; 0xd204 <update_level+0x58>
    d20c:	24 5e       	subi	r18, 0xE4	; 228
    d20e:	3f 4f       	sbci	r19, 0xFF	; 255
    d210:	80 91 c0 0d 	lds	r24, 0x0DC0
    d214:	90 e0       	ldi	r25, 0x00	; 0
    d216:	28 17       	cp	r18, r24
    d218:	39 07       	cpc	r19, r25
    d21a:	18 f4       	brcc	.+6      	; 0xd222 <update_level+0x76>
		{
			move_camera_x();
    d21c:	0e 94 a7 57 	call	0xaf4e	; 0xaf4e <move_camera_x>
    d220:	2a c0       	rjmp	.+84     	; 0xd276 <update_level+0xca>
    d222:	80 91 d7 0d 	lds	r24, 0x0DD7
		}
		else if (game.player.shared.x >= game.camera_x+CAMERA_WIDTH*8)
    d226:	96 01       	movw	r18, r12
    d228:	20 52       	subi	r18, 0x20	; 32
    d22a:	3f 4f       	sbci	r19, 0xFF	; 255
    d22c:	e2 16       	cp	r14, r18
    d22e:	f3 06       	cpc	r15, r19
    d230:	30 f0       	brcs	.+12     	; 0xd23e <update_level+0x92>
		{
			game.level_ended = 1;
    d232:	91 e0       	ldi	r25, 0x01	; 1
    d234:	90 93 ce 0d 	sts	0x0DCE, r25
			game.player.flags ^= END_OF_SPACE;
    d238:	90 e2       	ldi	r25, 0x20	; 32
    d23a:	89 27       	eor	r24, r25
    d23c:	01 c0       	rjmp	.+2      	; 0xd240 <update_level+0x94>
		} else {
			game.player.flags |= END_OF_SPACE;
    d23e:	80 62       	ori	r24, 0x20	; 32
    d240:	80 93 d7 0d 	sts	0x0DD7, r24
    d244:	18 c0       	rjmp	.+48     	; 0xd276 <update_level+0xca>
		}
	}
	else if (game.player.shared.vx > 0 &&
    d246:	80 91 d4 0d 	lds	r24, 0x0DD4
    d24a:	18 16       	cp	r1, r24
    d24c:	a4 f4       	brge	.+40     	; 0xd276 <update_level+0xca>
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
    d24e:	c7 01       	movw	r24, r14
    d250:	8c 19       	sub	r24, r12
    d252:	9d 09       	sbc	r25, r13
			game.player.flags ^= END_OF_SPACE;
		} else {
			game.player.flags |= END_OF_SPACE;
		}
	}
	else if (game.player.shared.vx > 0 &&
    d254:	80 37       	cpi	r24, 0x70	; 112
    d256:	91 05       	cpc	r25, r1
    d258:	70 f0       	brcs	.+28     	; 0xd276 <update_level+0xca>
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
		(game.camera_x/8 + CAMERA_WIDTH < game.level_width))
    d25a:	96 01       	movw	r18, r12
    d25c:	83 e0       	ldi	r24, 0x03	; 3
    d25e:	36 95       	lsr	r19
    d260:	27 95       	ror	r18
    d262:	8a 95       	dec	r24
    d264:	e1 f7       	brne	.-8      	; 0xd25e <update_level+0xb2>
    d266:	24 5e       	subi	r18, 0xE4	; 228
    d268:	3f 4f       	sbci	r19, 0xFF	; 255
    d26a:	80 91 c0 0d 	lds	r24, 0x0DC0
    d26e:	90 e0       	ldi	r25, 0x00	; 0
		} else {
			game.player.flags |= END_OF_SPACE;
		}
	}
	else if (game.player.shared.vx > 0 &&
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
    d270:	28 17       	cp	r18, r24
    d272:	39 07       	cpc	r19, r25
    d274:	98 f2       	brcs	.-90     	; 0xd21c <update_level+0x70>
	{
		move_camera_x();
	}
	
	// Score
	LBPrintByte(9, VRAM_TILES_V-3, game.player.shield ,true);
    d276:	21 e0       	ldi	r18, 0x01	; 1
    d278:	40 91 dd 0d 	lds	r20, 0x0DDD
    d27c:	6d e1       	ldi	r22, 0x1D	; 29
    d27e:	89 e0       	ldi	r24, 0x09	; 9
    d280:	0e 94 ba 4f 	call	0x9f74	; 0x9f74 <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-3, game.time ,true);
    d284:	40 91 b7 0d 	lds	r20, 0x0DB7
    d288:	50 91 b8 0d 	lds	r21, 0x0DB8
    d28c:	21 e0       	ldi	r18, 0x01	; 1
    d28e:	6d e1       	ldi	r22, 0x1D	; 29
    d290:	8b e1       	ldi	r24, 0x1B	; 27
    d292:	0e 94 eb 4f 	call	0x9fd6	; 0x9fd6 <LBPrintInt>
	LBPrintByte(9, VRAM_TILES_V-2, game.lives ,true);
    d296:	21 e0       	ldi	r18, 0x01	; 1
    d298:	40 91 c4 0d 	lds	r20, 0x0DC4
    d29c:	6e e1       	ldi	r22, 0x1E	; 30
    d29e:	89 e0       	ldi	r24, 0x09	; 9
    d2a0:	0e 94 ba 4f 	call	0x9f74	; 0x9f74 <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-2, game.level_score ,true);
    d2a4:	40 91 b5 0d 	lds	r20, 0x0DB5
    d2a8:	50 91 b6 0d 	lds	r21, 0x0DB6
    d2ac:	21 e0       	ldi	r18, 0x01	; 1
    d2ae:	6e e1       	ldi	r22, 0x1E	; 30
    d2b0:	8b e1       	ldi	r24, 0x1B	; 27
    d2b2:	0e 94 eb 4f 	call	0x9fd6	; 0x9fd6 <LBPrintInt>
	LBPrintInt(27, VRAM_TILES_V-1, game.score ,true);
    d2b6:	40 91 b3 0d 	lds	r20, 0x0DB3
    d2ba:	50 91 b4 0d 	lds	r21, 0x0DB4
    d2be:	21 e0       	ldi	r18, 0x01	; 1
    d2c0:	6f e1       	ldi	r22, 0x1F	; 31
    d2c2:	8b e1       	ldi	r24, 0x1B	; 27
    d2c4:	0e 94 eb 4f 	call	0x9fd6	; 0x9fd6 <LBPrintInt>
	
	if (game.level_ended && !is_space() && game.player.flags & (IDLE|RUNNING|PRONE))
    d2c8:	80 91 ce 0d 	lds	r24, 0x0DCE
    d2cc:	88 23       	and	r24, r24
    d2ce:	09 f4       	brne	.+2      	; 0xd2d2 <update_level+0x126>
    d2d0:	86 c0       	rjmp	.+268    	; 0xd3de <update_level+0x232>
    d2d2:	0e 94 37 51 	call	0xa26e	; 0xa26e <is_space>
    d2d6:	81 11       	cpse	r24, r1
    d2d8:	6c c0       	rjmp	.+216    	; 0xd3b2 <update_level+0x206>
    d2da:	80 91 d7 0d 	lds	r24, 0x0DD7
    d2de:	8e 70       	andi	r24, 0x0E	; 14
    d2e0:	09 f4       	brne	.+2      	; 0xd2e4 <update_level+0x138>
    d2e2:	7d c0       	rjmp	.+250    	; 0xd3de <update_level+0x232>
	{
		LBMapSprite(PLAYER_SLOT, map_hero_idle, 0);
    d2e4:	40 e0       	ldi	r20, 0x00	; 0
    d2e6:	65 eb       	ldi	r22, 0xB5	; 181
    d2e8:	76 e3       	ldi	r23, 0x36	; 54
    d2ea:	80 e0       	ldi	r24, 0x00	; 0
    d2ec:	0e 94 73 50 	call	0xa0e6	; 0xa0e6 <LBMapSprite>
		if (game.player.flags & PRONE) {
    d2f0:	80 91 d7 0d 	lds	r24, 0x0DD7
    d2f4:	82 ff       	sbrs	r24, 2
    d2f6:	1a c0       	rjmp	.+52     	; 0xd32c <update_level+0x180>
			game.player.shared.y -= 16;
    d2f8:	40 91 d1 0d 	lds	r20, 0x0DD1
    d2fc:	50 91 d2 0d 	lds	r21, 0x0DD2
    d300:	40 51       	subi	r20, 0x10	; 16
    d302:	51 09       	sbc	r21, r1
    d304:	50 93 d2 0d 	sts	0x0DD2, r21
    d308:	40 93 d1 0d 	sts	0x0DD1, r20
			game.player.width = 2;
    d30c:	82 e0       	ldi	r24, 0x02	; 2
    d30e:	80 93 da 0d 	sts	0x0DDA, r24
			game.player.height = 3;
    d312:	83 e0       	ldi	r24, 0x03	; 3
    d314:	80 93 db 0d 	sts	0x0DDB, r24
			LBMoveSprite(PLAYER_SLOT, game.player.shared.x-game.camera_x, game.player.shared.y, game.player.width, game.player.height);
    d318:	60 91 cf 0d 	lds	r22, 0x0DCF
    d31c:	80 91 b1 0d 	lds	r24, 0x0DB1
    d320:	68 1b       	sub	r22, r24
    d322:	03 e0       	ldi	r16, 0x03	; 3
    d324:	22 e0       	ldi	r18, 0x02	; 2
    d326:	80 e0       	ldi	r24, 0x00	; 0
    d328:	0e 94 c5 50 	call	0xa18a	; 0xa18a <LBMoveSprite>
		}
		clear_sprites(ENEMY_SLOT, 11);
    d32c:	6b e0       	ldi	r22, 0x0B	; 11
    d32e:	89 e0       	ldi	r24, 0x09	; 9
    d330:	0e 94 21 60 	call	0xc042	; 0xc042 <clear_sprites>
		LBRotateSprites();
    d334:	0e 94 03 51 	call	0xa206	; 0xa206 <LBRotateSprites>
		map_ship();
    d338:	0e 94 c0 57 	call	0xaf80	; 0xaf80 <map_ship>

u8 update_level()
{
	u8 ship_x = game.player.shared.x - game.camera_x;
	u8 ship_y = 0;
	char ship_increment = 3;
    d33c:	d3 e0       	ldi	r29, 0x03	; 3
}

u8 update_level()
{
	u8 ship_x = game.player.shared.x - game.camera_x;
	u8 ship_y = 0;
    d33e:	c0 e0       	ldi	r28, 0x00	; 0
	}
}

u8 update_level()
{
	u8 ship_x = game.player.shared.x - game.camera_x;
    d340:	ec 18       	sub	r14, r12
		clear_sprites(ENEMY_SLOT, 11);
		LBRotateSprites();
		map_ship();
		while (1)
		{
			WaitVsync(1);
    d342:	81 e0       	ldi	r24, 0x01	; 1
    d344:	90 e0       	ldi	r25, 0x00	; 0
    d346:	0e 94 45 4e 	call	0x9c8a	; 0x9c8a <WaitVsync>
			if (ship_y >= get_hero_spawn_y(game.current_level_index)*8)
    d34a:	8c 2f       	mov	r24, r28
    d34c:	90 e0       	ldi	r25, 0x00	; 0
    d34e:	88 3a       	cpi	r24, 0xA8	; 168
    d350:	91 05       	cpc	r25, r1
    d352:	3c f0       	brlt	.+14     	; 0xd362 <update_level+0x1b6>
			{
				clear_sprites(0, 6);
    d354:	66 e0       	ldi	r22, 0x06	; 6
    d356:	80 e0       	ldi	r24, 0x00	; 0
    d358:	0e 94 21 60 	call	0xc042	; 0xc042 <clear_sprites>
				LBRotateSprites();
    d35c:	0e 94 03 51 	call	0xa206	; 0xa206 <LBRotateSprites>
				ship_increment = -3;
    d360:	dd ef       	ldi	r29, 0xFD	; 253
			}
			LBMapSprite(PLAYER_SHOT_SLOT, LBGetNextFrame(&game.player.run), 0);
    d362:	8c e1       	ldi	r24, 0x1C	; 28
    d364:	9e e0       	ldi	r25, 0x0E	; 14
    d366:	0e 94 0d 4f 	call	0x9e1a	; 0x9e1a <LBGetNextFrame>
    d36a:	40 e0       	ldi	r20, 0x00	; 0
    d36c:	bc 01       	movw	r22, r24
    d36e:	86 e0       	ldi	r24, 0x06	; 6
    d370:	0e 94 73 50 	call	0xa0e6	; 0xa0e6 <LBMapSprite>
			LBMoveSprite(PLAYER_SHOT_SLOT, ship_x, ship_y, 4, 2);
    d374:	02 e0       	ldi	r16, 0x02	; 2
    d376:	24 e0       	ldi	r18, 0x04	; 4
    d378:	4c 2f       	mov	r20, r28
    d37a:	6e 2d       	mov	r22, r14
    d37c:	86 e0       	ldi	r24, 0x06	; 6
    d37e:	0e 94 c5 50 	call	0xa18a	; 0xa18a <LBMoveSprite>
			ship_y += ship_increment;
    d382:	cd 0f       	add	r28, r29
			if (ship_y == 0)
    d384:	99 f4       	brne	.+38     	; 0xd3ac <update_level+0x200>
			{
				clear_sprites(6, 8);
    d386:	68 e0       	ldi	r22, 0x08	; 8
    d388:	86 e0       	ldi	r24, 0x06	; 6
    d38a:	0e 94 21 60 	call	0xc042	; 0xc042 <clear_sprites>
				LBRotateSprites();
    d38e:	0e 94 03 51 	call	0xa206	; 0xa206 <LBRotateSprites>
				tally_score((char*) strLevelClear, 100);
    d392:	64 e6       	ldi	r22, 0x64	; 100
    d394:	70 e0       	ldi	r23, 0x00	; 0
    d396:	8d ec       	ldi	r24, 0xCD	; 205
    d398:	9a e0       	ldi	r25, 0x0A	; 10
    d39a:	0e 94 8e 65 	call	0xcb1c	; 0xcb1c <tally_score>
				planet_transition(game.current_level_index+1, -1, 26, 3, 0);
    d39e:	80 91 c6 0d 	lds	r24, 0x0DC6
    d3a2:	00 e0       	ldi	r16, 0x00	; 0
    d3a4:	23 e0       	ldi	r18, 0x03	; 3
    d3a6:	4a e1       	ldi	r20, 0x1A	; 26
    d3a8:	6f ef       	ldi	r22, 0xFF	; 255
    d3aa:	15 c0       	rjmp	.+42     	; 0xd3d6 <update_level+0x22a>
				break;
			}
			LBRotateSprites();
    d3ac:	0e 94 03 51 	call	0xa206	; 0xa206 <LBRotateSprites>
		}
    d3b0:	c8 cf       	rjmp	.-112    	; 0xd342 <update_level+0x196>
	}
	else if (game.level_ended && is_space())
	{
		tally_score((char*) strLevelClear, 100);
    d3b2:	64 e6       	ldi	r22, 0x64	; 100
    d3b4:	70 e0       	ldi	r23, 0x00	; 0
    d3b6:	8d ec       	ldi	r24, 0xCD	; 205
    d3b8:	9a e0       	ldi	r25, 0x0A	; 10
    d3ba:	0e 94 8e 65 	call	0xcb1c	; 0xcb1c <tally_score>
		if (game.current_level_index == 9) {
    d3be:	80 91 c6 0d 	lds	r24, 0x0DC6
    d3c2:	89 30       	cpi	r24, 0x09	; 9
    d3c4:	21 f4       	brne	.+8      	; 0xd3ce <update_level+0x222>
			exit_game();
    d3c6:	0e 94 99 64 	call	0xc932	; 0xc932 <exit_game>
			return 1;
    d3ca:	81 e0       	ldi	r24, 0x01	; 1
    d3cc:	08 c0       	rjmp	.+16     	; 0xd3de <update_level+0x232>
		} else {
			planet_transition(game.current_level_index+1, 1, 28, -3, 199);
    d3ce:	07 ec       	ldi	r16, 0xC7	; 199
    d3d0:	2d ef       	ldi	r18, 0xFD	; 253
    d3d2:	4c e1       	ldi	r20, 0x1C	; 28
    d3d4:	61 e0       	ldi	r22, 0x01	; 1
    d3d6:	8f 5f       	subi	r24, 0xFF	; 255
    d3d8:	0e 94 65 62 	call	0xc4ca	; 0xc4ca <planet_transition>
		}
	}
	return 0;
    d3dc:	80 e0       	ldi	r24, 0x00	; 0
	
}
    d3de:	df 91       	pop	r29
    d3e0:	cf 91       	pop	r28
    d3e2:	0f 91       	pop	r16
    d3e4:	ff 90       	pop	r15
    d3e6:	ef 90       	pop	r14
    d3e8:	df 90       	pop	r13
    d3ea:	cf 90       	pop	r12
    d3ec:	08 95       	ret

0000d3ee <update_pause>:
		}
	}
}

void update_pause()
{
    d3ee:	ef 92       	push	r14
    d3f0:	ff 92       	push	r15
    d3f2:	0f 93       	push	r16
    d3f4:	1f 93       	push	r17
    d3f6:	cf 93       	push	r28
    d3f8:	df 93       	push	r29
	u8 x = Screen.scrollX / 8;
    d3fa:	c0 91 b2 0c 	lds	r28, 0x0CB2
	u8 y = Screen.scrollY / 8;
    d3fe:	00 91 b3 0c 	lds	r16, 0x0CB3
	
	if (game.player.controls.pressed & BTN_START)
    d402:	80 91 3c 0e 	lds	r24, 0x0E3C
    d406:	83 ff       	sbrs	r24, 3
    d408:	63 c0       	rjmp	.+198    	; 0xd4d0 <update_pause+0xe2>
}

void update_pause()
{
	u8 x = Screen.scrollX / 8;
	u8 y = Screen.scrollY / 8;
    d40a:	06 95       	lsr	r16
    d40c:	06 95       	lsr	r16
    d40e:	06 95       	lsr	r16
	
	if (game.player.controls.pressed & BTN_START)
	{
		DrawMap2((x+8)%32, (y+6)%30, map_canvas);
    d410:	10 e0       	ldi	r17, 0x00	; 0
	}
}

void update_pause()
{
	u8 x = Screen.scrollX / 8;
    d412:	c6 95       	lsr	r28
    d414:	c6 95       	lsr	r28
    d416:	c6 95       	lsr	r28
	u8 y = Screen.scrollY / 8;
	
	if (game.player.controls.pressed & BTN_START)
	{
		DrawMap2((x+8)%32, (y+6)%30, map_canvas);
    d418:	d0 e0       	ldi	r29, 0x00	; 0
    d41a:	c8 01       	movw	r24, r16
    d41c:	06 96       	adiw	r24, 0x06	; 6
    d41e:	2e e1       	ldi	r18, 0x1E	; 30
    d420:	e2 2e       	mov	r14, r18
    d422:	f1 2c       	mov	r15, r1
    d424:	b7 01       	movw	r22, r14
    d426:	0e 94 e0 6b 	call	0xd7c0	; 0xd7c0 <__divmodhi4>
    d42a:	9e 01       	movw	r18, r28
    d42c:	28 5f       	subi	r18, 0xF8	; 248
    d42e:	3f 4f       	sbci	r19, 0xFF	; 255
    d430:	47 e6       	ldi	r20, 0x67	; 103
    d432:	5f e5       	ldi	r21, 0x5F	; 95
    d434:	68 2f       	mov	r22, r24
    d436:	82 2f       	mov	r24, r18
    d438:	8f 71       	andi	r24, 0x1F	; 31
    d43a:	0e 94 dc 4d 	call	0x9bb8	; 0x9bb8 <DrawMap>
		LBPrint((x+13)%32, (y+9)%30, (char*) strPaused);
    d43e:	c8 01       	movw	r24, r16
    d440:	09 96       	adiw	r24, 0x09	; 9
    d442:	b7 01       	movw	r22, r14
    d444:	0e 94 e0 6b 	call	0xd7c0	; 0xd7c0 <__divmodhi4>
    d448:	9e 01       	movw	r18, r28
    d44a:	23 5f       	subi	r18, 0xF3	; 243
    d44c:	3f 4f       	sbci	r19, 0xFF	; 255
    d44e:	49 ed       	ldi	r20, 0xD9	; 217
    d450:	5a e0       	ldi	r21, 0x0A	; 10
    d452:	68 2f       	mov	r22, r24
    d454:	82 2f       	mov	r24, r18
    d456:	8f 71       	andi	r24, 0x1F	; 31
    d458:	0e 94 9e 4f 	call	0x9f3c	; 0x9f3c <LBPrint>
		LBPrint((x+10)%32, (y+12)%30, (char*) strExitGame);
    d45c:	c8 01       	movw	r24, r16
    d45e:	0c 96       	adiw	r24, 0x0c	; 12
    d460:	b7 01       	movw	r22, r14
    d462:	0e 94 e0 6b 	call	0xd7c0	; 0xd7c0 <__divmodhi4>
    d466:	2a 96       	adiw	r28, 0x0a	; 10
    d468:	4f ed       	ldi	r20, 0xDF	; 223
    d46a:	5a e0       	ldi	r21, 0x0A	; 10
    d46c:	68 2f       	mov	r22, r24
    d46e:	8c 2f       	mov	r24, r28
    d470:	8f 71       	andi	r24, 0x1F	; 31
    d472:	0e 94 9e 4f 	call	0x9f3c	; 0x9f3c <LBPrint>
		hide_sprites(0, MAX_EXTENDED_SPRITES);
    d476:	64 e1       	ldi	r22, 0x14	; 20
    d478:	80 e0       	ldi	r24, 0x00	; 0
    d47a:	0e 94 61 61 	call	0xc2c2	; 0xc2c2 <hide_sprites>
		LBRotateSprites();
    d47e:	0e 94 03 51 	call	0xa206	; 0xa206 <LBRotateSprites>
		while (1)
		{
			WaitVsync(1);
    d482:	81 e0       	ldi	r24, 0x01	; 1
    d484:	90 e0       	ldi	r25, 0x00	; 0
    d486:	0e 94 45 4e 	call	0x9c8a	; 0x9c8a <WaitVsync>
			LBGetJoyPadState(&game.player.controls, 0);
    d48a:	60 e0       	ldi	r22, 0x00	; 0
    d48c:	8c e3       	ldi	r24, 0x3C	; 60
    d48e:	9e e0       	ldi	r25, 0x0E	; 14
    d490:	0e 94 33 4f 	call	0x9e66	; 0x9e66 <LBGetJoyPadState>
			if (game.player.controls.pressed & BTN_START)
    d494:	80 91 3c 0e 	lds	r24, 0x0E3C
    d498:	90 91 3d 0e 	lds	r25, 0x0E3D
    d49c:	83 ff       	sbrs	r24, 3
    d49e:	08 c0       	rjmp	.+16     	; 0xd4b0 <update_pause+0xc2>
				exit_game();
				break;
			}
		}
	}
}
    d4a0:	df 91       	pop	r29
    d4a2:	cf 91       	pop	r28
    d4a4:	1f 91       	pop	r17
    d4a6:	0f 91       	pop	r16
    d4a8:	ff 90       	pop	r15
    d4aa:	ef 90       	pop	r14
		{
			WaitVsync(1);
			LBGetJoyPadState(&game.player.controls, 0);
			if (game.player.controls.pressed & BTN_START)
			{
				render_camera_view();
    d4ac:	0c 94 17 56 	jmp	0xac2e	; 0xac2e <render_camera_view>
				break;
			}
			else if (game.player.controls.pressed & BTN_X)
    d4b0:	91 ff       	sbrs	r25, 1
    d4b2:	e7 cf       	rjmp	.-50     	; 0xd482 <update_pause+0x94>
			{
				tally_score((char*)strGameOver, 0);
    d4b4:	60 e0       	ldi	r22, 0x00	; 0
    d4b6:	70 e0       	ldi	r23, 0x00	; 0
    d4b8:	8d eb       	ldi	r24, 0xBD	; 189
    d4ba:	9a e0       	ldi	r25, 0x0A	; 10
    d4bc:	0e 94 8e 65 	call	0xcb1c	; 0xcb1c <tally_score>
				exit_game();
				break;
			}
		}
	}
}
    d4c0:	df 91       	pop	r29
    d4c2:	cf 91       	pop	r28
    d4c4:	1f 91       	pop	r17
    d4c6:	0f 91       	pop	r16
    d4c8:	ff 90       	pop	r15
    d4ca:	ef 90       	pop	r14
				break;
			}
			else if (game.player.controls.pressed & BTN_X)
			{
				tally_score((char*)strGameOver, 0);
				exit_game();
    d4cc:	0c 94 99 64 	jmp	0xc932	; 0xc932 <exit_game>
				break;
			}
		}
	}
}
    d4d0:	df 91       	pop	r29
    d4d2:	cf 91       	pop	r28
    d4d4:	1f 91       	pop	r17
    d4d6:	0f 91       	pop	r16
    d4d8:	ff 90       	pop	r15
    d4da:	ef 90       	pop	r14
    d4dc:	08 95       	ret

0000d4de <challenge>:
	game.time = 0;
	LBWaitSeconds(2);
}

void challenge()
{
    d4de:	cf 92       	push	r12
    d4e0:	df 92       	push	r13
    d4e2:	ff 92       	push	r15
    d4e4:	0f 93       	push	r16
    d4e6:	1f 93       	push	r17
    d4e8:	cf 93       	push	r28
    d4ea:	df 93       	push	r29
	u8 x = Screen.scrollX / 8;
	u8 y = Screen.scrollY / 8;
	u16 counter = 0;
	char* challenge_pointer = (char*)strChallenge + (game.current_level_index/2)*CHALLENGE_LENGTH;
    d4ec:	20 91 c6 0d 	lds	r18, 0x0DC6
    d4f0:	f2 2e       	mov	r15, r18
    d4f2:	f6 94       	lsr	r15
}

void challenge()
{
	u8 x = Screen.scrollX / 8;
	u8 y = Screen.scrollY / 8;
    d4f4:	ef ea       	ldi	r30, 0xAF	; 175
    d4f6:	fc e0       	ldi	r31, 0x0C	; 12
    d4f8:	84 81       	ldd	r24, Z+4	; 0x04
    d4fa:	86 95       	lsr	r24
    d4fc:	86 95       	lsr	r24
    d4fe:	86 95       	lsr	r24
	u16 counter = 0;
	char* challenge_pointer = (char*)strChallenge + (game.current_level_index/2)*CHALLENGE_LENGTH;
	DrawMap2((x+7)%32, (y+6)%30, map_dialog);
    d500:	08 2f       	mov	r16, r24
    d502:	10 e0       	ldi	r17, 0x00	; 0
	LBWaitSeconds(2);
}

void challenge()
{
	u8 x = Screen.scrollX / 8;
    d504:	c3 81       	ldd	r28, Z+3	; 0x03
    d506:	c6 95       	lsr	r28
    d508:	c6 95       	lsr	r28
    d50a:	c6 95       	lsr	r28
	u8 y = Screen.scrollY / 8;
	u16 counter = 0;
	char* challenge_pointer = (char*)strChallenge + (game.current_level_index/2)*CHALLENGE_LENGTH;
	DrawMap2((x+7)%32, (y+6)%30, map_dialog);
    d50c:	d0 e0       	ldi	r29, 0x00	; 0
    d50e:	c8 01       	movw	r24, r16
    d510:	06 96       	adiw	r24, 0x06	; 6
    d512:	2e e1       	ldi	r18, 0x1E	; 30
    d514:	c2 2e       	mov	r12, r18
    d516:	d1 2c       	mov	r13, r1
    d518:	b6 01       	movw	r22, r12
    d51a:	0e 94 e0 6b 	call	0xd7c0	; 0xd7c0 <__divmodhi4>
    d51e:	9e 01       	movw	r18, r28
    d520:	29 5f       	subi	r18, 0xF9	; 249
    d522:	3f 4f       	sbci	r19, 0xFF	; 255
    d524:	45 e0       	ldi	r20, 0x05	; 5
    d526:	5f e5       	ldi	r21, 0x5F	; 95
    d528:	68 2f       	mov	r22, r24
    d52a:	82 2f       	mov	r24, r18
    d52c:	8f 71       	andi	r24, 0x1F	; 31
    d52e:	0e 94 dc 4d 	call	0x9bb8	; 0x9bb8 <DrawMap>
	stream_text_anywhere((const char*)challenge_pointer, (x+8)%32, (y+9)%30);
    d532:	c8 01       	movw	r24, r16
    d534:	09 96       	adiw	r24, 0x09	; 9
    d536:	b6 01       	movw	r22, r12
    d538:	0e 94 e0 6b 	call	0xd7c0	; 0xd7c0 <__divmodhi4>
    d53c:	be 01       	movw	r22, r28
    d53e:	68 5f       	subi	r22, 0xF8	; 248
    d540:	7f 4f       	sbci	r23, 0xFF	; 255
    d542:	6f 71       	andi	r22, 0x1F	; 31
    d544:	77 27       	eor	r23, r23
void challenge()
{
	u8 x = Screen.scrollX / 8;
	u8 y = Screen.scrollY / 8;
	u16 counter = 0;
	char* challenge_pointer = (char*)strChallenge + (game.current_level_index/2)*CHALLENGE_LENGTH;
    d546:	93 e2       	ldi	r25, 0x23	; 35
    d548:	f9 9e       	mul	r15, r25
    d54a:	90 01       	movw	r18, r0
    d54c:	11 24       	eor	r1, r1
	DrawMap2((x+7)%32, (y+6)%30, map_dialog);
	stream_text_anywhere((const char*)challenge_pointer, (x+8)%32, (y+9)%30);
    d54e:	48 2f       	mov	r20, r24
    d550:	c9 01       	movw	r24, r18
    d552:	8d 5b       	subi	r24, 0xBD	; 189
    d554:	96 4f       	sbci	r25, 0xF6	; 246
    d556:	0e 94 be 61 	call	0xc37c	; 0xc37c <stream_text_anywhere>
	LBWaitSeconds(3);
    d55a:	83 e0       	ldi	r24, 0x03	; 3
    d55c:	0e 94 64 50 	call	0xa0c8	; 0xa0c8 <LBWaitSeconds>
	game.boss.active = 1;
    d560:	81 e0       	ldi	r24, 0x01	; 1
    d562:	80 93 50 0e 	sts	0x0E50, r24
	render_camera_view();
}
    d566:	df 91       	pop	r29
    d568:	cf 91       	pop	r28
    d56a:	1f 91       	pop	r17
    d56c:	0f 91       	pop	r16
    d56e:	ff 90       	pop	r15
    d570:	df 90       	pop	r13
    d572:	cf 90       	pop	r12
	char* challenge_pointer = (char*)strChallenge + (game.current_level_index/2)*CHALLENGE_LENGTH;
	DrawMap2((x+7)%32, (y+6)%30, map_dialog);
	stream_text_anywhere((const char*)challenge_pointer, (x+8)%32, (y+9)%30);
	LBWaitSeconds(3);
	game.boss.active = 1;
	render_camera_view();
    d574:	0c 94 17 56 	jmp	0xac2e	; 0xac2e <render_camera_view>

0000d578 <update_player_ai>:
}

void update_player_ai(Player* player) 
{
    d578:	cf 93       	push	r28
    d57a:	df 93       	push	r29
    d57c:	ec 01       	movw	r28, r24
	 static s8 last_shield_value;
	 
	 if (player->ai_flags == AI_NOT_READY) {
    d57e:	89 85       	ldd	r24, Y+9	; 0x09
    d580:	81 11       	cpse	r24, r1
    d582:	0a c0       	rjmp	.+20     	; 0xd598 <update_player_ai+0x20>
		 player->controls.held = BTN_LEFT;
    d584:	80 e4       	ldi	r24, 0x40	; 64
    d586:	90 e0       	ldi	r25, 0x00	; 0
    d588:	fe 01       	movw	r30, r28
    d58a:	ef 58       	subi	r30, 0x8F	; 143
    d58c:	ff 4f       	sbci	r31, 0xFF	; 255
    d58e:	91 83       	std	Z+1, r25	; 0x01
    d590:	80 83       	st	Z, r24
		 player->ai_flags = AI_READY;
    d592:	81 e0       	ldi	r24, 0x01	; 1
    d594:	89 87       	std	Y+9, r24	; 0x09
    d596:	55 c0       	rjmp	.+170    	; 0xd642 <update_player_ai+0xca>
	 }
	 else if (player->ai_flags & AI_READY) {
    d598:	80 ff       	sbrs	r24, 0
    d59a:	1f c0       	rjmp	.+62     	; 0xd5da <update_player_ai+0x62>
void LBResetJoyPadState(JoyPadState* p)
/*
 * Get the current joy pad button state for index controller
 */
{
	p->held = 0;
    d59c:	fe 01       	movw	r30, r28
    d59e:	e3 59       	subi	r30, 0x93	; 147
    d5a0:	ff 4f       	sbci	r31, 0xFF	; 255
    d5a2:	15 82       	std	Z+5, r1	; 0x05
    d5a4:	14 82       	std	Z+4, r1	; 0x04
	p->pressed = 0;
    d5a6:	11 82       	std	Z+1, r1	; 0x01
    d5a8:	10 82       	st	Z, r1
	p->released = 0;
    d5aa:	13 82       	std	Z+3, r1	; 0x03
    d5ac:	12 82       	std	Z+2, r1	; 0x02
	p->held_cycles = 0;
    d5ae:	16 82       	std	Z+6, r1	; 0x06
		 LBResetJoyPadState(&player->controls);
		 if (game.camera_x/8 + CAMERA_WIDTH >= game.level_width) {
    d5b0:	80 91 b1 0d 	lds	r24, 0x0DB1
    d5b4:	90 91 b2 0d 	lds	r25, 0x0DB2
    d5b8:	23 e0       	ldi	r18, 0x03	; 3
    d5ba:	96 95       	lsr	r25
    d5bc:	87 95       	ror	r24
    d5be:	2a 95       	dec	r18
    d5c0:	e1 f7       	brne	.-8      	; 0xd5ba <update_player_ai+0x42>
    d5c2:	4c 96       	adiw	r24, 0x1c	; 28
    d5c4:	20 91 c0 0d 	lds	r18, 0x0DC0
    d5c8:	30 e0       	ldi	r19, 0x00	; 0
    d5ca:	82 17       	cp	r24, r18
    d5cc:	93 07       	cpc	r25, r19
    d5ce:	c8 f1       	brcs	.+114    	; 0xd642 <update_player_ai+0xca>
			 challenge();
    d5d0:	0e 94 6f 6a 	call	0xd4de	; 0xd4de <challenge>
			 player->ai_flags = AI_WALKING;
    d5d4:	82 e0       	ldi	r24, 0x02	; 2
    d5d6:	89 87       	std	Y+9, r24	; 0x09
    d5d8:	2d c0       	rjmp	.+90     	; 0xd634 <update_player_ai+0xbc>
			 player->controls.held = BTN_LEFT;
		 }
	 } else if (player->ai_flags & AI_WALKING) {
    d5da:	81 ff       	sbrs	r24, 1
    d5dc:	32 c0       	rjmp	.+100    	; 0xd642 <update_player_ai+0xca>
		 player->controls.pressed = 0;
    d5de:	fe 01       	movw	r30, r28
    d5e0:	e3 59       	subi	r30, 0x93	; 147
    d5e2:	ff 4f       	sbci	r31, 0xFF	; 255
    d5e4:	11 82       	std	Z+1, r1	; 0x01
    d5e6:	10 82       	st	Z, r1
		 if (game.frame_counter % 15 == 0) {
    d5e8:	80 91 cb 0d 	lds	r24, 0x0DCB
    d5ec:	6f e0       	ldi	r22, 0x0F	; 15
    d5ee:	0e 94 b2 6b 	call	0xd764	; 0xd764 <__udivmodqi4>
    d5f2:	91 11       	cpse	r25, r1
    d5f4:	04 c0       	rjmp	.+8      	; 0xd5fe <update_player_ai+0x86>
			 player->controls.pressed = BTN_A;
    d5f6:	80 e0       	ldi	r24, 0x00	; 0
    d5f8:	91 e0       	ldi	r25, 0x01	; 1
    d5fa:	91 83       	std	Z+1, r25	; 0x01
    d5fc:	80 83       	st	Z, r24
		 }
		 if (last_shield_value > player->shield) {
    d5fe:	90 91 f4 0c 	lds	r25, 0x0CF4
    d602:	8e 85       	ldd	r24, Y+14	; 0x0e
    d604:	89 17       	cp	r24, r25
    d606:	2c f4       	brge	.+10     	; 0xd612 <update_player_ai+0x9a>
			 player->controls.pressed |= BTN_B;
    d608:	80 81       	ld	r24, Z
    d60a:	91 81       	ldd	r25, Z+1	; 0x01
    d60c:	81 60       	ori	r24, 0x01	; 1
    d60e:	91 83       	std	Z+1, r25	; 0x01
    d610:	80 83       	st	Z, r24
		 }
		 if (player->shared.x <= game.camera_x) {
    d612:	28 81       	ld	r18, Y
    d614:	39 81       	ldd	r19, Y+1	; 0x01
    d616:	80 91 b1 0d 	lds	r24, 0x0DB1
    d61a:	90 91 b2 0d 	lds	r25, 0x0DB2
    d61e:	82 17       	cp	r24, r18
    d620:	93 07       	cpc	r25, r19
    d622:	18 f0       	brcs	.+6      	; 0xd62a <update_player_ai+0xb2>
			 player->controls.held = BTN_RIGHT;
    d624:	80 e8       	ldi	r24, 0x80	; 128
    d626:	90 e0       	ldi	r25, 0x00	; 0
    d628:	07 c0       	rjmp	.+14     	; 0xd638 <update_player_ai+0xc0>
		 } else if (player->shared.x >= game.camera_x+(CAMERA_WIDTH-2)*8) {
    d62a:	80 53       	subi	r24, 0x30	; 48
    d62c:	9f 4f       	sbci	r25, 0xFF	; 255
    d62e:	28 17       	cp	r18, r24
    d630:	39 07       	cpc	r19, r25
    d632:	38 f0       	brcs	.+14     	; 0xd642 <update_player_ai+0xca>
			 player->controls.held = BTN_LEFT;
    d634:	80 e4       	ldi	r24, 0x40	; 64
    d636:	90 e0       	ldi	r25, 0x00	; 0
    d638:	fe 01       	movw	r30, r28
    d63a:	ef 58       	subi	r30, 0x8F	; 143
    d63c:	ff 4f       	sbci	r31, 0xFF	; 255
    d63e:	91 83       	std	Z+1, r25	; 0x01
    d640:	80 83       	st	Z, r24
		 }
	 }
	 last_shield_value = player->shield;
    d642:	8e 85       	ldd	r24, Y+14	; 0x0e
    d644:	80 93 f4 0c 	sts	0x0CF4, r24
}
    d648:	df 91       	pop	r29
    d64a:	cf 91       	pop	r28
    d64c:	08 95       	ret

0000d64e <main>:
#endif

int main()
{
	// Initialize
	GetPrngNumber(GetTrueRandomSeed());
    d64e:	0e 94 24 40 	call	0x8048	; 0x8048 <GetTrueRandomSeed>
    d652:	0e 94 a4 41 	call	0x8348	; 0x8348 <GetPrngNumber>
	InitMusicPlayer(my_patches);
    d656:	85 ec       	ldi	r24, 0xC5	; 197
    d658:	9c e1       	ldi	r25, 0x1C	; 28
    d65a:	0e 94 7e 42 	call	0x84fc	; 0x84fc <InitMusicPlayer>
	ClearVram();
    d65e:	0e 94 ac 3f 	call	0x7f58	; 0x7f58 <ClearVram>
	SetMasterVolume(0x05);
    d662:	85 e0       	ldi	r24, 0x05	; 5
    d664:	0e 94 32 46 	call	0x8c64	; 0x8c64 <SetMasterVolume>
	SetTileTable(tiles_data);
    d668:	84 ee       	ldi	r24, 0xE4	; 228
    d66a:	96 e3       	ldi	r25, 0x36	; 54
    d66c:	0e 94 c7 3f 	call	0x7f8e	; 0x7f8e <SetTileTable>
	SetSpritesTileTable(sprites_data);
    d670:	84 e4       	ldi	r24, 0x44	; 68
    d672:	9e e1       	ldi	r25, 0x1E	; 30
    d674:	0e 94 a7 3f 	call	0x7f4e	; 0x7f4e <SetSpritesTileTable>
	}
}

void LBSetFontTilesMap(char* tiles_map)
{
	font_tiles_map = tiles_map;
    d678:	84 ea       	ldi	r24, 0xA4	; 164
    d67a:	9e e5       	ldi	r25, 0x5E	; 94
    d67c:	90 93 84 0d 	sts	0x0D84, r25
    d680:	80 93 83 0d 	sts	0x0D83, r24
	LBSetFontTilesMap((char*) map_font);
	init_default_high_scores();
    d684:	0e 94 3b 51 	call	0xa276	; 0xa276 <init_default_high_scores>
#if DEBUG_MODE
	prepare_debugging();
#else
	load_splash();
    d688:	0e 94 53 63 	call	0xc6a6	; 0xc6a6 <load_splash>
#endif
	while (1)
	{
		WaitVsync(1);
    d68c:	81 e0       	ldi	r24, 0x01	; 1
    d68e:	90 e0       	ldi	r25, 0x00	; 0
    d690:	0e 94 45 4e 	call	0x9c8a	; 0x9c8a <WaitVsync>
		LBGetJoyPadState(&game.player.controls, 0);
    d694:	60 e0       	ldi	r22, 0x00	; 0
    d696:	8c e3       	ldi	r24, 0x3C	; 60
    d698:	9e e0       	ldi	r25, 0x0E	; 14
    d69a:	0e 94 33 4f 	call	0x9e66	; 0x9e66 <LBGetJoyPadState>
		if (game.current_screen == LEVEL)
    d69e:	80 91 c5 0d 	lds	r24, 0x0DC5
    d6a2:	82 30       	cpi	r24, 0x02	; 2
    d6a4:	09 f0       	breq	.+2      	; 0xd6a8 <main+0x5a>
    d6a6:	52 c0       	rjmp	.+164    	; 0xd74c <main+0xfe>
		{
			if (update_level()) continue;
    d6a8:	0e 94 d6 68 	call	0xd1ac	; 0xd1ac <update_level>
    d6ac:	81 11       	cpse	r24, r1
    d6ae:	ee cf       	rjmp	.-36     	; 0xd68c <main+0x3e>
			if (update_player(&game.player, PLAYER_SLOT))
    d6b0:	60 e0       	ldi	r22, 0x00	; 0
    d6b2:	8f ec       	ldi	r24, 0xCF	; 207
    d6b4:	9d e0       	ldi	r25, 0x0D	; 13
    d6b6:	0e 94 0d 67 	call	0xce1a	; 0xce1a <update_player>
    d6ba:	88 23       	and	r24, r24
    d6bc:	e9 f0       	breq	.+58     	; 0xd6f8 <main+0xaa>
			{
				update_shot(&game.player, PLAYER_SHOT_SLOT);
    d6be:	66 e0       	ldi	r22, 0x06	; 6
    d6c0:	8f ec       	ldi	r24, 0xCF	; 207
    d6c2:	9d e0       	ldi	r25, 0x0D	; 13
    d6c4:	0e 94 69 58 	call	0xb0d2	; 0xb0d2 <update_shot>
				update_enemies();
    d6c8:	0e 94 f2 5d 	call	0xbbe4	; 0xbbe4 <update_enemies>
				update_enemy_shots();
    d6cc:	0e 94 45 5e 	call	0xbc8a	; 0xbc8a <update_enemy_shots>
				animate_enemies();
    d6d0:	0e 94 bf 5e 	call	0xbd7e	; 0xbd7e <animate_enemies>
				animate_enemy_shots();
    d6d4:	0e 94 83 5f 	call	0xbf06	; 0xbf06 <animate_enemy_shots>
				animate_player(&game.player, &game.boss, PLAYER_SLOT);
    d6d8:	40 e0       	ldi	r20, 0x00	; 0
    d6da:	63 e4       	ldi	r22, 0x43	; 67
    d6dc:	7e e0       	ldi	r23, 0x0E	; 14
    d6de:	8f ec       	ldi	r24, 0xCF	; 207
    d6e0:	9d e0       	ldi	r25, 0x0D	; 13
    d6e2:	0e 94 51 5d 	call	0xbaa2	; 0xbaa2 <animate_player>
				animate_shot(&game.player, &game.boss, PLAYER_SHOT_SLOT);
    d6e6:	46 e0       	ldi	r20, 0x06	; 6
    d6e8:	63 e4       	ldi	r22, 0x43	; 67
    d6ea:	7e e0       	ldi	r23, 0x0E	; 14
    d6ec:	8f ec       	ldi	r24, 0xCF	; 207
    d6ee:	9d e0       	ldi	r25, 0x0D	; 13
    d6f0:	0e 94 18 5b 	call	0xb630	; 0xb630 <animate_shot>
				update_pause();
    d6f4:	0e 94 f7 69 	call	0xd3ee	; 0xd3ee <update_pause>
			}
			if (!is_space() && (game.camera_x >= BOSS_UPDATE_THRESHOLD) && update_player(&game.boss, BOSS_SLOT))
    d6f8:	0e 94 37 51 	call	0xa26e	; 0xa26e <is_space>
    d6fc:	81 11       	cpse	r24, r1
    d6fe:	2f c0       	rjmp	.+94     	; 0xd75e <main+0x110>
    d700:	80 91 b1 0d 	lds	r24, 0x0DB1
    d704:	90 91 b2 0d 	lds	r25, 0x0DB2
    d708:	88 3f       	cpi	r24, 0xF8	; 248
    d70a:	96 40       	sbci	r25, 0x06	; 6
    d70c:	40 f1       	brcs	.+80     	; 0xd75e <main+0x110>
    d70e:	69 e0       	ldi	r22, 0x09	; 9
    d710:	83 e4       	ldi	r24, 0x43	; 67
    d712:	9e e0       	ldi	r25, 0x0E	; 14
    d714:	0e 94 0d 67 	call	0xce1a	; 0xce1a <update_player>
    d718:	88 23       	and	r24, r24
    d71a:	09 f1       	breq	.+66     	; 0xd75e <main+0x110>
			{
				update_shot(&game.boss, BOSS_SHOT_SLOT);
    d71c:	6f e0       	ldi	r22, 0x0F	; 15
    d71e:	83 e4       	ldi	r24, 0x43	; 67
    d720:	9e e0       	ldi	r25, 0x0E	; 14
    d722:	0e 94 69 58 	call	0xb0d2	; 0xb0d2 <update_shot>
				animate_player(&game.boss, &game.player, BOSS_SLOT);
    d726:	49 e0       	ldi	r20, 0x09	; 9
    d728:	6f ec       	ldi	r22, 0xCF	; 207
    d72a:	7d e0       	ldi	r23, 0x0D	; 13
    d72c:	83 e4       	ldi	r24, 0x43	; 67
    d72e:	9e e0       	ldi	r25, 0x0E	; 14
    d730:	0e 94 51 5d 	call	0xbaa2	; 0xbaa2 <animate_player>
				animate_shot(&game.boss, &game.player, BOSS_SHOT_SLOT);
    d734:	4f e0       	ldi	r20, 0x0F	; 15
    d736:	6f ec       	ldi	r22, 0xCF	; 207
    d738:	7d e0       	ldi	r23, 0x0D	; 13
    d73a:	83 e4       	ldi	r24, 0x43	; 67
    d73c:	9e e0       	ldi	r25, 0x0E	; 14
    d73e:	0e 94 18 5b 	call	0xb630	; 0xb630 <animate_shot>
				update_player_ai(&game.boss);
    d742:	83 e4       	ldi	r24, 0x43	; 67
    d744:	9e e0       	ldi	r25, 0x0E	; 14
    d746:	0e 94 bc 6a 	call	0xd578	; 0xd578 <update_player_ai>
    d74a:	09 c0       	rjmp	.+18     	; 0xd75e <main+0x110>
			}
		}
		else if (game.current_screen == SPLASH)
    d74c:	81 11       	cpse	r24, r1
    d74e:	03 c0       	rjmp	.+6      	; 0xd756 <main+0x108>
		{
			update_splash();
    d750:	0e 94 a9 64 	call	0xc952	; 0xc952 <update_splash>
    d754:	04 c0       	rjmp	.+8      	; 0xd75e <main+0x110>
			
		}
		else if (game.current_screen == HIGH_SCORES)
    d756:	81 30       	cpi	r24, 0x01	; 1
    d758:	11 f4       	brne	.+4      	; 0xd75e <main+0x110>
		{
			update_high_scores();
    d75a:	0e 94 f0 64 	call	0xc9e0	; 0xc9e0 <update_high_scores>
			
		}
		LBRotateSprites();
    d75e:	0e 94 03 51 	call	0xa206	; 0xa206 <LBRotateSprites>
    d762:	94 cf       	rjmp	.-216    	; 0xd68c <main+0x3e>

0000d764 <__udivmodqi4>:
    d764:	99 1b       	sub	r25, r25
    d766:	79 e0       	ldi	r23, 0x09	; 9
    d768:	04 c0       	rjmp	.+8      	; 0xd772 <__udivmodqi4_ep>

0000d76a <__udivmodqi4_loop>:
    d76a:	99 1f       	adc	r25, r25
    d76c:	96 17       	cp	r25, r22
    d76e:	08 f0       	brcs	.+2      	; 0xd772 <__udivmodqi4_ep>
    d770:	96 1b       	sub	r25, r22

0000d772 <__udivmodqi4_ep>:
    d772:	88 1f       	adc	r24, r24
    d774:	7a 95       	dec	r23
    d776:	c9 f7       	brne	.-14     	; 0xd76a <__udivmodqi4_loop>
    d778:	80 95       	com	r24
    d77a:	08 95       	ret

0000d77c <__divmodqi4>:
    d77c:	87 fb       	bst	r24, 7
    d77e:	08 2e       	mov	r0, r24
    d780:	06 26       	eor	r0, r22
    d782:	87 fd       	sbrc	r24, 7
    d784:	81 95       	neg	r24
    d786:	67 fd       	sbrc	r22, 7
    d788:	61 95       	neg	r22
    d78a:	0e 94 b2 6b 	call	0xd764	; 0xd764 <__udivmodqi4>
    d78e:	0e f4       	brtc	.+2      	; 0xd792 <__divmodqi4_1>
    d790:	91 95       	neg	r25

0000d792 <__divmodqi4_1>:
    d792:	07 fc       	sbrc	r0, 7
    d794:	81 95       	neg	r24

0000d796 <__divmodqi4_exit>:
    d796:	08 95       	ret

0000d798 <__udivmodhi4>:
    d798:	aa 1b       	sub	r26, r26
    d79a:	bb 1b       	sub	r27, r27
    d79c:	51 e1       	ldi	r21, 0x11	; 17
    d79e:	07 c0       	rjmp	.+14     	; 0xd7ae <__udivmodhi4_ep>

0000d7a0 <__udivmodhi4_loop>:
    d7a0:	aa 1f       	adc	r26, r26
    d7a2:	bb 1f       	adc	r27, r27
    d7a4:	a6 17       	cp	r26, r22
    d7a6:	b7 07       	cpc	r27, r23
    d7a8:	10 f0       	brcs	.+4      	; 0xd7ae <__udivmodhi4_ep>
    d7aa:	a6 1b       	sub	r26, r22
    d7ac:	b7 0b       	sbc	r27, r23

0000d7ae <__udivmodhi4_ep>:
    d7ae:	88 1f       	adc	r24, r24
    d7b0:	99 1f       	adc	r25, r25
    d7b2:	5a 95       	dec	r21
    d7b4:	a9 f7       	brne	.-22     	; 0xd7a0 <__udivmodhi4_loop>
    d7b6:	80 95       	com	r24
    d7b8:	90 95       	com	r25
    d7ba:	bc 01       	movw	r22, r24
    d7bc:	cd 01       	movw	r24, r26
    d7be:	08 95       	ret

0000d7c0 <__divmodhi4>:
    d7c0:	97 fb       	bst	r25, 7
    d7c2:	07 2e       	mov	r0, r23
    d7c4:	16 f4       	brtc	.+4      	; 0xd7ca <__divmodhi4+0xa>
    d7c6:	00 94       	com	r0
    d7c8:	07 d0       	rcall	.+14     	; 0xd7d8 <__divmodhi4_neg1>
    d7ca:	77 fd       	sbrc	r23, 7
    d7cc:	09 d0       	rcall	.+18     	; 0xd7e0 <__divmodhi4_neg2>
    d7ce:	0e 94 cc 6b 	call	0xd798	; 0xd798 <__udivmodhi4>
    d7d2:	07 fc       	sbrc	r0, 7
    d7d4:	05 d0       	rcall	.+10     	; 0xd7e0 <__divmodhi4_neg2>
    d7d6:	3e f4       	brtc	.+14     	; 0xd7e6 <__divmodhi4_exit>

0000d7d8 <__divmodhi4_neg1>:
    d7d8:	90 95       	com	r25
    d7da:	81 95       	neg	r24
    d7dc:	9f 4f       	sbci	r25, 0xFF	; 255
    d7de:	08 95       	ret

0000d7e0 <__divmodhi4_neg2>:
    d7e0:	70 95       	com	r23
    d7e2:	61 95       	neg	r22
    d7e4:	7f 4f       	sbci	r23, 0xFF	; 255

0000d7e6 <__divmodhi4_exit>:
    d7e6:	08 95       	ret

0000d7e8 <__tablejump2__>:
    d7e8:	ee 0f       	add	r30, r30
    d7ea:	ff 1f       	adc	r31, r31
    d7ec:	05 90       	lpm	r0, Z+
    d7ee:	f4 91       	lpm	r31, Z
    d7f0:	e0 2d       	mov	r30, r0
    d7f2:	09 94       	ijmp

0000d7f4 <__subsf3>:
    d7f4:	50 58       	subi	r21, 0x80	; 128

0000d7f6 <__addsf3>:
    d7f6:	bb 27       	eor	r27, r27
    d7f8:	aa 27       	eor	r26, r26
    d7fa:	0e d0       	rcall	.+28     	; 0xd818 <__addsf3x>
    d7fc:	e5 c0       	rjmp	.+458    	; 0xd9c8 <__fp_round>
    d7fe:	d6 d0       	rcall	.+428    	; 0xd9ac <__fp_pscA>
    d800:	30 f0       	brcs	.+12     	; 0xd80e <__addsf3+0x18>
    d802:	db d0       	rcall	.+438    	; 0xd9ba <__fp_pscB>
    d804:	20 f0       	brcs	.+8      	; 0xd80e <__addsf3+0x18>
    d806:	31 f4       	brne	.+12     	; 0xd814 <__addsf3+0x1e>
    d808:	9f 3f       	cpi	r25, 0xFF	; 255
    d80a:	11 f4       	brne	.+4      	; 0xd810 <__addsf3+0x1a>
    d80c:	1e f4       	brtc	.+6      	; 0xd814 <__addsf3+0x1e>
    d80e:	cb c0       	rjmp	.+406    	; 0xd9a6 <__fp_nan>
    d810:	0e f4       	brtc	.+2      	; 0xd814 <__addsf3+0x1e>
    d812:	e0 95       	com	r30
    d814:	e7 fb       	bst	r30, 7
    d816:	c1 c0       	rjmp	.+386    	; 0xd99a <__fp_inf>

0000d818 <__addsf3x>:
    d818:	e9 2f       	mov	r30, r25
    d81a:	e7 d0       	rcall	.+462    	; 0xd9ea <__fp_split3>
    d81c:	80 f3       	brcs	.-32     	; 0xd7fe <__addsf3+0x8>
    d81e:	ba 17       	cp	r27, r26
    d820:	62 07       	cpc	r22, r18
    d822:	73 07       	cpc	r23, r19
    d824:	84 07       	cpc	r24, r20
    d826:	95 07       	cpc	r25, r21
    d828:	18 f0       	brcs	.+6      	; 0xd830 <__addsf3x+0x18>
    d82a:	71 f4       	brne	.+28     	; 0xd848 <__addsf3x+0x30>
    d82c:	9e f5       	brtc	.+102    	; 0xd894 <__addsf3x+0x7c>
    d82e:	ff c0       	rjmp	.+510    	; 0xda2e <__fp_zero>
    d830:	0e f4       	brtc	.+2      	; 0xd834 <__addsf3x+0x1c>
    d832:	e0 95       	com	r30
    d834:	0b 2e       	mov	r0, r27
    d836:	ba 2f       	mov	r27, r26
    d838:	a0 2d       	mov	r26, r0
    d83a:	0b 01       	movw	r0, r22
    d83c:	b9 01       	movw	r22, r18
    d83e:	90 01       	movw	r18, r0
    d840:	0c 01       	movw	r0, r24
    d842:	ca 01       	movw	r24, r20
    d844:	a0 01       	movw	r20, r0
    d846:	11 24       	eor	r1, r1
    d848:	ff 27       	eor	r31, r31
    d84a:	59 1b       	sub	r21, r25
    d84c:	99 f0       	breq	.+38     	; 0xd874 <__addsf3x+0x5c>
    d84e:	59 3f       	cpi	r21, 0xF9	; 249
    d850:	50 f4       	brcc	.+20     	; 0xd866 <__addsf3x+0x4e>
    d852:	50 3e       	cpi	r21, 0xE0	; 224
    d854:	68 f1       	brcs	.+90     	; 0xd8b0 <__addsf3x+0x98>
    d856:	1a 16       	cp	r1, r26
    d858:	f0 40       	sbci	r31, 0x00	; 0
    d85a:	a2 2f       	mov	r26, r18
    d85c:	23 2f       	mov	r18, r19
    d85e:	34 2f       	mov	r19, r20
    d860:	44 27       	eor	r20, r20
    d862:	58 5f       	subi	r21, 0xF8	; 248
    d864:	f3 cf       	rjmp	.-26     	; 0xd84c <__addsf3x+0x34>
    d866:	46 95       	lsr	r20
    d868:	37 95       	ror	r19
    d86a:	27 95       	ror	r18
    d86c:	a7 95       	ror	r26
    d86e:	f0 40       	sbci	r31, 0x00	; 0
    d870:	53 95       	inc	r21
    d872:	c9 f7       	brne	.-14     	; 0xd866 <__addsf3x+0x4e>
    d874:	7e f4       	brtc	.+30     	; 0xd894 <__addsf3x+0x7c>
    d876:	1f 16       	cp	r1, r31
    d878:	ba 0b       	sbc	r27, r26
    d87a:	62 0b       	sbc	r22, r18
    d87c:	73 0b       	sbc	r23, r19
    d87e:	84 0b       	sbc	r24, r20
    d880:	ba f0       	brmi	.+46     	; 0xd8b0 <__addsf3x+0x98>
    d882:	91 50       	subi	r25, 0x01	; 1
    d884:	a1 f0       	breq	.+40     	; 0xd8ae <__addsf3x+0x96>
    d886:	ff 0f       	add	r31, r31
    d888:	bb 1f       	adc	r27, r27
    d88a:	66 1f       	adc	r22, r22
    d88c:	77 1f       	adc	r23, r23
    d88e:	88 1f       	adc	r24, r24
    d890:	c2 f7       	brpl	.-16     	; 0xd882 <__addsf3x+0x6a>
    d892:	0e c0       	rjmp	.+28     	; 0xd8b0 <__addsf3x+0x98>
    d894:	ba 0f       	add	r27, r26
    d896:	62 1f       	adc	r22, r18
    d898:	73 1f       	adc	r23, r19
    d89a:	84 1f       	adc	r24, r20
    d89c:	48 f4       	brcc	.+18     	; 0xd8b0 <__addsf3x+0x98>
    d89e:	87 95       	ror	r24
    d8a0:	77 95       	ror	r23
    d8a2:	67 95       	ror	r22
    d8a4:	b7 95       	ror	r27
    d8a6:	f7 95       	ror	r31
    d8a8:	9e 3f       	cpi	r25, 0xFE	; 254
    d8aa:	08 f0       	brcs	.+2      	; 0xd8ae <__addsf3x+0x96>
    d8ac:	b3 cf       	rjmp	.-154    	; 0xd814 <__addsf3+0x1e>
    d8ae:	93 95       	inc	r25
    d8b0:	88 0f       	add	r24, r24
    d8b2:	08 f0       	brcs	.+2      	; 0xd8b6 <__addsf3x+0x9e>
    d8b4:	99 27       	eor	r25, r25
    d8b6:	ee 0f       	add	r30, r30
    d8b8:	97 95       	ror	r25
    d8ba:	87 95       	ror	r24
    d8bc:	08 95       	ret

0000d8be <__fixsfsi>:
    d8be:	04 d0       	rcall	.+8      	; 0xd8c8 <__fixunssfsi>
    d8c0:	68 94       	set
    d8c2:	b1 11       	cpse	r27, r1
    d8c4:	b5 c0       	rjmp	.+362    	; 0xda30 <__fp_szero>
    d8c6:	08 95       	ret

0000d8c8 <__fixunssfsi>:
    d8c8:	98 d0       	rcall	.+304    	; 0xd9fa <__fp_splitA>
    d8ca:	88 f0       	brcs	.+34     	; 0xd8ee <__fixunssfsi+0x26>
    d8cc:	9f 57       	subi	r25, 0x7F	; 127
    d8ce:	90 f0       	brcs	.+36     	; 0xd8f4 <__fixunssfsi+0x2c>
    d8d0:	b9 2f       	mov	r27, r25
    d8d2:	99 27       	eor	r25, r25
    d8d4:	b7 51       	subi	r27, 0x17	; 23
    d8d6:	a0 f0       	brcs	.+40     	; 0xd900 <__fixunssfsi+0x38>
    d8d8:	d1 f0       	breq	.+52     	; 0xd90e <__fixunssfsi+0x46>
    d8da:	66 0f       	add	r22, r22
    d8dc:	77 1f       	adc	r23, r23
    d8de:	88 1f       	adc	r24, r24
    d8e0:	99 1f       	adc	r25, r25
    d8e2:	1a f0       	brmi	.+6      	; 0xd8ea <__fixunssfsi+0x22>
    d8e4:	ba 95       	dec	r27
    d8e6:	c9 f7       	brne	.-14     	; 0xd8da <__fixunssfsi+0x12>
    d8e8:	12 c0       	rjmp	.+36     	; 0xd90e <__fixunssfsi+0x46>
    d8ea:	b1 30       	cpi	r27, 0x01	; 1
    d8ec:	81 f0       	breq	.+32     	; 0xd90e <__fixunssfsi+0x46>
    d8ee:	9f d0       	rcall	.+318    	; 0xda2e <__fp_zero>
    d8f0:	b1 e0       	ldi	r27, 0x01	; 1
    d8f2:	08 95       	ret
    d8f4:	9c c0       	rjmp	.+312    	; 0xda2e <__fp_zero>
    d8f6:	67 2f       	mov	r22, r23
    d8f8:	78 2f       	mov	r23, r24
    d8fa:	88 27       	eor	r24, r24
    d8fc:	b8 5f       	subi	r27, 0xF8	; 248
    d8fe:	39 f0       	breq	.+14     	; 0xd90e <__fixunssfsi+0x46>
    d900:	b9 3f       	cpi	r27, 0xF9	; 249
    d902:	cc f3       	brlt	.-14     	; 0xd8f6 <__fixunssfsi+0x2e>
    d904:	86 95       	lsr	r24
    d906:	77 95       	ror	r23
    d908:	67 95       	ror	r22
    d90a:	b3 95       	inc	r27
    d90c:	d9 f7       	brne	.-10     	; 0xd904 <__fixunssfsi+0x3c>
    d90e:	3e f4       	brtc	.+14     	; 0xd91e <__fixunssfsi+0x56>
    d910:	90 95       	com	r25
    d912:	80 95       	com	r24
    d914:	70 95       	com	r23
    d916:	61 95       	neg	r22
    d918:	7f 4f       	sbci	r23, 0xFF	; 255
    d91a:	8f 4f       	sbci	r24, 0xFF	; 255
    d91c:	9f 4f       	sbci	r25, 0xFF	; 255
    d91e:	08 95       	ret

0000d920 <__floatunsisf>:
    d920:	e8 94       	clt
    d922:	09 c0       	rjmp	.+18     	; 0xd936 <__floatsisf+0x12>

0000d924 <__floatsisf>:
    d924:	97 fb       	bst	r25, 7
    d926:	3e f4       	brtc	.+14     	; 0xd936 <__floatsisf+0x12>
    d928:	90 95       	com	r25
    d92a:	80 95       	com	r24
    d92c:	70 95       	com	r23
    d92e:	61 95       	neg	r22
    d930:	7f 4f       	sbci	r23, 0xFF	; 255
    d932:	8f 4f       	sbci	r24, 0xFF	; 255
    d934:	9f 4f       	sbci	r25, 0xFF	; 255
    d936:	99 23       	and	r25, r25
    d938:	a9 f0       	breq	.+42     	; 0xd964 <__floatsisf+0x40>
    d93a:	f9 2f       	mov	r31, r25
    d93c:	96 e9       	ldi	r25, 0x96	; 150
    d93e:	bb 27       	eor	r27, r27
    d940:	93 95       	inc	r25
    d942:	f6 95       	lsr	r31
    d944:	87 95       	ror	r24
    d946:	77 95       	ror	r23
    d948:	67 95       	ror	r22
    d94a:	b7 95       	ror	r27
    d94c:	f1 11       	cpse	r31, r1
    d94e:	f8 cf       	rjmp	.-16     	; 0xd940 <__floatsisf+0x1c>
    d950:	fa f4       	brpl	.+62     	; 0xd990 <__floatsisf+0x6c>
    d952:	bb 0f       	add	r27, r27
    d954:	11 f4       	brne	.+4      	; 0xd95a <__floatsisf+0x36>
    d956:	60 ff       	sbrs	r22, 0
    d958:	1b c0       	rjmp	.+54     	; 0xd990 <__floatsisf+0x6c>
    d95a:	6f 5f       	subi	r22, 0xFF	; 255
    d95c:	7f 4f       	sbci	r23, 0xFF	; 255
    d95e:	8f 4f       	sbci	r24, 0xFF	; 255
    d960:	9f 4f       	sbci	r25, 0xFF	; 255
    d962:	16 c0       	rjmp	.+44     	; 0xd990 <__floatsisf+0x6c>
    d964:	88 23       	and	r24, r24
    d966:	11 f0       	breq	.+4      	; 0xd96c <__floatsisf+0x48>
    d968:	96 e9       	ldi	r25, 0x96	; 150
    d96a:	11 c0       	rjmp	.+34     	; 0xd98e <__floatsisf+0x6a>
    d96c:	77 23       	and	r23, r23
    d96e:	21 f0       	breq	.+8      	; 0xd978 <__floatsisf+0x54>
    d970:	9e e8       	ldi	r25, 0x8E	; 142
    d972:	87 2f       	mov	r24, r23
    d974:	76 2f       	mov	r23, r22
    d976:	05 c0       	rjmp	.+10     	; 0xd982 <__floatsisf+0x5e>
    d978:	66 23       	and	r22, r22
    d97a:	71 f0       	breq	.+28     	; 0xd998 <__floatsisf+0x74>
    d97c:	96 e8       	ldi	r25, 0x86	; 134
    d97e:	86 2f       	mov	r24, r22
    d980:	70 e0       	ldi	r23, 0x00	; 0
    d982:	60 e0       	ldi	r22, 0x00	; 0
    d984:	2a f0       	brmi	.+10     	; 0xd990 <__floatsisf+0x6c>
    d986:	9a 95       	dec	r25
    d988:	66 0f       	add	r22, r22
    d98a:	77 1f       	adc	r23, r23
    d98c:	88 1f       	adc	r24, r24
    d98e:	da f7       	brpl	.-10     	; 0xd986 <__floatsisf+0x62>
    d990:	88 0f       	add	r24, r24
    d992:	96 95       	lsr	r25
    d994:	87 95       	ror	r24
    d996:	97 f9       	bld	r25, 7
    d998:	08 95       	ret

0000d99a <__fp_inf>:
    d99a:	97 f9       	bld	r25, 7
    d99c:	9f 67       	ori	r25, 0x7F	; 127
    d99e:	80 e8       	ldi	r24, 0x80	; 128
    d9a0:	70 e0       	ldi	r23, 0x00	; 0
    d9a2:	60 e0       	ldi	r22, 0x00	; 0
    d9a4:	08 95       	ret

0000d9a6 <__fp_nan>:
    d9a6:	9f ef       	ldi	r25, 0xFF	; 255
    d9a8:	80 ec       	ldi	r24, 0xC0	; 192
    d9aa:	08 95       	ret

0000d9ac <__fp_pscA>:
    d9ac:	00 24       	eor	r0, r0
    d9ae:	0a 94       	dec	r0
    d9b0:	16 16       	cp	r1, r22
    d9b2:	17 06       	cpc	r1, r23
    d9b4:	18 06       	cpc	r1, r24
    d9b6:	09 06       	cpc	r0, r25
    d9b8:	08 95       	ret

0000d9ba <__fp_pscB>:
    d9ba:	00 24       	eor	r0, r0
    d9bc:	0a 94       	dec	r0
    d9be:	12 16       	cp	r1, r18
    d9c0:	13 06       	cpc	r1, r19
    d9c2:	14 06       	cpc	r1, r20
    d9c4:	05 06       	cpc	r0, r21
    d9c6:	08 95       	ret

0000d9c8 <__fp_round>:
    d9c8:	09 2e       	mov	r0, r25
    d9ca:	03 94       	inc	r0
    d9cc:	00 0c       	add	r0, r0
    d9ce:	11 f4       	brne	.+4      	; 0xd9d4 <__fp_round+0xc>
    d9d0:	88 23       	and	r24, r24
    d9d2:	52 f0       	brmi	.+20     	; 0xd9e8 <__fp_round+0x20>
    d9d4:	bb 0f       	add	r27, r27
    d9d6:	40 f4       	brcc	.+16     	; 0xd9e8 <__fp_round+0x20>
    d9d8:	bf 2b       	or	r27, r31
    d9da:	11 f4       	brne	.+4      	; 0xd9e0 <__fp_round+0x18>
    d9dc:	60 ff       	sbrs	r22, 0
    d9de:	04 c0       	rjmp	.+8      	; 0xd9e8 <__fp_round+0x20>
    d9e0:	6f 5f       	subi	r22, 0xFF	; 255
    d9e2:	7f 4f       	sbci	r23, 0xFF	; 255
    d9e4:	8f 4f       	sbci	r24, 0xFF	; 255
    d9e6:	9f 4f       	sbci	r25, 0xFF	; 255
    d9e8:	08 95       	ret

0000d9ea <__fp_split3>:
    d9ea:	57 fd       	sbrc	r21, 7
    d9ec:	90 58       	subi	r25, 0x80	; 128
    d9ee:	44 0f       	add	r20, r20
    d9f0:	55 1f       	adc	r21, r21
    d9f2:	59 f0       	breq	.+22     	; 0xda0a <__fp_splitA+0x10>
    d9f4:	5f 3f       	cpi	r21, 0xFF	; 255
    d9f6:	71 f0       	breq	.+28     	; 0xda14 <__fp_splitA+0x1a>
    d9f8:	47 95       	ror	r20

0000d9fa <__fp_splitA>:
    d9fa:	88 0f       	add	r24, r24
    d9fc:	97 fb       	bst	r25, 7
    d9fe:	99 1f       	adc	r25, r25
    da00:	61 f0       	breq	.+24     	; 0xda1a <__fp_splitA+0x20>
    da02:	9f 3f       	cpi	r25, 0xFF	; 255
    da04:	79 f0       	breq	.+30     	; 0xda24 <__fp_splitA+0x2a>
    da06:	87 95       	ror	r24
    da08:	08 95       	ret
    da0a:	12 16       	cp	r1, r18
    da0c:	13 06       	cpc	r1, r19
    da0e:	14 06       	cpc	r1, r20
    da10:	55 1f       	adc	r21, r21
    da12:	f2 cf       	rjmp	.-28     	; 0xd9f8 <__fp_split3+0xe>
    da14:	46 95       	lsr	r20
    da16:	f1 df       	rcall	.-30     	; 0xd9fa <__fp_splitA>
    da18:	08 c0       	rjmp	.+16     	; 0xda2a <__fp_splitA+0x30>
    da1a:	16 16       	cp	r1, r22
    da1c:	17 06       	cpc	r1, r23
    da1e:	18 06       	cpc	r1, r24
    da20:	99 1f       	adc	r25, r25
    da22:	f1 cf       	rjmp	.-30     	; 0xda06 <__fp_splitA+0xc>
    da24:	86 95       	lsr	r24
    da26:	71 05       	cpc	r23, r1
    da28:	61 05       	cpc	r22, r1
    da2a:	08 94       	sec
    da2c:	08 95       	ret

0000da2e <__fp_zero>:
    da2e:	e8 94       	clt

0000da30 <__fp_szero>:
    da30:	bb 27       	eor	r27, r27
    da32:	66 27       	eor	r22, r22
    da34:	77 27       	eor	r23, r23
    da36:	cb 01       	movw	r24, r22
    da38:	97 f9       	bld	r25, 7
    da3a:	08 95       	ret

0000da3c <__mulsf3>:
    da3c:	0b d0       	rcall	.+22     	; 0xda54 <__mulsf3x>
    da3e:	c4 cf       	rjmp	.-120    	; 0xd9c8 <__fp_round>
    da40:	b5 df       	rcall	.-150    	; 0xd9ac <__fp_pscA>
    da42:	28 f0       	brcs	.+10     	; 0xda4e <__mulsf3+0x12>
    da44:	ba df       	rcall	.-140    	; 0xd9ba <__fp_pscB>
    da46:	18 f0       	brcs	.+6      	; 0xda4e <__mulsf3+0x12>
    da48:	95 23       	and	r25, r21
    da4a:	09 f0       	breq	.+2      	; 0xda4e <__mulsf3+0x12>
    da4c:	a6 cf       	rjmp	.-180    	; 0xd99a <__fp_inf>
    da4e:	ab cf       	rjmp	.-170    	; 0xd9a6 <__fp_nan>
    da50:	11 24       	eor	r1, r1
    da52:	ee cf       	rjmp	.-36     	; 0xda30 <__fp_szero>

0000da54 <__mulsf3x>:
    da54:	ca df       	rcall	.-108    	; 0xd9ea <__fp_split3>
    da56:	a0 f3       	brcs	.-24     	; 0xda40 <__mulsf3+0x4>

0000da58 <__mulsf3_pse>:
    da58:	95 9f       	mul	r25, r21
    da5a:	d1 f3       	breq	.-12     	; 0xda50 <__mulsf3+0x14>
    da5c:	95 0f       	add	r25, r21
    da5e:	50 e0       	ldi	r21, 0x00	; 0
    da60:	55 1f       	adc	r21, r21
    da62:	62 9f       	mul	r22, r18
    da64:	f0 01       	movw	r30, r0
    da66:	72 9f       	mul	r23, r18
    da68:	bb 27       	eor	r27, r27
    da6a:	f0 0d       	add	r31, r0
    da6c:	b1 1d       	adc	r27, r1
    da6e:	63 9f       	mul	r22, r19
    da70:	aa 27       	eor	r26, r26
    da72:	f0 0d       	add	r31, r0
    da74:	b1 1d       	adc	r27, r1
    da76:	aa 1f       	adc	r26, r26
    da78:	64 9f       	mul	r22, r20
    da7a:	66 27       	eor	r22, r22
    da7c:	b0 0d       	add	r27, r0
    da7e:	a1 1d       	adc	r26, r1
    da80:	66 1f       	adc	r22, r22
    da82:	82 9f       	mul	r24, r18
    da84:	22 27       	eor	r18, r18
    da86:	b0 0d       	add	r27, r0
    da88:	a1 1d       	adc	r26, r1
    da8a:	62 1f       	adc	r22, r18
    da8c:	73 9f       	mul	r23, r19
    da8e:	b0 0d       	add	r27, r0
    da90:	a1 1d       	adc	r26, r1
    da92:	62 1f       	adc	r22, r18
    da94:	83 9f       	mul	r24, r19
    da96:	a0 0d       	add	r26, r0
    da98:	61 1d       	adc	r22, r1
    da9a:	22 1f       	adc	r18, r18
    da9c:	74 9f       	mul	r23, r20
    da9e:	33 27       	eor	r19, r19
    daa0:	a0 0d       	add	r26, r0
    daa2:	61 1d       	adc	r22, r1
    daa4:	23 1f       	adc	r18, r19
    daa6:	84 9f       	mul	r24, r20
    daa8:	60 0d       	add	r22, r0
    daaa:	21 1d       	adc	r18, r1
    daac:	82 2f       	mov	r24, r18
    daae:	76 2f       	mov	r23, r22
    dab0:	6a 2f       	mov	r22, r26
    dab2:	11 24       	eor	r1, r1
    dab4:	9f 57       	subi	r25, 0x7F	; 127
    dab6:	50 40       	sbci	r21, 0x00	; 0
    dab8:	8a f0       	brmi	.+34     	; 0xdadc <__mulsf3_pse+0x84>
    daba:	e1 f0       	breq	.+56     	; 0xdaf4 <__mulsf3_pse+0x9c>
    dabc:	88 23       	and	r24, r24
    dabe:	4a f0       	brmi	.+18     	; 0xdad2 <__mulsf3_pse+0x7a>
    dac0:	ee 0f       	add	r30, r30
    dac2:	ff 1f       	adc	r31, r31
    dac4:	bb 1f       	adc	r27, r27
    dac6:	66 1f       	adc	r22, r22
    dac8:	77 1f       	adc	r23, r23
    daca:	88 1f       	adc	r24, r24
    dacc:	91 50       	subi	r25, 0x01	; 1
    dace:	50 40       	sbci	r21, 0x00	; 0
    dad0:	a9 f7       	brne	.-22     	; 0xdabc <__mulsf3_pse+0x64>
    dad2:	9e 3f       	cpi	r25, 0xFE	; 254
    dad4:	51 05       	cpc	r21, r1
    dad6:	70 f0       	brcs	.+28     	; 0xdaf4 <__mulsf3_pse+0x9c>
    dad8:	60 cf       	rjmp	.-320    	; 0xd99a <__fp_inf>
    dada:	aa cf       	rjmp	.-172    	; 0xda30 <__fp_szero>
    dadc:	5f 3f       	cpi	r21, 0xFF	; 255
    dade:	ec f3       	brlt	.-6      	; 0xdada <__mulsf3_pse+0x82>
    dae0:	98 3e       	cpi	r25, 0xE8	; 232
    dae2:	dc f3       	brlt	.-10     	; 0xdada <__mulsf3_pse+0x82>
    dae4:	86 95       	lsr	r24
    dae6:	77 95       	ror	r23
    dae8:	67 95       	ror	r22
    daea:	b7 95       	ror	r27
    daec:	f7 95       	ror	r31
    daee:	e7 95       	ror	r30
    daf0:	9f 5f       	subi	r25, 0xFF	; 255
    daf2:	c1 f7       	brne	.-16     	; 0xdae4 <__mulsf3_pse+0x8c>
    daf4:	fe 2b       	or	r31, r30
    daf6:	88 0f       	add	r24, r24
    daf8:	91 1d       	adc	r25, r1
    dafa:	96 95       	lsr	r25
    dafc:	87 95       	ror	r24
    dafe:	97 f9       	bld	r25, 7
    db00:	08 95       	ret

0000db02 <strnlen_P>:
    db02:	fc 01       	movw	r30, r24
    db04:	05 90       	lpm	r0, Z+
    db06:	61 50       	subi	r22, 0x01	; 1
    db08:	70 40       	sbci	r23, 0x00	; 0
    db0a:	01 10       	cpse	r0, r1
    db0c:	d8 f7       	brcc	.-10     	; 0xdb04 <strnlen_P+0x2>
    db0e:	80 95       	com	r24
    db10:	90 95       	com	r25
    db12:	8e 0f       	add	r24, r30
    db14:	9f 1f       	adc	r25, r31
    db16:	08 95       	ret

0000db18 <_exit>:
    db18:	f8 94       	cli

0000db1a <__stop_program>:
    db1a:	ff cf       	rjmp	.-2      	; 0xdb1a <__stop_program>
