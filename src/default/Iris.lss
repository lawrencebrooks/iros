
Iris.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00007910  00007a10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00007910  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000091a  00800102  00800102  00007a12  2**1
                  ALLOC
  3 .noinit       00000400  00800a20  00800a20  00007a20  2**5
                  CONTENTS, READONLY
  4 .stab         0000048c  00000000  00000000  00007e20  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000256  00000000  00000000  000082ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  00008502  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000498  00000000  00000000  00008518  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00004ea5  00000000  00000000  000089b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000139b  00000000  00000000  0000d855  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000015c4  00000000  00000000  0000ebf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000b08  00000000  00000000  000101b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00001456  00000000  00000000  00010cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00003e7d  00000000  00000000  00012112  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000004f0  00000000  00000000  00015f90  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 40 28 	jmp	0x5080	; 0x5080 <__ctors_end>
       4:	0c 94 a9 28 	jmp	0x5152	; 0x5152 <__bad_interrupt>
       8:	0c 94 a9 28 	jmp	0x5152	; 0x5152 <__bad_interrupt>
       c:	0c 94 a9 28 	jmp	0x5152	; 0x5152 <__bad_interrupt>
      10:	0c 94 a9 28 	jmp	0x5152	; 0x5152 <__bad_interrupt>
      14:	0c 94 a9 28 	jmp	0x5152	; 0x5152 <__bad_interrupt>
      18:	0c 94 a9 28 	jmp	0x5152	; 0x5152 <__bad_interrupt>
      1c:	0c 94 a9 28 	jmp	0x5152	; 0x5152 <__bad_interrupt>
      20:	0c 94 10 2e 	jmp	0x5c20	; 0x5c20 <__vector_8>
      24:	0c 94 a9 28 	jmp	0x5152	; 0x5152 <__bad_interrupt>
      28:	0c 94 a9 28 	jmp	0x5152	; 0x5152 <__bad_interrupt>
      2c:	0c 94 a9 28 	jmp	0x5152	; 0x5152 <__bad_interrupt>
      30:	0c 94 a9 28 	jmp	0x5152	; 0x5152 <__bad_interrupt>
      34:	0c 94 ed 2b 	jmp	0x57da	; 0x57da <__vector_13>
      38:	0c 94 2d 2c 	jmp	0x585a	; 0x585a <__vector_14>
      3c:	0c 94 a9 28 	jmp	0x5152	; 0x5152 <__bad_interrupt>
      40:	0c 94 a9 28 	jmp	0x5152	; 0x5152 <__bad_interrupt>
      44:	0c 94 a9 28 	jmp	0x5152	; 0x5152 <__bad_interrupt>
      48:	0c 94 a9 28 	jmp	0x5152	; 0x5152 <__bad_interrupt>
      4c:	0c 94 a9 28 	jmp	0x5152	; 0x5152 <__bad_interrupt>
      50:	0c 94 a9 28 	jmp	0x5152	; 0x5152 <__bad_interrupt>
      54:	0c 94 a9 28 	jmp	0x5152	; 0x5152 <__bad_interrupt>
      58:	0c 94 a9 28 	jmp	0x5152	; 0x5152 <__bad_interrupt>
      5c:	0c 94 a9 28 	jmp	0x5152	; 0x5152 <__bad_interrupt>
      60:	0c 94 a9 28 	jmp	0x5152	; 0x5152 <__bad_interrupt>
      64:	0c 94 a9 28 	jmp	0x5152	; 0x5152 <__bad_interrupt>
      68:	0c 94 a9 28 	jmp	0x5152	; 0x5152 <__bad_interrupt>
      6c:	0c 94 a9 28 	jmp	0x5152	; 0x5152 <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	81 00       	.word	0x0081	; ????
      72:	45 00       	.word	0x0045	; ????
      74:	27 ff       	sbrs	r18, 7
      76:	24 ff       	sbrs	r18, 4
      78:	2a 90       	ld	r2, -Y
      7a:	2b 1c       	adc	r2, r11
      7c:	21 0c       	add	r2, r1
      7e:	22 fb       	bst	r18, 2
      80:	85 00       	.word	0x0085	; ????
      82:	84 00       	.word	0x0084	; ????
      84:	89 03       	fmulsu	r16, r17
      86:	88 8d       	ldd	r24, Y+24	; 0x18
      88:	81 09       	sbc	r24, r1
      8a:	6f 02       	muls	r22, r31
      8c:	44 42       	sbci	r20, 0x24	; 36
      8e:	47 00       	.word	0x0047	; ????
      90:	45 01       	movw	r8, r10
      92:	b0 83       	st	Z, r27
      94:	b3 00       	.word	0x00b3	; ????
      96:	b1 01       	movw	r22, r2
      98:	25 11       	cpse	r18, r5
      9a:	8a 4f       	sbci	r24, 0xFA	; 250
      9c:	8b 03       	fmulsu	r16, r19

0000009e <eeprom_format_table>:
      9e:	5a 55 01 20 01 01 00 38 08 00 00 00 00 00 00 00     ZU. ...8........
	...

000000be <patchCommands>:
      be:	bc 2e bf 2e 1b 2f 1f 2f 26 2f c7 2e cc 2e d1 2e     ....././&/......
      ce:	2e 2f d4 2e d7 2e da 2e 15 2f 18 2f 3e 2f           ./......././>/

000000dc <fader>:
      dc:	00 40 88 91 d2 e4 ad b5 b6 be bf ff                 .@..........

000000e8 <map_uzeboxlogo2>:
      e8:	05 03 00 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f     ................
	...

000000f9 <map_uzeboxlogo>:
      f9:	05 04 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d     ................
     109:	00 0e 0f 10 11 12                                   ......

0000010f <logo_tileset>:
	...
     16b:	00 00 00 49 00 00 00 00 00 49 52 52 00 00 00 49     ...I.....IRR...I
     17b:	52 53 1c 25 00 49 52 52 24 25 25 1b 52 52 5c 2d     RS.%.IRR$%%.RR\-
     18b:	2d 1c 12 12 00 00 00 00 00 00 00 00 00 00 00 00     -...............
     19b:	40 49 49 49 00 40 49 49 52 5b 5b 5b 4a 52 52 5b     @III.@IIR[[[JRR[
     1ab:	1c 1c 13 12 5b 1c 24 1c 12 09 09 09 24 1b 12 09     ....[.$.....$...
     1bb:	09 09 09 0a 0a 0a 0a 0a 0a 0a 0a 13 0a 0a 12 0a     ................
     1cb:	0a 12 13 0a 00 00 00 00 00 00 00 00 92 52 52 52     .............RRR
     1db:	52 52 52 49 13 12 13 09 00 1c 1b 13 0a 12 12 40     RRRI...........@
     1eb:	1b 65 64 1c 09 0a 00 09 24 1b 1c 65 12 00 00 25     .ed.....$..e...%
     1fb:	1c 1c 1c 1c 01 00 25 24 1c 1c 1c 1c 00 24 25 24     ......%$.....$%$
     20b:	24 24 1c 1c 00 00 00 00 00 00 00 00 49 40 00 00     $$..........I@..
     21b:	00 00 00 00 52 49 49 00 00 00 00 00 1c 5b 4a 48     ....RII......[JH
     22b:	00 00 00 00 1c 25 52 49 00 00 00 00 65 24 64 49     .....%RI....e$dI
     23b:	00 00 00 00 65 25 64 49 00 00 00 00 6d 2e 5c 49     ....e%dI....m.\I
	...
     253:	00 00 40 52 00 00 00 00 00 49 52 5c 00 00 00 00     ..@R.....IR\....
     263:	53 52 24 25 00 00 00 53 52 25 25 25 00 00 4a 52     SR$%...SR%%%..JR
     273:	25 25 1b 00 00 00 5b 25 13 00 00 1b 00 5b 53 00     %%....[%.....[S.
     283:	0a 1c 37 37 09 5b 1c 65 7f 37 2e 2e 52 2e 2e 1c     ..77.[.e.7..R...
     293:	13 13 12 00 2e 25 1b 13 12 00 00 12 1c 1c 12 00     .....%..........
     2a3:	00 12 25 1c 12 00 00 12 2e 37 1c 13 00 13 2e 37     ..%......7.....7
     2b3:	36 1c 13 1b 37 37 2e 2e 25 13 1c 1c 2e 2e 2e 2e     6...77..%.......
     2c3:	1b 1c 1c 1c 6e 6e 6e 1c 1c 1c 1c 1c 09 13 13 12     ....nnn.........
     2d3:	12 13 13 00 13 13 13 13 13 1c 00 09 13 13 13 13     ................
     2e3:	1c 01 00 37 13 13 13 1c 13 00 2e 2e 1b 1b 1c 1c     ...7............
     2f3:	00 1c 77 2e 1b 1b 25 00 13 7f 25 1c 1c 1c 01 0a     ..w...%...%.....
     303:	37 24 1c 1c 1c 13 0a 2e 25 25 09 00 13 2e 24 25     7$......%%....$%
     313:	25 25 25 25 2e 25 25 25 25 25 25 25 25 25 2d 2e     %%%%.%%%%%%%%%-.
     323:	25 1b 1c 1c 2e 2e 25 1c 13 25 1b 13 25 1c 1c 1c     %.....%..%..%...
     333:	1c 01 09 52 1c 1c 13 00 01 1c 5b 5c 0a 00 01 65     ...R......[\...e
     343:	77 5c 1b 00 01 6e 7f 6e 52 1b 00 00 6d 1c 52 49     w\...n.nR...m.RI
     353:	00 00 00 00 1c 13 53 00 00 00 00 00 1c 52 4a 00     ......S......RJ.
     363:	00 00 00 00 5b 5b 00 00 00 00 00 00 5c 00 00 00     ....[[......\...
	...
     38f:	13 5b 7f 77 6e 6e 6e 6e 13 65 77 76 6e 6e 6e 6e     .[.wnnnn.ewvnnnn
     39f:	1b 65 77 76 76 76 6e 77 1b 5b bf 76 b6 76 76 76     .ewvvvnw.[.v.vvv
     3af:	09 13 6d bf b7 b6 b7 65 00 1b 12 5c 76 bf 76 6d     ..m....e...\v.vm
     3bf:	00 00 12 1b 12 5b 5b 5c 00 00 00 00 09 0a 12 13     .....[[\........
     3cf:	6e 77 24 1c 1c 1c 1c 1c 77 25 1c 1c 1c 1c 24 25     nw$.....w%....$%
     3df:	6e 1c 1c 1c 24 25 25 1b 1c 1c 24 25 25 13 00 00     n...$%%...$%%...
     3ef:	64 6d 6d 1b 00 09 6e bf 6d 5b 09 12 6e bf 6d 5b     dmm...n.m[..n.m[
     3ff:	5b 12 5b 64 5b 12 13 12 13 1b 12 12 09 01 00 00     [.[d[...........
     40f:	1c 24 2e 1c 09 00 09 6e 25 24 01 00 09 76 7f 7f     .$.....n%$...v..
     41f:	00 00 12 77 7f 7f 64 12 64 bf bf 77 5b 12 1b 09     ...w..d.d..w[...
     42f:	bf 6d 5b 12 1b 09 00 00 12 13 1b 09 00 00 00 00     .m[.............
     43f:	09 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     44f:	7f 7f 53 13 13 00 00 00 64 12 1b 01 00 00 00 00     ..S.....d.......
     45f:	1b 12 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     497:	26 00 00 00 26 00 26 26 2f 00 00 00 2f 00 00 00     &...&.&&/.../...
     4a7:	37 00 00 00 37 00 00 00 ff 00 00 00 ff 00 00 00     7...7...........
     4b7:	bf 00 00 00 bf 00 00 bf 37 00 00 37 00 00 37 00     ........7..7..7.
     4c7:	00 26 26 00 00 00 26 26 00 00 00 00 00 00 00 00     .&&...&&........
     4d7:	26 26 26 00 26 26 26 26 00 00 2f 00 2f 00 00 00     &&&.&&&&.././...
     4e7:	00 37 00 00 37 00 00 00 ff 00 00 00 ff ff ff ff     .7..7...........
     4f7:	00 00 00 00 bf 00 00 00 00 00 00 00 37 00 00 00     ............7...
     507:	26 26 26 00 26 26 26 26 00 00 00 00 00 00 00 00     &&&.&&&&........
     517:	26 00 26 26 26 26 00 00 00 00 2f 00 00 00 2f 00     &.&&&&..../.../.
     527:	00 00 37 00 00 00 37 00 00 00 ff ff ff ff 00 00     ..7...7.........
     537:	00 00 bf 00 00 00 bf 00 00 00 37 00 00 00 37 00     ..........7...7.
     547:	26 00 26 26 26 26 00 00 00 00 00 00 00 00 00 00     &.&&&&..........
     557:	00 00 26 26 26 00 26 00 00 2f 00 00 2f 00 2f 00     ..&&&.&../.././.
     567:	37 00 00 00 37 00 00 37 ff 00 00 00 ff 00 00 00     7...7..7........
     577:	bf 00 00 00 bf 00 00 bf 37 00 00 37 00 00 37 00     ........7..7..7.
     587:	26 26 26 00 00 00 26 00 00 00 00 00 00 00 00 00     &&&...&.........
     597:	00 00 26 00 00 00 00 00 00 00 2f 00 00 00 00 00     ..&......./.....
     5a7:	00 37 00 00 00 00 00 00 ff 00 00 00 00 00 00 00     .7..............
     5b7:	00 bf 00 00 00 00 00 00 00 00 37 00 00 00 00 00     ..........7.....
     5c7:	00 00 26 00 00 00 00 00 00 00 00 00 00 00 00 00     ..&.............
	...
     5eb:	00 00 00 e4 00 00 00 00 09 9b ed f6 00 00 00 9b     ................
     5fb:	a4 ad bf bf 00 52 9b a4 76 7f 7f b7 5b 9b 6d 77     .....R..v...[.mw
     60b:	7f 76 6e b7 00 00 00 00 00 00 00 00 00 00 00 00     .vn.............
     61b:	5b b6 f6 f6 00 5b f6 ff ff ff ff bf f6 ff ff ff     [....[..........
     62b:	ff bf bf ae ff bf ff ff ff b7 ad 65 bf bf ff ff     ...........e....
     63b:	b7 b6 ad 65 b7 bf ff ff bf b7 ae 6e b7 bf ff ff     ...e.......n....
     64b:	bf b7 b7 65 00 00 00 00 00 00 00 00 f6 f6 ed ed     ...e............
     65b:	ad a4 a4 9b b6 6d 6d 5c 52 6e 65 64 65 65 65 52     .....mm\RnedeeeR
     66b:	65 76 6d 25 5c 5c 52 53 6e 24 65 6e 65 52 52 6e     evm%\\RSn$eneRRn
     67b:	25 25 24 25 5b 52 77 2d 25 25 25 24 52 6e 6e 2d     %%$%[Rw-%%%$Rnn-
     68b:	25 25 25 25 00 00 00 00 00 00 00 00 9b 49 00 00     %%%%.........I..
     69b:	00 00 00 00 a4 9b 92 00 00 00 00 00 25 64 93 49     ............%d.I
     6ab:	00 00 00 00 65 2e 9b 52 00 00 00 00 6d 25 65 52     ....e..R....m%eR
     6bb:	00 00 00 00 6d 2d 65 52 00 00 00 00 6e 2e 64 52     ....m-eR....n.dR
	...
     6d3:	00 00 49 5b 00 00 00 00 00 4a 5b 65 00 00 00 00     ..I[.....J[e....
     6e3:	5b 9b 6d 2d 00 00 00 5b 5b 2d 2e 25 00 00 52 5b     [.m-...[[-.%..R[
     6f3:	2e 2e 1c 09 00 01 5b 2d 1c 01 09 1c 00 5c 5b 01     ......[-.....\[.
     703:	4a 65 77 7f 4a 5b 1c 6e 7f 77 77 76 9b 77 77 6d     Jew.J[.n.wwv.wwm
     713:	65 6e 6e a4 77 6e 65 65 65 5b a4 b7 25 25 5c 52     enn.wneee[..%%\R
     723:	52 6d bf bf 13 09 49 64 7f bf bf bf 09 5c 7f 7f     Rm....Id.....\..
     733:	bf bf b7 bf 7f 7f 77 7f 7f b7 bf bf 77 77 7f 7f     ......w.....ww..
     743:	6e b7 bf bf 77 7f 7f 6e 77 bf bf bf b6 ff ff ff     n...w..nw.......
     753:	bf bf b7 5b bf ff ff ff bf bf a4 64 bf ff ff ff     ...[.......d....
     763:	bf ad a4 7f bf ff ff ff bf a4 bf 7f ff ff ff bf     ................
     773:	ad bf bf bf ff ff ff b6 bf bf bf 77 ff ff f7 bf     ...........w....
     783:	bf bf 77 77 ff ff ff bf bf bf 64 52 6d 7f 6e 2e     ..ww......dRm.n.
     793:	2d 2d 25 6e 7f 76 6e 6e 6e 2e 25 65 77 77 77 76     --%n.vnnn.%ewwwv
     7a3:	2e 1c 25 24 7f 77 6e 25 1c 25 1c 1b 77 65 25 25     ..%$.wn%.%..we%%
     7b3:	1c 09 0a 5b 6e 6e 1c 09 49 25 64 64 5b 49 4a 6e     ...[nn..I%dd[IJn
     7c3:	7f 64 5c 00 53 77 bf 77 5b 5c 00 00 6e 25 5b 4a     .d\.Sw.w[\..n%[J
     7d3:	00 00 00 00 1c 1b 5b 00 00 00 00 00 24 5b 53 00     ......[.....$[S.
     7e3:	00 00 00 00 5b 5c 00 00 00 00 00 00 64 00 00 00     ....[\......d...
	...
     80f:	5b 5c 7f bf 77 76 77 77 5c 6d 7f b7 77 77 77 77     [\..wvww\m..wwww
     81f:	5c 6d 7f bf 77 77 77 bf 5c 64 bf bf bf bf bf 7f     \m..www.\d......
     82f:	0a 5c 6e bf bf bf bf 76 00 65 64 6d bf bf bf bf     .\n....v.edm....
     83f:	00 00 5b 6d 64 6d ad b6 00 00 00 00 12 5b 64 6d     ..[mdm.......[dm
     84f:	77 7f 6e 6e 77 bf bf bf 7f 76 6d 76 77 bf bf bf     w.nnw....vmvw...
     85f:	77 6d 6e 76 7f bf bf bf 6d 6e 76 7f bf b7 ad f6     wmnv....mnv.....
     86f:	76 bf bf 76 a4 ad ff ff bf b6 64 ad ff ff ff ff     v..v......d.....
     87f:	b6 ad bf ff ff ff ff f6 ad b6 ad 64 5b 52 00 00     ...........d[R..
     88f:	ff ff bf bf ad 5b 64 bf ff ff b6 ad ad bf ff bf     .....[d.........
     89f:	ff f6 ff ff ff ff bf 64 ff ff ff ff bf b6 76 5b     .......d......v[
     8af:	ff ff ff bf bf 5b 00 00 ff ff ff 5c 00 00 00 00     .....[.....\....
     8bf:	a4 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     8cf:	bf bf 64 5c 5c 00 00 00 6e 5c 65 49 00 00 00 00     ..d\\...n\eI....
     8df:	6d 5b 00 00 00 00 00 00 00 00 00 00 00 00 00 00     m[..............
	...

0000090f <logoInitPatches>:
     90f:	00 00 00 18 09 00 00 00 00                          .........

00000918 <initPatch>:
     918:	00 02 08 00 08 55 04 08 5a 00 00 f8 00 09 90 00     .....U..Z.......
     928:	0a 1e 32 05 00 00 ff                                ..2....

0000092f <default_scores>:
     92f:	55 5a 45 00 00 4c 4a 42 00 00 41 41 41 00 00 42     UZE..LJB..AAA..B
     93f:	42 42 00 00 43 43 43 00 00 44 44 44 00 00           BB..CCC..DDD..

0000094d <strLevels>:
     94d:	20 20 20 47 4c 41 43 49 45 53 20 20 20 00              GLACIES   .

0000095b <strPaused>:
     95b:	50 41 55 53 45 44 00                                PAUSED.

00000962 <strExit>:
     962:	45 58 49 54 20 2d 20 58 00                          EXIT - X.

0000096b <strLives>:
     96b:	4c 49 56 45 53 3a 00                                LIVES:.

00000972 <strShield>:
     972:	53 48 49 45 4c 44 3a 00                             SHIELD:.

0000097a <strScore>:
     97a:	53 43 4f 52 45 3a 00                                SCORE:.

00000981 <strSelectHandle>:
     981:	53 45 4c 45 43 54 20 2d 20 41 2f 53 54 41 52 54     SELECT - A/START
	...

00000992 <strHighscores>:
     992:	48 49 47 48 20 53 43 4f 52 45 53 00                 HIGH SCORES.

0000099e <str1Player>:
     99e:	53 54 41 52 54 00                                   START.

000009a4 <strCopyright>:
     9a4:	32 30 31 36 20 4c 41 57 52 45 4e 43 45 20 42 52     2016 LAWRENCE BR
     9b4:	4f 4f 4b 53 00                                      OOKS.

000009b9 <my_patches>:
     9b9:	00 00 00 c2 09 00 00 00 00                          .........

000009c2 <ad_navigate>:
     9c2:	00 02 02 00 04 32 01 03 01 01 03 01 01 03 01 01     .....2..........
     9d2:	03 01 01 03 01 01 03 01 01 03 01 01 03 01 01 03     ................
     9e2:	01 01 03 01 01 03 01 01 03 01 01 03 01 01 03 01     ................
     9f2:	01 03 01 01 03 01 01 04 01 01 04 01 01 04 01 01     ................
     a02:	04 01 01 04 01 01 04 01 01 04 01 01 04 01 01 04     ................
     a12:	01 01 04 01 01 04 01 01 04 01 01 04 01 01 04 01     ................
     a22:	01 04 01 01 03 01 01 03 01 01 03 01 01 03 01 01     ................
     a32:	03 01 01 03 01 01 03 01 01 03 01 01 03 01 01 03     ................
     a42:	01 01 03 01 01 03 01 01 03 01 01 03 01 01 03 01     ................
     a52:	01 03 01 01 04 01 01 04 01 01 04 01 01 04 01 01     ................
     a62:	04 01 01 04 01 01 04 01 01 04 01 01 04 01 01 04     ................
     a72:	01 01 04 01 01 04 01 01 04 01 01 04 01 01 04 01     ................
     a82:	01 03 01 01 03 01 01 03 01 01 03 01 01 03 01 01     ................
     a92:	03 01 01 03 01 01 03 01 01 03 01 01 03 01 01 03     ................
     aa2:	01 01 03 01 01 03 01 01 03 01 01 03 01 01 03 01     ................
     ab2:	01 04 01 01 04 01 01 04 01 01 04 01 01 04 01 01     ................
     ac2:	04 01 01 04 01 01 04 01 01 04 01 01 04 01 01 04     ................
     ad2:	01 01 04 01 01 04 01 01 04 01 01 04 01 01 05 00     ................
     ae2:	00 ff                                               ..

00000ae4 <level_data>:
     ae4:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     af4:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 00     ................
	...
     b1c:	00 00 00 02 02 00 00 00 06 05 00 00 00 00 00 00     ................
	...
     b34:	00 00 42 42 42 42 42 42 00 02 02 00 00 06 02 02     ..BBBBBB........
     b44:	05 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     b54:	42 4d 4d 4d 4d 42 00 02 02 00 06 02 02 02 02 05     BMMMMB..........
	...
     b70:	00 00 42 4d 4d 4d 4d 42 00 02 02 00 04 02 02 02     ..BMMMMB........
     b80:	02 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     b90:	42 4d 4d 4d 4d 42 00 02 02 00 00 04 02 02 03 00     BMMMMB..........
	...
     bac:	00 00 42 4d 4d 4d 4d 42 00 02 02 00 00 00 04 03     ..BMMMMB........
	...
     bcc:	42 42 42 42 42 42 00 02 02 00 00 00 00 00 00 00     BBBBBB..........
     bdc:	00 00 00 00 00 00 02 02 00 00 00 00 00 00 00 00     ................
     bec:	00 00 00 00 00 02 02 00 00 00 00 00 00 00 00 00     ................
     bfc:	00 00 00 00 02 02 00 00 00 00 00 00 00 00 00 00     ................
     c0c:	00 00 00 02 02 00 00 00 00 00 00 00 01 01 01 01     ................
     c1c:	01 00 02 02 00 01 01 01 01 01 00 00 00 00 00 00     ................
     c2c:	00 02 02 00 00 00 00 00 00 00 01 01 01 01 01 00     ................
     c3c:	02 02 00 01 01 01 01 01 00 00 00 00 00 00 00 02     ................
     c4c:	02 00 00 58 00 00 00 00 01 01 01 01 01 00 02 02     ...X............
     c5c:	00 01 01 01 01 01 00 00 00 63 00 00 00 02 02 00     .........c......
     c6c:	00 00 00 00 00 00 01 01 01 01 01 00 02 02 00 01     ................
     c7c:	01 01 01 01 00 00 00 00 00 00 00 02 02 00 00 00     ................
     c8c:	00 00 00 00 01 01 01 01 01 00 02 02 00 01 01 01     ................
     c9c:	01 01 00 00 00 00 00 00 00 02 02 00 00 00 00 00     ................
	...
     cb4:	02 02 00 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
     cc4:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 02 02     ................
	...
     ce0:	00 02 02 00 42 42 42 42 42 42 00 00 00 00 00 00     ....BBBBBB......
	...
     cf8:	00 00 06 05 00 00 00 02 02 00 42 4d 4d 4d 4d 42     ..........BMMMMB
	...
     d14:	00 00 00 06 02 02 05 00 00 02 02 00 42 4d 4d 4d     ............BMMM
     d24:	4d 42 00 00 00 00 00 00 00 00 00 00 00 00 00 00     MB..............
     d34:	06 02 02 02 02 05 00 02 02 00 42 4d 2c 4d 4d 42     ..........BM,MMB
	...
     d50:	00 00 04 02 02 02 02 03 00 02 02 00 42 4d 4d 4d     ............BMMM
     d60:	4d 42 00 00 00 00 00 00 00 00 00 00 00 00 00 00     MB..............
     d70:	00 04 02 02 03 00 00 02 02 00 42 42 42 42 42 42     ..........BBBBBB
	...
     d90:	04 03 00 00 00 02 02 00 00 00 00 00 00 00 00 00     ................
	...
     db0:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     dc0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     dd0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     de0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     df0:	02 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     e0c:	00 02 02 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     e28:	00 00 00 02 02 01 01 01 01 01 01 01 01 00 00 01     ................
     e38:	01 01 01 01 01 01 01 00 00 01 01 01 01 01 01 01     ................
     e48:	01 02 02 01 01 01 01 01 01 01 01 00 00 01 01 01     ................
     e58:	01 01 01 01 01 00 00 01 01 01 01 01 01 01 01 02     ................
     e68:	02 01 01 01 01 01 01 01 01 00 00 01 01 42 42 42     .............BBB
     e78:	42 01 01 00 00 01 01 01 01 01 01 01 01 02 02 01     B...............
     e88:	00 00 00 00 01 01 01 00 00 01 01 42 4d 4d 42 01     ...........BMMB.
     e98:	01 00 00 01 01 01 00 00 00 00 01 02 02 01 00 00     ................
     ea8:	00 00 01 01 01 00 00 01 01 42 2c 4d 42 01 01 00     .........B,MB...
     eb8:	00 01 01 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
     ec8:	01 01 01 00 00 01 01 42 4d 4d 42 01 01 00 00 01     .......BMMB.....
     ed8:	01 01 00 00 00 00 01 02 02 01 00 00 00 00 01 01     ................
     ee8:	01 00 00 01 01 42 42 42 42 01 01 00 00 01 01 01     .....BBBB.......
     ef8:	00 00 00 00 01 02 02 01 00 00 00 00 00 00 01 00     ................
     f08:	00 01 01 01 01 01 01 01 01 00 00 01 00 00 00 00     ................
     f18:	00 00 01 02 02 01 00 58 00 00 09 00 01 00 00 01     .......X........
     f28:	01 01 01 01 01 01 01 00 00 01 00 09 00 00 00 00     ................
     f38:	01 02 02 01 00 00 00 00 00 00 01 00 00 00 00 00     ................
     f48:	00 00 00 00 00 00 00 01 00 00 00 63 00 00 01 02     ...........c....
     f58:	02 01 00 00 00 00 01 01 01 00 00 01 01 01 01 01     ................
     f68:	01 01 01 00 00 01 01 01 00 00 00 00 01 02 02 01     ................
     f78:	00 00 00 00 01 01 01 00 00 01 01 01 01 01 01 01     ................
     f88:	01 00 00 01 01 01 00 00 00 00 01 02 02 01 00 00     ................
     f98:	00 00 01 01 01 00 00 01 01 42 42 42 42 01 01 00     .........BBBB...
     fa8:	00 01 01 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
     fb8:	01 01 01 00 00 01 01 42 4d 4d 42 01 01 00 00 01     .......BMMB.....
     fc8:	01 01 00 00 00 00 01 02 02 01 01 01 01 01 01 01     ................
     fd8:	01 00 00 01 01 42 4d 4d 42 01 01 00 00 01 01 01     .....BMMB.......
     fe8:	01 01 01 01 01 02 02 01 01 01 01 01 01 01 01 00     ................
     ff8:	00 01 01 42 4d 4d 42 01 01 00 00 01 01 01 01 01     ...BMMB.........
    1008:	01 01 01 02 02 01 01 01 01 01 01 01 01 00 00 01     ................
    1018:	01 42 42 42 42 01 01 00 00 01 01 01 01 01 01 01     .BBBB...........
    1028:	01 02 02 01 01 01 01 01 01 01 01 00 00 01 01 01     ................
    1038:	01 01 01 01 01 00 00 01 01 01 01 01 01 01 01 02     ................
    1048:	02 01 01 01 01 01 01 01 01 00 00 01 01 01 01 01     ................
    1058:	01 01 01 00 00 01 01 01 01 01 01 01 01 02 02 01     ................
    1068:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1080:	01 01 01 02 02 01 01 01 00 00 00 00 00 00 00 00     ................
	...
    109c:	00 00 01 01 01 02 02 02 02 02 02 02 02 02 02 02     ................
    10ac:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    10bc:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    10cc:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    10dc:	02 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    10f8:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1118:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1134:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1154:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1170:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1190:	00 02 02 01 01 01 01 01 01 00 00 00 00 00 00 00     ................
	...
    11a8:	00 01 00 00 00 00 01 02 02 01 00 00 00 00 01 00     ................
	...
    11c4:	00 00 00 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
    11d4:	01 00 00 00 00 02 00 00 00 00 00 00 02 00 00 00     ................
    11e4:	00 01 00 07 00 00 01 02 02 01 00 58 00 00 01 00     ...........X....
    11f4:	00 00 00 02 00 00 00 00 00 00 02 00 00 00 00 01     ................
    1204:	00 00 00 00 01 02 02 01 00 00 00 00 01 00 00 00     ................
    1214:	00 02 00 00 00 00 00 00 02 00 00 00 00 01 00 00     ................
    1224:	00 00 01 02 02 01 00 00 00 00 01 00 00 00 00 02     ................
    1234:	02 02 02 02 02 02 02 00 00 00 00 01 00 00 00 00     ................
    1244:	01 02 02 01 00 00 00 00 01 00 00 00 00 02 00 00     ................
    1254:	00 00 00 00 02 00 00 00 00 01 00 00 00 00 01 02     ................
    1264:	02 01 00 00 00 00 01 00 00 00 00 02 00 00 00 00     ................
    1274:	00 00 02 00 00 00 00 01 00 00 00 00 01 02 02 01     ................
    1284:	00 00 00 00 01 00 00 00 00 02 00 00 00 00 00 00     ................
    1294:	02 00 00 00 00 01 00 63 00 00 01 02 02 01 00 00     .......c........
    12a4:	07 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    12b4:	00 00 00 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
    12c4:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    12d4:	00 01 00 00 00 00 01 02 02 01 00 00 00 00 01 00     ................
	...
    12f0:	00 00 00 01 01 01 01 01 01 02 02 00 00 00 00 00     ................
	...
    1314:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1334:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1350:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1370:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    138c:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    139c:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    13ac:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    13bc:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    13cc:	02 00 00 00 42 4d 4d 4d 42 00 00 00 00 00 00 00     ....BMMMB.......
    13dc:	00 00 00 00 00 42 4d 4d 4d 42 00 00 00 02 02 00     .....BMMMB......
    13ec:	08 00 42 4d 4d 4d 42 00 00 00 00 00 00 00 00 00     ..BMMMB.........
    13fc:	00 00 00 42 4d 4d 4d 42 00 08 00 02 02 00 00 00     ...BMMMB........
    140c:	42 4d 4d 4d 42 00 01 01 01 00 00 00 00 01 01 01     BMMMB...........
    141c:	00 42 4d 4d 4d 42 00 00 00 02 02 02 02 02 02 42     .BMMMB.........B
    142c:	42 42 02 00 01 01 01 00 02 02 00 01 01 01 00 02     BB..............
    143c:	42 42 42 02 02 02 02 02 02 00 00 00 00 00 00 00     BBB.............
    144c:	02 00 01 01 01 00 02 02 00 01 01 01 00 02 00 00     ................
    145c:	00 00 00 00 00 02 02 00 01 01 01 01 01 00 02 00     ................
    146c:	00 00 00 00 02 02 00 00 00 00 00 02 00 01 01 01     ................
    147c:	01 01 00 02 02 00 01 01 01 01 01 00 02 00 00 00     ................
    148c:	02 02 02 02 02 02 00 00 00 02 00 01 01 01 01 01     ................
    149c:	00 02 02 00 01 01 01 01 01 00 02 00 00 00 00 00     ................
    14ac:	00 00 00 00 00 00 00 02 00 01 01 01 01 01 00 02     ................
    14bc:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    14d8:	00 02 02 02 02 02 02 00 00 00 00 00 00 00 00 00     ................
	...
    14f0:	00 00 00 02 02 02 02 02 00 00 00 00 02 00 00 00     ................
    1500:	00 00 58 00 02 00 00 00 00 02 00 00 00 00 00 00     ..X.............
    1510:	00 02 00 00 00 00 00 00 00 00 02 00 00 00 02 00     ................
    1520:	00 00 02 00 00 00 00 02 63 00 00 02 00 00 00 02     ........c.......
	...
    1538:	02 00 00 00 02 00 00 00 02 02 02 02 02 02 00 00     ................
    1548:	00 02 00 00 00 02 00 00 00 00 02 02 02 02 02 00     ................
    1558:	00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    1568:	00 00 00 02 02 02 02 02 02 4d 4d 4d 42 00 00 00     .........MMMB...
    1578:	02 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00     ................
    1588:	00 42 4d 4d 4d 02 02 4d 4d 4d 42 00 00 00 02 00     .BMMM..MMMB.....
	...
    15a0:	00 00 00 02 00 00 00 42 4d 4d 4d 02 02 4d 2c 4d     .......BMMM..M,M
    15b0:	42 00 00 00 02 00 00 00 02 02 02 02 02 02 00 00     B...............
    15c0:	00 02 00 00 00 42 4d 4d 4d 02 02 4d 4d 4d 02 00     .....BMMM..MMM..
	...
    15d8:	02 02 00 00 00 00 00 00 00 00 00 02 4d 4d 4d 02     ............MMM.
    15e8:	02 4d 4d 4d 02 00 00 01 01 01 00 00 00 00 02 02     .MMM............
    15f8:	00 00 00 00 01 01 01 00 00 02 4d 4d 4d 02 02 42     ..........MMM..B
    1608:	42 42 02 00 00 01 01 01 00 00 00 00 02 02 00 00     BB..............
    1618:	00 00 01 01 01 00 00 02 42 42 42 02 02 00 00 00     ........BBB.....
    1628:	02 00 00 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
    1638:	01 01 01 00 00 02 00 00 00 02 02 00 08 00 02 00     ................
	...
    1650:	09 00 00 00 00 00 00 00 00 00 00 02 00 08 00 02     ................
    1660:	02 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1678:	00 02 00 00 00 02 02 02 02 02 02 02 02 02 02 02     ................
    1688:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1698:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    16a8:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    16b8:	02 02 02 02 02 03 00 00 00 00 00 00 00 00 00 00     ................
	...
    16d4:	04 02 02 02 02 02 03 00 00 00 00 00 00 00 00 00     ................
	...
    16f0:	00 00 00 04 02 02 02 03 00 00 00 00 00 00 00 00     ................
	...
    1710:	00 00 04 02 02 00 00 00 00 00 00 06 05 00 00 00     ................
    1720:	00 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1730:	00 02 02 00 00 00 00 00 06 02 02 05 00 00 00 00     ................
	...
    174c:	00 00 00 02 02 00 00 00 00 06 02 4d 4d 02 05 00     ...........MM...
	...
    176c:	00 02 02 00 00 00 00 04 02 4d 4d 02 03 00 00 00     .........MM.....
	...
    1788:	00 00 00 02 02 00 00 00 00 00 04 02 02 03 00 00     ................
	...
    17a8:	00 02 02 00 00 00 00 00 00 04 03 00 00 00 00 00     ................
    17b8:	06 05 00 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    17c8:	02 00 00 00 00 00 00 00 00 00 00 00 00 06 02 02     ................
    17d8:	05 00 00 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    17f0:	00 00 06 02 01 01 02 05 00 00 00 00 00 00 00 00     ................
    1800:	00 00 00 02 02 00 00 58 00 00 00 00 00 00 00 00     .......X........
    1810:	04 02 01 01 02 03 00 00 00 00 00 00 00 63 00 00     .............c..
    1820:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 04     ................
    1830:	02 02 03 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    1840:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 04 03     ................
	...
    185c:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    186c:	00 00 00 00 00 00 00 06 05 00 00 00 00 00 00 02     ................
    187c:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    188c:	00 00 00 00 06 02 02 05 00 00 00 00 00 02 02 00     ................
	...
    18ac:	00 06 02 4d 4d 02 05 00 00 00 00 02 02 00 00 00     ...MM...........
	...
    18c8:	00 00 00 04 02 4d 4d 02 03 00 00 00 00 02 02 00     .....MM.........
	...
    18e8:	00 00 04 02 02 03 00 00 00 00 00 02 02 00 00 00     ................
	...
    1900:	00 00 07 00 00 00 00 00 00 04 03 00 00 00 00 00     ................
    1910:	00 02 02 05 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    192c:	00 00 06 02 02 02 05 00 00 00 00 00 00 00 00 00     ................
	...
    1948:	00 00 00 06 02 02 02 02 02 05 00 00 00 00 00 00     ................
	...
    1968:	06 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1978:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1988:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1998:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    19a8:	02 00 00 00 00 00 00 00 00 00 00 04 02 02 02 02     ................
    19b8:	02 02 03 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    19d0:	00 00 04 02 02 02 02 03 00 00 00 00 00 00 00 00     ................
    19e0:	00 00 00 02 02 00 00 01 01 01 01 00 00 00 00 00     ................
    19f0:	00 04 02 02 03 00 00 00 00 00 00 01 01 01 01 00     ................
    1a00:	00 02 02 00 00 01 01 01 01 00 00 00 00 00 00 00     ................
    1a10:	04 03 00 00 00 00 00 00 00 01 01 01 01 00 00 02     ................
    1a20:	02 00 00 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
    1a30:	00 00 00 00 00 00 00 01 01 01 01 00 00 02 02 00     ................
    1a40:	00 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00     ................
    1a50:	00 00 00 00 00 01 01 01 01 00 00 02 02 00 00 00     ................
	...
    1a78:	00 02 02 00 00 00 00 00 00 00 00 00 00 02 00 00     ................
    1a88:	00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 02     ................
    1a98:	02 00 00 00 00 00 00 00 00 00 00 02 42 42 42 42     ............BBBB
    1aa8:	42 42 02 00 00 00 00 00 00 00 00 00 00 02 02 00     BB..............
	...
    1ac0:	00 02 4d 4d 4d 4d 4d 4d 02 00 00 00 00 00 00 00     ..MMMMMM........
    1ad0:	00 00 00 02 02 00 58 00 00 00 00 00 00 00 00 02     ......X.........
    1ae0:	4d 4d 4d 4d 4d 4d 02 00 00 00 00 00 00 00 63 00     MMMMMM........c.
    1af0:	00 02 02 00 00 00 00 00 00 00 00 00 00 02 4d 4d     ..............MM
    1b00:	2c 4d 4d 4d 02 00 00 00 00 00 00 00 00 00 00 02     ,MMM............
    1b10:	02 00 00 00 00 00 00 00 00 00 00 02 4d 4d 4d 4d     ............MMMM
    1b20:	4d 4d 02 00 00 00 00 00 00 00 00 00 00 02 02 00     MM..............
	...
    1b38:	00 02 42 42 42 42 42 42 02 00 00 00 00 00 00 00     ..BBBBBB........
    1b48:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 02     ................
    1b58:	00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00     ................
    1b68:	00 02 02 00 00 00 00 00 00 00 00 00 00 02 00 07     ................
    1b78:	00 00 09 00 02 00 00 00 00 00 00 00 00 00 00 02     ................
    1b88:	02 00 00 00 00 00 00 00 00 00 00 02 05 00 00 00     ................
    1b98:	00 06 02 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
    1ba8:	00 00 00 01 01 01 01 01 00 02 02 05 00 00 06 02     ................
    1bb8:	02 00 01 01 01 01 01 00 00 00 00 02 02 00 00 00     ................
    1bc8:	00 01 01 01 01 01 00 02 02 02 02 02 02 02 02 00     ................
    1bd8:	01 01 01 01 01 00 00 00 00 02 02 00 00 00 00 01     ................
    1be8:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1bf8:	00 01 01 00 00 00 00 02 02 00 00 00 00 01 01 00     ................
    1c08:	08 00 00 00 00 00 00 00 00 00 00 00 00 08 00 01     ................
    1c18:	01 00 00 00 00 02 02 00 00 00 00 01 01 00 00 00     ................
	...
    1c34:	00 01 01 00 00 00 00 02 02 00 00 00 00 00 00 00     ................
	...
    1c58:	00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1c68:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1c78:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1c88:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1c98:	03 00 00 00 00 00 00 00 00 04 02 02 02 02 02 02     ................
    1ca8:	03 00 00 00 00 00 00 00 00 04 02 02 02 03 00 00     ................
	...
    1cc0:	04 02 02 02 02 03 00 00 00 00 00 00 00 00 00 00     ................
    1cd0:	04 02 02 00 00 00 01 01 01 01 01 00 00 00 00 04     ................
    1ce0:	02 02 03 00 00 00 00 01 01 01 01 01 00 00 00 02     ................
    1cf0:	02 00 00 00 01 00 00 00 01 00 00 00 00 00 04 03     ................
    1d00:	00 00 00 00 00 01 00 00 00 01 00 00 00 02 02 00     ................
    1d10:	00 00 01 00 09 00 01 00 00 00 00 00 00 00 00 00     ................
    1d20:	00 00 00 01 00 07 00 01 00 00 00 02 02 00 00 00     ................
    1d30:	01 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00     ................
    1d40:	00 01 00 00 00 01 00 00 00 02 02 00 00 00 01 01     ................
    1d50:	01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
    1d60:	01 01 01 01 00 00 00 02 02 00 00 00 00 00 00 00     ................
	...
    1d84:	00 02 02 05 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1da0:	00 00 06 02 02 02 05 00 00 00 00 00 00 00 00 00     ................
    1db0:	01 01 01 01 01 01 01 00 00 00 00 00 00 00 00 06     ................
    1dc0:	02 02 02 02 02 05 00 58 00 00 00 00 00 00 01 00     .......X........
    1dd0:	00 00 00 00 01 00 00 00 00 63 00 00 06 02 02 02     .........c......
    1de0:	02 02 02 03 00 00 00 00 00 00 00 00 01 00 00 08     ................
    1df0:	00 00 01 00 00 00 00 00 00 00 04 02 02 02 02 02     ................
    1e00:	03 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00     ................
    1e10:	01 00 00 00 00 00 00 00 00 04 02 02 02 03 00 00     ................
	...
    1e28:	01 01 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
    1e38:	04 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1e54:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1e74:	00 02 02 00 00 00 01 01 01 01 01 00 00 00 00 00     ................
    1e84:	00 00 00 00 00 00 00 01 01 01 01 01 00 00 00 02     ................
    1e94:	02 00 00 00 01 00 00 00 01 00 00 00 00 00 00 00     ................
    1ea4:	00 00 00 00 00 01 00 00 00 01 00 00 00 02 02 00     ................
    1eb4:	00 00 01 00 07 00 01 00 00 00 00 00 00 00 00 00     ................
    1ec4:	00 00 00 01 00 09 00 01 00 00 00 02 02 00 00 00     ................
    1ed4:	01 00 00 00 01 00 00 00 00 00 06 05 00 00 00 00     ................
    1ee4:	00 01 00 00 00 01 00 00 00 02 02 00 00 00 01 01     ................
    1ef4:	01 01 01 00 00 00 00 06 02 02 05 00 00 00 00 01     ................
    1f04:	01 01 01 01 00 00 00 02 02 05 00 00 00 00 00 00     ................
    1f14:	00 00 00 00 06 02 02 02 02 05 00 00 00 00 00 00     ................
    1f24:	00 00 00 00 06 02 02 02 05 00 00 00 00 00 00 00     ................
    1f34:	00 06 02 02 02 02 02 02 05 00 00 00 00 00 00 00     ................
    1f44:	00 06 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1f54:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1f64:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1f74:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1f84:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1fa0:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1fbc:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1fdc:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1ff8:	00 00 00 02 02 00 00 00 00 00 00 00 02 02 02 02     ................
    2008:	02 02 02 02 02 02 02 02 02 02 00 00 00 00 00 00     ................
    2018:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2034:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    204c:	01 01 01 01 01 01 01 01 01 02 02 00 00 07 00 00     ................
    205c:	09 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01     ................
    206c:	01 01 01 01 01 01 01 02 02 00 00 00 00 00 00 00     ................
    207c:	00 00 00 00 00 42 42 42 42 00 00 00 01 01 01 01     .....BBBB.......
    208c:	01 01 01 01 01 02 02 00 00 00 00 00 00 00 00 00     ................
    209c:	00 00 00 42 4d 4d 42 00 00 00 01 01 01 00 00 00     ...BMMB.........
    20ac:	00 01 01 02 02 00 00 00 58 00 00 00 00 00 00 00     ........X.......
    20bc:	00 42 4d 4d 42 00 00 00 01 01 01 00 63 00 00 01     .BMMB.......c...
    20cc:	01 02 02 00 00 00 00 00 00 00 00 00 00 00 00 42     ...............B
    20dc:	4d 4d 42 00 00 00 01 01 01 00 00 00 00 01 01 02     MMB.............
    20ec:	02 00 00 00 00 00 00 00 00 00 00 00 00 42 2c 4d     .............B,M
    20fc:	42 00 00 00 01 01 01 00 00 00 00 01 01 02 02 00     B...............
	...
    2114:	00 00 00 42 4d 4d 42 00 00 00 01 01 01 01 01 01     ...BMMB.........
    2124:	01 01 01 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
    2134:	00 42 42 42 42 00 00 00 01 01 01 01 01 01 01 01     .BBBB...........
    2144:	01 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2154:	00 00 00 00 00 00 01 01 01 01 01 01 01 01 01 02     ................
    2164:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2180:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    219c:	00 00 00 02 02 00 00 00 00 00 00 00 02 02 02 02     ................
    21ac:	02 02 02 02 02 02 02 02 02 02 00 00 00 00 00 00     ................
    21bc:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    21d8:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    21f8:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2214:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2234:	00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2244:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2254:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2264:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 00     ................
	...
    228c:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    22ac:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    22c8:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    22e8:	00 02 02 00 00 00 00 00 00 00 02 02 02 02 02 02     ................
    22f8:	02 02 02 02 02 02 02 02 00 00 00 00 00 00 00 02     ................
    2308:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2324:	00 02 02 01 01 01 01 01 01 01 01 01 00 00 00 00     ................
	...
    2340:	00 00 00 02 02 01 01 01 01 01 01 01 01 01 00 00     ................
	...
    2358:	00 00 00 07 00 00 09 00 00 02 02 01 01 01 01 01     ................
    2368:	01 01 01 01 00 00 00 42 42 42 42 00 00 00 00 00     .......BBBB.....
    2378:	00 00 00 00 00 00 00 02 02 01 01 00 00 00 00 01     ................
    2388:	01 01 00 00 00 42 4d 4d 42 00 00 00 00 00 00 00     .....BMMB.......
    2398:	00 00 00 00 00 02 02 01 01 00 58 00 00 01 01 01     ..........X.....
    23a8:	00 00 00 42 4d 4d 42 00 00 00 00 00 00 00 63 00     ...BMMB.......c.
    23b8:	00 00 00 02 02 01 01 00 00 00 00 01 01 01 00 00     ................
    23c8:	00 42 4d 2c 42 00 00 00 00 00 00 00 00 00 00 00     .BM,B...........
    23d8:	00 02 02 01 01 00 00 00 00 01 01 01 00 00 00 42     ...............B
    23e8:	4d 4d 42 00 00 00 00 00 00 00 00 00 00 00 00 02     MMB.............
    23f8:	02 01 01 01 01 01 01 01 01 01 00 00 00 42 4d 4d     .............BMM
    2408:	42 00 00 00 00 00 00 00 00 00 00 00 00 02 02 01     B...............
    2418:	01 01 01 01 01 01 01 01 00 00 00 42 42 42 42 00     ...........BBBB.
	...
    2430:	00 00 00 02 02 01 01 01 01 01 01 01 01 01 00 00     ................
	...
    2450:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    246c:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    248c:	00 02 02 00 00 00 00 00 00 00 02 02 02 02 02 02     ................
    249c:	02 02 02 02 02 02 02 02 00 00 00 00 00 00 00 02     ................
    24ac:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    24c8:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    24e4:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2504:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2520:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2530:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2540:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2550:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2560:	02 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00     ................
    2570:	00 00 01 01 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    2588:	01 01 00 00 00 00 00 00 01 01 00 00 00 00 00 00     ................
    2598:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 01 01     ................
    25a8:	00 00 00 00 00 00 01 01 00 00 00 00 00 00 00 00     ................
    25b8:	00 02 02 00 58 00 00 00 00 00 00 00 01 01 00 00     ....X...........
    25c8:	00 00 00 00 01 01 00 00 00 00 00 00 00 00 00 02     ................
    25d8:	02 00 00 00 00 00 00 00 00 00 01 01 00 07 00 00     ................
    25e8:	09 00 01 01 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    2600:	01 01 00 00 00 00 00 00 01 01 00 00 00 00 00 00     ................
    2610:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 01 01     ................
    2620:	01 01 01 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
    2630:	00 02 02 00 00 00 00 00 00 00 00 00 01 01 01 01     ................
    2640:	01 01 01 01 01 01 00 00 00 00 00 00 00 00 00 02     ................
    2650:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    266c:	00 02 02 37 37 37 37 37 37 37 37 37 37 37 37 37     ...7777777777777
    267c:	37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 02     777777777777777.
    268c:	02 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     .MMMMMMMMMMMMMMM
    269c:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d     MMMMMMMMMMMMM..M
    26ac:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 2c 4d 4d 4d 4d     MMMMMMMMMMM,MMMM
    26bc:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d     MMMMMMMMMMM..MMM
    26cc:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    26dc:	4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 37 37 37 37 37     MMMMMMMMM..77777
    26ec:	37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37     7777777777777777
    26fc:	37 37 37 37 37 37 37 02 02 00 00 00 00 00 00 00     7777777.........
	...
    2720:	00 02 02 00 00 00 00 00 00 00 00 00 01 01 01 01     ................
    2730:	01 01 01 01 01 01 00 00 00 00 00 00 00 00 00 02     ................
    2740:	02 00 00 00 00 00 00 00 00 00 01 01 01 01 01 01     ................
    2750:	01 01 01 01 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    2768:	01 01 00 00 00 00 00 00 01 01 00 00 00 00 00 00     ................
    2778:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 01 01     ................
    2788:	00 09 00 00 07 00 01 01 00 00 00 00 00 00 00 00     ................
    2798:	00 02 02 00 00 00 00 00 00 00 00 00 01 01 00 00     ................
    27a8:	00 00 00 00 01 01 00 00 00 00 00 00 63 00 00 02     ............c...
    27b8:	02 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00     ................
    27c8:	00 00 01 01 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    27e0:	01 01 00 00 00 00 00 00 01 01 00 00 00 00 00 00     ................
    27f0:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 01 01     ................
    2800:	00 00 00 00 00 00 01 01 00 00 00 00 00 00 00 00     ................
    2810:	00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2820:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2830:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2840:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 4d     ...............M
    2850:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    2860:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d     MMMMMMMMMMM..MMM
    2870:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    2880:	4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d 4d 4d     MMMMMMMMM..MMMMM
    2890:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    28a0:	4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d 4d 4d 4d 4d     MMMMMMM..MMMMMMM
    28b0:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    28c0:	4d 4d 4d 4d 4d 02 02 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMM..MMMMMMMMM
    28d0:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    28e0:	4d 4d 4d 02 02 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMM..MMMMMMMMMMM
    28f0:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    2900:	4d 02 02 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     M..MMMMMMMMMMMMM
    2910:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02     MMMMMMMMMMMMMMM.
    2920:	02 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     .MMMMMMMMMMMMMMM
    2930:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d     MMMMMMMMMMMMM..M
    2940:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    2950:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d     MMMMMMMMMMM..MMM
    2960:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    2970:	4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d 4d 4d     MMMMMMMMM..MMMMM
    2980:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    2990:	4d 4d 4d 4d 4d 4d 4d 02 02 37 37 37 37 37 37 37     MMMMMMM..7777777
    29a0:	37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37     7777777777777777
    29b0:	37 37 37 37 37 02 02 00 00 00 00 00 00 00 00 00     77777...........
	...
    29d0:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    29f0:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2a0c:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2a2c:	00 02 02 00 00 00 58 00 00 00 00 00 00 00 00 00     ......X.........
	...
    2a44:	00 00 00 63 00 00 00 02 02 00 00 00 00 00 00 00     ...c............
	...
    2a68:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2a84:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2aa4:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2ac0:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
    2ad0:	00 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2ae0:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2afc:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2b0c:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2b1c:	02 02                                               ..

00002b1e <sprites_data>:
    2b1e:	fe fe fe fe fe fe fe 87 fe fe fe fe fe fe 87 87     ................
    2b2e:	fe fe fe fe fe fe 87 87 fe fe fe fe 85 85 85 87     ................
    2b3e:	fe fe fe 85 87 87 87 85 fe fe 85 87 87 87 87 85     ................
    2b4e:	fe 85 87 87 87 85 85 87 85 87 87 85 85 87 87 87     ................
    2b5e:	87 87 87 fe fe fe fe fe d2 d2 eb d2 fe fe fe fe     ................
    2b6e:	87 d2 fd eb fe fe fe fe 87 87 eb d2 fe fe fe fe     ................
    2b7e:	85 87 87 d2 fe fe fe fe 87 85 85 87 ef fe fe fe     ................
    2b8e:	87 ef 87 87 87 ef fe fe ef ff ef 87 87 ef fe fe     ................
    2b9e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 87     ................
    2bae:	fe fe fe fe fe fe 87 87 fe fe fe fe fe fe 87 87     ................
    2bbe:	fe fe fe fe 85 85 85 87 fe fe fe 85 87 87 87 85     ................
    2bce:	fe fe 85 87 87 87 87 85 fe 85 87 87 87 85 85 87     ................
    2bde:	fe fe fe fe fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    2bee:	d2 d2 eb d2 fe fe fe fe 87 d2 fd eb fe fe fe fe     ................
    2bfe:	87 87 eb d2 fe fe fe fe 85 87 87 d2 fe fe fe fe     ................
    2c0e:	87 85 85 87 ef fe fe fe 87 ef 87 87 87 ef fe fe     ................
    2c1e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2c2e:	fe fe fe fe fe fe fe fe fe ba ba ba ba ba ba fe     ................
    2c3e:	ba bd bd bd bd bd bd ba fe ba ba ba ba ba ba fe     ................
    2c4e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2c5e:	fe fe 46 46 46 46 46 46 fe a5 a5 a5 47 47 46 fe     ..FFFFFF....GGF.
    2c6e:	fe 46 46 47 47 46 3f 3f 46 46 47 47 46 fe fe fe     .FFGGF??FFGGF...
    2c7e:	46 46 47 47 46 fe fe fe fe 46 46 47 47 3f 3f fe     FFGGF....FFGG??.
    2c8e:	fe a5 a5 a5 47 fe fe fe fe fe 46 46 46 46 fe fe     ....G.....FFFF..
    2c9e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2cae:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2cbe:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2cce:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2cde:	85 87 87 85 fe 85 87 87 fe 85 87 85 fe 85 87 87     ................
    2cee:	fe 85 87 87 ad ad ad ad fe fe 85 87 ad ad ad ad     ................
    2cfe:	fe fe 85 87 ad ad ad ad fe fe fe 85 a4 ad 87 87     ................
    2d0e:	fe fe fe fe a4 a4 85 87 fe fe fe fe a4 a4 85 87     ................
    2d1e:	87 ef 87 85 87 ef fe fe 87 87 87 85 87 87 ef fe     ................
    2d2e:	ad ad ad ad ad 87 ef fe ad ad ad ad ad ad a4 ad     ................
    2d3e:	ad ad ad ad ad a4 a4 a4 87 87 87 ef fe fe fe fe     ................
    2d4e:	87 87 87 ef fe fe fe fe 87 87 87 ef fe fe fe fe     ................
    2d5e:	87 ef 87 85 87 ef fe fe 87 87 87 85 87 87 ef fe     ................
    2d6e:	ad ad ad ad ad 87 ef fe ad ad ad ad ad ad a4 ad     ................
    2d7e:	ad ad ad ad ad a4 a4 a4 87 87 87 ef fe fe fe fe     ................
    2d8e:	87 87 87 ef fe fe fe fe 87 87 ef fe fe fe fe fe     ................
    2d9e:	85 87 87 85 85 87 87 87 85 87 87 85 fe 85 87 87     ................
    2dae:	fe 85 87 85 fe 85 87 87 fe 85 87 87 ad ad ad ad     ................
    2dbe:	fe fe 85 87 ad ad ad ad fe fe 85 87 ad ad ad ad     ................
    2dce:	fe fe fe 85 a4 ad 87 87 fe fe fe fe a4 a4 85 87     ................
    2dde:	ef ff ef 87 87 ef fe fe 87 ef 87 85 87 ef fe fe     ................
    2dee:	87 87 87 85 87 87 ef fe ad ad ad ad ad 87 ef fe     ................
    2dfe:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    2e0e:	87 87 87 ef fe fe fe fe 87 87 ef fe fe fe fe fe     ................
    2e1e:	ef ff ef 87 87 ef fe fe 87 ef 87 85 87 ef fe fe     ................
    2e2e:	87 87 87 85 87 87 ef fe ad ad ad ad ad 87 ef fe     ................
    2e3e:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    2e4e:	87 87 87 ef fe fe fe fe 87 87 87 87 ef fe fe fe     ................
    2e5e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2e6e:	fe fe fe 27 07 fe fe fe fe fe 27 77 27 07 fe fe     ...'......'w'...
    2e7e:	fe fe 07 27 07 07 fe fe fe fe fe 07 07 fe fe fe     ...'............
    2e8e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2e9e:	fe fe fe fe fe fe 85 87 fe fe fe fe fe fe 85 87     ................
    2eae:	fe fe fe fe fe 85 87 ef fe fe fe fe fe 85 87 ef     ................
    2ebe:	fe fe fe fe 85 87 ef fe fe fe fe fe 85 87 ef fe     ................
    2ece:	fe fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4     ................
    2ede:	ef fe 85 ef fe fe fe fe ef fe 85 85 ef fe fe fe     ................
    2eee:	fe fe 85 85 ef fe fe fe fe fe 85 85 ef fe fe fe     ................
    2efe:	fe fe 85 85 ef fe fe fe fe fe 85 85 ef fe fe fe     ................
    2f0e:	fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe     ................
    2f1e:	fe fe fe fe fe fe fe 85 fe fe fe fe fe fe fe 85     ................
    2f2e:	fe fe fe fe fe 85 85 87 fe fe fe fe 85 87 87 87     ................
    2f3e:	fe fe fe a4 87 87 87 ef fe fe fe a4 ef ef ef fe     ................
    2f4e:	fe fe fe a4 a4 fe fe fe fe fe fe a4 a4 a4 fe fe     ................
    2f5e:	87 87 85 fe fe fe fe fe 87 87 87 85 fe fe fe fe     ................
    2f6e:	87 87 87 ef fe fe fe fe 87 ef ef fe fe fe fe fe     ................
    2f7e:	ef 85 ef fe fe fe fe fe 85 85 ef fe fe fe fe fe     ................
    2f8e:	a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe fe fe     ................
    2f9e:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 85 ef     ................
    2fae:	fe fe fe fe 85 85 85 ef a4 a4 85 85 85 85 ef fe     ................
    2fbe:	a4 a4 85 85 85 85 ef fe a4 a4 ef ef ef ef fe fe     ................
    2fce:	a4 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2fde:	87 87 ef fe fe fe fe fe fe 85 87 ef fe fe fe fe     ................
    2fee:	fe 85 87 87 ef fe fe fe fe fe 85 87 ef fe fe fe     ................
    2ffe:	fe fe 85 87 87 ef fe fe fe fe fe 85 87 ef fe fe     ................
    300e:	fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe     ................
    301e:	fe fe fe fe fe fe fe 85 fe fe fe fe fe fe fe 85     ................
    302e:	fe fe fe fe fe 85 85 85 fe fe fe fe 85 85 85 85     ................
    303e:	fe fe fe a4 85 85 85 ef fe fe fe a4 ef ef ef fe     ................
    304e:	fe fe fe a4 a4 fe fe fe fe fe fe a4 a4 a4 fe fe     ................
    305e:	87 87 ef fe fe fe fe fe 85 87 ef 85 fe fe fe fe     ................
    306e:	85 87 ef ef fe fe fe fe 85 87 ef fe fe fe fe fe     ................
    307e:	85 87 ef fe fe fe fe fe 85 87 ef fe fe fe fe fe     ................
    308e:	a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe fe fe     ................
    309e:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 85 ef     ................
    30ae:	fe fe fe fe 85 85 85 ef a4 a4 85 85 85 85 a4 a4     ................
    30be:	a4 a4 85 85 85 85 a4 a4 a4 a4 ef ef ef ef a4 a4     ................
    30ce:	a4 fe fe fe fe fe a4 fe fe fe fe fe fe fe fe fe     ................
    30de:	87 87 85 87 ef fe fe fe fe fe 85 87 87 ef fe fe     ................
    30ee:	fe fe 85 87 87 ef fe fe 85 85 85 87 ef fe fe fe     ................
    30fe:	87 87 87 87 ef fe fe fe ef ef ef ef fe fe fe fe     ................
    310e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    311e:	fe fe fe fe fe fe fe fe fe fe 12 12 12 12 fe fe     ................
    312e:	ad 12 0f 1f 1f 0f 12 ad ad 12 12 12 12 12 12 ad     ................
    313e:	ad ad 12 12 12 12 ad ad ad 12 ad 12 12 ad 12 ad     ................
    314e:	ad fe 12 12 12 12 fe ad ad fe fe fe fe fe fe ad     ................
    315e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 7f     ................
    316e:	fe fe fe fe fe 7f 7f 7f fe fe fe fe 7f 7f 7f 7f     ................
    317e:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe fe fe     ................
    318e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    319e:	a4 fe fe fe fe fe fe fe a4 ad fe fe ff ff a4 ad     ................
    31ae:	a4 ad f6 ff ff a4 ad f6 a4 ad f6 ff a4 ad f6 ff     ................
    31be:	a4 ad fe fe a4 ad f6 ff a4 fe fe a4 a4 ad f6 fe     ................
    31ce:	fe fe fe a4 a4 ad f6 f6 fe fe fe fe fe fe fe fe     ................
    31de:	fe fe fe fe fe fe fe fe f6 ff ff ff d2 fe fe fe     ................
    31ee:	ff ff ff ff d2 eb fe fe ff fe ff ff eb fd d2 fe     ................
    31fe:	fe fe fe ff d2 eb d2 d2 fe fe fe fe fe fe fe fe     ................
    320e:	f6 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    321e:	fe fe bf 7f 7f bf fe fe fe 7f 7f 7f 7f 7f 7f fe     ................
    322e:	bf 7f 7f 7f 7f 7f 7f bf 7f 7f 7f 7f 7f 7f 7f 7f     ................
    323e:	7f 7f 7f 7f 7f 7f 7f 7f bf 7f 7f 7f 7f 7f 7f bf     ................
    324e:	fe 7f 7f 7f 7f 7f 7f fe fe fe bf 7f 7f bf fe fe     ................
    325e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    326e:	fe fe fe 7f 7f fe fe fe fe fe 7f 7f 7f 7f fe fe     ................
    327e:	fe fe 7f 7f 7f 7f fe fe fe fe fe 7f 7f fe fe fe     ................
    328e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    329e:	fe fe bf 7f 7f bf fe fe fe 7f 7f 7f 7f 7f 7f fe     ................
    32ae:	bf 7f fe fe 7f 7f 7f bf 7f fe fe fe fe 7f 7f 7f     ................
    32be:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe 7f bf     ................
    32ce:	fe fe fe fe fe fe 7f fe fe fe fe fe fe bf fe fe     ................
    32de:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    32ee:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    32fe:	fe fe fe bf e3 fe fe fe fe fe fe fe fe fe fe fe     ................
    330e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    331e:	fe fe fe fe fe fe fe fe fe fe fe fe ff fe fe fe     ................
    332e:	fe fe fe fe 7f ff fe fe fe fe fe fe 7f 7f ff fe     ................
    333e:	fe fe fe fe 7f 7f 7f ff fe fe fe fe 7f 7f 7f fe     ................
    334e:	fe fe fe fe 7f 7f fe fe fe fe fe fe 7f fe fe fe     ................
    335e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    336e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    337e:	7f 7f 7f 7f 7f 7f ff fe fe 7f 7f 7f 7f ff fe fe     ................
    338e:	fe fe 7f 7f ff fe fe fe fe fe fe fe fe fe fe fe     ................
    339e:	fe fe fe ff fe fe fe fe fe fe ff 7f 7f fe fe fe     ................
    33ae:	fe ff 7f 7f 7f 7f fe fe ff 7f 7f 7f 7f 7f 7f fe     ................
    33be:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    33ce:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    33de:	fe fe 12 12 12 12 fe fe fe 12 0f 1f 1f 0f 12 fe     ................
    33ee:	ad 12 12 12 12 12 12 ad ad 12 ad 12 12 ad 12 ad     ................
    33fe:	ad ad 12 12 12 12 ad ad ad fe 12 12 12 12 fe ad     ................
    340e:	ad fe fe fe fe fe fe ad ad fe fe fe fe fe fe ad     ................
    341e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 7f     ................
    342e:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe fe 7f     ................
    343e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    344e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    345e:	a4 fe fe fe fe fe fe fe a4 a4 fe fe fe fe fe fe     ................
    346e:	a4 a4 ad fe fe fe fe fe a4 a4 ad ad fe fe fe fe     ................
    347e:	a4 a4 ad ad f6 fe fe fe a4 a4 ad ad f6 f6 ff ff     ................
    348e:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    349e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    34ae:	fe fe ff ff ff ff a4 a4 fe ff ff ff ff a4 a4 a4     ................
    34be:	ff ff ff ff ff a4 a4 a4 ff ff ff ff a4 a4 a4 ad     ................
    34ce:	ff ff ff ff a4 a4 ad ad ff ff ff a4 a4 ad ad f6     ................
    34de:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    34ee:	a4 ad ad f6 f6 ff ff ff a4 ad ad f6 f6 ff ff ff     ................
    34fe:	ad ad f6 f6 ff ff ff ff ad f6 f6 ff ff ff ff ff     ................
    350e:	f6 f6 ff ff ff ff ff ff f6 ff ff fe fe ff ff ff     ................
    351e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    352e:	d2 fe fe fe fe fe fe fe d2 d2 fe fe fe fe fe fe     ................
    353e:	d2 d2 d2 fe fe fe fe fe d2 d3 eb d3 fe fe fe fe     ................
    354e:	d2 eb fd eb d2 fe fe fe d2 d3 eb d3 d2 d2 fe fe     ................
    355e:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    356e:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 fe fe fe     ................
    357e:	a4 a4 ad ad fe fe fe fe a4 a4 ad fe fe fe fe fe     ................
    358e:	a4 a4 fe fe fe fe fe fe a4 fe fe fe fe fe fe fe     ................
    359e:	ff ff fe a4 ad ad f6 f6 ff fe a4 a4 ad ad f6 f6     ................
    35ae:	fe fe a4 a4 ad ad f6 f6 fe a4 a4 a4 ad ad f6 f6     ................
    35be:	fe a4 a4 a4 a4 ad ad f6 a4 a4 a4 a4 a4 a4 ad ad     ................
    35ce:	a4 a4 a4 a4 a4 a4 a4 ad a4 a4 a4 a4 a4 a4 a4 a4     ................
    35de:	ff ff fe fe fe fe ff ff ff fe fe fe fe fe fe ff     ................
    35ee:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    35fe:	f6 fe fe fe fe fe fe fe f6 f6 fe fe fe fe fe fe     ................
    360e:	ad f6 f6 fe fe fe fe fe ad ad f6 f6 fe fe fe fe     ................
    361e:	d2 d2 d2 d2 d2 d2 d2 fe ff ff ff ff ff ff ff ff     ................
    362e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    363e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    364e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    365e:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 87 ef     ................
    366e:	fe fe fe fe 85 87 87 ef a4 a4 85 85 85 87 ef fe     ................
    367e:	a4 a4 87 87 87 87 ef fe a4 a4 ef ef ef ef fe fe     ................
    368e:	a4 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    369e:	87 87 ef fe fe fe fe fe fe 85 85 ef fe fe fe fe     ................
    36ae:	fe 85 85 85 ef fe fe fe fe fe 85 85 ef fe fe fe     ................
    36be:	fe fe 85 85 85 ef fe fe fe fe fe 85 85 ef fe fe     ................
    36ce:	fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe     ................

000036de <map_enemy_spider_1>:
    36de:	01 01 23                                            ..#

000036e1 <map_enemy_spider_0>:
    36e1:	01 01 18                                            ...

000036e4 <map_enemy_shark>:
    36e4:	01 01 05                                            ...

000036e7 <map_enemy_shot>:
    36e7:	01 01 0d                                            ...

000036ea <map_hero_shot>:
    36ea:	01 01 04                                            ...

000036ed <map_hero_ship_large>:
    36ed:	04 02 25 26 27 28 29 2a 2b 2c                       ..%&'()*+,

000036f7 <map_hero_ship_1>:
    36f7:	03 01 24 1a 1b                                      ..$..

000036fc <map_hero_ship_0>:
    36fc:	03 01 19 1a 1b                                      .....

00003701 <map_hero_jump>:
    3701:	02 03 02 03 0a 0c 16 17                             ........

00003709 <map_hero_step_3>:
    3709:	02 03 02 03 0a 0b 2d 2e                             ......-.

00003711 <map_hero_step_2>:
    3711:	02 03 00 01 07 09 14 15                             ........

00003719 <map_hero_step_1>:
    3719:	02 03 02 03 0a 0b 12 13                             ........

00003721 <map_hero_step_0>:
    3721:	02 03 00 01 07 09 10 11                             ........

00003729 <map_hero_idle>:
    3729:	02 03 00 01 07 08 0e 0f                             ........

00003731 <map_explosion_2>:
    3731:	01 01 1e                                            ...

00003734 <map_explosion_1>:
    3734:	01 01 1d                                            ...

00003737 <map_explosion_0>:
    3737:	01 01 1c                                            ...

0000373a <map_meteor>:
    373a:	01 01 1f                                            ...

0000373d <map_up_arrow>:
    373d:	01 01 22                                            .."

00003740 <map_down_arrow>:
    3740:	01 01 21                                            ..!

00003743 <map_right_arrow>:
    3743:	01 01 20                                            .. 

00003746 <map_none>:
    3746:	01 01 06                                            ...

00003749 <tiles_data>:
    3749:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    3759:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    3769:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    3779:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    3789:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3799:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    37a9:	ff f8 fb f8 fb f8 f8 fd ff fb f8 f8 fb f8 f8 f8     ................
    37b9:	ff f8 f8 fb f8 f8 f8 f8 ff f8 f8 f8 f8 f8 f8 f8     ................
    37c9:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    37d9:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    37e9:	fd f8 fb f8 fb f8 f8 fd f8 fb f8 f8 fb f8 f8 f8     ................
    37f9:	f8 f8 f8 fb f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    3809:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3819:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    3829:	fd f8 fb f8 fb f8 f8 ff f8 fb f8 f8 fb f8 f8 ff     ................
    3839:	f8 f8 f8 fb f8 f8 f8 ff f8 f8 f8 f8 f8 f8 f8 ff     ................
    3849:	fa f8 f8 f8 f8 f8 f8 f8 f8 f8 fb f8 f8 f8 fb f8     ................
    3859:	f8 f8 fb f8 fb fb f8 f8 f8 f8 f8 fb f8 f8 f8 f8     ................
    3869:	f8 f8 fb f8 fb f8 f8 f8 f8 fb f8 f8 fb f8 f8 f8     ................
    3879:	f8 f8 f8 fb f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    3889:	ac ac ac ac ac ac ac ac ac ac ac ac ac ac ac ac     ................
    3899:	ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad     ................
    38a9:	ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae     ................
    38b9:	af af af af af af af af af af af af af af af af     ................
    38c9:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    38d9:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    38e9:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    38f9:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    3909:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    3919:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    3929:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    3939:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    3949:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    3959:	ab ab ab ab ab ab ab ab ab ad ad ad ad ad ad ab     ................
    3969:	ae ae ae ae ae ae ae ae ab ae ae ae ae ae ae ab     ................
    3979:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    3989:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab a0     ................
    3999:	ab ab ab ab ab a0 a0 a0 ab ab ab ab a0 a0 a0 a0     ................
    39a9:	ab ab ab a0 a0 a0 a0 a0 ab ab a0 a0 a0 a0 a0 a0     ................
    39b9:	ab ab a0 a0 a0 a0 a0 a0 ab a0 a0 a0 a0 a0 a0 a0     ................
    39c9:	ab a4 ff ff ff ff ff ab a0 a0 a4 ff ff ff ff ff     ................
    39d9:	a0 a0 a0 a4 ff ff ff ff a0 a0 a0 a0 a4 ff ff ff     ................
    39e9:	a0 a0 a0 a0 a0 a4 ff ff a0 a0 a0 a0 a0 a0 a4 ff     ................
    39f9:	a0 a0 a0 a0 a0 a0 a4 ff a0 a0 a0 a0 a0 a0 a0 a4     ................
    3a09:	ab ab ab ab ab ab ab ab ff ab ab ab ab ab ab ab     ................
    3a19:	ff ff ff ab ab ab ab ab ff ff ff ff ab ab ab ab     ................
    3a29:	ff ff ff ff ff ab ab ab ff ff ff ff ff ff ab ab     ................
    3a39:	ff ff ff ff ff ff ab ab ff ff ff ff ff ff ff ab     ................
    3a49:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    3a59:	40 40 40 40 40 40 40 40 40 40 40 e3 40 40 40 40     @@@@@@@@@@@.@@@@
    3a69:	40 40 e3 ff e3 40 40 40 40 40 40 e3 40 40 40 40     @@...@@@@@@.@@@@
    3a79:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    3a89:	ab a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    3a99:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    3aa9:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    3ab9:	a0 a0 a0 a0 a0 a0 a0 a0 ab a0 a0 a0 a0 a0 a0 a0     ................
    3ac9:	a0 a0 a0 a0 a0 a0 a0 a4 a0 a0 a0 a0 a0 a0 a0 a0     ................
    3ad9:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    3ae9:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    3af9:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a4     ................
    3b09:	ff ff ff ff ff ff ff ab a4 ff ff ff ff ff ff ff     ................
    3b19:	a4 ff ff ff ff ff ff ff a4 ff ff ff ff ff ff ff     ................
    3b29:	a4 ff ff ff ff ff ff ff a4 ff ff ff ff ff ff ff     ................
    3b39:	a4 ff ff ff ff ff ff ff ff ff ff ff ff ff ff ab     ................
    3b49:	ab a0 a0 a0 a0 a0 a0 a0 ab ab a0 a0 a0 a0 a0 a0     ................
    3b59:	ab ab a0 a0 a0 a0 a0 a0 ab ab ab a0 a0 a0 a0 a0     ................
    3b69:	ab ab ab ab a0 a0 a0 a0 ab ab ab ab ab a0 a0 a0     ................
    3b79:	ab ab ab ab ab ab ab a0 ab ab ab ab ab ab ab ab     ................
    3b89:	a0 a0 a0 a0 a0 a0 a0 a4 a0 a0 a0 a0 a0 a0 a4 ff     ................
    3b99:	a0 a0 a0 a0 a0 a0 a4 ff a0 a0 a0 a0 a0 a4 ff ff     ................
    3ba9:	a0 a0 a0 a0 a4 ff ff ff a0 a0 a0 a4 ff ff ff ff     ................
    3bb9:	a0 a0 a4 ff ff ff ff ff ab a4 ff ff ff ff ff ab     ................
    3bc9:	ff ff ff ff ff ff ff ab ff ff ff ff ff ff ab ab     ................
    3bd9:	ff ff ff ff ff ff ab ab ff ff ff ff ff ab ab ab     ................
    3be9:	ff ff ff ff ab ab ab ab ff ff ff ab ab ab ab ab     ................
    3bf9:	ff ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    3c09:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3c19:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3c29:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3c39:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3c49:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 96 96     @@@@@@@@@@@@@@..
    3c59:	40 40 40 40 40 96 96 96 40 40 40 40 96 96 96 96     @@@@@...@@@@....
    3c69:	40 40 40 96 96 96 96 96 40 40 96 96 96 96 96 96     @@@.....@@......
    3c79:	40 40 96 96 96 96 96 96 40 96 96 96 96 96 96 96     @@......@.......
    3c89:	40 96 96 96 96 96 96 40 96 96 96 96 96 96 96 96     @......@........
    3c99:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3ca9:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3cb9:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3cc9:	40 40 40 40 40 40 40 40 96 96 40 40 40 40 40 40     @@@@@@@@..@@@@@@
    3cd9:	96 96 96 40 40 40 40 40 96 96 96 96 40 40 40 40     ...@@@@@....@@@@
    3ce9:	96 96 96 96 96 40 40 40 96 96 96 96 96 96 40 40     .....@@@......@@
    3cf9:	96 96 96 96 96 96 40 40 96 96 96 96 96 96 96 40     ......@@.......@
    3d09:	bf bf bf bf bf bf bf bf 40 40 40 40 40 40 40 40     ........@@@@@@@@
    3d19:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    3d29:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    3d39:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    3d49:	40 96 96 96 95 96 96 96 40 96 96 96 95 96 96 96     @.......@.......
    3d59:	96 96 96 96 96 95 96 96 96 96 96 96 96 95 96 96     ................
    3d69:	96 96 96 96 96 96 95 96 96 96 96 96 96 bf 95 96     ................
    3d79:	95 84 96 96 96 bf 96 95 8c 83 83 8c 96 bf 96 96     ................
    3d89:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3d99:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3da9:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3db9:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3dc9:	96 96 96 95 96 96 96 40 96 96 96 95 96 96 96 40     .......@.......@
    3dd9:	96 96 95 96 96 96 96 96 96 96 95 96 96 96 96 96     ................
    3de9:	96 95 96 96 96 96 96 96 96 95 96 96 96 96 95 96     ................
    3df9:	95 96 96 96 96 95 95 95 96 96 96 96 94 8c 8c 95     ................
    3e09:	82 82 82 82 82 bf 96 96 40 d8 d8 d8 bf ff bf 82     ........@.......
    3e19:	40 d8 d8 bf ff ff ff bf 40 d8 bf ff ff ff ff ff     @.......@.......
    3e29:	bf bf ff ff ff ff ff ff 40 40 bf ff ff ff ff ff     ........@@......
    3e39:	40 40 94 bf ff ff ff bf 40 40 40 8c bf ff bf d8     @@......@@@.....
    3e49:	96 96 96 96 96 96 96 96 83 83 8c 8c 8c 8c 8c 83     ................
    3e59:	d8 d8 d8 d8 d8 d8 d8 d8 bf d8 d8 d8 d8 d8 d8 d8     ................
    3e69:	ff bf bf d8 d8 d8 d8 d8 bf d8 d8 d8 d8 d8 d8 d8     ................
    3e79:	d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 82 82     ................
    3e89:	96 96 8c 83 83 8c 8c 8c 83 82 83 83 83 83 8c 40     ...............@
    3e99:	82 82 82 83 83 83 83 40 82 82 82 83 83 83 83 40     .......@.......@
    3ea9:	d8 82 82 83 83 83 83 40 82 82 82 83 83 83 40 40     .......@......@@
    3eb9:	82 82 83 83 83 95 40 40 82 82 83 83 95 40 40 40     ......@@.....@@@
    3ec9:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    3ed9:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    3ee9:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    3ef9:	40 40 40 40 40 40 40 40 bf bf bf bf bf bf bf bf     @@@@@@@@........
    3f09:	40 40 40 96 95 ff d8 d8 40 40 40 40 96 ff 83 82     @@@.....@@@@....
    3f19:	40 40 40 40 40 ff 96 96 40 40 40 40 40 bf 96 96     @@@@@...@@@@@...
    3f29:	40 40 40 40 40 bf 96 96 40 40 40 40 40 bf 96 96     @@@@@...@@@@@...
    3f39:	40 40 40 40 40 bf 40 40 40 40 40 40 40 77 40 40     @@@@@.@@@@@@@w@@
    3f49:	d8 d8 d8 82 82 82 82 82 82 82 82 82 82 83 83 83     ................
    3f59:	8c 8c 83 83 83 83 8c 95 96 96 96 96 96 96 96 96     ................
    3f69:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3f79:	96 96 96 96 96 96 96 96 40 96 96 96 96 96 96 40     ........@......@
    3f89:	83 83 8c 95 96 40 40 40 83 8c 96 96 40 40 40 40     .....@@@....@@@@
    3f99:	96 96 96 40 40 40 40 40 96 96 96 40 40 40 40 40     ...@@@@@...@@@@@
    3fa9:	96 96 40 40 40 40 40 40 96 96 40 40 40 40 40 40     ..@@@@@@..@@@@@@
    3fb9:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    3fc9:	40 40 40 40 40 77 40 40 40 40 40 40 40 77 40 40     @@@@@w@@@@@@@w@@
    3fd9:	40 40 40 40 40 77 40 40 40 40 40 40 40 77 40 40     @@@@@w@@@@@@@w@@
    3fe9:	40 40 40 40 40 77 40 40 40 40 40 40 40 77 40 40     @@@@@w@@@@@@@w@@
    3ff9:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4009:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4019:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4029:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4039:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4049:	40 40 40 40 40 40 40 40 40 40 40 ff ff 40 40 40     @@@@@@@@@@@..@@@
    4059:	40 40 40 ff ff 40 40 40 40 40 40 ff ff 40 40 40     @@@..@@@@@@..@@@
    4069:	40 40 40 ff ff 40 40 40 40 40 40 40 40 40 40 40     @@@..@@@@@@@@@@@
    4079:	40 40 40 ff ff 40 40 40 40 40 40 40 40 40 40 40     @@@..@@@@@@@@@@@
    4089:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4099:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    40a9:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    40b9:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    40c9:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    40d9:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    40e9:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    40f9:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4109:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4119:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4129:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4139:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4149:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4159:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4169:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4179:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4189:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4199:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    41a9:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    41b9:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    41c9:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    41d9:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    41e9:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    41f9:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4209:	40 40 40 40 40 40 40 40 40 40 40 40 ff ff ff 40     @@@@@@@@@@@@...@
    4219:	40 40 40 ff ff ff 40 40 40 40 40 ff ff 40 40 40     @@@...@@@@@..@@@
    4229:	40 40 40 ff ff 40 40 40 40 40 40 ff ff ff 40 40     @@@..@@@@@@...@@
    4239:	40 40 40 40 ff ff ff 40 40 40 40 40 40 40 40 40     @@@@...@@@@@@@@@
    4249:	40 40 40 40 40 40 40 40 40 ff ff ff 40 40 40 40     @@@@@@@@@...@@@@
    4259:	40 40 ff ff ff 40 40 40 40 40 40 ff ff 40 40 40     @@...@@@@@@..@@@
    4269:	40 40 40 ff ff 40 40 40 40 40 ff ff ff 40 40 40     @@@..@@@@@...@@@
    4279:	40 ff ff ff 40 40 40 40 40 40 40 40 40 40 40 40     @...@@@@@@@@@@@@
    4289:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4299:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    42a9:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    42b9:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    42c9:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    42d9:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    42e9:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    42f9:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4309:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4319:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4329:	40 40 40 40 40 40 40 40 40 40 40 ff ff 40 40 40     @@@@@@@@@@@..@@@
    4339:	40 40 40 ff ff 40 40 40 40 40 ff ff 40 40 40 40     @@@..@@@@@..@@@@
    4349:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4359:	40 40 40 40 40 40 40 40 40 ff ff ff ff ff ff 40     @@@@@@@@@......@
    4369:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4379:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4389:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4399:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    43a9:	40 40 40 40 40 40 40 40 40 40 40 ff ff 40 40 40     @@@@@@@@@@@..@@@
    43b9:	40 40 40 ff ff 40 40 40 40 40 40 40 40 40 40 40     @@@..@@@@@@@@@@@
    43c9:	40 40 40 40 40 40 40 40 40 40 40 40 40 ff ff 40     @@@@@@@@@@@@@..@
    43d9:	40 40 40 40 ff ff 40 40 40 40 40 ff ff 40 40 40     @@@@..@@@@@..@@@
    43e9:	40 40 ff ff 40 40 40 40 40 ff ff 40 40 40 40 40     @@..@@@@@..@@@@@
    43f9:	40 ff 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @.@@@@@@@@@@@@@@
    4409:	40 40 40 40 40 40 40 40 40 40 6f 6f 6f 6f 40 40     @@@@@@@@@@oooo@@
    4419:	40 6f 6f 00 00 6f 6f 40 40 6f 6f 00 6f 6f 6f 40     @oo..oo@@oo.ooo@
    4429:	40 6f 6f 6f 00 6f 6f 40 40 6f 6f 00 00 6f 6f 40     @ooo.oo@@oo..oo@
    4439:	40 40 6f 6f 6f 6f 40 40 40 40 40 40 40 40 40 40     @@oooo@@@@@@@@@@
    4449:	40 40 40 40 40 40 40 40 40 40 40 6f 6f 40 40 40     @@@@@@@@@@@oo@@@
    4459:	40 40 6f 6f 6f 40 40 40 40 40 40 6f 6f 40 40 40     @@ooo@@@@@@oo@@@
    4469:	40 40 40 6f 6f 40 40 40 40 40 40 6f 6f 40 40 40     @@@oo@@@@@@oo@@@
    4479:	40 6f 6f 6f 6f 6f 6f 40 40 40 40 40 40 40 40 40     @oooooo@@@@@@@@@
    4489:	40 40 40 40 40 40 40 40 40 40 6f 6f 6f 6f 40 40     @@@@@@@@@@oooo@@
    4499:	40 6f 6f 40 40 6f 6f 40 40 40 40 40 6f 6f 40 40     @oo@@oo@@@@@oo@@
    44a9:	40 40 40 6f 6f 40 40 40 40 40 6f 6f 40 40 40 40     @@@oo@@@@@oo@@@@
    44b9:	40 6f 6f 6f 6f 6f 6f 40 40 40 40 40 40 40 40 40     @oooooo@@@@@@@@@
    44c9:	40 40 40 40 40 40 40 40 40 6f 6f 6f 6f 6f 6f 40     @@@@@@@@@oooooo@
    44d9:	40 40 40 40 6f 6f 40 40 40 40 40 6f 6f 40 40 40     @@@@oo@@@@@oo@@@
    44e9:	40 40 40 40 6f 6f 40 40 40 6f 6f 40 40 6f 6f 40     @@@@oo@@@oo@@oo@
    44f9:	40 40 6f 6f 6f 6f 40 40 40 40 40 40 40 40 40 40     @@oooo@@@@@@@@@@
    4509:	40 40 40 40 40 40 40 40 40 40 40 40 6f 6f 40 40     @@@@@@@@@@@@oo@@
    4519:	40 40 40 6f 6f 6f 40 40 40 40 6f 6f 6f 6f 40 40     @@@ooo@@@@oooo@@
    4529:	40 6f 6f 00 6f 6f 40 40 40 6f 6f 6f 6f 6f 6f 40     @oo.oo@@@oooooo@
    4539:	40 40 40 40 6f 6f 40 40 40 40 40 40 40 40 40 40     @@@@oo@@@@@@@@@@
    4549:	40 40 40 40 40 40 40 40 40 6f 6f 6f 6f 6f 6f 40     @@@@@@@@@oooooo@
    4559:	40 6f 6f 40 40 40 40 40 40 6f 6f 6f 6f 6f 40 40     @oo@@@@@@ooooo@@
    4569:	40 40 40 40 40 6f 6f 40 40 6f 6f 40 40 6f 6f 40     @@@@@oo@@oo@@oo@
    4579:	40 40 6f 6f 6f 6f 40 40 40 40 40 40 40 40 40 40     @@oooo@@@@@@@@@@
    4589:	40 40 40 40 40 40 40 40 40 40 6f 6f 6f 6f 40 40     @@@@@@@@@@oooo@@
    4599:	40 6f 6f 40 40 40 40 40 40 6f 6f 6f 6f 6f 40 40     @oo@@@@@@ooooo@@
    45a9:	40 6f 6f 00 00 6f 6f 40 40 6f 6f 00 00 6f 6f 40     @oo..oo@@oo..oo@
    45b9:	40 40 6f 6f 6f 6f 40 40 40 40 40 40 40 40 40 40     @@oooo@@@@@@@@@@
    45c9:	40 40 40 40 40 40 40 40 40 6f 6f 6f 6f 6f 6f 40     @@@@@@@@@oooooo@
    45d9:	40 40 40 40 40 6f 6f 40 40 40 40 40 6f 6f 40 40     @@@@@oo@@@@@oo@@
    45e9:	40 40 40 6f 6f 40 40 40 40 40 6f 6f 40 40 40 40     @@@oo@@@@@oo@@@@
    45f9:	40 40 6f 6f 40 40 40 40 40 40 40 40 40 40 40 40     @@oo@@@@@@@@@@@@
    4609:	40 40 40 40 40 40 40 40 40 40 6f 6f 6f 6f 40 40     @@@@@@@@@@oooo@@
    4619:	40 6f 6f 00 00 6f 6f 40 40 40 6f 6f 6f 6f 40 40     @oo..oo@@@oooo@@
    4629:	40 6f 6f 00 00 6f 6f 40 40 6f 6f 00 00 6f 6f 40     @oo..oo@@oo..oo@
    4639:	40 40 6f 6f 6f 6f 40 40 40 40 40 40 40 40 40 40     @@oooo@@@@@@@@@@
    4649:	40 40 40 40 40 40 40 40 40 40 6f 6f 6f 6f 40 40     @@@@@@@@@@oooo@@
    4659:	40 6f 6f 00 00 6f 6f 40 40 40 6f 6f 6f 6f 6f 40     @oo..oo@@@ooooo@
    4669:	40 40 40 40 40 6f 6f 40 40 40 40 40 6f 6f 40 40     @@@@@oo@@@@@oo@@
    4679:	40 40 6f 6f 6f 40 40 40 40 40 40 40 40 40 40 40     @@ooo@@@@@@@@@@@
    4689:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4699:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    46a9:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    46b9:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    46c9:	40 40 40 ff ff 40 40 40 40 40 40 ff ff 40 40 40     @@@..@@@@@@..@@@
    46d9:	40 40 40 ff ff 40 40 40 40 40 40 ff ff 40 40 40     @@@..@@@@@@..@@@
    46e9:	40 40 40 ff ff 40 40 40 40 40 40 ff ff 40 40 40     @@@..@@@@@@..@@@
    46f9:	40 40 40 ff ff 40 40 40 40 40 40 ff ff 40 40 40     @@@..@@@@@@..@@@
    4709:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4719:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4729:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4739:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4749:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4759:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4769:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4779:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4789:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4799:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    47a9:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    47b9:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    47c9:	40 40 40 40 40 40 40 40 40 40 ff ff ff ff 40 40     @@@@@@@@@@....@@
    47d9:	40 ff ff 40 40 ff ff 40 40 40 40 40 ff ff 40 40     @..@@..@@@@@..@@
    47e9:	40 40 40 ff ff 40 40 40 40 40 40 40 40 40 40 40     @@@..@@@@@@@@@@@
    47f9:	40 40 40 ff ff 40 40 40 40 40 40 40 40 40 40 40     @@@..@@@@@@@@@@@
    4809:	40 40 40 40 40 40 40 40 40 40 ff ff ff ff 40 40     @@@@@@@@@@....@@
    4819:	40 ff ff 40 40 ff ff 40 40 ff ff 40 ff ff ff 40     @..@@..@@..@...@
    4829:	40 ff ff 40 ff ff ff 40 40 ff ff 40 40 40 40 40     @..@...@@..@@@@@
    4839:	40 40 ff ff ff ff ff 40 40 40 40 40 40 40 40 40     @@.....@@@@@@@@@
    4849:	40 40 40 40 40 40 40 40 40 40 40 ff ff 40 40 40     @@@@@@@@@@@..@@@
    4859:	40 40 ff ff ff ff 40 40 40 ff ff 40 40 ff ff 40     @@....@@@..@@..@
    4869:	40 ff ff 40 40 ff ff 40 40 ff ff ff ff ff ff 40     @..@@..@@......@
    4879:	40 ff ff 40 40 ff ff 40 40 40 40 40 40 40 40 40     @..@@..@@@@@@@@@
    4889:	40 40 40 40 40 40 40 40 40 ff ff ff ff ff 40 40     @@@@@@@@@.....@@
    4899:	40 ff ff 40 40 ff ff 40 40 ff ff ff ff ff 40 40     @..@@..@@.....@@
    48a9:	40 ff ff 40 40 ff ff 40 40 ff ff 40 40 ff ff 40     @..@@..@@..@@..@
    48b9:	40 ff ff ff ff ff 40 40 40 40 40 40 40 40 40 40     @.....@@@@@@@@@@
    48c9:	40 40 40 40 40 40 40 40 40 40 ff ff ff ff 40 40     @@@@@@@@@@....@@
    48d9:	40 ff ff 40 40 ff ff 40 40 ff ff 40 40 40 40 40     @..@@..@@..@@@@@
    48e9:	40 ff ff 40 40 40 40 40 40 ff ff 40 40 ff ff 40     @..@@@@@@..@@..@
    48f9:	40 40 ff ff ff ff 40 40 40 40 40 40 40 40 40 40     @@....@@@@@@@@@@
    4909:	40 40 40 40 40 40 40 40 40 ff ff ff ff 40 40 40     @@@@@@@@@....@@@
    4919:	40 ff ff 40 ff ff 40 40 40 ff ff 40 40 ff ff 40     @..@..@@@..@@..@
    4929:	40 ff ff 40 40 ff ff 40 40 ff ff 40 ff ff 40 40     @..@@..@@..@..@@
    4939:	40 ff ff ff ff 40 40 40 40 40 40 40 40 40 40 40     @....@@@@@@@@@@@
    4949:	40 40 40 40 40 40 40 40 40 ff ff ff ff ff ff 40     @@@@@@@@@......@
    4959:	40 ff ff 40 40 40 40 40 40 ff ff ff ff ff 40 40     @..@@@@@@.....@@
    4969:	40 ff ff 40 40 40 40 40 40 ff ff 40 40 40 40 40     @..@@@@@@..@@@@@
    4979:	40 ff ff ff ff ff ff 40 40 40 40 40 40 40 40 40     @......@@@@@@@@@
    4989:	40 40 40 40 40 40 40 40 40 ff ff ff ff ff ff 40     @@@@@@@@@......@
    4999:	40 ff ff 40 40 40 40 40 40 ff ff ff ff ff 40 40     @..@@@@@@.....@@
    49a9:	40 ff ff 40 40 40 40 40 40 ff ff 40 40 40 40 40     @..@@@@@@..@@@@@
    49b9:	40 ff ff 40 40 40 40 40 40 40 40 40 40 40 40 40     @..@@@@@@@@@@@@@
    49c9:	40 40 40 40 40 40 40 40 40 40 ff ff ff ff ff 40     @@@@@@@@@@.....@
    49d9:	40 ff ff 40 40 40 40 40 40 ff ff 40 40 40 40 40     @..@@@@@@..@@@@@
    49e9:	40 ff ff 40 ff ff ff 40 40 ff ff 40 40 ff ff 40     @..@...@@..@@..@
    49f9:	40 40 ff ff ff ff ff 40 40 40 40 40 40 40 40 40     @@.....@@@@@@@@@
    4a09:	40 40 40 40 40 40 40 40 40 ff ff 40 40 ff ff 40     @@@@@@@@@..@@..@
    4a19:	40 ff ff 40 40 ff ff 40 40 ff ff ff ff ff ff 40     @..@@..@@......@
    4a29:	40 ff ff 40 40 ff ff 40 40 ff ff 40 40 ff ff 40     @..@@..@@..@@..@
    4a39:	40 ff ff 40 40 ff ff 40 40 40 40 40 40 40 40 40     @..@@..@@@@@@@@@
    4a49:	40 40 40 40 40 40 40 40 40 ff ff ff ff ff ff 40     @@@@@@@@@......@
    4a59:	40 40 40 ff ff 40 40 40 40 40 40 ff ff 40 40 40     @@@..@@@@@@..@@@
    4a69:	40 40 40 ff ff 40 40 40 40 40 40 ff ff 40 40 40     @@@..@@@@@@..@@@
    4a79:	40 ff ff ff ff ff ff 40 40 40 40 40 40 40 40 40     @......@@@@@@@@@
    4a89:	40 40 40 40 40 40 40 40 40 40 40 40 ff ff ff 40     @@@@@@@@@@@@...@
    4a99:	40 40 40 40 40 ff ff 40 40 40 40 40 40 ff ff 40     @@@@@..@@@@@@..@
    4aa9:	40 40 40 40 40 ff ff 40 40 ff ff 40 40 ff ff 40     @@@@@..@@..@@..@
    4ab9:	40 40 ff ff ff ff 40 40 40 40 40 40 40 40 40 40     @@....@@@@@@@@@@
    4ac9:	40 40 40 40 40 40 40 40 40 ff ff 40 40 ff ff 40     @@@@@@@@@..@@..@
    4ad9:	40 ff ff 40 ff ff 40 40 40 ff ff ff ff 40 40 40     @..@..@@@....@@@
    4ae9:	40 ff ff ff ff 40 40 40 40 ff ff 40 ff ff 40 40     @....@@@@..@..@@
    4af9:	40 ff ff 40 40 ff ff 40 40 40 40 40 40 40 40 40     @..@@..@@@@@@@@@
    4b09:	40 40 40 40 40 40 40 40 40 ff ff 40 40 40 40 40     @@@@@@@@@..@@@@@
    4b19:	40 ff ff 40 40 40 40 40 40 ff ff 40 40 40 40 40     @..@@@@@@..@@@@@
    4b29:	40 ff ff 40 40 40 40 40 40 ff ff 40 40 40 40 40     @..@@@@@@..@@@@@
    4b39:	40 ff ff ff ff ff ff 40 40 40 40 40 40 40 40 40     @......@@@@@@@@@
    4b49:	40 40 40 40 40 40 40 40 40 ff ff 40 40 40 ff ff     @@@@@@@@@..@@@..
    4b59:	40 ff ff ff 40 ff ff ff 40 ff ff ff ff ff ff ff     @...@...@.......
    4b69:	40 ff ff 40 ff 40 ff ff 40 ff ff 40 40 40 ff ff     @..@.@..@..@@@..
    4b79:	40 ff ff 40 40 40 ff ff 40 40 40 40 40 40 40 40     @..@@@..@@@@@@@@
    4b89:	40 40 40 40 40 40 40 40 40 ff ff 40 40 ff ff 40     @@@@@@@@@..@@..@
    4b99:	40 ff ff ff 40 ff ff 40 40 ff ff ff ff ff ff 40     @...@..@@......@
    4ba9:	40 ff ff ff ff ff ff 40 40 ff ff 40 ff ff ff 40     @......@@..@...@
    4bb9:	40 ff ff 40 40 ff ff 40 40 40 40 40 40 40 40 40     @..@@..@@@@@@@@@
    4bc9:	40 40 40 40 40 40 40 40 40 40 ff ff ff ff 40 40     @@@@@@@@@@....@@
    4bd9:	40 ff ff 40 40 ff ff 40 40 ff ff 40 40 ff ff 40     @..@@..@@..@@..@
    4be9:	40 ff ff 40 40 ff ff 40 40 ff ff 40 40 ff ff 40     @..@@..@@..@@..@
    4bf9:	40 40 ff ff ff ff 40 40 40 40 40 40 40 40 40 40     @@....@@@@@@@@@@
    4c09:	40 40 40 40 40 40 40 40 40 ff ff ff ff ff 40 40     @@@@@@@@@.....@@
    4c19:	40 ff ff 40 40 ff ff 40 40 ff ff 40 40 ff ff 40     @..@@..@@..@@..@
    4c29:	40 ff ff ff ff ff 40 40 40 ff ff 40 40 40 40 40     @.....@@@..@@@@@
    4c39:	40 ff ff 40 40 40 40 40 40 40 40 40 40 40 40 40     @..@@@@@@@@@@@@@
    4c49:	40 40 40 40 40 40 40 40 40 40 ff ff ff ff 40 40     @@@@@@@@@@....@@
    4c59:	40 ff ff 40 40 ff ff 40 40 ff ff 40 40 ff ff 40     @..@@..@@..@@..@
    4c69:	40 ff ff 40 40 ff ff 40 40 ff ff 40 ff ff 40 40     @..@@..@@..@..@@
    4c79:	40 40 ff ff 40 ff ff 40 40 40 40 40 40 40 40 40     @@..@..@@@@@@@@@
    4c89:	40 40 40 40 40 40 40 40 40 ff ff ff ff ff 40 40     @@@@@@@@@.....@@
    4c99:	40 ff ff 40 40 ff ff 40 40 ff ff 40 40 ff ff 40     @..@@..@@..@@..@
    4ca9:	40 ff ff ff ff ff 40 40 40 ff ff 40 ff ff 40 40     @.....@@@..@..@@
    4cb9:	40 ff ff 40 40 ff ff 40 40 40 40 40 40 40 40 40     @..@@..@@@@@@@@@
    4cc9:	40 40 40 40 40 40 40 40 40 40 ff ff ff ff 40 40     @@@@@@@@@@....@@
    4cd9:	40 ff ff 40 40 40 40 40 40 40 ff ff ff ff 40 40     @..@@@@@@@....@@
    4ce9:	40 40 40 40 40 ff ff 40 40 40 40 40 40 ff ff 40     @@@@@..@@@@@@..@
    4cf9:	40 40 ff ff ff ff 40 40 40 40 40 40 40 40 40 40     @@....@@@@@@@@@@
    4d09:	40 40 40 40 40 40 40 40 40 ff ff ff ff ff ff 40     @@@@@@@@@......@
    4d19:	40 40 40 ff ff 40 40 40 40 40 40 ff ff 40 40 40     @@@..@@@@@@..@@@
    4d29:	40 40 40 ff ff 40 40 40 40 40 40 ff ff 40 40 40     @@@..@@@@@@..@@@
    4d39:	40 40 40 ff ff 40 40 40 40 40 40 40 40 40 40 40     @@@..@@@@@@@@@@@
    4d49:	40 40 40 40 40 40 40 40 40 ff ff 40 40 ff ff 40     @@@@@@@@@..@@..@
    4d59:	40 ff ff 40 40 ff ff 40 40 ff ff 40 40 ff ff 40     @..@@..@@..@@..@
    4d69:	40 ff ff 40 40 ff ff 40 40 ff ff 40 40 ff ff 40     @..@@..@@..@@..@
    4d79:	40 ff ff ff ff ff ff 40 40 40 40 40 40 40 40 40     @......@@@@@@@@@
    4d89:	40 40 40 40 40 40 40 40 40 ff ff 40 40 ff ff 40     @@@@@@@@@..@@..@
    4d99:	40 ff ff 40 40 ff ff 40 40 ff ff 40 40 ff ff 40     @..@@..@@..@@..@
    4da9:	40 ff ff 40 40 ff ff 40 40 40 ff ff ff ff 40 40     @..@@..@@@....@@
    4db9:	40 40 40 ff ff 40 40 40 40 40 40 40 40 40 40 40     @@@..@@@@@@@@@@@
    4dc9:	40 40 40 40 40 40 40 40 40 ff ff 40 40 40 ff ff     @@@@@@@@@..@@@..
    4dd9:	40 ff ff 40 40 40 ff ff 40 ff ff 40 ff 40 ff ff     @..@@@..@..@.@..
    4de9:	40 ff ff ff ff ff ff ff 40 ff ff ff 40 ff ff ff     @.......@...@...
    4df9:	40 ff ff 40 40 40 ff ff 40 40 40 40 40 40 40 40     @..@@@..@@@@@@@@
    4e09:	40 40 40 40 40 40 40 40 40 ff ff 40 40 ff ff 40     @@@@@@@@@..@@..@
    4e19:	40 ff ff 40 40 ff ff 40 40 40 ff ff ff ff 40 40     @..@@..@@@....@@
    4e29:	40 40 ff ff ff ff 40 40 40 ff ff 40 40 ff ff 40     @@....@@@..@@..@
    4e39:	40 ff ff 40 40 ff ff 40 40 40 40 40 40 40 40 40     @..@@..@@@@@@@@@
    4e49:	40 40 40 40 40 40 40 40 40 ff ff 40 40 ff ff 40     @@@@@@@@@..@@..@
    4e59:	40 ff ff 40 40 ff ff 40 40 40 ff ff ff ff 40 40     @..@@..@@@....@@
    4e69:	40 40 40 ff ff 40 40 40 40 40 40 ff ff 40 40 40     @@@..@@@@@@..@@@
    4e79:	40 40 40 ff ff 40 40 40 40 40 40 40 40 40 40 40     @@@..@@@@@@@@@@@
    4e89:	40 40 40 40 40 40 40 40 40 ff ff ff ff ff ff 40     @@@@@@@@@......@
    4e99:	40 40 40 40 ff ff 40 40 40 40 40 ff ff 40 40 40     @@@@..@@@@@..@@@
    4ea9:	40 40 ff ff 40 40 40 40 40 ff ff 40 40 40 40 40     @@..@@@@@..@@@@@
    4eb9:	40 ff ff ff ff ff ff 40 40 40 40 40 40 40 40 40     @......@@@@@@@@@
    4ec9:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4ed9:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4ee9:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4ef9:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4f09:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4f19:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4f29:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4f39:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4f49:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4f59:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4f69:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4f79:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4f89:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4f99:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4fa9:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4fb9:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4fc9:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4fd9:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4fe9:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    4ff9:	ff ff ff ff ff ff ff ff 40 40 40 40 40 40 40 40     ........@@@@@@@@

00005009 <map_star>:
    5009:	01 01 0c                                            ...

0000500c <map_ice_moon>:
    500c:	03 03 09 0a 0b 0d 0e 0f 10 11 12                    ...........

00005017 <map_ice_cloud>:
    5017:	01 01 08                                            ...

0000501a <map_ice_far>:
    501a:	01 01 07                                            ...

0000501d <map_ice_sky>:
    501d:	01 01 06                                            ...

00005020 <map_ice_horizon>:
    5020:	01 01 05                                            ...

00005023 <map_ice_bottom>:
    5023:	01 01 04                                            ...

00005026 <map_ice_right>:
    5026:	01 01 03                                            ...

00005029 <map_ice_middle>:
    5029:	01 01 02                                            ...

0000502c <map_ice_left>:
    502c:	01 01 01                                            ...

0000502f <map_splash>:
    502f:	0f 05 13 13 13 00 13 13 13 00 14 15 16 00 13 13     ................
    503f:	13 17 13 17 00 13 17 17 00 18 19 1a 00 13 17 17     ................
    504f:	00 13 00 00 13 00 00 00 1b 1c 1d 00 13 13 13 1e     ................
    505f:	13 1e 00 13 00 00 00 1f 20 21 00 1e 1e 13 13 13     ........ !......
    506f:	13 00 13 00 00 00 22 00 00 00 13 13 13              ......"......

0000507c <map_tile_none>:
    507c:	01 01 00 00                                         ....

00005080 <__ctors_end>:
    5080:	11 24       	eor	r1, r1
    5082:	1f be       	out	0x3f, r1	; 63
    5084:	cf ef       	ldi	r28, 0xFF	; 255
    5086:	d0 e1       	ldi	r29, 0x10	; 16
    5088:	de bf       	out	0x3e, r29	; 62
    508a:	cd bf       	out	0x3d, r28	; 61

0000508c <__do_copy_data>:
    508c:	11 e0       	ldi	r17, 0x01	; 1
    508e:	a0 e0       	ldi	r26, 0x00	; 0
    5090:	b1 e0       	ldi	r27, 0x01	; 1
    5092:	e0 e1       	ldi	r30, 0x10	; 16
    5094:	f9 e7       	ldi	r31, 0x79	; 121
    5096:	02 c0       	rjmp	.+4      	; 0x509c <__do_copy_data+0x10>
    5098:	05 90       	lpm	r0, Z+
    509a:	0d 92       	st	X+, r0
    509c:	a2 30       	cpi	r26, 0x02	; 2
    509e:	b1 07       	cpc	r27, r17
    50a0:	d9 f7       	brne	.-10     	; 0x5098 <__do_copy_data+0xc>

000050a2 <__do_clear_bss>:
    50a2:	1a e0       	ldi	r17, 0x0A	; 10
    50a4:	a2 e0       	ldi	r26, 0x02	; 2
    50a6:	b1 e0       	ldi	r27, 0x01	; 1
    50a8:	01 c0       	rjmp	.+2      	; 0x50ac <.do_clear_bss_start>

000050aa <.do_clear_bss_loop>:
    50aa:	1d 92       	st	X+, r1

000050ac <.do_clear_bss_start>:
    50ac:	ac 31       	cpi	r26, 0x1C	; 28
    50ae:	b1 07       	cpc	r27, r17
    50b0:	e1 f7       	brne	.-8      	; 0x50aa <.do_clear_bss_loop>

000050b2 <wdt_init>:

void wdt_init(void)
{

#if TRUE_RANDOM_GEN == 1	
	wdt_randomize();
    50b2:	0e 94 e8 2d 	call	0x5bd0	; 0x5bd0 <wdt_randomize>
#endif

    MCUSR = 0;
    50b6:	14 be       	out	0x34, r1	; 52
    wdt_disable();
    50b8:	88 e1       	ldi	r24, 0x18	; 24
    50ba:	0f b6       	in	r0, 0x3f	; 63
    50bc:	f8 94       	cli
    50be:	80 93 60 00 	sts	0x0060, r24
    50c2:	10 92 60 00 	sts	0x0060, r1
    50c6:	0f be       	out	0x3f, r0	; 63

000050c8 <Initialize>:


void Initialize(void){
	int i;

	if(!isEepromFormatted()) FormatEeprom();
    50c8:	0e 94 a5 2e 	call	0x5d4a	; 0x5d4a <isEepromFormatted>
    50cc:	81 11       	cpse	r24, r1
    50ce:	02 c0       	rjmp	.+4      	; 0x50d4 <Initialize+0xc>
    50d0:	0e 94 83 2e 	call	0x5d06	; 0x5d06 <FormatEeprom>

	cli();
    50d4:	f8 94       	cli
		mix_bank=0;
	#endif
	
	#if MIXER_CHAN4_TYPE == 0
		//initialize LFSR		
		tr4_barrel_lo=1;
    50d6:	81 e0       	ldi	r24, 0x01	; 1
    50d8:	80 93 cc 08 	sts	0x08CC, r24
		tr4_barrel_hi=1;		
    50dc:	80 93 cd 08 	sts	0x08CD, r24
		tr4_params=0b00000001; //15 bits no divider (1)
    50e0:	80 93 cb 08 	sts	0x08CB, r24
		snesMouseEnabled=false;
	#endif

	//silence all sound channels
	for(i=0;i<CHANNELS;i++){
		mixer.channels.all[i].volume=0;
    50e4:	10 92 b8 08 	sts	0x08B8, r1
    50e8:	10 92 be 08 	sts	0x08BE, r1
    50ec:	10 92 c4 08 	sts	0x08C4, r1
    50f0:	10 92 ca 08 	sts	0x08CA, r1
    50f4:	10 92 d0 08 	sts	0x08D0, r1
	}
	
	//set sync parameters. starts at odd field, in pre-eq pulses, line 1, vsync flag cleared
	sync_phase=0;
    50f8:	10 92 a0 08 	sts	0x08A0, r1
	sync_flags=0;
    50fc:	10 92 a2 08 	sts	0x08A2, r1
	sync_pulse=SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES;
    5100:	92 e1       	ldi	r25, 0x12	; 18
    5102:	90 93 a1 08 	sts	0x08A1, r25

	//set rendering parameters
	render_lines_count=FRAME_LINES;
    5106:	90 ee       	ldi	r25, 0xE0	; 224
    5108:	90 93 a8 08 	sts	0x08A8, r25
	first_render_line=FIRST_RENDER_LINE;
    510c:	94 e1       	ldi	r25, 0x14	; 20
    510e:	90 93 a7 08 	sts	0x08A7, r25

	joypad1_status_hi=0;
    5112:	10 92 ac 08 	sts	0x08AC, r1
    5116:	10 92 ab 08 	sts	0x08AB, r1
	joypad2_status_hi=0;
    511a:	10 92 b0 08 	sts	0x08B0, r1
    511e:	10 92 af 08 	sts	0x08AF, r1
	sound_enabled=1;
    5122:	80 93 b7 08 	sts	0x08B7, r24

	InitializeVideoMode();
    5126:	0e 94 fa 3a 	call	0x75f4	; 0x75f4 <InitializeVideoMode>
    512a:	80 e7       	ldi	r24, 0x70	; 112
    512c:	90 e0       	ldi	r25, 0x00	; 0
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
		val=pgm_read_word(&io_table[j]);
    512e:	fc 01       	movw	r30, r24
    5130:	25 91       	lpm	r18, Z+
    5132:	34 91       	lpm	r19, Z
		ptr=(u8*)(val&0xff);
    5134:	f9 01       	movw	r30, r18
    5136:	ff 27       	eor	r31, r31
		*ptr=val>>8;	
    5138:	30 83       	st	Z, r19
    513a:	02 96       	adiw	r24, 0x02	; 2
	InitializeVideoMode();
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
    513c:	20 e0       	ldi	r18, 0x00	; 0
    513e:	8e 39       	cpi	r24, 0x9E	; 158
    5140:	92 07       	cpc	r25, r18
    5142:	a9 f7       	brne	.-22     	; 0x512e <Initialize+0x66>
		val=pgm_read_word(&io_table[j]);
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;	
	}

	sei();
    5144:	78 94       	sei
	
	DisplayLogo();
    5146:	0e 94 88 3b 	call	0x7710	; 0x7710 <DisplayLogo>
    514a:	0e 94 3f 3c 	call	0x787e	; 0x787e <main>
    514e:	0c 94 86 3c 	jmp	0x790c	; 0x790c <_exit>

00005152 <__bad_interrupt>:
    5152:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00005156 <sub_video_mode3>:
	;***************************************************

	sub_video_mode3:
		;de-activate sync timer interrupts
		;we will need to use the I flag to branch in a critical loop
		ldi ZL,(0<<OCIE1A)
    5156:	e0 e0       	ldi	r30, 0x00	; 0
		sts _SFR_MEM_ADDR(TIMSK1),ZL
    5158:	e0 93 6f 00 	sts	0x006F, r30

		;wait cycles to align with next hsync
		WAIT r26,183+241
    515c:	ad e8       	ldi	r26, 0x8D	; 141
    515e:	aa 95       	dec	r26
    5160:	f1 f7       	brne	.-4      	; 0x515e <sub_video_mode3+0x8>
    5162:	00 00       	nop

		;Refresh ramtiles indexes in VRAM
		;This has to be done because the main
		;program may have altered the VRAM
		;after vsync and the rendering interrupt.
		lds r16,userRamTilesCount
    5164:	00 91 db 08 	lds	r16, 0x08DB

		ldi ZL,lo8(ram_tiles_restore);
    5168:	ea e3       	ldi	r30, 0x3A	; 58
		ldi ZH,hi8(ram_tiles_restore);
    516a:	f8 e0       	ldi	r31, 0x08	; 8
		ldi r18,3
    516c:	23 e0       	ldi	r18, 0x03	; 3
		mul r16,r18
    516e:	02 9f       	mul	r16, r18
		add ZL,r0
    5170:	e0 0d       	add	r30, r0
		adc ZH,r1
    5172:	f1 1d       	adc	r31, r1

		ldi YL,lo8(vram)
    5174:	c0 e2       	ldi	r28, 0x20	; 32
		ldi YH,hi8(vram)
    5176:	da e0       	ldi	r29, 0x0A	; 10

		lds r18,free_tile_index
    5178:	20 91 62 09 	lds	r18, 0x0962
		ldi r19,MAX_RAMTILES		;maximum possible ramtiles
    517c:	3c e3       	ldi	r19, 0x3C	; 60
		sub r19,r18					;sub free tile
    517e:	32 1b       	sub	r19, r18
		add r19,r16					;add user tiles
    5180:	30 0f       	add	r19, r16

		cp r18,r16
    5182:	20 17       	cp	r18, r16
		breq no_ramtiles
    5184:	51 f0       	breq	.+20     	; 0x519a <no_ramtiles>
		nop
    5186:	00 00       	nop
	...

0000518a <upd_loop>:
		nop
upd_loop:
		ld XL,Z+	;load vram offset of ramtile
    518a:	a1 91       	ld	r26, Z+
		ld XH,Z+
    518c:	b1 91       	ld	r27, Z+

		ld r17,X	;get latest VRAM tile that may have been modified my
    518e:	1c 91       	ld	r17, X
		st Z+,r17	;the main program and store it in the restore buffer
    5190:	11 93       	st	Z+, r17
		st X,r16	;write the ramtile index back to vram
    5192:	0c 93       	st	X, r16

		inc r16
    5194:	03 95       	inc	r16
		cp r16,r18
    5196:	02 17       	cp	r16, r18
		brlo upd_loop ;loop is 14 cycles
    5198:	c0 f3       	brcs	.-16     	; 0x518a <upd_loop>

0000519a <no_ramtiles>:

no_ramtiles:
		;wait for remaining maximum possible ramtiles
1:
		ldi r17,3
    519a:	13 e0       	ldi	r17, 0x03	; 3
		dec r17
    519c:	1a 95       	dec	r17
		brne .-4
    519e:	f1 f7       	brne	.-4      	; 0x519c <no_ramtiles+0x2>
		rjmp .
    51a0:	00 c0       	rjmp	.+0      	; 0x51a2 <no_ramtiles+0x8>
		dec r19
    51a2:	3a 95       	dec	r19
		brne 1b
    51a4:	d1 f7       	brne	.-12     	; 0x519a <no_ramtiles>

		;**********************
		; setup scroll stuff
		;**********************
	
		ldi YL,lo8(vram)
    51a6:	c0 e2       	ldi	r28, 0x20	; 32
		ldi YH,hi8(vram)
    51a8:	da e0       	ldi	r29, 0x0A	; 10

		//add X scroll (coarse)
		lds r18,screen_scrollX ;ScreenScrollX
    51aa:	20 91 9c 08 	lds	r18, 0x089C
		mov r25,r18
    51ae:	92 2f       	mov	r25, r18
		andi r18,0xf8	;(x>>3) * 8 interleave
    51b0:	28 7f       	andi	r18, 0xF8	; 248
		add YL,r18
    51b2:	c2 0f       	add	r28, r18

		;save Y wrap adress 
		movw r12,YL
    51b4:	6e 01       	movw	r12, r28
	

		//add Y scroll (coarse)
		lds r16,screen_scrollY ;ScreenScrollY
    51b6:	00 91 9d 08 	lds	r16, 0x089D
		mov r22,r16
    51ba:	60 2f       	mov	r22, r16
		lsr r16
    51bc:	06 95       	lsr	r16
		lsr r16
    51be:	06 95       	lsr	r16
		lsr r16 ;/8
    51c0:	06 95       	lsr	r16

        lds r17,screen_scrollHeight
    51c2:	10 91 9e 08 	lds	r17, 0x089E
        sub r17,r16
    51c6:	10 1b       	sub	r17, r16
        mov r15,r17 ;Y tiles to draw before wrapping
    51c8:	f1 2e       	mov	r15, r17

        mov r17,r16
    51ca:	10 2f       	mov	r17, r16
        lsr r16
    51cc:	06 95       	lsr	r16
        lsr r16
    51ce:	06 95       	lsr	r16
        lsr r16 ;/8
    51d0:	06 95       	lsr	r16
		add YH,r16      ; (bits 6-7)
    51d2:	d0 0f       	add	r29, r16
		andi r17,0x7
    51d4:	17 70       	andi	r17, 0x07	; 7
        add YL,r17      ;interleave (bits 3-5)
    51d6:	c1 0f       	add	r28, r17
        andi r22,0x7    ;fine Y scrolling (bits 0-2)
    51d8:	67 70       	andi	r22, 0x07	; 7
		;lds r20,tile_table_lo
		;lds r21,tile_table_hi
		;out _SFR_IO_ADDR(GPIOR1),r20 ;store for later
		;out _SFR_IO_ADDR(GPIOR2),r21

		lds r20,overlay_tile_table
    51da:	40 91 9a 08 	lds	r20, 0x089A
		lds r21,overlay_tile_table+1
    51de:	50 91 9b 08 	lds	r21, 0x089B
		lds r6,tile_table_lo
    51e2:	60 90 96 08 	lds	r6, 0x0896
		lds r7,tile_table_hi
    51e6:	70 90 97 08 	lds	r7, 0x0897
		out _SFR_IO_ADDR(GPIOR1),r6 ;store for later
    51ea:	6a bc       	out	0x2a, r6	; 42
		out _SFR_IO_ADDR(GPIOR2),r7
    51ec:	7b bc       	out	0x2b, r7	; 43


		;save main section value	
		movw r10,YL
    51ee:	5e 01       	movw	r10, r28
		mov r23,r22
    51f0:	76 2f       	mov	r23, r22
		mov r24,r15
    51f2:	8f 2d       	mov	r24, r15
		mov r9,r25
    51f4:	99 2e       	mov	r9, r25

		;load values for overlay if it's activated (overlay_height>0)
		
		;compute beginning of overlay in vram 
		lds r16,screen_scrollHeight
    51f6:	00 91 9e 08 	lds	r16, 0x089E
		mov r18,r16
    51fa:	20 2f       	mov	r18, r16
		lsr r16
    51fc:	06 95       	lsr	r16
		lsr r16
    51fe:	06 95       	lsr	r16
		lsr r16			;hi8
    5200:	06 95       	lsr	r16
		inc r16			;add 0x100 ram offset
    5202:	03 95       	inc	r16
		andi r18,7		;lo8
    5204:	27 70       	andi	r18, 0x07	; 7
		
		lds r19,overlay_height	
    5206:	30 91 99 08 	lds	r19, 0x0899
		cpi r19,0
    520a:	30 30       	cpi	r19, 0x00	; 0
		in r0, _SFR_IO_ADDR(SREG)
    520c:	0f b6       	in	r0, 0x3f	; 63

		sbrs r0,SREG_Z
    520e:	01 fe       	sbrs	r0, 1
		clr r22
    5210:	66 27       	eor	r22, r22
		sbrs r0,SREG_Z
    5212:	01 fe       	sbrs	r0, 1
		mov YL,r18		;lo8(overlay_vram)
    5214:	c2 2f       	mov	r28, r18
		sbrs r0,SREG_Z
    5216:	01 fe       	sbrs	r0, 1
		mov YH,r16		;hi8(overlay_vram)
    5218:	d0 2f       	mov	r29, r16
		sbrs r0,SREG_Z
    521a:	01 fe       	sbrs	r0, 1
		ser r24
    521c:	8f ef       	ldi	r24, 0xFF	; 255
		sbrs r0,SREG_Z
    521e:	01 fe       	sbrs	r0, 1
		clr r9
    5220:	99 24       	eor	r9, r9

		sbrs r0,SREG_Z
    5222:	01 fe       	sbrs	r0, 1
		out _SFR_IO_ADDR(GPIOR1),r20
    5224:	4a bd       	out	0x2a, r20	; 42
		sbrs r0,SREG_Z
    5226:	01 fe       	sbrs	r0, 1
		out _SFR_IO_ADDR(GPIOR2),r21
    5228:	5b bd       	out	0x2b, r21	; 43


		//ldi r16,SCREEN_TILES_V*TILE_HEIGHT; total scanlines to draw
		//mov r8,r16
		lds r8,render_lines_count ;total scanlines to draw
    522a:	80 90 a8 08 	lds	r8, 0x08A8

0000522e <next_tile_line>:
	;r23 = Main section tile row
	;r24 = Current Y tiles to draw before wrapping
	;r25 = Main section scrollX

	next_tile_line:
		rcall hsync_pulse
    522e:	bc d3       	rcall	.+1912   	; 0x59a8 <hsync_pulse>

		WAIT r18,HSYNC_USABLE_CYCLES - AUDIO_OUT_HSYNC_CYCLES
    5230:	24 e0       	ldi	r18, 0x04	; 4
    5232:	2a 95       	dec	r18
    5234:	f1 f7       	brne	.-4      	; 0x5232 <next_tile_line+0x4>
    5236:	00 00       	nop
				
		call render_tile_line
    5238:	0e 94 5d 29 	call	0x52ba	; 0x52ba <render_tile_line>

		WAIT r18,58
    523c:	23 e1       	ldi	r18, 0x13	; 19
    523e:	2a 95       	dec	r18
    5240:	f1 f7       	brne	.-4      	; 0x523e <next_tile_line+0x10>
    5242:	00 00       	nop

		inc r22
    5244:	63 95       	inc	r22
		dec r8
    5246:	8a 94       	dec	r8
		breq text_frame_end
    5248:	09 f1       	breq	.+66     	; 0x528c <text_frame_end>

		cpi r22,TILE_HEIGHT ;last char line? 1
    524a:	68 30       	cpi	r22, 0x08	; 8
		breq next_tile_row
    524c:	29 f0       	breq	.+10     	; 0x5258 <next_tile_row>

		;wait to align with next_tile_row instructions (+1 cycle for the breq)
		WAIT r16,25
    524e:	08 e0       	ldi	r16, 0x08	; 8
    5250:	0a 95       	dec	r16
    5252:	f1 f7       	brne	.-4      	; 0x5250 <next_tile_line+0x22>
    5254:	00 00       	nop
		rjmp next_tile_line
    5256:	eb cf       	rjmp	.-42     	; 0x522e <next_tile_line>

00005258 <next_tile_row>:

	next_tile_row:

		clr r22		;clear current char line
    5258:	66 27       	eor	r22, r22

		;increment vram pointer next row
		mov r16,YL
    525a:	0c 2f       	mov	r16, r28
		andi r16,0x7
    525c:	07 70       	andi	r16, 0x07	; 7
		cpi r16,7
    525e:	07 30       	cpi	r16, 0x07	; 7
		breq 1f
    5260:	11 f0       	breq	.+4      	; 0x5266 <next_tile_row+0xe>
		inc YL
    5262:	c3 95       	inc	r28
		rjmp 2f
    5264:	02 c0       	rjmp	.+4      	; 0x526a <next_tile_row+0x12>
	1:
		andi YL,0xf8
    5266:	c8 7f       	andi	r28, 0xF8	; 248
		inc YH
    5268:	d3 95       	inc	r29
	2:

		dec r24		;wrap section?
    526a:	8a 95       	dec	r24
		brne .+2
    526c:	09 f4       	brne	.+2      	; 0x5270 <next_tile_row+0x18>
		movw YL,r12
    526e:	e6 01       	movw	r28, r12

		dec r19
    5270:	3a 95       	dec	r19
		brne .+2
    5272:	09 f4       	brne	.+2      	; 0x5276 <next_tile_row+0x1e>
		mov r22,r23	;section tile row
    5274:	67 2f       	mov	r22, r23
		brne .+2
    5276:	09 f4       	brne	.+2      	; 0x527a <next_tile_row+0x22>
		movw YL,r10 ;vram adress
    5278:	e5 01       	movw	r28, r10
		brne .+2
    527a:	09 f4       	brne	.+2      	; 0x527e <next_tile_row+0x26>
		mov r24,r15 ;Y wrapping
    527c:	8f 2d       	mov	r24, r15
		brne .+2
    527e:	09 f4       	brne	.+2      	; 0x5282 <next_tile_row+0x2a>
		mov r9,r25  ;scrollX
    5280:	99 2e       	mov	r9, r25

		brne .+2
    5282:	09 f4       	brne	.+2      	; 0x5286 <next_tile_row+0x2e>
		out _SFR_IO_ADDR(GPIOR1),r6  ;tileset
    5284:	6a bc       	out	0x2a, r6	; 42
		brne .+2
    5286:	09 f4       	brne	.+2      	; 0x528a <next_tile_row+0x32>
		out _SFR_IO_ADDR(GPIOR2),r7  ;tilset
    5288:	7b bc       	out	0x2b, r7	; 43

		rjmp next_tile_line
    528a:	d1 cf       	rjmp	.-94     	; 0x522e <next_tile_line>

0000528c <text_frame_end>:

	text_frame_end:

		WAIT r18,28
    528c:	29 e0       	ldi	r18, 0x09	; 9
    528e:	2a 95       	dec	r18
    5290:	f1 f7       	brne	.-4      	; 0x528e <text_frame_end+0x2>
    5292:	00 00       	nop

		rcall hsync_pulse ;145
    5294:	89 d3       	rcall	.+1810   	; 0x59a8 <hsync_pulse>
	
		clr r1
    5296:	11 24       	eor	r1, r1
		call RestoreBackground
    5298:	0e 94 80 39 	call	0x7300	; 0x7300 <RestoreBackground>

		;set vsync flag & flip field
		lds ZL,sync_flags
    529c:	e0 91 a2 08 	lds	r30, 0x08A2
		ldi r20,SYNC_FLAG_FIELD
    52a0:	42 e0       	ldi	r20, 0x02	; 2
		ori ZL,SYNC_FLAG_VSYNC
    52a2:	e1 60       	ori	r30, 0x01	; 1
		eor ZL,r20
    52a4:	e4 27       	eor	r30, r20
		sts sync_flags,ZL
    52a6:	e0 93 a2 08 	sts	0x08A2, r30
	
		cli 
    52aa:	f8 94       	cli

		;re-activate sync timer interrupts
		ldi ZL,(1<<OCIE1A)
    52ac:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIMSK1),ZL
    52ae:	e0 93 6f 00 	sts	0x006F, r30
			
		;clear any pending timer int
		ldi ZL,(1<<OCF1A)
    52b2:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIFR1),ZL
    52b4:	e0 93 36 00 	sts	0x0036, r30

		ret
    52b8:	08 95       	ret

000052ba <render_tile_line>:
	; Can destroy: r0,r1,r2,r3,r4,r5,r6,r7,r13,r16,r17,r18,r19,r20,r21,Z
	; 
	; cycles  = 1495
	;*************************************************
	render_tile_line:
		push YL
    52ba:	cf 93       	push	r28
		push YH
    52bc:	df 93       	push	r29
		push r23
    52be:	7f 93       	push	r23
		push r22
    52c0:	6f 93       	push	r22
		push r19
    52c2:	3f 93       	push	r19
		push r13
    52c4:	df 92       	push	r13
		push r12
    52c6:	cf 92       	push	r12
		push r9
    52c8:	9f 92       	push	r9
		push r7
    52ca:	7f 92       	push	r7
		push r6
    52cc:	6f 92       	push	r6
		;--------------------------
		; Rendering 
		;---------------------------

		;get tile row offset
		ldi r23,TILE_WIDTH ;tile width in pixels
    52ce:	78 e0       	ldi	r23, 0x08	; 8
		mul r22,r23
    52d0:	67 9f       	mul	r22, r23

		;compute base adresses for ROM and RAM tiles
		in r16,_SFR_IO_ADDR(GPIOR1) ;tile_table_lo
    52d2:	0a b5       	in	r16, 0x2a	; 42
		in r17,_SFR_IO_ADDR(GPIOR2) ;tile_table_hi
    52d4:	1b b5       	in	r17, 0x2b	; 43
		subi r16,lo8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    52d6:	00 50       	subi	r16, 0x00	; 0
		sbci r17,hi8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    52d8:	17 40       	sbci	r17, 0x07	; 7

		add r16,r0
    52da:	00 0d       	add	r16, r0
		adc r17,r1
    52dc:	11 1d       	adc	r17, r1
		movw r2,r16			;rom tiles adress
    52de:	18 01       	movw	r2, r16

		ldi r16,lo8(ram_tiles)
    52e0:	0a e3       	ldi	r16, 0x3A	; 58
		ldi r17,hi8(ram_tiles)
    52e2:	11 e0       	ldi	r17, 0x01	; 1
		add r16,r0
    52e4:	00 0d       	add	r16, r0
		adc r17,r1
    52e6:	11 1d       	adc	r17, r1
		movw r4,r16			;ram tiles adress
    52e8:	28 01       	movw	r4, r16

		ldi r19,TILE_HEIGHT*TILE_WIDTH
    52ea:	30 e4       	ldi	r19, 0x40	; 64
		ldi r17,SCREEN_TILES_H-1	;main loop counter
    52ec:	1b e1       	ldi	r17, 0x1B	; 27


		;handle fine scroll offset
		;lds r22,screenSections+scrollX
		mov r22,r9
    52ee:	69 2d       	mov	r22, r9
		andi r22,0x7		
    52f0:	67 70       	andi	r22, 0x07	; 7
		mov r14,r22	;pixels to draw on last tile	
    52f2:	e6 2e       	mov	r14, r22
		cli			;no trailing pixel to draw (hack, see end: )
    52f4:	f8 94       	cli
		breq .+2
    52f6:	09 f0       	breq	.+2      	; 0x52fa <render_tile_line+0x40>
		sei			;some trailing pixel to draw (hack, see end: )
    52f8:	78 94       	sei

		;get first pixel of last tile in ROM (for ROM tiles fine scroll)
		;and adress of next pixel
		movw ZL,YL
    52fa:	fe 01       	movw	r30, r28
		subi ZL,-(SCREEN_TILES_H*8)
    52fc:	e0 52       	subi	r30, 0x20	; 32
		ld r18,Z
    52fe:	20 81       	ld	r18, Z
		mul r18,r19 	;tile*width*height
    5300:	23 9f       	mul	r18, r19
	    add r0,r2    ;add ROM title table address +row offset
    5302:	02 0c       	add	r0, r2
	    adc r1,r3
    5304:	13 1c       	adc	r1, r3
		movw ZL,r0
    5306:	f0 01       	movw	r30, r0
		lpm r9,Z+	;hold first pixel until end 
    5308:	95 90       	lpm	r9, Z+
		movw r12,ZL ;hold second pixel adress until end
    530a:	6f 01       	movw	r12, r30


		;compute first tile adress
	    ld r18,Y     	;load next tile # from VRAM
    530c:	28 81       	ld	r18, Y
		subi YL,-8
    530e:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT
    5310:	2c 31       	cpi	r18, 0x1C	; 28
		in r16,_SFR_IO_ADDR(SREG)	;save the carry flag for later	
    5312:	0f b7       	in	r16, 0x3f	; 63
		mul r18,r19 	;tile*width*height
    5314:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles	
    5316:	a1 01       	movw	r20, r2
		sbrc r16,SREG_C
    5318:	00 fd       	sbrc	r16, 0
		movw r20,r4		;ram tiles
    531a:	a2 01       	movw	r20, r4
	    add r0,r20    ;add title table address +row offset
    531c:	04 0e       	add	r0, r20
	    adc r1,r21
    531e:	15 1e       	adc	r1, r21
		movw XL,r0
    5320:	d0 01       	movw	r26, r0


		;compute second tile adress
	    ld r18,Y     	;load next tile # from VRAM
    5322:	28 81       	ld	r18, Y
		subi YL,-8
    5324:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT
    5326:	2c 31       	cpi	r18, 0x1C	; 28
		in r7,_SFR_IO_ADDR(SREG)	;save the carry flag for later
    5328:	7f b6       	in	r7, 0x3f	; 63
		bst r7,SREG_C
    532a:	70 fa       	bst	r7, 0
		mul r18,r19 	;tile*width*height
    532c:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles
    532e:	a1 01       	movw	r20, r2
		brtc .+2
    5330:	0e f4       	brtc	.+2      	; 0x5334 <render_tile_line+0x7a>
		movw r20,r4		;ram tiles
    5332:	a2 01       	movw	r20, r4
	    add r0,r20      ;add title table address +row offset
    5334:	04 0e       	add	r0, r20
	    adc r1,r21
    5336:	15 1e       	adc	r1, r21
		movw ZL,r0
    5338:	f0 01       	movw	r30, r0
		movw r6,ZL		;push Z
    533a:	3f 01       	movw	r6, r30

0000533c <do_fine_scroll>:


	do_fine_scroll:
		;output 1st tile with fine scroll offset 
		clr r0
    533c:	00 24       	eor	r0, r0
		add XL,r22	;add fine offset
    533e:	a6 0f       	add	r26, r22
		adc XH,r0
    5340:	b0 1d       	adc	r27, r0

		;compute jump offset
		ldi r23,3
    5342:	73 e0       	ldi	r23, 0x03	; 3
		mul r22,r23 ;3 instructions
    5344:	67 9f       	mul	r22, r23
	
		sbrs r16,SREG_C
    5346:	00 ff       	sbrs	r16, 0
		rjmp rom_fine_scroll
    5348:	22 c0       	rjmp	.+68     	; 0x538e <rom_fine_scroll>

0000534a <ram_fine_scroll>:

	/***FINE SCROLL RAM LOOP***/
	ram_fine_scroll:
		rjmp .
    534a:	00 c0       	rjmp	.+0      	; 0x534c <ram_fine_scroll+0x2>
		ldi r22,lo8(pm(ram_fine_scroll_loop))
    534c:	6d ea       	ldi	r22, 0xAD	; 173
		ldi r23,hi8(pm(ram_fine_scroll_loop))
    534e:	79 e2       	ldi	r23, 0x29	; 41
		add r22,r0
    5350:	60 0d       	add	r22, r0
		adc r23,r1
    5352:	71 1d       	adc	r23, r1
		push r22
    5354:	6f 93       	push	r22
		push r23	
    5356:	7f 93       	push	r23
		ret ;jump into ram_fine_scroll_loop
    5358:	08 95       	ret

0000535a <ram_fine_scroll_loop>:
	ram_fine_scroll_loop:
		.rept 8
			ld r16,X+
			lpm
			out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		.endr
    535a:	0d 91       	ld	r16, X+
    535c:	c8 95       	lpm
    535e:	08 b9       	out	0x08, r16	; 8
    5360:	0d 91       	ld	r16, X+
    5362:	c8 95       	lpm
    5364:	08 b9       	out	0x08, r16	; 8
    5366:	0d 91       	ld	r16, X+
    5368:	c8 95       	lpm
    536a:	08 b9       	out	0x08, r16	; 8
    536c:	0d 91       	ld	r16, X+
    536e:	c8 95       	lpm
    5370:	08 b9       	out	0x08, r16	; 8
    5372:	0d 91       	ld	r16, X+
    5374:	c8 95       	lpm
    5376:	08 b9       	out	0x08, r16	; 8
    5378:	0d 91       	ld	r16, X+
    537a:	c8 95       	lpm
    537c:	08 b9       	out	0x08, r16	; 8
    537e:	0d 91       	ld	r16, X+
    5380:	c8 95       	lpm
    5382:	08 b9       	out	0x08, r16	; 8
    5384:	0d 91       	ld	r16, X+
    5386:	c8 95       	lpm
    5388:	08 b9       	out	0x08, r16	; 8

		;branch to tile #2
		brtc romloop
    538a:	1e f5       	brtc	.+70     	; 0x53d2 <romloop>
		rjmp ramloop
    538c:	40 c0       	rjmp	.+128    	; 0x540e <ramloop>

0000538e <rom_fine_scroll>:

	/***FINE SCROLL ROM LOOP***/
	rom_fine_scroll:
		movw ZL,XL
    538e:	fd 01       	movw	r30, r26
		ldi r22,lo8(pm(rom_fine_scroll_loop))	
    5390:	6f ec       	ldi	r22, 0xCF	; 207
		ldi r23,hi8(pm(rom_fine_scroll_loop))
    5392:	79 e2       	ldi	r23, 0x29	; 41
		add r22,r0
    5394:	60 0d       	add	r22, r0
		adc r23,r1
    5396:	71 1d       	adc	r23, r1
		push r22
    5398:	6f 93       	push	r22
		push r23	
    539a:	7f 93       	push	r23
		ret
    539c:	08 95       	ret

0000539e <rom_fine_scroll_loop>:
	rom_fine_scroll_loop:
		.rept 8
			lpm r16,Z+
			rjmp .
			out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		.endr 
    539e:	05 91       	lpm	r16, Z+
    53a0:	00 c0       	rjmp	.+0      	; 0x53a2 <rom_fine_scroll_loop+0x4>
    53a2:	08 b9       	out	0x08, r16	; 8
    53a4:	05 91       	lpm	r16, Z+
    53a6:	00 c0       	rjmp	.+0      	; 0x53a8 <rom_fine_scroll_loop+0xa>
    53a8:	08 b9       	out	0x08, r16	; 8
    53aa:	05 91       	lpm	r16, Z+
    53ac:	00 c0       	rjmp	.+0      	; 0x53ae <rom_fine_scroll_loop+0x10>
    53ae:	08 b9       	out	0x08, r16	; 8
    53b0:	05 91       	lpm	r16, Z+
    53b2:	00 c0       	rjmp	.+0      	; 0x53b4 <rom_fine_scroll_loop+0x16>
    53b4:	08 b9       	out	0x08, r16	; 8
    53b6:	05 91       	lpm	r16, Z+
    53b8:	00 c0       	rjmp	.+0      	; 0x53ba <rom_fine_scroll_loop+0x1c>
    53ba:	08 b9       	out	0x08, r16	; 8
    53bc:	05 91       	lpm	r16, Z+
    53be:	00 c0       	rjmp	.+0      	; 0x53c0 <rom_fine_scroll_loop+0x22>
    53c0:	08 b9       	out	0x08, r16	; 8
    53c2:	05 91       	lpm	r16, Z+
    53c4:	00 c0       	rjmp	.+0      	; 0x53c6 <rom_fine_scroll_loop+0x28>
    53c6:	08 b9       	out	0x08, r16	; 8
    53c8:	05 91       	lpm	r16, Z+
    53ca:	00 c0       	rjmp	.+0      	; 0x53cc <rom_fine_scroll_loop+0x2e>
    53cc:	08 b9       	out	0x08, r16	; 8
	
		movw ZL,r6		;restore Z for tile #2
    53ce:	f3 01       	movw	r30, r6

		;branch to tile #2
		brts ramloop
    53d0:	f6 f0       	brts	.+60     	; 0x540e <ramloop>

000053d2 <romloop>:

	
	romloop:
	    lpm r16,Z+
    53d2:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    53d4:	08 b9       	out	0x08, r16	; 8
	    ld r18,Y     ;load next tile # from VRAM
    53d6:	28 81       	ld	r18, Y

	    lpm r16,Z+
    53d8:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 2
    53da:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    53dc:	23 9f       	mul	r18, r19

	    lpm r16,Z+
    53de:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 3
    53e0:	08 b9       	out	0x08, r16	; 8
		subi YL,-8
    53e2:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT		;is tile in RAM or ROM? (RAM tiles have indexes<RAM_TILES_COUNT)
    53e4:	2c 31       	cpi	r18, 0x1C	; 28
		
	    lpm r16,Z+
    53e6:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    53e8:	08 b9       	out	0x08, r16	; 8
		brsh .+2		;skip if next tile is in ROM	
    53ea:	08 f4       	brcc	.+2      	; 0x53ee <romloop+0x1c>
		movw r20,r4 	;load RAM title table address +row offset	
    53ec:	a2 01       	movw	r20, r4
   
	    lpm r16,Z+
    53ee:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 5
    53f0:	08 b9       	out	0x08, r16	; 8
		add r0,r20		;add tile table address +row offset lsb
    53f2:	04 0e       	add	r0, r20
	    adc r1,r21		;add title table address +row offset msb
    53f4:	15 1e       	adc	r1, r21

	    lpm r16,Z+
    53f6:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 6
    53f8:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT	
    53fa:	2c 31       	cpi	r18, 0x1C	; 28
		dec r17			;decrement tiles to draw on line (does not affect carry)
    53fc:	1a 95       	dec	r17
   
	    lpm r16,Z+
    53fe:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 7   
    5400:	08 b9       	out	0x08, r16	; 8
	    lpm r16,Z+
    5402:	05 91       	lpm	r16, Z+

		breq end	
    5404:	39 f1       	breq	.+78     	; 0x5454 <end>
	    movw ZL,r0   	;copy next tile adress
    5406:	f0 01       	movw	r30, r0

	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    5408:	08 b9       	out	0x08, r16	; 8
	    brcc romloop
    540a:	18 f7       	brcc	.-58     	; 0x53d2 <romloop>
	
		rjmp .
    540c:	00 c0       	rjmp	.+0      	; 0x540e <ramloop>

0000540e <ramloop>:

	ramloop:

	    ld r16,Z+
    540e:	01 91       	ld	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    5410:	08 b9       	out	0x08, r16	; 8
	    ld r18,Y     ;load next tile # from VRAM
    5412:	28 81       	ld	r18, Y

	    ld r16,Z+ 
    5414:	01 91       	ld	r16, Z+
		subi YL,-8   		
    5416:	c8 5f       	subi	r28, 0xF8	; 248
		out _SFR_IO_ADDR(DATA_PORT),r16 		;pixel 2
    5418:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    541a:	23 9f       	mul	r18, r19

	    ld r16,Z+
    541c:	01 91       	ld	r16, Z+
		nop
    541e:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16         ;pixel 3
    5420:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    5422:	2c 31       	cpi	r18, 0x1C	; 28
		rjmp .
    5424:	00 c0       	rjmp	.+0      	; 0x5426 <ramloop+0x18>
   
	    ld r16,Z+
    5426:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    5428:	08 b9       	out	0x08, r16	; 8
		brcs .+2 
    542a:	08 f0       	brcs	.+2      	; 0x542e <ramloop+0x20>
		movw r20,r2 	;ROM title table address +row offset	
    542c:	a1 01       	movw	r20, r2
   
   
	    ld r16,Z+
    542e:	01 91       	ld	r16, Z+
	    add r0,r20    ;add title table address +row offset
    5430:	04 0e       	add	r0, r20
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 5
    5432:	08 b9       	out	0x08, r16	; 8
	    adc r1,r21
    5434:	15 1e       	adc	r1, r21
		rjmp .
    5436:	00 c0       	rjmp	.+0      	; 0x5438 <ramloop+0x2a>
    
		ld r16,Z+		
    5438:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 6
    543a:	08 b9       	out	0x08, r16	; 8
		ld r7,Z+
    543c:	71 90       	ld	r7, Z+
	    ld r16,Z+	
    543e:	01 91       	ld	r16, Z+
	
		movw ZL,r0
    5440:	f0 01       	movw	r30, r0
		out _SFR_IO_ADDR(DATA_PORT),r7      ;pixel 7   
    5442:	78 b8       	out	0x08, r7	; 8
		nop
    5444:	00 00       	nop
		cpi r18,RAM_TILES_COUNT	
    5446:	2c 31       	cpi	r18, 0x1C	; 28
	    dec r17
    5448:	1a 95       	dec	r17
	    breq end
    544a:	21 f0       	breq	.+8      	; 0x5454 <end>
	
		nop
    544c:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    544e:	08 b9       	out	0x08, r16	; 8
	
	    brcc romloop
    5450:	00 f6       	brcc	.-128    	; 0x53d2 <romloop>
		rjmp ramloop
    5452:	dd cf       	rjmp	.-70     	; 0x540e <ramloop>

00005454 <end>:
	
	end:
		out _SFR_IO_ADDR(DATA_PORT),r16  	;pixel 8
    5454:	08 b9       	out	0x08, r16	; 8
		brid end_fine_scroll				;hack: interrupt flag=0 => no fine offset pixel to draw
    5456:	27 f5       	brid	.+72     	; 0x54a0 <end_fine_scroll>
		brcc end_rom_fine_scroll_loop
    5458:	30 f4       	brcc	.+12     	; 0x5466 <end_rom_fine_scroll_loop>

	/***END RAM LOOP***/
		movw ZL,r0
    545a:	f0 01       	movw	r30, r0

0000545c <end_ram_fine_scroll_loop>:
	end_ram_fine_scroll_loop:
		ld r16,Z+
    545c:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
    545e:	08 b9       	out	0x08, r16	; 8
		dec r14
    5460:	ea 94       	dec	r14
		brne end_ram_fine_scroll_loop
    5462:	e1 f7       	brne	.-8      	; 0x545c <end_ram_fine_scroll_loop>
		rjmp end_fine_scroll_ram
    5464:	1f c0       	rjmp	.+62     	; 0x54a4 <end_fine_scroll_ram>

00005466 <end_rom_fine_scroll_loop>:

	/***END ROM LOOP***/
	end_rom_fine_scroll_loop:
		movw ZL,r12
    5466:	f6 01       	movw	r30, r12
		nop
    5468:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r9        ;output saved 1st pixel
    546a:	98 b8       	out	0x08, r9	; 8
		dec r14
    546c:	ea 94       	dec	r14
		breq end_fine_scroll_rom
    546e:	c9 f0       	breq	.+50     	; 0x54a2 <end_fine_scroll_rom>
	.rept 6
		lpm r16,Z+		
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		dec r14
		breq end_fine_scroll_rom
	.endr
    5470:	05 91       	lpm	r16, Z+
    5472:	08 b9       	out	0x08, r16	; 8
    5474:	ea 94       	dec	r14
    5476:	a9 f0       	breq	.+42     	; 0x54a2 <end_fine_scroll_rom>
    5478:	05 91       	lpm	r16, Z+
    547a:	08 b9       	out	0x08, r16	; 8
    547c:	ea 94       	dec	r14
    547e:	89 f0       	breq	.+34     	; 0x54a2 <end_fine_scroll_rom>
    5480:	05 91       	lpm	r16, Z+
    5482:	08 b9       	out	0x08, r16	; 8
    5484:	ea 94       	dec	r14
    5486:	69 f0       	breq	.+26     	; 0x54a2 <end_fine_scroll_rom>
    5488:	05 91       	lpm	r16, Z+
    548a:	08 b9       	out	0x08, r16	; 8
    548c:	ea 94       	dec	r14
    548e:	49 f0       	breq	.+18     	; 0x54a2 <end_fine_scroll_rom>
    5490:	05 91       	lpm	r16, Z+
    5492:	08 b9       	out	0x08, r16	; 8
    5494:	ea 94       	dec	r14
    5496:	29 f0       	breq	.+10     	; 0x54a2 <end_fine_scroll_rom>
    5498:	05 91       	lpm	r16, Z+
    549a:	08 b9       	out	0x08, r16	; 8
    549c:	ea 94       	dec	r14
    549e:	09 f0       	breq	.+2      	; 0x54a2 <end_fine_scroll_rom>

000054a0 <end_fine_scroll>:
	...

000054a2 <end_fine_scroll_rom>:
	...

000054a4 <end_fine_scroll_ram>:
	end_fine_scroll:	
		nop
	end_fine_scroll_rom:
		nop
	end_fine_scroll_ram:
		clr r16	
    54a4:	00 27       	eor	r16, r16
		out _SFR_IO_ADDR(DATA_PORT),r16   
    54a6:	08 b9       	out	0x08, r16	; 8

		pop r6
    54a8:	6f 90       	pop	r6
		pop r7
    54aa:	7f 90       	pop	r7
		pop r9
    54ac:	9f 90       	pop	r9
		pop r12
    54ae:	cf 90       	pop	r12
		pop r13
    54b0:	df 90       	pop	r13
		pop r19
    54b2:	3f 91       	pop	r19
		pop r22
    54b4:	6f 91       	pop	r22
		pop r23
    54b6:	7f 91       	pop	r23
		pop YH
    54b8:	df 91       	pop	r29
		pop YL
    54ba:	cf 91       	pop	r28

		ret
    54bc:	08 95       	ret

000054be <CopyFlashTile>:
; C-callable
; r24=Source ROM tile index
; r22=Dest RAM tile index
;************************************
CopyFlashTile:
	ldi r18,TILE_HEIGHT*TILE_WIDTH
    54be:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	lds ZL,tile_table_lo
    54c0:	e0 91 96 08 	lds	r30, 0x0896
	lds ZH,tile_table_hi
    54c4:	f0 91 97 08 	lds	r31, 0x0897
	mul r24,r18
    54c8:	82 9f       	mul	r24, r18
	add ZL,r0
    54ca:	e0 0d       	add	r30, r0
	adc ZH,r1
    54cc:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    54ce:	aa e3       	ldi	r26, 0x3A	; 58
	ldi XH,hi8(ram_tiles)
    54d0:	b1 e0       	ldi	r27, 0x01	; 1
	mul r22,r18
    54d2:	62 9f       	mul	r22, r18
	add XL,r0
    54d4:	a0 0d       	add	r26, r0
	adc XH,r1
    54d6:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	lpm r1,Z+
	st X+,r1
.endr
    54d8:	15 90       	lpm	r1, Z+
    54da:	1d 92       	st	X+, r1
    54dc:	15 90       	lpm	r1, Z+
    54de:	1d 92       	st	X+, r1
    54e0:	15 90       	lpm	r1, Z+
    54e2:	1d 92       	st	X+, r1
    54e4:	15 90       	lpm	r1, Z+
    54e6:	1d 92       	st	X+, r1
    54e8:	15 90       	lpm	r1, Z+
    54ea:	1d 92       	st	X+, r1
    54ec:	15 90       	lpm	r1, Z+
    54ee:	1d 92       	st	X+, r1
    54f0:	15 90       	lpm	r1, Z+
    54f2:	1d 92       	st	X+, r1
    54f4:	15 90       	lpm	r1, Z+
    54f6:	1d 92       	st	X+, r1
    54f8:	15 90       	lpm	r1, Z+
    54fa:	1d 92       	st	X+, r1
    54fc:	15 90       	lpm	r1, Z+
    54fe:	1d 92       	st	X+, r1
    5500:	15 90       	lpm	r1, Z+
    5502:	1d 92       	st	X+, r1
    5504:	15 90       	lpm	r1, Z+
    5506:	1d 92       	st	X+, r1
    5508:	15 90       	lpm	r1, Z+
    550a:	1d 92       	st	X+, r1
    550c:	15 90       	lpm	r1, Z+
    550e:	1d 92       	st	X+, r1
    5510:	15 90       	lpm	r1, Z+
    5512:	1d 92       	st	X+, r1
    5514:	15 90       	lpm	r1, Z+
    5516:	1d 92       	st	X+, r1
    5518:	15 90       	lpm	r1, Z+
    551a:	1d 92       	st	X+, r1
    551c:	15 90       	lpm	r1, Z+
    551e:	1d 92       	st	X+, r1
    5520:	15 90       	lpm	r1, Z+
    5522:	1d 92       	st	X+, r1
    5524:	15 90       	lpm	r1, Z+
    5526:	1d 92       	st	X+, r1
    5528:	15 90       	lpm	r1, Z+
    552a:	1d 92       	st	X+, r1
    552c:	15 90       	lpm	r1, Z+
    552e:	1d 92       	st	X+, r1
    5530:	15 90       	lpm	r1, Z+
    5532:	1d 92       	st	X+, r1
    5534:	15 90       	lpm	r1, Z+
    5536:	1d 92       	st	X+, r1
    5538:	15 90       	lpm	r1, Z+
    553a:	1d 92       	st	X+, r1
    553c:	15 90       	lpm	r1, Z+
    553e:	1d 92       	st	X+, r1
    5540:	15 90       	lpm	r1, Z+
    5542:	1d 92       	st	X+, r1
    5544:	15 90       	lpm	r1, Z+
    5546:	1d 92       	st	X+, r1
    5548:	15 90       	lpm	r1, Z+
    554a:	1d 92       	st	X+, r1
    554c:	15 90       	lpm	r1, Z+
    554e:	1d 92       	st	X+, r1
    5550:	15 90       	lpm	r1, Z+
    5552:	1d 92       	st	X+, r1
    5554:	15 90       	lpm	r1, Z+
    5556:	1d 92       	st	X+, r1
    5558:	15 90       	lpm	r1, Z+
    555a:	1d 92       	st	X+, r1
    555c:	15 90       	lpm	r1, Z+
    555e:	1d 92       	st	X+, r1
    5560:	15 90       	lpm	r1, Z+
    5562:	1d 92       	st	X+, r1
    5564:	15 90       	lpm	r1, Z+
    5566:	1d 92       	st	X+, r1
    5568:	15 90       	lpm	r1, Z+
    556a:	1d 92       	st	X+, r1
    556c:	15 90       	lpm	r1, Z+
    556e:	1d 92       	st	X+, r1
    5570:	15 90       	lpm	r1, Z+
    5572:	1d 92       	st	X+, r1
    5574:	15 90       	lpm	r1, Z+
    5576:	1d 92       	st	X+, r1
    5578:	15 90       	lpm	r1, Z+
    557a:	1d 92       	st	X+, r1
    557c:	15 90       	lpm	r1, Z+
    557e:	1d 92       	st	X+, r1
    5580:	15 90       	lpm	r1, Z+
    5582:	1d 92       	st	X+, r1
    5584:	15 90       	lpm	r1, Z+
    5586:	1d 92       	st	X+, r1
    5588:	15 90       	lpm	r1, Z+
    558a:	1d 92       	st	X+, r1
    558c:	15 90       	lpm	r1, Z+
    558e:	1d 92       	st	X+, r1
    5590:	15 90       	lpm	r1, Z+
    5592:	1d 92       	st	X+, r1
    5594:	15 90       	lpm	r1, Z+
    5596:	1d 92       	st	X+, r1
    5598:	15 90       	lpm	r1, Z+
    559a:	1d 92       	st	X+, r1
    559c:	15 90       	lpm	r1, Z+
    559e:	1d 92       	st	X+, r1
    55a0:	15 90       	lpm	r1, Z+
    55a2:	1d 92       	st	X+, r1
    55a4:	15 90       	lpm	r1, Z+
    55a6:	1d 92       	st	X+, r1
    55a8:	15 90       	lpm	r1, Z+
    55aa:	1d 92       	st	X+, r1
    55ac:	15 90       	lpm	r1, Z+
    55ae:	1d 92       	st	X+, r1
    55b0:	15 90       	lpm	r1, Z+
    55b2:	1d 92       	st	X+, r1
    55b4:	15 90       	lpm	r1, Z+
    55b6:	1d 92       	st	X+, r1
    55b8:	15 90       	lpm	r1, Z+
    55ba:	1d 92       	st	X+, r1
    55bc:	15 90       	lpm	r1, Z+
    55be:	1d 92       	st	X+, r1
    55c0:	15 90       	lpm	r1, Z+
    55c2:	1d 92       	st	X+, r1
    55c4:	15 90       	lpm	r1, Z+
    55c6:	1d 92       	st	X+, r1
    55c8:	15 90       	lpm	r1, Z+
    55ca:	1d 92       	st	X+, r1
    55cc:	15 90       	lpm	r1, Z+
    55ce:	1d 92       	st	X+, r1
    55d0:	15 90       	lpm	r1, Z+
    55d2:	1d 92       	st	X+, r1
    55d4:	15 90       	lpm	r1, Z+
    55d6:	1d 92       	st	X+, r1
	clr r1
    55d8:	11 24       	eor	r1, r1
	ret
    55da:	08 95       	ret

000055dc <CopyRamTile>:
; r24=Source RAM tile index
; r22=Dest RAM tile index
;************************************
CopyRamTile:

	ldi r18,TILE_HEIGHT*TILE_WIDTH
    55dc:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	ldi ZL,lo8(ram_tiles)
    55de:	ea e3       	ldi	r30, 0x3A	; 58
	ldi ZH,hi8(ram_tiles)
    55e0:	f1 e0       	ldi	r31, 0x01	; 1
	mul r24,r18
    55e2:	82 9f       	mul	r24, r18
	add ZL,r0
    55e4:	e0 0d       	add	r30, r0
	adc ZH,r1
    55e6:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    55e8:	aa e3       	ldi	r26, 0x3A	; 58
	ldi XH,hi8(ram_tiles)
    55ea:	b1 e0       	ldi	r27, 0x01	; 1
	mul r22,r18
    55ec:	62 9f       	mul	r22, r18
	add XL,r0
    55ee:	a0 0d       	add	r26, r0
	adc XH,r1
    55f0:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	ld r1,Z+
	st X+,r1
.endr
    55f2:	11 90       	ld	r1, Z+
    55f4:	1d 92       	st	X+, r1
    55f6:	11 90       	ld	r1, Z+
    55f8:	1d 92       	st	X+, r1
    55fa:	11 90       	ld	r1, Z+
    55fc:	1d 92       	st	X+, r1
    55fe:	11 90       	ld	r1, Z+
    5600:	1d 92       	st	X+, r1
    5602:	11 90       	ld	r1, Z+
    5604:	1d 92       	st	X+, r1
    5606:	11 90       	ld	r1, Z+
    5608:	1d 92       	st	X+, r1
    560a:	11 90       	ld	r1, Z+
    560c:	1d 92       	st	X+, r1
    560e:	11 90       	ld	r1, Z+
    5610:	1d 92       	st	X+, r1
    5612:	11 90       	ld	r1, Z+
    5614:	1d 92       	st	X+, r1
    5616:	11 90       	ld	r1, Z+
    5618:	1d 92       	st	X+, r1
    561a:	11 90       	ld	r1, Z+
    561c:	1d 92       	st	X+, r1
    561e:	11 90       	ld	r1, Z+
    5620:	1d 92       	st	X+, r1
    5622:	11 90       	ld	r1, Z+
    5624:	1d 92       	st	X+, r1
    5626:	11 90       	ld	r1, Z+
    5628:	1d 92       	st	X+, r1
    562a:	11 90       	ld	r1, Z+
    562c:	1d 92       	st	X+, r1
    562e:	11 90       	ld	r1, Z+
    5630:	1d 92       	st	X+, r1
    5632:	11 90       	ld	r1, Z+
    5634:	1d 92       	st	X+, r1
    5636:	11 90       	ld	r1, Z+
    5638:	1d 92       	st	X+, r1
    563a:	11 90       	ld	r1, Z+
    563c:	1d 92       	st	X+, r1
    563e:	11 90       	ld	r1, Z+
    5640:	1d 92       	st	X+, r1
    5642:	11 90       	ld	r1, Z+
    5644:	1d 92       	st	X+, r1
    5646:	11 90       	ld	r1, Z+
    5648:	1d 92       	st	X+, r1
    564a:	11 90       	ld	r1, Z+
    564c:	1d 92       	st	X+, r1
    564e:	11 90       	ld	r1, Z+
    5650:	1d 92       	st	X+, r1
    5652:	11 90       	ld	r1, Z+
    5654:	1d 92       	st	X+, r1
    5656:	11 90       	ld	r1, Z+
    5658:	1d 92       	st	X+, r1
    565a:	11 90       	ld	r1, Z+
    565c:	1d 92       	st	X+, r1
    565e:	11 90       	ld	r1, Z+
    5660:	1d 92       	st	X+, r1
    5662:	11 90       	ld	r1, Z+
    5664:	1d 92       	st	X+, r1
    5666:	11 90       	ld	r1, Z+
    5668:	1d 92       	st	X+, r1
    566a:	11 90       	ld	r1, Z+
    566c:	1d 92       	st	X+, r1
    566e:	11 90       	ld	r1, Z+
    5670:	1d 92       	st	X+, r1
    5672:	11 90       	ld	r1, Z+
    5674:	1d 92       	st	X+, r1
    5676:	11 90       	ld	r1, Z+
    5678:	1d 92       	st	X+, r1
    567a:	11 90       	ld	r1, Z+
    567c:	1d 92       	st	X+, r1
    567e:	11 90       	ld	r1, Z+
    5680:	1d 92       	st	X+, r1
    5682:	11 90       	ld	r1, Z+
    5684:	1d 92       	st	X+, r1
    5686:	11 90       	ld	r1, Z+
    5688:	1d 92       	st	X+, r1
    568a:	11 90       	ld	r1, Z+
    568c:	1d 92       	st	X+, r1
    568e:	11 90       	ld	r1, Z+
    5690:	1d 92       	st	X+, r1
    5692:	11 90       	ld	r1, Z+
    5694:	1d 92       	st	X+, r1
    5696:	11 90       	ld	r1, Z+
    5698:	1d 92       	st	X+, r1
    569a:	11 90       	ld	r1, Z+
    569c:	1d 92       	st	X+, r1
    569e:	11 90       	ld	r1, Z+
    56a0:	1d 92       	st	X+, r1
    56a2:	11 90       	ld	r1, Z+
    56a4:	1d 92       	st	X+, r1
    56a6:	11 90       	ld	r1, Z+
    56a8:	1d 92       	st	X+, r1
    56aa:	11 90       	ld	r1, Z+
    56ac:	1d 92       	st	X+, r1
    56ae:	11 90       	ld	r1, Z+
    56b0:	1d 92       	st	X+, r1
    56b2:	11 90       	ld	r1, Z+
    56b4:	1d 92       	st	X+, r1
    56b6:	11 90       	ld	r1, Z+
    56b8:	1d 92       	st	X+, r1
    56ba:	11 90       	ld	r1, Z+
    56bc:	1d 92       	st	X+, r1
    56be:	11 90       	ld	r1, Z+
    56c0:	1d 92       	st	X+, r1
    56c2:	11 90       	ld	r1, Z+
    56c4:	1d 92       	st	X+, r1
    56c6:	11 90       	ld	r1, Z+
    56c8:	1d 92       	st	X+, r1
    56ca:	11 90       	ld	r1, Z+
    56cc:	1d 92       	st	X+, r1
    56ce:	11 90       	ld	r1, Z+
    56d0:	1d 92       	st	X+, r1
    56d2:	11 90       	ld	r1, Z+
    56d4:	1d 92       	st	X+, r1
    56d6:	11 90       	ld	r1, Z+
    56d8:	1d 92       	st	X+, r1
    56da:	11 90       	ld	r1, Z+
    56dc:	1d 92       	st	X+, r1
    56de:	11 90       	ld	r1, Z+
    56e0:	1d 92       	st	X+, r1
    56e2:	11 90       	ld	r1, Z+
    56e4:	1d 92       	st	X+, r1
    56e6:	11 90       	ld	r1, Z+
    56e8:	1d 92       	st	X+, r1
    56ea:	11 90       	ld	r1, Z+
    56ec:	1d 92       	st	X+, r1
    56ee:	11 90       	ld	r1, Z+
    56f0:	1d 92       	st	X+, r1
	clr r1
    56f2:	11 24       	eor	r1, r1
	ret
    56f4:	08 95       	ret

000056f6 <BlitSprite>:
; r22=RAM tile index (bt)
; r21:r20=Y:X
; r19:r18=DY:DX
;************************************
BlitSprite:
	push r16
    56f6:	0f 93       	push	r16
	push r17
    56f8:	1f 93       	push	r17
	push YL
    56fa:	cf 93       	push	r28
	push YH
    56fc:	df 93       	push	r29

	;src=sprites_tiletable_lo+(sprites[i].tileIndex*TILE_HEIGHT*TILE_WIDTH)
	ldi r25,SPRITE_STRUCT_SIZE
    56fe:	94 e0       	ldi	r25, 0x04	; 4
	mul r24,r25
    5700:	89 9f       	mul	r24, r25

	ldi ZL,lo8(sprites)	
    5702:	e2 e0       	ldi	r30, 0x02	; 2
	ldi ZH,hi8(sprites)	
    5704:	f1 e0       	ldi	r31, 0x01	; 1
	add ZL,r0
    5706:	e0 0d       	add	r30, r0
	adc ZH,r1
    5708:	f1 1d       	adc	r31, r1

	ldd r16,Z+sprFlags
    570a:	03 81       	ldd	r16, Z+3	; 0x03

	;8x16 multiply
	ldd r24,Z+sprTileIndex
    570c:	82 81       	ldd	r24, Z+2	; 0x02
	ldi r30,TILE_WIDTH*TILE_HEIGHT
    570e:	e0 e4       	ldi	r30, 0x40	; 64
	mul r24,r30
    5710:	8e 9f       	mul	r24, r30
	movw r26,r0
    5712:	d0 01       	movw	r26, r0
	
	;get tile bank addr
	ldi r25,4*2
    5714:	98 e0       	ldi	r25, 0x08	; 8
	mul r16,r25
    5716:	09 9f       	mul	r16, r25
	ldi YL,lo8(sprites_tile_banks)	
    5718:	ce e8       	ldi	r28, 0x8E	; 142
	ldi YH,hi8(sprites_tile_banks)	
    571a:	d8 e0       	ldi	r29, 0x08	; 8
	clr r0
    571c:	00 24       	eor	r0, r0
	add YL,r1
    571e:	c1 0d       	add	r28, r1
	adc YH,r0		
    5720:	d0 1d       	adc	r29, r0
	ldd ZL,Y+0
    5722:	e8 81       	ld	r30, Y
	ldd ZH,Y+1
    5724:	f9 81       	ldd	r31, Y+1	; 0x01
	add ZL,r26	;tile data src
    5726:	ea 0f       	add	r30, r26
	adc ZH,r27
    5728:	fb 1f       	adc	r31, r27
	
	;dest=ram_tiles+(bt*TILE_HEIGHT*TILE_WIDTH)
	ldi XL,lo8(ram_tiles)	
    572a:	aa e3       	ldi	r26, 0x3A	; 58
	ldi XH,hi8(ram_tiles)
    572c:	b1 e0       	ldi	r27, 0x01	; 1
	ldi r25,TILE_WIDTH*TILE_HEIGHT
    572e:	90 e4       	ldi	r25, 0x40	; 64
	mul r22,r25
    5730:	69 9f       	mul	r22, r25
	add XL,r0
    5732:	a0 0d       	add	r26, r0
	adc XH,r1
    5734:	b1 1d       	adc	r27, r1
			srcXdiff=destXdiff;
			src+=destXdiff;
		}
	}
	*/
	clr r1
    5736:	11 24       	eor	r1, r1
	clr YH		;hi8(srcXdiff)
    5738:	dd 27       	eor	r29, r29

	cpi r20,0	
    573a:	40 30       	cpi	r20, 0x00	; 0
	brne x_2nd_tile
    573c:	51 f4       	brne	.+20     	; 0x5752 <x_2nd_tile>
	
	add XL,r18	;dest+=dx
    573e:	a2 0f       	add	r26, r18
	adc XH,r1
    5740:	b1 1d       	adc	r27, r1
	mov r24,r18	;destXdiff=dx
    5742:	82 2f       	mov	r24, r18
	mov YL,r18	;srcXdiff=dx
    5744:	c2 2f       	mov	r28, r18

	sbrs r16,SPRITE_FLIP_X_BIT
    5746:	00 ff       	sbrs	r16, 0
	rjmp x_check_end
    5748:	11 c0       	rjmp	.+34     	; 0x576c <x_check_end>

	adiw ZL,(TILE_WIDTH-1)	;src+=7
    574a:	37 96       	adiw	r30, 0x07	; 7
	ldi YL,TILE_WIDTH*2		;srcXdiff=((TILE_WIDTH*2)-dx);
    574c:	c0 e1       	ldi	r28, 0x10	; 16
	sub YL,r18	
    574e:	c2 1b       	sub	r28, r18
	rjmp x_check_end
    5750:	0d c0       	rjmp	.+26     	; 0x576c <x_check_end>

00005752 <x_2nd_tile>:

x_2nd_tile:
	ldi r24,TILE_WIDTH
    5752:	88 e0       	ldi	r24, 0x08	; 8
	sub r24,r18		;8-DX = xdiff for dest
    5754:	82 1b       	sub	r24, r18

	sbrc r16,SPRITE_FLIP_X_BIT
    5756:	00 fd       	sbrc	r16, 0
	rjmp x2_flip_x
    5758:	04 c0       	rjmp	.+8      	; 0x5762 <x2_flip_x>

	mov YL,r24		;srcXdiff=destXdiff;
    575a:	c8 2f       	mov	r28, r24
	add ZL,r24		;src+=destXdiff;
    575c:	e8 0f       	add	r30, r24
	adc ZH,r1	
    575e:	f1 1d       	adc	r31, r1
	rjmp x_check_end
    5760:	05 c0       	rjmp	.+10     	; 0x576c <x_check_end>

00005762 <x2_flip_x>:

x2_flip_x:
	ldi YL,TILE_WIDTH
    5762:	c8 e0       	ldi	r28, 0x08	; 8
	add YL,r18		;srcXdiff=TILE_WIDTH+dx;	
    5764:	c2 0f       	add	r28, r18
	add ZL,r18		;src+=dx;
    5766:	e2 0f       	add	r30, r18
	adc ZH,r1
    5768:	f1 1d       	adc	r31, r1
	sbiw ZL,1		;src--;
    576a:	31 97       	sbiw	r30, 0x01	; 1

0000576c <x_check_end>:
		}else{
			src+=(ydiff*TILE_WIDTH);
		}
	}
	*/
	cpi r21,0
    576c:	50 30       	cpi	r21, 0x00	; 0
	brne y_2nd_tile
    576e:	51 f4       	brne	.+20     	; 0x5784 <y_2nd_tile>

	ldi r25,TILE_WIDTH	;dest+=(dy*TILE_WIDTH)
    5770:	98 e0       	ldi	r25, 0x08	; 8
	mul r25,r19			
    5772:	93 9f       	mul	r25, r19
	add XL,r0
    5774:	a0 0d       	add	r26, r0
	adc XH,r1
    5776:	b1 1d       	adc	r27, r1

	mov r25,r19			;ydiff=dy
    5778:	93 2f       	mov	r25, r19

	//sbrc r16,SPRITE_FLIP_Y_BIT
	//adiw ZL,(TILE_WIDTH*(TILE_HEIGHT-1))

	sbrc r16,SPRITE_FLIP_Y_BIT
    577a:	01 fd       	sbrc	r16, 1
	subi ZL,lo8(-(TILE_WIDTH*(TILE_HEIGHT-1)));src+=(TILE_WIDTH*(TILE_HEIGHT-1));
    577c:	e8 5c       	subi	r30, 0xC8	; 200
	sbrc r16,SPRITE_FLIP_Y_BIT
    577e:	01 fd       	sbrc	r16, 1
	sbci ZH,hi8(-(TILE_WIDTH*(TILE_HEIGHT-1)))
    5780:	ff 4f       	sbci	r31, 0xFF	; 255


	rjmp y_check_end
    5782:	0a c0       	rjmp	.+20     	; 0x5798 <y_check_end>

00005784 <y_2nd_tile>:

y_2nd_tile:
	ldi r25,TILE_HEIGHT	;ydiff=(TILE_HEIGHT-dy)
    5784:	98 e0       	ldi	r25, 0x08	; 8
	sub r25,r19	
    5786:	93 1b       	sub	r25, r19
	
	mov r22,r19			;temp=dy-1
    5788:	63 2f       	mov	r22, r19
	dec r22
    578a:	6a 95       	dec	r22
	sbrs r16,SPRITE_FLIP_Y_BIT
    578c:	01 ff       	sbrs	r16, 1
	mov r22,r25			;temp=ydiff
    578e:	69 2f       	mov	r22, r25

	ldi r21,TILE_WIDTH	;src+=(temp*TILE_WIDTH);
    5790:	58 e0       	ldi	r21, 0x08	; 8
	mul r21,r22
    5792:	56 9f       	mul	r21, r22
	add ZL,r0
    5794:	e0 0d       	add	r30, r0
	adc ZH,r1	
    5796:	f1 1d       	adc	r31, r1

00005798 <y_check_end>:
y_check_end:	
	
	//if(flags&SPRITE_FLIP_X){
	//	step=-1;
	//}
	ser r22		;step=-1
    5798:	6f ef       	ldi	r22, 0xFF	; 255
	ser r23
    579a:	7f ef       	ldi	r23, 0xFF	; 255
	sbrs r16,SPRITE_FLIP_X_BIT
    579c:	00 ff       	sbrs	r16, 0
	ldi r22,1	;step=1
    579e:	61 e0       	ldi	r22, 0x01	; 1
	sbrs r16,SPRITE_FLIP_X_BIT
    57a0:	00 ff       	sbrs	r16, 0
	clr r23
    57a2:	77 27       	eor	r23, r23

	//if(flags&SPRITE_FLIP_Y){
	//	srcXdiff-=(TILE_WIDTH*2);
	//}
	sbrc r16,SPRITE_FLIP_Y_BIT
    57a4:	01 fd       	sbrc	r16, 1
	sbiw YL,(TILE_WIDTH*2)
    57a6:	60 97       	sbiw	r28, 0x10	; 16
	;r24	= destXdiff
	;r25	= ydiff
	;X		= dest
	;Y		= srcXdiff
	;Z		= src
	clr r1
    57a8:	11 24       	eor	r1, r1
	ldi r19,TRANSLUCENT_COLOR
    57aa:	3e ef       	ldi	r19, 0xFE	; 254

	ldi r21,TILE_HEIGHT
    57ac:	58 e0       	ldi	r21, 0x08	; 8
	sub r21,r25 	;yspan=(TILE_HEIGHT-ydiff)
    57ae:	59 1b       	sub	r21, r25

000057b0 <y_loop>:

y_loop:
	ldi r20,TILE_WIDTH
    57b0:	48 e0       	ldi	r20, 0x08	; 8
	sub r20,r24 	;xspan=(TILE_WIDTH-destXdiff)
    57b2:	48 1b       	sub	r20, r24

000057b4 <x_loop>:

x_loop:
	lpm r18,Z		;px=pgm_read_byte(src);
    57b4:	24 91       	lpm	r18, Z
	cpse r18,r19	;if(px!=TRANSLUCENT_COLOR)
    57b6:	23 13       	cpse	r18, r19
	st X,r18		;*dest=px;
    57b8:	2c 93       	st	X, r18
	adiw XL,1
    57ba:	11 96       	adiw	r26, 0x01	; 1
	add ZL,r22		;src+=step;
    57bc:	e6 0f       	add	r30, r22
	adc ZH,r23
    57be:	f7 1f       	adc	r31, r23
	dec r20
    57c0:	4a 95       	dec	r20
	brne x_loop
    57c2:	c1 f7       	brne	.-16     	; 0x57b4 <x_loop>

	add ZL,YL		;src+=srcXdiff
    57c4:	ec 0f       	add	r30, r28
	adc ZH,YH
    57c6:	fd 1f       	adc	r31, r29
	add XL,r24		;dest+=destXdiff
    57c8:	a8 0f       	add	r26, r24
	adc XH,r1
    57ca:	b1 1d       	adc	r27, r1
	dec r21
    57cc:	5a 95       	dec	r21
	brne y_loop
    57ce:	81 f7       	brne	.-32     	; 0x57b0 <y_loop>


	pop YH
    57d0:	df 91       	pop	r29
	pop YL
    57d2:	cf 91       	pop	r28
	pop r17
    57d4:	1f 91       	pop	r17
	pop r16
    57d6:	0f 91       	pop	r16
	ret
    57d8:	08 95       	ret

000057da <__vector_13>:

;***************************************************************************
; Main Video sync interrupt
;***************************************************************************
TIMER1_COMPA_vect:
	push r0
    57da:	0f 92       	push	r0
	push r1
    57dc:	1f 92       	push	r1
	push ZL;2
    57de:	ef 93       	push	r30
	push ZH;2
    57e0:	ff 93       	push	r31
	
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    57e2:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    57e4:	ef 93       	push	r30

	;Read timer offset since rollover to remove cycles 
	;and conpensate for interrupt latency.
	;This is nessesary to eliminate frame jitter.
	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    57e6:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,0x12 ;MIN_INT_LATENCY
    57ea:	e2 51       	subi	r30, 0x12	; 18

	ldi ZH,1
    57ec:	f1 e0       	ldi	r31, 0x01	; 1

000057ee <latency_loop>:
latency_loop:
	cp ZL,ZH
    57ee:	ef 17       	cp	r30, r31
	brlo .		;advance PC to next instruction	
    57f0:	00 f0       	brcs	.+0      	; 0x57f2 <latency_loop+0x4>
	inc ZH
    57f2:	f3 95       	inc	r31
	cpi ZH,10
    57f4:	fa 30       	cpi	r31, 0x0A	; 10
	brlo latency_loop
    57f6:	d8 f3       	brcs	.-10     	; 0x57ee <latency_loop>
	jmp .
    57f8:	0c 94 fe 2b 	jmp	0x57fc	; 0x57fc <latency_loop+0xe>
	
	;decrement sync pulse counter
	lds ZL,sync_pulse
    57fc:	e0 91 a1 08 	lds	r30, 0x08A1
	dec ZL
    5800:	ea 95       	dec	r30
	sts sync_pulse,ZL
    5802:	e0 93 a1 08 	sts	0x08A1, r30

	;process sync phases
	lds ZH,sync_phase
    5806:	f0 91 a0 08 	lds	r31, 0x08A0
	sbrc ZH,0
    580a:	f0 fd       	sbrc	r31, 0
	rjmp sync_hsync
    580c:	57 c0       	rjmp	.+174    	; 0x58bc <sync_hsync>
; Note: TCNT1 should be equal to 
; 0x68 on the cbi
; 0xAC on the sbi
; pulse duration: 68 clocks
;***************************************************		
	cpi ZL,SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    580e:	ec 30       	cpi	r30, 0x0C	; 12
	brlo sync_eq
    5810:	98 f0       	brcs	.+38     	; 0x5838 <sync_eq>

	;Set HDRIVE to double rate during VSYNC
	ldi ZH,hi8(HDRIVE_CL_TWICE)
    5812:	f3 e0       	ldi	r31, 0x03	; 3
	sts _SFR_MEM_ADDR(OCR1AH),ZH	
    5814:	f0 93 89 00 	sts	0x0089, r31
	ldi ZH,lo8(HDRIVE_CL_TWICE)
    5818:	fd e8       	ldi	r31, 0x8D	; 141
	sts _SFR_MEM_ADDR(OCR1AL),ZH
    581a:	f0 93 88 00 	sts	0x0088, r31

	bst ZL,0
    581e:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0x68
    5820:	28 98       	cbi	0x05, 0	; 5
	brtc sync_pre_eq_no_sound_update
    5822:	26 f4       	brtc	.+8      	; 0x582c <sync_pre_eq_no_sound_update>
	ldi ZL,1	;indicate update_sound to generate the SBI for pre-eq
    5824:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    5826:	0e 94 e5 2c 	call	0x59ca	; 0x59ca <update_sound>
	rjmp sync_end
    582a:	b7 c0       	rjmp	.+366    	; 0x599a <sync_end>

0000582c <sync_pre_eq_no_sound_update>:

sync_pre_eq_no_sound_update:
	WAIT ZL,64
    582c:	e5 e1       	ldi	r30, 0x15	; 21
    582e:	ea 95       	dec	r30
    5830:	f1 f7       	brne	.-4      	; 0x582e <sync_pre_eq_no_sound_update+0x2>
    5832:	00 00       	nop
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    5834:	28 9a       	sbi	0x05, 0	; 5
		
	rjmp sync_end
    5836:	b1 c0       	rjmp	.+354    	; 0x599a <sync_end>

00005838 <sync_eq>:
; 0x68  on the cbi
; 0x36E on the sbi
; low pulse duration: 774 clocks
;***************************************************	
sync_eq:
	cpi ZL,SYNC_POST_EQ_PULSES
    5838:	e6 30       	cpi	r30, 0x06	; 6
	brlo sync_post_eq
    583a:	38 f1       	brcs	.+78     	; 0x588a <sync_post_eq>

	rjmp .
    583c:	00 c0       	rjmp	.+0      	; 0x583e <sync_eq+0x6>
	rjmp .
    583e:	00 c0       	rjmp	.+0      	; 0x5840 <sync_eq+0x8>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    5840:	28 98       	cbi	0x05, 0	; 5

	bst ZL,0
    5842:	e0 fb       	bst	r30, 0
	ldi ZL,4
    5844:	e4 e0       	ldi	r30, 0x04	; 4
	brtc sync_eq_skip
    5846:	16 f4       	brtc	.+4      	; 0x584c <sync_eq_skip>
	
	call update_sound
    5848:	0e 94 e5 2c 	call	0x59ca	; 0x59ca <update_sound>

0000584c <sync_eq_skip>:
	;enable interupt to bring back sync 
	;level instead of wasting cycles
	;in a big wait loop

 	;clear interrupt flag
	ldi ZL,(1<<OCF1B)
    584c:	e4 e0       	ldi	r30, 0x04	; 4
	sts _SFR_MEM_ADDR(TIFR1),ZL 
    584e:	e0 93 36 00 	sts	0x0036, r30
	
	;generate interrupt on match
	;for timer1 compare unit b
	ldi ZL,(1<<OCIE1A)+(1<<OCIE1B)
    5852:	e6 e0       	ldi	r30, 0x06	; 6
	sts _SFR_MEM_ADDR(TIMSK1),ZL
    5854:	e0 93 6f 00 	sts	0x006F, r30

	rjmp sync_end
    5858:	a0 c0       	rjmp	.+320    	; 0x599a <sync_end>

0000585a <__vector_14>:
; during VSYNC EQ pulses to recover ~5000 cycles per field
; with interrupt latency conpensation
; 37 cycles
;**********************************************************	
TIMER1_COMPB_vect:
	push ZL
    585a:	ef 93       	push	r30
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    585c:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    585e:	ef 93       	push	r30

	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    5860:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,62+31 ;0x5D ;MIN_INT_LATENCY
    5864:	ed 55       	subi	r30, 0x5D	; 93

	cpi ZL,1
    5866:	e1 30       	cpi	r30, 0x01	; 1
	brlo .		;advance PC to next instruction
    5868:	00 f0       	brcs	.+0      	; 0x586a <__vector_14+0x10>

	cpi ZL,2
    586a:	e2 30       	cpi	r30, 0x02	; 2
	brlo .		;advance PC to next instruction
    586c:	00 f0       	brcs	.+0      	; 0x586e <__vector_14+0x14>

	cpi ZL,3
    586e:	e3 30       	cpi	r30, 0x03	; 3
	brlo .		;advance PC to next instruction
    5870:	00 f0       	brcs	.+0      	; 0x5872 <__vector_14+0x18>

	cpi ZL,4
    5872:	e4 30       	cpi	r30, 0x04	; 4
	brlo .		;advance PC to next instruction
    5874:	00 f0       	brcs	.+0      	; 0x5876 <__vector_14+0x1c>

	cpi ZL,5
    5876:	e5 30       	cpi	r30, 0x05	; 5
	brlo .		;advance PC to next instruction
    5878:	00 f0       	brcs	.+0      	; 0x587a <__vector_14+0x20>

 	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;68
    587a:	28 9a       	sbi	0x05, 0	; 5
	ldi ZL,(1<<OCIE1A) ; disable OCIE1B 
    587c:	e2 e0       	ldi	r30, 0x02	; 2
	sts _SFR_MEM_ADDR(TIMSK1),ZL ;stop generate interrupt on match
    587e:	e0 93 6f 00 	sts	0x006F, r30
	
	;restore flags
	pop ZL
    5882:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL	
    5884:	ef bf       	out	0x3f, r30	; 63
	pop ZL
    5886:	ef 91       	pop	r30
	reti
    5888:	18 95       	reti

0000588a <sync_post_eq>:
; 0x68 on the cbi
; 0xAC on the sbi
; pulse cycles: 68 clocks
;***************************************************	
sync_post_eq:	
	rjmp .
    588a:	00 c0       	rjmp	.+0      	; 0x588c <sync_post_eq+0x2>

	bst ZL,0
    588c:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    588e:	28 98       	cbi	0x05, 0	; 5
	brtc sync_post_eq_no_sound_update
    5890:	26 f4       	brtc	.+8      	; 0x589a <sync_post_eq_no_sound_update>
	ldi ZL,1	
    5892:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    5894:	0e 94 e5 2c 	call	0x59ca	; 0x59ca <update_sound>
	rjmp sync_pre_eq_cont
    5898:	05 c0       	rjmp	.+10     	; 0x58a4 <sync_pre_eq_cont>

0000589a <sync_post_eq_no_sound_update>:

sync_post_eq_no_sound_update:
	WAIT ZL,64
    589a:	e5 e1       	ldi	r30, 0x15	; 21
    589c:	ea 95       	dec	r30
    589e:	f1 f7       	brne	.-4      	; 0x589c <sync_post_eq_no_sound_update+0x2>
    58a0:	00 00       	nop

	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN 
    58a2:	28 9a       	sbi	0x05, 0	; 5

000058a4 <sync_pre_eq_cont>:

sync_pre_eq_cont:	
	;check if it's the last vsync pulse
	lds ZL,sync_pulse
    58a4:	e0 91 a1 08 	lds	r30, 0x08A1
	cpi ZL,0
    58a8:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2 ;skip rjmp
    58aa:	09 f0       	breq	.+2      	; 0x58ae <sync_pre_eq_cont+0xa>
	rjmp sync_end
    58ac:	76 c0       	rjmp	.+236    	; 0x599a <sync_end>
	
	;update sync flags
	ldi ZL,SYNC_HSYNC_PULSES
    58ae:	ed ef       	ldi	r30, 0xFD	; 253
	sts sync_pulse,ZL
    58b0:	e0 93 a1 08 	sts	0x08A1, r30
	ldi ZL,1
    58b4:	e1 e0       	ldi	r30, 0x01	; 1
	sts sync_phase,ZL
    58b6:	e0 93 a0 08 	sts	0x08A0, r30
	
	rjmp sync_end
    58ba:	6f c0       	rjmp	.+222    	; 0x599a <sync_end>

000058bc <sync_hsync>:
; 0xF0 on the sbi
; pulse duration: 136 clocks
;***************************************************	

	; Set HDRIVE to normal rate
	ldi ZL,hi8(HDRIVE_CL)
    58bc:	e7 e0       	ldi	r30, 0x07	; 7
	sts _SFR_MEM_ADDR(OCR1AH),ZL	
    58be:	e0 93 89 00 	sts	0x0089, r30
	ldi ZL,lo8(HDRIVE_CL)
    58c2:	eb e1       	ldi	r30, 0x1B	; 27
	sts _SFR_MEM_ADDR(OCR1AL),ZL
    58c4:	e0 93 88 00 	sts	0x0088, r30
	rjmp .
    58c8:	00 c0       	rjmp	.+0      	; 0x58ca <sync_hsync+0xe>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    58ca:	28 98       	cbi	0x05, 0	; 5
	
	ldi ZL,2	;indicate update_sound to generate the SBI for pre-eq
    58cc:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    58ce:	00 c0       	rjmp	.+0      	; 0x58d0 <sync_hsync+0x14>
	call update_sound
    58d0:	0e 94 e5 2c 	call	0x59ca	; 0x59ca <update_sound>

	;check if we have reached the first line to render
	ldi ZH,SYNC_HSYNC_PULSES
    58d4:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    58d6:	00 90 a7 08 	lds	r0, 0x08A7
	sub ZH,r0				
    58da:	f0 19       	sub	r31, r0
	lds ZL,sync_pulse
    58dc:	e0 91 a1 08 	lds	r30, 0x08A1
	cp ZL,ZH
    58e0:	ef 17       	cp	r30, r31
	brsh no_render
    58e2:	d0 f4       	brcc	.+52     	; 0x5918 <no_render>

	ldi ZH,SYNC_HSYNC_PULSES
    58e4:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    58e6:	00 90 a7 08 	lds	r0, 0x08A7
	sub ZH,r0				
    58ea:	f0 19       	sub	r31, r0
	lds r0,render_lines_count
    58ec:	00 90 a8 08 	lds	r0, 0x08A8
	sub ZH,r0			
    58f0:	f0 19       	sub	r31, r0
	cp ZL,ZH
    58f2:	ef 17       	cp	r30, r31
	brlo no_render
    58f4:	88 f0       	brcs	.+34     	; 0x5918 <no_render>

	;push r1-r29
	ldi ZL,29
    58f6:	ed e1       	ldi	r30, 0x1D	; 29
	clr ZH
    58f8:	ff 27       	eor	r31, r31

000058fa <push_loop>:
push_loop:
	ld r0,Z	;load value from register file
    58fa:	00 80       	ld	r0, Z
	push r0
    58fc:	0f 92       	push	r0
	dec ZL
    58fe:	ea 95       	dec	r30
	brne push_loop	
    5900:	e1 f7       	brne	.-8      	; 0x58fa <push_loop>

	;timing compensation
	;to insure we always call the video mode 
	;routine at the same cycle	
	WAIT r16,230-(AUDIO_OUT_HSYNC_CYCLES)
    5902:	06 e0       	ldi	r16, 0x06	; 6
    5904:	0a 95       	dec	r16
    5906:	f1 f7       	brne	.-4      	; 0x5904 <push_loop+0xa>

	call VMODE_FUNC		;TCNT1=0x234
    5908:	0e 94 ab 28 	call	0x5156	; 0x5156 <sub_video_mode3>

	;pop r1-r29
	ldi ZL,1
    590c:	e1 e0       	ldi	r30, 0x01	; 1
	clr ZH
    590e:	ff 27       	eor	r31, r31

00005910 <pop_loop>:
pop_loop:
	pop r0
    5910:	0f 90       	pop	r0
	st Z+,r0 ;store value to register file
    5912:	01 92       	st	Z+, r0
	cpi ZL,30
    5914:	ee 31       	cpi	r30, 0x1E	; 30
	brlo pop_loop	
    5916:	e0 f3       	brcs	.-8      	; 0x5910 <pop_loop>

00005918 <no_render>:

no_render:

	;check if it's the last hsync pulse and we are 
	;ready for VSYNC
	lds ZL,sync_pulse
    5918:	e0 91 a1 08 	lds	r30, 0x08A1
	cpi ZL,0
    591c:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2
    591e:	09 f0       	breq	.+2      	; 0x5922 <no_render+0xa>
	rjmp sync_end
    5920:	3c c0       	rjmp	.+120    	; 0x599a <sync_end>
;***************************************************
; Process VSYNC stuff
;***************************************************
	
	;push C-call registers
	push r18
    5922:	2f 93       	push	r18
	push r19
    5924:	3f 93       	push	r19
	push r20
    5926:	4f 93       	push	r20
	push r21
    5928:	5f 93       	push	r21
	push r22
    592a:	6f 93       	push	r22
	push r23
    592c:	7f 93       	push	r23
	push r24
    592e:	8f 93       	push	r24
	push r25
    5930:	9f 93       	push	r25
	push r26
    5932:	af 93       	push	r26
	push r27
    5934:	bf 93       	push	r27

	sei ;must enable ints for re-entrant sync pulses
    5936:	78 94       	sei
	clr r1
    5938:	11 24       	eor	r1, r1

	;set vsync flags
	clr ZL
    593a:	ee 27       	eor	r30, r30
	sts sync_phase,ZL
    593c:	e0 93 a0 08 	sts	0x08A0, r30
	ldi ZL,SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    5940:	e2 e1       	ldi	r30, 0x12	; 18
	sts sync_pulse,ZL
    5942:	e0 93 a1 08 	sts	0x08A1, r30



	;increment the vsync counter
	lds r24,vsync_counter
    5946:	80 91 b1 08 	lds	r24, 0x08B1
	lds r25,vsync_counter+1
    594a:	90 91 b2 08 	lds	r25, 0x08B2
	adiw r24,1
    594e:	01 96       	adiw	r24, 0x01	; 1
	sts vsync_counter,r24
    5950:	80 93 b1 08 	sts	0x08B1, r24
	sts vsync_counter+1,r25
    5954:	90 93 b2 08 	sts	0x08B2, r25


	;process user pre callback
	lds ZL,pre_vsync_user_callback+0
    5958:	e0 91 a3 08 	lds	r30, 0x08A3
	lds ZH,pre_vsync_user_callback+1
    595c:	f0 91 a4 08 	lds	r31, 0x08A4
	cp  ZL,r1
    5960:	e1 15       	cp	r30, r1
	cpc ZH,r1
    5962:	f1 05       	cpc	r31, r1
	breq .+2 
    5964:	09 f0       	breq	.+2      	; 0x5968 <no_render+0x50>
	icall
    5966:	09 95       	icall

	;refresh buttons states
	#if CONTROLLERS_VSYNC_READ == 1
		call ReadControllers
    5968:	0e 94 73 2e 	call	0x5ce6	; 0x5ce6 <ReadControllers>
	#endif 
	
	;invoke stuff the video mode may have to do
	call VideoModeVsync	
    596c:	0e 94 fe 3b 	call	0x77fc	; 0x77fc <VideoModeVsync>

	;process music (music, envelopes, etc)
	call process_music
    5970:	0e 94 df 2c 	call	0x59be	; 0x59be <process_music>
	clr r1
    5974:	11 24       	eor	r1, r1

	;process user post callback
	lds ZL,post_vsync_user_callback+0
    5976:	e0 91 a5 08 	lds	r30, 0x08A5
	lds ZH,post_vsync_user_callback+1
    597a:	f0 91 a6 08 	lds	r31, 0x08A6
	cp  ZL,r1
    597e:	e1 15       	cp	r30, r1
	cpc ZH,r1
    5980:	f1 05       	cpc	r31, r1
	breq .+2 
    5982:	09 f0       	breq	.+2      	; 0x5986 <no_render+0x6e>
	icall
    5984:	09 95       	icall
	#if SNES_MOUSE == 1
		call ReadMouseExtendedData
		call ProcessMouseMovement
	#endif

	pop r27
    5986:	bf 91       	pop	r27
	pop r26
    5988:	af 91       	pop	r26
	pop r25
    598a:	9f 91       	pop	r25
	pop r24
    598c:	8f 91       	pop	r24
	pop r23
    598e:	7f 91       	pop	r23
	pop r22
    5990:	6f 91       	pop	r22
	pop r21
    5992:	5f 91       	pop	r21
	pop r20
    5994:	4f 91       	pop	r20
	pop r19
    5996:	3f 91       	pop	r19
	pop r18
    5998:	2f 91       	pop	r18

0000599a <sync_end>:
	
sync_end:	
	;restore flags
	pop ZL
    599a:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL
    599c:	ef bf       	out	0x3f, r30	; 63
	
	pop ZH
    599e:	ff 91       	pop	r31
	pop ZL
    59a0:	ef 91       	pop	r30
	pop r1
    59a2:	1f 90       	pop	r1
	pop r0
    59a4:	0f 90       	pop	r0
	reti
    59a6:	18 95       	reti

000059a8 <hsync_pulse>:
; 0xf0 on the sbi 
;	
; Destroys: ZL (r30)
;*************************************************
hsync_pulse:
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    59a8:	28 98       	cbi	0x05, 0	; 5
	ldi ZL,2
    59aa:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    59ac:	00 c0       	rjmp	.+0      	; 0x59ae <hsync_pulse+0x6>
	call update_sound
    59ae:	0e 94 e5 2c 	call	0x59ca	; 0x59ca <update_sound>

	lds ZL,sync_pulse
    59b2:	e0 91 a1 08 	lds	r30, 0x08A1
	dec ZL
    59b6:	ea 95       	dec	r30
	sts sync_pulse,ZL
    59b8:	e0 93 a1 08 	sts	0x08A1, r30

	ret
    59bc:	08 95       	ret

000059be <process_music>:
; NOTE: registers r18-r27 are already saved by the caller
;***********************
process_music:
	
#if ENABLE_MIXER==1
	lds ZL,sound_enabled
    59be:	e0 91 b7 08 	lds	r30, 0x08B7
	sbrc ZL,0
    59c2:	e0 fd       	sbrc	r30, 0
 	call ProcessMusic
    59c4:	0e 94 c6 30 	call	0x618c	; 0x618c <ProcessMusic>
#endif

	ret
    59c8:	08 95       	ret

000059ca <update_sound>:

; Destroys: Z,r0,r1
; cycles: 212+
;****************************
update_sound:
	push r16
    59ca:	0f 93       	push	r16
	push r17
    59cc:	1f 93       	push	r17
	push r18
    59ce:	2f 93       	push	r18
	push r28
    59d0:	cf 93       	push	r28
	push r29
    59d2:	df 93       	push	r29

	mov r18,ZL
    59d4:	2e 2f       	mov	r18, r30

	;channel 1 
	lds r16,tr1_step_lo
    59d6:	00 91 b9 08 	lds	r16, 0x08B9
	lds r17,tr1_pos_frac
    59da:	10 91 bb 08 	lds	r17, 0x08BB
	add	r17,r16	;add step to fractional part of sample pos
    59de:	10 0f       	add	r17, r16
	lds r16,tr1_step_hi	
    59e0:	00 91 ba 08 	lds	r16, 0x08BA
	lds ZL,tr1_pos_lo
    59e4:	e0 91 bc 08 	lds	r30, 0x08BC
	lds ZH,tr1_pos_hi 
    59e8:	f0 91 bd 08 	lds	r31, 0x08BD
	adc ZL,r16	;add step to low byte of sample pos
    59ec:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    59ee:	04 91       	lpm	r16, Z
	sts tr1_pos_lo,ZL
    59f0:	e0 93 bc 08 	sts	0x08BC, r30
	sts tr1_pos_frac,r17
    59f4:	10 93 bb 08 	sts	0x08BB, r17
	lds r17,tr1_vol
    59f8:	10 91 b8 08 	lds	r17, 0x08B8
	mulsu r16,r17;(sample*mixing vol)
    59fc:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend	
    59fe:	00 08       	sbc	r0, r0
	mov r28,r1	;set (sample*vol>>8) to mix buffer lsb
    5a00:	c1 2d       	mov	r28, r1
	mov r29,r0	;set mix buffer msb	
    5a02:	d0 2d       	mov	r29, r0
	nop
    5a04:	00 00       	nop

;38
	
	;channel 2
	lds r16,tr2_step_lo
    5a06:	00 91 bf 08 	lds	r16, 0x08BF
	lds r17,tr2_pos_frac
    5a0a:	10 91 c1 08 	lds	r17, 0x08C1
	add	r17,r16	;add step to fractional part of sample pos
    5a0e:	10 0f       	add	r17, r16
	lds r16,tr2_step_hi	
    5a10:	00 91 c0 08 	lds	r16, 0x08C0
	lds ZL,tr2_pos_lo
    5a14:	e0 91 c2 08 	lds	r30, 0x08C2
	lds ZH,tr2_pos_hi 
    5a18:	f0 91 c3 08 	lds	r31, 0x08C3
	adc ZL,r16	;add step to low byte of sample pos
    5a1c:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    5a1e:	04 91       	lpm	r16, Z
	sts tr2_pos_lo,ZL
    5a20:	e0 93 c2 08 	sts	0x08C2, r30
	sts tr2_pos_frac,r17
    5a24:	10 93 c1 08 	sts	0x08C1, r17
	lds r17,tr2_vol
    5a28:	10 91 be 08 	lds	r17, 0x08BE

	;*** Video sync update ***
	sbrc r18,0								;pre-eq/post-eq sync
    5a2c:	20 fd       	sbrc	r18, 0
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    5a2e:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,0								
    5a30:	20 ff       	sbrs	r18, 0
	rjmp .
    5a32:	00 c0       	rjmp	.+0      	; 0x5a34 <update_sound+0x6a>
	;*************************

	mulsu r16,r17;(sample*mixing vol)
    5a34:	01 03       	mulsu	r16, r17
	clr r0
    5a36:	00 24       	eor	r0, r0
	sbc r0,r0	;sign extend
    5a38:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    5a3a:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb		
    5a3c:	d0 1d       	adc	r29, r0
;70
	
	;channel 3
	lds r16,tr3_step_lo
    5a3e:	00 91 c5 08 	lds	r16, 0x08C5
	lds r17,tr3_pos_frac
    5a42:	10 91 c7 08 	lds	r17, 0x08C7
	add	r17,r16				;add step to fractional part of sample pos
    5a46:	10 0f       	add	r17, r16
	lds r16,tr3_step_hi	
    5a48:	00 91 c6 08 	lds	r16, 0x08C6
	lds ZL,tr3_pos_lo
    5a4c:	e0 91 c8 08 	lds	r30, 0x08C8
	lds ZH,tr3_pos_hi 
    5a50:	f0 91 c9 08 	lds	r31, 0x08C9
	adc ZL,r16				;add step to low byte of sample pos
    5a54:	e0 1f       	adc	r30, r16
	lpm	r16,Z				;load sample
    5a56:	04 91       	lpm	r16, Z
	sts tr3_pos_lo,ZL
    5a58:	e0 93 c8 08 	sts	0x08C8, r30
	sts tr3_pos_frac,r17
    5a5c:	10 93 c7 08 	sts	0x08C7, r17
	lds r17,tr3_vol
    5a60:	10 91 c4 08 	lds	r17, 0x08C4
	mulsu r16,r17			;(sample*mixing vol)
    5a64:	01 03       	mulsu	r16, r17
	sbc r0,r0				;sign extend
    5a66:	00 08       	sbc	r0, r0
	add r28,r1				;add (sample*vol>>8) to mix buffer lsb
    5a68:	c1 0d       	add	r28, r1
	adc r29,r0				;ajust mix buffer msb
    5a6a:	d0 1d       	adc	r29, r0
;97	

	;channel 4 - 7/15 bit LFSR 
	lds r16,tr4_barrel_lo
    5a6c:	00 91 cc 08 	lds	r16, 0x08CC
	lds r17,tr4_barrel_hi
    5a70:	10 91 cd 08 	lds	r17, 0x08CD
	lds ZL,tr4_divider
    5a74:	e0 91 ce 08 	lds	r30, 0x08CE
	dec ZL	
    5a78:	ea 95       	dec	r30
	brpl ch4_no_shift	
    5a7a:	92 f4       	brpl	.+36     	; 0x5aa0 <ch4_no_shift>

	lds ZH,tr4_params
    5a7c:	f0 91 cb 08 	lds	r31, 0x08CB
	mov ZL,ZH
    5a80:	ef 2f       	mov	r30, r31
	lsr ZL 			;keep bits7:1
    5a82:	e6 95       	lsr	r30

	mov r0,r16  ;copy barrel shifter
    5a84:	00 2e       	mov	r0, r16
	lsr r0
    5a86:	06 94       	lsr	r0
	eor r0,r16  ;xor bit0 and bit1
    5a88:	00 26       	eor	r0, r16
	bst r0,0
    5a8a:	00 fa       	bst	r0, 0
	lsr r17
    5a8c:	16 95       	lsr	r17
	ror r16
    5a8e:	07 95       	ror	r16
	bld r17,6	;15 bits mode
    5a90:	16 f9       	bld	r17, 6
	sbrs ZH,0
    5a92:	f0 ff       	sbrs	r31, 0
	bld r16,6	;7 bits mode
    5a94:	06 f9       	bld	r16, 6

	sts tr4_barrel_lo,r16
    5a96:	00 93 cc 08 	sts	0x08CC, r16
	sts tr4_barrel_hi,r17
    5a9a:	10 93 cd 08 	sts	0x08CD, r17

	rjmp ch4_end
    5a9e:	03 c0       	rjmp	.+6      	; 0x5aa6 <ch4_end>

00005aa0 <ch4_no_shift>:
ch4_no_shift:
	;wait loop 21 cycles
	ldi r17,6
    5aa0:	16 e0       	ldi	r17, 0x06	; 6
	dec r17
    5aa2:	1a 95       	dec	r17
	brne .-4
    5aa4:	f1 f7       	brne	.-4      	; 0x5aa2 <ch4_no_shift+0x2>

00005aa6 <ch4_end>:
	;rjmp .
ch4_end:

	sts tr4_divider,ZL
    5aa6:	e0 93 ce 08 	sts	0x08CE, r30
	ldi r17,0x80 ;-128
    5aaa:	10 e8       	ldi	r17, 0x80	; 128
	
	;*** Video sync update ***
	sbrc r18,1								;hsync
    5aac:	21 fd       	sbrc	r18, 1
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xF0
    5aae:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,1								
    5ab0:	21 ff       	sbrs	r18, 1
	rjmp .
    5ab2:	00 c0       	rjmp	.+0      	; 0x5ab4 <ch4_end+0xe>
	;*************************
	
	sbrc r16,0
    5ab4:	00 fd       	sbrc	r16, 0
	ldi r17,0x7f ;+127
    5ab6:	1f e7       	ldi	r17, 0x7F	; 127
	
	lds r16,tr4_vol
    5ab8:	00 91 ca 08 	lds	r16, 0x08CA

	mulsu r17,r16;(sample*mixing vol)
    5abc:	10 03       	mulsu	r17, r16
	sbc r0,r0	;sign extend
    5abe:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    5ac0:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb
    5ac2:	d0 1d       	adc	r29, r0
;142
#if SOUND_CHANNEL_5_ENABLE==1
	;channel 5 PCM -- 45 cycles

	;add fractional part
	lds r16,tr5_pos_frac
    5ac4:	00 91 d3 08 	lds	r16, 0x08D3
	lds r17,tr5_step_lo 
    5ac8:	10 91 d1 08 	lds	r17, 0x08D1
	add r16,r17
    5acc:	01 0f       	add	r16, r17
	sts tr5_pos_frac,r16
    5ace:	00 93 d3 08 	sts	0x08D3, r16

	;add lo
	lds ZL,tr5_pos_lo
    5ad2:	e0 91 d4 08 	lds	r30, 0x08D4
	lds r17,tr5_step_hi 
    5ad6:	10 91 d2 08 	lds	r17, 0x08D2
	adc ZL,r17
    5ada:	e1 1f       	adc	r30, r17

	;add hi
	lds ZH,tr5_pos_hi
    5adc:	f0 91 d5 08 	lds	r31, 0x08D5
	ldi r16,0
    5ae0:	00 e0       	ldi	r16, 0x00	; 0
	adc ZH,r16
    5ae2:	f0 1f       	adc	r31, r16

	movw r16,ZL
    5ae4:	8f 01       	movw	r16, r30
	lds r0,tr5_loop_len_lo
    5ae6:	00 90 d6 08 	lds	r0, 0x08D6
	lds r1,tr5_loop_len_hi	
    5aea:	10 90 d7 08 	lds	r1, 0x08D7
	sub r16,r0
    5aee:	00 19       	sub	r16, r0
	sbc r17,r1
    5af0:	11 09       	sbc	r17, r1
	lds r0,tr5_loop_end_lo
    5af2:	00 90 d8 08 	lds	r0, 0x08D8
	lds r1,tr5_loop_end_hi
    5af6:	10 90 d9 08 	lds	r1, 0x08D9

	cp ZL,r0
    5afa:	e0 15       	cp	r30, r0
	cpc ZH,r1
    5afc:	f1 05       	cpc	r31, r1
	brlo .+2
    5afe:	08 f0       	brcs	.+2      	; 0x5b02 <ch4_end+0x5c>
	movw ZL,r16
    5b00:	f8 01       	movw	r30, r16

	sts tr5_pos_lo,ZL
    5b02:	e0 93 d4 08 	sts	0x08D4, r30
	sts tr5_pos_hi,ZH
    5b06:	f0 93 d5 08 	sts	0x08D5, r31

	lpm	r16,Z	;load sample
    5b0a:	04 91       	lpm	r16, Z
	lds r17,tr5_vol
    5b0c:	10 91 d0 08 	lds	r17, 0x08D0

	mulsu r16,r17;(sample*mixing vol)
    5b10:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend
    5b12:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    5b14:	c1 0d       	add	r28, r1
	adc r29,r0	;adjust mix buffer msb	
    5b16:	d0 1d       	adc	r29, r0
#endif
	
	;final processing

	;clip
	clr r0
    5b18:	00 24       	eor	r0, r0
	cpi r28,128	;> 127?
    5b1a:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0	
    5b1c:	d0 05       	cpc	r29, r0
	brlt .+2
    5b1e:	0c f0       	brlt	.+2      	; 0x5b22 <ch4_end+0x7c>
	ldi r28,127
    5b20:	cf e7       	ldi	r28, 0x7F	; 127
	
	dec r0
    5b22:	0a 94       	dec	r0
	cpi r28,-128; <-128?
    5b24:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0xff
    5b26:	d0 05       	cpc	r29, r0
	brge .+2
    5b28:	0c f4       	brge	.+2      	; 0x5b2c <ch4_end+0x86>
	ldi r28,-128
    5b2a:	c0 e8       	ldi	r28, 0x80	; 128

	subi r28,128	;convert to unsigned		
    5b2c:	c0 58       	subi	r28, 0x80	; 128
	sts _SFR_MEM_ADDR(OCR2A),r28 ;output sound byte
    5b2e:	c0 93 b3 00 	sts	0x00B3, r28

00005b32 <update_sound_end>:
#endif


update_sound_end:

	pop r29
    5b32:	df 91       	pop	r29
	pop r28
    5b34:	cf 91       	pop	r28
	pop r18
    5b36:	2f 91       	pop	r18
	pop r17
    5b38:	1f 91       	pop	r17
	pop r16
    5b3a:	0f 91       	pop	r16
	
	ret
    5b3c:	08 95       	ret

00005b3e <SetSpritesTileTable>:
; C-callable
; r25:r24=pointer to sprites pixel data.
;*****************************
.section .text.SetSpritesTileTable
SetSpritesTileTable:
	sts sprites_tile_banks,r24
    5b3e:	80 93 8e 08 	sts	0x088E, r24
	sts sprites_tile_banks+1,r25
    5b42:	90 93 8f 08 	sts	0x088F, r25
	ret
    5b46:	08 95       	ret

00005b48 <ClearVram>:
; C-callable
;************************************
.section .text.ClearVram
ClearVram:
	//init vram		
	ldi r30,lo8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    5b48:	e0 e0       	ldi	r30, 0x00	; 0
	ldi r31,hi8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    5b4a:	f4 e0       	ldi	r31, 0x04	; 4

	ldi XL,lo8(vram)
    5b4c:	a0 e2       	ldi	r26, 0x20	; 32
	ldi XH,hi8(vram)
    5b4e:	ba e0       	ldi	r27, 0x0A	; 10

	ldi r22,RAM_TILES_COUNT
    5b50:	6c e1       	ldi	r22, 0x1C	; 28

00005b52 <fill_vram_loop>:

fill_vram_loop:
	st X+,r22
    5b52:	6d 93       	st	X+, r22
	sbiw r30,1
    5b54:	31 97       	sbiw	r30, 0x01	; 1
	brne fill_vram_loop
    5b56:	e9 f7       	brne	.-6      	; 0x5b52 <fill_vram_loop>

	clr r1
    5b58:	11 24       	eor	r1, r1

	ret
    5b5a:	08 95       	ret

00005b5c <SetFont>:
; r22=Y pos (8 bit)
; r20=Font tile No (8 bit)
;************************************
.section .text.SetFont
SetFont:
	lds r21,font_tile_index
    5b5c:	50 91 98 08 	lds	r21, 0x0898
	add r20,21
    5b60:	45 0f       	add	r20, r21
	rjmp SetTile	
    5b62:	00 c0       	rjmp	.+0      	; 0x5b64 <SetTile>

00005b64 <SetTile>:
.section .text.SetTile
SetTile:
#if SCROLLING == 1
	;index formula is vram[((y>>3)*256)+8x+(y&7)]
	
	andi r24,0x1f
    5b64:	8f 71       	andi	r24, 0x1F	; 31
	mov r23,r22
    5b66:	76 2f       	mov	r23, r22
	lsr r22
    5b68:	66 95       	lsr	r22
	lsr r22
    5b6a:	66 95       	lsr	r22
	lsr r22			;y>>3
    5b6c:	66 95       	lsr	r22
	ldi r18,8		
    5b6e:	28 e0       	ldi	r18, 0x08	; 8
	mul r24,r18		;x*8
    5b70:	82 9f       	mul	r24, r18
	movw XL,r0
    5b72:	d0 01       	movw	r26, r0
	subi XL,lo8(-(vram))
    5b74:	a0 5e       	subi	r26, 0xE0	; 224
	sbci XH,hi8(-(vram))
    5b76:	b5 4f       	sbci	r27, 0xF5	; 245
	add XH,r22		;vram+((y>>3)*256)
    5b78:	b6 0f       	add	r27, r22
	andi r23,7		;y&7	
    5b7a:	77 70       	andi	r23, 0x07	; 7
	add XL,r23
    5b7c:	a7 0f       	add	r26, r23
						
	subi r20,~(RAM_TILES_COUNT-1)	
    5b7e:	44 5e       	subi	r20, 0xE4	; 228
	st X,r20
    5b80:	4c 93       	st	X, r20

	clr r1
    5b82:	11 24       	eor	r1, r1

	ret
    5b84:	08 95       	ret

00005b86 <SetFontTilesIndex>:
; C-callable
; r24=First font tile index in tile table (8 bit)
;************************************
.section .text.SetFontTilesIndex
	SetFontTilesIndex:
	sts font_tile_index,r24
    5b86:	80 93 98 08 	sts	0x0898, r24
	ret
    5b8a:	08 95       	ret

00005b8c <SetTileTable>:
; C-callable
; r25:r24=pointer to tiles data
;************************************
.section .text.SetTileTable
SetTileTable:
	sts tile_table_lo,r24
    5b8c:	80 93 96 08 	sts	0x0896, r24
	sts tile_table_hi,r25	
    5b90:	90 93 97 08 	sts	0x0897, r25
	ret
    5b94:	08 95       	ret

00005b96 <GetVsyncFlag>:
;
; C-callable
;************************************
.section .text.GetVsyncFlag
GetVsyncFlag:
	lds r24,sync_flags
    5b96:	80 91 a2 08 	lds	r24, 0x08A2
	andi r24,SYNC_FLAG_VSYNC
    5b9a:	81 70       	andi	r24, 0x01	; 1
	ret
    5b9c:	08 95       	ret

00005b9e <ClearVsyncFlag>:
; 
; C-callable
;*****************************
.section .text.ClearVsyncFlag
ClearVsyncFlag:
	lds r18,sync_flags
    5b9e:	20 91 a2 08 	lds	r18, 0x08A2
	andi r18,~SYNC_FLAG_VSYNC
    5ba2:	2e 7f       	andi	r18, 0xFE	; 254
	sts sync_flags,r18
    5ba4:	20 93 a2 08 	sts	0x08A2, r18
	ret
    5ba8:	08 95       	ret

00005baa <WriteEeprom>:
;****************************

.section .text.WriteEeprom
WriteEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    5baa:	f9 99       	sbic	0x1f, 1	; 31
   rjmp WriteEeprom
    5bac:	fe cf       	rjmp	.-4      	; 0x5baa <WriteEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    5bae:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    5bb0:	81 bd       	out	0x21, r24	; 33
   ; Write data (r22) to Data Register
   out _SFR_IO_ADDR(EEDR),r22
    5bb2:	60 bd       	out	0x20, r22	; 32
   cli
    5bb4:	f8 94       	cli
   ; Write logical one to EEMPE
   sbi _SFR_IO_ADDR(EECR),EEMPE
    5bb6:	fa 9a       	sbi	0x1f, 2	; 31
   ; Start eeprom write by setting EEPE
   sbi _SFR_IO_ADDR(EECR),EEPE
    5bb8:	f9 9a       	sbi	0x1f, 1	; 31
   sei
    5bba:	78 94       	sei
   ret
    5bbc:	08 95       	ret

00005bbe <ReadEeprom>:
; r24 - value read
;****************************
.section .text.ReadEeprom
ReadEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    5bbe:	f9 99       	sbic	0x1f, 1	; 31
   rjmp ReadEeprom
    5bc0:	fe cf       	rjmp	.-4      	; 0x5bbe <ReadEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    5bc2:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    5bc4:	81 bd       	out	0x21, r24	; 33
   ; Start eeprom read by writing EERE
   cli
    5bc6:	f8 94       	cli
   sbi _SFR_IO_ADDR(EECR),EERE
    5bc8:	f8 9a       	sbi	0x1f, 0	; 31
   ; Read data from Data Register
   in r24,_SFR_IO_ADDR(EEDR)
    5bca:	80 b5       	in	r24, 0x20	; 32
   sei
    5bcc:	78 94       	sei
   ret
    5bce:	08 95       	ret

00005bd0 <wdt_randomize>:
	.global wdt_randomize
	.section .text.wdt_randomize
	wdt_randomize:

		;set timer 1 full speed count to 0xffff
		ldi r24,0
    5bd0:	80 e0       	ldi	r24, 0x00	; 0
		sts sync_pulse,r24
    5bd2:	80 93 a1 08 	sts	0x08A1, r24


		sts _SFR_MEM_ADDR(TIMSK1),r24
    5bd6:	80 93 6f 00 	sts	0x006F, r24
		sts _SFR_MEM_ADDR(OCR1AL),r24
    5bda:	80 93 88 00 	sts	0x0088, r24
		sts _SFR_MEM_ADDR(OCR1AH),r24
    5bde:	80 93 89 00 	sts	0x0089, r24
		sts _SFR_MEM_ADDR(OCR1BL),r24
    5be2:	80 93 8a 00 	sts	0x008A, r24
		sts _SFR_MEM_ADDR(OCR1BH),r24
    5be6:	80 93 8b 00 	sts	0x008B, r24
		sts _SFR_MEM_ADDR(TCNT1H),r24
    5bea:	80 93 85 00 	sts	0x0085, r24
		sts _SFR_MEM_ADDR(TCNT1L),r24
    5bee:	80 93 84 00 	sts	0x0084, r24
		
		sts _SFR_MEM_ADDR(TCCR1A),r24	
    5bf2:	80 93 80 00 	sts	0x0080, r24
		ldi 24,(1<<CS10)
    5bf6:	81 e0       	ldi	r24, 0x01	; 1
		sts _SFR_MEM_ADDR(TCCR1B),r24
    5bf8:	80 93 81 00 	sts	0x0081, r24

		cli
    5bfc:	f8 94       	cli

		;enable watchdog at fastest speed and generate interrupts
		ldi r24,0
    5bfe:	80 e0       	ldi	r24, 0x00	; 0
		sts _SFR_MEM_ADDR(MCUSR),r24	
    5c00:	80 93 54 00 	sts	0x0054, r24
		ldi r25,(1<<WDIE)+(1<<WDE)+(0<<WDP3)+(0<<WDP2)+(0<<WDP1)+(0<<WDP0)
    5c04:	98 e4       	ldi	r25, 0x48	; 72
		lds r24,_SFR_MEM_ADDR(WDTCSR)
    5c06:	80 91 60 00 	lds	r24, 0x0060
		ori r24,(1<<WDCE)+(1<<WDE)
    5c0a:	88 61       	ori	r24, 0x18	; 24
		sts _SFR_MEM_ADDR(WDTCSR),r24
    5c0c:	80 93 60 00 	sts	0x0060, r24
		sts _SFR_MEM_ADDR(WDTCSR),r25
    5c10:	90 93 60 00 	sts	0x0060, r25
	
		sei
    5c14:	78 94       	sei

00005c16 <wait>:

		;generate 8 random cycles
	wait:
		lds r24,sync_pulse ;using the yet unalocated "sync_pulse" as a temp variable
    5c16:	80 91 a1 08 	lds	r24, 0x08A1
		cpi r24,8
    5c1a:	88 30       	cpi	r24, 0x08	; 8
		brlo wait
    5c1c:	e0 f3       	brcs	.-8      	; 0x5c16 <wait>

		ret
    5c1e:	08 95       	ret

00005c20 <__vector_8>:
	;*************************************
	; Watchdog timer interrupt
	;*************************************
	WDT_vect:
		;save flags & status register
		push r16
    5c20:	0f 93       	push	r16
		push r17
    5c22:	1f 93       	push	r17

		in r16,_SFR_IO_ADDR(SREG)
    5c24:	0f b7       	in	r16, 0x3f	; 63
		push r16
    5c26:	0f 93       	push	r16

		lds r16,sync_pulse
    5c28:	00 91 a1 08 	lds	r16, 0x08A1
		inc r16
    5c2c:	03 95       	inc	r16
		sts sync_pulse,r16
    5c2e:	00 93 a1 08 	sts	0x08A1, r16

		;XOR succesive timer1 LSB into a int
		sbrc r16,0
    5c32:	00 fd       	sbrc	r16, 0
		rjmp 1f
    5c34:	08 c0       	rjmp	.+16     	; 0x5c46 <__vector_8+0x26>
		lds r17,random_value
    5c36:	10 91 b3 08 	lds	r17, 0x08B3
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    5c3a:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    5c3e:	10 27       	eor	r17, r16
		sts random_value,r17
    5c40:	10 93 b3 08 	sts	0x08B3, r17
		rjmp 2f
    5c44:	07 c0       	rjmp	.+14     	; 0x5c54 <__vector_8+0x34>
	1:
		lds r17,random_value+1
    5c46:	10 91 b4 08 	lds	r17, 0x08B4
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    5c4a:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    5c4e:	10 27       	eor	r17, r16
		sts random_value+1,r17
    5c50:	10 93 b4 08 	sts	0x08B4, r17
	2:

		ldi r16,(1<<WDIE)+(1<<WDE)
    5c54:	08 e4       	ldi	r16, 0x48	; 72
		sts _SFR_MEM_ADDR(WDTCSR),r16
    5c56:	00 93 60 00 	sts	0x0060, r16

		;restore flags
		pop r16
    5c5a:	0f 91       	pop	r16
		out _SFR_IO_ADDR(SREG),r16
    5c5c:	0f bf       	out	0x3f, r16	; 63
	
		pop r17
    5c5e:	1f 91       	pop	r17
		pop r16
    5c60:	0f 91       	pop	r16
		reti
    5c62:	18 95       	reti

00005c64 <SoftReset>:

/**
 * Performs a software reset
 */
void SoftReset(void){        
	wdt_enable(WDTO_15MS);  
    5c64:	98 e0       	ldi	r25, 0x08	; 8
    5c66:	88 e1       	ldi	r24, 0x18	; 24
    5c68:	0f b6       	in	r0, 0x3f	; 63
    5c6a:	f8 94       	cli
    5c6c:	a8 95       	wdr
    5c6e:	80 93 60 00 	sts	0x0060, r24
    5c72:	0f be       	out	0x3f, r0	; 63
    5c74:	90 93 60 00 	sts	0x0060, r25
	while(1);
    5c78:	ff cf       	rjmp	.-2      	; 0x5c78 <SoftReset+0x14>

00005c7a <ReadButtons>:
void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
	unsigned char i;

	//latch controllers
	JOYPAD_OUT_PORT|=_BV(JOYPAD_LATCH_PIN);
    5c7a:	12 9a       	sbi	0x02, 2	; 2
		}else{
			Wait200ns();
			Wait200ns();
		}	
	#else
		Wait200ns();
    5c7c:	c8 95       	lpm
    5c7e:	c8 95       	lpm
		Wait200ns();
    5c80:	c8 95       	lpm
    5c82:	c8 95       	lpm
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));
    5c84:	12 98       	cbi	0x02, 2	; 2
    5c86:	40 e1       	ldi	r20, 0x10	; 16
	DisplayLogo();
	
}

void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
    5c88:	80 e0       	ldi	r24, 0x00	; 0
    5c8a:	90 e0       	ldi	r25, 0x00	; 0
    5c8c:	20 e0       	ldi	r18, 0x00	; 0
    5c8e:	30 e0       	ldi	r19, 0x00	; 0


	//read button states
	for(i=0;i<16;i++){

		p1ButtonsLo>>=1;
    5c90:	36 95       	lsr	r19
    5c92:	27 95       	ror	r18
		p2ButtonsLo>>=1;
    5c94:	96 95       	lsr	r25
    5c96:	87 95       	ror	r24
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    5c98:	c8 95       	lpm
    5c9a:	c8 95       	lpm
			Wait200ns();
    5c9c:	c8 95       	lpm
    5c9e:	c8 95       	lpm
		#endif
			
		//pulse clock pin		
		JOYPAD_OUT_PORT&=~(_BV(JOYPAD_CLOCK_PIN));
    5ca0:	13 98       	cbi	0x02, 3	; 2
		
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) p1ButtonsLo|=(1<<15);
    5ca2:	00 9b       	sbis	0x00, 0	; 0
    5ca4:	30 68       	ori	r19, 0x80	; 128
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) p2ButtonsLo|=(1<<15);
    5ca6:	01 9b       	sbis	0x00, 1	; 0
    5ca8:	90 68       	ori	r25, 0x80	; 128
		
		JOYPAD_OUT_PORT|=_BV(JOYPAD_CLOCK_PIN);
    5caa:	13 9a       	sbi	0x02, 3	; 2
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    5cac:	c8 95       	lpm
    5cae:	c8 95       	lpm
			Wait200ns();
    5cb0:	c8 95       	lpm
    5cb2:	c8 95       	lpm
    5cb4:	41 50       	subi	r20, 0x01	; 1
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));


	//read button states
	for(i=0;i<16;i++){
    5cb6:	61 f7       	brne	.-40     	; 0x5c90 <ReadButtons+0x16>
		#endif

	}

	#if JOYSTICK==TYPE_SNES
		joypad1_status_lo=p1ButtonsLo;
    5cb8:	30 93 aa 08 	sts	0x08AA, r19
    5cbc:	20 93 a9 08 	sts	0x08A9, r18
		joypad2_status_lo=p2ButtonsLo;
    5cc0:	90 93 ae 08 	sts	0x08AE, r25
    5cc4:	80 93 ad 08 	sts	0x08AD, r24
	#else
		joypad1_status_lo=p1ButtonsLo&0xff;
		joypad2_status_lo=p2ButtonsLo&0xff;	
	#endif

	if(joypad1_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B) || joypad2_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B)){
    5cc8:	80 91 a9 08 	lds	r24, 0x08A9
    5ccc:	90 91 aa 08 	lds	r25, 0x08AA
    5cd0:	0f 97       	sbiw	r24, 0x0f	; 15
    5cd2:	31 f0       	breq	.+12     	; 0x5ce0 <ReadButtons+0x66>
    5cd4:	80 91 ad 08 	lds	r24, 0x08AD
    5cd8:	90 91 ae 08 	lds	r25, 0x08AE
    5cdc:	0f 97       	sbiw	r24, 0x0f	; 15
    5cde:	11 f4       	brne	.+4      	; 0x5ce4 <ReadButtons+0x6a>
		SoftReset();
    5ce0:	0e 94 32 2e 	call	0x5c64	; 0x5c64 <SoftReset>
    5ce4:	08 95       	ret

00005ce6 <ReadControllers>:
 * program when CONTROLLERS_VSYNC_READ==0.
*/
void ReadControllers(){

	//Detect if devices are connected.
	joypadsConnectionStatus=0;
    5ce6:	10 92 dc 08 	sts	0x08DC, r1
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) joypadsConnectionStatus|=1;
    5cea:	00 99       	sbic	0x00, 0	; 0
    5cec:	03 c0       	rjmp	.+6      	; 0x5cf4 <ReadControllers+0xe>
    5cee:	81 e0       	ldi	r24, 0x01	; 1
    5cf0:	80 93 dc 08 	sts	0x08DC, r24
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) joypadsConnectionStatus|=2;
    5cf4:	01 99       	sbic	0x00, 1	; 0
    5cf6:	05 c0       	rjmp	.+10     	; 0x5d02 <ReadControllers+0x1c>
    5cf8:	80 91 dc 08 	lds	r24, 0x08DC
    5cfc:	82 60       	ori	r24, 0x02	; 2
    5cfe:	80 93 dc 08 	sts	0x08DC, r24
			
	//read the standard buttons
	ReadButtons();
    5d02:	0c 94 3d 2e 	jmp	0x5c7a	; 0x5c7a <ReadButtons>

00005d06 <FormatEeprom>:
	return resp;
}

	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {
    5d06:	cf 93       	push	r28
    5d08:	df 93       	push	r29
    5d0a:	c0 e0       	ldi	r28, 0x00	; 0
    5d0c:	d0 e0       	ldi	r29, 0x00	; 0
    5d0e:	fe 01       	movw	r30, r28
    5d10:	e2 56       	subi	r30, 0x62	; 98
    5d12:	ff 4f       	sbci	r31, 0xFF	; 255

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
    5d14:	64 91       	lpm	r22, Z
    5d16:	ce 01       	movw	r24, r28
    5d18:	0e 94 d5 2d 	call	0x5baa	; 0x5baa <WriteEeprom>
    5d1c:	21 96       	adiw	r28, 0x01	; 1
	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
    5d1e:	c0 32       	cpi	r28, 0x20	; 32
    5d20:	d1 05       	cpc	r29, r1
    5d22:	a9 f7       	brne	.-22     	; 0x5d0e <FormatEeprom+0x8>
    5d24:	c0 e2       	ldi	r28, 0x20	; 32
    5d26:	d0 e0       	ldi	r29, 0x00	; 0
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
    5d28:	6f ef       	ldi	r22, 0xFF	; 255
    5d2a:	ce 01       	movw	r24, r28
    5d2c:	0e 94 d5 2d 	call	0x5baa	; 0x5baa <WriteEeprom>
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
    5d30:	6f ef       	ldi	r22, 0xFF	; 255
    5d32:	ce 01       	movw	r24, r28
    5d34:	01 96       	adiw	r24, 0x01	; 1
    5d36:	0e 94 d5 2d 	call	0x5baa	; 0x5baa <WriteEeprom>
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
    5d3a:	a0 96       	adiw	r28, 0x20	; 32
    5d3c:	c1 15       	cp	r28, r1
    5d3e:	88 e0       	ldi	r24, 0x08	; 8
    5d40:	d8 07       	cpc	r29, r24
    5d42:	91 f7       	brne	.-28     	; 0x5d28 <FormatEeprom+0x22>
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
   }
   
}
    5d44:	df 91       	pop	r29
    5d46:	cf 91       	pop	r28
    5d48:	08 95       	ret

00005d4a <isEepromFormatted>:
	  }
   }
}
	
//returns true if the EEPROM has been setup to work with the kernel.
bool isEepromFormatted(){
    5d4a:	cf 93       	push	r28
	unsigned id;
	id=ReadEeprom(0)+(ReadEeprom(1)<<8);
    5d4c:	80 e0       	ldi	r24, 0x00	; 0
    5d4e:	90 e0       	ldi	r25, 0x00	; 0
    5d50:	0e 94 df 2d 	call	0x5bbe	; 0x5bbe <ReadEeprom>
    5d54:	c8 2f       	mov	r28, r24
    5d56:	81 e0       	ldi	r24, 0x01	; 1
    5d58:	90 e0       	ldi	r25, 0x00	; 0
    5d5a:	0e 94 df 2d 	call	0x5bbe	; 0x5bbe <ReadEeprom>
    5d5e:	28 2f       	mov	r18, r24
    5d60:	30 e0       	ldi	r19, 0x00	; 0
    5d62:	32 2f       	mov	r19, r18
    5d64:	22 27       	eor	r18, r18
    5d66:	2c 0f       	add	r18, r28
    5d68:	31 1d       	adc	r19, r1
	return (id==EEPROM_SIGNATURE);
    5d6a:	81 e0       	ldi	r24, 0x01	; 1
    5d6c:	2a 35       	cpi	r18, 0x5A	; 90
    5d6e:	35 45       	sbci	r19, 0x55	; 85
    5d70:	09 f0       	breq	.+2      	; 0x5d74 <isEepromFormatted+0x2a>
    5d72:	80 e0       	ldi	r24, 0x00	; 0
}
    5d74:	cf 91       	pop	r28
    5d76:	08 95       	ret

00005d78 <PatchCommand00>:
/*
 * Command 00: Set envelope speed per frame +127/-128, 0=no enveloppe
 * Param:
 */
void PatchCommand00(Track* track, char param){
	track->envelopeStep=param;
    5d78:	fc 01       	movw	r30, r24
    5d7a:	67 87       	std	Z+15, r22	; 0x0f
    5d7c:	08 95       	ret

00005d7e <PatchCommand01>:
 * Param:
 */
void PatchCommand01(Track* track, char param){
	(void)track; //to remove unused warning
	#if MIXER_CHAN4_TYPE == 0
		mixer.channels.type.noise.barrel=0x0101;
    5d7e:	e8 eb       	ldi	r30, 0xB8	; 184
    5d80:	f8 e0       	ldi	r31, 0x08	; 8
    5d82:	81 e0       	ldi	r24, 0x01	; 1
    5d84:	91 e0       	ldi	r25, 0x01	; 1
    5d86:	95 8b       	std	Z+21, r25	; 0x15
    5d88:	84 8b       	std	Z+20, r24	; 0x14
		mixer.channels.type.noise.params=param;
    5d8a:	63 8b       	std	Z+19, r22	; 0x13
    5d8c:	08 95       	ret

00005d8e <PatchCommand05>:
}
/*
 * Command 05: End of note/fx
 * Param:
 */
void PatchCommand05(Track* track, char param){
    5d8e:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags&=~(TRACK_FLAGS_PLAYING+TRACK_FLAGS_PRIORITY);	//patchPlaying=false,priority=0	
    5d90:	90 81       	ld	r25, Z
    5d92:	9f 75       	andi	r25, 0x5F	; 95
    5d94:	90 83       	st	Z, r25
    5d96:	08 95       	ret

00005d98 <PatchCommand06>:

/*
 * Command 06: Note hold
 * Param:
 */
void PatchCommand06(Track* track, char param){
    5d98:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags|=TRACK_FLAGS_HOLD_ENV; //patchEnvelopeHold=true;
    5d9a:	90 81       	ld	r25, Z
    5d9c:	90 64       	ori	r25, 0x40	; 64
    5d9e:	90 83       	st	Z, r25
    5da0:	08 95       	ret

00005da2 <PatchCommand07>:
 * Command 07: Set envelope volume
 * Param:
 */

void PatchCommand07(Track* track, char param){
	track->envelopeVol=param;
    5da2:	fc 01       	movw	r30, r24
    5da4:	66 87       	std	Z+14, r22	; 0x0e
    5da6:	08 95       	ret

00005da8 <PatchCommand09>:
 * Command 09: Set tremolo level
 * Param:
*/

void PatchCommand09(Track* track, char param){
	track->tremoloLevel=param;
    5da8:	fc 01       	movw	r30, r24
    5daa:	62 87       	std	Z+10, r22	; 0x0a
    5dac:	08 95       	ret

00005dae <PatchCommand10>:
/*
 * Command 10: Set tremolo rate
 * Param:
*/
void PatchCommand10(Track* track, char param){
	track->tremoloRate=param;
    5dae:	fc 01       	movw	r30, r24
    5db0:	63 87       	std	Z+11, r22	; 0x0b
    5db2:	08 95       	ret

00005db4 <PatchCommand11>:
/*
 * Command 11: Pitch slide (linear) 
 * Param: (+/-) half steps to slide to
*/

void PatchCommand11(Track* track, char param){
    5db4:	cf 93       	push	r28
    5db6:	df 93       	push	r29
    5db8:	ec 01       	movw	r28, r24
    5dba:	46 2f       	mov	r20, r22
	//slide to note from current note
	s16 currentStep,targetStep,delta;	
	
	currentStep=pgm_read_word(&(steptable[track->note]));
    5dbc:	29 81       	ldd	r18, Y+1	; 0x01
    5dbe:	30 e0       	ldi	r19, 0x00	; 0
    5dc0:	f9 01       	movw	r30, r18
    5dc2:	ee 0f       	add	r30, r30
    5dc4:	ff 1f       	adc	r31, r31
    5dc6:	e8 5f       	subi	r30, 0xF8	; 248
    5dc8:	f8 49       	sbci	r31, 0x98	; 152
    5dca:	65 91       	lpm	r22, Z+
    5dcc:	74 91       	lpm	r23, Z
	targetStep=pgm_read_word(&(steptable[track->note+param]));	
    5dce:	f9 01       	movw	r30, r18
    5dd0:	e4 0f       	add	r30, r20
    5dd2:	f1 1d       	adc	r31, r1
    5dd4:	47 fd       	sbrc	r20, 7
    5dd6:	fa 95       	dec	r31
    5dd8:	ee 0f       	add	r30, r30
    5dda:	ff 1f       	adc	r31, r31
    5ddc:	e8 5f       	subi	r30, 0xF8	; 248
    5dde:	f8 49       	sbci	r31, 0x98	; 152
    5de0:	85 91       	lpm	r24, Z+
    5de2:	94 91       	lpm	r25, Z
	delta=((targetStep-currentStep)/track->slideSpeed);
    5de4:	86 1b       	sub	r24, r22
    5de6:	97 0b       	sbc	r25, r23
    5de8:	68 85       	ldd	r22, Y+8	; 0x08
    5dea:	70 e0       	ldi	r23, 0x00	; 0
    5dec:	0e 94 72 3c 	call	0x78e4	; 0x78e4 <__divmodhi4>
	if(delta==0)delta++;
    5df0:	61 15       	cp	r22, r1
    5df2:	71 05       	cpc	r23, r1
    5df4:	11 f4       	brne	.+4      	; 0x5dfa <PatchCommand11+0x46>
    5df6:	61 e0       	ldi	r22, 0x01	; 1
    5df8:	70 e0       	ldi	r23, 0x00	; 0

	mixer.channels.all[track->channel].step+=delta;
    5dfa:	ea 81       	ldd	r30, Y+2	; 0x02
    5dfc:	86 e0       	ldi	r24, 0x06	; 6
    5dfe:	e8 9f       	mul	r30, r24
    5e00:	f0 01       	movw	r30, r0
    5e02:	11 24       	eor	r1, r1
    5e04:	e8 54       	subi	r30, 0x48	; 72
    5e06:	f7 4f       	sbci	r31, 0xF7	; 247
    5e08:	81 81       	ldd	r24, Z+1	; 0x01
    5e0a:	92 81       	ldd	r25, Z+2	; 0x02
    5e0c:	86 0f       	add	r24, r22
    5e0e:	97 1f       	adc	r25, r23
    5e10:	92 83       	std	Z+2, r25	; 0x02
    5e12:	81 83       	std	Z+1, r24	; 0x01
	
	track->slideStep=delta;
    5e14:	7e 83       	std	Y+6, r23	; 0x06
    5e16:	6d 83       	std	Y+5, r22	; 0x05
	track->flags|=TRACK_FLAGS_SLIDING;
    5e18:	88 81       	ld	r24, Y
    5e1a:	88 60       	ori	r24, 0x08	; 8
    5e1c:	88 83       	st	Y, r24
	track->slideNote=track->note+param;
    5e1e:	89 81       	ldd	r24, Y+1	; 0x01
    5e20:	48 0f       	add	r20, r24
    5e22:	4f 83       	std	Y+7, r20	; 0x07
}
    5e24:	df 91       	pop	r29
    5e26:	cf 91       	pop	r28
    5e28:	08 95       	ret

00005e2a <PatchCommand12>:
/*
 * Command 12: Pitch slide speed 
 * Param: slide speed (fixed 4:4)
 */
void PatchCommand12(Track* track, char param){
	track->slideSpeed=param;
    5e2a:	fc 01       	movw	r30, r24
    5e2c:	60 87       	std	Z+8, r22	; 0x08
    5e2e:	08 95       	ret

00005e30 <PatchCommand13>:
 *  Command 13: Loop start
 * Description: Defines the start of a loop. Works in conjunction with command 14 (PC_LOOP_END).
 *		 Param: loop count
 */
void PatchCommand13(Track* track, char param){
	track->loopCount=(u8)param;
    5e30:	fc 01       	movw	r30, r24
    5e32:	64 83       	std	Z+4, r22	; 0x04
    5e34:	08 95       	ret

00005e36 <PatchCommand02>:
/*
 * Command 02: Set wave
 * Param:
 */
void PatchCommand02(Track* track, char param){
	SetMixerWave(track->channel,param);
    5e36:	fc 01       	movw	r30, r24
    5e38:	82 81       	ldd	r24, Z+2	; 0x02
    5e3a:	0c 94 ff 32 	jmp	0x65fe	; 0x65fe <SetMixerWave>

00005e3e <PatchCommand03>:
}
/*
 * Command 03: Note up * param
 * Param:
 */
void PatchCommand03(Track* track, char param){
    5e3e:	fc 01       	movw	r30, r24
	track->note+=param;
    5e40:	91 81       	ldd	r25, Z+1	; 0x01
    5e42:	69 0f       	add	r22, r25
    5e44:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(track->channel,track->note);
    5e46:	82 81       	ldd	r24, Z+2	; 0x02
    5e48:	0c 94 e8 32 	jmp	0x65d0	; 0x65d0 <SetMixerNote>

00005e4c <PatchCommand04>:
}
/*
 * Command 04: Note down * param
 * Param:
 */
void PatchCommand04(Track* track, char param){
    5e4c:	fc 01       	movw	r30, r24
	track->note-=param;
    5e4e:	91 81       	ldd	r25, Z+1	; 0x01
    5e50:	96 1b       	sub	r25, r22
    5e52:	69 2f       	mov	r22, r25
    5e54:	91 83       	std	Z+1, r25	; 0x01
	SetMixerNote(track->channel,track->note);
    5e56:	82 81       	ldd	r24, Z+2	; 0x02
    5e58:	0c 94 e8 32 	jmp	0x65d0	; 0x65d0 <SetMixerNote>

00005e5c <PatchCommand08>:
/*
 * Command 08: Set Note/Pitch
 * Param:
 */

void PatchCommand08(Track* track, char param){
    5e5c:	1f 93       	push	r17
    5e5e:	cf 93       	push	r28
    5e60:	df 93       	push	r29
    5e62:	ec 01       	movw	r28, r24
    5e64:	16 2f       	mov	r17, r22
	SetMixerNote(track->channel,param);
    5e66:	8a 81       	ldd	r24, Y+2	; 0x02
    5e68:	0e 94 e8 32 	call	0x65d0	; 0x65d0 <SetMixerNote>
	track->note=param;
    5e6c:	19 83       	std	Y+1, r17	; 0x01
	track->flags &= ~(TRACK_FLAGS_SLIDING);	
    5e6e:	88 81       	ld	r24, Y
    5e70:	87 7f       	andi	r24, 0xF7	; 247
    5e72:	88 83       	st	Y, r24
}
    5e74:	df 91       	pop	r29
    5e76:	cf 91       	pop	r28
    5e78:	1f 91       	pop	r17
    5e7a:	08 95       	ret

00005e7c <PatchCommand14>:
 *					1,PC_NOTE_DOWN,3,
 *					0,PC_LOOP_END,2,
 *					0,PATCH_END  
 *				};
 */
void PatchCommand14(Track* track, char param){
    5e7c:	dc 01       	movw	r26, r24
	if(track->loopCount>0){
    5e7e:	14 96       	adiw	r26, 0x04	; 4
    5e80:	8c 91       	ld	r24, X
    5e82:	14 97       	sbiw	r26, 0x04	; 4
    5e84:	88 23       	and	r24, r24
    5e86:	19 f1       	breq	.+70     	; 0x5ece <PatchCommand14+0x52>
    5e88:	55 96       	adiw	r26, 0x15	; 21
    5e8a:	2d 91       	ld	r18, X+
    5e8c:	3c 91       	ld	r19, X
    5e8e:	56 97       	sbiw	r26, 0x16	; 22
		//track->patchCommandStreamPos=track->loopStart;
		if(param!=0){
    5e90:	66 23       	and	r22, r22
    5e92:	79 f0       	breq	.+30     	; 0x5eb2 <PatchCommand14+0x36>
			track->patchCommandStreamPos-=((param+1)*3);
    5e94:	77 27       	eor	r23, r23
    5e96:	67 fd       	sbrc	r22, 7
    5e98:	70 95       	com	r23
    5e9a:	6f 5f       	subi	r22, 0xFF	; 255
    5e9c:	7f 4f       	sbci	r23, 0xFF	; 255
    5e9e:	ab 01       	movw	r20, r22
    5ea0:	44 0f       	add	r20, r20
    5ea2:	55 1f       	adc	r21, r21
    5ea4:	64 0f       	add	r22, r20
    5ea6:	75 1f       	adc	r23, r21
    5ea8:	26 1b       	sub	r18, r22
    5eaa:	37 0b       	sbc	r19, r23
    5eac:	09 c0       	rjmp	.+18     	; 0x5ec0 <PatchCommand14+0x44>
			while(1){
				track->patchCommandStreamPos-=3;
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    5eae:	ef 3f       	cpi	r30, 0xFF	; 255
    5eb0:	39 f0       	breq	.+14     	; 0x5ec0 <PatchCommand14+0x44>
		if(param!=0){
			track->patchCommandStreamPos-=((param+1)*3);
		}else{
			u8 command;
			while(1){
				track->patchCommandStreamPos-=3;
    5eb2:	23 50       	subi	r18, 0x03	; 3
    5eb4:	31 09       	sbc	r19, r1
    5eb6:	f9 01       	movw	r30, r18
    5eb8:	32 97       	sbiw	r30, 0x02	; 2
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
    5eba:	e4 91       	lpm	r30, Z
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    5ebc:	ed 30       	cpi	r30, 0x0D	; 13
    5ebe:	b9 f7       	brne	.-18     	; 0x5eae <PatchCommand14+0x32>
    5ec0:	56 96       	adiw	r26, 0x16	; 22
    5ec2:	3c 93       	st	X, r19
    5ec4:	2e 93       	st	-X, r18
    5ec6:	55 97       	sbiw	r26, 0x15	; 21
			}
		}
		track->loopCount--;
    5ec8:	81 50       	subi	r24, 0x01	; 1
    5eca:	14 96       	adiw	r26, 0x04	; 4
    5ecc:	8c 93       	st	X, r24
    5ece:	08 95       	ret

00005ed0 <InitMusicPlayer>:

const Patch *patchPointers;

void InitMusicPlayer(const Patch *patchPointersParam){

	patchPointers=patchPointersParam;
    5ed0:	90 93 55 09 	sts	0x0955, r25
    5ed4:	80 93 54 09 	sts	0x0954, r24

	masterVolume=DEFAULT_MASTER_VOL;
    5ed8:	8f e6       	ldi	r24, 0x6F	; 111
    5eda:	80 93 57 09 	sts	0x0957, r24
#if MIDI_IN == ENABLED
	InitUartRxBuffer();
	lastMidiInStatus=0;
#endif

	playSong=false;
    5ede:	10 92 b6 08 	sts	0x08B6, r1
    5ee2:	ef ee       	ldi	r30, 0xEF	; 239
    5ee4:	f8 e0       	ldi	r31, 0x08	; 8

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    5ee6:	80 e0       	ldi	r24, 0x00	; 0
		tracks[t].channel=t;
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    5ee8:	90 e1       	ldi	r25, 0x10	; 16
		tracks[t].noteVol=0;
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    5eea:	3f ef       	ldi	r19, 0xFF	; 255
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
    5eec:	28 e1       	ldi	r18, 0x18	; 24
    5eee:	df 01       	movw	r26, r30
    5ef0:	1e 97       	sbiw	r26, 0x0e	; 14

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].channel=t;
    5ef2:	8c 93       	st	X, r24
    5ef4:	12 97       	sbiw	r26, 0x02	; 2
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    5ef6:	9c 93       	st	X, r25
    5ef8:	1d 96       	adiw	r26, 0x0d	; 13
		tracks[t].noteVol=0;
    5efa:	1c 92       	st	X, r1
    5efc:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    5efe:	3c 93       	st	X, r19
		tracks[t].patchNo=DEFAULT_PATCH;
    5f00:	10 82       	st	Z, r1
    5f02:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].tremoloRate=24; //~6hz
    5f04:	2c 93       	st	X, r18
    5f06:	13 97       	sbiw	r26, 0x03	; 3
		tracks[t].slideSpeed=0x10;
    5f08:	9c 93       	st	X, r25
#endif

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    5f0a:	8f 5f       	subi	r24, 0xFF	; 255
    5f0c:	77 96       	adiw	r30, 0x17	; 23
    5f0e:	85 30       	cpi	r24, 0x05	; 5
    5f10:	71 f7       	brne	.-36     	; 0x5eee <InitMusicPlayer+0x1e>
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
		tracks[t].slideSpeed=0x10;
	}

}
    5f12:	08 95       	ret

00005f14 <ReadVarLen>:
}



unsigned int ReadVarLen(const char **songPos)
{
    5f14:	dc 01       	movw	r26, r24
    unsigned int value;
    unsigned char c;


    if ( (value = pgm_read_byte((*songPos)++)) & 0x80 )
    5f16:	ed 91       	ld	r30, X+
    5f18:	fc 91       	ld	r31, X
    5f1a:	11 97       	sbiw	r26, 0x01	; 1
    5f1c:	9f 01       	movw	r18, r30
    5f1e:	2f 5f       	subi	r18, 0xFF	; 255
    5f20:	3f 4f       	sbci	r19, 0xFF	; 255
    5f22:	11 96       	adiw	r26, 0x01	; 1
    5f24:	3c 93       	st	X, r19
    5f26:	2e 93       	st	-X, r18
    5f28:	e4 91       	lpm	r30, Z
    5f2a:	e7 fd       	sbrc	r30, 7
    5f2c:	03 c0       	rjmp	.+6      	; 0x5f34 <ReadVarLen+0x20>
    5f2e:	8e 2f       	mov	r24, r30
    5f30:	90 e0       	ldi	r25, 0x00	; 0
    5f32:	08 95       	ret
    {
       value &= 0x7F;
    5f34:	ef 77       	andi	r30, 0x7F	; 127
    5f36:	8e 2f       	mov	r24, r30
    5f38:	90 e0       	ldi	r25, 0x00	; 0
       do
       {
         value = (value << 7) + ((c = pgm_read_byte((*songPos)++)) & 0x7F);
    5f3a:	96 95       	lsr	r25
    5f3c:	98 2f       	mov	r25, r24
    5f3e:	88 27       	eor	r24, r24
    5f40:	97 95       	ror	r25
    5f42:	87 95       	ror	r24
    5f44:	2f 5f       	subi	r18, 0xFF	; 255
    5f46:	3f 4f       	sbci	r19, 0xFF	; 255
    5f48:	f9 01       	movw	r30, r18
    5f4a:	31 97       	sbiw	r30, 0x01	; 1
    5f4c:	e4 91       	lpm	r30, Z
    5f4e:	4e 2f       	mov	r20, r30
    5f50:	4f 77       	andi	r20, 0x7F	; 127
    5f52:	84 0f       	add	r24, r20
    5f54:	91 1d       	adc	r25, r1
       } while (c & 0x80);
    5f56:	e7 fd       	sbrc	r30, 7
    5f58:	f0 cf       	rjmp	.-32     	; 0x5f3a <ReadVarLen+0x26>
    5f5a:	2d 93       	st	X+, r18
    5f5c:	3c 93       	st	X, r19
    }


    return value;
}
    5f5e:	08 95       	ret

00005f60 <TriggerCommon>:




void TriggerCommon(Track* track,u8 patch,u8 volume,u8 note){
    5f60:	ef 92       	push	r14
    5f62:	ff 92       	push	r15
    5f64:	0f 93       	push	r16
    5f66:	1f 93       	push	r17
    5f68:	cf 93       	push	r28
    5f6a:	df 93       	push	r29
    5f6c:	1f 92       	push	r1
    5f6e:	cd b7       	in	r28, 0x3d	; 61
    5f70:	de b7       	in	r29, 0x3e	; 62
    5f72:	7c 01       	movw	r14, r24
    5f74:	16 2f       	mov	r17, r22
		
	bool isFx = (track->flags&TRACK_FLAGS_PRIORITY);
    5f76:	fc 01       	movw	r30, r24
    5f78:	80 81       	ld	r24, Z
    5f7a:	08 2f       	mov	r16, r24
    5f7c:	00 1f       	adc	r16, r16
    5f7e:	00 27       	eor	r16, r16
    5f80:	00 1f       	adc	r16, r16

	track->envelopeStep=0; 
    5f82:	17 86       	std	Z+15, r1	; 0x0f
	track->envelopeVol=0xff; 
    5f84:	9f ef       	ldi	r25, 0xFF	; 255
    5f86:	96 87       	std	Z+14, r25	; 0x0e
	track->noteVol=volume;
    5f88:	45 87       	std	Z+13, r20	; 0x0d
	track->patchPlayingTime=0;
    5f8a:	14 8a       	std	Z+20, r1	; 0x14
	track->flags&=(~(TRACK_FLAGS_HOLD_ENV|TRACK_FLAGS_SLIDING));
    5f8c:	87 7b       	andi	r24, 0xB7	; 183
    5f8e:	80 83       	st	Z, r24
	track->tremoloLevel=0;
    5f90:	12 86       	std	Z+10, r1	; 0x0a
	track->tremoloPos=0;
    5f92:	11 86       	std	Z+9, r1	; 0x09
	track->note=note;
    5f94:	21 83       	std	Z+1, r18	; 0x01
	track->loopCount=0;
    5f96:	14 82       	std	Z+4, r1	; 0x04

#if MUSIC_ENGINE == MIDI
	track->expressionVol=DEFAULT_EXPRESSION_VOL;
    5f98:	93 83       	std	Z+3, r25	; 0x03
#endif

	#if SOUND_MIXER == MIXER_TYPE_INLINE

		if(track->channel==3){
    5f9a:	82 81       	ldd	r24, Z+2	; 0x02
    5f9c:	83 30       	cpi	r24, 0x03	; 3
    5f9e:	69 f4       	brne	.+26     	; 0x5fba <TriggerCommon+0x5a>
			//noise channel		
			if(!isFx) patch=note;			
    5fa0:	01 11       	cpse	r16, r1
    5fa2:	01 c0       	rjmp	.+2      	; 0x5fa6 <TriggerCommon+0x46>
    5fa4:	12 2f       	mov	r17, r18
			mixer.channels.type.noise.barrel=0x0101;				
    5fa6:	81 e0       	ldi	r24, 0x01	; 1
    5fa8:	91 e0       	ldi	r25, 0x01	; 1
    5faa:	90 93 cd 08 	sts	0x08CD, r25
    5fae:	80 93 cc 08 	sts	0x08CC, r24
			mixer.channels.type.noise.params=1; //default (15bits,no divider)
    5fb2:	81 e0       	ldi	r24, 0x01	; 1
    5fb4:	80 93 cb 08 	sts	0x08CB, r24
    5fb8:	39 c0       	rjmp	.+114    	; 0x602c <TriggerCommon+0xcc>

		#if SOUND_CHANNEL_5_ENABLE==1		

		}else if(track->channel==4){
    5fba:	84 30       	cpi	r24, 0x04	; 4
    5fbc:	69 f5       	brne	.+90     	; 0x6018 <TriggerCommon+0xb8>
				//PCM channel					
				mixer.channels.type.pcm.positionFrac=0;
    5fbe:	10 92 d3 08 	sts	0x08D3, r1
				const char *pos=(const char*)pgm_read_word(&(patchPointers[patch].pcmData));
    5fc2:	80 91 54 09 	lds	r24, 0x0954
    5fc6:	90 91 55 09 	lds	r25, 0x0955
    5fca:	f9 e0       	ldi	r31, 0x09	; 9
    5fcc:	6f 9f       	mul	r22, r31
    5fce:	80 0d       	add	r24, r0
    5fd0:	91 1d       	adc	r25, r1
    5fd2:	11 24       	eor	r1, r1
    5fd4:	fc 01       	movw	r30, r24
    5fd6:	31 96       	adiw	r30, 0x01	; 1
    5fd8:	a5 91       	lpm	r26, Z+
    5fda:	b4 91       	lpm	r27, Z
				mixer.channels.type.pcm.position=pos;				
    5fdc:	b0 93 d5 08 	sts	0x08D5, r27
    5fe0:	a0 93 d4 08 	sts	0x08D4, r26
				mixer.pcmLoopLenght=pgm_read_word(&(patchPointers[patch].loopEnd))-pgm_read_word(&(patchPointers[patch].loopStart));
    5fe4:	ac 01       	movw	r20, r24
    5fe6:	49 5f       	subi	r20, 0xF9	; 249
    5fe8:	5f 4f       	sbci	r21, 0xFF	; 255
    5fea:	fa 01       	movw	r30, r20
    5fec:	65 91       	lpm	r22, Z+
    5fee:	74 91       	lpm	r23, Z
    5ff0:	05 96       	adiw	r24, 0x05	; 5
    5ff2:	fc 01       	movw	r30, r24
    5ff4:	85 91       	lpm	r24, Z+
    5ff6:	94 91       	lpm	r25, Z
    5ff8:	68 1b       	sub	r22, r24
    5ffa:	79 0b       	sbc	r23, r25
    5ffc:	70 93 d7 08 	sts	0x08D7, r23
    6000:	60 93 d6 08 	sts	0x08D6, r22
				mixer.pcmLoopEnd=pos+pgm_read_word(&(patchPointers[patch].loopEnd));
    6004:	fa 01       	movw	r30, r20
    6006:	85 91       	lpm	r24, Z+
    6008:	94 91       	lpm	r25, Z
    600a:	a8 0f       	add	r26, r24
    600c:	b9 1f       	adc	r27, r25
    600e:	b0 93 d9 08 	sts	0x08D9, r27
    6012:	a0 93 d8 08 	sts	0x08D8, r26
    6016:	05 c0       	rjmp	.+10     	; 0x6022 <TriggerCommon+0xc2>
				SetMixerNote(track->channel,note);
		#endif	

		}else{					
			//wave channels					
			SetMixerWave(track->channel,0);//default wave
    6018:	60 e0       	ldi	r22, 0x00	; 0
    601a:	29 83       	std	Y+1, r18	; 0x01
    601c:	0e 94 ff 32 	call	0x65fe	; 0x65fe <SetMixerWave>
			SetMixerNote(track->channel,note);
    6020:	29 81       	ldd	r18, Y+1	; 0x01
    6022:	62 2f       	mov	r22, r18
    6024:	f7 01       	movw	r30, r14
    6026:	82 81       	ldd	r24, Z+2	; 0x02
    6028:	0e 94 e8 32 	call	0x65d0	; 0x65d0 <SetMixerNote>
		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
		track->fxPatchNo=patch;
    602c:	f7 01       	movw	r30, r14

		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
    602e:	00 23       	and	r16, r16
    6030:	11 f0       	breq	.+4      	; 0x6036 <TriggerCommon+0xd6>
		track->fxPatchNo=patch;
    6032:	11 8b       	std	Z+17, r17	; 0x11
    6034:	01 c0       	rjmp	.+2      	; 0x6038 <TriggerCommon+0xd8>
	}else{
		track->patchNo=patch;	
    6036:	10 8b       	std	Z+16, r17	; 0x10
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
    6038:	e0 91 54 09 	lds	r30, 0x0954
    603c:	f0 91 55 09 	lds	r31, 0x0955
    6040:	39 e0       	ldi	r19, 0x09	; 9
    6042:	13 9f       	mul	r17, r19
    6044:	e0 0d       	add	r30, r0
    6046:	f1 1d       	adc	r31, r1
    6048:	11 24       	eor	r1, r1
    604a:	33 96       	adiw	r30, 0x03	; 3
    604c:	85 91       	lpm	r24, Z+
    604e:	94 91       	lpm	r25, Z
	if(pos==NULL){
		track->patchCommandStreamPos=NULL;
    6050:	f7 01       	movw	r30, r14
	}else{
		track->patchNo=patch;	
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
	if(pos==NULL){
    6052:	00 97       	sbiw	r24, 0x00	; 0
    6054:	19 f4       	brne	.+6      	; 0x605c <TriggerCommon+0xfc>
		track->patchCommandStreamPos=NULL;
    6056:	16 8a       	std	Z+22, r1	; 0x16
    6058:	15 8a       	std	Z+21, r1	; 0x15
    605a:	08 c0       	rjmp	.+16     	; 0x606c <TriggerCommon+0x10c>
	}else{
		track->patchCurrDeltaTime=0;
    605c:	13 8a       	std	Z+19, r1	; 0x13
		track->patchNextDeltaTime=pgm_read_byte(pos++);
    605e:	fc 01       	movw	r30, r24
    6060:	24 91       	lpm	r18, Z
    6062:	f7 01       	movw	r30, r14
    6064:	22 8b       	std	Z+18, r18	; 0x12
    6066:	01 96       	adiw	r24, 0x01	; 1
		track->patchCommandStreamPos=pos;
    6068:	96 8b       	std	Z+22, r25	; 0x16
    606a:	85 8b       	std	Z+21, r24	; 0x15
	}

}
    606c:	0f 90       	pop	r0
    606e:	df 91       	pop	r29
    6070:	cf 91       	pop	r28
    6072:	1f 91       	pop	r17
    6074:	0f 91       	pop	r16
    6076:	ff 90       	pop	r15
    6078:	ef 90       	pop	r14
    607a:	08 95       	ret

0000607c <TriggerFx>:

/* Trigger a sound effect.
 * Method allocates the channel based on priority.
 * Retrig: if this fx if already playing on a track, reuse same track.
 */
void TriggerFx(unsigned char patch,unsigned char volume,bool retrig){
    607c:	cf 93       	push	r28
    607e:	df 93       	push	r29
	unsigned char channel;
	
	unsigned char type=(unsigned char)pgm_read_byte(&(patchPointers[patch].type));
    6080:	e0 91 54 09 	lds	r30, 0x0954
    6084:	f0 91 55 09 	lds	r31, 0x0955
    6088:	99 e0       	ldi	r25, 0x09	; 9
    608a:	89 9f       	mul	r24, r25
    608c:	e0 0d       	add	r30, r0
    608e:	f1 1d       	adc	r31, r1
    6090:	11 24       	eor	r1, r1
    6092:	e4 91       	lpm	r30, Z

	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
    6094:	e1 30       	cpi	r30, 0x01	; 1
    6096:	e9 f0       	breq	.+58     	; 0x60d2 <TriggerFx+0x56>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
    6098:	e2 30       	cpi	r30, 0x02	; 2
    609a:	e9 f0       	breq	.+58     	; 0x60d6 <TriggerFx+0x5a>
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
    609c:	20 91 f6 08 	lds	r18, 0x08F6
    60a0:	27 ff       	sbrs	r18, 7
    60a2:	1d c0       	rjmp	.+58     	; 0x60de <TriggerFx+0x62>
    60a4:	20 91 07 09 	lds	r18, 0x0907
    60a8:	28 13       	cpse	r18, r24
    60aa:	02 c0       	rjmp	.+4      	; 0x60b0 <TriggerFx+0x34>
    60ac:	41 11       	cpse	r20, r1
    60ae:	17 c0       	rjmp	.+46     	; 0x60de <TriggerFx+0x62>
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
    60b0:	20 91 0d 09 	lds	r18, 0x090D
    60b4:	27 ff       	sbrs	r18, 7
    60b6:	11 c0       	rjmp	.+34     	; 0x60da <TriggerFx+0x5e>
    60b8:	20 91 1e 09 	lds	r18, 0x091E
    60bc:	28 13       	cpse	r18, r24
    60be:	02 c0       	rjmp	.+4      	; 0x60c4 <TriggerFx+0x48>
    60c0:	41 11       	cpse	r20, r1
    60c2:	0b c0       	rjmp	.+22     	; 0x60da <TriggerFx+0x5e>
		channel=2;
	}else{
		//both channels have fx playing, use the oldest one
		if(tracks[1].patchPlayingTime>tracks[2].patchPlayingTime){
    60c4:	20 91 0a 09 	lds	r18, 0x090A
    60c8:	90 91 21 09 	lds	r25, 0x0921
    60cc:	92 17       	cp	r25, r18
    60ce:	28 f4       	brcc	.+10     	; 0x60da <TriggerFx+0x5e>
    60d0:	06 c0       	rjmp	.+12     	; 0x60de <TriggerFx+0x62>
	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
		//noise or PCM channel fx		
		channel=3;
    60d2:	c3 e0       	ldi	r28, 0x03	; 3
    60d4:	05 c0       	rjmp	.+10     	; 0x60e0 <TriggerFx+0x64>
	}else if(type==2){
		channel=4;
    60d6:	c4 e0       	ldi	r28, 0x04	; 4
    60d8:	03 c0       	rjmp	.+6      	; 0x60e0 <TriggerFx+0x64>
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
		channel=2;
    60da:	c2 e0       	ldi	r28, 0x02	; 2
    60dc:	01 c0       	rjmp	.+2      	; 0x60e0 <TriggerFx+0x64>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
    60de:	c1 e0       	ldi	r28, 0x01	; 1
			channel=2;
		}
	}				

	Track* track=&tracks[channel];
	track->flags=TRACK_FLAGS_PRIORITY; //priority=1;
    60e0:	97 e1       	ldi	r25, 0x17	; 23
    60e2:	c9 9f       	mul	r28, r25
    60e4:	e0 01       	movw	r28, r0
    60e6:	11 24       	eor	r1, r1
    60e8:	c1 52       	subi	r28, 0x21	; 33
    60ea:	d7 4f       	sbci	r29, 0xF7	; 247
    60ec:	90 e8       	ldi	r25, 0x80	; 128
    60ee:	98 83       	st	Y, r25
	track->patchCommandStreamPos = NULL;
    60f0:	1e 8a       	std	Y+22, r1	; 0x16
    60f2:	1d 8a       	std	Y+21, r1	; 0x15
	TriggerCommon(track,patch,volume,80);
    60f4:	20 e5       	ldi	r18, 0x50	; 80
    60f6:	46 2f       	mov	r20, r22
    60f8:	68 2f       	mov	r22, r24
    60fa:	ce 01       	movw	r24, r28
    60fc:	0e 94 b0 2f 	call	0x5f60	; 0x5f60 <TriggerCommon>
	track->flags|=TRACK_FLAGS_PLAYING;
    6100:	88 81       	ld	r24, Y
    6102:	80 62       	ori	r24, 0x20	; 32
    6104:	88 83       	st	Y, r24
}
    6106:	df 91       	pop	r29
    6108:	cf 91       	pop	r28
    610a:	08 95       	ret

0000610c <TriggerNote>:


void TriggerNote(unsigned char channel,unsigned char patch,unsigned char note,unsigned char volume){
    610c:	cf 93       	push	r28
    610e:	df 93       	push	r29
	Track* track=&tracks[channel];

	//allow only other music notes 
	if((track->flags&TRACK_FLAGS_PLAYING)==0 || (track->flags&TRACK_FLAGS_PRIORITY)==0){
    6110:	a8 2f       	mov	r26, r24
    6112:	b0 e0       	ldi	r27, 0x00	; 0
    6114:	97 e1       	ldi	r25, 0x17	; 23
    6116:	89 9f       	mul	r24, r25
    6118:	f0 01       	movw	r30, r0
    611a:	11 24       	eor	r1, r1
    611c:	e1 52       	subi	r30, 0x21	; 33
    611e:	f7 4f       	sbci	r31, 0xF7	; 247
    6120:	80 81       	ld	r24, Z
    6122:	85 ff       	sbrs	r24, 5
    6124:	02 c0       	rjmp	.+4      	; 0x612a <TriggerNote+0x1e>
    6126:	87 fd       	sbrc	r24, 7
    6128:	2e c0       	rjmp	.+92     	; 0x6186 <TriggerNote+0x7a>
			
		if(volume==0){ //note-off received
    612a:	21 11       	cpse	r18, r1
    612c:	18 c0       	rjmp	.+48     	; 0x615e <TriggerNote+0x52>

			
			//cut note if there's no envelope & no note hold
			if(track->envelopeStep==0 && !(track->flags&TRACK_FLAGS_HOLD_ENV)){
    612e:	97 e1       	ldi	r25, 0x17	; 23
    6130:	9a 9f       	mul	r25, r26
    6132:	f0 01       	movw	r30, r0
    6134:	9b 9f       	mul	r25, r27
    6136:	f0 0d       	add	r31, r0
    6138:	11 24       	eor	r1, r1
    613a:	e1 52       	subi	r30, 0x21	; 33
    613c:	f7 4f       	sbci	r31, 0xF7	; 247
    613e:	97 85       	ldd	r25, Z+15	; 0x0f
    6140:	91 11       	cpse	r25, r1
    6142:	02 c0       	rjmp	.+4      	; 0x6148 <TriggerNote+0x3c>
    6144:	86 ff       	sbrs	r24, 6
				track->noteVol=0;
    6146:	15 86       	std	Z+13, r1	; 0x0d
			}

			track->flags&=(~TRACK_FLAGS_HOLD_ENV);//patchEnvelopeHold=false;
    6148:	97 e1       	ldi	r25, 0x17	; 23
    614a:	9a 9f       	mul	r25, r26
    614c:	f0 01       	movw	r30, r0
    614e:	9b 9f       	mul	r25, r27
    6150:	f0 0d       	add	r31, r0
    6152:	11 24       	eor	r1, r1
    6154:	e1 52       	subi	r30, 0x21	; 33
    6156:	f7 4f       	sbci	r31, 0xF7	; 247
    6158:	8f 7b       	andi	r24, 0xBF	; 191
    615a:	80 83       	st	Z, r24
    615c:	14 c0       	rjmp	.+40     	; 0x6186 <TriggerNote+0x7a>
    615e:	82 2f       	mov	r24, r18
    6160:	24 2f       	mov	r18, r20
		}else{
		
			track->flags=0;//&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    6162:	97 e1       	ldi	r25, 0x17	; 23
    6164:	9a 9f       	mul	r25, r26
    6166:	e0 01       	movw	r28, r0
    6168:	9b 9f       	mul	r25, r27
    616a:	d0 0d       	add	r29, r0
    616c:	11 24       	eor	r1, r1
    616e:	c1 52       	subi	r28, 0x21	; 33
    6170:	d7 4f       	sbci	r29, 0xF7	; 247
    6172:	18 82       	st	Y, r1
			track->patchCommandStreamPos = NULL;
    6174:	1e 8a       	std	Y+22, r1	; 0x16
    6176:	1d 8a       	std	Y+21, r1	; 0x15
			TriggerCommon(track,patch,volume,note);
    6178:	48 2f       	mov	r20, r24
    617a:	ce 01       	movw	r24, r28
    617c:	0e 94 b0 2f 	call	0x5f60	; 0x5f60 <TriggerCommon>
			track->flags|=TRACK_FLAGS_PLAYING;
    6180:	88 81       	ld	r24, Y
    6182:	80 62       	ori	r24, 0x20	; 32
    6184:	88 83       	st	Y, r24
		}

	}
}
    6186:	df 91       	pop	r29
    6188:	cf 91       	pop	r28
    618a:	08 95       	ret

0000618c <ProcessMusic>:
	}

#endif


void ProcessMusic(void){
    618c:	6f 92       	push	r6
    618e:	7f 92       	push	r7
    6190:	8f 92       	push	r8
    6192:	9f 92       	push	r9
    6194:	af 92       	push	r10
    6196:	bf 92       	push	r11
    6198:	cf 92       	push	r12
    619a:	df 92       	push	r13
    619c:	ef 92       	push	r14
    619e:	ff 92       	push	r15
    61a0:	0f 93       	push	r16
    61a2:	1f 93       	push	r17
    61a4:	cf 93       	push	r28
    61a6:	df 93       	push	r29
    61a8:	cf ed       	ldi	r28, 0xDF	; 223
    61aa:	d8 e0       	ldi	r29, 0x08	; 8
    61ac:	08 eb       	ldi	r16, 0xB8	; 184
    61ae:	18 e0       	ldi	r17, 0x08	; 8
    61b0:	d8 01       	movw	r26, r16
    61b2:	9e 01       	movw	r18, r28
    61b4:	40 e0       	ldi	r20, 0x00	; 0
    61b6:	50 e0       	ldi	r21, 0x00	; 0
    61b8:	ca 01       	movw	r24, r20
    61ba:	81 52       	subi	r24, 0x21	; 33
    61bc:	97 4f       	sbci	r25, 0xF7	; 247
    61be:	6c 01       	movw	r12, r24
	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//update envelope
		if(track->envelopeStep!=0){
    61c0:	fc 01       	movw	r30, r24
    61c2:	87 85       	ldd	r24, Z+15	; 0x0f
    61c4:	88 23       	and	r24, r24
    61c6:	91 f0       	breq	.+36     	; 0x61ec <ProcessMusic+0x60>
			vol=track->envelopeVol+track->envelopeStep;		
    61c8:	66 85       	ldd	r22, Z+14	; 0x0e
    61ca:	99 27       	eor	r25, r25
    61cc:	87 fd       	sbrc	r24, 7
    61ce:	90 95       	com	r25
    61d0:	86 0f       	add	r24, r22
    61d2:	91 1d       	adc	r25, r1
    61d4:	8f 3f       	cpi	r24, 0xFF	; 255
    61d6:	91 05       	cpc	r25, r1
    61d8:	19 f0       	breq	.+6      	; 0x61e0 <ProcessMusic+0x54>
    61da:	14 f0       	brlt	.+4      	; 0x61e0 <ProcessMusic+0x54>
    61dc:	8f ef       	ldi	r24, 0xFF	; 255
    61de:	90 e0       	ldi	r25, 0x00	; 0
    61e0:	97 ff       	sbrs	r25, 7
    61e2:	02 c0       	rjmp	.+4      	; 0x61e8 <ProcessMusic+0x5c>
    61e4:	80 e0       	ldi	r24, 0x00	; 0
    61e6:	90 e0       	ldi	r25, 0x00	; 0
			if(vol<0){
				vol=0;			
			}else if(vol>0xff){
				vol=0xff;						
			}
			track->envelopeVol=vol;
    61e8:	f6 01       	movw	r30, r12
    61ea:	86 87       	std	Z+14, r24	; 0x0e
		}

		//if volumes reaches zero and no more patch command, explicitly end playing on track
		//if(vol==0 && track->patchCommandStreamPos==NULL) track->flags&=~(TRACK_FLAGS_PLAYING);

		if(track->flags & TRACK_FLAGS_SLIDING){
    61ec:	f9 01       	movw	r30, r18
    61ee:	f0 80       	ld	r15, Z
    61f0:	f3 fe       	sbrs	r15, 3
    61f2:	2a c0       	rjmp	.+84     	; 0x6248 <ProcessMusic+0xbc>

			mixer.channels.all[trackNo].step+=track->slideStep;
    61f4:	65 81       	ldd	r22, Z+5	; 0x05
    61f6:	76 81       	ldd	r23, Z+6	; 0x06
    61f8:	11 96       	adiw	r26, 0x01	; 1
    61fa:	8d 91       	ld	r24, X+
    61fc:	9c 91       	ld	r25, X
    61fe:	12 97       	sbiw	r26, 0x02	; 2
    6200:	86 0f       	add	r24, r22
    6202:	97 1f       	adc	r25, r23
    6204:	12 96       	adiw	r26, 0x02	; 2
    6206:	9c 93       	st	X, r25
    6208:	8e 93       	st	-X, r24
    620a:	11 97       	sbiw	r26, 0x01	; 1
			u16 tStep=pgm_read_word(&(steptable[track->slideNote]));
    620c:	f6 01       	movw	r30, r12
    620e:	e7 80       	ldd	r14, Z+7	; 0x07
    6210:	ee 2d       	mov	r30, r14
    6212:	f0 e0       	ldi	r31, 0x00	; 0
    6214:	ee 0f       	add	r30, r30
    6216:	ff 1f       	adc	r31, r31
    6218:	e8 5f       	subi	r30, 0xF8	; 248
    621a:	f8 49       	sbci	r31, 0x98	; 152
    621c:	c5 90       	lpm	r12, Z+
    621e:	d4 90       	lpm	r13, Z

			if((track->slideStep>0 && mixer.channels.all[trackNo].step>=tStep) || 
    6220:	16 16       	cp	r1, r22
    6222:	17 06       	cpc	r1, r23
    6224:	24 f4       	brge	.+8      	; 0x622e <ProcessMusic+0xa2>
    6226:	8c 15       	cp	r24, r12
    6228:	9d 05       	cpc	r25, r13
    622a:	30 f4       	brcc	.+12     	; 0x6238 <ProcessMusic+0xac>
    622c:	0d c0       	rjmp	.+26     	; 0x6248 <ProcessMusic+0xbc>
    622e:	67 2b       	or	r22, r23
    6230:	59 f0       	breq	.+22     	; 0x6248 <ProcessMusic+0xbc>
				(track->slideStep<0 && mixer.channels.all[trackNo].step<=tStep))
    6232:	c8 16       	cp	r12, r24
    6234:	d9 06       	cpc	r13, r25
    6236:	40 f0       	brcs	.+16     	; 0x6248 <ProcessMusic+0xbc>
			{					
				mixer.channels.all[trackNo].step = tStep;					
    6238:	12 96       	adiw	r26, 0x02	; 2
    623a:	dc 92       	st	X, r13
    623c:	ce 92       	st	-X, r12
    623e:	11 97       	sbiw	r26, 0x01	; 1
				track->flags &= ~(TRACK_FLAGS_SLIDING);	
    6240:	8f 2d       	mov	r24, r15
    6242:	87 7f       	andi	r24, 0xF7	; 247
    6244:	f9 01       	movw	r30, r18
    6246:	80 83       	st	Z, r24
    6248:	49 5e       	subi	r20, 0xE9	; 233
    624a:	5f 4f       	sbci	r21, 0xFF	; 255
    624c:	29 5e       	subi	r18, 0xE9	; 233
    624e:	3f 4f       	sbci	r19, 0xFF	; 255
    6250:	16 96       	adiw	r26, 0x06	; 6
	u8 channel;
	Track* track;


	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    6252:	43 37       	cpi	r20, 0x73	; 115
    6254:	51 05       	cpc	r21, r1
    6256:	09 f0       	breq	.+2      	; 0x625a <ProcessMusic+0xce>
    6258:	af cf       	rjmp	.-162    	; 0x61b8 <ProcessMusic+0x2c>
	}



	//Process song MIDI notes
	if(playSong){
    625a:	80 91 b6 08 	lds	r24, 0x08B6
    625e:	88 23       	and	r24, r24
    6260:	09 f4       	brne	.+2      	; 0x6264 <ProcessMusic+0xd8>
    6262:	cc c0       	rjmp	.+408    	; 0x63fc <ProcessMusic+0x270>
							}else if(c1==CONTROLER_EXPRESSION){
								tracks[channel].expressionVol=c2<<1;
							}else if(c1==CONTROLER_TREMOLO){
								tracks[channel].tremoloLevel=c2<<1;
							}else if(c1==CONTROLER_TREMOLO_RATE){
								tracks[channel].tremoloRate=c2<<1;
    6264:	57 e1       	ldi	r21, 0x17	; 23
    6266:	f5 2e       	mov	r15, r21
	if(playSong){
	
		#if MUSIC_ENGINE == MIDI
			
			//process all simultaneous events
			while(currDeltaTime==nextDeltaTime){
    6268:	80 91 52 09 	lds	r24, 0x0952
    626c:	90 91 53 09 	lds	r25, 0x0953
    6270:	20 91 58 09 	lds	r18, 0x0958
    6274:	30 91 59 09 	lds	r19, 0x0959
    6278:	82 17       	cp	r24, r18
    627a:	93 07       	cpc	r25, r19
    627c:	09 f0       	breq	.+2      	; 0x6280 <ProcessMusic+0xf4>
    627e:	b9 c0       	rjmp	.+370    	; 0x63f2 <ProcessMusic+0x266>

				c1=pgm_read_byte(songPos++);
    6280:	20 91 5b 09 	lds	r18, 0x095B
    6284:	30 91 5c 09 	lds	r19, 0x095C
    6288:	b9 01       	movw	r22, r18
    628a:	6f 5f       	subi	r22, 0xFF	; 255
    628c:	7f 4f       	sbci	r23, 0xFF	; 255
    628e:	70 93 5c 09 	sts	0x095C, r23
    6292:	60 93 5b 09 	sts	0x095B, r22
    6296:	f9 01       	movw	r30, r18
    6298:	44 91       	lpm	r20, Z
			
				if(c1==0xff){
    629a:	4f 3f       	cpi	r20, 0xFF	; 255
    629c:	79 f5       	brne	.+94     	; 0x62fc <ProcessMusic+0x170>
					//META data type event
					c1=pgm_read_byte(songPos++);
    629e:	a9 01       	movw	r20, r18
    62a0:	4e 5f       	subi	r20, 0xFE	; 254
    62a2:	5f 4f       	sbci	r21, 0xFF	; 255
    62a4:	50 93 5c 09 	sts	0x095C, r21
    62a8:	40 93 5b 09 	sts	0x095B, r20
    62ac:	fb 01       	movw	r30, r22
    62ae:	64 91       	lpm	r22, Z

				
					if(c1==0x2f){ //end of song
    62b0:	6f 32       	cpi	r22, 0x2F	; 47
    62b2:	19 f4       	brne	.+6      	; 0x62ba <ProcessMusic+0x12e>
						playSong=false;
    62b4:	10 92 b6 08 	sts	0x08B6, r1
						break;	
    62b8:	9c c0       	rjmp	.+312    	; 0x63f2 <ProcessMusic+0x266>
					}else if(c1==0x6){ //marker
    62ba:	66 30       	cpi	r22, 0x06	; 6
    62bc:	09 f0       	breq	.+2      	; 0x62c0 <ProcessMusic+0x134>
    62be:	8c c0       	rjmp	.+280    	; 0x63d8 <ProcessMusic+0x24c>
						c1=pgm_read_byte(songPos++); //read len
    62c0:	fa 01       	movw	r30, r20
    62c2:	44 91       	lpm	r20, Z
						c2=pgm_read_byte(songPos++); //read data
    62c4:	c9 01       	movw	r24, r18
    62c6:	04 96       	adiw	r24, 0x04	; 4
    62c8:	90 93 5c 09 	sts	0x095C, r25
    62cc:	80 93 5b 09 	sts	0x095B, r24
				
					if(c1==0x2f){ //end of song
						playSong=false;
						break;	
					}else if(c1==0x6){ //marker
						c1=pgm_read_byte(songPos++); //read len
    62d0:	f9 01       	movw	r30, r18
    62d2:	33 96       	adiw	r30, 0x03	; 3
						c2=pgm_read_byte(songPos++); //read data
    62d4:	e4 91       	lpm	r30, Z
						if(c2=='S'){ //loop start
    62d6:	e3 35       	cpi	r30, 0x53	; 83
    62d8:	29 f4       	brne	.+10     	; 0x62e4 <ProcessMusic+0x158>
							loopStart=songPos;
    62da:	90 93 5e 09 	sts	0x095E, r25
    62de:	80 93 5d 09 	sts	0x095D, r24
    62e2:	7a c0       	rjmp	.+244    	; 0x63d8 <ProcessMusic+0x24c>
						}else if(c2=='E'){//loop end
    62e4:	e5 34       	cpi	r30, 0x45	; 69
    62e6:	09 f0       	breq	.+2      	; 0x62ea <ProcessMusic+0x15e>
    62e8:	77 c0       	rjmp	.+238    	; 0x63d8 <ProcessMusic+0x24c>
							songPos=loopStart;
    62ea:	80 91 5d 09 	lds	r24, 0x095D
    62ee:	90 91 5e 09 	lds	r25, 0x095E
    62f2:	90 93 5c 09 	sts	0x095C, r25
    62f6:	80 93 5b 09 	sts	0x095B, r24
    62fa:	6e c0       	rjmp	.+220    	; 0x63d8 <ProcessMusic+0x24c>
					}
				

				}else{

					if(c1&0x80) lastStatus=c1;					
    62fc:	47 fd       	sbrc	r20, 7
    62fe:	40 93 56 09 	sts	0x0956, r20
					channel=lastStatus&0x0f;
    6302:	90 91 56 09 	lds	r25, 0x0956
    6306:	89 2f       	mov	r24, r25
    6308:	8f 70       	andi	r24, 0x0F	; 15
				
					//get next data byte
					//Note: maybe we should not advance the cursor
					//in case we receive an unsupported command				
					if(c1&0x80) c1=pgm_read_byte(songPos++); 
    630a:	47 ff       	sbrs	r20, 7
    630c:	08 c0       	rjmp	.+16     	; 0x631e <ProcessMusic+0x192>
    630e:	2e 5f       	subi	r18, 0xFE	; 254
    6310:	3f 4f       	sbci	r19, 0xFF	; 255
    6312:	30 93 5c 09 	sts	0x095C, r19
    6316:	20 93 5b 09 	sts	0x095B, r18
    631a:	fb 01       	movw	r30, r22
    631c:	44 91       	lpm	r20, Z

					switch(lastStatus&0xf0){
    631e:	90 7f       	andi	r25, 0xF0	; 240
    6320:	90 3b       	cpi	r25, 0xB0	; 176
    6322:	e1 f0       	breq	.+56     	; 0x635c <ProcessMusic+0x1d0>
    6324:	90 3c       	cpi	r25, 0xC0	; 192
    6326:	09 f4       	brne	.+2      	; 0x632a <ProcessMusic+0x19e>
    6328:	51 c0       	rjmp	.+162    	; 0x63cc <ProcessMusic+0x240>
    632a:	90 39       	cpi	r25, 0x90	; 144
    632c:	09 f0       	breq	.+2      	; 0x6330 <ProcessMusic+0x1a4>
    632e:	54 c0       	rjmp	.+168    	; 0x63d8 <ProcessMusic+0x24c>

						//note-on
						case 0x90:
							//c1 = note						
							c2=pgm_read_byte(songPos++)<<1; //get volume
    6330:	e0 91 5b 09 	lds	r30, 0x095B
    6334:	f0 91 5c 09 	lds	r31, 0x095C
    6338:	9f 01       	movw	r18, r30
    633a:	2f 5f       	subi	r18, 0xFF	; 255
    633c:	3f 4f       	sbci	r19, 0xFF	; 255
    633e:	30 93 5c 09 	sts	0x095C, r19
    6342:	20 93 5b 09 	sts	0x095B, r18
    6346:	24 91       	lpm	r18, Z
    6348:	22 0f       	add	r18, r18
						
							if(tracks[channel].flags|TRACK_FLAGS_ALLOCATED){ //allocated==true
								TriggerNote(channel,tracks[channel].patchNo,c1,c2);
    634a:	f8 9e       	mul	r15, r24
    634c:	f0 01       	movw	r30, r0
    634e:	11 24       	eor	r1, r1
    6350:	e1 52       	subi	r30, 0x21	; 33
    6352:	f7 4f       	sbci	r31, 0xF7	; 247
    6354:	60 89       	ldd	r22, Z+16	; 0x10
    6356:	0e 94 86 30 	call	0x610c	; 0x610c <TriggerNote>
    635a:	3e c0       	rjmp	.+124    	; 0x63d8 <ProcessMusic+0x24c>
							break;

						//controllers
						case 0xb0:
							///c1 = controller #
							c2=pgm_read_byte(songPos++); //get controller value
    635c:	e0 91 5b 09 	lds	r30, 0x095B
    6360:	f0 91 5c 09 	lds	r31, 0x095C
    6364:	9f 01       	movw	r18, r30
    6366:	2f 5f       	subi	r18, 0xFF	; 255
    6368:	3f 4f       	sbci	r19, 0xFF	; 255
    636a:	30 93 5c 09 	sts	0x095C, r19
    636e:	20 93 5b 09 	sts	0x095B, r18
    6372:	e4 91       	lpm	r30, Z
						
							if(c1==CONTROLER_VOL){
    6374:	47 30       	cpi	r20, 0x07	; 7
    6376:	49 f4       	brne	.+18     	; 0x638a <ProcessMusic+0x1fe>
								tracks[channel].trackVol=c2<<1;
    6378:	f8 9e       	mul	r15, r24
    637a:	d0 01       	movw	r26, r0
    637c:	11 24       	eor	r1, r1
    637e:	a1 52       	subi	r26, 0x21	; 33
    6380:	b7 4f       	sbci	r27, 0xF7	; 247
    6382:	ee 0f       	add	r30, r30
    6384:	1c 96       	adiw	r26, 0x0c	; 12
    6386:	ec 93       	st	X, r30
    6388:	27 c0       	rjmp	.+78     	; 0x63d8 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_EXPRESSION){
    638a:	4b 30       	cpi	r20, 0x0B	; 11
    638c:	49 f4       	brne	.+18     	; 0x63a0 <ProcessMusic+0x214>
								tracks[channel].expressionVol=c2<<1;
    638e:	f8 9e       	mul	r15, r24
    6390:	d0 01       	movw	r26, r0
    6392:	11 24       	eor	r1, r1
    6394:	a1 52       	subi	r26, 0x21	; 33
    6396:	b7 4f       	sbci	r27, 0xF7	; 247
    6398:	ee 0f       	add	r30, r30
    639a:	13 96       	adiw	r26, 0x03	; 3
    639c:	ec 93       	st	X, r30
    639e:	1c c0       	rjmp	.+56     	; 0x63d8 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO){
    63a0:	4c 35       	cpi	r20, 0x5C	; 92
    63a2:	49 f4       	brne	.+18     	; 0x63b6 <ProcessMusic+0x22a>
								tracks[channel].tremoloLevel=c2<<1;
    63a4:	f8 9e       	mul	r15, r24
    63a6:	d0 01       	movw	r26, r0
    63a8:	11 24       	eor	r1, r1
    63aa:	a1 52       	subi	r26, 0x21	; 33
    63ac:	b7 4f       	sbci	r27, 0xF7	; 247
    63ae:	ee 0f       	add	r30, r30
    63b0:	1a 96       	adiw	r26, 0x0a	; 10
    63b2:	ec 93       	st	X, r30
    63b4:	11 c0       	rjmp	.+34     	; 0x63d8 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO_RATE){
    63b6:	44 36       	cpi	r20, 0x64	; 100
    63b8:	79 f4       	brne	.+30     	; 0x63d8 <ProcessMusic+0x24c>
								tracks[channel].tremoloRate=c2<<1;
    63ba:	f8 9e       	mul	r15, r24
    63bc:	d0 01       	movw	r26, r0
    63be:	11 24       	eor	r1, r1
    63c0:	a1 52       	subi	r26, 0x21	; 33
    63c2:	b7 4f       	sbci	r27, 0xF7	; 247
    63c4:	ee 0f       	add	r30, r30
    63c6:	1b 96       	adiw	r26, 0x0b	; 11
    63c8:	ec 93       	st	X, r30
    63ca:	06 c0       	rjmp	.+12     	; 0x63d8 <ProcessMusic+0x24c>
							break;

						//program change
						case 0xc0:
							// c1 = patch #						
							tracks[channel].patchNo=c1;
    63cc:	f8 9e       	mul	r15, r24
    63ce:	f0 01       	movw	r30, r0
    63d0:	11 24       	eor	r1, r1
    63d2:	e1 52       	subi	r30, 0x21	; 33
    63d4:	f7 4f       	sbci	r31, 0xF7	; 247
    63d6:	40 8b       	std	Z+16, r20	; 0x10


				}//end if(c1==0xff)

				//read next delta time
				nextDeltaTime=ReadVarLen(&songPos);			
    63d8:	8b e5       	ldi	r24, 0x5B	; 91
    63da:	99 e0       	ldi	r25, 0x09	; 9
    63dc:	0e 94 8a 2f 	call	0x5f14	; 0x5f14 <ReadVarLen>
    63e0:	90 93 59 09 	sts	0x0959, r25
    63e4:	80 93 58 09 	sts	0x0958, r24
				currDeltaTime=0;
    63e8:	10 92 53 09 	sts	0x0953, r1
    63ec:	10 92 52 09 	sts	0x0952, r1
    63f0:	3b cf       	rjmp	.-394    	; 0x6268 <ProcessMusic+0xdc>
					}
				#endif

			}//end while
		
			currDeltaTime++;
    63f2:	01 96       	adiw	r24, 0x01	; 1
    63f4:	90 93 53 09 	sts	0x0953, r25
    63f8:	80 93 52 09 	sts	0x0952, r24
    63fc:	98 ee       	ldi	r25, 0xE8	; 232
    63fe:	a9 2e       	mov	r10, r25
    6400:	98 e0       	ldi	r25, 0x08	; 8
    6402:	b9 2e       	mov	r11, r25
    6404:	22 ef       	ldi	r18, 0xF2	; 242
    6406:	c2 2e       	mov	r12, r18
    6408:	28 e0       	ldi	r18, 0x08	; 8
    640a:	d2 2e       	mov	r13, r18
    640c:	33 ef       	ldi	r19, 0xF3	; 243
    640e:	e3 2e       	mov	r14, r19
    6410:	38 e0       	ldi	r19, 0x08	; 8
    6412:	f3 2e       	mov	r15, r19
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    6414:	66 24       	eor	r6, r6
    6416:	6a 94       	dec	r6
    6418:	71 2c       	mov	r7, r1
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//process patch command stream
		if((track->flags & TRACK_FLAGS_PLAYING) && (track->patchCommandStreamPos!=NULL) && ((track->flags & TRACK_FLAGS_HOLD_ENV)==0)){
    641a:	88 81       	ld	r24, Y
    641c:	85 ff       	sbrs	r24, 5
    641e:	42 c0       	rjmp	.+132    	; 0x64a4 <ProcessMusic+0x318>
    6420:	2d 89       	ldd	r18, Y+21	; 0x15
    6422:	3e 89       	ldd	r19, Y+22	; 0x16
    6424:	23 2b       	or	r18, r19
    6426:	09 f4       	brne	.+2      	; 0x642a <ProcessMusic+0x29e>
    6428:	3d c0       	rjmp	.+122    	; 0x64a4 <ProcessMusic+0x318>
    642a:	86 fd       	sbrc	r24, 6
    642c:	3b c0       	rjmp	.+118    	; 0x64a4 <ProcessMusic+0x318>
    642e:	47 01       	movw	r8, r14
    6430:	f2 e0       	ldi	r31, 0x02	; 2
    6432:	8f 1a       	sub	r8, r31
    6434:	91 08       	sbc	r9, r1

			//process all simultaneous events
			while(track->patchCurrDeltaTime==track->patchNextDeltaTime){
    6436:	d6 01       	movw	r26, r12
    6438:	9c 91       	ld	r25, X
    643a:	f4 01       	movw	r30, r8
    643c:	80 81       	ld	r24, Z
    643e:	98 13       	cpse	r25, r24
    6440:	2e c0       	rjmp	.+92     	; 0x649e <ProcessMusic+0x312>

				c1=pgm_read_byte(track->patchCommandStreamPos++);
    6442:	ed 89       	ldd	r30, Y+21	; 0x15
    6444:	fe 89       	ldd	r31, Y+22	; 0x16
    6446:	bf 01       	movw	r22, r30
    6448:	6f 5f       	subi	r22, 0xFF	; 255
    644a:	7f 4f       	sbci	r23, 0xFF	; 255
    644c:	7e 8b       	std	Y+22, r23	; 0x16
    644e:	6d 8b       	std	Y+21, r22	; 0x15
    6450:	84 91       	lpm	r24, Z
				if(c1==PATCH_END){
    6452:	8f 3f       	cpi	r24, 0xFF	; 255
    6454:	31 f4       	brne	.+12     	; 0x6462 <ProcessMusic+0x2d6>
					//end of stream!
					track->flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    6456:	88 81       	ld	r24, Y
    6458:	8f 77       	andi	r24, 0x7F	; 127
    645a:	88 83       	st	Y, r24
					track->patchCommandStreamPos=NULL;
    645c:	1e 8a       	std	Y+22, r1	; 0x16
    645e:	1d 8a       	std	Y+21, r1	; 0x15
					break;
    6460:	1e c0       	rjmp	.+60     	; 0x649e <ProcessMusic+0x312>

				}else{
					c2=pgm_read_byte(track->patchCommandStreamPos++);
    6462:	9f 01       	movw	r18, r30
    6464:	2e 5f       	subi	r18, 0xFE	; 254
    6466:	3f 4f       	sbci	r19, 0xFF	; 255
    6468:	3e 8b       	std	Y+22, r19	; 0x16
    646a:	2d 8b       	std	Y+21, r18	; 0x15
    646c:	fb 01       	movw	r30, r22
    646e:	64 91       	lpm	r22, Z
					//invoke patch command function
					((PatchCommand)pgm_read_word(&patchCommands[c1]))(track,c2);
    6470:	e8 2f       	mov	r30, r24
    6472:	f0 e0       	ldi	r31, 0x00	; 0
    6474:	ee 0f       	add	r30, r30
    6476:	ff 1f       	adc	r31, r31
    6478:	e2 54       	subi	r30, 0x42	; 66
    647a:	ff 4f       	sbci	r31, 0xFF	; 255
    647c:	25 91       	lpm	r18, Z+
    647e:	34 91       	lpm	r19, Z
    6480:	ce 01       	movw	r24, r28
    6482:	f9 01       	movw	r30, r18
    6484:	09 95       	icall
				}

				//read next delta time
				track->patchNextDeltaTime=pgm_read_byte(track->patchCommandStreamPos++);
    6486:	ed 89       	ldd	r30, Y+21	; 0x15
    6488:	fe 89       	ldd	r31, Y+22	; 0x16
    648a:	cf 01       	movw	r24, r30
    648c:	01 96       	adiw	r24, 0x01	; 1
    648e:	9e 8b       	std	Y+22, r25	; 0x16
    6490:	8d 8b       	std	Y+21, r24	; 0x15
    6492:	e4 91       	lpm	r30, Z
    6494:	d4 01       	movw	r26, r8
    6496:	ec 93       	st	X, r30
				track->patchCurrDeltaTime=0;
    6498:	f6 01       	movw	r30, r12
    649a:	10 82       	st	Z, r1
    649c:	cc cf       	rjmp	.-104    	; 0x6436 <ProcessMusic+0x2aa>
			}

			track->patchCurrDeltaTime++;
    649e:	9f 5f       	subi	r25, 0xFF	; 255
    64a0:	d6 01       	movw	r26, r12
    64a2:	9c 93       	st	X, r25
		}

		if(track->flags & TRACK_FLAGS_PLAYING){
    64a4:	98 81       	ld	r25, Y
    64a6:	95 ff       	sbrs	r25, 5
    64a8:	6c c0       	rjmp	.+216    	; 0x6582 <ProcessMusic+0x3f6>

			if(track->patchPlayingTime<0xff){
    64aa:	f7 01       	movw	r30, r14
    64ac:	80 81       	ld	r24, Z
    64ae:	8f 3f       	cpi	r24, 0xFF	; 255
    64b0:	11 f0       	breq	.+4      	; 0x64b6 <ProcessMusic+0x32a>
				track->patchPlayingTime++;
    64b2:	8f 5f       	subi	r24, 0xFF	; 255
    64b4:	80 83       	st	Z, r24
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
    64b6:	97 fd       	sbrc	r25, 7
    64b8:	04 c0       	rjmp	.+8      	; 0x64c2 <ProcessMusic+0x336>
    64ba:	f7 01       	movw	r30, r14
    64bc:	38 97       	sbiw	r30, 0x08	; 8
				//if an FX, use full track volume.
				trackVol=0xff;
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
    64be:	90 81       	ld	r25, Z
    64c0:	01 c0       	rjmp	.+2      	; 0x64c4 <ProcessMusic+0x338>
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
				//if an FX, use full track volume.
				trackVol=0xff;
    64c2:	9f ef       	ldi	r25, 0xFF	; 255
    64c4:	f7 01       	movw	r30, r14
    64c6:	37 97       	sbiw	r30, 0x07	; 7
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
			}
			if(track->noteVol!=0 && track->envelopeVol!=0 && trackVol!=0 && masterVolume!=0){
    64c8:	80 81       	ld	r24, Z
    64ca:	88 23       	and	r24, r24
    64cc:	09 f4       	brne	.+2      	; 0x64d0 <ProcessMusic+0x344>
    64ce:	4e c0       	rjmp	.+156    	; 0x656c <ProcessMusic+0x3e0>
    64d0:	31 96       	adiw	r30, 0x01	; 1
    64d2:	50 81       	ld	r21, Z
    64d4:	55 23       	and	r21, r21
    64d6:	09 f4       	brne	.+2      	; 0x64da <ProcessMusic+0x34e>
    64d8:	49 c0       	rjmp	.+146    	; 0x656c <ProcessMusic+0x3e0>
    64da:	99 23       	and	r25, r25
    64dc:	09 f4       	brne	.+2      	; 0x64e0 <ProcessMusic+0x354>
    64de:	46 c0       	rjmp	.+140    	; 0x656c <ProcessMusic+0x3e0>
    64e0:	40 91 57 09 	lds	r20, 0x0957
    64e4:	44 23       	and	r20, r20
    64e6:	09 f4       	brne	.+2      	; 0x64ea <ProcessMusic+0x35e>
    64e8:	41 c0       	rjmp	.+130    	; 0x656c <ProcessMusic+0x3e0>

				uVol=(track->noteVol*trackVol)+0x100;
    64ea:	89 9f       	mul	r24, r25
    64ec:	c0 01       	movw	r24, r0
    64ee:	11 24       	eor	r1, r1
    64f0:	93 95       	inc	r25
				uVol>>=8;
    64f2:	89 2f       	mov	r24, r25
    64f4:	99 27       	eor	r25, r25
				
				uVol=(uVol*track->envelopeVol)+0x100;
    64f6:	58 9f       	mul	r21, r24
    64f8:	90 01       	movw	r18, r0
    64fa:	59 9f       	mul	r21, r25
    64fc:	30 0d       	add	r19, r0
    64fe:	11 24       	eor	r1, r1
    6500:	c9 01       	movw	r24, r18
    6502:	93 95       	inc	r25
				uVol>>=8;
    6504:	89 2f       	mov	r24, r25
    6506:	99 27       	eor	r25, r25
    6508:	3b 97       	sbiw	r30, 0x0b	; 11
				
				#if MUSIC_ENGINE == MIDI
					uVol=(uVol*track->expressionVol)+0x100;
    650a:	50 81       	ld	r21, Z
    650c:	58 9f       	mul	r21, r24
    650e:	90 01       	movw	r18, r0
    6510:	59 9f       	mul	r21, r25
    6512:	30 0d       	add	r19, r0
    6514:	11 24       	eor	r1, r1
    6516:	33 95       	inc	r19
					uVol>>=8;
    6518:	23 2f       	mov	r18, r19
    651a:	33 27       	eor	r19, r19
				#endif
				
				uVol=(uVol*masterVolume)+0x100;
    651c:	42 9f       	mul	r20, r18
    651e:	c0 01       	movw	r24, r0
    6520:	43 9f       	mul	r20, r19
    6522:	90 0d       	add	r25, r0
    6524:	11 24       	eor	r1, r1
    6526:	93 95       	inc	r25
				uVol>>=8;
    6528:	89 2f       	mov	r24, r25
    652a:	99 27       	eor	r25, r25
    652c:	37 96       	adiw	r30, 0x07	; 7

				if(track->tremoloLevel>0){					
    652e:	20 81       	ld	r18, Z
    6530:	22 23       	and	r18, r18
    6532:	f1 f0       	breq	.+60     	; 0x6570 <ProcessMusic+0x3e4>
					tmp=pgm_read_byte(&(waves[track->tremoloPos]));
    6534:	d5 01       	movw	r26, r10
    6536:	ec 91       	ld	r30, X
    6538:	f0 e0       	ldi	r31, 0x00	; 0
    653a:	e0 50       	subi	r30, 0x00	; 0
    653c:	f7 49       	sbci	r31, 0x97	; 151
    653e:	e4 91       	lpm	r30, Z
					tmp-=128; //convert to unsigned
    6540:	e0 58       	subi	r30, 0x80	; 128

					tVol=(track->tremoloLevel*tmp)+0x100;
    6542:	2e 9f       	mul	r18, r30
    6544:	f0 01       	movw	r30, r0
    6546:	11 24       	eor	r1, r1
    6548:	f3 95       	inc	r31
					tVol>>=8;
    654a:	ef 2f       	mov	r30, r31
    654c:	ff 27       	eor	r31, r31
					
					uVol=(uVol*(0xff-tVol))+0x100;
    654e:	a3 01       	movw	r20, r6
    6550:	4e 1b       	sub	r20, r30
    6552:	5f 0b       	sbc	r21, r31
    6554:	48 9f       	mul	r20, r24
    6556:	90 01       	movw	r18, r0
    6558:	49 9f       	mul	r20, r25
    655a:	30 0d       	add	r19, r0
    655c:	58 9f       	mul	r21, r24
    655e:	30 0d       	add	r19, r0
    6560:	11 24       	eor	r1, r1
    6562:	c9 01       	movw	r24, r18
    6564:	93 95       	inc	r25
					uVol>>=8;
    6566:	89 2f       	mov	r24, r25
    6568:	99 27       	eor	r25, r25
    656a:	02 c0       	rjmp	.+4      	; 0x6570 <ProcessMusic+0x3e4>
				}

			
			}else{
				uVol=0;
    656c:	80 e0       	ldi	r24, 0x00	; 0
    656e:	90 e0       	ldi	r25, 0x00	; 0
			}	

			track->tremoloPos+=track->tremoloRate;	
    6570:	f5 01       	movw	r30, r10
    6572:	30 81       	ld	r19, Z
    6574:	f7 01       	movw	r30, r14
    6576:	39 97       	sbiw	r30, 0x09	; 9
    6578:	20 81       	ld	r18, Z
    657a:	23 0f       	add	r18, r19
    657c:	d5 01       	movw	r26, r10
    657e:	2c 93       	st	X, r18
    6580:	02 c0       	rjmp	.+4      	; 0x6586 <ProcessMusic+0x3fa>

		}else{
			uVol=0;
    6582:	80 e0       	ldi	r24, 0x00	; 0
    6584:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
    6586:	f8 01       	movw	r30, r16
    6588:	80 83       	st	Z, r24
    658a:	67 96       	adiw	r28, 0x17	; 23
    658c:	0a 5f       	subi	r16, 0xFA	; 250
    658e:	1f 4f       	sbci	r17, 0xFF	; 255
    6590:	f7 e1       	ldi	r31, 0x17	; 23
    6592:	af 0e       	add	r10, r31
    6594:	b1 1c       	adc	r11, r1
    6596:	87 e1       	ldi	r24, 0x17	; 23
    6598:	c8 0e       	add	r12, r24
    659a:	d1 1c       	adc	r13, r1
    659c:	97 e1       	ldi	r25, 0x17	; 23
    659e:	e9 0e       	add	r14, r25
    65a0:	f1 1c       	adc	r15, r1


	//
	// Process patches command streams & final volume
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    65a2:	a9 e0       	ldi	r26, 0x09	; 9
    65a4:	c2 35       	cpi	r28, 0x52	; 82
    65a6:	da 07       	cpc	r29, r26
    65a8:	09 f0       	breq	.+2      	; 0x65ac <ProcessMusic+0x420>
    65aa:	37 cf       	rjmp	.-402    	; 0x641a <ProcessMusic+0x28e>
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
	}
	
}
    65ac:	df 91       	pop	r29
    65ae:	cf 91       	pop	r28
    65b0:	1f 91       	pop	r17
    65b2:	0f 91       	pop	r16
    65b4:	ff 90       	pop	r15
    65b6:	ef 90       	pop	r14
    65b8:	df 90       	pop	r13
    65ba:	cf 90       	pop	r12
    65bc:	bf 90       	pop	r11
    65be:	af 90       	pop	r10
    65c0:	9f 90       	pop	r9
    65c2:	8f 90       	pop	r8
    65c4:	7f 90       	pop	r7
    65c6:	6f 90       	pop	r6
    65c8:	08 95       	ret

000065ca <SetMasterVolume>:
}



void SetMasterVolume(unsigned char vol){
	masterVolume=vol;
    65ca:	80 93 57 09 	sts	0x0957, r24
    65ce:	08 95       	ret

000065d0 <SetMixerNote>:
; r22: -MIDI note, 69=A5(440) for waves channels (0,1,2)
;      -Noise params for channel 3
;***********************
.section .text.SetMixerNote
SetMixerNote:
	clr r25
    65d0:	99 27       	eor	r25, r25
	clr r23
    65d2:	77 27       	eor	r23, r23
	#if SOUND_MIXER == MIXER_TYPE_VSYNC
		cpi r24,3
		brlo set_note_waves
		ret		
	#else
		cpi r24,3
    65d4:	83 30       	cpi	r24, 0x03	; 3
		brne set_note_waves		
    65d6:	09 f4       	brne	.+2      	; 0x65da <set_note_waves>
		ret
    65d8:	08 95       	ret

000065da <set_note_waves>:
	#endif
#endif

set_note_waves:
	;get step for note
	ldi ZL,lo8(steptable)
    65da:	e8 e0       	ldi	r30, 0x08	; 8
	ldi ZH,hi8(steptable)
    65dc:	f7 e6       	ldi	r31, 0x67	; 103
	lsl r22
    65de:	66 0f       	add	r22, r22
	rol r23
    65e0:	77 1f       	adc	r23, r23
	add ZL,r22
    65e2:	e6 0f       	add	r30, r22
	adc ZH,r23	
    65e4:	f7 1f       	adc	r31, r23

	lpm r26,Z+
    65e6:	a5 91       	lpm	r26, Z+
	lpm r27,Z
    65e8:	b4 91       	lpm	r27, Z

	ldi ZL,lo8(mixerStruct)
    65ea:	e8 eb       	ldi	r30, 0xB8	; 184
	ldi ZH,hi8(mixerStruct)
    65ec:	f8 e0       	ldi	r31, 0x08	; 8
	ldi r18,CHANNEL_STRUCT_SIZE
    65ee:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24
    65f0:	28 9f       	mul	r18, r24
	add ZL,r0
    65f2:	e0 0d       	add	r30, r0
	adc ZH,r1
    65f4:	f1 1d       	adc	r31, r1
	
	std Z+step_lo,r26
    65f6:	a1 83       	std	Z+1, r26	; 0x01
	std Z+step_hi,r27
    65f8:	b2 83       	std	Z+2, r27	; 0x02
	
	clr r1
    65fa:	11 24       	eor	r1, r1
	

	ret
    65fc:	08 95       	ret

000065fe <SetMixerWave>:
;         Noise channel: 0xfe=7 bit lfsr, 0xff=15 bit lfsr
;                 
;***********************
.section .text.SetMixerWave
SetMixerWave:
	clr r25
    65fe:	99 27       	eor	r25, r25
	clr r23
    6600:	77 27       	eor	r23, r23

	ldi ZL,lo8(mixerStruct)
    6602:	e8 eb       	ldi	r30, 0xB8	; 184
	ldi ZH,hi8(mixerStruct)
    6604:	f8 e0       	ldi	r31, 0x08	; 8
	ldi r18,CHANNEL_STRUCT_SIZE
    6606:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24	
    6608:	28 9f       	mul	r18, r24
	add ZL,r0
    660a:	e0 0d       	add	r30, r0
	adc ZH,r1
    660c:	f1 1d       	adc	r31, r1

#if MIXER_CHAN4_TYPE == 0
	cpi r22,0xfe	;7bit lfsr
    660e:	6e 3f       	cpi	r22, 0xFE	; 254
	brne smw1
    6610:	31 f4       	brne	.+12     	; 0x661e <smw1>
	lds r22,tr4_params
    6612:	60 91 cb 08 	lds	r22, 0x08CB
	andi r22,0xfe;
    6616:	6e 7f       	andi	r22, 0xFE	; 254
	sts tr4_params,r22
    6618:	60 93 cb 08 	sts	0x08CB, r22
	rjmp esmw	
    661c:	0b c0       	rjmp	.+22     	; 0x6634 <esmw>

0000661e <smw1>:
smw1:
	cpi r22,0xff	;15bit lfsr
    661e:	6f 3f       	cpi	r22, 0xFF	; 255
	brne smw2
    6620:	31 f4       	brne	.+12     	; 0x662e <smw2>
	lds r22,tr4_params
    6622:	60 91 cb 08 	lds	r22, 0x08CB
	ori r22,0xfe;
    6626:	6e 6f       	ori	r22, 0xFE	; 254
	sts tr4_params,r22	
    6628:	60 93 cb 08 	sts	0x08CB, r22
	rjmp esmw
    662c:	03 c0       	rjmp	.+6      	; 0x6634 <esmw>

0000662e <smw2>:
smw2:
#endif

	ldi r23,hi8(waves)
    662e:	79 e6       	ldi	r23, 0x69	; 105
	add r23,r22
    6630:	76 0f       	add	r23, r22
	std Z+samplepos_hi,r23 ;store path No
    6632:	75 83       	std	Z+5, r23	; 0x05

00006634 <esmw>:

esmw:
	clr r1	
    6634:	11 24       	eor	r1, r1
	ret
    6636:	08 95       	ret
	...

00006700 <DisableSoundEngine>:
; no CPU cycles are consumed.
; C-callable
;*****************************
.section .text.DisableSoundEngine
DisableSoundEngine:	
	ldi r24,0
    6700:	80 e0       	ldi	r24, 0x00	; 0
	sts sound_enabled,r24
    6702:	80 93 b7 08 	sts	0x08B7, r24
	ret
    6706:	08 95       	ret

00006708 <steptable>:
    6708:	22 00       	.word	0x0022	; ????
    670a:	24 00       	.word	0x0024	; ????
    670c:	26 00       	.word	0x0026	; ????
    670e:	28 00       	.word	0x0028	; ????
    6710:	2b 00       	.word	0x002b	; ????
    6712:	2d 00       	.word	0x002d	; ????
    6714:	30 00       	.word	0x0030	; ????
    6716:	33 00       	.word	0x0033	; ????
    6718:	36 00       	.word	0x0036	; ????
    671a:	39 00       	.word	0x0039	; ????
    671c:	3d 00       	.word	0x003d	; ????
    671e:	40 00       	.word	0x0040	; ????
    6720:	44 00       	.word	0x0044	; ????
    6722:	48 00       	.word	0x0048	; ????
    6724:	4c 00       	.word	0x004c	; ????
    6726:	51 00       	.word	0x0051	; ????
    6728:	56 00       	.word	0x0056	; ????
    672a:	5b 00       	.word	0x005b	; ????
    672c:	60 00       	.word	0x0060	; ????
    672e:	66 00       	.word	0x0066	; ????
    6730:	6c 00       	.word	0x006c	; ????
    6732:	73 00       	.word	0x0073	; ????
    6734:	79 00       	.word	0x0079	; ????
    6736:	81 00       	.word	0x0081	; ????
    6738:	88 00       	.word	0x0088	; ????
    673a:	90 00       	.word	0x0090	; ????
    673c:	99 00       	.word	0x0099	; ????
    673e:	a2 00       	.word	0x00a2	; ????
    6740:	ac 00       	.word	0x00ac	; ????
    6742:	b6 00       	.word	0x00b6	; ????
    6744:	c1 00       	.word	0x00c1	; ????
    6746:	cc 00       	.word	0x00cc	; ????
    6748:	d8 00       	.word	0x00d8	; ????
    674a:	e5 00       	.word	0x00e5	; ????
    674c:	f3 00       	.word	0x00f3	; ????
    674e:	01 01       	movw	r0, r2
    6750:	10 01       	movw	r2, r0
    6752:	21 01       	movw	r4, r2
    6754:	32 01       	movw	r6, r4
    6756:	44 01       	movw	r8, r8
    6758:	57 01       	movw	r10, r14
    675a:	6c 01       	movw	r12, r24
    675c:	81 01       	movw	r16, r2
    675e:	98 01       	movw	r18, r16
    6760:	b0 01       	movw	r22, r0
    6762:	ca 01       	movw	r24, r20
    6764:	e5 01       	movw	r28, r10
    6766:	02 02       	muls	r16, r18
    6768:	21 02       	muls	r18, r17
    676a:	41 02       	muls	r20, r17
    676c:	64 02       	muls	r22, r20
    676e:	88 02       	muls	r24, r24
    6770:	ae 02       	muls	r26, r30
    6772:	d7 02       	muls	r29, r23
    6774:	03 03       	mulsu	r16, r19
    6776:	30 03       	mulsu	r19, r16
    6778:	61 03       	mulsu	r22, r17
    677a:	94 03       	fmuls	r17, r20
    677c:	cb 03       	fmulsu	r20, r19
    677e:	05 04       	cpc	r0, r5
    6780:	42 04       	cpc	r4, r2
    6782:	83 04       	cpc	r8, r3
    6784:	c7 04       	cpc	r12, r7
    6786:	10 05       	cpc	r17, r0
    6788:	5d 05       	cpc	r21, r13
    678a:	af 05       	cpc	r26, r15
    678c:	05 06       	cpc	r0, r21
    678e:	61 06       	cpc	r6, r17
    6790:	c2 06       	cpc	r12, r18
    6792:	29 07       	cpc	r18, r25
    6794:	96 07       	cpc	r25, r22
    6796:	09 08       	sbc	r0, r9
    6798:	83 08       	sbc	r8, r3
    679a:	05 09       	sbc	r16, r5
    679c:	8e 09       	sbc	r24, r14
    679e:	20 0a       	sbc	r2, r16
    67a0:	ba 0a       	sbc	r11, r26
    67a2:	5d 0b       	sbc	r21, r29
    67a4:	0a 0c       	add	r0, r10
    67a6:	c1 0c       	add	r12, r1
    67a8:	84 0d       	add	r24, r4
    67aa:	51 0e       	add	r5, r17
    67ac:	2b 0f       	add	r18, r27
    67ae:	12 10       	cpse	r1, r2
    67b0:	07 11       	cpse	r16, r7
    67b2:	0a 12       	cpse	r0, r26
    67b4:	1d 13       	cpse	r17, r29
    67b6:	40 14       	cp	r4, r0
    67b8:	74 15       	cp	r23, r4
    67ba:	ba 16       	cp	r11, r26
    67bc:	14 18       	sub	r1, r4
    67be:	83 19       	sub	r24, r3
    67c0:	07 1b       	sub	r16, r23
    67c2:	a3 1c       	adc	r10, r3
    67c4:	57 1e       	adc	r5, r23
    67c6:	24 20       	and	r2, r4
    67c8:	0e 22       	and	r0, r30
    67ca:	14 24       	eor	r1, r4
    67cc:	39 26       	eor	r3, r25
    67ce:	7f 28       	or	r7, r15
    67d0:	e8 2a       	or	r14, r24
    67d2:	75 2d       	mov	r23, r5
    67d4:	29 30       	cpi	r18, 0x09	; 9
    67d6:	06 33       	cpi	r16, 0x36	; 54
    67d8:	0f 36       	cpi	r16, 0x6F	; 111
    67da:	45 39       	cpi	r20, 0x95	; 149
    67dc:	ad 3c       	cpi	r26, 0xCD	; 205
    67de:	49 40       	sbci	r20, 0x09	; 9
    67e0:	1b 44       	sbci	r17, 0x4B	; 75
    67e2:	28 48       	sbci	r18, 0x88	; 136
    67e4:	73 4c       	sbci	r23, 0xC3	; 195
    67e6:	fe 50       	subi	r31, 0x0E	; 14
    67e8:	cf 55       	subi	r28, 0x5F	; 95
    67ea:	ea 5a       	subi	r30, 0xAA	; 170
    67ec:	51 60       	ori	r21, 0x01	; 1
    67ee:	0c 66       	ori	r16, 0x6C	; 108
    67f0:	1d 6c       	ori	r17, 0xCD	; 205
    67f2:	8b 72       	andi	r24, 0x2B	; 43
    67f4:	5a 79       	andi	r21, 0x9A	; 154
    67f6:	92 80       	ldd	r9, Z+2	; 0x02
    67f8:	37 88       	ldd	r3, Z+23	; 0x17
    67fa:	50 90 e5 98 	lds	r5, 0x98E5
    67fe:	fd a1       	ldd	r31, Y+37	; 0x25
    6800:	9f ab       	std	Y+55, r25	; 0x37
    6802:	d3 b5       	in	r29, 0x23	; 35
    6804:	a3 c0       	rjmp	.+326    	; 0x694c <waves+0x4c>
	...

00006900 <waves>:
    6900:	00 03       	mulsu	r16, r16
    6902:	06 09       	sbc	r16, r6
    6904:	0c 10       	cpse	r0, r12
    6906:	13 16       	cp	r1, r19
    6908:	19 1c       	adc	r1, r9
    690a:	1f 22       	and	r1, r31
    690c:	25 28       	or	r2, r5
    690e:	2b 2e       	mov	r2, r27
    6910:	31 33       	cpi	r19, 0x31	; 49
    6912:	36 39       	cpi	r19, 0x96	; 150
    6914:	3c 3f       	cpi	r19, 0xFC	; 252
    6916:	41 44       	sbci	r20, 0x41	; 65
    6918:	47 49       	sbci	r20, 0x97	; 151
    691a:	4c 4e       	sbci	r20, 0xEC	; 236
    691c:	51 53       	subi	r21, 0x31	; 49
    691e:	55 58       	subi	r21, 0x85	; 133
    6920:	5a 5c       	subi	r21, 0xCA	; 202
    6922:	5e 60       	ori	r21, 0x0E	; 14
    6924:	62 64       	ori	r22, 0x42	; 66
    6926:	66 68       	ori	r22, 0x86	; 134
    6928:	6a 6b       	ori	r22, 0xBA	; 186
    692a:	6d 6f       	ori	r22, 0xFD	; 253
    692c:	70 71       	andi	r23, 0x10	; 16
    692e:	73 74       	andi	r23, 0x43	; 67
    6930:	75 76       	andi	r23, 0x65	; 101
    6932:	78 79       	andi	r23, 0x98	; 152
    6934:	7a 7a       	andi	r23, 0xAA	; 170
    6936:	7b 7c       	andi	r23, 0xCB	; 203
    6938:	7d 7d       	andi	r23, 0xDD	; 221
    693a:	7e 7e       	andi	r23, 0xEE	; 238
    693c:	7e 7f       	andi	r23, 0xFE	; 254
    693e:	7f 7f       	andi	r23, 0xFF	; 255
    6940:	7f 7f       	andi	r23, 0xFF	; 255
    6942:	7f 7f       	andi	r23, 0xFF	; 255
    6944:	7e 7e       	andi	r23, 0xEE	; 238
    6946:	7e 7d       	andi	r23, 0xDE	; 222
    6948:	7d 7c       	andi	r23, 0xCD	; 205
    694a:	7b 7a       	andi	r23, 0xAB	; 171
    694c:	7a 79       	andi	r23, 0x9A	; 154
    694e:	78 76       	andi	r23, 0x68	; 104
    6950:	75 74       	andi	r23, 0x45	; 69
    6952:	73 71       	andi	r23, 0x13	; 19
    6954:	70 6f       	ori	r23, 0xF0	; 240
    6956:	6d 6b       	ori	r22, 0xBD	; 189
    6958:	6a 68       	ori	r22, 0x8A	; 138
    695a:	66 64       	ori	r22, 0x46	; 70
    695c:	62 60       	ori	r22, 0x02	; 2
    695e:	5e 5c       	subi	r21, 0xCE	; 206
    6960:	5a 58       	subi	r21, 0x8A	; 138
    6962:	55 53       	subi	r21, 0x35	; 53
    6964:	51 4e       	sbci	r21, 0xE1	; 225
    6966:	4c 49       	sbci	r20, 0x9C	; 156
    6968:	47 44       	sbci	r20, 0x47	; 71
    696a:	41 3f       	cpi	r20, 0xF1	; 241
    696c:	3c 39       	cpi	r19, 0x9C	; 156
    696e:	36 33       	cpi	r19, 0x36	; 54
    6970:	31 2e       	mov	r3, r17
    6972:	2b 28       	or	r2, r11
    6974:	25 22       	and	r2, r21
    6976:	1f 1c       	adc	r1, r15
    6978:	19 16       	cp	r1, r25
    697a:	13 10       	cpse	r1, r3
    697c:	0c 09       	sbc	r16, r12
    697e:	06 03       	mulsu	r16, r22
    6980:	00 fd       	sbrc	r16, 0
    6982:	fa f7       	brpl	.-2      	; 0x6982 <waves+0x82>
    6984:	f4 f0       	brlt	.+60     	; 0x69c2 <waves+0xc2>
    6986:	ed ea       	ldi	r30, 0xAD	; 173
    6988:	e7 e4       	ldi	r30, 0x47	; 71
    698a:	e1 de       	rcall	.-574    	; 0x674e <steptable+0x46>
    698c:	db d8       	rcall	.-3658   	; 0x5b44 <SetSpritesTileTable+0x6>
    698e:	d5 d2       	rcall	.+1450   	; 0x6f3a <waves+0x63a>
    6990:	cf cd       	rjmp	.-1122   	; 0x6530 <ProcessMusic+0x3a4>
    6992:	ca c7       	rjmp	.+3988   	; 0x7928 <__data_load_end+0x16>
    6994:	c4 c1       	rjmp	.+904    	; 0x6d1e <waves+0x41e>
    6996:	bf bc       	out	0x2f, r11	; 47
    6998:	b9 b7       	in	r27, 0x39	; 57
    699a:	b4 b2       	in	r11, 0x14	; 20
    699c:	af ad       	ldd	r26, Y+63	; 0x3f
    699e:	ab a8       	ldd	r10, Y+51	; 0x33
    69a0:	a6 a4       	ldd	r10, Z+46	; 0x2e
    69a2:	a2 a0       	ldd	r10, Z+34	; 0x22
    69a4:	9e 9c       	mul	r9, r14
    69a6:	9a 98       	cbi	0x13, 2	; 19
    69a8:	96 95       	lsr	r25
    69aa:	93 91       	.word	0x9193	; ????
    69ac:	90 8f       	std	Z+24, r25	; 0x18
    69ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    69b0:	8b 8a       	std	Y+19, r8	; 0x13
    69b2:	88 87       	std	Y+8, r24	; 0x08
    69b4:	86 86       	std	Z+14, r8	; 0x0e
    69b6:	85 84       	ldd	r8, Z+13	; 0x0d
    69b8:	83 83       	std	Z+3, r24	; 0x03
    69ba:	82 82       	std	Z+2, r8	; 0x02
    69bc:	82 81       	ldd	r24, Z+2	; 0x02
    69be:	81 81       	ldd	r24, Z+1	; 0x01
    69c0:	81 81       	ldd	r24, Z+1	; 0x01
    69c2:	81 81       	ldd	r24, Z+1	; 0x01
    69c4:	82 82       	std	Z+2, r8	; 0x02
    69c6:	82 83       	std	Z+2, r24	; 0x02
    69c8:	83 84       	ldd	r8, Z+11	; 0x0b
    69ca:	85 86       	std	Z+13, r8	; 0x0d
    69cc:	86 87       	std	Z+14, r24	; 0x0e
    69ce:	88 8a       	std	Y+16, r8	; 0x10
    69d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    69d2:	8d 8f       	std	Y+29, r24	; 0x1d
    69d4:	90 91 93 95 	lds	r25, 0x9593
    69d8:	96 98       	cbi	0x12, 6	; 18
    69da:	9a 9c       	mul	r9, r10
    69dc:	9e a0       	ldd	r9, Y+38	; 0x26
    69de:	a2 a4       	ldd	r10, Z+42	; 0x2a
    69e0:	a6 a8       	ldd	r10, Z+54	; 0x36
    69e2:	ab ad       	ldd	r26, Y+59	; 0x3b
    69e4:	af b2       	in	r10, 0x1f	; 31
    69e6:	b4 b7       	in	r27, 0x34	; 52
    69e8:	b9 bc       	out	0x29, r11	; 41
    69ea:	bf c1       	rjmp	.+894    	; 0x6d6a <waves+0x46a>
    69ec:	c4 c7       	rjmp	.+3976   	; 0x7976 <__data_load_end+0x64>
    69ee:	ca cd       	rjmp	.-1132   	; 0x6584 <ProcessMusic+0x3f8>
    69f0:	cf d2       	rcall	.+1438   	; 0x6f90 <waves+0x690>
    69f2:	d5 d8       	rcall	.-3670   	; 0x5b9e <ClearVsyncFlag>
    69f4:	db de       	rcall	.-586    	; 0x67ac <steptable+0xa4>
    69f6:	e1 e4       	ldi	r30, 0x41	; 65
    69f8:	e7 ea       	ldi	r30, 0xA7	; 167
    69fa:	ed f0       	brhs	.+58     	; 0x6a36 <waves+0x136>
    69fc:	f4 f7       	brge	.-4      	; 0x69fa <waves+0xfa>
    69fe:	fa fd       	.word	0xfdfa	; ????
    6a00:	80 81       	ld	r24, Z
    6a02:	82 83       	std	Z+2, r24	; 0x02
    6a04:	84 85       	ldd	r24, Z+12	; 0x0c
    6a06:	86 87       	std	Z+14, r24	; 0x0e
    6a08:	88 89       	ldd	r24, Y+16	; 0x10
    6a0a:	8a 8b       	std	Y+18, r24	; 0x12
    6a0c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    6a0e:	8e 8f       	std	Y+30, r24	; 0x1e
    6a10:	90 91 92 93 	lds	r25, 0x9392
    6a14:	94 95       	.word	0x9594	; ????
    6a16:	96 97       	sbiw	r26, 0x26	; 38
    6a18:	98 99       	sbic	0x13, 0	; 19
    6a1a:	9a 9b       	sbis	0x13, 2	; 19
    6a1c:	9c 9d       	mul	r25, r12
    6a1e:	9e 9f       	mul	r25, r30
    6a20:	a0 a1       	ldd	r26, Z+32	; 0x20
    6a22:	a2 a3       	std	Z+34, r26	; 0x22
    6a24:	a4 a5       	ldd	r26, Z+44	; 0x2c
    6a26:	a6 a7       	std	Z+46, r26	; 0x2e
    6a28:	a8 a9       	ldd	r26, Y+48	; 0x30
    6a2a:	aa ab       	std	Y+50, r26	; 0x32
    6a2c:	ac ad       	ldd	r26, Y+60	; 0x3c
    6a2e:	ae af       	std	Y+62, r26	; 0x3e
    6a30:	b0 b1       	in	r27, 0x00	; 0
    6a32:	b2 b3       	in	r27, 0x12	; 18
    6a34:	b4 b5       	in	r27, 0x24	; 36
    6a36:	b6 b7       	in	r27, 0x36	; 54
    6a38:	b8 b9       	out	0x08, r27	; 8
    6a3a:	ba bb       	out	0x1a, r27	; 26
    6a3c:	bc bd       	out	0x2c, r27	; 44
    6a3e:	be bf       	out	0x3e, r27	; 62
    6a40:	c0 c1       	rjmp	.+896    	; 0x6dc2 <waves+0x4c2>
    6a42:	c2 c3       	rjmp	.+1924   	; 0x71c8 <waves+0x8c8>
    6a44:	c4 c5       	rjmp	.+2952   	; 0x75ce <MapSprite2+0x7e>
    6a46:	c6 c7       	rjmp	.+3980   	; 0x79d4 <__data_load_end+0xc2>
    6a48:	c8 c9       	rjmp	.-3184   	; 0x5dda <PatchCommand11+0x26>
    6a4a:	ca cb       	rjmp	.-2156   	; 0x61e0 <ProcessMusic+0x54>
    6a4c:	cc cd       	rjmp	.-1128   	; 0x65e6 <set_note_waves+0xc>
    6a4e:	ce cf       	rjmp	.-100    	; 0x69ec <waves+0xec>
    6a50:	d0 d1       	rcall	.+928    	; 0x6df2 <waves+0x4f2>
    6a52:	d2 d3       	rcall	.+1956   	; 0x71f8 <waves+0x8f8>
    6a54:	d4 d5       	rcall	.+2984   	; 0x75fe <InitializeVideoMode+0xa>
    6a56:	d6 d7       	rcall	.+4012   	; 0x7a04 <__data_load_end+0xf2>
    6a58:	d8 d9       	rcall	.-3152   	; 0x5e0a <PatchCommand11+0x56>
    6a5a:	da db       	rcall	.-2124   	; 0x6210 <ProcessMusic+0x84>
    6a5c:	dc dd       	rcall	.-1096   	; 0x6616 <SetMixerWave+0x18>
    6a5e:	de df       	rcall	.-68     	; 0x6a1c <waves+0x11c>
    6a60:	e0 e1       	ldi	r30, 0x10	; 16
    6a62:	e2 e3       	ldi	r30, 0x32	; 50
    6a64:	e4 e5       	ldi	r30, 0x54	; 84
    6a66:	e6 e7       	ldi	r30, 0x76	; 118
    6a68:	e8 e9       	ldi	r30, 0x98	; 152
    6a6a:	ea eb       	ldi	r30, 0xBA	; 186
    6a6c:	ec ed       	ldi	r30, 0xDC	; 220
    6a6e:	ee ef       	ldi	r30, 0xFE	; 254
    6a70:	f0 f1       	brcs	.+124    	; 0x6aee <waves+0x1ee>
    6a72:	f2 f3       	brmi	.-4      	; 0x6a70 <waves+0x170>
    6a74:	f4 f5       	brge	.+124    	; 0x6af2 <waves+0x1f2>
    6a76:	f6 f7       	brtc	.-4      	; 0x6a74 <waves+0x174>
    6a78:	f8 f9       	.word	0xf9f8	; ????
    6a7a:	fa fb       	.word	0xfbfa	; ????
    6a7c:	fc fd       	.word	0xfdfc	; ????
    6a7e:	fe ff       	.word	0xfffe	; ????
    6a80:	00 01       	movw	r0, r0
    6a82:	02 03       	mulsu	r16, r18
    6a84:	04 05       	cpc	r16, r4
    6a86:	06 07       	cpc	r16, r22
    6a88:	08 09       	sbc	r16, r8
    6a8a:	0a 0b       	sbc	r16, r26
    6a8c:	0c 0d       	add	r16, r12
    6a8e:	0e 0f       	add	r16, r30
    6a90:	10 11       	cpse	r17, r0
    6a92:	12 13       	cpse	r17, r18
    6a94:	14 15       	cp	r17, r4
    6a96:	16 17       	cp	r17, r22
    6a98:	18 19       	sub	r17, r8
    6a9a:	1a 1b       	sub	r17, r26
    6a9c:	1c 1d       	adc	r17, r12
    6a9e:	1e 1f       	adc	r17, r30
    6aa0:	20 21       	and	r18, r0
    6aa2:	22 23       	and	r18, r18
    6aa4:	24 25       	eor	r18, r4
    6aa6:	26 27       	eor	r18, r22
    6aa8:	28 29       	or	r18, r8
    6aaa:	2a 2b       	or	r18, r26
    6aac:	2c 2d       	mov	r18, r12
    6aae:	2e 2f       	mov	r18, r30
    6ab0:	30 31       	cpi	r19, 0x10	; 16
    6ab2:	32 33       	cpi	r19, 0x32	; 50
    6ab4:	34 35       	cpi	r19, 0x54	; 84
    6ab6:	36 37       	cpi	r19, 0x76	; 118
    6ab8:	38 39       	cpi	r19, 0x98	; 152
    6aba:	3a 3b       	cpi	r19, 0xBA	; 186
    6abc:	3c 3d       	cpi	r19, 0xDC	; 220
    6abe:	3e 3f       	cpi	r19, 0xFE	; 254
    6ac0:	40 41       	sbci	r20, 0x10	; 16
    6ac2:	42 43       	sbci	r20, 0x32	; 50
    6ac4:	44 45       	sbci	r20, 0x54	; 84
    6ac6:	46 47       	sbci	r20, 0x76	; 118
    6ac8:	48 49       	sbci	r20, 0x98	; 152
    6aca:	4a 4b       	sbci	r20, 0xBA	; 186
    6acc:	4c 4d       	sbci	r20, 0xDC	; 220
    6ace:	4e 4f       	sbci	r20, 0xFE	; 254
    6ad0:	50 51       	subi	r21, 0x10	; 16
    6ad2:	52 53       	subi	r21, 0x32	; 50
    6ad4:	54 55       	subi	r21, 0x54	; 84
    6ad6:	56 57       	subi	r21, 0x76	; 118
    6ad8:	58 59       	subi	r21, 0x98	; 152
    6ada:	5a 5b       	subi	r21, 0xBA	; 186
    6adc:	5c 5d       	subi	r21, 0xDC	; 220
    6ade:	5e 5f       	subi	r21, 0xFE	; 254
    6ae0:	60 61       	ori	r22, 0x10	; 16
    6ae2:	62 63       	ori	r22, 0x32	; 50
    6ae4:	64 65       	ori	r22, 0x54	; 84
    6ae6:	66 67       	ori	r22, 0x76	; 118
    6ae8:	68 69       	ori	r22, 0x98	; 152
    6aea:	6a 6b       	ori	r22, 0xBA	; 186
    6aec:	6c 6d       	ori	r22, 0xDC	; 220
    6aee:	6e 6f       	ori	r22, 0xFE	; 254
    6af0:	70 71       	andi	r23, 0x10	; 16
    6af2:	72 73       	andi	r23, 0x32	; 50
    6af4:	74 75       	andi	r23, 0x54	; 84
    6af6:	76 77       	andi	r23, 0x76	; 118
    6af8:	78 79       	andi	r23, 0x98	; 152
    6afa:	7a 7b       	andi	r23, 0xBA	; 186
    6afc:	7c 7d       	andi	r23, 0xDC	; 220
    6afe:	7e 7f       	andi	r23, 0xFE	; 254
    6b00:	00 02       	muls	r16, r16
    6b02:	04 06       	cpc	r0, r20
    6b04:	08 0a       	sbc	r0, r24
    6b06:	0c 0e       	add	r0, r28
    6b08:	10 12       	cpse	r1, r16
    6b0a:	14 16       	cp	r1, r20
    6b0c:	18 1a       	sub	r1, r24
    6b0e:	1c 1e       	adc	r1, r28
    6b10:	20 22       	and	r2, r16
    6b12:	24 26       	eor	r2, r20
    6b14:	28 2a       	or	r2, r24
    6b16:	2c 2e       	mov	r2, r28
    6b18:	30 32       	cpi	r19, 0x20	; 32
    6b1a:	34 36       	cpi	r19, 0x64	; 100
    6b1c:	38 3a       	cpi	r19, 0xA8	; 168
    6b1e:	3c 3e       	cpi	r19, 0xEC	; 236
    6b20:	40 42       	sbci	r20, 0x20	; 32
    6b22:	44 46       	sbci	r20, 0x64	; 100
    6b24:	48 4a       	sbci	r20, 0xA8	; 168
    6b26:	4c 4e       	sbci	r20, 0xEC	; 236
    6b28:	50 52       	subi	r21, 0x20	; 32
    6b2a:	54 56       	subi	r21, 0x64	; 100
    6b2c:	58 5a       	subi	r21, 0xA8	; 168
    6b2e:	5c 5e       	subi	r21, 0xEC	; 236
    6b30:	60 62       	ori	r22, 0x20	; 32
    6b32:	64 66       	ori	r22, 0x64	; 100
    6b34:	68 6a       	ori	r22, 0xA8	; 168
    6b36:	6c 6e       	ori	r22, 0xEC	; 236
    6b38:	70 72       	andi	r23, 0x20	; 32
    6b3a:	74 76       	andi	r23, 0x64	; 100
    6b3c:	78 7a       	andi	r23, 0xA8	; 168
    6b3e:	7c 7e       	andi	r23, 0xEC	; 236
    6b40:	7f 7d       	andi	r23, 0xDF	; 223
    6b42:	7b 79       	andi	r23, 0x9B	; 155
    6b44:	77 75       	andi	r23, 0x57	; 87
    6b46:	73 71       	andi	r23, 0x13	; 19
    6b48:	6f 6d       	ori	r22, 0xDF	; 223
    6b4a:	6b 69       	ori	r22, 0x9B	; 155
    6b4c:	67 65       	ori	r22, 0x57	; 87
    6b4e:	63 61       	ori	r22, 0x13	; 19
    6b50:	5f 5d       	subi	r21, 0xDF	; 223
    6b52:	5b 59       	subi	r21, 0x9B	; 155
    6b54:	57 55       	subi	r21, 0x57	; 87
    6b56:	53 51       	subi	r21, 0x13	; 19
    6b58:	4f 4d       	sbci	r20, 0xDF	; 223
    6b5a:	4b 49       	sbci	r20, 0x9B	; 155
    6b5c:	47 45       	sbci	r20, 0x57	; 87
    6b5e:	43 41       	sbci	r20, 0x13	; 19
    6b60:	3f 3d       	cpi	r19, 0xDF	; 223
    6b62:	3b 39       	cpi	r19, 0x9B	; 155
    6b64:	37 35       	cpi	r19, 0x57	; 87
    6b66:	33 31       	cpi	r19, 0x13	; 19
    6b68:	2f 2d       	mov	r18, r15
    6b6a:	2b 29       	or	r18, r11
    6b6c:	27 25       	eor	r18, r7
    6b6e:	23 21       	and	r18, r3
    6b70:	1f 1d       	adc	r17, r15
    6b72:	1b 19       	sub	r17, r11
    6b74:	17 15       	cp	r17, r7
    6b76:	13 11       	cpse	r17, r3
    6b78:	0f 0d       	add	r16, r15
    6b7a:	0b 09       	sbc	r16, r11
    6b7c:	07 05       	cpc	r16, r7
    6b7e:	03 01       	movw	r0, r6
    6b80:	ff fd       	.word	0xfdff	; ????
    6b82:	fb f9       	.word	0xf9fb	; ????
    6b84:	f7 f5       	brid	.+124    	; 0x6c02 <waves+0x302>
    6b86:	f3 f1       	brvs	.+124    	; 0x6c04 <waves+0x304>
    6b88:	ef ed       	ldi	r30, 0xDF	; 223
    6b8a:	eb e9       	ldi	r30, 0x9B	; 155
    6b8c:	e7 e5       	ldi	r30, 0x57	; 87
    6b8e:	e3 e1       	ldi	r30, 0x13	; 19
    6b90:	df dd       	rcall	.-1090   	; 0x6750 <steptable+0x48>
    6b92:	db d9       	rcall	.-3146   	; 0x5f4a <ReadVarLen+0x36>
    6b94:	d7 d5       	rcall	.+2990   	; 0x7744 <DisplayLogo+0x34>
    6b96:	d3 d1       	rcall	.+934    	; 0x6f3e <waves+0x63e>
    6b98:	cf cd       	rjmp	.-1122   	; 0x6738 <steptable+0x30>
    6b9a:	cb c9       	rjmp	.-3178   	; 0x5f32 <ReadVarLen+0x1e>
    6b9c:	c7 c5       	rjmp	.+2958   	; 0x772c <DisplayLogo+0x1c>
    6b9e:	c3 c1       	rjmp	.+902    	; 0x6f26 <waves+0x626>
    6ba0:	bf bd       	out	0x2f, r27	; 47
    6ba2:	bb b9       	out	0x0b, r27	; 11
    6ba4:	b7 b5       	in	r27, 0x27	; 39
    6ba6:	b3 b1       	in	r27, 0x03	; 3
    6ba8:	af ad       	ldd	r26, Y+63	; 0x3f
    6baa:	ab a9       	ldd	r26, Y+51	; 0x33
    6bac:	a7 a5       	ldd	r26, Z+47	; 0x2f
    6bae:	a3 a1       	ldd	r26, Z+35	; 0x23
    6bb0:	9f 9d       	mul	r25, r15
    6bb2:	9b 99       	sbic	0x13, 3	; 19
    6bb4:	97 95       	ror	r25
    6bb6:	93 91       	.word	0x9193	; ????
    6bb8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    6bba:	8b 89       	ldd	r24, Y+19	; 0x13
    6bbc:	87 85       	ldd	r24, Z+15	; 0x0f
    6bbe:	83 81       	ldd	r24, Z+3	; 0x03
    6bc0:	80 82       	st	Z, r8
    6bc2:	84 86       	std	Z+12, r8	; 0x0c
    6bc4:	88 8a       	std	Y+16, r8	; 0x10
    6bc6:	8c 8e       	std	Y+28, r8	; 0x1c
    6bc8:	90 92 94 96 	sts	0x9694, r9
    6bcc:	98 9a       	sbi	0x13, 0	; 19
    6bce:	9c 9e       	mul	r9, r28
    6bd0:	a0 a2       	std	Z+32, r10	; 0x20
    6bd2:	a4 a6       	std	Z+44, r10	; 0x2c
    6bd4:	a8 aa       	std	Y+48, r10	; 0x30
    6bd6:	ac ae       	std	Y+60, r10	; 0x3c
    6bd8:	b0 b2       	in	r11, 0x10	; 16
    6bda:	b4 b6       	in	r11, 0x34	; 52
    6bdc:	b8 ba       	out	0x18, r11	; 24
    6bde:	bc be       	out	0x3c, r11	; 60
    6be0:	c0 c2       	rjmp	.+1408   	; 0x7162 <waves+0x862>
    6be2:	c4 c6       	rjmp	.+3464   	; 0x796c <__data_load_end+0x5a>
    6be4:	c8 ca       	rjmp	.-2672   	; 0x6176 <TriggerNote+0x6a>
    6be6:	cc ce       	rjmp	.-616    	; 0x6980 <waves+0x80>
    6be8:	d0 d2       	rcall	.+1440   	; 0x718a <waves+0x88a>
    6bea:	d4 d6       	rcall	.+3496   	; 0x7994 <__data_load_end+0x82>
    6bec:	d8 da       	rcall	.-2640   	; 0x619e <ProcessMusic+0x12>
    6bee:	dc de       	rcall	.-584    	; 0x69a8 <waves+0xa8>
    6bf0:	e0 e2       	ldi	r30, 0x20	; 32
    6bf2:	e4 e6       	ldi	r30, 0x64	; 100
    6bf4:	e8 ea       	ldi	r30, 0xA8	; 168
    6bf6:	ec ee       	ldi	r30, 0xEC	; 236
    6bf8:	f0 f2       	brcs	.-68     	; 0x6bb6 <waves+0x2b6>
    6bfa:	f4 f6       	brge	.-68     	; 0x6bb8 <waves+0x2b8>
    6bfc:	f8 fa       	.word	0xfaf8	; ????
    6bfe:	fc fe       	.word	0xfefc	; ????
    6c00:	7f 7f       	andi	r23, 0xFF	; 255
    6c02:	7f 7f       	andi	r23, 0xFF	; 255
    6c04:	7f 7f       	andi	r23, 0xFF	; 255
    6c06:	7f 7f       	andi	r23, 0xFF	; 255
    6c08:	7f 7f       	andi	r23, 0xFF	; 255
    6c0a:	7f 7f       	andi	r23, 0xFF	; 255
    6c0c:	7f 7f       	andi	r23, 0xFF	; 255
    6c0e:	7f 7f       	andi	r23, 0xFF	; 255
    6c10:	7f 7f       	andi	r23, 0xFF	; 255
    6c12:	7f 7f       	andi	r23, 0xFF	; 255
    6c14:	7f 7f       	andi	r23, 0xFF	; 255
    6c16:	7f 7f       	andi	r23, 0xFF	; 255
    6c18:	7f 7f       	andi	r23, 0xFF	; 255
    6c1a:	7f 7f       	andi	r23, 0xFF	; 255
    6c1c:	7f 7f       	andi	r23, 0xFF	; 255
    6c1e:	7f 7f       	andi	r23, 0xFF	; 255
    6c20:	7f 7f       	andi	r23, 0xFF	; 255
    6c22:	7f 7f       	andi	r23, 0xFF	; 255
    6c24:	7f 7f       	andi	r23, 0xFF	; 255
    6c26:	7f 7f       	andi	r23, 0xFF	; 255
    6c28:	7f 7f       	andi	r23, 0xFF	; 255
    6c2a:	7f 7f       	andi	r23, 0xFF	; 255
    6c2c:	7f 7f       	andi	r23, 0xFF	; 255
    6c2e:	7f 7f       	andi	r23, 0xFF	; 255
    6c30:	7f 7f       	andi	r23, 0xFF	; 255
    6c32:	7f 7f       	andi	r23, 0xFF	; 255
    6c34:	7f 7f       	andi	r23, 0xFF	; 255
    6c36:	7f 7f       	andi	r23, 0xFF	; 255
    6c38:	7f 7f       	andi	r23, 0xFF	; 255
    6c3a:	7f 7f       	andi	r23, 0xFF	; 255
    6c3c:	7f 7f       	andi	r23, 0xFF	; 255
    6c3e:	7f 7f       	andi	r23, 0xFF	; 255
    6c40:	80 80       	ld	r8, Z
    6c42:	80 80       	ld	r8, Z
    6c44:	80 80       	ld	r8, Z
    6c46:	80 80       	ld	r8, Z
    6c48:	80 80       	ld	r8, Z
    6c4a:	80 80       	ld	r8, Z
    6c4c:	80 80       	ld	r8, Z
    6c4e:	80 80       	ld	r8, Z
    6c50:	80 80       	ld	r8, Z
    6c52:	80 80       	ld	r8, Z
    6c54:	80 80       	ld	r8, Z
    6c56:	80 80       	ld	r8, Z
    6c58:	80 80       	ld	r8, Z
    6c5a:	80 80       	ld	r8, Z
    6c5c:	80 80       	ld	r8, Z
    6c5e:	80 80       	ld	r8, Z
    6c60:	80 80       	ld	r8, Z
    6c62:	80 80       	ld	r8, Z
    6c64:	80 80       	ld	r8, Z
    6c66:	80 80       	ld	r8, Z
    6c68:	80 80       	ld	r8, Z
    6c6a:	80 80       	ld	r8, Z
    6c6c:	80 80       	ld	r8, Z
    6c6e:	80 80       	ld	r8, Z
    6c70:	80 80       	ld	r8, Z
    6c72:	80 80       	ld	r8, Z
    6c74:	80 80       	ld	r8, Z
    6c76:	80 80       	ld	r8, Z
    6c78:	80 80       	ld	r8, Z
    6c7a:	80 80       	ld	r8, Z
    6c7c:	80 80       	ld	r8, Z
    6c7e:	80 80       	ld	r8, Z
    6c80:	80 80       	ld	r8, Z
    6c82:	80 80       	ld	r8, Z
    6c84:	80 80       	ld	r8, Z
    6c86:	80 80       	ld	r8, Z
    6c88:	80 80       	ld	r8, Z
    6c8a:	80 80       	ld	r8, Z
    6c8c:	80 80       	ld	r8, Z
    6c8e:	80 80       	ld	r8, Z
    6c90:	80 80       	ld	r8, Z
    6c92:	80 80       	ld	r8, Z
    6c94:	80 80       	ld	r8, Z
    6c96:	80 80       	ld	r8, Z
    6c98:	80 80       	ld	r8, Z
    6c9a:	80 80       	ld	r8, Z
    6c9c:	80 80       	ld	r8, Z
    6c9e:	80 80       	ld	r8, Z
    6ca0:	80 80       	ld	r8, Z
    6ca2:	80 80       	ld	r8, Z
    6ca4:	80 80       	ld	r8, Z
    6ca6:	80 80       	ld	r8, Z
    6ca8:	80 80       	ld	r8, Z
    6caa:	80 80       	ld	r8, Z
    6cac:	80 80       	ld	r8, Z
    6cae:	80 80       	ld	r8, Z
    6cb0:	80 80       	ld	r8, Z
    6cb2:	80 80       	ld	r8, Z
    6cb4:	80 80       	ld	r8, Z
    6cb6:	80 80       	ld	r8, Z
    6cb8:	80 80       	ld	r8, Z
    6cba:	80 80       	ld	r8, Z
    6cbc:	80 80       	ld	r8, Z
    6cbe:	80 80       	ld	r8, Z
    6cc0:	80 80       	ld	r8, Z
    6cc2:	80 80       	ld	r8, Z
    6cc4:	80 80       	ld	r8, Z
    6cc6:	80 80       	ld	r8, Z
    6cc8:	80 80       	ld	r8, Z
    6cca:	80 80       	ld	r8, Z
    6ccc:	80 80       	ld	r8, Z
    6cce:	80 80       	ld	r8, Z
    6cd0:	80 80       	ld	r8, Z
    6cd2:	80 80       	ld	r8, Z
    6cd4:	80 80       	ld	r8, Z
    6cd6:	80 80       	ld	r8, Z
    6cd8:	80 80       	ld	r8, Z
    6cda:	80 80       	ld	r8, Z
    6cdc:	80 80       	ld	r8, Z
    6cde:	80 80       	ld	r8, Z
    6ce0:	80 80       	ld	r8, Z
    6ce2:	80 80       	ld	r8, Z
    6ce4:	80 80       	ld	r8, Z
    6ce6:	80 80       	ld	r8, Z
    6ce8:	80 80       	ld	r8, Z
    6cea:	80 80       	ld	r8, Z
    6cec:	80 80       	ld	r8, Z
    6cee:	80 80       	ld	r8, Z
    6cf0:	80 80       	ld	r8, Z
    6cf2:	80 80       	ld	r8, Z
    6cf4:	80 80       	ld	r8, Z
    6cf6:	80 80       	ld	r8, Z
    6cf8:	80 80       	ld	r8, Z
    6cfa:	80 80       	ld	r8, Z
    6cfc:	80 80       	ld	r8, Z
    6cfe:	80 80       	ld	r8, Z
    6d00:	7f 7f       	andi	r23, 0xFF	; 255
    6d02:	7f 7f       	andi	r23, 0xFF	; 255
    6d04:	7f 7f       	andi	r23, 0xFF	; 255
    6d06:	7f 7f       	andi	r23, 0xFF	; 255
    6d08:	7f 7f       	andi	r23, 0xFF	; 255
    6d0a:	7f 7f       	andi	r23, 0xFF	; 255
    6d0c:	7f 7f       	andi	r23, 0xFF	; 255
    6d0e:	7f 7f       	andi	r23, 0xFF	; 255
    6d10:	7f 7f       	andi	r23, 0xFF	; 255
    6d12:	7f 7f       	andi	r23, 0xFF	; 255
    6d14:	7f 7f       	andi	r23, 0xFF	; 255
    6d16:	7f 7f       	andi	r23, 0xFF	; 255
    6d18:	7f 7f       	andi	r23, 0xFF	; 255
    6d1a:	7f 7f       	andi	r23, 0xFF	; 255
    6d1c:	7f 7f       	andi	r23, 0xFF	; 255
    6d1e:	7f 7f       	andi	r23, 0xFF	; 255
    6d20:	7f 7f       	andi	r23, 0xFF	; 255
    6d22:	7f 7f       	andi	r23, 0xFF	; 255
    6d24:	7f 7f       	andi	r23, 0xFF	; 255
    6d26:	7f 7f       	andi	r23, 0xFF	; 255
    6d28:	7f 7f       	andi	r23, 0xFF	; 255
    6d2a:	7f 7f       	andi	r23, 0xFF	; 255
    6d2c:	7f 7f       	andi	r23, 0xFF	; 255
    6d2e:	7f 7f       	andi	r23, 0xFF	; 255
    6d30:	7f 7f       	andi	r23, 0xFF	; 255
    6d32:	7f 7f       	andi	r23, 0xFF	; 255
    6d34:	7f 7f       	andi	r23, 0xFF	; 255
    6d36:	7f 7f       	andi	r23, 0xFF	; 255
    6d38:	7f 7f       	andi	r23, 0xFF	; 255
    6d3a:	7f 7f       	andi	r23, 0xFF	; 255
    6d3c:	7f 7f       	andi	r23, 0xFF	; 255
    6d3e:	7f 7f       	andi	r23, 0xFF	; 255
    6d40:	7f 7f       	andi	r23, 0xFF	; 255
    6d42:	7f 7f       	andi	r23, 0xFF	; 255
    6d44:	7f 7f       	andi	r23, 0xFF	; 255
    6d46:	7f 7f       	andi	r23, 0xFF	; 255
    6d48:	7f 7f       	andi	r23, 0xFF	; 255
    6d4a:	7f 7f       	andi	r23, 0xFF	; 255
    6d4c:	7f 7f       	andi	r23, 0xFF	; 255
    6d4e:	7f 7f       	andi	r23, 0xFF	; 255
    6d50:	7f 7f       	andi	r23, 0xFF	; 255
    6d52:	7f 7f       	andi	r23, 0xFF	; 255
    6d54:	7f 7f       	andi	r23, 0xFF	; 255
    6d56:	7f 7f       	andi	r23, 0xFF	; 255
    6d58:	7f 7f       	andi	r23, 0xFF	; 255
    6d5a:	7f 7f       	andi	r23, 0xFF	; 255
    6d5c:	7f 7f       	andi	r23, 0xFF	; 255
    6d5e:	7f 7f       	andi	r23, 0xFF	; 255
    6d60:	7f 7f       	andi	r23, 0xFF	; 255
    6d62:	7f 7f       	andi	r23, 0xFF	; 255
    6d64:	7f 7f       	andi	r23, 0xFF	; 255
    6d66:	7f 7f       	andi	r23, 0xFF	; 255
    6d68:	7f 7f       	andi	r23, 0xFF	; 255
    6d6a:	7f 7f       	andi	r23, 0xFF	; 255
    6d6c:	7f 7f       	andi	r23, 0xFF	; 255
    6d6e:	7f 7f       	andi	r23, 0xFF	; 255
    6d70:	7f 7f       	andi	r23, 0xFF	; 255
    6d72:	7f 7f       	andi	r23, 0xFF	; 255
    6d74:	7f 7f       	andi	r23, 0xFF	; 255
    6d76:	7f 7f       	andi	r23, 0xFF	; 255
    6d78:	7f 7f       	andi	r23, 0xFF	; 255
    6d7a:	7f 7f       	andi	r23, 0xFF	; 255
    6d7c:	7f 7f       	andi	r23, 0xFF	; 255
    6d7e:	7f 7f       	andi	r23, 0xFF	; 255
    6d80:	80 80       	ld	r8, Z
    6d82:	80 80       	ld	r8, Z
    6d84:	80 80       	ld	r8, Z
    6d86:	80 80       	ld	r8, Z
    6d88:	80 80       	ld	r8, Z
    6d8a:	80 80       	ld	r8, Z
    6d8c:	80 80       	ld	r8, Z
    6d8e:	80 80       	ld	r8, Z
    6d90:	80 80       	ld	r8, Z
    6d92:	80 80       	ld	r8, Z
    6d94:	80 80       	ld	r8, Z
    6d96:	80 80       	ld	r8, Z
    6d98:	80 80       	ld	r8, Z
    6d9a:	80 80       	ld	r8, Z
    6d9c:	80 80       	ld	r8, Z
    6d9e:	80 80       	ld	r8, Z
    6da0:	80 80       	ld	r8, Z
    6da2:	80 80       	ld	r8, Z
    6da4:	80 80       	ld	r8, Z
    6da6:	80 80       	ld	r8, Z
    6da8:	80 80       	ld	r8, Z
    6daa:	80 80       	ld	r8, Z
    6dac:	80 80       	ld	r8, Z
    6dae:	80 80       	ld	r8, Z
    6db0:	80 80       	ld	r8, Z
    6db2:	80 80       	ld	r8, Z
    6db4:	80 80       	ld	r8, Z
    6db6:	80 80       	ld	r8, Z
    6db8:	80 80       	ld	r8, Z
    6dba:	80 80       	ld	r8, Z
    6dbc:	80 80       	ld	r8, Z
    6dbe:	80 80       	ld	r8, Z
    6dc0:	80 80       	ld	r8, Z
    6dc2:	80 80       	ld	r8, Z
    6dc4:	80 80       	ld	r8, Z
    6dc6:	80 80       	ld	r8, Z
    6dc8:	80 80       	ld	r8, Z
    6dca:	80 80       	ld	r8, Z
    6dcc:	80 80       	ld	r8, Z
    6dce:	80 80       	ld	r8, Z
    6dd0:	80 80       	ld	r8, Z
    6dd2:	80 80       	ld	r8, Z
    6dd4:	80 80       	ld	r8, Z
    6dd6:	80 80       	ld	r8, Z
    6dd8:	80 80       	ld	r8, Z
    6dda:	80 80       	ld	r8, Z
    6ddc:	80 80       	ld	r8, Z
    6dde:	80 80       	ld	r8, Z
    6de0:	80 80       	ld	r8, Z
    6de2:	80 80       	ld	r8, Z
    6de4:	80 80       	ld	r8, Z
    6de6:	80 80       	ld	r8, Z
    6de8:	80 80       	ld	r8, Z
    6dea:	80 80       	ld	r8, Z
    6dec:	80 80       	ld	r8, Z
    6dee:	80 80       	ld	r8, Z
    6df0:	80 80       	ld	r8, Z
    6df2:	80 80       	ld	r8, Z
    6df4:	80 80       	ld	r8, Z
    6df6:	80 80       	ld	r8, Z
    6df8:	80 80       	ld	r8, Z
    6dfa:	80 80       	ld	r8, Z
    6dfc:	80 80       	ld	r8, Z
    6dfe:	80 80       	ld	r8, Z
    6e00:	7f 7f       	andi	r23, 0xFF	; 255
    6e02:	7f 7f       	andi	r23, 0xFF	; 255
    6e04:	7f 7f       	andi	r23, 0xFF	; 255
    6e06:	7f 7f       	andi	r23, 0xFF	; 255
    6e08:	7f 7f       	andi	r23, 0xFF	; 255
    6e0a:	7f 7f       	andi	r23, 0xFF	; 255
    6e0c:	7f 7f       	andi	r23, 0xFF	; 255
    6e0e:	7f 7f       	andi	r23, 0xFF	; 255
    6e10:	7f 7f       	andi	r23, 0xFF	; 255
    6e12:	7f 7f       	andi	r23, 0xFF	; 255
    6e14:	7f 7f       	andi	r23, 0xFF	; 255
    6e16:	7f 7f       	andi	r23, 0xFF	; 255
    6e18:	7f 7f       	andi	r23, 0xFF	; 255
    6e1a:	7f 7f       	andi	r23, 0xFF	; 255
    6e1c:	7f 7f       	andi	r23, 0xFF	; 255
    6e1e:	7f 7f       	andi	r23, 0xFF	; 255
    6e20:	7f 7f       	andi	r23, 0xFF	; 255
    6e22:	7f 7f       	andi	r23, 0xFF	; 255
    6e24:	7f 7f       	andi	r23, 0xFF	; 255
    6e26:	7f 7f       	andi	r23, 0xFF	; 255
    6e28:	7f 7f       	andi	r23, 0xFF	; 255
    6e2a:	7f 7f       	andi	r23, 0xFF	; 255
    6e2c:	7f 7f       	andi	r23, 0xFF	; 255
    6e2e:	7f 7f       	andi	r23, 0xFF	; 255
    6e30:	7f 7f       	andi	r23, 0xFF	; 255
    6e32:	7f 7f       	andi	r23, 0xFF	; 255
    6e34:	7f 7f       	andi	r23, 0xFF	; 255
    6e36:	7f 7f       	andi	r23, 0xFF	; 255
    6e38:	7f 7f       	andi	r23, 0xFF	; 255
    6e3a:	7f 7f       	andi	r23, 0xFF	; 255
    6e3c:	7f 7f       	andi	r23, 0xFF	; 255
    6e3e:	7f 7f       	andi	r23, 0xFF	; 255
    6e40:	7f 7f       	andi	r23, 0xFF	; 255
    6e42:	7f 7f       	andi	r23, 0xFF	; 255
    6e44:	7f 7f       	andi	r23, 0xFF	; 255
    6e46:	7f 7f       	andi	r23, 0xFF	; 255
    6e48:	7f 7f       	andi	r23, 0xFF	; 255
    6e4a:	7f 7f       	andi	r23, 0xFF	; 255
    6e4c:	7f 7f       	andi	r23, 0xFF	; 255
    6e4e:	7f 7f       	andi	r23, 0xFF	; 255
    6e50:	7f 7f       	andi	r23, 0xFF	; 255
    6e52:	7f 7f       	andi	r23, 0xFF	; 255
    6e54:	7f 7f       	andi	r23, 0xFF	; 255
    6e56:	7f 7f       	andi	r23, 0xFF	; 255
    6e58:	7f 7f       	andi	r23, 0xFF	; 255
    6e5a:	7f 7f       	andi	r23, 0xFF	; 255
    6e5c:	7f 7f       	andi	r23, 0xFF	; 255
    6e5e:	7f 7f       	andi	r23, 0xFF	; 255
    6e60:	7f 7f       	andi	r23, 0xFF	; 255
    6e62:	7f 7f       	andi	r23, 0xFF	; 255
    6e64:	7f 7f       	andi	r23, 0xFF	; 255
    6e66:	7f 7f       	andi	r23, 0xFF	; 255
    6e68:	7f 7f       	andi	r23, 0xFF	; 255
    6e6a:	7f 7f       	andi	r23, 0xFF	; 255
    6e6c:	7f 7f       	andi	r23, 0xFF	; 255
    6e6e:	7f 7f       	andi	r23, 0xFF	; 255
    6e70:	7f 7f       	andi	r23, 0xFF	; 255
    6e72:	7f 7f       	andi	r23, 0xFF	; 255
    6e74:	7f 7f       	andi	r23, 0xFF	; 255
    6e76:	7f 7f       	andi	r23, 0xFF	; 255
    6e78:	7f 7f       	andi	r23, 0xFF	; 255
    6e7a:	7f 7f       	andi	r23, 0xFF	; 255
    6e7c:	7f 7f       	andi	r23, 0xFF	; 255
    6e7e:	7f 7f       	andi	r23, 0xFF	; 255
    6e80:	7f 7f       	andi	r23, 0xFF	; 255
    6e82:	7f 7f       	andi	r23, 0xFF	; 255
    6e84:	7f 7f       	andi	r23, 0xFF	; 255
    6e86:	7f 7f       	andi	r23, 0xFF	; 255
    6e88:	7f 7f       	andi	r23, 0xFF	; 255
    6e8a:	7f 7f       	andi	r23, 0xFF	; 255
    6e8c:	7f 7f       	andi	r23, 0xFF	; 255
    6e8e:	7f 7f       	andi	r23, 0xFF	; 255
    6e90:	7f 7f       	andi	r23, 0xFF	; 255
    6e92:	7f 7f       	andi	r23, 0xFF	; 255
    6e94:	7f 7f       	andi	r23, 0xFF	; 255
    6e96:	7f 7f       	andi	r23, 0xFF	; 255
    6e98:	7f 7f       	andi	r23, 0xFF	; 255
    6e9a:	7f 7f       	andi	r23, 0xFF	; 255
    6e9c:	7f 7f       	andi	r23, 0xFF	; 255
    6e9e:	7f 7f       	andi	r23, 0xFF	; 255
    6ea0:	7f 7f       	andi	r23, 0xFF	; 255
    6ea2:	7f 7f       	andi	r23, 0xFF	; 255
    6ea4:	7f 7f       	andi	r23, 0xFF	; 255
    6ea6:	7f 7f       	andi	r23, 0xFF	; 255
    6ea8:	7f 7f       	andi	r23, 0xFF	; 255
    6eaa:	7f 7f       	andi	r23, 0xFF	; 255
    6eac:	7f 7f       	andi	r23, 0xFF	; 255
    6eae:	7f 7f       	andi	r23, 0xFF	; 255
    6eb0:	7f 7f       	andi	r23, 0xFF	; 255
    6eb2:	7f 7f       	andi	r23, 0xFF	; 255
    6eb4:	7f 7f       	andi	r23, 0xFF	; 255
    6eb6:	7f 7f       	andi	r23, 0xFF	; 255
    6eb8:	7f 7f       	andi	r23, 0xFF	; 255
    6eba:	7f 7f       	andi	r23, 0xFF	; 255
    6ebc:	7f 7f       	andi	r23, 0xFF	; 255
    6ebe:	7f 7f       	andi	r23, 0xFF	; 255
    6ec0:	80 80       	ld	r8, Z
    6ec2:	80 80       	ld	r8, Z
    6ec4:	80 80       	ld	r8, Z
    6ec6:	80 80       	ld	r8, Z
    6ec8:	80 80       	ld	r8, Z
    6eca:	80 80       	ld	r8, Z
    6ecc:	80 80       	ld	r8, Z
    6ece:	80 80       	ld	r8, Z
    6ed0:	80 80       	ld	r8, Z
    6ed2:	80 80       	ld	r8, Z
    6ed4:	80 80       	ld	r8, Z
    6ed6:	80 80       	ld	r8, Z
    6ed8:	80 80       	ld	r8, Z
    6eda:	80 80       	ld	r8, Z
    6edc:	80 80       	ld	r8, Z
    6ede:	80 80       	ld	r8, Z
    6ee0:	80 80       	ld	r8, Z
    6ee2:	80 80       	ld	r8, Z
    6ee4:	80 80       	ld	r8, Z
    6ee6:	80 80       	ld	r8, Z
    6ee8:	80 80       	ld	r8, Z
    6eea:	80 80       	ld	r8, Z
    6eec:	80 80       	ld	r8, Z
    6eee:	80 80       	ld	r8, Z
    6ef0:	80 80       	ld	r8, Z
    6ef2:	80 80       	ld	r8, Z
    6ef4:	80 80       	ld	r8, Z
    6ef6:	80 80       	ld	r8, Z
    6ef8:	80 80       	ld	r8, Z
    6efa:	80 80       	ld	r8, Z
    6efc:	80 80       	ld	r8, Z
    6efe:	80 80       	ld	r8, Z
    6f00:	03 09       	sbc	r16, r3
    6f02:	13 1e       	adc	r1, r19
    6f04:	28 31       	cpi	r18, 0x18	; 24
    6f06:	3a 40       	sbci	r19, 0x0A	; 10
    6f08:	46 4c       	sbci	r20, 0xC6	; 198
    6f0a:	50 54       	subi	r21, 0x40	; 64
    6f0c:	58 5b       	subi	r21, 0xB8	; 184
    6f0e:	5e 61       	ori	r21, 0x1E	; 30
    6f10:	63 65       	ori	r22, 0x53	; 83
    6f12:	67 69       	ori	r22, 0x97	; 151
    6f14:	6b 6c       	ori	r22, 0xCB	; 203
    6f16:	6e 6f       	ori	r22, 0xFE	; 254
    6f18:	70 71       	andi	r23, 0x10	; 16
    6f1a:	72 73       	andi	r23, 0x32	; 50
    6f1c:	74 75       	andi	r23, 0x54	; 84
    6f1e:	76 77       	andi	r23, 0x76	; 118
    6f20:	77 78       	andi	r23, 0x87	; 135
    6f22:	79 79       	andi	r23, 0x99	; 153
    6f24:	7a 7a       	andi	r23, 0xAA	; 170
    6f26:	7b 7b       	andi	r23, 0xBB	; 187
    6f28:	7c 7c       	andi	r23, 0xCC	; 204
    6f2a:	7c 7d       	andi	r23, 0xDC	; 220
    6f2c:	7d 7d       	andi	r23, 0xDD	; 221
    6f2e:	7e 7e       	andi	r23, 0xEE	; 238
    6f30:	7e 7e       	andi	r23, 0xEE	; 238
    6f32:	7f 7f       	andi	r23, 0xFF	; 255
    6f34:	7f 7f       	andi	r23, 0xFF	; 255
    6f36:	7f 7f       	andi	r23, 0xFF	; 255
    6f38:	7f 7f       	andi	r23, 0xFF	; 255
    6f3a:	7f 7f       	andi	r23, 0xFF	; 255
    6f3c:	7f 7f       	andi	r23, 0xFF	; 255
    6f3e:	7f 7f       	andi	r23, 0xFF	; 255
    6f40:	7f 7f       	andi	r23, 0xFF	; 255
    6f42:	7f 7f       	andi	r23, 0xFF	; 255
    6f44:	7f 7f       	andi	r23, 0xFF	; 255
    6f46:	7f 7f       	andi	r23, 0xFF	; 255
    6f48:	7f 7f       	andi	r23, 0xFF	; 255
    6f4a:	7f 7f       	andi	r23, 0xFF	; 255
    6f4c:	7f 7e       	andi	r23, 0xEF	; 239
    6f4e:	7e 7e       	andi	r23, 0xEE	; 238
    6f50:	7e 7d       	andi	r23, 0xDE	; 222
    6f52:	7d 7d       	andi	r23, 0xDD	; 221
    6f54:	7c 7c       	andi	r23, 0xCC	; 204
    6f56:	7c 7b       	andi	r23, 0xBC	; 188
    6f58:	7b 7a       	andi	r23, 0xAB	; 171
    6f5a:	7a 79       	andi	r23, 0x9A	; 154
    6f5c:	79 78       	andi	r23, 0x89	; 137
    6f5e:	77 77       	andi	r23, 0x77	; 119
    6f60:	76 75       	andi	r23, 0x56	; 86
    6f62:	74 73       	andi	r23, 0x34	; 52
    6f64:	72 71       	andi	r23, 0x12	; 18
    6f66:	70 6f       	ori	r23, 0xF0	; 240
    6f68:	6e 6c       	ori	r22, 0xCE	; 206
    6f6a:	6b 69       	ori	r22, 0x9B	; 155
    6f6c:	67 65       	ori	r22, 0x57	; 87
    6f6e:	63 61       	ori	r22, 0x13	; 19
    6f70:	5e 5b       	subi	r21, 0xBE	; 190
    6f72:	58 54       	subi	r21, 0x48	; 72
    6f74:	50 4c       	sbci	r21, 0xC0	; 192
    6f76:	46 40       	sbci	r20, 0x06	; 6
    6f78:	3a 31       	cpi	r19, 0x1A	; 26
    6f7a:	28 1e       	adc	r2, r24
    6f7c:	13 09       	sbc	r17, r3
    6f7e:	03 00       	.word	0x0003	; ????
    6f80:	c6 cc       	rjmp	.-1652   	; 0x690e <waves+0xe>
    6f82:	d5 db       	rcall	.-2134   	; 0x672e <steptable+0x26>
    6f84:	df e3       	ldi	r29, 0x3F	; 63
    6f86:	e5 e7       	ldi	r30, 0x75	; 117
    6f88:	e9 ea       	ldi	r30, 0xA9	; 169
    6f8a:	eb ec       	ldi	r30, 0xCB	; 203
    6f8c:	ed ee       	ldi	r30, 0xED	; 237
    6f8e:	ef ef       	ldi	r30, 0xFF	; 255
    6f90:	f0 f0       	brcs	.+60     	; 0x6fce <waves+0x6ce>
    6f92:	f0 f1       	brcs	.+124    	; 0x7010 <waves+0x710>
    6f94:	f1 f1       	breq	.+124    	; 0x7012 <waves+0x712>
    6f96:	f1 f2       	breq	.-68     	; 0x6f54 <waves+0x654>
    6f98:	f2 f2       	brmi	.-68     	; 0x6f56 <waves+0x656>
    6f9a:	f2 f2       	brmi	.-68     	; 0x6f58 <waves+0x658>
    6f9c:	f2 f2       	brmi	.-68     	; 0x6f5a <waves+0x65a>
    6f9e:	f2 f3       	brmi	.-4      	; 0x6f9c <waves+0x69c>
    6fa0:	f3 f3       	brvs	.-4      	; 0x6f9e <waves+0x69e>
    6fa2:	f3 f3       	brvs	.-4      	; 0x6fa0 <waves+0x6a0>
    6fa4:	f3 f3       	brvs	.-4      	; 0x6fa2 <waves+0x6a2>
    6fa6:	f3 f3       	brvs	.-4      	; 0x6fa4 <waves+0x6a4>
    6fa8:	f3 f3       	brvs	.-4      	; 0x6fa6 <waves+0x6a6>
    6faa:	f3 f3       	brvs	.-4      	; 0x6fa8 <waves+0x6a8>
    6fac:	f3 f3       	brvs	.-4      	; 0x6faa <waves+0x6aa>
    6fae:	f3 f3       	brvs	.-4      	; 0x6fac <waves+0x6ac>
    6fb0:	f3 f3       	brvs	.-4      	; 0x6fae <waves+0x6ae>
    6fb2:	f3 f3       	brvs	.-4      	; 0x6fb0 <waves+0x6b0>
    6fb4:	f3 f3       	brvs	.-4      	; 0x6fb2 <waves+0x6b2>
    6fb6:	f3 f3       	brvs	.-4      	; 0x6fb4 <waves+0x6b4>
    6fb8:	f3 f3       	brvs	.-4      	; 0x6fb6 <waves+0x6b6>
    6fba:	f3 f3       	brvs	.-4      	; 0x6fb8 <waves+0x6b8>
    6fbc:	f3 f3       	brvs	.-4      	; 0x6fba <waves+0x6ba>
    6fbe:	f3 f3       	brvs	.-4      	; 0x6fbc <waves+0x6bc>
    6fc0:	f3 f3       	brvs	.-4      	; 0x6fbe <waves+0x6be>
    6fc2:	f3 f3       	brvs	.-4      	; 0x6fc0 <waves+0x6c0>
    6fc4:	f3 f3       	brvs	.-4      	; 0x6fc2 <waves+0x6c2>
    6fc6:	f3 f3       	brvs	.-4      	; 0x6fc4 <waves+0x6c4>
    6fc8:	f3 f3       	brvs	.-4      	; 0x6fc6 <waves+0x6c6>
    6fca:	f3 f3       	brvs	.-4      	; 0x6fc8 <waves+0x6c8>
    6fcc:	f3 f3       	brvs	.-4      	; 0x6fca <waves+0x6ca>
    6fce:	f3 f3       	brvs	.-4      	; 0x6fcc <waves+0x6cc>
    6fd0:	f3 f3       	brvs	.-4      	; 0x6fce <waves+0x6ce>
    6fd2:	f3 f3       	brvs	.-4      	; 0x6fd0 <waves+0x6d0>
    6fd4:	f3 f3       	brvs	.-4      	; 0x6fd2 <waves+0x6d2>
    6fd6:	f3 f3       	brvs	.-4      	; 0x6fd4 <waves+0x6d4>
    6fd8:	f3 f3       	brvs	.-4      	; 0x6fd6 <waves+0x6d6>
    6fda:	f3 f3       	brvs	.-4      	; 0x6fd8 <waves+0x6d8>
    6fdc:	f3 f3       	brvs	.-4      	; 0x6fda <waves+0x6da>
    6fde:	f3 f3       	brvs	.-4      	; 0x6fdc <waves+0x6dc>
    6fe0:	f2 f2       	brmi	.-68     	; 0x6f9e <waves+0x69e>
    6fe2:	f2 f2       	brmi	.-68     	; 0x6fa0 <waves+0x6a0>
    6fe4:	f2 f2       	brmi	.-68     	; 0x6fa2 <waves+0x6a2>
    6fe6:	f2 f2       	brmi	.-68     	; 0x6fa4 <waves+0x6a4>
    6fe8:	f1 f1       	breq	.+124    	; 0x7066 <waves+0x766>
    6fea:	f1 f1       	breq	.+124    	; 0x7068 <waves+0x768>
    6fec:	f0 f0       	brcs	.+60     	; 0x702a <waves+0x72a>
    6fee:	f0 ef       	ldi	r31, 0xF0	; 240
    6ff0:	ef ee       	ldi	r30, 0xEF	; 239
    6ff2:	ed ec       	ldi	r30, 0xCD	; 205
    6ff4:	eb ea       	ldi	r30, 0xAB	; 171
    6ff6:	e9 e7       	ldi	r30, 0x79	; 121
    6ff8:	e5 e3       	ldi	r30, 0x35	; 53
    6ffa:	df db       	rcall	.-2114   	; 0x67ba <steptable+0xb2>
    6ffc:	d5 cc       	rjmp	.-1622   	; 0x69a8 <waves+0xa8>
    6ffe:	c6 00       	.word	0x00c6	; ????
    7000:	00 28       	or	r0, r0
    7002:	3d 42       	sbci	r19, 0x2D	; 45
    7004:	30 2d       	mov	r19, r0
    7006:	2c 2b       	or	r18, r28
    7008:	2c 2d       	mov	r18, r12
    700a:	2e 2f       	mov	r18, r30
    700c:	30 32       	cpi	r19, 0x20	; 32
    700e:	33 35       	cpi	r19, 0x53	; 83
    7010:	37 39       	cpi	r19, 0x97	; 151
    7012:	3b 3d       	cpi	r19, 0xDB	; 219
    7014:	3f 41       	sbci	r19, 0x1F	; 31
    7016:	43 45       	sbci	r20, 0x53	; 83
    7018:	48 4a       	sbci	r20, 0xA8	; 168
    701a:	4c 4e       	sbci	r20, 0xEC	; 236
    701c:	50 53       	subi	r21, 0x30	; 48
    701e:	55 57       	subi	r21, 0x75	; 117
    7020:	59 5b       	subi	r21, 0xB9	; 185
    7022:	5d 5f       	subi	r21, 0xFD	; 253
    7024:	61 63       	ori	r22, 0x31	; 49
    7026:	65 67       	ori	r22, 0x75	; 117
    7028:	69 6b       	ori	r22, 0xB9	; 185
    702a:	6c 6e       	ori	r22, 0xEC	; 236
    702c:	70 71       	andi	r23, 0x10	; 16
    702e:	73 74       	andi	r23, 0x43	; 67
    7030:	75 77       	andi	r23, 0x75	; 117
    7032:	78 79       	andi	r23, 0x98	; 152
    7034:	7a 7b       	andi	r23, 0xBA	; 186
    7036:	7c 7d       	andi	r23, 0xDC	; 220
    7038:	7d 7e       	andi	r23, 0xED	; 237
    703a:	7e 7f       	andi	r23, 0xFE	; 254
    703c:	7f 7f       	andi	r23, 0xFF	; 255
    703e:	7f 7f       	andi	r23, 0xFF	; 255
    7040:	7f 7f       	andi	r23, 0xFF	; 255
    7042:	7f 7f       	andi	r23, 0xFF	; 255
    7044:	7f 7f       	andi	r23, 0xFF	; 255
    7046:	7e 7e       	andi	r23, 0xEE	; 238
    7048:	7d 7d       	andi	r23, 0xDD	; 221
    704a:	7c 7b       	andi	r23, 0xBC	; 188
    704c:	7a 79       	andi	r23, 0x9A	; 154
    704e:	78 77       	andi	r23, 0x78	; 120
    7050:	75 74       	andi	r23, 0x45	; 69
    7052:	73 71       	andi	r23, 0x13	; 19
    7054:	70 6e       	ori	r23, 0xE0	; 224
    7056:	6c 6b       	ori	r22, 0xBC	; 188
    7058:	69 67       	ori	r22, 0x79	; 121
    705a:	65 63       	ori	r22, 0x35	; 53
    705c:	61 5f       	subi	r22, 0xF1	; 241
    705e:	5d 5b       	subi	r21, 0xBD	; 189
    7060:	59 57       	subi	r21, 0x79	; 121
    7062:	55 53       	subi	r21, 0x35	; 53
    7064:	50 4e       	sbci	r21, 0xE0	; 224
    7066:	4c 4a       	sbci	r20, 0xAC	; 172
    7068:	48 45       	sbci	r20, 0x58	; 88
    706a:	43 41       	sbci	r20, 0x13	; 19
    706c:	3f 3d       	cpi	r19, 0xDF	; 223
    706e:	3b 39       	cpi	r19, 0x9B	; 155
    7070:	37 35       	cpi	r19, 0x57	; 87
    7072:	33 32       	cpi	r19, 0x23	; 35
    7074:	30 2f       	mov	r19, r16
    7076:	2e 2d       	mov	r18, r14
    7078:	2c 2b       	or	r18, r28
    707a:	2c 2d       	mov	r18, r12
    707c:	30 42       	sbci	r19, 0x20	; 32
    707e:	3d 28       	or	r3, r13
    7080:	00 e9       	ldi	r16, 0x90	; 144
    7082:	e5 fe       	sbrs	r14, 5
    7084:	d4 d7       	rcall	.+4008   	; 0x802e <__data_load_end+0x71c>
    7086:	d7 d7       	rcall	.+4014   	; 0x8036 <__data_load_end+0x724>
    7088:	d6 d4       	rcall	.+2476   	; 0x7a36 <__data_load_end+0x124>
    708a:	d2 d0       	rcall	.+420    	; 0x7230 <waves+0x930>
    708c:	ce cc       	rjmp	.-1636   	; 0x6a2a <waves+0x12a>
    708e:	ca c8       	rjmp	.-3692   	; 0x6224 <ProcessMusic+0x98>
    7090:	c6 c3       	rjmp	.+1932   	; 0x781e <load_splash>
    7092:	c1 bf       	out	0x31, r28	; 49
    7094:	bd ba       	out	0x1d, r11	; 29
    7096:	b8 b6       	in	r11, 0x38	; 56
    7098:	b4 b1       	in	r27, 0x04	; 4
    709a:	af ad       	ldd	r26, Y+63	; 0x3f
    709c:	ab a9       	ldd	r26, Y+51	; 0x33
    709e:	a7 a5       	ldd	r26, Z+47	; 0x2f
    70a0:	a3 a1       	ldd	r26, Z+35	; 0x23
    70a2:	9f 9e       	mul	r9, r31
    70a4:	9c 9a       	sbi	0x13, 4	; 19
    70a6:	99 97       	sbiw	r26, 0x29	; 41
    70a8:	95 94       	asr	r9
    70aa:	93 91       	.word	0x9193	; ????
    70ac:	90 8f       	std	Z+24, r25	; 0x18
    70ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    70b0:	8b 8a       	std	Y+19, r8	; 0x13
    70b2:	89 88       	ldd	r8, Y+17	; 0x11
    70b4:	88 87       	std	Y+8, r24	; 0x08
    70b6:	86 85       	ldd	r24, Z+14	; 0x0e
    70b8:	85 84       	ldd	r8, Z+13	; 0x0d
    70ba:	84 84       	ldd	r8, Z+12	; 0x0c
    70bc:	83 83       	std	Z+3, r24	; 0x03
    70be:	83 83       	std	Z+3, r24	; 0x03
    70c0:	83 83       	std	Z+3, r24	; 0x03
    70c2:	83 83       	std	Z+3, r24	; 0x03
    70c4:	83 84       	ldd	r8, Z+11	; 0x0b
    70c6:	84 84       	ldd	r8, Z+12	; 0x0c
    70c8:	85 85       	ldd	r24, Z+13	; 0x0d
    70ca:	86 87       	std	Z+14, r24	; 0x0e
    70cc:	88 88       	ldd	r8, Y+16	; 0x10
    70ce:	89 8a       	std	Y+17, r8	; 0x11
    70d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    70d2:	8d 8f       	std	Y+29, r24	; 0x1d
    70d4:	90 91 93 94 	lds	r25, 0x9493
    70d8:	95 97       	sbiw	r26, 0x25	; 37
    70da:	99 9a       	sbi	0x13, 1	; 19
    70dc:	9c 9e       	mul	r9, r28
    70de:	9f a1       	ldd	r25, Y+39	; 0x27
    70e0:	a3 a5       	ldd	r26, Z+43	; 0x2b
    70e2:	a7 a9       	ldd	r26, Z+55	; 0x37
    70e4:	ab ad       	ldd	r26, Y+59	; 0x3b
    70e6:	af b1       	in	r26, 0x0f	; 15
    70e8:	b4 b6       	in	r11, 0x34	; 52
    70ea:	b8 ba       	out	0x18, r11	; 24
    70ec:	bd bf       	out	0x3d, r27	; 61
    70ee:	c1 c3       	rjmp	.+1922   	; 0x7872 <load_splash+0x54>
    70f0:	c6 c8       	rjmp	.-3700   	; 0x627e <ProcessMusic+0xf2>
    70f2:	ca cc       	rjmp	.-1644   	; 0x6a88 <waves+0x188>
    70f4:	ce d0       	rcall	.+412    	; 0x7292 <waves+0x992>
    70f6:	d2 d4       	rcall	.+2468   	; 0x7a9c <__data_load_end+0x18a>
    70f8:	d6 d7       	rcall	.+4012   	; 0x80a6 <__data_load_end+0x794>
    70fa:	d7 d7       	rcall	.+4014   	; 0x80aa <__data_load_end+0x798>
    70fc:	d4 fe       	sbrs	r13, 4
    70fe:	e5 e9       	ldi	r30, 0x95	; 149
    7100:	f9 f8       	.word	0xf8f9	; ????
    7102:	f9 f5       	brne	.+126    	; 0x7182 <waves+0x882>
    7104:	eb e1       	ldi	r30, 0x1B	; 27
    7106:	dd de       	rcall	.-582    	; 0x6ec2 <waves+0x5c2>
    7108:	e0 e2       	ldi	r30, 0x20	; 32
    710a:	e4 e5       	ldi	r30, 0x54	; 84
    710c:	e6 e5       	ldi	r30, 0x56	; 86
    710e:	e4 e2       	ldi	r30, 0x24	; 36
    7110:	de d9       	rcall	.-3140   	; 0x64ce <ProcessMusic+0x342>
    7112:	d2 ca       	rjmp	.-2652   	; 0x66b8 <esmw+0x84>
    7114:	c1 b7       	in	r28, 0x31	; 49
    7116:	ac a2       	std	Y+36, r10	; 0x24
    7118:	99 91       	ld	r25, Y+
    711a:	8a 86       	std	Y+10, r8	; 0x0a
    711c:	83 81       	ldd	r24, Z+3	; 0x03
    711e:	80 80       	ld	r8, Z
    7120:	81 82       	std	Z+1, r8	; 0x01
    7122:	83 85       	ldd	r24, Z+11	; 0x0b
    7124:	86 88       	ldd	r8, Z+22	; 0x16
    7126:	8a 8c       	ldd	r8, Y+26	; 0x1a
    7128:	8d 8f       	std	Y+29, r24	; 0x1d
    712a:	90 92 93 95 	sts	0x9593, r9
    712e:	96 97       	sbiw	r26, 0x26	; 38
    7130:	98 99       	sbic	0x13, 0	; 19
    7132:	9a 9b       	sbis	0x13, 2	; 19
    7134:	9b 9c       	mul	r9, r11
    7136:	9d 9d       	mul	r25, r13
    7138:	9d 9e       	mul	r9, r29
    713a:	9e 9e       	mul	r9, r30
    713c:	9f 9f       	mul	r25, r31
    713e:	9f 9f       	mul	r25, r31
    7140:	9f 9f       	mul	r25, r31
    7142:	9f 9e       	mul	r9, r31
    7144:	9e 9e       	mul	r9, r30
    7146:	9d 9d       	mul	r25, r13
    7148:	9d 9c       	mul	r9, r13
    714a:	9b 9b       	sbis	0x13, 3	; 19
    714c:	9a 99       	sbic	0x13, 2	; 19
    714e:	98 97       	sbiw	r26, 0x28	; 40
    7150:	96 95       	lsr	r25
    7152:	93 92       	.word	0x9293	; ????
    7154:	90 8f       	std	Z+24, r25	; 0x18
    7156:	8d 8c       	ldd	r8, Y+29	; 0x1d
    7158:	8a 88       	ldd	r8, Y+18	; 0x12
    715a:	86 85       	ldd	r24, Z+14	; 0x0e
    715c:	83 82       	std	Z+3, r8	; 0x03
    715e:	81 80       	ldd	r8, Z+1	; 0x01
    7160:	80 81       	ld	r24, Z
    7162:	83 86       	std	Z+11, r8	; 0x0b
    7164:	8a 91       	ld	r24, -Y
    7166:	99 a2       	std	Y+33, r9	; 0x21
    7168:	ac b7       	in	r26, 0x3c	; 60
    716a:	c1 ca       	rjmp	.-2686   	; 0x66ee <esmw+0xba>
    716c:	d2 d9       	rcall	.-3164   	; 0x6512 <ProcessMusic+0x386>
    716e:	de e2       	ldi	r29, 0x2E	; 46
    7170:	e4 e5       	ldi	r30, 0x54	; 84
    7172:	e6 e5       	ldi	r30, 0x56	; 86
    7174:	e4 e2       	ldi	r30, 0x24	; 36
    7176:	e0 de       	rcall	.-576    	; 0x6f38 <waves+0x638>
    7178:	dd e1       	ldi	r29, 0x1D	; 29
    717a:	eb f5       	brvc	.+122    	; 0x71f6 <waves+0x8f6>
    717c:	f9 f8       	.word	0xf8f9	; ????
    717e:	f9 00       	.word	0x00f9	; ????
    7180:	07 08       	sbc	r0, r7
    7182:	07 0b       	sbc	r16, r23
    7184:	15 1f       	adc	r17, r21
    7186:	23 22       	and	r2, r19
    7188:	20 1e       	adc	r2, r16
    718a:	1c 1b       	sub	r17, r28
    718c:	1a 1b       	sub	r17, r26
    718e:	1c 1e       	adc	r1, r28
    7190:	22 27       	eor	r18, r18
    7192:	2e 36       	cpi	r18, 0x6E	; 110
    7194:	3f 49       	sbci	r19, 0x9F	; 159
    7196:	54 5e       	subi	r21, 0xE4	; 228
    7198:	67 6f       	ori	r22, 0xF7	; 247
    719a:	76 7a       	andi	r23, 0xA6	; 166
    719c:	7e 7f       	andi	r23, 0xFE	; 254
    719e:	7f 7f       	andi	r23, 0xFF	; 255
    71a0:	7f 7e       	andi	r23, 0xEF	; 239
    71a2:	7d 7b       	andi	r23, 0xBD	; 189
    71a4:	7a 78       	andi	r23, 0x8A	; 138
    71a6:	76 74       	andi	r23, 0x46	; 70
    71a8:	73 71       	andi	r23, 0x13	; 19
    71aa:	70 6e       	ori	r23, 0xE0	; 224
    71ac:	6d 6b       	ori	r22, 0xBD	; 189
    71ae:	6a 69       	ori	r22, 0x9A	; 154
    71b0:	68 67       	ori	r22, 0x78	; 120
    71b2:	66 65       	ori	r22, 0x56	; 86
    71b4:	65 64       	ori	r22, 0x45	; 69
    71b6:	64 63       	ori	r22, 0x34	; 52
    71b8:	63 62       	ori	r22, 0x23	; 35
    71ba:	62 62       	ori	r22, 0x22	; 34
    71bc:	61 61       	ori	r22, 0x11	; 17
    71be:	61 61       	ori	r22, 0x11	; 17
    71c0:	61 61       	ori	r22, 0x11	; 17
    71c2:	61 62       	ori	r22, 0x21	; 33
    71c4:	62 62       	ori	r22, 0x22	; 34
    71c6:	63 63       	ori	r22, 0x33	; 51
    71c8:	63 64       	ori	r22, 0x43	; 67
    71ca:	65 65       	ori	r22, 0x55	; 85
    71cc:	66 67       	ori	r22, 0x76	; 118
    71ce:	68 69       	ori	r22, 0x98	; 152
    71d0:	6a 6b       	ori	r22, 0xBA	; 186
    71d2:	6d 6e       	ori	r22, 0xED	; 237
    71d4:	70 71       	andi	r23, 0x10	; 16
    71d6:	73 74       	andi	r23, 0x43	; 67
    71d8:	76 78       	andi	r23, 0x86	; 134
    71da:	7a 7b       	andi	r23, 0xBA	; 186
    71dc:	7d 7e       	andi	r23, 0xED	; 237
    71de:	7f 7f       	andi	r23, 0xFF	; 255
    71e0:	7f 7f       	andi	r23, 0xFF	; 255
    71e2:	7e 7a       	andi	r23, 0xAE	; 174
    71e4:	76 6f       	ori	r23, 0xF6	; 246
    71e6:	67 5e       	subi	r22, 0xE7	; 231
    71e8:	54 49       	sbci	r21, 0x94	; 148
    71ea:	3f 36       	cpi	r19, 0x6F	; 111
    71ec:	2e 27       	eor	r18, r30
    71ee:	22 1e       	adc	r2, r18
    71f0:	1c 1b       	sub	r17, r28
    71f2:	1a 1b       	sub	r17, r26
    71f4:	1c 1e       	adc	r1, r28
    71f6:	20 22       	and	r2, r16
    71f8:	23 1f       	adc	r18, r19
    71fa:	15 0b       	sbc	r17, r21
    71fc:	07 08       	sbc	r0, r7
    71fe:	07 00       	.word	0x0007	; ????
    7200:	1f 31       	cpi	r17, 0x1F	; 31
    7202:	3d 44       	sbci	r19, 0x4D	; 77
    7204:	4e 53       	subi	r20, 0x3E	; 62
    7206:	54 56       	subi	r21, 0x64	; 100
    7208:	5a 5f       	subi	r21, 0xFA	; 250
    720a:	64 69       	ori	r22, 0x94	; 148
    720c:	6e 74       	andi	r22, 0x4E	; 78
    720e:	76 79       	andi	r23, 0x96	; 150
    7210:	7c 7f       	andi	r23, 0xFC	; 252
    7212:	7f 7f       	andi	r23, 0xFF	; 255
    7214:	7f 7f       	andi	r23, 0xFF	; 255
    7216:	7f 7f       	andi	r23, 0xFF	; 255
    7218:	7f 7f       	andi	r23, 0xFF	; 255
    721a:	7f 7f       	andi	r23, 0xFF	; 255
    721c:	7f 7f       	andi	r23, 0xFF	; 255
    721e:	7f 7f       	andi	r23, 0xFF	; 255
    7220:	7f 7f       	andi	r23, 0xFF	; 255
    7222:	7f 7f       	andi	r23, 0xFF	; 255
    7224:	7f 7f       	andi	r23, 0xFF	; 255
    7226:	7f 7f       	andi	r23, 0xFF	; 255
    7228:	7f 7f       	andi	r23, 0xFF	; 255
    722a:	7f 7f       	andi	r23, 0xFF	; 255
    722c:	7f 7f       	andi	r23, 0xFF	; 255
    722e:	7f 7f       	andi	r23, 0xFF	; 255
    7230:	7f 7f       	andi	r23, 0xFF	; 255
    7232:	7f 7f       	andi	r23, 0xFF	; 255
    7234:	7f 7f       	andi	r23, 0xFF	; 255
    7236:	7f 7f       	andi	r23, 0xFF	; 255
    7238:	7f 7f       	andi	r23, 0xFF	; 255
    723a:	7f 7f       	andi	r23, 0xFF	; 255
    723c:	7f 7f       	andi	r23, 0xFF	; 255
    723e:	7f 7f       	andi	r23, 0xFF	; 255
    7240:	7f 7f       	andi	r23, 0xFF	; 255
    7242:	7f 7f       	andi	r23, 0xFF	; 255
    7244:	7f 7f       	andi	r23, 0xFF	; 255
    7246:	7f 7f       	andi	r23, 0xFF	; 255
    7248:	7f 7f       	andi	r23, 0xFF	; 255
    724a:	7f 7f       	andi	r23, 0xFF	; 255
    724c:	7f 7f       	andi	r23, 0xFF	; 255
    724e:	7f 7f       	andi	r23, 0xFF	; 255
    7250:	7f 7f       	andi	r23, 0xFF	; 255
    7252:	7f 7f       	andi	r23, 0xFF	; 255
    7254:	7f 7f       	andi	r23, 0xFF	; 255
    7256:	7f 7f       	andi	r23, 0xFF	; 255
    7258:	7f 7f       	andi	r23, 0xFF	; 255
    725a:	7f 7f       	andi	r23, 0xFF	; 255
    725c:	7f 7f       	andi	r23, 0xFF	; 255
    725e:	7f 7f       	andi	r23, 0xFF	; 255
    7260:	7f 7f       	andi	r23, 0xFF	; 255
    7262:	7f 7f       	andi	r23, 0xFF	; 255
    7264:	7f 7f       	andi	r23, 0xFF	; 255
    7266:	7f 7f       	andi	r23, 0xFF	; 255
    7268:	7f 7f       	andi	r23, 0xFF	; 255
    726a:	7f 7f       	andi	r23, 0xFF	; 255
    726c:	7f 7f       	andi	r23, 0xFF	; 255
    726e:	7f 7f       	andi	r23, 0xFF	; 255
    7270:	7f 7f       	andi	r23, 0xFF	; 255
    7272:	7f 7f       	andi	r23, 0xFF	; 255
    7274:	7f 7f       	andi	r23, 0xFF	; 255
    7276:	7f 7f       	andi	r23, 0xFF	; 255
    7278:	7f 7f       	andi	r23, 0xFF	; 255
    727a:	7f 7c       	andi	r23, 0xCF	; 207
    727c:	78 71       	andi	r23, 0x18	; 24
    727e:	68 4c       	sbci	r22, 0xC8	; 200
    7280:	2c 1c       	adc	r2, r12
    7282:	12 0c       	add	r1, r2
    7284:	0a 0b       	sbc	r16, r26
    7286:	0a 05       	cpc	r16, r10
    7288:	fd f3       	brhs	.-2      	; 0x7288 <waves+0x988>
    728a:	e9 df       	rcall	.-46     	; 0x725e <waves+0x95e>
    728c:	d4 ca       	rjmp	.-2648   	; 0x6836 <steptable+0x12e>
    728e:	c0 b7       	in	r28, 0x30	; 48
    7290:	ae a6       	std	Y+46, r10	; 0x2e
    7292:	9e 97       	sbiw	r26, 0x2e	; 46
    7294:	91 8b       	std	Z+17, r25	; 0x11
    7296:	86 85       	ldd	r24, Z+14	; 0x0e
    7298:	82 80       	ldd	r8, Z+2	; 0x02
    729a:	80 80       	ld	r8, Z
    729c:	80 80       	ld	r8, Z
    729e:	80 80       	ld	r8, Z
    72a0:	80 80       	ld	r8, Z
    72a2:	80 80       	ld	r8, Z
    72a4:	80 80       	ld	r8, Z
    72a6:	80 80       	ld	r8, Z
    72a8:	80 80       	ld	r8, Z
    72aa:	80 80       	ld	r8, Z
    72ac:	80 80       	ld	r8, Z
    72ae:	80 80       	ld	r8, Z
    72b0:	80 80       	ld	r8, Z
    72b2:	80 80       	ld	r8, Z
    72b4:	80 80       	ld	r8, Z
    72b6:	80 80       	ld	r8, Z
    72b8:	80 80       	ld	r8, Z
    72ba:	80 80       	ld	r8, Z
    72bc:	80 80       	ld	r8, Z
    72be:	80 80       	ld	r8, Z
    72c0:	80 80       	ld	r8, Z
    72c2:	80 80       	ld	r8, Z
    72c4:	80 80       	ld	r8, Z
    72c6:	80 80       	ld	r8, Z
    72c8:	80 80       	ld	r8, Z
    72ca:	80 80       	ld	r8, Z
    72cc:	80 80       	ld	r8, Z
    72ce:	80 80       	ld	r8, Z
    72d0:	80 80       	ld	r8, Z
    72d2:	80 80       	ld	r8, Z
    72d4:	80 80       	ld	r8, Z
    72d6:	80 80       	ld	r8, Z
    72d8:	80 80       	ld	r8, Z
    72da:	80 80       	ld	r8, Z
    72dc:	80 80       	ld	r8, Z
    72de:	80 80       	ld	r8, Z
    72e0:	80 80       	ld	r8, Z
    72e2:	80 80       	ld	r8, Z
    72e4:	80 80       	ld	r8, Z
    72e6:	80 80       	ld	r8, Z
    72e8:	80 80       	ld	r8, Z
    72ea:	80 80       	ld	r8, Z
    72ec:	80 80       	ld	r8, Z
    72ee:	80 80       	ld	r8, Z
    72f0:	80 80       	ld	r8, Z
    72f2:	80 80       	ld	r8, Z
    72f4:	80 87       	std	Z+8, r24	; 0x08
    72f6:	91 9d       	mul	r25, r1
    72f8:	ac c4       	rjmp	.+2392   	; 0x7c52 <__data_load_end+0x340>
    72fa:	cb d4       	rcall	.+2454   	; 0x7c92 <__data_load_end+0x380>
    72fc:	dd f2       	brhs	.-74     	; 0x72b4 <waves+0x9b4>
    72fe:	fa fa       	.word	0xfafa	; ????

00007300 <RestoreBackground>:
	unsigned char free_tile_index, userRamTilesCount=0,userRamTilesCount_tmp=0;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=userRamTilesCount;i<free_tile_index;i++){
    7300:	80 91 db 08 	lds	r24, 0x08DB
    7304:	90 91 62 09 	lds	r25, 0x0962
    7308:	89 17       	cp	r24, r25
    730a:	78 f4       	brcc	.+30     	; 0x732a <RestoreBackground+0x2a>
			//vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
			*ram_tiles_restore[i].addr=ram_tiles_restore[i].tileIndex;
    730c:	e8 2f       	mov	r30, r24
    730e:	f0 e0       	ldi	r31, 0x00	; 0
    7310:	9f 01       	movw	r18, r30
    7312:	22 0f       	add	r18, r18
    7314:	33 1f       	adc	r19, r19
    7316:	e2 0f       	add	r30, r18
    7318:	f3 1f       	adc	r31, r19
    731a:	e6 5c       	subi	r30, 0xC6	; 198
    731c:	f7 4f       	sbci	r31, 0xF7	; 247
    731e:	a0 81       	ld	r26, Z
    7320:	b1 81       	ldd	r27, Z+1	; 0x01
    7322:	92 81       	ldd	r25, Z+2	; 0x02
    7324:	9c 93       	st	X, r25
	unsigned char free_tile_index, userRamTilesCount=0,userRamTilesCount_tmp=0;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=userRamTilesCount;i<free_tile_index;i++){
    7326:	8f 5f       	subi	r24, 0xFF	; 255
    7328:	ed cf       	rjmp	.-38     	; 0x7304 <RestoreBackground+0x4>
			//vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
			*ram_tiles_restore[i].addr=ram_tiles_restore[i].tileIndex;
		}	
	}
    732a:	08 95       	ret

0000732c <ProcessSprites>:
		}

	}
	*/

	void ProcessSprites(){
    732c:	2f 92       	push	r2
    732e:	3f 92       	push	r3
    7330:	4f 92       	push	r4
    7332:	5f 92       	push	r5
    7334:	6f 92       	push	r6
    7336:	7f 92       	push	r7
    7338:	8f 92       	push	r8
    733a:	9f 92       	push	r9
    733c:	af 92       	push	r10
    733e:	bf 92       	push	r11
    7340:	cf 92       	push	r12
    7342:	df 92       	push	r13
    7344:	ef 92       	push	r14
    7346:	ff 92       	push	r15
    7348:	0f 93       	push	r16
    734a:	1f 93       	push	r17
    734c:	cf 93       	push	r28
    734e:	df 93       	push	r29
    7350:	00 d0       	rcall	.+0      	; 0x7352 <ProcessSprites+0x26>
    7352:	00 d0       	rcall	.+0      	; 0x7354 <ProcessSprites+0x28>
    7354:	cd b7       	in	r28, 0x3d	; 61
    7356:	de b7       	in	r29, 0x3e	; 62
	
		unsigned char i,bx,by,dx,dy,bt,x,y,tx=1,ty=1,wx,wy;
		unsigned int ramPtr,ssx,ssy;

		if(!spritesOn) return;
    7358:	80 91 00 01 	lds	r24, 0x0100
    735c:	88 23       	and	r24, r24
    735e:	09 f4       	brne	.+2      	; 0x7362 <ProcessSprites+0x36>
    7360:	e0 c0       	rjmp	.+448    	; 0x7522 <ProcessSprites+0x1f6>

		userRamTilesCount=userRamTilesCount_tmp;
    7362:	80 91 da 08 	lds	r24, 0x08DA
    7366:	80 93 db 08 	sts	0x08DB, r24
		free_tile_index=userRamTilesCount;
    736a:	80 93 62 09 	sts	0x0962, r24
    736e:	e2 e0       	ldi	r30, 0x02	; 2
    7370:	ce 2e       	mov	r12, r30
    7372:	e1 e0       	ldi	r30, 0x01	; 1
    7374:	de 2e       	mov	r13, r30
	
		for(i=0;i<MAX_SPRITES;i++){
    7376:	71 2c       	mov	r7, r1
			bx=sprites[i].x;
    7378:	f6 01       	movw	r30, r12
    737a:	20 81       	ld	r18, Z

			if(bx!=(SCREEN_TILES_H*TILE_WIDTH)){
    737c:	20 3e       	cpi	r18, 0xE0	; 224
    737e:	09 f4       	brne	.+2      	; 0x7382 <ProcessSprites+0x56>
    7380:	b1 c0       	rjmp	.+354    	; 0x74e4 <ProcessSprites+0x1b8>
				//get tile's screen section offsets
				
				#if SCROLLING == 1
					ssx=sprites[i].x+Screen.scrollX;
    7382:	80 91 9c 08 	lds	r24, 0x089C
    7386:	90 e0       	ldi	r25, 0x00	; 0
    7388:	82 0f       	add	r24, r18
    738a:	91 1d       	adc	r25, r1
					ssy=sprites[i].y+Screen.scrollY;
    738c:	41 81       	ldd	r20, Z+1	; 0x01
    738e:	20 91 9d 08 	lds	r18, 0x089D
    7392:	30 e0       	ldi	r19, 0x00	; 0
    7394:	24 0f       	add	r18, r20
    7396:	31 1d       	adc	r19, r1

				tx=1;
				ty=1;

				//get the BG tiles that are overlapped by the sprite
				bx=ssx>>3;
    7398:	ac 01       	movw	r20, r24
    739a:	73 e0       	ldi	r23, 0x03	; 3
    739c:	56 95       	lsr	r21
    739e:	47 95       	ror	r20
    73a0:	7a 95       	dec	r23
    73a2:	e1 f7       	brne	.-8      	; 0x739c <ProcessSprites+0x70>
    73a4:	64 2e       	mov	r6, r20
				dx=ssx&0x7;
    73a6:	87 70       	andi	r24, 0x07	; 7
				if(dx>0) tx++;
    73a8:	11 f0       	breq	.+4      	; 0x73ae <ProcessSprites+0x82>
    73aa:	92 e0       	ldi	r25, 0x02	; 2
    73ac:	01 c0       	rjmp	.+2      	; 0x73b0 <ProcessSprites+0x84>
   				#else
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
    73ae:	91 e0       	ldi	r25, 0x01	; 1
    73b0:	99 83       	std	Y+1, r25	; 0x01
				dx=ssx&0x7;
				if(dx>0) tx++;

				//by=ssy>>3;
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
    73b2:	a9 01       	movw	r20, r18
    73b4:	63 e0       	ldi	r22, 0x03	; 3
    73b6:	56 95       	lsr	r21
    73b8:	47 95       	ror	r20
    73ba:	6a 95       	dec	r22
    73bc:	e1 f7       	brne	.-8      	; 0x73b6 <ProcessSprites+0x8a>
    73be:	54 2e       	mov	r5, r20
				dy=ssy%TILE_HEIGHT;
    73c0:	27 70       	andi	r18, 0x07	; 7
				if(dy>0) ty++;			
    73c2:	19 f0       	breq	.+6      	; 0x73ca <ProcessSprites+0x9e>
    73c4:	52 e0       	ldi	r21, 0x02	; 2
    73c6:	35 2e       	mov	r3, r21
    73c8:	02 c0       	rjmp	.+4      	; 0x73ce <ProcessSprites+0xa2>
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
				ty=1;
    73ca:	33 24       	eor	r3, r3
    73cc:	33 94       	inc	r3
								bt=free_tile_index;
								free_tile_index++;
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    73ce:	30 e0       	ldi	r19, 0x00	; 0
    73d0:	32 2f       	mov	r19, r18
    73d2:	22 27       	eor	r18, r18
    73d4:	f9 01       	movw	r30, r18
    73d6:	e8 0f       	add	r30, r24
    73d8:	f1 1d       	adc	r31, r1
    73da:	fc 83       	std	Y+4, r31	; 0x04
    73dc:	eb 83       	std	Y+3, r30	; 0x03
    73de:	e1 2c       	mov	r14, r1
    73e0:	f1 2c       	mov	r15, r1
    73e2:	be 2c       	mov	r11, r14
    73e4:	aa 24       	eor	r10, r10
    73e6:	26 2c       	mov	r2, r6
    73e8:	45 2c       	mov	r4, r5
    73ea:	4e 0c       	add	r4, r14
								    wy-=(VRAM_TILES_V*2);
							    }else if(wy>=VRAM_TILES_V){
							    	wy-=VRAM_TILES_V;
							    }
                            #else
                                if(wy>=(Screen.scrollHeight*2)){
    73ec:	84 2c       	mov	r8, r4
    73ee:	91 2c       	mov	r9, r1
    73f0:	84 2d       	mov	r24, r4
    73f2:	20 91 9e 08 	lds	r18, 0x089E
    73f6:	42 2f       	mov	r20, r18
    73f8:	50 e0       	ldi	r21, 0x00	; 0
    73fa:	44 0f       	add	r20, r20
    73fc:	55 1f       	adc	r21, r21
    73fe:	84 16       	cp	r8, r20
    7400:	95 06       	cpc	r9, r21
    7402:	14 f0       	brlt	.+4      	; 0x7408 <ProcessSprites+0xdc>
								    wy-=(Screen.scrollHeight*2);
    7404:	22 0f       	add	r18, r18
    7406:	03 c0       	rjmp	.+6      	; 0x740e <ProcessSprites+0xe2>
							    }else if(wy>=Screen.scrollHeight){
    7408:	42 16       	cp	r4, r18
    740a:	10 f0       	brcs	.+4      	; 0x7410 <ProcessSprites+0xe4>
							    	wy-=Screen.scrollHeight;
    740c:	84 2d       	mov	r24, r4
    740e:	82 1b       	sub	r24, r18
							    }
                            #endif
							if(wx>=VRAM_TILES_H)wx-=VRAM_TILES_H; //should always be 32
    7410:	ff e1       	ldi	r31, 0x1F	; 31
    7412:	f2 15       	cp	r31, r2
    7414:	18 f4       	brcc	.+6      	; 0x741c <ProcessSprites+0xf0>
    7416:	00 ee       	ldi	r16, 0xE0	; 224
    7418:	02 0d       	add	r16, r2
    741a:	01 c0       	rjmp	.+2      	; 0x741e <ProcessSprites+0xf2>
    741c:	02 2d       	mov	r16, r2

							#if SCROLLING == 0
								ramPtr=(wy*VRAM_TILES_H)+wx;
							#else

								ramPtr=((wy>>3)*256)+(wx*8)+(wy&7);	
    741e:	28 2f       	mov	r18, r24
    7420:	26 95       	lsr	r18
    7422:	26 95       	lsr	r18
    7424:	26 95       	lsr	r18
    7426:	10 e0       	ldi	r17, 0x00	; 0
    7428:	40 e2       	ldi	r20, 0x20	; 32
    742a:	24 9f       	mul	r18, r20
    742c:	00 0d       	add	r16, r0
    742e:	11 1d       	adc	r17, r1
    7430:	11 24       	eor	r1, r1
    7432:	23 e0       	ldi	r18, 0x03	; 3
    7434:	00 0f       	add	r16, r16
    7436:	11 1f       	adc	r17, r17
    7438:	2a 95       	dec	r18
    743a:	e1 f7       	brne	.-8      	; 0x7434 <ProcessSprites+0x108>
    743c:	87 70       	andi	r24, 0x07	; 7
    743e:	08 0f       	add	r16, r24
    7440:	11 1d       	adc	r17, r1

							#endif

							bt=vram[ramPtr];						
    7442:	00 5e       	subi	r16, 0xE0	; 224
    7444:	15 4f       	sbci	r17, 0xF5	; 245
    7446:	f8 01       	movw	r30, r16
    7448:	70 81       	ld	r23, Z

							if( ((bt>=RAM_TILES_COUNT) | (bt<userRamTilesCount)) && (free_tile_index < RAM_TILES_COUNT) ){ //if no ram free ignore tile
    744a:	81 e0       	ldi	r24, 0x01	; 1
    744c:	7c 31       	cpi	r23, 0x1C	; 28
    744e:	08 f4       	brcc	.+2      	; 0x7452 <ProcessSprites+0x126>
    7450:	80 e0       	ldi	r24, 0x00	; 0
    7452:	21 e0       	ldi	r18, 0x01	; 1
    7454:	30 91 db 08 	lds	r19, 0x08DB
    7458:	73 17       	cp	r23, r19
    745a:	18 f0       	brcs	.+6      	; 0x7462 <ProcessSprites+0x136>
    745c:	20 e0       	ldi	r18, 0x00	; 0
    745e:	88 23       	and	r24, r24
    7460:	51 f1       	breq	.+84     	; 0x74b6 <ProcessSprites+0x18a>
    7462:	60 91 62 09 	lds	r22, 0x0962
    7466:	6c 31       	cpi	r22, 0x1C	; 28
    7468:	20 f5       	brcc	.+72     	; 0x74b2 <ProcessSprites+0x186>
								if( bt>=RAM_TILES_COUNT ){
    746a:	88 23       	and	r24, r24
    746c:	31 f0       	breq	.+12     	; 0x747a <ProcessSprites+0x14e>
									//tile is mapped to flash. Copy it to next free RAM tile.
									CopyFlashTile(bt-RAM_TILES_COUNT,free_tile_index);
    746e:	84 ee       	ldi	r24, 0xE4	; 228
    7470:	87 0f       	add	r24, r23
    7472:	7a 83       	std	Y+2, r23	; 0x02
    7474:	0e 94 5f 2a 	call	0x54be	; 0x54be <CopyFlashTile>
    7478:	06 c0       	rjmp	.+12     	; 0x7486 <ProcessSprites+0x15a>
								}else if(bt<userRamTilesCount){
    747a:	22 23       	and	r18, r18
    747c:	29 f0       	breq	.+10     	; 0x7488 <ProcessSprites+0x15c>
									//tile is a user ram tile. Copy it to next free RAM tile.
									CopyRamTile(bt,free_tile_index);
    747e:	87 2f       	mov	r24, r23
    7480:	7a 83       	std	Y+2, r23	; 0x02
    7482:	0e 94 ee 2a 	call	0x55dc	; 0x55dc <CopyRamTile>
    7486:	7a 81       	ldd	r23, Y+2	; 0x02
								}
								ram_tiles_restore[free_tile_index].addr=(&vram[ramPtr]);
    7488:	80 91 62 09 	lds	r24, 0x0962
    748c:	e8 2f       	mov	r30, r24
    748e:	f0 e0       	ldi	r31, 0x00	; 0
    7490:	9f 01       	movw	r18, r30
    7492:	22 0f       	add	r18, r18
    7494:	33 1f       	adc	r19, r19
    7496:	e2 0f       	add	r30, r18
    7498:	f3 1f       	adc	r31, r19
    749a:	e6 5c       	subi	r30, 0xC6	; 198
    749c:	f7 4f       	sbci	r31, 0xF7	; 247
    749e:	11 83       	std	Z+1, r17	; 0x01
    74a0:	00 83       	st	Z, r16
								ram_tiles_restore[free_tile_index].tileIndex=bt;
    74a2:	72 83       	std	Z+2, r23	; 0x02
								vram[ramPtr]=free_tile_index;
    74a4:	f8 01       	movw	r30, r16
    74a6:	80 83       	st	Z, r24
								bt=free_tile_index;
								free_tile_index++;
    74a8:	21 e0       	ldi	r18, 0x01	; 1
    74aa:	28 0f       	add	r18, r24
    74ac:	20 93 62 09 	sts	0x0962, r18
									CopyRamTile(bt,free_tile_index);
								}
								ram_tiles_restore[free_tile_index].addr=(&vram[ramPtr]);
								ram_tiles_restore[free_tile_index].tileIndex=bt;
								vram[ramPtr]=free_tile_index;
								bt=free_tile_index;
    74b0:	78 2f       	mov	r23, r24
								free_tile_index++;
							}
				
							if(bt<RAM_TILES_COUNT){				
    74b2:	7c 31       	cpi	r23, 0x1C	; 28
    74b4:	38 f4       	brcc	.+14     	; 0x74c4 <ProcessSprites+0x198>
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    74b6:	2b 81       	ldd	r18, Y+3	; 0x03
    74b8:	3c 81       	ldd	r19, Y+4	; 0x04
    74ba:	a5 01       	movw	r20, r10
    74bc:	67 2f       	mov	r22, r23
    74be:	87 2d       	mov	r24, r7
    74c0:	0e 94 7b 2b 	call	0x56f6	; 0x56f6 <BlitSprite>
    74c4:	ff ef       	ldi	r31, 0xFF	; 255
    74c6:	af 1a       	sub	r10, r31
    74c8:	bf 0a       	sbc	r11, r31
    74ca:	23 94       	inc	r2
    74cc:	82 2d       	mov	r24, r2
    74ce:	86 19       	sub	r24, r6
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){

					for(x=0;x<tx;x++){
    74d0:	99 81       	ldd	r25, Y+1	; 0x01
    74d2:	89 17       	cp	r24, r25
    74d4:	08 f4       	brcc	.+2      	; 0x74d8 <ProcessSprites+0x1ac>
    74d6:	8c cf       	rjmp	.-232    	; 0x73f0 <ProcessSprites+0xc4>
    74d8:	ef ef       	ldi	r30, 0xFF	; 255
    74da:	ee 1a       	sub	r14, r30
    74dc:	fe 0a       	sbc	r15, r30
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){
    74de:	e3 14       	cp	r14, r3
    74e0:	08 f4       	brcc	.+2      	; 0x74e4 <ProcessSprites+0x1b8>
    74e2:	7f cf       	rjmp	.-258    	; 0x73e2 <ProcessSprites+0xb6>
		if(!spritesOn) return;

		userRamTilesCount=userRamTilesCount_tmp;
		free_tile_index=userRamTilesCount;
	
		for(i=0;i<MAX_SPRITES;i++){
    74e4:	73 94       	inc	r7
    74e6:	f4 e0       	ldi	r31, 0x04	; 4
    74e8:	cf 0e       	add	r12, r31
    74ea:	d1 1c       	adc	r13, r1
    74ec:	4e e0       	ldi	r20, 0x0E	; 14
    74ee:	74 12       	cpse	r7, r20
    74f0:	43 cf       	rjmp	.-378    	; 0x7378 <ProcessSprites+0x4c>


		//restore BG tiles
		RestoreBackground();

	}
    74f2:	0f 90       	pop	r0
    74f4:	0f 90       	pop	r0
    74f6:	0f 90       	pop	r0
    74f8:	0f 90       	pop	r0
    74fa:	df 91       	pop	r29
    74fc:	cf 91       	pop	r28
    74fe:	1f 91       	pop	r17
    7500:	0f 91       	pop	r16
    7502:	ff 90       	pop	r15
    7504:	ef 90       	pop	r14
    7506:	df 90       	pop	r13
    7508:	cf 90       	pop	r12
    750a:	bf 90       	pop	r11
    750c:	af 90       	pop	r10
    750e:	9f 90       	pop	r9
    7510:	8f 90       	pop	r8
    7512:	7f 90       	pop	r7
    7514:	6f 90       	pop	r6
    7516:	5f 90       	pop	r5
    7518:	4f 90       	pop	r4
    751a:	3f 90       	pop	r3
    751c:	2f 90       	pop	r2
			}//	if(bx<(SCREEN_TILES_H*TILE_WIDTH))		
		}


		//restore BG tiles
		RestoreBackground();
    751e:	0c 94 80 39 	jmp	0x7300	; 0x7300 <RestoreBackground>

	}
    7522:	0f 90       	pop	r0
    7524:	0f 90       	pop	r0
    7526:	0f 90       	pop	r0
    7528:	0f 90       	pop	r0
    752a:	df 91       	pop	r29
    752c:	cf 91       	pop	r28
    752e:	1f 91       	pop	r17
    7530:	0f 91       	pop	r16
    7532:	ff 90       	pop	r15
    7534:	ef 90       	pop	r14
    7536:	df 90       	pop	r13
    7538:	cf 90       	pop	r12
    753a:	bf 90       	pop	r11
    753c:	af 90       	pop	r10
    753e:	9f 90       	pop	r9
    7540:	8f 90       	pop	r8
    7542:	7f 90       	pop	r7
    7544:	6f 90       	pop	r6
    7546:	5f 90       	pop	r5
    7548:	4f 90       	pop	r4
    754a:	3f 90       	pop	r3
    754c:	2f 90       	pop	r2
    754e:	08 95       	ret

00007550 <MapSprite2>:
		}

	}


	void MapSprite2(unsigned char startSprite,const char *map,u8 spriteFlags){      
    7550:	df 92       	push	r13
    7552:	ef 92       	push	r14
    7554:	ff 92       	push	r15
    7556:	0f 93       	push	r16
    7558:	1f 93       	push	r17
    755a:	cf 93       	push	r28
    755c:	df 93       	push	r29
    755e:	db 01       	movw	r26, r22
    
		unsigned char mapWidth=pgm_read_byte(&(map[0]));
    7560:	fb 01       	movw	r30, r22
    7562:	14 91       	lpm	r17, Z
		unsigned char mapHeight=pgm_read_byte(&(map[1]));
    7564:	31 96       	adiw	r30, 0x01	; 1
    7566:	64 91       	lpm	r22, Z
    7568:	5f ef       	ldi	r21, 0xFF	; 255
    756a:	51 0f       	add	r21, r17
		s8 x,y,dx,dy,t; 

		if(spriteFlags & SPRITE_FLIP_X){
    756c:	24 2f       	mov	r18, r20
    756e:	21 70       	andi	r18, 0x01	; 1
    7570:	40 ff       	sbrs	r20, 0
    7572:	04 c0       	rjmp	.+8      	; 0x757c <MapSprite2+0x2c>
			x=(mapWidth-1);
    7574:	95 2f       	mov	r25, r21
			dx=-1;
    7576:	ff 24       	eor	r15, r15
    7578:	fa 94       	dec	r15
    757a:	03 c0       	rjmp	.+6      	; 0x7582 <MapSprite2+0x32>
		}else{
			x=0;
			dx=1;
    757c:	ff 24       	eor	r15, r15
    757e:	f3 94       	inc	r15

		if(spriteFlags & SPRITE_FLIP_X){
			x=(mapWidth-1);
			dx=-1;
		}else{
			x=0;
    7580:	90 e0       	ldi	r25, 0x00	; 0
			dx=1;
		}

		if(spriteFlags & SPRITE_FLIP_Y){
    7582:	41 ff       	sbrs	r20, 1
    7584:	05 c0       	rjmp	.+10     	; 0x7590 <MapSprite2+0x40>
			y=(mapHeight-1);
    7586:	7f ef       	ldi	r23, 0xFF	; 255
    7588:	76 0f       	add	r23, r22
			dy=-1;
    758a:	ee 24       	eor	r14, r14
    758c:	ea 94       	dec	r14
    758e:	03 c0       	rjmp	.+6      	; 0x7596 <MapSprite2+0x46>
		}else{
			y=0;
			dy=1;
    7590:	ee 24       	eor	r14, r14
    7592:	e3 94       	inc	r14

		if(spriteFlags & SPRITE_FLIP_Y){
			y=(mapHeight-1);
			dy=-1;
		}else{
			y=0;
    7594:	70 e0       	ldi	r23, 0x00	; 0
    7596:	21 11       	cpse	r18, r1
    7598:	01 c0       	rjmp	.+2      	; 0x759c <MapSprite2+0x4c>
    759a:	50 e0       	ldi	r21, 0x00	; 0
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
    759c:	00 e0       	ldi	r16, 0x00	; 0
    759e:	06 17       	cp	r16, r22
    75a0:	09 f1       	breq	.+66     	; 0x75e4 <MapSprite2+0x94>
			for(u8 cx=0;cx<mapWidth;cx++){
				t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    75a2:	71 03       	mulsu	r23, r17
    75a4:	e0 01       	movw	r28, r0
    75a6:	11 24       	eor	r1, r1
    75a8:	d8 2e       	mov	r13, r24
    75aa:	d1 0e       	add	r13, r17
			y=0;
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
			for(u8 cx=0;cx<mapWidth;cx++){
    75ac:	8d 15       	cp	r24, r13
    75ae:	b1 f0       	breq	.+44     	; 0x75dc <MapSprite2+0x8c>
				t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    75b0:	9e 01       	movw	r18, r28
    75b2:	29 0f       	add	r18, r25
    75b4:	31 1d       	adc	r19, r1
    75b6:	97 fd       	sbrc	r25, 7
    75b8:	3a 95       	dec	r19
    75ba:	2e 5f       	subi	r18, 0xFE	; 254
    75bc:	3f 4f       	sbci	r19, 0xFF	; 255
    75be:	fd 01       	movw	r30, r26
    75c0:	e2 0f       	add	r30, r18
    75c2:	f3 1f       	adc	r31, r19
    75c4:	24 91       	lpm	r18, Z
				sprites[startSprite].tileIndex=t;
    75c6:	34 e0       	ldi	r19, 0x04	; 4
    75c8:	83 9f       	mul	r24, r19
    75ca:	f0 01       	movw	r30, r0
    75cc:	11 24       	eor	r1, r1
    75ce:	ee 5f       	subi	r30, 0xFE	; 254
    75d0:	fe 4f       	sbci	r31, 0xFE	; 254
    75d2:	22 83       	std	Z+2, r18	; 0x02
				sprites[startSprite++].flags=spriteFlags;
    75d4:	8f 5f       	subi	r24, 0xFF	; 255
    75d6:	43 83       	std	Z+3, r20	; 0x03
    75d8:	9f 0d       	add	r25, r15
    75da:	e8 cf       	rjmp	.-48     	; 0x75ac <MapSprite2+0x5c>
    75dc:	7e 0d       	add	r23, r14
		}else{
			y=0;
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
    75de:	0f 5f       	subi	r16, 0xFF	; 255
				sprites[startSprite].tileIndex=t;
				sprites[startSprite++].flags=spriteFlags;
				x+=dx;
			}
			y+=dy;
			x=(spriteFlags & SPRITE_FLIP_X)?(mapWidth-1):0;
    75e0:	95 2f       	mov	r25, r21
    75e2:	dd cf       	rjmp	.-70     	; 0x759e <MapSprite2+0x4e>
	    }
	}
    75e4:	df 91       	pop	r29
    75e6:	cf 91       	pop	r28
    75e8:	1f 91       	pop	r17
    75ea:	0f 91       	pop	r16
    75ec:	ff 90       	pop	r15
    75ee:	ef 90       	pop	r14
    75f0:	df 90       	pop	r13
    75f2:	08 95       	ret

000075f4 <InitializeVideoMode>:
		#endif	
	}


	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){
    75f4:	e2 e0       	ldi	r30, 0x02	; 2
    75f6:	f1 e0       	ldi	r31, 0x01	; 1

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
			sprites[i].x=(SCREEN_TILES_H*TILE_WIDTH);		
    75f8:	80 ee       	ldi	r24, 0xE0	; 224
    75fa:	80 83       	st	Z, r24
    75fc:	34 96       	adiw	r30, 0x04	; 4

	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
    75fe:	91 e0       	ldi	r25, 0x01	; 1
    7600:	ea 33       	cpi	r30, 0x3A	; 58
    7602:	f9 07       	cpc	r31, r25
    7604:	d1 f7       	brne	.-12     	; 0x75fa <InitializeVideoMode+0x6>
		
		#if SCROLLING == 1
		//	for(int i=0;i<(OVERLAY_LINES*VRAM_TILES_H);i++){
		//		overlay_vram[i]=RAM_TILES_COUNT;
		//	}
			Screen.scrollHeight=VRAM_TILES_V;
    7606:	80 e2       	ldi	r24, 0x20	; 32
    7608:	80 93 9e 08 	sts	0x089E, r24
			Screen.overlayHeight=0;
    760c:	10 92 99 08 	sts	0x0899, r1
    7610:	08 95       	ret

00007612 <DrawMap>:



//Draws a map of tile at the specified position
#if VRAM_ADDR_SIZE == 1
	void DrawMap(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
    7612:	4f 92       	push	r4
    7614:	5f 92       	push	r5
    7616:	6f 92       	push	r6
    7618:	7f 92       	push	r7
    761a:	8f 92       	push	r8
    761c:	9f 92       	push	r9
    761e:	af 92       	push	r10
    7620:	bf 92       	push	r11
    7622:	cf 92       	push	r12
    7624:	df 92       	push	r13
    7626:	ef 92       	push	r14
    7628:	ff 92       	push	r15
    762a:	0f 93       	push	r16
    762c:	1f 93       	push	r17
    762e:	cf 93       	push	r28
    7630:	df 93       	push	r29
    7632:	68 2e       	mov	r6, r24
    7634:	56 2e       	mov	r5, r22
    7636:	7a 01       	movw	r14, r20
		//unsigned char i;
		u8 mapWidth=pgm_read_byte(&(map[0]));
    7638:	fa 01       	movw	r30, r20
    763a:	74 90       	lpm	r7, Z
		u8 mapHeight=pgm_read_byte(&(map[1]));
    763c:	31 96       	adiw	r30, 0x01	; 1
    763e:	84 90       	lpm	r8, Z
    7640:	c7 2c       	mov	r12, r7
    7642:	d1 2c       	mov	r13, r1
		
		for(u8 dy=0;dy<mapHeight;dy++){
    7644:	00 e0       	ldi	r16, 0x00	; 0
    7646:	10 e0       	ldi	r17, 0x00	; 0
    7648:	91 2c       	mov	r9, r1
    764a:	98 14       	cp	r9, r8
    764c:	f1 f0       	breq	.+60     	; 0x768a <DrawMap+0x78>
    764e:	c0 e0       	ldi	r28, 0x00	; 0
    7650:	d0 e0       	ldi	r29, 0x00	; 0
    7652:	58 01       	movw	r10, r16
    7654:	f2 e0       	ldi	r31, 0x02	; 2
    7656:	af 0e       	add	r10, r31
    7658:	b1 1c       	adc	r11, r1
    765a:	49 2c       	mov	r4, r9
    765c:	45 0c       	add	r4, r5
			for(u8 dx=0;dx<mapWidth;dx++){			
    765e:	c7 15       	cp	r28, r7
    7660:	80 f4       	brcc	.+32     	; 0x7682 <DrawMap+0x70>
    7662:	95 01       	movw	r18, r10
    7664:	2c 0f       	add	r18, r28
    7666:	3d 1f       	adc	r19, r29
    7668:	f7 01       	movw	r30, r14
    766a:	e2 0f       	add	r30, r18
    766c:	f3 1f       	adc	r31, r19
				SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
    766e:	24 91       	lpm	r18, Z
    7670:	42 2f       	mov	r20, r18
    7672:	50 e0       	ldi	r21, 0x00	; 0
    7674:	64 2d       	mov	r22, r4
    7676:	8c 2f       	mov	r24, r28
    7678:	86 0d       	add	r24, r6
    767a:	0e 94 b2 2d 	call	0x5b64	; 0x5b64 <SetTile>
    767e:	21 96       	adiw	r28, 0x01	; 1
    7680:	ee cf       	rjmp	.-36     	; 0x765e <DrawMap+0x4c>
	void DrawMap(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
		//unsigned char i;
		u8 mapWidth=pgm_read_byte(&(map[0]));
		u8 mapHeight=pgm_read_byte(&(map[1]));
		
		for(u8 dy=0;dy<mapHeight;dy++){
    7682:	93 94       	inc	r9
    7684:	0c 0d       	add	r16, r12
    7686:	1d 1d       	adc	r17, r13
    7688:	e0 cf       	rjmp	.-64     	; 0x764a <DrawMap+0x38>
			for(u8 dx=0;dx<mapWidth;dx++){			
				SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
			}
		}

	}
    768a:	df 91       	pop	r29
    768c:	cf 91       	pop	r28
    768e:	1f 91       	pop	r17
    7690:	0f 91       	pop	r16
    7692:	ff 90       	pop	r15
    7694:	ef 90       	pop	r14
    7696:	df 90       	pop	r13
    7698:	cf 90       	pop	r12
    769a:	bf 90       	pop	r11
    769c:	af 90       	pop	r10
    769e:	9f 90       	pop	r9
    76a0:	8f 90       	pop	r8
    76a2:	7f 90       	pop	r7
    76a4:	6f 90       	pop	r6
    76a6:	5f 90       	pop	r5
    76a8:	4f 90       	pop	r4
    76aa:	08 95       	ret

000076ac <Print>:
	PrintHexByte(x+4,y, value>>8);
	PrintHexByte(x+6,y,value&0xff);
}

//Print a string from flash
void Print(int x,int y,const char *string){
    76ac:	0f 93       	push	r16
    76ae:	1f 93       	push	r17
    76b0:	cf 93       	push	r28
    76b2:	df 93       	push	r29
    76b4:	06 2f       	mov	r16, r22
    76b6:	c4 2f       	mov	r28, r20
    76b8:	d5 2f       	mov	r29, r21
    76ba:	18 2f       	mov	r17, r24
    76bc:	14 1b       	sub	r17, r20

	int i=0;
	char c;

	while(1){
		c=pgm_read_byte(&(string[i++]));		
    76be:	fe 01       	movw	r30, r28
    76c0:	44 91       	lpm	r20, Z
		if(c!=0){
    76c2:	44 23       	and	r20, r20
    76c4:	49 f0       	breq	.+18     	; 0x76d8 <Print+0x2c>
			c=((c&127)-32);			
    76c6:	4f 77       	andi	r20, 0x7F	; 127
    76c8:	40 52       	subi	r20, 0x20	; 32
			SetFont(x++,y,c);
    76ca:	60 2f       	mov	r22, r16
    76cc:	8c 2f       	mov	r24, r28
    76ce:	81 0f       	add	r24, r17
    76d0:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <SetFont>
    76d4:	21 96       	adiw	r28, 0x01	; 1
		}else{
			break;
		}
	}
    76d6:	f3 cf       	rjmp	.-26     	; 0x76be <Print+0x12>
	
}
    76d8:	df 91       	pop	r29
    76da:	cf 91       	pop	r28
    76dc:	1f 91       	pop	r17
    76de:	0f 91       	pop	r16
    76e0:	08 95       	ret

000076e2 <WaitVsync>:
		}
	}
}

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
    76e2:	0f 93       	push	r16
    76e4:	1f 93       	push	r17
    76e6:	cf 93       	push	r28
    76e8:	df 93       	push	r29
    76ea:	8c 01       	movw	r16, r24
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    76ec:	c0 e0       	ldi	r28, 0x00	; 0
    76ee:	d0 e0       	ldi	r29, 0x00	; 0
    76f0:	c0 17       	cp	r28, r16
    76f2:	d1 07       	cpc	r29, r17
    76f4:	44 f4       	brge	.+16     	; 0x7706 <WaitVsync+0x24>
		while(!GetVsyncFlag());
    76f6:	0e 94 cb 2d 	call	0x5b96	; 0x5b96 <GetVsyncFlag>
    76fa:	88 23       	and	r24, r24
    76fc:	e1 f3       	breq	.-8      	; 0x76f6 <WaitVsync+0x14>
		ClearVsyncFlag();		
    76fe:	0e 94 cf 2d 	call	0x5b9e	; 0x5b9e <ClearVsyncFlag>

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    7702:	21 96       	adiw	r28, 0x01	; 1
    7704:	f5 cf       	rjmp	.-22     	; 0x76f0 <WaitVsync+0xe>
		while(!GetVsyncFlag());
		ClearVsyncFlag();		
	}
}
    7706:	df 91       	pop	r29
    7708:	cf 91       	pop	r28
    770a:	1f 91       	pop	r17
    770c:	0f 91       	pop	r16
    770e:	08 95       	ret

00007710 <DisplayLogo>:
	void DisplayLogo(){
	
		#if INTRO_LOGO !=0
			#define LOGO_X_POS 12
			
			InitMusicPlayer(logoInitPatches);
    7710:	8f e0       	ldi	r24, 0x0F	; 15
    7712:	99 e0       	ldi	r25, 0x09	; 9
    7714:	0e 94 68 2f 	call	0x5ed0	; 0x5ed0 <InitMusicPlayer>
			SetTileTable(logo_tileset);
    7718:	8f e0       	ldi	r24, 0x0F	; 15
    771a:	91 e0       	ldi	r25, 0x01	; 1
    771c:	0e 94 c6 2d 	call	0x5b8c	; 0x5b8c <SetTileTable>
			
			//draw logo
			ClearVram();
    7720:	0e 94 a4 2d 	call	0x5b48	; 0x5b48 <ClearVram>
			WaitVsync(15);		
    7724:	8f e0       	ldi	r24, 0x0F	; 15
    7726:	90 e0       	ldi	r25, 0x00	; 0
    7728:	0e 94 71 3b 	call	0x76e2	; 0x76e2 <WaitVsync>


			#if INTRO_LOGO == 1 
				TriggerFx(0,0xff,true);
    772c:	41 e0       	ldi	r20, 0x01	; 1
    772e:	6f ef       	ldi	r22, 0xFF	; 255
    7730:	80 e0       	ldi	r24, 0x00	; 0
    7732:	0e 94 3e 30 	call	0x607c	; 0x607c <TriggerFx>
			#endif

			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo);
    7736:	49 ef       	ldi	r20, 0xF9	; 249
    7738:	50 e0       	ldi	r21, 0x00	; 0
    773a:	6c e0       	ldi	r22, 0x0C	; 12
    773c:	8c e0       	ldi	r24, 0x0C	; 12
    773e:	0e 94 09 3b 	call	0x7612	; 0x7612 <DrawMap>
			WaitVsync(3);
    7742:	83 e0       	ldi	r24, 0x03	; 3
    7744:	90 e0       	ldi	r25, 0x00	; 0
    7746:	0e 94 71 3b 	call	0x76e2	; 0x76e2 <WaitVsync>
			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo2);
    774a:	48 ee       	ldi	r20, 0xE8	; 232
    774c:	50 e0       	ldi	r21, 0x00	; 0
    774e:	6c e0       	ldi	r22, 0x0C	; 12
    7750:	8c e0       	ldi	r24, 0x0C	; 12
    7752:	0e 94 09 3b 	call	0x7612	; 0x7612 <DrawMap>
			WaitVsync(2);
    7756:	82 e0       	ldi	r24, 0x02	; 2
    7758:	90 e0       	ldi	r25, 0x00	; 0
    775a:	0e 94 71 3b 	call	0x76e2	; 0x76e2 <WaitVsync>
			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo);
    775e:	49 ef       	ldi	r20, 0xF9	; 249
    7760:	50 e0       	ldi	r21, 0x00	; 0
    7762:	6c e0       	ldi	r22, 0x0C	; 12
    7764:	8c e0       	ldi	r24, 0x0C	; 12
    7766:	0e 94 09 3b 	call	0x7612	; 0x7612 <DrawMap>
			#if INTRO_LOGO == 2
				SetMasterVolume(0xc0);
				TriggerNote(3,0,16,0xff);
			#endif 
		
			WaitVsync(65);
    776a:	81 e4       	ldi	r24, 0x41	; 65
    776c:	90 e0       	ldi	r25, 0x00	; 0
    776e:	0e 94 71 3b 	call	0x76e2	; 0x76e2 <WaitVsync>
			ClearVram();
    7772:	0e 94 a4 2d 	call	0x5b48	; 0x5b48 <ClearVram>
			WaitVsync(20);
    7776:	84 e1       	ldi	r24, 0x14	; 20
    7778:	90 e0       	ldi	r25, 0x00	; 0
    777a:	0c 94 71 3b 	jmp	0x76e2	; 0x76e2 <WaitVsync>

0000777e <doFade>:
char fadeDir;
bool volatile fadeActive;


void doFade(unsigned char speed,bool blocking){
	fadeSpeed=speed;
    777e:	80 93 60 09 	sts	0x0960, r24
	currFadeFrame=0;
    7782:	10 92 64 09 	sts	0x0964, r1
	fadeActive=true;
    7786:	81 e0       	ldi	r24, 0x01	; 1
    7788:	80 93 63 09 	sts	0x0963, r24
		
	if(blocking){
    778c:	66 23       	and	r22, r22
    778e:	21 f0       	breq	.+8      	; 0x7798 <doFade+0x1a>
		while(fadeActive==true);
    7790:	80 91 63 09 	lds	r24, 0x0963
    7794:	81 11       	cpse	r24, r1
    7796:	fc cf       	rjmp	.-8      	; 0x7790 <doFade+0x12>
    7798:	08 95       	ret

0000779a <FadeIn>:
	
	
}

void FadeIn(unsigned char speed,bool blocking){
	if(speed==0){
    779a:	81 11       	cpse	r24, r1
    779c:	03 c0       	rjmp	.+6      	; 0x77a4 <FadeIn+0xa>
		DDRC=0xff;
    779e:	8f ef       	ldi	r24, 0xFF	; 255
    77a0:	87 b9       	out	0x07, r24	; 7
		return;
    77a2:	08 95       	ret
	}
	fadeStep=1;
    77a4:	91 e0       	ldi	r25, 0x01	; 1
    77a6:	90 93 65 09 	sts	0x0965, r25
	fadeDir=1;
    77aa:	90 93 61 09 	sts	0x0961, r25
	doFade(speed,blocking);
    77ae:	0c 94 bf 3b 	jmp	0x777e	; 0x777e <doFade>

000077b2 <ProcessFading>:
}


//called by the kernel at each field end
void ProcessFading(){
	if(fadeActive==true){
    77b2:	80 91 63 09 	lds	r24, 0x0963
    77b6:	88 23       	and	r24, r24
    77b8:	01 f1       	breq	.+64     	; 0x77fa <ProcessFading+0x48>
		if(currFadeFrame==0){
    77ba:	80 91 64 09 	lds	r24, 0x0964
    77be:	81 11       	cpse	r24, r1
    77c0:	19 c0       	rjmp	.+50     	; 0x77f4 <ProcessFading+0x42>
			currFadeFrame=fadeSpeed;
    77c2:	80 91 60 09 	lds	r24, 0x0960
    77c6:	80 93 64 09 	sts	0x0964, r24
			DDRC = pgm_read_byte(&(fader[fadeStep-1]));
    77ca:	e0 91 65 09 	lds	r30, 0x0965
    77ce:	f0 e0       	ldi	r31, 0x00	; 0
    77d0:	e5 52       	subi	r30, 0x25	; 37
    77d2:	ff 4f       	sbci	r31, 0xFF	; 255
    77d4:	e4 91       	lpm	r30, Z
    77d6:	e7 b9       	out	0x07, r30	; 7
			fadeStep+=fadeDir;
    77d8:	90 91 61 09 	lds	r25, 0x0961
    77dc:	80 91 65 09 	lds	r24, 0x0965
    77e0:	89 0f       	add	r24, r25
    77e2:	80 93 65 09 	sts	0x0965, r24
			if(fadeStep==0 || fadeStep==(FADER_STEPS+1)){
    77e6:	88 23       	and	r24, r24
    77e8:	11 f0       	breq	.+4      	; 0x77ee <ProcessFading+0x3c>
    77ea:	8d 30       	cpi	r24, 0x0D	; 13
    77ec:	31 f4       	brne	.+12     	; 0x77fa <ProcessFading+0x48>
				fadeActive=false;
    77ee:	10 92 63 09 	sts	0x0963, r1
    77f2:	08 95       	ret
			}
		}else{
			currFadeFrame--;
    77f4:	81 50       	subi	r24, 0x01	; 1
    77f6:	80 93 64 09 	sts	0x0964, r24
    77fa:	08 95       	ret

000077fc <VideoModeVsync>:
	}

	//Callback invoked during hsync
	void VideoModeVsync(){
		
		ProcessFading();
    77fc:	0e 94 d9 3b 	call	0x77b2	; 0x77b2 <ProcessFading>
		ProcessSprites();
    7800:	0c 94 96 39 	jmp	0x732c	; 0x732c <ProcessSprites>

00007804 <clear_sprites>:
	ClearVram();
	FadeIn(FRAMES_PER_FADE, false);
}

void clear_sprites()
{
    7804:	cf 93       	push	r28
	for(char i = 0; i < MAX_SPRITES; i++)
    7806:	c0 e0       	ldi	r28, 0x00	; 0
	{
		MapSprite2(i, map_none, 0);
    7808:	40 e0       	ldi	r20, 0x00	; 0
    780a:	66 e4       	ldi	r22, 0x46	; 70
    780c:	77 e3       	ldi	r23, 0x37	; 55
    780e:	8c 2f       	mov	r24, r28
    7810:	0e 94 a8 3a 	call	0x7550	; 0x7550 <MapSprite2>
    7814:	cf 5f       	subi	r28, 0xFF	; 255
	FadeIn(FRAMES_PER_FADE, false);
}

void clear_sprites()
{
	for(char i = 0; i < MAX_SPRITES; i++)
    7816:	ce 30       	cpi	r28, 0x0E	; 14
    7818:	b9 f7       	brne	.-18     	; 0x7808 <clear_sprites+0x4>
	{
		MapSprite2(i, map_none, 0);
	}
}
    781a:	cf 91       	pop	r28
    781c:	08 95       	ret

0000781e <load_splash>:
	load_splash();
}

void load_splash()
{
	game.current_screen = SPLASH;
    781e:	10 92 86 09 	sts	0x0986, r1
	clear_sprites();
    7822:	0e 94 02 3c 	call	0x7804	; 0x7804 <clear_sprites>
	Print(8, 15, (char*) str1Player);
    7826:	4e e9       	ldi	r20, 0x9E	; 158
    7828:	59 e0       	ldi	r21, 0x09	; 9
    782a:	6f e0       	ldi	r22, 0x0F	; 15
    782c:	70 e0       	ldi	r23, 0x00	; 0
    782e:	88 e0       	ldi	r24, 0x08	; 8
    7830:	90 e0       	ldi	r25, 0x00	; 0
    7832:	0e 94 56 3b 	call	0x76ac	; 0x76ac <Print>
	Print(8, 16, (char*) strHighscores);
    7836:	42 e9       	ldi	r20, 0x92	; 146
    7838:	59 e0       	ldi	r21, 0x09	; 9
    783a:	60 e1       	ldi	r22, 0x10	; 16
    783c:	70 e0       	ldi	r23, 0x00	; 0
    783e:	88 e0       	ldi	r24, 0x08	; 8
    7840:	90 e0       	ldi	r25, 0x00	; 0
    7842:	0e 94 56 3b 	call	0x76ac	; 0x76ac <Print>
	Print(6, 21, (char*) strSelectHandle);
    7846:	41 e8       	ldi	r20, 0x81	; 129
    7848:	59 e0       	ldi	r21, 0x09	; 9
    784a:	65 e1       	ldi	r22, 0x15	; 21
    784c:	70 e0       	ldi	r23, 0x00	; 0
    784e:	86 e0       	ldi	r24, 0x06	; 6
    7850:	90 e0       	ldi	r25, 0x00	; 0
    7852:	0e 94 56 3b 	call	0x76ac	; 0x76ac <Print>
	Print(5, 26, (char*) strCopyright);
    7856:	44 ea       	ldi	r20, 0xA4	; 164
    7858:	59 e0       	ldi	r21, 0x09	; 9
    785a:	6a e1       	ldi	r22, 0x1A	; 26
    785c:	70 e0       	ldi	r23, 0x00	; 0
    785e:	85 e0       	ldi	r24, 0x05	; 5
    7860:	90 e0       	ldi	r25, 0x00	; 0
    7862:	0e 94 56 3b 	call	0x76ac	; 0x76ac <Print>
	DrawMap2(6, 5, (const char*) map_splash);
    7866:	4f e2       	ldi	r20, 0x2F	; 47
    7868:	50 e5       	ldi	r21, 0x50	; 80
    786a:	65 e0       	ldi	r22, 0x05	; 5
    786c:	86 e0       	ldi	r24, 0x06	; 6
    786e:	0e 94 09 3b 	call	0x7612	; 0x7612 <DrawMap>
	MapSprite2(0, map_right_arrow, 0);
    7872:	40 e0       	ldi	r20, 0x00	; 0
    7874:	63 e4       	ldi	r22, 0x43	; 67
    7876:	77 e3       	ldi	r23, 0x37	; 55
    7878:	80 e0       	ldi	r24, 0x00	; 0
    787a:	0c 94 a8 3a 	jmp	0x7550	; 0x7550 <MapSprite2>

0000787e <main>:
}

int main()
{
	// Initialize
	InitMusicPlayer(my_patches);
    787e:	89 eb       	ldi	r24, 0xB9	; 185
    7880:	99 e0       	ldi	r25, 0x09	; 9
    7882:	0e 94 68 2f 	call	0x5ed0	; 0x5ed0 <InitMusicPlayer>
	SetMasterVolume(0xff);
    7886:	8f ef       	ldi	r24, 0xFF	; 255
    7888:	0e 94 e5 32 	call	0x65ca	; 0x65ca <SetMasterVolume>
	SetTileTable(tiles_data);
    788c:	89 e4       	ldi	r24, 0x49	; 73
    788e:	97 e3       	ldi	r25, 0x37	; 55
    7890:	0e 94 c6 2d 	call	0x5b8c	; 0x5b8c <SetTileTable>
	SetSpritesTileTable(sprites_data);
    7894:	8e e1       	ldi	r24, 0x1E	; 30
    7896:	9b e2       	ldi	r25, 0x2B	; 43
    7898:	0e 94 9f 2d 	call	0x5b3e	; 0x5b3e <SetSpritesTileTable>
	SetFontTilesIndex(TILES_DATA_SIZE);
    789c:	83 e2       	ldi	r24, 0x23	; 35
    789e:	0e 94 c3 2d 	call	0x5b86	; 0x5b86 <SetFontTilesIndex>
	FadeIn(FRAMES_PER_FADE, false);
    78a2:	60 e0       	ldi	r22, 0x00	; 0
    78a4:	83 e0       	ldi	r24, 0x03	; 3
    78a6:	0e 94 cd 3b 	call	0x779a	; 0x779a <FadeIn>
	ClearVram();
    78aa:	0e 94 a4 2d 	call	0x5b48	; 0x5b48 <ClearVram>
	init_game_state();
	load_splash();
    78ae:	0e 94 0f 3c 	call	0x781e	; 0x781e <load_splash>
	
	while (1)
	{
		WaitVsync(1);
    78b2:	81 e0       	ldi	r24, 0x01	; 1
    78b4:	90 e0       	ldi	r25, 0x00	; 0
    78b6:	0e 94 71 3b 	call	0x76e2	; 0x76e2 <WaitVsync>
    78ba:	fb cf       	rjmp	.-10     	; 0x78b2 <main+0x34>

000078bc <__udivmodhi4>:
    78bc:	aa 1b       	sub	r26, r26
    78be:	bb 1b       	sub	r27, r27
    78c0:	51 e1       	ldi	r21, 0x11	; 17
    78c2:	07 c0       	rjmp	.+14     	; 0x78d2 <__udivmodhi4_ep>

000078c4 <__udivmodhi4_loop>:
    78c4:	aa 1f       	adc	r26, r26
    78c6:	bb 1f       	adc	r27, r27
    78c8:	a6 17       	cp	r26, r22
    78ca:	b7 07       	cpc	r27, r23
    78cc:	10 f0       	brcs	.+4      	; 0x78d2 <__udivmodhi4_ep>
    78ce:	a6 1b       	sub	r26, r22
    78d0:	b7 0b       	sbc	r27, r23

000078d2 <__udivmodhi4_ep>:
    78d2:	88 1f       	adc	r24, r24
    78d4:	99 1f       	adc	r25, r25
    78d6:	5a 95       	dec	r21
    78d8:	a9 f7       	brne	.-22     	; 0x78c4 <__udivmodhi4_loop>
    78da:	80 95       	com	r24
    78dc:	90 95       	com	r25
    78de:	bc 01       	movw	r22, r24
    78e0:	cd 01       	movw	r24, r26
    78e2:	08 95       	ret

000078e4 <__divmodhi4>:
    78e4:	97 fb       	bst	r25, 7
    78e6:	07 2e       	mov	r0, r23
    78e8:	16 f4       	brtc	.+4      	; 0x78ee <__divmodhi4+0xa>
    78ea:	00 94       	com	r0
    78ec:	07 d0       	rcall	.+14     	; 0x78fc <__divmodhi4_neg1>
    78ee:	77 fd       	sbrc	r23, 7
    78f0:	09 d0       	rcall	.+18     	; 0x7904 <__divmodhi4_neg2>
    78f2:	0e 94 5e 3c 	call	0x78bc	; 0x78bc <__udivmodhi4>
    78f6:	07 fc       	sbrc	r0, 7
    78f8:	05 d0       	rcall	.+10     	; 0x7904 <__divmodhi4_neg2>
    78fa:	3e f4       	brtc	.+14     	; 0x790a <__divmodhi4_exit>

000078fc <__divmodhi4_neg1>:
    78fc:	90 95       	com	r25
    78fe:	81 95       	neg	r24
    7900:	9f 4f       	sbci	r25, 0xFF	; 255
    7902:	08 95       	ret

00007904 <__divmodhi4_neg2>:
    7904:	70 95       	com	r23
    7906:	61 95       	neg	r22
    7908:	7f 4f       	sbci	r23, 0xFF	; 255

0000790a <__divmodhi4_exit>:
    790a:	08 95       	ret

0000790c <_exit>:
    790c:	f8 94       	cli

0000790e <__stop_program>:
    790e:	ff cf       	rjmp	.-2      	; 0x790e <__stop_program>
