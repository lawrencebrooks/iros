
Iris.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800500  00009b6e  00009c6e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .noinit       00000400  00800100  00800100  00009c80  2**5
                  CONTENTS, READONLY
  2 .text         00009b6e  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .bss          00000af2  00800502  00800502  00009c70  2**1
                  ALLOC
  4 .stab         0000057c  00000000  00000000  0000a080  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000256  00000000  00000000  0000a5fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  0000a852  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000600  00000000  00000000  0000a868  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000738c  00000000  00000000  0000ae68  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001659  00000000  00000000  000121f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00001eb1  00000000  00000000  0001384d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001280  00000000  00000000  00015700  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000018cf  00000000  00000000  00016980  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000649c  00000000  00000000  0001824f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000730  00000000  00000000  0001e6f0  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 83 22 	jmp	0x4506	; 0x4506 <__ctors_end>
       4:	0c 94 ec 22 	jmp	0x45d8	; 0x45d8 <__bad_interrupt>
       8:	0c 94 ec 22 	jmp	0x45d8	; 0x45d8 <__bad_interrupt>
       c:	0c 94 ec 22 	jmp	0x45d8	; 0x45d8 <__bad_interrupt>
      10:	0c 94 ec 22 	jmp	0x45d8	; 0x45d8 <__bad_interrupt>
      14:	0c 94 ec 22 	jmp	0x45d8	; 0x45d8 <__bad_interrupt>
      18:	0c 94 ec 22 	jmp	0x45d8	; 0x45d8 <__bad_interrupt>
      1c:	0c 94 ec 22 	jmp	0x45d8	; 0x45d8 <__bad_interrupt>
      20:	0c 94 5f 28 	jmp	0x50be	; 0x50be <__vector_8>
      24:	0c 94 ec 22 	jmp	0x45d8	; 0x45d8 <__bad_interrupt>
      28:	0c 94 ec 22 	jmp	0x45d8	; 0x45d8 <__bad_interrupt>
      2c:	0c 94 ec 22 	jmp	0x45d8	; 0x45d8 <__bad_interrupt>
      30:	0c 94 ec 22 	jmp	0x45d8	; 0x45d8 <__bad_interrupt>
      34:	0c 94 30 26 	jmp	0x4c60	; 0x4c60 <__vector_13>
      38:	0c 94 70 26 	jmp	0x4ce0	; 0x4ce0 <__vector_14>
      3c:	0c 94 ec 22 	jmp	0x45d8	; 0x45d8 <__bad_interrupt>
      40:	0c 94 ec 22 	jmp	0x45d8	; 0x45d8 <__bad_interrupt>
      44:	0c 94 ec 22 	jmp	0x45d8	; 0x45d8 <__bad_interrupt>
      48:	0c 94 ec 22 	jmp	0x45d8	; 0x45d8 <__bad_interrupt>
      4c:	0c 94 ec 22 	jmp	0x45d8	; 0x45d8 <__bad_interrupt>
      50:	0c 94 ec 22 	jmp	0x45d8	; 0x45d8 <__bad_interrupt>
      54:	0c 94 ec 22 	jmp	0x45d8	; 0x45d8 <__bad_interrupt>
      58:	0c 94 ec 22 	jmp	0x45d8	; 0x45d8 <__bad_interrupt>
      5c:	0c 94 ec 22 	jmp	0x45d8	; 0x45d8 <__bad_interrupt>
      60:	0c 94 ec 22 	jmp	0x45d8	; 0x45d8 <__bad_interrupt>
      64:	0c 94 ec 22 	jmp	0x45d8	; 0x45d8 <__bad_interrupt>
      68:	0c 94 ec 22 	jmp	0x45d8	; 0x45d8 <__bad_interrupt>
      6c:	0c 94 ec 22 	jmp	0x45d8	; 0x45d8 <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	81 00       	.word	0x0081	; ????
      72:	45 00       	.word	0x0045	; ????
      74:	27 ff       	sbrs	r18, 7
      76:	24 ff       	sbrs	r18, 4
      78:	2a 90       	ld	r2, -Y
      7a:	2b 1c       	adc	r2, r11
      7c:	21 0c       	add	r2, r1
      7e:	22 fb       	bst	r18, 2
      80:	85 00       	.word	0x0085	; ????
      82:	84 00       	.word	0x0084	; ????
      84:	89 03       	fmulsu	r16, r17
      86:	88 8d       	ldd	r24, Y+24	; 0x18
      88:	81 09       	sbc	r24, r1
      8a:	6f 02       	muls	r22, r31
      8c:	44 42       	sbci	r20, 0x24	; 36
      8e:	47 00       	.word	0x0047	; ????
      90:	45 01       	movw	r8, r10
      92:	b0 83       	st	Z, r27
      94:	b3 00       	.word	0x00b3	; ????
      96:	b1 01       	movw	r22, r2
      98:	25 11       	cpse	r18, r5
      9a:	8a 4f       	sbci	r24, 0xFA	; 250
      9c:	8b 03       	fmulsu	r16, r19

0000009e <eeprom_format_table>:
      9e:	5a 55 01 20 01 01 00 38 08 00 00 00 00 00 00 00     ZU. ...8........
	...

000000be <patchCommands>:
      be:	a7 29 aa 29 06 2a 0a 2a 11 2a b2 29 b7 29 bc 29     .).).*.*.*.).).)
      ce:	19 2a bf 29 c2 29 c5 29 00 2a 03 2a 29 2a           .*.).).).*.*)*

000000dc <fader>:
      dc:	00 40 88 91 d2 e4 ad b5 b6 be bf ff                 .@..........

000000e8 <map_uzeboxlogo2>:
      e8:	05 03 00 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f     ................
	...

000000f9 <map_uzeboxlogo>:
      f9:	05 04 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d     ................
     109:	00 0e 0f 10 11 12                                   ......

0000010f <logo_tileset>:
	...
     16b:	00 00 00 49 00 00 00 00 00 49 52 52 00 00 00 49     ...I.....IRR...I
     17b:	52 53 1c 25 00 49 52 52 24 25 25 1b 52 52 5c 2d     RS.%.IRR$%%.RR\-
     18b:	2d 1c 12 12 00 00 00 00 00 00 00 00 00 00 00 00     -...............
     19b:	40 49 49 49 00 40 49 49 52 5b 5b 5b 4a 52 52 5b     @III.@IIR[[[JRR[
     1ab:	1c 1c 13 12 5b 1c 24 1c 12 09 09 09 24 1b 12 09     ....[.$.....$...
     1bb:	09 09 09 0a 0a 0a 0a 0a 0a 0a 0a 13 0a 0a 12 0a     ................
     1cb:	0a 12 13 0a 00 00 00 00 00 00 00 00 92 52 52 52     .............RRR
     1db:	52 52 52 49 13 12 13 09 00 1c 1b 13 0a 12 12 40     RRRI...........@
     1eb:	1b 65 64 1c 09 0a 00 09 24 1b 1c 65 12 00 00 25     .ed.....$..e...%
     1fb:	1c 1c 1c 1c 01 00 25 24 1c 1c 1c 1c 00 24 25 24     ......%$.....$%$
     20b:	24 24 1c 1c 00 00 00 00 00 00 00 00 49 40 00 00     $$..........I@..
     21b:	00 00 00 00 52 49 49 00 00 00 00 00 1c 5b 4a 48     ....RII......[JH
     22b:	00 00 00 00 1c 25 52 49 00 00 00 00 65 24 64 49     .....%RI....e$dI
     23b:	00 00 00 00 65 25 64 49 00 00 00 00 6d 2e 5c 49     ....e%dI....m.\I
	...
     253:	00 00 40 52 00 00 00 00 00 49 52 5c 00 00 00 00     ..@R.....IR\....
     263:	53 52 24 25 00 00 00 53 52 25 25 25 00 00 4a 52     SR$%...SR%%%..JR
     273:	25 25 1b 00 00 00 5b 25 13 00 00 1b 00 5b 53 00     %%....[%.....[S.
     283:	0a 1c 37 37 09 5b 1c 65 7f 37 2e 2e 52 2e 2e 1c     ..77.[.e.7..R...
     293:	13 13 12 00 2e 25 1b 13 12 00 00 12 1c 1c 12 00     .....%..........
     2a3:	00 12 25 1c 12 00 00 12 2e 37 1c 13 00 13 2e 37     ..%......7.....7
     2b3:	36 1c 13 1b 37 37 2e 2e 25 13 1c 1c 2e 2e 2e 2e     6...77..%.......
     2c3:	1b 1c 1c 1c 6e 6e 6e 1c 1c 1c 1c 1c 09 13 13 12     ....nnn.........
     2d3:	12 13 13 00 13 13 13 13 13 1c 00 09 13 13 13 13     ................
     2e3:	1c 01 00 37 13 13 13 1c 13 00 2e 2e 1b 1b 1c 1c     ...7............
     2f3:	00 1c 77 2e 1b 1b 25 00 13 7f 25 1c 1c 1c 01 0a     ..w...%...%.....
     303:	37 24 1c 1c 1c 13 0a 2e 25 25 09 00 13 2e 24 25     7$......%%....$%
     313:	25 25 25 25 2e 25 25 25 25 25 25 25 25 25 2d 2e     %%%%.%%%%%%%%%-.
     323:	25 1b 1c 1c 2e 2e 25 1c 13 25 1b 13 25 1c 1c 1c     %.....%..%..%...
     333:	1c 01 09 52 1c 1c 13 00 01 1c 5b 5c 0a 00 01 65     ...R......[\...e
     343:	77 5c 1b 00 01 6e 7f 6e 52 1b 00 00 6d 1c 52 49     w\...n.nR...m.RI
     353:	00 00 00 00 1c 13 53 00 00 00 00 00 1c 52 4a 00     ......S......RJ.
     363:	00 00 00 00 5b 5b 00 00 00 00 00 00 5c 00 00 00     ....[[......\...
	...
     38f:	13 5b 7f 77 6e 6e 6e 6e 13 65 77 76 6e 6e 6e 6e     .[.wnnnn.ewvnnnn
     39f:	1b 65 77 76 76 76 6e 77 1b 5b bf 76 b6 76 76 76     .ewvvvnw.[.v.vvv
     3af:	09 13 6d bf b7 b6 b7 65 00 1b 12 5c 76 bf 76 6d     ..m....e...\v.vm
     3bf:	00 00 12 1b 12 5b 5b 5c 00 00 00 00 09 0a 12 13     .....[[\........
     3cf:	6e 77 24 1c 1c 1c 1c 1c 77 25 1c 1c 1c 1c 24 25     nw$.....w%....$%
     3df:	6e 1c 1c 1c 24 25 25 1b 1c 1c 24 25 25 13 00 00     n...$%%...$%%...
     3ef:	64 6d 6d 1b 00 09 6e bf 6d 5b 09 12 6e bf 6d 5b     dmm...n.m[..n.m[
     3ff:	5b 12 5b 64 5b 12 13 12 13 1b 12 12 09 01 00 00     [.[d[...........
     40f:	1c 24 2e 1c 09 00 09 6e 25 24 01 00 09 76 7f 7f     .$.....n%$...v..
     41f:	00 00 12 77 7f 7f 64 12 64 bf bf 77 5b 12 1b 09     ...w..d.d..w[...
     42f:	bf 6d 5b 12 1b 09 00 00 12 13 1b 09 00 00 00 00     .m[.............
     43f:	09 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     44f:	7f 7f 53 13 13 00 00 00 64 12 1b 01 00 00 00 00     ..S.....d.......
     45f:	1b 12 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     497:	26 00 00 00 26 00 26 26 2f 00 00 00 2f 00 00 00     &...&.&&/.../...
     4a7:	37 00 00 00 37 00 00 00 ff 00 00 00 ff 00 00 00     7...7...........
     4b7:	bf 00 00 00 bf 00 00 bf 37 00 00 37 00 00 37 00     ........7..7..7.
     4c7:	00 26 26 00 00 00 26 26 00 00 00 00 00 00 00 00     .&&...&&........
     4d7:	26 26 26 00 26 26 26 26 00 00 2f 00 2f 00 00 00     &&&.&&&&.././...
     4e7:	00 37 00 00 37 00 00 00 ff 00 00 00 ff ff ff ff     .7..7...........
     4f7:	00 00 00 00 bf 00 00 00 00 00 00 00 37 00 00 00     ............7...
     507:	26 26 26 00 26 26 26 26 00 00 00 00 00 00 00 00     &&&.&&&&........
     517:	26 00 26 26 26 26 00 00 00 00 2f 00 00 00 2f 00     &.&&&&..../.../.
     527:	00 00 37 00 00 00 37 00 00 00 ff ff ff ff 00 00     ..7...7.........
     537:	00 00 bf 00 00 00 bf 00 00 00 37 00 00 00 37 00     ..........7...7.
     547:	26 00 26 26 26 26 00 00 00 00 00 00 00 00 00 00     &.&&&&..........
     557:	00 00 26 26 26 00 26 00 00 2f 00 00 2f 00 2f 00     ..&&&.&../.././.
     567:	37 00 00 00 37 00 00 37 ff 00 00 00 ff 00 00 00     7...7..7........
     577:	bf 00 00 00 bf 00 00 bf 37 00 00 37 00 00 37 00     ........7..7..7.
     587:	26 26 26 00 00 00 26 00 00 00 00 00 00 00 00 00     &&&...&.........
     597:	00 00 26 00 00 00 00 00 00 00 2f 00 00 00 00 00     ..&......./.....
     5a7:	00 37 00 00 00 00 00 00 ff 00 00 00 00 00 00 00     .7..............
     5b7:	00 bf 00 00 00 00 00 00 00 00 37 00 00 00 00 00     ..........7.....
     5c7:	00 00 26 00 00 00 00 00 00 00 00 00 00 00 00 00     ..&.............
	...
     5eb:	00 00 00 e4 00 00 00 00 09 9b ed f6 00 00 00 9b     ................
     5fb:	a4 ad bf bf 00 52 9b a4 76 7f 7f b7 5b 9b 6d 77     .....R..v...[.mw
     60b:	7f 76 6e b7 00 00 00 00 00 00 00 00 00 00 00 00     .vn.............
     61b:	5b b6 f6 f6 00 5b f6 ff ff ff ff bf f6 ff ff ff     [....[..........
     62b:	ff bf bf ae ff bf ff ff ff b7 ad 65 bf bf ff ff     ...........e....
     63b:	b7 b6 ad 65 b7 bf ff ff bf b7 ae 6e b7 bf ff ff     ...e.......n....
     64b:	bf b7 b7 65 00 00 00 00 00 00 00 00 f6 f6 ed ed     ...e............
     65b:	ad a4 a4 9b b6 6d 6d 5c 52 6e 65 64 65 65 65 52     .....mm\RnedeeeR
     66b:	65 76 6d 25 5c 5c 52 53 6e 24 65 6e 65 52 52 6e     evm%\\RSn$eneRRn
     67b:	25 25 24 25 5b 52 77 2d 25 25 25 24 52 6e 6e 2d     %%$%[Rw-%%%$Rnn-
     68b:	25 25 25 25 00 00 00 00 00 00 00 00 9b 49 00 00     %%%%.........I..
     69b:	00 00 00 00 a4 9b 92 00 00 00 00 00 25 64 93 49     ............%d.I
     6ab:	00 00 00 00 65 2e 9b 52 00 00 00 00 6d 25 65 52     ....e..R....m%eR
     6bb:	00 00 00 00 6d 2d 65 52 00 00 00 00 6e 2e 64 52     ....m-eR....n.dR
	...
     6d3:	00 00 49 5b 00 00 00 00 00 4a 5b 65 00 00 00 00     ..I[.....J[e....
     6e3:	5b 9b 6d 2d 00 00 00 5b 5b 2d 2e 25 00 00 52 5b     [.m-...[[-.%..R[
     6f3:	2e 2e 1c 09 00 01 5b 2d 1c 01 09 1c 00 5c 5b 01     ......[-.....\[.
     703:	4a 65 77 7f 4a 5b 1c 6e 7f 77 77 76 9b 77 77 6d     Jew.J[.n.wwv.wwm
     713:	65 6e 6e a4 77 6e 65 65 65 5b a4 b7 25 25 5c 52     enn.wneee[..%%\R
     723:	52 6d bf bf 13 09 49 64 7f bf bf bf 09 5c 7f 7f     Rm....Id.....\..
     733:	bf bf b7 bf 7f 7f 77 7f 7f b7 bf bf 77 77 7f 7f     ......w.....ww..
     743:	6e b7 bf bf 77 7f 7f 6e 77 bf bf bf b6 ff ff ff     n...w..nw.......
     753:	bf bf b7 5b bf ff ff ff bf bf a4 64 bf ff ff ff     ...[.......d....
     763:	bf ad a4 7f bf ff ff ff bf a4 bf 7f ff ff ff bf     ................
     773:	ad bf bf bf ff ff ff b6 bf bf bf 77 ff ff f7 bf     ...........w....
     783:	bf bf 77 77 ff ff ff bf bf bf 64 52 6d 7f 6e 2e     ..ww......dRm.n.
     793:	2d 2d 25 6e 7f 76 6e 6e 6e 2e 25 65 77 77 77 76     --%n.vnnn.%ewwwv
     7a3:	2e 1c 25 24 7f 77 6e 25 1c 25 1c 1b 77 65 25 25     ..%$.wn%.%..we%%
     7b3:	1c 09 0a 5b 6e 6e 1c 09 49 25 64 64 5b 49 4a 6e     ...[nn..I%dd[IJn
     7c3:	7f 64 5c 00 53 77 bf 77 5b 5c 00 00 6e 25 5b 4a     .d\.Sw.w[\..n%[J
     7d3:	00 00 00 00 1c 1b 5b 00 00 00 00 00 24 5b 53 00     ......[.....$[S.
     7e3:	00 00 00 00 5b 5c 00 00 00 00 00 00 64 00 00 00     ....[\......d...
	...
     80f:	5b 5c 7f bf 77 76 77 77 5c 6d 7f b7 77 77 77 77     [\..wvww\m..wwww
     81f:	5c 6d 7f bf 77 77 77 bf 5c 64 bf bf bf bf bf 7f     \m..www.\d......
     82f:	0a 5c 6e bf bf bf bf 76 00 65 64 6d bf bf bf bf     .\n....v.edm....
     83f:	00 00 5b 6d 64 6d ad b6 00 00 00 00 12 5b 64 6d     ..[mdm.......[dm
     84f:	77 7f 6e 6e 77 bf bf bf 7f 76 6d 76 77 bf bf bf     w.nnw....vmvw...
     85f:	77 6d 6e 76 7f bf bf bf 6d 6e 76 7f bf b7 ad f6     wmnv....mnv.....
     86f:	76 bf bf 76 a4 ad ff ff bf b6 64 ad ff ff ff ff     v..v......d.....
     87f:	b6 ad bf ff ff ff ff f6 ad b6 ad 64 5b 52 00 00     ...........d[R..
     88f:	ff ff bf bf ad 5b 64 bf ff ff b6 ad ad bf ff bf     .....[d.........
     89f:	ff f6 ff ff ff ff bf 64 ff ff ff ff bf b6 76 5b     .......d......v[
     8af:	ff ff ff bf bf 5b 00 00 ff ff ff 5c 00 00 00 00     .....[.....\....
     8bf:	a4 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     8cf:	bf bf 64 5c 5c 00 00 00 6e 5c 65 49 00 00 00 00     ..d\\...n\eI....
     8df:	6d 5b 00 00 00 00 00 00 00 00 00 00 00 00 00 00     m[..............
	...

0000090f <logoInitPatches>:
     90f:	00 00 00 18 09 00 00 00 00                          .........

00000918 <initPatch>:
     918:	00 02 08 00 08 55 04 08 5a 00 00 f8 00 09 90 00     .....U..Z.......
     928:	0a 1e 32 05 00 00 ff                                ..2....

0000092f <default_scores>:
     92f:	55 5a 45 00 00 4c 4a 42 00 00 41 41 41 00 00 42     UZE..LJB..AAA..B
     93f:	42 42 00 00 43 43 43 00 00 44 44 44 00 00           BB..CCC..DDD..

0000094d <strLevels>:
     94d:	20 20 20 47 4c 41 43 49 45 53 20 20 20 00              GLACIES   .

0000095b <strPaused>:
     95b:	50 41 55 53 45 44 00                                PAUSED.

00000962 <strExit>:
     962:	45 58 49 54 20 47 41 4d 45 20 58 00                 EXIT GAME X.

0000096e <strTime>:
     96e:	54 49 4d 45 20 00                                   TIME .

00000974 <strLives>:
     974:	4c 49 56 45 53 20 00                                LIVES .

0000097b <strShield>:
     97b:	53 48 49 45 4c 44 20 00                             SHIELD .

00000983 <strScore>:
     983:	53 43 4f 52 45 20 00                                SCORE .

0000098a <strSelectHandle>:
	...

0000098b <strHighscores>:
     98b:	48 49 47 48 20 53 43 4f 52 45 53 00                 HIGH SCORES.

00000997 <str1Player>:
     997:	53 54 41 52 54 00                                   START.

0000099d <strMusic>:
     99d:	4d 55 53 49 43 20 42 59 20 54 41 4e 4e 45 52 20     MUSIC BY TANNER 
     9ad:	48 45 4c 4c 41 4e 44 00                             HELLAND.

000009b5 <strCopyright>:
     9b5:	32 30 31 36 20 4c 41 57 52 45 4e 43 45 20 42 52     2016 LAWRENCE BR
     9c5:	4f 4f 4b 53 00                                      OOKS.

000009ca <spacesong>:
     9ca:	00 c0 00 00 c1 01 00 b0 07 7f 00 07 7f 00 90 43     ...............C
     9da:	64 00 46 64 00 4b 64 00 4f 64 00 b1 07 74 00 91     d.Fd.Kd.Od...t..
     9ea:	33 64 00 ff 06 01 53 1d 91 33 64 0a 33 64 14 90     3d....S..3d.3d..
     9fa:	4b 64 00 46 64 00 43 64 00 91 33 64 27 33 64 14     Kd.Fd.Cd..3d'3d.
     a0a:	90 46 64 00 43 64 00 4b 64 00 4f 64 00 91 33 64     .Fd.Cd.Kd.Od..3d
     a1a:	14 33 64 0a 90 41 64 00 4d 64 0a 41 64 00 46 64     .3d..Ad.Md.Ad.Fd
     a2a:	00 4a 64 00 4d 64 00 91 2e 64 1e 2e 64 09 2e 64     .Jd.Md...d..d..d
     a3a:	14 90 41 64 00 46 64 00 4a 64 00 91 2e 64 28 2e     ..Ad.Fd.Jd...d(.
     a4a:	64 14 90 41 64 00 46 64 00 4a 64 00 4d 64 00 91     d..Ad.Fd.Jd.Md..
     a5a:	2e 64 13 2e 64 0a 90 3f 64 00 4b 64 0a 3f 64 00     .d..d..?d.Kd.?d.
     a6a:	44 64 00 48 64 00 4b 64 00 91 2c 64 1e 2c 64 0a     Dd.Hd.Kd..,d.,d.
     a7a:	2c 64 14 90 41 64 00 46 64 00 4a 64 00 91 2c 64     ,d..Ad.Fd.Jd..,d
     a8a:	13 2e 64 14 90 46 64 00 91 2c 64 14 90 3f 64 00     ..d..Fd..,d..?d.
     a9a:	43 64 00 48 64 00 91 2e 64 14 30 64 14 90 43 64     Cd.Hd...d.0d..Cd
     aaa:	00 48 64 00 4b 64 00 4f 64 00 91 30 64 1d 30 64     .Hd.Kd.Od..0d.0d
     aba:	0a 30 64 14 90 4b 64 00 48 64 00 43 64 00 91 30     .0d..Kd.Hd.Cd..0
     aca:	64 28 30 64 13 90 43 64 00 48 64 00 4b 64 00 4f     d(0d..Cd.Hd.Kd.O
     ada:	64 00 91 30 64 14 30 64 0a 90 41 64 00 4d 64 0a     d..0d.0d..Ad.Md.
     aea:	43 64 00 46 64 00 4b 64 00 4f 64 00 91 33 64 1e     Cd.Fd.Kd.Od..3d.
     afa:	33 64 09 33 64 14 90 4b 64 00 46 64 00 43 64 00     3d.3d..Kd.Fd.Cd.
     b0a:	91 33 64 28 33 64 14 90 46 64 00 43 64 00 4b 64     .3d(3d..Fd.Cd.Kd
     b1a:	00 4f 64 00 91 33 64 13 33 64 0a 90 41 64 00 4d     .Od..3d.3d..Ad.M
     b2a:	64 0a 41 64 00 46 64 00 4a 64 00 4d 64 00 91 2e     d.Ad.Fd.Jd.Md...
     b3a:	64 1e 2e 64 0a 2e 64 14 90 41 64 00 46 64 00 4a     d..d..d..Ad.Fd.J
     b4a:	64 00 91 2e 64 27 2e 64 14 90 41 64 00 46 64 00     d...d'.d..Ad.Fd.
     b5a:	4a 64 00 4d 64 00 91 2e 64 14 2e 64 0a 90 3f 64     Jd.Md...d..d..?d
     b6a:	00 4b 64 0a 3f 64 00 44 64 00 48 64 00 4b 64 00     .Kd.?d.Dd.Hd.Kd.
     b7a:	91 2c 64 1d 2c 64 0a 2c 64 14 90 41 64 00 46 64     .,d.,d.,d..Ad.Fd
     b8a:	00 4a 64 00 91 2c 64 14 2e 64 14 90 46 64 00 91     .Jd..,d..d..Fd..
     b9a:	2c 64 13 90 3f 64 00 43 64 00 48 64 00 91 30 64     ,d..?d.Cd.Hd..0d
     baa:	14 30 64 14 90 48 64 00 91 2c 6e 14 2c 4b 06 90     .0d..Hd..,n.,K..
     bba:	4a 64 0e 91 2c 4b 0d 90 4b 64 06 91 2c 6e 14 90     Jd..,K..Kd..,n..
     bca:	4d 64 00 91 2c 4b 14 2c 4b 07 90 4b 64 0d 91 2c     Md..,K.,K..Kd..,
     bda:	6e 0d 90 4a 64 07 91 2c 4b 13 90 48 64 00 91 30     n..Jd..,K..Hd..0
     bea:	6e 14 30 4b 07 90 4a 64 0d 91 30 4b 0d 90 46 64     n.0K..Jd..0K..Fd
     bfa:	07 91 30 6e 13 90 43 64 00 91 30 4b 14 30 4b 07     ..0n..Cd..0K.0K.
     c0a:	90 46 64 0d 91 30 6e 0d 90 48 64 07 91 30 4b 14     .Fd..0n..Hd..0K.
     c1a:	90 48 64 00 91 2c 6e 13 2c 4b 07 90 4a 64 0d 91     .Hd..,n.,K..Jd..
     c2a:	2c 4b 0d 90 4b 64 07 91 2c 6e 14 90 4d 64 00 91     ,K..Kd..,n..Md..
     c3a:	2c 4b 14 2c 4b 06 90 4b 64 0d 91 2c 6e 0e 90 4d     ,K.,K..Kd..,n..M
     c4a:	64 06 91 2c 4b 14 90 4f 64 00 91 30 6e 14 30 4b     d..,K..Od..0n.0K
     c5a:	07 90 50 64 0d 91 30 4b 0e 90 4d 64 05 91 30 6e     ..Pd..0K..Md..0n
     c6a:	14 90 4f 64 00 91 30 4b 14 30 4b 07 90 4d 64 0d     ..Od..0K.0K..Md.
     c7a:	91 30 6e 0d 90 4b 64 07 91 30 4b 13 90 4d 64 00     .0n..Kd..0K..Md.
     c8a:	91 2b 6e 14 2b 4b 07 90 4f 64 0d 91 2b 4b 0d 90     .+n.+K..Od..+K..
     c9a:	4d 64 07 91 2b 6e 14 90 4b 64 00 91 2b 4b 13 2b     Md..+n..Kd..+K.+
     caa:	4b 07 90 46 64 0d 91 2b 6e 0d 90 4b 64 07 91 2b     K..Fd..+n..Kd..+
     cba:	4b 14 90 4d 64 00 91 2c 6e 13 2c 4b 07 90 50 64     K..Md..,n.,K..Pd
     cca:	0d 91 2c 4b 0d 90 4f 64 07 91 2c 6e 14 90 4d 64     ..,K..Od..,n..Md
     cda:	00 91 2c 4b 14 2c 4b 06 90 48 64 0d 91 2c 6e 0e     ..,K.,K..Hd..,n.
     cea:	90 4d 64 06 91 2c 4b 14 90 52 64 00 91 27 6e 0d     .Md..,K..Rd..'n.
     cfa:	90 50 64 07 91 27 4b 06 90 4f 64 0e 50 64 00 91     .Pd..'K..Od.Pd..
     d0a:	27 4b 0d 90 4f 64 06 91 27 6e 07 90 4d 64 0d 4b     'K..Od..'n..Md.K
     d1a:	64 00 91 27 4b 14 27 4b 07 90 46 64 0d 91 27 6e     d..'K.'K..Fd..'n
     d2a:	0d 90 4b 64 07 91 27 4b 13 90 47 64 00 91 26 6e     ..Kd..'K..Gd..&n
     d3a:	14 26 4b 07 90 4a 64 0d 91 26 4b 0d 90 4f 64 07     .&K..Jd..&K..Od.
     d4a:	91 26 6e 14 90 53 64 00 91 26 4b 13 26 4b 07 90     .&n..Sd..&K.&K..
     d5a:	56 64 0d 91 26 6e 0d 90 5b 64 07 91 26 4b 14 90     Vd..&n..[d..&K..
     d6a:	3d 64 00 91 31 64 06 90 41 64 07 44 64 07 49 64     =d..1d..Ad.Dd.Id
     d7a:	06 4d 64 07 50 64 06 55 64 07 59 64 07 5c 64 06     .Md.Pd.Ud.Yd.\d.
     d8a:	59 64 07 55 64 06 50 64 07 4d 64 07 49 64 06 44     Yd.Ud.Pd.Md.Id.D
     d9a:	64 07 41 64 06 3d 64 07 38 64 07 3d 64 06 41 64     d.Ad.=d.8d.=d.Ad
     daa:	07 44 64 06 49 64 07 44 64 07 41 64 06 43 64 00     .Dd.Id.Dd.Ad.Cd.
     dba:	91 37 64 07 90 47 64 06 4a 64 07 4f 64 06 53 64     .7d..Gd.Jd.Od.Sd
     dca:	07 56 64 07 5b 64 06 5f 64 07 62 64 06 5f 64 07     .Vd.[d._d.bd._d.
     dda:	5b 64 07 56 64 06 53 64 07 4f 64 06 4a 64 07 47     [d.Vd.Sd.Od.Jd.G
     dea:	64 07 43 64 06 3e 64 07 43 64 06 47 64 07 4a 64     d.Cd.>d.Cd.Gd.Jd
     dfa:	07 4f 64 06 4a 64 07 47 64 06 46 64 00 91 3a 64     .Od.Jd.Gd.Fd..:d
     e0a:	07 90 4a 64 07 4d 64 06 52 64 07 56 64 06 59 64     ..Jd.Md.Rd.Vd.Yd
     e1a:	07 5e 64 07 62 64 06 65 64 07 62 64 06 5e 64 07     .^d.bd.ed.bd.^d.
     e2a:	59 64 07 56 64 06 52 64 07 4d 64 06 4a 64 07 46     Yd.Vd.Rd.Md.Jd.F
     e3a:	64 07 41 64 06 46 64 07 4a 64 06 4d 64 07 52 64     d.Ad.Fd.Jd.Md.Rd
     e4a:	07 4d 64 06 4a 64 07 54 7f 00 43 64 00 48 64 00     .Md.Jd.T..Cd.Hd.
     e5a:	4b 64 00 4f 64 00 91 30 64 1d 30 64 0a 30 64 14     Kd.Od..0d.0d.0d.
     e6a:	90 4b 64 00 48 64 00 43 64 00 91 30 64 28 30 64     .Kd.Hd.Cd..0d(0d
     e7a:	14 90 43 64 00 48 64 00 4b 64 00 4f 64 00 91 30     ..Cd.Hd.Kd.Od..0
     e8a:	64 13 30 64 0a 90 41 64 00 4d 64 0a 43 64 00 46     d.0d..Ad.Md.Cd.F
     e9a:	64 00 4b 64 00 4f 64 00 91 33 64 1e 33 64 0a 33     d.Kd.Od..3d.3d.3
     eaa:	64 14 90 4b 64 00 46 64 00 43 64 00 91 33 64 27     d..Kd.Fd.Cd..3d'
     eba:	33 64 14 90 46 64 00 43 64 00 4b 64 00 4f 64 00     3d..Fd.Cd.Kd.Od.
     eca:	91 33 64 14 33 64 0a 90 41 64 00 4d 64 0a 41 64     .3d.3d..Ad.Md.Ad
     eda:	00 46 64 00 4a 64 00 4d 64 00 91 2e 64 1d 2e 64     .Fd.Jd.Md...d..d
     eea:	0a 2e 64 14 90 41 64 00 46 64 00 4a 64 00 91 2e     ..d..Ad.Fd.Jd...
     efa:	64 27 2e 64 14 90 41 64 00 46 64 00 4a 64 00 4d     d'.d..Ad.Fd.Jd.M
     f0a:	64 00 91 2e 64 14 2e 64 0a 90 3f 64 00 4b 64 0a     d...d..d..?d.Kd.
     f1a:	3f 64 00 44 64 00 48 64 00 4b 64 00 91 2c 64 1e     ?d.Dd.Hd.Kd..,d.
     f2a:	2c 64 09 2c 64 14 90 41 64 00 46 64 00 4a 64 00     ,d.,d..Ad.Fd.Jd.
     f3a:	91 2c 64 14 2e 64 14 90 46 64 00 91 2c 64 14 90     .,d..d..Fd..,d..
     f4a:	3f 64 00 43 64 00 48 64 00 91 2e 64 13 30 64 14     ?d.Cd.Hd...d.0d.
     f5a:	90 43 64 00 48 64 00 4b 64 00 4f 64 00 91 30 64     .Cd.Hd.Kd.Od..0d
     f6a:	1e 30 64 0a 30 64 14 90 4b 64 00 48 64 00 43 64     .0d.0d..Kd.Hd.Cd
     f7a:	00 91 30 64 27 30 64 14 90 43 64 00 48 64 00 4b     ..0d'0d..Cd.Hd.K
     f8a:	64 00 4f 64 00 91 30 64 14 30 64 0a 90 41 64 00     d.Od..0d.0d..Ad.
     f9a:	4d 64 0a 43 64 00 46 64 00 4b 64 00 4f 64 00 91     Md.Cd.Fd.Kd.Od..
     faa:	33 64 1d 33 64 0a 33 64 14 90 4b 64 00 46 64 00     3d.3d.3d..Kd.Fd.
     fba:	43 64 00 91 33 64 28 33 64 13 90 46 64 00 43 64     Cd..3d(3d..Fd.Cd
     fca:	00 4b 64 00 4f 64 00 91 33 64 14 33 64 0a 90 41     .Kd.Od..3d.3d..A
     fda:	64 00 4d 64 0a 41 64 00 46 64 00 4a 64 00 4d 64     d.Md.Ad.Fd.Jd.Md
     fea:	00 91 2e 64 1e 2e 64 09 2e 64 14 90 41 64 00 46     ...d..d..d..Ad.F
     ffa:	64 00 4a 64 00 91 2e 64 28 2e 64 14 90 41 64 00     d.Jd...d(.d..Ad.
    100a:	46 64 00 4a 64 00 4d 64 00 91 2e 64 13 2e 64 0a     Fd.Jd.Md...d..d.
    101a:	90 3f 64 00 4b 64 0a 3f 64 00 44 64 00 48 64 00     .?d.Kd.?d.Dd.Hd.
    102a:	4b 64 00 91 2c 64 1e 2c 64 0a 2c 64 14 90 41 64     Kd..,d.,d.,d..Ad
    103a:	00 46 64 00 4a 64 00 91 2c 64 13 2e 64 14 90 46     .Fd.Jd..,d..d..F
    104a:	64 00 91 2c 64 0f ff 06 01 45 05 90 3f 64 00 43     d..,d....E..?d.C
    105a:	64 00 48 64 00 91 30 64 14 30 64 81 0a ff 2f 00     d.Hd..0d.0d.../.

0000106a <planetsong>:
    106a:	00 c0 00 00 c1 01 00 b0 07 7f 00 b1 07 74 00 ff     .............t..
    107a:	06 01 53 1b 90 48 78 00 91 30 6e 07 90 43 55 00     ..S..Hx..0n..CU.
    108a:	91 30 50 07 90 48 55 00 91 30 50 07 90 4a 78 00     .0P..HU..0P..Jx.
    109a:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 48 55 00     .0n..KU..0P..HU.
    10aa:	91 30 50 07 90 4a 78 00 91 30 6e 07 90 4b 55 00     .0P..Jx..0n..KU.
    10ba:	91 30 50 07 90 4d 55 00 91 30 50 07 90 4a 78 00     .0P..MU..0P..Jx.
    10ca:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 4d 55 00     .0n..KU..0P..MU.
    10da:	91 30 50 07 90 4f 78 00 91 30 6e 07 90 4b 55 00     .0P..Ox..0n..KU.
    10ea:	91 30 50 07 90 4d 78 00 91 2e 6e 07 90 4f 55 07     .0P..Mx...n..OU.
    10fa:	50 78 00 91 30 6e 06 90 4d 55 00 91 30 50 07 90     Px..0n..MU..0P..
    110a:	4f 55 00 91 30 50 07 90 4b 78 00 91 30 6e 07 90     OU..0P..Kx..0n..
    111a:	4d 55 00 91 30 50 07 90 4a 55 00 91 30 50 07 30     MU..0P..JU..0P.0
    112a:	6e 03 90 4b 78 04 48 55 00 91 30 50 07 90 4a 55     n..Kx.HU..0P..JU
    113a:	00 91 30 50 07 90 46 78 00 91 30 6e 07 90 4d 55     ..0P..Fx..0n..MU
    114a:	00 91 30 50 07 90 46 78 00 91 30 50 07 90 4f 55     ..0P..Fx..0P..OU
    115a:	00 91 30 6e 07 90 46 78 00 91 30 50 07 90 4d 55     ..0n..Fx..0P..MU
    116a:	00 91 2e 6e 07 90 46 78 07 48 55 00 91 30 6e 07     ...n..Fx.HU..0n.
    117a:	90 43 55 00 91 30 50 07 90 48 55 00 91 30 50 07     .CU..0P..HU..0P.
    118a:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    119a:	90 48 55 00 91 30 50 06 90 4a 55 00 91 30 6e 07     .HU..0P..JU..0n.
    11aa:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 30 50 07     .KU..0P..MU..0P.
    11ba:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    11ca:	90 4d 55 00 91 30 50 07 90 4f 55 00 91 30 6e 07     .MU..0P..OU..0n.
    11da:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 2e 6e 07     .KU..0P..MU...n.
    11ea:	90 4f 55 07 50 55 00 91 30 6e 07 90 4d 55 00 91     .OU.PU..0n..MU..
    11fa:	30 50 07 90 4f 55 00 91 30 50 07 90 4b 55 00 91     0P..OU..0P..KU..
    120a:	30 6e 07 90 4d 55 00 91 30 50 07 90 4a 55 00 91     0n..MU..0P..JU..
    121a:	30 50 07 30 6e 02 90 4b 55 05 48 55 00 91 30 50     0P.0n..KU.HU..0P
    122a:	07 90 4a 55 00 91 30 50 07 90 46 55 00 91 30 6e     ..JU..0P..FU..0n
    123a:	06 90 4d 55 00 91 30 50 07 90 46 55 00 91 30 50     ..MU..0P..FU..0P
    124a:	07 90 4f 55 00 91 30 6e 07 90 46 55 00 91 30 50     ..OU..0n..FU..0P
    125a:	07 90 4d 55 00 91 2e 6e 07 90 46 55 07 48 78 00     ..MU...n..FU.Hx.
    126a:	91 2c 6e 07 90 43 55 00 91 2c 50 07 90 48 55 00     .,n..CU..,P..HU.
    127a:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
    128a:	91 2c 50 07 90 48 55 00 91 2c 50 07 90 4a 78 00     .,P..HU..,P..Jx.
    129a:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 55 00     .,n..KU..,P..MU.
    12aa:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
    12ba:	91 2c 50 07 90 4d 55 00 91 2c 50 07 90 4f 78 00     .,P..MU..,P..Ox.
    12ca:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 78 00     .,n..KU..,P..Mx.
    12da:	91 2b 6e 06 90 4f 55 07 50 78 00 91 2c 6e 07 90     .+n..OU.Px..,n..
    12ea:	4d 55 00 91 2c 50 07 90 4f 55 00 91 2c 50 07 90     MU..,P..OU..,P..
    12fa:	4b 78 00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90     Kx..,n..MU..,P..
    130a:	4a 55 00 91 2c 50 07 2c 6e 02 90 4b 78 05 48 55     JU..,P.,n..Kx.HU
    131a:	00 91 2c 50 07 90 4a 55 00 91 2c 50 07 90 46 78     ..,P..JU..,P..Fx
    132a:	00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90 46 78     ..,n..MU..,P..Fx
    133a:	00 91 2c 50 07 90 4f 55 00 91 2c 6e 07 90 46 78     ..,P..OU..,n..Fx
    134a:	00 91 2c 50 07 90 4d 55 00 91 2b 6e 07 90 46 78     ..,P..MU..+n..Fx
    135a:	07 48 55 00 91 29 6e 07 90 43 55 00 91 29 50 07     .HU..)n..CU..)P.
    136a:	90 48 55 00 91 29 50 06 90 4a 55 00 91 29 6e 07     .HU..)P..JU..)n.
    137a:	90 4b 55 00 91 29 50 07 90 48 55 00 91 29 50 07     .KU..)P..HU..)P.
    138a:	90 4a 55 00 91 2b 6e 07 90 4b 55 00 91 2b 50 07     .JU..+n..KU..+P.
    139a:	90 4d 55 00 91 2b 50 07 90 4a 55 00 91 2b 6e 07     .MU..+P..JU..+n.
    13aa:	90 4b 55 00 91 2b 50 07 90 4d 55 00 91 2b 50 07     .KU..+P..MU..+P.
    13ba:	90 4f 55 00 91 2c 6e 07 90 4b 55 00 91 2c 50 07     .OU..,n..KU..,P.
    13ca:	90 4d 55 00 91 2c 6e 07 90 4f 55 07 50 55 00 91     .MU..,n..OU.PU..
    13da:	2e 6e 07 90 4d 55 00 91 2e 50 07 90 4f 55 00 91     .n..MU...P..OU..
    13ea:	2e 50 07 90 4b 55 00 91 2e 6e 07 90 4d 55 00 91     .P..KU...n..MU..
    13fa:	2e 50 07 90 4a 55 00 91 2e 50 07 2e 6e 02 90 4b     .P..JU...P..n..K
    140a:	55 05 48 55 00 91 2e 50 06 90 4a 55 00 91 2e 50     U.HU...P..JU...P
    141a:	07 90 46 55 00 91 2e 6e 07 90 4d 55 00 91 2e 50     ..FU...n..MU...P
    142a:	07 90 46 55 00 91 2e 50 07 90 4f 55 00 91 2e 6e     ..FU...P..OU...n
    143a:	07 90 46 55 00 91 2e 50 07 90 4d 55 00 91 2e 6e     ..FU...P..MU...n
    144a:	07 90 46 55 07 48 55 00 91 30 6e 07 90 43 55 00     ..FU.HU..0n..CU.
    145a:	91 30 50 07 90 48 55 00 91 30 50 07 90 4a 55 00     .0P..HU..0P..JU.
    146a:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 48 55 00     .0n..KU..0P..HU.
    147a:	91 30 50 07 90 4a 55 00 91 30 6e 07 90 4b 55 00     .0P..JU..0n..KU.
    148a:	91 30 50 07 90 4d 55 00 91 30 50 07 90 4a 55 00     .0P..MU..0P..JU.
    149a:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 4d 55 00     .0n..KU..0P..MU.
    14aa:	91 30 50 07 90 4f 55 00 91 30 6e 06 90 4b 55 00     .0P..OU..0n..KU.
    14ba:	91 30 50 07 90 4d 55 00 91 2e 6e 07 90 4f 55 07     .0P..MU...n..OU.
    14ca:	50 55 00 91 30 6e 07 90 4d 55 00 91 30 50 07 90     PU..0n..MU..0P..
    14da:	4f 55 00 91 30 50 07 90 4b 55 00 91 30 6e 07 90     OU..0P..KU..0n..
    14ea:	4d 55 00 91 30 50 07 90 4a 55 00 91 30 50 07 30     MU..0P..JU..0P.0
    14fa:	6e 02 90 4b 55 05 48 55 00 91 30 50 07 90 4a 55     n..KU.HU..0P..JU
    150a:	00 91 30 50 07 90 46 55 00 91 30 6e 07 90 4d 55     ..0P..FU..0n..MU
    151a:	00 91 30 50 07 90 46 55 00 91 30 50 07 90 4f 55     ..0P..FU..0P..OU
    152a:	00 91 30 6e 07 90 46 55 00 91 30 50 07 90 4d 55     ..0n..FU..0P..MU
    153a:	00 91 2e 6e 07 90 46 55 07 48 55 00 91 30 6e 06     ...n..FU.HU..0n.
    154a:	90 43 55 00 91 30 50 07 90 48 55 00 91 30 50 07     .CU..0P..HU..0P.
    155a:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    156a:	90 48 55 00 91 30 50 07 90 4a 55 00 91 30 6e 07     .HU..0P..JU..0n.
    157a:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 30 50 07     .KU..0P..MU..0P.
    158a:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    159a:	90 4d 55 00 91 30 50 07 90 4f 55 00 91 30 6e 07     .MU..0P..OU..0n.
    15aa:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 2e 6e 07     .KU..0P..MU...n.
    15ba:	90 4f 55 07 50 55 00 91 30 6e 07 90 4d 55 00 91     .OU.PU..0n..MU..
    15ca:	30 50 07 90 4f 55 00 91 30 50 07 90 4b 55 00 91     0P..OU..0P..KU..
    15da:	30 6e 07 90 4d 55 00 91 30 50 07 90 4a 55 00 91     0n..MU..0P..JU..
    15ea:	30 50 06 30 6e 03 90 4b 55 04 48 55 00 91 30 50     0P.0n..KU.HU..0P
    15fa:	07 90 4a 55 00 91 30 50 07 90 46 55 00 91 30 6e     ..JU..0P..FU..0n
    160a:	07 90 4d 55 00 91 30 50 07 90 46 55 00 91 30 50     ..MU..0P..FU..0P
    161a:	07 90 4f 55 00 91 30 6e 07 90 46 55 00 91 30 50     ..OU..0n..FU..0P
    162a:	07 90 4d 55 00 91 2e 6e 07 90 46 55 07 48 78 00     ..MU...n..FU.Hx.
    163a:	91 2c 6e 07 90 43 55 00 91 2c 50 07 90 48 55 00     .,n..CU..,P..HU.
    164a:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
    165a:	91 2c 50 07 90 48 55 00 91 2c 50 07 90 4a 78 00     .,P..HU..,P..Jx.
    166a:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 55 00     .,n..KU..,P..MU.
    167a:	91 2c 50 07 90 4a 78 00 91 2c 6e 06 90 4b 55 00     .,P..Jx..,n..KU.
    168a:	91 2c 50 07 90 4d 55 00 91 2c 50 07 90 4f 78 00     .,P..MU..,P..Ox.
    169a:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 78 00     .,n..KU..,P..Mx.
    16aa:	91 2b 6e 07 90 4f 55 07 50 78 00 91 2c 6e 07 90     .+n..OU.Px..,n..
    16ba:	4d 55 00 91 2c 50 07 90 4f 55 00 91 2c 50 07 90     MU..,P..OU..,P..
    16ca:	4b 78 00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90     Kx..,n..MU..,P..
    16da:	4a 55 00 91 2c 50 07 2c 6e 02 90 4b 78 05 48 55     JU..,P.,n..Kx.HU
    16ea:	00 91 2c 50 07 90 4a 55 00 91 2c 50 07 90 46 78     ..,P..JU..,P..Fx
    16fa:	00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90 46 78     ..,n..MU..,P..Fx
    170a:	00 91 2c 50 07 90 4f 55 00 91 2c 6e 07 90 46 78     ..,P..OU..,n..Fx
    171a:	00 91 2c 50 07 90 4d 55 00 91 2b 6e 06 90 46 78     ..,P..MU..+n..Fx
    172a:	07 48 55 00 91 29 6e 07 90 43 55 00 91 29 50 07     .HU..)n..CU..)P.
    173a:	90 48 55 00 91 29 50 07 90 4a 55 00 91 29 6e 07     .HU..)P..JU..)n.
    174a:	90 4b 55 00 91 29 50 07 90 48 55 00 91 29 50 07     .KU..)P..HU..)P.
    175a:	90 4a 55 00 91 2b 6e 07 90 4b 55 00 91 2b 50 07     .JU..+n..KU..+P.
    176a:	90 4d 55 00 91 2b 50 07 90 4a 55 00 91 2b 6e 07     .MU..+P..JU..+n.
    177a:	90 4b 55 00 91 2b 50 07 90 4d 55 00 91 2b 50 07     .KU..+P..MU..+P.
    178a:	90 4f 55 00 91 2c 6e 07 90 4b 55 00 91 2c 50 07     .OU..,n..KU..,P.
    179a:	90 4d 55 00 91 2c 6e 07 90 4f 55 07 50 55 00 91     .MU..,n..OU.PU..
    17aa:	2e 6e 07 90 4d 55 00 91 2e 50 07 90 4f 55 00 91     .n..MU...P..OU..
    17ba:	2e 50 07 90 4b 55 00 91 2e 6e 06 90 4d 55 00 91     .P..KU...n..MU..
    17ca:	2e 50 07 90 4a 55 00 91 2e 50 07 2e 6e 03 90 4b     .P..JU...P..n..K
    17da:	55 04 48 55 00 91 2e 50 07 90 4a 55 00 91 2e 50     U.HU...P..JU...P
    17ea:	07 90 46 55 00 91 2e 6e 07 90 4d 55 00 91 2e 50     ..FU...n..MU...P
    17fa:	07 90 46 55 00 91 2e 50 07 90 4f 55 00 91 30 6e     ..FU...P..OU..0n
    180a:	07 90 46 55 00 91 30 50 07 90 4d 55 00 91 2e 6e     ..FU..0P..MU...n
    181a:	07 90 46 55 07 54 64 00 48 64 00 91 30 6e 07 30     ..FU.Td.Hd..0n.0
    182a:	50 07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e     P.0P.0n.0P.0P.0n
    183a:	07 30 50 06 30 50 07 30 6e 07 30 50 07 30 50 07     .0P.0P.0n.0P.0P.
    184a:	30 6e 07 30 50 07 2e 6e 0e 30 6e 07 30 50 07 30     0n.0P..n.0n.0P.0
    185a:	50 07 30 6e 07 30 50 07 30 50 07 30 6e 07 30 50     P.0n.0P.0P.0n.0P
    186a:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 06     .0P.0n.0P.0P.0n.
    187a:	30 50 07 2e 6e 0e 90 33 64 00 37 64 00 3c 64 00     0P..n..3d.7d.<d.
    188a:	91 30 6e 07 30 50 07 30 50 07 90 32 64 00 37 64     .0n.0P.0P..2d.7d
    189a:	00 3a 64 00 91 30 6e 07 30 50 07 30 50 07 90 33     .:d..0n.0P.0P..3
    18aa:	64 00 37 64 00 3c 64 00 91 30 6e 07 30 50 07 30     d.7d.<d..0n.0P.0
    18ba:	50 07 90 37 64 00 3a 64 00 3e 64 00 91 30 6e 07     P..7d.:d.>d..0n.
    18ca:	30 50 07 30 50 07 90 37 64 00 3c 64 00 3f 64 00     0P.0P..7d.<d.?d.
    18da:	91 30 6e 07 30 50 07 90 37 64 00 3a 64 00 3e 64     .0n.0P..7d.:d.>d
    18ea:	00 91 30 6e 07 30 6e 07 90 3a 64 00 43 64 00 3f     ..0n.0n..:d.Cd.?
    18fa:	64 00 91 33 6e 06 33 50 07 33 50 07 33 6e 07 33     d..3n.3P.3P.3n.3
    190a:	50 07 33 50 07 90 37 64 00 3a 64 00 3f 64 00 91     P.3P..7d.:d.?d..
    191a:	33 6e 07 33 50 07 33 50 07 33 6e 07 33 50 07 33     3n.3P.3P.3n.3P.3
    192a:	50 07 90 3a 64 00 3f 64 00 43 64 00 91 33 6e 07     P..:d.?d.Cd..3n.
    193a:	33 50 07 33 6e 07 33 6e 07 90 41 64 00 3e 64 00     3P.3n.3n..Ad.>d.
    194a:	3a 64 00 91 2e 6e 07 2e 50 07 2e 50 07 2e 6e 07     :d...n..P..P..n.
    195a:	2e 50 07 2e 50 06 90 35 64 00 3a 64 00 3e 64 00     .P..P..5d.:d.>d.
    196a:	91 2e 6e 07 2e 50 07 2e 50 07 2e 6e 07 2e 50 07     ..n..P..P..n..P.
    197a:	2e 50 07 90 3a 64 00 3e 64 00 41 64 00 91 2e 6e     .P..:d.>d.Ad...n
    198a:	07 2e 50 07 2e 6e 07 2e 6e 07 90 37 64 00 3c 64     ..P..n..n..7d.<d
    199a:	00 3f 64 00 91 30 6e 07 30 50 07 30 50 07 30 6e     .?d..0n.0P.0P.0n
    19aa:	07 30 50 07 30 50 07 30 6e 07 30 50 07 30 50 07     .0P.0P.0n.0P.0P.
    19ba:	30 6e 06 30 50 07 30 50 07 30 6e 07 30 50 07 2e     0n.0P.0P.0n.0P..
    19ca:	6e 0e 30 6e 07 30 50 07 30 50 07 30 6e 07 30 50     n.0n.0P.0P.0n.0P
    19da:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 07     .0P.0n.0P.0P.0n.
    19ea:	30 50 07 30 50 07 30 6e 07 30 50 07 2e 6e 0d 90     0P.0P.0n.0P..n..
    19fa:	33 64 00 37 64 00 3c 64 00 91 30 6e 07 30 50 07     3d.7d.<d..0n.0P.
    1a0a:	30 50 07 90 32 64 00 37 64 00 3a 64 00 91 30 6e     0P..2d.7d.:d..0n
    1a1a:	07 30 50 07 30 50 07 90 33 64 00 37 64 00 3c 64     .0P.0P..3d.7d.<d
    1a2a:	00 91 30 6e 07 30 50 07 30 50 07 90 37 64 00 3a     ..0n.0P.0P..7d.:
    1a3a:	64 00 3e 64 00 91 30 6e 07 30 50 07 30 50 07 90     d.>d..0n.0P.0P..
    1a4a:	37 64 00 3c 64 00 3f 64 00 91 30 6e 07 30 50 07     7d.<d.?d..0n.0P.
    1a5a:	90 37 64 00 3a 64 00 3e 64 00 91 2e 6e 0e 90 3a     .7d.:d.>d...n..:
    1a6a:	64 00 43 64 00 3f 64 00 91 33 6e 07 33 50 07 33     d.Cd.?d..3n.3P.3
    1a7a:	50 07 33 6e 06 33 50 07 33 50 07 90 37 64 00 3a     P.3n.3P.3P..7d.:
    1a8a:	64 00 3f 64 00 91 33 6e 07 33 50 07 33 50 07 33     d.?d..3n.3P.3P.3
    1a9a:	6e 07 33 50 07 33 50 07 90 3a 64 00 3f 64 00 43     n.3P.3P..:d.?d.C
    1aaa:	64 00 91 33 6e 07 33 50 07 32 6e 0e 90 41 64 00     d..3n.3P.2n..Ad.
    1aba:	3e 64 00 3a 64 00 91 2e 6e 07 2e 50 07 2e 50 07     >d.:d...n..P..P.
    1aca:	2e 6e 07 2e 50 07 2e 50 07 90 35 64 00 3a 64 00     .n..P..P..5d.:d.
    1ada:	3e 64 00 91 2e 6e 07 2e 50 06 2e 50 07 2e 6e 07     >d...n..P..P..n.
    1aea:	2e 50 07 2e 50 07 90 3a 64 00 3e 64 00 41 64 00     .P..P..:d.>d.Ad.
    1afa:	91 2e 6e 05 ff 06 01 45 02 91 2e 50 07 2c 6e 0e     ..n....E...P.,n.
    1b0a:	90 37 64 00 3c 64 00 3f 64 00 91 30 6e 07 30 50     .7d.<d.?d..0n.0P
    1b1a:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 07     .0P.0n.0P.0P.0n.
    1b2a:	30 50 07 30 50 07 30 6e 07 30 50 07 30 50 07 ff     0P.0P.0n.0P.0P..
    1b3a:	2f 00                                               /.

00001b3c <my_patches>:
    1b3c:	00 00 00 b3 1c 00 00 00 00 00 00 00 b3 1c 00 00     ................
    1b4c:	00 00 00 00 00 a2 1c 00 00 00 00 00 00 00 4c 1c     ..............L.
    1b5c:	00 00 00 00 00 00 00 a2 1c 00 00 00 00 00 00 00     ................
    1b6c:	7b 1b 00 00 00 00 00 00 00 7b 1b 00 00 00 00        {........{.....

00001b7b <explode>:
    1b7b:	00 07 7f 00 02 03 00 00 ff 00 08 41 01 04 04 01     ...........A....
    1b8b:	04 04 01 04 04 01 04 04 01 04 04 01 04 04 01 04     ................
    1b9b:	04 01 04 04 01 04 04 03 07 64 00 08 3c 01 04 04     .........d..<...
    1bab:	01 04 04 01 04 04 01 04 04 01 04 04 01 04 04 01     ................
    1bbb:	04 04 01 04 04 01 04 04 03 07 50 00 08 37 01 04     ..........P..7..
    1bcb:	04 01 04 04 01 04 04 01 04 04 01 04 04 01 04 04     ................
    1bdb:	01 04 04 01 04 04 01 04 04 03 07 32 00 08 32 01     ...........2..2.
    1beb:	04 04 01 04 04 01 04 04 01 04 04 01 04 04 01 04     ................
    1bfb:	04 01 04 04 01 04 04 01 04 04 03 07 28 00 08 2d     ............(..-
    1c0b:	01 04 04 01 04 04 01 04 04 01 04 04 01 04 04 01     ................
    1c1b:	04 04 01 04 04 01 04 04 01 04 04 03 07 14 00 08     ................
    1c2b:	28 01 04 04 01 04 04 01 04 04 01 04 04 01 04 04     (...............
    1c3b:	01 04 04 01 04 04 01 04 04 01 04 04 01 05 00 00     ................
    1c4b:	ff                                                  .

00001c4c <pshoot>:
    1c4c:	00 02 03 00 07 7f 00 08 50 01 04 06 01 04 06 01     ........P.......
    1c5c:	04 06 01 07 00 03 07 7f 00 08 50 01 04 06 01 04     ..........P.....
    1c6c:	06 01 04 06 01 07 00 03 08 50 00 07 20 01 04 06     .........P.. ...
    1c7c:	01 04 06 01 04 06 01 04 06 01 07 00 03 08 50 00     ..............P.
    1c8c:	07 0f 01 04 06 01 04 06 01 04 06 01 04 06 01 07     ................
    1c9c:	00 01 05 00 00 ff                                   ......

00001ca2 <navigate>:
    1ca2:	00 02 04 00 07 70 00 00 d8 00 08 3c 01 05 00 00     .....p.....<....
    1cb2:	ff                                                  .

00001cb3 <instrument>:
    1cb3:	00 02 04 00 00 dd 00 ff                             ........

00001cbb <sprites_data>:
    1cbb:	fe fe fe fe fe fe fe 87 fe fe fe fe fe fe 87 87     ................
    1ccb:	fe fe fe fe fe fe 87 87 fe fe fe fe 85 85 85 87     ................
    1cdb:	fe fe fe 85 87 87 87 85 fe fe 85 87 87 87 87 85     ................
    1ceb:	fe 85 87 87 87 85 85 87 85 87 87 85 85 87 87 87     ................
    1cfb:	87 87 87 fe fe fe fe fe d2 d2 eb d2 fe fe fe fe     ................
    1d0b:	87 d2 fd eb fe fe fe fe 87 87 eb d2 fe fe fe fe     ................
    1d1b:	85 87 87 d2 fe fe fe fe 87 85 85 87 85 fe fe fe     ................
    1d2b:	87 ef 87 87 87 85 fe fe ef ff ef 87 87 85 fe fe     ................
    1d3b:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 87     ................
    1d4b:	fe fe fe fe fe fe 87 87 fe fe fe fe fe fe 87 87     ................
    1d5b:	fe fe fe fe 85 85 85 87 fe fe fe 85 87 87 87 85     ................
    1d6b:	fe fe 85 87 87 87 87 85 fe 85 87 87 87 85 85 87     ................
    1d7b:	fe fe fe fe fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    1d8b:	d2 d2 eb d2 fe fe fe fe 87 d2 fd eb fe fe fe fe     ................
    1d9b:	87 87 eb d2 fe fe fe fe 85 87 87 d2 fe fe fe fe     ................
    1dab:	87 85 85 87 85 fe fe fe 87 ef 87 87 87 85 fe fe     ................
    1dbb:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1dcb:	fe fe fe fe fe fe fe fe fe ba ba ba ba ba ba fe     ................
    1ddb:	ba bd bd bd bd bd bd ba fe ba ba ba ba ba ba fe     ................
    1deb:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1dfb:	fe fe 46 46 46 46 46 46 fe a5 a5 a5 47 47 46 fe     ..FFFFFF....GGF.
    1e0b:	fe 46 46 47 47 46 3f 3f 46 46 47 47 46 fe fe fe     .FFGGF??FFGGF...
    1e1b:	46 46 47 47 46 fe fe fe fe 46 46 47 47 3f 3f fe     FFGGF....FFGG??.
    1e2b:	fe a5 a5 a5 47 fe fe fe fe fe 46 46 46 46 fe fe     ....G.....FFFF..
    1e3b:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1e4b:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1e5b:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1e6b:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1e7b:	85 87 87 85 fe 85 87 87 fe 85 87 85 fe 85 87 87     ................
    1e8b:	fe 85 87 87 ad ad ad ad fe fe 85 87 ad ad ad ad     ................
    1e9b:	fe fe 85 87 ad ad ad ad fe fe fe 85 a4 ad 87 87     ................
    1eab:	fe fe fe fe a4 a4 85 87 fe fe fe fe a4 a4 85 87     ................
    1ebb:	87 ef 87 85 87 85 fe fe 87 87 87 85 87 87 85 fe     ................
    1ecb:	ad ad ad ad ad 87 85 fe ad ad ad ad ad ad a4 ad     ................
    1edb:	ad ad ad ad ad a4 a4 a4 87 87 87 85 fe fe fe fe     ................
    1eeb:	87 87 87 85 fe fe fe fe 87 87 87 85 fe fe fe fe     ................
    1efb:	87 ef 87 85 87 85 fe fe 87 87 87 85 87 87 85 fe     ................
    1f0b:	ad ad ad ad ad 87 85 fe ad ad ad ad ad ad a4 ad     ................
    1f1b:	ad ad ad ad ad a4 a4 a4 87 87 87 85 fe fe fe fe     ................
    1f2b:	87 87 87 85 fe fe fe fe 87 87 85 fe fe fe fe fe     ................
    1f3b:	85 87 87 85 85 87 87 87 85 87 87 85 fe 85 87 87     ................
    1f4b:	fe 85 87 85 fe 85 87 87 fe 85 87 87 ad ad ad ad     ................
    1f5b:	fe fe 85 87 ad ad ad ad fe fe 85 87 ad ad ad ad     ................
    1f6b:	fe fe fe 85 a4 ad 87 87 fe fe fe fe a4 a4 85 87     ................
    1f7b:	ef ff ef 87 87 85 fe fe 87 ef 87 85 87 85 fe fe     ................
    1f8b:	87 87 87 85 87 87 85 fe ad ad ad ad ad 87 85 fe     ................
    1f9b:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    1fab:	87 87 87 87 fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    1fbb:	87 ef 87 85 87 85 fe fe 87 87 87 85 87 87 85 fe     ................
    1fcb:	ad ad ad ad ad 87 85 fe ad ad ad ad ad ad a4 ad     ................
    1fdb:	ad ad ad ad ad a4 a4 a4 87 87 87 87 fe fe fe fe     ................
    1feb:	87 87 87 87 fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    1ffb:	ef ff ef 87 87 85 fe fe 87 ef 87 85 87 85 fe fe     ................
    200b:	87 87 87 85 87 87 85 fe ad ad ad ad ad 87 85 fe     ................
    201b:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    202b:	87 87 87 87 fe fe fe fe 87 87 87 87 87 fe fe fe     ................
    203b:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    204b:	fe fe fe 27 07 fe fe fe fe fe 27 77 27 07 fe fe     ...'......'w'...
    205b:	fe fe 07 27 07 07 fe fe fe fe fe 07 07 fe fe fe     ...'............
    206b:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    207b:	fe fe fe fe fe fe 85 87 fe fe fe fe fe fe 85 87     ................
    208b:	fe fe fe fe fe 85 87 87 fe fe fe fe fe 85 87 87     ................
    209b:	fe fe fe fe 85 87 87 fe fe fe fe fe 85 87 87 fe     ................
    20ab:	fe fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4     ................
    20bb:	87 fe 85 85 fe fe fe fe 87 fe 85 85 85 fe fe fe     ................
    20cb:	fe fe 85 85 85 fe fe fe fe fe 85 85 85 fe fe fe     ................
    20db:	fe fe 85 85 85 fe fe fe fe fe 85 85 85 fe fe fe     ................
    20eb:	fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe     ................
    20fb:	fe fe fe fe fe fe fe 85 fe fe fe fe fe fe fe 85     ................
    210b:	fe fe fe fe fe 85 85 87 fe fe fe fe 85 87 87 87     ................
    211b:	fe fe fe a4 87 87 87 87 fe fe fe a4 87 87 87 fe     ................
    212b:	fe fe fe a4 a4 fe fe fe fe fe fe a4 a4 a4 fe fe     ................
    213b:	87 87 87 fe fe fe fe fe 87 87 87 87 fe fe fe fe     ................
    214b:	87 87 87 87 fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    215b:	87 85 85 fe fe fe fe fe 85 85 85 fe fe fe fe fe     ................
    216b:	a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe fe fe     ................
    217b:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 85 85     ................
    218b:	fe fe fe fe 85 85 85 85 a4 a4 85 85 85 85 85 fe     ................
    219b:	a4 a4 85 85 85 85 85 fe a4 a4 85 85 85 85 fe fe     ................
    21ab:	a4 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    21bb:	87 87 87 fe fe fe fe fe fe 85 87 87 fe fe fe fe     ................
    21cb:	fe 85 87 87 87 fe fe fe fe fe 85 87 87 fe fe fe     ................
    21db:	fe fe 85 87 87 87 fe fe fe fe fe 85 87 87 fe fe     ................
    21eb:	fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe     ................
    21fb:	fe fe fe fe fe fe fe 85 fe fe fe fe fe fe fe 85     ................
    220b:	fe fe fe fe fe 85 85 85 fe fe fe fe 85 85 85 85     ................
    221b:	fe fe fe a4 85 85 85 85 fe fe fe a4 85 85 85 fe     ................
    222b:	fe fe fe a4 a4 fe fe fe fe fe fe a4 a4 a4 fe fe     ................
    223b:	87 87 87 fe fe fe fe fe 85 87 87 85 fe fe fe fe     ................
    224b:	85 87 87 85 fe fe fe fe 85 87 87 fe fe fe fe fe     ................
    225b:	85 87 87 fe fe fe fe fe 85 87 87 fe fe fe fe fe     ................
    226b:	a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe fe fe     ................
    227b:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 85 85     ................
    228b:	fe fe fe fe 85 85 85 85 a4 a4 85 85 85 85 a4 a4     ................
    229b:	a4 a4 85 85 85 85 a4 a4 a4 a4 85 85 85 85 a4 a4     ................
    22ab:	a4 fe fe fe fe fe a4 fe fe fe fe fe fe fe fe fe     ................
    22bb:	87 87 85 87 87 fe fe fe fe fe 85 87 87 87 fe fe     ................
    22cb:	fe fe 85 87 87 87 fe fe 85 85 85 87 87 fe fe fe     ................
    22db:	87 87 87 87 87 fe fe fe 87 87 87 87 fe fe fe fe     ................
    22eb:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    22fb:	fe fe fe fe fe fe fe fe fe fe 12 12 12 12 fe fe     ................
    230b:	ad 12 0f 1f 1f 0f 12 ad ad 12 12 12 12 12 12 ad     ................
    231b:	ad ad 12 12 12 12 ad ad ad 12 ad 12 12 ad 12 ad     ................
    232b:	ad fe 12 12 12 12 fe ad ad fe fe fe fe fe fe ad     ................
    233b:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 7f     ................
    234b:	fe fe fe fe fe 7f 7f 7f fe fe fe fe 7f 7f 7f 7f     ................
    235b:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe fe fe     ................
    236b:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    237b:	a4 fe fe fe fe fe fe fe a4 ad fe fe ff ff a4 ad     ................
    238b:	a4 ad f6 ff ff a4 ad f6 a4 ad f6 ff a4 ad f6 ff     ................
    239b:	a4 ad fe fe a4 ad f6 ff a4 fe fe a4 a4 ad f6 fe     ................
    23ab:	fe fe fe a4 a4 ad f6 f6 fe fe fe fe fe fe fe fe     ................
    23bb:	fe fe fe fe fe fe fe fe f6 ff ff ff d2 fe fe fe     ................
    23cb:	ff ff ff ff d2 eb fe fe ff fe ff ff eb fd d2 fe     ................
    23db:	fe fe fe ff d2 eb d2 d2 fe fe fe fe fe fe fe fe     ................
    23eb:	f6 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    23fb:	fe fe bf 7f 7f bf fe fe fe 7f 7f 7f 7f 7f 7f fe     ................
    240b:	bf 7f 7f 7f 7f 7f 7f bf 7f 7f 7f 7f 7f 7f 7f 7f     ................
    241b:	7f 7f 7f 7f 7f 7f 7f 7f bf 7f 7f 7f 7f 7f 7f bf     ................
    242b:	fe 7f 7f 7f 7f 7f 7f fe fe fe bf 7f 7f bf fe fe     ................
    243b:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    244b:	fe fe fe 7f 7f fe fe fe fe fe 7f 7f 7f 7f fe fe     ................
    245b:	fe fe 7f 7f 7f 7f fe fe fe fe fe 7f 7f fe fe fe     ................
    246b:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    247b:	fe fe bf 7f 7f bf fe fe fe 7f 7f 7f 7f 7f 7f fe     ................
    248b:	bf 7f fe fe 7f 7f 7f bf 7f fe fe fe fe 7f 7f 7f     ................
    249b:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe 7f bf     ................
    24ab:	fe fe fe fe fe fe 7f fe fe fe fe fe fe bf fe fe     ................
    24bb:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    24cb:	fe fe fe fe fe fe fe fe fe fe fe e3 fe fe fe fe     ................
    24db:	fe fe fe ff fe fe fe fe fe fe fe fe fe fe fe fe     ................
    24eb:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    24fb:	fe fe fe fe fe fe fe fe fe fe fe fe ff fe fe fe     ................
    250b:	fe fe fe fe 7f ff fe fe fe fe fe fe 7f 7f ff fe     ................
    251b:	fe fe fe fe 7f 7f 7f ff fe fe fe fe 7f 7f 7f fe     ................
    252b:	fe fe fe fe 7f 7f fe fe fe fe fe fe 7f fe fe fe     ................
    253b:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    254b:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    255b:	7f 7f 7f 7f 7f 7f ff fe fe 7f 7f 7f 7f ff fe fe     ................
    256b:	fe fe 7f 7f ff fe fe fe fe fe fe fe fe fe fe fe     ................
    257b:	fe fe fe ff fe fe fe fe fe fe ff 7f 7f fe fe fe     ................
    258b:	fe ff 7f 7f 7f 7f fe fe ff 7f 7f 7f 7f 7f 7f fe     ................
    259b:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    25ab:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    25bb:	fe fe 12 12 12 12 fe fe fe 12 0f 1f 1f 0f 12 fe     ................
    25cb:	ad 12 12 12 12 12 12 ad ad 12 ad 12 12 ad 12 ad     ................
    25db:	ad ad 12 12 12 12 ad ad ad fe 12 12 12 12 fe ad     ................
    25eb:	ad fe fe fe fe fe fe ad ad fe fe fe fe fe fe ad     ................
    25fb:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 7f     ................
    260b:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe fe 7f     ................
    261b:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    262b:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    263b:	a4 fe fe fe fe fe fe fe a4 a4 fe fe fe fe fe fe     ................
    264b:	a4 a4 ad fe fe fe fe fe a4 a4 ad ad fe fe fe fe     ................
    265b:	a4 a4 ad ad f6 fe fe fe a4 a4 ad ad f6 f6 ff ff     ................
    266b:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    267b:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    268b:	fe fe ff ff ff ff a4 a4 fe ff ff ff ff a4 a4 a4     ................
    269b:	ff ff ff ff ff a4 a4 a4 ff ff ff ff a4 a4 a4 ad     ................
    26ab:	ff ff ff ff a4 a4 ad ad ff ff ff a4 a4 ad ad f6     ................
    26bb:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    26cb:	a4 ad ad f6 f6 ff ff ff a4 ad ad f6 f6 ff ff ff     ................
    26db:	ad ad f6 f6 ff ff ff ff ad f6 f6 ff ff ff ff ff     ................
    26eb:	f6 f6 ff ff ff ff ff ff f6 ff ff 7f 7f ff ff ff     ................
    26fb:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    270b:	d2 fe fe fe fe fe fe fe d2 d2 fe fe fe fe fe fe     ................
    271b:	d2 d2 d2 fe fe fe fe fe d2 d3 eb d3 fe fe fe fe     ................
    272b:	d2 eb fd eb d2 fe fe fe d2 d3 eb d3 d2 d2 fe fe     ................
    273b:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    274b:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 7f 7f fe     ................
    275b:	a4 a4 ad ad 7f 7f 7f fe a4 a4 ad fe fe 7f fe fe     ................
    276b:	a4 a4 fe fe fe fe fe fe a4 fe fe fe fe fe fe fe     ................
    277b:	ff ff fe a4 ad ad f6 f6 ff fe a4 a4 ad ad f6 f6     ................
    278b:	fe fe a4 a4 ad ad f6 f6 fe a4 a4 a4 ad ad f6 f6     ................
    279b:	fe a4 a4 a4 a4 ad ad f6 a4 a4 a4 a4 a4 a4 ad ad     ................
    27ab:	a4 a4 a4 a4 a4 a4 a4 ad a4 a4 a4 a4 a4 a4 a4 a4     ................
    27bb:	ff ff 7f 7f 7f 7f ff ff ff fe 7f 7f 7f 7f fe ff     ................
    27cb:	fe fe 7f 7f 7f fe fe fe fe fe fe 7f fe fe fe fe     ................
    27db:	f6 fe fe fe fe fe fe fe f6 f6 fe fe fe fe fe fe     ................
    27eb:	ad f6 f6 fe fe fe fe fe ad ad f6 f6 fe fe fe fe     ................
    27fb:	d2 d2 d2 d2 d2 d2 d2 fe ff ff ff ff ff ff ff ff     ................
    280b:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    281b:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    282b:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    283b:	ef ff ef 87 87 85 fe fe 87 ef 87 85 87 85 fe fe     ................
    284b:	87 87 87 85 87 87 85 fe ad ad ad ad ad 87 85 fe     ................
    285b:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    286b:	87 87 87 85 fe fe fe fe 87 87 85 fe fe fe fe fe     ................
    287b:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 87 87     ................
    288b:	fe fe fe fe 85 87 87 87 a4 a4 85 85 85 87 87 fe     ................
    289b:	a4 a4 87 87 87 87 87 fe a4 a4 87 87 87 87 fe fe     ................
    28ab:	a4 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    28bb:	87 87 85 fe fe fe fe fe fe 85 85 85 fe fe fe fe     ................
    28cb:	fe 85 85 85 85 fe fe fe fe fe 85 85 85 fe fe fe     ................
    28db:	fe fe 85 85 85 85 fe fe fe fe fe 85 85 85 fe fe     ................
    28eb:	fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe     ................
    28fb:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    290b:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    291b:	fe fe fe fe fe fe fe fe fe fe fe fe fe 85 85 85     ................
    292b:	fe a4 87 87 87 87 87 87 a4 a4 87 87 87 87 87 87     ................
    293b:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 87     ................
    294b:	fe fe fe fe 85 85 85 87 fe fe fe 85 87 87 87 85     ................
    295b:	fe fe 85 85 87 87 87 87 85 85 85 85 85 87 87 ad     ................
    296b:	87 87 87 87 ad 85 87 87 87 87 87 87 ad ad a4 a4     ................
    297b:	87 87 87 87 fe fe fe fe 87 d2 d2 eb d2 fe fe fe     ................
    298b:	87 87 d2 fd eb fe fe fe 87 87 87 eb d2 fe fe fe     ................
    299b:	85 85 87 87 d2 fe fe fe ad ad ad ad ad 87 ef fe     ................
    29ab:	ad ad ad ad ad ad a4 ad a4 ad ad ad ad a4 a4 a4     ................
    29bb:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    29cb:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 7f 7f 7f     ................
    29db:	a4 a4 ad ad 7f 7f 7f fe a4 a4 ad fe 7f 7f 7f fe     ................
    29eb:	a4 a4 fe fe fe 7f fe fe a4 fe fe fe fe fe fe fe     ................
    29fb:	ff ff 7f 7f 7f 7f ff ff ff 7f 7f 7f 7f 7f 7f ff     ................
    2a0b:	fe fe 7f 7f 7f 7f fe fe fe fe 7f 7f 7f fe fe fe     ................
    2a1b:	f6 fe fe 7f fe fe fe fe f6 f6 fe fe fe fe fe fe     ................
    2a2b:	ad f6 f6 fe fe fe fe fe ad ad f6 f6 fe fe fe fe     ................

00002a3b <map_enemy_spider_1>:
    2a3b:	01 01 24                                            ..$

00002a3e <map_enemy_spider_0>:
    2a3e:	01 01 19                                            ...

00002a41 <map_enemy_shark>:
    2a41:	01 01 05                                            ...

00002a44 <map_enemy_shot>:
    2a44:	01 01 0e                                            ...

00002a47 <map_hero_shot>:
    2a47:	01 01 04                                            ...

00002a4a <map_hero_ship_large_1>:
    2a4a:	04 02 26 27 28 29 34 2b 35 2d                       ..&'()4+5-

00002a54 <map_hero_ship_large_0>:
    2a54:	04 02 26 27 28 29 2a 2b 2c 2d                       ..&'()*+,-

00002a5e <map_hero_ship_1>:
    2a5e:	03 01 25 1b 1c                                      ..%..

00002a63 <map_hero_ship_0>:
    2a63:	03 01 1a 1b 1c                                      .....

00002a68 <map_hero_prone>:
    2a68:	03 01 31 32 33                                      ..123

00002a6d <map_hero_jump>:
    2a6d:	02 03 02 03 0a 0d 17 18                             ........

00002a75 <map_hero_step_3>:
    2a75:	02 03 02 03 0a 2e 2f 30                             ....../0

00002a7d <map_hero_step_2>:
    2a7d:	02 03 00 01 07 0c 15 16                             ........

00002a85 <map_hero_step_1>:
    2a85:	02 03 02 03 0a 0b 13 14                             ........

00002a8d <map_hero_step_0>:
    2a8d:	02 03 00 01 07 09 11 12                             ........

00002a95 <map_hero_idle>:
    2a95:	02 03 00 01 07 08 0f 10                             ........

00002a9d <map_explosion_2>:
    2a9d:	01 01 1f                                            ...

00002aa0 <map_explosion_1>:
    2aa0:	01 01 1e                                            ...

00002aa3 <map_explosion_0>:
    2aa3:	01 01 1d                                            ...

00002aa6 <map_particle>:
    2aa6:	01 01 20                                            .. 

00002aa9 <map_up_arrow>:
    2aa9:	01 01 23                                            ..#

00002aac <map_down_arrow>:
    2aac:	01 01 22                                            .."

00002aaf <map_right_arrow>:
    2aaf:	01 01 21                                            ..!

00002ab2 <map_none>:
    2ab2:	01 01 06                                            ...

00002ab5 <map_level_0>:
    2ab5:	01 ff 01 34 7e 06 00 00 00 00 00 00 00 00 00 00     ...4~...........
    2ac5:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2ad5:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2ae5:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2af5:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2b05:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2b15:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2b25:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2b35:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2b45:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2b55:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2b65:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2b75:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2b85:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2b95:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2ba5:	7a 06 06 05 00 00 00 00 00 00 00 00 00 00 00 00     z...............
    2bb5:	80 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2bc5:	79 05 07 07 00 00 00 00 00 00 00 00 00 00 00 00     y...............
    2bd5:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2be5:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2bf5:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2c05:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2c15:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2c25:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2c35:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2c45:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2c55:	32 07 07 02 47 07 00 00 00 00 00 00 00 00 00 00     2...G...........
    2c65:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2c75:	0f 07 07 02 6a 07 00 00 00 00 00 00 00 00 00 00     ....j...........
    2c85:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2c95:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2ca5:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2cb5:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2cc5:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2cd5:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2ce5:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2cf5:	25 07 07 02 54 07 00 00 00 00 00 00 00 00 00 00     %...T...........
    2d05:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2d15:	02 07 07 02 2b 07 07 02 45 07 00 00 00 00 00 00     ....+...E.......
    2d25:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2d35:	11 07 07 02 32 07 0f 02 27 07 00 00 00 00 00 00     ....2...'.......
    2d45:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2d55:	49 07 0f 04 28 07 00 00 00 00 00 00 00 00 00 00     I...(...........
    2d65:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2d75:	48 07 0f 04 29 07 00 00 00 00 00 00 00 00 00 00     H...)...........
    2d85:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2d95:	47 07 0f 04 2a 07 00 00 00 00 00 00 00 00 00 00     G...*...........
    2da5:	6a 07 16 02 00 00 00 00 00 00 00 00 00 00 00 00     j...............
    2db5:	46 02 0f 04 07 02 04 07 20 02 00 00 00 00 00 00     F....... .......
    2dc5:	69 02 17 04 00 00 00 00 00 00 00 00 00 00 00 00     i...............
    2dd5:	5b 04 04 07 21 04 00 00 00 00 00 00 00 00 00 00     [...!...........
    2de5:	68 04 18 07 00 00 00 00 00 00 00 00 00 00 00 00     h...............
    2df5:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2e05:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2e15:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2e25:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2e35:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2e45:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2e55:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2e65:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2e75:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2e85:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2e95:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2ea5:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2eb5:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2ec5:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2ed5:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2ee5:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2ef5:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2f05:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2f15:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2f25:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2f35:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2f45:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2f55:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2f65:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2f75:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2f85:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2f95:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2fa5:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2fb5:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2fc5:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2fd5:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2fe5:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2ff5:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3005:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3015:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3025:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3035:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3045:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3055:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3065:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3075:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3085:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3095:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    30a5:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    30b5:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    30c5:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    30d5:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    30e5:	50 07 30 02 00 00 00 00 00 00 00 00 00 00 00 00     P.0.............
    30f5:	80 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3105:	4f 02 31 04 00 00 00 00 00 00 00 00 00 00 00 00     O.1.............
    3115:	80 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3125:	4e 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     N...............

00003135 <tiles_data>:
	...
    3175:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3185:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    3195:	ff f8 fb f8 fb f8 f8 fd ff fb f8 f8 fb f8 f8 f8     ................
    31a5:	ff f8 f8 fb f8 f8 f8 f8 ff f8 f8 f8 f8 f8 f8 f8     ................
    31b5:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    31c5:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    31d5:	fd f8 fb f8 fb f8 f8 fd f8 fb f8 f8 fb f8 f8 f8     ................
    31e5:	f8 f8 f8 fb f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    31f5:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3205:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    3215:	fd f8 fb f8 fb f8 f8 ff f8 fb f8 f8 fb f8 f8 ff     ................
    3225:	f8 f8 f8 fb f8 f8 f8 ff f8 f8 f8 f8 f8 f8 f8 ff     ................
    3235:	fa f8 f8 f8 f8 f8 f8 f8 f8 f8 fb f8 f8 f8 fb f8     ................
    3245:	f8 f8 fb f8 fb fb f8 f8 f8 f8 f8 fb f8 f8 f8 f8     ................
    3255:	f8 f8 fb f8 fb f8 f8 f8 f8 fb f8 f8 fb f8 f8 f8     ................
    3265:	f8 f8 f8 fb f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    3275:	ac ac ac ac ac ac ac ac ac ac ac ac ac ac ac ac     ................
    3285:	ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad     ................
    3295:	ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae     ................
    32a5:	af af af af af af af af af af af af af af af af     ................
    32b5:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    32c5:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    32d5:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    32e5:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    32f5:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    3305:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    3315:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    3325:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    3335:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    3345:	ab ab ab ab ab ab ab ab ab ad ad ad ad ad ad ab     ................
    3355:	ae ae ae ae ae ae ae ae ab ae ae ae ae ae ae ab     ................
    3365:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
	...
    338d:	00 00 00 e3 00 00 00 00 00 00 e3 ff e3 00 00 00     ................
    339d:	00 00 00 e3 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    33cd:	00 00 00 d2 00 00 00 00 00 00 d2 e3 d2 00 00 00     ................
    33dd:	00 00 00 d2 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    33f5:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3405:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3415:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3425:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
	...
    3441:	00 00 96 96 00 00 00 00 00 96 96 96 00 00 00 00     ................
    3451:	96 96 96 96 00 00 00 96 96 96 96 96 00 00 96 96     ................
    3461:	96 96 96 96 00 00 96 96 96 96 96 96 00 96 96 96     ................
    3471:	96 96 96 96 00 96 96 96 96 96 96 00 96 96 96 96     ................
    3481:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3491:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    34a1:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    34b1:	96 96 96 96 00 00 00 00 00 00 00 00 96 96 00 00     ................
    34c1:	00 00 00 00 96 96 96 00 00 00 00 00 96 96 96 96     ................
    34d1:	00 00 00 00 96 96 96 96 96 00 00 00 96 96 96 96     ................
    34e1:	96 96 00 00 96 96 96 96 96 96 00 00 96 96 96 96     ................
    34f1:	96 96 96 00 00 96 96 96 95 96 96 96 00 96 96 96     ................
    3501:	95 96 96 96 96 96 96 96 96 95 96 96 96 96 96 96     ................
    3511:	96 95 96 96 96 96 96 96 96 96 95 96 96 96 96 96     ................
    3521:	96 bf 95 96 95 84 96 96 96 bf 96 95 8c 83 83 8c     ................
    3531:	96 bf 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3541:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3551:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3561:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3571:	96 96 96 96 96 96 96 95 96 96 96 00 96 96 96 95     ................
    3581:	96 96 96 00 96 96 95 96 96 96 96 96 96 96 95 96     ................
    3591:	96 96 96 96 96 95 96 96 96 96 96 96 96 95 96 96     ................
    35a1:	96 96 95 96 95 96 96 96 96 95 95 95 96 96 96 96     ................
    35b1:	94 8c 8c 95 82 82 82 82 82 bf 96 96 00 d8 d8 d8     ................
    35c1:	bf ff bf 82 00 d8 d8 bf ff ff ff bf 00 d8 bf ff     ................
    35d1:	ff ff ff ff bf bf ff ff ff ff ff ff 00 00 bf ff     ................
    35e1:	ff ff ff ff 00 00 94 bf ff ff ff bf 00 00 00 8c     ................
    35f1:	bf ff bf d8 96 96 96 96 96 96 96 96 83 83 8c 8c     ................
    3601:	8c 8c 8c 83 d8 d8 d8 d8 d8 d8 d8 d8 bf d8 d8 d8     ................
    3611:	d8 d8 d8 d8 ff bf bf d8 d8 d8 d8 d8 bf d8 d8 d8     ................
    3621:	d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8     ................
    3631:	d8 d8 82 82 96 96 8c 83 83 8c 8c 8c 83 82 83 83     ................
    3641:	83 83 8c 00 82 82 82 83 83 83 83 00 82 82 82 83     ................
    3651:	83 83 83 00 d8 82 82 83 83 83 83 00 82 82 82 83     ................
    3661:	83 83 00 00 82 82 83 83 83 95 00 00 82 82 83 83     ................
    3671:	95 00 00 00 40 40 40 40 40 40 40 40 40 40 40 40     ....@@@@@@@@@@@@
    3681:	40 40 40 40 41 41 41 41 41 41 41 41 41 41 41 41     @@@@AAAAAAAAAAAA
    3691:	41 41 41 41 42 42 42 42 42 42 42 42 42 42 42 42     AAAABBBBBBBBBBBB
    36a1:	42 42 42 42 43 43 43 43 43 43 43 43 43 43 43 43     BBBBCCCCCCCCCCCC
    36b1:	43 43 43 43 00 00 00 96 95 ff d8 d8 00 00 00 00     CCCC............
    36c1:	96 ff 83 82 00 00 00 00 00 ff 96 96 00 00 00 00     ................
    36d1:	00 bf 96 96 00 00 00 00 00 bf 96 96 00 00 00 00     ................
    36e1:	00 bf 96 96 00 00 00 00 00 bf 00 00 00 00 00 00     ................
    36f1:	00 77 00 00 d8 d8 d8 82 82 82 82 82 82 82 82 82     .w..............
    3701:	82 83 83 83 8c 8c 83 83 83 83 8c 95 96 96 96 96     ................
    3711:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3721:	96 96 96 96 96 96 96 96 96 96 96 96 00 96 96 96     ................
    3731:	96 96 96 00 83 83 8c 95 96 00 00 00 83 8c 96 96     ................
    3741:	00 00 00 00 96 96 96 00 00 00 00 00 96 96 96 00     ................
    3751:	00 00 00 00 96 96 00 00 00 00 00 00 96 96 00 00     ................
	...
    3775:	44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44     DDDDDDDDDDDDDDDD
    3785:	45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45     EEEEEEEEEEEEEEEE
    3795:	46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46     FFFFFFFFFFFFFFFF
    37a5:	47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47     GGGGGGGGGGGGGGGG
    37b5:	00 00 00 00 00 77 00 00 00 00 00 00 00 77 00 00     .....w.......w..
    37c5:	00 00 00 00 00 77 00 00 00 00 00 00 00 77 00 00     .....w.......w..
    37d5:	00 00 00 00 00 77 00 00 00 00 00 00 00 77 00 00     .....w.......w..
	...
    37fd:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    380d:	00 3f 3f 2f 3f 3f 3f 2f 00 3f 3f 3f 2f 3f 3f 2f     .??/???/.???/??/
    381d:	00 3f 3f 2f 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??/.??/..????/.
	...
    383d:	00 00 00 3f 3f 2f 00 00 00 00 3f 3f 3f 2f 00 00     ...??/....???/..
    384d:	00 00 00 3f 3f 2f 00 00 00 00 00 3f 3f 2f 00 00     ...??/.....??/..
    385d:	00 00 00 3f 3f 2f 00 00 00 3f 3f 3f 3f 3f 3f 2f     ...??/...??????/
	...
    387d:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 00 00 3f 3f 2f     ..????/..??..??/
    388d:	00 00 00 00 3f 3f 2f 00 00 00 00 3f 3f 2f 00 00     ....??/....??/..
    389d:	00 00 3f 3f 2f 00 00 00 00 3f 3f 3f 3f 3f 3f 2f     ..??/....??????/
	...
    38bd:	00 3f 3f 3f 3f 3f 3f 2f 00 00 00 00 3f 3f 2f 00     .??????/....??/.
    38cd:	00 00 00 3f 3f 2f 00 00 00 00 00 00 3f 3f 2f 00     ...??/......??/.
    38dd:	00 3f 3f 00 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??..??/..????/.
	...
    3901:	3f 3f 2f 00 00 00 00 3f 3f 3f 2f 00 00 00 3f 3f     ??/....???/...??
    3911:	3f 3f 2f 00 00 3f 3f 00 3f 3f 2f 00 00 3f 3f 3f     ??/..??.??/..???
    3921:	3f 3f 3f 2f 00 00 00 00 3f 3f 2f 00 00 00 00 00     ???/....??/.....
	...
    393d:	00 3f 3f 3f 3f 3f 3f 2f 00 3f 3f 2f 00 00 00 00     .??????/.??/....
    394d:	00 3f 3f 3f 3f 3f 2f 00 00 00 00 00 00 3f 3f 2f     .?????/......??/
    395d:	00 3f 3f 00 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??..??/..????/.
	...
    397d:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 00 00 00     ..????/..??/....
    398d:	00 3f 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     .?????/..??/.??/
    399d:	00 3f 3f 2f 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??/.??/..????/.
	...
    39bd:	00 3f 3f 3f 3f 3f 3f 2f 00 00 00 00 00 3f 3f 2f     .??????/.....??/
    39cd:	00 00 00 00 3f 3f 2f 00 00 00 00 3f 3f 2f 00 00     ....??/....??/..
    39dd:	00 00 3f 3f 2f 00 00 00 00 00 3f 3f 2f 00 00 00     ..??/.....??/...
	...
    39fd:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    3a0d:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    3a1d:	00 3f 3f 2f 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??/.??/..????/.
	...
    3a3d:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    3a4d:	00 00 3f 3f 3f 3f 3f 2f 00 00 00 00 00 3f 3f 2f     ..?????/.....??/
    3a5d:	00 00 00 00 3f 3f 2f 00 00 00 3f 3f 3f 2f 00 00     ....??/...???/..
	...
    3a7d:	00 00 00 ff ff e3 00 00 00 00 ff ff ff ff e3 00     ................
    3a8d:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    3a9d:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    3abd:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    3acd:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    3add:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff e3 00     ................
	...
    3afd:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    3b0d:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    3b1d:	00 ff ff e3 00 ff ff e3 00 00 ff ff ff ff e3 00     ................
	...
    3b3d:	00 ff ff ff ff e3 00 00 00 ff ff e3 ff ff e3 00     ................
    3b4d:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    3b5d:	00 ff ff e3 ff ff e3 00 00 ff ff ff ff e3 00 00     ................
	...
    3b7d:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 00 00 00     ................
    3b8d:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 00 00 00     ................
    3b9d:	00 ff ff e3 00 00 00 00 00 ff ff ff ff ff ff e3     ................
	...
    3bbd:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 00 00 00     ................
    3bcd:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 00 00 00     ................
    3bdd:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
	...
    3bfd:	00 00 ff ff ff ff ff e3 00 ff ff e3 00 00 00 00     ................
    3c0d:	00 ff ff e3 00 00 00 00 00 ff ff e3 ff ff ff e3     ................
    3c1d:	00 ff ff e3 00 ff ff e3 00 00 ff ff ff ff ff e3     ................
	...
    3c3d:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    3c4d:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 ff ff e3     ................
    3c5d:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    3c7d:	00 ff ff ff ff ff ff e3 00 00 00 ff ff e3 00 00     ................
    3c8d:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
    3c9d:	00 00 00 ff ff e3 00 00 00 ff ff ff ff ff ff e3     ................
	...
    3cc1:	ff ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    3cd1:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 ff ff 00     ................
    3ce1:	00 ff ff e3 00 00 ff ff ff ff e3 00 00 00 00 00     ................
	...
    3cfd:	00 ff ff e3 00 ff ff e3 00 ff ff e3 ff ff e3 00     ................
    3d0d:	00 ff ff ff ff e3 00 00 00 ff ff ff ff e3 00 00     ................
    3d1d:	00 ff ff e3 ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
	...
    3d3d:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    3d4d:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    3d5d:	00 ff ff e3 00 00 00 00 00 ff ff ff ff ff ff e3     ................
	...
    3d7d:	ff ff e3 00 00 ff ff e3 ff ff ff e3 ff ff ff e3     ................
    3d8d:	ff ff ff ff ff ff ff e3 ff ff e3 ff e3 ff ff e3     ................
    3d9d:	ff ff e3 00 00 ff ff e3 ff ff e3 00 00 ff ff e3     ................
	...
    3dbd:	00 ff ff e3 00 ff ff e3 00 ff ff ff e3 ff ff e3     ................
    3dcd:	00 ff ff ff ff ff ff e3 00 ff ff ff ff ff ff e3     ................
    3ddd:	00 ff ff e3 ff ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    3dfd:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    3e0d:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    3e1d:	00 ff ff e3 00 ff ff e3 00 00 ff ff ff ff e3 00     ................
	...
    3e3d:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    3e4d:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff e3 00     ................
    3e5d:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
	...
    3e7d:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    3e8d:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    3e9d:	00 ff ff e3 ff ff e3 00 00 00 ff ff e3 ff ff e3     ................
	...
    3ebd:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    3ecd:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff e3 00     ................
    3edd:	00 ff ff e3 ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
	...
    3efd:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 00 00 00     ................
    3f0d:	00 00 ff ff ff ff e3 00 00 00 00 00 00 ff ff e3     ................
    3f1d:	00 00 00 00 00 ff ff e3 00 00 ff ff ff ff e3 00     ................
	...
    3f3d:	00 ff ff ff ff ff ff e3 00 00 00 ff ff e3 00 00     ................
    3f4d:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
    3f5d:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
	...
    3f7d:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    3f8d:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    3f9d:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff ff e3     ................
	...
    3fbd:	00 ff ff 00 00 ff ff e3 00 ff ff 00 00 ff ff e3     ................
    3fcd:	00 ff ff 00 00 ff ff e3 00 ff ff 00 00 ff ff e3     ................
    3fdd:	00 00 ff ff ff ff e3 00 00 00 00 ff ff e3 00 00     ................
	...
    3ffd:	ff ff e3 00 00 ff ff e3 ff ff e3 00 00 ff ff e3     ................
    400d:	ff ff e3 ff e3 ff ff e3 ff ff ff ff ff ff ff e3     ................
    401d:	ff ff ff e3 ff ff ff e3 ff ff e3 00 00 ff ff e3     ................
	...
    403d:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    404d:	00 00 ff ff ff ff e3 00 00 00 ff ff ff ff e3 00     ................
    405d:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    407d:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    408d:	00 00 ff ff ff ff e3 00 00 00 00 ff ff e3 00 00     ................
    409d:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
	...
    40bd:	00 ff ff ff ff ff ff e3 00 00 00 00 ff ff e3 00     ................
    40cd:	00 00 00 ff ff e3 00 00 00 00 ff ff e3 00 00 00     ................
    40dd:	00 ff ff e3 00 00 00 00 00 ff ff ff ff ff ff e3     ................
	...

000040f5 <map_level_space>:
    40f5:	20 1a 00 00 00 00 00 00 00 00 00 00 00 00 00 00      ...............
    4105:	00 09 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4115:	00 0a 00 00 00 00 00 00 00 09 00 00 00 00 00 00     ................
	...
    412d:	00 0a 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4145:	00 00 09 00 00 00 00 00 00 00 00 00 00 00 09 00     ................
    4155:	00 00 00 00 00 09 00 00 00 00 00 0a 00 00 00 00     ................
    4165:	00 00 00 00 00 00 00 09 00 00 00 00 00 00 00 00     ................
	...
    4185:	00 00 09 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4195:	0a 00 00 00 00 00 00 00 00 00 00 00 00 09 00 00     ................
	...
    41ad:	00 00 09 00 00 00 00 00 00 00 00 00 00 00 00 09     ................
	...
    41c9:	00 0a 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    41d9:	0a 00 00 00 00 00 00 00 00 00 00 00 00 00 09 00     ................
	...
    41f1:	00 00 00 09 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4201:	00 09 00 00 00 00 00 00 00 00 00 00 00 09 00 00     ................
	...
    4229:	00 09 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4239:	09 00 00 00 09 00 00 00 00 00 00 00 00 0a 00 00     ................
	...
    4261:	00 00 0a 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4271:	00 09 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4281:	00 09 00 00 00 00 09 00 00 00 00 00 00 09 00 00     ................
    4291:	00 00 00 00 00 00 00 0a 00 00 00 00 00 00 00 00     ................
	...
    42a9:	00 00 09 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    42b9:	00 00 09 00 00 00 00 00 00 00 00 0a 00 00 00 00     ................
	...
    42d5:	00 09 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    42e5:	00 00 00 00 00 0a 00 00 00 00 00 09 00 00 00 00     ................
	...
    42fd:	00 00 00 0a 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4315:	09 00 00 00 00 00 00 00 00 00 00 00 00 00 00 09     ................
    4325:	00 00 09 00 00 00 00 00 09 00 00 00 00 00 00 00     ................
    4335:	00 00 00 00 00 00 00 09 00 00 00 00 00 00 00 00     ................
	...
    4351:	00 0a 00 00 00 00 00 00 00 00 00 00 00 00 09 00     ................
	...
    436d:	0a 00 00 00 00 00 00 00 00 00 00 00 0a 00 00 00     ................
    437d:	00 00 00 00 00 00 00 09 00 00 00 00 00 00 00 00     ................
    438d:	00 00 00 09 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    43a9:	09 0a 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    43b9:	00 00 00 09 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    43d5:	00 0a 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    43ed:	09 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    43fd:	00 00 00 0a 00 00 00 00 00 00 00 00 00 00 00 00     ................
    440d:	00 00 00 00 00 00 00 09 00 00 09 00 00 00 00 00     ................
    441d:	00 00 00 00 09 00 00 00 00 00 00 00 00 00 00 00     ................
	...

00004437 <map_font>:
    4437:	25 01 00 1b 1c 1d 1e 1f 20 21 22 23 24 25 26 27     %....... !"#$%&'
    4447:	28 29 2a 2b 2c 2d 2e 2f 30 31 32 33 34 35 36 37     ()*+,-./01234567
    4457:	38 39 3a 3b 3c 3d 3e                                89:;<=>

0000445e <map_atmosphere>:
    445e:	1c 02 15 15 15 15 15 15 15 15 15 15 15 15 15 15     ................
    446e:	15 15 15 15 15 15 15 15 15 15 15 15 15 15 19 19     ................
    447e:	19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19     ................
    448e:	19 19 19 19 19 19 19 19 19 19                       ..........

00004498 <map_star_dark>:
    4498:	01 01 0a                                            ...

0000449b <map_star>:
    449b:	01 01 09                                            ...

0000449e <map_ice_cloud>:
    449e:	01 01 08                                            ...

000044a1 <map_ice_far>:
    44a1:	01 01 07                                            ...

000044a4 <map_ice_sky>:
    44a4:	01 01 06                                            ...

000044a7 <map_ice_horizon>:
    44a7:	01 01 05                                            ...

000044aa <map_ice_bottom>:
    44aa:	01 01 04                                            ...

000044ad <map_ice_right>:
    44ad:	01 01 03                                            ...

000044b0 <map_ice_middle>:
    44b0:	01 01 02                                            ...

000044b3 <map_ice_left>:
    44b3:	01 01 01                                            ...

000044b6 <map_splash>:
    44b6:	0f 05 0b 0b 0b 00 0b 0b 0b 00 0c 0d 0e 09 0b 0b     ................
    44c6:	0b 00 0b 00 00 0b 0a 00 00 0f 10 11 00 0b 00 09     ................
    44d6:	0a 0b 00 09 0b 00 00 00 12 13 14 00 0b 0b 0b 00     ................
    44e6:	0b 00 00 0b 00 09 00 16 17 18 00 00 00 0b 0b 0b     ................
    44f6:	0b 00 0b 00 00 00 1a 00 0a 00 0b 0b 0b              .............

00004503 <map_tile_none>:
    4503:	01 01 00                                            ...

00004506 <__ctors_end>:
    4506:	11 24       	eor	r1, r1
    4508:	1f be       	out	0x3f, r1	; 63
    450a:	cf ef       	ldi	r28, 0xFF	; 255
    450c:	d0 e1       	ldi	r29, 0x10	; 16
    450e:	de bf       	out	0x3e, r29	; 62
    4510:	cd bf       	out	0x3d, r28	; 61

00004512 <__do_copy_data>:
    4512:	15 e0       	ldi	r17, 0x05	; 5
    4514:	a0 e0       	ldi	r26, 0x00	; 0
    4516:	b5 e0       	ldi	r27, 0x05	; 5
    4518:	ee e6       	ldi	r30, 0x6E	; 110
    451a:	fb e9       	ldi	r31, 0x9B	; 155
    451c:	02 c0       	rjmp	.+4      	; 0x4522 <__do_copy_data+0x10>
    451e:	05 90       	lpm	r0, Z+
    4520:	0d 92       	st	X+, r0
    4522:	a2 30       	cpi	r26, 0x02	; 2
    4524:	b1 07       	cpc	r27, r17
    4526:	d9 f7       	brne	.-10     	; 0x451e <__do_copy_data+0xc>

00004528 <__do_clear_bss>:
    4528:	1f e0       	ldi	r17, 0x0F	; 15
    452a:	a2 e0       	ldi	r26, 0x02	; 2
    452c:	b5 e0       	ldi	r27, 0x05	; 5
    452e:	01 c0       	rjmp	.+2      	; 0x4532 <.do_clear_bss_start>

00004530 <.do_clear_bss_loop>:
    4530:	1d 92       	st	X+, r1

00004532 <.do_clear_bss_start>:
    4532:	a4 3f       	cpi	r26, 0xF4	; 244
    4534:	b1 07       	cpc	r27, r17
    4536:	e1 f7       	brne	.-8      	; 0x4530 <.do_clear_bss_loop>

00004538 <wdt_init>:

void wdt_init(void)
{

#if TRUE_RANDOM_GEN == 1	
	wdt_randomize();
    4538:	0e 94 37 28 	call	0x506e	; 0x506e <wdt_randomize>
#endif

    MCUSR = 0;
    453c:	14 be       	out	0x34, r1	; 52
    wdt_disable();
    453e:	88 e1       	ldi	r24, 0x18	; 24
    4540:	0f b6       	in	r0, 0x3f	; 63
    4542:	f8 94       	cli
    4544:	80 93 60 00 	sts	0x0060, r24
    4548:	10 92 60 00 	sts	0x0060, r1
    454c:	0f be       	out	0x3f, r0	; 63

0000454e <Initialize>:


void Initialize(void){
	int i;

	if(!isEepromFormatted()) FormatEeprom();
    454e:	0e 94 f4 28 	call	0x51e8	; 0x51e8 <isEepromFormatted>
    4552:	81 11       	cpse	r24, r1
    4554:	02 c0       	rjmp	.+4      	; 0x455a <Initialize+0xc>
    4556:	0e 94 d2 28 	call	0x51a4	; 0x51a4 <FormatEeprom>

	cli();
    455a:	f8 94       	cli
		mix_bank=0;
	#endif
	
	#if MIXER_CHAN4_TYPE == 0
		//initialize LFSR		
		tr4_barrel_lo=1;
    455c:	81 e0       	ldi	r24, 0x01	; 1
    455e:	80 93 cc 0c 	sts	0x0CCC, r24
		tr4_barrel_hi=1;		
    4562:	80 93 cd 0c 	sts	0x0CCD, r24
		tr4_params=0b00000001; //15 bits no divider (1)
    4566:	80 93 cb 0c 	sts	0x0CCB, r24
		snesMouseEnabled=false;
	#endif

	//silence all sound channels
	for(i=0;i<CHANNELS;i++){
		mixer.channels.all[i].volume=0;
    456a:	10 92 b8 0c 	sts	0x0CB8, r1
    456e:	10 92 be 0c 	sts	0x0CBE, r1
    4572:	10 92 c4 0c 	sts	0x0CC4, r1
    4576:	10 92 ca 0c 	sts	0x0CCA, r1
    457a:	10 92 d0 0c 	sts	0x0CD0, r1
	}
	
	//set sync parameters. starts at odd field, in pre-eq pulses, line 1, vsync flag cleared
	sync_phase=0;
    457e:	10 92 a0 0c 	sts	0x0CA0, r1
	sync_flags=0;
    4582:	10 92 a2 0c 	sts	0x0CA2, r1
	sync_pulse=SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES;
    4586:	92 e1       	ldi	r25, 0x12	; 18
    4588:	90 93 a1 0c 	sts	0x0CA1, r25

	//set rendering parameters
	render_lines_count=FRAME_LINES;
    458c:	90 ee       	ldi	r25, 0xE0	; 224
    458e:	90 93 a8 0c 	sts	0x0CA8, r25
	first_render_line=FIRST_RENDER_LINE;
    4592:	94 e1       	ldi	r25, 0x14	; 20
    4594:	90 93 a7 0c 	sts	0x0CA7, r25

	joypad1_status_hi=0;
    4598:	10 92 ac 0c 	sts	0x0CAC, r1
    459c:	10 92 ab 0c 	sts	0x0CAB, r1
	joypad2_status_hi=0;
    45a0:	10 92 b0 0c 	sts	0x0CB0, r1
    45a4:	10 92 af 0c 	sts	0x0CAF, r1
	sound_enabled=1;
    45a8:	80 93 b7 0c 	sts	0x0CB7, r24

	InitializeVideoMode();
    45ac:	0e 94 cd 35 	call	0x6b9a	; 0x6b9a <InitializeVideoMode>
    45b0:	80 e7       	ldi	r24, 0x70	; 112
    45b2:	90 e0       	ldi	r25, 0x00	; 0
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
		val=pgm_read_word(&io_table[j]);
    45b4:	fc 01       	movw	r30, r24
    45b6:	25 91       	lpm	r18, Z+
    45b8:	34 91       	lpm	r19, Z
		ptr=(u8*)(val&0xff);
    45ba:	f9 01       	movw	r30, r18
    45bc:	ff 27       	eor	r31, r31
		*ptr=val>>8;	
    45be:	30 83       	st	Z, r19
    45c0:	02 96       	adiw	r24, 0x02	; 2
	InitializeVideoMode();
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
    45c2:	20 e0       	ldi	r18, 0x00	; 0
    45c4:	8e 39       	cpi	r24, 0x9E	; 158
    45c6:	92 07       	cpc	r25, r18
    45c8:	a9 f7       	brne	.-22     	; 0x45b4 <Initialize+0x66>
		val=pgm_read_word(&io_table[j]);
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;	
	}

	sei();
    45ca:	78 94       	sei
	
	DisplayLogo();
    45cc:	0e 94 40 36 	call	0x6c80	; 0x6c80 <DisplayLogo>
    45d0:	0e 94 8d 4b 	call	0x971a	; 0x971a <main>
    45d4:	0c 94 b5 4d 	jmp	0x9b6a	; 0x9b6a <_exit>

000045d8 <__bad_interrupt>:
    45d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000045dc <sub_video_mode3>:
	;***************************************************

	sub_video_mode3:
		;de-activate sync timer interrupts
		;we will need to use the I flag to branch in a critical loop
		ldi ZL,(0<<OCIE1A)
    45dc:	e0 e0       	ldi	r30, 0x00	; 0
		sts _SFR_MEM_ADDR(TIMSK1),ZL
    45de:	e0 93 6f 00 	sts	0x006F, r30

		;wait cycles to align with next hsync
		WAIT r26,183+241
    45e2:	ad e8       	ldi	r26, 0x8D	; 141
    45e4:	aa 95       	dec	r26
    45e6:	f1 f7       	brne	.-4      	; 0x45e4 <sub_video_mode3+0x8>
    45e8:	00 00       	nop

		;Refresh ramtiles indexes in VRAM
		;This has to be done because the main
		;program may have altered the VRAM
		;after vsync and the rendering interrupt.
		lds r16,userRamTilesCount
    45ea:	00 91 db 0c 	lds	r16, 0x0CDB

		ldi ZL,lo8(ram_tiles_restore);
    45ee:	ea e3       	ldi	r30, 0x3A	; 58
		ldi ZH,hi8(ram_tiles_restore);
    45f0:	fc e0       	ldi	r31, 0x0C	; 12
		ldi r18,3
    45f2:	23 e0       	ldi	r18, 0x03	; 3
		mul r16,r18
    45f4:	02 9f       	mul	r16, r18
		add ZL,r0
    45f6:	e0 0d       	add	r30, r0
		adc ZH,r1
    45f8:	f1 1d       	adc	r31, r1

		ldi YL,lo8(vram)
    45fa:	c0 e0       	ldi	r28, 0x00	; 0
		ldi YH,hi8(vram)
    45fc:	d1 e0       	ldi	r29, 0x01	; 1

		lds r18,free_tile_index
    45fe:	20 91 69 0d 	lds	r18, 0x0D69
		ldi r19,MAX_RAMTILES		;maximum possible ramtiles
    4602:	3c e3       	ldi	r19, 0x3C	; 60
		sub r19,r18					;sub free tile
    4604:	32 1b       	sub	r19, r18
		add r19,r16					;add user tiles
    4606:	30 0f       	add	r19, r16

		cp r18,r16
    4608:	20 17       	cp	r18, r16
		breq no_ramtiles
    460a:	51 f0       	breq	.+20     	; 0x4620 <no_ramtiles>
		nop
    460c:	00 00       	nop
	...

00004610 <upd_loop>:
		nop
upd_loop:
		ld XL,Z+	;load vram offset of ramtile
    4610:	a1 91       	ld	r26, Z+
		ld XH,Z+
    4612:	b1 91       	ld	r27, Z+

		ld r17,X	;get latest VRAM tile that may have been modified my
    4614:	1c 91       	ld	r17, X
		st Z+,r17	;the main program and store it in the restore buffer
    4616:	11 93       	st	Z+, r17
		st X,r16	;write the ramtile index back to vram
    4618:	0c 93       	st	X, r16

		inc r16
    461a:	03 95       	inc	r16
		cp r16,r18
    461c:	02 17       	cp	r16, r18
		brlo upd_loop ;loop is 14 cycles
    461e:	c0 f3       	brcs	.-16     	; 0x4610 <upd_loop>

00004620 <no_ramtiles>:

no_ramtiles:
		;wait for remaining maximum possible ramtiles
1:
		ldi r17,3
    4620:	13 e0       	ldi	r17, 0x03	; 3
		dec r17
    4622:	1a 95       	dec	r17
		brne .-4
    4624:	f1 f7       	brne	.-4      	; 0x4622 <no_ramtiles+0x2>
		rjmp .
    4626:	00 c0       	rjmp	.+0      	; 0x4628 <no_ramtiles+0x8>
		dec r19
    4628:	3a 95       	dec	r19
		brne 1b
    462a:	d1 f7       	brne	.-12     	; 0x4620 <no_ramtiles>

		;**********************
		; setup scroll stuff
		;**********************
	
		ldi YL,lo8(vram)
    462c:	c0 e0       	ldi	r28, 0x00	; 0
		ldi YH,hi8(vram)
    462e:	d1 e0       	ldi	r29, 0x01	; 1

		//add X scroll (coarse)
		lds r18,screen_scrollX ;ScreenScrollX
    4630:	20 91 9c 0c 	lds	r18, 0x0C9C
		mov r25,r18
    4634:	92 2f       	mov	r25, r18
		andi r18,0xf8	;(x>>3) * 8 interleave
    4636:	28 7f       	andi	r18, 0xF8	; 248
		add YL,r18
    4638:	c2 0f       	add	r28, r18

		;save Y wrap adress 
		movw r12,YL
    463a:	6e 01       	movw	r12, r28
	

		//add Y scroll (coarse)
		lds r16,screen_scrollY ;ScreenScrollY
    463c:	00 91 9d 0c 	lds	r16, 0x0C9D
		mov r22,r16
    4640:	60 2f       	mov	r22, r16
		lsr r16
    4642:	06 95       	lsr	r16
		lsr r16
    4644:	06 95       	lsr	r16
		lsr r16 ;/8
    4646:	06 95       	lsr	r16

        lds r17,screen_scrollHeight
    4648:	10 91 9e 0c 	lds	r17, 0x0C9E
        sub r17,r16
    464c:	10 1b       	sub	r17, r16
        mov r15,r17 ;Y tiles to draw before wrapping
    464e:	f1 2e       	mov	r15, r17

        mov r17,r16
    4650:	10 2f       	mov	r17, r16
        lsr r16
    4652:	06 95       	lsr	r16
        lsr r16
    4654:	06 95       	lsr	r16
        lsr r16 ;/8
    4656:	06 95       	lsr	r16
		add YH,r16      ; (bits 6-7)
    4658:	d0 0f       	add	r29, r16
		andi r17,0x7
    465a:	17 70       	andi	r17, 0x07	; 7
        add YL,r17      ;interleave (bits 3-5)
    465c:	c1 0f       	add	r28, r17
        andi r22,0x7    ;fine Y scrolling (bits 0-2)
    465e:	67 70       	andi	r22, 0x07	; 7
		;lds r20,tile_table_lo
		;lds r21,tile_table_hi
		;out _SFR_IO_ADDR(GPIOR1),r20 ;store for later
		;out _SFR_IO_ADDR(GPIOR2),r21

		lds r20,overlay_tile_table
    4660:	40 91 9a 0c 	lds	r20, 0x0C9A
		lds r21,overlay_tile_table+1
    4664:	50 91 9b 0c 	lds	r21, 0x0C9B
		lds r6,tile_table_lo
    4668:	60 90 96 0c 	lds	r6, 0x0C96
		lds r7,tile_table_hi
    466c:	70 90 97 0c 	lds	r7, 0x0C97
		out _SFR_IO_ADDR(GPIOR1),r6 ;store for later
    4670:	6a bc       	out	0x2a, r6	; 42
		out _SFR_IO_ADDR(GPIOR2),r7
    4672:	7b bc       	out	0x2b, r7	; 43


		;save main section value	
		movw r10,YL
    4674:	5e 01       	movw	r10, r28
		mov r23,r22
    4676:	76 2f       	mov	r23, r22
		mov r24,r15
    4678:	8f 2d       	mov	r24, r15
		mov r9,r25
    467a:	99 2e       	mov	r9, r25

		;load values for overlay if it's activated (overlay_height>0)
		
		;compute beginning of overlay in vram 
		lds r16,screen_scrollHeight
    467c:	00 91 9e 0c 	lds	r16, 0x0C9E
		mov r18,r16
    4680:	20 2f       	mov	r18, r16
		lsr r16
    4682:	06 95       	lsr	r16
		lsr r16
    4684:	06 95       	lsr	r16
		lsr r16			;hi8
    4686:	06 95       	lsr	r16
		inc r16			;add 0x100 ram offset
    4688:	03 95       	inc	r16
		andi r18,7		;lo8
    468a:	27 70       	andi	r18, 0x07	; 7
		
		lds r19,overlay_height	
    468c:	30 91 99 0c 	lds	r19, 0x0C99
		cpi r19,0
    4690:	30 30       	cpi	r19, 0x00	; 0
		in r0, _SFR_IO_ADDR(SREG)
    4692:	0f b6       	in	r0, 0x3f	; 63

		sbrs r0,SREG_Z
    4694:	01 fe       	sbrs	r0, 1
		clr r22
    4696:	66 27       	eor	r22, r22
		sbrs r0,SREG_Z
    4698:	01 fe       	sbrs	r0, 1
		mov YL,r18		;lo8(overlay_vram)
    469a:	c2 2f       	mov	r28, r18
		sbrs r0,SREG_Z
    469c:	01 fe       	sbrs	r0, 1
		mov YH,r16		;hi8(overlay_vram)
    469e:	d0 2f       	mov	r29, r16
		sbrs r0,SREG_Z
    46a0:	01 fe       	sbrs	r0, 1
		ser r24
    46a2:	8f ef       	ldi	r24, 0xFF	; 255
		sbrs r0,SREG_Z
    46a4:	01 fe       	sbrs	r0, 1
		clr r9
    46a6:	99 24       	eor	r9, r9

		sbrs r0,SREG_Z
    46a8:	01 fe       	sbrs	r0, 1
		out _SFR_IO_ADDR(GPIOR1),r20
    46aa:	4a bd       	out	0x2a, r20	; 42
		sbrs r0,SREG_Z
    46ac:	01 fe       	sbrs	r0, 1
		out _SFR_IO_ADDR(GPIOR2),r21
    46ae:	5b bd       	out	0x2b, r21	; 43


		//ldi r16,SCREEN_TILES_V*TILE_HEIGHT; total scanlines to draw
		//mov r8,r16
		lds r8,render_lines_count ;total scanlines to draw
    46b0:	80 90 a8 0c 	lds	r8, 0x0CA8

000046b4 <next_tile_line>:
	;r23 = Main section tile row
	;r24 = Current Y tiles to draw before wrapping
	;r25 = Main section scrollX

	next_tile_line:
		rcall hsync_pulse
    46b4:	bc d3       	rcall	.+1912   	; 0x4e2e <hsync_pulse>

		WAIT r18,HSYNC_USABLE_CYCLES - AUDIO_OUT_HSYNC_CYCLES
    46b6:	24 e0       	ldi	r18, 0x04	; 4
    46b8:	2a 95       	dec	r18
    46ba:	f1 f7       	brne	.-4      	; 0x46b8 <next_tile_line+0x4>
    46bc:	00 00       	nop
				
		call render_tile_line
    46be:	0e 94 a0 23 	call	0x4740	; 0x4740 <render_tile_line>

		WAIT r18,58
    46c2:	23 e1       	ldi	r18, 0x13	; 19
    46c4:	2a 95       	dec	r18
    46c6:	f1 f7       	brne	.-4      	; 0x46c4 <next_tile_line+0x10>
    46c8:	00 00       	nop

		inc r22
    46ca:	63 95       	inc	r22
		dec r8
    46cc:	8a 94       	dec	r8
		breq text_frame_end
    46ce:	09 f1       	breq	.+66     	; 0x4712 <text_frame_end>

		cpi r22,TILE_HEIGHT ;last char line? 1
    46d0:	68 30       	cpi	r22, 0x08	; 8
		breq next_tile_row
    46d2:	29 f0       	breq	.+10     	; 0x46de <next_tile_row>

		;wait to align with next_tile_row instructions (+1 cycle for the breq)
		WAIT r16,25
    46d4:	08 e0       	ldi	r16, 0x08	; 8
    46d6:	0a 95       	dec	r16
    46d8:	f1 f7       	brne	.-4      	; 0x46d6 <next_tile_line+0x22>
    46da:	00 00       	nop
		rjmp next_tile_line
    46dc:	eb cf       	rjmp	.-42     	; 0x46b4 <next_tile_line>

000046de <next_tile_row>:

	next_tile_row:

		clr r22		;clear current char line
    46de:	66 27       	eor	r22, r22

		;increment vram pointer next row
		mov r16,YL
    46e0:	0c 2f       	mov	r16, r28
		andi r16,0x7
    46e2:	07 70       	andi	r16, 0x07	; 7
		cpi r16,7
    46e4:	07 30       	cpi	r16, 0x07	; 7
		breq 1f
    46e6:	11 f0       	breq	.+4      	; 0x46ec <next_tile_row+0xe>
		inc YL
    46e8:	c3 95       	inc	r28
		rjmp 2f
    46ea:	02 c0       	rjmp	.+4      	; 0x46f0 <next_tile_row+0x12>
	1:
		andi YL,0xf8
    46ec:	c8 7f       	andi	r28, 0xF8	; 248
		inc YH
    46ee:	d3 95       	inc	r29
	2:

		dec r24		;wrap section?
    46f0:	8a 95       	dec	r24
		brne .+2
    46f2:	09 f4       	brne	.+2      	; 0x46f6 <next_tile_row+0x18>
		movw YL,r12
    46f4:	e6 01       	movw	r28, r12

		dec r19
    46f6:	3a 95       	dec	r19
		brne .+2
    46f8:	09 f4       	brne	.+2      	; 0x46fc <next_tile_row+0x1e>
		mov r22,r23	;section tile row
    46fa:	67 2f       	mov	r22, r23
		brne .+2
    46fc:	09 f4       	brne	.+2      	; 0x4700 <next_tile_row+0x22>
		movw YL,r10 ;vram adress
    46fe:	e5 01       	movw	r28, r10
		brne .+2
    4700:	09 f4       	brne	.+2      	; 0x4704 <next_tile_row+0x26>
		mov r24,r15 ;Y wrapping
    4702:	8f 2d       	mov	r24, r15
		brne .+2
    4704:	09 f4       	brne	.+2      	; 0x4708 <next_tile_row+0x2a>
		mov r9,r25  ;scrollX
    4706:	99 2e       	mov	r9, r25

		brne .+2
    4708:	09 f4       	brne	.+2      	; 0x470c <next_tile_row+0x2e>
		out _SFR_IO_ADDR(GPIOR1),r6  ;tileset
    470a:	6a bc       	out	0x2a, r6	; 42
		brne .+2
    470c:	09 f4       	brne	.+2      	; 0x4710 <next_tile_row+0x32>
		out _SFR_IO_ADDR(GPIOR2),r7  ;tilset
    470e:	7b bc       	out	0x2b, r7	; 43

		rjmp next_tile_line
    4710:	d1 cf       	rjmp	.-94     	; 0x46b4 <next_tile_line>

00004712 <text_frame_end>:

	text_frame_end:

		WAIT r18,28
    4712:	29 e0       	ldi	r18, 0x09	; 9
    4714:	2a 95       	dec	r18
    4716:	f1 f7       	brne	.-4      	; 0x4714 <text_frame_end+0x2>
    4718:	00 00       	nop

		rcall hsync_pulse ;145
    471a:	89 d3       	rcall	.+1810   	; 0x4e2e <hsync_pulse>
	
		clr r1
    471c:	11 24       	eor	r1, r1
		call RestoreBackground
    471e:	0e 94 80 34 	call	0x6900	; 0x6900 <RestoreBackground>

		;set vsync flag & flip field
		lds ZL,sync_flags
    4722:	e0 91 a2 0c 	lds	r30, 0x0CA2
		ldi r20,SYNC_FLAG_FIELD
    4726:	42 e0       	ldi	r20, 0x02	; 2
		ori ZL,SYNC_FLAG_VSYNC
    4728:	e1 60       	ori	r30, 0x01	; 1
		eor ZL,r20
    472a:	e4 27       	eor	r30, r20
		sts sync_flags,ZL
    472c:	e0 93 a2 0c 	sts	0x0CA2, r30
	
		cli 
    4730:	f8 94       	cli

		;re-activate sync timer interrupts
		ldi ZL,(1<<OCIE1A)
    4732:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIMSK1),ZL
    4734:	e0 93 6f 00 	sts	0x006F, r30
			
		;clear any pending timer int
		ldi ZL,(1<<OCF1A)
    4738:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIFR1),ZL
    473a:	e0 93 36 00 	sts	0x0036, r30

		ret
    473e:	08 95       	ret

00004740 <render_tile_line>:
	; Can destroy: r0,r1,r2,r3,r4,r5,r6,r7,r13,r16,r17,r18,r19,r20,r21,Z
	; 
	; cycles  = 1495
	;*************************************************
	render_tile_line:
		push YL
    4740:	cf 93       	push	r28
		push YH
    4742:	df 93       	push	r29
		push r23
    4744:	7f 93       	push	r23
		push r22
    4746:	6f 93       	push	r22
		push r19
    4748:	3f 93       	push	r19
		push r13
    474a:	df 92       	push	r13
		push r12
    474c:	cf 92       	push	r12
		push r9
    474e:	9f 92       	push	r9
		push r7
    4750:	7f 92       	push	r7
		push r6
    4752:	6f 92       	push	r6
		;--------------------------
		; Rendering 
		;---------------------------

		;get tile row offset
		ldi r23,TILE_WIDTH ;tile width in pixels
    4754:	78 e0       	ldi	r23, 0x08	; 8
		mul r22,r23
    4756:	67 9f       	mul	r22, r23

		;compute base adresses for ROM and RAM tiles
		in r16,_SFR_IO_ADDR(GPIOR1) ;tile_table_lo
    4758:	0a b5       	in	r16, 0x2a	; 42
		in r17,_SFR_IO_ADDR(GPIOR2) ;tile_table_hi
    475a:	1b b5       	in	r17, 0x2b	; 43
		subi r16,lo8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    475c:	00 50       	subi	r16, 0x00	; 0
		sbci r17,hi8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    475e:	17 40       	sbci	r17, 0x07	; 7

		add r16,r0
    4760:	00 0d       	add	r16, r0
		adc r17,r1
    4762:	11 1d       	adc	r17, r1
		movw r2,r16			;rom tiles adress
    4764:	18 01       	movw	r2, r16

		ldi r16,lo8(ram_tiles)
    4766:	0a e3       	ldi	r16, 0x3A	; 58
		ldi r17,hi8(ram_tiles)
    4768:	15 e0       	ldi	r17, 0x05	; 5
		add r16,r0
    476a:	00 0d       	add	r16, r0
		adc r17,r1
    476c:	11 1d       	adc	r17, r1
		movw r4,r16			;ram tiles adress
    476e:	28 01       	movw	r4, r16

		ldi r19,TILE_HEIGHT*TILE_WIDTH
    4770:	30 e4       	ldi	r19, 0x40	; 64
		ldi r17,SCREEN_TILES_H-1	;main loop counter
    4772:	1b e1       	ldi	r17, 0x1B	; 27


		;handle fine scroll offset
		;lds r22,screenSections+scrollX
		mov r22,r9
    4774:	69 2d       	mov	r22, r9
		andi r22,0x7		
    4776:	67 70       	andi	r22, 0x07	; 7
		mov r14,r22	;pixels to draw on last tile	
    4778:	e6 2e       	mov	r14, r22
		cli			;no trailing pixel to draw (hack, see end: )
    477a:	f8 94       	cli
		breq .+2
    477c:	09 f0       	breq	.+2      	; 0x4780 <render_tile_line+0x40>
		sei			;some trailing pixel to draw (hack, see end: )
    477e:	78 94       	sei

		;get first pixel of last tile in ROM (for ROM tiles fine scroll)
		;and adress of next pixel
		movw ZL,YL
    4780:	fe 01       	movw	r30, r28
		subi ZL,-(SCREEN_TILES_H*8)
    4782:	e0 52       	subi	r30, 0x20	; 32
		ld r18,Z
    4784:	20 81       	ld	r18, Z
		mul r18,r19 	;tile*width*height
    4786:	23 9f       	mul	r18, r19
	    add r0,r2    ;add ROM title table address +row offset
    4788:	02 0c       	add	r0, r2
	    adc r1,r3
    478a:	13 1c       	adc	r1, r3
		movw ZL,r0
    478c:	f0 01       	movw	r30, r0
		lpm r9,Z+	;hold first pixel until end 
    478e:	95 90       	lpm	r9, Z+
		movw r12,ZL ;hold second pixel adress until end
    4790:	6f 01       	movw	r12, r30


		;compute first tile adress
	    ld r18,Y     	;load next tile # from VRAM
    4792:	28 81       	ld	r18, Y
		subi YL,-8
    4794:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT
    4796:	2c 31       	cpi	r18, 0x1C	; 28
		in r16,_SFR_IO_ADDR(SREG)	;save the carry flag for later	
    4798:	0f b7       	in	r16, 0x3f	; 63
		mul r18,r19 	;tile*width*height
    479a:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles	
    479c:	a1 01       	movw	r20, r2
		sbrc r16,SREG_C
    479e:	00 fd       	sbrc	r16, 0
		movw r20,r4		;ram tiles
    47a0:	a2 01       	movw	r20, r4
	    add r0,r20    ;add title table address +row offset
    47a2:	04 0e       	add	r0, r20
	    adc r1,r21
    47a4:	15 1e       	adc	r1, r21
		movw XL,r0
    47a6:	d0 01       	movw	r26, r0


		;compute second tile adress
	    ld r18,Y     	;load next tile # from VRAM
    47a8:	28 81       	ld	r18, Y
		subi YL,-8
    47aa:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT
    47ac:	2c 31       	cpi	r18, 0x1C	; 28
		in r7,_SFR_IO_ADDR(SREG)	;save the carry flag for later
    47ae:	7f b6       	in	r7, 0x3f	; 63
		bst r7,SREG_C
    47b0:	70 fa       	bst	r7, 0
		mul r18,r19 	;tile*width*height
    47b2:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles
    47b4:	a1 01       	movw	r20, r2
		brtc .+2
    47b6:	0e f4       	brtc	.+2      	; 0x47ba <render_tile_line+0x7a>
		movw r20,r4		;ram tiles
    47b8:	a2 01       	movw	r20, r4
	    add r0,r20      ;add title table address +row offset
    47ba:	04 0e       	add	r0, r20
	    adc r1,r21
    47bc:	15 1e       	adc	r1, r21
		movw ZL,r0
    47be:	f0 01       	movw	r30, r0
		movw r6,ZL		;push Z
    47c0:	3f 01       	movw	r6, r30

000047c2 <do_fine_scroll>:


	do_fine_scroll:
		;output 1st tile with fine scroll offset 
		clr r0
    47c2:	00 24       	eor	r0, r0
		add XL,r22	;add fine offset
    47c4:	a6 0f       	add	r26, r22
		adc XH,r0
    47c6:	b0 1d       	adc	r27, r0

		;compute jump offset
		ldi r23,3
    47c8:	73 e0       	ldi	r23, 0x03	; 3
		mul r22,r23 ;3 instructions
    47ca:	67 9f       	mul	r22, r23
	
		sbrs r16,SREG_C
    47cc:	00 ff       	sbrs	r16, 0
		rjmp rom_fine_scroll
    47ce:	22 c0       	rjmp	.+68     	; 0x4814 <rom_fine_scroll>

000047d0 <ram_fine_scroll>:

	/***FINE SCROLL RAM LOOP***/
	ram_fine_scroll:
		rjmp .
    47d0:	00 c0       	rjmp	.+0      	; 0x47d2 <ram_fine_scroll+0x2>
		ldi r22,lo8(pm(ram_fine_scroll_loop))
    47d2:	60 ef       	ldi	r22, 0xF0	; 240
		ldi r23,hi8(pm(ram_fine_scroll_loop))
    47d4:	73 e2       	ldi	r23, 0x23	; 35
		add r22,r0
    47d6:	60 0d       	add	r22, r0
		adc r23,r1
    47d8:	71 1d       	adc	r23, r1
		push r22
    47da:	6f 93       	push	r22
		push r23	
    47dc:	7f 93       	push	r23
		ret ;jump into ram_fine_scroll_loop
    47de:	08 95       	ret

000047e0 <ram_fine_scroll_loop>:
	ram_fine_scroll_loop:
		.rept 8
			ld r16,X+
			lpm
			out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		.endr
    47e0:	0d 91       	ld	r16, X+
    47e2:	c8 95       	lpm
    47e4:	08 b9       	out	0x08, r16	; 8
    47e6:	0d 91       	ld	r16, X+
    47e8:	c8 95       	lpm
    47ea:	08 b9       	out	0x08, r16	; 8
    47ec:	0d 91       	ld	r16, X+
    47ee:	c8 95       	lpm
    47f0:	08 b9       	out	0x08, r16	; 8
    47f2:	0d 91       	ld	r16, X+
    47f4:	c8 95       	lpm
    47f6:	08 b9       	out	0x08, r16	; 8
    47f8:	0d 91       	ld	r16, X+
    47fa:	c8 95       	lpm
    47fc:	08 b9       	out	0x08, r16	; 8
    47fe:	0d 91       	ld	r16, X+
    4800:	c8 95       	lpm
    4802:	08 b9       	out	0x08, r16	; 8
    4804:	0d 91       	ld	r16, X+
    4806:	c8 95       	lpm
    4808:	08 b9       	out	0x08, r16	; 8
    480a:	0d 91       	ld	r16, X+
    480c:	c8 95       	lpm
    480e:	08 b9       	out	0x08, r16	; 8

		;branch to tile #2
		brtc romloop
    4810:	1e f5       	brtc	.+70     	; 0x4858 <romloop>
		rjmp ramloop
    4812:	40 c0       	rjmp	.+128    	; 0x4894 <ramloop>

00004814 <rom_fine_scroll>:

	/***FINE SCROLL ROM LOOP***/
	rom_fine_scroll:
		movw ZL,XL
    4814:	fd 01       	movw	r30, r26
		ldi r22,lo8(pm(rom_fine_scroll_loop))	
    4816:	62 e1       	ldi	r22, 0x12	; 18
		ldi r23,hi8(pm(rom_fine_scroll_loop))
    4818:	74 e2       	ldi	r23, 0x24	; 36
		add r22,r0
    481a:	60 0d       	add	r22, r0
		adc r23,r1
    481c:	71 1d       	adc	r23, r1
		push r22
    481e:	6f 93       	push	r22
		push r23	
    4820:	7f 93       	push	r23
		ret
    4822:	08 95       	ret

00004824 <rom_fine_scroll_loop>:
	rom_fine_scroll_loop:
		.rept 8
			lpm r16,Z+
			rjmp .
			out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		.endr 
    4824:	05 91       	lpm	r16, Z+
    4826:	00 c0       	rjmp	.+0      	; 0x4828 <rom_fine_scroll_loop+0x4>
    4828:	08 b9       	out	0x08, r16	; 8
    482a:	05 91       	lpm	r16, Z+
    482c:	00 c0       	rjmp	.+0      	; 0x482e <rom_fine_scroll_loop+0xa>
    482e:	08 b9       	out	0x08, r16	; 8
    4830:	05 91       	lpm	r16, Z+
    4832:	00 c0       	rjmp	.+0      	; 0x4834 <rom_fine_scroll_loop+0x10>
    4834:	08 b9       	out	0x08, r16	; 8
    4836:	05 91       	lpm	r16, Z+
    4838:	00 c0       	rjmp	.+0      	; 0x483a <rom_fine_scroll_loop+0x16>
    483a:	08 b9       	out	0x08, r16	; 8
    483c:	05 91       	lpm	r16, Z+
    483e:	00 c0       	rjmp	.+0      	; 0x4840 <rom_fine_scroll_loop+0x1c>
    4840:	08 b9       	out	0x08, r16	; 8
    4842:	05 91       	lpm	r16, Z+
    4844:	00 c0       	rjmp	.+0      	; 0x4846 <rom_fine_scroll_loop+0x22>
    4846:	08 b9       	out	0x08, r16	; 8
    4848:	05 91       	lpm	r16, Z+
    484a:	00 c0       	rjmp	.+0      	; 0x484c <rom_fine_scroll_loop+0x28>
    484c:	08 b9       	out	0x08, r16	; 8
    484e:	05 91       	lpm	r16, Z+
    4850:	00 c0       	rjmp	.+0      	; 0x4852 <rom_fine_scroll_loop+0x2e>
    4852:	08 b9       	out	0x08, r16	; 8
	
		movw ZL,r6		;restore Z for tile #2
    4854:	f3 01       	movw	r30, r6

		;branch to tile #2
		brts ramloop
    4856:	f6 f0       	brts	.+60     	; 0x4894 <ramloop>

00004858 <romloop>:

	
	romloop:
	    lpm r16,Z+
    4858:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    485a:	08 b9       	out	0x08, r16	; 8
	    ld r18,Y     ;load next tile # from VRAM
    485c:	28 81       	ld	r18, Y

	    lpm r16,Z+
    485e:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 2
    4860:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    4862:	23 9f       	mul	r18, r19

	    lpm r16,Z+
    4864:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 3
    4866:	08 b9       	out	0x08, r16	; 8
		subi YL,-8
    4868:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT		;is tile in RAM or ROM? (RAM tiles have indexes<RAM_TILES_COUNT)
    486a:	2c 31       	cpi	r18, 0x1C	; 28
		
	    lpm r16,Z+
    486c:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    486e:	08 b9       	out	0x08, r16	; 8
		brsh .+2		;skip if next tile is in ROM	
    4870:	08 f4       	brcc	.+2      	; 0x4874 <romloop+0x1c>
		movw r20,r4 	;load RAM title table address +row offset	
    4872:	a2 01       	movw	r20, r4
   
	    lpm r16,Z+
    4874:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 5
    4876:	08 b9       	out	0x08, r16	; 8
		add r0,r20		;add tile table address +row offset lsb
    4878:	04 0e       	add	r0, r20
	    adc r1,r21		;add title table address +row offset msb
    487a:	15 1e       	adc	r1, r21

	    lpm r16,Z+
    487c:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 6
    487e:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT	
    4880:	2c 31       	cpi	r18, 0x1C	; 28
		dec r17			;decrement tiles to draw on line (does not affect carry)
    4882:	1a 95       	dec	r17
   
	    lpm r16,Z+
    4884:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 7   
    4886:	08 b9       	out	0x08, r16	; 8
	    lpm r16,Z+
    4888:	05 91       	lpm	r16, Z+

		breq end	
    488a:	39 f1       	breq	.+78     	; 0x48da <end>
	    movw ZL,r0   	;copy next tile adress
    488c:	f0 01       	movw	r30, r0

	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    488e:	08 b9       	out	0x08, r16	; 8
	    brcc romloop
    4890:	18 f7       	brcc	.-58     	; 0x4858 <romloop>
	
		rjmp .
    4892:	00 c0       	rjmp	.+0      	; 0x4894 <ramloop>

00004894 <ramloop>:

	ramloop:

	    ld r16,Z+
    4894:	01 91       	ld	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    4896:	08 b9       	out	0x08, r16	; 8
	    ld r18,Y     ;load next tile # from VRAM
    4898:	28 81       	ld	r18, Y

	    ld r16,Z+ 
    489a:	01 91       	ld	r16, Z+
		subi YL,-8   		
    489c:	c8 5f       	subi	r28, 0xF8	; 248
		out _SFR_IO_ADDR(DATA_PORT),r16 		;pixel 2
    489e:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    48a0:	23 9f       	mul	r18, r19

	    ld r16,Z+
    48a2:	01 91       	ld	r16, Z+
		nop
    48a4:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16         ;pixel 3
    48a6:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    48a8:	2c 31       	cpi	r18, 0x1C	; 28
		rjmp .
    48aa:	00 c0       	rjmp	.+0      	; 0x48ac <ramloop+0x18>
   
	    ld r16,Z+
    48ac:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    48ae:	08 b9       	out	0x08, r16	; 8
		brcs .+2 
    48b0:	08 f0       	brcs	.+2      	; 0x48b4 <ramloop+0x20>
		movw r20,r2 	;ROM title table address +row offset	
    48b2:	a1 01       	movw	r20, r2
   
   
	    ld r16,Z+
    48b4:	01 91       	ld	r16, Z+
	    add r0,r20    ;add title table address +row offset
    48b6:	04 0e       	add	r0, r20
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 5
    48b8:	08 b9       	out	0x08, r16	; 8
	    adc r1,r21
    48ba:	15 1e       	adc	r1, r21
		rjmp .
    48bc:	00 c0       	rjmp	.+0      	; 0x48be <ramloop+0x2a>
    
		ld r16,Z+		
    48be:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 6
    48c0:	08 b9       	out	0x08, r16	; 8
		ld r7,Z+
    48c2:	71 90       	ld	r7, Z+
	    ld r16,Z+	
    48c4:	01 91       	ld	r16, Z+
	
		movw ZL,r0
    48c6:	f0 01       	movw	r30, r0
		out _SFR_IO_ADDR(DATA_PORT),r7      ;pixel 7   
    48c8:	78 b8       	out	0x08, r7	; 8
		nop
    48ca:	00 00       	nop
		cpi r18,RAM_TILES_COUNT	
    48cc:	2c 31       	cpi	r18, 0x1C	; 28
	    dec r17
    48ce:	1a 95       	dec	r17
	    breq end
    48d0:	21 f0       	breq	.+8      	; 0x48da <end>
	
		nop
    48d2:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    48d4:	08 b9       	out	0x08, r16	; 8
	
	    brcc romloop
    48d6:	00 f6       	brcc	.-128    	; 0x4858 <romloop>
		rjmp ramloop
    48d8:	dd cf       	rjmp	.-70     	; 0x4894 <ramloop>

000048da <end>:
	
	end:
		out _SFR_IO_ADDR(DATA_PORT),r16  	;pixel 8
    48da:	08 b9       	out	0x08, r16	; 8
		brid end_fine_scroll				;hack: interrupt flag=0 => no fine offset pixel to draw
    48dc:	27 f5       	brid	.+72     	; 0x4926 <end_fine_scroll>
		brcc end_rom_fine_scroll_loop
    48de:	30 f4       	brcc	.+12     	; 0x48ec <end_rom_fine_scroll_loop>

	/***END RAM LOOP***/
		movw ZL,r0
    48e0:	f0 01       	movw	r30, r0

000048e2 <end_ram_fine_scroll_loop>:
	end_ram_fine_scroll_loop:
		ld r16,Z+
    48e2:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
    48e4:	08 b9       	out	0x08, r16	; 8
		dec r14
    48e6:	ea 94       	dec	r14
		brne end_ram_fine_scroll_loop
    48e8:	e1 f7       	brne	.-8      	; 0x48e2 <end_ram_fine_scroll_loop>
		rjmp end_fine_scroll_ram
    48ea:	1f c0       	rjmp	.+62     	; 0x492a <end_fine_scroll_ram>

000048ec <end_rom_fine_scroll_loop>:

	/***END ROM LOOP***/
	end_rom_fine_scroll_loop:
		movw ZL,r12
    48ec:	f6 01       	movw	r30, r12
		nop
    48ee:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r9        ;output saved 1st pixel
    48f0:	98 b8       	out	0x08, r9	; 8
		dec r14
    48f2:	ea 94       	dec	r14
		breq end_fine_scroll_rom
    48f4:	c9 f0       	breq	.+50     	; 0x4928 <end_fine_scroll_rom>
	.rept 6
		lpm r16,Z+		
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		dec r14
		breq end_fine_scroll_rom
	.endr
    48f6:	05 91       	lpm	r16, Z+
    48f8:	08 b9       	out	0x08, r16	; 8
    48fa:	ea 94       	dec	r14
    48fc:	a9 f0       	breq	.+42     	; 0x4928 <end_fine_scroll_rom>
    48fe:	05 91       	lpm	r16, Z+
    4900:	08 b9       	out	0x08, r16	; 8
    4902:	ea 94       	dec	r14
    4904:	89 f0       	breq	.+34     	; 0x4928 <end_fine_scroll_rom>
    4906:	05 91       	lpm	r16, Z+
    4908:	08 b9       	out	0x08, r16	; 8
    490a:	ea 94       	dec	r14
    490c:	69 f0       	breq	.+26     	; 0x4928 <end_fine_scroll_rom>
    490e:	05 91       	lpm	r16, Z+
    4910:	08 b9       	out	0x08, r16	; 8
    4912:	ea 94       	dec	r14
    4914:	49 f0       	breq	.+18     	; 0x4928 <end_fine_scroll_rom>
    4916:	05 91       	lpm	r16, Z+
    4918:	08 b9       	out	0x08, r16	; 8
    491a:	ea 94       	dec	r14
    491c:	29 f0       	breq	.+10     	; 0x4928 <end_fine_scroll_rom>
    491e:	05 91       	lpm	r16, Z+
    4920:	08 b9       	out	0x08, r16	; 8
    4922:	ea 94       	dec	r14
    4924:	09 f0       	breq	.+2      	; 0x4928 <end_fine_scroll_rom>

00004926 <end_fine_scroll>:
	...

00004928 <end_fine_scroll_rom>:
	...

0000492a <end_fine_scroll_ram>:
	end_fine_scroll:	
		nop
	end_fine_scroll_rom:
		nop
	end_fine_scroll_ram:
		clr r16	
    492a:	00 27       	eor	r16, r16
		out _SFR_IO_ADDR(DATA_PORT),r16   
    492c:	08 b9       	out	0x08, r16	; 8

		pop r6
    492e:	6f 90       	pop	r6
		pop r7
    4930:	7f 90       	pop	r7
		pop r9
    4932:	9f 90       	pop	r9
		pop r12
    4934:	cf 90       	pop	r12
		pop r13
    4936:	df 90       	pop	r13
		pop r19
    4938:	3f 91       	pop	r19
		pop r22
    493a:	6f 91       	pop	r22
		pop r23
    493c:	7f 91       	pop	r23
		pop YH
    493e:	df 91       	pop	r29
		pop YL
    4940:	cf 91       	pop	r28

		ret
    4942:	08 95       	ret

00004944 <CopyFlashTile>:
; C-callable
; r24=Source ROM tile index
; r22=Dest RAM tile index
;************************************
CopyFlashTile:
	ldi r18,TILE_HEIGHT*TILE_WIDTH
    4944:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	lds ZL,tile_table_lo
    4946:	e0 91 96 0c 	lds	r30, 0x0C96
	lds ZH,tile_table_hi
    494a:	f0 91 97 0c 	lds	r31, 0x0C97
	mul r24,r18
    494e:	82 9f       	mul	r24, r18
	add ZL,r0
    4950:	e0 0d       	add	r30, r0
	adc ZH,r1
    4952:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    4954:	aa e3       	ldi	r26, 0x3A	; 58
	ldi XH,hi8(ram_tiles)
    4956:	b5 e0       	ldi	r27, 0x05	; 5
	mul r22,r18
    4958:	62 9f       	mul	r22, r18
	add XL,r0
    495a:	a0 0d       	add	r26, r0
	adc XH,r1
    495c:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	lpm r1,Z+
	st X+,r1
.endr
    495e:	15 90       	lpm	r1, Z+
    4960:	1d 92       	st	X+, r1
    4962:	15 90       	lpm	r1, Z+
    4964:	1d 92       	st	X+, r1
    4966:	15 90       	lpm	r1, Z+
    4968:	1d 92       	st	X+, r1
    496a:	15 90       	lpm	r1, Z+
    496c:	1d 92       	st	X+, r1
    496e:	15 90       	lpm	r1, Z+
    4970:	1d 92       	st	X+, r1
    4972:	15 90       	lpm	r1, Z+
    4974:	1d 92       	st	X+, r1
    4976:	15 90       	lpm	r1, Z+
    4978:	1d 92       	st	X+, r1
    497a:	15 90       	lpm	r1, Z+
    497c:	1d 92       	st	X+, r1
    497e:	15 90       	lpm	r1, Z+
    4980:	1d 92       	st	X+, r1
    4982:	15 90       	lpm	r1, Z+
    4984:	1d 92       	st	X+, r1
    4986:	15 90       	lpm	r1, Z+
    4988:	1d 92       	st	X+, r1
    498a:	15 90       	lpm	r1, Z+
    498c:	1d 92       	st	X+, r1
    498e:	15 90       	lpm	r1, Z+
    4990:	1d 92       	st	X+, r1
    4992:	15 90       	lpm	r1, Z+
    4994:	1d 92       	st	X+, r1
    4996:	15 90       	lpm	r1, Z+
    4998:	1d 92       	st	X+, r1
    499a:	15 90       	lpm	r1, Z+
    499c:	1d 92       	st	X+, r1
    499e:	15 90       	lpm	r1, Z+
    49a0:	1d 92       	st	X+, r1
    49a2:	15 90       	lpm	r1, Z+
    49a4:	1d 92       	st	X+, r1
    49a6:	15 90       	lpm	r1, Z+
    49a8:	1d 92       	st	X+, r1
    49aa:	15 90       	lpm	r1, Z+
    49ac:	1d 92       	st	X+, r1
    49ae:	15 90       	lpm	r1, Z+
    49b0:	1d 92       	st	X+, r1
    49b2:	15 90       	lpm	r1, Z+
    49b4:	1d 92       	st	X+, r1
    49b6:	15 90       	lpm	r1, Z+
    49b8:	1d 92       	st	X+, r1
    49ba:	15 90       	lpm	r1, Z+
    49bc:	1d 92       	st	X+, r1
    49be:	15 90       	lpm	r1, Z+
    49c0:	1d 92       	st	X+, r1
    49c2:	15 90       	lpm	r1, Z+
    49c4:	1d 92       	st	X+, r1
    49c6:	15 90       	lpm	r1, Z+
    49c8:	1d 92       	st	X+, r1
    49ca:	15 90       	lpm	r1, Z+
    49cc:	1d 92       	st	X+, r1
    49ce:	15 90       	lpm	r1, Z+
    49d0:	1d 92       	st	X+, r1
    49d2:	15 90       	lpm	r1, Z+
    49d4:	1d 92       	st	X+, r1
    49d6:	15 90       	lpm	r1, Z+
    49d8:	1d 92       	st	X+, r1
    49da:	15 90       	lpm	r1, Z+
    49dc:	1d 92       	st	X+, r1
    49de:	15 90       	lpm	r1, Z+
    49e0:	1d 92       	st	X+, r1
    49e2:	15 90       	lpm	r1, Z+
    49e4:	1d 92       	st	X+, r1
    49e6:	15 90       	lpm	r1, Z+
    49e8:	1d 92       	st	X+, r1
    49ea:	15 90       	lpm	r1, Z+
    49ec:	1d 92       	st	X+, r1
    49ee:	15 90       	lpm	r1, Z+
    49f0:	1d 92       	st	X+, r1
    49f2:	15 90       	lpm	r1, Z+
    49f4:	1d 92       	st	X+, r1
    49f6:	15 90       	lpm	r1, Z+
    49f8:	1d 92       	st	X+, r1
    49fa:	15 90       	lpm	r1, Z+
    49fc:	1d 92       	st	X+, r1
    49fe:	15 90       	lpm	r1, Z+
    4a00:	1d 92       	st	X+, r1
    4a02:	15 90       	lpm	r1, Z+
    4a04:	1d 92       	st	X+, r1
    4a06:	15 90       	lpm	r1, Z+
    4a08:	1d 92       	st	X+, r1
    4a0a:	15 90       	lpm	r1, Z+
    4a0c:	1d 92       	st	X+, r1
    4a0e:	15 90       	lpm	r1, Z+
    4a10:	1d 92       	st	X+, r1
    4a12:	15 90       	lpm	r1, Z+
    4a14:	1d 92       	st	X+, r1
    4a16:	15 90       	lpm	r1, Z+
    4a18:	1d 92       	st	X+, r1
    4a1a:	15 90       	lpm	r1, Z+
    4a1c:	1d 92       	st	X+, r1
    4a1e:	15 90       	lpm	r1, Z+
    4a20:	1d 92       	st	X+, r1
    4a22:	15 90       	lpm	r1, Z+
    4a24:	1d 92       	st	X+, r1
    4a26:	15 90       	lpm	r1, Z+
    4a28:	1d 92       	st	X+, r1
    4a2a:	15 90       	lpm	r1, Z+
    4a2c:	1d 92       	st	X+, r1
    4a2e:	15 90       	lpm	r1, Z+
    4a30:	1d 92       	st	X+, r1
    4a32:	15 90       	lpm	r1, Z+
    4a34:	1d 92       	st	X+, r1
    4a36:	15 90       	lpm	r1, Z+
    4a38:	1d 92       	st	X+, r1
    4a3a:	15 90       	lpm	r1, Z+
    4a3c:	1d 92       	st	X+, r1
    4a3e:	15 90       	lpm	r1, Z+
    4a40:	1d 92       	st	X+, r1
    4a42:	15 90       	lpm	r1, Z+
    4a44:	1d 92       	st	X+, r1
    4a46:	15 90       	lpm	r1, Z+
    4a48:	1d 92       	st	X+, r1
    4a4a:	15 90       	lpm	r1, Z+
    4a4c:	1d 92       	st	X+, r1
    4a4e:	15 90       	lpm	r1, Z+
    4a50:	1d 92       	st	X+, r1
    4a52:	15 90       	lpm	r1, Z+
    4a54:	1d 92       	st	X+, r1
    4a56:	15 90       	lpm	r1, Z+
    4a58:	1d 92       	st	X+, r1
    4a5a:	15 90       	lpm	r1, Z+
    4a5c:	1d 92       	st	X+, r1
	clr r1
    4a5e:	11 24       	eor	r1, r1
	ret
    4a60:	08 95       	ret

00004a62 <CopyRamTile>:
; r24=Source RAM tile index
; r22=Dest RAM tile index
;************************************
CopyRamTile:

	ldi r18,TILE_HEIGHT*TILE_WIDTH
    4a62:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	ldi ZL,lo8(ram_tiles)
    4a64:	ea e3       	ldi	r30, 0x3A	; 58
	ldi ZH,hi8(ram_tiles)
    4a66:	f5 e0       	ldi	r31, 0x05	; 5
	mul r24,r18
    4a68:	82 9f       	mul	r24, r18
	add ZL,r0
    4a6a:	e0 0d       	add	r30, r0
	adc ZH,r1
    4a6c:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    4a6e:	aa e3       	ldi	r26, 0x3A	; 58
	ldi XH,hi8(ram_tiles)
    4a70:	b5 e0       	ldi	r27, 0x05	; 5
	mul r22,r18
    4a72:	62 9f       	mul	r22, r18
	add XL,r0
    4a74:	a0 0d       	add	r26, r0
	adc XH,r1
    4a76:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	ld r1,Z+
	st X+,r1
.endr
    4a78:	11 90       	ld	r1, Z+
    4a7a:	1d 92       	st	X+, r1
    4a7c:	11 90       	ld	r1, Z+
    4a7e:	1d 92       	st	X+, r1
    4a80:	11 90       	ld	r1, Z+
    4a82:	1d 92       	st	X+, r1
    4a84:	11 90       	ld	r1, Z+
    4a86:	1d 92       	st	X+, r1
    4a88:	11 90       	ld	r1, Z+
    4a8a:	1d 92       	st	X+, r1
    4a8c:	11 90       	ld	r1, Z+
    4a8e:	1d 92       	st	X+, r1
    4a90:	11 90       	ld	r1, Z+
    4a92:	1d 92       	st	X+, r1
    4a94:	11 90       	ld	r1, Z+
    4a96:	1d 92       	st	X+, r1
    4a98:	11 90       	ld	r1, Z+
    4a9a:	1d 92       	st	X+, r1
    4a9c:	11 90       	ld	r1, Z+
    4a9e:	1d 92       	st	X+, r1
    4aa0:	11 90       	ld	r1, Z+
    4aa2:	1d 92       	st	X+, r1
    4aa4:	11 90       	ld	r1, Z+
    4aa6:	1d 92       	st	X+, r1
    4aa8:	11 90       	ld	r1, Z+
    4aaa:	1d 92       	st	X+, r1
    4aac:	11 90       	ld	r1, Z+
    4aae:	1d 92       	st	X+, r1
    4ab0:	11 90       	ld	r1, Z+
    4ab2:	1d 92       	st	X+, r1
    4ab4:	11 90       	ld	r1, Z+
    4ab6:	1d 92       	st	X+, r1
    4ab8:	11 90       	ld	r1, Z+
    4aba:	1d 92       	st	X+, r1
    4abc:	11 90       	ld	r1, Z+
    4abe:	1d 92       	st	X+, r1
    4ac0:	11 90       	ld	r1, Z+
    4ac2:	1d 92       	st	X+, r1
    4ac4:	11 90       	ld	r1, Z+
    4ac6:	1d 92       	st	X+, r1
    4ac8:	11 90       	ld	r1, Z+
    4aca:	1d 92       	st	X+, r1
    4acc:	11 90       	ld	r1, Z+
    4ace:	1d 92       	st	X+, r1
    4ad0:	11 90       	ld	r1, Z+
    4ad2:	1d 92       	st	X+, r1
    4ad4:	11 90       	ld	r1, Z+
    4ad6:	1d 92       	st	X+, r1
    4ad8:	11 90       	ld	r1, Z+
    4ada:	1d 92       	st	X+, r1
    4adc:	11 90       	ld	r1, Z+
    4ade:	1d 92       	st	X+, r1
    4ae0:	11 90       	ld	r1, Z+
    4ae2:	1d 92       	st	X+, r1
    4ae4:	11 90       	ld	r1, Z+
    4ae6:	1d 92       	st	X+, r1
    4ae8:	11 90       	ld	r1, Z+
    4aea:	1d 92       	st	X+, r1
    4aec:	11 90       	ld	r1, Z+
    4aee:	1d 92       	st	X+, r1
    4af0:	11 90       	ld	r1, Z+
    4af2:	1d 92       	st	X+, r1
    4af4:	11 90       	ld	r1, Z+
    4af6:	1d 92       	st	X+, r1
    4af8:	11 90       	ld	r1, Z+
    4afa:	1d 92       	st	X+, r1
    4afc:	11 90       	ld	r1, Z+
    4afe:	1d 92       	st	X+, r1
    4b00:	11 90       	ld	r1, Z+
    4b02:	1d 92       	st	X+, r1
    4b04:	11 90       	ld	r1, Z+
    4b06:	1d 92       	st	X+, r1
    4b08:	11 90       	ld	r1, Z+
    4b0a:	1d 92       	st	X+, r1
    4b0c:	11 90       	ld	r1, Z+
    4b0e:	1d 92       	st	X+, r1
    4b10:	11 90       	ld	r1, Z+
    4b12:	1d 92       	st	X+, r1
    4b14:	11 90       	ld	r1, Z+
    4b16:	1d 92       	st	X+, r1
    4b18:	11 90       	ld	r1, Z+
    4b1a:	1d 92       	st	X+, r1
    4b1c:	11 90       	ld	r1, Z+
    4b1e:	1d 92       	st	X+, r1
    4b20:	11 90       	ld	r1, Z+
    4b22:	1d 92       	st	X+, r1
    4b24:	11 90       	ld	r1, Z+
    4b26:	1d 92       	st	X+, r1
    4b28:	11 90       	ld	r1, Z+
    4b2a:	1d 92       	st	X+, r1
    4b2c:	11 90       	ld	r1, Z+
    4b2e:	1d 92       	st	X+, r1
    4b30:	11 90       	ld	r1, Z+
    4b32:	1d 92       	st	X+, r1
    4b34:	11 90       	ld	r1, Z+
    4b36:	1d 92       	st	X+, r1
    4b38:	11 90       	ld	r1, Z+
    4b3a:	1d 92       	st	X+, r1
    4b3c:	11 90       	ld	r1, Z+
    4b3e:	1d 92       	st	X+, r1
    4b40:	11 90       	ld	r1, Z+
    4b42:	1d 92       	st	X+, r1
    4b44:	11 90       	ld	r1, Z+
    4b46:	1d 92       	st	X+, r1
    4b48:	11 90       	ld	r1, Z+
    4b4a:	1d 92       	st	X+, r1
    4b4c:	11 90       	ld	r1, Z+
    4b4e:	1d 92       	st	X+, r1
    4b50:	11 90       	ld	r1, Z+
    4b52:	1d 92       	st	X+, r1
    4b54:	11 90       	ld	r1, Z+
    4b56:	1d 92       	st	X+, r1
    4b58:	11 90       	ld	r1, Z+
    4b5a:	1d 92       	st	X+, r1
    4b5c:	11 90       	ld	r1, Z+
    4b5e:	1d 92       	st	X+, r1
    4b60:	11 90       	ld	r1, Z+
    4b62:	1d 92       	st	X+, r1
    4b64:	11 90       	ld	r1, Z+
    4b66:	1d 92       	st	X+, r1
    4b68:	11 90       	ld	r1, Z+
    4b6a:	1d 92       	st	X+, r1
    4b6c:	11 90       	ld	r1, Z+
    4b6e:	1d 92       	st	X+, r1
    4b70:	11 90       	ld	r1, Z+
    4b72:	1d 92       	st	X+, r1
    4b74:	11 90       	ld	r1, Z+
    4b76:	1d 92       	st	X+, r1
	clr r1
    4b78:	11 24       	eor	r1, r1
	ret
    4b7a:	08 95       	ret

00004b7c <BlitSprite>:
; r22=RAM tile index (bt)
; r21:r20=Y:X
; r19:r18=DY:DX
;************************************
BlitSprite:
	push r16
    4b7c:	0f 93       	push	r16
	push r17
    4b7e:	1f 93       	push	r17
	push YL
    4b80:	cf 93       	push	r28
	push YH
    4b82:	df 93       	push	r29

	;src=sprites_tiletable_lo+(sprites[i].tileIndex*TILE_HEIGHT*TILE_WIDTH)
	ldi r25,SPRITE_STRUCT_SIZE
    4b84:	94 e0       	ldi	r25, 0x04	; 4
	mul r24,r25
    4b86:	89 9f       	mul	r24, r25

	ldi ZL,lo8(sprites)	
    4b88:	e2 e0       	ldi	r30, 0x02	; 2
	ldi ZH,hi8(sprites)	
    4b8a:	f5 e0       	ldi	r31, 0x05	; 5
	add ZL,r0
    4b8c:	e0 0d       	add	r30, r0
	adc ZH,r1
    4b8e:	f1 1d       	adc	r31, r1

	ldd r16,Z+sprFlags
    4b90:	03 81       	ldd	r16, Z+3	; 0x03

	;8x16 multiply
	ldd r24,Z+sprTileIndex
    4b92:	82 81       	ldd	r24, Z+2	; 0x02
	ldi r30,TILE_WIDTH*TILE_HEIGHT
    4b94:	e0 e4       	ldi	r30, 0x40	; 64
	mul r24,r30
    4b96:	8e 9f       	mul	r24, r30
	movw r26,r0
    4b98:	d0 01       	movw	r26, r0
	
	;get tile bank addr
	ldi r25,4*2
    4b9a:	98 e0       	ldi	r25, 0x08	; 8
	mul r16,r25
    4b9c:	09 9f       	mul	r16, r25
	ldi YL,lo8(sprites_tile_banks)	
    4b9e:	ce e8       	ldi	r28, 0x8E	; 142
	ldi YH,hi8(sprites_tile_banks)	
    4ba0:	dc e0       	ldi	r29, 0x0C	; 12
	clr r0
    4ba2:	00 24       	eor	r0, r0
	add YL,r1
    4ba4:	c1 0d       	add	r28, r1
	adc YH,r0		
    4ba6:	d0 1d       	adc	r29, r0
	ldd ZL,Y+0
    4ba8:	e8 81       	ld	r30, Y
	ldd ZH,Y+1
    4baa:	f9 81       	ldd	r31, Y+1	; 0x01
	add ZL,r26	;tile data src
    4bac:	ea 0f       	add	r30, r26
	adc ZH,r27
    4bae:	fb 1f       	adc	r31, r27
	
	;dest=ram_tiles+(bt*TILE_HEIGHT*TILE_WIDTH)
	ldi XL,lo8(ram_tiles)	
    4bb0:	aa e3       	ldi	r26, 0x3A	; 58
	ldi XH,hi8(ram_tiles)
    4bb2:	b5 e0       	ldi	r27, 0x05	; 5
	ldi r25,TILE_WIDTH*TILE_HEIGHT
    4bb4:	90 e4       	ldi	r25, 0x40	; 64
	mul r22,r25
    4bb6:	69 9f       	mul	r22, r25
	add XL,r0
    4bb8:	a0 0d       	add	r26, r0
	adc XH,r1
    4bba:	b1 1d       	adc	r27, r1
			srcXdiff=destXdiff;
			src+=destXdiff;
		}
	}
	*/
	clr r1
    4bbc:	11 24       	eor	r1, r1
	clr YH		;hi8(srcXdiff)
    4bbe:	dd 27       	eor	r29, r29

	cpi r20,0	
    4bc0:	40 30       	cpi	r20, 0x00	; 0
	brne x_2nd_tile
    4bc2:	51 f4       	brne	.+20     	; 0x4bd8 <x_2nd_tile>
	
	add XL,r18	;dest+=dx
    4bc4:	a2 0f       	add	r26, r18
	adc XH,r1
    4bc6:	b1 1d       	adc	r27, r1
	mov r24,r18	;destXdiff=dx
    4bc8:	82 2f       	mov	r24, r18
	mov YL,r18	;srcXdiff=dx
    4bca:	c2 2f       	mov	r28, r18

	sbrs r16,SPRITE_FLIP_X_BIT
    4bcc:	00 ff       	sbrs	r16, 0
	rjmp x_check_end
    4bce:	11 c0       	rjmp	.+34     	; 0x4bf2 <x_check_end>

	adiw ZL,(TILE_WIDTH-1)	;src+=7
    4bd0:	37 96       	adiw	r30, 0x07	; 7
	ldi YL,TILE_WIDTH*2		;srcXdiff=((TILE_WIDTH*2)-dx);
    4bd2:	c0 e1       	ldi	r28, 0x10	; 16
	sub YL,r18	
    4bd4:	c2 1b       	sub	r28, r18
	rjmp x_check_end
    4bd6:	0d c0       	rjmp	.+26     	; 0x4bf2 <x_check_end>

00004bd8 <x_2nd_tile>:

x_2nd_tile:
	ldi r24,TILE_WIDTH
    4bd8:	88 e0       	ldi	r24, 0x08	; 8
	sub r24,r18		;8-DX = xdiff for dest
    4bda:	82 1b       	sub	r24, r18

	sbrc r16,SPRITE_FLIP_X_BIT
    4bdc:	00 fd       	sbrc	r16, 0
	rjmp x2_flip_x
    4bde:	04 c0       	rjmp	.+8      	; 0x4be8 <x2_flip_x>

	mov YL,r24		;srcXdiff=destXdiff;
    4be0:	c8 2f       	mov	r28, r24
	add ZL,r24		;src+=destXdiff;
    4be2:	e8 0f       	add	r30, r24
	adc ZH,r1	
    4be4:	f1 1d       	adc	r31, r1
	rjmp x_check_end
    4be6:	05 c0       	rjmp	.+10     	; 0x4bf2 <x_check_end>

00004be8 <x2_flip_x>:

x2_flip_x:
	ldi YL,TILE_WIDTH
    4be8:	c8 e0       	ldi	r28, 0x08	; 8
	add YL,r18		;srcXdiff=TILE_WIDTH+dx;	
    4bea:	c2 0f       	add	r28, r18
	add ZL,r18		;src+=dx;
    4bec:	e2 0f       	add	r30, r18
	adc ZH,r1
    4bee:	f1 1d       	adc	r31, r1
	sbiw ZL,1		;src--;
    4bf0:	31 97       	sbiw	r30, 0x01	; 1

00004bf2 <x_check_end>:
		}else{
			src+=(ydiff*TILE_WIDTH);
		}
	}
	*/
	cpi r21,0
    4bf2:	50 30       	cpi	r21, 0x00	; 0
	brne y_2nd_tile
    4bf4:	51 f4       	brne	.+20     	; 0x4c0a <y_2nd_tile>

	ldi r25,TILE_WIDTH	;dest+=(dy*TILE_WIDTH)
    4bf6:	98 e0       	ldi	r25, 0x08	; 8
	mul r25,r19			
    4bf8:	93 9f       	mul	r25, r19
	add XL,r0
    4bfa:	a0 0d       	add	r26, r0
	adc XH,r1
    4bfc:	b1 1d       	adc	r27, r1

	mov r25,r19			;ydiff=dy
    4bfe:	93 2f       	mov	r25, r19

	//sbrc r16,SPRITE_FLIP_Y_BIT
	//adiw ZL,(TILE_WIDTH*(TILE_HEIGHT-1))

	sbrc r16,SPRITE_FLIP_Y_BIT
    4c00:	01 fd       	sbrc	r16, 1
	subi ZL,lo8(-(TILE_WIDTH*(TILE_HEIGHT-1)));src+=(TILE_WIDTH*(TILE_HEIGHT-1));
    4c02:	e8 5c       	subi	r30, 0xC8	; 200
	sbrc r16,SPRITE_FLIP_Y_BIT
    4c04:	01 fd       	sbrc	r16, 1
	sbci ZH,hi8(-(TILE_WIDTH*(TILE_HEIGHT-1)))
    4c06:	ff 4f       	sbci	r31, 0xFF	; 255


	rjmp y_check_end
    4c08:	0a c0       	rjmp	.+20     	; 0x4c1e <y_check_end>

00004c0a <y_2nd_tile>:

y_2nd_tile:
	ldi r25,TILE_HEIGHT	;ydiff=(TILE_HEIGHT-dy)
    4c0a:	98 e0       	ldi	r25, 0x08	; 8
	sub r25,r19	
    4c0c:	93 1b       	sub	r25, r19
	
	mov r22,r19			;temp=dy-1
    4c0e:	63 2f       	mov	r22, r19
	dec r22
    4c10:	6a 95       	dec	r22
	sbrs r16,SPRITE_FLIP_Y_BIT
    4c12:	01 ff       	sbrs	r16, 1
	mov r22,r25			;temp=ydiff
    4c14:	69 2f       	mov	r22, r25

	ldi r21,TILE_WIDTH	;src+=(temp*TILE_WIDTH);
    4c16:	58 e0       	ldi	r21, 0x08	; 8
	mul r21,r22
    4c18:	56 9f       	mul	r21, r22
	add ZL,r0
    4c1a:	e0 0d       	add	r30, r0
	adc ZH,r1	
    4c1c:	f1 1d       	adc	r31, r1

00004c1e <y_check_end>:
y_check_end:	
	
	//if(flags&SPRITE_FLIP_X){
	//	step=-1;
	//}
	ser r22		;step=-1
    4c1e:	6f ef       	ldi	r22, 0xFF	; 255
	ser r23
    4c20:	7f ef       	ldi	r23, 0xFF	; 255
	sbrs r16,SPRITE_FLIP_X_BIT
    4c22:	00 ff       	sbrs	r16, 0
	ldi r22,1	;step=1
    4c24:	61 e0       	ldi	r22, 0x01	; 1
	sbrs r16,SPRITE_FLIP_X_BIT
    4c26:	00 ff       	sbrs	r16, 0
	clr r23
    4c28:	77 27       	eor	r23, r23

	//if(flags&SPRITE_FLIP_Y){
	//	srcXdiff-=(TILE_WIDTH*2);
	//}
	sbrc r16,SPRITE_FLIP_Y_BIT
    4c2a:	01 fd       	sbrc	r16, 1
	sbiw YL,(TILE_WIDTH*2)
    4c2c:	60 97       	sbiw	r28, 0x10	; 16
	;r24	= destXdiff
	;r25	= ydiff
	;X		= dest
	;Y		= srcXdiff
	;Z		= src
	clr r1
    4c2e:	11 24       	eor	r1, r1
	ldi r19,TRANSLUCENT_COLOR
    4c30:	3e ef       	ldi	r19, 0xFE	; 254

	ldi r21,TILE_HEIGHT
    4c32:	58 e0       	ldi	r21, 0x08	; 8
	sub r21,r25 	;yspan=(TILE_HEIGHT-ydiff)
    4c34:	59 1b       	sub	r21, r25

00004c36 <y_loop>:

y_loop:
	ldi r20,TILE_WIDTH
    4c36:	48 e0       	ldi	r20, 0x08	; 8
	sub r20,r24 	;xspan=(TILE_WIDTH-destXdiff)
    4c38:	48 1b       	sub	r20, r24

00004c3a <x_loop>:

x_loop:
	lpm r18,Z		;px=pgm_read_byte(src);
    4c3a:	24 91       	lpm	r18, Z
	cpse r18,r19	;if(px!=TRANSLUCENT_COLOR)
    4c3c:	23 13       	cpse	r18, r19
	st X,r18		;*dest=px;
    4c3e:	2c 93       	st	X, r18
	adiw XL,1
    4c40:	11 96       	adiw	r26, 0x01	; 1
	add ZL,r22		;src+=step;
    4c42:	e6 0f       	add	r30, r22
	adc ZH,r23
    4c44:	f7 1f       	adc	r31, r23
	dec r20
    4c46:	4a 95       	dec	r20
	brne x_loop
    4c48:	c1 f7       	brne	.-16     	; 0x4c3a <x_loop>

	add ZL,YL		;src+=srcXdiff
    4c4a:	ec 0f       	add	r30, r28
	adc ZH,YH
    4c4c:	fd 1f       	adc	r31, r29
	add XL,r24		;dest+=destXdiff
    4c4e:	a8 0f       	add	r26, r24
	adc XH,r1
    4c50:	b1 1d       	adc	r27, r1
	dec r21
    4c52:	5a 95       	dec	r21
	brne y_loop
    4c54:	81 f7       	brne	.-32     	; 0x4c36 <y_loop>


	pop YH
    4c56:	df 91       	pop	r29
	pop YL
    4c58:	cf 91       	pop	r28
	pop r17
    4c5a:	1f 91       	pop	r17
	pop r16
    4c5c:	0f 91       	pop	r16
	ret
    4c5e:	08 95       	ret

00004c60 <__vector_13>:

;***************************************************************************
; Main Video sync interrupt
;***************************************************************************
TIMER1_COMPA_vect:
	push r0
    4c60:	0f 92       	push	r0
	push r1
    4c62:	1f 92       	push	r1
	push ZL;2
    4c64:	ef 93       	push	r30
	push ZH;2
    4c66:	ff 93       	push	r31
	
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    4c68:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    4c6a:	ef 93       	push	r30

	;Read timer offset since rollover to remove cycles 
	;and conpensate for interrupt latency.
	;This is nessesary to eliminate frame jitter.
	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    4c6c:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,0x12 ;MIN_INT_LATENCY
    4c70:	e2 51       	subi	r30, 0x12	; 18

	ldi ZH,1
    4c72:	f1 e0       	ldi	r31, 0x01	; 1

00004c74 <latency_loop>:
latency_loop:
	cp ZL,ZH
    4c74:	ef 17       	cp	r30, r31
	brlo .		;advance PC to next instruction	
    4c76:	00 f0       	brcs	.+0      	; 0x4c78 <latency_loop+0x4>
	inc ZH
    4c78:	f3 95       	inc	r31
	cpi ZH,10
    4c7a:	fa 30       	cpi	r31, 0x0A	; 10
	brlo latency_loop
    4c7c:	d8 f3       	brcs	.-10     	; 0x4c74 <latency_loop>
	jmp .
    4c7e:	0c 94 41 26 	jmp	0x4c82	; 0x4c82 <latency_loop+0xe>
	
	;decrement sync pulse counter
	lds ZL,sync_pulse
    4c82:	e0 91 a1 0c 	lds	r30, 0x0CA1
	dec ZL
    4c86:	ea 95       	dec	r30
	sts sync_pulse,ZL
    4c88:	e0 93 a1 0c 	sts	0x0CA1, r30

	;process sync phases
	lds ZH,sync_phase
    4c8c:	f0 91 a0 0c 	lds	r31, 0x0CA0
	sbrc ZH,0
    4c90:	f0 fd       	sbrc	r31, 0
	rjmp sync_hsync
    4c92:	57 c0       	rjmp	.+174    	; 0x4d42 <sync_hsync>
; Note: TCNT1 should be equal to 
; 0x68 on the cbi
; 0xAC on the sbi
; pulse duration: 68 clocks
;***************************************************		
	cpi ZL,SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    4c94:	ec 30       	cpi	r30, 0x0C	; 12
	brlo sync_eq
    4c96:	98 f0       	brcs	.+38     	; 0x4cbe <sync_eq>

	;Set HDRIVE to double rate during VSYNC
	ldi ZH,hi8(HDRIVE_CL_TWICE)
    4c98:	f3 e0       	ldi	r31, 0x03	; 3
	sts _SFR_MEM_ADDR(OCR1AH),ZH	
    4c9a:	f0 93 89 00 	sts	0x0089, r31
	ldi ZH,lo8(HDRIVE_CL_TWICE)
    4c9e:	fd e8       	ldi	r31, 0x8D	; 141
	sts _SFR_MEM_ADDR(OCR1AL),ZH
    4ca0:	f0 93 88 00 	sts	0x0088, r31

	bst ZL,0
    4ca4:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0x68
    4ca6:	28 98       	cbi	0x05, 0	; 5
	brtc sync_pre_eq_no_sound_update
    4ca8:	26 f4       	brtc	.+8      	; 0x4cb2 <sync_pre_eq_no_sound_update>
	ldi ZL,1	;indicate update_sound to generate the SBI for pre-eq
    4caa:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    4cac:	0e 94 28 27 	call	0x4e50	; 0x4e50 <update_sound>
	rjmp sync_end
    4cb0:	b7 c0       	rjmp	.+366    	; 0x4e20 <sync_end>

00004cb2 <sync_pre_eq_no_sound_update>:

sync_pre_eq_no_sound_update:
	WAIT ZL,64
    4cb2:	e5 e1       	ldi	r30, 0x15	; 21
    4cb4:	ea 95       	dec	r30
    4cb6:	f1 f7       	brne	.-4      	; 0x4cb4 <sync_pre_eq_no_sound_update+0x2>
    4cb8:	00 00       	nop
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    4cba:	28 9a       	sbi	0x05, 0	; 5
		
	rjmp sync_end
    4cbc:	b1 c0       	rjmp	.+354    	; 0x4e20 <sync_end>

00004cbe <sync_eq>:
; 0x68  on the cbi
; 0x36E on the sbi
; low pulse duration: 774 clocks
;***************************************************	
sync_eq:
	cpi ZL,SYNC_POST_EQ_PULSES
    4cbe:	e6 30       	cpi	r30, 0x06	; 6
	brlo sync_post_eq
    4cc0:	38 f1       	brcs	.+78     	; 0x4d10 <sync_post_eq>

	rjmp .
    4cc2:	00 c0       	rjmp	.+0      	; 0x4cc4 <sync_eq+0x6>
	rjmp .
    4cc4:	00 c0       	rjmp	.+0      	; 0x4cc6 <sync_eq+0x8>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    4cc6:	28 98       	cbi	0x05, 0	; 5

	bst ZL,0
    4cc8:	e0 fb       	bst	r30, 0
	ldi ZL,4
    4cca:	e4 e0       	ldi	r30, 0x04	; 4
	brtc sync_eq_skip
    4ccc:	16 f4       	brtc	.+4      	; 0x4cd2 <sync_eq_skip>
	
	call update_sound
    4cce:	0e 94 28 27 	call	0x4e50	; 0x4e50 <update_sound>

00004cd2 <sync_eq_skip>:
	;enable interupt to bring back sync 
	;level instead of wasting cycles
	;in a big wait loop

 	;clear interrupt flag
	ldi ZL,(1<<OCF1B)
    4cd2:	e4 e0       	ldi	r30, 0x04	; 4
	sts _SFR_MEM_ADDR(TIFR1),ZL 
    4cd4:	e0 93 36 00 	sts	0x0036, r30
	
	;generate interrupt on match
	;for timer1 compare unit b
	ldi ZL,(1<<OCIE1A)+(1<<OCIE1B)
    4cd8:	e6 e0       	ldi	r30, 0x06	; 6
	sts _SFR_MEM_ADDR(TIMSK1),ZL
    4cda:	e0 93 6f 00 	sts	0x006F, r30

	rjmp sync_end
    4cde:	a0 c0       	rjmp	.+320    	; 0x4e20 <sync_end>

00004ce0 <__vector_14>:
; during VSYNC EQ pulses to recover ~5000 cycles per field
; with interrupt latency conpensation
; 37 cycles
;**********************************************************	
TIMER1_COMPB_vect:
	push ZL
    4ce0:	ef 93       	push	r30
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    4ce2:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    4ce4:	ef 93       	push	r30

	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    4ce6:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,62+31 ;0x5D ;MIN_INT_LATENCY
    4cea:	ed 55       	subi	r30, 0x5D	; 93

	cpi ZL,1
    4cec:	e1 30       	cpi	r30, 0x01	; 1
	brlo .		;advance PC to next instruction
    4cee:	00 f0       	brcs	.+0      	; 0x4cf0 <__vector_14+0x10>

	cpi ZL,2
    4cf0:	e2 30       	cpi	r30, 0x02	; 2
	brlo .		;advance PC to next instruction
    4cf2:	00 f0       	brcs	.+0      	; 0x4cf4 <__vector_14+0x14>

	cpi ZL,3
    4cf4:	e3 30       	cpi	r30, 0x03	; 3
	brlo .		;advance PC to next instruction
    4cf6:	00 f0       	brcs	.+0      	; 0x4cf8 <__vector_14+0x18>

	cpi ZL,4
    4cf8:	e4 30       	cpi	r30, 0x04	; 4
	brlo .		;advance PC to next instruction
    4cfa:	00 f0       	brcs	.+0      	; 0x4cfc <__vector_14+0x1c>

	cpi ZL,5
    4cfc:	e5 30       	cpi	r30, 0x05	; 5
	brlo .		;advance PC to next instruction
    4cfe:	00 f0       	brcs	.+0      	; 0x4d00 <__vector_14+0x20>

 	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;68
    4d00:	28 9a       	sbi	0x05, 0	; 5
	ldi ZL,(1<<OCIE1A) ; disable OCIE1B 
    4d02:	e2 e0       	ldi	r30, 0x02	; 2
	sts _SFR_MEM_ADDR(TIMSK1),ZL ;stop generate interrupt on match
    4d04:	e0 93 6f 00 	sts	0x006F, r30
	
	;restore flags
	pop ZL
    4d08:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL	
    4d0a:	ef bf       	out	0x3f, r30	; 63
	pop ZL
    4d0c:	ef 91       	pop	r30
	reti
    4d0e:	18 95       	reti

00004d10 <sync_post_eq>:
; 0x68 on the cbi
; 0xAC on the sbi
; pulse cycles: 68 clocks
;***************************************************	
sync_post_eq:	
	rjmp .
    4d10:	00 c0       	rjmp	.+0      	; 0x4d12 <sync_post_eq+0x2>

	bst ZL,0
    4d12:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    4d14:	28 98       	cbi	0x05, 0	; 5
	brtc sync_post_eq_no_sound_update
    4d16:	26 f4       	brtc	.+8      	; 0x4d20 <sync_post_eq_no_sound_update>
	ldi ZL,1	
    4d18:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    4d1a:	0e 94 28 27 	call	0x4e50	; 0x4e50 <update_sound>
	rjmp sync_pre_eq_cont
    4d1e:	05 c0       	rjmp	.+10     	; 0x4d2a <sync_pre_eq_cont>

00004d20 <sync_post_eq_no_sound_update>:

sync_post_eq_no_sound_update:
	WAIT ZL,64
    4d20:	e5 e1       	ldi	r30, 0x15	; 21
    4d22:	ea 95       	dec	r30
    4d24:	f1 f7       	brne	.-4      	; 0x4d22 <sync_post_eq_no_sound_update+0x2>
    4d26:	00 00       	nop

	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN 
    4d28:	28 9a       	sbi	0x05, 0	; 5

00004d2a <sync_pre_eq_cont>:

sync_pre_eq_cont:	
	;check if it's the last vsync pulse
	lds ZL,sync_pulse
    4d2a:	e0 91 a1 0c 	lds	r30, 0x0CA1
	cpi ZL,0
    4d2e:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2 ;skip rjmp
    4d30:	09 f0       	breq	.+2      	; 0x4d34 <sync_pre_eq_cont+0xa>
	rjmp sync_end
    4d32:	76 c0       	rjmp	.+236    	; 0x4e20 <sync_end>
	
	;update sync flags
	ldi ZL,SYNC_HSYNC_PULSES
    4d34:	ed ef       	ldi	r30, 0xFD	; 253
	sts sync_pulse,ZL
    4d36:	e0 93 a1 0c 	sts	0x0CA1, r30
	ldi ZL,1
    4d3a:	e1 e0       	ldi	r30, 0x01	; 1
	sts sync_phase,ZL
    4d3c:	e0 93 a0 0c 	sts	0x0CA0, r30
	
	rjmp sync_end
    4d40:	6f c0       	rjmp	.+222    	; 0x4e20 <sync_end>

00004d42 <sync_hsync>:
; 0xF0 on the sbi
; pulse duration: 136 clocks
;***************************************************	

	; Set HDRIVE to normal rate
	ldi ZL,hi8(HDRIVE_CL)
    4d42:	e7 e0       	ldi	r30, 0x07	; 7
	sts _SFR_MEM_ADDR(OCR1AH),ZL	
    4d44:	e0 93 89 00 	sts	0x0089, r30
	ldi ZL,lo8(HDRIVE_CL)
    4d48:	eb e1       	ldi	r30, 0x1B	; 27
	sts _SFR_MEM_ADDR(OCR1AL),ZL
    4d4a:	e0 93 88 00 	sts	0x0088, r30
	rjmp .
    4d4e:	00 c0       	rjmp	.+0      	; 0x4d50 <sync_hsync+0xe>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    4d50:	28 98       	cbi	0x05, 0	; 5
	
	ldi ZL,2	;indicate update_sound to generate the SBI for pre-eq
    4d52:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    4d54:	00 c0       	rjmp	.+0      	; 0x4d56 <sync_hsync+0x14>
	call update_sound
    4d56:	0e 94 28 27 	call	0x4e50	; 0x4e50 <update_sound>

	;check if we have reached the first line to render
	ldi ZH,SYNC_HSYNC_PULSES
    4d5a:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    4d5c:	00 90 a7 0c 	lds	r0, 0x0CA7
	sub ZH,r0				
    4d60:	f0 19       	sub	r31, r0
	lds ZL,sync_pulse
    4d62:	e0 91 a1 0c 	lds	r30, 0x0CA1
	cp ZL,ZH
    4d66:	ef 17       	cp	r30, r31
	brsh no_render
    4d68:	d0 f4       	brcc	.+52     	; 0x4d9e <no_render>

	ldi ZH,SYNC_HSYNC_PULSES
    4d6a:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    4d6c:	00 90 a7 0c 	lds	r0, 0x0CA7
	sub ZH,r0				
    4d70:	f0 19       	sub	r31, r0
	lds r0,render_lines_count
    4d72:	00 90 a8 0c 	lds	r0, 0x0CA8
	sub ZH,r0			
    4d76:	f0 19       	sub	r31, r0
	cp ZL,ZH
    4d78:	ef 17       	cp	r30, r31
	brlo no_render
    4d7a:	88 f0       	brcs	.+34     	; 0x4d9e <no_render>

	;push r1-r29
	ldi ZL,29
    4d7c:	ed e1       	ldi	r30, 0x1D	; 29
	clr ZH
    4d7e:	ff 27       	eor	r31, r31

00004d80 <push_loop>:
push_loop:
	ld r0,Z	;load value from register file
    4d80:	00 80       	ld	r0, Z
	push r0
    4d82:	0f 92       	push	r0
	dec ZL
    4d84:	ea 95       	dec	r30
	brne push_loop	
    4d86:	e1 f7       	brne	.-8      	; 0x4d80 <push_loop>

	;timing compensation
	;to insure we always call the video mode 
	;routine at the same cycle	
	WAIT r16,230-(AUDIO_OUT_HSYNC_CYCLES)
    4d88:	06 e0       	ldi	r16, 0x06	; 6
    4d8a:	0a 95       	dec	r16
    4d8c:	f1 f7       	brne	.-4      	; 0x4d8a <push_loop+0xa>

	call VMODE_FUNC		;TCNT1=0x234
    4d8e:	0e 94 ee 22 	call	0x45dc	; 0x45dc <sub_video_mode3>

	;pop r1-r29
	ldi ZL,1
    4d92:	e1 e0       	ldi	r30, 0x01	; 1
	clr ZH
    4d94:	ff 27       	eor	r31, r31

00004d96 <pop_loop>:
pop_loop:
	pop r0
    4d96:	0f 90       	pop	r0
	st Z+,r0 ;store value to register file
    4d98:	01 92       	st	Z+, r0
	cpi ZL,30
    4d9a:	ee 31       	cpi	r30, 0x1E	; 30
	brlo pop_loop	
    4d9c:	e0 f3       	brcs	.-8      	; 0x4d96 <pop_loop>

00004d9e <no_render>:

no_render:

	;check if it's the last hsync pulse and we are 
	;ready for VSYNC
	lds ZL,sync_pulse
    4d9e:	e0 91 a1 0c 	lds	r30, 0x0CA1
	cpi ZL,0
    4da2:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2
    4da4:	09 f0       	breq	.+2      	; 0x4da8 <no_render+0xa>
	rjmp sync_end
    4da6:	3c c0       	rjmp	.+120    	; 0x4e20 <sync_end>
;***************************************************
; Process VSYNC stuff
;***************************************************
	
	;push C-call registers
	push r18
    4da8:	2f 93       	push	r18
	push r19
    4daa:	3f 93       	push	r19
	push r20
    4dac:	4f 93       	push	r20
	push r21
    4dae:	5f 93       	push	r21
	push r22
    4db0:	6f 93       	push	r22
	push r23
    4db2:	7f 93       	push	r23
	push r24
    4db4:	8f 93       	push	r24
	push r25
    4db6:	9f 93       	push	r25
	push r26
    4db8:	af 93       	push	r26
	push r27
    4dba:	bf 93       	push	r27

	sei ;must enable ints for re-entrant sync pulses
    4dbc:	78 94       	sei
	clr r1
    4dbe:	11 24       	eor	r1, r1

	;set vsync flags
	clr ZL
    4dc0:	ee 27       	eor	r30, r30
	sts sync_phase,ZL
    4dc2:	e0 93 a0 0c 	sts	0x0CA0, r30
	ldi ZL,SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    4dc6:	e2 e1       	ldi	r30, 0x12	; 18
	sts sync_pulse,ZL
    4dc8:	e0 93 a1 0c 	sts	0x0CA1, r30



	;increment the vsync counter
	lds r24,vsync_counter
    4dcc:	80 91 b1 0c 	lds	r24, 0x0CB1
	lds r25,vsync_counter+1
    4dd0:	90 91 b2 0c 	lds	r25, 0x0CB2
	adiw r24,1
    4dd4:	01 96       	adiw	r24, 0x01	; 1
	sts vsync_counter,r24
    4dd6:	80 93 b1 0c 	sts	0x0CB1, r24
	sts vsync_counter+1,r25
    4dda:	90 93 b2 0c 	sts	0x0CB2, r25


	;process user pre callback
	lds ZL,pre_vsync_user_callback+0
    4dde:	e0 91 a3 0c 	lds	r30, 0x0CA3
	lds ZH,pre_vsync_user_callback+1
    4de2:	f0 91 a4 0c 	lds	r31, 0x0CA4
	cp  ZL,r1
    4de6:	e1 15       	cp	r30, r1
	cpc ZH,r1
    4de8:	f1 05       	cpc	r31, r1
	breq .+2 
    4dea:	09 f0       	breq	.+2      	; 0x4dee <no_render+0x50>
	icall
    4dec:	09 95       	icall

	;refresh buttons states
	#if CONTROLLERS_VSYNC_READ == 1
		call ReadControllers
    4dee:	0e 94 c2 28 	call	0x5184	; 0x5184 <ReadControllers>
	#endif 
	
	;invoke stuff the video mode may have to do
	call VideoModeVsync	
    4df2:	0e 94 c2 36 	call	0x6d84	; 0x6d84 <VideoModeVsync>

	;process music (music, envelopes, etc)
	call process_music
    4df6:	0e 94 22 27 	call	0x4e44	; 0x4e44 <process_music>
	clr r1
    4dfa:	11 24       	eor	r1, r1

	;process user post callback
	lds ZL,post_vsync_user_callback+0
    4dfc:	e0 91 a5 0c 	lds	r30, 0x0CA5
	lds ZH,post_vsync_user_callback+1
    4e00:	f0 91 a6 0c 	lds	r31, 0x0CA6
	cp  ZL,r1
    4e04:	e1 15       	cp	r30, r1
	cpc ZH,r1
    4e06:	f1 05       	cpc	r31, r1
	breq .+2 
    4e08:	09 f0       	breq	.+2      	; 0x4e0c <no_render+0x6e>
	icall
    4e0a:	09 95       	icall
	#if SNES_MOUSE == 1
		call ReadMouseExtendedData
		call ProcessMouseMovement
	#endif

	pop r27
    4e0c:	bf 91       	pop	r27
	pop r26
    4e0e:	af 91       	pop	r26
	pop r25
    4e10:	9f 91       	pop	r25
	pop r24
    4e12:	8f 91       	pop	r24
	pop r23
    4e14:	7f 91       	pop	r23
	pop r22
    4e16:	6f 91       	pop	r22
	pop r21
    4e18:	5f 91       	pop	r21
	pop r20
    4e1a:	4f 91       	pop	r20
	pop r19
    4e1c:	3f 91       	pop	r19
	pop r18
    4e1e:	2f 91       	pop	r18

00004e20 <sync_end>:
	
sync_end:	
	;restore flags
	pop ZL
    4e20:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL
    4e22:	ef bf       	out	0x3f, r30	; 63
	
	pop ZH
    4e24:	ff 91       	pop	r31
	pop ZL
    4e26:	ef 91       	pop	r30
	pop r1
    4e28:	1f 90       	pop	r1
	pop r0
    4e2a:	0f 90       	pop	r0
	reti
    4e2c:	18 95       	reti

00004e2e <hsync_pulse>:
; 0xf0 on the sbi 
;	
; Destroys: ZL (r30)
;*************************************************
hsync_pulse:
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    4e2e:	28 98       	cbi	0x05, 0	; 5
	ldi ZL,2
    4e30:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    4e32:	00 c0       	rjmp	.+0      	; 0x4e34 <hsync_pulse+0x6>
	call update_sound
    4e34:	0e 94 28 27 	call	0x4e50	; 0x4e50 <update_sound>

	lds ZL,sync_pulse
    4e38:	e0 91 a1 0c 	lds	r30, 0x0CA1
	dec ZL
    4e3c:	ea 95       	dec	r30
	sts sync_pulse,ZL
    4e3e:	e0 93 a1 0c 	sts	0x0CA1, r30

	ret
    4e42:	08 95       	ret

00004e44 <process_music>:
; NOTE: registers r18-r27 are already saved by the caller
;***********************
process_music:
	
#if ENABLE_MIXER==1
	lds ZL,sound_enabled
    4e44:	e0 91 b7 0c 	lds	r30, 0x0CB7
	sbrc ZL,0
    4e48:	e0 fd       	sbrc	r30, 0
 	call ProcessMusic
    4e4a:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <ProcessMusic>
#endif

	ret
    4e4e:	08 95       	ret

00004e50 <update_sound>:

; Destroys: Z,r0,r1
; cycles: 212+
;****************************
update_sound:
	push r16
    4e50:	0f 93       	push	r16
	push r17
    4e52:	1f 93       	push	r17
	push r18
    4e54:	2f 93       	push	r18
	push r28
    4e56:	cf 93       	push	r28
	push r29
    4e58:	df 93       	push	r29

	mov r18,ZL
    4e5a:	2e 2f       	mov	r18, r30

	;channel 1 
	lds r16,tr1_step_lo
    4e5c:	00 91 b9 0c 	lds	r16, 0x0CB9
	lds r17,tr1_pos_frac
    4e60:	10 91 bb 0c 	lds	r17, 0x0CBB
	add	r17,r16	;add step to fractional part of sample pos
    4e64:	10 0f       	add	r17, r16
	lds r16,tr1_step_hi	
    4e66:	00 91 ba 0c 	lds	r16, 0x0CBA
	lds ZL,tr1_pos_lo
    4e6a:	e0 91 bc 0c 	lds	r30, 0x0CBC
	lds ZH,tr1_pos_hi 
    4e6e:	f0 91 bd 0c 	lds	r31, 0x0CBD
	adc ZL,r16	;add step to low byte of sample pos
    4e72:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    4e74:	04 91       	lpm	r16, Z
	sts tr1_pos_lo,ZL
    4e76:	e0 93 bc 0c 	sts	0x0CBC, r30
	sts tr1_pos_frac,r17
    4e7a:	10 93 bb 0c 	sts	0x0CBB, r17
	lds r17,tr1_vol
    4e7e:	10 91 b8 0c 	lds	r17, 0x0CB8
	mulsu r16,r17;(sample*mixing vol)
    4e82:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend	
    4e84:	00 08       	sbc	r0, r0
	mov r28,r1	;set (sample*vol>>8) to mix buffer lsb
    4e86:	c1 2d       	mov	r28, r1
	mov r29,r0	;set mix buffer msb	
    4e88:	d0 2d       	mov	r29, r0
	nop
    4e8a:	00 00       	nop

;38
	
	;channel 2
	lds r16,tr2_step_lo
    4e8c:	00 91 bf 0c 	lds	r16, 0x0CBF
	lds r17,tr2_pos_frac
    4e90:	10 91 c1 0c 	lds	r17, 0x0CC1
	add	r17,r16	;add step to fractional part of sample pos
    4e94:	10 0f       	add	r17, r16
	lds r16,tr2_step_hi	
    4e96:	00 91 c0 0c 	lds	r16, 0x0CC0
	lds ZL,tr2_pos_lo
    4e9a:	e0 91 c2 0c 	lds	r30, 0x0CC2
	lds ZH,tr2_pos_hi 
    4e9e:	f0 91 c3 0c 	lds	r31, 0x0CC3
	adc ZL,r16	;add step to low byte of sample pos
    4ea2:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    4ea4:	04 91       	lpm	r16, Z
	sts tr2_pos_lo,ZL
    4ea6:	e0 93 c2 0c 	sts	0x0CC2, r30
	sts tr2_pos_frac,r17
    4eaa:	10 93 c1 0c 	sts	0x0CC1, r17
	lds r17,tr2_vol
    4eae:	10 91 be 0c 	lds	r17, 0x0CBE

	;*** Video sync update ***
	sbrc r18,0								;pre-eq/post-eq sync
    4eb2:	20 fd       	sbrc	r18, 0
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    4eb4:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,0								
    4eb6:	20 ff       	sbrs	r18, 0
	rjmp .
    4eb8:	00 c0       	rjmp	.+0      	; 0x4eba <update_sound+0x6a>
	;*************************

	mulsu r16,r17;(sample*mixing vol)
    4eba:	01 03       	mulsu	r16, r17
	clr r0
    4ebc:	00 24       	eor	r0, r0
	sbc r0,r0	;sign extend
    4ebe:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    4ec0:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb		
    4ec2:	d0 1d       	adc	r29, r0
;70
	
	;channel 3
	lds r16,tr3_step_lo
    4ec4:	00 91 c5 0c 	lds	r16, 0x0CC5
	lds r17,tr3_pos_frac
    4ec8:	10 91 c7 0c 	lds	r17, 0x0CC7
	add	r17,r16				;add step to fractional part of sample pos
    4ecc:	10 0f       	add	r17, r16
	lds r16,tr3_step_hi	
    4ece:	00 91 c6 0c 	lds	r16, 0x0CC6
	lds ZL,tr3_pos_lo
    4ed2:	e0 91 c8 0c 	lds	r30, 0x0CC8
	lds ZH,tr3_pos_hi 
    4ed6:	f0 91 c9 0c 	lds	r31, 0x0CC9
	adc ZL,r16				;add step to low byte of sample pos
    4eda:	e0 1f       	adc	r30, r16
	lpm	r16,Z				;load sample
    4edc:	04 91       	lpm	r16, Z
	sts tr3_pos_lo,ZL
    4ede:	e0 93 c8 0c 	sts	0x0CC8, r30
	sts tr3_pos_frac,r17
    4ee2:	10 93 c7 0c 	sts	0x0CC7, r17
	lds r17,tr3_vol
    4ee6:	10 91 c4 0c 	lds	r17, 0x0CC4
	mulsu r16,r17			;(sample*mixing vol)
    4eea:	01 03       	mulsu	r16, r17
	sbc r0,r0				;sign extend
    4eec:	00 08       	sbc	r0, r0
	add r28,r1				;add (sample*vol>>8) to mix buffer lsb
    4eee:	c1 0d       	add	r28, r1
	adc r29,r0				;ajust mix buffer msb
    4ef0:	d0 1d       	adc	r29, r0
;97	

	;channel 4 - 7/15 bit LFSR 
	lds r16,tr4_barrel_lo
    4ef2:	00 91 cc 0c 	lds	r16, 0x0CCC
	lds r17,tr4_barrel_hi
    4ef6:	10 91 cd 0c 	lds	r17, 0x0CCD
	lds ZL,tr4_divider
    4efa:	e0 91 ce 0c 	lds	r30, 0x0CCE
	dec ZL	
    4efe:	ea 95       	dec	r30
	brpl ch4_no_shift	
    4f00:	92 f4       	brpl	.+36     	; 0x4f26 <ch4_no_shift>

	lds ZH,tr4_params
    4f02:	f0 91 cb 0c 	lds	r31, 0x0CCB
	mov ZL,ZH
    4f06:	ef 2f       	mov	r30, r31
	lsr ZL 			;keep bits7:1
    4f08:	e6 95       	lsr	r30

	mov r0,r16  ;copy barrel shifter
    4f0a:	00 2e       	mov	r0, r16
	lsr r0
    4f0c:	06 94       	lsr	r0
	eor r0,r16  ;xor bit0 and bit1
    4f0e:	00 26       	eor	r0, r16
	bst r0,0
    4f10:	00 fa       	bst	r0, 0
	lsr r17
    4f12:	16 95       	lsr	r17
	ror r16
    4f14:	07 95       	ror	r16
	bld r17,6	;15 bits mode
    4f16:	16 f9       	bld	r17, 6
	sbrs ZH,0
    4f18:	f0 ff       	sbrs	r31, 0
	bld r16,6	;7 bits mode
    4f1a:	06 f9       	bld	r16, 6

	sts tr4_barrel_lo,r16
    4f1c:	00 93 cc 0c 	sts	0x0CCC, r16
	sts tr4_barrel_hi,r17
    4f20:	10 93 cd 0c 	sts	0x0CCD, r17

	rjmp ch4_end
    4f24:	03 c0       	rjmp	.+6      	; 0x4f2c <ch4_end>

00004f26 <ch4_no_shift>:
ch4_no_shift:
	;wait loop 21 cycles
	ldi r17,6
    4f26:	16 e0       	ldi	r17, 0x06	; 6
	dec r17
    4f28:	1a 95       	dec	r17
	brne .-4
    4f2a:	f1 f7       	brne	.-4      	; 0x4f28 <ch4_no_shift+0x2>

00004f2c <ch4_end>:
	;rjmp .
ch4_end:

	sts tr4_divider,ZL
    4f2c:	e0 93 ce 0c 	sts	0x0CCE, r30
	ldi r17,0x80 ;-128
    4f30:	10 e8       	ldi	r17, 0x80	; 128
	
	;*** Video sync update ***
	sbrc r18,1								;hsync
    4f32:	21 fd       	sbrc	r18, 1
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xF0
    4f34:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,1								
    4f36:	21 ff       	sbrs	r18, 1
	rjmp .
    4f38:	00 c0       	rjmp	.+0      	; 0x4f3a <ch4_end+0xe>
	;*************************
	
	sbrc r16,0
    4f3a:	00 fd       	sbrc	r16, 0
	ldi r17,0x7f ;+127
    4f3c:	1f e7       	ldi	r17, 0x7F	; 127
	
	lds r16,tr4_vol
    4f3e:	00 91 ca 0c 	lds	r16, 0x0CCA

	mulsu r17,r16;(sample*mixing vol)
    4f42:	10 03       	mulsu	r17, r16
	sbc r0,r0	;sign extend
    4f44:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    4f46:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb
    4f48:	d0 1d       	adc	r29, r0
;142
#if SOUND_CHANNEL_5_ENABLE==1
	;channel 5 PCM -- 45 cycles

	;add fractional part
	lds r16,tr5_pos_frac
    4f4a:	00 91 d3 0c 	lds	r16, 0x0CD3
	lds r17,tr5_step_lo 
    4f4e:	10 91 d1 0c 	lds	r17, 0x0CD1
	add r16,r17
    4f52:	01 0f       	add	r16, r17
	sts tr5_pos_frac,r16
    4f54:	00 93 d3 0c 	sts	0x0CD3, r16

	;add lo
	lds ZL,tr5_pos_lo
    4f58:	e0 91 d4 0c 	lds	r30, 0x0CD4
	lds r17,tr5_step_hi 
    4f5c:	10 91 d2 0c 	lds	r17, 0x0CD2
	adc ZL,r17
    4f60:	e1 1f       	adc	r30, r17

	;add hi
	lds ZH,tr5_pos_hi
    4f62:	f0 91 d5 0c 	lds	r31, 0x0CD5
	ldi r16,0
    4f66:	00 e0       	ldi	r16, 0x00	; 0
	adc ZH,r16
    4f68:	f0 1f       	adc	r31, r16

	movw r16,ZL
    4f6a:	8f 01       	movw	r16, r30
	lds r0,tr5_loop_len_lo
    4f6c:	00 90 d6 0c 	lds	r0, 0x0CD6
	lds r1,tr5_loop_len_hi	
    4f70:	10 90 d7 0c 	lds	r1, 0x0CD7
	sub r16,r0
    4f74:	00 19       	sub	r16, r0
	sbc r17,r1
    4f76:	11 09       	sbc	r17, r1
	lds r0,tr5_loop_end_lo
    4f78:	00 90 d8 0c 	lds	r0, 0x0CD8
	lds r1,tr5_loop_end_hi
    4f7c:	10 90 d9 0c 	lds	r1, 0x0CD9

	cp ZL,r0
    4f80:	e0 15       	cp	r30, r0
	cpc ZH,r1
    4f82:	f1 05       	cpc	r31, r1
	brlo .+2
    4f84:	08 f0       	brcs	.+2      	; 0x4f88 <ch4_end+0x5c>
	movw ZL,r16
    4f86:	f8 01       	movw	r30, r16

	sts tr5_pos_lo,ZL
    4f88:	e0 93 d4 0c 	sts	0x0CD4, r30
	sts tr5_pos_hi,ZH
    4f8c:	f0 93 d5 0c 	sts	0x0CD5, r31

	lpm	r16,Z	;load sample
    4f90:	04 91       	lpm	r16, Z
	lds r17,tr5_vol
    4f92:	10 91 d0 0c 	lds	r17, 0x0CD0

	mulsu r16,r17;(sample*mixing vol)
    4f96:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend
    4f98:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    4f9a:	c1 0d       	add	r28, r1
	adc r29,r0	;adjust mix buffer msb	
    4f9c:	d0 1d       	adc	r29, r0
#endif
	
	;final processing

	;clip
	clr r0
    4f9e:	00 24       	eor	r0, r0
	cpi r28,128	;> 127?
    4fa0:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0	
    4fa2:	d0 05       	cpc	r29, r0
	brlt .+2
    4fa4:	0c f0       	brlt	.+2      	; 0x4fa8 <ch4_end+0x7c>
	ldi r28,127
    4fa6:	cf e7       	ldi	r28, 0x7F	; 127
	
	dec r0
    4fa8:	0a 94       	dec	r0
	cpi r28,-128; <-128?
    4faa:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0xff
    4fac:	d0 05       	cpc	r29, r0
	brge .+2
    4fae:	0c f4       	brge	.+2      	; 0x4fb2 <ch4_end+0x86>
	ldi r28,-128
    4fb0:	c0 e8       	ldi	r28, 0x80	; 128

	subi r28,128	;convert to unsigned		
    4fb2:	c0 58       	subi	r28, 0x80	; 128
	sts _SFR_MEM_ADDR(OCR2A),r28 ;output sound byte
    4fb4:	c0 93 b3 00 	sts	0x00B3, r28

00004fb8 <update_sound_end>:
#endif


update_sound_end:

	pop r29
    4fb8:	df 91       	pop	r29
	pop r28
    4fba:	cf 91       	pop	r28
	pop r18
    4fbc:	2f 91       	pop	r18
	pop r17
    4fbe:	1f 91       	pop	r17
	pop r16
    4fc0:	0f 91       	pop	r16
	
	ret
    4fc2:	08 95       	ret

00004fc4 <SetSpritesTileTable>:
; C-callable
; r25:r24=pointer to sprites pixel data.
;*****************************
.section .text.SetSpritesTileTable
SetSpritesTileTable:
	sts sprites_tile_banks,r24
    4fc4:	80 93 8e 0c 	sts	0x0C8E, r24
	sts sprites_tile_banks+1,r25
    4fc8:	90 93 8f 0c 	sts	0x0C8F, r25
	ret
    4fcc:	08 95       	ret

00004fce <ClearVram>:
; C-callable
;************************************
.section .text.ClearVram
ClearVram:
	//init vram		
	ldi r30,lo8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    4fce:	e0 e0       	ldi	r30, 0x00	; 0
	ldi r31,hi8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    4fd0:	f4 e0       	ldi	r31, 0x04	; 4

	ldi XL,lo8(vram)
    4fd2:	a0 e0       	ldi	r26, 0x00	; 0
	ldi XH,hi8(vram)
    4fd4:	b1 e0       	ldi	r27, 0x01	; 1

	ldi r22,RAM_TILES_COUNT
    4fd6:	6c e1       	ldi	r22, 0x1C	; 28

00004fd8 <fill_vram_loop>:

fill_vram_loop:
	st X+,r22
    4fd8:	6d 93       	st	X+, r22
	sbiw r30,1
    4fda:	31 97       	sbiw	r30, 0x01	; 1
	brne fill_vram_loop
    4fdc:	e9 f7       	brne	.-6      	; 0x4fd8 <fill_vram_loop>

	clr r1
    4fde:	11 24       	eor	r1, r1

	ret
    4fe0:	08 95       	ret

00004fe2 <SetTile>:
.section .text.SetTile
SetTile:
#if SCROLLING == 1
	;index formula is vram[((y>>3)*256)+8x+(y&7)]
	
	andi r24,0x1f
    4fe2:	8f 71       	andi	r24, 0x1F	; 31
	mov r23,r22
    4fe4:	76 2f       	mov	r23, r22
	lsr r22
    4fe6:	66 95       	lsr	r22
	lsr r22
    4fe8:	66 95       	lsr	r22
	lsr r22			;y>>3
    4fea:	66 95       	lsr	r22
	ldi r18,8		
    4fec:	28 e0       	ldi	r18, 0x08	; 8
	mul r24,r18		;x*8
    4fee:	82 9f       	mul	r24, r18
	movw XL,r0
    4ff0:	d0 01       	movw	r26, r0
	subi XL,lo8(-(vram))
    4ff2:	a0 50       	subi	r26, 0x00	; 0
	sbci XH,hi8(-(vram))
    4ff4:	bf 4f       	sbci	r27, 0xFF	; 255
	add XH,r22		;vram+((y>>3)*256)
    4ff6:	b6 0f       	add	r27, r22
	andi r23,7		;y&7	
    4ff8:	77 70       	andi	r23, 0x07	; 7
	add XL,r23
    4ffa:	a7 0f       	add	r26, r23
						
	subi r20,~(RAM_TILES_COUNT-1)	
    4ffc:	44 5e       	subi	r20, 0xE4	; 228
	st X,r20
    4ffe:	4c 93       	st	X, r20

	clr r1
    5000:	11 24       	eor	r1, r1

	ret
    5002:	08 95       	ret

00005004 <SetTileTable>:
; C-callable
; r25:r24=pointer to tiles data
;************************************
.section .text.SetTileTable
SetTileTable:
	sts tile_table_lo,r24
    5004:	80 93 96 0c 	sts	0x0C96, r24
	sts tile_table_hi,r25	
    5008:	90 93 97 0c 	sts	0x0C97, r25
	ret
    500c:	08 95       	ret

0000500e <GetVsyncFlag>:
;
; C-callable
;************************************
.section .text.GetVsyncFlag
GetVsyncFlag:
	lds r24,sync_flags
    500e:	80 91 a2 0c 	lds	r24, 0x0CA2
	andi r24,SYNC_FLAG_VSYNC
    5012:	81 70       	andi	r24, 0x01	; 1
	ret
    5014:	08 95       	ret

00005016 <ClearVsyncFlag>:
; 
; C-callable
;*****************************
.section .text.ClearVsyncFlag
ClearVsyncFlag:
	lds r18,sync_flags
    5016:	20 91 a2 0c 	lds	r18, 0x0CA2
	andi r18,~SYNC_FLAG_VSYNC
    501a:	2e 7f       	andi	r18, 0xFE	; 254
	sts sync_flags,r18
    501c:	20 93 a2 0c 	sts	0x0CA2, r18
	ret
    5020:	08 95       	ret

00005022 <ReadJoypad>:
; r24=joypad No (0 or 1)
; returns: (int) r25:r24
;*****************************
.section .text.ReadJoypad
ReadJoypad:	
	tst r24
    5022:	88 23       	and	r24, r24
	brne rj_p2
    5024:	29 f4       	brne	.+10     	; 0x5030 <rj_p2>
		
	lds r24,joypad1_status_lo
    5026:	80 91 a9 0c 	lds	r24, 0x0CA9
	lds r25,joypad1_status_lo+1
    502a:	90 91 aa 0c 	lds	r25, 0x0CAA
	ret
    502e:	08 95       	ret

00005030 <rj_p2>:
rj_p2:
	lds r24,joypad2_status_lo
    5030:	80 91 ad 0c 	lds	r24, 0x0CAD
	lds r25,joypad2_status_lo+1	
    5034:	90 91 ae 0c 	lds	r25, 0x0CAE

	ret
    5038:	08 95       	ret

0000503a <WaitUs>:
; r25:r24 - us to wait
; returns: void
;****************************
.section .text.WaitUs
WaitUs:	
	ldi r23,8
    503a:	78 e0       	ldi	r23, 0x08	; 8
	dec 23
    503c:	7a 95       	dec	r23
	brne .-4 ;~1 us
    503e:	f1 f7       	brne	.-4      	; 0x503c <WaitUs+0x2>
	nop
    5040:	00 00       	nop
	sbiw r24,1
    5042:	01 97       	sbiw	r24, 0x01	; 1
	brne WaitUs
    5044:	d1 f7       	brne	.-12     	; 0x503a <WaitUs>

	ret
    5046:	08 95       	ret

00005048 <WriteEeprom>:
;****************************

.section .text.WriteEeprom
WriteEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    5048:	f9 99       	sbic	0x1f, 1	; 31
   rjmp WriteEeprom
    504a:	fe cf       	rjmp	.-4      	; 0x5048 <WriteEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    504c:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    504e:	81 bd       	out	0x21, r24	; 33
   ; Write data (r22) to Data Register
   out _SFR_IO_ADDR(EEDR),r22
    5050:	60 bd       	out	0x20, r22	; 32
   cli
    5052:	f8 94       	cli
   ; Write logical one to EEMPE
   sbi _SFR_IO_ADDR(EECR),EEMPE
    5054:	fa 9a       	sbi	0x1f, 2	; 31
   ; Start eeprom write by setting EEPE
   sbi _SFR_IO_ADDR(EECR),EEPE
    5056:	f9 9a       	sbi	0x1f, 1	; 31
   sei
    5058:	78 94       	sei
   ret
    505a:	08 95       	ret

0000505c <ReadEeprom>:
; r24 - value read
;****************************
.section .text.ReadEeprom
ReadEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    505c:	f9 99       	sbic	0x1f, 1	; 31
   rjmp ReadEeprom
    505e:	fe cf       	rjmp	.-4      	; 0x505c <ReadEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    5060:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    5062:	81 bd       	out	0x21, r24	; 33
   ; Start eeprom read by writing EERE
   cli
    5064:	f8 94       	cli
   sbi _SFR_IO_ADDR(EECR),EERE
    5066:	f8 9a       	sbi	0x1f, 0	; 31
   ; Read data from Data Register
   in r24,_SFR_IO_ADDR(EEDR)
    5068:	80 b5       	in	r24, 0x20	; 32
   sei
    506a:	78 94       	sei
   ret
    506c:	08 95       	ret

0000506e <wdt_randomize>:
	.global wdt_randomize
	.section .text.wdt_randomize
	wdt_randomize:

		;set timer 1 full speed count to 0xffff
		ldi r24,0
    506e:	80 e0       	ldi	r24, 0x00	; 0
		sts sync_pulse,r24
    5070:	80 93 a1 0c 	sts	0x0CA1, r24


		sts _SFR_MEM_ADDR(TIMSK1),r24
    5074:	80 93 6f 00 	sts	0x006F, r24
		sts _SFR_MEM_ADDR(OCR1AL),r24
    5078:	80 93 88 00 	sts	0x0088, r24
		sts _SFR_MEM_ADDR(OCR1AH),r24
    507c:	80 93 89 00 	sts	0x0089, r24
		sts _SFR_MEM_ADDR(OCR1BL),r24
    5080:	80 93 8a 00 	sts	0x008A, r24
		sts _SFR_MEM_ADDR(OCR1BH),r24
    5084:	80 93 8b 00 	sts	0x008B, r24
		sts _SFR_MEM_ADDR(TCNT1H),r24
    5088:	80 93 85 00 	sts	0x0085, r24
		sts _SFR_MEM_ADDR(TCNT1L),r24
    508c:	80 93 84 00 	sts	0x0084, r24
		
		sts _SFR_MEM_ADDR(TCCR1A),r24	
    5090:	80 93 80 00 	sts	0x0080, r24
		ldi 24,(1<<CS10)
    5094:	81 e0       	ldi	r24, 0x01	; 1
		sts _SFR_MEM_ADDR(TCCR1B),r24
    5096:	80 93 81 00 	sts	0x0081, r24

		cli
    509a:	f8 94       	cli

		;enable watchdog at fastest speed and generate interrupts
		ldi r24,0
    509c:	80 e0       	ldi	r24, 0x00	; 0
		sts _SFR_MEM_ADDR(MCUSR),r24	
    509e:	80 93 54 00 	sts	0x0054, r24
		ldi r25,(1<<WDIE)+(1<<WDE)+(0<<WDP3)+(0<<WDP2)+(0<<WDP1)+(0<<WDP0)
    50a2:	98 e4       	ldi	r25, 0x48	; 72
		lds r24,_SFR_MEM_ADDR(WDTCSR)
    50a4:	80 91 60 00 	lds	r24, 0x0060
		ori r24,(1<<WDCE)+(1<<WDE)
    50a8:	88 61       	ori	r24, 0x18	; 24
		sts _SFR_MEM_ADDR(WDTCSR),r24
    50aa:	80 93 60 00 	sts	0x0060, r24
		sts _SFR_MEM_ADDR(WDTCSR),r25
    50ae:	90 93 60 00 	sts	0x0060, r25
	
		sei
    50b2:	78 94       	sei

000050b4 <wait>:

		;generate 8 random cycles
	wait:
		lds r24,sync_pulse ;using the yet unalocated "sync_pulse" as a temp variable
    50b4:	80 91 a1 0c 	lds	r24, 0x0CA1
		cpi r24,8
    50b8:	88 30       	cpi	r24, 0x08	; 8
		brlo wait
    50ba:	e0 f3       	brcs	.-8      	; 0x50b4 <wait>

		ret
    50bc:	08 95       	ret

000050be <__vector_8>:
	;*************************************
	; Watchdog timer interrupt
	;*************************************
	WDT_vect:
		;save flags & status register
		push r16
    50be:	0f 93       	push	r16
		push r17
    50c0:	1f 93       	push	r17

		in r16,_SFR_IO_ADDR(SREG)
    50c2:	0f b7       	in	r16, 0x3f	; 63
		push r16
    50c4:	0f 93       	push	r16

		lds r16,sync_pulse
    50c6:	00 91 a1 0c 	lds	r16, 0x0CA1
		inc r16
    50ca:	03 95       	inc	r16
		sts sync_pulse,r16
    50cc:	00 93 a1 0c 	sts	0x0CA1, r16

		;XOR succesive timer1 LSB into a int
		sbrc r16,0
    50d0:	00 fd       	sbrc	r16, 0
		rjmp 1f
    50d2:	08 c0       	rjmp	.+16     	; 0x50e4 <__vector_8+0x26>
		lds r17,random_value
    50d4:	10 91 b3 0c 	lds	r17, 0x0CB3
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    50d8:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    50dc:	10 27       	eor	r17, r16
		sts random_value,r17
    50de:	10 93 b3 0c 	sts	0x0CB3, r17
		rjmp 2f
    50e2:	07 c0       	rjmp	.+14     	; 0x50f2 <__vector_8+0x34>
	1:
		lds r17,random_value+1
    50e4:	10 91 b4 0c 	lds	r17, 0x0CB4
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    50e8:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    50ec:	10 27       	eor	r17, r16
		sts random_value+1,r17
    50ee:	10 93 b4 0c 	sts	0x0CB4, r17
	2:

		ldi r16,(1<<WDIE)+(1<<WDE)
    50f2:	08 e4       	ldi	r16, 0x48	; 72
		sts _SFR_MEM_ADDR(WDTCSR),r16
    50f4:	00 93 60 00 	sts	0x0060, r16

		;restore flags
		pop r16
    50f8:	0f 91       	pop	r16
		out _SFR_IO_ADDR(SREG),r16
    50fa:	0f bf       	out	0x3f, r16	; 63
	
		pop r17
    50fc:	1f 91       	pop	r17
		pop r16
    50fe:	0f 91       	pop	r16
		reti
    5100:	18 95       	reti

00005102 <SoftReset>:

/**
 * Performs a software reset
 */
void SoftReset(void){        
	wdt_enable(WDTO_15MS);  
    5102:	98 e0       	ldi	r25, 0x08	; 8
    5104:	88 e1       	ldi	r24, 0x18	; 24
    5106:	0f b6       	in	r0, 0x3f	; 63
    5108:	f8 94       	cli
    510a:	a8 95       	wdr
    510c:	80 93 60 00 	sts	0x0060, r24
    5110:	0f be       	out	0x3f, r0	; 63
    5112:	90 93 60 00 	sts	0x0060, r25
	while(1);
    5116:	ff cf       	rjmp	.-2      	; 0x5116 <SoftReset+0x14>

00005118 <ReadButtons>:
void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
	unsigned char i;

	//latch controllers
	JOYPAD_OUT_PORT|=_BV(JOYPAD_LATCH_PIN);
    5118:	12 9a       	sbi	0x02, 2	; 2
		}else{
			Wait200ns();
			Wait200ns();
		}	
	#else
		Wait200ns();
    511a:	c8 95       	lpm
    511c:	c8 95       	lpm
		Wait200ns();
    511e:	c8 95       	lpm
    5120:	c8 95       	lpm
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));
    5122:	12 98       	cbi	0x02, 2	; 2
    5124:	40 e1       	ldi	r20, 0x10	; 16
	DisplayLogo();
	
}

void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
    5126:	80 e0       	ldi	r24, 0x00	; 0
    5128:	90 e0       	ldi	r25, 0x00	; 0
    512a:	20 e0       	ldi	r18, 0x00	; 0
    512c:	30 e0       	ldi	r19, 0x00	; 0


	//read button states
	for(i=0;i<16;i++){

		p1ButtonsLo>>=1;
    512e:	36 95       	lsr	r19
    5130:	27 95       	ror	r18
		p2ButtonsLo>>=1;
    5132:	96 95       	lsr	r25
    5134:	87 95       	ror	r24
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    5136:	c8 95       	lpm
    5138:	c8 95       	lpm
			Wait200ns();
    513a:	c8 95       	lpm
    513c:	c8 95       	lpm
		#endif
			
		//pulse clock pin		
		JOYPAD_OUT_PORT&=~(_BV(JOYPAD_CLOCK_PIN));
    513e:	13 98       	cbi	0x02, 3	; 2
		
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) p1ButtonsLo|=(1<<15);
    5140:	00 9b       	sbis	0x00, 0	; 0
    5142:	30 68       	ori	r19, 0x80	; 128
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) p2ButtonsLo|=(1<<15);
    5144:	01 9b       	sbis	0x00, 1	; 0
    5146:	90 68       	ori	r25, 0x80	; 128
		
		JOYPAD_OUT_PORT|=_BV(JOYPAD_CLOCK_PIN);
    5148:	13 9a       	sbi	0x02, 3	; 2
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    514a:	c8 95       	lpm
    514c:	c8 95       	lpm
			Wait200ns();
    514e:	c8 95       	lpm
    5150:	c8 95       	lpm
    5152:	41 50       	subi	r20, 0x01	; 1
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));


	//read button states
	for(i=0;i<16;i++){
    5154:	61 f7       	brne	.-40     	; 0x512e <ReadButtons+0x16>
		#endif

	}

	#if JOYSTICK==TYPE_SNES
		joypad1_status_lo=p1ButtonsLo;
    5156:	30 93 aa 0c 	sts	0x0CAA, r19
    515a:	20 93 a9 0c 	sts	0x0CA9, r18
		joypad2_status_lo=p2ButtonsLo;
    515e:	90 93 ae 0c 	sts	0x0CAE, r25
    5162:	80 93 ad 0c 	sts	0x0CAD, r24
	#else
		joypad1_status_lo=p1ButtonsLo&0xff;
		joypad2_status_lo=p2ButtonsLo&0xff;	
	#endif

	if(joypad1_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B) || joypad2_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B)){
    5166:	80 91 a9 0c 	lds	r24, 0x0CA9
    516a:	90 91 aa 0c 	lds	r25, 0x0CAA
    516e:	0f 97       	sbiw	r24, 0x0f	; 15
    5170:	31 f0       	breq	.+12     	; 0x517e <ReadButtons+0x66>
    5172:	80 91 ad 0c 	lds	r24, 0x0CAD
    5176:	90 91 ae 0c 	lds	r25, 0x0CAE
    517a:	0f 97       	sbiw	r24, 0x0f	; 15
    517c:	11 f4       	brne	.+4      	; 0x5182 <ReadButtons+0x6a>
		SoftReset();
    517e:	0e 94 81 28 	call	0x5102	; 0x5102 <SoftReset>
    5182:	08 95       	ret

00005184 <ReadControllers>:
 * program when CONTROLLERS_VSYNC_READ==0.
*/
void ReadControllers(){

	//Detect if devices are connected.
	joypadsConnectionStatus=0;
    5184:	10 92 e3 0c 	sts	0x0CE3, r1
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) joypadsConnectionStatus|=1;
    5188:	00 99       	sbic	0x00, 0	; 0
    518a:	03 c0       	rjmp	.+6      	; 0x5192 <ReadControllers+0xe>
    518c:	81 e0       	ldi	r24, 0x01	; 1
    518e:	80 93 e3 0c 	sts	0x0CE3, r24
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) joypadsConnectionStatus|=2;
    5192:	01 99       	sbic	0x00, 1	; 0
    5194:	05 c0       	rjmp	.+10     	; 0x51a0 <ReadControllers+0x1c>
    5196:	80 91 e3 0c 	lds	r24, 0x0CE3
    519a:	82 60       	ori	r24, 0x02	; 2
    519c:	80 93 e3 0c 	sts	0x0CE3, r24
			
	//read the standard buttons
	ReadButtons();
    51a0:	0c 94 8c 28 	jmp	0x5118	; 0x5118 <ReadButtons>

000051a4 <FormatEeprom>:
	return resp;
}

	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {
    51a4:	cf 93       	push	r28
    51a6:	df 93       	push	r29
    51a8:	c0 e0       	ldi	r28, 0x00	; 0
    51aa:	d0 e0       	ldi	r29, 0x00	; 0
    51ac:	fe 01       	movw	r30, r28
    51ae:	e2 56       	subi	r30, 0x62	; 98
    51b0:	ff 4f       	sbci	r31, 0xFF	; 255

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
    51b2:	64 91       	lpm	r22, Z
    51b4:	ce 01       	movw	r24, r28
    51b6:	0e 94 24 28 	call	0x5048	; 0x5048 <WriteEeprom>
    51ba:	21 96       	adiw	r28, 0x01	; 1
	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
    51bc:	c0 32       	cpi	r28, 0x20	; 32
    51be:	d1 05       	cpc	r29, r1
    51c0:	a9 f7       	brne	.-22     	; 0x51ac <FormatEeprom+0x8>
    51c2:	c0 e2       	ldi	r28, 0x20	; 32
    51c4:	d0 e0       	ldi	r29, 0x00	; 0
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
    51c6:	6f ef       	ldi	r22, 0xFF	; 255
    51c8:	ce 01       	movw	r24, r28
    51ca:	0e 94 24 28 	call	0x5048	; 0x5048 <WriteEeprom>
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
    51ce:	6f ef       	ldi	r22, 0xFF	; 255
    51d0:	ce 01       	movw	r24, r28
    51d2:	01 96       	adiw	r24, 0x01	; 1
    51d4:	0e 94 24 28 	call	0x5048	; 0x5048 <WriteEeprom>
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
    51d8:	a0 96       	adiw	r28, 0x20	; 32
    51da:	c1 15       	cp	r28, r1
    51dc:	88 e0       	ldi	r24, 0x08	; 8
    51de:	d8 07       	cpc	r29, r24
    51e0:	91 f7       	brne	.-28     	; 0x51c6 <FormatEeprom+0x22>
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
   }
   
}
    51e2:	df 91       	pop	r29
    51e4:	cf 91       	pop	r28
    51e6:	08 95       	ret

000051e8 <isEepromFormatted>:
	  }
   }
}
	
//returns true if the EEPROM has been setup to work with the kernel.
bool isEepromFormatted(){
    51e8:	cf 93       	push	r28
	unsigned id;
	id=ReadEeprom(0)+(ReadEeprom(1)<<8);
    51ea:	80 e0       	ldi	r24, 0x00	; 0
    51ec:	90 e0       	ldi	r25, 0x00	; 0
    51ee:	0e 94 2e 28 	call	0x505c	; 0x505c <ReadEeprom>
    51f2:	c8 2f       	mov	r28, r24
    51f4:	81 e0       	ldi	r24, 0x01	; 1
    51f6:	90 e0       	ldi	r25, 0x00	; 0
    51f8:	0e 94 2e 28 	call	0x505c	; 0x505c <ReadEeprom>
    51fc:	28 2f       	mov	r18, r24
    51fe:	30 e0       	ldi	r19, 0x00	; 0
    5200:	32 2f       	mov	r19, r18
    5202:	22 27       	eor	r18, r18
    5204:	2c 0f       	add	r18, r28
    5206:	31 1d       	adc	r19, r1
	return (id==EEPROM_SIGNATURE);
    5208:	81 e0       	ldi	r24, 0x01	; 1
    520a:	2a 35       	cpi	r18, 0x5A	; 90
    520c:	35 45       	sbci	r19, 0x55	; 85
    520e:	09 f0       	breq	.+2      	; 0x5212 <isEepromFormatted+0x2a>
    5210:	80 e0       	ldi	r24, 0x00	; 0
}
    5212:	cf 91       	pop	r28
    5214:	08 95       	ret

00005216 <EepromBlockExists>:
 * @return
 *  0x00 = Success, Block exists.
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK.
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND.
 */
char EepromBlockExists(unsigned int blockId, u16* eepromAddr, u8* nextFreeBlockId){
    5216:	8f 92       	push	r8
    5218:	9f 92       	push	r9
    521a:	af 92       	push	r10
    521c:	bf 92       	push	r11
    521e:	cf 92       	push	r12
    5220:	df 92       	push	r13
    5222:	ef 92       	push	r14
    5224:	ff 92       	push	r15
    5226:	0f 93       	push	r16
    5228:	1f 93       	push	r17
    522a:	cf 93       	push	r28
    522c:	df 93       	push	r29
	u8 nextFreeBlock=0;
	u8 result=EEPROM_ERROR_BLOCK_NOT_FOUND;
	u16 id;
	*eepromAddr=0;
    522e:	fb 01       	movw	r30, r22
    5230:	11 82       	std	Z+1, r1	; 0x01
    5232:	10 82       	st	Z, r1

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    5234:	8f 3f       	cpi	r24, 0xFF	; 255
    5236:	ff ef       	ldi	r31, 0xFF	; 255
    5238:	9f 07       	cpc	r25, r31
    523a:	89 f1       	breq	.+98     	; 0x529e <EepromBlockExists+0x88>
    523c:	6a 01       	movw	r12, r20
    523e:	8b 01       	movw	r16, r22
    5240:	7c 01       	movw	r14, r24
    5242:	a1 2c       	mov	r10, r1
    5244:	b1 2c       	mov	r11, r1
    5246:	c0 e0       	ldi	r28, 0x00	; 0
    5248:	d3 e0       	ldi	r29, 0x03	; 3
    524a:	91 2c       	mov	r9, r1
		
	//scan all blocks and get the memory adress of that block and the next free block
	for(u8 i=0;i<EEPROM_MAX_BLOCKS;i++){
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
    524c:	c5 01       	movw	r24, r10
    524e:	0e 94 2e 28 	call	0x505c	; 0x505c <ReadEeprom>
    5252:	88 2e       	mov	r8, r24
    5254:	c5 01       	movw	r24, r10
    5256:	01 96       	adiw	r24, 0x01	; 1
    5258:	0e 94 2e 28 	call	0x505c	; 0x505c <ReadEeprom>
    525c:	28 2f       	mov	r18, r24
    525e:	30 e0       	ldi	r19, 0x00	; 0
    5260:	32 2f       	mov	r19, r18
    5262:	22 27       	eor	r18, r18
    5264:	28 0d       	add	r18, r8
    5266:	31 1d       	adc	r19, r1
		
		if(id==blockId){
    5268:	2e 15       	cp	r18, r14
    526a:	3f 05       	cpc	r19, r15
    526c:	29 f4       	brne	.+10     	; 0x5278 <EepromBlockExists+0x62>
			*eepromAddr=(i*EEPROM_BLOCK_SIZE);
    526e:	f8 01       	movw	r30, r16
    5270:	b1 82       	std	Z+1, r11	; 0x01
    5272:	a0 82       	st	Z, r10
			result=EEPROM_OK;
    5274:	d0 e0       	ldi	r29, 0x00	; 0
    5276:	0b c0       	rjmp	.+22     	; 0x528e <EepromBlockExists+0x78>
		}
		
		if(id==0xffff && nextFreeBlock==0){
    5278:	2f 3f       	cpi	r18, 0xFF	; 255
    527a:	3f 4f       	sbci	r19, 0xFF	; 255
    527c:	41 f4       	brne	.+16     	; 0x528e <EepromBlockExists+0x78>
    527e:	91 10       	cpse	r9, r1
    5280:	06 c0       	rjmp	.+12     	; 0x528e <EepromBlockExists+0x78>
			nextFreeBlock=i;
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
    5282:	c1 14       	cp	r12, r1
    5284:	d1 04       	cpc	r13, r1
    5286:	11 f0       	breq	.+4      	; 0x528c <EepromBlockExists+0x76>
    5288:	f6 01       	movw	r30, r12
    528a:	c0 83       	st	Z, r28
    528c:	9c 2e       	mov	r9, r28
	*eepromAddr=0;

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
		
	//scan all blocks and get the memory adress of that block and the next free block
	for(u8 i=0;i<EEPROM_MAX_BLOCKS;i++){
    528e:	cf 5f       	subi	r28, 0xFF	; 255
    5290:	f0 e2       	ldi	r31, 0x20	; 32
    5292:	af 0e       	add	r10, r31
    5294:	b1 1c       	adc	r11, r1
    5296:	c0 34       	cpi	r28, 0x40	; 64
    5298:	c9 f6       	brne	.-78     	; 0x524c <EepromBlockExists+0x36>
			nextFreeBlock=i;
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
		}
	}

	return result;
    529a:	8d 2f       	mov	r24, r29
    529c:	01 c0       	rjmp	.+2      	; 0x52a0 <EepromBlockExists+0x8a>
	u8 nextFreeBlock=0;
	u8 result=EEPROM_ERROR_BLOCK_NOT_FOUND;
	u16 id;
	*eepromAddr=0;

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    529e:	81 e0       	ldi	r24, 0x01	; 1
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
		}
	}

	return result;
}
    52a0:	df 91       	pop	r29
    52a2:	cf 91       	pop	r28
    52a4:	1f 91       	pop	r17
    52a6:	0f 91       	pop	r16
    52a8:	ff 90       	pop	r15
    52aa:	ef 90       	pop	r14
    52ac:	df 90       	pop	r13
    52ae:	cf 90       	pop	r12
    52b0:	bf 90       	pop	r11
    52b2:	af 90       	pop	r10
    52b4:	9f 90       	pop	r9
    52b6:	8f 90       	pop	r8
    52b8:	08 95       	ret

000052ba <EepromWriteBlock>:
 * Returns:
 *  0x00 = Success
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x02 = EEPROM_ERROR_FULL
 */
char EepromWriteBlock(struct EepromBlockStruct *block){
    52ba:	ef 92       	push	r14
    52bc:	ff 92       	push	r15
    52be:	0f 93       	push	r16
    52c0:	1f 93       	push	r17
    52c2:	cf 93       	push	r28
    52c4:	df 93       	push	r29
    52c6:	00 d0       	rcall	.+0      	; 0x52c8 <EepromWriteBlock+0xe>
    52c8:	1f 92       	push	r1
    52ca:	cd b7       	in	r28, 0x3d	; 61
    52cc:	de b7       	in	r29, 0x3e	; 62
    52ce:	8c 01       	movw	r16, r24
	u16 eepromAddr=0;
    52d0:	1a 82       	std	Y+2, r1	; 0x02
    52d2:	19 82       	std	Y+1, r1	; 0x01
	u8 *srcPtr=(unsigned char *)block,res,nextFreeBlock=0;
    52d4:	1b 82       	std	Y+3, r1	; 0x03

	res=EepromBlockExists(block->id,&eepromAddr,&nextFreeBlock);
    52d6:	ae 01       	movw	r20, r28
    52d8:	4d 5f       	subi	r20, 0xFD	; 253
    52da:	5f 4f       	sbci	r21, 0xFF	; 255
    52dc:	be 01       	movw	r22, r28
    52de:	6f 5f       	subi	r22, 0xFF	; 255
    52e0:	7f 4f       	sbci	r23, 0xFF	; 255
    52e2:	fc 01       	movw	r30, r24
    52e4:	80 81       	ld	r24, Z
    52e6:	91 81       	ldd	r25, Z+1	; 0x01
    52e8:	0e 94 0b 29 	call	0x5216	; 0x5216 <EepromBlockExists>
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;
    52ec:	88 23       	and	r24, r24
    52ee:	11 f0       	breq	.+4      	; 0x52f4 <EepromWriteBlock+0x3a>
    52f0:	83 30       	cpi	r24, 0x03	; 3
    52f2:	19 f5       	brne	.+70     	; 0x533a <EepromWriteBlock+0x80>

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    52f4:	89 81       	ldd	r24, Y+1	; 0x01
    52f6:	9a 81       	ldd	r25, Y+2	; 0x02
    52f8:	89 2b       	or	r24, r25
    52fa:	49 f4       	brne	.+18     	; 0x530e <EepromWriteBlock+0x54>
    52fc:	8b 81       	ldd	r24, Y+3	; 0x03
    52fe:	88 23       	and	r24, r24
    5300:	d9 f0       	breq	.+54     	; 0x5338 <EepromWriteBlock+0x7e>
	if(eepromAddr==0 && nextFreeBlock!=0) eepromAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;
    5302:	f0 e2       	ldi	r31, 0x20	; 32
    5304:	8f 9f       	mul	r24, r31
    5306:	c0 01       	movw	r24, r0
    5308:	11 24       	eor	r1, r1
    530a:	9a 83       	std	Y+2, r25	; 0x02
    530c:	89 83       	std	Y+1, r24	; 0x01
    530e:	78 01       	movw	r14, r16
    5310:	20 e2       	ldi	r18, 0x20	; 32
    5312:	e2 0e       	add	r14, r18
    5314:	f1 1c       	adc	r15, r1

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
		WriteEeprom(eepromAddr++,*srcPtr);
    5316:	f8 01       	movw	r30, r16
    5318:	61 91       	ld	r22, Z+
    531a:	8f 01       	movw	r16, r30
    531c:	89 81       	ldd	r24, Y+1	; 0x01
    531e:	9a 81       	ldd	r25, Y+2	; 0x02
    5320:	9c 01       	movw	r18, r24
    5322:	2f 5f       	subi	r18, 0xFF	; 255
    5324:	3f 4f       	sbci	r19, 0xFF	; 255
    5326:	3a 83       	std	Y+2, r19	; 0x02
    5328:	29 83       	std	Y+1, r18	; 0x01
    532a:	0e 94 24 28 	call	0x5048	; 0x5048 <WriteEeprom>
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(eepromAddr==0 && nextFreeBlock!=0) eepromAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
    532e:	0e 15       	cp	r16, r14
    5330:	1f 05       	cpc	r17, r15
    5332:	89 f7       	brne	.-30     	; 0x5316 <EepromWriteBlock+0x5c>
		WriteEeprom(eepromAddr++,*srcPtr);
		srcPtr++;	
	}
	
	return 0;
    5334:	80 e0       	ldi	r24, 0x00	; 0
    5336:	01 c0       	rjmp	.+2      	; 0x533a <EepromWriteBlock+0x80>
	u8 *srcPtr=(unsigned char *)block,res,nextFreeBlock=0;

	res=EepromBlockExists(block->id,&eepromAddr,&nextFreeBlock);
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    5338:	82 e0       	ldi	r24, 0x02	; 2
		WriteEeprom(eepromAddr++,*srcPtr);
		srcPtr++;	
	}
	
	return 0;
}
    533a:	0f 90       	pop	r0
    533c:	0f 90       	pop	r0
    533e:	0f 90       	pop	r0
    5340:	df 91       	pop	r29
    5342:	cf 91       	pop	r28
    5344:	1f 91       	pop	r17
    5346:	0f 91       	pop	r16
    5348:	ff 90       	pop	r15
    534a:	ef 90       	pop	r14
    534c:	08 95       	ret

0000534e <PatchCommand00>:
/*
 * Command 00: Set envelope speed per frame +127/-128, 0=no enveloppe
 * Param:
 */
void PatchCommand00(Track* track, char param){
	track->envelopeStep=param;
    534e:	fc 01       	movw	r30, r24
    5350:	67 87       	std	Z+15, r22	; 0x0f
    5352:	08 95       	ret

00005354 <PatchCommand01>:
 * Param:
 */
void PatchCommand01(Track* track, char param){
	(void)track; //to remove unused warning
	#if MIXER_CHAN4_TYPE == 0
		mixer.channels.type.noise.barrel=0x0101;
    5354:	e8 eb       	ldi	r30, 0xB8	; 184
    5356:	fc e0       	ldi	r31, 0x0C	; 12
    5358:	81 e0       	ldi	r24, 0x01	; 1
    535a:	91 e0       	ldi	r25, 0x01	; 1
    535c:	95 8b       	std	Z+21, r25	; 0x15
    535e:	84 8b       	std	Z+20, r24	; 0x14
		mixer.channels.type.noise.params=param;
    5360:	63 8b       	std	Z+19, r22	; 0x13
    5362:	08 95       	ret

00005364 <PatchCommand05>:
}
/*
 * Command 05: End of note/fx
 * Param:
 */
void PatchCommand05(Track* track, char param){
    5364:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags&=~(TRACK_FLAGS_PLAYING+TRACK_FLAGS_PRIORITY);	//patchPlaying=false,priority=0	
    5366:	90 81       	ld	r25, Z
    5368:	9f 75       	andi	r25, 0x5F	; 95
    536a:	90 83       	st	Z, r25
    536c:	08 95       	ret

0000536e <PatchCommand06>:

/*
 * Command 06: Note hold
 * Param:
 */
void PatchCommand06(Track* track, char param){
    536e:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags|=TRACK_FLAGS_HOLD_ENV; //patchEnvelopeHold=true;
    5370:	90 81       	ld	r25, Z
    5372:	90 64       	ori	r25, 0x40	; 64
    5374:	90 83       	st	Z, r25
    5376:	08 95       	ret

00005378 <PatchCommand07>:
 * Command 07: Set envelope volume
 * Param:
 */

void PatchCommand07(Track* track, char param){
	track->envelopeVol=param;
    5378:	fc 01       	movw	r30, r24
    537a:	66 87       	std	Z+14, r22	; 0x0e
    537c:	08 95       	ret

0000537e <PatchCommand09>:
 * Command 09: Set tremolo level
 * Param:
*/

void PatchCommand09(Track* track, char param){
	track->tremoloLevel=param;
    537e:	fc 01       	movw	r30, r24
    5380:	62 87       	std	Z+10, r22	; 0x0a
    5382:	08 95       	ret

00005384 <PatchCommand10>:
/*
 * Command 10: Set tremolo rate
 * Param:
*/
void PatchCommand10(Track* track, char param){
	track->tremoloRate=param;
    5384:	fc 01       	movw	r30, r24
    5386:	63 87       	std	Z+11, r22	; 0x0b
    5388:	08 95       	ret

0000538a <PatchCommand11>:
/*
 * Command 11: Pitch slide (linear) 
 * Param: (+/-) half steps to slide to
*/

void PatchCommand11(Track* track, char param){
    538a:	cf 93       	push	r28
    538c:	df 93       	push	r29
    538e:	ec 01       	movw	r28, r24
    5390:	46 2f       	mov	r20, r22
	//slide to note from current note
	s16 currentStep,targetStep,delta;	
	
	currentStep=pgm_read_word(&(steptable[track->note]));
    5392:	29 81       	ldd	r18, Y+1	; 0x01
    5394:	30 e0       	ldi	r19, 0x00	; 0
    5396:	f9 01       	movw	r30, r18
    5398:	ee 0f       	add	r30, r30
    539a:	ff 1f       	adc	r31, r31
    539c:	e8 5f       	subi	r30, 0xF8	; 248
    539e:	f2 4a       	sbci	r31, 0xA2	; 162
    53a0:	65 91       	lpm	r22, Z+
    53a2:	74 91       	lpm	r23, Z
	targetStep=pgm_read_word(&(steptable[track->note+param]));	
    53a4:	f9 01       	movw	r30, r18
    53a6:	e4 0f       	add	r30, r20
    53a8:	f1 1d       	adc	r31, r1
    53aa:	47 fd       	sbrc	r20, 7
    53ac:	fa 95       	dec	r31
    53ae:	ee 0f       	add	r30, r30
    53b0:	ff 1f       	adc	r31, r31
    53b2:	e8 5f       	subi	r30, 0xF8	; 248
    53b4:	f2 4a       	sbci	r31, 0xA2	; 162
    53b6:	85 91       	lpm	r24, Z+
    53b8:	94 91       	lpm	r25, Z
	delta=((targetStep-currentStep)/track->slideSpeed);
    53ba:	86 1b       	sub	r24, r22
    53bc:	97 0b       	sbc	r25, r23
    53be:	68 85       	ldd	r22, Y+8	; 0x08
    53c0:	70 e0       	ldi	r23, 0x00	; 0
    53c2:	0e 94 f3 4b 	call	0x97e6	; 0x97e6 <__divmodhi4>
	if(delta==0)delta++;
    53c6:	61 15       	cp	r22, r1
    53c8:	71 05       	cpc	r23, r1
    53ca:	11 f4       	brne	.+4      	; 0x53d0 <PatchCommand11+0x46>
    53cc:	61 e0       	ldi	r22, 0x01	; 1
    53ce:	70 e0       	ldi	r23, 0x00	; 0

	mixer.channels.all[track->channel].step+=delta;
    53d0:	ea 81       	ldd	r30, Y+2	; 0x02
    53d2:	86 e0       	ldi	r24, 0x06	; 6
    53d4:	e8 9f       	mul	r30, r24
    53d6:	f0 01       	movw	r30, r0
    53d8:	11 24       	eor	r1, r1
    53da:	e8 54       	subi	r30, 0x48	; 72
    53dc:	f3 4f       	sbci	r31, 0xF3	; 243
    53de:	81 81       	ldd	r24, Z+1	; 0x01
    53e0:	92 81       	ldd	r25, Z+2	; 0x02
    53e2:	86 0f       	add	r24, r22
    53e4:	97 1f       	adc	r25, r23
    53e6:	92 83       	std	Z+2, r25	; 0x02
    53e8:	81 83       	std	Z+1, r24	; 0x01
	
	track->slideStep=delta;
    53ea:	7e 83       	std	Y+6, r23	; 0x06
    53ec:	6d 83       	std	Y+5, r22	; 0x05
	track->flags|=TRACK_FLAGS_SLIDING;
    53ee:	88 81       	ld	r24, Y
    53f0:	88 60       	ori	r24, 0x08	; 8
    53f2:	88 83       	st	Y, r24
	track->slideNote=track->note+param;
    53f4:	89 81       	ldd	r24, Y+1	; 0x01
    53f6:	48 0f       	add	r20, r24
    53f8:	4f 83       	std	Y+7, r20	; 0x07
}
    53fa:	df 91       	pop	r29
    53fc:	cf 91       	pop	r28
    53fe:	08 95       	ret

00005400 <PatchCommand12>:
/*
 * Command 12: Pitch slide speed 
 * Param: slide speed (fixed 4:4)
 */
void PatchCommand12(Track* track, char param){
	track->slideSpeed=param;
    5400:	fc 01       	movw	r30, r24
    5402:	60 87       	std	Z+8, r22	; 0x08
    5404:	08 95       	ret

00005406 <PatchCommand13>:
 *  Command 13: Loop start
 * Description: Defines the start of a loop. Works in conjunction with command 14 (PC_LOOP_END).
 *		 Param: loop count
 */
void PatchCommand13(Track* track, char param){
	track->loopCount=(u8)param;
    5406:	fc 01       	movw	r30, r24
    5408:	64 83       	std	Z+4, r22	; 0x04
    540a:	08 95       	ret

0000540c <PatchCommand02>:
/*
 * Command 02: Set wave
 * Param:
 */
void PatchCommand02(Track* track, char param){
	SetMixerWave(track->channel,param);
    540c:	fc 01       	movw	r30, r24
    540e:	82 81       	ldd	r24, Z+2	; 0x02
    5410:	0c 94 21 2e 	jmp	0x5c42	; 0x5c42 <SetMixerWave>

00005414 <PatchCommand03>:
}
/*
 * Command 03: Note up * param
 * Param:
 */
void PatchCommand03(Track* track, char param){
    5414:	fc 01       	movw	r30, r24
	track->note+=param;
    5416:	91 81       	ldd	r25, Z+1	; 0x01
    5418:	69 0f       	add	r22, r25
    541a:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(track->channel,track->note);
    541c:	82 81       	ldd	r24, Z+2	; 0x02
    541e:	0c 94 0a 2e 	jmp	0x5c14	; 0x5c14 <SetMixerNote>

00005422 <PatchCommand04>:
}
/*
 * Command 04: Note down * param
 * Param:
 */
void PatchCommand04(Track* track, char param){
    5422:	fc 01       	movw	r30, r24
	track->note-=param;
    5424:	91 81       	ldd	r25, Z+1	; 0x01
    5426:	96 1b       	sub	r25, r22
    5428:	69 2f       	mov	r22, r25
    542a:	91 83       	std	Z+1, r25	; 0x01
	SetMixerNote(track->channel,track->note);
    542c:	82 81       	ldd	r24, Z+2	; 0x02
    542e:	0c 94 0a 2e 	jmp	0x5c14	; 0x5c14 <SetMixerNote>

00005432 <PatchCommand08>:
/*
 * Command 08: Set Note/Pitch
 * Param:
 */

void PatchCommand08(Track* track, char param){
    5432:	1f 93       	push	r17
    5434:	cf 93       	push	r28
    5436:	df 93       	push	r29
    5438:	ec 01       	movw	r28, r24
    543a:	16 2f       	mov	r17, r22
	SetMixerNote(track->channel,param);
    543c:	8a 81       	ldd	r24, Y+2	; 0x02
    543e:	0e 94 0a 2e 	call	0x5c14	; 0x5c14 <SetMixerNote>
	track->note=param;
    5442:	19 83       	std	Y+1, r17	; 0x01
	track->flags &= ~(TRACK_FLAGS_SLIDING);	
    5444:	88 81       	ld	r24, Y
    5446:	87 7f       	andi	r24, 0xF7	; 247
    5448:	88 83       	st	Y, r24
}
    544a:	df 91       	pop	r29
    544c:	cf 91       	pop	r28
    544e:	1f 91       	pop	r17
    5450:	08 95       	ret

00005452 <PatchCommand14>:
 *					1,PC_NOTE_DOWN,3,
 *					0,PC_LOOP_END,2,
 *					0,PATCH_END  
 *				};
 */
void PatchCommand14(Track* track, char param){
    5452:	dc 01       	movw	r26, r24
	if(track->loopCount>0){
    5454:	14 96       	adiw	r26, 0x04	; 4
    5456:	8c 91       	ld	r24, X
    5458:	14 97       	sbiw	r26, 0x04	; 4
    545a:	88 23       	and	r24, r24
    545c:	19 f1       	breq	.+70     	; 0x54a4 <PatchCommand14+0x52>
    545e:	55 96       	adiw	r26, 0x15	; 21
    5460:	2d 91       	ld	r18, X+
    5462:	3c 91       	ld	r19, X
    5464:	56 97       	sbiw	r26, 0x16	; 22
		//track->patchCommandStreamPos=track->loopStart;
		if(param!=0){
    5466:	66 23       	and	r22, r22
    5468:	79 f0       	breq	.+30     	; 0x5488 <PatchCommand14+0x36>
			track->patchCommandStreamPos-=((param+1)*3);
    546a:	77 27       	eor	r23, r23
    546c:	67 fd       	sbrc	r22, 7
    546e:	70 95       	com	r23
    5470:	6f 5f       	subi	r22, 0xFF	; 255
    5472:	7f 4f       	sbci	r23, 0xFF	; 255
    5474:	ab 01       	movw	r20, r22
    5476:	44 0f       	add	r20, r20
    5478:	55 1f       	adc	r21, r21
    547a:	64 0f       	add	r22, r20
    547c:	75 1f       	adc	r23, r21
    547e:	26 1b       	sub	r18, r22
    5480:	37 0b       	sbc	r19, r23
    5482:	09 c0       	rjmp	.+18     	; 0x5496 <PatchCommand14+0x44>
			while(1){
				track->patchCommandStreamPos-=3;
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    5484:	ef 3f       	cpi	r30, 0xFF	; 255
    5486:	39 f0       	breq	.+14     	; 0x5496 <PatchCommand14+0x44>
		if(param!=0){
			track->patchCommandStreamPos-=((param+1)*3);
		}else{
			u8 command;
			while(1){
				track->patchCommandStreamPos-=3;
    5488:	23 50       	subi	r18, 0x03	; 3
    548a:	31 09       	sbc	r19, r1
    548c:	f9 01       	movw	r30, r18
    548e:	32 97       	sbiw	r30, 0x02	; 2
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
    5490:	e4 91       	lpm	r30, Z
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    5492:	ed 30       	cpi	r30, 0x0D	; 13
    5494:	b9 f7       	brne	.-18     	; 0x5484 <PatchCommand14+0x32>
    5496:	56 96       	adiw	r26, 0x16	; 22
    5498:	3c 93       	st	X, r19
    549a:	2e 93       	st	-X, r18
    549c:	55 97       	sbiw	r26, 0x15	; 21
			}
		}
		track->loopCount--;
    549e:	81 50       	subi	r24, 0x01	; 1
    54a0:	14 96       	adiw	r26, 0x04	; 4
    54a2:	8c 93       	st	X, r24
    54a4:	08 95       	ret

000054a6 <InitMusicPlayer>:

const Patch *patchPointers;

void InitMusicPlayer(const Patch *patchPointersParam){

	patchPointers=patchPointersParam;
    54a6:	90 93 5c 0d 	sts	0x0D5C, r25
    54aa:	80 93 5b 0d 	sts	0x0D5B, r24

	masterVolume=DEFAULT_MASTER_VOL;
    54ae:	8f e6       	ldi	r24, 0x6F	; 111
    54b0:	80 93 5e 0d 	sts	0x0D5E, r24
#if MIDI_IN == ENABLED
	InitUartRxBuffer();
	lastMidiInStatus=0;
#endif

	playSong=false;
    54b4:	10 92 b6 0c 	sts	0x0CB6, r1
    54b8:	e6 ef       	ldi	r30, 0xF6	; 246
    54ba:	fc e0       	ldi	r31, 0x0C	; 12

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    54bc:	80 e0       	ldi	r24, 0x00	; 0
		tracks[t].channel=t;
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    54be:	90 e1       	ldi	r25, 0x10	; 16
		tracks[t].noteVol=0;
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    54c0:	3f ef       	ldi	r19, 0xFF	; 255
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
    54c2:	28 e1       	ldi	r18, 0x18	; 24
    54c4:	df 01       	movw	r26, r30
    54c6:	1e 97       	sbiw	r26, 0x0e	; 14

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].channel=t;
    54c8:	8c 93       	st	X, r24
    54ca:	12 97       	sbiw	r26, 0x02	; 2
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    54cc:	9c 93       	st	X, r25
    54ce:	1d 96       	adiw	r26, 0x0d	; 13
		tracks[t].noteVol=0;
    54d0:	1c 92       	st	X, r1
    54d2:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    54d4:	3c 93       	st	X, r19
		tracks[t].patchNo=DEFAULT_PATCH;
    54d6:	10 82       	st	Z, r1
    54d8:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].tremoloRate=24; //~6hz
    54da:	2c 93       	st	X, r18
    54dc:	13 97       	sbiw	r26, 0x03	; 3
		tracks[t].slideSpeed=0x10;
    54de:	9c 93       	st	X, r25
#endif

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    54e0:	8f 5f       	subi	r24, 0xFF	; 255
    54e2:	77 96       	adiw	r30, 0x17	; 23
    54e4:	85 30       	cpi	r24, 0x05	; 5
    54e6:	71 f7       	brne	.-36     	; 0x54c4 <InitMusicPlayer+0x1e>
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
		tracks[t].slideSpeed=0x10;
	}

}
    54e8:	08 95       	ret

000054ea <StartSong>:

#if MUSIC_ENGINE == MIDI

	void StartSong(const char *song){
    54ea:	e6 ee       	ldi	r30, 0xE6	; 230
    54ec:	fc e0       	ldi	r31, 0x0C	; 12
		for(unsigned char t=0;t<CHANNELS;t++){
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    54ee:	3f ef       	ldi	r19, 0xFF	; 255

#if MUSIC_ENGINE == MIDI

	void StartSong(const char *song){
		for(unsigned char t=0;t<CHANNELS;t++){
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    54f0:	20 81       	ld	r18, Z
    54f2:	2f 77       	andi	r18, 0x7F	; 127
    54f4:	20 83       	st	Z, r18
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    54f6:	33 83       	std	Z+3, r19	; 0x03
    54f8:	77 96       	adiw	r30, 0x17	; 23
}

#if MUSIC_ENGINE == MIDI

	void StartSong(const char *song){
		for(unsigned char t=0;t<CHANNELS;t++){
    54fa:	2d e0       	ldi	r18, 0x0D	; 13
    54fc:	e9 35       	cpi	r30, 0x59	; 89
    54fe:	f2 07       	cpc	r31, r18
    5500:	b9 f7       	brne	.-18     	; 0x54f0 <StartSong+0x6>
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
		}

		songPos=song+1; //skip first delta-time
    5502:	01 96       	adiw	r24, 0x01	; 1
    5504:	90 93 63 0d 	sts	0x0D63, r25
    5508:	80 93 62 0d 	sts	0x0D62, r24
		songStart=song+1;//skip first delta-time
    550c:	90 93 e5 0c 	sts	0x0CE5, r25
    5510:	80 93 e4 0c 	sts	0x0CE4, r24
		loopStart=song+1;
    5514:	90 93 65 0d 	sts	0x0D65, r25
    5518:	80 93 64 0d 	sts	0x0D64, r24
		nextDeltaTime=0;
    551c:	10 92 60 0d 	sts	0x0D60, r1
    5520:	10 92 5f 0d 	sts	0x0D5F, r1
		currDeltaTime=0;
    5524:	10 92 5a 0d 	sts	0x0D5A, r1
    5528:	10 92 59 0d 	sts	0x0D59, r1
		songSpeed=0;
    552c:	10 92 61 0d 	sts	0x0D61, r1

		lastStatus=0;
    5530:	10 92 5d 0d 	sts	0x0D5D, r1
		playSong=true;
    5534:	81 e0       	ldi	r24, 0x01	; 1
    5536:	80 93 b6 0c 	sts	0x0CB6, r24
    553a:	08 95       	ret

0000553c <StopSong>:


void StopSong(){

	for(u8 i=0;i<CHANNELS;i++){
		tracks[i].envelopeStep=-6;
    553c:	e6 ee       	ldi	r30, 0xE6	; 230
    553e:	fc e0       	ldi	r31, 0x0C	; 12
    5540:	8a ef       	ldi	r24, 0xFA	; 250
    5542:	87 87       	std	Z+15, r24	; 0x0f
    5544:	86 a3       	std	Z+38, r24	; 0x26
    5546:	80 93 23 0d 	sts	0x0D23, r24
    554a:	80 93 3a 0d 	sts	0x0D3A, r24
    554e:	80 93 51 0d 	sts	0x0D51, r24
	}

	playSong=false;
    5552:	10 92 b6 0c 	sts	0x0CB6, r1
    5556:	08 95       	ret

00005558 <ReadVarLen>:
}



unsigned int ReadVarLen(const char **songPos)
{
    5558:	dc 01       	movw	r26, r24
    unsigned int value;
    unsigned char c;


    if ( (value = pgm_read_byte((*songPos)++)) & 0x80 )
    555a:	ed 91       	ld	r30, X+
    555c:	fc 91       	ld	r31, X
    555e:	11 97       	sbiw	r26, 0x01	; 1
    5560:	9f 01       	movw	r18, r30
    5562:	2f 5f       	subi	r18, 0xFF	; 255
    5564:	3f 4f       	sbci	r19, 0xFF	; 255
    5566:	11 96       	adiw	r26, 0x01	; 1
    5568:	3c 93       	st	X, r19
    556a:	2e 93       	st	-X, r18
    556c:	e4 91       	lpm	r30, Z
    556e:	e7 fd       	sbrc	r30, 7
    5570:	03 c0       	rjmp	.+6      	; 0x5578 <ReadVarLen+0x20>
    5572:	8e 2f       	mov	r24, r30
    5574:	90 e0       	ldi	r25, 0x00	; 0
    5576:	08 95       	ret
    {
       value &= 0x7F;
    5578:	ef 77       	andi	r30, 0x7F	; 127
    557a:	8e 2f       	mov	r24, r30
    557c:	90 e0       	ldi	r25, 0x00	; 0
       do
       {
         value = (value << 7) + ((c = pgm_read_byte((*songPos)++)) & 0x7F);
    557e:	96 95       	lsr	r25
    5580:	98 2f       	mov	r25, r24
    5582:	88 27       	eor	r24, r24
    5584:	97 95       	ror	r25
    5586:	87 95       	ror	r24
    5588:	2f 5f       	subi	r18, 0xFF	; 255
    558a:	3f 4f       	sbci	r19, 0xFF	; 255
    558c:	f9 01       	movw	r30, r18
    558e:	31 97       	sbiw	r30, 0x01	; 1
    5590:	e4 91       	lpm	r30, Z
    5592:	4e 2f       	mov	r20, r30
    5594:	4f 77       	andi	r20, 0x7F	; 127
    5596:	84 0f       	add	r24, r20
    5598:	91 1d       	adc	r25, r1
       } while (c & 0x80);
    559a:	e7 fd       	sbrc	r30, 7
    559c:	f0 cf       	rjmp	.-32     	; 0x557e <ReadVarLen+0x26>
    559e:	2d 93       	st	X+, r18
    55a0:	3c 93       	st	X, r19
    }


    return value;
}
    55a2:	08 95       	ret

000055a4 <TriggerCommon>:




void TriggerCommon(Track* track,u8 patch,u8 volume,u8 note){
    55a4:	ef 92       	push	r14
    55a6:	ff 92       	push	r15
    55a8:	0f 93       	push	r16
    55aa:	1f 93       	push	r17
    55ac:	cf 93       	push	r28
    55ae:	df 93       	push	r29
    55b0:	1f 92       	push	r1
    55b2:	cd b7       	in	r28, 0x3d	; 61
    55b4:	de b7       	in	r29, 0x3e	; 62
    55b6:	7c 01       	movw	r14, r24
    55b8:	16 2f       	mov	r17, r22
		
	bool isFx = (track->flags&TRACK_FLAGS_PRIORITY);
    55ba:	fc 01       	movw	r30, r24
    55bc:	80 81       	ld	r24, Z
    55be:	08 2f       	mov	r16, r24
    55c0:	00 1f       	adc	r16, r16
    55c2:	00 27       	eor	r16, r16
    55c4:	00 1f       	adc	r16, r16

	track->envelopeStep=0; 
    55c6:	17 86       	std	Z+15, r1	; 0x0f
	track->envelopeVol=0xff; 
    55c8:	9f ef       	ldi	r25, 0xFF	; 255
    55ca:	96 87       	std	Z+14, r25	; 0x0e
	track->noteVol=volume;
    55cc:	45 87       	std	Z+13, r20	; 0x0d
	track->patchPlayingTime=0;
    55ce:	14 8a       	std	Z+20, r1	; 0x14
	track->flags&=(~(TRACK_FLAGS_HOLD_ENV|TRACK_FLAGS_SLIDING));
    55d0:	87 7b       	andi	r24, 0xB7	; 183
    55d2:	80 83       	st	Z, r24
	track->tremoloLevel=0;
    55d4:	12 86       	std	Z+10, r1	; 0x0a
	track->tremoloPos=0;
    55d6:	11 86       	std	Z+9, r1	; 0x09
	track->note=note;
    55d8:	21 83       	std	Z+1, r18	; 0x01
	track->loopCount=0;
    55da:	14 82       	std	Z+4, r1	; 0x04

#if MUSIC_ENGINE == MIDI
	track->expressionVol=DEFAULT_EXPRESSION_VOL;
    55dc:	93 83       	std	Z+3, r25	; 0x03
#endif

	#if SOUND_MIXER == MIXER_TYPE_INLINE

		if(track->channel==3){
    55de:	82 81       	ldd	r24, Z+2	; 0x02
    55e0:	83 30       	cpi	r24, 0x03	; 3
    55e2:	69 f4       	brne	.+26     	; 0x55fe <TriggerCommon+0x5a>
			//noise channel		
			if(!isFx) patch=note;			
    55e4:	01 11       	cpse	r16, r1
    55e6:	01 c0       	rjmp	.+2      	; 0x55ea <TriggerCommon+0x46>
    55e8:	12 2f       	mov	r17, r18
			mixer.channels.type.noise.barrel=0x0101;				
    55ea:	81 e0       	ldi	r24, 0x01	; 1
    55ec:	91 e0       	ldi	r25, 0x01	; 1
    55ee:	90 93 cd 0c 	sts	0x0CCD, r25
    55f2:	80 93 cc 0c 	sts	0x0CCC, r24
			mixer.channels.type.noise.params=1; //default (15bits,no divider)
    55f6:	81 e0       	ldi	r24, 0x01	; 1
    55f8:	80 93 cb 0c 	sts	0x0CCB, r24
    55fc:	39 c0       	rjmp	.+114    	; 0x5670 <TriggerCommon+0xcc>

		#if SOUND_CHANNEL_5_ENABLE==1		

		}else if(track->channel==4){
    55fe:	84 30       	cpi	r24, 0x04	; 4
    5600:	69 f5       	brne	.+90     	; 0x565c <TriggerCommon+0xb8>
				//PCM channel					
				mixer.channels.type.pcm.positionFrac=0;
    5602:	10 92 d3 0c 	sts	0x0CD3, r1
				const char *pos=(const char*)pgm_read_word(&(patchPointers[patch].pcmData));
    5606:	80 91 5b 0d 	lds	r24, 0x0D5B
    560a:	90 91 5c 0d 	lds	r25, 0x0D5C
    560e:	f9 e0       	ldi	r31, 0x09	; 9
    5610:	6f 9f       	mul	r22, r31
    5612:	80 0d       	add	r24, r0
    5614:	91 1d       	adc	r25, r1
    5616:	11 24       	eor	r1, r1
    5618:	fc 01       	movw	r30, r24
    561a:	31 96       	adiw	r30, 0x01	; 1
    561c:	a5 91       	lpm	r26, Z+
    561e:	b4 91       	lpm	r27, Z
				mixer.channels.type.pcm.position=pos;				
    5620:	b0 93 d5 0c 	sts	0x0CD5, r27
    5624:	a0 93 d4 0c 	sts	0x0CD4, r26
				mixer.pcmLoopLenght=pgm_read_word(&(patchPointers[patch].loopEnd))-pgm_read_word(&(patchPointers[patch].loopStart));
    5628:	ac 01       	movw	r20, r24
    562a:	49 5f       	subi	r20, 0xF9	; 249
    562c:	5f 4f       	sbci	r21, 0xFF	; 255
    562e:	fa 01       	movw	r30, r20
    5630:	65 91       	lpm	r22, Z+
    5632:	74 91       	lpm	r23, Z
    5634:	05 96       	adiw	r24, 0x05	; 5
    5636:	fc 01       	movw	r30, r24
    5638:	85 91       	lpm	r24, Z+
    563a:	94 91       	lpm	r25, Z
    563c:	68 1b       	sub	r22, r24
    563e:	79 0b       	sbc	r23, r25
    5640:	70 93 d7 0c 	sts	0x0CD7, r23
    5644:	60 93 d6 0c 	sts	0x0CD6, r22
				mixer.pcmLoopEnd=pos+pgm_read_word(&(patchPointers[patch].loopEnd));
    5648:	fa 01       	movw	r30, r20
    564a:	85 91       	lpm	r24, Z+
    564c:	94 91       	lpm	r25, Z
    564e:	a8 0f       	add	r26, r24
    5650:	b9 1f       	adc	r27, r25
    5652:	b0 93 d9 0c 	sts	0x0CD9, r27
    5656:	a0 93 d8 0c 	sts	0x0CD8, r26
    565a:	05 c0       	rjmp	.+10     	; 0x5666 <TriggerCommon+0xc2>
				SetMixerNote(track->channel,note);
		#endif	

		}else{					
			//wave channels					
			SetMixerWave(track->channel,0);//default wave
    565c:	60 e0       	ldi	r22, 0x00	; 0
    565e:	29 83       	std	Y+1, r18	; 0x01
    5660:	0e 94 21 2e 	call	0x5c42	; 0x5c42 <SetMixerWave>
			SetMixerNote(track->channel,note);
    5664:	29 81       	ldd	r18, Y+1	; 0x01
    5666:	62 2f       	mov	r22, r18
    5668:	f7 01       	movw	r30, r14
    566a:	82 81       	ldd	r24, Z+2	; 0x02
    566c:	0e 94 0a 2e 	call	0x5c14	; 0x5c14 <SetMixerNote>
		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
		track->fxPatchNo=patch;
    5670:	f7 01       	movw	r30, r14

		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
    5672:	00 23       	and	r16, r16
    5674:	11 f0       	breq	.+4      	; 0x567a <TriggerCommon+0xd6>
		track->fxPatchNo=patch;
    5676:	11 8b       	std	Z+17, r17	; 0x11
    5678:	01 c0       	rjmp	.+2      	; 0x567c <TriggerCommon+0xd8>
	}else{
		track->patchNo=patch;	
    567a:	10 8b       	std	Z+16, r17	; 0x10
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
    567c:	e0 91 5b 0d 	lds	r30, 0x0D5B
    5680:	f0 91 5c 0d 	lds	r31, 0x0D5C
    5684:	39 e0       	ldi	r19, 0x09	; 9
    5686:	13 9f       	mul	r17, r19
    5688:	e0 0d       	add	r30, r0
    568a:	f1 1d       	adc	r31, r1
    568c:	11 24       	eor	r1, r1
    568e:	33 96       	adiw	r30, 0x03	; 3
    5690:	85 91       	lpm	r24, Z+
    5692:	94 91       	lpm	r25, Z
	if(pos==NULL){
		track->patchCommandStreamPos=NULL;
    5694:	f7 01       	movw	r30, r14
	}else{
		track->patchNo=patch;	
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
	if(pos==NULL){
    5696:	00 97       	sbiw	r24, 0x00	; 0
    5698:	19 f4       	brne	.+6      	; 0x56a0 <TriggerCommon+0xfc>
		track->patchCommandStreamPos=NULL;
    569a:	16 8a       	std	Z+22, r1	; 0x16
    569c:	15 8a       	std	Z+21, r1	; 0x15
    569e:	08 c0       	rjmp	.+16     	; 0x56b0 <TriggerCommon+0x10c>
	}else{
		track->patchCurrDeltaTime=0;
    56a0:	13 8a       	std	Z+19, r1	; 0x13
		track->patchNextDeltaTime=pgm_read_byte(pos++);
    56a2:	fc 01       	movw	r30, r24
    56a4:	24 91       	lpm	r18, Z
    56a6:	f7 01       	movw	r30, r14
    56a8:	22 8b       	std	Z+18, r18	; 0x12
    56aa:	01 96       	adiw	r24, 0x01	; 1
		track->patchCommandStreamPos=pos;
    56ac:	96 8b       	std	Z+22, r25	; 0x16
    56ae:	85 8b       	std	Z+21, r24	; 0x15
	}

}
    56b0:	0f 90       	pop	r0
    56b2:	df 91       	pop	r29
    56b4:	cf 91       	pop	r28
    56b6:	1f 91       	pop	r17
    56b8:	0f 91       	pop	r16
    56ba:	ff 90       	pop	r15
    56bc:	ef 90       	pop	r14
    56be:	08 95       	ret

000056c0 <TriggerFx>:

/* Trigger a sound effect.
 * Method allocates the channel based on priority.
 * Retrig: if this fx if already playing on a track, reuse same track.
 */
void TriggerFx(unsigned char patch,unsigned char volume,bool retrig){
    56c0:	cf 93       	push	r28
    56c2:	df 93       	push	r29
	unsigned char channel;
	
	unsigned char type=(unsigned char)pgm_read_byte(&(patchPointers[patch].type));
    56c4:	e0 91 5b 0d 	lds	r30, 0x0D5B
    56c8:	f0 91 5c 0d 	lds	r31, 0x0D5C
    56cc:	99 e0       	ldi	r25, 0x09	; 9
    56ce:	89 9f       	mul	r24, r25
    56d0:	e0 0d       	add	r30, r0
    56d2:	f1 1d       	adc	r31, r1
    56d4:	11 24       	eor	r1, r1
    56d6:	e4 91       	lpm	r30, Z

	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
    56d8:	e1 30       	cpi	r30, 0x01	; 1
    56da:	e9 f0       	breq	.+58     	; 0x5716 <TriggerFx+0x56>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
    56dc:	e2 30       	cpi	r30, 0x02	; 2
    56de:	e9 f0       	breq	.+58     	; 0x571a <TriggerFx+0x5a>
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
    56e0:	20 91 fd 0c 	lds	r18, 0x0CFD
    56e4:	27 ff       	sbrs	r18, 7
    56e6:	1d c0       	rjmp	.+58     	; 0x5722 <TriggerFx+0x62>
    56e8:	20 91 0e 0d 	lds	r18, 0x0D0E
    56ec:	28 13       	cpse	r18, r24
    56ee:	02 c0       	rjmp	.+4      	; 0x56f4 <TriggerFx+0x34>
    56f0:	41 11       	cpse	r20, r1
    56f2:	17 c0       	rjmp	.+46     	; 0x5722 <TriggerFx+0x62>
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
    56f4:	20 91 14 0d 	lds	r18, 0x0D14
    56f8:	27 ff       	sbrs	r18, 7
    56fa:	11 c0       	rjmp	.+34     	; 0x571e <TriggerFx+0x5e>
    56fc:	20 91 25 0d 	lds	r18, 0x0D25
    5700:	28 13       	cpse	r18, r24
    5702:	02 c0       	rjmp	.+4      	; 0x5708 <TriggerFx+0x48>
    5704:	41 11       	cpse	r20, r1
    5706:	0b c0       	rjmp	.+22     	; 0x571e <TriggerFx+0x5e>
		channel=2;
	}else{
		//both channels have fx playing, use the oldest one
		if(tracks[1].patchPlayingTime>tracks[2].patchPlayingTime){
    5708:	20 91 11 0d 	lds	r18, 0x0D11
    570c:	90 91 28 0d 	lds	r25, 0x0D28
    5710:	92 17       	cp	r25, r18
    5712:	28 f4       	brcc	.+10     	; 0x571e <TriggerFx+0x5e>
    5714:	06 c0       	rjmp	.+12     	; 0x5722 <TriggerFx+0x62>
	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
		//noise or PCM channel fx		
		channel=3;
    5716:	c3 e0       	ldi	r28, 0x03	; 3
    5718:	05 c0       	rjmp	.+10     	; 0x5724 <TriggerFx+0x64>
	}else if(type==2){
		channel=4;
    571a:	c4 e0       	ldi	r28, 0x04	; 4
    571c:	03 c0       	rjmp	.+6      	; 0x5724 <TriggerFx+0x64>
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
		channel=2;
    571e:	c2 e0       	ldi	r28, 0x02	; 2
    5720:	01 c0       	rjmp	.+2      	; 0x5724 <TriggerFx+0x64>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
    5722:	c1 e0       	ldi	r28, 0x01	; 1
			channel=2;
		}
	}				

	Track* track=&tracks[channel];
	track->flags=TRACK_FLAGS_PRIORITY; //priority=1;
    5724:	97 e1       	ldi	r25, 0x17	; 23
    5726:	c9 9f       	mul	r28, r25
    5728:	e0 01       	movw	r28, r0
    572a:	11 24       	eor	r1, r1
    572c:	ca 51       	subi	r28, 0x1A	; 26
    572e:	d3 4f       	sbci	r29, 0xF3	; 243
    5730:	90 e8       	ldi	r25, 0x80	; 128
    5732:	98 83       	st	Y, r25
	track->patchCommandStreamPos = NULL;
    5734:	1e 8a       	std	Y+22, r1	; 0x16
    5736:	1d 8a       	std	Y+21, r1	; 0x15
	TriggerCommon(track,patch,volume,80);
    5738:	20 e5       	ldi	r18, 0x50	; 80
    573a:	46 2f       	mov	r20, r22
    573c:	68 2f       	mov	r22, r24
    573e:	ce 01       	movw	r24, r28
    5740:	0e 94 d2 2a 	call	0x55a4	; 0x55a4 <TriggerCommon>
	track->flags|=TRACK_FLAGS_PLAYING;
    5744:	88 81       	ld	r24, Y
    5746:	80 62       	ori	r24, 0x20	; 32
    5748:	88 83       	st	Y, r24
}
    574a:	df 91       	pop	r29
    574c:	cf 91       	pop	r28
    574e:	08 95       	ret

00005750 <TriggerNote>:


void TriggerNote(unsigned char channel,unsigned char patch,unsigned char note,unsigned char volume){
    5750:	cf 93       	push	r28
    5752:	df 93       	push	r29
	Track* track=&tracks[channel];

	//allow only other music notes 
	if((track->flags&TRACK_FLAGS_PLAYING)==0 || (track->flags&TRACK_FLAGS_PRIORITY)==0){
    5754:	a8 2f       	mov	r26, r24
    5756:	b0 e0       	ldi	r27, 0x00	; 0
    5758:	97 e1       	ldi	r25, 0x17	; 23
    575a:	89 9f       	mul	r24, r25
    575c:	f0 01       	movw	r30, r0
    575e:	11 24       	eor	r1, r1
    5760:	ea 51       	subi	r30, 0x1A	; 26
    5762:	f3 4f       	sbci	r31, 0xF3	; 243
    5764:	80 81       	ld	r24, Z
    5766:	85 ff       	sbrs	r24, 5
    5768:	02 c0       	rjmp	.+4      	; 0x576e <TriggerNote+0x1e>
    576a:	87 fd       	sbrc	r24, 7
    576c:	2e c0       	rjmp	.+92     	; 0x57ca <TriggerNote+0x7a>
			
		if(volume==0){ //note-off received
    576e:	21 11       	cpse	r18, r1
    5770:	18 c0       	rjmp	.+48     	; 0x57a2 <TriggerNote+0x52>

			
			//cut note if there's no envelope & no note hold
			if(track->envelopeStep==0 && !(track->flags&TRACK_FLAGS_HOLD_ENV)){
    5772:	97 e1       	ldi	r25, 0x17	; 23
    5774:	9a 9f       	mul	r25, r26
    5776:	f0 01       	movw	r30, r0
    5778:	9b 9f       	mul	r25, r27
    577a:	f0 0d       	add	r31, r0
    577c:	11 24       	eor	r1, r1
    577e:	ea 51       	subi	r30, 0x1A	; 26
    5780:	f3 4f       	sbci	r31, 0xF3	; 243
    5782:	97 85       	ldd	r25, Z+15	; 0x0f
    5784:	91 11       	cpse	r25, r1
    5786:	02 c0       	rjmp	.+4      	; 0x578c <TriggerNote+0x3c>
    5788:	86 ff       	sbrs	r24, 6
				track->noteVol=0;
    578a:	15 86       	std	Z+13, r1	; 0x0d
			}

			track->flags&=(~TRACK_FLAGS_HOLD_ENV);//patchEnvelopeHold=false;
    578c:	97 e1       	ldi	r25, 0x17	; 23
    578e:	9a 9f       	mul	r25, r26
    5790:	f0 01       	movw	r30, r0
    5792:	9b 9f       	mul	r25, r27
    5794:	f0 0d       	add	r31, r0
    5796:	11 24       	eor	r1, r1
    5798:	ea 51       	subi	r30, 0x1A	; 26
    579a:	f3 4f       	sbci	r31, 0xF3	; 243
    579c:	8f 7b       	andi	r24, 0xBF	; 191
    579e:	80 83       	st	Z, r24
    57a0:	14 c0       	rjmp	.+40     	; 0x57ca <TriggerNote+0x7a>
    57a2:	82 2f       	mov	r24, r18
    57a4:	24 2f       	mov	r18, r20
		}else{
		
			track->flags=0;//&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    57a6:	97 e1       	ldi	r25, 0x17	; 23
    57a8:	9a 9f       	mul	r25, r26
    57aa:	e0 01       	movw	r28, r0
    57ac:	9b 9f       	mul	r25, r27
    57ae:	d0 0d       	add	r29, r0
    57b0:	11 24       	eor	r1, r1
    57b2:	ca 51       	subi	r28, 0x1A	; 26
    57b4:	d3 4f       	sbci	r29, 0xF3	; 243
    57b6:	18 82       	st	Y, r1
			track->patchCommandStreamPos = NULL;
    57b8:	1e 8a       	std	Y+22, r1	; 0x16
    57ba:	1d 8a       	std	Y+21, r1	; 0x15
			TriggerCommon(track,patch,volume,note);
    57bc:	48 2f       	mov	r20, r24
    57be:	ce 01       	movw	r24, r28
    57c0:	0e 94 d2 2a 	call	0x55a4	; 0x55a4 <TriggerCommon>
			track->flags|=TRACK_FLAGS_PLAYING;
    57c4:	88 81       	ld	r24, Y
    57c6:	80 62       	ori	r24, 0x20	; 32
    57c8:	88 83       	st	Y, r24
		}

	}
}
    57ca:	df 91       	pop	r29
    57cc:	cf 91       	pop	r28
    57ce:	08 95       	ret

000057d0 <ProcessMusic>:
	}

#endif


void ProcessMusic(void){
    57d0:	6f 92       	push	r6
    57d2:	7f 92       	push	r7
    57d4:	8f 92       	push	r8
    57d6:	9f 92       	push	r9
    57d8:	af 92       	push	r10
    57da:	bf 92       	push	r11
    57dc:	cf 92       	push	r12
    57de:	df 92       	push	r13
    57e0:	ef 92       	push	r14
    57e2:	ff 92       	push	r15
    57e4:	0f 93       	push	r16
    57e6:	1f 93       	push	r17
    57e8:	cf 93       	push	r28
    57ea:	df 93       	push	r29
    57ec:	c6 ee       	ldi	r28, 0xE6	; 230
    57ee:	dc e0       	ldi	r29, 0x0C	; 12
    57f0:	08 eb       	ldi	r16, 0xB8	; 184
    57f2:	1c e0       	ldi	r17, 0x0C	; 12
    57f4:	d8 01       	movw	r26, r16
    57f6:	9e 01       	movw	r18, r28
    57f8:	40 e0       	ldi	r20, 0x00	; 0
    57fa:	50 e0       	ldi	r21, 0x00	; 0
    57fc:	ca 01       	movw	r24, r20
    57fe:	8a 51       	subi	r24, 0x1A	; 26
    5800:	93 4f       	sbci	r25, 0xF3	; 243
    5802:	6c 01       	movw	r12, r24
	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//update envelope
		if(track->envelopeStep!=0){
    5804:	fc 01       	movw	r30, r24
    5806:	87 85       	ldd	r24, Z+15	; 0x0f
    5808:	88 23       	and	r24, r24
    580a:	91 f0       	breq	.+36     	; 0x5830 <ProcessMusic+0x60>
			vol=track->envelopeVol+track->envelopeStep;		
    580c:	66 85       	ldd	r22, Z+14	; 0x0e
    580e:	99 27       	eor	r25, r25
    5810:	87 fd       	sbrc	r24, 7
    5812:	90 95       	com	r25
    5814:	86 0f       	add	r24, r22
    5816:	91 1d       	adc	r25, r1
    5818:	8f 3f       	cpi	r24, 0xFF	; 255
    581a:	91 05       	cpc	r25, r1
    581c:	19 f0       	breq	.+6      	; 0x5824 <ProcessMusic+0x54>
    581e:	14 f0       	brlt	.+4      	; 0x5824 <ProcessMusic+0x54>
    5820:	8f ef       	ldi	r24, 0xFF	; 255
    5822:	90 e0       	ldi	r25, 0x00	; 0
    5824:	97 ff       	sbrs	r25, 7
    5826:	02 c0       	rjmp	.+4      	; 0x582c <ProcessMusic+0x5c>
    5828:	80 e0       	ldi	r24, 0x00	; 0
    582a:	90 e0       	ldi	r25, 0x00	; 0
			if(vol<0){
				vol=0;			
			}else if(vol>0xff){
				vol=0xff;						
			}
			track->envelopeVol=vol;
    582c:	f6 01       	movw	r30, r12
    582e:	86 87       	std	Z+14, r24	; 0x0e
		}

		//if volumes reaches zero and no more patch command, explicitly end playing on track
		//if(vol==0 && track->patchCommandStreamPos==NULL) track->flags&=~(TRACK_FLAGS_PLAYING);

		if(track->flags & TRACK_FLAGS_SLIDING){
    5830:	f9 01       	movw	r30, r18
    5832:	f0 80       	ld	r15, Z
    5834:	f3 fe       	sbrs	r15, 3
    5836:	2a c0       	rjmp	.+84     	; 0x588c <ProcessMusic+0xbc>

			mixer.channels.all[trackNo].step+=track->slideStep;
    5838:	65 81       	ldd	r22, Z+5	; 0x05
    583a:	76 81       	ldd	r23, Z+6	; 0x06
    583c:	11 96       	adiw	r26, 0x01	; 1
    583e:	8d 91       	ld	r24, X+
    5840:	9c 91       	ld	r25, X
    5842:	12 97       	sbiw	r26, 0x02	; 2
    5844:	86 0f       	add	r24, r22
    5846:	97 1f       	adc	r25, r23
    5848:	12 96       	adiw	r26, 0x02	; 2
    584a:	9c 93       	st	X, r25
    584c:	8e 93       	st	-X, r24
    584e:	11 97       	sbiw	r26, 0x01	; 1
			u16 tStep=pgm_read_word(&(steptable[track->slideNote]));
    5850:	f6 01       	movw	r30, r12
    5852:	e7 80       	ldd	r14, Z+7	; 0x07
    5854:	ee 2d       	mov	r30, r14
    5856:	f0 e0       	ldi	r31, 0x00	; 0
    5858:	ee 0f       	add	r30, r30
    585a:	ff 1f       	adc	r31, r31
    585c:	e8 5f       	subi	r30, 0xF8	; 248
    585e:	f2 4a       	sbci	r31, 0xA2	; 162
    5860:	c5 90       	lpm	r12, Z+
    5862:	d4 90       	lpm	r13, Z

			if((track->slideStep>0 && mixer.channels.all[trackNo].step>=tStep) || 
    5864:	16 16       	cp	r1, r22
    5866:	17 06       	cpc	r1, r23
    5868:	24 f4       	brge	.+8      	; 0x5872 <ProcessMusic+0xa2>
    586a:	8c 15       	cp	r24, r12
    586c:	9d 05       	cpc	r25, r13
    586e:	30 f4       	brcc	.+12     	; 0x587c <ProcessMusic+0xac>
    5870:	0d c0       	rjmp	.+26     	; 0x588c <ProcessMusic+0xbc>
    5872:	67 2b       	or	r22, r23
    5874:	59 f0       	breq	.+22     	; 0x588c <ProcessMusic+0xbc>
				(track->slideStep<0 && mixer.channels.all[trackNo].step<=tStep))
    5876:	c8 16       	cp	r12, r24
    5878:	d9 06       	cpc	r13, r25
    587a:	40 f0       	brcs	.+16     	; 0x588c <ProcessMusic+0xbc>
			{					
				mixer.channels.all[trackNo].step = tStep;					
    587c:	12 96       	adiw	r26, 0x02	; 2
    587e:	dc 92       	st	X, r13
    5880:	ce 92       	st	-X, r12
    5882:	11 97       	sbiw	r26, 0x01	; 1
				track->flags &= ~(TRACK_FLAGS_SLIDING);	
    5884:	8f 2d       	mov	r24, r15
    5886:	87 7f       	andi	r24, 0xF7	; 247
    5888:	f9 01       	movw	r30, r18
    588a:	80 83       	st	Z, r24
    588c:	49 5e       	subi	r20, 0xE9	; 233
    588e:	5f 4f       	sbci	r21, 0xFF	; 255
    5890:	29 5e       	subi	r18, 0xE9	; 233
    5892:	3f 4f       	sbci	r19, 0xFF	; 255
    5894:	16 96       	adiw	r26, 0x06	; 6
	u8 channel;
	Track* track;


	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    5896:	43 37       	cpi	r20, 0x73	; 115
    5898:	51 05       	cpc	r21, r1
    589a:	09 f0       	breq	.+2      	; 0x589e <ProcessMusic+0xce>
    589c:	af cf       	rjmp	.-162    	; 0x57fc <ProcessMusic+0x2c>
	}



	//Process song MIDI notes
	if(playSong){
    589e:	80 91 b6 0c 	lds	r24, 0x0CB6
    58a2:	88 23       	and	r24, r24
    58a4:	09 f4       	brne	.+2      	; 0x58a8 <ProcessMusic+0xd8>
    58a6:	cc c0       	rjmp	.+408    	; 0x5a40 <ProcessMusic+0x270>
							}else if(c1==CONTROLER_EXPRESSION){
								tracks[channel].expressionVol=c2<<1;
							}else if(c1==CONTROLER_TREMOLO){
								tracks[channel].tremoloLevel=c2<<1;
							}else if(c1==CONTROLER_TREMOLO_RATE){
								tracks[channel].tremoloRate=c2<<1;
    58a8:	57 e1       	ldi	r21, 0x17	; 23
    58aa:	f5 2e       	mov	r15, r21
	if(playSong){
	
		#if MUSIC_ENGINE == MIDI
			
			//process all simultaneous events
			while(currDeltaTime==nextDeltaTime){
    58ac:	80 91 59 0d 	lds	r24, 0x0D59
    58b0:	90 91 5a 0d 	lds	r25, 0x0D5A
    58b4:	20 91 5f 0d 	lds	r18, 0x0D5F
    58b8:	30 91 60 0d 	lds	r19, 0x0D60
    58bc:	82 17       	cp	r24, r18
    58be:	93 07       	cpc	r25, r19
    58c0:	09 f0       	breq	.+2      	; 0x58c4 <ProcessMusic+0xf4>
    58c2:	b9 c0       	rjmp	.+370    	; 0x5a36 <ProcessMusic+0x266>

				c1=pgm_read_byte(songPos++);
    58c4:	20 91 62 0d 	lds	r18, 0x0D62
    58c8:	30 91 63 0d 	lds	r19, 0x0D63
    58cc:	b9 01       	movw	r22, r18
    58ce:	6f 5f       	subi	r22, 0xFF	; 255
    58d0:	7f 4f       	sbci	r23, 0xFF	; 255
    58d2:	70 93 63 0d 	sts	0x0D63, r23
    58d6:	60 93 62 0d 	sts	0x0D62, r22
    58da:	f9 01       	movw	r30, r18
    58dc:	44 91       	lpm	r20, Z
			
				if(c1==0xff){
    58de:	4f 3f       	cpi	r20, 0xFF	; 255
    58e0:	79 f5       	brne	.+94     	; 0x5940 <ProcessMusic+0x170>
					//META data type event
					c1=pgm_read_byte(songPos++);
    58e2:	a9 01       	movw	r20, r18
    58e4:	4e 5f       	subi	r20, 0xFE	; 254
    58e6:	5f 4f       	sbci	r21, 0xFF	; 255
    58e8:	50 93 63 0d 	sts	0x0D63, r21
    58ec:	40 93 62 0d 	sts	0x0D62, r20
    58f0:	fb 01       	movw	r30, r22
    58f2:	64 91       	lpm	r22, Z

				
					if(c1==0x2f){ //end of song
    58f4:	6f 32       	cpi	r22, 0x2F	; 47
    58f6:	19 f4       	brne	.+6      	; 0x58fe <ProcessMusic+0x12e>
						playSong=false;
    58f8:	10 92 b6 0c 	sts	0x0CB6, r1
						break;	
    58fc:	9c c0       	rjmp	.+312    	; 0x5a36 <ProcessMusic+0x266>
					}else if(c1==0x6){ //marker
    58fe:	66 30       	cpi	r22, 0x06	; 6
    5900:	09 f0       	breq	.+2      	; 0x5904 <ProcessMusic+0x134>
    5902:	8c c0       	rjmp	.+280    	; 0x5a1c <ProcessMusic+0x24c>
						c1=pgm_read_byte(songPos++); //read len
    5904:	fa 01       	movw	r30, r20
    5906:	44 91       	lpm	r20, Z
						c2=pgm_read_byte(songPos++); //read data
    5908:	c9 01       	movw	r24, r18
    590a:	04 96       	adiw	r24, 0x04	; 4
    590c:	90 93 63 0d 	sts	0x0D63, r25
    5910:	80 93 62 0d 	sts	0x0D62, r24
				
					if(c1==0x2f){ //end of song
						playSong=false;
						break;	
					}else if(c1==0x6){ //marker
						c1=pgm_read_byte(songPos++); //read len
    5914:	f9 01       	movw	r30, r18
    5916:	33 96       	adiw	r30, 0x03	; 3
						c2=pgm_read_byte(songPos++); //read data
    5918:	e4 91       	lpm	r30, Z
						if(c2=='S'){ //loop start
    591a:	e3 35       	cpi	r30, 0x53	; 83
    591c:	29 f4       	brne	.+10     	; 0x5928 <ProcessMusic+0x158>
							loopStart=songPos;
    591e:	90 93 65 0d 	sts	0x0D65, r25
    5922:	80 93 64 0d 	sts	0x0D64, r24
    5926:	7a c0       	rjmp	.+244    	; 0x5a1c <ProcessMusic+0x24c>
						}else if(c2=='E'){//loop end
    5928:	e5 34       	cpi	r30, 0x45	; 69
    592a:	09 f0       	breq	.+2      	; 0x592e <ProcessMusic+0x15e>
    592c:	77 c0       	rjmp	.+238    	; 0x5a1c <ProcessMusic+0x24c>
							songPos=loopStart;
    592e:	80 91 64 0d 	lds	r24, 0x0D64
    5932:	90 91 65 0d 	lds	r25, 0x0D65
    5936:	90 93 63 0d 	sts	0x0D63, r25
    593a:	80 93 62 0d 	sts	0x0D62, r24
    593e:	6e c0       	rjmp	.+220    	; 0x5a1c <ProcessMusic+0x24c>
					}
				

				}else{

					if(c1&0x80) lastStatus=c1;					
    5940:	47 fd       	sbrc	r20, 7
    5942:	40 93 5d 0d 	sts	0x0D5D, r20
					channel=lastStatus&0x0f;
    5946:	90 91 5d 0d 	lds	r25, 0x0D5D
    594a:	89 2f       	mov	r24, r25
    594c:	8f 70       	andi	r24, 0x0F	; 15
				
					//get next data byte
					//Note: maybe we should not advance the cursor
					//in case we receive an unsupported command				
					if(c1&0x80) c1=pgm_read_byte(songPos++); 
    594e:	47 ff       	sbrs	r20, 7
    5950:	08 c0       	rjmp	.+16     	; 0x5962 <ProcessMusic+0x192>
    5952:	2e 5f       	subi	r18, 0xFE	; 254
    5954:	3f 4f       	sbci	r19, 0xFF	; 255
    5956:	30 93 63 0d 	sts	0x0D63, r19
    595a:	20 93 62 0d 	sts	0x0D62, r18
    595e:	fb 01       	movw	r30, r22
    5960:	44 91       	lpm	r20, Z

					switch(lastStatus&0xf0){
    5962:	90 7f       	andi	r25, 0xF0	; 240
    5964:	90 3b       	cpi	r25, 0xB0	; 176
    5966:	e1 f0       	breq	.+56     	; 0x59a0 <ProcessMusic+0x1d0>
    5968:	90 3c       	cpi	r25, 0xC0	; 192
    596a:	09 f4       	brne	.+2      	; 0x596e <ProcessMusic+0x19e>
    596c:	51 c0       	rjmp	.+162    	; 0x5a10 <ProcessMusic+0x240>
    596e:	90 39       	cpi	r25, 0x90	; 144
    5970:	09 f0       	breq	.+2      	; 0x5974 <ProcessMusic+0x1a4>
    5972:	54 c0       	rjmp	.+168    	; 0x5a1c <ProcessMusic+0x24c>

						//note-on
						case 0x90:
							//c1 = note						
							c2=pgm_read_byte(songPos++)<<1; //get volume
    5974:	e0 91 62 0d 	lds	r30, 0x0D62
    5978:	f0 91 63 0d 	lds	r31, 0x0D63
    597c:	9f 01       	movw	r18, r30
    597e:	2f 5f       	subi	r18, 0xFF	; 255
    5980:	3f 4f       	sbci	r19, 0xFF	; 255
    5982:	30 93 63 0d 	sts	0x0D63, r19
    5986:	20 93 62 0d 	sts	0x0D62, r18
    598a:	24 91       	lpm	r18, Z
    598c:	22 0f       	add	r18, r18
						
							if(tracks[channel].flags|TRACK_FLAGS_ALLOCATED){ //allocated==true
								TriggerNote(channel,tracks[channel].patchNo,c1,c2);
    598e:	f8 9e       	mul	r15, r24
    5990:	f0 01       	movw	r30, r0
    5992:	11 24       	eor	r1, r1
    5994:	ea 51       	subi	r30, 0x1A	; 26
    5996:	f3 4f       	sbci	r31, 0xF3	; 243
    5998:	60 89       	ldd	r22, Z+16	; 0x10
    599a:	0e 94 a8 2b 	call	0x5750	; 0x5750 <TriggerNote>
    599e:	3e c0       	rjmp	.+124    	; 0x5a1c <ProcessMusic+0x24c>
							break;

						//controllers
						case 0xb0:
							///c1 = controller #
							c2=pgm_read_byte(songPos++); //get controller value
    59a0:	e0 91 62 0d 	lds	r30, 0x0D62
    59a4:	f0 91 63 0d 	lds	r31, 0x0D63
    59a8:	9f 01       	movw	r18, r30
    59aa:	2f 5f       	subi	r18, 0xFF	; 255
    59ac:	3f 4f       	sbci	r19, 0xFF	; 255
    59ae:	30 93 63 0d 	sts	0x0D63, r19
    59b2:	20 93 62 0d 	sts	0x0D62, r18
    59b6:	e4 91       	lpm	r30, Z
						
							if(c1==CONTROLER_VOL){
    59b8:	47 30       	cpi	r20, 0x07	; 7
    59ba:	49 f4       	brne	.+18     	; 0x59ce <ProcessMusic+0x1fe>
								tracks[channel].trackVol=c2<<1;
    59bc:	f8 9e       	mul	r15, r24
    59be:	d0 01       	movw	r26, r0
    59c0:	11 24       	eor	r1, r1
    59c2:	aa 51       	subi	r26, 0x1A	; 26
    59c4:	b3 4f       	sbci	r27, 0xF3	; 243
    59c6:	ee 0f       	add	r30, r30
    59c8:	1c 96       	adiw	r26, 0x0c	; 12
    59ca:	ec 93       	st	X, r30
    59cc:	27 c0       	rjmp	.+78     	; 0x5a1c <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_EXPRESSION){
    59ce:	4b 30       	cpi	r20, 0x0B	; 11
    59d0:	49 f4       	brne	.+18     	; 0x59e4 <ProcessMusic+0x214>
								tracks[channel].expressionVol=c2<<1;
    59d2:	f8 9e       	mul	r15, r24
    59d4:	d0 01       	movw	r26, r0
    59d6:	11 24       	eor	r1, r1
    59d8:	aa 51       	subi	r26, 0x1A	; 26
    59da:	b3 4f       	sbci	r27, 0xF3	; 243
    59dc:	ee 0f       	add	r30, r30
    59de:	13 96       	adiw	r26, 0x03	; 3
    59e0:	ec 93       	st	X, r30
    59e2:	1c c0       	rjmp	.+56     	; 0x5a1c <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO){
    59e4:	4c 35       	cpi	r20, 0x5C	; 92
    59e6:	49 f4       	brne	.+18     	; 0x59fa <ProcessMusic+0x22a>
								tracks[channel].tremoloLevel=c2<<1;
    59e8:	f8 9e       	mul	r15, r24
    59ea:	d0 01       	movw	r26, r0
    59ec:	11 24       	eor	r1, r1
    59ee:	aa 51       	subi	r26, 0x1A	; 26
    59f0:	b3 4f       	sbci	r27, 0xF3	; 243
    59f2:	ee 0f       	add	r30, r30
    59f4:	1a 96       	adiw	r26, 0x0a	; 10
    59f6:	ec 93       	st	X, r30
    59f8:	11 c0       	rjmp	.+34     	; 0x5a1c <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO_RATE){
    59fa:	44 36       	cpi	r20, 0x64	; 100
    59fc:	79 f4       	brne	.+30     	; 0x5a1c <ProcessMusic+0x24c>
								tracks[channel].tremoloRate=c2<<1;
    59fe:	f8 9e       	mul	r15, r24
    5a00:	d0 01       	movw	r26, r0
    5a02:	11 24       	eor	r1, r1
    5a04:	aa 51       	subi	r26, 0x1A	; 26
    5a06:	b3 4f       	sbci	r27, 0xF3	; 243
    5a08:	ee 0f       	add	r30, r30
    5a0a:	1b 96       	adiw	r26, 0x0b	; 11
    5a0c:	ec 93       	st	X, r30
    5a0e:	06 c0       	rjmp	.+12     	; 0x5a1c <ProcessMusic+0x24c>
							break;

						//program change
						case 0xc0:
							// c1 = patch #						
							tracks[channel].patchNo=c1;
    5a10:	f8 9e       	mul	r15, r24
    5a12:	f0 01       	movw	r30, r0
    5a14:	11 24       	eor	r1, r1
    5a16:	ea 51       	subi	r30, 0x1A	; 26
    5a18:	f3 4f       	sbci	r31, 0xF3	; 243
    5a1a:	40 8b       	std	Z+16, r20	; 0x10


				}//end if(c1==0xff)

				//read next delta time
				nextDeltaTime=ReadVarLen(&songPos);			
    5a1c:	82 e6       	ldi	r24, 0x62	; 98
    5a1e:	9d e0       	ldi	r25, 0x0D	; 13
    5a20:	0e 94 ac 2a 	call	0x5558	; 0x5558 <ReadVarLen>
    5a24:	90 93 60 0d 	sts	0x0D60, r25
    5a28:	80 93 5f 0d 	sts	0x0D5F, r24
				currDeltaTime=0;
    5a2c:	10 92 5a 0d 	sts	0x0D5A, r1
    5a30:	10 92 59 0d 	sts	0x0D59, r1
    5a34:	3b cf       	rjmp	.-394    	; 0x58ac <ProcessMusic+0xdc>
					}
				#endif

			}//end while
		
			currDeltaTime++;
    5a36:	01 96       	adiw	r24, 0x01	; 1
    5a38:	90 93 5a 0d 	sts	0x0D5A, r25
    5a3c:	80 93 59 0d 	sts	0x0D59, r24
    5a40:	9f ee       	ldi	r25, 0xEF	; 239
    5a42:	a9 2e       	mov	r10, r25
    5a44:	9c e0       	ldi	r25, 0x0C	; 12
    5a46:	b9 2e       	mov	r11, r25
    5a48:	29 ef       	ldi	r18, 0xF9	; 249
    5a4a:	c2 2e       	mov	r12, r18
    5a4c:	2c e0       	ldi	r18, 0x0C	; 12
    5a4e:	d2 2e       	mov	r13, r18
    5a50:	3a ef       	ldi	r19, 0xFA	; 250
    5a52:	e3 2e       	mov	r14, r19
    5a54:	3c e0       	ldi	r19, 0x0C	; 12
    5a56:	f3 2e       	mov	r15, r19
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    5a58:	66 24       	eor	r6, r6
    5a5a:	6a 94       	dec	r6
    5a5c:	71 2c       	mov	r7, r1
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//process patch command stream
		if((track->flags & TRACK_FLAGS_PLAYING) && (track->patchCommandStreamPos!=NULL) && ((track->flags & TRACK_FLAGS_HOLD_ENV)==0)){
    5a5e:	88 81       	ld	r24, Y
    5a60:	85 ff       	sbrs	r24, 5
    5a62:	42 c0       	rjmp	.+132    	; 0x5ae8 <ProcessMusic+0x318>
    5a64:	2d 89       	ldd	r18, Y+21	; 0x15
    5a66:	3e 89       	ldd	r19, Y+22	; 0x16
    5a68:	23 2b       	or	r18, r19
    5a6a:	09 f4       	brne	.+2      	; 0x5a6e <ProcessMusic+0x29e>
    5a6c:	3d c0       	rjmp	.+122    	; 0x5ae8 <ProcessMusic+0x318>
    5a6e:	86 fd       	sbrc	r24, 6
    5a70:	3b c0       	rjmp	.+118    	; 0x5ae8 <ProcessMusic+0x318>
    5a72:	47 01       	movw	r8, r14
    5a74:	f2 e0       	ldi	r31, 0x02	; 2
    5a76:	8f 1a       	sub	r8, r31
    5a78:	91 08       	sbc	r9, r1

			//process all simultaneous events
			while(track->patchCurrDeltaTime==track->patchNextDeltaTime){
    5a7a:	d6 01       	movw	r26, r12
    5a7c:	9c 91       	ld	r25, X
    5a7e:	f4 01       	movw	r30, r8
    5a80:	80 81       	ld	r24, Z
    5a82:	98 13       	cpse	r25, r24
    5a84:	2e c0       	rjmp	.+92     	; 0x5ae2 <ProcessMusic+0x312>

				c1=pgm_read_byte(track->patchCommandStreamPos++);
    5a86:	ed 89       	ldd	r30, Y+21	; 0x15
    5a88:	fe 89       	ldd	r31, Y+22	; 0x16
    5a8a:	bf 01       	movw	r22, r30
    5a8c:	6f 5f       	subi	r22, 0xFF	; 255
    5a8e:	7f 4f       	sbci	r23, 0xFF	; 255
    5a90:	7e 8b       	std	Y+22, r23	; 0x16
    5a92:	6d 8b       	std	Y+21, r22	; 0x15
    5a94:	84 91       	lpm	r24, Z
				if(c1==PATCH_END){
    5a96:	8f 3f       	cpi	r24, 0xFF	; 255
    5a98:	31 f4       	brne	.+12     	; 0x5aa6 <ProcessMusic+0x2d6>
					//end of stream!
					track->flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    5a9a:	88 81       	ld	r24, Y
    5a9c:	8f 77       	andi	r24, 0x7F	; 127
    5a9e:	88 83       	st	Y, r24
					track->patchCommandStreamPos=NULL;
    5aa0:	1e 8a       	std	Y+22, r1	; 0x16
    5aa2:	1d 8a       	std	Y+21, r1	; 0x15
					break;
    5aa4:	1e c0       	rjmp	.+60     	; 0x5ae2 <ProcessMusic+0x312>

				}else{
					c2=pgm_read_byte(track->patchCommandStreamPos++);
    5aa6:	9f 01       	movw	r18, r30
    5aa8:	2e 5f       	subi	r18, 0xFE	; 254
    5aaa:	3f 4f       	sbci	r19, 0xFF	; 255
    5aac:	3e 8b       	std	Y+22, r19	; 0x16
    5aae:	2d 8b       	std	Y+21, r18	; 0x15
    5ab0:	fb 01       	movw	r30, r22
    5ab2:	64 91       	lpm	r22, Z
					//invoke patch command function
					((PatchCommand)pgm_read_word(&patchCommands[c1]))(track,c2);
    5ab4:	e8 2f       	mov	r30, r24
    5ab6:	f0 e0       	ldi	r31, 0x00	; 0
    5ab8:	ee 0f       	add	r30, r30
    5aba:	ff 1f       	adc	r31, r31
    5abc:	e2 54       	subi	r30, 0x42	; 66
    5abe:	ff 4f       	sbci	r31, 0xFF	; 255
    5ac0:	25 91       	lpm	r18, Z+
    5ac2:	34 91       	lpm	r19, Z
    5ac4:	ce 01       	movw	r24, r28
    5ac6:	f9 01       	movw	r30, r18
    5ac8:	09 95       	icall
				}

				//read next delta time
				track->patchNextDeltaTime=pgm_read_byte(track->patchCommandStreamPos++);
    5aca:	ed 89       	ldd	r30, Y+21	; 0x15
    5acc:	fe 89       	ldd	r31, Y+22	; 0x16
    5ace:	cf 01       	movw	r24, r30
    5ad0:	01 96       	adiw	r24, 0x01	; 1
    5ad2:	9e 8b       	std	Y+22, r25	; 0x16
    5ad4:	8d 8b       	std	Y+21, r24	; 0x15
    5ad6:	e4 91       	lpm	r30, Z
    5ad8:	d4 01       	movw	r26, r8
    5ada:	ec 93       	st	X, r30
				track->patchCurrDeltaTime=0;
    5adc:	f6 01       	movw	r30, r12
    5ade:	10 82       	st	Z, r1
    5ae0:	cc cf       	rjmp	.-104    	; 0x5a7a <ProcessMusic+0x2aa>
			}

			track->patchCurrDeltaTime++;
    5ae2:	9f 5f       	subi	r25, 0xFF	; 255
    5ae4:	d6 01       	movw	r26, r12
    5ae6:	9c 93       	st	X, r25
		}

		if(track->flags & TRACK_FLAGS_PLAYING){
    5ae8:	98 81       	ld	r25, Y
    5aea:	95 ff       	sbrs	r25, 5
    5aec:	6c c0       	rjmp	.+216    	; 0x5bc6 <ProcessMusic+0x3f6>

			if(track->patchPlayingTime<0xff){
    5aee:	f7 01       	movw	r30, r14
    5af0:	80 81       	ld	r24, Z
    5af2:	8f 3f       	cpi	r24, 0xFF	; 255
    5af4:	11 f0       	breq	.+4      	; 0x5afa <ProcessMusic+0x32a>
				track->patchPlayingTime++;
    5af6:	8f 5f       	subi	r24, 0xFF	; 255
    5af8:	80 83       	st	Z, r24
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
    5afa:	97 fd       	sbrc	r25, 7
    5afc:	04 c0       	rjmp	.+8      	; 0x5b06 <ProcessMusic+0x336>
    5afe:	f7 01       	movw	r30, r14
    5b00:	38 97       	sbiw	r30, 0x08	; 8
				//if an FX, use full track volume.
				trackVol=0xff;
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
    5b02:	90 81       	ld	r25, Z
    5b04:	01 c0       	rjmp	.+2      	; 0x5b08 <ProcessMusic+0x338>
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
				//if an FX, use full track volume.
				trackVol=0xff;
    5b06:	9f ef       	ldi	r25, 0xFF	; 255
    5b08:	f7 01       	movw	r30, r14
    5b0a:	37 97       	sbiw	r30, 0x07	; 7
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
			}
			if(track->noteVol!=0 && track->envelopeVol!=0 && trackVol!=0 && masterVolume!=0){
    5b0c:	80 81       	ld	r24, Z
    5b0e:	88 23       	and	r24, r24
    5b10:	09 f4       	brne	.+2      	; 0x5b14 <ProcessMusic+0x344>
    5b12:	4e c0       	rjmp	.+156    	; 0x5bb0 <ProcessMusic+0x3e0>
    5b14:	31 96       	adiw	r30, 0x01	; 1
    5b16:	50 81       	ld	r21, Z
    5b18:	55 23       	and	r21, r21
    5b1a:	09 f4       	brne	.+2      	; 0x5b1e <ProcessMusic+0x34e>
    5b1c:	49 c0       	rjmp	.+146    	; 0x5bb0 <ProcessMusic+0x3e0>
    5b1e:	99 23       	and	r25, r25
    5b20:	09 f4       	brne	.+2      	; 0x5b24 <ProcessMusic+0x354>
    5b22:	46 c0       	rjmp	.+140    	; 0x5bb0 <ProcessMusic+0x3e0>
    5b24:	40 91 5e 0d 	lds	r20, 0x0D5E
    5b28:	44 23       	and	r20, r20
    5b2a:	09 f4       	brne	.+2      	; 0x5b2e <ProcessMusic+0x35e>
    5b2c:	41 c0       	rjmp	.+130    	; 0x5bb0 <ProcessMusic+0x3e0>

				uVol=(track->noteVol*trackVol)+0x100;
    5b2e:	89 9f       	mul	r24, r25
    5b30:	c0 01       	movw	r24, r0
    5b32:	11 24       	eor	r1, r1
    5b34:	93 95       	inc	r25
				uVol>>=8;
    5b36:	89 2f       	mov	r24, r25
    5b38:	99 27       	eor	r25, r25
				
				uVol=(uVol*track->envelopeVol)+0x100;
    5b3a:	58 9f       	mul	r21, r24
    5b3c:	90 01       	movw	r18, r0
    5b3e:	59 9f       	mul	r21, r25
    5b40:	30 0d       	add	r19, r0
    5b42:	11 24       	eor	r1, r1
    5b44:	c9 01       	movw	r24, r18
    5b46:	93 95       	inc	r25
				uVol>>=8;
    5b48:	89 2f       	mov	r24, r25
    5b4a:	99 27       	eor	r25, r25
    5b4c:	3b 97       	sbiw	r30, 0x0b	; 11
				
				#if MUSIC_ENGINE == MIDI
					uVol=(uVol*track->expressionVol)+0x100;
    5b4e:	50 81       	ld	r21, Z
    5b50:	58 9f       	mul	r21, r24
    5b52:	90 01       	movw	r18, r0
    5b54:	59 9f       	mul	r21, r25
    5b56:	30 0d       	add	r19, r0
    5b58:	11 24       	eor	r1, r1
    5b5a:	33 95       	inc	r19
					uVol>>=8;
    5b5c:	23 2f       	mov	r18, r19
    5b5e:	33 27       	eor	r19, r19
				#endif
				
				uVol=(uVol*masterVolume)+0x100;
    5b60:	42 9f       	mul	r20, r18
    5b62:	c0 01       	movw	r24, r0
    5b64:	43 9f       	mul	r20, r19
    5b66:	90 0d       	add	r25, r0
    5b68:	11 24       	eor	r1, r1
    5b6a:	93 95       	inc	r25
				uVol>>=8;
    5b6c:	89 2f       	mov	r24, r25
    5b6e:	99 27       	eor	r25, r25
    5b70:	37 96       	adiw	r30, 0x07	; 7

				if(track->tremoloLevel>0){					
    5b72:	20 81       	ld	r18, Z
    5b74:	22 23       	and	r18, r18
    5b76:	f1 f0       	breq	.+60     	; 0x5bb4 <ProcessMusic+0x3e4>
					tmp=pgm_read_byte(&(waves[track->tremoloPos]));
    5b78:	d5 01       	movw	r26, r10
    5b7a:	ec 91       	ld	r30, X
    5b7c:	f0 e0       	ldi	r31, 0x00	; 0
    5b7e:	e0 50       	subi	r30, 0x00	; 0
    5b80:	f1 4a       	sbci	r31, 0xA1	; 161
    5b82:	e4 91       	lpm	r30, Z
					tmp-=128; //convert to unsigned
    5b84:	e0 58       	subi	r30, 0x80	; 128

					tVol=(track->tremoloLevel*tmp)+0x100;
    5b86:	2e 9f       	mul	r18, r30
    5b88:	f0 01       	movw	r30, r0
    5b8a:	11 24       	eor	r1, r1
    5b8c:	f3 95       	inc	r31
					tVol>>=8;
    5b8e:	ef 2f       	mov	r30, r31
    5b90:	ff 27       	eor	r31, r31
					
					uVol=(uVol*(0xff-tVol))+0x100;
    5b92:	a3 01       	movw	r20, r6
    5b94:	4e 1b       	sub	r20, r30
    5b96:	5f 0b       	sbc	r21, r31
    5b98:	48 9f       	mul	r20, r24
    5b9a:	90 01       	movw	r18, r0
    5b9c:	49 9f       	mul	r20, r25
    5b9e:	30 0d       	add	r19, r0
    5ba0:	58 9f       	mul	r21, r24
    5ba2:	30 0d       	add	r19, r0
    5ba4:	11 24       	eor	r1, r1
    5ba6:	c9 01       	movw	r24, r18
    5ba8:	93 95       	inc	r25
					uVol>>=8;
    5baa:	89 2f       	mov	r24, r25
    5bac:	99 27       	eor	r25, r25
    5bae:	02 c0       	rjmp	.+4      	; 0x5bb4 <ProcessMusic+0x3e4>
				}

			
			}else{
				uVol=0;
    5bb0:	80 e0       	ldi	r24, 0x00	; 0
    5bb2:	90 e0       	ldi	r25, 0x00	; 0
			}	

			track->tremoloPos+=track->tremoloRate;	
    5bb4:	f5 01       	movw	r30, r10
    5bb6:	30 81       	ld	r19, Z
    5bb8:	f7 01       	movw	r30, r14
    5bba:	39 97       	sbiw	r30, 0x09	; 9
    5bbc:	20 81       	ld	r18, Z
    5bbe:	23 0f       	add	r18, r19
    5bc0:	d5 01       	movw	r26, r10
    5bc2:	2c 93       	st	X, r18
    5bc4:	02 c0       	rjmp	.+4      	; 0x5bca <ProcessMusic+0x3fa>

		}else{
			uVol=0;
    5bc6:	80 e0       	ldi	r24, 0x00	; 0
    5bc8:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
    5bca:	f8 01       	movw	r30, r16
    5bcc:	80 83       	st	Z, r24
    5bce:	67 96       	adiw	r28, 0x17	; 23
    5bd0:	0a 5f       	subi	r16, 0xFA	; 250
    5bd2:	1f 4f       	sbci	r17, 0xFF	; 255
    5bd4:	f7 e1       	ldi	r31, 0x17	; 23
    5bd6:	af 0e       	add	r10, r31
    5bd8:	b1 1c       	adc	r11, r1
    5bda:	87 e1       	ldi	r24, 0x17	; 23
    5bdc:	c8 0e       	add	r12, r24
    5bde:	d1 1c       	adc	r13, r1
    5be0:	97 e1       	ldi	r25, 0x17	; 23
    5be2:	e9 0e       	add	r14, r25
    5be4:	f1 1c       	adc	r15, r1


	//
	// Process patches command streams & final volume
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    5be6:	ad e0       	ldi	r26, 0x0D	; 13
    5be8:	c9 35       	cpi	r28, 0x59	; 89
    5bea:	da 07       	cpc	r29, r26
    5bec:	09 f0       	breq	.+2      	; 0x5bf0 <ProcessMusic+0x420>
    5bee:	37 cf       	rjmp	.-402    	; 0x5a5e <ProcessMusic+0x28e>
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
	}
	
}
    5bf0:	df 91       	pop	r29
    5bf2:	cf 91       	pop	r28
    5bf4:	1f 91       	pop	r17
    5bf6:	0f 91       	pop	r16
    5bf8:	ff 90       	pop	r15
    5bfa:	ef 90       	pop	r14
    5bfc:	df 90       	pop	r13
    5bfe:	cf 90       	pop	r12
    5c00:	bf 90       	pop	r11
    5c02:	af 90       	pop	r10
    5c04:	9f 90       	pop	r9
    5c06:	8f 90       	pop	r8
    5c08:	7f 90       	pop	r7
    5c0a:	6f 90       	pop	r6
    5c0c:	08 95       	ret

00005c0e <SetMasterVolume>:
}



void SetMasterVolume(unsigned char vol){
	masterVolume=vol;
    5c0e:	80 93 5e 0d 	sts	0x0D5E, r24
    5c12:	08 95       	ret

00005c14 <SetMixerNote>:
; r22: -MIDI note, 69=A5(440) for waves channels (0,1,2)
;      -Noise params for channel 3
;***********************
.section .text.SetMixerNote
SetMixerNote:
	clr r25
    5c14:	99 27       	eor	r25, r25
	clr r23
    5c16:	77 27       	eor	r23, r23
	#if SOUND_MIXER == MIXER_TYPE_VSYNC
		cpi r24,3
		brlo set_note_waves
		ret		
	#else
		cpi r24,3
    5c18:	83 30       	cpi	r24, 0x03	; 3
		brne set_note_waves		
    5c1a:	09 f4       	brne	.+2      	; 0x5c1e <set_note_waves>
		ret
    5c1c:	08 95       	ret

00005c1e <set_note_waves>:
	#endif
#endif

set_note_waves:
	;get step for note
	ldi ZL,lo8(steptable)
    5c1e:	e8 e0       	ldi	r30, 0x08	; 8
	ldi ZH,hi8(steptable)
    5c20:	fd e5       	ldi	r31, 0x5D	; 93
	lsl r22
    5c22:	66 0f       	add	r22, r22
	rol r23
    5c24:	77 1f       	adc	r23, r23
	add ZL,r22
    5c26:	e6 0f       	add	r30, r22
	adc ZH,r23	
    5c28:	f7 1f       	adc	r31, r23

	lpm r26,Z+
    5c2a:	a5 91       	lpm	r26, Z+
	lpm r27,Z
    5c2c:	b4 91       	lpm	r27, Z

	ldi ZL,lo8(mixerStruct)
    5c2e:	e8 eb       	ldi	r30, 0xB8	; 184
	ldi ZH,hi8(mixerStruct)
    5c30:	fc e0       	ldi	r31, 0x0C	; 12
	ldi r18,CHANNEL_STRUCT_SIZE
    5c32:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24
    5c34:	28 9f       	mul	r18, r24
	add ZL,r0
    5c36:	e0 0d       	add	r30, r0
	adc ZH,r1
    5c38:	f1 1d       	adc	r31, r1
	
	std Z+step_lo,r26
    5c3a:	a1 83       	std	Z+1, r26	; 0x01
	std Z+step_hi,r27
    5c3c:	b2 83       	std	Z+2, r27	; 0x02
	
	clr r1
    5c3e:	11 24       	eor	r1, r1
	

	ret
    5c40:	08 95       	ret

00005c42 <SetMixerWave>:
;         Noise channel: 0xfe=7 bit lfsr, 0xff=15 bit lfsr
;                 
;***********************
.section .text.SetMixerWave
SetMixerWave:
	clr r25
    5c42:	99 27       	eor	r25, r25
	clr r23
    5c44:	77 27       	eor	r23, r23

	ldi ZL,lo8(mixerStruct)
    5c46:	e8 eb       	ldi	r30, 0xB8	; 184
	ldi ZH,hi8(mixerStruct)
    5c48:	fc e0       	ldi	r31, 0x0C	; 12
	ldi r18,CHANNEL_STRUCT_SIZE
    5c4a:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24	
    5c4c:	28 9f       	mul	r18, r24
	add ZL,r0
    5c4e:	e0 0d       	add	r30, r0
	adc ZH,r1
    5c50:	f1 1d       	adc	r31, r1

#if MIXER_CHAN4_TYPE == 0
	cpi r22,0xfe	;7bit lfsr
    5c52:	6e 3f       	cpi	r22, 0xFE	; 254
	brne smw1
    5c54:	31 f4       	brne	.+12     	; 0x5c62 <smw1>
	lds r22,tr4_params
    5c56:	60 91 cb 0c 	lds	r22, 0x0CCB
	andi r22,0xfe;
    5c5a:	6e 7f       	andi	r22, 0xFE	; 254
	sts tr4_params,r22
    5c5c:	60 93 cb 0c 	sts	0x0CCB, r22
	rjmp esmw	
    5c60:	0b c0       	rjmp	.+22     	; 0x5c78 <esmw>

00005c62 <smw1>:
smw1:
	cpi r22,0xff	;15bit lfsr
    5c62:	6f 3f       	cpi	r22, 0xFF	; 255
	brne smw2
    5c64:	31 f4       	brne	.+12     	; 0x5c72 <smw2>
	lds r22,tr4_params
    5c66:	60 91 cb 0c 	lds	r22, 0x0CCB
	ori r22,0xfe;
    5c6a:	6e 6f       	ori	r22, 0xFE	; 254
	sts tr4_params,r22	
    5c6c:	60 93 cb 0c 	sts	0x0CCB, r22
	rjmp esmw
    5c70:	03 c0       	rjmp	.+6      	; 0x5c78 <esmw>

00005c72 <smw2>:
smw2:
#endif

	ldi r23,hi8(waves)
    5c72:	7f e5       	ldi	r23, 0x5F	; 95
	add r23,r22
    5c74:	76 0f       	add	r23, r22
	std Z+samplepos_hi,r23 ;store path No
    5c76:	75 83       	std	Z+5, r23	; 0x05

00005c78 <esmw>:

esmw:
	clr r1	
    5c78:	11 24       	eor	r1, r1
	ret
    5c7a:	08 95       	ret
	...

00005d00 <DisableSoundEngine>:
; no CPU cycles are consumed.
; C-callable
;*****************************
.section .text.DisableSoundEngine
DisableSoundEngine:	
	ldi r24,0
    5d00:	80 e0       	ldi	r24, 0x00	; 0
	sts sound_enabled,r24
    5d02:	80 93 b7 0c 	sts	0x0CB7, r24
	ret
    5d06:	08 95       	ret

00005d08 <steptable>:
    5d08:	22 00       	.word	0x0022	; ????
    5d0a:	24 00       	.word	0x0024	; ????
    5d0c:	26 00       	.word	0x0026	; ????
    5d0e:	28 00       	.word	0x0028	; ????
    5d10:	2b 00       	.word	0x002b	; ????
    5d12:	2d 00       	.word	0x002d	; ????
    5d14:	30 00       	.word	0x0030	; ????
    5d16:	33 00       	.word	0x0033	; ????
    5d18:	36 00       	.word	0x0036	; ????
    5d1a:	39 00       	.word	0x0039	; ????
    5d1c:	3d 00       	.word	0x003d	; ????
    5d1e:	40 00       	.word	0x0040	; ????
    5d20:	44 00       	.word	0x0044	; ????
    5d22:	48 00       	.word	0x0048	; ????
    5d24:	4c 00       	.word	0x004c	; ????
    5d26:	51 00       	.word	0x0051	; ????
    5d28:	56 00       	.word	0x0056	; ????
    5d2a:	5b 00       	.word	0x005b	; ????
    5d2c:	60 00       	.word	0x0060	; ????
    5d2e:	66 00       	.word	0x0066	; ????
    5d30:	6c 00       	.word	0x006c	; ????
    5d32:	73 00       	.word	0x0073	; ????
    5d34:	79 00       	.word	0x0079	; ????
    5d36:	81 00       	.word	0x0081	; ????
    5d38:	88 00       	.word	0x0088	; ????
    5d3a:	90 00       	.word	0x0090	; ????
    5d3c:	99 00       	.word	0x0099	; ????
    5d3e:	a2 00       	.word	0x00a2	; ????
    5d40:	ac 00       	.word	0x00ac	; ????
    5d42:	b6 00       	.word	0x00b6	; ????
    5d44:	c1 00       	.word	0x00c1	; ????
    5d46:	cc 00       	.word	0x00cc	; ????
    5d48:	d8 00       	.word	0x00d8	; ????
    5d4a:	e5 00       	.word	0x00e5	; ????
    5d4c:	f3 00       	.word	0x00f3	; ????
    5d4e:	01 01       	movw	r0, r2
    5d50:	10 01       	movw	r2, r0
    5d52:	21 01       	movw	r4, r2
    5d54:	32 01       	movw	r6, r4
    5d56:	44 01       	movw	r8, r8
    5d58:	57 01       	movw	r10, r14
    5d5a:	6c 01       	movw	r12, r24
    5d5c:	81 01       	movw	r16, r2
    5d5e:	98 01       	movw	r18, r16
    5d60:	b0 01       	movw	r22, r0
    5d62:	ca 01       	movw	r24, r20
    5d64:	e5 01       	movw	r28, r10
    5d66:	02 02       	muls	r16, r18
    5d68:	21 02       	muls	r18, r17
    5d6a:	41 02       	muls	r20, r17
    5d6c:	64 02       	muls	r22, r20
    5d6e:	88 02       	muls	r24, r24
    5d70:	ae 02       	muls	r26, r30
    5d72:	d7 02       	muls	r29, r23
    5d74:	03 03       	mulsu	r16, r19
    5d76:	30 03       	mulsu	r19, r16
    5d78:	61 03       	mulsu	r22, r17
    5d7a:	94 03       	fmuls	r17, r20
    5d7c:	cb 03       	fmulsu	r20, r19
    5d7e:	05 04       	cpc	r0, r5
    5d80:	42 04       	cpc	r4, r2
    5d82:	83 04       	cpc	r8, r3
    5d84:	c7 04       	cpc	r12, r7
    5d86:	10 05       	cpc	r17, r0
    5d88:	5d 05       	cpc	r21, r13
    5d8a:	af 05       	cpc	r26, r15
    5d8c:	05 06       	cpc	r0, r21
    5d8e:	61 06       	cpc	r6, r17
    5d90:	c2 06       	cpc	r12, r18
    5d92:	29 07       	cpc	r18, r25
    5d94:	96 07       	cpc	r25, r22
    5d96:	09 08       	sbc	r0, r9
    5d98:	83 08       	sbc	r8, r3
    5d9a:	05 09       	sbc	r16, r5
    5d9c:	8e 09       	sbc	r24, r14
    5d9e:	20 0a       	sbc	r2, r16
    5da0:	ba 0a       	sbc	r11, r26
    5da2:	5d 0b       	sbc	r21, r29
    5da4:	0a 0c       	add	r0, r10
    5da6:	c1 0c       	add	r12, r1
    5da8:	84 0d       	add	r24, r4
    5daa:	51 0e       	add	r5, r17
    5dac:	2b 0f       	add	r18, r27
    5dae:	12 10       	cpse	r1, r2
    5db0:	07 11       	cpse	r16, r7
    5db2:	0a 12       	cpse	r0, r26
    5db4:	1d 13       	cpse	r17, r29
    5db6:	40 14       	cp	r4, r0
    5db8:	74 15       	cp	r23, r4
    5dba:	ba 16       	cp	r11, r26
    5dbc:	14 18       	sub	r1, r4
    5dbe:	83 19       	sub	r24, r3
    5dc0:	07 1b       	sub	r16, r23
    5dc2:	a3 1c       	adc	r10, r3
    5dc4:	57 1e       	adc	r5, r23
    5dc6:	24 20       	and	r2, r4
    5dc8:	0e 22       	and	r0, r30
    5dca:	14 24       	eor	r1, r4
    5dcc:	39 26       	eor	r3, r25
    5dce:	7f 28       	or	r7, r15
    5dd0:	e8 2a       	or	r14, r24
    5dd2:	75 2d       	mov	r23, r5
    5dd4:	29 30       	cpi	r18, 0x09	; 9
    5dd6:	06 33       	cpi	r16, 0x36	; 54
    5dd8:	0f 36       	cpi	r16, 0x6F	; 111
    5dda:	45 39       	cpi	r20, 0x95	; 149
    5ddc:	ad 3c       	cpi	r26, 0xCD	; 205
    5dde:	49 40       	sbci	r20, 0x09	; 9
    5de0:	1b 44       	sbci	r17, 0x4B	; 75
    5de2:	28 48       	sbci	r18, 0x88	; 136
    5de4:	73 4c       	sbci	r23, 0xC3	; 195
    5de6:	fe 50       	subi	r31, 0x0E	; 14
    5de8:	cf 55       	subi	r28, 0x5F	; 95
    5dea:	ea 5a       	subi	r30, 0xAA	; 170
    5dec:	51 60       	ori	r21, 0x01	; 1
    5dee:	0c 66       	ori	r16, 0x6C	; 108
    5df0:	1d 6c       	ori	r17, 0xCD	; 205
    5df2:	8b 72       	andi	r24, 0x2B	; 43
    5df4:	5a 79       	andi	r21, 0x9A	; 154
    5df6:	92 80       	ldd	r9, Z+2	; 0x02
    5df8:	37 88       	ldd	r3, Z+23	; 0x17
    5dfa:	50 90 e5 98 	lds	r5, 0x98E5
    5dfe:	fd a1       	ldd	r31, Y+37	; 0x25
    5e00:	9f ab       	std	Y+55, r25	; 0x37
    5e02:	d3 b5       	in	r29, 0x23	; 35
    5e04:	a3 c0       	rjmp	.+326    	; 0x5f4c <waves+0x4c>
	...

00005f00 <waves>:
    5f00:	00 03       	mulsu	r16, r16
    5f02:	06 09       	sbc	r16, r6
    5f04:	0c 10       	cpse	r0, r12
    5f06:	13 16       	cp	r1, r19
    5f08:	19 1c       	adc	r1, r9
    5f0a:	1f 22       	and	r1, r31
    5f0c:	25 28       	or	r2, r5
    5f0e:	2b 2e       	mov	r2, r27
    5f10:	31 33       	cpi	r19, 0x31	; 49
    5f12:	36 39       	cpi	r19, 0x96	; 150
    5f14:	3c 3f       	cpi	r19, 0xFC	; 252
    5f16:	41 44       	sbci	r20, 0x41	; 65
    5f18:	47 49       	sbci	r20, 0x97	; 151
    5f1a:	4c 4e       	sbci	r20, 0xEC	; 236
    5f1c:	51 53       	subi	r21, 0x31	; 49
    5f1e:	55 58       	subi	r21, 0x85	; 133
    5f20:	5a 5c       	subi	r21, 0xCA	; 202
    5f22:	5e 60       	ori	r21, 0x0E	; 14
    5f24:	62 64       	ori	r22, 0x42	; 66
    5f26:	66 68       	ori	r22, 0x86	; 134
    5f28:	6a 6b       	ori	r22, 0xBA	; 186
    5f2a:	6d 6f       	ori	r22, 0xFD	; 253
    5f2c:	70 71       	andi	r23, 0x10	; 16
    5f2e:	73 74       	andi	r23, 0x43	; 67
    5f30:	75 76       	andi	r23, 0x65	; 101
    5f32:	78 79       	andi	r23, 0x98	; 152
    5f34:	7a 7a       	andi	r23, 0xAA	; 170
    5f36:	7b 7c       	andi	r23, 0xCB	; 203
    5f38:	7d 7d       	andi	r23, 0xDD	; 221
    5f3a:	7e 7e       	andi	r23, 0xEE	; 238
    5f3c:	7e 7f       	andi	r23, 0xFE	; 254
    5f3e:	7f 7f       	andi	r23, 0xFF	; 255
    5f40:	7f 7f       	andi	r23, 0xFF	; 255
    5f42:	7f 7f       	andi	r23, 0xFF	; 255
    5f44:	7e 7e       	andi	r23, 0xEE	; 238
    5f46:	7e 7d       	andi	r23, 0xDE	; 222
    5f48:	7d 7c       	andi	r23, 0xCD	; 205
    5f4a:	7b 7a       	andi	r23, 0xAB	; 171
    5f4c:	7a 79       	andi	r23, 0x9A	; 154
    5f4e:	78 76       	andi	r23, 0x68	; 104
    5f50:	75 74       	andi	r23, 0x45	; 69
    5f52:	73 71       	andi	r23, 0x13	; 19
    5f54:	70 6f       	ori	r23, 0xF0	; 240
    5f56:	6d 6b       	ori	r22, 0xBD	; 189
    5f58:	6a 68       	ori	r22, 0x8A	; 138
    5f5a:	66 64       	ori	r22, 0x46	; 70
    5f5c:	62 60       	ori	r22, 0x02	; 2
    5f5e:	5e 5c       	subi	r21, 0xCE	; 206
    5f60:	5a 58       	subi	r21, 0x8A	; 138
    5f62:	55 53       	subi	r21, 0x35	; 53
    5f64:	51 4e       	sbci	r21, 0xE1	; 225
    5f66:	4c 49       	sbci	r20, 0x9C	; 156
    5f68:	47 44       	sbci	r20, 0x47	; 71
    5f6a:	41 3f       	cpi	r20, 0xF1	; 241
    5f6c:	3c 39       	cpi	r19, 0x9C	; 156
    5f6e:	36 33       	cpi	r19, 0x36	; 54
    5f70:	31 2e       	mov	r3, r17
    5f72:	2b 28       	or	r2, r11
    5f74:	25 22       	and	r2, r21
    5f76:	1f 1c       	adc	r1, r15
    5f78:	19 16       	cp	r1, r25
    5f7a:	13 10       	cpse	r1, r3
    5f7c:	0c 09       	sbc	r16, r12
    5f7e:	06 03       	mulsu	r16, r22
    5f80:	00 fd       	sbrc	r16, 0
    5f82:	fa f7       	brpl	.-2      	; 0x5f82 <waves+0x82>
    5f84:	f4 f0       	brlt	.+60     	; 0x5fc2 <waves+0xc2>
    5f86:	ed ea       	ldi	r30, 0xAD	; 173
    5f88:	e7 e4       	ldi	r30, 0x47	; 71
    5f8a:	e1 de       	rcall	.-574    	; 0x5d4e <steptable+0x46>
    5f8c:	db d8       	rcall	.-3658   	; 0x5144 <ReadButtons+0x2c>
    5f8e:	d5 d2       	rcall	.+1450   	; 0x653a <waves+0x63a>
    5f90:	cf cd       	rjmp	.-1122   	; 0x5b30 <ProcessMusic+0x360>
    5f92:	ca c7       	rjmp	.+3988   	; 0x6f28 <LBPrintByte+0x42>
    5f94:	c4 c1       	rjmp	.+904    	; 0x631e <waves+0x41e>
    5f96:	bf bc       	out	0x2f, r11	; 47
    5f98:	b9 b7       	in	r27, 0x39	; 57
    5f9a:	b4 b2       	in	r11, 0x14	; 20
    5f9c:	af ad       	ldd	r26, Y+63	; 0x3f
    5f9e:	ab a8       	ldd	r10, Y+51	; 0x33
    5fa0:	a6 a4       	ldd	r10, Z+46	; 0x2e
    5fa2:	a2 a0       	ldd	r10, Z+34	; 0x22
    5fa4:	9e 9c       	mul	r9, r14
    5fa6:	9a 98       	cbi	0x13, 2	; 19
    5fa8:	96 95       	lsr	r25
    5faa:	93 91       	.word	0x9193	; ????
    5fac:	90 8f       	std	Z+24, r25	; 0x18
    5fae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    5fb0:	8b 8a       	std	Y+19, r8	; 0x13
    5fb2:	88 87       	std	Y+8, r24	; 0x08
    5fb4:	86 86       	std	Z+14, r8	; 0x0e
    5fb6:	85 84       	ldd	r8, Z+13	; 0x0d
    5fb8:	83 83       	std	Z+3, r24	; 0x03
    5fba:	82 82       	std	Z+2, r8	; 0x02
    5fbc:	82 81       	ldd	r24, Z+2	; 0x02
    5fbe:	81 81       	ldd	r24, Z+1	; 0x01
    5fc0:	81 81       	ldd	r24, Z+1	; 0x01
    5fc2:	81 81       	ldd	r24, Z+1	; 0x01
    5fc4:	82 82       	std	Z+2, r8	; 0x02
    5fc6:	82 83       	std	Z+2, r24	; 0x02
    5fc8:	83 84       	ldd	r8, Z+11	; 0x0b
    5fca:	85 86       	std	Z+13, r8	; 0x0d
    5fcc:	86 87       	std	Z+14, r24	; 0x0e
    5fce:	88 8a       	std	Y+16, r8	; 0x10
    5fd0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    5fd2:	8d 8f       	std	Y+29, r24	; 0x1d
    5fd4:	90 91 93 95 	lds	r25, 0x9593
    5fd8:	96 98       	cbi	0x12, 6	; 18
    5fda:	9a 9c       	mul	r9, r10
    5fdc:	9e a0       	ldd	r9, Y+38	; 0x26
    5fde:	a2 a4       	ldd	r10, Z+42	; 0x2a
    5fe0:	a6 a8       	ldd	r10, Z+54	; 0x36
    5fe2:	ab ad       	ldd	r26, Y+59	; 0x3b
    5fe4:	af b2       	in	r10, 0x1f	; 31
    5fe6:	b4 b7       	in	r27, 0x34	; 52
    5fe8:	b9 bc       	out	0x29, r11	; 41
    5fea:	bf c1       	rjmp	.+894    	; 0x636a <waves+0x46a>
    5fec:	c4 c7       	rjmp	.+3976   	; 0x6f76 <LBPrintInt+0x4c>
    5fee:	ca cd       	rjmp	.-1132   	; 0x5b84 <ProcessMusic+0x3b4>
    5ff0:	cf d2       	rcall	.+1438   	; 0x6590 <waves+0x690>
    5ff2:	d5 d8       	rcall	.-3670   	; 0x519e <ReadControllers+0x1a>
    5ff4:	db de       	rcall	.-586    	; 0x5dac <steptable+0xa4>
    5ff6:	e1 e4       	ldi	r30, 0x41	; 65
    5ff8:	e7 ea       	ldi	r30, 0xA7	; 167
    5ffa:	ed f0       	brhs	.+58     	; 0x6036 <waves+0x136>
    5ffc:	f4 f7       	brge	.-4      	; 0x5ffa <waves+0xfa>
    5ffe:	fa fd       	.word	0xfdfa	; ????
    6000:	80 81       	ld	r24, Z
    6002:	82 83       	std	Z+2, r24	; 0x02
    6004:	84 85       	ldd	r24, Z+12	; 0x0c
    6006:	86 87       	std	Z+14, r24	; 0x0e
    6008:	88 89       	ldd	r24, Y+16	; 0x10
    600a:	8a 8b       	std	Y+18, r24	; 0x12
    600c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    600e:	8e 8f       	std	Y+30, r24	; 0x1e
    6010:	90 91 92 93 	lds	r25, 0x9392
    6014:	94 95       	.word	0x9594	; ????
    6016:	96 97       	sbiw	r26, 0x26	; 38
    6018:	98 99       	sbic	0x13, 0	; 19
    601a:	9a 9b       	sbis	0x13, 2	; 19
    601c:	9c 9d       	mul	r25, r12
    601e:	9e 9f       	mul	r25, r30
    6020:	a0 a1       	ldd	r26, Z+32	; 0x20
    6022:	a2 a3       	std	Z+34, r26	; 0x22
    6024:	a4 a5       	ldd	r26, Z+44	; 0x2c
    6026:	a6 a7       	std	Z+46, r26	; 0x2e
    6028:	a8 a9       	ldd	r26, Y+48	; 0x30
    602a:	aa ab       	std	Y+50, r26	; 0x32
    602c:	ac ad       	ldd	r26, Y+60	; 0x3c
    602e:	ae af       	std	Y+62, r26	; 0x3e
    6030:	b0 b1       	in	r27, 0x00	; 0
    6032:	b2 b3       	in	r27, 0x12	; 18
    6034:	b4 b5       	in	r27, 0x24	; 36
    6036:	b6 b7       	in	r27, 0x36	; 54
    6038:	b8 b9       	out	0x08, r27	; 8
    603a:	ba bb       	out	0x1a, r27	; 26
    603c:	bc bd       	out	0x2c, r27	; 44
    603e:	be bf       	out	0x3e, r27	; 62
    6040:	c0 c1       	rjmp	.+896    	; 0x63c2 <waves+0x4c2>
    6042:	c2 c3       	rjmp	.+1924   	; 0x67c8 <waves+0x8c8>
    6044:	c4 c5       	rjmp	.+2952   	; 0x6bce <DrawMap+0x16>
    6046:	c6 c7       	rjmp	.+3980   	; 0x6fd4 <LBWaitSeconds+0x2>
    6048:	c8 c9       	rjmp	.-3184   	; 0x53da <PatchCommand11+0x50>
    604a:	ca cb       	rjmp	.-2156   	; 0x57e0 <ProcessMusic+0x10>
    604c:	cc cd       	rjmp	.-1128   	; 0x5be6 <ProcessMusic+0x416>
    604e:	ce cf       	rjmp	.-100    	; 0x5fec <waves+0xec>
    6050:	d0 d1       	rcall	.+928    	; 0x63f2 <waves+0x4f2>
    6052:	d2 d3       	rcall	.+1956   	; 0x67f8 <waves+0x8f8>
    6054:	d4 d5       	rcall	.+2984   	; 0x6bfe <DrawMap+0x46>
    6056:	d6 d7       	rcall	.+4012   	; 0x7004 <LBMapSprite+0x14>
    6058:	d8 d9       	rcall	.-3152   	; 0x540a <PatchCommand13+0x4>
    605a:	da db       	rcall	.-2124   	; 0x5810 <ProcessMusic+0x40>
    605c:	dc dd       	rcall	.-1096   	; 0x5c16 <SetMixerNote+0x2>
    605e:	de df       	rcall	.-68     	; 0x601c <waves+0x11c>
    6060:	e0 e1       	ldi	r30, 0x10	; 16
    6062:	e2 e3       	ldi	r30, 0x32	; 50
    6064:	e4 e5       	ldi	r30, 0x54	; 84
    6066:	e6 e7       	ldi	r30, 0x76	; 118
    6068:	e8 e9       	ldi	r30, 0x98	; 152
    606a:	ea eb       	ldi	r30, 0xBA	; 186
    606c:	ec ed       	ldi	r30, 0xDC	; 220
    606e:	ee ef       	ldi	r30, 0xFE	; 254
    6070:	f0 f1       	brcs	.+124    	; 0x60ee <waves+0x1ee>
    6072:	f2 f3       	brmi	.-4      	; 0x6070 <waves+0x170>
    6074:	f4 f5       	brge	.+124    	; 0x60f2 <waves+0x1f2>
    6076:	f6 f7       	brtc	.-4      	; 0x6074 <waves+0x174>
    6078:	f8 f9       	.word	0xf9f8	; ????
    607a:	fa fb       	.word	0xfbfa	; ????
    607c:	fc fd       	.word	0xfdfc	; ????
    607e:	fe ff       	.word	0xfffe	; ????
    6080:	00 01       	movw	r0, r0
    6082:	02 03       	mulsu	r16, r18
    6084:	04 05       	cpc	r16, r4
    6086:	06 07       	cpc	r16, r22
    6088:	08 09       	sbc	r16, r8
    608a:	0a 0b       	sbc	r16, r26
    608c:	0c 0d       	add	r16, r12
    608e:	0e 0f       	add	r16, r30
    6090:	10 11       	cpse	r17, r0
    6092:	12 13       	cpse	r17, r18
    6094:	14 15       	cp	r17, r4
    6096:	16 17       	cp	r17, r22
    6098:	18 19       	sub	r17, r8
    609a:	1a 1b       	sub	r17, r26
    609c:	1c 1d       	adc	r17, r12
    609e:	1e 1f       	adc	r17, r30
    60a0:	20 21       	and	r18, r0
    60a2:	22 23       	and	r18, r18
    60a4:	24 25       	eor	r18, r4
    60a6:	26 27       	eor	r18, r22
    60a8:	28 29       	or	r18, r8
    60aa:	2a 2b       	or	r18, r26
    60ac:	2c 2d       	mov	r18, r12
    60ae:	2e 2f       	mov	r18, r30
    60b0:	30 31       	cpi	r19, 0x10	; 16
    60b2:	32 33       	cpi	r19, 0x32	; 50
    60b4:	34 35       	cpi	r19, 0x54	; 84
    60b6:	36 37       	cpi	r19, 0x76	; 118
    60b8:	38 39       	cpi	r19, 0x98	; 152
    60ba:	3a 3b       	cpi	r19, 0xBA	; 186
    60bc:	3c 3d       	cpi	r19, 0xDC	; 220
    60be:	3e 3f       	cpi	r19, 0xFE	; 254
    60c0:	40 41       	sbci	r20, 0x10	; 16
    60c2:	42 43       	sbci	r20, 0x32	; 50
    60c4:	44 45       	sbci	r20, 0x54	; 84
    60c6:	46 47       	sbci	r20, 0x76	; 118
    60c8:	48 49       	sbci	r20, 0x98	; 152
    60ca:	4a 4b       	sbci	r20, 0xBA	; 186
    60cc:	4c 4d       	sbci	r20, 0xDC	; 220
    60ce:	4e 4f       	sbci	r20, 0xFE	; 254
    60d0:	50 51       	subi	r21, 0x10	; 16
    60d2:	52 53       	subi	r21, 0x32	; 50
    60d4:	54 55       	subi	r21, 0x54	; 84
    60d6:	56 57       	subi	r21, 0x76	; 118
    60d8:	58 59       	subi	r21, 0x98	; 152
    60da:	5a 5b       	subi	r21, 0xBA	; 186
    60dc:	5c 5d       	subi	r21, 0xDC	; 220
    60de:	5e 5f       	subi	r21, 0xFE	; 254
    60e0:	60 61       	ori	r22, 0x10	; 16
    60e2:	62 63       	ori	r22, 0x32	; 50
    60e4:	64 65       	ori	r22, 0x54	; 84
    60e6:	66 67       	ori	r22, 0x76	; 118
    60e8:	68 69       	ori	r22, 0x98	; 152
    60ea:	6a 6b       	ori	r22, 0xBA	; 186
    60ec:	6c 6d       	ori	r22, 0xDC	; 220
    60ee:	6e 6f       	ori	r22, 0xFE	; 254
    60f0:	70 71       	andi	r23, 0x10	; 16
    60f2:	72 73       	andi	r23, 0x32	; 50
    60f4:	74 75       	andi	r23, 0x54	; 84
    60f6:	76 77       	andi	r23, 0x76	; 118
    60f8:	78 79       	andi	r23, 0x98	; 152
    60fa:	7a 7b       	andi	r23, 0xBA	; 186
    60fc:	7c 7d       	andi	r23, 0xDC	; 220
    60fe:	7e 7f       	andi	r23, 0xFE	; 254
    6100:	00 02       	muls	r16, r16
    6102:	04 06       	cpc	r0, r20
    6104:	08 0a       	sbc	r0, r24
    6106:	0c 0e       	add	r0, r28
    6108:	10 12       	cpse	r1, r16
    610a:	14 16       	cp	r1, r20
    610c:	18 1a       	sub	r1, r24
    610e:	1c 1e       	adc	r1, r28
    6110:	20 22       	and	r2, r16
    6112:	24 26       	eor	r2, r20
    6114:	28 2a       	or	r2, r24
    6116:	2c 2e       	mov	r2, r28
    6118:	30 32       	cpi	r19, 0x20	; 32
    611a:	34 36       	cpi	r19, 0x64	; 100
    611c:	38 3a       	cpi	r19, 0xA8	; 168
    611e:	3c 3e       	cpi	r19, 0xEC	; 236
    6120:	40 42       	sbci	r20, 0x20	; 32
    6122:	44 46       	sbci	r20, 0x64	; 100
    6124:	48 4a       	sbci	r20, 0xA8	; 168
    6126:	4c 4e       	sbci	r20, 0xEC	; 236
    6128:	50 52       	subi	r21, 0x20	; 32
    612a:	54 56       	subi	r21, 0x64	; 100
    612c:	58 5a       	subi	r21, 0xA8	; 168
    612e:	5c 5e       	subi	r21, 0xEC	; 236
    6130:	60 62       	ori	r22, 0x20	; 32
    6132:	64 66       	ori	r22, 0x64	; 100
    6134:	68 6a       	ori	r22, 0xA8	; 168
    6136:	6c 6e       	ori	r22, 0xEC	; 236
    6138:	70 72       	andi	r23, 0x20	; 32
    613a:	74 76       	andi	r23, 0x64	; 100
    613c:	78 7a       	andi	r23, 0xA8	; 168
    613e:	7c 7e       	andi	r23, 0xEC	; 236
    6140:	7f 7d       	andi	r23, 0xDF	; 223
    6142:	7b 79       	andi	r23, 0x9B	; 155
    6144:	77 75       	andi	r23, 0x57	; 87
    6146:	73 71       	andi	r23, 0x13	; 19
    6148:	6f 6d       	ori	r22, 0xDF	; 223
    614a:	6b 69       	ori	r22, 0x9B	; 155
    614c:	67 65       	ori	r22, 0x57	; 87
    614e:	63 61       	ori	r22, 0x13	; 19
    6150:	5f 5d       	subi	r21, 0xDF	; 223
    6152:	5b 59       	subi	r21, 0x9B	; 155
    6154:	57 55       	subi	r21, 0x57	; 87
    6156:	53 51       	subi	r21, 0x13	; 19
    6158:	4f 4d       	sbci	r20, 0xDF	; 223
    615a:	4b 49       	sbci	r20, 0x9B	; 155
    615c:	47 45       	sbci	r20, 0x57	; 87
    615e:	43 41       	sbci	r20, 0x13	; 19
    6160:	3f 3d       	cpi	r19, 0xDF	; 223
    6162:	3b 39       	cpi	r19, 0x9B	; 155
    6164:	37 35       	cpi	r19, 0x57	; 87
    6166:	33 31       	cpi	r19, 0x13	; 19
    6168:	2f 2d       	mov	r18, r15
    616a:	2b 29       	or	r18, r11
    616c:	27 25       	eor	r18, r7
    616e:	23 21       	and	r18, r3
    6170:	1f 1d       	adc	r17, r15
    6172:	1b 19       	sub	r17, r11
    6174:	17 15       	cp	r17, r7
    6176:	13 11       	cpse	r17, r3
    6178:	0f 0d       	add	r16, r15
    617a:	0b 09       	sbc	r16, r11
    617c:	07 05       	cpc	r16, r7
    617e:	03 01       	movw	r0, r6
    6180:	ff fd       	.word	0xfdff	; ????
    6182:	fb f9       	.word	0xf9fb	; ????
    6184:	f7 f5       	brid	.+124    	; 0x6202 <waves+0x302>
    6186:	f3 f1       	brvs	.+124    	; 0x6204 <waves+0x304>
    6188:	ef ed       	ldi	r30, 0xDF	; 223
    618a:	eb e9       	ldi	r30, 0x9B	; 155
    618c:	e7 e5       	ldi	r30, 0x57	; 87
    618e:	e3 e1       	ldi	r30, 0x13	; 19
    6190:	df dd       	rcall	.-1090   	; 0x5d50 <steptable+0x48>
    6192:	db d9       	rcall	.-3146   	; 0x554a <StopSong+0xe>
    6194:	d7 d5       	rcall	.+2990   	; 0x6d44 <ProcessFading+0xa>
    6196:	d3 d1       	rcall	.+934    	; 0x653e <waves+0x63e>
    6198:	cf cd       	rjmp	.-1122   	; 0x5d38 <steptable+0x30>
    619a:	cb c9       	rjmp	.-3178   	; 0x5532 <StartSong+0x48>
    619c:	c7 c5       	rjmp	.+2958   	; 0x6d2c <FadeOut+0xa>
    619e:	c3 c1       	rjmp	.+902    	; 0x6526 <waves+0x626>
    61a0:	bf bd       	out	0x2f, r27	; 47
    61a2:	bb b9       	out	0x0b, r27	; 11
    61a4:	b7 b5       	in	r27, 0x27	; 39
    61a6:	b3 b1       	in	r27, 0x03	; 3
    61a8:	af ad       	ldd	r26, Y+63	; 0x3f
    61aa:	ab a9       	ldd	r26, Y+51	; 0x33
    61ac:	a7 a5       	ldd	r26, Z+47	; 0x2f
    61ae:	a3 a1       	ldd	r26, Z+35	; 0x23
    61b0:	9f 9d       	mul	r25, r15
    61b2:	9b 99       	sbic	0x13, 3	; 19
    61b4:	97 95       	ror	r25
    61b6:	93 91       	.word	0x9193	; ????
    61b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    61ba:	8b 89       	ldd	r24, Y+19	; 0x13
    61bc:	87 85       	ldd	r24, Z+15	; 0x0f
    61be:	83 81       	ldd	r24, Z+3	; 0x03
    61c0:	80 82       	st	Z, r8
    61c2:	84 86       	std	Z+12, r8	; 0x0c
    61c4:	88 8a       	std	Y+16, r8	; 0x10
    61c6:	8c 8e       	std	Y+28, r8	; 0x1c
    61c8:	90 92 94 96 	sts	0x9694, r9
    61cc:	98 9a       	sbi	0x13, 0	; 19
    61ce:	9c 9e       	mul	r9, r28
    61d0:	a0 a2       	std	Z+32, r10	; 0x20
    61d2:	a4 a6       	std	Z+44, r10	; 0x2c
    61d4:	a8 aa       	std	Y+48, r10	; 0x30
    61d6:	ac ae       	std	Y+60, r10	; 0x3c
    61d8:	b0 b2       	in	r11, 0x10	; 16
    61da:	b4 b6       	in	r11, 0x34	; 52
    61dc:	b8 ba       	out	0x18, r11	; 24
    61de:	bc be       	out	0x3c, r11	; 60
    61e0:	c0 c2       	rjmp	.+1408   	; 0x6762 <waves+0x862>
    61e2:	c4 c6       	rjmp	.+3464   	; 0x6f6c <LBPrintInt+0x42>
    61e4:	c8 ca       	rjmp	.-2672   	; 0x5776 <TriggerNote+0x26>
    61e6:	cc ce       	rjmp	.-616    	; 0x5f80 <waves+0x80>
    61e8:	d0 d2       	rcall	.+1440   	; 0x678a <waves+0x88a>
    61ea:	d4 d6       	rcall	.+3496   	; 0x6f94 <LBCollides+0xe>
    61ec:	d8 da       	rcall	.-2640   	; 0x579e <TriggerNote+0x4e>
    61ee:	dc de       	rcall	.-584    	; 0x5fa8 <waves+0xa8>
    61f0:	e0 e2       	ldi	r30, 0x20	; 32
    61f2:	e4 e6       	ldi	r30, 0x64	; 100
    61f4:	e8 ea       	ldi	r30, 0xA8	; 168
    61f6:	ec ee       	ldi	r30, 0xEC	; 236
    61f8:	f0 f2       	brcs	.-68     	; 0x61b6 <waves+0x2b6>
    61fa:	f4 f6       	brge	.-68     	; 0x61b8 <waves+0x2b8>
    61fc:	f8 fa       	.word	0xfaf8	; ????
    61fe:	fc fe       	.word	0xfefc	; ????
    6200:	7f 7f       	andi	r23, 0xFF	; 255
    6202:	7f 7f       	andi	r23, 0xFF	; 255
    6204:	7f 7f       	andi	r23, 0xFF	; 255
    6206:	7f 7f       	andi	r23, 0xFF	; 255
    6208:	7f 7f       	andi	r23, 0xFF	; 255
    620a:	7f 7f       	andi	r23, 0xFF	; 255
    620c:	7f 7f       	andi	r23, 0xFF	; 255
    620e:	7f 7f       	andi	r23, 0xFF	; 255
    6210:	7f 7f       	andi	r23, 0xFF	; 255
    6212:	7f 7f       	andi	r23, 0xFF	; 255
    6214:	7f 7f       	andi	r23, 0xFF	; 255
    6216:	7f 7f       	andi	r23, 0xFF	; 255
    6218:	7f 7f       	andi	r23, 0xFF	; 255
    621a:	7f 7f       	andi	r23, 0xFF	; 255
    621c:	7f 7f       	andi	r23, 0xFF	; 255
    621e:	7f 7f       	andi	r23, 0xFF	; 255
    6220:	7f 7f       	andi	r23, 0xFF	; 255
    6222:	7f 7f       	andi	r23, 0xFF	; 255
    6224:	7f 7f       	andi	r23, 0xFF	; 255
    6226:	7f 7f       	andi	r23, 0xFF	; 255
    6228:	7f 7f       	andi	r23, 0xFF	; 255
    622a:	7f 7f       	andi	r23, 0xFF	; 255
    622c:	7f 7f       	andi	r23, 0xFF	; 255
    622e:	7f 7f       	andi	r23, 0xFF	; 255
    6230:	7f 7f       	andi	r23, 0xFF	; 255
    6232:	7f 7f       	andi	r23, 0xFF	; 255
    6234:	7f 7f       	andi	r23, 0xFF	; 255
    6236:	7f 7f       	andi	r23, 0xFF	; 255
    6238:	7f 7f       	andi	r23, 0xFF	; 255
    623a:	7f 7f       	andi	r23, 0xFF	; 255
    623c:	7f 7f       	andi	r23, 0xFF	; 255
    623e:	7f 7f       	andi	r23, 0xFF	; 255
    6240:	80 80       	ld	r8, Z
    6242:	80 80       	ld	r8, Z
    6244:	80 80       	ld	r8, Z
    6246:	80 80       	ld	r8, Z
    6248:	80 80       	ld	r8, Z
    624a:	80 80       	ld	r8, Z
    624c:	80 80       	ld	r8, Z
    624e:	80 80       	ld	r8, Z
    6250:	80 80       	ld	r8, Z
    6252:	80 80       	ld	r8, Z
    6254:	80 80       	ld	r8, Z
    6256:	80 80       	ld	r8, Z
    6258:	80 80       	ld	r8, Z
    625a:	80 80       	ld	r8, Z
    625c:	80 80       	ld	r8, Z
    625e:	80 80       	ld	r8, Z
    6260:	80 80       	ld	r8, Z
    6262:	80 80       	ld	r8, Z
    6264:	80 80       	ld	r8, Z
    6266:	80 80       	ld	r8, Z
    6268:	80 80       	ld	r8, Z
    626a:	80 80       	ld	r8, Z
    626c:	80 80       	ld	r8, Z
    626e:	80 80       	ld	r8, Z
    6270:	80 80       	ld	r8, Z
    6272:	80 80       	ld	r8, Z
    6274:	80 80       	ld	r8, Z
    6276:	80 80       	ld	r8, Z
    6278:	80 80       	ld	r8, Z
    627a:	80 80       	ld	r8, Z
    627c:	80 80       	ld	r8, Z
    627e:	80 80       	ld	r8, Z
    6280:	80 80       	ld	r8, Z
    6282:	80 80       	ld	r8, Z
    6284:	80 80       	ld	r8, Z
    6286:	80 80       	ld	r8, Z
    6288:	80 80       	ld	r8, Z
    628a:	80 80       	ld	r8, Z
    628c:	80 80       	ld	r8, Z
    628e:	80 80       	ld	r8, Z
    6290:	80 80       	ld	r8, Z
    6292:	80 80       	ld	r8, Z
    6294:	80 80       	ld	r8, Z
    6296:	80 80       	ld	r8, Z
    6298:	80 80       	ld	r8, Z
    629a:	80 80       	ld	r8, Z
    629c:	80 80       	ld	r8, Z
    629e:	80 80       	ld	r8, Z
    62a0:	80 80       	ld	r8, Z
    62a2:	80 80       	ld	r8, Z
    62a4:	80 80       	ld	r8, Z
    62a6:	80 80       	ld	r8, Z
    62a8:	80 80       	ld	r8, Z
    62aa:	80 80       	ld	r8, Z
    62ac:	80 80       	ld	r8, Z
    62ae:	80 80       	ld	r8, Z
    62b0:	80 80       	ld	r8, Z
    62b2:	80 80       	ld	r8, Z
    62b4:	80 80       	ld	r8, Z
    62b6:	80 80       	ld	r8, Z
    62b8:	80 80       	ld	r8, Z
    62ba:	80 80       	ld	r8, Z
    62bc:	80 80       	ld	r8, Z
    62be:	80 80       	ld	r8, Z
    62c0:	80 80       	ld	r8, Z
    62c2:	80 80       	ld	r8, Z
    62c4:	80 80       	ld	r8, Z
    62c6:	80 80       	ld	r8, Z
    62c8:	80 80       	ld	r8, Z
    62ca:	80 80       	ld	r8, Z
    62cc:	80 80       	ld	r8, Z
    62ce:	80 80       	ld	r8, Z
    62d0:	80 80       	ld	r8, Z
    62d2:	80 80       	ld	r8, Z
    62d4:	80 80       	ld	r8, Z
    62d6:	80 80       	ld	r8, Z
    62d8:	80 80       	ld	r8, Z
    62da:	80 80       	ld	r8, Z
    62dc:	80 80       	ld	r8, Z
    62de:	80 80       	ld	r8, Z
    62e0:	80 80       	ld	r8, Z
    62e2:	80 80       	ld	r8, Z
    62e4:	80 80       	ld	r8, Z
    62e6:	80 80       	ld	r8, Z
    62e8:	80 80       	ld	r8, Z
    62ea:	80 80       	ld	r8, Z
    62ec:	80 80       	ld	r8, Z
    62ee:	80 80       	ld	r8, Z
    62f0:	80 80       	ld	r8, Z
    62f2:	80 80       	ld	r8, Z
    62f4:	80 80       	ld	r8, Z
    62f6:	80 80       	ld	r8, Z
    62f8:	80 80       	ld	r8, Z
    62fa:	80 80       	ld	r8, Z
    62fc:	80 80       	ld	r8, Z
    62fe:	80 80       	ld	r8, Z
    6300:	7f 7f       	andi	r23, 0xFF	; 255
    6302:	7f 7f       	andi	r23, 0xFF	; 255
    6304:	7f 7f       	andi	r23, 0xFF	; 255
    6306:	7f 7f       	andi	r23, 0xFF	; 255
    6308:	7f 7f       	andi	r23, 0xFF	; 255
    630a:	7f 7f       	andi	r23, 0xFF	; 255
    630c:	7f 7f       	andi	r23, 0xFF	; 255
    630e:	7f 7f       	andi	r23, 0xFF	; 255
    6310:	7f 7f       	andi	r23, 0xFF	; 255
    6312:	7f 7f       	andi	r23, 0xFF	; 255
    6314:	7f 7f       	andi	r23, 0xFF	; 255
    6316:	7f 7f       	andi	r23, 0xFF	; 255
    6318:	7f 7f       	andi	r23, 0xFF	; 255
    631a:	7f 7f       	andi	r23, 0xFF	; 255
    631c:	7f 7f       	andi	r23, 0xFF	; 255
    631e:	7f 7f       	andi	r23, 0xFF	; 255
    6320:	7f 7f       	andi	r23, 0xFF	; 255
    6322:	7f 7f       	andi	r23, 0xFF	; 255
    6324:	7f 7f       	andi	r23, 0xFF	; 255
    6326:	7f 7f       	andi	r23, 0xFF	; 255
    6328:	7f 7f       	andi	r23, 0xFF	; 255
    632a:	7f 7f       	andi	r23, 0xFF	; 255
    632c:	7f 7f       	andi	r23, 0xFF	; 255
    632e:	7f 7f       	andi	r23, 0xFF	; 255
    6330:	7f 7f       	andi	r23, 0xFF	; 255
    6332:	7f 7f       	andi	r23, 0xFF	; 255
    6334:	7f 7f       	andi	r23, 0xFF	; 255
    6336:	7f 7f       	andi	r23, 0xFF	; 255
    6338:	7f 7f       	andi	r23, 0xFF	; 255
    633a:	7f 7f       	andi	r23, 0xFF	; 255
    633c:	7f 7f       	andi	r23, 0xFF	; 255
    633e:	7f 7f       	andi	r23, 0xFF	; 255
    6340:	7f 7f       	andi	r23, 0xFF	; 255
    6342:	7f 7f       	andi	r23, 0xFF	; 255
    6344:	7f 7f       	andi	r23, 0xFF	; 255
    6346:	7f 7f       	andi	r23, 0xFF	; 255
    6348:	7f 7f       	andi	r23, 0xFF	; 255
    634a:	7f 7f       	andi	r23, 0xFF	; 255
    634c:	7f 7f       	andi	r23, 0xFF	; 255
    634e:	7f 7f       	andi	r23, 0xFF	; 255
    6350:	7f 7f       	andi	r23, 0xFF	; 255
    6352:	7f 7f       	andi	r23, 0xFF	; 255
    6354:	7f 7f       	andi	r23, 0xFF	; 255
    6356:	7f 7f       	andi	r23, 0xFF	; 255
    6358:	7f 7f       	andi	r23, 0xFF	; 255
    635a:	7f 7f       	andi	r23, 0xFF	; 255
    635c:	7f 7f       	andi	r23, 0xFF	; 255
    635e:	7f 7f       	andi	r23, 0xFF	; 255
    6360:	7f 7f       	andi	r23, 0xFF	; 255
    6362:	7f 7f       	andi	r23, 0xFF	; 255
    6364:	7f 7f       	andi	r23, 0xFF	; 255
    6366:	7f 7f       	andi	r23, 0xFF	; 255
    6368:	7f 7f       	andi	r23, 0xFF	; 255
    636a:	7f 7f       	andi	r23, 0xFF	; 255
    636c:	7f 7f       	andi	r23, 0xFF	; 255
    636e:	7f 7f       	andi	r23, 0xFF	; 255
    6370:	7f 7f       	andi	r23, 0xFF	; 255
    6372:	7f 7f       	andi	r23, 0xFF	; 255
    6374:	7f 7f       	andi	r23, 0xFF	; 255
    6376:	7f 7f       	andi	r23, 0xFF	; 255
    6378:	7f 7f       	andi	r23, 0xFF	; 255
    637a:	7f 7f       	andi	r23, 0xFF	; 255
    637c:	7f 7f       	andi	r23, 0xFF	; 255
    637e:	7f 7f       	andi	r23, 0xFF	; 255
    6380:	80 80       	ld	r8, Z
    6382:	80 80       	ld	r8, Z
    6384:	80 80       	ld	r8, Z
    6386:	80 80       	ld	r8, Z
    6388:	80 80       	ld	r8, Z
    638a:	80 80       	ld	r8, Z
    638c:	80 80       	ld	r8, Z
    638e:	80 80       	ld	r8, Z
    6390:	80 80       	ld	r8, Z
    6392:	80 80       	ld	r8, Z
    6394:	80 80       	ld	r8, Z
    6396:	80 80       	ld	r8, Z
    6398:	80 80       	ld	r8, Z
    639a:	80 80       	ld	r8, Z
    639c:	80 80       	ld	r8, Z
    639e:	80 80       	ld	r8, Z
    63a0:	80 80       	ld	r8, Z
    63a2:	80 80       	ld	r8, Z
    63a4:	80 80       	ld	r8, Z
    63a6:	80 80       	ld	r8, Z
    63a8:	80 80       	ld	r8, Z
    63aa:	80 80       	ld	r8, Z
    63ac:	80 80       	ld	r8, Z
    63ae:	80 80       	ld	r8, Z
    63b0:	80 80       	ld	r8, Z
    63b2:	80 80       	ld	r8, Z
    63b4:	80 80       	ld	r8, Z
    63b6:	80 80       	ld	r8, Z
    63b8:	80 80       	ld	r8, Z
    63ba:	80 80       	ld	r8, Z
    63bc:	80 80       	ld	r8, Z
    63be:	80 80       	ld	r8, Z
    63c0:	80 80       	ld	r8, Z
    63c2:	80 80       	ld	r8, Z
    63c4:	80 80       	ld	r8, Z
    63c6:	80 80       	ld	r8, Z
    63c8:	80 80       	ld	r8, Z
    63ca:	80 80       	ld	r8, Z
    63cc:	80 80       	ld	r8, Z
    63ce:	80 80       	ld	r8, Z
    63d0:	80 80       	ld	r8, Z
    63d2:	80 80       	ld	r8, Z
    63d4:	80 80       	ld	r8, Z
    63d6:	80 80       	ld	r8, Z
    63d8:	80 80       	ld	r8, Z
    63da:	80 80       	ld	r8, Z
    63dc:	80 80       	ld	r8, Z
    63de:	80 80       	ld	r8, Z
    63e0:	80 80       	ld	r8, Z
    63e2:	80 80       	ld	r8, Z
    63e4:	80 80       	ld	r8, Z
    63e6:	80 80       	ld	r8, Z
    63e8:	80 80       	ld	r8, Z
    63ea:	80 80       	ld	r8, Z
    63ec:	80 80       	ld	r8, Z
    63ee:	80 80       	ld	r8, Z
    63f0:	80 80       	ld	r8, Z
    63f2:	80 80       	ld	r8, Z
    63f4:	80 80       	ld	r8, Z
    63f6:	80 80       	ld	r8, Z
    63f8:	80 80       	ld	r8, Z
    63fa:	80 80       	ld	r8, Z
    63fc:	80 80       	ld	r8, Z
    63fe:	80 80       	ld	r8, Z
    6400:	7f 7f       	andi	r23, 0xFF	; 255
    6402:	7f 7f       	andi	r23, 0xFF	; 255
    6404:	7f 7f       	andi	r23, 0xFF	; 255
    6406:	7f 7f       	andi	r23, 0xFF	; 255
    6408:	7f 7f       	andi	r23, 0xFF	; 255
    640a:	7f 7f       	andi	r23, 0xFF	; 255
    640c:	7f 7f       	andi	r23, 0xFF	; 255
    640e:	7f 7f       	andi	r23, 0xFF	; 255
    6410:	7f 7f       	andi	r23, 0xFF	; 255
    6412:	7f 7f       	andi	r23, 0xFF	; 255
    6414:	7f 7f       	andi	r23, 0xFF	; 255
    6416:	7f 7f       	andi	r23, 0xFF	; 255
    6418:	7f 7f       	andi	r23, 0xFF	; 255
    641a:	7f 7f       	andi	r23, 0xFF	; 255
    641c:	7f 7f       	andi	r23, 0xFF	; 255
    641e:	7f 7f       	andi	r23, 0xFF	; 255
    6420:	7f 7f       	andi	r23, 0xFF	; 255
    6422:	7f 7f       	andi	r23, 0xFF	; 255
    6424:	7f 7f       	andi	r23, 0xFF	; 255
    6426:	7f 7f       	andi	r23, 0xFF	; 255
    6428:	7f 7f       	andi	r23, 0xFF	; 255
    642a:	7f 7f       	andi	r23, 0xFF	; 255
    642c:	7f 7f       	andi	r23, 0xFF	; 255
    642e:	7f 7f       	andi	r23, 0xFF	; 255
    6430:	7f 7f       	andi	r23, 0xFF	; 255
    6432:	7f 7f       	andi	r23, 0xFF	; 255
    6434:	7f 7f       	andi	r23, 0xFF	; 255
    6436:	7f 7f       	andi	r23, 0xFF	; 255
    6438:	7f 7f       	andi	r23, 0xFF	; 255
    643a:	7f 7f       	andi	r23, 0xFF	; 255
    643c:	7f 7f       	andi	r23, 0xFF	; 255
    643e:	7f 7f       	andi	r23, 0xFF	; 255
    6440:	7f 7f       	andi	r23, 0xFF	; 255
    6442:	7f 7f       	andi	r23, 0xFF	; 255
    6444:	7f 7f       	andi	r23, 0xFF	; 255
    6446:	7f 7f       	andi	r23, 0xFF	; 255
    6448:	7f 7f       	andi	r23, 0xFF	; 255
    644a:	7f 7f       	andi	r23, 0xFF	; 255
    644c:	7f 7f       	andi	r23, 0xFF	; 255
    644e:	7f 7f       	andi	r23, 0xFF	; 255
    6450:	7f 7f       	andi	r23, 0xFF	; 255
    6452:	7f 7f       	andi	r23, 0xFF	; 255
    6454:	7f 7f       	andi	r23, 0xFF	; 255
    6456:	7f 7f       	andi	r23, 0xFF	; 255
    6458:	7f 7f       	andi	r23, 0xFF	; 255
    645a:	7f 7f       	andi	r23, 0xFF	; 255
    645c:	7f 7f       	andi	r23, 0xFF	; 255
    645e:	7f 7f       	andi	r23, 0xFF	; 255
    6460:	7f 7f       	andi	r23, 0xFF	; 255
    6462:	7f 7f       	andi	r23, 0xFF	; 255
    6464:	7f 7f       	andi	r23, 0xFF	; 255
    6466:	7f 7f       	andi	r23, 0xFF	; 255
    6468:	7f 7f       	andi	r23, 0xFF	; 255
    646a:	7f 7f       	andi	r23, 0xFF	; 255
    646c:	7f 7f       	andi	r23, 0xFF	; 255
    646e:	7f 7f       	andi	r23, 0xFF	; 255
    6470:	7f 7f       	andi	r23, 0xFF	; 255
    6472:	7f 7f       	andi	r23, 0xFF	; 255
    6474:	7f 7f       	andi	r23, 0xFF	; 255
    6476:	7f 7f       	andi	r23, 0xFF	; 255
    6478:	7f 7f       	andi	r23, 0xFF	; 255
    647a:	7f 7f       	andi	r23, 0xFF	; 255
    647c:	7f 7f       	andi	r23, 0xFF	; 255
    647e:	7f 7f       	andi	r23, 0xFF	; 255
    6480:	7f 7f       	andi	r23, 0xFF	; 255
    6482:	7f 7f       	andi	r23, 0xFF	; 255
    6484:	7f 7f       	andi	r23, 0xFF	; 255
    6486:	7f 7f       	andi	r23, 0xFF	; 255
    6488:	7f 7f       	andi	r23, 0xFF	; 255
    648a:	7f 7f       	andi	r23, 0xFF	; 255
    648c:	7f 7f       	andi	r23, 0xFF	; 255
    648e:	7f 7f       	andi	r23, 0xFF	; 255
    6490:	7f 7f       	andi	r23, 0xFF	; 255
    6492:	7f 7f       	andi	r23, 0xFF	; 255
    6494:	7f 7f       	andi	r23, 0xFF	; 255
    6496:	7f 7f       	andi	r23, 0xFF	; 255
    6498:	7f 7f       	andi	r23, 0xFF	; 255
    649a:	7f 7f       	andi	r23, 0xFF	; 255
    649c:	7f 7f       	andi	r23, 0xFF	; 255
    649e:	7f 7f       	andi	r23, 0xFF	; 255
    64a0:	7f 7f       	andi	r23, 0xFF	; 255
    64a2:	7f 7f       	andi	r23, 0xFF	; 255
    64a4:	7f 7f       	andi	r23, 0xFF	; 255
    64a6:	7f 7f       	andi	r23, 0xFF	; 255
    64a8:	7f 7f       	andi	r23, 0xFF	; 255
    64aa:	7f 7f       	andi	r23, 0xFF	; 255
    64ac:	7f 7f       	andi	r23, 0xFF	; 255
    64ae:	7f 7f       	andi	r23, 0xFF	; 255
    64b0:	7f 7f       	andi	r23, 0xFF	; 255
    64b2:	7f 7f       	andi	r23, 0xFF	; 255
    64b4:	7f 7f       	andi	r23, 0xFF	; 255
    64b6:	7f 7f       	andi	r23, 0xFF	; 255
    64b8:	7f 7f       	andi	r23, 0xFF	; 255
    64ba:	7f 7f       	andi	r23, 0xFF	; 255
    64bc:	7f 7f       	andi	r23, 0xFF	; 255
    64be:	7f 7f       	andi	r23, 0xFF	; 255
    64c0:	80 80       	ld	r8, Z
    64c2:	80 80       	ld	r8, Z
    64c4:	80 80       	ld	r8, Z
    64c6:	80 80       	ld	r8, Z
    64c8:	80 80       	ld	r8, Z
    64ca:	80 80       	ld	r8, Z
    64cc:	80 80       	ld	r8, Z
    64ce:	80 80       	ld	r8, Z
    64d0:	80 80       	ld	r8, Z
    64d2:	80 80       	ld	r8, Z
    64d4:	80 80       	ld	r8, Z
    64d6:	80 80       	ld	r8, Z
    64d8:	80 80       	ld	r8, Z
    64da:	80 80       	ld	r8, Z
    64dc:	80 80       	ld	r8, Z
    64de:	80 80       	ld	r8, Z
    64e0:	80 80       	ld	r8, Z
    64e2:	80 80       	ld	r8, Z
    64e4:	80 80       	ld	r8, Z
    64e6:	80 80       	ld	r8, Z
    64e8:	80 80       	ld	r8, Z
    64ea:	80 80       	ld	r8, Z
    64ec:	80 80       	ld	r8, Z
    64ee:	80 80       	ld	r8, Z
    64f0:	80 80       	ld	r8, Z
    64f2:	80 80       	ld	r8, Z
    64f4:	80 80       	ld	r8, Z
    64f6:	80 80       	ld	r8, Z
    64f8:	80 80       	ld	r8, Z
    64fa:	80 80       	ld	r8, Z
    64fc:	80 80       	ld	r8, Z
    64fe:	80 80       	ld	r8, Z
    6500:	03 09       	sbc	r16, r3
    6502:	13 1e       	adc	r1, r19
    6504:	28 31       	cpi	r18, 0x18	; 24
    6506:	3a 40       	sbci	r19, 0x0A	; 10
    6508:	46 4c       	sbci	r20, 0xC6	; 198
    650a:	50 54       	subi	r21, 0x40	; 64
    650c:	58 5b       	subi	r21, 0xB8	; 184
    650e:	5e 61       	ori	r21, 0x1E	; 30
    6510:	63 65       	ori	r22, 0x53	; 83
    6512:	67 69       	ori	r22, 0x97	; 151
    6514:	6b 6c       	ori	r22, 0xCB	; 203
    6516:	6e 6f       	ori	r22, 0xFE	; 254
    6518:	70 71       	andi	r23, 0x10	; 16
    651a:	72 73       	andi	r23, 0x32	; 50
    651c:	74 75       	andi	r23, 0x54	; 84
    651e:	76 77       	andi	r23, 0x76	; 118
    6520:	77 78       	andi	r23, 0x87	; 135
    6522:	79 79       	andi	r23, 0x99	; 153
    6524:	7a 7a       	andi	r23, 0xAA	; 170
    6526:	7b 7b       	andi	r23, 0xBB	; 187
    6528:	7c 7c       	andi	r23, 0xCC	; 204
    652a:	7c 7d       	andi	r23, 0xDC	; 220
    652c:	7d 7d       	andi	r23, 0xDD	; 221
    652e:	7e 7e       	andi	r23, 0xEE	; 238
    6530:	7e 7e       	andi	r23, 0xEE	; 238
    6532:	7f 7f       	andi	r23, 0xFF	; 255
    6534:	7f 7f       	andi	r23, 0xFF	; 255
    6536:	7f 7f       	andi	r23, 0xFF	; 255
    6538:	7f 7f       	andi	r23, 0xFF	; 255
    653a:	7f 7f       	andi	r23, 0xFF	; 255
    653c:	7f 7f       	andi	r23, 0xFF	; 255
    653e:	7f 7f       	andi	r23, 0xFF	; 255
    6540:	7f 7f       	andi	r23, 0xFF	; 255
    6542:	7f 7f       	andi	r23, 0xFF	; 255
    6544:	7f 7f       	andi	r23, 0xFF	; 255
    6546:	7f 7f       	andi	r23, 0xFF	; 255
    6548:	7f 7f       	andi	r23, 0xFF	; 255
    654a:	7f 7f       	andi	r23, 0xFF	; 255
    654c:	7f 7e       	andi	r23, 0xEF	; 239
    654e:	7e 7e       	andi	r23, 0xEE	; 238
    6550:	7e 7d       	andi	r23, 0xDE	; 222
    6552:	7d 7d       	andi	r23, 0xDD	; 221
    6554:	7c 7c       	andi	r23, 0xCC	; 204
    6556:	7c 7b       	andi	r23, 0xBC	; 188
    6558:	7b 7a       	andi	r23, 0xAB	; 171
    655a:	7a 79       	andi	r23, 0x9A	; 154
    655c:	79 78       	andi	r23, 0x89	; 137
    655e:	77 77       	andi	r23, 0x77	; 119
    6560:	76 75       	andi	r23, 0x56	; 86
    6562:	74 73       	andi	r23, 0x34	; 52
    6564:	72 71       	andi	r23, 0x12	; 18
    6566:	70 6f       	ori	r23, 0xF0	; 240
    6568:	6e 6c       	ori	r22, 0xCE	; 206
    656a:	6b 69       	ori	r22, 0x9B	; 155
    656c:	67 65       	ori	r22, 0x57	; 87
    656e:	63 61       	ori	r22, 0x13	; 19
    6570:	5e 5b       	subi	r21, 0xBE	; 190
    6572:	58 54       	subi	r21, 0x48	; 72
    6574:	50 4c       	sbci	r21, 0xC0	; 192
    6576:	46 40       	sbci	r20, 0x06	; 6
    6578:	3a 31       	cpi	r19, 0x1A	; 26
    657a:	28 1e       	adc	r2, r24
    657c:	13 09       	sbc	r17, r3
    657e:	03 00       	.word	0x0003	; ????
    6580:	c6 cc       	rjmp	.-1652   	; 0x5f0e <waves+0xe>
    6582:	d5 db       	rcall	.-2134   	; 0x5d2e <steptable+0x26>
    6584:	df e3       	ldi	r29, 0x3F	; 63
    6586:	e5 e7       	ldi	r30, 0x75	; 117
    6588:	e9 ea       	ldi	r30, 0xA9	; 169
    658a:	eb ec       	ldi	r30, 0xCB	; 203
    658c:	ed ee       	ldi	r30, 0xED	; 237
    658e:	ef ef       	ldi	r30, 0xFF	; 255
    6590:	f0 f0       	brcs	.+60     	; 0x65ce <waves+0x6ce>
    6592:	f0 f1       	brcs	.+124    	; 0x6610 <waves+0x710>
    6594:	f1 f1       	breq	.+124    	; 0x6612 <waves+0x712>
    6596:	f1 f2       	breq	.-68     	; 0x6554 <waves+0x654>
    6598:	f2 f2       	brmi	.-68     	; 0x6556 <waves+0x656>
    659a:	f2 f2       	brmi	.-68     	; 0x6558 <waves+0x658>
    659c:	f2 f2       	brmi	.-68     	; 0x655a <waves+0x65a>
    659e:	f2 f3       	brmi	.-4      	; 0x659c <waves+0x69c>
    65a0:	f3 f3       	brvs	.-4      	; 0x659e <waves+0x69e>
    65a2:	f3 f3       	brvs	.-4      	; 0x65a0 <waves+0x6a0>
    65a4:	f3 f3       	brvs	.-4      	; 0x65a2 <waves+0x6a2>
    65a6:	f3 f3       	brvs	.-4      	; 0x65a4 <waves+0x6a4>
    65a8:	f3 f3       	brvs	.-4      	; 0x65a6 <waves+0x6a6>
    65aa:	f3 f3       	brvs	.-4      	; 0x65a8 <waves+0x6a8>
    65ac:	f3 f3       	brvs	.-4      	; 0x65aa <waves+0x6aa>
    65ae:	f3 f3       	brvs	.-4      	; 0x65ac <waves+0x6ac>
    65b0:	f3 f3       	brvs	.-4      	; 0x65ae <waves+0x6ae>
    65b2:	f3 f3       	brvs	.-4      	; 0x65b0 <waves+0x6b0>
    65b4:	f3 f3       	brvs	.-4      	; 0x65b2 <waves+0x6b2>
    65b6:	f3 f3       	brvs	.-4      	; 0x65b4 <waves+0x6b4>
    65b8:	f3 f3       	brvs	.-4      	; 0x65b6 <waves+0x6b6>
    65ba:	f3 f3       	brvs	.-4      	; 0x65b8 <waves+0x6b8>
    65bc:	f3 f3       	brvs	.-4      	; 0x65ba <waves+0x6ba>
    65be:	f3 f3       	brvs	.-4      	; 0x65bc <waves+0x6bc>
    65c0:	f3 f3       	brvs	.-4      	; 0x65be <waves+0x6be>
    65c2:	f3 f3       	brvs	.-4      	; 0x65c0 <waves+0x6c0>
    65c4:	f3 f3       	brvs	.-4      	; 0x65c2 <waves+0x6c2>
    65c6:	f3 f3       	brvs	.-4      	; 0x65c4 <waves+0x6c4>
    65c8:	f3 f3       	brvs	.-4      	; 0x65c6 <waves+0x6c6>
    65ca:	f3 f3       	brvs	.-4      	; 0x65c8 <waves+0x6c8>
    65cc:	f3 f3       	brvs	.-4      	; 0x65ca <waves+0x6ca>
    65ce:	f3 f3       	brvs	.-4      	; 0x65cc <waves+0x6cc>
    65d0:	f3 f3       	brvs	.-4      	; 0x65ce <waves+0x6ce>
    65d2:	f3 f3       	brvs	.-4      	; 0x65d0 <waves+0x6d0>
    65d4:	f3 f3       	brvs	.-4      	; 0x65d2 <waves+0x6d2>
    65d6:	f3 f3       	brvs	.-4      	; 0x65d4 <waves+0x6d4>
    65d8:	f3 f3       	brvs	.-4      	; 0x65d6 <waves+0x6d6>
    65da:	f3 f3       	brvs	.-4      	; 0x65d8 <waves+0x6d8>
    65dc:	f3 f3       	brvs	.-4      	; 0x65da <waves+0x6da>
    65de:	f3 f3       	brvs	.-4      	; 0x65dc <waves+0x6dc>
    65e0:	f2 f2       	brmi	.-68     	; 0x659e <waves+0x69e>
    65e2:	f2 f2       	brmi	.-68     	; 0x65a0 <waves+0x6a0>
    65e4:	f2 f2       	brmi	.-68     	; 0x65a2 <waves+0x6a2>
    65e6:	f2 f2       	brmi	.-68     	; 0x65a4 <waves+0x6a4>
    65e8:	f1 f1       	breq	.+124    	; 0x6666 <waves+0x766>
    65ea:	f1 f1       	breq	.+124    	; 0x6668 <waves+0x768>
    65ec:	f0 f0       	brcs	.+60     	; 0x662a <waves+0x72a>
    65ee:	f0 ef       	ldi	r31, 0xF0	; 240
    65f0:	ef ee       	ldi	r30, 0xEF	; 239
    65f2:	ed ec       	ldi	r30, 0xCD	; 205
    65f4:	eb ea       	ldi	r30, 0xAB	; 171
    65f6:	e9 e7       	ldi	r30, 0x79	; 121
    65f8:	e5 e3       	ldi	r30, 0x35	; 53
    65fa:	df db       	rcall	.-2114   	; 0x5dba <steptable+0xb2>
    65fc:	d5 cc       	rjmp	.-1622   	; 0x5fa8 <waves+0xa8>
    65fe:	c6 00       	.word	0x00c6	; ????
    6600:	00 28       	or	r0, r0
    6602:	3d 42       	sbci	r19, 0x2D	; 45
    6604:	30 2d       	mov	r19, r0
    6606:	2c 2b       	or	r18, r28
    6608:	2c 2d       	mov	r18, r12
    660a:	2e 2f       	mov	r18, r30
    660c:	30 32       	cpi	r19, 0x20	; 32
    660e:	33 35       	cpi	r19, 0x53	; 83
    6610:	37 39       	cpi	r19, 0x97	; 151
    6612:	3b 3d       	cpi	r19, 0xDB	; 219
    6614:	3f 41       	sbci	r19, 0x1F	; 31
    6616:	43 45       	sbci	r20, 0x53	; 83
    6618:	48 4a       	sbci	r20, 0xA8	; 168
    661a:	4c 4e       	sbci	r20, 0xEC	; 236
    661c:	50 53       	subi	r21, 0x30	; 48
    661e:	55 57       	subi	r21, 0x75	; 117
    6620:	59 5b       	subi	r21, 0xB9	; 185
    6622:	5d 5f       	subi	r21, 0xFD	; 253
    6624:	61 63       	ori	r22, 0x31	; 49
    6626:	65 67       	ori	r22, 0x75	; 117
    6628:	69 6b       	ori	r22, 0xB9	; 185
    662a:	6c 6e       	ori	r22, 0xEC	; 236
    662c:	70 71       	andi	r23, 0x10	; 16
    662e:	73 74       	andi	r23, 0x43	; 67
    6630:	75 77       	andi	r23, 0x75	; 117
    6632:	78 79       	andi	r23, 0x98	; 152
    6634:	7a 7b       	andi	r23, 0xBA	; 186
    6636:	7c 7d       	andi	r23, 0xDC	; 220
    6638:	7d 7e       	andi	r23, 0xED	; 237
    663a:	7e 7f       	andi	r23, 0xFE	; 254
    663c:	7f 7f       	andi	r23, 0xFF	; 255
    663e:	7f 7f       	andi	r23, 0xFF	; 255
    6640:	7f 7f       	andi	r23, 0xFF	; 255
    6642:	7f 7f       	andi	r23, 0xFF	; 255
    6644:	7f 7f       	andi	r23, 0xFF	; 255
    6646:	7e 7e       	andi	r23, 0xEE	; 238
    6648:	7d 7d       	andi	r23, 0xDD	; 221
    664a:	7c 7b       	andi	r23, 0xBC	; 188
    664c:	7a 79       	andi	r23, 0x9A	; 154
    664e:	78 77       	andi	r23, 0x78	; 120
    6650:	75 74       	andi	r23, 0x45	; 69
    6652:	73 71       	andi	r23, 0x13	; 19
    6654:	70 6e       	ori	r23, 0xE0	; 224
    6656:	6c 6b       	ori	r22, 0xBC	; 188
    6658:	69 67       	ori	r22, 0x79	; 121
    665a:	65 63       	ori	r22, 0x35	; 53
    665c:	61 5f       	subi	r22, 0xF1	; 241
    665e:	5d 5b       	subi	r21, 0xBD	; 189
    6660:	59 57       	subi	r21, 0x79	; 121
    6662:	55 53       	subi	r21, 0x35	; 53
    6664:	50 4e       	sbci	r21, 0xE0	; 224
    6666:	4c 4a       	sbci	r20, 0xAC	; 172
    6668:	48 45       	sbci	r20, 0x58	; 88
    666a:	43 41       	sbci	r20, 0x13	; 19
    666c:	3f 3d       	cpi	r19, 0xDF	; 223
    666e:	3b 39       	cpi	r19, 0x9B	; 155
    6670:	37 35       	cpi	r19, 0x57	; 87
    6672:	33 32       	cpi	r19, 0x23	; 35
    6674:	30 2f       	mov	r19, r16
    6676:	2e 2d       	mov	r18, r14
    6678:	2c 2b       	or	r18, r28
    667a:	2c 2d       	mov	r18, r12
    667c:	30 42       	sbci	r19, 0x20	; 32
    667e:	3d 28       	or	r3, r13
    6680:	00 e9       	ldi	r16, 0x90	; 144
    6682:	e5 fe       	sbrs	r14, 5
    6684:	d4 d7       	rcall	.+4008   	; 0x762e <append_tile_column+0x40>
    6686:	d7 d7       	rcall	.+4014   	; 0x7636 <append_tile_column+0x48>
    6688:	d6 d4       	rcall	.+2476   	; 0x7036 <LBMapSprite+0x46>
    668a:	d2 d0       	rcall	.+420    	; 0x6830 <waves+0x930>
    668c:	ce cc       	rjmp	.-1636   	; 0x602a <waves+0x12a>
    668e:	ca c8       	rjmp	.-3692   	; 0x5824 <ProcessMusic+0x54>
    6690:	c6 c3       	rjmp	.+1932   	; 0x6e1e <LBGetJoyPadState+0x46>
    6692:	c1 bf       	out	0x31, r28	; 49
    6694:	bd ba       	out	0x1d, r11	; 29
    6696:	b8 b6       	in	r11, 0x38	; 56
    6698:	b4 b1       	in	r27, 0x04	; 4
    669a:	af ad       	ldd	r26, Y+63	; 0x3f
    669c:	ab a9       	ldd	r26, Y+51	; 0x33
    669e:	a7 a5       	ldd	r26, Z+47	; 0x2f
    66a0:	a3 a1       	ldd	r26, Z+35	; 0x23
    66a2:	9f 9e       	mul	r9, r31
    66a4:	9c 9a       	sbi	0x13, 4	; 19
    66a6:	99 97       	sbiw	r26, 0x29	; 41
    66a8:	95 94       	asr	r9
    66aa:	93 91       	.word	0x9193	; ????
    66ac:	90 8f       	std	Z+24, r25	; 0x18
    66ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    66b0:	8b 8a       	std	Y+19, r8	; 0x13
    66b2:	89 88       	ldd	r8, Y+17	; 0x11
    66b4:	88 87       	std	Y+8, r24	; 0x08
    66b6:	86 85       	ldd	r24, Z+14	; 0x0e
    66b8:	85 84       	ldd	r8, Z+13	; 0x0d
    66ba:	84 84       	ldd	r8, Z+12	; 0x0c
    66bc:	83 83       	std	Z+3, r24	; 0x03
    66be:	83 83       	std	Z+3, r24	; 0x03
    66c0:	83 83       	std	Z+3, r24	; 0x03
    66c2:	83 83       	std	Z+3, r24	; 0x03
    66c4:	83 84       	ldd	r8, Z+11	; 0x0b
    66c6:	84 84       	ldd	r8, Z+12	; 0x0c
    66c8:	85 85       	ldd	r24, Z+13	; 0x0d
    66ca:	86 87       	std	Z+14, r24	; 0x0e
    66cc:	88 88       	ldd	r8, Y+16	; 0x10
    66ce:	89 8a       	std	Y+17, r8	; 0x11
    66d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    66d2:	8d 8f       	std	Y+29, r24	; 0x1d
    66d4:	90 91 93 94 	lds	r25, 0x9493
    66d8:	95 97       	sbiw	r26, 0x25	; 37
    66da:	99 9a       	sbi	0x13, 1	; 19
    66dc:	9c 9e       	mul	r9, r28
    66de:	9f a1       	ldd	r25, Y+39	; 0x27
    66e0:	a3 a5       	ldd	r26, Z+43	; 0x2b
    66e2:	a7 a9       	ldd	r26, Z+55	; 0x37
    66e4:	ab ad       	ldd	r26, Y+59	; 0x3b
    66e6:	af b1       	in	r26, 0x0f	; 15
    66e8:	b4 b6       	in	r11, 0x34	; 52
    66ea:	b8 ba       	out	0x18, r11	; 24
    66ec:	bd bf       	out	0x3d, r27	; 61
    66ee:	c1 c3       	rjmp	.+1922   	; 0x6e72 <LBPrintChar+0x4>
    66f0:	c6 c8       	rjmp	.-3700   	; 0x587e <ProcessMusic+0xae>
    66f2:	ca cc       	rjmp	.-1644   	; 0x6088 <waves+0x188>
    66f4:	ce d0       	rcall	.+412    	; 0x6892 <waves+0x992>
    66f6:	d2 d4       	rcall	.+2468   	; 0x709c <LBMoveSprite+0x8>
    66f8:	d6 d7       	rcall	.+4012   	; 0x76a6 <append_tile_column+0xb8>
    66fa:	d7 d7       	rcall	.+4014   	; 0x76aa <append_tile_column+0xbc>
    66fc:	d4 fe       	sbrs	r13, 4
    66fe:	e5 e9       	ldi	r30, 0x95	; 149
    6700:	f9 f8       	.word	0xf8f9	; ????
    6702:	f9 f5       	brne	.+126    	; 0x6782 <waves+0x882>
    6704:	eb e1       	ldi	r30, 0x1B	; 27
    6706:	dd de       	rcall	.-582    	; 0x64c2 <waves+0x5c2>
    6708:	e0 e2       	ldi	r30, 0x20	; 32
    670a:	e4 e5       	ldi	r30, 0x54	; 84
    670c:	e6 e5       	ldi	r30, 0x56	; 86
    670e:	e4 e2       	ldi	r30, 0x24	; 36
    6710:	de d9       	rcall	.-3140   	; 0x5ace <ProcessMusic+0x2fe>
    6712:	d2 ca       	rjmp	.-2652   	; 0x5cb8 <esmw+0x40>
    6714:	c1 b7       	in	r28, 0x31	; 49
    6716:	ac a2       	std	Y+36, r10	; 0x24
    6718:	99 91       	ld	r25, Y+
    671a:	8a 86       	std	Y+10, r8	; 0x0a
    671c:	83 81       	ldd	r24, Z+3	; 0x03
    671e:	80 80       	ld	r8, Z
    6720:	81 82       	std	Z+1, r8	; 0x01
    6722:	83 85       	ldd	r24, Z+11	; 0x0b
    6724:	86 88       	ldd	r8, Z+22	; 0x16
    6726:	8a 8c       	ldd	r8, Y+26	; 0x1a
    6728:	8d 8f       	std	Y+29, r24	; 0x1d
    672a:	90 92 93 95 	sts	0x9593, r9
    672e:	96 97       	sbiw	r26, 0x26	; 38
    6730:	98 99       	sbic	0x13, 0	; 19
    6732:	9a 9b       	sbis	0x13, 2	; 19
    6734:	9b 9c       	mul	r9, r11
    6736:	9d 9d       	mul	r25, r13
    6738:	9d 9e       	mul	r9, r29
    673a:	9e 9e       	mul	r9, r30
    673c:	9f 9f       	mul	r25, r31
    673e:	9f 9f       	mul	r25, r31
    6740:	9f 9f       	mul	r25, r31
    6742:	9f 9e       	mul	r9, r31
    6744:	9e 9e       	mul	r9, r30
    6746:	9d 9d       	mul	r25, r13
    6748:	9d 9c       	mul	r9, r13
    674a:	9b 9b       	sbis	0x13, 3	; 19
    674c:	9a 99       	sbic	0x13, 2	; 19
    674e:	98 97       	sbiw	r26, 0x28	; 40
    6750:	96 95       	lsr	r25
    6752:	93 92       	.word	0x9293	; ????
    6754:	90 8f       	std	Z+24, r25	; 0x18
    6756:	8d 8c       	ldd	r8, Y+29	; 0x1d
    6758:	8a 88       	ldd	r8, Y+18	; 0x12
    675a:	86 85       	ldd	r24, Z+14	; 0x0e
    675c:	83 82       	std	Z+3, r8	; 0x03
    675e:	81 80       	ldd	r8, Z+1	; 0x01
    6760:	80 81       	ld	r24, Z
    6762:	83 86       	std	Z+11, r8	; 0x0b
    6764:	8a 91       	ld	r24, -Y
    6766:	99 a2       	std	Y+33, r9	; 0x21
    6768:	ac b7       	in	r26, 0x3c	; 60
    676a:	c1 ca       	rjmp	.-2686   	; 0x5cee <esmw+0x76>
    676c:	d2 d9       	rcall	.-3164   	; 0x5b12 <ProcessMusic+0x342>
    676e:	de e2       	ldi	r29, 0x2E	; 46
    6770:	e4 e5       	ldi	r30, 0x54	; 84
    6772:	e6 e5       	ldi	r30, 0x56	; 86
    6774:	e4 e2       	ldi	r30, 0x24	; 36
    6776:	e0 de       	rcall	.-576    	; 0x6538 <waves+0x638>
    6778:	dd e1       	ldi	r29, 0x1D	; 29
    677a:	eb f5       	brvc	.+122    	; 0x67f6 <waves+0x8f6>
    677c:	f9 f8       	.word	0xf8f9	; ????
    677e:	f9 00       	.word	0x00f9	; ????
    6780:	07 08       	sbc	r0, r7
    6782:	07 0b       	sbc	r16, r23
    6784:	15 1f       	adc	r17, r21
    6786:	23 22       	and	r2, r19
    6788:	20 1e       	adc	r2, r16
    678a:	1c 1b       	sub	r17, r28
    678c:	1a 1b       	sub	r17, r26
    678e:	1c 1e       	adc	r1, r28
    6790:	22 27       	eor	r18, r18
    6792:	2e 36       	cpi	r18, 0x6E	; 110
    6794:	3f 49       	sbci	r19, 0x9F	; 159
    6796:	54 5e       	subi	r21, 0xE4	; 228
    6798:	67 6f       	ori	r22, 0xF7	; 247
    679a:	76 7a       	andi	r23, 0xA6	; 166
    679c:	7e 7f       	andi	r23, 0xFE	; 254
    679e:	7f 7f       	andi	r23, 0xFF	; 255
    67a0:	7f 7e       	andi	r23, 0xEF	; 239
    67a2:	7d 7b       	andi	r23, 0xBD	; 189
    67a4:	7a 78       	andi	r23, 0x8A	; 138
    67a6:	76 74       	andi	r23, 0x46	; 70
    67a8:	73 71       	andi	r23, 0x13	; 19
    67aa:	70 6e       	ori	r23, 0xE0	; 224
    67ac:	6d 6b       	ori	r22, 0xBD	; 189
    67ae:	6a 69       	ori	r22, 0x9A	; 154
    67b0:	68 67       	ori	r22, 0x78	; 120
    67b2:	66 65       	ori	r22, 0x56	; 86
    67b4:	65 64       	ori	r22, 0x45	; 69
    67b6:	64 63       	ori	r22, 0x34	; 52
    67b8:	63 62       	ori	r22, 0x23	; 35
    67ba:	62 62       	ori	r22, 0x22	; 34
    67bc:	61 61       	ori	r22, 0x11	; 17
    67be:	61 61       	ori	r22, 0x11	; 17
    67c0:	61 61       	ori	r22, 0x11	; 17
    67c2:	61 62       	ori	r22, 0x21	; 33
    67c4:	62 62       	ori	r22, 0x22	; 34
    67c6:	63 63       	ori	r22, 0x33	; 51
    67c8:	63 64       	ori	r22, 0x43	; 67
    67ca:	65 65       	ori	r22, 0x55	; 85
    67cc:	66 67       	ori	r22, 0x76	; 118
    67ce:	68 69       	ori	r22, 0x98	; 152
    67d0:	6a 6b       	ori	r22, 0xBA	; 186
    67d2:	6d 6e       	ori	r22, 0xED	; 237
    67d4:	70 71       	andi	r23, 0x10	; 16
    67d6:	73 74       	andi	r23, 0x43	; 67
    67d8:	76 78       	andi	r23, 0x86	; 134
    67da:	7a 7b       	andi	r23, 0xBA	; 186
    67dc:	7d 7e       	andi	r23, 0xED	; 237
    67de:	7f 7f       	andi	r23, 0xFF	; 255
    67e0:	7f 7f       	andi	r23, 0xFF	; 255
    67e2:	7e 7a       	andi	r23, 0xAE	; 174
    67e4:	76 6f       	ori	r23, 0xF6	; 246
    67e6:	67 5e       	subi	r22, 0xE7	; 231
    67e8:	54 49       	sbci	r21, 0x94	; 148
    67ea:	3f 36       	cpi	r19, 0x6F	; 111
    67ec:	2e 27       	eor	r18, r30
    67ee:	22 1e       	adc	r2, r18
    67f0:	1c 1b       	sub	r17, r28
    67f2:	1a 1b       	sub	r17, r26
    67f4:	1c 1e       	adc	r1, r28
    67f6:	20 22       	and	r2, r16
    67f8:	23 1f       	adc	r18, r19
    67fa:	15 0b       	sbc	r17, r21
    67fc:	07 08       	sbc	r0, r7
    67fe:	07 00       	.word	0x0007	; ????
    6800:	1f 31       	cpi	r17, 0x1F	; 31
    6802:	3d 44       	sbci	r19, 0x4D	; 77
    6804:	4e 53       	subi	r20, 0x3E	; 62
    6806:	54 56       	subi	r21, 0x64	; 100
    6808:	5a 5f       	subi	r21, 0xFA	; 250
    680a:	64 69       	ori	r22, 0x94	; 148
    680c:	6e 74       	andi	r22, 0x4E	; 78
    680e:	76 79       	andi	r23, 0x96	; 150
    6810:	7c 7f       	andi	r23, 0xFC	; 252
    6812:	7f 7f       	andi	r23, 0xFF	; 255
    6814:	7f 7f       	andi	r23, 0xFF	; 255
    6816:	7f 7f       	andi	r23, 0xFF	; 255
    6818:	7f 7f       	andi	r23, 0xFF	; 255
    681a:	7f 7f       	andi	r23, 0xFF	; 255
    681c:	7f 7f       	andi	r23, 0xFF	; 255
    681e:	7f 7f       	andi	r23, 0xFF	; 255
    6820:	7f 7f       	andi	r23, 0xFF	; 255
    6822:	7f 7f       	andi	r23, 0xFF	; 255
    6824:	7f 7f       	andi	r23, 0xFF	; 255
    6826:	7f 7f       	andi	r23, 0xFF	; 255
    6828:	7f 7f       	andi	r23, 0xFF	; 255
    682a:	7f 7f       	andi	r23, 0xFF	; 255
    682c:	7f 7f       	andi	r23, 0xFF	; 255
    682e:	7f 7f       	andi	r23, 0xFF	; 255
    6830:	7f 7f       	andi	r23, 0xFF	; 255
    6832:	7f 7f       	andi	r23, 0xFF	; 255
    6834:	7f 7f       	andi	r23, 0xFF	; 255
    6836:	7f 7f       	andi	r23, 0xFF	; 255
    6838:	7f 7f       	andi	r23, 0xFF	; 255
    683a:	7f 7f       	andi	r23, 0xFF	; 255
    683c:	7f 7f       	andi	r23, 0xFF	; 255
    683e:	7f 7f       	andi	r23, 0xFF	; 255
    6840:	7f 7f       	andi	r23, 0xFF	; 255
    6842:	7f 7f       	andi	r23, 0xFF	; 255
    6844:	7f 7f       	andi	r23, 0xFF	; 255
    6846:	7f 7f       	andi	r23, 0xFF	; 255
    6848:	7f 7f       	andi	r23, 0xFF	; 255
    684a:	7f 7f       	andi	r23, 0xFF	; 255
    684c:	7f 7f       	andi	r23, 0xFF	; 255
    684e:	7f 7f       	andi	r23, 0xFF	; 255
    6850:	7f 7f       	andi	r23, 0xFF	; 255
    6852:	7f 7f       	andi	r23, 0xFF	; 255
    6854:	7f 7f       	andi	r23, 0xFF	; 255
    6856:	7f 7f       	andi	r23, 0xFF	; 255
    6858:	7f 7f       	andi	r23, 0xFF	; 255
    685a:	7f 7f       	andi	r23, 0xFF	; 255
    685c:	7f 7f       	andi	r23, 0xFF	; 255
    685e:	7f 7f       	andi	r23, 0xFF	; 255
    6860:	7f 7f       	andi	r23, 0xFF	; 255
    6862:	7f 7f       	andi	r23, 0xFF	; 255
    6864:	7f 7f       	andi	r23, 0xFF	; 255
    6866:	7f 7f       	andi	r23, 0xFF	; 255
    6868:	7f 7f       	andi	r23, 0xFF	; 255
    686a:	7f 7f       	andi	r23, 0xFF	; 255
    686c:	7f 7f       	andi	r23, 0xFF	; 255
    686e:	7f 7f       	andi	r23, 0xFF	; 255
    6870:	7f 7f       	andi	r23, 0xFF	; 255
    6872:	7f 7f       	andi	r23, 0xFF	; 255
    6874:	7f 7f       	andi	r23, 0xFF	; 255
    6876:	7f 7f       	andi	r23, 0xFF	; 255
    6878:	7f 7f       	andi	r23, 0xFF	; 255
    687a:	7f 7c       	andi	r23, 0xCF	; 207
    687c:	78 71       	andi	r23, 0x18	; 24
    687e:	68 4c       	sbci	r22, 0xC8	; 200
    6880:	2c 1c       	adc	r2, r12
    6882:	12 0c       	add	r1, r2
    6884:	0a 0b       	sbc	r16, r26
    6886:	0a 05       	cpc	r16, r10
    6888:	fd f3       	brhs	.-2      	; 0x6888 <waves+0x988>
    688a:	e9 df       	rcall	.-46     	; 0x685e <waves+0x95e>
    688c:	d4 ca       	rjmp	.-2648   	; 0x5e36 <steptable+0x12e>
    688e:	c0 b7       	in	r28, 0x30	; 48
    6890:	ae a6       	std	Y+46, r10	; 0x2e
    6892:	9e 97       	sbiw	r26, 0x2e	; 46
    6894:	91 8b       	std	Z+17, r25	; 0x11
    6896:	86 85       	ldd	r24, Z+14	; 0x0e
    6898:	82 80       	ldd	r8, Z+2	; 0x02
    689a:	80 80       	ld	r8, Z
    689c:	80 80       	ld	r8, Z
    689e:	80 80       	ld	r8, Z
    68a0:	80 80       	ld	r8, Z
    68a2:	80 80       	ld	r8, Z
    68a4:	80 80       	ld	r8, Z
    68a6:	80 80       	ld	r8, Z
    68a8:	80 80       	ld	r8, Z
    68aa:	80 80       	ld	r8, Z
    68ac:	80 80       	ld	r8, Z
    68ae:	80 80       	ld	r8, Z
    68b0:	80 80       	ld	r8, Z
    68b2:	80 80       	ld	r8, Z
    68b4:	80 80       	ld	r8, Z
    68b6:	80 80       	ld	r8, Z
    68b8:	80 80       	ld	r8, Z
    68ba:	80 80       	ld	r8, Z
    68bc:	80 80       	ld	r8, Z
    68be:	80 80       	ld	r8, Z
    68c0:	80 80       	ld	r8, Z
    68c2:	80 80       	ld	r8, Z
    68c4:	80 80       	ld	r8, Z
    68c6:	80 80       	ld	r8, Z
    68c8:	80 80       	ld	r8, Z
    68ca:	80 80       	ld	r8, Z
    68cc:	80 80       	ld	r8, Z
    68ce:	80 80       	ld	r8, Z
    68d0:	80 80       	ld	r8, Z
    68d2:	80 80       	ld	r8, Z
    68d4:	80 80       	ld	r8, Z
    68d6:	80 80       	ld	r8, Z
    68d8:	80 80       	ld	r8, Z
    68da:	80 80       	ld	r8, Z
    68dc:	80 80       	ld	r8, Z
    68de:	80 80       	ld	r8, Z
    68e0:	80 80       	ld	r8, Z
    68e2:	80 80       	ld	r8, Z
    68e4:	80 80       	ld	r8, Z
    68e6:	80 80       	ld	r8, Z
    68e8:	80 80       	ld	r8, Z
    68ea:	80 80       	ld	r8, Z
    68ec:	80 80       	ld	r8, Z
    68ee:	80 80       	ld	r8, Z
    68f0:	80 80       	ld	r8, Z
    68f2:	80 80       	ld	r8, Z
    68f4:	80 87       	std	Z+8, r24	; 0x08
    68f6:	91 9d       	mul	r25, r1
    68f8:	ac c4       	rjmp	.+2392   	; 0x7252 <init_player_state+0x8a>
    68fa:	cb d4       	rcall	.+2454   	; 0x7292 <init_player_state+0xca>
    68fc:	dd f2       	brhs	.-74     	; 0x68b4 <waves+0x9b4>
    68fe:	fa fa       	.word	0xfafa	; ????

00006900 <RestoreBackground>:
	unsigned char free_tile_index, userRamTilesCount=0,userRamTilesCount_tmp=0;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=userRamTilesCount;i<free_tile_index;i++){
    6900:	80 91 db 0c 	lds	r24, 0x0CDB
    6904:	90 91 69 0d 	lds	r25, 0x0D69
    6908:	89 17       	cp	r24, r25
    690a:	78 f4       	brcc	.+30     	; 0x692a <RestoreBackground+0x2a>
			//vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
			*ram_tiles_restore[i].addr=ram_tiles_restore[i].tileIndex;
    690c:	e8 2f       	mov	r30, r24
    690e:	f0 e0       	ldi	r31, 0x00	; 0
    6910:	9f 01       	movw	r18, r30
    6912:	22 0f       	add	r18, r18
    6914:	33 1f       	adc	r19, r19
    6916:	e2 0f       	add	r30, r18
    6918:	f3 1f       	adc	r31, r19
    691a:	e6 5c       	subi	r30, 0xC6	; 198
    691c:	f3 4f       	sbci	r31, 0xF3	; 243
    691e:	a0 81       	ld	r26, Z
    6920:	b1 81       	ldd	r27, Z+1	; 0x01
    6922:	92 81       	ldd	r25, Z+2	; 0x02
    6924:	9c 93       	st	X, r25
	unsigned char free_tile_index, userRamTilesCount=0,userRamTilesCount_tmp=0;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=userRamTilesCount;i<free_tile_index;i++){
    6926:	8f 5f       	subi	r24, 0xFF	; 255
    6928:	ed cf       	rjmp	.-38     	; 0x6904 <RestoreBackground+0x4>
			//vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
			*ram_tiles_restore[i].addr=ram_tiles_restore[i].tileIndex;
		}	
	}
    692a:	08 95       	ret

0000692c <ProcessSprites>:
		}

	}
	*/

	void ProcessSprites(){
    692c:	2f 92       	push	r2
    692e:	3f 92       	push	r3
    6930:	4f 92       	push	r4
    6932:	5f 92       	push	r5
    6934:	6f 92       	push	r6
    6936:	7f 92       	push	r7
    6938:	8f 92       	push	r8
    693a:	9f 92       	push	r9
    693c:	af 92       	push	r10
    693e:	bf 92       	push	r11
    6940:	cf 92       	push	r12
    6942:	df 92       	push	r13
    6944:	ef 92       	push	r14
    6946:	ff 92       	push	r15
    6948:	0f 93       	push	r16
    694a:	1f 93       	push	r17
    694c:	cf 93       	push	r28
    694e:	df 93       	push	r29
    6950:	00 d0       	rcall	.+0      	; 0x6952 <ProcessSprites+0x26>
    6952:	00 d0       	rcall	.+0      	; 0x6954 <ProcessSprites+0x28>
    6954:	cd b7       	in	r28, 0x3d	; 61
    6956:	de b7       	in	r29, 0x3e	; 62
	
		unsigned char i,bx,by,dx,dy,bt,x,y,tx=1,ty=1,wx,wy;
		unsigned int ramPtr,ssx,ssy;

		if(!spritesOn) return;
    6958:	80 91 00 05 	lds	r24, 0x0500
    695c:	88 23       	and	r24, r24
    695e:	09 f4       	brne	.+2      	; 0x6962 <ProcessSprites+0x36>
    6960:	e0 c0       	rjmp	.+448    	; 0x6b22 <ProcessSprites+0x1f6>

		userRamTilesCount=userRamTilesCount_tmp;
    6962:	80 91 da 0c 	lds	r24, 0x0CDA
    6966:	80 93 db 0c 	sts	0x0CDB, r24
		free_tile_index=userRamTilesCount;
    696a:	80 93 69 0d 	sts	0x0D69, r24
    696e:	e2 e0       	ldi	r30, 0x02	; 2
    6970:	ce 2e       	mov	r12, r30
    6972:	e5 e0       	ldi	r30, 0x05	; 5
    6974:	de 2e       	mov	r13, r30
	
		for(i=0;i<MAX_SPRITES;i++){
    6976:	71 2c       	mov	r7, r1
			bx=sprites[i].x;
    6978:	f6 01       	movw	r30, r12
    697a:	20 81       	ld	r18, Z

			if(bx!=(SCREEN_TILES_H*TILE_WIDTH)){
    697c:	20 3e       	cpi	r18, 0xE0	; 224
    697e:	09 f4       	brne	.+2      	; 0x6982 <ProcessSprites+0x56>
    6980:	b1 c0       	rjmp	.+354    	; 0x6ae4 <ProcessSprites+0x1b8>
				//get tile's screen section offsets
				
				#if SCROLLING == 1
					ssx=sprites[i].x+Screen.scrollX;
    6982:	80 91 9c 0c 	lds	r24, 0x0C9C
    6986:	90 e0       	ldi	r25, 0x00	; 0
    6988:	82 0f       	add	r24, r18
    698a:	91 1d       	adc	r25, r1
					ssy=sprites[i].y+Screen.scrollY;
    698c:	41 81       	ldd	r20, Z+1	; 0x01
    698e:	20 91 9d 0c 	lds	r18, 0x0C9D
    6992:	30 e0       	ldi	r19, 0x00	; 0
    6994:	24 0f       	add	r18, r20
    6996:	31 1d       	adc	r19, r1

				tx=1;
				ty=1;

				//get the BG tiles that are overlapped by the sprite
				bx=ssx>>3;
    6998:	ac 01       	movw	r20, r24
    699a:	73 e0       	ldi	r23, 0x03	; 3
    699c:	56 95       	lsr	r21
    699e:	47 95       	ror	r20
    69a0:	7a 95       	dec	r23
    69a2:	e1 f7       	brne	.-8      	; 0x699c <ProcessSprites+0x70>
    69a4:	64 2e       	mov	r6, r20
				dx=ssx&0x7;
    69a6:	87 70       	andi	r24, 0x07	; 7
				if(dx>0) tx++;
    69a8:	11 f0       	breq	.+4      	; 0x69ae <ProcessSprites+0x82>
    69aa:	92 e0       	ldi	r25, 0x02	; 2
    69ac:	01 c0       	rjmp	.+2      	; 0x69b0 <ProcessSprites+0x84>
   				#else
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
    69ae:	91 e0       	ldi	r25, 0x01	; 1
    69b0:	99 83       	std	Y+1, r25	; 0x01
				dx=ssx&0x7;
				if(dx>0) tx++;

				//by=ssy>>3;
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
    69b2:	a9 01       	movw	r20, r18
    69b4:	63 e0       	ldi	r22, 0x03	; 3
    69b6:	56 95       	lsr	r21
    69b8:	47 95       	ror	r20
    69ba:	6a 95       	dec	r22
    69bc:	e1 f7       	brne	.-8      	; 0x69b6 <ProcessSprites+0x8a>
    69be:	54 2e       	mov	r5, r20
				dy=ssy%TILE_HEIGHT;
    69c0:	27 70       	andi	r18, 0x07	; 7
				if(dy>0) ty++;			
    69c2:	19 f0       	breq	.+6      	; 0x69ca <ProcessSprites+0x9e>
    69c4:	52 e0       	ldi	r21, 0x02	; 2
    69c6:	35 2e       	mov	r3, r21
    69c8:	02 c0       	rjmp	.+4      	; 0x69ce <ProcessSprites+0xa2>
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
				ty=1;
    69ca:	33 24       	eor	r3, r3
    69cc:	33 94       	inc	r3
								bt=free_tile_index;
								free_tile_index++;
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    69ce:	30 e0       	ldi	r19, 0x00	; 0
    69d0:	32 2f       	mov	r19, r18
    69d2:	22 27       	eor	r18, r18
    69d4:	f9 01       	movw	r30, r18
    69d6:	e8 0f       	add	r30, r24
    69d8:	f1 1d       	adc	r31, r1
    69da:	fc 83       	std	Y+4, r31	; 0x04
    69dc:	eb 83       	std	Y+3, r30	; 0x03
    69de:	e1 2c       	mov	r14, r1
    69e0:	f1 2c       	mov	r15, r1
    69e2:	be 2c       	mov	r11, r14
    69e4:	aa 24       	eor	r10, r10
    69e6:	26 2c       	mov	r2, r6
    69e8:	45 2c       	mov	r4, r5
    69ea:	4e 0c       	add	r4, r14
								    wy-=(VRAM_TILES_V*2);
							    }else if(wy>=VRAM_TILES_V){
							    	wy-=VRAM_TILES_V;
							    }
                            #else
                                if(wy>=(Screen.scrollHeight*2)){
    69ec:	84 2c       	mov	r8, r4
    69ee:	91 2c       	mov	r9, r1
    69f0:	84 2d       	mov	r24, r4
    69f2:	20 91 9e 0c 	lds	r18, 0x0C9E
    69f6:	42 2f       	mov	r20, r18
    69f8:	50 e0       	ldi	r21, 0x00	; 0
    69fa:	44 0f       	add	r20, r20
    69fc:	55 1f       	adc	r21, r21
    69fe:	84 16       	cp	r8, r20
    6a00:	95 06       	cpc	r9, r21
    6a02:	14 f0       	brlt	.+4      	; 0x6a08 <ProcessSprites+0xdc>
								    wy-=(Screen.scrollHeight*2);
    6a04:	22 0f       	add	r18, r18
    6a06:	03 c0       	rjmp	.+6      	; 0x6a0e <ProcessSprites+0xe2>
							    }else if(wy>=Screen.scrollHeight){
    6a08:	42 16       	cp	r4, r18
    6a0a:	10 f0       	brcs	.+4      	; 0x6a10 <ProcessSprites+0xe4>
							    	wy-=Screen.scrollHeight;
    6a0c:	84 2d       	mov	r24, r4
    6a0e:	82 1b       	sub	r24, r18
							    }
                            #endif
							if(wx>=VRAM_TILES_H)wx-=VRAM_TILES_H; //should always be 32
    6a10:	ff e1       	ldi	r31, 0x1F	; 31
    6a12:	f2 15       	cp	r31, r2
    6a14:	18 f4       	brcc	.+6      	; 0x6a1c <ProcessSprites+0xf0>
    6a16:	00 ee       	ldi	r16, 0xE0	; 224
    6a18:	02 0d       	add	r16, r2
    6a1a:	01 c0       	rjmp	.+2      	; 0x6a1e <ProcessSprites+0xf2>
    6a1c:	02 2d       	mov	r16, r2

							#if SCROLLING == 0
								ramPtr=(wy*VRAM_TILES_H)+wx;
							#else

								ramPtr=((wy>>3)*256)+(wx*8)+(wy&7);	
    6a1e:	28 2f       	mov	r18, r24
    6a20:	26 95       	lsr	r18
    6a22:	26 95       	lsr	r18
    6a24:	26 95       	lsr	r18
    6a26:	10 e0       	ldi	r17, 0x00	; 0
    6a28:	40 e2       	ldi	r20, 0x20	; 32
    6a2a:	24 9f       	mul	r18, r20
    6a2c:	00 0d       	add	r16, r0
    6a2e:	11 1d       	adc	r17, r1
    6a30:	11 24       	eor	r1, r1
    6a32:	23 e0       	ldi	r18, 0x03	; 3
    6a34:	00 0f       	add	r16, r16
    6a36:	11 1f       	adc	r17, r17
    6a38:	2a 95       	dec	r18
    6a3a:	e1 f7       	brne	.-8      	; 0x6a34 <ProcessSprites+0x108>
    6a3c:	87 70       	andi	r24, 0x07	; 7
    6a3e:	08 0f       	add	r16, r24
    6a40:	11 1d       	adc	r17, r1

							#endif

							bt=vram[ramPtr];						
    6a42:	00 50       	subi	r16, 0x00	; 0
    6a44:	1f 4f       	sbci	r17, 0xFF	; 255
    6a46:	f8 01       	movw	r30, r16
    6a48:	70 81       	ld	r23, Z

							if( ((bt>=RAM_TILES_COUNT) | (bt<userRamTilesCount)) && (free_tile_index < RAM_TILES_COUNT) ){ //if no ram free ignore tile
    6a4a:	81 e0       	ldi	r24, 0x01	; 1
    6a4c:	7c 31       	cpi	r23, 0x1C	; 28
    6a4e:	08 f4       	brcc	.+2      	; 0x6a52 <ProcessSprites+0x126>
    6a50:	80 e0       	ldi	r24, 0x00	; 0
    6a52:	21 e0       	ldi	r18, 0x01	; 1
    6a54:	30 91 db 0c 	lds	r19, 0x0CDB
    6a58:	73 17       	cp	r23, r19
    6a5a:	18 f0       	brcs	.+6      	; 0x6a62 <ProcessSprites+0x136>
    6a5c:	20 e0       	ldi	r18, 0x00	; 0
    6a5e:	88 23       	and	r24, r24
    6a60:	51 f1       	breq	.+84     	; 0x6ab6 <ProcessSprites+0x18a>
    6a62:	60 91 69 0d 	lds	r22, 0x0D69
    6a66:	6c 31       	cpi	r22, 0x1C	; 28
    6a68:	20 f5       	brcc	.+72     	; 0x6ab2 <ProcessSprites+0x186>
								if( bt>=RAM_TILES_COUNT ){
    6a6a:	88 23       	and	r24, r24
    6a6c:	31 f0       	breq	.+12     	; 0x6a7a <ProcessSprites+0x14e>
									//tile is mapped to flash. Copy it to next free RAM tile.
									CopyFlashTile(bt-RAM_TILES_COUNT,free_tile_index);
    6a6e:	84 ee       	ldi	r24, 0xE4	; 228
    6a70:	87 0f       	add	r24, r23
    6a72:	7a 83       	std	Y+2, r23	; 0x02
    6a74:	0e 94 a2 24 	call	0x4944	; 0x4944 <CopyFlashTile>
    6a78:	06 c0       	rjmp	.+12     	; 0x6a86 <ProcessSprites+0x15a>
								}else if(bt<userRamTilesCount){
    6a7a:	22 23       	and	r18, r18
    6a7c:	29 f0       	breq	.+10     	; 0x6a88 <ProcessSprites+0x15c>
									//tile is a user ram tile. Copy it to next free RAM tile.
									CopyRamTile(bt,free_tile_index);
    6a7e:	87 2f       	mov	r24, r23
    6a80:	7a 83       	std	Y+2, r23	; 0x02
    6a82:	0e 94 31 25 	call	0x4a62	; 0x4a62 <CopyRamTile>
    6a86:	7a 81       	ldd	r23, Y+2	; 0x02
								}
								ram_tiles_restore[free_tile_index].addr=(&vram[ramPtr]);
    6a88:	80 91 69 0d 	lds	r24, 0x0D69
    6a8c:	e8 2f       	mov	r30, r24
    6a8e:	f0 e0       	ldi	r31, 0x00	; 0
    6a90:	9f 01       	movw	r18, r30
    6a92:	22 0f       	add	r18, r18
    6a94:	33 1f       	adc	r19, r19
    6a96:	e2 0f       	add	r30, r18
    6a98:	f3 1f       	adc	r31, r19
    6a9a:	e6 5c       	subi	r30, 0xC6	; 198
    6a9c:	f3 4f       	sbci	r31, 0xF3	; 243
    6a9e:	11 83       	std	Z+1, r17	; 0x01
    6aa0:	00 83       	st	Z, r16
								ram_tiles_restore[free_tile_index].tileIndex=bt;
    6aa2:	72 83       	std	Z+2, r23	; 0x02
								vram[ramPtr]=free_tile_index;
    6aa4:	f8 01       	movw	r30, r16
    6aa6:	80 83       	st	Z, r24
								bt=free_tile_index;
								free_tile_index++;
    6aa8:	21 e0       	ldi	r18, 0x01	; 1
    6aaa:	28 0f       	add	r18, r24
    6aac:	20 93 69 0d 	sts	0x0D69, r18
									CopyRamTile(bt,free_tile_index);
								}
								ram_tiles_restore[free_tile_index].addr=(&vram[ramPtr]);
								ram_tiles_restore[free_tile_index].tileIndex=bt;
								vram[ramPtr]=free_tile_index;
								bt=free_tile_index;
    6ab0:	78 2f       	mov	r23, r24
								free_tile_index++;
							}
				
							if(bt<RAM_TILES_COUNT){				
    6ab2:	7c 31       	cpi	r23, 0x1C	; 28
    6ab4:	38 f4       	brcc	.+14     	; 0x6ac4 <ProcessSprites+0x198>
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    6ab6:	2b 81       	ldd	r18, Y+3	; 0x03
    6ab8:	3c 81       	ldd	r19, Y+4	; 0x04
    6aba:	a5 01       	movw	r20, r10
    6abc:	67 2f       	mov	r22, r23
    6abe:	87 2d       	mov	r24, r7
    6ac0:	0e 94 be 25 	call	0x4b7c	; 0x4b7c <BlitSprite>
    6ac4:	ff ef       	ldi	r31, 0xFF	; 255
    6ac6:	af 1a       	sub	r10, r31
    6ac8:	bf 0a       	sbc	r11, r31
    6aca:	23 94       	inc	r2
    6acc:	82 2d       	mov	r24, r2
    6ace:	86 19       	sub	r24, r6
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){

					for(x=0;x<tx;x++){
    6ad0:	99 81       	ldd	r25, Y+1	; 0x01
    6ad2:	89 17       	cp	r24, r25
    6ad4:	08 f4       	brcc	.+2      	; 0x6ad8 <ProcessSprites+0x1ac>
    6ad6:	8c cf       	rjmp	.-232    	; 0x69f0 <ProcessSprites+0xc4>
    6ad8:	ef ef       	ldi	r30, 0xFF	; 255
    6ada:	ee 1a       	sub	r14, r30
    6adc:	fe 0a       	sbc	r15, r30
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){
    6ade:	e3 14       	cp	r14, r3
    6ae0:	08 f4       	brcc	.+2      	; 0x6ae4 <ProcessSprites+0x1b8>
    6ae2:	7f cf       	rjmp	.-258    	; 0x69e2 <ProcessSprites+0xb6>
		if(!spritesOn) return;

		userRamTilesCount=userRamTilesCount_tmp;
		free_tile_index=userRamTilesCount;
	
		for(i=0;i<MAX_SPRITES;i++){
    6ae4:	73 94       	inc	r7
    6ae6:	f4 e0       	ldi	r31, 0x04	; 4
    6ae8:	cf 0e       	add	r12, r31
    6aea:	d1 1c       	adc	r13, r1
    6aec:	4e e0       	ldi	r20, 0x0E	; 14
    6aee:	74 12       	cpse	r7, r20
    6af0:	43 cf       	rjmp	.-378    	; 0x6978 <ProcessSprites+0x4c>


		//restore BG tiles
		RestoreBackground();

	}
    6af2:	0f 90       	pop	r0
    6af4:	0f 90       	pop	r0
    6af6:	0f 90       	pop	r0
    6af8:	0f 90       	pop	r0
    6afa:	df 91       	pop	r29
    6afc:	cf 91       	pop	r28
    6afe:	1f 91       	pop	r17
    6b00:	0f 91       	pop	r16
    6b02:	ff 90       	pop	r15
    6b04:	ef 90       	pop	r14
    6b06:	df 90       	pop	r13
    6b08:	cf 90       	pop	r12
    6b0a:	bf 90       	pop	r11
    6b0c:	af 90       	pop	r10
    6b0e:	9f 90       	pop	r9
    6b10:	8f 90       	pop	r8
    6b12:	7f 90       	pop	r7
    6b14:	6f 90       	pop	r6
    6b16:	5f 90       	pop	r5
    6b18:	4f 90       	pop	r4
    6b1a:	3f 90       	pop	r3
    6b1c:	2f 90       	pop	r2
			}//	if(bx<(SCREEN_TILES_H*TILE_WIDTH))		
		}


		//restore BG tiles
		RestoreBackground();
    6b1e:	0c 94 80 34 	jmp	0x6900	; 0x6900 <RestoreBackground>

	}
    6b22:	0f 90       	pop	r0
    6b24:	0f 90       	pop	r0
    6b26:	0f 90       	pop	r0
    6b28:	0f 90       	pop	r0
    6b2a:	df 91       	pop	r29
    6b2c:	cf 91       	pop	r28
    6b2e:	1f 91       	pop	r17
    6b30:	0f 91       	pop	r16
    6b32:	ff 90       	pop	r15
    6b34:	ef 90       	pop	r14
    6b36:	df 90       	pop	r13
    6b38:	cf 90       	pop	r12
    6b3a:	bf 90       	pop	r11
    6b3c:	af 90       	pop	r10
    6b3e:	9f 90       	pop	r9
    6b40:	8f 90       	pop	r8
    6b42:	7f 90       	pop	r7
    6b44:	6f 90       	pop	r6
    6b46:	5f 90       	pop	r5
    6b48:	4f 90       	pop	r4
    6b4a:	3f 90       	pop	r3
    6b4c:	2f 90       	pop	r2
    6b4e:	08 95       	ret

00006b50 <Scroll>:

	#if SCROLLING == 1
		//Scroll the screen by the relative amount specified (+/-)
		//This function handles screen wrapping on the Y axis if VRAM_TILES_V is less than 32
		void Scroll(char dx,char dy){
		Screen.scrollY+=dy;
    6b50:	90 91 9d 0c 	lds	r25, 0x0C9D
    6b54:	96 0f       	add	r25, r22
    6b56:	90 93 9d 0c 	sts	0x0C9D, r25
		Screen.scrollX+=dx;
    6b5a:	20 91 9c 0c 	lds	r18, 0x0C9C
    6b5e:	82 0f       	add	r24, r18
    6b60:	80 93 9c 0c 	sts	0x0C9C, r24

		if(Screen.scrollHeight<32){
    6b64:	80 91 9e 0c 	lds	r24, 0x0C9E
    6b68:	80 32       	cpi	r24, 0x20	; 32
    6b6a:	b0 f4       	brcc	.+44     	; 0x6b98 <Scroll+0x48>

			if(Screen.scrollY>=(Screen.scrollHeight*TILE_HEIGHT)){
    6b6c:	29 2f       	mov	r18, r25
    6b6e:	30 e0       	ldi	r19, 0x00	; 0
    6b70:	78 e0       	ldi	r23, 0x08	; 8
    6b72:	87 9f       	mul	r24, r23
    6b74:	a0 01       	movw	r20, r0
    6b76:	11 24       	eor	r1, r1
    6b78:	24 17       	cp	r18, r20
    6b7a:	35 07       	cpc	r19, r21
    6b7c:	6c f0       	brlt	.+26     	; 0x6b98 <Scroll+0x48>
				if(dy>=0){	
    6b7e:	67 fd       	sbrc	r22, 7
    6b80:	05 c0       	rjmp	.+10     	; 0x6b8c <Scroll+0x3c>
					Screen.scrollY=(Screen.scrollY-(Screen.scrollHeight*TILE_HEIGHT));
    6b82:	28 ef       	ldi	r18, 0xF8	; 248
    6b84:	82 9f       	mul	r24, r18
    6b86:	90 0d       	add	r25, r0
    6b88:	11 24       	eor	r1, r1
    6b8a:	04 c0       	rjmp	.+8      	; 0x6b94 <Scroll+0x44>
				}else{
					Screen.scrollY=((Screen.scrollHeight*TILE_HEIGHT)-1)-(0xff-Screen.scrollY);
    6b8c:	78 e0       	ldi	r23, 0x08	; 8
    6b8e:	87 9f       	mul	r24, r23
    6b90:	90 0d       	add	r25, r0
    6b92:	11 24       	eor	r1, r1
    6b94:	90 93 9d 0c 	sts	0x0C9D, r25
    6b98:	08 95       	ret

00006b9a <InitializeVideoMode>:
		#endif	
	}


	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){
    6b9a:	e2 e0       	ldi	r30, 0x02	; 2
    6b9c:	f5 e0       	ldi	r31, 0x05	; 5

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
			sprites[i].x=(SCREEN_TILES_H*TILE_WIDTH);		
    6b9e:	80 ee       	ldi	r24, 0xE0	; 224
    6ba0:	80 83       	st	Z, r24
    6ba2:	34 96       	adiw	r30, 0x04	; 4

	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
    6ba4:	95 e0       	ldi	r25, 0x05	; 5
    6ba6:	ea 33       	cpi	r30, 0x3A	; 58
    6ba8:	f9 07       	cpc	r31, r25
    6baa:	d1 f7       	brne	.-12     	; 0x6ba0 <InitializeVideoMode+0x6>
		
		#if SCROLLING == 1
		//	for(int i=0;i<(OVERLAY_LINES*VRAM_TILES_H);i++){
		//		overlay_vram[i]=RAM_TILES_COUNT;
		//	}
			Screen.scrollHeight=VRAM_TILES_V;
    6bac:	80 e2       	ldi	r24, 0x20	; 32
    6bae:	80 93 9e 0c 	sts	0x0C9E, r24
			Screen.overlayHeight=0;
    6bb2:	10 92 99 0c 	sts	0x0C99, r1
    6bb6:	08 95       	ret

00006bb8 <DrawMap>:



//Draws a map of tile at the specified position
#if VRAM_ADDR_SIZE == 1
	void DrawMap(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
    6bb8:	4f 92       	push	r4
    6bba:	5f 92       	push	r5
    6bbc:	6f 92       	push	r6
    6bbe:	7f 92       	push	r7
    6bc0:	8f 92       	push	r8
    6bc2:	9f 92       	push	r9
    6bc4:	af 92       	push	r10
    6bc6:	bf 92       	push	r11
    6bc8:	cf 92       	push	r12
    6bca:	df 92       	push	r13
    6bcc:	ef 92       	push	r14
    6bce:	ff 92       	push	r15
    6bd0:	0f 93       	push	r16
    6bd2:	1f 93       	push	r17
    6bd4:	cf 93       	push	r28
    6bd6:	df 93       	push	r29
    6bd8:	68 2e       	mov	r6, r24
    6bda:	56 2e       	mov	r5, r22
    6bdc:	7a 01       	movw	r14, r20
		//unsigned char i;
		u8 mapWidth=pgm_read_byte(&(map[0]));
    6bde:	fa 01       	movw	r30, r20
    6be0:	74 90       	lpm	r7, Z
		u8 mapHeight=pgm_read_byte(&(map[1]));
    6be2:	31 96       	adiw	r30, 0x01	; 1
    6be4:	84 90       	lpm	r8, Z
    6be6:	c7 2c       	mov	r12, r7
    6be8:	d1 2c       	mov	r13, r1
		
		for(u8 dy=0;dy<mapHeight;dy++){
    6bea:	00 e0       	ldi	r16, 0x00	; 0
    6bec:	10 e0       	ldi	r17, 0x00	; 0
    6bee:	91 2c       	mov	r9, r1
    6bf0:	98 14       	cp	r9, r8
    6bf2:	f1 f0       	breq	.+60     	; 0x6c30 <DrawMap+0x78>
    6bf4:	c0 e0       	ldi	r28, 0x00	; 0
    6bf6:	d0 e0       	ldi	r29, 0x00	; 0
    6bf8:	58 01       	movw	r10, r16
    6bfa:	f2 e0       	ldi	r31, 0x02	; 2
    6bfc:	af 0e       	add	r10, r31
    6bfe:	b1 1c       	adc	r11, r1
    6c00:	49 2c       	mov	r4, r9
    6c02:	45 0c       	add	r4, r5
			for(u8 dx=0;dx<mapWidth;dx++){			
    6c04:	c7 15       	cp	r28, r7
    6c06:	80 f4       	brcc	.+32     	; 0x6c28 <DrawMap+0x70>
    6c08:	95 01       	movw	r18, r10
    6c0a:	2c 0f       	add	r18, r28
    6c0c:	3d 1f       	adc	r19, r29
    6c0e:	f7 01       	movw	r30, r14
    6c10:	e2 0f       	add	r30, r18
    6c12:	f3 1f       	adc	r31, r19
				SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
    6c14:	24 91       	lpm	r18, Z
    6c16:	42 2f       	mov	r20, r18
    6c18:	50 e0       	ldi	r21, 0x00	; 0
    6c1a:	64 2d       	mov	r22, r4
    6c1c:	8c 2f       	mov	r24, r28
    6c1e:	86 0d       	add	r24, r6
    6c20:	0e 94 f1 27 	call	0x4fe2	; 0x4fe2 <SetTile>
    6c24:	21 96       	adiw	r28, 0x01	; 1
    6c26:	ee cf       	rjmp	.-36     	; 0x6c04 <DrawMap+0x4c>
	void DrawMap(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
		//unsigned char i;
		u8 mapWidth=pgm_read_byte(&(map[0]));
		u8 mapHeight=pgm_read_byte(&(map[1]));
		
		for(u8 dy=0;dy<mapHeight;dy++){
    6c28:	93 94       	inc	r9
    6c2a:	0c 0d       	add	r16, r12
    6c2c:	1d 1d       	adc	r17, r13
    6c2e:	e0 cf       	rjmp	.-64     	; 0x6bf0 <DrawMap+0x38>
			for(u8 dx=0;dx<mapWidth;dx++){			
				SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
			}
		}

	}
    6c30:	df 91       	pop	r29
    6c32:	cf 91       	pop	r28
    6c34:	1f 91       	pop	r17
    6c36:	0f 91       	pop	r16
    6c38:	ff 90       	pop	r15
    6c3a:	ef 90       	pop	r14
    6c3c:	df 90       	pop	r13
    6c3e:	cf 90       	pop	r12
    6c40:	bf 90       	pop	r11
    6c42:	af 90       	pop	r10
    6c44:	9f 90       	pop	r9
    6c46:	8f 90       	pop	r8
    6c48:	7f 90       	pop	r7
    6c4a:	6f 90       	pop	r6
    6c4c:	5f 90       	pop	r5
    6c4e:	4f 90       	pop	r4
    6c50:	08 95       	ret

00006c52 <WaitVsync>:
		}
	}
}

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
    6c52:	0f 93       	push	r16
    6c54:	1f 93       	push	r17
    6c56:	cf 93       	push	r28
    6c58:	df 93       	push	r29
    6c5a:	8c 01       	movw	r16, r24
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    6c5c:	c0 e0       	ldi	r28, 0x00	; 0
    6c5e:	d0 e0       	ldi	r29, 0x00	; 0
    6c60:	c0 17       	cp	r28, r16
    6c62:	d1 07       	cpc	r29, r17
    6c64:	44 f4       	brge	.+16     	; 0x6c76 <WaitVsync+0x24>
		while(!GetVsyncFlag());
    6c66:	0e 94 07 28 	call	0x500e	; 0x500e <GetVsyncFlag>
    6c6a:	88 23       	and	r24, r24
    6c6c:	e1 f3       	breq	.-8      	; 0x6c66 <WaitVsync+0x14>
		ClearVsyncFlag();		
    6c6e:	0e 94 0b 28 	call	0x5016	; 0x5016 <ClearVsyncFlag>

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    6c72:	21 96       	adiw	r28, 0x01	; 1
    6c74:	f5 cf       	rjmp	.-22     	; 0x6c60 <WaitVsync+0xe>
		while(!GetVsyncFlag());
		ClearVsyncFlag();		
	}
}
    6c76:	df 91       	pop	r29
    6c78:	cf 91       	pop	r28
    6c7a:	1f 91       	pop	r17
    6c7c:	0f 91       	pop	r16
    6c7e:	08 95       	ret

00006c80 <DisplayLogo>:
	void DisplayLogo(){
	
		#if INTRO_LOGO !=0
			#define LOGO_X_POS 12
			
			InitMusicPlayer(logoInitPatches);
    6c80:	8f e0       	ldi	r24, 0x0F	; 15
    6c82:	99 e0       	ldi	r25, 0x09	; 9
    6c84:	0e 94 53 2a 	call	0x54a6	; 0x54a6 <InitMusicPlayer>
			SetTileTable(logo_tileset);
    6c88:	8f e0       	ldi	r24, 0x0F	; 15
    6c8a:	91 e0       	ldi	r25, 0x01	; 1
    6c8c:	0e 94 02 28 	call	0x5004	; 0x5004 <SetTileTable>
			
			//draw logo
			ClearVram();
    6c90:	0e 94 e7 27 	call	0x4fce	; 0x4fce <ClearVram>
			WaitVsync(15);		
    6c94:	8f e0       	ldi	r24, 0x0F	; 15
    6c96:	90 e0       	ldi	r25, 0x00	; 0
    6c98:	0e 94 29 36 	call	0x6c52	; 0x6c52 <WaitVsync>


			#if INTRO_LOGO == 1 
				TriggerFx(0,0xff,true);
    6c9c:	41 e0       	ldi	r20, 0x01	; 1
    6c9e:	6f ef       	ldi	r22, 0xFF	; 255
    6ca0:	80 e0       	ldi	r24, 0x00	; 0
    6ca2:	0e 94 60 2b 	call	0x56c0	; 0x56c0 <TriggerFx>
			#endif

			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo);
    6ca6:	49 ef       	ldi	r20, 0xF9	; 249
    6ca8:	50 e0       	ldi	r21, 0x00	; 0
    6caa:	6c e0       	ldi	r22, 0x0C	; 12
    6cac:	8c e0       	ldi	r24, 0x0C	; 12
    6cae:	0e 94 dc 35 	call	0x6bb8	; 0x6bb8 <DrawMap>
			WaitVsync(3);
    6cb2:	83 e0       	ldi	r24, 0x03	; 3
    6cb4:	90 e0       	ldi	r25, 0x00	; 0
    6cb6:	0e 94 29 36 	call	0x6c52	; 0x6c52 <WaitVsync>
			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo2);
    6cba:	48 ee       	ldi	r20, 0xE8	; 232
    6cbc:	50 e0       	ldi	r21, 0x00	; 0
    6cbe:	6c e0       	ldi	r22, 0x0C	; 12
    6cc0:	8c e0       	ldi	r24, 0x0C	; 12
    6cc2:	0e 94 dc 35 	call	0x6bb8	; 0x6bb8 <DrawMap>
			WaitVsync(2);
    6cc6:	82 e0       	ldi	r24, 0x02	; 2
    6cc8:	90 e0       	ldi	r25, 0x00	; 0
    6cca:	0e 94 29 36 	call	0x6c52	; 0x6c52 <WaitVsync>
			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo);
    6cce:	49 ef       	ldi	r20, 0xF9	; 249
    6cd0:	50 e0       	ldi	r21, 0x00	; 0
    6cd2:	6c e0       	ldi	r22, 0x0C	; 12
    6cd4:	8c e0       	ldi	r24, 0x0C	; 12
    6cd6:	0e 94 dc 35 	call	0x6bb8	; 0x6bb8 <DrawMap>
			#if INTRO_LOGO == 2
				SetMasterVolume(0xc0);
				TriggerNote(3,0,16,0xff);
			#endif 
		
			WaitVsync(65);
    6cda:	81 e4       	ldi	r24, 0x41	; 65
    6cdc:	90 e0       	ldi	r25, 0x00	; 0
    6cde:	0e 94 29 36 	call	0x6c52	; 0x6c52 <WaitVsync>
			ClearVram();
    6ce2:	0e 94 e7 27 	call	0x4fce	; 0x4fce <ClearVram>
			WaitVsync(20);
    6ce6:	84 e1       	ldi	r24, 0x14	; 20
    6ce8:	90 e0       	ldi	r25, 0x00	; 0
    6cea:	0c 94 29 36 	jmp	0x6c52	; 0x6c52 <WaitVsync>

00006cee <doFade>:
char fadeDir;
bool volatile fadeActive;


void doFade(unsigned char speed,bool blocking){
	fadeSpeed=speed;
    6cee:	80 93 67 0d 	sts	0x0D67, r24
	currFadeFrame=0;
    6cf2:	10 92 6b 0d 	sts	0x0D6B, r1
	fadeActive=true;
    6cf6:	81 e0       	ldi	r24, 0x01	; 1
    6cf8:	80 93 6a 0d 	sts	0x0D6A, r24
		
	if(blocking){
    6cfc:	66 23       	and	r22, r22
    6cfe:	21 f0       	breq	.+8      	; 0x6d08 <doFade+0x1a>
		while(fadeActive==true);
    6d00:	80 91 6a 0d 	lds	r24, 0x0D6A
    6d04:	81 11       	cpse	r24, r1
    6d06:	fc cf       	rjmp	.-8      	; 0x6d00 <doFade+0x12>
    6d08:	08 95       	ret

00006d0a <FadeIn>:
	
	
}

void FadeIn(unsigned char speed,bool blocking){
	if(speed==0){
    6d0a:	81 11       	cpse	r24, r1
    6d0c:	03 c0       	rjmp	.+6      	; 0x6d14 <FadeIn+0xa>
		DDRC=0xff;
    6d0e:	8f ef       	ldi	r24, 0xFF	; 255
    6d10:	87 b9       	out	0x07, r24	; 7
		return;
    6d12:	08 95       	ret
	}
	fadeStep=1;
    6d14:	91 e0       	ldi	r25, 0x01	; 1
    6d16:	90 93 6c 0d 	sts	0x0D6C, r25
	fadeDir=1;
    6d1a:	90 93 68 0d 	sts	0x0D68, r25
	doFade(speed,blocking);
    6d1e:	0c 94 77 36 	jmp	0x6cee	; 0x6cee <doFade>

00006d22 <FadeOut>:
}

void FadeOut(unsigned char speed,bool blocking){
	if(speed==0){
    6d22:	81 11       	cpse	r24, r1
    6d24:	02 c0       	rjmp	.+4      	; 0x6d2a <FadeOut+0x8>
		DDRC=0;
    6d26:	17 b8       	out	0x07, r1	; 7
		return;
    6d28:	08 95       	ret
	}
	
	fadeStep=FADER_STEPS;
    6d2a:	9c e0       	ldi	r25, 0x0C	; 12
    6d2c:	90 93 6c 0d 	sts	0x0D6C, r25
	fadeDir=-1;
    6d30:	9f ef       	ldi	r25, 0xFF	; 255
    6d32:	90 93 68 0d 	sts	0x0D68, r25
	doFade(speed,blocking);
    6d36:	0c 94 77 36 	jmp	0x6cee	; 0x6cee <doFade>

00006d3a <ProcessFading>:
}


//called by the kernel at each field end
void ProcessFading(){
	if(fadeActive==true){
    6d3a:	80 91 6a 0d 	lds	r24, 0x0D6A
    6d3e:	88 23       	and	r24, r24
    6d40:	01 f1       	breq	.+64     	; 0x6d82 <ProcessFading+0x48>
		if(currFadeFrame==0){
    6d42:	80 91 6b 0d 	lds	r24, 0x0D6B
    6d46:	81 11       	cpse	r24, r1
    6d48:	19 c0       	rjmp	.+50     	; 0x6d7c <ProcessFading+0x42>
			currFadeFrame=fadeSpeed;
    6d4a:	80 91 67 0d 	lds	r24, 0x0D67
    6d4e:	80 93 6b 0d 	sts	0x0D6B, r24
			DDRC = pgm_read_byte(&(fader[fadeStep-1]));
    6d52:	e0 91 6c 0d 	lds	r30, 0x0D6C
    6d56:	f0 e0       	ldi	r31, 0x00	; 0
    6d58:	e5 52       	subi	r30, 0x25	; 37
    6d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    6d5c:	e4 91       	lpm	r30, Z
    6d5e:	e7 b9       	out	0x07, r30	; 7
			fadeStep+=fadeDir;
    6d60:	90 91 68 0d 	lds	r25, 0x0D68
    6d64:	80 91 6c 0d 	lds	r24, 0x0D6C
    6d68:	89 0f       	add	r24, r25
    6d6a:	80 93 6c 0d 	sts	0x0D6C, r24
			if(fadeStep==0 || fadeStep==(FADER_STEPS+1)){
    6d6e:	88 23       	and	r24, r24
    6d70:	11 f0       	breq	.+4      	; 0x6d76 <ProcessFading+0x3c>
    6d72:	8d 30       	cpi	r24, 0x0D	; 13
    6d74:	31 f4       	brne	.+12     	; 0x6d82 <ProcessFading+0x48>
				fadeActive=false;
    6d76:	10 92 6a 0d 	sts	0x0D6A, r1
    6d7a:	08 95       	ret
			}
		}else{
			currFadeFrame--;
    6d7c:	81 50       	subi	r24, 0x01	; 1
    6d7e:	80 93 6b 0d 	sts	0x0D6B, r24
    6d82:	08 95       	ret

00006d84 <VideoModeVsync>:
	}

	//Callback invoked during hsync
	void VideoModeVsync(){
		
		ProcessFading();
    6d84:	0e 94 9d 36 	call	0x6d3a	; 0x6d3a <ProcessFading>
		ProcessSprites();
    6d88:	0c 94 96 34 	jmp	0x692c	; 0x692c <ProcessSprites>

00006d8c <LBGetNextFrame>:
	u8 reversing;
	char** anims;
} Animation;

char* LBGetNextFrame(Animation* anim)
{
    6d8c:	fc 01       	movw	r30, r24
	anim->looped = 0;
    6d8e:	14 82       	std	Z+4, r1	; 0x04
	anim->frame_count += 1;
    6d90:	93 81       	ldd	r25, Z+3	; 0x03
    6d92:	9f 5f       	subi	r25, 0xFF	; 255
    6d94:	93 83       	std	Z+3, r25	; 0x03
	if (anim->frame_count < anim->frames_per_anim)
    6d96:	42 81       	ldd	r20, Z+2	; 0x02
    6d98:	80 81       	ld	r24, Z
    6d9a:	26 81       	ldd	r18, Z+6	; 0x06
    6d9c:	37 81       	ldd	r19, Z+7	; 0x07
    6d9e:	94 17       	cp	r25, r20
    6da0:	30 f4       	brcc	.+12     	; 0x6dae <LBGetNextFrame+0x22>
	{
		return anim->anims[anim->current_anim];
    6da2:	f9 01       	movw	r30, r18
    6da4:	e8 0f       	add	r30, r24
    6da6:	f1 1d       	adc	r31, r1
    6da8:	e8 0f       	add	r30, r24
    6daa:	f1 1d       	adc	r31, r1
    6dac:	12 c0       	rjmp	.+36     	; 0x6dd2 <LBGetNextFrame+0x46>
	}
	anim->frame_count = 0;
    6dae:	13 82       	std	Z+3, r1	; 0x03
	anim->current_anim = (anim->current_anim + 1) % anim->anim_count;
    6db0:	90 e0       	ldi	r25, 0x00	; 0
    6db2:	01 96       	adiw	r24, 0x01	; 1
    6db4:	61 81       	ldd	r22, Z+1	; 0x01
    6db6:	70 e0       	ldi	r23, 0x00	; 0
    6db8:	0e 94 f3 4b 	call	0x97e6	; 0x97e6 <__divmodhi4>
    6dbc:	80 83       	st	Z, r24
	if (anim->current_anim == 0) anim->looped = 1;
    6dbe:	81 11       	cpse	r24, r1
    6dc0:	02 c0       	rjmp	.+4      	; 0x6dc6 <LBGetNextFrame+0x3a>
    6dc2:	41 e0       	ldi	r20, 0x01	; 1
    6dc4:	44 83       	std	Z+4, r20	; 0x04
    6dc6:	99 27       	eor	r25, r25
	return anim->anims[anim->current_anim];
    6dc8:	88 0f       	add	r24, r24
    6dca:	99 1f       	adc	r25, r25
    6dcc:	f9 01       	movw	r30, r18
    6dce:	e8 0f       	add	r30, r24
    6dd0:	f9 1f       	adc	r31, r25
    6dd2:	80 81       	ld	r24, Z
    6dd4:	91 81       	ldd	r25, Z+1	; 0x01
}
    6dd6:	08 95       	ret

00006dd8 <LBGetJoyPadState>:

void LBGetJoyPadState(JoyPadState* p, unsigned char index)
/*
 * Get the current joy pad button state for index controller
 */
{
    6dd8:	0f 93       	push	r16
    6dda:	1f 93       	push	r17
    6ddc:	cf 93       	push	r28
    6dde:	df 93       	push	r29
    6de0:	1f 92       	push	r1
    6de2:	cd b7       	in	r28, 0x3d	; 61
    6de4:	de b7       	in	r29, 0x3e	; 62
    6de6:	8c 01       	movw	r16, r24
	static unsigned int p_prev[2];

	p->held = ReadJoypad(index);
    6de8:	86 2f       	mov	r24, r22
    6dea:	69 83       	std	Y+1, r22	; 0x01
    6dec:	0e 94 11 28 	call	0x5022	; 0x5022 <ReadJoypad>
    6df0:	d8 01       	movw	r26, r16
    6df2:	15 96       	adiw	r26, 0x05	; 5
    6df4:	9c 93       	st	X, r25
    6df6:	8e 93       	st	-X, r24
    6df8:	14 97       	sbiw	r26, 0x04	; 4
    6dfa:	69 81       	ldd	r22, Y+1	; 0x01
    6dfc:	e6 2f       	mov	r30, r22
    6dfe:	f0 e0       	ldi	r31, 0x00	; 0

	// Count held cycles
	if (p->held == 0 || p->held != p_prev[index])
    6e00:	00 97       	sbiw	r24, 0x00	; 0
    6e02:	51 f0       	breq	.+20     	; 0x6e18 <LBGetJoyPadState+0x40>
    6e04:	df 01       	movw	r26, r30
    6e06:	aa 0f       	add	r26, r26
    6e08:	bb 1f       	adc	r27, r27
    6e0a:	a1 52       	subi	r26, 0x21	; 33
    6e0c:	b3 4f       	sbci	r27, 0xF3	; 243
    6e0e:	2d 91       	ld	r18, X+
    6e10:	3c 91       	ld	r19, X
    6e12:	82 17       	cp	r24, r18
    6e14:	93 07       	cpc	r25, r19
    6e16:	21 f0       	breq	.+8      	; 0x6e20 <LBGetJoyPadState+0x48>
	    p->held_cycles = 0;
    6e18:	d8 01       	movw	r26, r16
    6e1a:	16 96       	adiw	r26, 0x06	; 6
    6e1c:	1c 92       	st	X, r1
    6e1e:	07 c0       	rjmp	.+14     	; 0x6e2e <LBGetJoyPadState+0x56>
	else
	    p->held_cycles += 1;
    6e20:	d8 01       	movw	r26, r16
    6e22:	16 96       	adiw	r26, 0x06	; 6
    6e24:	2c 91       	ld	r18, X
    6e26:	16 97       	sbiw	r26, 0x06	; 6
    6e28:	2f 5f       	subi	r18, 0xFF	; 255
    6e2a:	16 96       	adiw	r26, 0x06	; 6
    6e2c:	2c 93       	st	X, r18

	p->pressed = p->held & (p->held ^ p_prev[index]);
    6e2e:	ee 0f       	add	r30, r30
    6e30:	ff 1f       	adc	r31, r31
    6e32:	e1 52       	subi	r30, 0x21	; 33
    6e34:	f3 4f       	sbci	r31, 0xF3	; 243
    6e36:	20 81       	ld	r18, Z
    6e38:	31 81       	ldd	r19, Z+1	; 0x01
    6e3a:	a9 01       	movw	r20, r18
    6e3c:	40 95       	com	r20
    6e3e:	50 95       	com	r21
    6e40:	48 23       	and	r20, r24
    6e42:	59 23       	and	r21, r25
    6e44:	d8 01       	movw	r26, r16
    6e46:	11 96       	adiw	r26, 0x01	; 1
    6e48:	5c 93       	st	X, r21
    6e4a:	4e 93       	st	-X, r20
	p->released = p_prev[index] & (p->held ^ p_prev[index]);
    6e4c:	ac 01       	movw	r20, r24
    6e4e:	40 95       	com	r20
    6e50:	50 95       	com	r21
    6e52:	24 23       	and	r18, r20
    6e54:	35 23       	and	r19, r21
    6e56:	13 96       	adiw	r26, 0x03	; 3
    6e58:	3c 93       	st	X, r19
    6e5a:	2e 93       	st	-X, r18
    6e5c:	12 97       	sbiw	r26, 0x02	; 2
	p_prev[index] = p->held;
    6e5e:	91 83       	std	Z+1, r25	; 0x01
    6e60:	80 83       	st	Z, r24
}
    6e62:	0f 90       	pop	r0
    6e64:	df 91       	pop	r29
    6e66:	cf 91       	pop	r28
    6e68:	1f 91       	pop	r17
    6e6a:	0f 91       	pop	r16
    6e6c:	08 95       	ret

00006e6e <LBPrintChar>:
	font_tiles_map = tiles_map;
}

void LBPrintChar(u8 x, u8 y, u8 code)
{
	if (code >= 48 && code <= 57)
    6e6e:	90 ed       	ldi	r25, 0xD0	; 208
    6e70:	94 0f       	add	r25, r20
    6e72:	e0 91 6d 0d 	lds	r30, 0x0D6D
    6e76:	f0 91 6e 0d 	lds	r31, 0x0D6E
    6e7a:	9a 30       	cpi	r25, 0x0A	; 10
    6e7c:	38 f4       	brcc	.+14     	; 0x6e8c <LBPrintChar+0x1e>
	{
		SetTile(x, y, pgm_read_byte(&font_tiles_map[3+code-48]));
    6e7e:	24 2f       	mov	r18, r20
    6e80:	30 e0       	ldi	r19, 0x00	; 0
    6e82:	2d 52       	subi	r18, 0x2D	; 45
    6e84:	31 09       	sbc	r19, r1
    6e86:	e2 0f       	add	r30, r18
    6e88:	f3 1f       	adc	r31, r19
    6e8a:	0c c0       	rjmp	.+24     	; 0x6ea4 <LBPrintChar+0x36>
	}
	else if (code >= 65 && code <= 90)
    6e8c:	9f eb       	ldi	r25, 0xBF	; 191
    6e8e:	94 0f       	add	r25, r20
    6e90:	9a 31       	cpi	r25, 0x1A	; 26
    6e92:	38 f4       	brcc	.+14     	; 0x6ea2 <LBPrintChar+0x34>
	{
		SetTile(x, y, pgm_read_byte(&font_tiles_map[13+code-65]));
    6e94:	50 e0       	ldi	r21, 0x00	; 0
    6e96:	44 53       	subi	r20, 0x34	; 52
    6e98:	51 09       	sbc	r21, r1
    6e9a:	e4 0f       	add	r30, r20
    6e9c:	f5 1f       	adc	r31, r21
    6e9e:	44 91       	lpm	r20, Z
    6ea0:	03 c0       	rjmp	.+6      	; 0x6ea8 <LBPrintChar+0x3a>
	}
	else
	{
		SetTile(x, y, pgm_read_byte(&font_tiles_map[2]));
    6ea2:	32 96       	adiw	r30, 0x02	; 2
    6ea4:	e4 91       	lpm	r30, Z
    6ea6:	4e 2f       	mov	r20, r30
    6ea8:	50 e0       	ldi	r21, 0x00	; 0
    6eaa:	0c 94 f1 27 	jmp	0x4fe2	; 0x4fe2 <SetTile>

00006eae <LBPrint>:
	}
}

void LBPrint(u8 x, u8 y, char* value)
{
    6eae:	ff 92       	push	r15
    6eb0:	0f 93       	push	r16
    6eb2:	1f 93       	push	r17
    6eb4:	cf 93       	push	r28
    6eb6:	df 93       	push	r29
    6eb8:	d8 2f       	mov	r29, r24
    6eba:	f6 2e       	mov	r15, r22
    6ebc:	8a 01       	movw	r16, r20
	u8 i = 0;
    6ebe:	c0 e0       	ldi	r28, 0x00	; 0
    6ec0:	8c 2f       	mov	r24, r28
    6ec2:	8d 0f       	add	r24, r29
	u8 code = 0;
	while ((code = pgm_read_byte(&value[i])))
    6ec4:	f8 01       	movw	r30, r16
    6ec6:	ec 0f       	add	r30, r28
    6ec8:	f1 1d       	adc	r31, r1
    6eca:	44 91       	lpm	r20, Z
    6ecc:	44 23       	and	r20, r20
    6ece:	29 f0       	breq	.+10     	; 0x6eda <LBPrint+0x2c>
	{
		LBPrintChar(x++, y, code);
    6ed0:	6f 2d       	mov	r22, r15
    6ed2:	0e 94 37 37 	call	0x6e6e	; 0x6e6e <LBPrintChar>
		i++;
    6ed6:	cf 5f       	subi	r28, 0xFF	; 255
    6ed8:	f3 cf       	rjmp	.-26     	; 0x6ec0 <LBPrint+0x12>
	}
}
    6eda:	df 91       	pop	r29
    6edc:	cf 91       	pop	r28
    6ede:	1f 91       	pop	r17
    6ee0:	0f 91       	pop	r16
    6ee2:	ff 90       	pop	r15
    6ee4:	08 95       	ret

00006ee6 <LBPrintByte>:

void LBPrintByte(u8 x, u8 y, u8 value, char pad)
{
    6ee6:	ff 92       	push	r15
    6ee8:	0f 93       	push	r16
    6eea:	1f 93       	push	r17
    6eec:	cf 93       	push	r28
    6eee:	df 93       	push	r29
    6ef0:	28 2f       	mov	r18, r24
    6ef2:	06 2f       	mov	r16, r22
    6ef4:	84 2f       	mov	r24, r20
    6ef6:	dd ef       	ldi	r29, 0xFD	; 253
    6ef8:	d2 0f       	add	r29, r18
	for (u8 i = 0; i < 3; i++)
	{
		LBPrintChar(x--, y, value % 10 + 48);
    6efa:	9a e0       	ldi	r25, 0x0A	; 10
    6efc:	f9 2e       	mov	r15, r25
    6efe:	1f ef       	ldi	r17, 0xFF	; 255
    6f00:	12 0f       	add	r17, r18
    6f02:	6f 2d       	mov	r22, r15
    6f04:	0e 94 d3 4b 	call	0x97a6	; 0x97a6 <__udivmodqi4>
    6f08:	c8 2f       	mov	r28, r24
    6f0a:	40 e3       	ldi	r20, 0x30	; 48
    6f0c:	49 0f       	add	r20, r25
    6f0e:	60 2f       	mov	r22, r16
    6f10:	82 2f       	mov	r24, r18
    6f12:	0e 94 37 37 	call	0x6e6e	; 0x6e6e <LBPrintChar>
		value /= 10;
    6f16:	8c 2f       	mov	r24, r28
    6f18:	21 2f       	mov	r18, r17
	}
}

void LBPrintByte(u8 x, u8 y, u8 value, char pad)
{
	for (u8 i = 0; i < 3; i++)
    6f1a:	1d 13       	cpse	r17, r29
    6f1c:	f0 cf       	rjmp	.-32     	; 0x6efe <LBPrintByte+0x18>
	{
		LBPrintChar(x--, y, value % 10 + 48);
		value /= 10;
	}
}
    6f1e:	df 91       	pop	r29
    6f20:	cf 91       	pop	r28
    6f22:	1f 91       	pop	r17
    6f24:	0f 91       	pop	r16
    6f26:	ff 90       	pop	r15
    6f28:	08 95       	ret

00006f2a <LBPrintInt>:

void LBPrintInt(u8 x, u8 y, u16 value, char pad)
{
    6f2a:	cf 92       	push	r12
    6f2c:	df 92       	push	r13
    6f2e:	ef 92       	push	r14
    6f30:	ff 92       	push	r15
    6f32:	0f 93       	push	r16
    6f34:	1f 93       	push	r17
    6f36:	cf 93       	push	r28
    6f38:	df 93       	push	r29
    6f3a:	1f 92       	push	r1
    6f3c:	cd b7       	in	r28, 0x3d	; 61
    6f3e:	de b7       	in	r29, 0x3e	; 62
    6f40:	d8 2e       	mov	r13, r24
    6f42:	06 2f       	mov	r16, r22
    6f44:	ca 01       	movw	r24, r20
    6f46:	1b ef       	ldi	r17, 0xFB	; 251
    6f48:	1d 0d       	add	r17, r13
	for (u8 i = 0; i < 5; i++)
	{
		LBPrintChar(x, y, value % 10 + 48);
    6f4a:	2a e0       	ldi	r18, 0x0A	; 10
    6f4c:	e2 2e       	mov	r14, r18
    6f4e:	f1 2c       	mov	r15, r1
    6f50:	b7 01       	movw	r22, r14
    6f52:	0e 94 df 4b 	call	0x97be	; 0x97be <__udivmodhi4>
    6f56:	c6 2e       	mov	r12, r22
    6f58:	40 e3       	ldi	r20, 0x30	; 48
    6f5a:	48 0f       	add	r20, r24
    6f5c:	60 2f       	mov	r22, r16
    6f5e:	8d 2d       	mov	r24, r13
    6f60:	79 83       	std	Y+1, r23	; 0x01
    6f62:	0e 94 37 37 	call	0x6e6e	; 0x6e6e <LBPrintChar>
		value /= 10;
    6f66:	8c 2d       	mov	r24, r12
    6f68:	79 81       	ldd	r23, Y+1	; 0x01
    6f6a:	97 2f       	mov	r25, r23
		x--;
    6f6c:	da 94       	dec	r13
	}
}

void LBPrintInt(u8 x, u8 y, u16 value, char pad)
{
	for (u8 i = 0; i < 5; i++)
    6f6e:	d1 12       	cpse	r13, r17
    6f70:	ef cf       	rjmp	.-34     	; 0x6f50 <LBPrintInt+0x26>
	{
		LBPrintChar(x, y, value % 10 + 48);
		value /= 10;
		x--;
	}
}
    6f72:	0f 90       	pop	r0
    6f74:	df 91       	pop	r29
    6f76:	cf 91       	pop	r28
    6f78:	1f 91       	pop	r17
    6f7a:	0f 91       	pop	r16
    6f7c:	ff 90       	pop	r15
    6f7e:	ef 90       	pop	r14
    6f80:	df 90       	pop	r13
    6f82:	cf 90       	pop	r12
    6f84:	08 95       	ret

00006f86 <LBCollides>:
	}
}

u8 LBCollides(u16 x1, u16 y1, u8 width1, u8 height1,
						 u16 x2, u16 y2, u8 width2, u8 height2)
{
    6f86:	af 92       	push	r10
    6f88:	cf 92       	push	r12
    6f8a:	ef 92       	push	r14
    6f8c:	ff 92       	push	r15
    6f8e:	0f 93       	push	r16
    6f90:	1f 93       	push	r17
    6f92:	fc 01       	movw	r30, r24
	if (y1 + height1 <= y2) return 0;
    6f94:	cb 01       	movw	r24, r22
    6f96:	82 0f       	add	r24, r18
    6f98:	91 1d       	adc	r25, r1
    6f9a:	e8 16       	cp	r14, r24
    6f9c:	f9 06       	cpc	r15, r25
    6f9e:	88 f4       	brcc	.+34     	; 0x6fc2 <LBCollides+0x3c>
	if (y1 >= y2 + height2) return 0;
    6fa0:	ea 0c       	add	r14, r10
    6fa2:	f1 1c       	adc	r15, r1
    6fa4:	6e 15       	cp	r22, r14
    6fa6:	7f 05       	cpc	r23, r15
    6fa8:	60 f4       	brcc	.+24     	; 0x6fc2 <LBCollides+0x3c>
	if (x1 + width1 <= x2) return 0;
    6faa:	cf 01       	movw	r24, r30
    6fac:	84 0f       	add	r24, r20
    6fae:	91 1d       	adc	r25, r1
    6fb0:	08 17       	cp	r16, r24
    6fb2:	19 07       	cpc	r17, r25
    6fb4:	30 f4       	brcc	.+12     	; 0x6fc2 <LBCollides+0x3c>
	if (x1 >= x2 + width2) return 0;
    6fb6:	0c 0d       	add	r16, r12
    6fb8:	11 1d       	adc	r17, r1
    6fba:	81 e0       	ldi	r24, 0x01	; 1
    6fbc:	e0 17       	cp	r30, r16
    6fbe:	f1 07       	cpc	r31, r17
    6fc0:	08 f0       	brcs	.+2      	; 0x6fc4 <LBCollides+0x3e>
}

u8 LBCollides(u16 x1, u16 y1, u8 width1, u8 height1,
						 u16 x2, u16 y2, u8 width2, u8 height2)
{
	if (y1 + height1 <= y2) return 0;
    6fc2:	80 e0       	ldi	r24, 0x00	; 0
	if (y1 >= y2 + height2) return 0;
	if (x1 + width1 <= x2) return 0;
	if (x1 >= x2 + width2) return 0;
	return 1;
}
    6fc4:	1f 91       	pop	r17
    6fc6:	0f 91       	pop	r16
    6fc8:	ff 90       	pop	r15
    6fca:	ef 90       	pop	r14
    6fcc:	cf 90       	pop	r12
    6fce:	af 90       	pop	r10
    6fd0:	08 95       	ret

00006fd2 <LBWaitSeconds>:

	return from + ((delta + shifted) % delta);
}

void LBWaitSeconds(u8 seconds)
{
    6fd2:	cf 93       	push	r28
    6fd4:	df 93       	push	r29
    6fd6:	d8 2f       	mov	r29, r24
	for(u8 i = 0; i < seconds; i++)
    6fd8:	c0 e0       	ldi	r28, 0x00	; 0
    6fda:	cd 17       	cp	r28, r29
    6fdc:	31 f0       	breq	.+12     	; 0x6fea <LBWaitSeconds+0x18>
	{
		WaitUs(65535);
    6fde:	8f ef       	ldi	r24, 0xFF	; 255
    6fe0:	9f ef       	ldi	r25, 0xFF	; 255
    6fe2:	0e 94 1d 28 	call	0x503a	; 0x503a <WaitUs>
	return from + ((delta + shifted) % delta);
}

void LBWaitSeconds(u8 seconds)
{
	for(u8 i = 0; i < seconds; i++)
    6fe6:	cf 5f       	subi	r28, 0xFF	; 255
    6fe8:	f8 cf       	rjmp	.-16     	; 0x6fda <LBWaitSeconds+0x8>
	{
		WaitUs(65535);
	}
}
    6fea:	df 91       	pop	r29
    6fec:	cf 91       	pop	r28
    6fee:	08 95       	ret

00006ff0 <LBMapSprite>:

void LBMapSprite(u8 startSprite,const char *map,u8 spriteFlags)
{
    6ff0:	df 92       	push	r13
    6ff2:	ef 92       	push	r14
    6ff4:	ff 92       	push	r15
    6ff6:	0f 93       	push	r16
    6ff8:	1f 93       	push	r17
    6ffa:	cf 93       	push	r28
    6ffc:	df 93       	push	r29
    6ffe:	db 01       	movw	r26, r22
	unsigned char mapWidth=pgm_read_byte(&(map[0]));
    7000:	fb 01       	movw	r30, r22
    7002:	14 91       	lpm	r17, Z
	unsigned char mapHeight=pgm_read_byte(&(map[1]));
    7004:	31 96       	adiw	r30, 0x01	; 1
    7006:	64 91       	lpm	r22, Z
    7008:	5f ef       	ldi	r21, 0xFF	; 255
    700a:	51 0f       	add	r21, r17
	s8 x,y,dx,dy,t; 

	if(spriteFlags & SPRITE_FLIP_X)
    700c:	24 2f       	mov	r18, r20
    700e:	21 70       	andi	r18, 0x01	; 1
    7010:	40 ff       	sbrs	r20, 0
    7012:	04 c0       	rjmp	.+8      	; 0x701c <LBMapSprite+0x2c>
	{
		x=(mapWidth-1);
    7014:	95 2f       	mov	r25, r21
		dx=-1;
    7016:	ff 24       	eor	r15, r15
    7018:	fa 94       	dec	r15
    701a:	03 c0       	rjmp	.+6      	; 0x7022 <LBMapSprite+0x32>
	}
	else
	{
		x=0;
		dx=1;
    701c:	ff 24       	eor	r15, r15
    701e:	f3 94       	inc	r15
		x=(mapWidth-1);
		dx=-1;
	}
	else
	{
		x=0;
    7020:	90 e0       	ldi	r25, 0x00	; 0
		dx=1;
	}

	if(spriteFlags & SPRITE_FLIP_Y)
    7022:	41 ff       	sbrs	r20, 1
    7024:	05 c0       	rjmp	.+10     	; 0x7030 <LBMapSprite+0x40>
	{
		y=(mapHeight-1);
    7026:	7f ef       	ldi	r23, 0xFF	; 255
    7028:	76 0f       	add	r23, r22
		dy=-1;
    702a:	ee 24       	eor	r14, r14
    702c:	ea 94       	dec	r14
    702e:	03 c0       	rjmp	.+6      	; 0x7036 <LBMapSprite+0x46>
	}
	else
	{
		y=0;
		dy=1;
    7030:	ee 24       	eor	r14, r14
    7032:	e3 94       	inc	r14
		y=(mapHeight-1);
		dy=-1;
	}
	else
	{
		y=0;
    7034:	70 e0       	ldi	r23, 0x00	; 0
    7036:	21 11       	cpse	r18, r1
    7038:	01 c0       	rjmp	.+2      	; 0x703c <LBMapSprite+0x4c>
    703a:	50 e0       	ldi	r21, 0x00	; 0
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
    703c:	00 e0       	ldi	r16, 0x00	; 0
    703e:	06 17       	cp	r16, r22
    7040:	09 f1       	breq	.+66     	; 0x7084 <LBMapSprite+0x94>
	{
		for(u8 cx=0;cx<mapWidth;cx++)
		{
			t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    7042:	71 03       	mulsu	r23, r17
    7044:	e0 01       	movw	r28, r0
    7046:	11 24       	eor	r1, r1
    7048:	d8 2e       	mov	r13, r24
    704a:	d1 0e       	add	r13, r17
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
	{
		for(u8 cx=0;cx<mapWidth;cx++)
    704c:	8d 15       	cp	r24, r13
    704e:	b1 f0       	breq	.+44     	; 0x707c <LBMapSprite+0x8c>
		{
			t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    7050:	9e 01       	movw	r18, r28
    7052:	29 0f       	add	r18, r25
    7054:	31 1d       	adc	r19, r1
    7056:	97 fd       	sbrc	r25, 7
    7058:	3a 95       	dec	r19
    705a:	2e 5f       	subi	r18, 0xFE	; 254
    705c:	3f 4f       	sbci	r19, 0xFF	; 255
    705e:	fd 01       	movw	r30, r26
    7060:	e2 0f       	add	r30, r18
    7062:	f3 1f       	adc	r31, r19
    7064:	24 91       	lpm	r18, Z
			extendedSprites[startSprite].tileIndex=t;
    7066:	34 e0       	ldi	r19, 0x04	; 4
    7068:	83 9f       	mul	r24, r19
    706a:	f0 01       	movw	r30, r0
    706c:	11 24       	eor	r1, r1
    706e:	e0 57       	subi	r30, 0x70	; 112
    7070:	f0 4f       	sbci	r31, 0xF0	; 240
    7072:	22 83       	std	Z+2, r18	; 0x02
			extendedSprites[startSprite++].flags=spriteFlags;
    7074:	8f 5f       	subi	r24, 0xFF	; 255
    7076:	43 83       	std	Z+3, r20	; 0x03
    7078:	9f 0d       	add	r25, r15
    707a:	e8 cf       	rjmp	.-48     	; 0x704c <LBMapSprite+0x5c>
    707c:	7e 0d       	add	r23, r14
	{
		y=0;
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
    707e:	0f 5f       	subi	r16, 0xFF	; 255
			extendedSprites[startSprite].tileIndex=t;
			extendedSprites[startSprite++].flags=spriteFlags;
			x+=dx;
		}
		y+=dy;
		x=(spriteFlags & SPRITE_FLIP_X)?(mapWidth-1):0;
    7080:	95 2f       	mov	r25, r21
    7082:	dd cf       	rjmp	.-70     	; 0x703e <LBMapSprite+0x4e>
	}
}
    7084:	df 91       	pop	r29
    7086:	cf 91       	pop	r28
    7088:	1f 91       	pop	r17
    708a:	0f 91       	pop	r16
    708c:	ff 90       	pop	r15
    708e:	ef 90       	pop	r14
    7090:	df 90       	pop	r13
    7092:	08 95       	ret

00007094 <LBMoveSprite>:

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
    7094:	df 92       	push	r13
    7096:	ef 92       	push	r14
    7098:	ff 92       	push	r15
    709a:	0f 93       	push	r16
    709c:	1f 93       	push	r17
    709e:	cf 93       	push	r28
    70a0:	df 93       	push	r29
		{
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
    70a2:	a0 91 9e 0c 	lds	r26, 0x0C9E
    70a6:	98 e0       	ldi	r25, 0x08	; 8
    70a8:	a9 9f       	mul	r26, r25
    70aa:	70 01       	movw	r14, r0
    70ac:	11 24       	eor	r1, r1
    70ae:	50 e0       	ldi	r21, 0x00	; 0
    70b0:	38 ef       	ldi	r19, 0xF8	; 248
    70b2:	a3 9f       	mul	r26, r19
    70b4:	30 2d       	mov	r19, r0
    70b6:	11 24       	eor	r1, r1
	}
}

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
	for(u8 dy=0;dy<height;dy++)
    70b8:	70 e0       	ldi	r23, 0x00	; 0
    70ba:	70 17       	cp	r23, r16
    70bc:	09 f1       	breq	.+66     	; 0x7100 <LBMoveSprite+0x6c>
    70be:	d4 2e       	mov	r13, r20
    70c0:	13 2f       	mov	r17, r19
    70c2:	14 0f       	add	r17, r20
    70c4:	b8 2f       	mov	r27, r24
    70c6:	b2 0f       	add	r27, r18
    70c8:	96 2f       	mov	r25, r22
	{
		for(u8 dx=0;dx<width;dx++)
    70ca:	8b 17       	cp	r24, r27
    70cc:	a9 f0       	breq	.+42     	; 0x70f8 <LBMoveSprite+0x64>
		{
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
    70ce:	c4 e0       	ldi	r28, 0x04	; 4
    70d0:	8c 9f       	mul	r24, r28
    70d2:	f0 01       	movw	r30, r0
    70d4:	11 24       	eor	r1, r1
    70d6:	ef 01       	movw	r28, r30
    70d8:	c0 57       	subi	r28, 0x70	; 112
    70da:	d0 4f       	sbci	r29, 0xF0	; 240
    70dc:	98 83       	st	Y, r25
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
    70de:	a0 32       	cpi	r26, 0x20	; 32
    70e0:	28 f4       	brcc	.+10     	; 0x70ec <LBMoveSprite+0x58>
    70e2:	e4 16       	cp	r14, r20
    70e4:	f5 06       	cpc	r15, r21
    70e6:	14 f4       	brge	.+4      	; 0x70ec <LBMoveSprite+0x58>
				{
					u8 tmp=(y+(TILE_HEIGHT*dy))-(Screen.scrollHeight*TILE_HEIGHT);
					extendedSprites[startSprite].y=tmp;
    70e8:	19 83       	std	Y+1, r17	; 0x01
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
				{
    70ea:	03 c0       	rjmp	.+6      	; 0x70f2 <LBMoveSprite+0x5e>
					u8 tmp=(y+(TILE_HEIGHT*dy))-(Screen.scrollHeight*TILE_HEIGHT);
					extendedSprites[startSprite].y=tmp;
				}
				else
				{
					extendedSprites[startSprite].y=y+(TILE_HEIGHT*dy);
    70ec:	e0 57       	subi	r30, 0x70	; 112
    70ee:	f0 4f       	sbci	r31, 0xF0	; 240
    70f0:	d1 82       	std	Z+1, r13	; 0x01
				{
					extendedSprites[startSprite].y=y+(TILE_HEIGHT*dy);
				}
			#endif

			startSprite++;
    70f2:	8f 5f       	subi	r24, 0xFF	; 255
    70f4:	98 5f       	subi	r25, 0xF8	; 248
    70f6:	e9 cf       	rjmp	.-46     	; 0x70ca <LBMoveSprite+0x36>
	}
}

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
	for(u8 dy=0;dy<height;dy++)
    70f8:	7f 5f       	subi	r23, 0xFF	; 255
    70fa:	48 5f       	subi	r20, 0xF8	; 248
    70fc:	5f 4f       	sbci	r21, 0xFF	; 255
    70fe:	dd cf       	rjmp	.-70     	; 0x70ba <LBMoveSprite+0x26>
			#endif

			startSprite++;
		}
	}	
}
    7100:	df 91       	pop	r29
    7102:	cf 91       	pop	r28
    7104:	1f 91       	pop	r17
    7106:	0f 91       	pop	r16
    7108:	ff 90       	pop	r15
    710a:	ef 90       	pop	r14
    710c:	df 90       	pop	r13
    710e:	08 95       	ret

00007110 <LBRotateSprites>:

void LBRotateSprites()
{
    7110:	80 e0       	ldi	r24, 0x00	; 0
    7112:	90 e0       	ldi	r25, 0x00	; 0
    7114:	dc 01       	movw	r26, r24
    7116:	a0 57       	subi	r26, 0x70	; 112
    7118:	b0 4f       	sbci	r27, 0xF0	; 240
    711a:	fc 01       	movw	r30, r24
    711c:	ee 5f       	subi	r30, 0xFE	; 254
    711e:	fa 4f       	sbci	r31, 0xFA	; 250
	static u8 rotate_index = ROTATE_SPRITES_FROM;
	u8 mappedSpriteCount = MAX_EXTENDED_SPRITES;
	
	for (u8 i = 0; i < ROTATE_SPRITES_FROM; i++)
	{
		sprites[i].flags = extendedSprites[i].flags;
    7120:	13 96       	adiw	r26, 0x03	; 3
    7122:	2c 91       	ld	r18, X
    7124:	13 97       	sbiw	r26, 0x03	; 3
    7126:	23 83       	std	Z+3, r18	; 0x03
		sprites[i].tileIndex = extendedSprites[i].tileIndex;
    7128:	12 96       	adiw	r26, 0x02	; 2
    712a:	2c 91       	ld	r18, X
    712c:	12 97       	sbiw	r26, 0x02	; 2
    712e:	22 83       	std	Z+2, r18	; 0x02
		sprites[i].x = extendedSprites[i].x;
    7130:	2c 91       	ld	r18, X
    7132:	20 83       	st	Z, r18
		sprites[i].y = extendedSprites[i].y;
    7134:	11 96       	adiw	r26, 0x01	; 1
    7136:	2c 91       	ld	r18, X
    7138:	21 83       	std	Z+1, r18	; 0x01
    713a:	04 96       	adiw	r24, 0x04	; 4
void LBRotateSprites()
{
	static u8 rotate_index = ROTATE_SPRITES_FROM;
	u8 mappedSpriteCount = MAX_EXTENDED_SPRITES;
	
	for (u8 i = 0; i < ROTATE_SPRITES_FROM; i++)
    713c:	8c 32       	cpi	r24, 0x2C	; 44
    713e:	91 05       	cpc	r25, r1
    7140:	49 f7       	brne	.-46     	; 0x7114 <LBRotateSprites+0x4>
    7142:	80 91 01 05 	lds	r24, 0x0501
    7146:	20 e0       	ldi	r18, 0x00	; 0
    7148:	30 e0       	ldi	r19, 0x00	; 0
		sprites[i].y = extendedSprites[i].y;
	}
	
	for (u8 i = ROTATE_SPRITES_FROM; i < MAX_SPRITES; i++)
	{
		sprites[i].flags = extendedSprites[rotate_index].flags;
    714a:	94 e0       	ldi	r25, 0x04	; 4
    714c:	89 9f       	mul	r24, r25
    714e:	d0 01       	movw	r26, r0
    7150:	11 24       	eor	r1, r1
    7152:	a0 57       	subi	r26, 0x70	; 112
    7154:	b0 4f       	sbci	r27, 0xF0	; 240
    7156:	13 96       	adiw	r26, 0x03	; 3
    7158:	9c 91       	ld	r25, X
    715a:	13 97       	sbiw	r26, 0x03	; 3
    715c:	f9 01       	movw	r30, r18
    715e:	ee 5f       	subi	r30, 0xFE	; 254
    7160:	fa 4f       	sbci	r31, 0xFA	; 250
    7162:	97 a7       	std	Z+47, r25	; 0x2f
		sprites[i].tileIndex = extendedSprites[rotate_index].tileIndex;
    7164:	12 96       	adiw	r26, 0x02	; 2
    7166:	9c 91       	ld	r25, X
    7168:	12 97       	sbiw	r26, 0x02	; 2
    716a:	96 a7       	std	Z+46, r25	; 0x2e
		sprites[i].x = extendedSprites[rotate_index].x;
    716c:	9c 91       	ld	r25, X
    716e:	94 a7       	std	Z+44, r25	; 0x2c
		sprites[i].y = extendedSprites[rotate_index].y;
    7170:	11 96       	adiw	r26, 0x01	; 1
    7172:	9c 91       	ld	r25, X
    7174:	95 a7       	std	Z+45, r25	; 0x2d
		rotate_index += 1;
    7176:	8f 5f       	subi	r24, 0xFF	; 255
		if (rotate_index >= MAX_EXTENDED_SPRITES) rotate_index = ROTATE_SPRITES_FROM;
    7178:	84 31       	cpi	r24, 0x14	; 20
    717a:	08 f0       	brcs	.+2      	; 0x717e <LBRotateSprites+0x6e>
    717c:	8b e0       	ldi	r24, 0x0B	; 11
    717e:	2c 5f       	subi	r18, 0xFC	; 252
    7180:	3f 4f       	sbci	r19, 0xFF	; 255
		sprites[i].tileIndex = extendedSprites[i].tileIndex;
		sprites[i].x = extendedSprites[i].x;
		sprites[i].y = extendedSprites[i].y;
	}
	
	for (u8 i = ROTATE_SPRITES_FROM; i < MAX_SPRITES; i++)
    7182:	2c 30       	cpi	r18, 0x0C	; 12
    7184:	31 05       	cpc	r19, r1
    7186:	09 f7       	brne	.-62     	; 0x714a <LBRotateSprites+0x3a>
    7188:	80 93 01 05 	sts	0x0501, r24
    718c:	08 95       	ret

0000718e <init_game_state>:
char* enemy_shot_anim[1];
char* expl_anim[3];

void init_game_state()
{
	game.lives = LIVES;
    718e:	e1 e9       	ldi	r30, 0x91	; 145
    7190:	fd e0       	ldi	r31, 0x0D	; 13
    7192:	85 e0       	ldi	r24, 0x05	; 5
    7194:	86 87       	std	Z+14, r24	; 0x0e
	game.score = 0;
    7196:	11 86       	std	Z+9, r1	; 0x09
    7198:	10 86       	std	Z+8, r1	; 0x08
	game.time = 0;
    719a:	13 86       	std	Z+11, r1	; 0x0b
    719c:	12 86       	std	Z+10, r1	; 0x0a
    719e:	08 95       	ret

000071a0 <init_enemy_state>:
}

void init_enemy_state()
{
    71a0:	80 e0       	ldi	r24, 0x00	; 0
    71a2:	90 e0       	ldi	r25, 0x00	; 0
    71a4:	9c 01       	movw	r18, r24
    71a6:	2f 56       	subi	r18, 0x6F	; 111
    71a8:	32 4f       	sbci	r19, 0xF2	; 242
    71aa:	f9 01       	movw	r30, r18
    71ac:	eb 54       	subi	r30, 0x4B	; 75
    71ae:	ff 4f       	sbci	r31, 0xFF	; 255
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		game.enemies[i].active = 0;
    71b0:	10 82       	st	Z, r1
    71b2:	7a 96       	adiw	r30, 0x1a	; 26
		for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
		{
			game.enemies[i].shot[j].active = 0;
    71b4:	10 82       	st	Z, r1
    71b6:	8e 5b       	subi	r24, 0xBE	; 190
    71b8:	9f 4f       	sbci	r25, 0xFF	; 255
	game.time = 0;
}

void init_enemy_state()
{
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    71ba:	8a 34       	cpi	r24, 0x4A	; 74
    71bc:	21 e0       	ldi	r18, 0x01	; 1
    71be:	92 07       	cpc	r25, r18
    71c0:	89 f7       	brne	.-30     	; 0x71a4 <init_enemy_state+0x4>
		for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
		{
			game.enemies[i].shot[j].active = 0;
		}
	}
	game.active_enemies = 0;
    71c2:	10 92 a9 0d 	sts	0x0DA9, r1
    71c6:	08 95       	ret

000071c8 <init_player_state>:
}

void init_player_state()
{
	game.player.direction = D_RIGHT;
    71c8:	81 e0       	ldi	r24, 0x01	; 1
    71ca:	80 93 bd 0d 	sts	0x0DBD, r24
	game.player.flags = IDLE;
    71ce:	98 e0       	ldi	r25, 0x08	; 8
    71d0:	90 93 bb 0d 	sts	0x0DBB, r25
	game.player.width = 2;
    71d4:	92 e0       	ldi	r25, 0x02	; 2
    71d6:	90 93 be 0d 	sts	0x0DBE, r25
	game.player.height = 3;
    71da:	93 e0       	ldi	r25, 0x03	; 3
    71dc:	90 93 bf 0d 	sts	0x0DBF, r25
	game.player.shield = PLAYER_SHIELD;
    71e0:	2a e0       	ldi	r18, 0x0A	; 10
    71e2:	20 93 c0 0d 	sts	0x0DC0, r18
	game.player.idle.anim_count = 1;
    71e6:	80 93 10 0e 	sts	0x0E10, r24
	game.player.idle.frames_per_anim = 1;
    71ea:	80 93 11 0e 	sts	0x0E11, r24
	game.player.idle.anims = idle_anim;
    71ee:	22 ef       	ldi	r18, 0xF2	; 242
    71f0:	3f e0       	ldi	r19, 0x0F	; 15
    71f2:	30 93 16 0e 	sts	0x0E16, r19
    71f6:	20 93 15 0e 	sts	0x0E15, r18
	game.player.idle.anims[0] = (char*) map_hero_idle;
    71fa:	25 e9       	ldi	r18, 0x95	; 149
    71fc:	3a e2       	ldi	r19, 0x2A	; 42
    71fe:	30 93 f3 0f 	sts	0x0FF3, r19
    7202:	20 93 f2 0f 	sts	0x0FF2, r18
	
	game.player.jump.anim_count = 1;
    7206:	80 93 20 0e 	sts	0x0E20, r24
	game.player.jump.frames_per_anim = 1;
    720a:	80 93 21 0e 	sts	0x0E21, r24
	game.player.jump.anims = jump_anim;
    720e:	2f e6       	ldi	r18, 0x6F	; 111
    7210:	3d e0       	ldi	r19, 0x0D	; 13
    7212:	30 93 26 0e 	sts	0x0E26, r19
    7216:	20 93 25 0e 	sts	0x0E25, r18
	game.player.jump.anims[0] = (char*) map_hero_jump;
    721a:	2d e6       	ldi	r18, 0x6D	; 109
    721c:	3a e2       	ldi	r19, 0x2A	; 42
    721e:	30 93 70 0d 	sts	0x0D70, r19
    7222:	20 93 6f 0d 	sts	0x0D6F, r18
	
	game.player.prone.anim_count = 1;
    7226:	80 93 28 0e 	sts	0x0E28, r24
	game.player.prone.frames_per_anim = 1;
    722a:	80 93 29 0e 	sts	0x0E29, r24
	game.player.prone.anims = prone_anim;
    722e:	2a e8       	ldi	r18, 0x8A	; 138
    7230:	3f e0       	ldi	r19, 0x0F	; 15
    7232:	30 93 2e 0e 	sts	0x0E2E, r19
    7236:	20 93 2d 0e 	sts	0x0E2D, r18
	game.player.prone.anims[0] = (char*) map_hero_prone;
    723a:	28 e6       	ldi	r18, 0x68	; 104
    723c:	3a e2       	ldi	r19, 0x2A	; 42
    723e:	30 93 8b 0f 	sts	0x0F8B, r19
    7242:	20 93 8a 0f 	sts	0x0F8A, r18
	
	game.player.expl.anim_count = 3;
    7246:	90 93 30 0e 	sts	0x0E30, r25
	game.player.expl.frames_per_anim = EXPLOSION_FRAME_COUNT;
    724a:	85 e0       	ldi	r24, 0x05	; 5
    724c:	80 93 31 0e 	sts	0x0E31, r24
	game.player.expl.anims = expl_anim;
    7250:	8c ee       	ldi	r24, 0xEC	; 236
    7252:	9f e0       	ldi	r25, 0x0F	; 15
    7254:	90 93 36 0e 	sts	0x0E36, r25
    7258:	80 93 35 0e 	sts	0x0E35, r24
	game.player.expl.anims[0] = (char*) map_explosion_0;
    725c:	83 ea       	ldi	r24, 0xA3	; 163
    725e:	9a e2       	ldi	r25, 0x2A	; 42
    7260:	90 93 ed 0f 	sts	0x0FED, r25
    7264:	80 93 ec 0f 	sts	0x0FEC, r24
	game.player.expl.anims[1] = (char*) map_explosion_1;
    7268:	80 ea       	ldi	r24, 0xA0	; 160
    726a:	9a e2       	ldi	r25, 0x2A	; 42
    726c:	90 93 ef 0f 	sts	0x0FEF, r25
    7270:	80 93 ee 0f 	sts	0x0FEE, r24
	game.player.expl.anims[2] = (char*) map_explosion_2;
    7274:	8d e9       	ldi	r24, 0x9D	; 157
    7276:	9a e2       	ldi	r25, 0x2A	; 42
    7278:	90 93 f1 0f 	sts	0x0FF1, r25
    727c:	80 93 f0 0f 	sts	0x0FF0, r24
	
	game.player.run.anim_count = 4;
    7280:	84 e0       	ldi	r24, 0x04	; 4
    7282:	80 93 18 0e 	sts	0x0E18, r24
	game.player.run.frames_per_anim = FRAMES_PER_RUN_CYCLE;
    7286:	8c e0       	ldi	r24, 0x0C	; 12
    7288:	80 93 19 0e 	sts	0x0E19, r24
	game.player.run.anims = run_anim;
    728c:	80 ee       	ldi	r24, 0xE0	; 224
    728e:	9f e0       	ldi	r25, 0x0F	; 15
    7290:	90 93 1e 0e 	sts	0x0E1E, r25
    7294:	80 93 1d 0e 	sts	0x0E1D, r24
	game.player.run.anims[0] = (char*) map_hero_step_0;
    7298:	8d e8       	ldi	r24, 0x8D	; 141
    729a:	9a e2       	ldi	r25, 0x2A	; 42
    729c:	90 93 e1 0f 	sts	0x0FE1, r25
    72a0:	80 93 e0 0f 	sts	0x0FE0, r24
	game.player.run.anims[1] = (char*) map_hero_step_1;
    72a4:	85 e8       	ldi	r24, 0x85	; 133
    72a6:	9a e2       	ldi	r25, 0x2A	; 42
    72a8:	90 93 e3 0f 	sts	0x0FE3, r25
    72ac:	80 93 e2 0f 	sts	0x0FE2, r24
	game.player.run.anims[2] = (char*) map_hero_step_2;
    72b0:	8d e7       	ldi	r24, 0x7D	; 125
    72b2:	9a e2       	ldi	r25, 0x2A	; 42
    72b4:	90 93 e5 0f 	sts	0x0FE5, r25
    72b8:	80 93 e4 0f 	sts	0x0FE4, r24
	game.player.run.anims[3] = (char*) map_hero_step_3;
    72bc:	85 e7       	ldi	r24, 0x75	; 117
    72be:	9a e2       	ldi	r25, 0x2A	; 42
    72c0:	90 93 e7 0f 	sts	0x0FE7, r25
    72c4:	80 93 e6 0f 	sts	0x0FE6, r24
    72c8:	e5 ed       	ldi	r30, 0xD5	; 213
    72ca:	fd e0       	ldi	r31, 0x0D	; 13
	
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
	{
		game.player.shot[i].hit_count = 1;
    72cc:	81 e0       	ldi	r24, 0x01	; 1
		game.player.shot[i].shot_type = BASIC_SHOT;
		game.player.shot[i].anim.anim_count = 1;
		game.player.shot[i].anim.frames_per_anim = 1;
		game.player.shot[i].anim.anims = shot_anim;
    72ce:	2a ee       	ldi	r18, 0xEA	; 234
    72d0:	3f e0       	ldi	r19, 0x0F	; 15
    72d2:	df 01       	movw	r26, r30
    72d4:	14 97       	sbiw	r26, 0x04	; 4
	game.player.run.anims[2] = (char*) map_hero_step_2;
	game.player.run.anims[3] = (char*) map_hero_step_3;
	
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
	{
		game.player.shot[i].hit_count = 1;
    72d6:	8c 93       	st	X, r24
    72d8:	11 97       	sbiw	r26, 0x01	; 1
		game.player.shot[i].shot_type = BASIC_SHOT;
    72da:	1c 92       	st	X, r1
    72dc:	14 96       	adiw	r26, 0x04	; 4
		game.player.shot[i].anim.anim_count = 1;
    72de:	8c 93       	st	X, r24
		game.player.shot[i].anim.frames_per_anim = 1;
    72e0:	80 83       	st	Z, r24
		game.player.shot[i].anim.anims = shot_anim;
    72e2:	35 83       	std	Z+5, r19	; 0x05
    72e4:	24 83       	std	Z+4, r18	; 0x04
    72e6:	7a 96       	adiw	r30, 0x1a	; 26
	game.player.run.anims[0] = (char*) map_hero_step_0;
	game.player.run.anims[1] = (char*) map_hero_step_1;
	game.player.run.anims[2] = (char*) map_hero_step_2;
	game.player.run.anims[3] = (char*) map_hero_step_3;
	
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
    72e8:	9e e0       	ldi	r25, 0x0E	; 14
    72ea:	e3 32       	cpi	r30, 0x23	; 35
    72ec:	f9 07       	cpc	r31, r25
    72ee:	89 f7       	brne	.-30     	; 0x72d2 <init_player_state+0x10a>
    72f0:	87 e4       	ldi	r24, 0x47	; 71
    72f2:	9a e2       	ldi	r25, 0x2A	; 42
    72f4:	90 93 eb 0f 	sts	0x0FEB, r25
    72f8:	80 93 ea 0f 	sts	0x0FEA, r24
    72fc:	08 95       	ret

000072fe <init_enemy_spider>:
		game.player.shot[i].anim.anims[0] = (char*) map_hero_shot;
	}
}

void init_enemy_spider(u8 i, u16 x, u16 y)
{
    72fe:	af 92       	push	r10
    7300:	bf 92       	push	r11
    7302:	cf 92       	push	r12
    7304:	df 92       	push	r13
    7306:	ef 92       	push	r14
    7308:	ff 92       	push	r15
    730a:	1f 93       	push	r17
    730c:	cf 93       	push	r28
    730e:	df 93       	push	r29
    7310:	5a 01       	movw	r10, r20
	game.enemies[i].active = 1;
    7312:	22 e4       	ldi	r18, 0x42	; 66
    7314:	82 9f       	mul	r24, r18
    7316:	c0 01       	movw	r24, r0
    7318:	11 24       	eor	r1, r1
    731a:	ec 01       	movw	r28, r24
    731c:	cf 56       	subi	r28, 0x6F	; 111
    731e:	d2 4f       	sbci	r29, 0xF2	; 242
    7320:	fe 01       	movw	r30, r28
    7322:	eb 54       	subi	r30, 0x4B	; 75
    7324:	ff 4f       	sbci	r31, 0xFF	; 255
    7326:	11 e0       	ldi	r17, 0x01	; 1
    7328:	10 83       	st	Z, r17
	game.enemies[i].direction = D_LEFT;
    732a:	32 96       	adiw	r30, 0x02	; 2
    732c:	10 82       	st	Z, r1
	game.enemies[i].flags = IDLE;
    732e:	31 97       	sbiw	r30, 0x01	; 1
    7330:	88 e0       	ldi	r24, 0x08	; 8
    7332:	80 83       	st	Z, r24
	game.enemies[i].width = 1;
    7334:	32 96       	adiw	r30, 0x02	; 2
    7336:	10 83       	st	Z, r17
	game.enemies[i].height = 1;
    7338:	31 96       	adiw	r30, 0x01	; 1
    733a:	10 83       	st	Z, r17
	game.enemies[i].enemy_type = ENEMY_SPIDER;
    733c:	31 96       	adiw	r30, 0x01	; 1
    733e:	10 82       	st	Z, r1
	game.enemies[i].frame_count = 0;
    7340:	31 96       	adiw	r30, 0x01	; 1
    7342:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    7344:	31 96       	adiw	r30, 0x01	; 1
    7346:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_SPIDER_SHIELD;
    7348:	31 96       	adiw	r30, 0x01	; 1
    734a:	82 e0       	ldi	r24, 0x02	; 2
    734c:	80 83       	st	Z, r24
	
	game.enemies[i].anim.anim_count = 2;
    734e:	7c 96       	adiw	r30, 0x1c	; 28
    7350:	80 83       	st	Z, r24
	game.enemies[i].anim.frames_per_anim = SPIDER_FRAMES_PER_IDLE;
    7352:	31 96       	adiw	r30, 0x01	; 1
    7354:	8a e0       	ldi	r24, 0x0A	; 10
    7356:	80 83       	st	Z, r24
	game.enemies[i].anim.anims = spider_anim;
    7358:	de 01       	movw	r26, r28
    735a:	a2 52       	subi	r26, 0x22	; 34
    735c:	bf 4f       	sbci	r27, 0xFF	; 255
    735e:	ec e8       	ldi	r30, 0x8C	; 140
    7360:	ff e0       	ldi	r31, 0x0F	; 15
    7362:	ed 93       	st	X+, r30
    7364:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_spider_0;
    7366:	8e e3       	ldi	r24, 0x3E	; 62
    7368:	9a e2       	ldi	r25, 0x2A	; 42
    736a:	91 83       	std	Z+1, r25	; 0x01
    736c:	80 83       	st	Z, r24
	game.enemies[i].anim.anims[1] = (char*) map_enemy_spider_1;
    736e:	8b e3       	ldi	r24, 0x3B	; 59
    7370:	9a e2       	ldi	r25, 0x2A	; 42
    7372:	93 83       	std	Z+3, r25	; 0x03
    7374:	82 83       	std	Z+2, r24	; 0x02
	game.enemies[i].shared.gravity = 0;
    7376:	fe 01       	movw	r30, r28
    7378:	ec 54       	subi	r30, 0x4C	; 76
    737a:	ff 4f       	sbci	r31, 0xFF	; 255
    737c:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = 0;
    737e:	32 97       	sbiw	r30, 0x02	; 2
    7380:	11 82       	std	Z+1, r1	; 0x01
    7382:	10 82       	st	Z, r1
	game.enemies[i].shared.vy = 0;
    7384:	3c 97       	sbiw	r30, 0x0c	; 12
    7386:	10 82       	st	Z, r1
    7388:	11 82       	std	Z+1, r1	; 0x01
    738a:	12 82       	std	Z+2, r1	; 0x02
    738c:	13 82       	std	Z+3, r1	; 0x03
	game.enemies[i].shared.x = x;
    738e:	80 e0       	ldi	r24, 0x00	; 0
    7390:	90 e0       	ldi	r25, 0x00	; 0
    7392:	0e 94 9c 4c 	call	0x9938	; 0x9938 <__floatunsisf>
    7396:	6b 01       	movw	r12, r22
    7398:	7c 01       	movw	r14, r24
    739a:	fe 01       	movw	r30, r28
    739c:	e6 55       	subi	r30, 0x56	; 86
    739e:	ff 4f       	sbci	r31, 0xFF	; 255
    73a0:	60 83       	st	Z, r22
    73a2:	71 83       	std	Z+1, r23	; 0x01
    73a4:	82 83       	std	Z+2, r24	; 0x02
    73a6:	93 83       	std	Z+3, r25	; 0x03
	game.enemies[i].shared.y = y;
    73a8:	b5 01       	movw	r22, r10
    73aa:	80 e0       	ldi	r24, 0x00	; 0
    73ac:	90 e0       	ldi	r25, 0x00	; 0
    73ae:	0e 94 9c 4c 	call	0x9938	; 0x9938 <__floatunsisf>
    73b2:	fe 01       	movw	r30, r28
    73b4:	e2 55       	subi	r30, 0x52	; 82
    73b6:	ff 4f       	sbci	r31, 0xFF	; 255
    73b8:	60 83       	st	Z, r22
    73ba:	71 83       	std	Z+1, r23	; 0x01
    73bc:	82 83       	std	Z+2, r24	; 0x02
    73be:	93 83       	std	Z+3, r25	; 0x03
	
	game.enemies[i].expl.anim_count = 3;
    73c0:	f3 96       	adiw	r30, 0x33	; 51
    73c2:	23 e0       	ldi	r18, 0x03	; 3
    73c4:	20 83       	st	Z, r18
	game.enemies[i].expl.frames_per_anim = EXPLOSION_FRAME_COUNT;
    73c6:	31 96       	adiw	r30, 0x01	; 1
    73c8:	25 e0       	ldi	r18, 0x05	; 5
    73ca:	20 83       	st	Z, r18
	game.enemies[i].expl.anims = expl_anim;
    73cc:	de 01       	movw	r26, r28
    73ce:	aa 51       	subi	r26, 0x1A	; 26
    73d0:	bf 4f       	sbci	r27, 0xFF	; 255
    73d2:	ec ee       	ldi	r30, 0xEC	; 236
    73d4:	ff e0       	ldi	r31, 0x0F	; 15
    73d6:	11 96       	adiw	r26, 0x01	; 1
    73d8:	fc 93       	st	X, r31
    73da:	ee 93       	st	-X, r30
	game.enemies[i].expl.anims[0] = (char*) map_explosion_0;
    73dc:	23 ea       	ldi	r18, 0xA3	; 163
    73de:	3a e2       	ldi	r19, 0x2A	; 42
    73e0:	31 83       	std	Z+1, r19	; 0x01
    73e2:	20 83       	st	Z, r18
	game.enemies[i].expl.anims[1] = (char*) map_explosion_1;
    73e4:	20 ea       	ldi	r18, 0xA0	; 160
    73e6:	3a e2       	ldi	r19, 0x2A	; 42
    73e8:	33 83       	std	Z+3, r19	; 0x03
    73ea:	22 83       	std	Z+2, r18	; 0x02
	game.enemies[i].expl.anims[2] = (char*) map_explosion_2;
    73ec:	2d e9       	ldi	r18, 0x9D	; 157
    73ee:	3a e2       	ldi	r19, 0x2A	; 42
    73f0:	35 83       	std	Z+5, r19	; 0x05
    73f2:	24 83       	std	Z+4, r18	; 0x04
		
	for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
	{
		game.enemies[i].shot[j].hit_count = 1;
    73f4:	fe 01       	movw	r30, r28
    73f6:	e2 53       	subi	r30, 0x32	; 50
    73f8:	ff 4f       	sbci	r31, 0xFF	; 255
    73fa:	10 83       	st	Z, r17
		game.enemies[i].shot[j].active = 0;
    73fc:	31 96       	adiw	r30, 0x01	; 1
    73fe:	10 82       	st	Z, r1
		game.enemies[i].shot[j].shot_type = BASIC_ENEMY_SHOT;
    7400:	32 97       	sbiw	r30, 0x02	; 2
    7402:	10 83       	st	Z, r17
		game.enemies[i].shot[j].anim.anim_count = 1;
    7404:	34 96       	adiw	r30, 0x04	; 4
    7406:	10 83       	st	Z, r17
		game.enemies[i].shot[j].anim.frames_per_anim = 1;
    7408:	31 96       	adiw	r30, 0x01	; 1
    740a:	10 83       	st	Z, r17
		game.enemies[i].shot[j].anim.anims = enemy_shot_anim;
    740c:	50 97       	sbiw	r26, 0x10	; 16
    740e:	e8 ee       	ldi	r30, 0xE8	; 232
    7410:	ff e0       	ldi	r31, 0x0F	; 15
    7412:	ed 93       	st	X+, r30
    7414:	fc 93       	st	X, r31
		game.enemies[i].shot[j].anim.anims[0] = (char*) map_enemy_shot;
    7416:	24 e4       	ldi	r18, 0x44	; 68
    7418:	3a e2       	ldi	r19, 0x2A	; 42
    741a:	31 83       	std	Z+1, r19	; 0x01
    741c:	20 83       	st	Z, r18
		game.enemies[i].shot[j].shared.vx = 0;
    741e:	fe 01       	movw	r30, r28
    7420:	e6 53       	subi	r30, 0x36	; 54
    7422:	ff 4f       	sbci	r31, 0xFF	; 255
    7424:	11 82       	std	Z+1, r1	; 0x01
    7426:	10 82       	st	Z, r1
		game.enemies[i].shot[j].shared.vy = 0;
    7428:	3c 97       	sbiw	r30, 0x0c	; 12
    742a:	10 82       	st	Z, r1
    742c:	11 82       	std	Z+1, r1	; 0x01
    742e:	12 82       	std	Z+2, r1	; 0x02
    7430:	13 82       	std	Z+3, r1	; 0x03
		game.enemies[i].shot[j].shared.x = x;
    7432:	34 96       	adiw	r30, 0x04	; 4
    7434:	c0 82       	st	Z, r12
    7436:	d1 82       	std	Z+1, r13	; 0x01
    7438:	e2 82       	std	Z+2, r14	; 0x02
    743a:	f3 82       	std	Z+3, r15	; 0x03
		game.enemies[i].shot[j].shared.y = y;
    743c:	ca 53       	subi	r28, 0x3A	; 58
    743e:	df 4f       	sbci	r29, 0xFF	; 255
    7440:	68 83       	st	Y, r22
    7442:	79 83       	std	Y+1, r23	; 0x01
    7444:	8a 83       	std	Y+2, r24	; 0x02
    7446:	9b 83       	std	Y+3, r25	; 0x03
	}
}
    7448:	df 91       	pop	r29
    744a:	cf 91       	pop	r28
    744c:	1f 91       	pop	r17
    744e:	ff 90       	pop	r15
    7450:	ef 90       	pop	r14
    7452:	df 90       	pop	r13
    7454:	cf 90       	pop	r12
    7456:	bf 90       	pop	r11
    7458:	af 90       	pop	r10
    745a:	08 95       	ret

0000745c <fade_through>:
	EepromWriteBlock(block);
}

void fade_through()
{
	FadeOut(FRAMES_PER_FADE, true);
    745c:	61 e0       	ldi	r22, 0x01	; 1
    745e:	83 e0       	ldi	r24, 0x03	; 3
    7460:	0e 94 91 36 	call	0x6d22	; 0x6d22 <FadeOut>
	ClearVram();
    7464:	0e 94 e7 27 	call	0x4fce	; 0x4fce <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    7468:	60 e0       	ldi	r22, 0x00	; 0
    746a:	83 e0       	ldi	r24, 0x03	; 3
    746c:	0c 94 85 36 	jmp	0x6d0a	; 0x6d0a <FadeIn>

00007470 <clear_overlay>:
{
	SetTile(x, y, level_tile);
}

void clear_overlay(u8 overlayHeight)
{
    7470:	1f 93       	push	r17
    7472:	cf 93       	push	r28
    7474:	df 93       	push	r29
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
    7476:	d0 e0       	ldi	r29, 0x00	; 0
    7478:	10 e2       	ldi	r17, 0x20	; 32
    747a:	18 0f       	add	r17, r24
{
	SetTile(x, y, level_tile);
}

void clear_overlay(u8 overlayHeight)
{
    747c:	c0 e2       	ldi	r28, 0x20	; 32
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
	{
		for(u8 y = 0; y < overlayHeight; y++)
    747e:	c1 17       	cp	r28, r17
    7480:	41 f0       	breq	.+16     	; 0x7492 <clear_overlay+0x22>
		{
			SetTile(x, VRAM_TILES_V+y, 0);
    7482:	40 e0       	ldi	r20, 0x00	; 0
    7484:	50 e0       	ldi	r21, 0x00	; 0
    7486:	6c 2f       	mov	r22, r28
    7488:	8d 2f       	mov	r24, r29
    748a:	0e 94 f1 27 	call	0x4fe2	; 0x4fe2 <SetTile>
    748e:	cf 5f       	subi	r28, 0xFF	; 255
    7490:	f6 cf       	rjmp	.-20     	; 0x747e <clear_overlay+0xe>
	SetTile(x, y, level_tile);
}

void clear_overlay(u8 overlayHeight)
{
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
    7492:	df 5f       	subi	r29, 0xFF	; 255
    7494:	dc 31       	cpi	r29, 0x1C	; 28
    7496:	91 f7       	brne	.-28     	; 0x747c <clear_overlay+0xc>
		for(u8 y = 0; y < overlayHeight; y++)
		{
			SetTile(x, VRAM_TILES_V+y, 0);
		}
	}
}
    7498:	df 91       	pop	r29
    749a:	cf 91       	pop	r28
    749c:	1f 91       	pop	r17
    749e:	08 95       	ret

000074a0 <read_level_byte>:
#else
u8 read_level_byte(char* level_data, u16 index)
{
	// C Code
	
	u16 counter = index / 128 * 16;
    74a0:	fb 01       	movw	r30, r22
    74a2:	ee 0f       	add	r30, r30
    74a4:	ef 2f       	mov	r30, r31
    74a6:	ee 1f       	adc	r30, r30
    74a8:	ff 0b       	sbc	r31, r31
    74aa:	f1 95       	neg	r31
    74ac:	34 e0       	ldi	r19, 0x04	; 4
    74ae:	ee 0f       	add	r30, r30
    74b0:	ff 1f       	adc	r31, r31
    74b2:	3a 95       	dec	r19
    74b4:	e1 f7       	brne	.-8      	; 0x74ae <read_level_byte+0xe>
	u16 cumulative_rlength = counter * 8;
    74b6:	9f 01       	movw	r18, r30
    74b8:	43 e0       	ldi	r20, 0x03	; 3
    74ba:	22 0f       	add	r18, r18
    74bc:	33 1f       	adc	r19, r19
    74be:	4a 95       	dec	r20
    74c0:	e1 f7       	brne	.-8      	; 0x74ba <read_level_byte+0x1a>
		counter += 2;
	}
	return 0;*/
	
	// ASM Code
	index += 1;
    74c2:	6f 5f       	subi	r22, 0xFF	; 255
    74c4:	7f 4f       	sbci	r23, 0xFF	; 255
	counter += (u16) level_data;
    74c6:	8e 0f       	add	r24, r30
    74c8:	9f 1f       	adc	r25, r31
	  [cntr] "+z" (counter),
	  [crln] "+r" (cumulative_rlength),
	  [rln]  "+r" (rlength),
	  [vl]   "=&r" (value));
	return value;
}
    74ca:	fc 01       	movw	r30, r24
    74cc:	90 e0       	ldi	r25, 0x00	; 0

000074ce <while1>:
    74ce:	95 91       	lpm	r25, Z+
    74d0:	85 91       	lpm	r24, Z+
    74d2:	29 0f       	add	r18, r25
    74d4:	31 1d       	adc	r19, r1
    74d6:	26 17       	cp	r18, r22
    74d8:	37 07       	cpc	r19, r23
    74da:	08 f4       	brcc	.+2      	; 0x74de <while1done>
    74dc:	f8 cf       	rjmp	.-16     	; 0x74ce <while1>

000074de <while1done>:
    74de:	08 95       	ret

000074e0 <get_level_tile>:
{
	return 21;
}

u8 get_level_tile(char* level_data, u16 x, u16 y)
{
    74e0:	6e 5f       	subi	r22, 0xFE	; 254
    74e2:	7f 4f       	sbci	r23, 0xFF	; 255
	return read_level_byte(level_data, 2 + y*LEVEL_WIDTH+x);
    74e4:	ef ef       	ldi	r30, 0xFF	; 255
    74e6:	e4 9f       	mul	r30, r20
    74e8:	90 01       	movw	r18, r0
    74ea:	e5 9f       	mul	r30, r21
    74ec:	30 0d       	add	r19, r0
    74ee:	11 24       	eor	r1, r1
    74f0:	62 0f       	add	r22, r18
    74f2:	73 1f       	adc	r23, r19
    74f4:	0c 94 50 3a 	jmp	0x74a0	; 0x74a0 <read_level_byte>

000074f8 <render_camera_view>:
}

void render_camera_view()
{
    74f8:	7f 92       	push	r7
    74fa:	8f 92       	push	r8
    74fc:	9f 92       	push	r9
    74fe:	af 92       	push	r10
    7500:	bf 92       	push	r11
    7502:	cf 92       	push	r12
    7504:	df 92       	push	r13
    7506:	ef 92       	push	r14
    7508:	ff 92       	push	r15
    750a:	0f 93       	push	r16
    750c:	1f 93       	push	r17
    750e:	cf 93       	push	r28
    7510:	df 93       	push	r29
	u8 level_tile;
	u16 camara_x_tile = game.camera_x/8;
    7512:	c0 91 95 0d 	lds	r28, 0x0D95
    7516:	d0 91 96 0d 	lds	r29, 0x0D96
    751a:	83 e0       	ldi	r24, 0x03	; 3
    751c:	d6 95       	lsr	r29
    751e:	c7 95       	ror	r28
    7520:	8a 95       	dec	r24
    7522:	e1 f7       	brne	.-8      	; 0x751c <render_camera_view+0x24>
	u16 camera_y_tile = game.camera_y/8;
    7524:	c0 90 97 0d 	lds	r12, 0x0D97
    7528:	d0 90 98 0d 	lds	r13, 0x0D98
    752c:	93 e0       	ldi	r25, 0x03	; 3
    752e:	d6 94       	lsr	r13
    7530:	c7 94       	ror	r12
    7532:	9a 95       	dec	r25
    7534:	e1 f7       	brne	.-8      	; 0x752e <render_camera_view+0x36>
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    7536:	8e 01       	movw	r16, r28
    7538:	5e 01       	movw	r10, r28
    753a:	8c e1       	ldi	r24, 0x1C	; 28
    753c:	a8 0e       	add	r10, r24
    753e:	b1 1c       	adc	r11, r1
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    7540:	46 01       	movw	r8, r12
    7542:	8a e1       	ldi	r24, 0x1A	; 26
    7544:	88 0e       	add	r8, r24
    7546:	91 1c       	adc	r9, r1
{
	u8 level_tile;
	u16 camara_x_tile = game.camera_x/8;
	u16 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    7548:	a0 16       	cp	r10, r16
    754a:	b1 06       	cpc	r11, r17
    754c:	e0 f0       	brcs	.+56     	; 0x7586 <render_camera_view+0x8e>
    754e:	76 01       	movw	r14, r12
    7550:	70 2e       	mov	r7, r16
    7552:	7c 1a       	sub	r7, r28
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    7554:	8e 14       	cp	r8, r14
    7556:	9f 04       	cpc	r9, r15
    7558:	98 f0       	brcs	.+38     	; 0x7580 <render_camera_view+0x88>
		{
			level_tile = get_level_tile(game.current_level, x, y);
    755a:	a7 01       	movw	r20, r14
    755c:	b8 01       	movw	r22, r16
    755e:	80 91 88 0f 	lds	r24, 0x0F88
    7562:	90 91 89 0f 	lds	r25, 0x0F89
    7566:	0e 94 70 3a 	call	0x74e0	; 0x74e0 <get_level_tile>
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    756a:	48 2f       	mov	r20, r24
    756c:	50 e0       	ldi	r21, 0x00	; 0
    756e:	6e 2d       	mov	r22, r14
    7570:	6c 19       	sub	r22, r12
    7572:	87 2d       	mov	r24, r7
    7574:	0e 94 f1 27 	call	0x4fe2	; 0x4fe2 <SetTile>
	u16 camara_x_tile = game.camera_x/8;
	u16 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    7578:	8f ef       	ldi	r24, 0xFF	; 255
    757a:	e8 1a       	sub	r14, r24
    757c:	f8 0a       	sbc	r15, r24
    757e:	ea cf       	rjmp	.-44     	; 0x7554 <render_camera_view+0x5c>
{
	u8 level_tile;
	u16 camara_x_tile = game.camera_x/8;
	u16 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    7580:	0f 5f       	subi	r16, 0xFF	; 255
    7582:	1f 4f       	sbci	r17, 0xFF	; 255
    7584:	e1 cf       	rjmp	.-62     	; 0x7548 <render_camera_view+0x50>
		{
			level_tile = get_level_tile(game.current_level, x, y);
			render_level_tile(level_tile, x - camara_x_tile, y - camera_y_tile);
		}
	}
}
    7586:	df 91       	pop	r29
    7588:	cf 91       	pop	r28
    758a:	1f 91       	pop	r17
    758c:	0f 91       	pop	r16
    758e:	ff 90       	pop	r15
    7590:	ef 90       	pop	r14
    7592:	df 90       	pop	r13
    7594:	cf 90       	pop	r12
    7596:	bf 90       	pop	r11
    7598:	af 90       	pop	r10
    759a:	9f 90       	pop	r9
    759c:	8f 90       	pop	r8
    759e:	7f 90       	pop	r7
    75a0:	08 95       	ret

000075a2 <spawn_enemy>:

void spawn_enemy(u16 x, u16 y)
{
    75a2:	fc 01       	movw	r30, r24
    75a4:	21 e9       	ldi	r18, 0x91	; 145
    75a6:	3d e0       	ldi	r19, 0x0D	; 13
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    75a8:	90 e0       	ldi	r25, 0x00	; 0
    75aa:	d9 01       	movw	r26, r18
    75ac:	ab 54       	subi	r26, 0x4B	; 75
    75ae:	bf 4f       	sbci	r27, 0xFF	; 255
	{
		if (!game.enemies[i].active)
    75b0:	8c 91       	ld	r24, X
    75b2:	81 11       	cpse	r24, r1
    75b4:	0f c0       	rjmp	.+30     	; 0x75d4 <spawn_enemy+0x32>
    75b6:	5a 96       	adiw	r26, 0x1a	; 26
		{
			for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
			{
				if (!game.enemies[i].shot[j].active)
    75b8:	8c 91       	ld	r24, X
    75ba:	81 11       	cpse	r24, r1
    75bc:	0b c0       	rjmp	.+22     	; 0x75d4 <spawn_enemy+0x32>
    75be:	ab 01       	movw	r20, r22
    75c0:	bf 01       	movw	r22, r30
				{
					init_enemy_spider(i, x, y);
    75c2:	89 2f       	mov	r24, r25
    75c4:	0e 94 7f 39 	call	0x72fe	; 0x72fe <init_enemy_spider>
					game.active_enemies++;
    75c8:	80 91 a9 0d 	lds	r24, 0x0DA9
    75cc:	8f 5f       	subi	r24, 0xFF	; 255
    75ce:	80 93 a9 0d 	sts	0x0DA9, r24
					return;
    75d2:	08 95       	ret
	}
}

void spawn_enemy(u16 x, u16 y)
{
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    75d4:	9f 5f       	subi	r25, 0xFF	; 255
    75d6:	2e 5b       	subi	r18, 0xBE	; 190
    75d8:	3f 4f       	sbci	r19, 0xFF	; 255
    75da:	95 30       	cpi	r25, 0x05	; 5
    75dc:	31 f7       	brne	.-52     	; 0x75aa <spawn_enemy+0x8>
    75de:	08 95       	ret

000075e0 <solid_tile>:
	}
}

char solid_tile(u8 level_tile)
{
	switch (level_tile)
    75e0:	81 50       	subi	r24, 0x01	; 1
    75e2:	84 30       	cpi	r24, 0x04	; 4
    75e4:	10 f0       	brcs	.+4      	; 0x75ea <solid_tile+0xa>
		case L_ICE_MIDDLE : return 1;
		case L_ICE_LEFT : return 1;
		case L_ICE_RIGHT : return 1;
		case L_ICE_BOTTOM : return 1;
	}
	return 0;
    75e6:	80 e0       	ldi	r24, 0x00	; 0
    75e8:	08 95       	ret

char solid_tile(u8 level_tile)
{
	switch (level_tile)
	{
		case L_ICE_MIDDLE : return 1;
    75ea:	81 e0       	ldi	r24, 0x01	; 1
		case L_ICE_LEFT : return 1;
		case L_ICE_RIGHT : return 1;
		case L_ICE_BOTTOM : return 1;
	}
	return 0;
}
    75ec:	08 95       	ret

000075ee <append_tile_column>:

void append_tile_column()
{
    75ee:	ef 92       	push	r14
    75f0:	ff 92       	push	r15
    75f2:	0f 93       	push	r16
    75f4:	1f 93       	push	r17
    75f6:	cf 93       	push	r28
    75f8:	df 93       	push	r29
	u8 enemy_spawned = 0;
	u8 level_tile;

	game.column_count++;
    75fa:	80 91 9d 0d 	lds	r24, 0x0D9D
    75fe:	90 91 9e 0d 	lds	r25, 0x0D9E
    7602:	01 96       	adiw	r24, 0x01	; 1
    7604:	90 93 9e 0d 	sts	0x0D9E, r25
    7608:	80 93 9d 0d 	sts	0x0D9D, r24
    760c:	c0 e0       	ldi	r28, 0x00	; 0
    760e:	d0 e0       	ldi	r29, 0x00	; 0
	return 0;
}

void append_tile_column()
{
	u8 enemy_spawned = 0;
    7610:	f1 2c       	mov	r15, r1

	game.column_count++;
    for (u8 y = 0; y <= CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
    7612:	0e e1       	ldi	r16, 0x1E	; 30
    7614:	10 e0       	ldi	r17, 0x00	; 0
	u8 level_tile;

	game.column_count++;
    for (u8 y = 0; y <= CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
    7616:	40 91 97 0d 	lds	r20, 0x0D97
    761a:	50 91 98 0d 	lds	r21, 0x0D98
    761e:	63 e0       	ldi	r22, 0x03	; 3
    7620:	56 95       	lsr	r21
    7622:	47 95       	ror	r20
    7624:	6a 95       	dec	r22
    7626:	e1 f7       	brne	.-8      	; 0x7620 <append_tile_column+0x32>
    7628:	4c 0f       	add	r20, r28
    762a:	5d 1f       	adc	r21, r29
    762c:	60 91 91 0d 	lds	r22, 0x0D91
    7630:	70 91 92 0d 	lds	r23, 0x0D92
    7634:	80 91 88 0f 	lds	r24, 0x0F88
    7638:	90 91 89 0f 	lds	r25, 0x0F89
    763c:	0e 94 70 3a 	call	0x74e0	; 0x74e0 <get_level_tile>
    7640:	e8 2e       	mov	r14, r24
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    7642:	28 2f       	mov	r18, r24
    7644:	30 e0       	ldi	r19, 0x00	; 0

	game.column_count++;
    for (u8 y = 0; y <= CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
    7646:	90 91 9d 0c 	lds	r25, 0x0C9D
    764a:	96 95       	lsr	r25
    764c:	96 95       	lsr	r25
    764e:	96 95       	lsr	r25
    7650:	ae 01       	movw	r20, r28
    7652:	49 0f       	add	r20, r25
    7654:	51 1d       	adc	r21, r1
    7656:	ca 01       	movw	r24, r20
    7658:	b8 01       	movw	r22, r16
    765a:	0e 94 f3 4b 	call	0x97e6	; 0x97e6 <__divmodhi4>
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    765e:	a9 01       	movw	r20, r18
    7660:	68 2f       	mov	r22, r24
    7662:	80 91 a7 0d 	lds	r24, 0x0DA7
    7666:	0e 94 f1 27 	call	0x4fe2	; 0x4fe2 <SetTile>
	game.column_count++;
    for (u8 y = 0; y <= CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
		if (game.column_count % game.spawn_rate == game.spawn_rate - 1 && game.active_enemies < MAX_ENEMIES && !enemy_spawned && solid_tile(level_tile))
    766a:	20 91 aa 0d 	lds	r18, 0x0DAA
    766e:	30 e0       	ldi	r19, 0x00	; 0
    7670:	80 91 9d 0d 	lds	r24, 0x0D9D
    7674:	90 91 9e 0d 	lds	r25, 0x0D9E
    7678:	b9 01       	movw	r22, r18
    767a:	0e 94 df 4b 	call	0x97be	; 0x97be <__udivmodhi4>
    767e:	21 50       	subi	r18, 0x01	; 1
    7680:	31 09       	sbc	r19, r1
    7682:	82 17       	cp	r24, r18
    7684:	93 07       	cpc	r25, r19
    7686:	49 f5       	brne	.+82     	; 0x76da <append_tile_column+0xec>
    7688:	80 91 a9 0d 	lds	r24, 0x0DA9
    768c:	85 30       	cpi	r24, 0x05	; 5
    768e:	28 f5       	brcc	.+74     	; 0x76da <append_tile_column+0xec>
    7690:	f1 10       	cpse	r15, r1
    7692:	21 c0       	rjmp	.+66     	; 0x76d6 <append_tile_column+0xe8>
    7694:	8e 2d       	mov	r24, r14
    7696:	0e 94 f0 3a 	call	0x75e0	; 0x75e0 <solid_tile>
    769a:	88 23       	and	r24, r24
    769c:	f1 f0       	breq	.+60     	; 0x76da <append_tile_column+0xec>
		{
			spawn_enemy(game.camera_x+(CAMERA_WIDTH+1)*8, (game.camera_y / 8 + y - 1)*8);
    769e:	60 91 97 0d 	lds	r22, 0x0D97
    76a2:	70 91 98 0d 	lds	r23, 0x0D98
    76a6:	cb 01       	movw	r24, r22
    76a8:	23 e0       	ldi	r18, 0x03	; 3
    76aa:	96 95       	lsr	r25
    76ac:	87 95       	ror	r24
    76ae:	2a 95       	dec	r18
    76b0:	e1 f7       	brne	.-8      	; 0x76aa <append_tile_column+0xbc>
    76b2:	bc 01       	movw	r22, r24
    76b4:	61 50       	subi	r22, 0x01	; 1
    76b6:	70 4e       	sbci	r23, 0xE0	; 224
    76b8:	6c 0f       	add	r22, r28
    76ba:	7d 1f       	adc	r23, r29
    76bc:	33 e0       	ldi	r19, 0x03	; 3
    76be:	66 0f       	add	r22, r22
    76c0:	77 1f       	adc	r23, r23
    76c2:	3a 95       	dec	r19
    76c4:	e1 f7       	brne	.-8      	; 0x76be <append_tile_column+0xd0>
    76c6:	80 91 95 0d 	lds	r24, 0x0D95
    76ca:	90 91 96 0d 	lds	r25, 0x0D96
    76ce:	88 51       	subi	r24, 0x18	; 24
    76d0:	9f 4f       	sbci	r25, 0xFF	; 255
    76d2:	0e 94 d1 3a 	call	0x75a2	; 0x75a2 <spawn_enemy>
    76d6:	ff 24       	eor	r15, r15
    76d8:	f3 94       	inc	r15
    76da:	21 96       	adiw	r28, 0x01	; 1
{
	u8 enemy_spawned = 0;
	u8 level_tile;

	game.column_count++;
    for (u8 y = 0; y <= CAMERA_HEIGHT; y++)
    76dc:	cb 31       	cpi	r28, 0x1B	; 27
    76de:	d1 05       	cpc	r29, r1
    76e0:	09 f0       	breq	.+2      	; 0x76e4 <append_tile_column+0xf6>
    76e2:	99 cf       	rjmp	.-206    	; 0x7616 <append_tile_column+0x28>
			spawn_enemy(game.camera_x+(CAMERA_WIDTH+1)*8, (game.camera_y / 8 + y - 1)*8);
			enemy_spawned = 1;
		}
    }
	
    game.scroll_src_x++;
    76e4:	80 91 91 0d 	lds	r24, 0x0D91
    76e8:	90 91 92 0d 	lds	r25, 0x0D92
    76ec:	01 96       	adiw	r24, 0x01	; 1
    76ee:	90 93 92 0d 	sts	0x0D92, r25
    76f2:	80 93 91 0d 	sts	0x0D91, r24
	game.scroll_dest_x++;
    76f6:	80 91 a7 0d 	lds	r24, 0x0DA7
    76fa:	8f 5f       	subi	r24, 0xFF	; 255
    if(game.scroll_dest_x>=32)game.scroll_dest_x=0;
    76fc:	80 32       	cpi	r24, 0x20	; 32
    76fe:	18 f4       	brcc	.+6      	; 0x7706 <append_tile_column+0x118>
			enemy_spawned = 1;
		}
    }
	
    game.scroll_src_x++;
	game.scroll_dest_x++;
    7700:	80 93 a7 0d 	sts	0x0DA7, r24
    7704:	02 c0       	rjmp	.+4      	; 0x770a <append_tile_column+0x11c>
    if(game.scroll_dest_x>=32)game.scroll_dest_x=0;
    7706:	10 92 a7 0d 	sts	0x0DA7, r1
}
    770a:	df 91       	pop	r29
    770c:	cf 91       	pop	r28
    770e:	1f 91       	pop	r17
    7710:	0f 91       	pop	r16
    7712:	ff 90       	pop	r15
    7714:	ef 90       	pop	r14
    7716:	08 95       	ret

00007718 <append_tile_row>:

void append_tile_row()
{
    7718:	cf 93       	push	r28
    771a:	df 93       	push	r29
    771c:	c0 e0       	ldi	r28, 0x00	; 0
    771e:	d0 e0       	ldi	r29, 0x00	; 0
	u8 level_tile;

    for (u8 x = 0; x <= CAMERA_WIDTH; x++)
	{
		level_tile = get_level_tile(game.current_level, x + game.camera_x / 8, game.scroll_src_y);
    7720:	40 91 93 0d 	lds	r20, 0x0D93
    7724:	50 91 94 0d 	lds	r21, 0x0D94
    7728:	60 91 95 0d 	lds	r22, 0x0D95
    772c:	70 91 96 0d 	lds	r23, 0x0D96
    7730:	83 e0       	ldi	r24, 0x03	; 3
    7732:	76 95       	lsr	r23
    7734:	67 95       	ror	r22
    7736:	8a 95       	dec	r24
    7738:	e1 f7       	brne	.-8      	; 0x7732 <append_tile_row+0x1a>
    773a:	6c 0f       	add	r22, r28
    773c:	7d 1f       	adc	r23, r29
    773e:	80 91 88 0f 	lds	r24, 0x0F88
    7742:	90 91 89 0f 	lds	r25, 0x0F89
    7746:	0e 94 70 3a 	call	0x74e0	; 0x74e0 <get_level_tile>
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    774a:	48 2f       	mov	r20, r24
    774c:	50 e0       	ldi	r21, 0x00	; 0
	u8 level_tile;

    for (u8 x = 0; x <= CAMERA_WIDTH; x++)
	{
		level_tile = get_level_tile(game.current_level, x + game.camera_x / 8, game.scroll_src_y);
		render_level_tile(level_tile, (x + Screen.scrollX / 8) % 32, game.scroll_dest_y);
    774e:	80 91 9c 0c 	lds	r24, 0x0C9C
    7752:	86 95       	lsr	r24
    7754:	86 95       	lsr	r24
    7756:	86 95       	lsr	r24
    7758:	8c 0f       	add	r24, r28
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    775a:	60 91 a8 0d 	lds	r22, 0x0DA8
    775e:	8f 71       	andi	r24, 0x1F	; 31
    7760:	0e 94 f1 27 	call	0x4fe2	; 0x4fe2 <SetTile>
    7764:	21 96       	adiw	r28, 0x01	; 1

void append_tile_row()
{
	u8 level_tile;

    for (u8 x = 0; x <= CAMERA_WIDTH; x++)
    7766:	cd 31       	cpi	r28, 0x1D	; 29
    7768:	d1 05       	cpc	r29, r1
    776a:	d1 f6       	brne	.-76     	; 0x7720 <append_tile_row+0x8>
	{
		level_tile = get_level_tile(game.current_level, x + game.camera_x / 8, game.scroll_src_y);
		render_level_tile(level_tile, (x + Screen.scrollX / 8) % 32, game.scroll_dest_y);
    }
	
    game.scroll_src_y++;
    776c:	80 91 93 0d 	lds	r24, 0x0D93
    7770:	90 91 94 0d 	lds	r25, 0x0D94
    7774:	01 96       	adiw	r24, 0x01	; 1
    7776:	90 93 94 0d 	sts	0x0D94, r25
    777a:	80 93 93 0d 	sts	0x0D93, r24
	game.scroll_dest_y++;
    777e:	80 91 a8 0d 	lds	r24, 0x0DA8
    7782:	8f 5f       	subi	r24, 0xFF	; 255
    if(game.scroll_dest_y>=30)game.scroll_dest_y=0;
    7784:	8e 31       	cpi	r24, 0x1E	; 30
    7786:	18 f4       	brcc	.+6      	; 0x778e <append_tile_row+0x76>
		level_tile = get_level_tile(game.current_level, x + game.camera_x / 8, game.scroll_src_y);
		render_level_tile(level_tile, (x + Screen.scrollX / 8) % 32, game.scroll_dest_y);
    }
	
    game.scroll_src_y++;
	game.scroll_dest_y++;
    7788:	80 93 a8 0d 	sts	0x0DA8, r24
    778c:	02 c0       	rjmp	.+4      	; 0x7792 <append_tile_row+0x7a>
    if(game.scroll_dest_y>=30)game.scroll_dest_y=0;
    778e:	10 92 a8 0d 	sts	0x0DA8, r1
}
    7792:	df 91       	pop	r29
    7794:	cf 91       	pop	r28
    7796:	08 95       	ret

00007798 <move_camera_x>:

void move_camera_x()
{	
	game.camera_x++;
    7798:	80 91 95 0d 	lds	r24, 0x0D95
    779c:	90 91 96 0d 	lds	r25, 0x0D96
    77a0:	01 96       	adiw	r24, 0x01	; 1
    77a2:	90 93 96 0d 	sts	0x0D96, r25
    77a6:	80 93 95 0d 	sts	0x0D95, r24
	Scroll(1,0);
    77aa:	60 e0       	ldi	r22, 0x00	; 0
    77ac:	81 e0       	ldi	r24, 0x01	; 1
    77ae:	0e 94 a8 35 	call	0x6b50	; 0x6b50 <Scroll>
	if (++game.scroll_x == 8)
    77b2:	80 91 a5 0d 	lds	r24, 0x0DA5
    77b6:	8f 5f       	subi	r24, 0xFF	; 255
    77b8:	88 30       	cpi	r24, 0x08	; 8
    77ba:	19 f0       	breq	.+6      	; 0x77c2 <move_camera_x+0x2a>
    77bc:	80 93 a5 0d 	sts	0x0DA5, r24
    77c0:	08 95       	ret
	{
		game.scroll_x = 0;
    77c2:	10 92 a5 0d 	sts	0x0DA5, r1
		append_tile_column();
    77c6:	0c 94 f7 3a 	jmp	0x75ee	; 0x75ee <append_tile_column>

000077ca <move_camera_y>:
	}
}

void move_camera_y()
{	
	game.camera_y+=2;
    77ca:	80 91 97 0d 	lds	r24, 0x0D97
    77ce:	90 91 98 0d 	lds	r25, 0x0D98
    77d2:	02 96       	adiw	r24, 0x02	; 2
    77d4:	90 93 98 0d 	sts	0x0D98, r25
    77d8:	80 93 97 0d 	sts	0x0D97, r24
	game.scroll_y+=2;
    77dc:	80 91 a6 0d 	lds	r24, 0x0DA6
    77e0:	8e 5f       	subi	r24, 0xFE	; 254
    77e2:	80 93 a6 0d 	sts	0x0DA6, r24
	Scroll(0,2);
    77e6:	62 e0       	ldi	r22, 0x02	; 2
    77e8:	80 e0       	ldi	r24, 0x00	; 0
    77ea:	0e 94 a8 35 	call	0x6b50	; 0x6b50 <Scroll>
	if (game.scroll_y == 8)
    77ee:	80 91 a6 0d 	lds	r24, 0x0DA6
    77f2:	88 30       	cpi	r24, 0x08	; 8
    77f4:	21 f4       	brne	.+8      	; 0x77fe <move_camera_y+0x34>
	{
		game.scroll_y = 0;
    77f6:	10 92 a6 0d 	sts	0x0DA6, r1
		append_tile_row();
    77fa:	0c 94 8c 3b 	jmp	0x7718	; 0x7718 <append_tile_row>
    77fe:	08 95       	ret

00007800 <load_level>:
	}
}

void load_level(u8 index)
{	
    7800:	cf 93       	push	r28
    7802:	c8 2f       	mov	r28, r24
	Screen.scrollX = 0;
    7804:	e9 e9       	ldi	r30, 0x99	; 153
    7806:	fc e0       	ldi	r31, 0x0C	; 12
    7808:	13 82       	std	Z+3, r1	; 0x03
	Screen.scrollY = 0;
    780a:	14 82       	std	Z+4, r1	; 0x04
	Screen.scrollHeight = 30;
    780c:	8e e1       	ldi	r24, 0x1E	; 30
    780e:	85 83       	std	Z+5, r24	; 0x05
	Screen.overlayTileTable = tiles_data;
    7810:	85 e3       	ldi	r24, 0x35	; 53
    7812:	91 e3       	ldi	r25, 0x31	; 49
    7814:	92 83       	std	Z+2, r25	; 0x02
    7816:	81 83       	std	Z+1, r24	; 0x01
	Screen.overlayHeight = 2;
    7818:	82 e0       	ldi	r24, 0x02	; 2
    781a:	80 83       	st	Z, r24
	clear_overlay(2);
    781c:	0e 94 38 3a 	call	0x7470	; 0x7470 <clear_overlay>
	game.current_level = (char*) map_level_0;
    7820:	e1 e9       	ldi	r30, 0x91	; 145
    7822:	fd e0       	ldi	r31, 0x0D	; 13
    7824:	85 eb       	ldi	r24, 0xB5	; 181
    7826:	9a e2       	ldi	r25, 0x2A	; 42
    7828:	90 93 89 0f 	sts	0x0F89, r25
    782c:	80 93 88 0f 	sts	0x0F88, r24
	game.current_level_index = index;
    7830:	c0 8b       	std	Z+16, r28	; 0x10
	switch (index)
	{
		case 0: game.current_level = (char*) map_level_0; break;
	}
	game.column_count = 0;
    7832:	15 86       	std	Z+13, r1	; 0x0d
    7834:	14 86       	std	Z+12, r1	; 0x0c
	game.camera_x = get_camera_x(index);
    7836:	15 82       	std	Z+5, r1	; 0x05
    7838:	14 82       	std	Z+4, r1	; 0x04
	game.camera_y = get_camera_y(index);
    783a:	17 82       	std	Z+7, r1	; 0x07
    783c:	16 82       	std	Z+6, r1	; 0x06
	game.player.shared.x = get_hero_spawn_x(index)*8;
    783e:	80 e0       	ldi	r24, 0x00	; 0
    7840:	90 e0       	ldi	r25, 0x00	; 0
    7842:	a0 ec       	ldi	r26, 0xC0	; 192
    7844:	b1 e4       	ldi	r27, 0x41	; 65
    7846:	86 8f       	std	Z+30, r24	; 0x1e
    7848:	97 8f       	std	Z+31, r25	; 0x1f
    784a:	a0 a3       	std	Z+32, r26	; 0x20
    784c:	b1 a3       	std	Z+33, r27	; 0x21
	game.player.shared.y = get_hero_spawn_y(index)*8;
    784e:	80 e0       	ldi	r24, 0x00	; 0
    7850:	90 e0       	ldi	r25, 0x00	; 0
    7852:	a8 e2       	ldi	r26, 0x28	; 40
    7854:	b3 e4       	ldi	r27, 0x43	; 67
    7856:	82 a3       	std	Z+34, r24	; 0x22
    7858:	93 a3       	std	Z+35, r25	; 0x23
    785a:	a4 a3       	std	Z+36, r26	; 0x24
    785c:	b5 a3       	std	Z+37, r27	; 0x25
	game.camera_x *= 8;
	game.camera_y *= 8;
	game.scroll_src_x = game.camera_x / 8 + CAMERA_WIDTH + 1;
    785e:	8d e1       	ldi	r24, 0x1D	; 29
    7860:	90 e0       	ldi	r25, 0x00	; 0
    7862:	91 83       	std	Z+1, r25	; 0x01
    7864:	80 83       	st	Z, r24
    game.scroll_dest_x = game.camera_x / 8 + CAMERA_WIDTH + 1;
    7866:	86 8b       	std	Z+22, r24	; 0x16
	game.scroll_src_y = game.camera_y / 8 + CAMERA_HEIGHT + 1;
    7868:	8b e1       	ldi	r24, 0x1B	; 27
    786a:	90 e0       	ldi	r25, 0x00	; 0
    786c:	93 83       	std	Z+3, r25	; 0x03
    786e:	82 83       	std	Z+2, r24	; 0x02
    game.scroll_dest_y =  game.camera_y / 8 + CAMERA_HEIGHT + 1;
    7870:	87 8b       	std	Z+23, r24	; 0x17
	game.scroll_x = 0;
    7872:	14 8a       	std	Z+20, r1	; 0x14
	game.scroll_y = 0;
    7874:	15 8a       	std	Z+21, r1	; 0x15
	game.spawn_rate = BASE_SPAWN_RATE;
    7876:	8a e0       	ldi	r24, 0x0A	; 10
    7878:	81 8f       	std	Z+25, r24	; 0x19
	render_camera_view();
    787a:	0e 94 7c 3a 	call	0x74f8	; 0x74f8 <render_camera_view>
	LBPrint(0, VRAM_TILES_V-1, (char*) strLives);
    787e:	44 e7       	ldi	r20, 0x74	; 116
    7880:	59 e0       	ldi	r21, 0x09	; 9
    7882:	6f e1       	ldi	r22, 0x1F	; 31
    7884:	80 e0       	ldi	r24, 0x00	; 0
    7886:	0e 94 57 37 	call	0x6eae	; 0x6eae <LBPrint>
	LBPrint(17, VRAM_TILES_V-1, (char*) strScore);
    788a:	43 e8       	ldi	r20, 0x83	; 131
    788c:	59 e0       	ldi	r21, 0x09	; 9
    788e:	6f e1       	ldi	r22, 0x1F	; 31
    7890:	81 e1       	ldi	r24, 0x11	; 17
    7892:	0e 94 57 37 	call	0x6eae	; 0x6eae <LBPrint>
	LBPrint(0, VRAM_TILES_V-2, (char*) strShield);
    7896:	4b e7       	ldi	r20, 0x7B	; 123
    7898:	59 e0       	ldi	r21, 0x09	; 9
    789a:	6e e1       	ldi	r22, 0x1E	; 30
    789c:	80 e0       	ldi	r24, 0x00	; 0
    789e:	0e 94 57 37 	call	0x6eae	; 0x6eae <LBPrint>
	LBPrint(18, VRAM_TILES_V-2, (char*) strTime);
    78a2:	4e e6       	ldi	r20, 0x6E	; 110
    78a4:	59 e0       	ldi	r21, 0x09	; 9
    78a6:	6e e1       	ldi	r22, 0x1E	; 30
    78a8:	82 e1       	ldi	r24, 0x12	; 18
}
    78aa:	cf 91       	pop	r28
	game.spawn_rate = BASE_SPAWN_RATE;
	render_camera_view();
	LBPrint(0, VRAM_TILES_V-1, (char*) strLives);
	LBPrint(17, VRAM_TILES_V-1, (char*) strScore);
	LBPrint(0, VRAM_TILES_V-2, (char*) strShield);
	LBPrint(18, VRAM_TILES_V-2, (char*) strTime);
    78ac:	0c 94 57 37 	jmp	0x6eae	; 0x6eae <LBPrint>

000078b0 <on_solid_ground>:
	FadeIn(FRAMES_PER_FADE, false);
	load_level(index);
}

char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
    78b0:	2f 92       	push	r2
    78b2:	3f 92       	push	r3
    78b4:	4f 92       	push	r4
    78b6:	5f 92       	push	r5
    78b8:	6f 92       	push	r6
    78ba:	7f 92       	push	r7
    78bc:	8f 92       	push	r8
    78be:	9f 92       	push	r9
    78c0:	af 92       	push	r10
    78c2:	bf 92       	push	r11
    78c4:	cf 92       	push	r12
    78c6:	df 92       	push	r13
    78c8:	ef 92       	push	r14
    78ca:	ff 92       	push	r15
    78cc:	0f 93       	push	r16
    78ce:	1f 93       	push	r17
    78d0:	cf 93       	push	r28
    78d2:	df 93       	push	r29
    78d4:	00 d0       	rcall	.+0      	; 0x78d6 <on_solid_ground+0x26>
    78d6:	00 d0       	rcall	.+0      	; 0x78d8 <on_solid_ground+0x28>
    78d8:	00 d0       	rcall	.+0      	; 0x78da <on_solid_ground+0x2a>
    78da:	cd b7       	in	r28, 0x3d	; 61
    78dc:	de b7       	in	r29, 0x3e	; 62
    78de:	9e 83       	std	Y+6, r25	; 0x06
    78e0:	8d 83       	std	Y+5, r24	; 0x05
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
    78e2:	88 e0       	ldi	r24, 0x08	; 8
    78e4:	48 9f       	mul	r20, r24
    78e6:	a0 01       	movw	r20, r0
    78e8:	11 24       	eor	r1, r1
    78ea:	26 2e       	mov	r2, r22
    78ec:	31 2c       	mov	r3, r1
char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
    78ee:	00 e0       	ldi	r16, 0x00	; 0
    78f0:	10 e0       	ldi	r17, 0x00	; 0
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
    78f2:	ca 01       	movw	r24, r20
    78f4:	aa 27       	eor	r26, r26
    78f6:	97 fd       	sbrc	r25, 7
    78f8:	a0 95       	com	r26
    78fa:	ba 2f       	mov	r27, r26
    78fc:	89 83       	std	Y+1, r24	; 0x01
    78fe:	9a 83       	std	Y+2, r25	; 0x02
    7900:	ab 83       	std	Y+3, r26	; 0x03
    7902:	bc 83       	std	Y+4, r27	; 0x04
char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
    7904:	02 15       	cp	r16, r2
    7906:	13 05       	cpc	r17, r3
    7908:	09 f4       	brne	.+2      	; 0x790c <on_solid_ground+0x5c>
    790a:	85 c0       	rjmp	.+266    	; 0x7a16 <on_solid_ground+0x166>
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
    790c:	69 81       	ldd	r22, Y+1	; 0x01
    790e:	7a 81       	ldd	r23, Y+2	; 0x02
    7910:	8b 81       	ldd	r24, Y+3	; 0x03
    7912:	9c 81       	ldd	r25, Y+4	; 0x04
    7914:	0e 94 9e 4c 	call	0x993c	; 0x993c <__floatsisf>
    7918:	4b 01       	movw	r8, r22
    791a:	5c 01       	movw	r10, r24
    791c:	b8 01       	movw	r22, r16
    791e:	88 27       	eor	r24, r24
    7920:	77 fd       	sbrc	r23, 7
    7922:	80 95       	com	r24
    7924:	98 2f       	mov	r25, r24
    7926:	0e 94 9e 4c 	call	0x993c	; 0x993c <__floatsisf>
    792a:	6b 01       	movw	r12, r22
    792c:	7c 01       	movw	r14, r24
    792e:	ad 81       	ldd	r26, Y+5	; 0x05
    7930:	be 81       	ldd	r27, Y+6	; 0x06
    7932:	18 96       	adiw	r26, 0x08	; 8
    7934:	2d 91       	ld	r18, X+
    7936:	3d 91       	ld	r19, X+
    7938:	4d 91       	ld	r20, X+
    793a:	5c 91       	ld	r21, X
    793c:	1b 97       	sbiw	r26, 0x0b	; 11
    793e:	c5 01       	movw	r24, r10
    7940:	b4 01       	movw	r22, r8
    7942:	0e 94 08 4c 	call	0x9810	; 0x9810 <__addsf3>
    7946:	20 e0       	ldi	r18, 0x00	; 0
    7948:	30 e0       	ldi	r19, 0x00	; 0
    794a:	40 e0       	ldi	r20, 0x00	; 0
    794c:	5e e3       	ldi	r21, 0x3E	; 62
    794e:	0e 94 52 4d 	call	0x9aa4	; 0x9aa4 <__mulsf3>
    7952:	0e 94 70 4c 	call	0x98e0	; 0x98e0 <__fixunssfsi>
    7956:	2b 01       	movw	r4, r22
    7958:	3c 01       	movw	r6, r24
    795a:	20 e0       	ldi	r18, 0x00	; 0
    795c:	30 e0       	ldi	r19, 0x00	; 0
    795e:	40 e0       	ldi	r20, 0x00	; 0
    7960:	5e e3       	ldi	r21, 0x3E	; 62
    7962:	ed 81       	ldd	r30, Y+5	; 0x05
    7964:	fe 81       	ldd	r31, Y+6	; 0x06
    7966:	64 81       	ldd	r22, Z+4	; 0x04
    7968:	75 81       	ldd	r23, Z+5	; 0x05
    796a:	86 81       	ldd	r24, Z+6	; 0x06
    796c:	97 81       	ldd	r25, Z+7	; 0x07
    796e:	0e 94 52 4d 	call	0x9aa4	; 0x9aa4 <__mulsf3>
    7972:	a7 01       	movw	r20, r14
    7974:	96 01       	movw	r18, r12
    7976:	0e 94 08 4c 	call	0x9810	; 0x9810 <__addsf3>
    797a:	0e 94 70 4c 	call	0x98e0	; 0x98e0 <__fixunssfsi>
    797e:	a2 01       	movw	r20, r4
    7980:	80 91 88 0f 	lds	r24, 0x0F88
    7984:	90 91 89 0f 	lds	r25, 0x0F89
    7988:	0e 94 70 3a 	call	0x74e0	; 0x74e0 <get_level_tile>
    798c:	78 2e       	mov	r7, r24
		lt2 = get_level_tile(game.current_level, (s->x+7) / 8 + x, (s->y + tile_height*8) / 8);
    798e:	ad 81       	ldd	r26, Y+5	; 0x05
    7990:	be 81       	ldd	r27, Y+6	; 0x06
    7992:	18 96       	adiw	r26, 0x08	; 8
    7994:	2d 91       	ld	r18, X+
    7996:	3d 91       	ld	r19, X+
    7998:	4d 91       	ld	r20, X+
    799a:	5c 91       	ld	r21, X
    799c:	1b 97       	sbiw	r26, 0x0b	; 11
    799e:	c5 01       	movw	r24, r10
    79a0:	b4 01       	movw	r22, r8
    79a2:	0e 94 08 4c 	call	0x9810	; 0x9810 <__addsf3>
    79a6:	20 e0       	ldi	r18, 0x00	; 0
    79a8:	30 e0       	ldi	r19, 0x00	; 0
    79aa:	40 e0       	ldi	r20, 0x00	; 0
    79ac:	5e e3       	ldi	r21, 0x3E	; 62
    79ae:	0e 94 52 4d 	call	0x9aa4	; 0x9aa4 <__mulsf3>
    79b2:	0e 94 70 4c 	call	0x98e0	; 0x98e0 <__fixunssfsi>
    79b6:	4b 01       	movw	r8, r22
    79b8:	5c 01       	movw	r10, r24
    79ba:	20 e0       	ldi	r18, 0x00	; 0
    79bc:	30 e0       	ldi	r19, 0x00	; 0
    79be:	40 ee       	ldi	r20, 0xE0	; 224
    79c0:	50 e4       	ldi	r21, 0x40	; 64
    79c2:	ed 81       	ldd	r30, Y+5	; 0x05
    79c4:	fe 81       	ldd	r31, Y+6	; 0x06
    79c6:	64 81       	ldd	r22, Z+4	; 0x04
    79c8:	75 81       	ldd	r23, Z+5	; 0x05
    79ca:	86 81       	ldd	r24, Z+6	; 0x06
    79cc:	97 81       	ldd	r25, Z+7	; 0x07
    79ce:	0e 94 08 4c 	call	0x9810	; 0x9810 <__addsf3>
    79d2:	20 e0       	ldi	r18, 0x00	; 0
    79d4:	30 e0       	ldi	r19, 0x00	; 0
    79d6:	40 e0       	ldi	r20, 0x00	; 0
    79d8:	5e e3       	ldi	r21, 0x3E	; 62
    79da:	0e 94 52 4d 	call	0x9aa4	; 0x9aa4 <__mulsf3>
    79de:	a7 01       	movw	r20, r14
    79e0:	96 01       	movw	r18, r12
    79e2:	0e 94 08 4c 	call	0x9810	; 0x9810 <__addsf3>
    79e6:	0e 94 70 4c 	call	0x98e0	; 0x98e0 <__fixunssfsi>
    79ea:	a4 01       	movw	r20, r8
    79ec:	80 91 88 0f 	lds	r24, 0x0F88
    79f0:	90 91 89 0f 	lds	r25, 0x0F89
    79f4:	0e 94 70 3a 	call	0x74e0	; 0x74e0 <get_level_tile>
    79f8:	f8 2e       	mov	r15, r24
		if (solid_tile(lt1) || solid_tile(lt2))
    79fa:	87 2d       	mov	r24, r7
    79fc:	0e 94 f0 3a 	call	0x75e0	; 0x75e0 <solid_tile>
    7a00:	81 11       	cpse	r24, r1
    7a02:	0b c0       	rjmp	.+22     	; 0x7a1a <on_solid_ground+0x16a>
    7a04:	8f 2d       	mov	r24, r15
    7a06:	0e 94 f0 3a 	call	0x75e0	; 0x75e0 <solid_tile>
    7a0a:	0f 5f       	subi	r16, 0xFF	; 255
    7a0c:	1f 4f       	sbci	r17, 0xFF	; 255
    7a0e:	88 23       	and	r24, r24
    7a10:	09 f4       	brne	.+2      	; 0x7a14 <on_solid_ground+0x164>
    7a12:	78 cf       	rjmp	.-272    	; 0x7904 <on_solid_ground+0x54>
    7a14:	02 c0       	rjmp	.+4      	; 0x7a1a <on_solid_ground+0x16a>
		{
			return 1;
		}
	}
	return 0;
    7a16:	80 e0       	ldi	r24, 0x00	; 0
    7a18:	01 c0       	rjmp	.+2      	; 0x7a1c <on_solid_ground+0x16c>
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
		lt2 = get_level_tile(game.current_level, (s->x+7) / 8 + x, (s->y + tile_height*8) / 8);
		if (solid_tile(lt1) || solid_tile(lt2))
		{
			return 1;
    7a1a:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return 0;
}
    7a1c:	26 96       	adiw	r28, 0x06	; 6
    7a1e:	0f b6       	in	r0, 0x3f	; 63
    7a20:	f8 94       	cli
    7a22:	de bf       	out	0x3e, r29	; 62
    7a24:	0f be       	out	0x3f, r0	; 63
    7a26:	cd bf       	out	0x3d, r28	; 61
    7a28:	df 91       	pop	r29
    7a2a:	cf 91       	pop	r28
    7a2c:	1f 91       	pop	r17
    7a2e:	0f 91       	pop	r16
    7a30:	ff 90       	pop	r15
    7a32:	ef 90       	pop	r14
    7a34:	df 90       	pop	r13
    7a36:	cf 90       	pop	r12
    7a38:	bf 90       	pop	r11
    7a3a:	af 90       	pop	r10
    7a3c:	9f 90       	pop	r9
    7a3e:	8f 90       	pop	r8
    7a40:	7f 90       	pop	r7
    7a42:	6f 90       	pop	r6
    7a44:	5f 90       	pop	r5
    7a46:	4f 90       	pop	r4
    7a48:	3f 90       	pop	r3
    7a4a:	2f 90       	pop	r2
    7a4c:	08 95       	ret

00007a4e <find_shot_slot>:

u8 find_shot_slot()
{
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
	{
		if (!game.player.shot[i].active) return i;
    7a4e:	80 91 d2 0d 	lds	r24, 0x0DD2
    7a52:	88 23       	and	r24, r24
    7a54:	61 f0       	breq	.+24     	; 0x7a6e <find_shot_slot+0x20>
    7a56:	80 91 ec 0d 	lds	r24, 0x0DEC
    7a5a:	88 23       	and	r24, r24
    7a5c:	31 f0       	breq	.+12     	; 0x7a6a <find_shot_slot+0x1c>
    7a5e:	80 91 06 0e 	lds	r24, 0x0E06
    7a62:	81 11       	cpse	r24, r1
    7a64:	04 c0       	rjmp	.+8      	; 0x7a6e <find_shot_slot+0x20>
	return 0;
}

u8 find_shot_slot()
{
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
    7a66:	82 e0       	ldi	r24, 0x02	; 2
    7a68:	08 95       	ret
    7a6a:	81 e0       	ldi	r24, 0x01	; 1
	{
		if (!game.player.shot[i].active) return i;
    7a6c:	08 95       	ret
	}
	return 0;
    7a6e:	80 e0       	ldi	r24, 0x00	; 0
}
    7a70:	08 95       	ret

00007a72 <update_shot>:

void update_shot()
{
    7a72:	ef 92       	push	r14
    7a74:	ff 92       	push	r15
    7a76:	0f 93       	push	r16
    7a78:	1f 93       	push	r17
    7a7a:	cf 93       	push	r28
    7a7c:	df 93       	push	r29
	// Shot updates
	u8 idx;
	if (game.joypadState.pressed & BTN_A && game.player.active_shots < MAX_PLAYER_SHOTS)
    7a7e:	80 91 81 0f 	lds	r24, 0x0F81
    7a82:	90 91 82 0f 	lds	r25, 0x0F82
    7a86:	90 ff       	sbrs	r25, 0
    7a88:	97 c0       	rjmp	.+302    	; 0x7bb8 <update_shot+0x146>
    7a8a:	80 91 ba 0d 	lds	r24, 0x0DBA
    7a8e:	83 30       	cpi	r24, 0x03	; 3
    7a90:	08 f0       	brcs	.+2      	; 0x7a94 <update_shot+0x22>
    7a92:	92 c0       	rjmp	.+292    	; 0x7bb8 <update_shot+0x146>
	{
		SFX_PLAYER_SHOOT;
    7a94:	2f ef       	ldi	r18, 0xFF	; 255
    7a96:	43 e2       	ldi	r20, 0x23	; 35
    7a98:	63 e0       	ldi	r22, 0x03	; 3
    7a9a:	82 e0       	ldi	r24, 0x02	; 2
    7a9c:	0e 94 a8 2b 	call	0x5750	; 0x5750 <TriggerNote>
		idx = find_shot_slot();
    7aa0:	0e 94 27 3d 	call	0x7a4e	; 0x7a4e <find_shot_slot>
    7aa4:	d8 2f       	mov	r29, r24
		LBMapSprite(PLAYER_SHOT_SLOT+idx, LBGetNextFrame(&game.player.shot[idx].anim), 0);
    7aa6:	08 2f       	mov	r16, r24
    7aa8:	10 e0       	ldi	r17, 0x00	; 0
    7aaa:	8a e1       	ldi	r24, 0x1A	; 26
    7aac:	d8 9f       	mul	r29, r24
    7aae:	70 01       	movw	r14, r0
    7ab0:	11 24       	eor	r1, r1
    7ab2:	c7 01       	movw	r24, r14
    7ab4:	8d 52       	subi	r24, 0x2D	; 45
    7ab6:	92 4f       	sbci	r25, 0xF2	; 242
    7ab8:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <LBGetNextFrame>
    7abc:	40 e0       	ldi	r20, 0x00	; 0
    7abe:	bc 01       	movw	r22, r24
    7ac0:	8b e0       	ldi	r24, 0x0B	; 11
    7ac2:	8d 0f       	add	r24, r29
    7ac4:	0e 94 f8 37 	call	0x6ff0	; 0x6ff0 <LBMapSprite>
		game.player.shot[idx].active = 1;
    7ac8:	e7 01       	movw	r28, r14
    7aca:	cf 56       	subi	r28, 0x6F	; 111
    7acc:	d2 4f       	sbci	r29, 0xF2	; 242
    7ace:	fe 01       	movw	r30, r28
    7ad0:	ef 5b       	subi	r30, 0xBF	; 191
    7ad2:	ff 4f       	sbci	r31, 0xFF	; 255
    7ad4:	81 e0       	ldi	r24, 0x01	; 1
    7ad6:	80 83       	st	Z, r24
		game.player.shot[idx].shared.y = (u16) game.player.shared.y / 8 * 8;
    7ad8:	60 91 b3 0d 	lds	r22, 0x0DB3
    7adc:	70 91 b4 0d 	lds	r23, 0x0DB4
    7ae0:	80 91 b5 0d 	lds	r24, 0x0DB5
    7ae4:	90 91 b6 0d 	lds	r25, 0x0DB6
    7ae8:	0e 94 70 4c 	call	0x98e0	; 0x98e0 <__fixunssfsi>
    7aec:	83 e0       	ldi	r24, 0x03	; 3
    7aee:	76 95       	lsr	r23
    7af0:	67 95       	ror	r22
    7af2:	8a 95       	dec	r24
    7af4:	e1 f7       	brne	.-8      	; 0x7aee <update_shot+0x7c>
    7af6:	93 e0       	ldi	r25, 0x03	; 3
    7af8:	66 0f       	add	r22, r22
    7afa:	77 1f       	adc	r23, r23
    7afc:	9a 95       	dec	r25
    7afe:	e1 f7       	brne	.-8      	; 0x7af8 <update_shot+0x86>
    7b00:	80 e0       	ldi	r24, 0x00	; 0
    7b02:	90 e0       	ldi	r25, 0x00	; 0
    7b04:	0e 94 9c 4c 	call	0x9938	; 0x9938 <__floatunsisf>
    7b08:	68 af       	std	Y+56, r22	; 0x38
    7b0a:	79 af       	std	Y+57, r23	; 0x39
    7b0c:	8a af       	std	Y+58, r24	; 0x3a
    7b0e:	9b af       	std	Y+59, r25	; 0x3b
		if (!(game.player.flags & PRONE))
    7b10:	20 91 bb 0d 	lds	r18, 0x0DBB
    7b14:	22 fd       	sbrc	r18, 2
    7b16:	0a c0       	rjmp	.+20     	; 0x7b2c <update_shot+0xba>
		{
			game.player.shot[idx].shared.y += 8;
    7b18:	20 e0       	ldi	r18, 0x00	; 0
    7b1a:	30 e0       	ldi	r19, 0x00	; 0
    7b1c:	40 e0       	ldi	r20, 0x00	; 0
    7b1e:	51 e4       	ldi	r21, 0x41	; 65
    7b20:	0e 94 08 4c 	call	0x9810	; 0x9810 <__addsf3>
    7b24:	68 af       	std	Y+56, r22	; 0x38
    7b26:	79 af       	std	Y+57, r23	; 0x39
    7b28:	8a af       	std	Y+58, r24	; 0x3a
    7b2a:	9b af       	std	Y+59, r25	; 0x3b
		}
		if (game.player.direction == D_RIGHT)
    7b2c:	80 91 bd 0d 	lds	r24, 0x0DBD
    7b30:	81 30       	cpi	r24, 0x01	; 1
    7b32:	f9 f4       	brne	.+62     	; 0x7b72 <update_shot+0x100>
		{
			game.player.shot[idx].shared.x = game.player.shared.x+2*8;
    7b34:	8a e1       	ldi	r24, 0x1A	; 26
    7b36:	80 9f       	mul	r24, r16
    7b38:	e0 01       	movw	r28, r0
    7b3a:	81 9f       	mul	r24, r17
    7b3c:	d0 0d       	add	r29, r0
    7b3e:	11 24       	eor	r1, r1
    7b40:	cf 56       	subi	r28, 0x6F	; 111
    7b42:	d2 4f       	sbci	r29, 0xF2	; 242
    7b44:	20 e0       	ldi	r18, 0x00	; 0
    7b46:	30 e0       	ldi	r19, 0x00	; 0
    7b48:	40 e8       	ldi	r20, 0x80	; 128
    7b4a:	51 e4       	ldi	r21, 0x41	; 65
    7b4c:	60 91 af 0d 	lds	r22, 0x0DAF
    7b50:	70 91 b0 0d 	lds	r23, 0x0DB0
    7b54:	80 91 b1 0d 	lds	r24, 0x0DB1
    7b58:	90 91 b2 0d 	lds	r25, 0x0DB2
    7b5c:	0e 94 08 4c 	call	0x9810	; 0x9810 <__addsf3>
    7b60:	6c ab       	std	Y+52, r22	; 0x34
    7b62:	7d ab       	std	Y+53, r23	; 0x35
    7b64:	8e ab       	std	Y+54, r24	; 0x36
    7b66:	9f ab       	std	Y+55, r25	; 0x37
			game.player.shot[idx].shared.vx = SHOT_SPEED;
    7b68:	80 e9       	ldi	r24, 0x90	; 144
    7b6a:	91 e0       	ldi	r25, 0x01	; 1
    7b6c:	9d af       	std	Y+61, r25	; 0x3d
    7b6e:	8c af       	std	Y+60, r24	; 0x3c
    7b70:	1e c0       	rjmp	.+60     	; 0x7bae <update_shot+0x13c>
		}
		else
		{
			game.player.shot[idx].shared.vx = -SHOT_SPEED;
    7b72:	8a e1       	ldi	r24, 0x1A	; 26
    7b74:	80 9f       	mul	r24, r16
    7b76:	e0 01       	movw	r28, r0
    7b78:	81 9f       	mul	r24, r17
    7b7a:	d0 0d       	add	r29, r0
    7b7c:	11 24       	eor	r1, r1
    7b7e:	cf 56       	subi	r28, 0x6F	; 111
    7b80:	d2 4f       	sbci	r29, 0xF2	; 242
    7b82:	80 e7       	ldi	r24, 0x70	; 112
    7b84:	9e ef       	ldi	r25, 0xFE	; 254
    7b86:	9d af       	std	Y+61, r25	; 0x3d
    7b88:	8c af       	std	Y+60, r24	; 0x3c
			game.player.shot[idx].shared.x = game.player.shared.x-1*8;
    7b8a:	20 e0       	ldi	r18, 0x00	; 0
    7b8c:	30 e0       	ldi	r19, 0x00	; 0
    7b8e:	40 e0       	ldi	r20, 0x00	; 0
    7b90:	51 e4       	ldi	r21, 0x41	; 65
    7b92:	60 91 af 0d 	lds	r22, 0x0DAF
    7b96:	70 91 b0 0d 	lds	r23, 0x0DB0
    7b9a:	80 91 b1 0d 	lds	r24, 0x0DB1
    7b9e:	90 91 b2 0d 	lds	r25, 0x0DB2
    7ba2:	0e 94 07 4c 	call	0x980e	; 0x980e <__subsf3>
    7ba6:	6c ab       	std	Y+52, r22	; 0x34
    7ba8:	7d ab       	std	Y+53, r23	; 0x35
    7baa:	8e ab       	std	Y+54, r24	; 0x36
    7bac:	9f ab       	std	Y+55, r25	; 0x37
		}
		game.player.active_shots++;
    7bae:	80 91 ba 0d 	lds	r24, 0x0DBA
    7bb2:	8f 5f       	subi	r24, 0xFF	; 255
    7bb4:	80 93 ba 0d 	sts	0x0DBA, r24
	}
}
    7bb8:	df 91       	pop	r29
    7bba:	cf 91       	pop	r28
    7bbc:	1f 91       	pop	r17
    7bbe:	0f 91       	pop	r16
    7bc0:	ff 90       	pop	r15
    7bc2:	ef 90       	pop	r14
    7bc4:	08 95       	ret

00007bc6 <pixel_overlap>:
		}
	}
}

u8 pixel_overlap(u16 s1, u16 s2, u8 w1, u8 w2)
{
    7bc6:	fc 01       	movw	r30, r24
	u8 result = w1;
	
	if (s2 > s1)
    7bc8:	86 17       	cp	r24, r22
    7bca:	97 07       	cpc	r25, r23
    7bcc:	28 f4       	brcc	.+10     	; 0x7bd8 <pixel_overlap+0x12>
    7bce:	94 2f       	mov	r25, r20
    7bd0:	9e 0f       	add	r25, r30
	{
		result -= s2 - s1;
    7bd2:	89 2f       	mov	r24, r25
    7bd4:	86 1b       	sub	r24, r22
    7bd6:	01 c0       	rjmp	.+2      	; 0x7bda <pixel_overlap+0x14>
	}
}

u8 pixel_overlap(u16 s1, u16 s2, u8 w1, u8 w2)
{
	u8 result = w1;
    7bd8:	84 2f       	mov	r24, r20
	
	if (s2 > s1)
	{
		result -= s2 - s1;
	}
	s1 = s1 + w1;
    7bda:	e4 0f       	add	r30, r20
    7bdc:	f1 1d       	adc	r31, r1
	s2 = s2 + w2;
    7bde:	62 0f       	add	r22, r18
    7be0:	71 1d       	adc	r23, r1
	if (s2 < s1)
    7be2:	6e 17       	cp	r22, r30
    7be4:	7f 07       	cpc	r23, r31
    7be6:	10 f4       	brcc	.+4      	; 0x7bec <pixel_overlap+0x26>
	{
		result -= s1 - s2;
    7be8:	6e 1b       	sub	r22, r30
    7bea:	86 0f       	add	r24, r22
	}
	return result;
}
    7bec:	08 95       	ret

00007bee <collision_detect_level>:

u8 collision_detect_level(SpriteShared* s, u8 tile_width, u8 tile_height)
{
    7bee:	2f 92       	push	r2
    7bf0:	3f 92       	push	r3
    7bf2:	4f 92       	push	r4
    7bf4:	5f 92       	push	r5
    7bf6:	6f 92       	push	r6
    7bf8:	7f 92       	push	r7
    7bfa:	8f 92       	push	r8
    7bfc:	9f 92       	push	r9
    7bfe:	af 92       	push	r10
    7c00:	bf 92       	push	r11
    7c02:	cf 92       	push	r12
    7c04:	df 92       	push	r13
    7c06:	ef 92       	push	r14
    7c08:	ff 92       	push	r15
    7c0a:	0f 93       	push	r16
    7c0c:	1f 93       	push	r17
    7c0e:	cf 93       	push	r28
    7c10:	df 93       	push	r29
    7c12:	cd b7       	in	r28, 0x3d	; 61
    7c14:	de b7       	in	r29, 0x3e	; 62
    7c16:	68 97       	sbiw	r28, 0x18	; 24
    7c18:	0f b6       	in	r0, 0x3f	; 63
    7c1a:	f8 94       	cli
    7c1c:	de bf       	out	0x3e, r29	; 62
    7c1e:	0f be       	out	0x3f, r0	; 63
    7c20:	cd bf       	out	0x3d, r28	; 61
    7c22:	98 8f       	std	Y+24, r25	; 0x18
    7c24:	8f 8b       	std	Y+23, r24	; 0x17
    7c26:	16 2f       	mov	r17, r22
    7c28:	49 8b       	std	Y+17, r20	; 0x11
	u16 x0_tile = s->x / 8;
    7c2a:	dc 01       	movw	r26, r24
    7c2c:	14 96       	adiw	r26, 0x04	; 4
    7c2e:	4d 90       	ld	r4, X+
    7c30:	5d 90       	ld	r5, X+
    7c32:	6d 90       	ld	r6, X+
    7c34:	7c 90       	ld	r7, X
    7c36:	17 97       	sbiw	r26, 0x07	; 7
    7c38:	20 e0       	ldi	r18, 0x00	; 0
    7c3a:	30 e0       	ldi	r19, 0x00	; 0
    7c3c:	40 e0       	ldi	r20, 0x00	; 0
    7c3e:	5e e3       	ldi	r21, 0x3E	; 62
    7c40:	c3 01       	movw	r24, r6
    7c42:	b2 01       	movw	r22, r4
    7c44:	0e 94 52 4d 	call	0x9aa4	; 0x9aa4 <__mulsf3>
    7c48:	0e 94 70 4c 	call	0x98e0	; 0x98e0 <__fixunssfsi>
    7c4c:	4b 01       	movw	r8, r22
    7c4e:	5c 01       	movw	r10, r24
    7c50:	68 87       	std	Y+8, r22	; 0x08
    7c52:	9a 8a       	std	Y+18, r9	; 0x12
	u16 y0_tile = s->y / 8;
    7c54:	ef 89       	ldd	r30, Y+23	; 0x17
    7c56:	f8 8d       	ldd	r31, Y+24	; 0x18
    7c58:	c0 84       	ldd	r12, Z+8	; 0x08
    7c5a:	d1 84       	ldd	r13, Z+9	; 0x09
    7c5c:	e2 84       	ldd	r14, Z+10	; 0x0a
    7c5e:	f3 84       	ldd	r15, Z+11	; 0x0b
	u16 y1_tile = (s->y+7) / 8;
	u8 lt1, lt2;
	u8 result = 0;
	
	// Only if moving
	if (s->vx == 0 && s->vy == 0) return result;
    7c60:	84 85       	ldd	r24, Z+12	; 0x0c
    7c62:	95 85       	ldd	r25, Z+13	; 0x0d
    7c64:	89 2b       	or	r24, r25
    7c66:	61 f4       	brne	.+24     	; 0x7c80 <collision_detect_level+0x92>
    7c68:	20 e0       	ldi	r18, 0x00	; 0
    7c6a:	30 e0       	ldi	r19, 0x00	; 0
    7c6c:	a9 01       	movw	r20, r18
    7c6e:	60 81       	ld	r22, Z
    7c70:	71 81       	ldd	r23, Z+1	; 0x01
    7c72:	82 81       	ldd	r24, Z+2	; 0x02
    7c74:	93 81       	ldd	r25, Z+3	; 0x03
    7c76:	0e 94 6c 4c 	call	0x98d8	; 0x98d8 <__cmpsf2>
    7c7a:	88 23       	and	r24, r24
    7c7c:	09 f4       	brne	.+2      	; 0x7c80 <collision_detect_level+0x92>
    7c7e:	d2 c2       	rjmp	.+1444   	; 0x8224 <collision_detect_level+0x636>
	
	// Top and Bottom
	if (s->vy != 0)
    7c80:	20 e0       	ldi	r18, 0x00	; 0
    7c82:	30 e0       	ldi	r19, 0x00	; 0
    7c84:	a9 01       	movw	r20, r18
    7c86:	af 89       	ldd	r26, Y+23	; 0x17
    7c88:	b8 8d       	ldd	r27, Y+24	; 0x18
    7c8a:	6d 91       	ld	r22, X+
    7c8c:	7d 91       	ld	r23, X+
    7c8e:	8d 91       	ld	r24, X+
    7c90:	9c 91       	ld	r25, X
    7c92:	0e 94 6c 4c 	call	0x98d8	; 0x98d8 <__cmpsf2>
    7c96:	88 23       	and	r24, r24
    7c98:	09 f4       	brne	.+2      	; 0x7c9c <collision_detect_level+0xae>
    7c9a:	67 c1       	rjmp	.+718    	; 0x7f6a <collision_detect_level+0x37c>
}

u8 collision_detect_level(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u16 x0_tile = s->x / 8;
	u16 y0_tile = s->y / 8;
    7c9c:	20 e0       	ldi	r18, 0x00	; 0
    7c9e:	30 e0       	ldi	r19, 0x00	; 0
    7ca0:	40 e0       	ldi	r20, 0x00	; 0
    7ca2:	5e e3       	ldi	r21, 0x3E	; 62
    7ca4:	c7 01       	movw	r24, r14
    7ca6:	b6 01       	movw	r22, r12
    7ca8:	0e 94 52 4d 	call	0x9aa4	; 0x9aa4 <__mulsf3>
    7cac:	0e 94 70 4c 	call	0x98e0	; 0x98e0 <__fixunssfsi>
    7cb0:	6b 01       	movw	r12, r22
    7cb2:	7c 01       	movw	r14, r24
    7cb4:	1b 01       	movw	r2, r22
	u16 x1_tile = (s->x+7) / 8;
    7cb6:	20 e0       	ldi	r18, 0x00	; 0
    7cb8:	30 e0       	ldi	r19, 0x00	; 0
    7cba:	40 ee       	ldi	r20, 0xE0	; 224
    7cbc:	50 e4       	ldi	r21, 0x40	; 64
    7cbe:	c3 01       	movw	r24, r6
    7cc0:	b2 01       	movw	r22, r4
    7cc2:	0e 94 08 4c 	call	0x9810	; 0x9810 <__addsf3>
    7cc6:	20 e0       	ldi	r18, 0x00	; 0
    7cc8:	30 e0       	ldi	r19, 0x00	; 0
    7cca:	40 e0       	ldi	r20, 0x00	; 0
    7ccc:	5e e3       	ldi	r21, 0x3E	; 62
    7cce:	0e 94 52 4d 	call	0x9aa4	; 0x9aa4 <__mulsf3>
    7cd2:	0e 94 70 4c 	call	0x98e0	; 0x98e0 <__fixunssfsi>
		{
			if (s->vy < 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, y0_tile);
				lt2 = get_level_tile(game.current_level, x1_tile + x, y0_tile);
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    7cd6:	f4 01       	movw	r30, r8
    7cd8:	53 e0       	ldi	r21, 0x03	; 3
    7cda:	ee 0f       	add	r30, r30
    7cdc:	ff 1f       	adc	r31, r31
    7cde:	5a 95       	dec	r21
    7ce0:	e1 f7       	brne	.-8      	; 0x7cda <collision_detect_level+0xec>
    7ce2:	fb 83       	std	Y+3, r31	; 0x03
    7ce4:	ea 83       	std	Y+2, r30	; 0x02
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    7ce6:	9b 01       	movw	r18, r22
    7ce8:	e3 e0       	ldi	r30, 0x03	; 3
    7cea:	22 0f       	add	r18, r18
    7cec:	33 1f       	adc	r19, r19
    7cee:	ea 95       	dec	r30
    7cf0:	e1 f7       	brne	.-8      	; 0x7cea <collision_detect_level+0xfc>
    7cf2:	3d 83       	std	Y+5, r19	; 0x05
    7cf4:	2c 83       	std	Y+4, r18	; 0x04
				{
					s->vy =  0;
					s->y = (y0_tile + 1) * 8;
    7cf6:	3f ef       	ldi	r19, 0xFF	; 255
    7cf8:	c3 1a       	sub	r12, r19
    7cfa:	d3 0a       	sbc	r13, r19
    7cfc:	f3 e0       	ldi	r31, 0x03	; 3
    7cfe:	cc 0c       	add	r12, r12
    7d00:	dd 1c       	adc	r13, r13
    7d02:	fa 95       	dec	r31
    7d04:	e1 f7       	brne	.-8      	; 0x7cfe <collision_detect_level+0x110>
					result = 1;
				}
			}
			if (s->vy > 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, (s->y + tile_height*8 - 1) / 8);
    7d06:	b9 89       	ldd	r27, Y+17	; 0x11
    7d08:	a8 e0       	ldi	r26, 0x08	; 8
    7d0a:	ba 9f       	mul	r27, r26
    7d0c:	a0 01       	movw	r20, r0
    7d0e:	11 24       	eor	r1, r1
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) || 
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vy =  0;
					s->gravity = 0;
					s->y = y0_tile * 8;
    7d10:	96 01       	movw	r18, r12
    7d12:	28 50       	subi	r18, 0x08	; 8
    7d14:	31 09       	sbc	r19, r1
    7d16:	2b 01       	movw	r4, r22
    7d18:	34 01       	movw	r6, r8
    7d1a:	19 82       	std	Y+1, r1	; 0x01
				lt2 = get_level_tile(game.current_level, x1_tile + x, y0_tile);
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vy =  0;
					s->y = (y0_tile + 1) * 8;
    7d1c:	b6 01       	movw	r22, r12
    7d1e:	80 e0       	ldi	r24, 0x00	; 0
    7d20:	90 e0       	ldi	r25, 0x00	; 0
    7d22:	69 87       	std	Y+9, r22	; 0x09
    7d24:	7a 87       	std	Y+10, r23	; 0x0a
    7d26:	8b 87       	std	Y+11, r24	; 0x0b
    7d28:	9c 87       	std	Y+12, r25	; 0x0c
					result = 1;
				}
			}
			if (s->vy > 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, (s->y + tile_height*8 - 1) / 8);
    7d2a:	66 27       	eor	r22, r22
    7d2c:	57 fd       	sbrc	r21, 7
    7d2e:	60 95       	com	r22
    7d30:	76 2f       	mov	r23, r22
    7d32:	4d 87       	std	Y+13, r20	; 0x0d
    7d34:	5e 87       	std	Y+14, r21	; 0x0e
    7d36:	6f 87       	std	Y+15, r22	; 0x0f
    7d38:	78 8b       	std	Y+16, r23	; 0x10
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) || 
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vy =  0;
					s->gravity = 0;
					s->y = y0_tile * 8;
    7d3a:	b9 01       	movw	r22, r18
    7d3c:	80 e0       	ldi	r24, 0x00	; 0
    7d3e:	90 e0       	ldi	r25, 0x00	; 0
    7d40:	6b 8b       	std	Y+19, r22	; 0x13
    7d42:	7c 8b       	std	Y+20, r23	; 0x14
    7d44:	8d 8b       	std	Y+21, r24	; 0x15
    7d46:	9e 8b       	std	Y+22, r25	; 0x16
    7d48:	86 2d       	mov	r24, r6
    7d4a:	48 85       	ldd	r20, Y+8	; 0x08
    7d4c:	84 1b       	sub	r24, r20
	if (s->vx == 0 && s->vy == 0) return result;
	
	// Top and Bottom
	if (s->vy != 0)
	{
		for (u8 x = 0; x < tile_width; x++)
    7d4e:	81 17       	cp	r24, r17
    7d50:	08 f0       	brcs	.+2      	; 0x7d54 <collision_detect_level+0x166>
    7d52:	0c c1       	rjmp	.+536    	; 0x7f6c <collision_detect_level+0x37e>
		{
			if (s->vy < 0)
    7d54:	20 e0       	ldi	r18, 0x00	; 0
    7d56:	30 e0       	ldi	r19, 0x00	; 0
    7d58:	a9 01       	movw	r20, r18
    7d5a:	af 89       	ldd	r26, Y+23	; 0x17
    7d5c:	b8 8d       	ldd	r27, Y+24	; 0x18
    7d5e:	6d 91       	ld	r22, X+
    7d60:	7d 91       	ld	r23, X+
    7d62:	8d 91       	ld	r24, X+
    7d64:	9c 91       	ld	r25, X
    7d66:	0e 94 6c 4c 	call	0x98d8	; 0x98d8 <__cmpsf2>
    7d6a:	87 ff       	sbrs	r24, 7
    7d6c:	58 c0       	rjmp	.+176    	; 0x7e1e <collision_detect_level+0x230>
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, y0_tile);
    7d6e:	a1 01       	movw	r20, r2
    7d70:	b3 01       	movw	r22, r6
    7d72:	80 91 88 0f 	lds	r24, 0x0F88
    7d76:	90 91 89 0f 	lds	r25, 0x0F89
    7d7a:	0e 94 70 3a 	call	0x74e0	; 0x74e0 <get_level_tile>
    7d7e:	f8 2e       	mov	r15, r24
				lt2 = get_level_tile(game.current_level, x1_tile + x, y0_tile);
    7d80:	a1 01       	movw	r20, r2
    7d82:	b2 01       	movw	r22, r4
    7d84:	80 91 88 0f 	lds	r24, 0x0F88
    7d88:	90 91 89 0f 	lds	r25, 0x0F89
    7d8c:	0e 94 70 3a 	call	0x74e0	; 0x74e0 <get_level_tile>
    7d90:	08 2f       	mov	r16, r24
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    7d92:	8f 2d       	mov	r24, r15
    7d94:	0e 94 f0 3a 	call	0x75e0	; 0x75e0 <solid_tile>
    7d98:	88 23       	and	r24, r24
    7d9a:	91 f0       	breq	.+36     	; 0x7dc0 <collision_detect_level+0x1d2>
    7d9c:	ef 89       	ldd	r30, Y+23	; 0x17
    7d9e:	f8 8d       	ldd	r31, Y+24	; 0x18
    7da0:	64 81       	ldd	r22, Z+4	; 0x04
    7da2:	75 81       	ldd	r23, Z+5	; 0x05
    7da4:	86 81       	ldd	r24, Z+6	; 0x06
    7da6:	97 81       	ldd	r25, Z+7	; 0x07
    7da8:	0e 94 70 4c 	call	0x98e0	; 0x98e0 <__fixunssfsi>
    7dac:	dc 01       	movw	r26, r24
    7dae:	cb 01       	movw	r24, r22
    7db0:	28 e0       	ldi	r18, 0x08	; 8
    7db2:	48 e0       	ldi	r20, 0x08	; 8
    7db4:	6a 81       	ldd	r22, Y+2	; 0x02
    7db6:	7b 81       	ldd	r23, Y+3	; 0x03
    7db8:	0e 94 e3 3d 	call	0x7bc6	; 0x7bc6 <pixel_overlap>
    7dbc:	84 30       	cpi	r24, 0x04	; 4
    7dbe:	c8 f4       	brcc	.+50     	; 0x7df2 <collision_detect_level+0x204>
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    7dc0:	80 2f       	mov	r24, r16
    7dc2:	0e 94 f0 3a 	call	0x75e0	; 0x75e0 <solid_tile>
		{
			if (s->vy < 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, y0_tile);
				lt2 = get_level_tile(game.current_level, x1_tile + x, y0_tile);
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    7dc6:	88 23       	and	r24, r24
    7dc8:	51 f1       	breq	.+84     	; 0x7e1e <collision_detect_level+0x230>
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    7dca:	af 89       	ldd	r26, Y+23	; 0x17
    7dcc:	b8 8d       	ldd	r27, Y+24	; 0x18
    7dce:	14 96       	adiw	r26, 0x04	; 4
    7dd0:	6d 91       	ld	r22, X+
    7dd2:	7d 91       	ld	r23, X+
    7dd4:	8d 91       	ld	r24, X+
    7dd6:	9c 91       	ld	r25, X
    7dd8:	17 97       	sbiw	r26, 0x07	; 7
    7dda:	0e 94 70 4c 	call	0x98e0	; 0x98e0 <__fixunssfsi>
    7dde:	dc 01       	movw	r26, r24
    7de0:	cb 01       	movw	r24, r22
    7de2:	28 e0       	ldi	r18, 0x08	; 8
    7de4:	48 e0       	ldi	r20, 0x08	; 8
    7de6:	6c 81       	ldd	r22, Y+4	; 0x04
    7de8:	7d 81       	ldd	r23, Y+5	; 0x05
    7dea:	0e 94 e3 3d 	call	0x7bc6	; 0x7bc6 <pixel_overlap>
    7dee:	84 30       	cpi	r24, 0x04	; 4
    7df0:	b0 f0       	brcs	.+44     	; 0x7e1e <collision_detect_level+0x230>
				{
					s->vy =  0;
    7df2:	ef 89       	ldd	r30, Y+23	; 0x17
    7df4:	f8 8d       	ldd	r31, Y+24	; 0x18
    7df6:	10 82       	st	Z, r1
    7df8:	11 82       	std	Z+1, r1	; 0x01
    7dfa:	12 82       	std	Z+2, r1	; 0x02
    7dfc:	13 82       	std	Z+3, r1	; 0x03
					s->y = (y0_tile + 1) * 8;
    7dfe:	69 85       	ldd	r22, Y+9	; 0x09
    7e00:	7a 85       	ldd	r23, Y+10	; 0x0a
    7e02:	8b 85       	ldd	r24, Y+11	; 0x0b
    7e04:	9c 85       	ldd	r25, Y+12	; 0x0c
    7e06:	0e 94 9c 4c 	call	0x9938	; 0x9938 <__floatunsisf>
    7e0a:	af 89       	ldd	r26, Y+23	; 0x17
    7e0c:	b8 8d       	ldd	r27, Y+24	; 0x18
    7e0e:	18 96       	adiw	r26, 0x08	; 8
    7e10:	6d 93       	st	X+, r22
    7e12:	7d 93       	st	X+, r23
    7e14:	8d 93       	st	X+, r24
    7e16:	9c 93       	st	X, r25
    7e18:	1b 97       	sbiw	r26, 0x0b	; 11
					result = 1;
    7e1a:	b1 e0       	ldi	r27, 0x01	; 1
    7e1c:	b9 83       	std	Y+1, r27	; 0x01
				}
			}
			if (s->vy > 0)
    7e1e:	20 e0       	ldi	r18, 0x00	; 0
    7e20:	30 e0       	ldi	r19, 0x00	; 0
    7e22:	a9 01       	movw	r20, r18
    7e24:	ef 89       	ldd	r30, Y+23	; 0x17
    7e26:	f8 8d       	ldd	r31, Y+24	; 0x18
    7e28:	60 81       	ld	r22, Z
    7e2a:	71 81       	ldd	r23, Z+1	; 0x01
    7e2c:	82 81       	ldd	r24, Z+2	; 0x02
    7e2e:	93 81       	ldd	r25, Z+3	; 0x03
    7e30:	0e 94 4e 4d 	call	0x9a9c	; 0x9a9c <__gesf2>
    7e34:	18 16       	cp	r1, r24
    7e36:	0c f0       	brlt	.+2      	; 0x7e3a <collision_detect_level+0x24c>
    7e38:	91 c0       	rjmp	.+290    	; 0x7f5c <collision_detect_level+0x36e>
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, (s->y + tile_height*8 - 1) / 8);
    7e3a:	6d 85       	ldd	r22, Y+13	; 0x0d
    7e3c:	7e 85       	ldd	r23, Y+14	; 0x0e
    7e3e:	8f 85       	ldd	r24, Y+15	; 0x0f
    7e40:	98 89       	ldd	r25, Y+16	; 0x10
    7e42:	0e 94 9e 4c 	call	0x993c	; 0x993c <__floatsisf>
    7e46:	6b 01       	movw	r12, r22
    7e48:	7c 01       	movw	r14, r24
    7e4a:	af 89       	ldd	r26, Y+23	; 0x17
    7e4c:	b8 8d       	ldd	r27, Y+24	; 0x18
    7e4e:	18 96       	adiw	r26, 0x08	; 8
    7e50:	2d 91       	ld	r18, X+
    7e52:	3d 91       	ld	r19, X+
    7e54:	4d 91       	ld	r20, X+
    7e56:	5c 91       	ld	r21, X
    7e58:	1b 97       	sbiw	r26, 0x0b	; 11
    7e5a:	0e 94 08 4c 	call	0x9810	; 0x9810 <__addsf3>
    7e5e:	20 e0       	ldi	r18, 0x00	; 0
    7e60:	30 e0       	ldi	r19, 0x00	; 0
    7e62:	40 e8       	ldi	r20, 0x80	; 128
    7e64:	5f e3       	ldi	r21, 0x3F	; 63
    7e66:	0e 94 07 4c 	call	0x980e	; 0x980e <__subsf3>
    7e6a:	20 e0       	ldi	r18, 0x00	; 0
    7e6c:	30 e0       	ldi	r19, 0x00	; 0
    7e6e:	40 e0       	ldi	r20, 0x00	; 0
    7e70:	5e e3       	ldi	r21, 0x3E	; 62
    7e72:	0e 94 52 4d 	call	0x9aa4	; 0x9aa4 <__mulsf3>
    7e76:	0e 94 70 4c 	call	0x98e0	; 0x98e0 <__fixunssfsi>
    7e7a:	ab 01       	movw	r20, r22
    7e7c:	b3 01       	movw	r22, r6
    7e7e:	80 91 88 0f 	lds	r24, 0x0F88
    7e82:	90 91 89 0f 	lds	r25, 0x0F89
    7e86:	0e 94 70 3a 	call	0x74e0	; 0x74e0 <get_level_tile>
    7e8a:	08 2f       	mov	r16, r24
				lt2 = get_level_tile(game.current_level, x1_tile + x, (s->y + tile_height*8 - 1) / 8);
    7e8c:	ef 89       	ldd	r30, Y+23	; 0x17
    7e8e:	f8 8d       	ldd	r31, Y+24	; 0x18
    7e90:	20 85       	ldd	r18, Z+8	; 0x08
    7e92:	31 85       	ldd	r19, Z+9	; 0x09
    7e94:	42 85       	ldd	r20, Z+10	; 0x0a
    7e96:	53 85       	ldd	r21, Z+11	; 0x0b
    7e98:	c7 01       	movw	r24, r14
    7e9a:	b6 01       	movw	r22, r12
    7e9c:	0e 94 08 4c 	call	0x9810	; 0x9810 <__addsf3>
    7ea0:	20 e0       	ldi	r18, 0x00	; 0
    7ea2:	30 e0       	ldi	r19, 0x00	; 0
    7ea4:	40 e8       	ldi	r20, 0x80	; 128
    7ea6:	5f e3       	ldi	r21, 0x3F	; 63
    7ea8:	0e 94 07 4c 	call	0x980e	; 0x980e <__subsf3>
    7eac:	20 e0       	ldi	r18, 0x00	; 0
    7eae:	30 e0       	ldi	r19, 0x00	; 0
    7eb0:	40 e0       	ldi	r20, 0x00	; 0
    7eb2:	5e e3       	ldi	r21, 0x3E	; 62
    7eb4:	0e 94 52 4d 	call	0x9aa4	; 0x9aa4 <__mulsf3>
    7eb8:	0e 94 70 4c 	call	0x98e0	; 0x98e0 <__fixunssfsi>
    7ebc:	ab 01       	movw	r20, r22
    7ebe:	b2 01       	movw	r22, r4
    7ec0:	80 91 88 0f 	lds	r24, 0x0F88
    7ec4:	90 91 89 0f 	lds	r25, 0x0F89
    7ec8:	0e 94 70 3a 	call	0x74e0	; 0x74e0 <get_level_tile>
    7ecc:	f8 2e       	mov	r15, r24
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) || 
    7ece:	80 2f       	mov	r24, r16
    7ed0:	0e 94 f0 3a 	call	0x75e0	; 0x75e0 <solid_tile>
    7ed4:	88 23       	and	r24, r24
    7ed6:	a1 f0       	breq	.+40     	; 0x7f00 <collision_detect_level+0x312>
    7ed8:	af 89       	ldd	r26, Y+23	; 0x17
    7eda:	b8 8d       	ldd	r27, Y+24	; 0x18
    7edc:	14 96       	adiw	r26, 0x04	; 4
    7ede:	6d 91       	ld	r22, X+
    7ee0:	7d 91       	ld	r23, X+
    7ee2:	8d 91       	ld	r24, X+
    7ee4:	9c 91       	ld	r25, X
    7ee6:	17 97       	sbiw	r26, 0x07	; 7
    7ee8:	0e 94 70 4c 	call	0x98e0	; 0x98e0 <__fixunssfsi>
    7eec:	dc 01       	movw	r26, r24
    7eee:	cb 01       	movw	r24, r22
    7ef0:	28 e0       	ldi	r18, 0x08	; 8
    7ef2:	48 e0       	ldi	r20, 0x08	; 8
    7ef4:	6a 81       	ldd	r22, Y+2	; 0x02
    7ef6:	7b 81       	ldd	r23, Y+3	; 0x03
    7ef8:	0e 94 e3 3d 	call	0x7bc6	; 0x7bc6 <pixel_overlap>
    7efc:	84 30       	cpi	r24, 0x04	; 4
    7efe:	b8 f4       	brcc	.+46     	; 0x7f2e <collision_detect_level+0x340>
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    7f00:	8f 2d       	mov	r24, r15
    7f02:	0e 94 f0 3a 	call	0x75e0	; 0x75e0 <solid_tile>
			}
			if (s->vy > 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, (s->y + tile_height*8 - 1) / 8);
				lt2 = get_level_tile(game.current_level, x1_tile + x, (s->y + tile_height*8 - 1) / 8);
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) || 
    7f06:	88 23       	and	r24, r24
    7f08:	49 f1       	breq	.+82     	; 0x7f5c <collision_detect_level+0x36e>
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    7f0a:	ef 89       	ldd	r30, Y+23	; 0x17
    7f0c:	f8 8d       	ldd	r31, Y+24	; 0x18
    7f0e:	64 81       	ldd	r22, Z+4	; 0x04
    7f10:	75 81       	ldd	r23, Z+5	; 0x05
    7f12:	86 81       	ldd	r24, Z+6	; 0x06
    7f14:	97 81       	ldd	r25, Z+7	; 0x07
    7f16:	0e 94 70 4c 	call	0x98e0	; 0x98e0 <__fixunssfsi>
    7f1a:	dc 01       	movw	r26, r24
    7f1c:	cb 01       	movw	r24, r22
    7f1e:	28 e0       	ldi	r18, 0x08	; 8
    7f20:	48 e0       	ldi	r20, 0x08	; 8
    7f22:	6c 81       	ldd	r22, Y+4	; 0x04
    7f24:	7d 81       	ldd	r23, Y+5	; 0x05
    7f26:	0e 94 e3 3d 	call	0x7bc6	; 0x7bc6 <pixel_overlap>
    7f2a:	84 30       	cpi	r24, 0x04	; 4
    7f2c:	b8 f0       	brcs	.+46     	; 0x7f5c <collision_detect_level+0x36e>
				{
					s->vy =  0;
    7f2e:	af 89       	ldd	r26, Y+23	; 0x17
    7f30:	b8 8d       	ldd	r27, Y+24	; 0x18
    7f32:	1d 92       	st	X+, r1
    7f34:	1d 92       	st	X+, r1
    7f36:	1d 92       	st	X+, r1
    7f38:	1c 92       	st	X, r1
    7f3a:	13 97       	sbiw	r26, 0x03	; 3
					s->gravity = 0;
    7f3c:	1e 96       	adiw	r26, 0x0e	; 14
    7f3e:	1c 92       	st	X, r1
					s->y = y0_tile * 8;
    7f40:	6b 89       	ldd	r22, Y+19	; 0x13
    7f42:	7c 89       	ldd	r23, Y+20	; 0x14
    7f44:	8d 89       	ldd	r24, Y+21	; 0x15
    7f46:	9e 89       	ldd	r25, Y+22	; 0x16
    7f48:	0e 94 9c 4c 	call	0x9938	; 0x9938 <__floatunsisf>
    7f4c:	ef 89       	ldd	r30, Y+23	; 0x17
    7f4e:	f8 8d       	ldd	r31, Y+24	; 0x18
    7f50:	60 87       	std	Z+8, r22	; 0x08
    7f52:	71 87       	std	Z+9, r23	; 0x09
    7f54:	82 87       	std	Z+10, r24	; 0x0a
    7f56:	93 87       	std	Z+11, r25	; 0x0b
					result = 1;
    7f58:	f1 e0       	ldi	r31, 0x01	; 1
    7f5a:	f9 83       	std	Y+1, r31	; 0x01
    7f5c:	2f ef       	ldi	r18, 0xFF	; 255
    7f5e:	62 1a       	sub	r6, r18
    7f60:	72 0a       	sbc	r7, r18
    7f62:	3f ef       	ldi	r19, 0xFF	; 255
    7f64:	43 1a       	sub	r4, r19
    7f66:	53 0a       	sbc	r5, r19
    7f68:	ef ce       	rjmp	.-546    	; 0x7d48 <collision_detect_level+0x15a>
	u16 x0_tile = s->x / 8;
	u16 y0_tile = s->y / 8;
	u16 x1_tile = (s->x+7) / 8;
	u16 y1_tile = (s->y+7) / 8;
	u8 lt1, lt2;
	u8 result = 0;
    7f6a:	19 82       	std	Y+1, r1	; 0x01
			}
		}
	}
	
	// Left and Right
	if (s->vx != 0)
    7f6c:	af 89       	ldd	r26, Y+23	; 0x17
    7f6e:	b8 8d       	ldd	r27, Y+24	; 0x18
    7f70:	1c 96       	adiw	r26, 0x0c	; 12
    7f72:	8d 91       	ld	r24, X+
    7f74:	9c 91       	ld	r25, X
    7f76:	1d 97       	sbiw	r26, 0x0d	; 13
    7f78:	89 2b       	or	r24, r25
    7f7a:	09 f4       	brne	.+2      	; 0x7f7e <collision_detect_level+0x390>
    7f7c:	54 c1       	rjmp	.+680    	; 0x8226 <collision_detect_level+0x638>
	{
		y0_tile = s->y / 8;
    7f7e:	18 96       	adiw	r26, 0x08	; 8
    7f80:	cd 90       	ld	r12, X+
    7f82:	dd 90       	ld	r13, X+
    7f84:	ed 90       	ld	r14, X+
    7f86:	fc 90       	ld	r15, X
    7f88:	1b 97       	sbiw	r26, 0x0b	; 11
    7f8a:	20 e0       	ldi	r18, 0x00	; 0
    7f8c:	30 e0       	ldi	r19, 0x00	; 0
    7f8e:	40 e0       	ldi	r20, 0x00	; 0
    7f90:	5e e3       	ldi	r21, 0x3E	; 62
    7f92:	c7 01       	movw	r24, r14
    7f94:	b6 01       	movw	r22, r12
    7f96:	0e 94 52 4d 	call	0x9aa4	; 0x9aa4 <__mulsf3>
    7f9a:	0e 94 70 4c 	call	0x98e0	; 0x98e0 <__fixunssfsi>
    7f9e:	2b 01       	movw	r4, r22
    7fa0:	3c 01       	movw	r6, r24
    7fa2:	6d 87       	std	Y+13, r22	; 0x0d
		y1_tile = (s->y+7) / 8;
    7fa4:	20 e0       	ldi	r18, 0x00	; 0
    7fa6:	30 e0       	ldi	r19, 0x00	; 0
    7fa8:	40 ee       	ldi	r20, 0xE0	; 224
    7faa:	50 e4       	ldi	r21, 0x40	; 64
    7fac:	c7 01       	movw	r24, r14
    7fae:	b6 01       	movw	r22, r12
    7fb0:	0e 94 08 4c 	call	0x9810	; 0x9810 <__addsf3>
    7fb4:	20 e0       	ldi	r18, 0x00	; 0
    7fb6:	30 e0       	ldi	r19, 0x00	; 0
    7fb8:	40 e0       	ldi	r20, 0x00	; 0
    7fba:	5e e3       	ldi	r21, 0x3E	; 62
    7fbc:	0e 94 52 4d 	call	0x9aa4	; 0x9aa4 <__mulsf3>
    7fc0:	0e 94 70 4c 	call	0x98e0	; 0x98e0 <__fixunssfsi>
		{
			if (s->vx < 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile, y0_tile + y);
				lt2 = get_level_tile(game.current_level, x0_tile, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    7fc4:	12 01       	movw	r2, r4
    7fc6:	83 e0       	ldi	r24, 0x03	; 3
    7fc8:	22 0c       	add	r2, r2
    7fca:	33 1c       	adc	r3, r3
    7fcc:	8a 95       	dec	r24
    7fce:	e1 f7       	brne	.-8      	; 0x7fc8 <collision_detect_level+0x3da>
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    7fd0:	fb 01       	movw	r30, r22
    7fd2:	93 e0       	ldi	r25, 0x03	; 3
    7fd4:	ee 0f       	add	r30, r30
    7fd6:	ff 1f       	adc	r31, r31
    7fd8:	9a 95       	dec	r25
    7fda:	e1 f7       	brne	.-8      	; 0x7fd4 <collision_detect_level+0x3e6>
    7fdc:	fb 83       	std	Y+3, r31	; 0x03
    7fde:	ea 83       	std	Y+2, r30	; 0x02
				{
					s->vx =  0;
					s->x = (x0_tile + 1) * 8;
    7fe0:	ff ef       	ldi	r31, 0xFF	; 255
    7fe2:	8f 1a       	sub	r8, r31
    7fe4:	9f 0a       	sbc	r9, r31
    7fe6:	94 01       	movw	r18, r8
    7fe8:	43 e0       	ldi	r20, 0x03	; 3
    7fea:	22 0f       	add	r18, r18
    7fec:	33 1f       	adc	r19, r19
    7fee:	4a 95       	dec	r20
    7ff0:	e1 f7       	brne	.-8      	; 0x7fea <collision_detect_level+0x3fc>
				}
			}
			
			if (s->vx > 0)
			{
				lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y0_tile + y);
    7ff2:	a8 e0       	ldi	r26, 0x08	; 8
    7ff4:	1a 9f       	mul	r17, r26
    7ff6:	a0 01       	movw	r20, r0
    7ff8:	11 24       	eor	r1, r1
				lt2 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vx =  0;
					s->x = x0_tile * 8;
    7ffa:	49 01       	movw	r8, r18
    7ffc:	b8 e0       	ldi	r27, 0x08	; 8
    7ffe:	8b 1a       	sub	r8, r27
    8000:	91 08       	sbc	r9, r1
	// Left and Right
	if (s->vx != 0)
	{
		y0_tile = s->y / 8;
		y1_tile = (s->y+7) / 8;
		for (u8 y = 0; y < tile_height; y++)
    8002:	6b 01       	movw	r12, r22
    8004:	82 01       	movw	r16, r4
				lt2 = get_level_tile(game.current_level, x0_tile, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vx =  0;
					s->x = (x0_tile + 1) * 8;
    8006:	b9 01       	movw	r22, r18
    8008:	80 e0       	ldi	r24, 0x00	; 0
    800a:	90 e0       	ldi	r25, 0x00	; 0
    800c:	6c 83       	std	Y+4, r22	; 0x04
    800e:	7d 83       	std	Y+5, r23	; 0x05
    8010:	8e 83       	std	Y+6, r24	; 0x06
    8012:	9f 83       	std	Y+7, r25	; 0x07
				}
			}
			
			if (s->vx > 0)
			{
				lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y0_tile + y);
    8014:	ca 01       	movw	r24, r20
    8016:	aa 27       	eor	r26, r26
    8018:	97 fd       	sbrc	r25, 7
    801a:	a0 95       	com	r26
    801c:	ba 2f       	mov	r27, r26
    801e:	89 87       	std	Y+9, r24	; 0x09
    8020:	9a 87       	std	Y+10, r25	; 0x0a
    8022:	ab 87       	std	Y+11, r26	; 0x0b
    8024:	bc 87       	std	Y+12, r27	; 0x0c
				lt2 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vx =  0;
					s->x = x0_tile * 8;
    8026:	a1 2c       	mov	r10, r1
    8028:	b1 2c       	mov	r11, r1
    802a:	80 2f       	mov	r24, r16
    802c:	3d 85       	ldd	r19, Y+13	; 0x0d
    802e:	83 1b       	sub	r24, r19
	// Left and Right
	if (s->vx != 0)
	{
		y0_tile = s->y / 8;
		y1_tile = (s->y+7) / 8;
		for (u8 y = 0; y < tile_height; y++)
    8030:	49 89       	ldd	r20, Y+17	; 0x11
    8032:	84 17       	cp	r24, r20
    8034:	08 f0       	brcs	.+2      	; 0x8038 <collision_detect_level+0x44a>
    8036:	f7 c0       	rjmp	.+494    	; 0x8226 <collision_detect_level+0x638>
		{
			if (s->vx < 0)
    8038:	af 89       	ldd	r26, Y+23	; 0x17
    803a:	b8 8d       	ldd	r27, Y+24	; 0x18
    803c:	1c 96       	adiw	r26, 0x0c	; 12
    803e:	8d 91       	ld	r24, X+
    8040:	9c 91       	ld	r25, X
    8042:	1d 97       	sbiw	r26, 0x0d	; 13
    8044:	97 ff       	sbrs	r25, 7
    8046:	57 c0       	rjmp	.+174    	; 0x80f6 <collision_detect_level+0x508>
			{
				lt1 = get_level_tile(game.current_level, x0_tile, y0_tile + y);
    8048:	a8 01       	movw	r20, r16
    804a:	68 85       	ldd	r22, Y+8	; 0x08
    804c:	7a 89       	ldd	r23, Y+18	; 0x12
    804e:	80 91 88 0f 	lds	r24, 0x0F88
    8052:	90 91 89 0f 	lds	r25, 0x0F89
    8056:	0e 94 70 3a 	call	0x74e0	; 0x74e0 <get_level_tile>
    805a:	78 2e       	mov	r7, r24
				lt2 = get_level_tile(game.current_level, x0_tile, y1_tile + y);
    805c:	a6 01       	movw	r20, r12
    805e:	68 85       	ldd	r22, Y+8	; 0x08
    8060:	7a 89       	ldd	r23, Y+18	; 0x12
    8062:	80 91 88 0f 	lds	r24, 0x0F88
    8066:	90 91 89 0f 	lds	r25, 0x0F89
    806a:	0e 94 70 3a 	call	0x74e0	; 0x74e0 <get_level_tile>
    806e:	e8 2e       	mov	r14, r24
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    8070:	87 2d       	mov	r24, r7
    8072:	0e 94 f0 3a 	call	0x75e0	; 0x75e0 <solid_tile>
    8076:	88 23       	and	r24, r24
    8078:	89 f0       	breq	.+34     	; 0x809c <collision_detect_level+0x4ae>
    807a:	ef 89       	ldd	r30, Y+23	; 0x17
    807c:	f8 8d       	ldd	r31, Y+24	; 0x18
    807e:	60 85       	ldd	r22, Z+8	; 0x08
    8080:	71 85       	ldd	r23, Z+9	; 0x09
    8082:	82 85       	ldd	r24, Z+10	; 0x0a
    8084:	93 85       	ldd	r25, Z+11	; 0x0b
    8086:	0e 94 70 4c 	call	0x98e0	; 0x98e0 <__fixunssfsi>
    808a:	dc 01       	movw	r26, r24
    808c:	cb 01       	movw	r24, r22
    808e:	28 e0       	ldi	r18, 0x08	; 8
    8090:	48 e0       	ldi	r20, 0x08	; 8
    8092:	b1 01       	movw	r22, r2
    8094:	0e 94 e3 3d 	call	0x7bc6	; 0x7bc6 <pixel_overlap>
    8098:	84 30       	cpi	r24, 0x04	; 4
    809a:	c8 f4       	brcc	.+50     	; 0x80ce <collision_detect_level+0x4e0>
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    809c:	8e 2d       	mov	r24, r14
    809e:	0e 94 f0 3a 	call	0x75e0	; 0x75e0 <solid_tile>
		{
			if (s->vx < 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile, y0_tile + y);
				lt2 = get_level_tile(game.current_level, x0_tile, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    80a2:	88 23       	and	r24, r24
    80a4:	41 f1       	breq	.+80     	; 0x80f6 <collision_detect_level+0x508>
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    80a6:	af 89       	ldd	r26, Y+23	; 0x17
    80a8:	b8 8d       	ldd	r27, Y+24	; 0x18
    80aa:	18 96       	adiw	r26, 0x08	; 8
    80ac:	6d 91       	ld	r22, X+
    80ae:	7d 91       	ld	r23, X+
    80b0:	8d 91       	ld	r24, X+
    80b2:	9c 91       	ld	r25, X
    80b4:	1b 97       	sbiw	r26, 0x0b	; 11
    80b6:	0e 94 70 4c 	call	0x98e0	; 0x98e0 <__fixunssfsi>
    80ba:	dc 01       	movw	r26, r24
    80bc:	cb 01       	movw	r24, r22
    80be:	28 e0       	ldi	r18, 0x08	; 8
    80c0:	48 e0       	ldi	r20, 0x08	; 8
    80c2:	6a 81       	ldd	r22, Y+2	; 0x02
    80c4:	7b 81       	ldd	r23, Y+3	; 0x03
    80c6:	0e 94 e3 3d 	call	0x7bc6	; 0x7bc6 <pixel_overlap>
    80ca:	84 30       	cpi	r24, 0x04	; 4
    80cc:	a0 f0       	brcs	.+40     	; 0x80f6 <collision_detect_level+0x508>
				{
					s->vx =  0;
    80ce:	ef 89       	ldd	r30, Y+23	; 0x17
    80d0:	f8 8d       	ldd	r31, Y+24	; 0x18
    80d2:	15 86       	std	Z+13, r1	; 0x0d
    80d4:	14 86       	std	Z+12, r1	; 0x0c
					s->x = (x0_tile + 1) * 8;
    80d6:	6c 81       	ldd	r22, Y+4	; 0x04
    80d8:	7d 81       	ldd	r23, Y+5	; 0x05
    80da:	8e 81       	ldd	r24, Y+6	; 0x06
    80dc:	9f 81       	ldd	r25, Y+7	; 0x07
    80de:	0e 94 9c 4c 	call	0x9938	; 0x9938 <__floatunsisf>
    80e2:	af 89       	ldd	r26, Y+23	; 0x17
    80e4:	b8 8d       	ldd	r27, Y+24	; 0x18
    80e6:	14 96       	adiw	r26, 0x04	; 4
    80e8:	6d 93       	st	X+, r22
    80ea:	7d 93       	st	X+, r23
    80ec:	8d 93       	st	X+, r24
    80ee:	9c 93       	st	X, r25
    80f0:	17 97       	sbiw	r26, 0x07	; 7
					result = 1;
    80f2:	b1 e0       	ldi	r27, 0x01	; 1
    80f4:	b9 83       	std	Y+1, r27	; 0x01
				}
			}
			
			if (s->vx > 0)
    80f6:	ef 89       	ldd	r30, Y+23	; 0x17
    80f8:	f8 8d       	ldd	r31, Y+24	; 0x18
    80fa:	84 85       	ldd	r24, Z+12	; 0x0c
    80fc:	95 85       	ldd	r25, Z+13	; 0x0d
    80fe:	18 16       	cp	r1, r24
    8100:	19 06       	cpc	r1, r25
    8102:	0c f0       	brlt	.+2      	; 0x8106 <collision_detect_level+0x518>
    8104:	89 c0       	rjmp	.+274    	; 0x8218 <collision_detect_level+0x62a>
			{
				lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y0_tile + y);
    8106:	69 85       	ldd	r22, Y+9	; 0x09
    8108:	7a 85       	ldd	r23, Y+10	; 0x0a
    810a:	8b 85       	ldd	r24, Y+11	; 0x0b
    810c:	9c 85       	ldd	r25, Y+12	; 0x0c
    810e:	0e 94 9e 4c 	call	0x993c	; 0x993c <__floatsisf>
    8112:	2b 01       	movw	r4, r22
    8114:	3c 01       	movw	r6, r24
    8116:	af 89       	ldd	r26, Y+23	; 0x17
    8118:	b8 8d       	ldd	r27, Y+24	; 0x18
    811a:	14 96       	adiw	r26, 0x04	; 4
    811c:	2d 91       	ld	r18, X+
    811e:	3d 91       	ld	r19, X+
    8120:	4d 91       	ld	r20, X+
    8122:	5c 91       	ld	r21, X
    8124:	17 97       	sbiw	r26, 0x07	; 7
    8126:	0e 94 08 4c 	call	0x9810	; 0x9810 <__addsf3>
    812a:	20 e0       	ldi	r18, 0x00	; 0
    812c:	30 e0       	ldi	r19, 0x00	; 0
    812e:	40 e8       	ldi	r20, 0x80	; 128
    8130:	5f e3       	ldi	r21, 0x3F	; 63
    8132:	0e 94 07 4c 	call	0x980e	; 0x980e <__subsf3>
    8136:	20 e0       	ldi	r18, 0x00	; 0
    8138:	30 e0       	ldi	r19, 0x00	; 0
    813a:	40 e0       	ldi	r20, 0x00	; 0
    813c:	5e e3       	ldi	r21, 0x3E	; 62
    813e:	0e 94 52 4d 	call	0x9aa4	; 0x9aa4 <__mulsf3>
    8142:	0e 94 70 4c 	call	0x98e0	; 0x98e0 <__fixunssfsi>
    8146:	a8 01       	movw	r20, r16
    8148:	80 91 88 0f 	lds	r24, 0x0F88
    814c:	90 91 89 0f 	lds	r25, 0x0F89
    8150:	0e 94 70 3a 	call	0x74e0	; 0x74e0 <get_level_tile>
    8154:	e8 2e       	mov	r14, r24
				lt2 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y1_tile + y);
    8156:	ef 89       	ldd	r30, Y+23	; 0x17
    8158:	f8 8d       	ldd	r31, Y+24	; 0x18
    815a:	24 81       	ldd	r18, Z+4	; 0x04
    815c:	35 81       	ldd	r19, Z+5	; 0x05
    815e:	46 81       	ldd	r20, Z+6	; 0x06
    8160:	57 81       	ldd	r21, Z+7	; 0x07
    8162:	c3 01       	movw	r24, r6
    8164:	b2 01       	movw	r22, r4
    8166:	0e 94 08 4c 	call	0x9810	; 0x9810 <__addsf3>
    816a:	20 e0       	ldi	r18, 0x00	; 0
    816c:	30 e0       	ldi	r19, 0x00	; 0
    816e:	40 e8       	ldi	r20, 0x80	; 128
    8170:	5f e3       	ldi	r21, 0x3F	; 63
    8172:	0e 94 07 4c 	call	0x980e	; 0x980e <__subsf3>
    8176:	20 e0       	ldi	r18, 0x00	; 0
    8178:	30 e0       	ldi	r19, 0x00	; 0
    817a:	40 e0       	ldi	r20, 0x00	; 0
    817c:	5e e3       	ldi	r21, 0x3E	; 62
    817e:	0e 94 52 4d 	call	0x9aa4	; 0x9aa4 <__mulsf3>
    8182:	0e 94 70 4c 	call	0x98e0	; 0x98e0 <__fixunssfsi>
    8186:	a6 01       	movw	r20, r12
    8188:	80 91 88 0f 	lds	r24, 0x0F88
    818c:	90 91 89 0f 	lds	r25, 0x0F89
    8190:	0e 94 70 3a 	call	0x74e0	; 0x74e0 <get_level_tile>
    8194:	78 2e       	mov	r7, r24
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    8196:	8e 2d       	mov	r24, r14
    8198:	0e 94 f0 3a 	call	0x75e0	; 0x75e0 <solid_tile>
    819c:	88 23       	and	r24, r24
    819e:	99 f0       	breq	.+38     	; 0x81c6 <collision_detect_level+0x5d8>
    81a0:	af 89       	ldd	r26, Y+23	; 0x17
    81a2:	b8 8d       	ldd	r27, Y+24	; 0x18
    81a4:	18 96       	adiw	r26, 0x08	; 8
    81a6:	6d 91       	ld	r22, X+
    81a8:	7d 91       	ld	r23, X+
    81aa:	8d 91       	ld	r24, X+
    81ac:	9c 91       	ld	r25, X
    81ae:	1b 97       	sbiw	r26, 0x0b	; 11
    81b0:	0e 94 70 4c 	call	0x98e0	; 0x98e0 <__fixunssfsi>
    81b4:	dc 01       	movw	r26, r24
    81b6:	cb 01       	movw	r24, r22
    81b8:	28 e0       	ldi	r18, 0x08	; 8
    81ba:	48 e0       	ldi	r20, 0x08	; 8
    81bc:	b1 01       	movw	r22, r2
    81be:	0e 94 e3 3d 	call	0x7bc6	; 0x7bc6 <pixel_overlap>
    81c2:	84 30       	cpi	r24, 0x04	; 4
    81c4:	b8 f4       	brcc	.+46     	; 0x81f4 <collision_detect_level+0x606>
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    81c6:	87 2d       	mov	r24, r7
    81c8:	0e 94 f0 3a 	call	0x75e0	; 0x75e0 <solid_tile>
			
			if (s->vx > 0)
			{
				lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y0_tile + y);
				lt2 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    81cc:	88 23       	and	r24, r24
    81ce:	21 f1       	breq	.+72     	; 0x8218 <collision_detect_level+0x62a>
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    81d0:	ef 89       	ldd	r30, Y+23	; 0x17
    81d2:	f8 8d       	ldd	r31, Y+24	; 0x18
    81d4:	60 85       	ldd	r22, Z+8	; 0x08
    81d6:	71 85       	ldd	r23, Z+9	; 0x09
    81d8:	82 85       	ldd	r24, Z+10	; 0x0a
    81da:	93 85       	ldd	r25, Z+11	; 0x0b
    81dc:	0e 94 70 4c 	call	0x98e0	; 0x98e0 <__fixunssfsi>
    81e0:	dc 01       	movw	r26, r24
    81e2:	cb 01       	movw	r24, r22
    81e4:	28 e0       	ldi	r18, 0x08	; 8
    81e6:	48 e0       	ldi	r20, 0x08	; 8
    81e8:	6a 81       	ldd	r22, Y+2	; 0x02
    81ea:	7b 81       	ldd	r23, Y+3	; 0x03
    81ec:	0e 94 e3 3d 	call	0x7bc6	; 0x7bc6 <pixel_overlap>
    81f0:	84 30       	cpi	r24, 0x04	; 4
    81f2:	90 f0       	brcs	.+36     	; 0x8218 <collision_detect_level+0x62a>
				{
					s->vx =  0;
    81f4:	af 89       	ldd	r26, Y+23	; 0x17
    81f6:	b8 8d       	ldd	r27, Y+24	; 0x18
    81f8:	1d 96       	adiw	r26, 0x0d	; 13
    81fa:	1c 92       	st	X, r1
    81fc:	1e 92       	st	-X, r1
    81fe:	1c 97       	sbiw	r26, 0x0c	; 12
					s->x = x0_tile * 8;
    8200:	c5 01       	movw	r24, r10
    8202:	b4 01       	movw	r22, r8
    8204:	0e 94 9c 4c 	call	0x9938	; 0x9938 <__floatunsisf>
    8208:	ef 89       	ldd	r30, Y+23	; 0x17
    820a:	f8 8d       	ldd	r31, Y+24	; 0x18
    820c:	64 83       	std	Z+4, r22	; 0x04
    820e:	75 83       	std	Z+5, r23	; 0x05
    8210:	86 83       	std	Z+6, r24	; 0x06
    8212:	97 83       	std	Z+7, r25	; 0x07
					result = 1;
    8214:	f1 e0       	ldi	r31, 0x01	; 1
    8216:	f9 83       	std	Y+1, r31	; 0x01
    8218:	0f 5f       	subi	r16, 0xFF	; 255
    821a:	1f 4f       	sbci	r17, 0xFF	; 255
    821c:	2f ef       	ldi	r18, 0xFF	; 255
    821e:	c2 1a       	sub	r12, r18
    8220:	d2 0a       	sbc	r13, r18
    8222:	03 cf       	rjmp	.-506    	; 0x802a <collision_detect_level+0x43c>
	u16 y1_tile = (s->y+7) / 8;
	u8 lt1, lt2;
	u8 result = 0;
	
	// Only if moving
	if (s->vx == 0 && s->vy == 0) return result;
    8224:	19 82       	std	Y+1, r1	; 0x01
				}
			}
		}
	}
	return result;
}
    8226:	89 81       	ldd	r24, Y+1	; 0x01
    8228:	68 96       	adiw	r28, 0x18	; 24
    822a:	0f b6       	in	r0, 0x3f	; 63
    822c:	f8 94       	cli
    822e:	de bf       	out	0x3e, r29	; 62
    8230:	0f be       	out	0x3f, r0	; 63
    8232:	cd bf       	out	0x3d, r28	; 61
    8234:	df 91       	pop	r29
    8236:	cf 91       	pop	r28
    8238:	1f 91       	pop	r17
    823a:	0f 91       	pop	r16
    823c:	ff 90       	pop	r15
    823e:	ef 90       	pop	r14
    8240:	df 90       	pop	r13
    8242:	cf 90       	pop	r12
    8244:	bf 90       	pop	r11
    8246:	af 90       	pop	r10
    8248:	9f 90       	pop	r9
    824a:	8f 90       	pop	r8
    824c:	7f 90       	pop	r7
    824e:	6f 90       	pop	r6
    8250:	5f 90       	pop	r5
    8252:	4f 90       	pop	r4
    8254:	3f 90       	pop	r3
    8256:	2f 90       	pop	r2
    8258:	08 95       	ret

0000825a <animate_shot>:
		game.player.active_shots++;
	}
}

void animate_shot()
{
    825a:	2f 92       	push	r2
    825c:	3f 92       	push	r3
    825e:	4f 92       	push	r4
    8260:	5f 92       	push	r5
    8262:	6f 92       	push	r6
    8264:	7f 92       	push	r7
    8266:	8f 92       	push	r8
    8268:	9f 92       	push	r9
    826a:	af 92       	push	r10
    826c:	bf 92       	push	r11
    826e:	cf 92       	push	r12
    8270:	df 92       	push	r13
    8272:	ef 92       	push	r14
    8274:	ff 92       	push	r15
    8276:	0f 93       	push	r16
    8278:	1f 93       	push	r17
    827a:	cf 93       	push	r28
    827c:	df 93       	push	r29
    827e:	cd b7       	in	r28, 0x3d	; 61
    8280:	de b7       	in	r29, 0x3e	; 62
    8282:	2f 97       	sbiw	r28, 0x0f	; 15
    8284:	0f b6       	in	r0, 0x3f	; 63
    8286:	f8 94       	cli
    8288:	de bf       	out	0x3e, r29	; 62
    828a:	0f be       	out	0x3f, r0	; 63
    828c:	cd bf       	out	0x3d, r28	; 61
    828e:	92 ed       	ldi	r25, 0xD2	; 210
    8290:	89 2e       	mov	r8, r25
    8292:	9d e0       	ldi	r25, 0x0D	; 13
    8294:	99 2e       	mov	r9, r25
    8296:	81 ec       	ldi	r24, 0xC1	; 193
    8298:	9d e0       	ldi	r25, 0x0D	; 13
    829a:	9f 87       	std	Y+15, r25	; 0x0f
    829c:	8e 87       	std	Y+14, r24	; 0x0e
    829e:	9b e0       	ldi	r25, 0x0B	; 11
    82a0:	99 83       	std	Y+1, r25	; 0x01
						SFX_HIT;
						game.enemies[j].shield -= game.player.shot[i].hit_count;
						if (game.enemies[j].shield <= 0)
						{
							SFX_ENEMY_EXPLODE;
							game.enemies[j].flags = EXPLODING;
    82a2:	20 e1       	ldi	r18, 0x10	; 16
    82a4:	b2 2e       	mov	r11, r18
{
	// Animate shots
	u8 slot = ENEMY_SLOT;
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
	{
		if (game.player.shot[i].active)
    82a6:	f4 01       	movw	r30, r8
    82a8:	80 81       	ld	r24, Z
    82aa:	88 23       	and	r24, r24
    82ac:	09 f4       	brne	.+2      	; 0x82b0 <animate_shot+0x56>
    82ae:	46 c1       	rjmp	.+652    	; 0x853c <animate_shot+0x2e2>
		{
			game.player.shot[i].shared.x += game.player.shot[i].shared.vx*FRAME_TIME;
    82b0:	ee 85       	ldd	r30, Y+14	; 0x0e
    82b2:	ff 85       	ldd	r31, Y+15	; 0x0f
    82b4:	64 85       	ldd	r22, Z+12	; 0x0c
    82b6:	75 85       	ldd	r23, Z+13	; 0x0d
    82b8:	88 27       	eor	r24, r24
    82ba:	77 fd       	sbrc	r23, 7
    82bc:	80 95       	com	r24
    82be:	98 2f       	mov	r25, r24
    82c0:	0e 94 9e 4c 	call	0x993c	; 0x993c <__floatsisf>
    82c4:	29 e8       	ldi	r18, 0x89	; 137
    82c6:	38 e8       	ldi	r19, 0x88	; 136
    82c8:	48 e8       	ldi	r20, 0x88	; 136
    82ca:	5c e3       	ldi	r21, 0x3C	; 60
    82cc:	0e 94 52 4d 	call	0x9aa4	; 0x9aa4 <__mulsf3>
    82d0:	ee 85       	ldd	r30, Y+14	; 0x0e
    82d2:	ff 85       	ldd	r31, Y+15	; 0x0f
    82d4:	24 81       	ldd	r18, Z+4	; 0x04
    82d6:	35 81       	ldd	r19, Z+5	; 0x05
    82d8:	46 81       	ldd	r20, Z+6	; 0x06
    82da:	57 81       	ldd	r21, Z+7	; 0x07
    82dc:	0e 94 08 4c 	call	0x9810	; 0x9810 <__addsf3>
    82e0:	2b 01       	movw	r4, r22
    82e2:	3c 01       	movw	r6, r24
    82e4:	ee 85       	ldd	r30, Y+14	; 0x0e
    82e6:	ff 85       	ldd	r31, Y+15	; 0x0f
    82e8:	64 83       	std	Z+4, r22	; 0x04
    82ea:	75 83       	std	Z+5, r23	; 0x05
    82ec:	86 83       	std	Z+6, r24	; 0x06
    82ee:	97 83       	std	Z+7, r25	; 0x07
			game.player.shot[i].shared.y += game.player.shot[i].shared.vy*FRAME_TIME;
    82f0:	29 e8       	ldi	r18, 0x89	; 137
    82f2:	38 e8       	ldi	r19, 0x88	; 136
    82f4:	48 e8       	ldi	r20, 0x88	; 136
    82f6:	5c e3       	ldi	r21, 0x3C	; 60
    82f8:	60 81       	ld	r22, Z
    82fa:	71 81       	ldd	r23, Z+1	; 0x01
    82fc:	82 81       	ldd	r24, Z+2	; 0x02
    82fe:	93 81       	ldd	r25, Z+3	; 0x03
    8300:	0e 94 52 4d 	call	0x9aa4	; 0x9aa4 <__mulsf3>
    8304:	ee 85       	ldd	r30, Y+14	; 0x0e
    8306:	ff 85       	ldd	r31, Y+15	; 0x0f
    8308:	20 85       	ldd	r18, Z+8	; 0x08
    830a:	31 85       	ldd	r19, Z+9	; 0x09
    830c:	42 85       	ldd	r20, Z+10	; 0x0a
    830e:	53 85       	ldd	r21, Z+11	; 0x0b
    8310:	0e 94 08 4c 	call	0x9810	; 0x9810 <__addsf3>
    8314:	6b 01       	movw	r12, r22
    8316:	7c 01       	movw	r14, r24
    8318:	ee 85       	ldd	r30, Y+14	; 0x0e
    831a:	ff 85       	ldd	r31, Y+15	; 0x0f
    831c:	60 87       	std	Z+8, r22	; 0x08
    831e:	71 87       	std	Z+9, r23	; 0x09
    8320:	82 87       	std	Z+10, r24	; 0x0a
    8322:	93 87       	std	Z+11, r25	; 0x0b
			LBMoveSprite(PLAYER_SHOT_SLOT+i, game.player.shot[i].shared.x - game.camera_x, game.player.shot[i].shared.y - game.camera_y, 1, 1);
    8324:	60 91 97 0d 	lds	r22, 0x0D97
    8328:	70 91 98 0d 	lds	r23, 0x0D98
    832c:	80 e0       	ldi	r24, 0x00	; 0
    832e:	90 e0       	ldi	r25, 0x00	; 0
    8330:	0e 94 9c 4c 	call	0x9938	; 0x9938 <__floatunsisf>
    8334:	9b 01       	movw	r18, r22
    8336:	ac 01       	movw	r20, r24
    8338:	c7 01       	movw	r24, r14
    833a:	b6 01       	movw	r22, r12
    833c:	0e 94 07 4c 	call	0x980e	; 0x980e <__subsf3>
    8340:	0e 94 70 4c 	call	0x98e0	; 0x98e0 <__fixunssfsi>
    8344:	c6 2e       	mov	r12, r22
    8346:	80 91 95 0d 	lds	r24, 0x0D95
    834a:	90 91 96 0d 	lds	r25, 0x0D96
    834e:	bc 01       	movw	r22, r24
    8350:	80 e0       	ldi	r24, 0x00	; 0
    8352:	90 e0       	ldi	r25, 0x00	; 0
    8354:	0e 94 9c 4c 	call	0x9938	; 0x9938 <__floatunsisf>
    8358:	9b 01       	movw	r18, r22
    835a:	ac 01       	movw	r20, r24
    835c:	c3 01       	movw	r24, r6
    835e:	b2 01       	movw	r22, r4
    8360:	0e 94 07 4c 	call	0x980e	; 0x980e <__subsf3>
    8364:	0e 94 70 4c 	call	0x98e0	; 0x98e0 <__fixunssfsi>
    8368:	01 e0       	ldi	r16, 0x01	; 1
    836a:	21 e0       	ldi	r18, 0x01	; 1
    836c:	4c 2d       	mov	r20, r12
    836e:	89 81       	ldd	r24, Y+1	; 0x01
    8370:	0e 94 4a 38 	call	0x7094	; 0x7094 <LBMoveSprite>
			if (game.player.shot[i].shared.x < game.camera_x || game.player.shot[i].shared.x+8 > game.camera_x + CAMERA_WIDTH*8 ||
    8374:	ee 85       	ldd	r30, Y+14	; 0x0e
    8376:	ff 85       	ldd	r31, Y+15	; 0x0f
    8378:	c4 80       	ldd	r12, Z+4	; 0x04
    837a:	d5 80       	ldd	r13, Z+5	; 0x05
    837c:	e6 80       	ldd	r14, Z+6	; 0x06
    837e:	f7 80       	ldd	r15, Z+7	; 0x07
    8380:	60 90 95 0d 	lds	r6, 0x0D95
    8384:	70 90 96 0d 	lds	r7, 0x0D96
    8388:	b3 01       	movw	r22, r6
    838a:	80 e0       	ldi	r24, 0x00	; 0
    838c:	90 e0       	ldi	r25, 0x00	; 0
    838e:	0e 94 9c 4c 	call	0x9938	; 0x9938 <__floatunsisf>
    8392:	9b 01       	movw	r18, r22
    8394:	ac 01       	movw	r20, r24
    8396:	c7 01       	movw	r24, r14
    8398:	b6 01       	movw	r22, r12
    839a:	0e 94 6c 4c 	call	0x98d8	; 0x98d8 <__cmpsf2>
    839e:	87 ff       	sbrs	r24, 7
    83a0:	0f c0       	rjmp	.+30     	; 0x83c0 <animate_shot+0x166>
			    collision_detect_level(&game.player.shot[i].shared, 1, 1))
			{
				game.player.shot[i].active = 0;
    83a2:	f4 01       	movw	r30, r8
    83a4:	10 82       	st	Z, r1
				game.player.active_shots--;
    83a6:	80 91 ba 0d 	lds	r24, 0x0DBA
    83aa:	81 50       	subi	r24, 0x01	; 1
    83ac:	80 93 ba 0d 	sts	0x0DBA, r24
				LBMoveSprite(PLAYER_SHOT_SLOT+i, OFF_SCREEN, 0, 1, 1);
    83b0:	01 e0       	ldi	r16, 0x01	; 1
    83b2:	21 e0       	ldi	r18, 0x01	; 1
    83b4:	40 e0       	ldi	r20, 0x00	; 0
    83b6:	60 ee       	ldi	r22, 0xE0	; 224
    83b8:	89 81       	ldd	r24, Y+1	; 0x01
    83ba:	0e 94 4a 38 	call	0x7094	; 0x7094 <LBMoveSprite>
    83be:	be c0       	rjmp	.+380    	; 0x853c <animate_shot+0x2e2>
		if (game.player.shot[i].active)
		{
			game.player.shot[i].shared.x += game.player.shot[i].shared.vx*FRAME_TIME;
			game.player.shot[i].shared.y += game.player.shot[i].shared.vy*FRAME_TIME;
			LBMoveSprite(PLAYER_SHOT_SLOT+i, game.player.shot[i].shared.x - game.camera_x, game.player.shot[i].shared.y - game.camera_y, 1, 1);
			if (game.player.shot[i].shared.x < game.camera_x || game.player.shot[i].shared.x+8 > game.camera_x + CAMERA_WIDTH*8 ||
    83c0:	20 e0       	ldi	r18, 0x00	; 0
    83c2:	30 e0       	ldi	r19, 0x00	; 0
    83c4:	40 e0       	ldi	r20, 0x00	; 0
    83c6:	51 e4       	ldi	r21, 0x41	; 65
    83c8:	c7 01       	movw	r24, r14
    83ca:	b6 01       	movw	r22, r12
    83cc:	0e 94 08 4c 	call	0x9810	; 0x9810 <__addsf3>
    83d0:	1b 01       	movw	r2, r22
    83d2:	2c 01       	movw	r4, r24
    83d4:	b3 01       	movw	r22, r6
    83d6:	60 52       	subi	r22, 0x20	; 32
    83d8:	7f 4f       	sbci	r23, 0xFF	; 255
    83da:	80 e0       	ldi	r24, 0x00	; 0
    83dc:	90 e0       	ldi	r25, 0x00	; 0
    83de:	0e 94 9c 4c 	call	0x9938	; 0x9938 <__floatunsisf>
    83e2:	9b 01       	movw	r18, r22
    83e4:	ac 01       	movw	r20, r24
    83e6:	c2 01       	movw	r24, r4
    83e8:	b1 01       	movw	r22, r2
    83ea:	0e 94 4e 4d 	call	0x9a9c	; 0x9a9c <__gesf2>
    83ee:	18 16       	cp	r1, r24
    83f0:	c4 f2       	brlt	.-80     	; 0x83a2 <animate_shot+0x148>
			    collision_detect_level(&game.player.shot[i].shared, 1, 1))
    83f2:	41 e0       	ldi	r20, 0x01	; 1
    83f4:	61 e0       	ldi	r22, 0x01	; 1
    83f6:	8e 85       	ldd	r24, Y+14	; 0x0e
    83f8:	9f 85       	ldd	r25, Y+15	; 0x0f
    83fa:	0e 94 f7 3d 	call	0x7bee	; 0x7bee <collision_detect_level>
		if (game.player.shot[i].active)
		{
			game.player.shot[i].shared.x += game.player.shot[i].shared.vx*FRAME_TIME;
			game.player.shot[i].shared.y += game.player.shot[i].shared.vy*FRAME_TIME;
			LBMoveSprite(PLAYER_SHOT_SLOT+i, game.player.shot[i].shared.x - game.camera_x, game.player.shot[i].shared.y - game.camera_y, 1, 1);
			if (game.player.shot[i].shared.x < game.camera_x || game.player.shot[i].shared.x+8 > game.camera_x + CAMERA_WIDTH*8 ||
    83fe:	81 11       	cpse	r24, r1
    8400:	d0 cf       	rjmp	.-96     	; 0x83a2 <animate_shot+0x148>
    8402:	8e e4       	ldi	r24, 0x4E	; 78
    8404:	28 2e       	mov	r2, r24
    8406:	8e e0       	ldi	r24, 0x0E	; 14
    8408:	38 2e       	mov	r3, r24
    840a:	61 2c       	mov	r6, r1
    840c:	71 2c       	mov	r7, r1
    840e:	24 01       	movw	r4, r8
    8410:	f1 e0       	ldi	r31, 0x01	; 1
    8412:	4f 1a       	sub	r4, r31
    8414:	51 08       	sbc	r5, r1
    8416:	f1 01       	movw	r30, r2
    8418:	38 97       	sbiw	r30, 0x08	; 8
			else
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
				{
					if (game.enemies[j].active &&
    841a:	80 81       	ld	r24, Z
    841c:	88 23       	and	r24, r24
    841e:	09 f4       	brne	.+2      	; 0x8422 <animate_shot+0x1c8>
    8420:	82 c0       	rjmp	.+260    	; 0x8526 <animate_shot+0x2cc>
    8422:	34 96       	adiw	r30, 0x04	; 4
					    LBCollides(game.player.shot[i].shared.x,game.player.shot[i].shared.y, 8, 8,
    8424:	a0 80       	ld	r10, Z
    8426:	aa 0c       	add	r10, r10
    8428:	aa 0c       	add	r10, r10
    842a:	aa 0c       	add	r10, r10
    842c:	31 97       	sbiw	r30, 0x01	; 1
    842e:	c0 80       	ld	r12, Z
    8430:	cc 0c       	add	r12, r12
    8432:	cc 0c       	add	r12, r12
    8434:	cc 0c       	add	r12, r12
    8436:	3a 97       	sbiw	r30, 0x0a	; 10
    8438:	60 81       	ld	r22, Z
    843a:	71 81       	ldd	r23, Z+1	; 0x01
    843c:	82 81       	ldd	r24, Z+2	; 0x02
    843e:	93 81       	ldd	r25, Z+3	; 0x03
    8440:	0e 94 70 4c 	call	0x98e0	; 0x98e0 <__fixunssfsi>
    8444:	6a 83       	std	Y+2, r22	; 0x02
    8446:	7b 83       	std	Y+3, r23	; 0x03
    8448:	8c 83       	std	Y+4, r24	; 0x04
    844a:	9d 83       	std	Y+5, r25	; 0x05
    844c:	f1 01       	movw	r30, r2
    844e:	73 97       	sbiw	r30, 0x13	; 19
    8450:	60 81       	ld	r22, Z
    8452:	71 81       	ldd	r23, Z+1	; 0x01
    8454:	82 81       	ldd	r24, Z+2	; 0x02
    8456:	93 81       	ldd	r25, Z+3	; 0x03
    8458:	0e 94 70 4c 	call	0x98e0	; 0x98e0 <__fixunssfsi>
    845c:	6e 83       	std	Y+6, r22	; 0x06
    845e:	7f 83       	std	Y+7, r23	; 0x07
    8460:	88 87       	std	Y+8, r24	; 0x08
    8462:	99 87       	std	Y+9, r25	; 0x09
    8464:	ee 85       	ldd	r30, Y+14	; 0x0e
    8466:	ff 85       	ldd	r31, Y+15	; 0x0f
    8468:	60 85       	ldd	r22, Z+8	; 0x08
    846a:	71 85       	ldd	r23, Z+9	; 0x09
    846c:	82 85       	ldd	r24, Z+10	; 0x0a
    846e:	93 85       	ldd	r25, Z+11	; 0x0b
    8470:	0e 94 70 4c 	call	0x98e0	; 0x98e0 <__fixunssfsi>
    8474:	6a 87       	std	Y+10, r22	; 0x0a
    8476:	7b 87       	std	Y+11, r23	; 0x0b
    8478:	8c 87       	std	Y+12, r24	; 0x0c
    847a:	9d 87       	std	Y+13, r25	; 0x0d
    847c:	ee 85       	ldd	r30, Y+14	; 0x0e
    847e:	ff 85       	ldd	r31, Y+15	; 0x0f
    8480:	64 81       	ldd	r22, Z+4	; 0x04
    8482:	75 81       	ldd	r23, Z+5	; 0x05
    8484:	86 81       	ldd	r24, Z+6	; 0x06
    8486:	97 81       	ldd	r25, Z+7	; 0x07
    8488:	0e 94 70 4c 	call	0x98e0	; 0x98e0 <__fixunssfsi>
    848c:	dc 01       	movw	r26, r24
    848e:	cb 01       	movw	r24, r22
    8490:	ea 80       	ldd	r14, Y+2	; 0x02
    8492:	fb 80       	ldd	r15, Y+3	; 0x03
    8494:	0e 81       	ldd	r16, Y+6	; 0x06
    8496:	1f 81       	ldd	r17, Y+7	; 0x07
    8498:	28 e0       	ldi	r18, 0x08	; 8
    849a:	48 e0       	ldi	r20, 0x08	; 8
    849c:	6a 85       	ldd	r22, Y+10	; 0x0a
    849e:	7b 85       	ldd	r23, Y+11	; 0x0b
    84a0:	0e 94 c3 37 	call	0x6f86	; 0x6f86 <LBCollides>
			else
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
				{
					if (game.enemies[j].active &&
    84a4:	88 23       	and	r24, r24
    84a6:	09 f4       	brne	.+2      	; 0x84aa <animate_shot+0x250>
    84a8:	3e c0       	rjmp	.+124    	; 0x8526 <animate_shot+0x2cc>
					    LBCollides(game.player.shot[i].shared.x,game.player.shot[i].shared.y, 8, 8,
							game.enemies[j].shared.x, game.enemies[j].shared.y, game.enemies[j].width*8, game.enemies[j].height*8
						)
					)
					{
						SFX_HIT;
    84aa:	41 e0       	ldi	r20, 0x01	; 1
    84ac:	6f ef       	ldi	r22, 0xFF	; 255
    84ae:	84 e0       	ldi	r24, 0x04	; 4
    84b0:	0e 94 60 2b 	call	0x56c0	; 0x56c0 <TriggerFx>
						game.enemies[j].shield -= game.player.shot[i].hit_count;
    84b4:	f1 01       	movw	r30, r2
    84b6:	80 81       	ld	r24, Z
    84b8:	f2 01       	movw	r30, r4
    84ba:	90 81       	ld	r25, Z
    84bc:	89 1b       	sub	r24, r25
    84be:	f1 01       	movw	r30, r2
    84c0:	80 83       	st	Z, r24
						if (game.enemies[j].shield <= 0)
    84c2:	18 16       	cp	r1, r24
    84c4:	14 f1       	brlt	.+68     	; 0x850a <animate_shot+0x2b0>
						{
							SFX_ENEMY_EXPLODE;
    84c6:	41 e0       	ldi	r20, 0x01	; 1
    84c8:	6f ef       	ldi	r22, 0xFF	; 255
    84ca:	86 e0       	ldi	r24, 0x06	; 6
    84cc:	0e 94 60 2b 	call	0x56c0	; 0x56c0 <TriggerFx>
							game.enemies[j].flags = EXPLODING;
    84d0:	f2 e4       	ldi	r31, 0x42	; 66
    84d2:	f6 9d       	mul	r31, r6
    84d4:	c0 01       	movw	r24, r0
    84d6:	f7 9d       	mul	r31, r7
    84d8:	90 0d       	add	r25, r0
    84da:	11 24       	eor	r1, r1
    84dc:	8f 56       	subi	r24, 0x6F	; 111
    84de:	92 4f       	sbci	r25, 0xF2	; 242
    84e0:	fc 01       	movw	r30, r24
    84e2:	ea 54       	subi	r30, 0x4A	; 74
    84e4:	ff 4f       	sbci	r31, 0xFF	; 255
    84e6:	b0 82       	st	Z, r11
							game.enemies[j].active = 0;
    84e8:	31 97       	sbiw	r30, 0x01	; 1
    84ea:	10 82       	st	Z, r1
							game.active_enemies--;
    84ec:	80 91 a9 0d 	lds	r24, 0x0DA9
    84f0:	81 50       	subi	r24, 0x01	; 1
    84f2:	80 93 a9 0d 	sts	0x0DA9, r24
							game.score += KILL_SCORE;
    84f6:	80 91 99 0d 	lds	r24, 0x0D99
    84fa:	90 91 9a 0d 	lds	r25, 0x0D9A
    84fe:	0a 96       	adiw	r24, 0x0a	; 10
    8500:	90 93 9a 0d 	sts	0x0D9A, r25
    8504:	80 93 99 0d 	sts	0x0D99, r24
							break;
    8508:	19 c0       	rjmp	.+50     	; 0x853c <animate_shot+0x2e2>
						}
						game.player.shot[i].active = 0;
    850a:	f4 01       	movw	r30, r8
    850c:	10 82       	st	Z, r1
						game.player.active_shots--;
    850e:	80 91 ba 0d 	lds	r24, 0x0DBA
    8512:	81 50       	subi	r24, 0x01	; 1
    8514:	80 93 ba 0d 	sts	0x0DBA, r24
						LBMoveSprite(PLAYER_SHOT_SLOT+i, OFF_SCREEN, 0, 1, 1);
    8518:	01 e0       	ldi	r16, 0x01	; 1
    851a:	21 e0       	ldi	r18, 0x01	; 1
    851c:	40 e0       	ldi	r20, 0x00	; 0
    851e:	60 ee       	ldi	r22, 0xE0	; 224
    8520:	89 81       	ldd	r24, Y+1	; 0x01
    8522:	0e 94 4a 38 	call	0x7094	; 0x7094 <LBMoveSprite>
    8526:	ff ef       	ldi	r31, 0xFF	; 255
    8528:	6f 1a       	sub	r6, r31
    852a:	7f 0a       	sbc	r7, r31
    852c:	22 e4       	ldi	r18, 0x42	; 66
    852e:	22 0e       	add	r2, r18
    8530:	31 1c       	adc	r3, r1
				LBMoveSprite(PLAYER_SHOT_SLOT+i, OFF_SCREEN, 0, 1, 1);
			}
			else
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
    8532:	85 e0       	ldi	r24, 0x05	; 5
    8534:	68 16       	cp	r6, r24
    8536:	71 04       	cpc	r7, r1
    8538:	09 f0       	breq	.+2      	; 0x853c <animate_shot+0x2e2>
    853a:	6d cf       	rjmp	.-294    	; 0x8416 <animate_shot+0x1bc>
    853c:	9a e1       	ldi	r25, 0x1A	; 26
    853e:	89 0e       	add	r8, r25
    8540:	91 1c       	adc	r9, r1
    8542:	e9 81       	ldd	r30, Y+1	; 0x01
    8544:	ef 5f       	subi	r30, 0xFF	; 255
    8546:	e9 83       	std	Y+1, r30	; 0x01
    8548:	8e 85       	ldd	r24, Y+14	; 0x0e
    854a:	9f 85       	ldd	r25, Y+15	; 0x0f
    854c:	4a 96       	adiw	r24, 0x1a	; 26
    854e:	9f 87       	std	Y+15, r25	; 0x0f
    8550:	8e 87       	std	Y+14, r24	; 0x0e

void animate_shot()
{
	// Animate shots
	u8 slot = ENEMY_SLOT;
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
    8552:	ee 30       	cpi	r30, 0x0E	; 14
    8554:	09 f0       	breq	.+2      	; 0x8558 <animate_shot+0x2fe>
    8556:	a7 ce       	rjmp	.-690    	; 0x82a6 <animate_shot+0x4c>
					slot += game.enemies[j].width*game.enemies[j].height;
				}
			}
		}
	}
}
    8558:	2f 96       	adiw	r28, 0x0f	; 15
    855a:	0f b6       	in	r0, 0x3f	; 63
    855c:	f8 94       	cli
    855e:	de bf       	out	0x3e, r29	; 62
    8560:	0f be       	out	0x3f, r0	; 63
    8562:	cd bf       	out	0x3d, r28	; 61
    8564:	df 91       	pop	r29
    8566:	cf 91       	pop	r28
    8568:	1f 91       	pop	r17
    856a:	0f 91       	pop	r16
    856c:	ff 90       	pop	r15
    856e:	ef 90       	pop	r14
    8570:	df 90       	pop	r13
    8572:	cf 90       	pop	r12
    8574:	bf 90       	pop	r11
    8576:	af 90       	pop	r10
    8578:	9f 90       	pop	r9
    857a:	8f 90       	pop	r8
    857c:	7f 90       	pop	r7
    857e:	6f 90       	pop	r6
    8580:	5f 90       	pop	r5
    8582:	4f 90       	pop	r4
    8584:	3f 90       	pop	r3
    8586:	2f 90       	pop	r2
    8588:	08 95       	ret

0000858a <map_explosion>:
	}
	return result;
}

u8 map_explosion(u8* flags, Animation* anim, u8 slot, u8 width, u8 height)
{
    858a:	7f 92       	push	r7
    858c:	8f 92       	push	r8
    858e:	9f 92       	push	r9
    8590:	af 92       	push	r10
    8592:	bf 92       	push	r11
    8594:	cf 92       	push	r12
    8596:	df 92       	push	r13
    8598:	ef 92       	push	r14
    859a:	ff 92       	push	r15
    859c:	0f 93       	push	r16
    859e:	1f 93       	push	r17
    85a0:	cf 93       	push	r28
    85a2:	df 93       	push	r29
    85a4:	1f 92       	push	r1
    85a6:	cd b7       	in	r28, 0x3d	; 61
    85a8:	de b7       	in	r29, 0x3e	; 62
    85aa:	6c 01       	movw	r12, r24
    85ac:	7b 01       	movw	r14, r22
    85ae:	74 2e       	mov	r7, r20
	char* frame;
	frame = LBGetNextFrame(anim);
    85b0:	cb 01       	movw	r24, r22
    85b2:	29 83       	std	Y+1, r18	; 0x01
    85b4:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <LBGetNextFrame>
    85b8:	4c 01       	movw	r8, r24
	for (u8 i = 0; i < width*height; i++)
    85ba:	29 81       	ldd	r18, Y+1	; 0x01
    85bc:	20 9f       	mul	r18, r16
    85be:	50 01       	movw	r10, r0
    85c0:	11 24       	eor	r1, r1
    85c2:	10 e0       	ldi	r17, 0x00	; 0
    85c4:	81 2f       	mov	r24, r17
    85c6:	90 e0       	ldi	r25, 0x00	; 0
    85c8:	8a 15       	cp	r24, r10
    85ca:	9b 05       	cpc	r25, r11
    85cc:	54 f4       	brge	.+20     	; 0x85e2 <map_explosion+0x58>
	{
		LBMapSprite(slot+i, frame, 0);
    85ce:	40 e0       	ldi	r20, 0x00	; 0
    85d0:	b4 01       	movw	r22, r8
    85d2:	81 2f       	mov	r24, r17
    85d4:	87 0d       	add	r24, r7
    85d6:	29 83       	std	Y+1, r18	; 0x01
    85d8:	0e 94 f8 37 	call	0x6ff0	; 0x6ff0 <LBMapSprite>

u8 map_explosion(u8* flags, Animation* anim, u8 slot, u8 width, u8 height)
{
	char* frame;
	frame = LBGetNextFrame(anim);
	for (u8 i = 0; i < width*height; i++)
    85dc:	1f 5f       	subi	r17, 0xFF	; 255
    85de:	29 81       	ldd	r18, Y+1	; 0x01
    85e0:	f1 cf       	rjmp	.-30     	; 0x85c4 <map_explosion+0x3a>
	{
		LBMapSprite(slot+i, frame, 0);
	}
	if (anim->looped)
    85e2:	f7 01       	movw	r30, r14
    85e4:	84 81       	ldd	r24, Z+4	; 0x04
    85e6:	88 23       	and	r24, r24
    85e8:	51 f0       	breq	.+20     	; 0x85fe <map_explosion+0x74>
	{
		*flags ^= EXPLODING;
    85ea:	f6 01       	movw	r30, r12
    85ec:	80 81       	ld	r24, Z
    85ee:	90 e1       	ldi	r25, 0x10	; 16
    85f0:	98 27       	eor	r25, r24
    85f2:	90 83       	st	Z, r25
		LBMoveSprite(slot, OFF_SCREEN, 0, width, height);
    85f4:	40 e0       	ldi	r20, 0x00	; 0
    85f6:	60 ee       	ldi	r22, 0xE0	; 224
    85f8:	87 2d       	mov	r24, r7
    85fa:	0e 94 4a 38 	call	0x7094	; 0x7094 <LBMoveSprite>
	}
	return anim->looped;
}
    85fe:	f7 01       	movw	r30, r14
    8600:	84 81       	ldd	r24, Z+4	; 0x04
    8602:	0f 90       	pop	r0
    8604:	df 91       	pop	r29
    8606:	cf 91       	pop	r28
    8608:	1f 91       	pop	r17
    860a:	0f 91       	pop	r16
    860c:	ff 90       	pop	r15
    860e:	ef 90       	pop	r14
    8610:	df 90       	pop	r13
    8612:	cf 90       	pop	r12
    8614:	bf 90       	pop	r11
    8616:	af 90       	pop	r10
    8618:	9f 90       	pop	r9
    861a:	8f 90       	pop	r8
    861c:	7f 90       	pop	r7
    861e:	08 95       	ret

00008620 <animate_sprite>:

void animate_sprite(SpriteShared* s, u8 slot, u8 width, u8 height)
{
    8620:	8f 92       	push	r8
    8622:	9f 92       	push	r9
    8624:	af 92       	push	r10
    8626:	bf 92       	push	r11
    8628:	ff 92       	push	r15
    862a:	0f 93       	push	r16
    862c:	1f 93       	push	r17
    862e:	cf 93       	push	r28
    8630:	df 93       	push	r29
    8632:	ec 01       	movw	r28, r24
    8634:	f6 2e       	mov	r15, r22
    8636:	14 2f       	mov	r17, r20
    8638:	02 2f       	mov	r16, r18
	s->vy = s->vy + s->gravity*FRAME_TIME;
    863a:	6e 85       	ldd	r22, Y+14	; 0x0e
    863c:	70 e0       	ldi	r23, 0x00	; 0
    863e:	80 e0       	ldi	r24, 0x00	; 0
    8640:	90 e0       	ldi	r25, 0x00	; 0
    8642:	0e 94 9e 4c 	call	0x993c	; 0x993c <__floatsisf>
    8646:	29 e8       	ldi	r18, 0x89	; 137
    8648:	38 e8       	ldi	r19, 0x88	; 136
    864a:	48 e8       	ldi	r20, 0x88	; 136
    864c:	5c e3       	ldi	r21, 0x3C	; 60
    864e:	0e 94 52 4d 	call	0x9aa4	; 0x9aa4 <__mulsf3>
    8652:	28 81       	ld	r18, Y
    8654:	39 81       	ldd	r19, Y+1	; 0x01
    8656:	4a 81       	ldd	r20, Y+2	; 0x02
    8658:	5b 81       	ldd	r21, Y+3	; 0x03
    865a:	0e 94 08 4c 	call	0x9810	; 0x9810 <__addsf3>
    865e:	4b 01       	movw	r8, r22
    8660:	5c 01       	movw	r10, r24
	if (s->vy > MAX_SPEED) s->vy = MAX_SPEED;
    8662:	20 e0       	ldi	r18, 0x00	; 0
    8664:	30 e0       	ldi	r19, 0x00	; 0
    8666:	40 ef       	ldi	r20, 0xF0	; 240
    8668:	52 e4       	ldi	r21, 0x42	; 66
    866a:	0e 94 4e 4d 	call	0x9a9c	; 0x9a9c <__gesf2>
    866e:	18 16       	cp	r1, r24
    8670:	2c f0       	brlt	.+10     	; 0x867c <animate_sprite+0x5c>
	return anim->looped;
}

void animate_sprite(SpriteShared* s, u8 slot, u8 width, u8 height)
{
	s->vy = s->vy + s->gravity*FRAME_TIME;
    8672:	88 82       	st	Y, r8
    8674:	99 82       	std	Y+1, r9	; 0x01
    8676:	aa 82       	std	Y+2, r10	; 0x02
    8678:	bb 82       	std	Y+3, r11	; 0x03
    867a:	08 c0       	rjmp	.+16     	; 0x868c <animate_sprite+0x6c>
	if (s->vy > MAX_SPEED) s->vy = MAX_SPEED;
    867c:	80 e0       	ldi	r24, 0x00	; 0
    867e:	90 e0       	ldi	r25, 0x00	; 0
    8680:	a0 ef       	ldi	r26, 0xF0	; 240
    8682:	b2 e4       	ldi	r27, 0x42	; 66
    8684:	88 83       	st	Y, r24
    8686:	99 83       	std	Y+1, r25	; 0x01
    8688:	aa 83       	std	Y+2, r26	; 0x02
    868a:	bb 83       	std	Y+3, r27	; 0x03
	s->x += s->vx*FRAME_TIME;
    868c:	6c 85       	ldd	r22, Y+12	; 0x0c
    868e:	7d 85       	ldd	r23, Y+13	; 0x0d
    8690:	88 27       	eor	r24, r24
    8692:	77 fd       	sbrc	r23, 7
    8694:	80 95       	com	r24
    8696:	98 2f       	mov	r25, r24
    8698:	0e 94 9e 4c 	call	0x993c	; 0x993c <__floatsisf>
    869c:	29 e8       	ldi	r18, 0x89	; 137
    869e:	38 e8       	ldi	r19, 0x88	; 136
    86a0:	48 e8       	ldi	r20, 0x88	; 136
    86a2:	5c e3       	ldi	r21, 0x3C	; 60
    86a4:	0e 94 52 4d 	call	0x9aa4	; 0x9aa4 <__mulsf3>
    86a8:	9b 01       	movw	r18, r22
    86aa:	ac 01       	movw	r20, r24
    86ac:	6c 81       	ldd	r22, Y+4	; 0x04
    86ae:	7d 81       	ldd	r23, Y+5	; 0x05
    86b0:	8e 81       	ldd	r24, Y+6	; 0x06
    86b2:	9f 81       	ldd	r25, Y+7	; 0x07
    86b4:	0e 94 08 4c 	call	0x9810	; 0x9810 <__addsf3>
    86b8:	6c 83       	std	Y+4, r22	; 0x04
    86ba:	7d 83       	std	Y+5, r23	; 0x05
    86bc:	8e 83       	std	Y+6, r24	; 0x06
    86be:	9f 83       	std	Y+7, r25	; 0x07
	s->y += s->vy*FRAME_TIME;
    86c0:	29 e8       	ldi	r18, 0x89	; 137
    86c2:	38 e8       	ldi	r19, 0x88	; 136
    86c4:	48 e8       	ldi	r20, 0x88	; 136
    86c6:	5c e3       	ldi	r21, 0x3C	; 60
    86c8:	68 81       	ld	r22, Y
    86ca:	79 81       	ldd	r23, Y+1	; 0x01
    86cc:	8a 81       	ldd	r24, Y+2	; 0x02
    86ce:	9b 81       	ldd	r25, Y+3	; 0x03
    86d0:	0e 94 52 4d 	call	0x9aa4	; 0x9aa4 <__mulsf3>
    86d4:	9b 01       	movw	r18, r22
    86d6:	ac 01       	movw	r20, r24
    86d8:	68 85       	ldd	r22, Y+8	; 0x08
    86da:	79 85       	ldd	r23, Y+9	; 0x09
    86dc:	8a 85       	ldd	r24, Y+10	; 0x0a
    86de:	9b 85       	ldd	r25, Y+11	; 0x0b
    86e0:	0e 94 08 4c 	call	0x9810	; 0x9810 <__addsf3>
    86e4:	68 87       	std	Y+8, r22	; 0x08
    86e6:	79 87       	std	Y+9, r23	; 0x09
    86e8:	8a 87       	std	Y+10, r24	; 0x0a
    86ea:	9b 87       	std	Y+11, r25	; 0x0b
	collision_detect_level(s, width, height);
    86ec:	40 2f       	mov	r20, r16
    86ee:	61 2f       	mov	r22, r17
    86f0:	ce 01       	movw	r24, r28
    86f2:	0e 94 f7 3d 	call	0x7bee	; 0x7bee <collision_detect_level>
	LBMoveSprite(slot, s->x - game.camera_x, s->y - game.camera_y, width, height);
    86f6:	e0 91 97 0d 	lds	r30, 0x0D97
    86fa:	f0 91 98 0d 	lds	r31, 0x0D98
    86fe:	bf 01       	movw	r22, r30
    8700:	80 e0       	ldi	r24, 0x00	; 0
    8702:	90 e0       	ldi	r25, 0x00	; 0
    8704:	0e 94 9c 4c 	call	0x9938	; 0x9938 <__floatunsisf>
    8708:	9b 01       	movw	r18, r22
    870a:	ac 01       	movw	r20, r24
    870c:	68 85       	ldd	r22, Y+8	; 0x08
    870e:	79 85       	ldd	r23, Y+9	; 0x09
    8710:	8a 85       	ldd	r24, Y+10	; 0x0a
    8712:	9b 85       	ldd	r25, Y+11	; 0x0b
    8714:	0e 94 07 4c 	call	0x980e	; 0x980e <__subsf3>
    8718:	0e 94 70 4c 	call	0x98e0	; 0x98e0 <__fixunssfsi>
    871c:	b6 2e       	mov	r11, r22
    871e:	e0 91 95 0d 	lds	r30, 0x0D95
    8722:	f0 91 96 0d 	lds	r31, 0x0D96
    8726:	bf 01       	movw	r22, r30
    8728:	80 e0       	ldi	r24, 0x00	; 0
    872a:	90 e0       	ldi	r25, 0x00	; 0
    872c:	0e 94 9c 4c 	call	0x9938	; 0x9938 <__floatunsisf>
    8730:	9b 01       	movw	r18, r22
    8732:	ac 01       	movw	r20, r24
    8734:	6c 81       	ldd	r22, Y+4	; 0x04
    8736:	7d 81       	ldd	r23, Y+5	; 0x05
    8738:	8e 81       	ldd	r24, Y+6	; 0x06
    873a:	9f 81       	ldd	r25, Y+7	; 0x07
    873c:	0e 94 07 4c 	call	0x980e	; 0x980e <__subsf3>
    8740:	0e 94 70 4c 	call	0x98e0	; 0x98e0 <__fixunssfsi>
    8744:	21 2f       	mov	r18, r17
    8746:	4b 2d       	mov	r20, r11
    8748:	8f 2d       	mov	r24, r15
    874a:	0e 94 4a 38 	call	0x7094	; 0x7094 <LBMoveSprite>
}
    874e:	df 91       	pop	r29
    8750:	cf 91       	pop	r28
    8752:	1f 91       	pop	r17
    8754:	0f 91       	pop	r16
    8756:	ff 90       	pop	r15
    8758:	bf 90       	pop	r11
    875a:	af 90       	pop	r10
    875c:	9f 90       	pop	r9
    875e:	8f 90       	pop	r8
    8760:	08 95       	ret

00008762 <animate_player>:

void animate_player()
{
    8762:	0f 93       	push	r16
    8764:	cf 93       	push	r28
	if (game.player.flags & EXPLODING)
    8766:	80 91 bb 0d 	lds	r24, 0x0DBB
    876a:	84 ff       	sbrs	r24, 4
    876c:	38 c0       	rjmp	.+112    	; 0x87de <animate_player+0x7c>
	{
		LBMoveSprite(PLAYER_SLOT, game.player.shared.x - game.camera_x, game.player.shared.y - game.camera_y, game.player.width, game.player.height);
    876e:	60 91 97 0d 	lds	r22, 0x0D97
    8772:	70 91 98 0d 	lds	r23, 0x0D98
    8776:	80 e0       	ldi	r24, 0x00	; 0
    8778:	90 e0       	ldi	r25, 0x00	; 0
    877a:	0e 94 9c 4c 	call	0x9938	; 0x9938 <__floatunsisf>
    877e:	9b 01       	movw	r18, r22
    8780:	ac 01       	movw	r20, r24
    8782:	60 91 b3 0d 	lds	r22, 0x0DB3
    8786:	70 91 b4 0d 	lds	r23, 0x0DB4
    878a:	80 91 b5 0d 	lds	r24, 0x0DB5
    878e:	90 91 b6 0d 	lds	r25, 0x0DB6
    8792:	0e 94 07 4c 	call	0x980e	; 0x980e <__subsf3>
    8796:	0e 94 70 4c 	call	0x98e0	; 0x98e0 <__fixunssfsi>
    879a:	c6 2f       	mov	r28, r22
    879c:	60 91 95 0d 	lds	r22, 0x0D95
    87a0:	70 91 96 0d 	lds	r23, 0x0D96
    87a4:	80 e0       	ldi	r24, 0x00	; 0
    87a6:	90 e0       	ldi	r25, 0x00	; 0
    87a8:	0e 94 9c 4c 	call	0x9938	; 0x9938 <__floatunsisf>
    87ac:	9b 01       	movw	r18, r22
    87ae:	ac 01       	movw	r20, r24
    87b0:	60 91 af 0d 	lds	r22, 0x0DAF
    87b4:	70 91 b0 0d 	lds	r23, 0x0DB0
    87b8:	80 91 b1 0d 	lds	r24, 0x0DB1
    87bc:	90 91 b2 0d 	lds	r25, 0x0DB2
    87c0:	0e 94 07 4c 	call	0x980e	; 0x980e <__subsf3>
    87c4:	0e 94 70 4c 	call	0x98e0	; 0x98e0 <__fixunssfsi>
    87c8:	00 91 bf 0d 	lds	r16, 0x0DBF
    87cc:	20 91 be 0d 	lds	r18, 0x0DBE
    87d0:	4c 2f       	mov	r20, r28
    87d2:	80 e0       	ldi	r24, 0x00	; 0
    87d4:	0e 94 4a 38 	call	0x7094	; 0x7094 <LBMoveSprite>
	}
	else animate_sprite(&game.player.shared, PLAYER_SLOT, game.player.width, game.player.height);
}
    87d8:	cf 91       	pop	r28
    87da:	0f 91       	pop	r16
    87dc:	08 95       	ret
{
	if (game.player.flags & EXPLODING)
	{
		LBMoveSprite(PLAYER_SLOT, game.player.shared.x - game.camera_x, game.player.shared.y - game.camera_y, game.player.width, game.player.height);
	}
	else animate_sprite(&game.player.shared, PLAYER_SLOT, game.player.width, game.player.height);
    87de:	20 91 bf 0d 	lds	r18, 0x0DBF
    87e2:	40 91 be 0d 	lds	r20, 0x0DBE
    87e6:	60 e0       	ldi	r22, 0x00	; 0
    87e8:	8b ea       	ldi	r24, 0xAB	; 171
    87ea:	9d e0       	ldi	r25, 0x0D	; 13
}
    87ec:	cf 91       	pop	r28
    87ee:	0f 91       	pop	r16
{
	if (game.player.flags & EXPLODING)
	{
		LBMoveSprite(PLAYER_SLOT, game.player.shared.x - game.camera_x, game.player.shared.y - game.camera_y, game.player.width, game.player.height);
	}
	else animate_sprite(&game.player.shared, PLAYER_SLOT, game.player.width, game.player.height);
    87f0:	0c 94 10 43 	jmp	0x8620	; 0x8620 <animate_sprite>

000087f4 <update_spider_enemy>:
}

void update_spider_enemy(Enemy* e, u8 slot)
{
    87f4:	1f 93       	push	r17
    87f6:	cf 93       	push	r28
    87f8:	df 93       	push	r29
    87fa:	ec 01       	movw	r28, r24
    87fc:	16 2f       	mov	r17, r22
	if (e->flags & IDLE && e->frame_count == SPIDER_IDLE_FRAMES)
    87fe:	98 89       	ldd	r25, Y+16	; 0x10
    8800:	89 2f       	mov	r24, r25
    8802:	88 70       	andi	r24, 0x08	; 8
    8804:	93 ff       	sbrs	r25, 3
    8806:	1e c0       	rjmp	.+60     	; 0x8844 <update_spider_enemy+0x50>
    8808:	2d 89       	ldd	r18, Y+21	; 0x15
    880a:	20 38       	cpi	r18, 0x80	; 128
    880c:	d9 f4       	brne	.+54     	; 0x8844 <update_spider_enemy+0x50>
	{
		e->flags = JUMPING;
    880e:	81 e0       	ldi	r24, 0x01	; 1
    8810:	88 8b       	std	Y+16, r24	; 0x10
		e->shared.vy = -SPIDER_JUMP_SPEED;
    8812:	80 e0       	ldi	r24, 0x00	; 0
    8814:	90 e0       	ldi	r25, 0x00	; 0
    8816:	a8 ec       	ldi	r26, 0xC8	; 200
    8818:	b2 ec       	ldi	r27, 0xC2	; 194
    881a:	88 83       	st	Y, r24
    881c:	99 83       	std	Y+1, r25	; 0x01
    881e:	aa 83       	std	Y+2, r26	; 0x02
    8820:	bb 83       	std	Y+3, r27	; 0x03
		e->shared.gravity = GRAVITY;
    8822:	8f ef       	ldi	r24, 0xFF	; 255
    8824:	8e 87       	std	Y+14, r24	; 0x0e
		e->shared.vx = SPIDER_SIDE_SPEED;
    8826:	8c e3       	ldi	r24, 0x3C	; 60
    8828:	90 e0       	ldi	r25, 0x00	; 0
    882a:	9d 87       	std	Y+13, r25	; 0x0d
    882c:	8c 87       	std	Y+12, r24	; 0x0c
		if (e->direction == D_LEFT)
    882e:	89 89       	ldd	r24, Y+17	; 0x11
    8830:	81 11       	cpse	r24, r1
    8832:	04 c0       	rjmp	.+8      	; 0x883c <update_spider_enemy+0x48>
		{
			e->shared.vx = -SPIDER_SIDE_SPEED;
    8834:	84 ec       	ldi	r24, 0xC4	; 196
    8836:	9f ef       	ldi	r25, 0xFF	; 255
    8838:	9d 87       	std	Y+13, r25	; 0x0d
    883a:	8c 87       	std	Y+12, r24	; 0x0c
		}
		LBMapSprite(slot, map_enemy_spider_1, 0);
    883c:	40 e0       	ldi	r20, 0x00	; 0
    883e:	6b e3       	ldi	r22, 0x3B	; 59
    8840:	7a e2       	ldi	r23, 0x2A	; 42
    8842:	1a c0       	rjmp	.+52     	; 0x8878 <update_spider_enemy+0x84>
	}
	else if (e->flags & JUMPING && e->shared.gravity == 0)
    8844:	90 ff       	sbrs	r25, 0
    8846:	10 c0       	rjmp	.+32     	; 0x8868 <update_spider_enemy+0x74>
    8848:	9e 85       	ldd	r25, Y+14	; 0x0e
    884a:	91 11       	cpse	r25, r1
    884c:	0d c0       	rjmp	.+26     	; 0x8868 <update_spider_enemy+0x74>
	{
		e->flags = IDLE;
    884e:	88 e0       	ldi	r24, 0x08	; 8
    8850:	88 8b       	std	Y+16, r24	; 0x10
		e->shared.vx = 0;
    8852:	1d 86       	std	Y+13, r1	; 0x0d
    8854:	1c 86       	std	Y+12, r1	; 0x0c
		e->frame_count = 0;
    8856:	1d 8a       	std	Y+21, r1	; 0x15
		if (e->direction == D_LEFT)
    8858:	89 89       	ldd	r24, Y+17	; 0x11
    885a:	81 11       	cpse	r24, r1
    885c:	03 c0       	rjmp	.+6      	; 0x8864 <update_spider_enemy+0x70>
		{
			e->direction = D_RIGHT;
    885e:	81 e0       	ldi	r24, 0x01	; 1
    8860:	89 8b       	std	Y+17, r24	; 0x11
    8862:	0d c0       	rjmp	.+26     	; 0x887e <update_spider_enemy+0x8a>
		}
		else
		{
			e->direction = D_LEFT;
    8864:	19 8a       	std	Y+17, r1	; 0x11
    8866:	0b c0       	rjmp	.+22     	; 0x887e <update_spider_enemy+0x8a>
		}
	}
	else if (e->flags & IDLE)
    8868:	88 23       	and	r24, r24
    886a:	49 f0       	breq	.+18     	; 0x887e <update_spider_enemy+0x8a>
	{
		LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    886c:	ce 01       	movw	r24, r28
    886e:	c2 96       	adiw	r24, 0x32	; 50
    8870:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <LBGetNextFrame>
    8874:	40 e0       	ldi	r20, 0x00	; 0
    8876:	bc 01       	movw	r22, r24
    8878:	81 2f       	mov	r24, r17
    887a:	0e 94 f8 37 	call	0x6ff0	; 0x6ff0 <LBMapSprite>
	}
	e->frame_count++;
    887e:	8d 89       	ldd	r24, Y+21	; 0x15
    8880:	8f 5f       	subi	r24, 0xFF	; 255
    8882:	8d 8b       	std	Y+21, r24	; 0x15
}
    8884:	df 91       	pop	r29
    8886:	cf 91       	pop	r28
    8888:	1f 91       	pop	r17
    888a:	08 95       	ret

0000888c <update_basic_shot>:

void update_basic_shot(Shot* s, u8 slot)
{
    888c:	cf 93       	push	r28
    888e:	c6 2f       	mov	r28, r22
	LBMapSprite(slot, LBGetNextFrame(&s->anim), 0);
    8890:	42 96       	adiw	r24, 0x12	; 18
    8892:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <LBGetNextFrame>
    8896:	40 e0       	ldi	r20, 0x00	; 0
    8898:	bc 01       	movw	r22, r24
    889a:	8c 2f       	mov	r24, r28
}
    889c:	cf 91       	pop	r28
	e->frame_count++;
}

void update_basic_shot(Shot* s, u8 slot)
{
	LBMapSprite(slot, LBGetNextFrame(&s->anim), 0);
    889e:	0c 94 f8 37 	jmp	0x6ff0	; 0x6ff0 <LBMapSprite>

000088a2 <update_enemies>:
}

void update_enemies()
{
    88a2:	ef 92       	push	r14
    88a4:	ff 92       	push	r15
    88a6:	0f 93       	push	r16
    88a8:	1f 93       	push	r17
    88aa:	cf 93       	push	r28
    88ac:	df 93       	push	r29
    88ae:	ca e4       	ldi	r28, 0x4A	; 74
    88b0:	de e0       	ldi	r29, 0x0E	; 14
	u8 slot = ENEMY_SLOT;
    88b2:	16 e0       	ldi	r17, 0x06	; 6
    88b4:	ce 01       	movw	r24, r28
    88b6:	03 97       	sbiw	r24, 0x03	; 3
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].flags & EXPLODING)
    88b8:	fc 01       	movw	r30, r24
    88ba:	20 81       	ld	r18, Z
    88bc:	ae 01       	movw	r20, r28
    88be:	41 50       	subi	r20, 0x01	; 1
    88c0:	51 09       	sbc	r21, r1
    88c2:	7a 01       	movw	r14, r20
    88c4:	24 ff       	sbrs	r18, 4
    88c6:	0a c0       	rjmp	.+20     	; 0x88dc <update_enemies+0x3a>
		{
			map_explosion(&game.enemies[i].flags, &game.enemies[i].expl, slot, game.enemies[i].width, game.enemies[i].height);
    88c8:	08 81       	ld	r16, Y
    88ca:	fa 01       	movw	r30, r20
    88cc:	20 81       	ld	r18, Z
    88ce:	41 2f       	mov	r20, r17
    88d0:	be 01       	movw	r22, r28
    88d2:	69 5d       	subi	r22, 0xD9	; 217
    88d4:	7f 4f       	sbci	r23, 0xFF	; 255
    88d6:	0e 94 c5 42 	call	0x858a	; 0x858a <map_explosion>
    88da:	0d c0       	rjmp	.+26     	; 0x88f6 <update_enemies+0x54>
    88dc:	fe 01       	movw	r30, r28
    88de:	34 97       	sbiw	r30, 0x04	; 4
		}
		else if (game.enemies[i].active)
    88e0:	80 81       	ld	r24, Z
    88e2:	88 23       	and	r24, r24
    88e4:	41 f0       	breq	.+16     	; 0x88f6 <update_enemies+0x54>
		{
			switch (game.enemies[i].enemy_type)
    88e6:	89 81       	ldd	r24, Y+1	; 0x01
    88e8:	81 11       	cpse	r24, r1
    88ea:	05 c0       	rjmp	.+10     	; 0x88f6 <update_enemies+0x54>
			{
				case ENEMY_SPIDER: update_spider_enemy(&game.enemies[i], slot); break;
    88ec:	61 2f       	mov	r22, r17
    88ee:	ce 01       	movw	r24, r28
    88f0:	43 97       	sbiw	r24, 0x13	; 19
    88f2:	0e 94 fa 43 	call	0x87f4	; 0x87f4 <update_spider_enemy>
			}
		}
		slot += game.enemies[i].width * game.enemies[i].height;
    88f6:	f7 01       	movw	r30, r14
    88f8:	90 81       	ld	r25, Z
    88fa:	88 81       	ld	r24, Y
    88fc:	98 9f       	mul	r25, r24
    88fe:	10 0d       	add	r17, r0
    8900:	11 24       	eor	r1, r1
    8902:	ce 5b       	subi	r28, 0xBE	; 190
    8904:	df 4f       	sbci	r29, 0xFF	; 255

void update_enemies()
{
	u8 slot = ENEMY_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    8906:	ff e0       	ldi	r31, 0x0F	; 15
    8908:	c4 39       	cpi	r28, 0x94	; 148
    890a:	df 07       	cpc	r29, r31
    890c:	99 f6       	brne	.-90     	; 0x88b4 <update_enemies+0x12>
				case ENEMY_SPIDER: update_spider_enemy(&game.enemies[i], slot); break;
			}
		}
		slot += game.enemies[i].width * game.enemies[i].height;
	}
}
    890e:	df 91       	pop	r29
    8910:	cf 91       	pop	r28
    8912:	1f 91       	pop	r17
    8914:	0f 91       	pop	r16
    8916:	ff 90       	pop	r15
    8918:	ef 90       	pop	r14
    891a:	08 95       	ret

0000891c <update_enemy_shots>:

void update_enemy_shots()
{
    891c:	8f 92       	push	r8
    891e:	9f 92       	push	r9
    8920:	af 92       	push	r10
    8922:	bf 92       	push	r11
    8924:	cf 92       	push	r12
    8926:	df 92       	push	r13
    8928:	ef 92       	push	r14
    892a:	ff 92       	push	r15
    892c:	0f 93       	push	r16
    892e:	1f 93       	push	r17
    8930:	cf 93       	push	r28
    8932:	df 93       	push	r29
    8934:	00 d0       	rcall	.+0      	; 0x8936 <update_enemy_shots+0x1a>
    8936:	00 d0       	rcall	.+0      	; 0x8938 <update_enemy_shots+0x1c>
    8938:	cd b7       	in	r28, 0x3d	; 61
    893a:	de b7       	in	r29, 0x3e	; 62
    893c:	2d e4       	ldi	r18, 0x4D	; 77
    893e:	82 2e       	mov	r8, r18
    8940:	2e e0       	ldi	r18, 0x0E	; 14
    8942:	92 2e       	mov	r9, r18
    8944:	00 e6       	ldi	r16, 0x60	; 96
    8946:	1e e0       	ldi	r17, 0x0E	; 14
    8948:	3f e0       	ldi	r19, 0x0F	; 15
    894a:	b3 2e       	mov	r11, r19
					if (!game.enemies[i].shot[j].active)
					{
						game.enemies[i].shot[j].active = 1;
						game.enemies[i].shot[j].shared.x = game.enemies[i].shared.x;
						game.enemies[i].shot[j].shared.y = ((u16 ) game.enemies[i].shared.y / 8) * 8;
						game.enemies[i].shot[j].shared.vx = ENEMY_SHOT_SPEED;
    894c:	44 e6       	ldi	r20, 0x64	; 100
    894e:	e4 2e       	mov	r14, r20
    8950:	f1 2c       	mov	r15, r1
						if (game.player.shared.x <= game.enemies[i].shared.x)
						{
							game.enemies[i].shot[j].shared.vx = -ENEMY_SHOT_SPEED;
    8952:	5c e9       	ldi	r21, 0x9C	; 156
    8954:	c5 2e       	mov	r12, r21
    8956:	dd 24       	eor	r13, r13
    8958:	da 94       	dec	r13
    895a:	aa 24       	eor	r10, r10
    895c:	aa 94       	dec	r10
    895e:	ab 0c       	add	r10, r11
    8960:	f4 01       	movw	r30, r8
    8962:	37 97       	sbiw	r30, 0x07	; 7
{
	u8 slot = ENEMY_SHOT_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].active && game.enemies[i].shot_frame_count >= ENEMY_SHOT_DELAY_FRAMES)
    8964:	80 81       	ld	r24, Z
    8966:	88 23       	and	r24, r24
    8968:	09 f4       	brne	.+2      	; 0x896c <update_enemy_shots+0x50>
    896a:	58 c0       	rjmp	.+176    	; 0x8a1c <update_enemy_shots+0x100>
    896c:	f4 01       	movw	r30, r8
    896e:	80 81       	ld	r24, Z
    8970:	8c 33       	cpi	r24, 0x3C	; 60
    8972:	08 f4       	brcc	.+2      	; 0x8976 <update_enemy_shots+0x5a>
    8974:	50 c0       	rjmp	.+160    	; 0x8a16 <update_enemy_shots+0xfa>
		{
			game.enemies[i].shot_frame_count = 0;	
    8976:	10 82       	st	Z, r1
    8978:	f8 01       	movw	r30, r16
    897a:	32 97       	sbiw	r30, 0x02	; 2
			for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
			{
				if (game.enemies[i].shot[j].shot_type == BASIC_ENEMY_SHOT)
    897c:	80 81       	ld	r24, Z
    897e:	81 30       	cpi	r24, 0x01	; 1
    8980:	09 f0       	breq	.+2      	; 0x8984 <update_enemy_shots+0x68>
    8982:	4c c0       	rjmp	.+152    	; 0x8a1c <update_enemy_shots+0x100>
				{
					if (!game.enemies[i].shot[j].active)
    8984:	f8 01       	movw	r30, r16
    8986:	90 81       	ld	r25, Z
    8988:	91 11       	cpse	r25, r1
    898a:	3f c0       	rjmp	.+126    	; 0x8a0a <update_enemy_shots+0xee>
					{
						game.enemies[i].shot[j].active = 1;
    898c:	80 83       	st	Z, r24
    898e:	f4 01       	movw	r30, r8
    8990:	72 97       	sbiw	r30, 0x12	; 18
						game.enemies[i].shot[j].shared.x = game.enemies[i].shared.x;
    8992:	20 81       	ld	r18, Z
    8994:	31 81       	ldd	r19, Z+1	; 0x01
    8996:	42 81       	ldd	r20, Z+2	; 0x02
    8998:	53 81       	ldd	r21, Z+3	; 0x03
    899a:	f4 01       	movw	r30, r8
    899c:	26 83       	std	Z+6, r18	; 0x06
    899e:	37 83       	std	Z+7, r19	; 0x07
    89a0:	40 87       	std	Z+8, r20	; 0x08
    89a2:	51 87       	std	Z+9, r21	; 0x09
    89a4:	3e 97       	sbiw	r30, 0x0e	; 14
						game.enemies[i].shot[j].shared.y = ((u16 ) game.enemies[i].shared.y / 8) * 8;
    89a6:	60 81       	ld	r22, Z
    89a8:	71 81       	ldd	r23, Z+1	; 0x01
    89aa:	82 81       	ldd	r24, Z+2	; 0x02
    89ac:	93 81       	ldd	r25, Z+3	; 0x03
    89ae:	29 83       	std	Y+1, r18	; 0x01
    89b0:	3a 83       	std	Y+2, r19	; 0x02
    89b2:	4b 83       	std	Y+3, r20	; 0x03
    89b4:	5c 83       	std	Y+4, r21	; 0x04
    89b6:	0e 94 70 4c 	call	0x98e0	; 0x98e0 <__fixunssfsi>
    89ba:	83 e0       	ldi	r24, 0x03	; 3
    89bc:	76 95       	lsr	r23
    89be:	67 95       	ror	r22
    89c0:	8a 95       	dec	r24
    89c2:	e1 f7       	brne	.-8      	; 0x89bc <update_enemy_shots+0xa0>
    89c4:	93 e0       	ldi	r25, 0x03	; 3
    89c6:	66 0f       	add	r22, r22
    89c8:	77 1f       	adc	r23, r23
    89ca:	9a 95       	dec	r25
    89cc:	e1 f7       	brne	.-8      	; 0x89c6 <update_enemy_shots+0xaa>
    89ce:	80 e0       	ldi	r24, 0x00	; 0
    89d0:	90 e0       	ldi	r25, 0x00	; 0
    89d2:	0e 94 9c 4c 	call	0x9938	; 0x9938 <__floatunsisf>
    89d6:	f4 01       	movw	r30, r8
    89d8:	62 87       	std	Z+10, r22	; 0x0a
    89da:	73 87       	std	Z+11, r23	; 0x0b
    89dc:	84 87       	std	Z+12, r24	; 0x0c
    89de:	95 87       	std	Z+13, r25	; 0x0d
						game.enemies[i].shot[j].shared.vx = ENEMY_SHOT_SPEED;
    89e0:	f7 86       	std	Z+15, r15	; 0x0f
    89e2:	e6 86       	std	Z+14, r14	; 0x0e
						if (game.player.shared.x <= game.enemies[i].shared.x)
    89e4:	29 81       	ldd	r18, Y+1	; 0x01
    89e6:	3a 81       	ldd	r19, Y+2	; 0x02
    89e8:	4b 81       	ldd	r20, Y+3	; 0x03
    89ea:	5c 81       	ldd	r21, Y+4	; 0x04
    89ec:	60 91 af 0d 	lds	r22, 0x0DAF
    89f0:	70 91 b0 0d 	lds	r23, 0x0DB0
    89f4:	80 91 b1 0d 	lds	r24, 0x0DB1
    89f8:	90 91 b2 0d 	lds	r25, 0x0DB2
    89fc:	0e 94 6c 4c 	call	0x98d8	; 0x98d8 <__cmpsf2>
    8a00:	18 16       	cp	r1, r24
    8a02:	1c f0       	brlt	.+6      	; 0x8a0a <update_enemy_shots+0xee>
						{
							game.enemies[i].shot[j].shared.vx = -ENEMY_SHOT_SPEED;
    8a04:	f4 01       	movw	r30, r8
    8a06:	d7 86       	std	Z+15, r13	; 0x0f
    8a08:	c6 86       	std	Z+14, r12	; 0x0e
						}
					}
					update_basic_shot(&game.enemies[i].shot[j], slot);
    8a0a:	6a 2d       	mov	r22, r10
    8a0c:	c4 01       	movw	r24, r8
    8a0e:	02 96       	adiw	r24, 0x02	; 2
    8a10:	0e 94 46 44 	call	0x888c	; 0x888c <update_basic_shot>
    8a14:	03 c0       	rjmp	.+6      	; 0x8a1c <update_enemy_shots+0x100>
				slot += 1;
			}
		}
		else if (game.enemies[i].active)
		{
			game.enemies[i].shot_frame_count++;
    8a16:	8f 5f       	subi	r24, 0xFF	; 255
    8a18:	f4 01       	movw	r30, r8
    8a1a:	80 83       	st	Z, r24
    8a1c:	b3 94       	inc	r11
    8a1e:	f2 e4       	ldi	r31, 0x42	; 66
    8a20:	8f 0e       	add	r8, r31
    8a22:	91 1c       	adc	r9, r1
    8a24:	0e 5b       	subi	r16, 0xBE	; 190
    8a26:	1f 4f       	sbci	r17, 0xFF	; 255

void update_enemy_shots()
{
	u8 slot = ENEMY_SHOT_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    8a28:	84 e1       	ldi	r24, 0x14	; 20
    8a2a:	b8 12       	cpse	r11, r24
    8a2c:	96 cf       	rjmp	.-212    	; 0x895a <update_enemy_shots+0x3e>
		else
		{
			slot += MAX_ENEMY_SHOTS;
		}
	}
}
    8a2e:	0f 90       	pop	r0
    8a30:	0f 90       	pop	r0
    8a32:	0f 90       	pop	r0
    8a34:	0f 90       	pop	r0
    8a36:	df 91       	pop	r29
    8a38:	cf 91       	pop	r28
    8a3a:	1f 91       	pop	r17
    8a3c:	0f 91       	pop	r16
    8a3e:	ff 90       	pop	r15
    8a40:	ef 90       	pop	r14
    8a42:	df 90       	pop	r13
    8a44:	cf 90       	pop	r12
    8a46:	bf 90       	pop	r11
    8a48:	af 90       	pop	r10
    8a4a:	9f 90       	pop	r9
    8a4c:	8f 90       	pop	r8
    8a4e:	08 95       	ret

00008a50 <animate_enemies>:

void animate_enemies()
{
    8a50:	2f 92       	push	r2
    8a52:	3f 92       	push	r3
    8a54:	4f 92       	push	r4
    8a56:	5f 92       	push	r5
    8a58:	6f 92       	push	r6
    8a5a:	7f 92       	push	r7
    8a5c:	8f 92       	push	r8
    8a5e:	9f 92       	push	r9
    8a60:	af 92       	push	r10
    8a62:	bf 92       	push	r11
    8a64:	cf 92       	push	r12
    8a66:	df 92       	push	r13
    8a68:	ef 92       	push	r14
    8a6a:	ff 92       	push	r15
    8a6c:	0f 93       	push	r16
    8a6e:	1f 93       	push	r17
    8a70:	cf 93       	push	r28
    8a72:	df 93       	push	r29
    8a74:	cd b7       	in	r28, 0x3d	; 61
    8a76:	de b7       	in	r29, 0x3e	; 62
    8a78:	2c 97       	sbiw	r28, 0x0c	; 12
    8a7a:	0f b6       	in	r0, 0x3f	; 63
    8a7c:	f8 94       	cli
    8a7e:	de bf       	out	0x3e, r29	; 62
    8a80:	0f be       	out	0x3f, r0	; 63
    8a82:	cd bf       	out	0x3d, r28	; 61
    8a84:	49 e4       	ldi	r20, 0x49	; 73
    8a86:	24 2e       	mov	r2, r20
    8a88:	4e e0       	ldi	r20, 0x0E	; 14
    8a8a:	34 2e       	mov	r3, r20
    8a8c:	8a e4       	ldi	r24, 0x4A	; 74
    8a8e:	9e e0       	ldi	r25, 0x0E	; 14
    8a90:	9c 87       	std	Y+12, r25	; 0x0c
    8a92:	8b 87       	std	Y+11, r24	; 0x0b
    8a94:	57 e3       	ldi	r21, 0x37	; 55
    8a96:	85 2e       	mov	r8, r21
    8a98:	5e e0       	ldi	r21, 0x0E	; 14
    8a9a:	95 2e       	mov	r9, r21
	u8 slot = ENEMY_SLOT;
    8a9c:	66 e0       	ldi	r22, 0x06	; 6
    8a9e:	b6 2e       	mov	r11, r22
    8aa0:	eb 85       	ldd	r30, Y+11	; 0x0b
    8aa2:	fc 85       	ldd	r31, Y+12	; 0x0c
    8aa4:	34 97       	sbiw	r30, 0x04	; 4
    8aa6:	fa 83       	std	Y+2, r31	; 0x02
    8aa8:	e9 83       	std	Y+1, r30	; 0x01
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].active && !(game.enemies[i].flags & EXPLODING))
    8aaa:	80 81       	ld	r24, Z
    8aac:	eb 85       	ldd	r30, Y+11	; 0x0b
    8aae:	fc 85       	ldd	r31, Y+12	; 0x0c
    8ab0:	33 97       	sbiw	r30, 0x03	; 3
    8ab2:	88 23       	and	r24, r24
    8ab4:	09 f4       	brne	.+2      	; 0x8ab8 <animate_enemies+0x68>
    8ab6:	a9 c0       	rjmp	.+338    	; 0x8c0a <animate_enemies+0x1ba>
    8ab8:	80 81       	ld	r24, Z
    8aba:	84 fd       	sbrc	r24, 4
    8abc:	a6 c0       	rjmp	.+332    	; 0x8c0a <animate_enemies+0x1ba>
		{
			if (game.enemies[i].shared.x < game.camera_x || game.enemies[i].shared.y < game.camera_y || game.enemies[i].shared.y > game.camera_y + CAMERA_HEIGHT*8)
    8abe:	f4 01       	movw	r30, r8
    8ac0:	44 80       	ldd	r4, Z+4	; 0x04
    8ac2:	55 80       	ldd	r5, Z+5	; 0x05
    8ac4:	66 80       	ldd	r6, Z+6	; 0x06
    8ac6:	77 80       	ldd	r7, Z+7	; 0x07
    8ac8:	60 91 95 0d 	lds	r22, 0x0D95
    8acc:	70 91 96 0d 	lds	r23, 0x0D96
    8ad0:	80 e0       	ldi	r24, 0x00	; 0
    8ad2:	90 e0       	ldi	r25, 0x00	; 0
    8ad4:	0e 94 9c 4c 	call	0x9938	; 0x9938 <__floatunsisf>
    8ad8:	9b 01       	movw	r18, r22
    8ada:	ac 01       	movw	r20, r24
    8adc:	c3 01       	movw	r24, r6
    8ade:	b2 01       	movw	r22, r4
    8ae0:	0e 94 6c 4c 	call	0x98d8	; 0x98d8 <__cmpsf2>
    8ae4:	87 fd       	sbrc	r24, 7
    8ae6:	25 c0       	rjmp	.+74     	; 0x8b32 <animate_enemies+0xe2>
    8ae8:	f4 01       	movw	r30, r8
    8aea:	c0 84       	ldd	r12, Z+8	; 0x08
    8aec:	d1 84       	ldd	r13, Z+9	; 0x09
    8aee:	e2 84       	ldd	r14, Z+10	; 0x0a
    8af0:	f3 84       	ldd	r15, Z+11	; 0x0b
    8af2:	00 91 97 0d 	lds	r16, 0x0D97
    8af6:	10 91 98 0d 	lds	r17, 0x0D98
    8afa:	b8 01       	movw	r22, r16
    8afc:	80 e0       	ldi	r24, 0x00	; 0
    8afe:	90 e0       	ldi	r25, 0x00	; 0
    8b00:	0e 94 9c 4c 	call	0x9938	; 0x9938 <__floatunsisf>
    8b04:	9b 01       	movw	r18, r22
    8b06:	ac 01       	movw	r20, r24
    8b08:	c7 01       	movw	r24, r14
    8b0a:	b6 01       	movw	r22, r12
    8b0c:	0e 94 6c 4c 	call	0x98d8	; 0x98d8 <__cmpsf2>
    8b10:	87 fd       	sbrc	r24, 7
    8b12:	0f c0       	rjmp	.+30     	; 0x8b32 <animate_enemies+0xe2>
    8b14:	b8 01       	movw	r22, r16
    8b16:	60 53       	subi	r22, 0x30	; 48
    8b18:	7f 4f       	sbci	r23, 0xFF	; 255
    8b1a:	80 e0       	ldi	r24, 0x00	; 0
    8b1c:	90 e0       	ldi	r25, 0x00	; 0
    8b1e:	0e 94 9c 4c 	call	0x9938	; 0x9938 <__floatunsisf>
    8b22:	9b 01       	movw	r18, r22
    8b24:	ac 01       	movw	r20, r24
    8b26:	c7 01       	movw	r24, r14
    8b28:	b6 01       	movw	r22, r12
    8b2a:	0e 94 4e 4d 	call	0x9a9c	; 0x9a9c <__gesf2>
    8b2e:	18 16       	cp	r1, r24
    8b30:	84 f4       	brge	.+32     	; 0x8b52 <animate_enemies+0x102>
			{
				game.enemies[i].active = 0;
    8b32:	e9 81       	ldd	r30, Y+1	; 0x01
    8b34:	fa 81       	ldd	r31, Y+2	; 0x02
    8b36:	10 82       	st	Z, r1
				game.active_enemies--;
    8b38:	80 91 a9 0d 	lds	r24, 0x0DA9
    8b3c:	81 50       	subi	r24, 0x01	; 1
    8b3e:	80 93 a9 0d 	sts	0x0DA9, r24
				LBMoveSprite(slot, OFF_SCREEN, 0, game.enemies[i].width, game.enemies[i].height);
    8b42:	eb 85       	ldd	r30, Y+11	; 0x0b
    8b44:	fc 85       	ldd	r31, Y+12	; 0x0c
    8b46:	00 81       	ld	r16, Z
    8b48:	f1 01       	movw	r30, r2
    8b4a:	20 81       	ld	r18, Z
    8b4c:	40 e0       	ldi	r20, 0x00	; 0
    8b4e:	60 ee       	ldi	r22, 0xE0	; 224
    8b50:	8c c0       	rjmp	.+280    	; 0x8c6a <animate_enemies+0x21a>
			}
			else if (LBCollides(game.player.shared.x,game.player.shared.y, game.player.width*8, game.player.height*8,
    8b52:	c7 01       	movw	r24, r14
    8b54:	b6 01       	movw	r22, r12
    8b56:	0e 94 70 4c 	call	0x98e0	; 0x98e0 <__fixunssfsi>
    8b5a:	69 83       	std	Y+1, r22	; 0x01
    8b5c:	7a 83       	std	Y+2, r23	; 0x02
    8b5e:	8b 83       	std	Y+3, r24	; 0x03
    8b60:	9c 83       	std	Y+4, r25	; 0x04
    8b62:	c3 01       	movw	r24, r6
    8b64:	b2 01       	movw	r22, r4
    8b66:	0e 94 70 4c 	call	0x98e0	; 0x98e0 <__fixunssfsi>
    8b6a:	6d 83       	std	Y+5, r22	; 0x05
    8b6c:	7e 83       	std	Y+6, r23	; 0x06
    8b6e:	8f 83       	std	Y+7, r24	; 0x07
    8b70:	98 87       	std	Y+8, r25	; 0x08
    8b72:	20 91 bf 0d 	lds	r18, 0x0DBF
    8b76:	22 0f       	add	r18, r18
    8b78:	22 0f       	add	r18, r18
    8b7a:	22 0f       	add	r18, r18
    8b7c:	40 91 be 0d 	lds	r20, 0x0DBE
    8b80:	44 0f       	add	r20, r20
    8b82:	44 0f       	add	r20, r20
    8b84:	44 0f       	add	r20, r20
    8b86:	60 91 b3 0d 	lds	r22, 0x0DB3
    8b8a:	70 91 b4 0d 	lds	r23, 0x0DB4
    8b8e:	80 91 b5 0d 	lds	r24, 0x0DB5
    8b92:	90 91 b6 0d 	lds	r25, 0x0DB6
    8b96:	29 87       	std	Y+9, r18	; 0x09
    8b98:	4a 87       	std	Y+10, r20	; 0x0a
    8b9a:	0e 94 70 4c 	call	0x98e0	; 0x98e0 <__fixunssfsi>
    8b9e:	2b 01       	movw	r4, r22
    8ba0:	3c 01       	movw	r6, r24
    8ba2:	60 91 af 0d 	lds	r22, 0x0DAF
    8ba6:	70 91 b0 0d 	lds	r23, 0x0DB0
    8baa:	80 91 b1 0d 	lds	r24, 0x0DB1
    8bae:	90 91 b2 0d 	lds	r25, 0x0DB2
    8bb2:	0e 94 70 4c 	call	0x98e0	; 0x98e0 <__fixunssfsi>
    8bb6:	dc 01       	movw	r26, r24
    8bb8:	cb 01       	movw	r24, r22
    8bba:	28 e0       	ldi	r18, 0x08	; 8
    8bbc:	a2 2e       	mov	r10, r18
    8bbe:	38 e0       	ldi	r19, 0x08	; 8
    8bc0:	c3 2e       	mov	r12, r19
    8bc2:	e9 80       	ldd	r14, Y+1	; 0x01
    8bc4:	fa 80       	ldd	r15, Y+2	; 0x02
    8bc6:	0d 81       	ldd	r16, Y+5	; 0x05
    8bc8:	1e 81       	ldd	r17, Y+6	; 0x06
    8bca:	29 85       	ldd	r18, Y+9	; 0x09
    8bcc:	4a 85       	ldd	r20, Y+10	; 0x0a
    8bce:	b2 01       	movw	r22, r4
    8bd0:	0e 94 c3 37 	call	0x6f86	; 0x6f86 <LBCollides>
    8bd4:	88 23       	and	r24, r24
    8bd6:	79 f0       	breq	.+30     	; 0x8bf6 <animate_enemies+0x1a6>
							game.enemies[i].shared.x, game.enemies[i].shared.y, 8, 8
						) && !(game.player.flags & EXPLODING)
    8bd8:	80 91 bb 0d 	lds	r24, 0x0DBB
    8bdc:	84 fd       	sbrc	r24, 4
    8bde:	0b c0       	rjmp	.+22     	; 0x8bf6 <animate_enemies+0x1a6>
			)
			{
				SFX_PLAYER_EXPLODE;
    8be0:	41 e0       	ldi	r20, 0x01	; 1
    8be2:	6f ef       	ldi	r22, 0xFF	; 255
    8be4:	85 e0       	ldi	r24, 0x05	; 5
    8be6:	0e 94 60 2b 	call	0x56c0	; 0x56c0 <TriggerFx>
				game.player.shield = 0;
    8bea:	10 92 c0 0d 	sts	0x0DC0, r1
				game.player.flags = EXPLODING;
    8bee:	80 e1       	ldi	r24, 0x10	; 16
    8bf0:	80 93 bb 0d 	sts	0x0DBB, r24
				return;
    8bf4:	57 c0       	rjmp	.+174    	; 0x8ca4 <animate_enemies+0x254>
			}
			else
			{
				animate_sprite(&game.enemies[i].shared, slot, game.enemies[i].width, game.enemies[i].height);
    8bf6:	eb 85       	ldd	r30, Y+11	; 0x0b
    8bf8:	fc 85       	ldd	r31, Y+12	; 0x0c
    8bfa:	20 81       	ld	r18, Z
    8bfc:	f1 01       	movw	r30, r2
    8bfe:	40 81       	ld	r20, Z
    8c00:	6b 2d       	mov	r22, r11
    8c02:	c4 01       	movw	r24, r8
    8c04:	0e 94 10 43 	call	0x8620	; 0x8620 <animate_sprite>
    8c08:	33 c0       	rjmp	.+102    	; 0x8c70 <animate_enemies+0x220>
			}
		}
		else if (game.enemies[i].flags & EXPLODING)
    8c0a:	80 81       	ld	r24, Z
    8c0c:	84 ff       	sbrs	r24, 4
    8c0e:	30 c0       	rjmp	.+96     	; 0x8c70 <animate_enemies+0x220>
		{
			LBMoveSprite(slot, game.enemies[i].shared.x - game.camera_x, game.enemies[i].shared.y - game.camera_y, game.enemies[i].width, game.enemies[i].height);
    8c10:	60 91 97 0d 	lds	r22, 0x0D97
    8c14:	70 91 98 0d 	lds	r23, 0x0D98
    8c18:	80 e0       	ldi	r24, 0x00	; 0
    8c1a:	90 e0       	ldi	r25, 0x00	; 0
    8c1c:	0e 94 9c 4c 	call	0x9938	; 0x9938 <__floatunsisf>
    8c20:	9b 01       	movw	r18, r22
    8c22:	ac 01       	movw	r20, r24
    8c24:	f4 01       	movw	r30, r8
    8c26:	60 85       	ldd	r22, Z+8	; 0x08
    8c28:	71 85       	ldd	r23, Z+9	; 0x09
    8c2a:	82 85       	ldd	r24, Z+10	; 0x0a
    8c2c:	93 85       	ldd	r25, Z+11	; 0x0b
    8c2e:	0e 94 07 4c 	call	0x980e	; 0x980e <__subsf3>
    8c32:	0e 94 70 4c 	call	0x98e0	; 0x98e0 <__fixunssfsi>
    8c36:	16 2f       	mov	r17, r22
    8c38:	60 91 95 0d 	lds	r22, 0x0D95
    8c3c:	70 91 96 0d 	lds	r23, 0x0D96
    8c40:	80 e0       	ldi	r24, 0x00	; 0
    8c42:	90 e0       	ldi	r25, 0x00	; 0
    8c44:	0e 94 9c 4c 	call	0x9938	; 0x9938 <__floatunsisf>
    8c48:	9b 01       	movw	r18, r22
    8c4a:	ac 01       	movw	r20, r24
    8c4c:	f4 01       	movw	r30, r8
    8c4e:	64 81       	ldd	r22, Z+4	; 0x04
    8c50:	75 81       	ldd	r23, Z+5	; 0x05
    8c52:	86 81       	ldd	r24, Z+6	; 0x06
    8c54:	97 81       	ldd	r25, Z+7	; 0x07
    8c56:	0e 94 07 4c 	call	0x980e	; 0x980e <__subsf3>
    8c5a:	0e 94 70 4c 	call	0x98e0	; 0x98e0 <__fixunssfsi>
    8c5e:	eb 85       	ldd	r30, Y+11	; 0x0b
    8c60:	fc 85       	ldd	r31, Y+12	; 0x0c
    8c62:	00 81       	ld	r16, Z
    8c64:	f1 01       	movw	r30, r2
    8c66:	20 81       	ld	r18, Z
    8c68:	41 2f       	mov	r20, r17
    8c6a:	8b 2d       	mov	r24, r11
    8c6c:	0e 94 4a 38 	call	0x7094	; 0x7094 <LBMoveSprite>
		}
		slot +=  game.enemies[i].width * game.enemies[i].height;
    8c70:	eb 85       	ldd	r30, Y+11	; 0x0b
    8c72:	fc 85       	ldd	r31, Y+12	; 0x0c
    8c74:	90 81       	ld	r25, Z
    8c76:	f1 01       	movw	r30, r2
    8c78:	80 81       	ld	r24, Z
    8c7a:	98 9f       	mul	r25, r24
    8c7c:	b0 0c       	add	r11, r0
    8c7e:	11 24       	eor	r1, r1
    8c80:	f2 e4       	ldi	r31, 0x42	; 66
    8c82:	2f 0e       	add	r2, r31
    8c84:	31 1c       	adc	r3, r1
    8c86:	8b 85       	ldd	r24, Y+11	; 0x0b
    8c88:	9c 85       	ldd	r25, Y+12	; 0x0c
    8c8a:	8e 5b       	subi	r24, 0xBE	; 190
    8c8c:	9f 4f       	sbci	r25, 0xFF	; 255
    8c8e:	9c 87       	std	Y+12, r25	; 0x0c
    8c90:	8b 87       	std	Y+11, r24	; 0x0b
    8c92:	92 e4       	ldi	r25, 0x42	; 66
    8c94:	89 0e       	add	r8, r25
    8c96:	91 1c       	adc	r9, r1

void animate_enemies()
{
	u8 slot = ENEMY_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    8c98:	eb 85       	ldd	r30, Y+11	; 0x0b
    8c9a:	fc 85       	ldd	r31, Y+12	; 0x0c
    8c9c:	e4 59       	subi	r30, 0x94	; 148
    8c9e:	ff 40       	sbci	r31, 0x0F	; 15
    8ca0:	09 f0       	breq	.+2      	; 0x8ca4 <animate_enemies+0x254>
    8ca2:	fe ce       	rjmp	.-516    	; 0x8aa0 <animate_enemies+0x50>
		{
			LBMoveSprite(slot, game.enemies[i].shared.x - game.camera_x, game.enemies[i].shared.y - game.camera_y, game.enemies[i].width, game.enemies[i].height);
		}
		slot +=  game.enemies[i].width * game.enemies[i].height;
	}
}
    8ca4:	2c 96       	adiw	r28, 0x0c	; 12
    8ca6:	0f b6       	in	r0, 0x3f	; 63
    8ca8:	f8 94       	cli
    8caa:	de bf       	out	0x3e, r29	; 62
    8cac:	0f be       	out	0x3f, r0	; 63
    8cae:	cd bf       	out	0x3d, r28	; 61
    8cb0:	df 91       	pop	r29
    8cb2:	cf 91       	pop	r28
    8cb4:	1f 91       	pop	r17
    8cb6:	0f 91       	pop	r16
    8cb8:	ff 90       	pop	r15
    8cba:	ef 90       	pop	r14
    8cbc:	df 90       	pop	r13
    8cbe:	cf 90       	pop	r12
    8cc0:	bf 90       	pop	r11
    8cc2:	af 90       	pop	r10
    8cc4:	9f 90       	pop	r9
    8cc6:	8f 90       	pop	r8
    8cc8:	7f 90       	pop	r7
    8cca:	6f 90       	pop	r6
    8ccc:	5f 90       	pop	r5
    8cce:	4f 90       	pop	r4
    8cd0:	3f 90       	pop	r3
    8cd2:	2f 90       	pop	r2
    8cd4:	08 95       	ret

00008cd6 <animate_enemy_shots>:

void animate_enemy_shots()
{
    8cd6:	2f 92       	push	r2
    8cd8:	3f 92       	push	r3
    8cda:	4f 92       	push	r4
    8cdc:	5f 92       	push	r5
    8cde:	6f 92       	push	r6
    8ce0:	7f 92       	push	r7
    8ce2:	8f 92       	push	r8
    8ce4:	9f 92       	push	r9
    8ce6:	af 92       	push	r10
    8ce8:	bf 92       	push	r11
    8cea:	cf 92       	push	r12
    8cec:	df 92       	push	r13
    8cee:	ef 92       	push	r14
    8cf0:	ff 92       	push	r15
    8cf2:	0f 93       	push	r16
    8cf4:	1f 93       	push	r17
    8cf6:	cf 93       	push	r28
    8cf8:	df 93       	push	r29
    8cfa:	cd b7       	in	r28, 0x3d	; 61
    8cfc:	de b7       	in	r29, 0x3e	; 62
    8cfe:	62 97       	sbiw	r28, 0x12	; 18
    8d00:	0f b6       	in	r0, 0x3f	; 63
    8d02:	f8 94       	cli
    8d04:	de bf       	out	0x3e, r29	; 62
    8d06:	0f be       	out	0x3f, r0	; 63
    8d08:	cd bf       	out	0x3d, r28	; 61
    8d0a:	40 e6       	ldi	r20, 0x60	; 96
    8d0c:	24 2e       	mov	r2, r20
    8d0e:	4e e0       	ldi	r20, 0x0E	; 14
    8d10:	34 2e       	mov	r3, r20
    8d12:	5f e4       	ldi	r21, 0x4F	; 79
    8d14:	85 2e       	mov	r8, r21
    8d16:	5e e0       	ldi	r21, 0x0E	; 14
    8d18:	95 2e       	mov	r9, r21
	u8 slot = ENEMY_SHOT_SLOT;
    8d1a:	6e e0       	ldi	r22, 0x0E	; 14
    8d1c:	b6 2e       	mov	r11, r22
    8d1e:	f1 01       	movw	r30, r2
    8d20:	32 97       	sbiw	r30, 0x02	; 2
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
		{
			if (game.enemies[i].shot[j].shot_type == BASIC_ENEMY_SHOT)
    8d22:	80 81       	ld	r24, Z
    8d24:	81 30       	cpi	r24, 0x01	; 1
    8d26:	09 f0       	breq	.+2      	; 0x8d2a <animate_enemy_shots+0x54>
    8d28:	ee c0       	rjmp	.+476    	; 0x8f06 <animate_enemy_shots+0x230>
			{
				if (game.enemies[i].shot[j].active)
    8d2a:	d1 01       	movw	r26, r2
    8d2c:	8c 91       	ld	r24, X
    8d2e:	88 23       	and	r24, r24
    8d30:	09 f4       	brne	.+2      	; 0x8d34 <animate_enemy_shots+0x5e>
    8d32:	e9 c0       	rjmp	.+466    	; 0x8f06 <animate_enemy_shots+0x230>
				{
					if (game.enemies[i].shot[j].shared.x < game.camera_x || game.enemies[i].shot[j].shared.x > game.camera_x + CAMERA_WIDTH*8 ||
    8d34:	f4 01       	movw	r30, r8
    8d36:	c4 80       	ldd	r12, Z+4	; 0x04
    8d38:	d5 80       	ldd	r13, Z+5	; 0x05
    8d3a:	e6 80       	ldd	r14, Z+6	; 0x06
    8d3c:	f7 80       	ldd	r15, Z+7	; 0x07
    8d3e:	60 90 95 0d 	lds	r6, 0x0D95
    8d42:	70 90 96 0d 	lds	r7, 0x0D96
    8d46:	b3 01       	movw	r22, r6
    8d48:	80 e0       	ldi	r24, 0x00	; 0
    8d4a:	90 e0       	ldi	r25, 0x00	; 0
    8d4c:	0e 94 9c 4c 	call	0x9938	; 0x9938 <__floatunsisf>
    8d50:	9b 01       	movw	r18, r22
    8d52:	ac 01       	movw	r20, r24
    8d54:	c7 01       	movw	r24, r14
    8d56:	b6 01       	movw	r22, r12
    8d58:	0e 94 6c 4c 	call	0x98d8	; 0x98d8 <__cmpsf2>
    8d5c:	87 ff       	sbrs	r24, 7
    8d5e:	03 c0       	rjmp	.+6      	; 0x8d66 <animate_enemy_shots+0x90>
					   collision_detect_level(&game.enemies[i].shot[j].shared, 1, 1))
					{
						game.enemies[i].shot[j].active = 0;
    8d60:	d1 01       	movw	r26, r2
    8d62:	1c 92       	st	X, r1
    8d64:	84 c0       	rjmp	.+264    	; 0x8e6e <animate_enemy_shots+0x198>
		{
			if (game.enemies[i].shot[j].shot_type == BASIC_ENEMY_SHOT)
			{
				if (game.enemies[i].shot[j].active)
				{
					if (game.enemies[i].shot[j].shared.x < game.camera_x || game.enemies[i].shot[j].shared.x > game.camera_x + CAMERA_WIDTH*8 ||
    8d66:	b3 01       	movw	r22, r6
    8d68:	60 52       	subi	r22, 0x20	; 32
    8d6a:	7f 4f       	sbci	r23, 0xFF	; 255
    8d6c:	80 e0       	ldi	r24, 0x00	; 0
    8d6e:	90 e0       	ldi	r25, 0x00	; 0
    8d70:	0e 94 9c 4c 	call	0x9938	; 0x9938 <__floatunsisf>
    8d74:	9b 01       	movw	r18, r22
    8d76:	ac 01       	movw	r20, r24
    8d78:	c7 01       	movw	r24, r14
    8d7a:	b6 01       	movw	r22, r12
    8d7c:	0e 94 4e 4d 	call	0x9a9c	; 0x9a9c <__gesf2>
    8d80:	18 16       	cp	r1, r24
    8d82:	74 f3       	brlt	.-36     	; 0x8d60 <animate_enemy_shots+0x8a>
					   collision_detect_level(&game.enemies[i].shot[j].shared, 1, 1))
    8d84:	41 e0       	ldi	r20, 0x01	; 1
    8d86:	61 e0       	ldi	r22, 0x01	; 1
    8d88:	c4 01       	movw	r24, r8
    8d8a:	0e 94 f7 3d 	call	0x7bee	; 0x7bee <collision_detect_level>
		{
			if (game.enemies[i].shot[j].shot_type == BASIC_ENEMY_SHOT)
			{
				if (game.enemies[i].shot[j].active)
				{
					if (game.enemies[i].shot[j].shared.x < game.camera_x || game.enemies[i].shot[j].shared.x > game.camera_x + CAMERA_WIDTH*8 ||
    8d8e:	81 11       	cpse	r24, r1
    8d90:	e7 cf       	rjmp	.-50     	; 0x8d60 <animate_enemy_shots+0x8a>
					{
						game.enemies[i].shot[j].active = 0;
						LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
					}
					else if (LBCollides(game.player.shared.x,game.player.shared.y, game.player.width*8, game.player.height*8,
							game.enemies[i].shot[j].shared.x, game.enemies[i].shot[j].shared.y, 8, 8
    8d92:	f4 01       	movw	r30, r8
    8d94:	40 84       	ldd	r4, Z+8	; 0x08
    8d96:	51 84       	ldd	r5, Z+9	; 0x09
    8d98:	62 84       	ldd	r6, Z+10	; 0x0a
    8d9a:	73 84       	ldd	r7, Z+11	; 0x0b
    8d9c:	84 81       	ldd	r24, Z+4	; 0x04
    8d9e:	95 81       	ldd	r25, Z+5	; 0x05
    8da0:	a6 81       	ldd	r26, Z+6	; 0x06
    8da2:	b7 81       	ldd	r27, Z+7	; 0x07
    8da4:	89 83       	std	Y+1, r24	; 0x01
    8da6:	9a 83       	std	Y+2, r25	; 0x02
    8da8:	ab 83       	std	Y+3, r26	; 0x03
    8daa:	bc 83       	std	Y+4, r27	; 0x04
					   collision_detect_level(&game.enemies[i].shot[j].shared, 1, 1))
					{
						game.enemies[i].shot[j].active = 0;
						LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
					}
					else if (LBCollides(game.player.shared.x,game.player.shared.y, game.player.width*8, game.player.height*8,
    8dac:	c3 01       	movw	r24, r6
    8dae:	b2 01       	movw	r22, r4
    8db0:	0e 94 70 4c 	call	0x98e0	; 0x98e0 <__fixunssfsi>
    8db4:	6d 83       	std	Y+5, r22	; 0x05
    8db6:	7e 83       	std	Y+6, r23	; 0x06
    8db8:	8f 83       	std	Y+7, r24	; 0x07
    8dba:	98 87       	std	Y+8, r25	; 0x08
    8dbc:	69 81       	ldd	r22, Y+1	; 0x01
    8dbe:	7a 81       	ldd	r23, Y+2	; 0x02
    8dc0:	8b 81       	ldd	r24, Y+3	; 0x03
    8dc2:	9c 81       	ldd	r25, Y+4	; 0x04
    8dc4:	0e 94 70 4c 	call	0x98e0	; 0x98e0 <__fixunssfsi>
    8dc8:	69 87       	std	Y+9, r22	; 0x09
    8dca:	7a 87       	std	Y+10, r23	; 0x0a
    8dcc:	8b 87       	std	Y+11, r24	; 0x0b
    8dce:	9c 87       	std	Y+12, r25	; 0x0c
    8dd0:	20 91 bf 0d 	lds	r18, 0x0DBF
    8dd4:	22 0f       	add	r18, r18
    8dd6:	22 0f       	add	r18, r18
    8dd8:	22 0f       	add	r18, r18
    8dda:	40 91 be 0d 	lds	r20, 0x0DBE
    8dde:	44 0f       	add	r20, r20
    8de0:	44 0f       	add	r20, r20
    8de2:	44 0f       	add	r20, r20
    8de4:	60 91 b3 0d 	lds	r22, 0x0DB3
    8de8:	70 91 b4 0d 	lds	r23, 0x0DB4
    8dec:	80 91 b5 0d 	lds	r24, 0x0DB5
    8df0:	90 91 b6 0d 	lds	r25, 0x0DB6
    8df4:	29 8b       	std	Y+17, r18	; 0x11
    8df6:	4a 8b       	std	Y+18, r20	; 0x12
    8df8:	0e 94 70 4c 	call	0x98e0	; 0x98e0 <__fixunssfsi>
    8dfc:	6d 87       	std	Y+13, r22	; 0x0d
    8dfe:	7e 87       	std	Y+14, r23	; 0x0e
    8e00:	8f 87       	std	Y+15, r24	; 0x0f
    8e02:	98 8b       	std	Y+16, r25	; 0x10
    8e04:	60 91 af 0d 	lds	r22, 0x0DAF
    8e08:	70 91 b0 0d 	lds	r23, 0x0DB0
    8e0c:	80 91 b1 0d 	lds	r24, 0x0DB1
    8e10:	90 91 b2 0d 	lds	r25, 0x0DB2
    8e14:	0e 94 70 4c 	call	0x98e0	; 0x98e0 <__fixunssfsi>
    8e18:	dc 01       	movw	r26, r24
    8e1a:	cb 01       	movw	r24, r22
    8e1c:	28 e0       	ldi	r18, 0x08	; 8
    8e1e:	a2 2e       	mov	r10, r18
    8e20:	38 e0       	ldi	r19, 0x08	; 8
    8e22:	c3 2e       	mov	r12, r19
    8e24:	ed 80       	ldd	r14, Y+5	; 0x05
    8e26:	fe 80       	ldd	r15, Y+6	; 0x06
    8e28:	09 85       	ldd	r16, Y+9	; 0x09
    8e2a:	1a 85       	ldd	r17, Y+10	; 0x0a
    8e2c:	29 89       	ldd	r18, Y+17	; 0x11
    8e2e:	4a 89       	ldd	r20, Y+18	; 0x12
    8e30:	6d 85       	ldd	r22, Y+13	; 0x0d
    8e32:	7e 85       	ldd	r23, Y+14	; 0x0e
    8e34:	0e 94 c3 37 	call	0x6f86	; 0x6f86 <LBCollides>
    8e38:	88 23       	and	r24, r24
    8e3a:	f1 f0       	breq	.+60     	; 0x8e78 <animate_enemy_shots+0x1a2>
							game.enemies[i].shot[j].shared.x, game.enemies[i].shot[j].shared.y, 8, 8
						)
					)
					{
						SFX_HIT;
    8e3c:	41 e0       	ldi	r20, 0x01	; 1
    8e3e:	6f ef       	ldi	r22, 0xFF	; 255
    8e40:	84 e0       	ldi	r24, 0x04	; 4
    8e42:	0e 94 60 2b 	call	0x56c0	; 0x56c0 <TriggerFx>
						game.player.shield -= game.enemies[i].shot[j].hit_count;
    8e46:	80 91 c0 0d 	lds	r24, 0x0DC0
    8e4a:	f1 01       	movw	r30, r2
    8e4c:	31 97       	sbiw	r30, 0x01	; 1
    8e4e:	90 81       	ld	r25, Z
    8e50:	89 1b       	sub	r24, r25
    8e52:	80 93 c0 0d 	sts	0x0DC0, r24
						if (game.player.shield <= 0)
    8e56:	18 16       	cp	r1, r24
    8e58:	44 f0       	brlt	.+16     	; 0x8e6a <animate_enemy_shots+0x194>
						{
							SFX_PLAYER_EXPLODE;
    8e5a:	41 e0       	ldi	r20, 0x01	; 1
    8e5c:	6f ef       	ldi	r22, 0xFF	; 255
    8e5e:	85 e0       	ldi	r24, 0x05	; 5
    8e60:	0e 94 60 2b 	call	0x56c0	; 0x56c0 <TriggerFx>
							game.player.flags = EXPLODING;
    8e64:	b0 e1       	ldi	r27, 0x10	; 16
    8e66:	b0 93 bb 0d 	sts	0x0DBB, r27
						}
						game.enemies[i].shot[j].active = 0;
    8e6a:	f1 01       	movw	r30, r2
    8e6c:	10 82       	st	Z, r1
						LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
    8e6e:	01 e0       	ldi	r16, 0x01	; 1
    8e70:	21 e0       	ldi	r18, 0x01	; 1
    8e72:	40 e0       	ldi	r20, 0x00	; 0
    8e74:	60 ee       	ldi	r22, 0xE0	; 224
    8e76:	44 c0       	rjmp	.+136    	; 0x8f00 <animate_enemy_shots+0x22a>
					}
					else
					{
						game.enemies[i].shot[j].shared.x += game.enemies[i].shot[j].shared.vx*FRAME_TIME;
    8e78:	d4 01       	movw	r26, r8
    8e7a:	1c 96       	adiw	r26, 0x0c	; 12
    8e7c:	6d 91       	ld	r22, X+
    8e7e:	7c 91       	ld	r23, X
    8e80:	1d 97       	sbiw	r26, 0x0d	; 13
    8e82:	88 27       	eor	r24, r24
    8e84:	77 fd       	sbrc	r23, 7
    8e86:	80 95       	com	r24
    8e88:	98 2f       	mov	r25, r24
    8e8a:	0e 94 9e 4c 	call	0x993c	; 0x993c <__floatsisf>
    8e8e:	29 e8       	ldi	r18, 0x89	; 137
    8e90:	38 e8       	ldi	r19, 0x88	; 136
    8e92:	48 e8       	ldi	r20, 0x88	; 136
    8e94:	5c e3       	ldi	r21, 0x3C	; 60
    8e96:	0e 94 52 4d 	call	0x9aa4	; 0x9aa4 <__mulsf3>
    8e9a:	9b 01       	movw	r18, r22
    8e9c:	ac 01       	movw	r20, r24
    8e9e:	69 81       	ldd	r22, Y+1	; 0x01
    8ea0:	7a 81       	ldd	r23, Y+2	; 0x02
    8ea2:	8b 81       	ldd	r24, Y+3	; 0x03
    8ea4:	9c 81       	ldd	r25, Y+4	; 0x04
    8ea6:	0e 94 08 4c 	call	0x9810	; 0x9810 <__addsf3>
    8eaa:	6b 01       	movw	r12, r22
    8eac:	7c 01       	movw	r14, r24
    8eae:	f4 01       	movw	r30, r8
    8eb0:	64 83       	std	Z+4, r22	; 0x04
    8eb2:	75 83       	std	Z+5, r23	; 0x05
    8eb4:	86 83       	std	Z+6, r24	; 0x06
    8eb6:	97 83       	std	Z+7, r25	; 0x07
						LBMoveSprite(slot, game.enemies[i].shot[j].shared.x - game.camera_x, game.enemies[i].shot[j].shared.y - game.camera_y, 1, 1);
    8eb8:	60 91 97 0d 	lds	r22, 0x0D97
    8ebc:	70 91 98 0d 	lds	r23, 0x0D98
    8ec0:	80 e0       	ldi	r24, 0x00	; 0
    8ec2:	90 e0       	ldi	r25, 0x00	; 0
    8ec4:	0e 94 9c 4c 	call	0x9938	; 0x9938 <__floatunsisf>
    8ec8:	9b 01       	movw	r18, r22
    8eca:	ac 01       	movw	r20, r24
    8ecc:	c3 01       	movw	r24, r6
    8ece:	b2 01       	movw	r22, r4
    8ed0:	0e 94 07 4c 	call	0x980e	; 0x980e <__subsf3>
    8ed4:	0e 94 70 4c 	call	0x98e0	; 0x98e0 <__fixunssfsi>
    8ed8:	76 2e       	mov	r7, r22
    8eda:	60 91 95 0d 	lds	r22, 0x0D95
    8ede:	70 91 96 0d 	lds	r23, 0x0D96
    8ee2:	80 e0       	ldi	r24, 0x00	; 0
    8ee4:	90 e0       	ldi	r25, 0x00	; 0
    8ee6:	0e 94 9c 4c 	call	0x9938	; 0x9938 <__floatunsisf>
    8eea:	9b 01       	movw	r18, r22
    8eec:	ac 01       	movw	r20, r24
    8eee:	c7 01       	movw	r24, r14
    8ef0:	b6 01       	movw	r22, r12
    8ef2:	0e 94 07 4c 	call	0x980e	; 0x980e <__subsf3>
    8ef6:	0e 94 70 4c 	call	0x98e0	; 0x98e0 <__fixunssfsi>
    8efa:	01 e0       	ldi	r16, 0x01	; 1
    8efc:	21 e0       	ldi	r18, 0x01	; 1
    8efe:	47 2d       	mov	r20, r7
    8f00:	8b 2d       	mov	r24, r11
    8f02:	0e 94 4a 38 	call	0x7094	; 0x7094 <LBMoveSprite>
					}
				}
			}
			slot += 1;
    8f06:	b3 94       	inc	r11
    8f08:	f2 e4       	ldi	r31, 0x42	; 66
    8f0a:	2f 0e       	add	r2, r31
    8f0c:	31 1c       	adc	r3, r1
    8f0e:	82 e4       	ldi	r24, 0x42	; 66
    8f10:	88 0e       	add	r8, r24
    8f12:	91 1c       	adc	r9, r1

void animate_enemy_shots()
{
	u8 slot = ENEMY_SHOT_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    8f14:	93 e1       	ldi	r25, 0x13	; 19
    8f16:	b9 12       	cpse	r11, r25
    8f18:	02 cf       	rjmp	.-508    	; 0x8d1e <animate_enemy_shots+0x48>
				}
			}
			slot += 1;
		}
	}
}
    8f1a:	62 96       	adiw	r28, 0x12	; 18
    8f1c:	0f b6       	in	r0, 0x3f	; 63
    8f1e:	f8 94       	cli
    8f20:	de bf       	out	0x3e, r29	; 62
    8f22:	0f be       	out	0x3f, r0	; 63
    8f24:	cd bf       	out	0x3d, r28	; 61
    8f26:	df 91       	pop	r29
    8f28:	cf 91       	pop	r28
    8f2a:	1f 91       	pop	r17
    8f2c:	0f 91       	pop	r16
    8f2e:	ff 90       	pop	r15
    8f30:	ef 90       	pop	r14
    8f32:	df 90       	pop	r13
    8f34:	cf 90       	pop	r12
    8f36:	bf 90       	pop	r11
    8f38:	af 90       	pop	r10
    8f3a:	9f 90       	pop	r9
    8f3c:	8f 90       	pop	r8
    8f3e:	7f 90       	pop	r7
    8f40:	6f 90       	pop	r6
    8f42:	5f 90       	pop	r5
    8f44:	4f 90       	pop	r4
    8f46:	3f 90       	pop	r3
    8f48:	2f 90       	pop	r2
    8f4a:	08 95       	ret

00008f4c <update_level>:

void update_level()
{
    8f4c:	cf 93       	push	r28
    8f4e:	df 93       	push	r29
	game.frame_counter++;
    8f50:	80 91 a4 0d 	lds	r24, 0x0DA4
    8f54:	8f 5f       	subi	r24, 0xFF	; 255
	if (game.frame_counter == 60)
    8f56:	8c 33       	cpi	r24, 0x3C	; 60
    8f58:	19 f0       	breq	.+6      	; 0x8f60 <update_level+0x14>
	}
}

void update_level()
{
	game.frame_counter++;
    8f5a:	80 93 a4 0d 	sts	0x0DA4, r24
    8f5e:	0f c0       	rjmp	.+30     	; 0x8f7e <update_level+0x32>
	if (game.frame_counter == 60)
	{
		game.frame_counter = 0;
    8f60:	10 92 a4 0d 	sts	0x0DA4, r1
		if (game.time != 65535) game.time++;
    8f64:	80 91 9b 0d 	lds	r24, 0x0D9B
    8f68:	90 91 9c 0d 	lds	r25, 0x0D9C
    8f6c:	8f 3f       	cpi	r24, 0xFF	; 255
    8f6e:	2f ef       	ldi	r18, 0xFF	; 255
    8f70:	92 07       	cpc	r25, r18
    8f72:	29 f0       	breq	.+10     	; 0x8f7e <update_level+0x32>
    8f74:	01 96       	adiw	r24, 0x01	; 1
    8f76:	90 93 9c 0d 	sts	0x0D9C, r25
    8f7a:	80 93 9b 0d 	sts	0x0D9B, r24
	}
	
	if (game.player.shared.vx > 0 &&
    8f7e:	80 91 b7 0d 	lds	r24, 0x0DB7
    8f82:	90 91 b8 0d 	lds	r25, 0x0DB8
    8f86:	18 16       	cp	r1, r24
    8f88:	19 06       	cpc	r1, r25
    8f8a:	44 f5       	brge	.+80     	; 0x8fdc <update_level+0x90>
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
    8f8c:	c0 91 95 0d 	lds	r28, 0x0D95
    8f90:	d0 91 96 0d 	lds	r29, 0x0D96
    8f94:	be 01       	movw	r22, r28
    8f96:	80 e0       	ldi	r24, 0x00	; 0
    8f98:	90 e0       	ldi	r25, 0x00	; 0
    8f9a:	0e 94 9c 4c 	call	0x9938	; 0x9938 <__floatunsisf>
    8f9e:	9b 01       	movw	r18, r22
    8fa0:	ac 01       	movw	r20, r24
    8fa2:	60 91 af 0d 	lds	r22, 0x0DAF
    8fa6:	70 91 b0 0d 	lds	r23, 0x0DB0
    8faa:	80 91 b1 0d 	lds	r24, 0x0DB1
    8fae:	90 91 b2 0d 	lds	r25, 0x0DB2
    8fb2:	0e 94 07 4c 	call	0x980e	; 0x980e <__subsf3>
	{
		game.frame_counter = 0;
		if (game.time != 65535) game.time++;
	}
	
	if (game.player.shared.vx > 0 &&
    8fb6:	20 e0       	ldi	r18, 0x00	; 0
    8fb8:	30 e0       	ldi	r19, 0x00	; 0
    8fba:	40 ee       	ldi	r20, 0xE0	; 224
    8fbc:	52 e4       	ldi	r21, 0x42	; 66
    8fbe:	0e 94 4e 4d 	call	0x9a9c	; 0x9a9c <__gesf2>
    8fc2:	87 fd       	sbrc	r24, 7
    8fc4:	0b c0       	rjmp	.+22     	; 0x8fdc <update_level+0x90>
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
		(game.camera_x/8 + CAMERA_WIDTH < LEVEL_WIDTH))
    8fc6:	93 e0       	ldi	r25, 0x03	; 3
    8fc8:	d6 95       	lsr	r29
    8fca:	c7 95       	ror	r28
    8fcc:	9a 95       	dec	r25
    8fce:	e1 f7       	brne	.-8      	; 0x8fc8 <update_level+0x7c>
    8fd0:	6c 96       	adiw	r28, 0x1c	; 28
		game.frame_counter = 0;
		if (game.time != 65535) game.time++;
	}
	
	if (game.player.shared.vx > 0 &&
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
    8fd2:	cf 3f       	cpi	r28, 0xFF	; 255
    8fd4:	d1 05       	cpc	r29, r1
    8fd6:	10 f4       	brcc	.+4      	; 0x8fdc <update_level+0x90>
		(game.camera_x/8 + CAMERA_WIDTH < LEVEL_WIDTH))
	{
		move_camera_x();
    8fd8:	0e 94 cc 3b 	call	0x7798	; 0x7798 <move_camera_x>
	}
	
	if (game.player.shared.vy > 0 &&
    8fdc:	20 e0       	ldi	r18, 0x00	; 0
    8fde:	30 e0       	ldi	r19, 0x00	; 0
    8fe0:	a9 01       	movw	r20, r18
    8fe2:	60 91 ab 0d 	lds	r22, 0x0DAB
    8fe6:	70 91 ac 0d 	lds	r23, 0x0DAC
    8fea:	80 91 ad 0d 	lds	r24, 0x0DAD
    8fee:	90 91 ae 0d 	lds	r25, 0x0DAE
    8ff2:	0e 94 4e 4d 	call	0x9a9c	; 0x9a9c <__gesf2>
    8ff6:	18 16       	cp	r1, r24
    8ff8:	6c f5       	brge	.+90     	; 0x9054 <update_level+0x108>
	    (game.player.shared.y - game.camera_y + 24) >= ((CAMERA_HEIGHT - 2) * 8) &&
    8ffa:	c0 91 97 0d 	lds	r28, 0x0D97
    8ffe:	d0 91 98 0d 	lds	r29, 0x0D98
    9002:	be 01       	movw	r22, r28
    9004:	80 e0       	ldi	r24, 0x00	; 0
    9006:	90 e0       	ldi	r25, 0x00	; 0
    9008:	0e 94 9c 4c 	call	0x9938	; 0x9938 <__floatunsisf>
    900c:	9b 01       	movw	r18, r22
    900e:	ac 01       	movw	r20, r24
    9010:	60 91 b3 0d 	lds	r22, 0x0DB3
    9014:	70 91 b4 0d 	lds	r23, 0x0DB4
    9018:	80 91 b5 0d 	lds	r24, 0x0DB5
    901c:	90 91 b6 0d 	lds	r25, 0x0DB6
    9020:	0e 94 07 4c 	call	0x980e	; 0x980e <__subsf3>
    9024:	20 e0       	ldi	r18, 0x00	; 0
    9026:	30 e0       	ldi	r19, 0x00	; 0
    9028:	40 ec       	ldi	r20, 0xC0	; 192
    902a:	51 e4       	ldi	r21, 0x41	; 65
    902c:	0e 94 08 4c 	call	0x9810	; 0x9810 <__addsf3>
		(game.camera_x/8 + CAMERA_WIDTH < LEVEL_WIDTH))
	{
		move_camera_x();
	}
	
	if (game.player.shared.vy > 0 &&
    9030:	20 e0       	ldi	r18, 0x00	; 0
    9032:	30 e0       	ldi	r19, 0x00	; 0
    9034:	40 e4       	ldi	r20, 0x40	; 64
    9036:	53 e4       	ldi	r21, 0x43	; 67
    9038:	0e 94 4e 4d 	call	0x9a9c	; 0x9a9c <__gesf2>
    903c:	87 fd       	sbrc	r24, 7
    903e:	0a c0       	rjmp	.+20     	; 0x9054 <update_level+0x108>
	    (game.player.shared.y - game.camera_y + 24) >= ((CAMERA_HEIGHT - 2) * 8) &&
		(game.camera_y/8 + CAMERA_HEIGHT < LEVEL_HEIGHT))
    9040:	83 e0       	ldi	r24, 0x03	; 3
    9042:	d6 95       	lsr	r29
    9044:	c7 95       	ror	r28
    9046:	8a 95       	dec	r24
    9048:	e1 f7       	brne	.-8      	; 0x9042 <update_level+0xf6>
    904a:	6a 96       	adiw	r28, 0x1a	; 26
	{
		move_camera_x();
	}
	
	if (game.player.shared.vy > 0 &&
	    (game.player.shared.y - game.camera_y + 24) >= ((CAMERA_HEIGHT - 2) * 8) &&
    904c:	e4 97       	sbiw	r28, 0x34	; 52
    904e:	10 f4       	brcc	.+4      	; 0x9054 <update_level+0x108>
		(game.camera_y/8 + CAMERA_HEIGHT < LEVEL_HEIGHT))
	{
		move_camera_y();
    9050:	0e 94 e5 3b 	call	0x77ca	; 0x77ca <move_camera_y>
	}
	
	// Score
	LBPrintByte(9, VRAM_TILES_V-1, game.lives ,true);
    9054:	21 e0       	ldi	r18, 0x01	; 1
    9056:	40 91 9f 0d 	lds	r20, 0x0D9F
    905a:	6f e1       	ldi	r22, 0x1F	; 31
    905c:	89 e0       	ldi	r24, 0x09	; 9
    905e:	0e 94 73 37 	call	0x6ee6	; 0x6ee6 <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-1, game.score ,true);
    9062:	40 91 99 0d 	lds	r20, 0x0D99
    9066:	50 91 9a 0d 	lds	r21, 0x0D9A
    906a:	21 e0       	ldi	r18, 0x01	; 1
    906c:	6f e1       	ldi	r22, 0x1F	; 31
    906e:	8b e1       	ldi	r24, 0x1B	; 27
    9070:	0e 94 95 37 	call	0x6f2a	; 0x6f2a <LBPrintInt>
	LBPrintByte(9, VRAM_TILES_V-2, game.player.shield ,true);
    9074:	21 e0       	ldi	r18, 0x01	; 1
    9076:	40 91 c0 0d 	lds	r20, 0x0DC0
    907a:	6e e1       	ldi	r22, 0x1E	; 30
    907c:	89 e0       	ldi	r24, 0x09	; 9
    907e:	0e 94 73 37 	call	0x6ee6	; 0x6ee6 <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-2, game.time ,true);
    9082:	40 91 9b 0d 	lds	r20, 0x0D9B
    9086:	50 91 9c 0d 	lds	r21, 0x0D9C
    908a:	21 e0       	ldi	r18, 0x01	; 1
    908c:	6e e1       	ldi	r22, 0x1E	; 30
    908e:	8b e1       	ldi	r24, 0x1B	; 27
	
}
    9090:	df 91       	pop	r29
    9092:	cf 91       	pop	r28
	
	// Score
	LBPrintByte(9, VRAM_TILES_V-1, game.lives ,true);
	LBPrintInt(27, VRAM_TILES_V-1, game.score ,true);
	LBPrintByte(9, VRAM_TILES_V-2, game.player.shield ,true);
	LBPrintInt(27, VRAM_TILES_V-2, game.time ,true);
    9094:	0c 94 95 37 	jmp	0x6f2a	; 0x6f2a <LBPrintInt>

00009098 <clear_sprites>:
	
}

void clear_sprites(u8 from, u8 count)
{
    9098:	ef 92       	push	r14
    909a:	ff 92       	push	r15
    909c:	0f 93       	push	r16
    909e:	cf 93       	push	r28
	for(u8 i = from; i < from+count; i++)
    90a0:	c8 2f       	mov	r28, r24
    90a2:	e6 2e       	mov	r14, r22
    90a4:	f1 2c       	mov	r15, r1
    90a6:	e8 0e       	add	r14, r24
    90a8:	f1 1c       	adc	r15, r1
    90aa:	8c 2f       	mov	r24, r28
    90ac:	90 e0       	ldi	r25, 0x00	; 0
    90ae:	8e 15       	cp	r24, r14
    90b0:	9f 05       	cpc	r25, r15
    90b2:	7c f4       	brge	.+30     	; 0x90d2 <clear_sprites+0x3a>
	{
		LBMapSprite(i, map_none, 0);
    90b4:	40 e0       	ldi	r20, 0x00	; 0
    90b6:	62 eb       	ldi	r22, 0xB2	; 178
    90b8:	7a e2       	ldi	r23, 0x2A	; 42
    90ba:	8c 2f       	mov	r24, r28
    90bc:	0e 94 f8 37 	call	0x6ff0	; 0x6ff0 <LBMapSprite>
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
    90c0:	01 e0       	ldi	r16, 0x01	; 1
    90c2:	21 e0       	ldi	r18, 0x01	; 1
    90c4:	40 e0       	ldi	r20, 0x00	; 0
    90c6:	60 ee       	ldi	r22, 0xE0	; 224
    90c8:	8c 2f       	mov	r24, r28
    90ca:	0e 94 4a 38 	call	0x7094	; 0x7094 <LBMoveSprite>
	
}

void clear_sprites(u8 from, u8 count)
{
	for(u8 i = from; i < from+count; i++)
    90ce:	cf 5f       	subi	r28, 0xFF	; 255
    90d0:	ec cf       	rjmp	.-40     	; 0x90aa <clear_sprites+0x12>
	{
		LBMapSprite(i, map_none, 0);
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
	}
}
    90d2:	cf 91       	pop	r28
    90d4:	0f 91       	pop	r16
    90d6:	ff 90       	pop	r15
    90d8:	ef 90       	pop	r14
    90da:	08 95       	ret

000090dc <level_transition>:
	LBPrint(0, VRAM_TILES_V-2, (char*) strShield);
	LBPrint(18, VRAM_TILES_V-2, (char*) strTime);
}

void level_transition(u8 index)
{
    90dc:	cf 93       	push	r28
    90de:	c8 2f       	mov	r28, r24
	FadeOut(FRAMES_PER_FADE, true);
    90e0:	61 e0       	ldi	r22, 0x01	; 1
    90e2:	83 e0       	ldi	r24, 0x03	; 3
    90e4:	0e 94 91 36 	call	0x6d22	; 0x6d22 <FadeOut>
	ClearVram();
    90e8:	0e 94 e7 27 	call	0x4fce	; 0x4fce <ClearVram>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    90ec:	64 e1       	ldi	r22, 0x14	; 20
    90ee:	80 e0       	ldi	r24, 0x00	; 0
    90f0:	0e 94 4c 48 	call	0x9098	; 0x9098 <clear_sprites>
	LBRotateSprites();
    90f4:	0e 94 88 38 	call	0x7110	; 0x7110 <LBRotateSprites>
	init_player_state();
    90f8:	0e 94 e4 38 	call	0x71c8	; 0x71c8 <init_player_state>
	init_enemy_state();
    90fc:	0e 94 d0 38 	call	0x71a0	; 0x71a0 <init_enemy_state>
	LBPrint(8, 12, (char*) strLevels+index*16);
    9100:	80 e1       	ldi	r24, 0x10	; 16
    9102:	c8 9f       	mul	r28, r24
    9104:	a0 01       	movw	r20, r0
    9106:	11 24       	eor	r1, r1
    9108:	43 5b       	subi	r20, 0xB3	; 179
    910a:	56 4f       	sbci	r21, 0xF6	; 246
    910c:	6c e0       	ldi	r22, 0x0C	; 12
    910e:	88 e0       	ldi	r24, 0x08	; 8
    9110:	0e 94 57 37 	call	0x6eae	; 0x6eae <LBPrint>
	FadeIn(1, true);
    9114:	61 e0       	ldi	r22, 0x01	; 1
    9116:	81 e0       	ldi	r24, 0x01	; 1
    9118:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <FadeIn>
	StartSong(planetsong);
    911c:	8a e6       	ldi	r24, 0x6A	; 106
    911e:	90 e1       	ldi	r25, 0x10	; 16
    9120:	0e 94 75 2a 	call	0x54ea	; 0x54ea <StartSong>
	LBWaitSeconds(TEXT_LINGER);
    9124:	83 e0       	ldi	r24, 0x03	; 3
    9126:	0e 94 e9 37 	call	0x6fd2	; 0x6fd2 <LBWaitSeconds>
	FadeOut(1, true);
    912a:	61 e0       	ldi	r22, 0x01	; 1
    912c:	81 e0       	ldi	r24, 0x01	; 1
    912e:	0e 94 91 36 	call	0x6d22	; 0x6d22 <FadeOut>
	ClearVram();
    9132:	0e 94 e7 27 	call	0x4fce	; 0x4fce <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    9136:	60 e0       	ldi	r22, 0x00	; 0
    9138:	83 e0       	ldi	r24, 0x03	; 3
    913a:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <FadeIn>
	load_level(index);
    913e:	8c 2f       	mov	r24, r28
}
    9140:	cf 91       	pop	r28
	StartSong(planetsong);
	LBWaitSeconds(TEXT_LINGER);
	FadeOut(1, true);
	ClearVram();
	FadeIn(FRAMES_PER_FADE, false);
	load_level(index);
    9142:	0c 94 00 3c 	jmp	0x7800	; 0x7800 <load_level>

00009146 <save_score>:
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    9146:	81 e7       	ldi	r24, 0x71	; 113
    9148:	9d e0       	ldi	r25, 0x0D	; 13
    914a:	0c 94 5d 29 	jmp	0x52ba	; 0x52ba <EepromWriteBlock>

0000914e <load_splash>:
	load_splash();
}

void load_splash()
{
	Screen.scrollX = 0;
    914e:	e9 e9       	ldi	r30, 0x99	; 153
    9150:	fc e0       	ldi	r31, 0x0C	; 12
    9152:	13 82       	std	Z+3, r1	; 0x03
	Screen.scrollY = 0;
    9154:	14 82       	std	Z+4, r1	; 0x04
	Screen.scrollHeight = 32;
    9156:	80 e2       	ldi	r24, 0x20	; 32
    9158:	85 83       	std	Z+5, r24	; 0x05
	Screen.overlayHeight = 0;
    915a:	10 82       	st	Z, r1
	game.current_screen = SPLASH;
    915c:	e1 e9       	ldi	r30, 0x91	; 145
    915e:	fd e0       	ldi	r31, 0x0D	; 13
    9160:	17 86       	std	Z+15, r1	; 0x0f
	game.selection = START_SELECTED;
    9162:	12 8a       	std	Z+18, r1	; 0x12
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    9164:	64 e1       	ldi	r22, 0x14	; 20
    9166:	80 e0       	ldi	r24, 0x00	; 0
    9168:	0e 94 4c 48 	call	0x9098	; 0x9098 <clear_sprites>
	LBRotateSprites();
    916c:	0e 94 88 38 	call	0x7110	; 0x7110 <LBRotateSprites>
	LBPrint(8, 15, (char*) str1Player);
    9170:	47 e9       	ldi	r20, 0x97	; 151
    9172:	59 e0       	ldi	r21, 0x09	; 9
    9174:	6f e0       	ldi	r22, 0x0F	; 15
    9176:	88 e0       	ldi	r24, 0x08	; 8
    9178:	0e 94 57 37 	call	0x6eae	; 0x6eae <LBPrint>
	LBPrint(8, 16, (char*) strHighscores);
    917c:	4b e8       	ldi	r20, 0x8B	; 139
    917e:	59 e0       	ldi	r21, 0x09	; 9
    9180:	60 e1       	ldi	r22, 0x10	; 16
    9182:	88 e0       	ldi	r24, 0x08	; 8
    9184:	0e 94 57 37 	call	0x6eae	; 0x6eae <LBPrint>
	LBPrint(4, 21, (char*) strCopyright);
    9188:	45 eb       	ldi	r20, 0xB5	; 181
    918a:	59 e0       	ldi	r21, 0x09	; 9
    918c:	65 e1       	ldi	r22, 0x15	; 21
    918e:	84 e0       	ldi	r24, 0x04	; 4
    9190:	0e 94 57 37 	call	0x6eae	; 0x6eae <LBPrint>
	LBPrint(3, 26, (char*) strMusic);
    9194:	4d e9       	ldi	r20, 0x9D	; 157
    9196:	59 e0       	ldi	r21, 0x09	; 9
    9198:	6a e1       	ldi	r22, 0x1A	; 26
    919a:	83 e0       	ldi	r24, 0x03	; 3
    919c:	0e 94 57 37 	call	0x6eae	; 0x6eae <LBPrint>
	DrawMap2(6, 5, (const char*) map_splash);
    91a0:	46 eb       	ldi	r20, 0xB6	; 182
    91a2:	54 e4       	ldi	r21, 0x44	; 68
    91a4:	65 e0       	ldi	r22, 0x05	; 5
    91a6:	86 e0       	ldi	r24, 0x06	; 6
    91a8:	0e 94 dc 35 	call	0x6bb8	; 0x6bb8 <DrawMap>
	LBMapSprite(0, map_right_arrow, 0);
    91ac:	40 e0       	ldi	r20, 0x00	; 0
    91ae:	6f ea       	ldi	r22, 0xAF	; 175
    91b0:	7a e2       	ldi	r23, 0x2A	; 42
    91b2:	80 e0       	ldi	r24, 0x00	; 0
    91b4:	0c 94 f8 37 	jmp	0x6ff0	; 0x6ff0 <LBMapSprite>

000091b8 <exit_game>:
	save_eeprom(&scores);
}

void exit_game()
{
    save_score();
    91b8:	0e 94 a3 48 	call	0x9146	; 0x9146 <save_score>
	fade_through();
    91bc:	0e 94 2e 3a 	call	0x745c	; 0x745c <fade_through>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    91c0:	64 e1       	ldi	r22, 0x14	; 20
    91c2:	80 e0       	ldi	r24, 0x00	; 0
    91c4:	0e 94 4c 48 	call	0x9098	; 0x9098 <clear_sprites>
	LBRotateSprites();
    91c8:	0e 94 88 38 	call	0x7110	; 0x7110 <LBRotateSprites>
	init_game_state();
    91cc:	0e 94 c7 38 	call	0x718e	; 0x718e <init_game_state>
	init_player_state();
    91d0:	0e 94 e4 38 	call	0x71c8	; 0x71c8 <init_player_state>
	init_enemy_state();
    91d4:	0e 94 d0 38 	call	0x71a0	; 0x71a0 <init_enemy_state>
	StopSong();
    91d8:	0e 94 9e 2a 	call	0x553c	; 0x553c <StopSong>
	load_splash();
    91dc:	0c 94 a7 48 	jmp	0x914e	; 0x914e <load_splash>

000091e0 <handle_player_death>:
	}
}

void handle_player_death()
{
	game.lives--;
    91e0:	80 91 9f 0d 	lds	r24, 0x0D9F
    91e4:	81 50       	subi	r24, 0x01	; 1
    91e6:	80 93 9f 0d 	sts	0x0D9F, r24
	clear_sprites(0, 6);
    91ea:	66 e0       	ldi	r22, 0x06	; 6
    91ec:	80 e0       	ldi	r24, 0x00	; 0
    91ee:	0e 94 4c 48 	call	0x9098	; 0x9098 <clear_sprites>
	LBRotateSprites();
    91f2:	0e 94 88 38 	call	0x7110	; 0x7110 <LBRotateSprites>
	if (game.lives == 0)
    91f6:	80 91 9f 0d 	lds	r24, 0x0D9F
    91fa:	81 11       	cpse	r24, r1
    91fc:	02 c0       	rjmp	.+4      	; 0x9202 <handle_player_death+0x22>
	{
		exit_game();
    91fe:	0c 94 dc 48 	jmp	0x91b8	; 0x91b8 <exit_game>
		return;
	}
	FadeOut(FRAMES_PER_FADE, true);
    9202:	61 e0       	ldi	r22, 0x01	; 1
    9204:	83 e0       	ldi	r24, 0x03	; 3
    9206:	0e 94 91 36 	call	0x6d22	; 0x6d22 <FadeOut>
	ClearVram();
    920a:	0e 94 e7 27 	call	0x4fce	; 0x4fce <ClearVram>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    920e:	64 e1       	ldi	r22, 0x14	; 20
    9210:	80 e0       	ldi	r24, 0x00	; 0
    9212:	0e 94 4c 48 	call	0x9098	; 0x9098 <clear_sprites>
	LBRotateSprites();
    9216:	0e 94 88 38 	call	0x7110	; 0x7110 <LBRotateSprites>
	init_player_state();
    921a:	0e 94 e4 38 	call	0x71c8	; 0x71c8 <init_player_state>
	init_enemy_state();
    921e:	0e 94 d0 38 	call	0x71a0	; 0x71a0 <init_enemy_state>
	FadeIn(FRAMES_PER_FADE, false);
    9222:	60 e0       	ldi	r22, 0x00	; 0
    9224:	83 e0       	ldi	r24, 0x03	; 3
    9226:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <FadeIn>
	load_level(game.current_level_index);
    922a:	80 91 a1 0d 	lds	r24, 0x0DA1
    922e:	0c 94 00 3c 	jmp	0x7800	; 0x7800 <load_level>

00009232 <update_player>:
}

void update_player()
{
    9232:	0f 93       	push	r16
    9234:	1f 93       	push	r17
    9236:	cf 93       	push	r28
    9238:	df 93       	push	r29
    923a:	1f 92       	push	r1
    923c:	cd b7       	in	r28, 0x3d	; 61
    923e:	de b7       	in	r29, 0x3e	; 62
	
	if (game.player.flags & EXPLODING)
    9240:	80 91 bb 0d 	lds	r24, 0x0DBB
    9244:	84 ff       	sbrs	r24, 4
    9246:	15 c0       	rjmp	.+42     	; 0x9272 <update_player+0x40>
	{
		if (map_explosion(&game.player.flags, &game.player.expl, PLAYER_SLOT, game.player.width, game.player.height))
    9248:	00 91 bf 0d 	lds	r16, 0x0DBF
    924c:	20 91 be 0d 	lds	r18, 0x0DBE
    9250:	40 e0       	ldi	r20, 0x00	; 0
    9252:	6f e2       	ldi	r22, 0x2F	; 47
    9254:	7e e0       	ldi	r23, 0x0E	; 14
    9256:	8b eb       	ldi	r24, 0xBB	; 187
    9258:	9d e0       	ldi	r25, 0x0D	; 13
    925a:	0e 94 c5 42 	call	0x858a	; 0x858a <map_explosion>
    925e:	88 23       	and	r24, r24
    9260:	09 f4       	brne	.+2      	; 0x9264 <update_player+0x32>
    9262:	0c c2       	rjmp	.+1048   	; 0x967c <update_player+0x44a>
		{
			game.player.direction = D_RIGHT;
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.prone), 0);
		}
	}
}
    9264:	0f 90       	pop	r0
    9266:	df 91       	pop	r29
    9268:	cf 91       	pop	r28
    926a:	1f 91       	pop	r17
    926c:	0f 91       	pop	r16
	
	if (game.player.flags & EXPLODING)
	{
		if (map_explosion(&game.player.flags, &game.player.expl, PLAYER_SLOT, game.player.width, game.player.height))
		{
			handle_player_death();
    926e:	0c 94 f0 48 	jmp	0x91e0	; 0x91e0 <handle_player_death>
		}
	}
	else if (game.player.flags & (IDLE|RUNNING))
    9272:	98 2f       	mov	r25, r24
    9274:	9a 70       	andi	r25, 0x0A	; 10
    9276:	09 f4       	brne	.+2      	; 0x927a <update_player+0x48>
    9278:	f0 c0       	rjmp	.+480    	; 0x945a <update_player+0x228>
	{
		if (!on_solid_ground(&game.player.shared, game.player.width, game.player.height))
    927a:	40 91 bf 0d 	lds	r20, 0x0DBF
    927e:	60 91 be 0d 	lds	r22, 0x0DBE
    9282:	8b ea       	ldi	r24, 0xAB	; 171
    9284:	9d e0       	ldi	r25, 0x0D	; 13
    9286:	0e 94 58 3c 	call	0x78b0	; 0x78b0 <on_solid_ground>
    928a:	81 11       	cpse	r24, r1
    928c:	07 c0       	rjmp	.+14     	; 0x929c <update_player+0x6a>
		{
			game.player.shared.gravity = GRAVITY;
    928e:	8f ef       	ldi	r24, 0xFF	; 255
    9290:	80 93 b9 0d 	sts	0x0DB9, r24
			game.player.flags = JUMPING;
    9294:	81 e0       	ldi	r24, 0x01	; 1
    9296:	80 93 bb 0d 	sts	0x0DBB, r24
    929a:	d6 c0       	rjmp	.+428    	; 0x9448 <update_player+0x216>
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), extendedSprites[PLAYER_SLOT].flags);
		}
		else
		{
			if (game.joypadState.held & BTN_DOWN)
    929c:	10 91 85 0f 	lds	r17, 0x0F85
    92a0:	15 ff       	sbrs	r17, 5
    92a2:	46 c0       	rjmp	.+140    	; 0x9330 <update_player+0xfe>
			{
				game.player.shared.y += 16;
    92a4:	20 e0       	ldi	r18, 0x00	; 0
    92a6:	30 e0       	ldi	r19, 0x00	; 0
    92a8:	40 e8       	ldi	r20, 0x80	; 128
    92aa:	51 e4       	ldi	r21, 0x41	; 65
    92ac:	60 91 b3 0d 	lds	r22, 0x0DB3
    92b0:	70 91 b4 0d 	lds	r23, 0x0DB4
    92b4:	80 91 b5 0d 	lds	r24, 0x0DB5
    92b8:	90 91 b6 0d 	lds	r25, 0x0DB6
    92bc:	0e 94 08 4c 	call	0x9810	; 0x9810 <__addsf3>
    92c0:	60 93 b3 0d 	sts	0x0DB3, r22
    92c4:	70 93 b4 0d 	sts	0x0DB4, r23
    92c8:	80 93 b5 0d 	sts	0x0DB5, r24
    92cc:	90 93 b6 0d 	sts	0x0DB6, r25
				if(game.player.direction == D_RIGHT)
    92d0:	80 91 bd 0d 	lds	r24, 0x0DBD
    92d4:	81 30       	cpi	r24, 0x01	; 1
    92d6:	b1 f4       	brne	.+44     	; 0x9304 <update_player+0xd2>
				{
					game.player.shared.x -= 8;
    92d8:	20 e0       	ldi	r18, 0x00	; 0
    92da:	30 e0       	ldi	r19, 0x00	; 0
    92dc:	40 e0       	ldi	r20, 0x00	; 0
    92de:	51 e4       	ldi	r21, 0x41	; 65
    92e0:	60 91 af 0d 	lds	r22, 0x0DAF
    92e4:	70 91 b0 0d 	lds	r23, 0x0DB0
    92e8:	80 91 b1 0d 	lds	r24, 0x0DB1
    92ec:	90 91 b2 0d 	lds	r25, 0x0DB2
    92f0:	0e 94 07 4c 	call	0x980e	; 0x980e <__subsf3>
    92f4:	60 93 af 0d 	sts	0x0DAF, r22
    92f8:	70 93 b0 0d 	sts	0x0DB0, r23
    92fc:	80 93 b1 0d 	sts	0x0DB1, r24
    9300:	90 93 b2 0d 	sts	0x0DB2, r25
				}
				game.player.shared.vx = 0;
    9304:	10 92 b8 0d 	sts	0x0DB8, r1
    9308:	10 92 b7 0d 	sts	0x0DB7, r1
				game.player.flags = PRONE;
    930c:	84 e0       	ldi	r24, 0x04	; 4
    930e:	80 93 bb 0d 	sts	0x0DBB, r24
				game.player.width = 3;
    9312:	83 e0       	ldi	r24, 0x03	; 3
    9314:	80 93 be 0d 	sts	0x0DBE, r24
				game.player.height = 1;
    9318:	81 e0       	ldi	r24, 0x01	; 1
    931a:	80 93 bf 0d 	sts	0x0DBF, r24
				clear_sprites(3, 3);
    931e:	63 e0       	ldi	r22, 0x03	; 3
    9320:	83 e0       	ldi	r24, 0x03	; 3
    9322:	0e 94 4c 48 	call	0x9098	; 0x9098 <clear_sprites>
				LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.prone), extendedSprites[PLAYER_SLOT].flags);
    9326:	40 91 93 0f 	lds	r20, 0x0F93
    932a:	87 e2       	ldi	r24, 0x27	; 39
    932c:	9e e0       	ldi	r25, 0x0E	; 14
    932e:	64 c0       	rjmp	.+200    	; 0x93f8 <update_player+0x1c6>
			}
			else if ((game.joypadState.held & BTN_RIGHT) && (game.player.shared.x/8 + 2 < LEVEL_WIDTH))
    9330:	17 ff       	sbrs	r17, 7
    9332:	2e c0       	rjmp	.+92     	; 0x9390 <update_player+0x15e>
    9334:	20 e0       	ldi	r18, 0x00	; 0
    9336:	30 e0       	ldi	r19, 0x00	; 0
    9338:	40 e0       	ldi	r20, 0x00	; 0
    933a:	5e e3       	ldi	r21, 0x3E	; 62
    933c:	60 91 af 0d 	lds	r22, 0x0DAF
    9340:	70 91 b0 0d 	lds	r23, 0x0DB0
    9344:	80 91 b1 0d 	lds	r24, 0x0DB1
    9348:	90 91 b2 0d 	lds	r25, 0x0DB2
    934c:	0e 94 52 4d 	call	0x9aa4	; 0x9aa4 <__mulsf3>
    9350:	20 e0       	ldi	r18, 0x00	; 0
    9352:	30 e0       	ldi	r19, 0x00	; 0
    9354:	40 e0       	ldi	r20, 0x00	; 0
    9356:	50 e4       	ldi	r21, 0x40	; 64
    9358:	0e 94 08 4c 	call	0x9810	; 0x9810 <__addsf3>
    935c:	20 e0       	ldi	r18, 0x00	; 0
    935e:	30 e0       	ldi	r19, 0x00	; 0
    9360:	4f e7       	ldi	r20, 0x7F	; 127
    9362:	53 e4       	ldi	r21, 0x43	; 67
    9364:	0e 94 6c 4c 	call	0x98d8	; 0x98d8 <__cmpsf2>
    9368:	87 ff       	sbrs	r24, 7
    936a:	12 c0       	rjmp	.+36     	; 0x9390 <update_player+0x15e>
			{
				game.player.shared.vx = RUN_SPEED;
    936c:	8c e3       	ldi	r24, 0x3C	; 60
    936e:	90 e0       	ldi	r25, 0x00	; 0
    9370:	90 93 b8 0d 	sts	0x0DB8, r25
    9374:	80 93 b7 0d 	sts	0x0DB7, r24
				game.player.flags = RUNNING;
    9378:	82 e0       	ldi	r24, 0x02	; 2
    937a:	80 93 bb 0d 	sts	0x0DBB, r24
				game.player.direction = D_RIGHT;
    937e:	81 e0       	ldi	r24, 0x01	; 1
    9380:	80 93 bd 0d 	sts	0x0DBD, r24
				LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.run), 0);
    9384:	87 e1       	ldi	r24, 0x17	; 23
    9386:	9e e0       	ldi	r25, 0x0E	; 14
    9388:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <LBGetNextFrame>
    938c:	40 e0       	ldi	r20, 0x00	; 0
    938e:	38 c0       	rjmp	.+112    	; 0x9400 <update_player+0x1ce>
			}
			else if ((game.joypadState.held & BTN_LEFT) && (game.player.shared.x > game.camera_x))
    9390:	16 ff       	sbrs	r17, 6
    9392:	27 c0       	rjmp	.+78     	; 0x93e2 <update_player+0x1b0>
    9394:	60 91 95 0d 	lds	r22, 0x0D95
    9398:	70 91 96 0d 	lds	r23, 0x0D96
    939c:	80 e0       	ldi	r24, 0x00	; 0
    939e:	90 e0       	ldi	r25, 0x00	; 0
    93a0:	0e 94 9c 4c 	call	0x9938	; 0x9938 <__floatunsisf>
    93a4:	9b 01       	movw	r18, r22
    93a6:	ac 01       	movw	r20, r24
    93a8:	60 91 af 0d 	lds	r22, 0x0DAF
    93ac:	70 91 b0 0d 	lds	r23, 0x0DB0
    93b0:	80 91 b1 0d 	lds	r24, 0x0DB1
    93b4:	90 91 b2 0d 	lds	r25, 0x0DB2
    93b8:	0e 94 4e 4d 	call	0x9a9c	; 0x9a9c <__gesf2>
    93bc:	18 16       	cp	r1, r24
    93be:	8c f4       	brge	.+34     	; 0x93e2 <update_player+0x1b0>
			{
				game.player.shared.vx = -RUN_SPEED;
    93c0:	84 ec       	ldi	r24, 0xC4	; 196
    93c2:	9f ef       	ldi	r25, 0xFF	; 255
    93c4:	90 93 b8 0d 	sts	0x0DB8, r25
    93c8:	80 93 b7 0d 	sts	0x0DB7, r24
				game.player.flags = RUNNING;
    93cc:	82 e0       	ldi	r24, 0x02	; 2
    93ce:	80 93 bb 0d 	sts	0x0DBB, r24
				game.player.direction = D_LEFT;
    93d2:	10 92 bd 0d 	sts	0x0DBD, r1
				LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.run), SPRITE_FLIP_X);
    93d6:	87 e1       	ldi	r24, 0x17	; 23
    93d8:	9e e0       	ldi	r25, 0x0E	; 14
    93da:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <LBGetNextFrame>
    93de:	41 e0       	ldi	r20, 0x01	; 1
    93e0:	0f c0       	rjmp	.+30     	; 0x9400 <update_player+0x1ce>
			}
			else
			{
				game.player.flags = IDLE;
    93e2:	88 e0       	ldi	r24, 0x08	; 8
    93e4:	80 93 bb 0d 	sts	0x0DBB, r24
				game.player.shared.vx = 0;
    93e8:	10 92 b8 0d 	sts	0x0DB8, r1
    93ec:	10 92 b7 0d 	sts	0x0DB7, r1
				LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.idle), extendedSprites[PLAYER_SLOT].flags);
    93f0:	40 91 93 0f 	lds	r20, 0x0F93
    93f4:	8f e0       	ldi	r24, 0x0F	; 15
    93f6:	9e e0       	ldi	r25, 0x0E	; 14
    93f8:	49 83       	std	Y+1, r20	; 0x01
    93fa:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <LBGetNextFrame>
    93fe:	49 81       	ldd	r20, Y+1	; 0x01
    9400:	bc 01       	movw	r22, r24
    9402:	80 e0       	ldi	r24, 0x00	; 0
    9404:	0e 94 f8 37 	call	0x6ff0	; 0x6ff0 <LBMapSprite>
			}
			if (game.joypadState.pressed & BTN_B && !(game.player.flags & PRONE))
    9408:	80 91 81 0f 	lds	r24, 0x0F81
    940c:	80 ff       	sbrs	r24, 0
    940e:	36 c1       	rjmp	.+620    	; 0x967c <update_player+0x44a>
    9410:	80 91 bb 0d 	lds	r24, 0x0DBB
    9414:	82 fd       	sbrc	r24, 2
    9416:	32 c1       	rjmp	.+612    	; 0x967c <update_player+0x44a>
			{
				game.player.shared.vy = -JUMP_SPEED;
    9418:	80 e0       	ldi	r24, 0x00	; 0
    941a:	90 e0       	ldi	r25, 0x00	; 0
    941c:	a6 e1       	ldi	r26, 0x16	; 22
    941e:	b3 ec       	ldi	r27, 0xC3	; 195
    9420:	80 93 ab 0d 	sts	0x0DAB, r24
    9424:	90 93 ac 0d 	sts	0x0DAC, r25
    9428:	a0 93 ad 0d 	sts	0x0DAD, r26
    942c:	b0 93 ae 0d 	sts	0x0DAE, r27
				game.player.shared.gravity = GRAVITY;
    9430:	8f ef       	ldi	r24, 0xFF	; 255
    9432:	80 93 b9 0d 	sts	0x0DB9, r24
				game.player.flags = JUMPING;
    9436:	81 e0       	ldi	r24, 0x01	; 1
    9438:	80 93 bb 0d 	sts	0x0DBB, r24
				game.player.width = 2;
    943c:	82 e0       	ldi	r24, 0x02	; 2
    943e:	80 93 be 0d 	sts	0x0DBE, r24
				game.player.height = 3;
    9442:	83 e0       	ldi	r24, 0x03	; 3
    9444:	80 93 bf 0d 	sts	0x0DBF, r24
				LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), extendedSprites[PLAYER_SLOT].flags);
    9448:	40 91 93 0f 	lds	r20, 0x0F93
    944c:	8f e1       	ldi	r24, 0x1F	; 31
    944e:	9e e0       	ldi	r25, 0x0E	; 14
    9450:	49 83       	std	Y+1, r20	; 0x01
    9452:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <LBGetNextFrame>
    9456:	49 81       	ldd	r20, Y+1	; 0x01
    9458:	08 c1       	rjmp	.+528    	; 0x966a <update_player+0x438>
			}
		}
	}
	else if (game.player.flags & JUMPING)
    945a:	80 ff       	sbrs	r24, 0
    945c:	6d c0       	rjmp	.+218    	; 0x9538 <update_player+0x306>
	{
		if ((game.joypadState.held & BTN_RIGHT) && (game.player.shared.x/8 + 2 < LEVEL_WIDTH))
    945e:	10 91 85 0f 	lds	r17, 0x0F85
    9462:	17 ff       	sbrs	r17, 7
    9464:	2b c0       	rjmp	.+86     	; 0x94bc <update_player+0x28a>
    9466:	20 e0       	ldi	r18, 0x00	; 0
    9468:	30 e0       	ldi	r19, 0x00	; 0
    946a:	40 e0       	ldi	r20, 0x00	; 0
    946c:	5e e3       	ldi	r21, 0x3E	; 62
    946e:	60 91 af 0d 	lds	r22, 0x0DAF
    9472:	70 91 b0 0d 	lds	r23, 0x0DB0
    9476:	80 91 b1 0d 	lds	r24, 0x0DB1
    947a:	90 91 b2 0d 	lds	r25, 0x0DB2
    947e:	0e 94 52 4d 	call	0x9aa4	; 0x9aa4 <__mulsf3>
    9482:	20 e0       	ldi	r18, 0x00	; 0
    9484:	30 e0       	ldi	r19, 0x00	; 0
    9486:	40 e0       	ldi	r20, 0x00	; 0
    9488:	50 e4       	ldi	r21, 0x40	; 64
    948a:	0e 94 08 4c 	call	0x9810	; 0x9810 <__addsf3>
    948e:	20 e0       	ldi	r18, 0x00	; 0
    9490:	30 e0       	ldi	r19, 0x00	; 0
    9492:	4f e7       	ldi	r20, 0x7F	; 127
    9494:	53 e4       	ldi	r21, 0x43	; 67
    9496:	0e 94 6c 4c 	call	0x98d8	; 0x98d8 <__cmpsf2>
    949a:	87 ff       	sbrs	r24, 7
    949c:	0f c0       	rjmp	.+30     	; 0x94bc <update_player+0x28a>
		{
			game.player.shared.vx = RUN_SPEED;
    949e:	8c e3       	ldi	r24, 0x3C	; 60
    94a0:	90 e0       	ldi	r25, 0x00	; 0
    94a2:	90 93 b8 0d 	sts	0x0DB8, r25
    94a6:	80 93 b7 0d 	sts	0x0DB7, r24
			game.player.direction = D_RIGHT;
    94aa:	81 e0       	ldi	r24, 0x01	; 1
    94ac:	80 93 bd 0d 	sts	0x0DBD, r24
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), 0);
    94b0:	8f e1       	ldi	r24, 0x1F	; 31
    94b2:	9e e0       	ldi	r25, 0x0E	; 14
    94b4:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <LBGetNextFrame>
    94b8:	40 e0       	ldi	r20, 0x00	; 0
    94ba:	32 c0       	rjmp	.+100    	; 0x9520 <update_player+0x2ee>
		}
		else if ((game.joypadState.held & BTN_LEFT) && (game.player.shared.x > game.camera_x))
    94bc:	16 ff       	sbrs	r17, 6
    94be:	24 c0       	rjmp	.+72     	; 0x9508 <update_player+0x2d6>
    94c0:	60 91 95 0d 	lds	r22, 0x0D95
    94c4:	70 91 96 0d 	lds	r23, 0x0D96
    94c8:	80 e0       	ldi	r24, 0x00	; 0
    94ca:	90 e0       	ldi	r25, 0x00	; 0
    94cc:	0e 94 9c 4c 	call	0x9938	; 0x9938 <__floatunsisf>
    94d0:	9b 01       	movw	r18, r22
    94d2:	ac 01       	movw	r20, r24
    94d4:	60 91 af 0d 	lds	r22, 0x0DAF
    94d8:	70 91 b0 0d 	lds	r23, 0x0DB0
    94dc:	80 91 b1 0d 	lds	r24, 0x0DB1
    94e0:	90 91 b2 0d 	lds	r25, 0x0DB2
    94e4:	0e 94 4e 4d 	call	0x9a9c	; 0x9a9c <__gesf2>
    94e8:	18 16       	cp	r1, r24
    94ea:	74 f4       	brge	.+28     	; 0x9508 <update_player+0x2d6>
		{
			game.player.shared.vx = -RUN_SPEED;
    94ec:	84 ec       	ldi	r24, 0xC4	; 196
    94ee:	9f ef       	ldi	r25, 0xFF	; 255
    94f0:	90 93 b8 0d 	sts	0x0DB8, r25
    94f4:	80 93 b7 0d 	sts	0x0DB7, r24
			game.player.direction = D_LEFT;
    94f8:	10 92 bd 0d 	sts	0x0DBD, r1
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), SPRITE_FLIP_X);
    94fc:	8f e1       	ldi	r24, 0x1F	; 31
    94fe:	9e e0       	ldi	r25, 0x0E	; 14
    9500:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <LBGetNextFrame>
    9504:	41 e0       	ldi	r20, 0x01	; 1
    9506:	0c c0       	rjmp	.+24     	; 0x9520 <update_player+0x2ee>
		}
		else
		{
			game.player.shared.vx = 0;
    9508:	10 92 b8 0d 	sts	0x0DB8, r1
    950c:	10 92 b7 0d 	sts	0x0DB7, r1
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), extendedSprites[PLAYER_SLOT].flags);
    9510:	40 91 93 0f 	lds	r20, 0x0F93
    9514:	8f e1       	ldi	r24, 0x1F	; 31
    9516:	9e e0       	ldi	r25, 0x0E	; 14
    9518:	49 83       	std	Y+1, r20	; 0x01
    951a:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <LBGetNextFrame>
    951e:	49 81       	ldd	r20, Y+1	; 0x01
    9520:	bc 01       	movw	r22, r24
    9522:	80 e0       	ldi	r24, 0x00	; 0
    9524:	0e 94 f8 37 	call	0x6ff0	; 0x6ff0 <LBMapSprite>
		}
		
		if (game.player.shared.gravity == 0)
    9528:	80 91 b9 0d 	lds	r24, 0x0DB9
    952c:	81 11       	cpse	r24, r1
    952e:	a6 c0       	rjmp	.+332    	; 0x967c <update_player+0x44a>
		{
			game.player.flags = IDLE;
    9530:	88 e0       	ldi	r24, 0x08	; 8
    9532:	80 93 bb 0d 	sts	0x0DBB, r24
    9536:	a2 c0       	rjmp	.+324    	; 0x967c <update_player+0x44a>
		}
	}
	else if (game.player.flags & PRONE)
    9538:	82 ff       	sbrs	r24, 2
    953a:	a0 c0       	rjmp	.+320    	; 0x967c <update_player+0x44a>
	{
		if (game.joypadState.pressed & BTN_UP)
    953c:	80 91 81 0f 	lds	r24, 0x0F81
    9540:	84 ff       	sbrs	r24, 4
    9542:	3a c0       	rjmp	.+116    	; 0x95b8 <update_player+0x386>
		{
			game.player.flags = IDLE;	
    9544:	88 e0       	ldi	r24, 0x08	; 8
    9546:	80 93 bb 0d 	sts	0x0DBB, r24
			game.player.shared.y -= 16;
    954a:	20 e0       	ldi	r18, 0x00	; 0
    954c:	30 e0       	ldi	r19, 0x00	; 0
    954e:	40 e8       	ldi	r20, 0x80	; 128
    9550:	51 e4       	ldi	r21, 0x41	; 65
    9552:	60 91 b3 0d 	lds	r22, 0x0DB3
    9556:	70 91 b4 0d 	lds	r23, 0x0DB4
    955a:	80 91 b5 0d 	lds	r24, 0x0DB5
    955e:	90 91 b6 0d 	lds	r25, 0x0DB6
    9562:	0e 94 07 4c 	call	0x980e	; 0x980e <__subsf3>
    9566:	60 93 b3 0d 	sts	0x0DB3, r22
    956a:	70 93 b4 0d 	sts	0x0DB4, r23
    956e:	80 93 b5 0d 	sts	0x0DB5, r24
    9572:	90 93 b6 0d 	sts	0x0DB6, r25
			if(game.player.direction == D_RIGHT)
    9576:	80 91 bd 0d 	lds	r24, 0x0DBD
    957a:	81 30       	cpi	r24, 0x01	; 1
    957c:	b1 f4       	brne	.+44     	; 0x95aa <update_player+0x378>
			{
				game.player.shared.x += 8;
    957e:	20 e0       	ldi	r18, 0x00	; 0
    9580:	30 e0       	ldi	r19, 0x00	; 0
    9582:	40 e0       	ldi	r20, 0x00	; 0
    9584:	51 e4       	ldi	r21, 0x41	; 65
    9586:	60 91 af 0d 	lds	r22, 0x0DAF
    958a:	70 91 b0 0d 	lds	r23, 0x0DB0
    958e:	80 91 b1 0d 	lds	r24, 0x0DB1
    9592:	90 91 b2 0d 	lds	r25, 0x0DB2
    9596:	0e 94 08 4c 	call	0x9810	; 0x9810 <__addsf3>
    959a:	60 93 af 0d 	sts	0x0DAF, r22
    959e:	70 93 b0 0d 	sts	0x0DB0, r23
    95a2:	80 93 b1 0d 	sts	0x0DB1, r24
    95a6:	90 93 b2 0d 	sts	0x0DB2, r25
			}
			game.player.width = 2;
    95aa:	82 e0       	ldi	r24, 0x02	; 2
    95ac:	80 93 be 0d 	sts	0x0DBE, r24
			game.player.height = 3;
    95b0:	83 e0       	ldi	r24, 0x03	; 3
    95b2:	80 93 bf 0d 	sts	0x0DBF, r24
    95b6:	62 c0       	rjmp	.+196    	; 0x967c <update_player+0x44a>
		}
		else if (game.joypadState.pressed & BTN_B)
    95b8:	80 ff       	sbrs	r24, 0
    95ba:	43 c0       	rjmp	.+134    	; 0x9642 <update_player+0x410>
		{
			game.player.flags = JUMPING;
    95bc:	81 e0       	ldi	r24, 0x01	; 1
    95be:	80 93 bb 0d 	sts	0x0DBB, r24
			game.player.shared.y -= 16;
    95c2:	20 e0       	ldi	r18, 0x00	; 0
    95c4:	30 e0       	ldi	r19, 0x00	; 0
    95c6:	40 e8       	ldi	r20, 0x80	; 128
    95c8:	51 e4       	ldi	r21, 0x41	; 65
    95ca:	60 91 b3 0d 	lds	r22, 0x0DB3
    95ce:	70 91 b4 0d 	lds	r23, 0x0DB4
    95d2:	80 91 b5 0d 	lds	r24, 0x0DB5
    95d6:	90 91 b6 0d 	lds	r25, 0x0DB6
    95da:	0e 94 07 4c 	call	0x980e	; 0x980e <__subsf3>
    95de:	60 93 b3 0d 	sts	0x0DB3, r22
    95e2:	70 93 b4 0d 	sts	0x0DB4, r23
    95e6:	80 93 b5 0d 	sts	0x0DB5, r24
    95ea:	90 93 b6 0d 	sts	0x0DB6, r25
			if(game.player.direction == D_RIGHT)
    95ee:	80 91 bd 0d 	lds	r24, 0x0DBD
    95f2:	81 30       	cpi	r24, 0x01	; 1
    95f4:	b1 f4       	brne	.+44     	; 0x9622 <update_player+0x3f0>
			{
				game.player.shared.x += 8;
    95f6:	20 e0       	ldi	r18, 0x00	; 0
    95f8:	30 e0       	ldi	r19, 0x00	; 0
    95fa:	40 e0       	ldi	r20, 0x00	; 0
    95fc:	51 e4       	ldi	r21, 0x41	; 65
    95fe:	60 91 af 0d 	lds	r22, 0x0DAF
    9602:	70 91 b0 0d 	lds	r23, 0x0DB0
    9606:	80 91 b1 0d 	lds	r24, 0x0DB1
    960a:	90 91 b2 0d 	lds	r25, 0x0DB2
    960e:	0e 94 08 4c 	call	0x9810	; 0x9810 <__addsf3>
    9612:	60 93 af 0d 	sts	0x0DAF, r22
    9616:	70 93 b0 0d 	sts	0x0DB0, r23
    961a:	80 93 b1 0d 	sts	0x0DB1, r24
    961e:	90 93 b2 0d 	sts	0x0DB2, r25
			}
			game.player.shared.vy = -JUMP_SPEED;
    9622:	80 e0       	ldi	r24, 0x00	; 0
    9624:	90 e0       	ldi	r25, 0x00	; 0
    9626:	a6 e1       	ldi	r26, 0x16	; 22
    9628:	b3 ec       	ldi	r27, 0xC3	; 195
    962a:	80 93 ab 0d 	sts	0x0DAB, r24
    962e:	90 93 ac 0d 	sts	0x0DAC, r25
    9632:	a0 93 ad 0d 	sts	0x0DAD, r26
    9636:	b0 93 ae 0d 	sts	0x0DAE, r27
			game.player.shared.gravity = GRAVITY;
    963a:	8f ef       	ldi	r24, 0xFF	; 255
    963c:	80 93 b9 0d 	sts	0x0DB9, r24
    9640:	fd ce       	rjmp	.-518    	; 0x943c <update_player+0x20a>
			game.player.width = 2;
			game.player.height = 3;
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), extendedSprites[PLAYER_SLOT].flags);
		}
		else if (game.joypadState.pressed & BTN_LEFT)
    9642:	86 ff       	sbrs	r24, 6
    9644:	08 c0       	rjmp	.+16     	; 0x9656 <update_player+0x424>
		{
			game.player.direction = D_LEFT;
    9646:	10 92 bd 0d 	sts	0x0DBD, r1
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.prone), SPRITE_FLIP_X);
    964a:	87 e2       	ldi	r24, 0x27	; 39
    964c:	9e e0       	ldi	r25, 0x0E	; 14
    964e:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <LBGetNextFrame>
    9652:	41 e0       	ldi	r20, 0x01	; 1
    9654:	0a c0       	rjmp	.+20     	; 0x966a <update_player+0x438>
		}
		else if (game.joypadState.pressed & BTN_RIGHT)
    9656:	87 ff       	sbrs	r24, 7
    9658:	11 c0       	rjmp	.+34     	; 0x967c <update_player+0x44a>
		{
			game.player.direction = D_RIGHT;
    965a:	81 e0       	ldi	r24, 0x01	; 1
    965c:	80 93 bd 0d 	sts	0x0DBD, r24
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.prone), 0);
    9660:	87 e2       	ldi	r24, 0x27	; 39
    9662:	9e e0       	ldi	r25, 0x0E	; 14
    9664:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <LBGetNextFrame>
    9668:	40 e0       	ldi	r20, 0x00	; 0
    966a:	bc 01       	movw	r22, r24
    966c:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
}
    966e:	0f 90       	pop	r0
    9670:	df 91       	pop	r29
    9672:	cf 91       	pop	r28
    9674:	1f 91       	pop	r17
    9676:	0f 91       	pop	r16
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.prone), SPRITE_FLIP_X);
		}
		else if (game.joypadState.pressed & BTN_RIGHT)
		{
			game.player.direction = D_RIGHT;
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.prone), 0);
    9678:	0c 94 f8 37 	jmp	0x6ff0	; 0x6ff0 <LBMapSprite>
		}
	}
}
    967c:	0f 90       	pop	r0
    967e:	df 91       	pop	r29
    9680:	cf 91       	pop	r28
    9682:	1f 91       	pop	r17
    9684:	0f 91       	pop	r16
    9686:	08 95       	ret

00009688 <select_pressed>:
	DrawMap2(6, 5, (const char*) map_splash);
	LBMapSprite(0, map_right_arrow, 0);
}

char select_pressed(JoyPadState* p)
{
    9688:	fc 01       	movw	r30, r24
    968a:	20 81       	ld	r18, Z
    968c:	31 81       	ldd	r19, Z+1	; 0x01
    968e:	28 70       	andi	r18, 0x08	; 8
    9690:	31 70       	andi	r19, 0x01	; 1
	return (p->pressed & BTN_A) || (p->pressed & BTN_START);
    9692:	81 e0       	ldi	r24, 0x01	; 1
    9694:	23 2b       	or	r18, r19
    9696:	09 f4       	brne	.+2      	; 0x969a <select_pressed+0x12>
    9698:	80 e0       	ldi	r24, 0x00	; 0
}
    969a:	08 95       	ret

0000969c <update_splash>:

void update_splash()
{
    969c:	0f 93       	push	r16
    969e:	cf 93       	push	r28
	if (game.joypadState.pressed & BTN_DOWN && game.selection == START_SELECTED)
    96a0:	80 91 81 0f 	lds	r24, 0x0F81
    96a4:	c0 91 a3 0d 	lds	r28, 0x0DA3
    96a8:	85 ff       	sbrs	r24, 5
    96aa:	06 c0       	rjmp	.+12     	; 0x96b8 <update_splash+0x1c>
    96ac:	c1 11       	cpse	r28, r1
    96ae:	04 c0       	rjmp	.+8      	; 0x96b8 <update_splash+0x1c>
	{
		game.selection = HIGH_SCORES_SELECTED;
    96b0:	81 e0       	ldi	r24, 0x01	; 1
    96b2:	80 93 a3 0d 	sts	0x0DA3, r24
    96b6:	06 c0       	rjmp	.+12     	; 0x96c4 <update_splash+0x28>
		SFX_NAVIGATE;
	}
	else if (game.joypadState.pressed & BTN_UP && game.selection == HIGH_SCORES_SELECTED)
    96b8:	84 ff       	sbrs	r24, 4
    96ba:	0a c0       	rjmp	.+20     	; 0x96d0 <update_splash+0x34>
    96bc:	c1 30       	cpi	r28, 0x01	; 1
    96be:	41 f4       	brne	.+16     	; 0x96d0 <update_splash+0x34>
	{
		game.selection = START_SELECTED;
    96c0:	10 92 a3 0d 	sts	0x0DA3, r1
		SFX_NAVIGATE;
    96c4:	41 e0       	ldi	r20, 0x01	; 1
    96c6:	6f ef       	ldi	r22, 0xFF	; 255
    96c8:	82 e0       	ldi	r24, 0x02	; 2
    96ca:	0e 94 60 2b 	call	0x56c0	; 0x56c0 <TriggerFx>
    96ce:	14 c0       	rjmp	.+40     	; 0x96f8 <update_splash+0x5c>
	}
	else if (select_pressed(&game.joypadState) && game.selection == START_SELECTED)
    96d0:	81 e8       	ldi	r24, 0x81	; 129
    96d2:	9f e0       	ldi	r25, 0x0F	; 15
    96d4:	0e 94 44 4b 	call	0x9688	; 0x9688 <select_pressed>
    96d8:	88 23       	and	r24, r24
    96da:	71 f0       	breq	.+28     	; 0x96f8 <update_splash+0x5c>
    96dc:	c1 11       	cpse	r28, r1
    96de:	0c c0       	rjmp	.+24     	; 0x96f8 <update_splash+0x5c>
	{
		game.current_screen = LEVEL;
    96e0:	82 e0       	ldi	r24, 0x02	; 2
    96e2:	80 93 a0 0d 	sts	0x0DA0, r24
		SFX_NAVIGATE;
    96e6:	41 e0       	ldi	r20, 0x01	; 1
    96e8:	6f ef       	ldi	r22, 0xFF	; 255
    96ea:	0e 94 60 2b 	call	0x56c0	; 0x56c0 <TriggerFx>
		level_transition(0);
    96ee:	80 e0       	ldi	r24, 0x00	; 0
	}
	else
	{
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
	}
}
    96f0:	cf 91       	pop	r28
    96f2:	0f 91       	pop	r16
	}
	else if (select_pressed(&game.joypadState) && game.selection == START_SELECTED)
	{
		game.current_screen = LEVEL;
		SFX_NAVIGATE;
		level_transition(0);
    96f4:	0c 94 6e 48 	jmp	0x90dc	; 0x90dc <level_transition>
		return;
	}
	
	if (game.selection == START_SELECTED)
    96f8:	80 91 a3 0d 	lds	r24, 0x0DA3
	{
		LBMoveSprite(0, 7*8, 15*8, 1, 1);
    96fc:	01 e0       	ldi	r16, 0x01	; 1
    96fe:	21 e0       	ldi	r18, 0x01	; 1
		SFX_NAVIGATE;
		level_transition(0);
		return;
	}
	
	if (game.selection == START_SELECTED)
    9700:	81 11       	cpse	r24, r1
    9702:	03 c0       	rjmp	.+6      	; 0x970a <update_splash+0x6e>
	{
		LBMoveSprite(0, 7*8, 15*8, 1, 1);
    9704:	48 e7       	ldi	r20, 0x78	; 120
    9706:	68 e3       	ldi	r22, 0x38	; 56
    9708:	03 c0       	rjmp	.+6      	; 0x9710 <update_splash+0x74>
	}
	else
	{
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
    970a:	40 e8       	ldi	r20, 0x80	; 128
    970c:	68 e3       	ldi	r22, 0x38	; 56
    970e:	80 e0       	ldi	r24, 0x00	; 0
    9710:	0e 94 4a 38 	call	0x7094	; 0x7094 <LBMoveSprite>
	}
}
    9714:	cf 91       	pop	r28
    9716:	0f 91       	pop	r16
    9718:	08 95       	ret

0000971a <main>:

int main()
{
	// Initialize
	InitMusicPlayer(my_patches);
    971a:	8c e3       	ldi	r24, 0x3C	; 60
    971c:	9b e1       	ldi	r25, 0x1B	; 27
    971e:	0e 94 53 2a 	call	0x54a6	; 0x54a6 <InitMusicPlayer>
	ClearVram();
    9722:	0e 94 e7 27 	call	0x4fce	; 0x4fce <ClearVram>
	SetMasterVolume(0x05);
    9726:	85 e0       	ldi	r24, 0x05	; 5
    9728:	0e 94 07 2e 	call	0x5c0e	; 0x5c0e <SetMasterVolume>
	SetTileTable(tiles_data);
    972c:	85 e3       	ldi	r24, 0x35	; 53
    972e:	91 e3       	ldi	r25, 0x31	; 49
    9730:	0e 94 02 28 	call	0x5004	; 0x5004 <SetTileTable>
	SetSpritesTileTable(sprites_data);
    9734:	8b eb       	ldi	r24, 0xBB	; 187
    9736:	9c e1       	ldi	r25, 0x1C	; 28
    9738:	0e 94 e2 27 	call	0x4fc4	; 0x4fc4 <SetSpritesTileTable>
	}
}

void LBSetFontTilesMap(char* tiles_map)
{
	font_tiles_map = tiles_map;
    973c:	87 e3       	ldi	r24, 0x37	; 55
    973e:	94 e4       	ldi	r25, 0x44	; 68
    9740:	90 93 6e 0d 	sts	0x0D6E, r25
    9744:	80 93 6d 0d 	sts	0x0D6D, r24
	LBSetFontTilesMap((char*) map_font);
	FadeIn(FRAMES_PER_FADE, false);
    9748:	60 e0       	ldi	r22, 0x00	; 0
    974a:	83 e0       	ldi	r24, 0x03	; 3
    974c:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <FadeIn>
	init_game_state();
    9750:	0e 94 c7 38 	call	0x718e	; 0x718e <init_game_state>
	load_splash();
    9754:	0e 94 a7 48 	call	0x914e	; 0x914e <load_splash>
	while (1)
	{
		WaitVsync(1);
    9758:	81 e0       	ldi	r24, 0x01	; 1
    975a:	90 e0       	ldi	r25, 0x00	; 0
    975c:	0e 94 29 36 	call	0x6c52	; 0x6c52 <WaitVsync>
		LBGetJoyPadState(&game.joypadState, 0);
    9760:	60 e0       	ldi	r22, 0x00	; 0
    9762:	81 e8       	ldi	r24, 0x81	; 129
    9764:	9f e0       	ldi	r25, 0x0F	; 15
    9766:	0e 94 ec 36 	call	0x6dd8	; 0x6dd8 <LBGetJoyPadState>
		switch (game.current_screen)
    976a:	80 91 a0 0d 	lds	r24, 0x0DA0
    976e:	88 23       	and	r24, r24
    9770:	a9 f0       	breq	.+42     	; 0x979c <main+0x82>
    9772:	82 30       	cpi	r24, 0x02	; 2
    9774:	89 f7       	brne	.-30     	; 0x9758 <main+0x3e>
			case SPLASH:
				update_splash();
				LBRotateSprites();
				break;
			case LEVEL:
				update_level();
    9776:	0e 94 a6 47 	call	0x8f4c	; 0x8f4c <update_level>
				update_player();
    977a:	0e 94 19 49 	call	0x9232	; 0x9232 <update_player>
				update_shot();
    977e:	0e 94 39 3d 	call	0x7a72	; 0x7a72 <update_shot>
				update_enemies();
    9782:	0e 94 51 44 	call	0x88a2	; 0x88a2 <update_enemies>
				update_enemy_shots();
    9786:	0e 94 8e 44 	call	0x891c	; 0x891c <update_enemy_shots>
				animate_player();
    978a:	0e 94 b1 43 	call	0x8762	; 0x8762 <animate_player>
				animate_shot();
    978e:	0e 94 2d 41 	call	0x825a	; 0x825a <animate_shot>
				animate_enemies();
    9792:	0e 94 28 45 	call	0x8a50	; 0x8a50 <animate_enemies>
				animate_enemy_shots();
    9796:	0e 94 6b 46 	call	0x8cd6	; 0x8cd6 <animate_enemy_shots>
    979a:	02 c0       	rjmp	.+4      	; 0x97a0 <main+0x86>
		WaitVsync(1);
		LBGetJoyPadState(&game.joypadState, 0);
		switch (game.current_screen)
		{
			case SPLASH:
				update_splash();
    979c:	0e 94 4e 4b 	call	0x969c	; 0x969c <update_splash>
				update_enemy_shots();
				animate_player();
				animate_shot();
				animate_enemies();
				animate_enemy_shots();
				LBRotateSprites();
    97a0:	0e 94 88 38 	call	0x7110	; 0x7110 <LBRotateSprites>
				break;
    97a4:	d9 cf       	rjmp	.-78     	; 0x9758 <main+0x3e>

000097a6 <__udivmodqi4>:
    97a6:	99 1b       	sub	r25, r25
    97a8:	79 e0       	ldi	r23, 0x09	; 9
    97aa:	04 c0       	rjmp	.+8      	; 0x97b4 <__udivmodqi4_ep>

000097ac <__udivmodqi4_loop>:
    97ac:	99 1f       	adc	r25, r25
    97ae:	96 17       	cp	r25, r22
    97b0:	08 f0       	brcs	.+2      	; 0x97b4 <__udivmodqi4_ep>
    97b2:	96 1b       	sub	r25, r22

000097b4 <__udivmodqi4_ep>:
    97b4:	88 1f       	adc	r24, r24
    97b6:	7a 95       	dec	r23
    97b8:	c9 f7       	brne	.-14     	; 0x97ac <__udivmodqi4_loop>
    97ba:	80 95       	com	r24
    97bc:	08 95       	ret

000097be <__udivmodhi4>:
    97be:	aa 1b       	sub	r26, r26
    97c0:	bb 1b       	sub	r27, r27
    97c2:	51 e1       	ldi	r21, 0x11	; 17
    97c4:	07 c0       	rjmp	.+14     	; 0x97d4 <__udivmodhi4_ep>

000097c6 <__udivmodhi4_loop>:
    97c6:	aa 1f       	adc	r26, r26
    97c8:	bb 1f       	adc	r27, r27
    97ca:	a6 17       	cp	r26, r22
    97cc:	b7 07       	cpc	r27, r23
    97ce:	10 f0       	brcs	.+4      	; 0x97d4 <__udivmodhi4_ep>
    97d0:	a6 1b       	sub	r26, r22
    97d2:	b7 0b       	sbc	r27, r23

000097d4 <__udivmodhi4_ep>:
    97d4:	88 1f       	adc	r24, r24
    97d6:	99 1f       	adc	r25, r25
    97d8:	5a 95       	dec	r21
    97da:	a9 f7       	brne	.-22     	; 0x97c6 <__udivmodhi4_loop>
    97dc:	80 95       	com	r24
    97de:	90 95       	com	r25
    97e0:	bc 01       	movw	r22, r24
    97e2:	cd 01       	movw	r24, r26
    97e4:	08 95       	ret

000097e6 <__divmodhi4>:
    97e6:	97 fb       	bst	r25, 7
    97e8:	07 2e       	mov	r0, r23
    97ea:	16 f4       	brtc	.+4      	; 0x97f0 <__divmodhi4+0xa>
    97ec:	00 94       	com	r0
    97ee:	07 d0       	rcall	.+14     	; 0x97fe <__divmodhi4_neg1>
    97f0:	77 fd       	sbrc	r23, 7
    97f2:	09 d0       	rcall	.+18     	; 0x9806 <__divmodhi4_neg2>
    97f4:	0e 94 df 4b 	call	0x97be	; 0x97be <__udivmodhi4>
    97f8:	07 fc       	sbrc	r0, 7
    97fa:	05 d0       	rcall	.+10     	; 0x9806 <__divmodhi4_neg2>
    97fc:	3e f4       	brtc	.+14     	; 0x980c <__divmodhi4_exit>

000097fe <__divmodhi4_neg1>:
    97fe:	90 95       	com	r25
    9800:	81 95       	neg	r24
    9802:	9f 4f       	sbci	r25, 0xFF	; 255
    9804:	08 95       	ret

00009806 <__divmodhi4_neg2>:
    9806:	70 95       	com	r23
    9808:	61 95       	neg	r22
    980a:	7f 4f       	sbci	r23, 0xFF	; 255

0000980c <__divmodhi4_exit>:
    980c:	08 95       	ret

0000980e <__subsf3>:
    980e:	50 58       	subi	r21, 0x80	; 128

00009810 <__addsf3>:
    9810:	bb 27       	eor	r27, r27
    9812:	aa 27       	eor	r26, r26
    9814:	0e d0       	rcall	.+28     	; 0x9832 <__addsf3x>
    9816:	08 c1       	rjmp	.+528    	; 0x9a28 <__fp_round>
    9818:	f9 d0       	rcall	.+498    	; 0x9a0c <__fp_pscA>
    981a:	30 f0       	brcs	.+12     	; 0x9828 <__addsf3+0x18>
    981c:	fe d0       	rcall	.+508    	; 0x9a1a <__fp_pscB>
    981e:	20 f0       	brcs	.+8      	; 0x9828 <__addsf3+0x18>
    9820:	31 f4       	brne	.+12     	; 0x982e <__addsf3+0x1e>
    9822:	9f 3f       	cpi	r25, 0xFF	; 255
    9824:	11 f4       	brne	.+4      	; 0x982a <__addsf3+0x1a>
    9826:	1e f4       	brtc	.+6      	; 0x982e <__addsf3+0x1e>
    9828:	ee c0       	rjmp	.+476    	; 0x9a06 <__fp_nan>
    982a:	0e f4       	brtc	.+2      	; 0x982e <__addsf3+0x1e>
    982c:	e0 95       	com	r30
    982e:	e7 fb       	bst	r30, 7
    9830:	e4 c0       	rjmp	.+456    	; 0x99fa <__fp_inf>

00009832 <__addsf3x>:
    9832:	e9 2f       	mov	r30, r25
    9834:	0a d1       	rcall	.+532    	; 0x9a4a <__fp_split3>
    9836:	80 f3       	brcs	.-32     	; 0x9818 <__addsf3+0x8>
    9838:	ba 17       	cp	r27, r26
    983a:	62 07       	cpc	r22, r18
    983c:	73 07       	cpc	r23, r19
    983e:	84 07       	cpc	r24, r20
    9840:	95 07       	cpc	r25, r21
    9842:	18 f0       	brcs	.+6      	; 0x984a <__addsf3x+0x18>
    9844:	71 f4       	brne	.+28     	; 0x9862 <__addsf3x+0x30>
    9846:	9e f5       	brtc	.+102    	; 0x98ae <__addsf3x+0x7c>
    9848:	22 c1       	rjmp	.+580    	; 0x9a8e <__fp_zero>
    984a:	0e f4       	brtc	.+2      	; 0x984e <__addsf3x+0x1c>
    984c:	e0 95       	com	r30
    984e:	0b 2e       	mov	r0, r27
    9850:	ba 2f       	mov	r27, r26
    9852:	a0 2d       	mov	r26, r0
    9854:	0b 01       	movw	r0, r22
    9856:	b9 01       	movw	r22, r18
    9858:	90 01       	movw	r18, r0
    985a:	0c 01       	movw	r0, r24
    985c:	ca 01       	movw	r24, r20
    985e:	a0 01       	movw	r20, r0
    9860:	11 24       	eor	r1, r1
    9862:	ff 27       	eor	r31, r31
    9864:	59 1b       	sub	r21, r25
    9866:	99 f0       	breq	.+38     	; 0x988e <__addsf3x+0x5c>
    9868:	59 3f       	cpi	r21, 0xF9	; 249
    986a:	50 f4       	brcc	.+20     	; 0x9880 <__addsf3x+0x4e>
    986c:	50 3e       	cpi	r21, 0xE0	; 224
    986e:	68 f1       	brcs	.+90     	; 0x98ca <__addsf3x+0x98>
    9870:	1a 16       	cp	r1, r26
    9872:	f0 40       	sbci	r31, 0x00	; 0
    9874:	a2 2f       	mov	r26, r18
    9876:	23 2f       	mov	r18, r19
    9878:	34 2f       	mov	r19, r20
    987a:	44 27       	eor	r20, r20
    987c:	58 5f       	subi	r21, 0xF8	; 248
    987e:	f3 cf       	rjmp	.-26     	; 0x9866 <__addsf3x+0x34>
    9880:	46 95       	lsr	r20
    9882:	37 95       	ror	r19
    9884:	27 95       	ror	r18
    9886:	a7 95       	ror	r26
    9888:	f0 40       	sbci	r31, 0x00	; 0
    988a:	53 95       	inc	r21
    988c:	c9 f7       	brne	.-14     	; 0x9880 <__addsf3x+0x4e>
    988e:	7e f4       	brtc	.+30     	; 0x98ae <__addsf3x+0x7c>
    9890:	1f 16       	cp	r1, r31
    9892:	ba 0b       	sbc	r27, r26
    9894:	62 0b       	sbc	r22, r18
    9896:	73 0b       	sbc	r23, r19
    9898:	84 0b       	sbc	r24, r20
    989a:	ba f0       	brmi	.+46     	; 0x98ca <__addsf3x+0x98>
    989c:	91 50       	subi	r25, 0x01	; 1
    989e:	a1 f0       	breq	.+40     	; 0x98c8 <__addsf3x+0x96>
    98a0:	ff 0f       	add	r31, r31
    98a2:	bb 1f       	adc	r27, r27
    98a4:	66 1f       	adc	r22, r22
    98a6:	77 1f       	adc	r23, r23
    98a8:	88 1f       	adc	r24, r24
    98aa:	c2 f7       	brpl	.-16     	; 0x989c <__addsf3x+0x6a>
    98ac:	0e c0       	rjmp	.+28     	; 0x98ca <__addsf3x+0x98>
    98ae:	ba 0f       	add	r27, r26
    98b0:	62 1f       	adc	r22, r18
    98b2:	73 1f       	adc	r23, r19
    98b4:	84 1f       	adc	r24, r20
    98b6:	48 f4       	brcc	.+18     	; 0x98ca <__addsf3x+0x98>
    98b8:	87 95       	ror	r24
    98ba:	77 95       	ror	r23
    98bc:	67 95       	ror	r22
    98be:	b7 95       	ror	r27
    98c0:	f7 95       	ror	r31
    98c2:	9e 3f       	cpi	r25, 0xFE	; 254
    98c4:	08 f0       	brcs	.+2      	; 0x98c8 <__addsf3x+0x96>
    98c6:	b3 cf       	rjmp	.-154    	; 0x982e <__addsf3+0x1e>
    98c8:	93 95       	inc	r25
    98ca:	88 0f       	add	r24, r24
    98cc:	08 f0       	brcs	.+2      	; 0x98d0 <__addsf3x+0x9e>
    98ce:	99 27       	eor	r25, r25
    98d0:	ee 0f       	add	r30, r30
    98d2:	97 95       	ror	r25
    98d4:	87 95       	ror	r24
    98d6:	08 95       	ret

000098d8 <__cmpsf2>:
    98d8:	6c d0       	rcall	.+216    	; 0x99b2 <__fp_cmp>
    98da:	08 f4       	brcc	.+2      	; 0x98de <__cmpsf2+0x6>
    98dc:	81 e0       	ldi	r24, 0x01	; 1
    98de:	08 95       	ret

000098e0 <__fixunssfsi>:
    98e0:	bc d0       	rcall	.+376    	; 0x9a5a <__fp_splitA>
    98e2:	88 f0       	brcs	.+34     	; 0x9906 <__fixunssfsi+0x26>
    98e4:	9f 57       	subi	r25, 0x7F	; 127
    98e6:	90 f0       	brcs	.+36     	; 0x990c <__fixunssfsi+0x2c>
    98e8:	b9 2f       	mov	r27, r25
    98ea:	99 27       	eor	r25, r25
    98ec:	b7 51       	subi	r27, 0x17	; 23
    98ee:	a0 f0       	brcs	.+40     	; 0x9918 <__fixunssfsi+0x38>
    98f0:	d1 f0       	breq	.+52     	; 0x9926 <__fixunssfsi+0x46>
    98f2:	66 0f       	add	r22, r22
    98f4:	77 1f       	adc	r23, r23
    98f6:	88 1f       	adc	r24, r24
    98f8:	99 1f       	adc	r25, r25
    98fa:	1a f0       	brmi	.+6      	; 0x9902 <__fixunssfsi+0x22>
    98fc:	ba 95       	dec	r27
    98fe:	c9 f7       	brne	.-14     	; 0x98f2 <__fixunssfsi+0x12>
    9900:	12 c0       	rjmp	.+36     	; 0x9926 <__fixunssfsi+0x46>
    9902:	b1 30       	cpi	r27, 0x01	; 1
    9904:	81 f0       	breq	.+32     	; 0x9926 <__fixunssfsi+0x46>
    9906:	c3 d0       	rcall	.+390    	; 0x9a8e <__fp_zero>
    9908:	b1 e0       	ldi	r27, 0x01	; 1
    990a:	08 95       	ret
    990c:	c0 c0       	rjmp	.+384    	; 0x9a8e <__fp_zero>
    990e:	67 2f       	mov	r22, r23
    9910:	78 2f       	mov	r23, r24
    9912:	88 27       	eor	r24, r24
    9914:	b8 5f       	subi	r27, 0xF8	; 248
    9916:	39 f0       	breq	.+14     	; 0x9926 <__fixunssfsi+0x46>
    9918:	b9 3f       	cpi	r27, 0xF9	; 249
    991a:	cc f3       	brlt	.-14     	; 0x990e <__fixunssfsi+0x2e>
    991c:	86 95       	lsr	r24
    991e:	77 95       	ror	r23
    9920:	67 95       	ror	r22
    9922:	b3 95       	inc	r27
    9924:	d9 f7       	brne	.-10     	; 0x991c <__fixunssfsi+0x3c>
    9926:	3e f4       	brtc	.+14     	; 0x9936 <__fixunssfsi+0x56>
    9928:	90 95       	com	r25
    992a:	80 95       	com	r24
    992c:	70 95       	com	r23
    992e:	61 95       	neg	r22
    9930:	7f 4f       	sbci	r23, 0xFF	; 255
    9932:	8f 4f       	sbci	r24, 0xFF	; 255
    9934:	9f 4f       	sbci	r25, 0xFF	; 255
    9936:	08 95       	ret

00009938 <__floatunsisf>:
    9938:	e8 94       	clt
    993a:	09 c0       	rjmp	.+18     	; 0x994e <__floatsisf+0x12>

0000993c <__floatsisf>:
    993c:	97 fb       	bst	r25, 7
    993e:	3e f4       	brtc	.+14     	; 0x994e <__floatsisf+0x12>
    9940:	90 95       	com	r25
    9942:	80 95       	com	r24
    9944:	70 95       	com	r23
    9946:	61 95       	neg	r22
    9948:	7f 4f       	sbci	r23, 0xFF	; 255
    994a:	8f 4f       	sbci	r24, 0xFF	; 255
    994c:	9f 4f       	sbci	r25, 0xFF	; 255
    994e:	99 23       	and	r25, r25
    9950:	a9 f0       	breq	.+42     	; 0x997c <__floatsisf+0x40>
    9952:	f9 2f       	mov	r31, r25
    9954:	96 e9       	ldi	r25, 0x96	; 150
    9956:	bb 27       	eor	r27, r27
    9958:	93 95       	inc	r25
    995a:	f6 95       	lsr	r31
    995c:	87 95       	ror	r24
    995e:	77 95       	ror	r23
    9960:	67 95       	ror	r22
    9962:	b7 95       	ror	r27
    9964:	f1 11       	cpse	r31, r1
    9966:	f8 cf       	rjmp	.-16     	; 0x9958 <__floatsisf+0x1c>
    9968:	fa f4       	brpl	.+62     	; 0x99a8 <__floatsisf+0x6c>
    996a:	bb 0f       	add	r27, r27
    996c:	11 f4       	brne	.+4      	; 0x9972 <__floatsisf+0x36>
    996e:	60 ff       	sbrs	r22, 0
    9970:	1b c0       	rjmp	.+54     	; 0x99a8 <__floatsisf+0x6c>
    9972:	6f 5f       	subi	r22, 0xFF	; 255
    9974:	7f 4f       	sbci	r23, 0xFF	; 255
    9976:	8f 4f       	sbci	r24, 0xFF	; 255
    9978:	9f 4f       	sbci	r25, 0xFF	; 255
    997a:	16 c0       	rjmp	.+44     	; 0x99a8 <__floatsisf+0x6c>
    997c:	88 23       	and	r24, r24
    997e:	11 f0       	breq	.+4      	; 0x9984 <__floatsisf+0x48>
    9980:	96 e9       	ldi	r25, 0x96	; 150
    9982:	11 c0       	rjmp	.+34     	; 0x99a6 <__floatsisf+0x6a>
    9984:	77 23       	and	r23, r23
    9986:	21 f0       	breq	.+8      	; 0x9990 <__floatsisf+0x54>
    9988:	9e e8       	ldi	r25, 0x8E	; 142
    998a:	87 2f       	mov	r24, r23
    998c:	76 2f       	mov	r23, r22
    998e:	05 c0       	rjmp	.+10     	; 0x999a <__floatsisf+0x5e>
    9990:	66 23       	and	r22, r22
    9992:	71 f0       	breq	.+28     	; 0x99b0 <__floatsisf+0x74>
    9994:	96 e8       	ldi	r25, 0x86	; 134
    9996:	86 2f       	mov	r24, r22
    9998:	70 e0       	ldi	r23, 0x00	; 0
    999a:	60 e0       	ldi	r22, 0x00	; 0
    999c:	2a f0       	brmi	.+10     	; 0x99a8 <__floatsisf+0x6c>
    999e:	9a 95       	dec	r25
    99a0:	66 0f       	add	r22, r22
    99a2:	77 1f       	adc	r23, r23
    99a4:	88 1f       	adc	r24, r24
    99a6:	da f7       	brpl	.-10     	; 0x999e <__floatsisf+0x62>
    99a8:	88 0f       	add	r24, r24
    99aa:	96 95       	lsr	r25
    99ac:	87 95       	ror	r24
    99ae:	97 f9       	bld	r25, 7
    99b0:	08 95       	ret

000099b2 <__fp_cmp>:
    99b2:	99 0f       	add	r25, r25
    99b4:	00 08       	sbc	r0, r0
    99b6:	55 0f       	add	r21, r21
    99b8:	aa 0b       	sbc	r26, r26
    99ba:	e0 e8       	ldi	r30, 0x80	; 128
    99bc:	fe ef       	ldi	r31, 0xFE	; 254
    99be:	16 16       	cp	r1, r22
    99c0:	17 06       	cpc	r1, r23
    99c2:	e8 07       	cpc	r30, r24
    99c4:	f9 07       	cpc	r31, r25
    99c6:	c0 f0       	brcs	.+48     	; 0x99f8 <__fp_cmp+0x46>
    99c8:	12 16       	cp	r1, r18
    99ca:	13 06       	cpc	r1, r19
    99cc:	e4 07       	cpc	r30, r20
    99ce:	f5 07       	cpc	r31, r21
    99d0:	98 f0       	brcs	.+38     	; 0x99f8 <__fp_cmp+0x46>
    99d2:	62 1b       	sub	r22, r18
    99d4:	73 0b       	sbc	r23, r19
    99d6:	84 0b       	sbc	r24, r20
    99d8:	95 0b       	sbc	r25, r21
    99da:	39 f4       	brne	.+14     	; 0x99ea <__fp_cmp+0x38>
    99dc:	0a 26       	eor	r0, r26
    99de:	61 f0       	breq	.+24     	; 0x99f8 <__fp_cmp+0x46>
    99e0:	23 2b       	or	r18, r19
    99e2:	24 2b       	or	r18, r20
    99e4:	25 2b       	or	r18, r21
    99e6:	21 f4       	brne	.+8      	; 0x99f0 <__fp_cmp+0x3e>
    99e8:	08 95       	ret
    99ea:	0a 26       	eor	r0, r26
    99ec:	09 f4       	brne	.+2      	; 0x99f0 <__fp_cmp+0x3e>
    99ee:	a1 40       	sbci	r26, 0x01	; 1
    99f0:	a6 95       	lsr	r26
    99f2:	8f ef       	ldi	r24, 0xFF	; 255
    99f4:	81 1d       	adc	r24, r1
    99f6:	81 1d       	adc	r24, r1
    99f8:	08 95       	ret

000099fa <__fp_inf>:
    99fa:	97 f9       	bld	r25, 7
    99fc:	9f 67       	ori	r25, 0x7F	; 127
    99fe:	80 e8       	ldi	r24, 0x80	; 128
    9a00:	70 e0       	ldi	r23, 0x00	; 0
    9a02:	60 e0       	ldi	r22, 0x00	; 0
    9a04:	08 95       	ret

00009a06 <__fp_nan>:
    9a06:	9f ef       	ldi	r25, 0xFF	; 255
    9a08:	80 ec       	ldi	r24, 0xC0	; 192
    9a0a:	08 95       	ret

00009a0c <__fp_pscA>:
    9a0c:	00 24       	eor	r0, r0
    9a0e:	0a 94       	dec	r0
    9a10:	16 16       	cp	r1, r22
    9a12:	17 06       	cpc	r1, r23
    9a14:	18 06       	cpc	r1, r24
    9a16:	09 06       	cpc	r0, r25
    9a18:	08 95       	ret

00009a1a <__fp_pscB>:
    9a1a:	00 24       	eor	r0, r0
    9a1c:	0a 94       	dec	r0
    9a1e:	12 16       	cp	r1, r18
    9a20:	13 06       	cpc	r1, r19
    9a22:	14 06       	cpc	r1, r20
    9a24:	05 06       	cpc	r0, r21
    9a26:	08 95       	ret

00009a28 <__fp_round>:
    9a28:	09 2e       	mov	r0, r25
    9a2a:	03 94       	inc	r0
    9a2c:	00 0c       	add	r0, r0
    9a2e:	11 f4       	brne	.+4      	; 0x9a34 <__fp_round+0xc>
    9a30:	88 23       	and	r24, r24
    9a32:	52 f0       	brmi	.+20     	; 0x9a48 <__fp_round+0x20>
    9a34:	bb 0f       	add	r27, r27
    9a36:	40 f4       	brcc	.+16     	; 0x9a48 <__fp_round+0x20>
    9a38:	bf 2b       	or	r27, r31
    9a3a:	11 f4       	brne	.+4      	; 0x9a40 <__fp_round+0x18>
    9a3c:	60 ff       	sbrs	r22, 0
    9a3e:	04 c0       	rjmp	.+8      	; 0x9a48 <__fp_round+0x20>
    9a40:	6f 5f       	subi	r22, 0xFF	; 255
    9a42:	7f 4f       	sbci	r23, 0xFF	; 255
    9a44:	8f 4f       	sbci	r24, 0xFF	; 255
    9a46:	9f 4f       	sbci	r25, 0xFF	; 255
    9a48:	08 95       	ret

00009a4a <__fp_split3>:
    9a4a:	57 fd       	sbrc	r21, 7
    9a4c:	90 58       	subi	r25, 0x80	; 128
    9a4e:	44 0f       	add	r20, r20
    9a50:	55 1f       	adc	r21, r21
    9a52:	59 f0       	breq	.+22     	; 0x9a6a <__fp_splitA+0x10>
    9a54:	5f 3f       	cpi	r21, 0xFF	; 255
    9a56:	71 f0       	breq	.+28     	; 0x9a74 <__fp_splitA+0x1a>
    9a58:	47 95       	ror	r20

00009a5a <__fp_splitA>:
    9a5a:	88 0f       	add	r24, r24
    9a5c:	97 fb       	bst	r25, 7
    9a5e:	99 1f       	adc	r25, r25
    9a60:	61 f0       	breq	.+24     	; 0x9a7a <__fp_splitA+0x20>
    9a62:	9f 3f       	cpi	r25, 0xFF	; 255
    9a64:	79 f0       	breq	.+30     	; 0x9a84 <__fp_splitA+0x2a>
    9a66:	87 95       	ror	r24
    9a68:	08 95       	ret
    9a6a:	12 16       	cp	r1, r18
    9a6c:	13 06       	cpc	r1, r19
    9a6e:	14 06       	cpc	r1, r20
    9a70:	55 1f       	adc	r21, r21
    9a72:	f2 cf       	rjmp	.-28     	; 0x9a58 <__fp_split3+0xe>
    9a74:	46 95       	lsr	r20
    9a76:	f1 df       	rcall	.-30     	; 0x9a5a <__fp_splitA>
    9a78:	08 c0       	rjmp	.+16     	; 0x9a8a <__fp_splitA+0x30>
    9a7a:	16 16       	cp	r1, r22
    9a7c:	17 06       	cpc	r1, r23
    9a7e:	18 06       	cpc	r1, r24
    9a80:	99 1f       	adc	r25, r25
    9a82:	f1 cf       	rjmp	.-30     	; 0x9a66 <__fp_splitA+0xc>
    9a84:	86 95       	lsr	r24
    9a86:	71 05       	cpc	r23, r1
    9a88:	61 05       	cpc	r22, r1
    9a8a:	08 94       	sec
    9a8c:	08 95       	ret

00009a8e <__fp_zero>:
    9a8e:	e8 94       	clt

00009a90 <__fp_szero>:
    9a90:	bb 27       	eor	r27, r27
    9a92:	66 27       	eor	r22, r22
    9a94:	77 27       	eor	r23, r23
    9a96:	cb 01       	movw	r24, r22
    9a98:	97 f9       	bld	r25, 7
    9a9a:	08 95       	ret

00009a9c <__gesf2>:
    9a9c:	8a df       	rcall	.-236    	; 0x99b2 <__fp_cmp>
    9a9e:	08 f4       	brcc	.+2      	; 0x9aa2 <__gesf2+0x6>
    9aa0:	8f ef       	ldi	r24, 0xFF	; 255
    9aa2:	08 95       	ret

00009aa4 <__mulsf3>:
    9aa4:	0b d0       	rcall	.+22     	; 0x9abc <__mulsf3x>
    9aa6:	c0 cf       	rjmp	.-128    	; 0x9a28 <__fp_round>
    9aa8:	b1 df       	rcall	.-158    	; 0x9a0c <__fp_pscA>
    9aaa:	28 f0       	brcs	.+10     	; 0x9ab6 <__mulsf3+0x12>
    9aac:	b6 df       	rcall	.-148    	; 0x9a1a <__fp_pscB>
    9aae:	18 f0       	brcs	.+6      	; 0x9ab6 <__mulsf3+0x12>
    9ab0:	95 23       	and	r25, r21
    9ab2:	09 f0       	breq	.+2      	; 0x9ab6 <__mulsf3+0x12>
    9ab4:	a2 cf       	rjmp	.-188    	; 0x99fa <__fp_inf>
    9ab6:	a7 cf       	rjmp	.-178    	; 0x9a06 <__fp_nan>
    9ab8:	11 24       	eor	r1, r1
    9aba:	ea cf       	rjmp	.-44     	; 0x9a90 <__fp_szero>

00009abc <__mulsf3x>:
    9abc:	c6 df       	rcall	.-116    	; 0x9a4a <__fp_split3>
    9abe:	a0 f3       	brcs	.-24     	; 0x9aa8 <__mulsf3+0x4>

00009ac0 <__mulsf3_pse>:
    9ac0:	95 9f       	mul	r25, r21
    9ac2:	d1 f3       	breq	.-12     	; 0x9ab8 <__mulsf3+0x14>
    9ac4:	95 0f       	add	r25, r21
    9ac6:	50 e0       	ldi	r21, 0x00	; 0
    9ac8:	55 1f       	adc	r21, r21
    9aca:	62 9f       	mul	r22, r18
    9acc:	f0 01       	movw	r30, r0
    9ace:	72 9f       	mul	r23, r18
    9ad0:	bb 27       	eor	r27, r27
    9ad2:	f0 0d       	add	r31, r0
    9ad4:	b1 1d       	adc	r27, r1
    9ad6:	63 9f       	mul	r22, r19
    9ad8:	aa 27       	eor	r26, r26
    9ada:	f0 0d       	add	r31, r0
    9adc:	b1 1d       	adc	r27, r1
    9ade:	aa 1f       	adc	r26, r26
    9ae0:	64 9f       	mul	r22, r20
    9ae2:	66 27       	eor	r22, r22
    9ae4:	b0 0d       	add	r27, r0
    9ae6:	a1 1d       	adc	r26, r1
    9ae8:	66 1f       	adc	r22, r22
    9aea:	82 9f       	mul	r24, r18
    9aec:	22 27       	eor	r18, r18
    9aee:	b0 0d       	add	r27, r0
    9af0:	a1 1d       	adc	r26, r1
    9af2:	62 1f       	adc	r22, r18
    9af4:	73 9f       	mul	r23, r19
    9af6:	b0 0d       	add	r27, r0
    9af8:	a1 1d       	adc	r26, r1
    9afa:	62 1f       	adc	r22, r18
    9afc:	83 9f       	mul	r24, r19
    9afe:	a0 0d       	add	r26, r0
    9b00:	61 1d       	adc	r22, r1
    9b02:	22 1f       	adc	r18, r18
    9b04:	74 9f       	mul	r23, r20
    9b06:	33 27       	eor	r19, r19
    9b08:	a0 0d       	add	r26, r0
    9b0a:	61 1d       	adc	r22, r1
    9b0c:	23 1f       	adc	r18, r19
    9b0e:	84 9f       	mul	r24, r20
    9b10:	60 0d       	add	r22, r0
    9b12:	21 1d       	adc	r18, r1
    9b14:	82 2f       	mov	r24, r18
    9b16:	76 2f       	mov	r23, r22
    9b18:	6a 2f       	mov	r22, r26
    9b1a:	11 24       	eor	r1, r1
    9b1c:	9f 57       	subi	r25, 0x7F	; 127
    9b1e:	50 40       	sbci	r21, 0x00	; 0
    9b20:	8a f0       	brmi	.+34     	; 0x9b44 <__mulsf3_pse+0x84>
    9b22:	e1 f0       	breq	.+56     	; 0x9b5c <__mulsf3_pse+0x9c>
    9b24:	88 23       	and	r24, r24
    9b26:	4a f0       	brmi	.+18     	; 0x9b3a <__mulsf3_pse+0x7a>
    9b28:	ee 0f       	add	r30, r30
    9b2a:	ff 1f       	adc	r31, r31
    9b2c:	bb 1f       	adc	r27, r27
    9b2e:	66 1f       	adc	r22, r22
    9b30:	77 1f       	adc	r23, r23
    9b32:	88 1f       	adc	r24, r24
    9b34:	91 50       	subi	r25, 0x01	; 1
    9b36:	50 40       	sbci	r21, 0x00	; 0
    9b38:	a9 f7       	brne	.-22     	; 0x9b24 <__mulsf3_pse+0x64>
    9b3a:	9e 3f       	cpi	r25, 0xFE	; 254
    9b3c:	51 05       	cpc	r21, r1
    9b3e:	70 f0       	brcs	.+28     	; 0x9b5c <__mulsf3_pse+0x9c>
    9b40:	5c cf       	rjmp	.-328    	; 0x99fa <__fp_inf>
    9b42:	a6 cf       	rjmp	.-180    	; 0x9a90 <__fp_szero>
    9b44:	5f 3f       	cpi	r21, 0xFF	; 255
    9b46:	ec f3       	brlt	.-6      	; 0x9b42 <__mulsf3_pse+0x82>
    9b48:	98 3e       	cpi	r25, 0xE8	; 232
    9b4a:	dc f3       	brlt	.-10     	; 0x9b42 <__mulsf3_pse+0x82>
    9b4c:	86 95       	lsr	r24
    9b4e:	77 95       	ror	r23
    9b50:	67 95       	ror	r22
    9b52:	b7 95       	ror	r27
    9b54:	f7 95       	ror	r31
    9b56:	e7 95       	ror	r30
    9b58:	9f 5f       	subi	r25, 0xFF	; 255
    9b5a:	c1 f7       	brne	.-16     	; 0x9b4c <__mulsf3_pse+0x8c>
    9b5c:	fe 2b       	or	r31, r30
    9b5e:	88 0f       	add	r24, r24
    9b60:	91 1d       	adc	r25, r1
    9b62:	96 95       	lsr	r25
    9b64:	87 95       	ror	r24
    9b66:	97 f9       	bld	r25, 7
    9b68:	08 95       	ret

00009b6a <_exit>:
    9b6a:	f8 94       	cli

00009b6c <__stop_program>:
    9b6c:	ff cf       	rjmp	.-2      	; 0x9b6c <__stop_program>
