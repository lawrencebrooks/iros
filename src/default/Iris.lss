
Iris.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800500  000086bc  000087bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .noinit       00000400  00800100  00800100  000087c0  2**5
                  CONTENTS, READONLY
  2 .text         000086bc  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .bss          000009cd  00800502  00800502  000087be  2**1
                  ALLOC
  4 .stab         00000528  00000000  00000000  00008bc0  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000002a5  00000000  00000000  000090e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  0000938d  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000540  00000000  00000000  000093a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00005ec5  00000000  00000000  000098e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001578  00000000  00000000  0000f7a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000019cd  00000000  00000000  00010d1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000e44  00000000  00000000  000126ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00001614  00000000  00000000  00013530  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00005143  00000000  00000000  00014b44  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000610  00000000  00000000  00019c88  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e9 23 	jmp	0x47d2	; 0x47d2 <__ctors_end>
       4:	0c 94 52 24 	jmp	0x48a4	; 0x48a4 <__bad_interrupt>
       8:	0c 94 52 24 	jmp	0x48a4	; 0x48a4 <__bad_interrupt>
       c:	0c 94 52 24 	jmp	0x48a4	; 0x48a4 <__bad_interrupt>
      10:	0c 94 52 24 	jmp	0x48a4	; 0x48a4 <__bad_interrupt>
      14:	0c 94 52 24 	jmp	0x48a4	; 0x48a4 <__bad_interrupt>
      18:	0c 94 52 24 	jmp	0x48a4	; 0x48a4 <__bad_interrupt>
      1c:	0c 94 52 24 	jmp	0x48a4	; 0x48a4 <__bad_interrupt>
      20:	0c 94 cc 29 	jmp	0x5398	; 0x5398 <__vector_8>
      24:	0c 94 52 24 	jmp	0x48a4	; 0x48a4 <__bad_interrupt>
      28:	0c 94 52 24 	jmp	0x48a4	; 0x48a4 <__bad_interrupt>
      2c:	0c 94 52 24 	jmp	0x48a4	; 0x48a4 <__bad_interrupt>
      30:	0c 94 52 24 	jmp	0x48a4	; 0x48a4 <__bad_interrupt>
      34:	0c 94 96 27 	jmp	0x4f2c	; 0x4f2c <__vector_13>
      38:	0c 94 d6 27 	jmp	0x4fac	; 0x4fac <__vector_14>
      3c:	0c 94 52 24 	jmp	0x48a4	; 0x48a4 <__bad_interrupt>
      40:	0c 94 52 24 	jmp	0x48a4	; 0x48a4 <__bad_interrupt>
      44:	0c 94 52 24 	jmp	0x48a4	; 0x48a4 <__bad_interrupt>
      48:	0c 94 52 24 	jmp	0x48a4	; 0x48a4 <__bad_interrupt>
      4c:	0c 94 52 24 	jmp	0x48a4	; 0x48a4 <__bad_interrupt>
      50:	0c 94 52 24 	jmp	0x48a4	; 0x48a4 <__bad_interrupt>
      54:	0c 94 52 24 	jmp	0x48a4	; 0x48a4 <__bad_interrupt>
      58:	0c 94 52 24 	jmp	0x48a4	; 0x48a4 <__bad_interrupt>
      5c:	0c 94 52 24 	jmp	0x48a4	; 0x48a4 <__bad_interrupt>
      60:	0c 94 52 24 	jmp	0x48a4	; 0x48a4 <__bad_interrupt>
      64:	0c 94 52 24 	jmp	0x48a4	; 0x48a4 <__bad_interrupt>
      68:	0c 94 52 24 	jmp	0x48a4	; 0x48a4 <__bad_interrupt>
      6c:	0c 94 52 24 	jmp	0x48a4	; 0x48a4 <__bad_interrupt>
      70:	6c 39       	cpi	r22, 0x9C	; 156
      72:	6f 39       	cpi	r22, 0x9F	; 159
      74:	72 39       	cpi	r23, 0x92	; 146
      76:	75 39       	cpi	r23, 0x95	; 149
      78:	78 39       	cpi	r23, 0x98	; 152
      7a:	7b 39       	cpi	r23, 0x9B	; 155
      7c:	7e 39       	cpi	r23, 0x9E	; 158

0000007e <__trampolines_end>:
      7e:	81 00       	.word	0x0081	; ????
      80:	45 00       	.word	0x0045	; ????
      82:	27 ff       	sbrs	r18, 7
      84:	24 ff       	sbrs	r18, 4
      86:	2a 90       	ld	r2, -Y
      88:	2b 1c       	adc	r2, r11
      8a:	21 0c       	add	r2, r1
      8c:	22 fb       	bst	r18, 2
      8e:	85 00       	.word	0x0085	; ????
      90:	84 00       	.word	0x0084	; ????
      92:	89 03       	fmulsu	r16, r17
      94:	88 8d       	ldd	r24, Y+24	; 0x18
      96:	81 09       	sbc	r24, r1
      98:	6f 02       	muls	r22, r31
      9a:	44 42       	sbci	r20, 0x24	; 36
      9c:	47 00       	.word	0x0047	; ????
      9e:	45 01       	movw	r8, r10
      a0:	b0 83       	st	Z, r27
      a2:	b3 00       	.word	0x00b3	; ????
      a4:	b1 01       	movw	r22, r2
      a6:	25 11       	cpse	r18, r5
      a8:	8a 4f       	sbci	r24, 0xFA	; 250
      aa:	8b 03       	fmulsu	r16, r19

000000ac <eeprom_format_table>:
      ac:	5a 55 01 20 01 01 00 38 08 00 00 00 00 00 00 00     ZU. ...8........
	...

000000cc <patchCommands>:
      cc:	78 2a 7b 2a d7 2a db 2a e2 2a 83 2a 88 2a 8d 2a     x*{*.*.*.*.*.*.*
      dc:	ea 2a 90 2a 93 2a 96 2a d1 2a d4 2a fa 2a           .*.*.*.*.*.*.*

000000ea <fader>:
      ea:	00 40 88 91 d2 e4 ad b5 b6 be bf ff                 .@..........

000000f6 <map_uzeboxlogo2>:
      f6:	05 03 00 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f     ................
	...

00000107 <map_uzeboxlogo>:
     107:	05 04 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d     ................
     117:	00 0e 0f 10 11 12                                   ......

0000011d <logo_tileset>:
	...
     179:	00 00 00 49 00 00 00 00 00 49 52 52 00 00 00 49     ...I.....IRR...I
     189:	52 53 1c 25 00 49 52 52 24 25 25 1b 52 52 5c 2d     RS.%.IRR$%%.RR\-
     199:	2d 1c 12 12 00 00 00 00 00 00 00 00 00 00 00 00     -...............
     1a9:	40 49 49 49 00 40 49 49 52 5b 5b 5b 4a 52 52 5b     @III.@IIR[[[JRR[
     1b9:	1c 1c 13 12 5b 1c 24 1c 12 09 09 09 24 1b 12 09     ....[.$.....$...
     1c9:	09 09 09 0a 0a 0a 0a 0a 0a 0a 0a 13 0a 0a 12 0a     ................
     1d9:	0a 12 13 0a 00 00 00 00 00 00 00 00 92 52 52 52     .............RRR
     1e9:	52 52 52 49 13 12 13 09 00 1c 1b 13 0a 12 12 40     RRRI...........@
     1f9:	1b 65 64 1c 09 0a 00 09 24 1b 1c 65 12 00 00 25     .ed.....$..e...%
     209:	1c 1c 1c 1c 01 00 25 24 1c 1c 1c 1c 00 24 25 24     ......%$.....$%$
     219:	24 24 1c 1c 00 00 00 00 00 00 00 00 49 40 00 00     $$..........I@..
     229:	00 00 00 00 52 49 49 00 00 00 00 00 1c 5b 4a 48     ....RII......[JH
     239:	00 00 00 00 1c 25 52 49 00 00 00 00 65 24 64 49     .....%RI....e$dI
     249:	00 00 00 00 65 25 64 49 00 00 00 00 6d 2e 5c 49     ....e%dI....m.\I
	...
     261:	00 00 40 52 00 00 00 00 00 49 52 5c 00 00 00 00     ..@R.....IR\....
     271:	53 52 24 25 00 00 00 53 52 25 25 25 00 00 4a 52     SR$%...SR%%%..JR
     281:	25 25 1b 00 00 00 5b 25 13 00 00 1b 00 5b 53 00     %%....[%.....[S.
     291:	0a 1c 37 37 09 5b 1c 65 7f 37 2e 2e 52 2e 2e 1c     ..77.[.e.7..R...
     2a1:	13 13 12 00 2e 25 1b 13 12 00 00 12 1c 1c 12 00     .....%..........
     2b1:	00 12 25 1c 12 00 00 12 2e 37 1c 13 00 13 2e 37     ..%......7.....7
     2c1:	36 1c 13 1b 37 37 2e 2e 25 13 1c 1c 2e 2e 2e 2e     6...77..%.......
     2d1:	1b 1c 1c 1c 6e 6e 6e 1c 1c 1c 1c 1c 09 13 13 12     ....nnn.........
     2e1:	12 13 13 00 13 13 13 13 13 1c 00 09 13 13 13 13     ................
     2f1:	1c 01 00 37 13 13 13 1c 13 00 2e 2e 1b 1b 1c 1c     ...7............
     301:	00 1c 77 2e 1b 1b 25 00 13 7f 25 1c 1c 1c 01 0a     ..w...%...%.....
     311:	37 24 1c 1c 1c 13 0a 2e 25 25 09 00 13 2e 24 25     7$......%%....$%
     321:	25 25 25 25 2e 25 25 25 25 25 25 25 25 25 2d 2e     %%%%.%%%%%%%%%-.
     331:	25 1b 1c 1c 2e 2e 25 1c 13 25 1b 13 25 1c 1c 1c     %.....%..%..%...
     341:	1c 01 09 52 1c 1c 13 00 01 1c 5b 5c 0a 00 01 65     ...R......[\...e
     351:	77 5c 1b 00 01 6e 7f 6e 52 1b 00 00 6d 1c 52 49     w\...n.nR...m.RI
     361:	00 00 00 00 1c 13 53 00 00 00 00 00 1c 52 4a 00     ......S......RJ.
     371:	00 00 00 00 5b 5b 00 00 00 00 00 00 5c 00 00 00     ....[[......\...
	...
     39d:	13 5b 7f 77 6e 6e 6e 6e 13 65 77 76 6e 6e 6e 6e     .[.wnnnn.ewvnnnn
     3ad:	1b 65 77 76 76 76 6e 77 1b 5b bf 76 b6 76 76 76     .ewvvvnw.[.v.vvv
     3bd:	09 13 6d bf b7 b6 b7 65 00 1b 12 5c 76 bf 76 6d     ..m....e...\v.vm
     3cd:	00 00 12 1b 12 5b 5b 5c 00 00 00 00 09 0a 12 13     .....[[\........
     3dd:	6e 77 24 1c 1c 1c 1c 1c 77 25 1c 1c 1c 1c 24 25     nw$.....w%....$%
     3ed:	6e 1c 1c 1c 24 25 25 1b 1c 1c 24 25 25 13 00 00     n...$%%...$%%...
     3fd:	64 6d 6d 1b 00 09 6e bf 6d 5b 09 12 6e bf 6d 5b     dmm...n.m[..n.m[
     40d:	5b 12 5b 64 5b 12 13 12 13 1b 12 12 09 01 00 00     [.[d[...........
     41d:	1c 24 2e 1c 09 00 09 6e 25 24 01 00 09 76 7f 7f     .$.....n%$...v..
     42d:	00 00 12 77 7f 7f 64 12 64 bf bf 77 5b 12 1b 09     ...w..d.d..w[...
     43d:	bf 6d 5b 12 1b 09 00 00 12 13 1b 09 00 00 00 00     .m[.............
     44d:	09 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     45d:	7f 7f 53 13 13 00 00 00 64 12 1b 01 00 00 00 00     ..S.....d.......
     46d:	1b 12 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     4a5:	26 00 00 00 26 00 26 26 2f 00 00 00 2f 00 00 00     &...&.&&/.../...
     4b5:	37 00 00 00 37 00 00 00 ff 00 00 00 ff 00 00 00     7...7...........
     4c5:	bf 00 00 00 bf 00 00 bf 37 00 00 37 00 00 37 00     ........7..7..7.
     4d5:	00 26 26 00 00 00 26 26 00 00 00 00 00 00 00 00     .&&...&&........
     4e5:	26 26 26 00 26 26 26 26 00 00 2f 00 2f 00 00 00     &&&.&&&&.././...
     4f5:	00 37 00 00 37 00 00 00 ff 00 00 00 ff ff ff ff     .7..7...........
     505:	00 00 00 00 bf 00 00 00 00 00 00 00 37 00 00 00     ............7...
     515:	26 26 26 00 26 26 26 26 00 00 00 00 00 00 00 00     &&&.&&&&........
     525:	26 00 26 26 26 26 00 00 00 00 2f 00 00 00 2f 00     &.&&&&..../.../.
     535:	00 00 37 00 00 00 37 00 00 00 ff ff ff ff 00 00     ..7...7.........
     545:	00 00 bf 00 00 00 bf 00 00 00 37 00 00 00 37 00     ..........7...7.
     555:	26 00 26 26 26 26 00 00 00 00 00 00 00 00 00 00     &.&&&&..........
     565:	00 00 26 26 26 00 26 00 00 2f 00 00 2f 00 2f 00     ..&&&.&../.././.
     575:	37 00 00 00 37 00 00 37 ff 00 00 00 ff 00 00 00     7...7..7........
     585:	bf 00 00 00 bf 00 00 bf 37 00 00 37 00 00 37 00     ........7..7..7.
     595:	26 26 26 00 00 00 26 00 00 00 00 00 00 00 00 00     &&&...&.........
     5a5:	00 00 26 00 00 00 00 00 00 00 2f 00 00 00 00 00     ..&......./.....
     5b5:	00 37 00 00 00 00 00 00 ff 00 00 00 00 00 00 00     .7..............
     5c5:	00 bf 00 00 00 00 00 00 00 00 37 00 00 00 00 00     ..........7.....
     5d5:	00 00 26 00 00 00 00 00 00 00 00 00 00 00 00 00     ..&.............
	...
     5f9:	00 00 00 e4 00 00 00 00 09 9b ed f6 00 00 00 9b     ................
     609:	a4 ad bf bf 00 52 9b a4 76 7f 7f b7 5b 9b 6d 77     .....R..v...[.mw
     619:	7f 76 6e b7 00 00 00 00 00 00 00 00 00 00 00 00     .vn.............
     629:	5b b6 f6 f6 00 5b f6 ff ff ff ff bf f6 ff ff ff     [....[..........
     639:	ff bf bf ae ff bf ff ff ff b7 ad 65 bf bf ff ff     ...........e....
     649:	b7 b6 ad 65 b7 bf ff ff bf b7 ae 6e b7 bf ff ff     ...e.......n....
     659:	bf b7 b7 65 00 00 00 00 00 00 00 00 f6 f6 ed ed     ...e............
     669:	ad a4 a4 9b b6 6d 6d 5c 52 6e 65 64 65 65 65 52     .....mm\RnedeeeR
     679:	65 76 6d 25 5c 5c 52 53 6e 24 65 6e 65 52 52 6e     evm%\\RSn$eneRRn
     689:	25 25 24 25 5b 52 77 2d 25 25 25 24 52 6e 6e 2d     %%$%[Rw-%%%$Rnn-
     699:	25 25 25 25 00 00 00 00 00 00 00 00 9b 49 00 00     %%%%.........I..
     6a9:	00 00 00 00 a4 9b 92 00 00 00 00 00 25 64 93 49     ............%d.I
     6b9:	00 00 00 00 65 2e 9b 52 00 00 00 00 6d 25 65 52     ....e..R....m%eR
     6c9:	00 00 00 00 6d 2d 65 52 00 00 00 00 6e 2e 64 52     ....m-eR....n.dR
	...
     6e1:	00 00 49 5b 00 00 00 00 00 4a 5b 65 00 00 00 00     ..I[.....J[e....
     6f1:	5b 9b 6d 2d 00 00 00 5b 5b 2d 2e 25 00 00 52 5b     [.m-...[[-.%..R[
     701:	2e 2e 1c 09 00 01 5b 2d 1c 01 09 1c 00 5c 5b 01     ......[-.....\[.
     711:	4a 65 77 7f 4a 5b 1c 6e 7f 77 77 76 9b 77 77 6d     Jew.J[.n.wwv.wwm
     721:	65 6e 6e a4 77 6e 65 65 65 5b a4 b7 25 25 5c 52     enn.wneee[..%%\R
     731:	52 6d bf bf 13 09 49 64 7f bf bf bf 09 5c 7f 7f     Rm....Id.....\..
     741:	bf bf b7 bf 7f 7f 77 7f 7f b7 bf bf 77 77 7f 7f     ......w.....ww..
     751:	6e b7 bf bf 77 7f 7f 6e 77 bf bf bf b6 ff ff ff     n...w..nw.......
     761:	bf bf b7 5b bf ff ff ff bf bf a4 64 bf ff ff ff     ...[.......d....
     771:	bf ad a4 7f bf ff ff ff bf a4 bf 7f ff ff ff bf     ................
     781:	ad bf bf bf ff ff ff b6 bf bf bf 77 ff ff f7 bf     ...........w....
     791:	bf bf 77 77 ff ff ff bf bf bf 64 52 6d 7f 6e 2e     ..ww......dRm.n.
     7a1:	2d 2d 25 6e 7f 76 6e 6e 6e 2e 25 65 77 77 77 76     --%n.vnnn.%ewwwv
     7b1:	2e 1c 25 24 7f 77 6e 25 1c 25 1c 1b 77 65 25 25     ..%$.wn%.%..we%%
     7c1:	1c 09 0a 5b 6e 6e 1c 09 49 25 64 64 5b 49 4a 6e     ...[nn..I%dd[IJn
     7d1:	7f 64 5c 00 53 77 bf 77 5b 5c 00 00 6e 25 5b 4a     .d\.Sw.w[\..n%[J
     7e1:	00 00 00 00 1c 1b 5b 00 00 00 00 00 24 5b 53 00     ......[.....$[S.
     7f1:	00 00 00 00 5b 5c 00 00 00 00 00 00 64 00 00 00     ....[\......d...
	...
     81d:	5b 5c 7f bf 77 76 77 77 5c 6d 7f b7 77 77 77 77     [\..wvww\m..wwww
     82d:	5c 6d 7f bf 77 77 77 bf 5c 64 bf bf bf bf bf 7f     \m..www.\d......
     83d:	0a 5c 6e bf bf bf bf 76 00 65 64 6d bf bf bf bf     .\n....v.edm....
     84d:	00 00 5b 6d 64 6d ad b6 00 00 00 00 12 5b 64 6d     ..[mdm.......[dm
     85d:	77 7f 6e 6e 77 bf bf bf 7f 76 6d 76 77 bf bf bf     w.nnw....vmvw...
     86d:	77 6d 6e 76 7f bf bf bf 6d 6e 76 7f bf b7 ad f6     wmnv....mnv.....
     87d:	76 bf bf 76 a4 ad ff ff bf b6 64 ad ff ff ff ff     v..v......d.....
     88d:	b6 ad bf ff ff ff ff f6 ad b6 ad 64 5b 52 00 00     ...........d[R..
     89d:	ff ff bf bf ad 5b 64 bf ff ff b6 ad ad bf ff bf     .....[d.........
     8ad:	ff f6 ff ff ff ff bf 64 ff ff ff ff bf b6 76 5b     .......d......v[
     8bd:	ff ff ff bf bf 5b 00 00 ff ff ff 5c 00 00 00 00     .....[.....\....
     8cd:	a4 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     8dd:	bf bf 64 5c 5c 00 00 00 6e 5c 65 49 00 00 00 00     ..d\\...n\eI....
     8ed:	6d 5b 00 00 00 00 00 00 00 00 00 00 00 00 00 00     m[..............
	...

0000091d <logoInitPatches>:
     91d:	00 00 00 26 09 00 00 00 00                          ...&.....

00000926 <initPatch>:
     926:	00 02 08 00 08 55 04 08 5a 00 00 f8 00 09 90 00     .....U..Z.......
     936:	0a 1e 32 05 00 00 ff                                ..2....

0000093d <default_scores>:
     93d:	55 5a 45 00 00 4c 4a 42 00 00 41 41 41 00 00 42     UZE..LJB..AAA..B
     94d:	42 42 00 00 43 43 43 00 00 44 44 44 00 00           BB..CCC..DDD..

0000095b <strLevels>:
     95b:	20 20 20 47 4c 41 43 49 45 53 20 20 20 00              GLACIES   .

00000969 <strPaused>:
     969:	50 41 55 53 45 44 00                                PAUSED.

00000970 <strExit>:
     970:	45 58 49 54 20 2d 20 58 00                          EXIT - X.

00000979 <strLives>:
     979:	4c 49 56 45 53 3a 00                                LIVES:.

00000980 <strShield>:
     980:	53 48 49 45 4c 44 3a 00                             SHIELD:.

00000988 <strScore>:
     988:	53 43 4f 52 45 3a 00                                SCORE:.

0000098f <strSelectHandle>:
     98f:	53 45 4c 45 43 54 20 2d 20 41 2f 53 54 41 52 54     SELECT - A/START
	...

000009a0 <strHighscores>:
     9a0:	48 49 47 48 20 53 43 4f 52 45 53 00                 HIGH SCORES.

000009ac <str1Player>:
     9ac:	53 54 41 52 54 00                                   START.

000009b2 <strCopyright>:
     9b2:	32 30 31 36 20 4c 41 57 52 45 4e 43 45 20 42 52     2016 LAWRENCE BR
     9c2:	4f 4f 4b 53 00                                      OOKS.

000009c7 <spacesong>:
     9c7:	00 c0 00 00 c1 01 00 b0 07 7f 00 07 7f 00 90 43     ...............C
     9d7:	64 00 46 64 00 4b 64 00 4f 64 00 b1 07 74 00 91     d.Fd.Kd.Od...t..
     9e7:	33 64 00 ff 06 01 53 1d 91 33 64 0a 33 64 14 90     3d....S..3d.3d..
     9f7:	4b 64 00 46 64 00 43 64 00 91 33 64 27 33 64 14     Kd.Fd.Cd..3d'3d.
     a07:	90 46 64 00 43 64 00 4b 64 00 4f 64 00 91 33 64     .Fd.Cd.Kd.Od..3d
     a17:	14 33 64 0a 90 41 64 00 4d 64 0a 41 64 00 46 64     .3d..Ad.Md.Ad.Fd
     a27:	00 4a 64 00 4d 64 00 91 2e 64 1e 2e 64 09 2e 64     .Jd.Md...d..d..d
     a37:	14 90 41 64 00 46 64 00 4a 64 00 91 2e 64 28 2e     ..Ad.Fd.Jd...d(.
     a47:	64 14 90 41 64 00 46 64 00 4a 64 00 4d 64 00 91     d..Ad.Fd.Jd.Md..
     a57:	2e 64 13 2e 64 0a 90 3f 64 00 4b 64 0a 3f 64 00     .d..d..?d.Kd.?d.
     a67:	44 64 00 48 64 00 4b 64 00 91 2c 64 1e 2c 64 0a     Dd.Hd.Kd..,d.,d.
     a77:	2c 64 14 90 41 64 00 46 64 00 4a 64 00 91 2c 64     ,d..Ad.Fd.Jd..,d
     a87:	13 2e 64 14 90 46 64 00 91 2c 64 14 90 3f 64 00     ..d..Fd..,d..?d.
     a97:	43 64 00 48 64 00 91 2e 64 14 30 64 14 90 43 64     Cd.Hd...d.0d..Cd
     aa7:	00 48 64 00 4b 64 00 4f 64 00 91 30 64 1d 30 64     .Hd.Kd.Od..0d.0d
     ab7:	0a 30 64 14 90 4b 64 00 48 64 00 43 64 00 91 30     .0d..Kd.Hd.Cd..0
     ac7:	64 28 30 64 13 90 43 64 00 48 64 00 4b 64 00 4f     d(0d..Cd.Hd.Kd.O
     ad7:	64 00 91 30 64 14 30 64 0a 90 41 64 00 4d 64 0a     d..0d.0d..Ad.Md.
     ae7:	43 64 00 46 64 00 4b 64 00 4f 64 00 91 33 64 1e     Cd.Fd.Kd.Od..3d.
     af7:	33 64 09 33 64 14 90 4b 64 00 46 64 00 43 64 00     3d.3d..Kd.Fd.Cd.
     b07:	91 33 64 28 33 64 14 90 46 64 00 43 64 00 4b 64     .3d(3d..Fd.Cd.Kd
     b17:	00 4f 64 00 91 33 64 13 33 64 0a 90 41 64 00 4d     .Od..3d.3d..Ad.M
     b27:	64 0a 41 64 00 46 64 00 4a 64 00 4d 64 00 91 2e     d.Ad.Fd.Jd.Md...
     b37:	64 1e 2e 64 0a 2e 64 14 90 41 64 00 46 64 00 4a     d..d..d..Ad.Fd.J
     b47:	64 00 91 2e 64 27 2e 64 14 90 41 64 00 46 64 00     d...d'.d..Ad.Fd.
     b57:	4a 64 00 4d 64 00 91 2e 64 14 2e 64 0a 90 3f 64     Jd.Md...d..d..?d
     b67:	00 4b 64 0a 3f 64 00 44 64 00 48 64 00 4b 64 00     .Kd.?d.Dd.Hd.Kd.
     b77:	91 2c 64 1d 2c 64 0a 2c 64 14 90 41 64 00 46 64     .,d.,d.,d..Ad.Fd
     b87:	00 4a 64 00 91 2c 64 14 2e 64 14 90 46 64 00 91     .Jd..,d..d..Fd..
     b97:	2c 64 13 90 3f 64 00 43 64 00 48 64 00 91 30 64     ,d..?d.Cd.Hd..0d
     ba7:	14 30 64 14 90 48 64 00 91 2c 6e 14 2c 4b 06 90     .0d..Hd..,n.,K..
     bb7:	4a 64 0e 91 2c 4b 0d 90 4b 64 06 91 2c 6e 14 90     Jd..,K..Kd..,n..
     bc7:	4d 64 00 91 2c 4b 14 2c 4b 07 90 4b 64 0d 91 2c     Md..,K.,K..Kd..,
     bd7:	6e 0d 90 4a 64 07 91 2c 4b 13 90 48 64 00 91 30     n..Jd..,K..Hd..0
     be7:	6e 14 30 4b 07 90 4a 64 0d 91 30 4b 0d 90 46 64     n.0K..Jd..0K..Fd
     bf7:	07 91 30 6e 13 90 43 64 00 91 30 4b 14 30 4b 07     ..0n..Cd..0K.0K.
     c07:	90 46 64 0d 91 30 6e 0d 90 48 64 07 91 30 4b 14     .Fd..0n..Hd..0K.
     c17:	90 48 64 00 91 2c 6e 13 2c 4b 07 90 4a 64 0d 91     .Hd..,n.,K..Jd..
     c27:	2c 4b 0d 90 4b 64 07 91 2c 6e 14 90 4d 64 00 91     ,K..Kd..,n..Md..
     c37:	2c 4b 14 2c 4b 06 90 4b 64 0d 91 2c 6e 0e 90 4d     ,K.,K..Kd..,n..M
     c47:	64 06 91 2c 4b 14 90 4f 64 00 91 30 6e 14 30 4b     d..,K..Od..0n.0K
     c57:	07 90 50 64 0d 91 30 4b 0e 90 4d 64 05 91 30 6e     ..Pd..0K..Md..0n
     c67:	14 90 4f 64 00 91 30 4b 14 30 4b 07 90 4d 64 0d     ..Od..0K.0K..Md.
     c77:	91 30 6e 0d 90 4b 64 07 91 30 4b 13 90 4d 64 00     .0n..Kd..0K..Md.
     c87:	91 2b 6e 14 2b 4b 07 90 4f 64 0d 91 2b 4b 0d 90     .+n.+K..Od..+K..
     c97:	4d 64 07 91 2b 6e 14 90 4b 64 00 91 2b 4b 13 2b     Md..+n..Kd..+K.+
     ca7:	4b 07 90 46 64 0d 91 2b 6e 0d 90 4b 64 07 91 2b     K..Fd..+n..Kd..+
     cb7:	4b 14 90 4d 64 00 91 2c 6e 13 2c 4b 07 90 50 64     K..Md..,n.,K..Pd
     cc7:	0d 91 2c 4b 0d 90 4f 64 07 91 2c 6e 14 90 4d 64     ..,K..Od..,n..Md
     cd7:	00 91 2c 4b 14 2c 4b 06 90 48 64 0d 91 2c 6e 0e     ..,K.,K..Hd..,n.
     ce7:	90 4d 64 06 91 2c 4b 14 90 52 64 00 91 27 6e 0d     .Md..,K..Rd..'n.
     cf7:	90 50 64 07 91 27 4b 06 90 4f 64 0e 50 64 00 91     .Pd..'K..Od.Pd..
     d07:	27 4b 0d 90 4f 64 06 91 27 6e 07 90 4d 64 0d 4b     'K..Od..'n..Md.K
     d17:	64 00 91 27 4b 14 27 4b 07 90 46 64 0d 91 27 6e     d..'K.'K..Fd..'n
     d27:	0d 90 4b 64 07 91 27 4b 13 90 47 64 00 91 26 6e     ..Kd..'K..Gd..&n
     d37:	14 26 4b 07 90 4a 64 0d 91 26 4b 0d 90 4f 64 07     .&K..Jd..&K..Od.
     d47:	91 26 6e 14 90 53 64 00 91 26 4b 13 26 4b 07 90     .&n..Sd..&K.&K..
     d57:	56 64 0d 91 26 6e 0d 90 5b 64 07 91 26 4b 14 90     Vd..&n..[d..&K..
     d67:	3d 64 00 91 31 64 06 90 41 64 07 44 64 07 49 64     =d..1d..Ad.Dd.Id
     d77:	06 4d 64 07 50 64 06 55 64 07 59 64 07 5c 64 06     .Md.Pd.Ud.Yd.\d.
     d87:	59 64 07 55 64 06 50 64 07 4d 64 07 49 64 06 44     Yd.Ud.Pd.Md.Id.D
     d97:	64 07 41 64 06 3d 64 07 38 64 07 3d 64 06 41 64     d.Ad.=d.8d.=d.Ad
     da7:	07 44 64 06 49 64 07 44 64 07 41 64 06 43 64 00     .Dd.Id.Dd.Ad.Cd.
     db7:	91 37 64 07 90 47 64 06 4a 64 07 4f 64 06 53 64     .7d..Gd.Jd.Od.Sd
     dc7:	07 56 64 07 5b 64 06 5f 64 07 62 64 06 5f 64 07     .Vd.[d._d.bd._d.
     dd7:	5b 64 07 56 64 06 53 64 07 4f 64 06 4a 64 07 47     [d.Vd.Sd.Od.Jd.G
     de7:	64 07 43 64 06 3e 64 07 43 64 06 47 64 07 4a 64     d.Cd.>d.Cd.Gd.Jd
     df7:	07 4f 64 06 4a 64 07 47 64 06 46 64 00 91 3a 64     .Od.Jd.Gd.Fd..:d
     e07:	07 90 4a 64 07 4d 64 06 52 64 07 56 64 06 59 64     ..Jd.Md.Rd.Vd.Yd
     e17:	07 5e 64 07 62 64 06 65 64 07 62 64 06 5e 64 07     .^d.bd.ed.bd.^d.
     e27:	59 64 07 56 64 06 52 64 07 4d 64 06 4a 64 07 46     Yd.Vd.Rd.Md.Jd.F
     e37:	64 07 41 64 06 46 64 07 4a 64 06 4d 64 07 52 64     d.Ad.Fd.Jd.Md.Rd
     e47:	07 4d 64 06 4a 64 07 54 7f 00 43 64 00 48 64 00     .Md.Jd.T..Cd.Hd.
     e57:	4b 64 00 4f 64 00 91 30 64 1d 30 64 0a 30 64 14     Kd.Od..0d.0d.0d.
     e67:	90 4b 64 00 48 64 00 43 64 00 91 30 64 28 30 64     .Kd.Hd.Cd..0d(0d
     e77:	14 90 43 64 00 48 64 00 4b 64 00 4f 64 00 91 30     ..Cd.Hd.Kd.Od..0
     e87:	64 13 30 64 0a 90 41 64 00 4d 64 0a 43 64 00 46     d.0d..Ad.Md.Cd.F
     e97:	64 00 4b 64 00 4f 64 00 91 33 64 1e 33 64 0a 33     d.Kd.Od..3d.3d.3
     ea7:	64 14 90 4b 64 00 46 64 00 43 64 00 91 33 64 27     d..Kd.Fd.Cd..3d'
     eb7:	33 64 14 90 46 64 00 43 64 00 4b 64 00 4f 64 00     3d..Fd.Cd.Kd.Od.
     ec7:	91 33 64 14 33 64 0a 90 41 64 00 4d 64 0a 41 64     .3d.3d..Ad.Md.Ad
     ed7:	00 46 64 00 4a 64 00 4d 64 00 91 2e 64 1d 2e 64     .Fd.Jd.Md...d..d
     ee7:	0a 2e 64 14 90 41 64 00 46 64 00 4a 64 00 91 2e     ..d..Ad.Fd.Jd...
     ef7:	64 27 2e 64 14 90 41 64 00 46 64 00 4a 64 00 4d     d'.d..Ad.Fd.Jd.M
     f07:	64 00 91 2e 64 14 2e 64 0a 90 3f 64 00 4b 64 0a     d...d..d..?d.Kd.
     f17:	3f 64 00 44 64 00 48 64 00 4b 64 00 91 2c 64 1e     ?d.Dd.Hd.Kd..,d.
     f27:	2c 64 09 2c 64 14 90 41 64 00 46 64 00 4a 64 00     ,d.,d..Ad.Fd.Jd.
     f37:	91 2c 64 14 2e 64 14 90 46 64 00 91 2c 64 14 90     .,d..d..Fd..,d..
     f47:	3f 64 00 43 64 00 48 64 00 91 2e 64 13 30 64 14     ?d.Cd.Hd...d.0d.
     f57:	90 43 64 00 48 64 00 4b 64 00 4f 64 00 91 30 64     .Cd.Hd.Kd.Od..0d
     f67:	1e 30 64 0a 30 64 14 90 4b 64 00 48 64 00 43 64     .0d.0d..Kd.Hd.Cd
     f77:	00 91 30 64 27 30 64 14 90 43 64 00 48 64 00 4b     ..0d'0d..Cd.Hd.K
     f87:	64 00 4f 64 00 91 30 64 14 30 64 0a 90 41 64 00     d.Od..0d.0d..Ad.
     f97:	4d 64 0a 43 64 00 46 64 00 4b 64 00 4f 64 00 91     Md.Cd.Fd.Kd.Od..
     fa7:	33 64 1d 33 64 0a 33 64 14 90 4b 64 00 46 64 00     3d.3d.3d..Kd.Fd.
     fb7:	43 64 00 91 33 64 28 33 64 13 90 46 64 00 43 64     Cd..3d(3d..Fd.Cd
     fc7:	00 4b 64 00 4f 64 00 91 33 64 14 33 64 0a 90 41     .Kd.Od..3d.3d..A
     fd7:	64 00 4d 64 0a 41 64 00 46 64 00 4a 64 00 4d 64     d.Md.Ad.Fd.Jd.Md
     fe7:	00 91 2e 64 1e 2e 64 09 2e 64 14 90 41 64 00 46     ...d..d..d..Ad.F
     ff7:	64 00 4a 64 00 91 2e 64 28 2e 64 14 90 41 64 00     d.Jd...d(.d..Ad.
    1007:	46 64 00 4a 64 00 4d 64 00 91 2e 64 13 2e 64 0a     Fd.Jd.Md...d..d.
    1017:	90 3f 64 00 4b 64 0a 3f 64 00 44 64 00 48 64 00     .?d.Kd.?d.Dd.Hd.
    1027:	4b 64 00 91 2c 64 1e 2c 64 0a 2c 64 14 90 41 64     Kd..,d.,d.,d..Ad
    1037:	00 46 64 00 4a 64 00 91 2c 64 13 2e 64 14 90 46     .Fd.Jd..,d..d..F
    1047:	64 00 91 2c 64 0f ff 06 01 45 05 90 3f 64 00 43     d..,d....E..?d.C
    1057:	64 00 48 64 00 91 30 64 14 30 64 81 0a ff 2f 00     d.Hd..0d.0d.../.

00001067 <planetsong>:
    1067:	00 c0 00 00 c1 01 00 b0 07 7f 00 b1 07 74 00 ff     .............t..
    1077:	06 01 53 1b 90 48 78 00 91 30 6e 07 90 43 55 00     ..S..Hx..0n..CU.
    1087:	91 30 50 07 90 48 55 00 91 30 50 07 90 4a 78 00     .0P..HU..0P..Jx.
    1097:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 48 55 00     .0n..KU..0P..HU.
    10a7:	91 30 50 07 90 4a 78 00 91 30 6e 07 90 4b 55 00     .0P..Jx..0n..KU.
    10b7:	91 30 50 07 90 4d 55 00 91 30 50 07 90 4a 78 00     .0P..MU..0P..Jx.
    10c7:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 4d 55 00     .0n..KU..0P..MU.
    10d7:	91 30 50 07 90 4f 78 00 91 30 6e 07 90 4b 55 00     .0P..Ox..0n..KU.
    10e7:	91 30 50 07 90 4d 78 00 91 2e 6e 07 90 4f 55 07     .0P..Mx...n..OU.
    10f7:	50 78 00 91 30 6e 06 90 4d 55 00 91 30 50 07 90     Px..0n..MU..0P..
    1107:	4f 55 00 91 30 50 07 90 4b 78 00 91 30 6e 07 90     OU..0P..Kx..0n..
    1117:	4d 55 00 91 30 50 07 90 4a 55 00 91 30 50 07 30     MU..0P..JU..0P.0
    1127:	6e 03 90 4b 78 04 48 55 00 91 30 50 07 90 4a 55     n..Kx.HU..0P..JU
    1137:	00 91 30 50 07 90 46 78 00 91 30 6e 07 90 4d 55     ..0P..Fx..0n..MU
    1147:	00 91 30 50 07 90 46 78 00 91 30 50 07 90 4f 55     ..0P..Fx..0P..OU
    1157:	00 91 30 6e 07 90 46 78 00 91 30 50 07 90 4d 55     ..0n..Fx..0P..MU
    1167:	00 91 2e 6e 07 90 46 78 07 48 55 00 91 30 6e 07     ...n..Fx.HU..0n.
    1177:	90 43 55 00 91 30 50 07 90 48 55 00 91 30 50 07     .CU..0P..HU..0P.
    1187:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    1197:	90 48 55 00 91 30 50 06 90 4a 55 00 91 30 6e 07     .HU..0P..JU..0n.
    11a7:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 30 50 07     .KU..0P..MU..0P.
    11b7:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    11c7:	90 4d 55 00 91 30 50 07 90 4f 55 00 91 30 6e 07     .MU..0P..OU..0n.
    11d7:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 2e 6e 07     .KU..0P..MU...n.
    11e7:	90 4f 55 07 50 55 00 91 30 6e 07 90 4d 55 00 91     .OU.PU..0n..MU..
    11f7:	30 50 07 90 4f 55 00 91 30 50 07 90 4b 55 00 91     0P..OU..0P..KU..
    1207:	30 6e 07 90 4d 55 00 91 30 50 07 90 4a 55 00 91     0n..MU..0P..JU..
    1217:	30 50 07 30 6e 02 90 4b 55 05 48 55 00 91 30 50     0P.0n..KU.HU..0P
    1227:	07 90 4a 55 00 91 30 50 07 90 46 55 00 91 30 6e     ..JU..0P..FU..0n
    1237:	06 90 4d 55 00 91 30 50 07 90 46 55 00 91 30 50     ..MU..0P..FU..0P
    1247:	07 90 4f 55 00 91 30 6e 07 90 46 55 00 91 30 50     ..OU..0n..FU..0P
    1257:	07 90 4d 55 00 91 2e 6e 07 90 46 55 07 48 78 00     ..MU...n..FU.Hx.
    1267:	91 2c 6e 07 90 43 55 00 91 2c 50 07 90 48 55 00     .,n..CU..,P..HU.
    1277:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
    1287:	91 2c 50 07 90 48 55 00 91 2c 50 07 90 4a 78 00     .,P..HU..,P..Jx.
    1297:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 55 00     .,n..KU..,P..MU.
    12a7:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
    12b7:	91 2c 50 07 90 4d 55 00 91 2c 50 07 90 4f 78 00     .,P..MU..,P..Ox.
    12c7:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 78 00     .,n..KU..,P..Mx.
    12d7:	91 2b 6e 06 90 4f 55 07 50 78 00 91 2c 6e 07 90     .+n..OU.Px..,n..
    12e7:	4d 55 00 91 2c 50 07 90 4f 55 00 91 2c 50 07 90     MU..,P..OU..,P..
    12f7:	4b 78 00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90     Kx..,n..MU..,P..
    1307:	4a 55 00 91 2c 50 07 2c 6e 02 90 4b 78 05 48 55     JU..,P.,n..Kx.HU
    1317:	00 91 2c 50 07 90 4a 55 00 91 2c 50 07 90 46 78     ..,P..JU..,P..Fx
    1327:	00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90 46 78     ..,n..MU..,P..Fx
    1337:	00 91 2c 50 07 90 4f 55 00 91 2c 6e 07 90 46 78     ..,P..OU..,n..Fx
    1347:	00 91 2c 50 07 90 4d 55 00 91 2b 6e 07 90 46 78     ..,P..MU..+n..Fx
    1357:	07 48 55 00 91 29 6e 07 90 43 55 00 91 29 50 07     .HU..)n..CU..)P.
    1367:	90 48 55 00 91 29 50 06 90 4a 55 00 91 29 6e 07     .HU..)P..JU..)n.
    1377:	90 4b 55 00 91 29 50 07 90 48 55 00 91 29 50 07     .KU..)P..HU..)P.
    1387:	90 4a 55 00 91 2b 6e 07 90 4b 55 00 91 2b 50 07     .JU..+n..KU..+P.
    1397:	90 4d 55 00 91 2b 50 07 90 4a 55 00 91 2b 6e 07     .MU..+P..JU..+n.
    13a7:	90 4b 55 00 91 2b 50 07 90 4d 55 00 91 2b 50 07     .KU..+P..MU..+P.
    13b7:	90 4f 55 00 91 2c 6e 07 90 4b 55 00 91 2c 50 07     .OU..,n..KU..,P.
    13c7:	90 4d 55 00 91 2c 6e 07 90 4f 55 07 50 55 00 91     .MU..,n..OU.PU..
    13d7:	2e 6e 07 90 4d 55 00 91 2e 50 07 90 4f 55 00 91     .n..MU...P..OU..
    13e7:	2e 50 07 90 4b 55 00 91 2e 6e 07 90 4d 55 00 91     .P..KU...n..MU..
    13f7:	2e 50 07 90 4a 55 00 91 2e 50 07 2e 6e 02 90 4b     .P..JU...P..n..K
    1407:	55 05 48 55 00 91 2e 50 06 90 4a 55 00 91 2e 50     U.HU...P..JU...P
    1417:	07 90 46 55 00 91 2e 6e 07 90 4d 55 00 91 2e 50     ..FU...n..MU...P
    1427:	07 90 46 55 00 91 2e 50 07 90 4f 55 00 91 2e 6e     ..FU...P..OU...n
    1437:	07 90 46 55 00 91 2e 50 07 90 4d 55 00 91 2e 6e     ..FU...P..MU...n
    1447:	07 90 46 55 07 48 55 00 91 30 6e 07 90 43 55 00     ..FU.HU..0n..CU.
    1457:	91 30 50 07 90 48 55 00 91 30 50 07 90 4a 55 00     .0P..HU..0P..JU.
    1467:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 48 55 00     .0n..KU..0P..HU.
    1477:	91 30 50 07 90 4a 55 00 91 30 6e 07 90 4b 55 00     .0P..JU..0n..KU.
    1487:	91 30 50 07 90 4d 55 00 91 30 50 07 90 4a 55 00     .0P..MU..0P..JU.
    1497:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 4d 55 00     .0n..KU..0P..MU.
    14a7:	91 30 50 07 90 4f 55 00 91 30 6e 06 90 4b 55 00     .0P..OU..0n..KU.
    14b7:	91 30 50 07 90 4d 55 00 91 2e 6e 07 90 4f 55 07     .0P..MU...n..OU.
    14c7:	50 55 00 91 30 6e 07 90 4d 55 00 91 30 50 07 90     PU..0n..MU..0P..
    14d7:	4f 55 00 91 30 50 07 90 4b 55 00 91 30 6e 07 90     OU..0P..KU..0n..
    14e7:	4d 55 00 91 30 50 07 90 4a 55 00 91 30 50 07 30     MU..0P..JU..0P.0
    14f7:	6e 02 90 4b 55 05 48 55 00 91 30 50 07 90 4a 55     n..KU.HU..0P..JU
    1507:	00 91 30 50 07 90 46 55 00 91 30 6e 07 90 4d 55     ..0P..FU..0n..MU
    1517:	00 91 30 50 07 90 46 55 00 91 30 50 07 90 4f 55     ..0P..FU..0P..OU
    1527:	00 91 30 6e 07 90 46 55 00 91 30 50 07 90 4d 55     ..0n..FU..0P..MU
    1537:	00 91 2e 6e 07 90 46 55 07 48 55 00 91 30 6e 06     ...n..FU.HU..0n.
    1547:	90 43 55 00 91 30 50 07 90 48 55 00 91 30 50 07     .CU..0P..HU..0P.
    1557:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    1567:	90 48 55 00 91 30 50 07 90 4a 55 00 91 30 6e 07     .HU..0P..JU..0n.
    1577:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 30 50 07     .KU..0P..MU..0P.
    1587:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    1597:	90 4d 55 00 91 30 50 07 90 4f 55 00 91 30 6e 07     .MU..0P..OU..0n.
    15a7:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 2e 6e 07     .KU..0P..MU...n.
    15b7:	90 4f 55 07 50 55 00 91 30 6e 07 90 4d 55 00 91     .OU.PU..0n..MU..
    15c7:	30 50 07 90 4f 55 00 91 30 50 07 90 4b 55 00 91     0P..OU..0P..KU..
    15d7:	30 6e 07 90 4d 55 00 91 30 50 07 90 4a 55 00 91     0n..MU..0P..JU..
    15e7:	30 50 06 30 6e 03 90 4b 55 04 48 55 00 91 30 50     0P.0n..KU.HU..0P
    15f7:	07 90 4a 55 00 91 30 50 07 90 46 55 00 91 30 6e     ..JU..0P..FU..0n
    1607:	07 90 4d 55 00 91 30 50 07 90 46 55 00 91 30 50     ..MU..0P..FU..0P
    1617:	07 90 4f 55 00 91 30 6e 07 90 46 55 00 91 30 50     ..OU..0n..FU..0P
    1627:	07 90 4d 55 00 91 2e 6e 07 90 46 55 07 48 78 00     ..MU...n..FU.Hx.
    1637:	91 2c 6e 07 90 43 55 00 91 2c 50 07 90 48 55 00     .,n..CU..,P..HU.
    1647:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
    1657:	91 2c 50 07 90 48 55 00 91 2c 50 07 90 4a 78 00     .,P..HU..,P..Jx.
    1667:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 55 00     .,n..KU..,P..MU.
    1677:	91 2c 50 07 90 4a 78 00 91 2c 6e 06 90 4b 55 00     .,P..Jx..,n..KU.
    1687:	91 2c 50 07 90 4d 55 00 91 2c 50 07 90 4f 78 00     .,P..MU..,P..Ox.
    1697:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 78 00     .,n..KU..,P..Mx.
    16a7:	91 2b 6e 07 90 4f 55 07 50 78 00 91 2c 6e 07 90     .+n..OU.Px..,n..
    16b7:	4d 55 00 91 2c 50 07 90 4f 55 00 91 2c 50 07 90     MU..,P..OU..,P..
    16c7:	4b 78 00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90     Kx..,n..MU..,P..
    16d7:	4a 55 00 91 2c 50 07 2c 6e 02 90 4b 78 05 48 55     JU..,P.,n..Kx.HU
    16e7:	00 91 2c 50 07 90 4a 55 00 91 2c 50 07 90 46 78     ..,P..JU..,P..Fx
    16f7:	00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90 46 78     ..,n..MU..,P..Fx
    1707:	00 91 2c 50 07 90 4f 55 00 91 2c 6e 07 90 46 78     ..,P..OU..,n..Fx
    1717:	00 91 2c 50 07 90 4d 55 00 91 2b 6e 06 90 46 78     ..,P..MU..+n..Fx
    1727:	07 48 55 00 91 29 6e 07 90 43 55 00 91 29 50 07     .HU..)n..CU..)P.
    1737:	90 48 55 00 91 29 50 07 90 4a 55 00 91 29 6e 07     .HU..)P..JU..)n.
    1747:	90 4b 55 00 91 29 50 07 90 48 55 00 91 29 50 07     .KU..)P..HU..)P.
    1757:	90 4a 55 00 91 2b 6e 07 90 4b 55 00 91 2b 50 07     .JU..+n..KU..+P.
    1767:	90 4d 55 00 91 2b 50 07 90 4a 55 00 91 2b 6e 07     .MU..+P..JU..+n.
    1777:	90 4b 55 00 91 2b 50 07 90 4d 55 00 91 2b 50 07     .KU..+P..MU..+P.
    1787:	90 4f 55 00 91 2c 6e 07 90 4b 55 00 91 2c 50 07     .OU..,n..KU..,P.
    1797:	90 4d 55 00 91 2c 6e 07 90 4f 55 07 50 55 00 91     .MU..,n..OU.PU..
    17a7:	2e 6e 07 90 4d 55 00 91 2e 50 07 90 4f 55 00 91     .n..MU...P..OU..
    17b7:	2e 50 07 90 4b 55 00 91 2e 6e 06 90 4d 55 00 91     .P..KU...n..MU..
    17c7:	2e 50 07 90 4a 55 00 91 2e 50 07 2e 6e 03 90 4b     .P..JU...P..n..K
    17d7:	55 04 48 55 00 91 2e 50 07 90 4a 55 00 91 2e 50     U.HU...P..JU...P
    17e7:	07 90 46 55 00 91 2e 6e 07 90 4d 55 00 91 2e 50     ..FU...n..MU...P
    17f7:	07 90 46 55 00 91 2e 50 07 90 4f 55 00 91 30 6e     ..FU...P..OU..0n
    1807:	07 90 46 55 00 91 30 50 07 90 4d 55 00 91 2e 6e     ..FU..0P..MU...n
    1817:	07 90 46 55 07 54 64 00 48 64 00 91 30 6e 07 30     ..FU.Td.Hd..0n.0
    1827:	50 07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e     P.0P.0n.0P.0P.0n
    1837:	07 30 50 06 30 50 07 30 6e 07 30 50 07 30 50 07     .0P.0P.0n.0P.0P.
    1847:	30 6e 07 30 50 07 2e 6e 0e 30 6e 07 30 50 07 30     0n.0P..n.0n.0P.0
    1857:	50 07 30 6e 07 30 50 07 30 50 07 30 6e 07 30 50     P.0n.0P.0P.0n.0P
    1867:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 06     .0P.0n.0P.0P.0n.
    1877:	30 50 07 2e 6e 0e 90 33 64 00 37 64 00 3c 64 00     0P..n..3d.7d.<d.
    1887:	91 30 6e 07 30 50 07 30 50 07 90 32 64 00 37 64     .0n.0P.0P..2d.7d
    1897:	00 3a 64 00 91 30 6e 07 30 50 07 30 50 07 90 33     .:d..0n.0P.0P..3
    18a7:	64 00 37 64 00 3c 64 00 91 30 6e 07 30 50 07 30     d.7d.<d..0n.0P.0
    18b7:	50 07 90 37 64 00 3a 64 00 3e 64 00 91 30 6e 07     P..7d.:d.>d..0n.
    18c7:	30 50 07 30 50 07 90 37 64 00 3c 64 00 3f 64 00     0P.0P..7d.<d.?d.
    18d7:	91 30 6e 07 30 50 07 90 37 64 00 3a 64 00 3e 64     .0n.0P..7d.:d.>d
    18e7:	00 91 30 6e 07 30 6e 07 90 3a 64 00 43 64 00 3f     ..0n.0n..:d.Cd.?
    18f7:	64 00 91 33 6e 06 33 50 07 33 50 07 33 6e 07 33     d..3n.3P.3P.3n.3
    1907:	50 07 33 50 07 90 37 64 00 3a 64 00 3f 64 00 91     P.3P..7d.:d.?d..
    1917:	33 6e 07 33 50 07 33 50 07 33 6e 07 33 50 07 33     3n.3P.3P.3n.3P.3
    1927:	50 07 90 3a 64 00 3f 64 00 43 64 00 91 33 6e 07     P..:d.?d.Cd..3n.
    1937:	33 50 07 33 6e 07 33 6e 07 90 41 64 00 3e 64 00     3P.3n.3n..Ad.>d.
    1947:	3a 64 00 91 2e 6e 07 2e 50 07 2e 50 07 2e 6e 07     :d...n..P..P..n.
    1957:	2e 50 07 2e 50 06 90 35 64 00 3a 64 00 3e 64 00     .P..P..5d.:d.>d.
    1967:	91 2e 6e 07 2e 50 07 2e 50 07 2e 6e 07 2e 50 07     ..n..P..P..n..P.
    1977:	2e 50 07 90 3a 64 00 3e 64 00 41 64 00 91 2e 6e     .P..:d.>d.Ad...n
    1987:	07 2e 50 07 2e 6e 07 2e 6e 07 90 37 64 00 3c 64     ..P..n..n..7d.<d
    1997:	00 3f 64 00 91 30 6e 07 30 50 07 30 50 07 30 6e     .?d..0n.0P.0P.0n
    19a7:	07 30 50 07 30 50 07 30 6e 07 30 50 07 30 50 07     .0P.0P.0n.0P.0P.
    19b7:	30 6e 06 30 50 07 30 50 07 30 6e 07 30 50 07 2e     0n.0P.0P.0n.0P..
    19c7:	6e 0e 30 6e 07 30 50 07 30 50 07 30 6e 07 30 50     n.0n.0P.0P.0n.0P
    19d7:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 07     .0P.0n.0P.0P.0n.
    19e7:	30 50 07 30 50 07 30 6e 07 30 50 07 2e 6e 0d 90     0P.0P.0n.0P..n..
    19f7:	33 64 00 37 64 00 3c 64 00 91 30 6e 07 30 50 07     3d.7d.<d..0n.0P.
    1a07:	30 50 07 90 32 64 00 37 64 00 3a 64 00 91 30 6e     0P..2d.7d.:d..0n
    1a17:	07 30 50 07 30 50 07 90 33 64 00 37 64 00 3c 64     .0P.0P..3d.7d.<d
    1a27:	00 91 30 6e 07 30 50 07 30 50 07 90 37 64 00 3a     ..0n.0P.0P..7d.:
    1a37:	64 00 3e 64 00 91 30 6e 07 30 50 07 30 50 07 90     d.>d..0n.0P.0P..
    1a47:	37 64 00 3c 64 00 3f 64 00 91 30 6e 07 30 50 07     7d.<d.?d..0n.0P.
    1a57:	90 37 64 00 3a 64 00 3e 64 00 91 2e 6e 0e 90 3a     .7d.:d.>d...n..:
    1a67:	64 00 43 64 00 3f 64 00 91 33 6e 07 33 50 07 33     d.Cd.?d..3n.3P.3
    1a77:	50 07 33 6e 06 33 50 07 33 50 07 90 37 64 00 3a     P.3n.3P.3P..7d.:
    1a87:	64 00 3f 64 00 91 33 6e 07 33 50 07 33 50 07 33     d.?d..3n.3P.3P.3
    1a97:	6e 07 33 50 07 33 50 07 90 3a 64 00 3f 64 00 43     n.3P.3P..:d.?d.C
    1aa7:	64 00 91 33 6e 07 33 50 07 32 6e 0e 90 41 64 00     d..3n.3P.2n..Ad.
    1ab7:	3e 64 00 3a 64 00 91 2e 6e 07 2e 50 07 2e 50 07     >d.:d...n..P..P.
    1ac7:	2e 6e 07 2e 50 07 2e 50 07 90 35 64 00 3a 64 00     .n..P..P..5d.:d.
    1ad7:	3e 64 00 91 2e 6e 07 2e 50 06 2e 50 07 2e 6e 07     >d...n..P..P..n.
    1ae7:	2e 50 07 2e 50 07 90 3a 64 00 3e 64 00 41 64 00     .P..P..:d.>d.Ad.
    1af7:	91 2e 6e 05 ff 06 01 45 02 91 2e 50 07 2c 6e 0e     ..n....E...P.,n.
    1b07:	90 37 64 00 3c 64 00 3f 64 00 91 30 6e 07 30 50     .7d.<d.?d..0n.0P
    1b17:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 07     .0P.0n.0P.0P.0n.
    1b27:	30 50 07 30 50 07 30 6e 07 30 50 07 30 50 07 ff     0P.0P.0n.0P.0P..
    1b37:	2f 00                                               /.

00001b39 <my_patches>:
    1b39:	00 00 00 4b 1b 00 00 00 00 00 00 00 4b 1b 00 00     ...K........K...
	...

00001b4b <patch00>:
    1b4b:	00 02 04 00 00 dd 00 ff                             ........

00001b53 <level_data>:
    1b53:	00 00 03 15 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1d37:	06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    1d47:	06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    1d57:	06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    1d67:	06 06 06 06 06 06 06 06 06 06 06 06 05 05 05 05     ................
    1d77:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    1d87:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    1d97:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    1da7:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    1db7:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    1dc7:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    1dd7:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    1de7:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    1df7:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    1e07:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    1e17:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    1e27:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    1e37:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    1e47:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    1e57:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    1e67:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    1e77:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    1e87:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    1e97:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    1ea7:	05 05 05 05 05 05 05 05 05 05 05 05 02 01 01 01     ................
    1eb7:	01 01 03 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    1ec7:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    1ed7:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    1ee7:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    1ef7:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    1f07:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    1f17:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    1f27:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    1f37:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    1f47:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    1f57:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    1f67:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    1f77:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    1f87:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    1f97:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    1fa7:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    1fb7:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    1fc7:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    1fd7:	05 02 01 01 01 01 01 03 05 05 05 05 05 05 05 02     ................
    1fe7:	01 01 01 01 01 03 05 05 05 05 05 05 05 05 05 05     ................
    1ff7:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2007:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2017:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2027:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2037:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2047:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2057:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2067:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2077:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2087:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2097:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    20a7:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    20b7:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    20c7:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    20d7:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    20e7:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    20f7:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    2107:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    2117:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    2127:	01 01 01 01 01 01 01 01 01 01 01 01 04 04 04 04     ................
    2137:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    2147:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    2157:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    2167:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    2177:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    2187:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    2197:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    21a7:	04 04 04 04                                         ....

000021ab <sprites_data>:
    21ab:	fe fe fe fe fe fe fe 87 fe fe fe fe fe fe 87 87     ................
    21bb:	fe fe fe fe fe fe 87 87 fe fe fe fe 85 85 85 87     ................
    21cb:	fe fe fe 85 87 87 87 85 fe fe 85 87 87 87 87 85     ................
    21db:	fe 85 87 87 87 85 85 87 85 87 87 85 85 87 87 87     ................
    21eb:	87 87 87 fe fe fe fe fe d2 d2 eb d2 fe fe fe fe     ................
    21fb:	87 d2 fd eb fe fe fe fe 87 87 eb d2 fe fe fe fe     ................
    220b:	85 87 87 d2 fe fe fe fe 87 85 85 87 ef fe fe fe     ................
    221b:	87 ef 87 87 87 ef fe fe ef ff ef 87 87 ef fe fe     ................
    222b:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 87     ................
    223b:	fe fe fe fe fe fe 87 87 fe fe fe fe fe fe 87 87     ................
    224b:	fe fe fe fe 85 85 85 87 fe fe fe 85 87 87 87 85     ................
    225b:	fe fe 85 87 87 87 87 85 fe 85 87 87 87 85 85 87     ................
    226b:	fe fe fe fe fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    227b:	d2 d2 eb d2 fe fe fe fe 87 d2 fd eb fe fe fe fe     ................
    228b:	87 87 eb d2 fe fe fe fe 85 87 87 d2 fe fe fe fe     ................
    229b:	87 85 85 87 ef fe fe fe 87 ef 87 87 87 ef fe fe     ................
    22ab:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    22bb:	fe fe fe fe fe fe fe fe fe ba ba ba ba ba ba fe     ................
    22cb:	ba bd bd bd bd bd bd ba fe ba ba ba ba ba ba fe     ................
    22db:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    22eb:	fe fe 46 46 46 46 46 46 fe a5 a5 a5 47 47 46 fe     ..FFFFFF....GGF.
    22fb:	fe 46 46 47 47 46 3f 3f 46 46 47 47 46 fe fe fe     .FFGGF??FFGGF...
    230b:	46 46 47 47 46 fe fe fe fe 46 46 47 47 3f 3f fe     FFGGF....FFGG??.
    231b:	fe a5 a5 a5 47 fe fe fe fe fe 46 46 46 46 fe fe     ....G.....FFFF..
    232b:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    233b:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    234b:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    235b:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    236b:	85 87 87 85 fe 85 87 87 fe 85 87 85 fe 85 87 87     ................
    237b:	fe 85 87 87 ad ad ad ad fe fe 85 87 ad ad ad ad     ................
    238b:	fe fe 85 87 ad ad ad ad fe fe fe 85 a4 ad 87 87     ................
    239b:	fe fe fe fe a4 a4 85 87 fe fe fe fe a4 a4 85 87     ................
    23ab:	87 ef 87 85 87 ef fe fe 87 87 87 85 87 87 ef fe     ................
    23bb:	ad ad ad ad ad 87 ef fe ad ad ad ad ad ad a4 ad     ................
    23cb:	ad ad ad ad ad a4 a4 a4 87 87 87 ef fe fe fe fe     ................
    23db:	87 87 87 ef fe fe fe fe 87 87 87 ef fe fe fe fe     ................
    23eb:	87 ef 87 85 87 ef fe fe 87 87 87 85 87 87 ef fe     ................
    23fb:	ad ad ad ad ad 87 ef fe ad ad ad ad ad ad a4 ad     ................
    240b:	ad ad ad ad ad a4 a4 a4 87 87 87 ef fe fe fe fe     ................
    241b:	87 87 87 ef fe fe fe fe 87 87 ef fe fe fe fe fe     ................
    242b:	85 87 87 85 85 87 87 87 85 87 87 85 fe 85 87 87     ................
    243b:	fe 85 87 85 fe 85 87 87 fe 85 87 87 ad ad ad ad     ................
    244b:	fe fe 85 87 ad ad ad ad fe fe 85 87 ad ad ad ad     ................
    245b:	fe fe fe 85 a4 ad 87 87 fe fe fe fe a4 a4 85 87     ................
    246b:	ef ff ef 87 87 ef fe fe 87 ef 87 85 87 ef fe fe     ................
    247b:	87 87 87 85 87 87 ef fe ad ad ad ad ad 87 ef fe     ................
    248b:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    249b:	87 87 87 ef fe fe fe fe 87 87 ef fe fe fe fe fe     ................
    24ab:	ef ff ef 87 87 ef fe fe 87 ef 87 85 87 ef fe fe     ................
    24bb:	87 87 87 85 87 87 ef fe ad ad ad ad ad 87 ef fe     ................
    24cb:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    24db:	87 87 87 ef fe fe fe fe 87 87 87 87 ef fe fe fe     ................
    24eb:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    24fb:	fe fe fe 27 07 fe fe fe fe fe 27 77 27 07 fe fe     ...'......'w'...
    250b:	fe fe 07 27 07 07 fe fe fe fe fe 07 07 fe fe fe     ...'............
    251b:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    252b:	fe fe fe fe fe fe 85 87 fe fe fe fe fe fe 85 87     ................
    253b:	fe fe fe fe fe 85 87 ef fe fe fe fe fe 85 87 ef     ................
    254b:	fe fe fe fe 85 87 ef fe fe fe fe fe 85 87 ef fe     ................
    255b:	fe fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4     ................
    256b:	ef fe 85 ef fe fe fe fe ef fe 85 85 ef fe fe fe     ................
    257b:	fe fe 85 85 ef fe fe fe fe fe 85 85 ef fe fe fe     ................
    258b:	fe fe 85 85 ef fe fe fe fe fe 85 85 ef fe fe fe     ................
    259b:	fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe     ................
    25ab:	fe fe fe fe fe fe fe 85 fe fe fe fe fe fe fe 85     ................
    25bb:	fe fe fe fe fe 85 85 87 fe fe fe fe 85 87 87 87     ................
    25cb:	fe fe fe a4 87 87 87 ef fe fe fe a4 ef ef ef fe     ................
    25db:	fe fe fe a4 a4 fe fe fe fe fe fe a4 a4 a4 fe fe     ................
    25eb:	87 87 85 fe fe fe fe fe 87 87 87 85 fe fe fe fe     ................
    25fb:	87 87 87 ef fe fe fe fe 87 ef ef fe fe fe fe fe     ................
    260b:	ef 85 ef fe fe fe fe fe 85 85 ef fe fe fe fe fe     ................
    261b:	a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe fe fe     ................
    262b:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 85 ef     ................
    263b:	fe fe fe fe 85 85 85 ef a4 a4 85 85 85 85 ef fe     ................
    264b:	a4 a4 85 85 85 85 ef fe a4 a4 ef ef ef ef fe fe     ................
    265b:	a4 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    266b:	87 87 ef fe fe fe fe fe fe 85 87 ef fe fe fe fe     ................
    267b:	fe 85 87 87 ef fe fe fe fe fe 85 87 ef fe fe fe     ................
    268b:	fe fe 85 87 87 ef fe fe fe fe fe 85 87 ef fe fe     ................
    269b:	fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe     ................
    26ab:	fe fe fe fe fe fe fe 85 fe fe fe fe fe fe fe 85     ................
    26bb:	fe fe fe fe fe 85 85 85 fe fe fe fe 85 85 85 85     ................
    26cb:	fe fe fe a4 85 85 85 ef fe fe fe a4 ef ef ef fe     ................
    26db:	fe fe fe a4 a4 fe fe fe fe fe fe a4 a4 a4 fe fe     ................
    26eb:	87 87 ef fe fe fe fe fe 85 87 ef 85 fe fe fe fe     ................
    26fb:	85 87 ef ef fe fe fe fe 85 87 ef fe fe fe fe fe     ................
    270b:	85 87 ef fe fe fe fe fe 85 87 ef fe fe fe fe fe     ................
    271b:	a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe fe fe     ................
    272b:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 85 ef     ................
    273b:	fe fe fe fe 85 85 85 ef a4 a4 85 85 85 85 a4 a4     ................
    274b:	a4 a4 85 85 85 85 a4 a4 a4 a4 ef ef ef ef a4 a4     ................
    275b:	a4 fe fe fe fe fe a4 fe fe fe fe fe fe fe fe fe     ................
    276b:	87 87 85 87 ef fe fe fe fe fe 85 87 87 ef fe fe     ................
    277b:	fe fe 85 87 87 ef fe fe 85 85 85 87 ef fe fe fe     ................
    278b:	87 87 87 87 ef fe fe fe ef ef ef ef fe fe fe fe     ................
    279b:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    27ab:	fe fe fe fe fe fe fe fe fe fe 12 12 12 12 fe fe     ................
    27bb:	ad 12 0f 1f 1f 0f 12 ad ad 12 12 12 12 12 12 ad     ................
    27cb:	ad ad 12 12 12 12 ad ad ad 12 ad 12 12 ad 12 ad     ................
    27db:	ad fe 12 12 12 12 fe ad ad fe fe fe fe fe fe ad     ................
    27eb:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 7f     ................
    27fb:	fe fe fe fe fe 7f 7f 7f fe fe fe fe 7f 7f 7f 7f     ................
    280b:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe fe fe     ................
    281b:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    282b:	a4 fe fe fe fe fe fe fe a4 ad fe fe ff ff a4 ad     ................
    283b:	a4 ad f6 ff ff a4 ad f6 a4 ad f6 ff a4 ad f6 ff     ................
    284b:	a4 ad fe fe a4 ad f6 ff a4 fe fe a4 a4 ad f6 fe     ................
    285b:	fe fe fe a4 a4 ad f6 f6 fe fe fe fe fe fe fe fe     ................
    286b:	fe fe fe fe fe fe fe fe f6 ff ff ff d2 fe fe fe     ................
    287b:	ff ff ff ff d2 eb fe fe ff fe ff ff eb fd d2 fe     ................
    288b:	fe fe fe ff d2 eb d2 d2 fe fe fe fe fe fe fe fe     ................
    289b:	f6 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    28ab:	fe fe bf 7f 7f bf fe fe fe 7f 7f 7f 7f 7f 7f fe     ................
    28bb:	bf 7f 7f 7f 7f 7f 7f bf 7f 7f 7f 7f 7f 7f 7f 7f     ................
    28cb:	7f 7f 7f 7f 7f 7f 7f 7f bf 7f 7f 7f 7f 7f 7f bf     ................
    28db:	fe 7f 7f 7f 7f 7f 7f fe fe fe bf 7f 7f bf fe fe     ................
    28eb:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    28fb:	fe fe fe 7f 7f fe fe fe fe fe 7f 7f 7f 7f fe fe     ................
    290b:	fe fe 7f 7f 7f 7f fe fe fe fe fe 7f 7f fe fe fe     ................
    291b:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    292b:	fe fe bf 7f 7f bf fe fe fe 7f 7f 7f 7f 7f 7f fe     ................
    293b:	bf 7f fe fe 7f 7f 7f bf 7f fe fe fe fe 7f 7f 7f     ................
    294b:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe 7f bf     ................
    295b:	fe fe fe fe fe fe 7f fe fe fe fe fe fe bf fe fe     ................
    296b:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    297b:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    298b:	fe fe fe bf e3 fe fe fe fe fe fe fe fe fe fe fe     ................
    299b:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    29ab:	fe fe fe fe fe fe fe fe fe fe fe fe ff fe fe fe     ................
    29bb:	fe fe fe fe 7f ff fe fe fe fe fe fe 7f 7f ff fe     ................
    29cb:	fe fe fe fe 7f 7f 7f ff fe fe fe fe 7f 7f 7f fe     ................
    29db:	fe fe fe fe 7f 7f fe fe fe fe fe fe 7f fe fe fe     ................
    29eb:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    29fb:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2a0b:	7f 7f 7f 7f 7f 7f ff fe fe 7f 7f 7f 7f ff fe fe     ................
    2a1b:	fe fe 7f 7f ff fe fe fe fe fe fe fe fe fe fe fe     ................
    2a2b:	fe fe fe ff fe fe fe fe fe fe ff 7f 7f fe fe fe     ................
    2a3b:	fe ff 7f 7f 7f 7f fe fe ff 7f 7f 7f 7f 7f 7f fe     ................
    2a4b:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2a5b:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2a6b:	fe fe 12 12 12 12 fe fe fe 12 0f 1f 1f 0f 12 fe     ................
    2a7b:	ad 12 12 12 12 12 12 ad ad 12 ad 12 12 ad 12 ad     ................
    2a8b:	ad ad 12 12 12 12 ad ad ad fe 12 12 12 12 fe ad     ................
    2a9b:	ad fe fe fe fe fe fe ad ad fe fe fe fe fe fe ad     ................
    2aab:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 7f     ................
    2abb:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe fe 7f     ................
    2acb:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2adb:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2aeb:	a4 fe fe fe fe fe fe fe a4 a4 fe fe fe fe fe fe     ................
    2afb:	a4 a4 ad fe fe fe fe fe a4 a4 ad ad fe fe fe fe     ................
    2b0b:	a4 a4 ad ad f6 fe fe fe a4 a4 ad ad f6 f6 ff ff     ................
    2b1b:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    2b2b:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2b3b:	fe fe ff ff ff ff a4 a4 fe ff ff ff ff a4 a4 a4     ................
    2b4b:	ff ff ff ff ff a4 a4 a4 ff ff ff ff a4 a4 a4 ad     ................
    2b5b:	ff ff ff ff a4 a4 ad ad ff ff ff a4 a4 ad ad f6     ................
    2b6b:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2b7b:	a4 ad ad f6 f6 ff ff ff a4 ad ad f6 f6 ff ff ff     ................
    2b8b:	ad ad f6 f6 ff ff ff ff ad f6 f6 ff ff ff ff ff     ................
    2b9b:	f6 f6 ff ff ff ff ff ff f6 ff ff fe fe ff ff ff     ................
    2bab:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2bbb:	d2 fe fe fe fe fe fe fe d2 d2 fe fe fe fe fe fe     ................
    2bcb:	d2 d2 d2 fe fe fe fe fe d2 d3 eb d3 fe fe fe fe     ................
    2bdb:	d2 eb fd eb d2 fe fe fe d2 d3 eb d3 d2 d2 fe fe     ................
    2beb:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    2bfb:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 fe fe fe     ................
    2c0b:	a4 a4 ad ad fe fe fe fe a4 a4 ad fe fe fe fe fe     ................
    2c1b:	a4 a4 fe fe fe fe fe fe a4 fe fe fe fe fe fe fe     ................
    2c2b:	ff ff fe a4 ad ad f6 f6 ff fe a4 a4 ad ad f6 f6     ................
    2c3b:	fe fe a4 a4 ad ad f6 f6 fe a4 a4 a4 ad ad f6 f6     ................
    2c4b:	fe a4 a4 a4 a4 ad ad f6 a4 a4 a4 a4 a4 a4 ad ad     ................
    2c5b:	a4 a4 a4 a4 a4 a4 a4 ad a4 a4 a4 a4 a4 a4 a4 a4     ................
    2c6b:	ff ff fe fe fe fe ff ff ff fe fe fe fe fe fe ff     ................
    2c7b:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2c8b:	f6 fe fe fe fe fe fe fe f6 f6 fe fe fe fe fe fe     ................
    2c9b:	ad f6 f6 fe fe fe fe fe ad ad f6 f6 fe fe fe fe     ................
    2cab:	d2 d2 d2 d2 d2 d2 d2 fe ff ff ff ff ff ff ff ff     ................
    2cbb:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2ccb:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2cdb:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2ceb:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 87 ef     ................
    2cfb:	fe fe fe fe 85 87 87 ef a4 a4 85 85 85 87 ef fe     ................
    2d0b:	a4 a4 87 87 87 87 ef fe a4 a4 ef ef ef ef fe fe     ................
    2d1b:	a4 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2d2b:	87 87 ef fe fe fe fe fe fe 85 85 ef fe fe fe fe     ................
    2d3b:	fe 85 85 85 ef fe fe fe fe fe 85 85 ef fe fe fe     ................
    2d4b:	fe fe 85 85 85 ef fe fe fe fe fe 85 85 ef fe fe     ................
    2d5b:	fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe     ................
    2d6b:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2d7b:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2d8b:	fe fe fe fe fe fe fe fe fe fe fe fe fe 85 85 85     ................
    2d9b:	fe a4 87 87 87 87 87 87 a4 a4 ef ef ef ef ef ef     ................
    2dab:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 87     ................
    2dbb:	fe fe fe fe 85 85 85 87 fe fe fe 85 87 87 87 85     ................
    2dcb:	fe fe 85 85 87 87 87 87 85 85 85 85 85 87 87 ad     ................
    2ddb:	87 87 87 87 ad 85 87 87 ef ef ef ef ad ad a4 a4     ................
    2deb:	87 87 87 87 fe fe fe fe 87 d2 d2 eb d2 fe fe fe     ................
    2dfb:	87 87 d2 fd eb fe fe fe 87 87 87 eb d2 fe fe fe     ................
    2e0b:	85 85 87 87 d2 fe fe fe ad ad ad ad ad 87 ef fe     ................
    2e1b:	ad ad ad ad ad ad a4 ad a4 ad ad ad ad a4 a4 a4     ................

00002e2b <map_enemy_spider_1>:
    2e2b:	01 01 23                                            ..#

00002e2e <map_enemy_spider_0>:
    2e2e:	01 01 18                                            ...

00002e31 <map_enemy_shark>:
    2e31:	01 01 05                                            ...

00002e34 <map_enemy_shot>:
    2e34:	01 01 0d                                            ...

00002e37 <map_hero_shot>:
    2e37:	01 01 04                                            ...

00002e3a <map_hero_ship_large>:
    2e3a:	04 02 25 26 27 28 29 2a 2b 2c                       ..%&'()*+,

00002e44 <map_hero_ship_1>:
    2e44:	03 01 24 1a 1b                                      ..$..

00002e49 <map_hero_ship_0>:
    2e49:	03 01 19 1a 1b                                      .....

00002e4e <map_hero_prone>:
    2e4e:	03 01 2f 30 31                                      ../01

00002e53 <map_hero_jump>:
    2e53:	02 03 02 03 0a 0c 16 17                             ........

00002e5b <map_hero_step_3>:
    2e5b:	02 03 02 03 0a 0b 2d 2e                             ......-.

00002e63 <map_hero_step_2>:
    2e63:	02 03 00 01 07 09 14 15                             ........

00002e6b <map_hero_step_1>:
    2e6b:	02 03 02 03 0a 0b 12 13                             ........

00002e73 <map_hero_step_0>:
    2e73:	02 03 00 01 07 09 10 11                             ........

00002e7b <map_hero_idle>:
    2e7b:	02 03 00 01 07 08 0e 0f                             ........

00002e83 <map_explosion_2>:
    2e83:	01 01 1e                                            ...

00002e86 <map_explosion_1>:
    2e86:	01 01 1d                                            ...

00002e89 <map_explosion_0>:
    2e89:	01 01 1c                                            ...

00002e8c <map_meteor>:
    2e8c:	01 01 1f                                            ...

00002e8f <map_up_arrow>:
    2e8f:	01 01 22                                            .."

00002e92 <map_down_arrow>:
    2e92:	01 01 21                                            ..!

00002e95 <map_right_arrow>:
    2e95:	01 01 20                                            .. 

00002e98 <map_none>:
    2e98:	01 01 06                                            ...

00002e9b <tiles_data>:
	...
    2edb:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    2eeb:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    2efb:	ff f8 fb f8 fb f8 f8 fd ff fb f8 f8 fb f8 f8 f8     ................
    2f0b:	ff f8 f8 fb f8 f8 f8 f8 ff f8 f8 f8 f8 f8 f8 f8     ................
    2f1b:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    2f2b:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    2f3b:	fd f8 fb f8 fb f8 f8 fd f8 fb f8 f8 fb f8 f8 f8     ................
    2f4b:	f8 f8 f8 fb f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    2f5b:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    2f6b:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    2f7b:	fd f8 fb f8 fb f8 f8 ff f8 fb f8 f8 fb f8 f8 ff     ................
    2f8b:	f8 f8 f8 fb f8 f8 f8 ff f8 f8 f8 f8 f8 f8 f8 ff     ................
    2f9b:	fa f8 f8 f8 f8 f8 f8 f8 f8 f8 fb f8 f8 f8 fb f8     ................
    2fab:	f8 f8 fb f8 fb fb f8 f8 f8 f8 f8 fb f8 f8 f8 f8     ................
    2fbb:	f8 f8 fb f8 fb f8 f8 f8 f8 fb f8 f8 fb f8 f8 f8     ................
    2fcb:	f8 f8 f8 fb f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    2fdb:	ac ac ac ac ac ac ac ac ac ac ac ac ac ac ac ac     ................
    2feb:	ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad     ................
    2ffb:	ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae     ................
    300b:	af af af af af af af af af af af af af af af af     ................
    301b:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    302b:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    303b:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    304b:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    305b:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    306b:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    307b:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    308b:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    309b:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    30ab:	ab ab ab ab ab ab ab ab ab ad ad ad ad ad ad ab     ................
    30bb:	ae ae ae ae ae ae ae ae ab ae ae ae ae ae ae ab     ................
    30cb:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    30db:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab a0     ................
    30eb:	ab ab ab ab ab a0 a0 a0 ab ab ab ab a0 a0 a0 a0     ................
    30fb:	ab ab ab a0 a0 a0 a0 a0 ab ab a0 a0 a0 a0 a0 a0     ................
    310b:	ab ab a0 a0 a0 a0 a0 a0 ab a0 a0 a0 a0 a0 a0 a0     ................
    311b:	ab a4 ff ff ff ff ff ab a0 a0 a4 ff ff ff ff ff     ................
    312b:	a0 a0 a0 a4 ff ff ff ff a0 a0 a0 a0 a4 ff ff ff     ................
    313b:	a0 a0 a0 a0 a0 a4 ff ff a0 a0 a0 a0 a0 a0 a4 ff     ................
    314b:	a0 a0 a0 a0 a0 a0 a4 ff a0 a0 a0 a0 a0 a0 a0 a4     ................
    315b:	ab ab ab ab ab ab ab ab ff ab ab ab ab ab ab ab     ................
    316b:	ff ff ff ab ab ab ab ab ff ff ff ff ab ab ab ab     ................
    317b:	ff ff ff ff ff ab ab ab ff ff ff ff ff ff ab ab     ................
    318b:	ff ff ff ff ff ff ab ab ff ff ff ff ff ff ff ab     ................
	...
    31b3:	00 00 00 e3 00 00 00 00 00 00 e3 ff e3 00 00 00     ................
    31c3:	00 00 00 e3 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    31db:	ab a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    31eb:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    31fb:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    320b:	a0 a0 a0 a0 a0 a0 a0 a0 ab a0 a0 a0 a0 a0 a0 a0     ................
    321b:	a0 a0 a0 a0 a0 a0 a0 a4 a0 a0 a0 a0 a0 a0 a0 a0     ................
    322b:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    323b:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    324b:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a4     ................
    325b:	ff ff ff ff ff ff ff ab a4 ff ff ff ff ff ff ff     ................
    326b:	a4 ff ff ff ff ff ff ff a4 ff ff ff ff ff ff ff     ................
    327b:	a4 ff ff ff ff ff ff ff a4 ff ff ff ff ff ff ff     ................
    328b:	a4 ff ff ff ff ff ff ff ff ff ff ff ff ff ff ab     ................
    329b:	ab a0 a0 a0 a0 a0 a0 a0 ab ab a0 a0 a0 a0 a0 a0     ................
    32ab:	ab ab a0 a0 a0 a0 a0 a0 ab ab ab a0 a0 a0 a0 a0     ................
    32bb:	ab ab ab ab a0 a0 a0 a0 ab ab ab ab ab a0 a0 a0     ................
    32cb:	ab ab ab ab ab ab ab a0 ab ab ab ab ab ab ab ab     ................
    32db:	a0 a0 a0 a0 a0 a0 a0 a4 a0 a0 a0 a0 a0 a0 a4 ff     ................
    32eb:	a0 a0 a0 a0 a0 a0 a4 ff a0 a0 a0 a0 a0 a4 ff ff     ................
    32fb:	a0 a0 a0 a0 a4 ff ff ff a0 a0 a0 a4 ff ff ff ff     ................
    330b:	a0 a0 a4 ff ff ff ff ff ab a4 ff ff ff ff ff ab     ................
    331b:	ff ff ff ff ff ff ff ab ff ff ff ff ff ff ab ab     ................
    332b:	ff ff ff ff ff ff ab ab ff ff ff ff ff ab ab ab     ................
    333b:	ff ff ff ff ab ab ab ab ff ff ff ab ab ab ab ab     ................
    334b:	ff ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    335b:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    336b:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    337b:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    338b:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
	...
    33a7:	00 00 96 96 00 00 00 00 00 96 96 96 00 00 00 00     ................
    33b7:	96 96 96 96 00 00 00 96 96 96 96 96 00 00 96 96     ................
    33c7:	96 96 96 96 00 00 96 96 96 96 96 96 00 96 96 96     ................
    33d7:	96 96 96 96 00 96 96 96 96 96 96 00 96 96 96 96     ................
    33e7:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    33f7:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3407:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3417:	96 96 96 96 00 00 00 00 00 00 00 00 96 96 00 00     ................
    3427:	00 00 00 00 96 96 96 00 00 00 00 00 96 96 96 96     ................
    3437:	00 00 00 00 96 96 96 96 96 00 00 00 96 96 96 96     ................
    3447:	96 96 00 00 96 96 96 96 96 96 00 00 96 96 96 96     ................
    3457:	96 96 96 00 bf bf bf bf bf bf bf bf 00 00 00 00     ................
	...
    349b:	00 96 96 96 95 96 96 96 00 96 96 96 95 96 96 96     ................
    34ab:	96 96 96 96 96 95 96 96 96 96 96 96 96 95 96 96     ................
    34bb:	96 96 96 96 96 96 95 96 96 96 96 96 96 bf 95 96     ................
    34cb:	95 84 96 96 96 bf 96 95 8c 83 83 8c 96 bf 96 96     ................
    34db:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    34eb:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    34fb:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    350b:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    351b:	96 96 96 95 96 96 96 00 96 96 96 95 96 96 96 00     ................
    352b:	96 96 95 96 96 96 96 96 96 96 95 96 96 96 96 96     ................
    353b:	96 95 96 96 96 96 96 96 96 95 96 96 96 96 95 96     ................
    354b:	95 96 96 96 96 95 95 95 96 96 96 96 94 8c 8c 95     ................
    355b:	82 82 82 82 82 bf 96 96 00 d8 d8 d8 bf ff bf 82     ................
    356b:	00 d8 d8 bf ff ff ff bf 00 d8 bf ff ff ff ff ff     ................
    357b:	bf bf ff ff ff ff ff ff 00 00 bf ff ff ff ff ff     ................
    358b:	00 00 94 bf ff ff ff bf 00 00 00 8c bf ff bf d8     ................
    359b:	96 96 96 96 96 96 96 96 83 83 8c 8c 8c 8c 8c 83     ................
    35ab:	d8 d8 d8 d8 d8 d8 d8 d8 bf d8 d8 d8 d8 d8 d8 d8     ................
    35bb:	ff bf bf d8 d8 d8 d8 d8 bf d8 d8 d8 d8 d8 d8 d8     ................
    35cb:	d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 82 82     ................
    35db:	96 96 8c 83 83 8c 8c 8c 83 82 83 83 83 83 8c 00     ................
    35eb:	82 82 82 83 83 83 83 00 82 82 82 83 83 83 83 00     ................
    35fb:	d8 82 82 83 83 83 83 00 82 82 82 83 83 83 00 00     ................
    360b:	82 82 83 83 83 95 00 00 82 82 83 83 95 00 00 00     ................
	...
    3653:	bf bf bf bf bf bf bf bf 00 00 00 96 95 ff d8 d8     ................
    3663:	00 00 00 00 96 ff 83 82 00 00 00 00 00 ff 96 96     ................
    3673:	00 00 00 00 00 bf 96 96 00 00 00 00 00 bf 96 96     ................
    3683:	00 00 00 00 00 bf 96 96 00 00 00 00 00 bf 00 00     ................
    3693:	00 00 00 00 00 77 00 00 d8 d8 d8 82 82 82 82 82     .....w..........
    36a3:	82 82 82 82 82 83 83 83 8c 8c 83 83 83 83 8c 95     ................
    36b3:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    36c3:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    36d3:	00 96 96 96 96 96 96 00 83 83 8c 95 96 00 00 00     ................
    36e3:	83 8c 96 96 00 00 00 00 96 96 96 00 00 00 00 00     ................
    36f3:	96 96 96 00 00 00 00 00 96 96 00 00 00 00 00 00     ................
    3703:	96 96 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    371f:	00 77 00 00 00 00 00 00 00 77 00 00 00 00 00 00     .w.......w......
    372f:	00 77 00 00 00 00 00 00 00 77 00 00 00 00 00 00     .w.......w......
    373f:	00 77 00 00 00 00 00 00 00 77 00 00 00 00 00 00     .w.......w......
	...
    37a3:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    37b3:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    37cb:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3967:	ff ff ff 00 00 00 00 ff ff ff 00 00 00 00 00 ff     ................
    3977:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
    3987:	ff ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 00     ................
	...
    39a3:	00 ff ff ff 00 00 00 00 00 00 ff ff ff 00 00 00     ................
    39b3:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    39c3:	00 00 ff ff ff 00 00 00 00 ff ff ff 00 00 00 00     ................
	...
    3a83:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    3a93:	00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3ab3:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    3b03:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    3b27:	00 ff ff 00 00 00 00 00 ff ff 00 00 00 00 00 ff     ................
    3b37:	ff 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff 00     ................
    3b47:	00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    3b63:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    3b73:	00 6f 6f 00 6f 6f 6f 00 00 6f 6f 6f 00 6f 6f 00     .oo.ooo..ooo.oo.
    3b83:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    3ba3:	00 00 00 6f 6f 00 00 00 00 00 6f 6f 6f 00 00 00     ...oo.....ooo...
    3bb3:	00 00 00 6f 6f 00 00 00 00 00 00 6f 6f 00 00 00     ...oo......oo...
    3bc3:	00 00 00 6f 6f 00 00 00 00 6f 6f 6f 6f 6f 6f 00     ...oo....oooooo.
	...
    3be3:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    3bf3:	00 00 00 00 6f 6f 00 00 00 00 00 6f 6f 00 00 00     ....oo.....oo...
    3c03:	00 00 6f 6f 00 00 00 00 00 6f 6f 6f 6f 6f 6f 00     ..oo.....oooooo.
	...
    3c23:	00 6f 6f 6f 6f 6f 6f 00 00 00 00 00 6f 6f 00 00     .oooooo.....oo..
    3c33:	00 00 00 6f 6f 00 00 00 00 00 00 00 6f 6f 00 00     ...oo.......oo..
    3c43:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    3c67:	6f 6f 00 00 00 00 00 6f 6f 6f 00 00 00 00 6f 6f     oo.....ooo....oo
    3c77:	6f 6f 00 00 00 6f 6f 00 6f 6f 00 00 00 6f 6f 6f     oo...oo.oo...ooo
    3c87:	6f 6f 6f 00 00 00 00 00 6f 6f 00 00 00 00 00 00     ooo.....oo......
	...
    3ca3:	00 6f 6f 6f 6f 6f 6f 00 00 6f 6f 00 00 00 00 00     .oooooo..oo.....
    3cb3:	00 6f 6f 6f 6f 6f 00 00 00 00 00 00 00 6f 6f 00     .ooooo.......oo.
    3cc3:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    3ce3:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 00 00 00     ..oooo...oo.....
    3cf3:	00 6f 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     .ooooo...oo..oo.
    3d03:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    3d23:	00 6f 6f 6f 6f 6f 6f 00 00 00 00 00 00 6f 6f 00     .oooooo......oo.
    3d33:	00 00 00 00 6f 6f 00 00 00 00 00 6f 6f 00 00 00     ....oo.....oo...
    3d43:	00 00 6f 6f 00 00 00 00 00 00 6f 6f 00 00 00 00     ..oo......oo....
	...
    3d63:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    3d73:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    3d83:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    3da3:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    3db3:	00 00 6f 6f 6f 6f 6f 00 00 00 00 00 00 6f 6f 00     ..ooooo......oo.
    3dc3:	00 00 00 00 6f 6f 00 00 00 00 6f 6f 6f 00 00 00     ....oo....ooo...
	...
    3e1b:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    3e2b:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    3e3b:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    3e4b:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    3f23:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    3f33:	00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    3f4b:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3f63:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    3f73:	00 ff ff 00 ff ff ff 00 00 ff ff 00 ff ff ff 00     ................
    3f83:	00 ff ff 00 00 00 00 00 00 00 ff ff ff ff ff 00     ................
	...
    3fa3:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    3fb3:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    3fc3:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    3fe3:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    3ff3:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    4003:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
	...
    4023:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    4033:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    4043:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    4063:	00 ff ff ff ff 00 00 00 00 ff ff 00 ff ff 00 00     ................
    4073:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    4083:	00 ff ff 00 ff ff 00 00 00 ff ff ff ff 00 00 00     ................
	...
    40a3:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    40b3:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    40c3:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    40e3:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    40f3:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    4103:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    4123:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    4133:	00 ff ff 00 00 00 00 00 00 ff ff 00 ff ff ff 00     ................
    4143:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
	...
    4163:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    4173:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    4183:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    41a3:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    41b3:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    41c3:	00 00 00 ff ff 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    41e7:	ff ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    41f7:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 ff ff 00     ................
    4207:	00 ff ff 00 00 00 ff ff ff ff 00 00 00 00 00 00     ................
	...
    4223:	00 ff ff 00 00 ff ff 00 00 ff ff 00 ff ff 00 00     ................
    4233:	00 ff ff ff ff 00 00 00 00 ff ff ff ff 00 00 00     ................
    4243:	00 ff ff 00 ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
	...
    4263:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    4273:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    4283:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    42a3:	00 ff ff 00 00 00 ff ff 00 ff ff ff 00 ff ff ff     ................
    42b3:	00 ff ff ff ff ff ff ff 00 ff ff 00 ff 00 ff ff     ................
    42c3:	00 ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff     ................
	...
    42e3:	00 ff ff 00 00 ff ff 00 00 ff ff ff 00 ff ff 00     ................
    42f3:	00 ff ff ff ff ff ff 00 00 ff ff ff ff ff ff 00     ................
    4303:	00 ff ff 00 ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    4323:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    4333:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    4343:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    4363:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    4373:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    4383:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    43a3:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    43b3:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    43c3:	00 ff ff 00 ff ff 00 00 00 00 ff ff 00 ff ff 00     ................
	...
    43e3:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    43f3:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    4403:	00 ff ff 00 ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
	...
    4423:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    4433:	00 00 ff ff ff ff 00 00 00 00 00 00 00 ff ff 00     ................
    4443:	00 00 00 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    4463:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    4473:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    4483:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    44a3:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    44b3:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    44c3:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff ff 00     ................
	...
    44e3:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    44f3:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    4503:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    4523:	00 ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff     ................
    4533:	00 ff ff 00 ff 00 ff ff 00 ff ff ff ff ff ff ff     ................
    4543:	00 ff ff ff 00 ff ff ff 00 ff ff 00 00 00 ff ff     ................
	...
    4563:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    4573:	00 00 ff ff ff ff 00 00 00 00 ff ff ff ff 00 00     ................
    4583:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    45a3:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    45b3:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
    45c3:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    45e3:	00 ff ff ff ff ff ff 00 00 00 00 00 ff ff 00 00     ................
    45f3:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    4603:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    474b:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................

0000475b <map_star>:
    475b:	01 01 0c                                            ...

0000475e <map_ice_moon>:
    475e:	03 03 09 0a 0b 0d 0e 0f 10 11 12                    ...........

00004769 <map_ice_cloud>:
    4769:	01 01 08                                            ...

0000476c <map_ice_far>:
    476c:	01 01 07                                            ...

0000476f <map_ice_sky>:
    476f:	01 01 06                                            ...

00004772 <map_ice_horizon>:
    4772:	01 01 05                                            ...

00004775 <map_ice_bottom>:
    4775:	01 01 04                                            ...

00004778 <map_ice_right>:
    4778:	01 01 03                                            ...

0000477b <map_ice_middle>:
    477b:	01 01 02                                            ...

0000477e <map_ice_left>:
    477e:	01 01 01                                            ...

00004781 <map_splash>:
    4781:	0f 05 13 13 13 00 13 13 13 00 14 15 16 00 13 13     ................
    4791:	13 17 13 17 00 13 17 17 00 18 19 1a 00 13 17 17     ................
    47a1:	00 13 00 00 13 00 00 00 1b 1c 1d 00 13 13 13 1e     ................
    47b1:	13 1e 00 13 00 00 00 1f 20 21 00 1e 1e 13 13 13     ........ !......
    47c1:	13 00 13 00 00 00 22 00 00 00 13 13 13              ......"......

000047ce <map_tile_none>:
    47ce:	01 01 00 00                                         ....

000047d2 <__ctors_end>:
    47d2:	11 24       	eor	r1, r1
    47d4:	1f be       	out	0x3f, r1	; 63
    47d6:	cf ef       	ldi	r28, 0xFF	; 255
    47d8:	d0 e1       	ldi	r29, 0x10	; 16
    47da:	de bf       	out	0x3e, r29	; 62
    47dc:	cd bf       	out	0x3d, r28	; 61

000047de <__do_copy_data>:
    47de:	15 e0       	ldi	r17, 0x05	; 5
    47e0:	a0 e0       	ldi	r26, 0x00	; 0
    47e2:	b5 e0       	ldi	r27, 0x05	; 5
    47e4:	ec eb       	ldi	r30, 0xBC	; 188
    47e6:	f6 e8       	ldi	r31, 0x86	; 134
    47e8:	02 c0       	rjmp	.+4      	; 0x47ee <__do_copy_data+0x10>
    47ea:	05 90       	lpm	r0, Z+
    47ec:	0d 92       	st	X+, r0
    47ee:	a2 30       	cpi	r26, 0x02	; 2
    47f0:	b1 07       	cpc	r27, r17
    47f2:	d9 f7       	brne	.-10     	; 0x47ea <__do_copy_data+0xc>

000047f4 <__do_clear_bss>:
    47f4:	1e e0       	ldi	r17, 0x0E	; 14
    47f6:	a2 e0       	ldi	r26, 0x02	; 2
    47f8:	b5 e0       	ldi	r27, 0x05	; 5
    47fa:	01 c0       	rjmp	.+2      	; 0x47fe <.do_clear_bss_start>

000047fc <.do_clear_bss_loop>:
    47fc:	1d 92       	st	X+, r1

000047fe <.do_clear_bss_start>:
    47fe:	af 3c       	cpi	r26, 0xCF	; 207
    4800:	b1 07       	cpc	r27, r17
    4802:	e1 f7       	brne	.-8      	; 0x47fc <.do_clear_bss_loop>

00004804 <wdt_init>:

void wdt_init(void)
{

#if TRUE_RANDOM_GEN == 1	
	wdt_randomize();
    4804:	0e 94 a4 29 	call	0x5348	; 0x5348 <wdt_randomize>
#endif

    MCUSR = 0;
    4808:	14 be       	out	0x34, r1	; 52
    wdt_disable();
    480a:	88 e1       	ldi	r24, 0x18	; 24
    480c:	0f b6       	in	r0, 0x3f	; 63
    480e:	f8 94       	cli
    4810:	80 93 60 00 	sts	0x0060, r24
    4814:	10 92 60 00 	sts	0x0060, r1
    4818:	0f be       	out	0x3f, r0	; 63

0000481a <Initialize>:


void Initialize(void){
	int i;

	if(!isEepromFormatted()) FormatEeprom();
    481a:	0e 94 61 2a 	call	0x54c2	; 0x54c2 <isEepromFormatted>
    481e:	81 11       	cpse	r24, r1
    4820:	02 c0       	rjmp	.+4      	; 0x4826 <Initialize+0xc>
    4822:	0e 94 3f 2a 	call	0x547e	; 0x547e <FormatEeprom>

	cli();
    4826:	f8 94       	cli
		mix_bank=0;
	#endif
	
	#if MIXER_CHAN4_TYPE == 0
		//initialize LFSR		
		tr4_barrel_lo=1;
    4828:	81 e0       	ldi	r24, 0x01	; 1
    482a:	80 93 cc 0c 	sts	0x0CCC, r24
		tr4_barrel_hi=1;		
    482e:	80 93 cd 0c 	sts	0x0CCD, r24
		tr4_params=0b00000001; //15 bits no divider (1)
    4832:	80 93 cb 0c 	sts	0x0CCB, r24
		snesMouseEnabled=false;
	#endif

	//silence all sound channels
	for(i=0;i<CHANNELS;i++){
		mixer.channels.all[i].volume=0;
    4836:	10 92 b8 0c 	sts	0x0CB8, r1
    483a:	10 92 be 0c 	sts	0x0CBE, r1
    483e:	10 92 c4 0c 	sts	0x0CC4, r1
    4842:	10 92 ca 0c 	sts	0x0CCA, r1
    4846:	10 92 d0 0c 	sts	0x0CD0, r1
	}
	
	//set sync parameters. starts at odd field, in pre-eq pulses, line 1, vsync flag cleared
	sync_phase=0;
    484a:	10 92 a0 0c 	sts	0x0CA0, r1
	sync_flags=0;
    484e:	10 92 a2 0c 	sts	0x0CA2, r1
	sync_pulse=SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES;
    4852:	92 e1       	ldi	r25, 0x12	; 18
    4854:	90 93 a1 0c 	sts	0x0CA1, r25

	//set rendering parameters
	render_lines_count=FRAME_LINES;
    4858:	90 ee       	ldi	r25, 0xE0	; 224
    485a:	90 93 a8 0c 	sts	0x0CA8, r25
	first_render_line=FIRST_RENDER_LINE;
    485e:	94 e1       	ldi	r25, 0x14	; 20
    4860:	90 93 a7 0c 	sts	0x0CA7, r25

	joypad1_status_hi=0;
    4864:	10 92 ac 0c 	sts	0x0CAC, r1
    4868:	10 92 ab 0c 	sts	0x0CAB, r1
	joypad2_status_hi=0;
    486c:	10 92 b0 0c 	sts	0x0CB0, r1
    4870:	10 92 af 0c 	sts	0x0CAF, r1
	sound_enabled=1;
    4874:	80 93 b7 0c 	sts	0x0CB7, r24

	InitializeVideoMode();
    4878:	0e 94 4d 36 	call	0x6c9a	; 0x6c9a <InitializeVideoMode>
    487c:	8e e7       	ldi	r24, 0x7E	; 126
    487e:	90 e0       	ldi	r25, 0x00	; 0
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
		val=pgm_read_word(&io_table[j]);
    4880:	fc 01       	movw	r30, r24
    4882:	25 91       	lpm	r18, Z+
    4884:	34 91       	lpm	r19, Z
		ptr=(u8*)(val&0xff);
    4886:	f9 01       	movw	r30, r18
    4888:	ff 27       	eor	r31, r31
		*ptr=val>>8;	
    488a:	30 83       	st	Z, r19
    488c:	02 96       	adiw	r24, 0x02	; 2
	InitializeVideoMode();
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
    488e:	20 e0       	ldi	r18, 0x00	; 0
    4890:	8c 3a       	cpi	r24, 0xAC	; 172
    4892:	92 07       	cpc	r25, r18
    4894:	a9 f7       	brne	.-22     	; 0x4880 <Initialize+0x66>
		val=pgm_read_word(&io_table[j]);
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;	
	}

	sei();
    4896:	78 94       	sei
	
	DisplayLogo();
    4898:	0e 94 db 36 	call	0x6db6	; 0x6db6 <DisplayLogo>
    489c:	0e 94 47 41 	call	0x828e	; 0x828e <main>
    48a0:	0c 94 5c 43 	jmp	0x86b8	; 0x86b8 <_exit>

000048a4 <__bad_interrupt>:
    48a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000048a8 <sub_video_mode3>:
	;***************************************************

	sub_video_mode3:
		;de-activate sync timer interrupts
		;we will need to use the I flag to branch in a critical loop
		ldi ZL,(0<<OCIE1A)
    48a8:	e0 e0       	ldi	r30, 0x00	; 0
		sts _SFR_MEM_ADDR(TIMSK1),ZL
    48aa:	e0 93 6f 00 	sts	0x006F, r30

		;wait cycles to align with next hsync
		WAIT r26,183+241
    48ae:	ad e8       	ldi	r26, 0x8D	; 141
    48b0:	aa 95       	dec	r26
    48b2:	f1 f7       	brne	.-4      	; 0x48b0 <sub_video_mode3+0x8>
    48b4:	00 00       	nop

		;Refresh ramtiles indexes in VRAM
		;This has to be done because the main
		;program may have altered the VRAM
		;after vsync and the rendering interrupt.
		lds r16,userRamTilesCount
    48b6:	00 91 db 0c 	lds	r16, 0x0CDB

		ldi ZL,lo8(ram_tiles_restore);
    48ba:	ea e3       	ldi	r30, 0x3A	; 58
		ldi ZH,hi8(ram_tiles_restore);
    48bc:	fc e0       	ldi	r31, 0x0C	; 12
		ldi r18,3
    48be:	23 e0       	ldi	r18, 0x03	; 3
		mul r16,r18
    48c0:	02 9f       	mul	r16, r18
		add ZL,r0
    48c2:	e0 0d       	add	r30, r0
		adc ZH,r1
    48c4:	f1 1d       	adc	r31, r1

		ldi YL,lo8(vram)
    48c6:	c0 e0       	ldi	r28, 0x00	; 0
		ldi YH,hi8(vram)
    48c8:	d1 e0       	ldi	r29, 0x01	; 1

		lds r18,free_tile_index
    48ca:	20 91 6a 0d 	lds	r18, 0x0D6A
		ldi r19,MAX_RAMTILES		;maximum possible ramtiles
    48ce:	3c e3       	ldi	r19, 0x3C	; 60
		sub r19,r18					;sub free tile
    48d0:	32 1b       	sub	r19, r18
		add r19,r16					;add user tiles
    48d2:	30 0f       	add	r19, r16

		cp r18,r16
    48d4:	20 17       	cp	r18, r16
		breq no_ramtiles
    48d6:	51 f0       	breq	.+20     	; 0x48ec <no_ramtiles>
		nop
    48d8:	00 00       	nop
	...

000048dc <upd_loop>:
		nop
upd_loop:
		ld XL,Z+	;load vram offset of ramtile
    48dc:	a1 91       	ld	r26, Z+
		ld XH,Z+
    48de:	b1 91       	ld	r27, Z+

		ld r17,X	;get latest VRAM tile that may have been modified my
    48e0:	1c 91       	ld	r17, X
		st Z+,r17	;the main program and store it in the restore buffer
    48e2:	11 93       	st	Z+, r17
		st X,r16	;write the ramtile index back to vram
    48e4:	0c 93       	st	X, r16

		inc r16
    48e6:	03 95       	inc	r16
		cp r16,r18
    48e8:	02 17       	cp	r16, r18
		brlo upd_loop ;loop is 14 cycles
    48ea:	c0 f3       	brcs	.-16     	; 0x48dc <upd_loop>

000048ec <no_ramtiles>:

no_ramtiles:
		;wait for remaining maximum possible ramtiles
1:
		ldi r17,3
    48ec:	13 e0       	ldi	r17, 0x03	; 3
		dec r17
    48ee:	1a 95       	dec	r17
		brne .-4
    48f0:	f1 f7       	brne	.-4      	; 0x48ee <no_ramtiles+0x2>
		rjmp .
    48f2:	00 c0       	rjmp	.+0      	; 0x48f4 <no_ramtiles+0x8>
		dec r19
    48f4:	3a 95       	dec	r19
		brne 1b
    48f6:	d1 f7       	brne	.-12     	; 0x48ec <no_ramtiles>

		;**********************
		; setup scroll stuff
		;**********************
	
		ldi YL,lo8(vram)
    48f8:	c0 e0       	ldi	r28, 0x00	; 0
		ldi YH,hi8(vram)
    48fa:	d1 e0       	ldi	r29, 0x01	; 1

		//add X scroll (coarse)
		lds r18,screen_scrollX ;ScreenScrollX
    48fc:	20 91 9c 0c 	lds	r18, 0x0C9C
		mov r25,r18
    4900:	92 2f       	mov	r25, r18
		andi r18,0xf8	;(x>>3) * 8 interleave
    4902:	28 7f       	andi	r18, 0xF8	; 248
		add YL,r18
    4904:	c2 0f       	add	r28, r18

		;save Y wrap adress 
		movw r12,YL
    4906:	6e 01       	movw	r12, r28
	

		//add Y scroll (coarse)
		lds r16,screen_scrollY ;ScreenScrollY
    4908:	00 91 9d 0c 	lds	r16, 0x0C9D
		mov r22,r16
    490c:	60 2f       	mov	r22, r16
		lsr r16
    490e:	06 95       	lsr	r16
		lsr r16
    4910:	06 95       	lsr	r16
		lsr r16 ;/8
    4912:	06 95       	lsr	r16

        lds r17,screen_scrollHeight
    4914:	10 91 9e 0c 	lds	r17, 0x0C9E
        sub r17,r16
    4918:	10 1b       	sub	r17, r16
        mov r15,r17 ;Y tiles to draw before wrapping
    491a:	f1 2e       	mov	r15, r17

        mov r17,r16
    491c:	10 2f       	mov	r17, r16
        lsr r16
    491e:	06 95       	lsr	r16
        lsr r16
    4920:	06 95       	lsr	r16
        lsr r16 ;/8
    4922:	06 95       	lsr	r16
		add YH,r16      ; (bits 6-7)
    4924:	d0 0f       	add	r29, r16
		andi r17,0x7
    4926:	17 70       	andi	r17, 0x07	; 7
        add YL,r17      ;interleave (bits 3-5)
    4928:	c1 0f       	add	r28, r17
        andi r22,0x7    ;fine Y scrolling (bits 0-2)
    492a:	67 70       	andi	r22, 0x07	; 7
		;lds r20,tile_table_lo
		;lds r21,tile_table_hi
		;out _SFR_IO_ADDR(GPIOR1),r20 ;store for later
		;out _SFR_IO_ADDR(GPIOR2),r21

		lds r20,overlay_tile_table
    492c:	40 91 9a 0c 	lds	r20, 0x0C9A
		lds r21,overlay_tile_table+1
    4930:	50 91 9b 0c 	lds	r21, 0x0C9B
		lds r6,tile_table_lo
    4934:	60 90 96 0c 	lds	r6, 0x0C96
		lds r7,tile_table_hi
    4938:	70 90 97 0c 	lds	r7, 0x0C97
		out _SFR_IO_ADDR(GPIOR1),r6 ;store for later
    493c:	6a bc       	out	0x2a, r6	; 42
		out _SFR_IO_ADDR(GPIOR2),r7
    493e:	7b bc       	out	0x2b, r7	; 43


		;save main section value	
		movw r10,YL
    4940:	5e 01       	movw	r10, r28
		mov r23,r22
    4942:	76 2f       	mov	r23, r22
		mov r24,r15
    4944:	8f 2d       	mov	r24, r15
		mov r9,r25
    4946:	99 2e       	mov	r9, r25

		;load values for overlay if it's activated (overlay_height>0)
		
		;compute beginning of overlay in vram 
		lds r16,screen_scrollHeight
    4948:	00 91 9e 0c 	lds	r16, 0x0C9E
		mov r18,r16
    494c:	20 2f       	mov	r18, r16
		lsr r16
    494e:	06 95       	lsr	r16
		lsr r16
    4950:	06 95       	lsr	r16
		lsr r16			;hi8
    4952:	06 95       	lsr	r16
		inc r16			;add 0x100 ram offset
    4954:	03 95       	inc	r16
		andi r18,7		;lo8
    4956:	27 70       	andi	r18, 0x07	; 7
		
		lds r19,overlay_height	
    4958:	30 91 99 0c 	lds	r19, 0x0C99
		cpi r19,0
    495c:	30 30       	cpi	r19, 0x00	; 0
		in r0, _SFR_IO_ADDR(SREG)
    495e:	0f b6       	in	r0, 0x3f	; 63

		sbrs r0,SREG_Z
    4960:	01 fe       	sbrs	r0, 1
		clr r22
    4962:	66 27       	eor	r22, r22
		sbrs r0,SREG_Z
    4964:	01 fe       	sbrs	r0, 1
		mov YL,r18		;lo8(overlay_vram)
    4966:	c2 2f       	mov	r28, r18
		sbrs r0,SREG_Z
    4968:	01 fe       	sbrs	r0, 1
		mov YH,r16		;hi8(overlay_vram)
    496a:	d0 2f       	mov	r29, r16
		sbrs r0,SREG_Z
    496c:	01 fe       	sbrs	r0, 1
		ser r24
    496e:	8f ef       	ldi	r24, 0xFF	; 255
		sbrs r0,SREG_Z
    4970:	01 fe       	sbrs	r0, 1
		clr r9
    4972:	99 24       	eor	r9, r9

		sbrs r0,SREG_Z
    4974:	01 fe       	sbrs	r0, 1
		out _SFR_IO_ADDR(GPIOR1),r20
    4976:	4a bd       	out	0x2a, r20	; 42
		sbrs r0,SREG_Z
    4978:	01 fe       	sbrs	r0, 1
		out _SFR_IO_ADDR(GPIOR2),r21
    497a:	5b bd       	out	0x2b, r21	; 43


		//ldi r16,SCREEN_TILES_V*TILE_HEIGHT; total scanlines to draw
		//mov r8,r16
		lds r8,render_lines_count ;total scanlines to draw
    497c:	80 90 a8 0c 	lds	r8, 0x0CA8

00004980 <next_tile_line>:
	;r23 = Main section tile row
	;r24 = Current Y tiles to draw before wrapping
	;r25 = Main section scrollX

	next_tile_line:
		rcall hsync_pulse
    4980:	bc d3       	rcall	.+1912   	; 0x50fa <hsync_pulse>

		WAIT r18,HSYNC_USABLE_CYCLES - AUDIO_OUT_HSYNC_CYCLES
    4982:	24 e0       	ldi	r18, 0x04	; 4
    4984:	2a 95       	dec	r18
    4986:	f1 f7       	brne	.-4      	; 0x4984 <next_tile_line+0x4>
    4988:	00 00       	nop
				
		call render_tile_line
    498a:	0e 94 06 25 	call	0x4a0c	; 0x4a0c <render_tile_line>

		WAIT r18,58
    498e:	23 e1       	ldi	r18, 0x13	; 19
    4990:	2a 95       	dec	r18
    4992:	f1 f7       	brne	.-4      	; 0x4990 <next_tile_line+0x10>
    4994:	00 00       	nop

		inc r22
    4996:	63 95       	inc	r22
		dec r8
    4998:	8a 94       	dec	r8
		breq text_frame_end
    499a:	09 f1       	breq	.+66     	; 0x49de <text_frame_end>

		cpi r22,TILE_HEIGHT ;last char line? 1
    499c:	68 30       	cpi	r22, 0x08	; 8
		breq next_tile_row
    499e:	29 f0       	breq	.+10     	; 0x49aa <next_tile_row>

		;wait to align with next_tile_row instructions (+1 cycle for the breq)
		WAIT r16,25
    49a0:	08 e0       	ldi	r16, 0x08	; 8
    49a2:	0a 95       	dec	r16
    49a4:	f1 f7       	brne	.-4      	; 0x49a2 <next_tile_line+0x22>
    49a6:	00 00       	nop
		rjmp next_tile_line
    49a8:	eb cf       	rjmp	.-42     	; 0x4980 <next_tile_line>

000049aa <next_tile_row>:

	next_tile_row:

		clr r22		;clear current char line
    49aa:	66 27       	eor	r22, r22

		;increment vram pointer next row
		mov r16,YL
    49ac:	0c 2f       	mov	r16, r28
		andi r16,0x7
    49ae:	07 70       	andi	r16, 0x07	; 7
		cpi r16,7
    49b0:	07 30       	cpi	r16, 0x07	; 7
		breq 1f
    49b2:	11 f0       	breq	.+4      	; 0x49b8 <next_tile_row+0xe>
		inc YL
    49b4:	c3 95       	inc	r28
		rjmp 2f
    49b6:	02 c0       	rjmp	.+4      	; 0x49bc <next_tile_row+0x12>
	1:
		andi YL,0xf8
    49b8:	c8 7f       	andi	r28, 0xF8	; 248
		inc YH
    49ba:	d3 95       	inc	r29
	2:

		dec r24		;wrap section?
    49bc:	8a 95       	dec	r24
		brne .+2
    49be:	09 f4       	brne	.+2      	; 0x49c2 <next_tile_row+0x18>
		movw YL,r12
    49c0:	e6 01       	movw	r28, r12

		dec r19
    49c2:	3a 95       	dec	r19
		brne .+2
    49c4:	09 f4       	brne	.+2      	; 0x49c8 <next_tile_row+0x1e>
		mov r22,r23	;section tile row
    49c6:	67 2f       	mov	r22, r23
		brne .+2
    49c8:	09 f4       	brne	.+2      	; 0x49cc <next_tile_row+0x22>
		movw YL,r10 ;vram adress
    49ca:	e5 01       	movw	r28, r10
		brne .+2
    49cc:	09 f4       	brne	.+2      	; 0x49d0 <next_tile_row+0x26>
		mov r24,r15 ;Y wrapping
    49ce:	8f 2d       	mov	r24, r15
		brne .+2
    49d0:	09 f4       	brne	.+2      	; 0x49d4 <next_tile_row+0x2a>
		mov r9,r25  ;scrollX
    49d2:	99 2e       	mov	r9, r25

		brne .+2
    49d4:	09 f4       	brne	.+2      	; 0x49d8 <next_tile_row+0x2e>
		out _SFR_IO_ADDR(GPIOR1),r6  ;tileset
    49d6:	6a bc       	out	0x2a, r6	; 42
		brne .+2
    49d8:	09 f4       	brne	.+2      	; 0x49dc <next_tile_row+0x32>
		out _SFR_IO_ADDR(GPIOR2),r7  ;tilset
    49da:	7b bc       	out	0x2b, r7	; 43

		rjmp next_tile_line
    49dc:	d1 cf       	rjmp	.-94     	; 0x4980 <next_tile_line>

000049de <text_frame_end>:

	text_frame_end:

		WAIT r18,28
    49de:	29 e0       	ldi	r18, 0x09	; 9
    49e0:	2a 95       	dec	r18
    49e2:	f1 f7       	brne	.-4      	; 0x49e0 <text_frame_end+0x2>
    49e4:	00 00       	nop

		rcall hsync_pulse ;145
    49e6:	89 d3       	rcall	.+1810   	; 0x50fa <hsync_pulse>
	
		clr r1
    49e8:	11 24       	eor	r1, r1
		call RestoreBackground
    49ea:	0e 94 00 35 	call	0x6a00	; 0x6a00 <RestoreBackground>

		;set vsync flag & flip field
		lds ZL,sync_flags
    49ee:	e0 91 a2 0c 	lds	r30, 0x0CA2
		ldi r20,SYNC_FLAG_FIELD
    49f2:	42 e0       	ldi	r20, 0x02	; 2
		ori ZL,SYNC_FLAG_VSYNC
    49f4:	e1 60       	ori	r30, 0x01	; 1
		eor ZL,r20
    49f6:	e4 27       	eor	r30, r20
		sts sync_flags,ZL
    49f8:	e0 93 a2 0c 	sts	0x0CA2, r30
	
		cli 
    49fc:	f8 94       	cli

		;re-activate sync timer interrupts
		ldi ZL,(1<<OCIE1A)
    49fe:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIMSK1),ZL
    4a00:	e0 93 6f 00 	sts	0x006F, r30
			
		;clear any pending timer int
		ldi ZL,(1<<OCF1A)
    4a04:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIFR1),ZL
    4a06:	e0 93 36 00 	sts	0x0036, r30

		ret
    4a0a:	08 95       	ret

00004a0c <render_tile_line>:
	; Can destroy: r0,r1,r2,r3,r4,r5,r6,r7,r13,r16,r17,r18,r19,r20,r21,Z
	; 
	; cycles  = 1495
	;*************************************************
	render_tile_line:
		push YL
    4a0c:	cf 93       	push	r28
		push YH
    4a0e:	df 93       	push	r29
		push r23
    4a10:	7f 93       	push	r23
		push r22
    4a12:	6f 93       	push	r22
		push r19
    4a14:	3f 93       	push	r19
		push r13
    4a16:	df 92       	push	r13
		push r12
    4a18:	cf 92       	push	r12
		push r9
    4a1a:	9f 92       	push	r9
		push r7
    4a1c:	7f 92       	push	r7
		push r6
    4a1e:	6f 92       	push	r6
		;--------------------------
		; Rendering 
		;---------------------------

		;get tile row offset
		ldi r23,TILE_WIDTH ;tile width in pixels
    4a20:	78 e0       	ldi	r23, 0x08	; 8
		mul r22,r23
    4a22:	67 9f       	mul	r22, r23

		;compute base adresses for ROM and RAM tiles
		in r16,_SFR_IO_ADDR(GPIOR1) ;tile_table_lo
    4a24:	0a b5       	in	r16, 0x2a	; 42
		in r17,_SFR_IO_ADDR(GPIOR2) ;tile_table_hi
    4a26:	1b b5       	in	r17, 0x2b	; 43
		subi r16,lo8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    4a28:	00 50       	subi	r16, 0x00	; 0
		sbci r17,hi8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    4a2a:	17 40       	sbci	r17, 0x07	; 7

		add r16,r0
    4a2c:	00 0d       	add	r16, r0
		adc r17,r1
    4a2e:	11 1d       	adc	r17, r1
		movw r2,r16			;rom tiles adress
    4a30:	18 01       	movw	r2, r16

		ldi r16,lo8(ram_tiles)
    4a32:	0a e3       	ldi	r16, 0x3A	; 58
		ldi r17,hi8(ram_tiles)
    4a34:	15 e0       	ldi	r17, 0x05	; 5
		add r16,r0
    4a36:	00 0d       	add	r16, r0
		adc r17,r1
    4a38:	11 1d       	adc	r17, r1
		movw r4,r16			;ram tiles adress
    4a3a:	28 01       	movw	r4, r16

		ldi r19,TILE_HEIGHT*TILE_WIDTH
    4a3c:	30 e4       	ldi	r19, 0x40	; 64
		ldi r17,SCREEN_TILES_H-1	;main loop counter
    4a3e:	1b e1       	ldi	r17, 0x1B	; 27


		;handle fine scroll offset
		;lds r22,screenSections+scrollX
		mov r22,r9
    4a40:	69 2d       	mov	r22, r9
		andi r22,0x7		
    4a42:	67 70       	andi	r22, 0x07	; 7
		mov r14,r22	;pixels to draw on last tile	
    4a44:	e6 2e       	mov	r14, r22
		cli			;no trailing pixel to draw (hack, see end: )
    4a46:	f8 94       	cli
		breq .+2
    4a48:	09 f0       	breq	.+2      	; 0x4a4c <render_tile_line+0x40>
		sei			;some trailing pixel to draw (hack, see end: )
    4a4a:	78 94       	sei

		;get first pixel of last tile in ROM (for ROM tiles fine scroll)
		;and adress of next pixel
		movw ZL,YL
    4a4c:	fe 01       	movw	r30, r28
		subi ZL,-(SCREEN_TILES_H*8)
    4a4e:	e0 52       	subi	r30, 0x20	; 32
		ld r18,Z
    4a50:	20 81       	ld	r18, Z
		mul r18,r19 	;tile*width*height
    4a52:	23 9f       	mul	r18, r19
	    add r0,r2    ;add ROM title table address +row offset
    4a54:	02 0c       	add	r0, r2
	    adc r1,r3
    4a56:	13 1c       	adc	r1, r3
		movw ZL,r0
    4a58:	f0 01       	movw	r30, r0
		lpm r9,Z+	;hold first pixel until end 
    4a5a:	95 90       	lpm	r9, Z+
		movw r12,ZL ;hold second pixel adress until end
    4a5c:	6f 01       	movw	r12, r30


		;compute first tile adress
	    ld r18,Y     	;load next tile # from VRAM
    4a5e:	28 81       	ld	r18, Y
		subi YL,-8
    4a60:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT
    4a62:	2c 31       	cpi	r18, 0x1C	; 28
		in r16,_SFR_IO_ADDR(SREG)	;save the carry flag for later	
    4a64:	0f b7       	in	r16, 0x3f	; 63
		mul r18,r19 	;tile*width*height
    4a66:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles	
    4a68:	a1 01       	movw	r20, r2
		sbrc r16,SREG_C
    4a6a:	00 fd       	sbrc	r16, 0
		movw r20,r4		;ram tiles
    4a6c:	a2 01       	movw	r20, r4
	    add r0,r20    ;add title table address +row offset
    4a6e:	04 0e       	add	r0, r20
	    adc r1,r21
    4a70:	15 1e       	adc	r1, r21
		movw XL,r0
    4a72:	d0 01       	movw	r26, r0


		;compute second tile adress
	    ld r18,Y     	;load next tile # from VRAM
    4a74:	28 81       	ld	r18, Y
		subi YL,-8
    4a76:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT
    4a78:	2c 31       	cpi	r18, 0x1C	; 28
		in r7,_SFR_IO_ADDR(SREG)	;save the carry flag for later
    4a7a:	7f b6       	in	r7, 0x3f	; 63
		bst r7,SREG_C
    4a7c:	70 fa       	bst	r7, 0
		mul r18,r19 	;tile*width*height
    4a7e:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles
    4a80:	a1 01       	movw	r20, r2
		brtc .+2
    4a82:	0e f4       	brtc	.+2      	; 0x4a86 <render_tile_line+0x7a>
		movw r20,r4		;ram tiles
    4a84:	a2 01       	movw	r20, r4
	    add r0,r20      ;add title table address +row offset
    4a86:	04 0e       	add	r0, r20
	    adc r1,r21
    4a88:	15 1e       	adc	r1, r21
		movw ZL,r0
    4a8a:	f0 01       	movw	r30, r0
		movw r6,ZL		;push Z
    4a8c:	3f 01       	movw	r6, r30

00004a8e <do_fine_scroll>:


	do_fine_scroll:
		;output 1st tile with fine scroll offset 
		clr r0
    4a8e:	00 24       	eor	r0, r0
		add XL,r22	;add fine offset
    4a90:	a6 0f       	add	r26, r22
		adc XH,r0
    4a92:	b0 1d       	adc	r27, r0

		;compute jump offset
		ldi r23,3
    4a94:	73 e0       	ldi	r23, 0x03	; 3
		mul r22,r23 ;3 instructions
    4a96:	67 9f       	mul	r22, r23
	
		sbrs r16,SREG_C
    4a98:	00 ff       	sbrs	r16, 0
		rjmp rom_fine_scroll
    4a9a:	22 c0       	rjmp	.+68     	; 0x4ae0 <rom_fine_scroll>

00004a9c <ram_fine_scroll>:

	/***FINE SCROLL RAM LOOP***/
	ram_fine_scroll:
		rjmp .
    4a9c:	00 c0       	rjmp	.+0      	; 0x4a9e <ram_fine_scroll+0x2>
		ldi r22,lo8(pm(ram_fine_scroll_loop))
    4a9e:	66 e5       	ldi	r22, 0x56	; 86
		ldi r23,hi8(pm(ram_fine_scroll_loop))
    4aa0:	75 e2       	ldi	r23, 0x25	; 37
		add r22,r0
    4aa2:	60 0d       	add	r22, r0
		adc r23,r1
    4aa4:	71 1d       	adc	r23, r1
		push r22
    4aa6:	6f 93       	push	r22
		push r23	
    4aa8:	7f 93       	push	r23
		ret ;jump into ram_fine_scroll_loop
    4aaa:	08 95       	ret

00004aac <ram_fine_scroll_loop>:
	ram_fine_scroll_loop:
		.rept 8
			ld r16,X+
			lpm
			out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		.endr
    4aac:	0d 91       	ld	r16, X+
    4aae:	c8 95       	lpm
    4ab0:	08 b9       	out	0x08, r16	; 8
    4ab2:	0d 91       	ld	r16, X+
    4ab4:	c8 95       	lpm
    4ab6:	08 b9       	out	0x08, r16	; 8
    4ab8:	0d 91       	ld	r16, X+
    4aba:	c8 95       	lpm
    4abc:	08 b9       	out	0x08, r16	; 8
    4abe:	0d 91       	ld	r16, X+
    4ac0:	c8 95       	lpm
    4ac2:	08 b9       	out	0x08, r16	; 8
    4ac4:	0d 91       	ld	r16, X+
    4ac6:	c8 95       	lpm
    4ac8:	08 b9       	out	0x08, r16	; 8
    4aca:	0d 91       	ld	r16, X+
    4acc:	c8 95       	lpm
    4ace:	08 b9       	out	0x08, r16	; 8
    4ad0:	0d 91       	ld	r16, X+
    4ad2:	c8 95       	lpm
    4ad4:	08 b9       	out	0x08, r16	; 8
    4ad6:	0d 91       	ld	r16, X+
    4ad8:	c8 95       	lpm
    4ada:	08 b9       	out	0x08, r16	; 8

		;branch to tile #2
		brtc romloop
    4adc:	1e f5       	brtc	.+70     	; 0x4b24 <romloop>
		rjmp ramloop
    4ade:	40 c0       	rjmp	.+128    	; 0x4b60 <ramloop>

00004ae0 <rom_fine_scroll>:

	/***FINE SCROLL ROM LOOP***/
	rom_fine_scroll:
		movw ZL,XL
    4ae0:	fd 01       	movw	r30, r26
		ldi r22,lo8(pm(rom_fine_scroll_loop))	
    4ae2:	68 e7       	ldi	r22, 0x78	; 120
		ldi r23,hi8(pm(rom_fine_scroll_loop))
    4ae4:	75 e2       	ldi	r23, 0x25	; 37
		add r22,r0
    4ae6:	60 0d       	add	r22, r0
		adc r23,r1
    4ae8:	71 1d       	adc	r23, r1
		push r22
    4aea:	6f 93       	push	r22
		push r23	
    4aec:	7f 93       	push	r23
		ret
    4aee:	08 95       	ret

00004af0 <rom_fine_scroll_loop>:
	rom_fine_scroll_loop:
		.rept 8
			lpm r16,Z+
			rjmp .
			out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		.endr 
    4af0:	05 91       	lpm	r16, Z+
    4af2:	00 c0       	rjmp	.+0      	; 0x4af4 <rom_fine_scroll_loop+0x4>
    4af4:	08 b9       	out	0x08, r16	; 8
    4af6:	05 91       	lpm	r16, Z+
    4af8:	00 c0       	rjmp	.+0      	; 0x4afa <rom_fine_scroll_loop+0xa>
    4afa:	08 b9       	out	0x08, r16	; 8
    4afc:	05 91       	lpm	r16, Z+
    4afe:	00 c0       	rjmp	.+0      	; 0x4b00 <rom_fine_scroll_loop+0x10>
    4b00:	08 b9       	out	0x08, r16	; 8
    4b02:	05 91       	lpm	r16, Z+
    4b04:	00 c0       	rjmp	.+0      	; 0x4b06 <rom_fine_scroll_loop+0x16>
    4b06:	08 b9       	out	0x08, r16	; 8
    4b08:	05 91       	lpm	r16, Z+
    4b0a:	00 c0       	rjmp	.+0      	; 0x4b0c <rom_fine_scroll_loop+0x1c>
    4b0c:	08 b9       	out	0x08, r16	; 8
    4b0e:	05 91       	lpm	r16, Z+
    4b10:	00 c0       	rjmp	.+0      	; 0x4b12 <rom_fine_scroll_loop+0x22>
    4b12:	08 b9       	out	0x08, r16	; 8
    4b14:	05 91       	lpm	r16, Z+
    4b16:	00 c0       	rjmp	.+0      	; 0x4b18 <rom_fine_scroll_loop+0x28>
    4b18:	08 b9       	out	0x08, r16	; 8
    4b1a:	05 91       	lpm	r16, Z+
    4b1c:	00 c0       	rjmp	.+0      	; 0x4b1e <rom_fine_scroll_loop+0x2e>
    4b1e:	08 b9       	out	0x08, r16	; 8
	
		movw ZL,r6		;restore Z for tile #2
    4b20:	f3 01       	movw	r30, r6

		;branch to tile #2
		brts ramloop
    4b22:	f6 f0       	brts	.+60     	; 0x4b60 <ramloop>

00004b24 <romloop>:

	
	romloop:
	    lpm r16,Z+
    4b24:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    4b26:	08 b9       	out	0x08, r16	; 8
	    ld r18,Y     ;load next tile # from VRAM
    4b28:	28 81       	ld	r18, Y

	    lpm r16,Z+
    4b2a:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 2
    4b2c:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    4b2e:	23 9f       	mul	r18, r19

	    lpm r16,Z+
    4b30:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 3
    4b32:	08 b9       	out	0x08, r16	; 8
		subi YL,-8
    4b34:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT		;is tile in RAM or ROM? (RAM tiles have indexes<RAM_TILES_COUNT)
    4b36:	2c 31       	cpi	r18, 0x1C	; 28
		
	    lpm r16,Z+
    4b38:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    4b3a:	08 b9       	out	0x08, r16	; 8
		brsh .+2		;skip if next tile is in ROM	
    4b3c:	08 f4       	brcc	.+2      	; 0x4b40 <romloop+0x1c>
		movw r20,r4 	;load RAM title table address +row offset	
    4b3e:	a2 01       	movw	r20, r4
   
	    lpm r16,Z+
    4b40:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 5
    4b42:	08 b9       	out	0x08, r16	; 8
		add r0,r20		;add tile table address +row offset lsb
    4b44:	04 0e       	add	r0, r20
	    adc r1,r21		;add title table address +row offset msb
    4b46:	15 1e       	adc	r1, r21

	    lpm r16,Z+
    4b48:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 6
    4b4a:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT	
    4b4c:	2c 31       	cpi	r18, 0x1C	; 28
		dec r17			;decrement tiles to draw on line (does not affect carry)
    4b4e:	1a 95       	dec	r17
   
	    lpm r16,Z+
    4b50:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 7   
    4b52:	08 b9       	out	0x08, r16	; 8
	    lpm r16,Z+
    4b54:	05 91       	lpm	r16, Z+

		breq end	
    4b56:	39 f1       	breq	.+78     	; 0x4ba6 <end>
	    movw ZL,r0   	;copy next tile adress
    4b58:	f0 01       	movw	r30, r0

	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    4b5a:	08 b9       	out	0x08, r16	; 8
	    brcc romloop
    4b5c:	18 f7       	brcc	.-58     	; 0x4b24 <romloop>
	
		rjmp .
    4b5e:	00 c0       	rjmp	.+0      	; 0x4b60 <ramloop>

00004b60 <ramloop>:

	ramloop:

	    ld r16,Z+
    4b60:	01 91       	ld	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    4b62:	08 b9       	out	0x08, r16	; 8
	    ld r18,Y     ;load next tile # from VRAM
    4b64:	28 81       	ld	r18, Y

	    ld r16,Z+ 
    4b66:	01 91       	ld	r16, Z+
		subi YL,-8   		
    4b68:	c8 5f       	subi	r28, 0xF8	; 248
		out _SFR_IO_ADDR(DATA_PORT),r16 		;pixel 2
    4b6a:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    4b6c:	23 9f       	mul	r18, r19

	    ld r16,Z+
    4b6e:	01 91       	ld	r16, Z+
		nop
    4b70:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16         ;pixel 3
    4b72:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    4b74:	2c 31       	cpi	r18, 0x1C	; 28
		rjmp .
    4b76:	00 c0       	rjmp	.+0      	; 0x4b78 <ramloop+0x18>
   
	    ld r16,Z+
    4b78:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    4b7a:	08 b9       	out	0x08, r16	; 8
		brcs .+2 
    4b7c:	08 f0       	brcs	.+2      	; 0x4b80 <ramloop+0x20>
		movw r20,r2 	;ROM title table address +row offset	
    4b7e:	a1 01       	movw	r20, r2
   
   
	    ld r16,Z+
    4b80:	01 91       	ld	r16, Z+
	    add r0,r20    ;add title table address +row offset
    4b82:	04 0e       	add	r0, r20
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 5
    4b84:	08 b9       	out	0x08, r16	; 8
	    adc r1,r21
    4b86:	15 1e       	adc	r1, r21
		rjmp .
    4b88:	00 c0       	rjmp	.+0      	; 0x4b8a <ramloop+0x2a>
    
		ld r16,Z+		
    4b8a:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 6
    4b8c:	08 b9       	out	0x08, r16	; 8
		ld r7,Z+
    4b8e:	71 90       	ld	r7, Z+
	    ld r16,Z+	
    4b90:	01 91       	ld	r16, Z+
	
		movw ZL,r0
    4b92:	f0 01       	movw	r30, r0
		out _SFR_IO_ADDR(DATA_PORT),r7      ;pixel 7   
    4b94:	78 b8       	out	0x08, r7	; 8
		nop
    4b96:	00 00       	nop
		cpi r18,RAM_TILES_COUNT	
    4b98:	2c 31       	cpi	r18, 0x1C	; 28
	    dec r17
    4b9a:	1a 95       	dec	r17
	    breq end
    4b9c:	21 f0       	breq	.+8      	; 0x4ba6 <end>
	
		nop
    4b9e:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    4ba0:	08 b9       	out	0x08, r16	; 8
	
	    brcc romloop
    4ba2:	00 f6       	brcc	.-128    	; 0x4b24 <romloop>
		rjmp ramloop
    4ba4:	dd cf       	rjmp	.-70     	; 0x4b60 <ramloop>

00004ba6 <end>:
	
	end:
		out _SFR_IO_ADDR(DATA_PORT),r16  	;pixel 8
    4ba6:	08 b9       	out	0x08, r16	; 8
		brid end_fine_scroll				;hack: interrupt flag=0 => no fine offset pixel to draw
    4ba8:	27 f5       	brid	.+72     	; 0x4bf2 <end_fine_scroll>
		brcc end_rom_fine_scroll_loop
    4baa:	30 f4       	brcc	.+12     	; 0x4bb8 <end_rom_fine_scroll_loop>

	/***END RAM LOOP***/
		movw ZL,r0
    4bac:	f0 01       	movw	r30, r0

00004bae <end_ram_fine_scroll_loop>:
	end_ram_fine_scroll_loop:
		ld r16,Z+
    4bae:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
    4bb0:	08 b9       	out	0x08, r16	; 8
		dec r14
    4bb2:	ea 94       	dec	r14
		brne end_ram_fine_scroll_loop
    4bb4:	e1 f7       	brne	.-8      	; 0x4bae <end_ram_fine_scroll_loop>
		rjmp end_fine_scroll_ram
    4bb6:	1f c0       	rjmp	.+62     	; 0x4bf6 <end_fine_scroll_ram>

00004bb8 <end_rom_fine_scroll_loop>:

	/***END ROM LOOP***/
	end_rom_fine_scroll_loop:
		movw ZL,r12
    4bb8:	f6 01       	movw	r30, r12
		nop
    4bba:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r9        ;output saved 1st pixel
    4bbc:	98 b8       	out	0x08, r9	; 8
		dec r14
    4bbe:	ea 94       	dec	r14
		breq end_fine_scroll_rom
    4bc0:	c9 f0       	breq	.+50     	; 0x4bf4 <end_fine_scroll_rom>
	.rept 6
		lpm r16,Z+		
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		dec r14
		breq end_fine_scroll_rom
	.endr
    4bc2:	05 91       	lpm	r16, Z+
    4bc4:	08 b9       	out	0x08, r16	; 8
    4bc6:	ea 94       	dec	r14
    4bc8:	a9 f0       	breq	.+42     	; 0x4bf4 <end_fine_scroll_rom>
    4bca:	05 91       	lpm	r16, Z+
    4bcc:	08 b9       	out	0x08, r16	; 8
    4bce:	ea 94       	dec	r14
    4bd0:	89 f0       	breq	.+34     	; 0x4bf4 <end_fine_scroll_rom>
    4bd2:	05 91       	lpm	r16, Z+
    4bd4:	08 b9       	out	0x08, r16	; 8
    4bd6:	ea 94       	dec	r14
    4bd8:	69 f0       	breq	.+26     	; 0x4bf4 <end_fine_scroll_rom>
    4bda:	05 91       	lpm	r16, Z+
    4bdc:	08 b9       	out	0x08, r16	; 8
    4bde:	ea 94       	dec	r14
    4be0:	49 f0       	breq	.+18     	; 0x4bf4 <end_fine_scroll_rom>
    4be2:	05 91       	lpm	r16, Z+
    4be4:	08 b9       	out	0x08, r16	; 8
    4be6:	ea 94       	dec	r14
    4be8:	29 f0       	breq	.+10     	; 0x4bf4 <end_fine_scroll_rom>
    4bea:	05 91       	lpm	r16, Z+
    4bec:	08 b9       	out	0x08, r16	; 8
    4bee:	ea 94       	dec	r14
    4bf0:	09 f0       	breq	.+2      	; 0x4bf4 <end_fine_scroll_rom>

00004bf2 <end_fine_scroll>:
	...

00004bf4 <end_fine_scroll_rom>:
	...

00004bf6 <end_fine_scroll_ram>:
	end_fine_scroll:	
		nop
	end_fine_scroll_rom:
		nop
	end_fine_scroll_ram:
		clr r16	
    4bf6:	00 27       	eor	r16, r16
		out _SFR_IO_ADDR(DATA_PORT),r16   
    4bf8:	08 b9       	out	0x08, r16	; 8

		pop r6
    4bfa:	6f 90       	pop	r6
		pop r7
    4bfc:	7f 90       	pop	r7
		pop r9
    4bfe:	9f 90       	pop	r9
		pop r12
    4c00:	cf 90       	pop	r12
		pop r13
    4c02:	df 90       	pop	r13
		pop r19
    4c04:	3f 91       	pop	r19
		pop r22
    4c06:	6f 91       	pop	r22
		pop r23
    4c08:	7f 91       	pop	r23
		pop YH
    4c0a:	df 91       	pop	r29
		pop YL
    4c0c:	cf 91       	pop	r28

		ret
    4c0e:	08 95       	ret

00004c10 <CopyFlashTile>:
; C-callable
; r24=Source ROM tile index
; r22=Dest RAM tile index
;************************************
CopyFlashTile:
	ldi r18,TILE_HEIGHT*TILE_WIDTH
    4c10:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	lds ZL,tile_table_lo
    4c12:	e0 91 96 0c 	lds	r30, 0x0C96
	lds ZH,tile_table_hi
    4c16:	f0 91 97 0c 	lds	r31, 0x0C97
	mul r24,r18
    4c1a:	82 9f       	mul	r24, r18
	add ZL,r0
    4c1c:	e0 0d       	add	r30, r0
	adc ZH,r1
    4c1e:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    4c20:	aa e3       	ldi	r26, 0x3A	; 58
	ldi XH,hi8(ram_tiles)
    4c22:	b5 e0       	ldi	r27, 0x05	; 5
	mul r22,r18
    4c24:	62 9f       	mul	r22, r18
	add XL,r0
    4c26:	a0 0d       	add	r26, r0
	adc XH,r1
    4c28:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	lpm r1,Z+
	st X+,r1
.endr
    4c2a:	15 90       	lpm	r1, Z+
    4c2c:	1d 92       	st	X+, r1
    4c2e:	15 90       	lpm	r1, Z+
    4c30:	1d 92       	st	X+, r1
    4c32:	15 90       	lpm	r1, Z+
    4c34:	1d 92       	st	X+, r1
    4c36:	15 90       	lpm	r1, Z+
    4c38:	1d 92       	st	X+, r1
    4c3a:	15 90       	lpm	r1, Z+
    4c3c:	1d 92       	st	X+, r1
    4c3e:	15 90       	lpm	r1, Z+
    4c40:	1d 92       	st	X+, r1
    4c42:	15 90       	lpm	r1, Z+
    4c44:	1d 92       	st	X+, r1
    4c46:	15 90       	lpm	r1, Z+
    4c48:	1d 92       	st	X+, r1
    4c4a:	15 90       	lpm	r1, Z+
    4c4c:	1d 92       	st	X+, r1
    4c4e:	15 90       	lpm	r1, Z+
    4c50:	1d 92       	st	X+, r1
    4c52:	15 90       	lpm	r1, Z+
    4c54:	1d 92       	st	X+, r1
    4c56:	15 90       	lpm	r1, Z+
    4c58:	1d 92       	st	X+, r1
    4c5a:	15 90       	lpm	r1, Z+
    4c5c:	1d 92       	st	X+, r1
    4c5e:	15 90       	lpm	r1, Z+
    4c60:	1d 92       	st	X+, r1
    4c62:	15 90       	lpm	r1, Z+
    4c64:	1d 92       	st	X+, r1
    4c66:	15 90       	lpm	r1, Z+
    4c68:	1d 92       	st	X+, r1
    4c6a:	15 90       	lpm	r1, Z+
    4c6c:	1d 92       	st	X+, r1
    4c6e:	15 90       	lpm	r1, Z+
    4c70:	1d 92       	st	X+, r1
    4c72:	15 90       	lpm	r1, Z+
    4c74:	1d 92       	st	X+, r1
    4c76:	15 90       	lpm	r1, Z+
    4c78:	1d 92       	st	X+, r1
    4c7a:	15 90       	lpm	r1, Z+
    4c7c:	1d 92       	st	X+, r1
    4c7e:	15 90       	lpm	r1, Z+
    4c80:	1d 92       	st	X+, r1
    4c82:	15 90       	lpm	r1, Z+
    4c84:	1d 92       	st	X+, r1
    4c86:	15 90       	lpm	r1, Z+
    4c88:	1d 92       	st	X+, r1
    4c8a:	15 90       	lpm	r1, Z+
    4c8c:	1d 92       	st	X+, r1
    4c8e:	15 90       	lpm	r1, Z+
    4c90:	1d 92       	st	X+, r1
    4c92:	15 90       	lpm	r1, Z+
    4c94:	1d 92       	st	X+, r1
    4c96:	15 90       	lpm	r1, Z+
    4c98:	1d 92       	st	X+, r1
    4c9a:	15 90       	lpm	r1, Z+
    4c9c:	1d 92       	st	X+, r1
    4c9e:	15 90       	lpm	r1, Z+
    4ca0:	1d 92       	st	X+, r1
    4ca2:	15 90       	lpm	r1, Z+
    4ca4:	1d 92       	st	X+, r1
    4ca6:	15 90       	lpm	r1, Z+
    4ca8:	1d 92       	st	X+, r1
    4caa:	15 90       	lpm	r1, Z+
    4cac:	1d 92       	st	X+, r1
    4cae:	15 90       	lpm	r1, Z+
    4cb0:	1d 92       	st	X+, r1
    4cb2:	15 90       	lpm	r1, Z+
    4cb4:	1d 92       	st	X+, r1
    4cb6:	15 90       	lpm	r1, Z+
    4cb8:	1d 92       	st	X+, r1
    4cba:	15 90       	lpm	r1, Z+
    4cbc:	1d 92       	st	X+, r1
    4cbe:	15 90       	lpm	r1, Z+
    4cc0:	1d 92       	st	X+, r1
    4cc2:	15 90       	lpm	r1, Z+
    4cc4:	1d 92       	st	X+, r1
    4cc6:	15 90       	lpm	r1, Z+
    4cc8:	1d 92       	st	X+, r1
    4cca:	15 90       	lpm	r1, Z+
    4ccc:	1d 92       	st	X+, r1
    4cce:	15 90       	lpm	r1, Z+
    4cd0:	1d 92       	st	X+, r1
    4cd2:	15 90       	lpm	r1, Z+
    4cd4:	1d 92       	st	X+, r1
    4cd6:	15 90       	lpm	r1, Z+
    4cd8:	1d 92       	st	X+, r1
    4cda:	15 90       	lpm	r1, Z+
    4cdc:	1d 92       	st	X+, r1
    4cde:	15 90       	lpm	r1, Z+
    4ce0:	1d 92       	st	X+, r1
    4ce2:	15 90       	lpm	r1, Z+
    4ce4:	1d 92       	st	X+, r1
    4ce6:	15 90       	lpm	r1, Z+
    4ce8:	1d 92       	st	X+, r1
    4cea:	15 90       	lpm	r1, Z+
    4cec:	1d 92       	st	X+, r1
    4cee:	15 90       	lpm	r1, Z+
    4cf0:	1d 92       	st	X+, r1
    4cf2:	15 90       	lpm	r1, Z+
    4cf4:	1d 92       	st	X+, r1
    4cf6:	15 90       	lpm	r1, Z+
    4cf8:	1d 92       	st	X+, r1
    4cfa:	15 90       	lpm	r1, Z+
    4cfc:	1d 92       	st	X+, r1
    4cfe:	15 90       	lpm	r1, Z+
    4d00:	1d 92       	st	X+, r1
    4d02:	15 90       	lpm	r1, Z+
    4d04:	1d 92       	st	X+, r1
    4d06:	15 90       	lpm	r1, Z+
    4d08:	1d 92       	st	X+, r1
    4d0a:	15 90       	lpm	r1, Z+
    4d0c:	1d 92       	st	X+, r1
    4d0e:	15 90       	lpm	r1, Z+
    4d10:	1d 92       	st	X+, r1
    4d12:	15 90       	lpm	r1, Z+
    4d14:	1d 92       	st	X+, r1
    4d16:	15 90       	lpm	r1, Z+
    4d18:	1d 92       	st	X+, r1
    4d1a:	15 90       	lpm	r1, Z+
    4d1c:	1d 92       	st	X+, r1
    4d1e:	15 90       	lpm	r1, Z+
    4d20:	1d 92       	st	X+, r1
    4d22:	15 90       	lpm	r1, Z+
    4d24:	1d 92       	st	X+, r1
    4d26:	15 90       	lpm	r1, Z+
    4d28:	1d 92       	st	X+, r1
	clr r1
    4d2a:	11 24       	eor	r1, r1
	ret
    4d2c:	08 95       	ret

00004d2e <CopyRamTile>:
; r24=Source RAM tile index
; r22=Dest RAM tile index
;************************************
CopyRamTile:

	ldi r18,TILE_HEIGHT*TILE_WIDTH
    4d2e:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	ldi ZL,lo8(ram_tiles)
    4d30:	ea e3       	ldi	r30, 0x3A	; 58
	ldi ZH,hi8(ram_tiles)
    4d32:	f5 e0       	ldi	r31, 0x05	; 5
	mul r24,r18
    4d34:	82 9f       	mul	r24, r18
	add ZL,r0
    4d36:	e0 0d       	add	r30, r0
	adc ZH,r1
    4d38:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    4d3a:	aa e3       	ldi	r26, 0x3A	; 58
	ldi XH,hi8(ram_tiles)
    4d3c:	b5 e0       	ldi	r27, 0x05	; 5
	mul r22,r18
    4d3e:	62 9f       	mul	r22, r18
	add XL,r0
    4d40:	a0 0d       	add	r26, r0
	adc XH,r1
    4d42:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	ld r1,Z+
	st X+,r1
.endr
    4d44:	11 90       	ld	r1, Z+
    4d46:	1d 92       	st	X+, r1
    4d48:	11 90       	ld	r1, Z+
    4d4a:	1d 92       	st	X+, r1
    4d4c:	11 90       	ld	r1, Z+
    4d4e:	1d 92       	st	X+, r1
    4d50:	11 90       	ld	r1, Z+
    4d52:	1d 92       	st	X+, r1
    4d54:	11 90       	ld	r1, Z+
    4d56:	1d 92       	st	X+, r1
    4d58:	11 90       	ld	r1, Z+
    4d5a:	1d 92       	st	X+, r1
    4d5c:	11 90       	ld	r1, Z+
    4d5e:	1d 92       	st	X+, r1
    4d60:	11 90       	ld	r1, Z+
    4d62:	1d 92       	st	X+, r1
    4d64:	11 90       	ld	r1, Z+
    4d66:	1d 92       	st	X+, r1
    4d68:	11 90       	ld	r1, Z+
    4d6a:	1d 92       	st	X+, r1
    4d6c:	11 90       	ld	r1, Z+
    4d6e:	1d 92       	st	X+, r1
    4d70:	11 90       	ld	r1, Z+
    4d72:	1d 92       	st	X+, r1
    4d74:	11 90       	ld	r1, Z+
    4d76:	1d 92       	st	X+, r1
    4d78:	11 90       	ld	r1, Z+
    4d7a:	1d 92       	st	X+, r1
    4d7c:	11 90       	ld	r1, Z+
    4d7e:	1d 92       	st	X+, r1
    4d80:	11 90       	ld	r1, Z+
    4d82:	1d 92       	st	X+, r1
    4d84:	11 90       	ld	r1, Z+
    4d86:	1d 92       	st	X+, r1
    4d88:	11 90       	ld	r1, Z+
    4d8a:	1d 92       	st	X+, r1
    4d8c:	11 90       	ld	r1, Z+
    4d8e:	1d 92       	st	X+, r1
    4d90:	11 90       	ld	r1, Z+
    4d92:	1d 92       	st	X+, r1
    4d94:	11 90       	ld	r1, Z+
    4d96:	1d 92       	st	X+, r1
    4d98:	11 90       	ld	r1, Z+
    4d9a:	1d 92       	st	X+, r1
    4d9c:	11 90       	ld	r1, Z+
    4d9e:	1d 92       	st	X+, r1
    4da0:	11 90       	ld	r1, Z+
    4da2:	1d 92       	st	X+, r1
    4da4:	11 90       	ld	r1, Z+
    4da6:	1d 92       	st	X+, r1
    4da8:	11 90       	ld	r1, Z+
    4daa:	1d 92       	st	X+, r1
    4dac:	11 90       	ld	r1, Z+
    4dae:	1d 92       	st	X+, r1
    4db0:	11 90       	ld	r1, Z+
    4db2:	1d 92       	st	X+, r1
    4db4:	11 90       	ld	r1, Z+
    4db6:	1d 92       	st	X+, r1
    4db8:	11 90       	ld	r1, Z+
    4dba:	1d 92       	st	X+, r1
    4dbc:	11 90       	ld	r1, Z+
    4dbe:	1d 92       	st	X+, r1
    4dc0:	11 90       	ld	r1, Z+
    4dc2:	1d 92       	st	X+, r1
    4dc4:	11 90       	ld	r1, Z+
    4dc6:	1d 92       	st	X+, r1
    4dc8:	11 90       	ld	r1, Z+
    4dca:	1d 92       	st	X+, r1
    4dcc:	11 90       	ld	r1, Z+
    4dce:	1d 92       	st	X+, r1
    4dd0:	11 90       	ld	r1, Z+
    4dd2:	1d 92       	st	X+, r1
    4dd4:	11 90       	ld	r1, Z+
    4dd6:	1d 92       	st	X+, r1
    4dd8:	11 90       	ld	r1, Z+
    4dda:	1d 92       	st	X+, r1
    4ddc:	11 90       	ld	r1, Z+
    4dde:	1d 92       	st	X+, r1
    4de0:	11 90       	ld	r1, Z+
    4de2:	1d 92       	st	X+, r1
    4de4:	11 90       	ld	r1, Z+
    4de6:	1d 92       	st	X+, r1
    4de8:	11 90       	ld	r1, Z+
    4dea:	1d 92       	st	X+, r1
    4dec:	11 90       	ld	r1, Z+
    4dee:	1d 92       	st	X+, r1
    4df0:	11 90       	ld	r1, Z+
    4df2:	1d 92       	st	X+, r1
    4df4:	11 90       	ld	r1, Z+
    4df6:	1d 92       	st	X+, r1
    4df8:	11 90       	ld	r1, Z+
    4dfa:	1d 92       	st	X+, r1
    4dfc:	11 90       	ld	r1, Z+
    4dfe:	1d 92       	st	X+, r1
    4e00:	11 90       	ld	r1, Z+
    4e02:	1d 92       	st	X+, r1
    4e04:	11 90       	ld	r1, Z+
    4e06:	1d 92       	st	X+, r1
    4e08:	11 90       	ld	r1, Z+
    4e0a:	1d 92       	st	X+, r1
    4e0c:	11 90       	ld	r1, Z+
    4e0e:	1d 92       	st	X+, r1
    4e10:	11 90       	ld	r1, Z+
    4e12:	1d 92       	st	X+, r1
    4e14:	11 90       	ld	r1, Z+
    4e16:	1d 92       	st	X+, r1
    4e18:	11 90       	ld	r1, Z+
    4e1a:	1d 92       	st	X+, r1
    4e1c:	11 90       	ld	r1, Z+
    4e1e:	1d 92       	st	X+, r1
    4e20:	11 90       	ld	r1, Z+
    4e22:	1d 92       	st	X+, r1
    4e24:	11 90       	ld	r1, Z+
    4e26:	1d 92       	st	X+, r1
    4e28:	11 90       	ld	r1, Z+
    4e2a:	1d 92       	st	X+, r1
    4e2c:	11 90       	ld	r1, Z+
    4e2e:	1d 92       	st	X+, r1
    4e30:	11 90       	ld	r1, Z+
    4e32:	1d 92       	st	X+, r1
    4e34:	11 90       	ld	r1, Z+
    4e36:	1d 92       	st	X+, r1
    4e38:	11 90       	ld	r1, Z+
    4e3a:	1d 92       	st	X+, r1
    4e3c:	11 90       	ld	r1, Z+
    4e3e:	1d 92       	st	X+, r1
    4e40:	11 90       	ld	r1, Z+
    4e42:	1d 92       	st	X+, r1
	clr r1
    4e44:	11 24       	eor	r1, r1
	ret
    4e46:	08 95       	ret

00004e48 <BlitSprite>:
; r22=RAM tile index (bt)
; r21:r20=Y:X
; r19:r18=DY:DX
;************************************
BlitSprite:
	push r16
    4e48:	0f 93       	push	r16
	push r17
    4e4a:	1f 93       	push	r17
	push YL
    4e4c:	cf 93       	push	r28
	push YH
    4e4e:	df 93       	push	r29

	;src=sprites_tiletable_lo+(sprites[i].tileIndex*TILE_HEIGHT*TILE_WIDTH)
	ldi r25,SPRITE_STRUCT_SIZE
    4e50:	94 e0       	ldi	r25, 0x04	; 4
	mul r24,r25
    4e52:	89 9f       	mul	r24, r25

	ldi ZL,lo8(sprites)	
    4e54:	e2 e0       	ldi	r30, 0x02	; 2
	ldi ZH,hi8(sprites)	
    4e56:	f5 e0       	ldi	r31, 0x05	; 5
	add ZL,r0
    4e58:	e0 0d       	add	r30, r0
	adc ZH,r1
    4e5a:	f1 1d       	adc	r31, r1

	ldd r16,Z+sprFlags
    4e5c:	03 81       	ldd	r16, Z+3	; 0x03

	;8x16 multiply
	ldd r24,Z+sprTileIndex
    4e5e:	82 81       	ldd	r24, Z+2	; 0x02
	ldi r30,TILE_WIDTH*TILE_HEIGHT
    4e60:	e0 e4       	ldi	r30, 0x40	; 64
	mul r24,r30
    4e62:	8e 9f       	mul	r24, r30
	movw r26,r0
    4e64:	d0 01       	movw	r26, r0
	
	;get tile bank addr
	ldi r25,4*2
    4e66:	98 e0       	ldi	r25, 0x08	; 8
	mul r16,r25
    4e68:	09 9f       	mul	r16, r25
	ldi YL,lo8(sprites_tile_banks)	
    4e6a:	ce e8       	ldi	r28, 0x8E	; 142
	ldi YH,hi8(sprites_tile_banks)	
    4e6c:	dc e0       	ldi	r29, 0x0C	; 12
	clr r0
    4e6e:	00 24       	eor	r0, r0
	add YL,r1
    4e70:	c1 0d       	add	r28, r1
	adc YH,r0		
    4e72:	d0 1d       	adc	r29, r0
	ldd ZL,Y+0
    4e74:	e8 81       	ld	r30, Y
	ldd ZH,Y+1
    4e76:	f9 81       	ldd	r31, Y+1	; 0x01
	add ZL,r26	;tile data src
    4e78:	ea 0f       	add	r30, r26
	adc ZH,r27
    4e7a:	fb 1f       	adc	r31, r27
	
	;dest=ram_tiles+(bt*TILE_HEIGHT*TILE_WIDTH)
	ldi XL,lo8(ram_tiles)	
    4e7c:	aa e3       	ldi	r26, 0x3A	; 58
	ldi XH,hi8(ram_tiles)
    4e7e:	b5 e0       	ldi	r27, 0x05	; 5
	ldi r25,TILE_WIDTH*TILE_HEIGHT
    4e80:	90 e4       	ldi	r25, 0x40	; 64
	mul r22,r25
    4e82:	69 9f       	mul	r22, r25
	add XL,r0
    4e84:	a0 0d       	add	r26, r0
	adc XH,r1
    4e86:	b1 1d       	adc	r27, r1
			srcXdiff=destXdiff;
			src+=destXdiff;
		}
	}
	*/
	clr r1
    4e88:	11 24       	eor	r1, r1
	clr YH		;hi8(srcXdiff)
    4e8a:	dd 27       	eor	r29, r29

	cpi r20,0	
    4e8c:	40 30       	cpi	r20, 0x00	; 0
	brne x_2nd_tile
    4e8e:	51 f4       	brne	.+20     	; 0x4ea4 <x_2nd_tile>
	
	add XL,r18	;dest+=dx
    4e90:	a2 0f       	add	r26, r18
	adc XH,r1
    4e92:	b1 1d       	adc	r27, r1
	mov r24,r18	;destXdiff=dx
    4e94:	82 2f       	mov	r24, r18
	mov YL,r18	;srcXdiff=dx
    4e96:	c2 2f       	mov	r28, r18

	sbrs r16,SPRITE_FLIP_X_BIT
    4e98:	00 ff       	sbrs	r16, 0
	rjmp x_check_end
    4e9a:	11 c0       	rjmp	.+34     	; 0x4ebe <x_check_end>

	adiw ZL,(TILE_WIDTH-1)	;src+=7
    4e9c:	37 96       	adiw	r30, 0x07	; 7
	ldi YL,TILE_WIDTH*2		;srcXdiff=((TILE_WIDTH*2)-dx);
    4e9e:	c0 e1       	ldi	r28, 0x10	; 16
	sub YL,r18	
    4ea0:	c2 1b       	sub	r28, r18
	rjmp x_check_end
    4ea2:	0d c0       	rjmp	.+26     	; 0x4ebe <x_check_end>

00004ea4 <x_2nd_tile>:

x_2nd_tile:
	ldi r24,TILE_WIDTH
    4ea4:	88 e0       	ldi	r24, 0x08	; 8
	sub r24,r18		;8-DX = xdiff for dest
    4ea6:	82 1b       	sub	r24, r18

	sbrc r16,SPRITE_FLIP_X_BIT
    4ea8:	00 fd       	sbrc	r16, 0
	rjmp x2_flip_x
    4eaa:	04 c0       	rjmp	.+8      	; 0x4eb4 <x2_flip_x>

	mov YL,r24		;srcXdiff=destXdiff;
    4eac:	c8 2f       	mov	r28, r24
	add ZL,r24		;src+=destXdiff;
    4eae:	e8 0f       	add	r30, r24
	adc ZH,r1	
    4eb0:	f1 1d       	adc	r31, r1
	rjmp x_check_end
    4eb2:	05 c0       	rjmp	.+10     	; 0x4ebe <x_check_end>

00004eb4 <x2_flip_x>:

x2_flip_x:
	ldi YL,TILE_WIDTH
    4eb4:	c8 e0       	ldi	r28, 0x08	; 8
	add YL,r18		;srcXdiff=TILE_WIDTH+dx;	
    4eb6:	c2 0f       	add	r28, r18
	add ZL,r18		;src+=dx;
    4eb8:	e2 0f       	add	r30, r18
	adc ZH,r1
    4eba:	f1 1d       	adc	r31, r1
	sbiw ZL,1		;src--;
    4ebc:	31 97       	sbiw	r30, 0x01	; 1

00004ebe <x_check_end>:
		}else{
			src+=(ydiff*TILE_WIDTH);
		}
	}
	*/
	cpi r21,0
    4ebe:	50 30       	cpi	r21, 0x00	; 0
	brne y_2nd_tile
    4ec0:	51 f4       	brne	.+20     	; 0x4ed6 <y_2nd_tile>

	ldi r25,TILE_WIDTH	;dest+=(dy*TILE_WIDTH)
    4ec2:	98 e0       	ldi	r25, 0x08	; 8
	mul r25,r19			
    4ec4:	93 9f       	mul	r25, r19
	add XL,r0
    4ec6:	a0 0d       	add	r26, r0
	adc XH,r1
    4ec8:	b1 1d       	adc	r27, r1

	mov r25,r19			;ydiff=dy
    4eca:	93 2f       	mov	r25, r19

	//sbrc r16,SPRITE_FLIP_Y_BIT
	//adiw ZL,(TILE_WIDTH*(TILE_HEIGHT-1))

	sbrc r16,SPRITE_FLIP_Y_BIT
    4ecc:	01 fd       	sbrc	r16, 1
	subi ZL,lo8(-(TILE_WIDTH*(TILE_HEIGHT-1)));src+=(TILE_WIDTH*(TILE_HEIGHT-1));
    4ece:	e8 5c       	subi	r30, 0xC8	; 200
	sbrc r16,SPRITE_FLIP_Y_BIT
    4ed0:	01 fd       	sbrc	r16, 1
	sbci ZH,hi8(-(TILE_WIDTH*(TILE_HEIGHT-1)))
    4ed2:	ff 4f       	sbci	r31, 0xFF	; 255


	rjmp y_check_end
    4ed4:	0a c0       	rjmp	.+20     	; 0x4eea <y_check_end>

00004ed6 <y_2nd_tile>:

y_2nd_tile:
	ldi r25,TILE_HEIGHT	;ydiff=(TILE_HEIGHT-dy)
    4ed6:	98 e0       	ldi	r25, 0x08	; 8
	sub r25,r19	
    4ed8:	93 1b       	sub	r25, r19
	
	mov r22,r19			;temp=dy-1
    4eda:	63 2f       	mov	r22, r19
	dec r22
    4edc:	6a 95       	dec	r22
	sbrs r16,SPRITE_FLIP_Y_BIT
    4ede:	01 ff       	sbrs	r16, 1
	mov r22,r25			;temp=ydiff
    4ee0:	69 2f       	mov	r22, r25

	ldi r21,TILE_WIDTH	;src+=(temp*TILE_WIDTH);
    4ee2:	58 e0       	ldi	r21, 0x08	; 8
	mul r21,r22
    4ee4:	56 9f       	mul	r21, r22
	add ZL,r0
    4ee6:	e0 0d       	add	r30, r0
	adc ZH,r1	
    4ee8:	f1 1d       	adc	r31, r1

00004eea <y_check_end>:
y_check_end:	
	
	//if(flags&SPRITE_FLIP_X){
	//	step=-1;
	//}
	ser r22		;step=-1
    4eea:	6f ef       	ldi	r22, 0xFF	; 255
	ser r23
    4eec:	7f ef       	ldi	r23, 0xFF	; 255
	sbrs r16,SPRITE_FLIP_X_BIT
    4eee:	00 ff       	sbrs	r16, 0
	ldi r22,1	;step=1
    4ef0:	61 e0       	ldi	r22, 0x01	; 1
	sbrs r16,SPRITE_FLIP_X_BIT
    4ef2:	00 ff       	sbrs	r16, 0
	clr r23
    4ef4:	77 27       	eor	r23, r23

	//if(flags&SPRITE_FLIP_Y){
	//	srcXdiff-=(TILE_WIDTH*2);
	//}
	sbrc r16,SPRITE_FLIP_Y_BIT
    4ef6:	01 fd       	sbrc	r16, 1
	sbiw YL,(TILE_WIDTH*2)
    4ef8:	60 97       	sbiw	r28, 0x10	; 16
	;r24	= destXdiff
	;r25	= ydiff
	;X		= dest
	;Y		= srcXdiff
	;Z		= src
	clr r1
    4efa:	11 24       	eor	r1, r1
	ldi r19,TRANSLUCENT_COLOR
    4efc:	3e ef       	ldi	r19, 0xFE	; 254

	ldi r21,TILE_HEIGHT
    4efe:	58 e0       	ldi	r21, 0x08	; 8
	sub r21,r25 	;yspan=(TILE_HEIGHT-ydiff)
    4f00:	59 1b       	sub	r21, r25

00004f02 <y_loop>:

y_loop:
	ldi r20,TILE_WIDTH
    4f02:	48 e0       	ldi	r20, 0x08	; 8
	sub r20,r24 	;xspan=(TILE_WIDTH-destXdiff)
    4f04:	48 1b       	sub	r20, r24

00004f06 <x_loop>:

x_loop:
	lpm r18,Z		;px=pgm_read_byte(src);
    4f06:	24 91       	lpm	r18, Z
	cpse r18,r19	;if(px!=TRANSLUCENT_COLOR)
    4f08:	23 13       	cpse	r18, r19
	st X,r18		;*dest=px;
    4f0a:	2c 93       	st	X, r18
	adiw XL,1
    4f0c:	11 96       	adiw	r26, 0x01	; 1
	add ZL,r22		;src+=step;
    4f0e:	e6 0f       	add	r30, r22
	adc ZH,r23
    4f10:	f7 1f       	adc	r31, r23
	dec r20
    4f12:	4a 95       	dec	r20
	brne x_loop
    4f14:	c1 f7       	brne	.-16     	; 0x4f06 <x_loop>

	add ZL,YL		;src+=srcXdiff
    4f16:	ec 0f       	add	r30, r28
	adc ZH,YH
    4f18:	fd 1f       	adc	r31, r29
	add XL,r24		;dest+=destXdiff
    4f1a:	a8 0f       	add	r26, r24
	adc XH,r1
    4f1c:	b1 1d       	adc	r27, r1
	dec r21
    4f1e:	5a 95       	dec	r21
	brne y_loop
    4f20:	81 f7       	brne	.-32     	; 0x4f02 <y_loop>


	pop YH
    4f22:	df 91       	pop	r29
	pop YL
    4f24:	cf 91       	pop	r28
	pop r17
    4f26:	1f 91       	pop	r17
	pop r16
    4f28:	0f 91       	pop	r16
	ret
    4f2a:	08 95       	ret

00004f2c <__vector_13>:

;***************************************************************************
; Main Video sync interrupt
;***************************************************************************
TIMER1_COMPA_vect:
	push r0
    4f2c:	0f 92       	push	r0
	push r1
    4f2e:	1f 92       	push	r1
	push ZL;2
    4f30:	ef 93       	push	r30
	push ZH;2
    4f32:	ff 93       	push	r31
	
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    4f34:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    4f36:	ef 93       	push	r30

	;Read timer offset since rollover to remove cycles 
	;and conpensate for interrupt latency.
	;This is nessesary to eliminate frame jitter.
	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    4f38:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,0x12 ;MIN_INT_LATENCY
    4f3c:	e2 51       	subi	r30, 0x12	; 18

	ldi ZH,1
    4f3e:	f1 e0       	ldi	r31, 0x01	; 1

00004f40 <latency_loop>:
latency_loop:
	cp ZL,ZH
    4f40:	ef 17       	cp	r30, r31
	brlo .		;advance PC to next instruction	
    4f42:	00 f0       	brcs	.+0      	; 0x4f44 <latency_loop+0x4>
	inc ZH
    4f44:	f3 95       	inc	r31
	cpi ZH,10
    4f46:	fa 30       	cpi	r31, 0x0A	; 10
	brlo latency_loop
    4f48:	d8 f3       	brcs	.-10     	; 0x4f40 <latency_loop>
	jmp .
    4f4a:	0c 94 a7 27 	jmp	0x4f4e	; 0x4f4e <latency_loop+0xe>
	
	;decrement sync pulse counter
	lds ZL,sync_pulse
    4f4e:	e0 91 a1 0c 	lds	r30, 0x0CA1
	dec ZL
    4f52:	ea 95       	dec	r30
	sts sync_pulse,ZL
    4f54:	e0 93 a1 0c 	sts	0x0CA1, r30

	;process sync phases
	lds ZH,sync_phase
    4f58:	f0 91 a0 0c 	lds	r31, 0x0CA0
	sbrc ZH,0
    4f5c:	f0 fd       	sbrc	r31, 0
	rjmp sync_hsync
    4f5e:	57 c0       	rjmp	.+174    	; 0x500e <sync_hsync>
; Note: TCNT1 should be equal to 
; 0x68 on the cbi
; 0xAC on the sbi
; pulse duration: 68 clocks
;***************************************************		
	cpi ZL,SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    4f60:	ec 30       	cpi	r30, 0x0C	; 12
	brlo sync_eq
    4f62:	98 f0       	brcs	.+38     	; 0x4f8a <sync_eq>

	;Set HDRIVE to double rate during VSYNC
	ldi ZH,hi8(HDRIVE_CL_TWICE)
    4f64:	f3 e0       	ldi	r31, 0x03	; 3
	sts _SFR_MEM_ADDR(OCR1AH),ZH	
    4f66:	f0 93 89 00 	sts	0x0089, r31
	ldi ZH,lo8(HDRIVE_CL_TWICE)
    4f6a:	fd e8       	ldi	r31, 0x8D	; 141
	sts _SFR_MEM_ADDR(OCR1AL),ZH
    4f6c:	f0 93 88 00 	sts	0x0088, r31

	bst ZL,0
    4f70:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0x68
    4f72:	28 98       	cbi	0x05, 0	; 5
	brtc sync_pre_eq_no_sound_update
    4f74:	26 f4       	brtc	.+8      	; 0x4f7e <sync_pre_eq_no_sound_update>
	ldi ZL,1	;indicate update_sound to generate the SBI for pre-eq
    4f76:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    4f78:	0e 94 8e 28 	call	0x511c	; 0x511c <update_sound>
	rjmp sync_end
    4f7c:	b7 c0       	rjmp	.+366    	; 0x50ec <sync_end>

00004f7e <sync_pre_eq_no_sound_update>:

sync_pre_eq_no_sound_update:
	WAIT ZL,64
    4f7e:	e5 e1       	ldi	r30, 0x15	; 21
    4f80:	ea 95       	dec	r30
    4f82:	f1 f7       	brne	.-4      	; 0x4f80 <sync_pre_eq_no_sound_update+0x2>
    4f84:	00 00       	nop
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    4f86:	28 9a       	sbi	0x05, 0	; 5
		
	rjmp sync_end
    4f88:	b1 c0       	rjmp	.+354    	; 0x50ec <sync_end>

00004f8a <sync_eq>:
; 0x68  on the cbi
; 0x36E on the sbi
; low pulse duration: 774 clocks
;***************************************************	
sync_eq:
	cpi ZL,SYNC_POST_EQ_PULSES
    4f8a:	e6 30       	cpi	r30, 0x06	; 6
	brlo sync_post_eq
    4f8c:	38 f1       	brcs	.+78     	; 0x4fdc <sync_post_eq>

	rjmp .
    4f8e:	00 c0       	rjmp	.+0      	; 0x4f90 <sync_eq+0x6>
	rjmp .
    4f90:	00 c0       	rjmp	.+0      	; 0x4f92 <sync_eq+0x8>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    4f92:	28 98       	cbi	0x05, 0	; 5

	bst ZL,0
    4f94:	e0 fb       	bst	r30, 0
	ldi ZL,4
    4f96:	e4 e0       	ldi	r30, 0x04	; 4
	brtc sync_eq_skip
    4f98:	16 f4       	brtc	.+4      	; 0x4f9e <sync_eq_skip>
	
	call update_sound
    4f9a:	0e 94 8e 28 	call	0x511c	; 0x511c <update_sound>

00004f9e <sync_eq_skip>:
	;enable interupt to bring back sync 
	;level instead of wasting cycles
	;in a big wait loop

 	;clear interrupt flag
	ldi ZL,(1<<OCF1B)
    4f9e:	e4 e0       	ldi	r30, 0x04	; 4
	sts _SFR_MEM_ADDR(TIFR1),ZL 
    4fa0:	e0 93 36 00 	sts	0x0036, r30
	
	;generate interrupt on match
	;for timer1 compare unit b
	ldi ZL,(1<<OCIE1A)+(1<<OCIE1B)
    4fa4:	e6 e0       	ldi	r30, 0x06	; 6
	sts _SFR_MEM_ADDR(TIMSK1),ZL
    4fa6:	e0 93 6f 00 	sts	0x006F, r30

	rjmp sync_end
    4faa:	a0 c0       	rjmp	.+320    	; 0x50ec <sync_end>

00004fac <__vector_14>:
; during VSYNC EQ pulses to recover ~5000 cycles per field
; with interrupt latency conpensation
; 37 cycles
;**********************************************************	
TIMER1_COMPB_vect:
	push ZL
    4fac:	ef 93       	push	r30
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    4fae:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    4fb0:	ef 93       	push	r30

	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    4fb2:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,62+31 ;0x5D ;MIN_INT_LATENCY
    4fb6:	ed 55       	subi	r30, 0x5D	; 93

	cpi ZL,1
    4fb8:	e1 30       	cpi	r30, 0x01	; 1
	brlo .		;advance PC to next instruction
    4fba:	00 f0       	brcs	.+0      	; 0x4fbc <__vector_14+0x10>

	cpi ZL,2
    4fbc:	e2 30       	cpi	r30, 0x02	; 2
	brlo .		;advance PC to next instruction
    4fbe:	00 f0       	brcs	.+0      	; 0x4fc0 <__vector_14+0x14>

	cpi ZL,3
    4fc0:	e3 30       	cpi	r30, 0x03	; 3
	brlo .		;advance PC to next instruction
    4fc2:	00 f0       	brcs	.+0      	; 0x4fc4 <__vector_14+0x18>

	cpi ZL,4
    4fc4:	e4 30       	cpi	r30, 0x04	; 4
	brlo .		;advance PC to next instruction
    4fc6:	00 f0       	brcs	.+0      	; 0x4fc8 <__vector_14+0x1c>

	cpi ZL,5
    4fc8:	e5 30       	cpi	r30, 0x05	; 5
	brlo .		;advance PC to next instruction
    4fca:	00 f0       	brcs	.+0      	; 0x4fcc <__vector_14+0x20>

 	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;68
    4fcc:	28 9a       	sbi	0x05, 0	; 5
	ldi ZL,(1<<OCIE1A) ; disable OCIE1B 
    4fce:	e2 e0       	ldi	r30, 0x02	; 2
	sts _SFR_MEM_ADDR(TIMSK1),ZL ;stop generate interrupt on match
    4fd0:	e0 93 6f 00 	sts	0x006F, r30
	
	;restore flags
	pop ZL
    4fd4:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL	
    4fd6:	ef bf       	out	0x3f, r30	; 63
	pop ZL
    4fd8:	ef 91       	pop	r30
	reti
    4fda:	18 95       	reti

00004fdc <sync_post_eq>:
; 0x68 on the cbi
; 0xAC on the sbi
; pulse cycles: 68 clocks
;***************************************************	
sync_post_eq:	
	rjmp .
    4fdc:	00 c0       	rjmp	.+0      	; 0x4fde <sync_post_eq+0x2>

	bst ZL,0
    4fde:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    4fe0:	28 98       	cbi	0x05, 0	; 5
	brtc sync_post_eq_no_sound_update
    4fe2:	26 f4       	brtc	.+8      	; 0x4fec <sync_post_eq_no_sound_update>
	ldi ZL,1	
    4fe4:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    4fe6:	0e 94 8e 28 	call	0x511c	; 0x511c <update_sound>
	rjmp sync_pre_eq_cont
    4fea:	05 c0       	rjmp	.+10     	; 0x4ff6 <sync_pre_eq_cont>

00004fec <sync_post_eq_no_sound_update>:

sync_post_eq_no_sound_update:
	WAIT ZL,64
    4fec:	e5 e1       	ldi	r30, 0x15	; 21
    4fee:	ea 95       	dec	r30
    4ff0:	f1 f7       	brne	.-4      	; 0x4fee <sync_post_eq_no_sound_update+0x2>
    4ff2:	00 00       	nop

	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN 
    4ff4:	28 9a       	sbi	0x05, 0	; 5

00004ff6 <sync_pre_eq_cont>:

sync_pre_eq_cont:	
	;check if it's the last vsync pulse
	lds ZL,sync_pulse
    4ff6:	e0 91 a1 0c 	lds	r30, 0x0CA1
	cpi ZL,0
    4ffa:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2 ;skip rjmp
    4ffc:	09 f0       	breq	.+2      	; 0x5000 <sync_pre_eq_cont+0xa>
	rjmp sync_end
    4ffe:	76 c0       	rjmp	.+236    	; 0x50ec <sync_end>
	
	;update sync flags
	ldi ZL,SYNC_HSYNC_PULSES
    5000:	ed ef       	ldi	r30, 0xFD	; 253
	sts sync_pulse,ZL
    5002:	e0 93 a1 0c 	sts	0x0CA1, r30
	ldi ZL,1
    5006:	e1 e0       	ldi	r30, 0x01	; 1
	sts sync_phase,ZL
    5008:	e0 93 a0 0c 	sts	0x0CA0, r30
	
	rjmp sync_end
    500c:	6f c0       	rjmp	.+222    	; 0x50ec <sync_end>

0000500e <sync_hsync>:
; 0xF0 on the sbi
; pulse duration: 136 clocks
;***************************************************	

	; Set HDRIVE to normal rate
	ldi ZL,hi8(HDRIVE_CL)
    500e:	e7 e0       	ldi	r30, 0x07	; 7
	sts _SFR_MEM_ADDR(OCR1AH),ZL	
    5010:	e0 93 89 00 	sts	0x0089, r30
	ldi ZL,lo8(HDRIVE_CL)
    5014:	eb e1       	ldi	r30, 0x1B	; 27
	sts _SFR_MEM_ADDR(OCR1AL),ZL
    5016:	e0 93 88 00 	sts	0x0088, r30
	rjmp .
    501a:	00 c0       	rjmp	.+0      	; 0x501c <sync_hsync+0xe>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    501c:	28 98       	cbi	0x05, 0	; 5
	
	ldi ZL,2	;indicate update_sound to generate the SBI for pre-eq
    501e:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    5020:	00 c0       	rjmp	.+0      	; 0x5022 <sync_hsync+0x14>
	call update_sound
    5022:	0e 94 8e 28 	call	0x511c	; 0x511c <update_sound>

	;check if we have reached the first line to render
	ldi ZH,SYNC_HSYNC_PULSES
    5026:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    5028:	00 90 a7 0c 	lds	r0, 0x0CA7
	sub ZH,r0				
    502c:	f0 19       	sub	r31, r0
	lds ZL,sync_pulse
    502e:	e0 91 a1 0c 	lds	r30, 0x0CA1
	cp ZL,ZH
    5032:	ef 17       	cp	r30, r31
	brsh no_render
    5034:	d0 f4       	brcc	.+52     	; 0x506a <no_render>

	ldi ZH,SYNC_HSYNC_PULSES
    5036:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    5038:	00 90 a7 0c 	lds	r0, 0x0CA7
	sub ZH,r0				
    503c:	f0 19       	sub	r31, r0
	lds r0,render_lines_count
    503e:	00 90 a8 0c 	lds	r0, 0x0CA8
	sub ZH,r0			
    5042:	f0 19       	sub	r31, r0
	cp ZL,ZH
    5044:	ef 17       	cp	r30, r31
	brlo no_render
    5046:	88 f0       	brcs	.+34     	; 0x506a <no_render>

	;push r1-r29
	ldi ZL,29
    5048:	ed e1       	ldi	r30, 0x1D	; 29
	clr ZH
    504a:	ff 27       	eor	r31, r31

0000504c <push_loop>:
push_loop:
	ld r0,Z	;load value from register file
    504c:	00 80       	ld	r0, Z
	push r0
    504e:	0f 92       	push	r0
	dec ZL
    5050:	ea 95       	dec	r30
	brne push_loop	
    5052:	e1 f7       	brne	.-8      	; 0x504c <push_loop>

	;timing compensation
	;to insure we always call the video mode 
	;routine at the same cycle	
	WAIT r16,230-(AUDIO_OUT_HSYNC_CYCLES)
    5054:	06 e0       	ldi	r16, 0x06	; 6
    5056:	0a 95       	dec	r16
    5058:	f1 f7       	brne	.-4      	; 0x5056 <push_loop+0xa>

	call VMODE_FUNC		;TCNT1=0x234
    505a:	0e 94 54 24 	call	0x48a8	; 0x48a8 <sub_video_mode3>

	;pop r1-r29
	ldi ZL,1
    505e:	e1 e0       	ldi	r30, 0x01	; 1
	clr ZH
    5060:	ff 27       	eor	r31, r31

00005062 <pop_loop>:
pop_loop:
	pop r0
    5062:	0f 90       	pop	r0
	st Z+,r0 ;store value to register file
    5064:	01 92       	st	Z+, r0
	cpi ZL,30
    5066:	ee 31       	cpi	r30, 0x1E	; 30
	brlo pop_loop	
    5068:	e0 f3       	brcs	.-8      	; 0x5062 <pop_loop>

0000506a <no_render>:

no_render:

	;check if it's the last hsync pulse and we are 
	;ready for VSYNC
	lds ZL,sync_pulse
    506a:	e0 91 a1 0c 	lds	r30, 0x0CA1
	cpi ZL,0
    506e:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2
    5070:	09 f0       	breq	.+2      	; 0x5074 <no_render+0xa>
	rjmp sync_end
    5072:	3c c0       	rjmp	.+120    	; 0x50ec <sync_end>
;***************************************************
; Process VSYNC stuff
;***************************************************
	
	;push C-call registers
	push r18
    5074:	2f 93       	push	r18
	push r19
    5076:	3f 93       	push	r19
	push r20
    5078:	4f 93       	push	r20
	push r21
    507a:	5f 93       	push	r21
	push r22
    507c:	6f 93       	push	r22
	push r23
    507e:	7f 93       	push	r23
	push r24
    5080:	8f 93       	push	r24
	push r25
    5082:	9f 93       	push	r25
	push r26
    5084:	af 93       	push	r26
	push r27
    5086:	bf 93       	push	r27

	sei ;must enable ints for re-entrant sync pulses
    5088:	78 94       	sei
	clr r1
    508a:	11 24       	eor	r1, r1

	;set vsync flags
	clr ZL
    508c:	ee 27       	eor	r30, r30
	sts sync_phase,ZL
    508e:	e0 93 a0 0c 	sts	0x0CA0, r30
	ldi ZL,SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    5092:	e2 e1       	ldi	r30, 0x12	; 18
	sts sync_pulse,ZL
    5094:	e0 93 a1 0c 	sts	0x0CA1, r30



	;increment the vsync counter
	lds r24,vsync_counter
    5098:	80 91 b1 0c 	lds	r24, 0x0CB1
	lds r25,vsync_counter+1
    509c:	90 91 b2 0c 	lds	r25, 0x0CB2
	adiw r24,1
    50a0:	01 96       	adiw	r24, 0x01	; 1
	sts vsync_counter,r24
    50a2:	80 93 b1 0c 	sts	0x0CB1, r24
	sts vsync_counter+1,r25
    50a6:	90 93 b2 0c 	sts	0x0CB2, r25


	;process user pre callback
	lds ZL,pre_vsync_user_callback+0
    50aa:	e0 91 a3 0c 	lds	r30, 0x0CA3
	lds ZH,pre_vsync_user_callback+1
    50ae:	f0 91 a4 0c 	lds	r31, 0x0CA4
	cp  ZL,r1
    50b2:	e1 15       	cp	r30, r1
	cpc ZH,r1
    50b4:	f1 05       	cpc	r31, r1
	breq .+2 
    50b6:	09 f0       	breq	.+2      	; 0x50ba <no_render+0x50>
	icall
    50b8:	09 95       	icall

	;refresh buttons states
	#if CONTROLLERS_VSYNC_READ == 1
		call ReadControllers
    50ba:	0e 94 2f 2a 	call	0x545e	; 0x545e <ReadControllers>
	#endif 
	
	;invoke stuff the video mode may have to do
	call VideoModeVsync	
    50be:	0e 94 5d 37 	call	0x6eba	; 0x6eba <VideoModeVsync>

	;process music (music, envelopes, etc)
	call process_music
    50c2:	0e 94 88 28 	call	0x5110	; 0x5110 <process_music>
	clr r1
    50c6:	11 24       	eor	r1, r1

	;process user post callback
	lds ZL,post_vsync_user_callback+0
    50c8:	e0 91 a5 0c 	lds	r30, 0x0CA5
	lds ZH,post_vsync_user_callback+1
    50cc:	f0 91 a6 0c 	lds	r31, 0x0CA6
	cp  ZL,r1
    50d0:	e1 15       	cp	r30, r1
	cpc ZH,r1
    50d2:	f1 05       	cpc	r31, r1
	breq .+2 
    50d4:	09 f0       	breq	.+2      	; 0x50d8 <no_render+0x6e>
	icall
    50d6:	09 95       	icall
	#if SNES_MOUSE == 1
		call ReadMouseExtendedData
		call ProcessMouseMovement
	#endif

	pop r27
    50d8:	bf 91       	pop	r27
	pop r26
    50da:	af 91       	pop	r26
	pop r25
    50dc:	9f 91       	pop	r25
	pop r24
    50de:	8f 91       	pop	r24
	pop r23
    50e0:	7f 91       	pop	r23
	pop r22
    50e2:	6f 91       	pop	r22
	pop r21
    50e4:	5f 91       	pop	r21
	pop r20
    50e6:	4f 91       	pop	r20
	pop r19
    50e8:	3f 91       	pop	r19
	pop r18
    50ea:	2f 91       	pop	r18

000050ec <sync_end>:
	
sync_end:	
	;restore flags
	pop ZL
    50ec:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL
    50ee:	ef bf       	out	0x3f, r30	; 63
	
	pop ZH
    50f0:	ff 91       	pop	r31
	pop ZL
    50f2:	ef 91       	pop	r30
	pop r1
    50f4:	1f 90       	pop	r1
	pop r0
    50f6:	0f 90       	pop	r0
	reti
    50f8:	18 95       	reti

000050fa <hsync_pulse>:
; 0xf0 on the sbi 
;	
; Destroys: ZL (r30)
;*************************************************
hsync_pulse:
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    50fa:	28 98       	cbi	0x05, 0	; 5
	ldi ZL,2
    50fc:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    50fe:	00 c0       	rjmp	.+0      	; 0x5100 <hsync_pulse+0x6>
	call update_sound
    5100:	0e 94 8e 28 	call	0x511c	; 0x511c <update_sound>

	lds ZL,sync_pulse
    5104:	e0 91 a1 0c 	lds	r30, 0x0CA1
	dec ZL
    5108:	ea 95       	dec	r30
	sts sync_pulse,ZL
    510a:	e0 93 a1 0c 	sts	0x0CA1, r30

	ret
    510e:	08 95       	ret

00005110 <process_music>:
; NOTE: registers r18-r27 are already saved by the caller
;***********************
process_music:
	
#if ENABLE_MIXER==1
	lds ZL,sound_enabled
    5110:	e0 91 b7 0c 	lds	r30, 0x0CB7
	sbrc ZL,0
    5114:	e0 fd       	sbrc	r30, 0
 	call ProcessMusic
    5116:	0e 94 82 2c 	call	0x5904	; 0x5904 <ProcessMusic>
#endif

	ret
    511a:	08 95       	ret

0000511c <update_sound>:

; Destroys: Z,r0,r1
; cycles: 212+
;****************************
update_sound:
	push r16
    511c:	0f 93       	push	r16
	push r17
    511e:	1f 93       	push	r17
	push r18
    5120:	2f 93       	push	r18
	push r28
    5122:	cf 93       	push	r28
	push r29
    5124:	df 93       	push	r29

	mov r18,ZL
    5126:	2e 2f       	mov	r18, r30

	;channel 1 
	lds r16,tr1_step_lo
    5128:	00 91 b9 0c 	lds	r16, 0x0CB9
	lds r17,tr1_pos_frac
    512c:	10 91 bb 0c 	lds	r17, 0x0CBB
	add	r17,r16	;add step to fractional part of sample pos
    5130:	10 0f       	add	r17, r16
	lds r16,tr1_step_hi	
    5132:	00 91 ba 0c 	lds	r16, 0x0CBA
	lds ZL,tr1_pos_lo
    5136:	e0 91 bc 0c 	lds	r30, 0x0CBC
	lds ZH,tr1_pos_hi 
    513a:	f0 91 bd 0c 	lds	r31, 0x0CBD
	adc ZL,r16	;add step to low byte of sample pos
    513e:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    5140:	04 91       	lpm	r16, Z
	sts tr1_pos_lo,ZL
    5142:	e0 93 bc 0c 	sts	0x0CBC, r30
	sts tr1_pos_frac,r17
    5146:	10 93 bb 0c 	sts	0x0CBB, r17
	lds r17,tr1_vol
    514a:	10 91 b8 0c 	lds	r17, 0x0CB8
	mulsu r16,r17;(sample*mixing vol)
    514e:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend	
    5150:	00 08       	sbc	r0, r0
	mov r28,r1	;set (sample*vol>>8) to mix buffer lsb
    5152:	c1 2d       	mov	r28, r1
	mov r29,r0	;set mix buffer msb	
    5154:	d0 2d       	mov	r29, r0
	nop
    5156:	00 00       	nop

;38
	
	;channel 2
	lds r16,tr2_step_lo
    5158:	00 91 bf 0c 	lds	r16, 0x0CBF
	lds r17,tr2_pos_frac
    515c:	10 91 c1 0c 	lds	r17, 0x0CC1
	add	r17,r16	;add step to fractional part of sample pos
    5160:	10 0f       	add	r17, r16
	lds r16,tr2_step_hi	
    5162:	00 91 c0 0c 	lds	r16, 0x0CC0
	lds ZL,tr2_pos_lo
    5166:	e0 91 c2 0c 	lds	r30, 0x0CC2
	lds ZH,tr2_pos_hi 
    516a:	f0 91 c3 0c 	lds	r31, 0x0CC3
	adc ZL,r16	;add step to low byte of sample pos
    516e:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    5170:	04 91       	lpm	r16, Z
	sts tr2_pos_lo,ZL
    5172:	e0 93 c2 0c 	sts	0x0CC2, r30
	sts tr2_pos_frac,r17
    5176:	10 93 c1 0c 	sts	0x0CC1, r17
	lds r17,tr2_vol
    517a:	10 91 be 0c 	lds	r17, 0x0CBE

	;*** Video sync update ***
	sbrc r18,0								;pre-eq/post-eq sync
    517e:	20 fd       	sbrc	r18, 0
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    5180:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,0								
    5182:	20 ff       	sbrs	r18, 0
	rjmp .
    5184:	00 c0       	rjmp	.+0      	; 0x5186 <update_sound+0x6a>
	;*************************

	mulsu r16,r17;(sample*mixing vol)
    5186:	01 03       	mulsu	r16, r17
	clr r0
    5188:	00 24       	eor	r0, r0
	sbc r0,r0	;sign extend
    518a:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    518c:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb		
    518e:	d0 1d       	adc	r29, r0
;70
	
	;channel 3
	lds r16,tr3_step_lo
    5190:	00 91 c5 0c 	lds	r16, 0x0CC5
	lds r17,tr3_pos_frac
    5194:	10 91 c7 0c 	lds	r17, 0x0CC7
	add	r17,r16				;add step to fractional part of sample pos
    5198:	10 0f       	add	r17, r16
	lds r16,tr3_step_hi	
    519a:	00 91 c6 0c 	lds	r16, 0x0CC6
	lds ZL,tr3_pos_lo
    519e:	e0 91 c8 0c 	lds	r30, 0x0CC8
	lds ZH,tr3_pos_hi 
    51a2:	f0 91 c9 0c 	lds	r31, 0x0CC9
	adc ZL,r16				;add step to low byte of sample pos
    51a6:	e0 1f       	adc	r30, r16
	lpm	r16,Z				;load sample
    51a8:	04 91       	lpm	r16, Z
	sts tr3_pos_lo,ZL
    51aa:	e0 93 c8 0c 	sts	0x0CC8, r30
	sts tr3_pos_frac,r17
    51ae:	10 93 c7 0c 	sts	0x0CC7, r17
	lds r17,tr3_vol
    51b2:	10 91 c4 0c 	lds	r17, 0x0CC4
	mulsu r16,r17			;(sample*mixing vol)
    51b6:	01 03       	mulsu	r16, r17
	sbc r0,r0				;sign extend
    51b8:	00 08       	sbc	r0, r0
	add r28,r1				;add (sample*vol>>8) to mix buffer lsb
    51ba:	c1 0d       	add	r28, r1
	adc r29,r0				;ajust mix buffer msb
    51bc:	d0 1d       	adc	r29, r0
;97	

	;channel 4 - 7/15 bit LFSR 
	lds r16,tr4_barrel_lo
    51be:	00 91 cc 0c 	lds	r16, 0x0CCC
	lds r17,tr4_barrel_hi
    51c2:	10 91 cd 0c 	lds	r17, 0x0CCD
	lds ZL,tr4_divider
    51c6:	e0 91 ce 0c 	lds	r30, 0x0CCE
	dec ZL	
    51ca:	ea 95       	dec	r30
	brpl ch4_no_shift	
    51cc:	92 f4       	brpl	.+36     	; 0x51f2 <ch4_no_shift>

	lds ZH,tr4_params
    51ce:	f0 91 cb 0c 	lds	r31, 0x0CCB
	mov ZL,ZH
    51d2:	ef 2f       	mov	r30, r31
	lsr ZL 			;keep bits7:1
    51d4:	e6 95       	lsr	r30

	mov r0,r16  ;copy barrel shifter
    51d6:	00 2e       	mov	r0, r16
	lsr r0
    51d8:	06 94       	lsr	r0
	eor r0,r16  ;xor bit0 and bit1
    51da:	00 26       	eor	r0, r16
	bst r0,0
    51dc:	00 fa       	bst	r0, 0
	lsr r17
    51de:	16 95       	lsr	r17
	ror r16
    51e0:	07 95       	ror	r16
	bld r17,6	;15 bits mode
    51e2:	16 f9       	bld	r17, 6
	sbrs ZH,0
    51e4:	f0 ff       	sbrs	r31, 0
	bld r16,6	;7 bits mode
    51e6:	06 f9       	bld	r16, 6

	sts tr4_barrel_lo,r16
    51e8:	00 93 cc 0c 	sts	0x0CCC, r16
	sts tr4_barrel_hi,r17
    51ec:	10 93 cd 0c 	sts	0x0CCD, r17

	rjmp ch4_end
    51f0:	03 c0       	rjmp	.+6      	; 0x51f8 <ch4_end>

000051f2 <ch4_no_shift>:
ch4_no_shift:
	;wait loop 21 cycles
	ldi r17,6
    51f2:	16 e0       	ldi	r17, 0x06	; 6
	dec r17
    51f4:	1a 95       	dec	r17
	brne .-4
    51f6:	f1 f7       	brne	.-4      	; 0x51f4 <ch4_no_shift+0x2>

000051f8 <ch4_end>:
	;rjmp .
ch4_end:

	sts tr4_divider,ZL
    51f8:	e0 93 ce 0c 	sts	0x0CCE, r30
	ldi r17,0x80 ;-128
    51fc:	10 e8       	ldi	r17, 0x80	; 128
	
	;*** Video sync update ***
	sbrc r18,1								;hsync
    51fe:	21 fd       	sbrc	r18, 1
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xF0
    5200:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,1								
    5202:	21 ff       	sbrs	r18, 1
	rjmp .
    5204:	00 c0       	rjmp	.+0      	; 0x5206 <ch4_end+0xe>
	;*************************
	
	sbrc r16,0
    5206:	00 fd       	sbrc	r16, 0
	ldi r17,0x7f ;+127
    5208:	1f e7       	ldi	r17, 0x7F	; 127
	
	lds r16,tr4_vol
    520a:	00 91 ca 0c 	lds	r16, 0x0CCA

	mulsu r17,r16;(sample*mixing vol)
    520e:	10 03       	mulsu	r17, r16
	sbc r0,r0	;sign extend
    5210:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    5212:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb
    5214:	d0 1d       	adc	r29, r0
;142
#if SOUND_CHANNEL_5_ENABLE==1
	;channel 5 PCM -- 45 cycles

	;add fractional part
	lds r16,tr5_pos_frac
    5216:	00 91 d3 0c 	lds	r16, 0x0CD3
	lds r17,tr5_step_lo 
    521a:	10 91 d1 0c 	lds	r17, 0x0CD1
	add r16,r17
    521e:	01 0f       	add	r16, r17
	sts tr5_pos_frac,r16
    5220:	00 93 d3 0c 	sts	0x0CD3, r16

	;add lo
	lds ZL,tr5_pos_lo
    5224:	e0 91 d4 0c 	lds	r30, 0x0CD4
	lds r17,tr5_step_hi 
    5228:	10 91 d2 0c 	lds	r17, 0x0CD2
	adc ZL,r17
    522c:	e1 1f       	adc	r30, r17

	;add hi
	lds ZH,tr5_pos_hi
    522e:	f0 91 d5 0c 	lds	r31, 0x0CD5
	ldi r16,0
    5232:	00 e0       	ldi	r16, 0x00	; 0
	adc ZH,r16
    5234:	f0 1f       	adc	r31, r16

	movw r16,ZL
    5236:	8f 01       	movw	r16, r30
	lds r0,tr5_loop_len_lo
    5238:	00 90 d6 0c 	lds	r0, 0x0CD6
	lds r1,tr5_loop_len_hi	
    523c:	10 90 d7 0c 	lds	r1, 0x0CD7
	sub r16,r0
    5240:	00 19       	sub	r16, r0
	sbc r17,r1
    5242:	11 09       	sbc	r17, r1
	lds r0,tr5_loop_end_lo
    5244:	00 90 d8 0c 	lds	r0, 0x0CD8
	lds r1,tr5_loop_end_hi
    5248:	10 90 d9 0c 	lds	r1, 0x0CD9

	cp ZL,r0
    524c:	e0 15       	cp	r30, r0
	cpc ZH,r1
    524e:	f1 05       	cpc	r31, r1
	brlo .+2
    5250:	08 f0       	brcs	.+2      	; 0x5254 <ch4_end+0x5c>
	movw ZL,r16
    5252:	f8 01       	movw	r30, r16

	sts tr5_pos_lo,ZL
    5254:	e0 93 d4 0c 	sts	0x0CD4, r30
	sts tr5_pos_hi,ZH
    5258:	f0 93 d5 0c 	sts	0x0CD5, r31

	lpm	r16,Z	;load sample
    525c:	04 91       	lpm	r16, Z
	lds r17,tr5_vol
    525e:	10 91 d0 0c 	lds	r17, 0x0CD0

	mulsu r16,r17;(sample*mixing vol)
    5262:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend
    5264:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    5266:	c1 0d       	add	r28, r1
	adc r29,r0	;adjust mix buffer msb	
    5268:	d0 1d       	adc	r29, r0
#endif
	
	;final processing

	;clip
	clr r0
    526a:	00 24       	eor	r0, r0
	cpi r28,128	;> 127?
    526c:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0	
    526e:	d0 05       	cpc	r29, r0
	brlt .+2
    5270:	0c f0       	brlt	.+2      	; 0x5274 <ch4_end+0x7c>
	ldi r28,127
    5272:	cf e7       	ldi	r28, 0x7F	; 127
	
	dec r0
    5274:	0a 94       	dec	r0
	cpi r28,-128; <-128?
    5276:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0xff
    5278:	d0 05       	cpc	r29, r0
	brge .+2
    527a:	0c f4       	brge	.+2      	; 0x527e <ch4_end+0x86>
	ldi r28,-128
    527c:	c0 e8       	ldi	r28, 0x80	; 128

	subi r28,128	;convert to unsigned		
    527e:	c0 58       	subi	r28, 0x80	; 128
	sts _SFR_MEM_ADDR(OCR2A),r28 ;output sound byte
    5280:	c0 93 b3 00 	sts	0x00B3, r28

00005284 <update_sound_end>:
#endif


update_sound_end:

	pop r29
    5284:	df 91       	pop	r29
	pop r28
    5286:	cf 91       	pop	r28
	pop r18
    5288:	2f 91       	pop	r18
	pop r17
    528a:	1f 91       	pop	r17
	pop r16
    528c:	0f 91       	pop	r16
	
	ret
    528e:	08 95       	ret

00005290 <SetSpritesTileTable>:
; C-callable
; r25:r24=pointer to sprites pixel data.
;*****************************
.section .text.SetSpritesTileTable
SetSpritesTileTable:
	sts sprites_tile_banks,r24
    5290:	80 93 8e 0c 	sts	0x0C8E, r24
	sts sprites_tile_banks+1,r25
    5294:	90 93 8f 0c 	sts	0x0C8F, r25
	ret
    5298:	08 95       	ret

0000529a <ClearVram>:
; C-callable
;************************************
.section .text.ClearVram
ClearVram:
	//init vram		
	ldi r30,lo8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    529a:	e0 e0       	ldi	r30, 0x00	; 0
	ldi r31,hi8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    529c:	f4 e0       	ldi	r31, 0x04	; 4

	ldi XL,lo8(vram)
    529e:	a0 e0       	ldi	r26, 0x00	; 0
	ldi XH,hi8(vram)
    52a0:	b1 e0       	ldi	r27, 0x01	; 1

	ldi r22,RAM_TILES_COUNT
    52a2:	6c e1       	ldi	r22, 0x1C	; 28

000052a4 <fill_vram_loop>:

fill_vram_loop:
	st X+,r22
    52a4:	6d 93       	st	X+, r22
	sbiw r30,1
    52a6:	31 97       	sbiw	r30, 0x01	; 1
	brne fill_vram_loop
    52a8:	e9 f7       	brne	.-6      	; 0x52a4 <fill_vram_loop>

	clr r1
    52aa:	11 24       	eor	r1, r1

	ret
    52ac:	08 95       	ret

000052ae <SetFont>:
; r22=Y pos (8 bit)
; r20=Font tile No (8 bit)
;************************************
.section .text.SetFont
SetFont:
	lds r21,font_tile_index
    52ae:	50 91 98 0c 	lds	r21, 0x0C98
	add r20,21
    52b2:	45 0f       	add	r20, r21
	rjmp SetTile	
    52b4:	00 c0       	rjmp	.+0      	; 0x52b6 <SetTile>

000052b6 <SetTile>:
.section .text.SetTile
SetTile:
#if SCROLLING == 1
	;index formula is vram[((y>>3)*256)+8x+(y&7)]
	
	andi r24,0x1f
    52b6:	8f 71       	andi	r24, 0x1F	; 31
	mov r23,r22
    52b8:	76 2f       	mov	r23, r22
	lsr r22
    52ba:	66 95       	lsr	r22
	lsr r22
    52bc:	66 95       	lsr	r22
	lsr r22			;y>>3
    52be:	66 95       	lsr	r22
	ldi r18,8		
    52c0:	28 e0       	ldi	r18, 0x08	; 8
	mul r24,r18		;x*8
    52c2:	82 9f       	mul	r24, r18
	movw XL,r0
    52c4:	d0 01       	movw	r26, r0
	subi XL,lo8(-(vram))
    52c6:	a0 50       	subi	r26, 0x00	; 0
	sbci XH,hi8(-(vram))
    52c8:	bf 4f       	sbci	r27, 0xFF	; 255
	add XH,r22		;vram+((y>>3)*256)
    52ca:	b6 0f       	add	r27, r22
	andi r23,7		;y&7	
    52cc:	77 70       	andi	r23, 0x07	; 7
	add XL,r23
    52ce:	a7 0f       	add	r26, r23
						
	subi r20,~(RAM_TILES_COUNT-1)	
    52d0:	44 5e       	subi	r20, 0xE4	; 228
	st X,r20
    52d2:	4c 93       	st	X, r20

	clr r1
    52d4:	11 24       	eor	r1, r1

	ret
    52d6:	08 95       	ret

000052d8 <SetFontTilesIndex>:
; C-callable
; r24=First font tile index in tile table (8 bit)
;************************************
.section .text.SetFontTilesIndex
	SetFontTilesIndex:
	sts font_tile_index,r24
    52d8:	80 93 98 0c 	sts	0x0C98, r24
	ret
    52dc:	08 95       	ret

000052de <SetTileTable>:
; C-callable
; r25:r24=pointer to tiles data
;************************************
.section .text.SetTileTable
SetTileTable:
	sts tile_table_lo,r24
    52de:	80 93 96 0c 	sts	0x0C96, r24
	sts tile_table_hi,r25	
    52e2:	90 93 97 0c 	sts	0x0C97, r25
	ret
    52e6:	08 95       	ret

000052e8 <GetVsyncFlag>:
;
; C-callable
;************************************
.section .text.GetVsyncFlag
GetVsyncFlag:
	lds r24,sync_flags
    52e8:	80 91 a2 0c 	lds	r24, 0x0CA2
	andi r24,SYNC_FLAG_VSYNC
    52ec:	81 70       	andi	r24, 0x01	; 1
	ret
    52ee:	08 95       	ret

000052f0 <ClearVsyncFlag>:
; 
; C-callable
;*****************************
.section .text.ClearVsyncFlag
ClearVsyncFlag:
	lds r18,sync_flags
    52f0:	20 91 a2 0c 	lds	r18, 0x0CA2
	andi r18,~SYNC_FLAG_VSYNC
    52f4:	2e 7f       	andi	r18, 0xFE	; 254
	sts sync_flags,r18
    52f6:	20 93 a2 0c 	sts	0x0CA2, r18
	ret
    52fa:	08 95       	ret

000052fc <ReadJoypad>:
; r24=joypad No (0 or 1)
; returns: (int) r25:r24
;*****************************
.section .text.ReadJoypad
ReadJoypad:	
	tst r24
    52fc:	88 23       	and	r24, r24
	brne rj_p2
    52fe:	29 f4       	brne	.+10     	; 0x530a <rj_p2>
		
	lds r24,joypad1_status_lo
    5300:	80 91 a9 0c 	lds	r24, 0x0CA9
	lds r25,joypad1_status_lo+1
    5304:	90 91 aa 0c 	lds	r25, 0x0CAA
	ret
    5308:	08 95       	ret

0000530a <rj_p2>:
rj_p2:
	lds r24,joypad2_status_lo
    530a:	80 91 ad 0c 	lds	r24, 0x0CAD
	lds r25,joypad2_status_lo+1	
    530e:	90 91 ae 0c 	lds	r25, 0x0CAE

	ret
    5312:	08 95       	ret

00005314 <WaitUs>:
; r25:r24 - us to wait
; returns: void
;****************************
.section .text.WaitUs
WaitUs:	
	ldi r23,8
    5314:	78 e0       	ldi	r23, 0x08	; 8
	dec 23
    5316:	7a 95       	dec	r23
	brne .-4 ;~1 us
    5318:	f1 f7       	brne	.-4      	; 0x5316 <WaitUs+0x2>
	nop
    531a:	00 00       	nop
	sbiw r24,1
    531c:	01 97       	sbiw	r24, 0x01	; 1
	brne WaitUs
    531e:	d1 f7       	brne	.-12     	; 0x5314 <WaitUs>

	ret
    5320:	08 95       	ret

00005322 <WriteEeprom>:
;****************************

.section .text.WriteEeprom
WriteEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    5322:	f9 99       	sbic	0x1f, 1	; 31
   rjmp WriteEeprom
    5324:	fe cf       	rjmp	.-4      	; 0x5322 <WriteEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    5326:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    5328:	81 bd       	out	0x21, r24	; 33
   ; Write data (r22) to Data Register
   out _SFR_IO_ADDR(EEDR),r22
    532a:	60 bd       	out	0x20, r22	; 32
   cli
    532c:	f8 94       	cli
   ; Write logical one to EEMPE
   sbi _SFR_IO_ADDR(EECR),EEMPE
    532e:	fa 9a       	sbi	0x1f, 2	; 31
   ; Start eeprom write by setting EEPE
   sbi _SFR_IO_ADDR(EECR),EEPE
    5330:	f9 9a       	sbi	0x1f, 1	; 31
   sei
    5332:	78 94       	sei
   ret
    5334:	08 95       	ret

00005336 <ReadEeprom>:
; r24 - value read
;****************************
.section .text.ReadEeprom
ReadEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    5336:	f9 99       	sbic	0x1f, 1	; 31
   rjmp ReadEeprom
    5338:	fe cf       	rjmp	.-4      	; 0x5336 <ReadEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    533a:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    533c:	81 bd       	out	0x21, r24	; 33
   ; Start eeprom read by writing EERE
   cli
    533e:	f8 94       	cli
   sbi _SFR_IO_ADDR(EECR),EERE
    5340:	f8 9a       	sbi	0x1f, 0	; 31
   ; Read data from Data Register
   in r24,_SFR_IO_ADDR(EEDR)
    5342:	80 b5       	in	r24, 0x20	; 32
   sei
    5344:	78 94       	sei
   ret
    5346:	08 95       	ret

00005348 <wdt_randomize>:
	.global wdt_randomize
	.section .text.wdt_randomize
	wdt_randomize:

		;set timer 1 full speed count to 0xffff
		ldi r24,0
    5348:	80 e0       	ldi	r24, 0x00	; 0
		sts sync_pulse,r24
    534a:	80 93 a1 0c 	sts	0x0CA1, r24


		sts _SFR_MEM_ADDR(TIMSK1),r24
    534e:	80 93 6f 00 	sts	0x006F, r24
		sts _SFR_MEM_ADDR(OCR1AL),r24
    5352:	80 93 88 00 	sts	0x0088, r24
		sts _SFR_MEM_ADDR(OCR1AH),r24
    5356:	80 93 89 00 	sts	0x0089, r24
		sts _SFR_MEM_ADDR(OCR1BL),r24
    535a:	80 93 8a 00 	sts	0x008A, r24
		sts _SFR_MEM_ADDR(OCR1BH),r24
    535e:	80 93 8b 00 	sts	0x008B, r24
		sts _SFR_MEM_ADDR(TCNT1H),r24
    5362:	80 93 85 00 	sts	0x0085, r24
		sts _SFR_MEM_ADDR(TCNT1L),r24
    5366:	80 93 84 00 	sts	0x0084, r24
		
		sts _SFR_MEM_ADDR(TCCR1A),r24	
    536a:	80 93 80 00 	sts	0x0080, r24
		ldi 24,(1<<CS10)
    536e:	81 e0       	ldi	r24, 0x01	; 1
		sts _SFR_MEM_ADDR(TCCR1B),r24
    5370:	80 93 81 00 	sts	0x0081, r24

		cli
    5374:	f8 94       	cli

		;enable watchdog at fastest speed and generate interrupts
		ldi r24,0
    5376:	80 e0       	ldi	r24, 0x00	; 0
		sts _SFR_MEM_ADDR(MCUSR),r24	
    5378:	80 93 54 00 	sts	0x0054, r24
		ldi r25,(1<<WDIE)+(1<<WDE)+(0<<WDP3)+(0<<WDP2)+(0<<WDP1)+(0<<WDP0)
    537c:	98 e4       	ldi	r25, 0x48	; 72
		lds r24,_SFR_MEM_ADDR(WDTCSR)
    537e:	80 91 60 00 	lds	r24, 0x0060
		ori r24,(1<<WDCE)+(1<<WDE)
    5382:	88 61       	ori	r24, 0x18	; 24
		sts _SFR_MEM_ADDR(WDTCSR),r24
    5384:	80 93 60 00 	sts	0x0060, r24
		sts _SFR_MEM_ADDR(WDTCSR),r25
    5388:	90 93 60 00 	sts	0x0060, r25
	
		sei
    538c:	78 94       	sei

0000538e <wait>:

		;generate 8 random cycles
	wait:
		lds r24,sync_pulse ;using the yet unalocated "sync_pulse" as a temp variable
    538e:	80 91 a1 0c 	lds	r24, 0x0CA1
		cpi r24,8
    5392:	88 30       	cpi	r24, 0x08	; 8
		brlo wait
    5394:	e0 f3       	brcs	.-8      	; 0x538e <wait>

		ret
    5396:	08 95       	ret

00005398 <__vector_8>:
	;*************************************
	; Watchdog timer interrupt
	;*************************************
	WDT_vect:
		;save flags & status register
		push r16
    5398:	0f 93       	push	r16
		push r17
    539a:	1f 93       	push	r17

		in r16,_SFR_IO_ADDR(SREG)
    539c:	0f b7       	in	r16, 0x3f	; 63
		push r16
    539e:	0f 93       	push	r16

		lds r16,sync_pulse
    53a0:	00 91 a1 0c 	lds	r16, 0x0CA1
		inc r16
    53a4:	03 95       	inc	r16
		sts sync_pulse,r16
    53a6:	00 93 a1 0c 	sts	0x0CA1, r16

		;XOR succesive timer1 LSB into a int
		sbrc r16,0
    53aa:	00 fd       	sbrc	r16, 0
		rjmp 1f
    53ac:	08 c0       	rjmp	.+16     	; 0x53be <__vector_8+0x26>
		lds r17,random_value
    53ae:	10 91 b3 0c 	lds	r17, 0x0CB3
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    53b2:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    53b6:	10 27       	eor	r17, r16
		sts random_value,r17
    53b8:	10 93 b3 0c 	sts	0x0CB3, r17
		rjmp 2f
    53bc:	07 c0       	rjmp	.+14     	; 0x53cc <__vector_8+0x34>
	1:
		lds r17,random_value+1
    53be:	10 91 b4 0c 	lds	r17, 0x0CB4
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    53c2:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    53c6:	10 27       	eor	r17, r16
		sts random_value+1,r17
    53c8:	10 93 b4 0c 	sts	0x0CB4, r17
	2:

		ldi r16,(1<<WDIE)+(1<<WDE)
    53cc:	08 e4       	ldi	r16, 0x48	; 72
		sts _SFR_MEM_ADDR(WDTCSR),r16
    53ce:	00 93 60 00 	sts	0x0060, r16

		;restore flags
		pop r16
    53d2:	0f 91       	pop	r16
		out _SFR_IO_ADDR(SREG),r16
    53d4:	0f bf       	out	0x3f, r16	; 63
	
		pop r17
    53d6:	1f 91       	pop	r17
		pop r16
    53d8:	0f 91       	pop	r16
		reti
    53da:	18 95       	reti

000053dc <SoftReset>:

/**
 * Performs a software reset
 */
void SoftReset(void){        
	wdt_enable(WDTO_15MS);  
    53dc:	98 e0       	ldi	r25, 0x08	; 8
    53de:	88 e1       	ldi	r24, 0x18	; 24
    53e0:	0f b6       	in	r0, 0x3f	; 63
    53e2:	f8 94       	cli
    53e4:	a8 95       	wdr
    53e6:	80 93 60 00 	sts	0x0060, r24
    53ea:	0f be       	out	0x3f, r0	; 63
    53ec:	90 93 60 00 	sts	0x0060, r25
	while(1);
    53f0:	ff cf       	rjmp	.-2      	; 0x53f0 <SoftReset+0x14>

000053f2 <ReadButtons>:
void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
	unsigned char i;

	//latch controllers
	JOYPAD_OUT_PORT|=_BV(JOYPAD_LATCH_PIN);
    53f2:	12 9a       	sbi	0x02, 2	; 2
		}else{
			Wait200ns();
			Wait200ns();
		}	
	#else
		Wait200ns();
    53f4:	c8 95       	lpm
    53f6:	c8 95       	lpm
		Wait200ns();
    53f8:	c8 95       	lpm
    53fa:	c8 95       	lpm
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));
    53fc:	12 98       	cbi	0x02, 2	; 2
    53fe:	40 e1       	ldi	r20, 0x10	; 16
	DisplayLogo();
	
}

void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
    5400:	80 e0       	ldi	r24, 0x00	; 0
    5402:	90 e0       	ldi	r25, 0x00	; 0
    5404:	20 e0       	ldi	r18, 0x00	; 0
    5406:	30 e0       	ldi	r19, 0x00	; 0


	//read button states
	for(i=0;i<16;i++){

		p1ButtonsLo>>=1;
    5408:	36 95       	lsr	r19
    540a:	27 95       	ror	r18
		p2ButtonsLo>>=1;
    540c:	96 95       	lsr	r25
    540e:	87 95       	ror	r24
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    5410:	c8 95       	lpm
    5412:	c8 95       	lpm
			Wait200ns();
    5414:	c8 95       	lpm
    5416:	c8 95       	lpm
		#endif
			
		//pulse clock pin		
		JOYPAD_OUT_PORT&=~(_BV(JOYPAD_CLOCK_PIN));
    5418:	13 98       	cbi	0x02, 3	; 2
		
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) p1ButtonsLo|=(1<<15);
    541a:	00 9b       	sbis	0x00, 0	; 0
    541c:	30 68       	ori	r19, 0x80	; 128
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) p2ButtonsLo|=(1<<15);
    541e:	01 9b       	sbis	0x00, 1	; 0
    5420:	90 68       	ori	r25, 0x80	; 128
		
		JOYPAD_OUT_PORT|=_BV(JOYPAD_CLOCK_PIN);
    5422:	13 9a       	sbi	0x02, 3	; 2
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    5424:	c8 95       	lpm
    5426:	c8 95       	lpm
			Wait200ns();
    5428:	c8 95       	lpm
    542a:	c8 95       	lpm
    542c:	41 50       	subi	r20, 0x01	; 1
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));


	//read button states
	for(i=0;i<16;i++){
    542e:	61 f7       	brne	.-40     	; 0x5408 <ReadButtons+0x16>
		#endif

	}

	#if JOYSTICK==TYPE_SNES
		joypad1_status_lo=p1ButtonsLo;
    5430:	30 93 aa 0c 	sts	0x0CAA, r19
    5434:	20 93 a9 0c 	sts	0x0CA9, r18
		joypad2_status_lo=p2ButtonsLo;
    5438:	90 93 ae 0c 	sts	0x0CAE, r25
    543c:	80 93 ad 0c 	sts	0x0CAD, r24
	#else
		joypad1_status_lo=p1ButtonsLo&0xff;
		joypad2_status_lo=p2ButtonsLo&0xff;	
	#endif

	if(joypad1_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B) || joypad2_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B)){
    5440:	80 91 a9 0c 	lds	r24, 0x0CA9
    5444:	90 91 aa 0c 	lds	r25, 0x0CAA
    5448:	0f 97       	sbiw	r24, 0x0f	; 15
    544a:	31 f0       	breq	.+12     	; 0x5458 <ReadButtons+0x66>
    544c:	80 91 ad 0c 	lds	r24, 0x0CAD
    5450:	90 91 ae 0c 	lds	r25, 0x0CAE
    5454:	0f 97       	sbiw	r24, 0x0f	; 15
    5456:	11 f4       	brne	.+4      	; 0x545c <ReadButtons+0x6a>
		SoftReset();
    5458:	0e 94 ee 29 	call	0x53dc	; 0x53dc <SoftReset>
    545c:	08 95       	ret

0000545e <ReadControllers>:
 * program when CONTROLLERS_VSYNC_READ==0.
*/
void ReadControllers(){

	//Detect if devices are connected.
	joypadsConnectionStatus=0;
    545e:	10 92 e4 0c 	sts	0x0CE4, r1
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) joypadsConnectionStatus|=1;
    5462:	00 99       	sbic	0x00, 0	; 0
    5464:	03 c0       	rjmp	.+6      	; 0x546c <ReadControllers+0xe>
    5466:	81 e0       	ldi	r24, 0x01	; 1
    5468:	80 93 e4 0c 	sts	0x0CE4, r24
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) joypadsConnectionStatus|=2;
    546c:	01 99       	sbic	0x00, 1	; 0
    546e:	05 c0       	rjmp	.+10     	; 0x547a <ReadControllers+0x1c>
    5470:	80 91 e4 0c 	lds	r24, 0x0CE4
    5474:	82 60       	ori	r24, 0x02	; 2
    5476:	80 93 e4 0c 	sts	0x0CE4, r24
			
	//read the standard buttons
	ReadButtons();
    547a:	0c 94 f9 29 	jmp	0x53f2	; 0x53f2 <ReadButtons>

0000547e <FormatEeprom>:
	return resp;
}

	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {
    547e:	cf 93       	push	r28
    5480:	df 93       	push	r29
    5482:	c0 e0       	ldi	r28, 0x00	; 0
    5484:	d0 e0       	ldi	r29, 0x00	; 0
    5486:	fe 01       	movw	r30, r28
    5488:	e4 55       	subi	r30, 0x54	; 84
    548a:	ff 4f       	sbci	r31, 0xFF	; 255

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
    548c:	64 91       	lpm	r22, Z
    548e:	ce 01       	movw	r24, r28
    5490:	0e 94 91 29 	call	0x5322	; 0x5322 <WriteEeprom>
    5494:	21 96       	adiw	r28, 0x01	; 1
	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
    5496:	c0 32       	cpi	r28, 0x20	; 32
    5498:	d1 05       	cpc	r29, r1
    549a:	a9 f7       	brne	.-22     	; 0x5486 <FormatEeprom+0x8>
    549c:	c0 e2       	ldi	r28, 0x20	; 32
    549e:	d0 e0       	ldi	r29, 0x00	; 0
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
    54a0:	6f ef       	ldi	r22, 0xFF	; 255
    54a2:	ce 01       	movw	r24, r28
    54a4:	0e 94 91 29 	call	0x5322	; 0x5322 <WriteEeprom>
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
    54a8:	6f ef       	ldi	r22, 0xFF	; 255
    54aa:	ce 01       	movw	r24, r28
    54ac:	01 96       	adiw	r24, 0x01	; 1
    54ae:	0e 94 91 29 	call	0x5322	; 0x5322 <WriteEeprom>
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
    54b2:	a0 96       	adiw	r28, 0x20	; 32
    54b4:	c1 15       	cp	r28, r1
    54b6:	88 e0       	ldi	r24, 0x08	; 8
    54b8:	d8 07       	cpc	r29, r24
    54ba:	91 f7       	brne	.-28     	; 0x54a0 <FormatEeprom+0x22>
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
   }
   
}
    54bc:	df 91       	pop	r29
    54be:	cf 91       	pop	r28
    54c0:	08 95       	ret

000054c2 <isEepromFormatted>:
	  }
   }
}
	
//returns true if the EEPROM has been setup to work with the kernel.
bool isEepromFormatted(){
    54c2:	cf 93       	push	r28
	unsigned id;
	id=ReadEeprom(0)+(ReadEeprom(1)<<8);
    54c4:	80 e0       	ldi	r24, 0x00	; 0
    54c6:	90 e0       	ldi	r25, 0x00	; 0
    54c8:	0e 94 9b 29 	call	0x5336	; 0x5336 <ReadEeprom>
    54cc:	c8 2f       	mov	r28, r24
    54ce:	81 e0       	ldi	r24, 0x01	; 1
    54d0:	90 e0       	ldi	r25, 0x00	; 0
    54d2:	0e 94 9b 29 	call	0x5336	; 0x5336 <ReadEeprom>
    54d6:	28 2f       	mov	r18, r24
    54d8:	30 e0       	ldi	r19, 0x00	; 0
    54da:	32 2f       	mov	r19, r18
    54dc:	22 27       	eor	r18, r18
    54de:	2c 0f       	add	r18, r28
    54e0:	31 1d       	adc	r19, r1
	return (id==EEPROM_SIGNATURE);
    54e2:	81 e0       	ldi	r24, 0x01	; 1
    54e4:	2a 35       	cpi	r18, 0x5A	; 90
    54e6:	35 45       	sbci	r19, 0x55	; 85
    54e8:	09 f0       	breq	.+2      	; 0x54ec <isEepromFormatted+0x2a>
    54ea:	80 e0       	ldi	r24, 0x00	; 0
}
    54ec:	cf 91       	pop	r28
    54ee:	08 95       	ret

000054f0 <PatchCommand00>:
/*
 * Command 00: Set envelope speed per frame +127/-128, 0=no enveloppe
 * Param:
 */
void PatchCommand00(Track* track, char param){
	track->envelopeStep=param;
    54f0:	fc 01       	movw	r30, r24
    54f2:	67 87       	std	Z+15, r22	; 0x0f
    54f4:	08 95       	ret

000054f6 <PatchCommand01>:
 * Param:
 */
void PatchCommand01(Track* track, char param){
	(void)track; //to remove unused warning
	#if MIXER_CHAN4_TYPE == 0
		mixer.channels.type.noise.barrel=0x0101;
    54f6:	e8 eb       	ldi	r30, 0xB8	; 184
    54f8:	fc e0       	ldi	r31, 0x0C	; 12
    54fa:	81 e0       	ldi	r24, 0x01	; 1
    54fc:	91 e0       	ldi	r25, 0x01	; 1
    54fe:	95 8b       	std	Z+21, r25	; 0x15
    5500:	84 8b       	std	Z+20, r24	; 0x14
		mixer.channels.type.noise.params=param;
    5502:	63 8b       	std	Z+19, r22	; 0x13
    5504:	08 95       	ret

00005506 <PatchCommand05>:
}
/*
 * Command 05: End of note/fx
 * Param:
 */
void PatchCommand05(Track* track, char param){
    5506:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags&=~(TRACK_FLAGS_PLAYING+TRACK_FLAGS_PRIORITY);	//patchPlaying=false,priority=0	
    5508:	90 81       	ld	r25, Z
    550a:	9f 75       	andi	r25, 0x5F	; 95
    550c:	90 83       	st	Z, r25
    550e:	08 95       	ret

00005510 <PatchCommand06>:

/*
 * Command 06: Note hold
 * Param:
 */
void PatchCommand06(Track* track, char param){
    5510:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags|=TRACK_FLAGS_HOLD_ENV; //patchEnvelopeHold=true;
    5512:	90 81       	ld	r25, Z
    5514:	90 64       	ori	r25, 0x40	; 64
    5516:	90 83       	st	Z, r25
    5518:	08 95       	ret

0000551a <PatchCommand07>:
 * Command 07: Set envelope volume
 * Param:
 */

void PatchCommand07(Track* track, char param){
	track->envelopeVol=param;
    551a:	fc 01       	movw	r30, r24
    551c:	66 87       	std	Z+14, r22	; 0x0e
    551e:	08 95       	ret

00005520 <PatchCommand09>:
 * Command 09: Set tremolo level
 * Param:
*/

void PatchCommand09(Track* track, char param){
	track->tremoloLevel=param;
    5520:	fc 01       	movw	r30, r24
    5522:	62 87       	std	Z+10, r22	; 0x0a
    5524:	08 95       	ret

00005526 <PatchCommand10>:
/*
 * Command 10: Set tremolo rate
 * Param:
*/
void PatchCommand10(Track* track, char param){
	track->tremoloRate=param;
    5526:	fc 01       	movw	r30, r24
    5528:	63 87       	std	Z+11, r22	; 0x0b
    552a:	08 95       	ret

0000552c <PatchCommand11>:
/*
 * Command 11: Pitch slide (linear) 
 * Param: (+/-) half steps to slide to
*/

void PatchCommand11(Track* track, char param){
    552c:	cf 93       	push	r28
    552e:	df 93       	push	r29
    5530:	ec 01       	movw	r28, r24
    5532:	46 2f       	mov	r20, r22
	//slide to note from current note
	s16 currentStep,targetStep,delta;	
	
	currentStep=pgm_read_word(&(steptable[track->note]));
    5534:	29 81       	ldd	r18, Y+1	; 0x01
    5536:	30 e0       	ldi	r19, 0x00	; 0
    5538:	f9 01       	movw	r30, r18
    553a:	ee 0f       	add	r30, r30
    553c:	ff 1f       	adc	r31, r31
    553e:	e8 5f       	subi	r30, 0xF8	; 248
    5540:	f1 4a       	sbci	r31, 0xA1	; 161
    5542:	65 91       	lpm	r22, Z+
    5544:	74 91       	lpm	r23, Z
	targetStep=pgm_read_word(&(steptable[track->note+param]));	
    5546:	f9 01       	movw	r30, r18
    5548:	e4 0f       	add	r30, r20
    554a:	f1 1d       	adc	r31, r1
    554c:	47 fd       	sbrc	r20, 7
    554e:	fa 95       	dec	r31
    5550:	ee 0f       	add	r30, r30
    5552:	ff 1f       	adc	r31, r31
    5554:	e8 5f       	subi	r30, 0xF8	; 248
    5556:	f1 4a       	sbci	r31, 0xA1	; 161
    5558:	85 91       	lpm	r24, Z+
    555a:	94 91       	lpm	r25, Z
	delta=((targetStep-currentStep)/track->slideSpeed);
    555c:	86 1b       	sub	r24, r22
    555e:	97 0b       	sbc	r25, r23
    5560:	68 85       	ldd	r22, Y+8	; 0x08
    5562:	70 e0       	ldi	r23, 0x00	; 0
    5564:	0e 94 94 41 	call	0x8328	; 0x8328 <__divmodhi4>
	if(delta==0)delta++;
    5568:	61 15       	cp	r22, r1
    556a:	71 05       	cpc	r23, r1
    556c:	11 f4       	brne	.+4      	; 0x5572 <PatchCommand11+0x46>
    556e:	61 e0       	ldi	r22, 0x01	; 1
    5570:	70 e0       	ldi	r23, 0x00	; 0

	mixer.channels.all[track->channel].step+=delta;
    5572:	ea 81       	ldd	r30, Y+2	; 0x02
    5574:	86 e0       	ldi	r24, 0x06	; 6
    5576:	e8 9f       	mul	r30, r24
    5578:	f0 01       	movw	r30, r0
    557a:	11 24       	eor	r1, r1
    557c:	e8 54       	subi	r30, 0x48	; 72
    557e:	f3 4f       	sbci	r31, 0xF3	; 243
    5580:	81 81       	ldd	r24, Z+1	; 0x01
    5582:	92 81       	ldd	r25, Z+2	; 0x02
    5584:	86 0f       	add	r24, r22
    5586:	97 1f       	adc	r25, r23
    5588:	92 83       	std	Z+2, r25	; 0x02
    558a:	81 83       	std	Z+1, r24	; 0x01
	
	track->slideStep=delta;
    558c:	7e 83       	std	Y+6, r23	; 0x06
    558e:	6d 83       	std	Y+5, r22	; 0x05
	track->flags|=TRACK_FLAGS_SLIDING;
    5590:	88 81       	ld	r24, Y
    5592:	88 60       	ori	r24, 0x08	; 8
    5594:	88 83       	st	Y, r24
	track->slideNote=track->note+param;
    5596:	89 81       	ldd	r24, Y+1	; 0x01
    5598:	48 0f       	add	r20, r24
    559a:	4f 83       	std	Y+7, r20	; 0x07
}
    559c:	df 91       	pop	r29
    559e:	cf 91       	pop	r28
    55a0:	08 95       	ret

000055a2 <PatchCommand12>:
/*
 * Command 12: Pitch slide speed 
 * Param: slide speed (fixed 4:4)
 */
void PatchCommand12(Track* track, char param){
	track->slideSpeed=param;
    55a2:	fc 01       	movw	r30, r24
    55a4:	60 87       	std	Z+8, r22	; 0x08
    55a6:	08 95       	ret

000055a8 <PatchCommand13>:
 *  Command 13: Loop start
 * Description: Defines the start of a loop. Works in conjunction with command 14 (PC_LOOP_END).
 *		 Param: loop count
 */
void PatchCommand13(Track* track, char param){
	track->loopCount=(u8)param;
    55a8:	fc 01       	movw	r30, r24
    55aa:	64 83       	std	Z+4, r22	; 0x04
    55ac:	08 95       	ret

000055ae <PatchCommand02>:
/*
 * Command 02: Set wave
 * Param:
 */
void PatchCommand02(Track* track, char param){
	SetMixerWave(track->channel,param);
    55ae:	fc 01       	movw	r30, r24
    55b0:	82 81       	ldd	r24, Z+2	; 0x02
    55b2:	0c 94 bb 2e 	jmp	0x5d76	; 0x5d76 <SetMixerWave>

000055b6 <PatchCommand03>:
}
/*
 * Command 03: Note up * param
 * Param:
 */
void PatchCommand03(Track* track, char param){
    55b6:	fc 01       	movw	r30, r24
	track->note+=param;
    55b8:	91 81       	ldd	r25, Z+1	; 0x01
    55ba:	69 0f       	add	r22, r25
    55bc:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(track->channel,track->note);
    55be:	82 81       	ldd	r24, Z+2	; 0x02
    55c0:	0c 94 a4 2e 	jmp	0x5d48	; 0x5d48 <SetMixerNote>

000055c4 <PatchCommand04>:
}
/*
 * Command 04: Note down * param
 * Param:
 */
void PatchCommand04(Track* track, char param){
    55c4:	fc 01       	movw	r30, r24
	track->note-=param;
    55c6:	91 81       	ldd	r25, Z+1	; 0x01
    55c8:	96 1b       	sub	r25, r22
    55ca:	69 2f       	mov	r22, r25
    55cc:	91 83       	std	Z+1, r25	; 0x01
	SetMixerNote(track->channel,track->note);
    55ce:	82 81       	ldd	r24, Z+2	; 0x02
    55d0:	0c 94 a4 2e 	jmp	0x5d48	; 0x5d48 <SetMixerNote>

000055d4 <PatchCommand08>:
/*
 * Command 08: Set Note/Pitch
 * Param:
 */

void PatchCommand08(Track* track, char param){
    55d4:	1f 93       	push	r17
    55d6:	cf 93       	push	r28
    55d8:	df 93       	push	r29
    55da:	ec 01       	movw	r28, r24
    55dc:	16 2f       	mov	r17, r22
	SetMixerNote(track->channel,param);
    55de:	8a 81       	ldd	r24, Y+2	; 0x02
    55e0:	0e 94 a4 2e 	call	0x5d48	; 0x5d48 <SetMixerNote>
	track->note=param;
    55e4:	19 83       	std	Y+1, r17	; 0x01
	track->flags &= ~(TRACK_FLAGS_SLIDING);	
    55e6:	88 81       	ld	r24, Y
    55e8:	87 7f       	andi	r24, 0xF7	; 247
    55ea:	88 83       	st	Y, r24
}
    55ec:	df 91       	pop	r29
    55ee:	cf 91       	pop	r28
    55f0:	1f 91       	pop	r17
    55f2:	08 95       	ret

000055f4 <PatchCommand14>:
 *					1,PC_NOTE_DOWN,3,
 *					0,PC_LOOP_END,2,
 *					0,PATCH_END  
 *				};
 */
void PatchCommand14(Track* track, char param){
    55f4:	dc 01       	movw	r26, r24
	if(track->loopCount>0){
    55f6:	14 96       	adiw	r26, 0x04	; 4
    55f8:	8c 91       	ld	r24, X
    55fa:	14 97       	sbiw	r26, 0x04	; 4
    55fc:	88 23       	and	r24, r24
    55fe:	19 f1       	breq	.+70     	; 0x5646 <PatchCommand14+0x52>
    5600:	55 96       	adiw	r26, 0x15	; 21
    5602:	2d 91       	ld	r18, X+
    5604:	3c 91       	ld	r19, X
    5606:	56 97       	sbiw	r26, 0x16	; 22
		//track->patchCommandStreamPos=track->loopStart;
		if(param!=0){
    5608:	66 23       	and	r22, r22
    560a:	79 f0       	breq	.+30     	; 0x562a <PatchCommand14+0x36>
			track->patchCommandStreamPos-=((param+1)*3);
    560c:	77 27       	eor	r23, r23
    560e:	67 fd       	sbrc	r22, 7
    5610:	70 95       	com	r23
    5612:	6f 5f       	subi	r22, 0xFF	; 255
    5614:	7f 4f       	sbci	r23, 0xFF	; 255
    5616:	ab 01       	movw	r20, r22
    5618:	44 0f       	add	r20, r20
    561a:	55 1f       	adc	r21, r21
    561c:	64 0f       	add	r22, r20
    561e:	75 1f       	adc	r23, r21
    5620:	26 1b       	sub	r18, r22
    5622:	37 0b       	sbc	r19, r23
    5624:	09 c0       	rjmp	.+18     	; 0x5638 <PatchCommand14+0x44>
			while(1){
				track->patchCommandStreamPos-=3;
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    5626:	ef 3f       	cpi	r30, 0xFF	; 255
    5628:	39 f0       	breq	.+14     	; 0x5638 <PatchCommand14+0x44>
		if(param!=0){
			track->patchCommandStreamPos-=((param+1)*3);
		}else{
			u8 command;
			while(1){
				track->patchCommandStreamPos-=3;
    562a:	23 50       	subi	r18, 0x03	; 3
    562c:	31 09       	sbc	r19, r1
    562e:	f9 01       	movw	r30, r18
    5630:	32 97       	sbiw	r30, 0x02	; 2
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
    5632:	e4 91       	lpm	r30, Z
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    5634:	ed 30       	cpi	r30, 0x0D	; 13
    5636:	b9 f7       	brne	.-18     	; 0x5626 <PatchCommand14+0x32>
    5638:	56 96       	adiw	r26, 0x16	; 22
    563a:	3c 93       	st	X, r19
    563c:	2e 93       	st	-X, r18
    563e:	55 97       	sbiw	r26, 0x15	; 21
			}
		}
		track->loopCount--;
    5640:	81 50       	subi	r24, 0x01	; 1
    5642:	14 96       	adiw	r26, 0x04	; 4
    5644:	8c 93       	st	X, r24
    5646:	08 95       	ret

00005648 <InitMusicPlayer>:

const Patch *patchPointers;

void InitMusicPlayer(const Patch *patchPointersParam){

	patchPointers=patchPointersParam;
    5648:	90 93 5d 0d 	sts	0x0D5D, r25
    564c:	80 93 5c 0d 	sts	0x0D5C, r24

	masterVolume=DEFAULT_MASTER_VOL;
    5650:	8f e6       	ldi	r24, 0x6F	; 111
    5652:	80 93 5f 0d 	sts	0x0D5F, r24
#if MIDI_IN == ENABLED
	InitUartRxBuffer();
	lastMidiInStatus=0;
#endif

	playSong=false;
    5656:	10 92 b6 0c 	sts	0x0CB6, r1
    565a:	e7 ef       	ldi	r30, 0xF7	; 247
    565c:	fc e0       	ldi	r31, 0x0C	; 12

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    565e:	80 e0       	ldi	r24, 0x00	; 0
		tracks[t].channel=t;
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    5660:	90 e1       	ldi	r25, 0x10	; 16
		tracks[t].noteVol=0;
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    5662:	3f ef       	ldi	r19, 0xFF	; 255
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
    5664:	28 e1       	ldi	r18, 0x18	; 24
    5666:	df 01       	movw	r26, r30
    5668:	1e 97       	sbiw	r26, 0x0e	; 14

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].channel=t;
    566a:	8c 93       	st	X, r24
    566c:	12 97       	sbiw	r26, 0x02	; 2
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    566e:	9c 93       	st	X, r25
    5670:	1d 96       	adiw	r26, 0x0d	; 13
		tracks[t].noteVol=0;
    5672:	1c 92       	st	X, r1
    5674:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    5676:	3c 93       	st	X, r19
		tracks[t].patchNo=DEFAULT_PATCH;
    5678:	10 82       	st	Z, r1
    567a:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].tremoloRate=24; //~6hz
    567c:	2c 93       	st	X, r18
    567e:	13 97       	sbiw	r26, 0x03	; 3
		tracks[t].slideSpeed=0x10;
    5680:	9c 93       	st	X, r25
#endif

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    5682:	8f 5f       	subi	r24, 0xFF	; 255
    5684:	77 96       	adiw	r30, 0x17	; 23
    5686:	85 30       	cpi	r24, 0x05	; 5
    5688:	71 f7       	brne	.-36     	; 0x5666 <InitMusicPlayer+0x1e>
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
		tracks[t].slideSpeed=0x10;
	}

}
    568a:	08 95       	ret

0000568c <ReadVarLen>:
}



unsigned int ReadVarLen(const char **songPos)
{
    568c:	dc 01       	movw	r26, r24
    unsigned int value;
    unsigned char c;


    if ( (value = pgm_read_byte((*songPos)++)) & 0x80 )
    568e:	ed 91       	ld	r30, X+
    5690:	fc 91       	ld	r31, X
    5692:	11 97       	sbiw	r26, 0x01	; 1
    5694:	9f 01       	movw	r18, r30
    5696:	2f 5f       	subi	r18, 0xFF	; 255
    5698:	3f 4f       	sbci	r19, 0xFF	; 255
    569a:	11 96       	adiw	r26, 0x01	; 1
    569c:	3c 93       	st	X, r19
    569e:	2e 93       	st	-X, r18
    56a0:	e4 91       	lpm	r30, Z
    56a2:	e7 fd       	sbrc	r30, 7
    56a4:	03 c0       	rjmp	.+6      	; 0x56ac <ReadVarLen+0x20>
    56a6:	8e 2f       	mov	r24, r30
    56a8:	90 e0       	ldi	r25, 0x00	; 0
    56aa:	08 95       	ret
    {
       value &= 0x7F;
    56ac:	ef 77       	andi	r30, 0x7F	; 127
    56ae:	8e 2f       	mov	r24, r30
    56b0:	90 e0       	ldi	r25, 0x00	; 0
       do
       {
         value = (value << 7) + ((c = pgm_read_byte((*songPos)++)) & 0x7F);
    56b2:	96 95       	lsr	r25
    56b4:	98 2f       	mov	r25, r24
    56b6:	88 27       	eor	r24, r24
    56b8:	97 95       	ror	r25
    56ba:	87 95       	ror	r24
    56bc:	2f 5f       	subi	r18, 0xFF	; 255
    56be:	3f 4f       	sbci	r19, 0xFF	; 255
    56c0:	f9 01       	movw	r30, r18
    56c2:	31 97       	sbiw	r30, 0x01	; 1
    56c4:	e4 91       	lpm	r30, Z
    56c6:	4e 2f       	mov	r20, r30
    56c8:	4f 77       	andi	r20, 0x7F	; 127
    56ca:	84 0f       	add	r24, r20
    56cc:	91 1d       	adc	r25, r1
       } while (c & 0x80);
    56ce:	e7 fd       	sbrc	r30, 7
    56d0:	f0 cf       	rjmp	.-32     	; 0x56b2 <ReadVarLen+0x26>
    56d2:	2d 93       	st	X+, r18
    56d4:	3c 93       	st	X, r19
    }


    return value;
}
    56d6:	08 95       	ret

000056d8 <TriggerCommon>:




void TriggerCommon(Track* track,u8 patch,u8 volume,u8 note){
    56d8:	ef 92       	push	r14
    56da:	ff 92       	push	r15
    56dc:	0f 93       	push	r16
    56de:	1f 93       	push	r17
    56e0:	cf 93       	push	r28
    56e2:	df 93       	push	r29
    56e4:	1f 92       	push	r1
    56e6:	cd b7       	in	r28, 0x3d	; 61
    56e8:	de b7       	in	r29, 0x3e	; 62
    56ea:	7c 01       	movw	r14, r24
    56ec:	16 2f       	mov	r17, r22
		
	bool isFx = (track->flags&TRACK_FLAGS_PRIORITY);
    56ee:	fc 01       	movw	r30, r24
    56f0:	80 81       	ld	r24, Z
    56f2:	08 2f       	mov	r16, r24
    56f4:	00 1f       	adc	r16, r16
    56f6:	00 27       	eor	r16, r16
    56f8:	00 1f       	adc	r16, r16

	track->envelopeStep=0; 
    56fa:	17 86       	std	Z+15, r1	; 0x0f
	track->envelopeVol=0xff; 
    56fc:	9f ef       	ldi	r25, 0xFF	; 255
    56fe:	96 87       	std	Z+14, r25	; 0x0e
	track->noteVol=volume;
    5700:	45 87       	std	Z+13, r20	; 0x0d
	track->patchPlayingTime=0;
    5702:	14 8a       	std	Z+20, r1	; 0x14
	track->flags&=(~(TRACK_FLAGS_HOLD_ENV|TRACK_FLAGS_SLIDING));
    5704:	87 7b       	andi	r24, 0xB7	; 183
    5706:	80 83       	st	Z, r24
	track->tremoloLevel=0;
    5708:	12 86       	std	Z+10, r1	; 0x0a
	track->tremoloPos=0;
    570a:	11 86       	std	Z+9, r1	; 0x09
	track->note=note;
    570c:	21 83       	std	Z+1, r18	; 0x01
	track->loopCount=0;
    570e:	14 82       	std	Z+4, r1	; 0x04

#if MUSIC_ENGINE == MIDI
	track->expressionVol=DEFAULT_EXPRESSION_VOL;
    5710:	93 83       	std	Z+3, r25	; 0x03
#endif

	#if SOUND_MIXER == MIXER_TYPE_INLINE

		if(track->channel==3){
    5712:	82 81       	ldd	r24, Z+2	; 0x02
    5714:	83 30       	cpi	r24, 0x03	; 3
    5716:	69 f4       	brne	.+26     	; 0x5732 <TriggerCommon+0x5a>
			//noise channel		
			if(!isFx) patch=note;			
    5718:	01 11       	cpse	r16, r1
    571a:	01 c0       	rjmp	.+2      	; 0x571e <TriggerCommon+0x46>
    571c:	12 2f       	mov	r17, r18
			mixer.channels.type.noise.barrel=0x0101;				
    571e:	81 e0       	ldi	r24, 0x01	; 1
    5720:	91 e0       	ldi	r25, 0x01	; 1
    5722:	90 93 cd 0c 	sts	0x0CCD, r25
    5726:	80 93 cc 0c 	sts	0x0CCC, r24
			mixer.channels.type.noise.params=1; //default (15bits,no divider)
    572a:	81 e0       	ldi	r24, 0x01	; 1
    572c:	80 93 cb 0c 	sts	0x0CCB, r24
    5730:	39 c0       	rjmp	.+114    	; 0x57a4 <TriggerCommon+0xcc>

		#if SOUND_CHANNEL_5_ENABLE==1		

		}else if(track->channel==4){
    5732:	84 30       	cpi	r24, 0x04	; 4
    5734:	69 f5       	brne	.+90     	; 0x5790 <TriggerCommon+0xb8>
				//PCM channel					
				mixer.channels.type.pcm.positionFrac=0;
    5736:	10 92 d3 0c 	sts	0x0CD3, r1
				const char *pos=(const char*)pgm_read_word(&(patchPointers[patch].pcmData));
    573a:	80 91 5c 0d 	lds	r24, 0x0D5C
    573e:	90 91 5d 0d 	lds	r25, 0x0D5D
    5742:	f9 e0       	ldi	r31, 0x09	; 9
    5744:	6f 9f       	mul	r22, r31
    5746:	80 0d       	add	r24, r0
    5748:	91 1d       	adc	r25, r1
    574a:	11 24       	eor	r1, r1
    574c:	fc 01       	movw	r30, r24
    574e:	31 96       	adiw	r30, 0x01	; 1
    5750:	a5 91       	lpm	r26, Z+
    5752:	b4 91       	lpm	r27, Z
				mixer.channels.type.pcm.position=pos;				
    5754:	b0 93 d5 0c 	sts	0x0CD5, r27
    5758:	a0 93 d4 0c 	sts	0x0CD4, r26
				mixer.pcmLoopLenght=pgm_read_word(&(patchPointers[patch].loopEnd))-pgm_read_word(&(patchPointers[patch].loopStart));
    575c:	ac 01       	movw	r20, r24
    575e:	49 5f       	subi	r20, 0xF9	; 249
    5760:	5f 4f       	sbci	r21, 0xFF	; 255
    5762:	fa 01       	movw	r30, r20
    5764:	65 91       	lpm	r22, Z+
    5766:	74 91       	lpm	r23, Z
    5768:	05 96       	adiw	r24, 0x05	; 5
    576a:	fc 01       	movw	r30, r24
    576c:	85 91       	lpm	r24, Z+
    576e:	94 91       	lpm	r25, Z
    5770:	68 1b       	sub	r22, r24
    5772:	79 0b       	sbc	r23, r25
    5774:	70 93 d7 0c 	sts	0x0CD7, r23
    5778:	60 93 d6 0c 	sts	0x0CD6, r22
				mixer.pcmLoopEnd=pos+pgm_read_word(&(patchPointers[patch].loopEnd));
    577c:	fa 01       	movw	r30, r20
    577e:	85 91       	lpm	r24, Z+
    5780:	94 91       	lpm	r25, Z
    5782:	a8 0f       	add	r26, r24
    5784:	b9 1f       	adc	r27, r25
    5786:	b0 93 d9 0c 	sts	0x0CD9, r27
    578a:	a0 93 d8 0c 	sts	0x0CD8, r26
    578e:	05 c0       	rjmp	.+10     	; 0x579a <TriggerCommon+0xc2>
				SetMixerNote(track->channel,note);
		#endif	

		}else{					
			//wave channels					
			SetMixerWave(track->channel,0);//default wave
    5790:	60 e0       	ldi	r22, 0x00	; 0
    5792:	29 83       	std	Y+1, r18	; 0x01
    5794:	0e 94 bb 2e 	call	0x5d76	; 0x5d76 <SetMixerWave>
			SetMixerNote(track->channel,note);
    5798:	29 81       	ldd	r18, Y+1	; 0x01
    579a:	62 2f       	mov	r22, r18
    579c:	f7 01       	movw	r30, r14
    579e:	82 81       	ldd	r24, Z+2	; 0x02
    57a0:	0e 94 a4 2e 	call	0x5d48	; 0x5d48 <SetMixerNote>
		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
		track->fxPatchNo=patch;
    57a4:	f7 01       	movw	r30, r14

		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
    57a6:	00 23       	and	r16, r16
    57a8:	11 f0       	breq	.+4      	; 0x57ae <TriggerCommon+0xd6>
		track->fxPatchNo=patch;
    57aa:	11 8b       	std	Z+17, r17	; 0x11
    57ac:	01 c0       	rjmp	.+2      	; 0x57b0 <TriggerCommon+0xd8>
	}else{
		track->patchNo=patch;	
    57ae:	10 8b       	std	Z+16, r17	; 0x10
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
    57b0:	e0 91 5c 0d 	lds	r30, 0x0D5C
    57b4:	f0 91 5d 0d 	lds	r31, 0x0D5D
    57b8:	39 e0       	ldi	r19, 0x09	; 9
    57ba:	13 9f       	mul	r17, r19
    57bc:	e0 0d       	add	r30, r0
    57be:	f1 1d       	adc	r31, r1
    57c0:	11 24       	eor	r1, r1
    57c2:	33 96       	adiw	r30, 0x03	; 3
    57c4:	85 91       	lpm	r24, Z+
    57c6:	94 91       	lpm	r25, Z
	if(pos==NULL){
		track->patchCommandStreamPos=NULL;
    57c8:	f7 01       	movw	r30, r14
	}else{
		track->patchNo=patch;	
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
	if(pos==NULL){
    57ca:	00 97       	sbiw	r24, 0x00	; 0
    57cc:	19 f4       	brne	.+6      	; 0x57d4 <TriggerCommon+0xfc>
		track->patchCommandStreamPos=NULL;
    57ce:	16 8a       	std	Z+22, r1	; 0x16
    57d0:	15 8a       	std	Z+21, r1	; 0x15
    57d2:	08 c0       	rjmp	.+16     	; 0x57e4 <TriggerCommon+0x10c>
	}else{
		track->patchCurrDeltaTime=0;
    57d4:	13 8a       	std	Z+19, r1	; 0x13
		track->patchNextDeltaTime=pgm_read_byte(pos++);
    57d6:	fc 01       	movw	r30, r24
    57d8:	24 91       	lpm	r18, Z
    57da:	f7 01       	movw	r30, r14
    57dc:	22 8b       	std	Z+18, r18	; 0x12
    57de:	01 96       	adiw	r24, 0x01	; 1
		track->patchCommandStreamPos=pos;
    57e0:	96 8b       	std	Z+22, r25	; 0x16
    57e2:	85 8b       	std	Z+21, r24	; 0x15
	}

}
    57e4:	0f 90       	pop	r0
    57e6:	df 91       	pop	r29
    57e8:	cf 91       	pop	r28
    57ea:	1f 91       	pop	r17
    57ec:	0f 91       	pop	r16
    57ee:	ff 90       	pop	r15
    57f0:	ef 90       	pop	r14
    57f2:	08 95       	ret

000057f4 <TriggerFx>:

/* Trigger a sound effect.
 * Method allocates the channel based on priority.
 * Retrig: if this fx if already playing on a track, reuse same track.
 */
void TriggerFx(unsigned char patch,unsigned char volume,bool retrig){
    57f4:	cf 93       	push	r28
    57f6:	df 93       	push	r29
	unsigned char channel;
	
	unsigned char type=(unsigned char)pgm_read_byte(&(patchPointers[patch].type));
    57f8:	e0 91 5c 0d 	lds	r30, 0x0D5C
    57fc:	f0 91 5d 0d 	lds	r31, 0x0D5D
    5800:	99 e0       	ldi	r25, 0x09	; 9
    5802:	89 9f       	mul	r24, r25
    5804:	e0 0d       	add	r30, r0
    5806:	f1 1d       	adc	r31, r1
    5808:	11 24       	eor	r1, r1
    580a:	e4 91       	lpm	r30, Z

	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
    580c:	e1 30       	cpi	r30, 0x01	; 1
    580e:	e9 f0       	breq	.+58     	; 0x584a <TriggerFx+0x56>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
    5810:	e2 30       	cpi	r30, 0x02	; 2
    5812:	e9 f0       	breq	.+58     	; 0x584e <TriggerFx+0x5a>
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
    5814:	20 91 fe 0c 	lds	r18, 0x0CFE
    5818:	27 ff       	sbrs	r18, 7
    581a:	1d c0       	rjmp	.+58     	; 0x5856 <TriggerFx+0x62>
    581c:	20 91 0f 0d 	lds	r18, 0x0D0F
    5820:	28 13       	cpse	r18, r24
    5822:	02 c0       	rjmp	.+4      	; 0x5828 <TriggerFx+0x34>
    5824:	41 11       	cpse	r20, r1
    5826:	17 c0       	rjmp	.+46     	; 0x5856 <TriggerFx+0x62>
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
    5828:	20 91 15 0d 	lds	r18, 0x0D15
    582c:	27 ff       	sbrs	r18, 7
    582e:	11 c0       	rjmp	.+34     	; 0x5852 <TriggerFx+0x5e>
    5830:	20 91 26 0d 	lds	r18, 0x0D26
    5834:	28 13       	cpse	r18, r24
    5836:	02 c0       	rjmp	.+4      	; 0x583c <TriggerFx+0x48>
    5838:	41 11       	cpse	r20, r1
    583a:	0b c0       	rjmp	.+22     	; 0x5852 <TriggerFx+0x5e>
		channel=2;
	}else{
		//both channels have fx playing, use the oldest one
		if(tracks[1].patchPlayingTime>tracks[2].patchPlayingTime){
    583c:	20 91 12 0d 	lds	r18, 0x0D12
    5840:	90 91 29 0d 	lds	r25, 0x0D29
    5844:	92 17       	cp	r25, r18
    5846:	28 f4       	brcc	.+10     	; 0x5852 <TriggerFx+0x5e>
    5848:	06 c0       	rjmp	.+12     	; 0x5856 <TriggerFx+0x62>
	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
		//noise or PCM channel fx		
		channel=3;
    584a:	c3 e0       	ldi	r28, 0x03	; 3
    584c:	05 c0       	rjmp	.+10     	; 0x5858 <TriggerFx+0x64>
	}else if(type==2){
		channel=4;
    584e:	c4 e0       	ldi	r28, 0x04	; 4
    5850:	03 c0       	rjmp	.+6      	; 0x5858 <TriggerFx+0x64>
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
		channel=2;
    5852:	c2 e0       	ldi	r28, 0x02	; 2
    5854:	01 c0       	rjmp	.+2      	; 0x5858 <TriggerFx+0x64>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
    5856:	c1 e0       	ldi	r28, 0x01	; 1
			channel=2;
		}
	}				

	Track* track=&tracks[channel];
	track->flags=TRACK_FLAGS_PRIORITY; //priority=1;
    5858:	97 e1       	ldi	r25, 0x17	; 23
    585a:	c9 9f       	mul	r28, r25
    585c:	e0 01       	movw	r28, r0
    585e:	11 24       	eor	r1, r1
    5860:	c9 51       	subi	r28, 0x19	; 25
    5862:	d3 4f       	sbci	r29, 0xF3	; 243
    5864:	90 e8       	ldi	r25, 0x80	; 128
    5866:	98 83       	st	Y, r25
	track->patchCommandStreamPos = NULL;
    5868:	1e 8a       	std	Y+22, r1	; 0x16
    586a:	1d 8a       	std	Y+21, r1	; 0x15
	TriggerCommon(track,patch,volume,80);
    586c:	20 e5       	ldi	r18, 0x50	; 80
    586e:	46 2f       	mov	r20, r22
    5870:	68 2f       	mov	r22, r24
    5872:	ce 01       	movw	r24, r28
    5874:	0e 94 6c 2b 	call	0x56d8	; 0x56d8 <TriggerCommon>
	track->flags|=TRACK_FLAGS_PLAYING;
    5878:	88 81       	ld	r24, Y
    587a:	80 62       	ori	r24, 0x20	; 32
    587c:	88 83       	st	Y, r24
}
    587e:	df 91       	pop	r29
    5880:	cf 91       	pop	r28
    5882:	08 95       	ret

00005884 <TriggerNote>:


void TriggerNote(unsigned char channel,unsigned char patch,unsigned char note,unsigned char volume){
    5884:	cf 93       	push	r28
    5886:	df 93       	push	r29
	Track* track=&tracks[channel];

	//allow only other music notes 
	if((track->flags&TRACK_FLAGS_PLAYING)==0 || (track->flags&TRACK_FLAGS_PRIORITY)==0){
    5888:	a8 2f       	mov	r26, r24
    588a:	b0 e0       	ldi	r27, 0x00	; 0
    588c:	97 e1       	ldi	r25, 0x17	; 23
    588e:	89 9f       	mul	r24, r25
    5890:	f0 01       	movw	r30, r0
    5892:	11 24       	eor	r1, r1
    5894:	e9 51       	subi	r30, 0x19	; 25
    5896:	f3 4f       	sbci	r31, 0xF3	; 243
    5898:	80 81       	ld	r24, Z
    589a:	85 ff       	sbrs	r24, 5
    589c:	02 c0       	rjmp	.+4      	; 0x58a2 <TriggerNote+0x1e>
    589e:	87 fd       	sbrc	r24, 7
    58a0:	2e c0       	rjmp	.+92     	; 0x58fe <TriggerNote+0x7a>
			
		if(volume==0){ //note-off received
    58a2:	21 11       	cpse	r18, r1
    58a4:	18 c0       	rjmp	.+48     	; 0x58d6 <TriggerNote+0x52>

			
			//cut note if there's no envelope & no note hold
			if(track->envelopeStep==0 && !(track->flags&TRACK_FLAGS_HOLD_ENV)){
    58a6:	97 e1       	ldi	r25, 0x17	; 23
    58a8:	9a 9f       	mul	r25, r26
    58aa:	f0 01       	movw	r30, r0
    58ac:	9b 9f       	mul	r25, r27
    58ae:	f0 0d       	add	r31, r0
    58b0:	11 24       	eor	r1, r1
    58b2:	e9 51       	subi	r30, 0x19	; 25
    58b4:	f3 4f       	sbci	r31, 0xF3	; 243
    58b6:	97 85       	ldd	r25, Z+15	; 0x0f
    58b8:	91 11       	cpse	r25, r1
    58ba:	02 c0       	rjmp	.+4      	; 0x58c0 <TriggerNote+0x3c>
    58bc:	86 ff       	sbrs	r24, 6
				track->noteVol=0;
    58be:	15 86       	std	Z+13, r1	; 0x0d
			}

			track->flags&=(~TRACK_FLAGS_HOLD_ENV);//patchEnvelopeHold=false;
    58c0:	97 e1       	ldi	r25, 0x17	; 23
    58c2:	9a 9f       	mul	r25, r26
    58c4:	f0 01       	movw	r30, r0
    58c6:	9b 9f       	mul	r25, r27
    58c8:	f0 0d       	add	r31, r0
    58ca:	11 24       	eor	r1, r1
    58cc:	e9 51       	subi	r30, 0x19	; 25
    58ce:	f3 4f       	sbci	r31, 0xF3	; 243
    58d0:	8f 7b       	andi	r24, 0xBF	; 191
    58d2:	80 83       	st	Z, r24
    58d4:	14 c0       	rjmp	.+40     	; 0x58fe <TriggerNote+0x7a>
    58d6:	82 2f       	mov	r24, r18
    58d8:	24 2f       	mov	r18, r20
		}else{
		
			track->flags=0;//&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    58da:	97 e1       	ldi	r25, 0x17	; 23
    58dc:	9a 9f       	mul	r25, r26
    58de:	e0 01       	movw	r28, r0
    58e0:	9b 9f       	mul	r25, r27
    58e2:	d0 0d       	add	r29, r0
    58e4:	11 24       	eor	r1, r1
    58e6:	c9 51       	subi	r28, 0x19	; 25
    58e8:	d3 4f       	sbci	r29, 0xF3	; 243
    58ea:	18 82       	st	Y, r1
			track->patchCommandStreamPos = NULL;
    58ec:	1e 8a       	std	Y+22, r1	; 0x16
    58ee:	1d 8a       	std	Y+21, r1	; 0x15
			TriggerCommon(track,patch,volume,note);
    58f0:	48 2f       	mov	r20, r24
    58f2:	ce 01       	movw	r24, r28
    58f4:	0e 94 6c 2b 	call	0x56d8	; 0x56d8 <TriggerCommon>
			track->flags|=TRACK_FLAGS_PLAYING;
    58f8:	88 81       	ld	r24, Y
    58fa:	80 62       	ori	r24, 0x20	; 32
    58fc:	88 83       	st	Y, r24
		}

	}
}
    58fe:	df 91       	pop	r29
    5900:	cf 91       	pop	r28
    5902:	08 95       	ret

00005904 <ProcessMusic>:
	}

#endif


void ProcessMusic(void){
    5904:	6f 92       	push	r6
    5906:	7f 92       	push	r7
    5908:	8f 92       	push	r8
    590a:	9f 92       	push	r9
    590c:	af 92       	push	r10
    590e:	bf 92       	push	r11
    5910:	cf 92       	push	r12
    5912:	df 92       	push	r13
    5914:	ef 92       	push	r14
    5916:	ff 92       	push	r15
    5918:	0f 93       	push	r16
    591a:	1f 93       	push	r17
    591c:	cf 93       	push	r28
    591e:	df 93       	push	r29
    5920:	c7 ee       	ldi	r28, 0xE7	; 231
    5922:	dc e0       	ldi	r29, 0x0C	; 12
    5924:	08 eb       	ldi	r16, 0xB8	; 184
    5926:	1c e0       	ldi	r17, 0x0C	; 12
    5928:	d8 01       	movw	r26, r16
    592a:	9e 01       	movw	r18, r28
    592c:	40 e0       	ldi	r20, 0x00	; 0
    592e:	50 e0       	ldi	r21, 0x00	; 0
    5930:	ca 01       	movw	r24, r20
    5932:	89 51       	subi	r24, 0x19	; 25
    5934:	93 4f       	sbci	r25, 0xF3	; 243
    5936:	6c 01       	movw	r12, r24
	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//update envelope
		if(track->envelopeStep!=0){
    5938:	fc 01       	movw	r30, r24
    593a:	87 85       	ldd	r24, Z+15	; 0x0f
    593c:	88 23       	and	r24, r24
    593e:	91 f0       	breq	.+36     	; 0x5964 <ProcessMusic+0x60>
			vol=track->envelopeVol+track->envelopeStep;		
    5940:	66 85       	ldd	r22, Z+14	; 0x0e
    5942:	99 27       	eor	r25, r25
    5944:	87 fd       	sbrc	r24, 7
    5946:	90 95       	com	r25
    5948:	86 0f       	add	r24, r22
    594a:	91 1d       	adc	r25, r1
    594c:	8f 3f       	cpi	r24, 0xFF	; 255
    594e:	91 05       	cpc	r25, r1
    5950:	19 f0       	breq	.+6      	; 0x5958 <ProcessMusic+0x54>
    5952:	14 f0       	brlt	.+4      	; 0x5958 <ProcessMusic+0x54>
    5954:	8f ef       	ldi	r24, 0xFF	; 255
    5956:	90 e0       	ldi	r25, 0x00	; 0
    5958:	97 ff       	sbrs	r25, 7
    595a:	02 c0       	rjmp	.+4      	; 0x5960 <ProcessMusic+0x5c>
    595c:	80 e0       	ldi	r24, 0x00	; 0
    595e:	90 e0       	ldi	r25, 0x00	; 0
			if(vol<0){
				vol=0;			
			}else if(vol>0xff){
				vol=0xff;						
			}
			track->envelopeVol=vol;
    5960:	f6 01       	movw	r30, r12
    5962:	86 87       	std	Z+14, r24	; 0x0e
		}

		//if volumes reaches zero and no more patch command, explicitly end playing on track
		//if(vol==0 && track->patchCommandStreamPos==NULL) track->flags&=~(TRACK_FLAGS_PLAYING);

		if(track->flags & TRACK_FLAGS_SLIDING){
    5964:	f9 01       	movw	r30, r18
    5966:	f0 80       	ld	r15, Z
    5968:	f3 fe       	sbrs	r15, 3
    596a:	2a c0       	rjmp	.+84     	; 0x59c0 <ProcessMusic+0xbc>

			mixer.channels.all[trackNo].step+=track->slideStep;
    596c:	65 81       	ldd	r22, Z+5	; 0x05
    596e:	76 81       	ldd	r23, Z+6	; 0x06
    5970:	11 96       	adiw	r26, 0x01	; 1
    5972:	8d 91       	ld	r24, X+
    5974:	9c 91       	ld	r25, X
    5976:	12 97       	sbiw	r26, 0x02	; 2
    5978:	86 0f       	add	r24, r22
    597a:	97 1f       	adc	r25, r23
    597c:	12 96       	adiw	r26, 0x02	; 2
    597e:	9c 93       	st	X, r25
    5980:	8e 93       	st	-X, r24
    5982:	11 97       	sbiw	r26, 0x01	; 1
			u16 tStep=pgm_read_word(&(steptable[track->slideNote]));
    5984:	f6 01       	movw	r30, r12
    5986:	e7 80       	ldd	r14, Z+7	; 0x07
    5988:	ee 2d       	mov	r30, r14
    598a:	f0 e0       	ldi	r31, 0x00	; 0
    598c:	ee 0f       	add	r30, r30
    598e:	ff 1f       	adc	r31, r31
    5990:	e8 5f       	subi	r30, 0xF8	; 248
    5992:	f1 4a       	sbci	r31, 0xA1	; 161
    5994:	c5 90       	lpm	r12, Z+
    5996:	d4 90       	lpm	r13, Z

			if((track->slideStep>0 && mixer.channels.all[trackNo].step>=tStep) || 
    5998:	16 16       	cp	r1, r22
    599a:	17 06       	cpc	r1, r23
    599c:	24 f4       	brge	.+8      	; 0x59a6 <ProcessMusic+0xa2>
    599e:	8c 15       	cp	r24, r12
    59a0:	9d 05       	cpc	r25, r13
    59a2:	30 f4       	brcc	.+12     	; 0x59b0 <ProcessMusic+0xac>
    59a4:	0d c0       	rjmp	.+26     	; 0x59c0 <ProcessMusic+0xbc>
    59a6:	67 2b       	or	r22, r23
    59a8:	59 f0       	breq	.+22     	; 0x59c0 <ProcessMusic+0xbc>
				(track->slideStep<0 && mixer.channels.all[trackNo].step<=tStep))
    59aa:	c8 16       	cp	r12, r24
    59ac:	d9 06       	cpc	r13, r25
    59ae:	40 f0       	brcs	.+16     	; 0x59c0 <ProcessMusic+0xbc>
			{					
				mixer.channels.all[trackNo].step = tStep;					
    59b0:	12 96       	adiw	r26, 0x02	; 2
    59b2:	dc 92       	st	X, r13
    59b4:	ce 92       	st	-X, r12
    59b6:	11 97       	sbiw	r26, 0x01	; 1
				track->flags &= ~(TRACK_FLAGS_SLIDING);	
    59b8:	8f 2d       	mov	r24, r15
    59ba:	87 7f       	andi	r24, 0xF7	; 247
    59bc:	f9 01       	movw	r30, r18
    59be:	80 83       	st	Z, r24
    59c0:	49 5e       	subi	r20, 0xE9	; 233
    59c2:	5f 4f       	sbci	r21, 0xFF	; 255
    59c4:	29 5e       	subi	r18, 0xE9	; 233
    59c6:	3f 4f       	sbci	r19, 0xFF	; 255
    59c8:	16 96       	adiw	r26, 0x06	; 6
	u8 channel;
	Track* track;


	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    59ca:	43 37       	cpi	r20, 0x73	; 115
    59cc:	51 05       	cpc	r21, r1
    59ce:	09 f0       	breq	.+2      	; 0x59d2 <ProcessMusic+0xce>
    59d0:	af cf       	rjmp	.-162    	; 0x5930 <ProcessMusic+0x2c>
	}



	//Process song MIDI notes
	if(playSong){
    59d2:	80 91 b6 0c 	lds	r24, 0x0CB6
    59d6:	88 23       	and	r24, r24
    59d8:	09 f4       	brne	.+2      	; 0x59dc <ProcessMusic+0xd8>
    59da:	cc c0       	rjmp	.+408    	; 0x5b74 <ProcessMusic+0x270>
							}else if(c1==CONTROLER_EXPRESSION){
								tracks[channel].expressionVol=c2<<1;
							}else if(c1==CONTROLER_TREMOLO){
								tracks[channel].tremoloLevel=c2<<1;
							}else if(c1==CONTROLER_TREMOLO_RATE){
								tracks[channel].tremoloRate=c2<<1;
    59dc:	57 e1       	ldi	r21, 0x17	; 23
    59de:	f5 2e       	mov	r15, r21
	if(playSong){
	
		#if MUSIC_ENGINE == MIDI
			
			//process all simultaneous events
			while(currDeltaTime==nextDeltaTime){
    59e0:	80 91 5a 0d 	lds	r24, 0x0D5A
    59e4:	90 91 5b 0d 	lds	r25, 0x0D5B
    59e8:	20 91 60 0d 	lds	r18, 0x0D60
    59ec:	30 91 61 0d 	lds	r19, 0x0D61
    59f0:	82 17       	cp	r24, r18
    59f2:	93 07       	cpc	r25, r19
    59f4:	09 f0       	breq	.+2      	; 0x59f8 <ProcessMusic+0xf4>
    59f6:	b9 c0       	rjmp	.+370    	; 0x5b6a <ProcessMusic+0x266>

				c1=pgm_read_byte(songPos++);
    59f8:	20 91 63 0d 	lds	r18, 0x0D63
    59fc:	30 91 64 0d 	lds	r19, 0x0D64
    5a00:	b9 01       	movw	r22, r18
    5a02:	6f 5f       	subi	r22, 0xFF	; 255
    5a04:	7f 4f       	sbci	r23, 0xFF	; 255
    5a06:	70 93 64 0d 	sts	0x0D64, r23
    5a0a:	60 93 63 0d 	sts	0x0D63, r22
    5a0e:	f9 01       	movw	r30, r18
    5a10:	44 91       	lpm	r20, Z
			
				if(c1==0xff){
    5a12:	4f 3f       	cpi	r20, 0xFF	; 255
    5a14:	79 f5       	brne	.+94     	; 0x5a74 <ProcessMusic+0x170>
					//META data type event
					c1=pgm_read_byte(songPos++);
    5a16:	a9 01       	movw	r20, r18
    5a18:	4e 5f       	subi	r20, 0xFE	; 254
    5a1a:	5f 4f       	sbci	r21, 0xFF	; 255
    5a1c:	50 93 64 0d 	sts	0x0D64, r21
    5a20:	40 93 63 0d 	sts	0x0D63, r20
    5a24:	fb 01       	movw	r30, r22
    5a26:	64 91       	lpm	r22, Z

				
					if(c1==0x2f){ //end of song
    5a28:	6f 32       	cpi	r22, 0x2F	; 47
    5a2a:	19 f4       	brne	.+6      	; 0x5a32 <ProcessMusic+0x12e>
						playSong=false;
    5a2c:	10 92 b6 0c 	sts	0x0CB6, r1
						break;	
    5a30:	9c c0       	rjmp	.+312    	; 0x5b6a <ProcessMusic+0x266>
					}else if(c1==0x6){ //marker
    5a32:	66 30       	cpi	r22, 0x06	; 6
    5a34:	09 f0       	breq	.+2      	; 0x5a38 <ProcessMusic+0x134>
    5a36:	8c c0       	rjmp	.+280    	; 0x5b50 <ProcessMusic+0x24c>
						c1=pgm_read_byte(songPos++); //read len
    5a38:	fa 01       	movw	r30, r20
    5a3a:	44 91       	lpm	r20, Z
						c2=pgm_read_byte(songPos++); //read data
    5a3c:	c9 01       	movw	r24, r18
    5a3e:	04 96       	adiw	r24, 0x04	; 4
    5a40:	90 93 64 0d 	sts	0x0D64, r25
    5a44:	80 93 63 0d 	sts	0x0D63, r24
				
					if(c1==0x2f){ //end of song
						playSong=false;
						break;	
					}else if(c1==0x6){ //marker
						c1=pgm_read_byte(songPos++); //read len
    5a48:	f9 01       	movw	r30, r18
    5a4a:	33 96       	adiw	r30, 0x03	; 3
						c2=pgm_read_byte(songPos++); //read data
    5a4c:	e4 91       	lpm	r30, Z
						if(c2=='S'){ //loop start
    5a4e:	e3 35       	cpi	r30, 0x53	; 83
    5a50:	29 f4       	brne	.+10     	; 0x5a5c <ProcessMusic+0x158>
							loopStart=songPos;
    5a52:	90 93 66 0d 	sts	0x0D66, r25
    5a56:	80 93 65 0d 	sts	0x0D65, r24
    5a5a:	7a c0       	rjmp	.+244    	; 0x5b50 <ProcessMusic+0x24c>
						}else if(c2=='E'){//loop end
    5a5c:	e5 34       	cpi	r30, 0x45	; 69
    5a5e:	09 f0       	breq	.+2      	; 0x5a62 <ProcessMusic+0x15e>
    5a60:	77 c0       	rjmp	.+238    	; 0x5b50 <ProcessMusic+0x24c>
							songPos=loopStart;
    5a62:	80 91 65 0d 	lds	r24, 0x0D65
    5a66:	90 91 66 0d 	lds	r25, 0x0D66
    5a6a:	90 93 64 0d 	sts	0x0D64, r25
    5a6e:	80 93 63 0d 	sts	0x0D63, r24
    5a72:	6e c0       	rjmp	.+220    	; 0x5b50 <ProcessMusic+0x24c>
					}
				

				}else{

					if(c1&0x80) lastStatus=c1;					
    5a74:	47 fd       	sbrc	r20, 7
    5a76:	40 93 5e 0d 	sts	0x0D5E, r20
					channel=lastStatus&0x0f;
    5a7a:	90 91 5e 0d 	lds	r25, 0x0D5E
    5a7e:	89 2f       	mov	r24, r25
    5a80:	8f 70       	andi	r24, 0x0F	; 15
				
					//get next data byte
					//Note: maybe we should not advance the cursor
					//in case we receive an unsupported command				
					if(c1&0x80) c1=pgm_read_byte(songPos++); 
    5a82:	47 ff       	sbrs	r20, 7
    5a84:	08 c0       	rjmp	.+16     	; 0x5a96 <ProcessMusic+0x192>
    5a86:	2e 5f       	subi	r18, 0xFE	; 254
    5a88:	3f 4f       	sbci	r19, 0xFF	; 255
    5a8a:	30 93 64 0d 	sts	0x0D64, r19
    5a8e:	20 93 63 0d 	sts	0x0D63, r18
    5a92:	fb 01       	movw	r30, r22
    5a94:	44 91       	lpm	r20, Z

					switch(lastStatus&0xf0){
    5a96:	90 7f       	andi	r25, 0xF0	; 240
    5a98:	90 3b       	cpi	r25, 0xB0	; 176
    5a9a:	e1 f0       	breq	.+56     	; 0x5ad4 <ProcessMusic+0x1d0>
    5a9c:	90 3c       	cpi	r25, 0xC0	; 192
    5a9e:	09 f4       	brne	.+2      	; 0x5aa2 <ProcessMusic+0x19e>
    5aa0:	51 c0       	rjmp	.+162    	; 0x5b44 <ProcessMusic+0x240>
    5aa2:	90 39       	cpi	r25, 0x90	; 144
    5aa4:	09 f0       	breq	.+2      	; 0x5aa8 <ProcessMusic+0x1a4>
    5aa6:	54 c0       	rjmp	.+168    	; 0x5b50 <ProcessMusic+0x24c>

						//note-on
						case 0x90:
							//c1 = note						
							c2=pgm_read_byte(songPos++)<<1; //get volume
    5aa8:	e0 91 63 0d 	lds	r30, 0x0D63
    5aac:	f0 91 64 0d 	lds	r31, 0x0D64
    5ab0:	9f 01       	movw	r18, r30
    5ab2:	2f 5f       	subi	r18, 0xFF	; 255
    5ab4:	3f 4f       	sbci	r19, 0xFF	; 255
    5ab6:	30 93 64 0d 	sts	0x0D64, r19
    5aba:	20 93 63 0d 	sts	0x0D63, r18
    5abe:	24 91       	lpm	r18, Z
    5ac0:	22 0f       	add	r18, r18
						
							if(tracks[channel].flags|TRACK_FLAGS_ALLOCATED){ //allocated==true
								TriggerNote(channel,tracks[channel].patchNo,c1,c2);
    5ac2:	f8 9e       	mul	r15, r24
    5ac4:	f0 01       	movw	r30, r0
    5ac6:	11 24       	eor	r1, r1
    5ac8:	e9 51       	subi	r30, 0x19	; 25
    5aca:	f3 4f       	sbci	r31, 0xF3	; 243
    5acc:	60 89       	ldd	r22, Z+16	; 0x10
    5ace:	0e 94 42 2c 	call	0x5884	; 0x5884 <TriggerNote>
    5ad2:	3e c0       	rjmp	.+124    	; 0x5b50 <ProcessMusic+0x24c>
							break;

						//controllers
						case 0xb0:
							///c1 = controller #
							c2=pgm_read_byte(songPos++); //get controller value
    5ad4:	e0 91 63 0d 	lds	r30, 0x0D63
    5ad8:	f0 91 64 0d 	lds	r31, 0x0D64
    5adc:	9f 01       	movw	r18, r30
    5ade:	2f 5f       	subi	r18, 0xFF	; 255
    5ae0:	3f 4f       	sbci	r19, 0xFF	; 255
    5ae2:	30 93 64 0d 	sts	0x0D64, r19
    5ae6:	20 93 63 0d 	sts	0x0D63, r18
    5aea:	e4 91       	lpm	r30, Z
						
							if(c1==CONTROLER_VOL){
    5aec:	47 30       	cpi	r20, 0x07	; 7
    5aee:	49 f4       	brne	.+18     	; 0x5b02 <ProcessMusic+0x1fe>
								tracks[channel].trackVol=c2<<1;
    5af0:	f8 9e       	mul	r15, r24
    5af2:	d0 01       	movw	r26, r0
    5af4:	11 24       	eor	r1, r1
    5af6:	a9 51       	subi	r26, 0x19	; 25
    5af8:	b3 4f       	sbci	r27, 0xF3	; 243
    5afa:	ee 0f       	add	r30, r30
    5afc:	1c 96       	adiw	r26, 0x0c	; 12
    5afe:	ec 93       	st	X, r30
    5b00:	27 c0       	rjmp	.+78     	; 0x5b50 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_EXPRESSION){
    5b02:	4b 30       	cpi	r20, 0x0B	; 11
    5b04:	49 f4       	brne	.+18     	; 0x5b18 <ProcessMusic+0x214>
								tracks[channel].expressionVol=c2<<1;
    5b06:	f8 9e       	mul	r15, r24
    5b08:	d0 01       	movw	r26, r0
    5b0a:	11 24       	eor	r1, r1
    5b0c:	a9 51       	subi	r26, 0x19	; 25
    5b0e:	b3 4f       	sbci	r27, 0xF3	; 243
    5b10:	ee 0f       	add	r30, r30
    5b12:	13 96       	adiw	r26, 0x03	; 3
    5b14:	ec 93       	st	X, r30
    5b16:	1c c0       	rjmp	.+56     	; 0x5b50 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO){
    5b18:	4c 35       	cpi	r20, 0x5C	; 92
    5b1a:	49 f4       	brne	.+18     	; 0x5b2e <ProcessMusic+0x22a>
								tracks[channel].tremoloLevel=c2<<1;
    5b1c:	f8 9e       	mul	r15, r24
    5b1e:	d0 01       	movw	r26, r0
    5b20:	11 24       	eor	r1, r1
    5b22:	a9 51       	subi	r26, 0x19	; 25
    5b24:	b3 4f       	sbci	r27, 0xF3	; 243
    5b26:	ee 0f       	add	r30, r30
    5b28:	1a 96       	adiw	r26, 0x0a	; 10
    5b2a:	ec 93       	st	X, r30
    5b2c:	11 c0       	rjmp	.+34     	; 0x5b50 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO_RATE){
    5b2e:	44 36       	cpi	r20, 0x64	; 100
    5b30:	79 f4       	brne	.+30     	; 0x5b50 <ProcessMusic+0x24c>
								tracks[channel].tremoloRate=c2<<1;
    5b32:	f8 9e       	mul	r15, r24
    5b34:	d0 01       	movw	r26, r0
    5b36:	11 24       	eor	r1, r1
    5b38:	a9 51       	subi	r26, 0x19	; 25
    5b3a:	b3 4f       	sbci	r27, 0xF3	; 243
    5b3c:	ee 0f       	add	r30, r30
    5b3e:	1b 96       	adiw	r26, 0x0b	; 11
    5b40:	ec 93       	st	X, r30
    5b42:	06 c0       	rjmp	.+12     	; 0x5b50 <ProcessMusic+0x24c>
							break;

						//program change
						case 0xc0:
							// c1 = patch #						
							tracks[channel].patchNo=c1;
    5b44:	f8 9e       	mul	r15, r24
    5b46:	f0 01       	movw	r30, r0
    5b48:	11 24       	eor	r1, r1
    5b4a:	e9 51       	subi	r30, 0x19	; 25
    5b4c:	f3 4f       	sbci	r31, 0xF3	; 243
    5b4e:	40 8b       	std	Z+16, r20	; 0x10


				}//end if(c1==0xff)

				//read next delta time
				nextDeltaTime=ReadVarLen(&songPos);			
    5b50:	83 e6       	ldi	r24, 0x63	; 99
    5b52:	9d e0       	ldi	r25, 0x0D	; 13
    5b54:	0e 94 46 2b 	call	0x568c	; 0x568c <ReadVarLen>
    5b58:	90 93 61 0d 	sts	0x0D61, r25
    5b5c:	80 93 60 0d 	sts	0x0D60, r24
				currDeltaTime=0;
    5b60:	10 92 5b 0d 	sts	0x0D5B, r1
    5b64:	10 92 5a 0d 	sts	0x0D5A, r1
    5b68:	3b cf       	rjmp	.-394    	; 0x59e0 <ProcessMusic+0xdc>
					}
				#endif

			}//end while
		
			currDeltaTime++;
    5b6a:	01 96       	adiw	r24, 0x01	; 1
    5b6c:	90 93 5b 0d 	sts	0x0D5B, r25
    5b70:	80 93 5a 0d 	sts	0x0D5A, r24
    5b74:	90 ef       	ldi	r25, 0xF0	; 240
    5b76:	a9 2e       	mov	r10, r25
    5b78:	9c e0       	ldi	r25, 0x0C	; 12
    5b7a:	b9 2e       	mov	r11, r25
    5b7c:	2a ef       	ldi	r18, 0xFA	; 250
    5b7e:	c2 2e       	mov	r12, r18
    5b80:	2c e0       	ldi	r18, 0x0C	; 12
    5b82:	d2 2e       	mov	r13, r18
    5b84:	3b ef       	ldi	r19, 0xFB	; 251
    5b86:	e3 2e       	mov	r14, r19
    5b88:	3c e0       	ldi	r19, 0x0C	; 12
    5b8a:	f3 2e       	mov	r15, r19
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    5b8c:	66 24       	eor	r6, r6
    5b8e:	6a 94       	dec	r6
    5b90:	71 2c       	mov	r7, r1
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//process patch command stream
		if((track->flags & TRACK_FLAGS_PLAYING) && (track->patchCommandStreamPos!=NULL) && ((track->flags & TRACK_FLAGS_HOLD_ENV)==0)){
    5b92:	88 81       	ld	r24, Y
    5b94:	85 ff       	sbrs	r24, 5
    5b96:	42 c0       	rjmp	.+132    	; 0x5c1c <ProcessMusic+0x318>
    5b98:	2d 89       	ldd	r18, Y+21	; 0x15
    5b9a:	3e 89       	ldd	r19, Y+22	; 0x16
    5b9c:	23 2b       	or	r18, r19
    5b9e:	09 f4       	brne	.+2      	; 0x5ba2 <ProcessMusic+0x29e>
    5ba0:	3d c0       	rjmp	.+122    	; 0x5c1c <ProcessMusic+0x318>
    5ba2:	86 fd       	sbrc	r24, 6
    5ba4:	3b c0       	rjmp	.+118    	; 0x5c1c <ProcessMusic+0x318>
    5ba6:	47 01       	movw	r8, r14
    5ba8:	f2 e0       	ldi	r31, 0x02	; 2
    5baa:	8f 1a       	sub	r8, r31
    5bac:	91 08       	sbc	r9, r1

			//process all simultaneous events
			while(track->patchCurrDeltaTime==track->patchNextDeltaTime){
    5bae:	d6 01       	movw	r26, r12
    5bb0:	9c 91       	ld	r25, X
    5bb2:	f4 01       	movw	r30, r8
    5bb4:	80 81       	ld	r24, Z
    5bb6:	98 13       	cpse	r25, r24
    5bb8:	2e c0       	rjmp	.+92     	; 0x5c16 <ProcessMusic+0x312>

				c1=pgm_read_byte(track->patchCommandStreamPos++);
    5bba:	ed 89       	ldd	r30, Y+21	; 0x15
    5bbc:	fe 89       	ldd	r31, Y+22	; 0x16
    5bbe:	bf 01       	movw	r22, r30
    5bc0:	6f 5f       	subi	r22, 0xFF	; 255
    5bc2:	7f 4f       	sbci	r23, 0xFF	; 255
    5bc4:	7e 8b       	std	Y+22, r23	; 0x16
    5bc6:	6d 8b       	std	Y+21, r22	; 0x15
    5bc8:	84 91       	lpm	r24, Z
				if(c1==PATCH_END){
    5bca:	8f 3f       	cpi	r24, 0xFF	; 255
    5bcc:	31 f4       	brne	.+12     	; 0x5bda <ProcessMusic+0x2d6>
					//end of stream!
					track->flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    5bce:	88 81       	ld	r24, Y
    5bd0:	8f 77       	andi	r24, 0x7F	; 127
    5bd2:	88 83       	st	Y, r24
					track->patchCommandStreamPos=NULL;
    5bd4:	1e 8a       	std	Y+22, r1	; 0x16
    5bd6:	1d 8a       	std	Y+21, r1	; 0x15
					break;
    5bd8:	1e c0       	rjmp	.+60     	; 0x5c16 <ProcessMusic+0x312>

				}else{
					c2=pgm_read_byte(track->patchCommandStreamPos++);
    5bda:	9f 01       	movw	r18, r30
    5bdc:	2e 5f       	subi	r18, 0xFE	; 254
    5bde:	3f 4f       	sbci	r19, 0xFF	; 255
    5be0:	3e 8b       	std	Y+22, r19	; 0x16
    5be2:	2d 8b       	std	Y+21, r18	; 0x15
    5be4:	fb 01       	movw	r30, r22
    5be6:	64 91       	lpm	r22, Z
					//invoke patch command function
					((PatchCommand)pgm_read_word(&patchCommands[c1]))(track,c2);
    5be8:	e8 2f       	mov	r30, r24
    5bea:	f0 e0       	ldi	r31, 0x00	; 0
    5bec:	ee 0f       	add	r30, r30
    5bee:	ff 1f       	adc	r31, r31
    5bf0:	e4 53       	subi	r30, 0x34	; 52
    5bf2:	ff 4f       	sbci	r31, 0xFF	; 255
    5bf4:	25 91       	lpm	r18, Z+
    5bf6:	34 91       	lpm	r19, Z
    5bf8:	ce 01       	movw	r24, r28
    5bfa:	f9 01       	movw	r30, r18
    5bfc:	09 95       	icall
				}

				//read next delta time
				track->patchNextDeltaTime=pgm_read_byte(track->patchCommandStreamPos++);
    5bfe:	ed 89       	ldd	r30, Y+21	; 0x15
    5c00:	fe 89       	ldd	r31, Y+22	; 0x16
    5c02:	cf 01       	movw	r24, r30
    5c04:	01 96       	adiw	r24, 0x01	; 1
    5c06:	9e 8b       	std	Y+22, r25	; 0x16
    5c08:	8d 8b       	std	Y+21, r24	; 0x15
    5c0a:	e4 91       	lpm	r30, Z
    5c0c:	d4 01       	movw	r26, r8
    5c0e:	ec 93       	st	X, r30
				track->patchCurrDeltaTime=0;
    5c10:	f6 01       	movw	r30, r12
    5c12:	10 82       	st	Z, r1
    5c14:	cc cf       	rjmp	.-104    	; 0x5bae <ProcessMusic+0x2aa>
			}

			track->patchCurrDeltaTime++;
    5c16:	9f 5f       	subi	r25, 0xFF	; 255
    5c18:	d6 01       	movw	r26, r12
    5c1a:	9c 93       	st	X, r25
		}

		if(track->flags & TRACK_FLAGS_PLAYING){
    5c1c:	98 81       	ld	r25, Y
    5c1e:	95 ff       	sbrs	r25, 5
    5c20:	6c c0       	rjmp	.+216    	; 0x5cfa <ProcessMusic+0x3f6>

			if(track->patchPlayingTime<0xff){
    5c22:	f7 01       	movw	r30, r14
    5c24:	80 81       	ld	r24, Z
    5c26:	8f 3f       	cpi	r24, 0xFF	; 255
    5c28:	11 f0       	breq	.+4      	; 0x5c2e <ProcessMusic+0x32a>
				track->patchPlayingTime++;
    5c2a:	8f 5f       	subi	r24, 0xFF	; 255
    5c2c:	80 83       	st	Z, r24
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
    5c2e:	97 fd       	sbrc	r25, 7
    5c30:	04 c0       	rjmp	.+8      	; 0x5c3a <ProcessMusic+0x336>
    5c32:	f7 01       	movw	r30, r14
    5c34:	38 97       	sbiw	r30, 0x08	; 8
				//if an FX, use full track volume.
				trackVol=0xff;
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
    5c36:	90 81       	ld	r25, Z
    5c38:	01 c0       	rjmp	.+2      	; 0x5c3c <ProcessMusic+0x338>
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
				//if an FX, use full track volume.
				trackVol=0xff;
    5c3a:	9f ef       	ldi	r25, 0xFF	; 255
    5c3c:	f7 01       	movw	r30, r14
    5c3e:	37 97       	sbiw	r30, 0x07	; 7
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
			}
			if(track->noteVol!=0 && track->envelopeVol!=0 && trackVol!=0 && masterVolume!=0){
    5c40:	80 81       	ld	r24, Z
    5c42:	88 23       	and	r24, r24
    5c44:	09 f4       	brne	.+2      	; 0x5c48 <ProcessMusic+0x344>
    5c46:	4e c0       	rjmp	.+156    	; 0x5ce4 <ProcessMusic+0x3e0>
    5c48:	31 96       	adiw	r30, 0x01	; 1
    5c4a:	50 81       	ld	r21, Z
    5c4c:	55 23       	and	r21, r21
    5c4e:	09 f4       	brne	.+2      	; 0x5c52 <ProcessMusic+0x34e>
    5c50:	49 c0       	rjmp	.+146    	; 0x5ce4 <ProcessMusic+0x3e0>
    5c52:	99 23       	and	r25, r25
    5c54:	09 f4       	brne	.+2      	; 0x5c58 <ProcessMusic+0x354>
    5c56:	46 c0       	rjmp	.+140    	; 0x5ce4 <ProcessMusic+0x3e0>
    5c58:	40 91 5f 0d 	lds	r20, 0x0D5F
    5c5c:	44 23       	and	r20, r20
    5c5e:	09 f4       	brne	.+2      	; 0x5c62 <ProcessMusic+0x35e>
    5c60:	41 c0       	rjmp	.+130    	; 0x5ce4 <ProcessMusic+0x3e0>

				uVol=(track->noteVol*trackVol)+0x100;
    5c62:	89 9f       	mul	r24, r25
    5c64:	c0 01       	movw	r24, r0
    5c66:	11 24       	eor	r1, r1
    5c68:	93 95       	inc	r25
				uVol>>=8;
    5c6a:	89 2f       	mov	r24, r25
    5c6c:	99 27       	eor	r25, r25
				
				uVol=(uVol*track->envelopeVol)+0x100;
    5c6e:	58 9f       	mul	r21, r24
    5c70:	90 01       	movw	r18, r0
    5c72:	59 9f       	mul	r21, r25
    5c74:	30 0d       	add	r19, r0
    5c76:	11 24       	eor	r1, r1
    5c78:	c9 01       	movw	r24, r18
    5c7a:	93 95       	inc	r25
				uVol>>=8;
    5c7c:	89 2f       	mov	r24, r25
    5c7e:	99 27       	eor	r25, r25
    5c80:	3b 97       	sbiw	r30, 0x0b	; 11
				
				#if MUSIC_ENGINE == MIDI
					uVol=(uVol*track->expressionVol)+0x100;
    5c82:	50 81       	ld	r21, Z
    5c84:	58 9f       	mul	r21, r24
    5c86:	90 01       	movw	r18, r0
    5c88:	59 9f       	mul	r21, r25
    5c8a:	30 0d       	add	r19, r0
    5c8c:	11 24       	eor	r1, r1
    5c8e:	33 95       	inc	r19
					uVol>>=8;
    5c90:	23 2f       	mov	r18, r19
    5c92:	33 27       	eor	r19, r19
				#endif
				
				uVol=(uVol*masterVolume)+0x100;
    5c94:	42 9f       	mul	r20, r18
    5c96:	c0 01       	movw	r24, r0
    5c98:	43 9f       	mul	r20, r19
    5c9a:	90 0d       	add	r25, r0
    5c9c:	11 24       	eor	r1, r1
    5c9e:	93 95       	inc	r25
				uVol>>=8;
    5ca0:	89 2f       	mov	r24, r25
    5ca2:	99 27       	eor	r25, r25
    5ca4:	37 96       	adiw	r30, 0x07	; 7

				if(track->tremoloLevel>0){					
    5ca6:	20 81       	ld	r18, Z
    5ca8:	22 23       	and	r18, r18
    5caa:	f1 f0       	breq	.+60     	; 0x5ce8 <ProcessMusic+0x3e4>
					tmp=pgm_read_byte(&(waves[track->tremoloPos]));
    5cac:	d5 01       	movw	r26, r10
    5cae:	ec 91       	ld	r30, X
    5cb0:	f0 e0       	ldi	r31, 0x00	; 0
    5cb2:	e0 50       	subi	r30, 0x00	; 0
    5cb4:	f0 4a       	sbci	r31, 0xA0	; 160
    5cb6:	e4 91       	lpm	r30, Z
					tmp-=128; //convert to unsigned
    5cb8:	e0 58       	subi	r30, 0x80	; 128

					tVol=(track->tremoloLevel*tmp)+0x100;
    5cba:	2e 9f       	mul	r18, r30
    5cbc:	f0 01       	movw	r30, r0
    5cbe:	11 24       	eor	r1, r1
    5cc0:	f3 95       	inc	r31
					tVol>>=8;
    5cc2:	ef 2f       	mov	r30, r31
    5cc4:	ff 27       	eor	r31, r31
					
					uVol=(uVol*(0xff-tVol))+0x100;
    5cc6:	a3 01       	movw	r20, r6
    5cc8:	4e 1b       	sub	r20, r30
    5cca:	5f 0b       	sbc	r21, r31
    5ccc:	48 9f       	mul	r20, r24
    5cce:	90 01       	movw	r18, r0
    5cd0:	49 9f       	mul	r20, r25
    5cd2:	30 0d       	add	r19, r0
    5cd4:	58 9f       	mul	r21, r24
    5cd6:	30 0d       	add	r19, r0
    5cd8:	11 24       	eor	r1, r1
    5cda:	c9 01       	movw	r24, r18
    5cdc:	93 95       	inc	r25
					uVol>>=8;
    5cde:	89 2f       	mov	r24, r25
    5ce0:	99 27       	eor	r25, r25
    5ce2:	02 c0       	rjmp	.+4      	; 0x5ce8 <ProcessMusic+0x3e4>
				}

			
			}else{
				uVol=0;
    5ce4:	80 e0       	ldi	r24, 0x00	; 0
    5ce6:	90 e0       	ldi	r25, 0x00	; 0
			}	

			track->tremoloPos+=track->tremoloRate;	
    5ce8:	f5 01       	movw	r30, r10
    5cea:	30 81       	ld	r19, Z
    5cec:	f7 01       	movw	r30, r14
    5cee:	39 97       	sbiw	r30, 0x09	; 9
    5cf0:	20 81       	ld	r18, Z
    5cf2:	23 0f       	add	r18, r19
    5cf4:	d5 01       	movw	r26, r10
    5cf6:	2c 93       	st	X, r18
    5cf8:	02 c0       	rjmp	.+4      	; 0x5cfe <ProcessMusic+0x3fa>

		}else{
			uVol=0;
    5cfa:	80 e0       	ldi	r24, 0x00	; 0
    5cfc:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
    5cfe:	f8 01       	movw	r30, r16
    5d00:	80 83       	st	Z, r24
    5d02:	67 96       	adiw	r28, 0x17	; 23
    5d04:	0a 5f       	subi	r16, 0xFA	; 250
    5d06:	1f 4f       	sbci	r17, 0xFF	; 255
    5d08:	f7 e1       	ldi	r31, 0x17	; 23
    5d0a:	af 0e       	add	r10, r31
    5d0c:	b1 1c       	adc	r11, r1
    5d0e:	87 e1       	ldi	r24, 0x17	; 23
    5d10:	c8 0e       	add	r12, r24
    5d12:	d1 1c       	adc	r13, r1
    5d14:	97 e1       	ldi	r25, 0x17	; 23
    5d16:	e9 0e       	add	r14, r25
    5d18:	f1 1c       	adc	r15, r1


	//
	// Process patches command streams & final volume
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    5d1a:	ad e0       	ldi	r26, 0x0D	; 13
    5d1c:	ca 35       	cpi	r28, 0x5A	; 90
    5d1e:	da 07       	cpc	r29, r26
    5d20:	09 f0       	breq	.+2      	; 0x5d24 <ProcessMusic+0x420>
    5d22:	37 cf       	rjmp	.-402    	; 0x5b92 <ProcessMusic+0x28e>
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
	}
	
}
    5d24:	df 91       	pop	r29
    5d26:	cf 91       	pop	r28
    5d28:	1f 91       	pop	r17
    5d2a:	0f 91       	pop	r16
    5d2c:	ff 90       	pop	r15
    5d2e:	ef 90       	pop	r14
    5d30:	df 90       	pop	r13
    5d32:	cf 90       	pop	r12
    5d34:	bf 90       	pop	r11
    5d36:	af 90       	pop	r10
    5d38:	9f 90       	pop	r9
    5d3a:	8f 90       	pop	r8
    5d3c:	7f 90       	pop	r7
    5d3e:	6f 90       	pop	r6
    5d40:	08 95       	ret

00005d42 <SetMasterVolume>:
}



void SetMasterVolume(unsigned char vol){
	masterVolume=vol;
    5d42:	80 93 5f 0d 	sts	0x0D5F, r24
    5d46:	08 95       	ret

00005d48 <SetMixerNote>:
; r22: -MIDI note, 69=A5(440) for waves channels (0,1,2)
;      -Noise params for channel 3
;***********************
.section .text.SetMixerNote
SetMixerNote:
	clr r25
    5d48:	99 27       	eor	r25, r25
	clr r23
    5d4a:	77 27       	eor	r23, r23
	#if SOUND_MIXER == MIXER_TYPE_VSYNC
		cpi r24,3
		brlo set_note_waves
		ret		
	#else
		cpi r24,3
    5d4c:	83 30       	cpi	r24, 0x03	; 3
		brne set_note_waves		
    5d4e:	09 f4       	brne	.+2      	; 0x5d52 <set_note_waves>
		ret
    5d50:	08 95       	ret

00005d52 <set_note_waves>:
	#endif
#endif

set_note_waves:
	;get step for note
	ldi ZL,lo8(steptable)
    5d52:	e8 e0       	ldi	r30, 0x08	; 8
	ldi ZH,hi8(steptable)
    5d54:	fe e5       	ldi	r31, 0x5E	; 94
	lsl r22
    5d56:	66 0f       	add	r22, r22
	rol r23
    5d58:	77 1f       	adc	r23, r23
	add ZL,r22
    5d5a:	e6 0f       	add	r30, r22
	adc ZH,r23	
    5d5c:	f7 1f       	adc	r31, r23

	lpm r26,Z+
    5d5e:	a5 91       	lpm	r26, Z+
	lpm r27,Z
    5d60:	b4 91       	lpm	r27, Z

	ldi ZL,lo8(mixerStruct)
    5d62:	e8 eb       	ldi	r30, 0xB8	; 184
	ldi ZH,hi8(mixerStruct)
    5d64:	fc e0       	ldi	r31, 0x0C	; 12
	ldi r18,CHANNEL_STRUCT_SIZE
    5d66:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24
    5d68:	28 9f       	mul	r18, r24
	add ZL,r0
    5d6a:	e0 0d       	add	r30, r0
	adc ZH,r1
    5d6c:	f1 1d       	adc	r31, r1
	
	std Z+step_lo,r26
    5d6e:	a1 83       	std	Z+1, r26	; 0x01
	std Z+step_hi,r27
    5d70:	b2 83       	std	Z+2, r27	; 0x02
	
	clr r1
    5d72:	11 24       	eor	r1, r1
	

	ret
    5d74:	08 95       	ret

00005d76 <SetMixerWave>:
;         Noise channel: 0xfe=7 bit lfsr, 0xff=15 bit lfsr
;                 
;***********************
.section .text.SetMixerWave
SetMixerWave:
	clr r25
    5d76:	99 27       	eor	r25, r25
	clr r23
    5d78:	77 27       	eor	r23, r23

	ldi ZL,lo8(mixerStruct)
    5d7a:	e8 eb       	ldi	r30, 0xB8	; 184
	ldi ZH,hi8(mixerStruct)
    5d7c:	fc e0       	ldi	r31, 0x0C	; 12
	ldi r18,CHANNEL_STRUCT_SIZE
    5d7e:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24	
    5d80:	28 9f       	mul	r18, r24
	add ZL,r0
    5d82:	e0 0d       	add	r30, r0
	adc ZH,r1
    5d84:	f1 1d       	adc	r31, r1

#if MIXER_CHAN4_TYPE == 0
	cpi r22,0xfe	;7bit lfsr
    5d86:	6e 3f       	cpi	r22, 0xFE	; 254
	brne smw1
    5d88:	31 f4       	brne	.+12     	; 0x5d96 <smw1>
	lds r22,tr4_params
    5d8a:	60 91 cb 0c 	lds	r22, 0x0CCB
	andi r22,0xfe;
    5d8e:	6e 7f       	andi	r22, 0xFE	; 254
	sts tr4_params,r22
    5d90:	60 93 cb 0c 	sts	0x0CCB, r22
	rjmp esmw	
    5d94:	0b c0       	rjmp	.+22     	; 0x5dac <esmw>

00005d96 <smw1>:
smw1:
	cpi r22,0xff	;15bit lfsr
    5d96:	6f 3f       	cpi	r22, 0xFF	; 255
	brne smw2
    5d98:	31 f4       	brne	.+12     	; 0x5da6 <smw2>
	lds r22,tr4_params
    5d9a:	60 91 cb 0c 	lds	r22, 0x0CCB
	ori r22,0xfe;
    5d9e:	6e 6f       	ori	r22, 0xFE	; 254
	sts tr4_params,r22	
    5da0:	60 93 cb 0c 	sts	0x0CCB, r22
	rjmp esmw
    5da4:	03 c0       	rjmp	.+6      	; 0x5dac <esmw>

00005da6 <smw2>:
smw2:
#endif

	ldi r23,hi8(waves)
    5da6:	70 e6       	ldi	r23, 0x60	; 96
	add r23,r22
    5da8:	76 0f       	add	r23, r22
	std Z+samplepos_hi,r23 ;store path No
    5daa:	75 83       	std	Z+5, r23	; 0x05

00005dac <esmw>:

esmw:
	clr r1	
    5dac:	11 24       	eor	r1, r1
	ret
    5dae:	08 95       	ret
	...

00005e00 <DisableSoundEngine>:
; no CPU cycles are consumed.
; C-callable
;*****************************
.section .text.DisableSoundEngine
DisableSoundEngine:	
	ldi r24,0
    5e00:	80 e0       	ldi	r24, 0x00	; 0
	sts sound_enabled,r24
    5e02:	80 93 b7 0c 	sts	0x0CB7, r24
	ret
    5e06:	08 95       	ret

00005e08 <steptable>:
    5e08:	22 00       	.word	0x0022	; ????
    5e0a:	24 00       	.word	0x0024	; ????
    5e0c:	26 00       	.word	0x0026	; ????
    5e0e:	28 00       	.word	0x0028	; ????
    5e10:	2b 00       	.word	0x002b	; ????
    5e12:	2d 00       	.word	0x002d	; ????
    5e14:	30 00       	.word	0x0030	; ????
    5e16:	33 00       	.word	0x0033	; ????
    5e18:	36 00       	.word	0x0036	; ????
    5e1a:	39 00       	.word	0x0039	; ????
    5e1c:	3d 00       	.word	0x003d	; ????
    5e1e:	40 00       	.word	0x0040	; ????
    5e20:	44 00       	.word	0x0044	; ????
    5e22:	48 00       	.word	0x0048	; ????
    5e24:	4c 00       	.word	0x004c	; ????
    5e26:	51 00       	.word	0x0051	; ????
    5e28:	56 00       	.word	0x0056	; ????
    5e2a:	5b 00       	.word	0x005b	; ????
    5e2c:	60 00       	.word	0x0060	; ????
    5e2e:	66 00       	.word	0x0066	; ????
    5e30:	6c 00       	.word	0x006c	; ????
    5e32:	73 00       	.word	0x0073	; ????
    5e34:	79 00       	.word	0x0079	; ????
    5e36:	81 00       	.word	0x0081	; ????
    5e38:	88 00       	.word	0x0088	; ????
    5e3a:	90 00       	.word	0x0090	; ????
    5e3c:	99 00       	.word	0x0099	; ????
    5e3e:	a2 00       	.word	0x00a2	; ????
    5e40:	ac 00       	.word	0x00ac	; ????
    5e42:	b6 00       	.word	0x00b6	; ????
    5e44:	c1 00       	.word	0x00c1	; ????
    5e46:	cc 00       	.word	0x00cc	; ????
    5e48:	d8 00       	.word	0x00d8	; ????
    5e4a:	e5 00       	.word	0x00e5	; ????
    5e4c:	f3 00       	.word	0x00f3	; ????
    5e4e:	01 01       	movw	r0, r2
    5e50:	10 01       	movw	r2, r0
    5e52:	21 01       	movw	r4, r2
    5e54:	32 01       	movw	r6, r4
    5e56:	44 01       	movw	r8, r8
    5e58:	57 01       	movw	r10, r14
    5e5a:	6c 01       	movw	r12, r24
    5e5c:	81 01       	movw	r16, r2
    5e5e:	98 01       	movw	r18, r16
    5e60:	b0 01       	movw	r22, r0
    5e62:	ca 01       	movw	r24, r20
    5e64:	e5 01       	movw	r28, r10
    5e66:	02 02       	muls	r16, r18
    5e68:	21 02       	muls	r18, r17
    5e6a:	41 02       	muls	r20, r17
    5e6c:	64 02       	muls	r22, r20
    5e6e:	88 02       	muls	r24, r24
    5e70:	ae 02       	muls	r26, r30
    5e72:	d7 02       	muls	r29, r23
    5e74:	03 03       	mulsu	r16, r19
    5e76:	30 03       	mulsu	r19, r16
    5e78:	61 03       	mulsu	r22, r17
    5e7a:	94 03       	fmuls	r17, r20
    5e7c:	cb 03       	fmulsu	r20, r19
    5e7e:	05 04       	cpc	r0, r5
    5e80:	42 04       	cpc	r4, r2
    5e82:	83 04       	cpc	r8, r3
    5e84:	c7 04       	cpc	r12, r7
    5e86:	10 05       	cpc	r17, r0
    5e88:	5d 05       	cpc	r21, r13
    5e8a:	af 05       	cpc	r26, r15
    5e8c:	05 06       	cpc	r0, r21
    5e8e:	61 06       	cpc	r6, r17
    5e90:	c2 06       	cpc	r12, r18
    5e92:	29 07       	cpc	r18, r25
    5e94:	96 07       	cpc	r25, r22
    5e96:	09 08       	sbc	r0, r9
    5e98:	83 08       	sbc	r8, r3
    5e9a:	05 09       	sbc	r16, r5
    5e9c:	8e 09       	sbc	r24, r14
    5e9e:	20 0a       	sbc	r2, r16
    5ea0:	ba 0a       	sbc	r11, r26
    5ea2:	5d 0b       	sbc	r21, r29
    5ea4:	0a 0c       	add	r0, r10
    5ea6:	c1 0c       	add	r12, r1
    5ea8:	84 0d       	add	r24, r4
    5eaa:	51 0e       	add	r5, r17
    5eac:	2b 0f       	add	r18, r27
    5eae:	12 10       	cpse	r1, r2
    5eb0:	07 11       	cpse	r16, r7
    5eb2:	0a 12       	cpse	r0, r26
    5eb4:	1d 13       	cpse	r17, r29
    5eb6:	40 14       	cp	r4, r0
    5eb8:	74 15       	cp	r23, r4
    5eba:	ba 16       	cp	r11, r26
    5ebc:	14 18       	sub	r1, r4
    5ebe:	83 19       	sub	r24, r3
    5ec0:	07 1b       	sub	r16, r23
    5ec2:	a3 1c       	adc	r10, r3
    5ec4:	57 1e       	adc	r5, r23
    5ec6:	24 20       	and	r2, r4
    5ec8:	0e 22       	and	r0, r30
    5eca:	14 24       	eor	r1, r4
    5ecc:	39 26       	eor	r3, r25
    5ece:	7f 28       	or	r7, r15
    5ed0:	e8 2a       	or	r14, r24
    5ed2:	75 2d       	mov	r23, r5
    5ed4:	29 30       	cpi	r18, 0x09	; 9
    5ed6:	06 33       	cpi	r16, 0x36	; 54
    5ed8:	0f 36       	cpi	r16, 0x6F	; 111
    5eda:	45 39       	cpi	r20, 0x95	; 149
    5edc:	ad 3c       	cpi	r26, 0xCD	; 205
    5ede:	49 40       	sbci	r20, 0x09	; 9
    5ee0:	1b 44       	sbci	r17, 0x4B	; 75
    5ee2:	28 48       	sbci	r18, 0x88	; 136
    5ee4:	73 4c       	sbci	r23, 0xC3	; 195
    5ee6:	fe 50       	subi	r31, 0x0E	; 14
    5ee8:	cf 55       	subi	r28, 0x5F	; 95
    5eea:	ea 5a       	subi	r30, 0xAA	; 170
    5eec:	51 60       	ori	r21, 0x01	; 1
    5eee:	0c 66       	ori	r16, 0x6C	; 108
    5ef0:	1d 6c       	ori	r17, 0xCD	; 205
    5ef2:	8b 72       	andi	r24, 0x2B	; 43
    5ef4:	5a 79       	andi	r21, 0x9A	; 154
    5ef6:	92 80       	ldd	r9, Z+2	; 0x02
    5ef8:	37 88       	ldd	r3, Z+23	; 0x17
    5efa:	50 90 e5 98 	lds	r5, 0x98E5
    5efe:	fd a1       	ldd	r31, Y+37	; 0x25
    5f00:	9f ab       	std	Y+55, r25	; 0x37
    5f02:	d3 b5       	in	r29, 0x23	; 35
    5f04:	a3 c0       	rjmp	.+326    	; 0x604c <waves+0x4c>
	...

00006000 <waves>:
    6000:	00 03       	mulsu	r16, r16
    6002:	06 09       	sbc	r16, r6
    6004:	0c 10       	cpse	r0, r12
    6006:	13 16       	cp	r1, r19
    6008:	19 1c       	adc	r1, r9
    600a:	1f 22       	and	r1, r31
    600c:	25 28       	or	r2, r5
    600e:	2b 2e       	mov	r2, r27
    6010:	31 33       	cpi	r19, 0x31	; 49
    6012:	36 39       	cpi	r19, 0x96	; 150
    6014:	3c 3f       	cpi	r19, 0xFC	; 252
    6016:	41 44       	sbci	r20, 0x41	; 65
    6018:	47 49       	sbci	r20, 0x97	; 151
    601a:	4c 4e       	sbci	r20, 0xEC	; 236
    601c:	51 53       	subi	r21, 0x31	; 49
    601e:	55 58       	subi	r21, 0x85	; 133
    6020:	5a 5c       	subi	r21, 0xCA	; 202
    6022:	5e 60       	ori	r21, 0x0E	; 14
    6024:	62 64       	ori	r22, 0x42	; 66
    6026:	66 68       	ori	r22, 0x86	; 134
    6028:	6a 6b       	ori	r22, 0xBA	; 186
    602a:	6d 6f       	ori	r22, 0xFD	; 253
    602c:	70 71       	andi	r23, 0x10	; 16
    602e:	73 74       	andi	r23, 0x43	; 67
    6030:	75 76       	andi	r23, 0x65	; 101
    6032:	78 79       	andi	r23, 0x98	; 152
    6034:	7a 7a       	andi	r23, 0xAA	; 170
    6036:	7b 7c       	andi	r23, 0xCB	; 203
    6038:	7d 7d       	andi	r23, 0xDD	; 221
    603a:	7e 7e       	andi	r23, 0xEE	; 238
    603c:	7e 7f       	andi	r23, 0xFE	; 254
    603e:	7f 7f       	andi	r23, 0xFF	; 255
    6040:	7f 7f       	andi	r23, 0xFF	; 255
    6042:	7f 7f       	andi	r23, 0xFF	; 255
    6044:	7e 7e       	andi	r23, 0xEE	; 238
    6046:	7e 7d       	andi	r23, 0xDE	; 222
    6048:	7d 7c       	andi	r23, 0xCD	; 205
    604a:	7b 7a       	andi	r23, 0xAB	; 171
    604c:	7a 79       	andi	r23, 0x9A	; 154
    604e:	78 76       	andi	r23, 0x68	; 104
    6050:	75 74       	andi	r23, 0x45	; 69
    6052:	73 71       	andi	r23, 0x13	; 19
    6054:	70 6f       	ori	r23, 0xF0	; 240
    6056:	6d 6b       	ori	r22, 0xBD	; 189
    6058:	6a 68       	ori	r22, 0x8A	; 138
    605a:	66 64       	ori	r22, 0x46	; 70
    605c:	62 60       	ori	r22, 0x02	; 2
    605e:	5e 5c       	subi	r21, 0xCE	; 206
    6060:	5a 58       	subi	r21, 0x8A	; 138
    6062:	55 53       	subi	r21, 0x35	; 53
    6064:	51 4e       	sbci	r21, 0xE1	; 225
    6066:	4c 49       	sbci	r20, 0x9C	; 156
    6068:	47 44       	sbci	r20, 0x47	; 71
    606a:	41 3f       	cpi	r20, 0xF1	; 241
    606c:	3c 39       	cpi	r19, 0x9C	; 156
    606e:	36 33       	cpi	r19, 0x36	; 54
    6070:	31 2e       	mov	r3, r17
    6072:	2b 28       	or	r2, r11
    6074:	25 22       	and	r2, r21
    6076:	1f 1c       	adc	r1, r15
    6078:	19 16       	cp	r1, r25
    607a:	13 10       	cpse	r1, r3
    607c:	0c 09       	sbc	r16, r12
    607e:	06 03       	mulsu	r16, r22
    6080:	00 fd       	sbrc	r16, 0
    6082:	fa f7       	brpl	.-2      	; 0x6082 <waves+0x82>
    6084:	f4 f0       	brlt	.+60     	; 0x60c2 <waves+0xc2>
    6086:	ed ea       	ldi	r30, 0xAD	; 173
    6088:	e7 e4       	ldi	r30, 0x47	; 71
    608a:	e1 de       	rcall	.-574    	; 0x5e4e <steptable+0x46>
    608c:	db d8       	rcall	.-3658   	; 0x5244 <ch4_end+0x4c>
    608e:	d5 d2       	rcall	.+1450   	; 0x663a <waves+0x63a>
    6090:	cf cd       	rjmp	.-1122   	; 0x5c30 <ProcessMusic+0x32c>
    6092:	ca c7       	rjmp	.+3988   	; 0x7028 <LBMapSprite+0x66>
    6094:	c4 c1       	rjmp	.+904    	; 0x641e <waves+0x41e>
    6096:	bf bc       	out	0x2f, r11	; 47
    6098:	b9 b7       	in	r27, 0x39	; 57
    609a:	b4 b2       	in	r11, 0x14	; 20
    609c:	af ad       	ldd	r26, Y+63	; 0x3f
    609e:	ab a8       	ldd	r10, Y+51	; 0x33
    60a0:	a6 a4       	ldd	r10, Z+46	; 0x2e
    60a2:	a2 a0       	ldd	r10, Z+34	; 0x22
    60a4:	9e 9c       	mul	r9, r14
    60a6:	9a 98       	cbi	0x13, 2	; 19
    60a8:	96 95       	lsr	r25
    60aa:	93 91       	.word	0x9193	; ????
    60ac:	90 8f       	std	Z+24, r25	; 0x18
    60ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    60b0:	8b 8a       	std	Y+19, r8	; 0x13
    60b2:	88 87       	std	Y+8, r24	; 0x08
    60b4:	86 86       	std	Z+14, r8	; 0x0e
    60b6:	85 84       	ldd	r8, Z+13	; 0x0d
    60b8:	83 83       	std	Z+3, r24	; 0x03
    60ba:	82 82       	std	Z+2, r8	; 0x02
    60bc:	82 81       	ldd	r24, Z+2	; 0x02
    60be:	81 81       	ldd	r24, Z+1	; 0x01
    60c0:	81 81       	ldd	r24, Z+1	; 0x01
    60c2:	81 81       	ldd	r24, Z+1	; 0x01
    60c4:	82 82       	std	Z+2, r8	; 0x02
    60c6:	82 83       	std	Z+2, r24	; 0x02
    60c8:	83 84       	ldd	r8, Z+11	; 0x0b
    60ca:	85 86       	std	Z+13, r8	; 0x0d
    60cc:	86 87       	std	Z+14, r24	; 0x0e
    60ce:	88 8a       	std	Y+16, r8	; 0x10
    60d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    60d2:	8d 8f       	std	Y+29, r24	; 0x1d
    60d4:	90 91 93 95 	lds	r25, 0x9593
    60d8:	96 98       	cbi	0x12, 6	; 18
    60da:	9a 9c       	mul	r9, r10
    60dc:	9e a0       	ldd	r9, Y+38	; 0x26
    60de:	a2 a4       	ldd	r10, Z+42	; 0x2a
    60e0:	a6 a8       	ldd	r10, Z+54	; 0x36
    60e2:	ab ad       	ldd	r26, Y+59	; 0x3b
    60e4:	af b2       	in	r10, 0x1f	; 31
    60e6:	b4 b7       	in	r27, 0x34	; 52
    60e8:	b9 bc       	out	0x29, r11	; 41
    60ea:	bf c1       	rjmp	.+894    	; 0x646a <waves+0x46a>
    60ec:	c4 c7       	rjmp	.+3976   	; 0x7076 <LBMoveSprite+0x10>
    60ee:	ca cd       	rjmp	.-1132   	; 0x5c84 <ProcessMusic+0x380>
    60f0:	cf d2       	rcall	.+1438   	; 0x6690 <waves+0x690>
    60f2:	d5 d8       	rcall	.-3670   	; 0x529e <ClearVram+0x4>
    60f4:	db de       	rcall	.-586    	; 0x5eac <steptable+0xa4>
    60f6:	e1 e4       	ldi	r30, 0x41	; 65
    60f8:	e7 ea       	ldi	r30, 0xA7	; 167
    60fa:	ed f0       	brhs	.+58     	; 0x6136 <waves+0x136>
    60fc:	f4 f7       	brge	.-4      	; 0x60fa <waves+0xfa>
    60fe:	fa fd       	.word	0xfdfa	; ????
    6100:	80 81       	ld	r24, Z
    6102:	82 83       	std	Z+2, r24	; 0x02
    6104:	84 85       	ldd	r24, Z+12	; 0x0c
    6106:	86 87       	std	Z+14, r24	; 0x0e
    6108:	88 89       	ldd	r24, Y+16	; 0x10
    610a:	8a 8b       	std	Y+18, r24	; 0x12
    610c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    610e:	8e 8f       	std	Y+30, r24	; 0x1e
    6110:	90 91 92 93 	lds	r25, 0x9392
    6114:	94 95       	.word	0x9594	; ????
    6116:	96 97       	sbiw	r26, 0x26	; 38
    6118:	98 99       	sbic	0x13, 0	; 19
    611a:	9a 9b       	sbis	0x13, 2	; 19
    611c:	9c 9d       	mul	r25, r12
    611e:	9e 9f       	mul	r25, r30
    6120:	a0 a1       	ldd	r26, Z+32	; 0x20
    6122:	a2 a3       	std	Z+34, r26	; 0x22
    6124:	a4 a5       	ldd	r26, Z+44	; 0x2c
    6126:	a6 a7       	std	Z+46, r26	; 0x2e
    6128:	a8 a9       	ldd	r26, Y+48	; 0x30
    612a:	aa ab       	std	Y+50, r26	; 0x32
    612c:	ac ad       	ldd	r26, Y+60	; 0x3c
    612e:	ae af       	std	Y+62, r26	; 0x3e
    6130:	b0 b1       	in	r27, 0x00	; 0
    6132:	b2 b3       	in	r27, 0x12	; 18
    6134:	b4 b5       	in	r27, 0x24	; 36
    6136:	b6 b7       	in	r27, 0x36	; 54
    6138:	b8 b9       	out	0x08, r27	; 8
    613a:	ba bb       	out	0x1a, r27	; 26
    613c:	bc bd       	out	0x2c, r27	; 44
    613e:	be bf       	out	0x3e, r27	; 62
    6140:	c0 c1       	rjmp	.+896    	; 0x64c2 <waves+0x4c2>
    6142:	c2 c3       	rjmp	.+1924   	; 0x68c8 <waves+0x8c8>
    6144:	c4 c5       	rjmp	.+2952   	; 0x6cce <DrawMap+0x16>
    6146:	c6 c7       	rjmp	.+3980   	; 0x70d4 <LBMoveSprite+0x6e>
    6148:	c8 c9       	rjmp	.-3184   	; 0x54da <isEepromFormatted+0x18>
    614a:	ca cb       	rjmp	.-2156   	; 0x58e0 <TriggerNote+0x5c>
    614c:	cc cd       	rjmp	.-1128   	; 0x5ce6 <ProcessMusic+0x3e2>
    614e:	ce cf       	rjmp	.-100    	; 0x60ec <waves+0xec>
    6150:	d0 d1       	rcall	.+928    	; 0x64f2 <waves+0x4f2>
    6152:	d2 d3       	rcall	.+1956   	; 0x68f8 <waves+0x8f8>
    6154:	d4 d5       	rcall	.+2984   	; 0x6cfe <DrawMap+0x46>
    6156:	d6 d7       	rcall	.+4012   	; 0x7104 <LBRotateSprites+0x22>
    6158:	d8 d9       	rcall	.-3152   	; 0x550a <PatchCommand05+0x4>
    615a:	da db       	rcall	.-2124   	; 0x5910 <ProcessMusic+0xc>
    615c:	dc dd       	rcall	.-1096   	; 0x5d16 <ProcessMusic+0x412>
    615e:	de df       	rcall	.-68     	; 0x611c <waves+0x11c>
    6160:	e0 e1       	ldi	r30, 0x10	; 16
    6162:	e2 e3       	ldi	r30, 0x32	; 50
    6164:	e4 e5       	ldi	r30, 0x54	; 84
    6166:	e6 e7       	ldi	r30, 0x76	; 118
    6168:	e8 e9       	ldi	r30, 0x98	; 152
    616a:	ea eb       	ldi	r30, 0xBA	; 186
    616c:	ec ed       	ldi	r30, 0xDC	; 220
    616e:	ee ef       	ldi	r30, 0xFE	; 254
    6170:	f0 f1       	brcs	.+124    	; 0x61ee <waves+0x1ee>
    6172:	f2 f3       	brmi	.-4      	; 0x6170 <waves+0x170>
    6174:	f4 f5       	brge	.+124    	; 0x61f2 <waves+0x1f2>
    6176:	f6 f7       	brtc	.-4      	; 0x6174 <waves+0x174>
    6178:	f8 f9       	.word	0xf9f8	; ????
    617a:	fa fb       	.word	0xfbfa	; ????
    617c:	fc fd       	.word	0xfdfc	; ????
    617e:	fe ff       	.word	0xfffe	; ????
    6180:	00 01       	movw	r0, r0
    6182:	02 03       	mulsu	r16, r18
    6184:	04 05       	cpc	r16, r4
    6186:	06 07       	cpc	r16, r22
    6188:	08 09       	sbc	r16, r8
    618a:	0a 0b       	sbc	r16, r26
    618c:	0c 0d       	add	r16, r12
    618e:	0e 0f       	add	r16, r30
    6190:	10 11       	cpse	r17, r0
    6192:	12 13       	cpse	r17, r18
    6194:	14 15       	cp	r17, r4
    6196:	16 17       	cp	r17, r22
    6198:	18 19       	sub	r17, r8
    619a:	1a 1b       	sub	r17, r26
    619c:	1c 1d       	adc	r17, r12
    619e:	1e 1f       	adc	r17, r30
    61a0:	20 21       	and	r18, r0
    61a2:	22 23       	and	r18, r18
    61a4:	24 25       	eor	r18, r4
    61a6:	26 27       	eor	r18, r22
    61a8:	28 29       	or	r18, r8
    61aa:	2a 2b       	or	r18, r26
    61ac:	2c 2d       	mov	r18, r12
    61ae:	2e 2f       	mov	r18, r30
    61b0:	30 31       	cpi	r19, 0x10	; 16
    61b2:	32 33       	cpi	r19, 0x32	; 50
    61b4:	34 35       	cpi	r19, 0x54	; 84
    61b6:	36 37       	cpi	r19, 0x76	; 118
    61b8:	38 39       	cpi	r19, 0x98	; 152
    61ba:	3a 3b       	cpi	r19, 0xBA	; 186
    61bc:	3c 3d       	cpi	r19, 0xDC	; 220
    61be:	3e 3f       	cpi	r19, 0xFE	; 254
    61c0:	40 41       	sbci	r20, 0x10	; 16
    61c2:	42 43       	sbci	r20, 0x32	; 50
    61c4:	44 45       	sbci	r20, 0x54	; 84
    61c6:	46 47       	sbci	r20, 0x76	; 118
    61c8:	48 49       	sbci	r20, 0x98	; 152
    61ca:	4a 4b       	sbci	r20, 0xBA	; 186
    61cc:	4c 4d       	sbci	r20, 0xDC	; 220
    61ce:	4e 4f       	sbci	r20, 0xFE	; 254
    61d0:	50 51       	subi	r21, 0x10	; 16
    61d2:	52 53       	subi	r21, 0x32	; 50
    61d4:	54 55       	subi	r21, 0x54	; 84
    61d6:	56 57       	subi	r21, 0x76	; 118
    61d8:	58 59       	subi	r21, 0x98	; 152
    61da:	5a 5b       	subi	r21, 0xBA	; 186
    61dc:	5c 5d       	subi	r21, 0xDC	; 220
    61de:	5e 5f       	subi	r21, 0xFE	; 254
    61e0:	60 61       	ori	r22, 0x10	; 16
    61e2:	62 63       	ori	r22, 0x32	; 50
    61e4:	64 65       	ori	r22, 0x54	; 84
    61e6:	66 67       	ori	r22, 0x76	; 118
    61e8:	68 69       	ori	r22, 0x98	; 152
    61ea:	6a 6b       	ori	r22, 0xBA	; 186
    61ec:	6c 6d       	ori	r22, 0xDC	; 220
    61ee:	6e 6f       	ori	r22, 0xFE	; 254
    61f0:	70 71       	andi	r23, 0x10	; 16
    61f2:	72 73       	andi	r23, 0x32	; 50
    61f4:	74 75       	andi	r23, 0x54	; 84
    61f6:	76 77       	andi	r23, 0x76	; 118
    61f8:	78 79       	andi	r23, 0x98	; 152
    61fa:	7a 7b       	andi	r23, 0xBA	; 186
    61fc:	7c 7d       	andi	r23, 0xDC	; 220
    61fe:	7e 7f       	andi	r23, 0xFE	; 254
    6200:	00 02       	muls	r16, r16
    6202:	04 06       	cpc	r0, r20
    6204:	08 0a       	sbc	r0, r24
    6206:	0c 0e       	add	r0, r28
    6208:	10 12       	cpse	r1, r16
    620a:	14 16       	cp	r1, r20
    620c:	18 1a       	sub	r1, r24
    620e:	1c 1e       	adc	r1, r28
    6210:	20 22       	and	r2, r16
    6212:	24 26       	eor	r2, r20
    6214:	28 2a       	or	r2, r24
    6216:	2c 2e       	mov	r2, r28
    6218:	30 32       	cpi	r19, 0x20	; 32
    621a:	34 36       	cpi	r19, 0x64	; 100
    621c:	38 3a       	cpi	r19, 0xA8	; 168
    621e:	3c 3e       	cpi	r19, 0xEC	; 236
    6220:	40 42       	sbci	r20, 0x20	; 32
    6222:	44 46       	sbci	r20, 0x64	; 100
    6224:	48 4a       	sbci	r20, 0xA8	; 168
    6226:	4c 4e       	sbci	r20, 0xEC	; 236
    6228:	50 52       	subi	r21, 0x20	; 32
    622a:	54 56       	subi	r21, 0x64	; 100
    622c:	58 5a       	subi	r21, 0xA8	; 168
    622e:	5c 5e       	subi	r21, 0xEC	; 236
    6230:	60 62       	ori	r22, 0x20	; 32
    6232:	64 66       	ori	r22, 0x64	; 100
    6234:	68 6a       	ori	r22, 0xA8	; 168
    6236:	6c 6e       	ori	r22, 0xEC	; 236
    6238:	70 72       	andi	r23, 0x20	; 32
    623a:	74 76       	andi	r23, 0x64	; 100
    623c:	78 7a       	andi	r23, 0xA8	; 168
    623e:	7c 7e       	andi	r23, 0xEC	; 236
    6240:	7f 7d       	andi	r23, 0xDF	; 223
    6242:	7b 79       	andi	r23, 0x9B	; 155
    6244:	77 75       	andi	r23, 0x57	; 87
    6246:	73 71       	andi	r23, 0x13	; 19
    6248:	6f 6d       	ori	r22, 0xDF	; 223
    624a:	6b 69       	ori	r22, 0x9B	; 155
    624c:	67 65       	ori	r22, 0x57	; 87
    624e:	63 61       	ori	r22, 0x13	; 19
    6250:	5f 5d       	subi	r21, 0xDF	; 223
    6252:	5b 59       	subi	r21, 0x9B	; 155
    6254:	57 55       	subi	r21, 0x57	; 87
    6256:	53 51       	subi	r21, 0x13	; 19
    6258:	4f 4d       	sbci	r20, 0xDF	; 223
    625a:	4b 49       	sbci	r20, 0x9B	; 155
    625c:	47 45       	sbci	r20, 0x57	; 87
    625e:	43 41       	sbci	r20, 0x13	; 19
    6260:	3f 3d       	cpi	r19, 0xDF	; 223
    6262:	3b 39       	cpi	r19, 0x9B	; 155
    6264:	37 35       	cpi	r19, 0x57	; 87
    6266:	33 31       	cpi	r19, 0x13	; 19
    6268:	2f 2d       	mov	r18, r15
    626a:	2b 29       	or	r18, r11
    626c:	27 25       	eor	r18, r7
    626e:	23 21       	and	r18, r3
    6270:	1f 1d       	adc	r17, r15
    6272:	1b 19       	sub	r17, r11
    6274:	17 15       	cp	r17, r7
    6276:	13 11       	cpse	r17, r3
    6278:	0f 0d       	add	r16, r15
    627a:	0b 09       	sbc	r16, r11
    627c:	07 05       	cpc	r16, r7
    627e:	03 01       	movw	r0, r6
    6280:	ff fd       	.word	0xfdff	; ????
    6282:	fb f9       	.word	0xf9fb	; ????
    6284:	f7 f5       	brid	.+124    	; 0x6302 <waves+0x302>
    6286:	f3 f1       	brvs	.+124    	; 0x6304 <waves+0x304>
    6288:	ef ed       	ldi	r30, 0xDF	; 223
    628a:	eb e9       	ldi	r30, 0x9B	; 155
    628c:	e7 e5       	ldi	r30, 0x57	; 87
    628e:	e3 e1       	ldi	r30, 0x13	; 19
    6290:	df dd       	rcall	.-1090   	; 0x5e50 <steptable+0x48>
    6292:	db d9       	rcall	.-3146   	; 0x564a <InitMusicPlayer+0x2>
    6294:	d7 d5       	rcall	.+2990   	; 0x6e44 <FadeIn+0x4>
    6296:	d3 d1       	rcall	.+934    	; 0x663e <waves+0x63e>
    6298:	cf cd       	rjmp	.-1122   	; 0x5e38 <steptable+0x30>
    629a:	cb c9       	rjmp	.-3178   	; 0x5632 <PatchCommand14+0x3e>
    629c:	c7 c5       	rjmp	.+2958   	; 0x6e2c <doFade+0x8>
    629e:	c3 c1       	rjmp	.+902    	; 0x6626 <waves+0x626>
    62a0:	bf bd       	out	0x2f, r27	; 47
    62a2:	bb b9       	out	0x0b, r27	; 11
    62a4:	b7 b5       	in	r27, 0x27	; 39
    62a6:	b3 b1       	in	r27, 0x03	; 3
    62a8:	af ad       	ldd	r26, Y+63	; 0x3f
    62aa:	ab a9       	ldd	r26, Y+51	; 0x33
    62ac:	a7 a5       	ldd	r26, Z+47	; 0x2f
    62ae:	a3 a1       	ldd	r26, Z+35	; 0x23
    62b0:	9f 9d       	mul	r25, r15
    62b2:	9b 99       	sbic	0x13, 3	; 19
    62b4:	97 95       	ror	r25
    62b6:	93 91       	.word	0x9193	; ????
    62b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    62ba:	8b 89       	ldd	r24, Y+19	; 0x13
    62bc:	87 85       	ldd	r24, Z+15	; 0x0f
    62be:	83 81       	ldd	r24, Z+3	; 0x03
    62c0:	80 82       	st	Z, r8
    62c2:	84 86       	std	Z+12, r8	; 0x0c
    62c4:	88 8a       	std	Y+16, r8	; 0x10
    62c6:	8c 8e       	std	Y+28, r8	; 0x1c
    62c8:	90 92 94 96 	sts	0x9694, r9
    62cc:	98 9a       	sbi	0x13, 0	; 19
    62ce:	9c 9e       	mul	r9, r28
    62d0:	a0 a2       	std	Z+32, r10	; 0x20
    62d2:	a4 a6       	std	Z+44, r10	; 0x2c
    62d4:	a8 aa       	std	Y+48, r10	; 0x30
    62d6:	ac ae       	std	Y+60, r10	; 0x3c
    62d8:	b0 b2       	in	r11, 0x10	; 16
    62da:	b4 b6       	in	r11, 0x34	; 52
    62dc:	b8 ba       	out	0x18, r11	; 24
    62de:	bc be       	out	0x3c, r11	; 60
    62e0:	c0 c2       	rjmp	.+1408   	; 0x6862 <waves+0x862>
    62e2:	c4 c6       	rjmp	.+3464   	; 0x706c <LBMoveSprite+0x6>
    62e4:	c8 ca       	rjmp	.-2672   	; 0x5876 <TriggerFx+0x82>
    62e6:	cc ce       	rjmp	.-616    	; 0x6080 <waves+0x80>
    62e8:	d0 d2       	rcall	.+1440   	; 0x688a <waves+0x88a>
    62ea:	d4 d6       	rcall	.+3496   	; 0x7094 <LBMoveSprite+0x2e>
    62ec:	d8 da       	rcall	.-2640   	; 0x589e <TriggerNote+0x1a>
    62ee:	dc de       	rcall	.-584    	; 0x60a8 <waves+0xa8>
    62f0:	e0 e2       	ldi	r30, 0x20	; 32
    62f2:	e4 e6       	ldi	r30, 0x64	; 100
    62f4:	e8 ea       	ldi	r30, 0xA8	; 168
    62f6:	ec ee       	ldi	r30, 0xEC	; 236
    62f8:	f0 f2       	brcs	.-68     	; 0x62b6 <waves+0x2b6>
    62fa:	f4 f6       	brge	.-68     	; 0x62b8 <waves+0x2b8>
    62fc:	f8 fa       	.word	0xfaf8	; ????
    62fe:	fc fe       	.word	0xfefc	; ????
    6300:	7f 7f       	andi	r23, 0xFF	; 255
    6302:	7f 7f       	andi	r23, 0xFF	; 255
    6304:	7f 7f       	andi	r23, 0xFF	; 255
    6306:	7f 7f       	andi	r23, 0xFF	; 255
    6308:	7f 7f       	andi	r23, 0xFF	; 255
    630a:	7f 7f       	andi	r23, 0xFF	; 255
    630c:	7f 7f       	andi	r23, 0xFF	; 255
    630e:	7f 7f       	andi	r23, 0xFF	; 255
    6310:	7f 7f       	andi	r23, 0xFF	; 255
    6312:	7f 7f       	andi	r23, 0xFF	; 255
    6314:	7f 7f       	andi	r23, 0xFF	; 255
    6316:	7f 7f       	andi	r23, 0xFF	; 255
    6318:	7f 7f       	andi	r23, 0xFF	; 255
    631a:	7f 7f       	andi	r23, 0xFF	; 255
    631c:	7f 7f       	andi	r23, 0xFF	; 255
    631e:	7f 7f       	andi	r23, 0xFF	; 255
    6320:	7f 7f       	andi	r23, 0xFF	; 255
    6322:	7f 7f       	andi	r23, 0xFF	; 255
    6324:	7f 7f       	andi	r23, 0xFF	; 255
    6326:	7f 7f       	andi	r23, 0xFF	; 255
    6328:	7f 7f       	andi	r23, 0xFF	; 255
    632a:	7f 7f       	andi	r23, 0xFF	; 255
    632c:	7f 7f       	andi	r23, 0xFF	; 255
    632e:	7f 7f       	andi	r23, 0xFF	; 255
    6330:	7f 7f       	andi	r23, 0xFF	; 255
    6332:	7f 7f       	andi	r23, 0xFF	; 255
    6334:	7f 7f       	andi	r23, 0xFF	; 255
    6336:	7f 7f       	andi	r23, 0xFF	; 255
    6338:	7f 7f       	andi	r23, 0xFF	; 255
    633a:	7f 7f       	andi	r23, 0xFF	; 255
    633c:	7f 7f       	andi	r23, 0xFF	; 255
    633e:	7f 7f       	andi	r23, 0xFF	; 255
    6340:	80 80       	ld	r8, Z
    6342:	80 80       	ld	r8, Z
    6344:	80 80       	ld	r8, Z
    6346:	80 80       	ld	r8, Z
    6348:	80 80       	ld	r8, Z
    634a:	80 80       	ld	r8, Z
    634c:	80 80       	ld	r8, Z
    634e:	80 80       	ld	r8, Z
    6350:	80 80       	ld	r8, Z
    6352:	80 80       	ld	r8, Z
    6354:	80 80       	ld	r8, Z
    6356:	80 80       	ld	r8, Z
    6358:	80 80       	ld	r8, Z
    635a:	80 80       	ld	r8, Z
    635c:	80 80       	ld	r8, Z
    635e:	80 80       	ld	r8, Z
    6360:	80 80       	ld	r8, Z
    6362:	80 80       	ld	r8, Z
    6364:	80 80       	ld	r8, Z
    6366:	80 80       	ld	r8, Z
    6368:	80 80       	ld	r8, Z
    636a:	80 80       	ld	r8, Z
    636c:	80 80       	ld	r8, Z
    636e:	80 80       	ld	r8, Z
    6370:	80 80       	ld	r8, Z
    6372:	80 80       	ld	r8, Z
    6374:	80 80       	ld	r8, Z
    6376:	80 80       	ld	r8, Z
    6378:	80 80       	ld	r8, Z
    637a:	80 80       	ld	r8, Z
    637c:	80 80       	ld	r8, Z
    637e:	80 80       	ld	r8, Z
    6380:	80 80       	ld	r8, Z
    6382:	80 80       	ld	r8, Z
    6384:	80 80       	ld	r8, Z
    6386:	80 80       	ld	r8, Z
    6388:	80 80       	ld	r8, Z
    638a:	80 80       	ld	r8, Z
    638c:	80 80       	ld	r8, Z
    638e:	80 80       	ld	r8, Z
    6390:	80 80       	ld	r8, Z
    6392:	80 80       	ld	r8, Z
    6394:	80 80       	ld	r8, Z
    6396:	80 80       	ld	r8, Z
    6398:	80 80       	ld	r8, Z
    639a:	80 80       	ld	r8, Z
    639c:	80 80       	ld	r8, Z
    639e:	80 80       	ld	r8, Z
    63a0:	80 80       	ld	r8, Z
    63a2:	80 80       	ld	r8, Z
    63a4:	80 80       	ld	r8, Z
    63a6:	80 80       	ld	r8, Z
    63a8:	80 80       	ld	r8, Z
    63aa:	80 80       	ld	r8, Z
    63ac:	80 80       	ld	r8, Z
    63ae:	80 80       	ld	r8, Z
    63b0:	80 80       	ld	r8, Z
    63b2:	80 80       	ld	r8, Z
    63b4:	80 80       	ld	r8, Z
    63b6:	80 80       	ld	r8, Z
    63b8:	80 80       	ld	r8, Z
    63ba:	80 80       	ld	r8, Z
    63bc:	80 80       	ld	r8, Z
    63be:	80 80       	ld	r8, Z
    63c0:	80 80       	ld	r8, Z
    63c2:	80 80       	ld	r8, Z
    63c4:	80 80       	ld	r8, Z
    63c6:	80 80       	ld	r8, Z
    63c8:	80 80       	ld	r8, Z
    63ca:	80 80       	ld	r8, Z
    63cc:	80 80       	ld	r8, Z
    63ce:	80 80       	ld	r8, Z
    63d0:	80 80       	ld	r8, Z
    63d2:	80 80       	ld	r8, Z
    63d4:	80 80       	ld	r8, Z
    63d6:	80 80       	ld	r8, Z
    63d8:	80 80       	ld	r8, Z
    63da:	80 80       	ld	r8, Z
    63dc:	80 80       	ld	r8, Z
    63de:	80 80       	ld	r8, Z
    63e0:	80 80       	ld	r8, Z
    63e2:	80 80       	ld	r8, Z
    63e4:	80 80       	ld	r8, Z
    63e6:	80 80       	ld	r8, Z
    63e8:	80 80       	ld	r8, Z
    63ea:	80 80       	ld	r8, Z
    63ec:	80 80       	ld	r8, Z
    63ee:	80 80       	ld	r8, Z
    63f0:	80 80       	ld	r8, Z
    63f2:	80 80       	ld	r8, Z
    63f4:	80 80       	ld	r8, Z
    63f6:	80 80       	ld	r8, Z
    63f8:	80 80       	ld	r8, Z
    63fa:	80 80       	ld	r8, Z
    63fc:	80 80       	ld	r8, Z
    63fe:	80 80       	ld	r8, Z
    6400:	7f 7f       	andi	r23, 0xFF	; 255
    6402:	7f 7f       	andi	r23, 0xFF	; 255
    6404:	7f 7f       	andi	r23, 0xFF	; 255
    6406:	7f 7f       	andi	r23, 0xFF	; 255
    6408:	7f 7f       	andi	r23, 0xFF	; 255
    640a:	7f 7f       	andi	r23, 0xFF	; 255
    640c:	7f 7f       	andi	r23, 0xFF	; 255
    640e:	7f 7f       	andi	r23, 0xFF	; 255
    6410:	7f 7f       	andi	r23, 0xFF	; 255
    6412:	7f 7f       	andi	r23, 0xFF	; 255
    6414:	7f 7f       	andi	r23, 0xFF	; 255
    6416:	7f 7f       	andi	r23, 0xFF	; 255
    6418:	7f 7f       	andi	r23, 0xFF	; 255
    641a:	7f 7f       	andi	r23, 0xFF	; 255
    641c:	7f 7f       	andi	r23, 0xFF	; 255
    641e:	7f 7f       	andi	r23, 0xFF	; 255
    6420:	7f 7f       	andi	r23, 0xFF	; 255
    6422:	7f 7f       	andi	r23, 0xFF	; 255
    6424:	7f 7f       	andi	r23, 0xFF	; 255
    6426:	7f 7f       	andi	r23, 0xFF	; 255
    6428:	7f 7f       	andi	r23, 0xFF	; 255
    642a:	7f 7f       	andi	r23, 0xFF	; 255
    642c:	7f 7f       	andi	r23, 0xFF	; 255
    642e:	7f 7f       	andi	r23, 0xFF	; 255
    6430:	7f 7f       	andi	r23, 0xFF	; 255
    6432:	7f 7f       	andi	r23, 0xFF	; 255
    6434:	7f 7f       	andi	r23, 0xFF	; 255
    6436:	7f 7f       	andi	r23, 0xFF	; 255
    6438:	7f 7f       	andi	r23, 0xFF	; 255
    643a:	7f 7f       	andi	r23, 0xFF	; 255
    643c:	7f 7f       	andi	r23, 0xFF	; 255
    643e:	7f 7f       	andi	r23, 0xFF	; 255
    6440:	7f 7f       	andi	r23, 0xFF	; 255
    6442:	7f 7f       	andi	r23, 0xFF	; 255
    6444:	7f 7f       	andi	r23, 0xFF	; 255
    6446:	7f 7f       	andi	r23, 0xFF	; 255
    6448:	7f 7f       	andi	r23, 0xFF	; 255
    644a:	7f 7f       	andi	r23, 0xFF	; 255
    644c:	7f 7f       	andi	r23, 0xFF	; 255
    644e:	7f 7f       	andi	r23, 0xFF	; 255
    6450:	7f 7f       	andi	r23, 0xFF	; 255
    6452:	7f 7f       	andi	r23, 0xFF	; 255
    6454:	7f 7f       	andi	r23, 0xFF	; 255
    6456:	7f 7f       	andi	r23, 0xFF	; 255
    6458:	7f 7f       	andi	r23, 0xFF	; 255
    645a:	7f 7f       	andi	r23, 0xFF	; 255
    645c:	7f 7f       	andi	r23, 0xFF	; 255
    645e:	7f 7f       	andi	r23, 0xFF	; 255
    6460:	7f 7f       	andi	r23, 0xFF	; 255
    6462:	7f 7f       	andi	r23, 0xFF	; 255
    6464:	7f 7f       	andi	r23, 0xFF	; 255
    6466:	7f 7f       	andi	r23, 0xFF	; 255
    6468:	7f 7f       	andi	r23, 0xFF	; 255
    646a:	7f 7f       	andi	r23, 0xFF	; 255
    646c:	7f 7f       	andi	r23, 0xFF	; 255
    646e:	7f 7f       	andi	r23, 0xFF	; 255
    6470:	7f 7f       	andi	r23, 0xFF	; 255
    6472:	7f 7f       	andi	r23, 0xFF	; 255
    6474:	7f 7f       	andi	r23, 0xFF	; 255
    6476:	7f 7f       	andi	r23, 0xFF	; 255
    6478:	7f 7f       	andi	r23, 0xFF	; 255
    647a:	7f 7f       	andi	r23, 0xFF	; 255
    647c:	7f 7f       	andi	r23, 0xFF	; 255
    647e:	7f 7f       	andi	r23, 0xFF	; 255
    6480:	80 80       	ld	r8, Z
    6482:	80 80       	ld	r8, Z
    6484:	80 80       	ld	r8, Z
    6486:	80 80       	ld	r8, Z
    6488:	80 80       	ld	r8, Z
    648a:	80 80       	ld	r8, Z
    648c:	80 80       	ld	r8, Z
    648e:	80 80       	ld	r8, Z
    6490:	80 80       	ld	r8, Z
    6492:	80 80       	ld	r8, Z
    6494:	80 80       	ld	r8, Z
    6496:	80 80       	ld	r8, Z
    6498:	80 80       	ld	r8, Z
    649a:	80 80       	ld	r8, Z
    649c:	80 80       	ld	r8, Z
    649e:	80 80       	ld	r8, Z
    64a0:	80 80       	ld	r8, Z
    64a2:	80 80       	ld	r8, Z
    64a4:	80 80       	ld	r8, Z
    64a6:	80 80       	ld	r8, Z
    64a8:	80 80       	ld	r8, Z
    64aa:	80 80       	ld	r8, Z
    64ac:	80 80       	ld	r8, Z
    64ae:	80 80       	ld	r8, Z
    64b0:	80 80       	ld	r8, Z
    64b2:	80 80       	ld	r8, Z
    64b4:	80 80       	ld	r8, Z
    64b6:	80 80       	ld	r8, Z
    64b8:	80 80       	ld	r8, Z
    64ba:	80 80       	ld	r8, Z
    64bc:	80 80       	ld	r8, Z
    64be:	80 80       	ld	r8, Z
    64c0:	80 80       	ld	r8, Z
    64c2:	80 80       	ld	r8, Z
    64c4:	80 80       	ld	r8, Z
    64c6:	80 80       	ld	r8, Z
    64c8:	80 80       	ld	r8, Z
    64ca:	80 80       	ld	r8, Z
    64cc:	80 80       	ld	r8, Z
    64ce:	80 80       	ld	r8, Z
    64d0:	80 80       	ld	r8, Z
    64d2:	80 80       	ld	r8, Z
    64d4:	80 80       	ld	r8, Z
    64d6:	80 80       	ld	r8, Z
    64d8:	80 80       	ld	r8, Z
    64da:	80 80       	ld	r8, Z
    64dc:	80 80       	ld	r8, Z
    64de:	80 80       	ld	r8, Z
    64e0:	80 80       	ld	r8, Z
    64e2:	80 80       	ld	r8, Z
    64e4:	80 80       	ld	r8, Z
    64e6:	80 80       	ld	r8, Z
    64e8:	80 80       	ld	r8, Z
    64ea:	80 80       	ld	r8, Z
    64ec:	80 80       	ld	r8, Z
    64ee:	80 80       	ld	r8, Z
    64f0:	80 80       	ld	r8, Z
    64f2:	80 80       	ld	r8, Z
    64f4:	80 80       	ld	r8, Z
    64f6:	80 80       	ld	r8, Z
    64f8:	80 80       	ld	r8, Z
    64fa:	80 80       	ld	r8, Z
    64fc:	80 80       	ld	r8, Z
    64fe:	80 80       	ld	r8, Z
    6500:	7f 7f       	andi	r23, 0xFF	; 255
    6502:	7f 7f       	andi	r23, 0xFF	; 255
    6504:	7f 7f       	andi	r23, 0xFF	; 255
    6506:	7f 7f       	andi	r23, 0xFF	; 255
    6508:	7f 7f       	andi	r23, 0xFF	; 255
    650a:	7f 7f       	andi	r23, 0xFF	; 255
    650c:	7f 7f       	andi	r23, 0xFF	; 255
    650e:	7f 7f       	andi	r23, 0xFF	; 255
    6510:	7f 7f       	andi	r23, 0xFF	; 255
    6512:	7f 7f       	andi	r23, 0xFF	; 255
    6514:	7f 7f       	andi	r23, 0xFF	; 255
    6516:	7f 7f       	andi	r23, 0xFF	; 255
    6518:	7f 7f       	andi	r23, 0xFF	; 255
    651a:	7f 7f       	andi	r23, 0xFF	; 255
    651c:	7f 7f       	andi	r23, 0xFF	; 255
    651e:	7f 7f       	andi	r23, 0xFF	; 255
    6520:	7f 7f       	andi	r23, 0xFF	; 255
    6522:	7f 7f       	andi	r23, 0xFF	; 255
    6524:	7f 7f       	andi	r23, 0xFF	; 255
    6526:	7f 7f       	andi	r23, 0xFF	; 255
    6528:	7f 7f       	andi	r23, 0xFF	; 255
    652a:	7f 7f       	andi	r23, 0xFF	; 255
    652c:	7f 7f       	andi	r23, 0xFF	; 255
    652e:	7f 7f       	andi	r23, 0xFF	; 255
    6530:	7f 7f       	andi	r23, 0xFF	; 255
    6532:	7f 7f       	andi	r23, 0xFF	; 255
    6534:	7f 7f       	andi	r23, 0xFF	; 255
    6536:	7f 7f       	andi	r23, 0xFF	; 255
    6538:	7f 7f       	andi	r23, 0xFF	; 255
    653a:	7f 7f       	andi	r23, 0xFF	; 255
    653c:	7f 7f       	andi	r23, 0xFF	; 255
    653e:	7f 7f       	andi	r23, 0xFF	; 255
    6540:	7f 7f       	andi	r23, 0xFF	; 255
    6542:	7f 7f       	andi	r23, 0xFF	; 255
    6544:	7f 7f       	andi	r23, 0xFF	; 255
    6546:	7f 7f       	andi	r23, 0xFF	; 255
    6548:	7f 7f       	andi	r23, 0xFF	; 255
    654a:	7f 7f       	andi	r23, 0xFF	; 255
    654c:	7f 7f       	andi	r23, 0xFF	; 255
    654e:	7f 7f       	andi	r23, 0xFF	; 255
    6550:	7f 7f       	andi	r23, 0xFF	; 255
    6552:	7f 7f       	andi	r23, 0xFF	; 255
    6554:	7f 7f       	andi	r23, 0xFF	; 255
    6556:	7f 7f       	andi	r23, 0xFF	; 255
    6558:	7f 7f       	andi	r23, 0xFF	; 255
    655a:	7f 7f       	andi	r23, 0xFF	; 255
    655c:	7f 7f       	andi	r23, 0xFF	; 255
    655e:	7f 7f       	andi	r23, 0xFF	; 255
    6560:	7f 7f       	andi	r23, 0xFF	; 255
    6562:	7f 7f       	andi	r23, 0xFF	; 255
    6564:	7f 7f       	andi	r23, 0xFF	; 255
    6566:	7f 7f       	andi	r23, 0xFF	; 255
    6568:	7f 7f       	andi	r23, 0xFF	; 255
    656a:	7f 7f       	andi	r23, 0xFF	; 255
    656c:	7f 7f       	andi	r23, 0xFF	; 255
    656e:	7f 7f       	andi	r23, 0xFF	; 255
    6570:	7f 7f       	andi	r23, 0xFF	; 255
    6572:	7f 7f       	andi	r23, 0xFF	; 255
    6574:	7f 7f       	andi	r23, 0xFF	; 255
    6576:	7f 7f       	andi	r23, 0xFF	; 255
    6578:	7f 7f       	andi	r23, 0xFF	; 255
    657a:	7f 7f       	andi	r23, 0xFF	; 255
    657c:	7f 7f       	andi	r23, 0xFF	; 255
    657e:	7f 7f       	andi	r23, 0xFF	; 255
    6580:	7f 7f       	andi	r23, 0xFF	; 255
    6582:	7f 7f       	andi	r23, 0xFF	; 255
    6584:	7f 7f       	andi	r23, 0xFF	; 255
    6586:	7f 7f       	andi	r23, 0xFF	; 255
    6588:	7f 7f       	andi	r23, 0xFF	; 255
    658a:	7f 7f       	andi	r23, 0xFF	; 255
    658c:	7f 7f       	andi	r23, 0xFF	; 255
    658e:	7f 7f       	andi	r23, 0xFF	; 255
    6590:	7f 7f       	andi	r23, 0xFF	; 255
    6592:	7f 7f       	andi	r23, 0xFF	; 255
    6594:	7f 7f       	andi	r23, 0xFF	; 255
    6596:	7f 7f       	andi	r23, 0xFF	; 255
    6598:	7f 7f       	andi	r23, 0xFF	; 255
    659a:	7f 7f       	andi	r23, 0xFF	; 255
    659c:	7f 7f       	andi	r23, 0xFF	; 255
    659e:	7f 7f       	andi	r23, 0xFF	; 255
    65a0:	7f 7f       	andi	r23, 0xFF	; 255
    65a2:	7f 7f       	andi	r23, 0xFF	; 255
    65a4:	7f 7f       	andi	r23, 0xFF	; 255
    65a6:	7f 7f       	andi	r23, 0xFF	; 255
    65a8:	7f 7f       	andi	r23, 0xFF	; 255
    65aa:	7f 7f       	andi	r23, 0xFF	; 255
    65ac:	7f 7f       	andi	r23, 0xFF	; 255
    65ae:	7f 7f       	andi	r23, 0xFF	; 255
    65b0:	7f 7f       	andi	r23, 0xFF	; 255
    65b2:	7f 7f       	andi	r23, 0xFF	; 255
    65b4:	7f 7f       	andi	r23, 0xFF	; 255
    65b6:	7f 7f       	andi	r23, 0xFF	; 255
    65b8:	7f 7f       	andi	r23, 0xFF	; 255
    65ba:	7f 7f       	andi	r23, 0xFF	; 255
    65bc:	7f 7f       	andi	r23, 0xFF	; 255
    65be:	7f 7f       	andi	r23, 0xFF	; 255
    65c0:	80 80       	ld	r8, Z
    65c2:	80 80       	ld	r8, Z
    65c4:	80 80       	ld	r8, Z
    65c6:	80 80       	ld	r8, Z
    65c8:	80 80       	ld	r8, Z
    65ca:	80 80       	ld	r8, Z
    65cc:	80 80       	ld	r8, Z
    65ce:	80 80       	ld	r8, Z
    65d0:	80 80       	ld	r8, Z
    65d2:	80 80       	ld	r8, Z
    65d4:	80 80       	ld	r8, Z
    65d6:	80 80       	ld	r8, Z
    65d8:	80 80       	ld	r8, Z
    65da:	80 80       	ld	r8, Z
    65dc:	80 80       	ld	r8, Z
    65de:	80 80       	ld	r8, Z
    65e0:	80 80       	ld	r8, Z
    65e2:	80 80       	ld	r8, Z
    65e4:	80 80       	ld	r8, Z
    65e6:	80 80       	ld	r8, Z
    65e8:	80 80       	ld	r8, Z
    65ea:	80 80       	ld	r8, Z
    65ec:	80 80       	ld	r8, Z
    65ee:	80 80       	ld	r8, Z
    65f0:	80 80       	ld	r8, Z
    65f2:	80 80       	ld	r8, Z
    65f4:	80 80       	ld	r8, Z
    65f6:	80 80       	ld	r8, Z
    65f8:	80 80       	ld	r8, Z
    65fa:	80 80       	ld	r8, Z
    65fc:	80 80       	ld	r8, Z
    65fe:	80 80       	ld	r8, Z
    6600:	03 09       	sbc	r16, r3
    6602:	13 1e       	adc	r1, r19
    6604:	28 31       	cpi	r18, 0x18	; 24
    6606:	3a 40       	sbci	r19, 0x0A	; 10
    6608:	46 4c       	sbci	r20, 0xC6	; 198
    660a:	50 54       	subi	r21, 0x40	; 64
    660c:	58 5b       	subi	r21, 0xB8	; 184
    660e:	5e 61       	ori	r21, 0x1E	; 30
    6610:	63 65       	ori	r22, 0x53	; 83
    6612:	67 69       	ori	r22, 0x97	; 151
    6614:	6b 6c       	ori	r22, 0xCB	; 203
    6616:	6e 6f       	ori	r22, 0xFE	; 254
    6618:	70 71       	andi	r23, 0x10	; 16
    661a:	72 73       	andi	r23, 0x32	; 50
    661c:	74 75       	andi	r23, 0x54	; 84
    661e:	76 77       	andi	r23, 0x76	; 118
    6620:	77 78       	andi	r23, 0x87	; 135
    6622:	79 79       	andi	r23, 0x99	; 153
    6624:	7a 7a       	andi	r23, 0xAA	; 170
    6626:	7b 7b       	andi	r23, 0xBB	; 187
    6628:	7c 7c       	andi	r23, 0xCC	; 204
    662a:	7c 7d       	andi	r23, 0xDC	; 220
    662c:	7d 7d       	andi	r23, 0xDD	; 221
    662e:	7e 7e       	andi	r23, 0xEE	; 238
    6630:	7e 7e       	andi	r23, 0xEE	; 238
    6632:	7f 7f       	andi	r23, 0xFF	; 255
    6634:	7f 7f       	andi	r23, 0xFF	; 255
    6636:	7f 7f       	andi	r23, 0xFF	; 255
    6638:	7f 7f       	andi	r23, 0xFF	; 255
    663a:	7f 7f       	andi	r23, 0xFF	; 255
    663c:	7f 7f       	andi	r23, 0xFF	; 255
    663e:	7f 7f       	andi	r23, 0xFF	; 255
    6640:	7f 7f       	andi	r23, 0xFF	; 255
    6642:	7f 7f       	andi	r23, 0xFF	; 255
    6644:	7f 7f       	andi	r23, 0xFF	; 255
    6646:	7f 7f       	andi	r23, 0xFF	; 255
    6648:	7f 7f       	andi	r23, 0xFF	; 255
    664a:	7f 7f       	andi	r23, 0xFF	; 255
    664c:	7f 7e       	andi	r23, 0xEF	; 239
    664e:	7e 7e       	andi	r23, 0xEE	; 238
    6650:	7e 7d       	andi	r23, 0xDE	; 222
    6652:	7d 7d       	andi	r23, 0xDD	; 221
    6654:	7c 7c       	andi	r23, 0xCC	; 204
    6656:	7c 7b       	andi	r23, 0xBC	; 188
    6658:	7b 7a       	andi	r23, 0xAB	; 171
    665a:	7a 79       	andi	r23, 0x9A	; 154
    665c:	79 78       	andi	r23, 0x89	; 137
    665e:	77 77       	andi	r23, 0x77	; 119
    6660:	76 75       	andi	r23, 0x56	; 86
    6662:	74 73       	andi	r23, 0x34	; 52
    6664:	72 71       	andi	r23, 0x12	; 18
    6666:	70 6f       	ori	r23, 0xF0	; 240
    6668:	6e 6c       	ori	r22, 0xCE	; 206
    666a:	6b 69       	ori	r22, 0x9B	; 155
    666c:	67 65       	ori	r22, 0x57	; 87
    666e:	63 61       	ori	r22, 0x13	; 19
    6670:	5e 5b       	subi	r21, 0xBE	; 190
    6672:	58 54       	subi	r21, 0x48	; 72
    6674:	50 4c       	sbci	r21, 0xC0	; 192
    6676:	46 40       	sbci	r20, 0x06	; 6
    6678:	3a 31       	cpi	r19, 0x1A	; 26
    667a:	28 1e       	adc	r2, r24
    667c:	13 09       	sbc	r17, r3
    667e:	03 00       	.word	0x0003	; ????
    6680:	c6 cc       	rjmp	.-1652   	; 0x600e <waves+0xe>
    6682:	d5 db       	rcall	.-2134   	; 0x5e2e <steptable+0x26>
    6684:	df e3       	ldi	r29, 0x3F	; 63
    6686:	e5 e7       	ldi	r30, 0x75	; 117
    6688:	e9 ea       	ldi	r30, 0xA9	; 169
    668a:	eb ec       	ldi	r30, 0xCB	; 203
    668c:	ed ee       	ldi	r30, 0xED	; 237
    668e:	ef ef       	ldi	r30, 0xFF	; 255
    6690:	f0 f0       	brcs	.+60     	; 0x66ce <waves+0x6ce>
    6692:	f0 f1       	brcs	.+124    	; 0x6710 <waves+0x710>
    6694:	f1 f1       	breq	.+124    	; 0x6712 <waves+0x712>
    6696:	f1 f2       	breq	.-68     	; 0x6654 <waves+0x654>
    6698:	f2 f2       	brmi	.-68     	; 0x6656 <waves+0x656>
    669a:	f2 f2       	brmi	.-68     	; 0x6658 <waves+0x658>
    669c:	f2 f2       	brmi	.-68     	; 0x665a <waves+0x65a>
    669e:	f2 f3       	brmi	.-4      	; 0x669c <waves+0x69c>
    66a0:	f3 f3       	brvs	.-4      	; 0x669e <waves+0x69e>
    66a2:	f3 f3       	brvs	.-4      	; 0x66a0 <waves+0x6a0>
    66a4:	f3 f3       	brvs	.-4      	; 0x66a2 <waves+0x6a2>
    66a6:	f3 f3       	brvs	.-4      	; 0x66a4 <waves+0x6a4>
    66a8:	f3 f3       	brvs	.-4      	; 0x66a6 <waves+0x6a6>
    66aa:	f3 f3       	brvs	.-4      	; 0x66a8 <waves+0x6a8>
    66ac:	f3 f3       	brvs	.-4      	; 0x66aa <waves+0x6aa>
    66ae:	f3 f3       	brvs	.-4      	; 0x66ac <waves+0x6ac>
    66b0:	f3 f3       	brvs	.-4      	; 0x66ae <waves+0x6ae>
    66b2:	f3 f3       	brvs	.-4      	; 0x66b0 <waves+0x6b0>
    66b4:	f3 f3       	brvs	.-4      	; 0x66b2 <waves+0x6b2>
    66b6:	f3 f3       	brvs	.-4      	; 0x66b4 <waves+0x6b4>
    66b8:	f3 f3       	brvs	.-4      	; 0x66b6 <waves+0x6b6>
    66ba:	f3 f3       	brvs	.-4      	; 0x66b8 <waves+0x6b8>
    66bc:	f3 f3       	brvs	.-4      	; 0x66ba <waves+0x6ba>
    66be:	f3 f3       	brvs	.-4      	; 0x66bc <waves+0x6bc>
    66c0:	f3 f3       	brvs	.-4      	; 0x66be <waves+0x6be>
    66c2:	f3 f3       	brvs	.-4      	; 0x66c0 <waves+0x6c0>
    66c4:	f3 f3       	brvs	.-4      	; 0x66c2 <waves+0x6c2>
    66c6:	f3 f3       	brvs	.-4      	; 0x66c4 <waves+0x6c4>
    66c8:	f3 f3       	brvs	.-4      	; 0x66c6 <waves+0x6c6>
    66ca:	f3 f3       	brvs	.-4      	; 0x66c8 <waves+0x6c8>
    66cc:	f3 f3       	brvs	.-4      	; 0x66ca <waves+0x6ca>
    66ce:	f3 f3       	brvs	.-4      	; 0x66cc <waves+0x6cc>
    66d0:	f3 f3       	brvs	.-4      	; 0x66ce <waves+0x6ce>
    66d2:	f3 f3       	brvs	.-4      	; 0x66d0 <waves+0x6d0>
    66d4:	f3 f3       	brvs	.-4      	; 0x66d2 <waves+0x6d2>
    66d6:	f3 f3       	brvs	.-4      	; 0x66d4 <waves+0x6d4>
    66d8:	f3 f3       	brvs	.-4      	; 0x66d6 <waves+0x6d6>
    66da:	f3 f3       	brvs	.-4      	; 0x66d8 <waves+0x6d8>
    66dc:	f3 f3       	brvs	.-4      	; 0x66da <waves+0x6da>
    66de:	f3 f3       	brvs	.-4      	; 0x66dc <waves+0x6dc>
    66e0:	f2 f2       	brmi	.-68     	; 0x669e <waves+0x69e>
    66e2:	f2 f2       	brmi	.-68     	; 0x66a0 <waves+0x6a0>
    66e4:	f2 f2       	brmi	.-68     	; 0x66a2 <waves+0x6a2>
    66e6:	f2 f2       	brmi	.-68     	; 0x66a4 <waves+0x6a4>
    66e8:	f1 f1       	breq	.+124    	; 0x6766 <waves+0x766>
    66ea:	f1 f1       	breq	.+124    	; 0x6768 <waves+0x768>
    66ec:	f0 f0       	brcs	.+60     	; 0x672a <waves+0x72a>
    66ee:	f0 ef       	ldi	r31, 0xF0	; 240
    66f0:	ef ee       	ldi	r30, 0xEF	; 239
    66f2:	ed ec       	ldi	r30, 0xCD	; 205
    66f4:	eb ea       	ldi	r30, 0xAB	; 171
    66f6:	e9 e7       	ldi	r30, 0x79	; 121
    66f8:	e5 e3       	ldi	r30, 0x35	; 53
    66fa:	df db       	rcall	.-2114   	; 0x5eba <steptable+0xb2>
    66fc:	d5 cc       	rjmp	.-1622   	; 0x60a8 <waves+0xa8>
    66fe:	c6 00       	.word	0x00c6	; ????
    6700:	00 28       	or	r0, r0
    6702:	3d 42       	sbci	r19, 0x2D	; 45
    6704:	30 2d       	mov	r19, r0
    6706:	2c 2b       	or	r18, r28
    6708:	2c 2d       	mov	r18, r12
    670a:	2e 2f       	mov	r18, r30
    670c:	30 32       	cpi	r19, 0x20	; 32
    670e:	33 35       	cpi	r19, 0x53	; 83
    6710:	37 39       	cpi	r19, 0x97	; 151
    6712:	3b 3d       	cpi	r19, 0xDB	; 219
    6714:	3f 41       	sbci	r19, 0x1F	; 31
    6716:	43 45       	sbci	r20, 0x53	; 83
    6718:	48 4a       	sbci	r20, 0xA8	; 168
    671a:	4c 4e       	sbci	r20, 0xEC	; 236
    671c:	50 53       	subi	r21, 0x30	; 48
    671e:	55 57       	subi	r21, 0x75	; 117
    6720:	59 5b       	subi	r21, 0xB9	; 185
    6722:	5d 5f       	subi	r21, 0xFD	; 253
    6724:	61 63       	ori	r22, 0x31	; 49
    6726:	65 67       	ori	r22, 0x75	; 117
    6728:	69 6b       	ori	r22, 0xB9	; 185
    672a:	6c 6e       	ori	r22, 0xEC	; 236
    672c:	70 71       	andi	r23, 0x10	; 16
    672e:	73 74       	andi	r23, 0x43	; 67
    6730:	75 77       	andi	r23, 0x75	; 117
    6732:	78 79       	andi	r23, 0x98	; 152
    6734:	7a 7b       	andi	r23, 0xBA	; 186
    6736:	7c 7d       	andi	r23, 0xDC	; 220
    6738:	7d 7e       	andi	r23, 0xED	; 237
    673a:	7e 7f       	andi	r23, 0xFE	; 254
    673c:	7f 7f       	andi	r23, 0xFF	; 255
    673e:	7f 7f       	andi	r23, 0xFF	; 255
    6740:	7f 7f       	andi	r23, 0xFF	; 255
    6742:	7f 7f       	andi	r23, 0xFF	; 255
    6744:	7f 7f       	andi	r23, 0xFF	; 255
    6746:	7e 7e       	andi	r23, 0xEE	; 238
    6748:	7d 7d       	andi	r23, 0xDD	; 221
    674a:	7c 7b       	andi	r23, 0xBC	; 188
    674c:	7a 79       	andi	r23, 0x9A	; 154
    674e:	78 77       	andi	r23, 0x78	; 120
    6750:	75 74       	andi	r23, 0x45	; 69
    6752:	73 71       	andi	r23, 0x13	; 19
    6754:	70 6e       	ori	r23, 0xE0	; 224
    6756:	6c 6b       	ori	r22, 0xBC	; 188
    6758:	69 67       	ori	r22, 0x79	; 121
    675a:	65 63       	ori	r22, 0x35	; 53
    675c:	61 5f       	subi	r22, 0xF1	; 241
    675e:	5d 5b       	subi	r21, 0xBD	; 189
    6760:	59 57       	subi	r21, 0x79	; 121
    6762:	55 53       	subi	r21, 0x35	; 53
    6764:	50 4e       	sbci	r21, 0xE0	; 224
    6766:	4c 4a       	sbci	r20, 0xAC	; 172
    6768:	48 45       	sbci	r20, 0x58	; 88
    676a:	43 41       	sbci	r20, 0x13	; 19
    676c:	3f 3d       	cpi	r19, 0xDF	; 223
    676e:	3b 39       	cpi	r19, 0x9B	; 155
    6770:	37 35       	cpi	r19, 0x57	; 87
    6772:	33 32       	cpi	r19, 0x23	; 35
    6774:	30 2f       	mov	r19, r16
    6776:	2e 2d       	mov	r18, r14
    6778:	2c 2b       	or	r18, r28
    677a:	2c 2d       	mov	r18, r12
    677c:	30 42       	sbci	r19, 0x20	; 32
    677e:	3d 28       	or	r3, r13
    6780:	00 e9       	ldi	r16, 0x90	; 144
    6782:	e5 fe       	sbrs	r14, 5
    6784:	d4 d7       	rcall	.+4008   	; 0x772e <on_solid_ground+0x160>
    6786:	d7 d7       	rcall	.+4014   	; 0x7736 <on_solid_ground+0x168>
    6788:	d6 d4       	rcall	.+2476   	; 0x7136 <LBRotateSprites+0x54>
    678a:	d2 d0       	rcall	.+420    	; 0x6930 <waves+0x930>
    678c:	ce cc       	rjmp	.-1636   	; 0x612a <waves+0x12a>
    678e:	ca c8       	rjmp	.-3692   	; 0x5924 <ProcessMusic+0x20>
    6790:	c6 c3       	rjmp	.+1932   	; 0x6f1e <LBGetJoyPadState+0x10>
    6792:	c1 bf       	out	0x31, r28	; 49
    6794:	bd ba       	out	0x1d, r11	; 29
    6796:	b8 b6       	in	r11, 0x38	; 56
    6798:	b4 b1       	in	r27, 0x04	; 4
    679a:	af ad       	ldd	r26, Y+63	; 0x3f
    679c:	ab a9       	ldd	r26, Y+51	; 0x33
    679e:	a7 a5       	ldd	r26, Z+47	; 0x2f
    67a0:	a3 a1       	ldd	r26, Z+35	; 0x23
    67a2:	9f 9e       	mul	r9, r31
    67a4:	9c 9a       	sbi	0x13, 4	; 19
    67a6:	99 97       	sbiw	r26, 0x29	; 41
    67a8:	95 94       	asr	r9
    67aa:	93 91       	.word	0x9193	; ????
    67ac:	90 8f       	std	Z+24, r25	; 0x18
    67ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    67b0:	8b 8a       	std	Y+19, r8	; 0x13
    67b2:	89 88       	ldd	r8, Y+17	; 0x11
    67b4:	88 87       	std	Y+8, r24	; 0x08
    67b6:	86 85       	ldd	r24, Z+14	; 0x0e
    67b8:	85 84       	ldd	r8, Z+13	; 0x0d
    67ba:	84 84       	ldd	r8, Z+12	; 0x0c
    67bc:	83 83       	std	Z+3, r24	; 0x03
    67be:	83 83       	std	Z+3, r24	; 0x03
    67c0:	83 83       	std	Z+3, r24	; 0x03
    67c2:	83 83       	std	Z+3, r24	; 0x03
    67c4:	83 84       	ldd	r8, Z+11	; 0x0b
    67c6:	84 84       	ldd	r8, Z+12	; 0x0c
    67c8:	85 85       	ldd	r24, Z+13	; 0x0d
    67ca:	86 87       	std	Z+14, r24	; 0x0e
    67cc:	88 88       	ldd	r8, Y+16	; 0x10
    67ce:	89 8a       	std	Y+17, r8	; 0x11
    67d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    67d2:	8d 8f       	std	Y+29, r24	; 0x1d
    67d4:	90 91 93 94 	lds	r25, 0x9493
    67d8:	95 97       	sbiw	r26, 0x25	; 37
    67da:	99 9a       	sbi	0x13, 1	; 19
    67dc:	9c 9e       	mul	r9, r28
    67de:	9f a1       	ldd	r25, Y+39	; 0x27
    67e0:	a3 a5       	ldd	r26, Z+43	; 0x2b
    67e2:	a7 a9       	ldd	r26, Z+55	; 0x37
    67e4:	ab ad       	ldd	r26, Y+59	; 0x3b
    67e6:	af b1       	in	r26, 0x0f	; 15
    67e8:	b4 b6       	in	r11, 0x34	; 52
    67ea:	b8 ba       	out	0x18, r11	; 24
    67ec:	bd bf       	out	0x3d, r27	; 61
    67ee:	c1 c3       	rjmp	.+1922   	; 0x6f72 <LBGetJoyPadState+0x64>
    67f0:	c6 c8       	rjmp	.-3700   	; 0x597e <ProcessMusic+0x7a>
    67f2:	ca cc       	rjmp	.-1644   	; 0x6188 <waves+0x188>
    67f4:	ce d0       	rcall	.+412    	; 0x6992 <waves+0x992>
    67f6:	d2 d4       	rcall	.+2468   	; 0x719c <LBRotateSprites+0xba>
    67f8:	d6 d7       	rcall	.+4012   	; 0x77a6 <update_player+0x42>
    67fa:	d7 d7       	rcall	.+4014   	; 0x77aa <update_player+0x46>
    67fc:	d4 fe       	sbrs	r13, 4
    67fe:	e5 e9       	ldi	r30, 0x95	; 149
    6800:	f9 f8       	.word	0xf8f9	; ????
    6802:	f9 f5       	brne	.+126    	; 0x6882 <waves+0x882>
    6804:	eb e1       	ldi	r30, 0x1B	; 27
    6806:	dd de       	rcall	.-582    	; 0x65c2 <waves+0x5c2>
    6808:	e0 e2       	ldi	r30, 0x20	; 32
    680a:	e4 e5       	ldi	r30, 0x54	; 84
    680c:	e6 e5       	ldi	r30, 0x56	; 86
    680e:	e4 e2       	ldi	r30, 0x24	; 36
    6810:	de d9       	rcall	.-3140   	; 0x5bce <ProcessMusic+0x2ca>
    6812:	d2 ca       	rjmp	.-2652   	; 0x5db8 <esmw+0xc>
    6814:	c1 b7       	in	r28, 0x31	; 49
    6816:	ac a2       	std	Y+36, r10	; 0x24
    6818:	99 91       	ld	r25, Y+
    681a:	8a 86       	std	Y+10, r8	; 0x0a
    681c:	83 81       	ldd	r24, Z+3	; 0x03
    681e:	80 80       	ld	r8, Z
    6820:	81 82       	std	Z+1, r8	; 0x01
    6822:	83 85       	ldd	r24, Z+11	; 0x0b
    6824:	86 88       	ldd	r8, Z+22	; 0x16
    6826:	8a 8c       	ldd	r8, Y+26	; 0x1a
    6828:	8d 8f       	std	Y+29, r24	; 0x1d
    682a:	90 92 93 95 	sts	0x9593, r9
    682e:	96 97       	sbiw	r26, 0x26	; 38
    6830:	98 99       	sbic	0x13, 0	; 19
    6832:	9a 9b       	sbis	0x13, 2	; 19
    6834:	9b 9c       	mul	r9, r11
    6836:	9d 9d       	mul	r25, r13
    6838:	9d 9e       	mul	r9, r29
    683a:	9e 9e       	mul	r9, r30
    683c:	9f 9f       	mul	r25, r31
    683e:	9f 9f       	mul	r25, r31
    6840:	9f 9f       	mul	r25, r31
    6842:	9f 9e       	mul	r9, r31
    6844:	9e 9e       	mul	r9, r30
    6846:	9d 9d       	mul	r25, r13
    6848:	9d 9c       	mul	r9, r13
    684a:	9b 9b       	sbis	0x13, 3	; 19
    684c:	9a 99       	sbic	0x13, 2	; 19
    684e:	98 97       	sbiw	r26, 0x28	; 40
    6850:	96 95       	lsr	r25
    6852:	93 92       	.word	0x9293	; ????
    6854:	90 8f       	std	Z+24, r25	; 0x18
    6856:	8d 8c       	ldd	r8, Y+29	; 0x1d
    6858:	8a 88       	ldd	r8, Y+18	; 0x12
    685a:	86 85       	ldd	r24, Z+14	; 0x0e
    685c:	83 82       	std	Z+3, r8	; 0x03
    685e:	81 80       	ldd	r8, Z+1	; 0x01
    6860:	80 81       	ld	r24, Z
    6862:	83 86       	std	Z+11, r8	; 0x0b
    6864:	8a 91       	ld	r24, -Y
    6866:	99 a2       	std	Y+33, r9	; 0x21
    6868:	ac b7       	in	r26, 0x3c	; 60
    686a:	c1 ca       	rjmp	.-2686   	; 0x5dee <esmw+0x42>
    686c:	d2 d9       	rcall	.-3164   	; 0x5c12 <ProcessMusic+0x30e>
    686e:	de e2       	ldi	r29, 0x2E	; 46
    6870:	e4 e5       	ldi	r30, 0x54	; 84
    6872:	e6 e5       	ldi	r30, 0x56	; 86
    6874:	e4 e2       	ldi	r30, 0x24	; 36
    6876:	e0 de       	rcall	.-576    	; 0x6638 <waves+0x638>
    6878:	dd e1       	ldi	r29, 0x1D	; 29
    687a:	eb f5       	brvc	.+122    	; 0x68f6 <waves+0x8f6>
    687c:	f9 f8       	.word	0xf8f9	; ????
    687e:	f9 00       	.word	0x00f9	; ????
    6880:	07 08       	sbc	r0, r7
    6882:	07 0b       	sbc	r16, r23
    6884:	15 1f       	adc	r17, r21
    6886:	23 22       	and	r2, r19
    6888:	20 1e       	adc	r2, r16
    688a:	1c 1b       	sub	r17, r28
    688c:	1a 1b       	sub	r17, r26
    688e:	1c 1e       	adc	r1, r28
    6890:	22 27       	eor	r18, r18
    6892:	2e 36       	cpi	r18, 0x6E	; 110
    6894:	3f 49       	sbci	r19, 0x9F	; 159
    6896:	54 5e       	subi	r21, 0xE4	; 228
    6898:	67 6f       	ori	r22, 0xF7	; 247
    689a:	76 7a       	andi	r23, 0xA6	; 166
    689c:	7e 7f       	andi	r23, 0xFE	; 254
    689e:	7f 7f       	andi	r23, 0xFF	; 255
    68a0:	7f 7e       	andi	r23, 0xEF	; 239
    68a2:	7d 7b       	andi	r23, 0xBD	; 189
    68a4:	7a 78       	andi	r23, 0x8A	; 138
    68a6:	76 74       	andi	r23, 0x46	; 70
    68a8:	73 71       	andi	r23, 0x13	; 19
    68aa:	70 6e       	ori	r23, 0xE0	; 224
    68ac:	6d 6b       	ori	r22, 0xBD	; 189
    68ae:	6a 69       	ori	r22, 0x9A	; 154
    68b0:	68 67       	ori	r22, 0x78	; 120
    68b2:	66 65       	ori	r22, 0x56	; 86
    68b4:	65 64       	ori	r22, 0x45	; 69
    68b6:	64 63       	ori	r22, 0x34	; 52
    68b8:	63 62       	ori	r22, 0x23	; 35
    68ba:	62 62       	ori	r22, 0x22	; 34
    68bc:	61 61       	ori	r22, 0x11	; 17
    68be:	61 61       	ori	r22, 0x11	; 17
    68c0:	61 61       	ori	r22, 0x11	; 17
    68c2:	61 62       	ori	r22, 0x21	; 33
    68c4:	62 62       	ori	r22, 0x22	; 34
    68c6:	63 63       	ori	r22, 0x33	; 51
    68c8:	63 64       	ori	r22, 0x43	; 67
    68ca:	65 65       	ori	r22, 0x55	; 85
    68cc:	66 67       	ori	r22, 0x76	; 118
    68ce:	68 69       	ori	r22, 0x98	; 152
    68d0:	6a 6b       	ori	r22, 0xBA	; 186
    68d2:	6d 6e       	ori	r22, 0xED	; 237
    68d4:	70 71       	andi	r23, 0x10	; 16
    68d6:	73 74       	andi	r23, 0x43	; 67
    68d8:	76 78       	andi	r23, 0x86	; 134
    68da:	7a 7b       	andi	r23, 0xBA	; 186
    68dc:	7d 7e       	andi	r23, 0xED	; 237
    68de:	7f 7f       	andi	r23, 0xFF	; 255
    68e0:	7f 7f       	andi	r23, 0xFF	; 255
    68e2:	7e 7a       	andi	r23, 0xAE	; 174
    68e4:	76 6f       	ori	r23, 0xF6	; 246
    68e6:	67 5e       	subi	r22, 0xE7	; 231
    68e8:	54 49       	sbci	r21, 0x94	; 148
    68ea:	3f 36       	cpi	r19, 0x6F	; 111
    68ec:	2e 27       	eor	r18, r30
    68ee:	22 1e       	adc	r2, r18
    68f0:	1c 1b       	sub	r17, r28
    68f2:	1a 1b       	sub	r17, r26
    68f4:	1c 1e       	adc	r1, r28
    68f6:	20 22       	and	r2, r16
    68f8:	23 1f       	adc	r18, r19
    68fa:	15 0b       	sbc	r17, r21
    68fc:	07 08       	sbc	r0, r7
    68fe:	07 00       	.word	0x0007	; ????
    6900:	1f 31       	cpi	r17, 0x1F	; 31
    6902:	3d 44       	sbci	r19, 0x4D	; 77
    6904:	4e 53       	subi	r20, 0x3E	; 62
    6906:	54 56       	subi	r21, 0x64	; 100
    6908:	5a 5f       	subi	r21, 0xFA	; 250
    690a:	64 69       	ori	r22, 0x94	; 148
    690c:	6e 74       	andi	r22, 0x4E	; 78
    690e:	76 79       	andi	r23, 0x96	; 150
    6910:	7c 7f       	andi	r23, 0xFC	; 252
    6912:	7f 7f       	andi	r23, 0xFF	; 255
    6914:	7f 7f       	andi	r23, 0xFF	; 255
    6916:	7f 7f       	andi	r23, 0xFF	; 255
    6918:	7f 7f       	andi	r23, 0xFF	; 255
    691a:	7f 7f       	andi	r23, 0xFF	; 255
    691c:	7f 7f       	andi	r23, 0xFF	; 255
    691e:	7f 7f       	andi	r23, 0xFF	; 255
    6920:	7f 7f       	andi	r23, 0xFF	; 255
    6922:	7f 7f       	andi	r23, 0xFF	; 255
    6924:	7f 7f       	andi	r23, 0xFF	; 255
    6926:	7f 7f       	andi	r23, 0xFF	; 255
    6928:	7f 7f       	andi	r23, 0xFF	; 255
    692a:	7f 7f       	andi	r23, 0xFF	; 255
    692c:	7f 7f       	andi	r23, 0xFF	; 255
    692e:	7f 7f       	andi	r23, 0xFF	; 255
    6930:	7f 7f       	andi	r23, 0xFF	; 255
    6932:	7f 7f       	andi	r23, 0xFF	; 255
    6934:	7f 7f       	andi	r23, 0xFF	; 255
    6936:	7f 7f       	andi	r23, 0xFF	; 255
    6938:	7f 7f       	andi	r23, 0xFF	; 255
    693a:	7f 7f       	andi	r23, 0xFF	; 255
    693c:	7f 7f       	andi	r23, 0xFF	; 255
    693e:	7f 7f       	andi	r23, 0xFF	; 255
    6940:	7f 7f       	andi	r23, 0xFF	; 255
    6942:	7f 7f       	andi	r23, 0xFF	; 255
    6944:	7f 7f       	andi	r23, 0xFF	; 255
    6946:	7f 7f       	andi	r23, 0xFF	; 255
    6948:	7f 7f       	andi	r23, 0xFF	; 255
    694a:	7f 7f       	andi	r23, 0xFF	; 255
    694c:	7f 7f       	andi	r23, 0xFF	; 255
    694e:	7f 7f       	andi	r23, 0xFF	; 255
    6950:	7f 7f       	andi	r23, 0xFF	; 255
    6952:	7f 7f       	andi	r23, 0xFF	; 255
    6954:	7f 7f       	andi	r23, 0xFF	; 255
    6956:	7f 7f       	andi	r23, 0xFF	; 255
    6958:	7f 7f       	andi	r23, 0xFF	; 255
    695a:	7f 7f       	andi	r23, 0xFF	; 255
    695c:	7f 7f       	andi	r23, 0xFF	; 255
    695e:	7f 7f       	andi	r23, 0xFF	; 255
    6960:	7f 7f       	andi	r23, 0xFF	; 255
    6962:	7f 7f       	andi	r23, 0xFF	; 255
    6964:	7f 7f       	andi	r23, 0xFF	; 255
    6966:	7f 7f       	andi	r23, 0xFF	; 255
    6968:	7f 7f       	andi	r23, 0xFF	; 255
    696a:	7f 7f       	andi	r23, 0xFF	; 255
    696c:	7f 7f       	andi	r23, 0xFF	; 255
    696e:	7f 7f       	andi	r23, 0xFF	; 255
    6970:	7f 7f       	andi	r23, 0xFF	; 255
    6972:	7f 7f       	andi	r23, 0xFF	; 255
    6974:	7f 7f       	andi	r23, 0xFF	; 255
    6976:	7f 7f       	andi	r23, 0xFF	; 255
    6978:	7f 7f       	andi	r23, 0xFF	; 255
    697a:	7f 7c       	andi	r23, 0xCF	; 207
    697c:	78 71       	andi	r23, 0x18	; 24
    697e:	68 4c       	sbci	r22, 0xC8	; 200
    6980:	2c 1c       	adc	r2, r12
    6982:	12 0c       	add	r1, r2
    6984:	0a 0b       	sbc	r16, r26
    6986:	0a 05       	cpc	r16, r10
    6988:	fd f3       	brhs	.-2      	; 0x6988 <waves+0x988>
    698a:	e9 df       	rcall	.-46     	; 0x695e <waves+0x95e>
    698c:	d4 ca       	rjmp	.-2648   	; 0x5f36 <steptable+0x12e>
    698e:	c0 b7       	in	r28, 0x30	; 48
    6990:	ae a6       	std	Y+46, r10	; 0x2e
    6992:	9e 97       	sbiw	r26, 0x2e	; 46
    6994:	91 8b       	std	Z+17, r25	; 0x11
    6996:	86 85       	ldd	r24, Z+14	; 0x0e
    6998:	82 80       	ldd	r8, Z+2	; 0x02
    699a:	80 80       	ld	r8, Z
    699c:	80 80       	ld	r8, Z
    699e:	80 80       	ld	r8, Z
    69a0:	80 80       	ld	r8, Z
    69a2:	80 80       	ld	r8, Z
    69a4:	80 80       	ld	r8, Z
    69a6:	80 80       	ld	r8, Z
    69a8:	80 80       	ld	r8, Z
    69aa:	80 80       	ld	r8, Z
    69ac:	80 80       	ld	r8, Z
    69ae:	80 80       	ld	r8, Z
    69b0:	80 80       	ld	r8, Z
    69b2:	80 80       	ld	r8, Z
    69b4:	80 80       	ld	r8, Z
    69b6:	80 80       	ld	r8, Z
    69b8:	80 80       	ld	r8, Z
    69ba:	80 80       	ld	r8, Z
    69bc:	80 80       	ld	r8, Z
    69be:	80 80       	ld	r8, Z
    69c0:	80 80       	ld	r8, Z
    69c2:	80 80       	ld	r8, Z
    69c4:	80 80       	ld	r8, Z
    69c6:	80 80       	ld	r8, Z
    69c8:	80 80       	ld	r8, Z
    69ca:	80 80       	ld	r8, Z
    69cc:	80 80       	ld	r8, Z
    69ce:	80 80       	ld	r8, Z
    69d0:	80 80       	ld	r8, Z
    69d2:	80 80       	ld	r8, Z
    69d4:	80 80       	ld	r8, Z
    69d6:	80 80       	ld	r8, Z
    69d8:	80 80       	ld	r8, Z
    69da:	80 80       	ld	r8, Z
    69dc:	80 80       	ld	r8, Z
    69de:	80 80       	ld	r8, Z
    69e0:	80 80       	ld	r8, Z
    69e2:	80 80       	ld	r8, Z
    69e4:	80 80       	ld	r8, Z
    69e6:	80 80       	ld	r8, Z
    69e8:	80 80       	ld	r8, Z
    69ea:	80 80       	ld	r8, Z
    69ec:	80 80       	ld	r8, Z
    69ee:	80 80       	ld	r8, Z
    69f0:	80 80       	ld	r8, Z
    69f2:	80 80       	ld	r8, Z
    69f4:	80 87       	std	Z+8, r24	; 0x08
    69f6:	91 9d       	mul	r25, r1
    69f8:	ac c4       	rjmp	.+2392   	; 0x7352 <get_camera_y+0x14>
    69fa:	cb d4       	rcall	.+2454   	; 0x7392 <get_level_tile+0x6>
    69fc:	dd f2       	brhs	.-74     	; 0x69b4 <waves+0x9b4>
    69fe:	fa fa       	.word	0xfafa	; ????

00006a00 <RestoreBackground>:
	unsigned char free_tile_index, userRamTilesCount=0,userRamTilesCount_tmp=0;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=userRamTilesCount;i<free_tile_index;i++){
    6a00:	80 91 db 0c 	lds	r24, 0x0CDB
    6a04:	90 91 6a 0d 	lds	r25, 0x0D6A
    6a08:	89 17       	cp	r24, r25
    6a0a:	78 f4       	brcc	.+30     	; 0x6a2a <RestoreBackground+0x2a>
			//vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
			*ram_tiles_restore[i].addr=ram_tiles_restore[i].tileIndex;
    6a0c:	e8 2f       	mov	r30, r24
    6a0e:	f0 e0       	ldi	r31, 0x00	; 0
    6a10:	9f 01       	movw	r18, r30
    6a12:	22 0f       	add	r18, r18
    6a14:	33 1f       	adc	r19, r19
    6a16:	e2 0f       	add	r30, r18
    6a18:	f3 1f       	adc	r31, r19
    6a1a:	e6 5c       	subi	r30, 0xC6	; 198
    6a1c:	f3 4f       	sbci	r31, 0xF3	; 243
    6a1e:	a0 81       	ld	r26, Z
    6a20:	b1 81       	ldd	r27, Z+1	; 0x01
    6a22:	92 81       	ldd	r25, Z+2	; 0x02
    6a24:	9c 93       	st	X, r25
	unsigned char free_tile_index, userRamTilesCount=0,userRamTilesCount_tmp=0;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=userRamTilesCount;i<free_tile_index;i++){
    6a26:	8f 5f       	subi	r24, 0xFF	; 255
    6a28:	ed cf       	rjmp	.-38     	; 0x6a04 <RestoreBackground+0x4>
			//vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
			*ram_tiles_restore[i].addr=ram_tiles_restore[i].tileIndex;
		}	
	}
    6a2a:	08 95       	ret

00006a2c <ProcessSprites>:
		}

	}
	*/

	void ProcessSprites(){
    6a2c:	2f 92       	push	r2
    6a2e:	3f 92       	push	r3
    6a30:	4f 92       	push	r4
    6a32:	5f 92       	push	r5
    6a34:	6f 92       	push	r6
    6a36:	7f 92       	push	r7
    6a38:	8f 92       	push	r8
    6a3a:	9f 92       	push	r9
    6a3c:	af 92       	push	r10
    6a3e:	bf 92       	push	r11
    6a40:	cf 92       	push	r12
    6a42:	df 92       	push	r13
    6a44:	ef 92       	push	r14
    6a46:	ff 92       	push	r15
    6a48:	0f 93       	push	r16
    6a4a:	1f 93       	push	r17
    6a4c:	cf 93       	push	r28
    6a4e:	df 93       	push	r29
    6a50:	00 d0       	rcall	.+0      	; 0x6a52 <ProcessSprites+0x26>
    6a52:	00 d0       	rcall	.+0      	; 0x6a54 <ProcessSprites+0x28>
    6a54:	cd b7       	in	r28, 0x3d	; 61
    6a56:	de b7       	in	r29, 0x3e	; 62
	
		unsigned char i,bx,by,dx,dy,bt,x,y,tx=1,ty=1,wx,wy;
		unsigned int ramPtr,ssx,ssy;

		if(!spritesOn) return;
    6a58:	80 91 00 05 	lds	r24, 0x0500
    6a5c:	88 23       	and	r24, r24
    6a5e:	09 f4       	brne	.+2      	; 0x6a62 <ProcessSprites+0x36>
    6a60:	e0 c0       	rjmp	.+448    	; 0x6c22 <ProcessSprites+0x1f6>

		userRamTilesCount=userRamTilesCount_tmp;
    6a62:	80 91 da 0c 	lds	r24, 0x0CDA
    6a66:	80 93 db 0c 	sts	0x0CDB, r24
		free_tile_index=userRamTilesCount;
    6a6a:	80 93 6a 0d 	sts	0x0D6A, r24
    6a6e:	e2 e0       	ldi	r30, 0x02	; 2
    6a70:	ce 2e       	mov	r12, r30
    6a72:	e5 e0       	ldi	r30, 0x05	; 5
    6a74:	de 2e       	mov	r13, r30
	
		for(i=0;i<MAX_SPRITES;i++){
    6a76:	71 2c       	mov	r7, r1
			bx=sprites[i].x;
    6a78:	f6 01       	movw	r30, r12
    6a7a:	20 81       	ld	r18, Z

			if(bx!=(SCREEN_TILES_H*TILE_WIDTH)){
    6a7c:	20 3e       	cpi	r18, 0xE0	; 224
    6a7e:	09 f4       	brne	.+2      	; 0x6a82 <ProcessSprites+0x56>
    6a80:	b1 c0       	rjmp	.+354    	; 0x6be4 <ProcessSprites+0x1b8>
				//get tile's screen section offsets
				
				#if SCROLLING == 1
					ssx=sprites[i].x+Screen.scrollX;
    6a82:	80 91 9c 0c 	lds	r24, 0x0C9C
    6a86:	90 e0       	ldi	r25, 0x00	; 0
    6a88:	82 0f       	add	r24, r18
    6a8a:	91 1d       	adc	r25, r1
					ssy=sprites[i].y+Screen.scrollY;
    6a8c:	41 81       	ldd	r20, Z+1	; 0x01
    6a8e:	20 91 9d 0c 	lds	r18, 0x0C9D
    6a92:	30 e0       	ldi	r19, 0x00	; 0
    6a94:	24 0f       	add	r18, r20
    6a96:	31 1d       	adc	r19, r1

				tx=1;
				ty=1;

				//get the BG tiles that are overlapped by the sprite
				bx=ssx>>3;
    6a98:	ac 01       	movw	r20, r24
    6a9a:	73 e0       	ldi	r23, 0x03	; 3
    6a9c:	56 95       	lsr	r21
    6a9e:	47 95       	ror	r20
    6aa0:	7a 95       	dec	r23
    6aa2:	e1 f7       	brne	.-8      	; 0x6a9c <ProcessSprites+0x70>
    6aa4:	64 2e       	mov	r6, r20
				dx=ssx&0x7;
    6aa6:	87 70       	andi	r24, 0x07	; 7
				if(dx>0) tx++;
    6aa8:	11 f0       	breq	.+4      	; 0x6aae <ProcessSprites+0x82>
    6aaa:	92 e0       	ldi	r25, 0x02	; 2
    6aac:	01 c0       	rjmp	.+2      	; 0x6ab0 <ProcessSprites+0x84>
   				#else
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
    6aae:	91 e0       	ldi	r25, 0x01	; 1
    6ab0:	99 83       	std	Y+1, r25	; 0x01
				dx=ssx&0x7;
				if(dx>0) tx++;

				//by=ssy>>3;
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
    6ab2:	a9 01       	movw	r20, r18
    6ab4:	63 e0       	ldi	r22, 0x03	; 3
    6ab6:	56 95       	lsr	r21
    6ab8:	47 95       	ror	r20
    6aba:	6a 95       	dec	r22
    6abc:	e1 f7       	brne	.-8      	; 0x6ab6 <ProcessSprites+0x8a>
    6abe:	54 2e       	mov	r5, r20
				dy=ssy%TILE_HEIGHT;
    6ac0:	27 70       	andi	r18, 0x07	; 7
				if(dy>0) ty++;			
    6ac2:	19 f0       	breq	.+6      	; 0x6aca <ProcessSprites+0x9e>
    6ac4:	52 e0       	ldi	r21, 0x02	; 2
    6ac6:	35 2e       	mov	r3, r21
    6ac8:	02 c0       	rjmp	.+4      	; 0x6ace <ProcessSprites+0xa2>
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
				ty=1;
    6aca:	33 24       	eor	r3, r3
    6acc:	33 94       	inc	r3
								bt=free_tile_index;
								free_tile_index++;
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    6ace:	30 e0       	ldi	r19, 0x00	; 0
    6ad0:	32 2f       	mov	r19, r18
    6ad2:	22 27       	eor	r18, r18
    6ad4:	f9 01       	movw	r30, r18
    6ad6:	e8 0f       	add	r30, r24
    6ad8:	f1 1d       	adc	r31, r1
    6ada:	fc 83       	std	Y+4, r31	; 0x04
    6adc:	eb 83       	std	Y+3, r30	; 0x03
    6ade:	e1 2c       	mov	r14, r1
    6ae0:	f1 2c       	mov	r15, r1
    6ae2:	be 2c       	mov	r11, r14
    6ae4:	aa 24       	eor	r10, r10
    6ae6:	26 2c       	mov	r2, r6
    6ae8:	45 2c       	mov	r4, r5
    6aea:	4e 0c       	add	r4, r14
								    wy-=(VRAM_TILES_V*2);
							    }else if(wy>=VRAM_TILES_V){
							    	wy-=VRAM_TILES_V;
							    }
                            #else
                                if(wy>=(Screen.scrollHeight*2)){
    6aec:	84 2c       	mov	r8, r4
    6aee:	91 2c       	mov	r9, r1
    6af0:	84 2d       	mov	r24, r4
    6af2:	20 91 9e 0c 	lds	r18, 0x0C9E
    6af6:	42 2f       	mov	r20, r18
    6af8:	50 e0       	ldi	r21, 0x00	; 0
    6afa:	44 0f       	add	r20, r20
    6afc:	55 1f       	adc	r21, r21
    6afe:	84 16       	cp	r8, r20
    6b00:	95 06       	cpc	r9, r21
    6b02:	14 f0       	brlt	.+4      	; 0x6b08 <ProcessSprites+0xdc>
								    wy-=(Screen.scrollHeight*2);
    6b04:	22 0f       	add	r18, r18
    6b06:	03 c0       	rjmp	.+6      	; 0x6b0e <ProcessSprites+0xe2>
							    }else if(wy>=Screen.scrollHeight){
    6b08:	42 16       	cp	r4, r18
    6b0a:	10 f0       	brcs	.+4      	; 0x6b10 <ProcessSprites+0xe4>
							    	wy-=Screen.scrollHeight;
    6b0c:	84 2d       	mov	r24, r4
    6b0e:	82 1b       	sub	r24, r18
							    }
                            #endif
							if(wx>=VRAM_TILES_H)wx-=VRAM_TILES_H; //should always be 32
    6b10:	ff e1       	ldi	r31, 0x1F	; 31
    6b12:	f2 15       	cp	r31, r2
    6b14:	18 f4       	brcc	.+6      	; 0x6b1c <ProcessSprites+0xf0>
    6b16:	00 ee       	ldi	r16, 0xE0	; 224
    6b18:	02 0d       	add	r16, r2
    6b1a:	01 c0       	rjmp	.+2      	; 0x6b1e <ProcessSprites+0xf2>
    6b1c:	02 2d       	mov	r16, r2

							#if SCROLLING == 0
								ramPtr=(wy*VRAM_TILES_H)+wx;
							#else

								ramPtr=((wy>>3)*256)+(wx*8)+(wy&7);	
    6b1e:	28 2f       	mov	r18, r24
    6b20:	26 95       	lsr	r18
    6b22:	26 95       	lsr	r18
    6b24:	26 95       	lsr	r18
    6b26:	10 e0       	ldi	r17, 0x00	; 0
    6b28:	40 e2       	ldi	r20, 0x20	; 32
    6b2a:	24 9f       	mul	r18, r20
    6b2c:	00 0d       	add	r16, r0
    6b2e:	11 1d       	adc	r17, r1
    6b30:	11 24       	eor	r1, r1
    6b32:	23 e0       	ldi	r18, 0x03	; 3
    6b34:	00 0f       	add	r16, r16
    6b36:	11 1f       	adc	r17, r17
    6b38:	2a 95       	dec	r18
    6b3a:	e1 f7       	brne	.-8      	; 0x6b34 <ProcessSprites+0x108>
    6b3c:	87 70       	andi	r24, 0x07	; 7
    6b3e:	08 0f       	add	r16, r24
    6b40:	11 1d       	adc	r17, r1

							#endif

							bt=vram[ramPtr];						
    6b42:	00 50       	subi	r16, 0x00	; 0
    6b44:	1f 4f       	sbci	r17, 0xFF	; 255
    6b46:	f8 01       	movw	r30, r16
    6b48:	70 81       	ld	r23, Z

							if( ((bt>=RAM_TILES_COUNT) | (bt<userRamTilesCount)) && (free_tile_index < RAM_TILES_COUNT) ){ //if no ram free ignore tile
    6b4a:	81 e0       	ldi	r24, 0x01	; 1
    6b4c:	7c 31       	cpi	r23, 0x1C	; 28
    6b4e:	08 f4       	brcc	.+2      	; 0x6b52 <ProcessSprites+0x126>
    6b50:	80 e0       	ldi	r24, 0x00	; 0
    6b52:	21 e0       	ldi	r18, 0x01	; 1
    6b54:	30 91 db 0c 	lds	r19, 0x0CDB
    6b58:	73 17       	cp	r23, r19
    6b5a:	18 f0       	brcs	.+6      	; 0x6b62 <ProcessSprites+0x136>
    6b5c:	20 e0       	ldi	r18, 0x00	; 0
    6b5e:	88 23       	and	r24, r24
    6b60:	51 f1       	breq	.+84     	; 0x6bb6 <ProcessSprites+0x18a>
    6b62:	60 91 6a 0d 	lds	r22, 0x0D6A
    6b66:	6c 31       	cpi	r22, 0x1C	; 28
    6b68:	20 f5       	brcc	.+72     	; 0x6bb2 <ProcessSprites+0x186>
								if( bt>=RAM_TILES_COUNT ){
    6b6a:	88 23       	and	r24, r24
    6b6c:	31 f0       	breq	.+12     	; 0x6b7a <ProcessSprites+0x14e>
									//tile is mapped to flash. Copy it to next free RAM tile.
									CopyFlashTile(bt-RAM_TILES_COUNT,free_tile_index);
    6b6e:	84 ee       	ldi	r24, 0xE4	; 228
    6b70:	87 0f       	add	r24, r23
    6b72:	7a 83       	std	Y+2, r23	; 0x02
    6b74:	0e 94 08 26 	call	0x4c10	; 0x4c10 <CopyFlashTile>
    6b78:	06 c0       	rjmp	.+12     	; 0x6b86 <ProcessSprites+0x15a>
								}else if(bt<userRamTilesCount){
    6b7a:	22 23       	and	r18, r18
    6b7c:	29 f0       	breq	.+10     	; 0x6b88 <ProcessSprites+0x15c>
									//tile is a user ram tile. Copy it to next free RAM tile.
									CopyRamTile(bt,free_tile_index);
    6b7e:	87 2f       	mov	r24, r23
    6b80:	7a 83       	std	Y+2, r23	; 0x02
    6b82:	0e 94 97 26 	call	0x4d2e	; 0x4d2e <CopyRamTile>
    6b86:	7a 81       	ldd	r23, Y+2	; 0x02
								}
								ram_tiles_restore[free_tile_index].addr=(&vram[ramPtr]);
    6b88:	80 91 6a 0d 	lds	r24, 0x0D6A
    6b8c:	e8 2f       	mov	r30, r24
    6b8e:	f0 e0       	ldi	r31, 0x00	; 0
    6b90:	9f 01       	movw	r18, r30
    6b92:	22 0f       	add	r18, r18
    6b94:	33 1f       	adc	r19, r19
    6b96:	e2 0f       	add	r30, r18
    6b98:	f3 1f       	adc	r31, r19
    6b9a:	e6 5c       	subi	r30, 0xC6	; 198
    6b9c:	f3 4f       	sbci	r31, 0xF3	; 243
    6b9e:	11 83       	std	Z+1, r17	; 0x01
    6ba0:	00 83       	st	Z, r16
								ram_tiles_restore[free_tile_index].tileIndex=bt;
    6ba2:	72 83       	std	Z+2, r23	; 0x02
								vram[ramPtr]=free_tile_index;
    6ba4:	f8 01       	movw	r30, r16
    6ba6:	80 83       	st	Z, r24
								bt=free_tile_index;
								free_tile_index++;
    6ba8:	21 e0       	ldi	r18, 0x01	; 1
    6baa:	28 0f       	add	r18, r24
    6bac:	20 93 6a 0d 	sts	0x0D6A, r18
									CopyRamTile(bt,free_tile_index);
								}
								ram_tiles_restore[free_tile_index].addr=(&vram[ramPtr]);
								ram_tiles_restore[free_tile_index].tileIndex=bt;
								vram[ramPtr]=free_tile_index;
								bt=free_tile_index;
    6bb0:	78 2f       	mov	r23, r24
								free_tile_index++;
							}
				
							if(bt<RAM_TILES_COUNT){				
    6bb2:	7c 31       	cpi	r23, 0x1C	; 28
    6bb4:	38 f4       	brcc	.+14     	; 0x6bc4 <ProcessSprites+0x198>
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    6bb6:	2b 81       	ldd	r18, Y+3	; 0x03
    6bb8:	3c 81       	ldd	r19, Y+4	; 0x04
    6bba:	a5 01       	movw	r20, r10
    6bbc:	67 2f       	mov	r22, r23
    6bbe:	87 2d       	mov	r24, r7
    6bc0:	0e 94 24 27 	call	0x4e48	; 0x4e48 <BlitSprite>
    6bc4:	ff ef       	ldi	r31, 0xFF	; 255
    6bc6:	af 1a       	sub	r10, r31
    6bc8:	bf 0a       	sbc	r11, r31
    6bca:	23 94       	inc	r2
    6bcc:	82 2d       	mov	r24, r2
    6bce:	86 19       	sub	r24, r6
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){

					for(x=0;x<tx;x++){
    6bd0:	99 81       	ldd	r25, Y+1	; 0x01
    6bd2:	89 17       	cp	r24, r25
    6bd4:	08 f4       	brcc	.+2      	; 0x6bd8 <ProcessSprites+0x1ac>
    6bd6:	8c cf       	rjmp	.-232    	; 0x6af0 <ProcessSprites+0xc4>
    6bd8:	ef ef       	ldi	r30, 0xFF	; 255
    6bda:	ee 1a       	sub	r14, r30
    6bdc:	fe 0a       	sbc	r15, r30
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){
    6bde:	e3 14       	cp	r14, r3
    6be0:	08 f4       	brcc	.+2      	; 0x6be4 <ProcessSprites+0x1b8>
    6be2:	7f cf       	rjmp	.-258    	; 0x6ae2 <ProcessSprites+0xb6>
		if(!spritesOn) return;

		userRamTilesCount=userRamTilesCount_tmp;
		free_tile_index=userRamTilesCount;
	
		for(i=0;i<MAX_SPRITES;i++){
    6be4:	73 94       	inc	r7
    6be6:	f4 e0       	ldi	r31, 0x04	; 4
    6be8:	cf 0e       	add	r12, r31
    6bea:	d1 1c       	adc	r13, r1
    6bec:	4e e0       	ldi	r20, 0x0E	; 14
    6bee:	74 12       	cpse	r7, r20
    6bf0:	43 cf       	rjmp	.-378    	; 0x6a78 <ProcessSprites+0x4c>


		//restore BG tiles
		RestoreBackground();

	}
    6bf2:	0f 90       	pop	r0
    6bf4:	0f 90       	pop	r0
    6bf6:	0f 90       	pop	r0
    6bf8:	0f 90       	pop	r0
    6bfa:	df 91       	pop	r29
    6bfc:	cf 91       	pop	r28
    6bfe:	1f 91       	pop	r17
    6c00:	0f 91       	pop	r16
    6c02:	ff 90       	pop	r15
    6c04:	ef 90       	pop	r14
    6c06:	df 90       	pop	r13
    6c08:	cf 90       	pop	r12
    6c0a:	bf 90       	pop	r11
    6c0c:	af 90       	pop	r10
    6c0e:	9f 90       	pop	r9
    6c10:	8f 90       	pop	r8
    6c12:	7f 90       	pop	r7
    6c14:	6f 90       	pop	r6
    6c16:	5f 90       	pop	r5
    6c18:	4f 90       	pop	r4
    6c1a:	3f 90       	pop	r3
    6c1c:	2f 90       	pop	r2
			}//	if(bx<(SCREEN_TILES_H*TILE_WIDTH))		
		}


		//restore BG tiles
		RestoreBackground();
    6c1e:	0c 94 00 35 	jmp	0x6a00	; 0x6a00 <RestoreBackground>

	}
    6c22:	0f 90       	pop	r0
    6c24:	0f 90       	pop	r0
    6c26:	0f 90       	pop	r0
    6c28:	0f 90       	pop	r0
    6c2a:	df 91       	pop	r29
    6c2c:	cf 91       	pop	r28
    6c2e:	1f 91       	pop	r17
    6c30:	0f 91       	pop	r16
    6c32:	ff 90       	pop	r15
    6c34:	ef 90       	pop	r14
    6c36:	df 90       	pop	r13
    6c38:	cf 90       	pop	r12
    6c3a:	bf 90       	pop	r11
    6c3c:	af 90       	pop	r10
    6c3e:	9f 90       	pop	r9
    6c40:	8f 90       	pop	r8
    6c42:	7f 90       	pop	r7
    6c44:	6f 90       	pop	r6
    6c46:	5f 90       	pop	r5
    6c48:	4f 90       	pop	r4
    6c4a:	3f 90       	pop	r3
    6c4c:	2f 90       	pop	r2
    6c4e:	08 95       	ret

00006c50 <Scroll>:

	#if SCROLLING == 1
		//Scroll the screen by the relative amount specified (+/-)
		//This function handles screen wrapping on the Y axis if VRAM_TILES_V is less than 32
		void Scroll(char dx,char dy){
		Screen.scrollY+=dy;
    6c50:	90 91 9d 0c 	lds	r25, 0x0C9D
    6c54:	96 0f       	add	r25, r22
    6c56:	90 93 9d 0c 	sts	0x0C9D, r25
		Screen.scrollX+=dx;
    6c5a:	20 91 9c 0c 	lds	r18, 0x0C9C
    6c5e:	82 0f       	add	r24, r18
    6c60:	80 93 9c 0c 	sts	0x0C9C, r24

		if(Screen.scrollHeight<32){
    6c64:	80 91 9e 0c 	lds	r24, 0x0C9E
    6c68:	80 32       	cpi	r24, 0x20	; 32
    6c6a:	b0 f4       	brcc	.+44     	; 0x6c98 <Scroll+0x48>

			if(Screen.scrollY>=(Screen.scrollHeight*TILE_HEIGHT)){
    6c6c:	29 2f       	mov	r18, r25
    6c6e:	30 e0       	ldi	r19, 0x00	; 0
    6c70:	78 e0       	ldi	r23, 0x08	; 8
    6c72:	87 9f       	mul	r24, r23
    6c74:	a0 01       	movw	r20, r0
    6c76:	11 24       	eor	r1, r1
    6c78:	24 17       	cp	r18, r20
    6c7a:	35 07       	cpc	r19, r21
    6c7c:	6c f0       	brlt	.+26     	; 0x6c98 <Scroll+0x48>
				if(dy>=0){	
    6c7e:	67 fd       	sbrc	r22, 7
    6c80:	05 c0       	rjmp	.+10     	; 0x6c8c <Scroll+0x3c>
					Screen.scrollY=(Screen.scrollY-(Screen.scrollHeight*TILE_HEIGHT));
    6c82:	28 ef       	ldi	r18, 0xF8	; 248
    6c84:	82 9f       	mul	r24, r18
    6c86:	90 0d       	add	r25, r0
    6c88:	11 24       	eor	r1, r1
    6c8a:	04 c0       	rjmp	.+8      	; 0x6c94 <Scroll+0x44>
				}else{
					Screen.scrollY=((Screen.scrollHeight*TILE_HEIGHT)-1)-(0xff-Screen.scrollY);
    6c8c:	78 e0       	ldi	r23, 0x08	; 8
    6c8e:	87 9f       	mul	r24, r23
    6c90:	90 0d       	add	r25, r0
    6c92:	11 24       	eor	r1, r1
    6c94:	90 93 9d 0c 	sts	0x0C9D, r25
    6c98:	08 95       	ret

00006c9a <InitializeVideoMode>:
		#endif	
	}


	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){
    6c9a:	e2 e0       	ldi	r30, 0x02	; 2
    6c9c:	f5 e0       	ldi	r31, 0x05	; 5

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
			sprites[i].x=(SCREEN_TILES_H*TILE_WIDTH);		
    6c9e:	80 ee       	ldi	r24, 0xE0	; 224
    6ca0:	80 83       	st	Z, r24
    6ca2:	34 96       	adiw	r30, 0x04	; 4

	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
    6ca4:	95 e0       	ldi	r25, 0x05	; 5
    6ca6:	ea 33       	cpi	r30, 0x3A	; 58
    6ca8:	f9 07       	cpc	r31, r25
    6caa:	d1 f7       	brne	.-12     	; 0x6ca0 <InitializeVideoMode+0x6>
		
		#if SCROLLING == 1
		//	for(int i=0;i<(OVERLAY_LINES*VRAM_TILES_H);i++){
		//		overlay_vram[i]=RAM_TILES_COUNT;
		//	}
			Screen.scrollHeight=VRAM_TILES_V;
    6cac:	80 e2       	ldi	r24, 0x20	; 32
    6cae:	80 93 9e 0c 	sts	0x0C9E, r24
			Screen.overlayHeight=0;
    6cb2:	10 92 99 0c 	sts	0x0C99, r1
    6cb6:	08 95       	ret

00006cb8 <DrawMap>:



//Draws a map of tile at the specified position
#if VRAM_ADDR_SIZE == 1
	void DrawMap(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
    6cb8:	4f 92       	push	r4
    6cba:	5f 92       	push	r5
    6cbc:	6f 92       	push	r6
    6cbe:	7f 92       	push	r7
    6cc0:	8f 92       	push	r8
    6cc2:	9f 92       	push	r9
    6cc4:	af 92       	push	r10
    6cc6:	bf 92       	push	r11
    6cc8:	cf 92       	push	r12
    6cca:	df 92       	push	r13
    6ccc:	ef 92       	push	r14
    6cce:	ff 92       	push	r15
    6cd0:	0f 93       	push	r16
    6cd2:	1f 93       	push	r17
    6cd4:	cf 93       	push	r28
    6cd6:	df 93       	push	r29
    6cd8:	68 2e       	mov	r6, r24
    6cda:	56 2e       	mov	r5, r22
    6cdc:	7a 01       	movw	r14, r20
		//unsigned char i;
		u8 mapWidth=pgm_read_byte(&(map[0]));
    6cde:	fa 01       	movw	r30, r20
    6ce0:	74 90       	lpm	r7, Z
		u8 mapHeight=pgm_read_byte(&(map[1]));
    6ce2:	31 96       	adiw	r30, 0x01	; 1
    6ce4:	84 90       	lpm	r8, Z
    6ce6:	c7 2c       	mov	r12, r7
    6ce8:	d1 2c       	mov	r13, r1
		
		for(u8 dy=0;dy<mapHeight;dy++){
    6cea:	00 e0       	ldi	r16, 0x00	; 0
    6cec:	10 e0       	ldi	r17, 0x00	; 0
    6cee:	91 2c       	mov	r9, r1
    6cf0:	98 14       	cp	r9, r8
    6cf2:	f1 f0       	breq	.+60     	; 0x6d30 <DrawMap+0x78>
    6cf4:	c0 e0       	ldi	r28, 0x00	; 0
    6cf6:	d0 e0       	ldi	r29, 0x00	; 0
    6cf8:	58 01       	movw	r10, r16
    6cfa:	f2 e0       	ldi	r31, 0x02	; 2
    6cfc:	af 0e       	add	r10, r31
    6cfe:	b1 1c       	adc	r11, r1
    6d00:	49 2c       	mov	r4, r9
    6d02:	45 0c       	add	r4, r5
			for(u8 dx=0;dx<mapWidth;dx++){			
    6d04:	c7 15       	cp	r28, r7
    6d06:	80 f4       	brcc	.+32     	; 0x6d28 <DrawMap+0x70>
    6d08:	95 01       	movw	r18, r10
    6d0a:	2c 0f       	add	r18, r28
    6d0c:	3d 1f       	adc	r19, r29
    6d0e:	f7 01       	movw	r30, r14
    6d10:	e2 0f       	add	r30, r18
    6d12:	f3 1f       	adc	r31, r19
				SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
    6d14:	24 91       	lpm	r18, Z
    6d16:	42 2f       	mov	r20, r18
    6d18:	50 e0       	ldi	r21, 0x00	; 0
    6d1a:	64 2d       	mov	r22, r4
    6d1c:	8c 2f       	mov	r24, r28
    6d1e:	86 0d       	add	r24, r6
    6d20:	0e 94 5b 29 	call	0x52b6	; 0x52b6 <SetTile>
    6d24:	21 96       	adiw	r28, 0x01	; 1
    6d26:	ee cf       	rjmp	.-36     	; 0x6d04 <DrawMap+0x4c>
	void DrawMap(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
		//unsigned char i;
		u8 mapWidth=pgm_read_byte(&(map[0]));
		u8 mapHeight=pgm_read_byte(&(map[1]));
		
		for(u8 dy=0;dy<mapHeight;dy++){
    6d28:	93 94       	inc	r9
    6d2a:	0c 0d       	add	r16, r12
    6d2c:	1d 1d       	adc	r17, r13
    6d2e:	e0 cf       	rjmp	.-64     	; 0x6cf0 <DrawMap+0x38>
			for(u8 dx=0;dx<mapWidth;dx++){			
				SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
			}
		}

	}
    6d30:	df 91       	pop	r29
    6d32:	cf 91       	pop	r28
    6d34:	1f 91       	pop	r17
    6d36:	0f 91       	pop	r16
    6d38:	ff 90       	pop	r15
    6d3a:	ef 90       	pop	r14
    6d3c:	df 90       	pop	r13
    6d3e:	cf 90       	pop	r12
    6d40:	bf 90       	pop	r11
    6d42:	af 90       	pop	r10
    6d44:	9f 90       	pop	r9
    6d46:	8f 90       	pop	r8
    6d48:	7f 90       	pop	r7
    6d4a:	6f 90       	pop	r6
    6d4c:	5f 90       	pop	r5
    6d4e:	4f 90       	pop	r4
    6d50:	08 95       	ret

00006d52 <Print>:
	PrintHexByte(x+4,y, value>>8);
	PrintHexByte(x+6,y,value&0xff);
}

//Print a string from flash
void Print(int x,int y,const char *string){
    6d52:	0f 93       	push	r16
    6d54:	1f 93       	push	r17
    6d56:	cf 93       	push	r28
    6d58:	df 93       	push	r29
    6d5a:	06 2f       	mov	r16, r22
    6d5c:	c4 2f       	mov	r28, r20
    6d5e:	d5 2f       	mov	r29, r21
    6d60:	18 2f       	mov	r17, r24
    6d62:	14 1b       	sub	r17, r20

	int i=0;
	char c;

	while(1){
		c=pgm_read_byte(&(string[i++]));		
    6d64:	fe 01       	movw	r30, r28
    6d66:	44 91       	lpm	r20, Z
		if(c!=0){
    6d68:	44 23       	and	r20, r20
    6d6a:	49 f0       	breq	.+18     	; 0x6d7e <Print+0x2c>
			c=((c&127)-32);			
    6d6c:	4f 77       	andi	r20, 0x7F	; 127
    6d6e:	40 52       	subi	r20, 0x20	; 32
			SetFont(x++,y,c);
    6d70:	60 2f       	mov	r22, r16
    6d72:	8c 2f       	mov	r24, r28
    6d74:	81 0f       	add	r24, r17
    6d76:	0e 94 57 29 	call	0x52ae	; 0x52ae <SetFont>
    6d7a:	21 96       	adiw	r28, 0x01	; 1
		}else{
			break;
		}
	}
    6d7c:	f3 cf       	rjmp	.-26     	; 0x6d64 <Print+0x12>
	
}
    6d7e:	df 91       	pop	r29
    6d80:	cf 91       	pop	r28
    6d82:	1f 91       	pop	r17
    6d84:	0f 91       	pop	r16
    6d86:	08 95       	ret

00006d88 <WaitVsync>:
		}
	}
}

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
    6d88:	0f 93       	push	r16
    6d8a:	1f 93       	push	r17
    6d8c:	cf 93       	push	r28
    6d8e:	df 93       	push	r29
    6d90:	8c 01       	movw	r16, r24
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    6d92:	c0 e0       	ldi	r28, 0x00	; 0
    6d94:	d0 e0       	ldi	r29, 0x00	; 0
    6d96:	c0 17       	cp	r28, r16
    6d98:	d1 07       	cpc	r29, r17
    6d9a:	44 f4       	brge	.+16     	; 0x6dac <WaitVsync+0x24>
		while(!GetVsyncFlag());
    6d9c:	0e 94 74 29 	call	0x52e8	; 0x52e8 <GetVsyncFlag>
    6da0:	88 23       	and	r24, r24
    6da2:	e1 f3       	breq	.-8      	; 0x6d9c <WaitVsync+0x14>
		ClearVsyncFlag();		
    6da4:	0e 94 78 29 	call	0x52f0	; 0x52f0 <ClearVsyncFlag>

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    6da8:	21 96       	adiw	r28, 0x01	; 1
    6daa:	f5 cf       	rjmp	.-22     	; 0x6d96 <WaitVsync+0xe>
		while(!GetVsyncFlag());
		ClearVsyncFlag();		
	}
}
    6dac:	df 91       	pop	r29
    6dae:	cf 91       	pop	r28
    6db0:	1f 91       	pop	r17
    6db2:	0f 91       	pop	r16
    6db4:	08 95       	ret

00006db6 <DisplayLogo>:
	void DisplayLogo(){
	
		#if INTRO_LOGO !=0
			#define LOGO_X_POS 12
			
			InitMusicPlayer(logoInitPatches);
    6db6:	8d e1       	ldi	r24, 0x1D	; 29
    6db8:	99 e0       	ldi	r25, 0x09	; 9
    6dba:	0e 94 24 2b 	call	0x5648	; 0x5648 <InitMusicPlayer>
			SetTileTable(logo_tileset);
    6dbe:	8d e1       	ldi	r24, 0x1D	; 29
    6dc0:	91 e0       	ldi	r25, 0x01	; 1
    6dc2:	0e 94 6f 29 	call	0x52de	; 0x52de <SetTileTable>
			
			//draw logo
			ClearVram();
    6dc6:	0e 94 4d 29 	call	0x529a	; 0x529a <ClearVram>
			WaitVsync(15);		
    6dca:	8f e0       	ldi	r24, 0x0F	; 15
    6dcc:	90 e0       	ldi	r25, 0x00	; 0
    6dce:	0e 94 c4 36 	call	0x6d88	; 0x6d88 <WaitVsync>


			#if INTRO_LOGO == 1 
				TriggerFx(0,0xff,true);
    6dd2:	41 e0       	ldi	r20, 0x01	; 1
    6dd4:	6f ef       	ldi	r22, 0xFF	; 255
    6dd6:	80 e0       	ldi	r24, 0x00	; 0
    6dd8:	0e 94 fa 2b 	call	0x57f4	; 0x57f4 <TriggerFx>
			#endif

			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo);
    6ddc:	47 e0       	ldi	r20, 0x07	; 7
    6dde:	51 e0       	ldi	r21, 0x01	; 1
    6de0:	6c e0       	ldi	r22, 0x0C	; 12
    6de2:	8c e0       	ldi	r24, 0x0C	; 12
    6de4:	0e 94 5c 36 	call	0x6cb8	; 0x6cb8 <DrawMap>
			WaitVsync(3);
    6de8:	83 e0       	ldi	r24, 0x03	; 3
    6dea:	90 e0       	ldi	r25, 0x00	; 0
    6dec:	0e 94 c4 36 	call	0x6d88	; 0x6d88 <WaitVsync>
			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo2);
    6df0:	46 ef       	ldi	r20, 0xF6	; 246
    6df2:	50 e0       	ldi	r21, 0x00	; 0
    6df4:	6c e0       	ldi	r22, 0x0C	; 12
    6df6:	8c e0       	ldi	r24, 0x0C	; 12
    6df8:	0e 94 5c 36 	call	0x6cb8	; 0x6cb8 <DrawMap>
			WaitVsync(2);
    6dfc:	82 e0       	ldi	r24, 0x02	; 2
    6dfe:	90 e0       	ldi	r25, 0x00	; 0
    6e00:	0e 94 c4 36 	call	0x6d88	; 0x6d88 <WaitVsync>
			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo);
    6e04:	47 e0       	ldi	r20, 0x07	; 7
    6e06:	51 e0       	ldi	r21, 0x01	; 1
    6e08:	6c e0       	ldi	r22, 0x0C	; 12
    6e0a:	8c e0       	ldi	r24, 0x0C	; 12
    6e0c:	0e 94 5c 36 	call	0x6cb8	; 0x6cb8 <DrawMap>
			#if INTRO_LOGO == 2
				SetMasterVolume(0xc0);
				TriggerNote(3,0,16,0xff);
			#endif 
		
			WaitVsync(65);
    6e10:	81 e4       	ldi	r24, 0x41	; 65
    6e12:	90 e0       	ldi	r25, 0x00	; 0
    6e14:	0e 94 c4 36 	call	0x6d88	; 0x6d88 <WaitVsync>
			ClearVram();
    6e18:	0e 94 4d 29 	call	0x529a	; 0x529a <ClearVram>
			WaitVsync(20);
    6e1c:	84 e1       	ldi	r24, 0x14	; 20
    6e1e:	90 e0       	ldi	r25, 0x00	; 0
    6e20:	0c 94 c4 36 	jmp	0x6d88	; 0x6d88 <WaitVsync>

00006e24 <doFade>:
char fadeDir;
bool volatile fadeActive;


void doFade(unsigned char speed,bool blocking){
	fadeSpeed=speed;
    6e24:	80 93 68 0d 	sts	0x0D68, r24
	currFadeFrame=0;
    6e28:	10 92 6c 0d 	sts	0x0D6C, r1
	fadeActive=true;
    6e2c:	81 e0       	ldi	r24, 0x01	; 1
    6e2e:	80 93 6b 0d 	sts	0x0D6B, r24
		
	if(blocking){
    6e32:	66 23       	and	r22, r22
    6e34:	21 f0       	breq	.+8      	; 0x6e3e <doFade+0x1a>
		while(fadeActive==true);
    6e36:	80 91 6b 0d 	lds	r24, 0x0D6B
    6e3a:	81 11       	cpse	r24, r1
    6e3c:	fc cf       	rjmp	.-8      	; 0x6e36 <doFade+0x12>
    6e3e:	08 95       	ret

00006e40 <FadeIn>:
	
	
}

void FadeIn(unsigned char speed,bool blocking){
	if(speed==0){
    6e40:	81 11       	cpse	r24, r1
    6e42:	03 c0       	rjmp	.+6      	; 0x6e4a <FadeIn+0xa>
		DDRC=0xff;
    6e44:	8f ef       	ldi	r24, 0xFF	; 255
    6e46:	87 b9       	out	0x07, r24	; 7
		return;
    6e48:	08 95       	ret
	}
	fadeStep=1;
    6e4a:	91 e0       	ldi	r25, 0x01	; 1
    6e4c:	90 93 6d 0d 	sts	0x0D6D, r25
	fadeDir=1;
    6e50:	90 93 69 0d 	sts	0x0D69, r25
	doFade(speed,blocking);
    6e54:	0c 94 12 37 	jmp	0x6e24	; 0x6e24 <doFade>

00006e58 <FadeOut>:
}

void FadeOut(unsigned char speed,bool blocking){
	if(speed==0){
    6e58:	81 11       	cpse	r24, r1
    6e5a:	02 c0       	rjmp	.+4      	; 0x6e60 <FadeOut+0x8>
		DDRC=0;
    6e5c:	17 b8       	out	0x07, r1	; 7
		return;
    6e5e:	08 95       	ret
	}
	
	fadeStep=FADER_STEPS;
    6e60:	9c e0       	ldi	r25, 0x0C	; 12
    6e62:	90 93 6d 0d 	sts	0x0D6D, r25
	fadeDir=-1;
    6e66:	9f ef       	ldi	r25, 0xFF	; 255
    6e68:	90 93 69 0d 	sts	0x0D69, r25
	doFade(speed,blocking);
    6e6c:	0c 94 12 37 	jmp	0x6e24	; 0x6e24 <doFade>

00006e70 <ProcessFading>:
}


//called by the kernel at each field end
void ProcessFading(){
	if(fadeActive==true){
    6e70:	80 91 6b 0d 	lds	r24, 0x0D6B
    6e74:	88 23       	and	r24, r24
    6e76:	01 f1       	breq	.+64     	; 0x6eb8 <ProcessFading+0x48>
		if(currFadeFrame==0){
    6e78:	80 91 6c 0d 	lds	r24, 0x0D6C
    6e7c:	81 11       	cpse	r24, r1
    6e7e:	19 c0       	rjmp	.+50     	; 0x6eb2 <ProcessFading+0x42>
			currFadeFrame=fadeSpeed;
    6e80:	80 91 68 0d 	lds	r24, 0x0D68
    6e84:	80 93 6c 0d 	sts	0x0D6C, r24
			DDRC = pgm_read_byte(&(fader[fadeStep-1]));
    6e88:	e0 91 6d 0d 	lds	r30, 0x0D6D
    6e8c:	f0 e0       	ldi	r31, 0x00	; 0
    6e8e:	e7 51       	subi	r30, 0x17	; 23
    6e90:	ff 4f       	sbci	r31, 0xFF	; 255
    6e92:	e4 91       	lpm	r30, Z
    6e94:	e7 b9       	out	0x07, r30	; 7
			fadeStep+=fadeDir;
    6e96:	90 91 69 0d 	lds	r25, 0x0D69
    6e9a:	80 91 6d 0d 	lds	r24, 0x0D6D
    6e9e:	89 0f       	add	r24, r25
    6ea0:	80 93 6d 0d 	sts	0x0D6D, r24
			if(fadeStep==0 || fadeStep==(FADER_STEPS+1)){
    6ea4:	88 23       	and	r24, r24
    6ea6:	11 f0       	breq	.+4      	; 0x6eac <ProcessFading+0x3c>
    6ea8:	8d 30       	cpi	r24, 0x0D	; 13
    6eaa:	31 f4       	brne	.+12     	; 0x6eb8 <ProcessFading+0x48>
				fadeActive=false;
    6eac:	10 92 6b 0d 	sts	0x0D6B, r1
    6eb0:	08 95       	ret
			}
		}else{
			currFadeFrame--;
    6eb2:	81 50       	subi	r24, 0x01	; 1
    6eb4:	80 93 6c 0d 	sts	0x0D6C, r24
    6eb8:	08 95       	ret

00006eba <VideoModeVsync>:
	}

	//Callback invoked during hsync
	void VideoModeVsync(){
		
		ProcessFading();
    6eba:	0e 94 38 37 	call	0x6e70	; 0x6e70 <ProcessFading>
		ProcessSprites();
    6ebe:	0c 94 16 35 	jmp	0x6a2c	; 0x6a2c <ProcessSprites>

00006ec2 <LBGetNextFrame>:
	u8 reversing;
	char** anims;
} Animation;

char* LBGetNextFrame(Animation* anim)
{
    6ec2:	fc 01       	movw	r30, r24
	anim->looped = 0;
    6ec4:	14 82       	std	Z+4, r1	; 0x04
	anim->frame_count += 1;
    6ec6:	93 81       	ldd	r25, Z+3	; 0x03
    6ec8:	9f 5f       	subi	r25, 0xFF	; 255
    6eca:	93 83       	std	Z+3, r25	; 0x03
	if (anim->frame_count < anim->frames_per_anim)
    6ecc:	42 81       	ldd	r20, Z+2	; 0x02
    6ece:	80 81       	ld	r24, Z
    6ed0:	26 81       	ldd	r18, Z+6	; 0x06
    6ed2:	37 81       	ldd	r19, Z+7	; 0x07
    6ed4:	94 17       	cp	r25, r20
    6ed6:	30 f4       	brcc	.+12     	; 0x6ee4 <LBGetNextFrame+0x22>
	{
		return anim->anims[anim->current_anim];
    6ed8:	f9 01       	movw	r30, r18
    6eda:	e8 0f       	add	r30, r24
    6edc:	f1 1d       	adc	r31, r1
    6ede:	e8 0f       	add	r30, r24
    6ee0:	f1 1d       	adc	r31, r1
    6ee2:	12 c0       	rjmp	.+36     	; 0x6f08 <LBGetNextFrame+0x46>
	}
	anim->frame_count = 0;
    6ee4:	13 82       	std	Z+3, r1	; 0x03
	anim->current_anim = (anim->current_anim + 1) % anim->anim_count;
    6ee6:	90 e0       	ldi	r25, 0x00	; 0
    6ee8:	01 96       	adiw	r24, 0x01	; 1
    6eea:	61 81       	ldd	r22, Z+1	; 0x01
    6eec:	70 e0       	ldi	r23, 0x00	; 0
    6eee:	0e 94 94 41 	call	0x8328	; 0x8328 <__divmodhi4>
    6ef2:	80 83       	st	Z, r24
	if (anim->current_anim == 0) anim->looped = 1;
    6ef4:	81 11       	cpse	r24, r1
    6ef6:	02 c0       	rjmp	.+4      	; 0x6efc <LBGetNextFrame+0x3a>
    6ef8:	41 e0       	ldi	r20, 0x01	; 1
    6efa:	44 83       	std	Z+4, r20	; 0x04
    6efc:	99 27       	eor	r25, r25
	return anim->anims[anim->current_anim];
    6efe:	88 0f       	add	r24, r24
    6f00:	99 1f       	adc	r25, r25
    6f02:	f9 01       	movw	r30, r18
    6f04:	e8 0f       	add	r30, r24
    6f06:	f9 1f       	adc	r31, r25
    6f08:	80 81       	ld	r24, Z
    6f0a:	91 81       	ldd	r25, Z+1	; 0x01
}
    6f0c:	08 95       	ret

00006f0e <LBGetJoyPadState>:

void LBGetJoyPadState(JoyPadState* p, unsigned char index)
/*
 * Get the current joy pad button state for index controller
 */
{
    6f0e:	0f 93       	push	r16
    6f10:	1f 93       	push	r17
    6f12:	cf 93       	push	r28
    6f14:	df 93       	push	r29
    6f16:	1f 92       	push	r1
    6f18:	cd b7       	in	r28, 0x3d	; 61
    6f1a:	de b7       	in	r29, 0x3e	; 62
    6f1c:	8c 01       	movw	r16, r24
	static unsigned int p_prev[2] = {0,0};

	p->held = ReadJoypad(index);
    6f1e:	86 2f       	mov	r24, r22
    6f20:	69 83       	std	Y+1, r22	; 0x01
    6f22:	0e 94 7e 29 	call	0x52fc	; 0x52fc <ReadJoypad>
    6f26:	d8 01       	movw	r26, r16
    6f28:	15 96       	adiw	r26, 0x05	; 5
    6f2a:	9c 93       	st	X, r25
    6f2c:	8e 93       	st	-X, r24
    6f2e:	14 97       	sbiw	r26, 0x04	; 4
    6f30:	69 81       	ldd	r22, Y+1	; 0x01
    6f32:	e6 2f       	mov	r30, r22
    6f34:	f0 e0       	ldi	r31, 0x00	; 0

	// Count held cycles
	if (p->held == 0 || p->held != p_prev[index])
    6f36:	00 97       	sbiw	r24, 0x00	; 0
    6f38:	51 f0       	breq	.+20     	; 0x6f4e <LBGetJoyPadState+0x40>
    6f3a:	df 01       	movw	r26, r30
    6f3c:	aa 0f       	add	r26, r26
    6f3e:	bb 1f       	adc	r27, r27
    6f40:	a0 52       	subi	r26, 0x20	; 32
    6f42:	b3 4f       	sbci	r27, 0xF3	; 243
    6f44:	2d 91       	ld	r18, X+
    6f46:	3c 91       	ld	r19, X
    6f48:	82 17       	cp	r24, r18
    6f4a:	93 07       	cpc	r25, r19
    6f4c:	21 f0       	breq	.+8      	; 0x6f56 <LBGetJoyPadState+0x48>
	    p->held_cycles = 0;
    6f4e:	d8 01       	movw	r26, r16
    6f50:	16 96       	adiw	r26, 0x06	; 6
    6f52:	1c 92       	st	X, r1
    6f54:	07 c0       	rjmp	.+14     	; 0x6f64 <LBGetJoyPadState+0x56>
	else
	    p->held_cycles += 1;
    6f56:	d8 01       	movw	r26, r16
    6f58:	16 96       	adiw	r26, 0x06	; 6
    6f5a:	2c 91       	ld	r18, X
    6f5c:	16 97       	sbiw	r26, 0x06	; 6
    6f5e:	2f 5f       	subi	r18, 0xFF	; 255
    6f60:	16 96       	adiw	r26, 0x06	; 6
    6f62:	2c 93       	st	X, r18

	p->pressed = p->held & (p->held ^ p_prev[index]);
    6f64:	ee 0f       	add	r30, r30
    6f66:	ff 1f       	adc	r31, r31
    6f68:	e0 52       	subi	r30, 0x20	; 32
    6f6a:	f3 4f       	sbci	r31, 0xF3	; 243
    6f6c:	20 81       	ld	r18, Z
    6f6e:	31 81       	ldd	r19, Z+1	; 0x01
    6f70:	a9 01       	movw	r20, r18
    6f72:	40 95       	com	r20
    6f74:	50 95       	com	r21
    6f76:	48 23       	and	r20, r24
    6f78:	59 23       	and	r21, r25
    6f7a:	d8 01       	movw	r26, r16
    6f7c:	11 96       	adiw	r26, 0x01	; 1
    6f7e:	5c 93       	st	X, r21
    6f80:	4e 93       	st	-X, r20
	p->released = p_prev[index] & (p->held ^ p_prev[index]);
    6f82:	ac 01       	movw	r20, r24
    6f84:	40 95       	com	r20
    6f86:	50 95       	com	r21
    6f88:	24 23       	and	r18, r20
    6f8a:	35 23       	and	r19, r21
    6f8c:	13 96       	adiw	r26, 0x03	; 3
    6f8e:	3c 93       	st	X, r19
    6f90:	2e 93       	st	-X, r18
    6f92:	12 97       	sbiw	r26, 0x02	; 2
	p_prev[index] = p->held;
    6f94:	91 83       	std	Z+1, r25	; 0x01
    6f96:	80 83       	st	Z, r24
}
    6f98:	0f 90       	pop	r0
    6f9a:	df 91       	pop	r29
    6f9c:	cf 91       	pop	r28
    6f9e:	1f 91       	pop	r17
    6fa0:	0f 91       	pop	r16
    6fa2:	08 95       	ret

00006fa4 <LBWaitSeconds>:

	return from + ((delta + shifted) % delta);
}

void LBWaitSeconds(u8 seconds)
{
    6fa4:	cf 93       	push	r28
    6fa6:	df 93       	push	r29
    6fa8:	d8 2f       	mov	r29, r24
	for(u8 i = 0; i < seconds; i++)
    6faa:	c0 e0       	ldi	r28, 0x00	; 0
    6fac:	cd 17       	cp	r28, r29
    6fae:	31 f0       	breq	.+12     	; 0x6fbc <LBWaitSeconds+0x18>
	{
		WaitUs(65535);
    6fb0:	8f ef       	ldi	r24, 0xFF	; 255
    6fb2:	9f ef       	ldi	r25, 0xFF	; 255
    6fb4:	0e 94 8a 29 	call	0x5314	; 0x5314 <WaitUs>
	return from + ((delta + shifted) % delta);
}

void LBWaitSeconds(u8 seconds)
{
	for(u8 i = 0; i < seconds; i++)
    6fb8:	cf 5f       	subi	r28, 0xFF	; 255
    6fba:	f8 cf       	rjmp	.-16     	; 0x6fac <LBWaitSeconds+0x8>
	{
		WaitUs(65535);
	}
}
    6fbc:	df 91       	pop	r29
    6fbe:	cf 91       	pop	r28
    6fc0:	08 95       	ret

00006fc2 <LBMapSprite>:

void LBMapSprite(u8 startSprite,const char *map,u8 spriteFlags)
{
    6fc2:	df 92       	push	r13
    6fc4:	ef 92       	push	r14
    6fc6:	ff 92       	push	r15
    6fc8:	0f 93       	push	r16
    6fca:	1f 93       	push	r17
    6fcc:	cf 93       	push	r28
    6fce:	df 93       	push	r29
    6fd0:	db 01       	movw	r26, r22
	unsigned char mapWidth=pgm_read_byte(&(map[0]));
    6fd2:	fb 01       	movw	r30, r22
    6fd4:	14 91       	lpm	r17, Z
	unsigned char mapHeight=pgm_read_byte(&(map[1]));
    6fd6:	31 96       	adiw	r30, 0x01	; 1
    6fd8:	64 91       	lpm	r22, Z
    6fda:	5f ef       	ldi	r21, 0xFF	; 255
    6fdc:	51 0f       	add	r21, r17
	s8 x,y,dx,dy,t; 

	if(spriteFlags & SPRITE_FLIP_X)
    6fde:	24 2f       	mov	r18, r20
    6fe0:	21 70       	andi	r18, 0x01	; 1
    6fe2:	40 ff       	sbrs	r20, 0
    6fe4:	04 c0       	rjmp	.+8      	; 0x6fee <LBMapSprite+0x2c>
	{
		x=(mapWidth-1);
    6fe6:	95 2f       	mov	r25, r21
		dx=-1;
    6fe8:	ff 24       	eor	r15, r15
    6fea:	fa 94       	dec	r15
    6fec:	03 c0       	rjmp	.+6      	; 0x6ff4 <LBMapSprite+0x32>
	}
	else
	{
		x=0;
		dx=1;
    6fee:	ff 24       	eor	r15, r15
    6ff0:	f3 94       	inc	r15
		x=(mapWidth-1);
		dx=-1;
	}
	else
	{
		x=0;
    6ff2:	90 e0       	ldi	r25, 0x00	; 0
		dx=1;
	}

	if(spriteFlags & SPRITE_FLIP_Y)
    6ff4:	41 ff       	sbrs	r20, 1
    6ff6:	05 c0       	rjmp	.+10     	; 0x7002 <LBMapSprite+0x40>
	{
		y=(mapHeight-1);
    6ff8:	7f ef       	ldi	r23, 0xFF	; 255
    6ffa:	76 0f       	add	r23, r22
		dy=-1;
    6ffc:	ee 24       	eor	r14, r14
    6ffe:	ea 94       	dec	r14
    7000:	03 c0       	rjmp	.+6      	; 0x7008 <LBMapSprite+0x46>
	}
	else
	{
		y=0;
		dy=1;
    7002:	ee 24       	eor	r14, r14
    7004:	e3 94       	inc	r14
		y=(mapHeight-1);
		dy=-1;
	}
	else
	{
		y=0;
    7006:	70 e0       	ldi	r23, 0x00	; 0
    7008:	21 11       	cpse	r18, r1
    700a:	01 c0       	rjmp	.+2      	; 0x700e <LBMapSprite+0x4c>
    700c:	50 e0       	ldi	r21, 0x00	; 0
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
    700e:	00 e0       	ldi	r16, 0x00	; 0
    7010:	06 17       	cp	r16, r22
    7012:	09 f1       	breq	.+66     	; 0x7056 <LBMapSprite+0x94>
	{
		for(u8 cx=0;cx<mapWidth;cx++)
		{
			t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    7014:	71 03       	mulsu	r23, r17
    7016:	e0 01       	movw	r28, r0
    7018:	11 24       	eor	r1, r1
    701a:	d8 2e       	mov	r13, r24
    701c:	d1 0e       	add	r13, r17
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
	{
		for(u8 cx=0;cx<mapWidth;cx++)
    701e:	8d 15       	cp	r24, r13
    7020:	b1 f0       	breq	.+44     	; 0x704e <LBMapSprite+0x8c>
		{
			t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    7022:	9e 01       	movw	r18, r28
    7024:	29 0f       	add	r18, r25
    7026:	31 1d       	adc	r19, r1
    7028:	97 fd       	sbrc	r25, 7
    702a:	3a 95       	dec	r19
    702c:	2e 5f       	subi	r18, 0xFE	; 254
    702e:	3f 4f       	sbci	r19, 0xFF	; 255
    7030:	fd 01       	movw	r30, r26
    7032:	e2 0f       	add	r30, r18
    7034:	f3 1f       	adc	r31, r19
    7036:	24 91       	lpm	r18, Z
			extendedSprites[startSprite].tileIndex=t;
    7038:	34 e0       	ldi	r19, 0x04	; 4
    703a:	83 9f       	mul	r24, r19
    703c:	f0 01       	movw	r30, r0
    703e:	11 24       	eor	r1, r1
    7040:	eb 5a       	subi	r30, 0xAB	; 171
    7042:	f1 4f       	sbci	r31, 0xF1	; 241
    7044:	22 83       	std	Z+2, r18	; 0x02
			extendedSprites[startSprite++].flags=spriteFlags;
    7046:	8f 5f       	subi	r24, 0xFF	; 255
    7048:	43 83       	std	Z+3, r20	; 0x03
    704a:	9f 0d       	add	r25, r15
    704c:	e8 cf       	rjmp	.-48     	; 0x701e <LBMapSprite+0x5c>
    704e:	7e 0d       	add	r23, r14
	{
		y=0;
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
    7050:	0f 5f       	subi	r16, 0xFF	; 255
			extendedSprites[startSprite].tileIndex=t;
			extendedSprites[startSprite++].flags=spriteFlags;
			x+=dx;
		}
		y+=dy;
		x=(spriteFlags & SPRITE_FLIP_X)?(mapWidth-1):0;
    7052:	95 2f       	mov	r25, r21
    7054:	dd cf       	rjmp	.-70     	; 0x7010 <LBMapSprite+0x4e>
	}
}
    7056:	df 91       	pop	r29
    7058:	cf 91       	pop	r28
    705a:	1f 91       	pop	r17
    705c:	0f 91       	pop	r16
    705e:	ff 90       	pop	r15
    7060:	ef 90       	pop	r14
    7062:	df 90       	pop	r13
    7064:	08 95       	ret

00007066 <LBMoveSprite>:

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
    7066:	df 92       	push	r13
    7068:	ef 92       	push	r14
    706a:	ff 92       	push	r15
    706c:	0f 93       	push	r16
    706e:	1f 93       	push	r17
    7070:	cf 93       	push	r28
    7072:	df 93       	push	r29
		{
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
    7074:	a0 91 9e 0c 	lds	r26, 0x0C9E
    7078:	98 e0       	ldi	r25, 0x08	; 8
    707a:	a9 9f       	mul	r26, r25
    707c:	70 01       	movw	r14, r0
    707e:	11 24       	eor	r1, r1
    7080:	50 e0       	ldi	r21, 0x00	; 0
    7082:	38 ef       	ldi	r19, 0xF8	; 248
    7084:	a3 9f       	mul	r26, r19
    7086:	30 2d       	mov	r19, r0
    7088:	11 24       	eor	r1, r1
	}
}

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
	for(u8 dy=0;dy<height;dy++)
    708a:	70 e0       	ldi	r23, 0x00	; 0
    708c:	70 17       	cp	r23, r16
    708e:	09 f1       	breq	.+66     	; 0x70d2 <LBMoveSprite+0x6c>
    7090:	d4 2e       	mov	r13, r20
    7092:	13 2f       	mov	r17, r19
    7094:	14 0f       	add	r17, r20
    7096:	b8 2f       	mov	r27, r24
    7098:	b2 0f       	add	r27, r18
    709a:	96 2f       	mov	r25, r22
	{
		for(u8 dx=0;dx<width;dx++)
    709c:	8b 17       	cp	r24, r27
    709e:	a9 f0       	breq	.+42     	; 0x70ca <LBMoveSprite+0x64>
		{
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
    70a0:	c4 e0       	ldi	r28, 0x04	; 4
    70a2:	8c 9f       	mul	r24, r28
    70a4:	f0 01       	movw	r30, r0
    70a6:	11 24       	eor	r1, r1
    70a8:	ef 01       	movw	r28, r30
    70aa:	cb 5a       	subi	r28, 0xAB	; 171
    70ac:	d1 4f       	sbci	r29, 0xF1	; 241
    70ae:	98 83       	st	Y, r25
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
    70b0:	a0 32       	cpi	r26, 0x20	; 32
    70b2:	28 f4       	brcc	.+10     	; 0x70be <LBMoveSprite+0x58>
    70b4:	e4 16       	cp	r14, r20
    70b6:	f5 06       	cpc	r15, r21
    70b8:	14 f4       	brge	.+4      	; 0x70be <LBMoveSprite+0x58>
				{
					u8 tmp=(y+(TILE_HEIGHT*dy))-(Screen.scrollHeight*TILE_HEIGHT);
					extendedSprites[startSprite].y=tmp;
    70ba:	19 83       	std	Y+1, r17	; 0x01
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
				{
    70bc:	03 c0       	rjmp	.+6      	; 0x70c4 <LBMoveSprite+0x5e>
					u8 tmp=(y+(TILE_HEIGHT*dy))-(Screen.scrollHeight*TILE_HEIGHT);
					extendedSprites[startSprite].y=tmp;
				}
				else
				{
					extendedSprites[startSprite].y=y+(TILE_HEIGHT*dy);
    70be:	eb 5a       	subi	r30, 0xAB	; 171
    70c0:	f1 4f       	sbci	r31, 0xF1	; 241
    70c2:	d1 82       	std	Z+1, r13	; 0x01
				{
					extendedSprites[startSprite].y=y+(TILE_HEIGHT*dy);
				}
			#endif

			startSprite++;
    70c4:	8f 5f       	subi	r24, 0xFF	; 255
    70c6:	98 5f       	subi	r25, 0xF8	; 248
    70c8:	e9 cf       	rjmp	.-46     	; 0x709c <LBMoveSprite+0x36>
	}
}

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
	for(u8 dy=0;dy<height;dy++)
    70ca:	7f 5f       	subi	r23, 0xFF	; 255
    70cc:	48 5f       	subi	r20, 0xF8	; 248
    70ce:	5f 4f       	sbci	r21, 0xFF	; 255
    70d0:	dd cf       	rjmp	.-70     	; 0x708c <LBMoveSprite+0x26>
			#endif

			startSprite++;
		}
	}	
}
    70d2:	df 91       	pop	r29
    70d4:	cf 91       	pop	r28
    70d6:	1f 91       	pop	r17
    70d8:	0f 91       	pop	r16
    70da:	ff 90       	pop	r15
    70dc:	ef 90       	pop	r14
    70de:	df 90       	pop	r13
    70e0:	08 95       	ret

000070e2 <LBRotateSprites>:

void LBRotateSprites(u8 mappedSpriteCount)
{
    70e2:	cf 93       	push	r28
    70e4:	df 93       	push	r29
	static u8 swapped = 0;
	u8 counter = 0;
	
	if (swapped)
    70e6:	90 91 dc 0c 	lds	r25, 0x0CDC
    70ea:	99 23       	and	r25, r25
    70ec:	e9 f1       	breq	.+122    	; 0x7168 <LBRotateSprites+0x86>
    70ee:	e5 e0       	ldi	r30, 0x05	; 5
    70f0:	f5 e0       	ldi	r31, 0x05	; 5
    70f2:	28 ec       	ldi	r18, 0xC8	; 200
    70f4:	28 0f       	add	r18, r24
	{
		while (counter < MAX_SPRITES && mappedSpriteCount > 0)
    70f6:	88 23       	and	r24, r24
    70f8:	89 f1       	breq	.+98     	; 0x715c <LBRotateSprites+0x7a>
		{
			sprites[counter].flags = extendedSprites[--mappedSpriteCount].flags;
    70fa:	af ef       	ldi	r26, 0xFF	; 255
    70fc:	a8 0f       	add	r26, r24
    70fe:	34 e0       	ldi	r19, 0x04	; 4
    7100:	a3 9f       	mul	r26, r19
    7102:	d0 01       	movw	r26, r0
    7104:	11 24       	eor	r1, r1
    7106:	ab 5a       	subi	r26, 0xAB	; 171
    7108:	b1 4f       	sbci	r27, 0xF1	; 241
    710a:	13 96       	adiw	r26, 0x03	; 3
    710c:	3c 91       	ld	r19, X
    710e:	30 83       	st	Z, r19
    7110:	ef 01       	movw	r28, r30
    7112:	21 97       	sbiw	r28, 0x01	; 1
			sprites[counter].tileIndex = extendedSprites[--mappedSpriteCount].tileIndex;
    7114:	ae ef       	ldi	r26, 0xFE	; 254
    7116:	a8 0f       	add	r26, r24
    7118:	34 e0       	ldi	r19, 0x04	; 4
    711a:	a3 9f       	mul	r26, r19
    711c:	d0 01       	movw	r26, r0
    711e:	11 24       	eor	r1, r1
    7120:	ab 5a       	subi	r26, 0xAB	; 171
    7122:	b1 4f       	sbci	r27, 0xF1	; 241
    7124:	12 96       	adiw	r26, 0x02	; 2
    7126:	3c 91       	ld	r19, X
    7128:	38 83       	st	Y, r19
    712a:	22 97       	sbiw	r28, 0x02	; 2
			sprites[counter].x = extendedSprites[--mappedSpriteCount].x;
    712c:	ad ef       	ldi	r26, 0xFD	; 253
    712e:	a8 0f       	add	r26, r24
    7130:	34 e0       	ldi	r19, 0x04	; 4
    7132:	a3 9f       	mul	r26, r19
    7134:	d0 01       	movw	r26, r0
    7136:	11 24       	eor	r1, r1
    7138:	ab 5a       	subi	r26, 0xAB	; 171
    713a:	b1 4f       	sbci	r27, 0xF1	; 241
    713c:	3c 91       	ld	r19, X
    713e:	38 83       	st	Y, r19
			sprites[counter].y = extendedSprites[--mappedSpriteCount].y;
    7140:	84 50       	subi	r24, 0x04	; 4
    7142:	21 96       	adiw	r28, 0x01	; 1
    7144:	34 e0       	ldi	r19, 0x04	; 4
    7146:	83 9f       	mul	r24, r19
    7148:	d0 01       	movw	r26, r0
    714a:	11 24       	eor	r1, r1
    714c:	ab 5a       	subi	r26, 0xAB	; 171
    714e:	b1 4f       	sbci	r27, 0xF1	; 241
    7150:	11 96       	adiw	r26, 0x01	; 1
    7152:	3c 91       	ld	r19, X
    7154:	38 83       	st	Y, r19
    7156:	34 96       	adiw	r30, 0x04	; 4
	static u8 swapped = 0;
	u8 counter = 0;
	
	if (swapped)
	{
		while (counter < MAX_SPRITES && mappedSpriteCount > 0)
    7158:	82 13       	cpse	r24, r18
    715a:	cd cf       	rjmp	.-102    	; 0x70f6 <LBRotateSprites+0x14>
			sprites[counter].x = extendedSprites[counter].x;
			sprites[counter].y = extendedSprites[counter].y;
			counter++;
		}
	}
	swapped = swapped & 1;
    715c:	91 70       	andi	r25, 0x01	; 1
    715e:	90 93 dc 0c 	sts	0x0CDC, r25
}
    7162:	df 91       	pop	r29
    7164:	cf 91       	pop	r28
    7166:	08 95       	ret
    7168:	40 e0       	ldi	r20, 0x00	; 0
    716a:	50 e0       	ldi	r21, 0x00	; 0
    716c:	20 e0       	ldi	r18, 0x00	; 0
			counter++;
		}
	}
	else
	{
		while (counter < MAX_SPRITES && counter < mappedSpriteCount)
    716e:	28 17       	cp	r18, r24
    7170:	a9 f3       	breq	.-22     	; 0x715c <LBRotateSprites+0x7a>
    7172:	da 01       	movw	r26, r20
    7174:	ab 5a       	subi	r26, 0xAB	; 171
    7176:	b1 4f       	sbci	r27, 0xF1	; 241
    7178:	fa 01       	movw	r30, r20
    717a:	ee 5f       	subi	r30, 0xFE	; 254
    717c:	fa 4f       	sbci	r31, 0xFA	; 250
		{
			sprites[counter].flags = extendedSprites[counter].flags;
    717e:	13 96       	adiw	r26, 0x03	; 3
    7180:	3c 91       	ld	r19, X
    7182:	13 97       	sbiw	r26, 0x03	; 3
    7184:	33 83       	std	Z+3, r19	; 0x03
			sprites[counter].tileIndex = extendedSprites[counter].tileIndex;
    7186:	12 96       	adiw	r26, 0x02	; 2
    7188:	3c 91       	ld	r19, X
    718a:	12 97       	sbiw	r26, 0x02	; 2
    718c:	32 83       	std	Z+2, r19	; 0x02
			sprites[counter].x = extendedSprites[counter].x;
    718e:	3c 91       	ld	r19, X
    7190:	30 83       	st	Z, r19
			sprites[counter].y = extendedSprites[counter].y;
    7192:	11 96       	adiw	r26, 0x01	; 1
    7194:	3c 91       	ld	r19, X
    7196:	31 83       	std	Z+1, r19	; 0x01
			counter++;
    7198:	2f 5f       	subi	r18, 0xFF	; 255
    719a:	4c 5f       	subi	r20, 0xFC	; 252
    719c:	5f 4f       	sbci	r21, 0xFF	; 255
			counter++;
		}
	}
	else
	{
		while (counter < MAX_SPRITES && counter < mappedSpriteCount)
    719e:	2e 30       	cpi	r18, 0x0E	; 14
    71a0:	31 f7       	brne	.-52     	; 0x716e <LBRotateSprites+0x8c>
    71a2:	dc cf       	rjmp	.-72     	; 0x715c <LBRotateSprites+0x7a>

000071a4 <LBDrawTile>:

/*
 * A more efficient map draw for single tile maps 
 */ 
void LBDrawTile(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
	SetTile(x,y,pgm_read_byte(&(map[2])));					
    71a4:	fa 01       	movw	r30, r20
    71a6:	32 96       	adiw	r30, 0x02	; 2
    71a8:	44 91       	lpm	r20, Z
    71aa:	50 e0       	ldi	r21, 0x00	; 0
    71ac:	0c 94 5b 29 	jmp	0x52b6	; 0x52b6 <SetTile>

000071b0 <init_game_state>:
char* prone_anim[1];
char* run_anim[4];

void init_game_state()
{
	game.camera_x = 0;
    71b0:	e0 e9       	ldi	r30, 0x90	; 144
    71b2:	fd e0       	ldi	r31, 0x0D	; 13
    71b4:	11 86       	std	Z+9, r1	; 0x09
    71b6:	10 86       	std	Z+8, r1	; 0x08
	game.camera_y = 0;
    71b8:	13 86       	std	Z+11, r1	; 0x0b
    71ba:	12 86       	std	Z+10, r1	; 0x0a
	game.current_level = 0;
    71bc:	11 82       	std	Z+1, r1	; 0x01
	game.current_screen = 0;
    71be:	10 82       	st	Z, r1
	game.paused = 0;
    71c0:	12 82       	std	Z+2, r1	; 0x02
	game.selection = 0;
    71c2:	13 82       	std	Z+3, r1	; 0x03
	game.scroll = 0;
    71c4:	14 82       	std	Z+4, r1	; 0x04
	game.scroll_src_x=29;
    71c6:	8d e1       	ldi	r24, 0x1D	; 29
    71c8:	90 e0       	ldi	r25, 0x00	; 0
    71ca:	97 83       	std	Z+7, r25	; 0x07
    71cc:	86 83       	std	Z+6, r24	; 0x06
    game.scroll_dest_x=29;
    71ce:	85 83       	std	Z+5, r24	; 0x05
	game.player.active_shots = 0;
    71d0:	15 8e       	std	Z+29, r1	; 0x1d
	game.player.flags = IDLE;
    71d2:	88 e0       	ldi	r24, 0x08	; 8
    71d4:	86 8f       	std	Z+30, r24	; 0x1e
	game.player.grace_frame = 0;
    71d6:	17 8e       	std	Z+31, r1	; 0x1f
	game.player.shared.gravity = 0;
    71d8:	14 8e       	std	Z+28, r1	; 0x1c
	game.player.shared.vx = 0;
    71da:	14 86       	std	Z+12, r1	; 0x0c
    71dc:	15 86       	std	Z+13, r1	; 0x0d
    71de:	16 86       	std	Z+14, r1	; 0x0e
    71e0:	17 86       	std	Z+15, r1	; 0x0f
	game.player.shared.vy = 0;
    71e2:	10 8a       	std	Z+16, r1	; 0x10
    71e4:	11 8a       	std	Z+17, r1	; 0x11
    71e6:	12 8a       	std	Z+18, r1	; 0x12
    71e8:	13 8a       	std	Z+19, r1	; 0x13
	
	game.player.idle.anim_count = 1;
    71ea:	81 e0       	ldi	r24, 0x01	; 1
    71ec:	80 93 25 0e 	sts	0x0E25, r24
	game.player.idle.current_anim = 0;
    71f0:	10 92 24 0e 	sts	0x0E24, r1
	game.player.idle.frame_count = 0;
    71f4:	10 92 27 0e 	sts	0x0E27, r1
	game.player.idle.frames_per_anim = 1;
    71f8:	80 93 26 0e 	sts	0x0E26, r24
	game.player.idle.looped = 0;
    71fc:	10 92 28 0e 	sts	0x0E28, r1
	game.player.idle.reversing = 0;
    7200:	10 92 29 0e 	sts	0x0E29, r1
	game.player.idle.anims = idle_anim;
    7204:	ed ec       	ldi	r30, 0xCD	; 205
    7206:	fe e0       	ldi	r31, 0x0E	; 14
    7208:	f0 93 2b 0e 	sts	0x0E2B, r31
    720c:	e0 93 2a 0e 	sts	0x0E2A, r30
	game.player.idle.anims[0] = (char*) map_hero_idle;
    7210:	2b e7       	ldi	r18, 0x7B	; 123
    7212:	3e e2       	ldi	r19, 0x2E	; 46
    7214:	31 83       	std	Z+1, r19	; 0x01
    7216:	20 83       	st	Z, r18
	
	game.player.jump.anim_count = 1;
    7218:	80 93 35 0e 	sts	0x0E35, r24
	game.player.jump.current_anim = 0;
    721c:	10 92 34 0e 	sts	0x0E34, r1
	game.player.jump.frame_count = 0;
    7220:	10 92 37 0e 	sts	0x0E37, r1
	game.player.jump.frames_per_anim = 1;
    7224:	80 93 36 0e 	sts	0x0E36, r24
	game.player.jump.looped = 0;
    7228:	10 92 38 0e 	sts	0x0E38, r1
	game.player.jump.reversing = 0;
    722c:	10 92 39 0e 	sts	0x0E39, r1
	game.player.jump.anims = jump_anim;
    7230:	ee e6       	ldi	r30, 0x6E	; 110
    7232:	fd e0       	ldi	r31, 0x0D	; 13
    7234:	f0 93 3b 0e 	sts	0x0E3B, r31
    7238:	e0 93 3a 0e 	sts	0x0E3A, r30
	game.player.jump.anims[0] = (char*) map_hero_jump;
    723c:	23 e5       	ldi	r18, 0x53	; 83
    723e:	3e e2       	ldi	r19, 0x2E	; 46
    7240:	31 83       	std	Z+1, r19	; 0x01
    7242:	20 83       	st	Z, r18
	
	game.player.prone.anim_count = 1;
    7244:	80 93 3d 0e 	sts	0x0E3D, r24
	game.player.prone.current_anim = 0;
    7248:	10 92 3c 0e 	sts	0x0E3C, r1
	game.player.prone.frame_count = 0;
    724c:	10 92 3f 0e 	sts	0x0E3F, r1
	game.player.prone.frames_per_anim = 1;
    7250:	80 93 3e 0e 	sts	0x0E3E, r24
	game.player.prone.looped = 0;
    7254:	10 92 40 0e 	sts	0x0E40, r1
	game.player.prone.reversing = 0;
    7258:	10 92 41 0e 	sts	0x0E41, r1
	game.player.prone.anims = prone_anim;
    725c:	e3 e5       	ldi	r30, 0x53	; 83
    725e:	fe e0       	ldi	r31, 0x0E	; 14
    7260:	f0 93 43 0e 	sts	0x0E43, r31
    7264:	e0 93 42 0e 	sts	0x0E42, r30
	game.player.prone.anims[0] = (char*) map_hero_prone;
    7268:	8e e4       	ldi	r24, 0x4E	; 78
    726a:	9e e2       	ldi	r25, 0x2E	; 46
    726c:	91 83       	std	Z+1, r25	; 0x01
    726e:	80 83       	st	Z, r24
	
	game.player.run.anim_count = 4;
    7270:	84 e0       	ldi	r24, 0x04	; 4
    7272:	80 93 2d 0e 	sts	0x0E2D, r24
	game.player.run.current_anim = 0;
    7276:	10 92 2c 0e 	sts	0x0E2C, r1
	game.player.run.frame_count = 0;
    727a:	10 92 2f 0e 	sts	0x0E2F, r1
	game.player.run.frames_per_anim = FRAMES_PER_RUN_CYCLE;
    727e:	8c e0       	ldi	r24, 0x0C	; 12
    7280:	80 93 2e 0e 	sts	0x0E2E, r24
	game.player.run.looped = 0;
    7284:	10 92 30 0e 	sts	0x0E30, r1
	game.player.run.reversing = 0;
    7288:	10 92 31 0e 	sts	0x0E31, r1
	game.player.run.anims = run_anim;
    728c:	e5 ec       	ldi	r30, 0xC5	; 197
    728e:	fe e0       	ldi	r31, 0x0E	; 14
    7290:	f0 93 33 0e 	sts	0x0E33, r31
    7294:	e0 93 32 0e 	sts	0x0E32, r30
	game.player.run.anims[0] = (char*) map_hero_step_0;
    7298:	83 e7       	ldi	r24, 0x73	; 115
    729a:	9e e2       	ldi	r25, 0x2E	; 46
    729c:	91 83       	std	Z+1, r25	; 0x01
    729e:	80 83       	st	Z, r24
	game.player.run.anims[1] = (char*) map_hero_step_1;
    72a0:	8b e6       	ldi	r24, 0x6B	; 107
    72a2:	9e e2       	ldi	r25, 0x2E	; 46
    72a4:	93 83       	std	Z+3, r25	; 0x03
    72a6:	82 83       	std	Z+2, r24	; 0x02
	game.player.run.anims[2] = (char*) map_hero_step_2;
    72a8:	83 e6       	ldi	r24, 0x63	; 99
    72aa:	9e e2       	ldi	r25, 0x2E	; 46
    72ac:	95 83       	std	Z+5, r25	; 0x05
    72ae:	84 83       	std	Z+4, r24	; 0x04
	game.player.run.anims[3] = (char*) map_hero_step_3;
    72b0:	8b e5       	ldi	r24, 0x5B	; 91
    72b2:	9e e2       	ldi	r25, 0x2E	; 46
    72b4:	97 83       	std	Z+7, r25	; 0x07
    72b6:	86 83       	std	Z+6, r24	; 0x06
    72b8:	08 95       	ret

000072ba <render_level_tile>:
	ClearVram();
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
    72ba:	0f 93       	push	r16
    72bc:	1f 93       	push	r17
    72be:	e8 2f       	mov	r30, r24
    72c0:	86 2f       	mov	r24, r22
    72c2:	64 2f       	mov	r22, r20
	switch (level_tile)
    72c4:	0e 2f       	mov	r16, r30
    72c6:	10 e0       	ldi	r17, 0x00	; 0
    72c8:	07 30       	cpi	r16, 0x07	; 7
    72ca:	11 05       	cpc	r17, r1
    72cc:	e8 f4       	brcc	.+58     	; 0x7308 <render_level_tile+0x4e>
    72ce:	f8 01       	movw	r30, r16
    72d0:	e8 5c       	subi	r30, 0xC8	; 200
    72d2:	ff 4f       	sbci	r31, 0xFF	; 255
    72d4:	0c 94 a8 41 	jmp	0x8350	; 0x8350 <__tablejump2__>
	{
		case L_ICE_SKY : LBDrawTile(x, y, map_ice_sky); break;
    72d8:	4f e6       	ldi	r20, 0x6F	; 111
    72da:	57 e4       	ldi	r21, 0x47	; 71
    72dc:	11 c0       	rjmp	.+34     	; 0x7300 <render_level_tile+0x46>
		case L_ICE_MIDDLE : LBDrawTile(x, y, map_ice_middle); break;
    72de:	4b e7       	ldi	r20, 0x7B	; 123
    72e0:	57 e4       	ldi	r21, 0x47	; 71
    72e2:	0e c0       	rjmp	.+28     	; 0x7300 <render_level_tile+0x46>
		case L_ICE_LEFT : LBDrawTile(x, y, map_ice_left); break;
    72e4:	4e e7       	ldi	r20, 0x7E	; 126
    72e6:	57 e4       	ldi	r21, 0x47	; 71
    72e8:	0b c0       	rjmp	.+22     	; 0x7300 <render_level_tile+0x46>
		case L_ICE_RIGHT : LBDrawTile(x, y, map_ice_right); break;
    72ea:	48 e7       	ldi	r20, 0x78	; 120
    72ec:	57 e4       	ldi	r21, 0x47	; 71
    72ee:	08 c0       	rjmp	.+16     	; 0x7300 <render_level_tile+0x46>
		case L_ICE_BOTTOM : LBDrawTile(x, y, map_ice_bottom); break;
    72f0:	45 e7       	ldi	r20, 0x75	; 117
    72f2:	57 e4       	ldi	r21, 0x47	; 71
    72f4:	05 c0       	rjmp	.+10     	; 0x7300 <render_level_tile+0x46>
		case L_ICE_FAR : LBDrawTile(x, y, map_ice_far); break;
    72f6:	4c e6       	ldi	r20, 0x6C	; 108
    72f8:	57 e4       	ldi	r21, 0x47	; 71
    72fa:	02 c0       	rjmp	.+4      	; 0x7300 <render_level_tile+0x46>
		case L_ICE_HORIZON : LBDrawTile(x, y, map_ice_horizon); break;
    72fc:	42 e7       	ldi	r20, 0x72	; 114
    72fe:	57 e4       	ldi	r21, 0x47	; 71
	}
}
    7300:	1f 91       	pop	r17
    7302:	0f 91       	pop	r16
		case L_ICE_MIDDLE : LBDrawTile(x, y, map_ice_middle); break;
		case L_ICE_LEFT : LBDrawTile(x, y, map_ice_left); break;
		case L_ICE_RIGHT : LBDrawTile(x, y, map_ice_right); break;
		case L_ICE_BOTTOM : LBDrawTile(x, y, map_ice_bottom); break;
		case L_ICE_FAR : LBDrawTile(x, y, map_ice_far); break;
		case L_ICE_HORIZON : LBDrawTile(x, y, map_ice_horizon); break;
    7304:	0c 94 d2 38 	jmp	0x71a4	; 0x71a4 <LBDrawTile>
	}
}
    7308:	1f 91       	pop	r17
    730a:	0f 91       	pop	r16
    730c:	08 95       	ret

0000730e <clear_overlay>:

void clear_overlay(u8 overlayHeight)
{
    730e:	1f 93       	push	r17
    7310:	cf 93       	push	r28
    7312:	df 93       	push	r29
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
    7314:	d0 e0       	ldi	r29, 0x00	; 0
    7316:	10 e2       	ldi	r17, 0x20	; 32
    7318:	18 0f       	add	r17, r24
		case L_ICE_HORIZON : LBDrawTile(x, y, map_ice_horizon); break;
	}
}

void clear_overlay(u8 overlayHeight)
{
    731a:	c0 e2       	ldi	r28, 0x20	; 32
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
	{
		for(u8 y = 0; y < overlayHeight; y++)
    731c:	c1 17       	cp	r28, r17
    731e:	41 f0       	breq	.+16     	; 0x7330 <clear_overlay+0x22>
		{
			SetTile(x, VRAM_TILES_V+y, 0);
    7320:	40 e0       	ldi	r20, 0x00	; 0
    7322:	50 e0       	ldi	r21, 0x00	; 0
    7324:	6c 2f       	mov	r22, r28
    7326:	8d 2f       	mov	r24, r29
    7328:	0e 94 5b 29 	call	0x52b6	; 0x52b6 <SetTile>
    732c:	cf 5f       	subi	r28, 0xFF	; 255
    732e:	f6 cf       	rjmp	.-20     	; 0x731c <clear_overlay+0xe>
	}
}

void clear_overlay(u8 overlayHeight)
{
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
    7330:	df 5f       	subi	r29, 0xFF	; 255
    7332:	dc 31       	cpi	r29, 0x1C	; 28
    7334:	91 f7       	brne	.-28     	; 0x731a <clear_overlay+0xc>
		for(u8 y = 0; y < overlayHeight; y++)
		{
			SetTile(x, VRAM_TILES_V+y, 0);
		}
	}
}
    7336:	df 91       	pop	r29
    7338:	cf 91       	pop	r28
    733a:	1f 91       	pop	r17
    733c:	08 95       	ret

0000733e <get_camera_y>:
	return pgm_read_byte(&level_data[level_index*LEVEL_WIDTH*LEVEL_HEIGHT + level_index*4 + 0]);
}

u8 get_camera_y(u8 level_index)
{
	return pgm_read_byte(&level_data[level_index*LEVEL_WIDTH*LEVEL_HEIGHT + level_index*4 + 1]);
    733e:	28 e5       	ldi	r18, 0x58	; 88
    7340:	36 e0       	ldi	r19, 0x06	; 6
    7342:	48 2f       	mov	r20, r24
    7344:	42 9f       	mul	r20, r18
    7346:	c0 01       	movw	r24, r0
    7348:	43 9f       	mul	r20, r19
    734a:	90 0d       	add	r25, r0
    734c:	11 24       	eor	r1, r1
    734e:	fc 01       	movw	r30, r24
    7350:	ec 5a       	subi	r30, 0xAC	; 172
    7352:	f4 4e       	sbci	r31, 0xE4	; 228
    7354:	84 91       	lpm	r24, Z
}
    7356:	08 95       	ret

00007358 <get_hero_spawn_x>:

u8 get_hero_spawn_x(u8 level_index)
{
	return pgm_read_byte(&level_data[level_index*LEVEL_WIDTH*LEVEL_HEIGHT + level_index*4 + 2]);
    7358:	28 e5       	ldi	r18, 0x58	; 88
    735a:	36 e0       	ldi	r19, 0x06	; 6
    735c:	48 2f       	mov	r20, r24
    735e:	42 9f       	mul	r20, r18
    7360:	c0 01       	movw	r24, r0
    7362:	43 9f       	mul	r20, r19
    7364:	90 0d       	add	r25, r0
    7366:	11 24       	eor	r1, r1
    7368:	fc 01       	movw	r30, r24
    736a:	eb 5a       	subi	r30, 0xAB	; 171
    736c:	f4 4e       	sbci	r31, 0xE4	; 228
    736e:	84 91       	lpm	r24, Z
}
    7370:	08 95       	ret

00007372 <get_hero_spawn_y>:

u8 get_hero_spawn_y(u8 level_index)
{
	return pgm_read_byte(&level_data[level_index*LEVEL_WIDTH*LEVEL_HEIGHT + level_index*4 + 3]);
    7372:	28 e5       	ldi	r18, 0x58	; 88
    7374:	36 e0       	ldi	r19, 0x06	; 6
    7376:	48 2f       	mov	r20, r24
    7378:	42 9f       	mul	r20, r18
    737a:	c0 01       	movw	r24, r0
    737c:	43 9f       	mul	r20, r19
    737e:	90 0d       	add	r25, r0
    7380:	11 24       	eor	r1, r1
    7382:	fc 01       	movw	r30, r24
    7384:	ea 5a       	subi	r30, 0xAA	; 170
    7386:	f4 4e       	sbci	r31, 0xE4	; 228
    7388:	84 91       	lpm	r24, Z
}
    738a:	08 95       	ret

0000738c <get_level_tile>:

u8 get_level_tile(u8 level_index, u16 x, u16 y)
{
    738c:	fb 01       	movw	r30, r22
    738e:	34 96       	adiw	r30, 0x04	; 4
	return pgm_read_byte(&level_data[level_index*LEVEL_WIDTH*LEVEL_HEIGHT + level_index*4 + 4 + (y*LEVEL_WIDTH+x)]);
    7390:	9c e3       	ldi	r25, 0x3C	; 60
    7392:	94 9f       	mul	r25, r20
    7394:	90 01       	movw	r18, r0
    7396:	95 9f       	mul	r25, r21
    7398:	30 0d       	add	r19, r0
    739a:	11 24       	eor	r1, r1
    739c:	e2 0f       	add	r30, r18
    739e:	f3 1f       	adc	r31, r19
    73a0:	28 e5       	ldi	r18, 0x58	; 88
    73a2:	36 e0       	ldi	r19, 0x06	; 6
    73a4:	48 2f       	mov	r20, r24
    73a6:	42 9f       	mul	r20, r18
    73a8:	c0 01       	movw	r24, r0
    73aa:	43 9f       	mul	r20, r19
    73ac:	90 0d       	add	r25, r0
    73ae:	11 24       	eor	r1, r1
    73b0:	e8 0f       	add	r30, r24
    73b2:	f9 1f       	adc	r31, r25
    73b4:	ed 5a       	subi	r30, 0xAD	; 173
    73b6:	f4 4e       	sbci	r31, 0xE4	; 228
    73b8:	84 91       	lpm	r24, Z
}
    73ba:	08 95       	ret

000073bc <render_camera_view>:
#else

#endif

void render_camera_view()
{
    73bc:	7f 92       	push	r7
    73be:	8f 92       	push	r8
    73c0:	9f 92       	push	r9
    73c2:	af 92       	push	r10
    73c4:	bf 92       	push	r11
    73c6:	cf 92       	push	r12
    73c8:	df 92       	push	r13
    73ca:	ef 92       	push	r14
    73cc:	ff 92       	push	r15
    73ce:	0f 93       	push	r16
    73d0:	1f 93       	push	r17
    73d2:	cf 93       	push	r28
    73d4:	df 93       	push	r29
	u8 level_tile;
	u16 camara_x_tile = game.camera_x/8;
    73d6:	c0 91 98 0d 	lds	r28, 0x0D98
    73da:	d0 91 99 0d 	lds	r29, 0x0D99
    73de:	83 e0       	ldi	r24, 0x03	; 3
    73e0:	d6 95       	lsr	r29
    73e2:	c7 95       	ror	r28
    73e4:	8a 95       	dec	r24
    73e6:	e1 f7       	brne	.-8      	; 0x73e0 <render_camera_view+0x24>
	u16 camera_y_tile = game.camera_y/8;
    73e8:	c0 90 9a 0d 	lds	r12, 0x0D9A
    73ec:	d0 90 9b 0d 	lds	r13, 0x0D9B
    73f0:	93 e0       	ldi	r25, 0x03	; 3
    73f2:	d6 94       	lsr	r13
    73f4:	c7 94       	ror	r12
    73f6:	9a 95       	dec	r25
    73f8:	e1 f7       	brne	.-8      	; 0x73f2 <render_camera_view+0x36>
	
	for (u16 x = camara_x_tile; x < camara_x_tile + CAMERA_WIDTH + 1; x++)
    73fa:	8e 01       	movw	r16, r28
    73fc:	5e 01       	movw	r10, r28
    73fe:	8d e1       	ldi	r24, 0x1D	; 29
    7400:	a8 0e       	add	r10, r24
    7402:	b1 1c       	adc	r11, r1
	{
		for (u16 y = camera_y_tile; y < camera_y_tile + CAMERA_HEIGHT + 1; y++)
    7404:	46 01       	movw	r8, r12
    7406:	8b e1       	ldi	r24, 0x1B	; 27
    7408:	88 0e       	add	r8, r24
    740a:	91 1c       	adc	r9, r1
{
	u8 level_tile;
	u16 camara_x_tile = game.camera_x/8;
	u16 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x < camara_x_tile + CAMERA_WIDTH + 1; x++)
    740c:	0a 15       	cp	r16, r10
    740e:	1b 05       	cpc	r17, r11
    7410:	c0 f4       	brcc	.+48     	; 0x7442 <render_camera_view+0x86>
    7412:	76 01       	movw	r14, r12
    7414:	70 2e       	mov	r7, r16
    7416:	7c 1a       	sub	r7, r28
	{
		for (u16 y = camera_y_tile; y < camera_y_tile + CAMERA_HEIGHT + 1; y++)
    7418:	e8 14       	cp	r14, r8
    741a:	f9 04       	cpc	r15, r9
    741c:	78 f4       	brcc	.+30     	; 0x743c <render_camera_view+0x80>
		{
			level_tile = get_level_tile(game.current_level, x, y);
    741e:	a7 01       	movw	r20, r14
    7420:	b8 01       	movw	r22, r16
    7422:	80 91 91 0d 	lds	r24, 0x0D91
    7426:	0e 94 c6 39 	call	0x738c	; 0x738c <get_level_tile>
    742a:	4e 2d       	mov	r20, r14
    742c:	4c 19       	sub	r20, r12
			render_level_tile(level_tile, x - camara_x_tile, y - camera_y_tile);
    742e:	67 2d       	mov	r22, r7
    7430:	0e 94 5d 39 	call	0x72ba	; 0x72ba <render_level_tile>
	u16 camara_x_tile = game.camera_x/8;
	u16 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x < camara_x_tile + CAMERA_WIDTH + 1; x++)
	{
		for (u16 y = camera_y_tile; y < camera_y_tile + CAMERA_HEIGHT + 1; y++)
    7434:	8f ef       	ldi	r24, 0xFF	; 255
    7436:	e8 1a       	sub	r14, r24
    7438:	f8 0a       	sbc	r15, r24
    743a:	ee cf       	rjmp	.-36     	; 0x7418 <render_camera_view+0x5c>
{
	u8 level_tile;
	u16 camara_x_tile = game.camera_x/8;
	u16 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x < camara_x_tile + CAMERA_WIDTH + 1; x++)
    743c:	0f 5f       	subi	r16, 0xFF	; 255
    743e:	1f 4f       	sbci	r17, 0xFF	; 255
    7440:	e5 cf       	rjmp	.-54     	; 0x740c <render_camera_view+0x50>
		{
			level_tile = get_level_tile(game.current_level, x, y);
			render_level_tile(level_tile, x - camara_x_tile, y - camera_y_tile);
		}
	}
}
    7442:	df 91       	pop	r29
    7444:	cf 91       	pop	r28
    7446:	1f 91       	pop	r17
    7448:	0f 91       	pop	r16
    744a:	ff 90       	pop	r15
    744c:	ef 90       	pop	r14
    744e:	df 90       	pop	r13
    7450:	cf 90       	pop	r12
    7452:	bf 90       	pop	r11
    7454:	af 90       	pop	r10
    7456:	9f 90       	pop	r9
    7458:	8f 90       	pop	r8
    745a:	7f 90       	pop	r7
    745c:	08 95       	ret

0000745e <append_tile_column>:

void append_tile_column()
{
    745e:	cf 93       	push	r28
    7460:	df 93       	push	r29
    7462:	c0 e0       	ldi	r28, 0x00	; 0
    7464:	d0 e0       	ldi	r29, 0x00	; 0
	u8 level_tile;

    for (u8 y = 0; y < CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y);
    7466:	60 91 96 0d 	lds	r22, 0x0D96
    746a:	70 91 97 0d 	lds	r23, 0x0D97
    746e:	ae 01       	movw	r20, r28
    7470:	80 91 91 0d 	lds	r24, 0x0D91
    7474:	0e 94 c6 39 	call	0x738c	; 0x738c <get_level_tile>
		render_level_tile(level_tile, game.scroll_dest_x, y);
    7478:	4c 2f       	mov	r20, r28
    747a:	60 91 95 0d 	lds	r22, 0x0D95
    747e:	0e 94 5d 39 	call	0x72ba	; 0x72ba <render_level_tile>
    7482:	21 96       	adiw	r28, 0x01	; 1

void append_tile_column()
{
	u8 level_tile;

    for (u8 y = 0; y < CAMERA_HEIGHT; y++)
    7484:	ca 31       	cpi	r28, 0x1A	; 26
    7486:	d1 05       	cpc	r29, r1
    7488:	71 f7       	brne	.-36     	; 0x7466 <append_tile_column+0x8>
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y);
		render_level_tile(level_tile, game.scroll_dest_x, y);
    }
	
    game.scroll_src_x++;
    748a:	80 91 96 0d 	lds	r24, 0x0D96
    748e:	90 91 97 0d 	lds	r25, 0x0D97
    7492:	01 96       	adiw	r24, 0x01	; 1
    7494:	90 93 97 0d 	sts	0x0D97, r25
    7498:	80 93 96 0d 	sts	0x0D96, r24
	game.scroll_dest_x++;
    749c:	80 91 95 0d 	lds	r24, 0x0D95
    74a0:	8f 5f       	subi	r24, 0xFF	; 255
    if(game.scroll_dest_x>=32)game.scroll_dest_x=0;
    74a2:	80 32       	cpi	r24, 0x20	; 32
    74a4:	18 f4       	brcc	.+6      	; 0x74ac <append_tile_column+0x4e>
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y);
		render_level_tile(level_tile, game.scroll_dest_x, y);
    }
	
    game.scroll_src_x++;
	game.scroll_dest_x++;
    74a6:	80 93 95 0d 	sts	0x0D95, r24
    74aa:	02 c0       	rjmp	.+4      	; 0x74b0 <append_tile_column+0x52>
    if(game.scroll_dest_x>=32)game.scroll_dest_x=0;
    74ac:	10 92 95 0d 	sts	0x0D95, r1
}
    74b0:	df 91       	pop	r29
    74b2:	cf 91       	pop	r28
    74b4:	08 95       	ret

000074b6 <move_camera_x>:

void move_camera_x()
{	
	game.camera_x++;
    74b6:	80 91 98 0d 	lds	r24, 0x0D98
    74ba:	90 91 99 0d 	lds	r25, 0x0D99
    74be:	01 96       	adiw	r24, 0x01	; 1
    74c0:	90 93 99 0d 	sts	0x0D99, r25
    74c4:	80 93 98 0d 	sts	0x0D98, r24
	Scroll(1,0);
    74c8:	60 e0       	ldi	r22, 0x00	; 0
    74ca:	81 e0       	ldi	r24, 0x01	; 1
    74cc:	0e 94 28 36 	call	0x6c50	; 0x6c50 <Scroll>
	if (++game.scroll == 8)
    74d0:	80 91 94 0d 	lds	r24, 0x0D94
    74d4:	8f 5f       	subi	r24, 0xFF	; 255
    74d6:	88 30       	cpi	r24, 0x08	; 8
    74d8:	19 f0       	breq	.+6      	; 0x74e0 <move_camera_x+0x2a>
    74da:	80 93 94 0d 	sts	0x0D94, r24
    74de:	08 95       	ret
	{
		game.scroll = 0;
    74e0:	10 92 94 0d 	sts	0x0D94, r1
		append_tile_column();
    74e4:	0c 94 2f 3a 	jmp	0x745e	; 0x745e <append_tile_column>

000074e8 <load_level>:
	}
}

void load_level(u8 index)
{	
    74e8:	1f 93       	push	r17
    74ea:	cf 93       	push	r28
    74ec:	df 93       	push	r29
    74ee:	18 2f       	mov	r17, r24
	Screen.scrollX = 0;
    74f0:	e9 e9       	ldi	r30, 0x99	; 153
    74f2:	fc e0       	ldi	r31, 0x0C	; 12
    74f4:	13 82       	std	Z+3, r1	; 0x03
	Screen.scrollY = 0;
    74f6:	14 82       	std	Z+4, r1	; 0x04
	Screen.scrollHeight = 30;
    74f8:	8e e1       	ldi	r24, 0x1E	; 30
    74fa:	85 83       	std	Z+5, r24	; 0x05
	Screen.overlayTileTable = tiles_data;
    74fc:	8b e9       	ldi	r24, 0x9B	; 155
    74fe:	9e e2       	ldi	r25, 0x2E	; 46
    7500:	92 83       	std	Z+2, r25	; 0x02
    7502:	81 83       	std	Z+1, r24	; 0x01
	Screen.overlayHeight = 2;
    7504:	82 e0       	ldi	r24, 0x02	; 2
    7506:	80 83       	st	Z, r24
	clear_overlay(2);
    7508:	0e 94 87 39 	call	0x730e	; 0x730e <clear_overlay>
	game.current_level = index;
    750c:	c0 e9       	ldi	r28, 0x90	; 144
    750e:	dd e0       	ldi	r29, 0x0D	; 13
    7510:	19 83       	std	Y+1, r17	; 0x01

#if RLE == 0

u8 get_camera_x(u8 level_index)
{
	return pgm_read_byte(&level_data[level_index*LEVEL_WIDTH*LEVEL_HEIGHT + level_index*4 + 0]);
    7512:	88 e5       	ldi	r24, 0x58	; 88
    7514:	96 e0       	ldi	r25, 0x06	; 6
    7516:	18 9f       	mul	r17, r24
    7518:	f0 01       	movw	r30, r0
    751a:	19 9f       	mul	r17, r25
    751c:	f0 0d       	add	r31, r0
    751e:	11 24       	eor	r1, r1
    7520:	ed 5a       	subi	r30, 0xAD	; 173
    7522:	f4 4e       	sbci	r31, 0xE4	; 228
    7524:	e4 91       	lpm	r30, Z
	Screen.scrollHeight = 30;
	Screen.overlayTileTable = tiles_data;
	Screen.overlayHeight = 2;
	clear_overlay(2);
	game.current_level = index;
	game.camera_x = get_camera_x(index);
    7526:	f0 e0       	ldi	r31, 0x00	; 0
    7528:	f9 87       	std	Y+9, r31	; 0x09
    752a:	e8 87       	std	Y+8, r30	; 0x08
	game.camera_y = get_camera_y(index);
    752c:	81 2f       	mov	r24, r17
    752e:	0e 94 9f 39 	call	0x733e	; 0x733e <get_camera_y>
    7532:	90 e0       	ldi	r25, 0x00	; 0
    7534:	9b 87       	std	Y+11, r25	; 0x0b
    7536:	8a 87       	std	Y+10, r24	; 0x0a
	game.player.shared.x = get_hero_spawn_x(index)*8;
    7538:	81 2f       	mov	r24, r17
    753a:	0e 94 ac 39 	call	0x7358	; 0x7358 <get_hero_spawn_x>
    753e:	28 e0       	ldi	r18, 0x08	; 8
    7540:	82 9f       	mul	r24, r18
    7542:	c0 01       	movw	r24, r0
    7544:	11 24       	eor	r1, r1
    7546:	bc 01       	movw	r22, r24
    7548:	88 27       	eor	r24, r24
    754a:	77 fd       	sbrc	r23, 7
    754c:	80 95       	com	r24
    754e:	98 2f       	mov	r25, r24
    7550:	0e 94 45 42 	call	0x848a	; 0x848a <__floatsisf>
    7554:	6c 8b       	std	Y+20, r22	; 0x14
    7556:	7d 8b       	std	Y+21, r23	; 0x15
    7558:	8e 8b       	std	Y+22, r24	; 0x16
    755a:	9f 8b       	std	Y+23, r25	; 0x17
	game.player.shared.y = get_hero_spawn_y(index)*8;
    755c:	81 2f       	mov	r24, r17
    755e:	0e 94 b9 39 	call	0x7372	; 0x7372 <get_hero_spawn_y>
    7562:	28 e0       	ldi	r18, 0x08	; 8
    7564:	82 9f       	mul	r24, r18
    7566:	c0 01       	movw	r24, r0
    7568:	11 24       	eor	r1, r1
    756a:	bc 01       	movw	r22, r24
    756c:	88 27       	eor	r24, r24
    756e:	77 fd       	sbrc	r23, 7
    7570:	80 95       	com	r24
    7572:	98 2f       	mov	r25, r24
    7574:	0e 94 45 42 	call	0x848a	; 0x848a <__floatsisf>
    7578:	68 8f       	std	Y+24, r22	; 0x18
    757a:	79 8f       	std	Y+25, r23	; 0x19
    757c:	8a 8f       	std	Y+26, r24	; 0x1a
    757e:	9b 8f       	std	Y+27, r25	; 0x1b
	game.camera_x *= 8;
    7580:	88 85       	ldd	r24, Y+8	; 0x08
    7582:	99 85       	ldd	r25, Y+9	; 0x09
    7584:	23 e0       	ldi	r18, 0x03	; 3
    7586:	88 0f       	add	r24, r24
    7588:	99 1f       	adc	r25, r25
    758a:	2a 95       	dec	r18
    758c:	e1 f7       	brne	.-8      	; 0x7586 <load_level+0x9e>
    758e:	99 87       	std	Y+9, r25	; 0x09
    7590:	88 87       	std	Y+8, r24	; 0x08
	game.camera_y *= 8;
    7592:	8a 85       	ldd	r24, Y+10	; 0x0a
    7594:	9b 85       	ldd	r25, Y+11	; 0x0b
    7596:	33 e0       	ldi	r19, 0x03	; 3
    7598:	88 0f       	add	r24, r24
    759a:	99 1f       	adc	r25, r25
    759c:	3a 95       	dec	r19
    759e:	e1 f7       	brne	.-8      	; 0x7598 <load_level+0xb0>
    75a0:	9b 87       	std	Y+11, r25	; 0x0b
    75a2:	8a 87       	std	Y+10, r24	; 0x0a
	render_camera_view();
    75a4:	0e 94 de 39 	call	0x73bc	; 0x73bc <render_camera_view>
	LBMapSprite(0, LBGetNextFrame(&game.player.idle), 0);
    75a8:	84 e2       	ldi	r24, 0x24	; 36
    75aa:	9e e0       	ldi	r25, 0x0E	; 14
    75ac:	0e 94 61 37 	call	0x6ec2	; 0x6ec2 <LBGetNextFrame>
    75b0:	40 e0       	ldi	r20, 0x00	; 0
    75b2:	bc 01       	movw	r22, r24
    75b4:	80 e0       	ldi	r24, 0x00	; 0
}
    75b6:	df 91       	pop	r29
    75b8:	cf 91       	pop	r28
    75ba:	1f 91       	pop	r17
	game.player.shared.x = get_hero_spawn_x(index)*8;
	game.player.shared.y = get_hero_spawn_y(index)*8;
	game.camera_x *= 8;
	game.camera_y *= 8;
	render_camera_view();
	LBMapSprite(0, LBGetNextFrame(&game.player.idle), 0);
    75bc:	0c 94 e1 37 	jmp	0x6fc2	; 0x6fc2 <LBMapSprite>

000075c0 <solid_tile>:
	load_level(index);
}

char solid_tile(u8 level_tile)
{
	switch (level_tile)
    75c0:	81 50       	subi	r24, 0x01	; 1
    75c2:	84 30       	cpi	r24, 0x04	; 4
    75c4:	10 f0       	brcs	.+4      	; 0x75ca <solid_tile+0xa>
		case L_ICE_MIDDLE : return 1;
		case L_ICE_LEFT : return 1;
		case L_ICE_RIGHT : return 1;
		case L_ICE_BOTTOM : return 1;
	}
	return 0;
    75c6:	80 e0       	ldi	r24, 0x00	; 0
    75c8:	08 95       	ret

char solid_tile(u8 level_tile)
{
	switch (level_tile)
	{
		case L_ICE_MIDDLE : return 1;
    75ca:	81 e0       	ldi	r24, 0x01	; 1
		case L_ICE_LEFT : return 1;
		case L_ICE_RIGHT : return 1;
		case L_ICE_BOTTOM : return 1;
	}
	return 0;
}
    75cc:	08 95       	ret

000075ce <on_solid_ground>:

char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
    75ce:	2f 92       	push	r2
    75d0:	3f 92       	push	r3
    75d2:	4f 92       	push	r4
    75d4:	5f 92       	push	r5
    75d6:	6f 92       	push	r6
    75d8:	7f 92       	push	r7
    75da:	8f 92       	push	r8
    75dc:	9f 92       	push	r9
    75de:	af 92       	push	r10
    75e0:	bf 92       	push	r11
    75e2:	cf 92       	push	r12
    75e4:	df 92       	push	r13
    75e6:	ef 92       	push	r14
    75e8:	ff 92       	push	r15
    75ea:	0f 93       	push	r16
    75ec:	1f 93       	push	r17
    75ee:	cf 93       	push	r28
    75f0:	df 93       	push	r29
    75f2:	00 d0       	rcall	.+0      	; 0x75f4 <on_solid_ground+0x26>
    75f4:	00 d0       	rcall	.+0      	; 0x75f6 <on_solid_ground+0x28>
    75f6:	00 d0       	rcall	.+0      	; 0x75f8 <on_solid_ground+0x2a>
    75f8:	cd b7       	in	r28, 0x3d	; 61
    75fa:	de b7       	in	r29, 0x3e	; 62
    75fc:	9e 83       	std	Y+6, r25	; 0x06
    75fe:	8d 83       	std	Y+5, r24	; 0x05
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
    7600:	88 e0       	ldi	r24, 0x08	; 8
    7602:	48 9f       	mul	r20, r24
    7604:	a0 01       	movw	r20, r0
    7606:	11 24       	eor	r1, r1
    7608:	26 2e       	mov	r2, r22
    760a:	31 2c       	mov	r3, r1
char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
    760c:	00 e0       	ldi	r16, 0x00	; 0
    760e:	10 e0       	ldi	r17, 0x00	; 0
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
    7610:	ca 01       	movw	r24, r20
    7612:	aa 27       	eor	r26, r26
    7614:	97 fd       	sbrc	r25, 7
    7616:	a0 95       	com	r26
    7618:	ba 2f       	mov	r27, r26
    761a:	89 83       	std	Y+1, r24	; 0x01
    761c:	9a 83       	std	Y+2, r25	; 0x02
    761e:	ab 83       	std	Y+3, r26	; 0x03
    7620:	bc 83       	std	Y+4, r27	; 0x04
char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
    7622:	02 15       	cp	r16, r2
    7624:	13 05       	cpc	r17, r3
    7626:	09 f4       	brne	.+2      	; 0x762a <on_solid_ground+0x5c>
    7628:	81 c0       	rjmp	.+258    	; 0x772c <on_solid_ground+0x15e>
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
    762a:	69 81       	ldd	r22, Y+1	; 0x01
    762c:	7a 81       	ldd	r23, Y+2	; 0x02
    762e:	8b 81       	ldd	r24, Y+3	; 0x03
    7630:	9c 81       	ldd	r25, Y+4	; 0x04
    7632:	0e 94 45 42 	call	0x848a	; 0x848a <__floatsisf>
    7636:	4b 01       	movw	r8, r22
    7638:	5c 01       	movw	r10, r24
    763a:	b8 01       	movw	r22, r16
    763c:	88 27       	eor	r24, r24
    763e:	77 fd       	sbrc	r23, 7
    7640:	80 95       	com	r24
    7642:	98 2f       	mov	r25, r24
    7644:	0e 94 45 42 	call	0x848a	; 0x848a <__floatsisf>
    7648:	6b 01       	movw	r12, r22
    764a:	7c 01       	movw	r14, r24
    764c:	ad 81       	ldd	r26, Y+5	; 0x05
    764e:	be 81       	ldd	r27, Y+6	; 0x06
    7650:	1c 96       	adiw	r26, 0x0c	; 12
    7652:	2d 91       	ld	r18, X+
    7654:	3d 91       	ld	r19, X+
    7656:	4d 91       	ld	r20, X+
    7658:	5c 91       	ld	r21, X
    765a:	1f 97       	sbiw	r26, 0x0f	; 15
    765c:	c5 01       	movw	r24, r10
    765e:	b4 01       	movw	r22, r8
    7660:	0e 94 af 41 	call	0x835e	; 0x835e <__addsf3>
    7664:	20 e0       	ldi	r18, 0x00	; 0
    7666:	30 e0       	ldi	r19, 0x00	; 0
    7668:	40 e0       	ldi	r20, 0x00	; 0
    766a:	5e e3       	ldi	r21, 0x3E	; 62
    766c:	0e 94 f9 42 	call	0x85f2	; 0x85f2 <__mulsf3>
    7670:	0e 94 17 42 	call	0x842e	; 0x842e <__fixunssfsi>
    7674:	2b 01       	movw	r4, r22
    7676:	3c 01       	movw	r6, r24
    7678:	20 e0       	ldi	r18, 0x00	; 0
    767a:	30 e0       	ldi	r19, 0x00	; 0
    767c:	40 e0       	ldi	r20, 0x00	; 0
    767e:	5e e3       	ldi	r21, 0x3E	; 62
    7680:	ed 81       	ldd	r30, Y+5	; 0x05
    7682:	fe 81       	ldd	r31, Y+6	; 0x06
    7684:	60 85       	ldd	r22, Z+8	; 0x08
    7686:	71 85       	ldd	r23, Z+9	; 0x09
    7688:	82 85       	ldd	r24, Z+10	; 0x0a
    768a:	93 85       	ldd	r25, Z+11	; 0x0b
    768c:	0e 94 f9 42 	call	0x85f2	; 0x85f2 <__mulsf3>
    7690:	a7 01       	movw	r20, r14
    7692:	96 01       	movw	r18, r12
    7694:	0e 94 af 41 	call	0x835e	; 0x835e <__addsf3>
    7698:	0e 94 17 42 	call	0x842e	; 0x842e <__fixunssfsi>
    769c:	a2 01       	movw	r20, r4
    769e:	80 91 91 0d 	lds	r24, 0x0D91
    76a2:	0e 94 c6 39 	call	0x738c	; 0x738c <get_level_tile>
    76a6:	78 2e       	mov	r7, r24
		lt2 = get_level_tile(game.current_level, (s->x+7) / 8 + x, (s->y + tile_height*8) / 8);
    76a8:	ad 81       	ldd	r26, Y+5	; 0x05
    76aa:	be 81       	ldd	r27, Y+6	; 0x06
    76ac:	1c 96       	adiw	r26, 0x0c	; 12
    76ae:	2d 91       	ld	r18, X+
    76b0:	3d 91       	ld	r19, X+
    76b2:	4d 91       	ld	r20, X+
    76b4:	5c 91       	ld	r21, X
    76b6:	1f 97       	sbiw	r26, 0x0f	; 15
    76b8:	c5 01       	movw	r24, r10
    76ba:	b4 01       	movw	r22, r8
    76bc:	0e 94 af 41 	call	0x835e	; 0x835e <__addsf3>
    76c0:	20 e0       	ldi	r18, 0x00	; 0
    76c2:	30 e0       	ldi	r19, 0x00	; 0
    76c4:	40 e0       	ldi	r20, 0x00	; 0
    76c6:	5e e3       	ldi	r21, 0x3E	; 62
    76c8:	0e 94 f9 42 	call	0x85f2	; 0x85f2 <__mulsf3>
    76cc:	0e 94 17 42 	call	0x842e	; 0x842e <__fixunssfsi>
    76d0:	4b 01       	movw	r8, r22
    76d2:	5c 01       	movw	r10, r24
    76d4:	20 e0       	ldi	r18, 0x00	; 0
    76d6:	30 e0       	ldi	r19, 0x00	; 0
    76d8:	40 ee       	ldi	r20, 0xE0	; 224
    76da:	50 e4       	ldi	r21, 0x40	; 64
    76dc:	ed 81       	ldd	r30, Y+5	; 0x05
    76de:	fe 81       	ldd	r31, Y+6	; 0x06
    76e0:	60 85       	ldd	r22, Z+8	; 0x08
    76e2:	71 85       	ldd	r23, Z+9	; 0x09
    76e4:	82 85       	ldd	r24, Z+10	; 0x0a
    76e6:	93 85       	ldd	r25, Z+11	; 0x0b
    76e8:	0e 94 af 41 	call	0x835e	; 0x835e <__addsf3>
    76ec:	20 e0       	ldi	r18, 0x00	; 0
    76ee:	30 e0       	ldi	r19, 0x00	; 0
    76f0:	40 e0       	ldi	r20, 0x00	; 0
    76f2:	5e e3       	ldi	r21, 0x3E	; 62
    76f4:	0e 94 f9 42 	call	0x85f2	; 0x85f2 <__mulsf3>
    76f8:	a7 01       	movw	r20, r14
    76fa:	96 01       	movw	r18, r12
    76fc:	0e 94 af 41 	call	0x835e	; 0x835e <__addsf3>
    7700:	0e 94 17 42 	call	0x842e	; 0x842e <__fixunssfsi>
    7704:	a4 01       	movw	r20, r8
    7706:	80 91 91 0d 	lds	r24, 0x0D91
    770a:	0e 94 c6 39 	call	0x738c	; 0x738c <get_level_tile>
    770e:	f8 2e       	mov	r15, r24
		if (solid_tile(lt1) || solid_tile(lt2))
    7710:	87 2d       	mov	r24, r7
    7712:	0e 94 e0 3a 	call	0x75c0	; 0x75c0 <solid_tile>
    7716:	81 11       	cpse	r24, r1
    7718:	0b c0       	rjmp	.+22     	; 0x7730 <on_solid_ground+0x162>
    771a:	8f 2d       	mov	r24, r15
    771c:	0e 94 e0 3a 	call	0x75c0	; 0x75c0 <solid_tile>
    7720:	0f 5f       	subi	r16, 0xFF	; 255
    7722:	1f 4f       	sbci	r17, 0xFF	; 255
    7724:	88 23       	and	r24, r24
    7726:	09 f4       	brne	.+2      	; 0x772a <on_solid_ground+0x15c>
    7728:	7c cf       	rjmp	.-264    	; 0x7622 <on_solid_ground+0x54>
    772a:	02 c0       	rjmp	.+4      	; 0x7730 <on_solid_ground+0x162>
		{
			return 1;
		}
	}
	return 0;
    772c:	80 e0       	ldi	r24, 0x00	; 0
    772e:	01 c0       	rjmp	.+2      	; 0x7732 <on_solid_ground+0x164>
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
		lt2 = get_level_tile(game.current_level, (s->x+7) / 8 + x, (s->y + tile_height*8) / 8);
		if (solid_tile(lt1) || solid_tile(lt2))
		{
			return 1;
    7730:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return 0;
}
    7732:	26 96       	adiw	r28, 0x06	; 6
    7734:	0f b6       	in	r0, 0x3f	; 63
    7736:	f8 94       	cli
    7738:	de bf       	out	0x3e, r29	; 62
    773a:	0f be       	out	0x3f, r0	; 63
    773c:	cd bf       	out	0x3d, r28	; 61
    773e:	df 91       	pop	r29
    7740:	cf 91       	pop	r28
    7742:	1f 91       	pop	r17
    7744:	0f 91       	pop	r16
    7746:	ff 90       	pop	r15
    7748:	ef 90       	pop	r14
    774a:	df 90       	pop	r13
    774c:	cf 90       	pop	r12
    774e:	bf 90       	pop	r11
    7750:	af 90       	pop	r10
    7752:	9f 90       	pop	r9
    7754:	8f 90       	pop	r8
    7756:	7f 90       	pop	r7
    7758:	6f 90       	pop	r6
    775a:	5f 90       	pop	r5
    775c:	4f 90       	pop	r4
    775e:	3f 90       	pop	r3
    7760:	2f 90       	pop	r2
    7762:	08 95       	ret

00007764 <update_player>:

void update_player()
{
    7764:	1f 93       	push	r17
    7766:	cf 93       	push	r28
    7768:	df 93       	push	r29
    776a:	1f 92       	push	r1
    776c:	cd b7       	in	r28, 0x3d	; 61
    776e:	de b7       	in	r29, 0x3e	; 62
	
	if (game.player.flags & (IDLE|RUNNING))
    7770:	80 91 ae 0d 	lds	r24, 0x0DAE
    7774:	98 2f       	mov	r25, r24
    7776:	9a 70       	andi	r25, 0x0A	; 10
    7778:	09 f4       	brne	.+2      	; 0x777c <update_player+0x18>
    777a:	a8 c0       	rjmp	.+336    	; 0x78cc <update_player+0x168>
	{
		if (!on_solid_ground(&game.player.shared, 2, 3))
    777c:	43 e0       	ldi	r20, 0x03	; 3
    777e:	62 e0       	ldi	r22, 0x02	; 2
    7780:	8c e9       	ldi	r24, 0x9C	; 156
    7782:	9d e0       	ldi	r25, 0x0D	; 13
    7784:	0e 94 e7 3a 	call	0x75ce	; 0x75ce <on_solid_ground>
    7788:	88 23       	and	r24, r24
    778a:	09 f4       	brne	.+2      	; 0x778e <update_player+0x2a>
    778c:	89 c0       	rjmp	.+274    	; 0x78a0 <update_player+0x13c>
			game.player.flags = JUMPING;
			LBMapSprite(0, LBGetNextFrame(&game.player.jump), sprites[0].flags);
		}
		else
		{
			if ((game.joypadState.held & BTN_RIGHT) && (game.player.shared.x/8 + 2 < LEVEL_WIDTH))
    778e:	10 91 50 0e 	lds	r17, 0x0E50
    7792:	17 ff       	sbrs	r17, 7
    7794:	31 c0       	rjmp	.+98     	; 0x77f8 <update_player+0x94>
    7796:	20 e0       	ldi	r18, 0x00	; 0
    7798:	30 e0       	ldi	r19, 0x00	; 0
    779a:	40 e0       	ldi	r20, 0x00	; 0
    779c:	5e e3       	ldi	r21, 0x3E	; 62
    779e:	60 91 a4 0d 	lds	r22, 0x0DA4
    77a2:	70 91 a5 0d 	lds	r23, 0x0DA5
    77a6:	80 91 a6 0d 	lds	r24, 0x0DA6
    77aa:	90 91 a7 0d 	lds	r25, 0x0DA7
    77ae:	0e 94 f9 42 	call	0x85f2	; 0x85f2 <__mulsf3>
    77b2:	20 e0       	ldi	r18, 0x00	; 0
    77b4:	30 e0       	ldi	r19, 0x00	; 0
    77b6:	40 e0       	ldi	r20, 0x00	; 0
    77b8:	50 e4       	ldi	r21, 0x40	; 64
    77ba:	0e 94 af 41 	call	0x835e	; 0x835e <__addsf3>
    77be:	20 e0       	ldi	r18, 0x00	; 0
    77c0:	30 e0       	ldi	r19, 0x00	; 0
    77c2:	40 e7       	ldi	r20, 0x70	; 112
    77c4:	52 e4       	ldi	r21, 0x42	; 66
    77c6:	0e 94 13 42 	call	0x8426	; 0x8426 <__cmpsf2>
    77ca:	87 ff       	sbrs	r24, 7
    77cc:	15 c0       	rjmp	.+42     	; 0x77f8 <update_player+0x94>
			{
				game.player.shared.vx = RUN_SPEED;
    77ce:	80 e0       	ldi	r24, 0x00	; 0
    77d0:	90 e0       	ldi	r25, 0x00	; 0
    77d2:	a0 e7       	ldi	r26, 0x70	; 112
    77d4:	b2 e4       	ldi	r27, 0x42	; 66
    77d6:	80 93 9c 0d 	sts	0x0D9C, r24
    77da:	90 93 9d 0d 	sts	0x0D9D, r25
    77de:	a0 93 9e 0d 	sts	0x0D9E, r26
    77e2:	b0 93 9f 0d 	sts	0x0D9F, r27
				game.player.flags = RUNNING;
    77e6:	82 e0       	ldi	r24, 0x02	; 2
    77e8:	80 93 ae 0d 	sts	0x0DAE, r24
				LBMapSprite(0, LBGetNextFrame(&game.player.run), 0);
    77ec:	8c e2       	ldi	r24, 0x2C	; 44
    77ee:	9e e0       	ldi	r25, 0x0E	; 14
    77f0:	0e 94 61 37 	call	0x6ec2	; 0x6ec2 <LBGetNextFrame>
    77f4:	40 e0       	ldi	r20, 0x00	; 0
    77f6:	40 c0       	rjmp	.+128    	; 0x7878 <update_player+0x114>
			}
			else if ((game.joypadState.held & BTN_LEFT) && (game.player.shared.x > game.camera_x))
    77f8:	16 ff       	sbrs	r17, 6
    77fa:	2b c0       	rjmp	.+86     	; 0x7852 <update_player+0xee>
    77fc:	60 91 98 0d 	lds	r22, 0x0D98
    7800:	70 91 99 0d 	lds	r23, 0x0D99
    7804:	80 e0       	ldi	r24, 0x00	; 0
    7806:	90 e0       	ldi	r25, 0x00	; 0
    7808:	0e 94 43 42 	call	0x8486	; 0x8486 <__floatunsisf>
    780c:	9b 01       	movw	r18, r22
    780e:	ac 01       	movw	r20, r24
    7810:	60 91 a4 0d 	lds	r22, 0x0DA4
    7814:	70 91 a5 0d 	lds	r23, 0x0DA5
    7818:	80 91 a6 0d 	lds	r24, 0x0DA6
    781c:	90 91 a7 0d 	lds	r25, 0x0DA7
    7820:	0e 94 f5 42 	call	0x85ea	; 0x85ea <__gesf2>
    7824:	18 16       	cp	r1, r24
    7826:	ac f4       	brge	.+42     	; 0x7852 <update_player+0xee>
			{
				game.player.shared.vx = -RUN_SPEED;
    7828:	80 e0       	ldi	r24, 0x00	; 0
    782a:	90 e0       	ldi	r25, 0x00	; 0
    782c:	a0 e7       	ldi	r26, 0x70	; 112
    782e:	b2 ec       	ldi	r27, 0xC2	; 194
    7830:	80 93 9c 0d 	sts	0x0D9C, r24
    7834:	90 93 9d 0d 	sts	0x0D9D, r25
    7838:	a0 93 9e 0d 	sts	0x0D9E, r26
    783c:	b0 93 9f 0d 	sts	0x0D9F, r27
				game.player.flags = RUNNING;
    7840:	82 e0       	ldi	r24, 0x02	; 2
    7842:	80 93 ae 0d 	sts	0x0DAE, r24
				LBMapSprite(0, LBGetNextFrame(&game.player.run), SPRITE_FLIP_X);
    7846:	8c e2       	ldi	r24, 0x2C	; 44
    7848:	9e e0       	ldi	r25, 0x0E	; 14
    784a:	0e 94 61 37 	call	0x6ec2	; 0x6ec2 <LBGetNextFrame>
    784e:	41 e0       	ldi	r20, 0x01	; 1
    7850:	13 c0       	rjmp	.+38     	; 0x7878 <update_player+0x114>
			}
			else
			{
				game.player.flags = IDLE;
    7852:	88 e0       	ldi	r24, 0x08	; 8
    7854:	80 93 ae 0d 	sts	0x0DAE, r24
				game.player.shared.vx = 0;
    7858:	10 92 9c 0d 	sts	0x0D9C, r1
    785c:	10 92 9d 0d 	sts	0x0D9D, r1
    7860:	10 92 9e 0d 	sts	0x0D9E, r1
    7864:	10 92 9f 0d 	sts	0x0D9F, r1
				LBMapSprite(0, LBGetNextFrame(&game.player.idle), sprites[0].flags);
    7868:	40 91 05 05 	lds	r20, 0x0505
    786c:	84 e2       	ldi	r24, 0x24	; 36
    786e:	9e e0       	ldi	r25, 0x0E	; 14
    7870:	49 83       	std	Y+1, r20	; 0x01
    7872:	0e 94 61 37 	call	0x6ec2	; 0x6ec2 <LBGetNextFrame>
    7876:	49 81       	ldd	r20, Y+1	; 0x01
    7878:	bc 01       	movw	r22, r24
    787a:	80 e0       	ldi	r24, 0x00	; 0
    787c:	0e 94 e1 37 	call	0x6fc2	; 0x6fc2 <LBMapSprite>
			}
			if (game.joypadState.pressed & BTN_B)
    7880:	80 91 4c 0e 	lds	r24, 0x0E4C
    7884:	80 ff       	sbrs	r24, 0
    7886:	9b c0       	rjmp	.+310    	; 0x79be <update_player+0x25a>
			{
				game.player.shared.vy = -JUMP_SPEED;
    7888:	80 e0       	ldi	r24, 0x00	; 0
    788a:	90 e0       	ldi	r25, 0x00	; 0
    788c:	a6 e1       	ldi	r26, 0x16	; 22
    788e:	b3 ec       	ldi	r27, 0xC3	; 195
    7890:	80 93 a0 0d 	sts	0x0DA0, r24
    7894:	90 93 a1 0d 	sts	0x0DA1, r25
    7898:	a0 93 a2 0d 	sts	0x0DA2, r26
    789c:	b0 93 a3 0d 	sts	0x0DA3, r27
				game.player.shared.gravity = GRAVITY;
    78a0:	88 ec       	ldi	r24, 0xC8	; 200
    78a2:	80 93 ac 0d 	sts	0x0DAC, r24
				game.player.flags = JUMPING;
    78a6:	81 e0       	ldi	r24, 0x01	; 1
    78a8:	80 93 ae 0d 	sts	0x0DAE, r24
				LBMapSprite(0, LBGetNextFrame(&game.player.jump), sprites[0].flags);
    78ac:	40 91 05 05 	lds	r20, 0x0505
    78b0:	84 e3       	ldi	r24, 0x34	; 52
    78b2:	9e e0       	ldi	r25, 0x0E	; 14
    78b4:	49 83       	std	Y+1, r20	; 0x01
    78b6:	0e 94 61 37 	call	0x6ec2	; 0x6ec2 <LBGetNextFrame>
    78ba:	49 81       	ldd	r20, Y+1	; 0x01
    78bc:	bc 01       	movw	r22, r24
    78be:	80 e0       	ldi	r24, 0x00	; 0
	}
	else if (game.player.flags & PRONE)
	{
		
	}
}
    78c0:	0f 90       	pop	r0
    78c2:	df 91       	pop	r29
    78c4:	cf 91       	pop	r28
    78c6:	1f 91       	pop	r17
			if (game.joypadState.pressed & BTN_B)
			{
				game.player.shared.vy = -JUMP_SPEED;
				game.player.shared.gravity = GRAVITY;
				game.player.flags = JUMPING;
				LBMapSprite(0, LBGetNextFrame(&game.player.jump), sprites[0].flags);
    78c8:	0c 94 e1 37 	jmp	0x6fc2	; 0x6fc2 <LBMapSprite>
			}
		}
	}
	else if (game.player.flags & JUMPING)
    78cc:	80 ff       	sbrs	r24, 0
    78ce:	77 c0       	rjmp	.+238    	; 0x79be <update_player+0x25a>
	{
		if ((game.joypadState.held & BTN_RIGHT) && (game.player.shared.x/8 + 2 < LEVEL_WIDTH))
    78d0:	10 91 50 0e 	lds	r17, 0x0E50
    78d4:	17 ff       	sbrs	r17, 7
    78d6:	2e c0       	rjmp	.+92     	; 0x7934 <update_player+0x1d0>
    78d8:	20 e0       	ldi	r18, 0x00	; 0
    78da:	30 e0       	ldi	r19, 0x00	; 0
    78dc:	40 e0       	ldi	r20, 0x00	; 0
    78de:	5e e3       	ldi	r21, 0x3E	; 62
    78e0:	60 91 a4 0d 	lds	r22, 0x0DA4
    78e4:	70 91 a5 0d 	lds	r23, 0x0DA5
    78e8:	80 91 a6 0d 	lds	r24, 0x0DA6
    78ec:	90 91 a7 0d 	lds	r25, 0x0DA7
    78f0:	0e 94 f9 42 	call	0x85f2	; 0x85f2 <__mulsf3>
    78f4:	20 e0       	ldi	r18, 0x00	; 0
    78f6:	30 e0       	ldi	r19, 0x00	; 0
    78f8:	40 e0       	ldi	r20, 0x00	; 0
    78fa:	50 e4       	ldi	r21, 0x40	; 64
    78fc:	0e 94 af 41 	call	0x835e	; 0x835e <__addsf3>
    7900:	20 e0       	ldi	r18, 0x00	; 0
    7902:	30 e0       	ldi	r19, 0x00	; 0
    7904:	40 e7       	ldi	r20, 0x70	; 112
    7906:	52 e4       	ldi	r21, 0x42	; 66
    7908:	0e 94 13 42 	call	0x8426	; 0x8426 <__cmpsf2>
    790c:	87 ff       	sbrs	r24, 7
    790e:	12 c0       	rjmp	.+36     	; 0x7934 <update_player+0x1d0>
		{
			game.player.shared.vx = RUN_SPEED;
    7910:	80 e0       	ldi	r24, 0x00	; 0
    7912:	90 e0       	ldi	r25, 0x00	; 0
    7914:	a0 e7       	ldi	r26, 0x70	; 112
    7916:	b2 e4       	ldi	r27, 0x42	; 66
    7918:	80 93 9c 0d 	sts	0x0D9C, r24
    791c:	90 93 9d 0d 	sts	0x0D9D, r25
    7920:	a0 93 9e 0d 	sts	0x0D9E, r26
    7924:	b0 93 9f 0d 	sts	0x0D9F, r27
			LBMapSprite(0, LBGetNextFrame(&game.player.jump), 0);
    7928:	84 e3       	ldi	r24, 0x34	; 52
    792a:	9e e0       	ldi	r25, 0x0E	; 14
    792c:	0e 94 61 37 	call	0x6ec2	; 0x6ec2 <LBGetNextFrame>
    7930:	40 e0       	ldi	r20, 0x00	; 0
    7932:	3a c0       	rjmp	.+116    	; 0x79a8 <update_player+0x244>
		}
		else if ((game.joypadState.held & BTN_LEFT) && (game.player.shared.x > game.camera_x))
    7934:	16 ff       	sbrs	r17, 6
    7936:	28 c0       	rjmp	.+80     	; 0x7988 <update_player+0x224>
    7938:	60 91 98 0d 	lds	r22, 0x0D98
    793c:	70 91 99 0d 	lds	r23, 0x0D99
    7940:	80 e0       	ldi	r24, 0x00	; 0
    7942:	90 e0       	ldi	r25, 0x00	; 0
    7944:	0e 94 43 42 	call	0x8486	; 0x8486 <__floatunsisf>
    7948:	9b 01       	movw	r18, r22
    794a:	ac 01       	movw	r20, r24
    794c:	60 91 a4 0d 	lds	r22, 0x0DA4
    7950:	70 91 a5 0d 	lds	r23, 0x0DA5
    7954:	80 91 a6 0d 	lds	r24, 0x0DA6
    7958:	90 91 a7 0d 	lds	r25, 0x0DA7
    795c:	0e 94 f5 42 	call	0x85ea	; 0x85ea <__gesf2>
    7960:	18 16       	cp	r1, r24
    7962:	94 f4       	brge	.+36     	; 0x7988 <update_player+0x224>
		{
			game.player.shared.vx = -RUN_SPEED;
    7964:	80 e0       	ldi	r24, 0x00	; 0
    7966:	90 e0       	ldi	r25, 0x00	; 0
    7968:	a0 e7       	ldi	r26, 0x70	; 112
    796a:	b2 ec       	ldi	r27, 0xC2	; 194
    796c:	80 93 9c 0d 	sts	0x0D9C, r24
    7970:	90 93 9d 0d 	sts	0x0D9D, r25
    7974:	a0 93 9e 0d 	sts	0x0D9E, r26
    7978:	b0 93 9f 0d 	sts	0x0D9F, r27
			LBMapSprite(0, LBGetNextFrame(&game.player.jump), SPRITE_FLIP_X);
    797c:	84 e3       	ldi	r24, 0x34	; 52
    797e:	9e e0       	ldi	r25, 0x0E	; 14
    7980:	0e 94 61 37 	call	0x6ec2	; 0x6ec2 <LBGetNextFrame>
    7984:	41 e0       	ldi	r20, 0x01	; 1
    7986:	10 c0       	rjmp	.+32     	; 0x79a8 <update_player+0x244>
		}
		else
		{
			game.player.shared.vx = 0;
    7988:	10 92 9c 0d 	sts	0x0D9C, r1
    798c:	10 92 9d 0d 	sts	0x0D9D, r1
    7990:	10 92 9e 0d 	sts	0x0D9E, r1
    7994:	10 92 9f 0d 	sts	0x0D9F, r1
			LBMapSprite(0, LBGetNextFrame(&game.player.jump), sprites[0].flags);
    7998:	40 91 05 05 	lds	r20, 0x0505
    799c:	84 e3       	ldi	r24, 0x34	; 52
    799e:	9e e0       	ldi	r25, 0x0E	; 14
    79a0:	49 83       	std	Y+1, r20	; 0x01
    79a2:	0e 94 61 37 	call	0x6ec2	; 0x6ec2 <LBGetNextFrame>
    79a6:	49 81       	ldd	r20, Y+1	; 0x01
    79a8:	bc 01       	movw	r22, r24
    79aa:	80 e0       	ldi	r24, 0x00	; 0
    79ac:	0e 94 e1 37 	call	0x6fc2	; 0x6fc2 <LBMapSprite>
		}
		
		if (game.player.shared.gravity == 0)
    79b0:	80 91 ac 0d 	lds	r24, 0x0DAC
    79b4:	81 11       	cpse	r24, r1
    79b6:	03 c0       	rjmp	.+6      	; 0x79be <update_player+0x25a>
		{
			game.player.flags = IDLE;
    79b8:	88 e0       	ldi	r24, 0x08	; 8
    79ba:	80 93 ae 0d 	sts	0x0DAE, r24
	}
	else if (game.player.flags & PRONE)
	{
		
	}
}
    79be:	0f 90       	pop	r0
    79c0:	df 91       	pop	r29
    79c2:	cf 91       	pop	r28
    79c4:	1f 91       	pop	r17
    79c6:	08 95       	ret

000079c8 <collision_detect_level>:

void collision_detect_level(SpriteShared* s, u8 tile_width, u8 tile_height)
{
    79c8:	2f 92       	push	r2
    79ca:	3f 92       	push	r3
    79cc:	4f 92       	push	r4
    79ce:	5f 92       	push	r5
    79d0:	6f 92       	push	r6
    79d2:	7f 92       	push	r7
    79d4:	8f 92       	push	r8
    79d6:	9f 92       	push	r9
    79d8:	af 92       	push	r10
    79da:	bf 92       	push	r11
    79dc:	cf 92       	push	r12
    79de:	df 92       	push	r13
    79e0:	ef 92       	push	r14
    79e2:	ff 92       	push	r15
    79e4:	0f 93       	push	r16
    79e6:	1f 93       	push	r17
    79e8:	cf 93       	push	r28
    79ea:	df 93       	push	r29
    79ec:	cd b7       	in	r28, 0x3d	; 61
    79ee:	de b7       	in	r29, 0x3e	; 62
    79f0:	2c 97       	sbiw	r28, 0x0c	; 12
    79f2:	0f b6       	in	r0, 0x3f	; 63
    79f4:	f8 94       	cli
    79f6:	de bf       	out	0x3e, r29	; 62
    79f8:	0f be       	out	0x3f, r0	; 63
    79fa:	cd bf       	out	0x3d, r28	; 61
    79fc:	9c 87       	std	Y+12, r25	; 0x0c
    79fe:	8b 87       	std	Y+11, r24	; 0x0b
    7a00:	49 83       	std	Y+1, r20	; 0x01
    7a02:	26 2e       	mov	r2, r22
    7a04:	31 2c       	mov	r3, r1
	u8 lt1, lt2;
	
	// Top
	for (u8 x = 0; x < tile_width; x++)
    7a06:	00 e0       	ldi	r16, 0x00	; 0
    7a08:	10 e0       	ldi	r17, 0x00	; 0
    7a0a:	02 15       	cp	r16, r2
    7a0c:	13 05       	cpc	r17, r3
    7a0e:	09 f4       	brne	.+2      	; 0x7a12 <collision_detect_level+0x4a>
    7a10:	8e c0       	rjmp	.+284    	; 0x7b2e <collision_detect_level+0x166>
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, s->y / 8);
    7a12:	b8 01       	movw	r22, r16
    7a14:	88 27       	eor	r24, r24
    7a16:	77 fd       	sbrc	r23, 7
    7a18:	80 95       	com	r24
    7a1a:	98 2f       	mov	r25, r24
    7a1c:	0e 94 45 42 	call	0x848a	; 0x848a <__floatsisf>
    7a20:	6b 01       	movw	r12, r22
    7a22:	7c 01       	movw	r14, r24
    7a24:	20 e0       	ldi	r18, 0x00	; 0
    7a26:	30 e0       	ldi	r19, 0x00	; 0
    7a28:	40 e0       	ldi	r20, 0x00	; 0
    7a2a:	5e e3       	ldi	r21, 0x3E	; 62
    7a2c:	eb 85       	ldd	r30, Y+11	; 0x0b
    7a2e:	fc 85       	ldd	r31, Y+12	; 0x0c
    7a30:	64 85       	ldd	r22, Z+12	; 0x0c
    7a32:	75 85       	ldd	r23, Z+13	; 0x0d
    7a34:	86 85       	ldd	r24, Z+14	; 0x0e
    7a36:	97 85       	ldd	r25, Z+15	; 0x0f
    7a38:	0e 94 f9 42 	call	0x85f2	; 0x85f2 <__mulsf3>
    7a3c:	0e 94 17 42 	call	0x842e	; 0x842e <__fixunssfsi>
    7a40:	4b 01       	movw	r8, r22
    7a42:	5c 01       	movw	r10, r24
    7a44:	20 e0       	ldi	r18, 0x00	; 0
    7a46:	30 e0       	ldi	r19, 0x00	; 0
    7a48:	40 e0       	ldi	r20, 0x00	; 0
    7a4a:	5e e3       	ldi	r21, 0x3E	; 62
    7a4c:	eb 85       	ldd	r30, Y+11	; 0x0b
    7a4e:	fc 85       	ldd	r31, Y+12	; 0x0c
    7a50:	60 85       	ldd	r22, Z+8	; 0x08
    7a52:	71 85       	ldd	r23, Z+9	; 0x09
    7a54:	82 85       	ldd	r24, Z+10	; 0x0a
    7a56:	93 85       	ldd	r25, Z+11	; 0x0b
    7a58:	0e 94 f9 42 	call	0x85f2	; 0x85f2 <__mulsf3>
    7a5c:	a7 01       	movw	r20, r14
    7a5e:	96 01       	movw	r18, r12
    7a60:	0e 94 af 41 	call	0x835e	; 0x835e <__addsf3>
    7a64:	0e 94 17 42 	call	0x842e	; 0x842e <__fixunssfsi>
    7a68:	a4 01       	movw	r20, r8
    7a6a:	80 91 91 0d 	lds	r24, 0x0D91
    7a6e:	0e 94 c6 39 	call	0x738c	; 0x738c <get_level_tile>
    7a72:	78 2e       	mov	r7, r24
		lt2 = get_level_tile(game.current_level, (s->x+7) / 8 + x, s->y / 8);
    7a74:	20 e0       	ldi	r18, 0x00	; 0
    7a76:	30 e0       	ldi	r19, 0x00	; 0
    7a78:	40 e0       	ldi	r20, 0x00	; 0
    7a7a:	5e e3       	ldi	r21, 0x3E	; 62
    7a7c:	eb 85       	ldd	r30, Y+11	; 0x0b
    7a7e:	fc 85       	ldd	r31, Y+12	; 0x0c
    7a80:	64 85       	ldd	r22, Z+12	; 0x0c
    7a82:	75 85       	ldd	r23, Z+13	; 0x0d
    7a84:	86 85       	ldd	r24, Z+14	; 0x0e
    7a86:	97 85       	ldd	r25, Z+15	; 0x0f
    7a88:	0e 94 f9 42 	call	0x85f2	; 0x85f2 <__mulsf3>
    7a8c:	0e 94 17 42 	call	0x842e	; 0x842e <__fixunssfsi>
    7a90:	4b 01       	movw	r8, r22
    7a92:	5c 01       	movw	r10, r24
    7a94:	20 e0       	ldi	r18, 0x00	; 0
    7a96:	30 e0       	ldi	r19, 0x00	; 0
    7a98:	40 ee       	ldi	r20, 0xE0	; 224
    7a9a:	50 e4       	ldi	r21, 0x40	; 64
    7a9c:	eb 85       	ldd	r30, Y+11	; 0x0b
    7a9e:	fc 85       	ldd	r31, Y+12	; 0x0c
    7aa0:	60 85       	ldd	r22, Z+8	; 0x08
    7aa2:	71 85       	ldd	r23, Z+9	; 0x09
    7aa4:	82 85       	ldd	r24, Z+10	; 0x0a
    7aa6:	93 85       	ldd	r25, Z+11	; 0x0b
    7aa8:	0e 94 af 41 	call	0x835e	; 0x835e <__addsf3>
    7aac:	20 e0       	ldi	r18, 0x00	; 0
    7aae:	30 e0       	ldi	r19, 0x00	; 0
    7ab0:	40 e0       	ldi	r20, 0x00	; 0
    7ab2:	5e e3       	ldi	r21, 0x3E	; 62
    7ab4:	0e 94 f9 42 	call	0x85f2	; 0x85f2 <__mulsf3>
    7ab8:	a7 01       	movw	r20, r14
    7aba:	96 01       	movw	r18, r12
    7abc:	0e 94 af 41 	call	0x835e	; 0x835e <__addsf3>
    7ac0:	0e 94 17 42 	call	0x842e	; 0x842e <__fixunssfsi>
    7ac4:	a4 01       	movw	r20, r8
    7ac6:	80 91 91 0d 	lds	r24, 0x0D91
    7aca:	0e 94 c6 39 	call	0x738c	; 0x738c <get_level_tile>
    7ace:	f8 2e       	mov	r15, r24
		if (solid_tile(lt1) || solid_tile(lt2))
    7ad0:	87 2d       	mov	r24, r7
    7ad2:	0e 94 e0 3a 	call	0x75c0	; 0x75c0 <solid_tile>
    7ad6:	81 11       	cpse	r24, r1
    7ad8:	05 c0       	rjmp	.+10     	; 0x7ae4 <collision_detect_level+0x11c>
    7ada:	8f 2d       	mov	r24, r15
    7adc:	0e 94 e0 3a 	call	0x75c0	; 0x75c0 <solid_tile>
    7ae0:	88 23       	and	r24, r24
    7ae2:	11 f1       	breq	.+68     	; 0x7b28 <collision_detect_level+0x160>
		{
			s->vy =  0;
    7ae4:	eb 85       	ldd	r30, Y+11	; 0x0b
    7ae6:	fc 85       	ldd	r31, Y+12	; 0x0c
    7ae8:	14 82       	std	Z+4, r1	; 0x04
    7aea:	15 82       	std	Z+5, r1	; 0x05
    7aec:	16 82       	std	Z+6, r1	; 0x06
    7aee:	17 82       	std	Z+7, r1	; 0x07
			s->y = (((u16) s->y / 8) + 1) * 8;
    7af0:	64 85       	ldd	r22, Z+12	; 0x0c
    7af2:	75 85       	ldd	r23, Z+13	; 0x0d
    7af4:	86 85       	ldd	r24, Z+14	; 0x0e
    7af6:	97 85       	ldd	r25, Z+15	; 0x0f
    7af8:	0e 94 17 42 	call	0x842e	; 0x842e <__fixunssfsi>
    7afc:	e3 e0       	ldi	r30, 0x03	; 3
    7afe:	76 95       	lsr	r23
    7b00:	67 95       	ror	r22
    7b02:	ea 95       	dec	r30
    7b04:	e1 f7       	brne	.-8      	; 0x7afe <collision_detect_level+0x136>
    7b06:	6f 5f       	subi	r22, 0xFF	; 255
    7b08:	7f 4f       	sbci	r23, 0xFF	; 255
    7b0a:	f3 e0       	ldi	r31, 0x03	; 3
    7b0c:	66 0f       	add	r22, r22
    7b0e:	77 1f       	adc	r23, r23
    7b10:	fa 95       	dec	r31
    7b12:	e1 f7       	brne	.-8      	; 0x7b0c <collision_detect_level+0x144>
    7b14:	80 e0       	ldi	r24, 0x00	; 0
    7b16:	90 e0       	ldi	r25, 0x00	; 0
    7b18:	0e 94 43 42 	call	0x8486	; 0x8486 <__floatunsisf>
    7b1c:	eb 85       	ldd	r30, Y+11	; 0x0b
    7b1e:	fc 85       	ldd	r31, Y+12	; 0x0c
    7b20:	64 87       	std	Z+12, r22	; 0x0c
    7b22:	75 87       	std	Z+13, r23	; 0x0d
    7b24:	86 87       	std	Z+14, r24	; 0x0e
    7b26:	97 87       	std	Z+15, r25	; 0x0f
    7b28:	0f 5f       	subi	r16, 0xFF	; 255
    7b2a:	1f 4f       	sbci	r17, 0xFF	; 255
    7b2c:	6e cf       	rjmp	.-292    	; 0x7a0a <collision_detect_level+0x42>
    7b2e:	39 81       	ldd	r19, Y+1	; 0x01
    7b30:	23 2f       	mov	r18, r19
    7b32:	30 e0       	ldi	r19, 0x00	; 0
    7b34:	3a 87       	std	Y+10, r19	; 0x0a
    7b36:	29 87       	std	Y+9, r18	; 0x09
	}
	
	// Right
	for (u8 y = 0; y < tile_height; y++)
	{
		lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, s->y / 8 + y);
    7b38:	00 e0       	ldi	r16, 0x00	; 0
    7b3a:	10 e0       	ldi	r17, 0x00	; 0
    7b3c:	c1 01       	movw	r24, r2
    7b3e:	63 e0       	ldi	r22, 0x03	; 3
    7b40:	88 0f       	add	r24, r24
    7b42:	99 1f       	adc	r25, r25
    7b44:	6a 95       	dec	r22
    7b46:	e1 f7       	brne	.-8      	; 0x7b40 <collision_detect_level+0x178>
    7b48:	9c 01       	movw	r18, r24
    7b4a:	44 27       	eor	r20, r20
    7b4c:	37 fd       	sbrc	r19, 7
    7b4e:	40 95       	com	r20
    7b50:	54 2f       	mov	r21, r20
    7b52:	2d 83       	std	Y+5, r18	; 0x05
    7b54:	3e 83       	std	Y+6, r19	; 0x06
    7b56:	4f 83       	std	Y+7, r20	; 0x07
    7b58:	58 87       	std	Y+8, r21	; 0x08
			s->y = (((u16) s->y / 8) + 1) * 8;
		}
	}
	
	// Right
	for (u8 y = 0; y < tile_height; y++)
    7b5a:	29 85       	ldd	r18, Y+9	; 0x09
    7b5c:	3a 85       	ldd	r19, Y+10	; 0x0a
    7b5e:	02 17       	cp	r16, r18
    7b60:	13 07       	cpc	r17, r19
    7b62:	09 f4       	brne	.+2      	; 0x7b66 <collision_detect_level+0x19e>
    7b64:	a8 c0       	rjmp	.+336    	; 0x7cb6 <collision_detect_level+0x2ee>
	{
		lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, s->y / 8 + y);
    7b66:	b8 01       	movw	r22, r16
    7b68:	88 27       	eor	r24, r24
    7b6a:	77 fd       	sbrc	r23, 7
    7b6c:	80 95       	com	r24
    7b6e:	98 2f       	mov	r25, r24
    7b70:	0e 94 45 42 	call	0x848a	; 0x848a <__floatsisf>
    7b74:	4b 01       	movw	r8, r22
    7b76:	5c 01       	movw	r10, r24
    7b78:	6d 81       	ldd	r22, Y+5	; 0x05
    7b7a:	7e 81       	ldd	r23, Y+6	; 0x06
    7b7c:	8f 81       	ldd	r24, Y+7	; 0x07
    7b7e:	98 85       	ldd	r25, Y+8	; 0x08
    7b80:	0e 94 45 42 	call	0x848a	; 0x848a <__floatsisf>
    7b84:	6b 01       	movw	r12, r22
    7b86:	7c 01       	movw	r14, r24
    7b88:	20 e0       	ldi	r18, 0x00	; 0
    7b8a:	30 e0       	ldi	r19, 0x00	; 0
    7b8c:	40 e0       	ldi	r20, 0x00	; 0
    7b8e:	5e e3       	ldi	r21, 0x3E	; 62
    7b90:	eb 85       	ldd	r30, Y+11	; 0x0b
    7b92:	fc 85       	ldd	r31, Y+12	; 0x0c
    7b94:	64 85       	ldd	r22, Z+12	; 0x0c
    7b96:	75 85       	ldd	r23, Z+13	; 0x0d
    7b98:	86 85       	ldd	r24, Z+14	; 0x0e
    7b9a:	97 85       	ldd	r25, Z+15	; 0x0f
    7b9c:	0e 94 f9 42 	call	0x85f2	; 0x85f2 <__mulsf3>
    7ba0:	a5 01       	movw	r20, r10
    7ba2:	94 01       	movw	r18, r8
    7ba4:	0e 94 af 41 	call	0x835e	; 0x835e <__addsf3>
    7ba8:	0e 94 17 42 	call	0x842e	; 0x842e <__fixunssfsi>
    7bac:	2b 01       	movw	r4, r22
    7bae:	3c 01       	movw	r6, r24
    7bb0:	eb 85       	ldd	r30, Y+11	; 0x0b
    7bb2:	fc 85       	ldd	r31, Y+12	; 0x0c
    7bb4:	20 85       	ldd	r18, Z+8	; 0x08
    7bb6:	31 85       	ldd	r19, Z+9	; 0x09
    7bb8:	42 85       	ldd	r20, Z+10	; 0x0a
    7bba:	53 85       	ldd	r21, Z+11	; 0x0b
    7bbc:	c7 01       	movw	r24, r14
    7bbe:	b6 01       	movw	r22, r12
    7bc0:	0e 94 af 41 	call	0x835e	; 0x835e <__addsf3>
    7bc4:	20 e0       	ldi	r18, 0x00	; 0
    7bc6:	30 e0       	ldi	r19, 0x00	; 0
    7bc8:	40 e8       	ldi	r20, 0x80	; 128
    7bca:	5f e3       	ldi	r21, 0x3F	; 63
    7bcc:	0e 94 ae 41 	call	0x835c	; 0x835c <__subsf3>
    7bd0:	20 e0       	ldi	r18, 0x00	; 0
    7bd2:	30 e0       	ldi	r19, 0x00	; 0
    7bd4:	40 e0       	ldi	r20, 0x00	; 0
    7bd6:	5e e3       	ldi	r21, 0x3E	; 62
    7bd8:	0e 94 f9 42 	call	0x85f2	; 0x85f2 <__mulsf3>
    7bdc:	0e 94 17 42 	call	0x842e	; 0x842e <__fixunssfsi>
    7be0:	a2 01       	movw	r20, r4
    7be2:	80 91 91 0d 	lds	r24, 0x0D91
    7be6:	0e 94 c6 39 	call	0x738c	; 0x738c <get_level_tile>
    7bea:	78 2e       	mov	r7, r24
		lt2 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, (s->y+7) / 8 + y);
    7bec:	20 e0       	ldi	r18, 0x00	; 0
    7bee:	30 e0       	ldi	r19, 0x00	; 0
    7bf0:	40 ee       	ldi	r20, 0xE0	; 224
    7bf2:	50 e4       	ldi	r21, 0x40	; 64
    7bf4:	eb 85       	ldd	r30, Y+11	; 0x0b
    7bf6:	fc 85       	ldd	r31, Y+12	; 0x0c
    7bf8:	64 85       	ldd	r22, Z+12	; 0x0c
    7bfa:	75 85       	ldd	r23, Z+13	; 0x0d
    7bfc:	86 85       	ldd	r24, Z+14	; 0x0e
    7bfe:	97 85       	ldd	r25, Z+15	; 0x0f
    7c00:	0e 94 af 41 	call	0x835e	; 0x835e <__addsf3>
    7c04:	20 e0       	ldi	r18, 0x00	; 0
    7c06:	30 e0       	ldi	r19, 0x00	; 0
    7c08:	40 e0       	ldi	r20, 0x00	; 0
    7c0a:	5e e3       	ldi	r21, 0x3E	; 62
    7c0c:	0e 94 f9 42 	call	0x85f2	; 0x85f2 <__mulsf3>
    7c10:	a5 01       	movw	r20, r10
    7c12:	94 01       	movw	r18, r8
    7c14:	0e 94 af 41 	call	0x835e	; 0x835e <__addsf3>
    7c18:	0e 94 17 42 	call	0x842e	; 0x842e <__fixunssfsi>
    7c1c:	4b 01       	movw	r8, r22
    7c1e:	5c 01       	movw	r10, r24
    7c20:	eb 85       	ldd	r30, Y+11	; 0x0b
    7c22:	fc 85       	ldd	r31, Y+12	; 0x0c
    7c24:	20 85       	ldd	r18, Z+8	; 0x08
    7c26:	31 85       	ldd	r19, Z+9	; 0x09
    7c28:	42 85       	ldd	r20, Z+10	; 0x0a
    7c2a:	53 85       	ldd	r21, Z+11	; 0x0b
    7c2c:	c7 01       	movw	r24, r14
    7c2e:	b6 01       	movw	r22, r12
    7c30:	0e 94 af 41 	call	0x835e	; 0x835e <__addsf3>
    7c34:	20 e0       	ldi	r18, 0x00	; 0
    7c36:	30 e0       	ldi	r19, 0x00	; 0
    7c38:	40 e8       	ldi	r20, 0x80	; 128
    7c3a:	5f e3       	ldi	r21, 0x3F	; 63
    7c3c:	0e 94 ae 41 	call	0x835c	; 0x835c <__subsf3>
    7c40:	20 e0       	ldi	r18, 0x00	; 0
    7c42:	30 e0       	ldi	r19, 0x00	; 0
    7c44:	40 e0       	ldi	r20, 0x00	; 0
    7c46:	5e e3       	ldi	r21, 0x3E	; 62
    7c48:	0e 94 f9 42 	call	0x85f2	; 0x85f2 <__mulsf3>
    7c4c:	0e 94 17 42 	call	0x842e	; 0x842e <__fixunssfsi>
    7c50:	a4 01       	movw	r20, r8
    7c52:	80 91 91 0d 	lds	r24, 0x0D91
    7c56:	0e 94 c6 39 	call	0x738c	; 0x738c <get_level_tile>
    7c5a:	f8 2e       	mov	r15, r24
		if (solid_tile(lt1) || solid_tile(lt2))
    7c5c:	87 2d       	mov	r24, r7
    7c5e:	0e 94 e0 3a 	call	0x75c0	; 0x75c0 <solid_tile>
    7c62:	81 11       	cpse	r24, r1
    7c64:	05 c0       	rjmp	.+10     	; 0x7c70 <collision_detect_level+0x2a8>
    7c66:	8f 2d       	mov	r24, r15
    7c68:	0e 94 e0 3a 	call	0x75c0	; 0x75c0 <solid_tile>
    7c6c:	88 23       	and	r24, r24
    7c6e:	01 f1       	breq	.+64     	; 0x7cb0 <collision_detect_level+0x2e8>
		{
			s->vx =  0;
    7c70:	eb 85       	ldd	r30, Y+11	; 0x0b
    7c72:	fc 85       	ldd	r31, Y+12	; 0x0c
    7c74:	10 82       	st	Z, r1
    7c76:	11 82       	std	Z+1, r1	; 0x01
    7c78:	12 82       	std	Z+2, r1	; 0x02
    7c7a:	13 82       	std	Z+3, r1	; 0x03
			s->x = ((u16) s->x / 8) * 8;
    7c7c:	60 85       	ldd	r22, Z+8	; 0x08
    7c7e:	71 85       	ldd	r23, Z+9	; 0x09
    7c80:	82 85       	ldd	r24, Z+10	; 0x0a
    7c82:	93 85       	ldd	r25, Z+11	; 0x0b
    7c84:	0e 94 17 42 	call	0x842e	; 0x842e <__fixunssfsi>
    7c88:	43 e0       	ldi	r20, 0x03	; 3
    7c8a:	76 95       	lsr	r23
    7c8c:	67 95       	ror	r22
    7c8e:	4a 95       	dec	r20
    7c90:	e1 f7       	brne	.-8      	; 0x7c8a <collision_detect_level+0x2c2>
    7c92:	53 e0       	ldi	r21, 0x03	; 3
    7c94:	66 0f       	add	r22, r22
    7c96:	77 1f       	adc	r23, r23
    7c98:	5a 95       	dec	r21
    7c9a:	e1 f7       	brne	.-8      	; 0x7c94 <collision_detect_level+0x2cc>
    7c9c:	80 e0       	ldi	r24, 0x00	; 0
    7c9e:	90 e0       	ldi	r25, 0x00	; 0
    7ca0:	0e 94 43 42 	call	0x8486	; 0x8486 <__floatunsisf>
    7ca4:	eb 85       	ldd	r30, Y+11	; 0x0b
    7ca6:	fc 85       	ldd	r31, Y+12	; 0x0c
    7ca8:	60 87       	std	Z+8, r22	; 0x08
    7caa:	71 87       	std	Z+9, r23	; 0x09
    7cac:	82 87       	std	Z+10, r24	; 0x0a
    7cae:	93 87       	std	Z+11, r25	; 0x0b
    7cb0:	0f 5f       	subi	r16, 0xFF	; 255
    7cb2:	1f 4f       	sbci	r17, 0xFF	; 255
    7cb4:	52 cf       	rjmp	.-348    	; 0x7b5a <collision_detect_level+0x192>
	}
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8 - 1) / 8);
    7cb6:	49 81       	ldd	r20, Y+1	; 0x01
    7cb8:	38 e0       	ldi	r19, 0x08	; 8
    7cba:	43 9f       	mul	r20, r19
    7cbc:	c0 01       	movw	r24, r0
    7cbe:	11 24       	eor	r1, r1
    7cc0:	00 e0       	ldi	r16, 0x00	; 0
    7cc2:	10 e0       	ldi	r17, 0x00	; 0
    7cc4:	9c 01       	movw	r18, r24
    7cc6:	44 27       	eor	r20, r20
    7cc8:	37 fd       	sbrc	r19, 7
    7cca:	40 95       	com	r20
    7ccc:	54 2f       	mov	r21, r20
    7cce:	29 83       	std	Y+1, r18	; 0x01
    7cd0:	3a 83       	std	Y+2, r19	; 0x02
    7cd2:	4b 83       	std	Y+3, r20	; 0x03
    7cd4:	5c 83       	std	Y+4, r21	; 0x04
			s->x = ((u16) s->x / 8) * 8;
		}
	}
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
    7cd6:	02 15       	cp	r16, r2
    7cd8:	13 05       	cpc	r17, r3
    7cda:	09 f4       	brne	.+2      	; 0x7cde <collision_detect_level+0x316>
    7cdc:	a9 c0       	rjmp	.+338    	; 0x7e30 <collision_detect_level+0x468>
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8 - 1) / 8);
    7cde:	69 81       	ldd	r22, Y+1	; 0x01
    7ce0:	7a 81       	ldd	r23, Y+2	; 0x02
    7ce2:	8b 81       	ldd	r24, Y+3	; 0x03
    7ce4:	9c 81       	ldd	r25, Y+4	; 0x04
    7ce6:	0e 94 45 42 	call	0x848a	; 0x848a <__floatsisf>
    7cea:	4b 01       	movw	r8, r22
    7cec:	5c 01       	movw	r10, r24
    7cee:	b8 01       	movw	r22, r16
    7cf0:	88 27       	eor	r24, r24
    7cf2:	77 fd       	sbrc	r23, 7
    7cf4:	80 95       	com	r24
    7cf6:	98 2f       	mov	r25, r24
    7cf8:	0e 94 45 42 	call	0x848a	; 0x848a <__floatsisf>
    7cfc:	6b 01       	movw	r12, r22
    7cfe:	7c 01       	movw	r14, r24
    7d00:	eb 85       	ldd	r30, Y+11	; 0x0b
    7d02:	fc 85       	ldd	r31, Y+12	; 0x0c
    7d04:	24 85       	ldd	r18, Z+12	; 0x0c
    7d06:	35 85       	ldd	r19, Z+13	; 0x0d
    7d08:	46 85       	ldd	r20, Z+14	; 0x0e
    7d0a:	57 85       	ldd	r21, Z+15	; 0x0f
    7d0c:	c5 01       	movw	r24, r10
    7d0e:	b4 01       	movw	r22, r8
    7d10:	0e 94 af 41 	call	0x835e	; 0x835e <__addsf3>
    7d14:	20 e0       	ldi	r18, 0x00	; 0
    7d16:	30 e0       	ldi	r19, 0x00	; 0
    7d18:	40 e8       	ldi	r20, 0x80	; 128
    7d1a:	5f e3       	ldi	r21, 0x3F	; 63
    7d1c:	0e 94 ae 41 	call	0x835c	; 0x835c <__subsf3>
    7d20:	20 e0       	ldi	r18, 0x00	; 0
    7d22:	30 e0       	ldi	r19, 0x00	; 0
    7d24:	40 e0       	ldi	r20, 0x00	; 0
    7d26:	5e e3       	ldi	r21, 0x3E	; 62
    7d28:	0e 94 f9 42 	call	0x85f2	; 0x85f2 <__mulsf3>
    7d2c:	0e 94 17 42 	call	0x842e	; 0x842e <__fixunssfsi>
    7d30:	2b 01       	movw	r4, r22
    7d32:	3c 01       	movw	r6, r24
    7d34:	20 e0       	ldi	r18, 0x00	; 0
    7d36:	30 e0       	ldi	r19, 0x00	; 0
    7d38:	40 e0       	ldi	r20, 0x00	; 0
    7d3a:	5e e3       	ldi	r21, 0x3E	; 62
    7d3c:	eb 85       	ldd	r30, Y+11	; 0x0b
    7d3e:	fc 85       	ldd	r31, Y+12	; 0x0c
    7d40:	60 85       	ldd	r22, Z+8	; 0x08
    7d42:	71 85       	ldd	r23, Z+9	; 0x09
    7d44:	82 85       	ldd	r24, Z+10	; 0x0a
    7d46:	93 85       	ldd	r25, Z+11	; 0x0b
    7d48:	0e 94 f9 42 	call	0x85f2	; 0x85f2 <__mulsf3>
    7d4c:	a7 01       	movw	r20, r14
    7d4e:	96 01       	movw	r18, r12
    7d50:	0e 94 af 41 	call	0x835e	; 0x835e <__addsf3>
    7d54:	0e 94 17 42 	call	0x842e	; 0x842e <__fixunssfsi>
    7d58:	a2 01       	movw	r20, r4
    7d5a:	80 91 91 0d 	lds	r24, 0x0D91
    7d5e:	0e 94 c6 39 	call	0x738c	; 0x738c <get_level_tile>
    7d62:	78 2e       	mov	r7, r24
		lt2 = get_level_tile(game.current_level, (s->x+7) / 8 + x, (s->y + tile_height*8 - 1) / 8);
    7d64:	eb 85       	ldd	r30, Y+11	; 0x0b
    7d66:	fc 85       	ldd	r31, Y+12	; 0x0c
    7d68:	24 85       	ldd	r18, Z+12	; 0x0c
    7d6a:	35 85       	ldd	r19, Z+13	; 0x0d
    7d6c:	46 85       	ldd	r20, Z+14	; 0x0e
    7d6e:	57 85       	ldd	r21, Z+15	; 0x0f
    7d70:	c5 01       	movw	r24, r10
    7d72:	b4 01       	movw	r22, r8
    7d74:	0e 94 af 41 	call	0x835e	; 0x835e <__addsf3>
    7d78:	20 e0       	ldi	r18, 0x00	; 0
    7d7a:	30 e0       	ldi	r19, 0x00	; 0
    7d7c:	40 e8       	ldi	r20, 0x80	; 128
    7d7e:	5f e3       	ldi	r21, 0x3F	; 63
    7d80:	0e 94 ae 41 	call	0x835c	; 0x835c <__subsf3>
    7d84:	20 e0       	ldi	r18, 0x00	; 0
    7d86:	30 e0       	ldi	r19, 0x00	; 0
    7d88:	40 e0       	ldi	r20, 0x00	; 0
    7d8a:	5e e3       	ldi	r21, 0x3E	; 62
    7d8c:	0e 94 f9 42 	call	0x85f2	; 0x85f2 <__mulsf3>
    7d90:	0e 94 17 42 	call	0x842e	; 0x842e <__fixunssfsi>
    7d94:	4b 01       	movw	r8, r22
    7d96:	5c 01       	movw	r10, r24
    7d98:	20 e0       	ldi	r18, 0x00	; 0
    7d9a:	30 e0       	ldi	r19, 0x00	; 0
    7d9c:	40 ee       	ldi	r20, 0xE0	; 224
    7d9e:	50 e4       	ldi	r21, 0x40	; 64
    7da0:	eb 85       	ldd	r30, Y+11	; 0x0b
    7da2:	fc 85       	ldd	r31, Y+12	; 0x0c
    7da4:	60 85       	ldd	r22, Z+8	; 0x08
    7da6:	71 85       	ldd	r23, Z+9	; 0x09
    7da8:	82 85       	ldd	r24, Z+10	; 0x0a
    7daa:	93 85       	ldd	r25, Z+11	; 0x0b
    7dac:	0e 94 af 41 	call	0x835e	; 0x835e <__addsf3>
    7db0:	20 e0       	ldi	r18, 0x00	; 0
    7db2:	30 e0       	ldi	r19, 0x00	; 0
    7db4:	40 e0       	ldi	r20, 0x00	; 0
    7db6:	5e e3       	ldi	r21, 0x3E	; 62
    7db8:	0e 94 f9 42 	call	0x85f2	; 0x85f2 <__mulsf3>
    7dbc:	a7 01       	movw	r20, r14
    7dbe:	96 01       	movw	r18, r12
    7dc0:	0e 94 af 41 	call	0x835e	; 0x835e <__addsf3>
    7dc4:	0e 94 17 42 	call	0x842e	; 0x842e <__fixunssfsi>
    7dc8:	a4 01       	movw	r20, r8
    7dca:	80 91 91 0d 	lds	r24, 0x0D91
    7dce:	0e 94 c6 39 	call	0x738c	; 0x738c <get_level_tile>
    7dd2:	f8 2e       	mov	r15, r24
		if (solid_tile(lt1) || solid_tile(lt2))
    7dd4:	87 2d       	mov	r24, r7
    7dd6:	0e 94 e0 3a 	call	0x75c0	; 0x75c0 <solid_tile>
    7dda:	81 11       	cpse	r24, r1
    7ddc:	05 c0       	rjmp	.+10     	; 0x7de8 <collision_detect_level+0x420>
    7dde:	8f 2d       	mov	r24, r15
    7de0:	0e 94 e0 3a 	call	0x75c0	; 0x75c0 <solid_tile>
    7de4:	88 23       	and	r24, r24
    7de6:	09 f1       	breq	.+66     	; 0x7e2a <collision_detect_level+0x462>
		{
			s->vy =  0;
    7de8:	eb 85       	ldd	r30, Y+11	; 0x0b
    7dea:	fc 85       	ldd	r31, Y+12	; 0x0c
    7dec:	14 82       	std	Z+4, r1	; 0x04
    7dee:	15 82       	std	Z+5, r1	; 0x05
    7df0:	16 82       	std	Z+6, r1	; 0x06
    7df2:	17 82       	std	Z+7, r1	; 0x07
			s->gravity = 0;
    7df4:	10 8a       	std	Z+16, r1	; 0x10
			s->y = ((u16) s->y / 8) * 8;
    7df6:	64 85       	ldd	r22, Z+12	; 0x0c
    7df8:	75 85       	ldd	r23, Z+13	; 0x0d
    7dfa:	86 85       	ldd	r24, Z+14	; 0x0e
    7dfc:	97 85       	ldd	r25, Z+15	; 0x0f
    7dfe:	0e 94 17 42 	call	0x842e	; 0x842e <__fixunssfsi>
    7e02:	23 e0       	ldi	r18, 0x03	; 3
    7e04:	76 95       	lsr	r23
    7e06:	67 95       	ror	r22
    7e08:	2a 95       	dec	r18
    7e0a:	e1 f7       	brne	.-8      	; 0x7e04 <collision_detect_level+0x43c>
    7e0c:	33 e0       	ldi	r19, 0x03	; 3
    7e0e:	66 0f       	add	r22, r22
    7e10:	77 1f       	adc	r23, r23
    7e12:	3a 95       	dec	r19
    7e14:	e1 f7       	brne	.-8      	; 0x7e0e <collision_detect_level+0x446>
    7e16:	80 e0       	ldi	r24, 0x00	; 0
    7e18:	90 e0       	ldi	r25, 0x00	; 0
    7e1a:	0e 94 43 42 	call	0x8486	; 0x8486 <__floatunsisf>
    7e1e:	eb 85       	ldd	r30, Y+11	; 0x0b
    7e20:	fc 85       	ldd	r31, Y+12	; 0x0c
    7e22:	64 87       	std	Z+12, r22	; 0x0c
    7e24:	75 87       	std	Z+13, r23	; 0x0d
    7e26:	86 87       	std	Z+14, r24	; 0x0e
    7e28:	97 87       	std	Z+15, r25	; 0x0f
    7e2a:	0f 5f       	subi	r16, 0xFF	; 255
    7e2c:	1f 4f       	sbci	r17, 0xFF	; 255
    7e2e:	53 cf       	rjmp	.-346    	; 0x7cd6 <collision_detect_level+0x30e>
    7e30:	00 e0       	ldi	r16, 0x00	; 0
    7e32:	10 e0       	ldi	r17, 0x00	; 0
		}
	}
	
	// Left
	for (u8 y = 0; y < tile_height; y++)
    7e34:	29 85       	ldd	r18, Y+9	; 0x09
    7e36:	3a 85       	ldd	r19, Y+10	; 0x0a
    7e38:	02 17       	cp	r16, r18
    7e3a:	13 07       	cpc	r17, r19
    7e3c:	09 f4       	brne	.+2      	; 0x7e40 <collision_detect_level+0x478>
    7e3e:	8e c0       	rjmp	.+284    	; 0x7f5c <collision_detect_level+0x594>
	{
		lt1 = get_level_tile(game.current_level, s->x / 8, s->y / 8 + y);
    7e40:	b8 01       	movw	r22, r16
    7e42:	88 27       	eor	r24, r24
    7e44:	77 fd       	sbrc	r23, 7
    7e46:	80 95       	com	r24
    7e48:	98 2f       	mov	r25, r24
    7e4a:	0e 94 45 42 	call	0x848a	; 0x848a <__floatsisf>
    7e4e:	6b 01       	movw	r12, r22
    7e50:	7c 01       	movw	r14, r24
    7e52:	20 e0       	ldi	r18, 0x00	; 0
    7e54:	30 e0       	ldi	r19, 0x00	; 0
    7e56:	40 e0       	ldi	r20, 0x00	; 0
    7e58:	5e e3       	ldi	r21, 0x3E	; 62
    7e5a:	eb 85       	ldd	r30, Y+11	; 0x0b
    7e5c:	fc 85       	ldd	r31, Y+12	; 0x0c
    7e5e:	64 85       	ldd	r22, Z+12	; 0x0c
    7e60:	75 85       	ldd	r23, Z+13	; 0x0d
    7e62:	86 85       	ldd	r24, Z+14	; 0x0e
    7e64:	97 85       	ldd	r25, Z+15	; 0x0f
    7e66:	0e 94 f9 42 	call	0x85f2	; 0x85f2 <__mulsf3>
    7e6a:	a7 01       	movw	r20, r14
    7e6c:	96 01       	movw	r18, r12
    7e6e:	0e 94 af 41 	call	0x835e	; 0x835e <__addsf3>
    7e72:	0e 94 17 42 	call	0x842e	; 0x842e <__fixunssfsi>
    7e76:	4b 01       	movw	r8, r22
    7e78:	5c 01       	movw	r10, r24
    7e7a:	20 e0       	ldi	r18, 0x00	; 0
    7e7c:	30 e0       	ldi	r19, 0x00	; 0
    7e7e:	40 e0       	ldi	r20, 0x00	; 0
    7e80:	5e e3       	ldi	r21, 0x3E	; 62
    7e82:	eb 85       	ldd	r30, Y+11	; 0x0b
    7e84:	fc 85       	ldd	r31, Y+12	; 0x0c
    7e86:	60 85       	ldd	r22, Z+8	; 0x08
    7e88:	71 85       	ldd	r23, Z+9	; 0x09
    7e8a:	82 85       	ldd	r24, Z+10	; 0x0a
    7e8c:	93 85       	ldd	r25, Z+11	; 0x0b
    7e8e:	0e 94 f9 42 	call	0x85f2	; 0x85f2 <__mulsf3>
    7e92:	0e 94 17 42 	call	0x842e	; 0x842e <__fixunssfsi>
    7e96:	a4 01       	movw	r20, r8
    7e98:	80 91 91 0d 	lds	r24, 0x0D91
    7e9c:	0e 94 c6 39 	call	0x738c	; 0x738c <get_level_tile>
    7ea0:	b8 2e       	mov	r11, r24
		lt2 = get_level_tile(game.current_level, s->x / 8, (s->y+7) / 8 + y);
    7ea2:	20 e0       	ldi	r18, 0x00	; 0
    7ea4:	30 e0       	ldi	r19, 0x00	; 0
    7ea6:	40 ee       	ldi	r20, 0xE0	; 224
    7ea8:	50 e4       	ldi	r21, 0x40	; 64
    7eaa:	eb 85       	ldd	r30, Y+11	; 0x0b
    7eac:	fc 85       	ldd	r31, Y+12	; 0x0c
    7eae:	64 85       	ldd	r22, Z+12	; 0x0c
    7eb0:	75 85       	ldd	r23, Z+13	; 0x0d
    7eb2:	86 85       	ldd	r24, Z+14	; 0x0e
    7eb4:	97 85       	ldd	r25, Z+15	; 0x0f
    7eb6:	0e 94 af 41 	call	0x835e	; 0x835e <__addsf3>
    7eba:	20 e0       	ldi	r18, 0x00	; 0
    7ebc:	30 e0       	ldi	r19, 0x00	; 0
    7ebe:	40 e0       	ldi	r20, 0x00	; 0
    7ec0:	5e e3       	ldi	r21, 0x3E	; 62
    7ec2:	0e 94 f9 42 	call	0x85f2	; 0x85f2 <__mulsf3>
    7ec6:	a7 01       	movw	r20, r14
    7ec8:	96 01       	movw	r18, r12
    7eca:	0e 94 af 41 	call	0x835e	; 0x835e <__addsf3>
    7ece:	0e 94 17 42 	call	0x842e	; 0x842e <__fixunssfsi>
    7ed2:	6b 01       	movw	r12, r22
    7ed4:	7c 01       	movw	r14, r24
    7ed6:	20 e0       	ldi	r18, 0x00	; 0
    7ed8:	30 e0       	ldi	r19, 0x00	; 0
    7eda:	40 e0       	ldi	r20, 0x00	; 0
    7edc:	5e e3       	ldi	r21, 0x3E	; 62
    7ede:	eb 85       	ldd	r30, Y+11	; 0x0b
    7ee0:	fc 85       	ldd	r31, Y+12	; 0x0c
    7ee2:	60 85       	ldd	r22, Z+8	; 0x08
    7ee4:	71 85       	ldd	r23, Z+9	; 0x09
    7ee6:	82 85       	ldd	r24, Z+10	; 0x0a
    7ee8:	93 85       	ldd	r25, Z+11	; 0x0b
    7eea:	0e 94 f9 42 	call	0x85f2	; 0x85f2 <__mulsf3>
    7eee:	0e 94 17 42 	call	0x842e	; 0x842e <__fixunssfsi>
    7ef2:	a6 01       	movw	r20, r12
    7ef4:	80 91 91 0d 	lds	r24, 0x0D91
    7ef8:	0e 94 c6 39 	call	0x738c	; 0x738c <get_level_tile>
    7efc:	f8 2e       	mov	r15, r24
		if (solid_tile(lt1) || solid_tile(lt2))
    7efe:	8b 2d       	mov	r24, r11
    7f00:	0e 94 e0 3a 	call	0x75c0	; 0x75c0 <solid_tile>
    7f04:	81 11       	cpse	r24, r1
    7f06:	05 c0       	rjmp	.+10     	; 0x7f12 <collision_detect_level+0x54a>
    7f08:	8f 2d       	mov	r24, r15
    7f0a:	0e 94 e0 3a 	call	0x75c0	; 0x75c0 <solid_tile>
    7f0e:	88 23       	and	r24, r24
    7f10:	11 f1       	breq	.+68     	; 0x7f56 <collision_detect_level+0x58e>
		{
			s->vx =  0;
    7f12:	eb 85       	ldd	r30, Y+11	; 0x0b
    7f14:	fc 85       	ldd	r31, Y+12	; 0x0c
    7f16:	10 82       	st	Z, r1
    7f18:	11 82       	std	Z+1, r1	; 0x01
    7f1a:	12 82       	std	Z+2, r1	; 0x02
    7f1c:	13 82       	std	Z+3, r1	; 0x03
			s->x = (((u16) s->x / 8) + 1) * 8;
    7f1e:	60 85       	ldd	r22, Z+8	; 0x08
    7f20:	71 85       	ldd	r23, Z+9	; 0x09
    7f22:	82 85       	ldd	r24, Z+10	; 0x0a
    7f24:	93 85       	ldd	r25, Z+11	; 0x0b
    7f26:	0e 94 17 42 	call	0x842e	; 0x842e <__fixunssfsi>
    7f2a:	83 e0       	ldi	r24, 0x03	; 3
    7f2c:	76 95       	lsr	r23
    7f2e:	67 95       	ror	r22
    7f30:	8a 95       	dec	r24
    7f32:	e1 f7       	brne	.-8      	; 0x7f2c <collision_detect_level+0x564>
    7f34:	6f 5f       	subi	r22, 0xFF	; 255
    7f36:	7f 4f       	sbci	r23, 0xFF	; 255
    7f38:	93 e0       	ldi	r25, 0x03	; 3
    7f3a:	66 0f       	add	r22, r22
    7f3c:	77 1f       	adc	r23, r23
    7f3e:	9a 95       	dec	r25
    7f40:	e1 f7       	brne	.-8      	; 0x7f3a <collision_detect_level+0x572>
    7f42:	80 e0       	ldi	r24, 0x00	; 0
    7f44:	90 e0       	ldi	r25, 0x00	; 0
    7f46:	0e 94 43 42 	call	0x8486	; 0x8486 <__floatunsisf>
    7f4a:	eb 85       	ldd	r30, Y+11	; 0x0b
    7f4c:	fc 85       	ldd	r31, Y+12	; 0x0c
    7f4e:	60 87       	std	Z+8, r22	; 0x08
    7f50:	71 87       	std	Z+9, r23	; 0x09
    7f52:	82 87       	std	Z+10, r24	; 0x0a
    7f54:	93 87       	std	Z+11, r25	; 0x0b
    7f56:	0f 5f       	subi	r16, 0xFF	; 255
    7f58:	1f 4f       	sbci	r17, 0xFF	; 255
    7f5a:	6c cf       	rjmp	.-296    	; 0x7e34 <collision_detect_level+0x46c>
		}
	}
}
    7f5c:	2c 96       	adiw	r28, 0x0c	; 12
    7f5e:	0f b6       	in	r0, 0x3f	; 63
    7f60:	f8 94       	cli
    7f62:	de bf       	out	0x3e, r29	; 62
    7f64:	0f be       	out	0x3f, r0	; 63
    7f66:	cd bf       	out	0x3d, r28	; 61
    7f68:	df 91       	pop	r29
    7f6a:	cf 91       	pop	r28
    7f6c:	1f 91       	pop	r17
    7f6e:	0f 91       	pop	r16
    7f70:	ff 90       	pop	r15
    7f72:	ef 90       	pop	r14
    7f74:	df 90       	pop	r13
    7f76:	cf 90       	pop	r12
    7f78:	bf 90       	pop	r11
    7f7a:	af 90       	pop	r10
    7f7c:	9f 90       	pop	r9
    7f7e:	8f 90       	pop	r8
    7f80:	7f 90       	pop	r7
    7f82:	6f 90       	pop	r6
    7f84:	5f 90       	pop	r5
    7f86:	4f 90       	pop	r4
    7f88:	3f 90       	pop	r3
    7f8a:	2f 90       	pop	r2
    7f8c:	08 95       	ret

00007f8e <update_player_position>:

void update_player_position()
{
    7f8e:	cf 92       	push	r12
    7f90:	df 92       	push	r13
    7f92:	ef 92       	push	r14
    7f94:	ff 92       	push	r15
    7f96:	0f 93       	push	r16
    7f98:	cf 93       	push	r28
    7f9a:	df 93       	push	r29
	//Gravity
	game.player.shared.vy = game.player.shared.vy + game.player.shared.gravity*FRAME_TIME;
    7f9c:	c0 e9       	ldi	r28, 0x90	; 144
    7f9e:	dd e0       	ldi	r29, 0x0D	; 13
    7fa0:	6c 8d       	ldd	r22, Y+28	; 0x1c
    7fa2:	70 e0       	ldi	r23, 0x00	; 0
    7fa4:	80 e0       	ldi	r24, 0x00	; 0
    7fa6:	90 e0       	ldi	r25, 0x00	; 0
    7fa8:	0e 94 45 42 	call	0x848a	; 0x848a <__floatsisf>
    7fac:	29 e8       	ldi	r18, 0x89	; 137
    7fae:	38 e8       	ldi	r19, 0x88	; 136
    7fb0:	48 e8       	ldi	r20, 0x88	; 136
    7fb2:	5c e3       	ldi	r21, 0x3C	; 60
    7fb4:	0e 94 f9 42 	call	0x85f2	; 0x85f2 <__mulsf3>
    7fb8:	28 89       	ldd	r18, Y+16	; 0x10
    7fba:	39 89       	ldd	r19, Y+17	; 0x11
    7fbc:	4a 89       	ldd	r20, Y+18	; 0x12
    7fbe:	5b 89       	ldd	r21, Y+19	; 0x13
    7fc0:	0e 94 af 41 	call	0x835e	; 0x835e <__addsf3>
    7fc4:	6b 01       	movw	r12, r22
    7fc6:	7c 01       	movw	r14, r24
    7fc8:	68 8b       	std	Y+16, r22	; 0x10
    7fca:	79 8b       	std	Y+17, r23	; 0x11
    7fcc:	8a 8b       	std	Y+18, r24	; 0x12
    7fce:	9b 8b       	std	Y+19, r25	; 0x13
	game.player.shared.x += game.player.shared.vx*FRAME_TIME;
    7fd0:	29 e8       	ldi	r18, 0x89	; 137
    7fd2:	38 e8       	ldi	r19, 0x88	; 136
    7fd4:	48 e8       	ldi	r20, 0x88	; 136
    7fd6:	5c e3       	ldi	r21, 0x3C	; 60
    7fd8:	6c 85       	ldd	r22, Y+12	; 0x0c
    7fda:	7d 85       	ldd	r23, Y+13	; 0x0d
    7fdc:	8e 85       	ldd	r24, Y+14	; 0x0e
    7fde:	9f 85       	ldd	r25, Y+15	; 0x0f
    7fe0:	0e 94 f9 42 	call	0x85f2	; 0x85f2 <__mulsf3>
    7fe4:	9b 01       	movw	r18, r22
    7fe6:	ac 01       	movw	r20, r24
    7fe8:	6c 89       	ldd	r22, Y+20	; 0x14
    7fea:	7d 89       	ldd	r23, Y+21	; 0x15
    7fec:	8e 89       	ldd	r24, Y+22	; 0x16
    7fee:	9f 89       	ldd	r25, Y+23	; 0x17
    7ff0:	0e 94 af 41 	call	0x835e	; 0x835e <__addsf3>
    7ff4:	6c 8b       	std	Y+20, r22	; 0x14
    7ff6:	7d 8b       	std	Y+21, r23	; 0x15
    7ff8:	8e 8b       	std	Y+22, r24	; 0x16
    7ffa:	9f 8b       	std	Y+23, r25	; 0x17
	game.player.shared.y += game.player.shared.vy*FRAME_TIME;
    7ffc:	29 e8       	ldi	r18, 0x89	; 137
    7ffe:	38 e8       	ldi	r19, 0x88	; 136
    8000:	48 e8       	ldi	r20, 0x88	; 136
    8002:	5c e3       	ldi	r21, 0x3C	; 60
    8004:	c7 01       	movw	r24, r14
    8006:	b6 01       	movw	r22, r12
    8008:	0e 94 f9 42 	call	0x85f2	; 0x85f2 <__mulsf3>
    800c:	9b 01       	movw	r18, r22
    800e:	ac 01       	movw	r20, r24
    8010:	68 8d       	ldd	r22, Y+24	; 0x18
    8012:	79 8d       	ldd	r23, Y+25	; 0x19
    8014:	8a 8d       	ldd	r24, Y+26	; 0x1a
    8016:	9b 8d       	ldd	r25, Y+27	; 0x1b
    8018:	0e 94 af 41 	call	0x835e	; 0x835e <__addsf3>
    801c:	68 8f       	std	Y+24, r22	; 0x18
    801e:	79 8f       	std	Y+25, r23	; 0x19
    8020:	8a 8f       	std	Y+26, r24	; 0x1a
    8022:	9b 8f       	std	Y+27, r25	; 0x1b
	collision_detect_level(&game.player.shared, 2, 3);
    8024:	43 e0       	ldi	r20, 0x03	; 3
    8026:	62 e0       	ldi	r22, 0x02	; 2
    8028:	8c e9       	ldi	r24, 0x9C	; 156
    802a:	9d e0       	ldi	r25, 0x0D	; 13
    802c:	0e 94 e4 3c 	call	0x79c8	; 0x79c8 <collision_detect_level>
	LBMoveSprite(0, game.player.shared.x - game.camera_x, game.player.shared.y - game.camera_y, 2, 3);
    8030:	6a 85       	ldd	r22, Y+10	; 0x0a
    8032:	7b 85       	ldd	r23, Y+11	; 0x0b
    8034:	80 e0       	ldi	r24, 0x00	; 0
    8036:	90 e0       	ldi	r25, 0x00	; 0
    8038:	0e 94 43 42 	call	0x8486	; 0x8486 <__floatunsisf>
    803c:	9b 01       	movw	r18, r22
    803e:	ac 01       	movw	r20, r24
    8040:	68 8d       	ldd	r22, Y+24	; 0x18
    8042:	79 8d       	ldd	r23, Y+25	; 0x19
    8044:	8a 8d       	ldd	r24, Y+26	; 0x1a
    8046:	9b 8d       	ldd	r25, Y+27	; 0x1b
    8048:	0e 94 ae 41 	call	0x835c	; 0x835c <__subsf3>
    804c:	0e 94 17 42 	call	0x842e	; 0x842e <__fixunssfsi>
    8050:	f6 2e       	mov	r15, r22
    8052:	68 85       	ldd	r22, Y+8	; 0x08
    8054:	79 85       	ldd	r23, Y+9	; 0x09
    8056:	80 e0       	ldi	r24, 0x00	; 0
    8058:	90 e0       	ldi	r25, 0x00	; 0
    805a:	0e 94 43 42 	call	0x8486	; 0x8486 <__floatunsisf>
    805e:	9b 01       	movw	r18, r22
    8060:	ac 01       	movw	r20, r24
    8062:	6c 89       	ldd	r22, Y+20	; 0x14
    8064:	7d 89       	ldd	r23, Y+21	; 0x15
    8066:	8e 89       	ldd	r24, Y+22	; 0x16
    8068:	9f 89       	ldd	r25, Y+23	; 0x17
    806a:	0e 94 ae 41 	call	0x835c	; 0x835c <__subsf3>
    806e:	0e 94 17 42 	call	0x842e	; 0x842e <__fixunssfsi>
    8072:	03 e0       	ldi	r16, 0x03	; 3
    8074:	22 e0       	ldi	r18, 0x02	; 2
    8076:	4f 2d       	mov	r20, r15
    8078:	80 e0       	ldi	r24, 0x00	; 0
    807a:	0e 94 33 38 	call	0x7066	; 0x7066 <LBMoveSprite>
}
    807e:	df 91       	pop	r29
    8080:	cf 91       	pop	r28
    8082:	0f 91       	pop	r16
    8084:	ff 90       	pop	r15
    8086:	ef 90       	pop	r14
    8088:	df 90       	pop	r13
    808a:	cf 90       	pop	r12
    808c:	08 95       	ret

0000808e <update_level>:

void update_level()
{
    808e:	cf 93       	push	r28
    8090:	df 93       	push	r29
	if (game.player.shared.vx > 0 &&
    8092:	20 e0       	ldi	r18, 0x00	; 0
    8094:	30 e0       	ldi	r19, 0x00	; 0
    8096:	a9 01       	movw	r20, r18
    8098:	60 91 9c 0d 	lds	r22, 0x0D9C
    809c:	70 91 9d 0d 	lds	r23, 0x0D9D
    80a0:	80 91 9e 0d 	lds	r24, 0x0D9E
    80a4:	90 91 9f 0d 	lds	r25, 0x0D9F
    80a8:	0e 94 f5 42 	call	0x85ea	; 0x85ea <__gesf2>
    80ac:	18 16       	cp	r1, r24
    80ae:	a4 f5       	brge	.+104    	; 0x8118 <update_level+0x8a>
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
    80b0:	c0 91 98 0d 	lds	r28, 0x0D98
    80b4:	d0 91 99 0d 	lds	r29, 0x0D99
    80b8:	be 01       	movw	r22, r28
    80ba:	80 e0       	ldi	r24, 0x00	; 0
    80bc:	90 e0       	ldi	r25, 0x00	; 0
    80be:	0e 94 43 42 	call	0x8486	; 0x8486 <__floatunsisf>
    80c2:	9b 01       	movw	r18, r22
    80c4:	ac 01       	movw	r20, r24
    80c6:	60 91 a4 0d 	lds	r22, 0x0DA4
    80ca:	70 91 a5 0d 	lds	r23, 0x0DA5
    80ce:	80 91 a6 0d 	lds	r24, 0x0DA6
    80d2:	90 91 a7 0d 	lds	r25, 0x0DA7
    80d6:	0e 94 ae 41 	call	0x835c	; 0x835c <__subsf3>
	LBMoveSprite(0, game.player.shared.x - game.camera_x, game.player.shared.y - game.camera_y, 2, 3);
}

void update_level()
{
	if (game.player.shared.vx > 0 &&
    80da:	20 e0       	ldi	r18, 0x00	; 0
    80dc:	30 e0       	ldi	r19, 0x00	; 0
    80de:	40 ee       	ldi	r20, 0xE0	; 224
    80e0:	52 e4       	ldi	r21, 0x42	; 66
    80e2:	0e 94 f5 42 	call	0x85ea	; 0x85ea <__gesf2>
    80e6:	87 fd       	sbrc	r24, 7
    80e8:	17 c0       	rjmp	.+46     	; 0x8118 <update_level+0x8a>
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
		(game.camera_x/8 + CAMERA_WIDTH < LEVEL_WIDTH) &&
    80ea:	33 e0       	ldi	r19, 0x03	; 3
    80ec:	d6 95       	lsr	r29
    80ee:	c7 95       	ror	r28
    80f0:	3a 95       	dec	r19
    80f2:	e1 f7       	brne	.-8      	; 0x80ec <update_level+0x5e>
    80f4:	6c 96       	adiw	r28, 0x1c	; 28
}

void update_level()
{
	if (game.player.shared.vx > 0 &&
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
    80f6:	ec 97       	sbiw	r28, 0x3c	; 60
    80f8:	78 f4       	brcc	.+30     	; 0x8118 <update_level+0x8a>
		(game.camera_x/8 + CAMERA_WIDTH < LEVEL_WIDTH) &&
		(game.camera_y/8 + CAMERA_HEIGHT < LEVEL_HEIGHT))
    80fa:	80 91 9a 0d 	lds	r24, 0x0D9A
    80fe:	90 91 9b 0d 	lds	r25, 0x0D9B
    8102:	23 e0       	ldi	r18, 0x03	; 3
    8104:	96 95       	lsr	r25
    8106:	87 95       	ror	r24
    8108:	2a 95       	dec	r18
    810a:	e1 f7       	brne	.-8      	; 0x8104 <update_level+0x76>

void update_level()
{
	if (game.player.shared.vx > 0 &&
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
		(game.camera_x/8 + CAMERA_WIDTH < LEVEL_WIDTH) &&
    810c:	89 2b       	or	r24, r25
    810e:	21 f4       	brne	.+8      	; 0x8118 <update_level+0x8a>
		(game.camera_y/8 + CAMERA_HEIGHT < LEVEL_HEIGHT))
	{
		move_camera_x();
	}
}
    8110:	df 91       	pop	r29
    8112:	cf 91       	pop	r28
	if (game.player.shared.vx > 0 &&
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
		(game.camera_x/8 + CAMERA_WIDTH < LEVEL_WIDTH) &&
		(game.camera_y/8 + CAMERA_HEIGHT < LEVEL_HEIGHT))
	{
		move_camera_x();
    8114:	0c 94 5b 3a 	jmp	0x74b6	; 0x74b6 <move_camera_x>
	}
}
    8118:	df 91       	pop	r29
    811a:	cf 91       	pop	r28
    811c:	08 95       	ret

0000811e <clear_sprites>:

void clear_sprites()
{
    811e:	0f 93       	push	r16
    8120:	cf 93       	push	r28
	for(char i = 0; i < MAX_EXTENDED_SPRITES; i++)
    8122:	c0 e0       	ldi	r28, 0x00	; 0
	{
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
    8124:	01 e0       	ldi	r16, 0x01	; 1
    8126:	21 e0       	ldi	r18, 0x01	; 1
    8128:	40 e0       	ldi	r20, 0x00	; 0
    812a:	60 ee       	ldi	r22, 0xE0	; 224
    812c:	8c 2f       	mov	r24, r28
    812e:	0e 94 33 38 	call	0x7066	; 0x7066 <LBMoveSprite>
    8132:	cf 5f       	subi	r28, 0xFF	; 255
	}
}

void clear_sprites()
{
	for(char i = 0; i < MAX_EXTENDED_SPRITES; i++)
    8134:	cc 31       	cpi	r28, 0x1C	; 28
    8136:	b1 f7       	brne	.-20     	; 0x8124 <clear_sprites+0x6>
	{
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
	}
	LBRotateSprites(MAX_SPRITES);
    8138:	8e e0       	ldi	r24, 0x0E	; 14
}
    813a:	cf 91       	pop	r28
    813c:	0f 91       	pop	r16
{
	for(char i = 0; i < MAX_EXTENDED_SPRITES; i++)
	{
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
	}
	LBRotateSprites(MAX_SPRITES);
    813e:	0c 94 71 38 	jmp	0x70e2	; 0x70e2 <LBRotateSprites>

00008142 <level_transition>:
	render_camera_view();
	LBMapSprite(0, LBGetNextFrame(&game.player.idle), 0);
}

void level_transition(u8 index)
{
    8142:	cf 93       	push	r28
    8144:	c8 2f       	mov	r28, r24
	FadeOut(FRAMES_PER_FADE, true);
    8146:	61 e0       	ldi	r22, 0x01	; 1
    8148:	83 e0       	ldi	r24, 0x03	; 3
    814a:	0e 94 2c 37 	call	0x6e58	; 0x6e58 <FadeOut>
	ClearVram();
    814e:	0e 94 4d 29 	call	0x529a	; 0x529a <ClearVram>
	clear_sprites();
    8152:	0e 94 8f 40 	call	0x811e	; 0x811e <clear_sprites>
	Print(8, 12, (char*) strLevels+index*16);
    8156:	80 e1       	ldi	r24, 0x10	; 16
    8158:	c8 9f       	mul	r28, r24
    815a:	a0 01       	movw	r20, r0
    815c:	11 24       	eor	r1, r1
    815e:	45 5a       	subi	r20, 0xA5	; 165
    8160:	56 4f       	sbci	r21, 0xF6	; 246
    8162:	6c e0       	ldi	r22, 0x0C	; 12
    8164:	70 e0       	ldi	r23, 0x00	; 0
    8166:	88 e0       	ldi	r24, 0x08	; 8
    8168:	90 e0       	ldi	r25, 0x00	; 0
    816a:	0e 94 a9 36 	call	0x6d52	; 0x6d52 <Print>
	FadeIn(1, true);
    816e:	61 e0       	ldi	r22, 0x01	; 1
    8170:	81 e0       	ldi	r24, 0x01	; 1
    8172:	0e 94 20 37 	call	0x6e40	; 0x6e40 <FadeIn>
	LBWaitSeconds(TEXT_LINGER);
    8176:	83 e0       	ldi	r24, 0x03	; 3
    8178:	0e 94 d2 37 	call	0x6fa4	; 0x6fa4 <LBWaitSeconds>
	FadeOut(1, true);
    817c:	61 e0       	ldi	r22, 0x01	; 1
    817e:	81 e0       	ldi	r24, 0x01	; 1
    8180:	0e 94 2c 37 	call	0x6e58	; 0x6e58 <FadeOut>
	ClearVram();
    8184:	0e 94 4d 29 	call	0x529a	; 0x529a <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    8188:	60 e0       	ldi	r22, 0x00	; 0
    818a:	83 e0       	ldi	r24, 0x03	; 3
    818c:	0e 94 20 37 	call	0x6e40	; 0x6e40 <FadeIn>
	load_level(index);
    8190:	8c 2f       	mov	r24, r28
}
    8192:	cf 91       	pop	r28
	FadeIn(1, true);
	LBWaitSeconds(TEXT_LINGER);
	FadeOut(1, true);
	ClearVram();
	FadeIn(FRAMES_PER_FADE, false);
	load_level(index);
    8194:	0c 94 74 3a 	jmp	0x74e8	; 0x74e8 <load_level>

00008198 <load_splash>:
	init_game_state();
	load_splash();
}

void load_splash()
{
    8198:	0f 93       	push	r16
	game.current_screen = SPLASH;
    819a:	e0 e9       	ldi	r30, 0x90	; 144
    819c:	fd e0       	ldi	r31, 0x0D	; 13
    819e:	10 82       	st	Z, r1
	game.selection = START_SELECTED;
    81a0:	13 82       	std	Z+3, r1	; 0x03
	clear_sprites();
    81a2:	0e 94 8f 40 	call	0x811e	; 0x811e <clear_sprites>
	Print(8, 15, (char*) str1Player);
    81a6:	4c ea       	ldi	r20, 0xAC	; 172
    81a8:	59 e0       	ldi	r21, 0x09	; 9
    81aa:	6f e0       	ldi	r22, 0x0F	; 15
    81ac:	70 e0       	ldi	r23, 0x00	; 0
    81ae:	88 e0       	ldi	r24, 0x08	; 8
    81b0:	90 e0       	ldi	r25, 0x00	; 0
    81b2:	0e 94 a9 36 	call	0x6d52	; 0x6d52 <Print>
	Print(8, 16, (char*) strHighscores);
    81b6:	40 ea       	ldi	r20, 0xA0	; 160
    81b8:	59 e0       	ldi	r21, 0x09	; 9
    81ba:	60 e1       	ldi	r22, 0x10	; 16
    81bc:	70 e0       	ldi	r23, 0x00	; 0
    81be:	88 e0       	ldi	r24, 0x08	; 8
    81c0:	90 e0       	ldi	r25, 0x00	; 0
    81c2:	0e 94 a9 36 	call	0x6d52	; 0x6d52 <Print>
	Print(6, 21, (char*) strSelectHandle);
    81c6:	4f e8       	ldi	r20, 0x8F	; 143
    81c8:	59 e0       	ldi	r21, 0x09	; 9
    81ca:	65 e1       	ldi	r22, 0x15	; 21
    81cc:	70 e0       	ldi	r23, 0x00	; 0
    81ce:	86 e0       	ldi	r24, 0x06	; 6
    81d0:	90 e0       	ldi	r25, 0x00	; 0
    81d2:	0e 94 a9 36 	call	0x6d52	; 0x6d52 <Print>
	Print(4, 26, (char*) strCopyright);
    81d6:	42 eb       	ldi	r20, 0xB2	; 178
    81d8:	59 e0       	ldi	r21, 0x09	; 9
    81da:	6a e1       	ldi	r22, 0x1A	; 26
    81dc:	70 e0       	ldi	r23, 0x00	; 0
    81de:	84 e0       	ldi	r24, 0x04	; 4
    81e0:	90 e0       	ldi	r25, 0x00	; 0
    81e2:	0e 94 a9 36 	call	0x6d52	; 0x6d52 <Print>
	DrawMap2(6, 5, (const char*) map_splash);
    81e6:	41 e8       	ldi	r20, 0x81	; 129
    81e8:	57 e4       	ldi	r21, 0x47	; 71
    81ea:	65 e0       	ldi	r22, 0x05	; 5
    81ec:	86 e0       	ldi	r24, 0x06	; 6
    81ee:	0e 94 5c 36 	call	0x6cb8	; 0x6cb8 <DrawMap>
	LBMapSprite(0, map_right_arrow, 0);
    81f2:	40 e0       	ldi	r20, 0x00	; 0
    81f4:	65 e9       	ldi	r22, 0x95	; 149
    81f6:	7e e2       	ldi	r23, 0x2E	; 46
    81f8:	80 e0       	ldi	r24, 0x00	; 0
    81fa:	0e 94 e1 37 	call	0x6fc2	; 0x6fc2 <LBMapSprite>
	LBMoveSprite(0, 7*8, 15*8, 1, 1);
    81fe:	01 e0       	ldi	r16, 0x01	; 1
    8200:	21 e0       	ldi	r18, 0x01	; 1
    8202:	48 e7       	ldi	r20, 0x78	; 120
    8204:	68 e3       	ldi	r22, 0x38	; 56
    8206:	80 e0       	ldi	r24, 0x00	; 0
    8208:	0e 94 33 38 	call	0x7066	; 0x7066 <LBMoveSprite>
	LBRotateSprites(1);
    820c:	81 e0       	ldi	r24, 0x01	; 1
}
    820e:	0f 91       	pop	r16
	Print(6, 21, (char*) strSelectHandle);
	Print(4, 26, (char*) strCopyright);
	DrawMap2(6, 5, (const char*) map_splash);
	LBMapSprite(0, map_right_arrow, 0);
	LBMoveSprite(0, 7*8, 15*8, 1, 1);
	LBRotateSprites(1);
    8210:	0c 94 71 38 	jmp	0x70e2	; 0x70e2 <LBRotateSprites>

00008214 <select_pressed>:
}

char select_pressed(JoyPadState* p)
{
    8214:	fc 01       	movw	r30, r24
    8216:	20 81       	ld	r18, Z
    8218:	31 81       	ldd	r19, Z+1	; 0x01
    821a:	28 70       	andi	r18, 0x08	; 8
    821c:	31 70       	andi	r19, 0x01	; 1
	return (p->pressed & BTN_A) || (p->pressed & BTN_START);
    821e:	81 e0       	ldi	r24, 0x01	; 1
    8220:	23 2b       	or	r18, r19
    8222:	09 f4       	brne	.+2      	; 0x8226 <select_pressed+0x12>
    8224:	80 e0       	ldi	r24, 0x00	; 0
}
    8226:	08 95       	ret

00008228 <update_splash>:

void update_splash()
{
    8228:	0f 93       	push	r16
	if (game.joypadState.pressed & BTN_DOWN && game.selection == START_SELECTED)
    822a:	80 91 4c 0e 	lds	r24, 0x0E4C
    822e:	85 ff       	sbrs	r24, 5
    8230:	0b c0       	rjmp	.+22     	; 0x8248 <update_splash+0x20>
    8232:	90 91 93 0d 	lds	r25, 0x0D93
    8236:	91 11       	cpse	r25, r1
    8238:	07 c0       	rjmp	.+14     	; 0x8248 <update_splash+0x20>
	{
		game.selection = HIGH_SCORES_SELECTED;
    823a:	81 e0       	ldi	r24, 0x01	; 1
    823c:	80 93 93 0d 	sts	0x0D93, r24
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
    8240:	01 e0       	ldi	r16, 0x01	; 1
    8242:	21 e0       	ldi	r18, 0x01	; 1
    8244:	40 e8       	ldi	r20, 0x80	; 128
    8246:	0b c0       	rjmp	.+22     	; 0x825e <update_splash+0x36>
	}
	else if (game.joypadState.pressed & BTN_UP && game.selection == HIGH_SCORES_SELECTED)
    8248:	84 ff       	sbrs	r24, 4
    824a:	0e c0       	rjmp	.+28     	; 0x8268 <update_splash+0x40>
    824c:	80 91 93 0d 	lds	r24, 0x0D93
    8250:	81 30       	cpi	r24, 0x01	; 1
    8252:	51 f4       	brne	.+20     	; 0x8268 <update_splash+0x40>
	{
		game.selection = START_SELECTED;
    8254:	10 92 93 0d 	sts	0x0D93, r1
		LBMoveSprite(0, 7*8, 15*8, 1, 1);
    8258:	01 e0       	ldi	r16, 0x01	; 1
    825a:	21 e0       	ldi	r18, 0x01	; 1
    825c:	48 e7       	ldi	r20, 0x78	; 120
    825e:	68 e3       	ldi	r22, 0x38	; 56
    8260:	80 e0       	ldi	r24, 0x00	; 0
    8262:	0e 94 33 38 	call	0x7066	; 0x7066 <LBMoveSprite>
    8266:	11 c0       	rjmp	.+34     	; 0x828a <update_splash+0x62>
	}
	else if (select_pressed(&game.joypadState) && game.selection == START_SELECTED)
    8268:	8c e4       	ldi	r24, 0x4C	; 76
    826a:	9e e0       	ldi	r25, 0x0E	; 14
    826c:	0e 94 0a 41 	call	0x8214	; 0x8214 <select_pressed>
    8270:	88 23       	and	r24, r24
    8272:	59 f0       	breq	.+22     	; 0x828a <update_splash+0x62>
    8274:	80 91 93 0d 	lds	r24, 0x0D93
    8278:	81 11       	cpse	r24, r1
    827a:	07 c0       	rjmp	.+14     	; 0x828a <update_splash+0x62>
	{
		game.current_screen = LEVEL;
    827c:	82 e0       	ldi	r24, 0x02	; 2
    827e:	80 93 90 0d 	sts	0x0D90, r24
		level_transition(0);
    8282:	80 e0       	ldi	r24, 0x00	; 0
		return;
	}
}
    8284:	0f 91       	pop	r16
		LBMoveSprite(0, 7*8, 15*8, 1, 1);
	}
	else if (select_pressed(&game.joypadState) && game.selection == START_SELECTED)
	{
		game.current_screen = LEVEL;
		level_transition(0);
    8286:	0c 94 a1 40 	jmp	0x8142	; 0x8142 <level_transition>
		return;
	}
}
    828a:	0f 91       	pop	r16
    828c:	08 95       	ret

0000828e <main>:

int main()
{
	// Initialize
	InitMusicPlayer(my_patches);
    828e:	89 e3       	ldi	r24, 0x39	; 57
    8290:	9b e1       	ldi	r25, 0x1B	; 27
    8292:	0e 94 24 2b 	call	0x5648	; 0x5648 <InitMusicPlayer>
	ClearVram();
    8296:	0e 94 4d 29 	call	0x529a	; 0x529a <ClearVram>
	SetMasterVolume(0x05);
    829a:	85 e0       	ldi	r24, 0x05	; 5
    829c:	0e 94 a1 2e 	call	0x5d42	; 0x5d42 <SetMasterVolume>
	SetTileTable(tiles_data);
    82a0:	8b e9       	ldi	r24, 0x9B	; 155
    82a2:	9e e2       	ldi	r25, 0x2E	; 46
    82a4:	0e 94 6f 29 	call	0x52de	; 0x52de <SetTileTable>
	SetSpritesTileTable(sprites_data);
    82a8:	8b ea       	ldi	r24, 0xAB	; 171
    82aa:	91 e2       	ldi	r25, 0x21	; 33
    82ac:	0e 94 48 29 	call	0x5290	; 0x5290 <SetSpritesTileTable>
	SetFontTilesIndex(TILES_DATA_SIZE);
    82b0:	83 e2       	ldi	r24, 0x23	; 35
    82b2:	0e 94 6c 29 	call	0x52d8	; 0x52d8 <SetFontTilesIndex>
	FadeIn(FRAMES_PER_FADE, false);
    82b6:	60 e0       	ldi	r22, 0x00	; 0
    82b8:	83 e0       	ldi	r24, 0x03	; 3
    82ba:	0e 94 20 37 	call	0x6e40	; 0x6e40 <FadeIn>
	init_game_state();
    82be:	0e 94 d8 38 	call	0x71b0	; 0x71b0 <init_game_state>
	load_splash();
    82c2:	0e 94 cc 40 	call	0x8198	; 0x8198 <load_splash>
	while (1)
	{
		WaitVsync(1);
    82c6:	81 e0       	ldi	r24, 0x01	; 1
    82c8:	90 e0       	ldi	r25, 0x00	; 0
    82ca:	0e 94 c4 36 	call	0x6d88	; 0x6d88 <WaitVsync>
		LBGetJoyPadState(&game.joypadState, 0);
    82ce:	60 e0       	ldi	r22, 0x00	; 0
    82d0:	8c e4       	ldi	r24, 0x4C	; 76
    82d2:	9e e0       	ldi	r25, 0x0E	; 14
    82d4:	0e 94 87 37 	call	0x6f0e	; 0x6f0e <LBGetJoyPadState>
		switch (game.current_screen)
    82d8:	80 91 90 0d 	lds	r24, 0x0D90
    82dc:	88 23       	and	r24, r24
    82de:	51 f0       	breq	.+20     	; 0x82f4 <main+0x66>
    82e0:	82 30       	cpi	r24, 0x02	; 2
    82e2:	89 f7       	brne	.-30     	; 0x82c6 <main+0x38>
			case SPLASH:
				update_splash();
				LBRotateSprites(1);
				break;
			case LEVEL:
				update_level();
    82e4:	0e 94 47 40 	call	0x808e	; 0x808e <update_level>
				update_player();
    82e8:	0e 94 b2 3b 	call	0x7764	; 0x7764 <update_player>
				update_player_position();
    82ec:	0e 94 c7 3f 	call	0x7f8e	; 0x7f8e <update_player_position>
				LBRotateSprites(6);
    82f0:	86 e0       	ldi	r24, 0x06	; 6
    82f2:	03 c0       	rjmp	.+6      	; 0x82fa <main+0x6c>
		WaitVsync(1);
		LBGetJoyPadState(&game.joypadState, 0);
		switch (game.current_screen)
		{
			case SPLASH:
				update_splash();
    82f4:	0e 94 14 41 	call	0x8228	; 0x8228 <update_splash>
				LBRotateSprites(1);
    82f8:	81 e0       	ldi	r24, 0x01	; 1
				break;
			case LEVEL:
				update_level();
				update_player();
				update_player_position();
				LBRotateSprites(6);
    82fa:	0e 94 71 38 	call	0x70e2	; 0x70e2 <LBRotateSprites>
				break;
    82fe:	e3 cf       	rjmp	.-58     	; 0x82c6 <main+0x38>

00008300 <__udivmodhi4>:
    8300:	aa 1b       	sub	r26, r26
    8302:	bb 1b       	sub	r27, r27
    8304:	51 e1       	ldi	r21, 0x11	; 17
    8306:	07 c0       	rjmp	.+14     	; 0x8316 <__udivmodhi4_ep>

00008308 <__udivmodhi4_loop>:
    8308:	aa 1f       	adc	r26, r26
    830a:	bb 1f       	adc	r27, r27
    830c:	a6 17       	cp	r26, r22
    830e:	b7 07       	cpc	r27, r23
    8310:	10 f0       	brcs	.+4      	; 0x8316 <__udivmodhi4_ep>
    8312:	a6 1b       	sub	r26, r22
    8314:	b7 0b       	sbc	r27, r23

00008316 <__udivmodhi4_ep>:
    8316:	88 1f       	adc	r24, r24
    8318:	99 1f       	adc	r25, r25
    831a:	5a 95       	dec	r21
    831c:	a9 f7       	brne	.-22     	; 0x8308 <__udivmodhi4_loop>
    831e:	80 95       	com	r24
    8320:	90 95       	com	r25
    8322:	bc 01       	movw	r22, r24
    8324:	cd 01       	movw	r24, r26
    8326:	08 95       	ret

00008328 <__divmodhi4>:
    8328:	97 fb       	bst	r25, 7
    832a:	07 2e       	mov	r0, r23
    832c:	16 f4       	brtc	.+4      	; 0x8332 <__divmodhi4+0xa>
    832e:	00 94       	com	r0
    8330:	07 d0       	rcall	.+14     	; 0x8340 <__divmodhi4_neg1>
    8332:	77 fd       	sbrc	r23, 7
    8334:	09 d0       	rcall	.+18     	; 0x8348 <__divmodhi4_neg2>
    8336:	0e 94 80 41 	call	0x8300	; 0x8300 <__udivmodhi4>
    833a:	07 fc       	sbrc	r0, 7
    833c:	05 d0       	rcall	.+10     	; 0x8348 <__divmodhi4_neg2>
    833e:	3e f4       	brtc	.+14     	; 0x834e <__divmodhi4_exit>

00008340 <__divmodhi4_neg1>:
    8340:	90 95       	com	r25
    8342:	81 95       	neg	r24
    8344:	9f 4f       	sbci	r25, 0xFF	; 255
    8346:	08 95       	ret

00008348 <__divmodhi4_neg2>:
    8348:	70 95       	com	r23
    834a:	61 95       	neg	r22
    834c:	7f 4f       	sbci	r23, 0xFF	; 255

0000834e <__divmodhi4_exit>:
    834e:	08 95       	ret

00008350 <__tablejump2__>:
    8350:	ee 0f       	add	r30, r30
    8352:	ff 1f       	adc	r31, r31
    8354:	05 90       	lpm	r0, Z+
    8356:	f4 91       	lpm	r31, Z
    8358:	e0 2d       	mov	r30, r0
    835a:	09 94       	ijmp

0000835c <__subsf3>:
    835c:	50 58       	subi	r21, 0x80	; 128

0000835e <__addsf3>:
    835e:	bb 27       	eor	r27, r27
    8360:	aa 27       	eor	r26, r26
    8362:	0e d0       	rcall	.+28     	; 0x8380 <__addsf3x>
    8364:	08 c1       	rjmp	.+528    	; 0x8576 <__fp_round>
    8366:	f9 d0       	rcall	.+498    	; 0x855a <__fp_pscA>
    8368:	30 f0       	brcs	.+12     	; 0x8376 <__addsf3+0x18>
    836a:	fe d0       	rcall	.+508    	; 0x8568 <__fp_pscB>
    836c:	20 f0       	brcs	.+8      	; 0x8376 <__addsf3+0x18>
    836e:	31 f4       	brne	.+12     	; 0x837c <__addsf3+0x1e>
    8370:	9f 3f       	cpi	r25, 0xFF	; 255
    8372:	11 f4       	brne	.+4      	; 0x8378 <__addsf3+0x1a>
    8374:	1e f4       	brtc	.+6      	; 0x837c <__addsf3+0x1e>
    8376:	ee c0       	rjmp	.+476    	; 0x8554 <__fp_nan>
    8378:	0e f4       	brtc	.+2      	; 0x837c <__addsf3+0x1e>
    837a:	e0 95       	com	r30
    837c:	e7 fb       	bst	r30, 7
    837e:	e4 c0       	rjmp	.+456    	; 0x8548 <__fp_inf>

00008380 <__addsf3x>:
    8380:	e9 2f       	mov	r30, r25
    8382:	0a d1       	rcall	.+532    	; 0x8598 <__fp_split3>
    8384:	80 f3       	brcs	.-32     	; 0x8366 <__addsf3+0x8>
    8386:	ba 17       	cp	r27, r26
    8388:	62 07       	cpc	r22, r18
    838a:	73 07       	cpc	r23, r19
    838c:	84 07       	cpc	r24, r20
    838e:	95 07       	cpc	r25, r21
    8390:	18 f0       	brcs	.+6      	; 0x8398 <__addsf3x+0x18>
    8392:	71 f4       	brne	.+28     	; 0x83b0 <__addsf3x+0x30>
    8394:	9e f5       	brtc	.+102    	; 0x83fc <__addsf3x+0x7c>
    8396:	22 c1       	rjmp	.+580    	; 0x85dc <__fp_zero>
    8398:	0e f4       	brtc	.+2      	; 0x839c <__addsf3x+0x1c>
    839a:	e0 95       	com	r30
    839c:	0b 2e       	mov	r0, r27
    839e:	ba 2f       	mov	r27, r26
    83a0:	a0 2d       	mov	r26, r0
    83a2:	0b 01       	movw	r0, r22
    83a4:	b9 01       	movw	r22, r18
    83a6:	90 01       	movw	r18, r0
    83a8:	0c 01       	movw	r0, r24
    83aa:	ca 01       	movw	r24, r20
    83ac:	a0 01       	movw	r20, r0
    83ae:	11 24       	eor	r1, r1
    83b0:	ff 27       	eor	r31, r31
    83b2:	59 1b       	sub	r21, r25
    83b4:	99 f0       	breq	.+38     	; 0x83dc <__addsf3x+0x5c>
    83b6:	59 3f       	cpi	r21, 0xF9	; 249
    83b8:	50 f4       	brcc	.+20     	; 0x83ce <__addsf3x+0x4e>
    83ba:	50 3e       	cpi	r21, 0xE0	; 224
    83bc:	68 f1       	brcs	.+90     	; 0x8418 <__addsf3x+0x98>
    83be:	1a 16       	cp	r1, r26
    83c0:	f0 40       	sbci	r31, 0x00	; 0
    83c2:	a2 2f       	mov	r26, r18
    83c4:	23 2f       	mov	r18, r19
    83c6:	34 2f       	mov	r19, r20
    83c8:	44 27       	eor	r20, r20
    83ca:	58 5f       	subi	r21, 0xF8	; 248
    83cc:	f3 cf       	rjmp	.-26     	; 0x83b4 <__addsf3x+0x34>
    83ce:	46 95       	lsr	r20
    83d0:	37 95       	ror	r19
    83d2:	27 95       	ror	r18
    83d4:	a7 95       	ror	r26
    83d6:	f0 40       	sbci	r31, 0x00	; 0
    83d8:	53 95       	inc	r21
    83da:	c9 f7       	brne	.-14     	; 0x83ce <__addsf3x+0x4e>
    83dc:	7e f4       	brtc	.+30     	; 0x83fc <__addsf3x+0x7c>
    83de:	1f 16       	cp	r1, r31
    83e0:	ba 0b       	sbc	r27, r26
    83e2:	62 0b       	sbc	r22, r18
    83e4:	73 0b       	sbc	r23, r19
    83e6:	84 0b       	sbc	r24, r20
    83e8:	ba f0       	brmi	.+46     	; 0x8418 <__addsf3x+0x98>
    83ea:	91 50       	subi	r25, 0x01	; 1
    83ec:	a1 f0       	breq	.+40     	; 0x8416 <__addsf3x+0x96>
    83ee:	ff 0f       	add	r31, r31
    83f0:	bb 1f       	adc	r27, r27
    83f2:	66 1f       	adc	r22, r22
    83f4:	77 1f       	adc	r23, r23
    83f6:	88 1f       	adc	r24, r24
    83f8:	c2 f7       	brpl	.-16     	; 0x83ea <__addsf3x+0x6a>
    83fa:	0e c0       	rjmp	.+28     	; 0x8418 <__addsf3x+0x98>
    83fc:	ba 0f       	add	r27, r26
    83fe:	62 1f       	adc	r22, r18
    8400:	73 1f       	adc	r23, r19
    8402:	84 1f       	adc	r24, r20
    8404:	48 f4       	brcc	.+18     	; 0x8418 <__addsf3x+0x98>
    8406:	87 95       	ror	r24
    8408:	77 95       	ror	r23
    840a:	67 95       	ror	r22
    840c:	b7 95       	ror	r27
    840e:	f7 95       	ror	r31
    8410:	9e 3f       	cpi	r25, 0xFE	; 254
    8412:	08 f0       	brcs	.+2      	; 0x8416 <__addsf3x+0x96>
    8414:	b3 cf       	rjmp	.-154    	; 0x837c <__addsf3+0x1e>
    8416:	93 95       	inc	r25
    8418:	88 0f       	add	r24, r24
    841a:	08 f0       	brcs	.+2      	; 0x841e <__addsf3x+0x9e>
    841c:	99 27       	eor	r25, r25
    841e:	ee 0f       	add	r30, r30
    8420:	97 95       	ror	r25
    8422:	87 95       	ror	r24
    8424:	08 95       	ret

00008426 <__cmpsf2>:
    8426:	6c d0       	rcall	.+216    	; 0x8500 <__fp_cmp>
    8428:	08 f4       	brcc	.+2      	; 0x842c <__cmpsf2+0x6>
    842a:	81 e0       	ldi	r24, 0x01	; 1
    842c:	08 95       	ret

0000842e <__fixunssfsi>:
    842e:	bc d0       	rcall	.+376    	; 0x85a8 <__fp_splitA>
    8430:	88 f0       	brcs	.+34     	; 0x8454 <__fixunssfsi+0x26>
    8432:	9f 57       	subi	r25, 0x7F	; 127
    8434:	90 f0       	brcs	.+36     	; 0x845a <__fixunssfsi+0x2c>
    8436:	b9 2f       	mov	r27, r25
    8438:	99 27       	eor	r25, r25
    843a:	b7 51       	subi	r27, 0x17	; 23
    843c:	a0 f0       	brcs	.+40     	; 0x8466 <__fixunssfsi+0x38>
    843e:	d1 f0       	breq	.+52     	; 0x8474 <__fixunssfsi+0x46>
    8440:	66 0f       	add	r22, r22
    8442:	77 1f       	adc	r23, r23
    8444:	88 1f       	adc	r24, r24
    8446:	99 1f       	adc	r25, r25
    8448:	1a f0       	brmi	.+6      	; 0x8450 <__fixunssfsi+0x22>
    844a:	ba 95       	dec	r27
    844c:	c9 f7       	brne	.-14     	; 0x8440 <__fixunssfsi+0x12>
    844e:	12 c0       	rjmp	.+36     	; 0x8474 <__fixunssfsi+0x46>
    8450:	b1 30       	cpi	r27, 0x01	; 1
    8452:	81 f0       	breq	.+32     	; 0x8474 <__fixunssfsi+0x46>
    8454:	c3 d0       	rcall	.+390    	; 0x85dc <__fp_zero>
    8456:	b1 e0       	ldi	r27, 0x01	; 1
    8458:	08 95       	ret
    845a:	c0 c0       	rjmp	.+384    	; 0x85dc <__fp_zero>
    845c:	67 2f       	mov	r22, r23
    845e:	78 2f       	mov	r23, r24
    8460:	88 27       	eor	r24, r24
    8462:	b8 5f       	subi	r27, 0xF8	; 248
    8464:	39 f0       	breq	.+14     	; 0x8474 <__fixunssfsi+0x46>
    8466:	b9 3f       	cpi	r27, 0xF9	; 249
    8468:	cc f3       	brlt	.-14     	; 0x845c <__fixunssfsi+0x2e>
    846a:	86 95       	lsr	r24
    846c:	77 95       	ror	r23
    846e:	67 95       	ror	r22
    8470:	b3 95       	inc	r27
    8472:	d9 f7       	brne	.-10     	; 0x846a <__fixunssfsi+0x3c>
    8474:	3e f4       	brtc	.+14     	; 0x8484 <__fixunssfsi+0x56>
    8476:	90 95       	com	r25
    8478:	80 95       	com	r24
    847a:	70 95       	com	r23
    847c:	61 95       	neg	r22
    847e:	7f 4f       	sbci	r23, 0xFF	; 255
    8480:	8f 4f       	sbci	r24, 0xFF	; 255
    8482:	9f 4f       	sbci	r25, 0xFF	; 255
    8484:	08 95       	ret

00008486 <__floatunsisf>:
    8486:	e8 94       	clt
    8488:	09 c0       	rjmp	.+18     	; 0x849c <__floatsisf+0x12>

0000848a <__floatsisf>:
    848a:	97 fb       	bst	r25, 7
    848c:	3e f4       	brtc	.+14     	; 0x849c <__floatsisf+0x12>
    848e:	90 95       	com	r25
    8490:	80 95       	com	r24
    8492:	70 95       	com	r23
    8494:	61 95       	neg	r22
    8496:	7f 4f       	sbci	r23, 0xFF	; 255
    8498:	8f 4f       	sbci	r24, 0xFF	; 255
    849a:	9f 4f       	sbci	r25, 0xFF	; 255
    849c:	99 23       	and	r25, r25
    849e:	a9 f0       	breq	.+42     	; 0x84ca <__floatsisf+0x40>
    84a0:	f9 2f       	mov	r31, r25
    84a2:	96 e9       	ldi	r25, 0x96	; 150
    84a4:	bb 27       	eor	r27, r27
    84a6:	93 95       	inc	r25
    84a8:	f6 95       	lsr	r31
    84aa:	87 95       	ror	r24
    84ac:	77 95       	ror	r23
    84ae:	67 95       	ror	r22
    84b0:	b7 95       	ror	r27
    84b2:	f1 11       	cpse	r31, r1
    84b4:	f8 cf       	rjmp	.-16     	; 0x84a6 <__floatsisf+0x1c>
    84b6:	fa f4       	brpl	.+62     	; 0x84f6 <__floatsisf+0x6c>
    84b8:	bb 0f       	add	r27, r27
    84ba:	11 f4       	brne	.+4      	; 0x84c0 <__floatsisf+0x36>
    84bc:	60 ff       	sbrs	r22, 0
    84be:	1b c0       	rjmp	.+54     	; 0x84f6 <__floatsisf+0x6c>
    84c0:	6f 5f       	subi	r22, 0xFF	; 255
    84c2:	7f 4f       	sbci	r23, 0xFF	; 255
    84c4:	8f 4f       	sbci	r24, 0xFF	; 255
    84c6:	9f 4f       	sbci	r25, 0xFF	; 255
    84c8:	16 c0       	rjmp	.+44     	; 0x84f6 <__floatsisf+0x6c>
    84ca:	88 23       	and	r24, r24
    84cc:	11 f0       	breq	.+4      	; 0x84d2 <__floatsisf+0x48>
    84ce:	96 e9       	ldi	r25, 0x96	; 150
    84d0:	11 c0       	rjmp	.+34     	; 0x84f4 <__floatsisf+0x6a>
    84d2:	77 23       	and	r23, r23
    84d4:	21 f0       	breq	.+8      	; 0x84de <__floatsisf+0x54>
    84d6:	9e e8       	ldi	r25, 0x8E	; 142
    84d8:	87 2f       	mov	r24, r23
    84da:	76 2f       	mov	r23, r22
    84dc:	05 c0       	rjmp	.+10     	; 0x84e8 <__floatsisf+0x5e>
    84de:	66 23       	and	r22, r22
    84e0:	71 f0       	breq	.+28     	; 0x84fe <__floatsisf+0x74>
    84e2:	96 e8       	ldi	r25, 0x86	; 134
    84e4:	86 2f       	mov	r24, r22
    84e6:	70 e0       	ldi	r23, 0x00	; 0
    84e8:	60 e0       	ldi	r22, 0x00	; 0
    84ea:	2a f0       	brmi	.+10     	; 0x84f6 <__floatsisf+0x6c>
    84ec:	9a 95       	dec	r25
    84ee:	66 0f       	add	r22, r22
    84f0:	77 1f       	adc	r23, r23
    84f2:	88 1f       	adc	r24, r24
    84f4:	da f7       	brpl	.-10     	; 0x84ec <__floatsisf+0x62>
    84f6:	88 0f       	add	r24, r24
    84f8:	96 95       	lsr	r25
    84fa:	87 95       	ror	r24
    84fc:	97 f9       	bld	r25, 7
    84fe:	08 95       	ret

00008500 <__fp_cmp>:
    8500:	99 0f       	add	r25, r25
    8502:	00 08       	sbc	r0, r0
    8504:	55 0f       	add	r21, r21
    8506:	aa 0b       	sbc	r26, r26
    8508:	e0 e8       	ldi	r30, 0x80	; 128
    850a:	fe ef       	ldi	r31, 0xFE	; 254
    850c:	16 16       	cp	r1, r22
    850e:	17 06       	cpc	r1, r23
    8510:	e8 07       	cpc	r30, r24
    8512:	f9 07       	cpc	r31, r25
    8514:	c0 f0       	brcs	.+48     	; 0x8546 <__fp_cmp+0x46>
    8516:	12 16       	cp	r1, r18
    8518:	13 06       	cpc	r1, r19
    851a:	e4 07       	cpc	r30, r20
    851c:	f5 07       	cpc	r31, r21
    851e:	98 f0       	brcs	.+38     	; 0x8546 <__fp_cmp+0x46>
    8520:	62 1b       	sub	r22, r18
    8522:	73 0b       	sbc	r23, r19
    8524:	84 0b       	sbc	r24, r20
    8526:	95 0b       	sbc	r25, r21
    8528:	39 f4       	brne	.+14     	; 0x8538 <__fp_cmp+0x38>
    852a:	0a 26       	eor	r0, r26
    852c:	61 f0       	breq	.+24     	; 0x8546 <__fp_cmp+0x46>
    852e:	23 2b       	or	r18, r19
    8530:	24 2b       	or	r18, r20
    8532:	25 2b       	or	r18, r21
    8534:	21 f4       	brne	.+8      	; 0x853e <__fp_cmp+0x3e>
    8536:	08 95       	ret
    8538:	0a 26       	eor	r0, r26
    853a:	09 f4       	brne	.+2      	; 0x853e <__fp_cmp+0x3e>
    853c:	a1 40       	sbci	r26, 0x01	; 1
    853e:	a6 95       	lsr	r26
    8540:	8f ef       	ldi	r24, 0xFF	; 255
    8542:	81 1d       	adc	r24, r1
    8544:	81 1d       	adc	r24, r1
    8546:	08 95       	ret

00008548 <__fp_inf>:
    8548:	97 f9       	bld	r25, 7
    854a:	9f 67       	ori	r25, 0x7F	; 127
    854c:	80 e8       	ldi	r24, 0x80	; 128
    854e:	70 e0       	ldi	r23, 0x00	; 0
    8550:	60 e0       	ldi	r22, 0x00	; 0
    8552:	08 95       	ret

00008554 <__fp_nan>:
    8554:	9f ef       	ldi	r25, 0xFF	; 255
    8556:	80 ec       	ldi	r24, 0xC0	; 192
    8558:	08 95       	ret

0000855a <__fp_pscA>:
    855a:	00 24       	eor	r0, r0
    855c:	0a 94       	dec	r0
    855e:	16 16       	cp	r1, r22
    8560:	17 06       	cpc	r1, r23
    8562:	18 06       	cpc	r1, r24
    8564:	09 06       	cpc	r0, r25
    8566:	08 95       	ret

00008568 <__fp_pscB>:
    8568:	00 24       	eor	r0, r0
    856a:	0a 94       	dec	r0
    856c:	12 16       	cp	r1, r18
    856e:	13 06       	cpc	r1, r19
    8570:	14 06       	cpc	r1, r20
    8572:	05 06       	cpc	r0, r21
    8574:	08 95       	ret

00008576 <__fp_round>:
    8576:	09 2e       	mov	r0, r25
    8578:	03 94       	inc	r0
    857a:	00 0c       	add	r0, r0
    857c:	11 f4       	brne	.+4      	; 0x8582 <__fp_round+0xc>
    857e:	88 23       	and	r24, r24
    8580:	52 f0       	brmi	.+20     	; 0x8596 <__fp_round+0x20>
    8582:	bb 0f       	add	r27, r27
    8584:	40 f4       	brcc	.+16     	; 0x8596 <__fp_round+0x20>
    8586:	bf 2b       	or	r27, r31
    8588:	11 f4       	brne	.+4      	; 0x858e <__fp_round+0x18>
    858a:	60 ff       	sbrs	r22, 0
    858c:	04 c0       	rjmp	.+8      	; 0x8596 <__fp_round+0x20>
    858e:	6f 5f       	subi	r22, 0xFF	; 255
    8590:	7f 4f       	sbci	r23, 0xFF	; 255
    8592:	8f 4f       	sbci	r24, 0xFF	; 255
    8594:	9f 4f       	sbci	r25, 0xFF	; 255
    8596:	08 95       	ret

00008598 <__fp_split3>:
    8598:	57 fd       	sbrc	r21, 7
    859a:	90 58       	subi	r25, 0x80	; 128
    859c:	44 0f       	add	r20, r20
    859e:	55 1f       	adc	r21, r21
    85a0:	59 f0       	breq	.+22     	; 0x85b8 <__fp_splitA+0x10>
    85a2:	5f 3f       	cpi	r21, 0xFF	; 255
    85a4:	71 f0       	breq	.+28     	; 0x85c2 <__fp_splitA+0x1a>
    85a6:	47 95       	ror	r20

000085a8 <__fp_splitA>:
    85a8:	88 0f       	add	r24, r24
    85aa:	97 fb       	bst	r25, 7
    85ac:	99 1f       	adc	r25, r25
    85ae:	61 f0       	breq	.+24     	; 0x85c8 <__fp_splitA+0x20>
    85b0:	9f 3f       	cpi	r25, 0xFF	; 255
    85b2:	79 f0       	breq	.+30     	; 0x85d2 <__fp_splitA+0x2a>
    85b4:	87 95       	ror	r24
    85b6:	08 95       	ret
    85b8:	12 16       	cp	r1, r18
    85ba:	13 06       	cpc	r1, r19
    85bc:	14 06       	cpc	r1, r20
    85be:	55 1f       	adc	r21, r21
    85c0:	f2 cf       	rjmp	.-28     	; 0x85a6 <__fp_split3+0xe>
    85c2:	46 95       	lsr	r20
    85c4:	f1 df       	rcall	.-30     	; 0x85a8 <__fp_splitA>
    85c6:	08 c0       	rjmp	.+16     	; 0x85d8 <__fp_splitA+0x30>
    85c8:	16 16       	cp	r1, r22
    85ca:	17 06       	cpc	r1, r23
    85cc:	18 06       	cpc	r1, r24
    85ce:	99 1f       	adc	r25, r25
    85d0:	f1 cf       	rjmp	.-30     	; 0x85b4 <__fp_splitA+0xc>
    85d2:	86 95       	lsr	r24
    85d4:	71 05       	cpc	r23, r1
    85d6:	61 05       	cpc	r22, r1
    85d8:	08 94       	sec
    85da:	08 95       	ret

000085dc <__fp_zero>:
    85dc:	e8 94       	clt

000085de <__fp_szero>:
    85de:	bb 27       	eor	r27, r27
    85e0:	66 27       	eor	r22, r22
    85e2:	77 27       	eor	r23, r23
    85e4:	cb 01       	movw	r24, r22
    85e6:	97 f9       	bld	r25, 7
    85e8:	08 95       	ret

000085ea <__gesf2>:
    85ea:	8a df       	rcall	.-236    	; 0x8500 <__fp_cmp>
    85ec:	08 f4       	brcc	.+2      	; 0x85f0 <__gesf2+0x6>
    85ee:	8f ef       	ldi	r24, 0xFF	; 255
    85f0:	08 95       	ret

000085f2 <__mulsf3>:
    85f2:	0b d0       	rcall	.+22     	; 0x860a <__mulsf3x>
    85f4:	c0 cf       	rjmp	.-128    	; 0x8576 <__fp_round>
    85f6:	b1 df       	rcall	.-158    	; 0x855a <__fp_pscA>
    85f8:	28 f0       	brcs	.+10     	; 0x8604 <__mulsf3+0x12>
    85fa:	b6 df       	rcall	.-148    	; 0x8568 <__fp_pscB>
    85fc:	18 f0       	brcs	.+6      	; 0x8604 <__mulsf3+0x12>
    85fe:	95 23       	and	r25, r21
    8600:	09 f0       	breq	.+2      	; 0x8604 <__mulsf3+0x12>
    8602:	a2 cf       	rjmp	.-188    	; 0x8548 <__fp_inf>
    8604:	a7 cf       	rjmp	.-178    	; 0x8554 <__fp_nan>
    8606:	11 24       	eor	r1, r1
    8608:	ea cf       	rjmp	.-44     	; 0x85de <__fp_szero>

0000860a <__mulsf3x>:
    860a:	c6 df       	rcall	.-116    	; 0x8598 <__fp_split3>
    860c:	a0 f3       	brcs	.-24     	; 0x85f6 <__mulsf3+0x4>

0000860e <__mulsf3_pse>:
    860e:	95 9f       	mul	r25, r21
    8610:	d1 f3       	breq	.-12     	; 0x8606 <__mulsf3+0x14>
    8612:	95 0f       	add	r25, r21
    8614:	50 e0       	ldi	r21, 0x00	; 0
    8616:	55 1f       	adc	r21, r21
    8618:	62 9f       	mul	r22, r18
    861a:	f0 01       	movw	r30, r0
    861c:	72 9f       	mul	r23, r18
    861e:	bb 27       	eor	r27, r27
    8620:	f0 0d       	add	r31, r0
    8622:	b1 1d       	adc	r27, r1
    8624:	63 9f       	mul	r22, r19
    8626:	aa 27       	eor	r26, r26
    8628:	f0 0d       	add	r31, r0
    862a:	b1 1d       	adc	r27, r1
    862c:	aa 1f       	adc	r26, r26
    862e:	64 9f       	mul	r22, r20
    8630:	66 27       	eor	r22, r22
    8632:	b0 0d       	add	r27, r0
    8634:	a1 1d       	adc	r26, r1
    8636:	66 1f       	adc	r22, r22
    8638:	82 9f       	mul	r24, r18
    863a:	22 27       	eor	r18, r18
    863c:	b0 0d       	add	r27, r0
    863e:	a1 1d       	adc	r26, r1
    8640:	62 1f       	adc	r22, r18
    8642:	73 9f       	mul	r23, r19
    8644:	b0 0d       	add	r27, r0
    8646:	a1 1d       	adc	r26, r1
    8648:	62 1f       	adc	r22, r18
    864a:	83 9f       	mul	r24, r19
    864c:	a0 0d       	add	r26, r0
    864e:	61 1d       	adc	r22, r1
    8650:	22 1f       	adc	r18, r18
    8652:	74 9f       	mul	r23, r20
    8654:	33 27       	eor	r19, r19
    8656:	a0 0d       	add	r26, r0
    8658:	61 1d       	adc	r22, r1
    865a:	23 1f       	adc	r18, r19
    865c:	84 9f       	mul	r24, r20
    865e:	60 0d       	add	r22, r0
    8660:	21 1d       	adc	r18, r1
    8662:	82 2f       	mov	r24, r18
    8664:	76 2f       	mov	r23, r22
    8666:	6a 2f       	mov	r22, r26
    8668:	11 24       	eor	r1, r1
    866a:	9f 57       	subi	r25, 0x7F	; 127
    866c:	50 40       	sbci	r21, 0x00	; 0
    866e:	8a f0       	brmi	.+34     	; 0x8692 <__mulsf3_pse+0x84>
    8670:	e1 f0       	breq	.+56     	; 0x86aa <__mulsf3_pse+0x9c>
    8672:	88 23       	and	r24, r24
    8674:	4a f0       	brmi	.+18     	; 0x8688 <__mulsf3_pse+0x7a>
    8676:	ee 0f       	add	r30, r30
    8678:	ff 1f       	adc	r31, r31
    867a:	bb 1f       	adc	r27, r27
    867c:	66 1f       	adc	r22, r22
    867e:	77 1f       	adc	r23, r23
    8680:	88 1f       	adc	r24, r24
    8682:	91 50       	subi	r25, 0x01	; 1
    8684:	50 40       	sbci	r21, 0x00	; 0
    8686:	a9 f7       	brne	.-22     	; 0x8672 <__mulsf3_pse+0x64>
    8688:	9e 3f       	cpi	r25, 0xFE	; 254
    868a:	51 05       	cpc	r21, r1
    868c:	70 f0       	brcs	.+28     	; 0x86aa <__mulsf3_pse+0x9c>
    868e:	5c cf       	rjmp	.-328    	; 0x8548 <__fp_inf>
    8690:	a6 cf       	rjmp	.-180    	; 0x85de <__fp_szero>
    8692:	5f 3f       	cpi	r21, 0xFF	; 255
    8694:	ec f3       	brlt	.-6      	; 0x8690 <__mulsf3_pse+0x82>
    8696:	98 3e       	cpi	r25, 0xE8	; 232
    8698:	dc f3       	brlt	.-10     	; 0x8690 <__mulsf3_pse+0x82>
    869a:	86 95       	lsr	r24
    869c:	77 95       	ror	r23
    869e:	67 95       	ror	r22
    86a0:	b7 95       	ror	r27
    86a2:	f7 95       	ror	r31
    86a4:	e7 95       	ror	r30
    86a6:	9f 5f       	subi	r25, 0xFF	; 255
    86a8:	c1 f7       	brne	.-16     	; 0x869a <__mulsf3_pse+0x8c>
    86aa:	fe 2b       	or	r31, r30
    86ac:	88 0f       	add	r24, r24
    86ae:	91 1d       	adc	r25, r1
    86b0:	96 95       	lsr	r25
    86b2:	87 95       	ror	r24
    86b4:	97 f9       	bld	r25, 7
    86b6:	08 95       	ret

000086b8 <_exit>:
    86b8:	f8 94       	cli

000086ba <__stop_program>:
    86ba:	ff cf       	rjmp	.-2      	; 0x86ba <__stop_program>
